Location: PluginClassLoader.java

Content: 

public InputStream getResourceAsStream(String name){

  URL url=getResource(name);

  try {

    return url != null ? url.openStream() : null;

  }

 catch (  IOException e) {

  }

  return null;

}

Location: PluginClassLoader.java

Content: 

@Override public Enumeration<URL> getResources(String name) throws IOException {

  Enumeration<URL> systemUrls=null;

  if (system != null) {

    systemUrls=system.getResources(name);

  }

  Enumeration<URL> localUrls=findResources(name);

  Enumeration<URL> parentUrls=null;

  if (getParent() != null) {

    parentUrls=getParent().getResources(name);

  }

  final List<URL> urls=new ArrayList<URL>();

  if (localUrls != null) {

    while (localUrls.hasMoreElements()) {

      URL local=localUrls.nextElement();

      urls.add(local);

    }

  }

  if (systemUrls != null) {

    while (systemUrls.hasMoreElements()) {

      urls.add(systemUrls.nextElement());

    }

  }

  if (parentUrls != null) {

    while (parentUrls.hasMoreElements()) {

      urls.add(parentUrls.nextElement());

    }

  }

  return new Enumeration<URL>(){

    Iterator<URL> iter=urls.iterator();

    public boolean hasMoreElements(){

      return iter.hasNext();

    }

    public URL nextElement(){

      return iter.next();

    }

  }

;

}

Location: PluginClassLoader.java

Content: 

@Override public URL getResource(String name){

  URL url=findResource(name);

  if (url == null)   url=super.getResource(name);

  if (url == null && system != null)   url=system.getResource(name);

  return url;

}

Location: PluginClassLoader.java

Content: 

private Class<?> loadClassFromParent(String name,boolean resolve) throws ClassNotFoundException {

  Class<?> c;

  try {

    c=super.loadClass(name,resolve);

  }

 catch (  ClassNotFoundException e) {

    c=loadClassFromSystem(name);

  }

catch (  SecurityException e) {

    c=loadClassFromSystem(name);

  }

  return c;

}

Location: PluginClassLoader.java

Content: 

private Class<?> loadClassFromSystem(String name) throws ClassNotFoundException {

  Class<?> c=null;

  if (system != null) {

    c=system.loadClass(name);

  }

  return c;

}

Location: PluginClassLoader.java

Content: 

@Override protected synchronized Class<?> loadClass(String name,boolean resolve) throws ClassNotFoundException {

  Class<?> c=findLoadedClass(name);

  if (c == null) {

    try {

      c=findClass(name);

    }

 catch (    ClassNotFoundException|SecurityException e) {

      c=loadClassFromParent(name,resolve);

    }

  }

  if (resolve) {

    resolveClass(c);

  }

  return c;

}

Location: PluginClassLoader.java

Content: 

/** 

 * Overloaded constructor

 * @param urls Array of urls with own libraries and all exported libraries of plugins that are required for this plugin

 * @param parent the parent {@link java.lang.ClassLoader} responsible for loading classes defined in urls.

 */

public PluginClassLoader(URL[] urls,ClassLoader parent){

  super(urls,parent);

  this.urls=urls;

  this.parent=parent;

}

