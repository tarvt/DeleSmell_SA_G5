Location: FetchItemQueue.java

Content: 

public void addFetchItem(FetchItem it){

  if (it == null)   return;

  if (it.datum.getMetaData().containsKey(variableFetchDelayKey)) {

    if (!variableFetchDelaySet) {

      variableFetchDelaySet=true;

      crawlDelay=((LongWritable)(it.datum.getMetaData().get(variableFetchDelayKey))).get();

      minCrawlDelay=((LongWritable)(it.datum.getMetaData().get(variableFetchDelayKey))).get();

      setEndTime(System.currentTimeMillis() - crawlDelay);

    }

    it.datum.getMetaData().remove(variableFetchDelayKey);

  }

  queue.add(it);

}

Location: FetchItemQueue.java

Content: 

public void addInProgressFetchItem(FetchItem it){

  if (it == null)   return;

  inProgress.incrementAndGet();

}

Location: FetchItemQueue.java

Content: 

public synchronized void dump(){

  LOG.info("  maxThreads    = " + maxThreads);

  LOG.info("  inProgress    = " + inProgress.get());

  LOG.info("  crawlDelay    = " + crawlDelay);

  LOG.info("  minCrawlDelay = " + minCrawlDelay);

  LOG.info("  nextFetchTime = " + nextFetchTime.get());

  LOG.info("  now           = " + System.currentTimeMillis());

  for (int i=0; i < queue.size(); i++) {

    FetchItem it=queue.get(i);

    LOG.info("  " + i + ". "+ it.url);

  }

}

Location: FetchItemQueue.java

Content: 

public synchronized int emptyQueue(){

  int presize=queue.size();

  queue.clear();

  return presize;

}

Location: FetchItemQueue.java

Content: 

public FetchItemQueue(Configuration conf,int maxThreads,long crawlDelay,long minCrawlDelay){

  this.maxThreads=maxThreads;

  this.crawlDelay=crawlDelay;

  this.minCrawlDelay=minCrawlDelay;

  setEndTime(System.currentTimeMillis() - crawlDelay);

}

Location: FetchItemQueue.java

Content: 

public void finishFetchItem(FetchItem it,boolean asap){

  if (it != null) {

    inProgress.decrementAndGet();

    setEndTime(System.currentTimeMillis(),asap);

  }

}

Location: FetchItemQueue.java

Content: 

public Text getCookie(){

  return cookie;

}

Location: FetchItemQueue.java

Content: 

public FetchItem getFetchItem(){

  if (inProgress.get() >= maxThreads)   return null;

  long now=System.currentTimeMillis();

  if (nextFetchTime.get() > now)   return null;

  FetchItem it=null;

  if (queue.size() == 0)   return null;

  try {

    it=queue.remove(0);

    inProgress.incrementAndGet();

  }

 catch (  Exception e) {

    LOG.error("Cannot remove FetchItem from queue or cannot add it to inProgress queue",e);

  }

  return it;

}

Location: FetchItemQueue.java

Content: 

public int getInProgressSize(){

  return inProgress.get();

}

Location: FetchItemQueue.java

Content: 

public int getQueueSize(){

  return queue.size();

}

Location: FetchItemQueue.java

Content: 

public int incrementExceptionCounter(){

  return exceptionCounter.incrementAndGet();

}

Location: FetchItemQueue.java

Content: 

public void setCookie(Text cookie){

  this.cookie=cookie;

}

Location: FetchItemQueue.java

Content: 

private void setEndTime(long endTime){

  setEndTime(endTime,false);

}

Location: FetchItemQueue.java

Content: 

private void setEndTime(long endTime,boolean asap){

  if (!asap)   nextFetchTime.set(endTime + (maxThreads > 1 ? minCrawlDelay : crawlDelay));

 else   nextFetchTime.set(endTime);

}

