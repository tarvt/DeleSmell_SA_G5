Location: PluginDescriptor.java

Content: 

/** 

 * Adds a dependency

 * @param pId id of the dependent plugin

 */

public void addDependency(String pId){

  fDependencies.add(pId);

}

Location: PluginDescriptor.java

Content: 

/** 

 * Adds a exported library with a relative path to the plugin directory. We automatically escape characters that are illegal in URLs. It is recommended that code converts an abstract pathname into a  {@link java.net.URL} by first converting it into a  {@link java.net.URI}, via the  {@link java.net.URL#toURI()} method, and then converting the {@link java.net.URI} into a {@link java.net.URL} via the {@link java.net.URI#toURL()} method.

 * @param pLibPath path to a exported library relative to the plugin directory

 * @throws MalformedURLException if the pLibPath is not a relative path (to the plugin directory) 

 */

public void addExportedLibRelative(String pLibPath) throws MalformedURLException {

  URI uri=new File(getPluginPath() + File.separator + pLibPath).toURI();

  URL url=uri.toURL();

  fExportedLibs.add(url);

}

Location: PluginDescriptor.java

Content: 

/** 

 * Adds a extension point.

 * @param extensionPoint a {@link org.apache.nutch.plugin.ExtensionPoint}

 */

public void addExtensionPoint(ExtensionPoint extensionPoint){

  fExtensionPoints.add(extensionPoint);

}

Location: PluginDescriptor.java

Content: 

/** 

 * Adds a non-exported library with a relative path to the plugin directory. We automatically escape characters that are illegal in URLs. It is recommended that code converts an abstract pathname into a  {@link java.net.URL} by first converting it into a  {@link java.net.URI}, via the  {@link java.net.URL#toURI()} method, and then converting the {@link java.net.URI} into a {@link java.net.URL} via the {@link java.net.URI#toURL()} method.

 * @param pLibPath path to a exported library relative to the plugin directory

 * @throws MalformedURLException if the pLibPath is not a relative path (to the plugin directory) 

 */

public void addNotExportedLibRelative(String pLibPath) throws MalformedURLException {

  URI uri=new File(getPluginPath() + File.separator + pLibPath).toURI();

  URL url=uri.toURL();

  fNotExportedLibs.add(url);

}

Location: PluginDescriptor.java

Content: 

/** 

 * @param pLibs

 * @param pDescriptor

 */

private void collectLibs(ArrayList<URL> pLibs,PluginDescriptor pDescriptor){

  for (  String id : pDescriptor.getDependencies()) {

    PluginDescriptor descriptor=PluginRepository.get(fConf).getPluginDescriptor(id);

    for (    URL url : descriptor.getExportedLibUrls()) {

      pLibs.add(url);

    }

    collectLibs(pLibs,descriptor);

  }

}

Location: PluginDescriptor.java

Content: 

/** 

 * Returns a cached classloader for a plugin. Until classloader creation all needed libraries are collected. A classloader use as first the plugins own libraries and add then all exported libraries of dependend plugins.

 * @return PluginClassLoader the classloader for the plugin

 */

public PluginClassLoader getClassLoader(){

  if (fClassLoader != null)   return fClassLoader;

  ArrayList<URL> arrayList=new ArrayList<>();

  arrayList.addAll(fExportedLibs);

  arrayList.addAll(fNotExportedLibs);

  arrayList.addAll(getDependencyLibs());

  File file=new File(getPluginPath());

  try {

    for (    File file2 : file.listFiles()) {

      if (file2.getAbsolutePath().endsWith("properties"))       arrayList.add(file2.getParentFile().toURI().toURL());

    }

  }

 catch (  MalformedURLException e) {

    LOG.debug(getPluginId() + " " + e.toString());

  }

  URL[] urls=arrayList.toArray(new URL[arrayList.size()]);

  fClassLoader=new PluginClassLoader(urls,PluginDescriptor.class.getClassLoader());

  return fClassLoader;

}

Location: PluginDescriptor.java

Content: 

/** 

 * Returns a array of plugin ids.

 * @return String[]

 */

public String[] getDependencies(){

  return fDependencies.toArray(new String[fDependencies.size()]);

}

Location: PluginDescriptor.java

Content: 

/** 

 * @return Collection

 */

private ArrayList<URL> getDependencyLibs(){

  ArrayList<URL> list=new ArrayList<>();

  collectLibs(list,this);

  return list;

}

Location: PluginDescriptor.java

Content: 

/** 

 * Returns a array of exported libs as URLs

 * @return URL[]

 */

public URL[] getExportedLibUrls(){

  return fExportedLibs.toArray(new URL[0]);

}

Location: PluginDescriptor.java

Content: 

/** 

 * Returns a array of extension points.

 * @return ExtensionPoint[]

 */

public ExtensionPoint[] getExtenstionPoints(){

  return fExtensionPoints.toArray(new ExtensionPoint[fExtensionPoints.size()]);

}

Location: PluginDescriptor.java

Content: 

/** 

 * Returns a array of libraries as URLs that are not exported by the plugin.

 * @return URL[]

 */

public URL[] getNotExportedLibUrls(){

  return fNotExportedLibs.toArray(new URL[fNotExportedLibs.size()]);

}

Location: PluginDescriptor.java

Content: 

/** 

 * Returns the fully qualified name of the class which implements the abstarct <code>Plugin</code> class.

 * @return the name of this plug-in's runtime class or <code>null</code>.

 */

public String getPluginClass(){

  return fPluginClass;

}

Location: PluginDescriptor.java

Content: 

/** 

 * Returns the unique identifier of the plug-in or <code>null</code>.

 * @return String

 */

public String getPluginId(){

  return fPluginId;

}

Location: PluginDescriptor.java

Content: 

/** 

 * Returns the directory path of the plugin.

 * @return String

 */

public String getPluginPath(){

  return fPluginPath;

}

Location: PluginDescriptor.java

Content: 

public String getProviderName(){

  return fProviderName;

}

Location: PluginDescriptor.java

Content: 

/** 

 * Returns a I18N'd resource string. The resource bundles could be stored in root directory of a plugin in the well known i18n file name conventions.

 * @param pKey a plugin key

 * @param pLocale the required {@link java.util.Locale}

 * @return a string for the given key from the {@link java.util.ResourceBundle} bundle or one of its parents

 * @throws IOException if there is an error obtaining the key

 */

public String getResourceString(String pKey,Locale pLocale) throws IOException {

  if (fMessages.containsKey(pLocale.toString())) {

    ResourceBundle bundle=fMessages.get(pLocale.toString());

    try {

      return bundle.getString(pKey);

    }

 catch (    MissingResourceException e) {

      return '!' + pKey + '!';

    }

  }

  try {

    ResourceBundle res=ResourceBundle.getBundle("messages",pLocale,getClassLoader());

    return res.getString(pKey);

  }

 catch (  MissingResourceException x) {

    return '!' + pKey + '!';

  }

}

Location: PluginDescriptor.java

Content: 

public String getVersion(){

  return fVersion;

}

Location: PluginDescriptor.java

Content: 

/** 

 * Overloaded constructor

 * @param pId set plugin ID

 * @param pVersion set plugin version

 * @param pName set plugin name

 * @param pProviderName set plugin provider name

 * @param pPluginclazz set plugin Class

 * @param pPath set plugin path

 * @param conf a populated {@link org.apache.hadoop.conf.Configuration}

 */

public PluginDescriptor(String pId,String pVersion,String pName,String pProviderName,String pPluginclazz,String pPath,Configuration conf){

  setPath(pPath);

  setPluginId(pId);

  setVersion(pVersion);

  setName(pName);

  setProvidername(pProviderName);

  if (pPluginclazz != null)   setPluginClass(pPluginclazz);

  this.fConf=conf;

}

Location: PluginDescriptor.java

Content: 

/** 

 * Sets the pluginClass.

 * @param pluginClass The pluginClass to set

 */

private void setPluginClass(String pluginClass){

  fPluginClass=pluginClass;

}

Location: PluginDescriptor.java

Content: 

/** 

 * Sets the plugin Id.

 * @param pluginId The pluginId to set

 */

private void setPluginId(String pluginId){

  fPluginId=pluginId;

}

Location: PluginDescriptor.java

Content: 

/** 

 * @param providerName

 */

private void setProvidername(String providerName){

  fProviderName=providerName;

}

Location: PluginDescriptor.java

Content: 

/** 

 * @param version

 */

private void setVersion(String version){

  fVersion=version;

}

