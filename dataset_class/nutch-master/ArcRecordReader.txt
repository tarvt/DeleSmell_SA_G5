Location: ArcRecordReader.java

Content: 

/** 

 * Constructor that sets the configuration and file split.

 * @param conf The job configuration.

 * @param split The file split to read from.

 * @throws IOException If an IO error occurs while initializing file split.

 */

public ArcRecordReader(Configuration conf,FileSplit split) throws IOException {

  Path path=split.getPath();

  FileSystem fs=path.getFileSystem(conf);

  fileLen=fs.getFileStatus(split.getPath()).getLen();

  this.conf=conf;

  this.in=fs.open(split.getPath());

  this.splitStart=split.getStart();

  this.splitEnd=splitStart + split.getLength();

  this.splitLen=split.getLength();

  in.seek(splitStart);

}

Location: ArcRecordReader.java

Content: 

/** 

 * Creates a new instance of the <code>Text</code> object for the key.

 * @return {@link Text}

 */

public Text createKey(){

  return ReflectionUtils.newInstance(Text.class,conf);

}

Location: ArcRecordReader.java

Content: 

/** 

 * Creates a new instance of the <code>BytesWritable</code> object for the key

 * @return {@link BytesWritable}

 */

public BytesWritable createValue(){

  return ReflectionUtils.newInstance(BytesWritable.class,conf);

}

Location: ArcRecordReader.java

Content: 

public Text getCurrentKey(){

  return new Text();

}

Location: ArcRecordReader.java

Content: 

public BytesWritable getCurrentValue(){

  return new BytesWritable();

}

Location: ArcRecordReader.java

Content: 

/** 

 * Returns the current position in the file.

 * @return The long of the current position in the file.

 * @throws IOException if there is a fatal I/O error reading the position within the  {@link FSDataInputStream}

 */

public long getPos() throws IOException {

  return in.getPos();

}

Location: ArcRecordReader.java

Content: 

public void initialize(InputSplit split,TaskAttemptContext context){

}

Location: ArcRecordReader.java

Content: 

/** 

 * <p> Returns true if the byte array passed matches the gzip header magic number. </p>

 * @param input The byte array to check.

 * @return True if the byte array matches the gzip header magic number.

 */

public static boolean isMagic(byte[] input){

  if (input == null || input.length != MAGIC.length) {

    return false;

  }

  for (int i=0; i < MAGIC.length; i++) {

    if (MAGIC[i] != input[i]) {

      return false;

    }

  }

  return true;

}

Location: ArcRecordReader.java

Content: 

public boolean nextKeyValue(){

  return false;

}

Location: ArcRecordReader.java

Content: 

/** 

 * <p> Returns true if the next record in the split is read into the key and value pair. The key will be the arc record header and the values will be the raw content bytes of the arc record. </p>

 * @param key The record key

 * @param value The record value

 * @return True if the next record is read.

 * @throws IOException If an error occurs while reading the record value.

 */

public boolean next(Text key,BytesWritable value) throws IOException {

  try {

    long startRead=in.getPos();

    byte[] magicBuffer=null;

    while (true) {

      if (startRead >= splitEnd) {

        return false;

      }

      boolean foundStart=false;

      while (!foundStart) {

        startRead=in.getPos();

        magicBuffer=new byte[1024];

        int read=in.read(magicBuffer);

        if (read < 0) {

          break;

        }

        for (int i=0; i < read - 1; i++) {

          byte[] testMagic=new byte[2];

          System.arraycopy(magicBuffer,i,testMagic,0,2);

          if (isMagic(testMagic)) {

            startRead+=i;

            foundStart=true;

            break;

          }

        }

      }

      in.seek(startRead);

      ByteArrayOutputStream baos=null;

      int totalRead=0;

      try {

        byte[] buffer=new byte[4096];

        GZIPInputStream zin=new GZIPInputStream(in);

        int gzipRead=-1;

        baos=new ByteArrayOutputStream();

        while ((gzipRead=zin.read(buffer,0,buffer.length)) != -1) {

          baos.write(buffer,0,gzipRead);

          totalRead+=gzipRead;

        }

      }

 catch (      Exception e) {

        System.out.println("Ignoring position: " + (startRead));

        if (startRead + 1 < fileLen) {

          in.seek(startRead + 1);

        }

        continue;

      }

      byte[] content=baos.toByteArray();

      int eol=0;

      for (int i=0; i < content.length; i++) {

        if (i > 0 && content[i] == '\n') {

          eol=i;

          break;

        }

      }

      String header=new String(content,0,eol).trim();

      byte[] raw=new byte[(content.length - eol) - 1];

      System.arraycopy(content,eol + 1,raw,0,raw.length);

      Text keyText=key;

      keyText.set(header);

      BytesWritable valueBytes=value;

      valueBytes.set(raw,0,raw.length);

      if (startRead + 1 < fileLen) {

        in.seek(startRead + 1);

      }

      return true;

    }

  }

 catch (  Exception e) {

    LOG.error("Failed reading ARC record: ",e);

  }

  return false;

}

