Location: TestSuffixStringMatcher.java

Content: 

@Test public void testSuffixMatcher(){

  int numMatches=0;

  int numInputsTested=0;

  for (int round=0; round < NUM_TEST_ROUNDS; round++) {

    int numSuffixes=(int)(Math.random() * MAX_TEST_SUFFIXES);

    String[] suffixes=new String[numSuffixes];

    for (int i=0; i < numSuffixes; i++) {

      suffixes[i]=makeRandString(0,MAX_SUFFIX_LEN);

    }

    SuffixStringMatcher sufmatcher=new SuffixStringMatcher(suffixes);

    for (int i=0; i < NUM_TEST_INPUTS_PER_ROUND; i++) {

      String input=makeRandString(0,MAX_INPUT_LEN);

      boolean matches=false;

      int longestMatch=-1;

      int shortestMatch=-1;

      for (int j=0; j < suffixes.length; j++) {

        if ((suffixes[j].length() > 0) && input.endsWith(suffixes[j])) {

          matches=true;

          int matchSize=suffixes[j].length();

          if (matchSize > longestMatch)           longestMatch=matchSize;

          if ((matchSize < shortestMatch) || (shortestMatch == -1))           shortestMatch=matchSize;

        }

      }

      if (matches)       numMatches++;

      numInputsTested++;

      Assert.assertTrue("'" + input + "' should "+ (matches ? "" : "not ")+ "match!",matches == sufmatcher.matches(input));

      if (matches) {

        Assert.assertTrue(shortestMatch == sufmatcher.shortestMatch(input).length());

        Assert.assertTrue(input.substring(input.length() - shortestMatch).equals(sufmatcher.shortestMatch(input)));

        Assert.assertTrue(longestMatch == sufmatcher.longestMatch(input).length());

        Assert.assertTrue(input.substring(input.length() - longestMatch).equals(sufmatcher.longestMatch(input)));

      }

    }

  }

  System.out.println("got " + numMatches + " matches out of "+ numInputsTested+ " tests");

}

