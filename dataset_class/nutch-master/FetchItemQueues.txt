Location: FetchItemQueues.java

Content: 

public QueuingStatus addFetchItem(Text url,CrawlDatum datum){

  FetchItem it=FetchItem.create(url,datum,queueMode);

  if (it != null) {

    return addFetchItem(it);

  }

  return QueuingStatus.ERROR_CREATE_FETCH_ITEM;

}

Location: FetchItemQueues.java

Content: 

/** 

 * Increment the exception counter of a queue in case of an exception e.g. timeout; when higher than a given threshold simply empty the queue.

 * @param queueid a queue identifier to locate and check 

 * @return number of purged items

 */

public synchronized int checkExceptionThreshold(String queueid){

  FetchItemQueue fiq=queues.get(queueid);

  if (fiq == null) {

    return 0;

  }

  int excCount=fiq.incrementExceptionCounter();

  if (fiq.getQueueSize() == 0) {

    return 0;

  }

  if (maxExceptionsPerQueue != -1 && excCount >= maxExceptionsPerQueue) {

    int deleted=fiq.emptyQueue();

    LOG.info("* queue: " + queueid + " >> removed "+ deleted+ " URLs from queue because "+ excCount+ " exceptions occurred");

    for (int i=0; i < deleted; i++) {

      totalSize.decrementAndGet();

    }

    queuesMaxExceptions.add(queueid);

    return deleted;

  }

  return 0;

}

Location: FetchItemQueues.java

Content: 

/** 

 * Check whether queue mode is valid, fall-back to default mode if not.

 * @param queueMode queue mode to check

 * @return valid queue mode or default

 */

protected static String checkQueueMode(String queueMode){

  if (!queueMode.equals(QUEUE_MODE_IP) && !queueMode.equals(QUEUE_MODE_DOMAIN) && !queueMode.equals(QUEUE_MODE_HOST)) {

    LOG.error("Unknown partition mode : {} - forcing to byHost",queueMode);

    queueMode=QUEUE_MODE_HOST;

  }

  return queueMode;

}

Location: FetchItemQueues.java

Content: 

public synchronized int checkTimelimit(){

  int count=0;

  if (System.currentTimeMillis() >= timelimit && timelimit != -1) {

    count=emptyQueues();

    if (totalSize.get() != 0 && queues.size() == 0)     totalSize.set(0);

  }

  return count;

}

Location: FetchItemQueues.java

Content: 

public synchronized int emptyQueues(){

  int count=0;

  for (  String id : queues.keySet()) {

    FetchItemQueue fiq=queues.get(id);

    if (fiq.getQueueSize() == 0)     continue;

    LOG.info("* queue: " + id + " >> dropping! ");

    int deleted=fiq.emptyQueue();

    for (int i=0; i < deleted; i++) {

      totalSize.decrementAndGet();

    }

    count+=deleted;

  }

  return count;

}

Location: FetchItemQueues.java

Content: 

public FetchItemQueues(Configuration conf){

  this.conf=conf;

  this.maxThreads=conf.getInt("fetcher.threads.per.queue",1);

  queueMode=conf.get("fetcher.queue.mode",QUEUE_MODE_HOST);

  queueMode=checkQueueMode(queueMode);

  LOG.info("Using queue mode : " + queueMode);

  this.crawlDelay=(long)(conf.getFloat("fetcher.server.delay",1.0f) * 1000);

  this.minCrawlDelay=(long)(conf.getFloat("fetcher.server.min.delay",0.0f) * 1000);

  this.timelimit=conf.getLong("fetcher.timelimit",-1);

  this.maxExceptionsPerQueue=conf.getInt("fetcher.max.exceptions.per.queue",-1);

  int dedupRedirMaxTime=conf.getInt("fetcher.redirect.dedupcache.seconds",-1);

  int dedupRedirMaxSize=conf.getInt("fetcher.redirect.dedupcache.size",1000);

  if (dedupRedirMaxTime > 0 && dedupRedirMaxSize > 0) {

    redirectDedupCache=CacheBuilder.newBuilder().maximumSize(dedupRedirMaxSize).expireAfterWrite(dedupRedirMaxTime,TimeUnit.SECONDS).build();

  }

}

Location: FetchItemQueues.java

Content: 

public void finishFetchItem(FetchItem it){

  finishFetchItem(it,false);

}

Location: FetchItemQueues.java

Content: 

public synchronized FetchItemQueue getFetchItemQueue(String id){

  FetchItemQueue fiq=queues.get(id);

  if (fiq == null) {

    fiq=new FetchItemQueue(conf,maxThreads,crawlDelay,minCrawlDelay);

    queues.put(id,fiq);

  }

  return fiq;

}

Location: FetchItemQueues.java

Content: 

public int getQueueCount(){

  return queues.size();

}

Location: FetchItemQueues.java

Content: 

public int getQueueCountMaxExceptions(){

  return queuesMaxExceptions.size();

}

Location: FetchItemQueues.java

Content: 

public int getTotalSize(){

  return totalSize.get();

}

Location: FetchItemQueues.java

Content: 

/** 

 * @param redirUrl redirect target

 * @return true if redirects are deduplicated and redirUrl has been queuedrecently

 */

public boolean redirectIsQueuedRecently(Text redirUrl){

  if (redirectDedupCache != null) {

    if (redirectDedupCache.getIfPresent(redirUrl) != null) {

      return true;

    }

    redirectDedupCache.put(redirUrl,Optional.absent());

  }

  return false;

}

