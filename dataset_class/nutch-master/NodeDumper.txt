Location: NodeDumper.java

Content: 

/** 

 * Runs the process to dump the top urls out to a text file.

 * @param webGraphDb The  {@link org.apache.nutch.scoring.webgraph.WebGraph} from which to pull values.

 * @param type the node property type to dump, one of {@link NodeDumper.DumpType#INLINKS},  {@link NodeDumper.DumpType#OUTLINKS} or  {@link NodeDumper.DumpType#SCORES}

 * @param topN maximum value of top links to dump

 * @param output a {@link org.apache.hadoop.fs.Path} to write output to

 * @param asEff if true set equals-sign as separator for <a href="https://lucene.apache.org/solr/api/org/apache/solr/schema/ExternalFileField.html"> Solr's ExternalFileField</a>, false otherwise

 * @param nameType either {@link NodeDumper.NameType#HOST} or {@link NodeDumper.NameType#DOMAIN}

 * @param aggrType the aggregation type, either {@link NodeDumper.AggrType#MAX} or {@link NodeDumper.AggrType#SUM}

 * @param asSequenceFile true output will be written as {@link SequenceFileOutputFormat}, otherwise default  {@link TextOutputFormat}

 * @throws Exception If an error occurs while dumping the top values.

 */

public void dumpNodes(Path webGraphDb,DumpType type,long topN,Path output,boolean asEff,NameType nameType,AggrType aggrType,boolean asSequenceFile) throws Exception {

  SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

  long start=System.currentTimeMillis();

  LOG.info("NodeDumper: starting at " + sdf.format(start));

  Path nodeDb=new Path(webGraphDb,WebGraph.NODE_DIR);

  Job dumper=NutchJob.getInstance(getConf());

  Configuration conf=dumper.getConfiguration();

  dumper.setJobName("NodeDumper: " + webGraphDb);

  FileInputFormat.addInputPath(dumper,nodeDb);

  dumper.setInputFormatClass(SequenceFileInputFormat.class);

  if (nameType == null) {

    dumper.setJarByClass(Sorter.class);

    dumper.setMapperClass(Sorter.SorterMapper.class);

    dumper.setReducerClass(Sorter.SorterReducer.class);

    dumper.setMapOutputKeyClass(FloatWritable.class);

    dumper.setMapOutputValueClass(Text.class);

  }

 else {

    dumper.setJarByClass(Dumper.class);

    dumper.setMapperClass(Dumper.DumperMapper.class);

    dumper.setReducerClass(Dumper.DumperReducer.class);

    dumper.setMapOutputKeyClass(Text.class);

    dumper.setMapOutputValueClass(FloatWritable.class);

  }

  dumper.setOutputKeyClass(Text.class);

  dumper.setOutputValueClass(FloatWritable.class);

  FileOutputFormat.setOutputPath(dumper,output);

  if (asSequenceFile) {

    dumper.setOutputFormatClass(SequenceFileOutputFormat.class);

  }

 else {

    dumper.setOutputFormatClass(TextOutputFormat.class);

  }

  dumper.setNumReduceTasks(1);

  conf.setBoolean("inlinks",type == DumpType.INLINKS);

  conf.setBoolean("outlinks",type == DumpType.OUTLINKS);

  conf.setBoolean("scores",type == DumpType.SCORES);

  conf.setBoolean("host",nameType == NameType.HOST);

  conf.setBoolean("domain",nameType == NameType.DOMAIN);

  conf.setBoolean("sum",aggrType == AggrType.SUM);

  conf.setBoolean("max",aggrType == AggrType.MAX);

  conf.setLong("topn",topN);

  if (asEff) {

    conf.set("mapreduce.output.textoutputformat.separator","=");

  }

  try {

    LOG.info("NodeDumper: running");

    boolean success=dumper.waitForCompletion(true);

    if (!success) {

      String message="NodeDumper job did not succeed, job status:" + dumper.getStatus().getState() + ", reason: "+ dumper.getStatus().getFailureInfo();

      LOG.error(message);

      throw new RuntimeException(message);

    }

  }

 catch (  IOException e) {

    LOG.error("NodeDumper job failed:",e);

    throw e;

  }

  long end=System.currentTimeMillis();

  LOG.info("NodeDumper: finished at " + sdf.format(end) + ", elapsed: "+ TimingUtil.elapsedTime(start,end));

}

