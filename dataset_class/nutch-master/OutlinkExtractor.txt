Location: OutlinkExtractor.java

Content: 

/** 

 * Extracts <code>Outlink</code> from given plain text. Applying this method to non-plain-text can result in extremely lengthy runtimes for parasitic cases (postscript is a known example).

 * @param plainText the plain text from wich URLs should be extracted.

 * @param conf a populated {@link Configuration}

 * @return Array of <code>Outlink</code>s within found in plainText

 */

public static Outlink[] getOutlinks(final String plainText,Configuration conf){

  return OutlinkExtractor.getOutlinks(plainText,"",conf);

}

Location: OutlinkExtractor.java

Content: 

/** 

 * Extracts <code>Outlink</code> from given plain text and adds anchor to the extracted <code>Outlink</code>s

 * @param plainText the plain text from wich URLs should be extracted.

 * @param anchor the anchor of the url

 * @param conf a populated {@link Configuration}

 * @return Array of <code>Outlink</code>s within found in plainText

 */

public static Outlink[] getOutlinks(final String plainText,String anchor,Configuration conf){

  if (plainText == null) {

    return new Outlink[0];

  }

  long start=System.currentTimeMillis();

  final List<Outlink> outlinks=new ArrayList<>();

  try {

    Matcher matcher=URL_PATTERN.matcher(plainText);

    String url;

    while (matcher.find()) {

      if (System.currentTimeMillis() - start >= 60000L) {

        if (LOG.isWarnEnabled()) {

          LOG.warn("Time limit exceeded for getOutLinks");

        }

        break;

      }

      url=matcher.group().trim();

      try {

        outlinks.add(new Outlink(url,anchor));

      }

 catch (      MalformedURLException mue) {

        LOG.warn("Invalid url: '" + url + "', skipping.");

      }

    }

  }

 catch (  Exception ex) {

    if (LOG.isErrorEnabled()) {

      LOG.error("getOutlinks",ex);

    }

  }

  final Outlink[] retval;

  if (outlinks.size() > 0) {

    retval=outlinks.toArray(new Outlink[0]);

  }

 else {

    retval=new Outlink[0];

  }

  return retval;

}

