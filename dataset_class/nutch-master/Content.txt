Location: Content.java

Content: 

public Content(){

  metadata=new Metadata();

}

Location: Content.java

Content: 

public Content(String url,String base,byte[] content,String contentType,Metadata metadata,Configuration conf){

  if (url == null)   throw new IllegalArgumentException("null url");

  if (base == null)   throw new IllegalArgumentException("null base");

  if (content == null)   throw new IllegalArgumentException("null content");

  if (metadata == null)   throw new IllegalArgumentException("null metadata");

  this.url=url;

  this.base=base;

  this.content=content;

  this.metadata=metadata;

  this.mimeTypes=new MimeUtil(conf);

  this.contentType=getContentType(contentType,url,content);

}

Location: Content.java

Content: 

public Content(String url,String base,byte[] content,String contentType,Metadata metadata,MimeUtil mimeTypes){

  if (url == null)   throw new IllegalArgumentException("null url");

  if (base == null)   throw new IllegalArgumentException("null base");

  if (content == null)   throw new IllegalArgumentException("null content");

  if (metadata == null)   throw new IllegalArgumentException("null metadata");

  this.url=url;

  this.base=base;

  this.content=content;

  this.metadata=metadata;

  this.mimeTypes=mimeTypes;

  this.contentType=getContentType(contentType,url,content);

}

Location: Content.java

Content: 

/** 

 * The base url for relative links contained in the content. Maybe be different from url if the request redirected.

 * @return the base url

 */

public String getBaseUrl(){

  return base;

}

Location: Content.java

Content: 

/** 

 * The media type of the retrieved content.

 * @see <a href="http://www.iana.org/assignments/media-types/">

   *      http://www.iana.org/assignments/media-types/</a>

 * @return content type

 */

public String getContentType(){

  return contentType;

}

Location: Content.java

Content: 

private String getContentType(String typeName,String url,byte[] data){

  return this.mimeTypes.autoResolveContentType(typeName,url,data);

}

Location: Content.java

Content: 

private final void readFieldsCompressed(DataInput in) throws IOException {

  byte oldVersion=in.readByte();

switch (oldVersion) {

case 0:

case 1:

    url=Text.readString(in);

  base=Text.readString(in);

content=new byte[in.readInt()];

in.readFully(content);

contentType=Text.readString(in);

int keySize=in.readInt();

String key;

for (int i=0; i < keySize; i++) {

key=Text.readString(in);

int valueSize=in.readInt();

for (int j=0; j < valueSize; j++) {

metadata.add(key,Text.readString(in));

}

}

break;

case 2:

url=Text.readString(in);

base=Text.readString(in);

content=new byte[in.readInt()];

in.readFully(content);

contentType=Text.readString(in);

metadata.readFields(in);

break;

default :

throw new VersionMismatchException((byte)2,oldVersion);

}

}

Location: Content.java

Content: 

public static Content read(DataInput in) throws IOException {

  Content content=new Content();

  content.readFields(in);

  return content;

}

Location: Content.java

Content: 

public void setContentType(String contentType){

  this.contentType=contentType;

}

Location: Content.java

Content: 

public void setContent(byte[] content){

  this.content=content;

}

Location: Content.java

Content: 

public String toString(Charset charset){

  StringBuffer buffer=new StringBuffer();

  buffer.append("Version: " + version + "\n");

  buffer.append("url: " + url + "\n");

  buffer.append("base: " + base + "\n");

  buffer.append("contentType: " + contentType + "\n");

  buffer.append("metadata: " + metadata + "\n");

  buffer.append("Content:\n");

  buffer.append(new String(content,charset));

  return buffer.toString();

}

Location: Content.java

Content: 

public String toString(String charset){

  Charset c=StandardCharsets.UTF_8;

  try {

    c=Charset.forName(charset);

  }

 catch (  Exception e) {

  }

  ;

  return toString(c);

}

