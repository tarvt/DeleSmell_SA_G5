Location: GZIPUtils.java

Content: 

/** 

 * Returns an gunzipped copy of the input array. If the gzipped input has been truncated or corrupted, a best-effort attempt is made to unzip as much as possible. If no data can be extracted <code>null</code> is returned.

 * @param in byte array to gunzipped

 * @return the gunzipped byte array, or null

 */

public static final byte[] unzipBestEffort(byte[] in){

  return unzipBestEffort(in,Integer.MAX_VALUE);

}

Location: GZIPUtils.java

Content: 

/** 

 * Returns an gunzipped copy of the input array, truncated to <code>sizeLimit</code> bytes, if necessary. If the gzipped input has been truncated or corrupted, a best-effort attempt is made to unzip as much as possible. If no data can be extracted <code>null</code> is returned.

 * @param in Byte array to gunzip

 * @param sizeLimit Maximum size allowed for gunzipped byte array

 * @return the gunzipped byte array, or null

 */

public static final byte[] unzipBestEffort(byte[] in,int sizeLimit){

  try {

    ByteArrayOutputStream outStream=new ByteArrayOutputStream(EXPECTED_COMPRESSION_RATIO * in.length);

    GZIPInputStream inStream=new GZIPInputStream(new ByteArrayInputStream(in));

    byte[] buf=new byte[BUF_SIZE];

    int written=0;

    while (true) {

      try {

        int size=inStream.read(buf);

        if (size <= 0)         break;

        if ((written + size) > sizeLimit) {

          outStream.write(buf,0,sizeLimit - written);

          break;

        }

        outStream.write(buf,0,size);

        written+=size;

      }

 catch (      Exception e) {

        break;

      }

    }

    try {

      outStream.close();

    }

 catch (    IOException e) {

    }

    return outStream.toByteArray();

  }

 catch (  IOException e) {

    return null;

  }

}

Location: GZIPUtils.java

Content: 

/** 

 * Returns an gunzipped copy of the input array.

 * @param in Byte array to gunzip

 * @return the gunzipped byte array

 * @throws IOException if the input cannot be properly decompressed

 */

public static final byte[] unzip(byte[] in) throws IOException {

  ByteArrayOutputStream outStream=new ByteArrayOutputStream(EXPECTED_COMPRESSION_RATIO * in.length);

  GZIPInputStream inStream=new GZIPInputStream(new ByteArrayInputStream(in));

  byte[] buf=new byte[BUF_SIZE];

  while (true) {

    int size=inStream.read(buf);

    if (size <= 0)     break;

    outStream.write(buf,0,size);

  }

  outStream.close();

  return outStream.toByteArray();

}

Location: GZIPUtils.java

Content: 

/** 

 * Returns an gzipped copy of the input array.

 * @param in Byte array to zip

 * @return the zipped byte array

 */

public static final byte[] zip(byte[] in){

  try {

    ByteArrayOutputStream byteOut=new ByteArrayOutputStream(in.length / EXPECTED_COMPRESSION_RATIO);

    GZIPOutputStream outStream=new GZIPOutputStream(byteOut);

    try {

      outStream.write(in);

    }

 catch (    Exception e) {

      LOG.error("Error writing outStream: ",e);

    }

    try {

      outStream.close();

    }

 catch (    IOException e) {

      LOG.error("Error closing outStream: ",e);

    }

    return byteOut.toByteArray();

  }

 catch (  IOException e) {

    LOG.error("Error: ",e);

    return null;

  }

}

