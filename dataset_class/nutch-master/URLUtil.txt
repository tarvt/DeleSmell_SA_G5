Location: URLUtil.java

Content: 

/** 

 * Given two urls, a src and a destination of a redirect, it returns the representative url. <p> This method implements an extended version of the algorithm used by the Yahoo! Slurp crawler described here:<br> <a href="http://help.yahoo.com/l/nz/yahooxtra/search/webcrawler/slurp-11.html"> How does the Yahoo! webcrawler handle redirects?</a> <br> <br> <ul> <li>Choose target url if either url is malformed.</li> <li>If different domains the keep the destination whether or not the redirect is temp or perm</li> <li>a.com -&gt; b.com*</li> <li>If the redirect is permanent and the source is root, keep the source.</li> <li>*a.com -&gt; a.com?y=1 || *a.com -&gt; a.com/xyz/index.html</li> <li>If the redirect is permanent and the source is not root and the destination is root, keep the destination</li> <li>a.com/xyz/index.html -&gt; a.com*</li> <li>If the redirect is permanent and neither the source nor the destination is root, then keep the destination</li> <li>a.com/xyz/index.html -&gt; a.com/abc/page.html*</li> <li>If the redirect is temporary and source is root and destination is not root, then keep the source</li> <li>*a.com -&gt; a.com/xyz/index.html</li> <li>If the redirect is temporary and source is not root and destination is root, then keep the destination</li> <li>a.com/xyz/index.html -&gt; a.com*</li> <li>If the redirect is temporary and neither the source or the destination is root, then keep the shortest url. First check for the shortest host, and if both are equal then check by path. Path is first by length then by the number of / path separators.</li> <li>a.com/xyz/index.html -&gt; a.com/abc/page.html*</li> <li>*www.a.com/xyz/index.html -&gt; www.news.a.com/xyz/index.html</li> <li>If the redirect is temporary and both the source and the destination are root, then keep the shortest sub-domain</li> <li>*www.a.com -&gt; www.news.a.com</li> </ul> <br> While not in this logic there is a further piece of representative url logic that occurs during indexing and after scoring. During creation of the basic fields before indexing, if a url has a representative url stored we check both the url and its representative url (which should never be the same) against their linkrank scores and the highest scoring one is kept as the url and the lower scoring one is held as the orig url inside of the index.

 * @param src The source url.

 * @param dst The destination url.

 * @param temp Is the redirect a temporary redirect.

 * @return String The representative url.

 */

public static String chooseRepr(String src,String dst,boolean temp){

  URL srcUrl;

  URL dstUrl;

  try {

    srcUrl=new URL(src);

    dstUrl=new URL(dst);

  }

 catch (  MalformedURLException e) {

    return dst;

  }

  String srcDomain=URLUtil.getDomainName(srcUrl);

  String dstDomain=URLUtil.getDomainName(dstUrl);

  String srcHost=srcUrl.getHost();

  String dstHost=dstUrl.getHost();

  String srcFile=srcUrl.getFile();

  String dstFile=dstUrl.getFile();

  boolean srcRoot=(srcFile.equals("/") || srcFile.length() == 0);

  boolean destRoot=(dstFile.equals("/") || dstFile.length() == 0);

  if (!srcDomain.equals(dstDomain)) {

    return dst;

  }

  if (!temp) {

    if (srcRoot) {

      return src;

    }

 else {

      return dst;

    }

  }

 else {

    if (srcRoot && !destRoot) {

      return src;

    }

 else     if (!srcRoot && destRoot) {

      return dst;

    }

 else     if (!srcRoot && !destRoot && (srcHost.equals(dstHost))) {

      int numSrcPaths=srcFile.split("/").length;

      int numDstPaths=dstFile.split("/").length;

      if (numSrcPaths != numDstPaths) {

        return (numDstPaths < numSrcPaths ? dst : src);

      }

 else {

        int srcPathLength=srcFile.length();

        int dstPathLength=dstFile.length();

        return (dstPathLength < srcPathLength ? dst : src);

      }

    }

 else {

      int numSrcSubs=srcHost.split("\\.").length;

      int numDstSubs=dstHost.split("\\.").length;

      return (numDstSubs < numSrcSubs ? dst : src);

    }

  }

}

Location: URLUtil.java

Content: 

/** 

 * Handle the case in RFC3986 section 5.4.1 example 7, and similar. 

 */

static URL fixPureQueryTargets(URL base,String target) throws MalformedURLException {

  if (!target.startsWith("?"))   return new URL(base,target);

  String basePath=base.getPath();

  String baseRightMost="";

  int baseRightMostIdx=basePath.lastIndexOf("/");

  if (baseRightMostIdx != -1) {

    baseRightMost=basePath.substring(baseRightMostIdx + 1);

  }

  if (target.startsWith("?"))   target=baseRightMost + target;

  return new URL(base,target);

}

Location: URLUtil.java

Content: 

/** 

 * Returns the domain name of the url. The domain name of a url is the substring of the url's hostname, w/o subdomain names. As an example <br> <code> getDomainName(conf, new http://lucene.apache.org/) </code><br> will return <br> <code> apache.org</code>

 * @param url A input url string to extract the domain from

 * @return the domain name

 * @throws MalformedURLException if the input url is malformed

 */

public static String getDomainName(String url) throws MalformedURLException {

  return getDomainName(new URL(url));

}

Location: URLUtil.java

Content: 

/** 

 * Get the domain name of the url. The domain name of a url is the substring of the url's hostname, w/o subdomain names. As an example <br> <code> getDomainName(new URL(http://lucene.apache.org/)) </code><br> will return <br> <code>apache.org</code>

 * @param url A input {@link URL} to extract the domain from

 * @return the domain name string

 */

public static String getDomainName(URL url){

  DomainSuffixes tlds=DomainSuffixes.getInstance();

  String host=url.getHost();

  if (host.endsWith("."))   host=host.substring(0,host.length() - 1);

  if (IP_PATTERN.matcher(host).matches())   return host;

  int index=0;

  String candidate=host;

  for (; index >= 0; ) {

    index=candidate.indexOf('.');

    String subCandidate=candidate.substring(index + 1);

    if (tlds.isDomainSuffix(subCandidate)) {

      return candidate;

    }

    candidate=subCandidate;

  }

  return candidate;

}

Location: URLUtil.java

Content: 

/** 

 * Returns the  {@link DomainSuffix} corresponding to the last public part ofthe hostname

 * @param url a {@link URL} to extract the domain suffix from

 * @return a {@link org.apache.nutch.util.domain.DomainSuffix}

 * @throws MalformedURLException if the input url string is malformed

 */

public static DomainSuffix getDomainSuffix(String url) throws MalformedURLException {

  return getDomainSuffix(new URL(url));

}

Location: URLUtil.java

Content: 

/** 

 * Returns the  {@link DomainSuffix} corresponding to the last public part ofthe hostname

 * @param url a {@link URL} to extract the domain suffix from

 * @return a {@link org.apache.nutch.util.domain.DomainSuffix}

 */

public static DomainSuffix getDomainSuffix(URL url){

  DomainSuffixes tlds=DomainSuffixes.getInstance();

  String host=url.getHost();

  if (IP_PATTERN.matcher(host).matches())   return null;

  int index=0;

  String candidate=host;

  for (; index >= 0; ) {

    index=candidate.indexOf('.');

    String subCandidate=candidate.substring(index + 1);

    DomainSuffix d=tlds.get(subCandidate);

    if (d != null) {

      return d;

    }

    candidate=subCandidate;

  }

  return null;

}

Location: URLUtil.java

Content: 

/** 

 * Partitions of the hostname of the url by "."

 * @param url a url string to extract host segments from

 * @return a string array of host segments

 * @throws MalformedURLException if the input url string is malformed

 */

public static String[] getHostSegments(String url) throws MalformedURLException {

  return getHostSegments(new URL(url));

}

Location: URLUtil.java

Content: 

/** 

 * Partitions of the hostname of the url by "."

 * @param url a {@link URL} to extract host segments from

 * @return a string array of host segments

 */

public static String[] getHostSegments(URL url){

  String host=url.getHost();

  if (IP_PATTERN.matcher(host).matches())   return new String[]{host};

  return host.split("\\.");

}

Location: URLUtil.java

Content: 

/** 

 * Returns the lowercased hostname for the url or null if the url is not well formed.

 * @param url The url to check.

 * @return String The hostname for the url.

 */

public static String getHost(String url){

  try {

    return new URL(url).getHost().toLowerCase();

  }

 catch (  MalformedURLException e) {

    return null;

  }

}

Location: URLUtil.java

Content: 

/** 

 * Returns the page for the url. The page consists of the protocol, host, and path, but does not include the query string. The host is lowercased but the path is not.

 * @param url The url to check.

 * @return String The page for the url.

 */

public static String getPage(String url){

  try {

    url=url.toLowerCase();

    String queryStr=new URL(url).getQuery();

    return (queryStr != null) ? url.replace("?" + queryStr,"") : url;

  }

 catch (  MalformedURLException e) {

    return null;

  }

}

Location: URLUtil.java

Content: 

public static String getProtocol(String url){

  try {

    return getProtocol(new URL(url));

  }

 catch (  Exception e) {

    return null;

  }

}

Location: URLUtil.java

Content: 

public static String getProtocol(URL url){

  return url.getProtocol();

}

Location: URLUtil.java

Content: 

/** 

 * Returns the top level domain name of the url. The top level domain name of a url is the substring of the url's hostname, w/o subdomain names. As an example <br> <code> getTopLevelDomainName(conf, new http://lucene.apache.org/) </code><br> will return <br> <code> org</code>

 * @param url A input url string to extract the top level domain name from

 * @return the top level domain name

 * @throws MalformedURLException if the input url is malformed

 */

public static String getTopLevelDomainName(String url) throws MalformedURLException {

  return getTopLevelDomainName(new URL(url));

}

Location: URLUtil.java

Content: 

/** 

 * Returns the top level domain name of the url. The top level domain name of a url is the substring of the url's hostname, w/o subdomain names. As an example <br> <code> getTopLevelDomainName(conf, new http://lucene.apache.org/) </code><br> will return <br> <code> org</code>

 * @param url A input {@link URL} to extract the top level domain name from

 * @return the top level domain name

 * @throws MalformedURLException if the input url is malformed

 */

public static String getTopLevelDomainName(URL url) throws MalformedURLException {

  String suffix=getDomainSuffix(url).toString();

  int idx=suffix.lastIndexOf(".");

  if (idx != -1) {

    return suffix.substring(idx + 1);

  }

 else {

    return suffix;

  }

}

Location: URLUtil.java

Content: 

/** 

 * Returns whether the given urls have the same domain name. As an example, <br> <code> isSameDomain("http://lucene.apache.org" ,"http://people.apache.org/") <br> will return true. </code>

 * @param url1 first url string to compare domain name

 * @param url2 second url string to compare domain name

 * @return true if the domain names are equal

 * @throws MalformedURLException if either of the input urls are malformed

 */

public static boolean isSameDomainName(String url1,String url2) throws MalformedURLException {

  return isSameDomainName(new URL(url1),new URL(url2));

}

Location: URLUtil.java

Content: 

/** 

 * Returns whether the given urls have the same domain name. As an example, <br> <code> isSameDomain(new URL("http://lucene.apache.org") , new URL("http://people.apache.org/")) <br> will return true. </code>

 * @param url1 first {@link URL} to compare domain name

 * @param url2 second {@link URL} to compare domain name

 * @return true if the domain names are equal

 */

public static boolean isSameDomainName(URL url1,URL url2){

  return getDomainName(url1).equalsIgnoreCase(getDomainName(url2));

}

Location: URLUtil.java

Content: 

/** 

 * Resolve relative URL-s and fix a java.net.URL error in handling of URLs with pure query targets.

 * @param base base url

 * @param target target url (may be relative)

 * @return resolved absolute url.

 * @throws MalformedURLException if the input base URL is malformed

 */

public static URL resolveURL(URL base,String target) throws MalformedURLException {

  target=target.trim();

  if (target.startsWith("?")) {

    return fixPureQueryTargets(base,target);

  }

  return new URL(base,target);

}

Location: URLUtil.java

Content: 

public static String toASCII(String url){

  try {

    URL u=new URL(url);

    String host=u.getHost();

    if (host == null || host.isEmpty()) {

      return url;

    }

    URI p=new URI(u.getProtocol(),u.getUserInfo(),IDN.toASCII(host),u.getPort(),u.getPath(),u.getQuery(),u.getRef());

    return p.toString();

  }

 catch (  Exception e) {

    return null;

  }

}

Location: URLUtil.java

Content: 

public static String toUNICODE(String url){

  try {

    URL u=new URL(url);

    String host=u.getHost();

    if (host == null || host.isEmpty()) {

      return url;

    }

    StringBuilder sb=new StringBuilder();

    sb.append(u.getProtocol());

    sb.append("://");

    if (u.getUserInfo() != null) {

      sb.append(u.getUserInfo());

      sb.append('@');

    }

    sb.append(IDN.toUnicode(host));

    if (u.getPort() != -1) {

      sb.append(':');

      sb.append(u.getPort());

    }

    sb.append(u.getFile());

    if (u.getRef() != null) {

      sb.append('#');

      sb.append(u.getRef());

    }

    return sb.toString();

  }

 catch (  Exception e) {

    return null;

  }

}

