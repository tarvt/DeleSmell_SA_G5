Location: TestPrefixStringMatcher.java

Content: 

private String makeRandString(int minLen,int maxLen){

  int len=minLen + (int)(Math.random() * (maxLen - minLen));

  char[] chars=new char[len];

  for (int pos=0; pos < len; pos++) {

    chars[pos]=alphabet[(int)(Math.random() * alphabet.length)];

  }

  return new String(chars);

}

Location: TestPrefixStringMatcher.java

Content: 

@Test public void testPrefixMatcher(){

  int numMatches=0;

  int numInputsTested=0;

  for (int round=0; round < NUM_TEST_ROUNDS; round++) {

    int numPrefixes=(int)(Math.random() * MAX_TEST_PREFIXES);

    String[] prefixes=new String[numPrefixes];

    for (int i=0; i < numPrefixes; i++) {

      prefixes[i]=makeRandString(0,MAX_PREFIX_LEN);

    }

    PrefixStringMatcher prematcher=new PrefixStringMatcher(prefixes);

    for (int i=0; i < NUM_TEST_INPUTS_PER_ROUND; i++) {

      String input=makeRandString(0,MAX_INPUT_LEN);

      boolean matches=false;

      int longestMatch=-1;

      int shortestMatch=-1;

      for (int j=0; j < prefixes.length; j++) {

        if ((prefixes[j].length() > 0) && input.startsWith(prefixes[j])) {

          matches=true;

          int matchSize=prefixes[j].length();

          if (matchSize > longestMatch)           longestMatch=matchSize;

          if ((matchSize < shortestMatch) || (shortestMatch == -1))           shortestMatch=matchSize;

        }

      }

      if (matches)       numMatches++;

      numInputsTested++;

      Assert.assertTrue("'" + input + "' should "+ (matches ? "" : "not ")+ "match!",matches == prematcher.matches(input));

      if (matches) {

        Assert.assertTrue(shortestMatch == prematcher.shortestMatch(input).length());

        Assert.assertTrue(input.substring(0,shortestMatch).equals(prematcher.shortestMatch(input)));

        Assert.assertTrue(longestMatch == prematcher.longestMatch(input).length());

        Assert.assertTrue(input.substring(0,longestMatch).equals(prematcher.longestMatch(input)));

      }

    }

  }

  System.out.println("got " + numMatches + " matches out of "+ numInputsTested+ " tests");

}

