Location: Metadata.java

Content: 

/** 

 * Add all name/value mappings (merge two metadata mappings). If a name already exists in current metadata the values are added to existing values.

 * @param metadata other Metadata to be merged

 */

public void addAll(Metadata metadata){

  for (  String name : metadata.names()) {

    String[] addValues=metadata.getValues(name);

    if (addValues == null)     continue;

    String[] oldValues=this.metadata.get(name);

    if (oldValues == null) {

      this.metadata.put(name,addValues);

    }

 else {

      String[] newValues=new String[oldValues.length + addValues.length];

      System.arraycopy(oldValues,0,newValues,0,oldValues.length);

      System.arraycopy(addValues,0,newValues,oldValues.length,addValues.length);

      this.metadata.put(name,newValues);

    }

  }

}

Location: Metadata.java

Content: 

/** 

 * Remove all mappings from metadata. 

 */

public void clear(){

  metadata.clear();

}

Location: Metadata.java

Content: 

/** 

 * Returns true if named value is multivalued.

 * @param name name of metadata

 * @return true is named value is multivalued, false if single value or null

 */

public boolean isMultiValued(final String name){

  return metadata.get(name) != null && metadata.get(name).length > 1;

}

Location: Metadata.java

Content: 

/** 

 * Constructs a new, empty metadata.

 */

public Metadata(){

  metadata=new HashMap<>();

}

Location: Metadata.java

Content: 

/** 

 * Returns an array of the names contained in the metadata.

 * @return Metadata names

 */

public String[] names(){

  return metadata.keySet().toArray(new String[metadata.keySet().size()]);

}

Location: Metadata.java

Content: 

/** 

 * Copy All key-value pairs from properties.

 * @param properties properties to copy from

 */

public void setAll(Properties properties){

  Enumeration<?> names=properties.propertyNames();

  while (names.hasMoreElements()) {

    String name=(String)names.nextElement();

    metadata.put(name,new String[]{properties.getProperty(name)});

  }

}

Location: Metadata.java

Content: 

/** 

 * @param separator separator between Metadata's key-value pairs

 * @param keyValueSeparator separator between key and value

 * @return list of all key-value pairs in Metadata using the providedseparators

 */

public String toString(String separator,String keyValueSeparator){

  StringBuilder buf=new StringBuilder();

  String[] names=names();

  for (int i=0; i < names.length; i++) {

    String[] values=_getValues(names[i]);

    for (int j=0; j < values.length; j++) {

      if (buf.length() > 0)       buf.append(separator);

      buf.append(names[i]).append(keyValueSeparator).append(values[j]);

    }

  }

  return buf.toString();

}

Location: Metadata.java

Content: 

private String[] _getValues(final String name){

  String[] values=metadata.get(name);

  if (values == null) {

    values=new String[0];

  }

  return values;

}

