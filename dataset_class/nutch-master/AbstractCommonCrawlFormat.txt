Location: AbstractCommonCrawlFormat.java

Content: 

public AbstractCommonCrawlFormat(String url,Content content,Metadata metadata,Configuration nutchConf,CommonCrawlConfig config) throws IOException {

  this.url=url;

  this.content=content;

  this.metadata=metadata;

  this.conf=nutchConf;

  this.keyPrefix=config.getKeyPrefix();

  this.simpleDateFormat=config.getSimpleDateFormat();

  this.jsonArray=config.getJsonArray();

  this.reverseKey=config.getReverseKey();

  this.reverseKeyValue=config.getReverseKeyValue();

}

Location: AbstractCommonCrawlFormat.java

Content: 

private void closeHeaders(String key,boolean nested,boolean newline) throws IOException {

  if (this.jsonArray) {

    closeArray(key,nested,newline);

  }

 else {

    closeObject(key);

  }

}

Location: AbstractCommonCrawlFormat.java

Content: 

protected String getImported(){

  if (this.simpleDateFormat) {

    String timestamp=null;

    try {

      long epoch=new SimpleDateFormat("EEE, d MMM yyyy HH:mm:ss z").parse(ifNullString(metadata.get("Date"))).getTime();

      timestamp=String.valueOf(epoch);

    }

 catch (    ParseException pe) {

      LOG.warn(pe.getMessage());

    }

    return timestamp;

  }

 else {

    return ifNullString(metadata.get("Date"));

  }

}

Location: AbstractCommonCrawlFormat.java

Content: 

protected String getMethod(){

  return new String("GET");

}

Location: AbstractCommonCrawlFormat.java

Content: 

protected String getRequestAccept(){

  return conf.get("http.accept","");

}

Location: AbstractCommonCrawlFormat.java

Content: 

protected String getRequestAcceptEncoding(){

  return new String("");

}

Location: AbstractCommonCrawlFormat.java

Content: 

protected String getRequestAcceptLanguage(){

  return conf.get("http.accept.language","");

}

Location: AbstractCommonCrawlFormat.java

Content: 

protected String getRequestContactEmail(){

  return conf.get("http.agent.email","");

}

Location: AbstractCommonCrawlFormat.java

Content: 

protected String getRequestContactName(){

  return conf.get("http.agent.name","");

}

Location: AbstractCommonCrawlFormat.java

Content: 

protected String getRequestHostAddress(){

  String hostAddress="";

  try {

    hostAddress=InetAddress.getLocalHost().getHostAddress();

  }

 catch (  UnknownHostException uhe) {

  }

  return hostAddress;

}

Location: AbstractCommonCrawlFormat.java

Content: 

protected String getRequestHostName(){

  String hostName="";

  try {

    hostName=InetAddress.getLocalHost().getHostName();

  }

 catch (  UnknownHostException uhe) {

  }

  return hostName;

}

Location: AbstractCommonCrawlFormat.java

Content: 

protected String getRequestRobots(){

  return new String("CLASSIC");

}

Location: AbstractCommonCrawlFormat.java

Content: 

protected String getRequestSoftware(){

  return conf.get("http.agent.version","");

}

Location: AbstractCommonCrawlFormat.java

Content: 

protected String getRequestUserAgent(){

  return conf.get("http.robots.agents","");

}

Location: AbstractCommonCrawlFormat.java

Content: 

protected String getResponseAddress(){

  return ifNullString(metadata.get("_ip_"));

}

Location: AbstractCommonCrawlFormat.java

Content: 

protected String getResponseContent(){

  return new String(content.getContent());

}

Location: AbstractCommonCrawlFormat.java

Content: 

protected String getResponseContentEncoding(){

  return ifNullString(metadata.get("Content-Encoding"));

}

Location: AbstractCommonCrawlFormat.java

Content: 

protected String getResponseContentType(){

  return ifNullString(metadata.get("Content-Type"));

}

Location: AbstractCommonCrawlFormat.java

Content: 

protected String getResponseDate(){

  if (this.simpleDateFormat) {

    String timestamp=null;

    try {

      long epoch=new SimpleDateFormat("EEE, dd MMM yyyy HH:mm:ss z").parse(ifNullString(metadata.get("Date"))).getTime();

      timestamp=String.valueOf(epoch);

    }

 catch (    ParseException pe) {

      LOG.warn(pe.getMessage());

    }

    return timestamp;

  }

 else {

    return ifNullString(metadata.get("Date"));

  }

}

Location: AbstractCommonCrawlFormat.java

Content: 

protected String getResponseHostName(){

  return URLUtil.getHost(url);

}

Location: AbstractCommonCrawlFormat.java

Content: 

protected String getResponseServer(){

  return ifNullString(metadata.get("Server"));

}

Location: AbstractCommonCrawlFormat.java

Content: 

protected String getResponseStatus(){

  return ifNullString(metadata.get("status"));

}

Location: AbstractCommonCrawlFormat.java

Content: 

protected String getTimestamp(){

  if (this.simpleDateFormat) {

    String timestamp=null;

    try {

      long epoch=new SimpleDateFormat("EEE, d MMM yyyy HH:mm:ss z").parse(ifNullString(metadata.get(Metadata.LAST_MODIFIED))).getTime();

      timestamp=String.valueOf(epoch);

    }

 catch (    ParseException pe) {

      LOG.warn(pe.getMessage());

    }

    return timestamp;

  }

 else {

    return ifNullString(metadata.get(Metadata.LAST_MODIFIED));

  }

}

Location: AbstractCommonCrawlFormat.java

Content: 

protected String getUrl(){

  try {

    return URIUtil.encodePath(url);

  }

 catch (  URIException e) {

    LOG.error("Can't encode URL " + url);

  }

  return url;

}

Location: AbstractCommonCrawlFormat.java

Content: 

private static String ifNullString(String value){

  return (value != null) ? value : "";

}

Location: AbstractCommonCrawlFormat.java

Content: 

private void startHeaders(String key,boolean nested,boolean newline) throws IOException {

  if (this.jsonArray) {

    startArray(key,nested,newline);

  }

 else {

    startObject(key);

  }

}

Location: AbstractCommonCrawlFormat.java

Content: 

private void writeKeyValueWrapper(String key,String value) throws IOException {

  if (this.jsonArray) {

    startArray(null,true,false);

    writeArrayValue(key);

    writeArrayValue(value);

    closeArray(null,true,false);

  }

 else {

    writeKeyValue(key,value);

  }

}

