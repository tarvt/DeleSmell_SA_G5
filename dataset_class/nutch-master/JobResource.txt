Location: JobResource.java

Content: 

@GET @Path(value="/{id}/abort") public boolean abort(@PathParam("id") String id,@QueryParam("crawlId") String crawlId){

  return jobManager.abort(crawlId,id);

}

Location: JobResource.java

Content: 

/** 

 * Create a new job

 * @param config The parameters of the job to create

 * @return A JSON object of the job created with its details

 */

@POST @Path(value="/create") @Consumes(MediaType.APPLICATION_JSON) public JobInfo create(JobConfig config){

  if (config == null) {

    throwBadRequestException("Job configuration is required!");

  }

  return jobManager.create(config);

}

Location: JobResource.java

Content: 

/** 

 * Get job info

 * @param id Job ID

 * @param crawlId Crawl ID

 * @return A JSON object of job parameters

 */

@GET @Path(value="/{id}") @JacksonFeatures(serializationEnable={SerializationFeature.INDENT_OUTPUT}) public JobInfo getInfo(@PathParam("id") String id,@QueryParam("crawlId") String crawlId){

  return jobManager.get(crawlId,id);

}

Location: JobResource.java

Content: 

/** 

 * Get job history for a given job regardless of the jobs state

 * @param crawlId a crawlId

 * @return A nested JSON object of all the jobs created for that crawlId

 */

@GET @Path(value="/") @JacksonFeatures(serializationEnable={SerializationFeature.INDENT_OUTPUT}) public Collection<JobInfo> getJobs(@QueryParam("crawlId") String crawlId){

  return jobManager.list(crawlId,State.ANY);

}

Location: JobResource.java

Content: 

/** 

 * Stop Job

 * @param id Job ID

 * @param crawlId Crawl ID

 * @return true if stopped, false otherwise

 */

@GET @Path(value="/{id}/stop") public boolean stop(@PathParam("id") String id,@QueryParam("crawlId") String crawlId){

  return jobManager.stop(crawlId,id);

}

