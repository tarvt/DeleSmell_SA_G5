Location: EncodingDetector.java

Content: 

public void addClue(String value,String source){

  addClue(value,source,NO_THRESHOLD);

}

Location: EncodingDetector.java

Content: 

public void addClue(String value,String source,int confidence){

  if (value == null || "".equals(value)) {

    return;

  }

  value=resolveEncodingAlias(value);

  if (value != null) {

    clues.add(new EncodingClue(value,source,confidence));

  }

}

Location: EncodingDetector.java

Content: 

public void autoDetectClues(Content content,boolean filter){

  byte[] data=content.getContent();

  if (minConfidence >= 0 && DETECTABLES.contains(content.getContentType()) && data.length > MIN_LENGTH) {

    CharsetMatch[] matches=null;

    try {

      detector.enableInputFilter(filter);

      detector.setText(data);

      matches=detector.detectAll();

    }

 catch (    Exception e) {

      LOG.debug("Exception from ICU4J (ignoring): ",e);

    }

    if (matches != null) {

      for (      CharsetMatch match : matches) {

        addClue(match.getName(),"detect",match.getConfidence());

      }

    }

  }

  addClue(parseCharacterEncoding(content.getMetadata().get(Response.CONTENT_TYPE)),"header");

}

Location: EncodingDetector.java

Content: 

/** 

 * Clears all clues. 

 */

public void clearClues(){

  clues.clear();

}

Location: EncodingDetector.java

Content: 

public EncodingDetector(Configuration conf){

  minConfidence=conf.getInt(MIN_CONFIDENCE_KEY,-1);

  detector=new CharsetDetector();

  clues=new ArrayList<>();

}

Location: EncodingDetector.java

Content: 

private void findDisagreements(String url,List<EncodingClue> newClues){

  HashSet<String> valsSeen=new HashSet<>();

  HashSet<String> sourcesSeen=new HashSet<>();

  boolean disagreement=false;

  for (int i=0; i < newClues.size(); i++) {

    EncodingClue clue=newClues.get(i);

    if (!clue.isEmpty() && !sourcesSeen.contains(clue.source)) {

      if (valsSeen.size() > 0 && !valsSeen.contains(clue.value) && clue.meetsThreshold()) {

        disagreement=true;

      }

      if (clue.meetsThreshold()) {

        valsSeen.add(clue.value);

      }

      sourcesSeen.add(clue.source);

    }

  }

  if (disagreement) {

    StringBuffer sb=new StringBuffer();

    sb.append("Disagreement: " + url + "; ");

    for (int i=0; i < newClues.size(); i++) {

      if (i > 0) {

        sb.append(", ");

      }

      sb.append(newClues.get(i));

    }

    LOG.trace(sb.toString());

  }

}

Location: EncodingDetector.java

Content: 

/** 

 * Guess the encoding with the previously specified list of clues.

 * @param content Content instance

 * @param defaultValue Default encoding to return if no encoding can be detected with enough confidence. Note that this will <b>not</b> be normalized with  {@link EncodingDetector#resolveEncodingAlias}

 * @return Guessed encoding or defaultValue

 */

public String guessEncoding(Content content,String defaultValue){

  String base=content.getBaseUrl();

  if (LOG.isTraceEnabled()) {

    findDisagreements(base,clues);

  }

  EncodingClue defaultClue=new EncodingClue(defaultValue,"default");

  EncodingClue bestClue=defaultClue;

  for (  EncodingClue clue : clues) {

    if (LOG.isTraceEnabled()) {

      LOG.trace(base + ": charset " + clue);

    }

    String charset=clue.value;

    if (minConfidence >= 0 && clue.confidence >= minConfidence) {

      if (LOG.isTraceEnabled()) {

        LOG.trace(base + ": Choosing encoding: " + charset+ " with confidence "+ clue.confidence);

      }

      return resolveEncodingAlias(charset).toLowerCase();

    }

 else     if (clue.confidence == NO_THRESHOLD && bestClue == defaultClue) {

      bestClue=clue;

    }

  }

  if (LOG.isTraceEnabled()) {

    LOG.trace(base + ": Choosing encoding: " + bestClue);

  }

  return bestClue.value.toLowerCase();

}

Location: EncodingDetector.java

Content: 

/** 

 * Parse the character encoding from the specified content type header. If the content type is null, or there is no explicit character encoding, <code>null</code> is returned. <br> This method was copied from org.apache.catalina.util.RequestUtil, which is licensed under the Apache License, Version 2.0 (the "License").

 * @param contentType a content type header

 * @return a trimmed string representation of the 'charset=' value, null if this is not available

 */

public static String parseCharacterEncoding(String contentType){

  if (contentType == null)   return (null);

  int start=contentType.indexOf("charset=");

  if (start < 0)   return (null);

  String encoding=contentType.substring(start + 8);

  int end=encoding.indexOf(';');

  if (end >= 0)   encoding=encoding.substring(0,end);

  encoding=encoding.trim();

  if ((encoding.length() > 2) && (encoding.startsWith("\"")) && (encoding.endsWith("\"")))   encoding=encoding.substring(1,encoding.length() - 1);

  return (encoding.trim());

}

Location: EncodingDetector.java

Content: 

public static String resolveEncodingAlias(String encoding){

  try {

    if (encoding == null || !Charset.isSupported(encoding))     return null;

    String canonicalName=new String(Charset.forName(encoding).name());

    return ALIASES.containsKey(canonicalName) ? ALIASES.get(canonicalName) : canonicalName;

  }

 catch (  Exception e) {

    LOG.warn("Invalid encoding " + encoding + " detected, using default.");

    return null;

  }

}

