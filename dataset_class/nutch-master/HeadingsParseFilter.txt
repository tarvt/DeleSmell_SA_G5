Location: HeadingsParseFilter.java

Content: 

@Override public ParseResult filter(Content content,ParseResult parseResult,HTMLMetaTags metaTags,DocumentFragment doc){

  Parse parse=parseResult.get(content.getUrl());

  for (int i=0; headings != null && i < headings.length; i++) {

    List<String> discoveredHeadings=getElement(doc,headings[i]);

    if (discoveredHeadings.size() > 0) {

      for (      String heading : discoveredHeadings) {

        if (heading != null) {

          heading=heading.trim();

          if (heading.length() > 0) {

            parse.getData().getParseMeta().add(headings[i],heading);

          }

        }

      }

    }

  }

  return parseResult;

}

Location: HeadingsParseFilter.java

Content: 

/** 

 * Finds the specified element and returns its value

 * @param doc the input {@link org.w3c.dom.DocumentFragment} to process

 * @param element the element to find in the DocumentFragment

 * @return a {@link java.util.List} containing headings

 */

protected List<String> getElement(DocumentFragment doc,String element){

  List<String> headings=new ArrayList<>();

  NodeWalker walker=new NodeWalker(doc);

  while (walker.hasNext()) {

    Node currentNode=walker.nextNode();

    if (currentNode.getNodeType() == Node.ELEMENT_NODE) {

      if (element.equalsIgnoreCase(currentNode.getNodeName())) {

        headings.add(getNodeValue(currentNode));

        if (!multiValued) {

          break;

        }

      }

    }

  }

  return headings;

}

Location: HeadingsParseFilter.java

Content: 

/** 

 * Returns the text value of the specified Node and child nodes

 * @param node the input {@link Node} to extract a value(s) for

 * @return the whitespace-stripped String node value(s)

 */

protected static String getNodeValue(Node node){

  StringBuilder buffer=new StringBuilder();

  NodeWalker walker=new NodeWalker(node);

  while (walker.hasNext()) {

    final Node n=walker.nextNode();

    if (n.getNodeType() == Node.TEXT_NODE) {

      buffer.append(n.getNodeValue());

    }

  }

  Matcher matcher=whitespacePattern.matcher(buffer.toString().trim());

  return matcher.replaceAll(" ").trim();

}

