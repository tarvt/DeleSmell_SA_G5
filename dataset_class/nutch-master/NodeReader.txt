Location: NodeReader.java

Content: 

/** 

 * Prints the content of the Node represented by the url to system out.

 * @param webGraphDb The webgraph from which to get the node.

 * @param url The url of the node.

 * @throws IOException If an error occurs while getting the node.

 */

public void dumpUrl(Path webGraphDb,String url) throws IOException {

  nodeReaders=MapFileOutputFormat.getReaders(new Path(webGraphDb,WebGraph.NODE_DIR),getConf());

  Text key=new Text(url);

  Node node=new Node();

  MapFileOutputFormat.getEntry(nodeReaders,new HashPartitioner<>(),key,node);

  System.out.println(url + ":");

  System.out.println("  inlink score: " + node.getInlinkScore());

  System.out.println("  outlink score: " + node.getOutlinkScore());

  System.out.println("  num inlinks: " + node.getNumInlinks());

  System.out.println("  num outlinks: " + node.getNumOutlinks());

  FSUtils.closeReaders(nodeReaders);

}

Location: NodeReader.java

Content: 

private HashMap<String,String> getNodeRow(Writable key,Node value){

  HashMap<String,String> tRow=new HashMap<>();

  tRow.put("key_url",key.toString());

  tRow.put("num_inlinks",String.valueOf(value.getNumInlinks()));

  tRow.put("num_outlinks",String.valueOf(value.getNumOutlinks()));

  tRow.put("inlink_score",String.valueOf(value.getInlinkScore()));

  tRow.put("outlink_score",String.valueOf(value.getOutlinkScore()));

  tRow.put("metadata",value.getMetadata().toString());

  return tRow;

}

Location: NodeReader.java

Content: 

public NodeReader(){

}

Location: NodeReader.java

Content: 

public NodeReader(Configuration conf){

  super(conf);

}

