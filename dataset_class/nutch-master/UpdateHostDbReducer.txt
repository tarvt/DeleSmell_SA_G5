Location: UpdateHostDbReducer.java

Content: 

/** 

 * Shut down all running threads and wait for completion.

 */

@Override public void cleanup(Context context){

  LOG.info("UpdateHostDb: feeder finished, waiting for shutdown");

  executor.shutdown();

  boolean finished=false;

  while (!finished) {

    try {

      if (!executor.isTerminated()) {

        LOG.info("UpdateHostDb: resolver threads waiting: {}",executor.getPoolSize());

        Thread.sleep(1000);

      }

 else {

        finished=true;

      }

    }

 catch (    InterruptedException e) {

      LOG.warn(StringUtils.stringifyException(e));

    }

  }

}

Location: UpdateHostDbReducer.java

Content: 

/** 

 * Determines whether a record is eligible for recheck.

 * @param datum a {@link HostDatum} to check for eligibility

 * @return true if eligible for recheck, false otherwise

 */

protected boolean isEligibleForCheck(HostDatum datum){

  if (force || datum.getLastCheck().getTime() + (recheckInterval * datum.getDnsFailures() + 1) > now) {

    return true;

  }

  return false;

}

Location: UpdateHostDbReducer.java

Content: 

/** 

 */

@Override public void reduce(Text key,Iterable<NutchWritable> values,Context context) throws IOException, InterruptedException {

  Map<String,Map<String,Long>> stringCounts=new HashMap<>();

  Map<String,Float> maximums=new HashMap<>();

  Map<String,Float> sums=new HashMap<>();

  Map<String,Long> counts=new HashMap<>();

  Map<String,Float> minimums=new HashMap<>();

  Map<String,TDigest> tdigests=new HashMap<String,TDigest>();

  HostDatum hostDatum=new HostDatum();

  float score=0;

  if (stringFields != null) {

    for (int i=0; i < stringFields.length; i++) {

      stringCounts.put(stringFields[i],new HashMap<>());

    }

  }

  for (  NutchWritable val : values) {

    final Writable value=val.get();

    if (value instanceof CrawlDatum) {

      CrawlDatum buffer=(CrawlDatum)value;

switch (buffer.getStatus()) {

case CrawlDatum.STATUS_DB_UNFETCHED:

        hostDatum.setUnfetched(hostDatum.getUnfetched() + 1l);

      break;

case CrawlDatum.STATUS_DB_FETCHED:

    hostDatum.setFetched(hostDatum.getFetched() + 1l);

  break;

case CrawlDatum.STATUS_DB_GONE:

hostDatum.setGone(hostDatum.getGone() + 1l);

break;

case CrawlDatum.STATUS_DB_REDIR_TEMP:

hostDatum.setRedirTemp(hostDatum.getRedirTemp() + 1l);

break;

case CrawlDatum.STATUS_DB_REDIR_PERM:

hostDatum.setRedirPerm(hostDatum.getRedirPerm() + 1l);

break;

case CrawlDatum.STATUS_DB_NOTMODIFIED:

hostDatum.setNotModified(hostDatum.getNotModified() + 1l);

break;

}

if (buffer.getRetriesSinceFetch() != 0) {

hostDatum.incConnectionFailures();

}

if (buffer.getStatus() == CrawlDatum.STATUS_DB_FETCHED || buffer.getStatus() == CrawlDatum.STATUS_DB_NOTMODIFIED) {

if (stringFields != null) {

for (int i=0; i < stringFields.length; i++) {

if (buffer.getMetaData().get(stringFieldWritables[i]) != null) {

String metadataValue=null;

try {

metadataValue=buffer.getMetaData().get(stringFieldWritables[i]).toString();

}

 catch (Exception e) {

LOG.error("Metadata field " + stringFields[i] + " is probably not a numeric value");

}

if (stringCounts.get(stringFields[i]).containsKey(metadataValue)) {

stringCounts.get(stringFields[i]).put(metadataValue,stringCounts.get(stringFields[i]).get(metadataValue) + 1l);

}

 else {

stringCounts.get(stringFields[i]).put(metadataValue,1l);

}

}

}

}

if (numericFields != null) {

for (int i=0; i < numericFields.length; i++) {

if (buffer.getMetaData().get(numericFieldWritables[i]) != null) {

try {

Float metadataValue=Float.parseFloat(buffer.getMetaData().get(numericFieldWritables[i]).toString());

if (tdigests.containsKey(numericFields[i])) {

tdigests.get(numericFields[i]).add(metadataValue);

}

 else {

TDigest tdigest=TDigest.createDigest(100);

tdigest.add((double)metadataValue);

tdigests.put(numericFields[i],tdigest);

}

if (minimums.containsKey(numericFields[i])) {

if (metadataValue < minimums.get(numericFields[i])) {

minimums.put(numericFields[i],metadataValue);

}

}

 else {

minimums.put(numericFields[i],metadataValue);

}

if (maximums.containsKey(numericFields[i])) {

if (metadataValue > maximums.get(numericFields[i])) {

maximums.put(numericFields[i],metadataValue);

}

}

 else {

maximums.put(numericFields[i],metadataValue);

}

if (sums.containsKey(numericFields[i])) {

sums.put(numericFields[i],sums.get(numericFields[i]) + metadataValue);

counts.put(numericFields[i],counts.get(numericFields[i]) + 1l);

}

 else {

sums.put(numericFields[i],metadataValue);

counts.put(numericFields[i],1l);

}

}

 catch (Exception e) {

LOG.error(e.getMessage() + " when processing values for " + key.toString());

}

}

}

}

}

}

 else if (value instanceof HostDatum) {

HostDatum buffer=(HostDatum)value;

if (buffer.hasHomepageUrl()) {

hostDatum.setHomepageUrl(buffer.getHomepageUrl());

}

if (!buffer.isEmpty()) {

hostDatum.setLastCheck(buffer.getLastCheck());

}

if (buffer.getDnsFailures() > 0) {

hostDatum.setDnsFailures(buffer.getDnsFailures());

}

if (buffer.getConnectionFailures() > 0) {

hostDatum.setConnectionFailures(buffer.getConnectionFailures());

}

if (!buffer.getMetaData().isEmpty()) {

hostDatum.setMetaData(buffer.getMetaData());

}

if (buffer.getScore() > 0) {

hostDatum.setScore(buffer.getScore());

}

}

 else if (value instanceof FloatWritable) {

FloatWritable buffer=(FloatWritable)value;

score=buffer.get();

}

 else {

LOG.error("Class {} not handled",value.getClass());

}

}

if (score > 0) {

hostDatum.setScore(score);

}

for (Map.Entry<String,Map<String,Long>> entry : stringCounts.entrySet()) {

for (Map.Entry<String,Long> subEntry : entry.getValue().entrySet()) {

hostDatum.getMetaData().put(new Text(entry.getKey() + "." + subEntry.getKey()),new LongWritable(subEntry.getValue()));

}

}

for (Map.Entry<String,Float> entry : maximums.entrySet()) {

hostDatum.getMetaData().put(new Text("max." + entry.getKey()),new FloatWritable(entry.getValue()));

}

for (Map.Entry<String,Float> entry : sums.entrySet()) {

hostDatum.getMetaData().put(new Text("avg." + entry.getKey()),new FloatWritable(entry.getValue() / counts.get(entry.getKey())));

}

for (Map.Entry<String,TDigest> entry : tdigests.entrySet()) {

for (int i=0; i < percentiles.length; i++) {

hostDatum.getMetaData().put(new Text("pct" + Long.toString(percentiles[i]) + "."+ entry.getKey()),new FloatWritable((float)entry.getValue().quantile(0.5)));

}

}

for (Map.Entry<String,Float> entry : minimums.entrySet()) {

hostDatum.getMetaData().put(new Text("min." + entry.getKey()),new FloatWritable(entry.getValue()));

}

context.getCounter("UpdateHostDb","total_hosts").increment(1);

if (shouldCheck(hostDatum)) {

resolverThread=new ResolverThread(key.toString(),hostDatum,context,purgeFailedHostsThreshold);

try {

queue.put(resolverThread);

}

 catch (InterruptedException e) {

LOG.error("UpdateHostDb: " + StringUtils.stringifyException(e));

}

return;

}

 else {

context.getCounter("UpdateHostDb","skipped_not_eligible").increment(1);

LOG.info("UpdateHostDb: {}: skipped_not_eligible",key);

}

context.write(key,hostDatum);

}

Location: UpdateHostDbReducer.java

Content: 

/** 

 * Configures the thread pool and prestarts all resolver threads.

 */

@Override public void setup(Reducer<Text,NutchWritable,Text,HostDatum>.Context context){

  Configuration conf=context.getConfiguration();

  purgeFailedHostsThreshold=conf.getInt(UpdateHostDb.HOSTDB_PURGE_FAILED_HOSTS_THRESHOLD,-1);

  numResolverThreads=conf.getInt(UpdateHostDb.HOSTDB_NUM_RESOLVER_THREADS,10);

  recheckInterval=conf.getInt(UpdateHostDb.HOSTDB_RECHECK_INTERVAL,86400) * 1000;

  checkFailed=conf.getBoolean(UpdateHostDb.HOSTDB_CHECK_FAILED,false);

  checkNew=conf.getBoolean(UpdateHostDb.HOSTDB_CHECK_NEW,false);

  checkKnown=conf.getBoolean(UpdateHostDb.HOSTDB_CHECK_KNOWN,false);

  force=conf.getBoolean(UpdateHostDb.HOSTDB_FORCE_CHECK,false);

  numericFields=conf.getStrings(UpdateHostDb.HOSTDB_NUMERIC_FIELDS);

  stringFields=conf.getStrings(UpdateHostDb.HOSTDB_STRING_FIELDS);

  percentiles=conf.getInts(UpdateHostDb.HOSTDB_PERCENTILES);

  if (numericFields != null) {

    numericFieldWritables=new Text[numericFields.length];

    for (int i=0; i < numericFields.length; i++) {

      numericFieldWritables[i]=new Text(numericFields[i]);

    }

  }

  if (stringFields != null) {

    stringFieldWritables=new Text[stringFields.length];

    for (int i=0; i < stringFields.length; i++) {

      stringFieldWritables[i]=new Text(stringFields[i]);

    }

  }

  executor=new ThreadPoolExecutor(numResolverThreads,numResolverThreads,5,TimeUnit.SECONDS,queue);

  executor.prestartAllCoreThreads();

}

Location: UpdateHostDbReducer.java

Content: 

/** 

 * Determines whether a record should be checked.

 * @param datum a {@link HostDatum} to check for eligibility

 * @return true if it should be checked, false otherwise

 */

protected boolean shouldCheck(HostDatum datum){

  if (checkNew && datum.isEmpty()) {

    return true;

  }

  if (checkKnown && !datum.isEmpty() && datum.getDnsFailures() == 0) {

    return isEligibleForCheck(datum);

  }

  if (checkFailed && datum.getDnsFailures() > 0) {

    return isEligibleForCheck(datum);

  }

  return false;

}

