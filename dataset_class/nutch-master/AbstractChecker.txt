Location: AbstractChecker.java

Content: 

protected ProtocolOutput getProtocolOutput(String url,CrawlDatum datum,boolean checkRobotsTxt) throws Exception {

  ProtocolFactory factory=new ProtocolFactory(getConf());

  Protocol protocol=factory.getProtocol(url);

  Text turl=new Text(url);

  if (checkRobotsTxt) {

    System.err.print("Checking robots.txt ...");

    BaseRobotRules rules=protocol.getRobotRules(turl,datum,null);

    if (rules.isAllowed(url)) {

      System.err.println(" (allowed)");

    }

 else {

      System.err.println("\nDenied by robots.txt: " + url);

      return null;

    }

  }

  return protocol.getProtocolOutput(turl,datum);

}

Location: AbstractChecker.java

Content: 

protected int parseArgs(String[] args,int i){

  if (args[i].equals("-listen")) {

    tcpPort=Integer.parseInt(args[++i]);

    return 2;

  }

 else   if (args[i].equals("-keepClientCnxOpen")) {

    keepClientCnxOpen=true;

    return 1;

  }

 else   if (args[i].equals("-stdin")) {

    stdin=true;

    return 1;

  }

  return 0;

}

Location: AbstractChecker.java

Content: 

protected int processSingle(String input) throws Exception {

  StringBuilder output=new StringBuilder();

  int ret=process(input,output);

  System.out.println(output);

  return ret;

}

Location: AbstractChecker.java

Content: 

protected int processStdin() throws Exception {

  BufferedReader in=new BufferedReader(new InputStreamReader(System.in));

  String line;

  while ((line=in.readLine()) != null) {

    StringBuilder output=new StringBuilder();

    @SuppressWarnings("unused") int ret=process(line,output);

    System.out.println(output);

  }

  return 0;

}

Location: AbstractChecker.java

Content: 

@SuppressWarnings("resource") protected void processTCP(int tcpPort) throws Exception {

  ServerSocket server=null;

  try {

    server=new ServerSocket();

    server.bind(new InetSocketAddress(tcpPort));

    LOG.info(server.toString());

  }

 catch (  Exception e) {

    LOG.error("Could not listen on port " + tcpPort,e);

    System.exit(-1);

  }

  while (true) {

    Worker worker;

    try {

      worker=new Worker(server.accept());

      Thread thread=new Thread(worker);

      thread.start();

    }

 catch (    Exception e) {

      LOG.error("Accept failed: " + tcpPort,e);

      System.exit(-1);

    }

  }

}

Location: AbstractChecker.java

Content: 

protected abstract int process(String line,StringBuilder output) throws Exception ;

Location: AbstractChecker.java

Content: 

protected int run() throws Exception {

  if (tcpPort != -1) {

    processTCP(tcpPort);

    return 0;

  }

 else   if (stdin) {

    return processStdin();

  }

  return -1;

}

