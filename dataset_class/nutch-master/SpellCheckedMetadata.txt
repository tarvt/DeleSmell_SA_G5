Location: SpellCheckedMetadata.java

Content: 

@Override public void add(final String name,final String value){

  super.add(getNormalizedName(name),value);

}

Location: SpellCheckedMetadata.java

Content: 

/** 

 * Get the normalized name of metadata attribute name. This method tries to find a well-known metadata name (one of the metadata names defined in this class) that matches the specified name. The matching is error tolerent. For instance, <ul> <li>content-type gives Content-Type</li> <li>CoNtEntType gives Content-Type</li> <li>ConTnTtYpe gives Content-Type</li> </ul> If no matching with a well-known metadata name is found, then the original name is returned.

 * @param name Name to normalize

 * @return normalized name

 */

public static String getNormalizedName(final String name){

  String searched=normalize(name);

  String value=NAMES_IDX.get(searched);

  if ((value == null) && (normalized != null)) {

    int threshold=Math.min(3,searched.length() / TRESHOLD_DIVIDER);

    for (int i=0; i < normalized.length && value == null; i++) {

      if (StringUtils.getLevenshteinDistance(searched,normalized[i]) < threshold) {

        value=NAMES_IDX.get(normalized[i]);

      }

    }

  }

  return (value != null) ? value : name;

}

Location: SpellCheckedMetadata.java

Content: 

@Override public String[] getValues(final String name){

  return super.getValues(getNormalizedName(name));

}

Location: SpellCheckedMetadata.java

Content: 

/** 

 * Normalizes String.

 * @param str the string to normalize

 * @return normalized String

 */

private static String normalize(final String str){

  char c;

  StringBuffer buf=new StringBuffer();

  for (int i=0; i < str.length(); i++) {

    c=str.charAt(i);

    if (Character.isLetter(c)) {

      buf.append(Character.toLowerCase(c));

    }

  }

  return buf.toString();

}

Location: SpellCheckedMetadata.java

Content: 

@Override public void remove(final String name){

  super.remove(getNormalizedName(name));

}

Location: SpellCheckedMetadata.java

Content: 

@Override public void set(final String name,final String value){

  super.set(getNormalizedName(name),value);

}

