Location: TestFeedParser.java

Content: 

/** 

 * Calls the  {@link FeedParser} on a sample RSS file and checks that there are3  {@link ParseResult} entries including the below 2 links:<ul> <li>http://www-scf.usc.edu/~mattmann/</li> <li>http://www.nutch.org</li> </ul>

 * @throws ProtocolNotFound If the  {@link Protocol}Layer cannot be loaded (required to fetch the  {@link Content} for the RSS file).

 * @throws ParseException If the  {@link Parser}Layer cannot be loaded.

 */

@Test public void testParseFetchChannel() throws ProtocolNotFound, ParseException {

  String urlString;

  Protocol protocol;

  Content content;

  ParseResult parseResult;

  Configuration conf=NutchConfiguration.create();

  for (int i=0; i < sampleFiles.length; i++) {

    urlString="file:" + sampleDir + fileSeparator+ sampleFiles[i];

    urlString=urlString.replace('\\','/');

    protocol=new ProtocolFactory(conf).getProtocol(urlString);

    content=protocol.getProtocolOutput(new Text(urlString),new CrawlDatum()).getContent();

    parseResult=new ParseUtil(conf).parseByExtensionId("feed",content);

    Assert.assertEquals(3,parseResult.size());

    boolean hasLink1=false, hasLink2=false, hasLink3=false;

    for (Iterator<Map.Entry<Text,Parse>> j=parseResult.iterator(); j.hasNext(); ) {

      Map.Entry<Text,Parse> entry=j.next();

      if (entry.getKey().toString().equals("http://www-scf.usc.edu/~mattmann/")) {

        hasLink1=true;

      }

 else       if (entry.getKey().toString().equals("http://www.nutch.org/")) {

        hasLink2=true;

      }

 else       if (entry.getKey().toString().equals(urlString)) {

        hasLink3=true;

      }

      Assert.assertNotNull(entry.getValue());

      Assert.assertNotNull(entry.getValue().getData());

    }

    if (!hasLink1 || !hasLink2 || !hasLink3) {

      Assert.fail("Outlinks read from sample rss file are not correct!");

    }

  }

}

