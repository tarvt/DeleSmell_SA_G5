Location: TableUtil.java

Content: 

/** 

 * Given a reversed url, returns the reversed host E.g "com.foo.bar:http:8983/to/index.html?a=b" -&gt; "com.foo.bar"

 * @param reversedUrl Reversed url

 * @return Reversed host

 */

public static String getReversedHost(String reversedUrl){

  return reversedUrl.substring(0,reversedUrl.indexOf(':'));

}

Location: TableUtil.java

Content: 

private static void reverseAppendSplits(String string,StringBuilder buf){

  String[] splits=StringUtils.split(string,'.');

  if (splits.length > 0) {

    for (int i=splits.length - 1; i > 0; i--) {

      buf.append(splits[i]);

      buf.append('.');

    }

    buf.append(splits[0]);

  }

 else {

    buf.append(string);

  }

}

Location: TableUtil.java

Content: 

public static String reverseHost(String hostName){

  StringBuilder buf=new StringBuilder();

  reverseAppendSplits(hostName,buf);

  return buf.toString();

}

Location: TableUtil.java

Content: 

/** 

 * Reverses a url's domain. This form is better for storing in hbase. Because scans within the same domain are faster. <p> E.g. "http://bar.foo.com:8983/to/index.html?a=b" becomes "com.foo.bar:8983:http/to/index.html?a=b".

 * @param urlString url to be reversed

 * @return Reversed url

 * @throws MalformedURLException if the input urlString is malformed

 */

public static String reverseUrl(String urlString) throws MalformedURLException {

  return reverseUrl(new URL(urlString));

}

Location: TableUtil.java

Content: 

/** 

 * Reverses a url's domain. This form is better for storing in hbase. Because scans within the same domain are faster. <p> E.g. "http://bar.foo.com:8983/to/index.html?a=b" becomes "com.foo.bar:http:8983/to/index.html?a=b".

 * @param url url to be reversed

 * @return Reversed url

 */

public static String reverseUrl(URL url){

  String host=url.getHost();

  String file=url.getFile();

  String protocol=url.getProtocol();

  int port=url.getPort();

  StringBuilder buf=new StringBuilder();

  reverseAppendSplits(host,buf);

  buf.append(':');

  buf.append(protocol);

  if (port != -1) {

    buf.append(':');

    buf.append(port);

  }

  if (file.length() > 0 && '/' != file.charAt(0)) {

    buf.append('/');

  }

  buf.append(file);

  return buf.toString();

}

Location: TableUtil.java

Content: 

/** 

 * Convert given Utf8 instance to String and and cleans out any offending "ï¿?" from the String.

 * @param utf8 Utf8 object

 * @return string-ifed Utf8 object or null if Utf8 instance is null

 */

public static String toString(CharSequence utf8){

  return (utf8 == null ? null : StringUtil.cleanField(utf8.toString()));

}

Location: TableUtil.java

Content: 

public static String unreverseHost(String reversedHostName){

  return reverseHost(reversedHostName);

}

Location: TableUtil.java

Content: 

public static String unreverseUrl(String reversedUrl){

  StringBuilder buf=new StringBuilder(reversedUrl.length() + 2);

  int pathBegin=reversedUrl.indexOf('/');

  if (pathBegin == -1)   pathBegin=reversedUrl.length();

  String sub=reversedUrl.substring(0,pathBegin);

  String[] splits=StringUtils.splitPreserveAllTokens(sub,':');

  buf.append(splits[1]);

  buf.append("://");

  reverseAppendSplits(splits[0],buf);

  if (splits.length == 3) {

    buf.append(':');

    buf.append(splits[2]);

  }

  buf.append(reversedUrl.substring(pathBegin));

  return buf.toString();

}

