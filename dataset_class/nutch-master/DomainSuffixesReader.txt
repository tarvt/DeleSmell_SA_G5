Location: DomainSuffixesReader.java

Content: 

/** 

 * read optional field boost 

 */

float readBoost(Element el){

  NodeList list=el.getElementsByTagName("boost");

  if (list == null || list.getLength() == 0)   return DomainSuffix.DEFAULT_BOOST;

  return Float.parseFloat(list.item(0).getFirstChild().getNodeValue());

}

Location: DomainSuffixesReader.java

Content: 

void readCCTLDs(DomainSuffixes tldEntries,Element el) throws IOException {

  NodeList children=el.getElementsByTagName("tld");

  for (int i=0; i < children.getLength(); i++) {

    tldEntries.addDomainSuffix(readCCTLD((Element)children.item(i)));

  }

}

Location: DomainSuffixesReader.java

Content: 

TopLevelDomain readCCTLD(Element el) throws IOException {

  String domain=el.getAttribute("domain");

  Status status=readStatus(el);

  float boost=readBoost(el);

  String countryName=readCountryName(el);

  return new TopLevelDomain(domain,status,boost,countryName);

}

Location: DomainSuffixesReader.java

Content: 

/** 

 * read field countryname

 */

String readCountryName(Element el) throws IOException {

  NodeList list=el.getElementsByTagName("country");

  if (list == null || list.getLength() == 0)   throw new IOException("Country name should be given");

  return list.item(0).getNodeValue();

}

Location: DomainSuffixesReader.java

Content: 

void readGTLDs(DomainSuffixes tldEntries,Element el){

  NodeList children=el.getElementsByTagName("tld");

  for (int i=0; i < children.getLength(); i++) {

    tldEntries.addDomainSuffix(readGTLD((Element)children.item(i),Type.GENERIC));

  }

}

Location: DomainSuffixesReader.java

Content: 

TopLevelDomain readGTLD(Element el,Type type){

  String domain=el.getAttribute("domain");

  Status status=readStatus(el);

  float boost=readBoost(el);

  return new TopLevelDomain(domain,type,status,boost);

}

Location: DomainSuffixesReader.java

Content: 

void readITLDs(DomainSuffixes tldEntries,Element el){

  NodeList children=el.getElementsByTagName("tld");

  for (int i=0; i < children.getLength(); i++) {

    tldEntries.addDomainSuffix(readGTLD((Element)children.item(i),Type.INFRASTRUCTURE));

  }

}

Location: DomainSuffixesReader.java

Content: 

/** 

 * read optional field status 

 */

Status readStatus(Element el){

  NodeList list=el.getElementsByTagName("status");

  if (list == null || list.getLength() == 0)   return DomainSuffix.DEFAULT_STATUS;

  return Status.valueOf(list.item(0).getFirstChild().getNodeValue());

}

Location: DomainSuffixesReader.java

Content: 

void readSuffixes(DomainSuffixes tldEntries,Element el){

  NodeList children=el.getElementsByTagName("suffix");

  for (int i=0; i < children.getLength(); i++) {

    tldEntries.addDomainSuffix(readSuffix((Element)children.item(i)));

  }

}

Location: DomainSuffixesReader.java

Content: 

DomainSuffix readSuffix(Element el){

  String domain=el.getAttribute("domain");

  Status status=readStatus(el);

  float boost=readBoost(el);

  return new DomainSuffix(domain,status,boost);

}

Location: DomainSuffixesReader.java

Content: 

void read(DomainSuffixes tldEntries,InputStream input) throws IOException {

  try {

    DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();

    factory.setIgnoringComments(true);

    DocumentBuilder builder=factory.newDocumentBuilder();

    Document document=builder.parse(new InputSource(input));

    Element root=document.getDocumentElement();

    if (root != null && root.getTagName().equals("domains")) {

      Element tlds=(Element)root.getElementsByTagName("tlds").item(0);

      Element suffixes=(Element)root.getElementsByTagName("suffixes").item(0);

      readITLDs(tldEntries,(Element)tlds.getElementsByTagName("itlds").item(0));

      readGTLDs(tldEntries,(Element)tlds.getElementsByTagName("gtlds").item(0));

      readCCTLDs(tldEntries,(Element)tlds.getElementsByTagName("cctlds").item(0));

      readSuffixes(tldEntries,suffixes);

    }

 else {

      throw new IOException("xml file is not valid");

    }

  }

 catch (  ParserConfigurationException ex) {

    LOG.warn(StringUtils.stringifyException(ex));

    throw new IOException(ex.getMessage());

  }

catch (  SAXException ex) {

    LOG.warn(StringUtils.stringifyException(ex));

    throw new IOException(ex.getMessage());

  }

}

