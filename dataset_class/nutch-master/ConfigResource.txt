Location: ConfigResource.java

Content: 

/** 

 * Create new configuration.

 * @param newConfig a new populated {@link NutchConfig}

 * @return The name of the new configuration created

 */

@POST @Path("/create") @Consumes(MediaType.APPLICATION_JSON) @Produces(MediaType.TEXT_PLAIN) public Response createConfig(NutchConfig newConfig){

  if (newConfig == null) {

    return Response.status(400).entity("Nutch configuration cannot be empty!").build();

  }

  try {

    configManager.create(newConfig);

  }

 catch (  Exception e) {

    return Response.status(400).entity(e.getMessage()).build();

  }

  return Response.ok(newConfig.getConfigId()).build();

}

Location: ConfigResource.java

Content: 

/** 

 * Removes the configuration from the list of known configurations. 

 * @param configId The ID of the configuration to delete

 */

@DELETE @Path("/{configId}") public void deleteConfig(@PathParam("configId") String configId){

  configManager.delete(configId);

}

Location: ConfigResource.java

Content: 

/** 

 * Returns a list of all configurations created.

 * @return List of configurations

 */

@GET @Path("/") @JacksonFeatures(serializationEnable={SerializationFeature.INDENT_OUTPUT}) public Set<String> getConfigs(){

  return configManager.list();

}

Location: ConfigResource.java

Content: 

/** 

 * Get configuration properties 

 * @param configId The configuration ID to fetch

 * @return HashMap of the properties set within the given configId

 */

@GET @Path("/{configId}") @JacksonFeatures(serializationEnable={SerializationFeature.INDENT_OUTPUT}) public Map<String,String> getConfig(@PathParam("configId") String configId){

  return configManager.getAsMap(configId);

}

Location: ConfigResource.java

Content: 

/** 

 * Get property 

 * @param configId The ID of the configuration

 * @param propertyId The name(key) of the property

 * @return value of the specified property in the provided configId.

 */

@GET @Path("/{configId}/{propertyId}") @Produces(MediaType.TEXT_PLAIN) @JacksonFeatures(serializationEnable={SerializationFeature.INDENT_OUTPUT}) public String getProperty(@PathParam("configId") String configId,@PathParam("propertyId") String propertyId){

  return configManager.getAsMap(configId).get(propertyId);

}

Location: ConfigResource.java

Content: 

/** 

 * Adds/Updates a particular property value in the configuration

 * @param confId Configuration ID whose property needs to be updated. Make sure that the givenconfId exists to prevent errors. 

 * @param propertyKey Name of the property

 * @param value Value as a simple text 

 * @return Success code

 */

@PUT @Path("/{configId}/{propertyId}") @Consumes(MediaType.TEXT_PLAIN) public Response updateProperty(@PathParam("configId") String confId,@PathParam("propertyId") String propertyKey,String value){

  try {

    configManager.setProperty(confId,propertyKey,value);

  }

 catch (  Exception e) {

    return Response.status(400).entity(e.getMessage()).build();

  }

  return Response.ok().build();

}

