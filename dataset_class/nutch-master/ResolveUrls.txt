Location: ResolveUrls.java

Content: 

/** 

 * Creates a thread pool for resolving urls. Reads in the url file on the local filesystem. For each url it attempts to resolve it keeping a total account of the number resolved, errored, and the amount of time.

 */

public void resolveUrls(){

  try {

    pool=Executors.newFixedThreadPool(numThreads);

    BufferedReader buffRead=new BufferedReader(new FileReader(new File(urlsFile)));

    String urlStr=null;

    while ((urlStr=buffRead.readLine()) != null) {

      LOG.info("Starting: " + urlStr);

      pool.execute(new ResolverThread(urlStr));

    }

    buffRead.close();

    pool.awaitTermination(60,TimeUnit.SECONDS);

  }

 catch (  Exception e) {

    pool.shutdownNow();

    LOG.info(StringUtils.stringifyException(e));

  }

  pool.shutdown();

  LOG.info("Total: " + numTotal.get() + ", Resovled: "+ numResolved.get()+ ", Errored: "+ numErrored.get()+ ", Average Time: "+ totalTime.get() / numTotal.get());

}

Location: ResolveUrls.java

Content: 

/** 

 * Create a new ResolveUrls with a file from the local file system.

 * @param urlsFile The local urls file, one url per line.

 */

public ResolveUrls(String urlsFile){

  this(urlsFile,100);

}

Location: ResolveUrls.java

Content: 

/** 

 * Create a new ResolveUrls with a urls file and a number of threads for the Thread pool. Number of threads is 100 by default.

 * @param urlsFile The local urls file, one url per line.

 * @param numThreads The number of threads used to resolve urls in parallel.

 */

public ResolveUrls(String urlsFile,int numThreads){

  this.urlsFile=urlsFile;

  this.numThreads=numThreads;

}

