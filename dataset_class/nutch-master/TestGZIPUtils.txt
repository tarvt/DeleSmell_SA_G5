Location: TestGZIPUtils.java

Content: 

@Test public void testLimit(){

  byte[] testBytes=SHORT_TEST_STRING.getBytes();

  testLimit(testBytes);

  testBytes=LONGER_TEST_STRING.getBytes();

  testLimit(testBytes);

  testBytes=WEBPAGE.getBytes();

  testLimit(testBytes);

}

Location: TestGZIPUtils.java

Content: 

public void testLimit(byte[] origBytes){

  byte[] compressedBytes=GZIPUtils.zip(origBytes);

  Assert.assertTrue("compressed array is not smaller!",compressedBytes.length < origBytes.length);

  for (int i=0; i < origBytes.length; i++) {

    byte[] uncompressedBytes=GZIPUtils.unzipBestEffort(compressedBytes,i);

    Assert.assertTrue("uncompressedBytes is wrong size",uncompressedBytes.length == i);

    for (int j=0; j < i; j++)     if (origBytes[j] != uncompressedBytes[j])     Assert.assertTrue("uncompressedBytes does not match origBytes",false);

  }

}

Location: TestGZIPUtils.java

Content: 

public void testTruncation(){

  byte[] testBytes=SHORT_TEST_STRING.getBytes();

  testTruncation(testBytes);

  testBytes=LONGER_TEST_STRING.getBytes();

  testTruncation(testBytes);

  testBytes=WEBPAGE.getBytes();

  testTruncation(testBytes);

}

Location: TestGZIPUtils.java

Content: 

public void testTruncation(byte[] origBytes){

  byte[] compressedBytes=GZIPUtils.zip(origBytes);

  System.out.println("original data has len " + origBytes.length);

  System.out.println("compressed data has len " + compressedBytes.length);

  for (int i=compressedBytes.length; i >= 0; i--) {

    byte[] truncCompressed=new byte[i];

    for (int j=0; j < i; j++)     truncCompressed[j]=compressedBytes[j];

    byte[] trunc=GZIPUtils.unzipBestEffort(truncCompressed);

    if (trunc == null) {

      System.out.println("truncated to len " + i + ", trunc is null");

    }

 else {

      System.out.println("truncated to len " + i + ", trunc.length=  "+ trunc.length);

      for (int j=0; j < trunc.length; j++)       if (trunc[j] != origBytes[j])       Assert.assertTrue("truncated/uncompressed array differs at pos " + j + " (compressed data had been truncated to len "+ i+ ")",false);

    }

  }

}

Location: TestGZIPUtils.java

Content: 

@Test public void testZipUnzip(){

  byte[] testBytes=SHORT_TEST_STRING.getBytes();

  testZipUnzip(testBytes);

  testBytes=LONGER_TEST_STRING.getBytes();

  testZipUnzip(testBytes);

  testBytes=WEBPAGE.getBytes();

  testZipUnzip(testBytes);

}

Location: TestGZIPUtils.java

Content: 

@Test public void testZipUnzipBestEffort(){

  byte[] testBytes=SHORT_TEST_STRING.getBytes();

  testZipUnzipBestEffort(testBytes);

  testBytes=LONGER_TEST_STRING.getBytes();

  testZipUnzipBestEffort(testBytes);

  testBytes=WEBPAGE.getBytes();

  testZipUnzipBestEffort(testBytes);

}

Location: TestGZIPUtils.java

Content: 

public void testZipUnzipBestEffort(byte[] origBytes){

  byte[] compressedBytes=GZIPUtils.zip(origBytes);

  Assert.assertTrue("compressed array is not smaller!",compressedBytes.length < origBytes.length);

  byte[] uncompressedBytes=GZIPUtils.unzipBestEffort(compressedBytes);

  Assert.assertTrue("uncompressedBytes is wrong size",uncompressedBytes.length == origBytes.length);

  for (int i=0; i < origBytes.length; i++)   if (origBytes[i] != uncompressedBytes[i])   Assert.assertTrue("uncompressedBytes does not match origBytes",false);

}

Location: TestGZIPUtils.java

Content: 

public void testZipUnzip(byte[] origBytes){

  byte[] compressedBytes=GZIPUtils.zip(origBytes);

  Assert.assertTrue("compressed array is not smaller!",compressedBytes.length < origBytes.length);

  byte[] uncompressedBytes=null;

  try {

    uncompressedBytes=GZIPUtils.unzip(compressedBytes);

  }

 catch (  IOException e) {

    e.printStackTrace();

    Assert.assertTrue("caught exception '" + e + "' during unzip()",false);

  }

  Assert.assertTrue("uncompressedBytes is wrong size",uncompressedBytes.length == origBytes.length);

  for (int i=0; i < origBytes.length; i++)   if (origBytes[i] != uncompressedBytes[i])   Assert.assertTrue("uncompressedBytes does not match origBytes",false);

}

