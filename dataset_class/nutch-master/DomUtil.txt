Location: DomUtil.java

Content: 

/** 

 * Returns parsed dom tree or null if any error

 * @param is XML {@link InputStream}

 * @return A parsed DOM tree from the given {@link InputStream}.

 */

public static Element getDom(InputStream is){

  Element element=null;

  DOMParser parser=new DOMParser();

  InputSource input;

  try {

    input=new InputSource(is);

    input.setEncoding("UTF-8");

    parser.parse(input);

    int i=0;

    while (!(parser.getDocument().getChildNodes().item(i) instanceof Element)) {

      i++;

    }

    element=(Element)parser.getDocument().getChildNodes().item(i);

  }

 catch (  FileNotFoundException e) {

    LOG.error("Error: ",e);

  }

catch (  SAXException e) {

    LOG.error("Error: ",e);

  }

catch (  IOException e) {

    LOG.error("Error: ",e);

  }

  return element;

}

Location: DomUtil.java

Content: 

/** 

 * Save dom into  {@link OutputStream}

 * @param os Output DOM XML stream to save to

 * @param doc A specific DOM {@link org.w3c.dom.DocumentFragment} to save

 */

public static void saveDom(OutputStream os,DocumentFragment doc){

  NodeList docChildren=doc.getChildNodes();

  for (int i=0; i < docChildren.getLength(); i++) {

    Node child=docChildren.item(i);

    if (child instanceof Element) {

      saveDom(os,(Element)child);

    }

 else {

      try {

        os.write(child.toString().getBytes(StandardCharsets.UTF_8));

      }

 catch (      IOException ex) {

        LOG.error("Error: ",ex);

      }

    }

  }

}

Location: DomUtil.java

Content: 

/** 

 * Save dom into  {@link OutputStream}

 * @param os Output DOM XML stream to save to

 * @param e A specific DOM {@link org.w3c.dom.Element} to save

 */

public static void saveDom(OutputStream os,Element e){

  DOMSource source=new DOMSource(e);

  TransformerFactory transFactory=TransformerFactory.newInstance();

  Transformer transformer;

  try {

    transformer=transFactory.newTransformer();

    transformer.setOutputProperty("indent","yes");

    transformer.setOutputProperty(OutputKeys.ENCODING,StandardCharsets.UTF_8.name());

    StreamResult result=new StreamResult(os);

    transformer.transform(source,result);

    os.flush();

  }

 catch (  IOException|TransformerException ex) {

    LOG.error("Error: ",ex);

  }

}

