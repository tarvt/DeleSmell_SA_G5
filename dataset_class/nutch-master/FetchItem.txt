Location: FetchItem.java

Content: 

/** 

 * Create an item. Queue id will be created based on <code>queueMode</code> argument, either as a protocol + hostname pair, protocol + IP address pair or protocol+domain pair. Sets outlink depth to 0.

 * @param url URL of fetch item

 * @param datum webpage information associated with the URL

 * @param queueMode either byHost, byDomain or byIP.

 * @see FetchItemQueues#QUEUE_MODE_DOMAIN

 * @see FetchItemQueues#QUEUE_MODE_HOST

 * @see FetchItemQueues#QUEUE_MODE_IP

 * @return a {@link FetchItem} with outlinks depth of 0

 */

public static FetchItem create(Text url,CrawlDatum datum,String queueMode){

  return create(url,datum,queueMode,0);

}

Location: FetchItem.java

Content: 

/** 

 * Create an item. Queue id will be created based on <code>queueMode</code> argument, either as a protocol + hostname pair, protocol + IP address pair or protocol+domain pair. Configurable outlink depth.

 * @param url URL of fetch item

 * @param datum webpage information associated with the URL

 * @param queueMode either byHost, byDomain or byIP

 * @param outlinkDepth the desired depth of outlink for this given FetchItem

 * @see FetchItemQueues#QUEUE_MODE_DOMAIN

 * @see FetchItemQueues#QUEUE_MODE_HOST

 * @see FetchItemQueues#QUEUE_MODE_IP

 * @return a {@link FetchItem}

 */

public static FetchItem create(Text url,CrawlDatum datum,String queueMode,int outlinkDepth){

  URL u=null;

  try {

    u=new URL(url.toString());

  }

 catch (  Exception e) {

    LOG.warn("Cannot parse url: " + url,e);

    return null;

  }

  String key;

  if (FetchItemQueues.QUEUE_MODE_IP.equalsIgnoreCase(queueMode)) {

    try {

      final InetAddress addr=InetAddress.getByName(u.getHost());

      key=addr.getHostAddress();

    }

 catch (    final UnknownHostException e) {

      LOG.warn("Unable to resolve: " + u.getHost() + ", skipping.");

      return null;

    }

  }

 else   if (FetchItemQueues.QUEUE_MODE_DOMAIN.equalsIgnoreCase(queueMode)) {

    key=URLUtil.getDomainName(u).toLowerCase(Locale.ROOT);

    if (key == null) {

      LOG.warn("Unknown domain for url: " + url + ", using URL string as key");

      key=u.toExternalForm();

    }

  }

 else {

    key=u.getHost().toLowerCase(Locale.ROOT);

    if (key == null) {

      LOG.warn("Unknown host for url: " + url + ", using URL string as key");

      key=u.toExternalForm();

    }

  }

  return new FetchItem(url,u,datum,key,outlinkDepth);

}

Location: FetchItem.java

Content: 

public FetchItem(Text url,URL u,CrawlDatum datum,String queueID){

  this(url,u,datum,queueID,0);

}

Location: FetchItem.java

Content: 

public FetchItem(Text url,URL u,CrawlDatum datum,String queueID,int outlinkDepth){

  this.url=url;

  this.u=u;

  this.datum=datum;

  this.queueID=queueID;

  this.outlinkDepth=outlinkDepth;

}

Location: FetchItem.java

Content: 

public CrawlDatum getDatum(){

  return datum;

}

Location: FetchItem.java

Content: 

public String getQueueID(){

  return queueID;

}

Location: FetchItem.java

Content: 

public URL getURL2(){

  return u;

}

