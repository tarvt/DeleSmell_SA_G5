Location: ConfManagerImpl.java

Content: 

private boolean canCreate(NutchConfig nutchConfig){

  if (nutchConfig.isForce()) {

    return true;

  }

  if (!configurations.containsKey(nutchConfig.getConfigId())) {

    return true;

  }

  return false;

}

Location: ConfManagerImpl.java

Content: 

public ConfManagerImpl(){

  configurations.put(ConfigResource.DEFAULT,NutchConfiguration.create());

}

Location: ConfManagerImpl.java

Content: 

private void createHadoopConfig(NutchConfig nutchConfig){

  Configuration conf=NutchConfiguration.create();

  configurations.put(nutchConfig.getConfigId(),conf);

  if (MapUtils.isEmpty(nutchConfig.getParams())) {

    return;

  }

  for (  Entry<String,String> e : nutchConfig.getParams().entrySet()) {

    conf.set(e.getKey(),e.getValue());

  }

}

Location: ConfManagerImpl.java

Content: 

/** 

 * Created a new configuration based on the values provided.

 * @param nutchConfig crawler configuration

 * @return String - confId

 */

public String create(NutchConfig nutchConfig){

  if (StringUtils.isBlank(nutchConfig.getConfigId())) {

    nutchConfig.setConfigId(String.valueOf(newConfigId.incrementAndGet()));

  }

  if (!canCreate(nutchConfig)) {

    throw new IllegalArgumentException("Config already exists.");

  }

  createHadoopConfig(nutchConfig);

  return nutchConfig.getConfigId();

}

Location: ConfManagerImpl.java

Content: 

public void delete(String confId){

  configurations.remove(confId);

}

Location: ConfManagerImpl.java

Content: 

public Map<String,String> getAsMap(String confId){

  Configuration configuration=configurations.get(confId);

  if (configuration == null) {

    return Collections.emptyMap();

  }

  Iterator<Entry<String,String>> iterator=configuration.iterator();

  Map<String,String> configMap=Maps.newTreeMap();

  while (iterator.hasNext()) {

    Entry<String,String> entry=iterator.next();

    configMap.put(entry.getKey(),entry.getValue());

  }

  return configMap;

}

Location: ConfManagerImpl.java

Content: 

public Set<String> list(){

  return configurations.keySet();

}

Location: ConfManagerImpl.java

Content: 

/** 

 * Sets the given property in the configuration associated with the confId

 */

public void setProperty(String confId,String propName,String propValue){

  if (!configurations.containsKey(confId)) {

    throw new IllegalArgumentException("Unknown configId '" + confId + "'");

  }

  Configuration conf=configurations.get(confId);

  conf.set(propName,propValue);

}

