Location: FeedParser.java

Content: 

private void addFields(Metadata parseMeta,Metadata contentMeta,SyndFeed feed,SyndEntry entry){

  List<?> authors=entry.getAuthors(), categories=entry.getCategories();

  Date published=entry.getPublishedDate(), updated=entry.getUpdatedDate();

  String contentType=null;

  if (authors != null) {

    for (    Object o : authors) {

      SyndPerson author=(SyndPerson)o;

      String authorName=author.getName();

      if (checkString(authorName)) {

        parseMeta.add(Feed.FEED_AUTHOR,authorName);

      }

    }

  }

 else {

    String authorName=entry.getAuthor();

    if (checkString(authorName)) {

      parseMeta.set(Feed.FEED_AUTHOR,authorName);

    }

  }

  for (  Object i : categories) {

    parseMeta.add(Feed.FEED_TAGS,((SyndCategory)i).getName());

  }

  if (published != null) {

    parseMeta.set(Feed.FEED_PUBLISHED,Long.toString(published.getTime()));

  }

  if (updated != null) {

    parseMeta.set(Feed.FEED_UPDATED,Long.toString(updated.getTime()));

  }

  SyndContent description=entry.getDescription();

  if (description != null) {

    contentType=description.getType();

  }

 else {

    List<?> contents=entry.getContents();

    if (contents.size() > 0) {

      contentType=((SyndContent)contents.get(0)).getType();

    }

  }

  if (checkString(contentType)) {

    if (contentType.equals("html"))     contentType="text/html";

 else     if (contentType.equals("xhtml"))     contentType="text/xhtml";

    contentMeta.set(Response.CONTENT_TYPE,contentType + "; " + CHARSET_UTF8);

  }

 else {

    contentMeta.set(Response.CONTENT_TYPE,TEXT_PLAIN_CONTENT_TYPE);

  }

}

Location: FeedParser.java

Content: 

private void addToMap(ParseResult parseResult,SyndFeed feed,String feedLink,SyndEntry entry,Content content){

  String link=entry.getLink(), text=null, title=null;

  Metadata parseMeta=new Metadata(), contentMeta=content.getMetadata();

  Parse parse=null;

  SyndContent description=entry.getDescription();

  try {

    link=normalizers.normalize(link,URLNormalizers.SCOPE_OUTLINK);

    if (link != null)     link=filters.filter(link);

  }

 catch (  Exception e) {

    e.printStackTrace();

    return;

  }

  if (link == null)   return;

  title=stripTags(entry.getTitleEx());

  if (feedLink != null)   parseMeta.set("feed",feedLink);

  addFields(parseMeta,contentMeta,feed,entry);

  String contentType=contentMeta.get(Response.CONTENT_TYPE);

  if (description != null)   text=description.getValue();

  if (text == null) {

    List<?> contents=entry.getContents();

    StringBuilder buf=new StringBuilder();

    for (    Object syndContent : contents) {

      buf.append(((SyndContent)syndContent).getValue());

    }

    text=buf.toString();

  }

  try {

    Parser parser=parserFactory.getParsers(contentType,link)[0];

    parse=parser.getParse(new Content(link,link,text.getBytes(),contentType,contentMeta,conf)).get(link);

  }

 catch (  ParserNotFound e) {

  }

  if (parse != null) {

    ParseData data=parse.getData();

    data.getContentMeta().remove(Response.CONTENT_TYPE);

    mergeMetadata(data.getParseMeta(),parseMeta);

    parseResult.put(link,new ParseText(parse.getText()),new ParseData(ParseStatus.STATUS_SUCCESS,title,data.getOutlinks(),data.getContentMeta(),data.getParseMeta()));

  }

 else {

    contentMeta.remove(Response.CONTENT_TYPE);

    parseResult.put(link,new ParseText(text),new ParseData(ParseStatus.STATUS_FAILURE,title,new Outlink[0],contentMeta,parseMeta));

  }

}

Location: FeedParser.java

Content: 

private boolean checkString(String s){

  return s != null && !s.equals("");

}

Location: FeedParser.java

Content: 

/** 

 * Parses the given feed and extracts out and parsers all linked items within the feed, using the underlying ROME feed parsing library.

 * @param content A  {@link Content} object representing the feed that is beingparsed by this  {@link Parser}.

 * @return A {@link ParseResult} containing all {@link Parse}d feeds that were present in the feed file that this  {@link Parser} dealt with.

 */

@Override public ParseResult getParse(Content content){

  SyndFeed feed=null;

  ParseResult parseResult=new ParseResult(content.getUrl());

  EncodingDetector detector=new EncodingDetector(conf);

  detector.autoDetectClues(content,true);

  String encoding=detector.guessEncoding(content,defaultEncoding);

  try {

    InputSource input=new InputSource(new ByteArrayInputStream(content.getContent()));

    input.setEncoding(encoding);

    SyndFeedInput feedInput=new SyndFeedInput();

    feed=feedInput.build(input);

  }

 catch (  Exception e) {

    LOG.warn("Parse failed: url: " + content.getUrl() + ", exception: "+ StringUtils.stringifyException(e));

    return new ParseStatus(e).getEmptyParseResult(content.getUrl(),getConf());

  }

  String feedLink=feed.getLink();

  try {

    feedLink=normalizers.normalize(feedLink,URLNormalizers.SCOPE_OUTLINK);

    if (feedLink != null)     feedLink=filters.filter(feedLink);

  }

 catch (  Exception e) {

    feedLink=null;

  }

  List<?> entries=feed.getEntries();

  for (  Object entry : entries) {

    addToMap(parseResult,feed,feedLink,(SyndEntry)entry,content);

  }

  String feedDesc=stripTags(feed.getDescriptionEx());

  String feedTitle=stripTags(feed.getTitleEx());

  parseResult.put(content.getUrl(),new ParseText(feedDesc),new ParseData(new ParseStatus(ParseStatus.SUCCESS),feedTitle,new Outlink[0],content.getMetadata()));

  return parseResult;

}

Location: FeedParser.java

Content: 

private void mergeMetadata(Metadata first,Metadata second){

  for (  String name : second.names()) {

    String[] values=second.getValues(name);

    for (    String value : values) {

      first.add(name,value);

    }

  }

}

Location: FeedParser.java

Content: 

private static String stripTags(SyndContent c){

  if (c == null)   return "";

  String value=c.getValue();

  String[] parts=value.split("<[^>]*>");

  StringBuffer buf=new StringBuffer();

  for (  String part : parts)   buf.append(part);

  return buf.toString().trim();

}

