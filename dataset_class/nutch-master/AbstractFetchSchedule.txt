Location: AbstractFetchSchedule.java

Content: 

public AbstractFetchSchedule(){

  super(null);

}

Location: AbstractFetchSchedule.java

Content: 

public AbstractFetchSchedule(Configuration conf){

  super(conf);

}

Location: AbstractFetchSchedule.java

Content: 

/** 

 * This method return the last fetch time of the CrawlDatum

 * @return the date as a long.

 */

public long calculateLastFetchTime(CrawlDatum datum){

  if (datum.getStatus() == CrawlDatum.STATUS_DB_UNFETCHED) {

    return 0L;

  }

 else {

    return datum.getFetchTime() - (long)datum.getFetchInterval() * 1000;

  }

}

Location: AbstractFetchSchedule.java

Content: 

/** 

 * This method resets fetchTime, fetchInterval, modifiedTime, retriesSinceFetch and page signature, so that it forces refetching.

 * @param url URL of the page.

 * @param datum datum instance.

 * @param asap if true, force refetch as soon as possible - this sets the fetchTime to now. If false, force refetch whenever the next fetch time is set.

 */

public CrawlDatum forceRefetch(Text url,CrawlDatum datum,boolean asap){

  if (datum.getFetchInterval() > maxInterval)   datum.setFetchInterval(maxInterval * 0.9f);

  datum.setStatus(CrawlDatum.STATUS_DB_UNFETCHED);

  datum.setRetriesSinceFetch(0);

  datum.setSignature(null);

  datum.setModifiedTime(0L);

  if (asap)   datum.setFetchTime(System.currentTimeMillis());

  return datum;

}

Location: AbstractFetchSchedule.java

Content: 

/** 

 * Initialize fetch schedule related data. Implementations should at least set the <code>fetchTime</code> and <code>fetchInterval</code>. The default implementation sets the <code>fetchTime</code> to now, using the default <code>fetchInterval</code>.

 * @param url URL of the page.

 * @param datum datum instance to be initialized (modified in place).

 */

public CrawlDatum initializeSchedule(Text url,CrawlDatum datum){

  datum.setFetchTime(System.currentTimeMillis());

  datum.setFetchInterval(defaultInterval);

  datum.setRetriesSinceFetch(0);

  return datum;

}

Location: AbstractFetchSchedule.java

Content: 

/** 

 * This method specifies how to schedule refetching of pages marked as GONE. Default implementation increases fetchInterval by 50% but the value may never exceed <code>maxInterval</code>.

 * @param url URL of the page.

 * @param datum datum instance to be adjusted.

 * @return adjusted page information, including all original information.NOTE: this may be a different instance than @see CrawlDatum, but implementations should make sure that it contains at least all information from @see CrawlDatum.

 */

public CrawlDatum setPageGoneSchedule(Text url,CrawlDatum datum,long prevFetchTime,long prevModifiedTime,long fetchTime){

  if ((datum.getFetchInterval() * 1.5f) < maxInterval)   datum.setFetchInterval(datum.getFetchInterval() * 1.5f);

 else   datum.setFetchInterval(maxInterval * 0.9f);

  datum.setFetchTime(fetchTime + (long)datum.getFetchInterval() * 1000);

  return datum;

}

Location: AbstractFetchSchedule.java

Content: 

/** 

 * This method adjusts the fetch schedule if fetching needs to be re-tried due to transient errors. The default implementation sets the next fetch time 1 day in the future and increases the retry counter.

 * @param url URL of the page.

 * @param datum page information.

 * @param prevFetchTime previous fetch time.

 * @param prevModifiedTime previous modified time.

 * @param fetchTime current fetch time.

 * @return adjusted page information, including all original information.NOTE: this may be a different instance than @see CrawlDatum, but implementations should make sure that it contains at least all information from @see CrawlDatum.

 */

public CrawlDatum setPageRetrySchedule(Text url,CrawlDatum datum,long prevFetchTime,long prevModifiedTime,long fetchTime){

  datum.setFetchTime(fetchTime + (long)SECONDS_PER_DAY * 1000);

  datum.setRetriesSinceFetch(datum.getRetriesSinceFetch() + 1);

  return datum;

}

Location: AbstractFetchSchedule.java

Content: 

/** 

 * This method provides information whether the page is suitable for selection in the current fetchlist. NOTE: a true return value does not guarantee that the page will be fetched, it just allows it to be included in the further selection process based on scores. The default implementation checks <code>fetchTime</code>, if it is higher than the <code>curTime</code> it returns false, and true otherwise. It will also check that fetchTime is not too remote (more than <code>maxInterval</code>, in which case it lowers the interval and returns true.

 * @param url URL of the page.

 * @param datum datum instance.

 * @param curTime reference time (usually set to the time when the fetchlist generation process was started).

 * @return true, if the page should be considered for inclusion in the currentfetchlist, otherwise false.

 */

public boolean shouldFetch(Text url,CrawlDatum datum,long curTime){

  if (datum.getFetchTime() - curTime > (long)maxInterval * 1000) {

    if (datum.getFetchInterval() > maxInterval) {

      datum.setFetchInterval(maxInterval * 0.9f);

    }

    datum.setFetchTime(curTime);

  }

  if (datum.getFetchTime() > curTime) {

    return false;

  }

  return true;

}

