Location: SequenceReader.java

Content: 

@Override public int count(String path) throws FileNotFoundException {

  Path file=new Path(path);

  SequenceFile.Reader reader;

  int i=0;

  try {

    reader=new SequenceFile.Reader(conf,Reader.file(file));

    Writable key=(Writable)ReflectionUtils.newInstance(reader.getKeyClass(),conf);

    Writable value=(Writable)ReflectionUtils.newInstance(reader.getValueClass(),conf);

    while (reader.next(key,value)) {

      i++;

    }

    reader.close();

  }

 catch (  FileNotFoundException fne) {

    throw new FileNotFoundException();

  }

catch (  IOException e) {

    LOG.error("Error occurred while reading file {} : {}",file,StringUtils.stringifyException(e));

    throw new WebApplicationException();

  }

  return i;

}

Location: SequenceReader.java

Content: 

@Override public List<List<String>> head(String path,int nrows) throws FileNotFoundException {

  List<List<String>> rows=new ArrayList<>();

  Path file=new Path(path);

  SequenceFile.Reader reader;

  try {

    reader=new SequenceFile.Reader(conf,Reader.file(file));

    Writable key=(Writable)ReflectionUtils.newInstance(reader.getKeyClass(),conf);

    Writable value=(Writable)ReflectionUtils.newInstance(reader.getValueClass(),conf);

    int i=0;

    while (reader.next(key,value) && i < nrows) {

      List<String> row=new ArrayList<>();

      row.add(key.toString());

      row.add(value.toString());

      rows.add(row);

      i++;

    }

    reader.close();

  }

 catch (  FileNotFoundException fne) {

    throw new FileNotFoundException();

  }

catch (  IOException e) {

    LOG.error("Error occurred while reading file {} : {}",file,StringUtils.stringifyException(e));

    throw new WebApplicationException();

  }

  return rows;

}

Location: SequenceReader.java

Content: 

@Override public List<List<String>> read(String path) throws FileNotFoundException {

  List<List<String>> rows=new ArrayList<>();

  Path file=new Path(path);

  SequenceFile.Reader reader;

  try {

    reader=new SequenceFile.Reader(conf,Reader.file(file));

    Writable key=(Writable)ReflectionUtils.newInstance(reader.getKeyClass(),conf);

    Writable value=(Writable)ReflectionUtils.newInstance(reader.getValueClass(),conf);

    while (reader.next(key,value)) {

      List<String> row=new ArrayList<>();

      row.add(key.toString());

      row.add(value.toString());

      rows.add(row);

    }

    reader.close();

  }

 catch (  FileNotFoundException fne) {

    throw new FileNotFoundException();

  }

catch (  IOException e) {

    e.printStackTrace();

    LOG.error("Error occurred while reading file {} : {}",file,StringUtils.stringifyException(e));

    throw new WebApplicationException();

  }

  return rows;

}

Location: SequenceReader.java

Content: 

@Override public List<List<String>> slice(String path,int start,int end) throws FileNotFoundException {

  List<List<String>> rows=new ArrayList<>();

  Path file=new Path(path);

  SequenceFile.Reader reader;

  try {

    reader=new SequenceFile.Reader(conf,Reader.file(file));

    Writable key=(Writable)ReflectionUtils.newInstance(reader.getKeyClass(),conf);

    Writable value=(Writable)ReflectionUtils.newInstance(reader.getValueClass(),conf);

    int i=0;

    for (; i < start && reader.next(key,value); i++) {

    }

    while (reader.next(key,value) && i < end) {

      List<String> row=new ArrayList<>();

      row.add(key.toString());

      row.add(value.toString());

      rows.add(row);

      i++;

    }

    reader.close();

  }

 catch (  FileNotFoundException fne) {

    throw new FileNotFoundException();

  }

catch (  IOException e) {

    LOG.error("Error occurred while reading file {} : {}",file,StringUtils.stringifyException(e));

    throw new WebApplicationException();

  }

  return rows;

}

