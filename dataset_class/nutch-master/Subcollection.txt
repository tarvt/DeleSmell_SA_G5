Location: Subcollection.java

Content: 

/** 

 * Simple "indexOf" currentFilter for matching patterns. <pre> rules for evaluation are as follows: 1. if pattern matches in blacklist then url is rejected 2. if pattern matches in whitelist then url is allowed 3. url is rejected </pre>

 * @see org.apache.nutch.net.URLFilter#filter(java.lang.String)

 */

@Override public String filter(String urlString){

  Iterator<String> i=blackList.iterator();

  while (i.hasNext()) {

    String row=(String)i.next();

    if (urlString.contains(row))     return null;

  }

  i=whiteList.iterator();

  while (i.hasNext()) {

    String row=(String)i.next();

    if (urlString.contains(row))     return urlString;

  }

  return null;

}

Location: Subcollection.java

Content: 

/** 

 * Returns blacklist String

 * @return Blacklist String

 */

public String getBlackListString(){

  return blString;

}

Location: Subcollection.java

Content: 

/** 

 * @return Returns the id

 */

public String getId(){

  return id;

}

Location: Subcollection.java

Content: 

/** 

 * @return Returns the key

 */

public String getKey(){

  return key;

}

Location: Subcollection.java

Content: 

/** 

 * @return Returns the name

 */

public String getName(){

  return name;

}

Location: Subcollection.java

Content: 

/** 

 * Returns whitelist

 * @return Whitelist entries

 */

public List<String> getWhiteList(){

  return whiteList;

}

Location: Subcollection.java

Content: 

/** 

 * Returns whitelist String

 * @return Whitelist String

 */

public String getWhiteListString(){

  return wlString;

}

Location: Subcollection.java

Content: 

/** 

 * Initialize Subcollection from dom element

 * @param collection A DOM {@link org.w3c.dom.Element} for use in creating the  {@link Subcollection}

 */

public void initialize(Element collection){

  this.id=DOMUtil.getChildText(collection.getElementsByTagName(TAG_ID).item(0)).trim();

  this.name=DOMUtil.getChildText(collection.getElementsByTagName(TAG_NAME).item(0)).trim();

  this.wlString=DOMUtil.getChildText(collection.getElementsByTagName(TAG_WHITELIST).item(0)).trim();

  parseList(this.whiteList,wlString);

  NodeList nodeList=collection.getElementsByTagName(TAG_BLACKLIST);

  if (nodeList.getLength() > 0) {

    this.blString=DOMUtil.getChildText(nodeList.item(0)).trim();

    parseList(this.blackList,blString);

  }

  nodeList=collection.getElementsByTagName(TAG_KEY);

  if (nodeList.getLength() == 1) {

    this.key=DOMUtil.getChildText(nodeList.item(0)).trim();

  }

}

Location: Subcollection.java

Content: 

/** 

 * Create a list of patterns from a chunk of text, patterns are separated  with a newline

 * @param list An initialized {@link List} to insert String patterns.

 * @param text A chunkl fo text (hopefully) containing patterns.

 */

protected void parseList(List<String> list,String text){

  list.clear();

  StringTokenizer st=new StringTokenizer(text,"\n\r");

  while (st.hasMoreElements()) {

    String line=(String)st.nextElement();

    line=line.trim();

    if (line.isEmpty())     continue;

    if (caseInsensitive) {

      line=line.toLowerCase(Locale.ROOT);

    }

    list.add(line);

  }

}

Location: Subcollection.java

Content: 

/** 

 * Set contents of blacklist from String

 * @param list the blacklist contents

 */

public void setBlackList(String list){

  this.blString=list;

  parseList(blackList,list);

}

Location: Subcollection.java

Content: 

/** 

 * @param whiteList The whiteList to set.

 */

public void setWhiteList(ArrayList<String> whiteList){

  this.whiteList=whiteList;

}

Location: Subcollection.java

Content: 

/** 

 * Set contents of whitelist from String

 * @param list the whitelist contents

 */

public void setWhiteList(String list){

  this.wlString=list;

  parseList(whiteList,list);

}

Location: Subcollection.java

Content: 

public Subcollection(Configuration conf){

  super(conf);

  caseInsensitive=conf.getBoolean("subcollection.case.insensitive",false);

}

Location: Subcollection.java

Content: 

/** 

 * public Constructor

 * @param id Id of SubCollection

 * @param name Name of SubCollection

 * @param conf A populated {@link Configuration}

 */

public Subcollection(String id,String name,Configuration conf){

  this(id,name,null,conf);

}

Location: Subcollection.java

Content: 

/** 

 * public Constructor

 * @param id Id of SubCollection

 * @param name Name of SubCollection

 * @param key SubCollection key

 * @param conf A populated {@link Configuration}

 */

public Subcollection(String id,String name,String key,Configuration conf){

  this(conf);

  this.id=id;

  this.key=key;

  this.name=name;

  caseInsensitive=conf.getBoolean("subcollection.case.insensitive",false);

}

