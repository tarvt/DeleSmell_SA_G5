Location: NodeWalker.java

Content: 

/** 

 * Return the current node.

 * @return Node

 */

public Node getCurrentNode(){

  return currentNode;

}

Location: NodeWalker.java

Content: 

/** 

 * @return returns true if there are more nodes on the current stack.

 */

public boolean hasNext(){

  return (nodes.size() > 0);

}

Location: NodeWalker.java

Content: 

/** 

 * <p> Returns the next <code>Node</code> on the stack and pushes all of its children onto the stack, allowing us to walk the node tree without the use of recursion. If there are no more nodes on the stack then null is returned. </p>

 * @return Node The next <code>Node</code> on the stack or null if there isn'ta next node.

 */

public Node nextNode(){

  if (!hasNext()) {

    return null;

  }

  currentNode=nodes.pop();

  currentChildren=currentNode.getChildNodes();

  int childLen=(currentChildren != null) ? currentChildren.getLength() : 0;

  for (int i=childLen - 1; i >= 0; i--) {

    nodes.add(currentChildren.item(i));

  }

  return currentNode;

}

Location: NodeWalker.java

Content: 

/** 

 * Starts the  {@link org.w3c.dom.Node} tree from the root node.

 * @param rootNode A root node which will contain all nodes

 */

public NodeWalker(Node rootNode){

  nodes=new Stack<>();

  nodes.add(rootNode);

}

Location: NodeWalker.java

Content: 

/** 

 * <p> Skips over and removes from the node stack the children of the last node. When getting a next node from the walker, that node's children are automatically added to the stack. You can call this method to remove those children from the stack. </p> <p> This is useful when you don't want to process deeper into the current path of the node tree but you want to continue processing sibling nodes. </p>

 */

public void skipChildren(){

  int childLen=(currentChildren != null) ? currentChildren.getLength() : 0;

  for (int i=0; i < childLen; i++) {

    Node child=nodes.peek();

    if (child.equals(currentChildren.item(i))) {

      nodes.pop();

    }

  }

}

