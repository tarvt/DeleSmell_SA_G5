Location: ParseUtil.java

Content: 

/** 

 * Method parses a  {@link Content} object using the {@link Parser} specifiedby the parameter <code>extId</code>, i.e., the Parser's extension ID. If a suitable  {@link Parser} is not found, then a <code>WARNING</code> levelmessage is logged, and a ParseException is thrown. If the parse is uncessful for any other reason, then a <code>WARNING</code> level message is logged, and a <code>ParseStatus.getEmptyParse()</code> is returned.

 * @param extId The extension implementation ID of the  {@link Parser} to use toparse the specified content.

 * @param content The content to parse.

 * @return &lt;key, {@link Parse}&gt; pairs if the parse is successful, otherwise, a single &lt;key, <code>ParseStatus.getEmptyParse()</code>&gt; pair.

 * @throws ParseException If there is no suitable  {@link Parser} found to perform theparse.

 */

public ParseResult parseByExtensionId(String extId,Content content) throws ParseException {

  Parser p=null;

  try {

    p=this.parserFactory.getParserById(extId);

  }

 catch (  ParserNotFound e) {

    if (LOG.isWarnEnabled()) {

      LOG.warn("No suitable parser found when trying to parse content " + content.getUrl() + " of type "+ content.getContentType());

    }

    throw new ParseException(e.getMessage());

  }

  ParseResult parseResult=null;

  if (maxParseTime != -1) {

    parseResult=runParser(p,content);

  }

 else {

    try {

      parseResult=p.getParse(content);

    }

 catch (    Throwable e) {

      LOG.warn("Error parsing " + content.getUrl() + " with "+ p.getClass().getName(),e);

    }

  }

  if (parseResult != null && !parseResult.isEmpty()) {

    return parseResult;

  }

 else {

    if (LOG.isWarnEnabled()) {

      LOG.warn("Unable to successfully parse content " + content.getUrl() + " of type "+ content.getContentType());

    }

    return new ParseStatus(new ParseException("Unable to successfully parse content")).getEmptyParseResult(content.getUrl(),null);

  }

}

Location: ParseUtil.java

Content: 

/** 

 * Overloaded constructor

 * @param conf a populated {@link org.apache.hadoop.conf.Configuration}

 */

public ParseUtil(Configuration conf){

  this.parserFactory=new ParserFactory(conf);

  maxParseTime=conf.getInt("parser.timeout",30);

  executorService=Executors.newCachedThreadPool(new ThreadFactoryBuilder().setNameFormat("parse-%d").setDaemon(true).build());

}

Location: ParseUtil.java

Content: 

/** 

 * Performs a parse by iterating through a List of preferred  {@link Parser}s until a successful parse is performed and a  {@link Parse} object isreturned. If the parse is unsuccessful, a message is logged to the <code>WARNING</code> level, and an empty parse is returned.

 * @param content The content to try and parse.

 * @return &lt;key, {@link Parse}&gt; pairs.

 * @throws ParseException If no suitable parser is found to perform the parse.

 */

public ParseResult parse(Content content) throws ParseException {

  Parser[] parsers=null;

  try {

    parsers=this.parserFactory.getParsers(content.getContentType(),content.getUrl() != null ? content.getUrl() : "");

  }

 catch (  ParserNotFound e) {

    if (LOG.isWarnEnabled()) {

      LOG.warn("No suitable parser found when trying to parse content " + content.getUrl() + " of type "+ content.getContentType());

    }

    throw new ParseException(e.getMessage());

  }

  ParseResult parseResult=null;

  for (int i=0; i < parsers.length; i++) {

    if (LOG.isDebugEnabled()) {

      LOG.debug("Parsing [" + content.getUrl() + "] with ["+ parsers[i]+ "]");

    }

    if (maxParseTime != -1) {

      parseResult=runParser(parsers[i],content);

    }

 else {

      try {

        parseResult=parsers[i].getParse(content);

      }

 catch (      Throwable e) {

        LOG.warn("Error parsing " + content.getUrl() + " with "+ parsers[i].getClass().getName(),e);

      }

    }

    if (parseResult != null && parseResult.isAnySuccess()) {

      return parseResult;

    }

  }

  if (parseResult != null && !parseResult.isEmpty()) {

    return parseResult;

  }

  if (LOG.isWarnEnabled()) {

    LOG.warn("Unable to successfully parse content " + content.getUrl() + " of type "+ content.getContentType());

  }

  return new ParseStatus(new ParseException("Unable to successfully parse content")).getEmptyParseResult(content.getUrl(),null);

}

Location: ParseUtil.java

Content: 

private ParseResult runParser(Parser p,Content content){

  ParseCallable pc=new ParseCallable(p,content);

  Future<ParseResult> task=executorService.submit(pc);

  ParseResult res=null;

  try {

    res=task.get(maxParseTime,TimeUnit.SECONDS);

  }

 catch (  Exception e) {

    LOG.warn("Error parsing " + content.getUrl() + " with "+ p.getClass().getName(),e);

    task.cancel(true);

  }

 finally {

    pc=null;

  }

  return res;

}

