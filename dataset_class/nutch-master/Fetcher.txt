Location: Fetcher.java

Content: 

private void checkConfiguration(){

  String agentName=getConf().get("http.agent.name");

  if (agentName == null || agentName.trim().length() == 0) {

    String message="Fetcher: No agents listed in 'http.agent.name'" + " property.";

    if (LOG.isErrorEnabled()) {

      LOG.error(message);

    }

    throw new IllegalArgumentException(message);

  }

}

Location: Fetcher.java

Content: 

public Fetcher(){

  super(null);

}

Location: Fetcher.java

Content: 

public Fetcher(Configuration conf){

  super(conf);

}

Location: Fetcher.java

Content: 

public void fetch(Path segment,int threads) throws IOException, InterruptedException, ClassNotFoundException {

  checkConfiguration();

  long start=System.currentTimeMillis();

  if (LOG.isInfoEnabled()) {

    LOG.info("Fetcher: starting at {}",TimingUtil.logDateMillis(start));

    LOG.info("Fetcher: segment: {}",segment);

  }

  long timelimit=getConf().getLong("fetcher.timelimit.mins",-1);

  if (timelimit != -1) {

    timelimit=System.currentTimeMillis() + (timelimit * 60 * 1000);

    LOG.info("Fetcher Timelimit set for : {}  ({})",timelimit,TimingUtil.logDateMillis(timelimit));

    getConf().setLong("fetcher.timelimit",timelimit);

  }

  timelimit=getConf().getLong("fetcher.throughput.threshold.check.after",10);

  timelimit=System.currentTimeMillis() + (timelimit * 60 * 1000);

  getConf().setLong("fetcher.throughput.threshold.check.after",timelimit);

  int maxOutlinkDepth=getConf().getInt("fetcher.follow.outlinks.depth",-1);

  if (maxOutlinkDepth > 0) {

    LOG.info("Fetcher: following outlinks up to depth: {}",maxOutlinkDepth);

    int maxOutlinkDepthNumLinks=getConf().getInt("fetcher.follow.outlinks.num.links",4);

    int outlinksDepthDivisor=getConf().getInt("fetcher.follow.outlinks.depth.divisor",2);

    int totalOutlinksToFollow=0;

    for (int i=0; i < maxOutlinkDepth; i++) {

      totalOutlinksToFollow+=(int)Math.floor(outlinksDepthDivisor / (i + 1) * maxOutlinkDepthNumLinks);

    }

    LOG.info("Fetcher: maximum outlinks to follow: {}",totalOutlinksToFollow);

  }

  Job job=NutchJob.getInstance(getConf());

  job.setJobName("FetchData");

  Configuration conf=job.getConfiguration();

  conf.setInt("fetcher.threads.fetch",threads);

  conf.set(Nutch.SEGMENT_NAME_KEY,segment.getName());

  conf.set("mapreduce.map.speculative","false");

  FileInputFormat.addInputPath(job,new Path(segment,CrawlDatum.GENERATE_DIR_NAME));

  job.setInputFormatClass(InputFormat.class);

  job.setJarByClass(Fetcher.class);

  job.setMapperClass(Fetcher.FetcherRun.class);

  FileOutputFormat.setOutputPath(job,segment);

  job.setOutputFormatClass(FetcherOutputFormat.class);

  job.setOutputKeyClass(Text.class);

  job.setOutputValueClass(NutchWritable.class);

  try {

    boolean success=job.waitForCompletion(true);

    if (!success) {

      String message="Fetcher job did not succeed, job status:" + job.getStatus().getState() + ", reason: "+ job.getStatus().getFailureInfo();

      LOG.error(message);

      throw new RuntimeException(message);

    }

  }

 catch (  InterruptedException|ClassNotFoundException e) {

    LOG.error(StringUtils.stringifyException(e));

    throw e;

  }

  long end=System.currentTimeMillis();

  LOG.info("Fetcher: finished at {}, elapsed: {}",TimingUtil.logDateMillis(end),TimingUtil.elapsedTime(start,end));

}

Location: Fetcher.java

Content: 

public static boolean isParsing(Configuration conf){

  return conf.getBoolean("fetcher.parse",true);

}

Location: Fetcher.java

Content: 

public static boolean isStoringContent(Configuration conf){

  return conf.getBoolean("fetcher.store.content",true);

}

