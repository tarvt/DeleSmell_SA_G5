Location: UpdateHostDbMapper.java

Content: 

/** 

 * Filters and or normalizes the input hostname

 * @param url the input hostname

 * @return the processed hostname, or null if there was a fatal error

 */

protected String filterNormalize(String url){

  url="http://" + url + "/";

  try {

    if (normalize)     url=normalizers.normalize(url,URLNormalizers.SCOPE_DEFAULT);

    if (filter)     url=filters.filter(url);

    if (url == null)     return null;

  }

 catch (  Exception e) {

    return null;

  }

  return URLUtil.getHost(url);

}

Location: UpdateHostDbMapper.java

Content: 

/** 

 * Mapper ingesting records from the HostDB, CrawlDB and plaintext host scores file. Statistics and scores are passed on.

 * @param key record {@link org.apache.hadoop.io.Text} key

 * @param value associated {@link org.apache.hadoop.io.Writable} object

 * @param context {@link org.apache.hadoop.mapreduce.Reducer.Context} forwriting custom counters and output.

 */

@Override public void map(Text key,Writable value,Context context) throws IOException, InterruptedException {

  String keyStr=key.toString();

  if (key instanceof Text && value instanceof CrawlDatum) {

    buffer=filterNormalize(URLUtil.getHost(keyStr));

    if (buffer == null) {

      context.getCounter("UpdateHostDb","filtered_records").increment(1);

      LOG.info("UpdateHostDb: " + URLUtil.getHost(keyStr) + " crawldatum has been filtered");

      return;

    }

    host.set(buffer);

    crawlDatum=(CrawlDatum)value;

    hostDatum=new HostDatum();

    if (crawlDatum.getStatus() != CrawlDatum.STATUS_DB_UNFETCHED) {

      String protocol=URLUtil.getProtocol(keyStr);

      String homepage=protocol + "://" + buffer+ "/";

      if (keyStr.equals(homepage)) {

        if (crawlDatum.getStatus() == CrawlDatum.STATUS_DB_REDIR_PERM || crawlDatum.getStatus() == CrawlDatum.STATUS_DB_REDIR_TEMP) {

          ProtocolStatus z=(ProtocolStatus)crawlDatum.getMetaData().get(Nutch.WRITABLE_PROTO_STATUS_KEY);

          args=z.getArgs();

          reprUrl=args[0];

          if (reprUrl != null) {

            LOG.info("UpdateHostDb: homepage: " + keyStr + " redirects to: "+ args[0]);

            context.write(host,new NutchWritable(hostDatum));

            hostDatum.setHomepageUrl(reprUrl);

          }

 else {

            LOG.info("UpdateHostDb: homepage: " + keyStr + " redirects to: "+ args[0]+ " but has been filtered out");

          }

        }

 else {

          hostDatum.setHomepageUrl(homepage);

          context.write(host,new NutchWritable(hostDatum));

          LOG.info("UpdateHostDb: homepage: " + homepage);

        }

      }

    }

    context.write(host,new NutchWritable(crawlDatum));

  }

  if (key instanceof Text && value instanceof HostDatum) {

    buffer=filterNormalize(keyStr);

    if (buffer == null) {

      context.getCounter("UpdateHostDb","filtered_records").increment(1);

      LOG.info("UpdateHostDb: {} hostdatum has been filtered",keyStr);

      return;

    }

    hostDatum=(HostDatum)value;

    key.set(buffer);

    if (readingCrawlDb) {

      hostDatum.resetStatistics();

    }

    context.write(key,new NutchWritable(hostDatum));

  }

  if (key instanceof Text && value instanceof Text) {

    buffer=filterNormalize(keyStr);

    if (buffer == null) {

      context.getCounter("UpdateHostDb","filtered_records").increment(1);

      LOG.info("UpdateHostDb: {} score has been filtered",keyStr);

      return;

    }

    key.set(buffer);

    context.write(key,new NutchWritable(new FloatWritable(Float.parseFloat(value.toString()))));

  }

}

Location: UpdateHostDbMapper.java

Content: 

@Override public void setup(Mapper<Text,Writable,Text,NutchWritable>.Context context){

  Configuration conf=context.getConfiguration();

  readingCrawlDb=conf.getBoolean("hostdb.reading.crawldb",false);

  filter=conf.getBoolean(UpdateHostDb.HOSTDB_URL_FILTERING,false);

  normalize=conf.getBoolean(UpdateHostDb.HOSTDB_URL_NORMALIZING,false);

  if (filter)   filters=new URLFilters(conf);

  if (normalize)   normalizers=new URLNormalizers(conf,URLNormalizers.SCOPE_DEFAULT);

}

