Location: DbResource.java

Content: 

@Produces(MediaType.APPLICATION_OCTET_STREAM) private Response crawlDbDump(Configuration conf,Map<String,String> args,String crawlId){

  @SuppressWarnings("resource") CrawlDbReader dbr=new CrawlDbReader();

  try {

    return Response.ok(dbr.query(args,conf,"dump",crawlId),MediaType.APPLICATION_OCTET_STREAM).build();

  }

 catch (  Exception e) {

    e.printStackTrace();

    return Response.serverError().entity(e.getMessage()).type(MediaType.TEXT_PLAIN).build();

  }

}

Location: DbResource.java

Content: 

@SuppressWarnings("resource") private Response crawlDbStats(Configuration conf,Map<String,String> args,String crawlId){

  CrawlDbReader dbr=new CrawlDbReader();

  try {

    return Response.ok(dbr.query(args,conf,"stats",crawlId)).build();

  }

 catch (  Exception e) {

    e.printStackTrace();

    return Response.serverError().entity(e.getMessage()).type(MediaType.TEXT_PLAIN).build();

  }

}

Location: DbResource.java

Content: 

@Produces(MediaType.APPLICATION_OCTET_STREAM) private Response crawlDbTopN(Configuration conf,Map<String,String> args,String crawlId){

  @SuppressWarnings("resource") CrawlDbReader dbr=new CrawlDbReader();

  try {

    return Response.ok(dbr.query(args,conf,"topN",crawlId),MediaType.APPLICATION_OCTET_STREAM).build();

  }

 catch (  Exception e) {

    e.printStackTrace();

    return Response.serverError().entity(e.getMessage()).type(MediaType.TEXT_PLAIN).build();

  }

}

Location: DbResource.java

Content: 

private Response crawlDbUrl(Configuration conf,Map<String,String> args,String crawlId){

  @SuppressWarnings("resource") CrawlDbReader dbr=new CrawlDbReader();

  try {

    return Response.ok(dbr.query(args,conf,"url",crawlId)).build();

  }

 catch (  Exception e) {

    e.printStackTrace();

    return Response.serverError().entity(e.getMessage()).type(MediaType.TEXT_PLAIN).build();

  }

}

Location: DbResource.java

Content: 

@GET @Path(value="/fetchdb") public List<FetchNodeDbInfo> fetchDb(@DefaultValue("0") @QueryParam("to") int to,@DefaultValue("0") @QueryParam("from") int from){

  List<FetchNodeDbInfo> listOfFetchedNodes=new ArrayList<>();

  Map<Integer,FetchNode> fetchNodedbMap=FetchNodeDb.getInstance().getFetchNodeDb();

  if (to == 0 || to > fetchNodedbMap.size()) {

    to=fetchNodedbMap.size();

  }

  for (int i=from; i <= to; i++) {

    if (!fetchNodedbMap.containsKey(i)) {

      continue;

    }

    FetchNode node=fetchNodedbMap.get(i);

    FetchNodeDbInfo fdbInfo=new FetchNodeDbInfo();

    fdbInfo.setUrl(node.getUrl().toString());

    fdbInfo.setStatus(node.getStatus());

    fdbInfo.setNumOfOutlinks(node.getOutlinks().length);

    fdbInfo.setChildNodes(node.getOutlinks());

    listOfFetchedNodes.add(fdbInfo);

  }

  return listOfFetchedNodes;

}

Location: DbResource.java

Content: 

@POST @Path(value="/crawldb") @Consumes(MediaType.APPLICATION_JSON) public Response readdb(DbQuery dbQuery){

  if (dbQuery == null)   return Response.status(Status.BAD_REQUEST).build();

  Configuration conf=configManager.get(dbQuery.getConfId());

  if (conf == null) {

    conf=configManager.get(ConfigResource.DEFAULT);

  }

  if (dbQuery.getCrawlId() == null || dbQuery.getType() == null) {

    return Response.status(Status.BAD_REQUEST).build();

  }

  String type=dbQuery.getType();

  if (type.equalsIgnoreCase("stats")) {

    return crawlDbStats(conf,dbQuery.getArgs(),dbQuery.getCrawlId());

  }

  if (type.equalsIgnoreCase("dump")) {

    return crawlDbDump(conf,dbQuery.getArgs(),dbQuery.getCrawlId());

  }

  if (type.equalsIgnoreCase("topN")) {

    return crawlDbTopN(conf,dbQuery.getArgs(),dbQuery.getCrawlId());

  }

  if (type.equalsIgnoreCase("url")) {

    return crawlDbUrl(conf,dbQuery.getArgs(),dbQuery.getCrawlId());

  }

  return null;

}

