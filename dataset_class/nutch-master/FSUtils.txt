Location: FSUtils.java

Content: 

/** 

 * Closes a group of MapFile readers.

 * @param readers The MapFile readers to close.

 * @throws IOException If an error occurs while closing a reader.

 */

public static void closeReaders(MapFile.Reader[] readers) throws IOException {

  if (readers != null) {

    for (int i=0; i < readers.length; i++) {

      MapFile.Reader reader=readers[i];

      if (reader != null) {

        reader.close();

      }

    }

  }

}

Location: FSUtils.java

Content: 

/** 

 * Closes a group of SequenceFile readers.

 * @param readers The SequenceFile readers to close.

 * @throws IOException If an error occurs while closing a reader.

 */

public static void closeReaders(SequenceFile.Reader[] readers) throws IOException {

  if (readers != null) {

    for (int i=0; i < readers.length; i++) {

      SequenceFile.Reader reader=readers[i];

      if (reader != null) {

        reader.close();

      }

    }

  }

}

Location: FSUtils.java

Content: 

/** 

 * Replaces the current path with the new path and if set removes the old path. If removeOld is set to false then the old path will be set to the name current.old.

 * @param fs The FileSystem.

 * @param current The end path, the one being replaced.

 * @param replacement The path to replace with.

 * @param removeOld True if we are removing the current path.

 * @throws IOException If an error occurs during replacement.

 */

public static void replace(FileSystem fs,Path current,Path replacement,boolean removeOld) throws IOException {

  Path old=new Path(current + ".old");

  if (fs.exists(current)) {

    fs.rename(current,old);

  }

  fs.rename(replacement,current);

  if (fs.exists(old) && removeOld) {

    fs.delete(old,true);

  }

}

