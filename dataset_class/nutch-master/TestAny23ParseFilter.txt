Location: TestAny23ParseFilter.java

Content: 

@Test public void extractMicroDataFromHTML() throws ParserNotFound, IOException, ParseException {

  String[] triplesArray=getTriples(file2);

  Assert.assertEquals("We expect 40 tab-separated triples extracted by the filter",EXPECTED_TRIPLES_2,triplesArray.length);

}

Location: TestAny23ParseFilter.java

Content: 

public String[] extract(String urlString,File file,String contentType){

  try {

    System.out.println(urlString);

    Protocol protocol=new ProtocolFactory(conf).getProtocol(urlString);

    Content content=protocol.getProtocolOutput(new Text(urlString),new CrawlDatum()).getContent();

    content.setContentType(contentType);

    Parse parse=new ParseUtil(conf).parse(content).get(content.getUrl());

    return parse.getData().getParseMeta().getValues(Any23ParseFilter.ANY23_TRIPLES);

  }

 catch (  Exception e) {

    e.printStackTrace();

    Assert.fail(e.toString());

  }

  return null;

}

Location: TestAny23ParseFilter.java

Content: 

private String[] getTriples(String fileName){

  return getTriples(fileName,"text/html");

}

Location: TestAny23ParseFilter.java

Content: 

private String[] getTriples(String fileName,String contentType){

  String urlString="file:" + sampleDir + fileSeparator+ fileName;

  File file=new File(sampleDir + fileSeparator + fileName);

  return extract(urlString,file,contentType);

}

Location: TestAny23ParseFilter.java

Content: 

@Test public void ignoreUnsupported() throws ParserNotFound, IOException, ParseException {

  String[] triplesArray=getTriples(file1,"application/pdf");

  Assert.assertEquals("We expect no triples extracted by the filter since content-type should be ignored",0,triplesArray.length);

}

Location: TestAny23ParseFilter.java

Content: 

@Test public void testExtractTriplesFromHTML() throws IOException, ParserNotFound, ParseException {

  String[] triplesArray=getTriples(file1);

  Assert.assertEquals("We expect 117 tab-separated triples extracted by the filter",EXPECTED_TRIPLES_1,triplesArray.length);

}

