Location: Extension.java

Content: 

/** 

 * Adds a attribute and is only used until model creation at plugin system start up.

 * @param pKey a key

 * @param pValue a value

 */

public void addAttribute(String pKey,String pValue){

  fAttributes.put(pKey,pValue);

}

Location: Extension.java

Content: 

/** 

 * @param pDescriptor a plugin descriptor

 * @param pExtensionPoint an extension point

 * @param pId an unique id of the plugin

 * @param pExtensionClass the class extending the extension point

 * @param conf a populated {@link org.apache.hadoop.conf.Configuration}

 * @param pluginRepository a {@link PluginRepository} containing all plugin artifacts

 */

public Extension(PluginDescriptor pDescriptor,String pExtensionPoint,String pId,String pExtensionClass,Configuration conf,PluginRepository pluginRepository){

  fAttributes=new HashMap<>();

  setDescriptor(pDescriptor);

  setExtensionPoint(pExtensionPoint);

  setId(pId);

  setClazz(pExtensionClass);

  this.conf=conf;

}

Location: Extension.java

Content: 

/** 

 * Returns a attribute value, that is setuped in the manifest file and is definied by the extension point xml schema.

 * @param pKey a key

 * @return String a value

 */

public String getAttribute(String pKey){

  return fAttributes.get(pKey);

}

Location: Extension.java

Content: 

/** 

 * Returns the full class name of the extension point implementation

 * @return String

 */

public String getClazz(){

  return fClazz;

}

Location: Extension.java

Content: 

/** 

 * Get the plugin descriptor.

 * @return PluginDescriptor

 */

public PluginDescriptor getDescriptor(){

  return fDescriptor;

}

Location: Extension.java

Content: 

/** 

 * Return an instance of the extension implementatio. Before we create a extension instance we startup the plugin if it is not already done. The plugin instance and the extension instance use the same <code>PluginClassLoader</code>. Each Plugin use its own classloader. The PluginClassLoader knows only own <i>Plugin runtime libraries </i> setuped in the plugin manifest file and exported libraries of the depenedend plugins.

 * @return Object An instance of the extension implementation

 * @throws PluginRuntimeException if there is a fatal runtime error

 */

public Object getExtensionInstance() throws PluginRuntimeException {

synchronized (getId()) {

    try {

      PluginRepository pluginRepository=PluginRepository.get(conf);

      Class<?> extensionClazz=pluginRepository.getCachedClass(fDescriptor,getClazz());

      pluginRepository.getPluginInstance(getDescriptor());

      Object object=null;

      try {

        object=extensionClazz.getConstructor().newInstance();

      }

 catch (      IllegalArgumentException|InvocationTargetException|NoSuchMethodException|SecurityException e) {

        e.printStackTrace();

      }

      if (object != null && object instanceof Configurable) {

        ((Configurable)object).setConf(this.conf);

      }

      return object;

    }

 catch (    ClassNotFoundException e) {

      throw new PluginRuntimeException(e);

    }

catch (    InstantiationException e) {

      throw new PluginRuntimeException(e);

    }

catch (    IllegalAccessException e) {

      throw new PluginRuntimeException(e);

    }

  }

}

Location: Extension.java

Content: 

/** 

 * Get target point

 * @return the Id of the extension point, that is implemented by thisextension.

 */

public String getTargetPoint(){

  return fTargetPoint;

}

Location: Extension.java

Content: 

/** 

 * Sets the Class that implement the concret extension and is only used until model creation at system start up.

 * @param extensionClazz The extensionClasname to set

 */

public void setClazz(String extensionClazz){

  fClazz=extensionClazz;

}

Location: Extension.java

Content: 

/** 

 * Sets the plugin descriptor and is only used until model creation at system start up.

 * @param pDescriptor a instantiated {@link org.apache.nutch.plugin.PluginDescriptor}

 */

public void setDescriptor(PluginDescriptor pDescriptor){

  fDescriptor=pDescriptor;

}

Location: Extension.java

Content: 

/** 

 * @param point

 */

private void setExtensionPoint(String point){

  fTargetPoint=point;

}

