Location: ParseResult.java

Content: 

/** 

 * Convenience method for obtaining  {@link ParseResult} from a single{@link Parse} output.

 * @param url canonical url.

 * @param parse single parse output.

 * @return result containing the single parse output.

 */

public static ParseResult createParseResult(String url,Parse parse){

  ParseResult parseResult=new ParseResult(url);

  parseResult.put(new Text(url),new ParseText(parse.getText()),parse.getData());

  return parseResult;

}

Location: ParseResult.java

Content: 

/** 

 * Remove all results where status is not successful (as determined by {@link ParseStatus#isSuccess()}). Note that effects of this operation cannot be reversed.

 */

public void filter(){

  for (Iterator<Entry<Text,Parse>> i=iterator(); i.hasNext(); ) {

    Entry<Text,Parse> entry=i.next();

    if (!entry.getValue().getData().getStatus().isSuccess()) {

      LOG.warn(entry.getKey() + " is not parsed successfully, filtering");

      i.remove();

    }

  }

}

Location: ParseResult.java

Content: 

/** 

 * Retrieve a single parse output.

 * @param key sub-url under which the parse output is stored.

 * @return parse output corresponding to this sub-url, or null.

 */

public Parse get(Text key){

  return parseMap.get(key);

}

Location: ParseResult.java

Content: 

/** 

 * A convenience method which returns true if at least one of the parses is successful. Parse success is determined by  {@link ParseStatus#isSuccess()}.

 * @return true if atleast one result is a success, false otherwise

 */

public boolean isAnySuccess(){

  for (Iterator<Entry<Text,Parse>> i=iterator(); i.hasNext(); ) {

    Entry<Text,Parse> entry=i.next();

    if (entry.getValue().getData().getStatus().isSuccess()) {

      return true;

    }

  }

  return false;

}

Location: ParseResult.java

Content: 

/** 

 * Checks whether the result is empty.

 * @return true if empty, false otherwise

 */

public boolean isEmpty(){

  return parseMap.isEmpty();

}

Location: ParseResult.java

Content: 

/** 

 * Iterate over all entries in the &lt;url, Parse&gt; map.

 */

public Iterator<Entry<Text,Parse>> iterator(){

  return parseMap.entrySet().iterator();

}

Location: ParseResult.java

Content: 

/** 

 * Create a container for parse results.

 * @param originalUrl the original url from which all parse results have been obtained.

 */

public ParseResult(String originalUrl){

  parseMap=new HashMap<>();

  this.originalUrl=originalUrl;

}

Location: ParseResult.java

Content: 

/** 

 * Store a result of parsing.

 * @param key URL or sub-url of this parse result

 * @param text plain text result

 * @param data corresponding parse metadata of this result

 */

public void put(String key,ParseText text,ParseData data){

  parseMap.put(new Text(key),new ParseImpl(text,data,key.equals(originalUrl)));

}

Location: ParseResult.java

Content: 

/** 

 * Store a result of parsing.

 * @param key URL or sub-url of this parse result

 * @param text plain text result

 * @param data corresponding parse metadata of this result

 */

public void put(Text key,ParseText text,ParseData data){

  put(key.toString(),text,data);

}

Location: ParseResult.java

Content: 

/** 

 * Return the number of parse outputs (both successful and failed)

 * @return an int representing the parse map size

 */

public int size(){

  return parseMap.size();

}

