Location: TestAdaptiveFetchSchedule.java

Content: 

/** 

 * Prepare a CrawlDatum (STATUS_DB_UNFETCHED) to Test AdaptiveFetchSchedule.

 * @return properly initialized CrawlDatum

 */

public CrawlDatum prepareCrawlDatum(){

  CrawlDatum p=new CrawlDatum();

  p.setStatus(CrawlDatum.STATUS_DB_UNFETCHED);

  p.setFetchInterval(interval);

  p.setScore(1.0f);

  p.setFetchTime(0);

  return p;

}

Location: TestAdaptiveFetchSchedule.java

Content: 

/** 

 * Test the core functionality of AdaptiveFetchSchedule.

 */

@Test public void testAdaptiveFetchSchedule(){

  FetchSchedule fs=new AdaptiveFetchSchedule();

  fs.setConf(conf);

  CrawlDatum p=prepareCrawlDatum();

  Text url=new Text("http://www.example.com");

  changed=FetchSchedule.STATUS_UNKNOWN;

  fs.setFetchSchedule(url,p,p.getFetchTime(),p.getModifiedTime(),curTime,lastModified,changed);

  validateFetchInterval(changed,p.getFetchInterval());

  changed=FetchSchedule.STATUS_MODIFIED;

  fs.setFetchSchedule(url,p,p.getFetchTime(),p.getModifiedTime(),curTime,lastModified,changed);

  validateFetchInterval(changed,p.getFetchInterval());

  p.setFetchInterval(interval);

  changed=FetchSchedule.STATUS_NOTMODIFIED;

  fs.setFetchSchedule(url,p,p.getFetchTime(),p.getModifiedTime(),curTime,lastModified,changed);

  validateFetchInterval(changed,p.getFetchInterval());

}

Location: TestAdaptiveFetchSchedule.java

Content: 

/** 

 * The Method validates interval values according to changed parameter.

 * @param changed status value to check calculated interval value.

 * @param getInterval to test IntervalValue from CrawlDatum which is calculated via AdaptiveFetchSchedule algorithm.

 */

private void validateFetchInterval(int changed,int getInterval){

  if (changed == FetchSchedule.STATUS_UNKNOWN) {

    assertEquals(getInterval,interval);

  }

 else   if (changed == FetchSchedule.STATUS_MODIFIED) {

    calculateInterval=(int)(interval - (interval * dec_rate));

    assertEquals(getInterval,calculateInterval);

  }

 else   if (changed == FetchSchedule.STATUS_NOTMODIFIED) {

    calculateInterval=(int)(interval + (interval * inc_rate));

    assertEquals(getInterval,calculateInterval);

  }

}

