Location: IndexWriters.java

Content: 

public void commit() throws IOException {

  for (  Map.Entry<String,IndexWriterWrapper> entry : this.indexWriters.entrySet()) {

    entry.getValue().getIndexWriter().commit();

  }

}

Location: IndexWriters.java

Content: 

/** 

 * Lists the active IndexWriters and their configuration.

 * @return The full description.

 */

public String describe(){

  StringBuilder builder=new StringBuilder();

  if (this.indexWriters.size() == 0)   builder.append("No IndexWriters activated - check your configuration\n");

 else   builder.append("Active IndexWriters :\n");

  for (  IndexWriterWrapper indexWriterWrapper : this.indexWriters.values()) {

    builder.append(indexWriterWrapper.getIndexWriter().getClass().getSimpleName()).append(":\n");

    AsciiTable at=new AsciiTable();

    at.getRenderer().setCWC((rows,colNumbers,tableWidth) -> {

      int maxLengthFirstColumn=0;

      int maxLengthThirdColumn=0;

      for (      AT_Row row : rows) {

        if (row.getType() == TableRowType.CONTENT) {

          maxLengthFirstColumn=Math.max(row.getCells().get(0).toString().length(),maxLengthFirstColumn);

          maxLengthThirdColumn=Math.max(row.getCells().get(2).toString().length(),maxLengthThirdColumn);

        }

      }

      maxLengthFirstColumn=Math.min((tableWidth / 3),maxLengthFirstColumn);

      maxLengthThirdColumn=Math.min(((tableWidth - maxLengthFirstColumn) / 2),maxLengthThirdColumn);

      int widthSecondColumn=tableWidth - maxLengthFirstColumn - maxLengthThirdColumn;

      return new int[]{maxLengthFirstColumn,widthSecondColumn,maxLengthThirdColumn};

    }

);

    Map<String,Map.Entry<String,Object>> properties=indexWriterWrapper.getIndexWriter().describe();

    properties.forEach((key,value) -> {

      at.addRule();

      at.addRow(key,value.getKey(),value.getValue() != null ? value.getValue() : "");

    }

);

    at.addRule();

    builder.append(at.render(120)).append("\n\n");

  }

  return builder.toString();

}

Location: IndexWriters.java

Content: 

/** 

 * Ensures if there are not available exchanges, the document will be routed to all configured index writers.

 * @param doc Document to process.

 * @return Index writers IDs.

 */

private Collection<String> getIndexWriters(NutchDocument doc){

  if (this.exchanges.areAvailableExchanges()) {

    return Arrays.asList(this.exchanges.indexWriters(doc));

  }

  return this.indexWriters.keySet();

}

Location: IndexWriters.java

Content: 

private IndexWriters(Configuration conf){

  if (this.indexWriters == null) {

    try {

      ExtensionPoint point=PluginRepository.get(conf).getExtensionPoint(IndexWriter.X_POINT_ID);

      if (point == null) {

        throw new RuntimeException(IndexWriter.X_POINT_ID + " not found.");

      }

      Extension[] extensions=point.getExtensions();

      HashMap<String,Extension> extensionMap=new HashMap<>();

      for (      Extension extension : extensions) {

        LOG.info("Index writer {} identified.",extension.getClazz());

        extensionMap.putIfAbsent(extension.getClazz(),extension);

      }

      IndexWriterConfig[] indexWriterConfigs=loadWritersConfiguration(conf);

      this.indexWriters=new HashMap<>();

      for (      IndexWriterConfig indexWriterConfig : indexWriterConfigs) {

        final String clazz=indexWriterConfig.getClazz();

        if (extensionMap.containsKey(clazz)) {

          IndexWriterWrapper writerWrapper=new IndexWriterWrapper();

          writerWrapper.setIndexWriterConfig(indexWriterConfig);

          writerWrapper.setIndexWriter((IndexWriter)extensionMap.get(clazz).getExtensionInstance());

          indexWriters.put(indexWriterConfig.getId(),writerWrapper);

        }

      }

      this.exchanges=new Exchanges(conf);

      this.exchanges.open();

    }

 catch (    PluginRuntimeException e) {

      throw new RuntimeException(e);

    }

  }

}

Location: IndexWriters.java

Content: 

/** 

 * Loads the configuration of index writers.

 * @param conf Nutch configuration instance.

 */

private IndexWriterConfig[] loadWritersConfiguration(Configuration conf){

  String filename=conf.get("indexer.indexwriters.file","index-writers.xml");

  InputStream ssInputStream=conf.getConfResourceAsInputStream(filename);

  InputSource inputSource=new InputSource(ssInputStream);

  try {

    DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();

    DocumentBuilder builder=factory.newDocumentBuilder();

    Document document=builder.parse(inputSource);

    Element rootElement=document.getDocumentElement();

    NodeList writerList=rootElement.getElementsByTagName("writer");

    IndexWriterConfig[] indexWriterConfigs=new IndexWriterConfig[writerList.getLength()];

    for (int i=0; i < writerList.getLength(); i++) {

      indexWriterConfigs[i]=IndexWriterConfig.getInstanceFromElement((Element)writerList.item(i));

    }

    return indexWriterConfigs;

  }

 catch (  SAXException|IOException|ParserConfigurationException e) {

    LOG.error(e.toString());

    return new IndexWriterConfig[0];

  }

}

Location: IndexWriters.java

Content: 

/** 

 * Maps the fields of a given document.

 * @param document The document to map.

 * @param mapping  The mapping to apply.

 * @return The mapped document.

 */

private NutchDocument mapDocument(final NutchDocument document,final Map<MappingReader.Actions,Map<String,List<String>>> mapping){

  try {

    NutchDocument mappedDocument=document.clone();

    mapping.get(MappingReader.Actions.COPY).forEach((key,value) -> {

      if (mappedDocument.getField(key) != null) {

        for (        String field : value) {

          if (!key.equals(field)) {

            for (            Object val : mappedDocument.getField(key).getValues()) {

              mappedDocument.add(field,val);

            }

          }

        }

      }

    }

);

    mapping.get(MappingReader.Actions.RENAME).forEach((key,value) -> {

      if (mappedDocument.getField(key) != null) {

        NutchField field=mappedDocument.removeField(key);

        mappedDocument.add(value.get(0),field.getValues());

        mappedDocument.getField(value.get(0)).setWeight(field.getWeight());

      }

    }

);

    mapping.get(MappingReader.Actions.REMOVE).forEach((key,value) -> mappedDocument.removeField(key));

    return mappedDocument;

  }

 catch (  CloneNotSupportedException e) {

    LOG.warn("An instance of class {} can't be cloned.",document.getClass().getName());

    return document;

  }

}

Location: IndexWriters.java

Content: 

/** 

 * Initializes the internal variables of index writers.

 * @param conf Nutch configuration

 * @param name target name of the {@link IndexWriter} to be opened

 * @throws IOException Some exception thrown by some writer.

 */

public void open(Configuration conf,String name) throws IOException {

  for (  Map.Entry<String,IndexWriterWrapper> entry : this.indexWriters.entrySet()) {

    entry.getValue().getIndexWriter().open(conf,name);

    entry.getValue().getIndexWriter().open(entry.getValue().getIndexWriterConfig().getParams());

  }

}

Location: IndexWriters.java

Content: 

public void update(NutchDocument doc) throws IOException {

  for (  String indexWriterId : getIndexWriters(doc)) {

    if (!this.indexWriters.containsKey(indexWriterId)) {

      LOG.warn("Index writer {} is not present. Maybe the plugin is not in plugin.includes or there is a misspelling.",indexWriterId);

      continue;

    }

    NutchDocument mappedDocument=mapDocument(doc,this.indexWriters.get(indexWriterId).getIndexWriterConfig().getMapping());

    this.indexWriters.get(indexWriterId).getIndexWriter().update(mappedDocument);

  }

}

Location: IndexWriters.java

Content: 

public void write(NutchDocument doc) throws IOException {

  for (  String indexWriterId : getIndexWriters(doc)) {

    if (!this.indexWriters.containsKey(indexWriterId)) {

      LOG.warn("Index writer {} is not present. Maybe the plugin is not in plugin.includes or there is a misspelling.",indexWriterId);

      continue;

    }

    NutchDocument mappedDocument=mapDocument(doc,this.indexWriters.get(indexWriterId).getIndexWriterConfig().getMapping());

    this.indexWriters.get(indexWriterId).getIndexWriter().write(mappedDocument);

  }

}

