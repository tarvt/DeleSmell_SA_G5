Location: AbstractHttpProtocolPluginTest.java

Content: 

/** 

 * Fetches the specified <code>page</code> from the local test server and checks whether the HTTP response status code matches with the expected code.

 * @param port port server is running on

 * @param page Page to be fetched

 * @param expectedCode HTTP response status code expected while fetching the page

 * @param expectedContentType Expected Content-Type

 */

protected ProtocolOutput fetchPage(int port,String page,int expectedCode,String expectedContentType) throws Exception {

  URL url=new URL("http","127.0.0.1",port,page);

  LOG.info("Fetching {}",url);

  CrawlDatum crawlDatum=new CrawlDatum();

  ProtocolOutput protocolOutput=http.getProtocolOutput(new Text(url.toString()),crawlDatum);

  int httpStatusCode=-1;

  if (crawlDatum.getMetaData().containsKey(Nutch.PROTOCOL_STATUS_CODE_KEY)) {

    httpStatusCode=Integer.parseInt(crawlDatum.getMetaData().get(Nutch.PROTOCOL_STATUS_CODE_KEY).toString());

  }

  assertEquals("HTTP Status Code for " + url,expectedCode,httpStatusCode);

  if (httpStatusCode == 200 && expectedContentType != null) {

    Content content=protocolOutput.getContent();

    assertEquals("ContentType " + url,"text/html",content.getContentType());

  }

  return protocolOutput;

}

Location: AbstractHttpProtocolPluginTest.java

Content: 

protected ProtocolOutput fetchPage(String page,int expectedCode) throws Exception {

  return fetchPage(defaultPort,page,expectedCode,null);

}

Location: AbstractHttpProtocolPluginTest.java

Content: 

protected ProtocolOutput fetchPage(String page,int expectedCode,String expectedContentType) throws Exception {

  return fetchPage(defaultPort,page,expectedCode,null);

}

Location: AbstractHttpProtocolPluginTest.java

Content: 

public static String getHeaders(ProtocolOutput response){

  return response.getContent().getMetadata().get(Response.RESPONSE_HEADERS);

}

Location: AbstractHttpProtocolPluginTest.java

Content: 

public static String getHeader(ProtocolOutput response,String header){

  return getHeader(getHeaders(response).split("\r\n"),header);

}

Location: AbstractHttpProtocolPluginTest.java

Content: 

public static String getHeader(String[] headers,String header){

  for (  String line : headers) {

    String[] parts=line.split(": ",2);

    if (parts[0].equals(header)) {

      return parts[1];

    }

  }

  return null;

}

Location: AbstractHttpProtocolPluginTest.java

Content: 

protected abstract String getPluginClassName();

Location: AbstractHttpProtocolPluginTest.java

Content: 

protected void launchServer(Function<String,byte[]> responder) throws InterruptedException {

  launchServer(responder,null);

}

Location: AbstractHttpProtocolPluginTest.java

Content: 

protected void launchServer(Function<String,byte[]> responder,Predicate<List<String>> requestChecker) throws InterruptedException {

  launchServer(defaultPort,responder,requestChecker);

}

Location: AbstractHttpProtocolPluginTest.java

Content: 

protected void launchServer(int port,BiFunction<String,String[],byte[]> responder,Predicate<List<String>> requestChecker) throws InterruptedException {

  Thread serverThread=new Thread(() -> {

    try {

      runServer(port,responder,requestChecker);

    }

 catch (    SocketException e) {

      LOG.info("Socket on port {} closed: {}",port,e.getMessage());

    }

catch (    Exception e) {

      LOG.warn("Test server died:",e);

    }

  }

);

  serverThread.start();

  Thread.sleep(50);

}

Location: AbstractHttpProtocolPluginTest.java

Content: 

protected void launchServer(int port,Function<String,byte[]> responder,Predicate<List<String>> requestChecker) throws InterruptedException {

  BiFunction<String,String[],byte[]> responderBiFunc=(  String path,  String[] ignoredHeaders) -> {

    return responder.apply(path);

  }

;

  launchServer(port,responderBiFunc,requestChecker);

}

Location: AbstractHttpProtocolPluginTest.java

Content: 

protected void launchServer(Map<String,byte[]> responses) throws InterruptedException {

  launchServer(defaultPort,(  String requestPath) -> {

    return responses.get(requestPath);

  }

,null);

}

Location: AbstractHttpProtocolPluginTest.java

Content: 

protected void launchServer(String response) throws InterruptedException {

  launchServer("/",response);

}

Location: AbstractHttpProtocolPluginTest.java

Content: 

protected void launchServer(String path,byte[] response) throws InterruptedException {

  Map<String,byte[]> responses=new TreeMap<>();

  responses.put(path,response);

  launchServer(responses);

}

Location: AbstractHttpProtocolPluginTest.java

Content: 

protected void launchServer(String path,String response) throws InterruptedException {

  launchServer(path,response.getBytes(UTF_8));

}

Location: AbstractHttpProtocolPluginTest.java

Content: 

/** 

 * Starts the test server at a specified port and constant response.

 * @param portno Port number.

 * @param responder function to return a response (byte[] containing HTTP response header and payload content) for a given request header represented as list of request header lines

 * @param requestChecker verify request passed as list of HTTP header lines

 * @throws Exception

 */

protected void runServer(int port,BiFunction<String,String[],byte[]> responder,Predicate<List<String>> requestChecker) throws Exception {

  server=new ServerSocket();

  server.bind(new InetSocketAddress("127.0.0.1",port));

  Pattern requestPattern=Pattern.compile("(?i)^GET\\s+(\\S+)");

  while (true) {

    LOG.info("Listening on port {}",port);

    if (server.isClosed()) {

      server=new ServerSocket();

      server.bind(new InetSocketAddress("127.0.0.1",port));

    }

    Socket socket=server.accept();

    LOG.info("Connection received");

    try (BufferedReader in=new BufferedReader(new InputStreamReader(socket.getInputStream(),UTF_8))){

      List<String> requestLines=new ArrayList<>();

      String line;

      while ((line=in.readLine()) != null) {

        LOG.info("Request: {}",line);

        if (line.trim().isEmpty()) {

          break;

        }

        requestLines.add(line);

      }

      String requestPath=null;

      Matcher m=requestPattern.matcher(requestLines.get(0));

      if (m.find()) {

        requestPath=m.group(1);

        LOG.info("Requested path {}",requestPath);

      }

      byte[] response=badRequest.getBytes(UTF_8);

      if (requestChecker != null && !requestChecker.test(requestLines)) {

        LOG.warn("Request validation failed!");

        response="HTTP/1.1 500 Internal Server Error\r\n\r\nRequest validation failed!".getBytes(UTF_8);

      }

 else       if (requestPath == null) {

        LOG.warn("No request path!");

      }

 else       if (!requestPath.startsWith("/")) {

        LOG.warn("Request path must start with `/`");

      }

 else {

        response=responder.apply(requestPath,requestLines.toArray(new String[requestLines.size()]));

        if (response == null) {

          LOG.warn("No response found for given path `{}`",requestPath);

          response=notFound.getBytes(UTF_8);

        }

      }

      socket.getOutputStream().write(response);

    }

 catch (    Exception e) {

      LOG.error("Exception in test server:",e);

    }

  }

}

