Location: PrefixStringMatcher.java

Content: 

/** 

 * Returns the longest prefix of <code>input</code> that is matched, or <code>null</code> if no match exists.

 */

public String longestMatch(String input){

  TrieNode node=root;

  String result=null;

  for (int i=0; i < input.length(); i++) {

    node=node.getChild(input.charAt(i));

    if (node == null)     break;

    if (node.isTerminal())     result=input.substring(0,i + 1);

  }

  return result;

}

Location: PrefixStringMatcher.java

Content: 

/** 

 * Returns true if the given <code>String</code> is matched by a prefix in the trie

 */

public boolean matches(String input){

  TrieNode node=root;

  for (int i=0; i < input.length(); i++) {

    node=node.getChild(input.charAt(i));

    if (node == null)     return false;

    if (node.isTerminal())     return true;

  }

  return false;

}

Location: PrefixStringMatcher.java

Content: 

/** 

 * Creates a new <code>PrefixStringMatcher</code> which will match <code>String</code>s with any prefix in the supplied {@link Collection}.

 * @param prefixes A collection containing string prefixes

 * @throws ClassCastException if any <code>Object</code>s in the collection are not <code>String</code>s

 */

public PrefixStringMatcher(Collection<String> prefixes){

  super();

  Iterator<String> iter=prefixes.iterator();

  while (iter.hasNext())   addPatternForward(iter.next());

}

Location: PrefixStringMatcher.java

Content: 

/** 

 * Creates a new <code>PrefixStringMatcher</code> which will match <code>String</code>s with any prefix in the supplied array. Zero-length <code>Strings</code> are ignored.

 * @param prefixes A array containing string prefixes

 */

public PrefixStringMatcher(String[] prefixes){

  super();

  for (int i=0; i < prefixes.length; i++)   addPatternForward(prefixes[i]);

}

Location: PrefixStringMatcher.java

Content: 

/** 

 * Returns the shortest prefix of <code>input</code> that is matched, or <code>null</code> if no match exists.

 */

public String shortestMatch(String input){

  TrieNode node=root;

  for (int i=0; i < input.length(); i++) {

    node=node.getChild(input.charAt(i));

    if (node == null)     return null;

    if (node.isTerminal())     return input.substring(0,i + 1);

  }

  return null;

}

