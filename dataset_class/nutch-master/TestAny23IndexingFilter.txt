Location: TestAny23IndexingFilter.java

Content: 

@Test public void testAny23TriplesFields() throws Exception {

  Configuration conf=NutchConfiguration.create();

  Any23IndexingFilter filter=new Any23IndexingFilter();

  filter.setConf(conf);

  Assert.assertNotNull(filter);

  NutchDocument doc=new NutchDocument();

  ParseData parseData=new ParseData(ParseStatus.STATUS_SUCCESS,"The Foo Page",new Outlink[]{},new Metadata());

  ParseImpl parse=new ParseImpl("test page",parseData);

  String[] triples=new String[]{"<http://dbpedia.org/resource/Z\u00FCrich> <http://www.w3.org/2002/07/owl#sameAs> <http://rdf.freebase.com/ns/m.08966> .","<http://dbpedia.org/resource/Z\u00FCrich> <http://dbpedia.org/property/yearHumidity> \"77\" .","<http://dbpedia.org/resource/Z\u00FCrich> <http://www.w3.org/2000/01/rdf-schema#label> \"Zurique\"@pt ."};

  for (  String triple : triples) {

    parse.getData().getParseMeta().add(Any23ParseFilter.ANY23_TRIPLES,triple);

  }

  try {

    doc=filter.filter(doc,parse,new Text("http://nutch.apache.org/"),new CrawlDatum(),new Inlinks());

  }

 catch (  Exception e) {

    e.printStackTrace();

    Assert.fail(e.getMessage());

  }

  List<Object> docTriples=doc.getField(Any23IndexingFilter.STRUCTURED_DATA).getValues();

  Assert.assertEquals(docTriples.size(),triples.length);

  Object triple=docTriples.get(0);

  Assert.assertTrue(triple instanceof Map<?,?>);

  @SuppressWarnings("unchecked") Map<String,String> structuredData=(Map<String,String>)triple;

  Assert.assertEquals(structuredData.get("node"),"<http://dbpedia.org/resource/Z\u00FCrich>");

  Assert.assertEquals(structuredData.get("key"),"<http://www.w3.org/2002/07/owl#sameAs>");

  Assert.assertEquals(structuredData.get("short_key"),"sameAs");

  Assert.assertEquals(structuredData.get("value"),"<http://rdf.freebase.com/ns/m.08966>");

  triple=docTriples.get(1);

  Assert.assertTrue(triple instanceof Map<?,?>);

  structuredData=(Map<String,String>)triple;

  Assert.assertEquals(structuredData.get("node"),"<http://dbpedia.org/resource/Z\u00FCrich>");

  Assert.assertEquals(structuredData.get("key"),"<http://dbpedia.org/property/yearHumidity>");

  Assert.assertEquals(structuredData.get("short_key"),"yearHumidity");

  Assert.assertEquals(structuredData.get("value"),"\"77\"");

}

