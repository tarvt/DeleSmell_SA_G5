Location: DumpFileUtil.java

Content: 

public static String createFileNameFromUrl(String basePath,String reverseKey,String urlString,String epochScrapeTime,String fileExtension,boolean makeDir){

  String fullDirPath=basePath + File.separator + reverseKey+ File.separator+ DigestUtils.sha1Hex(urlString);

  if (makeDir) {

    try {

      FileUtils.forceMkdir(new File(fullDirPath));

    }

 catch (    IOException e) {

      LOG.error("Failed to create dir: {}",fullDirPath);

      fullDirPath=null;

    }

  }

  if (fileExtension.length() > MAX_LENGTH_OF_EXTENSION) {

    LOG.info("File extension is too long. Truncated to {} characters.",MAX_LENGTH_OF_EXTENSION);

    fileExtension=StringUtils.substring(fileExtension,0,MAX_LENGTH_OF_EXTENSION);

  }

  String outputFullPath=fullDirPath + File.separator + epochScrapeTime+ "."+ fileExtension;

  return outputFullPath;

}

Location: DumpFileUtil.java

Content: 

public static String createFileName(String md5,String fileBaseName,String fileExtension){

  if (fileBaseName.length() > MAX_LENGTH_OF_FILENAME) {

    LOG.info("File name is too long. Truncated to {} characters.",MAX_LENGTH_OF_FILENAME);

    fileBaseName=StringUtils.substring(fileBaseName,0,MAX_LENGTH_OF_FILENAME);

  }

  if (fileExtension.length() > MAX_LENGTH_OF_EXTENSION) {

    LOG.info("File extension is too long. Truncated to {} characters.",MAX_LENGTH_OF_EXTENSION);

    fileExtension=StringUtils.substring(fileExtension,0,MAX_LENGTH_OF_EXTENSION);

  }

  fileBaseName=fileBaseName.replaceAll("\\?","");

  fileExtension=fileExtension.replaceAll("\\?","");

  return String.format(FILENAME_PATTERN,md5,fileBaseName,fileExtension);

}

Location: DumpFileUtil.java

Content: 

public static String createTwoLevelsDirectory(String basePath,String md5){

  return createTwoLevelsDirectory(basePath,md5,true);

}

Location: DumpFileUtil.java

Content: 

public static String createTwoLevelsDirectory(String basePath,String md5,boolean makeDir){

  String firstLevelDirName=new StringBuilder().append(md5.charAt(0)).append(md5.charAt(8)).toString();

  String secondLevelDirName=new StringBuilder().append(md5.charAt(16)).append(md5.charAt(24)).toString();

  String fullDirPath=String.format(DIR_PATTERN,basePath,firstLevelDirName,secondLevelDirName);

  if (makeDir) {

    try {

      FileUtils.forceMkdir(new File(fullDirPath));

    }

 catch (    IOException e) {

      LOG.error("Failed to create dir: {}",fullDirPath);

      fullDirPath=null;

    }

  }

  return fullDirPath;

}

Location: DumpFileUtil.java

Content: 

public static String displayFileTypes(Map<String,Integer> typeCounts,Map<String,Integer> filteredCounts){

  StringBuilder builder=new StringBuilder();

  builder.append("\nTOTAL Stats:\n");

  builder.append("[\n");

  int mimetypeCount=0;

  for (  String mimeType : typeCounts.keySet()) {

    builder.append("    {\"mimeType\":\"");

    builder.append(mimeType);

    builder.append("\",\"count\":\"");

    builder.append(typeCounts.get(mimeType));

    builder.append("\"}\n");

    mimetypeCount+=typeCounts.get(mimeType);

  }

  builder.append("]\n");

  builder.append("Total count: " + mimetypeCount + "\n");

  mimetypeCount=0;

  if (!filteredCounts.isEmpty()) {

    builder.append("\nFILTERED Stats:\n");

    builder.append("[\n");

    for (    String mimeType : filteredCounts.keySet()) {

      builder.append("    {\"mimeType\":\"");

      builder.append(mimeType);

      builder.append("\",\"count\":\"");

      builder.append(filteredCounts.get(mimeType));

      builder.append("\"}\n");

      mimetypeCount+=filteredCounts.get(mimeType);

    }

    builder.append("]\n");

    builder.append("Total filtered count: " + mimetypeCount + "\n");

  }

  return builder.toString();

}

Location: DumpFileUtil.java

Content: 

public static String getUrlMD5(String url){

  byte[] digest=MD5Hash.digest(url).getDigest();

  StringBuffer sb=new StringBuffer();

  for (  byte b : digest) {

    sb.append(String.format("%02x",b & 0xff));

  }

  return sb.toString();

}

