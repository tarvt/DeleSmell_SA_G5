Location: TimingUtil.java

Content: 

/** 

 * Calculate the elapsed time between two times specified in milliseconds.

 * @param start The start of the time period

 * @param end The end of the time period

 * @return a string of the form "XhYmZs" when the elapsed time is X hours, Yminutes and Z seconds or null if start &gt; end.

 */

public static String elapsedTime(long start,long end){

  if (start > end) {

    return null;

  }

  return secondsToHMS((end - start) / 1000);

}

Location: TimingUtil.java

Content: 

/** 

 * Convert epoch milliseconds ( {@link System#currentTimeMillis()}) into date string (local time zone) used for logging

 * @param millis A epoch milliseconds representation

 * @return a local time zone date string

 */

public static String logDateMillis(long millis){

  return logDateFormat.format(LocalDateTime.ofInstant(Instant.ofEpochMilli(millis),ZoneId.systemDefault()));

}

Location: TimingUtil.java

Content: 

/** 

 * Show time in seconds as days, hours, minutes and seconds (d days, hh:mm:ss)

 * @param seconds (elapsed) time in seconds

 * @return human readable time string "d days, hh:mm:ss"

 */

public static String secondsToDaysHMS(long seconds){

  long days=TimeUnit.SECONDS.toDays(seconds);

  if (days == 0)   return secondsToHMS(seconds);

  String hhmmss=secondsToHMS(seconds % TimeUnit.DAYS.toSeconds(1));

  return String.format("%d days, %s",days,hhmmss);

}

Location: TimingUtil.java

Content: 

/** 

 * Show time in seconds as hours, minutes and seconds (hh:mm:ss)

 * @param seconds (elapsed) time in seconds

 * @return human readable time string "hh:mm:ss"

 */

public static String secondsToHMS(long seconds){

  long hours=TimeUnit.SECONDS.toHours(seconds);

  long minutes=TimeUnit.SECONDS.toMinutes(seconds) % TimeUnit.HOURS.toMinutes(1);

  seconds=TimeUnit.SECONDS.toSeconds(seconds) % TimeUnit.MINUTES.toSeconds(1);

  return String.format("%02d:%02d:%02d",hours,minutes,seconds);

}

