Location: NutchJob.java

Content: 

/** 

 * Clean up the file system in case of a job failure.

 * @param tempDir The temporary directory which needs to be deleted/cleaned-up.

 * @param fs The {@link org.apache.hadoop.fs.FileSystem} on which the tempDir resides.

 * @throws IOException Occurs if there is fatal I/O error whilst performingthe cleanup.

 */

public static void cleanupAfterFailure(Path tempDir,FileSystem fs) throws IOException {

  cleanupAfterFailure(tempDir,null,fs);

}

Location: NutchJob.java

Content: 

/** 

 * Clean up the file system in case of a job failure.

 * @param tempDir The temporary directory which needs to be deleted/cleaned-up.

 * @param lock A lockfile if one exists.

 * @see LockUtil#removeLockFile(FileSystem,Path)

 * @param fs The {@link org.apache.hadoop.fs.FileSystem} on which the tempDir resides.

 * @throws IOException Occurs if there is fatal I/O error whilst performingthe cleanup.

 */

public static void cleanupAfterFailure(Path tempDir,Path lock,FileSystem fs) throws IOException {

  try {

    if (fs.exists(tempDir)) {

      fs.delete(tempDir,true);

    }

    if (lock != null) {

      LockUtil.removeLockFile(fs,lock);

    }

  }

 catch (  IOException e) {

    LOG.error("NutchJob cleanup failed: {}",e.getMessage());

    throw e;

  }

}

Location: NutchJob.java

Content: 

public static Job getInstance(Configuration conf) throws IOException {

  return Job.getInstance(conf);

}

Location: NutchJob.java

Content: 

@SuppressWarnings("deprecation") public NutchJob(Configuration conf,String jobName) throws IOException {

  super(conf,jobName);

}

