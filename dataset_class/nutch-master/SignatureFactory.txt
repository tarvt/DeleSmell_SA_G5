Location: SignatureFactory.java

Content: 

/** 

 * Return the  {@link Signature} implementation for a given {@link Configuration}, or  {@link MD5Signature} by default.

 * @param conf a populated {@link Configuration}

 * @return the {@link Signature} implementation

 */

public synchronized static Signature getSignature(Configuration conf){

  String clazz=conf.get("db.signature.class",MD5Signature.class.getName());

  ObjectCache objectCache=ObjectCache.get(conf);

  Signature impl=(Signature)objectCache.getObject(clazz);

  if (impl == null) {

    try {

      LOG.info("Using Signature impl: {}",clazz);

      Class<?> implClass=Class.forName(clazz);

      impl=(Signature)implClass.getConstructor().newInstance();

      impl.setConf(conf);

      objectCache.setObject(clazz,impl);

    }

 catch (    Exception e) {

      throw new RuntimeException("Couldn't create " + clazz,e);

    }

  }

  return impl;

}

Location: SignatureFactory.java

Content: 

private SignatureFactory(){

}

