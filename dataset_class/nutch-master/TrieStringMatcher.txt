Location: TrieStringMatcher.java

Content: 

/** 

 * Adds any necessary nodes to the trie so that the given <code>String</code> can be decoded <em>in reverse</em> and the first character is represented by a terminal node. Zero-length <code>Strings</code> are ignored.

 * @param s String to be decoded.

 */

protected final void addPatternBackward(String s){

  TrieNode node=root;

  if (s.length() > 0) {

    for (int i=s.length() - 1; i > 0; i--)     node=node.getChildAddIfNotPresent(s.charAt(i),false);

    node=node.getChildAddIfNotPresent(s.charAt(0),true);

  }

}

Location: TrieStringMatcher.java

Content: 

/** 

 * Adds any necessary nodes to the trie so that the given <code>String</code> can be decoded and the last character is represented by a terminal node. Zero-length <code>Strings</code> are ignored.

 * @param s String to be decoded.

 */

protected final void addPatternForward(String s){

  TrieNode node=root;

  int stop=s.length() - 1;

  int i;

  if (s.length() > 0) {

    for (i=0; i < stop; i++)     node=node.getChildAddIfNotPresent(s.charAt(i),false);

    node=node.getChildAddIfNotPresent(s.charAt(i),true);

  }

}

Location: TrieStringMatcher.java

Content: 

/** 

 * Get the next  {@link TrieNode} visited, given that you are at<code>node</code>, and that the next character in the input is the <code>idx</code>'th character of <code>s</code>. Can return null.

 * @see TrieNode#getChild(char)

 * @param node Input {@link TrieNode} containing child nodes

 * @param s String to match character at indexed position

 * @param idx Indexed position in input string

 * @return child {@link TrieNode}

 */

protected final TrieNode matchChar(TrieNode node,String s,int idx){

  return node.getChild(s.charAt(idx));

}

Location: TrieStringMatcher.java

Content: 

protected TrieStringMatcher(){

  this.root=new TrieNode('\000',false);

}

