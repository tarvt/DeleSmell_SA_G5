Location: HadoopFSUtil.java

Content: 

/** 

 * Get a path filter which allows all paths.

 * @return {@link PathFilter}

 */

public static PathFilter getPassAllFilter(){

  return arg0 -> true;

}

Location: HadoopFSUtil.java

Content: 

/** 

 * Get a path filter which allows all directories.

 * @param fs A {@link org.apache.hadoop.fs.FileSystem} usedto determine directories.

 * @return {@link PathFilter}

 */

public static PathFilter getPassDirectoriesFilter(final FileSystem fs){

  return path -> {

    try {

      return fs.getFileStatus(path).isDirectory();

    }

 catch (    IOException ioe) {

      return false;

    }

  }

;

}

Location: HadoopFSUtil.java

Content: 

/** 

 * Turns an array of FileStatus into an array of Paths. May return null if input is null.

 * @param stats A {@link org.apache.hadoop.fs.FileStatus} array

 * @return {@link org.apache.hadoop.fs.Path} array

 */

public static Path[] getPaths(FileStatus[] stats){

  if (stats == null) {

    return null;

  }

  if (stats.length == 0) {

    return new Path[0];

  }

  Path[] res=new Path[stats.length];

  for (int i=0; i < stats.length; i++) {

    res[i]=stats[i].getPath();

  }

  return res;

}

