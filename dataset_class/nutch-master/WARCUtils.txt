Location: WARCUtils.java

Content: 

public static final WARCRecordInfo docToMetadata(NutchDocument doc) throws UnsupportedEncodingException {

  WARCRecordInfo record=new WARCRecordInfo();

  record.setType(WARCConstants.WARCRecordType.metadata);

  record.setUrl((String)doc.getFieldValue("id"));

  record.setCreate14DigitDate(DateUtils.get14DigitDate((Date)doc.getFieldValue("tstamp")));

  record.setMimetype("application/warc-fields");

  record.setRecordId(generator.getRecordID());

  ANVLRecord metadata=new ANVLRecord();

  for (  String field : doc.getFieldNames()) {

    List<Object> values=doc.getField(field).getValues();

    for (    Object value : values) {

      if (value instanceof Date) {

        metadata.addLabelValue(field,DateUtils.get14DigitDate());

      }

 else {

        metadata.addLabelValue(field,(String)value);

      }

    }

  }

  record.setContentLength(metadata.getLength());

  record.setContentStream(new ByteArrayInputStream(metadata.getUTF8Bytes()));

  return record;

}

Location: WARCUtils.java

Content: 

/** 

 * Modify verbatim HTTP response headers: fix, remove or replace headers <code>Content-Length</code>, <code>Content-Encoding</code> and <code>Transfer-Encoding</code> which may confuse WARC readers. Ensure that returned header end with a single empty line (<code>\r\n\r\n</code>).

 * @param headers HTTP 1.1 or 1.0 response header string, CR-LF-separated lines, first line is status line

 * @param contentLength Effective uncompressed and unchunked length of content

 * @return safe HTTP response header

 */

public static final String fixHttpHeaders(String headers,int contentLength){

  if (headers == null) {

    return null;

  }

  int start=0, lineEnd=0, last=0, trailingCrLf=0;

  StringBuilder replace=new StringBuilder();

  while (start < headers.length()) {

    lineEnd=headers.indexOf(CRLF,start);

    trailingCrLf=1;

    if (lineEnd == -1) {

      lineEnd=headers.length();

      trailingCrLf=0;

    }

    int colonPos=-1;

    for (int i=start; i < lineEnd; i++) {

      if (headers.charAt(i) == ':') {

        colonPos=i;

        break;

      }

    }

    if (colonPos == -1) {

      boolean valid=true;

      if (start == 0) {

      }

 else       if ((lineEnd + 4) == headers.length() && headers.endsWith(CRLF + CRLF)) {

        trailingCrLf=2;

      }

 else {

        valid=false;

      }

      if (!valid) {

        if (last < start) {

          replace.append(headers.substring(last,start));

        }

        last=lineEnd + 2 * trailingCrLf;

      }

      start=lineEnd + 2 * trailingCrLf;

      continue;

    }

    String name=headers.substring(start,colonPos);

    if (PROBLEMATIC_HEADERS.matcher(name).matches()) {

      boolean needsFix=true;

      if (name.equalsIgnoreCase("content-length")) {

        String value=headers.substring(colonPos + 1,lineEnd).trim();

        try {

          int l=Integer.parseInt(value);

          if (l == contentLength) {

            needsFix=false;

          }

        }

 catch (        NumberFormatException e) {

        }

      }

      if (needsFix) {

        if (last < start) {

          replace.append(headers.substring(last,start));

        }

        last=lineEnd + 2 * trailingCrLf;

        replace.append(X_HIDE_HEADER).append(headers.substring(start,lineEnd + 2 * trailingCrLf));

        if (trailingCrLf == 0) {

          replace.append(CRLF);

          trailingCrLf=1;

        }

        if (name.equalsIgnoreCase("content-length")) {

          replace.append("Content-Length").append(COLONSP).append(contentLength).append(CRLF);

        }

      }

    }

    start=lineEnd + 2 * trailingCrLf;

  }

  if (last > 0 || trailingCrLf != 2) {

    if (last < headers.length()) {

      replace.append(headers.substring(last));

    }

    while (trailingCrLf < 2) {

      replace.append(CRLF);

      trailingCrLf++;

    }

    return replace.toString();

  }

  return headers;

}

Location: WARCUtils.java

Content: 

public static final String getAgentString(String name,String version,String description,String URL,String email){

  StringBuffer buf=new StringBuffer();

  buf.append(name);

  if (version != null) {

    buf.append("/").append(version);

  }

  if (((description != null) && (description.length() != 0)) || ((email != null) && (email.length() != 0)) || ((URL != null) && (URL.length() != 0))) {

    buf.append(" (");

    if ((description != null) && (description.length() != 0)) {

      buf.append(description);

      if ((URL != null) || (email != null))       buf.append("; ");

    }

    if ((URL != null) && (URL.length() != 0)) {

      buf.append(URL);

      if (email != null)       buf.append("; ");

    }

    if ((email != null) && (email.length() != 0))     buf.append(email);

    buf.append(")");

  }

  return buf.toString();

}

Location: WARCUtils.java

Content: 

public static final String getHostname(Configuration conf) throws UnknownHostException {

  return StringUtil.isEmpty(conf.get("http.agent.host","")) ? InetAddress.getLocalHost().getHostName() : conf.get("http.agent.host");

}

Location: WARCUtils.java

Content: 

public static final String getIPAddress(Configuration conf) throws UnknownHostException {

  return InetAddress.getLocalHost().getHostAddress();

}

Location: WARCUtils.java

Content: 

public static final ANVLRecord getWARCInfoContent(Configuration conf){

  ANVLRecord record=new ANVLRecord();

  record.addLabelValue(FORMAT,"WARC File Format 1.0");

  record.addLabelValue(CONFORMS_TO,"http://bibnum.bnf.fr/WARC/WARC_ISO_28500_version1_latestdraft.pdf");

  record.addLabelValue(SOFTWARE,conf.get("http.agent.name",""));

  record.addLabelValue(HTTP_HEADER_USER_AGENT,getAgentString(conf.get("http.agent.name",""),conf.get("http.agent.version",""),conf.get("http.agent.description",""),conf.get("http.agent.url",""),conf.get("http.agent.email","")));

  record.addLabelValue(HTTP_HEADER_FROM,conf.get("http.agent.email",""));

  try {

    record.addLabelValue(HOSTNAME,getHostname(conf));

    record.addLabelValue(IP,getIPAddress(conf));

  }

 catch (  UnknownHostException ignored) {

  }

  record.addLabelValue(ROBOTS,"classic");

  record.addLabelValue(OPERATOR,conf.get("http.agent.email",""));

  return record;

}

Location: WARCUtils.java

Content: 

public static final byte[] toByteArray(HttpHeaders headers) throws IOException {

  ByteArrayOutputStream out=new ByteArrayOutputStream();

  headers.write(out);

  return out.toByteArray();

}

