Location: FOPGVTGlyphVector.java

Content: 

private void buildBoundingBoxes(){

  boundingBoxes=new Rectangle2D[glyphs.length];

  for (int i=0; i < glyphs.length; i++) {

    Rectangle bbox=fontMetrics.getBoundingBox(glyphs[i],fontSize);

    boundingBoxes[i]=new Rectangle2D.Float(bbox.x / 1000000f,-(bbox.y + bbox.height) / 1000000f,bbox.width / 1000000f,bbox.height / 1000000f);

  }

}

Location: FOPGVTGlyphVector.java

Content: 

/** 

 * Build glyph position array.

 * @param glyphAsCharIter iterator for mapped glyphs as char codes (not glyph codes)

 * @param dp optionally null glyph position adjustments array

 * @param lsa optionally null letter space adjustments array

 * @return array of floats that denote [X,Y] position pairs for each glyph includingincluding an implied subsequent glyph; i.e., returned array contains one more pair than the numbers of glyphs, where the position denoted by this last pair represents the position after the last glyph has incurred advancement

 */

private float[] buildGlyphPositions(final CharacterIterator glyphAsCharIter,int[][] dp,MinOptMax[] lsa){

  int numGlyphs=glyphAsCharIter.getEndIndex() - glyphAsCharIter.getBeginIndex();

  float[] positions=new float[2 * (numGlyphs + 1)];

  float xc=0f;

  float yc=0f;

  if (dp != null) {

    for (int i=0; i < numGlyphs + 1; ++i) {

      int[] pa=((i >= dp.length) || (dp[i] == null)) ? PA_ZERO : dp[i];

      float xo=xc + ((float)pa[0]) / 1000f;

      float yo=yc - ((float)pa[1]) / 1000f;

      float xa=getGlyphWidth(i) + ((float)pa[2]) / 1000f;

      float ya=((float)pa[3]) / 1000f;

      int k=2 * i;

      positions[k + 0]=xo;

      positions[k + 1]=yo;

      xc+=xa;

      yc+=ya;

    }

  }

 else   if (lsa != null) {

    for (int i=0; i < numGlyphs + 1; ++i) {

      MinOptMax sa=(((i + 1) >= lsa.length) || (lsa[i + 1] == null)) ? MinOptMax.ZERO : lsa[i + 1];

      float xo=xc;

      float yo=yc;

      float xa=getGlyphWidth(i) + sa.getOpt() / 1000f;

      float ya=0;

      int k=2 * i;

      positions[k + 0]=xo;

      positions[k + 1]=yo;

      xc+=xa;

      yc+=ya;

    }

  }

  return positions;

}

Location: FOPGVTGlyphVector.java

Content: 

private int[] buildGlyphs(Font font,final CharacterIterator glyphAsCharIter){

  int[] glyphs=new int[glyphAsCharIter.getEndIndex() - glyphAsCharIter.getBeginIndex()];

  int index=0;

  for (char c=glyphAsCharIter.first(); c != CharacterIterator.DONE; c=glyphAsCharIter.next()) {

    glyphs[index]=font.mapChar(c);

    index++;

  }

  return glyphs;

}

Location: FOPGVTGlyphVector.java

Content: 

public void draw(Graphics2D graphics2d,AttributedCharacterIterator aci){

}

Location: FOPGVTGlyphVector.java

Content: 

FOPGVTGlyphVector(FOPGVTFont font,final CharacterIterator iter,FontRenderContext frc){

  this.text=new SVGTextFragment(iter);

  this.font=font;

  Font f=font.getFont();

  this.fontSize=f.getFontSize();

  this.fontMetrics=f.getFontMetrics();

  this.frc=frc;

}

Location: FOPGVTGlyphVector.java

Content: 

private Rectangle2D[] getBoundingBoxes(){

  if (boundingBoxes == null) {

    buildBoundingBoxes();

  }

  return boundingBoxes;

}

Location: FOPGVTGlyphVector.java

Content: 

public Rectangle2D getBounds2D(AttributedCharacterIterator aci){

  return getOutline().getBounds2D();

}

Location: FOPGVTGlyphVector.java

Content: 

public int getCharacterCount(int startGlyphIndex,int endGlyphIndex){

  return endGlyphIndex - startGlyphIndex + 1;

}

Location: FOPGVTGlyphVector.java

Content: 

public GVTFont getFont(){

  return font;

}

Location: FOPGVTGlyphVector.java

Content: 

public FontRenderContext getFontRenderContext(){

  return frc;

}

Location: FOPGVTGlyphVector.java

Content: 

public Rectangle2D getGeometricBounds(){

  throw new UnsupportedOperationException();

}

Location: FOPGVTGlyphVector.java

Content: 

public Rectangle2D getGlyphCellBounds(int glyphIndex){

  throw new UnsupportedOperationException();

}

Location: FOPGVTGlyphVector.java

Content: 

public int[] getGlyphCodes(int beginGlyphIndex,int numEntries,int[] codeReturn){

  if (codeReturn == null) {

    codeReturn=new int[numEntries];

  }

  System.arraycopy(glyphs,beginGlyphIndex,codeReturn,0,numEntries);

  return codeReturn;

}

Location: FOPGVTGlyphVector.java

Content: 

public int getGlyphCode(int glyphIndex){

  return glyphs[glyphIndex];

}

Location: FOPGVTGlyphVector.java

Content: 

public GlyphJustificationInfo getGlyphJustificationInfo(int glyphIndex){

  throw new UnsupportedOperationException();

}

Location: FOPGVTGlyphVector.java

Content: 

public Shape getGlyphLogicalBounds(int glyphIndex){

  GVTGlyphMetrics metrics=getGlyphMetrics(glyphIndex);

  Point2D pos=getGlyphPosition(glyphIndex);

  GVTLineMetrics fontMetrics=font.getLineMetrics(0);

  Rectangle2D bounds=new Rectangle2D.Float(0,-fontMetrics.getDescent(),metrics.getHorizontalAdvance(),fontMetrics.getAscent() + fontMetrics.getDescent());

  AffineTransform t=AffineTransform.getTranslateInstance(pos.getX(),pos.getY());

  AffineTransform transf=getGlyphTransform(glyphIndex);

  if (transf != null) {

    t.concatenate(transf);

  }

  t.scale(1,-1);

  return t.createTransformedShape(bounds);

}

Location: FOPGVTGlyphVector.java

Content: 

public GVTGlyphMetrics getGlyphMetrics(int glyphIndex){

  Rectangle2D bbox=getBoundingBoxes()[glyphIndex];

  return new GVTGlyphMetrics(positions[2 * (glyphIndex + 1)] - positions[2 * glyphIndex],(fontMetrics.getAscender(fontSize) - fontMetrics.getDescender(fontSize)) / 1000000f,bbox,GlyphMetrics.STANDARD);

}

Location: FOPGVTGlyphVector.java

Content: 

public Shape getGlyphOutline(int glyphIndex){

  Shape glyphBox=getBoundingBoxes()[glyphIndex];

  AffineTransform tr=AffineTransform.getTranslateInstance(positions[glyphIndex * 2],positions[glyphIndex * 2 + 1]);

  AffineTransform glyphTransform=getGlyphTransform(glyphIndex);

  if (glyphTransform != null) {

    tr.concatenate(glyphTransform);

  }

  return tr.createTransformedShape(glyphBox);

}

Location: FOPGVTGlyphVector.java

Content: 

public int[][] getGlyphPositionAdjustments(){

  return gposAdjustments;

}

Location: FOPGVTGlyphVector.java

Content: 

public float[] getGlyphPositions(int beginGlyphIndex,int numEntries,float[] positionReturn){

  if (positionReturn == null) {

    positionReturn=new float[numEntries * 2];

  }

  System.arraycopy(positions,beginGlyphIndex * 2,positionReturn,0,numEntries * 2);

  return positionReturn;

}

Location: FOPGVTGlyphVector.java

Content: 

public Point2D getGlyphPosition(int glyphIndex){

  int positionIndex=glyphIndex * 2;

  return new Point2D.Float(positions[positionIndex],positions[positionIndex + 1]);

}

Location: FOPGVTGlyphVector.java

Content: 

public AffineTransform getGlyphTransform(int glyphIndex){

  return glyphTransforms[glyphIndex];

}

Location: FOPGVTGlyphVector.java

Content: 

public Shape getGlyphVisualBounds(int glyphIndex){

  Rectangle2D bbox=getBoundingBoxes()[glyphIndex];

  Point2D pos=getGlyphPosition(glyphIndex);

  AffineTransform t=AffineTransform.getTranslateInstance(pos.getX(),pos.getY());

  AffineTransform transf=getGlyphTransform(glyphIndex);

  if (transf != null) {

    t.concatenate(transf);

  }

  return t.createTransformedShape(bbox);

}

Location: FOPGVTGlyphVector.java

Content: 

private float getGlyphWidth(int index){

  if (index < glyphs.length) {

    return fontMetrics.getWidth(glyphs[index],fontSize) / 1000000f;

  }

 else {

    return 0f;

  }

}

Location: FOPGVTGlyphVector.java

Content: 

public Rectangle2D getLogicalBounds(){

  if (logicalBounds == null) {

    GeneralPath logicalBoundsPath=new GeneralPath();

    for (int i=0; i < getNumGlyphs(); i++) {

      Shape glyphLogicalBounds=getGlyphLogicalBounds(i);

      logicalBoundsPath.append(glyphLogicalBounds,false);

    }

    logicalBounds=logicalBoundsPath.getBounds2D();

  }

  return logicalBounds;

}

Location: FOPGVTGlyphVector.java

Content: 

public int getNumGlyphs(){

  return glyphs.length;

}

Location: FOPGVTGlyphVector.java

Content: 

public Shape getOutline(){

  if (outline == null) {

    outline=new GeneralPath();

    for (int i=0; i < glyphs.length; i++) {

      outline.append(getGlyphOutline(i),false);

    }

  }

  return outline;

}

Location: FOPGVTGlyphVector.java

Content: 

public Shape getOutline(float x,float y){

  throw new UnsupportedOperationException();

}

Location: FOPGVTGlyphVector.java

Content: 

public boolean isGlyphVisible(int glyphIndex){

  return glyphVisibilities[glyphIndex];

}

Location: FOPGVTGlyphVector.java

Content: 

public boolean isReversed(){

  return false;

}

Location: FOPGVTGlyphVector.java

Content: 

public void maybeReverse(boolean mirror){

}

Location: FOPGVTGlyphVector.java

Content: 

public void performDefaultLayout(){

  Font f=font.getFont();

  MinOptMax letterSpaceIPD=MinOptMax.ZERO;

  MinOptMax[] letterSpaceAdjustments=new MinOptMax[text.getEndIndex()];

  boolean retainControls=false;

  GlyphMapping mapping=GlyphMapping.doGlyphMapping(text,text.getBeginIndex(),text.getEndIndex(),f,letterSpaceIPD,letterSpaceAdjustments,'\0','\0',false,text.getBidiLevel(),true,true,retainControls);

  CharacterIterator glyphAsCharIter=mapping.mapping != null ? new StringCharacterIterator(mapping.mapping) : text.getIterator();

  this.glyphs=buildGlyphs(f,glyphAsCharIter);

  this.associations=mapping.associations;

  this.gposAdjustments=mapping.gposAdjustments;

  if (text.getBeginIndex() > 0) {

    int arrlen=text.getEndIndex() - text.getBeginIndex();

    MinOptMax[] letterSpaceAdjustmentsNew=new MinOptMax[arrlen];

    System.arraycopy(letterSpaceAdjustments,text.getBeginIndex(),letterSpaceAdjustmentsNew,0,arrlen);

    letterSpaceAdjustments=letterSpaceAdjustmentsNew;

  }

  this.positions=buildGlyphPositions(glyphAsCharIter,mapping.gposAdjustments,letterSpaceAdjustments);

  this.glyphVisibilities=new boolean[this.glyphs.length];

  Arrays.fill(glyphVisibilities,true);

  this.glyphTransforms=new AffineTransform[this.glyphs.length];

}

Location: FOPGVTGlyphVector.java

Content: 

public void setGlyphCode(int glyphIndex,int glyphCode){

  glyphs[glyphIndex]=glyphCode;

}

Location: FOPGVTGlyphVector.java

Content: 

public void setGlyphPosition(int glyphIndex,Point2D newPos){

  int idx=glyphIndex * 2;

  positions[idx]=(float)newPos.getX();

  positions[idx + 1]=(float)newPos.getY();

}

Location: FOPGVTGlyphVector.java

Content: 

public void setGlyphTransform(int glyphIndex,AffineTransform newTX){

  glyphTransforms[glyphIndex]=newTX;

}

Location: FOPGVTGlyphVector.java

Content: 

public void setGlyphVisible(int glyphIndex,boolean visible){

  glyphVisibilities[glyphIndex]=visible;

}

