Location: FopServlet.java

Content: 

/** 

 * This method is called right after the FopFactory is instantiated and can be overridden by subclasses to perform additional configuration.

 */

protected void configureFopFactory(FopFactoryBuilder builder){

}

Location: FopServlet.java

Content: 

/** 

 * Converts a String parameter to a JAXP Source object.

 * @param param a String parameter

 * @return Source the generated Source object

 */

protected Source convertString2Source(String param){

  Source src;

  try {

    src=uriResolver.resolve(param,null);

  }

 catch (  TransformerException e) {

    src=null;

  }

  if (src == null) {

    src=new StreamSource(new File(param));

  }

  return src;

}

Location: FopServlet.java

Content: 

/** 

 * {@inheritDoc}

 */

public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException {

  try {

    String foParam=request.getParameter(FO_REQUEST_PARAM);

    String xmlParam=request.getParameter(XML_REQUEST_PARAM);

    String xsltParam=request.getParameter(XSLT_REQUEST_PARAM);

    if (foParam != null) {

      renderFO(foParam,response);

    }

 else     if ((xmlParam != null) && (xsltParam != null)) {

      renderXML(xmlParam,xsltParam,response);

    }

 else {

      response.setContentType("text/html");

      PrintWriter out=response.getWriter();

      out.println("<html><head><title>Error</title></head>\n" + "<body><h1>FopServlet Error</h1><h3>No 'fo' " + "request param given.</body></html>");

    }

  }

 catch (  Exception ex) {

    throw new ServletException(ex);

  }

}

Location: FopServlet.java

Content: 

/** 

 * @return a new FOUserAgent for FOP 

 */

protected FOUserAgent getFOUserAgent(){

  FOUserAgent userAgent=fopFactory.newFOUserAgent();

  return userAgent;

}

Location: FopServlet.java

Content: 

/** 

 * Renders an XSL-FO file into a PDF file. The PDF is written to a byte array that is returned as the method's result.

 * @param fo the XSL-FO file

 * @param response HTTP response object

 * @throws FOPException If an error occurs during the rendering of theXSL-FO

 * @throws TransformerException If an error occurs while parsing the inputfile

 * @throws IOException In case of an I/O problem

 */

protected void renderFO(String fo,HttpServletResponse response) throws FOPException, TransformerException, IOException {

  Source foSrc=convertString2Source(fo);

  Transformer transformer=this.transFactory.newTransformer();

  transformer.setURIResolver(this.uriResolver);

  render(foSrc,transformer,response);

}

Location: FopServlet.java

Content: 

/** 

 * Renders an XML file into a PDF file by applying a stylesheet that converts the XML to XSL-FO. The PDF is written to a byte array that is returned as the method's result.

 * @param xml the XML file

 * @param xslt the XSLT file

 * @param response HTTP response object

 * @throws FOPException If an error occurs during the rendering of theXSL-FO

 * @throws TransformerException If an error occurs during XSLtransformation

 * @throws IOException In case of an I/O problem

 */

protected void renderXML(String xml,String xslt,HttpServletResponse response) throws FOPException, TransformerException, IOException {

  Source xmlSrc=convertString2Source(xml);

  Source xsltSrc=convertString2Source(xslt);

  Transformer transformer=this.transFactory.newTransformer(xsltSrc);

  transformer.setURIResolver(this.uriResolver);

  render(xmlSrc,transformer,response);

}

Location: FopServlet.java

Content: 

private void sendPDF(byte[] content,HttpServletResponse response) throws IOException {

  response.setContentType("application/pdf");

  response.setContentLength(content.length);

  response.getOutputStream().write(content);

  response.getOutputStream().flush();

}

