Location: URISpecification.java

Content: 

private static void appendEscape(StringBuffer sb,byte b){

  sb.append('%').append(HEX_DIGITS[(b >> 4) & 0x0f]).append(HEX_DIGITS[(b >> 0) & 0x0f]);

}

Location: URISpecification.java

Content: 

/** 

 * Escapes any illegal URI character in a given URI, for example, it escapes a space to "%20". Note: This method does not "parse" the URI and therefore does not treat the individual components (user-info, path, query etc.) individually.

 * @param uri the URI to inspect

 * @return the escaped URI

 */

public static String escapeURI(String uri){

  uri=getURL(uri);

  StringBuffer sb=new StringBuffer();

  for (int i=0, c=uri.length(); i < c; i++) {

    char ch=uri.charAt(i);

    if (ch == '%') {

      if (i < c - 3 && isHexDigit(uri.charAt(i + 1)) && isHexDigit(uri.charAt(i + 2))) {

        sb.append(ch);

        continue;

      }

    }

    if (isReserved(ch) || isUnreserved(ch)) {

      sb.append(ch);

    }

 else {

      try {

        byte[] utf8=Character.toString(ch).getBytes("UTF-8");

        for (        byte anUtf8 : utf8) {

          appendEscape(sb,anUtf8);

        }

      }

 catch (      UnsupportedEncodingException e) {

        throw new Error("Incompatible JVM. UTF-8 not supported.");

      }

    }

  }

  return sb.toString();

}

Location: URISpecification.java

Content: 

/** 

 * Get the URL string from a wrapped URL.

 * @param href the input wrapped URL

 * @return the raw URL

 */

public static String getURL(String href){

  href=href.trim();

  if (href.startsWith("url(") && (href.indexOf(")") != -1)) {

    href=href.substring(4,href.lastIndexOf(")")).trim();

    if (href.startsWith("'") && href.endsWith("'")) {

      href=href.substring(1,href.length() - 1);

    }

 else     if (href.startsWith("\"") && href.endsWith("\"")) {

      href=href.substring(1,href.length() - 1);

    }

  }

 else {

  }

  return href;

}

Location: URISpecification.java

Content: 

private static boolean isAlpha(char ch){

  return (ch >= 'A' && ch <= 'Z') || (ch >= 'a' && ch <= 'z');

}

Location: URISpecification.java

Content: 

private static boolean isReserved(char ch){

  if (RESERVED.indexOf(ch) >= 0) {

    return true;

  }

 else   if ('#' == ch) {

    return true;

  }

  return false;

}

Location: URISpecification.java

Content: 

private static boolean isUnreserved(char ch){

  if (isDigit(ch) || isAlpha(ch)) {

    return true;

  }

 else   if ("_-!.~\'()*".indexOf(ch) >= 0) {

    return true;

  }

  return false;

}

Location: URISpecification.java

Content: 

private URISpecification(){

}

