Location: RtfListTable.java

Content: 

/** 

 * Add List

 * @param list RtfList to add

 * @return number of lists in the table after adding

 */

public int addList(RtfList list){

  if (lists == null) {

    lists=new LinkedList();

  }

  lists.add(list);

  return lists.size();

}

Location: RtfListTable.java

Content: 

/** 

 * Add list style

 * @param ls ListStyle to set

 * @return number of styles after adding

 */

public int addRtfListStyle(RtfListStyle ls){

  styles.add(ls);

  return styles.size();

}

Location: RtfListTable.java

Content: 

/** 

 * RtfListTable Constructor: sets the number of the list, and allocates for the RtfAttributes

 * @param parent RtfContainer holding this RtfListTable

 * @param w Writer

 * @param num number of the list in the document

 * @param attrs attributes of new RtfListTable

 * @throws IOException for I/O problems

 */

public RtfListTable(RtfContainer parent,Writer w,Integer num,RtfAttributes attrs) throws IOException {

  super(parent,w,attrs);

  styles=new LinkedList();

}

Location: RtfListTable.java

Content: 

private void writeListTableEntry(RtfList list) throws IOException {

  writeGroupMark(true);

  writeControlWordNS(LIST);

  writeOneAttributeNS(LIST_TEMPLATE_ID,list.getListTemplateId().toString());

  writeOneAttributeNS(LIST,attrib.getValue(LIST));

  writeGroupMark(true);

  writeControlWordNS(LIST_LEVEL);

  writeOneAttributeNS(LIST_JUSTIFICATION,attrib.getValue(LIST_JUSTIFICATION));

  writeOneAttributeNS(LIST_FOLLOWING_CHAR,attrib.getValue(LIST_FOLLOWING_CHAR));

  writeOneAttributeNS(LIST_SPACE,0);

  writeOneAttributeNS(LIST_INDENT,attrib.getValue(LIST_INDENT));

  RtfListItem item=(RtfListItem)list.getChildren().get(0);

  if (item != null) {

    item.getRtfListStyle().writeLevelGroup(this);

  }

  writeGroupMark(false);

  writeGroupMark(true);

  writeControlWordNS(LIST_NAME);

  writeGroupMark(false);

  writeOneAttributeNS(LIST_ID,list.getListId().toString());

  writeGroupMark(false);

}

