Location: BodyRegion.java

Content: 

/** 

 * Constructor which can read traits directly from an fo:region-body formatting object.

 * @param regionClass the region class (as returned by Region.getNameId())

 * @param regionName the name of the region (as returned by Region.getRegionName())

 * @param parent the parent region viewport

 * @param columnCount the number of columns

 * @param columnGap the gap between columns

 */

public BodyRegion(int regionClass,String regionName,RegionViewport parent,int columnCount,int columnGap){

  super(regionClass,regionName,parent);

  this.columnCount=columnCount;

  this.columnGap=columnGap;

  mainReference=new MainReference(this);

}

Location: BodyRegion.java

Content: 

/** 

 * Constructor which can read traits directly from an fo:region-body formatting object.

 * @param rb the region-body FO node

 * @param parent the parent region viewport

 */

public BodyRegion(RegionBody rb,RegionViewport parent){

  this(rb.getNameId(),rb.getRegionName(),parent,rb.getColumnCount(),rb.getColumnGap());

}

Location: BodyRegion.java

Content: 

/** 

 * Get the before float area.

 * @return the before float area

 */

public BeforeFloat getBeforeFloat(){

  if (beforeFloat == null) {

    beforeFloat=new BeforeFloat();

  }

  return beforeFloat;

}

Location: BodyRegion.java

Content: 

public int getColumnIPD(){

  return (getContentIPD() - (columnCount - 1) * columnGap) / columnCount;

}

Location: BodyRegion.java

Content: 

int getContentIPD(){

  RegionViewport rv=getRegionViewport();

  return getIPD() - rv.getBorderAndPaddingWidthStart() - rv.getBorderAndPaddingWidthEnd();

}

Location: BodyRegion.java

Content: 

/** 

 * Get the footnote area.

 * @return the footnote area

 */

public Footnote getFootnote(){

  if (footnote == null) {

    footnote=new Footnote();

  }

  return footnote;

}

Location: BodyRegion.java

Content: 

/** 

 * Get the main reference area.

 * @return the main reference area

 */

public MainReference getMainReference(){

  return mainReference;

}

Location: BodyRegion.java

Content: 

/** 

 * @return the available BPD in the main reference area after the previous span referenceareas are subtracted.

 */

public int getRemainingBPD(){

  int usedBPD=0;

  List<Span> spans=getMainReference().getSpans();

  int previousSpanCount=spans.size() - 1;

  for (int i=0; i < previousSpanCount; i++) {

    usedBPD+=spans.get(i).getHeight();

  }

  return getBPD() - usedBPD;

}

