Location: IncludeObjectTestCase.java

Content: 

private byte[] defaultIncludeObjectBytes(int tripletDataLength,byte[] nameData){

  byte[] expected=new byte[36];

  byte[] header=new byte[]{0x5A,0x00,0x10,(byte)0xD3,(byte)0xAF,(byte)0xC3,0x00,0x00,0x00};

  System.arraycopy(header,0,expected,0,header.length);

  byte[] lengthBytes=BinaryUtils.convert(35 + tripletDataLength,2);

  expected[1]=lengthBytes[0];

  expected[2]=lengthBytes[1];

  System.arraycopy(nameData,0,expected,9,nameData.length);

  expected[18]=(byte)0x92;

  expected[27]=(byte)0x2D;

  writeOsetTo(expected,29,-1);

  writeOsetTo(expected,32,-1);

  expected[35]=0x01;

  return expected;

}

Location: IncludeObjectTestCase.java

Content: 

/** 

 * Test writeToStream()

 * @throws IOException -

 */

@Test public void testWriteToStream() throws IOException {

  final IncludeObject sut=getSut();

  byte[] expected=defaultIncludeObjectBytes(sut.getTripletDataLength(),sut.getNameBytes());

  testWriteToStreamHelper(sut,expected);

}

Location: IncludeObjectTestCase.java

Content: 

/** 

 * Test writeToStream() - the orientation of the referenced object is a right- handed with a 180 x-axis

 * @throws IOException -

 */

@Test public void testWriteToStreamForOrientation() throws IOException {

  final IncludeObject sut=getSut();

  byte[] expected=defaultIncludeObjectBytes(sut.getTripletDataLength(),sut.getNameBytes());

  expected[25]=(byte)0x5A;

  expected[26]=(byte)0x00;

  expected[27]=(byte)0x87;

  expected[28]=(byte)0x00;

  sut.setObjectAreaOrientation(180);

  testWriteToStreamHelper(sut,expected);

}

Location: IncludeObjectTestCase.java

Content: 

private void testWriteToStreamHelper(IncludeObject sut,byte[] expected) throws IOException {

  final ByteArrayOutputStream baos=new ByteArrayOutputStream();

  sut.writeToStream(baos);

  byte[] actual=baos.toByteArray();

  assertTrue(Arrays.equals(actual,expected));

}

Location: IncludeObjectTestCase.java

Content: 

private static void writeOsetTo(byte[] out,int offset,int oset){

  if (oset > -1) {

    byte[] y=BinaryUtils.convert(oset,3);

    out[offset]=y[0];

    out[offset + 1]=y[1];

    out[offset + 2]=y[2];

  }

 else {

    out[offset]=(byte)0xFF;

    out[offset + 1]=(byte)0xFF;

    out[offset + 2]=(byte)0xFF;

  }

}

