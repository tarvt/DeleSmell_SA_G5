Location: PropertyListMocks.java

Content: 

/** 

 * Overrides with a working mock property the value returned by {@link PropertyList#getBorderPaddingBackgroundProps()}.

 * @param mockPList a mock property list

 */

public static void mockCommonBorderPaddingBackgroundProps(PropertyList mockPList){

  try {

    final CommonBorderPaddingBackground mockCommonBorderPaddingBackground=mock(CommonBorderPaddingBackground.class);

    when(mockPList.getBorderPaddingBackgroundProps()).thenReturn(mockCommonBorderPaddingBackground);

  }

 catch (  PropertyException e) {

    throw new RuntimeException(e);

  }

}

Location: PropertyListMocks.java

Content: 

/** 

 * Overrides with working mock properties the values returned by {@link PropertyList#get(int)} for {@link Constants#PR_COLUMN_NUMBER}, {@link Constants#PR_NUMBER_COLUMNS_SPANNED}, {@link Constants#PR_NUMBER_ROWS_SPANNED} and {@link Constants#PR_BORDER_COLLAPSE}.

 * @param mockPList a mock property list

 */

public static void mockTableProperties(PropertyList mockPList){

  try {

    final Property mockNumberProperty=PropertyMocks.mockNumberProperty();

    when(mockPList.get(Constants.PR_COLUMN_NUMBER)).thenReturn(mockNumberProperty);

    when(mockPList.get(Constants.PR_NUMBER_COLUMNS_SPANNED)).thenReturn(mockNumberProperty);

    when(mockPList.get(Constants.PR_NUMBER_ROWS_SPANNED)).thenReturn(mockNumberProperty);

    final Property borderCollapseProperty=mock(Property.class);

    when(borderCollapseProperty.getEnum()).thenReturn(Constants.EN_SEPARATE);

    when(mockPList.get(Constants.PR_BORDER_COLLAPSE)).thenReturn(borderCollapseProperty);

    final Property writingModeProperty=mock(Property.class);

    when(writingModeProperty.getEnum()).thenReturn(Constants.EN_LR_TB);

    when(mockPList.get(Constants.PR_WRITING_MODE)).thenReturn(writingModeProperty);

  }

 catch (  PropertyException e) {

    throw new RuntimeException(e);

  }

}

Location: PropertyListMocks.java

Content: 

private PropertyListMocks(){

}

