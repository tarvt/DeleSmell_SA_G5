Location: BorderAttributesConverter.java

Content: 

/** 

 * Constructor is private, because it's just a utility class.

 */

private BorderAttributesConverter(){

}

Location: BorderAttributesConverter.java

Content: 

/** 

 * @param iBorderStyle the border style to be converted

 * @return String with the converted border style

 */

public static String convertAttributetoRtf(int iBorderStyle){

  if (iBorderStyle == Constants.EN_NONE) {

    return IBorderAttributes.BORDER_NIL;

  }

 else   if (iBorderStyle == Constants.EN_SOLID) {

    return IBorderAttributes.BORDER_SINGLE_THICKNESS;

  }

 else   if (iBorderStyle == Constants.EN_DOUBLE) {

    return IBorderAttributes.BORDER_DOUBLE;

  }

 else   if (iBorderStyle == Constants.EN_DOTTED) {

    return IBorderAttributes.BORDER_DOTTED;

  }

 else   if (iBorderStyle == Constants.EN_DASHED) {

    return IBorderAttributes.BORDER_DASH;

  }

 else   if (iBorderStyle == Constants.EN_GROOVE) {

    return IBorderAttributes.BORDER_ENGRAVE;

  }

 else   if (iBorderStyle == Constants.EN_RIDGE) {

    return IBorderAttributes.BORDER_EMBOSS;

  }

 else   if (iBorderStyle == Constants.EN_INSET) {

    return IBorderAttributes.BORDER_ENGRAVE;

  }

 else   if (iBorderStyle == Constants.EN_OUTSET) {

    return IBorderAttributes.BORDER_EMBOSS;

  }

 else {

    return IBorderAttributes.BORDER_SINGLE_THICKNESS;

  }

}

Location: BorderAttributesConverter.java

Content: 

/** 

 * Create a border control word in attributes, with border properties as specified in color, style and width.

 * @param border The CommonBorderPaddingBackground object.

 * @param side The START, END, BEFORE, AFTER enum from CommonBorderPaddingBackground.

 * @param attributes The attributes list to set the border control word.

 * @param controlWord The border control word.

 */

public static void makeBorder(CommonBorderPaddingBackground border,int side,RtfAttributes attributes,String controlWord){

  int styleEnum=border.getBorderStyle(side);

  if (styleEnum != Constants.EN_NONE) {

    FOPRtfAttributes attrs=new FOPRtfAttributes();

    attrs.set(IBorderAttributes.BORDER_COLOR,border.getBorderColor(side));

    attrs.set(convertAttributetoRtf(styleEnum));

    attrs.set(IBorderAttributes.BORDER_WIDTH,border.getBorderWidth(side,false) / 50);

    attributes.set(controlWord,attrs);

  }

 else {

    double paddingPt=border.getPadding(side,false,null) / 1000.0;

    int padding=(int)Math.round(paddingPt * FoUnitsConverter.POINT_TO_TWIPS);

    if (padding != 0) {

      if (side == CommonBorderPaddingBackground.BEFORE) {

        attributes.addIntegerValue(padding,RtfText.SPACE_BEFORE);

      }

 else       if (side == CommonBorderPaddingBackground.AFTER) {

        attributes.addIntegerValue(padding,RtfText.SPACE_AFTER);

      }

    }

  }

}

