Location: AbstractNamedAFPObject.java

Content: 

/** 

 * Default constructor

 */

protected AbstractNamedAFPObject(){

}

Location: AbstractNamedAFPObject.java

Content: 

/** 

 * Constructor for the ActiveEnvironmentGroup, this takes a name parameter which should be 8 characters long.

 * @param name the object name

 */

protected AbstractNamedAFPObject(String name){

  this.name=name;

}

Location: AbstractNamedAFPObject.java

Content: 

@Override protected void copySF(byte[] data,byte type,byte category){

  super.copySF(data,type,category);

  byte[] nameData=getNameBytes();

  System.arraycopy(nameData,0,data,9,nameData.length);

}

Location: AbstractNamedAFPObject.java

Content: 

/** 

 * Returns the name as a byte array in EBCIDIC encoding

 * @return the name as a byte array in EBCIDIC encoding

 */

public byte[] getNameBytes(){

  int afpNameLen=getNameLength();

  int nameLen=name.length();

  if (nameLen < afpNameLen) {

    name=(name + "       ").substring(0,afpNameLen);

  }

 else   if (name.length() > afpNameLen) {

    String truncatedName=name.substring(nameLen - afpNameLen,nameLen);

    LOG.warn("Constructor:: name '" + name + "'"+ " truncated to "+ afpNameLen+ " chars"+ " ('"+ truncatedName+ "')");

    name=truncatedName;

  }

  byte[] nameBytes=null;

  try {

    nameBytes=name.getBytes(AFPConstants.EBCIDIC_ENCODING);

  }

 catch (  UnsupportedEncodingException usee) {

    nameBytes=name.getBytes();

    LOG.warn("Constructor:: UnsupportedEncodingException translating the name " + name);

  }

  return nameBytes;

}

Location: AbstractNamedAFPObject.java

Content: 

/** 

 * Returns the name length

 * @return the name length

 */

protected int getNameLength(){

  return DEFAULT_NAME_LENGTH;

}

