Location: ImageProxyPanel.java

Content: 

/** 

 * @return the size of the page plus the border.

 */

public Dimension getMinimumSize(){

  return getPreferredSize();

}

Location: ImageProxyPanel.java

Content: 

/** 

 * @return the size of the page plus the border.

 */

public Dimension getPreferredSize(){

  return size;

}

Location: ImageProxyPanel.java

Content: 

/** 

 * Panel constructor. Doesn't allocate anything until needed.

 * @param renderer the AWTRenderer instance to use for painting

 * @param page initial page number to show

 */

public ImageProxyPanel(AWTRenderer renderer,int page){

  this.renderer=renderer;

  this.page=page;

  try {

    Dimension size=renderer.getPageImageSize(page);

    Insets insets=getInsets();

    size.width+=insets.left + insets.right;

    size.height+=insets.top + insets.bottom;

    this.size=size;

  }

 catch (  Exception e) {

    this.size=new Dimension(10,10);

  }

  setOpaque(false);

}

Location: ImageProxyPanel.java

Content: 

/** 

 * Gets the image data and paints it on screen. Will make calls to getPageImage as required.

 * @param graphics a graphics context

 * @see javax.swing.JComponent#paintComponent(Graphics)

 * @see org.apache.fop.render.java2d.Java2DRenderer#getPageImage(int)

 */

public synchronized void paintComponent(Graphics graphics){

  try {

    if (isOpaque()) {

      graphics.setColor(getBackground());

      graphics.fillRect(0,0,getWidth(),getHeight());

    }

    super.paintComponent(graphics);

    BufferedImage image=null;

    if (imageRef == null || imageRef.get() == null) {

      image=renderer.getPageImage(page);

      imageRef=new SoftReference(image);

    }

 else {

      image=(BufferedImage)imageRef.get();

    }

    if (image != null) {

      int x=(getWidth() - image.getWidth()) / 2;

      int y=(getHeight() - image.getHeight()) / 2;

      graphics.drawImage(image,x,y,image.getWidth(),image.getHeight(),null);

    }

  }

 catch (  FOPException fopEx) {

    fopEx.printStackTrace();

  }

}

Location: ImageProxyPanel.java

Content: 

/** 

 * Sets the number of the page to be displayed and refreshes the display.

 * @param pg the page number

 */

public synchronized void setPage(int pg){

  if (page != pg) {

    page=pg;

    imageRef=null;

    repaint();

  }

}

