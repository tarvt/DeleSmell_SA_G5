Location: TableColumn.java

Content: 

/** 

 * Get the value of the <code>column-number</code> property

 * @return the "column-number" property.

 */

public int getColumnNumber(){

  return columnNumber;

}

Location: TableColumn.java

Content: 

/** 

 * @return value for number-columns-repeated. 

 */

public int getNumberColumnsRepeated(){

  return numberColumnsRepeated;

}

Location: TableColumn.java

Content: 

/** 

 * @return value for number-columns-spanned. 

 */

public int getNumberColumnsSpanned(){

  return numberColumnsSpanned;

}

Location: TableColumn.java

Content: 

/** 

 * Retrieve a property value through its Id; used by from-table-column() function

 * @param propId    the id for the property to retrieve

 * @return the requested Property

 * @throws PropertyException if there is a problem evaluating the property

 */

public Property getProperty(int propId) throws PropertyException {

  return this.pList.get(propId);

}

Location: TableColumn.java

Content: 

/** 

 * Returns  {@code true} if this column is made of header cells.

 * @return {@code true} if cells in this column are like TH cells in HTML

 */

public boolean isHeader(){

  return isHeader;

}

Location: TableColumn.java

Content: 

/** 

 * Indicates whether this table-column has been created as default column for this table in case no table-columns have been defined. Note that this only used to provide better user feedback (see ColumnSetup).

 * @return true if this table-column has been created as default column

 */

public boolean isImplicitColumn(){

  return implicitColumn;

}

Location: TableColumn.java

Content: 

/** 

 * Clear the reference to the PropertyList (retained for from-table-column())

 */

protected void releasePropertyList(){

  this.pList=null;

}

Location: TableColumn.java

Content: 

void setCollapsedBorders(CollapsingBorderModel collapsingBorderModel){

  this.collapsingBorderModel=collapsingBorderModel;

  setCollapsedBorders();

}

Location: TableColumn.java

Content: 

/** 

 * Used for setting the column-number for an implicit column

 * @param columnNumber the number to set

 */

protected void setColumnNumber(int columnNumber){

  this.columnNumber=columnNumber;

}

Location: TableColumn.java

Content: 

/** 

 * Sets the column width.

 * @param columnWidth the column width

 */

public void setColumnWidth(Length columnWidth){

  this.columnWidth=columnWidth;

}

Location: TableColumn.java

Content: 

/** 

 * Create a TableColumn instance with the given  {@link FONode}as parent.

 * @param parent {@link FONode} that is the parent of this object

 */

public TableColumn(FONode parent){

  this(parent,false);

}

Location: TableColumn.java

Content: 

/** 

 * Create a TableColumn instance with the given  {@link FONode}as parent

 * @param parent FONode that is the parent of this object

 * @param implicit true if this table-column has automatically been created (does notcorrespond to an explicit fo:table-column in the input document)

 */

public TableColumn(FONode parent,boolean implicit){

  super(parent);

  this.implicitColumn=implicit;

}

