Location: GlyphPositioningSubtable.java

Content: 

/** 

 * Instantiate a <code>GlyphPositioningSubtable</code>.

 * @param id subtable identifier

 * @param sequence subtable sequence

 * @param flags subtable flags

 * @param format subtable format

 * @param coverage subtable coverage table

 */

protected GlyphPositioningSubtable(String id,int sequence,int flags,int format,GlyphCoverageTable coverage){

  super(id,sequence,flags,format,coverage);

}

Location: GlyphPositioningSubtable.java

Content: 

/** 

 * Apply positioning using specified state and subtable array. For each position in input sequence, apply subtables in order until some subtable applies or none remain. If no subtable applied or no input was consumed for a given position, then apply default action (no adjustments and advance). If <code>sequenceIndex</code> is non-negative, then apply subtables only when current position matches <code>sequenceIndex</code> in relation to the starting position. Furthermore, upon successful application at <code>sequenceIndex</code>, then discontinue processing the remaining

 * @param ps positioning state

 * @param sta array of subtables to apply

 * @param sequenceIndex if non negative, then apply subtables only at specified sequence index

 * @return true if a non-zero adjustment occurred

 */

public static final boolean position(GlyphPositioningState ps,GlyphPositioningSubtable[] sta,int sequenceIndex){

  int sequenceStart=ps.getPosition();

  boolean appliedOneShot=false;

  while (ps.hasNext()) {

    boolean applied=false;

    if (!appliedOneShot && ps.maybeApplicable()) {

      for (int i=0, n=sta.length; !applied && (i < n); i++) {

        if (sequenceIndex < 0) {

          applied=ps.apply(sta[i]);

        }

 else         if (ps.getPosition() == (sequenceStart + sequenceIndex)) {

          applied=ps.apply(sta[i]);

          if (applied) {

            appliedOneShot=true;

          }

        }

      }

    }

    if (!applied || !ps.didConsume()) {

      ps.applyDefault();

    }

    ps.next();

  }

  return ps.getAdjusted();

}

Location: GlyphPositioningSubtable.java

Content: 

/** 

 * Apply positioning.

 * @param gs input glyph sequence

 * @param script tag

 * @param language tag

 * @param feature tag

 * @param fontSize the font size

 * @param sta subtable array

 * @param widths array

 * @param adjustments array (receives output adjustments)

 * @param sct script context tester

 * @return true if a non-zero adjustment occurred

 */

public static final boolean position(GlyphSequence gs,String script,String language,String feature,int fontSize,GlyphPositioningSubtable[] sta,int[] widths,int[][] adjustments,ScriptContextTester sct){

synchronized (STATE) {

    return position(STATE.reset(gs,script,language,feature,fontSize,widths,adjustments,sct),sta,-1);

  }

}

