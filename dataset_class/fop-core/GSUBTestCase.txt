Location: GSUBTestCase.java

Content: 

private void assertSameGlyphs(GlyphSequence gs1,GlyphSequence gs2){

  assertNotNull(gs1);

  assertNotNull(gs2);

  IntBuffer gb1=gs1.getGlyphs();

  IntBuffer gb2=gs2.getGlyphs();

  assertEquals("unequal glyph count",gb1.limit(),gb2.limit());

  for (int i=0; i < gb1.limit(); i++) {

    int g1=gb1.get(i);

    int g2=gb2.get(i);

    assertEquals("unequal glyph code",g1,g2);

  }

}

Location: GSUBTestCase.java

Content: 

private GlyphSubstitutionSubtable[] findGSUBSubtables(GlyphSubstitutionTable gsub,String script,String language,String feature,String lid){

  LookupTable lt=gsub.getLookupTable(lid);

  if (lt != null) {

    return (GlyphSubstitutionSubtable[])lt.getSubtables();

  }

 else {

    return null;

  }

}

Location: GSUBTestCase.java

Content: 

private ScriptContextTester findScriptContextTester(String script,String language,String feature){

  return this;

}

Location: GSUBTestCase.java

Content: 

public GlyphContextTester getTester(String feature){

  return this;

}

Location: GSUBTestCase.java

Content: 

/** 

 * Perform substitutions on all test data in test specification TS.

 * @param ts test specification

 */

private void performSubstitutions(Object[][] ts){

  assert ts.length > 0;

  Object[] tp=ts[0];

  for (int i=1; i < ts.length; i++) {

    performSubstitutions(tp,ts[i]);

  }

}

Location: GSUBTestCase.java

Content: 

/** 

 * Perform substitutions on all test data TD using test parameters TP.

 * @param tp test parameters

 * @param td test data

 */

private void performSubstitutions(Object[] tp,Object[] td){

  assert tp.length > 0;

  if (td.length > 5) {

    String fid=(String)td[0];

    String lid=(String)td[1];

    String script=(String)td[2];

    String language=(String)td[3];

    String feature=(String)td[4];

    TTXFile tf=findTTX(fid);

    assertTrue(tf != null);

    GlyphSubstitutionTable gsub=tf.getGSUB();

    assertTrue(gsub != null);

    GlyphSubstitutionSubtable[] sta=findGSUBSubtables(gsub,script,language,feature,lid);

    assertTrue(sta != null);

    assertTrue(sta.length > 0);

    ScriptContextTester sct=findScriptContextTester(script,language,feature);

    String[][][] tia=(String[][][])td[5];

    for (    String[][] ti : tia) {

      if (ti != null) {

        if (ti.length > 1) {

          String[] igia=ti[0];

          String[] ogia=ti[1];

          GlyphSequence igs=tf.getGlyphSequence(igia);

          GlyphSequence ogs=tf.getGlyphSequence(ogia);

          GlyphSequence tgs=GlyphSubstitutionSubtable.substitute(igs,script,language,feature,sta,sct);

          assertSameGlyphs(ogs,tgs);

        }

      }

    }

  }

}

Location: GSUBTestCase.java

Content: 

@Test public void testCreateClassTable(){

  GlyphCoverageTable coverageTable=GlyphCoverageTable.createCoverageTable(null);

  GlyphClassTable classTable=GlyphClassTable.createClassTable(Collections.singletonList(coverageTable));

  assertNotNull(classTable);

}

Location: GSUBTestCase.java

Content: 

@Test public void testGSUBAlternate() throws Exception {

  performSubstitutions(GSUBData.ltAlternate);

}

Location: GSUBTestCase.java

Content: 

@Test public void testGSUBChainedContextual() throws Exception {

  performSubstitutions(GSUBData.ltChainedContextual);

}

Location: GSUBTestCase.java

Content: 

@Test public void testGSUBContextual() throws Exception {

  performSubstitutions(GSUBData.ltContextual);

}

Location: GSUBTestCase.java

Content: 

@Test public void testGSUBLigature() throws Exception {

  performSubstitutions(GSUBData.ltLigature);

}

Location: GSUBTestCase.java

Content: 

@Test public void testGSUBMultiple() throws Exception {

  performSubstitutions(GSUBData.ltMultiple);

}

Location: GSUBTestCase.java

Content: 

@Test public void testGSUBSingle() throws Exception {

  performSubstitutions(GSUBData.ltSingle);

}

Location: GSUBTestCase.java

Content: 

public boolean test(String script,String language,String feature,GlyphSequence gs,int index,int flags){

  return true;

}

