Location: ColorSpaceCache.java

Content: 

/** 

 * Default constructor

 * @param resourceResolver uri resolver

 */

public ColorSpaceCache(InternalResourceResolver resourceResolver){

  this.resourceResolver=resourceResolver;

}

Location: ColorSpaceCache.java

Content: 

/** 

 * Create (if needed) and return an ICC ColorSpace instance. The ICC profile source is taken from the src attribute of the color-profile FO element. If the ICC ColorSpace is not yet in the cache a new one is created and stored in the cache. The FOP URI resolver is used to try and locate the ICC file. If that fails null is returned.

 * @param profileName the profile name

 * @param iccProfileSrc ICC Profile source to return a ColorSpace

 * @param renderingIntent overriding rendering intent

 * @return ICC ColorSpace object or null if ColorSpace could not be created

 */

public ColorSpace get(String profileName,String iccProfileSrc,RenderingIntent renderingIntent){

  String key=profileName + ":" + iccProfileSrc;

  ColorSpace colorSpace=null;

  if (!colorSpaceMap.containsKey(key)) {

    try {

      ICC_Profile iccProfile=null;

      InputStream stream=resourceResolver.getResource(iccProfileSrc);

      if (stream != null) {

        iccProfile=ICC_Profile.getInstance(stream);

      }

 else {

      }

      if (iccProfile != null) {

        colorSpace=new ICCColorSpaceWithIntent(iccProfile,renderingIntent,profileName,iccProfileSrc);

      }

    }

 catch (    Exception e) {

      log.warn("Exception thrown resolving the color space: " + e.getMessage());

    }

    if (colorSpace != null) {

      colorSpaceMap.put(key,colorSpace);

    }

 else {

      log.warn("Color profile '" + iccProfileSrc + "' not found.");

    }

  }

 else {

    colorSpace=colorSpaceMap.get(key);

  }

  return colorSpace;

}

