Location: AFPUnitConverter.java

Content: 

/** 

 * Unit converter

 * @param paintingState the AFP painting state

 */

public AFPUnitConverter(AFPPaintingState paintingState){

  this.paintingState=paintingState;

}

Location: AFPUnitConverter.java

Content: 

/** 

 * Converts millipoint to unit

 * @param mpt millipoint

 * @return transformed point

 */

public float mpt2units(float mpt){

  return mpt / ((float)AFPConstants.DPI_72_MPTS / paintingState.getResolution());

}

Location: AFPUnitConverter.java

Content: 

/** 

 * Converts millipoints to units

 * @param srcPts source points

 * @return transformed points

 */

public int[] mpts2units(float[] srcPts){

  return transformPoints(srcPts,null,true);

}

Location: AFPUnitConverter.java

Content: 

/** 

 * Converts millipoints to units

 * @param srcPts source points

 * @param dstPts destination points

 * @return transformed points

 */

public int[] mpts2units(float[] srcPts,float[] dstPts){

  return transformPoints(srcPts,dstPts,true);

}

Location: AFPUnitConverter.java

Content: 

/** 

 * Converts point to unit

 * @param pt point

 * @return transformed point

 */

public float pt2units(float pt){

  return pt / ((float)AFPConstants.DPI_72 / paintingState.getResolution());

}

Location: AFPUnitConverter.java

Content: 

/** 

 * Converts points to units

 * @param srcPts source points

 * @return transformed points

 */

public int[] pts2units(float[] srcPts){

  return transformPoints(srcPts,null,false);

}

Location: AFPUnitConverter.java

Content: 

/** 

 * Converts points to units

 * @param srcPts source points

 * @param dstPts destination points

 * @return transformed points

 */

public int[] pts2units(float[] srcPts,float[] dstPts){

  return transformPoints(srcPts,dstPts,false);

}

Location: AFPUnitConverter.java

Content: 

private int[] transformPoints(float[] srcPts,float[] dstPts,boolean milli){

  if (dstPts == null) {

    dstPts=new float[srcPts.length];

  }

  AffineTransform at=paintingState.getData().getTransform();

  at.transform(srcPts,0,dstPts,0,srcPts.length / 2);

  int[] coords=new int[srcPts.length];

  for (int i=0; i < srcPts.length; i++) {

    if (!milli) {

      dstPts[i]*=1000;

    }

    coords[i]=Math.round(dstPts[i]);

  }

  return coords;

}

