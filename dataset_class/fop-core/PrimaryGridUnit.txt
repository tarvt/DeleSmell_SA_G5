Location: PrimaryGridUnit.java

Content: 

/** 

 * Add a row.

 * @param row the row to be added

 */

public void addRow(GridUnit[] row){

  if (rows == null) {

    rows=new java.util.ArrayList<GridUnit[]>();

  }

  rows.add(row);

}

Location: PrimaryGridUnit.java

Content: 

/** 

 * Creates a cellLM for the corresponding table-cell. A new one must be created for each new static-content (TODO).

 */

public void createCellLM(){

  cellLM=new TableCellLayoutManager(cell,this);

}

Location: PrimaryGridUnit.java

Content: 

/** 

 * Returns the width of the before-after for the last row-span of this cell. See {@link #getAfterBorderWidth(int,int)}.

 * @param which one of {@link ConditionalBorder#NORMAL}, {@link ConditionalBorder#LEADING_TRAILING} or {@link ConditionalBorder#REST}

 * @return the after border width

 */

public int getAfterBorderWidth(int which){

  return getAfterBorderWidth(getCell().getNumberRowsSpanned() - 1,which);

}

Location: PrimaryGridUnit.java

Content: 

/** 

 * Returns the width of the before-after for the given row-span of this cell. In the separate border model half of the border-separation is included. In the collapsing model only half of the border is counted, since the other half belongs to the following cell; also, the returned value is the maximum of the segments of each applicable grid unit.

 * @param rowIndex index of the span for which the border must be computed, 0-based

 * @param which one of {@link ConditionalBorder#NORMAL}, {@link ConditionalBorder#LEADING_TRAILING} or {@link ConditionalBorder#REST}

 * @return the after border width

 */

public int getAfterBorderWidth(int rowIndex,int which){

  if (isSeparateBorderModel) {

    if (getCell() == null) {

      return 0;

    }

 else {

      CommonBorderPaddingBackground cellBorders=getCell().getCommonBorderPaddingBackground();

switch (which) {

case ConditionalBorder.NORMAL:

case ConditionalBorder.LEADING_TRAILING:

        return cellBorders.getBorderAfterWidth(false) + halfBorderSeparationBPD;

case ConditionalBorder.REST:

      if (cellBorders.getBorderInfo(CommonBorderPaddingBackground.AFTER).getWidth().isDiscard()) {

        return 0;

      }

 else {

        return cellBorders.getBorderAfterWidth(true) + halfBorderSeparationBPD;

      }

default :

    assert false;

  return 0;

}

}

}

 else {

int width=0;

GridUnit[] row=rows.get(rowIndex);

for (GridUnit gu : row) {

width=Math.max(width,gu.getBorderAfter(which).getRetainedWidth());

}

return width / 2;

}

}

Location: PrimaryGridUnit.java

Content: 

/** 

 * Returns the widths of the border-before and -after for this cell. In the separate border model the border-separation is included. In the collapsing model only half of them is counted, since the other halves belong to the neighbouring cells; also, the returned value is the maximum of the segments of each applicable grid unit.

 * @return the sum of the before and after border widths

 */

public int getBeforeAfterBorderWidth(){

  return getBeforeBorderWidth(0,ConditionalBorder.NORMAL) + getAfterBorderWidth(ConditionalBorder.NORMAL);

}

Location: PrimaryGridUnit.java

Content: 

/** 

 * Returns the width of the before-border for the given row-span of this cell. In the separate border model half of the border-separation is included. In the collapsing model only half of the border is counted, since the other half belongs to the preceding cell; also, the returned value is the maximum of the segments of each applicable grid unit.

 * @param rowIndex index of the span for which the border must be computed, 0-based

 * @param which one of {@link ConditionalBorder#NORMAL}, {@link ConditionalBorder#LEADING_TRAILING} or {@link ConditionalBorder#REST}

 * @return the before border width

 */

public int getBeforeBorderWidth(int rowIndex,int which){

  if (isSeparateBorderModel) {

    if (getCell() == null) {

      return 0;

    }

 else {

      CommonBorderPaddingBackground cellBorders=getCell().getCommonBorderPaddingBackground();

switch (which) {

case ConditionalBorder.NORMAL:

case ConditionalBorder.LEADING_TRAILING:

        return cellBorders.getBorderBeforeWidth(false) + halfBorderSeparationBPD;

case ConditionalBorder.REST:

      if (cellBorders.getBorderInfo(CommonBorderPaddingBackground.BEFORE).getWidth().isDiscard()) {

        return 0;

      }

 else {

        return cellBorders.getBorderBeforeWidth(true) + halfBorderSeparationBPD;

      }

default :

    assert false;

  return 0;

}

}

}

 else {

int width=0;

for (GridUnit gu : rows.get(rowIndex)) {

width=Math.max(width,gu.getBorderBefore(which).getRetainedWidth());

}

return width / 2;

}

}

Location: PrimaryGridUnit.java

Content: 

/** 

 * Get cell's layout manager.

 * @return the cell's layout manager

 */

public TableCellLayoutManager getCellLM(){

  assert cellLM != null;

  return cellLM;

}

Location: PrimaryGridUnit.java

Content: 

/** 

 * Returns the index of the column this grid unit belongs to.

 * @return the column index, 0-based

 */

public int getColIndex(){

  return colIndex;

}

Location: PrimaryGridUnit.java

Content: 

/** 

 * @return the length of the cell content 

 */

public int getContentLength(){

  if (contentLength < 0) {

    contentLength=ElementListUtils.calcContentLength(elements);

  }

  return contentLength;

}

Location: PrimaryGridUnit.java

Content: 

/** 

 * Obtain the Knuth elements.

 * @return a list of Knuth elements

 */

public List getElements(){

  return this.elements;

}

Location: PrimaryGridUnit.java

Content: 

/** 

 * {@inheritDoc} 

 */

@Override public PrimaryGridUnit getPrimary(){

  return this;

}

Location: PrimaryGridUnit.java

Content: 

/** 

 * Returns the index of the row this grid unit belongs to. This is the index, in the enclosing table part, of the first row spanned by the cell. Note that if the table has several table-body children, then the index grows continuously across them; they are considered to form one single part, the "body of the table".

 * @return the index of the row this grid unit belongs to, 0-based.

 */

public int getRowIndex(){

  return rowIndex;

}

Location: PrimaryGridUnit.java

Content: 

/** 

 * Returns the grid units belonging to the same span as this one.

 * @return a list of GridUnit[], each array corresponds to a row

 */

public List<GridUnit[]> getRows(){

  return this.rows;

}

Location: PrimaryGridUnit.java

Content: 

/** 

 * Returns the widths of the start- and end-borders of the span this grid unit belongs to.

 * @return a two-element array containing the widths of the start-border then theend-border

 */

public int[] getStartEndBorderWidths(){

  int[] widths=new int[2];

  if (getCell() == null) {

    return widths;

  }

 else   if (getCell().getTable().isSeparateBorderModel()) {

    widths[0]=getCell().getCommonBorderPaddingBackground().getBorderStartWidth(false);

    widths[1]=getCell().getCommonBorderPaddingBackground().getBorderEndWidth(false);

  }

 else {

    for (    GridUnit[] gridUnits : rows) {

      widths[0]=Math.max(widths[0],gridUnits[0].borderStart.getBorderInfo().getRetainedWidth());

      widths[1]=Math.max(widths[1],gridUnits[gridUnits.length - 1].borderEnd.getBorderInfo().getRetainedWidth());

    }

  }

  return widths;

}

Location: PrimaryGridUnit.java

Content: 

/** 

 * @return true if this cell spans over more than one grid unit. 

 */

public boolean hasSpanning(){

  return (getCell().getNumberColumnsSpanned() > 1) || (getCell().getNumberRowsSpanned() > 1);

}

Location: PrimaryGridUnit.java

Content: 

/** 

 * {@inheritDoc} 

 */

@Override public boolean isPrimary(){

  return true;

}

Location: PrimaryGridUnit.java

Content: 

/** 

 * Creates a new primary grid unit.

 * @param cell table cell which occupies this grid unit

 * @param colIndex index of the column this grid unit belongs to, zero-based

 */

PrimaryGridUnit(TableCell cell,int colIndex){

  super(cell,0,0);

  this.colIndex=colIndex;

  this.isSeparateBorderModel=cell.getTable().isSeparateBorderModel();

  this.halfBorderSeparationBPD=cell.getTable().getBorderSeparation().getBPD().getLength().getValue() / 2;

}

Location: PrimaryGridUnit.java

Content: 

/** 

 * Sets the Knuth elements for the table cell containing this grid unit.

 * @param elements a list of ListElement (?)

 */

public void setElements(List elements){

  this.elements=elements;

}

Location: PrimaryGridUnit.java

Content: 

/** 

 * Don't use, reserved for TableCellLM. TODO

 * @param keep the keep strength

 */

public void setKeepWithNext(Keep keep){

  this.keepWithNext=keep;

}

Location: PrimaryGridUnit.java

Content: 

/** 

 * Don't use, reserved for TableCellLM. TODO

 * @param keep the keep strength

 */

public void setKeepWithPrevious(Keep keep){

  this.keepWithPrevious=keep;

}

Location: PrimaryGridUnit.java

Content: 

void setRowIndex(int rowIndex){

  this.rowIndex=rowIndex;

}

