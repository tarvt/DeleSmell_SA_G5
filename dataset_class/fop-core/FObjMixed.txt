Location: FObjMixed.java

Content: 

/** 

 * Creates block-pointers between subsequent FOText nodes in the same Block. (used for handling text-transform) TODO: !! Revisit: does not take into account fo:characters !!

 * @throws FOPException if there is a problem during processing

 */

private void flushText() throws FOPException {

  if (ft != null) {

    FOText lft=ft;

    ft=null;

    if (getNameId() == FO_BLOCK) {

      lft.createBlockPointers((org.apache.fop.fo.flow.Block)this);

      this.lastFOTextProcessed=lft;

    }

 else     if (getNameId() != FO_MARKER && getNameId() != FO_TITLE && getNameId() != FO_BOOKMARK_TITLE) {

      FONode fo=parent;

      int foNameId=fo.getNameId();

      while (foNameId != FO_BLOCK && foNameId != FO_MARKER && foNameId != FO_TITLE && foNameId != FO_BOOKMARK_TITLE && foNameId != FO_PAGE_SEQUENCE) {

        fo=fo.getParent();

        foNameId=fo.getNameId();

      }

      if (foNameId == FO_BLOCK) {

        lft.createBlockPointers((org.apache.fop.fo.flow.Block)fo);

        ((FObjMixed)fo).lastFOTextProcessed=lft;

      }

 else       if (foNameId == FO_PAGE_SEQUENCE && lft.willCreateArea()) {

        log.error("Could not create block pointers." + " FOText w/o Block ancestor.");

      }

    }

    this.addChildNode(lft);

  }

}

Location: FObjMixed.java

Content: 

/** 

 * Base constructor

 * @param parent FONode that is the parent of this object

 */

protected FObjMixed(FONode parent){

  super(parent);

}

Location: FObjMixed.java

Content: 

/** 

 * Handles white-space for the node that is passed in, starting at its current text-node (used by  {@link org.apache.fop.fo.flow.RetrieveMarker}to trigger 'end-of-node' white-space handling)

 * @param fobj  the node for which to handle white-space

 * @param nextChild the next child to be added

 */

protected static void handleWhiteSpaceFor(FObjMixed fobj,FONode nextChild){

  fobj.getBuilderContext().getXMLWhiteSpaceHandler().handleWhiteSpace(fobj,fobj.currentTextNode,nextChild);

}

Location: FObjMixed.java

Content: 

private void sendCharacters() throws FOPException {

  if (this.currentTextNode != null) {

    FONodeIterator nodeIter=this.getChildNodes(this.currentTextNode);

    FONode node;

    while (nodeIter.hasNext()) {

      node=nodeIter.next();

      assert (node instanceof FOText || node.getNameId() == FO_CHARACTER);

      if (node.getNameId() == FO_CHARACTER) {

        node.startOfNode();

      }

      node.endOfNode();

    }

  }

  this.currentTextNode=null;

}

