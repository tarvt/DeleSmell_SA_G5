Location: FOPGVTFontFamily.java

Content: 

public FOPGVTFont deriveFont(float size,AttributedCharacterIterator aci){

  return deriveFont(size,aci.getAttributes());

}

Location: FOPGVTFontFamily.java

Content: 

public FOPGVTFont deriveFont(float size,@SuppressWarnings("rawtypes") Map attrs){

  Float fontWeight=(Float)attrs.get(TextAttribute.WEIGHT);

  int weight=fontWeight == null ? fontTriplet.getWeight() : ACIUtils.toCSSWeight(fontWeight);

  Float fontStyle=(Float)attrs.get(TextAttribute.POSTURE);

  String style=fontStyle == null ? fontTriplet.getStyle() : ACIUtils.toStyle(fontStyle);

  FontTriplet triplet=fontInfo.fontLookup(fontTriplet.getName(),style,weight);

  return new FOPGVTFont(fontInfo.getFontInstance(triplet,(int)(size * 1000)),this);

}

Location: FOPGVTFontFamily.java

Content: 

public FOPGVTFontFamily(FontInfo fontInfo,String familyName,FontTriplet triplet,GVTFontFace fontFace){

  this.fontInfo=fontInfo;

  this.fontTriplet=triplet;

  this.familyName=familyName;

  this.fontFace=fontFace;

}

Location: FOPGVTFontFamily.java

Content: 

public String getFamilyName(){

  return familyName;

}

Location: FOPGVTFontFamily.java

Content: 

public GVTFontFace getFontFace(){

  return fontFace;

}

Location: FOPGVTFontFamily.java

Content: 

public FontInfo getFontInfo(){

  return fontInfo;

}

Location: FOPGVTFontFamily.java

Content: 

public String getFontKey(){

  return fontInfo.getInternalFontKey(fontTriplet);

}

Location: FOPGVTFontFamily.java

Content: 

public FontTriplet getFontTriplet(){

  return fontTriplet;

}

Location: FOPGVTFontFamily.java

Content: 

public boolean isComplex(){

  return false;

}

