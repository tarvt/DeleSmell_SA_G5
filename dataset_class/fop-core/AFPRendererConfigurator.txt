Location: AFPRendererConfigurator.java

Content: 

/** 

 * Default constructor

 * @param userAgent user agent

 */

public AFPRendererConfigurator(FOUserAgent userAgent,RendererConfigParser rendererConfigParser){

  super(userAgent,rendererConfigParser);

  eventProducer=AFPEventProducer.Provider.get(userAgent.getEventBroadcaster());

}

Location: AFPRendererConfigurator.java

Content: 

private void configure(AFPDocumentHandler documentHandler,AFPRendererConfig config){

  Boolean colorImages=config.isColorImages();

  if (colorImages != null) {

    documentHandler.setColorImages(colorImages);

    if (colorImages) {

      documentHandler.setCMYKImagesSupported(config.isCmykImagesSupported());

    }

 else {

      documentHandler.setBitsPerPixel(config.getBitsPerPixel());

    }

  }

  if (config.getDitheringQuality() != null) {

    documentHandler.setDitheringQuality(config.getDitheringQuality());

  }

  if (config.isNativeImagesSupported() != null) {

    documentHandler.setNativeImagesSupported(config.isNativeImagesSupported());

  }

  if (config.getShadingMode() != null) {

    documentHandler.setShadingMode(config.getShadingMode());

  }

  if (config.getResolution() != null) {

    documentHandler.setResolution(config.getResolution());

  }

  if (config.isWrapPseg() != null) {

    documentHandler.setWrapPSeg(config.isWrapPseg());

  }

  if (config.isGocaWrapPseg() != null) {

    documentHandler.setWrapGocaPSeg(config.isGocaWrapPseg());

  }

  if (config.isFs45() != null) {

    documentHandler.setFS45(config.isFs45());

  }

  if (config.allowJpegEmbedding() != null) {

    documentHandler.canEmbedJpeg(config.allowJpegEmbedding());

  }

  if (config.getBitmapEncodingQuality() != null) {

    documentHandler.setBitmapEncodingQuality(config.getBitmapEncodingQuality());

  }

  if (config.getLineWidthCorrection() != null) {

    documentHandler.setLineWidthCorrection(config.getLineWidthCorrection());

  }

  if (config.isGocaEnabled() != null) {

    documentHandler.setGOCAEnabled(config.isGocaEnabled());

  }

  if (config.isStrokeGocaText() != null) {

    documentHandler.setStrokeGOCAText(config.isStrokeGocaText());

  }

  if (config.getDefaultResourceGroupUri() != null) {

    documentHandler.setDefaultResourceGroupUri(config.getDefaultResourceGroupUri());

  }

  AFPResourceLevelDefaults resourceLevelDefaults=config.getResourceLevelDefaults();

  if (resourceLevelDefaults != null) {

    documentHandler.setResourceLevelDefaults(resourceLevelDefaults);

  }

}

Location: AFPRendererConfigurator.java

Content: 

private List<AFPFontInfo> createFontsList(AFPFontConfig fontConfig,String mimeType) throws FOPException, IOException {

  List<AFPFontInfo> afpFonts=new ArrayList<AFPFontInfo>();

  for (  AFPFontConfigData config : fontConfig.getFontConfig()) {

    afpFonts.add(config.getFontInfo(userAgent.getFontManager().getResourceResolver(),eventProducer));

  }

  return afpFonts;

}

Location: AFPRendererConfigurator.java

Content: 

@Override protected FontCollection getCustomFontCollection(InternalResourceResolver uriResolverWrapper,String mimeType) throws FOPException {

  AFPRendererConfig config=(AFPRendererConfig)getRendererConfig(mimeType);

  if (config != null) {

    try {

      return new AFPFontCollection(userAgent.getEventBroadcaster(),createFontsList(config.getFontInfoConfig(),mimeType));

    }

 catch (    IOException e) {

      eventProducer.invalidConfiguration(this,e);

      LogUtil.handleException(log,e,userAgent.validateUserConfigStrictly());

    }

catch (    IllegalArgumentException iae) {

      eventProducer.invalidConfiguration(this,iae);

      LogUtil.handleException(log,iae,userAgent.validateUserConfigStrictly());

    }

  }

  return new AFPFontCollection(userAgent.getEventBroadcaster(),null);

}

