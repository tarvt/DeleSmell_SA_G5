Location: Java2DUtil.java

Content: 

/** 

 * Builds a default  {@link FontInfo} object for use with output formats using the Java2Dfont setup.

 * @param fontInfo the font info object to populate

 * @param userAgent the user agent

 * @return the populated font information object

 */

public static FontInfo buildDefaultJava2DBasedFontInfo(FontInfo fontInfo,FOUserAgent userAgent){

  Java2DFontMetrics java2DFontMetrics=new Java2DFontMetrics();

  FontManager fontManager=userAgent.getFontManager();

  FontCollection[] fontCollections=new FontCollection[]{new org.apache.fop.render.java2d.Base14FontCollection(java2DFontMetrics),new InstalledFontCollection(java2DFontMetrics)};

  FontInfo fi=(fontInfo != null ? fontInfo : new FontInfo());

  fi.setEventListener(new FontEventAdapter(userAgent.getEventBroadcaster()));

  fontManager.setup(fi,fontCollections);

  return fi;

}

Location: Java2DUtil.java

Content: 

/** 

 * Creates a  {@link GlyphVector} using glyph indexes instead of characters. To correctly support the advanced fontfeatures we have to build the GlyphVector passing the glyph indexes instead of the characters. This because some of the chars in text might have been replaced by an internal font representation during GlyphMapping.processWordMapping. Eg 'fi' replaced with the corresponding character in the font ligatures table (GSUB).

 */

private static GlyphVector createGlyphVectorMultiByteFont(String text,Graphics2D g2d,MultiByteFont multiByteFont){

  int[] glyphCodes=new int[text.length()];

  int currentIdx=0;

  for (  int cp : CharUtilities.codepointsIter(text)) {

    glyphCodes[currentIdx++]=multiByteFont.findGlyphIndex(cp);

  }

  if (currentIdx != text.length()) {

    glyphCodes=Arrays.copyOf(glyphCodes,currentIdx);

  }

  return g2d.getFont().createGlyphVector(g2d.getFontRenderContext(),glyphCodes);

}

Location: Java2DUtil.java

Content: 

/** 

 * Creates a  {@link GlyphVector} using characters. Filters out non-bmp characters.

 */

private static GlyphVector createGlyphVector(String text,Graphics2D g2d){

  StringBuilder sb=new StringBuilder(text.length());

  for (  int cp : CharUtilities.codepointsIter(text)) {

    sb.appendCodePoint(cp <= 0xFFFF ? cp : Typeface.NOT_FOUND);

  }

  return g2d.getFont().createGlyphVector(g2d.getFontRenderContext(),sb.toString());

}

Location: Java2DUtil.java

Content: 

/** 

 * Creates an instance of  {@link GlyphVector} that correctly handle surrogate pairs and advanced font features suchas GSUB/GPOS/GDEF.

 * @param text Text to render

 * @param g2d  the target Graphics2D instance

 * @param font the font instance

 * @param fontInfo the font information

 * @return an instance of {@link GlyphVector}

 */

public static GlyphVector createGlyphVector(String text,Graphics2D g2d,Font font,FontInfo fontInfo){

  MultiByteFont multiByteFont=getMultiByteFont(font.getFontName(),fontInfo);

  if (multiByteFont == null) {

    return createGlyphVector(text,g2d);

  }

  return createGlyphVectorMultiByteFont(text,g2d,multiByteFont);

}

Location: Java2DUtil.java

Content: 

/** 

 * Returns an instance of  {@link MultiByteFont} for the given font name. This method will try to unwrap containerssuch as  {@link CustomFontMetricsMapper} and {@link LazyFont}

 * @param fontName font key

 * @param fontInfo font information

 * @return An instance of {@link MultiByteFont} or null if it

 */

private static MultiByteFont getMultiByteFont(String fontName,FontInfo fontInfo){

  Typeface tf=fontInfo.getFonts().get(fontName);

  if (tf instanceof CustomFontMetricsMapper) {

    tf=((CustomFontMetricsMapper)tf).getRealFont();

  }

  if (tf instanceof LazyFont) {

    tf=((LazyFont)tf).getRealFont();

  }

  return (tf instanceof MultiByteFont) ? (MultiByteFont)tf : null;

}

Location: Java2DUtil.java

Content: 

private Java2DUtil(){

}

