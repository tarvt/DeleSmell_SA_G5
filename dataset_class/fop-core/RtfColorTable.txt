Location: RtfColorTable.java

Content: 

/** 

 * Adds a color to the table.

 * @param i Identifier of color

 */

private void addColor(Integer i){

  colorIndex.put(i,colorTable.size());

  colorTable.addElement(i);

}

Location: RtfColorTable.java

Content: 

/** 

 * define a named color for getColorNumber(String) 

 */

private void addNamedColor(String name,int colorNumber){

  namedColors.put(name.toLowerCase(),colorNumber);

}

Location: RtfColorTable.java

Content: 

/** 

 * Determines the color level from the identifier.

 * @param identifier Unique color identifier

 * @param color One of the bit moving constants

 * @return Color level in byte size

 */

private int determineColorLevel(int identifier,int color){

  int retVal=(byte)(identifier >> color);

  return retVal < 0 ? retVal + 256 : retVal;

}

Location: RtfColorTable.java

Content: 

/** 

 * Determines a identifier for the color.

 * @param red Color level red

 * @param green Color level green

 * @param blue Color level blue

 * @return Unique identifier of color

 */

private int determineIdentifier(int red,int green,int blue){

  int c=red << RED;

  c+=green << GREEN;

  c+=blue << BLUE;

  return c;

}

Location: RtfColorTable.java

Content: 

/** 

 * Gets the number of color in the color table

 * @param red Color level red

 * @param green Color level green

 * @param blue Color level blue

 * @return The number of the color in the table

 */

public Integer getColorNumber(int red,int green,int blue){

  Integer identifier=determineIdentifier(red,green,blue);

  Object o=colorIndex.get(identifier);

  int retVal;

  if (o == null) {

    addColor(identifier);

    retVal=colorTable.size();

  }

 else {

    retVal=(Integer)o + 1;

  }

  return retVal;

}

Location: RtfColorTable.java

Content: 

/** 

 * @param name a named color

 * @return the RTF number of a named color, or null if name not found

 */

public Integer getColorNumber(String name){

  return ((Integer)namedColors.get(name.toLowerCase()));

}

Location: RtfColorTable.java

Content: 

/** 

 * Constructor.

 */

private RtfColorTable(){

  colorTable=new Vector();

  colorIndex=new Hashtable();

  namedColors=new Hashtable();

  init();

}

Location: RtfColorTable.java

Content: 

/** 

 * Writes the color table in the header.

 * @param header The header container to write in

 * @throws IOException On error

 */

public void writeColors(RtfHeader header) throws IOException {

  if (colorTable == null || colorTable.size() == 0) {

    return;

  }

  header.newLine();

  header.writeGroupMark(true);

  header.write("\\colortbl;");

  int len=colorTable.size();

  for (  Object aColorTable : colorTable) {

    int identifier=(Integer)aColorTable;

    header.newLine();

    header.write("\\red" + determineColorLevel(identifier,RED));

    header.write("\\green" + determineColorLevel(identifier,GREEN));

    header.write("\\blue" + determineColorLevel(identifier,BLUE) + ";");

  }

  header.newLine();

  header.writeGroupMark(false);

}

