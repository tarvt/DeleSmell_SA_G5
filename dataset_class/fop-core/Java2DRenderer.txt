Location: Java2DRenderer.java

Content: 

/** 

 * Clears the ViewportList. Used if the document is reloaded.

 */

public void clearViewportList(){

  pageViewportList.clear();

  setCurrentPageNumber(0);

}

Location: Java2DRenderer.java

Content: 

/** 

 * {@inheritDoc} 

 */

protected RendererContext createRendererContext(int x,int y,int width,int height,Map foreignAttributes){

  RendererContext context=super.createRendererContext(x,y,width,height,foreignAttributes);

  context.setProperty(Java2DRendererContextConstants.JAVA2D_STATE,state);

  return context;

}

Location: Java2DRenderer.java

Content: 

/** 

 * Draw a border segment of an XSL-FO style border.

 * @param lineRect the line defined by its bounding rectangle

 * @param horz true for horizontal border segments, false for vertical border segments

 * @param startOrBefore true for border segments on the start or before edge,false for end or after.

 * @param style the border style (one of Constants.EN_DASHED etc.)

 * @param col the color for the border segment

 * @param g2d the Graphics2D instance to paint to

 */

public static void drawBorderLine(Rectangle2D.Float lineRect,boolean horz,boolean startOrBefore,int style,Color col,Graphics2D g2d){

  float x1=lineRect.x;

  float y1=lineRect.y;

  float x2=x1 + lineRect.width;

  float y2=y1 + lineRect.height;

  float w=lineRect.width;

  float h=lineRect.height;

  if ((w < 0) || (h < 0)) {

    log.error("Negative extent received. Border won't be painted.");

    return;

  }

switch (style) {

case Constants.EN_DASHED:

    g2d.setColor(col);

  if (horz) {

    float unit=Math.abs(2 * h);

    int rep=(int)(w / unit);

    if (rep % 2 == 0) {

      rep++;

    }

    unit=w / rep;

    float ym=y1 + (h / 2);

    BasicStroke s=new BasicStroke(h,BasicStroke.CAP_BUTT,BasicStroke.JOIN_MITER,10.0f,new float[]{unit},0);

    g2d.setStroke(s);

    g2d.draw(new Line2D.Float(x1,ym,x2,ym));

  }

 else {

    float unit=Math.abs(2 * w);

    int rep=(int)(h / unit);

    if (rep % 2 == 0) {

      rep++;

    }

    unit=h / rep;

    float xm=x1 + (w / 2);

    BasicStroke s=new BasicStroke(w,BasicStroke.CAP_BUTT,BasicStroke.JOIN_MITER,10.0f,new float[]{unit},0);

    g2d.setStroke(s);

    g2d.draw(new Line2D.Float(xm,y1,xm,y2));

  }

break;

case Constants.EN_DOTTED:

g2d.setColor(col);

if (horz) {

float unit=Math.abs(2 * h);

int rep=(int)(w / unit);

if (rep % 2 == 0) {

rep++;

}

unit=w / rep;

float ym=y1 + (h / 2);

BasicStroke s=new BasicStroke(h,BasicStroke.CAP_ROUND,BasicStroke.JOIN_MITER,10.0f,new float[]{0,unit},0);

g2d.setStroke(s);

g2d.draw(new Line2D.Float(x1,ym,x2,ym));

}

 else {

float unit=Math.abs(2 * w);

int rep=(int)(h / unit);

if (rep % 2 == 0) {

rep++;

}

unit=h / rep;

float xm=x1 + (w / 2);

BasicStroke s=new BasicStroke(w,BasicStroke.CAP_ROUND,BasicStroke.JOIN_MITER,10.0f,new float[]{0,unit},0);

g2d.setStroke(s);

g2d.draw(new Line2D.Float(xm,y1,xm,y2));

}

break;

case Constants.EN_DOUBLE:

g2d.setColor(col);

if (horz) {

float h3=h / 3;

float ym1=y1 + (h3 / 2);

float ym2=ym1 + h3 + h3;

BasicStroke s=new BasicStroke(h3);

g2d.setStroke(s);

g2d.draw(new Line2D.Float(x1,ym1,x2,ym1));

g2d.draw(new Line2D.Float(x1,ym2,x2,ym2));

}

 else {

float w3=w / 3;

float xm1=x1 + (w3 / 2);

float xm2=xm1 + w3 + w3;

BasicStroke s=new BasicStroke(w3);

g2d.setStroke(s);

g2d.draw(new Line2D.Float(xm1,y1,xm1,y2));

g2d.draw(new Line2D.Float(xm2,y1,xm2,y2));

}

break;

case Constants.EN_GROOVE:

case Constants.EN_RIDGE:

float colFactor=(style == EN_GROOVE ? 0.4f : -0.4f);

if (horz) {

Color uppercol=ColorUtil.lightenColor(col,-colFactor);

Color lowercol=ColorUtil.lightenColor(col,colFactor);

float h3=h / 3;

float ym1=y1 + (h3 / 2);

g2d.setStroke(new BasicStroke(h3));

g2d.setColor(uppercol);

g2d.draw(new Line2D.Float(x1,ym1,x2,ym1));

g2d.setColor(col);

g2d.draw(new Line2D.Float(x1,ym1 + h3,x2,ym1 + h3));

g2d.setColor(lowercol);

g2d.draw(new Line2D.Float(x1,ym1 + h3 + h3,x2,ym1 + h3 + h3));

}

 else {

Color leftcol=ColorUtil.lightenColor(col,-colFactor);

Color rightcol=ColorUtil.lightenColor(col,colFactor);

float w3=w / 3;

float xm1=x1 + (w3 / 2);

g2d.setStroke(new BasicStroke(w3));

g2d.setColor(leftcol);

g2d.draw(new Line2D.Float(xm1,y1,xm1,y2));

g2d.setColor(col);

g2d.draw(new Line2D.Float(xm1 + w3,y1,xm1 + w3,y2));

g2d.setColor(rightcol);

g2d.draw(new Line2D.Float(xm1 + w3 + w3,y1,xm1 + w3 + w3,y2));

}

break;

case Constants.EN_INSET:

case Constants.EN_OUTSET:

colFactor=(style == EN_OUTSET ? 0.4f : -0.4f);

if (horz) {

col=ColorUtil.lightenColor(col,(startOrBefore ? 1 : -1) * colFactor);

g2d.setStroke(new BasicStroke(h));

float ym1=y1 + (h / 2);

g2d.setColor(col);

g2d.draw(new Line2D.Float(x1,ym1,x2,ym1));

}

 else {

col=ColorUtil.lightenColor(col,(startOrBefore ? 1 : -1) * colFactor);

float xm1=x1 + (w / 2);

g2d.setStroke(new BasicStroke(w));

g2d.setColor(col);

g2d.draw(new Line2D.Float(xm1,y1,xm1,y2));

}

break;

case Constants.EN_HIDDEN:

break;

default :

g2d.setColor(col);

if (horz) {

float ym=y1 + (h / 2);

g2d.setStroke(new BasicStroke(h));

g2d.draw(new Line2D.Float(x1,ym,x2,ym));

}

 else {

float xm=x1 + (w / 2);

g2d.setStroke(new BasicStroke(w));

g2d.draw(new Line2D.Float(xm,y1,xm,y2));

}

}

}

Location: Java2DRenderer.java

Content: 

/** 

 * Returns a specific <code>BufferedImage</code> to paint a page image on. This method can be overridden in subclasses to produce different image formats (ex. grayscale or b/w).

 * @param bitmapWidth width of the image in pixels

 * @param bitmapHeight heigth of the image in pixels

 * @return the newly created BufferedImage

 */

protected BufferedImage getBufferedImage(int bitmapWidth,int bitmapHeight){

  return new BufferedImage(bitmapWidth,bitmapHeight,BufferedImage.TYPE_INT_ARGB);

}

Location: Java2DRenderer.java

Content: 

/** 

 * @return The 0-based current page number

 */

public int getCurrentPageNumber(){

  return currentPageNumber;

}

Location: Java2DRenderer.java

Content: 

private static int[] getGlyphOffsets(String s,Font font,TextArea text,int[] letterAdjust){

  int textLen=s.codePointCount(0,s.length());

  int[] offsets=new int[textLen];

  for (int i=0; i < textLen; i++) {

    int c=s.codePointAt(i);

    final int mapped=font.mapCodePoint(c);

    int wordSpace;

    if (CharUtilities.isAdjustableSpace(mapped)) {

      wordSpace=text.getTextWordSpaceAdjust();

    }

 else {

      wordSpace=0;

    }

    int cw=font.getWidth(mapped);

    int ladj=(letterAdjust != null && i < textLen - 1 ? letterAdjust[i + 1] : 0);

    int tls=(i < textLen - 1 ? text.getTextLetterSpaceAdjust() : 0);

    offsets[i]=cw + ladj + tls+ wordSpace;

  }

  return offsets;

}

Location: Java2DRenderer.java

Content: 

/** 

 * {@inheritDoc} 

 */

public Graphics2DAdapter getGraphics2DAdapter(){

  return new Java2DGraphics2DAdapter();

}

Location: Java2DRenderer.java

Content: 

/** 

 * Returns the number of pages available. This method is also part of the Pageable interface.

 * @return The 0-based total number of rendered pages

 * @see java.awt.print.Pageable

 */

public int getNumberOfPages(){

  return pageViewportList.size();

}

Location: Java2DRenderer.java

Content: 

/** 

 * Generates a desired page from the renderer's page viewport list.

 * @param pageNum the 0-based page number to generate

 * @return the <code>java.awt.image.BufferedImage</code> corresponding tothe page or null if the page doesn't exist.

 * @throws FOPException If there's a problem preparing the page image

 */

public BufferedImage getPageImage(int pageNum) throws FOPException {

  return getPageImage(getPageViewport(pageNum));

}

Location: Java2DRenderer.java

Content: 

/** 

 * Generates a desired page from the renderer's page viewport list.

 * @param pageViewport the PageViewport to be rendered

 * @return the <code>java.awt.image.BufferedImage</code> corresponding tothe page or null if the page doesn't exist.

 */

public BufferedImage getPageImage(PageViewport pageViewport){

  this.currentPageViewport=pageViewport;

  try {

    PageBoundaries boundaries=new PageBoundaries(pageViewport.getViewArea().getSize(),pageViewport.getForeignAttributes());

    Rectangle bounds=boundaries.getCropBox();

    Rectangle bleedBox=boundaries.getBleedBox();

    this.pageWidth=(int)Math.round(bounds.getWidth() / 1000f);

    this.pageHeight=(int)Math.round(bounds.getHeight() / 1000f);

    log.info("Rendering Page " + pageViewport.getPageNumberString() + " (pageWidth "+ pageWidth+ ", pageHeight "+ pageHeight+ ")");

    double scaleX=scaleFactor;

    double scaleY=scaleFactor;

    String scale=currentPageViewport.getForeignAttributes().get(PageScale.EXT_PAGE_SCALE);

    Point2D scales=PageScale.getScale(scale);

    if (scales != null) {

      scaleX*=scales.getX();

      scaleY*=scales.getY();

    }

    scaleX=scaleX * (UnitConv.IN2MM / FopFactoryConfig.DEFAULT_TARGET_RESOLUTION) / userAgent.getTargetPixelUnitToMillimeter();

    scaleY=scaleY * (UnitConv.IN2MM / FopFactoryConfig.DEFAULT_TARGET_RESOLUTION) / userAgent.getTargetPixelUnitToMillimeter();

    int bitmapWidth=(int)((pageWidth * scaleX) + 0.5);

    int bitmapHeight=(int)((pageHeight * scaleY) + 0.5);

    BufferedImage currentPageImage=getBufferedImage(bitmapWidth,bitmapHeight);

    Graphics2D graphics=currentPageImage.createGraphics();

    graphics.setRenderingHint(RenderingHints.KEY_FRACTIONALMETRICS,RenderingHints.VALUE_FRACTIONALMETRICS_ON);

    if (antialiasing) {

      graphics.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);

      graphics.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING,RenderingHints.VALUE_TEXT_ANTIALIAS_ON);

    }

    if (qualityRendering) {

      graphics.setRenderingHint(RenderingHints.KEY_RENDERING,RenderingHints.VALUE_RENDER_QUALITY);

    }

    graphics.setRenderingHint(RenderingHints.KEY_STROKE_CONTROL,RenderingHints.VALUE_STROKE_PURE);

    AffineTransform at=graphics.getTransform();

    at.scale(scaleX,scaleY);

    at.translate(bounds.getMinX() / -1000f,bounds.getMinY() / -1000f);

    graphics.setTransform(at);

    if (!transparentPageBackground) {

      graphics.setColor(Color.white);

      graphics.fillRect((int)Math.round(bleedBox.getMinX() / 1000f),(int)Math.round(bleedBox.getMinY() / 1000f),(int)Math.round(bleedBox.getWidth() / 1000f),(int)Math.round(bleedBox.getHeight() / 1000f));

    }

    state=new Java2DGraphicsState(graphics,this.fontInfo,at);

    try {

      currentBPPosition=0;

      currentIPPosition=0;

      renderPageAreas(pageViewport.getPage());

    }

  finally {

      state=null;

    }

    return currentPageImage;

  }

  finally {

    this.currentPageViewport=null;

  }

}

Location: Java2DRenderer.java

Content: 

/** 

 * Returns a page viewport.

 * @param pageIndex the page index (zero-based)

 * @return the requested PageViewport instance

 * @exception FOPException If the page is out of range.

 */

public PageViewport getPageViewport(int pageIndex) throws FOPException {

  if (pageIndex < 0 || pageIndex >= pageViewportList.size()) {

    throw new FOPException("Requested page number is out of range: " + pageIndex + "; only "+ pageViewportList.size()+ " page(s) available.");

  }

  return (PageViewport)pageViewportList.get(pageIndex);

}

Location: Java2DRenderer.java

Content: 

/** 

 * @return true if the renderer is not currently processing 

 */

public boolean isRenderingDone(){

  return this.renderingDone;

}

Location: Java2DRenderer.java

Content: 

/** 

 * Default constructor

 * @param userAgent the user agent that contains configuration details. This cannot be null.

 */

public Java2DRenderer(FOUserAgent userAgent){

  super(userAgent);

  userAgent.setRendererOverride(this);

  String s=(String)userAgent.getRendererOption(JAVA2D_TRANSPARENT_PAGE_BACKGROUND);

  if (s != null) {

    this.transparentPageBackground="true".equalsIgnoreCase(s);

  }

}

Location: Java2DRenderer.java

Content: 

/** 

 * {@inheritDoc} 

 */

public int print(Graphics g,PageFormat pageFormat,int pageIndex) throws PrinterException {

  if (pageIndex >= getNumberOfPages()) {

    return NO_SUCH_PAGE;

  }

  if (state != null) {

    throw new IllegalStateException("state must be null");

  }

  Graphics2D graphics=(Graphics2D)g;

  try {

    PageViewport viewport=getPageViewport(pageIndex);

    AffineTransform at=graphics.getTransform();

    state=new Java2DGraphicsState(graphics,this.fontInfo,at);

    currentBPPosition=0;

    currentIPPosition=0;

    renderPageAreas(viewport.getPage());

    return PAGE_EXISTS;

  }

 catch (  FOPException e) {

    log.error(e);

    return NO_SUCH_PAGE;

  }

 finally {

    state=null;

  }

}

Location: Java2DRenderer.java

Content: 

/** 

 * Renders a TextArea to a Graphics2D instance. Adjust the coordinate system so that the start of the baseline of the first character is at coordinate (0,0).

 * @param text the TextArea

 * @param g2d the Graphics2D to render to

 * @param font the font to paint with

 * @param fontInfo the font information

 */

public static void renderText(TextArea text,Graphics2D g2d,Font font,FontInfo fontInfo){

  Color col=(Color)text.getTrait(Trait.COLOR);

  g2d.setColor(col);

  float textCursor=0;

  for (  Object child : text.getChildAreas()) {

    if (child instanceof WordArea) {

      WordArea word=(WordArea)child;

      String s=word.getWord();

      int[] letterAdjust=word.getLetterAdjustArray();

      GlyphVector gv=Java2DUtil.createGlyphVector(s,g2d,font,fontInfo);

      double additionalWidth=0.0;

      if (letterAdjust == null && text.getTextLetterSpaceAdjust() == 0 && text.getTextWordSpaceAdjust() == 0) {

      }

 else {

        int[] offsets=getGlyphOffsets(s,font,text,letterAdjust);

        float cursor=0.0f;

        if (offsets.length != gv.getNumGlyphs()) {

          log.error(String.format("offsets length different from glyphNumber: %d != %d",offsets.length,gv.getNumGlyphs()));

        }

        for (int i=0; i < Math.min(offsets.length,gv.getNumGlyphs()); i++) {

          Point2D pt=gv.getGlyphPosition(i);

          pt.setLocation(cursor,pt.getY());

          gv.setGlyphPosition(i,pt);

          cursor+=offsets[i] / 1000f;

        }

        additionalWidth=cursor - gv.getLogicalBounds().getWidth();

      }

      g2d.drawGlyphVector(gv,textCursor,0);

      textCursor+=gv.getLogicalBounds().getWidth() + additionalWidth;

    }

 else     if (child instanceof SpaceArea) {

      SpaceArea space=(SpaceArea)child;

      String s=space.getSpace();

      char sp=s.charAt(0);

      int tws=(space.isAdjustable() ? text.getTextWordSpaceAdjust() + 2 * text.getTextLetterSpaceAdjust() : 0);

      textCursor+=(font.getCharWidth(sp) + tws) / 1000f;

    }

 else {

      throw new IllegalStateException("Unsupported child element: " + child);

    }

  }

}

Location: Java2DRenderer.java

Content: 

/** 

 * @param c the 0-based current page number

 */

public void setCurrentPageNumber(int c){

  this.currentPageNumber=c;

}

Location: Java2DRenderer.java

Content: 

/** 

 * Sets the new scale factor.

 * @param newScaleFactor ]0 ; 1]

 */

public void setScaleFactor(double newScaleFactor){

  this.scaleFactor=newScaleFactor;

}

Location: Java2DRenderer.java

Content: 

/** 

 * Controls the page background.

 * @param transparentPageBackground true if the background should be transparent

 */

public void setTransparentPageBackground(boolean transparentPageBackground){

  this.transparentPageBackground=transparentPageBackground;

}

