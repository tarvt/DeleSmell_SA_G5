Location: AreaAdditionUtil.java

Content: 

/** 

 * Creates the child areas for the given layout manager.

 * @param parentLM the parent layout manager

 * @param parentIter the position iterator

 * @param layoutContext the layout context

 */

public static void addAreas(AbstractLayoutManager parentLM,PositionIterator parentIter,LayoutContext layoutContext){

  LayoutManager childLM;

  LayoutContext lc=LayoutContext.offspringOf(layoutContext);

  LayoutManager firstLM=null;

  LayoutManager lastLM=null;

  Position firstPos=null;

  Position lastPos=null;

  if (parentLM != null) {

    parentLM.addId();

  }

  LinkedList<Position> positionList=new LinkedList<Position>();

  Position pos;

  while (parentIter.hasNext()) {

    pos=parentIter.next();

    if (pos == null) {

      continue;

    }

    if (pos.getIndex() >= 0) {

      if (firstPos == null) {

        firstPos=pos;

      }

      lastPos=pos;

    }

    if (pos instanceof NonLeafPosition) {

      positionList.add(pos.getPosition());

      lastLM=(pos.getPosition().getLM());

      if (firstLM == null) {

        firstLM=lastLM;

      }

    }

 else     if (pos instanceof SpaceHandlingBreakPosition) {

      positionList.add(pos);

    }

 else {

    }

  }

  if (firstPos == null) {

    return;

  }

  if (parentLM != null) {

    parentLM.registerMarkers(true,parentLM.isFirst(firstPos),parentLM.isLast(lastPos));

  }

  PositionIterator childPosIter=new PositionIterator(positionList.listIterator());

  while ((childLM=childPosIter.getNextChildLM()) != null) {

    lc.setFlags(LayoutContext.FIRST_AREA,childLM == firstLM);

    lc.setFlags(LayoutContext.LAST_AREA,childLM == lastLM);

    lc.setSpaceAdjust(layoutContext.getSpaceAdjust());

    lc.setSpaceBefore((childLM == firstLM ? layoutContext.getSpaceBefore() : 0));

    lc.setSpaceAfter(layoutContext.getSpaceAfter());

    lc.setStackLimitBP(layoutContext.getStackLimitBP());

    childLM.addAreas(childPosIter,lc);

  }

  if (parentLM != null) {

    parentLM.registerMarkers(false,parentLM.isFirst(firstPos),parentLM.isLast(lastPos));

  }

}

Location: AreaAdditionUtil.java

Content: 

private AreaAdditionUtil(){

}

