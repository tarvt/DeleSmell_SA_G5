Location: FontSizePropertyMaker.java

Content: 

/** 

 * Calculates the nearest absolute font size to the given font size.

 * @param baseFontSize the font size in mpt of the parent fo

 * @return the closest absolute font size

 */

private int computeClosestAbsoluteFontSize(int baseFontSize){

  double scale=FONT_SIZE_GROWTH_FACTOR;

  int lastStepFontSize=FONT_SIZE_NORMAL;

  if (baseFontSize < FONT_SIZE_NORMAL) {

    scale=1 / FONT_SIZE_GROWTH_FACTOR;

  }

  int nextStepFontSize=(int)Math.round(lastStepFontSize * scale);

  while (scale < 1 && nextStepFontSize > baseFontSize || scale > 1 && nextStepFontSize < baseFontSize) {

    lastStepFontSize=nextStepFontSize;

    nextStepFontSize=(int)Math.round(lastStepFontSize * scale);

    if (nextStepFontSize == lastStepFontSize) {

      break;

    }

  }

  if (Math.abs(lastStepFontSize - baseFontSize) <= Math.abs(baseFontSize - nextStepFontSize)) {

    return lastStepFontSize;

  }

  return nextStepFontSize;

}

Location: FontSizePropertyMaker.java

Content: 

/** 

 * {@inheritDoc}Implements the parts of 7.8.4 relevant to relative font sizes

 */

public Property convertProperty(Property p,PropertyList propertyList,FObj fo) throws PropertyException {

  if (p.getEnum() == EN_LARGER || p.getEnum() == EN_SMALLER) {

    Property pp=propertyList.getFromParent(this.propId);

    int baseFontSize=computeClosestAbsoluteFontSize(pp.getLength().getValue());

    if (p.getEnum() == EN_LARGER) {

      return FixedLength.getInstance(Math.round(baseFontSize * FONT_SIZE_GROWTH_FACTOR));

    }

 else {

      return FixedLength.getInstance(Math.round(baseFontSize / FONT_SIZE_GROWTH_FACTOR));

    }

  }

  return super.convertProperty(p,propertyList,fo);

}

Location: FontSizePropertyMaker.java

Content: 

/** 

 * Create a length property which can handle relative font sizes

 * @param propId the font size property id.

 */

public FontSizePropertyMaker(int propId){

  super(propId);

}

