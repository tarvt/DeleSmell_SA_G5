Location: AbstractBaseLayoutManager.java

Content: 

/** 

 * Abstract base layout manager.

 */

public AbstractBaseLayoutManager(){

  fobj=null;

}

Location: AbstractBaseLayoutManager.java

Content: 

/** 

 * Abstract base layout manager.

 * @param fo the formatting object for this layout manager

 */

public AbstractBaseLayoutManager(FObj fo){

  if (fo == null) {

    throw new IllegalStateException("Null formatting object found.");

  }

  this.fobj=fo;

  setGeneratesReferenceArea(fo.generatesReferenceAreas());

}

Location: AbstractBaseLayoutManager.java

Content: 

/** 

 * Find the first ancestor area that is a block area and returns its BPD.

 * @return the bpd of the ancestor block area

 */

protected int getAncestorBlockAreaBPD(){

  LayoutManager lm=getParent();

  while (lm != null) {

    if (lm.getGeneratesBlockArea() && !lm.getGeneratesLineArea()) {

      return lm.getContentAreaBPD();

    }

    lm=lm.getParent();

  }

  LOG.error("No parent LM found");

  return 0;

}

Location: AbstractBaseLayoutManager.java

Content: 

/** 

 * Find the first ancestor area that is a block area and returns its IPD.

 * @return the ipd of the ancestor block area

 */

protected int getAncestorBlockAreaIPD(){

  LayoutManager lm=getParent();

  while (lm != null) {

    if (lm.getGeneratesBlockArea() && !lm.getGeneratesLineArea()) {

      return lm.getContentAreaIPD();

    }

    lm=lm.getParent();

  }

  LOG.error("No parent LM found");

  return 0;

}

Location: AbstractBaseLayoutManager.java

Content: 

/** 

 * Find the parent area and returns its BPD.

 * @return the bpd of the parent area

 */

protected int getParentAreaBPD(){

  LayoutManager lm=getParent();

  if (lm != null) {

    return lm.getContentAreaBPD();

  }

  LOG.error("No parent LM found");

  return 0;

}

Location: AbstractBaseLayoutManager.java

Content: 

/** 

 * Find the parent area and returns its IPD.

 * @return the ipd of the parent area

 */

protected int getParentAreaIPD(){

  LayoutManager lm=getParent();

  if (lm != null) {

    return lm.getContentAreaIPD();

  }

  LOG.error("No parent LM found");

  return 0;

}

Location: AbstractBaseLayoutManager.java

Content: 

/** 

 * Find the first ancestor area that is a reference area and returns its BPD.

 * @return the bpd of the ancestor reference area

 */

protected int getReferenceAreaBPD(){

  LayoutManager lm=getParent();

  while (lm != null) {

    if (lm.getGeneratesReferenceArea()) {

      return lm.getContentAreaBPD();

    }

    lm=lm.getParent();

  }

  LOG.error("No parent LM found");

  return 0;

}

Location: AbstractBaseLayoutManager.java

Content: 

/** 

 * Find the first ancestor area that is a reference area and returns its IPD.

 * @return the ipd of the ancestor reference area

 */

public int getReferenceAreaIPD(){

  LayoutManager lm=getParent();

  while (lm != null) {

    if (lm.getGeneratesReferenceArea()) {

      return lm.getContentAreaIPD();

    }

    lm=lm.getParent();

  }

  LOG.error("No parent LM found");

  return 0;

}

Location: AbstractBaseLayoutManager.java

Content: 

public void preserveChildrenAtEndOfLayout(){

}

Location: AbstractBaseLayoutManager.java

Content: 

public void recreateChildrenLMs(){

}

Location: AbstractBaseLayoutManager.java

Content: 

/** 

 * Lets implementing LM set the flag indicating if they generate block areas.

 * @param generatesBlockArea if true the areas generates by this LM are block areas.

 */

protected void setGeneratesBlockArea(boolean generatesBlockArea){

  this.generatesBlockArea=generatesBlockArea;

}

Location: AbstractBaseLayoutManager.java

Content: 

/** 

 * Lets implementing LM set the flag indicating if they generate reference areas.

 * @param generatesReferenceArea if true the areas generates by this LM arereference areas.

 */

protected void setGeneratesReferenceArea(boolean generatesReferenceArea){

  this.generatesReferenceArea=generatesReferenceArea;

}

