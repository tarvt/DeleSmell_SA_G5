Location: HyphenationTreeCache.java

Content: 

/** 

 * Cache a hyphenation tree under its key.

 * @param key the key (ex. "de_CH" or "en")

 * @param hTree the hyphenation tree

 */

public void cache(String key,HyphenationTree hTree){

  hyphenTrees.put(key,hTree);

}

Location: HyphenationTreeCache.java

Content: 

/** 

 * Constructs the key for the hyphenation pattern file.

 * @param lang the language

 * @param country the country (may be null or "none")

 * @return the resulting key

 */

public static String constructLlccKey(String lang,String country){

  String key=lang;

  if (country != null && !country.equals("none")) {

    key+="_" + country;

  }

  return key;

}

Location: HyphenationTreeCache.java

Content: 

/** 

 * If the user configured a hyphenation pattern file name for this (lang,country) value, return it. If not, return null.

 * @param lang the language

 * @param country the country (may be null or "none")

 * @param hyphPatNames the map of user-configured hyphenation pattern file names

 * @return the hyphenation pattern file name or null

 */

public static String constructUserKey(String lang,String country,Map hyphPatNames){

  String userKey=null;

  if (hyphPatNames != null) {

    String key=constructLlccKey(lang,country);

    key=key.replace('_','-');

    userKey=(String)hyphPatNames.get(key);

  }

  return userKey;

}

Location: HyphenationTreeCache.java

Content: 

/** 

 * Looks in the cache if a hyphenation tree is available and returns it if it is found.

 * @param lang the language

 * @param country the country (may be null or "none")

 * @return the HyhenationTree instance or null if it's not in the cache

 */

public HyphenationTree getHyphenationTree(String lang,String country){

  String key=constructLlccKey(lang,country);

  if (hyphenTrees.containsKey(key)) {

    return (HyphenationTree)hyphenTrees.get(key);

  }

 else   if (hyphenTrees.containsKey(lang)) {

    return (HyphenationTree)hyphenTrees.get(lang);

  }

 else {

    return null;

  }

}

Location: HyphenationTreeCache.java

Content: 

/** 

 * Indicates whether a hyphenation file has been requested before but it wasn't available. This is to avoid searching a second time for a hyphenation pattern file which is not available.

 * @param key the key (ex. "de_CH" or "en")

 * @return true if the hyphenation tree is unavailable

 */

public boolean isMissing(String key){

  return (missingHyphenationTrees != null && missingHyphenationTrees.contains(key));

}

Location: HyphenationTreeCache.java

Content: 

/** 

 * Notes a key to a hyphenation tree as missing. This is to avoid searching a second time for a hyphenation pattern file which is not available.

 * @param key the key (ex. "de_CH" or "en")

 */

public void noteMissing(String key){

  if (missingHyphenationTrees == null) {

    missingHyphenationTrees=new java.util.HashSet();

  }

  missingHyphenationTrees.add(key);

}

