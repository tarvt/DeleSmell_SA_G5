Location: EvalCheck.java

Content: 

/** 

 * {@inheritDoc} 

 */

public void check(Document intermediate){

  doCheck(intermediate);

}

Location: EvalCheck.java

Content: 

private void doCheck(Document doc){

  XObject res;

  try {

    res=XPathAPI.eval(doc,xpath,prefixResolver);

  }

 catch (  TransformerException e) {

    throw new RuntimeException("XPath evaluation failed: " + e.getMessage());

  }

  String actual=res.str();

  if (tolerance != 0) {

    double v1=Double.parseDouble(expected);

    double v2=Double.parseDouble(actual);

    if (Math.abs(v1 - v2) > tolerance) {

      throw new AssertionError("Expected XPath expression to evaluate to '" + expected + "', but got '"+ actual+ "' ("+ this+ ", outside tolerance)");

    }

  }

 else {

    if (!expected.equals(actual)) {

      throw new AssertionError("Expected XPath expression to evaluate to '" + expected + "', but got '"+ actual+ "' ("+ this+ ")");

    }

  }

}

Location: EvalCheck.java

Content: 

/** 

 * Creates a new instance from a DOM node.

 * @param node DOM node that defines this check

 */

public EvalCheck(Node node){

  this.expected=node.getAttributes().getNamedItem("expected").getNodeValue();

  this.xpath=node.getAttributes().getNamedItem("xpath").getNodeValue();

  Node nd=node.getAttributes().getNamedItem("tolerance");

  if (nd != null) {

    this.tolerance=Double.parseDouble(nd.getNodeValue());

  }

  this.prefixResolver=new PrefixResolverDefault(node);

}

