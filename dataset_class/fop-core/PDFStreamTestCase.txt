Location: PDFStreamTestCase.java

Content: 

private byte[] createSampleData(){

  byte[] bytes=new byte[10];

  for (int i=0; i < 10; i++) {

    bytes[i]=(byte)i;

  }

  return bytes;

}

Location: PDFStreamTestCase.java

Content: 

private byte[] createSampleStreamData() throws IOException {

  ByteArrayOutputStream stream=new ByteArrayOutputStream();

  stream.write("\nstream\n".getBytes("US-ASCII"));

  stream.write(createSampleData());

  stream.write("\nendstream".getBytes("US-ASCII"));

  return stream.toByteArray();

}

Location: PDFStreamTestCase.java

Content: 

@Before public void createStream(){

  stream=new PDFStream();

  stream.setObjectNumber(1);

  PDFDocument pdfDocument=new PDFDocument("Apache FOP");

  stream.setDocument(pdfDocument);

}

Location: PDFStreamTestCase.java

Content: 

@Test public void customFilter(){

  PDFFilterList filters=stream.getFilterList();

  filters.addFilter("null");

  assertTrue(filters.isInitialized());

  assertEquals(1,filters.getFilters().size());

  PDFFilter filter=filters.getFilters().get(0);

  assertEquals("",filter.getName());

}

Location: PDFStreamTestCase.java

Content: 

private String getStreamHash(int i) throws IOException {

  PDFStream stream=new PDFStream();

  String txt="1 0 0 -1 0 790.866 cm\n" + "q\n" + "0 g\n"+ "BT\n"+ "/F1 12 Tf\n"+ "1 0 0 -1 0 10.26599979 Tm [(" + i + ")] TJ\n"+ "ET\n";

  String img="q\n" + "126.734001 0 0 -38.244999 0 54.294998 cm\n" + "/Im2 Do\n"+ "Q\n";

  if (i % 2 == 0) {

    stream.add(txt + img + "Q\n");

  }

 else {

    stream.add(txt + "Q\n");

  }

  return stream.streamHashCode();

}

Location: PDFStreamTestCase.java

Content: 

@Test public void testEncodeAndWriteStream() throws IOException {

  PDFFilterList filters=stream.getFilterList();

  filters.addFilter("null");

  byte[] bytes=createSampleData();

  stream.setData(bytes);

  ByteArrayOutputStream actual=new ByteArrayOutputStream();

  PDFNumber number=new PDFNumber();

  stream.encodeAndWriteStream(actual,number);

  assertArrayEquals(createSampleStreamData(),actual.toByteArray());

}

Location: PDFStreamTestCase.java

Content: 

@Test public void testEncodeStream() throws IOException {

  PDFFilterList filters=stream.getFilterList();

  filters.addFilter("null");

  byte[] bytes=createSampleData();

  stream.setData(bytes);

  ByteArrayOutputStream actual=new ByteArrayOutputStream();

  StreamCache streamCache=stream.encodeStream();

  streamCache.outputContents(actual);

  assertArrayEquals(bytes,actual.toByteArray());

}

Location: PDFStreamTestCase.java

Content: 

@Test public void testFilterSetup(){

  hongshuai();

  PDFFilterList filterList=stream.getFilterList();

  assertFalse(filterList.isInitialized());

  assertEquals(0,filterList.getFilters().size());

  testSetupFilterList();

}

Location: PDFStreamTestCase.java

Content: 

@Test public void testHash() throws IOException {

  assertFalse(getStreamHash(65025).equals(getStreamHash(127076)));

}

Location: PDFStreamTestCase.java

Content: 

private void testSetupFilterList(){

  stream.setupFilterList();

  PDFFilterList filterList=stream.getFilterList();

  assertTrue(filterList.isInitialized());

  assertEquals(1,filterList.getFilters().size());

  PDFFilter filter=filterList.getFilters().get(0);

  assertEquals("/FlateDecode",filter.getName());

}

Location: PDFStreamTestCase.java

Content: 

@Test public void testStream() throws IOException {

  PDFFilterList filters=stream.getFilterList();

  filters.addFilter("null");

  byte[] bytes=createSampleData();

  stream.setData(bytes);

  ByteArrayOutputStream actual=new ByteArrayOutputStream();

  stream.outputRawStreamData(actual);

  assertArrayEquals(bytes,actual.toByteArray());

}

