Location: FontManagerConfigurator.java

Content: 

/** 

 * Initializes font settings from the user configuration

 * @param fontManager a font manager

 * @param strict true if strict checking of the configuration is enabled

 * @throws FOPException if an exception occurs while processing the configuration

 */

public void configure(FontManager fontManager,boolean strict) throws FOPException {

  if (cfg.getChild("font-base",false) != null) {

    try {

      URI fontBase=InternalResourceResolver.getBaseURI(cfg.getChild("font-base").getValue(null));

      fontManager.setResourceResolver(ResourceResolverFactory.createInternalResourceResolver(baseURI.resolve(fontBase),resourceResolver));

    }

 catch (    URISyntaxException use) {

      LogUtil.handleException(log,use,true);

    }

  }

 else {

    fontManager.setResourceResolver(ResourceResolverFactory.createInternalResourceResolver(fallbackURI,resourceResolver));

  }

  if (cfg.getChild("use-cache",false) != null) {

    try {

      if (!cfg.getChild("use-cache").getValueAsBoolean()) {

        fontManager.disableFontCache();

      }

 else {

        if (cfg.getChild("cache-file",false) != null) {

          fontManager.setCacheFile(URI.create(cfg.getChild("cache-file").getValue()));

        }

      }

    }

 catch (    ConfigurationException mfue) {

      LogUtil.handleException(log,mfue,true);

    }

  }

  if (cfg.getChild("base14-kerning",false) != null) {

    try {

      fontManager.setBase14KerningEnabled(cfg.getChild("base14-kerning").getValueAsBoolean());

    }

 catch (    ConfigurationException e) {

      LogUtil.handleException(log,e,true);

    }

  }

  Configuration fontsCfg=cfg.getChild("fonts",false);

  if (fontsCfg != null) {

    Configuration substitutionsCfg=fontsCfg.getChild("substitutions",false);

    if (substitutionsCfg != null) {

      FontSubstitutions substitutions=new FontSubstitutions();

      new FontSubstitutionsConfigurator(substitutionsCfg).configure(substitutions);

      fontManager.setFontSubstitutions(substitutions);

    }

    Configuration referencedFontsCfg=fontsCfg.getChild("referenced-fonts",false);

    if (referencedFontsCfg != null) {

      FontTriplet.Matcher matcher=createFontsMatcher(referencedFontsCfg,strict);

      fontManager.setReferencedFontsMatcher(matcher);

    }

  }

}

Location: FontManagerConfigurator.java

Content: 

/** 

 * Creates a font triplet matcher from a configuration object.

 * @param cfg the configuration object

 * @param strict true for strict configuraton error handling

 * @return the font matcher

 * @throws FOPException if an error occurs while building the matcher

 */

public static FontTriplet.Matcher createFontsMatcher(Configuration cfg,boolean strict) throws FOPException {

  List<FontTriplet.Matcher> matcherList=new java.util.ArrayList<FontTriplet.Matcher>();

  Configuration[] matches=cfg.getChildren("match");

  for (  Configuration matche : matches) {

    try {

      matcherList.add(new FontFamilyRegExFontTripletMatcher(matche.getAttribute("font-family")));

    }

 catch (    ConfigurationException ce) {

      LogUtil.handleException(log,ce,strict);

      continue;

    }

  }

  FontTriplet.Matcher orMatcher=new OrFontTripletMatcher(matcherList.toArray(new FontTriplet.Matcher[matcherList.size()]));

  return orMatcher;

}

Location: FontManagerConfigurator.java

Content: 

/** 

 * Creates a font triplet matcher from a configuration object.

 * @param fontFamilies the list of font families

 * @param strict true for strict configuraton error handling

 * @return the font matcher

 * @throws FOPException if an error occurs while building the matcher

 */

public static FontTriplet.Matcher createFontsMatcher(List<String> fontFamilies,boolean strict) throws FOPException {

  List<FontTriplet.Matcher> matcherList=new java.util.ArrayList<FontTriplet.Matcher>();

  for (  String fontFamily : fontFamilies) {

    matcherList.add(new FontFamilyRegExFontTripletMatcher(fontFamily));

  }

  FontTriplet.Matcher orMatcher=new OrFontTripletMatcher(matcherList.toArray(new FontTriplet.Matcher[matcherList.size()]));

  return orMatcher;

}

Location: FontManagerConfigurator.java

Content: 

/** 

 * Main constructor

 * @param cfg the font manager configuration object

 * @param baseURI the URI against which to resolve relative URIs

 * @param fallbackURI the URI to use as a fallback if font-base is unspecified

 * @param resourceResolver the resource resolver

 */

public FontManagerConfigurator(Configuration cfg,URI baseURI,URI fallbackURI,ResourceResolver resourceResolver){

  this.cfg=cfg;

  this.baseURI=baseURI;

  this.fallbackURI=fallbackURI;

  this.resourceResolver=resourceResolver;

}

