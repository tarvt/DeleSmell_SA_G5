Location: AFPEventProcessingTestCase.java

Content: 

@Test(expected=FOPException.class) public void testInvalidCharactersetName() throws Exception {

  testInvalidConfigEvent("afp-invalid-characterset.xconf",".characterSetNameInvalid");

}

Location: AFPEventProcessingTestCase.java

Content: 

@Test(expected=FOPException.class) public void testinvalidConfig() throws Exception {

  testInvalidConfigEvent("afp-invalid-config.xconf",".invalidConfiguration");

}

Location: AFPEventProcessingTestCase.java

Content: 

private void testInvalidConfigEvent(String xconf,String eventId) throws Exception {

  InputStream inStream=getClass().getResourceAsStream("simple.fo");

  eventsTests.doTest(inStream,CONFIG_BASE_DIR.resolve(xconf),AFPEventProducer.class.getName() + eventId,MimeConstants.MIME_AFP);

}

Location: AFPEventProcessingTestCase.java

Content: 

@Test public void testMissingFontConfigurationElement() throws Exception {

  testInvalidConfigEvent("afp-font-missing.xconf",".fontConfigMissing");

}

Location: AFPEventProcessingTestCase.java

Content: 

@Test public void testRasterFontElementMissing() throws Exception {

  testInvalidConfigEvent("afp-raster-font-missing.xconf",".fontConfigMissing");

}

Location: AFPEventProcessingTestCase.java

Content: 

@Test public void testTripletElementMissing() throws Exception {

  testInvalidConfigEvent("afp-triplet-missing.xconf",".fontConfigMissing");

}

