Location: LineLayoutPossibilities.java

Content: 

/** 

 * @param pos a position

 * @param i an index into posibilities list

 */

public void addBreakPosition(LineLayoutManager.LineBreakPosition pos,int i){

  ((Possibility)possibilitiesList.get(i)).addBreakPosition(pos);

}

Location: LineLayoutPossibilities.java

Content: 

/** 

 * Add possibility.

 * @param ln line number

 * @param dem demerits

 */

public void addPossibility(int ln,double dem){

  possibilitiesList.add(new Possibility(ln,dem));

  if (possibilitiesList.size() == 1) {

    minimumIndex=0;

    optimumIndex=0;

    maximumIndex=0;

    chosenIndex=0;

  }

 else {

    if (dem < ((Possibility)possibilitiesList.get(optimumIndex)).getDemerits()) {

      optimumIndex=possibilitiesList.size() - 1;

      chosenIndex=optimumIndex;

    }

    if (ln < ((Possibility)possibilitiesList.get(minimumIndex)).getLineCount()) {

      minimumIndex=possibilitiesList.size() - 1;

    }

    if (ln > ((Possibility)possibilitiesList.get(maximumIndex)).getLineCount()) {

      maximumIndex=possibilitiesList.size() - 1;

    }

  }

}

Location: LineLayoutPossibilities.java

Content: 

/** 

 * @param adj the adjustment

 * @return the adjustment or zero

 */

public int applyLineCountAdjustment(int adj){

  if (adj >= (getMinLineCount() - getChosenLineCount()) && adj <= (getMaxLineCount() - getChosenLineCount()) && getLineCount(chosenIndex + adj) == getChosenLineCount() + adj) {

    chosenIndex+=adj;

    LOG.debug("chosenLineCount= " + (getChosenLineCount() - adj) + " adjustment= "+ adj+ " => chosenLineCount= "+ getLineCount(chosenIndex));

    return adj;

  }

 else {

    LOG.warn("Cannot apply the desired line count adjustment.");

    return 0;

  }

}

Location: LineLayoutPossibilities.java

Content: 

/** 

 * @return true if can use fewer lines 

 */

public boolean canUseLessLines(){

  return (getMinLineCount() < getOptLineCount());

}

Location: LineLayoutPossibilities.java

Content: 

/** 

 * @return true if can use more lines 

 */

public boolean canUseMoreLines(){

  return (getOptLineCount() < getMaxLineCount());

}

Location: LineLayoutPossibilities.java

Content: 

/** 

 * @return the demerits of the chosen index 

 */

public double getChosenDemerits(){

  return getDemerits(chosenIndex);

}

Location: LineLayoutPossibilities.java

Content: 

/** 

 * @return the line count of the chosen index 

 */

public int getChosenLineCount(){

  return getLineCount(chosenIndex);

}

Location: LineLayoutPossibilities.java

Content: 

/** 

 * @param i the break position index

 * @return the chosen position

 */

public LineLayoutManager.LineBreakPosition getChosenPosition(int i){

  return ((Possibility)possibilitiesList.get(chosenIndex)).getBreakPosition(i);

}

Location: LineLayoutPossibilities.java

Content: 

/** 

 * @param i the posibilities list index

 * @return the demerits

 */

public double getDemerits(int i){

  return ((Possibility)possibilitiesList.get(i)).getDemerits();

}

Location: LineLayoutPossibilities.java

Content: 

/** 

 * @param i the posibilities list index

 * @return the line count

 */

public int getLineCount(int i){

  return ((Possibility)possibilitiesList.get(i)).getLineCount();

}

Location: LineLayoutPossibilities.java

Content: 

/** 

 * @return the line count of the maximum index 

 */

public int getMaxLineCount(){

  return getLineCount(maximumIndex);

}

Location: LineLayoutPossibilities.java

Content: 

/** 

 * @return the line count of the minimum index 

 */

public int getMinLineCount(){

  return getLineCount(minimumIndex);

}

Location: LineLayoutPossibilities.java

Content: 

/** 

 * @return the line count of the optimum index 

 */

public int getOptLineCount(){

  return getLineCount(optimumIndex);

}

Location: LineLayoutPossibilities.java

Content: 

/** 

 * @return the possibilities count 

 */

public int getPossibilitiesNumber(){

  return possibilitiesList.size();

}

Location: LineLayoutPossibilities.java

Content: 

/** 

 * default constructor 

 */

public LineLayoutPossibilities(){

  possibilitiesList=new java.util.ArrayList();

  savedPossibilities=new java.util.ArrayList();

  optimumIndex=-1;

}

Location: LineLayoutPossibilities.java

Content: 

/** 

 * print all 

 */

public void printAll(){

  System.out.println("++++++++++");

  System.out.println(" " + possibilitiesList.size() + " possibility':");

  for (int i=0; i < possibilitiesList.size(); i++) {

    System.out.println("   " + ((Possibility)possibilitiesList.get(i)).getLineCount() + (i == optimumIndex ? " *" : "")+ (i == minimumIndex ? " -" : "")+ (i == maximumIndex ? " +" : ""));

  }

  System.out.println("++++++++++");

}

Location: LineLayoutPossibilities.java

Content: 

/** 

 * Replace the Possibilities stored in possibilitiesList with the ones stored in savedPossibilities and having the same line number.

 */

public void restorePossibilities(){

  int index=0;

  while (savedPossibilities.size() > 0) {

    Possibility restoredPossibility=(Possibility)savedPossibilities.remove(0);

    if (restoredPossibility.getLineCount() < getMinLineCount()) {

      possibilitiesList.add(0,restoredPossibility);

      minimumIndex=0;

      optimumIndex++;

      maximumIndex++;

      chosenIndex++;

    }

 else     if (restoredPossibility.getLineCount() > getMaxLineCount()) {

      possibilitiesList.add(possibilitiesList.size(),restoredPossibility);

      maximumIndex=possibilitiesList.size() - 1;

      index=maximumIndex;

    }

 else {

      while (index < maximumIndex && getLineCount(index) < restoredPossibility.getLineCount()) {

        index++;

      }

      if (getLineCount(index) == restoredPossibility.getLineCount()) {

        possibilitiesList.set(index,restoredPossibility);

      }

 else {

        LOG.error("LineLayoutPossibilities restorePossibilities()," + " min= " + getMinLineCount() + " max= "+ getMaxLineCount()+ " restored= "+ restoredPossibility.getLineCount());

        return;

      }

    }

    if (savedOptLineCount == 0 && getDemerits(optimumIndex) > restoredPossibility.getDemerits() || savedOptLineCount != 0 && restoredPossibility.getLineCount() == savedOptLineCount) {

      optimumIndex=index;

      chosenIndex=optimumIndex;

    }

  }

}

Location: LineLayoutPossibilities.java

Content: 

/** 

 * Save in a different array the computed Possibilities, so possibilitiesList is ready to store different Possibilities.

 * @param bSaveOptLineCount true if should save optimum line count

 */

public void savePossibilities(boolean bSaveOptLineCount){

  if (bSaveOptLineCount) {

    savedOptLineCount=getOptLineCount();

  }

 else {

    savedOptLineCount=0;

  }

  savedPossibilities=possibilitiesList;

  possibilitiesList=new java.util.ArrayList();

}

