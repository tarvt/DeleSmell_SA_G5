Location: AFPPaintingState.java

Content: 

public AFPPaintingState(){

  colorConverter=GrayScaleColorConverter.getInstance();

  pagePaintingState=new AFPPagePaintingState();

  unitConv=new AFPUnitConverter(this);

}

Location: AFPPaintingState.java

Content: 

/** 

 * Returns true if JPEGs can be embedded in an AFP document.

 * @return true if JPEG embedding is allowed

 */

public boolean canEmbedJpeg(){

  return canEmbedJpeg;

}

Location: AFPPaintingState.java

Content: 

/** 

 * Used to convert color in respect of the colorImages flag

 * @return the color converter

 */

public ColorConverter getColorConverter(){

  return this.colorConverter;

}

Location: AFPPaintingState.java

Content: 

/** 

 * Returns the landscape rotation

 * @return the landscape rotation

 */

protected int getLandscapeRotation(){

  return this.landscapeRotation;

}

Location: AFPPaintingState.java

Content: 

/** 

 * Gets the current page fonts

 * @return the current page fonts

 */

public AFPPageFonts getPageFonts(){

  return pagePaintingState.getFonts();

}

Location: AFPPaintingState.java

Content: 

/** 

 * Returns the painting state of the current page

 * @return the painting state of the current page

 */

protected AFPPagePaintingState getPagePaintingState(){

  return this.pagePaintingState;

}

Location: AFPPaintingState.java

Content: 

/** 

 * Returns the page rotation

 * @return the page rotation

 */

public int getPageRotation(){

  return pagePaintingState.getOrientation();

}

Location: AFPPaintingState.java

Content: 

/** 

 * Returns the rotation to be used for portrait pages

 * @return the rotation to be used for portrait pages

 */

protected int getPortraitRotation(){

  return this.portraitRotation;

}

Location: AFPPaintingState.java

Content: 

/** 

 * Returns the unit converter

 * @return the unit converter

 */

public AFPUnitConverter getUnitConverter(){

  return this.unitConv;

}

Location: AFPPaintingState.java

Content: 

public boolean getWrapGocaPSeg(){

  return gocaPSeg;

}

Location: AFPPaintingState.java

Content: 

/** 

 * Set whether or not JPEG images can be embedded within an AFP document.

 * @param canEmbed true if the JPEG image can be embedded

 */

public void setCanEmbedJpeg(boolean canEmbed){

  canEmbedJpeg=canEmbed;

}

Location: AFPPaintingState.java

Content: 

/** 

 * Sets the uri of the current image

 * @param uri the uri of the current image

 */

public void setImageUri(String uri){

  ((AFPData)getData()).imageUri=uri;

}

Location: AFPPaintingState.java

Content: 

/** 

 * Sets the rotation to be used for landscape pages, valid values are 0, 90, 180, 270 (default).

 * @param rotation The rotation in degrees.

 */

public void setLandscapeRotation(int rotation){

  if (rotation == 0 || rotation == 90 || rotation == 180 || rotation == 270) {

    landscapeRotation=rotation;

  }

 else {

    throw new IllegalArgumentException("The landscape rotation must be one" + " of the values 0, 90, 180, 270");

  }

}

Location: AFPPaintingState.java

Content: 

/** 

 * Sets the page height

 * @param pageHeight the page height

 */

public void setPageHeight(int pageHeight){

  pagePaintingState.setHeight(pageHeight);

}

Location: AFPPaintingState.java

Content: 

/** 

 * Sets the page width

 * @param pageWidth the page width

 */

public void setPageWidth(int pageWidth){

  pagePaintingState.setWidth(pageWidth);

}

Location: AFPPaintingState.java

Content: 

/** 

 * Sets the rotation to be used for portrait pages, valid values are 0 (default), 90, 180, 270.

 * @param rotation The rotation in degrees.

 */

public void setPortraitRotation(int rotation){

  if (rotation == 0 || rotation == 90 || rotation == 180 || rotation == 270) {

    portraitRotation=rotation;

  }

 else {

    throw new IllegalArgumentException("The portrait rotation must be one" + " of the values 0, 90, 180, 270");

  }

}

