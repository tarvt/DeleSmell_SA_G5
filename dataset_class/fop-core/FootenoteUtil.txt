Location: FootenoteUtil.java

Content: 

private FootenoteUtil(){

}

Location: FootenoteUtil.java

Content: 

private static <T>List<T> getFootnoteList(List<T> footnotes){

  if (footnotes == null) {

    return new ArrayList<T>();

  }

 else {

    return footnotes;

  }

}

Location: FootenoteUtil.java

Content: 

/** 

 * Returns the footnotes contained in the given element list.

 */

public static List<FootnoteBodyLayoutManager> getFootnotes(List<ListElement> elemenList){

  return getFootnotes(elemenList,0,elemenList.size() - 1);

}

Location: FootenoteUtil.java

Content: 

/** 

 * Returns the footnotes contained in the given element list.

 * @param startIndex index in the element list from which to start the scan, inclusive

 * @param endIndex index in the element list at which to stop the scan, inclusive

 */

public static List<FootnoteBodyLayoutManager> getFootnotes(List<ListElement> elemenList,int startIndex,int endIndex){

  ListIterator<ListElement> iter=elemenList.listIterator(startIndex);

  List<FootnoteBodyLayoutManager> footnotes=null;

  while (iter.nextIndex() <= endIndex) {

    ListElement element=iter.next();

    if (element instanceof KnuthInlineBox && ((KnuthInlineBox)element).isAnchor()) {

      footnotes=getFootnoteList(footnotes);

      footnotes.add(((KnuthInlineBox)element).getFootnoteBodyLM());

    }

 else     if (element instanceof KnuthBlockBox && ((KnuthBlockBox)element).hasAnchors()) {

      footnotes=getFootnoteList(footnotes);

      footnotes.addAll(((KnuthBlockBox)element).getFootnoteBodyLMs());

    }

  }

  if (footnotes == null) {

    return Collections.emptyList();

  }

 else {

    return footnotes;

  }

}

