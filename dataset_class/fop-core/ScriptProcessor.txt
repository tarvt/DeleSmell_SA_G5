Location: ScriptProcessor.java

Content: 

private GlyphTable.UseSpec[] assembledLookupsGet(AssembledLookupsKey key){

  return assembledLookups.get(key);

}

Location: ScriptProcessor.java

Content: 

private GlyphTable.UseSpec[] assembledLookupsPut(AssembledLookupsKey key,GlyphTable.UseSpec[] usa){

  assembledLookups.put(key,usa);

  return usa;

}

Location: ScriptProcessor.java

Content: 

/** 

 * Assemble ordered array of lookup table use specifications according to the specified features and candidate lookups, where the order of the array is in accordance to the order of the applicable lookup list.

 * @param table the governing glyph table

 * @param features array of feature identifiers to apply

 * @param lookups a mapping from lookup specifications to lists of look tables from which to select lookup tables according to the specified features

 * @return ordered array of assembled lookup table use specifications

 */

public final GlyphTable.UseSpec[] assembleLookups(GlyphTable table,String[] features,Map<GlyphTable.LookupSpec,List<GlyphTable.LookupTable>> lookups){

  AssembledLookupsKey key=new AssembledLookupsKey(table,features,lookups);

  GlyphTable.UseSpec[] usa;

  if ((usa=assembledLookupsGet(key)) != null) {

    return usa;

  }

 else {

    return assembledLookupsPut(key,table.assembleLookups(features,lookups));

  }

}

Location: ScriptProcessor.java

Content: 

private static ScriptProcessor createProcessor(String script){

  ScriptProcessor sp=null;

  int sc=CharScript.scriptCodeFromTag(script);

  if (sc == CharScript.SCRIPT_ARABIC) {

    sp=new ArabicScriptProcessor(script);

  }

 else   if (CharScript.isIndicScript(sc)) {

    sp=IndicScriptProcessor.makeProcessor(script);

  }

 else {

    sp=new DefaultScriptProcessor(script);

  }

  return sp;

}

Location: ScriptProcessor.java

Content: 

/** 

 * Obtain script processor instance associated with specified script.

 * @param script a script identifier

 * @return a script processor instance or null if none found

 */

public static synchronized ScriptProcessor getInstance(String script,Map<String,ScriptProcessor> processors){

  ScriptProcessor sp=null;

  assert processors != null;

  if ((sp=processors.get(script)) == null) {

    processors.put(script,sp=createProcessor(script));

  }

  return sp;

}

Location: ScriptProcessor.java

Content: 

/** 

 * Perform positioning processing using a specific set of lookup tables.

 * @param gpos the glyph positioning table that applies

 * @param gs an input glyph sequence

 * @param script a script identifier

 * @param language a language identifier

 * @param fontSize size in device units

 * @param lookups a mapping from lookup specifications to glyph subtables to use for positioning processing

 * @param widths array of default advancements for each glyph

 * @param adjustments accumulated adjustments array (sequence) of 4-tuples of placement [PX,PY] and advance [AX,AY] adjustments, in that order,with one 4-tuple for each element of glyph sequence

 * @return true if some adjustment is not zero; otherwise, false

 */

public final boolean position(GlyphPositioningTable gpos,GlyphSequence gs,String script,String language,int fontSize,Map<GlyphTable.LookupSpec,List<GlyphTable.LookupTable>> lookups,int[] widths,int[][] adjustments){

  return position(gs,script,language,fontSize,assembleLookups(gpos,getPositioningFeatures(),lookups),widths,adjustments,getPositioningContextTester());

}

Location: ScriptProcessor.java

Content: 

/** 

 * Instantiate a script processor.

 * @param script a script identifier

 */

protected ScriptProcessor(String script){

  if ((script == null) || (script.length() == 0)) {

    throw new IllegalArgumentException("script must be non-empty string");

  }

 else {

    this.script=script;

    this.assembledLookups=new HashMap<AssembledLookupsKey,GlyphTable.UseSpec[]>();

  }

}

Location: ScriptProcessor.java

Content: 

/** 

 * Perform substitution processing using a specific set of lookup tables.

 * @param gsub the glyph substitution table that applies

 * @param gs an input glyph sequence

 * @param script a script identifier

 * @param language a language identifier

 * @param lookups a mapping from lookup specifications to glyph subtables to use for substitution processing

 * @return the substituted (output) glyph sequence

 */

public final GlyphSequence substitute(GlyphSubstitutionTable gsub,GlyphSequence gs,String script,String language,Map<GlyphTable.LookupSpec,List<GlyphTable.LookupTable>> lookups){

  return substitute(gs,script,language,assembleLookups(gsub,getSubstitutionFeatures(),lookups),getSubstitutionContextTester());

}

