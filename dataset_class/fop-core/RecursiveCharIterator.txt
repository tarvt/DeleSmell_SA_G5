Location: RecursiveCharIterator.java

Content: 

/** 

 * advances curChild to the next child in the collection, and curCharIter to the CharIterator for that item, or sets them to null if the iterator has no more items

 */

private void getNextCharIter(){

  if (childIter != null && childIter.hasNext()) {

    this.curChild=(FONode)childIter.next();

    this.curCharIter=curChild.charIterator();

  }

 else {

    curChild=null;

    curCharIter=null;

  }

}

Location: RecursiveCharIterator.java

Content: 

/** 

 * @return clone of this, cast as a CharIterator

 */

public CharIterator mark(){

  return (CharIterator)this.clone();

}

Location: RecursiveCharIterator.java

Content: 

/** 

 * Constructor which creates an iterator for all child nodes

 * @param fobj FONode for which an iterator should be created

 */

public RecursiveCharIterator(FObj fobj){

  this.fobj=fobj;

  this.childIter=fobj.getChildNodes();

  getNextCharIter();

}

Location: RecursiveCharIterator.java

Content: 

/** 

 * Constructor which creates an iterator for only some child nodes

 * @param fobj FObj for which an iterator should be created

 * @param child FONode of the first child to include in iterator

 */

public RecursiveCharIterator(FObj fobj,FONode child){

  this.fobj=fobj;

  this.childIter=fobj.getChildNodes(child);

  getNextCharIter();

}

