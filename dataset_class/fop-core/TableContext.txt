Location: TableContext.java

Content: 

/** 

 * Added by Peter Herweg on 2002-06-29 This function is called after each finished table-row. It decreases all values in colRowSpanningNumber by 1. If a value reaches 0 row-spanning is finished, and the value won't be decreased anymore.

 */

public void decreaseRowSpannings(){

  for (int z=0; z < colRowSpanningNumber.size(); ++z) {

    Integer i=(Integer)colRowSpanningNumber.get(z);

    if (i > 0) {

      i=i - 1;

    }

    colRowSpanningNumber.set(z,i);

    if (i == 0) {

      colRowSpanningAttrs.set(z,null);

      colFirstSpanningCol.set(z,false);

    }

  }

}

Location: TableContext.java

Content: 

/** 

 * @return RtfAttributes of current row-spanning cell

 */

public RtfAttributes getColumnRowSpanningAttrs(){

  return (RtfAttributes)colRowSpanningAttrs.get(colIndex);

}

Location: TableContext.java

Content: 

/** 

 * @return Number of currently spanned rows

 */

public Integer getColumnRowSpanningNumber(){

  return (Integer)colRowSpanningNumber.get(colIndex);

}

Location: TableContext.java

Content: 

/** 

 * @return true, if next row belongs to header

 */

public boolean getNextRowBelongsToHeader(){

  return bNextRowBelongsToHeader;

}

Location: TableContext.java

Content: 

/** 

 * Set current column index.

 * @param index New column index

 */

public void setColumnIndex(int index){

  colIndex=index;

}

Location: TableContext.java

Content: 

/** 

 * @param iRowSpanning number of rows to span

 * @param attrs RtfAttributes of row-spanning cell

 */

public void setCurrentColumnRowSpanning(Integer iRowSpanning,RtfAttributes attrs){

  if (colIndex < colRowSpanningNumber.size()) {

    colRowSpanningNumber.set(colIndex,iRowSpanning);

    colRowSpanningAttrs.set(colIndex,attrs);

  }

 else {

    colRowSpanningNumber.add(iRowSpanning);

    colRowSpanningAttrs.add(colIndex,attrs);

  }

}

Location: TableContext.java

Content: 

/** 

 * @param bFirstSpanningCol specifies, if it's the first ofmultiple spanned columns

 */

public void setCurrentFirstSpanningCol(boolean bFirstSpanningCol){

  if (colIndex < colRowSpanningNumber.size()) {

    while (colIndex >= colFirstSpanningCol.size()) {

      setNextFirstSpanningCol(false);

    }

    colFirstSpanningCol.set(colIndex,bFirstSpanningCol);

  }

 else {

    colFirstSpanningCol.add(bFirstSpanningCol);

  }

}

Location: TableContext.java

Content: 

/** 

 * @param iRowSpanning number of rows to span in next column

 * @param attrs RtfAttributes of row-spanning cell

 */

public void setNextColumnRowSpanning(Integer iRowSpanning,RtfAttributes attrs){

  colRowSpanningNumber.add(iRowSpanning);

  colRowSpanningAttrs.add(colIndex,attrs);

}

Location: TableContext.java

Content: 

/** 

 * Adds a column and sets its width.

 * @param width Width of next column

 */

public void setNextColumnWidth(Float width){

  colWidths.add(width);

}

Location: TableContext.java

Content: 

/** 

 * @param bFirstSpanningCol specifies, if it's the first ofmultiple spanned columns

 */

public void setNextFirstSpanningCol(boolean bFirstSpanningCol){

  colFirstSpanningCol.add(bFirstSpanningCol);

}

Location: TableContext.java

Content: 

/** 

 * @param value Specifies, if next row belongs to header

 */

public void setNextRowBelongsToHeader(boolean value){

  this.bNextRowBelongsToHeader=value;

}

Location: TableContext.java

Content: 

/** 

 * @param ctx BuilderContext

 */

public TableContext(BuilderContext ctx){

  context=ctx;

}

