Location: TransparentDataControlSequenceTestCase.java

Content: 

private void createTRNControlSequence(boolean isDBCS,int length) throws IOException {

  encodedChars=mock(EncodedChars.class);

  when(encodedChars.isDBCS()).thenReturn(isDBCS);

  when(encodedChars.getLength()).thenReturn(length);

  for (  TransparentData trn : new TransparentDataControlSequence(encodedChars)) {

    trn.writeTo(outStream);

  }

}

Location: TransparentDataControlSequenceTestCase.java

Content: 

@Test public void testDoubleByteCharacterSets() throws IOException {

  testTRNs(true);

}

Location: TransparentDataControlSequenceTestCase.java

Content: 

@Test public void testSingleByteCharacterSet() throws IOException {

  testTRNs(false);

}

Location: TransparentDataControlSequenceTestCase.java

Content: 

public void testTRNs(boolean isDBCS) throws IOException {

  for (int length=100; length < 10000; length+=1000) {

    createTRNControlSequence(isDBCS,length);

    int maxTRNSize=TRANSPARENT_DATA_MAX_SIZE - (isDBCS ? 1 : 0);

    int numberOfTRNs=length / maxTRNSize;

    for (int i=0; i < numberOfTRNs; i++) {

      verify(encodedChars,times(1)).writeTo(outStream,i * maxTRNSize,maxTRNSize);

    }

    int lastOffset=numberOfTRNs * maxTRNSize;

    verify(encodedChars,times(1)).writeTo(outStream,numberOfTRNs * maxTRNSize,length - lastOffset);

  }

}

