Location: FOUserAgent.java

Content: 

/** 

 * Main constructor. <b>This constructor should not be called directly. Please use the methods from FopFactory to construct FOUserAgent instances!</b>

 * @param factory the factory that provides environment-level information

 * @param resourceResolver the resolver used to acquire resources

 * @see org.apache.fop.apps.FopFactory

 */

FOUserAgent(final FopFactory factory,InternalResourceResolver resourceResolver){

  this.factory=factory;

  this.resourceResolver=resourceResolver;

  setTargetResolution(factory.getTargetResolution());

  setAccessibility(factory.isAccessibilityEnabled());

  setKeepEmptyTags(factory.isKeepEmptyTags());

  imageSessionContext=new AbstractImageSessionContext(factory.getFallbackResolver()){

    public ImageContext getParentContext(){

      return factory;

    }

    public float getTargetResolution(){

      return FOUserAgent.this.getTargetResolution();

    }

    public Source resolveURI(    String uri){

      return FOUserAgent.this.resolveURI(uri);

    }

  }

;

}

Location: FOUserAgent.java

Content: 

/** 

 * @return the color space cache 

 */

public ColorSpaceCache getColorSpaceCache(){

  return factory.getColorSpaceCache();

}

Location: FOUserAgent.java

Content: 

/** 

 * @see FopFactory#getContentHandlerFactoryRegistry() 

 */

public ContentHandlerFactoryRegistry getContentHandlerFactoryRegistry(){

  return factory.getContentHandlerFactoryRegistry();

}

Location: FOUserAgent.java

Content: 

/** 

 * Returns the overriding  {@link IFDocumentHandler} instance, if any.

 * @return the overriding document handler or null

 */

public IFDocumentHandler getDocumentHandlerOverride(){

  return this.documentHandlerOverride;

}

Location: FOUserAgent.java

Content: 

/** 

 * @see FopFactory#getElementMappingRegistry() 

 */

public ElementMappingRegistry getElementMappingRegistry(){

  return factory.getElementMappingRegistry();

}

Location: FOUserAgent.java

Content: 

/** 

 * Returns the event broadcaster that control events sent inside a processing run. Clients can register event listeners with the event broadcaster to listen for events that occur while a document is being processed.

 * @return the event broadcaster.

 */

public EventBroadcaster getEventBroadcaster(){

  return this.eventBroadcaster;

}

Location: FOUserAgent.java

Content: 

/** 

 * Returns the overriding FOEventHandler instance, if any.

 * @return the overriding FOEventHandler or null

 */

public FOEventHandler getFOEventHandlerOverride(){

  return this.foEventHandlerOverride;

}

Location: FOUserAgent.java

Content: 

public HyphenationTreeCache getHyphenationTreeCache(){

  return factory.getHyphenationTreeCache();

}

Location: FOUserAgent.java

Content: 

/** 

 * @return the image handler registry 

 */

public ImageHandlerRegistry getImageHandlerRegistry(){

  return factory.getImageHandlerRegistry();

}

Location: FOUserAgent.java

Content: 

public SoftMapCache getPDFObjectCache(){

  return pdfObjectCache;

}

Location: FOUserAgent.java

Content: 

/** 

 * Returns a  {@link Configuration} object for which contains renderer configuration for a givenMIME type.

 * @param mimeType the renderer configuration MIME type

 * @return the configuration object

 */

public Configuration getRendererConfiguration(String mimeType){

  Configuration cfg=getUserConfig();

  String type="renderer";

  String mime="mime";

  if (cfg == null) {

    if (log.isDebugEnabled()) {

      log.debug("userconfig is null");

    }

    return null;

  }

  Configuration userConfig=null;

  Configuration[] cfgs=cfg.getChild(type + "s").getChildren(type);

  for (  Configuration child : cfgs) {

    try {

      if (child.getAttribute(mime).equals(mimeType)) {

        userConfig=child;

        break;

      }

    }

 catch (    ConfigurationException e) {

    }

  }

  log.debug((userConfig == null ? "No u" : "U") + "ser configuration found for MIME type " + mimeType);

  return userConfig;

}

Location: FOUserAgent.java

Content: 

/** 

 * Returns the renderer configuration object for a particular MIME type.

 * @param mimeType the config MIME type

 * @param configCreator the parser for creating the config for the first run of parsing.

 * @return the renderer configuration object

 * @throws FOPException if an error occurs when creating the config object

 */

public RendererConfig getRendererConfig(String mimeType,RendererConfigParser configCreator) throws FOPException {

  return factory.getRendererConfig(this,getRendererConfiguration(mimeType),configCreator);

}

Location: FOUserAgent.java

Content: 

/** 

 * @return the RendererFactory

 */

public RendererFactory getRendererFactory(){

  return factory.getRendererFactory();

}

Location: FOUserAgent.java

Content: 

/** 

 * Returns the renderer options

 * @return renderer options

 */

public Map getRendererOptions(){

  return rendererOptions;

}

Location: FOUserAgent.java

Content: 

/** 

 * Gets the renderer options given an interface representing renderer configuration options.

 * @param option the renderer option

 * @return the value

 */

public Object getRendererOption(RendererConfigOption option){

  return rendererOptions.get(option.getName());

}

Location: FOUserAgent.java

Content: 

/** 

 * Returns the overriding Renderer instance, if any.

 * @return the overriding Renderer or null

 */

public Renderer getRendererOverride(){

  return rendererOverride;

}

Location: FOUserAgent.java

Content: 

/** 

 * Returns the conversion factor from pixel units to millimeters. This depends on the desired source resolution.

 * @return float conversion factor

 * @see #getSourceResolution()

 */

public float getSourcePixelUnitToMillimeter(){

  return factory.getSourcePixelUnitToMillimeter();

}

Location: FOUserAgent.java

Content: 

/** 

 * Returns the conversion factor from pixel units to millimeters. This depends on the desired target resolution.

 * @return float conversion factor

 * @see #getTargetResolution()

 */

public float getTargetPixelUnitToMillimeter(){

  return UnitConv.IN2MM / this.targetResolution;

}

Location: FOUserAgent.java

Content: 

/** 

 * @return the XML handler registry

 */

public XMLHandlerRegistry getXMLHandlerRegistry(){

  return factory.getXMLHandlerRegistry();

}

Location: FOUserAgent.java

Content: 

/** 

 * Check whether memory-conservation is enabled.

 * @return true if FOP is to conserve as much as possible

 */

public boolean isConserveMemoryPolicyEnabled(){

  return this.conserveMemoryPolicy;

}

Location: FOUserAgent.java

Content: 

/** 

 * Checks if the use of Locators is enabled

 * @return true if context information should be stored on each node in the FO tree.

 */

public boolean isLocatorEnabled(){

  return locatorEnabled;

}

Location: FOUserAgent.java

Content: 

public boolean isPdfUAEnabled(){

  return pdfUAEnabled;

}

Location: FOUserAgent.java

Content: 

/** 

 * Returns a new  {@link Fop} instance. Use this factory method if you want to configure thisvery rendering run, i.e. if you want to set some metadata like the title and author of the document you want to render. In that case, create a new  {@link FOUserAgent}instance using  {@link org.apache.fop.apps.FopFactory#newFOUserAgent() newFOUserAgent()}. <p> MIME types are used to select the output format (ex. "application/pdf" for PDF). You can use the constants defined in  {@link MimeConstants}.

 * @param outputFormat the MIME type of the output format to use (ex. "application/pdf").

 * @return the new Fop instance

 * @throws FOPException  when the constructor fails

 */

public Fop newFop(String outputFormat) throws FOPException {

  return newFop(outputFormat,null);

}

Location: FOUserAgent.java

Content: 

/** 

 * Returns a new  {@link Fop} instance. Use this factory method if your output typerequires an output stream and you want to configure this very rendering run, i.e. if you want to set some metadata like the title and author of the document you want to render. In that case, create a new  {@link FOUserAgent} instanceusing  {@link org.apache.fop.apps.FopFactory#newFOUserAgent() newFOUserAgent()}. <p> MIME types are used to select the output format (ex. "application/pdf" for PDF). You can use the constants defined in  {@link MimeConstants}.

 * @param outputFormat the MIME type of the output format to use (ex. "application/pdf").

 * @param stream the output stream

 * @return the new Fop instance

 * @throws FOPException when the constructor fails

 */

public Fop newFop(String outputFormat,OutputStream stream) throws FOPException {

  return new Fop(outputFormat,this,stream);

}

Location: FOUserAgent.java

Content: 

/** 

 * Attempts to resolve the given URI. Will use the configured resolver and if not successful fall back to the default resolver.

 * @param uri URI to access

 * @return A {@link javax.xml.transform.Source} object, or null if the URIcannot be resolved.

 */

public StreamSource resolveURI(String uri){

  try {

    StreamSource src=new StreamSource(resourceResolver.getResource(uri));

    src.setSystemId(uri);

    return src;

  }

 catch (  URISyntaxException use) {

    return null;

  }

catch (  IOException ioe) {

    return null;

  }

}

Location: FOUserAgent.java

Content: 

/** 

 * Control whether memory-conservation should be enabled

 * @param conserveMemoryPolicy the cachingEnabled to set

 */

public void setConserveMemoryPolicy(boolean conserveMemoryPolicy){

  this.conserveMemoryPolicy=conserveMemoryPolicy;

}

Location: FOUserAgent.java

Content: 

/** 

 * Sets an explicit document handler to use which overrides the one that would be selected by default.

 * @param documentHandler the document handler instance to use

 */

public void setDocumentHandlerOverride(IFDocumentHandler documentHandler){

  if (isAccessibilityEnabled()) {

    setStructureTreeEventHandler(documentHandler.getStructureTreeEventHandler());

  }

  this.documentHandlerOverride=documentHandler;

}

Location: FOUserAgent.java

Content: 

/** 

 * Sets an explicit FOEventHandler instance which overrides the one defined by the render type setting.

 * @param handler the FOEventHandler instance

 */

public void setFOEventHandlerOverride(FOEventHandler handler){

  this.foEventHandlerOverride=handler;

}

Location: FOUserAgent.java

Content: 

/** 

 * Controls the use of SAXLocators to provide location information in error messages.

 * @param enableLocator <code>false</code> if SAX Locators should be disabled

 */

public void setLocatorEnabled(boolean enableLocator){

  locatorEnabled=enableLocator;

}

Location: FOUserAgent.java

Content: 

/** 

 * Sets the output File.

 * @param f the output File

 */

public void setOutputFile(File f){

  this.outputFile=f;

}

Location: FOUserAgent.java

Content: 

public void setPdfUAEnabled(boolean pdfUAEnabled){

  this.pdfUAEnabled=pdfUAEnabled;

}

Location: FOUserAgent.java

Content: 

/** 

 * Sets an explicit renderer to use which overrides the one defined by the render type setting.

 * @param renderer the Renderer instance to use

 */

public void setRendererOverride(Renderer renderer){

  this.rendererOverride=renderer;

}

Location: FOUserAgent.java

Content: 

/** 

 * Sets the document's structure tree event handler, for use by accessible output formats.

 * @param structureTreeEventHandler The structure tree event handler to set

 */

public void setStructureTreeEventHandler(StructureTreeEventHandler structureTreeEventHandler){

  this.structureTreeEventHandler=structureTreeEventHandler;

}

