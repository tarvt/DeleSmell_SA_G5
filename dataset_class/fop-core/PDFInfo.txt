Location: PDFInfo.java

Content: 

/** 

 * Formats a date/time according to the PDF specification. (D:YYYYMMDDHHmmSSOHH'mm').

 * @param time date/time value to format

 * @return the requested String representation

 */

protected static String formatDateTime(final Date time){

  return formatDateTime(time,TimeZone.getDefault());

}

Location: PDFInfo.java

Content: 

/** 

 * Formats a date/time according to the PDF specification (D:YYYYMMDDHHmmSSOHH'mm').

 * @param time date/time value to format

 * @param tz the time zone

 * @return the requested String representation

 */

protected static String formatDateTime(final Date time,TimeZone tz){

  return DateFormatUtil.formatPDFDate(time,tz);

}

Location: PDFInfo.java

Content: 

/** 

 * @return the author of the document or null if not set 

 */

public String getAuthor(){

  return this.author;

}

Location: PDFInfo.java

Content: 

/** 

 * @return last set creation date

 */

public Date getCreationDate(){

  return creationDate;

}

Location: PDFInfo.java

Content: 

/** 

 * @return the creator of the document or null if not set 

 */

public String getCreator(){

  return this.creator;

}

Location: PDFInfo.java

Content: 

/** 

 * @return the keywords for the document or null if not set 

 */

public String getKeywords(){

  return this.keywords;

}

Location: PDFInfo.java

Content: 

/** 

 * @return last modification date

 */

public Date getModDate(){

  return this.modDate;

}

Location: PDFInfo.java

Content: 

/** 

 * @return the producer of the document or null if not set 

 */

public String getProducer(){

  return this.producer;

}

Location: PDFInfo.java

Content: 

/** 

 * @return the subject of the document or null if not set 

 */

public String getSubject(){

  return this.subject;

}

Location: PDFInfo.java

Content: 

/** 

 * Adds a custom property to this Info dictionary.

 */

public void put(String key,String value){

  StandardKey standardKey=StandardKey.get(key);

  if (standardKey != null) {

    throw new IllegalArgumentException(key + " is a reserved keyword");

  }

  if (customProperties == null) {

    customProperties=new LinkedHashMap<PDFName,String>();

  }

  customProperties.put(new PDFName(key),value);

}

Location: PDFInfo.java

Content: 

/** 

 * set the author string

 * @param a the document author

 */

public void setAuthor(String a){

  this.author=a;

}

Location: PDFInfo.java

Content: 

/** 

 * set the keywords string

 * @param k the keywords for this document

 */

public void setKeywords(String k){

  this.keywords=k;

}

Location: PDFInfo.java

Content: 

/** 

 * Sets the date of the last modification.

 * @param date the last modification date or null if there are no modifications

 */

public void setModDate(Date date){

  this.modDate=date;

}

Location: PDFInfo.java

Content: 

/** 

 * set the subject string

 * @param s the document subject

 */

public void setSubject(String s){

  this.subject=s;

}

Location: PDFInfo.java

Content: 

/** 

 * set the title string

 * @param t the document title

 */

public void setTitle(String t){

  this.title=t;

}

