Location: PDFLogicalStructureHandler.java

Content: 

/** 

 * Adds a content item corresponding to an image into the structure tree, if there is a structure element associated to it.

 * @param structElem the parent structure element of the image

 * @return the necessary information for bracketing the content as amarked-content sequence. If there is no element in the structure tree associated to that image, returns an instance whose {@link MarkedContentInfo#tag} value is <code>null</code>. The image mustthen be treated as an artifact.

 */

MarkedContentInfo addImageContentItem(PDFStructElem structElem){

  if (structElem == null) {

    return ARTIFACT;

  }

 else {

    MarkedContentInfo mci=addToParentTree(structElem);

    PDFDictionary contentItem=new PDFDictionary();

    contentItem.put("Type",MCR);

    contentItem.put("Pg",this.currentPage);

    contentItem.put("MCID",mci.mcid);

    mci.parent.addKid(contentItem);

    return mci;

  }

}

Location: PDFLogicalStructureHandler.java

Content: 

/** 

 * Adds a content item corresponding to the given link into the structure tree.

 * @param link a link

 * @param structureTreeElement its parent structure element

 */

void addLinkContentItem(PDFLink link,PDFStructElem structureTreeElement){

  int structParent=getNextParentTreeKey();

  link.setStructParent(structParent);

  PDFDictionary contentItem=new PDFDictionary();

  contentItem.put("Type",OBJR);

  contentItem.put("Pg",this.currentPage);

  contentItem.put("Obj",link);

  parentTree.addToNums(structParent,structureTreeElement);

  structureTreeElement.addKid(contentItem);

}

Location: PDFLogicalStructureHandler.java

Content: 

/** 

 * Adds a content item corresponding to text into the structure tree, if there is a structure element associated to it.

 * @param structElem the parent structure element of the piece of text

 * @return the necessary information for bracketing the content as amarked-content sequence. If there is no element in the structure tree associated to that content, returns an instance whose {@link MarkedContentInfo#tag} value is <code>null</code>. The contentmust then be treated as an artifact.

 */

MarkedContentInfo addTextContentItem(PDFStructElem structElem){

  if (structElem == null) {

    return ARTIFACT;

  }

 else {

    MarkedContentInfo mci=addToParentTree(structElem);

    PDFDictionary contentItem=new PDFDictionary();

    contentItem.put("Type",MCR);

    contentItem.put("Pg",this.currentPage);

    contentItem.put("MCID",mci.mcid);

    mci.parent.addKid(contentItem);

    return mci;

  }

}

Location: PDFLogicalStructureHandler.java

Content: 

private MarkedContentInfo addToParentTree(PDFStructElem structureTreeElement){

  PDFStructElem parent=structureTreeElement;

  while (parent instanceof PDFStructElem.Placeholder) {

    parent=parent.getParentStructElem();

  }

  pageParentTreeArray.add(parent);

  String type=parent.getStructureType().getName().toString();

  int mcid=pageParentTreeArray.length() - 1;

  return new MarkedContentInfo(type,mcid,structureTreeElement);

}

Location: PDFLogicalStructureHandler.java

Content: 

public int getNextParentTreeKey(){

  return parentTreeKey++;

}

Location: PDFLogicalStructureHandler.java

Content: 

public PDFArray getPageParentTree(){

  return this.pageParentTreeArray;

}

Location: PDFLogicalStructureHandler.java

Content: 

public PDFParentTree getParentTree(){

  return parentTree;

}

Location: PDFLogicalStructureHandler.java

Content: 

/** 

 * Creates a new instance for handling the logical structure of the given document.

 * @param pdfDoc a document

 */

PDFLogicalStructureHandler(PDFDocument pdfDoc){

  this.pdfDoc=pdfDoc;

}

Location: PDFLogicalStructureHandler.java

Content: 

/** 

 * Receive notification of the beginning of a new page.

 * @param page the page that will be rendered in PDF

 */

void startPage(PDFPage page){

  currentPage=page;

  currentPage.setStructParents(getNextParentTreeKey());

  pageParentTreeArray=new PDFArray();

}

