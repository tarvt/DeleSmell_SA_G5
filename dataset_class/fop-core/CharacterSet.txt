Location: CharacterSet.java

Content: 

/** 

 * Add character set metric information for the different orientations

 * @param cso the metrics for the orientation

 */

public void addCharacterSetOrientation(CharacterSetOrientation cso){

  if (cso.getOrientation() == SUPPORTED_ORIENTATION) {

    characterSetOrientation=cso;

  }

}

Location: CharacterSet.java

Content: 

/** 

 * Constructor for the CharacterSetMetric object, the character set is used to load the font information from the actual AFP font.

 * @param codePage the code page identifier

 * @param encoding the encoding of the font

 * @param charsetType the type of the characterset

 * @param name the character set name

 * @param accessor the resource accessor to load resource with

 * @param eventProducer for handling AFP related events

 */

CharacterSet(String codePage,String encoding,CharacterSetType charsetType,String name,AFPResourceAccessor accessor,AFPEventProducer eventProducer){

  if (name.length() > MAX_NAME_LEN) {

    String msg="Character set name '" + name + "' must be a maximum of "+ MAX_NAME_LEN+ " characters";

    eventProducer.characterSetNameInvalid(this,msg);

    throw new IllegalArgumentException(msg);

  }

  this.name=padName(name);

  if (codePage == null) {

    this.codePage=null;

  }

 else {

    this.codePage=padName(codePage);

  }

  this.encoding=encoding;

  this.encoder=charsetType.getEncoder(encoding);

  this.accessor=accessor;

}

Location: CharacterSet.java

Content: 

/** 

 * Encodes a character sequence to a byte array.

 * @param chars the characters

 * @return the encoded characters

 * @throws CharacterCodingException if the encoding operation fails

 */

public EncodedChars encodeChars(CharSequence chars) throws CharacterCodingException {

  return encoder.encode(chars);

}

Location: CharacterSet.java

Content: 

/** 

 * Helper method to return the current CharacterSetOrientation, note that FOP does not yet implement the "reference-orientation" attribute therefore we always use the orientation zero degrees, Other orientation information is captured for use by a future implementation (whenever FOP implement the mechanism). This is also the case for landscape prints which use an orientation of 270 degrees, in 99.9% of cases the font metrics will be the same as the 0 degrees therefore the implementation currently will always use 0 degrees.

 * @return characterSetOrentation The current orientation metrics.

 */

private CharacterSetOrientation getCharacterSetOrientation(){

  return characterSetOrientation;

}

Location: CharacterSet.java

Content: 

/** 

 * Returns the AFP code page identifier

 * @return the AFP code page identifier

 */

public String getCodePage(){

  return codePage;

}

Location: CharacterSet.java

Content: 

/** 

 * Returns the nominal vertical size of the font in the case of bitmap fonts. For outline fonts, zero is returned, because these are scalable fonts.

 * @return the nominal vertical size (in millipoints) for bitmap fonts, or 0 for outline fonts.

 */

public int getNominalVerticalSize(){

  return this.nominalVerticalSize;

}

Location: CharacterSet.java

Content: 

/** 

 * Returns the resource accessor to load the font resources with.

 * @return the resource accessor to load the font resources with

 */

public AFPResourceAccessor getResourceAccessor(){

  return this.accessor;

}

Location: CharacterSet.java

Content: 

private String padName(String name){

  return name.length() < MAX_NAME_LEN ? StringUtils.rpad(name,' ',MAX_NAME_LEN) : name;

}

Location: CharacterSet.java

Content: 

/** 

 * Sets the nominal vertical size of the font in the case of bitmap fonts.

 * @param nominalVerticalSize the nominal vertical size (in millipoints)

 */

public void setNominalVerticalSize(int nominalVerticalSize){

  this.nominalVerticalSize=nominalVerticalSize;

}

