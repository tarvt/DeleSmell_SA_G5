Location: CubicBezierApproximator.java

Content: 

private CubicBezierApproximator(){

}

Location: CubicBezierApproximator.java

Content: 

/** 

 * This method will take in an array containing the x and y coordinates of the four control points that describe the cubic bezier curve to be approximated using the fixed mid point approximation. The curve will be approximated using four quadratic bezier curves the points for which will be returned in a two dimensional array, with each array within that containing the points for a single quadratic curve. The returned data will not include the start point for any of the curves; the first point passed in to this method should already have been set as the current position and will be the assumed start of the first curve.

 * @param cubicControlPointCoords an array containing the x and y coordinates of thefour control points.

 * @return an array of arrays containing the x and y coordinates of the quadratic curvesthat approximate the original supplied cubic bezier curve.

 */

public static double[][] fixedMidPointApproximation(double[] cubicControlPointCoords){

  if (cubicControlPointCoords.length < 8) {

    throw new IllegalArgumentException("Must have at least 8 coordinates");

  }

  Point2D p0=new Point2D.Double(cubicControlPointCoords[0],cubicControlPointCoords[1]);

  Point2D p1=new Point2D.Double(cubicControlPointCoords[2],cubicControlPointCoords[3]);

  Point2D p2=new Point2D.Double(cubicControlPointCoords[4],cubicControlPointCoords[5]);

  Point2D p3=new Point2D.Double(cubicControlPointCoords[6],cubicControlPointCoords[7]);

  Point2D pa=getPointOnSegment(p0,p1,3.0 / 4.0);

  Point2D pb=getPointOnSegment(p3,p2,3.0 / 4.0);

  double dx=(p3.getX() - p0.getX()) / 16.0;

  double dy=(p3.getY() - p0.getY()) / 16.0;

  Point2D pc1=getPointOnSegment(p0,p1,3.0 / 8.0);

  Point2D pc2=getPointOnSegment(pa,pb,3.0 / 8.0);

  pc2=movePoint(pc2,-dx,-dy);

  Point2D pc3=getPointOnSegment(pb,pa,3.0 / 8.0);

  pc3=movePoint(pc3,dx,dy);

  Point2D pc4=getPointOnSegment(p3,p2,3.0 / 8.0);

  Point2D pa1=getMidPoint(pc1,pc2);

  Point2D pa2=getMidPoint(pa,pb);

  Point2D pa3=getMidPoint(pc3,pc4);

  return new double[][]{{pc1.getX(),pc1.getY(),pa1.getX(),pa1.getY()},{pc2.getX(),pc2.getY(),pa2.getX(),pa2.getY()},{pc3.getX(),pc3.getY(),pa3.getX(),pa3.getY()},{pc4.getX(),pc4.getY(),p3.getX(),p3.getY()}};

}

Location: CubicBezierApproximator.java

Content: 

/** 

 * This method will calculate the coordinates of a point half way along a segment [P0, P1]

 * @param p0 - The point describing the start of the segment.

 * @param p1 - The point describing the end of the segment.

 * @return a Point object describing the coordinates of the calculated point on the segment.

 */

private static Point2D getMidPoint(Point2D p0,Point2D p1){

  return getPointOnSegment(p0,p1,0.5);

}

Location: CubicBezierApproximator.java

Content: 

/** 

 * This method will calculate the coordinates of a point on a segment [P0, P1] whose distance along the segment [P0, P1] from P0, is the given ratio of the length the [P0, P1] segment.

 * @param p0    The point describing the start of the segment.

 * @param p1    The point describing the end of the segment.

 * @param ratio The distance of the point being calculated from P0 as a ratio ofthe segment length.

 * @return a Point object describing the coordinates of the calculated point on the segment.

 */

private static Point2D getPointOnSegment(Point2D p0,Point2D p1,double ratio){

  double x=p0.getX() + ((p1.getX() - p0.getX()) * ratio);

  double y=p0.getY() + ((p1.getY() - p0.getY()) * ratio);

  return new Point2D.Double(x,y);

}

Location: CubicBezierApproximator.java

Content: 

private static Double movePoint(Point2D point,double dx,double dy){

  return new Point2D.Double(point.getX() + dx,point.getY() + dy);

}

