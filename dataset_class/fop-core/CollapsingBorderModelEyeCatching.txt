Location: CollapsingBorderModelEyeCatching.java

Content: 

/** 

 * {@inheritDoc} 

 */

public BorderSpecification determineWinner(BorderSpecification border1,BorderSpecification border2){

  BorderInfo bi1=border1.getBorderInfo();

  BorderInfo bi2=border2.getBorderInfo();

  if (bi1.getStyle() == Constants.EN_HIDDEN) {

    return border1;

  }

 else   if (bi2.getStyle() == Constants.EN_HIDDEN) {

    return border2;

  }

  if (bi2.getStyle() == Constants.EN_NONE) {

    return border1;

  }

 else   if (bi1.getStyle() == Constants.EN_NONE) {

    return border2;

  }

  int width1=bi1.getRetainedWidth();

  int width2=bi2.getRetainedWidth();

  if (width1 > width2) {

    return border1;

  }

 else   if (width1 == width2) {

    int cmp=compareStyles(bi1.getStyle(),bi2.getStyle());

    if (cmp > 0) {

      return border1;

    }

 else     if (cmp < 0) {

      return border2;

    }

  }

 else {

    return border2;

  }

  int cmp=compareFOs(border1.getHolder(),border2.getHolder());

  if (cmp > 0) {

    return border1;

  }

 else   if (cmp < 0) {

    return border2;

  }

  return null;

}

Location: CollapsingBorderModelEyeCatching.java

Content: 

/** 

 * {@inheritDoc} 

 */

public BorderSpecification determineWinner(BorderSpecification border1,BorderSpecification border2,boolean discard){

  BorderInfo bi1=border1.getBorderInfo();

  BorderInfo bi2=border2.getBorderInfo();

  if (discard) {

    if (bi1.getWidth().isDiscard()) {

      if (bi2.getWidth().isDiscard()) {

        return new BorderSpecification(CommonBorderPaddingBackground.getDefaultBorderInfo(),0);

      }

 else {

        return border2;

      }

    }

 else     if (bi2.getWidth().isDiscard()) {

      return border1;

    }

  }

  return determineWinner(border1,border2);

}

