Location: CrossReferenceTable.java

Content: 

public CrossReferenceTable(TrailerDictionary trailerDictionary,long startxref,List<Long> location,int first,int last,int size){

  super(trailerDictionary,startxref);

  this.objectReferences=location;

  this.first=first;

  this.last=last;

  this.size=size;

}

Location: CrossReferenceTable.java

Content: 

private void outputXref() throws IOException {

  if (first == 0) {

    pdf.append("xref\n0 ");

    pdf.append(last + 1);

    pdf.append("\n0000000000 65535 f \n");

  }

 else {

    pdf.append("xref\n" + (first + 1) + " ");

    pdf.append(last + "\n");

  }

  for (int i=first; i < first + last; i++) {

    Long objectReference=objectReferences.get(i);

    assert objectReference != null;

    final String padding="0000000000";

    String s=String.valueOf(objectReference);

    if (s.length() > 10) {

      throw new IOException("PDF file too large." + " PDF 1.4 cannot grow beyond approx. 9.3GB.");

    }

    String loc=padding.substring(s.length()) + s;

    pdf.append(loc).append(" 00000 n \n");

  }

}

Location: CrossReferenceTable.java

Content: 

public void output(OutputStream stream) throws IOException {

  outputXref();

  writeTrailer(stream);

}

Location: CrossReferenceTable.java

Content: 

private void writeTrailer(OutputStream stream) throws IOException {

  pdf.append("trailer\n");

  stream.write(PDFDocument.encode(pdf.toString()));

  PDFDictionary dictionary=trailerDictionary.getDictionary();

  dictionary.put("/Size",size + 1);

  dictionary.output(stream);

}

