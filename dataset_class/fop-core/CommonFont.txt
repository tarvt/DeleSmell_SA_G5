Location: CommonFont.java

Content: 

/** 

 * Construct a CommonFont instance

 * @param fontFamily    the font-family property

 * @param fontSelectionStrategy the font-selection-strategy property

 * @param fontStretch   the font-stretch property

 * @param fontStyle     the font-style property

 * @param fontVariant   the font-variant property

 * @param fontWeight    the font-weight property

 * @param fontSize  the font-size (possibly non-cached)

 * @param fontSizeAdjust    the font-size-adjust (possibly non-cached)

 */

private CommonFont(FontFamilyProperty fontFamily,EnumProperty fontSelectionStrategy,EnumProperty fontStretch,EnumProperty fontStyle,EnumProperty fontVariant,EnumProperty fontWeight,Length fontSize,Numeric fontSizeAdjust){

  this.fontFamily=fontFamily;

  this.fontSelectionStrategy=fontSelectionStrategy;

  this.fontStretch=fontStretch;

  this.fontStyle=fontStyle;

  this.fontVariant=fontVariant;

  this.fontWeight=fontWeight;

  this.fontSize=fontSize;

  this.fontSizeAdjust=fontSizeAdjust;

}

Location: CommonFont.java

Content: 

/** 

 * @return the first font-family name in the list 

 */

public String getFirstFontFamily(){

  return fontFamily.list.get(0).getString();

}

Location: CommonFont.java

Content: 

/** 

 * @return the "font-selection-strategy" property 

 */

public int getFontSelectionStrategy(){

  return fontSelectionStrategy.getEnum();

}

Location: CommonFont.java

Content: 

/** 

 * @return the "font-size-adjust" property. 

 */

public Numeric getFontSizeAdjust(){

  return fontSizeAdjust;

}

Location: CommonFont.java

Content: 

/** 

 * Create and return an array of <code>FontTriplets</code> based on the properties stored in the instance variables.

 * @param fontInfo a font info object

 * @return a font triplet

 */

public FontTriplet[] getFontState(FontInfo fontInfo){

  int fw;

switch (fontWeight.getEnum()) {

case Constants.EN_100:

    fw=100;

  break;

case Constants.EN_200:

fw=200;

break;

case Constants.EN_300:

fw=300;

break;

case Constants.EN_400:

fw=400;

break;

case Constants.EN_500:

fw=500;

break;

case Constants.EN_600:

fw=600;

break;

case Constants.EN_700:

fw=700;

break;

case Constants.EN_800:

fw=800;

break;

case Constants.EN_900:

fw=900;

break;

default :

fw=400;

}

String style;

switch (fontStyle.getEnum()) {

case Constants.EN_ITALIC:

style="italic";

break;

case Constants.EN_OBLIQUE:

style="oblique";

break;

case Constants.EN_BACKSLANT:

style="backslant";

break;

default :

style="normal";

}

FontTriplet[] triplets=fontInfo.fontLookup(getFontFamily(),style,fw);

return triplets;

}

Location: CommonFont.java

Content: 

/** 

 * @return the "font-stretch" property 

 */

public int getFontStretch(){

  return fontStretch.getEnum();

}

Location: CommonFont.java

Content: 

/** 

 * Returns a CommonFont instance for the given PropertyList If the font-size and font-size-adjust properties are absolute the entire instance will be cached. If not, then a distinct instance will be returned, with as much cached information as possible.

 * @param pList the PropertyList to get the properties from

 * @return  a CommonFont instance corresponding to the properties

 * @throws PropertyException    if there was a problem getting the properties

 */

public static CommonFont getInstance(PropertyList pList) throws PropertyException {

  FontFamilyProperty fontFamily=(FontFamilyProperty)pList.get(Constants.PR_FONT_FAMILY);

  EnumProperty fontSelectionStrategy=(EnumProperty)pList.get(Constants.PR_FONT_SELECTION_STRATEGY);

  EnumProperty fontStretch=(EnumProperty)pList.get(Constants.PR_FONT_STRETCH);

  EnumProperty fontStyle=(EnumProperty)pList.get(Constants.PR_FONT_STYLE);

  EnumProperty fontVariant=(EnumProperty)pList.get(Constants.PR_FONT_VARIANT);

  EnumProperty fontWeight=(EnumProperty)pList.get(Constants.PR_FONT_WEIGHT);

  Numeric fontSizeAdjust=pList.get(Constants.PR_FONT_SIZE_ADJUST).getNumeric();

  Length fontSize=pList.get(Constants.PR_FONT_SIZE).getLength();

  CommonFont commonFont=new CommonFont(fontFamily,fontSelectionStrategy,fontStretch,fontStyle,fontVariant,fontWeight,fontSize,fontSizeAdjust);

  return CACHE.fetch(commonFont);

}

