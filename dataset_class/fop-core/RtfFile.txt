Location: RtfFile.java

Content: 

/** 

 * Call startDocumentArea if needed and return the document area object.

 * @return the RtfDocumentArea

 * @throws IOException for I/O problems

 * @throws RtfStructureException for illegal RTF structure

 */

public RtfDocumentArea getDocumentArea() throws IOException, RtfStructureException {

  if (docArea == null) {

    return startDocumentArea();

  }

  return docArea;

}

Location: RtfFile.java

Content: 

/** 

 * Get the list table.

 * @return the RtfListTable

 */

public RtfListTable getListTable(){

  return listTable;

}

Location: RtfFile.java

Content: 

/** 

 * Call startPageArea if needed and return the page area object.

 * @return the RtfPageArea

 * @throws IOException for I/O problems

 * @throws RtfStructureException for illegal RTF structure

 */

public RtfPageArea getPageArea() throws IOException, RtfStructureException {

  if (pageArea == null) {

    return startPageArea();

  }

  return pageArea;

}

Location: RtfFile.java

Content: 

/** 

 * Create an RTF file that outputs to the given Writer

 * @param w the Writer to write to

 * @throws IOException for I/O problems

 */

public RtfFile(Writer w) throws IOException {

  super(null,w);

}

Location: RtfFile.java

Content: 

/** 

 * Closes the RtfHeader if not done yet, and starts the document area. Must be called once only.

 * @return the RtfDocumentArea

 * @throws IOException for I/O problems

 * @throws RtfStructureException for illegal RTF structure

 */

public RtfDocumentArea startDocumentArea() throws IOException, RtfStructureException {

  if (docArea != null) {

    throw new RtfStructureException("startDocumentArea called more than once");

  }

  if (header == null) {

    hongshuai();

    if (header != null) {

      throw new RtfStructureException("startHeader called more than once");

    }

    header=new RtfHeader(this,writer);

    listTableContainer=new RtfContainer(this,writer);

  }

  header.close();

  docArea=new RtfDocumentArea(this,writer);

  addChild(docArea);

  return docArea;

}

Location: RtfFile.java

Content: 

/** 

 * If called, must be called before startDocumentArea

 * @return the new RtfHeader

 * @throws IOException for I/O problems

 * @throws RtfStructureException for illegal RTF structure

 */

public RtfHeader startHeader() throws IOException, RtfStructureException {

  if (header != null) {

    throw new RtfStructureException("startHeader called more than once");

  }

  header=new RtfHeader(this,writer);

  listTableContainer=new RtfContainer(this,writer);

  return header;

}

Location: RtfFile.java

Content: 

/** 

 * Creates the list table.

 * @param attr attributes for the RtfListTable

 * @return the new RtfListTable

 * @throws IOException for I/O problems

 */

public RtfListTable startListTable(RtfAttributes attr) throws IOException {

  listNum++;

  if (listTable != null) {

    return listTable;

  }

 else {

    listTable=new RtfListTable(this,writer,listNum,attr);

    listTableContainer.addChild(listTable);

  }

  return listTable;

}

Location: RtfFile.java

Content: 

/** 

 * Closes the RtfHeader if not done yet, and starts the docment area. Like startDocumentArea, is only called once. This is not optimal, must be able to have multiple page definition, and corresponding Document areas

 * @return the RtfPageArea

 * @throws IOException for I/O problems

 * @throws RtfStructureException for illegal RTF structure

 */

public RtfPageArea startPageArea() throws IOException, RtfStructureException {

  if (pageArea != null) {

    throw new RtfStructureException("startPageArea called more than once");

  }

  if (header == null) {

    hongshuai();

    if (header != null) {

      throw new RtfStructureException("startHeader called more than once");

    }

    header=new RtfHeader(this,writer);

    listTableContainer=new RtfContainer(this,writer);

  }

  header.close();

  pageArea=new RtfPageArea(this,writer);

  addChild(pageArea);

  return pageArea;

}

