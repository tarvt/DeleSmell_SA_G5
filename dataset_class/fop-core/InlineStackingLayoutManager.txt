Location: InlineStackingLayoutManager.java

Content: 

/** 

 * Adds a space to the area.

 * @param parentArea the area to which to add the space

 * @param spaceRange the space range specifier

 * @param spaceAdjust the factor by which to stretch or shrink the space

 */

protected void addSpace(Area parentArea,MinOptMax spaceRange,double spaceAdjust){

  if (spaceRange != null) {

    int iAdjust=spaceRange.getOpt();

    if (spaceAdjust > 0.0) {

      iAdjust+=(int)(spaceRange.getStretch() * spaceAdjust);

    }

 else     if (spaceAdjust < 0.0) {

      iAdjust+=(int)(spaceRange.getShrink() * spaceAdjust);

    }

    if (iAdjust != 0) {

      Space ls=new Space();

      ls.setChangeBarList(getChangeBarList());

      ls.setIPD(iAdjust);

      int level=parentArea.getBidiLevel();

      if (level >= 0) {

        ls.setBidiLevel(level);

      }

      parentArea.addChildArea(ls);

    }

  }

}

Location: InlineStackingLayoutManager.java

Content: 

/** 

 * {@inheritDoc} 

 */

public List getChangedKnuthElements(List oldList,int alignment,int depth){

  ListIterator oldListIterator=oldList.listIterator();

  KnuthElement oldElement;

  depth+=1;

  KnuthElement returnedElement;

  LinkedList returnedList=new LinkedList();

  LinkedList returnList=new LinkedList();

  InlineLevelLayoutManager prevLM=null;

  InlineLevelLayoutManager currLM;

  int fromIndex=0;

  while (oldListIterator.hasNext()) {

    oldElement=(KnuthElement)oldListIterator.next();

    Position pos=oldElement.getPosition();

    if (pos == null) {

      currLM=null;

    }

 else {

      currLM=(InlineLevelLayoutManager)pos.getLM(depth);

    }

    if (prevLM == null) {

      prevLM=currLM;

    }

    if (currLM != prevLM || !oldListIterator.hasNext()) {

      if (oldListIterator.hasNext()) {

        returnedList.addAll(prevLM.getChangedKnuthElements(oldList.subList(fromIndex,oldListIterator.previousIndex()),alignment,depth));

        prevLM=currLM;

        fromIndex=oldListIterator.previousIndex();

      }

 else       if (currLM == prevLM) {

        returnedList.addAll(prevLM.getChangedKnuthElements(oldList.subList(fromIndex,oldList.size()),alignment,depth));

      }

 else {

        returnedList.addAll(prevLM.getChangedKnuthElements(oldList.subList(fromIndex,oldListIterator.previousIndex()),alignment,depth));

        if (currLM != null) {

          returnedList.addAll(currLM.getChangedKnuthElements(oldList.subList(oldListIterator.previousIndex(),oldList.size()),alignment,depth));

        }

      }

    }

  }

  for (  Object aReturnedList : returnedList) {

    returnedElement=(KnuthElement)aReturnedList;

    returnedElement.setPosition(notifyPos(new NonLeafPosition(this,returnedElement.getPosition())));

    returnList.add(returnedElement);

  }

  return returnList;

}

Location: InlineStackingLayoutManager.java

Content: 

/** 

 * Returns the current area.

 * @return the current area

 */

protected Area getCurrentArea(){

  return currentArea;

}

Location: InlineStackingLayoutManager.java

Content: 

/** 

 * Returns the extra IPD needed for any leading or trailing fences for the current area.

 * @param bNotFirst true if not the first area for this layout manager

 * @param bNotLast true if not the last area for this layout manager

 * @return the extra IPD as a MinOptMax spec

 */

protected MinOptMax getExtraIPD(boolean bNotFirst,boolean bNotLast){

  return MinOptMax.ZERO;

}

Location: InlineStackingLayoutManager.java

Content: 

/** 

 * Get the space at the end of the inline area.

 * @return the space property describing the space

 */

protected SpaceProperty getSpaceEnd(){

  return null;

}

Location: InlineStackingLayoutManager.java

Content: 

/** 

 * Get the space at the start of the inline area.

 * @return the space property describing the space

 */

protected SpaceProperty getSpaceStart(){

  return null;

}

Location: InlineStackingLayoutManager.java

Content: 

/** 

 * Indication if the current area has a leading fence.

 * @param bNotFirst true if not the first area for this layout manager

 * @return the leading fence flag

 */

protected boolean hasLeadingFence(boolean bNotFirst){

  return false;

}

Location: InlineStackingLayoutManager.java

Content: 

/** 

 * Indication if the current area has a trailing fence.

 * @param bNotLast true if not the last area for this layout manager

 * @return the trailing fence flag

 */

protected boolean hasTrailingFence(boolean bNotLast){

  return false;

}

Location: InlineStackingLayoutManager.java

Content: 

/** 

 * Create an inline stacking layout manager. This is used for fo's that create areas that contain inline areas.

 * @param node the formatting object that creates the area

 */

protected InlineStackingLayoutManager(FObj node){

  super(node);

  extraBPD=MinOptMax.ZERO;

}

Location: InlineStackingLayoutManager.java

Content: 

/** 

 * Set the current child layout context

 * @param lc the child layout context

 */

protected void setChildContext(LayoutContext lc){

  childLC=lc;

}

Location: InlineStackingLayoutManager.java

Content: 

/** 

 * Set the current area.

 * @param area the current area

 */

protected void setCurrentArea(Area area){

  currentArea=area;

}

Location: InlineStackingLayoutManager.java

Content: 

/** 

 * Set the iterator.

 * @param iter the iterator for this LM

 */

public void setLMiter(ListIterator iter){

  childLMiter=iter;

}

Location: InlineStackingLayoutManager.java

Content: 

/** 

 * Trait setter to be overridden by subclasses.

 * @param bNotFirst true if this is not the first child area added

 * @param bNotLast true if this is not the last child area added

 */

protected void setTraits(boolean bNotFirst,boolean bNotLast){

}

