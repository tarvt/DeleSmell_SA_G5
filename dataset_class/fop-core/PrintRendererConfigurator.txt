Location: PrintRendererConfigurator.java

Content: 

private List<EmbedFontInfo> buildFontList(String mimeType) throws FOPException {

  return fontInfoConfigurator.configure(getRendererConfig(mimeType).getFontInfoConfig());

}

Location: PrintRendererConfigurator.java

Content: 

public static PrintRendererConfigurator createDefaultInstance(FOUserAgent userAgent){

  return new PrintRendererConfigurator(userAgent,new PDFRendererConfigParser()){

    @Override protected List<FontCollection> getDefaultFontCollection(){

      throw new UnsupportedOperationException();

    }

  }

;

}

Location: PrintRendererConfigurator.java

Content: 

/** 

 * Returns the renderer configuration data for a specific renderer.

 * @param documentHandler the document handler

 * @return the renderer configuration data

 * @throws FOPException if an error occurs

 */

protected RendererConfig getRendererConfig(IFDocumentHandler documentHandler) throws FOPException {

  return getRendererConfig(documentHandler.getMimeType());

}

Location: PrintRendererConfigurator.java

Content: 

/** 

 * gets the renderer configuration data for a specific renderer.

 * @param renderer the renderer

 * @return the renderer configuration data

 * @throws FOPException if an error occurs

 */

protected RendererConfig getRendererConfig(Renderer renderer) throws FOPException {

  return getRendererConfig(renderer.getMimeType());

}

Location: PrintRendererConfigurator.java

Content: 

/** 

 * gets the renderer configuration data for a specific renderer.

 * @param mimeType the MIME type

 * @return the renderer configuration data

 * @throws FOPException if an error occurs

 */

protected RendererConfig getRendererConfig(String mimeType) throws FOPException {

  return userAgent.getRendererConfig(mimeType,rendererConfigParser);

}

Location: PrintRendererConfigurator.java

Content: 

/** 

 * Default constructor

 * @param userAgent user agent

 */

public PrintRendererConfigurator(FOUserAgent userAgent,RendererConfigParser rendererConfigParser){

  this(userAgent,rendererConfigParser,new DefaultFontConfigurator(userAgent.getFontManager(),new FontEventAdapter(userAgent.getEventBroadcaster()),userAgent.validateUserConfigStrictly()));

}

Location: PrintRendererConfigurator.java

Content: 

/** 

 * Default constructor

 * @param userAgent user agent

 */

public PrintRendererConfigurator(FOUserAgent userAgent,RendererConfigParser rendererConfigParser,FontConfigurator<EmbedFontInfo> fontInfoConfigurator){

  super(userAgent);

  this.rendererConfigParser=rendererConfigParser;

  this.fontInfoConfigurator=fontInfoConfigurator;

}

