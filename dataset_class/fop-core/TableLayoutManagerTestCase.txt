Location: TableLayoutManagerTestCase.java

Content: 

@Test public void testResolveRetrieveTableMarker(){

  Table t=mock(Table.class);

  Marker m=mock(Marker.class);

  RetrieveTableMarker rtm=mock(RetrieveTableMarker.class);

  when(rtm.getRetrieveClassName()).thenReturn("A");

  when(rtm.getPosition()).thenReturn(Constants.EN_FIRST_STARTING);

  PageViewport pv=mock(PageViewport.class);

  when(pv.resolveMarker(rtm)).thenReturn(m);

  Page p=mock(Page.class);

  when(p.getPageViewport()).thenReturn(pv);

  PageSequenceLayoutManager pslm=mock(PageSequenceLayoutManager.class);

  when(pslm.getPSLM()).thenReturn(pslm);

  when(pslm.getCurrentPage()).thenReturn(p);

  BlockLayoutManager blm=mock(BlockLayoutManager.class);

  blm.setParent(pslm);

  when(blm.getPSLM()).thenReturn(pslm);

  TableLayoutManager tlm=new TableLayoutManager(t);

  tlm.setParent(blm);

  HashMap<String,Marker> markers1=new HashMap<String,Marker>();

  Marker m1=mock(Marker.class);

  markers1.put("A",m1);

  tlm.registerMarkers(markers1,true,true,true);

  tlm.registerMarkers(markers1,false,true,true);

  assertEquals(rtm,tlm.resolveRetrieveTableMarker(rtm));

  verify(rtm,never()).getBoundary();

  when(rtm.getBoundary()).thenReturn(Constants.EN_TABLE_FRAGMENT);

  when(rtm.getRetrieveClassName()).thenReturn("B");

  assertNull(tlm.resolveRetrieveTableMarker(rtm));

  verify(rtm).getBoundary();

  verify(rtm,never()).changePositionTo(Constants.EN_LAST_ENDING);

  when(rtm.getBoundary()).thenReturn(Constants.EN_PAGE);

  assertEquals(rtm,tlm.resolveRetrieveTableMarker(rtm));

  verify(rtm).changePositionTo(Constants.EN_LAST_ENDING);

  verify(rtm).changePositionTo(Constants.EN_FIRST_STARTING);

  verify(pv).resolveMarker(rtm);

  when(pv.resolveMarker(rtm)).thenReturn(null);

  assertNull(tlm.resolveRetrieveTableMarker(rtm));

  when(rtm.getBoundary()).thenReturn(Constants.EN_TABLE);

  assertNull(tlm.resolveRetrieveTableMarker(rtm));

}

Location: TableLayoutManagerTestCase.java

Content: 

@Test public void testSavedTableCellLayoutManagersFunctionality(){

  Table t=mock(Table.class);

  TableCellLayoutManager tclm1=mock(TableCellLayoutManager.class);

  TableLayoutManager tlm=new TableLayoutManager(t);

  tlm.saveTableHeaderTableCellLayoutManagers(tclm1);

  tlm.repeatAddAreasForSavedTableHeaderTableCellLayoutManagers();

  verify(tclm1).repeatAddAreas();

  TableCellLayoutManager tclm2=mock(TableCellLayoutManager.class);

  tlm.saveTableHeaderTableCellLayoutManagers(tclm2);

  tlm.repeatAddAreasForSavedTableHeaderTableCellLayoutManagers();

  verify(tclm1,times(2)).repeatAddAreas();

  verify(tclm2,never()).repeatAddAreas();

}

