Location: CollapsingBorderModel.java

Content: 

/** 

 * Compares the two given FO ids ( {@link Constants}.FO*) in terms of border declaration.

 * @param id1 a FO id ({@link Constants#FO_TABLE},  {@link Constants#FO_TABLE_BODY}, etc.)

 * @param id2 another FO id

 * @return a value &lt; 0 if id1 has less priority than id2, 0 if both are equal, avalue &gt; 0 if id1 has more priority than id2

 */

static int compareFOs(int id1,int id2){

  int p1=getHolderPreferenceValue(id1);

  int p2=getHolderPreferenceValue(id2);

  return compareInt(p1,p2);

}

Location: CollapsingBorderModel.java

Content: 

private static int compareInt(int value1,int value2){

  if (value1 < value2) {

    return -1;

  }

 else   if (value1 == value2) {

    return 0;

  }

 else {

    return 1;

  }

}

Location: CollapsingBorderModel.java

Content: 

/** 

 * Compares the two given styles (see  {@link Constants}).

 * @param style1 a style constant

 * @param style2 another style constant

 * @return a value &lt; 0 if style1 has less priority than style2, 0 if both areequal, a value &gt; 0 if style1 has more priority than style2

 */

static int compareStyles(int style1,int style2){

  int value1=getStylePreferenceValue(style1);

  int value2=getStylePreferenceValue(style2);

  return compareInt(value1,value2);

}

Location: CollapsingBorderModel.java

Content: 

/** 

 * @param borderCollapse border collapse control

 * @return the border model for the cell

 */

public static CollapsingBorderModel getBorderModelFor(int borderCollapse){

switch (borderCollapse) {

case Constants.EN_COLLAPSE:

    return collapse;

case Constants.EN_COLLAPSE_WITH_PRECEDENCE:

  throw new UnsupportedOperationException("collapse-with-precedence not yet supported");

default :

throw new IllegalArgumentException("Illegal border-collapse mode.");

}

}

Location: CollapsingBorderModel.java

Content: 

private static int getHolderPreferenceValue(int id){

switch (id) {

case Constants.FO_TABLE_CELL:

    return 0;

case Constants.FO_TABLE_ROW:

  return -1;

case Constants.FO_TABLE_HEADER:

case Constants.FO_TABLE_FOOTER:

case Constants.FO_TABLE_BODY:

return -2;

case Constants.FO_TABLE_COLUMN:

return -3;

case Constants.FO_TABLE:

return -4;

default :

throw new IllegalStateException();

}

}

Location: CollapsingBorderModel.java

Content: 

/** 

 * @param side the side on the current cell

 * @return the adjacent side on the neighbouring cell

 */

public static int getOtherSide(int side){

switch (side) {

case CommonBorderPaddingBackground.BEFORE:

    return CommonBorderPaddingBackground.AFTER;

case CommonBorderPaddingBackground.AFTER:

  return CommonBorderPaddingBackground.BEFORE;

case CommonBorderPaddingBackground.START:

return CommonBorderPaddingBackground.END;

case CommonBorderPaddingBackground.END:

return CommonBorderPaddingBackground.START;

default :

throw new IllegalArgumentException("Illegal parameter: side");

}

}

Location: CollapsingBorderModel.java

Content: 

/** 

 * See rule 4 in 6.7.10 for the collapsing border model.

 * @param style the border style to get the preference value for

 * @return the preference value of the style

 */

private static int getStylePreferenceValue(int style){

switch (style) {

case Constants.EN_DOUBLE:

    return 0;

case Constants.EN_SOLID:

  return -1;

case Constants.EN_DASHED:

return -2;

case Constants.EN_DOTTED:

return -3;

case Constants.EN_RIDGE:

return -4;

case Constants.EN_OUTSET:

return -5;

case Constants.EN_GROOVE:

return -6;

case Constants.EN_INSET:

return -7;

default :

throw new IllegalStateException("Illegal border style: " + style);

}

}

Location: CollapsingBorderModel.java

Content: 

/** 

 * @param side the side to investigate

 * @return true if the adjacent cell is before or after

 */

protected boolean isVerticalRelation(int side){

  return (side == CommonBorderPaddingBackground.BEFORE || side == CommonBorderPaddingBackground.AFTER);

}

