Location: PDFCIDFont.java

Content: 

/** 

 * Returns the PDF name for a certain CID font type.

 * @param cidFontType CID font type

 * @return corresponding PDF name

 */

protected String getPDFNameForCIDFontType(CIDFontType cidFontType){

  if (cidFontType == CIDFontType.CIDTYPE0) {

    return cidFontType.getName();

  }

 else   if (cidFontType == CIDFontType.CIDTYPE2) {

    return cidFontType.getName();

  }

 else {

    throw new IllegalArgumentException("Unsupported CID font type: " + cidFontType.getName());

  }

}

Location: PDFCIDFont.java

Content: 

/** 

 * Create the /Font object

 * @param basefont Name of the basefont

 * @param cidtype CID type

 * @param dw default width

 * @param w array of character widths

 * @param systemInfo CID system info

 * @param descriptor CID font descriptor

 */

public PDFCIDFont(String basefont,CIDFontType cidtype,int dw,int[] w,PDFCIDSystemInfo systemInfo,PDFCIDFontDescriptor descriptor){

  this(basefont,cidtype,dw,new PDFWArray(w),systemInfo,descriptor);

}

Location: PDFCIDFont.java

Content: 

/** 

 * Create the /Font object

 * @param basefont Name of the basefont

 * @param cidtype CID type

 * @param dw default width

 * @param w array of character widths

 * @param registry name of the issuer

 * @param ordering Unique name of the font

 * @param supplement Supplement number

 * @param descriptor CID font descriptor

 */

public PDFCIDFont(String basefont,CIDFontType cidtype,int dw,int[] w,String registry,String ordering,int supplement,PDFCIDFontDescriptor descriptor){

  this(basefont,cidtype,dw,new PDFWArray(w),new PDFCIDSystemInfo(registry,ordering,supplement),descriptor);

}

Location: PDFCIDFont.java

Content: 

/** 

 * Create the /Font object

 * @param basefont Name of the basefont

 * @param cidtype CID type

 * @param dw default width

 * @param w array of character widths

 * @param systemInfo CID system info

 * @param descriptor CID font descriptor

 */

public PDFCIDFont(String basefont,CIDFontType cidtype,int dw,PDFWArray w,PDFCIDSystemInfo systemInfo,PDFCIDFontDescriptor descriptor){

  super();

  this.basefont=basefont;

  this.cidtype=cidtype;

  this.dw=dw;

  this.w=w;

  this.dw2=null;

  this.w2=null;

  systemInfo.setParent(this);

  this.systemInfo=systemInfo;

  this.descriptor=descriptor;

  this.cidMap=null;

  this.cmap=null;

}

Location: PDFCIDFont.java

Content: 

/** 

 * Set the /CIDToGIDMap (to be used only for CIDFontType2) to "Identity"

 */

public void setCIDMapIdentity(){

  this.cidMap=null;

}

Location: PDFCIDFont.java

Content: 

/** 

 * Set the /CIDToGIDMap (to be used only for CIDFontType2)

 * @param map mapping information

 */

public void setCIDMap(PDFStream map){

  this.cidMap=map;

}

Location: PDFCIDFont.java

Content: 

/** 

 * Set the (two elements) /DW2 array

 * @param dw2 the default metrics for vertical writing

 */

public void setDW2(int[] dw2){

  this.dw2=dw2;

}

Location: PDFCIDFont.java

Content: 

/** 

 * Set the two elements of the /DW2 array

 * @param posY position vector

 * @param displacementY displacement vector

 */

public void setDW2(int posY,int displacementY){

  this.dw2=new int[]{posY,displacementY};

}

Location: PDFCIDFont.java

Content: 

/** 

 * Set the /DW attribute

 * @param dw the default width

 */

public void setDW(int dw){

  this.dw=dw;

}

Location: PDFCIDFont.java

Content: 

/** 

 * Set the /W2 array

 * @param w2 array of metrics for vertical writing

 */

public void setW2(PDFWArray w2){

  this.w2=w2;

}

Location: PDFCIDFont.java

Content: 

/** 

 * Set the /W array

 * @param w the width array

 */

public void setW(PDFWArray w){

  this.w=w;

}

