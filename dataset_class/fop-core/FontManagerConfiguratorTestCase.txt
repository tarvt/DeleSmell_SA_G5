Location: FontManagerConfiguratorTestCase.java

Content: 

@Test public void absoluteBaseURI(){

  String absoluteBase="test:///absolute/";

  FontManager fontManager=setBaseAndGetManager(absoluteBase);

  assertEquals(URI.create(absoluteBase),fontManager.getResourceResolver().getBaseURI());

}

Location: FontManagerConfiguratorTestCase.java

Content: 

@Test public void currentRelativeFontBaseTest(){

  String actualBase=".";

  FontManager fontManager=setBaseAndGetManager(actualBase);

  assertEquals(baseURI,fontManager.getResourceResolver().getBaseURI());

}

Location: FontManagerConfiguratorTestCase.java

Content: 

/** 

 * This test is an interesting one; it's basically testing that if a base URI pointing to a directory that doesn't exist is used, an error is not thrown. The URI resolver should handle any  {@link java.io.FileNotFoundException}s, not the configuration. We're NOT testing whether a font can be resolved here, just that the URI resolver accepts it as its base URI.

 */

@Test public void fontBaseDoesntExist(){

  String actualBase="non-existing-dir/";

  FontManager fontManager=setBaseAndGetManager(actualBase);

  assertEquals(baseURI.resolve("non-existing-dir/"),fontManager.getResourceResolver().getBaseURI());

}

Location: FontManagerConfiguratorTestCase.java

Content: 

private FontManager getManager(){

  FopFactory factory=getFopFactory(builder.build(),baseURI);

  return factory.getFontManager();

}

Location: FontManagerConfiguratorTestCase.java

Content: 

@Test(expected=FOPException.class) public void invalidURI() throws SAXException, IOException {

  builder.setFontBaseURI("$$%%**~{}][");

  FopConfParser confParser=new FopConfParser(builder.build(),baseURI);

  confParser.getFopFactoryBuilder().build();

}

Location: FontManagerConfiguratorTestCase.java

Content: 

/** 

 * Tests that when no &lt;font-base&gt; is given, it falls back to the URI used in &lt;base&gt;.

 */

@Test public void noFontBaseURITest(){

  String actualBase="../../resources/images/";

  builder.setBaseURI(actualBase);

  FontManager fontManager=getManager();

  assertEquals(baseURI.resolve(actualBase),fontManager.getResourceResolver().getBaseURI());

}

Location: FontManagerConfiguratorTestCase.java

Content: 

@Test public void relativeFontBaseURITest(){

  String actualBase="../../resources/fonts/ttf/";

  FontManager fontManager=setBaseAndGetManager(actualBase);

  URI expectedURI=baseURI.resolve(actualBase);

  assertEquals(expectedURI,fontManager.getResourceResolver().getBaseURI());

}

Location: FontManagerConfiguratorTestCase.java

Content: 

private FontManager setBaseAndGetManager(String fontBase){

  builder.setFontBaseURI(fontBase);

  return getManager();

}

