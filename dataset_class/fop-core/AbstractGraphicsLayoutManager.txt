Location: AbstractGraphicsLayoutManager.java

Content: 

/** 

 * Constructor.

 * @param node the formatting object that creates this area

 */

public AbstractGraphicsLayoutManager(AbstractGraphics node){

  super(node);

}

Location: AbstractGraphicsLayoutManager.java

Content: 

/** 

 * Returns the image of foreign object area to be put into the viewport.

 * @return the appropriate area

 */

protected abstract Area getChildArea();

Location: AbstractGraphicsLayoutManager.java

Content: 

/** 

 * Get the inline area created by this element.

 * @return the viewport inline area

 */

private InlineViewport getInlineArea(){

  final AbstractGraphics fobj=(AbstractGraphics)this.fobj;

  Dimension intrinsicSize=new Dimension(fobj.getIntrinsicWidth(),fobj.getIntrinsicHeight());

  int bidiLevel=fobj.getBidiLevel();

  ImageLayout imageLayout=new ImageLayout(fobj,this,intrinsicSize);

  Rectangle placement=imageLayout.getPlacement();

  CommonBorderPaddingBackground borderProps=fobj.getCommonBorderPaddingBackground();

  setCommonBorderPaddingBackground(borderProps);

  int beforeBPD=borderProps.getPadding(CommonBorderPaddingBackground.BEFORE,false,this);

  beforeBPD+=borderProps.getBorderWidth(CommonBorderPaddingBackground.BEFORE,false);

  placement.y+=beforeBPD;

  if ((bidiLevel == -1) || ((bidiLevel & 1) == 0)) {

    int startIPD=borderProps.getPadding(CommonBorderPaddingBackground.START,false,this);

    startIPD+=borderProps.getBorderWidth(CommonBorderPaddingBackground.START,false);

    placement.x+=startIPD;

  }

 else {

    int endIPD=borderProps.getPadding(CommonBorderPaddingBackground.END,false,this);

    endIPD+=borderProps.getBorderWidth(CommonBorderPaddingBackground.END,false);

    placement.x+=endIPD;

  }

  Area viewportArea=getChildArea();

  TraitSetter.setProducerID(viewportArea,fobj.getId());

  transferForeignAttributes(viewportArea);

  InlineViewport vp=new InlineViewport(viewportArea,bidiLevel);

  TraitSetter.setProducerID(vp,fobj.getId());

  vp.setIPD(imageLayout.getViewportSize().width);

  vp.setBPD(imageLayout.getViewportSize().height);

  vp.setContentPosition(placement);

  vp.setClip(imageLayout.isClipped());

  vp.setBlockProgressionOffset(0);

  TraitSetter.addBorders(vp,borderProps,false,false,false,false,this);

  TraitSetter.addPadding(vp,borderProps,false,false,false,false,this);

  TraitSetter.addBackground(vp,borderProps,this);

  return vp;

}

