Location: PostscriptParserTestCase.java

Content: 

/** 

 * Tests that the correct element is returned given the operator and element ID provided

 */

@Test public void testCreateElement(){

  assertTrue(parser.createElement("/custDictionary","dict",-1) instanceof PSDictionary);

  assertEquals(parser.createElement("/Private","dict",-1),null);

  assertTrue(parser.createElement("/aFixedArray","array",-1) instanceof PSFixedArray);

  assertTrue(parser.createElement("/aVariableArray","[",-1) instanceof PSVariableArray);

  assertTrue(parser.createElement("/aSubroutine","{",-1) instanceof PSSubroutine);

}

Location: PostscriptParserTestCase.java

Content: 

/** 

 * Tests parsing an example Postscript document and verifying what has been read.

 * @throws IOException

 */

@Test public void testPostscriptParsing() throws IOException {

  List<PSElement> elements=parser.parse(postscriptElements.getBytes());

  assertEquals(elements.size(),5);

  assertTrue(elements.get(0) instanceof PSVariable);

  assertTrue(elements.get(2) instanceof PSFixedArray);

  assertTrue(elements.get(3) instanceof PSVariableArray);

  PSFixedArray fixedArray=(PSFixedArray)elements.get(2);

  assertEquals(fixedArray.getEntries().size(),4);

  assertEquals(fixedArray.getEntries().get(2),"dup 2 /b put ");

  PSVariableArray variableArray=(PSVariableArray)elements.get(3);

  assertEquals(variableArray.getEntries().size(),4);

  assertEquals(variableArray.getEntries().get(0).trim(),"{  this  }");

}

