Location: JAIMonochromeBitmapConverter.java

Content: 

private PlanarImage convertToMonochromePlanarImage(BufferedImage img){

  if (img.getColorModel().getColorSpace().getNumComponents() != 1) {

    img=BitmapImageUtil.convertToGrayscale(img,null);

  }

  ParameterBlock pb=new ParameterBlock();

  pb.addSource(img);

  String opName=null;

  if (isErrorDiffusion) {

    opName="errordiffusion";

    LookupTableJAI lut=new LookupTableJAI(new byte[]{(byte)0x00,(byte)0xff});

    pb.add(lut);

    pb.add(KernelJAI.ERROR_FILTER_FLOYD_STEINBERG);

  }

 else {

    opName="ordereddither";

    ColorCube colorMap=ColorCube.createColorCube(DataBuffer.TYPE_BYTE,0,new int[]{2});

    pb.add(colorMap);

    pb.add(KernelJAI.DITHER_MASK_441);

  }

  ImageLayout layout=new ImageLayout();

  byte[] map=new byte[]{(byte)0x00,(byte)0xff};

  ColorModel cm=new IndexColorModel(1,2,map,map,map);

  layout.setColorModel(cm);

  RenderingHints hints=new RenderingHints(JAI.KEY_IMAGE_LAYOUT,layout);

  PlanarImage dst=JAI.create(opName,pb,hints);

  return dst;

}

