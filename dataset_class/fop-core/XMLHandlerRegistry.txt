Location: XMLHandlerRegistry.java

Content: 

/** 

 * Add an XML handler. The handler itself is inspected to find out what it supports.

 * @param classname the fully qualified class name

 */

public void addXMLHandler(String classname){

  try {

    XMLHandler handlerInstance=(XMLHandler)Class.forName(classname).getDeclaredConstructor().newInstance();

    addXMLHandler(handlerInstance);

  }

 catch (  ClassNotFoundException e) {

    throw new IllegalArgumentException("Could not find " + classname);

  }

catch (  InstantiationException e) {

    throw new IllegalArgumentException("Could not instantiate " + classname);

  }

catch (  IllegalAccessException e) {

    throw new IllegalArgumentException("Could not access " + classname);

  }

catch (  ClassCastException e) {

    throw new IllegalArgumentException(classname + " is not an " + XMLHandler.class.getName());

  }

catch (  NoSuchMethodException e) {

    throw new IllegalArgumentException(e);

  }

catch (  InvocationTargetException e) {

    throw new IllegalArgumentException(e);

  }

}

Location: XMLHandlerRegistry.java

Content: 

/** 

 * Add an XML handler for the given MIME type and XML namespace.

 * @param ns Namespace URI

 * @param handler XMLHandler to use

 */

private void addXMLHandler(String ns,XMLHandler handler){

  List<XMLHandler> lst=handlers.get(ns);

  if (lst == null) {

    lst=new java.util.ArrayList<XMLHandler>();

    handlers.put(ns,lst);

  }

  lst.add(handler);

}

Location: XMLHandlerRegistry.java

Content: 

/** 

 * Add an XML handler. The handler itself is inspected to find out what it supports.

 * @param handler the XMLHandler instance

 */

public void addXMLHandler(XMLHandler handler){

  String ns=handler.getNamespace();

  if (ns == null) {

    setDefaultXMLHandler(handler);

  }

 else {

    addXMLHandler(ns,handler);

  }

}

Location: XMLHandlerRegistry.java

Content: 

/** 

 * Discovers XMLHandler implementations through the classpath and dynamically registers them.

 */

private void discoverXMLHandlers(){

  Iterator<Object> providers=Service.providers(XMLHandler.class);

  if (providers != null) {

    while (providers.hasNext()) {

      XMLHandler handler=(XMLHandler)providers.next();

      try {

        if (log.isDebugEnabled()) {

          log.debug("Dynamically adding XMLHandler: " + handler.getClass().getName());

        }

        addXMLHandler(handler);

      }

 catch (      IllegalArgumentException e) {

        log.error("Error while adding XMLHandler",e);

      }

    }

  }

}

Location: XMLHandlerRegistry.java

Content: 

private XMLHandler getXMLHandler(Renderer renderer,List<XMLHandler> lst){

  XMLHandler handler;

  if (lst != null) {

    for (    XMLHandler aLst : lst) {

      handler=aLst;

      if (handler.supportsRenderer(renderer)) {

        return handler;

      }

    }

  }

  return null;

}

Location: XMLHandlerRegistry.java

Content: 

/** 

 * Returns an XMLHandler which handles an XML dialect of the given namespace and for a specified output format defined by its MIME type.

 * @param renderer the Renderer for which to retrieve a Renderer

 * @param ns the XML namespace associated with the XML to be rendered

 * @return the XMLHandler responsible for handling the XML or null if none is available

 */

public XMLHandler getXMLHandler(Renderer renderer,String ns){

  XMLHandler handler;

  List<XMLHandler> lst=handlers.get(ns);

  handler=getXMLHandler(renderer,lst);

  if (handler == null) {

    lst=handlers.get(XMLHandler.HANDLE_ALL);

    handler=getXMLHandler(renderer,lst);

  }

  return handler;

}

Location: XMLHandlerRegistry.java

Content: 

/** 

 * Add a default XML handler which is able to handle any namespace.

 * @param handler XMLHandler to use

 */

private void setDefaultXMLHandler(XMLHandler handler){

  addXMLHandler(XMLHandler.HANDLE_ALL,handler);

}

Location: XMLHandlerRegistry.java

Content: 

/** 

 * Default constructor.

 */

public XMLHandlerRegistry(){

  discoverXMLHandlers();

}

