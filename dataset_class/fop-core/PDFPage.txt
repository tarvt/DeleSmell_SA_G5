Location: PDFPage.java

Content: 

/** 

 * Returns the value of the StructParents entry.

 * @return the StructParents value, <code>null</code> if the entry has not been set

 */

public Integer getStructParents(){

  return (Integer)get("StructParents");

}

Location: PDFPage.java

Content: 

/** 

 * Create a /Page object

 * @param resources the /Resources object

 * @param pageIndex the page's zero-based index (or -1 if the page number is auto-determined)

 * @param mediaBox the MediaBox

 * @param cropBox the CropBox. If null, mediaBox is used.

 * @param bleedBox the BleedBox. If null, cropBox is used.

 * @param trimBox the TrimBox. If null, bleedBox is used.

 */

public PDFPage(PDFResources resources,int pageIndex,Rectangle2D mediaBox,Rectangle2D cropBox,Rectangle2D bleedBox,Rectangle2D trimBox){

  super(resources);

  put("Type",new PDFName("Page"));

  setSimplePageSize(mediaBox,cropBox,bleedBox,trimBox);

  this.pageIndex=pageIndex;

}

Location: PDFPage.java

Content: 

/** 

 * Sets the "BleedBox" entry

 * @param box the bleed rectangle

 */

public void setBleedBox(Rectangle2D box){

  put("BleedBox",toPDFArray(box));

}

Location: PDFPage.java

Content: 

/** 

 * set this page contents

 * @param contents the contents of the page

 */

public void setContents(PDFReference contents){

  if (contents != null) {

    put("Contents",contents);

  }

}

Location: PDFPage.java

Content: 

/** 

 * Sets the "CropBox" entry

 * @param box the bleed rectangle

 */

public void setCropBox(Rectangle2D box){

  put("CropBox",toPDFArray(box));

}

Location: PDFPage.java

Content: 

/** 

 * Sets the "MediaBox" entry

 * @param box the media rectangle

 */

public void setMediaBox(Rectangle2D box){

  put("MediaBox",toPDFArray(box));

}

Location: PDFPage.java

Content: 

/** 

 * set this page's parent

 * @param parent the /Pages object that is this page's parent

 */

public void setParent(PDFPages parent){

  put("Parent",new PDFReference(parent));

}

Location: PDFPage.java

Content: 

private void setSimplePageSize(Rectangle2D mediaBox,Rectangle2D cropBox,Rectangle2D bleedBox,Rectangle2D trimBox){

  setMediaBox(mediaBox);

  if (cropBox == null) {

    cropBox=mediaBox;

  }

  setCropBox(cropBox);

  if (bleedBox == null) {

    bleedBox=cropBox;

  }

  setBleedBox(bleedBox);

  if (trimBox == null) {

    trimBox=bleedBox;

  }

  setTrimBox(trimBox);

}

Location: PDFPage.java

Content: 

/** 

 * Sets the "StructParents" value.

 * @param structParents the integer key of this object's entry in the structural parent tree.

 */

public void setStructParents(int structParents){

  put("StructParents",structParents);

  setTabs(new PDFName("S"));

}

Location: PDFPage.java

Content: 

/** 

 * Specifies the tab order for annotations on a page.

 * @param value one of the allowed values (see PDF 1.5)

 * @since PDF 1.5

 */

public void setTabs(PDFName value){

  put("Tabs",value);

}

Location: PDFPage.java

Content: 

/** 

 * Set the transition dictionary and duration. This sets the duration of the page and the transition dictionary used when going to the next page.

 * @param dur the duration in seconds

 * @param tr the transition dictionary

 */

public void setTransition(int dur,TransitionDictionary tr){

  put("Dur",Integer.valueOf(dur));

  put("Trans",tr);

}

Location: PDFPage.java

Content: 

/** 

 * Sets the "TrimBox" entry

 * @param box the trim rectangle

 */

public void setTrimBox(Rectangle2D box){

  put("TrimBox",toPDFArray(box));

}

Location: PDFPage.java

Content: 

private PDFArray toPDFArray(Rectangle2D box){

  return new PDFArray(this,new double[]{box.getX(),box.getY(),box.getMaxX(),box.getMaxY()});

}

