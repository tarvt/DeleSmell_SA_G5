Location: PageSequenceLayoutManager.java

Content: 

/** 

 * {@inheritDoc} 

 */

public void activateLayout(){

  initialize();

  if (areaTreeHandler.isComplexScriptFeaturesEnabled()) {

    BidiResolver.resolveInlineDirectionality(getPageSequence());

  }

  LineArea title=null;

  if (getPageSequence().getTitleFO() != null) {

    try {

      ContentLayoutManager clm=getLayoutManagerMaker().makeContentLayoutManager(this,getPageSequence().getTitleFO());

      Area parentArea=clm.getParentArea(null);

      assert (parentArea instanceof LineArea);

      title=(LineArea)parentArea;

    }

 catch (    IllegalStateException e) {

    }

  }

  AreaTreeModel areaTreeModel=areaTreeHandler.getAreaTreeModel();

  org.apache.fop.area.PageSequence pageSequenceAreaObject=new org.apache.fop.area.PageSequence(title);

  transferExtensions(pageSequenceAreaObject);

  pageSequenceAreaObject.setLocale(getPageSequence().getLocale());

  areaTreeModel.startPageSequence(pageSequenceAreaObject);

  if (log.isDebugEnabled()) {

    log.debug("Starting layout");

  }

  boolean finished=false;

  while (!finished) {

    initialize();

    curPage=makeNewPage(false);

    pageBreaker=new PageBreaker(this);

    int flowBPD=getCurrentPV().getBodyRegion().getRemainingBPD();

    finished=pageBreaker.doLayout(flowBPD);

    pageProvider.skipPagePositionOnly=true;

  }

  finishPage();

}

Location: PageSequenceLayoutManager.java

Content: 

/** 

 * Registers the given footnotes so that they can be added to the current page, after any other footnote.

 * @param footerFootnotes footnotes coming from a repeated table footer

 */

public void addTableFooterFootnotes(List<List<KnuthElement>> footerFootnotes){

  if (tableFooterFootnotes == null) {

    tableFooterFootnotes=new ArrayList<List<KnuthElement>>();

  }

  tableFooterFootnotes.addAll(footerFootnotes);

}

Location: PageSequenceLayoutManager.java

Content: 

/** 

 * Registers the given footnotes so that they can be added to the current page, before any other footnote.

 * @param headerFootnotes footnotes coming from a repeated table header

 */

public void addTableHeaderFootnotes(List<List<KnuthElement>> headerFootnotes){

  if (tableHeaderFootnotes == null) {

    tableHeaderFootnotes=new ArrayList<List<KnuthElement>>();

  }

  tableHeaderFootnotes.addAll(headerFootnotes);

}

Location: PageSequenceLayoutManager.java

Content: 

/** 

 * Clears the footnotes coming from repeated table headers/footers, in order to start afresh for a new page.

 */

public void clearTableHeadingFootnotes(){

  if (tableHeaderFootnotes != null) {

    tableHeaderFootnotes.clear();

  }

  if (tableFooterFootnotes != null) {

    tableFooterFootnotes.clear();

  }

}

Location: PageSequenceLayoutManager.java

Content: 

/** 

 * {@inheritDoc} 

 */

public void finishPageSequence(){

  if (pageSeq.hasId()) {

    idTracker.signalIDProcessed(pageSeq.getId());

  }

  pageSeq.getRoot().notifyPageSequenceFinished(currentPageNum,(currentPageNum - startPageNum) + 1);

  areaTreeHandler.notifyPageSequenceFinished(pageSeq,(currentPageNum - startPageNum) + 1);

  getPageSequence().releasePageSequence();

  String masterReference=getPageSequence().getMasterReference();

  PageSequenceMaster pageSeqMaster=pageSeq.getRoot().getLayoutMasterSet().getPageSequenceMaster(masterReference);

  if (pageSeqMaster != null) {

    pageSeqMaster.reset();

  }

  if (log.isDebugEnabled()) {

    log.debug("Ending layout");

  }

}

Location: PageSequenceLayoutManager.java

Content: 

private boolean flowNameEquals(Page newPage,boolean strict){

  String psName=getPageSequence().getMainFlow().getFlowName();

  Region body=newPage.getSimplePageMaster().getRegion(FO_REGION_BODY);

  String name=body.getRegionName();

  if (strict && !name.equals(psName) && !name.equals(((RegionBody)body).getDefaultRegionName())&& getPageSequence().hasPagePositionLast()) {

    throw new RuntimeException("The flow-name \"" + name + "\" could not be mapped to a region-name in the layout-master-set");

  }

  return psName.equals(name);

}

Location: PageSequenceLayoutManager.java

Content: 

public int getCurrentColumnWidth(){

  int flowIPD=getCurrentPV().getCurrentSpan().getColumnWidth();

  flowIPD-=startIntrusionAdjustment + endIntrusionAdjustment;

  return flowIPD;

}

Location: PageSequenceLayoutManager.java

Content: 

public int getEndIntrusionAdjustment(){

  return endIntrusionAdjustment;

}

Location: PageSequenceLayoutManager.java

Content: 

public int getFloatHeight(){

  return pageBreaker.getFloatHeight();

}

Location: PageSequenceLayoutManager.java

Content: 

public int getFloatYOffset(){

  return pageBreaker.getFloatYOffset();

}

Location: PageSequenceLayoutManager.java

Content: 

public FlowLayoutManager getFlowLayoutManager(){

  if (pageBreaker == null) {

    throw new IllegalStateException("This method can be called only during layout");

  }

  return pageBreaker.getCurrentChildLM();

}

Location: PageSequenceLayoutManager.java

Content: 

/** 

 * The last page number of the sequence may be incremented, as determined by the force-page-count formatting property semantics

 * @param lastPageNum number of sequence

 * @return the forced last page number of sequence

 */

protected int getForcedLastPageNum(final int lastPageNum){

  int forcedLastPageNum=lastPageNum;

  int relativeLastPage=lastPageNum - startPageNum + 1;

  if (getPageSequence().getForcePageCount() == Constants.EN_EVEN) {

    if (relativeLastPage % 2 != 0) {

      forcedLastPageNum++;

    }

  }

 else   if (getPageSequence().getForcePageCount() == Constants.EN_ODD) {

    if (relativeLastPage % 2 == 0) {

      forcedLastPageNum++;

    }

  }

 else   if (getPageSequence().getForcePageCount() == Constants.EN_END_ON_EVEN) {

    if (lastPageNum % 2 != 0) {

      forcedLastPageNum++;

    }

  }

 else   if (getPageSequence().getForcePageCount() == Constants.EN_END_ON_ODD) {

    if (lastPageNum % 2 == 0) {

      forcedLastPageNum++;

    }

  }

  return forcedLastPageNum;

}

Location: PageSequenceLayoutManager.java

Content: 

public int getOffsetDueToFloat(){

  return pageBreaker.getOffsetDueToFloat();

}

Location: PageSequenceLayoutManager.java

Content: 

/** 

 * @return the PageProvider applicable to this page-sequence. 

 */

public PageProvider getPageProvider(){

  return this.pageProvider;

}

Location: PageSequenceLayoutManager.java

Content: 

/** 

 * @return the PageSequence being managed by this layout manager

 */

protected PageSequence getPageSequence(){

  return (PageSequence)pageSeq;

}

Location: PageSequenceLayoutManager.java

Content: 

public int getStartIntrusionAdjustment(){

  return startIntrusionAdjustment;

}

Location: PageSequenceLayoutManager.java

Content: 

public List<List<KnuthElement>> getTableFooterFootnotes(){

  return getTableFootnotes(tableFooterFootnotes);

}

Location: PageSequenceLayoutManager.java

Content: 

private List<List<KnuthElement>> getTableFootnotes(List<List<KnuthElement>> tableFootnotes){

  if (tableFootnotes == null) {

    List<List<KnuthElement>> emptyList=Collections.emptyList();

    return emptyList;

  }

 else {

    return tableFootnotes;

  }

}

Location: PageSequenceLayoutManager.java

Content: 

public List<List<KnuthElement>> getTableHeaderFootnotes(){

  return getTableFootnotes(tableHeaderFootnotes);

}

Location: PageSequenceLayoutManager.java

Content: 

protected int getWidthOfCurrentPage(){

  if (curPage != null) {

    return (int)curPage.getPageViewport().getViewArea().getWidth();

  }

  return 0;

}

Location: PageSequenceLayoutManager.java

Content: 

public boolean handlingEndOfFloat(){

  return pageBreaker.handlingEndOfFloat();

}

Location: PageSequenceLayoutManager.java

Content: 

public boolean handlingStartOfFloat(){

  return pageBreaker.handlingStartOfFloat();

}

Location: PageSequenceLayoutManager.java

Content: 

public void holdFootnotes(List fl,List ll,int tfl,int ifl,boolean fp,boolean nf,int fnfi,int fli,int fei,MinOptMax fsl,int pfli,int pfei){

  if (fl != null && fl.size() > 0) {

    pageBreaker.holdFootnotes(fl,ll,tfl,ifl,fp,nf,fnfi,fli,fei,fsl,pfli,pfei);

  }

}

Location: PageSequenceLayoutManager.java

Content: 

private void layoutSideRegion(int regionID){

  SideRegion reg=(SideRegion)curPage.getSimplePageMaster().getRegion(regionID);

  if (reg == null) {

    return;

  }

  StaticContent sc=getPageSequence().getStaticContent(reg.getRegionName());

  if (sc == null) {

    return;

  }

  StaticContentLayoutManager lm=getLayoutManagerMaker().makeStaticContentLayoutManager(this,sc,reg);

  lm.doLayout();

}

Location: PageSequenceLayoutManager.java

Content: 

protected Page makeNewPage(boolean isBlank,boolean emptyContent){

  Page newPage=super.makeNewPage(isBlank);

  if (!isBlank && !emptyContent) {

    int i=0;

    while (!flowNameEquals(newPage,i > 0)) {

      newPage=super.makeNewPage(isBlank);

      i++;

    }

  }

  return newPage;

}

Location: PageSequenceLayoutManager.java

Content: 

/** 

 * Constructor

 * @param ath the area tree handler object

 * @param pseq fo:page-sequence to process

 */

public PageSequenceLayoutManager(AreaTreeHandler ath,PageSequence pseq){

  super(ath,pseq);

  this.pageProvider=new PageProvider(ath,pseq);

}

Location: PageSequenceLayoutManager.java

Content: 

public void recordEndOfFloat(int fHeight){

  pageBreaker.handleEndOfFloat(fHeight);

}

Location: PageSequenceLayoutManager.java

Content: 

public void recordStartOfFloat(int fHeight,int fYOffset){

  pageBreaker.handleStartOfFloat(fHeight,fYOffset);

}

Location: PageSequenceLayoutManager.java

Content: 

public void retrieveFootnotes(PageBreakingAlgorithm alg){

  pageBreaker.retrieveFootones(alg);

}

Location: PageSequenceLayoutManager.java

Content: 

public void setEndIntrusionAdjustment(int eia){

  endIntrusionAdjustment=eia;

}

Location: PageSequenceLayoutManager.java

Content: 

public void setStartIntrusionAdjustment(int sia){

  startIntrusionAdjustment=sia;

}

