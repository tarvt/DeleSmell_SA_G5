Location: BookmarkData.java

Content: 

/** 

 * Add a child bookmark data object. This adds a child bookmark in the bookmark hierarchy.

 * @param sub the child bookmark data

 */

public void addSubData(BookmarkData sub){

  subData.add(sub);

  if (sub.pageRef == null) {

    putUnresolved(sub.getIDRef(),sub);

    String[] ids=sub.getIDRefs();

    for (    String id : ids) {

      putUnresolved(id,sub);

    }

  }

}

Location: BookmarkData.java

Content: 

/** 

 * Create a new bookmark data root object. This constructor is called by the AreaTreeParser when the &lt;bookmarkTree&gt; element is read from the XML file

 */

public BookmarkData(){

  idRef=null;

  whenToProcess=END_OF_DOC;

  showChildren=true;

}

Location: BookmarkData.java

Content: 

/** 

 * Create a new pdf bookmark data object. This is used by the bookmark-items to create a data object with a idref.  During processing, this idref will be subsequently resolved to a particular PageViewport.

 * @param bookmark the fo:bookmark object

 */

public BookmarkData(Bookmark bookmark){

  this.bookmarkTitle=bookmark.getBookmarkTitle();

  this.showChildren=bookmark.showChildItems();

  this.idRef=bookmark.getInternalDestination();

}

Location: BookmarkData.java

Content: 

/** 

 * Create a new bookmark data object. This should only be called by the bookmark-tree item because it has no idref item that needs to be resolved.

 * @param bookmarkTree fo:bookmark-tree for this document

 */

public BookmarkData(BookmarkTree bookmarkTree){

  this.idRef=null;

  this.whenToProcess=END_OF_DOC;

  this.showChildren=true;

  for (int count=0; count < bookmarkTree.getBookmarks().size(); count++) {

    Bookmark bkmk=(Bookmark)(bookmarkTree.getBookmarks()).get(count);

    addSubData(createBookmarkData(bkmk));

  }

}

Location: BookmarkData.java

Content: 

/** 

 * Create a new bookmark data object. This constructor is called by the AreaTreeParser when a &lt;bookmark&gt; element is read from the XML file.

 * @param title the bookmark's title

 * @param showChildren whether to initially display the bookmark's children

 * @param pv the target PageViewport

 * @param idRef the target ID

 */

public BookmarkData(String title,boolean showChildren,PageViewport pv,String idRef){

  bookmarkTitle=title;

  this.showChildren=showChildren;

  pageRef=pv;

  this.idRef=idRef;

}

Location: BookmarkData.java

Content: 

/** 

 * Create and return the bookmark data for this bookmark This creates a bookmark data with the destination and adds all the data from child bookmarks

 * @param bookmark the Bookmark object for which a bookmark entry should becreated

 * @return the new bookmark data

 */

private BookmarkData createBookmarkData(Bookmark bookmark){

  BookmarkData data=new BookmarkData(bookmark);

  for (int count=0; count < bookmark.getChildBookmarks().size(); count++) {

    Bookmark bkmk=(Bookmark)(bookmark.getChildBookmarks()).get(count);

    data.addSubData(createBookmarkData(bkmk));

  }

  return data;

}

Location: BookmarkData.java

Content: 

/** 

 * Get the child data object.

 * @param count the index to get

 * @return the child bookmark data

 */

public BookmarkData getSubData(int count){

  return subData.get(count);

}

Location: BookmarkData.java

Content: 

private void putUnresolved(String id,BookmarkData bd){

  List<Resolvable> refs=unresolvedIDRefs.get(id);

  if (refs == null) {

    refs=new java.util.ArrayList<Resolvable>();

    unresolvedIDRefs.put(id,refs);

  }

  refs.add(bd);

}

