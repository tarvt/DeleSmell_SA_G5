Location: Leader.java

Content: 

/** 

 * @return the "leader-alignment" property 

 */

public int getLeaderAlignment(){

  return leaderAlignment;

}

Location: Leader.java

Content: 

/** 

 * @return the "leader-length" property 

 */

public LengthRangeProperty getLeaderLength(){

  return leaderLength;

}

Location: Leader.java

Content: 

/** 

 * @return the "leader-pattern" property 

 */

public int getLeaderPattern(){

  return leaderPattern;

}

Location: Leader.java

Content: 

/** 

 * @return the "leader-pattern-width" property 

 */

public Length getLeaderPatternWidth(){

  return leaderPatternWidth;

}

Location: Leader.java

Content: 

/** 

 * @return the "rule-style" property 

 */

public int getRuleStyle(){

  return ruleStyle;

}

Location: Leader.java

Content: 

/** 

 * @return the rule style as string 

 */

public String getRuleStyleAsString(){

switch (getRuleStyle()) {

case Constants.EN_DOTTED:

    return "dotted";

case Constants.EN_DASHED:

  return "dashed";

case Constants.EN_SOLID:

return "solid";

case Constants.EN_DOUBLE:

return "double";

case Constants.EN_GROOVE:

return "groove";

case Constants.EN_RIDGE:

return "ridge";

case Constants.EN_NONE:

return "none";

default :

throw new IllegalStateException("Unsupported rule style: " + getRuleStyle());

}

}

Location: Leader.java

Content: 

/** 

 * @return the "rule-thickness" property 

 */

public Length getRuleThickness(){

  return ruleThickness;

}

Location: Leader.java

Content: 

/** 

 * Create a new leader area.

 */

public Leader(){

}

Location: Leader.java

Content: 

/** 

 * Base constructor

 * @param parent {@link FONode} that is the parent of this object

 */

public Leader(FONode parent){

  super(parent);

}

Location: Leader.java

Content: 

/** 

 * Set the rule style of this leader area.

 * @param style the rule style for the leader line

 */

public void setRuleStyle(int style){

  ruleStyle=style;

}

Location: Leader.java

Content: 

/** 

 * Set the rule style of this leader area.

 * @param style the rule style for the leader area (XSL enum values)

 */

public void setRuleStyle(String style){

  if ("dotted".equalsIgnoreCase(style)) {

    setRuleStyle(Constants.EN_DOTTED);

  }

 else   if ("dashed".equalsIgnoreCase(style)) {

    setRuleStyle(Constants.EN_DASHED);

  }

 else   if ("solid".equalsIgnoreCase(style)) {

    setRuleStyle(Constants.EN_SOLID);

  }

 else   if ("double".equalsIgnoreCase(style)) {

    setRuleStyle(Constants.EN_DOUBLE);

  }

 else   if ("groove".equalsIgnoreCase(style)) {

    setRuleStyle(Constants.EN_GROOVE);

  }

 else   if ("ridge".equalsIgnoreCase(style)) {

    setRuleStyle(Constants.EN_RIDGE);

  }

 else   if ("none".equalsIgnoreCase(style)) {

    setRuleStyle(Constants.EN_NONE);

  }

}

Location: Leader.java

Content: 

/** 

 * Set the rule thickness of the rule in miilipoints.

 * @param rt the rule thickness in millipoints

 */

public void setRuleThickness(int rt){

  ruleThickness=rt;

}

