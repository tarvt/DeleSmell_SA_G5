Location: CrossReferenceTableTestCase.java

Content: 

@Override protected CrossReferenceObject createCrossReferenceObject(){

  return new CrossReferenceTable(trailerDictionary,STARTXREF,offsets,0,offsets.size(),offsets.size());

}

Location: CrossReferenceTableTestCase.java

Content: 

@Override protected byte[] createExpectedCrossReferenceData() throws IOException {

  StringBuilder expected=new StringBuilder(256);

  expected.append("xref\n0 ").append(offsets.size() + 1).append("\n0000000000 65535 f \n");

  for (  Long objectReference : offsets) {

    final String padding="0000000000";

    String s=String.valueOf(objectReference);

    String loc=padding.substring(s.length()) + s;

    expected.append(loc).append(" 00000 n \n");

  }

  expected.append("trailer\n<<\n").append("  /Root 1 0 R\n").append("  /Info 2 0 R\n").append("  /ID [<0123456789ABCDEF> <0123456789ABCDEF>]\n").append("  /Size ").append(Integer.toString(offsets.size() + 1)).append('\n').append(">>");

  return getBytes(expected);

}

Location: CrossReferenceTableTestCase.java

Content: 

private void runTest(List<Long> offsets) throws IOException {

  this.offsets=offsets;

  runTest();

}

Location: CrossReferenceTableTestCase.java

Content: 

@Test public void testWithBigOffsets() throws IOException {

  runTest(Arrays.asList(0xffL,0xffffL,0x7fffffffL));

}

Location: CrossReferenceTableTestCase.java

Content: 

@Test public void testWithNoOffset() throws IOException {

  List<Long> emptyList=Collections.emptyList();

  runTest(emptyList);

}

Location: CrossReferenceTableTestCase.java

Content: 

@Test public void testWithOffsets() throws IOException {

  runTest(Arrays.asList(0L,1L,2L,3L,4L));

}

