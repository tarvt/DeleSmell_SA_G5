Location: LayoutEngineTestUtils.java

Content: 

/** 

 * Removes from  {@code filter} any tests that have been disabled.

 * @param filter the filter populated with tests

 * @param disabled name of the file containing disabled test cases. If null or empty,no file is read

 * @return {@code filter} minus any disabled tests

 */

public static IOFileFilter decorateWithDisabledList(IOFileFilter filter,String disabled){

  if (disabled != null && disabled.length() > 0) {

    filter=new AndFileFilter(new NotFileFilter(new NameFileFilter(LayoutEngineTestUtils.readDisabledTestcases(new File(disabled)))),filter);

  }

  return filter;

}

Location: LayoutEngineTestUtils.java

Content: 

/** 

 * This is a helper method that uses the standard parameters for FOP's layout engine tests and returns a set of test files. These pull in System parameters to configure the layout tests to run.

 * @return A collection of file arrays that contain the test files

 */

public static Collection<File[]> getLayoutTestFiles(){

  String testSet=System.getProperty("fop.layoutengine.testset");

  testSet=(testSet != null ? testSet : "standard") + "-testcases";

  return getLayoutTestFiles(testSet);

}

Location: LayoutEngineTestUtils.java

Content: 

/** 

 * This is a helper method that uses the standard parameters for FOP's layout engine tests, given a test set name returns a set of test files.

 * @param testSetName the name of the test set

 * @return A collection of file arrays that contain the test files

 */

public static Collection<File[]> getLayoutTestFiles(String testSetName){

  TestFilesConfiguration.Builder builder=new TestFilesConfiguration.Builder();

  builder.testDir("test/layoutengine").singleProperty("fop.layoutengine.single").startsWithProperty("fop.layoutengine.starts-with").suffix(".xml").testSet(testSetName).disabledProperty("fop.layoutengine.disabled","test/layoutengine/disabled-testcases.xml").privateTestsProperty("fop.layoutengine.private");

  TestFilesConfiguration testConfig=builder.build();

  return getTestFiles(testConfig);

}

Location: LayoutEngineTestUtils.java

Content: 

/** 

 * Returns the test files matching the given configuration.

 * @param testConfig the test configuration

 * @return the applicable test cases

 */

public static Collection<File[]> getTestFiles(TestFilesConfiguration testConfig){

  File mainDir=testConfig.getTestDirectory();

  IOFileFilter filter;

  String single=testConfig.getSingleTest();

  String startsWith=testConfig.getStartsWith();

  if (single != null) {

    filter=new NameFileFilter(single);

  }

 else   if (startsWith != null) {

    filter=new PrefixFileFilter(startsWith);

    filter=new AndFileFilter(filter,new SuffixFileFilter(testConfig.getFileSuffix()));

    filter=decorateWithDisabledList(filter,testConfig.getDisabledTests());

  }

 else {

    filter=new SuffixFileFilter(testConfig.getFileSuffix());

    filter=decorateWithDisabledList(filter,testConfig.getDisabledTests());

  }

  String testset=testConfig.getTestSet();

  Collection<File> files=FileUtils.listFiles(new File(mainDir,testset),filter,TrueFileFilter.INSTANCE);

  if (testConfig.hasPrivateTests()) {

    Collection<File> privateFiles=FileUtils.listFiles(new File(mainDir,"private-testcases"),filter,TrueFileFilter.INSTANCE);

    files.addAll(privateFiles);

  }

  Collection<File[]> parametersForJUnit4=new ArrayList<File[]>();

  int index=0;

  for (  File f : files) {

    parametersForJUnit4.add(new File[]{f});

    if (DEBUG) {

      System.out.println(String.format("%3d %s",index++,f));

    }

  }

  return parametersForJUnit4;

}

Location: LayoutEngineTestUtils.java

Content: 

private LayoutEngineTestUtils(){

}

Location: LayoutEngineTestUtils.java

Content: 

private static String[] readDisabledTestcases(File f){

  List<String> lines=new ArrayList<String>();

  Source stylesheet=new StreamSource(new File("test/layoutengine/disabled-testcase2filename.xsl"));

  Source source=new StreamSource(f);

  Result result=new SAXResult(new FilenameHandler(lines));

  try {

    Transformer transformer=TransformerFactory.newInstance().newTransformer(stylesheet);

    transformer.transform(source,result);

  }

 catch (  TransformerConfigurationException tce) {

    throw new RuntimeException(tce);

  }

catch (  TransformerException te) {

    throw new RuntimeException(te);

  }

  return (String[])lines.toArray(new String[lines.size()]);

}

