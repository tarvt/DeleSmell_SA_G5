Location: KnuthAlgorithmTestCase.java

Content: 

private KnuthSequence getKnuthSequence1(){

  KnuthSequence seq=new BlockKnuthSequence();

  for (int i=0; i < 5; i++) {

    seq.add(new KnuthBox(0,null,true));

    seq.add(new KnuthPenalty(0,KnuthPenalty.INFINITE,false,null,true));

    seq.add(new KnuthGlue(5000,0,0,null,true));

    seq.add(new KnuthBox(10000,null,false));

    if (i < 4) {

      seq.add(new KnuthPenalty(0,0,false,null,false));

      seq.add(new KnuthGlue(-5000,0,0,null,true));

    }

  }

  seq.add(new KnuthPenalty(0,KnuthPenalty.INFINITE,false,null,false));

  seq.add(new KnuthGlue(0,Integer.MAX_VALUE,0,null,false));

  seq.add(new KnuthPenalty(0,-KnuthPenalty.INFINITE,false,null,false));

  ElementListObserver.observe(seq,"test",null);

  return seq;

}

Location: KnuthAlgorithmTestCase.java

Content: 

/** 

 * Tests a special condition where a negative-length glue occurs directly after a break possibility.

 * @throws Exception if an error occurs

 */

@Test public void test1() throws Exception {

  MyBreakingAlgorithm algo=new MyBreakingAlgorithm(0,0,true,true,0);

  algo.setConstantLineWidth(30000);

  KnuthSequence seq=getKnuthSequence1();

  algo.findBreakingPoints(seq,1,true,BreakingAlgorithm.ALL_BREAKS);

  Part[] parts=algo.getParts();

  assertEquals("Sequence must produce 3 parts",3,parts.length);

  assertEquals(5000,parts[0].difference);

  assertEquals(5000,parts[1].difference);

}

