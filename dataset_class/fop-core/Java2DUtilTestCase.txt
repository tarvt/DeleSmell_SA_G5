Location: Java2DUtilTestCase.java

Content: 

@Test public void createGlyphVectorMultiByte() throws Exception {

  Graphics2D g2d=mock(Graphics2D.class);

  java.awt.Font awtFont=mock(java.awt.Font.class);

  Font font=makeFont(MULTI_BYTE_FONT_NAME);

  FontInfo fontInfo=makeFontInfo();

  int[] codepoints=new int[EXPECTED_TEXT_MULTI.codePointCount(0,EXPECTED_TEXT_MULTI.length())];

  int i=0;

  for (  int cp : CharUtilities.codepointsIter(EXPECTED_TEXT_MULTI)) {

    codepoints[i++]=cp;

  }

  when(g2d.getFont()).thenReturn(awtFont);

  Java2DUtil.createGlyphVector(TEXT,g2d,font,fontInfo);

  verify(awtFont).createGlyphVector(any(FontRenderContext.class),eq(codepoints));

}

Location: Java2DUtilTestCase.java

Content: 

@Test public void createGlyphVectorSingleByte() throws Exception {

  Graphics2D g2d=mock(Graphics2D.class);

  java.awt.Font awtFont=mock(java.awt.Font.class);

  Font font=makeFont(SINGLE_BYTE_FONT_NAME);

  FontInfo fontInfo=makeFontInfo();

  when(g2d.getFont()).thenReturn(awtFont);

  Java2DUtil.createGlyphVector(TEXT,g2d,font,fontInfo);

  verify(awtFont).createGlyphVector(any(FontRenderContext.class),eq(EXPECTED_TEXT_SINGLE));

}

Location: Java2DUtilTestCase.java

Content: 

private FontInfo makeFontInfo(){

  Map<String,Typeface> fonts=new HashMap<String,Typeface>();

  SingleByteFont singleByteFont=mock(SingleByteFont.class);

  MultiByteFont multiByteFont=mock(MultiByteFont.class);

  FontInfo fontInfo=mock(FontInfo.class);

  fonts.put(MULTI_BYTE_FONT_NAME,multiByteFont);

  fonts.put(SINGLE_BYTE_FONT_NAME,singleByteFont);

  when(multiByteFont.findGlyphIndex(anyInt())).thenAnswer(new FindGlyphIndexAnswer());

  when(fontInfo.getFonts()).thenReturn(fonts);

  return fontInfo;

}

Location: Java2DUtilTestCase.java

Content: 

private Font makeFont(String fontName){

  Font font=mock(Font.class);

  when(font.getFontName()).thenReturn(fontName);

  return font;

}

