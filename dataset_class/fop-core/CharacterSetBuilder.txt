Location: CharacterSetBuilder.java

Content: 

/** 

 * Load the font details and metrics into the CharacterSetMetric object, this will use the actual afp code page and character set files to load the object with the necessary metrics. This method is to be used for double byte character sets (DBCS).

 * @param characterSetName name of the characterset

 * @param codePageName name of the code page file

 * @param encoding encoding name

 * @param charsetType the characterset type

 * @param accessor used to load codepage and characterset

 * @param eventProducer for handling AFP related events

 * @return CharacterSet object

 * @throws IOException if an I/O error occurs

 */

public CharacterSet buildDBCS(String characterSetName,String codePageName,String encoding,CharacterSetType charsetType,AFPResourceAccessor accessor,AFPEventProducer eventProducer) throws IOException {

  return processFont(characterSetName,codePageName,encoding,charsetType,accessor,eventProducer);

}

Location: CharacterSetBuilder.java

Content: 

/** 

 * Load the font details and metrics into the CharacterSetMetric object, this will use the actual afp code page and character set files to load the object with the necessary metrics.

 * @param characterSetName name of the characterset

 * @param codePageName name of the code page file

 * @param encoding encoding name

 * @param accessor used to load codepage and characterset

 * @param eventProducer for handling AFP related events

 * @return CharacterSet object

 * @throws IOException if an I/O error occurs

 */

public CharacterSet buildSBCS(String characterSetName,String codePageName,String encoding,AFPResourceAccessor accessor,AFPEventProducer eventProducer) throws IOException {

  return processFont(characterSetName,codePageName,encoding,CharacterSetType.SINGLE_BYTE,accessor,eventProducer);

}

Location: CharacterSetBuilder.java

Content: 

/** 

 * Load the font details and metrics into the CharacterSetMetric object, this will use the actual afp code page and character set files to load the object with the necessary metrics.

 * @param characterSetName the CharacterSetMetric object to populate

 * @param codePageName the name of the code page to use

 * @param encoding name of the encoding in use

 * @param typeface base14 font name

 * @param eventProducer for handling AFP related events

 * @return CharacterSet object

 * @throws IOException if an I/O error occurs

 */

public CharacterSet build(String characterSetName,String codePageName,String encoding,Typeface typeface,AFPEventProducer eventProducer) throws IOException {

  return new FopCharacterSet(codePageName,encoding,characterSetName,typeface,eventProducer);

}

Location: CharacterSetBuilder.java

Content: 

public CharacterSet build(String characterSetName,String codePageName,String encoding,Typeface typeface,AFPResourceAccessor accessor,AFPEventProducer eventProducer) throws IOException {

  return new FopCharacterSet(codePageName,encoding,characterSetName,typeface,accessor,eventProducer);

}

Location: CharacterSetBuilder.java

Content: 

/** 

 * Default constructor. 

 */

private CharacterSetBuilder(){

}

Location: CharacterSetBuilder.java

Content: 

/** 

 * Closes the inputstream

 * @param inputStream the inputstream to close

 */

private void closeInputStream(InputStream inputStream){

  try {

    if (inputStream != null) {

      inputStream.close();

    }

  }

 catch (  Exception ex) {

    LOG.error(ex.getMessage());

  }

}

Location: CharacterSetBuilder.java

Content: 

private static int determineOrientation(byte orientation){

  int degrees=0;

switch (orientation) {

case 0x00:

    degrees=0;

  break;

case 0x2D:

degrees=90;

break;

case 0x5A:

degrees=180;

break;

case (byte)0x87:

degrees=270;

break;

default :

throw new IllegalStateException("Invalid orientation: " + orientation);

}

return degrees;

}

Location: CharacterSetBuilder.java

Content: 

/** 

 * Factory method for the double-byte (CID Keyed font (Type 0)) implementation of AFPFontReader.

 * @return AFPFontReader

 */

public static CharacterSetBuilder getDoubleByteInstance(){

  return DoubleByteLoader.getInstance();

}

Location: CharacterSetBuilder.java

Content: 

private static int getSBIN(byte[] data,int start){

  int ubin=((data[start] & 0xFF) << 8) + (data[start + 1] & 0xFF);

  if ((ubin & 0x8000) != 0) {

    return ubin | 0xFFFF0000;

  }

 else {

    return ubin;

  }

}

Location: CharacterSetBuilder.java

Content: 

/** 

 * Factory method for the single-byte implementation of AFPFontReader.

 * @return AFPFontReader

 */

public static CharacterSetBuilder getSingleByteInstance(){

  return SingleByteLoader.getInstance();

}

Location: CharacterSetBuilder.java

Content: 

private static int getUBIN(byte[] data,int start){

  return ((data[start] & 0xFF) << 8) + (data[start + 1] & 0xFF);

}

Location: CharacterSetBuilder.java

Content: 

/** 

 * Load the code page information from the appropriate file. The file name to load is determined by the code page name and the file extension 'CDP'.

 * @param codePage the code page identifier

 * @param encoding the encoding to use for the character decoding

 * @param accessor the resource accessor

 * @param eventProducer for handling AFP related events

 * @return a code page mapping (key: GCGID, value: Unicode character)

 * @throws IOException if an I/O exception of some sort has occurred.

 */

protected Map<String,String> loadCodePage(String codePage,String encoding,AFPResourceAccessor accessor,AFPEventProducer eventProducer) throws IOException {

  Map<String,String> codePages=new HashMap<String,String>();

  InputStream inputStream=null;

  try {

    inputStream=openInputStream(accessor,codePage.trim(),eventProducer);

  }

 catch (  IOException e) {

    eventProducer.codePageNotFound(this,e);

    throw e;

  }

  try {

    StructuredFieldReader structuredFieldReader=new StructuredFieldReader(inputStream);

    byte[] data=structuredFieldReader.getNext(CHARACTER_TABLE_SF);

    int position=0;

    byte[] gcgiBytes=new byte[8];

    byte[] charBytes=new byte[1];

    for (int index=3; index < data.length; index++) {

      if (position < 8) {

        gcgiBytes[position]=data[index];

        position++;

      }

 else       if (position == 9) {

        position=0;

        charBytes[0]=data[index];

        String gcgiString=new String(gcgiBytes,AFPConstants.EBCIDIC_ENCODING);

        String charString=new String(charBytes,encoding);

        codePages.put(gcgiString,charString);

      }

 else {

        position++;

      }

    }

  }

  finally {

    closeInputStream(inputStream);

  }

  return codePages;

}

Location: CharacterSetBuilder.java

Content: 

/** 

 * Returns an InputStream to a given file path and filename

 * @param accessor the resource accessor

 * @param uriStr the URI

 * @param eventProducer for handling AFP related events

 * @return an inputStream

 * @throws IOException in the event that an I/O exception of some sort has occurred

 */

private InputStream openInputStream(AFPResourceAccessor accessor,String uriStr,AFPEventProducer eventProducer) throws IOException {

  URI uri;

  try {

    uri=InternalResourceResolver.cleanURI(uriStr.trim());

  }

 catch (  URISyntaxException e) {

    throw new MalformedURLException("Invalid uri: " + uriStr + " ("+ e.getMessage()+ ")");

  }

  if (LOG.isDebugEnabled()) {

    LOG.debug("Opening " + uri);

  }

  return accessor.createInputStream(uri);

}

Location: CharacterSetBuilder.java

Content: 

/** 

 * Process the font control details using the structured field reader.

 * @param structuredFieldReader the structured field reader

 * @return the FontControl

 * @throws IOException if an I/O exception of some sort has occurred.

 */

private FontControl processFontControl(StructuredFieldReader structuredFieldReader) throws IOException {

  byte[] fncData=structuredFieldReader.getNext(FONT_CONTROL_SF);

  FontControl fontControl=null;

  if (fncData != null) {

    fontControl=new FontControl();

    if (fncData[7] == (byte)0x02) {

      fontControl.setRelative(true);

    }

    int metricResolution=getUBIN(fncData,9);

    if (metricResolution == 1000) {

      fontControl.setUnitsPerEm(1000);

    }

 else {

      fontControl.setDpi(metricResolution / 10);

    }

  }

  return fontControl;

}

Location: CharacterSetBuilder.java

Content: 

/** 

 * Process the font descriptor details using the structured field reader.

 * @param structuredFieldReader the structured field reader

 * @return a class representing the font descriptor

 * @throws IOException if an I/O exception of some sort has occurred.

 */

private static FontDescriptor processFontDescriptor(StructuredFieldReader structuredFieldReader) throws IOException {

  byte[] fndData=structuredFieldReader.getNext(FONT_DESCRIPTOR_SF);

  return new FontDescriptor(fndData);

}

Location: CharacterSetBuilder.java

Content: 

private void processFontIndex(StructuredFieldReader structuredFieldReader,CharacterSetOrientation cso,Map<String,String> codepage,ValueNormalizer normalizer) throws IOException {

  byte[] data=structuredFieldReader.getNext(FONT_INDEX_SF);

  int position=0;

  byte[] gcgid=new byte[8];

  byte[] fiData=new byte[20];

  String firstABCMismatch=null;

  for (int index=3; index < data.length; index++) {

    if (position < 8) {

      gcgid[position]=data[index];

      position++;

    }

 else     if (position < 27) {

      fiData[position - 8]=data[index];

      position++;

    }

 else     if (position == 27) {

      fiData[position - 8]=data[index];

      position=0;

      String gcgiString=new String(gcgid,AFPConstants.EBCIDIC_ENCODING);

      String idx=codepage.get(gcgiString);

      if (idx != null) {

        char cidx=idx.charAt(0);

        int width=getUBIN(fiData,0);

        int ascendHt=getSBIN(fiData,2);

        int descendDp=getSBIN(fiData,4);

        int a=getSBIN(fiData,10);

        int b=getUBIN(fiData,12);

        int c=getSBIN(fiData,14);

        int abc=a + b + c;

        int diff=Math.abs(abc - width);

        if (diff != 0 && width != 0) {

          double diffPercent=100 * diff / (double)width;

          if (diffPercent > 2) {

            if (LOG.isTraceEnabled()) {

              LOG.trace(gcgiString + ": " + a+ " + "+ b+ " + "+ c+ " = "+ (a + b + c)+ " but found: "+ width);

            }

            if (firstABCMismatch == null) {

              firstABCMismatch=gcgiString;

            }

          }

        }

        int normalizedWidth=normalizer.normalize(width);

        int x0=normalizer.normalize(a);

        int y0=normalizer.normalize(-descendDp);

        int dx=normalizer.normalize(b);

        int dy=normalizer.normalize(ascendHt + descendDp);

        cso.setCharacterMetrics(cidx,normalizedWidth,new Rectangle(x0,y0,dx,dy));

      }

    }

  }

  if (LOG.isDebugEnabled() && firstABCMismatch != null) {

    LOG.debug("Font has metrics inconsitencies where A+B+C doesn't equal the" + " character increment. The first such character found: " + firstABCMismatch);

  }

}

Location: CharacterSetBuilder.java

Content: 

/** 

 * Process the font orientation details from using the structured field reader.

 * @param structuredFieldReader the structured field reader

 * @return CharacterSetOrientation array

 * @throws IOException if an I/O exception of some sort has occurred.

 */

private CharacterSetOrientation[] processFontOrientation(StructuredFieldReader structuredFieldReader) throws IOException {

  byte[] data=structuredFieldReader.getNext(FONT_ORIENTATION_SF);

  int position=0;

  byte[] fnoData=new byte[26];

  List<CharacterSetOrientation> orientations=new ArrayList<CharacterSetOrientation>();

  for (int index=3; index < data.length; index++) {

    fnoData[position]=data[index];

    position++;

    if (position == 26) {

      position=0;

      int orientation=determineOrientation(fnoData[2]);

      int spaceIncrement=getUBIN(fnoData,8);

      int emIncrement=getUBIN(fnoData,14);

      int nominalCharacterIncrement=getUBIN(fnoData,20);

      orientations.add(new CharacterSetOrientation(orientation,spaceIncrement,emIncrement,nominalCharacterIncrement));

    }

  }

  return orientations.toArray(EMPTY_CSO_ARRAY);

}

Location: CharacterSetBuilder.java

Content: 

/** 

 * Populate the CharacterSetOrientation object in the suplied array with the font position details using the supplied structured field reader.

 * @param structuredFieldReader the structured field reader

 * @param characterSetOrientations the array of CharacterSetOrientation objects

 * @param metricNormalizationFactor factor to apply to the metrics to get normalizedfont metric values

 * @throws IOException if an I/O exception of some sort has occurred.

 */

private void processFontPosition(StructuredFieldReader structuredFieldReader,CharacterSetOrientation[] characterSetOrientations,ValueNormalizer normalizer) throws IOException {

  byte[] data=structuredFieldReader.getNext(FONT_POSITION_SF);

  int position=0;

  byte[] fpData=new byte[26];

  int characterSetOrientationIndex=0;

  for (int index=3; index < data.length; index++) {

    if (position < 22) {

      fpData[position]=data[index];

      if (position == 9) {

        CharacterSetOrientation characterSetOrientation=characterSetOrientations[characterSetOrientationIndex];

        int xHeight=getSBIN(fpData,2);

        int capHeight=getSBIN(fpData,4);

        int ascHeight=getSBIN(fpData,6);

        int dscHeight=getSBIN(fpData,8);

        dscHeight=dscHeight * -1;

        int underscoreWidth=getUBIN(fpData,17);

        int underscorePosition=getSBIN(fpData,20);

        characterSetOrientation.setXHeight(normalizer.normalize(xHeight));

        characterSetOrientation.setCapHeight(normalizer.normalize(capHeight));

        characterSetOrientation.setAscender(normalizer.normalize(ascHeight));

        characterSetOrientation.setDescender(normalizer.normalize(dscHeight));

        characterSetOrientation.setUnderscoreWidth(normalizer.normalize(underscoreWidth));

        characterSetOrientation.setUnderscorePosition(normalizer.normalize(underscorePosition));

      }

    }

 else     if (position == 22) {

      position=0;

      characterSetOrientationIndex++;

      fpData[position]=data[index];

    }

    position++;

  }

}

Location: CharacterSetBuilder.java

Content: 

private CharacterSet processFont(String characterSetName,String codePageName,String encoding,CharacterSetType charsetType,AFPResourceAccessor accessor,AFPEventProducer eventProducer) throws IOException {

  URI charSetURI=accessor.resolveURI(characterSetName);

  String cacheKey=charSetURI.toASCIIString() + "_" + characterSetName+ "_"+ codePageName;

  CharacterSet characterSet=(CharacterSet)characterSetsCache.get(cacheKey);

  if (characterSet != null) {

    return characterSet;

  }

  characterSet=new CharacterSet(codePageName,encoding,charsetType,characterSetName,accessor,eventProducer);

  InputStream inputStream=null;

  try {

    Map<String,String> codePage;

synchronized (codePagesCache) {

      codePage=codePagesCache.get(codePageName);

      if (codePage == null) {

        codePage=loadCodePage(codePageName,encoding,accessor,eventProducer);

        codePagesCache.put(codePageName,codePage);

      }

    }

    inputStream=openInputStream(accessor,characterSetName,eventProducer);

    StructuredFieldReader structuredFieldReader=new StructuredFieldReader(inputStream);

    FontDescriptor fontDescriptor=processFontDescriptor(structuredFieldReader);

    characterSet.setNominalVerticalSize(fontDescriptor.getNominalFontSizeInMillipoints());

    FontControl fontControl=processFontControl(structuredFieldReader);

    if (fontControl != null) {

      CharacterSetOrientation[] characterSetOrientations=processFontOrientation(structuredFieldReader);

      double metricNormalizationFactor;

      if (fontControl.isRelative()) {

        metricNormalizationFactor=1;

      }

 else {

        int dpi=fontControl.getDpi();

        metricNormalizationFactor=1000.0d * 72000.0d / fontDescriptor.getNominalFontSizeInMillipoints() / dpi;

      }

      ValueNormalizer normalizer=new ValueNormalizer(metricNormalizationFactor);

      processFontPosition(structuredFieldReader,characterSetOrientations,normalizer);

      for (      CharacterSetOrientation characterSetOrientation : characterSetOrientations) {

        processFontIndex(structuredFieldReader,characterSetOrientation,codePage,normalizer);

        characterSet.addCharacterSetOrientation(characterSetOrientation);

      }

    }

 else {

      throw new IOException("Missing D3AE89 Font Control structured field.");

    }

  }

  finally {

    closeInputStream(inputStream);

  }

  characterSetsCache.put(cacheKey,characterSet);

  return characterSet;

}

