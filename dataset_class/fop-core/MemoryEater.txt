Location: MemoryEater.java

Content: 

private void eatMemory(File foFile,int runRepeats,int replicatorRepeats) throws Exception {

  stats=new Stats();

  FopFactory fopFactory=FopFactory.newInstance(foFile.getParentFile().toURI());

  for (int i=0; i < runRepeats; i++) {

    eatMemory(i,foFile,replicatorRepeats,fopFactory);

    stats.progress(i,runRepeats);

  }

  stats.dumpFinalStats();

  System.out.println(stats.getGoogleChartURL());

}

Location: MemoryEater.java

Content: 

private void eatMemory(int callIndex,File foFile,int replicatorRepeats,FopFactory fopFactory) throws Exception {

  Source src=new StreamSource(foFile);

  Transformer transformer=replicatorTemplates.newTransformer();

  transformer.setParameter("repeats",replicatorRepeats);

  OutputStream out=new NullOutputStream();

  try {

    FOUserAgent userAgent=fopFactory.newFOUserAgent();

    Fop fop=fopFactory.newFop(MimeConstants.MIME_PDF,userAgent,out);

    Result res=new SAXResult(fop.getDefaultHandler());

    transformer.transform(src,res);

    stats.notifyPagesProduced(fop.getResults().getPageCount());

    if (callIndex == 0) {

      System.out.println(foFile.getName() + " generates " + fop.getResults().getPageCount()+ " pages.");

    }

    stats.checkStats();

  }

  finally {

    IOUtils.closeQuietly(out);

  }

}

Location: MemoryEater.java

Content: 

private MemoryEater() throws TransformerConfigurationException, MalformedURLException {

  File xsltFile=new File("test/xsl/fo-replicator.xsl");

  Source xslt=new StreamSource(xsltFile);

  replicatorTemplates=tFactory.newTemplates(xslt);

}

