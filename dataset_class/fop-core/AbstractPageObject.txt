Location: AbstractPageObject.java

Content: 

/** 

 * Default constructor

 * @param factory the object factory

 */

public AbstractPageObject(Factory factory){

  this.factory=factory;

}

Location: AbstractPageObject.java

Content: 

/** 

 * Main constructor

 * @param factory the object factory

 * @param name the name of this page object

 */

public AbstractPageObject(Factory factory,String name){

  super(name);

  this.factory=factory;

}

Location: AbstractPageObject.java

Content: 

/** 

 * Construct a new page object for the specified name argument, the page name should be an 8 character identifier.

 * @param factory the object factory.

 * @param name the name of the page.

 * @param width the width of the page.

 * @param height the height of the page.

 * @param rotation the rotation of the page.

 * @param widthRes the width resolution of the page.

 * @param heightRes the height resolution of the page.

 */

public AbstractPageObject(Factory factory,String name,int width,int height,int rotation,int widthRes,int heightRes){

  super(name);

  this.factory=factory;

  this.width=width;

  this.height=height;

  this.rotation=rotation;

  this.widthRes=widthRes;

  this.heightRes=heightRes;

}

Location: AbstractPageObject.java

Content: 

/** 

 * Adds an AFP object reference to this page

 * @param obj an AFP object

 */

public void addObject(Object obj){

  objects.add(obj);

}

Location: AbstractPageObject.java

Content: 

/** 

 * Helper method to create a map coded font object on the current page, this method delegates the construction of the map coded font object to the active environment group on the page.

 * @param fontReference the font number used as the resource identifier

 * @param font the font

 * @param size the point size of the font

 */

public void createFont(int fontReference,AFPFont font,int size){

  getActiveEnvironmentGroup().createFont(fontReference,font,size,0);

}

Location: AbstractPageObject.java

Content: 

/** 

 * Creates an IncludePageSegment on the current page.

 * @param name the name of the page segment

 * @param x the x coordinate of the page segment.

 * @param y the y coordinate of the page segment.

 * @param hard true if hard page segment possible

 */

public void createIncludePageSegment(String name,int x,int y,boolean hard){

  IncludePageSegment ips=factory.createIncludePageSegment(name,x,y);

  addObject(ips);

  if (hard) {

    getActiveEnvironmentGroup().addMapPageSegment(name);

  }

}

Location: AbstractPageObject.java

Content: 

/** 

 * Helper method to create a line on the current page, this method delegates to the presentation text object in order to construct the line.

 * @param lineDataInfo the line data information.

 */

public void createLine(AFPLineDataInfo lineDataInfo){

  boolean success=getPresentationTextObject().createLineData(lineDataInfo);

  if (!success) {

    endPresentationObject();

    getPresentationTextObject().createLineData(lineDataInfo);

  }

}

Location: AbstractPageObject.java

Content: 

/** 

 * Creates a NoOperation on the page.

 * @param content the byte data

 */

public void createNoOperation(String content){

  addObject(new NoOperation(content));

}

Location: AbstractPageObject.java

Content: 

/** 

 * Creates a TagLogicalElement on the page.

 * @param state the state of the TLE

 */

public void createTagLogicalElement(TagLogicalElement.State state){

  TagLogicalElement tle=new TagLogicalElement(state);

  List list=getTagLogicalElements();

  list.add(tle);

}

Location: AbstractPageObject.java

Content: 

/** 

 * Helper method to create text on the current page, this method delegates to the presentation text object in order to construct the text.

 * @param producer the producer

 * @throws UnsupportedEncodingException thrown if character encoding is not supported

 */

public void createText(PtocaProducer producer) throws UnsupportedEncodingException {

  boolean success=getPresentationTextObject().createControlSequences(producer);

  if (!success) {

    endPresentationObject();

    getPresentationTextObject().createControlSequences(producer);

  }

}

Location: AbstractPageObject.java

Content: 

/** 

 * Ends the presentation text object

 */

public void endPresentationObject(){

  if (currentPresentationTextObject != null) {

    currentPresentationTextObject.endControlSequence();

    currentPresentationTextObject=null;

  }

}

Location: AbstractPageObject.java

Content: 

/** 

 * Returns the ActiveEnvironmentGroup associated with this page.

 * @return the ActiveEnvironmentGroup object

 */

public ActiveEnvironmentGroup getActiveEnvironmentGroup(){

  if (activeEnvironmentGroup == null) {

    this.activeEnvironmentGroup=factory.createActiveEnvironmentGroup(width,height,widthRes,heightRes);

    if (rotation != 0) {

switch (rotation) {

case 90:

        activeEnvironmentGroup.setObjectAreaPosition(width,0,rotation);

      break;

case 180:

    activeEnvironmentGroup.setObjectAreaPosition(width,height,rotation);

  break;

case 270:

activeEnvironmentGroup.setObjectAreaPosition(0,height,rotation);

break;

default :

}

}

}

return activeEnvironmentGroup;

}

Location: AbstractPageObject.java

Content: 

/** 

 * Helper method to create a presentation text object on the current page and to return the object.

 * @return the presentation text object

 */

public PresentationTextObject getPresentationTextObject(){

  if (currentPresentationTextObject == null) {

    PresentationTextObject presentationTextObject=factory.createPresentationTextObject();

    addObject(presentationTextObject);

    this.currentPresentationTextObject=presentationTextObject;

  }

  return currentPresentationTextObject;

}

Location: AbstractPageObject.java

Content: 

/** 

 * Returns the rotation of the page

 * @return the rotation of the page

 */

public int getRotation(){

  return rotation;

}

Location: AbstractPageObject.java

Content: 

/** 

 * Returns the list of  {@link TagLogicalElement}s.

 * @return the TLEs

 */

protected List getTagLogicalElements(){

  if (objects == null) {

    this.objects=new java.util.ArrayList<AbstractStructuredObject>();

  }

  return this.objects;

}

