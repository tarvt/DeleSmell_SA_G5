Location: DocumentNavigationHandlerTestCase.java

Content: 

@Test public void testBookmarkGotoXY() throws SAXException, IFException {

  FOUserAgent ua=FopFactory.newInstance(new File(".").toURI()).newFOUserAgent();

  PDFDocumentHandler documentHandler=new PDFDocumentHandler(new IFContext(ua));

  documentHandler.setResult(new StreamResult(new ByteArrayOutputStream()));

  documentHandler.setFontInfo(new FontInfo());

  documentHandler.startDocument();

  documentHandler.startPage(0,"","",new Dimension());

  documentHandler.endPage();

  int currentPage=1;

  documentHandler.startPage(currentPage,"","",new Dimension());

  final List<BookmarkTree> trees=new ArrayList<BookmarkTree>();

  PDFDocumentNavigationHandler pdfDocumentNavigationHandler=new PDFDocumentNavigationHandler(documentHandler){

    public void renderBookmarkTree(    BookmarkTree tree) throws IFException {

      trees.add(tree);

    }

  }

;

  DocumentNavigationHandler navigationHandler=new DocumentNavigationHandler(pdfDocumentNavigationHandler,new HashMap<String,StructureTreeElement>());

  Attributes attributes=mock(Attributes.class);

  when(attributes.getValue("page-index")).thenReturn("0");

  when(attributes.getValue("x")).thenReturn("0");

  when(attributes.getValue("y")).thenReturn("0");

  for (  QName q : Arrays.asList(DocumentNavigationExtensionConstants.BOOKMARK_TREE,DocumentNavigationExtensionConstants.BOOKMARK,DocumentNavigationExtensionConstants.GOTO_XY)) {

    navigationHandler.startElement(q.getNamespaceURI(),q.getLocalName(),null,attributes);

  }

  for (  QName q : Arrays.asList(DocumentNavigationExtensionConstants.GOTO_XY,DocumentNavigationExtensionConstants.BOOKMARK,DocumentNavigationExtensionConstants.BOOKMARK_TREE)) {

    navigationHandler.endElement(q.getNamespaceURI(),q.getLocalName(),null);

  }

  documentHandler.endPage();

  Bookmark b=(Bookmark)trees.get(0).getBookmarks().get(0);

  GoToXYAction a=(GoToXYAction)b.getAction();

  Assert.assertEquals(a.getPageIndex(),0);

}

Location: DocumentNavigationHandlerTestCase.java

Content: 

@Test public void testGotoXY() throws SAXException, IFException {

  FOUserAgent ua=FopFactory.newInstance(new File(".").toURI()).newFOUserAgent();

  PDFDocumentHandler documentHandler=new PDFDocumentHandler(new IFContext(ua));

  documentHandler.setResult(new StreamResult(new ByteArrayOutputStream()));

  documentHandler.setFontInfo(new FontInfo());

  documentHandler.startDocument();

  documentHandler.startPage(0,"","",new Dimension());

  documentHandler.endPage();

  int currentPage=1;

  documentHandler.startPage(currentPage,"","",new Dimension());

  final List<GoToXYAction> goToXYActions=new ArrayList<GoToXYAction>();

  PDFDocumentNavigationHandler pdfDocumentNavigationHandler=new PDFDocumentNavigationHandler(documentHandler){

    public void addResolvedAction(    AbstractAction action) throws IFException {

      super.addResolvedAction(action);

      goToXYActions.add((GoToXYAction)action);

    }

  }

;

  DocumentNavigationHandler navigationHandler=new DocumentNavigationHandler(pdfDocumentNavigationHandler,new HashMap<String,StructureTreeElement>());

  QName xy=DocumentNavigationExtensionConstants.GOTO_XY;

  Attributes attributes=mock(Attributes.class);

  when(attributes.getValue("page-index")).thenReturn("0");

  when(attributes.getValue("x")).thenReturn("0");

  when(attributes.getValue("y")).thenReturn("0");

  navigationHandler.startElement(xy.getNamespaceURI(),xy.getLocalName(),null,attributes);

  navigationHandler.endElement(xy.getNamespaceURI(),xy.getLocalName(),null);

  documentHandler.endPage();

  Assert.assertEquals(goToXYActions.get(0).getPageIndex(),currentPage);

}

Location: DocumentNavigationHandlerTestCase.java

Content: 

@Test public void testGotoXYPrevousPage() throws SAXException, IFException, IOException {

  FOUserAgent ua=FopFactory.newInstance(new File(".").toURI()).newFOUserAgent();

  PDFDocumentHandler documentHandler=new PDFDocumentHandler(new IFContext(ua));

  ByteArrayOutputStream bos=new ByteArrayOutputStream();

  documentHandler.setResult(new StreamResult(bos));

  documentHandler.setFontInfo(new FontInfo());

  documentHandler.startDocument();

  documentHandler.startPage(0,"","",new Dimension());

  documentHandler.endPage();

  documentHandler.startPage(1,"","",new Dimension());

  final List<GoToXYAction> goToXYActions=new ArrayList<GoToXYAction>();

  PDFDocumentNavigationHandler pdfDocumentNavigationHandler=new PDFDocumentNavigationHandler(documentHandler){

    public void addResolvedAction(    AbstractAction action) throws IFException {

      super.addResolvedAction(action);

      goToXYActions.add((GoToXYAction)action);

    }

  }

;

  DocumentNavigationHandler navigationHandler=new DocumentNavigationHandler(pdfDocumentNavigationHandler,new HashMap<String,StructureTreeElement>());

  QName xy=DocumentNavigationExtensionConstants.GOTO_XY;

  Attributes attributes=mock(Attributes.class);

  when(attributes.getValue("page-index")).thenReturn("0");

  when(attributes.getValue("page-index-relative")).thenReturn("-1");

  when(attributes.getValue("x")).thenReturn("0");

  when(attributes.getValue("y")).thenReturn("0");

  navigationHandler.startElement(xy.getNamespaceURI(),xy.getLocalName(),null,attributes);

  navigationHandler.endElement(xy.getNamespaceURI(),xy.getLocalName(),null);

  documentHandler.endPage();

  documentHandler.endDocument();

  Assert.assertEquals(goToXYActions.get(0).getPageIndex(),0);

  Collection<StringBuilder> objs=PDFLinearizationTestCase.readObjs(new ByteArrayInputStream(bos.toByteArray())).values();

  String pages=PDFVTTestCase.getObj(objs,"/Type /Pages");

  String action=PDFVTTestCase.getObj(objs,"/Type /Action");

  String pageRef=action.split("\\[")[1].split(" /XYZ")[0];

  Assert.assertTrue(pageRef.endsWith(" 0 R"));

  Assert.assertTrue(pages.contains("/Kids [" + pageRef));

}

Location: DocumentNavigationHandlerTestCase.java

Content: 

@Test public void testGotoXYUniqueLinks() throws IFException, SAXException {

  FOUserAgent ua=FopFactory.newInstance(new File(".").toURI()).newFOUserAgent();

  PDFDocumentHandler documentHandler=new PDFDocumentHandler(new IFContext(ua));

  ByteArrayOutputStream bos=new ByteArrayOutputStream();

  documentHandler.setResult(new StreamResult(bos));

  documentHandler.setFontInfo(new FontInfo());

  documentHandler.startDocument();

  PDFDocumentNavigationHandler pdfDocumentNavigationHandler=new PDFDocumentNavigationHandler(documentHandler);

  DocumentNavigationHandler navigationHandler=new DocumentNavigationHandler(pdfDocumentNavigationHandler,new HashMap<String,StructureTreeElement>());

  QName xy=DocumentNavigationExtensionConstants.GOTO_XY;

  Attributes attributes=mock(Attributes.class);

  when(attributes.getValue("page-index")).thenReturn("0");

  when(attributes.getValue("x")).thenReturn("0");

  when(attributes.getValue("y")).thenReturn("0");

  documentHandler.startPage(0,"","",new Dimension());

  navigationHandler.startElement(xy.getNamespaceURI(),xy.getLocalName(),null,attributes);

  navigationHandler.endElement(xy.getNamespaceURI(),xy.getLocalName(),null);

  documentHandler.endPage();

  documentHandler.startPage(1,"","",new Dimension());

  navigationHandler.startElement(xy.getNamespaceURI(),xy.getLocalName(),null,attributes);

  navigationHandler.endElement(xy.getNamespaceURI(),xy.getLocalName(),null);

  documentHandler.endPage();

  Iterator<String> i=Arrays.asList(bos.toString().split("\n")).iterator();

  List<String> pageLink=new ArrayList<String>();

  while (i.hasNext()) {

    if (i.next().equals("/S /GoTo")) {

      pageLink.add(i.next());

    }

  }

  Assert.assertEquals(pageLink.size(),2);

  Assert.assertFalse(pageLink.get(0).equals(pageLink.get(1)));

}

