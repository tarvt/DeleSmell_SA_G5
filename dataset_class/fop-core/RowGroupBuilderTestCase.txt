Location: RowGroupBuilderTestCase.java

Content: 

/** 

 * Gets the next table and checks its row-groups.

 * @param tableIter an iterator over the tables to check

 * @param expectedHeaderRowLengths expected row-group sizes for the header. If nullthe table is not expected to have a header

 * @param expectedFooterRowLengths expected row-group sizes for the footer. If nullthe table is not expected to have a footer

 * @param expectedBodyRowLengths expected row-group sizes for the body(-ies)

 */

private void checkNextTableRowGroups(Iterator tableIter,int[] expectedHeaderRowLengths,int[] expectedFooterRowLengths,int[][] expectedBodyRowLengths){

  Table table=(Table)tableIter.next();

  if (expectedHeaderRowLengths == null) {

    assertNull(table.getTableHeader());

  }

 else {

    checkTablePartRowGroups(table.getTableHeader(),expectedHeaderRowLengths);

  }

  if (expectedFooterRowLengths == null) {

    assertNull(table.getTableFooter());

  }

 else {

    checkTablePartRowGroups(table.getTableFooter(),expectedFooterRowLengths);

  }

  Iterator bodyIter=table.getChildNodes();

  for (  int[] expectedBodyRowLength : expectedBodyRowLengths) {

    assertTrue(bodyIter.hasNext());

    checkTablePartRowGroups((TableBody)bodyIter.next(),expectedBodyRowLength);

  }

}

Location: RowGroupBuilderTestCase.java

Content: 

public void checkSimple(String filename) throws Exception {

  setUp(filename);

  Iterator tableIter=getTableIterator();

  checkNextTableRowGroups(tableIter,null,null,new int[][]{{1}});

  checkNextTableRowGroups(tableIter,null,null,new int[][]{{1,1}});

  checkNextTableRowGroups(tableIter,null,null,new int[][]{{1},{1}});

  checkNextTableRowGroups(tableIter,null,null,new int[][]{{1,1},{1,1,1}});

  checkNextTableRowGroups(tableIter,new int[]{1},null,new int[][]{{1}});

  checkNextTableRowGroups(tableIter,null,new int[]{1},new int[][]{{1}});

  checkNextTableRowGroups(tableIter,new int[]{1},new int[]{1},new int[][]{{1}});

  checkNextTableRowGroups(tableIter,new int[]{1,1},new int[]{1,1,1},new int[][]{{1,1}});

  checkNextTableRowGroups(tableIter,new int[]{1,1,1},new int[]{1,1},new int[][]{{1,1},{1},{1,1,1}});

}

Location: RowGroupBuilderTestCase.java

Content: 

public void checkSpans(String filename) throws Exception {

  setUp(filename);

  Iterator tableIter=getTableIterator();

  checkNextTableRowGroups(tableIter,null,null,new int[][]{{1}});

  checkNextTableRowGroups(tableIter,null,null,new int[][]{{2}});

  checkNextTableRowGroups(tableIter,null,null,new int[][]{{2,1}});

  checkNextTableRowGroups(tableIter,null,null,new int[][]{{1,2}});

  checkNextTableRowGroups(tableIter,null,null,new int[][]{{1,3,1}});

  checkNextTableRowGroups(tableIter,new int[]{2},new int[]{1,3},new int[][]{{2,1,3}});

}

Location: RowGroupBuilderTestCase.java

Content: 

/** 

 * Checks that the given table-body(header,footer) will return row groups as expected. More precisely, checks that the number of row groups corresponds to the size of the given array, and that the number of rows inside each row group is equal to the corresponding integer in the array.

 * @param part a table part whose row groups are to be checked

 * @param expectedRowLengths expected lengths of all the row groups of this part ofthe table

 */

private void checkTablePartRowGroups(TablePart part,int[] expectedRowLengths){

  Iterator rowGroupIter=part.getRowGroups().iterator();

  for (  int expectedRowLength : expectedRowLengths) {

    assertTrue(rowGroupIter.hasNext());

    List rowGroup=(List)rowGroupIter.next();

    assertEquals(expectedRowLength,rowGroup.size());

  }

  assertFalse(rowGroupIter.hasNext());

}

Location: RowGroupBuilderTestCase.java

Content: 

@Test public void testNoColNoRowSimple() throws Exception {

  checkSimple("table/RowGroupBuilder_no-col_no-row_simple.fo");

}

Location: RowGroupBuilderTestCase.java

Content: 

@Test public void testNoColNoRowSpans() throws Exception {

  checkSpans("table/RowGroupBuilder_no-col_no-row_spans.fo");

}

Location: RowGroupBuilderTestCase.java

Content: 

@Test public void testNoColWithRowsSimple() throws Exception {

  checkSimple("table/RowGroupBuilder_no-col_simple.fo");

}

Location: RowGroupBuilderTestCase.java

Content: 

@Test public void testNoColWithRowsSpans() throws Exception {

  checkSpans("table/RowGroupBuilder_no-col_spans.fo");

}

Location: RowGroupBuilderTestCase.java

Content: 

@Test public void testNoRowSimple() throws Exception {

  checkSimple("table/RowGroupBuilder_no-row_simple.fo");

}

Location: RowGroupBuilderTestCase.java

Content: 

@Test public void testNoRowSpans() throws Exception {

  checkSpans("table/RowGroupBuilder_no-row_spans.fo");

}

Location: RowGroupBuilderTestCase.java

Content: 

@Test public void testWithRowsSimple() throws Exception {

  checkSimple("table/RowGroupBuilder_simple.fo");

}

Location: RowGroupBuilderTestCase.java

Content: 

@Test public void testWithRowsSpans() throws Exception {

  checkSpans("table/RowGroupBuilder_spans.fo");

}

