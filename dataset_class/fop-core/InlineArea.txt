Location: InlineArea.java

Content: 

/** 

 * Collection bidi inline runs.

 * @param runs current list of inline runs

 * @return modified list of inline runs, having appended new run

 */

public List collectInlineRuns(List runs){

  assert runs != null;

  runs.add(new InlineRun(this,new int[]{getBidiLevel()}));

  return runs;

}

Location: InlineArea.java

Content: 

/** 

 * @return the adjustment information object

 */

public InlineAdjustingInfo getAdjustingInfo(){

  return adjustingInfo;

}

Location: InlineArea.java

Content: 

/** 

 * Get the block progression offset of this inline area. This returns the offset of the inline area relative to the before edge of the parent area.

 * @return the blockProgressionOffset

 */

public int getBlockProgressionOffset(){

  return blockProgressionOffset;

}

Location: InlineArea.java

Content: 

/** 

 * @return Returns the parentArea.

 */

public Area getParentArea(){

  return parentArea;

}

Location: InlineArea.java

Content: 

/** 

 * Returns the block-progression-dimension that this area would have if it were taking its children elements into account. See  {@linkplain #getVirtualOffset()}.

 * @return the bpd

 */

int getVirtualBPD(){

  return getBPD();

}

Location: InlineArea.java

Content: 

/** 

 * Returns the offset that this area would have if its offset and size were taking children areas into account. The bpd of an inline area is taken from its nominal font and doesn't depend on the bpds of its children elements. However, in the case of a basic-link element we want the active area to cover all of the children elements.

 * @return the offset that this area would have if the before-edge of itscontent-rectangle were coinciding with the beforest before-edge of its children allocation-rectangles.

 * @see #getVirtualBPD()

 * @see BasicLinkArea

 */

int getVirtualOffset(){

  return getBlockProgressionOffset();

}

Location: InlineArea.java

Content: 

/** 

 * Apply IPD variation.

 * @param ipdVariation the variation

 */

public void handleIPDVariation(int ipdVariation){

  if (log.isTraceEnabled()) {

    log.trace("Handling IPD variation for " + getClass().getSimpleName() + ": increase by "+ ipdVariation+ " mpt.");

  }

  if (ipdVariation != 0) {

    increaseIPD(ipdVariation);

    notifyIPDVariation(ipdVariation);

  }

}

Location: InlineArea.java

Content: 

/** 

 * Increase the inline progression dimensions of this area. This is used for inline parent areas that contain mulitple child areas.

 * @param ipd the inline progression to increase by

 */

public void increaseIPD(int ipd){

  this.ipd+=ipd;

}

Location: InlineArea.java

Content: 

/** 

 * Default constructor for inline area.

 */

public InlineArea(){

  this(0,-1);

}

Location: InlineArea.java

Content: 

/** 

 * Instantiate inline area.

 * @param blockProgressionOffset a block progression offset or zero

 * @param bidiLevel a resolved bidi level or -1

 */

protected InlineArea(int blockProgressionOffset,int bidiLevel){

  this.blockProgressionOffset=blockProgressionOffset;

  setBidiLevel(bidiLevel);

}

Location: InlineArea.java

Content: 

/** 

 * Determine if inline area IA is an ancestor inline area or same as this area.

 * @param ia inline area to test

 * @return true if specified inline area is an ancestor or same as this area

 */

public boolean isAncestorOrSelf(InlineArea ia){

  return (ia == this) || isAncestor(ia);

}

Location: InlineArea.java

Content: 

/** 

 * Determine if inline area IA is an ancestor inline area of this area.

 * @param ia inline area to test

 * @return true if specified inline area is an ancestor of this area

 */

public boolean isAncestor(InlineArea ia){

  for (Area p=getParentArea(); p != null; ) {

    if (p == ia) {

      return true;

    }

 else     if (p instanceof InlineArea) {

      p=((InlineArea)p).getParentArea();

    }

 else {

      p=null;

    }

  }

  return false;

}

Location: InlineArea.java

Content: 

/** 

 * notify the parent area about the ipd variation of this area or of a descendant area

 * @param ipdVariation the difference between new and old ipd

 */

protected void notifyIPDVariation(int ipdVariation){

  Area parentArea=getParentArea();

  if (parentArea instanceof InlineArea) {

    ((InlineArea)parentArea).handleIPDVariation(ipdVariation);

  }

 else   if (parentArea instanceof LineArea) {

    ((LineArea)parentArea).handleIPDVariation(ipdVariation);

  }

 else   if (parentArea == null) {

    storedIPDVariation+=ipdVariation;

  }

}

Location: InlineArea.java

Content: 

/** 

 * Sets the adjustment information from an existing object

 * @param adjustingInfo the existing adjustment object

 */

public void setAdjustingInfo(InlineAdjustingInfo adjustingInfo){

  this.adjustingInfo=adjustingInfo;

}

Location: InlineArea.java

Content: 

/** 

 * Create a new adjustment information object

 * @param stretch the available space for stretching

 * @param shrink the available space for shrinking

 * @param adjustment space adjustment type

 */

public void setAdjustingInfo(int stretch,int shrink,int adjustment){

  adjustingInfo=new InlineAdjustingInfo(stretch,shrink,adjustment);

}

Location: InlineArea.java

Content: 

/** 

 * Modify the adjustment value in the adjustment information object

 * @param adjustment the new adjustment value

 */

public void setAdjustment(int adjustment){

  if (adjustingInfo != null) {

    adjustingInfo.adjustment=adjustment;

  }

}

Location: InlineArea.java

Content: 

/** 

 * Set the block progression offset of this inline area. This is used to set the offset of the inline area which is relative to the before edge of the parent area.

 * @param blockProgressionOffset the offset

 */

public void setBlockProgressionOffset(int blockProgressionOffset){

  this.blockProgressionOffset=blockProgressionOffset;

}

Location: InlineArea.java

Content: 

/** 

 * @param parentArea The parentArea to set.

 */

public void setParentArea(Area parentArea){

  this.parentArea=parentArea;

}

