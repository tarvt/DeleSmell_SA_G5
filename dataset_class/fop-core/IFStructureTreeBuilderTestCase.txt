Location: IFStructureTreeBuilderTestCase.java

Content: 

@Test public void checkLinkStructRef() throws TransformerException, SAXException {

  String fo="<fo:root xmlns:fo=\"http://www.w3.org/1999/XSL/Format\">\n" + "  <fo:layout-master-set>\n" + "    <fo:simple-page-master master-name=\"all\" page-width=\"8.5in\" page-height=\"11in\">\n"+ "      <fo:region-body/>\n"+ "    </fo:simple-page-master>\n"+ "  </fo:layout-master-set>\n"+ "  <fo:page-sequence format=\"1\" id=\"th_default_sequence1\" master-reference=\"all\">\n"+ "    <fo:flow flow-name=\"xsl-region-body\">\n"+ "      <fo:block>\n"+ "        <fo:block>1 <fo:basic-link external-destination=\"http://a.net\">www.a.net</fo:basic-link>"+ "</fo:block>\n"+ "        <fo:block>2 <fo:basic-link external-destination=\"http://a.net\">www.a.net</fo:basic-link>"+ "</fo:block>\n"+ "      </fo:block>\n"+ "    </fo:flow>\n"+ "  </fo:page-sequence>\n"+ "</fo:root>";

  String ifXML=foToIF(fo);

  Assert.assertTrue(ifXML,ifXML.contains("<nav:link rect=\"10008 1650 56016 11100\" foi:struct-ref=\"2\">"));

  Assert.assertTrue(ifXML,ifXML.contains("<nav:link rect=\"10008 16050 56016 11100\" foi:struct-ref=\"6\">"));

}

Location: IFStructureTreeBuilderTestCase.java

Content: 

private static Attributes createSimpleAttributes(String... attributes){

  assert (attributes.length % 2 == 0);

  final AttributesImpl atts=new AttributesImpl();

  for (int i=0; i < attributes.length; i+=2) {

    String key=attributes[i];

    String value=attributes[i + 1];

    atts.addAttribute("",key,key,XMLUtil.CDATA,value);

  }

  return atts;

}

Location: IFStructureTreeBuilderTestCase.java

Content: 

@Test public void endNode() throws Exception {

  final String nodeName="block";

  final ContentHandler handler=mock(ContentHandler.class);

  sut.startPageSequence(null,null);

  sut.endNode(nodeName);

  sut.endPageSequence();

  sut.replayEventsForPageSequence(handler,0);

  verify(handler).endElement(eq(FOElementMapping.URI),eq(nodeName),eq(FOElementMapping.STANDARD_PREFIX + ":" + nodeName));

}

Location: IFStructureTreeBuilderTestCase.java

Content: 

private String foToIF(String fo) throws SAXException, TransformerException {

  FopFactory fopFactory=FopFactory.newInstance(new File(".").toURI());

  FOUserAgent userAgent=fopFactory.newFOUserAgent();

  userAgent.setAccessibility(true);

  IFSerializer serializer=new IFSerializer(new IFContext(userAgent));

  IFDocumentHandler targetHandler=userAgent.getRendererFactory().createDocumentHandler(userAgent,MimeConstants.MIME_PDF);

  serializer.mimicDocumentHandler(targetHandler);

  userAgent.setDocumentHandlerOverride(serializer);

  ByteArrayOutputStream out=new ByteArrayOutputStream();

  Fop fop=fopFactory.newFop(MimeConstants.MIME_FOP_IF,userAgent,out);

  Transformer transformer=TransformerFactory.newInstance().newTransformer();

  Source src=new StreamSource(new ByteArrayInputStream(fo.getBytes()));

  Result res=new SAXResult(fop.getDefaultHandler());

  transformer.transform(src,res);

  return out.toString();

}

Location: IFStructureTreeBuilderTestCase.java

Content: 

@Test public void startAndEndPageSequence() throws SAXException {

  final ContentHandler handler=mock(ContentHandler.class);

  try {

    sut.replayEventsForPageSequence(handler,0);

    fail("No page sequences created");

  }

 catch (  IndexOutOfBoundsException e) {

  }

  sut.startPageSequence(null,null);

  sut.endPageSequence();

  sut.replayEventsForPageSequence(handler,0);

  InOrder inOrder=inOrder(handler);

  inOrder.verify(handler).startPrefixMapping(InternalElementMapping.STANDARD_PREFIX,InternalElementMapping.URI);

  inOrder.verify(handler).startPrefixMapping(ExtensionElementMapping.STANDARD_PREFIX,ExtensionElementMapping.URI);

  inOrder.verify(handler).startElement(eq(IFConstants.NAMESPACE),eq(IFConstants.EL_STRUCTURE_TREE),eq(IFConstants.EL_STRUCTURE_TREE),any(Attributes.class));

  inOrder.verify(handler).endElement(eq(IFConstants.NAMESPACE),eq(IFConstants.EL_STRUCTURE_TREE),eq(IFConstants.EL_STRUCTURE_TREE));

  inOrder.verify(handler).endPrefixMapping(ExtensionElementMapping.STANDARD_PREFIX);

  inOrder.verify(handler).endPrefixMapping(InternalElementMapping.STANDARD_PREFIX);

}

Location: IFStructureTreeBuilderTestCase.java

Content: 

@Test public void startNode() throws Exception {

  final String[] attributes={"struct-id","1"};

  final String nodeName="block";

  final ContentHandler handler=mock(ContentHandler.class);

  sut.startPageSequence(null,null);

  sut.startNode(nodeName,createSimpleAttributes(attributes),null);

  sut.endPageSequence();

  sut.replayEventsForPageSequence(handler,0);

  verify(handler).startElement(eq(FOElementMapping.URI),eq(nodeName),eq(FOElementMapping.STANDARD_PREFIX + ":" + nodeName),AttributesMatcher.match(createSimpleAttributes(attributes)));

}

