Location: CommonAccessibilityHolderTestCase.java

Content: 

/** 

 * Bind should be overridden to correctly configure the CommonAccessibility property

 * @throws Exception -

 */

@Test public void bindMustSetRoleAndSourceDoc() throws Exception {

  final PropertyList mockPList=mockPropertyList();

  final FONode parent=FONodeMocks.mockFONode();

  for (  Class<? extends CommonAccessibilityHolder> clazz : IMPLEMENTATIONS) {

    Constructor<? extends CommonAccessibilityHolder> constructor=clazz.getConstructor(FONode.class);

    CommonAccessibilityHolder sut=constructor.newInstance(parent);

    ((FONode)sut).bind(mockPList);

    String errorMessage="Test failed for " + clazz + ": ";

    assertEquals(errorMessage,role,sut.getCommonAccessibility().getRole());

    assertEquals(errorMessage,sourceDocument,sut.getCommonAccessibility().getSourceDocument());

  }

}

Location: CommonAccessibilityHolderTestCase.java

Content: 

private PropertyList mockPropertyList() throws PropertyException {

  final PropertyList mockPList=PropertyListMocks.mockPropertyList();

  PropertyListMocks.mockTableProperties(mockPList);

  PropertyListMocks.mockCommonBorderPaddingBackgroundProps(mockPList);

  mockRoleProperty(mockPList);

  mockSourceDocProperty(mockPList);

  return mockPList;

}

Location: CommonAccessibilityHolderTestCase.java

Content: 

private void mockRoleProperty(PropertyList mockPList) throws PropertyException {

  final Property mockRoleProperty=mock(Property.class);

  when(mockRoleProperty.getString()).thenReturn(role);

  when(mockPList.get(Constants.PR_ROLE)).thenReturn(mockRoleProperty);

}

Location: CommonAccessibilityHolderTestCase.java

Content: 

private void mockSourceDocProperty(PropertyList mockPList) throws PropertyException {

  final Property mockSourceDocProperty=mock(Property.class);

  when(mockSourceDocProperty.getString()).thenReturn(sourceDocument);

  when(mockPList.get(Constants.PR_SOURCE_DOCUMENT)).thenReturn(mockSourceDocProperty);

}

