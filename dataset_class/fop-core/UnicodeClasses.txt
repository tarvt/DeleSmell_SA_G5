Location: UnicodeClasses.java

Content: 

/** 

 * Generate classes.xml from Java's compiled-in Unicode Character Database

 * @param hexcode whether to prefix each class with the hexcode (only for debugging purposes)

 * @param outfilePath output file

 * @throws IOException if an I/O exception occurs

 */

public static void fromJava(boolean hexcode,String outfilePath) throws IOException {

  File f=new File(outfilePath);

  if (f.exists()) {

    f.delete();

  }

  f.createNewFile();

  FileOutputStream fw=new FileOutputStream(f);

  OutputStreamWriter ow=new OutputStreamWriter(fw,"utf-8");

  int maxChar;

  maxChar=Character.MAX_VALUE;

  ow.write("<?xml version=\"1.0\" encoding=\"utf-8\"?>\n");

  License.writeXMLLicenseId(ow);

  ow.write("\n");

  writeGenerated(ow);

  ow.write("\n");

  ow.write("<classes>\n");

  for (int code=Character.MIN_VALUE; code <= maxChar; ++code) {

    if (code == Character.MIN_SURROGATE) {

      code=Character.MAX_SURROGATE;

      continue;

    }

    if (!(((Character.isLowerCase(code) || Character.isUpperCase(code) || Character.isTitleCase(code)) && code == Character.toLowerCase(code)) || Character.getType(code) == Character.OTHER_LETTER)) {

      continue;

    }

    Character.UnicodeBlock ubi=Character.UnicodeBlock.of(code);

    if (ubi.equals(Character.UnicodeBlock.SUPERSCRIPTS_AND_SUBSCRIPTS) || ubi.equals(Character.UnicodeBlock.LETTERLIKE_SYMBOLS) || ubi.equals(Character.UnicodeBlock.ALPHABETIC_PRESENTATION_FORMS)|| ubi.equals(Character.UnicodeBlock.HALFWIDTH_AND_FULLWIDTH_FORMS)|| ubi.equals(Character.UnicodeBlock.CJK_UNIFIED_IDEOGRAPHS)|| ubi.equals(Character.UnicodeBlock.CJK_UNIFIED_IDEOGRAPHS_EXTENSION_A)|| ubi.equals(Character.UnicodeBlock.HANGUL_SYLLABLES)) {

      continue;

    }

    int uppercode=Character.toUpperCase(code);

    int titlecode=Character.toTitleCase(code);

    StringBuilder s=new StringBuilder();

    if (hexcode) {

      s.append("0x" + Integer.toHexString(code) + " ");

    }

    s.append(Character.toChars(code));

    if (uppercode != code) {

      s.append(Character.toChars(uppercode));

    }

    if (titlecode != code && titlecode != uppercode) {

      s.append(Character.toChars(titlecode));

    }

    ow.write(s.toString() + "\n");

  }

  ow.write("</classes>\n");

  ow.flush();

  ow.close();

}

Location: UnicodeClasses.java

Content: 

/** 

 * Generate classes.xml from XeTeX's Unicode letters file

 * @param hexcode whether to prefix each class with the hexcode (only for debugging purposes)

 * @param lettersPath path to XeTeX's Unicode letters file unicode-letters-XeTeX.tex

 * @param outfilePath output file

 * @throws IOException in case of an I/O exception

 */

public static void fromTeX(boolean hexcode,String lettersPath,String outfilePath) throws IOException {

  File in=new File(lettersPath);

  File f=new File(outfilePath);

  if (f.exists()) {

    f.delete();

  }

  f.createNewFile();

  FileOutputStream fw=new FileOutputStream(f);

  OutputStreamWriter ow=new OutputStreamWriter(fw,"utf-8");

  FileInputStream inis=new FileInputStream(in);

  InputStreamReader insr=new InputStreamReader(inis,"utf-8");

  BufferedReader inbr=new BufferedReader(insr);

  ow.write("<?xml version=\"1.0\" encoding=\"utf-8\"?>\n");

  License.writeXMLLicenseId(ow);

  ow.write("\n");

  writeGenerated(ow);

  ow.write("\n");

  ow.write("<classes>\n");

  for (String line=inbr.readLine(); line != null; line=inbr.readLine()) {

    String[] codes=line.split("\\s+");

    if (!(codes[0].equals("\\L") || codes[0].equals("\\l"))) {

      continue;

    }

    if (codes.length == 3) {

      ow.write("\"" + line + "\" has two codes");

      continue;

    }

    if (codes[0].equals("\\l") && codes.length != 2) {

      ow.write("\"" + line + "\" should have one code");

      continue;

    }

 else     if (codes[0].equals("\\L") && codes.length != 4) {

      ow.write("\"" + line + "\" should have three codes");

      continue;

    }

    if (codes[0].equals("\\l") || (codes[0].equals("\\L") && codes[1].equals(codes[3]))) {

      StringBuilder s=new StringBuilder();

      if (hexcode) {

        s.append("0x" + codes[1].replaceFirst("^0+","").toLowerCase() + " ");

      }

      s.append(Character.toChars(Integer.parseInt(codes[1],16)));

      if (codes[0].equals("\\L")) {

        s.append(Character.toChars(Integer.parseInt(codes[2],16)));

      }

      ow.write(s.toString() + "\n");

    }

  }

  ow.write("</classes>\n");

  ow.flush();

  ow.close();

  inbr.close();

}

Location: UnicodeClasses.java

Content: 

/** 

 * Generate classes.xml from Unicode Character Database files

 * @param hexcode whether to prefix each class with the hexcode (only for debugging purposes)

 * @param unidataPath path to the directory with UCD files

 * @param outfilePath output file

 * @throws IOException if the input files are not found

 * @throws URISyntaxException if {@code unidataPath} cannot be converted to a URI

 */

public static void fromUCD(boolean hexcode,String unidataPath,String outfilePath) throws IOException, URISyntaxException {

  URI unidata;

  if (unidataPath.endsWith("/")) {

    unidata=new URI(unidataPath);

  }

 else {

    unidata=new URI(unidataPath + "/");

  }

  String scheme=unidata.getScheme();

  if (scheme == null || !(scheme.equals("file") || scheme.equals("http"))) {

    throw new FileNotFoundException("URI with file or http scheme required for UNIDATA input directory");

  }

  File f=new File(outfilePath);

  if (f.exists()) {

    f.delete();

  }

  f.createNewFile();

  FileOutputStream fw=new FileOutputStream(f);

  OutputStreamWriter ow=new OutputStreamWriter(fw,"utf-8");

  URI inuri=unidata.resolve("Blocks.txt");

  InputStream inis=null;

  if (scheme.equals("file")) {

    File in=new File(inuri);

    inis=new FileInputStream(in);

  }

 else   if (scheme.equals("http")) {

    inis=inuri.toURL().openStream();

  }

  InputStreamReader insr=new InputStreamReader(inis,"utf-8");

  BufferedReader inbr=new BufferedReader(insr);

  Map blocks=new HashMap();

  for (String line=inbr.readLine(); line != null; line=inbr.readLine()) {

    if (line.startsWith("#") || line.matches("^\\s*$")) {

      continue;

    }

    String[] parts=line.split(";");

    String block=parts[1].trim();

    String[] indices=parts[0].split("\\.\\.");

    int[] ind={Integer.parseInt(indices[0],16),Integer.parseInt(indices[1],16)};

    blocks.put(block,ind);

  }

  inbr.close();

  inuri=unidata.resolve("UnicodeData.txt");

  if (scheme.equals("file")) {

    File in=new File(inuri);

    inis=new FileInputStream(in);

  }

 else   if (scheme.equals("http")) {

    inis=inuri.toURL().openStream();

  }

  insr=new InputStreamReader(inis,"utf-8");

  inbr=new BufferedReader(insr);

  int maxChar;

  maxChar=Character.MAX_VALUE;

  ow.write("<?xml version=\"1.0\" encoding=\"utf-8\"?>\n");

  License.writeXMLLicenseId(ow);

  ow.write("\n");

  writeGenerated(ow);

  ow.write("\n");

  ow.write("<classes>\n");

  for (String line=inbr.readLine(); line != null; line=inbr.readLine()) {

    String[] fields=line.split(";",NUM_FIELDS);

    int code=Integer.parseInt(fields[UNICODE],16);

    if (code > maxChar) {

      break;

    }

    if (((fields[GENERAL_CATEGORY].equals("Ll") || fields[GENERAL_CATEGORY].equals("Lu") || fields[GENERAL_CATEGORY].equals("Lt")) && ("".equals(fields[SIMPLE_LOWERCASE_MAPPING]) || fields[UNICODE].equals(fields[SIMPLE_LOWERCASE_MAPPING]))) || fields[GENERAL_CATEGORY].equals("Lo")) {

      String[] blockNames={"Superscripts and Subscripts","Letterlike Symbols","Alphabetic Presentation Forms","Halfwidth and Fullwidth Forms","CJK Unified Ideographs","CJK Unified Ideographs Extension A","Hangul Syllables"};

      int j;

      for (j=0; j < blockNames.length; ++j) {

        int[] ind=(int[])blocks.get(blockNames[j]);

        if (code >= ind[0] && code <= ind[1]) {

          break;

        }

      }

      if (j < blockNames.length) {

        continue;

      }

      int uppercode=-1;

      int titlecode=-1;

      if (!"".equals(fields[SIMPLE_UPPERCASE_MAPPING])) {

        uppercode=Integer.parseInt(fields[SIMPLE_UPPERCASE_MAPPING],16);

      }

      if (!"".equals(fields[SIMPLE_TITLECASE_MAPPING])) {

        titlecode=Integer.parseInt(fields[SIMPLE_TITLECASE_MAPPING],16);

      }

      StringBuilder s=new StringBuilder();

      if (hexcode) {

        s.append("0x" + fields[UNICODE].replaceFirst("^0+","").toLowerCase() + " ");

      }

      s.append(Character.toChars(code));

      if (uppercode != -1 && uppercode != code) {

        s.append(Character.toChars(uppercode));

      }

      if (titlecode != -1 && titlecode != code && titlecode != uppercode) {

        s.append(Character.toChars(titlecode));

      }

      ow.write(s.toString() + "\n");

    }

  }

  ow.write("</classes>\n");

  ow.flush();

  ow.close();

  inbr.close();

}

Location: UnicodeClasses.java

Content: 

/** 

 * Disallow constructor for this utility class

 */

private UnicodeClasses(){

}

Location: UnicodeClasses.java

Content: 

/** 

 * Write a comment that this is a generated file, and instructions on how to generate it

 * @param w the writer which writes the comment

 * @throws IOException if the write operation fails

 */

public static void writeGenerated(Writer w) throws IOException {

  w.write("<!-- !!! THIS IS A GENERATED FILE !!!             -->\n");

  w.write("<!-- If updates are needed, then:                 -->\n");

  w.write("<!-- * run 'ant codegen-hyphenation-classes',     -->\n");

  w.write("<!--   which will generate a new file classes.xml -->\n");

  w.write("<!--   in 'src/java/org/apache/fop/hyphenation'   -->\n");

  w.write("<!-- * commit the changed file                    -->\n");

}

