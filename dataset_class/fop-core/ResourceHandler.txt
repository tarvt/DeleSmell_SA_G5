Location: ResourceHandler.java

Content: 

/** 

 * This method splits up the form resources map into two. One for global forms which have been referenced more than once, and one for inline forms which have only been used once. The latter is to conserve memory in the PostScript interpreter.

 * @param formResources the original form resources map

 */

private void determineInlineForms(Map formResources){

  if (formResources == null) {

    return;

  }

  for (  Object o : formResources.entrySet()) {

    Map.Entry entry=(Map.Entry)o;

    PSResource res=(PSResource)entry.getValue();

    long count=resTracker.getUsageCount(res);

    if (count > 1) {

      this.globalFormResources.put(entry.getKey(),res);

    }

 else {

      this.inlineFormResources.put(res,res);

      resTracker.declareInlined(res);

    }

  }

}

Location: ResourceHandler.java

Content: 

private void generateFormForImage(PSGenerator gen,PSImageFormResource form) throws IOException {

  final String uri=form.getImageURI();

  ImageManager manager=userAgent.getImageManager();

  ImageInfo info=null;

  try {

    ImageSessionContext sessionContext=userAgent.getImageSessionContext();

    info=manager.getImageInfo(uri,sessionContext);

    PSRenderingContext formContext=new PSRenderingContext(userAgent,gen,fontInfo,true);

    ImageFlavor[] flavors;

    ImageHandlerRegistry imageHandlerRegistry=userAgent.getImageHandlerRegistry();

    flavors=imageHandlerRegistry.getSupportedFlavors(formContext);

    Map hints=ImageUtil.getDefaultHints(sessionContext);

    org.apache.xmlgraphics.image.loader.Image img=manager.getImage(info,flavors,hints,sessionContext);

    ImageHandler basicHandler=imageHandlerRegistry.getHandler(formContext,img);

    if (basicHandler == null) {

      throw new UnsupportedOperationException("No ImageHandler available for image: " + img.getInfo() + " ("+ img.getClass().getName()+ ")");

    }

    if (!(basicHandler instanceof PSImageHandler)) {

      throw new IllegalStateException("ImageHandler implementation doesn't behave properly." + " It should have returned false in isCompatible(). Class: " + basicHandler.getClass().getName());

    }

    PSImageHandler handler=(PSImageHandler)basicHandler;

    if (log.isTraceEnabled()) {

      log.trace("Using ImageHandler: " + handler.getClass().getName());

    }

    handler.generateForm(formContext,img,form);

  }

 catch (  ImageException ie) {

    ResourceEventProducer eventProducer=ResourceEventProducer.Provider.get(userAgent.getEventBroadcaster());

    eventProducer.imageError(resTracker,(info != null ? info.toString() : uri),ie,null);

  }

}

Location: ResourceHandler.java

Content: 

private void generateForms(Map formResources,PSGenerator gen) throws IOException {

  if (formResources == null) {

    return;

  }

  for (  Object o : formResources.values()) {

    PSImageFormResource form=(PSImageFormResource)o;

    generateFormForImage(gen,form);

  }

}

Location: ResourceHandler.java

Content: 

/** 

 * Rewrites the temporary PostScript file generated by PSRenderer adding all needed resources (fonts and images).

 * @param in the InputStream for the temporary PostScript file

 * @param out the OutputStream to write the finished file to

 * @param pageCount the number of pages (given here because PSRenderer writes an "(atend)")

 * @param documentBoundingBox the document's bounding box(given here because PSRenderer writes an "(atend)")

 * @param psUtil

 * @throws DSCException If there's an error in the DSC structure of the PS file

 * @throws IOException In case of an I/O error

 */

public void process(InputStream in,OutputStream out,int pageCount,Rectangle2D documentBoundingBox,PSRenderingUtil psUtil) throws DSCException, IOException {

  DSCParser parser=new DSCParser(in);

  parser.setCheckEOF(false);

  PSGenerator gen=new PSGenerator(out);

  gen.setAcrobatDownsample(psUtil.isAcrobatDownsample());

  parser.addListener(new DefaultNestedDocumentHandler(gen));

  parser.addListener(new IncludeResourceListener(gen));

  DSCHeaderComment header=DSCTools.checkAndSkipDSC30Header(parser);

  header.generate(gen);

  parser.setFilter(new DSCFilter(){

    private final Set filtered=new java.util.HashSet();

{

      filtered.add(DSCConstants.PAGES);

      filtered.add(DSCConstants.BBOX);

      filtered.add(DSCConstants.HIRES_BBOX);

      filtered.add(DSCConstants.DOCUMENT_NEEDED_RESOURCES);

      filtered.add(DSCConstants.DOCUMENT_SUPPLIED_RESOURCES);

    }

    public boolean accept(    DSCEvent event){

      if (event.isDSCComment()) {

        return !(filtered.contains(event.asDSCComment().getName()));

      }

 else {

        return true;

      }

    }

  }

);

  while (true) {

    DSCEvent event=parser.nextEvent();

    if (event == null) {

      reportInvalidDSC();

    }

    if (DSCTools.headerCommentsEndHere(event)) {

      DSCCommentPages pages=new DSCCommentPages(pageCount);

      pages.generate(gen);

      new DSCCommentBoundingBox(documentBoundingBox).generate(gen);

      new DSCCommentHiResBoundingBox(documentBoundingBox).generate(gen);

      PSFontUtils.determineSuppliedFonts(resTracker,fontInfo,fontInfo.getUsedFonts());

      registerSuppliedForms(resTracker,globalFormResources);

      DSCCommentDocumentSuppliedResources supplied=new DSCCommentDocumentSuppliedResources(resTracker.getDocumentSuppliedResources());

      supplied.generate(gen);

      DSCCommentDocumentNeededResources needed=new DSCCommentDocumentNeededResources(resTracker.getDocumentNeededResources());

      needed.generate(gen);

      event.generate(gen);

      break;

    }

    if (event.isDSCComment()) {

      DSCComment comment=event.asDSCComment();

      if (DSCConstants.LANGUAGE_LEVEL.equals(comment.getName())) {

        DSCCommentLanguageLevel level=(DSCCommentLanguageLevel)comment;

        gen.setPSLevel(level.getLanguageLevel());

      }

    }

    event.generate(gen);

  }

  PostScriptComment fontSetupPlaceholder=parser.nextPSComment("FOPFontSetup",gen);

  if (fontSetupPlaceholder == null) {

    throw new DSCException("Didn't find %FOPFontSetup comment in stream");

  }

  PSFontUtils.writeFontDict(gen,fontInfo,fontInfo.getUsedFonts(),eventProducer);

  generateForms(globalFormResources,gen);

  DSCComment pageOrTrailer=parser.nextDSCComment(DSCConstants.PAGE,gen);

  if (pageOrTrailer == null) {

    throw new DSCException("Page expected, but none found");

  }

  while (true) {

    DSCCommentPage page=(DSCCommentPage)pageOrTrailer;

    page.generate(gen);

    pageOrTrailer=DSCTools.nextPageOrTrailer(parser,gen);

    if (pageOrTrailer == null) {

      reportInvalidDSC();

    }

 else     if (!DSCConstants.PAGE.equals(pageOrTrailer.getName())) {

      pageOrTrailer.generate(gen);

      break;

    }

  }

  while (parser.hasNext()) {

    DSCEvent event=parser.nextEvent();

    event.generate(gen);

  }

  gen.flush();

}

Location: ResourceHandler.java

Content: 

private static void registerSuppliedForms(ResourceTracker resTracker,Map formResources) throws IOException {

  if (formResources == null) {

    return;

  }

  for (  Object o : formResources.values()) {

    PSImageFormResource form=(PSImageFormResource)o;

    resTracker.registerSuppliedResource(form);

  }

}

Location: ResourceHandler.java

Content: 

private static void reportInvalidDSC() throws DSCException {

  throw new DSCException("File is not DSC-compliant: Unexpected end of file");

}

Location: ResourceHandler.java

Content: 

/** 

 * Main constructor.

 * @param userAgent the FO user agent

 * @param eventProducer the event producer

 * @param fontInfo the font information

 * @param resTracker the resource tracker to use

 * @param formResources Contains all forms used by this document (maintained by PSRenderer)

 */

public ResourceHandler(FOUserAgent userAgent,PSEventProducer eventProducer,FontInfo fontInfo,ResourceTracker resTracker,Map formResources){

  this.userAgent=userAgent;

  this.eventProducer=eventProducer;

  this.fontInfo=fontInfo;

  this.resTracker=resTracker;

  determineInlineForms(formResources);

}

