Location: RtfElement.java

Content: 

/** 

 * find the first parent where c.isAssignableFrom(parent.getClass()) is true

 * @return null if not found

 */

public RtfElement getParentOfClass(Class c){

  RtfElement result=null;

  RtfElement current=this;

  while (current.parent != null) {

    current=current.parent;

    if (c.isAssignableFrom(current.getClass())) {

      result=current;

      break;

    }

  }

  return result;

}

Location: RtfElement.java

Content: 

/** 

 * access our RtfFile, which is always the topmost parent 

 */

RtfFile getRtfFile(){

  RtfElement result=this;

  while (result.parent != null) {

    result=result.parent;

  }

  return (RtfFile)result;

}

Location: RtfElement.java

Content: 

/** 

 * true if close() has been called 

 */

boolean isClosed(){

  return closed;

}

Location: RtfElement.java

Content: 

/** 

 * Starts a new line in the RTF file being written. This is only to format the RTF file itself (for easier debugging), not its content.

 * @throws IOException in case of an I/O problem

 */

public void newLine() throws IOException {

  writer.write("\n");

}

Location: RtfElement.java

Content: 

/** 

 * Create an RTF element as a child of given container 

 */

RtfElement(RtfContainer parent,Writer w) throws IOException {

  this(parent,w,null);

}

Location: RtfElement.java

Content: 

/** 

 * Create an RTF element as a child of given container with given attributes 

 */

RtfElement(RtfContainer parent,Writer w,RtfAttributes attr) throws IOException {

  id=idCounter++;

  this.parent=parent;

  attrib=(attr != null ? attr : new RtfAttributes());

  if (this.parent != null) {

    this.parent.addChild(this);

  }

  writer=w;

  written=false;

}

Location: RtfElement.java

Content: 

/** 

 * Write given attribute values to our Writer

 * @param attr RtfAttributes to be written

 * @param nameList if given, only attribute names from this list are considered

 * @throws IOException for I/O problems

 */

protected void writeAttributes(RtfAttributes attr,String[] nameList) throws IOException {

  if (attr == null) {

    return;

  }

  if (nameList != null) {

    for (    final String name : nameList) {

      if (attr.isSet(name)) {

        writeOneAttribute(name,attr.getValue(name));

      }

    }

  }

 else {

    for (Iterator it=attr.nameIterator(); it.hasNext(); ) {

      final String name=(String)it.next();

      if (attr.isSet(name)) {

        writeOneAttribute(name,attr.getValue(name));

      }

    }

  }

}

Location: RtfElement.java

Content: 

/** 

 * Write rtf control word without the space behind it

 * @param word RTF control word to write

 * @throws IOException for I/O problems

 */

protected final void writeControlWordNS(String word) throws IOException {

  writer.write('\\');

  writer.write(word);

}

Location: RtfElement.java

Content: 

/** 

 * Write an RTF control word to our Writer

 * @param word RTF control word to write

 * @throws IOException for I/O problems

 */

protected final void writeControlWord(String word) throws IOException {

  writer.write('\\');

  writer.write(word);

  writer.write(' ');

}

Location: RtfElement.java

Content: 

/** 

 * Make a visible entry in the RTF for an exception

 * @param ie Exception to flag

 * @throws IOException for I/O problems

 */

protected void writeExceptionInRtf(Exception ie) throws IOException {

  writeGroupMark(true);

  writeControlWord("par");

  writeControlWord("fs48");

  RtfStringConverter.getInstance().writeRtfString(writer,ie.getClass().getName());

  writeControlWord("fs20");

  RtfStringConverter.getInstance().writeRtfString(writer," " + ie.toString());

  writeControlWord("par");

  writeGroupMark(false);

}

Location: RtfElement.java

Content: 

/** 

 * Write a start or end group mark

 * @param isStart set to true if this is a start mark

 * @throws IOException for I/O problems

 */

protected final void writeGroupMark(boolean isStart) throws IOException {

  writer.write(isStart ? "{" : "}");

}

Location: RtfElement.java

Content: 

/** 

 * Write one attribute to our Writer without a space

 * @param name name of attribute to write

 * @param value value of attribute to be written

 * @throws IOException for I/O problems

 */

protected void writeOneAttributeNS(String name,Object value) throws IOException {

  String cw=name;

  if (value instanceof Integer) {

    cw+=value;

  }

 else   if (value instanceof String) {

    cw+=value;

  }

 else   if (value instanceof RtfAttributes) {

    writeControlWord(cw);

    writeAttributes((RtfAttributes)value,null);

    return;

  }

  writeControlWordNS(cw);

}

Location: RtfElement.java

Content: 

/** 

 * Write one attribute to our Writer

 * @param name name of attribute to write

 * @param value value of attribute to be written

 * @throws IOException for I/O problems

 */

protected void writeOneAttribute(String name,Object value) throws IOException {

  String cw=name;

  if (value instanceof Integer) {

    cw+=value;

  }

 else   if (value instanceof String) {

    cw+=value;

  }

 else   if (value instanceof RtfAttributes) {

    writeControlWord(cw);

    writeAttributes((RtfAttributes)value,null);

    return;

  }

  writeControlWord(cw);

}

Location: RtfElement.java

Content: 

/** 

 * Write the RTF code of this element to our Writer

 * @throws IOException for I/O problems

 */

public final void writeRtf() throws IOException {

  if (!written) {

    written=true;

    if (okToWriteRtf()) {

      writeRtfPrefix();

      writeRtfContent();

      writeRtfSuffix();

    }

  }

}

Location: RtfElement.java

Content: 

/** 

 * Same as writeStarControlWord(String word), except with no space behind it

 * @param word RTF control word to write

 * @throws IOException for I/O problems

 */

protected final void writeStarControlWordNS(String word) throws IOException {

  writer.write("\\*\\");

  writer.write(word);

}

Location: RtfElement.java

Content: 

/** 

 * Write an RTF control word to our Writer, preceeded by a star '*' meaning "ignore this if you don't know what it means"

 * @param word RTF control word to write

 * @throws IOException for I/O problems

 */

protected final void writeStarControlWord(String word) throws IOException {

  writer.write("\\*\\");

  writer.write(word);

  writer.write(' ');

}

