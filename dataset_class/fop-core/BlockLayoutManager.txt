Location: BlockLayoutManager.java

Content: 

/** 

 * Creates a new BlockLayoutManager.

 * @param inBlock the block FO object to create the layout manager for.

 */

public BlockLayoutManager(org.apache.fop.fo.flow.Block inBlock){

  super(inBlock);

  proxyLMiter=new ProxyLMiter();

}

Location: BlockLayoutManager.java

Content: 

/** 

 * Create a new LineLM, and collect all consecutive inline generating LMs as its child LMs.

 * @param firstlm First LM in new LineLM

 * @return the newly created LineLM

 */

private LineLayoutManager createLineManager(LayoutManager firstlm){

  LineLayoutManager llm;

  llm=new LineLayoutManager(getBlockFO(),lineHeight,lead,follow);

  List<LayoutManager> inlines=new java.util.ArrayList<LayoutManager>();

  inlines.add(firstlm);

  while (proxyLMiter.hasNext()) {

    LayoutManager lm=proxyLMiter.next();

    if (lm instanceof InlineLevelLayoutManager) {

      inlines.add(lm);

    }

 else {

      proxyLMiter.previous();

      break;

    }

  }

  llm.addChildLMs(inlines);

  return llm;

}

Location: BlockLayoutManager.java

Content: 

/** 

 * convenience method that returns the Block node

 * @return the block node

 */

protected org.apache.fop.fo.flow.Block getBlockFO(){

  return (org.apache.fop.fo.flow.Block)fobj;

}

Location: BlockLayoutManager.java

Content: 

/** 

 * Overridden to take into account that the childLM may be the block's {@link LineLayoutManager}. {@inheritDoc}

 */

@Override protected List<ListElement> getNextChildElements(LayoutManager childLM,LayoutContext context,LayoutContext childLC,int alignment,Stack lmStack,Position restartPosition,LayoutManager restartAtLM){

  childLC.copyPendingMarksFrom(context);

  if (childLM instanceof LineLayoutManager) {

    childLC.setRefIPD(getContentAreaIPD());

  }

 else {

  }

  if (childLM == this.childLMs.get(0)) {

    childLC.setFlags(LayoutContext.SUPPRESS_BREAK_BEFORE);

  }

  if (lmStack == null) {

    return childLM.getNextKnuthElements(childLC,alignment);

  }

 else {

    if (childLM instanceof LineLayoutManager) {

      assert (restartPosition instanceof LeafPosition);

      return ((LineLayoutManager)childLM).getNextKnuthElements(childLC,alignment,(LeafPosition)restartPosition);

    }

 else {

      return childLM.getNextKnuthElements(childLC,alignment,lmStack,restartPosition,restartAtLM);

    }

  }

}

