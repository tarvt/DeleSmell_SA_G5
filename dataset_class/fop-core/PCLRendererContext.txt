Location: PCLRendererContext.java

Content: 

/** 

 * @return true if clipping is disabled inside the PCLGraphics2D. 

 */

public boolean isClippingDisabled(){

  return getForeignAttributes() != null && "true".equalsIgnoreCase((String)getForeignAttributes().get(PCLConstants.DISABLE_CLIPPING));

}

Location: PCLRendererContext.java

Content: 

/** 

 * Indicates whether an RGB canvas should be used rather than one with grayscales. This can be used to work around limitations of Apache Batik if you get error while processing SVG graphics. Note, however, that RGB mode will use more memory.

 * @return true if an EGB canvas should be used

 */

public boolean isColorCanvas(){

  Boolean prop=(Boolean)context.getProperty(PCLRendererContextConstants.PCL_COLOR_CANVAS);

  return Boolean.TRUE.equals(prop) || (getForeignAttributes() != null && "true".equalsIgnoreCase((String)getForeignAttributes().get(PCLConstants.COLOR_CANVAS)));

}

Location: PCLRendererContext.java

Content: 

/** 

 * Indicates whether the background should not be erased prior to painting.

 * @return true if the background shouldn't be erased

 */

public boolean isSourceTransparency(){

  return getForeignAttributes() != null && "true".equalsIgnoreCase((String)getForeignAttributes().get(PCLConstants.SRC_TRANSPARENCY));

}

Location: PCLRendererContext.java

Content: 

/** 

 * @return true if the SVG image should be rendered as a bitmap 

 */

public boolean paintAsBitmap(){

  return ImageHandlerUtil.isConversionModeBitmap(getForeignAttributes());

}

Location: PCLRendererContext.java

Content: 

/** 

 * Main constructor

 * @param context the RendererContent instance

 */

public PCLRendererContext(RendererContext context){

  super(context);

}

Location: PCLRendererContext.java

Content: 

/** 

 * Wrap the render context to allow easier access to its values.

 * @param context the renderer context

 * @return the PCL-specific renderer context wrapper

 */

public static PCLRendererContext wrapRendererContext(RendererContext context){

  PCLRendererContext pcli=new PCLRendererContext(context);

  return pcli;

}

