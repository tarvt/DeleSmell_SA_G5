Location: EnvironmentalProfileFactory.java

Content: 

/** 

 * Creates the default environment that FOP is invoked in. This default profile has no operational restrictions for FOP.

 * @param defaultBaseUri the default base URI for resolving resource URIs

 * @param resourceResolver the resource resolver

 * @return the environment profile

 */

public static EnvironmentProfile createDefault(URI defaultBaseUri,ResourceResolver resourceResolver){

  return new Profile(defaultBaseUri,resourceResolver,createFontManager(defaultBaseUri,resourceResolver,FontDetectorFactory.createDefault(),FontCacheManagerFactory.createDefault()),new UnrestrictedFallbackResolver());

}

Location: EnvironmentalProfileFactory.java

Content: 

private static FontManager createFontManager(URI defaultBaseUri,ResourceResolver resourceResolver,FontDetector fontDetector,FontCacheManager fontCacheManager){

  InternalResourceResolver internalResolver=ResourceResolverFactory.createInternalResourceResolver(defaultBaseUri,resourceResolver);

  return new FontManager(internalResolver,fontDetector,fontCacheManager);

}

Location: EnvironmentalProfileFactory.java

Content: 

/** 

 * Creates an IO-restricted environment for FOP by disabling some of the environment-specific functionality within FOP.

 * @param defaultBaseUri the default base URI for resolving resource URIs

 * @param resourceResolver the resource resolver

 * @return  the environment profile

 */

public static EnvironmentProfile createRestrictedIO(URI defaultBaseUri,ResourceResolver resourceResolver){

  return new Profile(defaultBaseUri,resourceResolver,createFontManager(defaultBaseUri,resourceResolver,FontDetectorFactory.createDisabled(),FontCacheManagerFactory.createDisabled()),new RestrictedFallbackResolver());

}

Location: EnvironmentalProfileFactory.java

Content: 

private EnvironmentalProfileFactory(){

}

