Location: FontFileReader.java

Content: 

/** 

 * Constructor

 * @param in InputStream to read from

 * @throws IOException In case of an I/O problem

 */

public FontFileReader(InputStream in) throws IOException {

  this.file=IOUtils.toByteArray(in);

  this.fsize=this.file.length;

  this.current=0;

}

Location: FontFileReader.java

Content: 

/** 

 * Returns the full byte array representation of the file.

 * @return byte array.

 */

public byte[] getAllBytes(){

  return file;

}

Location: FontFileReader.java

Content: 

/** 

 * Return a copy of the internal array

 * @param offset The absolute offset to start reading from

 * @param length The number of bytes to read

 * @return An array of bytes

 * @throws IOException if out of bounds

 */

public byte[] getBytes(int offset,int length) throws IOException {

  if ((offset + length) > fsize) {

    throw new java.io.IOException("Reached EOF");

  }

  byte[] ret=new byte[length];

  System.arraycopy(file,offset,ret,0,length);

  return ret;

}

Location: FontFileReader.java

Content: 

/** 

 * Returns current file position.

 * @return int The current position.

 */

public int getCurrentPos(){

  return current;

}

Location: FontFileReader.java

Content: 

/** 

 * Returns the size of the file.

 * @return int The filesize

 */

public int getFileSize(){

  return fsize;

}

Location: FontFileReader.java

Content: 

/** 

 * Read 1 signed byte.

 * @return One byte

 * @throws IOException If EOF is reached

 */

public final byte readTTFByte() throws IOException {

  return read();

}

Location: FontFileReader.java

Content: 

/** 

 * Read 4 bytes.

 * @return One signed integer

 * @throws IOException If EOF is reached

 */

public final int readTTFLong() throws IOException {

  long ret=readTTFUByte();

  ret=(ret << 8) + readTTFUByte();

  ret=(ret << 8) + readTTFUByte();

  ret=(ret << 8) + readTTFUByte();

  return (int)ret;

}

Location: FontFileReader.java

Content: 

/** 

 * Read 2 bytes signed.

 * @return One signed short

 * @throws IOException If EOF is reached

 */

public final short readTTFShort() throws IOException {

  final int ret=(readTTFUByte() << 8) + readTTFUByte();

  final short sret=(short)ret;

  return sret;

}

Location: FontFileReader.java

Content: 

/** 

 * Read 2 bytes signed at position pos without changing current position.

 * @param pos The absolute position to read from

 * @return One signed short

 * @throws IOException If EOF is reached

 */

public final short readTTFShort(long pos) throws IOException {

  final long cp=getCurrentPos();

  seekSet(pos);

  final short ret=readTTFShort();

  seekSet(cp);

  return ret;

}

Location: FontFileReader.java

Content: 

/** 

 * Read a NUL terminated ISO-8859-1 string.

 * @return A String

 * @throws IOException If EOF is reached

 */

public final String readTTFString() throws IOException {

  int i=current;

  while (file[i++] != 0) {

    if (i >= fsize) {

      throw new java.io.EOFException("Reached EOF, file size=" + fsize);

    }

  }

  byte[] tmp=new byte[i - current - 1];

  System.arraycopy(file,current,tmp,0,i - current - 1);

  return new String(tmp,"ISO-8859-1");

}

Location: FontFileReader.java

Content: 

/** 

 * Read an ISO-8859-1 string of len bytes.

 * @param len The length of the string to read

 * @return A String

 * @throws IOException If EOF is reached

 */

public final String readTTFString(int len) throws IOException {

  if ((len + current) > fsize) {

    throw new java.io.EOFException("Reached EOF, file size=" + fsize);

  }

  byte[] tmp=new byte[len];

  System.arraycopy(file,current,tmp,0,len);

  current+=len;

  final String encoding;

  if ((tmp.length > 0) && (tmp[0] == 0)) {

    encoding="UTF-16BE";

  }

 else {

    encoding="ISO-8859-1";

  }

  return new String(tmp,encoding);

}

Location: FontFileReader.java

Content: 

/** 

 * Read an ISO-8859-1 string of len bytes.

 * @param len The length of the string to read

 * @param encodingID the string encoding id (presently ignored; always uses UTF-16BE)

 * @return A String

 * @throws IOException If EOF is reached

 */

public final String readTTFString(int len,int encodingID) throws IOException {

  if ((len + current) > fsize) {

    throw new java.io.EOFException("Reached EOF, file size=" + fsize);

  }

  byte[] tmp=new byte[len];

  System.arraycopy(file,current,tmp,0,len);

  current+=len;

  final String encoding;

  encoding="UTF-16BE";

  return new String(tmp,encoding);

}

Location: FontFileReader.java

Content: 

/** 

 * Read 1 unsigned byte.

 * @return One unsigned byte

 * @throws IOException If EOF is reached

 */

public final int readTTFUByte() throws IOException {

  final byte buf=read();

  if (buf < 0) {

    return (256 + buf);

  }

 else {

    return buf;

  }

}

Location: FontFileReader.java

Content: 

/** 

 * Read 4 bytes.

 * @return One unsigned integer

 * @throws IOException If EOF is reached

 */

public final long readTTFULong() throws IOException {

  long ret=readTTFUByte();

  ret=(ret << 8) + readTTFUByte();

  ret=(ret << 8) + readTTFUByte();

  ret=(ret << 8) + readTTFUByte();

  return ret;

}

Location: FontFileReader.java

Content: 

/** 

 * Read 2 bytes unsigned.

 * @return One unsigned short

 * @throws IOException If EOF is reached

 */

public final int readTTFUShort() throws IOException {

  final int ret=(readTTFUByte() << 8) + readTTFUByte();

  return ret;

}

Location: FontFileReader.java

Content: 

/** 

 * Read 2 bytes unsigned at position pos without changing current position.

 * @param pos The absolute position to read from

 * @return One unsigned short

 * @throws IOException If EOF is reached

 */

public final int readTTFUShort(long pos) throws IOException {

  long cp=getCurrentPos();

  seekSet(pos);

  int ret=readTTFUShort();

  seekSet(cp);

  return ret;

}

Location: FontFileReader.java

Content: 

/** 

 * Set current file position to offset

 * @param offset The new offset to set

 * @throws IOException In case of an I/O problem

 */

public void seekSet(long offset) throws IOException {

  if (offset > fsize || offset < 0) {

    throw new java.io.EOFException("Reached EOF, file size=" + fsize + " offset="+ offset);

  }

  current=(int)offset;

}

Location: FontFileReader.java

Content: 

/** 

 * Skip a given number of bytes.

 * @param add The number of bytes to advance

 * @throws IOException In case of an I/O problem

 */

public void skip(long add) throws IOException {

  seekSet(current + add);

}

Location: FontFileReader.java

Content: 

/** 

 * Write a USHort at a given position.

 * @param pos The absolute position to write to

 * @param val The value to write

 * @throws IOException If EOF is reached

 */

public final void writeTTFUShort(long pos,int val) throws IOException {

  if ((pos + 2) > fsize) {

    throw new java.io.EOFException("Reached EOF");

  }

  final byte b1=(byte)((val >> 8) & 0xff);

  final byte b2=(byte)(val & 0xff);

  final int fileIndex=(int)pos;

  file[fileIndex]=b1;

  file[fileIndex + 1]=b2;

}

