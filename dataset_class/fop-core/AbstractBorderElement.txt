Location: AbstractBorderElement.java

Content: 

/** 

 * Initializes a newly created <code>AbstractBorderElement</code> object so that it represents an empty border element.

 */

public AbstractBorderElement(){

}

Location: AbstractBorderElement.java

Content: 

/** 

 * Constructs a newly allocated <code>AbstractBorderElement</code> object. Fills array <code>data</code> using binary representation of <code>type</code>.

 * @param type binary representation of type gives <code>data</code>

 */

public AbstractBorderElement(int type){

  for (int i=0; i < 4; i++) {

    data[i]=(type >> i) & 1;

  }

}

Location: AbstractBorderElement.java

Content: 

/** 

 * Returns value of side's element of <code>data</code>.

 * @param side integer, representing side

 * @return value of side's element

 */

public int getData(int side){

  return data[side];

}

Location: AbstractBorderElement.java

Content: 

/** 

 * Sets a value for <code>data[side]</code>.

 * @param side integer, representing side

 * @param value a new value for <code>data[side]</code>

 */

public void setData(int side,int value){

  data[side]=value;

}

Location: AbstractBorderElement.java

Content: 

/** 

 * Transform border element in according with <code>state</code>.

 * @param state instance of TXTState

 */

public void transformElement(TXTState state){

  double[] da=state.getResultCTM().toArray();

  CTM ctm=new CTM(da[0],-da[1],-da[2],da[3],0,0);

  Point[] pa=new Point[4];

  pa[0]=new Point(0,data[UP]);

  pa[1]=new Point(data[RIGHT],0);

  pa[2]=new Point(0,-data[DOWN]);

  pa[3]=new Point(-data[LEFT],0);

  Arrays.fill(data,0);

  for (int i=0; i < 4; i++) {

    Point p=state.transformPoint(pa[i],ctm);

    int length=(int)p.distance(0,0);

    if (p.x == 0 && p.y > 0) {

      data[UP]=length;

    }

 else     if (p.x == 0 && p.y < 0) {

      data[DOWN]=length;

    }

 else     if (p.x > 0 && p.y == 0) {

      data[RIGHT]=length;

    }

 else     if (p.x < 0 && p.y == 0) {

      data[LEFT]=length;

    }

  }

}

