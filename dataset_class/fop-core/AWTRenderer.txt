Location: AWTRenderer.java

Content: 

/** 

 * Creates a new AWTRenderer instance.

 * @param userAgent the user agent that contains configuration data

 */

public AWTRenderer(FOUserAgent userAgent){

  this(userAgent,null,false,false);

}

Location: AWTRenderer.java

Content: 

/** 

 * Creates a new AWTRenderer instance.

 * @param userAgent the user agent that contains configuration data

 * @param renderable a Renderable instance can be set so the Preview Dialog can enable the"Reload" button which causes the current document to be reprocessed and redisplayed.

 * @param previewAsMainWindow true if the preview dialog created by the renderer should bethe main window of the application.

 * @param show sets whether the preview dialog should be created and displayed when therendering has finished.

 */

public AWTRenderer(FOUserAgent userAgent,Renderable renderable,boolean previewAsMainWindow,boolean show){

  super(userAgent);

  if (show) {

    setStatusListener(PreviewDialog.createPreviewDialog(userAgent,renderable,previewAsMainWindow));

  }

}

Location: AWTRenderer.java

Content: 

/** 

 * Draws a thin border around every area to help debugging 

 */

private void debugBackAndBorders(Area area,float startx,float starty,float width,float height){

  saveGraphicsState();

  Color col=new Color(0.7f,0.7f,0.7f);

  state.updateColor(col);

  state.updateStroke(0.4f,EN_SOLID);

  state.getGraph().draw(new Rectangle2D.Float(startx,starty,width,height));

  restoreGraphicsState();

}

Location: AWTRenderer.java

Content: 

/** 

 * @return the dimensions of the specified page

 * @param pageNum the page number

 * @exception FOPException If the page is out of range or has not been rendered.

 */

public Dimension getPageImageSize(int pageNum) throws FOPException {

  Rectangle2D bounds=getPageViewport(pageNum).getViewArea();

  pageWidth=(int)Math.round(bounds.getWidth() / 1000f);

  pageHeight=(int)Math.round(bounds.getHeight() / 1000f);

  double scaleX=scaleFactor * (UnitConv.IN2MM / FopFactoryConfig.DEFAULT_TARGET_RESOLUTION) / userAgent.getTargetPixelUnitToMillimeter();

  double scaleY=scaleFactor * (UnitConv.IN2MM / FopFactoryConfig.DEFAULT_TARGET_RESOLUTION) / userAgent.getTargetPixelUnitToMillimeter();

  if (getPageViewport(pageNum).getForeignAttributes() != null) {

    String scale=getPageViewport(pageNum).getForeignAttributes().get(PageScale.EXT_PAGE_SCALE);

    Point2D scales=PageScale.getScale(scale);

    if (scales != null) {

      scaleX*=scales.getX();

      scaleY*=scales.getY();

    }

  }

  int bitmapWidth=(int)((pageWidth * scaleX) + 0.5);

  int bitmapHeight=(int)((pageHeight * scaleY) + 0.5);

  return new Dimension(bitmapWidth,bitmapHeight);

}

Location: AWTRenderer.java

Content: 

/** 

 * @return the StatusListener. 

 */

public StatusListener getStatusListener(){

  return statusListener;

}

Location: AWTRenderer.java

Content: 

/** 

 * Sets a StatusListener this renderer uses to notify about events.

 * @param statusListener The StatusListener to set.

 */

public void setStatusListener(StatusListener statusListener){

  this.statusListener=statusListener;

}

