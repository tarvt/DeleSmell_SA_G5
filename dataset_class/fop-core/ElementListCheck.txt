Location: ElementListCheck.java

Content: 

/** 

 * Creates a new instance from a DOM node.

 * @param node DOM node that defines this check

 */

public ElementListCheck(Node node){

  this.category=node.getAttributes().getNamedItem("category").getNodeValue();

  if (node.getAttributes().getNamedItem("id") != null) {

    this.id=node.getAttributes().getNamedItem("id").getNodeValue();

  }

  if (!haveID()) {

    if (node.getAttributes().getNamedItem("index") != null) {

      String s=node.getAttributes().getNamedItem("index").getNodeValue();

      this.index=Integer.parseInt(s);

    }

  }

  this.checkElement=(Element)node;

}

Location: ElementListCheck.java

Content: 

private void fail(String msg){

  throw new AssertionError(msg + " (" + this+ ")");

}

Location: ElementListCheck.java

Content: 

private ElementListCollector.ElementList findElementList(LayoutResult result){

  List candidates=new java.util.ArrayList();

  for (  Object o : result.getElementListCollector().getElementLists()) {

    ElementListCollector.ElementList el=(ElementListCollector.ElementList)o;

    if (el.getCategory().equals(category)) {

      if (haveID() && this.id.equals(el.getID())) {

        candidates.add(el);

        break;

      }

 else       if (!haveID()) {

        candidates.add(el);

      }

    }

  }

  if (candidates.size() == 0) {

    throw new ArrayIndexOutOfBoundsException("Requested element list not found");

  }

 else   if (index >= 0) {

    return (ElementListCollector.ElementList)candidates.get(index);

  }

 else {

    return (ElementListCollector.ElementList)candidates.get(0);

  }

}

Location: ElementListCheck.java

Content: 

private static String getElementText(Element el){

  StringBuffer sb=new StringBuffer();

  NodeList children=el.getChildNodes();

  for (int i=0; i < children.getLength(); i++) {

    Node node=children.item(i);

    if (node instanceof Text) {

      sb.append(((Text)node).getData());

    }

 else     if (node instanceof CDATASection) {

      sb.append(((CDATASection)node).getData());

    }

  }

  return sb.toString();

}

Location: ElementListCheck.java

Content: 

private boolean haveID(){

  return (this.id != null && this.id.length() > 0);

}

Location: ElementListCheck.java

Content: 

/** 

 * @see java.lang.Object#toString() 

 */

public String toString(){

  StringBuffer sb=new StringBuffer("element-list");

  sb.append(" category=").append(category);

  if (haveID()) {

    sb.append(" id=").append(id);

  }

 else   if (index >= 0) {

    sb.append(" index=").append(index);

  }

  return sb.toString();

}

