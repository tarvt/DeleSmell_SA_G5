Location: PDFNumberTestCase.java

Content: 

/** 

 * Tests PDFNumber.doubleOut().

 * @throws Exception if the test fails

 */

@Test public void testDoubleOut1() throws Exception {

  assertEquals("0",PDFNumber.doubleOut(0.0f));

  assertEquals("0",PDFNumber.doubleOut(0.0000000000000000000123f));

  assertEquals("0.1",PDFNumber.doubleOut(0.1f));

  assertEquals("100",PDFNumber.doubleOut(100.0f));

  assertEquals("100",PDFNumber.doubleOut(99.99999999999999999999999f));

  assertEquals("100.123459",PDFNumber.doubleOut(100.12345611111111f));

  assertEquals("-100.123459",PDFNumber.doubleOut(-100.12345611111111f));

}

Location: PDFNumberTestCase.java

Content: 

/** 

 * Tests PDFNumber.doubleOut().

 * @throws Exception if the test fails

 */

public void testDoubleOut2() throws Exception {

  assertEquals("0",PDFNumber.doubleOut(0.0f,4));

  assertEquals("0",PDFNumber.doubleOut(0.0000000000000000000123f,4));

  assertEquals("0.1",PDFNumber.doubleOut(0.1f,4));

  assertEquals("100",PDFNumber.doubleOut(100.0f,4));

  assertEquals("100",PDFNumber.doubleOut(99.99999999999999999999999f,4));

  assertEquals("100.1234",PDFNumber.doubleOut(100.12341111111111f,4));

  assertEquals("-100.1234",PDFNumber.doubleOut(-100.12341111111111f,4));

}

Location: PDFNumberTestCase.java

Content: 

/** 

 * Tests PDFNumber.doubleOut().

 * @throws Exception if the test fails

 */

public void testDoubleOut3() throws Exception {

  assertEquals("0",PDFNumber.doubleOut(0.0f,0));

  assertEquals("0",PDFNumber.doubleOut(0.1f,0));

  assertEquals("1",PDFNumber.doubleOut(0.6f,0));

  assertEquals("100",PDFNumber.doubleOut(100.1234f,0));

  assertEquals("-100",PDFNumber.doubleOut(-100.1234f,0));

}

Location: PDFNumberTestCase.java

Content: 

/** 

 * Tests PDFNumber.doubleOut(). Special cases (former bugs).

 * @throws Exception if the test fails

 */

public void testDoubleOut4() throws Exception {

  double d=Double.parseDouble("5.7220458984375E-6");

  assertEquals("0.000006",PDFNumber.doubleOut(d));

  assertEquals("0",PDFNumber.doubleOut(d,4));

  assertEquals("0.00000572",PDFNumber.doubleOut(d,8));

}

Location: PDFNumberTestCase.java

Content: 

/** 

 * Tests PDFNumber.doubleOut(). Tests for wrong parameters.

 * @throws Exception if the test fails

 */

public void testDoubleOutWrongParameters() throws Exception {

  try {

    PDFNumber.doubleOut(0.1f,-1);

    fail("IllegalArgument expected!");

  }

 catch (  IllegalArgumentException iae) {

  }

  try {

    PDFNumber.doubleOut(0.1f,17);

    fail("IllegalArgument expected!");

  }

 catch (  IllegalArgumentException iae) {

  }

  try {

    PDFNumber.doubleOut(0.1f,98274659);

    fail("IllegalArgument expected!");

  }

 catch (  IllegalArgumentException iae) {

  }

  try {

    PDFNumber.doubleOut(null);

    fail("NullPointer expected!");

  }

 catch (  NullPointerException e) {

  }

}

Location: PDFNumberTestCase.java

Content: 

/** 

 * Tests both getNumber() and setNumber() - basic getter/setter methods... Why there isn't a constructor is beyond me...

 */

public void testGetSetNumber(){

  PDFNumber pdfNum=new PDFNumber();

  pdfNum.setNumber(1.111f);

  assertEquals(1.111f,pdfNum.getNumber());

  pdfNum.setNumber(2);

  assertEquals(2,pdfNum.getNumber());

  pdfNum.setNumber(null);

  assertEquals(null,pdfNum.getNumber());

}

Location: PDFNumberTestCase.java

Content: 

/** 

 * Tests toPDFString() - this serializes PDFNumber to PDF format.

 * @throws IOException error caused by I/O

 */

public void testToPDFString() throws IOException {

  PDFNumber testSubject=new PDFNumber();

  testSubject.setNumber(1.0001);

  testOutputStreams("1.0001",testSubject);

  testSubject.setNumber(999);

  testOutputStreams("999",testSubject);

}

