Location: RowGroupBuilder.java

Content: 

/** 

 * Adds a table-cell to the current row-group, creating  {@link GridUnit}s accordingly.

 * @param cell the cell to add

 */

abstract void addTableCell(TableCell cell);

Location: RowGroupBuilder.java

Content: 

/** 

 * Receives notification of the end of the current row, when the source contains no fo:table-row element. If the current row finishes the row group, the {@link TablePart#addRowGroup(List)} method of the given table part will be called.<p>If the source does contain explicit fo:table-row elements, then the {@link #endTableRow()} method will be called instead.</p>

 * @param part the part containing the current row

 */

abstract void endRow(TablePart part);

Location: RowGroupBuilder.java

Content: 

/** 

 * Receives notification of the end of the table.

 * @throws ValidationException if a row-spanning cell overflows one of the table's parts

 */

abstract void endTable() throws ValidationException ;

Location: RowGroupBuilder.java

Content: 

/** 

 * Receives notification of the end of a table-header/footer/body. The current row-group is checked for emptiness. This row group builder is reset for handling further possible table parts.

 * @throws ValidationException if a row-spanning cell overflows the given table part

 */

abstract void endTablePart() throws ValidationException ;

Location: RowGroupBuilder.java

Content: 

/** 

 * Receives notification of the end of the current row. If the current row finishes the row group, the  {@link TablePart#addRowGroup(List)} method of the parent tablepart will be called.

 */

abstract void endTableRow();

Location: RowGroupBuilder.java

Content: 

/** 

 * Creates and initialises a new builder for the given table.

 * @param t a table

 */

protected RowGroupBuilder(Table t){

  table=t;

}

Location: RowGroupBuilder.java

Content: 

/** 

 * Receives notification of the start of an fo:table-row element.

 * @param tableRow the row being started

 */

abstract void startTableRow(TableRow tableRow);

