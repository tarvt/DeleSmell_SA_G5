Location: InlineLayoutManager.java

Content: 

/** 

 * Creates Knuth elements for end border padding and adds them to the return list.

 * @param returnList return list to add the additional elements to

 */

protected void addKnuthElementsForBorderPaddingEnd(List returnList){

  if (returnList instanceof BlockKnuthSequence) {

    return;

  }

  CommonBorderPaddingBackground borderAndPadding=((InlineLevel)fobj).getCommonBorderPaddingBackground();

  if (borderAndPadding != null) {

    int ipEnd=borderAndPadding.getBorderEndWidth(false) + borderAndPadding.getPaddingEnd(false,this);

    if (ipEnd > 0) {

      returnList.add(new KnuthBox(ipEnd,getAuxiliaryPosition(),true));

    }

  }

}

Location: InlineLayoutManager.java

Content: 

/** 

 * Creates Knuth elements for start border padding and adds them to the return list.

 * @param returnList return list to add the additional elements to

 */

protected void addKnuthElementsForBorderPaddingStart(List returnList){

  if (returnList instanceof BlockKnuthSequence) {

    return;

  }

  CommonBorderPaddingBackground borderAndPadding=((InlineLevel)fobj).getCommonBorderPaddingBackground();

  if (borderAndPadding != null) {

    int ipStart=borderAndPadding.getBorderStartWidth(false) + borderAndPadding.getPaddingStart(false,this);

    if (ipStart > 0) {

      returnList.add(0,new KnuthBox(ipStart,getAuxiliaryPosition(),true));

    }

  }

}

Location: InlineLayoutManager.java

Content: 

/** 

 * Create an inline layout manager. This is used for fo's that create areas that contain inline areas.

 * @param node the formatting object that creates the area

 */

public InlineLayoutManager(InlineLevel node){

  super(node);

}

Location: InlineLayoutManager.java

Content: 

private boolean mustKeepTogether(LayoutManager lm){

  if (lm instanceof BlockLevelLayoutManager) {

    return ((BlockLevelLayoutManager)lm).mustKeepTogether();

  }

 else   if (lm instanceof InlineLayoutManager) {

    return ((InlineLayoutManager)lm).mustKeepTogether();

  }

 else {

    return mustKeepTogether(lm.getParent());

  }

}

