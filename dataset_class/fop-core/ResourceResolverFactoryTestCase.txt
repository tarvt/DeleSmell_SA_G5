Location: ResourceResolverFactoryTestCase.java

Content: 

private void checkStream(InputStream inputStream) throws IOException {

  byte[] actual=new byte[DATA.length];

  for (int i=0; i < DATA.length; i++) {

    actual[i]=(byte)inputStream.read();

  }

  assertEquals(-1,inputStream.read());

  assertArrayEquals(DATA,actual);

}

Location: ResourceResolverFactoryTestCase.java

Content: 

@Test public void testCreateSchemaAwareResourceResolverForDefaultOutput() throws Exception {

  URI uri=URI.create("file:///path/to/file");

  TestCreateSchemaAwareResourceResolverBuilderHelper helper=new TestCreateSchemaAwareResourceResolverBuilderHelper();

  helper.getOutputStream(uri);

  verify(helper.registedResourceResolver,never()).getOutputStream(uri);

  verify(helper.defaultResourceResolver,times(1)).getOutputStream(uri);

}

Location: ResourceResolverFactoryTestCase.java

Content: 

@Test public void testCreateSchemaAwareResourceResolverForDefaultResource() throws Exception {

  URI uri=URI.create("file:///path/to/file");

  TestCreateSchemaAwareResourceResolverBuilderHelper helper=new TestCreateSchemaAwareResourceResolverBuilderHelper();

  helper.getResource(uri);

  verify(helper.registedResourceResolver,never()).getResource(uri);

  verify(helper.defaultResourceResolver,times(1)).getResource(uri);

}

Location: ResourceResolverFactoryTestCase.java

Content: 

@Test public void testCreateSchemaAwareResourceResolverForRegisteredOutput() throws Exception {

  URI uri=URI.create(TestCreateSchemaAwareResourceResolverBuilderHelper.SCHEMA + ":///path");

  TestCreateSchemaAwareResourceResolverBuilderHelper helper=new TestCreateSchemaAwareResourceResolverBuilderHelper();

  helper.getOutputStream(uri);

  verify(helper.registedResourceResolver,times(1)).getOutputStream(uri);

  verify(helper.defaultResourceResolver,never()).getOutputStream(uri);

}

Location: ResourceResolverFactoryTestCase.java

Content: 

@Test public void testCreateSchemaAwareResourceResolverForRegisteredResource() throws Exception {

  URI uri=URI.create(TestCreateSchemaAwareResourceResolverBuilderHelper.SCHEMA + ":///path");

  TestCreateSchemaAwareResourceResolverBuilderHelper helper=new TestCreateSchemaAwareResourceResolverBuilderHelper();

  helper.getResource(uri);

  verify(helper.registedResourceResolver,times(1)).getResource(uri);

  verify(helper.defaultResourceResolver,never()).getResource(uri);

}

Location: ResourceResolverFactoryTestCase.java

Content: 

@Test public void testCreateTempAwareResourceResolverForRegularOutput() throws Exception {

  URI uri=URI.create("file:///path/to/file");

  TestCreateTempAwareResourceResolverHelper helper=new TestCreateTempAwareResourceResolverHelper();

  helper.getOutputStream(uri);

  verify(helper.tempResourceResolver,never()).getOutputStream(uri.getPath());

  verify(helper.defaultResourceResolver,times(1)).getOutputStream(uri);

}

Location: ResourceResolverFactoryTestCase.java

Content: 

@Test public void testCreateTempAwareResourceResolverForRegularResource() throws Exception {

  URI uri=URI.create("file:///path/to/file");

  TestCreateTempAwareResourceResolverHelper helper=new TestCreateTempAwareResourceResolverHelper();

  helper.getResource(uri);

  verify(helper.tempResourceResolver,never()).getResource(uri.getPath());

  verify(helper.defaultResourceResolver,times(1)).getResource(uri);

}

Location: ResourceResolverFactoryTestCase.java

Content: 

@Test public void testCreateTempAwareResourceResolverForTmpOuput() throws Exception {

  URI uri=URI.create("tmp:///id");

  TestCreateTempAwareResourceResolverHelper helper=new TestCreateTempAwareResourceResolverHelper();

  helper.getOutputStream(uri);

  verify(helper.tempResourceResolver,times(1)).getOutputStream(uri.getPath());

  verify(helper.defaultResourceResolver,never()).getOutputStream(uri);

}

Location: ResourceResolverFactoryTestCase.java

Content: 

@Test public void testCreateTempAwareResourceResolverForTmpResource() throws Exception {

  URI uri=URI.create("tmp:///id");

  TestCreateTempAwareResourceResolverHelper helper=new TestCreateTempAwareResourceResolverHelper();

  helper.getResource(uri);

  verify(helper.tempResourceResolver,times(1)).getResource(uri.getPath());

  verify(helper.defaultResourceResolver,never()).getResource(uri);

}

Location: ResourceResolverFactoryTestCase.java

Content: 

@Test public void testDefaultResourceResolverGetOutput() throws Exception {

  ResourceResolver sut=ResourceResolverFactory.createDefaultResourceResolver();

  File outputFile=File.createTempFile("prefix","suffix");

  outputFile.deleteOnExit();

  writeDataTo(sut.getOutputStream(outputFile.toURI()));

  InputStream is=new FileInputStream(outputFile);

  try {

    checkStream(is);

  }

  finally {

    is.close();

  }

}

Location: ResourceResolverFactoryTestCase.java

Content: 

@Test public void testDefaultResourceResolverGetResource() throws Exception {

  ResourceResolver sut=ResourceResolverFactory.createDefaultResourceResolver();

  File inputFile=File.createTempFile("prefix","suffix");

  InputStream is=null;

  try {

    writeDataTo(inputFile);

    is=sut.getResource(inputFile.toURI());

    checkStream(is);

  }

  finally {

    if (is != null) {

      is.close();

    }

    inputFile.delete();

  }

}

Location: ResourceResolverFactoryTestCase.java

Content: 

private void writeDataTo(File f) throws IOException {

  writeDataTo(new FileOutputStream(f));

}

Location: ResourceResolverFactoryTestCase.java

Content: 

private void writeDataTo(OutputStream os) throws IOException {

  os.write(DATA);

  os.close();

}

