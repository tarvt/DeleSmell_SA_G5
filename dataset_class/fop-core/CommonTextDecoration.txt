Location: CommonTextDecoration.java

Content: 

private static CommonTextDecoration calcTextDecoration(PropertyList pList) throws PropertyException {

  assert pList != null;

  CommonTextDecoration deco=null;

  PropertyList parentList=pList.getParentPropertyList();

  if (parentList != null) {

    deco=calcTextDecoration(parentList);

  }

  Property textDecoProp=pList.getExplicit(Constants.PR_TEXT_DECORATION);

  if (textDecoProp != null) {

    List list=textDecoProp.getList();

    for (    Object aList : list) {

      Property prop=(Property)aList;

      int propEnum=prop.getEnum();

      FOUserAgent ua=pList.getFObj() == null ? null : pList.getFObj().getUserAgent();

      if (propEnum == Constants.EN_NONE) {

        if (deco != null) {

          deco.decoration=0;

        }

        return deco;

      }

 else       if (propEnum == Constants.EN_UNDERLINE) {

        if (deco == null) {

          deco=new CommonTextDecoration();

        }

        deco.decoration|=UNDERLINE;

        deco.underColor=pList.get(Constants.PR_COLOR).getColor(ua);

      }

 else       if (propEnum == Constants.EN_NO_UNDERLINE) {

        if (deco != null) {

          deco.decoration&=OVERLINE | LINE_THROUGH | BLINK;

          deco.underColor=pList.get(Constants.PR_COLOR).getColor(ua);

        }

      }

 else       if (propEnum == Constants.EN_OVERLINE) {

        if (deco == null) {

          deco=new CommonTextDecoration();

        }

        deco.decoration|=OVERLINE;

        deco.overColor=pList.get(Constants.PR_COLOR).getColor(ua);

      }

 else       if (propEnum == Constants.EN_NO_OVERLINE) {

        if (deco != null) {

          deco.decoration&=UNDERLINE | LINE_THROUGH | BLINK;

          deco.overColor=pList.get(Constants.PR_COLOR).getColor(ua);

        }

      }

 else       if (propEnum == Constants.EN_LINE_THROUGH) {

        if (deco == null) {

          deco=new CommonTextDecoration();

        }

        deco.decoration|=LINE_THROUGH;

        deco.throughColor=pList.get(Constants.PR_COLOR).getColor(ua);

      }

 else       if (propEnum == Constants.EN_NO_LINE_THROUGH) {

        if (deco != null) {

          deco.decoration&=UNDERLINE | OVERLINE | BLINK;

          deco.throughColor=pList.get(Constants.PR_COLOR).getColor(ua);

        }

      }

 else       if (propEnum == Constants.EN_BLINK) {

        if (deco == null) {

          deco=new CommonTextDecoration();

        }

        deco.decoration|=BLINK;

      }

 else       if (propEnum == Constants.EN_NO_BLINK) {

        if (deco != null) {

          deco.decoration&=UNDERLINE | OVERLINE | LINE_THROUGH;

        }

      }

 else {

        throw new PropertyException("Illegal value encountered: " + prop.getString());

      }

    }

  }

  return deco;

}

Location: CommonTextDecoration.java

Content: 

/** 

 * Creates a new CommonTextDecoration object with default values.

 */

public CommonTextDecoration(){

}

Location: CommonTextDecoration.java

Content: 

/** 

 * Creates a CommonTextDecoration object from a property list.

 * @param pList the property list to build the object for

 * @return a CommonTextDecoration object or null if the obj would only have default values

 * @throws PropertyException if there's a problem while processing the property

 */

public static CommonTextDecoration createFromPropertyList(PropertyList pList) throws PropertyException {

  return calcTextDecoration(pList);

}

Location: CommonTextDecoration.java

Content: 

/** 

 * @return the color of the line-through mark 

 */

public Color getLineThroughColor(){

  return this.throughColor;

}

Location: CommonTextDecoration.java

Content: 

/** 

 * @return the color of the overline mark 

 */

public Color getOverlineColor(){

  return this.overColor;

}

Location: CommonTextDecoration.java

Content: 

/** 

 * @return the color of the underline mark 

 */

public Color getUnderlineColor(){

  return this.underColor;

}

Location: CommonTextDecoration.java

Content: 

/** 

 * @return true if line-through is active 

 */

public boolean hasLineThrough(){

  return (this.decoration & LINE_THROUGH) != 0;

}

Location: CommonTextDecoration.java

Content: 

/** 

 * @return true if overline is active 

 */

public boolean hasOverline(){

  return (this.decoration & OVERLINE) != 0;

}

Location: CommonTextDecoration.java

Content: 

/** 

 * @return true if underline is active 

 */

public boolean hasUnderline(){

  return (this.decoration & UNDERLINE) != 0;

}

Location: CommonTextDecoration.java

Content: 

/** 

 * @return true if blink is active 

 */

public boolean isBlinking(){

  return (this.decoration & BLINK) != 0;

}

