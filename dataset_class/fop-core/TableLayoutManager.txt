Location: TableLayoutManager.java

Content: 

/** 

 * Adds the given area to this layout manager's area, without updating the used bpd.

 * @param background an area

 */

void addBackgroundArea(Block background){

  curBlockArea.addChildArea(background);

}

Location: TableLayoutManager.java

Content: 

/** 

 * Clears the list of markers in the current table fragment. Should be called just before starting a new header (that belongs to the next table fragment).

 */

protected void clearTableFragmentMarkers(){

  tableFragmentMarkers=null;

}

Location: TableLayoutManager.java

Content: 

public void flagAsHavingRetrieveTableMarker(){

  hasRetrieveTableMarker=true;

}

Location: TableLayoutManager.java

Content: 

/** 

 * {@inheritDoc} 

 */

public Position getAuxiliaryPosition(){

  if (auxiliaryPosition == null) {

    auxiliaryPosition=new LeafPosition(this,0);

  }

  return auxiliaryPosition;

}

Location: TableLayoutManager.java

Content: 

@Override protected CommonBorderPaddingBackground getCommonBorderPaddingBackground(){

  return getTable().getCommonBorderPaddingBackground();

}

Location: TableLayoutManager.java

Content: 

List<List<KnuthElement>> getFooterFootnotes(){

  return footerFootnotes;

}

Location: TableLayoutManager.java

Content: 

/** 

 * @return half the value of border-separation.block-progression-dimension, or 0 ifborder-collapse="collapse".

 */

public int getHalfBorderSeparationBPD(){

  return halfBorderSeparationBPD;

}

Location: TableLayoutManager.java

Content: 

/** 

 * @return half the value of border-separation.inline-progression-dimension, or 0 ifborder-collapse="collapse".

 */

public int getHalfBorderSeparationIPD(){

  return halfBorderSeparationIPD;

}

Location: TableLayoutManager.java

Content: 

List<List<KnuthElement>> getHeaderFootnotes(){

  return headerFootnotes;

}

Location: TableLayoutManager.java

Content: 

/** 

 * {@inheritDoc} 

 */

public KeepProperty getKeepTogetherProperty(){

  return getTable().getKeepTogether();

}

Location: TableLayoutManager.java

Content: 

/** 

 * {@inheritDoc} 

 */

public KeepProperty getKeepWithNextProperty(){

  return getTable().getKeepWithNext();

}

Location: TableLayoutManager.java

Content: 

/** 

 * {@inheritDoc} 

 */

public KeepProperty getKeepWithPreviousProperty(){

  return getTable().getKeepWithPrevious();

}

Location: TableLayoutManager.java

Content: 

protected void possiblyRegisterMarkersForTables(Map<String,Marker> markers,boolean isStarting,boolean isFirst,boolean isLast){

  if (hasRetrieveTableMarker) {

    registerMarkers(markers,isStarting,isFirst,isLast);

  }

  super.possiblyRegisterMarkersForTables(markers,isStarting,isFirst,isLast);

}

Location: TableLayoutManager.java

Content: 

/** 

 * Registers the given area, that will be used to render the part of column background covered by a table-cell. If percentages are used to place the background image, the final bpd of the (fraction of) table that will be rendered on the current page must be known. The traits can't then be set when the areas for the cell are created since at that moment this bpd is yet unknown. So they will instead be set in TableLM's  {@link #addAreas(PositionIterator,LayoutContext)} method.

 * @param column the table-column element from which the cell gets backgroundinformations

 * @param backgroundArea the block of the cell's dimensions that will hold the columnbackground

 * @param xShift additional amount by which the image must be shifted to be correctlyplaced (to counterbalance the cell's start border)

 */

void registerColumnBackgroundArea(TableColumn column,Block backgroundArea,int xShift){

  addBackgroundArea(backgroundArea);

  if (columnBackgroundAreas == null) {

    columnBackgroundAreas=new ArrayList();

  }

  columnBackgroundAreas.add(new ColumnBackgroundInfo(column,backgroundArea,xShift));

}

Location: TableLayoutManager.java

Content: 

/** 

 * Register the markers for this table.

 * @param marks the map of markers to add

 * @param starting if the area being added is starting or ending

 * @param isfirst if the area being added has is-first trait

 * @param islast if the area being added has is-last trait

 */

public void registerMarkers(Map<String,Marker> marks,boolean starting,boolean isfirst,boolean islast){

  if (tableMarkers == null) {

    tableMarkers=new Markers();

  }

  tableMarkers.register(marks,starting,isfirst,islast);

  if (tableFragmentMarkers == null) {

    tableFragmentMarkers=new Markers();

  }

  tableFragmentMarkers.register(marks,starting,isfirst,islast);

}

Location: TableLayoutManager.java

Content: 

/** 

 * Calls addAreas() for each of the saved TableCellLayoutManagers.

 */

protected void repeatAddAreasForSavedTableHeaderTableCellLayoutManagers(){

  if (savedTCLMs == null) {

    return;

  }

  areAllTCLMsSaved=true;

  for (  TableCellLayoutManager tclm : savedTCLMs) {

    if (this.repeatedHeader) {

      tclm.setHasRepeatedHeader(true);

    }

    tclm.repeatAddAreas();

  }

}

Location: TableLayoutManager.java

Content: 

private void resetSpaces(){

  this.discardBorderBefore=false;

  this.discardBorderAfter=false;

  this.discardPaddingBefore=false;

  this.discardPaddingAfter=false;

  this.effSpaceBefore=null;

  this.effSpaceAfter=null;

}

Location: TableLayoutManager.java

Content: 

/** 

 * Resolves a RetrieveTableMarker by finding a qualifying Marker to which it is bound to.

 * @param rtm the RetrieveTableMarker to be resolved

 * @return a bound RetrieveTableMarker instance or null if no qualifying Marker found

 */

public RetrieveTableMarker resolveRetrieveTableMarker(RetrieveTableMarker rtm){

  String name=rtm.getRetrieveClassName();

  int originalPosition=rtm.getPosition();

  boolean changedPosition=false;

  Marker mark=null;

  mark=(tableFragmentMarkers == null) ? null : tableFragmentMarkers.resolve(rtm);

  if (mark == null && rtm.getBoundary() != Constants.EN_TABLE_FRAGMENT) {

    rtm.changePositionTo(Constants.EN_LAST_ENDING);

    changedPosition=true;

    mark=getCurrentPV().resolveMarker(rtm);

    if (mark == null && rtm.getBoundary() != Constants.EN_PAGE) {

      mark=(tableMarkers == null) ? null : tableMarkers.resolve(rtm);

    }

  }

  if (changedPosition) {

    rtm.changePositionTo(originalPosition);

  }

  if (mark == null) {

    log.debug("found no marker with name: " + name);

    return null;

  }

 else {

    rtm.bindMarker(mark);

    return rtm;

  }

}

Location: TableLayoutManager.java

Content: 

/** 

 * Saves a TableCellLayoutManager for later use.

 * @param tclm a TableCellLayoutManager that has a RetrieveTableMarker

 */

protected void saveTableHeaderTableCellLayoutManagers(TableCellLayoutManager tclm){

  if (savedTCLMs == null) {

    savedTCLMs=new ArrayList<TableCellLayoutManager>();

  }

  if (!areAllTCLMsSaved) {

    savedTCLMs.add(tclm);

  }

}

Location: TableLayoutManager.java

Content: 

void setFooterFootnotes(List<List<KnuthElement>> footnotes){

  this.footerFootnotes=footnotes;

}

Location: TableLayoutManager.java

Content: 

void setHeaderFootnotes(List<List<KnuthElement>> footnotes){

  this.headerFootnotes=footnotes;

}

Location: TableLayoutManager.java

Content: 

public void setRepeateHeader(boolean repeateHeader){

  this.repeatedHeader=repeateHeader;

}

Location: TableLayoutManager.java

Content: 

/** 

 * Create a new table layout manager.

 * @param node the table FO

 */

public TableLayoutManager(Table node){

  super(node);

  this.columns=new ColumnSetup(node);

}

