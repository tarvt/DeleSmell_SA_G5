Location: PDFDocumentGraphics2DConfigurator.java

Content: 

/** 

 * Configures a PDFDocumentGraphics2D instance using an Avalon Configuration object.

 * @param graphics the PDFDocumentGraphics2D instance

 * @param cfg the configuration

 * @param useComplexScriptFeatures true if complex script features enabled

 * @throws ConfigurationException if an error occurs while configuring the object

 */

public void configure(PDFDocumentGraphics2D graphics,Configuration cfg,boolean useComplexScriptFeatures) throws ConfigurationException {

  PDFDocument pdfDoc=graphics.getPDFDocument();

  try {

    PDFRendererConfig pdfConfig=new PDFRendererConfigParser().build(null,cfg);

    pdfDoc.setFilterMap(pdfConfig.getConfigOptions().getFilterMap());

  }

 catch (  FOPException e) {

    throw new RuntimeException(e);

  }

  try {

    FontInfo fontInfo=createFontInfo(cfg,useComplexScriptFeatures);

    graphics.setFontInfo(fontInfo);

  }

 catch (  FOPException e) {

    throw new ConfigurationException("Error while setting up fonts",e);

  }

}

Location: PDFDocumentGraphics2DConfigurator.java

Content: 

/** 

 * Creates the  {@link FontInfo} instance for the given configuration.

 * @param cfg the configuration

 * @param useComplexScriptFeatures true if complex script features enabled

 * @return the font collection

 * @throws FOPException if an error occurs while setting up the fonts

 */

public static FontInfo createFontInfo(Configuration cfg,boolean useComplexScriptFeatures) throws FOPException {

  FontInfo fontInfo=new FontInfo();

  final boolean strict=false;

  if (cfg != null) {

    URI thisUri=new File(".").getAbsoluteFile().toURI();

    InternalResourceResolver resourceResolver=ResourceResolverFactory.createDefaultInternalResourceResolver(thisUri);

    FontManager fontManager=new FontManager(resourceResolver,FontDetectorFactory.createDefault(),FontCacheManagerFactory.createDefault());

    DefaultFontConfig.DefaultFontConfigParser parser=new DefaultFontConfig.DefaultFontConfigParser();

    DefaultFontConfig fontInfoConfig=parser.parse(cfg,strict);

    DefaultFontConfigurator fontInfoConfigurator=new DefaultFontConfigurator(fontManager,null,strict);

    List<EmbedFontInfo> fontInfoList=fontInfoConfigurator.configure(fontInfoConfig);

    fontManager.saveCache();

    FontSetup.setup(fontInfo,fontInfoList,resourceResolver,useComplexScriptFeatures);

  }

 else {

    FontSetup.setup(fontInfo,useComplexScriptFeatures);

  }

  return fontInfo;

}

