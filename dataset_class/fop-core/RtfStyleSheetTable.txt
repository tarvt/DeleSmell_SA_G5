Location: RtfStyleSheetTable.java

Content: 

/** 

 * Adds the style attributes to the given attributes.

 * @param name Name of style, of which the attributes will copied to attr

 * @param attr Default rtf attributes

 * @return Status value

 */

public int addStyleToAttributes(String name,RtfAttributes attr){

  int status=STATUS_OK;

  Integer style=(Integer)styles.get(name);

  if (style == null && !name.equals(defaultStyleName)) {

    name=defaultStyleName;

    style=(Integer)styles.get(name);

    status=STATUS_DEFAULT;

  }

  if (style == null) {

    return status;

  }

  attr.set("cs",style);

  Object o=attrTable.get(name);

  if (o != null) {

    RtfAttributes rtfAttr=(RtfAttributes)o;

    for (Iterator names=rtfAttr.nameIterator(); names.hasNext(); ) {

      String attrName=(String)names.next();

      if (!attr.isSet(attrName)) {

        Integer i=(Integer)rtfAttr.getValue(attrName);

        if (i == null) {

          attr.set(attrName);

        }

 else {

          attr.set(attrName,i);

        }

      }

    }

  }

  return status;

}

Location: RtfStyleSheetTable.java

Content: 

/** 

 * Adds a style to the table.

 * @param name Name of style to add

 * @param attrs Rtf attributes which defines the style

 */

public void addStyle(String name,RtfAttributes attrs){

  nameTable.addElement(name);

  if (attrs != null) {

    attrTable.put(name,attrs);

  }

  styles.put(name,nameTable.size() - 1 + startIndex);

}

Location: RtfStyleSheetTable.java

Content: 

/** 

 * Gets the name of the default style.

 * @return Default style name.

 */

public String getDefaultStyleName(){

  if (attrTable.get(defaultStyleName) != null) {

    return defaultStyleName;

  }

  if (attrTable.get(STANDARD_STYLE) != null) {

    defaultStyleName=STANDARD_STYLE;

    return defaultStyleName;

  }

  return null;

}

Location: RtfStyleSheetTable.java

Content: 

/** 

 * Gets the rtf style reference from the table.

 * @param name Name of Style

 * @return Rtf attribute of the style reference

 */

private String getRtfStyleReference(String name){

  return "cs" + styles.get(name).toString();

}

Location: RtfStyleSheetTable.java

Content: 

/** 

 * Constructor.

 */

private RtfStyleSheetTable(){

  styles=new Hashtable();

  attrTable=new Hashtable();

  nameTable=new Vector();

}

Location: RtfStyleSheetTable.java

Content: 

/** 

 * Sets the default style.

 * @param styleName Name of the default style, defined in the stylesheet

 */

public void setDefaultStyle(String styleName){

  this.defaultStyleName=styleName;

}

Location: RtfStyleSheetTable.java

Content: 

/** 

 * Writes the rtf style sheet table.

 * @param header Rtf header is the parent

 * @throws IOException On write error

 */

public void writeStyleSheet(RtfHeader header) throws IOException {

  if (styles == null || styles.size() == 0) {

    return;

  }

  header.writeGroupMark(true);

  header.writeControlWord("stylesheet");

  int number=nameTable.size();

  for (int i=0; i < number; i++) {

    String name=(String)nameTable.elementAt(i);

    header.writeGroupMark(true);

    header.writeControlWord("*\\" + this.getRtfStyleReference(name));

    Object o=attrTable.get(name);

    if (o != null) {

      header.writeAttributes((RtfAttributes)o,RtfText.ATTR_NAMES);

      header.writeAttributes((RtfAttributes)o,RtfText.ALIGNMENT);

    }

    header.write(name + ";");

    header.writeGroupMark(false);

  }

  header.writeGroupMark(false);

}

