Location: PCLTTFCharacterWriterTestCase.java

Content: 

private byte[] getBytes(byte[] byteArray,int offset,int length){

  byte[] result=new byte[length];

  int count=0;

  for (int i=offset; i < offset + length; i++) {

    result[count++]=byteArray[i];

  }

  return result;

}

Location: PCLTTFCharacterWriterTestCase.java

Content: 

@Test public void verifyCharacterDefinition() throws Exception {

  CustomFont sbFont=mock(CustomFont.class);

  when(customFont.getRealFont()).thenReturn(sbFont);

  when(sbFont.getInputStream()).thenReturn(new FileInputStream(TEST_FONT_A));

  softFont=new PCLSoftFont(1,customFont,false);

  TTFFile openFont=new TTFFile();

  FontFileReader reader=new FontFileReader(new FileInputStream(new File(TEST_FONT_A)));

  String header=OFFontLoader.readHeader(reader);

  openFont.readFont(reader,header);

  softFont.setOpenFont(openFont);

  softFont.setReader(reader);

  softFont.setMtxCharIndexes(new PCLTTFFontReader(customFont).scanMtxCharacters());

  characterWriter=new PCLTTFCharacterWriter(softFont);

  byte[] charDefinition=characterWriter.writeCharacterDefinitions("f");

  byte[] command=PCLByteWriterUtil.writeCommand(String.format("*c%dE",32));

  assertArrayEquals(getBytes(charDefinition,0,6),command);

  byte[] charDefCommand=PCLByteWriterUtil.writeCommand(String.format("(s%dW",210));

  assertArrayEquals(getBytes(charDefinition,6,7),charDefCommand);

}

