Location: AFPRendererContext.java

Content: 

/** 

 * Main constructor

 * @param renderer the current renderer

 * @param mime the MIME type of the output that's generated.

 */

public AFPRendererContext(AbstractRenderer renderer,String mime){

  super(renderer,mime);

}

Location: AFPRendererContext.java

Content: 

/** 

 * Returns a new AFPInfo for this renderer context

 * @return an AFPInfo for this renderer context

 */

public AFPInfo getInfo(){

  AFPInfo info=new AFPInfo();

  info.setWidth((Integer)getProperty(RendererContextConstants.WIDTH));

  info.setHeight((Integer)getProperty(RendererContextConstants.HEIGHT));

  info.setX((Integer)getProperty(RendererContextConstants.XPOS));

  info.setY((Integer)getProperty(RendererContextConstants.YPOS));

  info.setHandlerConfiguration((Configuration)getProperty(RendererContextConstants.HANDLER_CONFIGURATION));

  info.setFontInfo((org.apache.fop.fonts.FontInfo)getProperty(AFPRendererContextConstants.AFP_FONT_INFO));

  info.setPaintingState((AFPPaintingState)getProperty(AFPRendererContextConstants.AFP_PAINTING_STATE));

  info.setResourceManager(((AFPResourceManager)getProperty(AFPRendererContextConstants.AFP_RESOURCE_MANAGER)));

  Map foreignAttributes=(Map)getProperty(RendererContextConstants.FOREIGN_ATTRIBUTES);

  if (foreignAttributes != null) {

    boolean paintAsBitmap=ImageHandlerUtil.isConversionModeBitmap(foreignAttributes);

    info.setPaintAsBitmap(paintAsBitmap);

    AFPForeignAttributeReader foreignAttributeReader=new AFPForeignAttributeReader();

    AFPResourceInfo resourceInfo=foreignAttributeReader.getResourceInfo(foreignAttributes);

    if (!resourceInfo.levelChanged()) {

      byte resourceType=paintAsBitmap ? ResourceObject.TYPE_IMAGE : ResourceObject.TYPE_GRAPHIC;

      resourceInfo.setLevel(info.getResourceManager().getResourceLevelDefaults().getDefaultResourceLevel(resourceType));

    }

    info.setResourceInfo(resourceInfo);

  }

  return info;

}

