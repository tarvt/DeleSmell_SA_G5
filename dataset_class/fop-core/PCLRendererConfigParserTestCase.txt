Location: PCLRendererConfigParserTestCase.java

Content: 

public PCLRendererConfigParserTestCase(){

  super(new PCLRendererConfigParser(),PCLRendererConfBuilder.class);

}

Location: PCLRendererConfigParserTestCase.java

Content: 

@Test public void testDisablePJL() throws Exception {

  parseConfig();

  assertEquals(false,conf.isDisablePjl());

  parseConfig(createRenderer().setDisablePjl(true));

  assertEquals(true,conf.isDisablePjl());

}

Location: PCLRendererConfigParserTestCase.java

Content: 

@Test public void testGetMimeType() throws Exception {

  assertEquals(MimeConstants.MIME_PCL,new PCLRendererConfigParser().getMimeType());

}

Location: PCLRendererConfigParserTestCase.java

Content: 

@Test public void testRenderingMode() throws Exception {

  parseConfig();

  assertEquals(null,conf.getRenderingMode());

  parseConfig(createRenderer().setRenderingMode(PCLRenderingMode.QUALITY));

  assertEquals(PCLRenderingMode.QUALITY,conf.getRenderingMode());

}

Location: PCLRendererConfigParserTestCase.java

Content: 

@Test(expected=FOPException.class) public void testRenderingModeException() throws Exception {

  parseConfig(createRenderer().setRenderingMode("whatever"));

}

Location: PCLRendererConfigParserTestCase.java

Content: 

@Test public void testTextRendering() throws Exception {

  parseConfig();

  assertEquals(false,conf.isTextRendering());

  parseConfig(createRenderer().setTextRendering("auto"));

  assertEquals(false,conf.isTextRendering());

  parseConfig(createRenderer().setTextRendering("bitmap"));

  assertEquals(true,conf.isTextRendering());

}

Location: PCLRendererConfigParserTestCase.java

Content: 

@Test(expected=FOPException.class) public void testTextRenderingException() throws Exception {

  parseConfig(createRenderer().setTextRendering("whatever"));

}

