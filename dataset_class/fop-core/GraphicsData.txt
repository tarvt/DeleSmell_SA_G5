Location: GraphicsData.java

Content: 

/** 

 * Adds the given segment to this graphics data

 * @param segment a graphics chained segment

 */

public void addSegment(GraphicsChainedSegment segment){

  currentSegment=segment;

  super.addObject(currentSegment);

}

Location: GraphicsData.java

Content: 

/** 

 * Returns a new segment name

 * @return a new segment name

 */

public String createSegmentName(){

  return StringUtils.lpad(String.valueOf((super.objects != null ? super.objects.size() : 0) + 1),'0',4);

}

Location: GraphicsData.java

Content: 

/** 

 * Main constructor

 */

public GraphicsData(){

}

Location: GraphicsData.java

Content: 

/** 

 * Creates a new graphics segment.

 * @param appended true if this segment is appended to the previous one

 * @param prologPresent true if started with a prolog

 * @return a newly created graphics segment

 */

public GraphicsChainedSegment newSegment(boolean appended,boolean prologPresent){

  String segmentName=createSegmentName();

  if (currentSegment == null) {

    currentSegment=new GraphicsChainedSegment(segmentName);

  }

 else {

    currentSegment.setComplete(true);

    currentSegment=new GraphicsChainedSegment(segmentName,currentSegment.getNameBytes(),appended,prologPresent);

  }

  super.addObject(currentSegment);

  return currentSegment;

}

Location: GraphicsData.java

Content: 

/** 

 * Removes the current segment from this graphics data

 * @return the current segment from this graphics data

 */

public StructuredData removeCurrentSegment(){

  this.currentSegment=null;

  return super.removeLast();

}

Location: GraphicsData.java

Content: 

/** 

 * Sets the indicator that this instance is a part of a series of segmented data chunks. This indirectly sets the SegFlag on the SFI header.

 * @param segmented true if this data object is not the last of the series

 */

public void setSegmentedData(boolean segmented){

  this.segmentedData=segmented;

}

