Location: WhitespaceCollapser.java

Content: 

/** 

 * @return last end space 

 */

public boolean getLastEndSpace(){

  return lastEndSpace;

}

Location: WhitespaceCollapser.java

Content: 

/** 

 * process one RtfString from our container 

 */

private void processString(RtfString txt){

  final String newString=processString(txt.getText());

  if (newString != null) {

    txt.setText(newString);

  }

}

Location: WhitespaceCollapser.java

Content: 

/** 

 * process one String 

 */

private String processString(String txt){

  final String orig=txt;

  if (orig == null) {

    return null;

  }

 else   if (orig.length() > 0) {

    final boolean allSpaces=orig.trim().length() == 0;

    final boolean endSpace=allSpaces || Character.isWhitespace(orig.charAt(orig.length() - 1));

    final boolean beginSpace=Character.isWhitespace(orig.charAt(0));

    final StringBuffer sb=new StringBuffer(orig.length());

    if (allSpaces) {

      if (!lastEndSpace) {

        sb.append(SPACE);

      }

    }

 else {

      boolean first=true;

      final StringTokenizer stk=new StringTokenizer(txt," \t\n\r");

      while (stk.hasMoreTokens()) {

        if (first && beginSpace && !lastEndSpace) {

          sb.append(SPACE);

        }

        first=false;

        sb.append(stk.nextToken());

        if (stk.hasMoreTokens() || endSpace) {

          sb.append(SPACE);

        }

      }

    }

    lastEndSpace=endSpace;

    return sb.toString();

  }

 else {

    return "";

  }

}

Location: WhitespaceCollapser.java

Content: 

/** 

 * process one RtfText from our container 

 */

private void processText(RtfText txt){

  final String newString=processString(txt.getText());

  if (newString != null) {

    txt.setText(newString);

  }

}

Location: WhitespaceCollapser.java

Content: 

/** 

 * Remove extra whitespace in RtfText elements that are inside container.

 * @param c the container

 */

WhitespaceCollapser(RtfContainer c){

  for (  final Object kid : c.getChildren()) {

    if (kid instanceof RtfText) {

      RtfText current=(RtfText)kid;

      processText(current);

    }

 else     if (kid instanceof RtfString) {

      RtfString current=(RtfString)kid;

      processString(current);

    }

 else {

      lastEndSpace=true;

    }

  }

}

