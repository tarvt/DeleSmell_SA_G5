Location: PageSequenceLayoutManagerTestCase.java

Content: 

private static Page createPageForRegionName(final String regionName){

  final Page page=mock(Page.class);

  final SimplePageMaster spm=mock(SimplePageMaster.class);

  final PageViewport pageViewport=mock(PageViewport.class);

  final Region region=mock(RegionBody.class);

  when(page.getSimplePageMaster()).thenReturn(spm);

  when(page.getPageViewport()).thenReturn(pageViewport);

  when(spm.getRegion(anyInt())).thenReturn(region);

  when(region.getRegionName()).thenReturn(regionName);

  return page;

}

Location: PageSequenceLayoutManagerTestCase.java

Content: 

/** 

 * Blank pages can be created from empty pages

 * @throws Exception

 */

@Test public void testGetNextPageBlank() throws Exception {

  final Page expectedPage=createPageForRegionName(EMPTY_FLOW_NAME);

  final Page[] providedPages=new Page[]{expectedPage};

  testGetNextPage(providedPages,expectedPage,true);

}

Location: PageSequenceLayoutManagerTestCase.java

Content: 

/** 

 * Empty pages should not be provided by the PageSequenceLayoutManager to layout the main flow

 * @throws Exception

 */

@Test public void testGetNextPageFirstEmpty() throws Exception {

  final Page emptyPage=createPageForRegionName(EMPTY_FLOW_NAME);

  final Page expectedPage=createPageForRegionName(MAIN_FLOW_NAME);

  final Page[] providedPages=new Page[]{emptyPage,expectedPage};

  testGetNextPage(providedPages,expectedPage,false);

}

Location: PageSequenceLayoutManagerTestCase.java

Content: 

private void testGetNextPage(final Page[] providedPages,Page expectedPage,boolean isBlank){

  final Flow flow=mock(Flow.class);

  final PageSequence pseq=mock(PageSequence.class);

  final Root root=mock(Root.class);

  final AreaTreeHandler ath=mock(AreaTreeHandler.class);

  when(flow.getFlowName()).thenReturn(MAIN_FLOW_NAME);

  when(pseq.getMainFlow()).thenReturn(flow);

  when(pseq.getRoot()).thenReturn(root);

  PageSequenceLayoutManager sut=new PageSequenceLayoutManager(ath,pseq){

    @Override protected Page createPage(    int i,    boolean b){

      return providedPages[i - 1];

    }

    @Override protected void finishPage(){

    }

    public Page makeNewPage(    boolean isBlank){

      return super.makeNewPage(isBlank);

    }

  }

;

  assertEquals(expectedPage,sut.makeNewPage(isBlank));

}

Location: PageSequenceLayoutManagerTestCase.java

Content: 

@Test public void testRegionNameNotFound(){

  final PageSequence pseq=mock(PageSequence.class);

  final AreaTreeHandler ath=mock(AreaTreeHandler.class);

  final Flow flow=mock(Flow.class);

  final Root root=mock(Root.class);

  when(flow.getFlowName()).thenReturn(MAIN_FLOW_NAME);

  when(pseq.getRoot()).thenReturn(root);

  when(pseq.hasPagePositionLast()).thenReturn(true);

  when(pseq.getMainFlow()).thenReturn(flow);

  PageSequenceLayoutManager pageSequenceLayoutManager=new PageSequenceLayoutManager(ath,pseq){

    public void activateLayout(){

      makeNewPage(false);

    }

    protected Page createPage(    int pageNumber,    boolean isBlank){

      return createPageForRegionName("test");

    }

    protected void finishPage(){

    }

  }

;

  RuntimeException re=null;

  try {

    pageSequenceLayoutManager.activateLayout();

  }

 catch (  RuntimeException e) {

    re=e;

  }

  assertEquals(re.getMessage(),"The flow-name \"test\" could not be mapped to a region-name in the layout-master-set");

}

