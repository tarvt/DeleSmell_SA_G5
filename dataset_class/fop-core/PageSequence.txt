Location: PageSequence.java

Content: 

/** 

 * Add a flow or static content, mapped by its flow-name. The flow-name is used to associate the flow with a region on a page, based on the region-names given to the regions in the page-master used to generate that page.

 * @param flow  the {@link Flow} instance to be added

 * @throws org.apache.fop.fo.ValidationException if the fo:flow mapsto an invalid page-region

 */

private void addFlow(Flow flow) throws ValidationException {

  String flowName=flow.getFlowName();

  if (hasFlowName(flowName)) {

    getFOValidationEventProducer().duplicateFlowNameInPageSequence(this,flow.getName(),flowName,flow.getLocator());

  }

  if (!hasRegion(flowName) && !flowName.equals("xsl-before-float-separator") && !flowName.equals("xsl-footnote-separator")) {

    getFOValidationEventProducer().flowNameNotMapped(this,flow.getName(),flowName,flow.getLocator());

  }

}

Location: PageSequence.java

Content: 

@Override protected Stack<DelimitedTextRange> collectDelimitedTextRanges(Stack<DelimitedTextRange> ranges,DelimitedTextRange currentRange){

  Map<String,FONode> flows=getFlowMap();

  if (flows != null) {

    for (    FONode fn : flows.values()) {

      if (fn instanceof StaticContent) {

        ranges=((StaticContent)fn).collectDelimitedTextRanges(ranges);

      }

    }

  }

  Flow main=getMainFlow();

  if (main != null) {

    ranges=main.collectDelimitedTextRanges(ranges);

  }

  return ranges;

}

Location: PageSequence.java

Content: 

/** 

 * Returns the starting counterpart of the specified ending change bar.

 * @param changeBarEnd The ending change bar element

 * @return The starting counterpart of the specified ending change bar

 */

public ChangeBar getChangeBarBegin(ChangeBar changeBarEnd){

  if (changeBarList.isEmpty()) {

    return null;

  }

 else {

    String changeBarClass=changeBarEnd.getChangeBarClass();

    for (int i=changeBarList.size() - 1; i >= 0; i--) {

      ChangeBar changeBar=changeBarList.get(i);

      if (changeBar.getChangeBarClass().equals(changeBarClass)) {

        return changeBar;

      }

    }

  }

  return null;

}

Location: PageSequence.java

Content: 

/** 

 * Returns the copy of active change bars list.

 * @return The list containing a copy of the active change bars

 */

public List<ChangeBar> getClonedChangeBarList(){

  return new LinkedList<ChangeBar>(changeBarList);

}

Location: PageSequence.java

Content: 

/** 

 * @return the flow map for this page-sequence 

 */

public Map<String,FONode> getFlowMap(){

  return this.flowMap;

}

Location: PageSequence.java

Content: 

public SimplePageMaster getLastSimplePageMaster(int page,boolean isFirstPage,boolean isBlank){

  boolean isOddPage=((page % 2) != 0);

  log.debug("getNextSimplePageMaster(page=" + page + " isOdd="+ isOddPage+ " isFirst="+ isFirstPage+ " isLast=true"+ " isBlank="+ isBlank+ ")");

  if (pageSequenceMaster == null) {

    return simplePageMaster;

  }

  return pageSequenceMaster.getLastSimplePageMaster(isOddPage,isFirstPage,isBlank,getMainFlow().getFlowName());

}

Location: PageSequence.java

Content: 

/** 

 * Public accessor for getting the MainFlow to which this PageSequence is attached.

 * @return the MainFlow object to which this PageSequence is attached.

 */

public Flow getMainFlow(){

  return mainFlow;

}

Location: PageSequence.java

Content: 

/** 

 * Get the value of the <code>master-reference</code> trait.

 * @return the "master-reference" trait

 */

public String getMasterReference(){

  return masterReference;

}

Location: PageSequence.java

Content: 

/** 

 * Public accessor for determining the next page master to use within this page sequence.

 * @param page the page number of the page to be created

 * @param isFirstPage indicator whether this page is the first page of thepage sequence

 * @param isLastPage indicator whether this page is the last page of thepage sequence

 * @param isBlank indicator whether the page will be blank

 * @return the SimplePageMaster to use for this page

 * @throws PageProductionException if there's a problem determining the page master

 */

public SimplePageMaster getNextSimplePageMaster(int page,boolean isFirstPage,boolean isLastPage,boolean isBlank) throws PageProductionException {

  if (pageSequenceMaster == null) {

    return simplePageMaster;

  }

  boolean isOddPage=((page % 2) != 0);

  if (log.isDebugEnabled()) {

    log.debug("getNextSimplePageMaster(page=" + page + " isOdd="+ isOddPage+ " isFirst="+ isFirstPage+ " isLast="+ isLastPage+ " isBlank="+ isBlank+ ")");

  }

  return pageSequenceMaster.getNextSimplePageMaster(isOddPage,isFirstPage,isLastPage,isBlank,getMainFlow().getFlowName());

}

Location: PageSequence.java

Content: 

/** 

 * @return the number of pages currently in this page sequence

 */

public int getPageCount(){

  return this.pages.size();

}

Location: PageSequence.java

Content: 

/** 

 * Returns the page at the given index.

 * @param idx the index of the requested page

 * @return the requested page or null if it was not found

 */

public PageViewport getPage(int idx){

  return this.pages.get(idx);

}

Location: PageSequence.java

Content: 

/** 

 * Get the static content FO node from the flow map. This gets the static content flow for the given flow name.

 * @param name the flow name to find

 * @return the static content FO node

 */

public StaticContent getStaticContent(String name){

  return (StaticContent)flowMap.get(name);

}

Location: PageSequence.java

Content: 

/** 

 * Accessor method for the fo:title associated with this fo:page-sequence

 * @return titleFO for this object

 */

public Title getTitleFO(){

  return titleFO;

}

Location: PageSequence.java

Content: 

/** 

 * Tests if there are any active change bars.

 * @return A boolean value true if there are any active change bars

 */

public boolean hasChangeBars(){

  return !changeBarList.isEmpty();

}

Location: PageSequence.java

Content: 

/** 

 * Determine if this PageSequence already has a flow with the given flow-name Used for validation of incoming fo:flow or fo:static-content objects

 * @param flowName The flow-name to search for

 * @return true if flow-name already defined within this page sequence,false otherwise

 */

public boolean hasFlowName(String flowName){

  return flowMap.containsKey(flowName);

}

Location: PageSequence.java

Content: 

private boolean hasRegion(String flowName){

  LayoutMasterSet set=getRoot().getLayoutMasterSet();

  PageSequenceMaster psm=set.getPageSequenceMaster(masterReference);

  return (psm != null) ? psm.getLayoutMasterSet().regionNameExists(flowName) : set.getSimplePageMaster(masterReference).regionNameExists(flowName);

}

Location: PageSequence.java

Content: 

@Override protected boolean isBidiBoundary(boolean propagate){

  return true;

}

Location: PageSequence.java

Content: 

/** 

 * Indicates whether a page is the first in this page sequence.

 * @param page the page to be inspected

 * @return true if the page is the first in this page sequence, false otherwise

 */

public boolean isFirstPage(PageViewport page){

  return page.equals(getPage(0));

}

Location: PageSequence.java

Content: 

/** 

 * Create a PageSequence instance that is a child of the given  {@link FONode}.

 * @param parent the parent {@link FONode}

 */

public PageSequence(FONode parent){

  super(parent);

}

Location: PageSequence.java

Content: 

/** 

 * Main constructor

 * @param title the title for the page-sequence, may be null

 */

public PageSequence(LineArea title){

  setTitle(title);

}

Location: PageSequence.java

Content: 

/** 

 * Removes the couple of the specified change bar from the active change bar list.

 * @param changeBarEnd The ending change bar element

 */

public void popChangeBar(ChangeBar changeBarEnd){

  ChangeBar changeBarBegin=getChangeBarBegin(changeBarEnd);

  if (changeBarBegin != null) {

    changeBarList.remove(changeBarBegin);

  }

}

Location: PageSequence.java

Content: 

/** 

 * Adds the specified change bar to the active change bar list.

 * @param changeBarBegin The starting change bar element

 */

public void pushChangeBar(ChangeBar changeBarBegin){

  changeBarList.add(changeBarBegin);

}

Location: PageSequence.java

Content: 

/** 

 * Releases a page-sequence's children after the page-sequence has been fully processed.

 */

public void releasePageSequence(){

  this.mainFlow=null;

  this.flowMap.clear();

}

Location: PageSequence.java

Content: 

/** 

 * Sets the locale that applies to this page-sequence.

 * @param locale the locale to set

 */

public void setLocale(Locale locale){

  this.locale=locale;

}

Location: PageSequence.java

Content: 

/** 

 * Sets the page sequence's title.

 * @param title the title

 */

public void setTitle(LineArea title){

  this.title=title;

}

