Location: FixedLength.java

Content: 

/** 

 * Convert the given length to a dimensionless integer representing a whole number of base units (milli-points).

 * @param dvalue quantity of input units

 * @param unit input unit specifier (in, cm, etc.)

 * @param res   the input/source resolution (in case the unit spec is "px")

 */

private static int convert(double dvalue,String unit,float res){

  if ("px".equals(unit)) {

    dvalue*=(res * 1000);

  }

 else {

    if (FixedLength.INCH.equals(unit)) {

      dvalue*=72000;

    }

 else     if (FixedLength.CM.equals(unit)) {

      dvalue*=28346.4567;

    }

 else     if (FixedLength.MM.equals(unit)) {

      dvalue*=2834.64567;

    }

 else     if (FixedLength.POINT.equals(unit)) {

      dvalue*=1000;

    }

 else     if (FixedLength.PICA.equals(unit)) {

      dvalue*=12000;

    }

 else     if (!FixedLength.MPT.equals(unit)) {

      dvalue=0;

      log.error("Unknown length unit '" + unit + "'");

    }

  }

  return (int)dvalue;

}

Location: FixedLength.java

Content: 

/** 

 * Set the length given a number of units, a unit name and an assumed resolution (used in case the units are pixels)

 * @param numUnits  quantity of input units

 * @param units     input unit specifier

 * @param res       input/source resolution

 */

private FixedLength(double numUnits,String units,float res){

  this.millipoints=convert(numUnits,units,res);

}

Location: FixedLength.java

Content: 

/** 

 * Return the cached  {@link FixedLength} instance correspondingto the computed value. This method assumes 'millipoints' (non-standard) as units, and an implied source-resolution of 1 (1px = 1pt).

 * @param numUnits  input units

 * @return  the canonical FixedLength instance correspondingto the given number of units and unit specifier

 */

public static FixedLength getInstance(double numUnits){

  return getInstance(numUnits,FixedLength.MPT,1.0f);

}

Location: FixedLength.java

Content: 

/** 

 * Return the cached  {@link FixedLength} instance correspondingto the computed value This method assumes a source-resolution of 1 (1px = 1pt)

 * @param numUnits  input units

 * @param units     unit specifier

 * @return  the canonical FixedLength instance correspondingto the given number of units and unit specifier

 */

public static FixedLength getInstance(double numUnits,String units){

  return getInstance(numUnits,units,1.0f);

}

Location: FixedLength.java

Content: 

/** 

 * Return the cached  {@link FixedLength} instance correspondingto the computed value in base-units (millipoints).

 * @param numUnits  quantity of input units

 * @param units     input unit specifier

 * @param sourceResolution input/source resolution (= ratio of pixels per pt)

 * @return  the canonical FixedLength instance correspondingto the given number of units and unit specifier in the given resolution

 */

public static FixedLength getInstance(double numUnits,String units,float sourceResolution){

  if (numUnits == 0.0) {

    return ZERO_FIXED_LENGTH;

  }

 else {

    return CACHE.fetch(new FixedLength(numUnits,units,sourceResolution));

  }

}

Location: FixedLength.java

Content: 

/** 

 * {@inheritDoc} 

 */

public double getNumericValue(){

  return millipoints;

}

Location: FixedLength.java

Content: 

/** 

 * {@inheritDoc} 

 */

public double getNumericValue(PercentBaseContext context){

  return millipoints;

}

Location: FixedLength.java

Content: 

/** 

 * {@inheritDoc} 

 */

public int getValue(PercentBaseContext context){

  return millipoints;

}

Location: FixedLength.java

Content: 

/** 

 * Return true since a FixedLength is always absolute. {@inheritDoc}

 */

public boolean isAbsolute(){

  return true;

}

