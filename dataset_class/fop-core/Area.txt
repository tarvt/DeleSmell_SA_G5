Location: Area.java

Content: 

public void activateEffectiveIPD(){

  if (effectiveIPD != -1) {

    ipd=effectiveIPD;

  }

}

Location: Area.java

Content: 

/** 

 * Add a trait to this area.

 * @param traitCode the trait key

 * @param prop the value of the trait

 */

public void addTrait(Integer traitCode,Object prop){

  if (traits == null) {

    traits=new TreeMap<Integer,Object>();

  }

  traits.put(traitCode,prop);

}

Location: Area.java

Content: 

/** 

 * Get the allocation block progression dimension of this area. This adds the content, borders, padding and spaces to find the total allocated BPD.

 * @return the total BPD allocation for this area

 */

public int getAllocBPD(){

  return getSpaceBefore() + getBorderAndPaddingWidthBefore() + getBPD()+ getBorderAndPaddingWidthAfter()+ getSpaceAfter();

}

Location: Area.java

Content: 

/** 

 * Get the allocation inline progression dimension of this area. This adds the content, borders and the padding to find the total allocated IPD.

 * @return the total IPD allocation for this area

 */

public int getAllocIPD(){

  return getBorderAndPaddingWidthStart() + getIPD() + getBorderAndPaddingWidthEnd();

}

Location: Area.java

Content: 

/** 

 * Get the area class of this area.

 * @return the area class

 */

public int getAreaClass(){

  return this.areaClass;

}

Location: Area.java

Content: 

/** 

 * Return the sum of region border- and padding-after

 * @return width in millipoints

 */

public int getBorderAndPaddingWidthAfter(){

  int margin=0;

  BorderProps bps=(BorderProps)getTrait(Trait.BORDER_AFTER);

  if (bps != null) {

    margin=bps.width;

  }

  Integer padWidth=(Integer)getTrait(Trait.PADDING_AFTER);

  if (padWidth != null) {

    margin+=padWidth;

  }

  return margin;

}

Location: Area.java

Content: 

/** 

 * Return the sum of region border- and padding-before

 * @return width in millipoints

 */

public int getBorderAndPaddingWidthBefore(){

  int margin=0;

  BorderProps bps=(BorderProps)getTrait(Trait.BORDER_BEFORE);

  if (bps != null) {

    margin=bps.width;

  }

  Integer padWidth=(Integer)getTrait(Trait.PADDING_BEFORE);

  if (padWidth != null) {

    margin+=padWidth;

  }

  return margin;

}

Location: Area.java

Content: 

/** 

 * Return the sum of region border- and padding-end

 * @return width in millipoints

 */

public int getBorderAndPaddingWidthEnd(){

  int margin=0;

  BorderProps bps=(BorderProps)getTrait(Trait.BORDER_END);

  if (bps != null) {

    margin=bps.width;

  }

  Integer padWidth=(Integer)getTrait(Trait.PADDING_END);

  if (padWidth != null) {

    margin+=padWidth;

  }

  return margin;

}

Location: Area.java

Content: 

/** 

 * Return the sum of region border- and padding-start

 * @return width in millipoints

 */

public int getBorderAndPaddingWidthStart(){

  int margin=0;

  BorderProps bps=(BorderProps)getTrait(Trait.BORDER_START);

  if (bps != null) {

    margin=bps.width;

  }

  Integer padWidth=(Integer)getTrait(Trait.PADDING_START);

  if (padWidth != null) {

    margin+=padWidth;

  }

  return margin;

}

Location: Area.java

Content: 

public int getEffectiveAllocIPD(){

  return getBorderAndPaddingWidthStart() + getEffectiveIPD() + getBorderAndPaddingWidthEnd();

}

Location: Area.java

Content: 

/** 

 * Get a boolean trait from this area.

 * @param traitCode the trait key

 * @return the trait value

 */

public boolean getTraitAsBoolean(Integer traitCode){

  return Boolean.TRUE.equals(getTrait(traitCode));

}

Location: Area.java

Content: 

/** 

 * Get a trait from this area as an integer.

 * @param traitCode the trait key

 * @return the trait value

 */

public int getTraitAsInteger(Integer traitCode){

  final Object obj=getTrait(traitCode);

  if (obj instanceof Integer) {

    return (Integer)obj;

  }

 else {

    throw new IllegalArgumentException("Trait " + traitCode.getClass().getName() + " could not be converted to an integer");

  }

}

Location: Area.java

Content: 

/** 

 * Get the map of all traits on this area.

 * @return the map of traits

 */

public Map<Integer,Object> getTraits(){

  return this.traits;

}

Location: Area.java

Content: 

/** 

 * Get a trait from this area.

 * @param traitCode the trait key

 * @return the trait value

 */

public Object getTrait(Integer traitCode){

  return (traits != null ? traits.get(traitCode) : null);

}

Location: Area.java

Content: 

/** 

 * @return true if the area has traits 

 */

public boolean hasTraits(){

  return (this.traits != null);

}

Location: Area.java

Content: 

/** 

 * Checks whether a certain trait is set on this area.

 * @param traitCode the trait key

 * @return true if the trait is set

 */

public boolean hasTrait(Integer traitCode){

  return (getTrait(traitCode) != null);

}

Location: Area.java

Content: 

/** 

 * Reset the bidirectional embedding level to default value (-1).

 */

public void resetBidiLevel(){

  setBidiLevel(-1);

}

Location: Area.java

Content: 

/** 

 * Set the area class of this area.

 * @param areaClass the area class

 */

public void setAreaClass(int areaClass){

  this.areaClass=areaClass;

}

Location: Area.java

Content: 

/** 

 * Set the block progression dimension of the content rectangle for this area.

 * @param bpd the new block progression dimension

 * @see <a href="http://www.w3.org/TR/xsl/#block-progression-dimension">bpd</a>

 */

public void setBPD(int bpd){

  this.bpd=bpd;

}

Location: Area.java

Content: 

/** 

 * Sets the active change bar list.

 * @param changeBarList The active change bar list

 */

public void setChangeBarList(List<ChangeBar> changeBarList){

  this.changeBarList=changeBarList;

}

Location: Area.java

Content: 

/** 

 * Set the inline progression dimension of content rectangle for this area.

 * @param ipd the new inline progression dimension

 * @see <a href="http://www.w3.org/TR/xsl/#inline-progression-dimension">ipd</a>

 */

public void setIPD(int ipd){

  this.ipd=ipd;

}

Location: Area.java

Content: 

/** 

 * Set traits on this area, copying from an existing traits map.

 * @param traits the map of traits

 */

public void setTraits(Map traits){

  if (traits != null) {

    this.traits=new TreeMap<Integer,Object>(traits);

  }

 else {

    this.traits=null;

  }

}

