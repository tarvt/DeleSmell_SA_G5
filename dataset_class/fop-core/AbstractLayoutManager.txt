Location: AbstractLayoutManager.java

Content: 

/** 

 * Abstract layout manager.

 */

public AbstractLayoutManager(){

}

Location: AbstractLayoutManager.java

Content: 

/** 

 * Abstract layout manager.

 * @param fo the formatting object for this layout manager

 */

public AbstractLayoutManager(FObj fo){

  super(fo);

  markers=fo.getMarkers();

  fobjIter=fo.getChildNodes();

  childLMiter=new LMiter(this);

}

Location: AbstractLayoutManager.java

Content: 

/** 

 * Checks to see if the incoming  {@link Position}is the last one for this LM, and if so, calls {@link #notifyEndOfLayout()} and cleans up.

 * @param pos   the {@link Position} to check

 */

protected void checkEndOfLayout(Position pos){

  if (pos != null && pos.getLM() == this && this.isLast(pos)) {

    notifyEndOfLayout();

    if (!preserveChildrenAtEndOfLayout) {

      childLMs=null;

      curChildLM=null;

      childLMiter=null;

    }

    markers=null;

    LayoutManager lm=this.parentLayoutManager;

    while (!(lm instanceof FlowLayoutManager || lm instanceof PageSequenceLayoutManager)) {

      lm=lm.getParent();

    }

    if (lm instanceof FlowLayoutManager && !preserveChildrenAtEndOfLayout) {

      fobj.clearChildNodes();

      fobjIter=null;

    }

  }

}

Location: AbstractLayoutManager.java

Content: 

/** 

 * Create the LM instances for the children of the formatting object being handled by this LM.

 * @param size the requested number of child LMs

 * @return the list with the preloaded child LMs

 */

protected List<LayoutManager> createChildLMs(int size){

  if (fobjIter == null) {

    return null;

  }

  List<LayoutManager> newLMs=new ArrayList<LayoutManager>(size);

  while (fobjIter.hasNext() && newLMs.size() < size) {

    Object theobj=fobjIter.next();

    if (theobj instanceof FONode) {

      FONode foNode=(FONode)theobj;

      if (foNode instanceof RetrieveMarker) {

        foNode=getPSLM().resolveRetrieveMarker((RetrieveMarker)foNode);

      }

      if (foNode != null) {

        getPSLM().getLayoutManagerMaker().makeLayoutManagers(foNode,newLMs);

      }

    }

  }

  return newLMs;

}

Location: AbstractLayoutManager.java

Content: 

/** 

 * @return the current page viewport 

 */

public PageViewport getCurrentPV(){

  return getPSLM().getCurrentPage().getPageViewport();

}

Location: AbstractLayoutManager.java

Content: 

/** 

 * Return indication if getChildLM will return another LM.

 * @return true if another child LM is still available

 */

protected boolean hasNextChildLM(){

  return childLMiter.hasNext();

}

Location: AbstractLayoutManager.java

Content: 

/** 

 * Indicates whether the given Position is the first area-generating Position of this LM.

 * @param pos the Position (must be one with a position index)

 * @return True if it is the first Position

 */

public boolean isFirst(Position pos){

  verifyNonNullPosition(pos);

  if (pos.getIndex() == this.smallestPosNumberChecked) {

    return true;

  }

 else   if (pos.getIndex() < this.smallestPosNumberChecked) {

    this.smallestPosNumberChecked=pos.getIndex();

    return true;

  }

 else {

    return false;

  }

}

Location: AbstractLayoutManager.java

Content: 

/** 

 * Indicates whether the given Position is the last area-generating Position of this LM.

 * @param pos the Position (must be one with a position index)

 * @return True if it is the last Position

 */

public boolean isLast(Position pos){

  verifyNonNullPosition(pos);

  return (pos.getIndex() == this.lastGeneratedPosition && isFinished());

}

Location: AbstractLayoutManager.java

Content: 

protected IllegalStateException newNoLineAreaDescendantException(){

  return new IllegalStateException("getBaselineOffset called on an object that has no line-area descendant");

}

Location: AbstractLayoutManager.java

Content: 

/** 

 * Notifies the  {@link PageSequenceLayoutManager} that layoutfor this LM has ended.

 */

protected void notifyEndOfLayout(){

  if (fobj != null) {

    getPSLM().notifyEndOfLayout(fobj.getId());

  }

}

Location: AbstractLayoutManager.java

Content: 

/** 

 * Set currently active child layout manager.

 * @param childLM the child layout manager

 */

protected void setCurrentChildLM(LayoutManager childLM){

  curChildLM=childLM;

  childLMiter=new LMiter(this);

  do {

    curChildLM=childLMiter.next();

  }

 while (curChildLM != childLM);

}

Location: AbstractLayoutManager.java

Content: 

/** 

 * Transfers extension attachments from the formatting object to the area.

 * @param targetArea the area to set the extensions on

 */

protected void transferExtensionAttachments(AreaTreeObject targetArea){

  if (fobj.hasExtensionAttachments()) {

    targetArea.setExtensionAttachments(fobj.getExtensionAttachments());

  }

}

Location: AbstractLayoutManager.java

Content: 

/** 

 * Transfers extensions (foreign attributes and extension attachments) from the formatting object to the area.

 * @param targetArea the area to set the extensions on

 */

protected void transferExtensions(AreaTreeObject targetArea){

  transferForeignAttributes(targetArea);

  transferExtensionAttachments(targetArea);

}

Location: AbstractLayoutManager.java

Content: 

/** 

 * Transfers foreign attributes from the formatting object to the area.

 * @param targetArea the area to set the attributes on

 */

protected void transferForeignAttributes(AreaTreeObject targetArea){

  Map<QName,String> atts=fobj.getForeignAttributes();

  targetArea.setForeignAttributes(atts);

}

Location: AbstractLayoutManager.java

Content: 

private void verifyNonNullPosition(Position pos){

  if (pos == null || pos.getIndex() < 0) {

    throw new IllegalArgumentException("Only non-null Positions with an index can be checked");

  }

}

