Location: AbstractIntermediateTest.java

Content: 

/** 

 * Constructor for the test suite that is used for each test file.

 * @param testFile the test file to run

 * @throws IOException if an I/O error occurs while loading the test case

 */

public AbstractIntermediateTest(File testFile) throws IOException {

  this.testFile=testFile;

}

Location: AbstractIntermediateTest.java

Content: 

/** 

 * Builds an intermediate format document from a source file.

 * @param templates the (optional) stylesheet

 * @return the intermediate format document as a DOM

 * @throws Exception if an error occurs while processing the document

 */

protected abstract Document buildIntermediateDocument(Templates templates) throws Exception ;

Location: AbstractIntermediateTest.java

Content: 

/** 

 * Creates a new FOP user agent.

 * @return the user agent

 */

protected FOUserAgent createUserAgent(){

  FOUserAgent userAgent=fopFactory.newFOUserAgent();

  userAgent.getEventBroadcaster().addEventListener(new ConsoleEventListenerForTests(testFile.getName(),EventSeverity.FATAL));

  return userAgent;

}

Location: AbstractIntermediateTest.java

Content: 

/** 

 * Returns the file extension for the intermediate file format.

 * @return the file extension

 */

protected abstract String getIntermediateFileExtension();

Location: AbstractIntermediateTest.java

Content: 

/** 

 * Returns the MIME type for which to test or to mimic for the intermediate format.

 * @return the MIME type

 */

protected String getTargetMIME(){

  return MimeConstants.MIME_PDF;

}

Location: AbstractIntermediateTest.java

Content: 

/** 

 * Parses the intermediate file and renders it back to the intermediate format.

 * @param src the source for the intermediate file

 * @return a DOM Document with the re-created intermediate file

 * @throws Exception if an error occurs while processing the document

 */

protected abstract Document parseAndRenderToIntermediateFormat(Source src) throws Exception ;

Location: AbstractIntermediateTest.java

Content: 

/** 

 * Parses and renders an intermediate format document to a final format.

 * @param src the source document

 * @param out the target output stream

 * @throws Exception if an error occurs while rendering the document

 */

protected abstract void parseAndRender(Source src,OutputStream out) throws Exception ;

Location: AbstractIntermediateTest.java

Content: 

/** 

 * Sets up the output directory.

 */

protected void setupOutputDirectory(){

  String s=System.getProperty("fop.intermediate.outdir");

  if (s != null && s.length() > 0) {

    outputDir=new File(s);

    outputDir.mkdirs();

  }

}

Location: AbstractIntermediateTest.java

Content: 

/** 

 * Tests the area tree parser by running the parsed area tree again through the area tree renderer. The source and result documents are compared to each other.

 * @throws Exception if the test fails

 */

public void testParserToIntermediateFormat() throws Exception {

  validate(intermediate);

  Source src=new DOMSource(intermediate);

  Document doc=parseAndRenderToIntermediateFormat(src);

  if (outputDir != null) {

    File tgtFile=new File(outputDir,testFile.getName() + ".2" + getIntermediateFileExtension());

    testAssistant.saveDOM(doc,tgtFile);

  }

  XMLAssert.assertXMLEqual(testFile.toString(),intermediate,doc);

}

Location: AbstractIntermediateTest.java

Content: 

/** 

 * Tests the area tree parser by sending the parsed area tree to the PDF Renderer. Some errors might be caught by the PDFRenderer.

 * @throws Exception if the test fails

 */

public void testParserToPDF() throws Exception {

  OutputStream out;

  if (outputDir != null) {

    File tgtFile=new File(outputDir,testFile.getName() + ".pdf");

    out=new FileOutputStream(tgtFile);

    out=new BufferedOutputStream(out);

  }

 else {

    out=new NullOutputStream();

  }

  try {

    Source src=new DOMSource(intermediate);

    parseAndRender(src,out);

  }

  finally {

    IOUtils.closeQuietly(out);

  }

}

Location: AbstractIntermediateTest.java

Content: 

/** 

 * Validates the intermediate format file.

 * @param doc the intermediate file

 * @throws IOException if an IO error occurs while loading the schema

 * @throws SAXException if a SAX-related exception (including a validation error) occurs

 */

protected void validate(Document doc) throws SAXException, IOException {

}

