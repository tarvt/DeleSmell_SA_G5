Location: TableCellContainer.java

Content: 

/** 

 * Add cell to current row.

 * @param cell a table cell to add

 * @param firstRow true is first row

 * @throws FOPException if exception occurs

 */

protected void addTableCellChild(TableCell cell,boolean firstRow) throws FOPException {

  int colNumber=cell.getColumnNumber();

  int colSpan=cell.getNumberColumnsSpanned();

  int rowSpan=cell.getNumberRowsSpanned();

  Table t=getTable();

  if (t.hasExplicitColumns()) {

    if (colNumber + colSpan - 1 > t.getNumberOfColumns()) {

      TableEventProducer eventProducer=TableEventProducer.Provider.get(getUserAgent().getEventBroadcaster());

      eventProducer.tooManyCells(this,getLocator());

    }

  }

 else {

    t.ensureColumnNumber(colNumber + colSpan - 1);

    while (pendingSpans.size() < colNumber + colSpan - 1) {

      pendingSpans.add(null);

    }

  }

  if (firstRow) {

    handleCellWidth(cell,colNumber,colSpan);

  }

  if (rowSpan > 1) {

    for (int i=0; i < colSpan; i++) {

      pendingSpans.set(colNumber - 1 + i,new PendingSpan(rowSpan));

    }

  }

  columnNumberManager.signalUsedColumnNumbers(colNumber,colNumber + colSpan - 1);

  t.getRowGroupBuilder().addTableCell(cell);

}

Location: TableCellContainer.java

Content: 

private void handleCellWidth(TableCell cell,int colNumber,int colSpan) throws FOPException {

  Table t=getTable();

  Length colWidth=null;

  if (cell.getWidth().getEnum() != EN_AUTO && colSpan == 1) {

    colWidth=cell.getWidth();

  }

  for (int i=colNumber; i < colNumber + colSpan; ++i) {

    TableColumn col=t.getColumn(i - 1);

    if (colWidth != null) {

      col.setColumnWidth(colWidth);

    }

  }

}

Location: TableCellContainer.java

Content: 

/** 

 * Construct table cell container.

 * @param parent the parent node of the cell container

 */

public TableCellContainer(FONode parent){

  super(parent);

}

