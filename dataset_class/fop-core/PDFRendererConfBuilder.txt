Location: PDFRendererConfBuilder.java

Content: 

public PDFRendererConfBuilder createFilterList(String type,String... filters){

  Element filterListEl=createElement(FILTER_LIST.getName());

  if (type != null) {

    filterListEl.setAttribute("type",type);

  }

  for (  String filter : filters) {

    createTextElement("value",filter,filterListEl);

  }

  return this;

}

Location: PDFRendererConfBuilder.java

Content: 

public PDFRendererConfBuilder disableSRGBColorSpace(boolean disable){

  createTextElement(DISABLE_SRGB_COLORSPACE,String.valueOf(disable));

  return this;

}

Location: PDFRendererConfBuilder.java

Content: 

public PDFRendererConfBuilder endEncryptionParams(){

  accessConf=null;

  return this;

}

Location: PDFRendererConfBuilder.java

Content: 

public PDFRendererConfBuilder(){

  super(MimeConstants.MIME_PDF);

}

Location: PDFRendererConfBuilder.java

Content: 

public PDFRendererConfBuilder setFormXObjectEnabled(boolean b){

  createTextElement(FORM_XOBJECT,String.valueOf(b));

  return this;

}

Location: PDFRendererConfBuilder.java

Content: 

public PDFRendererConfBuilder setOutputProfile(String profile){

  createTextElement(OUTPUT_PROFILE,profile);

  return this;

}

Location: PDFRendererConfBuilder.java

Content: 

public PDFRendererConfBuilder setPDFAMode(String value){

  createTextElement(PDF_A_MODE,value);

  return this;

}

Location: PDFRendererConfBuilder.java

Content: 

public PDFRendererConfBuilder setPDFVersion(String version){

  createTextElement(VERSION,version);

  return this;

}

Location: PDFRendererConfBuilder.java

Content: 

public PDFRendererConfBuilder setPDFXMode(String value){

  createTextElement(PDF_X_MODE,value);

  return this;

}

Location: PDFRendererConfBuilder.java

Content: 

public EncryptionParamsBuilder startEncryptionParams(){

  accessConf=new EncryptionParamsBuilder();

  return accessConf;

}

