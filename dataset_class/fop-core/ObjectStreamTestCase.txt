Location: ObjectStreamTestCase.java

Content: 

@Test(expected=IllegalStateException.class) public void directObjectsAreNotAllowed() throws Exception {

  objectStream.addObject(new MockCompressedObject());

}

Location: ObjectStreamTestCase.java

Content: 

private String getExpectedOutput(){

  int numObs=compressedObjects.size();

  int objectStreamNumber=objectStream.getObjectNumber().getNumber();

  int offsetsLength=9;

  StringBuilder expected=new StringBuilder();

  expected.append("<<\n");

  ObjectStream previous=(ObjectStream)objectStream.get("Extends");

  if (previous != null) {

    expected.append("  /Extends ").append(previous.getObjectNumber()).append(" 0 R\n");

    objectStreamNumber++;

  }

  expected.append("  /Type /ObjStm\n").append("  /N ").append(numObs).append("\n").append("  /First ").append(offsetsLength).append('\n').append("  /Length ").append(OBJECT_CONTENT.length() * 2 + offsetsLength).append('\n').append(">>\n").append("stream\n");

  int offset=0;

  int num=1;

  for (  PDFObject ob : compressedObjects) {

    expected.append(objectStreamNumber + num++).append(' ').append(offset).append('\n');

    offset+=ob.toPDFString().length();

  }

  for (  PDFObject ob : compressedObjects) {

    expected.append(ob.toPDFString());

  }

  expected.append("\nendstream");

  return expected.toString();

}

Location: ObjectStreamTestCase.java

Content: 

@Test(expected=NullPointerException.class) public void nullObjectsAreNotAllowed() throws Exception {

  objectStream.addObject(null);

}

Location: ObjectStreamTestCase.java

Content: 

private void populateObjectStream(){

  for (  MockCompressedObject obj : compressedObjects) {

    pdfDocument.assignObjectNumber(obj);

    objectStream.addObject(obj);

  }

}

Location: ObjectStreamTestCase.java

Content: 

@Test public void testObjectStreamCollection() throws IOException {

  objectStream=new ObjectStream(objectStream);

  pdfDocument.assignObjectNumber(objectStream);

  populateObjectStream();

  testOutput();

}

Location: ObjectStreamTestCase.java

Content: 

@Test public void testSingleObjectStream() throws IOException {

  populateObjectStream();

  testOutput();

}

