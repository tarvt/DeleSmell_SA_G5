Location: CustomFontMetricsMapper.java

Content: 

/** 

 * Construction of this class results in the immediate construction of the underlying  {@link java.awt.Font}.

 * @param fontMetrics the metrics of the custom font

 * @throws FontFormatException if a bad font is loaded

 * @throws IOException if an I/O error occurs

 */

public CustomFontMetricsMapper(final CustomFont fontMetrics) throws FontFormatException, IOException {

  this.typeface=fontMetrics;

  initialize(fontMetrics.getInputStream());

}

Location: CustomFontMetricsMapper.java

Content: 

/** 

 * Construction of this class results in the immediate construction of the underlying  {@link java.awt.Font}.

 * @param fontMetrics the font

 * @param fontSource the font source to access the font

 * @throws FontFormatException if a bad font is loaded

 * @throws IOException if an I/O error occurs

 */

public CustomFontMetricsMapper(final LazyFont fontMetrics,final InputStream fontSource) throws FontFormatException, IOException {

  this.typeface=fontMetrics;

  initialize(fontSource);

}

Location: CustomFontMetricsMapper.java

Content: 

/** 

 * {@inheritDoc} 

 */

public final int getAscender(final int size){

  return typeface.getAscender(size);

}

Location: CustomFontMetricsMapper.java

Content: 

public Rectangle getBoundingBox(int glyphIndex,int size){

  return typeface.getBoundingBox(glyphIndex,size);

}

Location: CustomFontMetricsMapper.java

Content: 

/** 

 * {@inheritDoc} 

 */

public final int getCapHeight(final int size){

  return typeface.getCapHeight(size);

}

Location: CustomFontMetricsMapper.java

Content: 

/** 

 * {@inheritDoc} 

 */

public final int getDescender(final int size){

  return typeface.getDescender(size);

}

Location: CustomFontMetricsMapper.java

Content: 

/** 

 * {@inheritDoc} 

 */

public final String getEmbedFontName(){

  return typeface.getEmbedFontName();

}

Location: CustomFontMetricsMapper.java

Content: 

/** 

 * {@inheritDoc} 

 */

public final String getEncodingName(){

  return null;

}

Location: CustomFontMetricsMapper.java

Content: 

/** 

 * {@inheritDoc} 

 */

public final URI getFontURI(){

  return typeface.getFontURI();

}

Location: CustomFontMetricsMapper.java

Content: 

/** 

 * {@inheritDoc} 

 */

public final Font getFont(final int size){

  if (this.size == size) {

    return font;

  }

  this.size=size / 1000f;

  font=font.deriveFont(this.size);

  return font;

}

Location: CustomFontMetricsMapper.java

Content: 

/** 

 * {@inheritDoc} 

 */

public final String getFullName(){

  return typeface.getFullName();

}

Location: CustomFontMetricsMapper.java

Content: 

/** 

 * {@inheritDoc} 

 */

public final Map getKerningInfo(){

  return typeface.getKerningInfo();

}

Location: CustomFontMetricsMapper.java

Content: 

public Typeface getRealFont(){

  return typeface;

}

Location: CustomFontMetricsMapper.java

Content: 

public int getStrikeoutPosition(int size){

  return typeface.getStrikeoutPosition(size);

}

Location: CustomFontMetricsMapper.java

Content: 

public int getStrikeoutThickness(int size){

  return typeface.getStrikeoutThickness(size);

}

Location: CustomFontMetricsMapper.java

Content: 

public int getUnderlinePosition(int size){

  return typeface.getUnderlinePosition(size);

}

Location: CustomFontMetricsMapper.java

Content: 

public int getUnderlineThickness(int size){

  return typeface.getUnderlineThickness(size);

}

Location: CustomFontMetricsMapper.java

Content: 

/** 

 * {@inheritDoc} 

 */

public final int getWidth(final int i,final int size){

  return typeface.getWidth(i,size);

}

Location: CustomFontMetricsMapper.java

Content: 

/** 

 * {@inheritDoc} 

 */

public final int getXHeight(final int size){

  return typeface.getXHeight(size);

}

Location: CustomFontMetricsMapper.java

Content: 

/** 

 * {@inheritDoc} 

 */

public final boolean hasChar(final char c){

  return font.canDisplay(c);

}

Location: CustomFontMetricsMapper.java

Content: 

/** 

 * {@inheritDoc} 

 */

public final boolean hasKerningInfo(){

  return typeface.hasKerningInfo();

}

Location: CustomFontMetricsMapper.java

Content: 

/** 

 * Loads the java.awt.Font

 * @param inStream

 * @throws FontFormatException

 * @throws IOException

 */

private void initialize(final InputStream inStream) throws FontFormatException, IOException {

  int type=Font.TRUETYPE_FONT;

  if (FontType.TYPE1.equals(typeface.getFontType())) {

    type=TYPE1_FONT;

  }

  this.font=Font.createFont(type,inStream);

  inStream.close();

}

Location: CustomFontMetricsMapper.java

Content: 

/** 

 * {@inheritDoc} 

 */

public boolean isMultiByte(){

  return typeface.isMultiByte();

}

Location: CustomFontMetricsMapper.java

Content: 

/** 

 * {@inheritDoc} 

 */

public final char mapChar(final char c){

  return typeface.mapChar(c);

}

Location: CustomFontMetricsMapper.java

Content: 

/** 

 * {@inheritDoc}

 */

public int[][] performPositioning(CharSequence cs,String script,String language){

  if (typeface instanceof Positionable) {

    return ((Positionable)typeface).performPositioning(cs,script,language);

  }

 else {

    return null;

  }

}

Location: CustomFontMetricsMapper.java

Content: 

/** 

 * {@inheritDoc}

 */

public int[][] performPositioning(CharSequence cs,String script,String language,int fontSize){

  if (typeface instanceof Positionable) {

    return ((Positionable)typeface).performPositioning(cs,script,language,fontSize);

  }

 else {

    return null;

  }

}

Location: CustomFontMetricsMapper.java

Content: 

/** 

 * {@inheritDoc}

 */

public boolean performsPositioning(){

  if (typeface instanceof Positionable) {

    return ((Positionable)typeface).performsPositioning();

  }

 else {

    return false;

  }

}

Location: CustomFontMetricsMapper.java

Content: 

/** 

 * {@inheritDoc}

 */

public boolean performsSubstitution(){

  if (typeface instanceof Substitutable) {

    return ((Substitutable)typeface).performsSubstitution();

  }

 else {

    return false;

  }

}

Location: CustomFontMetricsMapper.java

Content: 

/** 

 * {@inheritDoc}

 */

public CharSequence performSubstitution(CharSequence cs,String script,String language,List associations,boolean retainControls){

  if (typeface instanceof Substitutable) {

    return ((Substitutable)typeface).performSubstitution(cs,script,language,associations,retainControls);

  }

 else {

    return cs;

  }

}

Location: CustomFontMetricsMapper.java

Content: 

/** 

 * {@inheritDoc}

 */

public CharSequence reorderCombiningMarks(CharSequence cs,int[][] gpa,String script,String language,List associations){

  if (typeface instanceof Substitutable) {

    return ((Substitutable)typeface).reorderCombiningMarks(cs,gpa,script,language,associations);

  }

 else {

    return cs;

  }

}

