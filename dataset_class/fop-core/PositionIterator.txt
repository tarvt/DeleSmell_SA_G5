Location: PositionIterator.java

Content: 

/** 

 * @return true if not at end of sub-sequence with same child layout manager 

 */

protected boolean checkNext(){

  LayoutManager lm=getLM(nextObj);

  if (childLM == null) {

    childLM=lm;

  }

 else   if (childLM != lm && lm != null) {

    hasNext=false;

    childLM=null;

    return false;

  }

  return true;

}

Location: PositionIterator.java

Content: 

/** 

 * end (reset) iterator 

 */

protected void endIter(){

  hasNext=false;

  nextObj=null;

  childLM=null;

}

Location: PositionIterator.java

Content: 

/** 

 * @param nextObj next object from which to obtain position

 * @return layout manager

 */

protected LayoutManager getLM(Object nextObj){

  return getPos(nextObj).getLM();

}

Location: PositionIterator.java

Content: 

/** 

 * @return layout manager of next child layout manager or null 

 */

public LayoutManager getNextChildLM(){

  if (childLM == null && nextObj != null) {

    childLM=getLM(nextObj);

    hasNext=true;

  }

  return childLM;

}

Location: PositionIterator.java

Content: 

/** 

 * Default implementation assumes that the passed {@code nextObj} is itself a {@link Position}, and just returns it. Subclasses for which this is not the case, <em>must</em> provide a suitable override this method.

 * @param nextObj next object from which to obtain position

 * @return position of next object.

 */

protected Position getPos(Object nextObj){

  if (nextObj instanceof Position) {

    return (Position)nextObj;

  }

  throw new IllegalArgumentException("Cannot obtain Position from the given object.");

}

Location: PositionIterator.java

Content: 

/** 

 * {@inheritDoc} 

 */

public boolean hasNext(){

  return (hasNext && checkNext());

}

Location: PositionIterator.java

Content: 

private void lookAhead(){

  if (parentIter.hasNext()) {

    hasNext=true;

    nextObj=parentIter.next();

  }

 else {

    hongshuai();

    hasNext=false;

    nextObj=null;

    childLM=null;

  }

}

Location: PositionIterator.java

Content: 

/** 

 * @return peek at next object 

 */

public Object peekNext(){

  return nextObj;

}

Location: PositionIterator.java

Content: 

/** 

 * Construct position iterator.

 * @param parentIter an iterator to use as parent

 */

public PositionIterator(Iterator parentIter){

  this.parentIter=parentIter;

  lookAhead();

}

Location: PositionIterator.java

Content: 

/** 

 * {@inheritDoc} 

 */

public void remove() throws UnsupportedOperationException {

  throw new UnsupportedOperationException("PositionIterator doesn't support remove");

}

