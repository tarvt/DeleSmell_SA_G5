Location: DashedBorderElement.java

Content: 

/** 

 * {@inheritDoc}

 */

public char convert2Char(){

  int key=0;

  key+=data[UP] * UP2;

  key+=data[DOWN] * DOWN2;

  key+=data[LEFT] * LEFT2;

  key+=data[RIGHT] * RIGHT2;

  char ch=map[key];

  if (ch == UNDEFINED) {

    ch=toSolidAndDouble().convert2Char();

  }

  return ch;

}

Location: DashedBorderElement.java

Content: 

/** 

 * Constructs a newly allocated <code>DashedBorderElement</code> object. Fills <code>data</code> using superclass constructor.

 * @param type binary representation of type gives <code>data</code>

 */

public DashedBorderElement(int type){

  super(type);

}

Location: DashedBorderElement.java

Content: 

/** 

 * Merges dashed border element with dashed border element and returns instance of <code>DashedBorderElement</code>.

 * @param dbe instance of <code>DashedBorderElement</code> to merge

 * @return merged border element

 */

private AbstractBorderElement mergeDashed(DashedBorderElement dbe){

  for (int i=0; i < 4; i++) {

    data[i]=Math.max(data[i],dbe.getData(i));

  }

  return this;

}

Location: DashedBorderElement.java

Content: 

/** 

 * Merges dashed border element with instance of solid and double border element, returns instance of <code>SolidAndDoubleBorderElement</code>.

 * @param sdb instance of <code>SolidAndDoubleBorderElement</code> to merge

 * @return merged border element

 */

private AbstractBorderElement mergeSolid(SolidAndDoubleBorderElement sdb){

  AbstractBorderElement e=new SolidAndDoubleBorderElement(EN_SOLID,0);

  for (int i=0; i < 4; i++) {

    e.setData(i,Math.max(data[i],sdb.getData(i)));

  }

  return e;

}

Location: DashedBorderElement.java

Content: 

/** 

 * Merges with border element.

 * @param e instance of AbstractBorderElement

 * @return instance of AbstractBorderElement

 */

public AbstractBorderElement merge(AbstractBorderElement e){

  AbstractBorderElement abe=this;

  if (e instanceof SolidAndDoubleBorderElement) {

    abe=mergeSolid((SolidAndDoubleBorderElement)e);

  }

 else   if (e instanceof DashedBorderElement) {

    abe=mergeDashed((DashedBorderElement)e);

  }

 else {

    abe=e;

  }

  return abe;

}

Location: DashedBorderElement.java

Content: 

/** 

 * Converts dashed border element to <code>SolidAndDoubleBorderElement</code>.

 * @return converted instance of <code>SolidAndDoubleBorderElement</code>

 */

private AbstractBorderElement toSolidAndDouble(){

  AbstractBorderElement e=new SolidAndDoubleBorderElement(EN_SOLID,0);

  for (int i=0; i < 4; i++) {

    e.setData(i,data[i]);

  }

  return e;

}

