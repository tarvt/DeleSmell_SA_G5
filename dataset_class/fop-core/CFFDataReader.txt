Location: CFFDataReader.java

Content: 

public CFFDataReader(){

}

Location: CFFDataReader.java

Content: 

/** 

 * Constructor for the CFF data reader which accepts the CFF byte data as an argument.

 * @param cffDataArray A byte array which holds the CFF data

 */

public CFFDataReader(byte[] cffDataArray) throws IOException {

  cffData=new CFFDataInput(cffDataArray);

  readCFFData();

}

Location: CFFDataReader.java

Content: 

/** 

 * Constructor for the CFF data reader which accepts a FontFileReader object which points to the original font file as an argument.

 * @param fontFile The font file as represented by a FontFileReader object

 */

public CFFDataReader(FontFileReader fontFile) throws IOException {

  cffData=new CFFDataInput(OTFFile.getCFFData(fontFile));

  readCFFData();

}

Location: CFFDataReader.java

Content: 

public CFFDataInput getCFFData(){

  return cffData;

}

Location: CFFDataReader.java

Content: 

/** 

 * Retrieves a number of bytes from the CFF data stream

 * @param offset The offset of the bytes to retrieve

 * @param length The number of bytes to retrieve

 * @return Returns a byte array of requested bytes

 * @throws IOException Throws an IO Exception if an error occurs

 */

private byte[] getCFFOffsetBytes(int offset,int length) throws IOException {

  cffData.setPosition(offset);

  return cffData.readBytes(length);

}

Location: CFFDataReader.java

Content: 

public CFFIndexData getCharStringIndex(){

  return charStringIndex;

}

Location: CFFDataReader.java

Content: 

public List<FontDict> getFDFonts(){

  return fdFonts;

}

Location: CFFDataReader.java

Content: 

public FDSelect getFDSelect(){

  return fdSelect;

}

Location: CFFDataReader.java

Content: 

public CFFIndexData getGlobalIndexSubr(){

  return globalIndexSubr;

}

Location: CFFDataReader.java

Content: 

public byte[] getHeader(){

  return header.clone();

}

Location: CFFDataReader.java

Content: 

public CFFIndexData getLocalIndexSubr(){

  return localIndexSubr;

}

Location: CFFDataReader.java

Content: 

public CFFDataInput getLocalSubrsForGlyph(int glyph) throws IOException {

  FDSelect fontDictionary=getFDSelect();

  if (fontDictionary instanceof Format0FDSelect) {

    Format0FDSelect fdSelect=(Format0FDSelect)fontDictionary;

    int found=fdSelect.getFDIndexes()[glyph];

    FontDict font=getFDFonts().get(found);

    byte[] localSubrData=font.getLocalSubrData().getByteData();

    if (localSubrData != null) {

      return new CFFDataInput(localSubrData);

    }

 else {

      return null;

    }

  }

 else   if (fontDictionary instanceof Format3FDSelect) {

    Format3FDSelect fdSelect=(Format3FDSelect)fontDictionary;

    int index=0;

    for (    int first : fdSelect.getRanges().keySet()) {

      if (first > glyph) {

        break;

      }

      index++;

    }

    FontDict font=getFDFonts().get(index);

    byte[] localSubrsData=font.getLocalSubrData().getByteData();

    if (localSubrsData != null) {

      return new CFFDataInput(localSubrsData);

    }

 else {

      return null;

    }

  }

  return null;

}

Location: CFFDataReader.java

Content: 

public CFFIndexData getNameIndex(){

  return nameIndex;

}

Location: CFFDataReader.java

Content: 

public byte[] getPrivateDictBytes(DICTEntry privateEntry) throws IOException {

  int privateLength=privateEntry.getOperands().get(0).intValue();

  int privateOffset=privateEntry.getOperands().get(1).intValue();

  return getCFFOffsetBytes(privateOffset,privateLength);

}

Location: CFFDataReader.java

Content: 

public Map<String,DICTEntry> getPrivateDict(DICTEntry privateEntry) throws IOException {

  return parseDictData(getPrivateDictBytes(privateEntry));

}

Location: CFFDataReader.java

Content: 

private int getSIDFromGIDFormat(int gid,int format) throws IOException {

  int glyphCount=0;

  while (true) {

    int oldGlyphCount=glyphCount;

    int start=cffData.readSID();

    glyphCount+=((format == 1) ? cffData.readCard8() : cffData.readCard16()) + 1;

    if (gid <= glyphCount) {

      return start + (gid - oldGlyphCount) - 1;

    }

  }

}

Location: CFFDataReader.java

Content: 

/** 

 * Retrieves the SID for the given GID object

 * @param charsetOffset The offset of the charset data

 * @param gid The GID for which to retrieve the SID

 * @return Returns the SID as an integer

 */

public int getSIDFromGID(int charsetOffset,int gid) throws IOException {

  if (gid == 0) {

    return 0;

  }

  cffData.setPosition(charsetOffset);

  int charsetFormat=cffData.readCard8();

switch (charsetFormat) {

case 0:

    cffData.setPosition(cffData.getPosition() + (--gid * 2));

  return cffData.readSID();

case 1:

return getSIDFromGIDFormat(gid,1);

case 2:

return getSIDFromGIDFormat(gid,2);

default :

return 0;

}

}

Location: CFFDataReader.java

Content: 

public CFFIndexData getStringIndex(){

  return stringIndex;

}

Location: CFFDataReader.java

Content: 

private String getString(int sid) throws IOException {

  return new String(stringIndex.getValue(sid - NUM_STANDARD_STRINGS));

}

Location: CFFDataReader.java

Content: 

public LinkedHashMap<String,DICTEntry> getTopDictEntries(){

  return topDict;

}

Location: CFFDataReader.java

Content: 

public CFFIndexData getTopDictIndex(){

  return topDICTIndex;

}

Location: CFFDataReader.java

Content: 

private List<FontDict> parseCIDData() throws IOException {

  List<FontDict> fdFonts=new ArrayList<FontDict>();

  if (topDict.get("ROS") != null) {

    DICTEntry fdArray=topDict.get("FDArray");

    if (fdArray != null) {

      int fdIndex=fdArray.getOperands().get(0).intValue();

      CFFIndexData fontDicts=readIndex(fdIndex);

      for (int i=0; i < fontDicts.getNumObjects(); i++) {

        FontDict newFontDict=new FontDict();

        byte[] fdData=fontDicts.getValue(i);

        Map<String,DICTEntry> fdEntries=parseDictData(fdData);

        newFontDict.setByteData(fontDicts.getValuePosition(i),fontDicts.getValueLength(i));

        DICTEntry fontFDEntry=fdEntries.get("FontName");

        if (fontFDEntry != null) {

          newFontDict.setFontName(getString(fontFDEntry.getOperands().get(0).intValue()));

        }

        DICTEntry privateFDEntry=fdEntries.get("Private");

        if (privateFDEntry != null) {

          newFontDict=setFDData(privateFDEntry,newFontDict);

        }

        fdFonts.add(newFontDict);

      }

    }

  }

  return fdFonts;

}

Location: CFFDataReader.java

Content: 

/** 

 * Parses the dictionary data and returns a map of objects for each entry

 * @param dictData The data for the dictionary data

 * @return Returns a map of type DICTEntry identified by the operand name

 * @throws IOException Throws an IO Exception if an error occurs

 */

public LinkedHashMap<String,DICTEntry> parseDictData(byte[] dictData) throws IOException {

  LinkedHashMap<String,DICTEntry> dictEntries=new LinkedHashMap<String,DICTEntry>();

  List<Number> operands=new ArrayList<Number>();

  List<Integer> operandLengths=new ArrayList<Integer>();

  int lastOperandLength=0;

  for (int i=0; i < dictData.length; i++) {

    int readByte=dictData[i] & 0xFF;

    if (readByte < 28) {

      int[] operator=new int[(readByte == DOUBLE_BYTE_OPERATOR) ? 2 : 1];

      if (readByte == DOUBLE_BYTE_OPERATOR) {

        operator[0]=dictData[i];

        operator[1]=dictData[i + 1];

        i++;

      }

 else {

        operator[0]=dictData[i];

      }

      String operatorName="";

      CFFOperator tempOp=null;

      if (operator.length > 1) {

        tempOp=CFFOperator.getOperator(new CFFOperator.Key(operator[0],operator[1]));

      }

 else {

        tempOp=CFFOperator.getOperator(new CFFOperator.Key(operator[0]));

      }

      if (tempOp != null) {

        operatorName=tempOp.getName();

      }

      DICTEntry newEntry=new DICTEntry();

      newEntry.setOperator(operator);

      newEntry.setOperands(new ArrayList<Number>(operands));

      newEntry.setOperatorName(operatorName);

      newEntry.setOffset(i - lastOperandLength);

      newEntry.setOperandLength(lastOperandLength);

      newEntry.setOperandLengths(new ArrayList<Integer>(operandLengths));

      byte[] byteData=new byte[lastOperandLength + operator.length];

      System.arraycopy(dictData,i - operator.length - (lastOperandLength - 1),byteData,0,operator.length + lastOperandLength);

      newEntry.setByteData(byteData);

      dictEntries.put(operatorName,newEntry);

      operands.clear();

      operandLengths.clear();

      lastOperandLength=0;

    }

 else {

      if (readByte >= 32 && readByte <= 246) {

        operands.add(readByte - 139);

        lastOperandLength+=1;

        operandLengths.add(1);

      }

 else       if (readByte >= 247 && readByte <= 250) {

        operands.add((readByte - 247) * 256 + (dictData[i + 1] & 0xFF) + 108);

        lastOperandLength+=2;

        operandLengths.add(2);

        i++;

      }

 else       if (readByte >= 251 && readByte <= 254) {

        operands.add(-(readByte - 251) * 256 - (dictData[i + 1] & 0xFF) - 108);

        lastOperandLength+=2;

        operandLengths.add(2);

        i++;

      }

 else       if (readByte == 28) {

        operands.add((dictData[i + 1] & 0xFF) << 8 | (dictData[i + 2] & 0xFF));

        lastOperandLength+=3;

        operandLengths.add(3);

        i+=2;

      }

 else       if (readByte == 29) {

        operands.add((dictData[i + 1] & 0xFF) << 24 | (dictData[i + 2] & 0xFF) << 16 | (dictData[i + 3] & 0xFF) << 8 | (dictData[i + 4] & 0xFF));

        lastOperandLength+=5;

        operandLengths.add(5);

        i+=4;

      }

 else       if (readByte == 30) {

        boolean terminatorFound=false;

        StringBuilder realNumber=new StringBuilder();

        int byteCount=1;

        do {

          byte nibblesByte=dictData[++i];

          byteCount++;

          terminatorFound=readNibble(realNumber,(nibblesByte >> 4) & 0x0F);

          if (!terminatorFound) {

            terminatorFound=readNibble(realNumber,nibblesByte & 0x0F);

          }

        }

 while (!terminatorFound);

        operands.add(Double.valueOf(realNumber.toString()));

        lastOperandLength+=byteCount;

        operandLengths.add(byteCount);

      }

    }

  }

  return dictEntries;

}

Location: CFFDataReader.java

Content: 

private void readCFFData() throws IOException {

  header=readHeader();

  nameIndex=readIndex();

  topDICTIndex=readIndex();

  topDict=parseDictData(topDICTIndex.getData());

  stringIndex=readIndex();

  globalIndexSubr=readIndex();

  charStringIndex=readCharStringIndex();

  encoding=readEncoding();

  fdSelect=readFDSelect();

  localIndexSubr=readLocalIndexSubrs();

  fdFonts=parseCIDData();

}

Location: CFFDataReader.java

Content: 

/** 

 * Parses the char string index from the CFF byte data

 * @return Returns the char string index object

 * @throws IOException Throws an IO Exception if an error occurs

 */

public CFFIndexData readCharStringIndex() throws IOException {

  int offset=topDict.get("CharStrings").getOperands().get(0).intValue();

  cffData.setPosition(offset);

  return readIndex();

}

Location: CFFDataReader.java

Content: 

private CustomEncoding readEncoding() throws IOException {

  CustomEncoding foundEncoding=null;

  if (topDict.get("Encoding") != null) {

    int offset=topDict.get("Encoding").getOperands().get(0).intValue();

    if (offset != 0 && offset != 1) {

      int format=cffData.readCard8();

      int numEntries=cffData.readCard8();

switch (format) {

case 0:

        foundEncoding=readFormat0Encoding(format,numEntries);

      break;

case 1:

    foundEncoding=readFormat1Encoding(format,numEntries);

  break;

default :

break;

}

}

}

return foundEncoding;

}

Location: CFFDataReader.java

Content: 

private FDSelect readFDSelect() throws IOException {

  FDSelect fdSelect=null;

  DICTEntry fdSelectEntry=topDict.get("FDSelect");

  if (fdSelectEntry != null) {

    int fdOffset=fdSelectEntry.getOperands().get(0).intValue();

    cffData.setPosition(fdOffset);

    int format=cffData.readCard8();

switch (format) {

case 0:

      fdSelect=readFormat0FDSelect();

    break;

case 3:

  fdSelect=readFormat3FDSelect();

break;

default :

}

}

return fdSelect;

}

Location: CFFDataReader.java

Content: 

private Format0Encoding readFormat0Encoding(int format,int numEntries) throws IOException {

  Format0Encoding newEncoding=new Format0Encoding();

  newEncoding.setFormat(format);

  newEncoding.setNumEntries(numEntries);

  int[] codes=new int[numEntries];

  for (int i=0; i < numEntries; i++) {

    codes[i]=cffData.readCard8();

  }

  newEncoding.setCodes(codes);

  return newEncoding;

}

Location: CFFDataReader.java

Content: 

private Format0FDSelect readFormat0FDSelect() throws IOException {

  Format0FDSelect newFDs=new Format0FDSelect();

  newFDs.setFormat(0);

  int glyphCount=charStringIndex.getNumObjects();

  int[] fds=new int[glyphCount];

  for (int i=0; i < glyphCount; i++) {

    fds[i]=cffData.readCard8();

  }

  newFDs.setFDIndexes(fds);

  return newFDs;

}

Location: CFFDataReader.java

Content: 

private Format1Encoding readFormat1Encoding(int format,int numEntries) throws IOException {

  Format1Encoding newEncoding=new Format1Encoding();

  newEncoding.setFormat(format);

  newEncoding.setNumEntries(numEntries);

  Map<Integer,Integer> ranges=new LinkedHashMap<Integer,Integer>();

  for (int i=0; i < numEntries; i++) {

    int first=cffData.readCard8();

    int left=cffData.readCard8();

    ranges.put(first,left);

  }

  newEncoding.setRanges(ranges);

  return newEncoding;

}

Location: CFFDataReader.java

Content: 

private Format3FDSelect readFormat3FDSelect() throws IOException {

  Format3FDSelect newFDs=new Format3FDSelect();

  newFDs.setFormat(3);

  int rangeCount=cffData.readCard16();

  newFDs.setRangeCount(rangeCount);

  Map<Integer,Integer> ranges=new LinkedHashMap<Integer,Integer>();

  for (int i=0; i < rangeCount; i++) {

    int first=cffData.readCard16();

    int fd=cffData.readCard8();

    ranges.put(first,fd);

  }

  newFDs.setRanges(ranges);

  newFDs.setSentinelGID(cffData.readCard16());

  return newFDs;

}

Location: CFFDataReader.java

Content: 

private byte[] readHeader() throws IOException {

  byte[] fixedHeader=cffData.readBytes(4);

  int hdrSize=(fixedHeader[2] & 0xFF);

  byte[] extra=cffData.readBytes(hdrSize - 4);

  byte[] header=new byte[hdrSize];

  for (int i=0; i < fixedHeader.length; i++) {

    header[i]=fixedHeader[i];

  }

  for (int i=4; i < extra.length; i++) {

    header[i]=extra[i - 4];

  }

  return header;

}

Location: CFFDataReader.java

Content: 

private CFFIndexData readIndex() throws IOException {

  return readIndex(cffData);

}

Location: CFFDataReader.java

Content: 

/** 

 * Reads an index from the current position of the CFFDataInput object

 * @param input The object holding the CFF byte data

 * @return Returns an object representing the index

 * @throws IOException Throws an IO Exception if an error occurs

 */

public CFFIndexData readIndex(CFFDataInput input) throws IOException {

  CFFIndexData nameIndex=new CFFIndexData();

  if (input != null) {

    int origPos=input.getPosition();

    nameIndex.parseIndexHeader(input);

    int tableSize=input.getPosition() - origPos;

    nameIndex.setByteData(input.getPosition() - tableSize,tableSize);

  }

  return nameIndex;

}

Location: CFFDataReader.java

Content: 

/** 

 * Reads a CFF index object are the specified offset position

 * @param offset The position of the index object to read

 * @return Returns an object representing the index

 * @throws IOException Throws an IO Exception if an error occurs

 */

public CFFIndexData readIndex(int offset) throws IOException {

  cffData.setPosition(offset);

  return readIndex();

}

Location: CFFDataReader.java

Content: 

private CFFIndexData readLocalIndexSubrs() throws IOException {

  CFFIndexData localSubrs=null;

  DICTEntry privateEntry=topDict.get("Private");

  if (privateEntry != null) {

    int length=privateEntry.getOperands().get(0).intValue();

    int offset=privateEntry.getOperands().get(1).intValue();

    cffData.setPosition(offset);

    byte[] privateData=cffData.readBytes(length);

    Map<String,DICTEntry> privateDict=parseDictData(privateData);

    DICTEntry localSubrsEntry=privateDict.get("Subrs");

    if (localSubrsEntry != null) {

      int localOffset=offset + localSubrsEntry.getOperands().get(0).intValue();

      cffData.setPosition(localOffset);

      localSubrs=readIndex();

    }

  }

  return localSubrs;

}

Location: CFFDataReader.java

Content: 

private boolean readNibble(StringBuilder realNumber,int nibble){

  if (nibble <= 0x9) {

    realNumber.append(nibble);

  }

 else {

switch (nibble) {

case 0xa:

      realNumber.append(".");

    break;

case 0xb:

  realNumber.append("E");

break;

case 0xc:

realNumber.append("E-");

break;

case 0xd:

break;

case 0xe:

realNumber.append("-");

break;

case 0xf:

return true;

default :

throw new AssertionError("Unexpected nibble value");

}

}

return false;

}

Location: CFFDataReader.java

Content: 

private FontDict setFDData(DICTEntry privateFDEntry,FontDict newFontDict) throws IOException {

  int privateFDLength=privateFDEntry.getOperands().get(0).intValue();

  int privateFDOffset=privateFDEntry.getOperands().get(1).intValue();

  cffData.setPosition(privateFDOffset);

  byte[] privateDict=cffData.readBytes(privateFDLength);

  newFontDict.setPrivateDictData(privateFDOffset,privateFDLength);

  Map<String,DICTEntry> privateEntries=parseDictData(privateDict);

  DICTEntry subroutines=privateEntries.get("Subrs");

  if (subroutines != null) {

    CFFIndexData localSubrs=readIndex(privateFDOffset + subroutines.getOperands().get(0).intValue());

    newFontDict.setLocalSubrData(localSubrs);

  }

 else {

    newFontDict.setLocalSubrData(new CFFIndexData());

  }

  return newFontDict;

}

