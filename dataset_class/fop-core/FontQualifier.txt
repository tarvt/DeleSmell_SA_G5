Location: FontQualifier.java

Content: 

/** 

 * Returns the highest priority matching font triplet found in a given font info

 * @param fontInfo the font info

 * @return the highest priority matching font triplet

 */

protected FontTriplet bestMatch(FontInfo fontInfo){

  List<FontTriplet> matchingTriplets=match(fontInfo);

  FontTriplet bestTriplet=null;

  if (matchingTriplets.size() == 1) {

    bestTriplet=matchingTriplets.get(0);

  }

 else {

    for (    Object matchingTriplet : matchingTriplets) {

      FontTriplet triplet=(FontTriplet)matchingTriplet;

      if (bestTriplet == null) {

        bestTriplet=triplet;

      }

 else {

        int priority=triplet.getPriority();

        if (priority < bestTriplet.getPriority()) {

          bestTriplet=triplet;

        }

      }

    }

  }

  return bestTriplet;

}

Location: FontQualifier.java

Content: 

/** 

 * Default constructor

 */

public FontQualifier(){

}

Location: FontQualifier.java

Content: 

/** 

 * @return true if this rule has a font style

 */

public boolean hasFontStyle(){

  return this.fontStyleAttributeValue != null;

}

Location: FontQualifier.java

Content: 

/** 

 * @return true if this rule has a font weight

 */

public boolean hasFontWeight(){

  return this.fontWeightAttributeValue != null;

}

Location: FontQualifier.java

Content: 

/** 

 * Returns a list of matching font triplet found in a given font info

 * @param fontInfo the font info

 * @return a list of matching font triplets

 */

protected List<FontTriplet> match(FontInfo fontInfo){

  AttributeValue fontFamilyValue=getFontFamily();

  AttributeValue weightValue=getFontWeight();

  AttributeValue styleValue=getFontStyle();

  List<FontTriplet> matchingTriplets=new java.util.ArrayList<FontTriplet>();

  for (  Object aFontFamilyValue : fontFamilyValue) {

    String fontFamilyString=(String)aFontFamilyValue;

    Map<FontTriplet,String> triplets=fontInfo.getFontTriplets();

    if (triplets != null) {

      Set<FontTriplet> tripletSet=triplets.keySet();

      for (      Object aTripletSet : tripletSet) {

        FontTriplet triplet=(FontTriplet)aTripletSet;

        String fontName=triplet.getName();

        if (fontFamilyString.toLowerCase().equals(fontName.toLowerCase())) {

          boolean weightMatched=false;

          int fontWeight=triplet.getWeight();

          for (          Object weightObj : weightValue) {

            if (weightObj instanceof FontWeightRange) {

              FontWeightRange intRange=(FontWeightRange)weightObj;

              if (intRange.isWithinRange(fontWeight)) {

                weightMatched=true;

              }

            }

 else             if (weightObj instanceof String) {

              String fontWeightString=(String)weightObj;

              int fontWeightValue=FontUtil.parseCSS2FontWeight(fontWeightString);

              if (fontWeightValue == fontWeight) {

                weightMatched=true;

              }

            }

 else             if (weightObj instanceof Integer) {

              Integer fontWeightInteger=(Integer)weightObj;

              int fontWeightValue=fontWeightInteger;

              if (fontWeightValue == fontWeight) {

                weightMatched=true;

              }

            }

          }

          boolean styleMatched=false;

          String fontStyleString=triplet.getStyle();

          for (          Object aStyleValue : styleValue) {

            String style=(String)aStyleValue;

            if (fontStyleString.equals(style)) {

              styleMatched=true;

            }

          }

          if (weightMatched && styleMatched) {

            matchingTriplets.add(triplet);

          }

        }

      }

    }

  }

  return matchingTriplets;

}

Location: FontQualifier.java

Content: 

/** 

 * Sets the font weight

 * @param fontWeight the font weight

 */

public void setFontWeight(String fontWeight){

  AttributeValue fontWeightAttribute=AttributeValue.valueOf(fontWeight);

  if (fontWeightAttribute != null) {

    for (    Object weightObj : fontWeightAttribute) {

      if (weightObj instanceof String) {

        String weightString=((String)weightObj).trim();

        try {

          FontUtil.parseCSS2FontWeight(weightString);

        }

 catch (        IllegalArgumentException ex) {

          log.error("Invalid font-weight value '" + weightString + "'");

          return;

        }

      }

    }

    this.fontWeightAttributeValue=fontWeightAttribute;

  }

}

