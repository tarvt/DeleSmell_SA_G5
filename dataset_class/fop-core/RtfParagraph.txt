Location: RtfParagraph.java

Content: 

private void closeCurrentHyperLink() throws IOException {

  if (hyperlink != null) {

    hyperlink.close();

  }

}

Location: RtfParagraph.java

Content: 

private void closeCurrentText() throws IOException {

  if (text != null) {

    text.close();

  }

}

Location: RtfParagraph.java

Content: 

/** 

 * true if we must write a group mark around this paragraph TODO is this correct, study interaction with mustWriteAttributes() <-- On implementation i have noticed if the groupmark set, the format attributes are only for this content, i think this implementation is ok

 */

private boolean mustWriteGroupMark(){

  return getChildCount() > 0;

}

Location: RtfParagraph.java

Content: 

/** 

 * Creates a new hyperlink.

 * @param str string containing the hyperlink text

 * @param attr attributes of new hyperlink

 * @return the new RtfHyperLink object

 * @throws IOException for I/O problems

 */

public RtfHyperLink newHyperLink(String str,RtfAttributes attr) throws IOException {

  hyperlink=new RtfHyperLink(this,writer,str,attr);

  return hyperlink;

}

Location: RtfParagraph.java

Content: 

/** 

 * add a line break

 * @throws IOException for I/O problems

 */

public void newLineBreak() throws IOException {

  new RtfLineBreak(this,writer);

}

Location: RtfParagraph.java

Content: 

/** 

 * add a page break

 * @throws IOException for I/O problems

 */

public void newPageBreak() throws IOException {

  writeForBreak=true;

  new RtfPageBreak(this,writer);

}

Location: RtfParagraph.java

Content: 

/** 

 * Add a page number

 * @return new RtfPageNumber object

 * @throws IOException for I/O problems

 */

public RtfPageNumber newPageNumber() throws IOException {

  pageNumber=new RtfPageNumber(this,writer);

  return pageNumber;

}

Location: RtfParagraph.java

Content: 

/** 

 * Added by Boris POUDEROUS on 2002/07/09

 * @param id string containing the citation text

 * @return the new RtfPageNumberCitation object

 * @throws IOException for I/O problems

 */

public RtfPageNumberCitation newPageNumberCitation(String id) throws IOException {

  pageNumberCitation=new RtfPageNumberCitation(this,writer,id);

  return pageNumberCitation;

}

Location: RtfParagraph.java

Content: 

/** 

 * Close current text run if any and start a new one with default attributes

 * @param str if not null, added to the RtfText created

 * @return the new RtfText object

 * @throws IOException for I/O problems

 */

public RtfText newText(String str) throws IOException {

  return newText(str,null);

}

Location: RtfParagraph.java

Content: 

/** 

 * Close current text run if any and start a new one

 * @param str if not null, added to the RtfText created

 * @param attr attributes of the text

 * @return the new RtfText object

 * @throws IOException for I/O problems

 */

public RtfText newText(String str,RtfAttributes attr) throws IOException {

  closeAll();

  text=new RtfText(this,writer,str,attr);

  return text;

}

Location: RtfParagraph.java

Content: 

/** 

 * Depending on RtfOptions, do not emit any RTF for empty paragraphs

 * @return true if RTF should be written

 */

protected boolean okToWriteRtf(){

  boolean result=super.okToWriteRtf();

  if (parent.getOptions().ignoreEmptyParagraphs() && getChildCount() == 0) {

    result=false;

  }

  return result;

}

Location: RtfParagraph.java

Content: 

/** 

 * Create an RTF paragraph as a child of given container with default attributes 

 */

RtfParagraph(IRtfParagraphContainer parent,Writer w) throws IOException {

  super((RtfContainer)parent,w);

}

Location: RtfParagraph.java

Content: 

/** 

 * Create an RTF paragraph as a child of given container with given attributes 

 */

RtfParagraph(IRtfParagraphContainer parent,Writer w,RtfAttributes attr) throws IOException {

  super((RtfContainer)parent,w,attr);

}

Location: RtfParagraph.java

Content: 

/** 

 * Set the keepn attribute for this paragraph 

 */

public void setKeepn(){

  this.keepn=true;

}

Location: RtfParagraph.java

Content: 

/** 

 * Force reset properties 

 */

public void setResetProperties(){

  this.resetProperties=true;

}

