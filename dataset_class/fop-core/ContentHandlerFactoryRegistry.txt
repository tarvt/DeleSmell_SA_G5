Location: ContentHandlerFactoryRegistry.java

Content: 

/** 

 * Add an ContentHandlerFactory. The instance is inspected to find out what it supports.

 * @param factory the ContentHandlerFactory instance

 */

public void addContentHandlerFactory(ContentHandlerFactory factory){

  String[] ns=factory.getSupportedNamespaces();

  for (  String n : ns) {

    factories.put(n,factory);

  }

}

Location: ContentHandlerFactoryRegistry.java

Content: 

/** 

 * Add an XML handler. The handler itself is inspected to find out what it supports.

 * @param classname the fully qualified class name

 */

public void addContentHandlerFactory(String classname){

  try {

    ContentHandlerFactory factory=(ContentHandlerFactory)Class.forName(classname).getDeclaredConstructor().newInstance();

    addContentHandlerFactory(factory);

  }

 catch (  ClassNotFoundException e) {

    throw new IllegalArgumentException("Could not find " + classname);

  }

catch (  InstantiationException e) {

    throw new IllegalArgumentException("Could not instantiate " + classname);

  }

catch (  IllegalAccessException e) {

    throw new IllegalArgumentException("Could not access " + classname);

  }

catch (  ClassCastException e) {

    throw new IllegalArgumentException(classname + " is not an " + ContentHandlerFactory.class.getName());

  }

catch (  NoSuchMethodException e) {

    throw new IllegalArgumentException(e);

  }

catch (  InvocationTargetException e) {

    throw new IllegalArgumentException(e);

  }

}

Location: ContentHandlerFactoryRegistry.java

Content: 

/** 

 * Default constructor.

 */

public ContentHandlerFactoryRegistry(){

  discover();

}

Location: ContentHandlerFactoryRegistry.java

Content: 

/** 

 * Discovers ContentHandlerFactory implementations through the classpath and dynamically registers them.

 */

private void discover(){

  Iterator providers=Service.providers(ContentHandlerFactory.class);

  if (providers != null) {

    while (providers.hasNext()) {

      ContentHandlerFactory factory=(ContentHandlerFactory)providers.next();

      try {

        if (log.isDebugEnabled()) {

          log.debug("Dynamically adding ContentHandlerFactory: " + factory.getClass().getName());

        }

        addContentHandlerFactory(factory);

      }

 catch (      IllegalArgumentException e) {

        log.error("Error while adding ContentHandlerFactory",e);

      }

    }

  }

}

Location: ContentHandlerFactoryRegistry.java

Content: 

/** 

 * Retrieves a ContentHandlerFactory instance of a given namespace URI.

 * @param namespaceURI the namespace to be handled.

 * @return the ContentHandlerFactory or null, if no suitable instance is available.

 */

public ContentHandlerFactory getFactory(String namespaceURI){

  ContentHandlerFactory factory=(ContentHandlerFactory)factories.get(namespaceURI);

  return factory;

}

