Location: ConditionalPageMasterReference.java

Content: 

/** 

 * Create a ConditionalPageMasterReference instance that is a child of the given  {@link FONode}.

 * @param parent {@link FONode} that is the parent of this object

 */

public ConditionalPageMasterReference(FONode parent){

  super(parent);

}

Location: ConditionalPageMasterReference.java

Content: 

private RepeatablePageMasterAlternatives getConcreteParent(){

  return (RepeatablePageMasterAlternatives)parent;

}

Location: ConditionalPageMasterReference.java

Content: 

/** 

 * Get the value for the <code>master-reference</code> property.

 * @return the "master-reference" property

 */

public SimplePageMaster getMaster(){

  return master;

}

Location: ConditionalPageMasterReference.java

Content: 

/** 

 * Get the value for the <code>page-position</code> property.

 * @return the page-position property value

 */

public int getPagePosition(){

  return this.pagePosition;

}

Location: ConditionalPageMasterReference.java

Content: 

/** 

 * Check if the conditions for this reference are met. checks the page number and emptyness to determine if this matches.

 * @param isOddPage True if page number odd

 * @param isFirstPage True if page is first page

 * @param isLastPage True if page is last page

 * @param isBlankPage True if page is blank

 * @return True if the conditions for this reference are met

 */

protected boolean isValid(boolean isOddPage,boolean isFirstPage,boolean isLastPage,boolean isBlankPage){

  return ((pagePosition == EN_ANY || (pagePosition == EN_FIRST && isFirstPage) || (pagePosition == EN_LAST && isLastPage) || (pagePosition == EN_ONLY && (isFirstPage && isLastPage)) || (pagePosition == EN_REST && !(isFirstPage || isLastPage))) && (oddOrEven == EN_ANY || (oddOrEven == EN_ODD && isOddPage) || (oddOrEven == EN_EVEN && !isOddPage)) && (blankOrNotBlank == EN_ANY || (blankOrNotBlank == EN_BLANK && isBlankPage) || (blankOrNotBlank == EN_NOT_BLANK && !isBlankPage)));

}

