Location: PDFUATestCase.java

Content: 

private String getObj(Collection<StringBuilder> objs,String x){

  for (  StringBuilder s : objs) {

    if (s.toString().contains(x)) {

      return s.toString();

    }

  }

  return null;

}

Location: PDFUATestCase.java

Content: 

@Test public void testPDF() throws IOException {

  PDFDocument doc=new PDFDocument("");

  doc.getRoot().makeTagged();

  doc.getRoot().setStructTreeRoot(new PDFStructTreeRoot(null));

  doc.getInfo().setTitle("title");

  doc.getProfile().setPDFUAMode(PDFUAMode.PDFUA_1);

  PDFResources resources=new PDFResources(doc);

  doc.addObject(resources);

  PDFResourceContext context=new PDFResourceContext(resources);

  ByteArrayOutputStream out=new ByteArrayOutputStream();

  PDFContentGenerator gen=new PDFContentGenerator(doc,out,context);

  Rectangle2D.Float f=new Rectangle2D.Float();

  PDFPage page=new PDFPage(resources,0,f,f,f,f);

  doc.addImage(context,new BitmapImage("",1,1,new byte[0],null));

  doc.registerObject(page);

  gen.flushPDFDoc();

  doc.outputTrailer(out);

  Collection<StringBuilder> objs=PDFLinearizationTestCase.readObjs(new ByteArrayInputStream(out.toByteArray())).values();

  Assert.assertTrue(getObj(objs,"/Type /Catalog").contains("/ViewerPreferences << /DisplayDocTitle true >>"));

}

Location: PDFUATestCase.java

Content: 

@Test public void testXMP() throws IOException {

  PDFDocument doc=new PDFDocument("");

  doc.getProfile().setPDFUAMode(PDFUAMode.PDFUA_1);

  Metadata metadata=PDFMetadata.createXMPFromPDFDocument(doc);

  StringBuilder sb=new StringBuilder();

  Iterator i=metadata.iterator();

  while (i.hasNext()) {

    QName k=(QName)i.next();

    sb.append(k + ": " + metadata.getProperty(k).getValue()+ "\n");

  }

  String s=sb.toString();

  Assert.assertTrue(s,s.contains("pdfuaid:part: 1"));

}

