Location: PDFEncryptionParams.java

Content: 

/** 

 * Indicates whether Metadata should be encrypted.

 * @return true or false

 */

public boolean encryptMetadata(){

  return encryptMetadata;

}

Location: PDFEncryptionParams.java

Content: 

/** 

 * Returns the encryption length.

 * @return the encryption length

 */

public int getEncryptionLengthInBits(){

  return encryptionLengthInBits;

}

Location: PDFEncryptionParams.java

Content: 

/** 

 * Returns the owner password.

 * @return the owner password, an empty string if no password applies

 */

public String getOwnerPassword(){

  return ownerPassword;

}

Location: PDFEncryptionParams.java

Content: 

/** 

 * Returns the user password.

 * @return the user password, an empty string if no password applies

 */

public String getUserPassword(){

  return userPassword;

}

Location: PDFEncryptionParams.java

Content: 

/** 

 * Indicates whether revision 3 extracting text and graphics is allowed.

 * @return true if revision 3 extracting text and graphics is allowed

 */

public boolean isAllowAccessContent(){

  return allowAccessContent;

}

Location: PDFEncryptionParams.java

Content: 

/** 

 * Indicates whether revision 3 assembling document is allowed.

 * @return true if revision 3 assembling document is allowed

 */

public boolean isAllowAssembleDocument(){

  return allowAssembleDocument;

}

Location: PDFEncryptionParams.java

Content: 

/** 

 * Indicates whether copying content is allowed.

 * @return true if copying is allowed

 */

public boolean isAllowCopyContent(){

  return allowCopyContent;

}

Location: PDFEncryptionParams.java

Content: 

/** 

 * Indicates whether editing annotations is allowed.

 * @return true is editing annotations is allowed

 */

public boolean isAllowEditAnnotations(){

  return allowEditAnnotations;

}

Location: PDFEncryptionParams.java

Content: 

/** 

 * Indicates whether editing content is allowed.

 * @return true if editing content is allowed

 */

public boolean isAllowEditContent(){

  return allowEditContent;

}

Location: PDFEncryptionParams.java

Content: 

/** 

 * Indicates whether revision 3 filling in forms is allowed.

 * @return true if revision 3 filling in forms is allowed

 */

public boolean isAllowFillInForms(){

  return allowFillInForms;

}

Location: PDFEncryptionParams.java

Content: 

/** 

 * Indicates whether printing is allowed.

 * @return true if printing is allowed

 */

public boolean isAllowPrint(){

  return allowPrint;

}

Location: PDFEncryptionParams.java

Content: 

/** 

 * Indicates whether revision 3 printing to high quality is allowed.

 * @return true if revision 3 printing to high quality is allowed

 */

public boolean isAllowPrintHq(){

  return allowPrintHq;

}

Location: PDFEncryptionParams.java

Content: 

/** 

 * Default constructor initializing to default values.

 */

public PDFEncryptionParams(){

}

Location: PDFEncryptionParams.java

Content: 

/** 

 * Creates a copy of the given encryption parameters.

 * @param source source encryption parameters

 */

public PDFEncryptionParams(PDFEncryptionParams source){

  setUserPassword(source.getUserPassword());

  setOwnerPassword(source.getOwnerPassword());

  setAllowPrint(source.isAllowPrint());

  setAllowCopyContent(source.isAllowCopyContent());

  setAllowEditContent(source.isAllowEditContent());

  setAllowEditAnnotations(source.isAllowEditAnnotations());

  setAllowAssembleDocument(source.isAllowAssembleDocument());

  setAllowAccessContent(source.isAllowAccessContent());

  setAllowFillInForms(source.isAllowFillInForms());

  setAllowPrintHq(source.isAllowPrintHq());

  setEncryptionLengthInBits(source.getEncryptionLengthInBits());

  encryptMetadata=source.encryptMetadata();

}

Location: PDFEncryptionParams.java

Content: 

/** 

 * Creates a new instance.

 * @param userPassword the user password

 * @param ownerPassword the owner password

 * @param allowPrint true if printing is allowed

 * @param allowCopyContent true if copying content is allowed

 * @param allowEditContent true if editing content is allowed

 * @param allowEditAnnotations true if editing annotations is allowed

 */

public PDFEncryptionParams(String userPassword,String ownerPassword,boolean allowPrint,boolean allowCopyContent,boolean allowEditContent,boolean allowEditAnnotations,boolean encryptMetadata){

  setUserPassword(userPassword);

  setOwnerPassword(ownerPassword);

  setAllowPrint(allowPrint);

  setAllowCopyContent(allowCopyContent);

  setAllowEditContent(allowEditContent);

  setAllowEditAnnotations(allowEditAnnotations);

  this.encryptMetadata=encryptMetadata;

}

Location: PDFEncryptionParams.java

Content: 

/** 

 * Sets whether revision 3 extracting text and graphics is allowed.

 * @param allowAccessContent true if revision 3 extracting text and graphics is allowed

 */

public void setAllowAccessContent(boolean allowAccessContent){

  this.allowAccessContent=allowAccessContent;

}

Location: PDFEncryptionParams.java

Content: 

/** 

 * Sets whether revision 3 assembling document is allowed.

 * @param allowAssembleDocument true if revision 3 assembling document is allowed

 */

public void setAllowAssembleDocument(boolean allowAssembleDocument){

  this.allowAssembleDocument=allowAssembleDocument;

}

Location: PDFEncryptionParams.java

Content: 

/** 

 * Sets the permission for copying content.

 * @param allowCopyContent true if copying content is allowed

 */

public void setAllowCopyContent(boolean allowCopyContent){

  this.allowCopyContent=allowCopyContent;

}

Location: PDFEncryptionParams.java

Content: 

/** 

 * Sets the permission for editing annotations.

 * @param allowEditAnnotations true if editing annotations is allowed

 */

public void setAllowEditAnnotations(boolean allowEditAnnotations){

  this.allowEditAnnotations=allowEditAnnotations;

}

Location: PDFEncryptionParams.java

Content: 

/** 

 * Sets the permission for editing content.

 * @param allowEditContent true if editing annotations is allowed

 */

public void setAllowEditContent(boolean allowEditContent){

  this.allowEditContent=allowEditContent;

}

Location: PDFEncryptionParams.java

Content: 

/** 

 * Sets whether revision 3 filling in forms is allowed.

 * @param allowFillInForms true if revision 3 filling in forms is allowed.

 */

public void setAllowFillInForms(boolean allowFillInForms){

  this.allowFillInForms=allowFillInForms;

}

Location: PDFEncryptionParams.java

Content: 

/** 

 * Sets whether revision 3 printing to high quality is allowed.

 * @param allowPrintHq true if revision 3 printing to high quality is allowed

 */

public void setAllowPrintHq(boolean allowPrintHq){

  this.allowPrintHq=allowPrintHq;

}

Location: PDFEncryptionParams.java

Content: 

/** 

 * Sets the permission for printing.

 * @param allowPrint true if printing is allowed

 */

public void setAllowPrint(boolean allowPrint){

  this.allowPrint=allowPrint;

}

Location: PDFEncryptionParams.java

Content: 

/** 

 * Sets the encryption length.

 * @param encryptionLength the encryption length

 */

public void setEncryptionLengthInBits(int encryptionLength){

  this.encryptionLengthInBits=encryptionLength;

}

Location: PDFEncryptionParams.java

Content: 

/** 

 * Whether the Metadata should be encrypted or not; default is true;

 * @param encryptMetadata true or false

 */

public void setEncryptMetadata(boolean encryptMetadata){

  this.encryptMetadata=encryptMetadata;

}

Location: PDFEncryptionParams.java

Content: 

/** 

 * Sets the owner password.

 * @param ownerPassword The owner password to set, null or an empty Stringif no password is applicable

 */

public void setOwnerPassword(String ownerPassword){

  if (ownerPassword == null) {

    this.ownerPassword="";

  }

 else {

    this.ownerPassword=ownerPassword;

  }

}

Location: PDFEncryptionParams.java

Content: 

/** 

 * Sets the user password.

 * @param userPassword The user password to set, null or an empty Stringif no password is applicable

 */

public void setUserPassword(String userPassword){

  if (userPassword == null) {

    this.userPassword="";

  }

 else {

    this.userPassword=userPassword;

  }

}

