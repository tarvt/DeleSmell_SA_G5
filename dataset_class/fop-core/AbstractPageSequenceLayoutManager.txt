Location: AbstractPageSequenceLayoutManager.java

Content: 

/** 

 * Constructor

 * @param ath the area tree handler object

 * @param pseq fo:page-sequence to process

 */

public AbstractPageSequenceLayoutManager(AreaTreeHandler ath,AbstractPageSequence pseq){

  super(pseq);

  this.areaTreeHandler=ath;

  this.idTracker=ath.getIDTracker();

  this.pageSeq=pseq;

}

Location: AbstractPageSequenceLayoutManager.java

Content: 

/** 

 * Add an ID reference to the current page. When adding areas the area adds its ID reference. For the page layout manager it adds the id reference with the current page to the area tree.

 * @param id the ID reference to add

 */

public void addIDToPage(String id){

  if (id != null && id.length() > 0) {

    idTracker.associateIDWithPageViewport(id,curPage.getPageViewport());

  }

}

Location: AbstractPageSequenceLayoutManager.java

Content: 

/** 

 * Identify an unresolved area (one needing an idref to be resolved, e.g. the internal-destination of an fo:basic-link) for both the AreaTreeHandler and PageViewport object. The IDTracker keeps a document-wide list of idref's and the PV's needing them to be resolved.  It uses this to send notifications to the PV's when an id has been resolved. The PageViewport keeps lists of id's needing resolving, along with the child areas (page-number-citation, basic-link, etc.) of the PV needing their resolution.

 * @param id the ID reference to add

 * @param res the resolvable object that needs resolving

 */

public void addUnresolvedArea(String id,Resolvable res){

  curPage.getPageViewport().addUnresolvedIDRef(id,res);

  idTracker.addUnresolvedIDRef(id,curPage.getPageViewport());

}

Location: AbstractPageSequenceLayoutManager.java

Content: 

/** 

 * Add an id reference of the layout manager in the AreaTreeHandler, if the id hasn't been resolved yet

 * @param id the id to track

 * @return a boolean indicating if the id has already been resolvedTODO Maybe give this a better name

 */

public boolean associateLayoutManagerID(String id){

  if (log.isDebugEnabled()) {

    log.debug("associateLayoutManagerID(" + id + ")");

  }

  if (!idTracker.alreadyResolvedID(id)) {

    idTracker.signalPendingID(id);

    return false;

  }

 else {

    return true;

  }

}

Location: AbstractPageSequenceLayoutManager.java

Content: 

/** 

 * Creates and returns a new page.

 * @param pageNumber the page number

 * @param isBlank true if it's a blank page

 * @return the newly created page

 */

protected abstract Page createPage(int pageNumber,boolean isBlank);

Location: AbstractPageSequenceLayoutManager.java

Content: 

/** 

 * {@inheritDoc} 

 */

public void doForcePageCount(Numeric nextPageSeqInitialPageNumber){

  int forcePageCount=pageSeq.getForcePageCount();

  if (nextPageSeqInitialPageNumber != null && forcePageCount == Constants.EN_AUTO) {

    if (nextPageSeqInitialPageNumber.getEnum() != 0) {

      int nextPageSeqPageNumberType=nextPageSeqInitialPageNumber.getEnum();

      if (nextPageSeqPageNumberType == Constants.EN_AUTO_ODD) {

        forcePageCount=Constants.EN_END_ON_EVEN;

      }

 else       if (nextPageSeqPageNumberType == Constants.EN_AUTO_EVEN) {

        forcePageCount=Constants.EN_END_ON_ODD;

      }

 else {

        forcePageCount=Constants.EN_NO_FORCE;

      }

    }

 else {

      int nextPageSeqPageStart=nextPageSeqInitialPageNumber.getValue();

      nextPageSeqPageStart=(nextPageSeqPageStart > 0) ? nextPageSeqPageStart : 1;

      if (nextPageSeqPageStart % 2 == 0) {

        forcePageCount=Constants.EN_END_ON_ODD;

      }

 else {

        forcePageCount=Constants.EN_END_ON_EVEN;

      }

    }

  }

  if (forcePageCount == Constants.EN_EVEN) {

    if ((currentPageNum - startPageNum + 1) % 2 != 0) {

      curPage=makeNewPage(true);

    }

  }

 else   if (forcePageCount == Constants.EN_ODD) {

    if ((currentPageNum - startPageNum + 1) % 2 == 0) {

      curPage=makeNewPage(true);

    }

  }

 else   if (forcePageCount == Constants.EN_END_ON_EVEN) {

    if (currentPageNum % 2 != 0) {

      curPage=makeNewPage(true);

    }

  }

 else   if (forcePageCount == Constants.EN_END_ON_ODD) {

    if (currentPageNum % 2 == 0) {

      curPage=makeNewPage(true);

    }

  }

  if (curPage != null) {

    hongshuai();

    if (log.isTraceEnabled()) {

      curPage.getPageViewport().dumpMarkers();

    }

    idTracker.tryIDResolution(curPage.getPageViewport());

    areaTreeHandler.getAreaTreeModel().addPage(curPage.getPageViewport());

    if (log.isDebugEnabled()) {

      log.debug("page finished: " + curPage.getPageViewport().getPageNumberString() + ", current num: "+ currentPageNum);

    }

    curPage=null;

  }

  while (forcePageCount != Constants.EN_NO_FORCE && getCurrentPageNum() < getLastPageNumber()) {

    curPage=makeNewPage(true);

    finishPage();

  }

}

Location: AbstractPageSequenceLayoutManager.java

Content: 

/** 

 * Finishes a page in preparation for a new page.

 */

protected void finishPage(){

  if (log.isTraceEnabled()) {

    curPage.getPageViewport().dumpMarkers();

  }

  idTracker.tryIDResolution(curPage.getPageViewport());

  areaTreeHandler.getAreaTreeModel().addPage(curPage.getPageViewport());

  if (log.isDebugEnabled()) {

    log.debug("page finished: " + curPage.getPageViewport().getPageNumberString() + ", current num: "+ currentPageNum);

  }

  curPage=null;

}

Location: AbstractPageSequenceLayoutManager.java

Content: 

/** 

 * Provides access to the current page number

 * @return the current page number

 */

protected int getCurrentPageNum(){

  return currentPageNum;

}

Location: AbstractPageSequenceLayoutManager.java

Content: 

/** 

 * This returns the first PageViewport that contains an id trait matching the idref argument, or null if no such PV exists.

 * @param idref the idref trait needing to be resolved

 * @return the first PageViewport that contains the ID trait

 */

public PageViewport getFirstPVWithID(String idref){

  List list=idTracker.getPageViewportsContainingID(idref);

  if (list != null && list.size() > 0) {

    return (PageViewport)list.get(0);

  }

  return null;

}

Location: AbstractPageSequenceLayoutManager.java

Content: 

protected int getLastPageNumber(){

  return currentPageNum;

}

Location: AbstractPageSequenceLayoutManager.java

Content: 

/** 

 * This returns the last PageViewport that contains an id trait matching the idref argument, or null if no such PV exists.

 * @param idref the idref trait needing to be resolved

 * @return the last PageViewport that contains the ID trait

 */

public PageViewport getLastPVWithID(String idref){

  List list=idTracker.getPageViewportsContainingID(idref);

  if (list != null && list.size() > 0) {

    return (PageViewport)list.get(list.size() - 1);

  }

  return null;

}

Location: AbstractPageSequenceLayoutManager.java

Content: 

/** 

 * @return the LayoutManagerMaker object associated to the areaTreeHandler

 */

public LayoutManagerMaker getLayoutManagerMaker(){

  return areaTreeHandler.getLayoutManagerMaker();

}

Location: AbstractPageSequenceLayoutManager.java

Content: 

/** 

 * Makes a new page

 * @param isBlank whether this page is blank or not

 * @return a new page

 */

protected Page makeNewPage(boolean isBlank){

  if (curPage != null) {

    hongshuai();

    if (log.isTraceEnabled()) {

      curPage.getPageViewport().dumpMarkers();

    }

    idTracker.tryIDResolution(curPage.getPageViewport());

    areaTreeHandler.getAreaTreeModel().addPage(curPage.getPageViewport());

    if (log.isDebugEnabled()) {

      log.debug("page finished: " + curPage.getPageViewport().getPageNumberString() + ", current num: "+ currentPageNum);

    }

    curPage=null;

  }

  currentPageNum++;

  curPage=createPage(currentPageNum,isBlank);

  if (log.isDebugEnabled()) {

    log.debug("[" + curPage.getPageViewport().getPageNumberString() + (isBlank ? "*" : "")+ "]");

  }

  addIDToPage(pageSeq.getRoot().getId());

  addIDToPage(pageSeq.getId());

  return curPage;

}

Location: AbstractPageSequenceLayoutManager.java

Content: 

/** 

 * Notify the areaTreeHandler that the LayoutManagers containing idrefs have finished creating areas

 * @param id the id for which layout has finished

 */

public void notifyEndOfLayout(String id){

  idTracker.signalIDProcessed(id);

}

Location: AbstractPageSequenceLayoutManager.java

Content: 

/** 

 * Bind the RetrieveMarker to the corresponding Marker subtree. If the boundary is page then it will only check the current page. For page-sequence and document it will lookup preceding pages from the area tree and try to find a marker. If we retrieve a marker from a preceding page, then the containing page does not have a qualifying area, and all qualifying areas have ended. Therefore we use last-ending-within-page (Constants.EN_LEWP) as the position.

 * @param rm the RetrieveMarker instance whose properties are toused to find the matching Marker.

 * @return a bound RetrieveMarker instance, or null if no Markercould be found.

 */

public RetrieveMarker resolveRetrieveMarker(RetrieveMarker rm){

  AreaTreeModel areaTreeModel=areaTreeHandler.getAreaTreeModel();

  String name=rm.getRetrieveClassName();

  int boundary=rm.getRetrieveBoundary();

  Marker mark=getCurrentPV().resolveMarker(rm);

  if (mark == null && boundary != EN_PAGE) {

    boolean doc=(boundary == EN_DOCUMENT);

    int seq=areaTreeModel.getPageSequenceCount();

    int page=areaTreeModel.getPageCount(seq) - 1;

    while (page < 0 && doc && seq > 1) {

      seq--;

      page=areaTreeModel.getPageCount(seq) - 1;

    }

    while (page >= 0) {

      PageViewport pv=areaTreeModel.getPage(seq,page);

      int originalPosition=rm.getPosition();

      rm.changePositionTo(Constants.EN_LEWP);

      mark=pv.resolveMarker(rm);

      rm.changePositionTo(originalPosition);

      if (mark != null) {

        break;

      }

      page--;

      if (page < 0 && doc && seq > 1) {

        seq--;

        page=areaTreeModel.getPageCount(seq) - 1;

      }

    }

  }

  if (mark == null) {

    log.debug("found no marker with name: " + name);

    return null;

  }

 else {

    rm.bindMarker(mark);

    return rm;

  }

}

Location: AbstractPageSequenceLayoutManager.java

Content: 

/** 

 * Provides access for setting the current page.

 * @param currentPage the new current Page

 */

protected void setCurrentPage(Page currentPage){

  this.curPage=currentPage;

}

