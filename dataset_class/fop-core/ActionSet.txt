Location: ActionSet.java

Content: 

/** 

 * Generates a new synthetic ID for an action.

 * @param action the action

 * @return the generated ID

 */

public synchronized String generateNewID(AbstractAction action){

  this.lastGeneratedID++;

  String prefix=action.getIDPrefix();

  if (prefix == null) {

    throw new IllegalArgumentException("Action class is not compatible");

  }

  return prefix + this.lastGeneratedID;

}

Location: ActionSet.java

Content: 

/** 

 * Returns the action with the given ID.

 * @param id the ID

 * @return the action or null if no action with this ID is stored

 */

public AbstractAction get(String id){

  return (AbstractAction)this.actionRegistry.get(id);

}

Location: ActionSet.java

Content: 

private AbstractAction normalize(AbstractAction action){

  for (  Object o : this.actionRegistry.values()) {

    AbstractAction a=(AbstractAction)o;

    if (a.isSame(action)) {

      return a;

    }

  }

  return action;

}

Location: ActionSet.java

Content: 

/** 

 * Puts an action into the set and returns the normalized instance (another one if the given one is equal to another.

 * @param action the action

 * @return the action instance that should be used in place of the given one

 */

public AbstractAction put(AbstractAction action){

  if (!action.hasID()) {

    action.setID(generateNewID(action));

  }

  AbstractAction effAction=normalize(action);

  if (effAction == action) {

    this.actionRegistry.put(action.getID(),action);

  }

  return effAction;

}

