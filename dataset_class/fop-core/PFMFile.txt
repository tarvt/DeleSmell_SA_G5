Location: PFMFile.java

Content: 

/** 

 * Returns the charset used for the font.

 * @return The charset (0=WinAnsi).

 */

public short getCharSet(){

  return dfCharSet;

}

Location: PFMFile.java

Content: 

/** 

 * Returns the charset of the font as a string.

 * @return The name of the charset.

 */

public String getCharSetName(){

switch (dfCharSet) {

case 0:

    return "WinAnsi";

case 2:

  if ("Symbol".equals(getPostscriptName())) {

    return "Symbol";

  }

break;

case 128:

return "Shift-JIS (Japanese)";

default :

log.warn("Unknown charset detected (" + dfCharSet + ", 0x"+ Integer.toHexString(dfCharSet)+ "). Trying fallback to WinAnsi.");

}

return "WinAnsi";

}

Location: PFMFile.java

Content: 

/** 

 * Returns the width of a character

 * @param which The number of the character for which the width is requested.

 * @return The width of a character.

 */

public int getCharWidth(short which){

  if (extentTable != null) {

    return extentTable[which - dfFirstChar];

  }

 else {

    return this.dfAvgWidth;

  }

}

Location: PFMFile.java

Content: 

/** 

 * Returns the number of the character that defines the first entry in the widths list.

 * @return The number of the first character.

 */

public short getFirstChar(){

  return dfFirstChar;

}

Location: PFMFile.java

Content: 

/** 

 * Returns the characteristics flags for the font as needed for a PDF font descriptor (See PDF specs).

 * @return The characteristics flags.

 */

public int getFlags(){

  int flags=0;

  if (!getIsProportional()) {

    flags|=1;

  }

  if (isNonSymbolic()) {

    flags|=32;

  }

 else {

    flags|=4;

  }

  if ((dfPitchAndFamily & 16) != 0) {

    flags|=2;

  }

  if ((dfPitchAndFamily & 64) != 0) {

    flags|=8;

  }

  if (dfItalic != 0) {

    flags|=64;

  }

  return flags;

}

Location: PFMFile.java

Content: 

/** 

 * Returns the bounding box for the font. Note: this value is just an approximation, it does not really exist in the PFM file.

 * @return The calculated Font BBox.

 */

public int[] getFontBBox(){

  int[] bbox=new int[4];

  if (!getIsProportional() && (dfAvgWidth == dfMaxWidth)) {

    bbox[0]=-20;

  }

 else {

    bbox[0]=-100;

  }

  bbox[1]=getLowerCaseDescent() - 5;

  bbox[2]=dfMaxWidth + 10;

  bbox[3]=getLowerCaseAscent() + 5;

  return bbox;

}

Location: PFMFile.java

Content: 

/** 

 * Tells whether the font has proportional character spacing.

 * @return ex. true for Times, false for Courier.

 */

public boolean getIsProportional(){

  return ((dfPitchAndFamily & 1) == 1);

}

Location: PFMFile.java

Content: 

/** 

 * Returns the italic angle of the font. Note: this value is just an approximation, it does not really exist in the PFM file.

 * @return The italic angle.

 */

public int getItalicAngle(){

  if (dfItalic != 0) {

    return -16;

  }

 else {

    return 0;

  }

}

Location: PFMFile.java

Content: 

/** 

 * Return the kerning table. The kerning table is a Map with strings with glyphnames as keys, containing Maps as value. The value map contains a glyph name string key and an Integer value

 * @return A Map containing the kerning table

 */

public Map<Integer,Map<Integer,Integer>> getKerning(){

  return kerningTab;

}

Location: PFMFile.java

Content: 

/** 

 * Returns the number of the character that defines the last entry in the widths list.

 * @return The number of the last character.

 */

public short getLastChar(){

  return dfLastChar;

}

Location: PFMFile.java

Content: 

/** 

 * Returns the LowerCaseAscent parameter for the font (height of lowercase d).

 * @return The LowerCaseAscent parameter.

 */

public int getLowerCaseAscent(){

  return etmLowerCaseAscent;

}

Location: PFMFile.java

Content: 

/** 

 * Returns the LowerCaseDescent parameter for the font (height of lowercase p).

 * @return The LowerCaseDescent parameter.

 */

public int getLowerCaseDescent(){

  return etmLowerCaseDescent;

}

Location: PFMFile.java

Content: 

/** 

 * Returns the Postscript name of the font.

 * @return The Postscript name.

 */

public String getPostscriptName(){

  return postscriptName;

}

Location: PFMFile.java

Content: 

/** 

 * Returns the width of the dominant vertical stems of the font. Note: this value is just an approximation, it does not really exist in the PFM file.

 * @return The vertical stem width.

 */

public int getStemV(){

  if (dfItalic != 0) {

    return (int)Math.round(dfMinWidth * 0.25);

  }

 else {

    return (int)Math.round(dfMinWidth * 0.6);

  }

}

Location: PFMFile.java

Content: 

/** 

 * Returns the Windows name of the font.

 * @return The Windows name.

 */

public String getWindowsName(){

  return windowsName;

}

Location: PFMFile.java

Content: 

/** 

 * Indicates whether the font is non-symbolic (Font uses the Adobe standard Latin character set or a subset of it).

 * @return true if the font is non-symbolic

 */

public boolean isNonSymbolic(){

  return (dfCharSet != 2);

}

Location: PFMFile.java

Content: 

/** 

 * Parses the extension part of the PFM file.

 * @param inStream The stream from which to read the PFM file.

 */

private void loadExtension(PFMInputStream inStream) throws IOException {

  final int size=inStream.readShort();

  if (size != 30) {

    log.warn("Size of extension block was expected to be " + "30 bytes, but was " + size + " bytes.");

  }

  final long extMetricsOffset=inStream.readInt();

  final long extentTableOffset=inStream.readInt();

  if (inStream.skip(4) != 4) {

    throw new IOException("premature EOF when skipping dfOriginTable bytes");

  }

  final long kernPairOffset=inStream.readInt();

  if (inStream.skip(4) != 4) {

    throw new IOException("premature EOF when skipping dfTrackKernTable bytes");

  }

  long driverInfoOffset=inStream.readInt();

  if (kernPairOffset > 0) {

    inStream.reset();

    if (inStream.skip(kernPairOffset) != kernPairOffset) {

      throw new IOException("premature EOF when skipping kernPairOffset bytes");

    }

    loadKernPairs(inStream);

  }

  inStream.reset();

  if (inStream.skip(driverInfoOffset) != driverInfoOffset) {

    throw new IOException("premature EOF when skipping driverInfoOffset bytes");

  }

  postscriptName=inStream.readString();

  if (extMetricsOffset != 0) {

    inStream.reset();

    if (inStream.skip(extMetricsOffset) != extMetricsOffset) {

      throw new IOException("premature EOF when skipping extMetricsOffset bytes");

    }

    loadExtMetrics(inStream);

  }

  if (extentTableOffset != 0) {

    inStream.reset();

    if (inStream.skip(extentTableOffset) != extentTableOffset) {

      throw new IOException("premature EOF when skipping extentTableOffset bytes");

    }

    loadExtentTable(inStream);

  }

}

Location: PFMFile.java

Content: 

/** 

 * Parses the extent table of the PFM file.

 * @param inStream The stream from which to read the PFM file.

 */

private void loadExtentTable(PFMInputStream inStream) throws IOException {

  extentTable=new int[dfLastChar - dfFirstChar + 1];

  dfMinWidth=dfMaxWidth;

  for (short i=dfFirstChar; i <= dfLastChar; i++) {

    extentTable[i - dfFirstChar]=inStream.readShort();

    if (extentTable[i - dfFirstChar] < dfMinWidth) {

      dfMinWidth=extentTable[i - dfFirstChar];

    }

  }

}

Location: PFMFile.java

Content: 

/** 

 * Parses the extended metrics part of the PFM file.

 * @param inStream The stream from which to read the PFM file.

 */

private void loadExtMetrics(PFMInputStream inStream) throws IOException {

  final int size=inStream.readShort();

  if (size != 52) {

    log.warn("Size of extension block was expected to be " + "52 bytes, but was " + size + " bytes.");

  }

  if (inStream.skip(12) != 12) {

    throw new IOException("premature EOF when skipping etmPointSize, ... bytes");

  }

  etmCapHeight=inStream.readShort();

  etmXHeight=inStream.readShort();

  etmLowerCaseAscent=inStream.readShort();

  etmLowerCaseDescent=-(inStream.readShort());

}

Location: PFMFile.java

Content: 

/** 

 * Parses the header of the PFM file.

 * @param inStream The stream from which to read the PFM file.

 * @throws IOException In case of an I/O problem

 */

private void loadHeader(PFMInputStream inStream) throws IOException {

  if (inStream.skip(80) != 80) {

    throw new IOException("premature EOF when skipping 80 bytes");

  }

  dfItalic=inStream.readByte();

  if (inStream.skip(2) != 2) {

    throw new IOException("premature EOF when skipping 2 bytes");

  }

  inStream.readShort();

  dfCharSet=inStream.readByte();

  if (inStream.skip(4) != 4) {

    throw new IOException("premature EOF when skipping 4 bytes");

  }

  dfPitchAndFamily=inStream.readByte();

  dfAvgWidth=inStream.readShort();

  dfMaxWidth=inStream.readShort();

  dfFirstChar=inStream.readByte();

  dfLastChar=inStream.readByte();

  if (inStream.skip(8) != 8) {

    throw new IOException("premature EOF when skipping 8 bytes");

  }

  long faceOffset=inStream.readInt();

  inStream.reset();

  if (inStream.skip(faceOffset) != faceOffset) {

    throw new IOException("premature EOF when skipping faceOffset bytes");

  }

  windowsName=inStream.readString();

  inStream.reset();

  if (inStream.skip(117) != 117) {

    throw new IOException("premature EOF when skipping 117 bytes");

  }

}

Location: PFMFile.java

Content: 

/** 

 * Parses the kernPairs part of the pfm file

 * @param inStream The stream from which to read the PFM file.

 */

private void loadKernPairs(PFMInputStream inStream) throws IOException {

  int i=inStream.readShort();

  if (log.isTraceEnabled()) {

    log.trace(i + " kerning pairs");

  }

  while (i > 0) {

    int g1=(int)inStream.readByte();

    i--;

    int g2=(int)inStream.readByte();

    int adj=inStream.readShort();

    if (adj > 0x8000) {

      adj=-(0x10000 - adj);

    }

    if (log.isTraceEnabled()) {

      log.trace("Char no: (" + g1 + ", "+ g2+ ") kern: "+ adj);

      final String glyph1=Glyphs.TEX8R_GLYPH_NAMES[g1];

      final String glyph2=Glyphs.TEX8R_GLYPH_NAMES[g2];

      log.trace("glyphs: " + glyph1 + ", "+ glyph2);

    }

    Map<Integer,Integer> adjTab=kerningTab.get(g1);

    if (adjTab == null) {

      adjTab=new HashMap<Integer,Integer>();

    }

    adjTab.put(g2,adj);

    kerningTab.put(g1,adjTab);

  }

}

Location: PFMFile.java

Content: 

/** 

 * Parses a PFM file

 * @param inStream The stream from which to read the PFM file.

 * @throws IOException In case of an I/O problem

 */

public void load(InputStream inStream) throws IOException {

  byte[] pfmBytes=IOUtils.toByteArray(inStream);

  InputStream bufin=inStream;

  bufin=new ByteArrayInputStream(pfmBytes);

  PFMInputStream in=new PFMInputStream(bufin);

  bufin.mark(512);

  short sh1=in.readByte();

  short sh2=in.readByte();

  if (sh1 == 128 && sh2 == 1) {

    IOUtils.closeQuietly(in);

    throw new IOException("Cannot parse PFM file. You probably specified the PFB file" + " of a Type 1 font as parameter instead of the PFM.");

  }

  bufin.reset();

  byte[] b=new byte[16];

  if ((bufin.read(b) == b.length) && new String(b,"US-ASCII").equalsIgnoreCase("StartFontMetrics")) {

    IOUtils.closeQuietly(in);

    throw new IOException("Cannot parse PFM file. You probably specified the AFM file" + " of a Type 1 font as parameter instead of the PFM.");

  }

  bufin.reset();

  final int version=in.readShort();

  if (version != 256) {

    log.warn("PFM version expected to be '256' but got '" + version + "'."+ " Please make sure you specify the PFM as parameter"+ " and not the PFB or the AFM.");

  }

  bufin.reset();

  loadHeader(in);

  loadExtension(in);

}

