Location: GDEFTestCase.java

Content: 

private String findTTXPath(String fid){

  for (  String[] fs : ttxFonts) {

    if ((fs != null) && (fs.length > 1)) {

      if (fs[0].equals(fid)) {

        return ttxFilesRoot + File.separator + fs[1];

      }

    }

  }

  return null;

}

Location: GDEFTestCase.java

Content: 

private TTXFile findTTX(String fid){

  String pn=findTTXPath(fid);

  assertTrue(pn != null);

  try {

    TTXFile tf=TTXFile.getFromCache(pn);

    return tf;

  }

 catch (  Exception e) {

    fail(e.getMessage());

    return null;

  }

}

Location: GDEFTestCase.java

Content: 

private void performAttachmentPointLookups(TTXFile tf,String lid,String[][] tia){

}

Location: GDEFTestCase.java

Content: 

private void performGlyphClassLookups(TTXFile tf,String lid,String[][] tia){

  GlyphDefinitionTable gdef=tf.getGDEF();

  assert gdef != null;

  for (  String[] ti : tia) {

    assert ti != null;

    assert ti.length > 1;

    String gn=ti[0];

    assert gn != null;

    String cn=ti[1];

    assert cn != null;

    int g=tf.getGlyph(gn);

    assertTrue(g >= 0);

    int oc=Integer.parseInt(cn);

    int tc=gdef.getGlyphClass(g);

    assertEquals("bad glyph class for glyph \'" + gn + "\', gid("+ g+ ")",oc,tc);

  }

}

Location: GDEFTestCase.java

Content: 

private void performLigatureCaretLookups(TTXFile tf,String lid,String[][] tia){

}

Location: GDEFTestCase.java

Content: 

/** 

 * Perform lookups on all test data in test specification TS.

 * @param ts test specification

 */

private void performLookups(Object[][] ts){

  assert ts.length > 0;

  Object[] tp=ts[0];

  for (int i=1; i < ts.length; i++) {

    performLookups(tp,ts[i]);

  }

}

Location: GDEFTestCase.java

Content: 

/** 

 * Perform lookups on all test data TD using test parameters TP.

 * @param tp test parameters

 * @param td test data

 */

private void performLookups(Object[] tp,Object[] td){

  assert tp.length > 0;

  if (td.length > 1) {

    String fid=(String)td[0];

    String lid=(String)td[1];

    TTXFile tf=findTTX(fid);

    assertTrue(tf != null);

    GlyphDefinitionTable gdef=tf.getGDEF();

    assertTrue(gdef != null);

    String[][] tia=(String[][])td[2];

switch ((int)((Integer)tp[0])) {

case GlyphDefinitionTable.GDEF_LOOKUP_TYPE_GLYPH_CLASS:

      performGlyphClassLookups(tf,lid,tia);

    break;

case GlyphDefinitionTable.GDEF_LOOKUP_TYPE_ATTACHMENT_POINT:

  performAttachmentPointLookups(tf,lid,tia);

break;

case GlyphDefinitionTable.GDEF_LOOKUP_TYPE_LIGATURE_CARET:

performLigatureCaretLookups(tf,lid,tia);

break;

case GlyphDefinitionTable.GDEF_LOOKUP_TYPE_MARK_ATTACHMENT:

performMarkAttachmentLookups(tf,lid,tia);

break;

default :

assertTrue("bad lookup type",false);

break;

}

}

}

Location: GDEFTestCase.java

Content: 

private void performMarkAttachmentLookups(TTXFile tf,String lid,String[][] tia){

}

Location: GDEFTestCase.java

Content: 

@Test public void testGDEFAttachmentPoint() throws Exception {

  performLookups(ltAttachmentPoint);

}

Location: GDEFTestCase.java

Content: 

@Test public void testGDEFGlyphClass() throws Exception {

  performLookups(ltGlyphClass);

}

Location: GDEFTestCase.java

Content: 

@Test public void testGDEFLigatureCaret() throws Exception {

  performLookups(ltLigatureCaret);

}

Location: GDEFTestCase.java

Content: 

@Test public void testGDEFMarkAttachment() throws Exception {

  performLookups(ltMarkAttachment);

}

