Location: SpaceSpecifier.java

Content: 

/** 

 * Add a new space to the sequence. If this sequence starts a reference area, and the added space is conditional, and there are no non-conditional values in the sequence yet, then ignore it. Otherwise add it to the sequence.

 * @param space the space to add.

 */

public void addSpace(SpaceVal space){

  if (!startsReferenceArea || !space.isConditional() || hasSpaces()) {

    if (space.isForcing()) {

      if (!hasForcing) {

        spaceVals.clear();

        hasForcing=true;

      }

      spaceVals.add(space);

    }

 else     if (!hasForcing) {

      if (space.getSpace().isNonZero()) {

        spaceVals.add(space);

      }

    }

  }

}

Location: SpaceSpecifier.java

Content: 

/** 

 * Indicates whether any space-specifiers have been added.

 * @return true if any space-specifiers have been added.

 */

public boolean hasSpaces(){

  return !spaceVals.isEmpty();

}

Location: SpaceSpecifier.java

Content: 

/** 

 * Resolve the current sequence of space-specifiers, accounting for forcing values.

 * @param endsReferenceArea whether the sequence should be resolved at the trailing edge ofreference area.

 * @return the resolved value as a min/opt/max triple.

 */

public MinOptMax resolve(boolean endsReferenceArea){

  int lastIndex=spaceVals.size();

  if (endsReferenceArea) {

    for (; lastIndex > 0; --lastIndex) {

      SpaceVal spaceVal=(SpaceVal)spaceVals.get(lastIndex - 1);

      if (!spaceVal.isConditional()) {

        break;

      }

    }

  }

  MinOptMax resolvedSpace=MinOptMax.ZERO;

  int maxPrecedence=-1;

  for (int index=0; index < lastIndex; index++) {

    SpaceVal spaceVal=(SpaceVal)spaceVals.get(index);

    MinOptMax space=spaceVal.getSpace();

    if (hasForcing) {

      resolvedSpace=resolvedSpace.plus(space);

    }

 else {

      int precedence=spaceVal.getPrecedence();

      if (precedence > maxPrecedence) {

        maxPrecedence=precedence;

        resolvedSpace=space;

      }

 else       if (precedence == maxPrecedence) {

        if (space.getOpt() > resolvedSpace.getOpt()) {

          resolvedSpace=space;

        }

 else         if (space.getOpt() == resolvedSpace.getOpt()) {

          if (resolvedSpace.getMin() < space.getMin()) {

            resolvedSpace=MinOptMax.getInstance(space.getMin(),resolvedSpace.getOpt(),resolvedSpace.getMax());

          }

          if (resolvedSpace.getMax() > space.getMax()) {

            resolvedSpace=MinOptMax.getInstance(resolvedSpace.getMin(),resolvedSpace.getOpt(),space.getMax());

          }

        }

      }

    }

  }

  return resolvedSpace;

}

Location: SpaceSpecifier.java

Content: 

/** 

 * Creates a new SpaceSpecifier.

 * @param startsReferenceArea true if it starts a new reference area

 */

public SpaceSpecifier(boolean startsReferenceArea){

  this.startsReferenceArea=startsReferenceArea;

}

