Location: RtfAttributes.java

Content: 

/** 

 * Add integer value <code>addValue</code> to attribute with name <code>name</code>. If there is no such setted attribute, then value of this attribure is equal to <code>addValue</code>.

 * @param addValue the increment of value

 * @param name the name of attribute

 */

public void addIntegerValue(int addValue,String name){

  Integer value=(Integer)getValue(name);

  int v=(value != null) ? value : 0;

  set(name,v + addValue);

}

Location: RtfAttributes.java

Content: 

/** 

 * Returns a value as an Integer. The value is simply cast to an Integer.

 * @param name String containing attribute name

 * @return the value of an attribute, null if not found

 */

public Integer getValueAsInteger(String name){

  return (Integer)values.get(name);

}

Location: RtfAttributes.java

Content: 

/** 

 * @param name String containing attribute name

 * @return the value of an attribute, null if not found

 */

public Object getValue(String name){

  return values.get(name);

}

Location: RtfAttributes.java

Content: 

/** 

 * Added by Normand Masse Used for attribute inheritance

 * @return Attributes

 */

public Attributes getXslAttributes(){

  return xslAttributes;

}

Location: RtfAttributes.java

Content: 

/** 

 * @param name String containing attribute name

 * @return true if given attribute is set

 */

public boolean isSet(String name){

  return values.containsKey(name);

}

Location: RtfAttributes.java

Content: 

/** 

 * @return an Iterator on all names that are set 

 */

public Iterator nameIterator(){

  return values.keySet().iterator();

}

Location: RtfAttributes.java

Content: 

/** 

 * Added by Normand Masse Used for attribute inheritance

 * @param pAttribs attributes

 */

public void setXslAttributes(Attributes pAttribs){

  if (pAttribs == null) {

    return;

  }

  if (xslAttributes != null) {

    for (int i=0; i < pAttribs.getLength(); i++) {

      String wKey=pAttribs.getQName(i);

      int wPos=xslAttributes.getIndex(wKey);

      if (wPos == -1) {

        ((AttributesImpl)xslAttributes).addAttribute(pAttribs.getURI(i),pAttribs.getLocalName(i),pAttribs.getQName(i),pAttribs.getType(i),pAttribs.getValue(i));

      }

 else {

        ((AttributesImpl)xslAttributes).setAttribute(wPos,pAttribs.getURI(i),pAttribs.getLocalName(i),pAttribs.getQName(i),pAttribs.getType(i),pAttribs.getValue(i));

      }

    }

  }

 else {

    xslAttributes=new org.xml.sax.helpers.AttributesImpl(pAttribs);

  }

}

Location: RtfAttributes.java

Content: 

/** 

 * Set attributes from another attributes object

 * @param attrs RtfAttributes object whose elements will be copied into thisinstance

 * @return this object, for chaining calls

 */

public RtfAttributes set(RtfAttributes attrs){

  if (attrs != null) {

    Iterator it=attrs.nameIterator();

    while (it.hasNext()) {

      String name=(String)it.next();

      if (attrs.getValue(name) instanceof Integer) {

        Integer value=(Integer)attrs.getValue(name);

        if (value == null) {

          set(name);

        }

 else {

          set(name,value);

        }

      }

 else       if (attrs.getValue(name) instanceof String) {

        String value=(String)attrs.getValue(name);

        if (value == null) {

          set(name);

        }

 else {

          set(name,value);

        }

      }

 else {

        set(name);

      }

    }

    setXslAttributes(attrs.getXslAttributes());

  }

  return this;

}

Location: RtfAttributes.java

Content: 

/** 

 * set an attribute that has no value.

 * @param name name of attribute to set

 * @return this object, for chaining calls

 */

public RtfAttributes set(String name){

  values.put(name,null);

  return this;

}

Location: RtfAttributes.java

Content: 

/** 

 * Set an attribute that has an integer value

 * @param name name of attribute

 * @param value value of attribute

 * @return this (which now contains the new entry), for chaining calls

 */

public RtfAttributes set(String name,int value){

  values.put(name,value);

  return this;

}

Location: RtfAttributes.java

Content: 

/** 

 * Set an attribute that has nested attributes as value

 * @param name name of attribute

 * @param value value of the nested attributes

 * @return this (which now contains the new entry)

 */

public RtfAttributes set(String name,RtfAttributes value){

  values.put(name,value);

  return this;

}

Location: RtfAttributes.java

Content: 

/** 

 * Set an attribute that has a String value

 * @param name name of attribute

 * @param type value of attribute

 * @return this (which now contains the new entry)

 */

public RtfAttributes set(String name,String type){

  values.put(name,type);

  return this;

}

Location: RtfAttributes.java

Content: 

/** 

 * unset an attribute that has no value

 * @param name name of attribute to unset

 * @return this object, for chaining calls

 */

public RtfAttributes unset(String name){

  values.remove(name);

  return this;

}

