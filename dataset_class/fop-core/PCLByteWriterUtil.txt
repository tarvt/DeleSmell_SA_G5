Location: PCLByteWriterUtil.java

Content: 

public static byte[] insertIntoArray(int index,byte[] insertTo,byte[] data) throws IOException {

  byte[] preBytes=Arrays.copyOf(insertTo,index);

  byte[] postBytes=Arrays.copyOfRange(insertTo,index,insertTo.length);

  ByteArrayOutputStream baos=new ByteArrayOutputStream();

  baos.write(preBytes);

  baos.write(data);

  baos.write(postBytes);

  return baos.toByteArray();

}

Location: PCLByteWriterUtil.java

Content: 

public static int log(int x,int base){

  return (int)(Math.log(x) / Math.log(base));

}

Location: PCLByteWriterUtil.java

Content: 

public static int maxPower2(int value){

  int test=2;

  while (test < value) {

    test*=2;

  }

  return test;

}

Location: PCLByteWriterUtil.java

Content: 

public static byte[] padBytes(byte[] in,int length){

  return padBytes(in,length,0);

}

Location: PCLByteWriterUtil.java

Content: 

public static byte[] padBytes(byte[] in,int length,int value){

  byte[] out=new byte[length];

  for (int i=0; i < length; i++) {

    if (i < in.length) {

      out[i]=in[i];

    }

 else {

      out[i]=(byte)value;

    }

  }

  return out;

}

Location: PCLByteWriterUtil.java

Content: 

private PCLByteWriterUtil(){

}

Location: PCLByteWriterUtil.java

Content: 

public static byte signedByte(int s){

  return (byte)s;

}

Location: PCLByteWriterUtil.java

Content: 

public static byte[] signedInt(int s){

  byte b1=(byte)(s >> 8);

  byte b2=(byte)s;

  return new byte[]{b1,b2};

}

Location: PCLByteWriterUtil.java

Content: 

public static byte[] toByteArray(int[] s){

  byte[] values=new byte[s.length];

  for (int i=0; i < s.length; i++) {

    values[i]=(byte)s[i];

  }

  return values;

}

Location: PCLByteWriterUtil.java

Content: 

public static int unsignedByte(int b){

  return (byte)b & 0xFF;

}

Location: PCLByteWriterUtil.java

Content: 

public static byte[] unsignedInt(int s){

  byte b1=(byte)((s >> 8) & 0xff);

  byte b2=(byte)(s & 0xff);

  return new byte[]{b1,b2};

}

Location: PCLByteWriterUtil.java

Content: 

public static byte[] unsignedLongInt(int s){

  return unsignedLongInt((long)s);

}

Location: PCLByteWriterUtil.java

Content: 

public static byte[] unsignedLongInt(long s){

  byte b1=(byte)((s >> 24) & 0xff);

  byte b2=(byte)((s >> 16) & 0xff);

  byte b3=(byte)((s >> 8) & 0xff);

  byte b4=(byte)(s & 0xff);

  return new byte[]{b1,b2,b3,b4};

}

Location: PCLByteWriterUtil.java

Content: 

public static byte[] updateDataAtLocation(byte[] data,byte[] update,int offset){

  int count=0;

  for (int i=offset; i < offset + update.length; i++) {

    data[i]=update[count++];

  }

  return data;

}

Location: PCLByteWriterUtil.java

Content: 

/** 

 * Writes a PCL escape command to the output stream.

 * @param cmd the command (without the ESCAPE character)

 * @throws IOException In case of an I/O error

 */

public static byte[] writeCommand(String cmd) throws IOException {

  ByteArrayOutputStream baos=new ByteArrayOutputStream();

  baos.write(27);

  baos.write(cmd.getBytes("US-ASCII"));

  return baos.toByteArray();

}

