Location: CharacterSetOrientation.java

Content: 

/** 

 * Constructor for the CharacterSetOrientation, the orientation is expressed as the degrees rotation (i.e 0, 90, 180, 270)

 * @param orientation   the character set orientation

 * @param spaceIncrement    the space increment

 * @param emSpaceIncrement  the em space increment

 * @param nomCharIncrement  the nominal character increment

 */

public CharacterSetOrientation(int orientation,int spaceIncrement,int emSpaceIncrement,int nomCharIncrement){

  this.orientation=orientation;

  this.spaceIncrement=spaceIncrement;

  this.emSpaceIncrement=emSpaceIncrement;

  this.nomCharIncrement=nomCharIncrement;

  this.characterMetrics=new IntegerKeyStore<CharacterMetrics>();

}

Location: CharacterSetOrientation.java

Content: 

private CharacterMetrics getCharacterMetrics(char character){

  return characterMetrics.get((int)character);

}

Location: CharacterSetOrientation.java

Content: 

/** 

 * Returns the em space increment.

 * @return the em space increment

 */

public int getEmSpaceIncrement(){

  return this.emSpaceIncrement;

}

Location: CharacterSetOrientation.java

Content: 

private Rectangle getFallbackCharacterBox(){

  return new Rectangle(0,0,0,0);

}

Location: CharacterSetOrientation.java

Content: 

/** 

 * Returns the nominal character increment.

 * @return the nominal character increment

 */

public int getNominalCharIncrement(){

  return this.nomCharIncrement;

}

Location: CharacterSetOrientation.java

Content: 

/** 

 * Returns the space increment.

 * @return the space increment

 */

public int getSpaceIncrement(){

  return this.spaceIncrement;

}

Location: CharacterSetOrientation.java

Content: 

private static Rectangle scale(Rectangle rectangle,int size){

  if (rectangle == null) {

    return null;

  }

 else {

    return new Rectangle((int)(size * rectangle.getX()),(int)(size * rectangle.getY()),(int)(size * rectangle.getWidth()),(int)(size * rectangle.getHeight()));

  }

}

Location: CharacterSetOrientation.java

Content: 

/** 

 * Set the width (in 1/1000ths of a point size) of the character identified by the parameter passed.

 * @param character the Unicode character for which the width is being set

 * @param width the widths of the character

 * @param characterBox    the character box

 */

public void setCharacterMetrics(char character,int width,Rectangle characterBox){

  characterMetrics.put((int)character,new CharacterMetrics(width,characterBox));

}

Location: CharacterSetOrientation.java

Content: 

/** 

 * TODO

 * @param underscorePosition the underscore position value in millipoints

 */

public void setUnderscorePosition(int underscorePosition){

  this.underscorePosition=underscorePosition;

}

Location: CharacterSetOrientation.java

Content: 

/** 

 * TODO

 * @param underscoreWidth the underscore width value in millipoints

 */

public void setUnderscoreWidth(int underscoreWidth){

  this.underscoreWidth=underscoreWidth;

}

