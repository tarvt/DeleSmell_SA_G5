Location: AbstractAFPObjectTest.java

Content: 

private void checkHeaderAndData(byte[] header,byte[] data,byte[] testData,int expectedIndex,int testIndex,int chunkSize){

  for (  byte aHeader : header) {

    assertEquals(testData[expectedIndex++],aHeader);

  }

  for (int i=0; i < chunkSize; i++) {

    assertEquals(testData[expectedIndex++],data[i + testIndex]);

  }

}

Location: AbstractAFPObjectTest.java

Content: 

protected final S getSut(){

  return sut;

}

Location: AbstractAFPObjectTest.java

Content: 

private void putLengthInHeader(byte[] header,int chunkSize){

  header[0]=0;

  header[1]=(byte)(chunkSize + header.length);

}

Location: AbstractAFPObjectTest.java

Content: 

protected final void setSut(S sut){

  if (this.sut == null) {

    this.sut=sut;

  }

}

Location: AbstractAFPObjectTest.java

Content: 

@Test public void testCopySF(){

  byte[] expected=new byte[9];

  S.copySF(expected,(byte)0xD3,(byte)0,(byte)0);

  byte[] actual=new byte[9];

  Arrays.fill(actual,(byte)-1);

  getSut().copySF(actual,(byte)0,(byte)0);

  assertTrue(Arrays.equals(actual,expected));

  byte[] expected2=new byte[9];

  System.arraycopy(expected,0,expected2,0,expected.length);

  final byte type=(byte)1;

  final byte catagory=(byte)2;

  expected2[4]=type;

  expected2[5]=catagory;

  getSut().copySF(actual,type,catagory);

  assertTrue(Arrays.equals(actual,expected2));

}

Location: AbstractAFPObjectTest.java

Content: 

@Test public void testCopySFStatic(){

  byte[] actual=new byte[9];

  Arrays.fill(actual,(byte)-1);

  S.copySF(actual,(byte)0,(byte)0,(byte)0);

  assertTrue(Arrays.equals(actual,header));

  byte[] expected2=new byte[9];

  System.arraycopy(header,0,expected2,0,header.length);

  final byte clazz=(byte)0x01;

  final byte type=(byte)0x02;

  final byte catagory=(byte)0x03;

  expected2[3]=clazz;

  expected2[4]=type;

  expected2[5]=catagory;

  AbstractAFPObject.copySF(actual,clazz,type,catagory);

  assertTrue(Arrays.equals(actual,expected2));

}

Location: AbstractAFPObjectTest.java

Content: 

/** 

 */

@Test public void testTruncate(){

  String expected="abc";

  assertTrue(AbstractAFPObject.truncate(expected,4) == expected);

  assertTrue(AbstractAFPObject.truncate(expected,3) == expected);

  assertEquals(AbstractAFPObject.truncate(expected + "d",3),expected);

  assertEquals(AbstractAFPObject.truncate(expected,0),"");

  try {

    assertTrue(AbstractAFPObject.truncate(null,4) == null);

    fail();

  }

 catch (  NullPointerException e) {

  }

}

Location: AbstractAFPObjectTest.java

Content: 

private void testWithGivenChunkSize(byte[] data,byte[] header,int chunkSize) throws IOException {

  ByteArrayOutputStream baos=new ByteArrayOutputStream();

  S.writeChunksToStream(data,header,0,chunkSize,baos);

  byte[] testData=baos.toByteArray();

  int numberOfFullDataChunks=data.length / chunkSize;

  int lastChunkSize=data.length % chunkSize;

  int lengthOfTestData=numberOfFullDataChunks * (chunkSize + header.length);

  lengthOfTestData+=lastChunkSize == 0 ? 0 : header.length + lastChunkSize;

  putLengthInHeader(header,chunkSize);

  assertEquals(lengthOfTestData,testData.length);

  int testIndex=0;

  int expectedIndex=0;

  for (int i=0; i < numberOfFullDataChunks; i++) {

    checkHeaderAndData(header,data,testData,expectedIndex,testIndex,chunkSize);

    expectedIndex+=chunkSize + header.length;

    testIndex+=chunkSize;

  }

  putLengthInHeader(header,lastChunkSize);

  if (lastChunkSize != 0) {

    checkHeaderAndData(header,data,testData,expectedIndex,testIndex,lastChunkSize);

  }

}

Location: AbstractAFPObjectTest.java

Content: 

/** 

 */

@Test public void testWriteChunksToStream() throws IOException {

  final byte[] data=new byte[256];

  int counter=0;

  for (int i=0; i < data.length; i++) {

    data[i]=(byte)counter++;

  }

  byte[] header=new byte[9];

  testWithGivenChunkSize(data,header,16);

  testWithGivenChunkSize(data,header,10);

  testWithGivenChunkSize(data,header,13);

}

Location: AbstractAFPObjectTest.java

Content: 

/** 

 */

@Test public void testwriteObjects(){

  final byte[][] expected={{(byte)0,(byte)1},{(byte)2,(byte)3},{(byte)4,(byte)5}};

  List<Streamable> objects=new ArrayList<Streamable>(){

{

      add(StreamableObject.instance(expected[0]));

      add(StreamableObject.instance(expected[1]));

      add(StreamableObject.instance(expected[2]));

    }

  }

;

  ByteArrayOutputStream baos=new ByteArrayOutputStream();

  try {

    getSut().writeObjects(objects,baos);

  }

 catch (  IOException e) {

    fail();

  }

  byte[] actual=baos.toByteArray();

  int index=0;

  for (  byte[] anExpected : expected) {

    for (    byte anAnExpected : anExpected) {

      assertTrue("" + index,actual[index] == anAnExpected);

      index++;

    }

  }

}

