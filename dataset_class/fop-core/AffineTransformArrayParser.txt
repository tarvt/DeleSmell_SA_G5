Location: AffineTransformArrayParser.java

Content: 

/** 

 * Utility method for creating an AffineTransform array.

 * @param r The reader used to read the transform specification.

 * @return the AffineTransform array

 * @throws ParseException if there's a parse error

 */

public static AffineTransform[] createAffineTransform(Reader r) throws ParseException {

  TransformListParser p=new TransformListParser();

  AffineTransformArrayParser th=new AffineTransformArrayParser();

  p.setTransformListHandler(th);

  p.parse(r);

  return th.getAffineTransforms();

}

Location: AffineTransformArrayParser.java

Content: 

/** 

 * Utility method for creating an AffineTransform.

 * @param s The transform specification.

 * @return the AffineTransform array

 * @throws ParseException if there's a parse error

 */

public static AffineTransform[] createAffineTransform(String s) throws ParseException {

  if (s == null) {

    return EMPTY_ARRAY;

  }

  TransformListParser p=new TransformListParser();

  AffineTransformArrayParser th=new AffineTransformArrayParser();

  p.setTransformListHandler(th);

  p.parse(s);

  return th.getAffineTransforms();

}

Location: AffineTransformArrayParser.java

Content: 

/** 

 * {@inheritDoc} 

 */

public void endTransformList() throws ParseException {

}

Location: AffineTransformArrayParser.java

Content: 

/** 

 * Returns the AffineTransform array initialized during the last parsing.

 * @return the array or null if this handler has not been used bya parser.

 */

public AffineTransform[] getAffineTransforms(){

  if (this.transforms == null) {

    return null;

  }

 else {

    int count=this.transforms.size();

    return (AffineTransform[])this.transforms.toArray(new AffineTransform[count]);

  }

}

Location: AffineTransformArrayParser.java

Content: 

/** 

 * {@inheritDoc} 

 */

public void matrix(float a,float b,float c,float d,float e,float f) throws ParseException {

  this.transforms.add(new AffineTransform(a,b,c,d,e,f));

}

Location: AffineTransformArrayParser.java

Content: 

/** 

 * {@inheritDoc} 

 */

public void rotate(float theta) throws ParseException {

  this.transforms.add(AffineTransform.getRotateInstance(Math.toRadians(theta)));

}

Location: AffineTransformArrayParser.java

Content: 

/** 

 * {@inheritDoc} 

 */

public void rotate(float theta,float cx,float cy) throws ParseException {

  AffineTransform at=AffineTransform.getRotateInstance(Math.toRadians(theta),cx,cy);

  this.transforms.add(at);

}

Location: AffineTransformArrayParser.java

Content: 

/** 

 * {@inheritDoc} 

 */

public void scale(float sx) throws ParseException {

  this.transforms.add(AffineTransform.getScaleInstance(sx,sx));

}

Location: AffineTransformArrayParser.java

Content: 

/** 

 * {@inheritDoc} 

 */

public void scale(float sx,float sy) throws ParseException {

  this.transforms.add(AffineTransform.getScaleInstance(sx,sy));

}

Location: AffineTransformArrayParser.java

Content: 

/** 

 * {@inheritDoc} 

 */

public void skewX(float skx) throws ParseException {

  this.transforms.add(AffineTransform.getShearInstance(Math.tan(Math.toRadians(skx)),0));

}

Location: AffineTransformArrayParser.java

Content: 

/** 

 * {@inheritDoc} 

 */

public void skewY(float sky) throws ParseException {

  this.transforms.add(AffineTransform.getShearInstance(0,Math.tan(Math.toRadians(sky))));

}

Location: AffineTransformArrayParser.java

Content: 

/** 

 * {@inheritDoc} 

 */

public void startTransformList() throws ParseException {

  this.transforms=new java.util.ArrayList();

}

Location: AffineTransformArrayParser.java

Content: 

/** 

 * {@inheritDoc} 

 */

public void translate(float tx) throws ParseException {

  AffineTransform at=AffineTransform.getTranslateInstance(tx,0);

  this.transforms.add(at);

}

Location: AffineTransformArrayParser.java

Content: 

/** 

 * {@inheritDoc} 

 */

public void translate(float tx,float ty) throws ParseException {

  AffineTransform at=AffineTransform.getTranslateInstance(tx,ty);

  this.transforms.add(at);

}

