Location: CrossReferenceStreamTestCase.java

Content: 

@Test public void testWithObjectStreams1() throws IOException {

  List<CompressedObjectReference> compressedObjectReferences=Arrays.asList(new CompressedObjectReference(new PDFObjectNumber(2),new PDFObjectNumber(1),0));

  test(Arrays.asList(0L,null),compressedObjectReferences);

}

Location: CrossReferenceStreamTestCase.java

Content: 

@Test public void testWithObjectStreams2() throws IOException {

  int numIndirectObjects=2;

  int numCompressedObjects=1;

  List<Long> indirectObjectOffsets=new ArrayList<Long>(numIndirectObjects + numCompressedObjects);

  for (long i=0; i < numIndirectObjects; i++) {

    indirectObjectOffsets.add(i);

  }

  List<CompressedObjectReference> compressedObjectReferences=new ArrayList<CompressedObjectReference>();

  for (int index=0; index < numCompressedObjects; index++) {

    indirectObjectOffsets.add(null);

    int obNum=numIndirectObjects + index + 1;

    compressedObjectReferences.add(new CompressedObjectReference(new PDFObjectNumber(obNum),new PDFObjectNumber(numIndirectObjects),index));

  }

  test(indirectObjectOffsets,compressedObjectReferences);

}

Location: CrossReferenceStreamTestCase.java

Content: 

private void test(List<Long> indirectObjectOffsets) throws IOException {

  List<CompressedObjectReference> compressedObjectReferences=Collections.emptyList();

  test(indirectObjectOffsets,compressedObjectReferences);

}

Location: CrossReferenceStreamTestCase.java

Content: 

private void test(List<Long> indirectObjectOffsets,List<CompressedObjectReference> compressedObjectReferences) throws IOException {

  this.uncompressedObjectOffsets=indirectObjectOffsets;

  this.compressedObjectReferences=compressedObjectReferences;

  runTest();

}

