Location: WordArea.java

Content: 

/** 

 * @return the array of letter adjust widths 

 */

public int[] getLetterAdjustArray(){

  return this.letterAdjust;

}

Location: WordArea.java

Content: 

/** 

 * @return Returns the word. 

 */

public String getWord(){

  return word;

}

Location: WordArea.java

Content: 

/** 

 * <p>Obtain per-character (glyph) position adjustments at a specified index position.</p> <p>If word has been reversed, then the position is relative to the reversed word.</p>

 * @param position the index of the (possibly reversed) character from which to obtain thelevel

 * @return an array of adjustments or null if none applies

 */

public int[] glyphPositionAdjustmentsAt(int position){

  if (position > word.length()) {

    throw new IndexOutOfBoundsException();

  }

 else   if (gposAdjustments != null) {

    return gposAdjustments[position];

  }

 else {

    return null;

  }

}

Location: WordArea.java

Content: 

public boolean isNextIsSpace(){

  return nextIsSpace;

}

Location: WordArea.java

Content: 

private static int[][] maybeAdjustLength(int[][] im,int length){

  if (im != null) {

    if (im.length == length) {

      return im;

    }

 else {

      int[][] imNew=new int[length][];

      for (int i=0, n=im.length; i < n; i++) {

        if (i < length) {

          imNew[i]=im[i];

        }

 else {

          break;

        }

      }

      return imNew;

    }

  }

 else {

    return im;

  }

}

Location: WordArea.java

Content: 

private static int[] maybePopulateLevels(int[] levels,int level,int count){

  if ((levels == null) && (level >= 0)) {

    levels=new int[count];

    Arrays.fill(levels,level);

  }

  return maybeAdjustLength(levels,count);

}

Location: WordArea.java

Content: 

/** 

 * <p>Perform mirroring on mirrorable characters.</p>

 */

public void mirror(){

  if (word.length() > 0) {

    word=CharMirror.mirror(word);

  }

}

Location: WordArea.java

Content: 

/** 

 * Create a word area

 * @param blockProgressionOffset the offset for this area

 * @param level the bidirectional embedding level (or -1 if not defined) for word as a group

 * @param word the word string

 * @param letterAdjust the letter adjust array (may be null)

 * @param levels array of per-character (glyph) bidirectional levels,in case word area is heterogenously leveled

 * @param gposAdjustments array of general position adjustments or null if none apply

 */

public WordArea(int blockProgressionOffset,int level,String word,int[] letterAdjust,int[] levels,int[][] gposAdjustments){

  this(blockProgressionOffset,level,word,letterAdjust,levels,gposAdjustments,false);

}

Location: WordArea.java

Content: 

public WordArea(int blockProgressionOffset,int level,String word,int[] letterAdjust,int[] levels,int[][] gposAdjustments,boolean reversed){

  this(blockProgressionOffset,level,word,letterAdjust,levels,gposAdjustments,reversed,false);

}

Location: WordArea.java

Content: 

/** 

 * Create a word area

 * @param blockProgressionOffset the offset for this area

 * @param level the bidirectional embedding level (or -1 if not defined) for word as a group

 * @param word the word string

 * @param letterAdjust the letter adjust array (may be null)

 * @param levels array of per-character (glyph) bidirectional levels,in case word area is heterogenously leveled

 * @param gposAdjustments array of general position adjustments or null if none apply

 * @param reversed true if word is known to be reversed at construction time

 */

public WordArea(int blockProgressionOffset,int level,String word,int[] letterAdjust,int[] levels,int[][] gposAdjustments,boolean reversed,boolean nextIsSpace){

  super(blockProgressionOffset,level);

  int length=(word != null) ? word.length() : 0;

  this.word=word;

  this.letterAdjust=maybeAdjustLength(letterAdjust,length);

  this.levels=maybePopulateLevels(levels,level,length);

  this.gposAdjustments=maybeAdjustLength(gposAdjustments,length);

  this.reversed=reversed;

  this.nextIsSpace=nextIsSpace;

}

