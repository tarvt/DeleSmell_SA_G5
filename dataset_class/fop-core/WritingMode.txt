Location: WritingMode.java

Content: 

/** 

 * Assign writing mode traits from this trait to the specified writing mode traits setter.

 * @param wms a writing mode traits setter

 * @param explicit true if writing mode property explicitly specified

 */

public void assignWritingModeTraits(WritingModeTraitsSetter wms,boolean explicit){

  Direction inlineProgressionDirection;

  Direction blockProgressionDirection;

  Direction columnProgressionDirection;

  Direction rowProgressionDirection;

  Direction shiftDirection;

switch (getEnumValue()) {

case Constants.EN_RL_TB:

    inlineProgressionDirection=Direction.RL;

  blockProgressionDirection=Direction.TB;

columnProgressionDirection=Direction.RL;

rowProgressionDirection=Direction.TB;

shiftDirection=Direction.BT;

break;

case Constants.EN_TB_LR:

inlineProgressionDirection=Direction.TB;

blockProgressionDirection=Direction.LR;

columnProgressionDirection=Direction.TB;

rowProgressionDirection=Direction.LR;

shiftDirection=Direction.RL;

break;

case Constants.EN_TB_RL:

inlineProgressionDirection=Direction.TB;

blockProgressionDirection=Direction.RL;

columnProgressionDirection=Direction.TB;

rowProgressionDirection=Direction.RL;

shiftDirection=Direction.LR;

break;

case Constants.EN_LR_TB:

default :

inlineProgressionDirection=Direction.LR;

blockProgressionDirection=Direction.TB;

columnProgressionDirection=Direction.LR;

rowProgressionDirection=Direction.TB;

shiftDirection=Direction.BT;

break;

}

wms.setInlineProgressionDirection(inlineProgressionDirection);

wms.setBlockProgressionDirection(blockProgressionDirection);

wms.setColumnProgressionDirection(columnProgressionDirection);

wms.setRowProgressionDirection(rowProgressionDirection);

wms.setShiftDirection(shiftDirection);

wms.setWritingMode(this,explicit);

}

Location: WritingMode.java

Content: 

/** 

 * Determine if WM is horizontal or not.

 * @return true if horizontal

 */

public boolean isHorizontal(){

switch (getEnumValue()) {

case Constants.EN_LR_TB:

case Constants.EN_RL_TB:

    return true;

case Constants.EN_TB_LR:

case Constants.EN_TB_RL:

  return false;

default :

assert false;

return true;

}

}

Location: WritingMode.java

Content: 

/** 

 * Determine if WM is vertical or not.

 * @return true if vertical

 */

public boolean isVertical(){

  return !isHorizontal();

}

Location: WritingMode.java

Content: 

/** 

 * Returns the enumeration/singleton object based on its name.

 * @param enumValue the enumeration value

 * @return the enumeration object

 */

public static WritingMode valueOf(int enumValue){

  for (  WritingMode writingMode : WRITING_MODES) {

    if (writingMode.getEnumValue() == enumValue) {

      return writingMode;

    }

  }

  throw new IllegalArgumentException("Illegal writing mode: " + enumValue);

}

Location: WritingMode.java

Content: 

private WritingMode(int index){

  super(WRITING_MODE_NAMES[index],WRITING_MODE_VALUES[index]);

}

