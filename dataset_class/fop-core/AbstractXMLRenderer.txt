Location: AbstractXMLRenderer.java

Content: 

/** 

 * @param userAgent the user agent that contains configuration details. This cannot be null.

 */

public AbstractXMLRenderer(FOUserAgent userAgent){

  super(userAgent);

}

Location: AbstractXMLRenderer.java

Content: 

/** 

 * Adds a new attribute to the protected member variable "atts".

 * @param name name of the attribute

 * @param value value of the attribute

 */

protected void addAttribute(QName name,String value){

  atts.addAttribute(name.getNamespaceURI(),name.getLocalName(),name.getQName(),CDATA,value);

}

Location: AbstractXMLRenderer.java

Content: 

/** 

 * Adds a new attribute to the protected member variable "atts".

 * @param name name of the attribute

 * @param value value of the attribute

 */

protected void addAttribute(String name,int value){

  addAttribute(name,Integer.toString(value));

}

Location: AbstractXMLRenderer.java

Content: 

/** 

 * Adds a new attribute to the protected member variable "atts".

 * @param name name of the attribute

 * @param rect a Rectangle2D to format and use as attribute value

 */

protected void addAttribute(String name,Rectangle2D rect){

  addAttribute(name,createString(rect));

}

Location: AbstractXMLRenderer.java

Content: 

/** 

 * Adds a new attribute to the protected member variable "atts".

 * @param name name of the attribute

 * @param value value of the attribute

 */

protected void addAttribute(String name,String value){

  atts.addAttribute(NS,name,name,CDATA,value);

}

Location: AbstractXMLRenderer.java

Content: 

/** 

 * Sends plain text to the XML

 * @param text the text

 */

protected void characters(String text){

  try {

    char[] ca=text.toCharArray();

    handler.characters(ca,0,ca.length);

  }

 catch (  SAXException saxe) {

    handleSAXException(saxe);

  }

}

Location: AbstractXMLRenderer.java

Content: 

/** 

 * Writes a comment to the generated XML.

 * @param comment the comment

 */

protected void comment(String comment){

  if (handler instanceof LexicalHandler) {

    try {

      ((LexicalHandler)handler).comment(comment.toCharArray(),0,comment.length());

    }

 catch (    SAXException saxe) {

      handleSAXException(saxe);

    }

  }

}

Location: AbstractXMLRenderer.java

Content: 

private String createString(Rectangle2D rect){

  return "" + (int)rect.getX() + " "+ (int)rect.getY()+ " "+ (int)rect.getWidth()+ " "+ (int)rect.getHeight();

}

Location: AbstractXMLRenderer.java

Content: 

/** 

 * Handle document extension attachments. 

 */

protected void handleDocumentExtensionAttachments(){

  if (extensionAttachments != null && extensionAttachments.size() > 0) {

    handleExtensionAttachments(extensionAttachments);

    extensionAttachments.clear();

  }

}

Location: AbstractXMLRenderer.java

Content: 

/** 

 * Handles a list of extension attachments

 * @param attachments a list of extension attachments

 */

protected abstract void handleExtensionAttachments(List attachments);

Location: AbstractXMLRenderer.java

Content: 

/** 

 * Handles page extension attachments

 * @param page the page viewport

 */

protected void handlePageExtensionAttachments(PageViewport page){

  handleExtensionAttachments(page.getExtensionAttachments());

}

Location: AbstractXMLRenderer.java

Content: 

/** 

 * Handles SAXExceptions.

 * @param saxe the SAXException to handle

 */

protected void handleSAXException(SAXException saxe){

  throw new RuntimeException(saxe.getMessage());

}

Location: AbstractXMLRenderer.java

Content: 

/** 

 * {@inheritDoc} 

 */

public void processOffDocumentItem(OffDocumentItem oDI){

  if (oDI instanceof BookmarkData) {

    renderBookmarkTree((BookmarkData)oDI);

  }

 else   if (oDI instanceof OffDocumentExtensionAttachment) {

    ExtensionAttachment attachment=((OffDocumentExtensionAttachment)oDI).getAttachment();

    if (extensionAttachments == null) {

      extensionAttachments=new java.util.ArrayList();

    }

    extensionAttachments.add(attachment);

  }

 else {

    String warn="Ignoring OffDocumentItem: " + oDI;

    log.warn(warn);

  }

}

Location: AbstractXMLRenderer.java

Content: 

/** 

 * Renders a bookmark tree

 * @param odi the bookmark data

 */

protected abstract void renderBookmarkTree(BookmarkData odi);

Location: AbstractXMLRenderer.java

Content: 

/** 

 * Sets an outside TransformerHandler to use instead of the default one create in this class in startRenderer().

 * @param handler Overriding TransformerHandler

 */

public void setContentHandler(ContentHandler handler){

  this.handler=handler;

}

Location: AbstractXMLRenderer.java

Content: 

/** 

 * {@inheritDoc} 

 */

public void startRenderer(OutputStream outputStream) throws IOException {

  if (this.handler == null) {

    SAXTransformerFactory factory=(SAXTransformerFactory)SAXTransformerFactory.newInstance();

    try {

      TransformerHandler transformerHandler=factory.newTransformerHandler();

      setContentHandler(transformerHandler);

      StreamResult res=new StreamResult(outputStream);

      transformerHandler.setResult(res);

    }

 catch (    TransformerConfigurationException tce) {

      throw new RuntimeException(tce.getMessage());

    }

    this.out=outputStream;

  }

  try {

    handler.startDocument();

  }

 catch (  SAXException saxe) {

    handleSAXException(saxe);

  }

}

Location: AbstractXMLRenderer.java

Content: 

/** 

 * {@inheritDoc} 

 */

public void stopRenderer() throws IOException {

  try {

    handler.endDocument();

  }

 catch (  SAXException saxe) {

    handleSAXException(saxe);

  }

  if (this.out != null) {

    this.out.flush();

  }

}

