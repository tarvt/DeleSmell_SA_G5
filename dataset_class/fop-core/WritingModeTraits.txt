Location: WritingModeTraits.java

Content: 

/** 

 * @param writingMode the "writing-mode" trait.

 */

public void assignWritingModeTraits(WritingMode writingMode,boolean explicit){

  writingMode.assignWritingModeTraits(this,explicit);

}

Location: WritingModeTraits.java

Content: 

/** 

 * @return the "block-progression-direction" trait.

 */

public Direction getBlockProgressionDirection(){

  return blockProgressionDirection;

}

Location: WritingModeTraits.java

Content: 

/** 

 * @return the "column-progression-direction" trait.

 */

public Direction getColumnProgressionDirection(){

  return columnProgressionDirection;

}

Location: WritingModeTraits.java

Content: 

/** 

 * @return the "explicit-writing-mode" trait.

 */

public boolean getExplicitWritingMode(){

  return explicit;

}

Location: WritingModeTraits.java

Content: 

/** 

 * @return the "inline-progression-direction" trait.

 */

public Direction getInlineProgressionDirection(){

  return inlineProgressionDirection;

}

Location: WritingModeTraits.java

Content: 

/** 

 * @return the "row-progression-direction" trait.

 */

public Direction getRowProgressionDirection(){

  return rowProgressionDirection;

}

Location: WritingModeTraits.java

Content: 

/** 

 * @return the "shift-direction" trait.

 */

public Direction getShiftDirection(){

  return shiftDirection;

}

Location: WritingModeTraits.java

Content: 

/** 

 * @return the "writing-mode" trait.

 */

public WritingMode getWritingMode(){

  return writingMode;

}

Location: WritingModeTraits.java

Content: 

/** 

 * Helper function to find the writing mode traits getter (if any) that applies for a given FO node.

 * @param fn the node to start searching from

 * @return the applicable writing mode traits getter, or null if none applies

 */

public static WritingModeTraitsGetter getWritingModeTraitsGetter(org.apache.fop.fo.FONode fn){

  for (org.apache.fop.fo.FONode n=fn; n != null; n=n.getParent()) {

    if (n instanceof WritingModeTraitsGetter) {

      return (WritingModeTraitsGetter)n;

    }

  }

  return null;

}

Location: WritingModeTraits.java

Content: 

/** 

 * @param direction the "block-progression-direction" trait.

 */

public void setBlockProgressionDirection(Direction direction){

  this.blockProgressionDirection=direction;

}

Location: WritingModeTraits.java

Content: 

/** 

 * @param direction the "column-progression-direction" trait.

 */

public void setColumnProgressionDirection(Direction direction){

  this.columnProgressionDirection=direction;

}

Location: WritingModeTraits.java

Content: 

/** 

 * @param direction the "inline-progression-direction" trait.

 */

public void setInlineProgressionDirection(Direction direction){

  this.inlineProgressionDirection=direction;

}

Location: WritingModeTraits.java

Content: 

/** 

 * @param direction the "row-progression-direction" trait.

 */

public void setRowProgressionDirection(Direction direction){

  this.rowProgressionDirection=direction;

}

Location: WritingModeTraits.java

Content: 

/** 

 * @param direction the "shift-direction" trait.

 */

public void setShiftDirection(Direction direction){

  this.shiftDirection=direction;

}

Location: WritingModeTraits.java

Content: 

/** 

 * @param writingMode the "writing-mode" trait.

 */

public void setWritingMode(WritingMode writingMode,boolean explicit){

  this.writingMode=writingMode;

  this.explicit=explicit;

}

Location: WritingModeTraits.java

Content: 

/** 

 * Default writing mode traits constructor.

 */

public WritingModeTraits(){

  this(WritingMode.LR_TB,false);

}

Location: WritingModeTraits.java

Content: 

/** 

 * Construct writing mode traits using the specified writing mode.

 * @param writingMode a writing mode traits object

 */

public WritingModeTraits(WritingMode writingMode,boolean explicit){

  assignWritingModeTraits(writingMode,explicit);

}

