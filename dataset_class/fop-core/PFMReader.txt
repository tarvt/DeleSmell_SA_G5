Location: PFMReader.java

Content: 

/** 

 * Generates the font metrics file from the PFM file.

 * @param pfm The PFM file to generate the font metrics from.

 * @param fontName name of the font

 * @param className class name for the font

 * @param resource path to the font as embedded resource

 * @param file path to the font as file

 * @return  The DOM document representing the font metrics file.

 */

public org.w3c.dom.Document constructFontXML(PFMFile pfm,String fontName,String className,String resource,String file){

  log.info("Creating xml font file...");

  log.info("");

  Document doc;

  try {

    DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();

    doc=factory.newDocumentBuilder().newDocument();

  }

 catch (  javax.xml.parsers.ParserConfigurationException e) {

    log.error("Can't create DOM implementation",e);

    return null;

  }

  Element root=doc.createElement("font-metrics");

  doc.appendChild(root);

  root.setAttribute("type","TYPE1");

  Element el=doc.createElement("font-name");

  root.appendChild(el);

  el.appendChild(doc.createTextNode(pfm.getPostscriptName()));

  el=doc.createElement("embed");

  root.appendChild(el);

  if (file != null) {

    el.setAttribute("file",file);

  }

  if (resource != null) {

    el.setAttribute("class",resource);

  }

  el=doc.createElement("encoding");

  root.appendChild(el);

  el.appendChild(doc.createTextNode(pfm.getCharSetName() + "Encoding"));

  el=doc.createElement("cap-height");

  root.appendChild(el);

  Integer value=pfm.getCapHeight();

  el.appendChild(doc.createTextNode(value.toString()));

  el=doc.createElement("x-height");

  root.appendChild(el);

  value=pfm.getXHeight();

  el.appendChild(doc.createTextNode(value.toString()));

  el=doc.createElement("ascender");

  root.appendChild(el);

  value=pfm.getLowerCaseAscent();

  el.appendChild(doc.createTextNode(value.toString()));

  el=doc.createElement("descender");

  root.appendChild(el);

  value=pfm.getLowerCaseDescent();

  el.appendChild(doc.createTextNode(value.toString()));

  Element bbox=doc.createElement("bbox");

  root.appendChild(bbox);

  int[] bb=pfm.getFontBBox();

  final String[] names={"left","bottom","right","top"};

  for (int i=0; i < names.length; i++) {

    el=doc.createElement(names[i]);

    bbox.appendChild(el);

    value=bb[i];

    el.appendChild(doc.createTextNode(value.toString()));

  }

  el=doc.createElement("flags");

  root.appendChild(el);

  value=pfm.getFlags();

  el.appendChild(doc.createTextNode(value.toString()));

  el=doc.createElement("stemv");

  root.appendChild(el);

  value=pfm.getStemV();

  el.appendChild(doc.createTextNode(value.toString()));

  el=doc.createElement("italicangle");

  root.appendChild(el);

  value=pfm.getItalicAngle();

  el.appendChild(doc.createTextNode(value.toString()));

  el=doc.createElement("first-char");

  root.appendChild(el);

  value=(int)pfm.getFirstChar();

  el.appendChild(doc.createTextNode(value.toString()));

  el=doc.createElement("last-char");

  root.appendChild(el);

  value=(int)pfm.getLastChar();

  el.appendChild(doc.createTextNode(value.toString()));

  Element widths=doc.createElement("widths");

  root.appendChild(widths);

  for (short i=pfm.getFirstChar(); i <= pfm.getLastChar(); i++) {

    el=doc.createElement("char");

    widths.appendChild(el);

    el.setAttribute("idx",Integer.toString(i));

    el.setAttribute("wdt",Integer.toString(pfm.getCharWidth(i)));

  }

  for (  Object kpx1 : pfm.getKerning().keySet()) {

    el=doc.createElement("kerning");

    el.setAttribute("kpx1",kpx1.toString());

    root.appendChild(el);

    Element el2=null;

    Map h2=(Map)pfm.getKerning().get(kpx1);

    for (    Object o : h2.entrySet()) {

      Map.Entry entry=(Map.Entry)o;

      Integer kpx2=(Integer)entry.getKey();

      el2=doc.createElement("pair");

      el2.setAttribute("kpx2",kpx2.toString());

      Integer val=(Integer)entry.getValue();

      el2.setAttribute("kern",val.toString());

      el.appendChild(el2);

    }

  }

  return doc;

}

Location: PFMReader.java

Content: 

/** 

 * Read a PFM file and returns it as an object.

 * @param filename The filename of the PFM file.

 * @return  The PFM as an object.

 * @throws IOException In case of an I/O problem

 */

public PFMFile loadPFM(String filename) throws IOException {

  log.info("Reading " + filename + "...");

  log.info("");

  InputStream in=new java.io.FileInputStream(filename);

  try {

    PFMFile pfm=new PFMFile();

    pfm.load(in);

    return pfm;

  }

  finally {

    in.close();

  }

}

Location: PFMReader.java

Content: 

/** 

 * Main constructor.

 */

public PFMReader(){

  super();

}

Location: PFMReader.java

Content: 

/** 

 * Displays a preview of the PFM file on the console.

 * @param pfm The PFM file to preview.

 */

public void preview(PFMFile pfm){

  if (log != null && log.isInfoEnabled()) {

    log.info("Font: " + pfm.getWindowsName());

    log.info("Name: " + pfm.getPostscriptName());

    log.info("CharSet: " + pfm.getCharSetName());

    log.info("CapHeight: " + pfm.getCapHeight());

    log.info("XHeight: " + pfm.getXHeight());

    log.info("LowerCaseAscent: " + pfm.getLowerCaseAscent());

    log.info("LowerCaseDescent: " + pfm.getLowerCaseDescent());

    log.info("Having widths for " + (pfm.getLastChar() - pfm.getFirstChar()) + " characters ("+ pfm.getFirstChar()+ "-"+ pfm.getLastChar()+ ").");

    log.info("for example: Char " + pfm.getFirstChar() + " has a width of "+ pfm.getCharWidth(pfm.getFirstChar()));

    log.info("");

  }

}

