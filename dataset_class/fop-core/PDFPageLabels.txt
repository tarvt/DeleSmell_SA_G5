Location: PDFPageLabels.java

Content: 

/** 

 * Adds a new entry, if necessary, to the /PageLabels dictionary.

 * @param index the page index (0 for page 1)

 * @param pageLabel the page number as a string

 */

public void addPageLabel(int index,String pageLabel){

  boolean addNewPageLabel=false;

  String padding="00000000";

  int currentPageNumber=0;

  int currentPageLabelType=0;

  String currentZeroPaddingPrefix="";

  if (MATCH_DECIMAL.matcher(pageLabel).matches()) {

    currentPageLabelType=DECIMAL;

    currentPageNumber=Integer.parseInt(pageLabel);

    int zeroPadding=0;

    if (pageLabel.charAt(zeroPadding) == '0') {

      do {

        zeroPadding++;

      }

 while (pageLabel.charAt(zeroPadding) == '0');

      currentZeroPaddingPrefix=padding.substring(0,zeroPadding);

      if (currentZeroPaddingPrefix.length() != lastZeroPaddingPrefix.length()) {

        addNewPageLabel=true;

      }

    }

 else {

      if (lastZeroPaddingPrefix.length() != 0) {

        addNewPageLabel=true;

      }

    }

  }

 else   if (MATCH_ROMAN.matcher(pageLabel).matches()) {

    if (pageLabel.toLowerCase().equals(pageLabel)) {

      currentPageLabelType=LOWER_ROMAN;

    }

 else {

      currentPageLabelType=UPPER_ROMAN;

    }

    currentPageNumber=romanToArabic(pageLabel);

  }

 else   if (MATCH_LETTER.matcher(pageLabel).matches()) {

    char c=pageLabel.charAt(0);

    if (c > 'Z') {

      currentPageLabelType=LOWER_ALPHA;

    }

 else {

      currentPageLabelType=UPPER_ALPHA;

    }

    currentPageNumber=alphabeticToArabic(c);

  }

 else {

    currentPageLabelType=PREFIX;

    addNewPageLabel=true;

  }

  if (lastPageLabelType != currentPageLabelType) {

    addNewPageLabel=true;

  }

  if (lastPageNumber != currentPageNumber - 1) {

    addNewPageLabel=true;

  }

  if (addNewPageLabel) {

    PDFNumsArray nums=getNums();

    PDFDictionary dict=new PDFDictionary(nums);

    PDFName pdfName=null;

switch (currentPageLabelType) {

case PREFIX:

      dict.put("P",pageLabel);

    break;

default :

switch (currentPageLabelType) {

case DECIMAL:

    pdfName=S_DECIMAL;

  if (currentZeroPaddingPrefix.length() != 0) {

    dict.put("P",currentZeroPaddingPrefix);

  }

break;

case LOWER_ROMAN:

pdfName=S_LOWER_ROMAN;

break;

case UPPER_ROMAN:

pdfName=S_UPPER_ROMAN;

break;

case LOWER_ALPHA:

pdfName=S_LOWER_ALPHA;

break;

case UPPER_ALPHA:

pdfName=S_UPPER_ALPHA;

break;

default :

}

dict.put("S",pdfName);

if (currentPageNumber != 1) {

dict.put("St",currentPageNumber);

}

}

nums.put(index,dict);

}

lastPageLabelType=currentPageLabelType;

lastPageNumber=currentPageNumber;

lastZeroPaddingPrefix=currentZeroPaddingPrefix;

}

Location: PDFPageLabels.java

Content: 

private int alphabeticToArabic(char c){

  int arabic=Character.toLowerCase(c) - 'a' + 1;

  return arabic;

}

Location: PDFPageLabels.java

Content: 

/** 

 * Create the /PageLabels dictionary

 */

public PDFPageLabels(){

  super();

}

Location: PDFPageLabels.java

Content: 

private int romanToArabic(String roman){

  int arabic=0;

  int previousValue=0;

  int newValue=0;

  String upperRoman=roman.toUpperCase();

  for (int i=0; i < upperRoman.length(); i++) {

    char romanDigit=upperRoman.charAt(i);

switch (romanDigit) {

case 'I':

      newValue=1;

    break;

case 'V':

  newValue=5;

break;

case 'X':

newValue=10;

break;

case 'L':

newValue=50;

break;

case 'C':

newValue=100;

break;

case 'D':

newValue=500;

break;

case 'M':

newValue=1000;

break;

default :

}

if (previousValue < newValue) {

arabic-=previousValue;

}

 else {

arabic+=previousValue;

}

previousValue=newValue;

}

arabic+=previousValue;

return arabic;

}

