Location: FontFileFinder.java

Content: 

/** 

 * Default constructor

 * @param listener for throwing font related events

 */

public FontFileFinder(FontEventListener listener){

  this(DEFAULT_DEPTH_LIMIT,listener);

}

Location: FontFileFinder.java

Content: 

/** 

 * Constructor

 * @param depthLimit recursion depth limit

 * @param listener for throwing font related events

 */

public FontFileFinder(int depthLimit,FontEventListener listener){

  super(getDirectoryFilter(),getFileFilter(),depthLimit);

  eventListener=listener;

}

Location: FontFileFinder.java

Content: 

/** 

 * Font directory filter.  Currently ignores hidden directories.

 * @return IOFileFilter font directory filter

 */

protected static IOFileFilter getDirectoryFilter(){

  return FileFilterUtils.andFileFilter(FileFilterUtils.directoryFileFilter(),FileFilterUtils.notFileFilter(FileFilterUtils.prefixFileFilter(".")));

}

Location: FontFileFinder.java

Content: 

/** 

 * Font file filter.  Currently searches for files with .ttf, .ttc, .otf, and .pfb extensions.

 * @return IOFileFilter font file filter

 */

protected static IOFileFilter getFileFilter(){

  return FileFilterUtils.andFileFilter(FileFilterUtils.fileFileFilter(),new WildcardFileFilter(new String[]{"*.ttf","*.otf","*.pfb","*.ttc"},IOCase.INSENSITIVE));

}

Location: FontFileFinder.java

Content: 

/** 

 * @param directory the directory being processed

 * @param depth the current directory level

 * @param results the collection of results objects{@inheritDoc}

 */

@Override protected void handleDirectoryEnd(File directory,int depth,Collection results){

  if (log.isDebugEnabled()) {

    log.debug(directory + ": found " + results.size()+ " font"+ ((results.size() == 1) ? "" : "s"));

  }

}

Location: FontFileFinder.java

Content: 

/** 

 * @param directory directory to handle

 * @param depth recursion depth

 * @param results collection

 * @return whether directory should be handled{@inheritDoc}

 */

@Override protected boolean handleDirectory(File directory,int depth,Collection results){

  return true;

}

Location: FontFileFinder.java

Content: 

/** 

 * @param file file to handle

 * @param depth recursion depth

 * @param results collection{@inheritDoc}

 */

@Override protected void handleFile(File file,int depth,Collection results){

  try {

    results.add(file.toURI().toURL());

  }

 catch (  MalformedURLException e) {

    log.debug("MalformedURLException" + e.getMessage());

  }

}

