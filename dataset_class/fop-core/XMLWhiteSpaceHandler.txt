Location: XMLWhiteSpaceHandler.java

Content: 

private void addPendingInline(){

  if (pendingInlines == null) {

    pendingInlines=new java.util.ArrayList(5);

  }

  pendingInlines.add(new PendingInline(firstWhiteSpaceInSeq));

}

Location: XMLWhiteSpaceHandler.java

Content: 

private void handlePendingInlines(){

  if (!(pendingInlines == null || pendingInlines.isEmpty())) {

    if (nonWhiteSpaceCount == 0) {

      PendingInline p;

      for (int i=pendingInlines.size(); --i >= 0; ) {

        p=(PendingInline)pendingInlines.get(i);

        charIter=(RecursiveCharIterator)p.firstTrailingWhiteSpace;

        handleWhiteSpace();

        pendingInlines.remove(p);

      }

    }

 else {

      pendingInlines.clear();

    }

  }

}

Location: XMLWhiteSpaceHandler.java

Content: 

private void handleWhiteSpace(){

  EOLchecker lfCheck=new EOLchecker(charIter);

  nonWhiteSpaceCount=0;

  while (charIter.hasNext()) {

    if (!inWhiteSpace) {

      firstWhiteSpaceInSeq=charIter.mark();

    }

    char currentChar=charIter.nextChar();

    int currentCharClass=CharUtilities.classOf(currentChar);

    if (currentCharClass == CharUtilities.LINEFEED && linefeedTreatment == Constants.EN_TREAT_AS_SPACE) {

      currentChar='\u0020';

      charIter.replaceChar('\u0020');

      currentCharClass=CharUtilities.classOf(currentChar);

    }

switch (CharUtilities.classOf(currentChar)) {

case CharUtilities.XMLWHITESPACE:

      if (inWhiteSpace && whiteSpaceCollapse == Constants.EN_TRUE) {

        charIter.remove();

      }

 else {

        boolean bIgnore=false;

switch (whiteSpaceTreatment) {

case Constants.EN_IGNORE:

          bIgnore=true;

        break;

case Constants.EN_IGNORE_IF_BEFORE_LINEFEED:

      bIgnore=lfCheck.beforeLinefeed();

    break;

case Constants.EN_IGNORE_IF_SURROUNDING_LINEFEED:

  bIgnore=afterLinefeed || lfCheck.beforeLinefeed();

break;

case Constants.EN_IGNORE_IF_AFTER_LINEFEED:

bIgnore=afterLinefeed;

break;

case Constants.EN_PRESERVE:

break;

default :

}

if (bIgnore) {

charIter.remove();

}

 else {

inWhiteSpace=true;

if (currentChar != '\u0020') {

charIter.replaceChar('\u0020');

}

}

}

break;

case CharUtilities.LINEFEED:

switch (linefeedTreatment) {

case Constants.EN_IGNORE:

charIter.remove();

break;

case Constants.EN_TREAT_AS_ZERO_WIDTH_SPACE:

charIter.replaceChar(CharUtilities.ZERO_WIDTH_SPACE);

inWhiteSpace=false;

break;

case Constants.EN_PRESERVE:

lfCheck.reset();

inWhiteSpace=false;

afterLinefeed=true;

break;

default :

}

break;

case CharUtilities.EOT:

default :

inWhiteSpace=false;

afterLinefeed=false;

nonWhiteSpaceCount++;

lfCheck.reset();

break;

}

}

}

Location: XMLWhiteSpaceHandler.java

Content: 

/** 

 * Handle white-space for the fo that is passed in, starting at firstTextNode (when a nested FO is encountered)

 * @param fo    the FO for which to handle white-space

 * @param firstTextNode the node at which to start

 */

public void handleWhiteSpace(FObjMixed fo,FONode firstTextNode){

  handleWhiteSpace(fo,firstTextNode,null);

}

Location: XMLWhiteSpaceHandler.java

Content: 

/** 

 * Handle white-space for the fo that is passed in, starting at firstTextNode

 * @param fo    the FO for which to handle white-space

 * @param firstTextNode the node at which to start

 * @param nextChild the node that will be added to the listafter firstTextNode

 */

public void handleWhiteSpace(FObjMixed fo,FONode firstTextNode,FONode nextChild){

  Block currentBlock=null;

  int foId=fo.getNameId();

switch (foId) {

case Constants.FO_BLOCK:

    currentBlock=(Block)fo;

  if (nestedBlockStack.empty() || fo != nestedBlockStack.peek()) {

    if (nextChild != null) {

      nestedBlockStack.push(currentBlock);

    }

  }

 else {

    if (nextChild == null) {

      nestedBlockStack.pop();

    }

  }

break;

case Constants.FO_RETRIEVE_MARKER:

FONode ancestor=fo;

do {

ancestor=ancestor.getParent();

}

 while (ancestor.getNameId() != Constants.FO_BLOCK && ancestor.getNameId() != Constants.FO_STATIC_CONTENT);

if (ancestor.getNameId() == Constants.FO_BLOCK) {

currentBlock=(Block)ancestor;

nestedBlockStack.push(currentBlock);

}

break;

default :

if (!nestedBlockStack.empty()) {

currentBlock=(Block)nestedBlockStack.peek();

}

}

if (currentBlock != null) {

linefeedTreatment=currentBlock.getLinefeedTreatment();

whiteSpaceCollapse=currentBlock.getWhitespaceCollapse();

whiteSpaceTreatment=currentBlock.getWhitespaceTreatment();

}

 else {

linefeedTreatment=Constants.EN_TREAT_AS_SPACE;

whiteSpaceCollapse=Constants.EN_TRUE;

whiteSpaceTreatment=Constants.EN_IGNORE_IF_SURROUNDING_LINEFEED;

}

endOfBlock=(nextChild == null && fo == currentBlock);

if (firstTextNode == null) {

afterLinefeed=(fo == currentBlock && fo.firstChild == null);

nonWhiteSpaceCount=0;

if (endOfBlock) {

handlePendingInlines();

}

return;

}

charIter=new RecursiveCharIterator(fo,firstTextNode);

inWhiteSpace=false;

if (firstTextNode.siblings != null && firstTextNode.siblings[0] != null && firstTextNode.siblings[0].getNameId() == Constants.FO_FLOAT) {

inWhiteSpace=((Float)firstTextNode.siblings[0]).getInWhiteSpace();

}

if (fo == currentBlock || currentBlock == null || (foId == Constants.FO_RETRIEVE_MARKER && fo.getParent() == currentBlock)) {

if (firstTextNode == fo.firstChild) {

afterLinefeed=true;

}

 else {

int previousChildId=firstTextNode.siblings[0].getNameId();

afterLinefeed=(previousChildId == Constants.FO_BLOCK || previousChildId == Constants.FO_TABLE_AND_CAPTION || previousChildId == Constants.FO_TABLE || previousChildId == Constants.FO_LIST_BLOCK || previousChildId == Constants.FO_BLOCK_CONTAINER);

}

}

if (foId == Constants.FO_WRAPPER) {

FONode parent=fo.parent;

int parentId=parent.getNameId();

while (parentId == Constants.FO_WRAPPER) {

parent=parent.parent;

parentId=parent.getNameId();

}

if (parentId == Constants.FO_FLOW || parentId == Constants.FO_STATIC_CONTENT || parentId == Constants.FO_BLOCK_CONTAINER || parentId == Constants.FO_TABLE_CELL) {

endOfBlock=(nextChild == null);

}

}

if (nextChild != null) {

int nextChildId=nextChild.getNameId();

nextChildIsBlockLevel=(nextChildId == Constants.FO_BLOCK || nextChildId == Constants.FO_TABLE_AND_CAPTION || nextChildId == Constants.FO_TABLE || nextChildId == Constants.FO_LIST_BLOCK || nextChildId == Constants.FO_BLOCK_CONTAINER);

}

 else {

nextChildIsBlockLevel=false;

}

handleWhiteSpace();

if (fo == currentBlock && (endOfBlock || nextChildIsBlockLevel)) {

handlePendingInlines();

}

if (nextChild == null) {

if (fo != currentBlock) {

if (nonWhiteSpaceCount > 0 && pendingInlines != null) {

pendingInlines.clear();

}

if (inWhiteSpace) {

addPendingInline();

}

}

 else {

if (!nestedBlockStack.empty()) {

nestedBlockStack.pop();

}

charIter=null;

firstWhiteSpaceInSeq=null;

}

}

if (nextChild instanceof Float) {

((Float)nextChild).setInWhiteSpace(inWhiteSpace);

}

}

