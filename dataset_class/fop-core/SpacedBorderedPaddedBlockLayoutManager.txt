Location: SpacedBorderedPaddedBlockLayoutManager.java

Content: 

public void notifyBorder(RelSide side,MinOptMax effectiveLength){

  if (effectiveLength == null) {

    if (RelSide.BEFORE == side) {

      this.discardBorderBefore=true;

    }

 else {

      this.discardBorderAfter=true;

    }

  }

  if (LOG.isDebugEnabled()) {

    LOG.debug(this + ": Border " + side+ " -> "+ effectiveLength);

  }

}

Location: SpacedBorderedPaddedBlockLayoutManager.java

Content: 

public void notifyPadding(RelSide side,MinOptMax effectiveLength){

  if (effectiveLength == null) {

    if (RelSide.BEFORE == side) {

      this.discardPaddingBefore=true;

    }

 else {

      this.discardPaddingAfter=true;

    }

  }

  if (LOG.isDebugEnabled()) {

    LOG.debug(this + ": Padding " + side+ " -> "+ effectiveLength);

  }

}

Location: SpacedBorderedPaddedBlockLayoutManager.java

Content: 

public void notifySpace(RelSide side,MinOptMax effectiveLength){

  if (RelSide.BEFORE == side) {

    if (LOG.isDebugEnabled()) {

      LOG.debug(this + ": Space " + side+ ", "+ this.effSpaceBefore+ "-> "+ effectiveLength);

    }

    this.effSpaceBefore=effectiveLength;

  }

 else {

    if (LOG.isDebugEnabled()) {

      LOG.debug(this + ": Space " + side+ ", "+ this.effSpaceAfter+ "-> "+ effectiveLength);

    }

    this.effSpaceAfter=effectiveLength;

  }

}

Location: SpacedBorderedPaddedBlockLayoutManager.java

Content: 

public SpacedBorderedPaddedBlockLayoutManager(FObj node){

  super(node);

}

