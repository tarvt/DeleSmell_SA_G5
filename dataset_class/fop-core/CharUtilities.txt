Location: CharUtilities.java

Content: 

/** 

 * Convert a single unicode scalar value to an XML numeric character reference. If in the BMP, four digits are used, otherwise 6 digits are used.

 * @param c a unicode scalar value

 * @return a string representing a numeric character reference

 */

public static String charToNCRef(int c){

  StringBuffer sb=new StringBuffer();

  for (int i=0, nDigits=(c > 0xFFFF) ? 6 : 4; i < nDigits; i++, c>>=4) {

    int d=c & 0xF;

    char hd;

    if (d < 10) {

      hd=(char)((int)'0' + d);

    }

 else {

      hd=(char)((int)'A' + (d - 10));

    }

    sb.append(hd);

  }

  return "&#x" + sb.reverse() + ";";

}

Location: CharUtilities.java

Content: 

/** 

 * Utility class: Constructor prevents instantiating when subclassed.

 */

protected CharUtilities(){

  throw new UnsupportedOperationException();

}

Location: CharUtilities.java

Content: 

/** 

 * Return the appropriate CharClass constant for the type of the passed character.

 * @param c character to inspect

 * @return the determined character class

 */

public static int classOf(int c){

switch (c) {

case CODE_EOT:

    return EOT;

case LINEFEED_CHAR:

  return LINEFEED;

case SPACE:

case CARRIAGE_RETURN:

case TAB:

return XMLWHITESPACE;

default :

return isAnySpace(c) ? UCWHITESPACE : NONWHITESPACE;

}

}

Location: CharUtilities.java

Content: 

/** 

 * Creates an iterator to iter a  {@link CharSequence} codepoints.

 * @see #codepointsIter(CharSequence,int,int)

 * @param s {@link CharSequence} to iter

 * @return codepoint iterator for the given {@link CharSequence}.

 */

public static Iterable<Integer> codepointsIter(final CharSequence s){

  return codepointsIter(s,0,s.length());

}

Location: CharUtilities.java

Content: 

/** 

 * Creates an iterator to iter a sub-CharSequence codepoints.

 * @see <a href="http://bugs.java.com/bugdatabase/view_bug.do?bug_id=5003547">Bug JDK-5003547</a>

 * @param s {@link CharSequence} to iter

 * @param beginIndex lower range

 * @param endIndex upper range

 * @return codepoint iterator for the given sub-CharSequence.

 */

public static Iterable<Integer> codepointsIter(final CharSequence s,final int beginIndex,final int endIndex){

  if (beginIndex < 0) {

    throw new StringIndexOutOfBoundsException(beginIndex);

  }

  if (endIndex > s.length()) {

    throw new StringIndexOutOfBoundsException(endIndex);

  }

  int subLen=endIndex - beginIndex;

  if (subLen < 0) {

    throw new StringIndexOutOfBoundsException(subLen);

  }

  return new Iterable<Integer>(){

    public Iterator<Integer> iterator(){

      return new Iterator<Integer>(){

        int nextIndex=beginIndex;

        public boolean hasNext(){

          return nextIndex < endIndex;

        }

        public Integer next(){

          if (!hasNext()) {

            throw new NoSuchElementException();

          }

          int result=Character.codePointAt(s,nextIndex);

          nextIndex+=Character.charCount(result);

          return result;

        }

        public void remove(){

          throw new UnsupportedOperationException();

        }

      }

;

    }

  }

;

}

Location: CharUtilities.java

Content: 

/** 

 * Tells whether there is a surrogate pair starting from the given index in the  {@link CharSequence}. If the character at index is an high surrogate then the character at index+1 is checked to be a low surrogate. If a malformed surrogate pair is encountered then an  {@link IllegalArgumentException} is thrown.<pre> high surrogate [0xD800 - 0xDC00] low surrogate [0xDC00 - 0xE000] </pre>

 * @param chars CharSequence to check

 * @param index index in the CharSequqnce where to start the check

 * @throws IllegalArgumentException if there wrong usage of surrogate pairs

 * @return true if there is a well-formed surrogate pair at index

 */

public static boolean containsSurrogatePairAt(CharSequence chars,int index){

  char ch=chars.charAt(index);

  if (Character.isHighSurrogate(ch)) {

    if ((index + 1) > chars.length()) {

      throw new IllegalArgumentException("ill-formed UTF-16 sequence, contains isolated high surrogate at end of sequence");

    }

    if (Character.isLowSurrogate(chars.charAt(index + 1))) {

      return true;

    }

    throw new IllegalArgumentException("ill-formed UTF-16 sequence, contains isolated high surrogate at index " + index);

  }

 else   if (Character.isLowSurrogate(ch)) {

    throw new IllegalArgumentException("ill-formed UTF-16 sequence, contains isolated low surrogate at index " + index);

  }

  return false;

}

Location: CharUtilities.java

Content: 

/** 

 * Returns 1 if codePoint not in the BMP. This function is particularly useful in for loops over strings where, in presence of surrogate pairs, you need to skip one loop.

 * @param codePoint 1 if codePoint &gt; 0xFFFF, 0 otherwise

 * @return 1 if codePoint &gt; 0xFFFF, 0 otherwise

 */

public static int incrementIfNonBMP(int codePoint){

  return isBmpCodePoint(codePoint) ? 0 : 1;

}

Location: CharUtilities.java

Content: 

/** 

 * Method to determine if the character is an adjustable space.

 * @param c character to check

 * @return True if the character is adjustable

 */

public static boolean isAdjustableSpace(int c){

  return (c == '\u0020' || c == NBSPACE);

}

Location: CharUtilities.java

Content: 

/** 

 * Indicates whether a character is classified as "Alphabetic" by the Unicode standard.

 * @param c the character

 * @return true if the character is "Alphabetic"

 */

public static boolean isAlphabetic(int c){

  int generalCategory=Character.getType((char)c);

switch (generalCategory) {

case Character.UPPERCASE_LETTER:

case Character.LOWERCASE_LETTER:

case Character.TITLECASE_LETTER:

case Character.MODIFIER_LETTER:

case Character.OTHER_LETTER:

case Character.LETTER_NUMBER:

    return true;

default :

  return false;

}

}

Location: CharUtilities.java

Content: 

/** 

 * Determines if the character represents any kind of space.

 * @param c character to check

 * @return True if the character represents any kind of space

 */

public static boolean isAnySpace(int c){

  return (isBreakableSpace(c) || isNonBreakableSpace(c));

}

Location: CharUtilities.java

Content: 

/** 

 * Determine whether the specified character (Unicode code point) is in then Basic Multilingual Plane (BMP). Such code points can be represented using a single  {@code char}.

 * @see Character#isBmpCodePoint(int) from Java 1.7

 * @param codePoint the character (Unicode code point) to be tested

 * @return {@code true} if the specified code point is between  Character#MIN_VALUE andCharacter#MAX_VALUE} inclusive;  {@code false} otherwise

 */

public static boolean isBmpCodePoint(int codePoint){

  return codePoint >>> 16 == 0;

}

Location: CharUtilities.java

Content: 

/** 

 * Helper method to determine if the character is a space with normal behavior. Normal behavior means that it's not non-breaking.

 * @param c character to inspect

 * @return True if the character is a normal space

 */

public static boolean isBreakableSpace(int c){

  return (c == SPACE || isFixedWidthSpace(c));

}

Location: CharUtilities.java

Content: 

/** 

 * Indicates whether the given character is an explicit break-character

 * @param c    the character to check

 * @return  true if the character represents an explicit break

 */

public static boolean isExplicitBreak(int c){

  return (c == LINEFEED_CHAR || c == CARRIAGE_RETURN || c == NEXT_LINE || c == LINE_SEPARATOR || c == PARAGRAPH_SEPARATOR);

}

Location: CharUtilities.java

Content: 

/** 

 * Method to determine if the character is a (breakable) fixed-width space.

 * @param c the character to check

 * @return true if the character has a fixed-width

 */

public static boolean isFixedWidthSpace(int c){

  return (c >= '\u2000' && c <= '\u200B') || c == '\u3000';

}

Location: CharUtilities.java

Content: 

/** 

 * Method to determine if the character is a nonbreaking space.

 * @param c character to check

 * @return True if the character is a nbsp

 */

public static boolean isNonBreakableSpace(int c){

  return (c == NBSPACE || c == '\u202F' || c == '\u3000' || c == WORD_JOINER || c == ZERO_WIDTH_NOBREAK_SPACE);

}

Location: CharUtilities.java

Content: 

/** 

 * Determine if two character sequences contain the same characters.

 * @param cs1 first character sequence

 * @param cs2 second character sequence

 * @return true if both sequences have same length and same character sequence

 */

public static boolean isSameSequence(CharSequence cs1,CharSequence cs2){

  assert cs1 != null;

  assert cs2 != null;

  if (cs1.length() != cs2.length()) {

    return false;

  }

 else {

    for (int i=0, n=cs1.length(); i < n; i++) {

      if (cs1.charAt(i) != cs2.charAt(i)) {

        return false;

      }

    }

    return true;

  }

}

Location: CharUtilities.java

Content: 

/** 

 * Determine if the given characters is part of a surrogate pair.

 * @param ch character to be checked

 * @return true if ch is an high surrogate or a low surrogate

 */

public static boolean isSurrogatePair(char ch){

  return Character.isHighSurrogate(ch) || Character.isLowSurrogate(ch);

}

Location: CharUtilities.java

Content: 

/** 

 * Method to determine if the character is a zero-width space.

 * @param c the character to check

 * @return true if the character is a zero-width space

 */

public static boolean isZeroWidthSpace(int c){

  return c == ZERO_WIDTH_SPACE || c == WORD_JOINER || c == ZERO_WIDTH_NOBREAK_SPACE;

}

Location: CharUtilities.java

Content: 

/** 

 * Pad a string S on left out to width W using padding character PAD.

 * @param s string to pad

 * @param width width of field to add padding

 * @param pad character to use for padding

 * @return padded string

 */

public static String padLeft(String s,int width,char pad){

  StringBuffer sb=new StringBuffer();

  for (int i=s.length(); i < width; i++) {

    sb.append(pad);

  }

  sb.append(s);

  return sb.toString();

}

Location: CharUtilities.java

Content: 

/** 

 * Convert a string to a sequence of ASCII or XML numeric character references.

 * @param s a java string (encoded in UTF-16)

 * @return a string representing a sequence of numeric character reference orASCII characters

 */

public static String toNCRefs(String s){

  StringBuffer sb=new StringBuffer();

  if (s != null) {

    for (int i=0; i < s.length(); i++) {

      char c=s.charAt(i);

      if ((c >= 32) && (c < 127)) {

        if (c == '<') {

          sb.append("&lt;");

        }

 else         if (c == '>') {

          sb.append("&gt;");

        }

 else         if (c == '&') {

          sb.append("&amp;");

        }

 else {

          sb.append(c);

        }

      }

 else {

        sb.append(charToNCRef(c));

      }

    }

  }

  return sb.toString();

}

