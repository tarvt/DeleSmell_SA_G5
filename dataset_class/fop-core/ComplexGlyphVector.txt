Location: ComplexGlyphVector.java

Content: 

ComplexGlyphVector(FOPGVTFont font,final CharacterIterator iter,FontRenderContext frc){

  super(font,iter,frc);

}

Location: ComplexGlyphVector.java

Content: 

private boolean maybeMirror(){

  boolean mirrored=false;

  String s=text.subSequence(text.getBeginIndex(),text.getEndIndex()).toString();

  if (CharMirror.hasMirrorable(s)) {

    String m=CharMirror.mirror(s);

    assert m.length() == s.length();

    for (int i=0, n=m.length(); i < n; ++i) {

      char cs=s.charAt(i);

      char cm=m.charAt(i);

      if (cm != cs) {

        if (substituteMirroredGlyph(i,cm)) {

          mirrored=true;

        }

      }

    }

  }

  return mirrored;

}

Location: ComplexGlyphVector.java

Content: 

private static void reverse(AffineTransform[] ta){

  for (int i=0, n=ta.length, m=n / 2; i < m; i++) {

    int k=n - i - 1;

    AffineTransform t=ta[k];

    ta[k]=ta[i];

    ta[i]=t;

  }

}

Location: ComplexGlyphVector.java

Content: 

private static void reverse(boolean[] ba){

  for (int i=0, n=ba.length, m=n / 2; i < m; i++) {

    int k=n - i - 1;

    boolean t=ba[k];

    ba[k]=ba[i];

    ba[i]=t;

  }

}

Location: ComplexGlyphVector.java

Content: 

private static void reverse(float[] fa){

  int skip=2;

  int numPositions=fa.length / skip;

  for (int i=0, n=numPositions, m=n / 2; i < m; ++i) {

    int j=n - i - 1;

    for (int k=0; k < skip; ++k) {

      int l1=i * skip + k;

      int l2=j * skip + k;

      float t=fa[l2];

      fa[l2]=fa[l1];

      fa[l1]=t;

    }

  }

  float runAdvanceX=fa[0];

  for (int i=0, n=numPositions; i < n; ++i) {

    int k=i * 2;

    fa[k + 0]=runAdvanceX - fa[k + 0];

    if (i > 0) {

      fa[k - 1]=fa[k + 1];

    }

  }

}

Location: ComplexGlyphVector.java

Content: 

private static void reverse(int[][] iaa){

  for (int i=0, n=iaa.length, m=n / 2; i < m; i++) {

    int k=n - i - 1;

    int[] t=iaa[k];

    iaa[k]=iaa[i];

    iaa[i]=t;

  }

}

Location: ComplexGlyphVector.java

Content: 

private static void reverse(Rectangle2D[] ra){

  for (int i=0, n=ra.length, m=n / 2; i < m; i++) {

    int k=n - i - 1;

    Rectangle2D t=ra[k];

    ra[k]=ra[i];

    ra[i]=t;

  }

}

Location: ComplexGlyphVector.java

Content: 

private boolean substituteMirroredGlyph(int index,char mirror){

  Font f=font.getFont();

  int gi=0;

  for (  CharAssociation ca : (List<CharAssociation>)associations) {

    if (ca.contained(index,1)) {

      setGlyphCode(gi,f.mapChar(mirror));

      return true;

    }

 else {

      ++gi;

    }

  }

  return false;

}

