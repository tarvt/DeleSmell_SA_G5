Location: Position.java

Content: 

/** 

 * @return associated layout manager 

 */

public LayoutManager getLM(){

  return layoutManager;

}

Location: Position.java

Content: 

/** 

 * @param depth the depth at which the LM in this position is found

 * @return associated layout manager

 */

public LayoutManager getLM(int depth){

  Position subPos=getPosition(depth);

  if (subPos == null) {

    return null;

  }

 else {

    return subPos.getLM();

  }

}

Location: Position.java

Content: 

/** 

 * Overridden by NonLeafPosition to return the Position of its child LM.

 * @param depth the depth at which the position in this position is found

 * @return a position or null

 */

public Position getPosition(int depth){

  Position subPos=this;

  for (int i=0; i < depth && subPos != null; ++i, subPos=subPos.getPosition()) {

  }

  return subPos;

}

Location: Position.java

Content: 

/** 

 * @return short name of associated layout manager 

 */

protected String getShortLMName(){

  if (getLM() != null) {

    String lm=getLM().toString();

    int idx=lm.lastIndexOf('.');

    if (idx >= 0 && lm.indexOf('@') > 0) {

      return lm.substring(idx + 1);

    }

 else {

      return lm;

    }

  }

 else {

    return "null";

  }

}

Location: Position.java

Content: 

/** 

 * Construct a position.

 * @param lm the associated layout manager

 */

public Position(LayoutManager lm){

  layoutManager=lm;

}

Location: Position.java

Content: 

/** 

 * Construct a position.

 * @param lm the associated layout manager

 * @param index the index

 */

public Position(LayoutManager lm,int index){

  this(lm);

  setIndex(index);

}

