Location: PDFDictionary.java

Content: 

/** 

 * @see java.util.Map#containsKey(Object)

 * @param name The key to find in the map.

 * @return true if the map contains this key.

 */

public boolean containsKey(String name){

  return this.entries.containsKey(name);

}

Location: PDFDictionary.java

Content: 

public static void getChildren(Collection<Object> values,Set<PDFObject> children){

  for (  Object x : values) {

    if (x instanceof PDFReference) {

      x=((PDFReference)x).getObject();

    }

    if (x instanceof PDFObject) {

      if (((PDFObject)x).hasObjectNumber()) {

        children.add((PDFObject)x);

      }

      ((PDFObject)x).getChildren(children);

    }

  }

}

Location: PDFDictionary.java

Content: 

public Set<String> keySet(){

  return entries.keySet();

}

Location: PDFDictionary.java

Content: 

/** 

 * Create a new dictionary object.

 */

public PDFDictionary(){

  super();

}

Location: PDFDictionary.java

Content: 

/** 

 * Create a new dictionary object.

 * @param parent the object's parent if any

 */

public PDFDictionary(PDFObject parent){

  super(parent);

}

Location: PDFDictionary.java

Content: 

/** 

 * Puts a new name/value pair.

 * @param name the name

 * @param value the value

 */

public void put(String name,int value){

  if (!entries.containsKey(name)) {

    this.order.add(name);

  }

  this.entries.put(name,value);

}

Location: PDFDictionary.java

Content: 

/** 

 * Removes the mapping for the specified key

 * @param name  key whose mapping is to be removed

 */

public void remove(String name){

  entries.remove(name);

}

Location: PDFDictionary.java

Content: 

/** 

 * Writes the contents of the dictionary to a StringBuffer.

 * @param out the OutputStream (for binary content)

 * @param textBuffer the text buffer for text output

 * @throws IOException if an I/O error occurs

 */

protected void writeDictionary(OutputStream out,StringBuilder textBuffer) throws IOException {

  textBuffer.append("<<");

  boolean compact=(this.order.size() <= 2);

  for (  String key : this.order) {

    if (compact) {

      textBuffer.append(' ');

    }

 else {

      textBuffer.append("\n  ");

    }

    textBuffer.append(PDFName.escapeName(key));

    textBuffer.append(' ');

    Object obj=this.entries.get(key);

    formatObject(obj,out,textBuffer);

  }

  if (compact) {

    textBuffer.append(' ');

  }

 else {

    textBuffer.append('\n');

  }

  textBuffer.append(">>");

}

