Location: FlowLayoutManager.java

Content: 

private List<ListElement> addChildElements(List<ListElement> elements,LayoutManager childLM,LayoutContext context,int alignment,Stack<LayoutManager> lmStack,Position position,LayoutManager restartAtLM){

  if (handleSpanChange(childLM,context)) {

    SpaceResolver.resolveElementList(elements);

    return elements;

  }

  LayoutContext childLC=makeChildLayoutContext(context);

  List<ListElement> childElements=getNextChildElements(childLM,context,childLC,alignment,lmStack,position,restartAtLM);

  if (elements.isEmpty()) {

    context.updateKeepWithPreviousPending(childLC.getKeepWithPreviousPending());

  }

  if (!elements.isEmpty() && !ElementListUtils.startsWithForcedBreak(childElements)) {

    addInBetweenBreak(elements,context,childLC);

  }

  context.updateKeepWithNextPending(childLC.getKeepWithNextPending());

  elements.addAll(childElements);

  if (ElementListUtils.endsWithForcedBreak(elements)) {

    if (childLM.isFinished() && !hasNextChildLM()) {

      setFinished(true);

    }

    SpaceResolver.resolveElementList(elements);

    return elements;

  }

  return null;

}

Location: FlowLayoutManager.java

Content: 

/** 

 * This is the top level layout manager. It is created by the PageSequence FO.

 * @param pslm parent PageSequenceLayoutManager object

 * @param node Flow object

 */

public FlowLayoutManager(PageSequenceLayoutManager pslm,Flow node){

  super(node);

  setGeneratesBlockArea(true);

  setParent(pslm);

}

Location: FlowLayoutManager.java

Content: 

public void handleFloatOff(){

  handlingFloat=false;

}

Location: FlowLayoutManager.java

Content: 

public void handleFloatOn(){

  handlingFloat=true;

}

Location: FlowLayoutManager.java

Content: 

private boolean handleSpanChange(LayoutManager childLM,LayoutContext context){

  int span=EN_NONE;

  int disableColumnBalancing=EN_FALSE;

  if (childLM instanceof BlockLayoutManager) {

    span=((BlockLayoutManager)childLM).getBlockFO().getSpan();

    disableColumnBalancing=((BlockLayoutManager)childLM).getBlockFO().getDisableColumnBalancing();

  }

 else   if (childLM instanceof BlockContainerLayoutManager) {

    span=((BlockContainerLayoutManager)childLM).getBlockContainerFO().getSpan();

    disableColumnBalancing=((BlockContainerLayoutManager)childLM).getBlockContainerFO().getDisableColumnBalancing();

  }

  int currentSpan=context.getCurrentSpan();

  if (currentSpan != span) {

    if (span == EN_ALL) {

      context.setDisableColumnBalancing(disableColumnBalancing);

    }

    log.debug("span change from " + currentSpan + " to "+ span);

    context.signalSpanChange(span);

    return true;

  }

 else {

    return false;

  }

}

