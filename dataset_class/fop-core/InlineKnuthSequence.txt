Location: InlineKnuthSequence.java

Content: 

/** 

 * Add letter space.

 */

public void addALetterSpace(){

  KnuthBox prevBox=(KnuthBox)getLast();

  if (prevBox.isAuxiliary() && (size() < 4 || !getElement(size() - 2).isGlue() || !getElement(size() - 3).isPenalty() || !getElement(size() - 4).isBox())) {

    return;

  }

  removeLast();

  LinkedList oldList=new LinkedList();

  if (!prevBox.isAuxiliary()) {

    oldList.add(prevBox);

  }

 else {

    oldList.add(prevBox);

    oldList.addFirst((KnuthGlue)removeLast());

    oldList.addFirst((KnuthPenalty)removeLast());

    oldList.addFirst((KnuthBox)removeLast());

  }

  addAll(((InlineLevelLayoutManager)prevBox.getLayoutManager()).addALetterSpaceTo(oldList));

  if (prevBox instanceof KnuthInlineBox && ((KnuthInlineBox)prevBox).isAnchor()) {

    KnuthInlineBox newBox=(KnuthInlineBox)getLast();

    newBox.setFootnoteBodyLM(((KnuthInlineBox)prevBox).getFootnoteBodyLM());

  }

}

Location: InlineKnuthSequence.java

Content: 

/** 

 * Creates a new and empty list.

 */

public InlineKnuthSequence(){

  super();

}

Location: InlineKnuthSequence.java

Content: 

/** 

 * Creates a new list from an existing list.

 * @param list The list from which to create the new list.

 */

public InlineKnuthSequence(List list){

  super(list);

}

