Location: LayoutContext.java

Content: 

/** 

 * Adds a border or padding element to the pending list which will be used to generate the right element list for break possibilities. Conditionality resolution will be done elsewhere.

 * @param element the border, padding or space element

 */

public void addPendingAfterMark(UnresolvedListElementWithLength element){

  if (this.pendingAfterMarks == null) {

    this.pendingAfterMarks=new java.util.ArrayList();

  }

  this.pendingAfterMarks.add(element);

}

Location: LayoutContext.java

Content: 

/** 

 * Adds a border or padding element to the pending list which will be used to generate the right element list for break possibilities. Conditionality resolution will be done elsewhere.

 * @param element the border, padding or space element

 */

public void addPendingBeforeMark(UnresolvedListElementWithLength element){

  if (this.pendingBeforeMarks == null) {

    this.pendingBeforeMarks=new java.util.ArrayList();

  }

  this.pendingBeforeMarks.add(element);

}

Location: LayoutContext.java

Content: 

/** 

 * Clears both keep-with-previous and keep-with-next strengths.

 */

public void clearKeepsPending(){

  clearKeepWithPreviousPending();

  clearKeepWithNextPending();

}

Location: LayoutContext.java

Content: 

/** 

 * Clears any pending keep-with-next strength.

 */

public void clearKeepWithNextPending(){

  this.pendingKeepWithNext=Keep.KEEP_AUTO;

}

Location: LayoutContext.java

Content: 

/** 

 * Clears any pending keep-with-previous strength.

 */

public void clearKeepWithPreviousPending(){

  this.pendingKeepWithPrevious=Keep.KEEP_AUTO;

}

Location: LayoutContext.java

Content: 

public static LayoutContext copyOf(LayoutContext copy){

  return new LayoutContext(copy);

}

Location: LayoutContext.java

Content: 

/** 

 * @param source from which pending marks are copied 

 */

public void copyPendingMarksFrom(LayoutContext source){

  if (source.pendingAfterMarks != null) {

    this.pendingAfterMarks=new java.util.ArrayList(source.pendingAfterMarks);

  }

  if (source.pendingBeforeMarks != null) {

    this.pendingBeforeMarks=new java.util.ArrayList(source.pendingBeforeMarks);

  }

}

Location: LayoutContext.java

Content: 

/** 

 * @return the currently applicable alignment in BP direction (EN_START, EN_JUSTIFY...) 

 */

public int getBPAlignment(){

  return this.bpAlignment;

}

Location: LayoutContext.java

Content: 

/** 

 * Returns the value of the break after the element whose {@link LayoutManager#getNextKnuthElements(LayoutContext,int)} method has just beencalled.

 * @return one of {@link Constants#EN_AUTO},  {@link Constants#EN_COLUMN}, {@link Constants#EN_PAGE},  {@link Constants#EN_EVEN_PAGE}, or {@link Constants#EN_ODD_PAGE}

 */

public int getBreakAfter(){

  return breakAfter;

}

Location: LayoutContext.java

Content: 

/** 

 * @return one of: {@link Constants#NOT_SET},  {@link Constants#EN_NONE}{@link Constants#EN_ALL}

 */

public int getCurrentSpan(){

  return (currentSpan == Constants.NOT_SET) ? Constants.EN_NONE : currentSpan;

}

Location: LayoutContext.java

Content: 

/** 

 * Returns whether the column balancer should be disabled before a spanning block

 * @return one of {@link Constants#EN_TRUE},  {@link Constants#EN_FALSE}

 */

public int getDisableColumnBalancing(){

  return disableColumnBalancing;

}

Location: LayoutContext.java

Content: 

/** 

 * @return hyphenation context 

 */

public HyphContext getHyphContext(){

  return hyphContext;

}

Location: LayoutContext.java

Content: 

/** 

 * @return ipd adjustment 

 */

public double getIPDAdjust(){

  return ipdAdjust;

}

Location: LayoutContext.java

Content: 

/** 

 * Returns the strength of a keep-with-next currently pending.

 * @return the keep-with-next strength

 */

public Keep getKeepWithNextPending(){

  return this.pendingKeepWithNext;

}

Location: LayoutContext.java

Content: 

/** 

 * Returns the strength of a keep-with-previous currently pending.

 * @return the keep-with-previous strength

 */

public Keep getKeepWithPreviousPending(){

  return this.pendingKeepWithPrevious;

}

Location: LayoutContext.java

Content: 

/** 

 * @return leading space 

 */

public SpaceSpecifier getLeadingSpace(){

  return leadingSpace;

}

Location: LayoutContext.java

Content: 

/** 

 * Get the width to be reserved for border and padding at the end of the line.

 * @return the width to be reserved

 */

public int getLineEndBorderAndPaddingWidth(){

  return lineEndBorderAndPaddingWidth;

}

Location: LayoutContext.java

Content: 

/** 

 * Get the width to be reserved for border and padding at the start of the line.

 * @return the width to be reserved

 */

public int getLineStartBorderAndPaddingWidth(){

  return lineStartBorderAndPaddingWidth;

}

Location: LayoutContext.java

Content: 

/** 

 * @return one of: {@link Constants#NOT_SET},  {@link Constants#EN_NONE}{@link Constants#EN_ALL}

 */

public int getNextSpan(){

  return nextSpan;

}

Location: LayoutContext.java

Content: 

/** 

 * Returns the inline-progression-dimension of the nearest ancestor reference area.

 * @return the inline-progression-dimension of the nearest ancestor reference area

 */

public int getRefIPD(){

  return refIPD;

}

Location: LayoutContext.java

Content: 

/** 

 * @return space adjustment 

 */

public double getSpaceAdjust(){

  return dSpaceAdjust;

}

Location: LayoutContext.java

Content: 

/** 

 * Get the current amount of space after / end

 * @return the space after / end amount

 */

public int getSpaceAfter(){

  return spaceAfter;

}

Location: LayoutContext.java

Content: 

/** 

 * Returns the stack limit in block-progression-dimension.

 * @return the stack limit

 */

public MinOptMax getStackLimitBP(){

  return stackLimitBP;

}

Location: LayoutContext.java

Content: 

/** 

 * @return trailing space 

 */

public SpaceSpecifier getTrailingSpace(){

  return trailingSpace;

}

Location: LayoutContext.java

Content: 

/** 

 * @return true if first area is set 

 */

public boolean isFirstArea(){

  return ((this.flags & FIRST_AREA) != 0);

}

Location: LayoutContext.java

Content: 

/** 

 * Indicates whether a keep-with-next constraint is pending.

 * @return true if a keep-with-next constraint is pending

 */

public boolean isKeepWithNextPending(){

  return !getKeepWithNextPending().isAuto();

}

Location: LayoutContext.java

Content: 

/** 

 * Indicates whether a keep-with-previous constraint is pending.

 * @return true if a keep-with-previous constraint is pending

 */

public boolean isKeepWithPreviousPending(){

  return !getKeepWithPreviousPending().isAuto();

}

Location: LayoutContext.java

Content: 

/** 

 * @return true if last area is set 

 */

public boolean isLastArea(){

  return ((this.flags & LAST_AREA) != 0);

}

Location: LayoutContext.java

Content: 

/** 

 * @return true if new area is set 

 */

public boolean isStart(){

  return ((this.flags & NEW_AREA) != 0);

}

Location: LayoutContext.java

Content: 

private LayoutContext(int flags){

  this.flags=flags;

  this.refIPD=0;

  stackLimitBP=MinOptMax.ZERO;

  leadingSpace=null;

  trailingSpace=null;

}

Location: LayoutContext.java

Content: 

private LayoutContext(LayoutContext parentLC){

  this.flags=parentLC.flags;

  this.refIPD=parentLC.refIPD;

  this.writingMode=parentLC.writingMode;

  setStackLimitBP(parentLC.getStackLimitBP());

  this.leadingSpace=parentLC.leadingSpace;

  this.trailingSpace=parentLC.trailingSpace;

  this.hyphContext=parentLC.hyphContext;

  this.bpAlignment=parentLC.bpAlignment;

  this.dSpaceAdjust=parentLC.dSpaceAdjust;

  this.ipdAdjust=parentLC.ipdAdjust;

  this.alignmentContext=parentLC.alignmentContext;

  this.lineStartBorderAndPaddingWidth=parentLC.lineStartBorderAndPaddingWidth;

  this.lineEndBorderAndPaddingWidth=parentLC.lineEndBorderAndPaddingWidth;

  copyPendingMarksFrom(parentLC);

  this.pendingKeepWithNext=parentLC.pendingKeepWithNext;

  this.pendingKeepWithPrevious=parentLC.pendingKeepWithPrevious;

  this.disableColumnBalancing=parentLC.disableColumnBalancing;

}

Location: LayoutContext.java

Content: 

public static LayoutContext newInstance(){

  return new LayoutContext(0);

}

Location: LayoutContext.java

Content: 

/** 

 * Returns a descendant of the given layout context. The new context is the same as what would have been created by  {@link #newInstance()}, except for inheritable properties that are passed on by the parent. At the moment, the only inheritable property is the value returned by  {@link #treatAsArtifact()}.

 */

public static LayoutContext offspringOf(LayoutContext parent){

  LayoutContext offspring=new LayoutContext(0);

  offspring.setTreatAsArtifact(parent.treatAsArtifact());

  return offspring;

}

Location: LayoutContext.java

Content: 

/** 

 * Reset alignment context.

 */

public void resetAlignmentContext(){

  if (this.alignmentContext != null) {

    this.alignmentContext=this.alignmentContext.getParentAlignmentContext();

  }

}

Location: LayoutContext.java

Content: 

/** 

 * @return true if resolve leading space is set 

 */

public boolean resolveLeadingSpace(){

  return ((this.flags & RESOLVE_LEADING_SPACE) != 0);

}

Location: LayoutContext.java

Content: 

/** 

 * @param alignmentContext alignment context 

 */

public void setAlignmentContext(AlignmentContext alignmentContext){

  this.alignmentContext=alignmentContext;

}

Location: LayoutContext.java

Content: 

/** 

 * Sets the currently applicable alignment in BP direction.

 * @param alignment one of EN_START, EN_JUSTIFY etc.

 */

public void setBPAlignment(int alignment){

  this.bpAlignment=alignment;

}

Location: LayoutContext.java

Content: 

/** 

 * Sets the value of the break after the current element.

 * @param breakAfter the value of the break-after

 * @see #getBreakAfter()

 */

public void setBreakAfter(int breakAfter){

  this.breakAfter=breakAfter;

}

Location: LayoutContext.java

Content: 

/** 

 * Sets the value of the break before the current element.

 * @param breakBefore the value of the break-before

 * @see #getBreakBefore()

 */

public void setBreakBefore(int breakBefore){

  this.breakBefore=breakBefore;

}

Location: LayoutContext.java

Content: 

/** 

 * Sets whether the column balancer should be disabled before a spanning block

 * @param disableColumnBalancing the value of the fox:disable-column-balancing property

 * @see #getDisableColumnBalancing()

 */

public void setDisableColumnBalancing(int disableColumnBalancing){

  this.disableColumnBalancing=disableColumnBalancing;

}

Location: LayoutContext.java

Content: 

/** 

 * @param flags to set 

 */

public void setFlags(int flags){

  setFlags(flags,true);

}

Location: LayoutContext.java

Content: 

/** 

 * @param flags to set or clear

 * @param bSet true to set, false to clear

 */

public void setFlags(int flags,boolean bSet){

  if (bSet) {

    this.flags|=flags;

  }

 else {

    this.flags&=~flags;

  }

}

Location: LayoutContext.java

Content: 

/** 

 * @param hyph a hyphenation context 

 */

public void setHyphContext(HyphContext hyph){

  hyphContext=hyph;

}

Location: LayoutContext.java

Content: 

/** 

 * @param ipdA ipd adjustment 

 */

public void setIPDAdjust(double ipdA){

  ipdAdjust=ipdA;

}

Location: LayoutContext.java

Content: 

/** 

 * @param space leading space 

 */

public void setLeadingSpace(SpaceSpecifier space){

  leadingSpace=space;

}

Location: LayoutContext.java

Content: 

/** 

 * Set the width to be reserved for border and padding at the end of the line.

 * @param lineEndBorderAndPaddingWidth the width to be reserved

 */

public void setLineEndBorderAndPaddingWidth(int lineEndBorderAndPaddingWidth){

  this.lineEndBorderAndPaddingWidth=lineEndBorderAndPaddingWidth;

}

Location: LayoutContext.java

Content: 

/** 

 * Set the width to be reserved for border and padding at the start of the line.

 * @param lineStartBorderAndPaddingWidth the width to be reserved

 */

public void setLineStartBorderAndPaddingWidth(int lineStartBorderAndPaddingWidth){

  this.lineStartBorderAndPaddingWidth=lineStartBorderAndPaddingWidth;

}

Location: LayoutContext.java

Content: 

/** 

 * Sets the inline-progression-dimension of the nearest ancestor reference area.

 * @param ipd of nearest ancestor reference area

 */

public void setRefIPD(int ipd){

  refIPD=ipd;

}

Location: LayoutContext.java

Content: 

/** 

 * @param adjust space adjustment 

 */

public void setSpaceAdjust(double adjust){

  dSpaceAdjust=adjust;

}

Location: LayoutContext.java

Content: 

/** 

 * Set the amount of space after / end

 * @param spaceAfter the amount of space after / end

 */

public void setSpaceAfter(int spaceAfter){

  this.spaceAfter=spaceAfter;

}

Location: LayoutContext.java

Content: 

/** 

 * Set the amount of space before / start

 * @param spaceBefore the amount of space before / start

 */

public void setSpaceBefore(int spaceBefore){

  this.spaceBefore=spaceBefore;

}

Location: LayoutContext.java

Content: 

/** 

 * Sets the stack limit in block-progression-dimension.

 * @param limit the stack limit

 */

public void setStackLimitBP(MinOptMax limit){

  stackLimitBP=limit;

}

Location: LayoutContext.java

Content: 

/** 

 * @param space trailing space 

 */

public void setTrailingSpace(SpaceSpecifier space){

  trailingSpace=space;

}

Location: LayoutContext.java

Content: 

public void setTreatAsArtifact(boolean treatAsArtifact){

  setFlags(TREAT_AS_ARTIFACT,treatAsArtifact);

}

Location: LayoutContext.java

Content: 

/** 

 * Set the writing mode.

 * @param writingMode the writing mode

 */

public void setWritingMode(WritingMode writingMode){

  this.writingMode=writingMode;

}

Location: LayoutContext.java

Content: 

/** 

 * Used to signal the PSLM that the element list ends early because of a span change in multi-column layout.

 * @param span the new span value (legal values: NOT_SET, EN_NONE, EN_ALL)

 */

public void signalSpanChange(int span){

switch (span) {

case Constants.NOT_SET:

case Constants.EN_NONE:

case Constants.EN_ALL:

    this.currentSpan=this.nextSpan;

  this.nextSpan=span;

break;

default :

assert false;

throw new IllegalArgumentException("Illegal value on signalSpanChange() for span: " + span);

}

}

Location: LayoutContext.java

Content: 

/** 

 * @return true if new area is set and leading space is non-null 

 */

public boolean startsNewArea(){

  return ((this.flags & NEW_AREA) != 0 && leadingSpace != null);

}

Location: LayoutContext.java

Content: 

/** 

 * @return true if suppress break before is set 

 */

public boolean suppressBreakBefore(){

  return ((this.flags & SUPPRESS_BREAK_BEFORE) != 0);

}

Location: LayoutContext.java

Content: 

public boolean treatAsArtifact(){

  return (flags & TREAT_AS_ARTIFACT) != 0;

}

Location: LayoutContext.java

Content: 

/** 

 * @param flags to clear 

 */

public void unsetFlags(int flags){

  setFlags(flags,false);

}

Location: LayoutContext.java

Content: 

/** 

 * Updates the currently pending keep-with-next strength.

 * @param keep the new strength to consider

 */

public void updateKeepWithNextPending(Keep keep){

  this.pendingKeepWithNext=this.pendingKeepWithNext.compare(keep);

}

Location: LayoutContext.java

Content: 

/** 

 * Updates the currently pending keep-with-previous strength.

 * @param keep the new strength to consider

 */

public void updateKeepWithPreviousPending(Keep keep){

  this.pendingKeepWithPrevious=this.pendingKeepWithPrevious.compare(keep);

}

