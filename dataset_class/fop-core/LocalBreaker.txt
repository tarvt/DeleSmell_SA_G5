Location: LocalBreaker.java

Content: 

protected LayoutContext createLayoutContext(){

  LayoutContext lc=super.createLayoutContext();

  lc.setRefIPD(ipd);

  return lc;

}

Location: LocalBreaker.java

Content: 

/** 

 * {@inheritDoc} 

 */

protected PageBreakingLayoutListener createLayoutListener(){

  return new PageBreakingLayoutListener(){

    public void notifyOverflow(    int part,    int amount,    FObj obj){

      if (LocalBreaker.this.overflow == 0) {

        LocalBreaker.this.overflow=amount;

      }

    }

  }

;

}

Location: LocalBreaker.java

Content: 

protected void doPhase3(PageBreakingAlgorithm alg,int partCount,BlockSequence originalList,BlockSequence effectiveList){

  if (partCount > 1) {

    PageBreakPosition pos=alg.getPageBreaks().getFirst();

    int firstPartLength=ElementListUtils.calcContentLength(effectiveList,effectiveList.ignoreAtStart,pos.getLeafPos());

    overflow+=alg.totalWidth - firstPartLength;

  }

  alg.removeAllPageBreaks();

  this.addAreas(alg,1,originalList,effectiveList);

}

Location: LocalBreaker.java

Content: 

protected void finishPart(PageBreakingAlgorithm alg,PageBreakPosition pbp){

}

Location: LocalBreaker.java

Content: 

protected LayoutManager getCurrentChildLM(){

  return null;

}

Location: LocalBreaker.java

Content: 

protected int getCurrentDisplayAlign(){

  return displayAlign;

}

Location: LocalBreaker.java

Content: 

public int getOverflowAmount(){

  return this.overflow;

}

Location: LocalBreaker.java

Content: 

protected LayoutManager getTopLevelLM(){

  return lm;

}

Location: LocalBreaker.java

Content: 

protected boolean hasMoreContent(){

  return !lm.isFinished();

}

Location: LocalBreaker.java

Content: 

public boolean isOverflow(){

  return (this.overflow != 0);

}

Location: LocalBreaker.java

Content: 

/** 

 * {@inheritDoc} 

 */

protected boolean isPartOverflowRecoveryActivated(){

  return false;

}

Location: LocalBreaker.java

Content: 

public LocalBreaker(BlockStackingLayoutManager lm,int ipd,int displayAlign){

  this.lm=lm;

  this.ipd=ipd;

  this.displayAlign=displayAlign;

}

Location: LocalBreaker.java

Content: 

public void setDescendantOfTableFooter(boolean isDescendantOfTableFooter){

  this.isDescendantOfTableFooter=isDescendantOfTableFooter;

}

Location: LocalBreaker.java

Content: 

public void setRepeatedFooter(boolean repeatedFooter){

  this.repeatedFooter=repeatedFooter;

}

Location: LocalBreaker.java

Content: 

public void setRepeatedHeader(boolean repeatedHeader){

  this.repeatedHeader=repeatedHeader;

}

