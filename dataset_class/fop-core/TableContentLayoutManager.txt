Location: TableContentLayoutManager.java

Content: 

/** 

 * Iterates over the positions corresponding to the table's body (which may contain several table-body elements!) and adds the corresponding areas.

 * @param iterator iterator over TableContentPosition elements. Those positionscorrespond to the elements of the body present on the current page

 * @param painter

 * @param lastOnPage true if the table has no footer (then the last line of the tablethat will be present on the page belongs to the body)

 */

private void addBodyAreas(Iterator iterator,RowPainter painter,boolean lastOnPage){

  painter.startBody();

  List lst=new java.util.ArrayList();

  TableContentPosition pos=(TableContentPosition)iterator.next();

  boolean isFirstPos=pos.getFlag(TableContentPosition.FIRST_IN_ROWGROUP) && pos.getRow().getFlag(EffRow.FIRST_IN_PART);

  TablePart part=pos.getTablePart();

  lst.add(pos);

  while (iterator.hasNext()) {

    pos=(TableContentPosition)iterator.next();

    if (pos.getTablePart() != part) {

      addTablePartAreas(lst,painter,part,isFirstPos,true,false,false);

      isFirstPos=true;

      lst.clear();

      part=pos.getTablePart();

    }

    lst.add(pos);

  }

  boolean isLastPos=pos.getFlag(TableContentPosition.LAST_IN_ROWGROUP) && pos.getRow().getFlag(EffRow.LAST_IN_PART);

  addTablePartAreas(lst,painter,part,isFirstPos,isLastPos,true,lastOnPage);

  painter.endBody();

}

Location: TableContentLayoutManager.java

Content: 

private void addHeaderFooterAreas(List elements,TablePart part,RowPainter painter,boolean lastOnPage){

  List lst=new java.util.ArrayList(elements.size());

  for (Iterator iter=new KnuthPossPosIter(elements); iter.hasNext(); ) {

    Position pos=(Position)iter.next();

    if (pos instanceof TableContentPosition) {

      lst.add((TableContentPosition)pos);

    }

  }

  addTablePartAreas(lst,painter,part,true,true,true,lastOnPage);

}

Location: TableContentLayoutManager.java

Content: 

/** 

 * Adds the areas corresponding to a single fo:table-header/footer/body element.

 */

private void addTablePartAreas(List positions,RowPainter painter,TablePart body,boolean isFirstPos,boolean isLastPos,boolean lastInBody,boolean lastOnPage){

  getTableLM().getCurrentPV().registerMarkers(body.getMarkers(),true,isFirstPos,isLastPos);

  if (body instanceof TableBody) {

    getTableLM().registerMarkers(body.getMarkers(),true,isFirstPos,isLastPos);

  }

  painter.startTablePart(body);

  for (  Object position : positions) {

    painter.handleTableContentPosition((TableContentPosition)position);

  }

  getTableLM().getCurrentPV().registerMarkers(body.getMarkers(),false,isFirstPos,isLastPos);

  if (body instanceof TableBody) {

    getTableLM().registerMarkers(body.getMarkers(),false,isFirstPos,isLastPos);

  }

  painter.endTablePart(lastInBody,lastOnPage);

}

Location: TableContentLayoutManager.java

Content: 

/** 

 * @return the footer element list 

 */

protected LinkedList getFooterElements(){

  return this.footerList;

}

Location: TableContentLayoutManager.java

Content: 

/** 

 * @return the net footer height 

 */

protected int getFooterNetHeight(){

  return this.footerNetHeight;

}

Location: TableContentLayoutManager.java

Content: 

private int getFootnotesBPD(List<List<KnuthElement>> footnotes){

  int bpd=0;

  for (  List<KnuthElement> footnote : footnotes) {

    bpd+=ElementListUtils.calcContentLength(footnote);

  }

  return bpd;

}

Location: TableContentLayoutManager.java

Content: 

/** 

 * @return the header element list 

 */

protected LinkedList getHeaderElements(){

  return this.headerList;

}

Location: TableContentLayoutManager.java

Content: 

/** 

 * @return the net header height 

 */

protected int getHeaderNetHeight(){

  return this.headerNetHeight;

}

Location: TableContentLayoutManager.java

Content: 

/** 

 * Creates Knuth elements by iterating over a TableRowIterator.

 * @param iter TableRowIterator instance to fetch rows from

 * @param context Active LayoutContext

 * @param alignment alignment indicator

 * @param bodyType Indicates what kind of body is being processed(BODY, HEADER or FOOTER)

 * @return An element list

 */

private LinkedList getKnuthElementsForRowIterator(TableRowIterator iter,LayoutContext context,int alignment,int bodyType){

  LinkedList returnList=new LinkedList();

  EffRow[] rowGroup=iter.getNextRowGroup();

  context.clearKeepsPending();

  context.setBreakBefore(Constants.EN_AUTO);

  context.setBreakAfter(Constants.EN_AUTO);

  Keep keepWithPrevious=Keep.KEEP_AUTO;

  int breakBefore=Constants.EN_AUTO;

  if (rowGroup != null) {

    RowGroupLayoutManager rowGroupLM=new RowGroupLayoutManager(getTableLM(),rowGroup,stepper);

    List nextRowGroupElems=rowGroupLM.getNextKnuthElements(context,alignment,bodyType);

    keepWithPrevious=keepWithPrevious.compare(context.getKeepWithPreviousPending());

    breakBefore=context.getBreakBefore();

    int breakBetween=context.getBreakAfter();

    returnList.addAll(nextRowGroupElems);

    while ((rowGroup=iter.getNextRowGroup()) != null) {

      rowGroupLM=new RowGroupLayoutManager(getTableLM(),rowGroup,stepper);

      Keep keepWithNextPending=context.getKeepWithNextPending();

      context.clearKeepWithNextPending();

      nextRowGroupElems=rowGroupLM.getNextKnuthElements(context,alignment,bodyType);

      Keep keep=keepWithNextPending.compare(context.getKeepWithPreviousPending());

      context.clearKeepWithPreviousPending();

      keep=keep.compare(getTableLM().getKeepTogether());

      int penaltyValue=keep.getPenalty();

      int breakClass=keep.getContext();

      breakBetween=BreakUtil.compareBreakClasses(breakBetween,context.getBreakBefore());

      if (breakBetween != Constants.EN_AUTO) {

        penaltyValue=-KnuthElement.INFINITE;

        breakClass=breakBetween;

      }

      BreakElement breakElement;

      ListIterator elemIter=returnList.listIterator(returnList.size());

      ListElement elem=(ListElement)elemIter.previous();

      if (elem instanceof KnuthGlue) {

        breakElement=(BreakElement)elemIter.previous();

      }

 else {

        breakElement=(BreakElement)elem;

      }

      breakElement.setPenaltyValue(penaltyValue);

      breakElement.setBreakClass(breakClass);

      returnList.addAll(nextRowGroupElems);

      breakBetween=context.getBreakAfter();

    }

  }

  if (!returnList.isEmpty()) {

    ListIterator elemIter=returnList.listIterator(returnList.size());

    ListElement elem=(ListElement)elemIter.previous();

    if (elem instanceof KnuthGlue) {

      BreakElement breakElement=(BreakElement)elemIter.previous();

      breakElement.setPenaltyValue(KnuthElement.INFINITE);

    }

 else {

      elemIter.remove();

    }

  }

  context.updateKeepWithPreviousPending(keepWithPrevious);

  context.setBreakBefore(breakBefore);

  int widowContentLimit=getTableLM().getTable().getWidowContentLimit().getValue();

  if (widowContentLimit != 0 && bodyType == TableRowIterator.BODY) {

    ElementListUtils.removeLegalBreaks(returnList,widowContentLimit);

  }

  int orphanContentLimit=getTableLM().getTable().getOrphanContentLimit().getValue();

  if (orphanContentLimit != 0 && bodyType == TableRowIterator.BODY) {

    ElementListUtils.removeLegalBreaksFromEnd(returnList,orphanContentLimit);

  }

  return returnList;

}

Location: TableContentLayoutManager.java

Content: 

/** 

 * @return the amount of block-progression-dimension used by the content

 */

int getUsedBPD(){

  return this.usedBPD;

}

Location: TableContentLayoutManager.java

Content: 

/** 

 * Returns the X offset of the grid unit in the given column.

 * @param colIndex the column index (zero-based)

 * @param nrColSpan number columns spanned

 * @return the requested X offset

 */

protected int getXOffsetOfGridUnit(int colIndex,int nrColSpan){

  return startXOffset + getTableLM().getColumns().getXOffset(colIndex + 1,nrColSpan,getTableLM());

}

Location: TableContentLayoutManager.java

Content: 

/** 

 * Returns the X offset of the given grid unit.

 * @param gu the grid unit

 * @return the requested X offset

 */

protected int getXOffsetOfGridUnit(PrimaryGridUnit gu){

  return getXOffsetOfGridUnit(gu.getColIndex(),gu.getCell().getNumberColumnsSpanned());

}

Location: TableContentLayoutManager.java

Content: 

/** 

 * Sets the overall starting x-offset. Used for proper placement of cells.

 * @param startXOffset starting x-offset (table's start-indent)

 */

void setStartXOffset(int startXOffset){

  this.startXOffset=startXOffset;

}

Location: TableContentLayoutManager.java

Content: 

/** 

 * Main constructor

 * @param parent Parent layout manager

 */

TableContentLayoutManager(TableLayoutManager parent){

  this.tableLM=parent;

  Table table=getTableLM().getTable();

  this.bodyIter=new TableRowIterator(table,TableRowIterator.BODY);

  if (table.getTableHeader() != null) {

    headerIter=new TableRowIterator(table,TableRowIterator.HEADER);

  }

  if (table.getTableFooter() != null) {

    footerIter=new TableRowIterator(table,TableRowIterator.FOOTER);

  }

  stepper=new TableStepper(this);

}

