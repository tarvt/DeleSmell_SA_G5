Location: AbstractPSExtensionObject.java

Content: 

/** 

 * Main constructor.

 * @param parent the parent node

 * @see org.apache.fop.fo.FONode#FONode(FONode)

 */

public AbstractPSExtensionObject(FONode parent){

  super(parent);

}

Location: AbstractPSExtensionObject.java

Content: 

/** 

 * {@inheritDoc} 

 */

protected void characters(char[] data,int start,int length,PropertyList pList,Locator locator){

  String content=setupCode.getContent();

  if (content != null) {

    StringBuffer sb=new StringBuffer(content);

    sb.append(data,start,length);

    setupCode.setContent(sb.toString());

  }

 else {

    setupCode.setContent(new String(data,start,length));

  }

}

Location: AbstractPSExtensionObject.java

Content: 

/** 

 * {@inheritDoc} 

 */

public void endOfNode() throws FOPException {

  super.endOfNode();

  String s=setupCode.getContent();

  if (s == null || s.length() == 0) {

    missingChildElementError("#PCDATA");

  }

}

Location: AbstractPSExtensionObject.java

Content: 

/** 

 * {@inheritDoc} 

 */

public ExtensionAttachment getExtensionAttachment(){

  return this.setupCode;

}

Location: AbstractPSExtensionObject.java

Content: 

/** 

 * {@inheritDoc} 

 */

public String getNormalNamespacePrefix(){

  return "ps";

}

Location: AbstractPSExtensionObject.java

Content: 

/** 

 * {@inheritDoc} 

 */

protected void validateChildNode(Locator loc,String nsURI,String localName) throws ValidationException {

  if (FO_URI.equals(nsURI)) {

    invalidChildError(loc,nsURI,localName);

  }

}

