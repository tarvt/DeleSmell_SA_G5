Location: ComplexGlyphLayout.java

Content: 

public ComplexGlyphLayout(AttributedCharacterIterator aci,int[] charMap,Point2D offset,FontRenderContext frc){

  super(aci,charMap,offset,frc);

}

Location: ComplexGlyphLayout.java

Content: 

@Override protected void doExplicitGlyphLayout(){

  GVTGlyphVector gv=this.gv;

  gv.performDefaultLayout();

  int ng=gv.getNumGlyphs();

  if (ng > 0) {

    this.advance=gv.getGlyphPosition(ng);

  }

 else {

    this.advance=new Point2D.Float(0,0);

  }

  this.layoutApplied=true;

}

Location: ComplexGlyphLayout.java

Content: 

public static final boolean mayRequireComplexLayout(AttributedCharacterIterator aci){

  boolean rv=false;

  GVTAttributedCharacterIterator.TextAttribute attrFont=GVTAttributedCharacterIterator.TextAttribute.GVT_FONT;

  int indexSave=aci.getIndex();

  aci.first();

  do {

    GVTFont gvtFont=(GVTFont)aci.getAttribute(attrFont);

    if (gvtFont == null) {

      continue;

    }

 else {

      if (gvtFont instanceof FOPGVTFont) {

        Font f=((FOPGVTFont)gvtFont).getFont();

        if (f.performsSubstitution() || f.performsPositioning()) {

          rv=true;

          break;

        }

      }

      aci.setIndex(aci.getRunLimit(attrFont));

    }

  }

 while (aci.next() != AttributedCharacterIterator.DONE);

  aci.setIndex(indexSave);

  return rv;

}

