Location: LengthRangeProperty.java

Content: 

private void checkConsistency(PercentBaseContext context){

  if (consistent) {

    return;

  }

  if (context == null) {

    return;

  }

  if (!minimum.isAuto() && !maximum.isAuto() && minimum.getLength().getValue(context) > maximum.getLength().getValue(context)) {

    if ((bfSet & MINSET) != 0) {

      if ((bfSet & MAXSET) != 0) {

        log.error("forcing max to min in LengthRange");

      }

      maximum=minimum;

    }

 else {

      minimum=maximum;

    }

  }

  if (!optimum.isAuto() && !maximum.isAuto() && optimum.getLength().getValue(context) > maximum.getLength().getValue(context)) {

    if ((bfSet & OPTSET) != 0) {

      if ((bfSet & MAXSET) != 0) {

        log.error("forcing opt to max in LengthRange");

        optimum=maximum;

      }

 else {

        maximum=optimum;

      }

    }

 else {

      optimum=maximum;

    }

  }

 else   if (!optimum.isAuto() && !minimum.isAuto() && optimum.getLength().getValue(context) < minimum.getLength().getValue(context)) {

    if ((bfSet & MINSET) != 0) {

      if ((bfSet & OPTSET) != 0) {

        log.error("forcing opt to min in LengthRange");

      }

      optimum=minimum;

    }

 else {

      minimum=optimum;

    }

  }

  consistent=true;

}

Location: LengthRangeProperty.java

Content: 

/** 

 * {@inheritDoc}

 */

public Property getComponent(int cmpId){

  if (cmpId == CP_MINIMUM) {

    return getMinimum(null);

  }

 else   if (cmpId == CP_OPTIMUM) {

    return getOptimum(null);

  }

 else   if (cmpId == CP_MAXIMUM) {

    return getMaximum(null);

  }

 else {

    return null;

  }

}

Location: LengthRangeProperty.java

Content: 

/** 

 * @return this.lengthRange

 */

public LengthRangeProperty getLengthRange(){

  return this;

}

Location: LengthRangeProperty.java

Content: 

/** 

 * @param context Percentage evaluation context

 * @return maximum length

 */

public Property getMaximum(PercentBaseContext context){

  checkConsistency(context);

  return this.maximum;

}

Location: LengthRangeProperty.java

Content: 

/** 

 * @param context Percentage evaluation context

 * @return minimum length

 */

public Property getMinimum(PercentBaseContext context){

  checkConsistency(context);

  return this.minimum;

}

Location: LengthRangeProperty.java

Content: 

/** 

 * @param context Percentage evaluation context

 * @return optimum length

 */

public Property getOptimum(PercentBaseContext context){

  checkConsistency(context);

  return this.optimum;

}

Location: LengthRangeProperty.java

Content: 

/** 

 * {@inheritDoc}

 */

public void setComponent(int cmpId,Property cmpnValue,boolean bIsDefault){

  if (cmpId == CP_MINIMUM) {

    setMinimum(cmpnValue,bIsDefault);

  }

 else   if (cmpId == CP_OPTIMUM) {

    setOptimum(cmpnValue,bIsDefault);

  }

 else   if (cmpId == CP_MAXIMUM) {

    setMaximum(cmpnValue,bIsDefault);

  }

}

Location: LengthRangeProperty.java

Content: 

/** 

 * Set maximum value to max if it is &gt;= optimum or optimum isn't set.

 * @param max A Length value specifying the maximum value for this

 * @param bIsDefault If true, this is set as a "default" valueand not a user-specified explicit value.

 */

protected void setMaximum(Property max,boolean bIsDefault){

  maximum=max;

  if (!bIsDefault) {

    bfSet|=MAXSET;

  }

  consistent=false;

}

Location: LengthRangeProperty.java

Content: 

/** 

 * Set minimum value to min.

 * @param minimum A Length value specifying the minimum value for thisLengthRange.

 * @param bIsDefault If true, this is set as a "default" valueand not a user-specified explicit value.

 */

protected void setMinimum(Property minimum,boolean bIsDefault){

  this.minimum=minimum;

  if (!bIsDefault) {

    bfSet|=MINSET;

  }

  consistent=false;

}

Location: LengthRangeProperty.java

Content: 

/** 

 * Set the optimum value.

 * @param opt A Length value specifying the optimum value for this

 * @param bIsDefault If true, this is set as a "default" valueand not a user-specified explicit value.

 */

protected void setOptimum(Property opt,boolean bIsDefault){

  optimum=opt;

  if (!bIsDefault) {

    bfSet|=OPTSET;

  }

  consistent=false;

}

Location: LengthRangeProperty.java

Content: 

/** 

 * Converts this <code>LengthRangeProperty</code> to a <code>MinOptMax</code>.

 * @param context Percentage evaluation context

 * @return the requested MinOptMax instance

 */

public MinOptMax toMinOptMax(PercentBaseContext context){

  int min=getMinimum(context).isAuto() ? 0 : getMinimum(context).getLength().getValue(context);

  int opt=getOptimum(context).isAuto() ? min : getOptimum(context).getLength().getValue(context);

  int max=getMaximum(context).isAuto() ? Integer.MAX_VALUE : getMaximum(context).getLength().getValue(context);

  return MinOptMax.getInstance(min,opt,max);

}

