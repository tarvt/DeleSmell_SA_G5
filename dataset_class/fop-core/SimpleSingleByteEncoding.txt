Location: SimpleSingleByteEncoding.java

Content: 

/** 

 * Adds a new character to the encoding.

 * @param ch the named character

 * @return the code point assigned to the character

 */

public char addCharacter(NamedCharacter ch){

  if (!ch.hasSingleUnicodeValue()) {

    throw new IllegalArgumentException("Only NamedCharacters with a single Unicode value" + " are currently supported!");

  }

  if (isFull()) {

    throw new IllegalStateException("Encoding is full!");

  }

  char newSlot=(char)(getLastChar() + 1);

  this.mapping.add(ch);

  this.charMap.put(ch.getSingleUnicodeValue(),newSlot);

  return newSlot;

}

Location: SimpleSingleByteEncoding.java

Content: 

/** 

 * Returns the named character at a given code point in the encoding.

 * @param codePoint the code point of the character

 * @return the NamedCharacter (or null if no character is at this position)

 */

public NamedCharacter getCharacterForIndex(int codePoint){

  if (codePoint < 0 || codePoint > 255) {

    throw new IllegalArgumentException("codePoint must be between 0 and 255");

  }

  if (codePoint <= getLastChar()) {

    return this.mapping.get(codePoint - 1);

  }

 else {

    return null;

  }

}

Location: SimpleSingleByteEncoding.java

Content: 

/** 

 * Indicates whether the encoding is full (with 256 code points).

 * @return true if the encoding is full

 */

public boolean isFull(){

  return (getSize() == 256);

}

Location: SimpleSingleByteEncoding.java

Content: 

/** 

 * Main constructor.

 * @param name the encoding's name

 */

public SimpleSingleByteEncoding(String name){

  this.name=name;

}

