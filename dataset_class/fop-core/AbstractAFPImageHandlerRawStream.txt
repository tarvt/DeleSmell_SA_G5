Location: AbstractAFPImageHandlerRawStream.java

Content: 

/** 

 * Sets additional parameters on the image object info being built. By default, this method does nothing but it can be overridden to provide additional functionality.

 * @param imageObjectInfo the image object info being built

 * @param image the image being processed

 */

protected void setAdditionalParameters(AFPDataObjectInfo imageObjectInfo,ImageRawStream image){

}

Location: AbstractAFPImageHandlerRawStream.java

Content: 

private void updateDataObjectInfo(AFPDataObjectInfo dataObjectInfo,ImageRawStream rawStream,AFPResourceManager resourceManager) throws IOException {

  dataObjectInfo.setMimeType(rawStream.getFlavor().getMimeType());

  AFPResourceInfo resourceInfo=dataObjectInfo.getResourceInfo();

  if (!resourceInfo.levelChanged()) {

    resourceInfo.setLevel(resourceManager.getResourceLevelDefaults().getDefaultResourceLevel(ResourceObject.TYPE_IMAGE));

  }

  InputStream inputStream=rawStream.createInputStream();

  try {

    dataObjectInfo.setData(IOUtils.toByteArray(inputStream));

  }

  finally {

    IOUtils.closeQuietly(inputStream);

  }

  int dataHeight=rawStream.getSize().getHeightPx();

  dataObjectInfo.setDataHeight(dataHeight);

  int dataWidth=rawStream.getSize().getWidthPx();

  dataObjectInfo.setDataWidth(dataWidth);

  ImageSize imageSize=rawStream.getSize();

  dataObjectInfo.setDataHeightRes((int)(imageSize.getDpiHorizontal() * 10));

  dataObjectInfo.setDataWidthRes((int)(imageSize.getDpiVertical() * 10));

}

