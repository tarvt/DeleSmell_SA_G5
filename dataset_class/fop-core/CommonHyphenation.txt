Location: CommonHyphenation.java

Content: 

/** 

 * Construct a CommonHyphenation object holding the given properties

 */

private CommonHyphenation(StringProperty language,StringProperty country,StringProperty script,EnumProperty hyphenate,OptionalCharacterProperty hyphenationCharacter,NumberProperty hyphenationPushCharacterCount,NumberProperty hyphenationRemainCharacterCount){

  this.language=language;

  this.country=country;

  this.script=script;

  this.hyphenate=hyphenate;

  this.hyphenationCharacter=hyphenationCharacter;

  this.hyphenationPushCharacterCount=hyphenationPushCharacterCount;

  this.hyphenationRemainCharacterCount=hyphenationRemainCharacterCount;

}

Location: CommonHyphenation.java

Content: 

/** 

 * Returns the effective hyphenation character for a font. The hyphenation character specified in XSL-FO may be substituted if it's not available in the font.

 * @param font the font

 * @return the effective hyphenation character.

 */

public Character getHyphChar(org.apache.fop.fonts.Font font){

  if (hyphenationCharacter.getObject() == null) {

    return null;

  }

  char hyphChar=hyphenationCharacter.getCharacter();

  if (font.hasChar(hyphChar)) {

    return hyphChar;

  }

  char effHyphChar=hyphChar;

  boolean warn=false;

  if (font.hasChar(HYPHEN_MINUS)) {

    effHyphChar=HYPHEN_MINUS;

    warn=true;

  }

 else   if (font.hasChar(MINUS_SIGN)) {

    effHyphChar=MINUS_SIGN;

    FontMetrics metrics=font.getFontMetrics();

    if (metrics instanceof Typeface) {

      Typeface typeface=(Typeface)metrics;

      if ("SymbolEncoding".equals(typeface.getEncodingName())) {

      }

 else {

        warn=true;

      }

    }

  }

 else {

    effHyphChar=' ';

    FontMetrics metrics=font.getFontMetrics();

    if (metrics instanceof Typeface) {

      Typeface typeface=(Typeface)metrics;

      if ("ZapfDingbatsEncoding".equals(typeface.getEncodingName())) {

      }

 else {

        warn=true;

      }

    }

  }

  if (warn) {

    LOG.warn("Substituted specified hyphenation character (0x" + Integer.toHexString(hyphChar) + ") with 0x"+ Integer.toHexString(effHyphChar)+ " because the font doesn't have the specified hyphenation character: "+ font.getFontTriplet());

  }

  return effHyphChar;

}

Location: CommonHyphenation.java

Content: 

/** 

 * Returns the IPD for the hyphenation character for a font.

 * @param font the font

 * @return the IPD in millipoints for the hyphenation character.

 */

public int getHyphIPD(org.apache.fop.fonts.Font font){

  Character hyphChar=getHyphChar(font);

  return (hyphChar == null) ? 0 : font.getCharWidth(hyphChar);

}

Location: CommonHyphenation.java

Content: 

/** 

 * Creates and returns a  {@link Locale} representation of the language and country.

 * @return the language (and the country if set) represented as a locale, {@code null}if the language has not been set (i.e., has been left to its initial value of "none")

 */

public Locale getLocale(){

  return toLocale(language.getString(),country.getString());

}

Location: CommonHyphenation.java

Content: 

private static boolean isDefined(String property){

  return !(property == null || property.equalsIgnoreCase("none"));

}

Location: CommonHyphenation.java

Content: 

/** 

 * Creates and returns a  {@link Locale} representation of the given language, and thegiven country if set. The country is considered to be set if not  {@code null} andnot set to "none".

 * @return the language and country represented as a locale, {@code null} if thelanguage is null or "none" (case insensitive)

 */

public static Locale toLocale(String language,String country){

  Locale locale=null;

  if (isDefined(language)) {

    if (isDefined(country)) {

      locale=new Locale(language,country);

    }

 else {

      locale=new Locale(language);

    }

  }

  return locale;

}

