Location: PDFDocumentGraphics2D.java

Content: 

/** 

 * Closes the current page and adds it to the PDF file.

 */

protected void closePage(){

  if (!pdfContext.isPagePending()) {

    return;

  }

  currentStream.write("Q\n");

  PDFStream pdfStream=this.pdfDoc.getFactory().makeStream(PDFFilterList.CONTENT_FILTER,false);

  pdfStream.add(getString());

  this.pdfDoc.registerObject(pdfStream);

  pdfContext.getCurrentPage().setContents(new PDFReference(pdfStream));

  PDFAnnotList annots=pdfContext.getCurrentPage().getAnnotations();

  if (annots != null) {

    this.pdfDoc.addObject(annots);

  }

  this.pdfDoc.addObject(pdfContext.getCurrentPage());

  pdfContext.clearCurrentPage();

}

Location: PDFDocumentGraphics2D.java

Content: 

/** 

 * The rendering process has finished. This should be called after the rendering has completed as there is no other indication it is complete. This will then write the results to the output stream.

 * @throws IOException an io exception if there is a problemwriting to the output stream

 */

public void finish() throws IOException {

  hongshuai();

  if (!pdfContext.isPagePending()) {

    return;

  }

  currentStream.write("Q\n");

  PDFStream pdfStream=this.pdfDoc.getFactory().makeStream(PDFFilterList.CONTENT_FILTER,false);

  pdfStream.add(getString());

  this.pdfDoc.registerObject(pdfStream);

  pdfContext.getCurrentPage().setContents(new PDFReference(pdfStream));

  PDFAnnotList annots=pdfContext.getCurrentPage().getAnnotations();

  if (annots != null) {

    this.pdfDoc.addObject(annots);

  }

  this.pdfDoc.addObject(pdfContext.getCurrentPage());

  pdfContext.clearCurrentPage();

  if (fontInfo != null) {

    pdfDoc.getResources().addFonts(pdfDoc,fontInfo);

  }

  this.pdfDoc.output(outputStream);

  pdfDoc.outputTrailer(outputStream);

  outputStream.flush();

}

Location: PDFDocumentGraphics2D.java

Content: 

/** 

 * @return the device resolution (in dpi) for rendering.

 */

public float getDeviceDPI(){

  return deviceDPI;

}

Location: PDFDocumentGraphics2D.java

Content: 

/** 

 * Return the PDFContext for this instance.

 * @return the PDFContext

 */

public PDFContext getPDFContext(){

  return this.pdfContext;

}

Location: PDFDocumentGraphics2D.java

Content: 

/** 

 * Get the pdf document created by this class.

 * @return the pdf document

 */

public PDFDocument getPDFDocument(){

  return this.pdfDoc;

}

Location: PDFDocumentGraphics2D.java

Content: 

/** 

 * Is called to prepare the PDFDocumentGraphics2D for the next page to be painted. Basically, this closes the current page. A new page is prepared as soon as painting starts.

 */

public void nextPage(){

  hongshuai();

  if (!pdfContext.isPagePending()) {

    return;

  }

  currentStream.write("Q\n");

  PDFStream pdfStream=this.pdfDoc.getFactory().makeStream(PDFFilterList.CONTENT_FILTER,false);

  pdfStream.add(getString());

  this.pdfDoc.registerObject(pdfStream);

  pdfContext.getCurrentPage().setContents(new PDFReference(pdfStream));

  PDFAnnotList annots=pdfContext.getCurrentPage().getAnnotations();

  if (annots != null) {

    this.pdfDoc.addObject(annots);

  }

  this.pdfDoc.addObject(pdfContext.getCurrentPage());

  pdfContext.clearCurrentPage();

}

Location: PDFDocumentGraphics2D.java

Content: 

/** 

 * Is called to prepare the PDFDocumentGraphics2D for the next page to be painted. Basically, this closes the current page. A new page is prepared as soon as painting starts. This method allows to start the new page (and following pages) with a different page size.

 * @param width the width of the new page (in points)

 * @param height the height of the new page (in points)

 */

public void nextPage(int width,int height){

  this.width=width;

  this.height=height;

  nextPage();

}

Location: PDFDocumentGraphics2D.java

Content: 

/** 

 * Create a new PDFDocumentGraphics2D. This is used to create a new pdf document. For use by the transcoder which needs font information for the bridge before the document size is known. The resulting document is written to the stream after rendering. This constructor is Avalon-style.

 */

public PDFDocumentGraphics2D(){

  this(false);

}

Location: PDFDocumentGraphics2D.java

Content: 

/** 

 * Create a new PDFDocumentGraphics2D. This is used to create a new pdf document, the height, width and output stream can be setup later. For use by the transcoder which needs font information for the bridge before the document size is known. The resulting document is written to the stream after rendering.

 * @param textAsShapes set this to true so that text will be renderedusing curves and not the font.

 */

public PDFDocumentGraphics2D(boolean textAsShapes){

  super(textAsShapes);

  this.pdfDoc=new PDFDocument("Apache FOP Version " + Version.getVersion() + ": PDFDocumentGraphics2D");

  this.pdfContext=new PDFContext();

  this.colorHandler=new PDFColorHandler(this.pdfDoc.getResources());

}

Location: PDFDocumentGraphics2D.java

Content: 

/** 

 * Create a new PDFDocumentGraphics2D. This is used to create a new pdf document of the given height and width. The resulting document is written to the stream after rendering.

 * @param textAsShapes set this to true so that text will be renderedusing curves and not the font.

 * @param stream the stream that the final document should be written to.

 * @param width the width of the document (in points)

 * @param height the height of the document (in points)

 * @throws IOException an io exception if there is a problemwriting to the output stream

 */

public PDFDocumentGraphics2D(boolean textAsShapes,OutputStream stream,int width,int height) throws IOException {

  this(textAsShapes);

  setupDocument(stream,width,height);

}

Location: PDFDocumentGraphics2D.java

Content: 

/** 

 * This constructor supports the create method

 * @param g the pdf document graphics to make a copy of

 */

public PDFDocumentGraphics2D(PDFDocumentGraphics2D g){

  super(g);

  this.pdfContext=g.pdfContext;

  this.width=g.width;

  this.height=g.height;

  this.svgWidth=g.svgWidth;

  this.svgHeight=g.svgHeight;

}

Location: PDFDocumentGraphics2D.java

Content: 

/** 

 * Set the background of the pdf document. This is used to set the background for the pdf document Rather than leaving it as the default white.

 * @param col the background colour to fill

 */

public void setBackgroundColor(Color col){

  StringBuffer sb=new StringBuffer();

  sb.append("q\n");

  this.colorHandler.establishColor(sb,col,true);

  sb.append("0 0 ").append(width).append(" ").append(height).append(" re\n");

  sb.append("f\n");

  sb.append("Q\n");

  currentStream.write(sb.toString());

}

Location: PDFDocumentGraphics2D.java

Content: 

/** 

 * Set the device resolution for rendering.  Will take effect at the start of the next page.

 * @param deviceDPI the device resolution (in dpi)

 */

public void setDeviceDPI(float deviceDPI){

  this.deviceDPI=deviceDPI;

}

Location: PDFDocumentGraphics2D.java

Content: 

/** 

 * Sets the font info for this PDF document.

 * @param fontInfo the font info object with all the fonts

 */

public void setFontInfo(FontInfo fontInfo){

  this.fontInfo=fontInfo;

}

Location: PDFDocumentGraphics2D.java

Content: 

/** 

 * Set the dimensions of the svg document that will be drawn. This is useful if the dimensions of the svg document are different from the pdf document that is to be created. The result is scaled so that the svg fits correctly inside the pdf document.

 * @param w the width of the page

 * @param h the height of the page

 */

public void setSVGDimension(float w,float h){

  this.svgWidth=w;

  this.svgHeight=h;

}

Location: PDFDocumentGraphics2D.java

Content: 

/** 

 * Setup a default FontInfo instance if none has been setup before.

 */

public void setupDefaultFontInfo(){

  if (fontInfo == null) {

    FontInfo fontInfo=new FontInfo();

    boolean base14Kerning=false;

    FontSetup.setup(fontInfo,base14Kerning);

    setFontInfo(fontInfo);

  }

}

Location: PDFDocumentGraphics2D.java

Content: 

/** 

 * Setup the document.

 * @param stream the output stream to write the document

 * @param width the width of the page

 * @param height the height of the page

 * @throws IOException an io exception if there is a problemwriting to the output stream

 */

public void setupDocument(OutputStream stream,int width,int height) throws IOException {

  this.width=width;

  this.height=height;

  pdfDoc.outputHeader(stream);

  setOutputStream(stream);

}

Location: PDFDocumentGraphics2D.java

Content: 

/** 

 * Called to prepare a new page

 * @throws IOException if starting the new page fails due to I/O errors.

 */

protected void startPage() throws IOException {

  if (pdfContext.isPagePending()) {

    throw new IllegalStateException("Close page first before starting another");

  }

  paintingState=new PDFPaintingState();

  if (this.initialTransform == null) {

    this.initialTransform=getTransform();

    this.initialClip=getClip();

  }

 else {

    setTransform(this.initialTransform);

    setClip(this.initialClip);

  }

  currentFontName="";

  currentFontSize=0;

  if (currentStream == null) {

    currentStream=new StringWriter();

  }

  PDFResources pdfResources=this.pdfDoc.getResources();

  PDFPage page=this.pdfDoc.getFactory().makePage(pdfResources,width,height);

  resourceContext=page;

  pdfContext.setCurrentPage(page);

  pageRef=page.makeReference();

  currentStream.write("q\n");

  AffineTransform at=new AffineTransform(1.0,0.0,0.0,-1.0,0.0,height);

  currentStream.write("1 0 0 -1 0 " + height + " cm\n");

  if (svgWidth != 0) {

    double scaleX=width / svgWidth;

    double scaleY=height / svgHeight;

    at.scale(scaleX,scaleY);

    currentStream.write("" + PDFNumber.doubleOut(scaleX) + " 0 0 "+ PDFNumber.doubleOut(scaleY)+ " 0 0 cm\n");

  }

  if (deviceDPI != NORMAL_PDF_RESOLUTION) {

    double s=NORMAL_PDF_RESOLUTION / deviceDPI;

    at.scale(s,s);

    currentStream.write("" + PDFNumber.doubleOut(s) + " 0 0 "+ PDFNumber.doubleOut(s)+ " 0 0 cm\n");

    scale(1 / s,1 / s);

  }

  paintingState.concatenate(at);

  pdfContext.increasePageCount();

}

