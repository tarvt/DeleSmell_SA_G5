Location: ResourceResolverFactory.java

Content: 

/** 

 * A helper merthod that creates an internal resource resolver using the default resover: {@link ResourceResolverFactory#createDefaultResourceResolver()}.

 * @param baseURI the base URI from which to resolve URIs

 * @return the default internal resource resolver

 */

public static InternalResourceResolver createDefaultInternalResourceResolver(URI baseURI){

  return new InternalResourceResolver(baseURI,createDefaultResourceResolver());

}

Location: ResourceResolverFactory.java

Content: 

/** 

 * Returns the default resource resolver, this is most basic resolver which can be used when no there are no I/O or file access restrictions.

 * @return the default resource resolver

 */

public static ResourceResolver createDefaultResourceResolver(){

  return DefaultResourceResolver.INSTANCE;

}

Location: ResourceResolverFactory.java

Content: 

/** 

 * Creates an interal resource resolver given a base URI and a resource resolver.

 * @param baseURI the base URI from which to resolve URIs

 * @param resolver the resource resolver

 * @return the internal resource resolver

 */

public static InternalResourceResolver createInternalResourceResolver(URI baseURI,ResourceResolver resolver){

  return new InternalResourceResolver(baseURI,resolver);

}

Location: ResourceResolverFactory.java

Content: 

/** 

 * This creates the builder class for binding URI schemes to implementations of {@link ResourceResolver}. This allows users to define their own URI schemes such that they have finer control over the acquisition of resources.

 * @param defaultResolver the default resource resolver that should be used in the event thatnone of the other registered resolvers match the scheme

 * @return the scheme aware {@link ResourceResolver} builder

 */

public static SchemeAwareResourceResolverBuilder createSchemeAwareResourceResolverBuilder(ResourceResolver defaultResolver){

  return new SchemeAwareResourceResolverBuilderImpl(defaultResolver);

}

Location: ResourceResolverFactory.java

Content: 

/** 

 * Creates a temporary-resource-scheme aware resource resolver. Temporary resource URIs are created by  {@link TempResourceURIGenerator}.

 * @param tempResourceResolver the temporary-resource-scheme resolver to use

 * @param defaultResourceResolver the default resource resolver to use

 * @return the ressource resolver

 */

public static ResourceResolver createTempAwareResourceResolver(TempResourceResolver tempResourceResolver,ResourceResolver defaultResourceResolver){

  return new TempAwareResourceResolver(tempResourceResolver,defaultResourceResolver);

}

Location: ResourceResolverFactory.java

Content: 

private ResourceResolverFactory(){

}

