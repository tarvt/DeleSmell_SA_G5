Location: ImageRenderedAdapterTestCase.java

Content: 

/** 

 * Create a mocked PDF document from RenderedImage.

 * @return

 */

public static PDFDocument createPDFDocumentFromRenderedImage(){

  PDFDocument doc=mock(PDFDocument.class);

  PDFResources resources=mock(PDFResources.class);

  when(doc.getResources()).thenReturn(resources);

  PDFProfile profile=mock(PDFProfile.class);

  when(profile.getPDFAMode()).thenReturn(PDFAMode.PDFA_2A);

  PDFImageXObject pio=new PDFImageXObject(0,null);

  pio.setObjectNumber(0);

  when(doc.getProfile()).thenReturn(profile);

  when(doc.addImage(any(PDFResourceContext.class),any(PDFImage.class))).thenReturn(pio);

  PDFFactory factory=mock(PDFFactory.class);

  PDFICCStream iccStream=mock(PDFICCStream.class);

  ICC_Profile iccProfile=mock(ICC_Profile.class);

  when(iccProfile.getNumComponents()).thenReturn(4);

  when(iccStream.getICCProfile()).thenReturn(iccProfile);

  when(factory.makePDFICCStream()).thenReturn(iccStream);

  PDFICCBasedColorSpace iccbcs=new PDFICCBasedColorSpace(null,iccStream);

  when(factory.makeICCBasedColorSpace(null,null,iccStream)).thenReturn(iccbcs);

  when(doc.getFactory()).thenReturn(factory);

  return doc;

}

Location: ImageRenderedAdapterTestCase.java

Content: 

/** 

 * Creates a semi transparent 4x4 image in index color space.

 * @param fullyTransparent true if image is supposed to have a fullytransparent color

 * @return RenderedImage

 */

public static RenderedImage createRenderedImageWithIndexColorModel(boolean fullyTransparent){

  IndexColorModel cm;

  if (fullyTransparent) {

    byte[] i={(byte)0x00,(byte)0x80,(byte)0xB0,(byte)0xF0};

    cm=new IndexColorModel(8,4,i,i,i,i);

  }

 else {

    byte[] i={(byte)0x10,(byte)0x80,(byte)0xB0,(byte)0xF0};

    cm=new IndexColorModel(8,4,i,i,i,i);

  }

  BufferedImage ri=new BufferedImage(4,4,BufferedImage.TYPE_BYTE_INDEXED,cm);

  for (int x=0; x < 2; x++) {

    for (int y=0; y < 2; y++) {

      Color c=new Color(128,128,128,128);

      ri.setRGB(x,y,c.getRGB());

    }

  }

  return ri;

}

Location: ImageRenderedAdapterTestCase.java

Content: 

/** 

 * creates a semi transparent 4x4 image in ABGR color space

 * @return RenderedImage

 */

static RenderedImage createRenderedImageWithRGBA(){

  BufferedImage ri=new BufferedImage(4,4,BufferedImage.TYPE_4BYTE_ABGR);

  for (int x=0; x < 2; x++) {

    for (int y=0; y < 2; y++) {

      Color c=new Color(128,128,128,128);

      ri.setRGB(x,y,c.getRGB());

    }

  }

  return ri;

}

Location: ImageRenderedAdapterTestCase.java

Content: 

/** 

 * tests whether ARGB images return a soft mask

 */

@Test public void testSetupWithARGBReturnsSoftMask(){

  RenderedImage ri=createRenderedImageWithRGBA();

  ImageRendered ir=mock(ImageRendered.class);

  when(ir.getRenderedImage()).thenReturn(ri);

  ImageInfo ii=mock(ImageInfo.class);

  when(ir.getInfo()).thenReturn(ii);

  ImageRenderedAdapter ira=new ImageRenderedAdapter(ir,"mock");

  PDFDocument doc=createPDFDocumentFromRenderedImage();

  PDFDictionary dict=new PDFDictionary();

  ira.setup(doc);

  ira.populateXObjectDictionary(dict);

  assertNotNull(ira.getSoftMaskReference());

}

Location: ImageRenderedAdapterTestCase.java

Content: 

/** 

 * FOP-2847: tests whether images with index color model return a soft mask</p>

 */

@Test public void testSetupWithIndexColorModelFullyTransparentReturnsSoftMask(){

  RenderedImage ri=createRenderedImageWithIndexColorModel(true);

  ImageRendered ir=mock(ImageRendered.class);

  when(ir.getRenderedImage()).thenReturn(ri);

  ImageInfo ii=mock(ImageInfo.class);

  when(ir.getInfo()).thenReturn(ii);

  ImageRenderedAdapter ira=new ImageRenderedAdapter(ir,"mock");

  PDFDocument doc=createPDFDocumentFromRenderedImage();

  PDFDictionary dict=new PDFDictionary();

  ira.setup(doc);

  ira.populateXObjectDictionary(dict);

  assertNotNull(ira.getSoftMaskReference());

}

Location: ImageRenderedAdapterTestCase.java

Content: 

/** 

 * FOP-2847: tests whether images with index color model return a soft mask</p>

 */

@Test public void testSetupWithIndexColorModelSemiTransparentReturnsSoftMask(){

  RenderedImage ri=createRenderedImageWithIndexColorModel(false);

  ImageRendered ir=mock(ImageRendered.class);

  when(ir.getRenderedImage()).thenReturn(ri);

  ImageInfo ii=mock(ImageInfo.class);

  when(ir.getInfo()).thenReturn(ii);

  ImageRenderedAdapter ira=new ImageRenderedAdapter(ir,"mock");

  PDFDocument doc=createPDFDocumentFromRenderedImage();

  PDFDictionary dict=new PDFDictionary();

  ira.setup(doc);

  ira.populateXObjectDictionary(dict);

  assertNotNull(ira.getSoftMaskReference());

}

