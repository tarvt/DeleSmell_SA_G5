Location: FontListSerializer.java

Content: 

/** 

 * Generates SAX events from the font damily map.

 * @param fontFamilies the font families

 * @param handler the target SAX handler

 * @throws SAXException if an XML-related exception occurs

 */

public void generateSAX(SortedMap fontFamilies,GenerationHelperContentHandler handler) throws SAXException {

  generateSAX(fontFamilies,null,handler);

}

Location: FontListSerializer.java

Content: 

/** 

 * Generates SAX events from the font damily map.

 * @param fontFamilies the font families

 * @param singleFamily if not null, the output will be filtered so only this single font familywill be used

 * @param handler the target SAX handler

 * @throws SAXException if an XML-related exception occurs

 */

public void generateSAX(SortedMap fontFamilies,String singleFamily,GenerationHelperContentHandler handler) throws SAXException {

  handler.startDocument();

  AttributesImpl atts=new AttributesImpl();

  handler.startElement(FONTS,atts);

  for (  Object o : fontFamilies.entrySet()) {

    Map.Entry entry=(Map.Entry)o;

    String familyName=(String)entry.getKey();

    if (singleFamily != null && !singleFamily.equals(familyName)) {

      continue;

    }

    atts.clear();

    atts.addAttribute("",NAME,NAME,CDATA,familyName);

    atts.addAttribute("",STRIPPED_NAME,STRIPPED_NAME,CDATA,stripQuotes(familyName));

    handler.startElement(FAMILY,atts);

    List containers=(List)entry.getValue();

    generateXMLForFontContainers(handler,containers);

    handler.endElement(FAMILY);

  }

  handler.endElement(FONTS);

  handler.endDocument();

}

Location: FontListSerializer.java

Content: 

private void generateXMLForFontContainers(GenerationHelperContentHandler handler,List containers) throws SAXException {

  AttributesImpl atts=new AttributesImpl();

  for (  Object container : containers) {

    FontSpec cont=(FontSpec)container;

    atts.clear();

    atts.addAttribute("",KEY,KEY,CDATA,cont.getKey());

    atts.addAttribute("",TYPE,TYPE,CDATA,cont.getFontMetrics().getFontType().getName());

    handler.startElement(FONT,atts);

    generateXMLForTriplets(handler,cont.getTriplets());

    handler.endElement(FONT);

  }

}

Location: FontListSerializer.java

Content: 

private void generateXMLForTriplets(GenerationHelperContentHandler handler,Collection triplets) throws SAXException {

  AttributesImpl atts=new AttributesImpl();

  atts.clear();

  handler.startElement(TRIPLETS,atts);

  for (  Object triplet1 : triplets) {

    FontTriplet triplet=(FontTriplet)triplet1;

    atts.clear();

    atts.addAttribute("",NAME,NAME,CDATA,triplet.getName());

    atts.addAttribute("",STYLE,STYLE,CDATA,triplet.getStyle());

    atts.addAttribute("",WEIGHT,WEIGHT,CDATA,Integer.toString(triplet.getWeight()));

    handler.element(TRIPLET,atts);

  }

  handler.endElement(TRIPLETS);

}

Location: FontListSerializer.java

Content: 

private String stripQuotes(String name){

  return quotePattern.matcher(name).replaceAll("");

}

