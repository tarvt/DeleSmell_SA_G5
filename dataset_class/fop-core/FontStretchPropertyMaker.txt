Location: FontStretchPropertyMaker.java

Content: 

/** 

 * Calculates the nearest absolute font stretch property to the given font stretch

 * @param baseProperty the font stretch property as set on the parent fo

 * @param direction should be -1 to get the next narrower value or +1 for the next wider value

 */

private Property computeNextAbsoluteFontStretch(Property baseProperty,int direction){

  if (orderedFontStretchValues == null) {

    orderedFontStretchValues=new Property[]{checkEnumValues("ultra-condensed"),checkEnumValues("extra-condensed"),checkEnumValues("condensed"),checkEnumValues("semi-condensed"),checkEnumValues("normal"),checkEnumValues("semi-expanded"),checkEnumValues("expanded"),checkEnumValues("extra-expanded"),checkEnumValues("ultra-expanded")};

  }

  int baseValue=baseProperty.getEnum();

  for (int i=0; i < orderedFontStretchValues.length; i++) {

    if (baseValue == orderedFontStretchValues[i].getEnum()) {

      i=Math.min(Math.max(0,i + direction),orderedFontStretchValues.length - 1);

      return orderedFontStretchValues[i];

    }

  }

  return orderedFontStretchValues[4];

}

Location: FontStretchPropertyMaker.java

Content: 

/** 

 * Create an enum property which can handle relative font stretches

 * @param propId the font size property id.

 */

public FontStretchPropertyMaker(int propId){

  super(propId);

}

