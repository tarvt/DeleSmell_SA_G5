Location: BlockKnuthSequence.java

Content: 

/** 

 * {@inheritDoc} 

 */

public boolean appendSequence(KnuthSequence sequence){

  return false;

}

Location: BlockKnuthSequence.java

Content: 

/** 

 * {@inheritDoc} 

 */

public boolean appendSequence(KnuthSequence sequence,boolean keepTogether,BreakElement breakElement){

  if (!canAppendSequence(sequence)) {

    return false;

  }

  if (keepTogether) {

    breakElement.setPenaltyValue(KnuthElement.INFINITE);

    add(breakElement);

  }

 else   if (!getLast().isGlue()) {

    breakElement.setPenaltyValue(0);

    add(breakElement);

  }

  addAll(sequence);

  return true;

}

Location: BlockKnuthSequence.java

Content: 

/** 

 * Creates a new and empty list.

 */

public BlockKnuthSequence(){

  super();

}

Location: BlockKnuthSequence.java

Content: 

/** 

 * Creates a new list from an existing list.

 * @param list The list from which to create the new list.

 */

public BlockKnuthSequence(List list){

  super(list);

}

Location: BlockKnuthSequence.java

Content: 

/** 

 * {@inheritDoc} 

 */

public boolean canAppendSequence(KnuthSequence sequence){

  return !sequence.isInlineSequence() && !isClosed;

}

Location: BlockKnuthSequence.java

Content: 

/** 

 * {@inheritDoc} 

 */

public KnuthSequence endSequence(){

  isClosed=true;

  return this;

}

Location: BlockKnuthSequence.java

Content: 

/** 

 * {@inheritDoc} 

 */

public boolean isInlineSequence(){

  return false;

}

