Location: PDFGraphicsConfiguration.java

Content: 

/** 

 * Construct a buffered image with an alpha channel.

 * @param width the width of the image

 * @param height the height of the image

 * @return the new buffered image

 */

public BufferedImage createCompatibleImage(int width,int height){

  return new BufferedImage(width,height,BufferedImage.TYPE_INT_ARGB);

}

Location: PDFGraphicsConfiguration.java

Content: 

/** 

 * Construct a buffered image with an alpha channel, unless transparencty is OPAQUE (no alpha at all).

 * @param width the width of the image

 * @param height the height of the image

 * @param transparency the alpha value of the image

 * @return the new buffered image

 */

public BufferedImage createCompatibleImage(int width,int height,int transparency){

  if (transparency == Transparency.OPAQUE) {

    return new BufferedImage(width,height,BufferedImage.TYPE_INT_RGB);

  }

 else {

    return new BufferedImage(width,height,BufferedImage.TYPE_INT_ARGB);

  }

}

Location: PDFGraphicsConfiguration.java

Content: 

/** 

 * TODO: This should return the page bounds in Pts, I couldn't figure out how to get this for the current page from the PDFDocument (this still works for now, but it should be fixed...).

 * @return the bounds of the PDF document page

 */

public Rectangle getBounds(){

  return null;

}

Location: PDFGraphicsConfiguration.java

Content: 

/** 

 * Return a good default color model for this 'device'.

 * @return the colour model for the configuration

 */

public ColorModel getColorModel(){

  return BI_WITH_ALPHA.getColorModel();

}

Location: PDFGraphicsConfiguration.java

Content: 

/** 

 * Return a good color model given <code>transparency</code>

 * @param transparency the alpha value for the colour model

 * @return the colour model for the configuration

 */

public ColorModel getColorModel(int transparency){

  if (transparency == Transparency.OPAQUE) {

    return BI_WITHOUT_ALPHA.getColorModel();

  }

 else {

    return BI_WITH_ALPHA.getColorModel();

  }

}

Location: PDFGraphicsConfiguration.java

Content: 

/** 

 * The default transform (1:1).

 * @return the default transform for the configuration

 */

public AffineTransform getDefaultTransform(){

  return new AffineTransform();

}

Location: PDFGraphicsConfiguration.java

Content: 

/** 

 * Return our dummy instance of GraphicsDevice

 * @return the PDF graphics device

 */

public GraphicsDevice getDevice(){

  return new PDFGraphicsDevice(this);

}

Location: PDFGraphicsConfiguration.java

Content: 

/** 

 * The normalizing transform (1:1) (since we currently render images at 72dpi, which we might want to change in the future).

 * @return the normalizing transform for the configuration

 */

public AffineTransform getNormalizingTransform(){

  return new AffineTransform(2,0,0,2,0,0);

}

