Location: GlyphClassTable.java

Content: 

/** 

 * Create glyph class table.

 * @param entries list of mapped or ranged class entries, or null or empty list

 * @return a new covera table instance

 */

public static GlyphClassTable createClassTable(List entries){

  GlyphClassMapping cm;

  if ((entries == null) || (entries.size() == 0)) {

    cm=new EmptyClassTable(entries);

  }

 else   if (isMappedClass(entries)) {

    cm=new MappedClassTable(entries);

  }

 else   if (isRangeClass(entries)) {

    cm=new RangeClassTable(entries);

  }

 else   if (isCoverageSetClass(entries)) {

    cm=new CoverageSetClassTable(entries);

  }

 else {

    cm=null;

  }

  assert cm != null : "unknown class type";

  return new GlyphClassTable(cm);

}

Location: GlyphClassTable.java

Content: 

private GlyphClassTable(GlyphClassMapping cm){

  assert cm != null;

  assert cm instanceof GlyphMappingTable;

  this.cm=cm;

}

Location: GlyphClassTable.java

Content: 

private static boolean isCoverageSetClass(List entries){

  if ((entries == null) || (entries.size() == 0)) {

    return false;

  }

 else {

    for (    Object o : entries) {

      if (!(o instanceof GlyphCoverageTable)) {

        return false;

      }

    }

    return true;

  }

}

Location: GlyphClassTable.java

Content: 

private static boolean isMappedClass(List entries){

  if ((entries == null) || (entries.size() == 0)) {

    return false;

  }

 else {

    for (    Object o : entries) {

      if (!(o instanceof Integer)) {

        return false;

      }

    }

    return true;

  }

}

Location: GlyphClassTable.java

Content: 

private static boolean isRangeClass(List entries){

  if ((entries == null) || (entries.size() == 0)) {

    return false;

  }

 else {

    for (    Object o : entries) {

      if (!(o instanceof MappingRange)) {

        return false;

      }

    }

    return true;

  }

}

