Location: RepeatablePageMasterAlternativesTestCase.java

Content: 

private ConditionalPageMasterReference createCPMR(String regionName){

  ConditionalPageMasterReference cpmr=mock(ConditionalPageMasterReference.class);

  SimplePageMaster master=mock(SimplePageMaster.class);

  Region region=mock(Region.class);

  when(master.getRegion(anyInt())).thenReturn(region);

  when(region.getRegionName()).thenReturn(regionName);

  when(cpmr.getMaster()).thenReturn(master);

  return cpmr;

}

Location: RepeatablePageMasterAlternativesTestCase.java

Content: 

private RepeatablePageMasterAlternatives createRepeatablePageMasterAlternatives(ConditionalPageMasterReference cpmr,Property maximumRepeats) throws Exception {

  PropertyList pList=mock(PropertyList.class);

  when(pList.get(anyInt())).thenReturn(maximumRepeats);

  PageSequenceMaster parent=mock(PageSequenceMaster.class);

  when(parent.getName()).thenReturn("fo:page-sequence-master");

  RepeatablePageMasterAlternatives sut=new RepeatablePageMasterAlternatives(parent);

  sut.startOfNode();

  sut.bind(pList);

  sut.addConditionalPageMasterReference(cpmr);

  return sut;

}

Location: RepeatablePageMasterAlternativesTestCase.java

Content: 

/** 

 * Test that an infinite sequence of empty page masters has willTerminiate() returning false

 * @throws Exception exception

 */

@Test public void testCanProcess1() throws Exception {

  Property maximumRepeats=mock(Property.class);

  ConditionalPageMasterReference cpmr=createCPMR("empty");

  when(maximumRepeats.getEnum()).thenReturn(EN_NO_LIMIT);

  when(cpmr.isValid(anyBoolean(),anyBoolean(),anyBoolean(),anyBoolean())).thenReturn(true);

  RepeatablePageMasterAlternatives objectUnderTest=createRepeatablePageMasterAlternatives(cpmr,maximumRepeats);

  assertTrue("Should be infinite",objectUnderTest.isInfinite());

  assertTrue("Infinite sequences that do not process the main flow will " + " not terminate",!objectUnderTest.canProcess("main-flow"));

}

Location: RepeatablePageMasterAlternativesTestCase.java

Content: 

/** 

 * Test that a finite sequence of simple page masters has willTerminate() returning true

 * @throws Exception exception

 */

@Test public void testCanProcess2() throws Exception {

  Property maximumRepeats=mock(Property.class);

  NumericProperty numericProperty=mock(NumericProperty.class);

  final int maxRepeatNum=0;

  when(maximumRepeats.getEnum()).thenReturn(maxRepeatNum);

  when(maximumRepeats.getNumeric()).thenReturn(numericProperty);

  RepeatablePageMasterAlternatives objectUnderTest=createRepeatablePageMasterAlternatives(createCPMR("empty"),maximumRepeats);

  assertTrue("Should be finite sequence",!objectUnderTest.isInfinite());

  assertTrue("Finite sequences will terminate",objectUnderTest.canProcess("main-flow"));

}

Location: RepeatablePageMasterAlternativesTestCase.java

Content: 

/** 

 * @throws Exception exception

 */

@Test public void testIsInfinite1() throws Exception {

  Property maximumRepeats=mock(Property.class);

  ConditionalPageMasterReference cpmr=createCPMR("empty");

  when(maximumRepeats.getEnum()).thenReturn(EN_NO_LIMIT);

  RepeatablePageMasterAlternatives objectUnderTest=createRepeatablePageMasterAlternatives(cpmr,maximumRepeats);

  assertTrue("is infinite",objectUnderTest.isInfinite());

}

Location: RepeatablePageMasterAlternativesTestCase.java

Content: 

/** 

 * @throws Exception exception

 */

@Test public void testIsInfinite2() throws Exception {

  Property maximumRepeats=mock(Property.class);

  ConditionalPageMasterReference cpmr=createCPMR("empty");

  NumericProperty numericProperty=mock(NumericProperty.class);

  final int maxRepeatNum=0;

  assertTrue(maxRepeatNum != EN_NO_LIMIT);

  when(maximumRepeats.getEnum()).thenReturn(maxRepeatNum);

  when(maximumRepeats.getNumeric()).thenReturn(numericProperty);

  RepeatablePageMasterAlternatives objectUnderTest=createRepeatablePageMasterAlternatives(createCPMR("empty"),maximumRepeats);

  assertTrue("is infinite",!objectUnderTest.isInfinite());

}

