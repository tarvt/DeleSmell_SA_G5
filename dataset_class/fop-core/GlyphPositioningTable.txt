Location: GlyphPositioningTable.java

Content: 

/** 

 * Instantiate a <code>GlyphPositioningTable</code> object using the specified lookups and subtables.

 * @param gdef glyph definition table that applies

 * @param lookups a map of lookup specifications to subtable identifier strings

 * @param subtables a list of identified subtables

 */

public GlyphPositioningTable(GlyphDefinitionTable gdef,Map lookups,List subtables,Map<String,ScriptProcessor> processors){

  super(gdef,lookups,processors);

  if ((subtables == null) || (subtables.size() == 0)) {

    throw new AdvancedTypographicTableFormatException("subtables must be non-empty");

  }

 else {

    for (    Object o : subtables) {

      if (o instanceof GlyphPositioningSubtable) {

        addSubtable((GlyphSubtable)o);

      }

 else {

        throw new AdvancedTypographicTableFormatException("subtable must be a glyph positioning subtable");

      }

    }

    freezeSubtables();

  }

}

Location: GlyphPositioningTable.java

Content: 

/** 

 * Perform positioning processing using all matching lookups.

 * @param gs an input glyph sequence

 * @param script a script identifier

 * @param language a language identifier

 * @param fontSize size in device units

 * @param widths array of default advancements for each glyph

 * @param adjustments accumulated adjustments array (sequence) of 4-tuples of placement [PX,PY] and advance [AX,AY] adjustments, in that order,with one 4-tuple for each element of glyph sequence

 * @return true if some adjustment is not zero; otherwise, false

 */

public boolean position(GlyphSequence gs,String script,String language,int fontSize,int[] widths,int[][] adjustments){

  Map<LookupSpec,List<LookupTable>> lookups=matchLookups(script,language,"*");

  if ((lookups != null) && (lookups.size() > 0)) {

    ScriptProcessor sp=ScriptProcessor.getInstance(script,processors);

    return sp.position(this,gs,script,language,fontSize,lookups,widths,adjustments);

  }

 else {

    return false;

  }

}

