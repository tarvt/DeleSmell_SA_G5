Location: PDFGState.java

Content: 

/** 

 * Adds all values from a Map to this object.

 * @param vals source object to copy from

 */

public void addValues(Map vals){

  values.putAll(vals);

}

Location: PDFGState.java

Content: 

/** 

 * Adds all values from another GState object to this one.

 * @param state source object to copy from

 */

public void addValues(PDFGState state){

  values.putAll(state.values);

}

Location: PDFGState.java

Content: 

private void appendVal(StringBuffer sb,String name){

  Object val=values.get(name);

  if (val != null) {

    sb.append("/" + name + " "+ val+ "\n");

  }

}

Location: PDFGState.java

Content: 

/** 

 * {@inheritDoc} 

 */

protected boolean contentEquals(PDFObject obj){

  if (obj == this) {

    return true;

  }

  if (!(obj instanceof PDFGState)) {

    return false;

  }

  Map vals1=values;

  Map vals2=((PDFGState)obj).values;

  if (vals1.size() != vals2.size()) {

    return false;

  }

  for (  Map.Entry<Object,Object> e : (Set<Map.Entry<Object,Object>>)vals2.entrySet()) {

    Object str=e.getKey();

    Object obj1=vals1.get(str);

    if (!obj1.equals(e.getValue())) {

      return false;

    }

  }

  return true;

}

Location: PDFGState.java

Content: 

/** 

 * Sets the alpha value.

 * @param val alpha value (0.0 - 1.0)

 * @param fill True if alpha should be set for non-stroking operations,False if for stroking operations

 */

public void setAlpha(float val,boolean fill){

  if (fill) {

    values.put(GSTATE_ALPHA_NONSTROKE,val);

  }

 else {

    values.put(GSTATE_ALPHA_STROKE,val);

  }

}

Location: PDFGState.java

Content: 

/** 

 * {@inheritDoc}

 */

public String toPDFString(){

  StringBuffer sb=new StringBuffer(64);

  sb.append("<<\n/Type /ExtGState\n");

  appendVal(sb,GSTATE_ALPHA_NONSTROKE);

  appendVal(sb,GSTATE_ALPHA_STROKE);

  sb.append(">>");

  return sb.toString();

}

