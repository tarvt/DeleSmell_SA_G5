Location: AbstractGraphicsCoord.java

Content: 

/** 

 * Constructor

 * @param coords the x/y coordinates for this object

 */

public AbstractGraphicsCoord(int[] coords){

  if (coords == null) {

    relative=true;

  }

 else {

    this.coords=coords;

  }

}

Location: AbstractGraphicsCoord.java

Content: 

/** 

 * Constructor

 * @param coords the x/y coordinates for this object

 * @param relative true if relative drawing order

 */

public AbstractGraphicsCoord(int[] coords,boolean relative){

  this(coords);

  this.relative=relative;

}

Location: AbstractGraphicsCoord.java

Content: 

/** 

 * Constructor

 * @param x the x coordinate for this object

 * @param y the y coordinate for this object

 */

public AbstractGraphicsCoord(int x,int y){

  this(new int[]{x,y});

}

Location: AbstractGraphicsCoord.java

Content: 

/** 

 * Constructor

 * @param x1 the x1 coordinate for this object

 * @param y1 the y1 coordinate for this object

 * @param x2 the x2 coordinate for this object

 * @param y2 the y2 coordinate for this object

 */

public AbstractGraphicsCoord(int x1,int y1,int x2,int y2){

  this(new int[]{x1,y1,x2,y2});

}

Location: AbstractGraphicsCoord.java

Content: 

/** 

 * Adds the coordinates to the structured field data

 * @param data the structured field data

 * @param fromIndex the start index

 */

protected void addCoords(byte[] data,int fromIndex){

  for (int i=0; i < coords.length; i++, fromIndex+=2) {

    byte[] coord=BinaryUtils.convert(coords[i],2);

    data[fromIndex]=coord[0];

    data[fromIndex + 1]=coord[1];

  }

}

Location: AbstractGraphicsCoord.java

Content: 

/** 

 * Returns the coordinate data start index

 * @return the coordinate data start index

 */

int getCoordinateDataStartIndex(){

  return 2;

}

Location: AbstractGraphicsCoord.java

Content: 

/** 

 * Returns true if this is a relative drawing order

 * @return true if this is a relative drawing order

 */

protected boolean isRelative(){

  return this.relative;

}

