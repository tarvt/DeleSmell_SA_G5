Location: LayoutMasterSet.java

Content: 

/** 

 * Add a page sequence master. The name is checked to throw an error if already added.

 * @param masterName name for the master

 * @param pSM PageSequenceMaster instance

 * @throws ValidationException if there's a problem with name uniqueness

 */

protected void addPageSequenceMaster(String masterName,PageSequenceMaster pSM) throws ValidationException {

  if (existsName(masterName)) {

    getFOValidationEventProducer().masterNameNotUnique(this,getName(),masterName,pSM.getLocator());

  }

  this.pageSequenceMasters.put(masterName,pSM);

}

Location: LayoutMasterSet.java

Content: 

/** 

 * Add a simple page master. The name is checked to throw an error if already added.

 * @param sPM simple-page-master to add

 * @throws ValidationException if there's a problem with name uniqueness

 */

protected void addSimplePageMaster(SimplePageMaster sPM) throws ValidationException {

  String masterName=sPM.getMasterName();

  if (existsName(masterName)) {

    getFOValidationEventProducer().masterNameNotUnique(this,getName(),masterName,sPM.getLocator());

  }

  this.simplePageMasters.put(masterName,sPM);

}

Location: LayoutMasterSet.java

Content: 

/** 

 * Section 7.25.7: check to see that if a region-name is a duplicate, that it maps to the same fo region-class.

 * @throws ValidationException if there's a name duplication

 */

private void checkRegionNames() throws ValidationException {

  Map<String,String> allRegions=new java.util.HashMap<String,String>();

  for (  SimplePageMaster simplePageMaster : simplePageMasters.values()) {

    Map<String,Region> spmRegions=simplePageMaster.getRegions();

    for (    Region region : spmRegions.values()) {

      if (allRegions.containsKey(region.getRegionName())) {

        String defaultRegionName=allRegions.get(region.getRegionName());

        if (!defaultRegionName.equals(region.getDefaultRegionName())) {

          getFOValidationEventProducer().regionNameMappedToMultipleRegionClasses(this,region.getRegionName(),defaultRegionName,region.getDefaultRegionName(),getLocator());

        }

      }

      allRegions.put(region.getRegionName(),region.getDefaultRegionName());

    }

  }

}

Location: LayoutMasterSet.java

Content: 

private boolean existsName(String masterName){

  return (simplePageMasters.containsKey(masterName) || pageSequenceMasters.containsKey(masterName));

}

Location: LayoutMasterSet.java

Content: 

/** 

 * Returns the default name of the region to which the flow or static-content having the given flow-name is assigned.

 * @param flowName the value of the flow-name property

 * @return the default region name ("xsl-region-body", "xsl-region-before", etc.)

 */

public String getDefaultRegionNameFor(String flowName){

  for (  SimplePageMaster spm : simplePageMasters.values()) {

    for (    Region region : spm.getRegions().values()) {

      if (region.getRegionName().equals(flowName)) {

        return region.getDefaultRegionName();

      }

    }

  }

  assert flowName.equals("xsl-before-float-separator") || flowName.equals("xsl-footnote-separator");

  return flowName;

}

Location: LayoutMasterSet.java

Content: 

/** 

 * Get a page sequence master by name. This is used by the page sequence to get a page master for creating pages.

 * @param masterName name of the master

 * @return the requested PageSequenceMaster instance

 */

public PageSequenceMaster getPageSequenceMaster(String masterName){

  return this.pageSequenceMasters.get(masterName);

}

Location: LayoutMasterSet.java

Content: 

/** 

 * Get a simple page master by name. This is used by the page sequence to get a page master for creating pages.

 * @param masterName the name of the page master

 * @return the requested simple-page-master

 */

public SimplePageMaster getSimplePageMaster(String masterName){

  return simplePageMasters.get(masterName);

}

Location: LayoutMasterSet.java

Content: 

/** 

 * Create a LayoutMasterSet instance that is a child of the given parent  {@link FONode}.

 * @param parent {@link FONode} that is the parent of this object

 */

public LayoutMasterSet(FONode parent){

  super(parent);

}

Location: LayoutMasterSet.java

Content: 

/** 

 * Checks whether or not a region name exists in this master set.

 * @param regionName name of the region

 * @return true when the region name specified has a region in this LayoutMasterSet

 */

public boolean regionNameExists(String regionName){

  for (  SimplePageMaster spm : simplePageMasters.values()) {

    if (spm.regionNameExists(regionName)) {

      return true;

    }

  }

  return false;

}

Location: LayoutMasterSet.java

Content: 

private void resolveSubSequenceReferences() throws ValidationException {

  for (  PageSequenceMaster psm : pageSequenceMasters.values()) {

    for (    SubSequenceSpecifier subSequenceSpecifier : psm.getSubSequenceSpecifier()) {

      subSequenceSpecifier.resolveReferences(this);

    }

  }

}

