Location: BatchDiffer.java

Content: 

private BitmapProducer[] getProducers(Configuration cfg,File srcDir){

  Configuration[] children=cfg.getChildren("producer");

  BitmapProducer[] producers=new BitmapProducer[children.length];

  for (int i=0; i < children.length; i++) {

    try {

      Class<?> clazz=Class.forName(children[i].getAttribute("classname"));

      Object producer=clazz.getDeclaredConstructor(URI.class).newInstance(srcDir.toURI());

      producers[i]=(BitmapProducer)producer;

      ContainerUtil.configure(producers[i],children[i]);

    }

 catch (    Exception e) {

      log.error("Error setting up producers",e);

      throw new RuntimeException("Error while setting up producers");

    }

  }

  return producers;

}

Location: BatchDiffer.java

Content: 

/** 

 * Main method.

 * @param args command-line arguments

 */

public static void main(String[] args){

  try {

    if (args.length == 0) {

      System.err.println("Configuration file is missing!");

      printUsage();

      System.exit(-1);

    }

    File cfgFile=new File(args[0]);

    if (!cfgFile.exists()) {

      System.err.println("Configuration file cannot be found: " + args[0]);

      printUsage();

      System.exit(-1);

    }

    Thread.currentThread().setPriority(Thread.MIN_PRIORITY);

    BatchDiffer differ=new BatchDiffer();

    differ.runBatch(cfgFile);

    System.out.println("Regular exit...");

  }

 catch (  Exception e) {

    System.out.println("Exception caught...");

    e.printStackTrace();

  }

}

Location: BatchDiffer.java

Content: 

/** 

 * Prints the usage of this app to stdout.

 */

public static void printUsage(){

  System.out.println("Usage:");

  System.out.println("java " + BatchDiffer.class.getName() + " <cfgfile>");

  System.out.println();

  System.out.println("<cfgfile>: Path to an XML file with the configuration" + " for the batch run.");

}

Location: BatchDiffer.java

Content: 

/** 

 * Runs the batch

 * @param cfg Configuration for the batch

 * @throws TransformerConfigurationException

 */

public void runBatch(Configuration cfg){

  try {

    ProducerContext context=new ProducerContext();

    context.setTargetResolution(cfg.getChild("resolution").getValueAsInteger(72));

    String xslt=cfg.getChild("stylesheet").getValue(null);

    if (xslt != null) {

      try {

        context.setTemplates(context.getTransformerFactory().newTemplates(new StreamSource(xslt)));

      }

 catch (      TransformerConfigurationException e) {

        log.error("Error setting up stylesheet",e);

        throw new RuntimeException("Error setting up stylesheet");

      }

    }

    File srcDir=new File(cfg.getChild("source-directory").getValue());

    if (!srcDir.exists()) {

      throw new RuntimeException("source-directory does not exist: " + srcDir);

    }

    BitmapProducer[] producers=getProducers(cfg.getChild("producers"),srcDir);

    final File targetDir=new File(cfg.getChild("target-directory").getValue());

    if (!targetDir.mkdirs() && !targetDir.exists()) {

      throw new RuntimeException("target-directory is invalid: " + targetDir);

    }

    context.setTargetDir(targetDir);

    boolean stopOnException=cfg.getChild("stop-on-exception").getValueAsBoolean(true);

    final boolean createDiffs=cfg.getChild("create-diffs").getValueAsBoolean(true);

    IOFileFilter filter=new SuffixFileFilter(new String[]{".xml",".fo"});

    if (cfg.getChild("filter-disabled").getValueAsBoolean(true)) {

      String disabled=System.getProperty("fop.layoutengine.disabled");

      filter=LayoutEngineTestUtils.decorateWithDisabledList(filter,disabled);

    }

    String manualFilter=cfg.getChild("manual-filter").getValue(null);

    if (manualFilter != null) {

      if (manualFilter.indexOf('*') < 0) {

        manualFilter=manualFilter + '*';

      }

      filter=new AndFileFilter(new WildcardFileFilter(manualFilter),filter);

    }

    int maxfiles=cfg.getChild("max-files").getValueAsInteger(-1);

    Collection<File> files=FileUtils.listFiles(srcDir,filter,null);

    for (    final File f : files) {

      try {

        log.info("---=== " + f + " ===---");

        long[] times=new long[producers.length];

        final BufferedImage[] bitmaps=new BufferedImage[producers.length];

        for (int j=0; j < producers.length; j++) {

          times[j]=System.currentTimeMillis();

          bitmaps[j]=producers[j].produce(f,j,context);

          times[j]=System.currentTimeMillis() - times[j];

        }

        if (log.isDebugEnabled()) {

          StringBuffer sb=new StringBuffer("Bitmap production times: ");

          for (int j=0; j < producers.length; j++) {

            if (j > 0) {

              sb.append(", ");

            }

            sb.append(times[j]).append("ms");

          }

          log.debug(sb.toString());

        }

        if (bitmaps[0] == null) {

          throw new RuntimeException("First producer didn't return a bitmap for " + f + ". Cannot continue.");

        }

        Runnable runnable=new Runnable(){

          public void run(){

            try {

              saveBitmaps(targetDir,f,createDiffs,bitmaps);

            }

 catch (            IOException e) {

              log.error("IO error while saving bitmaps: " + e.getMessage());

            }

          }

        }

;

        new Thread(runnable).start();

      }

 catch (      RuntimeException e) {

        log.error("Catching RE on file " + f + ": "+ e.getMessage());

        if (stopOnException) {

          log.error("rethrowing...");

          throw e;

        }

      }

      maxfiles=(maxfiles < 0 ? maxfiles : maxfiles - 1);

      if (maxfiles == 0) {

        break;

      }

    }

  }

 catch (  ConfigurationException e) {

    log.error("Error while configuring BatchDiffer",e);

    throw new RuntimeException("Error while configuring BatchDiffer: " + e.getMessage());

  }

}

Location: BatchDiffer.java

Content: 

/** 

 * Runs the batch.

 * @param cfgFile configuration file to use

 * @throws ConfigurationException In case of a problem with the configuration

 * @throws SAXException In case of a problem during SAX processing

 * @throws IOException In case of a I/O problem

 */

public void runBatch(File cfgFile) throws ConfigurationException, SAXException, IOException {

  DefaultConfigurationBuilder cfgBuilder=new DefaultConfigurationBuilder();

  Configuration cfg=cfgBuilder.buildFromFile(cfgFile);

  runBatch(cfg);

}

Location: BatchDiffer.java

Content: 

private void saveBitmaps(File targetDir,File srcFile,boolean createDiffs,BufferedImage[] bitmaps) throws IOException {

  BufferedImage combined=BitmapComparator.buildCompareImage(bitmaps);

  File outputFile=new File(targetDir,srcFile.getName() + "._combined.png");

  ImageWriterUtil.saveAsPNG(combined,outputFile);

  if (createDiffs) {

    for (int k=1; k < bitmaps.length; k++) {

      BufferedImage diff=BitmapComparator.buildDiffImage(bitmaps[0],bitmaps[k]);

      outputFile=new File(targetDir,srcFile.getName() + "._diff" + k+ ".png");

      ImageWriterUtil.saveAsPNG(diff,outputFile);

    }

  }

}

