Location: FontSubstitutionsConfigurator.java

Content: 

/** 

 * Configures a font substitution catalog

 * @param substitutions font substitutions

 * @throws FOPException if something's wrong with the config data

 */

public void configure(FontSubstitutions substitutions) throws FOPException {

  Configuration[] substitutionCfgs=cfg.getChildren("substitution");

  for (  Configuration substitutionCfg : substitutionCfgs) {

    Configuration fromCfg=substitutionCfg.getChild("from",false);

    if (fromCfg == null) {

      throw new FOPException("'substitution' element without child 'from' element");

    }

    Configuration toCfg=substitutionCfg.getChild("to",false);

    if (fromCfg == null) {

      throw new FOPException("'substitution' element without child 'to' element");

    }

    FontQualifier fromQualifier=getQualfierFromConfiguration(fromCfg);

    FontQualifier toQualifier=getQualfierFromConfiguration(toCfg);

    FontSubstitution substitution=new FontSubstitution(fromQualifier,toQualifier);

    substitutions.add(substitution);

  }

}

Location: FontSubstitutionsConfigurator.java

Content: 

/** 

 * Main constructor

 * @param cfg a configuration

 */

public FontSubstitutionsConfigurator(Configuration cfg){

  this.cfg=cfg;

}

Location: FontSubstitutionsConfigurator.java

Content: 

private static FontQualifier getQualfierFromConfiguration(Configuration cfg) throws FOPException {

  String fontFamily=cfg.getAttribute("font-family",null);

  if (fontFamily == null) {

    throw new FOPException("substitution qualifier must have a font-family");

  }

  FontQualifier qualifier=new FontQualifier();

  qualifier.setFontFamily(fontFamily);

  String fontWeight=cfg.getAttribute("font-weight",null);

  if (fontWeight != null) {

    qualifier.setFontWeight(fontWeight);

  }

  String fontStyle=cfg.getAttribute("font-style",null);

  if (fontStyle != null) {

    qualifier.setFontStyle(fontStyle);

  }

  return qualifier;

}

