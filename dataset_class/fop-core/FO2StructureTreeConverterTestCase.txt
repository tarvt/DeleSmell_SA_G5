Location: FO2StructureTreeConverterTestCase.java

Content: 

private DOMResult buildActualStructureTree() throws Exception {

  DOMResult actualStructureTree=new DOMResult();

  createStructureTreeFromDocument(foLoader.getFoInputStream(),actualStructureTree);

  return actualStructureTree;

}

Location: FO2StructureTreeConverterTestCase.java

Content: 

private void compare(final String fo,String tree) throws Exception {

  foLoader=new FOLoader(""){

    public InputStream getFoInputStream(){

      return new ByteArrayInputStream(fo.getBytes());

    }

  }

;

  DOMResult actualStructureTree=buildActualStructureTree();

  Document doc=(Document)actualStructureTree.getNode();

  StringWriter sw=new StringWriter();

  TransformerFactory tf=TransformerFactory.newInstance();

  Transformer transformer=tf.newTransformer();

  transformer.transform(new DOMSource(doc),new StreamResult(sw));

  assertEquals(tree.replace("\n",""),sw.toString().replace("\n",""));

}

Location: FO2StructureTreeConverterTestCase.java

Content: 

private static Diff createDiff(DOMResult expected,DOMResult actual){

  Diff diff=new Diff(getDocument(expected),getDocument(actual));

  return diff;

}

Location: FO2StructureTreeConverterTestCase.java

Content: 

private static FODocumentParser createDocumentParser(final StructureTreeEventHandler structureTreeEventHandler){

  return FODocumentParser.newInstance(new FOEventHandlerFactory(){

    public FOEventHandler newFOEventHandler(    FOUserAgent foUserAgent){

      return new FO2StructureTreeConverter(structureTreeEventHandler,new DummyFOEventHandler(foUserAgent));

    }

  }

);

}

Location: FO2StructureTreeConverterTestCase.java

Content: 

private FOUserAgent createFOUserAgent(FODocumentParser documentParser){

  FOUserAgent userAgent=documentParser.createFOUserAgent();

  userAgent.setAccessibility(true);

  userAgent.setKeepEmptyTags(keepEmptyTags);

  return userAgent;

}

Location: FO2StructureTreeConverterTestCase.java

Content: 

private void createStructureTreeFromDocument(InputStream foInputStream,Result result) throws Exception {

  TransformerHandler tHandler=createTransformerHandler(result);

  startStructureTreeSequence(tHandler);

  StructureTreeEventHandler structureTreeEventHandler=StructureTree2SAXEventAdapter.newInstance(tHandler);

  FODocumentParser documentParser=createDocumentParser(structureTreeEventHandler);

  FOUserAgent userAgent=createFOUserAgent(documentParser);

  parseDocument(foInputStream,documentParser,userAgent);

  endStructureTreeSequence(tHandler);

}

Location: FO2StructureTreeConverterTestCase.java

Content: 

private static TransformerHandler createTransformerHandler(Result domResult) throws TransformerConfigurationException, TransformerFactoryConfigurationError {

  SAXTransformerFactory factory=(SAXTransformerFactory)SAXTransformerFactory.newInstance();

  TransformerHandler transformerHandler=factory.newTransformerHandler();

  transformerHandler.setResult(domResult);

  return transformerHandler;

}

Location: FO2StructureTreeConverterTestCase.java

Content: 

private static void endStructureTreeSequence(TransformerHandler tHandler) throws SAXException {

  tHandler.endElement("",STRUCTURE_TREE_SEQUENCE_NAME,STRUCTURE_TREE_SEQUENCE_NAME);

  tHandler.endDocument();

}

Location: FO2StructureTreeConverterTestCase.java

Content: 

private static Document getDocument(DOMResult result){

  return (Document)result.getNode();

}

Location: FO2StructureTreeConverterTestCase.java

Content: 

private static InputStream getResource(String name){

  return FO2StructureTreeConverterTestCase.class.getResourceAsStream(name);

}

Location: FO2StructureTreeConverterTestCase.java

Content: 

@Test public void headerTableCellMustPropagateScope() throws Exception {

  testConverter("table-header_scope.fo");

}

Location: FO2StructureTreeConverterTestCase.java

Content: 

private DOMResult loadExpectedStructureTree(){

  DOMResult expectedStructureTree=new DOMResult();

  InputStream xslt=getResource("fo2StructureTree.xsl");

  runXSLT(xslt,foLoader.getFoInputStream(),expectedStructureTree);

  return expectedStructureTree;

}

Location: FO2StructureTreeConverterTestCase.java

Content: 

private static void parseDocument(InputStream foInputStream,FODocumentParser documentParser,FOUserAgent userAgent) throws FOPException, LoadingException {

  try {

    documentParser.parse(foInputStream,userAgent);

  }

  finally {

    closeStream(foInputStream);

  }

}

Location: FO2StructureTreeConverterTestCase.java

Content: 

private static void runXSLT(InputStream xslt,InputStream doc,Result result){

  Source fo=new StreamSource(doc);

  try {

    Transformer transformer=TransformerFactory.newInstance().newTransformer(new StreamSource(xslt));

    transformer.transform(fo,result);

  }

 catch (  TransformerConfigurationException e) {

    throw new RuntimeException(e);

  }

catch (  TransformerException e) {

    throw new RuntimeException(e);

  }

 finally {

    closeStream(xslt);

    closeStream(doc);

  }

}

Location: FO2StructureTreeConverterTestCase.java

Content: 

private static void startStructureTreeSequence(TransformerHandler tHandler) throws SAXException {

  tHandler.startDocument();

  tHandler.startElement("",STRUCTURE_TREE_SEQUENCE_NAME,STRUCTURE_TREE_SEQUENCE_NAME,new AttributesImpl());

}

Location: FO2StructureTreeConverterTestCase.java

Content: 

@Test public void testAbbreviationProperty() throws Exception {

  testConverter("abb.fo");

}

Location: FO2StructureTreeConverterTestCase.java

Content: 

@Test public void testArtifact() throws Exception {

  testConverter("artifact.fo");

}

Location: FO2StructureTreeConverterTestCase.java

Content: 

@Test public void testCompleteDocument() throws Exception {

  testConverter("/org/apache/fop/fo/complete_document.fo");

}

Location: FO2StructureTreeConverterTestCase.java

Content: 

private void testConverter(String foResourceName) throws Exception {

  foLoader=new FOLoader(foResourceName);

  DOMResult expectedStructureTree=loadExpectedStructureTree();

  DOMResult actualStructureTree=buildActualStructureTree();

  final Diff diff=createDiff(expectedStructureTree,actualStructureTree);

  assertTrue(diff.toString(),diff.identical());

}

Location: FO2StructureTreeConverterTestCase.java

Content: 

@Test public void testLanguage() throws Exception {

  testConverter("language.fo");

}

Location: FO2StructureTreeConverterTestCase.java

Content: 

@Test public void testPDFA() throws Exception {

  FOUserAgent userAgent=FopFactory.newInstance(new File(".").toURI()).newFOUserAgent();

  userAgent.getRendererOptions().put("pdf-a-mode","PDF/A-1b");

  userAgent.setAccessibility(true);

  PDFDocumentHandler d=new PDFDocumentHandler(new IFContext(userAgent));

  OutputStream writer=new ByteArrayOutputStream();

  StreamResult result=new StreamResult(writer);

  d.setResult(result);

  d.getStructureTreeEventHandler();

  d.startDocument();

  assertNull(d.getStructureTreeEventHandler().startNode("table-body",null,null));

}

Location: FO2StructureTreeConverterTestCase.java

Content: 

@Test public void testRemoveBlocks() throws Exception {

  keepEmptyTags=false;

  compare("<fo:root xmlns:fo=\"http://www.w3.org/1999/XSL/Format\">\n" + "  <fo:layout-master-set>\n" + "    <fo:simple-page-master master-name=\"simple\">\n"+ "      <fo:region-body />\n"+ "    </fo:simple-page-master>\n"+ "  </fo:layout-master-set>\n"+ "  <fo:page-sequence master-reference=\"simple\">\n"+ "    <fo:flow flow-name=\"xsl-region-body\">\n"+ "    <fo:block/>"+ "    <fo:block><fo:block/></fo:block>\n"+ "    <fo:block>a</fo:block>\n"+ "    <fo:block><fo:leader/></fo:block>\n"+ "    <fo:block>a<fo:leader/></fo:block>\n"+ "    </fo:flow>\n"+ "  </fo:page-sequence>\n"+ "</fo:root>\n","<?xml version=\"1.0\" encoding=\"UTF-8\"?>" + "<structure-tree-sequence>\n" + "<structure-tree xmlns=\"http://xmlgraphics.apache.org/fop/intermediate\" "+ "xmlns:foi=\"http://xmlgraphics.apache.org/fop/internal\" "+ "xmlns:fox=\"http://xmlgraphics.apache.org/fop/extensions\">\n"+ "<fo:flow xmlns:fo=\"http://www.w3.org/1999/XSL/Format\" flow-name=\"xsl-region-body\">\n"+ "<fo:block>\n"+ "<marked-content/>\n"+ "</fo:block>\n"+ "<fo:block>\n"+ "<marked-content/>\n"+ "</fo:block>\n"+ "</fo:flow>\n"+ "</structure-tree>\n"+ "</structure-tree-sequence>\n");

}

Location: FO2StructureTreeConverterTestCase.java

Content: 

@Test public void testSideRegions() throws Exception {

  testConverter("/org/apache/fop/fo/pagination/side-regions.fo");

}

Location: FO2StructureTreeConverterTestCase.java

Content: 

@Test public void testTableFooters() throws Exception {

  testConverter("table-footers.fo");

}

