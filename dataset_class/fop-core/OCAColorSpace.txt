Location: OCAColorSpace.java

Content: 

public float[] fromCIEXYZ(float[] colorvalue){

  throw new UnsupportedOperationException("Color conversion from CIE XYZ to OCA is not possible");

}

Location: OCAColorSpace.java

Content: 

public float[] fromRGB(float[] rgbvalue){

  throw new UnsupportedOperationException("Color conversion from RGB to OCA is not possible");

}

Location: OCAColorSpace.java

Content: 

protected OCAColorSpace(){

  super(ColorSpace.TYPE_RGB,1);

}

Location: OCAColorSpace.java

Content: 

public float[] toCIEXYZ(float[] colorvalue){

  float[] rgb=toRGB(colorvalue);

  ColorSpace sRGB=ColorSpace.getInstance(ColorSpace.CS_sRGB);

  return sRGB.toCIEXYZ(rgb);

}

Location: OCAColorSpace.java

Content: 

public float[] toRGB(float[] colorvalue){

  int oca=(int)colorvalue[0];

  if (oca == OCAColorValue.BLACK.value) {

    return new float[]{0,0,0};

  }

 else   if (oca == OCAColorValue.BLUE.value) {

    return new float[]{0,0,1.0f};

  }

 else   if (oca == OCAColorValue.BROWN.value) {

    return new float[]{0.565f,0.188f,0};

  }

 else   if (oca == OCAColorValue.CYAN.value) {

    return new float[]{0,1.0f,1.0f};

  }

 else   if (oca == OCAColorValue.GREEN.value) {

    return new float[]{0,1.0f,0};

  }

 else   if (oca == OCAColorValue.MAGENTA.value) {

    return new float[]{1.0f,0,1.0f};

  }

 else   if (oca == OCAColorValue.RED.value) {

    return new float[]{1.0f,0,0};

  }

 else   if (oca == OCAColorValue.YELLOW.value) {

    return new float[]{1.0f,1.0f,0};

  }

  return null;

}

