Location: PDFArray.java

Content: 

/** 

 * Adds a new value to the array.

 * @param value the value

 */

public void add(double value){

  this.values.add(value);

}

Location: PDFArray.java

Content: 

/** 

 * Adds a new value to the array.

 * @param obj the value

 */

public void add(Object obj){

  if (obj instanceof PDFObject) {

    PDFObject pdfObj=(PDFObject)obj;

    if (!pdfObj.hasObjectNumber()) {

      pdfObj.setParent(this);

    }

  }

  this.values.add(obj);

}

Location: PDFArray.java

Content: 

/** 

 * Indicates whether the given object exists in the array.

 * @param obj the object to look for

 * @return true if obj is contained

 */

public boolean contains(Object obj){

  return this.values.contains(obj);

}

Location: PDFArray.java

Content: 

/** 

 * Create a new, empty array object with no parent.

 */

public PDFArray(){

  this((PDFObject)null);

}

Location: PDFArray.java

Content: 

/** 

 * Creates an array object made of the given elements.

 * @param elements the array content

 */

public PDFArray(List<?> elements){

  this(null,elements);

}

Location: PDFArray.java

Content: 

/** 

 * Creates an array object made of the given elements.

 * @param elements the array content

 */

public PDFArray(Object... elements){

  this(null,elements);

}

Location: PDFArray.java

Content: 

/** 

 * Create a new, empty array object

 * @param parent the array's parent if any

 */

public PDFArray(PDFObject parent){

  super(parent);

}

Location: PDFArray.java

Content: 

/** 

 * Create an array object.

 * @param parent the array's parent if any

 * @param values the actual array wrapped by this object

 */

public PDFArray(PDFObject parent,double[] values){

  super(parent);

  for (  double value : values) {

    this.values.add(value);

  }

}

Location: PDFArray.java

Content: 

/** 

 * Create an array object.

 * @param parent the array's parent if any

 * @param values the actual array wrapped by this object

 */

public PDFArray(PDFObject parent,int[] values){

  super(parent);

  for (  int value : values) {

    this.values.add(value);

  }

}

Location: PDFArray.java

Content: 

/** 

 * Create an array object.

 * @param parent the array's parent if any

 * @param values the actual values wrapped by this object

 */

public PDFArray(PDFObject parent,List<?> values){

  super(parent);

  this.values.addAll(values);

}

Location: PDFArray.java

Content: 

/** 

 * Create the array object

 * @param parent the array's parent if any

 * @param values the actual array wrapped by this object

 */

public PDFArray(PDFObject parent,Object[] values){

  super(parent);

  Collections.addAll(this.values,values);

}

Location: PDFArray.java

Content: 

/** 

 * Sets an entry at a given location.

 * @param index the index of the value to set

 * @param value the new value

 */

public void set(int index,double value){

  this.values.set(index,value);

}

Location: PDFArray.java

Content: 

/** 

 * Sets an entry at a given location.

 * @param index the index of the value to set

 * @param obj the new value

 */

public void set(int index,Object obj){

  this.values.set(index,obj);

}

