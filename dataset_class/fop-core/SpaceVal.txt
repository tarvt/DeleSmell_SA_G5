Location: SpaceVal.java

Content: 

private static MinOptMax createSpaceProperty(SpaceProperty spaceprop,PercentBaseContext context){

  int min=spaceprop.getMinimum(context).getLength().getValue(context);

  int opt=spaceprop.getOptimum(context).getLength().getValue(context);

  int max=spaceprop.getMaximum(context).getLength().getValue(context);

  if (min > max && max == 0) {

    max=opt > min ? opt : min;

  }

  if (min > opt && opt == 0) {

    opt=(min + max) / 2;

  }

  if (opt > max && max == 0) {

    max=opt;

  }

  return MinOptMax.getInstance(min,opt,max);

}

Location: SpaceVal.java

Content: 

/** 

 * Returns the Precedence value.

 * @return the Precedence value

 */

public int getPrecedence(){

  return precedence;

}

Location: SpaceVal.java

Content: 

/** 

 * Returns the Space value.

 * @return the Space value

 */

public MinOptMax getSpace(){

  return space;

}

Location: SpaceVal.java

Content: 

/** 

 * Returns the Conditionality value.

 * @return the Conditionality value

 */

public boolean isConditional(){

  return conditional;

}

Location: SpaceVal.java

Content: 

/** 

 * Returns the Forcing value.

 * @return the Forcing value

 */

public boolean isForcing(){

  return forcing;

}

Location: SpaceVal.java

Content: 

/** 

 * @param letterSpacing property

 * @return space value

 */

public static SpaceVal makeLetterSpacing(Property letterSpacing){

  if (letterSpacing.getEnum() == Constants.EN_NORMAL) {

    return new SpaceVal(MinOptMax.ZERO,true,true,0);

  }

 else {

    return new SpaceVal(letterSpacing.getSpace(),null);

  }

}

Location: SpaceVal.java

Content: 

/** 

 * @param wordSpacing property

 * @param letterSpacing space value

 * @param fs font

 * @return space value

 */

public static SpaceVal makeWordSpacing(Property wordSpacing,SpaceVal letterSpacing,Font fs){

  if (wordSpacing.getEnum() == Constants.EN_NORMAL) {

    int spaceCharIPD=fs.getCharWidth(' ');

    MinOptMax space=MinOptMax.getInstance(-spaceCharIPD / 3,0,spaceCharIPD / 2);

    return new SpaceVal(space.plus(letterSpacing.getSpace().mult(2)),true,true,0);

  }

 else {

    return new SpaceVal(wordSpacing.getSpace(),null);

  }

}

Location: SpaceVal.java

Content: 

/** 

 * Constructor for SpaceVal objects based on the full set of properties.

 * @param space space to use

 * @param conditional Conditionality value

 * @param forcing Forcing value

 * @param precedence Precedence value

 */

public SpaceVal(MinOptMax space,boolean conditional,boolean forcing,int precedence){

  this.space=space;

  this.conditional=conditional;

  this.forcing=forcing;

  this.precedence=precedence;

}

Location: SpaceVal.java

Content: 

/** 

 * Constructor for SpaceVal objects based on Space objects.

 * @param spaceprop Space object to use

 * @param context Percentage evaluation context

 */

public SpaceVal(SpaceProperty spaceprop,PercentBaseContext context){

  space=createSpaceProperty(spaceprop,context);

  conditional=(spaceprop.getConditionality().getEnum() == Constants.EN_DISCARD);

  Property precProp=spaceprop.getPrecedence();

  if (precProp.getNumber() != null) {

    precedence=precProp.getNumber().intValue();

    forcing=false;

  }

 else {

    forcing=(precProp.getEnum() == Constants.EN_FORCE);

    precedence=0;

  }

}

