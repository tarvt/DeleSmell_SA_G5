Location: PresentationTextObject.java

Content: 

/** 

 * Creates a chain of control sequences using a producer.

 * @param producer the producer

 * @throws UnsupportedEncodingException thrown if character encoding is not supported

 */

public boolean createControlSequences(PtocaProducer producer) throws UnsupportedEncodingException {

  if (currentPresentationTextData == null) {

    hongshuai();

    if (presentationTextDataList == null) {

      presentationTextDataList=new java.util.ArrayList<PresentationTextData>();

    }

    if (presentationTextDataList.size() == 0) {

      currentPresentationTextData=new PresentationTextData(true);

    }

 else {

      currentPresentationTextData=new PresentationTextData();

    }

    presentationTextDataList.add(currentPresentationTextData);

  }

  try {

    if (getBytesAvailable() != null && getBytesAvailable() < getSize(producer)) {

      return false;

    }

    producer.produce(builder);

  }

 catch (  UnsupportedEncodingException e) {

    endPresentationTextData();

    throw e;

  }

catch (  IOException ioe) {

    endPresentationTextData();

    handleUnexpectedIOError(ioe);

  }

  return true;

}

Location: PresentationTextObject.java

Content: 

/** 

 * Drawing of lines using the starting and ending coordinates, thickness and orientation arguments.

 * @param lineDataInfo the line data information.

 */

public boolean createLineData(AFPLineDataInfo lineDataInfo){

  try {

    return createControlSequences(new LineDataInfoProducer(lineDataInfo));

  }

 catch (  UnsupportedEncodingException e) {

    handleUnexpectedIOError(e);

  }

  return false;

}

Location: PresentationTextObject.java

Content: 

/** 

 * Create the presentation text data for the byte array of data.

 * @param textDataInfo The afp text data

 * @throws UnsupportedEncodingException thrown if character encoding is not supported

 */

public void createTextData(AFPTextDataInfo textDataInfo) throws UnsupportedEncodingException {

  createControlSequences(new TextDataInfoProducer(textDataInfo));

}

Location: PresentationTextObject.java

Content: 

/** 

 * A control sequence is a sequence of bytes that specifies a control function. A control sequence consists of a control sequence introducer and zero or more parameters. The control sequence can extend multiple presentation text data objects, but must eventually be terminated. This method terminates the control sequence.

 */

public void endControlSequence(){

  if (currentPresentationTextData == null) {

    hongshuai();

    if (presentationTextDataList == null) {

      presentationTextDataList=new java.util.ArrayList<PresentationTextData>();

    }

    if (presentationTextDataList.size() == 0) {

      currentPresentationTextData=new PresentationTextData(true);

    }

 else {

      currentPresentationTextData=new PresentationTextData();

    }

    presentationTextDataList.add(currentPresentationTextData);

  }

  try {

    builder.endChainedControlSequence();

  }

 catch (  IOException ioe) {

    endPresentationTextData();

    handleUnexpectedIOError(ioe);

  }

}

Location: PresentationTextObject.java

Content: 

/** 

 * Helper method to mark the end of the presentation text data

 */

private void endPresentationTextData(){

  this.currentPresentationTextData=null;

}

Location: PresentationTextObject.java

Content: 

public Integer getBytesAvailable(){

  return builder.getBytesAvailable();

}

Location: PresentationTextObject.java

Content: 

private int getSize(PtocaProducer producer) throws IOException {

  final ByteArrayOutputStream bos=new ByteArrayOutputStream();

  PtocaBuilder pb=new PtocaBuilder(){

    protected OutputStream getOutputStreamForControlSequence(    int length){

      return bos;

    }

  }

;

  producer.produce(pb);

  return bos.size();

}

Location: PresentationTextObject.java

Content: 

private void handleUnexpectedIOError(IOException ioe){

  throw new RuntimeException("Unexpected I/O error: " + ioe.getMessage(),ioe);

}

Location: PresentationTextObject.java

Content: 

/** 

 * Construct a new PresentationTextObject for the specified name argument, the name should be an 8 character identifier.

 * @param name the name of this presentation object

 */

public PresentationTextObject(String name){

  super(name);

}

