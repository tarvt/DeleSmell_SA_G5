Location: PDFRendererOptionsConfigTestCase.java

Content: 

private static void assertConfigEquals(Map<PDFRendererOption,Object> expectedOptions,PDFEncryptionParams expectedEncryptionParams,PDFRendererOptionsConfig actual){

  assertEquals((Boolean)expectedOptions.get(DISABLE_SRGB_COLORSPACE),actual.getDisableSRGBColorSpace());

  assertEquals((Map)expectedOptions.get(FILTER_LIST),actual.getFilterMap());

  assertEquals((URI)expectedOptions.get(OUTPUT_PROFILE),actual.getOutputProfileURI());

  assertEquals((PDFAMode)expectedOptions.get(PDF_A_MODE),actual.getPDFAMode());

  assertEquals((PDFXMode)expectedOptions.get(PDF_X_MODE),actual.getPDFXMode());

  assertEquals((Version)expectedOptions.get(VERSION),actual.getPDFVersion());

  assertEncryptionParamsEquals(expectedEncryptionParams,actual.getEncryptionParameters());

}

Location: PDFRendererOptionsConfigTestCase.java

Content: 

private static void assertEncryptionParamsEquals(PDFEncryptionParams expected,PDFEncryptionParams actual){

  assertEquals(expected == null,actual == null);

  if (actual != null) {

    assertEquals(expected.getEncryptionLengthInBits(),actual.getEncryptionLengthInBits());

    assertEquals(expected.getOwnerPassword(),actual.getOwnerPassword());

    assertEquals(expected.getUserPassword(),actual.getUserPassword());

    assertEquals(expected.isAllowAccessContent(),actual.isAllowAccessContent());

    assertEquals(expected.isAllowAssembleDocument(),actual.isAllowAssembleDocument());

    assertEquals(expected.isAllowCopyContent(),actual.isAllowCopyContent());

    assertEquals(expected.isAllowEditAnnotations(),actual.isAllowEditAnnotations());

    assertEquals(expected.isAllowEditContent(),actual.isAllowEditContent());

    assertEquals(expected.isAllowFillInForms(),actual.isAllowFillInForms());

    assertEquals(expected.isAllowPrint(),actual.isAllowPrint());

    assertEquals(expected.isAllowPrintHq(),actual.isAllowPrintHq());

  }

}

Location: PDFRendererOptionsConfigTestCase.java

Content: 

private Map<PDFRendererOption,Object> createNonDefaultOptions() throws URISyntaxException {

  final EnumMap<PDFRendererOption,Object> options=new EnumMap<PDFRendererOption,Object>(PDFRendererOption.class);

  options.put(DISABLE_SRGB_COLORSPACE,Boolean.TRUE);

  options.put(FILTER_LIST,new HashMap<String,List<String>>());

  options.put(OUTPUT_PROFILE,new URI("xxx"));

  options.put(PDF_A_MODE,PDFAMode.PDFA_1A);

  options.put(PDF_X_MODE,PDFXMode.PDFX_3_2003);

  options.put(VERSION,Version.V1_0);

  return Collections.unmodifiableMap(options);

}

Location: PDFRendererOptionsConfigTestCase.java

Content: 

@Test public void testConstructor() throws URISyntaxException {

  final Map<PDFRendererOption,Object> options=createNonDefaultOptions();

  final PDFEncryptionParams encryptionParams=new PDFEncryptionParams();

  assertConfigEquals(options,encryptionParams,new PDFRendererOptionsConfig(options,encryptionParams));

}

Location: PDFRendererOptionsConfigTestCase.java

Content: 

@Test public void testDefaults(){

  assertConfigEquals(DEFAULT_OPTIONS,DEFAULT_ENCRYPTION_PARAMS,PDFRendererOptionsConfig.DEFAULT);

}

Location: PDFRendererOptionsConfigTestCase.java

Content: 

@Test public void testMerge() throws URISyntaxException {

  final PDFRendererOptionsConfig defaults=PDFRendererOptionsConfig.DEFAULT;

  final PDFEncryptionParams encryptionParams=new PDFEncryptionParams();

  final Map<PDFRendererOption,Object> options=createNonDefaultOptions();

  final PDFRendererOptionsConfig otherConfig=new PDFRendererOptionsConfig(options,encryptionParams);

  assertConfigEquals(options,encryptionParams,defaults.merge(otherConfig));

  assertEquals(defaults,defaults.merge(null));

}

