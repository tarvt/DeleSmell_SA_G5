Location: GlyfTableTestCase.java

Content: 

private void assertArrayEquals(int[] expected,int[] actual){

  assertTrue(Arrays.equals(expected,actual));

}

Location: GlyfTableTestCase.java

Content: 

private DirData getTableData(String tableName) throws IOException {

  subsetReader.seekSet(0);

  subsetReader.skip(12);

  String name;

  do {

    name=subsetReader.readTTFString(4);

    subsetReader.skip(4 * 3);

  }

 while (!name.equals(tableName));

  subsetReader.skip(-8);

  return new DirData(subsetReader.readTTFLong(),subsetReader.readTTFLong());

}

Location: GlyfTableTestCase.java

Content: 

private void readLoca() throws IOException {

  DirData loca=getTableData(OFTableName.LOCA.getName());

  int numberOfGlyphs=(int)(loca.length - 4) / 4;

  glyphOffsets=new long[numberOfGlyphs];

  subsetReader.seekSet(loca.offset);

  for (int i=0; i < numberOfGlyphs; i++) {

    glyphOffsets[i]=subsetReader.readTTFULong();

  }

}

Location: GlyfTableTestCase.java

Content: 

private int[] retrieveIndicesOfComposedGlyphs() throws IOException {

  DirData glyf=getTableData(OFTableName.GLYF.getName());

  int[] composedGlyphIndices=new int[glyphOffsets.length];

  for (int i=0; i < glyphOffsets.length; i++) {

    long glyphOffset=glyphOffsets[i];

    if (i != glyphOffsets.length - 1 && glyphOffset == glyphOffsets[i + 1]) {

      continue;

    }

    subsetReader.seekSet(glyf.offset + glyphOffset);

    short numberOfContours=subsetReader.readTTFShort();

    if (numberOfContours < 0) {

      subsetReader.skip(8);

      subsetReader.readTTFUShort();

      int glyphIndex=subsetReader.readTTFUShort();

      composedGlyphIndices[i]=glyphIndex;

    }

  }

  return composedGlyphIndices;

}

Location: GlyfTableTestCase.java

Content: 

private void setupSubsetReader(Map<Integer,Integer> glyphs) throws IOException {

  TTFSubSetFile fontFile=new TTFSubSetFile();

  String header=OFFontLoader.readHeader(subsetReader);

  fontFile.readFont(originalFontReader,"Deja",header,glyphs);

  byte[] subsetFont=fontFile.getFontSubset();

  InputStream intputStream=new ByteArrayInputStream(subsetFont);

  subsetReader=new FontFileReader(intputStream);

}

Location: GlyfTableTestCase.java

Content: 

private int[] setupTest(int... glyphIndices) throws IOException {

  Map<Integer,Integer> glyphs=new HashMap<Integer,Integer>();

  int index=0;

  glyphs.put(0,index++);

  for (  int glyphIndex : glyphIndices) {

    glyphs.put(glyphIndex,index++);

  }

  setupSubsetReader(glyphs);

  readLoca();

  return retrieveIndicesOfComposedGlyphs();

}

Location: GlyfTableTestCase.java

Content: 

/** 

 * Tests that glyphs aren't remapped twice if the glyph before a composite glyph has 0-length.

 * @throws IOException if an I/O error occurs

 */

@Test public void testGlyphsNotRemappedTwice() throws IOException {

  int composedGlyph=12;

  int[] composedIndices=setupTest(1,2,3,16,2014,4,7,8,13,2015,composedGlyph);

  int[] expected=new int[composedIndices.length];

  expected[10]=composedGlyph;

  assertArrayEquals(expected,composedIndices);

}

Location: GlyfTableTestCase.java

Content: 

/** 

 * Tests that composed glyphs are included in the glyph subset if a composite glyph is used.

 * @throws IOException if an I/O error occurs

 */

@Test public void testPopulateGlyphsWithComposites() throws IOException {

  int[] composedIndices=setupTest(408);

  int[] expected=new int[composedIndices.length];

  expected[1]=6;

  expected[5]=2;

  expected[6]=4;

  assertArrayEquals(expected,composedIndices);

}

Location: GlyfTableTestCase.java

Content: 

/** 

 * Tests that no glyphs are added if there are no composite glyphs the subset.

 * @throws IOException if an I/O error occurs

 */

@Test public void testPopulateNoCompositeGlyphs() throws IOException {

  int[] composedIndices=setupTest(36,37,38);

  int[] expected=new int[composedIndices.length];

  assertArrayEquals(expected,composedIndices);

}

Location: GlyfTableTestCase.java

Content: 

/** 

 * Tests that the correct glyph is included in the subset, when a composite glyph composed of a composite glyph is used.

 * @throws IOException if an I/O error occurs

 */

@Test public void testSingleRecursionStep() throws IOException {

  int[] composedIndices=setupTest(2077);

  int[] expected=new int[composedIndices.length];

  expected[1]=2;

  assertArrayEquals(expected,composedIndices);

}

