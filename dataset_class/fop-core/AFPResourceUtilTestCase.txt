Location: AFPResourceUtilTestCase.java

Content: 

private void compareResources(ResourceCopier copyResource,String resourceA,String resourceB) throws IOException {

  ByteArrayOutputStream baos=copyResource(resourceA,copyResource);

  byte[] expectedBytes=resourceAsByteArray(resourceB);

  assertTrue(Arrays.equals(expectedBytes,baos.toByteArray()));

}

Location: AFPResourceUtilTestCase.java

Content: 

private ByteArrayOutputStream copyResource(String resource,ResourceCopier resourceCopier) throws IOException {

  final ByteArrayOutputStream baos=new ByteArrayOutputStream();

  InputStream in=null;

  try {

    in=getClass().getResourceAsStream(resource);

    resourceCopier.copy(in,baos);

  }

  finally {

    in.close();

  }

  return baos;

}

Location: AFPResourceUtilTestCase.java

Content: 

private byte[] resourceAsByteArray(String resource) throws IOException {

  InputStream in=null;

  byte[] expectedBytes=null;

  try {

    in=getClass().getResourceAsStream(resource);

    expectedBytes=IOUtils.toByteArray(in);

  }

  finally {

    in.close();

  }

  return expectedBytes;

}

Location: AFPResourceUtilTestCase.java

Content: 

/** 

 * Tests copyNamedResource()

 * @throws Exception -

 */

@Test public void testCopyNamedResource() throws Exception {

  compareResources(new ResourceCopier(){

    public void copy(    InputStream in,    OutputStream out) throws IOException {

      AFPResourceUtil.copyNamedResource(PSEG_A,in,out);

    }

  }

,RESOURCE_FILENAME,NAMED_RESOURCE_FILENAME);

}

Location: AFPResourceUtilTestCase.java

Content: 

/** 

 * Tests copyResourceFile()

 * @throws Exception -

 */

@Test public void testCopyResourceFile() throws Exception {

  compareResources(new ResourceCopier(){

    public void copy(    InputStream in,    OutputStream out) throws IOException {

      AFPResourceUtil.copyResourceFile(in,out);

    }

  }

,RESOURCE_FILENAME,RESOURCE_FILENAME);

}

Location: AFPResourceUtilTestCase.java

Content: 

/** 

 * Tests the validity of a closing structured field having an FF FF name which allows it to match any existing matching starting field

 * @throws Exception -

 */

@Test public void testResourceAnyName() throws Exception {

  testResource(RESOURCE_ANY_NAME,PSEG_B);

}

Location: AFPResourceUtilTestCase.java

Content: 

/** 

 * Tests a matching end structured field name

 * @throws Exception -

 */

@Test public void testResourceNameMatch() throws Exception {

  testResource(RESOURCE_NAME_MATCH,PSEG_B);

}

Location: AFPResourceUtilTestCase.java

Content: 

/** 

 * Tests to see whether a matching structured field pair with mismatching names fails.

 * @throws Exception -

 */

@Test(expected=Exception.class) public void testResourceNameMismatch() throws Exception {

  testResource(RESOURCE_NAME_MISMATCH,PSEG_B);

}

Location: AFPResourceUtilTestCase.java

Content: 

/** 

 * Tests a matching structured end field with no name

 * @throws Exception -

 */

@Test public void testResourceNoEndName() throws Exception {

  testResource(RESOURCE_NO_END_NAME,PSEG_B);

}

Location: AFPResourceUtilTestCase.java

Content: 

private void testResource(String resource,final String pseg) throws Exception {

  copyResource(resource,new ResourceCopier(){

    public void copy(    InputStream in,    OutputStream out) throws IOException {

      AFPResourceUtil.copyNamedResource(pseg,in,out);

    }

  }

);

}

