Location: RtfSpaceManager.java

Content: 

/** 

 * Peeks at inline-level attribute stack.

 * @return RtfAttributes from top of inline-level stack

 */

public RtfAttributes getLastInlineAttribute(){

  return (RtfAttributes)inlineAttributes.getLast();

}

Location: RtfSpaceManager.java

Content: 

/** 

 * Removes RtfSpaceSplitter from top of block-level stack.

 */

public void popRtfSpaceSplitter(){

  if (!blockAttributes.isEmpty()) {

    RtfSpaceSplitter splitter;

    splitter=(RtfSpaceSplitter)blockAttributes.removeLast();

    accumulatedSpace+=splitter.flush();

  }

}

Location: RtfSpaceManager.java

Content: 

/** 

 * Builds RtfSpaceSplitter on <code>attrs</code> and adds it to the block-level stack.

 * @param attrs  RtfAttribute to add

 * @return instance of RtfSpaceSplitter

 */

public RtfSpaceSplitter pushRtfSpaceSplitter(RtfAttributes attrs){

  RtfSpaceSplitter splitter;

  splitter=new RtfSpaceSplitter(attrs,accumulatedSpace);

  accumulatedSpace=0;

  blockAttributes.addLast(splitter);

  return splitter;

}

Location: RtfSpaceManager.java

Content: 

/** 

 * Construct a newly allocated <code>RtfSpaceManager</code> object.

 */

public RtfSpaceManager(){

}

Location: RtfSpaceManager.java

Content: 

/** 

 * Set attributes as candidate for space attributes inheritance.

 * @param attrs  attributes to set

 */

public void setCandidate(RtfAttributes attrs){

  for (  Object blockAttribute : blockAttributes) {

    RtfSpaceSplitter splitter=(RtfSpaceSplitter)blockAttribute;

    splitter.setSpaceBeforeCandidate(attrs);

    splitter.setSpaceAfterCandidate(attrs);

  }

}

