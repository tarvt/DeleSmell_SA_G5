Location: RtfText.java

Content: 

/** 

 * @return the attributes of our text 

 */

public RtfAttributes getTextAttributes(){

  return attr;

}

Location: RtfText.java

Content: 

/** 

 * IRtfTextContainer requirement:

 * @return a copy of our attributes

 * @throws FOPException if attributes cannot be cloned

 */

public RtfAttributes getTextContainerAttributes() throws FOPException {

  if (attrib == null) {

    return null;

  }

  try {

    return (RtfAttributes)this.attrib.clone();

  }

 catch (  CloneNotSupportedException e) {

    throw new FOPException(e);

  }

}

Location: RtfText.java

Content: 

/** 

 * @param isStart set to true if processing the start of the text (??)

 * @return true if text is bold

 */

public boolean isBold(boolean isStart){

  if (isStart) {

    return (text.trim().length() == 1 && text.charAt(0) == CHAR_BOLD_START);

  }

 else {

    return (text.trim().length() == 1 && text.charAt(0) == CHAR_BOLD_END);

  }

}

Location: RtfText.java

Content: 

/** 

 * True if text contains a single non-breaking space (#160). TODO make this more general and/or merge with isEmpty? -- what happen with empty paragraphs, if they will be removed, than NO, else ok

 * @return true    If m_text is character 160\nfalse   m_text is not a nbsp

 */

public boolean isNbsp(){

  if (!isEmpty()) {

    if (text.trim().length() == 1 && text.charAt(0) == CHAR_NBSP) {

      return true;

    }

  }

  return false;

}

Location: RtfText.java

Content: 

/** 

 * @return true if text is a newline character

 */

public boolean isNewLine(){

  return (text.trim().length() == 1 && text.charAt(0) == CHAR_NEW_LINE);

}

Location: RtfText.java

Content: 

/** 

 * @return true if the text is a tab character

 */

public boolean isTab(){

  return (text.trim().length() == 1 && text.charAt(0) == CHAR_TAB);

}

Location: RtfText.java

Content: 

/** 

 * true if our text attributes must be written 

 */

private boolean mustWriteAttributes(){

  return !isEmpty() && !isNbsp();

}

Location: RtfText.java

Content: 

/** 

 * Create an RtfText in given IRtfTextContainer.

 * @param str optional initial text content

 */

RtfText(IRtfTextContainer parent,Writer w,String str,RtfAttributes attr) throws IOException {

  super((RtfContainer)parent,w);

  this.text=str;

  this.attr=attr;

}

