Location: AbstractGenericSVGHandler.java

Content: 

/** 

 * Builds the GVT root.

 * @param userAgent the user agent

 * @param ctx the batik bridge context

 * @param doc the document

 * @return a built GVT root tree

 */

protected GraphicsNode buildGraphicsNode(FOUserAgent userAgent,BridgeContext ctx,Document doc){

  GVTBuilder builder=new GVTBuilder();

  final GraphicsNode root;

  try {

    root=builder.build(ctx,doc);

  }

 catch (  Exception e) {

    EventBroadcaster eventBroadcaster=userAgent.getEventBroadcaster();

    SVGEventProducer eventProducer=SVGEventProducer.Provider.get(eventBroadcaster);

    final String uri=getDocumentURI(doc);

    eventProducer.svgNotBuilt(this,e,uri);

    return null;

  }

  return root;

}

Location: AbstractGenericSVGHandler.java

Content: 

/** 

 * Creates a graphics 2D image painter implementation

 * @param root the batik graphics node root

 * @param ctx the batik bridge context

 * @param imageSize the image size

 * @return a new graphics 2D image painter implementation

 */

protected Graphics2DImagePainter createGraphics2DImagePainter(GraphicsNode root,BridgeContext ctx,Dimension imageSize){

  return new Graphics2DImagePainterImpl(root,ctx,imageSize);

}

Location: AbstractGenericSVGHandler.java

Content: 

/** 

 * Gets the document URI from a Document instance if possible.

 * @param doc the Document

 * @return the URI or null

 */

protected String getDocumentURI(Document doc){

  String docURI=null;

  if (doc instanceof AbstractDocument) {

    AbstractDocument level3Doc=(AbstractDocument)doc;

    docURI=level3Doc.getDocumentURI();

  }

  return docURI;

}

Location: AbstractGenericSVGHandler.java

Content: 

/** 

 * Returns the image size

 * @param wrappedContext renderer context wrapper

 * @return the image size

 */

protected Dimension getImageSize(RendererContextWrapper wrappedContext){

  final int width=wrappedContext.getWidth();

  final int height=wrappedContext.getHeight();

  return new Dimension(width,height);

}

