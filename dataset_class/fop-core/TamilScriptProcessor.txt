Location: TamilScriptProcessor.java

Content: 

private static boolean containsConsonant(GlyphSequence gs,int k){

  CharAssociation a=gs.getAssociation(k);

  int[] ca=gs.getCharacterArray(false);

  for (int i=a.getStart(), e=a.getEnd(); i < e; i++) {

    if (isC(ca[i])) {

      return true;

    }

  }

  return false;

}

Location: TamilScriptProcessor.java

Content: 

private static boolean containsHalfConsonant(GlyphSequence gs,int k){

  Boolean half=(Boolean)gs.getAssociation(k).getPredication("half");

  return (half != null) ? half : false;

}

Location: TamilScriptProcessor.java

Content: 

private static boolean containsMatra(GlyphSequence gs,int k){

  CharAssociation a=gs.getAssociation(k);

  int[] ca=gs.getCharacterArray(false);

  for (int i=a.getStart(), e=a.getEnd(); i < e; i++) {

    if (isM(ca[i])) {

      return true;

    }

  }

  return false;

}

Location: TamilScriptProcessor.java

Content: 

private static boolean containsOtherMark(GlyphSequence gs,int k){

  CharAssociation a=gs.getAssociation(k);

  int[] ca=gs.getCharacterArray(false);

  for (int i=a.getStart(), e=a.getEnd(); i < e; i++) {

switch (typeOf(ca[i])) {

case C_T:

case C_A:

case C_O:

      return true;

default :

    break;

}

}

return false;

}

Location: TamilScriptProcessor.java

Content: 

private static boolean containsPreBaseMatra(GlyphSequence gs,int k){

  CharAssociation a=gs.getAssociation(k);

  int[] ca=gs.getCharacterArray(false);

  for (int i=a.getStart(), e=a.getEnd(); i < e; i++) {

    if (isPreM(ca[i])) {

      return true;

    }

  }

  return false;

}

Location: TamilScriptProcessor.java

Content: 

private static boolean containsReph(GlyphSequence gs,int k){

  Boolean rphf=(Boolean)gs.getAssociation(k).getPredication("rphf");

  return (rphf != null) ? rphf : false;

}

Location: TamilScriptProcessor.java

Content: 

@Override protected int findPreBaseMatraTarget(GlyphSequence gs,int source){

  int ng=gs.getGlyphCount();

  int lk=-1;

  for (int i=(source < ng) ? source : ng; i > 0; i--) {

    int k=i - 1;

    if (containsConsonant(gs,k)) {

      if (containsHalfConsonant(gs,k)) {

        lk=k;

      }

 else       if (lk == -1) {

        lk=k;

      }

 else {

        break;

      }

    }

  }

  return lk;

}

Location: TamilScriptProcessor.java

Content: 

@Override protected int findPreBaseMatra(GlyphSequence gs){

  int ng=gs.getGlyphCount();

  int lk=-1;

  for (int i=ng; i > 0; i--) {

    int k=i - 1;

    if (containsPreBaseMatra(gs,k)) {

      lk=k;

      break;

    }

  }

  return lk;

}

Location: TamilScriptProcessor.java

Content: 

@Override protected int findRephTarget(GlyphSequence gs,int source){

  int ng=gs.getGlyphCount();

  int c1=-1;

  int c2=-1;

  for (int i=0; i < ng; i++) {

    if ((i != source) && containsConsonant(gs,i)) {

      if (!containsHalfConsonant(gs,i)) {

        c1=i + 1;

        break;

      }

    }

  }

  for (int i=(c1 >= 0) ? c1 : 0; i < ng; i++) {

    if (containsMatra(gs,i) && !containsPreBaseMatra(gs,i)) {

      c2=i + 1;

    }

 else     if (containsOtherMark(gs,i)) {

      c2=i;

      break;

    }

  }

  if (c2 >= 0) {

    return c2;

  }

 else   if (c1 >= 0) {

    return c1;

  }

 else {

    return source;

  }

}

Location: TamilScriptProcessor.java

Content: 

@Override protected int findReph(GlyphSequence gs){

  int ng=gs.getGlyphCount();

  int li=-1;

  for (int i=0; i < ng; i++) {

    if (containsReph(gs,i)) {

      li=i;

      break;

    }

  }

  return li;

}

Location: TamilScriptProcessor.java

Content: 

@Override protected Class<? extends TamilSyllabizer> getSyllabizerClass(){

  return TamilSyllabizer.class;

}

Location: TamilScriptProcessor.java

Content: 

static boolean hasFlag(int c,int f){

  if ((c >= CCA_START) && (c < CCA_END)) {

    return (CCA[c - CCA_START] & f) == f;

  }

 else {

    return false;

  }

}

Location: TamilScriptProcessor.java

Content: 

static boolean hasN(int c){

  return hasFlag(c,C_N);

}

Location: TamilScriptProcessor.java

Content: 

static boolean hasR(int c){

  return hasFlag(c,C_R);

}

Location: TamilScriptProcessor.java

Content: 

static boolean isC(int c){

  return isType(c,C_C);

}

Location: TamilScriptProcessor.java

Content: 

static boolean isH(int c){

  return c == 0x094D;

}

Location: TamilScriptProcessor.java

Content: 

static boolean isM(int c){

  return isType(c,C_M);

}

Location: TamilScriptProcessor.java

Content: 

static boolean isN(int c){

  return c == 0x093C;

}

Location: TamilScriptProcessor.java

Content: 

static boolean isPreM(int c){

  return isType(c,C_M) && hasFlag(c,C_PRE);

}

Location: TamilScriptProcessor.java

Content: 

static boolean isR(int c){

  return isType(c,C_C) && hasR(c);

}

Location: TamilScriptProcessor.java

Content: 

static boolean isType(int c,int t){

  return typeOf(c) == t;

}

Location: TamilScriptProcessor.java

Content: 

static boolean isV(int c){

  return isType(c,C_V);

}

Location: TamilScriptProcessor.java

Content: 

static boolean isX(int c){

switch (typeOf(c)) {

case C_M:

case C_A:

case C_T:

case C_O:

    return true;

default :

  return false;

}

}

Location: TamilScriptProcessor.java

Content: 

TamilScriptProcessor(String script){

  super(script);

}

Location: TamilScriptProcessor.java

Content: 

static int typeOf(int c){

  if ((c >= CCA_START) && (c < CCA_END)) {

    return CCA[c - CCA_START] & C_M_TYPE;

  }

 else {

    return C_U;

  }

}

