Location: PDFStructElem.java

Content: 

public void addKidInSpecificOrder(int position,PDFStructElem kid){

  if (kids == null) {

    addKid(kid);

  }

 else {

    if ((kids.size() - 1) < position) {

      kids.add(kid);

    }

 else     if (kids.get(position) == null) {

      kids.set(position,kid);

    }

 else {

      if (!kids.contains(kid)) {

        kids.add(position,kid);

      }

    }

  }

}

Location: PDFStructElem.java

Content: 

private void attachAttributes(){

  if (attributes != null) {

    if (attributes.size() == 1) {

      put("A",attributes.get(0));

    }

 else {

      PDFArray array=new PDFArray(attributes);

      put("A",array);

    }

  }

}

Location: PDFStructElem.java

Content: 

/** 

 * Returns the parent of this structure element.

 * @return the parent, <code>null</code> if the parent is not a structureelement (i.e., is the structure tree root)

 */

public PDFStructElem getParentStructElem(){

  return parentElement;

}

Location: PDFStructElem.java

Content: 

/** 

 * Returns the structure type of this structure element.

 * @return the value of the S entry

 */

public StructureType getStructureType(){

  return structureType;

}

Location: PDFStructElem.java

Content: 

private boolean isBSLE(String type){

  String[] blseValues={"Table","L","P"};

  return Arrays.asList(blseValues).contains(type);

}

Location: PDFStructElem.java

Content: 

/** 

 * Creates PDFStructElem with no entries.

 */

public PDFStructElem(){

}

Location: PDFStructElem.java

Content: 

private PDFStructElem(PDFObject parent){

  if (parent instanceof PDFStructElem) {

    parentElement=(PDFStructElem)parent;

  }

}

Location: PDFStructElem.java

Content: 

/** 

 * Creates a new structure element.

 * @param parent parent of this element

 * @param structureType the structure type of this element

 */

public PDFStructElem(PDFObject parent,StructureType structureType){

  this(parent);

  this.structureType=structureType;

  put("S",structureType.getName());

  setParent(parent);

}

Location: PDFStructElem.java

Content: 

/** 

 * Sets the given mcid as the kid of this structure element. This element will then add itself to its parent structure element if it has not already, and so will the parent, and so on.

 * @param mcid mcid of the marked-content sequence corresponding to thisstructure element's kid

 */

public void setMCIDKid(int mcid){

  put("K",mcid);

}

Location: PDFStructElem.java

Content: 

/** 

 * Sets the page reference of this structure element.

 * @param page value for the Pg entry

 */

public void setPage(PDFPage page){

  put("Pg",page);

}

Location: PDFStructElem.java

Content: 

/** 

 * {@inheritDoc} 

 */

public void setParent(PDFObject parent){

  if (parent != null && parent.hasObjectNumber()) {

    put("P",new PDFReference(parent));

  }

}

Location: PDFStructElem.java

Content: 

public void setTableAttributeColSpan(int colSpan){

  setTableAttributeRowColumnSpan("ColSpan",colSpan);

}

Location: PDFStructElem.java

Content: 

private void setTableAttributeRowColumnSpan(String typeSpan,int span){

  PDFDictionary attribute=new PDFDictionary();

  attribute.put("O",Table.NAME);

  attribute.put(typeSpan,span);

  if (attributes == null) {

    attributes=new ArrayList<PDFDictionary>(2);

  }

  attributes.add(attribute);

}

Location: PDFStructElem.java

Content: 

public void setTableAttributeRowSpan(int rowSpan){

  setTableAttributeRowColumnSpan("RowSpan",rowSpan);

}

