Location: FontLoader.java

Content: 

/** 

 * Default constructor.

 * @param fontFileURI the URI to the PFB file of a Type 1 font

 * @param embedded indicates whether the font is embedded or referenced

 * @param useKerning indicates whether kerning information shall be loaded if available

 * @param useAdvanced indicates whether advanced typographic information shall be loaded ifavailable

 * @param resourceResolver the font resolver used to resolve URIs

 */

public FontLoader(URI fontFileURI,boolean embedded,boolean useKerning,boolean useAdvanced,InternalResourceResolver resourceResolver){

  this.fontFileURI=fontFileURI;

  this.embedded=embedded;

  this.useKerning=useKerning;

  this.useAdvanced=useAdvanced;

  this.resourceResolver=resourceResolver;

}

Location: FontLoader.java

Content: 

private static boolean isType1(FontUris fontUris){

  return fontUris.getEmbed().toASCIIString().toLowerCase().endsWith(".pfb") || fontUris.getAfm() != null || fontUris.getPfm() != null;

}

Location: FontLoader.java

Content: 

/** 

 * Loads a custom font from a URI. In the case of Type 1 fonts, the PFB file must be specified.

 * @param fontUris the URI to the font

 * @param subFontName the sub-fontname of a font (for TrueType Collections, null otherwise)

 * @param embedded indicates whether the font is embedded or referenced

 * @param embeddingMode the embedding mode of the font

 * @param encodingMode the requested encoding mode

 * @param useKerning indicates whether kerning information should be loaded if available

 * @param useAdvanced indicates whether advanced typographic information shall be loaded ifavailable

 * @param resourceResolver the font resolver to use when resolving URIs

 * @return the newly loaded font

 * @throws IOException In case of an I/O error

 */

public static CustomFont loadFont(FontUris fontUris,String subFontName,boolean embedded,EmbeddingMode embeddingMode,EncodingMode encodingMode,boolean useKerning,boolean useAdvanced,InternalResourceResolver resourceResolver,boolean simulateStyle,boolean embedAsType1) throws IOException {

  boolean type1=isType1(fontUris);

  FontLoader loader;

  if (type1) {

    if (encodingMode == EncodingMode.CID) {

      throw new IllegalArgumentException("CID encoding mode not supported for Type 1 fonts");

    }

    loader=new Type1FontLoader(fontUris,embedded,embeddingMode,useKerning,resourceResolver);

  }

 else {

    loader=new OFFontLoader(fontUris.getEmbed(),subFontName,embedded,embeddingMode,encodingMode,useKerning,useAdvanced,resourceResolver,simulateStyle,embedAsType1);

  }

  return loader.getFont();

}

