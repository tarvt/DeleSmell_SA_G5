Location: AbstractResourceGroupContainer.java

Content: 

/** 

 * Default constructor

 * @param factory the object factory

 */

public AbstractResourceGroupContainer(Factory factory){

  super(factory);

}

Location: AbstractResourceGroupContainer.java

Content: 

/** 

 * Named constructor

 * @param factory the object factory

 * @param name the name of this resource container

 */

public AbstractResourceGroupContainer(Factory factory,String name){

  super(factory,name);

}

Location: AbstractResourceGroupContainer.java

Content: 

/** 

 * Construct a new page object for the specified name argument, the page name should be an 8 character identifier.

 * @param factory the object factory

 * @param name the name of the page.

 * @param width the width of the page.

 * @param height the height of the page.

 * @param rotation the rotation of the page.

 * @param widthRes the width resolution of the page.

 * @param heightRes the height resolution of the page.

 */

public AbstractResourceGroupContainer(Factory factory,String name,int width,int height,int rotation,int widthRes,int heightRes){

  super(factory,name,width,height,rotation,widthRes,heightRes);

}

Location: AbstractResourceGroupContainer.java

Content: 

/** 

 * Returns true if this object can be written

 * @param obj an AFP object

 * @return true if this object can be written

 */

protected boolean canWrite(AbstractAFPObject obj){

  if (obj instanceof Completable) {

    return ((Completable)obj).isComplete();

  }

 else {

    return this.isComplete();

  }

}

Location: AbstractResourceGroupContainer.java

Content: 

/** 

 * Returns the resource group in this resource group container

 * @return the resource group in this resource group container

 */

public ResourceGroup getResourceGroup(){

  if (resourceGroup == null) {

    resourceGroup=factory.createResourceGroup();

  }

  return resourceGroup;

}

Location: AbstractResourceGroupContainer.java

Content: 

/** 

 * Returns true if this resource group container contains resources

 * @return true if this resource group container contains resources

 */

protected boolean hasResources(){

  return resourceGroup != null && resourceGroup.getResourceCount() > 0;

}

Location: AbstractResourceGroupContainer.java

Content: 

/** 

 * Writes a collection of  {@link AbstractAFPObject}s to the AFP Datastream.

 * @param objects a list of AFPObjects

 * @param os The stream to write to

 * @param forceWrite true if writing should happen in any case

 * @throws java.io.IOException an I/O exception of some sort has occurred.

 */

protected void writeObjects(Collection<AbstractAFPObject> objects,OutputStream os,boolean forceWrite) throws IOException {

  if (objects != null && objects.size() > 0) {

    Iterator it=objects.iterator();

    while (it.hasNext()) {

      AbstractAFPObject ao=(AbstractAFPObject)it.next();

      if (forceWrite || canWrite(ao)) {

        ao.writeToStream(os);

        it.remove();

      }

 else {

        break;

      }

    }

  }

}

