Location: FONode.java

Content: 

/** 

 * Adds characters. Does nothing by default. To be overridden in subclasses that allow <code>#PCDATA</code> content.

 * @param data array of characters containing text to be added

 * @param start starting array element to add

 * @param end ending array element to add

 * @param pList currently applicable PropertyList

 * @param locator location in the XSL-FO source file.

 * @throws FOPException if there's a problem during processing

 * @deprecated Please override {@link #characters(char[],int,int,PropertyList,Locator)}instead!

 */

protected void addCharacters(char[] data,int start,int end,PropertyList pList,Locator locator) throws FOPException {

}

Location: FONode.java

Content: 

/** 

 * This method is used when adding child nodes to a FO that already contains at least one child. In this case, the new child becomes a sibling to the previous one

 * @param precedingSibling  the previous child

 * @param followingSibling  the new child

 */

protected static void attachSiblings(FONode precedingSibling,FONode followingSibling){

  if (precedingSibling.siblings == null) {

    precedingSibling.siblings=new FONode[2];

  }

  if (followingSibling.siblings == null) {

    followingSibling.siblings=new FONode[2];

  }

  precedingSibling.siblings[1]=followingSibling;

  followingSibling.siblings[0]=precedingSibling;

}

Location: FONode.java

Content: 

/** 

 * Returns <code>true</code> if <code>fo:marker</code> is allowed as a child node. <br>To be overridden <i>only</i> in extension nodes that need it.

 * @return true if markers are valid children

 */

protected boolean canHaveMarkers(){

  int foId=getNameId();

switch (foId) {

case Constants.FO_BASIC_LINK:

case Constants.FO_BIDI_OVERRIDE:

case Constants.FO_BLOCK:

case Constants.FO_BLOCK_CONTAINER:

case Constants.FO_FLOW:

case Constants.FO_INLINE:

case Constants.FO_INLINE_CONTAINER:

case Constants.FO_LIST_BLOCK:

case Constants.FO_LIST_ITEM:

case Constants.FO_LIST_ITEM_BODY:

case Constants.FO_LIST_ITEM_LABEL:

case Constants.FO_TABLE:

case Constants.FO_TABLE_BODY:

case Constants.FO_TABLE_HEADER:

case Constants.FO_TABLE_FOOTER:

case Constants.FO_TABLE_CELL:

case Constants.FO_TABLE_AND_CAPTION:

case Constants.FO_TABLE_CAPTION:

case Constants.FO_WRAPPER:

    return true;

default :

  return false;

}

}

Location: FONode.java

Content: 

/** 

 * Collect the sequence of delimited text ranges, where each new range is pushed onto RANGES.

 * @param ranges a stack of delimited text ranges

 * @return the (possibly) updated stack of delimited text ranges

 */

public Stack<DelimitedTextRange> collectDelimitedTextRanges(Stack<DelimitedTextRange> ranges){

  if (isRangeBoundaryBefore()) {

    maybeNewRange(ranges);

  }

  DelimitedTextRange currentRange;

  if (ranges.size() > 0) {

    currentRange=ranges.peek();

  }

 else {

    currentRange=null;

  }

  ranges=collectDelimitedTextRanges(ranges,currentRange);

  if (isRangeBoundaryAfter()) {

    maybeNewRange(ranges);

  }

  return ranges;

}

Location: FONode.java

Content: 

/** 

 * Create a property list for this node. Return null if the node does not need a property list.

 * @param pList the closest parent propertylist.

 * @param foEventHandler The FOEventHandler where the PropertyListMakerinstance can be found.

 * @return A new property list.

 * @throws FOPException if there's a problem during processing

 */

protected PropertyList createPropertyList(PropertyList pList,FOEventHandler foEventHandler) throws FOPException {

  return null;

}

Location: FONode.java

Content: 

/** 

 * Decorates a log or warning message with context information on the given node.

 * @param text the original message

 * @param node the context node

 * @return the decorated text

 */

public static String decorateWithContextInfo(String text,FONode node){

  if (node != null) {

    StringBuffer sb=new StringBuffer(text);

    sb.append(" (").append(node.getContextInfo()).append(")");

    return sb.toString();

  }

 else {

    return text;

  }

}

Location: FONode.java

Content: 

/** 

 * Helper function to return "Error(line#/column#)" string for above exception messages

 * @param loc org.xml.sax.Locator object

 * @return String opening error text

 */

protected static String errorText(Locator loc){

  return "Error(" + getLocatorString(loc) + "): ";

}

Location: FONode.java

Content: 

/** 

 * Base constructor

 * @param parent parent of this node

 */

protected FONode(FONode parent){

  this.parent=parent;

}

Location: FONode.java

Content: 

/** 

 * Gathers context information for the getContextInfo() method.

 * @return the collected context information or null, if none is available

 */

protected String gatherContextInfo(){

  return null;

}

Location: FONode.java

Content: 

/** 

 * Return an iterator over all the child nodes of this node.

 * @return the iterator over the FO's childnodes

 */

public FONodeIterator getChildNodes(){

  return null;

}

Location: FONode.java

Content: 

/** 

 * Return an iterator over the object's child nodes starting at the passed node.

 * @param childNode First node in the iterator

 * @return the iterator, or <code>null</code> ifthe given node is not a child of this node.

 */

public FONodeIterator getChildNodes(FONode childNode){

  return null;

}

Location: FONode.java

Content: 

/** 

 * Returns a String containing as much context information as possible about a node. Call this method only in exceptional conditions because this method may perform quite extensive information gathering inside the FO tree.

 * @return a String containing context information

 */

public String getContextInfo(){

  StringBuffer sb=new StringBuffer();

  if (getLocalName() != null) {

    sb.append(getName());

    sb.append(", ");

  }

  if (this.locator != null) {

    sb.append("location: ");

    sb.append(getLocatorString(this.locator));

  }

 else {

    String s=gatherContextInfo();

    if (s != null) {

      sb.append("\"");

      sb.append(s);

      sb.append("\"");

    }

 else {

      sb.append("no context info available");

    }

  }

  if (sb.length() > 80) {

    sb.setLength(80);

  }

  return sb.toString();

}

Location: FONode.java

Content: 

/** 

 * Returns a String containing as some context information about a node. It does not take the locator into consideration and returns null if no useful context information can be found. Call this method only in exceptional conditions because this method may perform quite extensive information gathering inside the FO tree. All text returned by this method that is not extracted from document content needs to be locale-independent.

 * @return a String containing context information

 */

protected String getContextInfoAlt(){

  String s=gatherContextInfo();

  if (s != null) {

    StringBuffer sb=new StringBuffer();

    if (getLocalName() != null) {

      sb.append(getName());

      sb.append(", ");

    }

    sb.append("\"");

    sb.append(s);

    sb.append("\"");

    return sb.toString();

  }

 else {

    return null;

  }

}

Location: FONode.java

Content: 

/** 

 * Returns an instance of the FOValidationEventProducer.

 * @return an event producer for FO validation

 */

protected FOValidationEventProducer getFOValidationEventProducer(){

  return FOValidationEventProducer.Provider.get(getUserAgent().getEventBroadcaster());

}

Location: FONode.java

Content: 

/** 

 * Helper function to format a Locator instance.

 * @param loc org.xml.sax.Locator object

 * @return String the formatted text

 */

public static String getLocatorString(Locator loc){

  if (loc == null) {

    return "Unknown location";

  }

 else {

    return loc.getLineNumber() + ":" + loc.getColumnNumber();

  }

}

Location: FONode.java

Content: 

/** 

 * Returns the fully qualified name of the node

 * @param prefix the namespace prefix to build the name with (may be null)

 * @return the fully qualified name of this node

 */

public String getName(String prefix){

  if (prefix != null) {

    StringBuffer sb=new StringBuffer();

    sb.append(prefix).append(':').append(getLocalName());

    return sb.toString();

  }

 else {

    return getLocalName();

  }

}

Location: FONode.java

Content: 

/** 

 * Helper function to obtain standard usage prefix for FOP related namespace URIs.

 * @param namespaceURI URI of node found(e.g., "http://www.w3.org/1999/XSL/Format")

 * @return the prefix or null if none

 */

public static String getNodePrefix(String namespaceURI){

  if (namespaceURI.equals(FOElementMapping.URI)) {

    return "fo";

  }

 else   if (namespaceURI.equals(ExtensionElementMapping.URI)) {

    return "fox";

  }

 else   if (namespaceURI.equals(InternalElementMapping.URI)) {

    return "foi";

  }

 else   if (namespaceURI.equals(SVGElementMapping.URI)) {

    return "svg";

  }

 else {

    return null;

  }

}

Location: FONode.java

Content: 

/** 

 * Helper function to standardize the names of all namespace URI - local name pairs in text messages. For readability, using fo:, fox:, svg:, for those namespaces even though that prefix may not have been chosen in the document.

 * @param namespaceURI URI of node found(e.g., "http://www.w3.org/1999/XSL/Format")

 * @param localName local name of node, (e.g., "root" for "fo:root")

 * @return the prefix:localname, if fo/fox/svg, or a longer representationwith the unabbreviated URI otherwise.

 */

public static String getNodeString(String namespaceURI,String localName){

  String prefix=getNodePrefix(namespaceURI);

  if (prefix != null) {

    return prefix + ":" + localName;

  }

 else {

    return "(Namespace URI: \"" + namespaceURI + "\", "+ "Local Name: \""+ localName+ "\")";

  }

}

Location: FONode.java

Content: 

/** 

 * Helper function to return "invalid child" exceptions (e.g., <code>fo:block</code> appearing immediately under <code>fo:root</code>)

 * @param loc org.xml.sax.Locator object of the error (*not* parent node)

 * @param nsURI namespace URI of incoming invalid node

 * @param lName local name (i.e., no prefix) of incoming node

 * @throws ValidationException the validation error provoked by the method call

 */

protected void invalidChildError(Locator loc,String nsURI,String lName) throws ValidationException {

  invalidChildError(loc,getName(),nsURI,lName,null);

}

Location: FONode.java

Content: 

/** 

 * Helper function to return "invalid child" exceptions with more complex validation rules (i.e., needing more explanation of the problem)

 * @param loc org.xml.sax.Locator object of the error (*not* parent node)

 * @param parentName the name of the parent element

 * @param nsURI namespace URI of incoming offending node

 * @param lName local name (i.e., no prefix) of incoming offending node

 * @param ruleViolated name of the rule violated (used to lookup a resource in a bundle)

 * @throws ValidationException the validation error provoked by the method call

 */

protected void invalidChildError(Locator loc,String parentName,String nsURI,String lName,String ruleViolated) throws ValidationException {

  String prefix=getNodePrefix(nsURI);

  QName qn;

  if (prefix != null) {

    qn=new QName(nsURI,prefix,lName);

  }

 else {

    qn=new QName(nsURI,lName);

  }

  getFOValidationEventProducer().invalidChild(this,parentName,qn,ruleViolated,loc);

}

Location: FONode.java

Content: 

/** 

 * Helper function to throw an error caused by an invalid property

 * @param propertyName the name of the property.

 * @param propertyValue the value of the property.

 * @param e optional property parsing exception.

 * @throws ValidationException the validation error provoked by the method call

 */

protected void invalidPropertyValueError(String propertyName,String propertyValue,Exception e) throws ValidationException {

  getFOValidationEventProducer().invalidPropertyValue(this,getName(),propertyName,propertyValue,new PropertyException(e),locator);

}

Location: FONode.java

Content: 

/** 

 * Determine if this node is a new bidi RANGE block item.

 * @return true if this node is a new bidi RANGE block item

 */

public boolean isBidiRangeBlockItem(){

  return false;

}

Location: FONode.java

Content: 

/** 

 * Tests if the given element is a change bar element.

 * @param namespaceURI The name space of the element

 * @param localName The local name of the element

 * @return A boolean value true if the given element is a change bar element

 */

public boolean isChangeBarElement(String namespaceURI,String localName){

  return FO_URI.equals(namespaceURI) && (localName.equals("change-bar-begin") || localName.equals("change-bar-end"));

}

Location: FONode.java

Content: 

private boolean isRangeBoundaryAfter(){

  return isDelimitedTextRangeBoundary(Constants.EN_AFTER);

}

Location: FONode.java

Content: 

private boolean isRangeBoundaryBefore(){

  return isDelimitedTextRangeBoundary(Constants.EN_BEFORE);

}

Location: FONode.java

Content: 

/** 

 * Conditionally add a new delimited text range to RANGES. Always add new range unless there are no ranges on the stack yet and this node is not a block item.

 * @param ranges stack of delimited text ranges

 * @return new range (if constructed and pushed onto stack) or current range (if any) or null

 */

private DelimitedTextRange maybeNewRange(Stack<DelimitedTextRange> ranges){

  DelimitedTextRange rCur=!ranges.empty() ? ranges.peek() : null;

  DelimitedTextRange rNew;

  if ((rCur != null) || isBidiRangeBlockItem()) {

    rNew=new DelimitedTextRange(this);

  }

 else {

    rNew=null;

  }

  if (rNew != null) {

    ranges.push(rNew);

  }

 else {

    rNew=rCur;

  }

  return rNew;

}

Location: FONode.java

Content: 

/** 

 * Helper function to throw an error caused by missing mandatory child elements. (e.g., <code>fo:layout-master-set</code> not having any <code>fo:page-master</code> child element.

 * @param contentModel The XSL Content Model for the fo: object or a similar descriptionindicating the necessary child elements.

 * @throws ValidationException the validation error provoked by the method call

 */

protected void missingChildElementError(String contentModel) throws ValidationException {

  getFOValidationEventProducer().missingChildElement(this,getName(),contentModel,false,locator);

}

Location: FONode.java

Content: 

/** 

 * Helper function to throw an error caused by missing mandatory child elements. E.g., fo:layout-master-set not having any page-master child element.

 * @param contentModel The XSL Content Model for the fo: object or a similar descriptionindicating the necessary child elements.

 * @param canRecover indicates whether FOP can recover from this problem and continue working

 * @throws ValidationException the validation error provoked by the method call

 */

protected void missingChildElementError(String contentModel,boolean canRecover) throws ValidationException {

  getFOValidationEventProducer().missingChildElement(this,getName(),contentModel,canRecover,locator);

}

Location: FONode.java

Content: 

/** 

 * Helper function to throw an error caused by missing mandatory properties

 * @param propertyName the name of the missing property.

 * @throws ValidationException the validation error provoked by the method call

 */

protected void missingPropertyError(String propertyName) throws ValidationException {

  getFOValidationEventProducer().missingProperty(this,getName(),propertyName,locator);

}

Location: FONode.java

Content: 

/** 

 * Helper function to standardize "out of order" exceptions (e.g., <code>fo:layout-master-set</code> appearing after <code>fo:page-sequence</code>)

 * @param loc org.xml.sax.Locator object of the error (*not* parent node)

 * @param tooLateNode string name of node that should be earlier in document

 * @param tooEarlyNode string name of node that should be later in document

 * @throws ValidationException the validation error provoked by the method call

 */

protected void nodesOutOfOrderError(Locator loc,String tooLateNode,String tooEarlyNode) throws ValidationException {

  nodesOutOfOrderError(loc,tooLateNode,tooEarlyNode,false);

}

Location: FONode.java

Content: 

/** 

 * Helper function to standardize "out of order" exceptions (e.g., fo:layout-master-set appearing after fo:page-sequence)

 * @param loc org.xml.sax.Locator object of the error (*not* parent node)

 * @param tooLateNode string name of node that should be earlier in document

 * @param tooEarlyNode string name of node that should be later in document

 * @param canRecover indicates whether FOP can recover from this problem and continue working

 * @throws ValidationException the validation error provoked by the method call

 */

protected void nodesOutOfOrderError(Locator loc,String tooLateNode,String tooEarlyNode,boolean canRecover) throws ValidationException {

  getFOValidationEventProducer().nodeOutOfOrder(this,getName(),tooLateNode,tooEarlyNode,canRecover,loc);

}

Location: FONode.java

Content: 

/** 

 * Helper function to return "not supported child" exceptions. Note that the child is valid, just not supported yet by FOP.

 * @param loc org.xml.sax.Locator object of the error (*not* parent node)

 * @param nsURI namespace URI of incoming invalid node

 * @param lName local name (i.e., no prefix) of incoming node

 * @throws ValidationException the validation error provoked by the method call

 */

protected void notSupportedChildError(Locator loc,String nsURI,String lName) throws ValidationException {

  getFOValidationEventProducer().notSupportedChild(this,getName(),new QName(nsURI,lName),loc);

}

Location: FONode.java

Content: 

/** 

 * Removes a child node. Used by the child nodes to remove themselves, for example table-body if it has no children.

 * @param child child node to be removed

 */

public void removeChild(FONode child){

}

Location: FONode.java

Content: 

/** 

 * Helper function to standardize "too many" error exceptions (e.g., two <code>fo:declarations</code> within <code>fo:root</code>)

 * @param loc org.xml.sax.Locator object of the error (*not* parent node)

 * @param offendingNode the qualified name of the offending node

 * @throws ValidationException the validation error provoked by the method call

 */

protected void tooManyNodesError(Locator loc,QName offendingNode) throws ValidationException {

  getFOValidationEventProducer().tooManyNodes(this,getName(),offendingNode,loc);

}

Location: FONode.java

Content: 

/** 

 * Helper function to standardize "too many" error exceptions (e.g., two fo:declarations within fo:root) This overloaded method helps make the caller code better self-documenting

 * @param loc org.xml.sax.Locator object of the error (*not* parent node)

 * @param offendingNode incoming node that would cause a duplication.

 * @throws ValidationException the validation error provoked by the method call

 */

protected void tooManyNodesError(Locator loc,String offendingNode) throws ValidationException {

  tooManyNodesError(loc,new QName(FO_URI,offendingNode));

}

Location: FONode.java

Content: 

/** 

 * Helper function to standardize "too many" error exceptions (e.g., two fo:declarations within fo:root)

 * @param loc org.xml.sax.Locator object of the error (*not* parent node)

 * @param nsURI namespace URI of incoming invalid node

 * @param lName local name (i.e., no prefix) of incoming node

 * @throws ValidationException the validation error provoked by the method call

 */

protected void tooManyNodesError(Locator loc,String nsURI,String lName) throws ValidationException {

  tooManyNodesError(loc,new QName(nsURI,lName));

}

Location: FONode.java

Content: 

/** 

 * Static version of  {@link FONode#validateChildNode(Locator,String,String)} thatcan be used by subclasses that need to validate children against a different node (for example: <code>fo:wrapper</code> needs to check if the incoming node is a valid child to its parent)

 * @param fo    the {@link FONode} to validate against

 * @param loc   location in the source file

 * @param namespaceURI  namespace of the incoming node

 * @param localName     name of the incoming node (without namespace prefix)

 * @throws ValidationException if the incoming node is not a valid child for the given FO

 */

protected static void validateChildNode(FONode fo,Locator loc,String namespaceURI,String localName) throws ValidationException {

  fo.validateChildNode(loc,namespaceURI,localName);

}

Location: FONode.java

Content: 

/** 

 * Helper function to return "Warning(line#/column#)" string for warning messages

 * @param loc org.xml.sax.Locator object

 * @return String opening warning text

 */

protected static String warningText(Locator loc){

  return "Warning(" + getLocatorString(loc) + "): ";

}

