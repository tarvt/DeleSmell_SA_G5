Location: DelegatingFOEventHandlerTestCase.java

Content: 

private void closeStream(InputStream stream){

  try {

    stream.close();

  }

 catch (  IOException e) {

    throw new RuntimeException(e);

  }

}

Location: DelegatingFOEventHandlerTestCase.java

Content: 

private Transformer createTransformer(InputStream xslt){

  TransformerFactory transformerFactory=TransformerFactory.newInstance();

  try {

    return transformerFactory.newTransformer(new StreamSource(xslt));

  }

 catch (  TransformerConfigurationException e) {

    throw new RuntimeException(e);

  }

}

Location: DelegatingFOEventHandlerTestCase.java

Content: 

private Result createTransformOutputHandler(){

  return new SAXResult(new DefaultHandler(){

    private final StringBuilder event=new StringBuilder();

    @Override public void startElement(    String uri,    String localName,    String qName,    Attributes attributes) throws SAXException {

      event.setLength(0);

    }

    @Override public void characters(    char[] ch,    int start,    int length) throws SAXException {

      event.append(ch,start,length);

    }

    @Override public void endElement(    String uri,    String localName,    String qName) throws SAXException {

      expectedEvents.add(event.toString());

    }

  }

);

}

Location: DelegatingFOEventHandlerTestCase.java

Content: 

private void loadDocument(){

  document=getClass().getResourceAsStream("complete_document.fo");

}

Location: DelegatingFOEventHandlerTestCase.java

Content: 

private void loadExpectedEvents() throws IOException {

  expectedEvents=new ArrayList<String>();

  InputStream xslt=getClass().getResourceAsStream("extract-events.xsl");

  try {

    runXSLT(xslt);

  }

  finally {

    closeStream(xslt);

    closeStream(document);

  }

}

Location: DelegatingFOEventHandlerTestCase.java

Content: 

/** 

 * Prints the given list to  {@code System.out}, each element on a new line. For debugging purpose.

 * @param list a list

 */

public void printList(List<?> list){

  for (  Object element : list) {

    System.out.println(element);

  }

}

Location: DelegatingFOEventHandlerTestCase.java

Content: 

private void runXSLT(InputStream xslt){

  Transformer transformer=createTransformer(xslt);

  Source fo=new StreamSource(document);

  Result result=createTransformOutputHandler();

  try {

    transformer.transform(fo,result);

  }

 catch (  TransformerException e) {

    throw new RuntimeException(e);

  }

}

Location: DelegatingFOEventHandlerTestCase.java

Content: 

@Test public void testFOEventHandler() throws Exception {

  documentParser.parse(document);

  assertArrayEquals(expectedEvents.toArray(),actualEvents.toArray());

}

Location: DelegatingFOEventHandlerTestCase.java

Content: 

@After public void unloadDocument() throws IOException {

  document.close();

}

