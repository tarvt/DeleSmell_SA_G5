Location: XMLHandlerConfigurator.java

Content: 

/** 

 * Configures renderer context by setting the handler configuration on it.

 * @param context the RendererContext (contains the user agent)

 * @param ns the Namespace of the foreign object

 * @throws FOPException if configuring the target objects fails

 */

public void configure(RendererContext context,String ns) throws FOPException {

  Configuration cfg=userAgent.getRendererConfiguration(context.getRenderer().getMimeType());

  if (cfg != null) {

    cfg=getHandlerConfig(cfg,ns);

    if (cfg != null) {

      context.setProperty(RendererContextConstants.HANDLER_CONFIGURATION,cfg);

    }

  }

}

Location: XMLHandlerConfigurator.java

Content: 

/** 

 * Returns the configuration subtree for a specific renderer.

 * @param cfg the renderer configuration

 * @param namespace the namespace (i.e. the XMLHandler) for which the configuration shouldbe returned

 * @return the requested configuration subtree, null if there's no configuration

 */

private Configuration getHandlerConfig(Configuration cfg,String namespace){

  if (cfg == null || namespace == null) {

    return null;

  }

  Configuration handlerConfig=null;

  Configuration[] children=cfg.getChildren("xml-handler");

  for (  Configuration aChildren : children) {

    try {

      if (aChildren.getAttribute("namespace").equals(namespace)) {

        handlerConfig=aChildren;

        break;

      }

    }

 catch (    ConfigurationException e) {

    }

  }

  if (log.isDebugEnabled()) {

    log.debug((handlerConfig == null ? "No" : "") + "XML handler configuration found for namespace " + namespace);

  }

  return handlerConfig;

}

Location: XMLHandlerConfigurator.java

Content: 

/** 

 * Default constructor

 * @param userAgent the user agent

 */

public XMLHandlerConfigurator(FOUserAgent userAgent){

  super(userAgent);

}

