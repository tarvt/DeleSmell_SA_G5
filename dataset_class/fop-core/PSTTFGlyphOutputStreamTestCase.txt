Location: PSTTFGlyphOutputStreamTestCase.java

Content: 

/** 

 * Test endGlyphStream() - tests that PSTTFGenerator.endString() is invoked when this method is called.

 * @throws IOException file write exception

 */

@Test public void testEndGlyphStream() throws IOException {

  glyphOut.endGlyphStream();

  verify(mockGen).endString();

}

Location: PSTTFGlyphOutputStreamTestCase.java

Content: 

/** 

 * Test startGlyphStream() - test that startGlyphStream() invokes reset() and startString() in PSTTFGenerator.

 * @exception IOException file write error

 */

@Test public void testStartGlyphStream() throws IOException {

  glyphOut.startGlyphStream();

  verify(mockGen).startString();

}

Location: PSTTFGlyphOutputStreamTestCase.java

Content: 

/** 

 * Test streamGlyph(byte[],int,int) - tests several paths: 1) strings are properly appended 2) when total strings size > PSTTFGenerator.MAX_BUFFER_SIZE, the strings is closed and a new strings is started. 3) if a glyph of size > PSTTFGenerator.MAX_BUFFER_SIZE is attempted, an exception is thrown.

 * @throws IOException file write error.

 */

@Test public void testStreamGlyph() throws IOException {

  int byteArraySize=10;

  byte[] byteArray=new byte[byteArraySize];

  int runs=100;

  for (int i=0; i < runs; i++) {

    glyphOut.streamGlyph(byteArray,0,byteArraySize);

  }

  verify(mockGen,times(runs)).streamBytes(byteArray,0,byteArraySize);

  int stringLimit=PSTTFGenerator.MAX_BUFFER_SIZE / byteArraySize;

  for (int i=0; i < stringLimit; i++) {

    glyphOut.streamGlyph(byteArray,0,byteArraySize);

  }

  InOrder inOrder=inOrder(mockGen);

  inOrder.verify(mockGen,times(stringLimit)).streamBytes(byteArray,0,byteArraySize);

  inOrder.verify(mockGen).endString();

  inOrder.verify(mockGen).startString();

  inOrder.verify(mockGen,times(runs)).streamBytes(byteArray,0,byteArraySize);

  try {

    glyphOut.streamGlyph(byteArray,0,PSTTFGenerator.MAX_BUFFER_SIZE + 1);

    fail("Shouldn't allow a length > PSTTFGenerator.MAX_BUFFER_SIZE");

  }

 catch (  UnsupportedOperationException e) {

  }

}

