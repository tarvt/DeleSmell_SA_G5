Location: Java2DFontMetrics.java

Content: 

/** 

 * Creates a Graphics2D object for the sole purpose of getting font metrics.

 * @return a Graphics2D object

 */

private static Graphics2D createFontMetricsGraphics2D(){

  BufferedImage fontImage=new BufferedImage(100,100,BufferedImage.TYPE_INT_RGB);

  Graphics2D graphics2D=fontImage.createGraphics();

  graphics2D.setRenderingHint(RenderingHints.KEY_FRACTIONALMETRICS,RenderingHints.VALUE_FRACTIONALMETRICS_ON);

  return graphics2D;

}

Location: Java2DFontMetrics.java

Content: 

/** 

 * Determines the font ascent of the Font described by this FontMetrics object

 * @param family font family (java name) to use

 * @param style font style (java def.) to use

 * @param size font size

 * @return ascent in milliponts

 */

public int getAscender(String family,int style,int size){

  setFont(family,style,size);

  return ascender * 1000;

}

Location: Java2DFontMetrics.java

Content: 

private Font getBaseFont(String family,int style,float size){

  Map atts=new java.util.HashMap();

  atts.put(TextAttribute.FAMILY,family);

  if ((style & Font.BOLD) != 0) {

    atts.put(TextAttribute.WEIGHT,TextAttribute.WEIGHT_BOLD);

  }

  if ((style & Font.ITALIC) != 0) {

    atts.put(TextAttribute.POSTURE,TextAttribute.POSTURE_OBLIQUE);

  }

  atts.put(TextAttribute.SIZE,size);

  return new Font(atts);

}

Location: Java2DFontMetrics.java

Content: 

/** 

 * The size of a capital letter measured from the font's baseline

 * @param family font family

 * @param style font style

 * @param size font size

 * @return capital height in millipoints

 */

public int getCapHeight(String family,int style,int size){

  return getAscender(family,style,size);

}

Location: Java2DFontMetrics.java

Content: 

/** 

 * Determines the font descent of the Font described by this FontMetrics object

 * @param family font family (jave name) to use

 * @param style font style (jave def.) to use

 * @param size font size

 * @return descent in milliponts

 */

public int getDescender(String family,int style,int size){

  setFont(family,style,size);

  return descender * 1000;

}

Location: Java2DFontMetrics.java

Content: 

/** 

 * Returns a java.awt.Font instance for the desired family, style and size type. This is here, so that the font-mapping of FOP-defined fonts to java-fonts can be done in one place and does not need to occur in AWTFontRenderer.

 * @param family font family (jave name) to use

 * @param style font style (jave def.) to use

 * @param size font size

 * @return font with the desired characeristics.

 */

public java.awt.Font getFont(String family,int style,int size){

  setFont(family,style,size);

  return f1;

}

Location: Java2DFontMetrics.java

Content: 

/** 

 * Determines the font's maximum ascent of the Font described by the current FontMetrics object

 * @param family font family (java name) to use

 * @param style font style (java def.) to use

 * @param size font size

 * @return ascent in milliponts

 */

public int getMaxAscent(String family,int style,int size){

  setFont(family,style,size);

  return Math.round(lineMetrics.getAscent() * FONT_FACTOR);

}

Location: Java2DFontMetrics.java

Content: 

public int getStrikeoutPosition(String family,int style,int size){

  setFont(family,style,size);

  return -Math.round(lineMetrics.getStrikethroughOffset());

}

Location: Java2DFontMetrics.java

Content: 

public int getStrikeoutThickness(String family,int style,int size){

  setFont(family,style,size);

  return Math.round(lineMetrics.getStrikethroughThickness());

}

Location: Java2DFontMetrics.java

Content: 

public int getUnderlinePosition(String family,int style,int size){

  setFont(family,style,size);

  return -Math.round(lineMetrics.getUnderlineOffset());

}

Location: Java2DFontMetrics.java

Content: 

public int getUnderlineThickness(String family,int style,int size){

  setFont(family,style,size);

  return Math.round(lineMetrics.getUnderlineThickness());

}

Location: Java2DFontMetrics.java

Content: 

/** 

 * Return widths (in 1/1000ths of point size) of all characters

 * @param family font family (jave name) to use

 * @param style font style (jave def.) to use

 * @param size font size

 * @return array of character widths in millipoints

 */

public int[] getWidths(String family,int style,int size){

  int i;

  if (width == null) {

    width=new int[256];

  }

  setFont(family,style,size);

  for (i=0; i < 256; i++) {

    width[i]=1000 * internalCharWidth(i);

  }

  return width;

}

Location: Java2DFontMetrics.java

Content: 

/** 

 * Determines the typical font height of a small cap letter FontMetrics object

 * @param family font family (jave name) to use

 * @param style font style (jave def.) to use

 * @param size font size

 * @return font height in milliponts

 */

public int getXHeight(String family,int style,int size){

  setFont(family,style,size);

  return xHeight * 1000;

}

Location: Java2DFontMetrics.java

Content: 

/** 

 * Indicates whether the font contains a particular character/glyph.

 * @param family font family (jave name) to use

 * @param style font style (jave def.) to use

 * @param size font size

 * @param c the glyph to check

 * @return true if the character is supported

 */

public boolean hasChar(String family,int style,int size,char c){

  setFont(family,style,size);

  return f1.canDisplay(c);

}

Location: Java2DFontMetrics.java

Content: 

private int internalCharWidth(int i){

  char[] ch={(char)i};

  Rectangle2D rect=fmt.getStringBounds(ch,0,1,this.graphics);

  return (int)Math.round(rect.getWidth() * 1000);

}

Location: Java2DFontMetrics.java

Content: 

/** 

 * Constructs a new Font-metrics.

 */

public Java2DFontMetrics(){

  this.graphics=createFontMetricsGraphics2D();

}

Location: Java2DFontMetrics.java

Content: 

/** 

 * Checks whether the font  for which values are requested is the one used immediately before or whether it is a new one

 * @param family font family (jave name) to use

 * @param style font style (jave def.) to use

 * @param size font size

 * @return true if the font was changed, false otherwise

 */

private boolean setFont(String family,int style,int size){

  boolean changed=false;

  float s=size / 1000f;

  if (f1 == null) {

    f1=getBaseFont(family,style,s);

    fmt=graphics.getFontMetrics(f1);

    changed=true;

  }

 else {

    if ((this.style != style) || !this.family.equals(family) || this.size != s) {

      if (family.equals(this.family)) {

        f1=f1.deriveFont(style,s);

      }

 else {

        f1=getBaseFont(family,style,s);

      }

      fmt=graphics.getFontMetrics(f1);

      changed=true;

    }

  }

  if (changed) {

    TextLayout layout=new TextLayout("x",f1,graphics.getFontRenderContext());

    Rectangle2D rect=layout.getBounds();

    xHeight=(int)Math.round(-rect.getY() * 1000);

    layout=new TextLayout("d",f1,graphics.getFontRenderContext());

    rect=layout.getBounds();

    ascender=(int)Math.round(-rect.getY() * 1000);

    layout=new TextLayout("p",f1,graphics.getFontRenderContext());

    rect=layout.getBounds();

    descender=(int)Math.round((rect.getY() + rect.getHeight()) * -1000);

    lineMetrics=f1.getLineMetrics("",graphics.getFontRenderContext());

  }

  this.family=family;

  this.style=style;

  this.size=s;

  return changed;

}

Location: Java2DFontMetrics.java

Content: 

/** 

 * Returns width (in 1/1000ths of point size) of character at code point i

 * @param i the character for which to get the width

 * @param family font family (jave name) to use

 * @param style font style (jave def.) to use

 * @param size font size

 * @return character width in millipoints

 */

public int width(int i,String family,int style,int size){

  int w;

  setFont(family,style,size);

  w=internalCharWidth(i) * 1000;

  return w;

}

