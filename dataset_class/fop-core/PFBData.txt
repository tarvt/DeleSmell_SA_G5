Location: PFBData.java

Content: 

/** 

 * Gets the encrypted segment of the font file

 * @return The encrypted segment as a byte array

 */

public byte[] getEncryptedSegment(){

  return this.encryptedSegment.clone();

}

Location: PFBData.java

Content: 

/** 

 * Gets the header segment of the font file

 * @return Header segment as a byte array

 */

public byte[] getHeaderSegment(){

  return this.headerSegment.clone();

}

Location: PFBData.java

Content: 

/** 

 * Returns the Length1 (length of the header segment).

 * @return int Length1

 */

public int getLength1(){

  return this.headerSegment.length;

}

Location: PFBData.java

Content: 

/** 

 * Returns the Length2 (length of the encrypted segment).

 * @return int Length2

 */

public int getLength2(){

  return this.encryptedSegment.length;

}

Location: PFBData.java

Content: 

/** 

 * Returns the Length3 (length of the trailer segment).

 * @return int Length3

 */

public int getLength3(){

  return this.trailerSegment.length;

}

Location: PFBData.java

Content: 

/** 

 * Returns the format the font was loaded with.

 * @return int one of the PFB_* constants

 */

public int getPFBFormat(){

  return this.pfbFormat;

}

Location: PFBData.java

Content: 

/** 

 * Gets the trailer segment of the font file

 * @return The trailer segment as a byte array

 */

public byte[] getTrailerSegment(){

  return this.trailerSegment.clone();

}

Location: PFBData.java

Content: 

/** 

 * Writes the PFB file in raw format to an OutputStream.

 * @param out the OutputStream to write to

 * @throws IOException In case of an I/O problem

 */

public void outputAllParts(OutputStream out) throws IOException {

  out.write(this.headerSegment);

  out.write(this.encryptedSegment);

  out.write(this.trailerSegment);

}

Location: PFBData.java

Content: 

/** 

 * Sets the encrypted segment of the font file.

 * @param encryptedSeg the encrypted segment

 */

public void setEncryptedSegment(byte[] encryptedSeg){

  this.encryptedSegment=encryptedSeg;

}

Location: PFBData.java

Content: 

/** 

 * Sets the header segment of the font file.

 * @param headerSeg the header segment

 */

public void setHeaderSegment(byte[] headerSeg){

  this.headerSegment=headerSeg;

}

Location: PFBData.java

Content: 

/** 

 * Sets the PFB format the font was loaded with.

 * @param format one of the PFB_* constants

 */

public void setPFBFormat(int format){

switch (format) {

case PFB_RAW:

case PFB_PC:

    this.pfbFormat=format;

  break;

case PFB_MAC:

throw new UnsupportedOperationException("Mac format is not yet implemented");

default :

throw new IllegalArgumentException("Invalid value for PFB format: " + format);

}

}

Location: PFBData.java

Content: 

/** 

 * Sets the trailer segment of the font file.

 * @param trailerSeg the trailer segment

 */

public void setTrailerSegment(byte[] trailerSeg){

  this.trailerSegment=trailerSeg;

}

