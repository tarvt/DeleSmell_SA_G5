Location: SubSequenceSpecifier.java

Content: 

/** 

 * @param flowName name of the main flow

 * @return true iff page sequence is a finite sequence or can process the entire main flow

 */

boolean canProcess(String flowName);

Location: SubSequenceSpecifier.java

Content: 

SimplePageMaster getLastPageMaster(boolean isOddPage,boolean isFirstPage,boolean isBlankPage,BlockLevelEventProducer blockLevelEventProducer) throws PageProductionException ;

Location: SubSequenceSpecifier.java

Content: 

/** 

 * Returns the name of the next page master.

 * @param isOddPage True if the next page number is odd

 * @param isFirstPage True if the next page is the first

 * @param isLastPage True if the next page is the last

 * @param isBlankPage True if the next page is blank

 * @return the page master name

 * @throws PageProductionException if there's a problem determining the next page master

 */

SimplePageMaster getNextPageMaster(boolean isOddPage,boolean isFirstPage,boolean isLastPage,boolean isBlankPage) throws PageProductionException ;

Location: SubSequenceSpecifier.java

Content: 

/** 

 * Used to set the "cursor position" to the previous item.

 * @return true if there is a previous item, false if the current one was the first one.

 */

boolean goToPrevious();

Location: SubSequenceSpecifier.java

Content: 

/** 

 * Test that this is a finite sequence

 * @return true iff this is a finite sequence

 */

boolean isInfinite();

Location: SubSequenceSpecifier.java

Content: 

/** 

 * Test if this can be reused when it is the last sub-sequence specifer, and has been exhausted

 * @return true if and only if it can be reused

 */

boolean isReusable();

Location: SubSequenceSpecifier.java

Content: 

/** 

 * called by the parent LayoutMasterSet to resolve object references from simple page master reference names

 * @param layoutMasterSet the layout-master-set

 * @throws ValidationException when a named reference cannot be resolved

 */

void resolveReferences(LayoutMasterSet layoutMasterSet) throws ValidationException ;

