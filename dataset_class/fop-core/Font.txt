Location: Font.java

Content: 

/** 

 * Main constructor

 * @param key key of the font

 * @param triplet the font triplet that was used to lookup this font (may be null)

 * @param met font metrics

 * @param fontSize font size

 */

public Font(String key,FontTriplet triplet,FontMetrics met,int fontSize){

  this.fontName=key;

  this.triplet=triplet;

  this.metric=met;

  this.fontSize=fontSize;

}

Location: Font.java

Content: 

/** 

 * Helper method for getting the width of a unicode char from the current fontstate. This also performs some guessing on widths on various versions of space that might not exists in the font.

 * @param c character to inspect

 * @return the width of the character or -1 if no width available

 */

public int getCharWidth(char c){

  int width;

  if ((c == '\n') || (c == '\r') || (c == '\t')|| (c == '\u00A0')) {

    width=getCharWidth(' ');

  }

 else {

    if (hasChar(c)) {

      int mappedChar=mapChar(c);

      width=getWidth(mappedChar);

    }

 else {

      width=-1;

    }

    if (width <= 0) {

      int em=getFontSize();

      int en=em / 2;

      if (c == ' ') {

        width=em;

      }

 else       if (c == '\u2000') {

        width=en;

      }

 else       if (c == '\u2001') {

        width=em;

      }

 else       if (c == '\u2002') {

        width=em / 2;

      }

 else       if (c == '\u2003') {

        width=getFontSize();

      }

 else       if (c == '\u2004') {

        width=em / 3;

      }

 else       if (c == '\u2005') {

        width=em / 4;

      }

 else       if (c == '\u2006') {

        width=em / 6;

      }

 else       if (c == '\u2007') {

        width=getCharWidth('0');

      }

 else       if (c == '\u2008') {

        width=getCharWidth('.');

      }

 else       if (c == '\u2009') {

        width=em / 5;

      }

 else       if (c == '\u200A') {

        width=em / 10;

      }

 else       if (c == '\u200B') {

        width=0;

      }

 else       if (c == '\u202F') {

        width=getCharWidth(' ') / 2;

      }

 else       if (c == '\u2060') {

        width=0;

      }

 else       if (c == '\u3000') {

        width=getCharWidth(' ') * 2;

      }

 else       if (c == '\ufeff') {

        width=0;

      }

 else {

        width=getWidth(mapChar(c));

      }

    }

  }

  return width;

}

Location: Font.java

Content: 

/** 

 * Returns the amount of kerning between two characters. The value returned measures in pt. So it is already adjusted for font size.

 * @param ch1 first character

 * @param ch2 second character

 * @return the distance to adjust for kerning, 0 if there's no kerning

 */

public int getKernValue(int ch1,int ch2){

  if ((ch1 >= 0xD800) && (ch1 <= 0xE000)) {

    return 0;

  }

 else   if ((ch2 >= 0xD800) && (ch2 <= 0xE000)) {

    return 0;

  }

  Map<Integer,Integer> kernPair=getKerning().get(ch1);

  if (kernPair != null) {

    Integer width=kernPair.get(ch2);

    if (width != null) {

      return width * getFontSize() / 1000;

    }

  }

  return 0;

}

Location: Font.java

Content: 

/** 

 * Get the real underlying font if it is wrapped inside some container such as a  {@link LazyFont} or a{@link CustomFontMetricsMapper}.

 * @return instance of the font

 */

private FontMetrics getRealFontMetrics(){

  FontMetrics realFontMetrics=metric;

  if (realFontMetrics instanceof CustomFontMetricsMapper) {

    realFontMetrics=((CustomFontMetricsMapper)realFontMetrics).getRealFont();

  }

  if (realFontMetrics instanceof LazyFont) {

    return ((LazyFont)realFontMetrics).getRealFont();

  }

  return realFontMetrics;

}

Location: Font.java

Content: 

/** 

 * Returns the width of a character

 * @param charnum character to look up

 * @return width of the character

 */

public int getWidth(int charnum){

  return (metric.getWidth(charnum,fontSize) / 1000);

}

Location: Font.java

Content: 

/** 

 * Calculates the word width.

 * @param word text to get width for

 * @return the width of the text

 */

public int getWordWidth(String word){

  if (word == null) {

    return 0;

  }

  int wordLength=word.length();

  int width=0;

  char[] characters=new char[wordLength];

  word.getChars(0,wordLength,characters,0);

  for (int i=0; i < wordLength; i++) {

    width+=getCharWidth(characters[i]);

  }

  return width;

}

