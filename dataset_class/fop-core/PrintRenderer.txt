Location: PrintRenderer.java

Content: 

/** 

 * Adds a font list to current list of fonts

 * @param fontList a font info list

 */

public void addFontList(List<EmbedFontInfo> fontList){

  if (embedFontInfoList == null) {

    setFontList(fontList);

  }

 else {

    embedFontInfoList.addAll(fontList);

  }

}

Location: PrintRenderer.java

Content: 

/** 

 * @return the ending page number 

 */

public int getEndNumber(){

  return endNumber;

}

Location: PrintRenderer.java

Content: 

/** 

 * Returns a Font object constructed based on the font traits in an area

 * @param area the area from which to retrieve the font triplet information

 * @return the requested Font instance or null if not found

 */

protected Font getFontFromArea(Area area){

  FontTriplet triplet=(FontTriplet)area.getTrait(Trait.FONT);

  int size=(Integer)area.getTrait(Trait.FONT_SIZE);

  return fontInfo.getFontInstance(triplet,size);

}

Location: PrintRenderer.java

Content: 

/** 

 * @return list of available embedded fonts

 */

public List<EmbedFontInfo> getFontList(){

  return this.embedFontInfoList;

}

Location: PrintRenderer.java

Content: 

/** 

 * Returns the internal font key for a font triplet coming from the area tree

 * @param area the area from which to retrieve the font triplet information

 * @return the internal font key (F1, F2 etc.) or null if not found

 */

protected String getInternalFontNameForArea(Area area){

  FontTriplet triplet=(FontTriplet)area.getTrait(Trait.FONT);

  String key=fontInfo.getInternalFontKey(triplet);

  if (key == null) {

    triplet=FontTriplet.DEFAULT_FONT_TRIPLET;

    key=fontInfo.getInternalFontKey(triplet);

  }

  return key;

}

Location: PrintRenderer.java

Content: 

/** 

 * @return the PrinterJob instance that this renderer prints to 

 */

public PrinterJob getPrinterJob(){

  return this.printerJob;

}

Location: PrintRenderer.java

Content: 

/** 

 * @return the starting page number 

 */

public int getStartPage(){

  return startNumber;

}

Location: PrintRenderer.java

Content: 

private void initializePrinterJob(){

  if (this.printerJob == null) {

    printerJob=PrinterJob.getPrinterJob();

    printerJob.setJobName("FOP Document");

    printerJob.setCopies(copies);

    if (System.getProperty("dialog") != null) {

      if (!printerJob.printDialog()) {

        throw new RuntimeException("Printing cancelled by operator");

      }

    }

    printerJob.setPageable(this);

  }

}

Location: PrintRenderer.java

Content: 

/** 

 * Instantiates a RendererContext for an image

 * @return a newly created RendererContext.

 */

protected RendererContext instantiateRendererContext(){

  return new RendererContext(this,getMimeType());

}

Location: PrintRenderer.java

Content: 

/** 

 * Creates a new PrintRenderer with the options set through the renderer options if a custom PrinterJob is not given in FOUserAgent's renderer options.

 * @param userAgent the user agent that contains configuration details. This cannot be null.

 */

public PrintRenderer(FOUserAgent userAgent){

  super(userAgent);

  setRendererOptions();

}

Location: PrintRenderer.java

Content: 

/** 

 * Renders an XML document (SVG for example).

 * @param doc the DOM Document containing the XML document to be rendered

 * @param ns the namespace URI for the XML document

 * @param pos the position for the generated graphic/image

 * @param foreignAttributes the foreign attributes containing rendering hints, or null

 */

public void renderDocument(Document doc,String ns,Rectangle2D pos,Map foreignAttributes){

  int x=currentIPPosition + (int)pos.getX();

  int y=currentBPPosition + (int)pos.getY();

  int width=(int)pos.getWidth();

  int height=(int)pos.getHeight();

  RendererContext context=createRendererContext(x,y,width,height,foreignAttributes);

  renderXML(context,doc,ns);

}

Location: PrintRenderer.java

Content: 

/** 

 * Sets the number of the last page to be printed.

 * @param end The ending page number

 */

public void setEndPage(int end){

  this.endNumber=end;

}

Location: PrintRenderer.java

Content: 

/** 

 * @param embedFontInfoList list of available fonts

 */

public void setFontList(List<EmbedFontInfo> embedFontInfoList){

  this.embedFontInfoList=embedFontInfoList;

}

Location: PrintRenderer.java

Content: 

private void setRendererOptions(){

  Map rendererOptions=getUserAgent().getRendererOptions();

  Object printerJobO=rendererOptions.get(PrintRenderer.PRINTER_JOB);

  if (printerJobO != null) {

    if (!(printerJobO instanceof PrinterJob)) {

      throw new IllegalArgumentException("Renderer option " + PrintRenderer.PRINTER_JOB + " must be an instance of java.awt.print.PrinterJob, but an instance of "+ printerJobO.getClass().getName()+ " was given.");

    }

    printerJob=(PrinterJob)printerJobO;

    printerJob.setPageable(this);

  }

  Object o=rendererOptions.get(PrintRenderer.COPIES);

  if (o != null) {

    this.copies=getPositiveInteger(o);

  }

  initializePrinterJob();

}

Location: PrintRenderer.java

Content: 

/** 

 * Sets the number of the first page to be printed.

 * @param start The starting page number

 */

public void setStartPage(int start){

  this.startNumber=start;

}

