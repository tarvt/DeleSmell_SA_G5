Location: LeafNodeLayoutManager.java

Content: 

/** 

 * Create a Leaf node layout manager.

 */

public LeafNodeLayoutManager(){

}

Location: LeafNodeLayoutManager.java

Content: 

/** 

 * Create a Leaf node layout manager.

 * @param node the FObj to attach to this LM.

 */

public LeafNodeLayoutManager(FObj node){

  super(node);

}

Location: LeafNodeLayoutManager.java

Content: 

/** 

 * Offset this area. Offset the inline area in the bpd direction when adding the inline area. This is used for vertical alignment. Subclasses should override this if necessary.

 * @param area the inline area to be updated

 * @param context the layout context used for adding the area

 */

protected void offsetArea(InlineArea area,LayoutContext context){

  area.setBlockProgressionOffset(alignmentContext.getOffset());

}

Location: LeafNodeLayoutManager.java

Content: 

/** 

 * Check if this inline area is resolved due to changes in page or ipd. Currently not used.

 * @return true if the area is resolved when adding

 */

public boolean resolved(){

  return false;

}

Location: LeafNodeLayoutManager.java

Content: 

/** 

 * Set the border and padding properties of the inline area.

 * @param commonBorderPaddingBackground the alignment adjust property

 */

protected void setCommonBorderPaddingBackground(CommonBorderPaddingBackground commonBorderPaddingBackground){

  this.commonBorderPaddingBackground=commonBorderPaddingBackground;

}

Location: LeafNodeLayoutManager.java

Content: 

/** 

 * Set the current inline area.

 * @param ia the inline area to set for this layout manager

 */

public void setCurrentArea(InlineArea ia){

  curArea=ia;

}

Location: LeafNodeLayoutManager.java

Content: 

/** 

 * Adjust the width of the area when adding. This uses the min/opt/max values to adjust the with of the inline area by a percentage.

 * @param area the inline area to be updated

 * @param context the layout context for adding this area

 */

protected void widthAdjustArea(InlineArea area,LayoutContext context){

  double dAdjust=context.getIPDAdjust();

  int adjustment=0;

  if (dAdjust < 0) {

    adjustment+=(int)(dAdjust * areaInfo.ipdArea.getShrink());

  }

 else   if (dAdjust > 0) {

    adjustment+=(int)(dAdjust * areaInfo.ipdArea.getStretch());

  }

  area.setIPD(areaInfo.ipdArea.getOpt() + adjustment);

  area.setAdjustment(adjustment);

}

