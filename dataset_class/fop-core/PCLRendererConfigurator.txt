Location: PCLRendererConfigurator.java

Content: 

private void configure(PCLRendererConfig config,PCLRenderingUtil pclUtil) throws FOPException {

  if (config.getRenderingMode() != null) {

    pclUtil.setRenderingMode(config.getRenderingMode());

  }

  if (config.isDisablePjl() != null) {

    pclUtil.setPJLDisabled(config.isDisablePjl());

  }

  if (config.isTextRendering() != null) {

    pclUtil.setAllTextAsBitmaps(config.isTextRendering());

  }

  if (config.isColorEnabled() != null) {

    pclUtil.setColorEnabled(config.isColorEnabled());

  }

  if (config.isOptimizeResources() != null) {

    pclUtil.setOptimizeResources(config.isOptimizeResources());

  }

}

Location: PCLRendererConfigurator.java

Content: 

@Override protected FontCollection createCollectionFromFontList(InternalResourceResolver resourceResolver,List<EmbedFontInfo> fontList){

  return new ConfiguredFontCollection(resourceResolver,fontList,userAgent.isComplexScriptFeaturesEnabled());

}

Location: PCLRendererConfigurator.java

Content: 

@Override protected List<FontCollection> getDefaultFontCollection(){

  final List<FontCollection> fontCollections=new java.util.ArrayList<FontCollection>();

  final Java2DFontMetrics java2DFontMetrics=new Java2DFontMetrics();

  fontCollections.add(new Base14FontCollection(java2DFontMetrics));

  fontCollections.add(new InstalledFontCollection(java2DFontMetrics));

  return fontCollections;

}

Location: PCLRendererConfigurator.java

Content: 

/** 

 * Default constructor

 * @param userAgent user agent

 */

public PCLRendererConfigurator(FOUserAgent userAgent,RendererConfigParser rendererConfigParser){

  super(userAgent,rendererConfigParser);

}

