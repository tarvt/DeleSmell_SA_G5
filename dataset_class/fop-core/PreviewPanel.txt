Location: PreviewPanel.java

Content: 

/** 

 * Add a listener to receive notification of page change events. Events will be fired whenever the currentPage value is changed. The values recorded are 0-based.

 * @param l the page change listener to add

 */

public void addPageChangeListener(PageChangeListener l){

  listenerList.add(PageChangeListener.class,l);

}

Location: PreviewPanel.java

Content: 

/** 

 * Allows a (yet) simple visual debug of the document.

 */

void debug(){

  renderer.debug=!renderer.debug;

  reload();

}

Location: PreviewPanel.java

Content: 

/** 

 * Notify all registered listeners of a page change event.

 * @param oldPage the old page

 * @param newPage the new page

 */

protected void firePageChange(int oldPage,int newPage){

  Object[] listeners=listenerList.getListenerList();

  PageChangeEvent e=null;

  for (int i=listeners.length - 2; i >= 0; i-=2) {

    if (listeners[i] == PageChangeListener.class) {

      if (e == null) {

        e=new PageChangeEvent(this,newPage,oldPage);

      }

      ((PageChangeListener)listeners[i + 1]).pageChanged(e);

    }

  }

}

Location: PreviewPanel.java

Content: 

/** 

 * Returns the display mode.

 * @return mode One of SINGLE, CONTINUOUS or CONT_FACING.

 */

public int getDisplayMode(){

  return displayMode;

}

Location: PreviewPanel.java

Content: 

/** 

 * As getScaleToFitWindow, but ignoring the Y axis.

 * @return the requested scale factor

 * @throws FOPException in case of an error while fetching the PageViewport

 */

public double getScaleToFitWidth() throws FOPException {

  Dimension extents=previewArea.getViewport().getExtentSize();

  return getScaleToFit(extents.getWidth() - 2 * BORDER_SPACING,Double.MAX_VALUE);

}

Location: PreviewPanel.java

Content: 

/** 

 * Returns the scale factor required in order to fit either the current page within the current window or to fit two adjacent pages within the display if the displaymode is continuous.

 * @return the requested scale factor

 * @throws FOPException in case of an error while fetching the PageViewport

 */

public double getScaleToFitWindow() throws FOPException {

  Dimension extents=previewArea.getViewport().getExtentSize();

  return getScaleToFit(extents.getWidth() - 2 * BORDER_SPACING,extents.getHeight() - 2 * BORDER_SPACING);

}

Location: PreviewPanel.java

Content: 

/** 

 * Returns the scale factor required in order to fit either the current page or two adjacent pages within a window of the given height and width, depending on the display mode. In order to ignore either dimension, just specify it as Double.MAX_VALUE.

 * @param viewWidth width of the view

 * @param viewHeight height of the view

 * @return the requested scale factor

 * @throws FOPException in case of an error while fetching the PageViewport

 */

public double getScaleToFit(double viewWidth,double viewHeight) throws FOPException {

  PageViewport pageViewport=renderer.getPageViewport(currentPage);

  Rectangle2D pageSize=pageViewport.getViewArea();

  float screenResolution=Toolkit.getDefaultToolkit().getScreenResolution();

  float screenFactor=screenResolution / UnitConv.IN2PT;

  double widthScale=viewWidth / (pageSize.getWidth() / 1000f) / screenFactor;

  double heightScale=viewHeight / (pageSize.getHeight() / 1000f) / screenFactor;

  return Math.min(displayMode == CONT_FACING ? widthScale / 2 : widthScale,heightScale);

}

Location: PreviewPanel.java

Content: 

/** 

 * Creates a new PreviewPanel instance.

 * @param foUserAgent the user agent

 * @param renderable the Renderable instance that is used to reload/re-render a documentafter modifications.

 * @param renderer the AWT Renderer instance to paint with

 */

public PreviewPanel(FOUserAgent foUserAgent,Renderable renderable,AWTRenderer renderer){

  super(new GridLayout(1,1));

  this.renderable=renderable;

  this.renderer=renderer;

  this.foUserAgent=foUserAgent;

  this.foUserAgent.setTargetResolution(Toolkit.getDefaultToolkit().getScreenResolution());

  gridPanel=new JPanel();

  gridPanel.setLayout(new GridLayout(0,1));

  previewArea=new JScrollPane(gridPanel);

  previewArea.getViewport().setBackground(Color.gray);

  previewArea.getVerticalScrollBar().addAdjustmentListener(new PageNumberListener());

  scroller=new ViewportScroller(previewArea.getViewport());

  previewArea.addMouseListener(scroller);

  previewArea.addMouseMotionListener(scroller);

  previewArea.setMinimumSize(new Dimension(50,50));

  add(previewArea);

}

Location: PreviewPanel.java

Content: 

/** 

 * Removes a page change listener.

 * @param l the page change listener to remove

 */

public void removePageChangeListener(PageChangeListener l){

  listenerList.remove(PageChangeListener.class,l);

}

Location: PreviewPanel.java

Content: 

/** 

 * Sets the display mode.

 * @param mode One of SINGLE, CONTINUOUS or CONT_FACING.

 */

public void setDisplayMode(int mode){

  if (mode != displayMode) {

    displayMode=mode;

    gridPanel.setLayout(new GridLayout(0,displayMode == CONT_FACING ? 2 : 1));

    reload();

  }

}

Location: PreviewPanel.java

Content: 

/** 

 * Starts rendering process and shows the current page. 

 */

public synchronized void showPage(){

  ShowPageImage viewer=new ShowPageImage();

  if (SwingUtilities.isEventDispatchThread()) {

    viewer.run();

  }

 else {

    SwingUtilities.invokeLater(viewer);

  }

}

