Location: DataStream.java

Content: 

/** 

 * Creates the given page fonts in the current page

 * @param pageFonts a collection of AFP font attributes

 */

public void addFontsToCurrentPage(Map pageFonts){

  for (  Object o : pageFonts.values()) {

    AFPFontAttributes afpFontAttributes=(AFPFontAttributes)o;

    createFont(afpFontAttributes.getFontReference(),afpFontAttributes.getFont(),afpFontAttributes.getPointSize());

  }

}

Location: DataStream.java

Content: 

/** 

 * Helper method which allows creation of the MPO object, via the AEG. And the IPO via the Page. (See actual object for descriptions.)

 * @param name the name of the static overlay

 * @param x x-coordinate

 * @param y y-coordinate

 */

public void createIncludePageOverlay(String name,int x,int y){

  currentPageObject.createIncludePageOverlay(name,x,y,paintingState.getRotation());

  currentPageObject.getActiveEnvironmentGroup().createOverlay(name);

}

Location: DataStream.java

Content: 

/** 

 * Creates an IncludePageSegment on the current page.

 * @param name the name of the include page segment

 * @param x the x coordinate for the overlay

 * @param y the y coordinate for the overlay

 * @param width the width of the image

 * @param height the height of the image

 */

public void createIncludePageSegment(String name,int x,int y,int width,int height){

  int xOrigin;

  int yOrigin;

  int orientation=paintingState.getRotation();

switch (orientation) {

case 90:

    xOrigin=x - height;

  yOrigin=y;

break;

case 180:

xOrigin=x - width;

yOrigin=y - height;

break;

case 270:

xOrigin=x;

yOrigin=y - width;

break;

default :

xOrigin=x;

yOrigin=y;

break;

}

boolean createHardPageSegments=true;

currentPage.createIncludePageSegment(name,xOrigin,yOrigin,createHardPageSegments);

}

Location: DataStream.java

Content: 

/** 

 * Creates a TagLogicalElement on the current page group.

 * @param attributes the array of key value pairs.

 */

public void createPageGroupTagLogicalElement(TagLogicalElement.State[] attributes){

  for (  TagLogicalElement.State attribute : attributes) {

    currentPageGroup.createTagLogicalElement(attribute);

  }

}

Location: DataStream.java

Content: 

/** 

 * Creates a TagLogicalElement on the current page.

 * @param attributes the array of key value pairs.

 */

public void createPageTagLogicalElement(TagLogicalElement.State[] attributes){

  for (  TagLogicalElement.State attribute : attributes) {

    currentPage.createTagLogicalElement(attribute);

  }

}

Location: DataStream.java

Content: 

/** 

 * This method will create shading on the page using the specified coordinates (the shading contrast is controlled via the red, green, blue parameters, by converting this to grey scale).

 * @param x the x coordinate of the shading

 * @param y the y coordinate of the shading

 * @param w the width of the shaded area

 * @param h the height of the shaded area

 * @param col the shading color

 */

public void createShading(int x,int y,int w,int h,Color col){

  currentPageObject.createShading(x,y,w,h,col.getRed(),col.getGreen(),col.getBlue());

}

Location: DataStream.java

Content: 

/** 

 * Creates a TagLogicalElement on the current page or page group

 * @param name The tag name

 * @param value The tag value

 * @param encoding The CCSID character set encoding

 */

public void createTagLogicalElement(String name,String value,int encoding){

  TagLogicalElement.State tleState=new TagLogicalElement.State(name,value,encoding);

  if (currentPage != null) {

    currentPage.createTagLogicalElement(tleState);

  }

 else {

    currentPageGroup.createTagLogicalElement(tleState);

  }

}

Location: DataStream.java

Content: 

/** 

 * Helper method to create text on the current page, this method delegates to the current presentation text object in order to construct the text.

 * @param textDataInfo the afp text data

 * @param letterSpacing letter spacing to draw text with

 * @param wordSpacing word Spacing to draw text with

 * @param font is the font to draw text with

 * @param charSet is the AFP Character Set to use with the text

 * @throws UnsupportedEncodingException thrown if character encoding is not supported

 */

public void createText(final AFPTextDataInfo textDataInfo,final int letterSpacing,final int wordSpacing,final Font font,final CharacterSet charSet) throws UnsupportedEncodingException {

  int rotation=paintingState.getRotation();

  if (rotation != 0) {

    textDataInfo.setRotation(rotation);

    Point p=getPoint(textDataInfo.getX(),textDataInfo.getY());

    textDataInfo.setX(p.x);

    textDataInfo.setY(p.y);

  }

  PtocaProducer producer=new PtocaProducer(){

    public void produce(    PtocaBuilder builder) throws IOException {

      builder.setTextOrientation(textDataInfo.getRotation());

      builder.absoluteMoveBaseline(textDataInfo.getY());

      builder.absoluteMoveInline(textDataInfo.getX());

      builder.setExtendedTextColor(textDataInfo.getColor());

      builder.setCodedFont((byte)textDataInfo.getFontReference());

      int l=textDataInfo.getString().length();

      StringBuffer sb=new StringBuffer();

      int interCharacterAdjustment=0;

      AFPUnitConverter unitConv=paintingState.getUnitConverter();

      if (letterSpacing != 0) {

        interCharacterAdjustment=Math.round(unitConv.mpt2units(letterSpacing));

      }

      builder.setInterCharacterAdjustment(interCharacterAdjustment);

      int spaceWidth=font.getCharWidth(CharUtilities.SPACE);

      int spacing=spaceWidth + letterSpacing;

      int fixedSpaceCharacterIncrement=Math.round(unitConv.mpt2units(spacing));

      int varSpaceCharacterIncrement=fixedSpaceCharacterIncrement;

      if (wordSpacing != 0) {

        varSpaceCharacterIncrement=Math.round(unitConv.mpt2units(spaceWidth + wordSpacing + letterSpacing));

      }

      builder.setVariableSpaceCharacterIncrement(varSpaceCharacterIncrement);

      boolean fixedSpaceMode=false;

      for (int i=0; i < l; i++) {

        char orgChar=textDataInfo.getString().charAt(i);

        float glyphAdjust=0;

        if (CharUtilities.isFixedWidthSpace(orgChar)) {

          flushText(builder,sb,charSet);

          builder.setVariableSpaceCharacterIncrement(fixedSpaceCharacterIncrement);

          fixedSpaceMode=true;

          sb.append(CharUtilities.SPACE);

          int charWidth=font.getCharWidth(orgChar);

          glyphAdjust+=(charWidth - spaceWidth);

        }

 else {

          if (fixedSpaceMode) {

            flushText(builder,sb,charSet);

            builder.setVariableSpaceCharacterIncrement(varSpaceCharacterIncrement);

            fixedSpaceMode=false;

          }

          char ch;

          if (orgChar == CharUtilities.NBSPACE) {

            ch=' ';

          }

 else {

            ch=orgChar;

          }

          sb.append(ch);

        }

        if (glyphAdjust != 0) {

          flushText(builder,sb,charSet);

          int increment=Math.round(unitConv.mpt2units(glyphAdjust));

          builder.relativeMoveInline(increment);

        }

      }

      flushText(builder,sb,charSet);

    }

    private void flushText(    PtocaBuilder builder,    StringBuffer sb,    final CharacterSet charSet) throws IOException {

      if (sb.length() > 0) {

        builder.addTransparentData(charSet.encodeChars(sb));

        sb.setLength(0);

      }

    }

  }

;

  currentPage.createText(producer);

}

Location: DataStream.java

Content: 

/** 

 * Default constructor for the AFPDocumentStream.

 * @param factory the resource factory

 * @param paintingState the AFP painting state

 * @param outputStream the outputstream to write to

 */

public DataStream(Factory factory,AFPPaintingState paintingState,OutputStream outputStream){

  this.paintingState=paintingState;

  this.factory=factory;

  this.outputStream=outputStream;

}

Location: DataStream.java

Content: 

/** 

 * Helper method to mark the end of the current overlay.

 * @throws IOException thrown if an I/O exception of some sort has occurred

 */

public void endOverlay() throws IOException {

  if (currentOverlay != null) {

    currentOverlay.endPage();

    currentOverlay=null;

    currentPage=currentPageObject;

  }

}

Location: DataStream.java

Content: 

/** 

 * Returns the current page group

 * @return the current page group

 */

public PageGroup getCurrentPageGroup(){

  return this.currentPageGroup;

}

Location: DataStream.java

Content: 

/** 

 * Returns the MO:DCA interchange set in use

 * @return the MO:DCA interchange set in use

 */

public InterchangeSet getInterchangeSet(){

  return this.interchangeSet;

}

Location: DataStream.java

Content: 

/** 

 * Returns a point on the current page

 * @param x the X-coordinate

 * @param y the Y-coordinate

 * @return a point on the current page

 */

private Point getPoint(int x,int y){

  return paintingState.getPoint(x,y);

}

Location: DataStream.java

Content: 

/** 

 * Helper method to restore the current page.

 * @param pageObject page object

 */

public void restorePage(PageObject pageObject){

  currentPageObject=pageObject;

  currentPage=pageObject;

}

Location: DataStream.java

Content: 

/** 

 * Helper method to save the current page.

 * @return current page object that was saved

 */

public PageObject savePage(){

  PageObject pageObject=currentPageObject;

  if (currentPageGroup != null) {

    currentPageGroup.addPage(currentPageObject);

  }

 else {

    document.addPage(currentPageObject);

  }

  currentPageObject=null;

  currentPage=null;

  return pageObject;

}

Location: DataStream.java

Content: 

/** 

 * The document is started by invoking this method which creates an instance of the AFP Document object.

 * @param name the name of this document.

 */

public void setDocumentName(String name){

  if (name != null) {

    getDocument().setFullyQualifiedName(FullyQualifiedNameTriplet.TYPE_BEGIN_DOCUMENT_REF,FullyQualifiedNameTriplet.FORMAT_CHARSTR,name);

  }

}

Location: DataStream.java

Content: 

/** 

 * Sets the MO:DCA interchange set to use

 * @param interchangeSet the MO:DCA interchange set

 */

public void setInterchangeSet(InterchangeSet interchangeSet){

  this.interchangeSet=interchangeSet;

}

Location: DataStream.java

Content: 

/** 

 * Start a new overlay. When processing has finished on the current overlay, the  {@link #endOverlay()}method must be invoked to mark the overlay ending.

 * @param x the x position of the overlay on the page

 * @param y the y position of the overlay on the page

 * @param width the width of the overlay

 * @param height the height of the overlay

 * @param widthRes the width resolution of the overlay

 * @param heightRes the height resolution of the overlay

 * @param overlayRotation the rotation of the overlay

 */

public void startOverlay(int x,int y,int width,int height,int widthRes,int heightRes,int overlayRotation){

  this.currentOverlay=factory.createOverlay(width,height,widthRes,heightRes,overlayRotation);

  String overlayName=currentOverlay.getName();

  currentPageObject.createIncludePageOverlay(overlayName,x,y,0);

  currentPage=currentOverlay;

}

Location: DataStream.java

Content: 

/** 

 * Start a new page group. When processing has finished on the current page group the  {@link #endPageGroup()}method must be invoked to mark the page group ending.

 * @throws IOException thrown if an I/O exception of some sort has occurred

 */

public void startPageGroup() throws IOException {

  endPageGroup();

  this.currentPageGroup=factory.createPageGroup();

}

Location: DataStream.java

Content: 

/** 

 * Start a new page. When processing has finished on the current page, the {@link #endPage()}method must be invoked to mark the page ending.

 * @param pageWidth the width of the page

 * @param pageHeight the height of the page

 * @param pageRotation the rotation of the page

 * @param pageWidthRes the width resolution of the page

 * @param pageHeightRes the height resolution of the page

 */

public void startPage(int pageWidth,int pageHeight,int pageRotation,int pageWidthRes,int pageHeightRes){

  currentPageObject=factory.createPage(pageWidth,pageHeight,pageRotation,pageWidthRes,pageHeightRes);

  currentPage=currentPageObject;

  currentOverlay=null;

}

