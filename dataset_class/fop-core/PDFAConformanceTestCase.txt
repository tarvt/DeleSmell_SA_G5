Location: PDFAConformanceTestCase.java

Content: 

/** 

 * create an FOUserAgent for our tests

 * @return an initialized FOUserAgent

 */

protected FOUserAgent getUserAgent(){

  final FOUserAgent userAgent=fopFactory.newFOUserAgent();

  userAgent.getRendererOptions().put("pdf-a-mode","PDF/A-1b");

  return userAgent;

}

Location: PDFAConformanceTestCase.java

Content: 

public PDFAConformanceTestCase() throws SAXException, IOException {

  super(getDefaultConfFile());

}

Location: PDFAConformanceTestCase.java

Content: 

private EventChecker setupEventChecker(FOUserAgent ua,String expectedEvent){

  Map<String,Object> params=new HashMap<String,Object>();

  params.put("pdfProfile",PDFAMode.PDFA_1B);

  EventChecker eventChecker=new EventChecker(SVGEventProducer.class.getName() + "." + expectedEvent,params);

  ua.getEventBroadcaster().addEventListener(eventChecker);

  return eventChecker;

}

Location: PDFAConformanceTestCase.java

Content: 

@Test public void svgContainingBitmapWithTransparency() throws Exception {

  FOUserAgent ua=getUserAgent();

  EventChecker eventChecker=setupEventChecker(ua,"bitmapWithTransparency");

  File foFile=new File(foBaseDir,"svg-with-transparent-image.fo");

  convertFO(foFile,ua,dumpPDF);

  eventChecker.end();

}

Location: PDFAConformanceTestCase.java

Content: 

@Test public void svgTransparency() throws Exception {

  FOUserAgent ua=getUserAgent();

  EventChecker eventChecker=setupEventChecker(ua,"transparencyIgnored");

  File foFile=new File(foBaseDir,"svg-transparency.fo");

  convertFO(foFile,ua,dumpPDF);

  eventChecker.end();

}

Location: PDFAConformanceTestCase.java

Content: 

/** 

 * Test exception when PDF/A-1 is enabled and everything is as it should.

 * @throws Exception if the test fails

 */

@Test public void testAllOk() throws Exception {

  File foFile=new File(foBaseDir,"minimal-pdf-a.fo");

  convertFO(foFile,getUserAgent(),dumpPDF);

}

Location: PDFAConformanceTestCase.java

Content: 

@Test public void testAttachment() throws Exception {

  File foFile=new File(foBaseDir,"with-attachment.fo");

  try {

    convertFO(foFile,getUserAgent(),dumpPDF);

    fail("Expected PDFConformanceException. PDF/A-1 does not allow attachments.");

  }

 catch (  PDFConformanceException e) {

  }

  FOUserAgent ua=getUserAgent();

  ua.getRendererOptions().put("pdf-a-mode","PDF/A-3a");

  convertFO(foFile,ua,dumpPDF);

}

Location: PDFAConformanceTestCase.java

Content: 

/** 

 * Test exception when PDF/A-1 is enabled and a font is used which is not embedded.

 * @throws Exception if the test fails

 */

@Test public void testFontNotEmbedded() throws Exception {

  File foFile=new File(foBaseDir,"base14-font.fo");

  try {

    convertFO(foFile,getUserAgent(),dumpPDF);

    fail("Expected PDFConformanceException. PDF/A-1 wants all fonts embedded.");

  }

 catch (  PDFConformanceException e) {

  }

}

Location: PDFAConformanceTestCase.java

Content: 

/** 

 * Test exception when PDF/A-1 is enabled and images.

 * @throws Exception if the test fails

 */

@Test public void testImages() throws Exception {

  File foFile=new File(foBaseDir,"with-rgb-images.fo");

  convertFO(foFile,getUserAgent(),dumpPDF);

  foFile=new File(foBaseDir,"with-cmyk-images.fo");

  try {

    convertFO(foFile,getUserAgent(),dumpPDF);

    fail("Expected PDFConformanceException." + " PDF/A-1 does not allow mixing DeviceRGB and DeviceCMYK.");

  }

 catch (  PDFConformanceException e) {

  }

}

Location: PDFAConformanceTestCase.java

Content: 

/** 

 * Test exception when PDF/A-1 is enabled together with encryption.

 * @throws Exception if the test fails

 */

@Test(expected=PDFConformanceException.class) public void testNoEncryption() throws Exception {

  final FOUserAgent ua=getUserAgent();

  ua.getRendererOptions().put("owner-password","mypassword");

  File foFile=new File(foBaseDir,"minimal-pdf-a.fo");

  convertFO(foFile,ua,dumpPDF);

}

