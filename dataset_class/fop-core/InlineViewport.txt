Location: InlineViewport.java

Content: 

/** 

 * {@inheritDoc} 

 */

public Rectangle getClipRectangle(){

  if (clip) {

    return new Rectangle(getIPD(),getBPD());

  }

 else {

    return null;

  }

}

Location: InlineViewport.java

Content: 

/** 

 * Get the position and size of the content of this viewport.

 * @return the position and size to place the content

 */

public Rectangle2D getContentPosition(){

  return this.contentPosition;

}

Location: InlineViewport.java

Content: 

/** 

 * {@inheritDoc} 

 */

public boolean hasClip(){

  return this.clip;

}

Location: InlineViewport.java

Content: 

/** 

 * Create a new viewport area with the content area.

 * @param child the child content area of this viewport

 */

public InlineViewport(Area child){

  this(child,-1);

}

Location: InlineViewport.java

Content: 

/** 

 * Create a new viewport area with the content area.

 * @param child the child content area of this viewport

 * @param bidiLevel the bidirectional embedding level (or -1 if not defined)

 */

public InlineViewport(Area child,int bidiLevel){

  super(0,bidiLevel);

  this.content=child;

}

Location: InlineViewport.java

Content: 

/** 

 * Set the clip of this viewport.

 * @param c true if this viewport should clip

 */

public void setClip(boolean c){

  this.clip=c;

}

Location: InlineViewport.java

Content: 

/** 

 * Set the position and size of the content of this viewport.

 * @param cp the position and size to place the content

 */

public void setContentPosition(Rectangle2D cp){

  this.contentPosition=cp;

}

Location: InlineViewport.java

Content: 

/** 

 * Sets the content area.

 * @param content the content area

 */

public void setContent(Area content){

  this.content=content;

}

Location: InlineViewport.java

Content: 

private void writeObject(java.io.ObjectOutputStream out) throws IOException {

  out.writeBoolean(contentPosition != null);

  if (contentPosition != null) {

    out.writeFloat((float)contentPosition.getX());

    out.writeFloat((float)contentPosition.getY());

    out.writeFloat((float)contentPosition.getWidth());

    out.writeFloat((float)contentPosition.getHeight());

  }

  out.writeBoolean(clip);

  out.writeObject((TreeMap)traits);

  out.writeObject(content);

}

