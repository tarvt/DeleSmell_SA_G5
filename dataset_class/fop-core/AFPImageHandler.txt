Location: AFPImageHandler.java

Content: 

/** 

 * Creates and returns an  {@link AFPObjectAreaInfo} instance for the placement of the image.

 * @param paintingState the painting state

 * @param targetRect the target rectangle in which to place the image (coordinates in mpt)

 * @return the newly created object area info instance

 */

public static AFPObjectAreaInfo createObjectAreaInfo(AFPPaintingState paintingState,Rectangle targetRect){

  AFPUnitConverter unitConv=paintingState.getUnitConverter();

  int[] coords=unitConv.mpts2units(new float[]{targetRect.x,targetRect.y});

  int width=(int)Math.ceil(unitConv.mpt2units(targetRect.width));

  int height=(int)Math.ceil(unitConv.mpt2units(targetRect.height));

  int resolution=paintingState.getResolution();

  AFPObjectAreaInfo objectAreaInfo=new AFPObjectAreaInfo(coords[X],coords[Y],width,height,resolution,paintingState.getRotation());

  return objectAreaInfo;

}

Location: AFPImageHandler.java

Content: 

/** 

 * Sets resource information on the data object info.

 * @param uri the image's URI (or null if no URI is available)

 * @param foreignAttributes a Map of foreign attributes (or null)

 * @return the resource information object

 */

public static AFPResourceInfo createResourceInformation(String uri,Map foreignAttributes){

  AFPResourceInfo resourceInfo=FOREIGN_ATTRIBUTE_READER.getResourceInfo(foreignAttributes);

  resourceInfo.setUri(uri);

  return resourceInfo;

}

Location: AFPImageHandler.java

Content: 

/** 

 * Generates an intermediate AFPDataObjectInfo that is later used to construct the appropriate data object in the AFP DataStream.

 * @param rendererImageInfo the renderer image info

 * @return a data object info object

 * @throws IOException thrown if an I/O exception of some sort has occurred.

 */

public AFPDataObjectInfo generateDataObjectInfo(AFPRendererImageInfo rendererImageInfo) throws IOException {

  AFPDataObjectInfo dataObjectInfo=createDataObjectInfo();

  dataObjectInfo.setResourceInfo(createResourceInformation(rendererImageInfo.getURI(),rendererImageInfo.getForeignAttributes()));

  Point origin=rendererImageInfo.getOrigin();

  Rectangle2D position=rendererImageInfo.getPosition();

  int srcX=Math.round(origin.x + (float)position.getX());

  int srcY=Math.round(origin.y + (float)position.getY());

  Rectangle targetRect=new Rectangle(srcX,srcY,(int)Math.round(position.getWidth()),(int)Math.round(position.getHeight()));

  RendererContext context=rendererImageInfo.getRendererContext();

  assert (context instanceof AFPRendererContext);

  AFPRendererContext rendererContext=(AFPRendererContext)context;

  AFPInfo afpInfo=rendererContext.getInfo();

  AFPPaintingState paintingState=afpInfo.getPaintingState();

  dataObjectInfo.setObjectAreaInfo(createObjectAreaInfo(paintingState,targetRect));

  return dataObjectInfo;

}

