Location: GenerateBidiClass.java

Content: 

private static void addInterval(SortedSet intervals,int start,int end,int bidiClass){

  intervals.add(new Interval(start,end,bidiClass));

}

Location: GenerateBidiClass.java

Content: 

/** 

 * Generate a class managing bidi class properties for Unicode characters.

 * @param bidiFileName name (as URL) of file containing bidi type data

 * @param outFileName name of the output file

 * @throws Exception

 */

private static void convertBidiClassProperties(String bidiFileName,String outFileName) throws Exception {

  readBidiClassProperties(bidiFileName);

  PrintWriter out=new PrintWriter(new FileWriter(outFileName));

  License.writeJavaLicenseId(out);

  out.println();

  out.println("package org.apache.fop.complexscripts.bidi;");

  out.println();

  out.println("import java.util.Arrays;");

  out.println("import org.apache.fop.complexscripts.bidi.BidiConstants;");

  out.println();

  out.println("// CSOFF: WhitespaceAfterCheck");

  out.println("// CSOFF: LineLengthCheck");

  out.println();

  out.println("/*");

  out.println(" * !!! THIS IS A GENERATED FILE !!!");

  out.println(" * If updates to the source are needed, then:");

  out.println(" * - apply the necessary modifications to");

  out.println(" *   'src/codegen/unicode/java/org/apache/fop/complexscripts/bidi/GenerateBidiClass.java'");

  out.println(" * - run 'ant codegen-unicode', which will generate a new BidiClass.java");

  out.println(" *   in 'src/java/org/apache/fop/complexscripts/bidi'");

  out.println(" * - commit BOTH changed files");

  out.println(" */");

  out.println();

  out.println("/** Bidirectional class utilities. */");

  out.println("public final class BidiClass {");

  out.println();

  out.println("private BidiClass() {");

  out.println("}");

  out.println();

  dumpData(out);

  out.println("/**");

  out.println(" * Lookup bidi class for character expressed as unicode scalar value.");

  out.println(" * @param ch a unicode scalar value");

  out.println(" * @return bidi class");

  out.println(" */");

  out.println("public static int getBidiClass ( int ch ) {");

  out.println("  if ( ch <= 0x00FF ) {");

  out.println("    return bcL1 [ ch - 0x0000 ];");

  out.println("  } else if ( ( ch >= 0x0590 ) && ( ch <= 0x06FF ) ) {");

  out.println("    return bcR1 [ ch - 0x0590 ];");

  out.println("  } else {");

  out.println("    return getBidiClass ( ch, bcS1, bcE1, bcC1 );");

  out.println("  }");

  out.println("}");

  out.println();

  out.println("private static int getBidiClass ( int ch, int[] sa, int[] ea, byte[] ca ) {");

  out.println("  int k = Arrays.binarySearch ( sa, ch );");

  out.println("  if ( k >= 0 ) {");

  out.println("    return ca [ k ];");

  out.println("  } else {");

  out.println("    k = - ( k + 1 );");

  out.println("    if ( k == 0 ) {");

  out.println("      return BidiConstants.L;");

  out.println("    } else if ( ch <= ea [ k - 1 ] ) {");

  out.println("      return ca [ k - 1 ];");

  out.println("    } else {");

  out.println("      return BidiConstants.L;");

  out.println("    }");

  out.println("  }");

  out.println("}");

  out.println();

  out.println("}");

  out.flush();

  out.close();

}

Location: GenerateBidiClass.java

Content: 

private static void dumpData(PrintWriter out){

  boolean first;

  StringBuffer sb=new StringBuffer();

  first=true;

  sb.setLength(0);

  out.println("private static byte[] bcL1 = {");

  for (int i=0; i < bcL1.length; i++) {

    if (!first) {

      sb.append(",");

    }

 else {

      first=false;

    }

    sb.append(bcL1[i]);

    if (sb.length() > 120) {

      sb.append(',');

      out.println(sb);

      first=true;

      sb.setLength(0);

    }

  }

  if (sb.length() > 0) {

    out.println(sb);

  }

  out.println("};");

  out.println();

  first=true;

  sb.setLength(0);

  out.println("private static byte[] bcR1 = {");

  for (int i=0; i < bcR1.length; i++) {

    if (!first) {

      sb.append(",");

    }

 else {

      first=false;

    }

    sb.append(bcR1[i]);

    if (sb.length() > 120) {

      sb.append(',');

      out.println(sb);

      first=true;

      sb.setLength(0);

    }

  }

  if (sb.length() > 0) {

    out.println(sb);

  }

  out.println("};");

  out.println();

  first=true;

  sb.setLength(0);

  out.println("private static int[] bcS1 = {");

  for (int i=0; i < bcS1.length; i++) {

    if (!first) {

      sb.append(",");

    }

 else {

      first=false;

    }

    sb.append(bcS1[i]);

    if (sb.length() > 120) {

      sb.append(',');

      out.println(sb);

      first=true;

      sb.setLength(0);

    }

  }

  if (sb.length() > 0) {

    out.println(sb);

  }

  out.println("};");

  out.println();

  first=true;

  sb.setLength(0);

  out.println("private static int[] bcE1 = {");

  for (int i=0; i < bcE1.length; i++) {

    if (!first) {

      sb.append(",");

    }

 else {

      first=false;

    }

    sb.append(bcE1[i]);

    if (sb.length() > 120) {

      sb.append(',');

      out.println(sb);

      first=true;

      sb.setLength(0);

    }

  }

  if (sb.length() > 0) {

    out.println(sb);

  }

  out.println("};");

  out.println();

  first=true;

  sb.setLength(0);

  out.println("private static byte[] bcC1 = {");

  for (int i=0; i < bcC1.length; i++) {

    if (!first) {

      sb.append(",");

    }

 else {

      first=false;

    }

    sb.append(bcC1[i]);

    if (sb.length() > 120) {

      sb.append(',');

      out.println(sb);

      first=true;

      sb.setLength(0);

    }

  }

  if (sb.length() > 0) {

    out.println(sb);

  }

  out.println("};");

  out.println();

}

Location: GenerateBidiClass.java

Content: 

private GenerateBidiClass(){

}

Location: GenerateBidiClass.java

Content: 

private static int[] parseInterval(String interval) throws Exception {

  int s;

  int e;

  String[] fa=interval.split("\\.\\.");

  if (fa.length == 1) {

    s=Integer.parseInt(fa[0],16);

    e=s;

  }

 else   if (fa.length == 2) {

    s=Integer.parseInt(fa[0],16);

    e=Integer.parseInt(fa[1],16);

  }

 else {

    throw new Exception("bad interval syntax: " + interval);

  }

  if (e < s) {

    throw new Exception("bad interval, start must be less than or equal to end: " + interval);

  }

  return new int[]{s,e};

}

Location: GenerateBidiClass.java

Content: 

/** 

 * Read bidi class property data.

 * @param bidiFileName name (as URL) of bidi type data

 */

private static void readBidiClassProperties(String bidiFileName) throws Exception {

  BufferedReader b=new BufferedReader(new InputStreamReader(new URL(bidiFileName).openStream()));

  String line;

  int lineNumber=0;

  TreeSet intervals=new TreeSet();

  while ((line=b.readLine()) != null) {

    lineNumber++;

    if (line.startsWith("#")) {

      continue;

    }

 else     if (line.length() == 0) {

      continue;

    }

 else {

      if (line.indexOf("#") != -1) {

        line=(line.split("#"))[0];

      }

      String[] fa=line.split(";");

      if (fa.length == 2) {

        int[] interval=parseInterval(fa[0].trim());

        byte bidiClass=(byte)parseBidiClass(fa[1].trim());

        if (interval[1] == interval[0]) {

          int c=interval[0];

          if (c <= 0x00FF) {

            if (bcL1[c - 0x0000] == 0) {

              bcL1[c - 0x0000]=bidiClass;

            }

 else {

              throw new Exception("duplicate singleton entry: " + c);

            }

          }

 else           if ((c >= 0x0590) && (c <= 0x06FF)) {

            if (bcR1[c - 0x0590] == 0) {

              bcR1[c - 0x0590]=bidiClass;

            }

 else {

              throw new Exception("duplicate singleton entry: " + c);

            }

          }

 else {

            addInterval(intervals,c,c,bidiClass);

          }

        }

 else {

          int s=interval[0];

          int e=interval[1];

          if (s <= 0x00FF) {

            for (int i=s; i <= e; i++) {

              if (i <= 0x00FF) {

                if (bcL1[i - 0x0000] == 0) {

                  bcL1[i - 0x0000]=bidiClass;

                }

 else {

                  throw new Exception("duplicate singleton entry: " + i);

                }

              }

 else {

                addInterval(intervals,i,e,bidiClass);

                break;

              }

            }

          }

 else           if ((s >= 0x0590) && (s <= 0x06FF)) {

            for (int i=s; i <= e; i++) {

              if (i <= 0x06FF) {

                if (bcR1[i - 0x0590] == 0) {

                  bcR1[i - 0x0590]=bidiClass;

                }

 else {

                  throw new Exception("duplicate singleton entry: " + i);

                }

              }

 else {

                addInterval(intervals,i,e,bidiClass);

                break;

              }

            }

          }

 else {

            addInterval(intervals,s,e,bidiClass);

          }

        }

      }

 else {

        throw new Exception("bad syntax, line(" + lineNumber + "): "+ line);

      }

    }

  }

  int ivIndex=0;

  int niv=intervals.size();

  bcS1=new int[niv];

  bcE1=new int[niv];

  bcC1=new byte[niv];

  for (Iterator it=intervals.iterator(); it.hasNext(); ivIndex++) {

    Interval iv=(Interval)it.next();

    bcS1[ivIndex]=iv.start;

    bcE1[ivIndex]=iv.end;

    bcC1[ivIndex]=(byte)iv.bidiClass;

  }

  test();

}

