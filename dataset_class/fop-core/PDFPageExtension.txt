Location: PDFPageExtension.java

Content: 

/** 

 * Determine if page dictionary and page number matches.

 * @param pageNumber page number, where first page number is 1

 * @return true if this dictionary is a page dictionary and specified page number matches specified page-number property

 */

public boolean matchesPageNumber(int pageNumber){

  String pageNumbers=getProperty(PROPERTY_PAGE_NUMBERS);

  if ((pageNumbers == null) || (pageNumbers.length() == 0)) {

    return false;

  }

 else   if (pageNumbers.equals("*")) {

    return true;

  }

 else {

    for (    String interval : pageNumbers.split("\\s*,\\s*")) {

      String[] components=interval.split("\\s*-\\s*");

      if (components.length < 1) {

        continue;

      }

 else {

        try {

          int start=Integer.parseInt(components[0]);

          int end=0;

          if (components.length > 1) {

            if (!components[1].equals("LAST")) {

              end=Integer.parseInt(components[1]);

            }

          }

          if ((end == 0) && (pageNumber == start)) {

            return true;

          }

 else           if ((end > start) && (pageNumber >= start) && (pageNumber < end)) {

            return true;

          }

 else {

            continue;

          }

        }

 catch (        NumberFormatException e) {

          continue;

        }

      }

    }

  }

  return false;

}

Location: PDFPageExtension.java

Content: 

PDFPageExtension(){

  super(PDFDictionaryType.Page);

}

