Location: InternalResourceResolver.java

Content: 

/** 

 * Performs some sanitation for some of the most common URI syntax mistakes but returns a directory URI rather than a file URI.

 * @param base the directory URI in String form

 * @return the directory URI

 * @throws URISyntaxException if the given String was too erroneous to validate

 */

public static URI getBaseURI(String base) throws URISyntaxException {

  String path=base + (base.endsWith("/") ? "" : "/");

  return cleanURI(path);

}

Location: InternalResourceResolver.java

Content: 

/** 

 * Returns the OutputStream for a given URI.

 * @param uri the URI for the inteded stream

 * @return the output stream

 * @throws IOException if an I/O error occurrred

 */

public OutputStream getOutputStream(URI uri) throws IOException {

  return resourceResolver.getOutputStream(resolveFromBase(uri));

}

Location: InternalResourceResolver.java

Content: 

/** 

 * Retrieve a resource given a URI in String form.

 * @param uri the resource URI

 * @return the resource

 * @throws IOException if an I/O error occurred

 */

public Resource getResource(URI uri) throws IOException {

  if (uri.getScheme() != null && uri.getScheme().startsWith("data")) {

    return new Resource(resolveDataURI(uri.toASCIIString()));

  }

  return resourceResolver.getResource(resolveFromBase(uri));

}

Location: InternalResourceResolver.java

Content: 

/** 

 * @param baseUri the base URI from which to resolve relative URIs

 * @param resourceResolver the resolver to delegate to

 */

InternalResourceResolver(URI baseUri,ResourceResolver resourceResolver){

  this.baseUri=baseUri;

  this.resourceResolver=resourceResolver;

}

Location: InternalResourceResolver.java

Content: 

private InputStream resolveDataURI(String dataURI){

  try {

    Source src=dataSchemeResolver.resolve(dataURI,"");

    return src == null ? null : ((StreamSource)src).getInputStream();

  }

 catch (  TransformerException e) {

    throw new RuntimeException(e);

  }

}

