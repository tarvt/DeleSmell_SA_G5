Location: ColorWithFallback.java

Content: 

/** 

 * Copy constructor adding a fallback color.

 * @param color the color to be duplicated

 * @param fallback the fallback color (usually an sRGB color)

 */

public ColorWithFallback(Color color,Color fallback){

  this(color.getColorSpace(),color.getColorComponents(null),getAlphaFloat(color),getAlternativeColors(color),fallback);

}

Location: ColorWithFallback.java

Content: 

/** 

 * Creates a new color

 * @param cspace the color space of the primary color

 * @param components the color components

 * @param alpha the alpha component

 * @param alternativeColors the array of alternative colors if applicable (may be null)

 * @param fallback the fallback color (usually an sRGB color)

 */

public ColorWithFallback(ColorSpace cspace,float[] components,float alpha,Color[] alternativeColors,Color fallback){

  super(cspace,components,alpha,alternativeColors);

  this.fallback=fallback;

}

Location: ColorWithFallback.java

Content: 

private static float getAlphaFloat(Color color){

  float[] comps=color.getComponents(null);

  return comps[comps.length - 1];

}

Location: ColorWithFallback.java

Content: 

private static Color[] getAlternativeColors(Color color){

  if (color instanceof ColorWithAlternatives) {

    ColorWithAlternatives cwa=(ColorWithAlternatives)color;

    if (cwa.hasAlternativeColors()) {

      return cwa.getAlternativeColors();

    }

  }

  return null;

}

Location: ColorWithFallback.java

Content: 

/** 

 * Returns the fallback color.

 * @return the fallback color

 */

public Color getFallbackColor(){

  return this.fallback;

}

