Location: SingleByteFont.java

Content: 

/** 

 * Makes all unencoded characters available through additional encodings. This method is used in cases where the fonts need to be encoded in the target format before all text of the document is processed (for example in PostScript when resource optimization is disabled).

 */

public void encodeAllUnencodedCharacters(){

  if (this.unencodedCharacters != null) {

    Set<Character> sortedKeys=new TreeSet<Character>(this.unencodedCharacters.keySet());

    for (    Character ch : sortedKeys) {

      char mapped=mapChar(ch);

      assert mapped != Typeface.NOT_FOUND;

    }

  }

}

Location: SingleByteFont.java

Content: 

/** 

 * Lookup a character using its alternative names. If found, cache it so we can speed up lookups.

 * @param c the character

 * @return the suggested alternative character present in the font

 */

private char findAlternative(char c){

  char d;

  if (alternativeCodes == null) {

    alternativeCodes=new java.util.HashMap<Character,Character>();

  }

 else {

    Character alternative=alternativeCodes.get(c);

    if (alternative != null) {

      return alternative;

    }

  }

  String charName=Glyphs.charToGlyphName(c);

  String[] charNameAlternatives=Glyphs.getCharNameAlternativesFor(charName);

  if (charNameAlternatives != null && charNameAlternatives.length > 0) {

    for (    String charNameAlternative : charNameAlternatives) {

      if (log.isDebugEnabled()) {

        log.debug("Checking alternative for char " + c + " (charname="+ charName+ "): "+ charNameAlternative);

      }

      String s=Glyphs.getUnicodeSequenceForGlyphName(charNameAlternative);

      if (s != null) {

        d=lookupChar(s.charAt(0));

        if (d != SingleByteEncoding.NOT_FOUND_CODE_POINT) {

          alternativeCodes.put(c,d);

          return d;

        }

      }

    }

  }

  return SingleByteEncoding.NOT_FOUND_CODE_POINT;

}

Location: SingleByteFont.java

Content: 

/** 

 * Returns an array with the widths for an additional encoding.

 * @param index the index of the additional encoding

 * @return the width array

 */

public int[] getAdditionalWidths(int index){

  SimpleSingleByteEncoding enc=getAdditionalEncoding(index);

  int[] arr=new int[enc.getLastChar() - enc.getFirstChar() + 1];

  for (int i=0, c=arr.length; i < c; i++) {

    NamedCharacter nc=enc.getCharacterForIndex(enc.getFirstChar() + i);

    UnencodedCharacter uc=this.unencodedCharacters.get(nc.getSingleUnicodeValue());

    arr[i]=uc.getWidth();

  }

  return arr;

}

Location: SingleByteFont.java

Content: 

/** 

 * Returns the version of the PostScript table stored in the TrueType font represented by this instance.

 * @return the version of the post table

 */

public PostScriptVersion getTrueTypePostScriptVersion(){

  assert getFontType() == FontType.TRUETYPE;

  return ttPostScriptVersion;

}

Location: SingleByteFont.java

Content: 

public char getUnicodeFromSelector(int selector){

  return getUnicode(selector);

}

Location: SingleByteFont.java

Content: 

private boolean isSubset(){

  return getEmbeddingMode() == EmbeddingMode.SUBSET;

}

Location: SingleByteFont.java

Content: 

/** 

 * Indicates whether this font is configured to use its native encoding. This method is used to determine whether the font needs to be re-encoded.

 * @return true if the font uses its native encoding.

 */

public boolean isUsingNativeEncoding(){

  return this.useNativeEncoding;

}

Location: SingleByteFont.java

Content: 

private char lookupChar(char c){

  char d=mapping.mapChar(c);

  if (d != SingleByteEncoding.NOT_FOUND_CODE_POINT) {

    return d;

  }

  d=mapUnencodedChar(c);

  return d;

}

Location: SingleByteFont.java

Content: 

public void setBoundingBox(int index,Rectangle bbox){

  if (this.boundingBoxes == null) {

    this.boundingBoxes=new Rectangle[getLastChar() - getFirstChar() + 1];

  }

  this.boundingBoxes[index - getFirstChar()]=bbox;

}

Location: SingleByteFont.java

Content: 

/** 

 * Sets the encoding of the font.

 * @param encoding the encoding information

 */

public void setEncoding(CodePointMapping encoding){

  this.mapping=encoding;

}

Location: SingleByteFont.java

Content: 

/** 

 * Sets the version of the PostScript table stored in the TrueType font represented by this instance.

 * @param version version of the post table

 */

public void setTrueTypePostScriptVersion(PostScriptVersion version){

  ttPostScriptVersion=version;

}

Location: SingleByteFont.java

Content: 

/** 

 * Controls whether the font is configured to use its native encoding or if it may need to be re-encoded for the target format.

 * @param value true indicates that the configured encoding is the font's native encoding

 */

public void setUseNativeEncoding(boolean value){

  this.useNativeEncoding=value;

}

Location: SingleByteFont.java

Content: 

/** 

 * Sets a width for a character.

 * @param index index of the character

 * @param w the width of the character

 */

public void setWidth(int index,int w){

  if (this.width == null) {

    this.width=new int[getLastChar() - getFirstChar() + 1];

  }

  this.width[index - getFirstChar()]=w;

}

Location: SingleByteFont.java

Content: 

public SingleByteFont(InternalResourceResolver resourceResolver){

  super(resourceResolver);

  setEncoding(CodePointMapping.WIN_ANSI_ENCODING);

}

Location: SingleByteFont.java

Content: 

public SingleByteFont(InternalResourceResolver resourceResolver,EmbeddingMode embeddingMode){

  this(resourceResolver);

  setEmbeddingMode(embeddingMode);

  if (embeddingMode != EmbeddingMode.FULL) {

    usedGlyphNames=new LinkedHashMap<Integer,String>();

    usedGlyphs=new HashMap<Integer,Integer>();

    usedCharsIndex=new HashMap<Integer,Character>();

    charGIDMappings=new HashMap<Character,Integer>();

    usedGlyphs.put(0,0);

    usedGlyphsCount++;

  }

}

Location: SingleByteFont.java

Content: 

/** 

 * Updates the mapping variable based on the encoding.

 * @param encoding the name of the encoding

 */

protected void updateMapping(String encoding){

  try {

    this.mapping=CodePointMapping.getMapping(encoding);

  }

 catch (  UnsupportedOperationException e) {

    log.error("Font '" + super.getFontName() + "': "+ e.getMessage());

  }

}

