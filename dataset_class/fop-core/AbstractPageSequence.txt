Location: AbstractPageSequence.java

Content: 

/** 

 * Create an AbstractPageSequence that is a child of the given parent  {@link FONode}.

 * @param parent the parent {@link FONode}

 */

public AbstractPageSequence(FONode parent){

  super(parent);

}

Location: AbstractPageSequence.java

Content: 

/** 

 * Get the value of the <code>force-page-count</code> property.

 * @return the force-page-count value

 */

public int getForcePageCount(){

  return forcePageCount;

}

Location: AbstractPageSequence.java

Content: 

/** 

 * Get the value of the <code>initial-page-number</code> property.

 * @return the initial-page-number property value

 */

public Numeric getInitialPageNumber(){

  return initialPageNumber;

}

Location: AbstractPageSequence.java

Content: 

/** 

 * Get the starting page number for this page sequence.

 * @return the starting page number

 */

public int getStartingPageNumber(){

  return startingPageNumber;

}

Location: AbstractPageSequence.java

Content: 

/** 

 * Initialize the current page number for the start of the page sequence.

 */

public void initPageNumber(){

  int pageNumberType=0;

  if (initialPageNumber.getEnum() != 0) {

    startingPageNumber=getRoot().getEndingPageNumberOfPreviousSequence() + 1;

    pageNumberType=initialPageNumber.getEnum();

    if (pageNumberType == EN_AUTO_ODD) {

      if (startingPageNumber % 2 == 0) {

        startingPageNumber++;

      }

    }

 else     if (pageNumberType == EN_AUTO_EVEN) {

      if (startingPageNumber % 2 != 0) {

        startingPageNumber++;

      }

    }

  }

 else {

    int pageStart=initialPageNumber.getValue();

    startingPageNumber=(pageStart > 0) ? pageStart : 1;

  }

}

