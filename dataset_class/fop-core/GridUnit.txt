Location: GridUnit.java

Content: 

/** 

 * Returns the resolved border-after of this grid unit, in the collapsing-border model.

 * @param which one of {@link ConditionalBorder#NORMAL}, {@link ConditionalBorder#LEADING_TRAILING} or {@link ConditionalBorder#REST}

 * @return the corresponding border

 */

public BorderInfo getBorderAfter(int which){

switch (which) {

case ConditionalBorder.NORMAL:

    return borderAfter.normal.getBorderInfo();

case ConditionalBorder.LEADING_TRAILING:

  return borderAfter.leadingTrailing.getBorderInfo();

case ConditionalBorder.REST:

return borderAfter.rest.getBorderInfo();

default :

assert false;

return null;

}

}

Location: GridUnit.java

Content: 

/** 

 * Returns the resolved border-before of this grid unit, in the collapsing-border model.

 * @param which one of {@link ConditionalBorder#NORMAL}, {@link ConditionalBorder#LEADING_TRAILING} or {@link ConditionalBorder#REST}

 * @return the corresponding border

 */

public BorderInfo getBorderBefore(int which){

switch (which) {

case ConditionalBorder.NORMAL:

    return borderBefore.normal.getBorderInfo();

case ConditionalBorder.LEADING_TRAILING:

  return borderBefore.leadingTrailing.getBorderInfo();

case ConditionalBorder.REST:

return borderBefore.rest.getBorderInfo();

default :

assert false;

return null;

}

}

Location: GridUnit.java

Content: 

/** 

 * Returns the resolved border-end of this grid unit, in the collapsing-border model.

 * @return the corresponding border

 */

public BorderInfo getBorderEnd(){

  return borderEnd.getBorderInfo();

}

Location: GridUnit.java

Content: 

/** 

 * Returns the resolved border-start of this grid unit, in the collapsing-border model.

 * @return the corresponding border

 */

public BorderInfo getBorderStart(){

  return borderStart.getBorderInfo();

}

Location: GridUnit.java

Content: 

/** 

 * Returns the table cell associated with this grid unit.

 * @return the table cell

 */

public TableCell getCell(){

  return cell;

}

Location: GridUnit.java

Content: 

/** 

 * @return the index of the grid unit inside a cell in column direction

 */

public int getColSpanIndex(){

  return colSpanIndex;

}

Location: GridUnit.java

Content: 

/** 

 * @return the index of the grid unit inside a cell in row direction

 */

public int getRowSpanIndex(){

  return rowSpanIndex;

}

Location: GridUnit.java

Content: 

private GridUnit(int colSpanIndex,int rowSpanIndex){

  this.colSpanIndex=colSpanIndex;

  this.rowSpanIndex=rowSpanIndex;

}

Location: GridUnit.java

Content: 

/** 

 * Creates a new grid unit.

 * @param primary the before-start grid unit of the cell containing this grid unit

 * @param colSpanIndex index of this grid unit in the span, in column direction

 * @param rowSpanIndex index of this grid unit in the span, in row direction

 */

GridUnit(PrimaryGridUnit primary,int colSpanIndex,int rowSpanIndex){

  this(primary.getCell(),colSpanIndex,rowSpanIndex);

  this.primary=primary;

}

Location: GridUnit.java

Content: 

/** 

 * Creates a new grid unit.

 * @param cell table cell which occupies this grid unit

 * @param colSpanIndex index of this grid unit in the span, in column direction

 * @param rowSpanIndex index of this grid unit in the span, in row direction

 */

protected GridUnit(TableCell cell,int colSpanIndex,int rowSpanIndex){

  this(colSpanIndex,rowSpanIndex);

  this.cell=cell;

  setBorders(cell.getTable());

}

Location: GridUnit.java

Content: 

/** 

 * Creates a new grid unit.

 * @param table the containing table

 * @param colSpanIndex index of this grid unit in the span, in column direction

 * @param rowSpanIndex index of this grid unit in the span, in row direction

 */

protected GridUnit(Table table,int colSpanIndex,int rowSpanIndex){

  this(colSpanIndex,rowSpanIndex);

  setBorders(table);

}

Location: GridUnit.java

Content: 

/** 

 * For the given side, integrates in the conflict resolution the given border segment.

 * @param side the side to consider (one of CommonBorderPaddingBackground.START|END)

 * @param segment a border specification to integrate at the given side

 */

void integrateBorderSegment(int side,BorderSpecification segment){

switch (side) {

case CommonBorderPaddingBackground.START:

    borderStart=collapsingBorderModel.determineWinner(borderStart,segment);

  break;

case CommonBorderPaddingBackground.END:

borderEnd=collapsingBorderModel.determineWinner(borderEnd,segment);

break;

default :

assert false;

}

}

Location: GridUnit.java

Content: 

/** 

 * For the given side, integrates in the conflict resolution the border segment of the given parent element.

 * @param side the side to consider (one ofCommonBorderPaddingBackground.BEFORE|AFTER|START|END)

 * @param parent a table element whose corresponding border coincides on the given side

 */

void integrateBorderSegment(int side,TableFObj parent){

switch (side) {

case CommonBorderPaddingBackground.BEFORE:

case CommonBorderPaddingBackground.AFTER:

    integrateBorderSegment(side,parent,true,true,true);

  break;

case CommonBorderPaddingBackground.START:

borderStart=collapsingBorderModel.determineWinner(borderStart,parent.borderStart);

break;

case CommonBorderPaddingBackground.END:

borderEnd=collapsingBorderModel.determineWinner(borderEnd,parent.borderEnd);

break;

default :

assert false;

}

}

Location: GridUnit.java

Content: 

/** 

 * For the given side, integrates in the conflict resolution the border segment of the given parent element.

 * @param side the side to consider (either CommonBorderPaddingBackground.BEFORE orAFTER)

 * @param parent a table element whose corresponding border coincides on the givenside

 */

void integrateBorderSegment(int side,TableFObj parent,boolean withNormal,boolean withLeadingTrailing,boolean withRest){

switch (side) {

case CommonBorderPaddingBackground.BEFORE:

    borderBefore.integrateSegment(parent.borderBefore,withNormal,withLeadingTrailing,withRest);

  break;

case CommonBorderPaddingBackground.AFTER:

borderAfter.integrateSegment(parent.borderAfter,withNormal,withLeadingTrailing,withRest);

break;

default :

assert false;

}

}

Location: GridUnit.java

Content: 

void integrateCompetingBorder(int side,ConditionalBorder competitor,boolean withNormal,boolean withLeadingTrailing,boolean withRest){

switch (side) {

case CommonBorderPaddingBackground.BEFORE:

    borderBefore.integrateCompetingSegment(competitor,withNormal,withLeadingTrailing,withRest);

  break;

case CommonBorderPaddingBackground.AFTER:

borderAfter.integrateCompetingSegment(competitor,withNormal,withLeadingTrailing,withRest);

break;

default :

assert false;

}

}

Location: GridUnit.java

Content: 

/** 

 * Resolve collapsing borders for the given cell. Used in case of the collapsing border model.

 * @param other neighbouring grid unit

 * @param side the side to resolve (one ofCommonBorderPaddingBackground.BEFORE|AFTER|START|END)

 */

void resolveBorder(GridUnit other,int side){

switch (side) {

case CommonBorderPaddingBackground.BEFORE:

    borderBefore.resolve(other.borderAfter,true,false,false);

  break;

case CommonBorderPaddingBackground.AFTER:

borderAfter.resolve(other.borderBefore,true,false,false);

break;

case CommonBorderPaddingBackground.START:

BorderSpecification resolvedBorder=collapsingBorderModel.determineWinner(borderStart,other.borderEnd);

if (resolvedBorder != null) {

this.borderStart=resolvedBorder;

other.borderEnd=resolvedBorder;

}

break;

case CommonBorderPaddingBackground.END:

resolvedBorder=collapsingBorderModel.determineWinner(borderEnd,other.borderStart);

if (resolvedBorder != null) {

this.borderEnd=resolvedBorder;

other.borderStart=resolvedBorder;

}

break;

default :

assert false;

}

}

Location: GridUnit.java

Content: 

private void setBorders(Table table){

  if (!table.isSeparateBorderModel()) {

    collapsingBorderModel=CollapsingBorderModel.getBorderModelFor(table.getBorderCollapse());

    setBordersFromCell();

  }

}

Location: GridUnit.java

Content: 

/** 

 * Sets the given flag on this grid unit.

 * @param which the flag to set

 */

public void setFlag(int which){

  setFlag(which,true);

}

Location: GridUnit.java

Content: 

void setRow(TableRow row){

  this.row=row;

}

