Location: ImageConverterSVG2G2D.java

Content: 

/** 

 * {@inheritDoc} 

 */

public Image convert(final Image src,Map hints) throws ImageException {

  checkSourceFlavor(src);

  final ImageXMLDOM svg=(ImageXMLDOM)src;

  if (!SVGDOMImplementation.SVG_NAMESPACE_URI.equals(svg.getRootNamespace())) {

    throw new IllegalArgumentException("XML DOM is not in the SVG namespace: " + svg.getRootNamespace());

  }

  float pxToMillimeter=UnitConv.IN2MM / GraphicsConstants.DEFAULT_DPI;

  Number ptm=(Number)hints.get(ImageProcessingHints.SOURCE_RESOLUTION);

  if (ptm != null) {

    pxToMillimeter=(float)(UnitConv.IN2MM / ptm.doubleValue());

  }

  UserAgent ua=createBatikUserAgent(pxToMillimeter);

  GVTBuilder builder=new GVTBuilder();

  final ImageManager imageManager=(ImageManager)hints.get(ImageProcessingHints.IMAGE_MANAGER);

  final ImageSessionContext sessionContext=(ImageSessionContext)hints.get(ImageProcessingHints.IMAGE_SESSION_CONTEXT);

  boolean useEnhancedBridgeContext=(imageManager != null && sessionContext != null);

  final BridgeContext ctx=(useEnhancedBridgeContext ? new GenericFOPBridgeContext(ua,null,imageManager,sessionContext) : new BridgeContext(ua));

  Document doc=svg.getDocument();

  Document clonedDoc=BatikUtil.cloneSVGDocument(doc);

  final GraphicsNode root;

  try {

    root=builder.build(ctx,clonedDoc);

  }

 catch (  Exception e) {

    throw new ImageException("GVT tree could not be built for SVG graphic",e);

  }

  int width=svg.getSize().getWidthMpt();

  int height=svg.getSize().getHeightMpt();

  Dimension imageSize=new Dimension(width,height);

  Graphics2DImagePainter painter=createPainter(ctx,root,imageSize);

  ImageInfo imageInfo=src.getInfo();

  ImageGraphics2D g2dImage=new ImageGraphics2D(imageInfo,painter);

  return g2dImage;

}

Location: ImageConverterSVG2G2D.java

Content: 

/** 

 * Creates a user agent for Batik. Override to provide your own user agent.

 * @param pxToMillimeter the source resolution (in px per millimeter)

 * @return the newly created user agent

 */

protected SimpleSVGUserAgent createBatikUserAgent(float pxToMillimeter){

  return new SimpleSVGUserAgent(pxToMillimeter,new AffineTransform(),DefaultFontFamilyResolver.SINGLETON){

    /** 

 * {@inheritDoc} 

 */

    public void displayMessage(    String message){

      log.info(message);

    }

    /** 

 * {@inheritDoc} 

 */

    public void displayError(    Exception e){

      log.error("Error converting SVG to a Java2D graphic",e);

    }

    /** 

 * {@inheritDoc} 

 */

    public void displayError(    String message){

      log.error(message);

    }

  }

;

}

Location: ImageConverterSVG2G2D.java

Content: 

/** 

 * Creates a Graphics 2D image painter

 * @param ctx the bridge context

 * @param root the graphics node root

 * @param imageSize the image size

 * @return the newly created graphics 2d image painter

 */

protected Graphics2DImagePainter createPainter(BridgeContext ctx,GraphicsNode root,Dimension imageSize){

  return new Graphics2DImagePainterImpl(root,ctx,imageSize);

}

Location: ImageConverterSVG2G2D.java

Content: 

/** 

 * {@inheritDoc} 

 */

public ImageFlavor getSourceFlavor(){

  return XMLNamespaceEnabledImageFlavor.SVG_DOM;

}

Location: ImageConverterSVG2G2D.java

Content: 

/** 

 * {@inheritDoc} 

 */

public ImageFlavor getTargetFlavor(){

  return ImageFlavor.GRAPHICS2D;

}

