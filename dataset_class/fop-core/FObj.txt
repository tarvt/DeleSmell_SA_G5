Location: FObj.java

Content: 

/** 

 * Used by RetrieveMarker during Marker-subtree cloning

 * @param child     the (cloned) child node

 * @param parent    the (cloned) parent node

 * @throws FOPException when the child could not be added to the parent

 */

protected static void addChildTo(FONode child,FONode parent) throws FOPException {

  parent.addChildNode(child);

}

Location: FObj.java

Content: 

/** 

 * Add a new extension attachment to this FObj. (see org.apache.fop.fo.FONode for details)

 * @param attachment the attachment to add.

 */

void addExtensionAttachment(ExtensionAttachment attachment){

  if (attachment == null) {

    throw new NullPointerException("Parameter attachment must not be null");

  }

  if (extensionAttachments == null) {

    extensionAttachments=new java.util.ArrayList<ExtensionAttachment>();

  }

  if (log.isDebugEnabled()) {

    log.debug("ExtensionAttachment of category " + attachment.getCategory() + " added to "+ getName()+ ": "+ attachment);

  }

  extensionAttachments.add(attachment);

}

Location: FObj.java

Content: 

/** 

 * Adds a foreign attribute to this FObj.

 * @param attributeName the attribute name as a QName instance

 * @param value the attribute value

 */

public void addForeignAttribute(QName attributeName,String value){

  if (attributeName == null) {

    throw new NullPointerException("Parameter attributeName must not be null");

  }

  if (foreignAttributes == null) {

    foreignAttributes=new java.util.HashMap<QName,String>();

  }

  foreignAttributes.put(attributeName,value);

}

Location: FObj.java

Content: 

/** 

 * Add the marker to this formatting object. If this object can contain markers it checks that the marker has a unique class-name for this object and that it is the first child.

 * @param marker Marker to add.

 */

protected void addMarker(Marker marker){

  String mcname=marker.getMarkerClassName();

  if (firstChild != null) {

    for (FONodeIterator iter=getChildNodes(); iter.hasNext(); ) {

      FONode node=iter.next();

      if (node instanceof FObj || (node instanceof FOText && ((FOText)node).willCreateArea())) {

        getFOValidationEventProducer().markerNotInitialChild(this,getName(),mcname,locator);

        return;

      }

 else       if (node instanceof FOText) {

        iter.remove();

        notifyChildRemoval(node);

      }

    }

  }

  if (markers == null) {

    markers=new HashMap<String,Marker>();

  }

  if (!markers.containsKey(mcname)) {

    markers.put(mcname,marker);

  }

 else {

    getFOValidationEventProducer().markerNotUniqueForSameParent(this,getName(),mcname,locator);

  }

}

Location: FObj.java

Content: 

/** 

 * Setup the id for this formatting object. Most formatting objects can have an id that can be referenced. This methods checks that the id isn't already used by another FO

 * @param id    the id to check

 * @throws ValidationException if the ID is already defined elsewhere(strict validation only)

 */

private void checkId(String id) throws ValidationException {

  if (!inMarker() && !id.equals("")) {

    Set<String> idrefs=getBuilderContext().getIDReferences();

    if (!idrefs.contains(id)) {

      idrefs.add(id);

    }

 else {

      getFOValidationEventProducer().idNotUnique(this,getName(),id,true,locator);

    }

  }

}

Location: FObj.java

Content: 

/** 

 * Find the nearest parent, grandparent, etc. FONode that is also an FObj

 * @return FObj the nearest ancestor FONode that is an FObj

 */

public FObj findNearestAncestorFObj(){

  FONode par=parent;

  while (par != null && !(par instanceof FObj)) {

    par=par.parent;

  }

  return (FObj)par;

}

Location: FObj.java

Content: 

/** 

 * Create a new formatting object.

 * @param parent the parent node

 */

public FObj(FONode parent){

  super(parent);

  if (parent != null && parent instanceof FObj) {

    if (((FObj)parent).getIsOutOfLineFODescendant()) {

      isOutOfLineFODescendant=true;

    }

 else {

      int foID=getNameId();

      if (foID == FO_FLOAT || foID == FO_FOOTNOTE || foID == FO_FOOTNOTE_BODY) {

        isOutOfLineFODescendant=true;

      }

    }

  }

}

Location: FObj.java

Content: 

private String getAttributeNameForValue(Attributes attList,Property value,PropertyList propertyList) throws FOPException {

  for (int i=0; i < attList.getLength(); i++) {

    String attributeName=attList.getQName(i);

    String attributeValue=attList.getValue(i);

    Property prop=propertyList.getPropertyForAttribute(attList,attributeName,attributeValue);

    if (prop != null && prop.equals(value)) {

      return attributeName;

    }

  }

  return "unknown";

}

Location: FObj.java

Content: 

/** 

 * Obtain resolved bidirectional level of FO or nearest FO ancestor that has a resolved level.

 * @return either a non-negative bidi embedding level or -1in case no bidi levels have been assigned to this FO or any ancestor

 */

public int getBidiLevelRecursive(){

  for (FONode fn=this; fn != null; fn=fn.getParent()) {

    if (fn instanceof FObj) {

      int level=((FObj)fn).getBidiLevel();

      if (level >= 0) {

        return level;

      }

    }

    if (isBidiInheritanceBoundary()) {

      break;

    }

  }

  return -1;

}

Location: FObj.java

Content: 

/** 

 * @return the extension attachments of this FObj. 

 */

public List<ExtensionAttachment> getExtensionAttachments(){

  if (extensionAttachments == null) {

    return Collections.EMPTY_LIST;

  }

 else {

    return extensionAttachments;

  }

}

Location: FObj.java

Content: 

/** 

 * Returns Out Of Line FO Descendant indicator.

 * @return true if Out of Line FO or Out Of Line descendant, false otherwise

 */

boolean getIsOutOfLineFODescendant(){

  return isOutOfLineFODescendant;

}

Location: FObj.java

Content: 

/** 

 * @return the collection of Markers attached to this object

 */

public Map<String,Marker> getMarkers(){

  return markers;

}

Location: FObj.java

Content: 

/** 

 * Returns the PropertyMaker for a given property ID.

 * @param propId the property ID

 * @return the requested Property Maker

 */

public static PropertyMaker getPropertyMakerFor(int propId){

  return PROPERTY_LIST_TABLE[propId];

}

Location: FObj.java

Content: 

/** 

 * Indicates whether this formatting object has children.

 * @return true if there are children

 */

public boolean hasChildren(){

  return this.firstChild != null;

}

Location: FObj.java

Content: 

/** 

 * @return true if this FObj has extension attachments 

 */

public boolean hasExtensionAttachments(){

  return extensionAttachments != null;

}

Location: FObj.java

Content: 

/** 

 * @return whether this object has an layer set 

 */

public boolean hasLayer(){

  return (layer != null && layer.length() > 0);

}

Location: FObj.java

Content: 

/** 

 * @return true if there are any Markers attached to this object

 */

public boolean hasMarkers(){

  return markers != null && !markers.isEmpty();

}

Location: FObj.java

Content: 

private boolean isBidiInheritanceBoundary(){

  return isBidiBoundary(false);

}

Location: FObj.java

Content: 

private boolean isBidiPropagationBoundary(){

  return isBidiBoundary(true);

}

Location: FObj.java

Content: 

/** 

 * Convenience method for validity checking.  Checks if the incoming node is a member of the "%block;" parameter entity as defined in Sect. 6.2 of the XSL 1.0 &amp; 1.1 Recommendations

 * @param nsURI namespace URI of incoming node

 * @param lName local name (i.e., no prefix) of incoming node

 * @return true if a member, false if not

 */

protected boolean isBlockItem(String nsURI,String lName){

  return (FO_URI.equals(nsURI) && ("block".equals(lName) || "table".equals(lName) || "table-and-caption".equals(lName)|| "block-container".equals(lName)|| "list-block".equals(lName)|| "float".equals(lName)|| isNeutralItem(nsURI,lName)));

}

Location: FObj.java

Content: 

/** 

 * Convenience method for validity checking.  Checks if the incoming node is a member of the "%block;" parameter entity or "%inline;" parameter entity

 * @param nsURI namespace URI of incoming node

 * @param lName local name (i.e., no prefix) of incoming node

 * @return true if a member, false if not

 */

protected boolean isBlockOrInlineItem(String nsURI,String lName){

  return (isBlockItem(nsURI,lName) || isInlineItem(nsURI,lName));

}

Location: FObj.java

Content: 

public boolean isForceKeepTogether(){

  return forceKeepTogether;

}

Location: FObj.java

Content: 

/** 

 * Convenience method for validity checking.  Checks if the incoming node is a member of the "%inline;" parameter entity as defined in Sect. 6.2 of the XSL 1.0 &amp; 1.1 Recommendations

 * @param nsURI namespace URI of incoming node

 * @param lName local name (i.e., no prefix) of incoming node

 * @return true if a member, false if not

 */

protected boolean isInlineItem(String nsURI,String lName){

  return (FO_URI.equals(nsURI) && ("bidi-override".equals(lName) || "change-bar-begin".equals(lName) || "change-bar-end".equals(lName)|| "character".equals(lName)|| "external-graphic".equals(lName)|| "instream-foreign-object".equals(lName)|| "inline".equals(lName)|| "inline-container".equals(lName)|| "leader".equals(lName)|| "page-number".equals(lName)|| "page-number-citation".equals(lName)|| "page-number-citation-last".equals(lName)|| "basic-link".equals(lName)|| ("multi-toggle".equals(lName) && (getNameId() == FO_MULTI_CASE || findAncestor(FO_MULTI_CASE) > 0))|| ("footnote".equals(lName) && !isOutOfLineFODescendant)|| isNeutralItem(nsURI,lName)));

}

Location: FObj.java

Content: 

/** 

 * Convenience method for validity checking.  Checks if the incoming node is a member of the neutral item list as defined in Sect. 6.2 of the XSL 1.0 &amp; 1.1 Recommendations

 * @param nsURI namespace URI of incoming node

 * @param lName local name (i.e., no prefix) of incoming node

 * @return true if a member, false if not

 */

protected boolean isNeutralItem(String nsURI,String lName){

  return (FO_URI.equals(nsURI) && ("multi-switch".equals(lName) || "multi-properties".equals(lName) || "wrapper".equals(lName)|| (!isOutOfLineFODescendant && "float".equals(lName))|| "retrieve-marker".equals(lName)|| "retrieve-table-marker".equals(lName)));

}

Location: FObj.java

Content: 

/** 

 * Notifies a FObj that one of it's children is removed. This method is subclassed by Block to clear the firstInlineChild variable in case it doesn't generate any areas (see addMarker()).

 * @param node the node that was removed

 */

void notifyChildRemoval(FONode node){

}

Location: FObj.java

Content: 

/** 

 * Recursively set resolved bidirectional level of FO (and its ancestors) if and only if it is non-negative and if either the current value is reset (-1) or the new value is less than the current value.

 * @param bidiLevel a non-negative bidi embedding level

 */

public void setBidiLevel(int bidiLevel){

  assert bidiLevel >= 0;

  if ((this.bidiLevel < 0) || (bidiLevel < this.bidiLevel)) {

    this.bidiLevel=bidiLevel;

    if ((parent != null) && !isBidiPropagationBoundary()) {

      FObj foParent=(FObj)parent;

      int parentBidiLevel=foParent.getBidiLevel();

      if ((parentBidiLevel < 0) || (bidiLevel < parentBidiLevel)) {

        foParent.setBidiLevel(bidiLevel);

      }

    }

  }

}

Location: FObj.java

Content: 

public void setForceKeepTogether(boolean b){

  forceKeepTogether=b;

}

Location: FObj.java

Content: 

private void warnOnUnknownProperties(Attributes attlist,String objName,PropertyList propertyList) throws FOPException {

  Map<String,Property> unknowns=propertyList.getUnknownPropertyValues();

  for (  Entry<String,Property> entry : unknowns.entrySet()) {

    FOValidationEventProducer producer=FOValidationEventProducer.Provider.get(getUserAgent().getEventBroadcaster());

    producer.warnOnInvalidPropertyValue(this,objName,getAttributeNameForValue(attlist,entry.getValue(),propertyList),entry.getKey(),null,getLocator());

  }

}

