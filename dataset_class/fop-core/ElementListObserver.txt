Location: ElementListObserver.java

Content: 

/** 

 * Adds a new Observer to the list.

 * @param observer the observer implementation

 */

public static void addObserver(Observer observer){

  if (!isObservationActive()) {

    activeObservers=new java.util.ArrayList();

  }

  activeObservers.add(observer);

}

Location: ElementListObserver.java

Content: 

private ElementListObserver(){

}

Location: ElementListObserver.java

Content: 

/** 

 * @return true if observation is active, i.e. Observers are registered. 

 */

public static boolean isObservationActive(){

  return activeObservers != null;

}

Location: ElementListObserver.java

Content: 

/** 

 * Removes an Observer from the list. This call simply returns if the observer was not on the list and does nothing.

 * @param observer the observer to remove

 */

public static void removeObserver(Observer observer){

  if (isObservationActive()) {

    activeObservers.remove(observer);

  }

}

