Location: Function.java

Content: 

/** 

 * Evaluate the function

 * @param args an array of Properties that should be evaluated

 * @param pi property information instance that applies to property being evaluated

 * @return the Property satisfying the function

 * @throws PropertyException for problems when evaluating the function

 */

Property eval(Property[] args,PropertyInfo pi) throws PropertyException ;

Location: Function.java

Content: 

private Function(int functionType,List<Double> domain,List<Double> range){

  this.functionType=functionType;

  this.domain=(domain == null) ? Arrays.asList(0.0,1.0) : domain;

  this.range=range;

}

Location: Function.java

Content: 

/** 

 * create an complete Function object of Type 2, an Exponential Interpolation function. Use null for an optional object parameter if you choose not to use it. For optional int parameters, pass the default.

 * @param domain List objects of Double objects.This is the domain of the function. See page 264 of the PDF 1.3 Spec.

 * @param range List of Doubles that is the Range of the function.See page 264 of the PDF 1.3 Spec.

 * @param cZero This is a vector of Double objects which defines the function resultwhen x=0. This attribute is optional. It's described on page 268 of the PDF 1.3 spec.

 * @param cOne This is a vector of Double objects which defines the function resultwhen x=1. This attribute is optional. It's described on page 268 of the PDF 1.3 spec.

 * @param interpolationExponentN This is the inerpolation exponent.This attribute is required. PDF Spec page 268

 */

public Function(List<Double> domain,List<Double> range,float[] cZero,float[] cOne,double interpolationExponentN){

  this(2,domain,range);

  this.cZero=cZero;

  this.cOne=cOne;

  this.interpolationExponentN=interpolationExponentN;

}

Location: Function.java

Content: 

public Function(List<Double> domain,List<Double> range,List<Double> encode,byte[] datasource,int bitsPerSample,List<Integer> size){

  this(0,domain,range);

  this.encode=encode;

  this.datasource=datasource;

  this.bitsPerSample=bitsPerSample;

  this.size=size;

}

Location: Function.java

Content: 

/** 

 * create an complete Function object of Type 3, a Stitching function. Use null for an optional object parameter if you choose not to use it. For optional int parameters, pass the default.

 * @param domain List objects of Double objects.This is the domain of the function. See page 264 of the PDF 1.3 Spec.

 * @param range List objects of Double objects.This is the Range of the function. See page 264 of the PDF 1.3 Spec.

 * @param functions A List of the PDFFunction objects that the stitching function stitches.This attributed is required. It is described on page 269 of the PDF spec.

 * @param bounds This is a vector of Doubles representing the numbers that,in conjunction with Domain define the intervals to which each function from the 'functions' object applies. It must be in order of increasing magnitude, and each must be within Domain. It basically sets how much of the gradient each function handles. This attributed is required. It's described on page 269 of the PDF 1.3 spec.

 * @param encode List objects of Double objects.This is the linear mapping of input values intop the domain of the function's sample table. Default is hard to represent in ascii, but basically [0 (Size0 1) 0 (Size1 1)...]. This attribute is required. See page 270 in the PDF 1.3 spec.

 */

public Function(List<Double> domain,List<Double> range,List<Function> functions,List<Float> bounds,List<Double> encode){

  this(3,domain,range);

  this.functions=functions;

  this.bounds=bounds;

  this.encode=makeEncode(encode);

}

Location: Function.java

Content: 

/** 

 * Gets the bits per sample of the function

 */

public int getBitsPerSample(){

  return bitsPerSample;

}

Location: Function.java

Content: 

/** 

 * Gets the function C1 value (color for gradient)

 */

public float[] getCOne(){

  return cOne;

}

Location: Function.java

Content: 

/** 

 * Gets the function C0 value (color for gradient)

 */

public float[] getCZero(){

  return cZero;

}

Location: Function.java

Content: 

/** 

 * The function domain

 */

public List<Double> getDomain(){

  return domain;

}

Location: Function.java

Content: 

/** 

 * Gets the function encoding

 */

public List<Double> getEncode(){

  return encode;

}

Location: Function.java

Content: 

/** 

 * Gets the sub-functions

 */

public List<Function> getFunctions(){

  if (functions == null) {

    return Collections.emptyList();

  }

 else {

    return functions;

  }

}

Location: Function.java

Content: 

/** 

 * Gets the function type

 */

public int getFunctionType(){

  return functionType;

}

Location: Function.java

Content: 

/** 

 * Gets the interpolation exponent of the function

 */

public double getInterpolationExponentN(){

  return interpolationExponentN;

}

Location: Function.java

Content: 

/** 

 * @param index of optional argument

 * @param pi property information instance that applies to property being evaluated

 * @return the default property value for the optional argument at INDEX, whereINDEX is with respect to optional arguments; i.e., the first optional argument position is index 0; if no default for a given index, then null is returned

 * @throws PropertyException if index is greater than or equal to optional args count

 */

Property getOptionalArgDefault(int index,PropertyInfo pi) throws PropertyException ;

Location: Function.java

Content: 

/** 

 * @return the number of non-required (optional) arguments that may be specifiedin the argument list, which, if specified, must follow the required arguments

 */

int getOptionalArgsCount();

Location: Function.java

Content: 

/** 

 * Gets the function order

 */

public int getOrder(){

  return order;

}

Location: Function.java

Content: 

/** 

 * @return the basis for percentage calculations

 */

PercentBase getPercentBase();

Location: Function.java

Content: 

/** 

 * Gets the function range

 */

public List<Double> getRange(){

  return range;

}

Location: Function.java

Content: 

/** 

 * @return the number of required (non-optional) arguments that must be specifiedin the argument list

 */

int getRequiredArgsCount();

Location: Function.java

Content: 

/** 

 * Determine if function allows variable arguments. If it does, then they must appear after required and optional arguments, and all optional arguments must be specified.

 * @return true if function permits additional variable number of arguments afterrequired and (completely specified) optional arguments

 */

boolean hasVariableArgs();

Location: Function.java

Content: 

private List<Double> makeEncode(List<Double> encode){

  if (encode != null) {

    return encode;

  }

 else {

    encode=new ArrayList<Double>(functions.size() * 2);

    for (int i=0; i < functions.size(); i++) {

      encode.add(0.0);

      encode.add(1.0);

    }

    return encode;

  }

}

Location: Function.java

Content: 

private void outputBitsPerSample(StringBuilder out){

  out.append("/BitsPerSample " + bitsPerSample + "\n");

}

Location: Function.java

Content: 

private void outputCOne(StringBuilder out,DoubleFormatter doubleFormatter){

  if (cOne != null) {

    out.append("/C1 [ ");

    for (    float c : cOne) {

      out.append(doubleFormatter.formatDouble(c));

      out.append(" ");

    }

    out.append("]\n");

  }

}

Location: Function.java

Content: 

private void outputCZero(StringBuilder out,DoubleFormatter doubleFormatter){

  if (cZero != null) {

    out.append("/C0 [ ");

    for (    float c : cZero) {

      out.append(doubleFormatter.formatDouble(c));

      out.append(" ");

    }

    out.append("]\n");

  }

}

Location: Function.java

Content: 

private void outputDomain(StringBuilder p,DoubleFormatter doubleFormatter){

  p.append("/Domain ");

  GradientMaker.outputDoubles(p,doubleFormatter,domain);

  p.append("\n");

}

Location: Function.java

Content: 

private void outputEncode(StringBuilder out,DoubleFormatter doubleFormatter){

  out.append("/Encode ");

  GradientMaker.outputDoubles(out,doubleFormatter,encode);

  out.append("\n");

}

Location: Function.java

Content: 

private void outputInterpolationExponentN(StringBuilder out,DoubleFormatter doubleFormatter){

  out.append("/N ");

  out.append(doubleFormatter.formatDouble(interpolationExponentN));

  out.append("\n");

}

Location: Function.java

Content: 

private void outputOrder(StringBuilder out){

  if (order == 1 || order == 3) {

    out.append("\n/Order " + order + "\n");

  }

}

Location: Function.java

Content: 

private void outputRange(StringBuilder out,DoubleFormatter doubleFormatter){

  if (range != null) {

    out.append("/Range ");

    GradientMaker.outputDoubles(out,doubleFormatter,range);

    out.append("\n");

  }

}

Location: Function.java

Content: 

public String output(StringBuilder out,DoubleFormatter doubleFormatter,SubFunctionRenderer subFunctionRenderer){

  out.append("<<\n/FunctionType " + functionType + "\n");

  outputDomain(out,doubleFormatter);

  if (this.functionType == 0) {

    outputEncode(out,doubleFormatter);

    outputBitsPerSample(out);

    outputOrder(out);

    outputRange(out,doubleFormatter);

    out.append("\n/DataSource <");

    for (    byte b : datasource) {

      out.append(String.format("%02x",b & 0xff));

    }

    out.append(">\n");

    out.append("/Size [");

    for (    Integer i : size) {

      out.append(i);

      out.append(" ");

    }

    out.append("]\n");

    out.append(">>");

  }

 else   if (functionType == 2) {

    outputRange(out,doubleFormatter);

    outputCZero(out,doubleFormatter);

    outputCOne(out,doubleFormatter);

    outputInterpolationExponentN(out,doubleFormatter);

    out.append(">>");

  }

 else   if (functionType == 3) {

    outputRange(out,doubleFormatter);

    if (!functions.isEmpty()) {

      out.append("/Functions [ ");

      for (int i=0; i < functions.size(); i++) {

        subFunctionRenderer.outputFunction(out,i);

        out.append(' ');

      }

      out.append("]\n");

    }

    outputEncode(out,doubleFormatter);

    out.append("/Bounds ");

    if (bounds != null) {

      GradientMaker.outputDoubles(out,doubleFormatter,bounds);

    }

 else     if (!functions.isEmpty()) {

      int numberOfFunctions=functions.size();

      String functionsFraction=doubleFormatter.formatDouble(1.0 / numberOfFunctions);

      out.append("[ ");

      for (int i=0; i + 1 < numberOfFunctions; i++) {

        out.append(functionsFraction);

        out.append(" ");

      }

      out.append("]");

    }

    out.append("\n>>");

  }

 else   if (functionType == 4) {

    outputRange(out,doubleFormatter);

    out.append(">>");

  }

  return out.toString();

}

Location: Function.java

Content: 

public void setCOne(float[] cOne){

  this.cOne=cOne;

}

Location: Function.java

Content: 

public void setCZero(float[] cZero){

  this.cZero=cZero;

}

