Location: CharacterLayoutManager.java

Content: 

/** 

 * Constructor

 * @param node the fo:character formatting object

 */

public CharacterLayoutManager(Character node){

  super(node);

}

Location: CharacterLayoutManager.java

Content: 

private TextArea createCharacterArea(){

  Character fobj=(Character)this.fobj;

  TextArea text=new TextArea();

  text.setChangeBarList(getChangeBarList());

  char ch=fobj.getCharacter();

  int ipd=font.getCharWidth(ch);

  int blockProgressionOffset=0;

  int level=fobj.getBidiLevel();

  if (CharUtilities.isAnySpace(ch)) {

    if (!CharUtilities.isZeroWidthSpace(ch)) {

      text.addSpace(ch,ipd,CharUtilities.isAdjustableSpace(ch),blockProgressionOffset,level);

    }

  }

 else {

    int[] levels=(level >= 0) ? new int[]{level} : null;

    text.addWord(String.valueOf(ch),ipd,null,levels,null,blockProgressionOffset);

  }

  TraitSetter.setProducerID(text,fobj.getId());

  TraitSetter.addTextDecoration(text,fobj.getTextDecoration());

  text.setIPD(font.getCharWidth(fobj.getCharacter()));

  text.setBPD(font.getAscender() - font.getDescender());

  text.setBaselineOffset(font.getAscender());

  TraitSetter.addFontTraits(text,font);

  text.addTrait(Trait.COLOR,fobj.getColor());

  return text;

}

Location: CharacterLayoutManager.java

Content: 

@Override protected InlineArea getEffectiveArea(LayoutContext layoutContext){

  InlineArea area=createCharacterArea();

  if (!layoutContext.treatAsArtifact()) {

    TraitSetter.addStructureTreeElement(area,((Character)fobj).getStructureTreeElement());

  }

  return area;

}

