Location: PageBreakingAlgorithm.java

Content: 

/** 

 * Add a node at the end of the given line's existing active nodes. If this is the first node in the line, adjust endLine accordingly.

 * @param line number of the line ending at the node's corresponding breakpoint

 * @param node the active node to add

 */

@Override protected void addNode(int line,KnuthNode node){

  if (node.position < par.size() - 1 && line > 0 && (ipdDifference=compareIPDs(line - 1)) != 0) {

    log.trace("IPD changes at page " + line);

    if (bestNodeForIPDChange == null || node.totalDemerits < bestNodeForIPDChange.totalDemerits) {

      bestNodeForIPDChange=node;

    }

  }

 else {

    if (node.position == par.size() - 1) {

      ipdDifference=0;

    }

 else     if (line > 0) {

      bestNodeForLastPage=node;

    }

    super.addNode(line,node);

  }

}

Location: PageBreakingAlgorithm.java

Content: 

/** 

 * Checks whether footnotes from preceding pages may be deferred to the page after the given element.

 * @param node active node for the preceding page break

 * @param contentElementIndex index of the Knuth element considered for thecurrent page break

 * @return  true if footnotes can be deferred

 */

private boolean canDeferOldFootnotes(KnuthPageNode node,int contentElementIndex){

  return (noBreakBetween(node.position,contentElementIndex) && deferredFootnotes(node.footnoteListIndex,node.footnoteElementIndex,node.insertedFootnotes));

}

Location: PageBreakingAlgorithm.java

Content: 

/** 

 * Compare two KnuthNodes and return the node with the least demerit.

 * @param node1 The first knuth node.

 * @param node2 The other knuth node.

 * @return the node with the least demerit.

 */

@Override protected KnuthNode compareNodes(KnuthNode node1,KnuthNode node2){

  if (node1 == null || node2 == null) {

    return (node1 == null) ? node2 : node1;

  }

  if (pageProvider != null) {

    if (pageProvider.endPage(node1.line - 1) && !pageProvider.endPage(node2.line - 1)) {

      return node1;

    }

 else     if (pageProvider.endPage(node2.line - 1) && !pageProvider.endPage(node1.line - 1)) {

      return node2;

    }

  }

  return super.compareNodes(node1,node2);

}

Location: PageBreakingAlgorithm.java

Content: 

/** 

 * {@inheritDoc} 

 */

@Override protected double computeAdjustmentRatio(KnuthNode activeNode,int difference){

  if (difference > 0) {

    int maxAdjustment=totalStretch - activeNode.totalStretch;

    if (((KnuthPageNode)activeNode).insertedFootnotes < totalFootnotesLength) {

      maxAdjustment+=footnoteSeparatorLength.getStretch();

    }

    if (maxAdjustment > 0) {

      return (double)difference / maxAdjustment;

    }

 else {

      return INFINITE_RATIO;

    }

  }

 else   if (difference < 0) {

    int maxAdjustment=totalShrink - activeNode.totalShrink;

    if (((KnuthPageNode)activeNode).insertedFootnotes < totalFootnotesLength) {

      maxAdjustment+=footnoteSeparatorLength.getShrink();

    }

    if (maxAdjustment > 0) {

      return (double)difference / maxAdjustment;

    }

 else {

      return -INFINITE_RATIO;

    }

  }

 else {

    return 0;

  }

}

Location: PageBreakingAlgorithm.java

Content: 

/** 

 * {@inheritDoc} 

 */

@Override protected double computeDemerits(KnuthNode activeNode,KnuthElement element,int fitnessClass,double r){

  double demerits=0;

  double f=Math.abs(r);

  f=1 + 100 * f * f* f;

  if (element.isPenalty()) {

    double penalty=element.getPenalty();

    if (penalty >= 0) {

      f+=penalty;

      demerits=f * f;

    }

 else     if (!element.isForcedBreak()) {

      demerits=f * f - penalty * penalty;

    }

 else {

      demerits=f * f;

    }

  }

 else {

    demerits=f * f;

  }

  if (element.isPenalty() && ((KnuthPenalty)element).isPenaltyFlagged() && getElement(activeNode.position).isPenalty()&& ((KnuthPenalty)getElement(activeNode.position)).isPenaltyFlagged()) {

    demerits+=repeatedFlaggedDemerit;

  }

  if (Math.abs(fitnessClass - activeNode.fitness) > 1) {

    demerits+=incompatibleFitnessDemerit;

  }

  if (footnotesPending) {

    if (footnoteListIndex < footnotesList.size() - 1) {

      demerits+=(footnotesList.size() - 1 - footnoteListIndex) * deferredFootnoteDemerits;

    }

    if (footnoteListIndex < footnotesList.size()) {

      if (footnoteElementIndex < getFootnoteList(footnoteListIndex).size() - 1) {

        demerits+=splitFootnoteDemerits;

      }

    }

 else {

    }

  }

  demerits+=activeNode.totalDemerits;

  return demerits;

}

Location: PageBreakingAlgorithm.java

Content: 

/** 

 * {@inheritDoc} 

 */

@Override protected int computeDifference(KnuthNode activeNode,KnuthElement element,int elementIndex){

  KnuthPageNode pageNode=(KnuthPageNode)activeNode;

  int actualWidth=totalWidth - pageNode.totalWidth;

  int footnoteSplit;

  boolean canDeferOldFN;

  actualWidth+=pageNode.totalVariantsWidth;

  if (element instanceof WhitespaceManagementPenalty) {

    actualWidth+=handleWhitespaceManagementPenalty(pageNode,(WhitespaceManagementPenalty)element,elementIndex);

  }

 else   if (element.isPenalty()) {

    actualWidth+=element.getWidth();

  }

  if (footnotesPending) {

    int allFootnotes=totalFootnotesLength - pageNode.insertedFootnotes;

    if (allFootnotes > 0) {

      actualWidth+=footnoteSeparatorLength.getOpt();

      if (actualWidth + allFootnotes <= getLineWidth(activeNode.line)) {

        actualWidth+=allFootnotes;

        insertedFootnotesLength=pageNode.insertedFootnotes + allFootnotes;

        footnoteListIndex=footnotesList.size() - 1;

        footnoteElementIndex=getFootnoteList(footnoteListIndex).size() - 1;

      }

 else       if (((canDeferOldFN=canDeferOldFootnotes(pageNode,elementIndex)) || newFootnotes) && (footnoteSplit=getFootnoteSplit(pageNode,getLineWidth(activeNode.line) - actualWidth,canDeferOldFN)) > 0) {

        actualWidth+=footnoteSplit;

        insertedFootnotesLength=pageNode.insertedFootnotes + footnoteSplit;

      }

 else {

        actualWidth+=allFootnotes;

        insertedFootnotesLength=pageNode.insertedFootnotes + allFootnotes;

        footnoteListIndex=footnotesList.size() - 1;

        footnoteElementIndex=getFootnoteList(footnoteListIndex).size() - 1;

      }

    }

 else {

    }

  }

 else {

  }

  int diff=getLineWidth(activeNode.line) - actualWidth;

  if (autoHeight && diff < 0) {

    return 0;

  }

 else {

    return diff;

  }

}

Location: PageBreakingAlgorithm.java

Content: 

/** 

 * {@inheritDoc} 

 */

@Override protected void considerLegalBreak(KnuthElement element,int elementIdx){

  if (element.isPenalty()) {

    int breakClass=((KnuthPenalty)element).getBreakClass();

switch (breakClass) {

case Constants.EN_PAGE:

      if (this.currentKeepContext != breakClass) {

        this.lastBeforeKeepContextSwitch=getLastTooShort();

      }

    this.currentKeepContext=breakClass;

  break;

case Constants.EN_COLUMN:

if (this.currentKeepContext != breakClass) {

  this.lastBeforeKeepContextSwitch=getLastTooShort();

}

this.currentKeepContext=breakClass;

break;

case Constants.EN_AUTO:

this.currentKeepContext=breakClass;

break;

default :

}

}

super.considerLegalBreak(element,elementIdx);

newFootnotes=false;

}

Location: PageBreakingAlgorithm.java

Content: 

private void createFootnotePages(KnuthPageNode lastNode){

  insertedFootnotesLength=lastNode.insertedFootnotes;

  footnoteListIndex=lastNode.footnoteListIndex;

  footnoteElementIndex=lastNode.footnoteElementIndex;

  int availableBPD=getLineWidth(lastNode.line);

  int split=0;

  KnuthPageNode prevNode=lastNode;

  while (insertedFootnotesLength < totalFootnotesLength) {

    if (totalFootnotesLength - insertedFootnotesLength <= availableBPD) {

      insertedFootnotesLength=totalFootnotesLength;

      footnoteListIndex=lengthList.size() - 1;

      footnoteElementIndex=getFootnoteList(footnoteListIndex).size() - 1;

    }

 else     if ((split=getFootnoteSplit(footnoteListIndex,footnoteElementIndex,insertedFootnotesLength,availableBPD,true)) > 0) {

      availableBPD-=split;

      insertedFootnotesLength+=split;

    }

 else {

      KnuthPageNode node=(KnuthPageNode)createNode(lastNode.position,prevNode.line + 1,1,insertedFootnotesLength - prevNode.insertedFootnotes,0,0,0,0,0,0,0,prevNode);

      addNode(node.line,node);

      removeNode(prevNode.line,prevNode);

      prevNode=node;

      availableBPD=getLineWidth(node.line);

    }

  }

  KnuthPageNode node=(KnuthPageNode)createNode(lastNode.position,prevNode.line + 1,1,totalFootnotesLength - prevNode.insertedFootnotes,0,0,0,0,0,0,0,prevNode);

  addNode(node.line,node);

  removeNode(prevNode.line,prevNode);

}

Location: PageBreakingAlgorithm.java

Content: 

protected void createForcedNodes(KnuthNode node,int line,int elementIdx,int difference,double r,double demerits,int fitnessClass,int availableShrink,int availableStretch,int newWidth,int newStretch,int newShrink){

  if (handlingFloat()) {

    if (bestFloatEdgeNode == null || demerits <= bestFloatEdgeNode.totalDemerits) {

      bestFloatEdgeNode=createNode(elementIdx,line + 1,fitnessClass,newWidth,newStretch,newShrink,r,availableShrink,availableStretch,difference,demerits,node);

    }

  }

 else {

    super.createForcedNodes(node,line,elementIdx,difference,r,demerits,fitnessClass,availableShrink,availableStretch,newWidth,newStretch,newShrink);

  }

}

Location: PageBreakingAlgorithm.java

Content: 

/** 

 * {@inheritDoc} 

 */

@Override protected KnuthNode createNode(int position,int line,int fitness,int totalWidth,int totalStretch,int totalShrink){

  return new KnuthPageNode(position,line,fitness,totalWidth,totalStretch,totalShrink,((BestPageRecords)best).getInsertedFootnotesLength(fitness),((BestPageRecords)best).getTotalFootnotesLength(fitness),((BestPageRecords)best).getFootnoteListIndex(fitness),((BestPageRecords)best).getFootnoteElementIndex(fitness),best.getAdjust(fitness),best.getAvailableShrink(fitness),best.getAvailableStretch(fitness),best.getDifference(fitness),best.getDemerits(fitness),best.getNode(fitness));

}

Location: PageBreakingAlgorithm.java

Content: 

/** 

 * {@inheritDoc} 

 */

@Override protected KnuthNode createNode(int position,int line,int fitness,int totalWidth,int totalStretch,int totalShrink,double adjustRatio,int availableShrink,int availableStretch,int difference,double totalDemerits,KnuthNode previous){

  return new KnuthPageNode(position,line,fitness,totalWidth,totalStretch,totalShrink,insertedFootnotesLength,totalFootnotesLength,footnoteListIndex,footnoteElementIndex,adjustRatio,availableShrink,availableStretch,difference,totalDemerits,previous);

}

Location: PageBreakingAlgorithm.java

Content: 

/** 

 * Deactivate the given node

 * @param node  the node

 * @param line  the line number

 */

protected void deactivateNode(KnuthNode node,int line){

  super.deactivateNode(node,line);

  if (handlingEndOfFloat) {

    floatHeight=totalWidth;

  }

}

Location: PageBreakingAlgorithm.java

Content: 

/** 

 * Returns true if their are (pieces of) footnotes to be typeset on the current page.

 * @param listIndex index of the last inserted footnote for the currently consideredactive node

 * @param elementIndex index of the last element of the last inserted footnote

 * @param length total length of all footnotes inserted so far

 */

private boolean deferredFootnotes(int listIndex,int elementIndex,int length){

  return ((newFootnotes && firstNewFootnoteIndex != 0 && (listIndex < firstNewFootnoteIndex - 1 || elementIndex < getFootnoteList(listIndex).size() - 1)) || length < totalFootnotesLength);

}

Location: PageBreakingAlgorithm.java

Content: 

protected void disableFloatHandling(){

  handlingEndOfFloat=false;

  handlingStartOfFloat=false;

}

Location: PageBreakingAlgorithm.java

Content: 

/** 

 * {@inheritDoc} 

 */

@Override protected boolean elementCanEndLine(KnuthElement element,int line,int difference){

  if (!(element.isPenalty()) || pageProvider == null) {

    return true;

  }

 else {

    KnuthPenalty p=(KnuthPenalty)element;

    if (p.getPenalty() <= 0) {

      return true;

    }

 else {

      int context=p.getBreakClass();

switch (context) {

case Constants.EN_LINE:

case Constants.EN_COLUMN:

        return p.getPenalty() < KnuthPenalty.INFINITE;

case Constants.EN_PAGE:

      return p.getPenalty() < KnuthPenalty.INFINITE || !pageProvider.endPage(line - 1);

case Constants.EN_AUTO:

    log.debug("keep is not auto but context is");

  return true;

default :

if (p.getPenalty() < KnuthPenalty.INFINITE) {

  log.debug("Non recognized keep context:" + context);

  return true;

}

 else {

  return false;

}

}

}

}

}

Location: PageBreakingAlgorithm.java

Content: 

/** 

 * {@inheritDoc} 

 */

@Override protected int filterActiveNodes(){

  KnuthNode bestActiveNode=null;

  for (int i=startLine; i < endLine; i++) {

    for (KnuthNode node=getNode(i); node != null; node=node.next) {

      if (favorSinglePart && node.line > 1 && bestActiveNode != null && Math.abs(bestActiveNode.difference) < bestActiveNode.availableShrink) {

      }

 else {

        bestActiveNode=compareNodes(bestActiveNode,node);

      }

      if (node != bestActiveNode) {

        removeNode(i,node);

      }

    }

  }

  assert (bestActiveNode != null);

  return bestActiveNode.line;

}

Location: PageBreakingAlgorithm.java

Content: 

protected KnuthNode getBestFloatEdgeNode(){

  return bestFloatEdgeNode;

}

Location: PageBreakingAlgorithm.java

Content: 

KnuthNode getBestNodeBeforeIPDChange(){

  return bestNodeForIPDChange;

}

Location: PageBreakingAlgorithm.java

Content: 

KnuthNode getBestNodeForLastPage(){

  return bestNodeForLastPage;

}

Location: PageBreakingAlgorithm.java

Content: 

protected FloatPosition getFloatPosition(){

  return floatPosition;

}

Location: PageBreakingAlgorithm.java

Content: 

/** 

 * @return the associated top-level formatting object. 

 */

public FObj getFObj(){

  return topLevelLM.getFObj();

}

Location: PageBreakingAlgorithm.java

Content: 

/** 

 * Obtain the element-list corresponding to the footnote at the given index.

 * @param index the index in the list of footnotes

 * @return  the element-list

 */

protected final List<KnuthElement> getFootnoteList(int index){

  return footnotesList.get(index);

}

Location: PageBreakingAlgorithm.java

Content: 

/** 

 * Tries to split the flow of footnotes to put one part on the current page.

 * @param prevListIndex index of the last footnote on the previous page

 * @param prevElementIndex index of the last element of the last footnote

 * @param prevLength total length of footnotes inserted so far

 * @param availableLength available space for footnotes on this page

 * @param canDeferOldFootnotes

 * @return ...

 */

private int getFootnoteSplit(int prevListIndex,int prevElementIndex,int prevLength,int availableLength,boolean canDeferOldFootnotes){

  if (availableLength <= 0) {

    return 0;

  }

 else {

    int splitLength=0;

    ListIterator<KnuthElement> noteListIterator;

    KnuthElement element;

    boolean somethingAdded=false;

    int listIndex=prevListIndex;

    int elementIndex=prevElementIndex;

    if (elementIndex == getFootnoteList(listIndex).size() - 1) {

      listIndex++;

      elementIndex=0;

    }

 else {

      elementIndex++;

    }

    if (footnotesList.size() - 1 > listIndex) {

      if (!canDeferOldFootnotes && newFootnotes && firstNewFootnoteIndex > 0) {

        splitLength=lengthList.get(firstNewFootnoteIndex - 1) - prevLength;

        listIndex=firstNewFootnoteIndex;

        elementIndex=0;

      }

      while (lengthList.get(listIndex) - prevLength <= availableLength) {

        splitLength=lengthList.get(listIndex) - prevLength;

        somethingAdded=true;

        listIndex++;

        elementIndex=0;

      }

    }

    noteListIterator=getFootnoteList(listIndex).listIterator(elementIndex);

    int prevSplitLength=0;

    int prevIndex=-1;

    int index=-1;

    while (splitLength <= availableLength) {

      if (somethingAdded) {

        prevSplitLength=splitLength;

        prevIndex=index;

      }

      boolean boxPreceding=false;

      while (noteListIterator.hasNext()) {

        element=noteListIterator.next();

        if (element.isBox()) {

          splitLength+=element.getWidth();

          boxPreceding=true;

          if (splitLength > prevSplitLength) {

            somethingAdded=true;

          }

        }

 else         if (element.isGlue()) {

          if (boxPreceding) {

            index=noteListIterator.previousIndex();

            break;

          }

          boxPreceding=false;

          splitLength+=element.getWidth();

        }

 else {

          if (element.getPenalty() < KnuthElement.INFINITE) {

            index=noteListIterator.previousIndex();

            break;

          }

          boxPreceding=false;

        }

      }

    }

    if (!somethingAdded) {

      prevSplitLength=0;

    }

 else     if (prevSplitLength > 0) {

      footnoteListIndex=(prevIndex != -1) ? listIndex : listIndex - 1;

      footnoteElementIndex=(prevIndex != -1) ? prevIndex : getFootnoteList(footnoteListIndex).size() - 1;

    }

    return prevSplitLength;

  }

}

Location: PageBreakingAlgorithm.java

Content: 

/** 

 * Tries to split the flow of footnotes to put one part on the current page.

 * @param activeNode currently considered previous page break

 * @param availableLength available space for footnotes

 * @param canDeferOldFootnotes

 * @return ...

 */

private int getFootnoteSplit(KnuthPageNode activeNode,int availableLength,boolean canDeferOldFootnotes){

  return getFootnoteSplit(activeNode.footnoteListIndex,activeNode.footnoteElementIndex,activeNode.insertedFootnotes,availableLength,canDeferOldFootnotes);

}

Location: PageBreakingAlgorithm.java

Content: 

/** 

 * {@inheritDoc} 

 */

@Override protected int getIPDdifference(){

  return ipdDifference;

}

Location: PageBreakingAlgorithm.java

Content: 

/** 

 * {@inheritDoc} 

 */

@Override protected int getLineWidth(int line){

  int bpd;

  if (pageProvider != null) {

    bpd=pageProvider.getAvailableBPD(line);

  }

 else {

    bpd=super.getLineWidth(line);

  }

  if (log.isTraceEnabled()) {

    log.trace("getLineWidth(" + line + ") -> "+ bpd);

  }

  return bpd;

}

Location: PageBreakingAlgorithm.java

Content: 

/** 

 * @return a list of {@link PageBreakPosition} elementscorresponding to the computed page- and column-breaks

 */

public LinkedList<PageBreakPosition> getPageBreaks(){

  return pageBreaks;

}

Location: PageBreakingAlgorithm.java

Content: 

/** 

 * Page-breaking specific handling of the given box. Currently it adds the footnotes cited in the given box to the list of to-be-handled footnotes. {@inheritDoc}

 */

@Override protected void handleBox(KnuthBox box){

  super.handleBox(box);

  if (box instanceof KnuthBlockBox && ((KnuthBlockBox)box).hasAnchors()) {

    handleFootnotes(((KnuthBlockBox)box).getElementLists());

    if (!newFootnotes) {

      newFootnotes=true;

      firstNewFootnoteIndex=footnotesList.size() - 1;

    }

  }

  if (box instanceof KnuthBlockBox && ((KnuthBlockBox)box).hasFloatAnchors()) {

    handlingStartOfFloat=true;

  }

  if (floatHeight != 0 && totalWidth >= floatHeight) {

    handlingEndOfFloat=true;

  }

}

Location: PageBreakingAlgorithm.java

Content: 

protected int handleFloat(){

  calculateBreakPoints(bestFloatEdgeNode,par,bestFloatEdgeNode.line);

  activeLines=null;

  return bestFloatEdgeNode.line - 1;

}

Location: PageBreakingAlgorithm.java

Content: 

/** 

 * Handles the footnotes cited inside a block-level box. Updates footnotesList and the value of totalFootnotesLength with the lengths of the given footnotes.

 * @param elementLists list of KnuthElement sequences corresponding to the footnotesbodies

 */

private void handleFootnotes(List<List<KnuthElement>> elementLists){

  if (!footnotesPending) {

    footnotesPending=true;

    footnotesList=new ArrayList<List<KnuthElement>>();

    lengthList=new ArrayList<Integer>();

    totalFootnotesLength=0;

  }

  if (!newFootnotes) {

    newFootnotes=true;

    firstNewFootnoteIndex=footnotesList.size();

  }

  for (  List<KnuthElement> noteList : elementLists) {

    int noteLength=0;

    footnotesList.add(noteList);

    for (    KnuthElement element : noteList) {

      if (element.isBox() || element.isGlue()) {

        noteLength+=element.getWidth();

      }

    }

    int prevLength=(lengthList == null || lengthList.isEmpty()) ? 0 : ListUtil.getLast(lengthList);

    if (lengthList != null) {

      lengthList.add(prevLength + noteLength);

    }

    totalFootnotesLength+=noteLength;

  }

}

Location: PageBreakingAlgorithm.java

Content: 

/** 

 * {@inheritDoc} 

 */

@Override protected int handleIpdChange(){

  log.trace("Best node for ipd change:" + bestNodeForIPDChange);

  calculateBreakPoints(bestNodeForIPDChange,par,bestNodeForIPDChange.line + 1);

  activeLines=null;

  return bestNodeForIPDChange.line;

}

Location: PageBreakingAlgorithm.java

Content: 

/** 

 * Overridden to consider penalties with value  {@link KnuthElement#INFINITE}as legal break-points, if the current keep-context allows this (a keep-*.within-page="always" constraint still permits column-breaks) {@inheritDoc}

 */

@Override protected void handlePenaltyAt(KnuthPenalty penalty,int position,int allowedBreaks){

  super.handlePenaltyAt(penalty,position,allowedBreaks);

  if (penalty.getPenalty() == KnuthPenalty.INFINITE) {

    int breakClass=penalty.getBreakClass();

    if (breakClass == Constants.EN_PAGE || breakClass == Constants.EN_COLUMN) {

      considerLegalBreak(penalty,position);

    }

  }

}

Location: PageBreakingAlgorithm.java

Content: 

/** 

 * Evaluates the variants corresponding to the given penalty until one that leads to an acceptable adjustment ratio is found. That variant will be added to the list of pending variants in the given active node.

 */

private int handleWhitespaceManagementPenalty(KnuthPageNode activeNode,WhitespaceManagementPenalty penalty,int elementIndex){

  for (  Variant var : penalty.getVariants()) {

    int difference=computeDifference(activeNode,var.getPenalty(),elementIndex);

    double r=computeAdjustmentRatio(activeNode,difference);

    if (r >= -1.0) {

      activeNode.addVariant(var);

      return var.width;

    }

  }

  return 0;

}

Location: PageBreakingAlgorithm.java

Content: 

protected boolean handlingFloat(){

  return (handlingStartOfFloat || handlingEndOfFloat);

}

Location: PageBreakingAlgorithm.java

Content: 

/** 

 * Insert the given  {@link PageBreakPosition} as the firstelement in the list of page-breaks

 * @param pageBreak the position to insert

 */

public void insertPageBreakAsFirst(PageBreakPosition pageBreak){

  if (pageBreaks == null) {

    pageBreaks=new LinkedList<PageBreakPosition>();

  }

  pageBreaks.addFirst(pageBreak);

}

Location: PageBreakingAlgorithm.java

Content: 

public void loadFootnotes(List fl,List ll,int tfl,int ifl,boolean fp,boolean nf,int fnfi,int fli,int fei,MinOptMax fsl,int pfli,int pfei){

  footnotesList=fl;

  lengthList=ll;

  totalFootnotesLength=tfl;

  insertedFootnotesLength=ifl;

  footnotesPending=fp;

  newFootnotes=nf;

  firstNewFootnoteIndex=fnfi;

  footnoteListIndex=fli;

  footnoteElementIndex=fei;

  footnoteSeparatorLength=fsl;

  previousFootnoteListIndex=pfli;

  previousFootnoteElementIndex=pfei;

  relayingFootnotes=!(previousFootnoteListIndex == -2 && previousFootnoteElementIndex == -2);

}

Location: PageBreakingAlgorithm.java

Content: 

/** 

 * Returns true if there may be no breakpoint between the two given elements.

 * @param prevBreakIndex index of the element from the currently considered activenode

 * @param breakIndex index of the currently considered breakpoint

 * @return true if no element between the two can be a breakpoint

 */

private boolean noBreakBetween(int prevBreakIndex,int breakIndex){

  if (storedPrevBreakIndex != -1 && ((prevBreakIndex >= storedPrevBreakIndex && breakIndex == storedBreakIndex && storedValue) || (prevBreakIndex <= storedPrevBreakIndex && breakIndex >= storedBreakIndex && !storedValue))) {

  }

 else {

    int index;

    for (index=prevBreakIndex + 1; !par.getElement(index).isBox(); index++) {

    }

    for (; index < breakIndex; index++) {

      if (par.getElement(index).isGlue() && par.getElement(index - 1).isBox() || par.getElement(index).isPenalty() && ((KnuthElement)par.getElement(index)).getPenalty() < KnuthElement.INFINITE) {

        break;

      }

    }

    storedPrevBreakIndex=prevBreakIndex;

    storedBreakIndex=breakIndex;

    storedValue=(index == breakIndex);

  }

  return storedValue;

}

Location: PageBreakingAlgorithm.java

Content: 

/** 

 * Construct a page breaking algorithm.

 * @param topLevelLM the top level layout manager

 * @param pageProvider the page provider

 * @param layoutListener the layout listener

 * @param alignment     alignment of the paragraph/page. One of {@link Constants#EN_START}, {@link Constants#EN_JUSTIFY},  {@link Constants#EN_CENTER}, {@link Constants#EN_END}. For pages,  {@link Constants#EN_BEFORE} and {@link Constants#EN_AFTER}are mapped to the corresponding inline properties, {@link Constants#EN_START} and {@link Constants#EN_END}.

 * @param alignmentLast alignment of the paragraph's last line

 * @param footnoteSeparatorLength length of footnote separator

 * @param partOverflowRecovery  {@code true} if too long elements should be moved tothe next line/part

 * @param autoHeight true if auto height

 * @param favorSinglePart true if favoring single part

 * @see BreakingAlgorithm

 */

public PageBreakingAlgorithm(LayoutManager topLevelLM,PageProvider pageProvider,PageBreakingLayoutListener layoutListener,int alignment,int alignmentLast,MinOptMax footnoteSeparatorLength,boolean partOverflowRecovery,boolean autoHeight,boolean favorSinglePart){

  super(alignment,alignmentLast,true,partOverflowRecovery,0);

  this.topLevelLM=topLevelLM;

  this.pageProvider=pageProvider;

  this.layoutListener=layoutListener;

  best=new BestPageRecords();

  this.footnoteSeparatorLength=footnoteSeparatorLength;

  this.autoHeight=autoHeight;

  this.favorSinglePart=favorSinglePart;

}

Location: PageBreakingAlgorithm.java

Content: 

@Override protected KnuthNode recoverFromOverflow(){

  if (compareIPDs(getLastTooLong().line - 1) != 0) {

    return getLastTooLong();

  }

 else {

    return super.recoverFromOverflow();

  }

}

Location: PageBreakingAlgorithm.java

Content: 

/** 

 * Overridden to defer a part to the next page, if it must be kept within one page, but is too large to fit in the last column. {@inheritDoc}

 */

@Override protected KnuthNode recoverFromTooLong(KnuthNode lastTooLong){

  if (log.isDebugEnabled()) {

    log.debug("Recovering from too long: " + lastTooLong);

    log.debug("\tlastTooShort = " + getLastTooShort());

    log.debug("\tlastBeforeKeepContextSwitch = " + lastBeforeKeepContextSwitch);

    log.debug("\tcurrentKeepContext = " + AbstractBreaker.getBreakClassName(currentKeepContext));

  }

  if (lastBeforeKeepContextSwitch == null || currentKeepContext == Constants.EN_AUTO) {

    return super.recoverFromTooLong(lastTooLong);

  }

  KnuthNode node=lastBeforeKeepContextSwitch;

  lastBeforeKeepContextSwitch=null;

  while (!pageProvider.endPage(node.line - 1)) {

    log.trace("Adding node for empty column");

    node=createNode(node.position,node.line + 1,1,0,0,0,0,0,0,0,0,node);

  }

  return node;

}

Location: PageBreakingAlgorithm.java

Content: 

public void relayFootnotes(PageSequenceLayoutManager pslm){

  if (!relayingFootnotes) {

    previousFootnoteListIndex=((KnuthPageNode)bestFloatEdgeNode.previous).footnoteListIndex;

    previousFootnoteElementIndex=((KnuthPageNode)bestFloatEdgeNode.previous).footnoteElementIndex;

  }

  pslm.holdFootnotes(footnotesList,lengthList,totalFootnotesLength,insertedFootnotesLength,footnotesPending,newFootnotes,firstNewFootnoteIndex,footnoteListIndex,footnoteElementIndex,footnoteSeparatorLength,previousFootnoteListIndex,previousFootnoteElementIndex);

}

Location: PageBreakingAlgorithm.java

Content: 

/** 

 * Removes all page breaks from the result list. This is used by block-containers and static-content when it is only desired to know where there is an overflow but later the whole content should be painted as one part.

 */

public void removeAllPageBreaks(){

  if (pageBreaks == null || pageBreaks.isEmpty()) {

    return;

  }

  pageBreaks.subList(0,pageBreaks.size() - 1).clear();

}

Location: PageBreakingAlgorithm.java

Content: 

private void resetFootnotes(List<List<KnuthElement>> elementLists){

  for (int i=0; i < elementLists.size(); i++) {

    ListUtil.removeLast(footnotesList);

    ListUtil.removeLast(lengthList);

  }

  if (footnotesList.size() == 0) {

    footnotesPending=false;

  }

}

Location: PageBreakingAlgorithm.java

Content: 

/** 

 * {@inheritDoc} 

 */

@Override protected int restartFrom(KnuthNode restartingNode,int currentIndex){

  int returnValue=super.restartFrom(restartingNode,currentIndex);

  newFootnotes=false;

  if (footnotesPending) {

    for (int j=currentIndex; j >= restartingNode.position; j--) {

      final KnuthElement resetElement=getElement(j);

      if (resetElement instanceof KnuthBlockBox && ((KnuthBlockBox)resetElement).hasAnchors()) {

        resetFootnotes(((KnuthBlockBox)resetElement).getElementLists());

      }

    }

    assert restartingNode instanceof KnuthPageNode;

    KnuthPageNode restartingPageNode=(KnuthPageNode)restartingNode;

    footnoteElementIndex=restartingPageNode.footnoteElementIndex;

    footnoteListIndex=restartingPageNode.footnoteListIndex;

    totalFootnotesLength=restartingPageNode.totalFootnotes;

    insertedFootnotesLength=restartingPageNode.insertedFootnotes;

  }

  return returnValue;

}

Location: PageBreakingAlgorithm.java

Content: 

/** 

 * {@inheritDoc} 

 */

@Override public void updateData1(int total,double demerits){

}

Location: PageBreakingAlgorithm.java

Content: 

/** 

 * {@inheritDoc} 

 */

@Override public void updateData2(KnuthNode bestActiveNode,KnuthSequence sequence,int total){

  KnuthPageNode pageNode=(KnuthPageNode)bestActiveNode;

  KnuthPageNode previousPageNode=((KnuthPageNode)pageNode.previous);

  for (  Variant var : previousPageNode.pendingVariants) {

    WhitespaceManagementPenalty penalty=var.getWhitespaceManagementPenalty();

    if (!penalty.hasActiveVariant()) {

      penalty.setActiveVariant(var);

    }

  }

  int difference=bestActiveNode.difference;

  if (difference + bestActiveNode.availableShrink < 0) {

    if (!autoHeight) {

      if (layoutListener != null) {

        layoutListener.notifyOverflow(bestActiveNode.line - 1,-difference,getFObj());

      }

    }

  }

  boolean isNonLastPage=(bestActiveNode.line < total);

  int blockAlignment=isNonLastPage ? alignment : alignmentLast;

  double ratio=bestActiveNode.adjustRatio;

  if (ratio < 0) {

    difference=0;

  }

 else   if (ratio <= 1 && isNonLastPage) {

    difference=0;

  }

 else   if (ratio > 1) {

    ratio=1;

    difference-=bestActiveNode.availableStretch;

  }

 else {

    if (blockAlignment != Constants.EN_JUSTIFY) {

      ratio=0;

    }

 else {

      difference=0;

    }

  }

  if (log.isDebugEnabled()) {

    log.debug("BBA> difference=" + difference + " ratio="+ ratio+ " position="+ bestActiveNode.position);

  }

  if (handlingFloat() && floatPosition == null) {

    floatPosition=new FloatPosition(this.topLevelLM,bestActiveNode.position,ratio,difference);

  }

 else {

    boolean useRelayedFootnotes=relayingFootnotes && bestActiveNode.previous.position == 0;

    int firstListIndex=(useRelayedFootnotes) ? previousFootnoteListIndex : ((KnuthPageNode)bestActiveNode.previous).footnoteListIndex;

    int firstElementIndex=(useRelayedFootnotes) ? previousFootnoteElementIndex : ((KnuthPageNode)bestActiveNode.previous).footnoteElementIndex;

    if (useRelayedFootnotes) {

      previousFootnoteListIndex=-2;

      previousFootnoteElementIndex=-2;

      relayingFootnotes=false;

    }

    if (footnotesList != null && firstElementIndex == getFootnoteList(firstListIndex).size() - 1) {

      firstListIndex++;

      firstElementIndex=0;

    }

 else {

      firstElementIndex++;

    }

    insertPageBreakAsFirst(new PageBreakPosition(this.topLevelLM,bestActiveNode.position,firstListIndex,firstElementIndex,((KnuthPageNode)bestActiveNode).footnoteListIndex,((KnuthPageNode)bestActiveNode).footnoteElementIndex,ratio,difference));

  }

}

