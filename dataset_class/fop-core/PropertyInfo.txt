Location: PropertyInfo.java

Content: 

/** 

 * @return the current font-size value as base units (milli-points).

 * @throws PropertyException if a property exception occurs

 */

public Length currentFontSize() throws PropertyException {

  return plist.get(Constants.PR_FONT_SIZE).getLength();

}

Location: PropertyInfo.java

Content: 

/** 

 * accessor for FObj

 * @return FObj

 */

public FObj getFO(){

  return fo;

}

Location: PropertyInfo.java

Content: 

private PercentBase getFunctionPercentBase(){

  if (stkFunction != null) {

    Function f=(Function)stkFunction.peek();

    if (f != null) {

      return f.getPercentBase();

    }

  }

  return null;

}

Location: PropertyInfo.java

Content: 

/** 

 * accessor for PropertyList

 * @return PropertyList object

 */

public PropertyList getPropertyList(){

  return plist;

}

Location: PropertyInfo.java

Content: 

/** 

 * accessor for PropertyMaker

 * @return PropertyMaker object

 */

public PropertyMaker getPropertyMaker(){

  return maker;

}

Location: PropertyInfo.java

Content: 

/** 

 * pop a function off of the function stack

 */

public void popFunction(){

  if (stkFunction != null) {

    stkFunction.pop();

  }

}

Location: PropertyInfo.java

Content: 

/** 

 * Constructor

 * @param maker Property.Maker object

 * @param plist PropertyList object

 */

public PropertyInfo(PropertyMaker maker,PropertyList plist){

  this.maker=maker;

  this.plist=plist;

  this.fo=plist.getParentFObj();

}

Location: PropertyInfo.java

Content: 

/** 

 * push a function onto the function stack

 * @param func function to push onto stack

 */

public void pushFunction(Function func){

  if (stkFunction == null) {

    stkFunction=new Stack();

  }

  stkFunction.push(func);

}

