Location: FODocumentParser.java

Content: 

/** 

 * Creates a new  {@link FOUserAgent}.

 * @return It

 */

public FOUserAgent createFOUserAgent(){

  FOUserAgent userAgent=FOP_FACTORY.newFOUserAgent();

  FOEventHandler foEventHandler=foEventHandlerFactory.newFOEventHandler(userAgent);

  userAgent.setFOEventHandlerOverride(foEventHandler);

  if (eventListener != null) {

    userAgent.getEventBroadcaster().addEventListener(eventListener);

  }

  return userAgent;

}

Location: FODocumentParser.java

Content: 

private void createTransformer(){

  try {

    transformer=TRANSFORMER_FACTORY.newTransformer();

  }

 catch (  TransformerConfigurationException e) {

    throw new RuntimeException(e);

  }

}

Location: FODocumentParser.java

Content: 

private FODocumentParser(FOEventHandlerFactory foeEventHandlerFactory){

  this.foEventHandlerFactory=foeEventHandlerFactory;

}

Location: FODocumentParser.java

Content: 

/** 

 * Creates and returns a new FO document parser. The given factory will be used to customize the handler that will receive FO events, using the {@link FOUserAgent#setFOEventHandlerOverride(FOEventHandler)} method.

 * @param foEventHandlerFactory the factory to be used to create {@code FOEventHandler} instances

 * @return a new parser

 */

public static FODocumentParser newInstance(FOEventHandlerFactory foEventHandlerFactory){

  return new FODocumentParser(foEventHandlerFactory);

}

Location: FODocumentParser.java

Content: 

/** 

 * Runs FOP on the given document.

 * @param document XSL-FO document to parse

 * @throws FOPException if an error occurs when initializing FOP

 * @throws LoadingException if an error occurs when parsing the document

 */

public void parse(InputStream document) throws FOPException, LoadingException {

  parse(document,createFOUserAgent());

}

Location: FODocumentParser.java

Content: 

/** 

 * Runs FOP on the given document with the supplied  {@link FOUserAgent}.

 * @param document XSL-FO document to parse

 * @param foUserAgent The user agent

 * @throws FOPException if an error occurs when initializing FOP

 * @throws LoadingException if an error occurs when parsing the document

 */

public void parse(InputStream document,FOUserAgent foUserAgent) throws FOPException, LoadingException {

  fop=FOP_FACTORY.newFop(foUserAgent);

  createTransformer();

  runTransformer(document);

}

Location: FODocumentParser.java

Content: 

private void runTransformer(InputStream input) throws LoadingException, FOPException {

  Source source=new StreamSource(input);

  Result result=new SAXResult(fop.getDefaultHandler());

  try {

    transformer.transform(source,result);

  }

 catch (  TransformerException e) {

    Throwable cause=e.getCause();

    throw new LoadingException(cause == null ? e : cause);

  }

}

Location: FODocumentParser.java

Content: 

/** 

 * Sets the event listener to be used if events occurs when parsing the document.

 * @param eventListener an event listener

 */

public void setEventListener(EventListener eventListener){

  this.eventListener=eventListener;

}

