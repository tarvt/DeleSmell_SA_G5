Location: FOTreeBuilder.java

Content: 

/** 

 * <code>FOTreeBuilder</code> constructor

 * @param outputFormat the MIME type of the output format to use (ex. "application/pdf").

 * @param foUserAgent   the {@link FOUserAgent} in effect for this process

 * @param stream    the <code>OutputStream</code> to direct the results to

 * @throws FOPException if the <code>FOTreeBuilder</code> cannot be properly created

 */

public FOTreeBuilder(String outputFormat,FOUserAgent foUserAgent,OutputStream stream) throws FOPException {

  this.userAgent=foUserAgent;

  this.elementMappingRegistry=userAgent.getElementMappingRegistry();

  foEventHandler=foUserAgent.getRendererFactory().createFOEventHandler(foUserAgent,outputFormat,stream);

  if (userAgent.isAccessibilityEnabled()) {

    foEventHandler=new FO2StructureTreeConverter(foUserAgent.getStructureTreeEventHandler(),foEventHandler);

  }

  builderContext=new FOTreeBuilderContext();

  builderContext.setPropertyListMaker(new PropertyListMaker(){

    public PropertyList make(    FObj fobj,    PropertyList parentPropertyList){

      return new StaticPropertyList(fobj,parentPropertyList);

    }

  }

);

}

Location: FOTreeBuilder.java

Content: 

/** 

 * @return a {@link Locator} instance if it is available and not disabled

 */

protected Locator getEffectiveLocator(){

  return (userAgent.isLocatorEnabled() ? this.locator : null);

}

Location: FOTreeBuilder.java

Content: 

/** 

 * Provides access to the underlying  {@link FOEventHandler} object.

 * @return the FOEventHandler object

 */

public FOEventHandler getEventHandler(){

  return foEventHandler;

}

