Location: EventProcessingTestCase.java

Content: 

public void doTest(InputStream inStream,URI fopConf,String expectedEventID,String mimeType) throws Exception {

  Map<String,Object> noParams=Collections.emptyMap();

  doTest(inStream,fopConf,expectedEventID,mimeType,noParams);

}

Location: EventProcessingTestCase.java

Content: 

public void doTest(InputStream inStream,URI fopConf,String expectedEventID,String mimeType,Map<String,Object> expectedParams) throws Exception {

  EventChecker eventChecker=new EventChecker(expectedEventID,expectedParams);

  FopFactory fopFactory;

  if (fopConf != null) {

    fopFactory=FopFactory.newInstance(new File(fopConf));

  }

 else {

    fopFactory=FopFactory.newInstance(BASE_DIR);

  }

  FOUserAgent userAgent=fopFactory.newFOUserAgent();

  userAgent.getEventBroadcaster().addEventListener(eventChecker);

  Fop fop=fopFactory.newFop(mimeType,userAgent,new NullOutputStream());

  Transformer transformer=tFactory.newTransformer();

  Source src=new StreamSource(inStream);

  Result res=new SAXResult(fop.getDefaultHandler());

  transformer.transform(src,res);

  eventChecker.end();

}

Location: EventProcessingTestCase.java

Content: 

public void doTest(String filename,String expectedEventID) throws Exception {

  doTest(BASE_DIR.resolve(filename).toURL().openStream(),null,expectedEventID,MimeConstants.MIME_PDF);

}

Location: EventProcessingTestCase.java

Content: 

public void doTest(String filename,String expectedEventID,Map<String,Object> expectedParams) throws Exception {

  doTest(BASE_DIR.resolve(filename).toURL().openStream(),null,expectedEventID,MimeConstants.MIME_PDF,expectedParams);

}

Location: EventProcessingTestCase.java

Content: 

@Test public void testArea() throws Exception {

  doTest("area.fo",AreaEventProducer.class.getName() + ".unresolvedIDReferenceOnPage");

}

Location: EventProcessingTestCase.java

Content: 

@Test public void testBlockLevel() throws Exception {

  doTest("block-level.fo",BlockLevelEventProducer.class.getName() + ".overconstrainedAdjustEndIndent");

}

Location: EventProcessingTestCase.java

Content: 

@Test public void testBookmarks() throws Exception {

  doTest("bookmarks.fo",AreaEventProducer.class.getName() + ".unresolvedIDReference");

}

Location: EventProcessingTestCase.java

Content: 

@Test public void testHyphenationNotFound() throws Exception {

  Map<String,Object> noParams=Collections.emptyMap();

  doTest(BASE_DIR.resolve("hyphenation.fo").toURL().openStream(),new File("test/events/hyphenationfop.xconf").toURI(),ResourceEventProducer.class.getName() + ".hyphenationNotFound",MimeConstants.MIME_PDF,noParams);

}

Location: EventProcessingTestCase.java

Content: 

@Test public void testInlineLevel() throws Exception {

  doTest("inline-level.fo",InlineLevelEventProducer.class.getName() + ".lineOverflows");

}

Location: EventProcessingTestCase.java

Content: 

@Test public void testPageOverflow() throws Exception {

  Map<String,Object> params=new HashMap<String,Object>();

  params.put("page","1");

  doTest("region-body_overflow.fo",BlockLevelEventProducer.class.getName() + ".regionOverflow",params);

}

Location: EventProcessingTestCase.java

Content: 

@Test public void testResource() throws Exception {

  doTest("resource.fo",ResourceEventProducer.class.getName() + ".imageNotFound");

}

Location: EventProcessingTestCase.java

Content: 

@Test public void testTable() throws Exception {

  doTest("table.fo",TableEventProducer.class.getName() + ".noTablePaddingWithCollapsingBorderModel");

}

Location: EventProcessingTestCase.java

Content: 

@Test public void testValidation() throws Exception {

  doTest("validation.fo",FOValidationEventProducer.class.getName() + ".invalidPropertyValue");

}

Location: EventProcessingTestCase.java

Content: 

@Test public void testViewportBPDOverflow() throws Exception {

  doTest("viewport-overflow.fo",BlockLevelEventProducer.class.getName() + ".viewportBPDOverflow");

}

Location: EventProcessingTestCase.java

Content: 

@Test public void testViewportIPDOverflow() throws Exception {

  doTest("viewport-overflow.fo",BlockLevelEventProducer.class.getName() + ".viewportIPDOverflow");

}

