Location: ImageRawPNGAdapter.java

Content: 

/** 

 * {@inheritDoc} 

 */

public String getMask(){

  return maskRef;

}

Location: ImageRawPNGAdapter.java

Content: 

/** 

 * {@inheritDoc} 

 */

public String getSoftMask(){

  return softMask.toString();

}

Location: ImageRawPNGAdapter.java

Content: 

/** 

 * {@inheritDoc} 

 */

public PDFReference getSoftMaskReference(){

  return softMask;

}

Location: ImageRawPNGAdapter.java

Content: 

/** 

 * {@inheritDoc} 

 */

public PDFColor getTransparentColor(){

  return new PDFColor(((ImageRawPNG)this.image).getTransparentColor());

}

Location: ImageRawPNGAdapter.java

Content: 

/** 

 * Creates a new PDFImage from an Image instance.

 * @param image the image

 * @param key XObject key

 */

public ImageRawPNGAdapter(ImageRawPNG image,String key){

  super(image,key);

}

Location: ImageRawPNGAdapter.java

Content: 

protected boolean issRGB(){

  if (((ImageRawPNG)image).getRenderingIntent() != -1) {

    return true;

  }

  return false;

}

Location: ImageRawPNGAdapter.java

Content: 

/** 

 * {@inheritDoc} 

 */

public boolean isTransparent(){

  return ((ImageRawPNG)this.image).isTransparent();

}

Location: ImageRawPNGAdapter.java

Content: 

public void populateXObjectDictionary(PDFDictionary dict){

  int renderingIntent=((ImageRawPNG)image).getRenderingIntent();

  if (renderingIntent != -1) {

switch (renderingIntent) {

case 0:

      dict.put("Intent",RI_PERCEPTUAL);

    break;

case 1:

  dict.put("Intent",RI_RELATIVE_COLORIMETRIC);

break;

case 2:

dict.put("Intent",RI_SATURATION);

break;

case 3:

dict.put("Intent",RI_ABSOLUTE_COLORIMETRIC);

break;

default :

}

}

ColorModel cm=((ImageRawPNG)image).getColorModel();

if (cm instanceof IndexColorModel) {

IndexColorModel icm=(IndexColorModel)cm;

super.populateXObjectDictionaryForIndexColorModel(dict,icm);

}

}

