Location: Fop.java

Content: 

/** 

 * Adds a set of XSL-FO files (nested fileset attribute).

 * @param set a fileset

 */

public void addFileset(FileSet set){

  filesets.add(set);

}

Location: Fop.java

Content: 

/** 

 * Creates a DefaultHandler object used to generate the document. Note this object implements the ContentHandler interface. For processing with a Transformer object, this DefaultHandler object can be used in the SAXResult constructor. Alternatively, for processing with a SAXParser, this object can be used as the DefaultHandler argument to its parse() methods.

 * @throws FOPException if setting up the DefaultHandler fails

 */

private void createDefaultHandler() throws FOPException {

  this.foTreeBuilder=new FOTreeBuilder(outputFormat,foUserAgent,stream);

}

Location: Fop.java

Content: 

private String determineExtension(String outputFormat){

  for (  String[] extension : EXTENSIONS) {

    if (extension[0].equals(outputFormat)) {

      String ext=extension[1];

      if (ext == null) {

        throw new RuntimeException("Output format '" + outputFormat + "' does not produce a file.");

      }

 else {

        return ext;

      }

    }

  }

  return ".unk";

}

Location: Fop.java

Content: 

FOPTaskStarter(Fop task) throws SAXException, IOException {

  this.task=task;

  if (task.getBasedir() != null) {

    this.baseUri=task.getBasedir().toURI();

  }

 else {

    if (task.getFofile() != null) {

      this.baseUri=task.getFofile().getParentFile().toURI();

    }

  }

  if (task.getUserconfig() != null) {

    FopFactoryBuilder confBuilder=new FopConfParser(task.getUserconfig()).getFopFactoryBuilder();

    confBuilder.setBaseURI(baseUri);

    fopFactory=confBuilder.build();

  }

 else {

    fopFactory=FopFactory.newInstance(baseUri);

  }

}

Location: Fop.java

Content: 

/** 

 * Constructor for use with already-created FOUserAgents. It uses MIME types to select the output format (ex. "application/pdf" for PDF).

 * @param outputFormat the MIME type of the output format to use (ex. "application/pdf").

 * @param ua FOUserAgent object

 * @param stream the output stream

 * @throws FOPException if setting up the DefaultHandler fails

 */

Fop(String outputFormat,FOUserAgent ua,OutputStream stream) throws FOPException {

  if (ua == null) {

    throw new FOPException("Cannot create a new Fop instance without a User Agent.");

  }

  this.outputFormat=outputFormat;

  foUserAgent=ua;

  this.stream=stream;

  createDefaultHandler();

}

Location: Fop.java

Content: 

/** 

 * Returns the DefaultHandler object that will receive the SAX stream containing the FO document to be rendered.

 * @return the SAX DefaultHandler for handling the SAX events.

 * @throws FOPException if setting up the DefaultHandler fails

 */

public DefaultHandler getDefaultHandler() throws FOPException {

  if (foTreeBuilder == null) {

    createDefaultHandler();

  }

  return this.foTreeBuilder;

}

Location: Fop.java

Content: 

/** 

 * Returns the current list of filesets.

 * @return the filesets

 */

public List getFilesets(){

  return this.filesets;

}

Location: Fop.java

Content: 

/** 

 * Gets the input XSL-FO file.

 * @return input XSL-FO file

 */

public File getFofile(){

  return foFile;

}

Location: Fop.java

Content: 

/** 

 * Gets the force attribute

 * @return the force attribute

 */

public boolean getForce(){

  return force;

}

Location: Fop.java

Content: 

/** 

 * Gets the output format (MIME type).

 * @return the output format

 */

public String getFormat(){

  return this.format;

}

Location: Fop.java

Content: 

/** 

 * Returns True if the filename of each file processed should be logged.

 * @return True if the filenames should be logged.

 */

public boolean getLogFiles(){

  return this.logFiles;

}

Location: Fop.java

Content: 

/** 

 * Returns the Commons-Logging instance for this class

 * @return  The Commons-Logging instance

 */

protected Log getLogger(){

  return logger;

}

Location: Fop.java

Content: 

/** 

 * Returns the message type corresponding to Project.MSG_ representing the current message level.

 * @return message type

 * @see org.apache.tools.ant.Project

 */

public int getMessageType(){

  return messageType;

}

Location: Fop.java

Content: 

/** 

 * Gets the output directory.

 * @return the output directory

 */

public File getOutdir(){

  return this.outDir;

}

Location: Fop.java

Content: 

/** 

 * Gets the output file.

 * @return the output file

 */

public File getOutfile(){

  return this.outFile;

}

Location: Fop.java

Content: 

/** 

 * Gets the relative base attribute

 * @return the relative base attribute

 */

public boolean getRelativebase(){

  return relativebase;

}

Location: Fop.java

Content: 

/** 

 * Gets the throw exceptions attribute

 * @return the throw exceptions attribute

 */

public boolean getThrowexceptions(){

  return this.throwExceptions;

}

Location: Fop.java

Content: 

/** 

 * Gets the input XSLT file.

 * @return the input XSLT file.

 */

public File getXsltFile(){

  return xsltFile;

}

Location: Fop.java

Content: 

/** 

 * Gets the XSLT parameters

 * @return the XSLT parameters

 */

public String getXsltParams(){

  return xsltParams;

}

Location: Fop.java

Content: 

private String normalizeOutputFormat(String format){

  if (format == null) {

    return MimeConstants.MIME_PDF;

  }

  for (  String[] shortName : SHORT_NAMES) {

    if (shortName[0].equals(format)) {

      return shortName[1];

    }

  }

  return format;

}

Location: Fop.java

Content: 

private void renderInputHandler(InputHandler inputHandler,File outFile,String outputFormat) throws Exception {

  OutputStream out=null;

  try {

    out=new java.io.FileOutputStream(outFile);

    out=new BufferedOutputStream(out);

  }

 catch (  Exception ex) {

    throw new BuildException("Failed to open " + outFile,ex);

  }

  boolean success=false;

  try {

    FOUserAgent userAgent=fopFactory.newFOUserAgent();

    inputHandler.renderTo(userAgent,outputFormat,out);

    success=true;

  }

 catch (  Exception ex) {

    if (task.getThrowexceptions()) {

      throw new BuildException(ex);

    }

    throw ex;

  }

 finally {

    try {

      out.close();

    }

 catch (    IOException ioe) {

      logger.error("Error closing output file",ioe);

    }

    if (!success) {

      outFile.delete();

    }

  }

}

Location: Fop.java

Content: 

private void render(File xmlFile,File xsltFile,File outFile,String outputFormat){

  InputHandler inputHandler=new InputHandler(xmlFile,xsltFile,null);

  try {

    renderInputHandler(inputHandler,outFile,outputFormat);

  }

 catch (  Exception ex) {

    logger.error("Error rendering xml/xslt files: " + xmlFile + ", "+ xsltFile,ex);

  }

  if (task.getLogFiles()) {

    task.log("xml: " + xmlFile + ", xslt: "+ xsltFile+ " -> "+ outFile,Project.MSG_INFO);

  }

}

Location: Fop.java

Content: 

private void render(File foFile,File outFile,String outputFormat) throws FOPException {

  InputHandler inputHandler=new InputHandler(foFile);

  try {

    renderInputHandler(inputHandler,outFile,outputFormat);

  }

 catch (  Exception ex) {

    logger.error("Error rendering fo file: " + foFile,ex);

  }

  if (task.getLogFiles()) {

    task.log(foFile + " -> " + outFile,Project.MSG_INFO);

  }

}

Location: Fop.java

Content: 

private File replaceExtension(File file,String expectedExt,String newExt){

  String name=file.getName();

  if (name.toLowerCase().endsWith(expectedExt)) {

    name=name.substring(0,name.length() - expectedExt.length());

  }

  name=name.concat(newExt);

  return new File(file.getParentFile(),name);

}

Location: Fop.java

Content: 

/** 

 * Sets the base directory for single FO file (non-fileset) usage

 * @param baseDir File to use as a working directory

 */

public void setBasedir(File baseDir){

  this.baseDir=baseDir;

}

Location: Fop.java

Content: 

/** 

 * Sets the input XSL-FO file.

 * @param foFile input XSL-FO file

 */

public void setFofile(File foFile){

  this.foFile=foFile;

}

Location: Fop.java

Content: 

/** 

 * Set whether to check dependencies, or to always generate; optional, default is false.

 * @param force true if always generate.

 */

public void setForce(boolean force){

  this.force=force;

}

Location: Fop.java

Content: 

/** 

 * Sets output format (MIME type).

 * @param format the output format

 */

public void setFormat(String format){

  this.format=format;

}

Location: Fop.java

Content: 

/** 

 * Controls whether the filenames of the files that are processed are logged or not.

 * @param logFiles True if the feature should be enabled

 */

public void setLogFiles(boolean logFiles){

  this.logFiles=logFiles;

}

Location: Fop.java

Content: 

/** 

 * Sets the Commons-Logging instance for this class

 * @param logger The Commons-Logging instance

 */

public void setLogger(Log logger){

  this.logger=logger;

}

Location: Fop.java

Content: 

/** 

 * Sets the message level to be used while processing.

 * @param messageLevel (error | warn| info | verbose | debug)

 */

public void setMessagelevel(String messageLevel){

  if (messageLevel.equalsIgnoreCase("info")) {

    messageType=Project.MSG_INFO;

  }

 else   if (messageLevel.equalsIgnoreCase("verbose")) {

    messageType=Project.MSG_VERBOSE;

  }

 else   if (messageLevel.equalsIgnoreCase("debug")) {

    messageType=Project.MSG_DEBUG;

  }

 else   if (messageLevel.equalsIgnoreCase("err") || messageLevel.equalsIgnoreCase("error")) {

    messageType=Project.MSG_ERR;

  }

 else   if (messageLevel.equalsIgnoreCase("warn")) {

    messageType=Project.MSG_WARN;

  }

 else {

    log("messagelevel set to unknown value \"" + messageLevel + "\"",Project.MSG_ERR);

    throw new BuildException("unknown messagelevel");

  }

}

Location: Fop.java

Content: 

/** 

 * Sets the output directory.

 * @param outDir Directory to output to

 */

public void setOutdir(File outDir){

  this.outDir=outDir;

}

Location: Fop.java

Content: 

/** 

 * Sets the output file.

 * @param outFile File to output to

 */

public void setOutfile(File outFile){

  this.outFile=outFile;

}

Location: Fop.java

Content: 

/** 

 * Set whether to include files (external-graphics, instream-foreign-object) from a path relative to the .fo file (true) or the working directory (false, default) only useful for filesets

 * @param relbase true if paths are relative to file.

 */

public void setRelativebase(boolean relbase){

  this.relativebase=relbase;

}

Location: Fop.java

Content: 

/** 

 * Set whether exceptions are thrown. default is false.

 * @param throwExceptions true if exceptions should be thrown

 */

public void setThrowexceptions(boolean throwExceptions){

  this.throwExceptions=throwExceptions;

}

Location: Fop.java

Content: 

/** 

 * Sets the filename for the userconfig.xml.

 * @param userConfig Configuration to use

 */

public void setUserconfig(File userConfig){

  this.userConfig=userConfig;

}

Location: Fop.java

Content: 

/** 

 * Sets the input XML file.

 * @param xmlFile the input XML file.

 */

public void setXmlFile(File xmlFile){

  this.xmlFile=xmlFile;

}

Location: Fop.java

Content: 

/** 

 * Sets the input XSLT file.

 * @param xsltFile the input XSLT file.

 */

public void setXsltFile(File xsltFile){

  this.xsltFile=xsltFile;

}

Location: Fop.java

Content: 

/** 

 * Sets the XSLT parameters

 * @param xsltParams the XSLT parameters

 */

public void setXsltParams(String xsltParams){

  this.xsltParams=xsltParams;

}

