Location: RtfTable.java

Content: 

/** 

 * Returns the RtfAttributes for the borders of the table.

 * @return Border attributes of the table.

 */

public RtfAttributes getBorderAttributes(){

  return borderAttributes;

}

Location: RtfTable.java

Content: 

/** 

 * @return RtfAttributes of Header

 */

public RtfAttributes getHeaderAttribs(){

  return headerAttribs;

}

Location: RtfTable.java

Content: 

/** 

 * Added by Boris Poudérous on 07/22/2002

 * @return ITableColumnsInfo for this table

 */

public ITableColumnsInfo getITableColumnsInfo(){

  return this.tableContext;

}

Location: RtfTable.java

Content: 

/** 

 * Returns the nested table depth.

 * @return the nested table depth

 */

public int getNestedTableDepth(){

  return this.nestedTableDepth;

}

Location: RtfTable.java

Content: 

/** 

 * @return Parent row table (for nested tables only)

 */

public RtfTableRow getRow(){

  RtfElement e=this;

  while (e.parent != null) {

    if (e.parent instanceof RtfTableRow) {

      return (RtfTableRow)e.parent;

    }

    e=e.parent;

  }

  return null;

}

Location: RtfTable.java

Content: 

/** 

 * Added by Normand Masse

 * @return the table-header attributes if they are present, otherwise theparent's attributes are returned normally.

 */

public RtfAttributes getRtfAttributes(){

  if (headerAttribs != null) {

    return headerAttribs;

  }

  return super.getRtfAttributes();

}

Location: RtfTable.java

Content: 

/** 

 * @param id row to check (??)

 * @return true if id is the highestRow

 */

public boolean isHighestRow(int id){

  return (highestRow == id) ? true : false;

}

Location: RtfTable.java

Content: 

/** 

 * @return true if the the table is a nested table 

 */

public boolean isNestedTable(){

  if (isNestedTable == null) {

    RtfElement e=this;

    while (e.parent != null) {

      if (e.parent instanceof RtfTableCell) {

        isNestedTable=Boolean.TRUE;

        return true;

      }

      e=e.parent;

    }

    isNestedTable=Boolean.FALSE;

  }

 else {

    return isNestedTable;

  }

  return false;

}

Location: RtfTable.java

Content: 

/** 

 * Close current row if any and start a new one

 * @return new RtfTableRow

 * @throws IOException for I/O problems

 */

public RtfTableRow newTableRow() throws IOException {

  if (row != null) {

    row.close();

  }

  highestRow++;

  row=new RtfTableRow(this,writer,attrib,highestRow);

  return row;

}

Location: RtfTable.java

Content: 

/** 

 * Close current row if any and start a new one

 * @param attrs attributs of new RtfTableRow

 * @return new RtfTableRow

 * @throws IOException for I/O problems

 * @throws FOPException if attributes cannot be cloned

 */

public RtfTableRow newTableRow(RtfAttributes attrs) throws IOException, FOPException {

  RtfAttributes attr=null;

  if (attrib != null) {

    try {

      attr=(RtfAttributes)attrib.clone();

    }

 catch (    CloneNotSupportedException e) {

      throw new FOPException(e);

    }

    attr.set(attrs);

  }

 else {

    attr=attrs;

  }

  if (row != null) {

    row.close();

  }

  highestRow++;

  row=new RtfTableRow(this,writer,attr,highestRow);

  return row;

}

Location: RtfTable.java

Content: 

/** 

 * Create an RTF element as a child of given container 

 */

RtfTable(IRtfTableContainer parent,Writer w,ITableColumnsInfo tc) throws IOException {

  super((RtfContainer)parent,w);

  tableContext=tc;

}

Location: RtfTable.java

Content: 

/** 

 * Create an RTF element as a child of given container Modified by Boris Poudérous in order to process 'number-columns-spanned' attribute

 */

RtfTable(IRtfTableContainer parent,Writer w,RtfAttributes attrs,ITableColumnsInfo tc) throws IOException {

  super((RtfContainer)parent,w,attrs);

  tableContext=tc;

}

Location: RtfTable.java

Content: 

/** 

 * Sets the RtfAttributes for the borders of the table.

 * @param attributes Border attributes of the table.

 */

public void setBorderAttributes(RtfAttributes attributes){

  borderAttributes=attributes;

}

Location: RtfTable.java

Content: 

/** 

 * Added by Normand Masse Support for table-header attributes (used instead of table attributes)

 * @param attrs attributes to be set

 */

public void setHeaderAttribs(RtfAttributes attrs){

  headerAttribs=attrs;

}

Location: RtfTable.java

Content: 

/** 

 * Sets the nested table depth.

 * @param nestedTableDepth the nested table depth

 */

public void setNestedTableDepth(int nestedTableDepth){

  this.nestedTableDepth=nestedTableDepth;

}

