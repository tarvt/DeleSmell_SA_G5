Location: AFPResourceManagerTestCase.java

Content: 

private AFPDataObjectInfo createAFPDataObjectInfo(){

  AFPDataObjectInfo dataInfo=new AFPDataObjectInfo();

  dataInfo.setMimeType(MimeConstants.MIME_TIFF);

  dataInfo.setData(new byte[1]);

  AFPObjectAreaInfo objectAreaInfo=new AFPObjectAreaInfo(0,0,10,10,1,0);

  dataInfo.setObjectAreaInfo(objectAreaInfo);

  return dataInfo;

}

Location: AFPResourceManagerTestCase.java

Content: 

private AFPGraphicsObjectInfo createAFPGraphicsObjectInfo(){

  final AFPGraphicsObjectInfo dataInfo=new AFPGraphicsObjectInfo();

  final String uri="test";

  dataInfo.setUri(uri);

  AFPGraphics2D graphics2D=new AFPGraphics2D(false,new AFPPaintingState(),null,null,null);

  graphics2D.setGraphicContext(new GraphicContext());

  dataInfo.setGraphics2D(graphics2D);

  dataInfo.setPainter(new Graphics2DImagePainter(){

    public void paint(    Graphics2D g2d,    Rectangle2D area){

      try {

        AFPDataObjectInfo dataObjectInfo=createAFPDataObjectInfo();

        dataObjectInfo.setUri(uri);

        sut.createObject(dataObjectInfo);

      }

 catch (      IOException e) {

        throw new RuntimeException(e);

      }

    }

    public Dimension getImageSize(){

      return null;

    }

  }

);

  dataInfo.setObjectAreaInfo(new AFPObjectAreaInfo(0,0,0,0,0,0));

  return dataInfo;

}

Location: AFPResourceManagerTestCase.java

Content: 

@Test public void testIncludeObject() throws IOException {

  sut.createObject(createAFPGraphicsObjectInfo());

  sut.createObject(createAFPGraphicsObjectInfo());

  StringBuilder sb=new StringBuilder();

  ByteArrayOutputStream bos=new ByteArrayOutputStream();

  sut.getDataStream().getCurrentPage().writeToStream(bos);

  new AFPParser(true).read(new ByteArrayInputStream(bos.toByteArray()),sb);

  assertEquals(sb.toString(),"BEGIN PAGE PGN00001\n" + "BEGIN ACTIVE_ENVIRONMENT_GROUP AEG00001\n" + "DESCRIPTOR PAGE\n"+ "MIGRATION PRESENTATION_TEXT\n"+ "END ACTIVE_ENVIRONMENT_GROUP AEG00001\n"+ "INCLUDE DATA_RESOURCE\n"+ "INCLUDE DATA_RESOURCE\n"+ "INCLUDE DATA_RESOURCE\n"+ "INCLUDE DATA_RESOURCE\n");

}

Location: AFPResourceManagerTestCase.java

Content: 

/** 

 * Ensures that if tryIncludeObject() is called with a new object, it returns false suggesting that we have to create said object. However, if it is called with an object that has already been created, it returns true suggesting that we don't have to create that object again. Page-segment is false.

 * @throws IOException if an I/O error occurs

 */

@Test public void testTryIncludeObjectWithPageSegFalse() throws IOException {

  AFPDataObjectInfo dataInfo=createAFPDataObjectInfo();

  assertFalse(sut.tryIncludeObject(dataInfo));

  sut.createObject(dataInfo);

  assertTrue(sut.tryIncludeObject(dataInfo));

}

Location: AFPResourceManagerTestCase.java

Content: 

/** 

 * {@code testTryIncludeObjectWithPageSegFalse()} but with page-segment true.

 * @throws IOException if an I/O error occurs

 */

@Test public void testTryIncludeObjectWithPageSegTrue() throws IOException {

  AFPDataObjectInfo dataInfo=createAFPDataObjectInfo();

  dataInfo.setCreatePageSegment(true);

  assertFalse(sut.tryIncludeObject(dataInfo));

  sut.createObject(dataInfo);

  assertTrue(sut.tryIncludeObject(dataInfo));

}

