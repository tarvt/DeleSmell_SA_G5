Location: FO2StructureTreeConverter.java

Content: 

private void content(Event event,boolean hasContent){

  if (getUserAgent().isKeepEmptyTags()) {

    event.run();

  }

 else {

    currentNode.add(event);

    event.hasContent=hasContent;

  }

}

Location: FO2StructureTreeConverter.java

Content: 

private void endContent(Event event){

  if (getUserAgent().isKeepEmptyTags()) {

    event.run();

  }

 else {

    currentNode.add(event);

    currentNode=currentNode.parent;

    if (currentNode == root) {

      root.run();

    }

  }

}

Location: FO2StructureTreeConverter.java

Content: 

/** 

 * Creates a new instance.

 * @param structureTreeEventHandler the object that will hold the structure tree

 * @param delegate the FO event handler that must be wrapped by this instance

 */

public FO2StructureTreeConverter(StructureTreeEventHandler structureTreeEventHandler,FOEventHandler delegate){

  super(delegate);

  this.structureTreeEventTrigger=new StructureTreeEventTrigger(structureTreeEventHandler);

  this.converter=structureTreeEventTrigger;

}

Location: FO2StructureTreeConverter.java

Content: 

private void handleEndArtifact(CommonAccessibilityHolder fobj){

  if (isArtifact(fobj)) {

    converter=converters.pop();

  }

}

Location: FO2StructureTreeConverter.java

Content: 

private void handleStartArtifact(CommonAccessibilityHolder fobj){

  if (isArtifact(fobj)) {

    converters.push(converter);

    converter=eventSwallower;

  }

}

Location: FO2StructureTreeConverter.java

Content: 

private boolean isArtifact(CommonAccessibilityHolder fobj){

  CommonAccessibility accessibility=fobj.getCommonAccessibility();

  return Accessibility.ROLE_ARTIFACT.equalsIgnoreCase(accessibility.getRole());

}

Location: FO2StructureTreeConverter.java

Content: 

private void startContent(Event event,boolean hasContent){

  if (getUserAgent().isKeepEmptyTags()) {

    event.run();

  }

 else {

    Event node=new Event(currentNode);

    event.hasContent=hasContent;

    node.add(event);

    currentNode.add(node);

    currentNode=node;

  }

}

