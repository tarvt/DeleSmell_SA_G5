Location: RetrieveTableMarkerLayoutManagerTestCase.java

Content: 

@Test public void testGetNextKnuthElementsLayoutContextInt(){

  LayoutContext lc=LayoutContext.newInstance();

  Table t=mock(Table.class);

  RetrieveTableMarker rtm=mock(RetrieveTableMarker.class);

  when(rtm.getRetrieveClassName()).thenReturn("A");

  when(rtm.getPosition()).thenReturn(Constants.EN_FIRST_STARTING);

  when(rtm.getBoundary()).thenReturn(Constants.EN_TABLE_FRAGMENT);

  TextLayoutManager tlm=mock(TextLayoutManager.class);

  LayoutManagerMapping lmm=mock(LayoutManagerMapping.class);

  when(lmm.makeLayoutManager(rtm)).thenReturn(tlm);

  PageSequenceLayoutManager pslm=mock(PageSequenceLayoutManager.class);

  when(pslm.getPSLM()).thenReturn(pslm);

  when(pslm.getLayoutManagerMaker()).thenReturn(lmm);

  TableLayoutManager tablelm=mock(TableLayoutManager.class);

  when(tablelm.getTable()).thenReturn(t);

  BlockLayoutManager blm=mock(BlockLayoutManager.class);

  when(blm.getPSLM()).thenReturn(pslm);

  when(blm.getParent()).thenReturn(tablelm);

  RetrieveTableMarkerLayoutManager rtmlm=new RetrieveTableMarkerLayoutManager(rtm);

  rtmlm.setParent(blm);

  when(tablelm.resolveRetrieveTableMarker(rtm)).thenReturn(null);

  assertNull(rtmlm.getNextKnuthElements(lc,0));

  List l=new ArrayList();

  when(tablelm.resolveRetrieveTableMarker(rtm)).thenReturn(rtm);

  when(tlm.getNextKnuthElements(lc,0)).thenReturn(l);

  assertEquals(l,rtmlm.getNextKnuthElements(lc,0));

  verify(tlm).setParent(blm);

  verify(tlm).initialize();

}

