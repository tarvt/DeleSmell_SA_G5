Location: InlineRun.java

Content: 

private String generateLevels(int[] levels){

  StringBuffer lb=new StringBuffer();

  int maxLevel=-1;

  int numLevels=levels.length;

  for (  int l : levels) {

    if (l > maxLevel) {

      maxLevel=l;

    }

  }

  if (maxLevel < 0) {

  }

 else   if (maxLevel < 10) {

    for (    int level : levels) {

      lb.append((char)('0' + level));

    }

  }

 else {

    boolean first=true;

    for (    int level : levels) {

      if (first) {

        first=false;

      }

 else {

        lb.append(',');

      }

      lb.append(level);

    }

  }

  return lb.toString();

}

Location: InlineRun.java

Content: 

/** 

 * Obtain inline area that generated this inline run.

 * @return inline area that generated this inline run.

 */

public InlineArea getInline(){

  return inline;

}

Location: InlineRun.java

Content: 

/** 

 * Obtain maximum bidi level for this run.

 * @return maximum bidi level

 */

public int getMaxLevel(){

  return maxLevel;

}

Location: InlineRun.java

Content: 

/** 

 * Obtain minimum bidi level for this run.

 * @return minimum bidi level

 */

public int getMinLevel(){

  return minLevel;

}

Location: InlineRun.java

Content: 

/** 

 * Primary constructor.

 * @param inline which generated this inline run

 * @param levels levels array

 */

public InlineRun(InlineArea inline,int[] levels){

  assert inline != null;

  assert levels != null;

  this.inline=inline;

  this.levels=levels;

  setMinMax(levels);

}

Location: InlineRun.java

Content: 

/** 

 * Alternate constructor.

 * @param inline which generated this inline run

 * @param level for each index

 * @param count of indices

 */

public InlineRun(InlineArea inline,int level,int count){

  this(inline,makeLevels(level,count));

}

Location: InlineRun.java

Content: 

/** 

 * Determine if this run has homogenous (same valued) bidi levels.

 * @return true if homogenous

 */

public boolean isHomogenous(){

  return minLevel == maxLevel;

}

Location: InlineRun.java

Content: 

private static int[] makeLevels(int level,int count){

  int[] levels=new int[count > 0 ? count : 1];

  Arrays.fill(levels,level);

  return levels;

}

Location: InlineRun.java

Content: 

/** 

 * Determine if run needs mirroring.

 * @return true if run is homogenous and (positive) odd (i.e., right to left)

 */

public boolean maybeNeedsMirroring(){

  return (minLevel == maxLevel) && (minLevel > 0) && ((minLevel & 1) != 0);

}

Location: InlineRun.java

Content: 

/** 

 * Reverse inline area if it is a word area and it requires reversal.

 * @param mirror if true then also mirror characters

 */

public void maybeReverseWord(boolean mirror){

  if (inline instanceof WordArea) {

    WordArea w=(WordArea)inline;

    if (!w.isReversed()) {

      if ((reversals & 1) != 0) {

        w.reverse(mirror);

      }

 else       if (mirror && maybeNeedsMirroring()) {

        w.mirror();

      }

    }

  }

}

Location: InlineRun.java

Content: 

/** 

 * Reverse run (by incrementing reversal count, not actually reversing).

 */

public void reverse(){

  reversals++;

}

Location: InlineRun.java

Content: 

private void setMinMax(int[] levels){

  int mn=Integer.MAX_VALUE;

  int mx=Integer.MIN_VALUE;

  if ((levels != null) && (levels.length > 0)) {

    for (    int l : levels) {

      if (l < mn) {

        mn=l;

      }

      if (l > mx) {

        mx=l;

      }

    }

  }

 else {

    mn=mx=-1;

  }

  this.minLevel=mn;

  this.maxLevel=mx;

}

Location: InlineRun.java

Content: 

/** 

 * Split this inline run into homogenous runs.

 * @return list of new runs

 */

public List split(){

  List runs=new Vector();

  for (int i=0, n=levels.length; i < n; ) {

    int l=levels[i];

    int s=i;

    int e=s;

    while (e < n) {

      if (levels[e] != l) {

        break;

      }

 else {

        e++;

      }

    }

    if (s < e) {

      runs.add(new InlineRun(inline,l,e - s));

    }

    i=e;

  }

  assert runs.size() < 2 : "heterogeneous inlines not yet supported!!";

  return runs;

}

Location: InlineRun.java

Content: 

/** 

 * Update a min/max array to correspond with this run's min/max values.

 * @param mm reference to min/max array

 */

public void updateMinMax(int[] mm){

  if (minLevel < mm[0]) {

    mm[0]=minLevel;

  }

  if (maxLevel > mm[1]) {

    mm[1]=maxLevel;

  }

}

