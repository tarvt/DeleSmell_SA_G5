Location: FOPGVTFontTestCase.java

Content: 

@Before public void createFont(){

  Font f=mock(Font.class);

  when(f.hasChar(eq((char)0))).thenReturn(false);

  when(f.hasChar(eq((char)1))).thenReturn(true);

  font=new FOPGVTFont(f,null);

}

Location: FOPGVTFontTestCase.java

Content: 

@Test public void testCanDisplayUpTo(){

  char[] text=new char[]{1,1,1};

  testCanDisplayUpToVariants(text,-1,0,3);

  testCanDisplayUpToVariants(text,-1,1,3);

  text=new char[]{1,1,0,1};

  testCanDisplayUpToVariants(text,2,0,4);

  testCanDisplayUpToVariants(text,2,1,4);

  testCanDisplayUpToVariants(text,2,2,4);

  testCanDisplayUpToVariants(text,-1,3,4);

  testCanDisplayUpToVariants(text,-1,1,2);

}

Location: FOPGVTFontTestCase.java

Content: 

@Test public void testCanDisplayUpToString(){

  assertEquals(-1,font.canDisplayUpTo(new String(new char[]{1,1,1})));

  assertEquals(0,font.canDisplayUpTo(new String(new char[]{0,1,1})));

  assertEquals(1,font.canDisplayUpTo(new String(new char[]{1,0,1})));

  assertEquals(2,font.canDisplayUpTo(new String(new char[]{1,1,0})));

}

Location: FOPGVTFontTestCase.java

Content: 

private void testCanDisplayUpToVariants(char[] text,int expected,int start,int limit){

  assertEquals(expected,font.canDisplayUpTo(text,start,limit));

  assertEquals(expected,font.canDisplayUpTo(new StringCharacterIterator(new String(text)),start,limit));

}

