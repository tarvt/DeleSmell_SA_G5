Location: SolidAndDoubleBorderElement.java

Content: 

/** 

 * Maps to char.

 * @return resulting mapping char

 */

private char map2Char(){

  int key=0;

  key+=data[UP] * UP3;

  key+=data[LEFT] * LEFT3;

  key+=data[DOWN] * DOWN3;

  key+=data[RIGHT] * RIGHT3;

  return MAP[key];

}

Location: SolidAndDoubleBorderElement.java

Content: 

/** 

 * Initializes a newly created <code>SolidAndDoubleBorderElement</code> object so that it represents an empty border element.

 */

public SolidAndDoubleBorderElement(){

}

Location: SolidAndDoubleBorderElement.java

Content: 

/** 

 * Constructs a newly allocated <code>SolidAndDoubleBorderElement</code> object. Fills <code>data</code> using binary representation of <code>type</code>. If border style is EN_DOUBLE, multiplies <code>data[side]</code> by 2 for every side to distinguish EN_SOLID and EN_DOUBLE.

 * @param style integer, representing border style.

 * @param type binary representation of type gives <code>data</code>

 */

public SolidAndDoubleBorderElement(int style,int type){

  super(type);

  if (style == EN_DOUBLE) {

    for (int i=0; i < 4; i++) {

      data[i]*=2;

    }

  }

}

