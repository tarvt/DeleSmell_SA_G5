Location: CharactersetEncoder.java

Content: 

/** 

 * Tells whether or not this encoder can encode the given character.

 * @param c the character

 * @return true if, and only if, this encoder can encode the given character

 * @throws IllegalStateException - If an encoding operation is already in progress

 */

final boolean canEncode(char c){

  return encoder.canEncode(c);

}

Location: CharactersetEncoder.java

Content: 

private CharactersetEncoder(String encoding){

  this.encoder=Charset.forName(encoding).newEncoder();

  this.encoder.onUnmappableCharacter(CodingErrorAction.REPLACE);

}

Location: CharactersetEncoder.java

Content: 

/** 

 * Encodes <code>chars</code> into a format specified by <code>encoding</code>.

 * @param chars the character sequence

 * @param encoding the encoding type

 * @return encoded data

 * @throws CharacterCodingException if encoding fails

 */

public static EncodedChars encodeSBCS(CharSequence chars,String encoding) throws CharacterCodingException {

  CharactersetEncoder encoder=CharacterSetType.SINGLE_BYTE.getEncoder(encoding);

  return encoder.encode(chars);

}

Location: CharactersetEncoder.java

Content: 

/** 

 * Encodes a character sequence to a byte array.

 * @param chars the character sequence

 * @return the encoded character sequence

 * @throws CharacterCodingException if the encoding operation fails

 */

final EncodedChars encode(CharSequence chars) throws CharacterCodingException {

  ByteBuffer bb;

synchronized (encoder) {

    bb=encoder.encode(CharBuffer.wrap(chars));

  }

  if (bb.hasArray()) {

    return getEncodedChars(bb.array(),bb.limit());

  }

 else {

    bb.rewind();

    byte[] bytes=new byte[bb.remaining()];

    bb.get(bytes);

    return getEncodedChars(bytes,bytes.length);

  }

}

Location: CharactersetEncoder.java

Content: 

abstract EncodedChars getEncodedChars(byte[] byteArray,int length);

