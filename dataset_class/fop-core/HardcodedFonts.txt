Location: HardcodedFonts.java

Content: 

private HardcodedFonts(){

}

Location: HardcodedFonts.java

Content: 

protected static boolean selectFont(PCLGenerator gen,String name,int size) throws IOException {

  int fontcode=0;

  if (name.length() > 1 && name.charAt(0) == 'F') {

    try {

      fontcode=Integer.parseInt(name.substring(1));

    }

 catch (    Exception e) {

      LOG.error(e);

    }

  }

  String formattedSize=gen.formatDouble2(size / 1000.0);

switch (fontcode) {

case 1:

    gen.writeCommand("(0N");

  gen.writeCommand("(s1p" + formattedSize + "v0s0b16602T");

break;

case 2:

gen.writeCommand("(0N");

gen.writeCommand("(s1p" + formattedSize + "v1s0b16602T");

break;

case 3:

gen.writeCommand("(0N");

gen.writeCommand("(s1p" + formattedSize + "v0s3b16602T");

break;

case 4:

gen.writeCommand("(0N");

gen.writeCommand("(s1p" + formattedSize + "v1s3b16602T");

break;

case 5:

gen.writeCommand("(0N");

gen.writeCommand("(s1p" + formattedSize + "v0s0b16901T");

break;

case 6:

gen.writeCommand("(0N");

gen.writeCommand("(s1p" + formattedSize + "v1s0b16901T");

break;

case 7:

gen.writeCommand("(0N");

gen.writeCommand("(s1p" + formattedSize + "v0s3b16901T");

break;

case 8:

gen.writeCommand("(0N");

gen.writeCommand("(s1p" + formattedSize + "v1s3b16901T");

break;

case 9:

gen.writeCommand("(0N");

gen.writeCommand("(s0p" + gen.formatDouble2(120.01f / (size / 1000.00f)) + "h0s0b4099T");

break;

case 10:

gen.writeCommand("(0N");

gen.writeCommand("(s0p" + gen.formatDouble2(120.01f / (size / 1000.00f)) + "h1s0b4099T");

break;

case 11:

gen.writeCommand("(0N");

gen.writeCommand("(s0p" + gen.formatDouble2(120.01f / (size / 1000.00f)) + "h0s3b4099T");

break;

case 12:

gen.writeCommand("(0N");

gen.writeCommand("(s0p" + gen.formatDouble2(120.01f / (size / 1000.00f)) + "h1s3b4099T");

break;

case 13:

return false;

case 14:

return false;

default :

return false;

}

return true;

}

Location: HardcodedFonts.java

Content: 

/** 

 * Sets the current font (NOTE: Hard-coded font mappings ATM!)

 * @param name the font name (internal F* names for now)

 * @param size the font size (in millipoints)

 * @param text the text to be rendered (used to determine if there are non-printable chars)

 * @return true if the font can be mapped to PCL

 * @throws IOException if an I/O problem occurs

 */

public static boolean setFont(PCLGenerator gen,String name,int size,String text) throws IOException {

  byte[] encoded=text.getBytes("ISO-8859-1");

  for (int i=0, c=encoded.length; i < c; i++) {

    if (encoded[i] == 0x3F && text.charAt(i) != '?') {

      return false;

    }

  }

  return selectFont(gen,name,size);

}

