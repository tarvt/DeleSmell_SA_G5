Location: AFPResourceAccessor.java

Content: 

/** 

 * Constructor for resource to be accessed via the  {@link org.apache.fop.apps.FOUserAgent}.

 * @param resourceResolver the resolver of resources

 */

public AFPResourceAccessor(InternalResourceResolver resourceResolver){

  this(resourceResolver,null);

}

Location: AFPResourceAccessor.java

Content: 

/** 

 * Constructor for resource to be accessed via the  {@link org.apache.fop.apps.FOUserAgent}. This contructor takes a base URI for resolving font resource URIs. So, if fonts need to be accessed, you can set the  {@link org.apache.fop.fonts.FontManager}'s base URI instead of the one on the  {@link org.apache.fop.apps.FopFactory}.

 * @param resourceResolver the resolver of resources

 * @param baseURI the custom base URI to resolve relative URIs against (may be null)

 */

public AFPResourceAccessor(InternalResourceResolver resourceResolver,String baseURI){

  this.resourceResolver=resourceResolver;

  URI actualBaseURI=null;

  URIResolver uriResolver;

  if (baseURI == null) {

    actualBaseURI=null;

    uriResolver=new NullBaseURIResolver();

  }

 else {

    try {

      actualBaseURI=InternalResourceResolver.getBaseURI(baseURI);

      uriResolver=new BaseURIResolver();

    }

 catch (    URISyntaxException use) {

      log.error("The URI given \"" + baseURI + "\" is invalid: "+ use.getMessage());

      actualBaseURI=null;

      uriResolver=new NullBaseURIResolver();

    }

  }

  this.baseURI=actualBaseURI;

  this.uriResolver=uriResolver;

}

Location: AFPResourceAccessor.java

Content: 

/** 

 * Creates an  {@link InputStream} given a URI.

 * @param uri the URI of the InputStream

 * @return an InputStream

 * @throws IOException if an I/O error occurs while creating the InputStream.

 */

public InputStream createInputStream(URI uri) throws IOException {

  return resourceResolver.getResource(uriResolver.resolveURI(uri));

}

