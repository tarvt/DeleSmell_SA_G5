Location: PSGraphicsPainter.java

Content: 

/** 

 * {@inheritDoc} 

 */

public void arcTo(final double startAngle,final double endAngle,final int cx,final int cy,final int width,final int height) throws IOException {

  arcToBezierCurveTransformer.arcTo(startAngle,endAngle,cx,cy,width,height);

}

Location: PSGraphicsPainter.java

Content: 

private void clipRect(int x,int y,int width,int height) throws IOException {

  generator.defineRect(toPoints(x),toPoints(y),toPoints(width),toPoints(height));

  clip();

}

Location: PSGraphicsPainter.java

Content: 

/** 

 * {@inheritDoc} 

 */

public void cubicBezierTo(int p1x,int p1y,int p2x,int p2y,int p3x,int p3y) throws IOException {

  StringBuffer sb=new StringBuffer().append(generator.formatDouble(toPoints(p1x))).append(" ").append(generator.formatDouble(toPoints(p1y))).append(" ").append(generator.formatDouble(toPoints(p2x))).append(" ").append(generator.formatDouble(toPoints(p2y))).append(" ").append(generator.formatDouble(toPoints(p3x))).append(" ").append(generator.formatDouble(toPoints(p3y))).append(" curveto ");

  generator.writeln(sb.toString());

}

Location: PSGraphicsPainter.java

Content: 

/** 

 * {@inheritDoc} 

 */

public void drawBorderLine(int x1,int y1,int x2,int y2,boolean horz,boolean startOrBefore,int style,Color col) throws IOException {

  drawBorderLine(generator,toPoints(x1),toPoints(y1),toPoints(x2),toPoints(y2),horz,startOrBefore,style,col);

}

Location: PSGraphicsPainter.java

Content: 

/** 

 * {@inheritDoc} 

 */

public static void drawBorderLine(PSGenerator gen,float x1,float y1,float x2,float y2,boolean horz,boolean startOrBefore,int style,Color col) throws IOException {

  float w=x2 - x1;

  float h=y2 - y1;

  if ((w < 0) || (h < 0)) {

    log.error("Negative extent received. Border won't be painted.");

    return;

  }

switch (style) {

case Constants.EN_DASHED:

    gen.useColor(col);

  if (horz) {

    float dashWidth=BorderPainter.dashWidthCalculator(w,h);

    if (dashWidth != 0) {

      gen.useDash("[" + dashWidth + " "+ BorderPainter.DASHED_BORDER_SPACE_RATIO * dashWidth + "] 0");

    }

    gen.useLineCap(0);

    gen.useLineWidth(h);

    float ym=y1 + (h / 2);

    drawLine(gen,x1,ym,x2,ym);

  }

 else {

    float dashWidth=BorderPainter.dashWidthCalculator(h,w);

    if (dashWidth != 0) {

      gen.useDash("[" + dashWidth + " "+ BorderPainter.DASHED_BORDER_SPACE_RATIO * dashWidth + "] 0");

    }

    gen.useLineCap(0);

    gen.useLineWidth(w);

    float xm=x1 + (w / 2);

    drawLine(gen,xm,y1,xm,y2);

  }

break;

case Constants.EN_DOTTED:

gen.useColor(col);

gen.useLineCap(1);

if (horz) {

float unit=Math.abs(2 * h);

int rep=(int)(w / unit);

if (rep % 2 == 0) {

rep++;

}

unit=w / rep;

gen.useDash("[0 " + unit + "] 0");

gen.useLineWidth(h);

float ym=y1 + (h / 2);

drawLine(gen,x1,ym,x2,ym);

}

 else {

float unit=Math.abs(2 * w);

int rep=(int)(h / unit);

if (rep % 2 == 0) {

rep++;

}

unit=h / rep;

gen.useDash("[0 " + unit + "] 0");

gen.useLineWidth(w);

float xm=x1 + (w / 2);

drawLine(gen,xm,y1,xm,y2);

}

break;

case Constants.EN_DOUBLE:

gen.useColor(col);

gen.useDash(null);

if (horz) {

float h3=h / 3;

gen.useLineWidth(h3);

float ym1=y1 + (h3 / 2);

float ym2=ym1 + h3 + h3;

drawLine(gen,x1,ym1,x2,ym1);

drawLine(gen,x1,ym2,x2,ym2);

}

 else {

float w3=w / 3;

gen.useLineWidth(w3);

float xm1=x1 + (w3 / 2);

float xm2=xm1 + w3 + w3;

drawLine(gen,xm1,y1,xm1,y2);

drawLine(gen,xm2,y1,xm2,y2);

}

break;

case Constants.EN_GROOVE:

case Constants.EN_RIDGE:

float colFactor=(style == Constants.EN_GROOVE ? 0.4f : -0.4f);

gen.useDash(null);

if (horz) {

Color uppercol=ColorUtil.lightenColor(col,-colFactor);

Color lowercol=ColorUtil.lightenColor(col,colFactor);

float h3=h / 3;

gen.useLineWidth(h3);

float ym1=y1 + (h3 / 2);

gen.useColor(uppercol);

drawLine(gen,x1,ym1,x2,ym1);

gen.useColor(col);

drawLine(gen,x1,ym1 + h3,x2,ym1 + h3);

gen.useColor(lowercol);

drawLine(gen,x1,ym1 + h3 + h3,x2,ym1 + h3 + h3);

}

 else {

Color leftcol=ColorUtil.lightenColor(col,-colFactor);

Color rightcol=ColorUtil.lightenColor(col,colFactor);

float w3=w / 3;

gen.useLineWidth(w3);

float xm1=x1 + (w3 / 2);

gen.useColor(leftcol);

drawLine(gen,xm1,y1,xm1,y2);

gen.useColor(col);

drawLine(gen,xm1 + w3,y1,xm1 + w3,y2);

gen.useColor(rightcol);

drawLine(gen,xm1 + w3 + w3,y1,xm1 + w3 + w3,y2);

}

break;

case Constants.EN_INSET:

case Constants.EN_OUTSET:

colFactor=(style == Constants.EN_OUTSET ? 0.4f : -0.4f);

gen.useDash(null);

if (horz) {

Color c=ColorUtil.lightenColor(col,(startOrBefore ? 1 : -1) * colFactor);

gen.useLineWidth(h);

float ym1=y1 + (h / 2);

gen.useColor(c);

drawLine(gen,x1,ym1,x2,ym1);

}

 else {

Color c=ColorUtil.lightenColor(col,(startOrBefore ? 1 : -1) * colFactor);

gen.useLineWidth(w);

float xm1=x1 + (w / 2);

gen.useColor(c);

drawLine(gen,xm1,y1,xm1,y2);

}

break;

case Constants.EN_HIDDEN:

break;

default :

gen.useColor(col);

gen.useDash(null);

gen.useLineCap(0);

if (horz) {

gen.useLineWidth(h);

float ym=y1 + (h / 2);

drawLine(gen,x1,ym,x2,ym);

}

 else {

gen.useLineWidth(w);

float xm=x1 + (w / 2);

drawLine(gen,xm,y1,xm,y2);

}

}

}

Location: PSGraphicsPainter.java

Content: 

private static void drawLine(PSGenerator gen,float startx,float starty,float endx,float endy) throws IOException {

  gen.writeln(gen.formatDouble(startx) + " " + gen.formatDouble(starty)+ " "+ gen.mapCommand("moveto")+ " "+ gen.formatDouble(endx)+ " "+ gen.formatDouble(endy)+ " "+ gen.mapCommand("lineto")+ " "+ gen.mapCommand("stroke")+ " "+ gen.mapCommand("newpath"));

}

Location: PSGraphicsPainter.java

Content: 

/** 

 * {@inheritDoc} 

 */

public void lineTo(int x,int y) throws IOException {

  generator.writeln(generator.formatDouble(toPoints(x)) + " " + generator.formatDouble(toPoints(y))+ " "+ generator.mapCommand("lineto"));

}

Location: PSGraphicsPainter.java

Content: 

/** 

 * {@inheritDoc} 

 */

public void moveTo(int x,int y) throws IOException {

  generator.writeln(generator.formatDouble(toPoints(x)) + " " + generator.formatDouble(toPoints(y))+ " "+ generator.mapCommand("moveto"));

}

Location: PSGraphicsPainter.java

Content: 

/** 

 * Creates a new border painter for PostScript.

 * @param generator the PostScript generator

 */

public PSGraphicsPainter(PSGenerator generator){

  this.generator=generator;

  this.arcToBezierCurveTransformer=new ArcToBezierCurveTransformer(this);

}

Location: PSGraphicsPainter.java

Content: 

/** 

 * {@inheritDoc} 

 */

public void rotateCoordinates(double angle) throws IOException {

  StringBuffer sb=new StringBuffer().append(generator.formatDouble(angle * 180d / Math.PI)).append("  rotate ");

  generator.writeln(sb.toString());

}

Location: PSGraphicsPainter.java

Content: 

/** 

 * {@inheritDoc} 

 */

public void scaleCoordinates(float xScale,float yScale) throws IOException {

  StringBuffer sb=new StringBuffer().append(generator.formatDouble(xScale)).append(" ").append(generator.formatDouble(yScale)).append("  scale ");

  generator.writeln(sb.toString());

}

Location: PSGraphicsPainter.java

Content: 

private static float toPoints(int mpt){

  return mpt / 1000f;

}

Location: PSGraphicsPainter.java

Content: 

/** 

 * {@inheritDoc} 

 */

public void translateCoordinates(int xTranslate,int yTranslate) throws IOException {

  StringBuffer sb=new StringBuffer().append(generator.formatDouble(toPoints(xTranslate))).append(" ").append(generator.formatDouble(toPoints(yTranslate))).append("  translate ");

  generator.writeln(sb.toString());

}

