Location: BasicLinkLayoutManager.java

Content: 

/** 

 * Create an fo:basic-link layout manager.

 * @param node the formatting object that creates the area

 */

public BasicLinkLayoutManager(BasicLink node){

  super(node);

}

Location: BasicLinkLayoutManager.java

Content: 

/** 

 * {@inheritDoc} 

 */

protected InlineArea createArea(boolean bInlineParent){

  InlineArea area=super.createArea(bInlineParent);

  setupBasicLinkArea(area);

  return area;

}

Location: BasicLinkLayoutManager.java

Content: 

@Override protected InlineParent createInlineParent(){

  return new BasicLinkArea();

}

Location: BasicLinkLayoutManager.java

Content: 

private void setupBasicLinkArea(InlineArea area){

  BasicLink fobj=(BasicLink)this.fobj;

  TraitSetter.addStructureTreeElement(area,fobj.getStructureTreeElement());

  if (fobj.hasInternalDestination()) {

    String idref=fobj.getInternalDestination();

    PageSequenceLayoutManager pslm=getPSLM();

    LinkResolver res=new LinkResolver(idref,area);

    res.resolveIDRef(idref,pslm.getFirstPVWithID(idref));

    if (!res.isResolved()) {

      pslm.addUnresolvedArea(idref,res);

      if (area instanceof BasicLinkArea) {

        ((BasicLinkArea)area).setResolver(res);

      }

    }

  }

 else   if (fobj.hasExternalDestination()) {

    String url=URISpecification.getURL(fobj.getExternalDestination());

    boolean newWindow=(fobj.getShowDestination() == Constants.EN_NEW);

    if (url.length() > 0) {

      area.addTrait(Trait.EXTERNAL_LINK,new Trait.ExternalLink(url,newWindow));

    }

  }

}

