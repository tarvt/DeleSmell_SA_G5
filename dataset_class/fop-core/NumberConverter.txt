Location: NumberConverter.java

Content: 

private static void appendScalars(List<Integer> scalars,Integer[] sa){

  Collections.addAll(scalars,sa);

}

Location: NumberConverter.java

Content: 

private void convertNumbers(List<Integer> scalars,List<Long> numbers){

  Integer[] tknLast=DEFAULT_TOKEN;

  int tknIndex=0;

  int tknCount=tokens.length;

  int sepIndex=0;

  int sepCount=separators.length;

  int numIndex=0;

  for (  Long number : numbers) {

    Integer[] sep=null;

    Integer[] tkn;

    if (tknIndex < tknCount) {

      if (numIndex > 0) {

        if (sepIndex < sepCount) {

          sep=separators[sepIndex++];

        }

 else {

          sep=DEFAULT_SEPARATOR;

        }

      }

      tkn=tokens[tknIndex++];

    }

 else {

      tkn=tknLast;

    }

    appendScalars(scalars,convertNumber(number,sep,tkn));

    tknLast=tkn;

    numIndex++;

  }

}

Location: NumberConverter.java

Content: 

private Integer[] convertNumber(long number,Integer[] separator,Integer[] token){

  List<Integer> sl=new ArrayList<Integer>();

  if (separator != null) {

    appendScalars(sl,separator);

  }

  if (token != null) {

    appendScalars(sl,formatNumber(number,token));

  }

  return sl.toArray(new Integer[sl.size()]);

}

Location: NumberConverter.java

Content: 

private static List<String> convertWordCase(List<String> words,int caseType){

  List<String> wl=new ArrayList<String>();

  for (  String w : words) {

    wl.add(convertWordCase(w,caseType));

  }

  return wl;

}

Location: NumberConverter.java

Content: 

private static String convertWordCase(String word,int caseType){

  if (caseType == Character.UPPERCASE_LETTER) {

    return word.toUpperCase();

  }

 else   if (caseType == Character.LOWERCASE_LETTER) {

    return word.toLowerCase();

  }

 else   if (caseType == Character.TITLECASE_LETTER) {

    StringBuffer sb=new StringBuffer();

    for (int i=0, n=word.length(); i < n; i++) {

      String s=word.substring(i,i + 1);

      if (i == 0) {

        sb.append(s.toUpperCase());

      }

 else {

        sb.append(s.toLowerCase());

      }

    }

    return sb.toString();

  }

 else {

    return word;

  }

}

Location: NumberConverter.java

Content: 

/** 

 * Convert list of numbers to string according to conversion parameters.

 * @param numbers list of numbers to convert

 * @return string representing converted list of numbers

 */

public String convert(List<Long> numbers){

  List<Integer> scalars=new ArrayList<Integer>();

  if (prefix != null) {

    appendScalars(scalars,prefix);

  }

  convertNumbers(scalars,numbers);

  if (suffix != null) {

    appendScalars(scalars,suffix);

  }

  return scalarsToString(scalars);

}

Location: NumberConverter.java

Content: 

/** 

 * Convert a number to string according to conversion parameters.

 * @param number number to conver

 * @return string representing converted number

 */

public String convert(long number){

  List<Long> numbers=new ArrayList<Long>();

  numbers.add(number);

  return convert(numbers);

}

Location: NumberConverter.java

Content: 

/** 

 * Format NUMBER as decimal using characters denoting digits that start at ONE, adding one or more (zero) padding characters as needed to fill out field WIDTH.

 * @param number to be formatted

 * @param one unicode scalar value denoting numeric value 1

 * @param width non-negative integer denoting field width of number, possible including padding

 * @return formatted number as array of unicode scalars

 */

private Integer[] formatNumberAsDecimal(long number,int one,int width){

  assert Character.getNumericValue(one) == 1;

  assert Character.getNumericValue(one - 1) == 0;

  assert Character.getNumericValue(one + 8) == 9;

  List<Integer> sl=new ArrayList<Integer>();

  int zero=one - 1;

  while (number > 0) {

    long digit=number % 10;

    sl.add(0,zero + (int)digit);

    number=number / 10;

  }

  while (width > sl.size()) {

    sl.add(0,zero);

  }

  if ((groupingSize != 0) && (groupingSeparator != 0)) {

    sl=performGrouping(sl,groupingSize,groupingSeparator);

  }

  return sl.toArray(new Integer[sl.size()]);

}

Location: NumberConverter.java

Content: 

/** 

 * Format NUMBER as using sequence of characters that start at ONE, and having BASE radix.

 * @param number to be formatted

 * @param one unicode scalar value denoting start of sequence (numeric value 1)

 * @param base number of elements in sequence

 * @param map if non-null, then maps sequences indices to unicode scalars

 * @return formatted number as array of unicode scalars

 */

private Integer[] formatNumberAsSequence(long number,int one,int base,int[] map){

  assert base > 1;

  assert (map == null) || (map.length >= base);

  List<Integer> sl=new ArrayList<Integer>();

  if (number == 0) {

    return null;

  }

 else {

    long n=number;

    while (n > 0) {

      int d=(int)((n - 1) % (long)base);

      int s=(map != null) ? map[d] : (one + d);

      sl.add(0,s);

      n=(n - 1) / base;

    }

    return sl.toArray(new Integer[sl.size()]);

  }

}

Location: NumberConverter.java

Content: 

/** 

 * Format NUMBER as using special system that starts at ONE.

 * @param number to be formatted

 * @param one unicode scalar value denoting start of system (numeric value 1)

 * @return formatted number as array of unicode scalars

 */

private Integer[] formatNumberAsSpecial(long number,int one){

  SpecialNumberFormatter f=getSpecialFormatter(one,letterValue,features,language,country);

  if (f != null) {

    return f.format(number,one,letterValue,features,language,country);

  }

 else {

    return null;

  }

}

Location: NumberConverter.java

Content: 

/** 

 * Format NUMBER as word according to TYPE, which must be either Character.UPPERCASE_LETTER, Character.LOWERCASE_LETTER, or Character.TITLECASE_LETTER. Makes use of this.language to determine language of word.

 * @param number to be formatted

 * @param caseType unicode character type for case conversion

 * @return formatted number as array of unicode scalars

 */

private Integer[] formatNumberAsWord(long number,int caseType){

  SpecialNumberFormatter f=null;

  if (isLanguage("eng")) {

    f=new EnglishNumberAsWordFormatter(caseType);

  }

 else   if (isLanguage("spa")) {

    f=new SpanishNumberAsWordFormatter(caseType);

  }

 else   if (isLanguage("fra")) {

    f=new FrenchNumberAsWordFormatter(caseType);

  }

 else {

    f=new EnglishNumberAsWordFormatter(caseType);

  }

  return f.format(number,0,letterValue,features,language,country);

}

Location: NumberConverter.java

Content: 

private Integer[] formatNumber(long number,Integer[] token){

  Integer[] fn=null;

  assert token.length > 0;

  if (number < 0) {

    throw new IllegalArgumentException("number must be non-negative");

  }

 else   if (token.length == 1) {

    int s=token[0];

switch (s) {

case (int)'1':

      fn=formatNumberAsDecimal(number,(int)'1',1);

    break;

case (int)'W':

case (int)'w':

  fn=formatNumberAsWord(number,(s == (int)'W') ? Character.UPPERCASE_LETTER : Character.LOWERCASE_LETTER);

break;

case (int)'A':

case (int)'a':

case (int)'I':

case (int)'i':

default :

if (isStartOfDecimalSequence(s)) {

fn=formatNumberAsDecimal(number,s,1);

}

 else if (isStartOfAlphabeticSequence(s)) {

fn=formatNumberAsSequence(number,s,getSequenceBase(s),null);

}

 else if (isStartOfNumericSpecial(s)) {

fn=formatNumberAsSpecial(number,s);

}

 else {

fn=null;

}

break;

}

}

 else if ((token.length == 2) && (token[0] == (int)'W') && (token[1] == (int)'w')) {

fn=formatNumberAsWord(number,Character.TITLECASE_LETTER);

}

 else if (isPaddedOne(token)) {

int s=token[token.length - 1];

fn=formatNumberAsDecimal(number,s,token.length);

}

 else {

throw new IllegalArgumentException("invalid format token: \"" + UTF32.fromUTF32(token) + "\"");

}

if (fn == null) {

fn=formatNumber(number,DEFAULT_TOKEN);

}

assert fn != null;

return fn;

}

Location: NumberConverter.java

Content: 

private static int getDecimalValue(Integer scalar){

  int s=scalar;

  if (Character.getType(s) == Character.DECIMAL_DIGIT_NUMBER) {

    return Character.getNumericValue(s);

  }

 else {

    return -1;

  }

}

Location: NumberConverter.java

Content: 

private static int getSequenceBase(int s){

  for (  int[] ss : supportedAlphabeticSequences) {

    assert ss.length >= 2;

    if (ss[0] == s) {

      return ss[1];

    }

  }

  return 0;

}

Location: NumberConverter.java

Content: 

private SpecialNumberFormatter getSpecialFormatter(int one,int letterValue,String features,String language,String country){

  if (one == (int)'I') {

    return new RomanNumeralsFormatter();

  }

 else   if (one == (int)'i') {

    return new RomanNumeralsFormatter();

  }

 else   if (one == (int)'\u0391') {

    return new IsopsephryNumeralsFormatter();

  }

 else   if (one == (int)'\u03B1') {

    return new IsopsephryNumeralsFormatter();

  }

 else   if (one == (int)'\u05D0') {

    return new GematriaNumeralsFormatter();

  }

 else   if (one == (int)'\u0623') {

    return new ArabicNumeralsFormatter();

  }

 else   if (one == (int)'\u0627') {

    return new ArabicNumeralsFormatter();

  }

 else   if (one == (int)'\u0E01') {

    return new ThaiNumeralsFormatter();

  }

 else   if (one == (int)'\u3042') {

    return new KanaNumeralsFormatter();

  }

 else   if (one == (int)'\u3044') {

    return new KanaNumeralsFormatter();

  }

 else   if (one == (int)'\u30A2') {

    return new KanaNumeralsFormatter();

  }

 else   if (one == (int)'\u30A4') {

    return new KanaNumeralsFormatter();

  }

 else {

    return null;

  }

}

Location: NumberConverter.java

Content: 

private static boolean hasFeature(String features,String feature){

  if (features != null) {

    assert feature != null;

    assert feature.length() != 0;

    String[] fa=features.split(",");

    for (    String f : fa) {

      String[] fp=f.split("=");

      assert fp.length > 0;

      String fn=fp[0];

      String fv=(fp.length > 1) ? fp[1] : "";

      if (fn.equals(feature)) {

        return true;

      }

    }

  }

  return false;

}

Location: NumberConverter.java

Content: 

private static boolean isAlphaNumeric(int c){

switch (Character.getType(c)) {

case Character.DECIMAL_DIGIT_NUMBER:

case Character.LETTER_NUMBER:

case Character.OTHER_NUMBER:

case Character.UPPERCASE_LETTER:

case Character.LOWERCASE_LETTER:

case Character.TITLECASE_LETTER:

case Character.MODIFIER_LETTER:

case Character.OTHER_LETTER:

    return true;

default :

  return false;

}

}

Location: NumberConverter.java

Content: 

private boolean isLanguage(String iso3Code){

  if (language == null) {

    return false;

  }

 else   if (language.equals(iso3Code)) {

    return true;

  }

 else {

    return isSameLanguage(iso3Code,language);

  }

}

Location: NumberConverter.java

Content: 

private static boolean isPaddedOne(Integer[] token){

  if (getDecimalValue(token[token.length - 1]) != 1) {

    return false;

  }

 else {

    for (int i=0, n=token.length - 1; i < n; i++) {

      if (getDecimalValue(token[i]) != 0) {

        return false;

      }

    }

    return true;

  }

}

Location: NumberConverter.java

Content: 

private static boolean isSameLanguage(String i3c,String lc){

  for (  String[] el : equivalentLanguages) {

    assert el.length >= 2;

    if (el[0].equals(i3c)) {

      for (      String anEl : el) {

        if (anEl.equals(lc)) {

          return true;

        }

      }

      return false;

    }

  }

  return false;

}

Location: NumberConverter.java

Content: 

private static boolean isStartOfAlphabeticSequence(int s){

  for (  int[] ss : supportedAlphabeticSequences) {

    assert ss.length >= 2;

    if (ss[0] == s) {

      return true;

    }

  }

  return false;

}

Location: NumberConverter.java

Content: 

private static boolean isStartOfDecimalSequence(int s){

  return (Character.getNumericValue(s) == 1) && (Character.getNumericValue(s - 1) == 0) && (Character.getNumericValue(s + 8) == 9);

}

Location: NumberConverter.java

Content: 

private static boolean isStartOfNumericSpecial(int s){

  for (  int[] ss : supportedSpecials) {

    assert ss.length >= 1;

    if (ss[0] == s) {

      return true;

    }

  }

  return false;

}

Location: NumberConverter.java

Content: 

private static String joinWords(List<String> words,String separator){

  StringBuffer sb=new StringBuffer();

  for (  String w : words) {

    if (sb.length() > 0) {

      sb.append(separator);

    }

    sb.append(w);

  }

  return sb.toString();

}

Location: NumberConverter.java

Content: 

/** 

 * Construct parameterized number converter.

 * @param format format for the page number (may be null or empty, which is treated as null)

 * @param groupingSeparator grouping separator (if zero, then no grouping separator applies)

 * @param groupingSize grouping size (if zero or negative, then no grouping size applies)

 * @param letterValue letter value (must be one of the above letter value enumeration values)

 * @param features features (feature sub-parameters)

 * @param language (may be null or empty, which is treated as null)

 * @param country (may be null or empty, which is treated as null)

 * @throws IllegalArgumentException if format is not a valid UTF-16 string (e.g., has unpaired surrogate)

 */

public NumberConverter(String format,int groupingSeparator,int groupingSize,int letterValue,String features,String language,String country) throws IllegalArgumentException {

  this.groupingSeparator=groupingSeparator;

  this.groupingSize=groupingSize;

  this.letterValue=letterValue;

  this.features=features;

  this.language=(language != null) ? language.toLowerCase() : null;

  this.country=(country != null) ? country.toLowerCase() : null;

  parseFormatTokens(format);

}

Location: NumberConverter.java

Content: 

private void parseFormatTokens(String format) throws IllegalArgumentException {

  List<Integer[]> tokens=new ArrayList<Integer[]>();

  List<Integer[]> separators=new ArrayList<Integer[]>();

  if ((format == null) || (format.length() == 0)) {

    format="1";

  }

  int tokenType=TOKEN_NONE;

  List<Integer> token=new ArrayList<Integer>();

  Integer[] ca=UTF32.toUTF32(format,0,true);

  for (  Integer c : ca) {

    int tokenTypeNew=isAlphaNumeric(c) ? TOKEN_ALPHANUMERIC : TOKEN_NONALPHANUMERIC;

    if (tokenTypeNew != tokenType) {

      if (token.size() > 0) {

        if (tokenType == TOKEN_ALPHANUMERIC) {

          tokens.add(token.toArray(new Integer[token.size()]));

        }

 else {

          separators.add(token.toArray(new Integer[token.size()]));

        }

        token.clear();

      }

      tokenType=tokenTypeNew;

    }

    token.add(c);

  }

  if (token.size() > 0) {

    if (tokenType == TOKEN_ALPHANUMERIC) {

      tokens.add(token.toArray(new Integer[token.size()]));

    }

 else {

      separators.add(token.toArray(new Integer[token.size()]));

    }

  }

  if (!separators.isEmpty()) {

    this.prefix=separators.remove(0);

  }

  if (!separators.isEmpty()) {

    this.suffix=separators.remove(separators.size() - 1);

  }

  this.separators=separators.toArray(new Integer[separators.size()][]);

  this.tokens=tokens.toArray(new Integer[tokens.size()][]);

}

Location: NumberConverter.java

Content: 

private static List<Integer> performGrouping(List<Integer> sl,int groupingSize,int groupingSeparator){

  assert groupingSize > 0;

  assert groupingSeparator != 0;

  if (sl.size() > groupingSize) {

    List<Integer> gl=new ArrayList<Integer>();

    for (int i=0, n=sl.size(), g=0; i < n; i++) {

      int k=n - i - 1;

      if (g == groupingSize) {

        gl.add(0,groupingSeparator);

        g=1;

      }

 else {

        g++;

      }

      gl.add(0,sl.get(k));

    }

    return gl;

  }

 else {

    return sl;

  }

}

Location: NumberConverter.java

Content: 

private static String scalarsToString(List<Integer> scalars){

  Integer[] sa=scalars.toArray(new Integer[scalars.size()]);

  return UTF32.fromUTF32(sa);

}

Location: NumberConverter.java

Content: 

private static Integer[] toLowerCase(Integer[] sa){

  assert sa != null;

  for (int i=0, n=sa.length; i < n; i++) {

    Integer s=sa[i];

    sa[i]=Character.toLowerCase(s);

  }

  return sa;

}

Location: NumberConverter.java

Content: 

private static Integer[] toUpperCase(Integer[] sa){

  assert sa != null;

  for (int i=0, n=sa.length; i < n; i++) {

    Integer s=sa[i];

    sa[i]=Character.toUpperCase(s);

  }

  return sa;

}

