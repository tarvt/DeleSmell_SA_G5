Location: PropertyCache.java

Content: 

private void attemptCleanup(){

  if ((putCounter.incrementAndGet() % 10000) != 0) {

    return;

  }

  if (cleanupLock.tryLock()) {

    try {

      cleanReclaimedMapEntries();

    }

  finally {

      cleanupLock.unlock();

    }

  }

}

Location: PropertyCache.java

Content: 

private void cleanReclaimedMapEntries(){

  Iterator<Map.Entry<Integer,WeakReference<T>>> iterator=map.entrySet().iterator();

  while (iterator.hasNext()) {

    Map.Entry<Integer,WeakReference<T>> entry=iterator.next();

    WeakReference<T> weakRef=entry.getValue();

    T r=weakRef.get();

    if (r == null) {

      iterator.remove();

    }

  }

}

Location: PropertyCache.java

Content: 

private boolean eq(Object p,Object q){

  return (p == q || p.equals(q));

}

Location: PropertyCache.java

Content: 

/** 

 * Returns a cached version of the given object. If the object is not yet in the cache, it will be added and then returned.

 * @param obj an object

 * @return a cached version of the object

 */

public T fetch(T obj){

  if (!this.useCache) {

    return obj;

  }

  if (obj == null) {

    return null;

  }

  Integer hashCode=obj.hashCode();

  WeakReference<T> weakRef=map.get(hashCode);

  if (weakRef == null) {

    weakRef=map.putIfAbsent(hashCode,new WeakReference<T>(obj));

    attemptCleanup();

    if (weakRef == null) {

      return obj;

    }

  }

  T cached=weakRef.get();

  if (cached != null) {

    if (eq(cached,obj)) {

      return cached;

    }

 else {

      if ((hashCodeCollisionCounter.incrementAndGet() % 10) == 0) {

        LOG.info(hashCodeCollisionCounter.get() + " hashCode() collisions for " + obj.getClass().getName());

      }

    }

  }

  map.put(hashCode,new WeakReference<T>(obj));

  attemptCleanup();

  return obj;

}

Location: PropertyCache.java

Content: 

/** 

 * Creates a new cache. The "org.apache.fop.fo.properties.use-cache" system property is used to determine whether properties should actually be cached or not. If not, then the  {@link #fetch(Object)} method will simplyreturn its argument. To enable the cache, set this property to "true" (case insensitive).

 */

public PropertyCache(){

  boolean useCache;

  try {

    useCache=Boolean.valueOf(System.getProperty("org.apache.fop.fo.properties.use-cache","true"));

  }

 catch (  SecurityException e) {

    useCache=true;

    LOG.info("Unable to access org.apache.fop.fo.properties.use-cache" + " due to security restriction; defaulting to 'true'.");

  }

  if (useCache) {

    this.map=new ConcurrentHashMap<Integer,WeakReference<T>>();

    this.putCounter=new AtomicInteger();

    this.cleanupLock=new ReentrantLock();

    this.hashCodeCollisionCounter=new AtomicInteger();

  }

 else {

    this.map=null;

    this.putCounter=null;

    this.cleanupLock=null;

    this.hashCodeCollisionCounter=null;

  }

  this.useCache=useCache;

}

