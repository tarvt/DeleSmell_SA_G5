Location: AFPDocumentHandler.java

Content: 

/** 

 * Default constructor.

 */

public AFPDocumentHandler(IFContext context){

  super(context);

  this.resourceManager=new AFPResourceManager(context.getUserAgent().getResourceResolver());

  this.paintingState=new AFPPaintingState();

  this.unitConv=paintingState.getUnitConverter();

}

Location: AFPDocumentHandler.java

Content: 

/** 

 * Corner images can be reused by storing at the document level in the AFP The cache is used to map cahced images to caller generated descriptions of the corner

 * @param cornerKey caller's identifier for the corner

 * @return document id of the corner image

 */

public String cacheRoundedCorner(String cornerKey){

  StringBuffer idBuilder=new StringBuffer("RC");

  String tmp=Integer.toHexString(roundedCornerCount).toUpperCase(Locale.ENGLISH);

  if (tmp.length() > 6) {

    roundedCornerCount=0;

    tmp="000000";

  }

 else   if (tmp.length() < 6) {

    for (int i=0; i < 6 - tmp.length(); i++) {

      idBuilder.append("0");

    }

    idBuilder.append(tmp);

  }

  roundedCornerCount++;

  String id=idBuilder.toString();

  roundedCornerNameCache.put(cornerKey,id);

  return id;

}

Location: AFPDocumentHandler.java

Content: 

/** 

 * {@inheritDoc} 

 */

public void canEmbedJpeg(boolean canEmbed){

  paintingState.setCanEmbedJpeg(canEmbed);

}

Location: AFPDocumentHandler.java

Content: 

AbstractAFPPainter createRectanglePainter(){

  if (AFPShadingMode.DITHERED.equals(this.shadingMode)) {

    return new AFPDitheredRectanglePainter(getPaintingState(),getDataStream(),getResourceManager());

  }

 else {

    return new AFPRectanglePainter(getPaintingState(),getDataStream());

  }

}

Location: AFPDocumentHandler.java

Content: 

/** 

 * This method returns the an id that identifies a cached corner or null if non existent

 * @param cornerKey caller's identifier for the corner

 * @return document id of the corner image

 */

public String getCachedRoundedCorner(String cornerKey){

  return roundedCornerNameCache.get(cornerKey);

}

Location: AFPDocumentHandler.java

Content: 

DataStream getDataStream(){

  return this.dataStream;

}

Location: AFPDocumentHandler.java

Content: 

/** 

 * {@inheritDoc} 

 */

public boolean getFS45(){

  return paintingState.getFS45();

}

Location: AFPDocumentHandler.java

Content: 

/** 

 * Returns the page segment descriptor for a given URI if it actually represents a page segment. Otherwise, it just returns null.

 * @param uri the URI that identifies the page segment

 * @return the page segment descriptor or null if there's no page segment for the given URI

 */

PageSegmentDescriptor getPageSegmentNameFor(String uri){

  return pageSegmentMap.get(uri);

}

Location: AFPDocumentHandler.java

Content: 

AFPPaintingState getPaintingState(){

  return this.paintingState;

}

Location: AFPDocumentHandler.java

Content: 

AFPResourceManager getResourceManager(){

  return this.resourceManager;

}

Location: AFPDocumentHandler.java

Content: 

/** 

 * {@inheritDoc} 

 */

public boolean getWrapPSeg(){

  return paintingState.getWrapPSeg();

}

Location: AFPDocumentHandler.java

Content: 

private void handleNOP(AFPPageSetup nop){

  String content=nop.getContent();

  if (content != null) {

    dataStream.createNoOperation(content);

  }

}

Location: AFPDocumentHandler.java

Content: 

/** 

 * {@inheritDoc} 

 */

public boolean isGOCAEnabled(){

  return this.paintingState.isGOCAEnabled();

}

Location: AFPDocumentHandler.java

Content: 

/** 

 * {@inheritDoc} 

 */

public boolean isStrokeGOCAText(){

  return this.paintingState.isStrokeGOCAText();

}

Location: AFPDocumentHandler.java

Content: 

/** 

 * {@inheritDoc} 

 */

public void setBitmapEncodingQuality(float quality){

  this.paintingState.setBitmapEncodingQuality(quality);

}

Location: AFPDocumentHandler.java

Content: 

/** 

 * {@inheritDoc} 

 */

public void setBitsPerPixel(int bitsPerPixel){

  paintingState.setBitsPerPixel(bitsPerPixel);

}

Location: AFPDocumentHandler.java

Content: 

/** 

 * {@inheritDoc} 

 */

public void setCMYKImagesSupported(boolean value){

  paintingState.setCMYKImagesSupported(value);

}

Location: AFPDocumentHandler.java

Content: 

/** 

 * {@inheritDoc} 

 */

public void setColorImages(boolean colorImages){

  paintingState.setColorImages(colorImages);

}

Location: AFPDocumentHandler.java

Content: 

public void setDefaultResourceGroupUri(URI uri){

  resourceManager.setDefaultResourceGroupUri(uri);

}

Location: AFPDocumentHandler.java

Content: 

/** 

 * {@inheritDoc} 

 */

public void setFS45(boolean fs45){

  paintingState.setFS45(fs45);

}

Location: AFPDocumentHandler.java

Content: 

/** 

 * {@inheritDoc} 

 */

public void setGOCAEnabled(boolean enabled){

  this.paintingState.setGOCAEnabled(enabled);

}

Location: AFPDocumentHandler.java

Content: 

/** 

 * {@inheritDoc} 

 */

public void setNativeImagesSupported(boolean nativeImages){

  paintingState.setNativeImagesSupported(nativeImages);

}

Location: AFPDocumentHandler.java

Content: 

/** 

 * {@inheritDoc} 

 */

public void setResourceLevelDefaults(AFPResourceLevelDefaults defaults){

  resourceManager.setResourceLevelDefaults(defaults);

}

Location: AFPDocumentHandler.java

Content: 

/** 

 * {@inheritDoc} 

 */

public void setShadingMode(AFPShadingMode shadingMode){

  this.shadingMode=shadingMode;

}

Location: AFPDocumentHandler.java

Content: 

/** 

 * {@inheritDoc} 

 */

public void setStrokeGOCAText(boolean stroke){

  this.paintingState.setStrokeGOCAText(stroke);

}

Location: AFPDocumentHandler.java

Content: 

public void setWrapGocaPSeg(boolean pSeg){

  paintingState.setWrapGocaPSeg(pSeg);

}

Location: AFPDocumentHandler.java

Content: 

/** 

 * {@inheritDoc} 

 */

public void setWrapPSeg(boolean pSeg){

  paintingState.setWrapPSeg(pSeg);

}

