Location: PropertyMocks.java

Content: 

/** 

 * Creates and returns a generic mock property returning decent defaults for the {@link Property#getString()},  {@link Property#getEnum()} and{@link Property#getLengthRange()} methods.

 * @return a mock all-purpose property

 */

public static Property mockGenericProperty(){

  final Property mockGenericProperty=mock(Property.class);

  when(mockGenericProperty.getString()).thenReturn("A non-empty string");

  when(mockGenericProperty.getEnum()).thenReturn(Constants.EN_SPACE);

  LengthRangeProperty lengthRangeProperty=mockLengthRangeProperty();

  when(mockGenericProperty.getLengthRange()).thenReturn(lengthRangeProperty);

  return mockGenericProperty;

}

Location: PropertyMocks.java

Content: 

private static LengthRangeProperty mockLengthRangeProperty(){

  final LengthRangeProperty mockLengthRangeProperty=mock(LengthRangeProperty.class);

  final Property optimum=mockOptimumProperty();

  when(mockLengthRangeProperty.getOptimum(any(PercentBaseContext.class))).thenReturn(optimum);

  return mockLengthRangeProperty;

}

Location: PropertyMocks.java

Content: 

/** 

 * Creates and returns a mock property returning a decent default for the {@link Property#getNumeric()} method.

 * @return a mock number property

 */

public static Property mockNumberProperty(){

  final Property mockNumberProperty=mock(Property.class);

  final Numeric mockNumeric=mock(Numeric.class);

  when(mockNumberProperty.getNumeric()).thenReturn(mockNumeric);

  return mockNumberProperty;

}

Location: PropertyMocks.java

Content: 

private static Property mockOptimumProperty(){

  final Property optimum=mock(Property.class);

  when(optimum.isAuto()).thenReturn(true);

  return optimum;

}

Location: PropertyMocks.java

Content: 

private PropertyMocks(){

}

