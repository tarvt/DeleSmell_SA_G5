Location: NumberConverterTestCase.java

Content: 

/** 

 * Perform conversions according to test specification.

 * @param ts test specification

 */

private void performConversions(String[][] ts){

  assert ts != null;

  assert ts.length >= 2;

  String[] args=ts[0];

  assert args != null;

  assert args.length > 0;

  String format=args[0];

  assert format.length() > 0;

  char groupingSeparator;

  if (args.length > 1) {

    String s=args[1];

    if ((s != null) && (s.length() > 0)) {

      groupingSeparator=s.charAt(0);

    }

 else {

      groupingSeparator=0;

    }

  }

 else {

    groupingSeparator=0;

  }

  int groupingSize;

  if (args.length > 2) {

    String s=args[2];

    if ((s != null) && (s.length() > 0)) {

      groupingSize=Integer.parseInt(s);

    }

 else {

      groupingSize=0;

    }

  }

 else {

    groupingSize=0;

  }

  int letterValue;

  if (args.length > 3) {

    String s=args[3];

    if ((s != null) && (s.length() > 0)) {

      s=s.toLowerCase();

      if (s.equals("alphabetic")) {

        letterValue=NumberConverter.LETTER_VALUE_ALPHABETIC;

      }

 else       if (s.equals("traditional")) {

        letterValue=NumberConverter.LETTER_VALUE_TRADITIONAL;

      }

 else {

        letterValue=0;

      }

    }

 else {

      letterValue=0;

    }

  }

 else {

    letterValue=0;

  }

  String features;

  if (args.length > 4) {

    String s=args[4];

    if ((s != null) && (s.length() > 0)) {

      features=s;

    }

 else {

      features=null;

    }

  }

 else {

    features=null;

  }

  String language;

  if (args.length > 5) {

    String s=args[5];

    if ((s != null) && (s.length() > 0)) {

      language=s;

    }

 else {

      language=null;

    }

  }

 else {

    language=null;

  }

  String country;

  if (args.length > 6) {

    String s=args[6];

    if ((s != null) && (s.length() > 0)) {

      country=s;

    }

 else {

      country=null;

    }

  }

 else {

    country=null;

  }

  NumberConverter nc=new NumberConverter(format,groupingSeparator,groupingSize,letterValue,features,language,country);

  for (int i=1, nt=ts.length; i < nt; i++) {

    String[] sa=ts[i];

    assert sa != null;

    assert sa.length >= 2;

    List<Long> numbers=new ArrayList<Long>();

    for (int k=0, nn=sa.length - 1; k < nn; k++) {

      String s=sa[k];

      numbers.add(Long.valueOf(s));

    }

    String expected=sa[sa.length - 1];

    String actual=nc.convert(numbers);

    assertEquals(expected,actual);

  }

}

Location: NumberConverterTestCase.java

Content: 

/** 

 * Tests arabic alphabetic sequence numerals.

 * @throws Exception if the test fails

 */

@Test public void testAlphabeticArabic() throws Exception {

  performConversions(formatAlphabeticArabicHijai);

  performConversions(formatAlphabeticArabicAbjadi);

}

Location: NumberConverterTestCase.java

Content: 

/** 

 * Tests hebrew alphabetic sequence numerals.

 * @throws Exception if the test fails

 */

@Test public void testAlphabeticHebrew() throws Exception {

  performConversions(formatAlphabeticHebrew);

}

Location: NumberConverterTestCase.java

Content: 

/** 

 * Tests latin alphabetic sequence numerals.

 * @throws Exception if the test fails

 */

@Test public void testAlphabeticLatin() throws Exception {

  performConversions(formatAlphabeticLatinLower);

  performConversions(formatAlphabeticLatinUpper);

}

Location: NumberConverterTestCase.java

Content: 

/** 

 * Tests latin alphabetic sequence numerals.

 * @throws Exception if the test fails

 */

@Test public void testAlphabeticThai() throws Exception {

  performConversions(formatAlphabeticThai);

}

Location: NumberConverterTestCase.java

Content: 

/** 

 * Tests decimal from latin script.

 * @throws Exception if the test fails

 */

@Test public void testFormatDecimal() throws Exception {

  performConversions(formatDecimal);

  performConversions(formatDecimalPadded);

  performConversions(formatDecimalGrouped);

  performConversions(formatDecimalGroupedPadded);

}

Location: NumberConverterTestCase.java

Content: 

/** 

 * Tests decimal from arabic script.

 * @throws Exception if the test fails

 */

@Test public void testFormatDecimalArabic() throws Exception {

  performConversions(formatDecimalArabic);

  performConversions(formatDecimalArabicPadded);

  performConversions(formatDecimalArabicGrouped);

  performConversions(formatDecimalArabicGroupedPadded);

}

Location: NumberConverterTestCase.java

Content: 

/** 

 * Tests decimal from thai script.

 * @throws Exception if the test fails

 */

@Test public void testFormatDecimalThai() throws Exception {

  performConversions(formatDecimalThai);

  performConversions(formatDecimalThaiPadded);

}

Location: NumberConverterTestCase.java

Content: 

/** 

 * Tests roman numbers.

 * @throws Exception if the test fails

 */

@Test public void testFormatRoman() throws Exception {

  performConversions(formatRomanLower);

  performConversions(formatRomanUpper);

  performConversions(formatRomanLargeLower);

  performConversions(formatRomanLargeUpper);

  performConversions(formatRomanNumberFormsLower);

  performConversions(formatRomanNumberFormsUpper);

}

Location: NumberConverterTestCase.java

Content: 

/** 

 * Tests arabic numerals..

 * @throws Exception if the test fails

 */

@Test public void testNumeralArabic() throws Exception {

  performConversions(formatNumeralArabicAbjadi);

}

Location: NumberConverterTestCase.java

Content: 

/** 

 * Tests hebrew numerals.

 * @throws Exception if the test fails

 */

@Test public void testNumeralHebrew() throws Exception {

  performConversions(formatNumeralHebrewGematria);

}

Location: NumberConverterTestCase.java

Content: 

/** 

 * Tests english word numerals.

 * @throws Exception if the test fails

 */

@Test public void testWordEnglish() throws Exception {

  performConversions(formatWordEnglishLower);

  performConversions(formatWordEnglishUpper);

  performConversions(formatWordEnglishTitle);

}

Location: NumberConverterTestCase.java

Content: 

/** 

 * Tests french word numerals.

 * @throws Exception if the test fails

 */

@Test public void testWordFrench() throws Exception {

  performConversions(formatWordFrenchLower);

  performConversions(formatWordFrenchUpper);

  performConversions(formatWordFrenchTitle);

}

Location: NumberConverterTestCase.java

Content: 

/** 

 * Tests spanish word numerals.

 * @throws Exception if the test fails

 */

@Test public void testWordSpanish() throws Exception {

  performConversions(formatWordSpanishLower);

  performConversions(formatWordSpanishUpper);

  performConversions(formatWordSpanishTitle);

}

