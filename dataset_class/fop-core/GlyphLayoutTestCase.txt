Location: GlyphLayoutTestCase.java

Content: 

private void checkGlyphPositions(int expectedGlyphCount,int[] widths){

  assertEquals(expectedGlyphCount,glyphVector.getNumGlyphs());

  float[] positions=new float[2 * (widths.length + 1)];

  for (int i=0, n=2; i < widths.length; i++, n+=2) {

    positions[n]=positions[n - 2] + widths[i] / 2.048f;

  }

  for (int i=0; i <= widths.length; i++) {

    assertEquals(positions[2 * i],glyphVector.getGlyphPosition(i).getX(),3);

  }

}

Location: GlyphLayoutTestCase.java

Content: 

private FOPGVTFont loadFont(boolean useAdvanced){

  FontInfo fontInfo=new FontInfoBuilder().useDejaVuLGCSerif(useAdvanced).build();

  FOPFontFamilyResolver resolver=new FOPFontFamilyResolverImpl(fontInfo);

  FOPGVTFontFamily family=resolver.resolve(FontInfoBuilder.DEJAVU_LGC_SERIF);

  return family.deriveFont(1000,Collections.emptyMap());

}

Location: GlyphLayoutTestCase.java

Content: 

/** 

 * Glyph positioning using GPOS sub-tables.

 */

@Test public void testAdvancedGlyphPositioning() throws Exception {

  testGlyphLayout(true);

}

Location: GlyphLayoutTestCase.java

Content: 

/** 

 * Glyph positioning using the legacy kern table.

 */

@Test public void testBasicGlyphPositioning() throws Exception {

  testGlyphLayout(false);

}

Location: GlyphLayoutTestCase.java

Content: 

private void testGlyphLayout(boolean useAdvanced){

  FOPGVTFont font=loadFont(useAdvanced);

  glyphVector=(FOPGVTGlyphVector)font.createGlyphVector(null,"L\u201DP,V.F,A\u2019LT.","DFLT","dflt");

  glyphVector.performDefaultLayout();

  int[] widths={1360 - 491,1047,1378 - 415,651,1479 - 358,651,1421 - 319,651,1479 - 301,651,1360 - 167,1366 - 301,651};

  checkGlyphPositions(13,widths);

}

