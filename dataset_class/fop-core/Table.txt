Location: Table.java

Content: 

/** 

 * Adds a column to the columns List, and updates the columnIndex used for determining initial values for column-number

 * @param col   the column to add

 */

private void addColumnNode(TableColumn col){

  int colNumber=col.getColumnNumber();

  int colRepeat=col.getNumberColumnsRepeated();

  while (columns.size() < colNumber + colRepeat - 1) {

    columns.add(null);

  }

  for (int i=colNumber - 1; i < colNumber + colRepeat - 1; i++) {

    columns.set(i,col);

  }

  columnNumberManager.signalUsedColumnNumbers(colNumber,colNumber + colRepeat - 1);

}

Location: Table.java

Content: 

/** 

 * {@inheritDoc} 

 */

public FONode clone(FONode parent,boolean removeChildren) throws FOPException {

  Table clone=(Table)super.clone(parent,removeChildren);

  if (removeChildren) {

    clone.columns=new ArrayList();

    clone.columnsFinalized=false;

    clone.columnNumberManager=new ColumnNumberManager();

    clone.tableHeader=null;

    clone.tableFooter=null;

    clone.rowGroupBuilder=null;

  }

  return clone;

}

Location: Table.java

Content: 

private TableColumn createImplicitColumn(int colNumber) throws FOPException {

  TableColumn implicitColumn=new TableColumn(this,true);

  PropertyList pList=new StaticPropertyList(implicitColumn,this.propList);

  implicitColumn.bind(pList);

  implicitColumn.setColumnWidth(new TableColLength(1.0,implicitColumn));

  implicitColumn.setColumnNumber(colNumber);

  if (!isSeparateBorderModel()) {

    implicitColumn.setCollapsedBorders(collapsingBorderModel);

  }

  return implicitColumn;

}

Location: Table.java

Content: 

/** 

 * Creates the appropriate number of additional implicit columns to match the given column number. Used when the table has no explicit column: the number of columns is then determined by the row that has the most columns.

 * @param columnNumber the table must at least have this number of column

 * @throws FOPException if there was an error creating the property list for implicitcolumns

 */

void ensureColumnNumber(int columnNumber) throws FOPException {

  assert !hasExplicitColumns;

  for (int i=columns.size() + 1; i <= columnNumber; i++) {

    columns.add(createImplicitColumn(i));

  }

}

Location: Table.java

Content: 

private void finalizeColumns() throws FOPException {

  for (int i=0; i < columns.size(); i++) {

    if (columns.get(i) == null) {

      columns.set(i,createImplicitColumn(i + 1));

    }

  }

}

Location: Table.java

Content: 

/** 

 * {@inheritDoc} 

 */

public void finalizeNode() throws FOPException {

  if (!tableBodyFound) {

    missingChildElementError("(marker*,table-column*,table-header?,table-footer?" + ",table-body+)");

  }

  if (!hasChildren()) {

    getParent().removeChild(this);

    return;

  }

  if (!inMarker()) {

    rowGroupBuilder.endTable();

    for (int i=columns.size(); --i >= 0; ) {

      TableColumn col=(TableColumn)columns.get(i);

      if (col != null) {

        col.releasePropertyList();

      }

    }

    this.propList=null;

    rowGroupBuilder=null;

  }

}

Location: Table.java

Content: 

/** 

 * @return the "block-progression-dimension" FO trait.

 */

public LengthRangeProperty getBlockProgressionDimension(){

  return blockProgressionDimension;

}

Location: Table.java

Content: 

/** 

 * @return the "border-collapse" FO trait. 

 */

public int getBorderCollapse(){

  return borderCollapse;

}

Location: Table.java

Content: 

/** 

 * @return the "border-separation" FO trait. 

 */

public LengthPairProperty getBorderSeparation(){

  return borderSeparation;

}

Location: Table.java

Content: 

/** 

 * {@inheritDoc} 

 */

public ColumnNumberManager getColumnNumberManager(){

  return columnNumberManager;

}

Location: Table.java

Content: 

/** 

 * @return the "inline-progression-dimension" FO trait.

 */

public LengthRangeProperty getInlineProgressionDimension(){

  return inlineProgressionDimension;

}

Location: Table.java

Content: 

/** 

 * @return the "fox:orphan-content-limit" extension FO trait 

 */

public Length getOrphanContentLimit(){

  return orphanContentLimit;

}

Location: Table.java

Content: 

RowGroupBuilder getRowGroupBuilder(){

  return rowGroupBuilder;

}

Location: Table.java

Content: 

/** 

 * @return the body for the table-footer. 

 */

public TableFooter getTableFooter(){

  return tableFooter;

}

Location: Table.java

Content: 

/** 

 * @return the body for the table-header. 

 */

public TableHeader getTableHeader(){

  return tableHeader;

}

Location: Table.java

Content: 

/** 

 * @return the "fox:widow-content-limit" extension FO trait 

 */

public Length getWidowContentLimit(){

  return widowContentLimit;

}

Location: Table.java

Content: 

boolean hasExplicitColumns(){

  return hasExplicitColumns;

}

Location: Table.java

Content: 

/** 

 * @return true of table-layout="auto" 

 */

public boolean isAutoLayout(){

  return (tableLayout == EN_AUTO);

}

Location: Table.java

Content: 

/** 

 * @return true if the table-footer should be omitted at breaks 

 */

public boolean omitFooterAtBreak(){

  return (this.tableOmitFooterAtBreak == EN_TRUE);

}

Location: Table.java

Content: 

/** 

 * @return true if the table-header should be omitted at breaks 

 */

public boolean omitHeaderAtBreak(){

  return (this.tableOmitHeaderAtBreak == EN_TRUE);

}

Location: Table.java

Content: 

/** 

 * Construct a Table instance with the given  {@link FONode}as parent.

 * @param parent {@link FONode} that is the parent of this object

 */

public Table(FONode parent){

  super(parent);

}

