Location: GlyphSubstitutionTable.java

Content: 

/** 

 * Create a substitution subtable according to the specified arguments.

 * @param type subtable type

 * @param id subtable identifier

 * @param sequence subtable sequence

 * @param flags subtable flags

 * @param format subtable format

 * @param coverage subtable coverage table

 * @param entries subtable entries

 * @return a glyph subtable instance

 */

public static GlyphSubtable createSubtable(int type,String id,int sequence,int flags,int format,GlyphCoverageTable coverage,List entries){

  GlyphSubtable st=null;

switch (type) {

case GSUB_LOOKUP_TYPE_SINGLE:

    st=SingleSubtable.create(id,sequence,flags,format,coverage,entries);

  break;

case GSUB_LOOKUP_TYPE_MULTIPLE:

st=MultipleSubtable.create(id,sequence,flags,format,coverage,entries);

break;

case GSUB_LOOKUP_TYPE_ALTERNATE:

st=AlternateSubtable.create(id,sequence,flags,format,coverage,entries);

break;

case GSUB_LOOKUP_TYPE_LIGATURE:

st=LigatureSubtable.create(id,sequence,flags,format,coverage,entries);

break;

case GSUB_LOOKUP_TYPE_CONTEXTUAL:

st=ContextualSubtable.create(id,sequence,flags,format,coverage,entries);

break;

case GSUB_LOOKUP_TYPE_CHAINED_CONTEXTUAL:

st=ChainedContextualSubtable.create(id,sequence,flags,format,coverage,entries);

break;

case GSUB_LOOKUP_TYPE_REVERSE_CHAINED_SINGLE:

st=ReverseChainedSingleSubtable.create(id,sequence,flags,format,coverage,entries);

break;

default :

break;

}

return st;

}

Location: GlyphSubstitutionTable.java

Content: 

/** 

 * Create a substitution subtable according to the specified arguments.

 * @param type subtable type

 * @param id subtable identifier

 * @param sequence subtable sequence

 * @param flags subtable flags

 * @param format subtable format

 * @param coverage list of coverage table entries

 * @param entries subtable entries

 * @return a glyph subtable instance

 */

public static GlyphSubtable createSubtable(int type,String id,int sequence,int flags,int format,List coverage,List entries){

  return createSubtable(type,id,sequence,flags,format,GlyphCoverageTable.createCoverageTable(coverage),entries);

}

Location: GlyphSubstitutionTable.java

Content: 

/** 

 * Map a lookup type name to its constant (integer) value.

 * @param name lookup type name

 * @return lookup type

 */

public static int getLookupTypeFromName(String name){

  int t;

  String s=name.toLowerCase();

  if ("single".equals(s)) {

    t=GSUB_LOOKUP_TYPE_SINGLE;

  }

 else   if ("multiple".equals(s)) {

    t=GSUB_LOOKUP_TYPE_MULTIPLE;

  }

 else   if ("alternate".equals(s)) {

    t=GSUB_LOOKUP_TYPE_ALTERNATE;

  }

 else   if ("ligature".equals(s)) {

    t=GSUB_LOOKUP_TYPE_LIGATURE;

  }

 else   if ("contextual".equals(s)) {

    t=GSUB_LOOKUP_TYPE_CONTEXTUAL;

  }

 else   if ("chainedcontextual".equals(s)) {

    t=GSUB_LOOKUP_TYPE_CHAINED_CONTEXTUAL;

  }

 else   if ("extensionsubstitution".equals(s)) {

    t=GSUB_LOOKUP_TYPE_EXTENSION_SUBSTITUTION;

  }

 else   if ("reversechainiingcontextualsingle".equals(s)) {

    t=GSUB_LOOKUP_TYPE_REVERSE_CHAINED_SINGLE;

  }

 else {

    t=-1;

  }

  return t;

}

Location: GlyphSubstitutionTable.java

Content: 

/** 

 * Map a lookup type constant (integer) value to its name.

 * @param type lookup type

 * @return lookup type name

 */

public static String getLookupTypeName(int type){

  String tn=null;

switch (type) {

case GSUB_LOOKUP_TYPE_SINGLE:

    tn="single";

  break;

case GSUB_LOOKUP_TYPE_MULTIPLE:

tn="multiple";

break;

case GSUB_LOOKUP_TYPE_ALTERNATE:

tn="alternate";

break;

case GSUB_LOOKUP_TYPE_LIGATURE:

tn="ligature";

break;

case GSUB_LOOKUP_TYPE_CONTEXTUAL:

tn="contextual";

break;

case GSUB_LOOKUP_TYPE_CHAINED_CONTEXTUAL:

tn="chainedcontextual";

break;

case GSUB_LOOKUP_TYPE_EXTENSION_SUBSTITUTION:

tn="extensionsubstitution";

break;

case GSUB_LOOKUP_TYPE_REVERSE_CHAINED_SINGLE:

tn="reversechainiingcontextualsingle";

break;

default :

tn="unknown";

break;

}

return tn;

}

Location: GlyphSubstitutionTable.java

Content: 

/** 

 * Instantiate a <code>GlyphSubstitutionTable</code> object using the specified lookups and subtables.

 * @param gdef glyph definition table that applies

 * @param lookups a map of lookup specifications to subtable identifier strings

 * @param subtables a list of identified subtables

 */

public GlyphSubstitutionTable(GlyphDefinitionTable gdef,Map lookups,List subtables,Map<String,ScriptProcessor> processors){

  super(gdef,lookups,processors);

  if ((subtables == null) || (subtables.size() == 0)) {

    throw new AdvancedTypographicTableFormatException("subtables must be non-empty");

  }

 else {

    for (    Object o : subtables) {

      if (o instanceof GlyphSubstitutionSubtable) {

        addSubtable((GlyphSubtable)o);

      }

 else {

        throw new AdvancedTypographicTableFormatException("subtable must be a glyph substitution subtable");

      }

    }

    freezeSubtables();

  }

}

Location: GlyphSubstitutionTable.java

Content: 

public CharSequence preProcess(CharSequence charSequence,String script,MultiByteFont font,List associations){

  ScriptProcessor scriptProcessor=ScriptProcessor.getInstance(script,processors);

  return scriptProcessor.preProcess(charSequence,font,associations);

}

Location: GlyphSubstitutionTable.java

Content: 

/** 

 * Perform substitution processing using all matching lookups.

 * @param gs an input glyph sequence

 * @param script a script identifier

 * @param language a language identifier

 * @return the substituted (output) glyph sequence

 */

public GlyphSequence substitute(GlyphSequence gs,String script,String language){

  GlyphSequence ogs;

  Map<LookupSpec,List<LookupTable>> lookups=matchLookups(script,language,"*");

  if ((lookups != null) && (lookups.size() > 0)) {

    ScriptProcessor sp=ScriptProcessor.getInstance(script,processors);

    ogs=sp.substitute(this,gs,script,language,lookups);

  }

 else {

    ogs=gs;

  }

  return ogs;

}

