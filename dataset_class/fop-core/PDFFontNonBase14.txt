Location: PDFFontNonBase14.java

Content: 

/** 

 * @return the FontDescriptor or null if there is none 

 */

public PDFFontDescriptor getDescriptor(){

  return (PDFFontDescriptor)get("FontDescriptor");

}

Location: PDFFontNonBase14.java

Content: 

/** 

 * Create the /Font object

 * @param fontname the internal name for the font

 * @param subtype the font's subtype

 * @param basefont the base font name

 * @param encoding the character encoding schema used by the font

 */

public PDFFontNonBase14(String fontname,FontType subtype,String basefont,Object encoding){

  super(fontname,subtype,basefont,encoding);

}

Location: PDFFontNonBase14.java

Content: 

/** 

 * Set the font descriptor (unused for the Type3 fonts)

 * @param descriptor the descriptor for other font's metrics

 */

public void setDescriptor(PDFFontDescriptor descriptor){

  put("FontDescriptor",descriptor);

}

Location: PDFFontNonBase14.java

Content: 

/** 

 * Set the width metrics for the font

 * @param firstChar the first character code in the font

 * @param lastChar the last character code in the font

 * @param widths an array of size (lastChar - firstChar +1)

 */

public void setWidthMetrics(int firstChar,int lastChar,PDFArray widths){

  put("FirstChar",Integer.valueOf(firstChar));

  put("LastChar",Integer.valueOf(lastChar));

  put("Widths",widths);

}

Location: PDFFontNonBase14.java

Content: 

/** 

 * {@inheritDoc} 

 */

protected void validate(){

  if (getDocumentSafely().getProfile().isFontEmbeddingRequired()) {

    if (this.getDescriptor().getFontFile() == null) {

      throw new PDFConformanceException("For " + getDocumentSafely().getProfile() + ", all fonts have to be embedded! Offending font: "+ getBaseFont());

    }

  }

}

