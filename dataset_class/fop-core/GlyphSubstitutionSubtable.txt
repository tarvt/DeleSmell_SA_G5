Location: GlyphSubstitutionSubtable.java

Content: 

/** 

 * Instantiate a <code>GlyphSubstitutionSubtable</code>.

 * @param id subtable identifier

 * @param sequence subtable sequence

 * @param flags subtable flags

 * @param format subtable format

 * @param coverage subtable coverage table

 */

protected GlyphSubstitutionSubtable(String id,int sequence,int flags,int format,GlyphCoverageTable coverage){

  super(id,sequence,flags,format,coverage);

}

Location: GlyphSubstitutionSubtable.java

Content: 

/** 

 * Apply substitutions.

 * @param gs input glyph sequence

 * @param script tag

 * @param language tag

 * @param feature tag

 * @param sta subtable array

 * @param sct script context tester

 * @return output glyph sequence

 */

public static final GlyphSequence substitute(GlyphSequence gs,String script,String language,String feature,GlyphSubstitutionSubtable[] sta,ScriptContextTester sct){

synchronized (STATE) {

    return substitute(STATE.reset(gs,script,language,feature,sct),sta,-1);

  }

}

Location: GlyphSubstitutionSubtable.java

Content: 

/** 

 * Apply substitutions using specified state and subtable array. For each position in input sequence, apply subtables in order until some subtable applies or none remain. If no subtable applied or no input was consumed for a given position, then apply default action (copy input glyph and advance). If <code>sequenceIndex</code> is non-negative, then apply subtables only when current position matches <code>sequenceIndex</code> in relation to the starting position. Furthermore, upon successful application at <code>sequenceIndex</code>, then apply default action for all remaining glyphs in input sequence.

 * @param ss substitution state

 * @param sta array of subtables to apply

 * @param sequenceIndex if non negative, then apply subtables only at specified sequence index

 * @return output glyph sequence

 */

public static final GlyphSequence substitute(GlyphSubstitutionState ss,GlyphSubstitutionSubtable[] sta,int sequenceIndex){

  int sequenceStart=ss.getPosition();

  boolean appliedOneShot=false;

  while (ss.hasNext()) {

    boolean applied=false;

    if (!appliedOneShot && ss.maybeApplicable()) {

      for (int i=0, n=sta.length; !applied && (i < n); i++) {

        if (sequenceIndex < 0) {

          applied=ss.apply(sta[i]);

        }

 else         if (ss.getPosition() == (sequenceStart + sequenceIndex)) {

          applied=ss.apply(sta[i]);

          if (applied) {

            appliedOneShot=true;

          }

        }

      }

    }

    if (!applied || !ss.didConsume()) {

      ss.applyDefault();

    }

    ss.next();

  }

  return ss.getOutput();

}

