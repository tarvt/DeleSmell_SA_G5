Location: AbstractAction.java

Content: 

/** 

 * Returns an optional ID for this action.

 * @return the ID or null

 */

public String getID(){

  return this.id;

}

Location: AbstractAction.java

Content: 

/** 

 * Returns a string that is used to prefix a generated ID to make it unique.

 * @return the prefix string

 */

public String getIDPrefix(){

  return null;

}

Location: AbstractAction.java

Content: 

/** 

 * Returns the structure element corresponding to this action.

 * @return the reference to the structure element

 */

public StructureTreeElement getStructureTreeElement(){

  return structureTreeElement;

}

Location: AbstractAction.java

Content: 

/** 

 * Indicates whether the action has an ID and is therefore referencable.

 * @return true if the action has an ID

 */

public boolean hasID(){

  return this.id != null;

}

Location: AbstractAction.java

Content: 

/** 

 * Indicates whether the action is complete, i.e has all the required information to be rendered in the target format.

 * @return true if the action is complete

 */

public boolean isComplete(){

  return true;

}

Location: AbstractAction.java

Content: 

/** 

 * Indicates whether two action are equal. Note: this is not the same as {@link Object#equals(Object)}!

 * @param other the other action to compare to

 * @return true if the actions are equal

 */

public abstract boolean isSame(AbstractAction other);

Location: AbstractAction.java

Content: 

/** 

 * Sets an ID to make the action referencable.

 * @param id the ID

 */

public void setID(String id){

  this.id=id;

}

Location: AbstractAction.java

Content: 

/** 

 * Sets the structure element corresponding to this action.

 * @param structureTreeElement a reference to the structure element

 */

public void setStructureTreeElement(StructureTreeElement structureTreeElement){

  this.structureTreeElement=structureTreeElement;

}

