Location: RtfTableRow.java

Content: 

private void adjustBorderProperties(RtfTable parentTable){

  if (attrib != null && parentTable != null) {

    if (isFirstRow() && parentTable.isHighestRow(id)) {

      attrib.unset(ITableAttributes.ROW_BORDER_HORIZONTAL);

    }

 else     if (isFirstRow()) {

      attrib.unset(ITableAttributes.ROW_BORDER_BOTTOM);

    }

 else     if (parentTable.isHighestRow(id)) {

      attrib.unset(ITableAttributes.ROW_BORDER_TOP);

    }

 else {

      attrib.unset(ITableAttributes.ROW_BORDER_BOTTOM);

      attrib.unset(ITableAttributes.ROW_BORDER_TOP);

    }

  }

}

Location: RtfTableRow.java

Content: 

/** 

 * @return Parent table of the row.

 */

public RtfTable getTable(){

  RtfElement e=this;

  while (e.parent != null) {

    if (e.parent instanceof RtfTable) {

      return (RtfTable)e.parent;

    }

    e=e.parent;

  }

  return null;

}

Location: RtfTableRow.java

Content: 

/** 

 * @return true if the row is the first in the table

 */

public boolean isFirstRow(){

  return (id == 1);

}

Location: RtfTableRow.java

Content: 

/** 

 * @param cellId cell id to check

 * @return true if the cell is the highest cell

 */

public boolean isHighestCell(int cellId){

  return (highestCell == cellId) ? true : false;

}

Location: RtfTableRow.java

Content: 

/** 

 * Added by Boris POUDEROUS on 07/02/2002 in order to add an empty cell that is merged with the previous cell.

 * @param attrs attributes of new cell

 * @param cellWidth width of new cell

 * @return new RtfTableCell

 * @throws IOException for I/O problems

 * @throws FOPException if attributes cannot be cloned

 */

public RtfTableCell newTableCellMergedHorizontally(int cellWidth,RtfAttributes attrs) throws IOException, FOPException {

  highestCell++;

  RtfAttributes wAttributes=null;

  if (attrs != null) {

    try {

      wAttributes=(RtfAttributes)attrs.clone();

    }

 catch (    CloneNotSupportedException e) {

      throw new FOPException(e);

    }

  }

  cell=new RtfTableCell(this,writer,cellWidth,wAttributes,highestCell);

  cell.setHMerge(RtfTableCell.MERGE_WITH_PREVIOUS);

  return cell;

}

Location: RtfTableRow.java

Content: 

/** 

 * Added by Boris POUDEROUS on 07/02/2002 in order to add an empty cell that is merged with the cell above. This cell is placed before or after the nested table.

 * @param attrs attributes of new cell

 * @param cellWidth width of new cell

 * @return new RtfTableCell

 * @throws IOException for I/O problems

 */

public RtfTableCell newTableCellMergedVertically(int cellWidth,RtfAttributes attrs) throws IOException {

  highestCell++;

  cell=new RtfTableCell(this,writer,cellWidth,attrs,highestCell);

  cell.setVMerge(RtfTableCell.MERGE_WITH_PREVIOUS);

  return cell;

}

Location: RtfTableRow.java

Content: 

/** 

 * Close current cell if any and start a new one

 * @param cellWidth width of new cell

 * @return new RtfTableCell

 * @throws IOException for I/O problems

 */

public RtfTableCell newTableCell(int cellWidth) throws IOException {

  highestCell++;

  cell=new RtfTableCell(this,writer,cellWidth,highestCell);

  return cell;

}

Location: RtfTableRow.java

Content: 

/** 

 * Close current cell if any and start a new one

 * @param attrs attributes of new cell

 * @param cellWidth width of new cell

 * @return new RtfTableCell

 * @throws IOException for I/O problems

 */

public RtfTableCell newTableCell(int cellWidth,RtfAttributes attrs) throws IOException {

  highestCell++;

  cell=new RtfTableCell(this,writer,cellWidth,attrs,highestCell);

  return cell;

}

Location: RtfTableRow.java

Content: 

/** 

 * Create an RTF element as a child of given container 

 */

RtfTableRow(RtfTable parent,Writer w,int idNum) throws IOException {

  super(parent,w);

  id=idNum;

}

Location: RtfTableRow.java

Content: 

/** 

 * Create an RTF element as a child of given container 

 */

RtfTableRow(RtfTable parent,Writer w,RtfAttributes attrs,int idNum) throws IOException {

  super(parent,w,attrs);

  id=idNum;

}

Location: RtfTableRow.java

Content: 

private void writePaddingAttributes() throws IOException {

  if (attrib != null && !attrib.isSet(ATTR_RTF_15_TRGAPH)) {

    int gaph=-1;

    try {

      final Integer leftPadStr=(Integer)attrib.getValue(ATTR_ROW_PADDING_LEFT);

      if (leftPadStr != null) {

        gaph=leftPadStr;

      }

      final Integer rightPadStr=(Integer)attrib.getValue(ATTR_ROW_PADDING_RIGHT);

      if (rightPadStr != null) {

        gaph=(gaph + rightPadStr) / 2;

      }

    }

 catch (    Exception e) {

      final String msg="RtfTableRow.writePaddingAttributes: " + e.toString();

    }

    if (gaph >= 0) {

      attrib.set(ATTR_RTF_15_TRGAPH,gaph);

    }

  }

  writeAttributes(attrib,ATTRIB_ROW_PADDING);

}

Location: RtfTableRow.java

Content: 

/** 

 * @throws IOException In case of a IO-problem

 */

public void writeRowAndCellsDefintions() throws IOException {

  writeControlWord("trowd");

  if (!getTable().isNestedTable()) {

    writeControlWord("itap0");

  }

  if (attrib.isSet(ITableAttributes.ROW_KEEP_TOGETHER)) {

    writeControlWord(ROW_KEEP_TOGETHER);

  }

  writePaddingAttributes();

  final RtfTable parentTable=(RtfTable)parent;

  adjustBorderProperties(parentTable);

  writeAttributes(attrib,new String[]{ITableAttributes.ATTR_HEADER});

  writeAttributes(attrib,ITableAttributes.ROW_BORDER);

  writeAttributes(attrib,ITableAttributes.CELL_BORDER);

  writeAttributes(attrib,IBorderAttributes.BORDERS);

  if (attrib.isSet(ITableAttributes.ROW_HEIGHT)) {

    writeOneAttribute(ITableAttributes.ROW_HEIGHT,attrib.getValue(ITableAttributes.ROW_HEIGHT));

  }

  int xPos=0;

  final Object leftIndent=attrib.getValue(ITableAttributes.ATTR_ROW_LEFT_INDENT);

  if (leftIndent != null) {

    xPos=(Integer)leftIndent;

  }

  RtfAttributes tableBorderAttributes=getTable().getBorderAttributes();

  int index=0;

  for (  Object o : getChildren()) {

    final RtfElement e=(RtfElement)o;

    if (e instanceof RtfTableCell) {

      RtfTableCell rtfcell=(RtfTableCell)e;

      if (tableBorderAttributes != null) {

        if (index == 0) {

          String border=ITableAttributes.CELL_BORDER_LEFT;

          if (!rtfcell.getRtfAttributes().isSet(border)) {

            rtfcell.getRtfAttributes().set(border,(RtfAttributes)tableBorderAttributes.getValue(border));

          }

        }

        if (index == this.getChildCount() - 1) {

          String border=ITableAttributes.CELL_BORDER_RIGHT;

          if (!rtfcell.getRtfAttributes().isSet(border)) {

            rtfcell.getRtfAttributes().set(border,(RtfAttributes)tableBorderAttributes.getValue(border));

          }

        }

        if (isFirstRow()) {

          String border=ITableAttributes.CELL_BORDER_TOP;

          if (!rtfcell.getRtfAttributes().isSet(border)) {

            rtfcell.getRtfAttributes().set(border,(RtfAttributes)tableBorderAttributes.getValue(border));

          }

        }

        if ((parentTable != null) && (parentTable.isHighestRow(id))) {

          String border=ITableAttributes.CELL_BORDER_BOTTOM;

          if (!rtfcell.getRtfAttributes().isSet(border)) {

            rtfcell.getRtfAttributes().set(border,(RtfAttributes)tableBorderAttributes.getValue(border));

          }

        }

      }

      if (index == 0) {

        if (!rtfcell.getRtfAttributes().isSet(ITableAttributes.CELL_BORDER_LEFT)) {

          rtfcell.getRtfAttributes().set(ITableAttributes.CELL_BORDER_LEFT,(String)attrib.getValue(ITableAttributes.ROW_BORDER_LEFT));

        }

      }

      if (index == this.getChildCount() - 1) {

        if (!rtfcell.getRtfAttributes().isSet(ITableAttributes.CELL_BORDER_RIGHT)) {

          rtfcell.getRtfAttributes().set(ITableAttributes.CELL_BORDER_RIGHT,(String)attrib.getValue(ITableAttributes.ROW_BORDER_RIGHT));

        }

      }

      if (isFirstRow()) {

        if (!rtfcell.getRtfAttributes().isSet(ITableAttributes.CELL_BORDER_TOP)) {

          rtfcell.getRtfAttributes().set(ITableAttributes.CELL_BORDER_TOP,(String)attrib.getValue(ITableAttributes.ROW_BORDER_TOP));

        }

      }

      if ((parentTable != null) && (parentTable.isHighestRow(id))) {

        if (!rtfcell.getRtfAttributes().isSet(ITableAttributes.CELL_BORDER_BOTTOM)) {

          rtfcell.getRtfAttributes().set(ITableAttributes.CELL_BORDER_BOTTOM,(String)attrib.getValue(ITableAttributes.ROW_BORDER_BOTTOM));

        }

      }

      xPos=rtfcell.writeCellDef(xPos);

    }

    index++;

  }

  newLine();

}

