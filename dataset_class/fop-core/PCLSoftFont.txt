Location: PCLSoftFont.java

Content: 

public int getCharCode(char ch){

  if (multiByteFont) {

    return getCharIndex(ch);

  }

 else {

    return getUnicodeCodePoint(ch);

  }

}

Location: PCLSoftFont.java

Content: 

public int getCharCount(){

  return charCount;

}

Location: PCLSoftFont.java

Content: 

public int getCharIndex(char ch){

  if (mappedChars.containsKey(ch)) {

    return mappedChars.get(ch);

  }

 else {

    return -1;

  }

}

Location: PCLSoftFont.java

Content: 

public int getCmapGlyphIndex(int unicode){

  if (font instanceof CustomFontMetricsMapper) {

    CustomFontMetricsMapper customFont=(CustomFontMetricsMapper)font;

    Typeface realFont=customFont.getRealFont();

    if (realFont instanceof MultiByteFont) {

      MultiByteFont mbFont=(MultiByteFont)realFont;

      return mbFont.findGlyphIndex(unicode);

    }

  }

  return 0;

}

Location: PCLSoftFont.java

Content: 

public int getFontID(){

  return fontID;

}

Location: PCLSoftFont.java

Content: 

public InputStream getFontStream(){

  return fontStream;

}

Location: PCLSoftFont.java

Content: 

public Map<Character,Integer> getMappedChars(){

  return mappedChars;

}

Location: PCLSoftFont.java

Content: 

public int getMtxCharIndex(int unicode){

  if (charMtxPositions.get(unicode) != null) {

    return charMtxPositions.get(unicode);

  }

  return 0;

}

Location: PCLSoftFont.java

Content: 

public OpenFont getOpenFont(){

  return openFont;

}

Location: PCLSoftFont.java

Content: 

public FontFileReader getReader(){

  return reader;

}

Location: PCLSoftFont.java

Content: 

public int getUnicodeCodePoint(int unicode){

  if (charsWritten.containsKey(unicode)) {

    return charsWritten.get(unicode);

  }

 else {

    return -1;

  }

}

Location: PCLSoftFont.java

Content: 

public boolean hasPreviouslyWritten(int unicode){

  return charsWritten.containsKey(unicode);

}

Location: PCLSoftFont.java

Content: 

public PCLSoftFont(int fontID,Typeface font,boolean multiByteFont){

  this.fontID=fontID;

  this.font=font;

  charsWritten=new HashMap<Integer,Integer>();

  mappedChars=new HashMap<Character,Integer>();

  this.multiByteFont=multiByteFont;

}

Location: PCLSoftFont.java

Content: 

public void setCharacterOffsets(Map<Integer,int[]> charOffsets){

  this.charOffsets=charOffsets;

}

Location: PCLSoftFont.java

Content: 

public void setFontStream(InputStream fontStream){

  this.fontStream=fontStream;

}

Location: PCLSoftFont.java

Content: 

public void setMappedChars(Map<Character,Integer> mappedChars){

  this.mappedChars=mappedChars;

}

Location: PCLSoftFont.java

Content: 

public void setMtxCharIndexes(Map<Integer,Integer> charMtxPositions){

  this.charMtxPositions=charMtxPositions;

}

Location: PCLSoftFont.java

Content: 

public void setOpenFont(OpenFont openFont){

  this.openFont=openFont;

}

Location: PCLSoftFont.java

Content: 

public void setReader(FontFileReader reader){

  this.reader=reader;

}

Location: PCLSoftFont.java

Content: 

public void writeCharacter(int unicode){

  charsWritten.put(unicode,charCount++);

}

