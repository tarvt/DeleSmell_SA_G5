Location: CompareUtilTestCase.java

Content: 

@Test public void testEqual(){

  int numberOfParallelThreads=Runtime.getRuntime().availableProcessors();

  long numberOfEqualOperations=100;

  double probabilityOf12=0.5;

  ExecutorService executor=Executors.newFixedThreadPool(numberOfParallelThreads);

  final Vector object1=new Vector();

  object1.add(new Object());

  object1.add(new Object());

  object1.add(new Object());

  object1.add(new Object());

  object1.add(new Object());

  final Vector object2=new Vector();

  object2.add(new Object());

  object2.add(new Object());

  object2.add(new Object());

  object2.add(new Object());

  object2.add(new Object());

  object2.add(new Object());

  object2.add(new Object());

  object2.add(new Object());

  object2.add(new Object());

  object2.add(new Object());

  final boolean areEqual=object1.equals(object2);

  final AtomicBoolean wrongResult=new AtomicBoolean(false);

  Runnable equal12=new Runnable(){

    public void run(){

      if (areEqual != CompareUtil.equal(object1,object2)) {

        wrongResult.set(true);

      }

    }

  }

;

  Runnable equal21=new Runnable(){

    public void run(){

      if (areEqual != CompareUtil.equal(object2,object1)) {

        wrongResult.set(true);

      }

    }

  }

;

  List<Future<?>> futures=new ArrayList<Future<?>>();

  for (int i=1; i <= numberOfEqualOperations; i++) {

    Runnable randomTask=Math.random() < probabilityOf12 ? equal12 : equal21;

    futures.add(executor.submit(randomTask));

  }

  Exception exception=null;

  try {

    for (    Future<?> future : futures) {

      future.get();

    }

  }

 catch (  Exception e) {

    exception=e;

  }

  assertNull(exception);

  assertFalse(wrongResult.get());

}

