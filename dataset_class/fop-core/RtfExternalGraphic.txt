Location: RtfExternalGraphic.java

Content: 

private void computeImageSize(){

  if (imageformat.getType() == ImageConstants.I_PNG) {

    width=ImageUtil.getIntFromByteArray(imagedata,16,4,true);

    height=ImageUtil.getIntFromByteArray(imagedata,20,4,true);

  }

 else   if (imageformat.getType() == ImageConstants.I_JPG) {

    int basis=-1;

    byte ff=(byte)0xff;

    byte c0=(byte)0xc0;

    for (int i=0; i < imagedata.length; i++) {

      byte b=imagedata[i];

      if (b != ff) {

        continue;

      }

      if (i == imagedata.length - 1) {

        continue;

      }

      b=imagedata[i + 1];

      if (b != c0) {

        continue;

      }

      basis=i + 5;

      break;

    }

    if (basis != -1) {

      width=ImageUtil.getIntFromByteArray(imagedata,basis + 2,2,true);

      height=ImageUtil.getIntFromByteArray(imagedata,basis,2,true);

    }

  }

 else   if (imageformat.getType() == ImageConstants.I_EMF) {

    int i=0;

    i=ImageUtil.getIntFromByteArray(imagedata,151,4,false);

    if (i != 0) {

      width=i;

    }

    i=ImageUtil.getIntFromByteArray(imagedata,155,4,false);

    if (i != 0) {

      height=i;

    }

  }

}

Location: RtfExternalGraphic.java

Content: 

/** 

 * Gets  the compression rate for the image in percent.

 * @return Compression rate

 */

public int getCompressionRate(){

  return graphicCompressionRate;

}

Location: RtfExternalGraphic.java

Content: 

/** 

 * Default constructor. Create an RTF element as a child of given container.

 * @param container a <code>RtfContainer</code> value

 * @param writer a <code>Writer</code> value

 * @throws IOException for I/O problems

 */

public RtfExternalGraphic(RtfContainer container,Writer writer) throws IOException {

  super(container,writer);

}

Location: RtfExternalGraphic.java

Content: 

/** 

 * Default constructor.

 * @param container a <code>RtfContainer</code> value

 * @param writer a <code>Writer</code> value

 * @param attributes a <code>RtfAttributes</code> value

 * @throws IOException for I/O problems

 */

public RtfExternalGraphic(RtfContainer container,Writer writer,RtfAttributes attributes) throws IOException {

  super(container,writer,attributes);

}

Location: RtfExternalGraphic.java

Content: 

/** 

 * Sets the compression rate for the image in percent.

 * @param percent Compression rate

 * @return true if the compression rate is valid (0..100), false if invalid

 */

public boolean setCompressionRate(int percent){

  if (percent < 1 || percent > 100) {

    return false;

  }

  graphicCompressionRate=percent;

  return true;

}

Location: RtfExternalGraphic.java

Content: 

/** 

 * Sets cropping values for all four edges for the \piccrop*N commands. A positive value crops toward the center of the picture; a negative value crops away from the center, adding a space border around the picture

 * @param left left cropping value (in twips)

 * @param top top cropping value (in twips)

 * @param right right cropping value (in twips)

 * @param bottom bottom cropping value (in twips)

 */

public void setCropping(int left,int top,int right,int bottom){

  this.cropValues[0]=left;

  this.cropValues[1]=top;

  this.cropValues[2]=right;

  this.cropValues[3]=bottom;

}

Location: RtfExternalGraphic.java

Content: 

/** 

 * Sets the desired height of the image.

 * @param twips The desired image height (in twips)

 */

public void setHeightTwips(int twips){

  this.heightDesired=twips;

  this.perCentH=false;

}

Location: RtfExternalGraphic.java

Content: 

/** 

 * Sets the desired height of the image.

 * @param theHeight The desired image height (as a string in twips or as a percentage)

 */

public void setHeight(String theHeight){

  this.heightDesired=ImageUtil.getInt(theHeight);

  this.perCentH=ImageUtil.isPercent(theHeight);

}

Location: RtfExternalGraphic.java

Content: 

/** 

 * Sets the binary imagedata of the image.

 * @param data  binary imagedata as read from file.

 * @throws IOException On error

 */

public void setImageData(byte[] data) throws IOException {

  this.imagedata=data;

}

Location: RtfExternalGraphic.java

Content: 

/** 

 * Sets the flag whether the image size shall be adjusted.

 * @param value true    image width or height shall be adjusted automatically\n false   no adjustment

 */

public void setScaling(String value){

  setUniformScaling("uniform".equalsIgnoreCase(value));

}

Location: RtfExternalGraphic.java

Content: 

/** 

 * Sets the flag whether the image size shall be adjusted.

 * @param uniform true    image width or height shall be adjusted automatically\n false   no adjustment

 */

public void setUniformScaling(boolean uniform){

  this.scaleUniform=uniform;

}

Location: RtfExternalGraphic.java

Content: 

/** 

 * Sets the url of the image.

 * @param urlString Image url like "file://..."

 * @throws IOException On error

 */

public void setURL(String urlString) throws IOException {

  URL tmpUrl=null;

  try {

    tmpUrl=new URL(urlString);

  }

 catch (  MalformedURLException e) {

    try {

      tmpUrl=new File(urlString).toURI().toURL();

    }

 catch (    MalformedURLException ee) {

      throw new ExternalGraphicException("The attribute 'src' of " + "<fo:external-graphic> has a invalid value: '" + urlString + "' ("+ ee+ ")");

    }

  }

  this.url=tmpUrl;

}

Location: RtfExternalGraphic.java

Content: 

/** 

 * Sets the desired width of the image.

 * @param twips The desired image width (in twips)

 */

public void setWidthTwips(int twips){

  this.widthDesired=twips;

  this.perCentW=false;

}

Location: RtfExternalGraphic.java

Content: 

/** 

 * Sets the desired width of the image.

 * @param theWidth The desired image width (as a string in twips or as a percentage)

 */

public void setWidth(String theWidth){

  this.widthDesired=ImageUtil.getInt(theWidth);

  this.perCentW=ImageUtil.isPercent(theWidth);

}

Location: RtfExternalGraphic.java

Content: 

/** 

 * Writes the RTF content to m_writer - this one throws ExternalGraphicExceptions

 * @exception IOException On error

 */

protected void writeRtfContentWithException() throws IOException {

  if (writer == null) {

    return;

  }

  if (url == null && imagedata == null) {

    throw new ExternalGraphicException("No image data is available (neither URL, nor in-memory)");

  }

  String linkToRoot=System.getProperty("jfor_link_to_root");

  if (url != null && linkToRoot != null) {

    writer.write("{\\field {\\* \\fldinst { INCLUDEPICTURE \"");

    writer.write(linkToRoot);

    File urlFile=new File(url.getFile());

    writer.write(urlFile.getName());

    writer.write("\" \\\\* MERGEFORMAT \\\\d }}}");

    return;

  }

  if (imagedata == null) {

    try {

      final InputStream in=url.openStream();

      try {

        imagedata=IOUtils.toByteArray(url.openStream());

      }

  finally {

        IOUtils.closeQuietly(in);

      }

    }

 catch (    Exception e) {

      throw new ExternalGraphicException("The attribute 'src' of " + "<fo:external-graphic> has a invalid value: '" + url + "' ("+ e+ ")");

    }

  }

  if (imagedata == null) {

    return;

  }

  String file=(url != null ? url.getFile() : "<unknown>");

  imageformat=FormatBase.determineFormat(imagedata);

  if (imageformat != null) {

    imageformat=imageformat.convert(imageformat,imagedata);

  }

  if (imageformat == null || imageformat.getType() == ImageConstants.I_NOT_SUPPORTED || "".equals(imageformat.getRtfTag())) {

    throw new ExternalGraphicException("The tag <fo:external-graphic> " + "does not support " + file.substring(file.lastIndexOf(".") + 1) + " - image type.");

  }

  writeGroupMark(true);

  writeStarControlWord("shppict");

  writeGroupMark(true);

  writeControlWord("pict");

  StringBuffer buf=new StringBuffer(imagedata.length * 3);

  writeControlWord(imageformat.getRtfTag());

  computeImageSize();

  writeSizeInfo();

  writeAttributes(getRtfAttributes(),null);

  for (  byte anImagedata : imagedata) {

    int iData=anImagedata;

    if (iData < 0) {

      iData+=256;

    }

    if (iData < 16) {

      buf.append('0');

    }

    buf.append(Integer.toHexString(iData));

  }

  int len=buf.length();

  char[] chars=new char[len];

  buf.getChars(0,len,chars,0);

  writer.write(chars);

  writeGroupMark(false);

  writeGroupMark(false);

}

Location: RtfExternalGraphic.java

Content: 

private void writeSizeInfo() throws IOException {

  if (width != -1) {

    writeControlWord("picw" + width);

  }

  if (height != -1) {

    writeControlWord("pich" + height);

  }

  if (widthDesired != -1) {

    if (perCentW) {

      writeControlWord("picscalex" + widthDesired);

    }

 else {

      writeControlWord("picwgoal" + widthDesired);

    }

  }

 else   if (scaleUniform && heightDesired != -1) {

    if (perCentH) {

      writeControlWord("picscalex" + heightDesired);

    }

 else {

      writeControlWord("picscalex" + heightDesired * 100 / height);

    }

  }

  if (heightDesired != -1) {

    if (perCentH) {

      writeControlWord("picscaley" + heightDesired);

    }

 else {

      writeControlWord("pichgoal" + heightDesired);

    }

  }

 else   if (scaleUniform && widthDesired != -1) {

    if (perCentW) {

      writeControlWord("picscaley" + widthDesired);

    }

 else {

      writeControlWord("picscaley" + widthDesired * 100 / width);

    }

  }

  if (this.cropValues[0] != 0) {

    writeOneAttribute("piccropl",this.cropValues[0]);

  }

  if (this.cropValues[1] != 0) {

    writeOneAttribute("piccropt",this.cropValues[1]);

  }

  if (this.cropValues[2] != 0) {

    writeOneAttribute("piccropr",this.cropValues[2]);

  }

  if (this.cropValues[3] != 0) {

    writeOneAttribute("piccropb",this.cropValues[3]);

  }

}

