Location: TestFilesConfiguration.java

Content: 

/** 

 * Returns the name of the XML file containing the disabled tests.

 * @return a file name, may be null

 */

public String getDisabledTests(){

  return disabledTests;

}

Location: TestFilesConfiguration.java

Content: 

/** 

 * Returns the file suffix (i.e. ".xml" for XML files and ".fo" for FOs).

 * @return the file suffix

 */

public String getFileSuffix(){

  return testFileSuffix;

}

Location: TestFilesConfiguration.java

Content: 

/** 

 * Returns the name of the single test file to run.

 * @return the single test file name

 */

public String getSingleTest(){

  return singleTest;

}

Location: TestFilesConfiguration.java

Content: 

/** 

 * Returns the string that must prefix the test file names.

 * @return the prefixing string

 */

public String getStartsWith(){

  return testStartsWith;

}

Location: TestFilesConfiguration.java

Content: 

/** 

 * Returns the directory of the tests.

 * @return the test directory

 */

public File getTestDirectory(){

  return testDirectory;

}

Location: TestFilesConfiguration.java

Content: 

/** 

 * Returns the directory set of tests to be run.

 * @return the directory tests

 */

public String getTestSet(){

  return testSet;

}

Location: TestFilesConfiguration.java

Content: 

/** 

 * Whether any private tests should be invoked.

 * @return true if private tests should be tested

 */

public boolean hasPrivateTests(){

  return privateTests;

}

Location: TestFilesConfiguration.java

Content: 

private TestFilesConfiguration(Builder builder){

  this.testDirectory=new File(builder.testDirectory);

  this.singleTest=builder.singleTest;

  this.testStartsWith=builder.testStartsWith;

  this.testFileSuffix=builder.testFileSuffix;

  this.testSet=builder.testSet;

  this.privateTests=builder.privateTests;

  this.disabledTests=builder.disabledTests;

}

