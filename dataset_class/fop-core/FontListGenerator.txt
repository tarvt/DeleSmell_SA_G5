Location: FontListGenerator.java

Content: 

private SortedMap buildFamilyMap(FontInfo fontInfo){

  Map fonts=fontInfo.getFonts();

  Set keyBag=new java.util.HashSet(fonts.keySet());

  Map keys=new java.util.HashMap();

  SortedMap fontFamilies=new java.util.TreeMap();

  for (  Object o : fontInfo.getFontTriplets().entrySet()) {

    Map.Entry entry=(Map.Entry)o;

    FontTriplet triplet=(FontTriplet)entry.getKey();

    String key=(String)entry.getValue();

    FontSpec container;

    if (keyBag.contains(key)) {

      keyBag.remove(key);

      FontMetrics metrics=(FontMetrics)fonts.get(key);

      container=new FontSpec(key,metrics);

      container.addFamilyNames(metrics.getFamilyNames());

      keys.put(key,container);

      String firstFamilyName=(String)container.getFamilyNames().first();

      List containers=(List)fontFamilies.get(firstFamilyName);

      if (containers == null) {

        containers=new ArrayList();

        fontFamilies.put(firstFamilyName,containers);

      }

      containers.add(container);

      Collections.sort(containers);

    }

 else {

      container=(FontSpec)keys.get(key);

    }

    container.addTriplet(triplet);

  }

  return fontFamilies;

}

Location: FontListGenerator.java

Content: 

/** 

 * List all fonts configured for a particular output format (identified by MIME type). The sorted map returned looks like this: <code>SortedMap&lt;String/font-family, List&lt; {@link FontSpec}&gt;&gt;</code>

 * @param fopFactory the FOP factory (already configured)

 * @param mime the MIME type identified the selected output format

 * @param listener a font event listener to catch any font-related errors while listing fonts

 * @return the map of font families

 * @throws FOPException if an error occurs setting up the fonts

 */

public SortedMap listFonts(FopFactory fopFactory,String mime,FontEventListener listener) throws FOPException {

  FontInfo fontInfo=setupFonts(fopFactory,mime,listener);

  SortedMap fontFamilies=buildFamilyMap(fontInfo);

  return fontFamilies;

}

Location: FontListGenerator.java

Content: 

private FontInfo setupFonts(FopFactory fopFactory,String mime,FontEventListener listener) throws FOPException {

  FOUserAgent userAgent=fopFactory.newFOUserAgent();

  IFDocumentHandler documentHandler=fopFactory.getRendererFactory().createDocumentHandler(userAgent,mime);

  IFDocumentHandlerConfigurator configurator=documentHandler.getConfigurator();

  FontInfo fontInfo=new FontInfo();

  configurator.setupFontInfo(documentHandler.getMimeType(),fontInfo);

  documentHandler.setFontInfo(fontInfo);

  return fontInfo;

}

