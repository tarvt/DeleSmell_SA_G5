Location: BuilderContext.java

Content: 

/** 

 * Construct a builder context.

 * @param rtfOptions some options

 */

public BuilderContext(IRtfOptions rtfOptions){

  options=rtfOptions;

}

Location: BuilderContext.java

Content: 

/** 

 * Find the "nearest" container that implements the given interface on our stack.

 * @param containerClass class of container

 * @param required if true, ConverterException is thrown if no container found

 * @param forWhichBuilder used in error message if container not found

 * @return the container

 * @throws RtfException if not caught

 */

public RtfContainer getContainer(Class containerClass,boolean required,Object forWhichBuilder) throws RtfException {

  RtfContainer result=(RtfContainer)getObjectFromStack(containers,containerClass);

  if (result == null && required) {

    RTFPlaceHolderHelper placeHolderHelper=new RTFPlaceHolderHelper(this);

    placeHolderHelper.createRTFPlaceholder(containerClass);

    result=getContainer(containerClass,required,forWhichBuilder);

    if (result == null) {

      throw new RtfException("No RtfContainer of class '" + containerClass.getName() + "' available for '"+ forWhichBuilder.getClass().getName()+ "' builder");

    }

  }

  return result;

}

Location: BuilderContext.java

Content: 

/** 

 * find first object of given class from top of stack s

 * @return null if not found

 */

private Object getObjectFromStack(Stack s,Class desiredClass){

  Object result=null;

  final Stack copy=(Stack)s.clone();

  while (!copy.isEmpty()) {

    final Object o=copy.pop();

    if (desiredClass.isAssignableFrom(o.getClass())) {

      result=o;

      break;

    }

  }

  return result;

}

Location: BuilderContext.java

Content: 

/** 

 * @return the current TableContext 

 */

public TableContext getTableContext(){

  return (TableContext)tableContexts.peek();

}

Location: BuilderContext.java

Content: 

/** 

 * This method checks for any tag mismatches between what is being closed and what exists on the stack. If a mismatch is found, then it will push the object back onto the stack and attempt to close the given section before retrying with the current pop task.

 * @param aClass The class to be popped from the stack

 * @param handler The RTF handler class to fix any mismatches

 */

private void handlePop(Class aClass,RTFHandler handler){

  Object object=containers.pop();

  if (object.getClass() != aClass) {

    pushAndClose(aClass,object,handler);

  }

}

Location: BuilderContext.java

Content: 

/** 

 * pop the topmost RtfContainer from our stack 

 */

public void popContainer(Class containerClass,RTFHandler handler){

  handlePop(containerClass,handler);

}

Location: BuilderContext.java

Content: 

/** 

 * pop the topmost part class from our stack 

 */

public void popPart(Class part,RTFHandler handler){

  handlePop(part,handler);

}

Location: BuilderContext.java

Content: 

/** 

 * Pop a TableContext from our stack.

 */

public void popTableContext(){

  tableContexts.pop();

}

Location: BuilderContext.java

Content: 

private void pushAndClose(Class aClass,Object object,RTFHandler handler){

  containers.push(object);

  if (handler.endContainer(object.getClass())) {

    popContainer(aClass,handler);

  }

 else {

    LOG.warn("Unhandled RTF structure tag mismatch detected between " + aClass.getSimpleName() + " and "+ object.getClass().getSimpleName());

  }

}

Location: BuilderContext.java

Content: 

/** 

 * Push an RtfContainer on our stack.

 * @param c the container

 */

public void pushContainer(RtfContainer c){

  containers.push(c);

}

Location: BuilderContext.java

Content: 

/** 

 * Push a Class representing a non-writeable section of the FO tree

 * @param part the part

 */

public void pushPart(FObj part){

  containers.push(part);

}

Location: BuilderContext.java

Content: 

/** 

 * Push a TableContext to our stack.

 * @param tc the table context

 */

public void pushTableContext(TableContext tc){

  tableContexts.push(tc);

}

Location: BuilderContext.java

Content: 

/** 

 * In some cases an RtfContainer must be replaced by another one on the stack. This happens when handling nested fo:blocks for example: after handling a nested block the enclosing block must switch to a new paragraph container to handle what follows the nested block. TODO: what happens to elements that are "more on top" than oldC on the stack? shouldn't they be closed or something?

 * @param oldC old container

 * @param newC new container

 * @throws Exception if not caught

 */

public void replaceContainer(RtfContainer oldC,RtfContainer newC) throws Exception {

  final int index=containers.indexOf(oldC);

  if (index < 0) {

    throw new Exception("container to replace not found:" + oldC);

  }

  containers.setElementAt(newC,index);

}

