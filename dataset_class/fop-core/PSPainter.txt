Location: PSPainter.java

Content: 

/** 

 * {@inheritDoc} 

 */

public void clipBackground(Rectangle rect,BorderProps bpsBefore,BorderProps bpsAfter,BorderProps bpsStart,BorderProps bpsEnd) throws IFException {

  try {

    borderPainter.clipBackground(rect,bpsBefore,bpsAfter,bpsStart,bpsEnd);

  }

 catch (  IOException ioe) {

    throw new IFException("I/O error while clipping background",ioe);

  }

}

Location: PSPainter.java

Content: 

/** 

 * {@inheritDoc} 

 */

public void clipRect(Rectangle rect) throws IFException {

  try {

    PSGenerator generator=getGenerator();

    endTextObject();

    generator.defineRect(rect.x / 1000.0,rect.y / 1000.0,rect.width / 1000.0,rect.height / 1000.0);

    generator.writeln(generator.mapCommand("clip") + " " + generator.mapCommand("newpath"));

  }

 catch (  IOException ioe) {

    throw new IFException("I/O error in clipRect()",ioe);

  }

}

Location: PSPainter.java

Content: 

/** 

 * {@inheritDoc} 

 */

protected Map createDefaultImageProcessingHints(ImageSessionContext sessionContext){

  Map hints=super.createDefaultImageProcessingHints(sessionContext);

  hints.put(ImageProcessingHints.TRANSPARENCY_INTENT,ImageProcessingHints.TRANSPARENCY_INTENT_IGNORE);

  return hints;

}

Location: PSPainter.java

Content: 

/** 

 * {@inheritDoc} 

 */

protected RenderingContext createRenderingContext(){

  PSRenderingContext psContext=new PSRenderingContext(getUserAgent(),getGenerator(),getFontInfo());

  return psContext;

}

Location: PSPainter.java

Content: 

/** 

 * {@inheritDoc} 

 */

public void drawBorderRect(Rectangle rect,BorderProps top,BorderProps bottom,BorderProps left,BorderProps right,Color innerBackgroundColor) throws IFException {

  if (top != null || bottom != null || left != null || right != null) {

    try {

      endTextObject();

      if (getDocumentHandler().getPSUtil().getRenderingMode() == PSRenderingMode.SIZE && hasOnlySolidBorders(top,bottom,left,right)) {

        super.drawBorderRect(rect,top,bottom,left,right,innerBackgroundColor);

      }

 else {

        this.borderPainter.drawBorders(rect,top,bottom,left,right,innerBackgroundColor);

      }

    }

 catch (    IOException ioe) {

      throw new IFException("I/O error in drawBorderRect()",ioe);

    }

  }

}

Location: PSPainter.java

Content: 

/** 

 * {@inheritDoc} 

 */

protected void drawImageUsingImageHandler(ImageInfo info,Rectangle rect) throws ImageException, IOException {

  if (!getDocumentHandler().getPSUtil().isOptimizeResources() || PSImageUtils.isImageInlined(info,(PSRenderingContext)createRenderingContext())) {

    super.drawImageUsingImageHandler(info,rect);

  }

 else {

    if (log.isDebugEnabled()) {

      log.debug("Image " + info + " is embedded as a form later");

    }

    PSResource form=getDocumentHandler().getFormForImage(info.getOriginalURI());

    PSImageUtils.drawForm(form,info,rect,getGenerator());

  }

}

Location: PSPainter.java

Content: 

/** 

 * {@inheritDoc} 

 */

public void drawImage(Document doc,Rectangle rect) throws IFException {

  try {

    endTextObject();

  }

 catch (  IOException ioe) {

    throw new IFException("I/O error in drawImage()",ioe);

  }

  drawImageUsingDocument(doc,rect);

}

Location: PSPainter.java

Content: 

/** 

 * {@inheritDoc} 

 */

public void drawImage(String uri,Rectangle rect) throws IFException {

  try {

    endTextObject();

  }

 catch (  IOException ioe) {

    throw new IFException("I/O error in drawImage()",ioe);

  }

  drawImageUsingURI(uri,rect);

}

Location: PSPainter.java

Content: 

/** 

 * {@inheritDoc} 

 */

public void drawLine(Point start,Point end,int width,Color color,RuleStyle style) throws IFException {

  try {

    endTextObject();

    this.graphicsPainter.drawLine(start,end,width,color,style);

  }

 catch (  IOException ioe) {

    throw new IFException("I/O error in drawLine()",ioe);

  }

}

Location: PSPainter.java

Content: 

/** 

 * {@inheritDoc} 

 */

public void drawText(int x,int y,int letterSpacing,int wordSpacing,int[][] dp,String text) throws IFException {

  try {

    if (state.getFontSize() == 0) {

      return;

    }

    PSGenerator generator=getGenerator();

    generator.useColor(state.getTextColor());

    beginTextObject();

    FontTriplet triplet=new FontTriplet(state.getFontFamily(),state.getFontStyle(),state.getFontWeight());

    String fontKey=getFontKey(triplet);

    int sizeMillipoints=state.getFontSize();

    Typeface tf=getTypeface(fontKey);

    SingleByteFont singleByteFont=null;

    if (tf instanceof SingleByteFont) {

      singleByteFont=(SingleByteFont)tf;

    }

    Font font=getFontInfo().getFontInstance(triplet,sizeMillipoints);

    PSFontResource res=getDocumentHandler().getPSResourceForFontKey(fontKey);

    boolean otf=tf instanceof MultiByteFont && ((MultiByteFont)tf).isOTFFile();

    useFont(fontKey,sizeMillipoints,otf);

    if (dp != null && dp[0] != null) {

      x+=dp[0][0];

      y-=dp[0][1];

    }

    generator.writeln("1 0 0 -1 " + formatMptAsPt(generator,x) + " "+ formatMptAsPt(generator,y)+ " Tm");

    int textLen=text.length();

    int start=0;

    if (singleByteFont != null) {

      int currentEncoding=-1;

      for (int i=0; i < textLen; i++) {

        char c=text.charAt(i);

        char mapped=tf.mapChar(c);

        int encoding=mapped / 256;

        if (currentEncoding != encoding) {

          if (i > 0) {

            writeText(text,start,i - start,letterSpacing,wordSpacing,dp,font,tf,false);

          }

          if (encoding == 0) {

            useFont(fontKey,sizeMillipoints,false);

          }

 else {

            useFont(fontKey + "_" + Integer.toString(encoding),sizeMillipoints,false);

          }

          currentEncoding=encoding;

          start=i;

        }

      }

    }

 else {

      if (tf instanceof MultiByteFont && ((MultiByteFont)tf).isOTFFile()) {

        int curEncoding=0;

        for (int i=start; i < textLen; i++) {

          char orgChar=text.charAt(i);

          MultiByteFont mbFont=(MultiByteFont)tf;

          mbFont.mapChar(orgChar);

          int origGlyphIdx=mbFont.findGlyphIndex(orgChar);

          int newGlyphIdx=mbFont.getUsedGlyphs().get(origGlyphIdx);

          int encoding=newGlyphIdx / 256;

          if (encoding != curEncoding) {

            if (i != 0) {

              writeText(text,start,i - start,letterSpacing,wordSpacing,dp,font,tf,true);

              start=i;

            }

            generator.useFont("/" + res.getName() + "."+ encoding,sizeMillipoints / 1000f);

            curEncoding=encoding;

          }

        }

      }

 else {

        useFont(fontKey,sizeMillipoints,false);

      }

    }

    writeText(text,start,textLen - start,letterSpacing,wordSpacing,dp,font,tf,tf instanceof MultiByteFont);

  }

 catch (  IOException ioe) {

    throw new IFException("I/O error in drawText()",ioe);

  }

}

Location: PSPainter.java

Content: 

/** 

 * {@inheritDoc} 

 */

public void endGroup() throws IFException {

  try {

    restoreGraphicsState();

  }

 catch (  IOException ioe) {

    throw new IFException("I/O error in endGroup()",ioe);

  }

}

Location: PSPainter.java

Content: 

/** 

 * {@inheritDoc} 

 */

public void endViewport() throws IFException {

  try {

    restoreGraphicsState();

  }

 catch (  IOException ioe) {

    throw new IFException("I/O error in endViewport()",ioe);

  }

}

Location: PSPainter.java

Content: 

/** 

 * {@inheritDoc} 

 */

public void fillRect(Rectangle rect,Paint fill) throws IFException {

  if (fill == null) {

    return;

  }

  if (rect.width != 0 && rect.height != 0) {

    try {

      endTextObject();

      PSGenerator generator=getGenerator();

      if (fill != null) {

        if (fill instanceof Color) {

          generator.useColor((Color)fill);

        }

 else {

          throw new UnsupportedOperationException("Non-Color paints NYI");

        }

      }

      generator.defineRect(rect.x / 1000.0,rect.y / 1000.0,rect.width / 1000.0,rect.height / 1000.0);

      generator.writeln(generator.mapCommand("fill"));

    }

 catch (    IOException ioe) {

      throw new IFException("I/O error in fillRect()",ioe);

    }

  }

}

Location: PSPainter.java

Content: 

private String formatMptAsPt(PSGenerator gen,int value){

  return gen.formatDouble(value / 1000.0);

}

Location: PSPainter.java

Content: 

private Typeface getTypeface(String fontName){

  if (fontName == null) {

    throw new NullPointerException("fontName must not be null");

  }

  Typeface tf=getFontInfo().getFonts().get(fontName);

  if (tf instanceof LazyFont) {

    tf=((LazyFont)tf).getRealFont();

  }

  return tf;

}

Location: PSPainter.java

Content: 

/** 

 * Default constructor.

 * @param documentHandler the parent document handler

 */

public PSPainter(PSDocumentHandler documentHandler){

  this(documentHandler,IFState.create());

}

Location: PSPainter.java

Content: 

protected PSPainter(PSDocumentHandler documentHandler,IFState state){

  super(documentHandler);

  this.graphicsPainter=new PSGraphicsPainter(getGenerator());

  this.borderPainter=new BorderPainter(graphicsPainter);

  this.state=state;

}

Location: PSPainter.java

Content: 

/** 

 * {@inheritDoc} 

 */

public void startGroup(AffineTransform transform,String layer) throws IFException {

  try {

    PSGenerator generator=getGenerator();

    saveGraphicsState();

    generator.concatMatrix(toPoints(transform));

  }

 catch (  IOException ioe) {

    throw new IFException("I/O error in startGroup()",ioe);

  }

}

Location: PSPainter.java

Content: 

/** 

 * {@inheritDoc} 

 */

public void startViewport(AffineTransform transform,Dimension size,Rectangle clipRect) throws IFException {

  try {

    PSGenerator generator=getGenerator();

    saveGraphicsState();

    generator.concatMatrix(toPoints(transform));

  }

 catch (  IOException ioe) {

    throw new IFException("I/O error in startViewport()",ioe);

  }

  if (clipRect != null) {

    clipRect(clipRect);

  }

}

Location: PSPainter.java

Content: 

private void useFont(String key,int size,boolean otf) throws IOException {

  PSFontResource res=getDocumentHandler().getPSResourceForFontKey(key);

  PSGenerator generator=getGenerator();

  String name="/" + res.getName();

  if (otf) {

    name+=".0";

  }

  generator.useFont(name,size / 1000f);

  res.notifyResourceUsageOnPage(generator.getResourceTracker());

}

Location: PSPainter.java

Content: 

private void writePostScriptString(StringBuffer buffer,StringBuffer string,boolean multiByte){

  writePostScriptString(buffer,string,multiByte,0);

}

Location: PSPainter.java

Content: 

private int writePostScriptString(StringBuffer buffer,StringBuffer string,boolean multiByte,int lineStart){

  buffer.append(multiByte ? '<' : '(');

  int l=string.length();

  int index=0;

  int maxCol=200;

  buffer.append(string.substring(index,Math.min(index + maxCol,l)));

  index+=maxCol;

  while (index < l) {

    if (!multiByte) {

      buffer.append('\\');

    }

    buffer.append(PSGenerator.LF);

    lineStart=buffer.length();

    buffer.append(string.substring(index,Math.min(index + maxCol,l)));

    index+=maxCol;

  }

  buffer.append(multiByte ? '>' : ')');

  return lineStart;

}

Location: PSPainter.java

Content: 

private void writeText(String text,int start,int len,int letterSpacing,int wordSpacing,int[][] dp,Font font,Typeface tf,boolean multiByte) throws IOException {

  PSGenerator generator=getGenerator();

  int end=start + len;

  int initialSize=len;

  initialSize+=initialSize / 2;

  boolean hasLetterSpacing=(letterSpacing != 0);

  boolean needTJ=false;

  int lineStart=0;

  StringBuffer accText=new StringBuffer(initialSize);

  StringBuffer sb=new StringBuffer(initialSize);

  boolean isOTF=multiByte && ((MultiByteFont)tf).isOTFFile();

  for (int i=start; i < end; i++) {

    int orgChar=text.charAt(i);

    int ch;

    int cw;

    int xGlyphAdjust=0;

    int yGlyphAdjust=0;

    if (CharUtilities.isFixedWidthSpace(orgChar)) {

      ch=font.mapChar(CharUtilities.SPACE);

      cw=font.getCharWidth(orgChar);

      xGlyphAdjust=font.getCharWidth(ch) - cw;

    }

 else {

      if ((wordSpacing != 0) && CharUtilities.isAdjustableSpace(orgChar)) {

        xGlyphAdjust-=wordSpacing;

      }

      if (CharUtilities.containsSurrogatePairAt(text,i)) {

        orgChar=Character.toCodePoint((char)orgChar,text.charAt(++i));

      }

      ch=font.mapCodePoint(orgChar);

    }

    if (dp != null && i < dp.length && dp[i] != null) {

      xGlyphAdjust-=dp[i][2] - dp[i][0];

      yGlyphAdjust+=dp[i][3] - dp[i][1];

    }

    if (dp != null && i < dp.length - 1 && dp[i + 1] != null) {

      xGlyphAdjust-=dp[i + 1][0];

      yGlyphAdjust+=dp[i + 1][1];

    }

    if (!multiByte || isOTF) {

      char codepoint=(char)(ch % 256);

      if (isOTF) {

        accText.append(HexEncoder.encode(codepoint,2));

      }

 else {

        PSGenerator.escapeChar(codepoint,accText);

      }

    }

 else {

      accText.append(HexEncoder.encode(ch));

    }

    if (xGlyphAdjust != 0 || yGlyphAdjust != 0) {

      needTJ=true;

      if (sb.length() == 0) {

        sb.append('[');

      }

      if (accText.length() > 0) {

        if ((sb.length() - lineStart + accText.length()) > 200) {

          sb.append(PSGenerator.LF);

          lineStart=sb.length();

        }

        lineStart=writePostScriptString(sb,accText,multiByte,lineStart);

        sb.append(' ');

        accText.setLength(0);

      }

      if (yGlyphAdjust == 0) {

        sb.append(Integer.toString(xGlyphAdjust)).append(' ');

      }

 else {

        sb.append('[');

        sb.append(Integer.toString(yGlyphAdjust)).append(' ');

        sb.append(Integer.toString(xGlyphAdjust)).append(']').append(' ');

      }

    }

  }

  if (needTJ) {

    if (accText.length() > 0) {

      if ((sb.length() - lineStart + accText.length()) > 200) {

        sb.append(PSGenerator.LF);

      }

      writePostScriptString(sb,accText,multiByte);

    }

    if (hasLetterSpacing) {

      sb.append("] " + formatMptAsPt(generator,letterSpacing) + " ATJ");

    }

 else {

      sb.append("] TJ");

    }

  }

 else {

    writePostScriptString(sb,accText,multiByte);

    if (hasLetterSpacing) {

      StringBuffer spb=new StringBuffer();

      spb.append(formatMptAsPt(generator,letterSpacing)).append(" 0 ");

      sb.insert(0,spb.toString());

      sb.append(" " + generator.mapCommand("ashow"));

    }

 else {

      sb.append(" " + generator.mapCommand("show"));

    }

  }

  generator.writeln(sb.toString());

}

