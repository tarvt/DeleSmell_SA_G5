Location: FOPException.java

Content: 

/** 

 * Constructs a new FOP exception with the specified cause.

 * @param cause the cause.

 */

public FOPException(Exception cause){

  super(cause);

}

Location: FOPException.java

Content: 

/** 

 * Constructs a new FOP exception with the specified detail message.

 * @param message the detail message.

 */

public FOPException(String message){

  super(message);

}

Location: FOPException.java

Content: 

/** 

 * Constructs a new exception with the specified detail message and cause.

 * @param message  the detail message

 * @param cause the cause

 */

public FOPException(String message,Exception cause){

  super(message,cause);

}

Location: FOPException.java

Content: 

/** 

 * Constructs a new FOP exception with the specified detail message and location.

 * @param message the detail message.

 * @param locator the locator holding the location.

 */

public FOPException(String message,Locator locator){

  super(message);

  setLocator(locator);

}

Location: FOPException.java

Content: 

/** 

 * Constructs a new FOP exception with the specified detail message and location.

 * @param message the detail message

 * @param systemId the system id of the FO document which is associated with the exceptionmay be null.

 * @param line line number in the FO document which is associated with the exception.

 * @param column clolumn number in the line which is associated with the exception.

 */

public FOPException(String message,String systemId,int line,int column){

  super(message);

  this.systemId=systemId;

  this.line=line;

  this.column=column;

}

Location: FOPException.java

Content: 

/** 

 * Attempts to recast the exception as other Throwable types.

 * @return the exception recast as another type if possible, otherwise null.

 */

protected Throwable getRootException(){

  Throwable result=getException();

  if (result instanceof SAXException) {

    result=((SAXException)result).getException();

  }

  if (result instanceof java.lang.reflect.InvocationTargetException) {

    result=((java.lang.reflect.InvocationTargetException)result).getTargetException();

  }

  if (result != getException()) {

    return result;

  }

  return null;

}

Location: FOPException.java

Content: 

/** 

 * Indicate whether a location was set.

 * @return whether a location was set

 */

public boolean isLocationSet(){

  return line > 0;

}

Location: FOPException.java

Content: 

/** 

 * Prints this FOP exception and its backtrace to the standard error stream.

 */

public void printStackTrace(){

synchronized (System.err) {

    super.printStackTrace();

    if (getException() != null) {

      System.err.println(EXCEPTION_SEPARATOR);

      getException().printStackTrace();

    }

    if (getRootException() != null) {

      System.err.println(EXCEPTION_SEPARATOR);

      getRootException().printStackTrace();

    }

  }

}

Location: FOPException.java

Content: 

/** 

 * Prints this FOP exception and its backtrace to the specified print writer.

 * @param writer PrintWriter to use for output

 */

public void printStackTrace(java.io.PrintWriter writer){

synchronized (writer) {

    super.printStackTrace(writer);

    if (getException() != null) {

      writer.println(EXCEPTION_SEPARATOR);

      getException().printStackTrace(writer);

    }

    if (getRootException() != null) {

      writer.println(EXCEPTION_SEPARATOR);

      getRootException().printStackTrace(writer);

    }

  }

}

Location: FOPException.java

Content: 

/** 

 * Set a location associated with the exception.

 * @param systemId the system id of the FO document which is associated with the exception;may be null.

 * @param line line number in the FO document which is associated with the exception.

 * @param column column number in the line which is associated with the exception.

 */

public void setLocation(String systemId,int line,int column){

  this.systemId=systemId;

  this.line=line;

  this.column=column;

}

