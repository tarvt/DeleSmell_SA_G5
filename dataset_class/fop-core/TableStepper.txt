Location: TableStepper.java

Content: 

/** 

 * Creates ActiveCell instances for cells starting on the row at the given index.

 * @param activeCellList the list that will hold the active cells

 * @param rowIndex the index of the row from which cells must be activated

 */

private void activateCells(List activeCellList,int rowIndex){

  EffRow row=rowGroup[rowIndex];

  for (int i=0; i < columnCount; i++) {

    GridUnit gu=row.getGridUnit(i);

    if (!gu.isEmpty() && gu.isPrimary()) {

      assert (gu instanceof PrimaryGridUnit);

      activeCellList.add(new ActiveCell((PrimaryGridUnit)gu,row,rowIndex,previousRowsLength,getTableLM()));

    }

  }

}

Location: TableStepper.java

Content: 

private void calcTotalHeight(){

  totalHeight=0;

  for (  EffRow aRowGroup : rowGroup) {

    totalHeight+=aRowGroup.getHeight().getOpt();

  }

  if (log.isDebugEnabled()) {

    log.debug("totalHeight=" + totalHeight);

  }

}

Location: TableStepper.java

Content: 

/** 

 * Computes the next minimal step.

 * @return the minimal step from the active cells, &lt; 0 if there is no such step

 */

private int computeMinStep(){

  int minStep=Integer.MAX_VALUE;

  boolean stepFound=false;

  for (  Object activeCell1 : activeCells) {

    ActiveCell activeCell=(ActiveCell)activeCell1;

    int nextStep=activeCell.getNextStep();

    if (nextStep >= 0) {

      stepFound=true;

      minStep=Math.min(minStep,nextStep);

    }

  }

  if (stepFound) {

    return minStep;

  }

 else {

    return -1;

  }

}

Location: TableStepper.java

Content: 

/** 

 * Computes the minimal necessary step to make the next row fit. That is, so such as cell on the next row can contribute some content.

 * @param cells the cells occupying the next row (may include cells starting onprevious rows and spanning over this one)

 */

private void computeRowFirstStep(List cells){

  for (  Object cell : cells) {

    ActiveCell activeCell=(ActiveCell)cell;

    rowFirstStep=Math.max(rowFirstStep,activeCell.getFirstStep());

  }

}

Location: TableStepper.java

Content: 

/** 

 * Determines if the given step will finish the current row, and if so switch to the last step for this row. <p>If the row is finished then the after borders for the cell may change (their conditionalities no longer apply for the cells ending on the current row). Thus the final step may grow with respect to the given one.</p> <p>In more rare occasions, the given step may correspond to the first step of a row-spanning cell, and may be greater than the height of the current row (consider, for example, an unbreakable cell spanning three rows). In such a case the returned step will correspond to the row height and a flag will be set to produce an infinite penalty for this step. This will prevent the breaking algorithm from choosing this break, but still allow to create the appropriate TableContentPosition for the cells ending on the current row.</p>

 * @param step the next step

 * @return the updated step if any

 */

private int considerRowLastStep(int step){

  rowFinished=true;

  for (  Object activeCell3 : activeCells) {

    ActiveCell activeCell=(ActiveCell)activeCell3;

    if (activeCell.endsOnRow(activeRowIndex)) {

      if (!activeCell.finishes(step)) {

        rowFinished=false;

      }

    }

  }

  if (rowFinished) {

    if (log.isTraceEnabled()) {

      log.trace("Step = " + step);

      log.trace("Row finished, computing last step");

    }

    int maxStep=0;

    for (    Object activeCell2 : activeCells) {

      ActiveCell activeCell=(ActiveCell)activeCell2;

      if (activeCell.endsOnRow(activeRowIndex)) {

        maxStep=Math.max(maxStep,activeCell.getLastStep());

      }

    }

    if (log.isTraceEnabled()) {

      log.trace("Max step: " + maxStep);

    }

    for (    Object activeCell1 : activeCells) {

      ActiveCell activeCell=(ActiveCell)activeCell1;

      activeCell.endRow(activeRowIndex);

      if (!activeCell.endsOnRow(activeRowIndex)) {

        activeCell.signalRowLastStep(maxStep);

      }

    }

    if (maxStep < step) {

      log.trace("Row height smaller than first step, produced penalty will be infinite");

      rowHeightSmallerThanFirstStep=true;

    }

    step=maxStep;

    prepareNextRow();

  }

  return step;

}

Location: TableStepper.java

Content: 

/** 

 * Creates the combined element list for a row group.

 * @param context Active LayoutContext

 * @param rows the row group

 * @param bodyType Indicates what type of body is processed (body, header or footer)

 * @return the combined element list

 */

public LinkedList getCombinedKnuthElementsForRowGroup(LayoutContext context,EffRow[] rows,int bodyType){

  setup(rows);

  activateCells(activeCells,0);

  calcTotalHeight();

  int cumulateLength=0;

  TableContentPosition lastTCPos=null;

  LinkedList returnList=new LinkedList();

  int laststep=0;

  int step=getFirstStep();

  do {

    int maxRemainingHeight=getMaxRemainingHeight();

    int penaltyOrGlueLen=step + maxRemainingHeight - totalHeight;

    int boxLen=step - cumulateLength - Math.max(0,penaltyOrGlueLen);

    cumulateLength+=boxLen + Math.max(0,-penaltyOrGlueLen);

    if (log.isDebugEnabled()) {

      log.debug("Next step: " + step + " (+"+ (step - laststep)+ ")");

      log.debug("           max remaining height: " + maxRemainingHeight);

      if (penaltyOrGlueLen >= 0) {

        log.debug("           box = " + boxLen + " penalty = "+ penaltyOrGlueLen);

      }

 else {

        log.debug("           box = " + boxLen + " glue = "+ (-penaltyOrGlueLen));

      }

    }

    LinkedList footnoteList=new LinkedList();

    List cellParts=new java.util.ArrayList(activeCells.size());

    for (    Object activeCell2 : activeCells) {

      ActiveCell activeCell=(ActiveCell)activeCell2;

      CellPart part=activeCell.createCellPart();

      cellParts.add(part);

      activeCell.addFootnotes(footnoteList);

    }

    TableContentPosition tcpos=new TableContentPosition(getTableLM(),cellParts,rowGroup[activeRowIndex]);

    if (delayingNextRow) {

      tcpos.setNewPageRow(rowGroup[activeRowIndex + 1]);

    }

    if (returnList.size() == 0) {

      tcpos.setFlag(TableContentPosition.FIRST_IN_ROWGROUP,true);

    }

    lastTCPos=tcpos;

    if (footnoteList.isEmpty()) {

      returnList.add(new KnuthBox(boxLen,tcpos,false));

    }

 else {

      returnList.add(new KnuthBlockBox(boxLen,footnoteList,tcpos,false));

    }

    int effPenaltyLen=Math.max(0,penaltyOrGlueLen);

    TableHFPenaltyPosition penaltyPos=new TableHFPenaltyPosition(getTableLM());

    if (bodyType == TableRowIterator.BODY) {

      if (!getTableLM().getTable().omitHeaderAtBreak()) {

        effPenaltyLen+=tclm.getHeaderNetHeight();

        penaltyPos.headerElements=tclm.getHeaderElements();

      }

      if (!getTableLM().getTable().omitFooterAtBreak()) {

        effPenaltyLen+=tclm.getFooterNetHeight();

        penaltyPos.footerElements=tclm.getFooterElements();

      }

    }

    Keep keep=getTableLM().getKeepTogether();

    int stepPenalty=0;

    for (    Object activeCell1 : activeCells) {

      ActiveCell activeCell=(ActiveCell)activeCell1;

      keep=keep.compare(activeCell.getKeepWithNext());

      stepPenalty=Math.max(stepPenalty,activeCell.getPenaltyValue());

    }

    if (!rowFinished) {

      keep=keep.compare(rowGroup[activeRowIndex].getKeepTogether());

    }

 else     if (activeRowIndex < rowGroup.length - 1) {

      keep=keep.compare(rowGroup[activeRowIndex].getKeepWithNext());

      keep=keep.compare(rowGroup[activeRowIndex + 1].getKeepWithPrevious());

      nextBreakClass=BreakUtil.compareBreakClasses(nextBreakClass,rowGroup[activeRowIndex].getBreakAfter());

      nextBreakClass=BreakUtil.compareBreakClasses(nextBreakClass,rowGroup[activeRowIndex + 1].getBreakBefore());

    }

    int p=keep.getPenalty();

    if (rowHeightSmallerThanFirstStep) {

      rowHeightSmallerThanFirstStep=false;

      p=KnuthPenalty.INFINITE;

    }

    p=Math.max(p,stepPenalty);

    int breakClass=keep.getContext();

    if (nextBreakClass != Constants.EN_AUTO) {

      log.trace("Forced break encountered");

      p=-KnuthPenalty.INFINITE;

      breakClass=nextBreakClass;

    }

    returnList.add(new BreakElement(penaltyPos,effPenaltyLen,p,breakClass,context));

    laststep=step;

    step=getNextStep();

    if (penaltyOrGlueLen < 0) {

      int shrink=0;

      int stretch=0;

      int width=-penaltyOrGlueLen;

      LayoutManager bslm=getTableLM().getParent();

      if (bslm instanceof BlockStackingLayoutManager && ((BlockStackingLayoutManager)bslm).isRestartAtLM() && keep.getPenalty() == KnuthPenalty.INFINITE) {

        width=0;

      }

      returnList.add(new KnuthGlue(width,stretch,shrink,new Position(null),true));

    }

  }

 while (step >= 0);

  assert !returnList.isEmpty();

  lastTCPos.setFlag(TableContentPosition.LAST_IN_ROWGROUP,true);

  return returnList;

}

Location: TableStepper.java

Content: 

private int getMaxRemainingHeight(){

  int maxW=0;

  for (  Object activeCell1 : activeCells) {

    ActiveCell activeCell=(ActiveCell)activeCell1;

    int remain=activeCell.getRemainingLength();

    PrimaryGridUnit pgu=activeCell.getPrimaryGridUnit();

    for (int i=activeRowIndex + 1; i < pgu.getRowIndex() - rowGroup[0].getIndex() + pgu.getCell().getNumberRowsSpanned(); i++) {

      remain-=rowGroup[i].getHeight().getOpt();

    }

    maxW=Math.max(maxW,remain);

  }

  for (int i=activeRowIndex + 1; i < rowGroup.length; i++) {

    maxW+=rowGroup[i].getHeight().getOpt();

  }

  return maxW;

}

Location: TableStepper.java

Content: 

/** 

 * @return the table layout manager 

 */

private TableLayoutManager getTableLM(){

  return this.tclm.getTableLM();

}

Location: TableStepper.java

Content: 

/** 

 * Pre-activates the cells that will start the next row, and computes the first step for that row.

 */

private void prepareNextRow(){

  if (activeRowIndex < rowGroup.length - 1) {

    previousRowsLength+=rowGroup[activeRowIndex].getHeight().getOpt();

    activateCells(nextActiveCells,activeRowIndex + 1);

    if (log.isTraceEnabled()) {

      log.trace("Computing first step for row " + (activeRowIndex + 2));

    }

    computeRowFirstStep(nextActiveCells);

    if (log.isTraceEnabled()) {

      log.trace("Next first step = " + rowFirstStep);

    }

  }

}

Location: TableStepper.java

Content: 

private void removeCellsEndingOnCurrentRow(){

  for (Iterator iter=activeCells.iterator(); iter.hasNext(); ) {

    ActiveCell activeCell=(ActiveCell)iter.next();

    if (activeCell.endsOnRow(activeRowIndex)) {

      iter.remove();

    }

  }

}

Location: TableStepper.java

Content: 

/** 

 * Initializes the fields of this instance to handle a new row group.

 * @param rows the new row group to handle

 */

private void setup(EffRow[] rows){

  rowGroup=rows;

  previousRowsLength=0;

  activeRowIndex=0;

  activeCells.clear();

  nextActiveCells.clear();

  delayingNextRow=false;

  rowFirstStep=0;

  rowHeightSmallerThanFirstStep=false;

}

Location: TableStepper.java

Content: 

/** 

 * Signals the first step to the active cells, to allow them to add more content to the step if possible.

 * @see ActiveCell#signalRowFirstStep(int)

 */

private void signalRowFirstStep(){

  for (  Object activeCell1 : activeCells) {

    ActiveCell activeCell=(ActiveCell)activeCell1;

    activeCell.signalRowFirstStep(rowFirstStep);

  }

}

Location: TableStepper.java

Content: 

/** 

 * Actually switches to the next row, increasing activeRowIndex and transferring to activeCells the cells starting on the next row.

 */

private void switchToNextRow(){

  activeRowIndex++;

  if (log.isTraceEnabled()) {

    log.trace("Switching to row " + (activeRowIndex + 1));

  }

  for (  Object activeCell1 : activeCells) {

    ActiveCell activeCell=(ActiveCell)activeCell1;

    activeCell.nextRowStarts();

  }

  activeCells.addAll(nextActiveCells);

  nextActiveCells.clear();

}

Location: TableStepper.java

Content: 

/** 

 * Main constructor

 * @param tclm The parent TableContentLayoutManager

 */

public TableStepper(TableContentLayoutManager tclm){

  this.tclm=tclm;

  this.columnCount=tclm.getTableLM().getTable().getNumberOfColumns();

}

