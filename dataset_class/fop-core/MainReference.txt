Location: MainReference.java

Content: 

/** 

 * Add a span area to this area.

 * @param spanAll whether to make a single-column span

 * @return the created span area.

 */

public Span createSpan(boolean spanAll){

  if (spanAreas.size() > 0 && getCurrentSpan().isEmpty()) {

    spanAreas.remove(spanAreas.size() - 1);

  }

  Span newSpan=new Span(((spanAll) ? 1 : getColumnCount()),getColumnGap(),parent.getContentIPD());

  spanAreas.add(newSpan);

  if (wmtg != null) {

    newSpan.setWritingModeTraits(wmtg);

  }

  return getCurrentSpan();

}

Location: MainReference.java

Content: 

/** 

 * Get the span areas from this area.

 * @return the list of span areas

 */

public List<Span> getSpans(){

  return spanAreas;

}

Location: MainReference.java

Content: 

/** 

 * Constructor

 * @param parent the body region this reference area is placed in.

 */

public MainReference(BodyRegion parent){

  this.parent=parent;

  addTrait(Trait.IS_REFERENCE_AREA,Boolean.TRUE);

}

Location: MainReference.java

Content: 

/** 

 * Do not use. Used to handle special page-master for last page: transfer the content that had already been added to a normal page to this main reference for the last page. TODO this is hacky.

 * @param spans content already laid out

 */

public void setSpans(List<Span> spans){

  spanAreas=new ArrayList<Span>(spans);

}

Location: MainReference.java

Content: 

/** 

 * Sets the writing mode traits for the spans of this main reference area.

 * @param wmtg a WM traits getter

 */

public void setWritingModeTraits(WritingModeTraitsGetter wmtg){

  this.wmtg=wmtg;

  for (  Span s : getSpans()) {

    s.setWritingModeTraits(wmtg);

  }

}

