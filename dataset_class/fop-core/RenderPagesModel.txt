Location: RenderPagesModel.java

Content: 

/** 

 * Add a page to the render page model. If the page is finished it can be rendered immediately. If the page needs resolving then if the renderer supports out of order rendering it can prepare the page. Otherwise the page is added to a queue.

 * @param page the page to add to the model

 */

@Override public void addPage(PageViewport page){

  super.addPage(page);

  boolean ready=renderer.supportsOutOfOrder() && page.isResolved();

  if (ready) {

    if (!renderer.supportsOutOfOrder() && page.getPageSequence().isFirstPage(page)) {

      renderer.startPageSequence(getCurrentPageSequence());

    }

    try {

      renderer.renderPage(page);

    }

 catch (    RuntimeException re) {

      String err="Error while rendering page " + page.getPageNumberString();

      log.error(err,re);

      throw re;

    }

catch (    IOException ioe) {

      RendererEventProducer eventProducer=RendererEventProducer.Provider.get(renderer.getUserAgent().getEventBroadcaster());

      eventProducer.ioError(this,ioe);

    }

catch (    FOPException e) {

      String err="Error while rendering page " + page.getPageNumberString();

      log.error(err,e);

      throw new IllegalStateException("Fatal error occurred. Cannot continue. " + e.getClass().getName() + ": "+ err);

    }

    page.clear();

  }

 else {

    preparePage(page);

  }

  boolean cont=checkPreparedPages(page,false);

  if (cont) {

    processOffDocumentItems(pendingODI);

    pendingODI.clear();

  }

}

Location: RenderPagesModel.java

Content: 

/** 

 * {@inheritDoc} 

 */

@Override public void handleOffDocumentItem(OffDocumentItem oDI){

switch (oDI.getWhenToProcess()) {

case OffDocumentItem.IMMEDIATELY:

    renderer.processOffDocumentItem(oDI);

  break;

case OffDocumentItem.AFTER_PAGE:

pendingODI.add(oDI);

break;

case OffDocumentItem.END_OF_DOC:

endDocODI.add(oDI);

break;

default :

throw new RuntimeException();

}

}

Location: RenderPagesModel.java

Content: 

private void processOffDocumentItems(List<OffDocumentItem> list){

  for (  OffDocumentItem oDI : list) {

    renderer.processOffDocumentItem(oDI);

  }

}

Location: RenderPagesModel.java

Content: 

/** 

 * Create a new render pages model with the given renderer.

 * @param userAgent FOUserAgent object for process

 * @param outputFormat the MIME type of the output format to use (ex. "application/pdf").

 * @param fontInfo FontInfo object

 * @param stream OutputStream

 * @throws FOPException if the renderer cannot be properly initialized

 */

public RenderPagesModel(FOUserAgent userAgent,String outputFormat,FontInfo fontInfo,OutputStream stream) throws FOPException {

  super();

  this.renderer=userAgent.getRendererFactory().createRenderer(userAgent,outputFormat);

  try {

    renderer.setupFontInfo(fontInfo);

    if (!fontInfo.isSetupValid()) {

      throw new FOPException("No default font defined by OutputConverter");

    }

    renderer.startRenderer(stream);

  }

 catch (  IOException e) {

    throw new FOPException(e);

  }

}

