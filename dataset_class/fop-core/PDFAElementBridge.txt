Location: PDFAElementBridge.java

Content: 

/** 

 * Builds using the specified BridgeContext and element, the specified graphics node.

 * @param ctx the bridge context to use

 * @param e the element that describes the graphics node to build

 * @return node the new graphics node

 */

public GraphicsNode createGraphicsNode(BridgeContext ctx,Element e){

  PDFANode aNode=(PDFANode)super.createGraphicsNode(ctx,e);

  aNode.setDestination(((SVGAElement)e).getHref().getBaseVal());

  aNode.setTransform(transform);

  return aNode;

}

Location: PDFAElementBridge.java

Content: 

/** 

 * @return the transformation matrix for links 

 */

public AffineTransform getCurrentTransform(){

  return this.transform;

}

Location: PDFAElementBridge.java

Content: 

/** 

 * Creates a  {@link org.apache.batik.gvt.CompositeGraphicsNode}.

 * @return a new PDFANode

 */

protected GraphicsNode instantiateGraphicsNode(){

  return new PDFANode();

}

Location: PDFAElementBridge.java

Content: 

/** 

 * Returns true as the &lt;a&gt; element is a container.

 * @return true if the a element is a container

 */

public boolean isComposite(){

  return true;

}

Location: PDFAElementBridge.java

Content: 

/** 

 * Constructs a new bridge for the &lt;a&gt; element.

 */

public PDFAElementBridge(){

}

Location: PDFAElementBridge.java

Content: 

/** 

 * Set the current transform of this element.

 * @param tf the transform

 */

public void setCurrentTransform(AffineTransform tf){

  transform=tf;

}

