Location: TextArea.java

Content: 

/** 

 * Create and add a SpaceArea child to this TextArea

 * @param space the space character

 * @param ipd the space's ipd

 * @param blockProgressionOffset     the offset for the next area

 * @param adjustable is this space adjustable?

 * @param level resolved bidirection level of space character

 */

public void addSpace(char space,int ipd,boolean adjustable,int blockProgressionOffset,int level){

  SpaceArea spaceArea=new SpaceArea(blockProgressionOffset,level,space,adjustable);

  spaceArea.setIPD(ipd);

  spaceArea.setChangeBarList(getChangeBarList());

  addChildArea(spaceArea);

  spaceArea.setParentArea(this);

  updateLevel(level);

}

Location: TextArea.java

Content: 

/** 

 * Create and add a WordArea child to this TextArea.

 * @param word   the word string

 * @param offset the offset for the next area

 */

public void addWord(String word,int offset){

  addWord(word,0,null,null,null,offset);

}

Location: TextArea.java

Content: 

/** 

 * Create and add a WordArea child to this TextArea.

 * @param word   the word string

 * @param offset the offset for the next area

 * @param level  bidirectional level that applies to entire word

 */

public void addWord(String word,int offset,int level){

  addWord(word,0,null,makeLevels(level,word.length()),null,offset);

}

Location: TextArea.java

Content: 

public void addWord(String word,int ipd,int[] letterAdjust,int[] levels,int[][] gposAdjustments,int blockProgressionOffset){

  addWord(word,ipd,letterAdjust,levels,gposAdjustments,blockProgressionOffset,false);

}

Location: TextArea.java

Content: 

/** 

 * Create and add a WordArea child to this TextArea.

 * @param word the word string

 * @param ipd the word's ipd

 * @param letterAdjust the letter adjustment array (may be null)

 * @param levels array of resolved bidirectional levels of word characters,or null if default level

 * @param gposAdjustments array of general position adjustments or null if none apply

 * @param blockProgressionOffset the offset for the next area

 */

public void addWord(String word,int ipd,int[] letterAdjust,int[] levels,int[][] gposAdjustments,int blockProgressionOffset,boolean nextIsSpace){

  int minWordLevel=findMinLevel(levels,getBidiLevel());

  WordArea wordArea=new WordArea(blockProgressionOffset,minWordLevel,word,letterAdjust,levels,gposAdjustments,false,nextIsSpace);

  wordArea.setIPD(ipd);

  wordArea.setChangeBarList(getChangeBarList());

  addChildArea(wordArea);

  wordArea.setParentArea(this);

  updateLevel(minWordLevel);

}

Location: TextArea.java

Content: 

private static int findMinLevel(int[] levels,int defaultLevel){

  if (levels != null) {

    int lMin=Integer.MAX_VALUE;

    for (    int l : levels) {

      if ((l >= 0) && (l < lMin)) {

        lMin=l;

      }

    }

    if (lMin == Integer.MAX_VALUE) {

      return -1;

    }

 else {

      return lMin;

    }

  }

 else {

    return defaultLevel;

  }

}

Location: TextArea.java

Content: 

public int getEffectiveIPD(){

  return getIPD();

}

Location: TextArea.java

Content: 

/** 

 * Remove the old text

 */

public void removeText(){

  inlines.clear();

}

Location: TextArea.java

Content: 

/** 

 * Records that the last word in this text area is hyphenated.

 */

public void setHyphenated(){

  this.isHyphenated=true;

}

Location: TextArea.java

Content: 

/** 

 * Create a text inline area

 */

public TextArea(){

}

Location: TextArea.java

Content: 

/** 

 * Constructor with extra parameters: create a TextAdjustingInfo object

 * @param stretch  the available stretch of the text

 * @param shrink   the available shrink of the text

 * @param adj      the current total adjustment

 */

public TextArea(int stretch,int shrink,int adj){

  super(stretch,shrink,adj);

}

