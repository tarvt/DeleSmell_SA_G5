Location: ConditionalBorder.java

Content: 

private ConditionalBorder(BorderSpecification normal,BorderSpecification leadingTrailing,BorderSpecification rest,CollapsingBorderModel collapsingBorderModel){

  assert collapsingBorderModel != null;

  this.normal=normal;

  this.leadingTrailing=leadingTrailing;

  this.rest=rest;

  this.collapsingBorderModel=collapsingBorderModel;

}

Location: ConditionalBorder.java

Content: 

/** 

 * Creates a new conditional border.

 * @param borderSpecification the border specification to take as a basis

 * @param collapsingBorderModel the model that will be used to resolved borders

 */

ConditionalBorder(BorderSpecification borderSpecification,CollapsingBorderModel collapsingBorderModel){

  this(borderSpecification,borderSpecification,borderSpecification.getBorderInfo().getWidth().isDiscard() ? BorderSpecification.getDefaultBorder() : borderSpecification,collapsingBorderModel);

}

Location: ConditionalBorder.java

Content: 

/** 

 * Returns a shallow copy of this border.

 * @return a copy of this border

 */

ConditionalBorder copy(){

  return new ConditionalBorder(normal,leadingTrailing,rest,collapsingBorderModel);

}

Location: ConditionalBorder.java

Content: 

/** 

 * Returns a default border specification.

 * @param collapsingBorderModel the model that will be used to resolve borders

 * @return a border with style 'none' for all of the three components

 */

static ConditionalBorder getDefaultBorder(CollapsingBorderModel collapsingBorderModel){

  BorderSpecification defaultBorderSpec=BorderSpecification.getDefaultBorder();

  return new ConditionalBorder(defaultBorderSpec,defaultBorderSpec,defaultBorderSpec,collapsingBorderModel);

}

Location: ConditionalBorder.java

Content: 

/** 

 * Integrates the given segment in this border. Unlike for {@link #integrateSegment(ConditionalBorder,boolean,boolean,boolean)}, this method nicely handles the case where the CollapsingBorderModel returns null, by keeping the components to their old values.

 * @param competitor

 * @param withNormal

 * @param withLeadingTrailing

 * @param withRest

 */

void integrateCompetingSegment(ConditionalBorder competitor,boolean withNormal,boolean withLeadingTrailing,boolean withRest){

  if (withNormal) {

    BorderSpecification resolvedBorder=collapsingBorderModel.determineWinner(normal,competitor.normal);

    if (resolvedBorder != null) {

      normal=resolvedBorder;

    }

  }

  if (withLeadingTrailing) {

    BorderSpecification resolvedBorder=collapsingBorderModel.determineWinner(leadingTrailing,competitor.leadingTrailing);

    if (resolvedBorder != null) {

      leadingTrailing=resolvedBorder;

    }

  }

  if (withRest) {

    BorderSpecification resolvedBorder=collapsingBorderModel.determineWinner(rest,competitor.rest);

    if (resolvedBorder != null) {

      rest=resolvedBorder;

    }

  }

}

Location: ConditionalBorder.java

Content: 

/** 

 * Updates this border after taking into account the given segment. The CollapsingBorderModel is not expected to return null.

 * @param segment

 * @param withNormal

 * @param withLeadingTrailing

 * @param withRest

 */

void integrateSegment(ConditionalBorder segment,boolean withNormal,boolean withLeadingTrailing,boolean withRest){

  if (withNormal) {

    normal=collapsingBorderModel.determineWinner(normal,segment.normal);

    assert normal != null;

  }

  if (withLeadingTrailing) {

    leadingTrailing=collapsingBorderModel.determineWinner(leadingTrailing,segment.leadingTrailing);

    assert leadingTrailing != null;

  }

  if (withRest) {

    rest=collapsingBorderModel.determineWinner(rest,segment.rest);

    assert rest != null;

  }

}

Location: ConditionalBorder.java

Content: 

/** 

 * Resolves and updates the relevant parts of this border as well as the given one.

 * @param competitor

 * @param withNormal

 * @param withLeadingTrailing

 * @param withRest

 */

void resolve(ConditionalBorder competitor,boolean withNormal,boolean withLeadingTrailing,boolean withRest){

  if (withNormal) {

    BorderSpecification resolvedBorder=collapsingBorderModel.determineWinner(normal,competitor.normal);

    if (resolvedBorder != null) {

      normal=resolvedBorder;

      competitor.normal=resolvedBorder;

    }

  }

  if (withLeadingTrailing) {

    BorderSpecification resolvedBorder=collapsingBorderModel.determineWinner(leadingTrailing,competitor.leadingTrailing);

    if (resolvedBorder != null) {

      leadingTrailing=resolvedBorder;

      competitor.leadingTrailing=resolvedBorder;

    }

  }

  if (withRest) {

    BorderSpecification resolvedBorder=collapsingBorderModel.determineWinner(rest,competitor.rest);

    if (resolvedBorder != null) {

      rest=resolvedBorder;

      competitor.rest=resolvedBorder;

    }

  }

}

