Location: Block.java

Content: 

/** 

 * Add the block to this block area.

 * @param block the block area to add

 * @param autoHeight increase the height of the block.

 */

public void addBlock(Block block,boolean autoHeight){

  if (autoHeight && allowBPDUpdate && block.isStacked()) {

    bpd+=block.getAllocBPD();

  }

  addChildArea(block);

}

Location: Block.java

Content: 

/** 

 * Add the line area to this block area.

 * @param line the line area to add

 */

public void addLineArea(LineArea line){

  bpd+=line.getAllocBPD();

  addChildArea(line);

}

Location: Block.java

Content: 

public Block(){

  allowBPDUpdate=true;

}

Location: Block.java

Content: 

/** 

 * Base constructor

 * @param parent FONode that is the parent of this object

 */

public Block(FONode parent){

  super(parent);

}

Location: Block.java

Content: 

/** 

 * {@inheritDoc} 

 */

public CharIterator charIterator(){

  return NullCharIterator.getInstance();

}

Location: Block.java

Content: 

/** 

 * @return the {@link CommonHyphenation} 

 */

public CommonHyphenation getCommonHyphenation(){

  return commonHyphenation;

}

Location: Block.java

Content: 

/** 

 * @return the {@link CommonRelativePosition} 

 */

public CommonRelativePosition getCommonRelativePosition(){

  return this.commonRelativePosition;

}

Location: Block.java

Content: 

/** 

 * @return the "hyphenation-keep" trait 

 */

public int getHyphenationKeep(){

  return this.hyphenationKeep;

}

Location: Block.java

Content: 

/** 

 * @return the "hyphenation-ladder-count" trait.  

 */

public Numeric getHyphenationLadderCount(){

  return hyphenationLadderCount;

}

Location: Block.java

Content: 

/** 

 * @return the "intrusion-displace" trait 

 */

public int getIntrusionDisplace(){

  return this.intrusionDisplace;

}

Location: Block.java

Content: 

/** 

 * @return the "last-line-end-indent" trait 

 */

public Length getLastLineEndIndent(){

  return lastLineEndIndent;

}

Location: Block.java

Content: 

/** 

 * @return the "linefeed-treatment" trait 

 */

public int getLinefeedTreatment(){

  return linefeedTreatment;

}

Location: Block.java

Content: 

/** 

 * @return the "line-height-shift-adjustment" trait 

 */

public int getLineHeightShiftAdjustment(){

  return this.lineHeightShiftAdjustment;

}

Location: Block.java

Content: 

/** 

 * @return the "line-stacking-strategy" trait.  

 */

public int getLineStackingStrategy(){

  return lineStackingStrategy;

}

Location: Block.java

Content: 

/** 

 * @return the "orphans" trait.  

 */

public int getOrphans(){

  return orphans.getValue();

}

Location: Block.java

Content: 

/** 

 * Get the positioning of this area.

 * @return the positioning to use when rendering this area

 */

public int getPositioning(){

  return positioning;

}

Location: Block.java

Content: 

/** 

 * @return the "text-align" trait 

 */

public int getTextAlign(){

  return textAlign;

}

Location: Block.java

Content: 

/** 

 * @return the "text-align-last" trait 

 */

public int getTextAlignLast(){

  return textAlignLast;

}

Location: Block.java

Content: 

/** 

 * @return the "text-indent" trait 

 */

public Length getTextIndent(){

  return textIndent;

}

Location: Block.java

Content: 

public int getVisibility(){

  return visibility;

}

Location: Block.java

Content: 

/** 

 * @return the "white-space-collapse" trait 

 */

public int getWhitespaceCollapse(){

  return whiteSpaceCollapse;

}

Location: Block.java

Content: 

/** 

 * @return the "white-space-treatment" trait 

 */

public int getWhitespaceTreatment(){

  return whiteSpaceTreatment;

}

Location: Block.java

Content: 

/** 

 * @return the "widows" trait.  

 */

public int getWidows(){

  return widows.getValue();

}

Location: Block.java

Content: 

/** 

 * @return the "wrap-option" trait 

 */

public int getWrapOption(){

  return wrapOption;

}

Location: Block.java

Content: 

/** 

 * Indicates whether this block is stacked, rather than absolutely positioned.

 * @return true if it is stacked

 */

public boolean isStacked(){

  return (getPositioning() == Block.STACK || getPositioning() == Block.RELATIVE);

}

Location: Block.java

Content: 

/** 

 * Set the positioning of this area.

 * @param pos the positioning to use when rendering this area

 */

public void setPositioning(int pos){

  positioning=pos;

}

