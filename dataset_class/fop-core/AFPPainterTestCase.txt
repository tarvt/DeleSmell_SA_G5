Location: AFPPainterTestCase.java

Content: 

@Test public void testDrawBorderRect3() throws IFException, PropertyException, IOException {

  FOUserAgent ua=FopFactory.newInstance(new File(".").toURI()).newFOUserAgent();

  AFPDocumentHandler documentHandler=new AFPDocumentHandler(new IFContext(ua));

  ByteArrayOutputStream os=new ByteArrayOutputStream();

  documentHandler.setResult(new StreamResult(os));

  documentHandler.startDocument();

  documentHandler.startPage(0,"","",new Dimension());

  AFPPainter afpPainter=new AFPPainter(documentHandler);

  int style=Constants.EN_DOTTED;

  BorderProps.Mode mode=BorderProps.Mode.COLLAPSE_OUTER;

  Color color=ColorUtil.parseColorString(ua,"fop-rgb-icc(0.5019608,0.5019608,0.5019608,#CMYK,,0,0,0,0.5)");

  int borderWidth=500;

  int radiusStart=0;

  int radiusEnd=0;

  BorderProps border1=new BorderProps(style,borderWidth,radiusStart,radiusEnd,color,mode);

  afpPainter.drawBorderRect(new Rectangle(0,0,552755,16090),null,border1,null,null,Color.WHITE);

  documentHandler.endDocument();

  InputStream bis=new ByteArrayInputStream(os.toByteArray());

  StringBuilder sb=new StringBuilder();

  new AFPParser(false).read(bis,sb);

  Assert.assertEquals(sb.toString(),"BEGIN DOCUMENT DOC00001\n" + "BEGIN PAGE PGN00001\n" + "BEGIN ACTIVE_ENVIRONMENT_GROUP AEG00001\n"+ "DESCRIPTOR PAGE\n"+ "MIGRATION PRESENTATION_TEXT\n"+ "END ACTIVE_ENVIRONMENT_GROUP AEG00001\n"+ "BEGIN PRESENTATION_TEXT PT000001\n"+ "DATA PRESENTATION_TEXT\n"+ "END PRESENTATION_TEXT PT000001\n"+ "BEGIN PRESENTATION_TEXT PT000002\n"+ "DATA PRESENTATION_TEXT\n"+ "END PRESENTATION_TEXT PT000002\n"+ "END PAGE PGN00001\n"+ "END DOCUMENT DOC00001\n");

}

Location: AFPPainterTestCase.java

Content: 

@Test public void testPresentationText() throws URISyntaxException, IFException, IOException {

  List<String> strings=new ArrayList<String>();

  strings.add("test");

  Assert.assertEquals(writeText(strings),"BEGIN DOCUMENT DOC00001\n" + "BEGIN PAGE PGN00001\n" + "BEGIN ACTIVE_ENVIRONMENT_GROUP AEG00001\n"+ "DESCRIPTOR PAGE\n"+ "MIGRATION PRESENTATION_TEXT\n"+ "END ACTIVE_ENVIRONMENT_GROUP AEG00001\n"+ "BEGIN PRESENTATION_TEXT PT000001\n"+ "DATA PRESENTATION_TEXT\n"+ "END PRESENTATION_TEXT PT000001\n"+ "END PAGE PGN00001\n"+ "END DOCUMENT DOC00001\n");

  for (int i=0; i < 5000; i++) {

    strings.add("test");

  }

  Assert.assertEquals(writeText(strings),"BEGIN DOCUMENT DOC00001\n" + "BEGIN PAGE PGN00001\n" + "BEGIN ACTIVE_ENVIRONMENT_GROUP AEG00001\n"+ "DESCRIPTOR PAGE\n"+ "MIGRATION PRESENTATION_TEXT\n"+ "END ACTIVE_ENVIRONMENT_GROUP AEG00001\n"+ "BEGIN PRESENTATION_TEXT PT000001\n"+ "DATA PRESENTATION_TEXT\n"+ "END PRESENTATION_TEXT PT000001\n"+ "BEGIN PRESENTATION_TEXT PT000002\n"+ "DATA PRESENTATION_TEXT\n"+ "END PRESENTATION_TEXT PT000002\n"+ "END PAGE PGN00001\n"+ "END DOCUMENT DOC00001\n");

}

Location: AFPPainterTestCase.java

Content: 

@Test public void testPresentationText2() throws URISyntaxException, IFException, IOException {

  List<String> strings=new ArrayList<String>();

  for (int i=0; i < 5000; i++) {

    strings.add("tes");

  }

  Assert.assertEquals(writeText(strings),"BEGIN DOCUMENT DOC00001\n" + "BEGIN PAGE PGN00001\n" + "BEGIN ACTIVE_ENVIRONMENT_GROUP AEG00001\n"+ "DESCRIPTOR PAGE\n"+ "MIGRATION PRESENTATION_TEXT\n"+ "END ACTIVE_ENVIRONMENT_GROUP AEG00001\n"+ "BEGIN PRESENTATION_TEXT PT000001\n"+ "DATA PRESENTATION_TEXT\n"+ "END PRESENTATION_TEXT PT000001\n"+ "BEGIN PRESENTATION_TEXT PT000002\n"+ "DATA PRESENTATION_TEXT\n"+ "END PRESENTATION_TEXT PT000002\n"+ "END PAGE PGN00001\n"+ "END DOCUMENT DOC00001\n");

}

Location: AFPPainterTestCase.java

Content: 

private String writeText(List<String> text) throws URISyntaxException, IOException, IFException {

  FOUserAgent agent=FopFactory.newInstance(new URI(".")).newFOUserAgent();

  IFContext context=new IFContext(agent);

  AFPDocumentHandler doc=new AFPDocumentHandler(context);

  AFPPainter afpPainter=new AFPPainter(doc);

  FontInfo fi=new FontInfo();

  fi.addFontProperties("",Font.DEFAULT_FONT);

  RasterFont rf=new RasterFont("",true);

  CharacterSet cs=mock(CharacterSet.class);

  CharactersetEncoder.EncodedChars encoder=mock(CharactersetEncoder.EncodedChars.class);

  when(cs.encodeChars(anyString())).thenReturn(encoder);

  when(encoder.getLength()).thenReturn(text.get(0).length());

  rf.addCharacterSet(12000,cs);

  fi.addMetrics("",rf);

  doc.setFontInfo(fi);

  afpPainter.setFont("any","normal",400,"",12000,Color.BLACK);

  ByteArrayOutputStream outputStream=new ByteArrayOutputStream();

  doc.setResult(new StreamResult(outputStream));

  doc.startDocument();

  doc.startPage(0,"","",new Dimension());

  for (  String s : text) {

    afpPainter.drawText(0,0,0,0,null,s);

  }

  doc.endDocument();

  InputStream bis=new ByteArrayInputStream(outputStream.toByteArray());

  StringBuilder sb=new StringBuilder();

  new AFPParser(false).read(bis,sb);

  return sb.toString();

}

