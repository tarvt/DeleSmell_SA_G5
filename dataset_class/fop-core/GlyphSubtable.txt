Location: GlyphSubtable.java

Content: 

/** 

 * @return this subtable's class mapping or null if mapping is not a class mapping 

 */

public GlyphClassMapping getClasses(){

  if (mapping instanceof GlyphClassMapping) {

    return (GlyphClassMapping)mapping;

  }

 else {

    return null;

  }

}

Location: GlyphSubtable.java

Content: 

/** 

 * @return this subtable's coverage mapping or null if mapping is not a coverage mapping 

 */

public GlyphCoverageMapping getCoverage(){

  if (mapping instanceof GlyphCoverageMapping) {

    return (GlyphCoverageMapping)mapping;

  }

 else {

    return null;

  }

}

Location: GlyphSubtable.java

Content: 

/** 

 * Determine consistent flags for a set of subtables.

 * @param subtables array of glyph subtables

 * @return consistent flags

 * @throws IllegalStateException if inconsistent flags

 */

public static int getFlags(GlyphSubtable[] subtables) throws IllegalStateException {

  if ((subtables == null) || (subtables.length == 0)) {

    return 0;

  }

 else {

    int flags=0;

    for (    GlyphSubtable subtable1 : subtables) {

      int f=subtable1.getFlags();

      if (flags == 0) {

        flags=f;

        break;

      }

    }

    for (    GlyphSubtable subtable : subtables) {

      int f=subtable.getFlags();

      if (f != flags) {

        throw new IllegalStateException("inconsistent lookup flags " + f + ", expected "+ flags);

      }

    }

    return flags | (usesReverseScan(subtables) ? LF_INTERNAL_USE_REVERSE_SCAN : 0);

  }

}

Location: GlyphSubtable.java

Content: 

/** 

 * @return this subtable's lookup identifer 

 */

public String getLookupId(){

  return lookupId;

}

Location: GlyphSubtable.java

Content: 

/** 

 * @return this subtable's sequence (index) within lookup 

 */

public int getSequence(){

  return sequence;

}

Location: GlyphSubtable.java

Content: 

/** 

 * @return this subtable's table type 

 */

public abstract int getTableType();

Location: GlyphSubtable.java

Content: 

/** 

 * @return this subtable's type name 

 */

public abstract String getTypeName();

Location: GlyphSubtable.java

Content: 

/** 

 * Instantiate this glyph subtable.

 * @param lookupId lookup identifier, having form of "lu%d" where %d is index of lookup in lookup list

 * @param sequence subtable sequence (within lookup), starting with zero

 * @param flags subtable flags

 * @param format subtable format

 * @param mapping subtable mapping table

 */

protected GlyphSubtable(String lookupId,int sequence,int flags,int format,GlyphMappingTable mapping){

  if ((lookupId == null) || (lookupId.length() == 0)) {

    throw new AdvancedTypographicTableFormatException("invalid lookup identifier, must be non-empty string");

  }

 else   if (mapping == null) {

    throw new AdvancedTypographicTableFormatException("invalid mapping table, must not be null");

  }

 else {

    this.lookupId=lookupId;

    this.sequence=sequence;

    this.flags=flags;

    this.format=format;

    this.mapping=mapping;

  }

}

Location: GlyphSubtable.java

Content: 

/** 

 * Determine if a glyph subtable is compatible with this glyph subtable. Two glyph subtables are compatible if the both may appear in a single lookup table.

 * @param subtable a glyph subtable to determine compatibility

 * @return true if specified subtable is compatible with this glyph subtable, where by compatibleis meant that they share the same lookup type

 */

public abstract boolean isCompatible(GlyphSubtable subtable);

Location: GlyphSubtable.java

Content: 

/** 

 * Resolve references to lookup tables, e.g., in RuleLookup, to the lookup tables themselves.

 * @param lookupTables map from lookup table identifers, e.g. "lu4", to lookup tables

 */

public void resolveLookupReferences(Map<String,GlyphTable.LookupTable> lookupTables){

}

Location: GlyphSubtable.java

Content: 

/** 

 * Establish a weak reference from this subtable to its parent table. If table parameter is specified as <code>null</code>, then clear and remove weak reference.

 * @param table the table or null

 * @throws IllegalStateException if table is already set to non-null

 */

public synchronized void setTable(GlyphTable table) throws IllegalStateException {

  WeakReference r=this.table;

  if (table == null) {

    this.table=null;

    if (r != null) {

      r.clear();

    }

  }

 else   if (r == null) {

    this.table=new WeakReference(table);

  }

 else {

    throw new IllegalStateException("table already set");

  }

}

Location: GlyphSubtable.java

Content: 

/** 

 * @return true if subtable uses reverse scanning of glyph sequence, meaning from the last glyphin a glyph sequence to the first glyph

 */

public abstract boolean usesReverseScan();

Location: GlyphSubtable.java

Content: 

/** 

 * Determine if any of the specified subtables uses reverse scanning.

 * @param subtables array of glyph subtables

 * @return true if any of the specified subtables uses reverse scanning.

 */

public static boolean usesReverseScan(GlyphSubtable[] subtables){

  if ((subtables == null) || (subtables.length == 0)) {

    return false;

  }

 else {

    for (    GlyphSubtable subtable : subtables) {

      if (subtable.usesReverseScan()) {

        return true;

      }

    }

    return false;

  }

}

