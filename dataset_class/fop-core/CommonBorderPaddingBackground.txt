Location: CommonBorderPaddingBackground.java

Content: 

/** 

 * Construct a CommonBorderPaddingBackground object.

 * @param pList The PropertyList to get properties from.

 * @throws PropertyException if there's an error while binding the properties

 */

CommonBorderPaddingBackground(PropertyList pList) throws PropertyException {

  backgroundAttachment=pList.get(Constants.PR_BACKGROUND_ATTACHMENT).getEnum();

  Color bc=pList.get(Constants.PR_BACKGROUND_COLOR).getColor(pList.getFObj().getUserAgent());

  if (bc.getAlpha() == 0) {

    backgroundColor=null;

  }

 else {

    backgroundColor=bc;

  }

  String img=pList.get(Constants.PR_BACKGROUND_IMAGE).getString();

  if (img == null || "none".equals(img)) {

    backgroundImage="";

    backgroundRepeat=-1;

    backgroundPositionHorizontal=null;

    backgroundPositionVertical=null;

  }

 else {

    backgroundImage=img;

    backgroundRepeat=pList.get(Constants.PR_BACKGROUND_REPEAT).getEnum();

    backgroundPositionHorizontal=pList.get(Constants.PR_BACKGROUND_POSITION_HORIZONTAL).getLength();

    backgroundPositionVertical=pList.get(Constants.PR_BACKGROUND_POSITION_VERTICAL).getLength();

  }

  backgroungImageTargetWidth=pList.get(Constants.PR_X_BACKGROUND_IMAGE_WIDTH).getLength();

  backgroungImageTargetHeight=pList.get(Constants.PR_X_BACKGROUND_IMAGE_HEIGHT).getLength();

  initBorderInfo(pList,BEFORE,Constants.PR_BORDER_BEFORE_COLOR,Constants.PR_BORDER_BEFORE_STYLE,Constants.PR_BORDER_BEFORE_WIDTH,Constants.PR_PADDING_BEFORE,Constants.PR_X_BORDER_BEFORE_RADIUS_START,Constants.PR_X_BORDER_BEFORE_RADIUS_END);

  initBorderInfo(pList,AFTER,Constants.PR_BORDER_AFTER_COLOR,Constants.PR_BORDER_AFTER_STYLE,Constants.PR_BORDER_AFTER_WIDTH,Constants.PR_PADDING_AFTER,Constants.PR_X_BORDER_AFTER_RADIUS_START,Constants.PR_X_BORDER_AFTER_RADIUS_END);

  initBorderInfo(pList,START,Constants.PR_BORDER_START_COLOR,Constants.PR_BORDER_START_STYLE,Constants.PR_BORDER_START_WIDTH,Constants.PR_PADDING_START,Constants.PR_X_BORDER_START_RADIUS_BEFORE,Constants.PR_X_BORDER_START_RADIUS_AFTER);

  initBorderInfo(pList,END,Constants.PR_BORDER_END_COLOR,Constants.PR_BORDER_END_STYLE,Constants.PR_BORDER_END_WIDTH,Constants.PR_PADDING_END,Constants.PR_X_BORDER_END_RADIUS_BEFORE,Constants.PR_X_BORDER_END_RADIUS_AFTER);

}

Location: CommonBorderPaddingBackground.java

Content: 

/** 

 * Returns the "background-attachment" property.

 * @return the "background-attachment" property.

 */

public int getBackgroundAttachment(){

  return backgroundAttachment;

}

Location: CommonBorderPaddingBackground.java

Content: 

/** 

 * Returns the "background-image" property.

 * @return the "background-image" property.

 */

public String getBackgroundImage(){

  return backgroundImage;

}

Location: CommonBorderPaddingBackground.java

Content: 

/** 

 * Returns the background image info

 * @return the background image info

 */

public ImageInfo getBackgroundImageInfo(){

  return backgroundImageInfo;

}

Location: CommonBorderPaddingBackground.java

Content: 

/** 

 * Returns the "background-position-horizontal" property.

 * @return the "background-position-horizontal" property.

 */

public Length getBackgroundPositionHorizontal(){

  return backgroundPositionHorizontal;

}

Location: CommonBorderPaddingBackground.java

Content: 

/** 

 * Returns the "background-position-vertical" property.

 * @return the "background-position-vertical" property.

 */

public Length getBackgroundPositionVertical(){

  return backgroundPositionVertical;

}

Location: CommonBorderPaddingBackground.java

Content: 

/** 

 * Returns the "background-repeat" property.

 * @return the "background-repeat" property.

 */

public int getBackgroundRepeat(){

  return backgroundRepeat;

}

Location: CommonBorderPaddingBackground.java

Content: 

/** 

 * @param discard indicates whether the .conditionality component should beconsidered (end of a reference-area)

 * @return the width of the after-border, taking into account the specified conditionality

 */

public int getBorderAfterWidth(boolean discard){

  return getBorderWidth(AFTER,discard);

}

Location: CommonBorderPaddingBackground.java

Content: 

/** 

 * @param discard indicates whether the .conditionality component should beconsidered (start of a reference-area)

 * @return the width of the before-border, taking into account the specified conditionality

 */

public int getBorderBeforeWidth(boolean discard){

  return getBorderWidth(BEFORE,discard);

}

Location: CommonBorderPaddingBackground.java

Content: 

/** 

 * The border-color for the given side

 * @param side one of {@link #BEFORE},  {@link #AFTER},  {@link #START},  {@link #END}

 * @return  the border-color for the given side

 */

public Color getBorderColor(int side){

  if (borderInfo[side] != null) {

    return borderInfo[side].getColor();

  }

 else {

    return null;

  }

}

Location: CommonBorderPaddingBackground.java

Content: 

/** 

 * @param discard indicates whether the .conditionality component should beconsidered (end of a reference-area)

 * @return the width of the end-border, taking into account the specified conditionality

 */

public int getBorderEndWidth(boolean discard){

  return getBorderWidth(END,discard);

}

Location: CommonBorderPaddingBackground.java

Content: 

/** 

 * Returns the border info

 * @return the border info

 */

public BorderInfo[] getBorderInfo(){

  return borderInfo;

}

Location: CommonBorderPaddingBackground.java

Content: 

/** 

 * @param side the side to retrieve

 * @return the border info for a side

 */

public BorderInfo getBorderInfo(int side){

  if (this.borderInfo[side] == null) {

    return getDefaultBorderInfo();

  }

 else {

    return this.borderInfo[side];

  }

}

Location: CommonBorderPaddingBackground.java

Content: 

/** 

 * Returns the border corner radius of the ending edge i.e. the edge either adjacent to the after or end border

 * @param side the border side

 * @param discard indicates whether the .conditionality component should beconsidered (end of a reference-area)

 * @param context the context for percentage calculations

 * @return the border radius of the of the ending corner

 */

public int getBorderRadiusEnd(int side,boolean discard,PercentBaseContext context){

  if (borderInfo[side] == null) {

    return 0;

  }

 else {

    return borderInfo[side].radiusEnd.getLengthValue(context);

  }

}

Location: CommonBorderPaddingBackground.java

Content: 

/** 

 * Returns the border corner radius of the starting edge i.e. the edge either adjacent to the before or start border.

 * @param side the border side

 * @param discard indicates whether the .conditionality component should beconsidered (end of a reference-area)

 * @param context the context for percentage calculations

 * @return the border radius of the of the starting corner

 */

public int getBorderRadiusStart(int side,boolean discard,PercentBaseContext context){

  if (borderInfo[side] == null) {

    return 0;

  }

 else {

    return borderInfo[side].radiusStart.getLengthValue(context);

  }

}

Location: CommonBorderPaddingBackground.java

Content: 

/** 

 * @param discard indicates whether the .conditionality component should beconsidered (start of a reference-area)

 * @return the width of the start-border, taking into account the specified conditionality

 */

public int getBorderStartWidth(boolean discard){

  return getBorderWidth(START,discard);

}

Location: CommonBorderPaddingBackground.java

Content: 

/** 

 * The border-style for the given side

 * @param side one of {@link #BEFORE},  {@link #AFTER},  {@link #START},  {@link #END}

 * @return  the border-style for the given side

 */

public int getBorderStyle(int side){

  if (borderInfo[side] != null) {

    return borderInfo[side].mStyle;

  }

 else {

    return Constants.EN_NONE;

  }

}

Location: CommonBorderPaddingBackground.java

Content: 

/** 

 * @param side the side of the border

 * @param discard indicates whether the .conditionality component should be considered (end of areference-area)

 * @return the width of the start-border, taking into account the specified conditionality

 */

public int getBorderWidth(int side,boolean discard){

  if ((borderInfo[side] == null) || (borderInfo[side].mStyle == Constants.EN_NONE) || (borderInfo[side].mStyle == Constants.EN_HIDDEN)|| (discard && borderInfo[side].mWidth.isDiscard())) {

    return 0;

  }

 else {

    return borderInfo[side].mWidth.getLengthValue();

  }

}

Location: CommonBorderPaddingBackground.java

Content: 

/** 

 * Return all the border and padding height in the block progression dimension.

 * @param discard the discard flag.

 * @param context for percentage evaluation

 * @return all the padding and border height.

 */

public int getBPPaddingAndBorder(boolean discard,PercentBaseContext context){

  return getPaddingBefore(discard,context) + getPaddingAfter(discard,context) + getBorderBeforeWidth(discard)+ getBorderAfterWidth(discard);

}

Location: CommonBorderPaddingBackground.java

Content: 

/** 

 * Returns a default BorderInfo of style none.

 * @return a BorderInfo instance with style set to {@link Constants#EN_NONE}

 */

public static BorderInfo getDefaultBorderInfo(){

  return DEFAULT_BORDER_INFO;

}

Location: CommonBorderPaddingBackground.java

Content: 

/** 

 * Return all the border and padding width in the inline progression dimension.

 * @param discard the discard flag.

 * @param context for percentage evaluation.

 * @return all the padding and border width.

 */

public int getIPPaddingAndBorder(boolean discard,PercentBaseContext context){

  return getPaddingStart(discard,context) + getPaddingEnd(discard,context) + getBorderStartWidth(discard)+ getBorderEndWidth(discard);

}

Location: CommonBorderPaddingBackground.java

Content: 

/** 

 * Returns the padding

 * @return the padding

 */

public CondLengthProperty[] getPadding(){

  return padding;

}

Location: CommonBorderPaddingBackground.java

Content: 

/** 

 * @param discard indicates whether the .conditionality component should beconsidered (start of a reference-area)

 * @param context the context to evaluate percentage values

 * @return the width of the after-padding, taking into account the specified conditionality

 */

public int getPaddingAfter(boolean discard,PercentBaseContext context){

  return getPadding(AFTER,discard,context);

}

Location: CommonBorderPaddingBackground.java

Content: 

/** 

 * @param discard indicates whether the .conditionality component should beconsidered (start of a reference-area)

 * @param context the context to evaluate percentage values

 * @return the width of the before-padding, taking into account the specified conditionality

 */

public int getPaddingBefore(boolean discard,PercentBaseContext context){

  return getPadding(BEFORE,discard,context);

}

Location: CommonBorderPaddingBackground.java

Content: 

/** 

 * @param discard indicates whether the .conditionality component should beconsidered (start of a reference-area)

 * @param context the context to evaluate percentage values

 * @return the width of the end-padding, taking into account the specified conditionality

 */

public int getPaddingEnd(boolean discard,PercentBaseContext context){

  return getPadding(END,discard,context);

}

Location: CommonBorderPaddingBackground.java

Content: 

/** 

 * Returns the CondLengthProperty for the padding on one side.

 * @param side the side

 * @return the requested CondLengthProperty

 */

public CondLengthProperty getPaddingLengthProperty(int side){

  return padding[side];

}

Location: CommonBorderPaddingBackground.java

Content: 

/** 

 * @param discard indicates whether the .conditionality component should beconsidered (start of a reference-area)

 * @param context the context to evaluate percentage values

 * @return the width of the start-padding, taking into account the specified conditionality

 */

public int getPaddingStart(boolean discard,PercentBaseContext context){

  return getPadding(START,discard,context);

}

Location: CommonBorderPaddingBackground.java

Content: 

/** 

 * Return the padding for the given side, taking into account the conditionality and evaluating any percentages in the given context.

 * @param side  one of {@link #BEFORE},  {@link #AFTER},  {@link #START},  {@link #END}

 * @param discard   true if the conditionality component should be considered

 * @param context   the context for percentage-resolution

 * @return  the computed padding for the given side

 */

public int getPadding(int side,boolean discard,PercentBaseContext context){

  if ((padding[side] == null) || (discard && padding[side].isDiscard())) {

    return 0;

  }

 else {

    return padding[side].getLengthValue(context);

  }

}

Location: CommonBorderPaddingBackground.java

Content: 

/** 

 * @return true if there is any kind of background to be painted

 */

public boolean hasBackground(){

  return ((backgroundColor != null || getImageInfo() != null));

}

Location: CommonBorderPaddingBackground.java

Content: 

/** 

 * @return true if border is non-zero. 

 */

public boolean hasBorder(){

  return ((getBorderBeforeWidth(false) + getBorderAfterWidth(false) + getBorderStartWidth(false)+ getBorderEndWidth(false)) > 0);

}

Location: CommonBorderPaddingBackground.java

Content: 

/** 

 * @return true if there are any borders defined. 

 */

public boolean hasBorderInfo(){

  return (borderInfo[BEFORE] != null || borderInfo[AFTER] != null || borderInfo[START] != null || borderInfo[END] != null);

}

Location: CommonBorderPaddingBackground.java

Content: 

/** 

 * @param context for percentage based evaluation.

 * @return true if padding is non-zero.

 */

public boolean hasPadding(PercentBaseContext context){

  return ((getPaddingBefore(false,context) + getPaddingAfter(false,context) + getPaddingStart(false,context)+ getPaddingEnd(false,context)) > 0);

}

Location: CommonBorderPaddingBackground.java

Content: 

private void initBorderInfo(PropertyList pList,int side,int colorProp,int styleProp,int widthProp,int paddingProp,int radiusStartProp,int radiusEndProp) throws PropertyException {

  padding[side]=pList.get(paddingProp).getCondLength();

  int style=pList.get(styleProp).getEnum();

  FOUserAgent ua=pList.getFObj().getUserAgent();

  setBorderInfo(BorderInfo.getInstance(style,pList.get(widthProp).getCondLength(),pList.get(colorProp).getColor(ua),pList.get(radiusStartProp).getCondLength(),pList.get(radiusEndProp).getCondLength()),side);

}

Location: CommonBorderPaddingBackground.java

Content: 

/** 

 * Sets a border.

 * @param info the border information

 * @param side the side to apply the info to

 */

private void setBorderInfo(BorderInfo info,int side){

  this.borderInfo[side]=info;

}

