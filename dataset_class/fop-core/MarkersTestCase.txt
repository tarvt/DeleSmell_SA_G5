Location: MarkersTestCase.java

Content: 

@Test public void testRegisterAndResolve(){

  Map<String,Marker> markers_region_1=new HashMap<String,Marker>();

  Marker marker_1A=mock(Marker.class);

  Marker marker_1B=mock(Marker.class);

  markers_region_1.put("A",marker_1A);

  markers_region_1.put("B",marker_1B);

  Map<String,Marker> markers_region_2=new HashMap<String,Marker>();

  Marker marker_2A=mock(Marker.class);

  Marker marker_2B=mock(Marker.class);

  markers_region_2.put("A",marker_2A);

  markers_region_2.put("B",marker_2B);

  Map<String,Marker> markers_region_3=new HashMap<String,Marker>();

  Marker marker_3A=mock(Marker.class);

  Marker marker_3B=mock(Marker.class);

  markers_region_3.put("A",marker_3A);

  markers_region_3.put("B",marker_3B);

  Markers markers=new Markers();

  markers.register(markers_region_1,true,false,true);

  markers.register(markers_region_1,false,false,true);

  markers.register(markers_region_2,true,true,true);

  markers.register(markers_region_2,false,true,true);

  markers.register(markers_region_3,true,true,false);

  markers.register(markers_region_3,false,true,false);

  RetrieveMarker rm=mock(RetrieveMarker.class);

  when(rm.getRetrieveClassName()).thenReturn("A");

  when(rm.getLocalName()).thenReturn("retrieve-marker");

  when(rm.getPositionLabel()).thenReturn("position-label");

  when(rm.getPosition()).thenReturn(Constants.EN_FSWP);

  assertEquals(marker_2A,markers.resolve(rm));

  when(rm.getPosition()).thenReturn(Constants.EN_LSWP);

  assertEquals(marker_3A,markers.resolve(rm));

  when(rm.getPosition()).thenReturn(Constants.EN_LEWP);

  assertEquals(marker_2A,markers.resolve(rm));

  when(rm.getPosition()).thenReturn(Constants.EN_FIC);

  assertEquals(marker_1A,markers.resolve(rm));

  RetrieveTableMarker rtm=mock(RetrieveTableMarker.class);

  when(rtm.getRetrieveClassName()).thenReturn("B");

  when(rtm.getLocalName()).thenReturn("retrieve-table-marker");

  when(rtm.getPositionLabel()).thenReturn("position-label");

  when(rtm.getPosition()).thenReturn(Constants.EN_FIRST_STARTING);

  assertEquals(marker_2B,markers.resolve(rtm));

  when(rtm.getPosition()).thenReturn(Constants.EN_LAST_STARTING);

  assertEquals(marker_3B,markers.resolve(rtm));

  when(rtm.getPosition()).thenReturn(Constants.EN_LAST_ENDING);

  assertEquals(marker_2B,markers.resolve(rtm));

  when(rtm.getPosition()).thenReturn(Constants.EN_FIRST_INCLUDING_CARRYOVER);

  assertEquals(marker_1B,markers.resolve(rtm));

  when(rm.getPosition()).thenReturn(Constants.EN_ABSOLUTE);

  try {

    Marker m=markers.resolve(rm);

    fail("Expected an exception... instead got:" + m.toString());

  }

 catch (  RuntimeException re) {

  }

}

