Location: FopConfParserTestCase.java

Content: 

private FopFactory buildFactory(){

  FopConfParser confParser;

  try {

    confParser=new FopConfParser(builder.build(),baseURI);

    return confParser.getFopFactoryBuilder().build();

  }

 catch (  SAXException e) {

    throw new RuntimeException(e);

  }

catch (  IOException e) {

    throw new RuntimeException(e);

  }

}

Location: FopConfParserTestCase.java

Content: 

private void checkRelativeURIs(String conf,String expectedBase,String expectedFontBase) throws SAXException, IOException {

  File configFile=new File(conf);

  URI currentDir=new File(".").getCanonicalFile().toURI();

  FopConfParser parser=new FopConfParser(configFile,currentDir);

  FopFactoryBuilder fopFactoryBuilder=parser.getFopFactoryBuilder();

  assertEquals("base URI",currentDir.resolve(expectedBase),fopFactoryBuilder.getBaseURI());

  assertEquals("font base",currentDir.resolve(expectedFontBase),fopFactoryBuilder.getFontManager().getResourceResolver().getBaseURI());

}

Location: FopConfParserTestCase.java

Content: 

public static FopFactory getFopFactory(InputStream fopConfStream,URI baseURI){

  FopConfParser confParser;

  try {

    confParser=new FopConfParser(fopConfStream,baseURI);

    return confParser.getFopFactoryBuilder().build();

  }

 catch (  SAXException e) {

    throw new RuntimeException(e);

  }

catch (  IOException e) {

    throw new RuntimeException(e);

  }

}

Location: FopConfParserTestCase.java

Content: 

@Test public void testAccessibility(){

  builder.setAccessibility(false,true);

  assertFalse(buildFactory().isAccessibilityEnabled());

}

Location: FopConfParserTestCase.java

Content: 

@Test public void testAccessibilityKeepEmptyTags(){

  builder.setAccessibility(true,false);

  assertFalse(buildFactory().isKeepEmptyTags());

}

Location: FopConfParserTestCase.java

Content: 

@Test public void testBreakIndentInheritance(){

  builder.setBreakIndentInheritance(true);

  assertTrue(buildFactory().isBreakIndentInheritanceOnReferenceAreaBoundary());

}

Location: FopConfParserTestCase.java

Content: 

@Test public void testDefaultPageSettings(){

  float height=12.345f;

  float width=67.89f;

  builder.setDefaultPageSettings(height,width);

  FopFactory factory=buildFactory();

  assertEquals("12.345",factory.getPageHeight());

  assertEquals("67.89",factory.getPageWidth());

}

Location: FopConfParserTestCase.java

Content: 

@Test public void testPreferRenderer(){

  builder.setPreferRenderer(true);

  assertTrue(buildFactory().getRendererFactory().isRendererPreferred());

}

Location: FopConfParserTestCase.java

Content: 

@Test public void testRelativeURIBaseFont() throws Exception {

  checkRelativeURIs("test/config/relative-uri/base_font.xconf","test/config/relative-uri/relative/","test/config/relative-uri/fonts/");

}

Location: FopConfParserTestCase.java

Content: 

@Test public void testRelativeURIBaseNoFont() throws Exception {

  checkRelativeURIs("test/config/relative-uri/base_no-font.xconf","test/config/relative-uri/relative/","test/config/relative-uri/relative/");

}

Location: FopConfParserTestCase.java

Content: 

@Test public void testRelativeURINoBaseFont() throws Exception {

  checkRelativeURIs("test/config/relative-uri/no-base_font.xconf","","test/config/relative-uri/fonts/");

}

Location: FopConfParserTestCase.java

Content: 

@Test public void testRelativeURINoBaseNoFont() throws Exception {

  checkRelativeURIs("test/config/relative-uri/no-base_no-font.xconf","","");

}

Location: FopConfParserTestCase.java

Content: 

@Test public void testSourceResolution(){

  float srcRes=123.456f;

  builder.setSourceResolution(srcRes);

  assertEquals(srcRes,buildFactory().getSourceResolution(),0.0001f);

}

Location: FopConfParserTestCase.java

Content: 

@Test public void testStrictFOValidation(){

  builder.setStrictValidation(false);

  assertFalse(buildFactory().validateStrictly());

}

Location: FopConfParserTestCase.java

Content: 

@Test public void testStrictUserValidation(){

  builder.setStrictConfiguration(false);

  assertFalse(buildFactory().validateUserConfigStrictly());

}

Location: FopConfParserTestCase.java

Content: 

@Test public void testTargetResolution(){

  float targetRes=123.456f;

  builder.setTargetResolution(targetRes);

  assertEquals(targetRes,buildFactory().getTargetResolution(),0.0001f);

}

