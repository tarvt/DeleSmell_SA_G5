Location: GraphicsObject.java

Content: 

/** 

 * Adds a box at the given coordinates

 * @param coords the x/y coordinates

 */

public void addBox(int[] coords){

  addObject(new GraphicsBox(coords));

}

Location: GraphicsObject.java

Content: 

/** 

 * Adds a fillet (curve) at the given coordinates

 * @param coords the x/y coordinates

 */

public void addFillet(int[] coords){

  addFillet(coords,false);

}

Location: GraphicsObject.java

Content: 

/** 

 * Adds a fillet (curve) at the given coordinates

 * @param coords the x/y coordinates

 * @param relative relative true for a fillet (curve) at current position (relative to)

 */

public void addFillet(int[] coords,boolean relative){

  addObject(new GraphicsFillet(coords,relative));

}

Location: GraphicsObject.java

Content: 

/** 

 * Adds a full arc

 * @param x the x coordinate

 * @param y the y coordinate

 * @param mh the integer portion of the multiplier

 * @param mhr the fractional portion of the multiplier

 */

public void addFullArc(int x,int y,int mh,int mhr){

  addObject(new GraphicsFullArc(x,y,mh,mhr));

}

Location: GraphicsObject.java

Content: 

/** 

 * Adds an image

 * @param x the x coordinate

 * @param y the y coordinate

 * @param width the image width

 * @param height the image height

 * @param imgData the image data

 */

public void addImage(int x,int y,int width,int height,byte[] imgData){

  addObject(new GraphicsImage(x,y,width,height,imgData));

}

Location: GraphicsObject.java

Content: 

/** 

 * Adds a line at the given x/y coordinates

 * @param coords the x/y coordinates (can be a series)

 */

public void addLine(int[] coords){

  addLine(coords,false);

}

Location: GraphicsObject.java

Content: 

/** 

 * Adds a line at the given x/y coordinates

 * @param coords the x/y coordinates (can be a series)

 * @param relative relative true for a line at current position (relative to)

 */

public void addLine(int[] coords,boolean relative){

  addObject(new GraphicsLine(coords,relative));

}

Location: GraphicsObject.java

Content: 

/** 

 * @param object the structured data 

 */

public void addObject(StructuredData object){

  if (currentData == null) {

    hongshuai();

    if (currentData != null) {

      currentData.setComplete(true);

    }

    this.currentData=factory.createGraphicsData();

    objects.add(currentData);

  }

 else   if (currentData.getDataLength() + object.getDataLength() >= GraphicsData.MAX_DATA_LEN) {

    GraphicsChainedSegment currentSegment=(GraphicsChainedSegment)currentData.removeCurrentSegment();

    currentSegment.setName(newData().createSegmentName());

    currentData.addSegment(currentSegment);

  }

  currentData.addObject(object);

}

Location: GraphicsObject.java

Content: 

/** 

 * Adds a string

 * @param str the string

 * @param x the x coordinate

 * @param y the y coordinate

 * @param charSet the character set associated with the string

 */

public void addString(String str,int x,int y,CharacterSet charSet){

  addObject(new GraphicsCharacterString(str,x,y,charSet));

}

Location: GraphicsObject.java

Content: 

/** 

 * Begins a graphics area (start of fill)

 */

public void beginArea(){

  addObject(new GraphicsAreaBegin());

}

Location: GraphicsObject.java

Content: 

/** 

 * Ends a graphics area (end of fill)

 */

public void endArea(){

  addObject(new GraphicsAreaEnd());

}

Location: GraphicsObject.java

Content: 

/** 

 * Ends the prolog.

 */

public void endProlog(){

  addObject(new GraphicsEndProlog());

}

Location: GraphicsObject.java

Content: 

/** 

 * Default constructor

 * @param factory the object factory

 * @param name the name of graphics object

 */

public GraphicsObject(Factory factory,String name){

  super(factory,name);

}

Location: GraphicsObject.java

Content: 

/** 

 * Creates a new graphics segment

 */

public void newSegment(){

  getData().newSegment();

  graphicsState.lineWidth=0;

  graphicsState.color=Color.BLACK;

}

Location: GraphicsObject.java

Content: 

/** 

 * Sets the arc parameters

 * @param xmaj the maximum value of the x coordinate

 * @param ymin the minimum value of the y coordinate

 * @param xmin the minimum value of the x coordinate

 * @param ymaj the maximum value of the y coordinate

 */

public void setArcParams(int xmaj,int ymin,int xmin,int ymaj){

  addObject(new GraphicsSetArcParameters(xmaj,ymin,xmin,ymaj));

}

Location: GraphicsObject.java

Content: 

/** 

 * Sets the character set to use

 * @param characterSet the character set (font) reference

 */

public void setCharacterSet(int characterSet){

  if (characterSet != graphicsState.characterSet) {

    graphicsState.characterSet=characterSet;

  }

  addObject(new GraphicsSetCharacterSet(characterSet));

}

Location: GraphicsObject.java

Content: 

/** 

 * Sets the color converter

 * @param colorConverter ColorConverter to filter the colorwhen creating a GraphicsSetProcessColor.

 */

public void setColorConverter(ColorConverter colorConverter){

  this.colorConverter=colorConverter;

}

Location: GraphicsObject.java

Content: 

/** 

 * {@inheritDoc} 

 */

@Override public void setComplete(boolean complete){

  for (  GraphicsData completedObject : objects) {

    completedObject.setComplete(true);

  }

  super.setComplete(complete);

}

Location: GraphicsObject.java

Content: 

/** 

 * Sets the current position

 * @param coords the x and y coordinates of the current position

 */

public void setCurrentPosition(int[] coords){

  addObject(new GraphicsSetCurrentPosition(coords));

}

Location: GraphicsObject.java

Content: 

/** 

 * Sets whether the following shape is to be filled.

 * @param fill true if the following shape is to be filled

 */

public void setFill(boolean fill){

  setPatternSymbol(fill ? GraphicsSetPatternSymbol.SOLID_FILL : GraphicsSetPatternSymbol.NO_FILL);

}

Location: GraphicsObject.java

Content: 

/** 

 * Sets the line type

 * @param lineType the line type

 */

public void setLineType(byte lineType){

  if (lineType != graphicsState.lineType) {

    addObject(new GraphicsSetLineType(lineType));

    graphicsState.lineType=lineType;

  }

}

Location: GraphicsObject.java

Content: 

/** 

 * Sets the line width

 * @param lineWidth the line width multiplier

 */

public void setLineWidth(int lineWidth){

  if ((float)lineWidth != graphicsState.lineWidth) {

    addObject(new GraphicsSetLineWidth(lineWidth));

    graphicsState.lineWidth=(float)lineWidth;

  }

}

Location: GraphicsObject.java

Content: 

/** 

 * Sets the fill pattern of the next shape.

 * @param patternSymbol the fill pattern of the next shape

 */

public void setPatternSymbol(byte patternSymbol){

  if (patternSymbol != graphicsState.patternSymbol) {

    addObject(new GraphicsSetPatternSymbol(patternSymbol));

    graphicsState.patternSymbol=patternSymbol;

  }

}

Location: GraphicsObject.java

Content: 

/** 

 * {@inheritDoc} 

 */

@Override public void setViewport(AFPDataObjectInfo dataObjectInfo){

  super.setViewport(dataObjectInfo);

  AFPObjectAreaInfo objectAreaInfo=dataObjectInfo.getObjectAreaInfo();

  int width=objectAreaInfo.getWidth();

  int height=objectAreaInfo.getHeight();

  int widthRes=objectAreaInfo.getWidthRes();

  int heightRes=objectAreaInfo.getHeightRes();

  final int leftEdge=0;

  final int topEdge=0;

  GraphicsDataDescriptor graphicsDataDescriptor=factory.createGraphicsDataDescriptor(leftEdge,width,topEdge,height,widthRes,heightRes);

  getObjectEnvironmentGroup().setDataDescriptor(graphicsDataDescriptor);

}

Location: GraphicsObject.java

Content: 

/** 

 * {@inheritDoc} 

 */

@Override protected void writeContent(OutputStream os) throws IOException {

  super.writeContent(os);

  writeObjects(objects,os);

}

Location: GraphicsObject.java

Content: 

/** 

 * {@inheritDoc} 

 */

@Override protected void writeEnd(OutputStream os) throws IOException {

  byte[] data=new byte[17];

  copySF(data,Type.END,Category.GRAPHICS);

  os.write(data);

}

Location: GraphicsObject.java

Content: 

/** 

 * {@inheritDoc} 

 */

@Override protected void writeStart(OutputStream os) throws IOException {

  super.writeStart(os);

  byte[] data=new byte[17];

  copySF(data,Type.BEGIN,Category.GRAPHICS);

  os.write(data);

}

