Location: PropertyParser.java

Content: 

/** 

 * Evaluate an addition operation. If either of the arguments is null, this means that it wasn't convertible to a Numeric value.

 * @param op1 A Numeric object (Number or Length-type object)

 * @param op2 A Numeric object (Number or Length-type object)

 * @return A new NumericProperty object holding an object which representsthe sum of the two operands.

 * @throws PropertyException If either operand is null.

 */

private Property evalAddition(Numeric op1,Numeric op2) throws PropertyException {

  if (op1 == null || op2 == null) {

    throw new PropertyException("Non numeric operand in addition");

  }

  return (Property)NumericOp.addition(op1,op2);

}

Location: PropertyParser.java

Content: 

/** 

 * Evaluate a division operation. If either of the arguments is null, this means that it wasn't convertible to a Numeric value.

 * @param op1 A Numeric object (Number or Length-type object)

 * @param op2 A Numeric object (Number or Length-type object)

 * @return A new NumericProperty object holding an object which representsop1 divided by op2.

 * @throws PropertyException If either operand is null.

 */

private Property evalDivide(Numeric op1,Numeric op2) throws PropertyException {

  if (op1 == null || op2 == null) {

    throw new PropertyException("Non numeric operand in division");

  }

  return (Property)NumericOp.divide(op1,op2);

}

Location: PropertyParser.java

Content: 

/** 

 * Evaluate a modulo operation. If either of the arguments is null, this means that it wasn't convertible to a Number value.

 * @param op1 A Number object

 * @param op2 A Number object

 * @return A new NumberProperty object holding an object which representsop1 mod op2.

 * @throws PropertyException If either operand is null.

 */

private Property evalModulo(Number op1,Number op2) throws PropertyException {

  if (op1 == null || op2 == null) {

    throw new PropertyException("Non number operand to modulo");

  }

  return NumberProperty.getInstance(op1.doubleValue() % op2.doubleValue());

}

Location: PropertyParser.java

Content: 

/** 

 * Evaluate a multiplication operation. If either of the arguments is null, this means that it wasn't convertible to a Numeric value.

 * @param op1 A Numeric object (Number or Length-type object)

 * @param op2 A Numeric object (Number or Length-type object)

 * @return A new NumericProperty object holding an object which representsthe product of the two operands.

 * @throws PropertyException If either operand is null.

 */

private Property evalMultiply(Numeric op1,Numeric op2) throws PropertyException {

  if (op1 == null || op2 == null) {

    throw new PropertyException("Non numeric operand in multiplication");

  }

  return (Property)NumericOp.multiply(op1,op2);

}

Location: PropertyParser.java

Content: 

/** 

 * Evaluate a unary minus operation. If the argument is null, this means that it wasn't convertible to a Numeric value.

 * @param op A Numeric object (Number or Length-type object)

 * @return A new NumericProperty object holding an object which representsthe negative of the operand (multiplication by *1).

 * @throws PropertyException If the operand is null.

 */

private Property evalNegate(Numeric op) throws PropertyException {

  if (op == null) {

    throw new PropertyException("Non numeric operand to unary minus");

  }

  return (Property)NumericOp.negate(op);

}

Location: PropertyParser.java

Content: 

/** 

 * Evaluate a subtraction operation. If either of the arguments is null, this means that it wasn't convertible to a Numeric value.

 * @param op1 A Numeric object (Number or Length-type object)

 * @param op2 A Numeric object (Number or Length-type object)

 * @return A new NumericProperty object holding an object which representsthe difference of the two operands.

 * @throws PropertyException If either operand is null.

 */

private Property evalSubtraction(Numeric op1,Numeric op2) throws PropertyException {

  if (op1 == null || op2 == null) {

    throw new PropertyException("Non numeric operand in subtraction");

  }

  return (Property)NumericOp.subtraction(op1,op2);

}

Location: PropertyParser.java

Content: 

/** 

 * Checks that the current token is a right parenthesis and throws an exception if this isn't the case.

 */

private void expectRpar() throws PropertyException {

  if (currentToken != TOK_RPAR) {

    throw new PropertyException("expected )");

  }

  next();

}

Location: PropertyParser.java

Content: 

/** 

 * Try to parse an addition or subtraction expression and return the resulting Property.

 */

private Property parseAdditiveExpr() throws PropertyException {

  Property prop=parseMultiplicativeExpr();

  loop:   while (true) {

switch (currentToken) {

case TOK_PLUS:

      next();

    prop=evalAddition(prop.getNumeric(),parseMultiplicativeExpr().getNumeric());

  break;

case TOK_MINUS:

next();

prop=evalSubtraction(prop.getNumeric(),parseMultiplicativeExpr().getNumeric());

break;

default :

break loop;

}

}

return prop;

}

Location: PropertyParser.java

Content: 

/** 

 * Parse a comma separated list of function arguments. Each argument may itself be an expression. This method consumes the closing right parenthesis of the argument list.

 * @param function The function object for which the arguments are collected.

 * @return An array of Property objects representing the arguments found.

 * @throws PropertyException If the number of arguments found isn't equalto the number expected or if another argument parsing error occurs.

 */

Property[] parseArgs(Function function) throws PropertyException {

  int numReq=function.getRequiredArgsCount();

  int numOpt=function.getOptionalArgsCount();

  boolean hasVar=function.hasVariableArgs();

  List<Property> args=new java.util.ArrayList<Property>(numReq + numOpt);

  if (currentToken == TOK_RPAR) {

    next();

  }

 else {

    while (true) {

      Property p=parseAdditiveExpr();

      int i=args.size();

      if ((i < numReq) || ((i - numReq) < numOpt) || hasVar) {

        args.add(p);

      }

 else {

        throw new PropertyException("Unexpected function argument at index " + i);

      }

      if (currentToken != TOK_COMMA) {

        break;

      }

      next();

    }

    expectRpar();

  }

  int numArgs=args.size();

  if (numArgs < numReq) {

    throw new PropertyException("Expected " + numReq + " required arguments, but only "+ numArgs+ " specified");

  }

 else {

    for (int i=0; i < numOpt; i++) {

      if (args.size() < (numReq + i + 1)) {

        args.add(function.getOptionalArgDefault(i,propInfo));

      }

    }

  }

  return args.toArray(new Property[args.size()]);

}

Location: PropertyParser.java

Content: 

/** 

 * Try to parse a multiply, divide or modulo expression and return the resulting Property.

 */

private Property parseMultiplicativeExpr() throws PropertyException {

  Property prop=parseUnaryExpr();

  loop:   while (true) {

switch (currentToken) {

case TOK_DIV:

      next();

    prop=evalDivide(prop.getNumeric(),parseUnaryExpr().getNumeric());

  break;

case TOK_MOD:

next();

prop=evalModulo(prop.getNumber(),parseUnaryExpr().getNumber());

break;

case TOK_MULTIPLY:

next();

prop=evalMultiply(prop.getNumeric(),parseUnaryExpr().getNumeric());

break;

default :

break loop;

}

}

return prop;

}

Location: PropertyParser.java

Content: 

/** 

 * Try to parse a primary expression and return the resulting Property. A primary expression is either a parenthesized expression or an expression representing a primitive Property datatype, such as a string literal, an NCname, a number or a unit expression, or a function call expression.

 */

private Property parsePrimaryExpr() throws PropertyException {

  Property prop;

  if (currentToken == TOK_COMMA) {

    next();

  }

switch (currentToken) {

case TOK_LPAR:

    next();

  prop=parseAdditiveExpr();

expectRpar();

return prop;

case TOK_LITERAL:

prop=StringProperty.getInstance(currentTokenValue);

break;

case TOK_NCNAME:

prop=new NCnameProperty(currentTokenValue);

break;

case TOK_FLOAT:

prop=NumberProperty.getInstance(Double.valueOf(currentTokenValue));

break;

case TOK_INTEGER:

prop=NumberProperty.getInstance(Integer.valueOf(currentTokenValue));

break;

case TOK_PERCENT:

double pcval=Double.parseDouble(currentTokenValue.substring(0,currentTokenValue.length() - 1)) / 100.0;

PercentBase pcBase=this.propInfo.getPercentBase();

if (pcBase != null) {

if (pcBase.getDimension() == 0) {

prop=NumberProperty.getInstance(pcval * pcBase.getBaseValue());

}

 else if (pcBase.getDimension() == 1) {

if (pcBase instanceof LengthBase) {

if (pcval == 0.0) {

prop=FixedLength.ZERO_FIXED_LENGTH;

break;

}

Length base=((LengthBase)pcBase).getBaseLength();

if (base != null && base.isAbsolute()) {

prop=FixedLength.getInstance(pcval * base.getValue());

break;

}

}

prop=new PercentLength(pcval,pcBase);

}

 else {

throw new PropertyException("Illegal percent dimension value");

}

}

 else {

prop=NumberProperty.getInstance(pcval);

}

break;

case TOK_NUMERIC:

int numLen=currentTokenValue.length() - currentUnitLength;

String unitPart=currentTokenValue.substring(numLen);

double numPart=Double.parseDouble(currentTokenValue.substring(0,numLen));

if (RELUNIT.equals(unitPart)) {

prop=(Property)NumericOp.multiply(NumberProperty.getInstance(numPart),propInfo.currentFontSize());

}

 else {

if ("px".equals(unitPart)) {

float resolution=propInfo.getPropertyList().getFObj().getUserAgent().getSourceResolution();

prop=FixedLength.getInstance(numPart,unitPart,UnitConv.IN2PT / resolution);

}

 else {

prop=FixedLength.getInstance(numPart,unitPart);

}

}

break;

case TOK_COLORSPEC:

prop=ColorProperty.getInstance(propInfo.getUserAgent(),currentTokenValue);

break;

case TOK_FUNCTION_LPAR:

Function function=(Function)FUNCTION_TABLE.get(currentTokenValue);

if (function == null) {

throw new PropertyException("no such function: " + currentTokenValue);

}

next();

propInfo.pushFunction(function);

prop=function.eval(parseArgs(function),propInfo);

propInfo.popFunction();

return prop;

default :

throw new PropertyException("syntax error");

}

next();

return prop;

}

Location: PropertyParser.java

Content: 

/** 

 * Parse the property expression described in the instance variables. Note: If the property expression String is empty, a StringProperty object holding an empty String is returned.

 * @return A Property object holding the parsed result.

 * @throws PropertyException If the "expr" cannot be parsed as a Property.

 */

private Property parseProperty() throws PropertyException {

  next();

  if (currentToken == TOK_EOF) {

    return StringProperty.getInstance("");

  }

  ListProperty propList=null;

  while (true) {

    Property prop=parseAdditiveExpr();

    if (currentToken == TOK_EOF) {

      if (propList != null) {

        propList.addProperty(prop);

        return propList;

      }

 else {

        return prop;

      }

    }

 else {

      if (propList == null) {

        propList=new ListProperty(prop);

      }

 else {

        propList.addProperty(prop);

      }

    }

  }

}

Location: PropertyParser.java

Content: 

/** 

 * Try to parse a unary minus expression and return the resulting Property.

 */

private Property parseUnaryExpr() throws PropertyException {

  if (currentToken == TOK_MINUS) {

    next();

    return evalNegate(parseUnaryExpr().getNumeric());

  }

  return parsePrimaryExpr();

}

Location: PropertyParser.java

Content: 

/** 

 * Public entrypoint to the Property expression parser.

 * @param expr The specified value (attribute on the xml element).

 * @param propInfo A PropertyInfo object representing the context inwhich the property expression is to be evaluated.

 * @return A Property object holding the parsed result.

 * @throws PropertyException If the "expr" cannot be parsed as a Property.

 */

public static Property parse(String expr,PropertyInfo propInfo) throws PropertyException {

  try {

    return new PropertyParser(expr,propInfo).parseProperty();

  }

 catch (  PropertyException exc) {

    exc.setPropertyInfo(propInfo);

    throw exc;

  }

}

Location: PropertyParser.java

Content: 

/** 

 * Private constructor. Called by the static parse() method.

 * @param propExpr The specified value (attribute on the xml element).

 * @param pInfo A PropertyInfo object representing the context inwhich the property expression is to be evaluated.

 */

private PropertyParser(String propExpr,PropertyInfo pInfo){

  super(propExpr);

  this.propInfo=pInfo;

}

