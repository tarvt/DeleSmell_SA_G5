Location: BreakElement.java

Content: 

/** 

 * Constructor for hard breaks.

 * @param position the Position instance needed by the addAreas stage of the LMs.

 * @param penaltyWidth the penalty width

 * @param penaltyValue the penalty value for the penalty element to be constructed

 * @param breakClass the break class of this penalty (one of{@link org.apache.fop.fo.Constants#EN_AUTO}, {@link org.apache.fop.fo.Constants#EN_COLUMN}, {@link org.apache.fop.fo.Constants#EN_PAGE}, {@link org.apache.fop.fo.Constants#EN_EVEN_PAGE}, {@link org.apache.fop.fo.Constants#EN_ODD_PAGE})

 * @param context the layout context which contains the pending conditional elements

 */

public BreakElement(Position position,int penaltyWidth,int penaltyValue,int breakClass,LayoutContext context){

  super(position);

  this.penaltyWidth=penaltyWidth;

  this.penaltyValue=penaltyValue;

  setBreakClass(breakClass);

  this.pendingBeforeMarks=context.getPendingBeforeMarks();

  this.pendingAfterMarks=context.getPendingAfterMarks();

}

Location: BreakElement.java

Content: 

/** 

 * Create a new BreakElement for the given  {@code position},  {@code penaltyValue}and  {@code breakClass}. (Used principally to generate break-possibilities in ranges of content that must be kept together within the context corresponding to the  {@code breakClass}; expected to be one of {@link org.apache.fop.fo.Constants#EN_AUTO}, {@link org.apache.fop.fo.Constants#EN_LINE}, {@link org.apache.fop.fo.Constants#EN_COLUMN} or{@link org.apache.fop.fo.Constants#EN_PAGE})

 * @param position  the corresponding {@link Position}

 * @param penaltyValue  the penalty value

 * @param breakClass    the break class

 * @param context       the {@link LayoutContext}

 */

public BreakElement(Position position,int penaltyValue,int breakClass,LayoutContext context){

  this(position,0,penaltyValue,breakClass,context);

}

Location: BreakElement.java

Content: 

/** 

 * Main constructor

 * @param position the Position instance needed by the addAreas stage of the LMs.

 * @param penaltyValue the penalty value for the penalty element to be constructed

 * @param context the layout context which contains the pending conditional elements

 */

public BreakElement(Position position,int penaltyValue,LayoutContext context){

  this(position,penaltyValue,Constants.EN_AUTO,context);

}

Location: BreakElement.java

Content: 

/** 

 * Clears all pending marks associated with this break element. This is used in break cases where we only know very late if the break is actually after all the content of an FO has been generated.

 */

public void clearPendingMarks(){

  this.pendingBeforeMarks=null;

  this.pendingAfterMarks=null;

}

Location: BreakElement.java

Content: 

/** 

 * @return the penalty width 

 */

public int getPenaltyWidth(){

  return this.penaltyWidth;

}

Location: BreakElement.java

Content: 

/** 

 * @return the pending border and padding elements at the after edge 

 */

public List getPendingAfterMarks(){

  return this.pendingAfterMarks;

}

Location: BreakElement.java

Content: 

/** 

 * @return the pending border and padding elements at the before edge 

 */

public List getPendingBeforeMarks(){

  return this.pendingBeforeMarks;

}

Location: BreakElement.java

Content: 

/** 

 * Sets the break class.

 * @param breakClass one of{@link org.apache.fop.fo.Constants#EN_AUTO}, {@link org.apache.fop.fo.Constants#EN_LINE}, {@link org.apache.fop.fo.Constants#EN_COLUMN}, {@link org.apache.fop.fo.Constants#EN_PAGE}, {@link org.apache.fop.fo.Constants#EN_EVEN_PAGE}, {@link org.apache.fop.fo.Constants#EN_ODD_PAGE}.

 */

public void setBreakClass(int breakClass){

switch (breakClass) {

case Constants.EN_AUTO:

case Constants.EN_LINE:

case Constants.EN_COLUMN:

case Constants.EN_PAGE:

case Constants.EN_EVEN_PAGE:

case Constants.EN_ODD_PAGE:

    this.breakClass=breakClass;

  break;

default :

throw new IllegalArgumentException("Illegal value for break class: " + breakClass);

}

}

Location: BreakElement.java

Content: 

/** 

 * Sets the penalty value.

 * @param p the new penalty value

 */

public void setPenaltyValue(int p){

  this.penaltyValue=p;

}

