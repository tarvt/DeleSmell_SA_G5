Location: PDFFontDescriptor.java

Content: 

/** 

 * @return the CIDSet stream or null if not applicable 

 */

public AbstractPDFStream getCIDSet(){

  return (AbstractPDFStream)get("CIDSet");

}

Location: PDFFontDescriptor.java

Content: 

/** 

 * Create the /FontDescriptor object

 * @param ascent the maximum height above the baseline

 * @param descent the maximum depth below the baseline

 * @param capHeight height of the capital letters

 * @param flags various characteristics of the font

 * @param fontBBox the bounding box for the described font

 * @param basefont the base font name

 * @param italicAngle the angle of the vertical dominant strokes

 * @param stemV the width of the dominant vertical stems of glyphs

 */

public PDFFontDescriptor(String basefont,int ascent,int descent,int capHeight,int flags,PDFRectangle fontBBox,int italicAngle,int stemV){

  super();

  put("Type",new PDFName("FontDescriptor"));

  put("FontName",new PDFName(basefont));

  put("FontBBox",fontBBox);

  put("Flags",flags);

  put("CapHeight",capHeight);

  put("Ascent",ascent);

  put("Descent",descent);

  put("ItalicAngle",italicAngle);

  put("StemV",stemV);

}

Location: PDFFontDescriptor.java

Content: 

/** 

 * Sets the CIDSet stream for this font descriptor. (Optional)

 * @param cidSet the CIDSet stream

 */

public void setCIDSet(AbstractPDFStream cidSet){

  put("CIDSet",cidSet);

}

Location: PDFFontDescriptor.java

Content: 

/** 

 * Set the optional font file stream

 * @param subtype the font type defined in the font stream

 * @param fontfile the stream containing an embedded font

 */

public void setFontFile(FontType subtype,AbstractPDFStream fontfile){

  if (subtype == FontType.TYPE1) {

    put("FontFile",fontfile);

  }

 else   if (fontfile instanceof PDFCFFStreamType0C || subtype == FontType.TYPE1C) {

    put("FontFile3",fontfile);

  }

 else {

    put("FontFile2",fontfile);

  }

}

Location: PDFFontDescriptor.java

Content: 

/** 

 * Set the optional metrics.

 * @param avgWidth The average width of characters in this font.The default value is 0.

 * @param maxWidth The maximum width of characters in this font.The default value is 0.

 * @param missingWidth missing width

 * @param leading the desired spacing between lines of text.The default value is 0.

 * @param stemH The vertical width of the dominant horizontal stems ofglyphs in the font. The default value is 0.

 * @param xHeight The y-coordinate of the top of flat non-ascendinglowercase letters, measured from the baseline. The default value is 0.

 */

public void setMetrics(int avgWidth,int maxWidth,int missingWidth,int leading,int stemH,int xHeight){

  if (avgWidth != 0) {

    put("AvgWidth",avgWidth);

  }

  if (maxWidth != 0) {

    put("MaxWidth",maxWidth);

  }

  if (missingWidth != 0) {

    put("MissingWidth",missingWidth);

  }

  if (leading != 0) {

    put("Leading",leading);

  }

  if (stemH != 0) {

    put("StemH",stemH);

  }

  if (xHeight != 0) {

    put("XHeight",xHeight);

  }

}

