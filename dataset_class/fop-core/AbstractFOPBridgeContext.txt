Location: AbstractFOPBridgeContext.java

Content: 

/** 

 * Constructs a new bridge context.

 * @param userAgent the user agent

 * @param loader the Document Loader to use for referenced documents.

 * @param fontInfo the font list for the text painter, may be nullin which case text is painted as shapes

 * @param imageManager an image manager

 * @param imageSessionContext an image session context

 * @param linkTransform AffineTransform to properly place links,may be null

 */

public AbstractFOPBridgeContext(UserAgent userAgent,DocumentLoader loader,FontInfo fontInfo,ImageManager imageManager,ImageSessionContext imageSessionContext,AffineTransform linkTransform){

  super(userAgent,loader);

  this.fontInfo=fontInfo;

  this.imageManager=imageManager;

  this.imageSessionContext=imageSessionContext;

  this.linkTransform=linkTransform;

}

Location: AbstractFOPBridgeContext.java

Content: 

/** 

 * Constructs a new bridge context.

 * @param userAgent the user agent

 * @param fontInfo the font list for the text painter, may be nullin which case text is painted as shapes

 * @param imageManager an image manager

 * @param imageSessionContext an image session context

 */

public AbstractFOPBridgeContext(UserAgent userAgent,FontInfo fontInfo,ImageManager imageManager,ImageSessionContext imageSessionContext){

  this(userAgent,fontInfo,imageManager,imageSessionContext,null);

}

Location: AbstractFOPBridgeContext.java

Content: 

/** 

 * Constructs a new bridge context.

 * @param userAgent the user agent

 * @param fontInfo the font list for the text painter, may be nullin which case text is painted as shapes

 * @param imageManager an image manager

 * @param imageSessionContext an image session context

 * @param linkTransform AffineTransform to properly place links,may be null

 */

public AbstractFOPBridgeContext(UserAgent userAgent,FontInfo fontInfo,ImageManager imageManager,ImageSessionContext imageSessionContext,AffineTransform linkTransform){

  super(userAgent);

  this.fontInfo=fontInfo;

  this.imageManager=imageManager;

  this.imageSessionContext=imageSessionContext;

  this.linkTransform=linkTransform;

}

Location: AbstractFOPBridgeContext.java

Content: 

/** 

 * Returns the ImageSessionContext to be used by the ImageElementBridge.

 * @return the image session context

 */

public ImageSessionContext getImageSessionContext(){

  return this.imageSessionContext;

}

Location: AbstractFOPBridgeContext.java

Content: 

/** 

 * @param className name of bridge class to load and construct

 * @param testFor class name to test for presence

 */

protected void putElementBridgeConditional(String className,String testFor){

  try {

    Class.forName(testFor);

    Class clazz=Class.forName(className);

    Constructor constructor=clazz.getConstructor(new Class[]{FontInfo.class});

    putBridge((Bridge)constructor.newInstance(new Object[]{fontInfo}));

  }

 catch (  Throwable t) {

  }

}

