Location: DefaultScriptProcessor.java

Content: 

DefaultScriptProcessor(String script){

  super(script);

}

Location: DefaultScriptProcessor.java

Content: 

@Override public ScriptContextTester getPositioningContextTester(){

  return null;

}

Location: DefaultScriptProcessor.java

Content: 

@Override public String[] getPositioningFeatures(){

  return GPOS_FEATURES;

}

Location: DefaultScriptProcessor.java

Content: 

@Override public ScriptContextTester getSubstitutionContextTester(){

  return null;

}

Location: DefaultScriptProcessor.java

Content: 

@Override public String[] getSubstitutionFeatures(){

  return GSUB_FEATURES;

}

Location: DefaultScriptProcessor.java

Content: 

protected boolean isReorderedMark(GlyphDefinitionTable gdef,int[] glyphs,int[] unscaledWidths,int index){

  return gdef.isGlyphClass(glyphs[index],GlyphDefinitionTable.GLYPH_CLASS_MARK) && (unscaledWidths[index] != 0);

}

Location: DefaultScriptProcessor.java

Content: 

@Override public GlyphSequence reorderCombiningMarks(GlyphDefinitionTable gdef,GlyphSequence gs,int[] unscaledWidths,int[][] gpa,String script,String language){

  int ng=gs.getGlyphCount();

  int[] ga=gs.getGlyphArray(false);

  int nm=0;

  for (int i=0; i < ng; i++) {

    int gid=ga[i];

    int gw=unscaledWidths[i];

    if (isReorderedMark(gdef,ga,unscaledWidths,i)) {

      nm++;

    }

  }

  if ((nm > 0) && ((ng - nm) > 0)) {

    CharAssociation[] aa=gs.getAssociations(0,-1);

    int[] nga=new int[ng];

    int[][] npa=(gpa != null) ? new int[ng][] : null;

    CharAssociation[] naa=new CharAssociation[ng];

    int k=0;

    CharAssociation ba=null;

    int bg=-1;

    int[] bpa=null;

    for (int i=0; i < ng; i++) {

      int gid=ga[i];

      int[] pa=(gpa != null) ? gpa[i] : null;

      CharAssociation ca=aa[i];

      if (isReorderedMark(gdef,ga,unscaledWidths,i)) {

        nga[k]=gid;

        naa[k]=ca;

        if (npa != null) {

          npa[k]=pa;

        }

        k++;

      }

 else {

        if (bg != -1) {

          nga[k]=bg;

          naa[k]=ba;

          if (npa != null) {

            npa[k]=bpa;

          }

          k++;

          bg=-1;

          ba=null;

          bpa=null;

        }

        if (bg == -1) {

          bg=gid;

          ba=ca;

          bpa=pa;

        }

      }

    }

    if (bg != -1) {

      nga[k]=bg;

      naa[k]=ba;

      if (npa != null) {

        npa[k]=bpa;

      }

      k++;

    }

    assert k == ng;

    if (npa != null) {

      System.arraycopy(npa,0,gpa,0,ng);

    }

    return new GlyphSequence(gs,null,nga,null,null,naa,null);

  }

 else {

    return gs;

  }

}

