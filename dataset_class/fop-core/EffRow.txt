Location: EffRow.java

Content: 

/** 

 * Creates a new effective row instance.

 * @param index index of the row

 * @param bodyType type of body (one of HEADER, FOOTER, BODY as found on TableRowIterator)

 * @param gridUnits the grid units this row is made of

 */

public EffRow(int index,int bodyType,List gridUnits){

  this.index=index;

  this.bodyType=bodyType;

  this.gridUnits=gridUnits;

  for (  Object gu : gridUnits) {

    if (gu instanceof PrimaryGridUnit) {

      ((PrimaryGridUnit)gu).setRowIndex(index);

    }

  }

}

Location: EffRow.java

Content: 

/** 

 * @return an indicator what type of body this EffRow is in (one of HEADER, FOOTER, BODYas found on TableRowIterator)

 */

public int getBodyType(){

  return this.bodyType;

}

Location: EffRow.java

Content: 

/** 

 * @return the explicit height of the EffRow (as specified through properties) 

 */

public MinOptMax getExplicitHeight(){

  return this.explicitHeight;

}

Location: EffRow.java

Content: 

/** 

 * @return the list of GridUnits for this EffRow 

 */

public List getGridUnits(){

  return gridUnits;

}

Location: EffRow.java

Content: 

/** 

 * Returns the grid unit at a given position.

 * @param column index of the grid unit in the row (zero based)

 * @return the requested grid unit.

 */

public GridUnit getGridUnit(int column){

  return (GridUnit)gridUnits.get(column);

}

Location: EffRow.java

Content: 

/** 

 * @return the table-row FO for this EffRow, or null if there is no table-row. 

 */

public TableRow getTableRow(){

  return getGridUnit(0).getRow();

}

Location: EffRow.java

Content: 

/** 

 * Returns the grid unit at a given position. In contrast to getGridUnit() this method returns null if there's no grid unit at the given position. The number of grid units for row x can be smaller than the number of grid units for row x-1.

 * @param column index of the grid unit in the row (zero based)

 * @return the requested grid unit or null if there's no grid unit at this position.

 */

public GridUnit safelyGetGridUnit(int column){

  if (column < gridUnits.size()) {

    return (GridUnit)gridUnits.get(column);

  }

 else {

    return null;

  }

}

Location: EffRow.java

Content: 

/** 

 * Sets the height for this row that resulted from the explicit height properties specified by the user.

 * @param mom the height

 */

public void setExplicitHeight(MinOptMax mom){

  this.explicitHeight=mom;

}

Location: EffRow.java

Content: 

/** 

 * Sets the calculated height for this EffRow, including everything (cells' bpds, paddings, borders, and border-separation).

 * @param mom the calculated height

 */

public void setHeight(MinOptMax mom){

  this.height=mom;

}

