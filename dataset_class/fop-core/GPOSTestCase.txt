Location: GPOSTestCase.java

Content: 

private void assertSamePositions(int[][] pa1,int[][] pa2){

  assertNotNull(pa1);

  assertNotNull(pa2);

  assertEquals("unequal adjustment count",pa1.length,pa2.length);

  for (int i=0; i < pa1.length; i++) {

    int[] a1=pa1[i];

    int[] a2=pa2[i];

    assertNotNull(a1);

    assertNotNull(a2);

    assertEquals("bad adjustment array length",4,a1.length);

    assertEquals("bad adjustment array length",4,a2.length);

    for (int k=0; k < a1.length; k++) {

      int p1=a1[k];

      int p2=a2[k];

      assertEquals("bad adjustment",p1,p2);

    }

  }

}

Location: GPOSTestCase.java

Content: 

private GlyphPositioningSubtable[] findGPOSSubtables(GlyphPositioningTable gpos,String script,String language,String feature,String lid){

  LookupTable lt=gpos.getLookupTable(lid);

  if (lt != null) {

    return (GlyphPositioningSubtable[])lt.getSubtables();

  }

 else {

    return null;

  }

}

Location: GPOSTestCase.java

Content: 

/** 

 * Perform positioning on all test data in test specification TS.

 * @param ts test specification

 */

private void performPositioning(Object[][] ts){

  assert ts.length > 0;

  Object[] tp=ts[0];

  for (int i=1; i < ts.length; i++) {

    performPositioning(tp,ts[i]);

  }

}

Location: GPOSTestCase.java

Content: 

/** 

 * Perform positioning on all test data TD using test parameters TP.

 * @param tp test parameters

 * @param td test data

 */

private void performPositioning(Object[] tp,Object[] td){

  assert tp.length > 0;

  if (td.length > 5) {

    String fid=(String)td[0];

    String lid=(String)td[1];

    String script=(String)td[2];

    String language=(String)td[3];

    String feature=(String)td[4];

    TTXFile tf=findTTX(fid);

    assertTrue(tf != null);

    GlyphPositioningTable gpos=tf.getGPOS();

    assertTrue(gpos != null);

    GlyphPositioningSubtable[] sta=findGPOSSubtables(gpos,script,language,feature,lid);

    assertTrue(sta != null);

    assertTrue(sta.length > 0);

    ScriptContextTester sct=findScriptContextTester(script,language,feature);

    Object[][] tia=(Object[][])td[5];

    for (    Object[] ti : tia) {

      if (ti != null) {

        if (ti.length > 0) {

          String[] igia=(String[])ti[0];

          int[][] ogpa=(int[][])ti[1];

          GlyphSequence igs=tf.getGlyphSequence(igia);

          int[] widths=tf.getWidths();

          int[][] tgpa=new int[igia.length][4];

          boolean adjusted=GlyphPositioningSubtable.position(igs,script,language,feature,1000,sta,widths,tgpa,sct);

          assertTrue(adjusted);

          assertSamePositions(ogpa,tgpa);

        }

      }

    }

  }

}

Location: GPOSTestCase.java

Content: 

@Test public void testGPOSChainedContextual() throws Exception {

  performPositioning(ltChainedContextual);

}

Location: GPOSTestCase.java

Content: 

@Test public void testGPOSContextual() throws Exception {

  performPositioning(ltContextual);

}

Location: GPOSTestCase.java

Content: 

@Test public void testGPOSCursive() throws Exception {

  performPositioning(ltCursive);

}

Location: GPOSTestCase.java

Content: 

@Test public void testGPOSMarkToBase() throws Exception {

  performPositioning(ltMarkToBase);

}

Location: GPOSTestCase.java

Content: 

@Test public void testGPOSMarkToLigature() throws Exception {

  performPositioning(ltMarkToLigature);

}

Location: GPOSTestCase.java

Content: 

@Test public void testGPOSMarkToMark() throws Exception {

  performPositioning(ltMarkToMark);

}

Location: GPOSTestCase.java

Content: 

@Test public void testGPOSPair() throws Exception {

  performPositioning(ltPair);

}

Location: GPOSTestCase.java

Content: 

@Test public void testGPOSSingle() throws Exception {

  performPositioning(ltSingle);

}

