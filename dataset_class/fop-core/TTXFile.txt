Location: TTXFile.java

Content: 

public static synchronized void clearCache(){

  cache.clear();

}

Location: TTXFile.java

Content: 

private void duplicateCMAPCharacter(String[] en,int cid) throws SAXException {

  throw new SAXException(formatLocator() + ": element " + formatExpandedName(en)+ " contains duplicate cmap character code: "+ CharUtilities.format(cid));

}

Location: TTXFile.java

Content: 

private void duplicateCMAPGlyph(String[] en,int gid) throws SAXException {

  throw new SAXException(formatLocator() + ": element " + formatExpandedName(en)+ " contains duplicate cmap glyph code: "+ gid);

}

Location: TTXFile.java

Content: 

private void duplicateCoverageIndex(String[] en,int index) throws SAXException {

  throw new SAXException(formatLocator() + ": element " + formatExpandedName(en)+ " duplicate coverage table index "+ index);

}

Location: TTXFile.java

Content: 

private void duplicateGlyphClass(String[] en,String name,String glyphClass) throws SAXException {

  throw new SAXException(formatLocator() + ": element " + formatExpandedName(en)+ " contains duplicate glyph class for \""+ name+ "\", with class value "+ glyphClass);

}

Location: TTXFile.java

Content: 

private void duplicateGlyph(String[] en,String name,int gid) throws SAXException {

  throw new SAXException(formatLocator() + ": element " + formatExpandedName(en)+ " contains duplicate name \""+ name+ "\", with identifier value "+ gid);

}

Location: TTXFile.java

Content: 

private void duplicateParameter(String[] en,String label) throws SAXException {

  throw new SAXException(formatLocator() + ": element " + formatExpandedName(en)+ " duplicate "+ label+ " parameter");

}

Location: TTXFile.java

Content: 

private void duplicateTag(String[] en,String label,String tag) throws SAXException {

  throw new SAXException(formatLocator() + ": element " + formatExpandedName(en)+ " duplicate "+ label+ " tag: "+ tag);

}

Location: TTXFile.java

Content: 

private static String extractLocalName(String qName){

  String[] sa=qName.split(":");

  if (sa.length == 2) {

    return sa[1];

  }

 else   if (sa.length == 1) {

    return sa[0];

  }

 else {

    return null;

  }

}

Location: TTXFile.java

Content: 

private static String extractPrefix(String qName){

  String[] sa=qName.split(":");

  if (sa.length == 2) {

    return sa[0];

  }

 else {

    return null;

  }

}

Location: TTXFile.java

Content: 

private static String formatExpandedName(String[] n){

  String u=(n[0] != null) ? n[0] : "null";

  String l=(n[1] != null) ? n[1] : "null";

  return "{" + u + "}"+ l;

}

Location: TTXFile.java

Content: 

private String formatLocator(){

  if (locator == null) {

    return "{null}";

  }

 else {

    return "{" + locator.getSystemId() + ":"+ locator.getLineNumber()+ ":"+ locator.getColumnNumber()+ "}";

  }

}

Location: TTXFile.java

Content: 

public static synchronized TTXFile getFromCache(String filename){

  assert cache != null;

  TTXFile f;

  if ((f=(TTXFile)cache.get(filename)) == null) {

    f=new TTXFile();

    f.parse(filename);

    cache.put(filename,f);

  }

  return f;

}

Location: TTXFile.java

Content: 

public GlyphDefinitionTable getGDEF(){

  return gdef;

}

Location: TTXFile.java

Content: 

public GlyphSequence getGlyphSequence(String[] gids){

  assert gids != null;

  int ng=gids.length;

  IntBuffer cb=IntBuffer.allocate(ng);

  IntBuffer gb=IntBuffer.allocate(ng);

  for (  String gid : gids) {

    int g=mapGlyphId0(gid);

    if (g >= 0) {

      int c=mapGlyphIdToChar(gid);

      if (c < 0) {

        c=CharUtilities.NOT_A_CHARACTER;

      }

      cb.put(c);

      gb.put(g);

    }

 else {

      throw new IllegalArgumentException("unmapped glyph id \"" + gid + "\"");

    }

  }

  cb.rewind();

  gb.rewind();

  return new GlyphSequence(cb,gb,null);

}

Location: TTXFile.java

Content: 

public int getGlyph(String gid){

  return mapGlyphId0(gid);

}

Location: TTXFile.java

Content: 

public GlyphPositioningTable getGPOS(){

  return gpos;

}

Location: TTXFile.java

Content: 

public GlyphSubstitutionTable getGSUB(){

  return gsub;

}

Location: TTXFile.java

Content: 

public static int getPDFWidth(int tw,int upem){

  int pw;

  if (tw < 0) {

    long rest1=tw % upem;

    long storrest=1000 * rest1;

    long ledd2=(storrest != 0) ? (rest1 / storrest) : 0;

    pw=-((-1000 * tw) / upem - (int)ledd2);

  }

 else {

    pw=(tw / upem) * 1000 + ((tw % upem) * 1000) / upem;

  }

  return pw;

}

Location: TTXFile.java

Content: 

public int[] getWidths(){

  if (this.widths == null) {

    if ((hmtx != null) && (upem > 0)) {

      int[] widths=new int[hmtx.length];

      for (int i=0, n=widths.length; i < n; i++) {

        widths[i]=getPDFWidth(hmtx[i][0],upem);

      }

      this.widths=widths;

    }

  }

  return this.widths;

}

Location: TTXFile.java

Content: 

public int[] getWidths(String[] gids){

  assert gids != null;

  int ng=gids.length;

  int[] widths=new int[ng];

  int i=0;

  for (  String gid : gids) {

    int g=mapGlyphId0(gid);

    int w=0;

    if (g >= 0) {

      if ((hmtx != null) && (g < hmtx.length)) {

        int[] mtx=hmtx[g];

        assert mtx != null;

        assert mtx.length > 0;

        w=mtx[0];

      }

    }

    widths[i++]=w;

  }

  assert i == ng;

  return widths;

}

Location: TTXFile.java

Content: 

private void invalidIndex(String[] en,int actual,int expected) throws SAXException {

  throw new SAXException(formatLocator() + ": element " + formatExpandedName(en)+ " specifies invalid index "+ actual+ ", expected "+ expected);

}

Location: TTXFile.java

Content: 

private static String[] makeExpandedName(String uri,String localName,String qName){

  if ((uri != null) && (uri.length() == 0)) {

    uri=null;

  }

  if ((localName != null) && (localName.length() == 0)) {

    localName=null;

  }

  if ((uri == null) && (localName == null)) {

    uri=extractPrefix(qName);

    localName=extractLocalName(qName);

  }

  return new String[]{uri,localName};

}

Location: TTXFile.java

Content: 

public GlyphSequence mapCharsToGlyphs(String s){

  Integer[] ca=UTF32.toUTF32(s,0,true);

  int ng=ca.length;

  IntBuffer cb=IntBuffer.allocate(ng);

  IntBuffer gb=IntBuffer.allocate(ng);

  for (  Integer c : ca) {

    int g=mapCharToGlyph((int)c);

    if (g >= 0) {

      cb.put(c);

      gb.put(g);

    }

 else {

      throw new IllegalArgumentException("character " + CharUtilities.format(c) + " has no corresponding glyph");

    }

  }

  cb.rewind();

  gb.rewind();

  return new GlyphSequence(cb,gb,null);

}

Location: TTXFile.java

Content: 

public int mapCharToGlyph(int c){

  if (cmap != null) {

    Integer g=cmap.get(c);

    if (g != null) {

      return (int)g;

    }

 else {

      return -1;

    }

  }

 else {

    return -1;

  }

}

Location: TTXFile.java

Content: 

private int mapGlyphId0(String glyph){

  assert glyphIds != null;

  Integer gid=glyphIds.get(glyph);

  if (gid != null) {

    return (int)gid;

  }

 else {

    return -1;

  }

}

Location: TTXFile.java

Content: 

private int[] mapGlyphIds(String glyphs,String[] currentElement) throws SAXException {

  String[] ga=glyphs.split(",");

  int[] gids=new int[ga.length];

  int i=0;

  for (  String glyph : ga) {

    gids[i++]=mapGlyphId(glyph,currentElement);

  }

  return gids;

}

Location: TTXFile.java

Content: 

private int mapGlyphIdToChar(String glyph){

  assert glyphIds != null;

  Integer gid=glyphIds.get(glyph);

  if (gid != null) {

    if (gmap != null) {

      Integer cid=gmap.get(gid);

      if (cid != null) {

        return cid;

      }

    }

  }

  return -1;

}

Location: TTXFile.java

Content: 

private int mapGlyphId(String glyph,String[] currentElement) throws SAXException {

  int g=mapGlyphId0(glyph);

  if (g < 0) {

    unsupportedGlyph(currentElement,glyph);

    return -1;

  }

 else {

    return g;

  }

}

Location: TTXFile.java

Content: 

private void mismatchedEntries(String[] en,int nce,int nse) throws SAXException {

  throw new SAXException(formatLocator() + ": element " + formatExpandedName(en)+ " mismatched coverage and subtable entry counts, # coverages "+ nce+ ", # entries "+ nse);

}

Location: TTXFile.java

Content: 

private void mismatchedIndex(String[] en,String label,int actual,int expected) throws SAXException {

  throw new SAXException(formatLocator() + ": element " + formatExpandedName(en)+ " mismatched "+ label+ " index: got "+ actual+ ", expected "+ expected);

}

Location: TTXFile.java

Content: 

private void missingCoverage(String[] en,String type,int expected) throws SAXException {

  throw new SAXException(formatLocator() + ": element " + formatExpandedName(en)+ " missing "+ type+ " coverage table, expected "+ ((expected > 0) ? expected : 1)+ " table(s)");

}

Location: TTXFile.java

Content: 

private void missingParameter(String[] en,String label) throws SAXException {

  throw new SAXException(formatLocator() + ": element " + formatExpandedName(en)+ " missing "+ label+ " parameter");

}

Location: TTXFile.java

Content: 

private void missingRequiredAttribute(String[] en,String name) throws SAXException {

  throw new SAXException(formatLocator() + ": element " + formatExpandedName(en)+ " missing required attribute "+ name);

}

Location: TTXFile.java

Content: 

private void missingTag(String[] en,String label) throws SAXException {

  throw new SAXException(formatLocator() + ": element " + formatExpandedName(en)+ " missing "+ label+ " tag");

}

Location: TTXFile.java

Content: 

private void notPermittedInElementContext(String[] en,String[] cn,Object xns) throws SAXException {

  assert en != null;

  assert cn != null;

  String s="element " + formatExpandedName(en) + " not permitted in current element context "+ formatExpandedName(cn);

  if (xns == null) {

    s+=", expected root context";

  }

 else   if (xns instanceof String[][]) {

    int nxn=0;

    s+=", expected one of { ";

    for (    String[] xn : (String[][])xns) {

      if (nxn++ > 0) {

        s+=", ";

      }

      s+=formatExpandedName(xn);

    }

    s+=" }";

  }

 else   if (xns instanceof String[]) {

    s+=", expected " + formatExpandedName((String[])xns);

  }

  throw new SAXException(formatLocator() + ": " + s);

}

Location: TTXFile.java

Content: 

public void parse(File f){

  assert f != null;

  try {

    SAXParserFactory spf=SAXParserFactory.newInstance();

    SAXParser sp=spf.newSAXParser();

    sp.parse(f,new Handler());

  }

 catch (  FactoryConfigurationError e) {

    throw new RuntimeException(e.getMessage());

  }

catch (  ParserConfigurationException e) {

    throw new RuntimeException(e.getMessage());

  }

catch (  SAXException e) {

    throw new RuntimeException(e.getMessage());

  }

catch (  IOException e) {

    throw new RuntimeException(e.getMessage());

  }

}

Location: TTXFile.java

Content: 

public void parse(String filename){

  parse(new File(filename));

}

Location: TTXFile.java

Content: 

private static boolean sameExpandedName(String[] n1,String[] n2){

  String u1=n1[0];

  String u2=n2[0];

  if ((u1 == null) ^ (u2 == null)) {

    return false;

  }

  if ((u1 != null) && (u2 != null)) {

    if (!u1.equals(u2)) {

      return false;

    }

  }

  String l1=n1[1];

  String l2=n2[1];

  if ((l1 == null) ^ (l2 == null)) {

    return false;

  }

  if ((l1 != null) && (l2 != null)) {

    if (!l1.equals(l2)) {

      return false;

    }

  }

  return true;

}

Location: TTXFile.java

Content: 

public TTXFile(){

  elements=new Stack<String[]>();

  glyphIds=new HashMap<String,Integer>();

  cmapEntries=new ArrayList<int[]>();

  hmtxEntries=new Vector<int[]>();

  glyphClasses=new HashMap<String,Integer>();

  scripts=new HashMap<String,Map<String,List<String>>>();

  languages=new HashMap<String,List<String>>();

  features=new HashMap<String,Object[]>();

  languageFeatures=new ArrayList<String>();

  featureLookups=new ArrayList<String>();

  coverageEntries=new ArrayList<Integer>();

  coverages=new HashMap<String,GlyphCoverageTable>();

  subtableEntries=new ArrayList();

  subtables=new ArrayList<GlyphSubtable>();

  alternates=new ArrayList<Integer>();

  ligatures=new ArrayList<Ligature>();

  substitutes=new ArrayList<Integer>();

  pairs=new ArrayList<PairValues>();

  pairSets=new ArrayList<PairValues[]>();

  anchors=new ArrayList<Anchor>();

  markAnchors=new ArrayList<MarkAnchor>();

  baseOrMarkAnchors=new ArrayList<Anchor[]>();

  ligatureAnchors=new ArrayList<Anchor[][]>();

  components=new ArrayList<Anchor[]>();

  attachmentAnchors=new ArrayList<Anchor[]>();

  ruleLookups=new ArrayList<RuleLookup>();

  glyphIdMax=-1;

  cmPlatform=-1;

  cmEncoding=-1;

  cmLanguage=-1;

  flIndex=-1;

  flSequence=0;

  ltIndex=-1;

  ltSequence=0;

  ltFlags=0;

  stSequence=0;

  stFormat=0;

  ctFormat=-1;

  ctIndex=-1;

  rlSequence=-1;

  rlLookup=-1;

  psIndex=-1;

  vf1=-1;

  vf2=-1;

  g2=-1;

  xCoord=Integer.MIN_VALUE;

  yCoord=Integer.MIN_VALUE;

  markClass=-1;

  defaultScriptTag=DEFAULT_SCRIPT_TAG;

  scriptTag=null;

  defaultLanguageTag=DEFAULT_LANGUAGE_TAG;

  languageTag=null;

  featureTag=null;

  v1=null;

  v2=null;

  upem=-1;

}

Location: TTXFile.java

Content: 

private void unsupportedElement(String[] en) throws SAXException {

  throw new SAXException(formatLocator() + ": unsupported element " + formatExpandedName(en));

}

Location: TTXFile.java

Content: 

private void unsupportedFormat(String[] en,int format) throws SAXException {

  throw new SAXException(formatLocator() + ": element " + formatExpandedName(en)+ " refers to unsupported table format \""+ format+ "\"");

}

Location: TTXFile.java

Content: 

private void unsupportedGlyph(String[] en,String name) throws SAXException {

  throw new SAXException(formatLocator() + ": element " + formatExpandedName(en)+ " refers to unsupported glyph id \""+ name+ "\"");

}

