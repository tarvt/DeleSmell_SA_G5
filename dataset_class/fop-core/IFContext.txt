Location: IFContext.java

Content: 

/** 

 * Returns the currently applicable foreign attributes.

 * @return a Map&lt;QName, Object&gt;

 */

public Map getForeignAttributes(){

  return this.foreignAttributes;

}

Location: IFContext.java

Content: 

/** 

 * Returns a foreign attribute.

 * @param qName the qualified name of the foreign attribute

 * @return the value of the foreign attribute or null if the attribute isn't specified

 */

public Object getForeignAttribute(QName qName){

  return this.foreignAttributes.get(qName);

}

Location: IFContext.java

Content: 

/** 

 * Returns the currently applicable language.

 * @return the language (or null if the language is undefined)

 */

public Locale getLanguage(){

  return this.language;

}

Location: IFContext.java

Content: 

/** 

 * Returns the location of the object enclosing the current content.

 * @return the line and column location of the object in the source FO file,{@code null} if that information is not available

 */

public String getLocation(){

  return location;

}

Location: IFContext.java

Content: 

public int getPageNumber(){

  return pageNumber;

}

Location: IFContext.java

Content: 

public String getRegionType(){

  if (regionType != null) {

    return regionType.name();

  }

  return null;

}

Location: IFContext.java

Content: 

/** 

 * Main constructor.

 * @param ua the user agent

 */

public IFContext(FOUserAgent ua){

  setUserAgent(ua);

}

Location: IFContext.java

Content: 

/** 

 * Returns  {@code true} if the last text in the currently processed text area is hyphenated.

 */

public boolean isHyphenated(){

  return hyphenated;

}

Location: IFContext.java

Content: 

/** 

 * Resets the current structure tree element.

 * @see #setStructureTreeElement(StructureTreeElement)

 */

public void resetStructureTreeElement(){

  setStructureTreeElement(null);

}

Location: IFContext.java

Content: 

/** 

 * Sets the currently applicable foreign attributes.

 * @param foreignAttributes a Map&lt;QName, Object&gt; or null to reset

 */

public void setForeignAttributes(Map foreignAttributes){

  if (foreignAttributes != null) {

    this.foreignAttributes=foreignAttributes;

  }

 else {

    this.foreignAttributes=Collections.EMPTY_MAP;

  }

}

Location: IFContext.java

Content: 

/** 

 * Records that the last text in the currently processed text area is hyphenated.

 */

public void setHyphenated(boolean hyphenated){

  this.hyphenated=hyphenated;

}

Location: IFContext.java

Content: 

/** 

 * Sets the currently applicable language.

 * @param lang the language

 */

public void setLanguage(Locale lang){

  this.language=lang;

}

Location: IFContext.java

Content: 

/** 

 * Sets the location of the object enclosing the current content. location the line and column location of the object in the source FO file

 */

public void setLocation(String location){

  this.location=location;

}

Location: IFContext.java

Content: 

public void setPageNumber(int pageNumber){

  this.pageNumber=pageNumber;

}

Location: IFContext.java

Content: 

public void setRegionType(int type){

  regionType=null;

  if (type == Constants.FO_REGION_AFTER) {

    regionType=RegionType.Footer;

  }

 else   if (type == Constants.FO_REGION_BEFORE) {

    regionType=RegionType.Header;

  }

}

Location: IFContext.java

Content: 

public void setRegionType(String type){

  regionType=null;

  if (type != null) {

    regionType=RegionType.valueOf(type);

  }

}

Location: IFContext.java

Content: 

/** 

 * Set the user agent.

 * @param ua the user agent

 */

public void setUserAgent(FOUserAgent ua){

  if (this.userAgent != null) {

    throw new IllegalStateException("The user agent was already set");

  }

  this.userAgent=ua;

}

