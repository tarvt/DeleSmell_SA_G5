Location: GlyphDefinitionTable.java

Content: 

/** 

 * {@inheritDoc} 

 */

protected void addSubtable(GlyphSubtable subtable){

  if (subtable instanceof GlyphClassSubtable) {

    this.gct=(GlyphClassSubtable)subtable;

  }

 else   if (subtable instanceof AttachmentPointSubtable) {

  }

 else   if (subtable instanceof LigatureCaretSubtable) {

  }

 else   if (subtable instanceof MarkAttachmentSubtable) {

    this.mat=(MarkAttachmentSubtable)subtable;

  }

 else {

    throw new UnsupportedOperationException("unsupported glyph definition subtable type: " + subtable);

  }

}

Location: GlyphDefinitionTable.java

Content: 

/** 

 * Create a definition subtable according to the specified arguments.

 * @param type subtable type

 * @param id subtable identifier

 * @param sequence subtable sequence

 * @param flags subtable flags (must be zero)

 * @param format subtable format

 * @param mapping subtable mapping table

 * @param entries subtable entries

 * @return a glyph subtable instance

 */

public static GlyphSubtable createSubtable(int type,String id,int sequence,int flags,int format,GlyphMappingTable mapping,List entries){

  GlyphSubtable st=null;

switch (type) {

case GDEF_LOOKUP_TYPE_GLYPH_CLASS:

    st=GlyphClassSubtable.create(id,sequence,flags,format,mapping,entries);

  break;

case GDEF_LOOKUP_TYPE_ATTACHMENT_POINT:

st=AttachmentPointSubtable.create(id,sequence,flags,format,mapping,entries);

break;

case GDEF_LOOKUP_TYPE_LIGATURE_CARET:

st=LigatureCaretSubtable.create(id,sequence,flags,format,mapping,entries);

break;

case GDEF_LOOKUP_TYPE_MARK_ATTACHMENT:

st=MarkAttachmentSubtable.create(id,sequence,flags,format,mapping,entries);

break;

default :

break;

}

return st;

}

Location: GlyphDefinitionTable.java

Content: 

/** 

 * Determine glyph class.

 * @param gid a glyph identifier (index)

 * @return a pre-defined glyph class (GLYPH_CLASS_BASE|GLYPH_CLASS_LIGATURE|GLYPH_CLASS_MARK|GLYPH_CLASS_COMPONENT).

 */

public int getGlyphClass(int gid){

  if (gct != null) {

    return gct.getGlyphClass(gid);

  }

 else {

    return -1;

  }

}

Location: GlyphDefinitionTable.java

Content: 

/** 

 * Determine mark attachment class.

 * @param gid a glyph identifier (index)

 * @return a non-negative mark attachment class, or -1 if no class defined

 */

public int getMarkAttachClass(int gid){

  if (mat != null) {

    return mat.getMarkAttachClass(gid);

  }

 else {

    return -1;

  }

}

Location: GlyphDefinitionTable.java

Content: 

/** 

 * Instantiate a <code>GlyphDefinitionTable</code> object using the specified subtables.

 * @param subtables a list of identified subtables

 */

public GlyphDefinitionTable(List subtables,Map<String,ScriptProcessor> processors){

  super(null,new HashMap(0),processors);

  if ((subtables == null) || (subtables.size() == 0)) {

    throw new AdvancedTypographicTableFormatException("subtables must be non-empty");

  }

 else {

    for (    Object o : subtables) {

      if (o instanceof GlyphDefinitionSubtable) {

        addSubtable((GlyphSubtable)o);

      }

 else {

        throw new AdvancedTypographicTableFormatException("subtable must be a glyph definition subtable");

      }

    }

    freezeSubtables();

  }

}

Location: GlyphDefinitionTable.java

Content: 

/** 

 * Determine if glyph belongs to pre-defined glyph class.

 * @param gid a glyph identifier (index)

 * @param gc a pre-defined glyph class (GLYPH_CLASS_BASE|GLYPH_CLASS_LIGATURE|GLYPH_CLASS_MARK|GLYPH_CLASS_COMPONENT).

 * @return true if glyph belongs to specified glyph class

 */

public boolean isGlyphClass(int gid,int gc){

  if (gct != null) {

    return gct.isGlyphClass(gid,gc);

  }

 else {

    return false;

  }

}

Location: GlyphDefinitionTable.java

Content: 

/** 

 * Determine if glyph belongs to (font specific) mark attachment class.

 * @param gid a glyph identifier (index)

 * @param mac a (font specific) mark attachment class

 * @return true if glyph belongs to specified mark attachment class

 */

public boolean isMarkAttachClass(int gid,int mac){

  if (mat != null) {

    return mat.isMarkAttachClass(gid,mac);

  }

 else {

    return false;

  }

}

Location: GlyphDefinitionTable.java

Content: 

/** 

 * Reorder combining marks in glyph sequence so that they precede (within the sequence) the base character to which they are applied. N.B. In the case of LTR segments, marks are not reordered by this, method since when the segment is reversed by BIDI processing, marks are automatically reordered to precede their base glyph.

 * @param gs an input glyph sequence

 * @param widths associated advance widths (also reordered)

 * @param gpa associated glyph position adjustments (also reordered)

 * @param script a script identifier

 * @param language a language identifier

 * @return the reordered (output) glyph sequence

 */

public GlyphSequence reorderCombiningMarks(GlyphSequence gs,int[] widths,int[][] gpa,String script,String language){

  ScriptProcessor sp=ScriptProcessor.getInstance(script,processors);

  return sp.reorderCombiningMarks(this,gs,widths,gpa,script,language);

}

