Location: TableCellLayoutManager.java

Content: 

/** 

 * Add the areas for the break points. The cell contains block stacking layout managers that add block areas. <p>In the collapsing-border model, the borders of a cell that spans over several rows or columns are drawn separately for each grid unit. Therefore we must know the height of each grid row spanned over by the cell. Also, if the cell is broken over two pages we must know which spanned grid rows are present on the current page.</p>

 * @param parentIter the iterator of the break positions

 * @param layoutContext the layout context for adding the areas

 * @param spannedGridRowHeights in collapsing-border model for a spanning cell, heightof each spanned grid row

 * @param startRow first grid row on the current page spanned over by the cell,inclusive

 * @param endRow last grid row on the current page spanned over by the cell, inclusive

 * @param borderBeforeWhich one of {@link ConditionalBorder#NORMAL}, {@link ConditionalBorder#LEADING_TRAILING} or {@link ConditionalBorder#REST}

 * @param borderAfterWhich one of {@link ConditionalBorder#NORMAL}, {@link ConditionalBorder#LEADING_TRAILING} or {@link ConditionalBorder#REST}

 * @param firstOnPage true if the cell will be the very first one on the page, inwhich case collapsed before borders must be drawn in the outer mode

 * @param lastOnPage true if the cell will be the very last one on the page, in whichcase collapsed after borders must be drawn in the outer mode

 * @param painter painter

 * @param firstRowHeight height of the first row spanned by this cell (may be zero ifthis row is placed on a previous page). Used to calculate the placement of the row's background image if any

 */

public void addAreas(PositionIterator parentIter,LayoutContext layoutContext,int[] spannedGridRowHeights,int startRow,int endRow,int borderBeforeWhich,int borderAfterWhich,boolean firstOnPage,boolean lastOnPage,RowPainter painter,int firstRowHeight){

  getParentArea(null);

  addId();

  int borderBeforeWidth=primaryGridUnit.getBeforeBorderWidth(startRow,borderBeforeWhich);

  int borderAfterWidth=primaryGridUnit.getAfterBorderWidth(endRow,borderAfterWhich);

  CommonBorderPaddingBackground padding=primaryGridUnit.getCell().getCommonBorderPaddingBackground();

  int paddingRectBPD=totalHeight - borderBeforeWidth - borderAfterWidth;

  int cellBPD=paddingRectBPD;

  cellBPD-=padding.getPaddingBefore(borderBeforeWhich == ConditionalBorder.REST,this);

  cellBPD-=padding.getPaddingAfter(borderAfterWhich == ConditionalBorder.REST,this);

  addBackgroundAreas(painter,firstRowHeight,borderBeforeWidth,paddingRectBPD);

  if (isSeparateBorderModel()) {

    if (!emptyCell || getTableCell().showEmptyCells()) {

      if (borderBeforeWidth > 0) {

        int halfBorderSepBPD=getTableCell().getTable().getBorderSeparation().getBPD().getLength().getValue() / 2;

        adjustYOffset(curBlockArea,halfBorderSepBPD);

      }

      TraitSetter.addBorders(curBlockArea,getTableCell().getCommonBorderPaddingBackground(),borderBeforeWidth == 0,borderAfterWidth == 0,false,false,this);

    }

  }

 else {

    boolean inFirstColumn=(primaryGridUnit.getColIndex() == 0);

    boolean inLastColumn=(primaryGridUnit.getColIndex() + getTableCell().getNumberColumnsSpanned() == getTable().getNumberOfColumns());

    if (!primaryGridUnit.hasSpanning()) {

      adjustYOffset(curBlockArea,-borderBeforeWidth);

      boolean[] outer=new boolean[]{firstOnPage,lastOnPage,inFirstColumn,inLastColumn};

      TraitSetter.addCollapsingBorders(curBlockArea,primaryGridUnit.getBorderBefore(borderBeforeWhich),primaryGridUnit.getBorderAfter(borderAfterWhich),primaryGridUnit.getBorderStart(),primaryGridUnit.getBorderEnd(),outer);

    }

 else {

      adjustYOffset(curBlockArea,borderBeforeWidth);

      Block[][] blocks=new Block[getTableCell().getNumberRowsSpanned()][getTableCell().getNumberColumnsSpanned()];

      GridUnit[] gridUnits=primaryGridUnit.getRows().get(startRow);

      int level=getTableCell().getBidiLevelRecursive();

      for (int x=0; x < getTableCell().getNumberColumnsSpanned(); x++) {

        GridUnit gu=gridUnits[x];

        BorderInfo border=gu.getBorderBefore(borderBeforeWhich);

        int borderWidth=border.getRetainedWidth() / 2;

        if (borderWidth > 0) {

          addBorder(blocks,startRow,x,Trait.BORDER_BEFORE,border,firstOnPage,level);

          adjustYOffset(blocks[startRow][x],-borderWidth);

          adjustBPD(blocks[startRow][x],-borderWidth);

        }

      }

      gridUnits=primaryGridUnit.getRows().get(endRow);

      for (int x=0; x < getTableCell().getNumberColumnsSpanned(); x++) {

        GridUnit gu=gridUnits[x];

        BorderInfo border=gu.getBorderAfter(borderAfterWhich);

        int borderWidth=border.getRetainedWidth() / 2;

        if (borderWidth > 0) {

          addBorder(blocks,endRow,x,Trait.BORDER_AFTER,border,lastOnPage,level);

          adjustBPD(blocks[endRow][x],-borderWidth);

        }

      }

      for (int y=startRow; y <= endRow; y++) {

        gridUnits=primaryGridUnit.getRows().get(y);

        BorderInfo border=gridUnits[0].getBorderStart();

        int borderWidth=border.getRetainedWidth() / 2;

        if (borderWidth > 0) {

          if (level == 1) {

            addBorder(blocks,y,gridUnits.length - 1,Trait.BORDER_START,border,inFirstColumn,level);

            adjustIPD(blocks[y][gridUnits.length - 1],-borderWidth);

          }

 else {

            addBorder(blocks,y,0,Trait.BORDER_START,border,inFirstColumn,level);

            adjustXOffset(blocks[y][0],borderWidth);

            adjustIPD(blocks[y][0],-borderWidth);

          }

        }

        border=gridUnits[gridUnits.length - 1].getBorderEnd();

        borderWidth=border.getRetainedWidth() / 2;

        if (borderWidth > 0) {

          if (level == 1) {

            addBorder(blocks,y,0,Trait.BORDER_END,border,inLastColumn,level);

            adjustXOffset(blocks[y][0],borderWidth);

            adjustIPD(blocks[y][0],-borderWidth);

          }

 else {

            addBorder(blocks,y,gridUnits.length - 1,Trait.BORDER_END,border,inLastColumn,level);

            adjustIPD(blocks[y][gridUnits.length - 1],-borderWidth);

          }

        }

      }

      int dy=yoffset;

      for (int y=startRow; y <= endRow; y++) {

        int bpd=spannedGridRowHeights[y - startRow];

        int dx=xoffset;

        for (int x=0; x < gridUnits.length; x++) {

          int ipd=getTable().getColumn(primaryGridUnit.getColIndex() + x).getColumnWidth().getValue(getParent());

          if (blocks[y][x] != null) {

            Block block=blocks[y][x];

            adjustYOffset(block,dy);

            adjustXOffset(block,dx);

            adjustIPD(block,ipd);

            adjustBPD(block,bpd);

            parentLayoutManager.addChildArea(block);

          }

          dx+=ipd;

        }

        dy+=bpd;

      }

    }

  }

  TraitSetter.addPadding(curBlockArea,padding,borderBeforeWhich == ConditionalBorder.REST,borderAfterWhich == ConditionalBorder.REST,false,false,this);

  if (usedBPD < cellBPD) {

    if (getTableCell().getDisplayAlign() == EN_CENTER) {

      Block space=new Block();

      space.setChangeBarList(getChangeBarList());

      space.setBPD((cellBPD - usedBPD) / 2);

      space.setBidiLevel(getTableCell().getBidiLevelRecursive());

      curBlockArea.addBlock(space);

    }

 else     if (getTableCell().getDisplayAlign() == EN_AFTER) {

      Block space=new Block();

      space.setChangeBarList(getChangeBarList());

      space.setBPD(cellBPD - usedBPD);

      space.setBidiLevel(getTableCell().getBidiLevelRecursive());

      curBlockArea.addBlock(space);

    }

  }

  if (isDescendantOfTableHeaderOrFooter()) {

    if (hasRetrieveTableMarker) {

      if (isDescendantOfTableHeader && !savedAddAreasArguments) {

        saveAddAreasArguments(parentIter,layoutContext,spannedGridRowHeights,startRow,endRow,borderBeforeWhich,borderAfterWhich,firstOnPage,lastOnPage,painter,firstRowHeight);

      }

      recreateChildrenLMs();

      int displayAlign=((TableCell)this.getFObj()).getDisplayAlign();

      TableCellBreaker breaker=new TableCellBreaker(this,cellIPD,displayAlign);

      breaker.setDescendantOfTableFooter(isDescendantOfTableHeader);

      if (isDescendantOfTableHeader) {

        breaker.setRepeatedHeader(hasRepeatedHeader);

      }

 else {

        breaker.setRepeatedFooter(layoutContext.treatAsArtifact());

      }

      breaker.doLayout(usedBPD,false);

      clearRetrieveTableMarkerChildNodes(getChildLMs());

    }

  }

  if (!hasRetrieveTableMarker) {

    AreaAdditionUtil.addAreas(this,parentIter,layoutContext);

  }

  curBlockArea.setBPD(cellBPD);

  if (!isSeparateBorderModel() || !emptyCell || getTableCell().showEmptyCells()) {

    TraitSetter.addBackground(curBlockArea,getTableCell().getCommonBorderPaddingBackground(),this);

  }

  if (flushArea) {

    flush();

  }

 else {

    flushArea=true;

  }

  curBlockArea=null;

  notifyEndOfLayout();

}

Location: TableCellLayoutManager.java

Content: 

/** 

 * Adds background areas for the column, body and row, if any. 

 */

private void addBackgroundAreas(RowPainter painter,int firstRowHeight,int borderBeforeWidth,int paddingRectBPD){

  TableColumn column=getTable().getColumn(primaryGridUnit.getColIndex());

  if (column.getCommonBorderPaddingBackground().hasBackground()) {

    Block colBackgroundArea=getBackgroundArea(paddingRectBPD,borderBeforeWidth);

    ((TableLayoutManager)parentLayoutManager).registerColumnBackgroundArea(column,colBackgroundArea,-startIndent);

  }

  TablePart body=primaryGridUnit.getTablePart();

  if (body.getCommonBorderPaddingBackground().hasBackground()) {

    painter.registerPartBackgroundArea(getBackgroundArea(paddingRectBPD,borderBeforeWidth));

  }

  TableRow row=primaryGridUnit.getRow();

  if (row != null && row.getCommonBorderPaddingBackground().hasBackground()) {

    Block rowBackgroundArea=getBackgroundArea(paddingRectBPD,borderBeforeWidth);

    ((TableLayoutManager)parentLayoutManager).addBackgroundArea(rowBackgroundArea);

    TraitSetter.addBackground(rowBackgroundArea,row.getCommonBorderPaddingBackground(),parentLayoutManager,-xoffset - startIndent,-borderBeforeWidth,parentLayoutManager.getContentAreaIPD(),firstRowHeight);

  }

}

Location: TableCellLayoutManager.java

Content: 

private void addBorder(Block[][] blocks,int i,int j,Integer side,BorderInfo border,boolean outer,int level){

  if (blocks[i][j] == null) {

    blocks[i][j]=new Block();

    blocks[i][j].setChangeBarList(getChangeBarList());

    blocks[i][j].addTrait(Trait.IS_REFERENCE_AREA,Boolean.TRUE);

    blocks[i][j].setPositioning(Block.ABSOLUTE);

    blocks[i][j].setBidiLevel(level);

  }

  blocks[i][j].addTrait(side,BorderProps.makeRectangular(border.getStyle(),border.getRetainedWidth(),border.getColor(),outer ? BorderProps.Mode.COLLAPSE_OUTER : BorderProps.Mode.COLLAPSE_INNER));

}

Location: TableCellLayoutManager.java

Content: 

private static void adjustBPD(Block block,int amount){

  block.setBPD(block.getBPD() + amount);

}

Location: TableCellLayoutManager.java

Content: 

private static void adjustIPD(Block block,int amount){

  block.setIPD(block.getIPD() + amount);

}

Location: TableCellLayoutManager.java

Content: 

private static void adjustXOffset(Block block,int amount){

  block.setXOffset(block.getXOffset() + amount);

}

Location: TableCellLayoutManager.java

Content: 

private static void adjustYOffset(Block block,int amount){

  block.setYOffset(block.getYOffset() + amount);

}

Location: TableCellLayoutManager.java

Content: 

private void clearRetrieveTableMarkerChildNodes(List<LayoutManager> childrenLMs){

  if (childrenLMs == null) {

    return;

  }

  int n=childrenLMs.size();

  for (  LayoutManager lm : childrenLMs) {

    if (lm == null) {

      return;

    }

 else     if (lm instanceof RetrieveTableMarkerLayoutManager) {

      ((AbstractLayoutManager)lm).getFObj().clearChildNodes();

    }

 else {

      List<LayoutManager> lms=lm.getChildLMs();

      clearRetrieveTableMarkerChildNodes(lms);

    }

  }

}

Location: TableCellLayoutManager.java

Content: 

/** 

 * {@inheritDoc}

 */

public void discardSpace(KnuthGlue spaceGlue){

}

Location: TableCellLayoutManager.java

Content: 

private Block getBackgroundArea(int bpd,int borderBeforeWidth){

  CommonBorderPaddingBackground padding=getTableCell().getCommonBorderPaddingBackground();

  int paddingStart=padding.getPaddingStart(false,this);

  int paddingEnd=padding.getPaddingEnd(false,this);

  Block block=new Block();

  block.setChangeBarList(getChangeBarList());

  TraitSetter.setProducerID(block,getTable().getId());

  block.setPositioning(Block.ABSOLUTE);

  block.setIPD(cellIPD + paddingStart + paddingEnd);

  block.setBPD(bpd);

  block.setXOffset(xoffset + startIndent - paddingStart);

  block.setYOffset(yoffset + borderBeforeWidth);

  block.setBidiLevel(getTableCell().getBidiLevelRecursive());

  return block;

}

Location: TableCellLayoutManager.java

Content: 

/** 

 * Returns the BPD of the content area

 * @return the BPD of the content area

 */

public int getContentAreaBPD(){

  if (curBlockArea != null) {

    return curBlockArea.getBPD();

  }

 else {

    log.error("getContentAreaBPD called on unknown BPD");

    return -1;

  }

}

Location: TableCellLayoutManager.java

Content: 

/** 

 * Returns the IPD of the content area

 * @return the IPD of the content area

 */

public int getContentAreaIPD(){

  return cellIPD;

}

Location: TableCellLayoutManager.java

Content: 

/** 

 * {@inheritDoc}

 */

public boolean getGeneratesBlockArea(){

  return true;

}

Location: TableCellLayoutManager.java

Content: 

/** 

 * {@inheritDoc}

 */

public boolean getGeneratesReferenceArea(){

  return true;

}

Location: TableCellLayoutManager.java

Content: 

/** 

 * {@inheritDoc} 

 */

protected int getIPIndents(){

  int[] startEndBorderWidths=primaryGridUnit.getStartEndBorderWidths();

  startIndent=startEndBorderWidths[0];

  endIndent=startEndBorderWidths[1];

  if (isSeparateBorderModel()) {

    int borderSep=getTable().getBorderSeparation().getLengthPair().getIPD().getLength().getValue(this);

    startIndent+=borderSep / 2;

    endIndent+=borderSep / 2;

  }

 else {

    startIndent/=2;

    endIndent/=2;

  }

  startIndent+=getTableCell().getCommonBorderPaddingBackground().getPaddingStart(false,this);

  endIndent+=getTableCell().getCommonBorderPaddingBackground().getPaddingEnd(false,this);

  return startIndent + endIndent;

}

Location: TableCellLayoutManager.java

Content: 

/** 

 * {@inheritDoc} 

 */

public Keep getKeepTogether(){

  return Keep.KEEP_AUTO;

}

Location: TableCellLayoutManager.java

Content: 

/** 

 * {@inheritDoc}

 */

public List getNextKnuthElements(LayoutContext context,int alignment){

  MinOptMax stackLimit=context.getStackLimitBP();

  referenceIPD=context.getRefIPD();

  cellIPD=referenceIPD;

  cellIPD-=getIPIndents();

  List returnedList;

  List contentList=new LinkedList();

  List returnList=new LinkedList();

  LayoutManager curLM;

  LayoutManager prevLM=null;

  while ((curLM=getChildLM()) != null) {

    LayoutContext childLC=LayoutContext.newInstance();

    childLC.setStackLimitBP(context.getStackLimitBP().minus(stackLimit));

    childLC.setRefIPD(cellIPD);

    returnedList=curLM.getNextKnuthElements(childLC,alignment);

    if (childLC.isKeepWithNextPending()) {

      log.debug("child LM signals pending keep with next");

    }

    if (contentList.isEmpty() && childLC.isKeepWithPreviousPending()) {

      primaryGridUnit.setKeepWithPrevious(childLC.getKeepWithPreviousPending());

      childLC.clearKeepWithPreviousPending();

    }

    if (prevLM != null && !ElementListUtils.endsWithForcedBreak(contentList)) {

      addInBetweenBreak(contentList,context,childLC);

    }

    contentList.addAll(returnedList);

    if (returnedList.isEmpty()) {

      continue;

    }

    if (childLC.isKeepWithNextPending()) {

      context.updateKeepWithNextPending(childLC.getKeepWithNextPending());

      childLC.clearKeepWithNextPending();

    }

    prevLM=curLM;

  }

  primaryGridUnit.setKeepWithNext(context.getKeepWithNextPending());

  returnedList=new LinkedList();

  if (!contentList.isEmpty()) {

    wrapPositionElements(contentList,returnList);

  }

 else {

    returnList.add(new KnuthBox(0,notifyPos(new Position(this)),true));

  }

  SpaceResolver.resolveElementList(returnList);

  if (((KnuthElement)returnList.get(0)).isForcedBreak()) {

    primaryGridUnit.setBreakBefore(((KnuthPenalty)returnList.get(0)).getBreakClass());

    returnList.remove(0);

    assert !returnList.isEmpty();

  }

  final KnuthElement lastItem=(KnuthElement)ListUtil.getLast(returnList);

  if (lastItem.isForcedBreak()) {

    KnuthPenalty p=(KnuthPenalty)lastItem;

    primaryGridUnit.setBreakAfter(p.getBreakClass());

    p.setPenalty(0);

  }

  setFinished(true);

  return returnList;

}

Location: TableCellLayoutManager.java

Content: 

/** 

 * @return the table-cell FO 

 */

public TableCell getTableCell(){

  return (TableCell)this.fobj;

}

Location: TableCellLayoutManager.java

Content: 

private TableLayoutManager getTableLayoutManager(){

  LayoutManager parentLM=getParent();

  while (!(parentLM instanceof TableLayoutManager)) {

    parentLM=parentLM.getParent();

  }

  TableLayoutManager tlm=(TableLayoutManager)parentLM;

  return tlm;

}

Location: TableCellLayoutManager.java

Content: 

/** 

 * Checks whether the associated table cell of this LM is in a table header or footer.

 * @return true if descendant of table header or footer

 */

private boolean isDescendantOfTableHeaderOrFooter(){

  return (isDescendantOfTableFooter || isDescendantOfTableHeader);

}

Location: TableCellLayoutManager.java

Content: 

private boolean isSeparateBorderModel(){

  return getTable().isSeparateBorderModel();

}

Location: TableCellLayoutManager.java

Content: 

/** 

 * {@inheritDoc}

 */

public int negotiateBPDAdjustment(int adj,KnuthElement lastElement){

  return 0;

}

Location: TableCellLayoutManager.java

Content: 

/** 

 * Registers the FO's markers on the current PageViewport and parent Table.

 * @param isStarting    boolean indicating whether the markers qualify as 'starting'

 * @param isFirst   boolean indicating whether the markers qualify as 'first'

 * @param isLast    boolean indicating whether the markers qualify as 'last'

 */

protected void registerMarkers(boolean isStarting,boolean isFirst,boolean isLast){

  Map<String,Marker> markers=getTableCell().getMarkers();

  if (markers != null) {

    getCurrentPV().registerMarkers(markers,isStarting,isFirst,isLast && isLastTrait);

    if (!isDescendantOfTableHeaderOrFooter()) {

      getTableLayoutManager().registerMarkers(markers,isStarting,isFirst,isLast && isLastTrait);

    }

  }

}

Location: TableCellLayoutManager.java

Content: 

/** 

 * Calls the addAreas() using the original arguments.

 */

protected void repeatAddAreas(){

  if (savedAddAreasArguments) {

    addAreas(savedParentIter,savedLayoutContext,savedSpannedGridRowHeights,savedStartRow,savedEndRow,savedBorderBeforeWhich,savedBorderAfterWhich,savedFirstOnPage,savedLastOnPage,savedPainter,savedFirstRowHeight);

    savedAddAreasArguments=false;

  }

}

Location: TableCellLayoutManager.java

Content: 

private void saveAddAreasArguments(PositionIterator parentIter,LayoutContext layoutContext,int[] spannedGridRowHeights,int startRow,int endRow,int borderBeforeWhich,int borderAfterWhich,boolean firstOnPage,boolean lastOnPage,RowPainter painter,int firstRowHeight){

  if (savedAddAreasArguments) {

    return;

  }

  if (isDescendantOfTableHeader) {

    savedAddAreasArguments=true;

    savedParentIter=null;

    savedLayoutContext=null;

    savedSpannedGridRowHeights=spannedGridRowHeights;

    savedStartRow=startRow;

    savedEndRow=endRow;

    savedBorderBeforeWhich=borderBeforeWhich;

    savedBorderAfterWhich=borderAfterWhich;

    savedFirstOnPage=firstOnPage;

    savedLastOnPage=lastOnPage;

    savedPainter=painter;

    savedFirstRowHeight=firstRowHeight;

    TableLayoutManager parentTableLayoutManager=getTableLayoutManager();

    parentTableLayoutManager.saveTableHeaderTableCellLayoutManagers(this);

    flushArea=false;

  }

}

Location: TableCellLayoutManager.java

Content: 

/** 

 * Set the content height for this cell. This method is used during addAreas() stage.

 * @param h the height of the contents of this cell

 */

public void setContentHeight(int h){

  usedBPD=h;

}

Location: TableCellLayoutManager.java

Content: 

public void setHasRepeatedHeader(boolean hasRepeatedHeader){

  this.hasRepeatedHeader=hasRepeatedHeader;

}

Location: TableCellLayoutManager.java

Content: 

void setLastTrait(boolean isLast){

  isLastTrait=isLast;

}

Location: TableCellLayoutManager.java

Content: 

/** 

 * {@inheritDoc} 

 */

public void setParent(LayoutManager lm){

  this.parentLayoutManager=lm;

  if (this.hasRetrieveTableMarker) {

    this.getTableLayoutManager().flagAsHavingRetrieveTableMarker();

  }

}

Location: TableCellLayoutManager.java

Content: 

/** 

 * Sets the total height of this cell on the current page. That is, the cell's bpd plus before and after borders and paddings, plus the table's border-separation.

 * @param h the height of cell

 */

public void setTotalHeight(int h){

  totalHeight=h;

}

Location: TableCellLayoutManager.java

Content: 

/** 

 * Set the x offset of this cell (usually the same as its parent row). This offset is used to determine the absolute position of the cell.

 * @param off the x offset

 */

public void setXOffset(int off){

  xoffset=off;

}

Location: TableCellLayoutManager.java

Content: 

/** 

 * Set the y offset of this cell. This offset is used to set the absolute position of the cell.

 * @param off the y direction offset

 */

public void setYOffset(int off){

  yoffset=off;

}

Location: TableCellLayoutManager.java

Content: 

/** 

 * Create a new Cell layout manager.

 * @param node table-cell FO for which to create the LM

 * @param pgu primary grid unit for the cell

 */

public TableCellLayoutManager(TableCell node,PrimaryGridUnit pgu){

  super(node);

  setGeneratesBlockArea(true);

  this.primaryGridUnit=pgu;

  this.isDescendantOfTableHeader=node.getParent().getParent() instanceof TableHeader || node.getParent() instanceof TableHeader;

  this.isDescendantOfTableFooter=node.getParent().getParent() instanceof TableFooter || node.getParent() instanceof TableFooter;

  this.hasRetrieveTableMarker=node.hasRetrieveTableMarker();

}

