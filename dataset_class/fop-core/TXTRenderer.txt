Location: TXTRenderer.java

Content: 

/** 

 * Adds one element of border.

 * @param x  x coordinate

 * @param y  y coordinate

 * @param style  integer, representing border style

 * @param type  integer, representing border element type

 */

private void addBitOfBorder(int x,int y,int style,int type){

  Point point=currentState.transformPoint(x,y);

  if (isLayInside(point.x,point.y)) {

    bm.addBorderElement(point.x,point.y,style,type);

  }

}

Location: TXTRenderer.java

Content: 

/** 

 * Add char to text buffer.

 * @param x  x coordinate

 * @param y  y coordinate

 * @param ch  char to add

 * @param ischar boolean, repersenting is character adding to text buffer

 */

protected void addChar(int x,int y,char ch,boolean ischar){

  Point point=currentState.transformPoint(x,y);

  putChar(point.x,point.y,ch,ischar);

}

Location: TXTRenderer.java

Content: 

/** 

 * Adds string to text buffer (<code>charData</code>). <p> Chars of string map in turn.

 * @param row x coordinate

 * @param col y coordinate

 * @param s string to add

 */

protected void addString(int row,int col,String s){

  for (int l=0; l < s.length(); l++) {

    addChar(col + l,row,s.charAt(l),true);

  }

}

Location: TXTRenderer.java

Content: 

/** 

 * Does nothing.

 * @return null{@inheritDoc}

 */

protected List breakOutOfStateStack(){

  return null;

}

Location: TXTRenderer.java

Content: 

/** 

 * Does nothing. {@inheritDoc}

 */

protected void clipRect(float x,float y,float width,float height){

}

Location: TXTRenderer.java

Content: 

/** 

 * {@inheritDoc} 

 */

protected void concatenateTransformationMatrix(AffineTransform at){

  currentState.push(new CTM(UnitConv.ptToMpt(at)));

}

Location: TXTRenderer.java

Content: 

/** 

 * {@inheritDoc}

 */

protected void drawBackAndBorders(Area area,float startx,float starty,float width,float height){

  bm.setWidth(Helper.ceilPosition(toMilli(width),CHAR_WIDTH));

  bm.setHeight(Helper.ceilPosition(toMilli(height),CHAR_HEIGHT + 2 * LINE_LEADING));

  bm.setStartX(Helper.ceilPosition(toMilli(startx),CHAR_WIDTH));

  bm.setStartY(Helper.ceilPosition(toMilli(starty),CHAR_HEIGHT + 2 * LINE_LEADING));

  super.drawBackAndBorders(area,startx,starty,width,height);

}

Location: TXTRenderer.java

Content: 

/** 

 * {@inheritDoc}

 */

protected void drawBorderLine(float x1,float y1,float x2,float y2,boolean horz,boolean startOrBefore,int style,Color col){

  int borderHeight=bm.getHeight();

  int borderWidth=bm.getWidth();

  int borderStartX=bm.getStartX();

  int borderStartY=bm.getStartY();

  int x;

  int y;

  if (horz && startOrBefore) {

    x=borderStartX;

    y=borderStartY;

  }

 else   if (horz && !startOrBefore) {

    x=borderStartX;

    y=borderStartY + borderHeight - 1;

  }

 else   if (!horz && startOrBefore) {

    x=borderStartX;

    y=borderStartY;

  }

 else {

    x=borderStartX + borderWidth - 1;

    y=borderStartY;

  }

  int dx;

  int dy;

  int length;

  int startType;

  int endType;

  if (horz) {

    length=borderWidth;

    dx=1;

    dy=0;

    startType=1 << AbstractBorderElement.RIGHT;

    endType=1 << AbstractBorderElement.LEFT;

  }

 else {

    length=borderHeight;

    dx=0;

    dy=1;

    startType=1 << AbstractBorderElement.DOWN;

    endType=1 << AbstractBorderElement.UP;

  }

  addBitOfBorder(x,y,style,startType);

  for (int i=0; i < length - 2; i++) {

    x+=dx;

    y+=dy;

    addBitOfBorder(x,y,style,startType + endType);

  }

  x+=dx;

  y+=dy;

  addBitOfBorder(x,y,style,endType);

}

Location: TXTRenderer.java

Content: 

/** 

 * {@inheritDoc} 

 */

protected void drawImage(String url,Rectangle2D pos,Map foreignAttributes){

}

Location: TXTRenderer.java

Content: 

/** 

 * Fills a rectangular area with the current filling char. {@inheritDoc}

 */

protected void fillRect(float x,float y,float width,float height){

  fillRect(bm.getStartX(),bm.getStartY(),bm.getWidth(),bm.getHeight(),fillChar);

}

Location: TXTRenderer.java

Content: 

/** 

 * Fills rectangle startX, startY, width, height with char <code>charToFill</code>.

 * @param startX x-coordinate of upper left point

 * @param startY y-coordinate of upper left point

 * @param width width of rectangle

 * @param height height of rectangle

 * @param charToFill filling char

 */

private void fillRect(int startX,int startY,int width,int height,char charToFill){

  for (int x=startX; x < startX + width; x++) {

    for (int y=startY; y < startY + height; y++) {

      addChar(x,y,charToFill,false);

    }

  }

}

Location: TXTRenderer.java

Content: 

/** 

 * Projects current page borders (i.e.<code>bm</code>) to buffer for background and images (i.e.<code>decoData</code>).

 */

private void flushBorderToBuffer(){

  for (int x=0; x < pageWidth; x++) {

    for (int y=0; y < pageHeight; y++) {

      Character c=bm.getCharacter(x,y);

      if (c != null) {

        putChar(x,y,c,false);

      }

    }

  }

}

Location: TXTRenderer.java

Content: 

/** 

 * Write out the buffer to output stream.

 */

private void flushBuffer(){

  for (int row=0; row < pageHeight; row++) {

    StringBuffer cr=charData[row];

    StringBuffer dr=decoData[row];

    StringBuffer outr=null;

    if (cr != null && dr == null) {

      outr=cr;

    }

 else     if (dr != null && cr == null) {

      outr=dr;

    }

 else     if (cr != null && dr != null) {

      int len=dr.length();

      if (cr.length() > len) {

        len=cr.length();

      }

      outr=new StringBuffer();

      for (int countr=0; countr < len; countr++) {

        if (countr < cr.length() && cr.charAt(countr) != ' ') {

          outr.append(cr.charAt(countr));

        }

 else         if (countr < dr.length()) {

          outr.append(dr.charAt(countr));

        }

 else {

          outr.append(' ');

        }

      }

    }

    if (outr != null) {

      currentStream.add(outr.toString());

    }

    if (row < pageHeight) {

      currentStream.add(LINE_ENDING);

    }

  }

}

Location: TXTRenderer.java

Content: 

/** 

 * Indicates if point (x, y) lay inside currentPage.

 * @param x x coordinate

 * @param y y coordinate

 * @return <b>true</b> if point lay inside page

 */

public boolean isLayInside(int x,int y){

  return (x >= 0) && (x < pageWidth) && (y >= 0)&& (y < pageHeight);

}

Location: TXTRenderer.java

Content: 

/** 

 * Does nothing. {@inheritDoc}

 */

protected void lineTo(float x,float y){

}

Location: TXTRenderer.java

Content: 

/** 

 * Does nothing. {@inheritDoc}

 */

protected void moveTo(float x,float y){

}

Location: TXTRenderer.java

Content: 

/** 

 * Add char to text or background buffer.

 * @param x x coordinate

 * @param y x coordinate

 * @param ch char to add

 * @param ischar indicates if it char or background

 */

protected void putChar(int x,int y,char ch,boolean ischar){

  if (isLayInside(x,y)) {

    StringBuffer sb=ischar ? charData[y] : decoData[y];

    while (sb.length() <= x) {

      sb.append(' ');

    }

    sb.setCharAt(x,ch);

  }

}

Location: TXTRenderer.java

Content: 

/** 

 * Does nothing. {@inheritDoc}

 */

protected void restoreStateStackAfterBreakOut(List breakOutList){

}

Location: TXTRenderer.java

Content: 

/** 

 * Returns the closest integer to the multiplication of a number and 1000.

 * @param x  the value of the argument, multiplied by1000 and rounded

 * @return the value of the argument multiplied by1000 and rounded to the nearest integer

 */

protected int toMilli(float x){

  return Math.round(x * 1000f);

}

Location: TXTRenderer.java

Content: 

/** 

 * Constructs a newly allocated <code>TXTRenderer</code> object.

 * @param userAgent the user agent that contains configuration details. This cannot be null.

 */

public TXTRenderer(FOUserAgent userAgent){

  super(userAgent);

}

Location: TXTRenderer.java

Content: 

/** 

 * Changes current filling char. {@inheritDoc}

 */

protected void updateColor(Color col,boolean fill){

  if (col == null) {

    return;

  }

  double fillShade=0.30f / 255f * col.getRed() + 0.59f / 255f * col.getGreen() + 0.11f / 255f * col.getBlue();

  fillShade=1 - fillShade;

  if (fillShade > 0.8f) {

    fillChar=FULL_BLOCK;

  }

 else   if (fillShade > 0.6f) {

    fillChar=DARK_SHADE;

  }

 else   if (fillShade > 0.4f) {

    fillChar=MEDIUM_SHADE;

  }

 else   if (fillShade > 0.2f) {

    fillChar=LIGHT_SHADE;

  }

 else {

    fillChar=' ';

  }

}

