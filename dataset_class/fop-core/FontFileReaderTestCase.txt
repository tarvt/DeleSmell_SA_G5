Location: FontFileReaderTestCase.java

Content: 

/** 

 * Constructor - initialises an array that only needs to be created once. It creates a byte[] of form { 0x00, 0x01, 0x02, 0x03..., 0xff};

 */

public FontFileReaderTestCase(){

  byteArray=new byte[256];

  for (int i=0; i < 256; i++) {

    byteArray[i]=(byte)i;

  }

  in=new ByteArrayInputStream(byteArray);

}

Location: FontFileReaderTestCase.java

Content: 

/** 

 * Test getBytes()

 * @throws IOException exception

 */

@Test public void testGetBytes() throws IOException {

  byte[] retrievedBytes=fontReader.getBytes(0,256);

  assertTrue(Arrays.equals(byteArray,retrievedBytes));

}

Location: FontFileReaderTestCase.java

Content: 

/** 

 * Test getCurrentPos() - 3 checks: 1) test with seekSet(int) 2) test with skip(int) 3) test with a readTTFByte() (this moves the position by the size of the data being read)

 * @throws IOException exception

 */

@Test public void testGetCurrentPos() throws IOException {

  fontReader.seekSet(10);

  fontReader.skip(100);

  assertEquals(110,fontReader.getCurrentPos());

  fontReader.readTTFByte();

  assertEquals(111,fontReader.getCurrentPos());

}

Location: FontFileReaderTestCase.java

Content: 

/** 

 * Test getFileSize()

 */

@Test public void testGetFileSize(){

  assertEquals(256,fontReader.getFileSize());

}

Location: FontFileReaderTestCase.java

Content: 

/** 

 * Test readTTFByte()

 * @throws IOException exception

 */

@Test public void testReadTTFByte() throws IOException {

  for (int i=0; i < 256; i++) {

    assertEquals((byte)i,fontReader.readTTFByte());

  }

}

Location: FontFileReaderTestCase.java

Content: 

/** 

 * Test readTTFLong()

 * @throws IOException exception

 */

@Test public void testReadTTFLong() throws IOException {

  assertEquals(66051,fontReader.readTTFLong());

  fontReader.seekSet(250);

  assertEquals(-84148995,fontReader.readTTFLong());

}

Location: FontFileReaderTestCase.java

Content: 

/** 

 * Test readTTFShort() - Test positive and negative numbers (two's compliment).

 * @throws IOException exception

 */

@Test public void testReadTTFShort() throws IOException {

  assertEquals("Should have been 1 (0x0001)",1,fontReader.readTTFShort());

  assertEquals(515,fontReader.readTTFShort());

  fontReader.seekSet(250);

  assertEquals(-1285,fontReader.readTTFShort());

}

Location: FontFileReaderTestCase.java

Content: 

/** 

 * Test readTTFShort(int) - test reading ahead of current position and behind current position and in both cases ensure that our current position isn't changed.

 * @throws IOException exception

 */

@Test public void testReadTTFShortWithArg() throws IOException {

  assertEquals(25701,fontReader.readTTFShort(100));

  assertEquals(0,fontReader.getCurrentPos());

  fontReader.seekSet(255);

  assertEquals(-1285,fontReader.readTTFShort(250));

  assertEquals(255,fontReader.getCurrentPos());

}

Location: FontFileReaderTestCase.java

Content: 

/** 

 * Test readTTFString() - there are two paths to test here: 1) A null terminated string 2) A string not terminated with a null (we expect this to throw an EOFException)

 * @throws IOException exception

 */

@Test public void testReadTTFString() throws IOException {

  byte[] strByte={(byte)'t',(byte)'e',(byte)'s',(byte)'t',0x00};

  fontReader=new FontFileReader(new ByteArrayInputStream(strByte));

  assertEquals("test",fontReader.readTTFString());

  try {

    byte[] strByteNoNull={(byte)'t',(byte)'e',(byte)'s',(byte)'t'};

    fontReader=new FontFileReader(new ByteArrayInputStream(strByteNoNull));

    assertEquals("test",fontReader.readTTFString());

    fail("FontFileReaderTest testReadTTFString Fails.");

  }

 catch (  EOFException e) {

  }

}

Location: FontFileReaderTestCase.java

Content: 

/** 

 * Test readTTFString(int arg1, int arg2)

 */

public void testReadTTFString2IntArgs(){

}

Location: FontFileReaderTestCase.java

Content: 

/** 

 * Test readTTFString(int arg)

 * @throws IOException exception

 */

@Test public void testReadTTFStringIntArg() throws IOException {

  byte[] strByte={(byte)'t',(byte)'e',(byte)'s',(byte)'t'};

  fontReader=new FontFileReader(new ByteArrayInputStream(strByte));

  assertEquals("test",fontReader.readTTFString(4));

  try {

    fontReader=new FontFileReader(new ByteArrayInputStream(strByte));

    assertEquals("test",fontReader.readTTFString(5));

    fail("FontFileReaderTest testReadTTFStringIntArg Fails.");

  }

 catch (  EOFException e) {

  }

}

Location: FontFileReaderTestCase.java

Content: 

/** 

 * Test readTTFUByte()

 * @throws IOException exception

 */

@Test public void testReadTTFUByte() throws IOException {

  for (int i=0; i < 256; i++) {

    assertEquals(i,fontReader.readTTFUByte());

  }

}

Location: FontFileReaderTestCase.java

Content: 

/** 

 * Test readTTFULong()

 * @throws IOException exception

 */

@Test public void testReadTTFULong() throws IOException {

  assertEquals(66051,fontReader.readTTFULong());

  fontReader.seekSet(250);

  assertEquals(4210818301L,fontReader.readTTFULong());

}

Location: FontFileReaderTestCase.java

Content: 

/** 

 * Test readTTFUShort() - Test positive and potentially negative numbers (two's compliment).

 * @throws IOException exception

 */

@Test public void testReadTTFUShort() throws IOException {

  assertEquals(1,fontReader.readTTFUShort());

  assertEquals(515,fontReader.readTTFUShort());

  fontReader.seekSet(250);

  assertEquals((250 << 8) + 251,fontReader.readTTFUShort());

}

Location: FontFileReaderTestCase.java

Content: 

/** 

 * Test readTTFUShort(int arg) - test reading ahead of current position and behind current position and in both cases ensure that our current position isn't changed.

 * @throws IOException exception

 */

@Test public void testReadTTFUShortWithArg() throws IOException {

  assertEquals(25701,fontReader.readTTFUShort(100));

  assertEquals(0,fontReader.getCurrentPos());

  fontReader.seekSet(255);

  assertEquals(64251,fontReader.readTTFUShort(250));

  assertEquals(255,fontReader.getCurrentPos());

}

Location: FontFileReaderTestCase.java

Content: 

/** 

 * Test seekSet() - check that it moves to the correct position and enforce a failure case.

 * @throws IOException exception

 */

@Test public void testSeekSet() throws IOException {

  fontReader.seekSet(10);

  assertEquals(10,fontReader.readTTFByte());

  try {

    fontReader.seekSet(257);

    fail("FileFontReaderTest Failed testSeekSet");

  }

 catch (  IOException e) {

  }

}

Location: FontFileReaderTestCase.java

Content: 

/** 

 * Test skip() - check that it moves to the correct position and enforce a failure case.

 * @throws IOException exception

 */

@Test public void testSkip() throws IOException {

  fontReader.skip(100);

  assertEquals(100,fontReader.readTTFByte());

  try {

    fontReader.skip(156);

    fail("FileFontReaderTest Failed testSkip");

  }

 catch (  IOException e) {

  }

}

