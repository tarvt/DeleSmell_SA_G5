Location: CustomFont.java

Content: 

/** 

 * Adds an unencoded character (one that is not supported by the primary encoding).

 * @param ch the named character

 * @param width the width of the character

 */

public void addUnencodedCharacter(NamedCharacter ch,int width,Rectangle bbox){

  if (this.unencodedCharacters == null) {

    this.unencodedCharacters=new HashMap<Character,SingleByteFont.UnencodedCharacter>();

  }

  if (ch.hasSingleUnicodeValue()) {

    SingleByteFont.UnencodedCharacter uc=new SingleByteFont.UnencodedCharacter(ch,width,bbox);

    this.unencodedCharacters.put(ch.getSingleUnicodeValue(),uc);

  }

 else {

  }

}

Location: CustomFont.java

Content: 

/** 

 * @param resourceResolver the URI resource resolver for controlling file access

 */

public CustomFont(InternalResourceResolver resourceResolver){

  this.resourceResolver=resourceResolver;

}

Location: CustomFont.java

Content: 

/** 

 * Returns the number of additional encodings this single-byte font maintains.

 * @return the number of additional encodings

 */

public int getAdditionalEncodingCount(){

  if (hasAdditionalEncodings()) {

    return this.additionalEncodings.size();

  }

 else {

    return 0;

  }

}

Location: CustomFont.java

Content: 

/** 

 * Returns an additional encoding.

 * @param index the index of the additional encoding

 * @return the additional encoding

 * @throws IndexOutOfBoundsException if the index is out of bounds

 */

public SimpleSingleByteEncoding getAdditionalEncoding(int index) throws IndexOutOfBoundsException {

  if (hasAdditionalEncodings()) {

    return this.additionalEncodings.get(index);

  }

 else {

    throw new IndexOutOfBoundsException("No additional encodings available");

  }

}

Location: CustomFont.java

Content: 

/** 

 * Returns the character map for this font. It maps all available Unicode characters to their glyph indices inside the font.

 * @return the character map

 */

public CMapSegment[] getCMap(){

  return cmap.toArray(new CMapSegment[cmap.size()]);

}

Location: CustomFont.java

Content: 

/** 

 * Returns the embedding mode for this font.

 * @return embedding mode

 */

public EmbeddingMode getEmbeddingMode(){

  return embeddingMode;

}

Location: CustomFont.java

Content: 

/** 

 * Returns an URI representing an embeddable font file.

 * @return URI to an embeddable font file or null if not available.

 */

public URI getEmbedFileURI(){

  return embedFileURI;

}

Location: CustomFont.java

Content: 

/** 

 * Returns the lookup name to an embeddable font file available as a resource. (todo) Remove this method, this should be done using a resource: URI.

 * @return the lookup name

 */

public String getEmbedResourceName(){

  return embedResourceName;

}

Location: CustomFont.java

Content: 

/** 

 * Returns font's subfamily name.

 * @return the font's subfamily name

 */

public String getFontSubName(){

  return fontSubName;

}

Location: CustomFont.java

Content: 

/** 

 * Returns an  {@link InputStream} representing an embeddable font file.

 * @return {@link InputStream} for an embeddable font file

 * @throws IOException if embedFileName is not null but Source is not found

 */

public InputStream getInputStream() throws IOException {

  return resourceResolver.getResource(embedFileURI);

}

Location: CustomFont.java

Content: 

/** 

 * Returns the width to be used when no width is available.

 * @return a character width

 */

public int getMissingWidth(){

  return missingWidth;

}

Location: CustomFont.java

Content: 

public boolean getSimulateStyle(){

  return this.simulateStyle;

}

Location: CustomFont.java

Content: 

/** 

 * Returns the font family name stripped of whitespace.

 * @return the stripped font family

 * @see FontUtil#stripWhiteSpace(String)

 */

public String getStrippedFontName(){

  return FontUtil.stripWhiteSpace(getFontName());

}

Location: CustomFont.java

Content: 

/** 

 * Indicates whether the encoding has additional encodings besides the primary encoding.

 * @return true if there are additional encodings.

 */

public boolean hasAdditionalEncodings(){

  return (this.additionalEncodings != null) && (this.additionalEncodings.size() > 0);

}

Location: CustomFont.java

Content: 

/** 

 * Used to determine if advanced typographic features are enabled. By default, this is false, but may be overridden by subclasses.

 * @return true if enabled.

 */

public boolean isAdvancedEnabled(){

  return useAdvanced;

}

Location: CustomFont.java

Content: 

/** 

 * Used to determine if kerning is enabled.

 * @return True if kerning is enabled.

 */

public boolean isKerningEnabled(){

  return useKerning;

}

Location: CustomFont.java

Content: 

/** 

 * Adds a character to additional encodings

 * @param ch character to map

 */

protected char mapUnencodedChar(char ch){

  if (this.unencodedCharacters != null) {

    SingleByteFont.UnencodedCharacter unencoded=this.unencodedCharacters.get(ch);

    if (unencoded != null) {

      if (this.additionalEncodings == null) {

        this.additionalEncodings=new ArrayList<SimpleSingleByteEncoding>();

      }

      SimpleSingleByteEncoding encoding=null;

      char mappedStart=0;

      int additionalsCount=this.additionalEncodings.size();

      for (int i=0; i < additionalsCount; i++) {

        mappedStart+=256;

        encoding=getAdditionalEncoding(i);

        char alt=encoding.mapChar(ch);

        if (alt != 0) {

          return (char)(mappedStart + alt);

        }

      }

      if (encoding != null && encoding.isFull()) {

        encoding=null;

      }

      if (encoding == null) {

        encoding=new SimpleSingleByteEncoding(getFontName() + "EncodingSupp" + (additionalsCount + 1));

        this.additionalEncodings.add(encoding);

        mappedStart+=256;

      }

      return (char)(mappedStart + encoding.addCharacter(unencoded.getCharacter()));

    }

  }

  return 0;

}

Location: CustomFont.java

Content: 

/** 

 * {@inheritDoc} 

 */

public void putKerningEntry(Integer key,Map<Integer,Integer> value){

  if (kerning == null) {

    kerning=new HashMap<Integer,Map<Integer,Integer>>();

  }

  this.kerning.put(key,value);

}

Location: CustomFont.java

Content: 

/** 

 * Replaces the existing kerning map with a new one.

 * @param kerningMap the kerning map (the integers arecharacter codes)

 */

public void replaceKerningMap(Map<Integer,Map<Integer,Integer>> kerningMap){

  if (kerningMap == null) {

    this.kerning=Collections.emptyMap();

  }

 else {

    this.kerning=kerningMap;

  }

}

Location: CustomFont.java

Content: 

/** 

 * {@inheritDoc}

 */

public void setAdvancedEnabled(boolean enabled){

  this.useAdvanced=enabled;

}

Location: CustomFont.java

Content: 

/** 

 * {@inheritDoc}

 */

public void setAscender(int ascender){

  this.ascender=ascender;

}

Location: CustomFont.java

Content: 

/** 

 * {@inheritDoc}

 */

public void setCapHeight(int capHeight){

  this.capHeight=capHeight;

}

Location: CustomFont.java

Content: 

/** 

 * Sets the character map for this font. It maps all available Unicode characters to their glyph indices inside the font.

 * @param cmap the character map

 */

public void setCMap(CMapSegment[] cmap){

  this.cmap.clear();

  Collections.addAll(this.cmap,cmap);

}

Location: CustomFont.java

Content: 

/** 

 * {@inheritDoc}

 */

public void setDescender(int descender){

  this.descender=descender;

}

Location: CustomFont.java

Content: 

/** 

 * {@inheritDoc}

 */

public void setEmbeddingMode(EmbeddingMode embeddingMode){

  this.embeddingMode=embeddingMode;

}

Location: CustomFont.java

Content: 

/** 

 * {@inheritDoc}

 */

public void setEmbedResourceName(String name){

  this.embedResourceName=name;

}

Location: CustomFont.java

Content: 

/** 

 * {@inheritDoc}

 */

public void setEmbedURI(URI path){

  this.embedFileURI=path;

}

Location: CustomFont.java

Content: 

/** 

 * {@inheritDoc} 

 */

public void setFamilyNames(Set<String> names){

  this.familyNames=new HashSet<String>(names);

}

Location: CustomFont.java

Content: 

/** 

 * {@inheritDoc}

 */

public void setFirstChar(int index){

  this.firstChar=index;

}

Location: CustomFont.java

Content: 

/** 

 * {@inheritDoc}

 */

public void setFontBBox(int[] bbox){

  this.fontBBox=bbox;

}

Location: CustomFont.java

Content: 

/** 

 * Sets the font's subfamily name.

 * @param subFamilyName the subfamily name of the font

 */

public void setFontSubFamilyName(String subFamilyName){

  this.fontSubName=subFamilyName;

}

Location: CustomFont.java

Content: 

/** 

 * {@inheritDoc}

 */

public void setFontType(FontType fontType){

  this.fontType=fontType;

}

Location: CustomFont.java

Content: 

/** 

 * {@inheritDoc} 

 */

public void setFontURI(URI uri){

  this.fontFileURI=uri;

}

Location: CustomFont.java

Content: 

/** 

 * {@inheritDoc}

 */

public void setItalicAngle(int italicAngle){

  this.italicAngle=italicAngle;

}

Location: CustomFont.java

Content: 

/** 

 * {@inheritDoc}

 */

public void setKerningEnabled(boolean enabled){

  this.useKerning=enabled;

}

Location: CustomFont.java

Content: 

/** 

 * {@inheritDoc}

 */

public void setLastChar(int index){

  this.lastChar=index;

}

Location: CustomFont.java

Content: 

/** 

 * {@inheritDoc}

 */

public void setMissingWidth(int width){

  this.missingWidth=width;

}

Location: CustomFont.java

Content: 

/** 

 * {@inheritDoc}

 */

public void setSimulateStyle(boolean enabled){

  this.simulateStyle=enabled;

}

Location: CustomFont.java

Content: 

/** 

 * {@inheritDoc}

 */

public void setStemV(int stemV){

  this.stemV=stemV;

}

Location: CustomFont.java

Content: 

public void setStrikeoutPosition(int strikeoutPosition){

  this.strikeoutPosition=strikeoutPosition;

}

Location: CustomFont.java

Content: 

public void setStrikeoutThickness(int strikeoutThickness){

  this.strikeoutThickness=strikeoutThickness;

}

Location: CustomFont.java

Content: 

public void setUnderlinePosition(int underlinePosition){

  this.underlinePosition=underlinePosition;

}

Location: CustomFont.java

Content: 

public void setUnderlineThickness(int underlineThickness){

  this.underlineThickness=underlineThickness;

}

Location: CustomFont.java

Content: 

/** 

 * Sets the font weight. Valid values are 100, 200...800, 900.

 * @param weight the font weight

 */

public void setWeight(int weight){

  weight=(weight / 100) * 100;

  weight=Math.max(100,weight);

  weight=Math.min(900,weight);

  this.weight=weight;

}

Location: CustomFont.java

Content: 

/** 

 * Returns the XHeight value of the font.

 * @param xHeight the XHeight value

 */

public void setXHeight(int xHeight){

  this.xHeight=xHeight;

}

