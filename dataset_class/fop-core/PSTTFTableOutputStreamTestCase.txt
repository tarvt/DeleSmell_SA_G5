Location: PSTTFTableOutputStreamTestCase.java

Content: 

/** 

 * Test streamTable() - several paths to test (2. and 3. test corner cases): 1) that a table of length < PSTTFGenerator.MAX_BUFFER_SIZE invokes the correct methods in PSTTFGenerator. 2) that a table of length > PSTTFGenerator.MAX_BUFFER_SIZE and length == n * PSTTFGenerator.MAX_BUFFER_SIZE is split up and the methods in PSTTFGenerator are invoked. 3) that a table of length > PSTTFGenerator.MAX_BUFFER_SIZE but length != n * PSTTFGenerator.MAX_BUFFER_SIZE is split up and the methods in PSTTFGenerator are invoked.

 * @throws IOException file write error.

 */

@Test public void testStreamTable() throws IOException {

  byte[] byteArray=new byte[PSTTFGenerator.MAX_BUFFER_SIZE * 3];

  tableOut.streamTable(byteArray,0,10);

  InOrder inOrder=inOrder(mockGen);

  inOrder.verify(mockGen).startString();

  inOrder.verify(mockGen).streamBytes(byteArray,0,10);

  inOrder.verify(mockGen).endString();

  setUp();

  tableOut.streamTable(byteArray,0,byteArray.length);

  inOrder=inOrder(mockGen);

  for (int i=0; i < 3; i++) {

    int offset=PSTTFGenerator.MAX_BUFFER_SIZE * i;

    inOrder.verify(mockGen).startString();

    inOrder.verify(mockGen).streamBytes(byteArray,offset,PSTTFGenerator.MAX_BUFFER_SIZE);

    inOrder.verify(mockGen).endString();

  }

  setUp();

  tableOut.streamTable(byteArray,0,PSTTFGenerator.MAX_BUFFER_SIZE + 1);

  inOrder=inOrder(mockGen);

  inOrder.verify(mockGen).startString();

  inOrder.verify(mockGen).streamBytes(byteArray,0,PSTTFGenerator.MAX_BUFFER_SIZE);

  inOrder.verify(mockGen).endString();

  inOrder.verify(mockGen).startString();

  inOrder.verify(mockGen).streamBytes(byteArray,PSTTFGenerator.MAX_BUFFER_SIZE,1);

  inOrder.verify(mockGen).endString();

}

