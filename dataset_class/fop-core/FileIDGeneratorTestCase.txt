Location: FileIDGeneratorTestCase.java

Content: 

public FileIDGeneratorTestCase(TestGetter initializer){

  this.initializer=initializer;

}

Location: FileIDGeneratorTestCase.java

Content: 

private void fileIDMustBeValid(byte[] fileID){

  assertNotNull(fileID);

  assertEquals(16,fileID.length);

}

Location: FileIDGeneratorTestCase.java

Content: 

@Parameters public static Collection<TestGetter[]> getParameters(){

  ArrayList<TestGetter[]> params=new ArrayList<TestGetter[]>();

  params.add(new TestGetter[]{new RandomFileIDGeneratorTest()});

  params.add(new TestGetter[]{new DigestFileIDGeneratorTest()});

  return params;

}

Location: FileIDGeneratorTestCase.java

Content: 

/** 

 * Tests that the getOriginalFileID method generates valid output. 

 */

@Test public void testOriginal(){

  byte[] fileID=fileIDGenerator.getOriginalFileID();

  fileIDMustBeValid(fileID);

}

Location: FileIDGeneratorTestCase.java

Content: 

/** 

 * Tests that multiple calls to getOriginalFileID method always return the same value. 

 */

@Test public void testOriginalMultipleCalls(){

  byte[] fileID1=fileIDGenerator.getUpdatedFileID();

  byte[] fileID2=fileIDGenerator.getUpdatedFileID();

  assertTrue(Arrays.equals(fileID1,fileID2));

}

Location: FileIDGeneratorTestCase.java

Content: 

/** 

 * Tests that the getUpdatedFileID method generates valid output. 

 */

@Test public void testUpdated(){

  byte[] fileID=fileIDGenerator.getUpdatedFileID();

  fileIDMustBeValid(fileID);

}

Location: FileIDGeneratorTestCase.java

Content: 

/** 

 * Tests that getUpdatedFileID returns the same value as getOriginalFileID. 

 */

@Test public void testUpdateEqualsOriginal(){

  byte[] originalFileID=fileIDGenerator.getOriginalFileID();

  byte[] updatedFileID=fileIDGenerator.getUpdatedFileID();

  assertTrue(Arrays.equals(originalFileID,updatedFileID));

}

