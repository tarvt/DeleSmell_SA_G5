Location: TableFObj.java

Content: 

/** 

 * Creates a BorderSpecification from the border set on the given side. If no border is set, a BorderSpecification with border-style none is created.

 * @param side one of CommonBorderPaddingBackground.BEFORE|AFTER|START|END

 */

private void createBorder(int side){

  BorderSpecification borderSpec=new BorderSpecification(getCommonBorderPaddingBackground().getBorderInfo(side),getNameId());

switch (side) {

case CommonBorderPaddingBackground.BEFORE:

    borderBefore=new ConditionalBorder(borderSpec,collapsingBorderModel);

  break;

case CommonBorderPaddingBackground.AFTER:

borderAfter=new ConditionalBorder(borderSpec,collapsingBorderModel);

break;

case CommonBorderPaddingBackground.START:

borderStart=borderSpec;

break;

case CommonBorderPaddingBackground.END:

borderEnd=borderSpec;

break;

default :

assert false;

}

}

Location: TableFObj.java

Content: 

/** 

 * Return the value for the "border-precedence" property for the given side.

 * @param side  the side for which to return the border precedence

 * @return the "border-precedence" value for the given side

 */

public Numeric getBorderPrecedence(int side){

switch (side) {

case CommonBorderPaddingBackground.BEFORE:

    return borderBeforePrecedence;

case CommonBorderPaddingBackground.AFTER:

  return borderAfterPrecedence;

case CommonBorderPaddingBackground.START:

return borderStartPrecedence;

case CommonBorderPaddingBackground.END:

return borderEndPrecedence;

default :

return null;

}

}

Location: TableFObj.java

Content: 

/** 

 * Prepares the borders of this element if the collapsing-border model is in use. Conflict resolution with parent elements is done where applicable.

 */

protected void setCollapsedBorders(){

  createBorder(CommonBorderPaddingBackground.START);

  createBorder(CommonBorderPaddingBackground.END);

  createBorder(CommonBorderPaddingBackground.BEFORE);

  createBorder(CommonBorderPaddingBackground.AFTER);

}

Location: TableFObj.java

Content: 

/** 

 * Create a TableFObj instance that is a child of the given  {@link FONode}

 * @param parent the parent {@link FONode}

 */

public TableFObj(FONode parent){

  super(parent);

}

