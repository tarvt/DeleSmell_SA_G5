Location: PDFProfile.java

Content: 

private String format(String pattern,Object arg){

  return format(pattern,new Object[]{arg});

}

Location: PDFProfile.java

Content: 

/** 

 * @return true if annotations are allowed 

 */

public boolean isAnnotationAllowed(){

  return !isPDFXActive();

}

Location: PDFProfile.java

Content: 

/** 

 * @return true if all fonts need to be embedded. 

 */

public boolean isFontEmbeddingRequired(){

  return isPDFAActive() || isPDFXActive() || getPDFUAMode().isEnabled();

}

Location: PDFProfile.java

Content: 

/** 

 * @return true if the ID entry must be present in the trailer. 

 */

public boolean isIDEntryRequired(){

  return isPDFAActive() || isPDFXActive();

}

Location: PDFProfile.java

Content: 

/** 

 * @return true if the ModDate Info entry must be present. 

 */

public boolean isModDateRequired(){

  return getPDFXMode() != PDFXMode.DISABLED;

}

Location: PDFProfile.java

Content: 

/** 

 * @return true if any PDF/A mode is active 

 */

public boolean isPDFAActive(){

  return getPDFAMode() != PDFAMode.DISABLED;

}

Location: PDFProfile.java

Content: 

public boolean isPDFVTActive(){

  return getPDFVTMode() != PDFVTMode.DISABLED;

}

Location: PDFProfile.java

Content: 

/** 

 * @return true if any PDF/X mode is active 

 */

public boolean isPDFXActive(){

  return getPDFXMode() != PDFXMode.DISABLED;

}

Location: PDFProfile.java

Content: 

/** 

 * @return true if the Trapped Info entry must be present. 

 */

public boolean isTrappedEntryRequired(){

  return getPDFXMode() != PDFXMode.DISABLED;

}

Location: PDFProfile.java

Content: 

/** 

 * Main constructor

 * @param doc the PDF document

 */

public PDFProfile(PDFDocument doc){

  this.doc=doc;

}

Location: PDFProfile.java

Content: 

/** 

 * Sets the PDF/A mode

 * @param mode the PDF/A mode

 */

public void setPDFAMode(PDFAMode mode){

  if (mode == null) {

    mode=PDFAMode.DISABLED;

  }

  this.pdfAMode=mode;

  validateProfileCombination();

}

Location: PDFProfile.java

Content: 

public void setPDFUAMode(PDFUAMode mode){

  if (mode == null) {

    mode=PDFUAMode.DISABLED;

  }

  this.pdfUAMode=mode;

  validateProfileCombination();

}

Location: PDFProfile.java

Content: 

/** 

 * Sets the PDF/X mode

 * @param mode the PDF/X mode

 */

public void setPDFVTMode(PDFVTMode mode){

  if (mode == null) {

    mode=PDFVTMode.DISABLED;

  }

  this.pdfVTMode=mode;

  validateProfileCombination();

}

Location: PDFProfile.java

Content: 

/** 

 * Sets the PDF/X mode

 * @param mode the PDF/X mode

 */

public void setPDFXMode(PDFXMode mode){

  if (mode == null) {

    mode=PDFXMode.DISABLED;

  }

  this.pdfXMode=mode;

  validateProfileCombination();

}

Location: PDFProfile.java

Content: 

/** 

 * Validates if the requested profile combination is compatible.

 */

protected void validateProfileCombination(){

  if (pdfAMode != PDFAMode.DISABLED) {

    if (pdfAMode == PDFAMode.PDFA_1B) {

      if (pdfXMode != PDFXMode.DISABLED && pdfXMode != PDFXMode.PDFX_3_2003 && pdfXMode != PDFXMode.PDFX_4) {

        throw new PDFConformanceException(pdfAMode + " and " + pdfXMode+ " are not compatible!");

      }

    }

  }

  if (pdfVTMode != PDFVTMode.DISABLED && pdfXMode != PDFXMode.PDFX_4) {

    throw new PDFConformanceException(pdfVTMode.name() + " requires " + PDFXMode.PDFX_4.getName()+ " enabled");

  }

}

Location: PDFProfile.java

Content: 

/** 

 * Checks if Actions are allowed. 

 */

public void verifyActionAllowed(){

  if (isPDFXActive()) {

    final String err="{0} does not allow Actions.";

    throw new PDFConformanceException(format(err,getPDFXMode()));

  }

}

Location: PDFProfile.java

Content: 

/** 

 * Checks if annotations are allowed. 

 */

public void verifyAnnotAllowed(){

  if (!isAnnotationAllowed()) {

    final String err="{0} does not allow annotations inside the printable area.";

    throw new PDFConformanceException(format(err,getPDFXMode()));

  }

}

Location: PDFProfile.java

Content: 

/** 

 * Checks if embedded files are allowed. 

 */

public void verifyEmbeddedFilesAllowed(){

  final String err="{0} does not allow embedded files.";

  if (isPDFAActive() && getPDFAMode().getPart() < 3) {

    throw new PDFConformanceException(format(err,getPDFAMode()));

  }

  if (isPDFXActive()) {

    throw new PDFConformanceException(format(err,getPDFXMode()));

  }

}

Location: PDFProfile.java

Content: 

/** 

 * Checks if encryption is allowed. 

 */

public void verifyEncryptionAllowed(){

  final String err="{0} doesn't allow encrypted PDFs";

  if (isPDFAActive()) {

    throw new PDFConformanceException(format(err,getPDFAMode()));

  }

  if (isPDFXActive()) {

    throw new PDFConformanceException(format(err,getPDFXMode()));

  }

}

Location: PDFProfile.java

Content: 

/** 

 * Checks if the right PDF version is set. 

 */

public void verifyPDFVersion(){

  String err="PDF version must be 1.4 for {0}";

  if (getPDFAMode().isPart1() && !Version.V1_4.equals(getDocument().getPDFVersion())) {

    throw new PDFConformanceException(format(err,getPDFAMode()));

  }

  if (getPDFXMode() == PDFXMode.PDFX_3_2003 && !Version.V1_4.equals(getDocument().getPDFVersion())) {

    throw new PDFConformanceException(format(err,getPDFXMode()));

  }

}

Location: PDFProfile.java

Content: 

/** 

 * Checks if PostScript XObjects are allowed. 

 */

public void verifyPSXObjectsAllowed(){

  final String err="PostScript XObjects are prohibited when {0}" + " is active. Convert EPS graphics to another format.";

  if (isPDFAActive()) {

    throw new PDFConformanceException(format(err,getPDFAMode()));

  }

  if (isPDFXActive()) {

    throw new PDFConformanceException(format(err,getPDFXMode()));

  }

}

Location: PDFProfile.java

Content: 

/** 

 * Checks a few things required for tagged PDF.

 */

public void verifyTaggedPDF(){

  if (getPDFAMode().isLevelA() || getPDFUAMode().isEnabled()) {

    final String err="{0} requires the {1} dictionary entry to be set";

    String mode=getPDFAMode().toString();

    if (getPDFUAMode().isEnabled()) {

      mode=getPDFUAMode().toString();

    }

    PDFDictionary markInfo=getDocument().getRoot().getMarkInfo();

    if (markInfo == null) {

      throw new PDFConformanceException(format("{0} requires that the accessibility option in the configuration file be enabled",mode));

    }

    if (!Boolean.TRUE.equals(markInfo.get("Marked"))) {

      throw new PDFConformanceException(format(err,new Object[]{mode,"Marked"}));

    }

    if (getDocument().getRoot().getStructTreeRoot() == null) {

      throw new PDFConformanceException(format(err,new Object[]{mode,"StructTreeRoot"}));

    }

    if (getDocument().getRoot().getLanguage() == null) {

      throw new PDFConformanceException(format(err,new Object[]{mode,"Lang"}));

    }

  }

}

Location: PDFProfile.java

Content: 

/** 

 * Checks if a title may be absent. 

 */

public void verifyTitleAbsent(){

  final String err="{0} requires the title to be set.";

  if (getPDFUAMode().isEnabled()) {

    throw new PDFConformanceException(format(err,getPDFUAMode()));

  }

  if (isPDFXActive()) {

    throw new PDFConformanceException(format(err,getPDFXMode()));

  }

}

Location: PDFProfile.java

Content: 

/** 

 * Checks if the use of transparency is allowed.

 * @param context Context information for the user to identify the problem spot

 */

public void verifyTransparencyAllowed(String context){

  Object profile=isTransparencyAllowed();

  if (profile != null) {

    throw new TransparencyDisallowedException(profile,context);

  }

}

