Location: FlateFilter.java

Content: 

/** 

 * Get the colors for this filter.

 * @return the colors for this filter

 */

public int getColors(){

  return colors;

}

Location: FlateFilter.java

Content: 

/** 

 * Get the number of columns for this filter.

 * @return the number of columns

 */

public int getColumns(){

  return columns;

}

Location: FlateFilter.java

Content: 

/** 

 * Get the predictor for this filter.

 * @return the predictor used for this filter

 */

public int getPredictor(){

  return predictor;

}

Location: FlateFilter.java

Content: 

/** 

 * Set the number of bits per component.

 * @param bits the number of bits per component

 * @throws PDFFilterException if predictor is not PREDICTION_NONE

 */

public void setBitsPerComponent(int bits) throws PDFFilterException {

  if (predictor != PREDICTION_NONE) {

    bitsPerComponent=bits;

  }

 else {

    throw new PDFFilterException("Prediction must not be PREDICTION_NONE in order" + " to set bitsPerComponent");

  }

}

Location: FlateFilter.java

Content: 

/** 

 * Set the colors for this filter.

 * @param colors the colors to use

 * @throws PDFFilterException if predictor is not PREDICTION_NONE

 */

public void setColors(int colors) throws PDFFilterException {

  if (predictor != PREDICTION_NONE) {

    this.colors=colors;

  }

 else {

    throw new PDFFilterException("Prediction must not be PREDICTION_NONE in" + " order to set Colors");

  }

}

Location: FlateFilter.java

Content: 

/** 

 * Set the number of columns for this filter.

 * @param columns the number of columns to use for the filter

 * @throws PDFFilterException if predictor is not PREDICTION_NONE

 */

public void setColumns(int columns) throws PDFFilterException {

  if (predictor != PREDICTION_NONE) {

    this.columns=columns;

  }

 else {

    throw new PDFFilterException("Prediction must not be PREDICTION_NONE in" + " order to set Columns");

  }

}

Location: FlateFilter.java

Content: 

/** 

 * Set the predictor for this filter.

 * @param predictor the predictor to use

 * @throws PDFFilterException if there is an error with the predictor

 */

public void setPredictor(int predictor) throws PDFFilterException {

  this.predictor=predictor;

}

