Location: DelegatingContentHandler.java

Content: 

/** 

 * {@inheritDoc} 

 */

public void comment(char[] ch,int start,int length) throws SAXException {

  if (lexicalHandler != null) {

    lexicalHandler.comment(ch,start,length);

  }

}

Location: DelegatingContentHandler.java

Content: 

/** 

 * Main constructor.

 */

public DelegatingContentHandler(){

}

Location: DelegatingContentHandler.java

Content: 

/** 

 * Convenience constructor. If the given handler also implements any of the EntityResolver, DTDHandler, LexicalHandler or ErrorHandler interfaces, these are set automatically.

 * @param handler the content handler to delegate to

 */

public DelegatingContentHandler(ContentHandler handler){

  setDelegateContentHandler(handler);

  if (handler instanceof EntityResolver) {

    setDelegateEntityResolver((EntityResolver)handler);

  }

  if (handler instanceof DTDHandler) {

    setDelegateDTDHandler((DTDHandler)handler);

  }

  if (handler instanceof LexicalHandler) {

    setDelegateLexicalHandler((LexicalHandler)handler);

  }

  if (handler instanceof ErrorHandler) {

    setDelegateErrorHandler((ErrorHandler)handler);

  }

}

Location: DelegatingContentHandler.java

Content: 

/** 

 * {@inheritDoc} 

 */

public void endCDATA() throws SAXException {

  if (lexicalHandler != null) {

    lexicalHandler.endCDATA();

  }

}

Location: DelegatingContentHandler.java

Content: 

/** 

 * {@inheritDoc} 

 */

public void endDTD() throws SAXException {

  if (lexicalHandler != null) {

    lexicalHandler.endDTD();

  }

}

Location: DelegatingContentHandler.java

Content: 

/** 

 * {@inheritDoc} 

 */

public void endElement(String uri,String localName,String qName) throws SAXException {

  delegate.endElement(uri,localName,qName);

}

Location: DelegatingContentHandler.java

Content: 

/** 

 * {@inheritDoc} 

 */

public void endEntity(String name) throws SAXException {

  if (lexicalHandler != null) {

    lexicalHandler.endEntity(name);

  }

}

Location: DelegatingContentHandler.java

Content: 

/** 

 * {@inheritDoc} 

 */

public void error(SAXParseException exception) throws SAXException {

  if (errorHandler != null) {

    errorHandler.error(exception);

  }

}

Location: DelegatingContentHandler.java

Content: 

/** 

 * {@inheritDoc} 

 */

public void fatalError(SAXParseException exception) throws SAXException {

  if (errorHandler != null) {

    errorHandler.fatalError(exception);

  }

}

Location: DelegatingContentHandler.java

Content: 

/** 

 * @return the delegate that all ContentHandler events are forwarded to

 */

public ContentHandler getDelegateContentHandler(){

  return this.delegate;

}

Location: DelegatingContentHandler.java

Content: 

/** 

 * {@inheritDoc} 

 */

public void ignorableWhitespace(char[] ch,int start,int length) throws SAXException {

  delegate.ignorableWhitespace(ch,start,length);

}

Location: DelegatingContentHandler.java

Content: 

/** 

 * {@inheritDoc} 

 */

public void notationDecl(String name,String publicId,String systemId) throws SAXException {

  if (dtdHandler != null) {

    dtdHandler.notationDecl(name,publicId,systemId);

  }

}

Location: DelegatingContentHandler.java

Content: 

/** 

 * {@inheritDoc} 

 */

public void processingInstruction(String target,String data) throws SAXException {

  delegate.processingInstruction(target,data);

}

Location: DelegatingContentHandler.java

Content: 

/** 

 * {@inheritDoc} 

 */

public InputSource resolveEntity(String publicId,String systemId) throws SAXException, IOException {

  if (entityResolver != null) {

    return entityResolver.resolveEntity(publicId,systemId);

  }

 else {

    return null;

  }

}

Location: DelegatingContentHandler.java

Content: 

/** 

 * Sets the delegate ContentHandler that all events are forwarded to.

 * @param handler the delegate instance

 */

public void setDelegateContentHandler(ContentHandler handler){

  this.delegate=handler;

}

Location: DelegatingContentHandler.java

Content: 

/** 

 * Sets the delegate DTDHandler.

 * @param handler the delegate instance

 */

public void setDelegateDTDHandler(DTDHandler handler){

  this.dtdHandler=handler;

}

Location: DelegatingContentHandler.java

Content: 

/** 

 * Sets the delegate EntityResolver.

 * @param resolver the delegate instance

 */

public void setDelegateEntityResolver(EntityResolver resolver){

  this.entityResolver=resolver;

}

Location: DelegatingContentHandler.java

Content: 

/** 

 * Sets the delegate ErrorHandler.

 * @param handler the delegate instance

 */

public void setDelegateErrorHandler(ErrorHandler handler){

  this.errorHandler=handler;

}

Location: DelegatingContentHandler.java

Content: 

/** 

 * Sets the delegate LexicalHandler.

 * @param handler the delegate instance

 */

public void setDelegateLexicalHandler(LexicalHandler handler){

  this.lexicalHandler=handler;

}

Location: DelegatingContentHandler.java

Content: 

/** 

 * {@inheritDoc} 

 */

public void setDocumentLocator(Locator locator){

  delegate.setDocumentLocator(locator);

}

Location: DelegatingContentHandler.java

Content: 

/** 

 * {@inheritDoc} 

 */

public void skippedEntity(String name) throws SAXException {

  delegate.skippedEntity(name);

}

Location: DelegatingContentHandler.java

Content: 

/** 

 * {@inheritDoc} 

 */

public void startCDATA() throws SAXException {

  if (lexicalHandler != null) {

    lexicalHandler.startCDATA();

  }

}

Location: DelegatingContentHandler.java

Content: 

/** 

 * {@inheritDoc} 

 */

public void startDocument() throws SAXException {

  delegate.startDocument();

}

Location: DelegatingContentHandler.java

Content: 

/** 

 * {@inheritDoc} 

 */

public void startDTD(String name,String publicId,String systemId) throws SAXException {

  if (lexicalHandler != null) {

    lexicalHandler.startDTD(name,publicId,systemId);

  }

}

Location: DelegatingContentHandler.java

Content: 

/** 

 * {@inheritDoc} 

 */

public void startEntity(String name) throws SAXException {

  if (lexicalHandler != null) {

    lexicalHandler.startEntity(name);

  }

}

Location: DelegatingContentHandler.java

Content: 

/** 

 * {@inheritDoc} 

 */

public void unparsedEntityDecl(String name,String publicId,String systemId,String notationName) throws SAXException {

  if (dtdHandler != null) {

    dtdHandler.unparsedEntityDecl(name,publicId,systemId,notationName);

  }

}

Location: DelegatingContentHandler.java

Content: 

/** 

 * {@inheritDoc} 

 */

public void warning(SAXParseException exception) throws SAXException {

  if (errorHandler != null) {

    errorHandler.warning(exception);

  }

}

