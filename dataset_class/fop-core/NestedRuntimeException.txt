Location: NestedRuntimeException.java

Content: 

/** 

 * Return the detail message, including the message from the nested exception if there is one.

 * @return The detail message.

 */

public String getMessage(){

  if (underlyingException == null) {

    return super.getMessage();

  }

 else {

    return super.getMessage() + "; nested exception is " + underlyingException.getClass().getName();

  }

}

Location: NestedRuntimeException.java

Content: 

/** 

 * Gets the original triggering exception

 * @return The original exception as a throwable.

 */

public Throwable getUnderlyingException(){

  return underlyingException;

}

Location: NestedRuntimeException.java

Content: 

/** 

 * Construct a <code>NestedRuntimeException</code> with the specified detail message.

 * @param msg The detail message.

 */

public NestedRuntimeException(String msg){

  super(msg);

}

Location: NestedRuntimeException.java

Content: 

/** 

 * Construct a <code>NestedRuntimeException</code> with the specified detail message and nested exception.

 * @param msg The detail message.

 * @param t The nested exception.

 */

public NestedRuntimeException(String msg,Throwable t){

  super(msg);

  underlyingException=t;

}

Location: NestedRuntimeException.java

Content: 

/** 

 * Print the composite message and the embedded stack trace to the specified stream.

 * @param ps the print stream

 */

public void printStackTrace(PrintStream ps){

  if (underlyingException == null) {

    super.printStackTrace(ps);

  }

 else {

    ps.println(this);

    underlyingException.printStackTrace(ps);

  }

}

Location: NestedRuntimeException.java

Content: 

/** 

 * Print the composite message and the embedded stack trace to the specified writer.

 * @param pw the print writer

 */

public void printStackTrace(PrintWriter pw){

  if (underlyingException == null) {

    super.printStackTrace(pw);

  }

 else {

    pw.println(this);

    underlyingException.printStackTrace(pw);

  }

}

