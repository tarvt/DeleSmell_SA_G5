Location: GradientTestCase.java

Content: 

private Color[] colors(Color... colors){

  return colors;

}

Location: GradientTestCase.java

Content: 

@Test public void fourColorRadialGradientNonZeroFirstStop(){

  RadialGradientPaint gradient=new RadialGradientPaint(100,200,50,110,220,fractions(0.2f,0.5f,0.7f,1f),colors(Color.BLUE,Color.RED,Color.GREEN,Color.WHITE));

  Pattern pattern=GradientMaker.makeRadialGradient(gradient,new AffineTransform(),new AffineTransform());

  ShadingChecker shadingChecker=new PatternChecker(pattern).shading().coords(110.0,220.0,0.0,100.0,200.0,50.0);

  FunctionChecker functionChecker=shadingChecker.function().functionType(3).bounds(0.2f,0.5f,0.7f).encode(0.0,1.0,0.0,1.0,0.0,1.0,0.0,1.0).functions(4);

  functionChecker.function(0).functionType(2).cZero(0f,0f,1f).cOne(0f,0f,1f);

  functionChecker.function(1).functionType(2).cZero(0f,0f,1f).cOne(1f,0f,0f);

  functionChecker.function(2).functionType(2).cZero(1f,0f,0f).cOne(0f,1f,0f);

  functionChecker.function(3).functionType(2).cZero(0f,1f,0f).cOne(1f,1f,1f);

}

Location: GradientTestCase.java

Content: 

@Test public void fourColorRadialGradientNonZeroLastStopFocalOut(){

  RadialGradientPaint gradient=new RadialGradientPaint(0,0,100,100,100,fractions(0f,0.3f,0.6f,0.9f),colors(Color.WHITE,Color.RED,Color.GREEN,Color.BLUE));

  Pattern pattern=GradientMaker.makeRadialGradient(gradient,new AffineTransform(),new AffineTransform());

  ShadingChecker shadingChecker=new PatternChecker(pattern).shading().coords(70.7036,70.7036,0.0,0.0,0.0,100.0);

  FunctionChecker functionChecker=shadingChecker.function().functionType(3).bounds(0.3f,0.6f,0.9f).encode(0.0,1.0,0.0,1.0,0.0,1.0,0.0,1.0).functions(4);

  functionChecker.function(0).functionType(2).cZero(1f,1f,1f).cOne(1f,0f,0f);

  functionChecker.function(1).functionType(2).cZero(1f,0f,0f).cOne(0f,1f,0f);

  functionChecker.function(2).functionType(2).cZero(0f,1f,0f).cOne(0f,0f,1f);

  functionChecker.function(3).functionType(2).cZero(0f,0f,1f).cOne(0f,0f,1f);

}

Location: GradientTestCase.java

Content: 

private float[] fractions(float... fractions){

  return fractions;

}

Location: GradientTestCase.java

Content: 

@Test public void simpleLinearGradient(){

  LinearGradientPaint gradient=new LinearGradientPaint(0f,0f,100f,100f,fractions(0f,1f),colors(Color.BLUE,Color.RED));

  Pattern pattern=GradientMaker.makeLinearGradient(gradient,AffineTransform.getTranslateInstance(10.0,20.0),AffineTransform.getScaleInstance(100.0,1000.0));

  PatternChecker patternChecker=new PatternChecker(pattern).type(2).matrix(100.0,0.0,0.0,1000.0,10.0,20.0);

  ShadingChecker shadingChecker=patternChecker.shading().shadingType(2).coords(0.0,0.0,100.0,100.0).extend(true,true);

  FunctionChecker functionChecker=shadingChecker.function().functionType(3).domain(0.0,1.0).bounds().encode(0.0,1.0).functions(1);

  functionChecker.function(0).functionType(2).domain(0.0,1.0).cZero(0f,0f,1f).cOne(1f,0f,0f).functions(0);

}

Location: GradientTestCase.java

Content: 

@Test public void simpleRadialGradient(){

  RadialGradientPaint gradient=new RadialGradientPaint(100,200,50,fractions(0f,1f),colors(Color.BLUE,Color.RED));

  Pattern pattern=GradientMaker.makeRadialGradient(gradient,new AffineTransform(),new AffineTransform());

  PatternChecker patternChecker=new PatternChecker(pattern).type(2);

  ShadingChecker shadingChecker=patternChecker.shading().shadingType(3).coords(100.0,200.0,0.0,100.0,200.0,50.0).extend(true,true);

  FunctionChecker functionChecker=shadingChecker.function().functionType(3).domain(0.0,1.0).bounds().encode(0.0,1.0).functions(1);

  functionChecker.function(0).functionType(2).domain(0.0,1.0).cZero(0f,0f,1f).cOne(1f,0f,0f).functions(0);

}

Location: GradientTestCase.java

Content: 

private void testGradientRendering(MultipleGradientPaint gradient,String expectedResourceName) throws IOException {

  ByteArrayOutputStream out=new ByteArrayOutputStream();

  PSSVGGraphics2D svgGraphics2D=new PSSVGGraphics2D(false,new PSGenerator(out));

  svgGraphics2D.setGraphicContext(new GraphicContext());

  svgGraphics2D.translate(100,100);

  svgGraphics2D.applyPaint(gradient,true);

  String expected=IOUtils.toString(getClass().getResourceAsStream(expectedResourceName));

  assertEquals(expected.replace("\r",""),out.toString());

}

Location: GradientTestCase.java

Content: 

@Test public void testLinearGradient() throws IOException {

  float[] fractions={0f,1f};

  Color[] colors={new Color(255,255,0),new Color(255,0,0)};

  LinearGradientPaint gradient=new LinearGradientPaint(115f,285f,15f,15f,fractions,colors);

  testGradientRendering(gradient,"expected-linear-gradient.ps");

}

Location: GradientTestCase.java

Content: 

@Test public void testMakeBounds(){

  RadialGradientPaint gradient=new RadialGradientPaint(0,0,100,100,100,fractions(0f,1f,0.9f),colors(Color.WHITE,Color.RED,Color.GREEN));

  Pattern pattern=GradientMaker.makeRadialGradient(gradient,new AffineTransform(),new AffineTransform());

  ShadingChecker shadingChecker=new PatternChecker(pattern).shading().coords(70.7036,70.7036,0.0,0.0,0.0,100.0);

  shadingChecker.function().functionType(3).bounds(1f,0.9f).encode(0.0,1.0,0.0,1.0,0.0,1.0).functions(3);

}

Location: GradientTestCase.java

Content: 

@Test public void testRadialGradient() throws IOException {

  float cx=840f;

  float cy=180f;

  float r=16f;

  float[] fractions={0.2f,0.6f,0.8f,1.0f};

  Color[] colors={new Color(255,255,255),new Color(200,200,200),new Color(170,170,170),new Color(140,140,140)};

  RadialGradientPaint gradient=new RadialGradientPaint(cx,cy,r,fractions,colors);

  testGradientRendering(gradient,"expected-radial-gradient.ps");

}

Location: GradientTestCase.java

Content: 

@Test public void threeColorLinearGradient(){

  LinearGradientPaint gradient=new LinearGradientPaint(0f,10f,20f,30f,fractions(0f,0.5f,1f),colors(Color.BLUE,Color.RED,Color.GREEN));

  Pattern pattern=GradientMaker.makeLinearGradient(gradient,new AffineTransform(),new AffineTransform());

  PatternChecker patternChecker=new PatternChecker(pattern).type(2).matrix(1.0,0.0,0.0,1.0,0.0,0.0);

  ShadingChecker shadingChecker=patternChecker.shading().shadingType(2).coords(0.0,10.0,20.0,30.0).extend(true,true);

  FunctionChecker functionChecker=shadingChecker.function().functionType(3).domain(0.0,1.0).bounds(0.5f).encode(0.0,1.0,0.0,1.0).functions(2);

  functionChecker.function(0).functionType(2).domain(0.0,1.0).cZero(0f,0f,1f).cOne(1f,0f,0f).functions(0);

  functionChecker.function(1).functionType(2).domain(0.0,1.0).cZero(1f,0f,0f).cOne(0f,1f,0f).functions(0);

}

