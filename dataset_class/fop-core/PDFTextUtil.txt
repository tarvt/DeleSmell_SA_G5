Location: PDFTextUtil.java

Content: 

/** 

 * Writes a glyph adjust value to the "TJ-Buffer". <p>Assumes the following:</p> <ol> <li>if buffer is currently empty, then this is the start of the array object that encodes the adjustment and character values, and, therfore, a LEFT SQUARE BRACKET '[' must be prepended; and </li> <li>otherwise (the buffer is not empty), then the last element written to the buffer was a mapped character, and, therefore, a terminating '&gt;' or ')' followed by a space must be appended to the buffer prior to appending the adjustment value. </li> </ol>

 * @param adjust the glyph adjust value in thousands of text unit space.

 */

public void adjustGlyphTJ(double adjust){

  if (bufTJ == null) {

    bufTJ=new StringBuffer();

  }

  if (bufTJ.length() == 0) {

    bufTJ.append('[');

  }

 else {

    bufTJ.append(endText);

    bufTJ.append(' ');

  }

  PDFNumber.doubleOut(adjust,DEC - 4,bufTJ);

  bufTJ.append(' ');

  bufTJ.append(startText);

}

Location: PDFTextUtil.java

Content: 

private void checkInTextObject(){

  if (!inTextObject) {

    throw new IllegalStateException("Not in text object");

  }

}

Location: PDFTextUtil.java

Content: 

/** 

 * Returns the current encoding.

 * @return the current encoding

 */

public int getCurrentEncoding(){

  return this.encoding;

}

Location: PDFTextUtil.java

Content: 

/** 

 * Returns the current font in use.

 * @return the current font or null if no font is currently active.

 */

public Font getCurrentFont(){

  return this.font;

}

Location: PDFTextUtil.java

Content: 

/** 

 * {@inheritDoc} 

 */

protected void initValues(){

  super.initValues();

  this.font=null;

}

Location: PDFTextUtil.java

Content: 

protected boolean isCIDFont(String name){

  Typeface f=fontInfo.getFonts().get(name);

  return f.isCID();

}

Location: PDFTextUtil.java

Content: 

private boolean isInString(){

  return bufTJ != null && bufTJ.length() > 0;

}

Location: PDFTextUtil.java

Content: 

/** 

 * Indicates whether we are in a text object or not.

 * @return true if we are in a text object

 */

public boolean isInTextObject(){

  return inTextObject;

}

Location: PDFTextUtil.java

Content: 

/** 

 * Main constructor.

 */

public PDFTextUtil(){

}

Location: PDFTextUtil.java

Content: 

/** 

 * Main constructor.

 * @param fontInfo the font catalog

 */

public PDFTextUtil(FontInfo fontInfo){

  super();

  this.fontInfo=fontInfo;

}

Location: PDFTextUtil.java

Content: 

/** 

 * Sets the current encoding.

 * @param encoding the new encoding

 */

public void setCurrentEncoding(int encoding){

  this.encoding=encoding;

}

Location: PDFTextUtil.java

Content: 

/** 

 * Sets the current font.

 * @param f the new font to use

 */

public void setCurrentFont(Font f){

  this.font=f;

}

Location: PDFTextUtil.java

Content: 

/** 

 * Sets the text rendering mode.

 * @param fill true if the text should be filled

 * @param stroke true if the text should be stroked

 * @param addToClip true if the path should be added for clipping

 */

public void setTextRenderingMode(boolean fill,boolean stroke,boolean addToClip){

  int mode;

  if (fill) {

    mode=(stroke ? 2 : 0);

  }

 else {

    mode=(stroke ? 1 : 3);

  }

  if (addToClip) {

    mode+=4;

  }

  setTextRenderingMode(mode);

}

Location: PDFTextUtil.java

Content: 

/** 

 * Sets the text rendering mode.

 * @param mode the rendering mode (value 0 to 7, see PDF Spec, constants: TR_*)

 */

public void setTextRenderingMode(int mode){

  if (mode < 0 || mode > 7) {

    throw new IllegalArgumentException("Illegal value for text rendering mode. Expected: 0-7");

  }

  if (mode != this.textRenderingMode) {

    writeTJ();

    this.textRenderingMode=mode;

    write(this.textRenderingMode + " Tr\n");

  }

}

Location: PDFTextUtil.java

Content: 

/** 

 * Updates the current font. This method only writes a "Tf" if the current font changes.

 * @param fontName the name of the font to select

 * @param fontSize the font size (in points)

 * @param multiByte true indicates the font is a multi-byte font, false means single-byte

 */

public void updateTf(String fontName,double fontSize,boolean multiByte,boolean cid){

  checkInTextObject();

  if (!fontName.equals(this.currentFontName) || (fontSize != this.currentFontSize)) {

    writeTJ();

    this.currentFontName=fontName;

    this.currentFontSize=fontSize;

    this.useMultiByte=multiByte;

    this.useCid=cid;

    writeTf(fontName,fontSize);

  }

}

Location: PDFTextUtil.java

Content: 

private void writeAffineTransform(AffineTransform at,StringBuffer sb){

  double[] lt=new double[6];

  at.getMatrix(lt);

  PDFNumber.doubleOut(lt[0],DEC,sb);

  sb.append(' ');

  PDFNumber.doubleOut(lt[1],DEC,sb);

  sb.append(' ');

  PDFNumber.doubleOut(lt[2],DEC,sb);

  sb.append(' ');

  PDFNumber.doubleOut(lt[3],DEC,sb);

  sb.append(' ');

  PDFNumber.doubleOut(lt[4],DEC,sb);

  sb.append(' ');

  PDFNumber.doubleOut(lt[5],DEC,sb);

}

Location: PDFTextUtil.java

Content: 

private void writeChar(int codePoint,StringBuffer sb){

  writeChar(codePoint,sb,useMultiByte,useCid);

}

Location: PDFTextUtil.java

Content: 

private static void writeChar(int codePoint,StringBuffer sb,boolean multibyte,boolean cid){

  if (!multibyte) {

    if (cid || codePoint < 32 || codePoint > 127) {

      sb.append("\\").append(Integer.toOctalString(codePoint));

    }

 else {

switch (codePoint) {

case '(':

case ')':

case '\\':

        sb.append('\\');

      break;

default :

  }

  sb.appendCodePoint(codePoint);

}

}

 else {

PDFText.toUnicodeHex(codePoint,sb);

}

}

Location: PDFTextUtil.java

Content: 

/** 

 * Writes a "Td" command with specified x and y coordinates.

 * @param x coordinate

 * @param y coordinate

 */

public void writeTd(double x,double y){

  StringBuffer sb=new StringBuffer();

  PDFNumber.doubleOut(x,DEC,sb);

  sb.append(' ');

  PDFNumber.doubleOut(y,DEC,sb);

  sb.append(" Td\n");

  write(sb);

}

Location: PDFTextUtil.java

Content: 

/** 

 * Writes a "Tm" command, setting a new text transformation matrix.

 * @param localTransform the new text transformation matrix

 */

public void writeTextMatrix(AffineTransform localTransform){

  StringBuffer sb=new StringBuffer();

  writeAffineTransform(localTransform,sb);

  sb.append(" Tm ");

  write(sb);

}

Location: PDFTextUtil.java

Content: 

/** 

 * Writes a "Tf" command, setting a new current font.

 * @param f the font to select

 */

public void writeTf(Font f){

  String fontName=f.getFontName();

  float fontSize=(float)f.getFontSize() / 1000f;

  boolean isMultiByte=isMultiByteFont(fontName);

  boolean isCid=isCIDFont(fontName);

  if (!isMultiByte && encoding != 0) {

    updateTf(fontName + "_" + Integer.toString(encoding),fontSize,isMultiByte,isCid);

  }

 else {

    updateTf(fontName,fontSize,isMultiByte,isCid);

  }

}

Location: PDFTextUtil.java

Content: 

/** 

 * Writes a "Tf" command, setting a new current font.

 * @param fontName the name of the font to select

 * @param fontSize the font size (in points)

 */

public void writeTf(String fontName,double fontSize){

  checkInTextObject();

  StringBuffer sb=new StringBuffer();

  sb.append('/');

  sb.append(fontName);

  sb.append(' ');

  PDFNumber.doubleOut(fontSize,6,sb);

  sb.append(" Tf\n");

  write(sb);

  this.startText=useMultiByte ? "<" : "(";

  this.endText=useMultiByte ? ">" : ")";

}

Location: PDFTextUtil.java

Content: 

/** 

 * Writes a "TJ" command, writing out the accumulated buffer with the characters and glyph positioning values. The buffer is reset afterwards.

 */

public void writeTJ(){

  if (isInString()) {

    bufTJ.append(endText);

    bufTJ.append("] TJ\n");

    write(bufTJ);

    bufTJ.setLength(0);

  }

}

Location: PDFTextUtil.java

Content: 

/** 

 * Writes a char to the "TJ-Buffer".

 * @param ch the mapped character (code point/character code)

 */

public void writeTJMappedChar(char ch){

  writeTJMappedCodePoint((int)ch);

}

Location: PDFTextUtil.java

Content: 

/** 

 * Writes a codepoint to the "TJ-Buffer".

 * @param codePoint the mapped character (code point/character code)

 */

public void writeTJMappedCodePoint(int codePoint){

  if (bufTJ == null) {

    bufTJ=new StringBuffer();

  }

  if (bufTJ.length() == 0) {

    bufTJ.append('[');

    bufTJ.append(startText);

  }

  writeChar(codePoint,bufTJ);

}

Location: PDFTextUtil.java

Content: 

/** 

 * Writes a "Tj" command with specified character code.

 * @param ch character code to write

 */

public void writeTj(char ch,boolean multibyte,boolean cid){

  StringBuffer sb=new StringBuffer();

  sb.append(startText);

  writeChar(ch,sb,multibyte,cid);

  sb.append(endText);

  sb.append(" Tj\n");

  write(sb);

}

Location: PDFTextUtil.java

Content: 

/** 

 * Writes PDF code.

 * @param code the PDF code to write

 */

protected abstract void write(StringBuffer code);

