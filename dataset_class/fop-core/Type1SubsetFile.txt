Location: Type1SubsetFile.java

Content: 

private byte[] addSubroutine(PSFixedArray subroutines,List<BytesNumber> operands,byte[] decoded,List<String> subsetEncodingEntries,byte[] data,int i,int opLength,int existingSubrRef,int subrID){

  if (existingSubrRef == -1) {

    int[] subrData=subroutines.getBinaryEntryByIndex(subrID);

    byte[] subroutine=getBinaryEntry(subrData,decoded);

    subroutine=BinaryCoder.decodeBytes(subroutine,4330,4);

    subroutine=createSubsetCharStrings(decoded,subroutine,subroutines,subsetEncodingEntries);

    if (subroutine.length == 0) {

      return new byte[0];

    }

    subroutine=BinaryCoder.encodeBytes(subroutine,4330,4);

    uniqueSubs.put(subrID,subroutine);

  }

  int subRef=(existingSubrRef != -1) ? existingSubrRef : uniqueSubs.size() - 1;

  data=constructNewRefData(i,data,operands,1,subRef,opLength);

  return data;

}

Location: Type1SubsetFile.java

Content: 

private void addToCharNames(String encodingEntry){

  int spaceCount=0;

  int lastSpaceIndex=0;

  int charIndex=0;

  String charName="";

  for (int i=0; i < encodingEntry.length(); i++) {

    boolean isSpace=encodingEntry.charAt(i) == ' ';

    if (isSpace) {

      spaceCount++;

switch (spaceCount - 1) {

case 1:

        charIndex=Integer.parseInt(encodingEntry.substring(lastSpaceIndex + 1,i));

      break;

case 2:

    charName=encodingEntry.substring(lastSpaceIndex + 1,i);

  break;

default :

break;

}

}

if (isSpace) {

lastSpaceIndex=i;

}

}

sbfont.mapUsedGlyphName(charIndex,charName);

}

Location: Type1SubsetFile.java

Content: 

/** 

 * Concatenate two byte arrays together

 * @param a The first array

 * @param b The second array

 * @return The concatenated array

 */

byte[] concatArray(byte[] a,byte[] b){

  int aLen=a.length;

  int bLen=b.length;

  byte[] c=new byte[aLen + bLen];

  System.arraycopy(a,0,c,0,aLen);

  System.arraycopy(b,0,c,aLen,bLen);

  return c;

}

Location: Type1SubsetFile.java

Content: 

private byte[] constructNewRefData(int curDataPos,byte[] currentData,List<BytesNumber> operands,int opNum,int curSubsetIndexSize,int operatorLength){

  byte[] newData;

  int operandsLenth=getOperandsLength(operands);

  int startRef=curDataPos - operandsLenth + getOpPosition(opNum,operands) + (1 - operatorLength);

  byte[] preBytes=new byte[startRef];

  System.arraycopy(currentData,0,preBytes,0,startRef);

  byte[] newRefBytes=createNewRef(curSubsetIndexSize,-1);

  newData=concatArray(preBytes,newRefBytes);

  byte[] postBytes=new byte[currentData.length - (startRef + operands.get(opNum - 1).getNumBytes())];

  System.arraycopy(currentData,startRef + operands.get(opNum - 1).getNumBytes(),postBytes,0,currentData.length - (startRef + operands.get(opNum - 1).getNumBytes()));

  return concatArray(newData,postBytes);

}

Location: Type1SubsetFile.java

Content: 

private byte[] createNewRef(int newRef,int forceLength){

  byte[] newRefBytes;

  if ((forceLength == -1 && newRef <= 107) || forceLength == 1) {

    newRefBytes=new byte[1];

    newRefBytes[0]=(byte)(newRef + 139);

  }

 else   if ((forceLength == -1 && newRef <= 1131) || forceLength == 2) {

    newRefBytes=new byte[2];

    if (newRef <= 363) {

      newRefBytes[0]=(byte)247;

    }

 else     if (newRef <= 619) {

      newRefBytes[0]=(byte)248;

    }

 else     if (newRef <= 875) {

      newRefBytes[0]=(byte)249;

    }

 else {

      newRefBytes[0]=(byte)250;

    }

    newRefBytes[1]=(byte)(newRef - 108);

  }

 else {

    newRefBytes=new byte[5];

    newRefBytes[0]=(byte)255;

    newRefBytes[1]=(byte)(newRef >> 24);

    newRefBytes[2]=(byte)(newRef >> 16);

    newRefBytes[3]=(byte)(newRef >> 8);

    newRefBytes[4]=(byte)newRef;

  }

  return newRefBytes;

}

Location: Type1SubsetFile.java

Content: 

private byte[] createSubsetCharStrings(byte[] decoded,byte[] data,PSFixedArray subroutines,List<String> subsetEncodingEntries){

  List<BytesNumber> operands=new ArrayList<BytesNumber>();

  for (int i=0; i < data.length; i++) {

    int cur=data[i] & 0xFF;

    if (cur <= 31) {

      int dataLength=data.length;

      if (cur == OP_CALLSUBR) {

        if (operands.size() == 0) {

          continue;

        }

        if (uniqueSubs.get(operands.get(operands.size() - 1).getNumber()) == null) {

          uniqueSubs.put(operands.get(operands.size() - 1).getNumber(),new byte[0]);

          data=addSubroutine(subroutines,operands,decoded,subsetEncodingEntries,data,i,1,-1,operands.get(operands.size() - 1).getNumber());

        }

 else {

          data=addSubroutine(subroutines,operands,decoded,subsetEncodingEntries,data,i,1,getSubrIndex(operands.get(operands.size() - 1).getNumber()),operands.get(operands.size() - 1).getNumber());

        }

      }

 else       if (cur == 12) {

        int next=data[++i] & 0xFF;

        if (next == OP_SEAC) {

          int first=operands.get(operands.size() - 2).getNumber();

          int second=operands.get(operands.size() - 1).getNumber();

          String charFirst=AdobeStandardEncoding.getCharFromCodePoint(first);

          String charSecond=AdobeStandardEncoding.getCharFromCodePoint(second);

          subsetEncodingEntries.add(String.format("dup %d /%s put",first,charFirst));

          subsetEncodingEntries.add(String.format("dup %d /%s put",second,charSecond));

          sbfont.mapUsedGlyphName(first,"/" + charFirst);

          sbfont.mapUsedGlyphName(second,"/" + charSecond);

        }

 else         if (next == OP_CALLOTHERSUBR) {

          int[] pattern={12,17,10};

          int count=0;

          boolean matchesPattern=true;

          if (data.length > i + 4) {

            for (int pos=i + 1; pos < i + 4; pos++) {

              if (data[pos] != pattern[count++]) {

                matchesPattern=false;

              }

            }

          }

          if (matchesPattern) {

            return new byte[0];

          }

          data=addSubroutine(subroutines,operands,decoded,subsetEncodingEntries,data,i,2,-1,operands.get(0).getNumber());

        }

      }

      if (data.length == 0) {

        return new byte[0];

      }

      i-=dataLength - data.length;

      operands.clear();

    }

 else     if (cur <= 246) {

      operands.add(new BytesNumber(cur - 139,1));

    }

 else     if (cur <= 250) {

      operands.add(new BytesNumber((cur - 247) * 256 + (data[i + 1] & 0xFF) + 108,2));

      i++;

    }

 else     if (cur <= 254) {

      operands.add(new BytesNumber(-(cur - 251) * 256 - (data[i + 1] & 0xFF) - 108,2));

      i++;

    }

 else     if (cur == 255) {

      int b1=data[i + 1] & 0xFF;

      int b2=data[i + 2] & 0xFF;

      int b3=data[i + 3] & 0xFF;

      int b4=data[i + 4] & 0xFF;

      int value=b1 << 24 | b2 << 16 | b3 << 8 | b4;

      operands.add(new BytesNumber(value,5));

      i+=4;

    }

  }

  return data;

}

Location: Type1SubsetFile.java

Content: 

public byte[] createSubset(InputStream in,SingleByteFont sbfont) throws IOException {

  fullFont=IOUtils.toByteArray(in);

  byte[] subsetFont=createSubset(sbfont,true);

  return (subsetFont.length == 0 || subsetFont.length > fullFont.length) ? fullFont : subsetFont;

}

Location: Type1SubsetFile.java

Content: 

/** 

 * Creates a new subset from the given type 1 font input stream

 * @param sbfont The font object containing information such as thecharacters from which to create the subset

 * @param subsetSubroutines This option will force the subset to include allsubroutines.

 * @return Returns the subset as a byte array

 * @throws IOException

 */

private byte[] createSubset(SingleByteFont sbfont,boolean subsetSubroutines) throws IOException {

  this.subsetSubroutines=subsetSubroutines;

  InputStream in=new ByteArrayInputStream(fullFont);

  this.sbfont=sbfont;

  PFBParser pfbParser=new PFBParser();

  PFBData pfbData=pfbParser.parsePFB(in);

  PostscriptParser psParser=new PostscriptParser();

  charNames=new ArrayList<String>();

  if (headerSection == null) {

    headerSection=psParser.parse(pfbData.getHeaderSegment());

  }

  PSElement encoding=getElement("/Encoding",headerSection);

  if (encoding.getFoundUnexpected()) {

    return new byte[0];

  }

  List<String> subsetEncodingEntries=readEncoding(encoding);

  byte[] decoded=BinaryCoder.decodeBytes(pfbData.getEncryptedSegment(),55665,4);

  uniqueSubs=new LinkedHashMap<Integer,byte[]>();

  subsetCharStrings=new HashMap<String,byte[]>();

  if (mainSection == null) {

    mainSection=psParser.parse(decoded);

  }

  PSElement charStrings=getElement("/CharStrings",mainSection);

  boolean result=readMainSection(mainSection,decoded,subsetEncodingEntries,charStrings);

  if (!result) {

    uniqueSubs.clear();

    subsetCharStrings.clear();

    charNames.clear();

    return createSubset(sbfont,false);

  }

  ByteArrayOutputStream boasHeader=writeHeader(pfbData,encoding);

  ByteArrayOutputStream boasMain=writeMainSection(decoded,mainSection,charStrings);

  byte[] mainSectionBytes=boasMain.toByteArray();

  mainSectionBytes=BinaryCoder.encodeBytes(mainSectionBytes,55665,4);

  boasMain.reset();

  boasMain.write(mainSectionBytes);

  ByteArrayOutputStream baosTrailer=new ByteArrayOutputStream();

  baosTrailer.write(pfbData.getTrailerSegment(),0,pfbData.getTrailerSegment().length);

  return stitchFont(boasHeader,boasMain,baosTrailer);

}

Location: Type1SubsetFile.java

Content: 

protected String findVariable(byte[] decoded,List<PSElement> elements,String[] matches,String fallback) throws UnsupportedEncodingException {

  for (  PSElement element : elements) {

    if (element instanceof PSSubroutine) {

      byte[] var=new byte[element.getEndPoint() - element.getStartPoint()];

      System.arraycopy(decoded,element.getStartPoint(),var,0,element.getEndPoint() - element.getStartPoint());

      String found=readVariableContents(new String(var,"ASCII")).trim();

      for (      String match : matches) {

        if (match.equals(found)) {

          return element.getOperator().substring(1,element.getOperator().length());

        }

      }

    }

  }

  return fallback;

}

Location: Type1SubsetFile.java

Content: 

protected PSElement getElement(String elementID,List<PSElement> elements){

  for (  PSElement element : elements) {

    if (element.getOperator().equals(elementID)) {

      return element;

    }

  }

  return null;

}

Location: Type1SubsetFile.java

Content: 

protected String getEntryPart(String entry,int part){

  Scanner s=new Scanner(entry).useDelimiter(" ");

  for (int i=1; i < part; i++) {

    s.next();

  }

  return s.next();

}

Location: Type1SubsetFile.java

Content: 

int getOperandsLength(List<BytesNumber> operands){

  int length=0;

  for (  BytesNumber number : operands) {

    length+=number.getNumBytes();

  }

  return length;

}

Location: Type1SubsetFile.java

Content: 

int getOpPosition(int opNum,List<BytesNumber> operands){

  int byteCount=0;

  for (int i=0; i < opNum - 1; i++) {

    byteCount+=operands.get(i).getNumBytes();

  }

  return byteCount;

}

Location: Type1SubsetFile.java

Content: 

private int getSubrIndex(int subID){

  int count=0;

  for (  Integer key : uniqueSubs.keySet()) {

    if (key == subID) {

      return count;

    }

    count++;

  }

  return -1;

}

Location: Type1SubsetFile.java

Content: 

private List<String> readEncoding(PSElement encoding){

  Map<Integer,Integer> usedGlyphs=sbfont.getUsedGlyphs();

  List<Integer> glyphs=new ArrayList<Integer>(usedGlyphs.keySet());

  Collections.sort(glyphs);

  List<String> subsetEncodingEntries=new ArrayList<String>();

  if (encoding instanceof PSFixedArray) {

    PSFixedArray encodingArray=(PSFixedArray)encoding;

    for (    int glyph : glyphs) {

      List<String> matches=searchEntries(encodingArray.getEntries(),glyph);

      if (matches.size() == 0) {

        matches.clear();

        if (glyph == 0) {

          matches.add("dup 0 /.notdef put");

        }

 else {

          matches.add(String.format("dup %d /%s put",glyph,sbfont.getGlyphName(glyph)));

        }

      }

      for (      String match : matches) {

        subsetEncodingEntries.add(match);

        addToCharNames(match);

      }

    }

  }

 else   if (encoding instanceof PSVariable) {

    if (((PSVariable)encoding).getValue().equals("StandardEncoding")) {

      standardEncoding=true;

      sbfont.mapUsedGlyphName(0,"/.notdef");

      for (      int glyph : glyphs) {

        String name=sbfont.getGlyphName(glyph);

        if (glyph != 0 && name != null && !name.trim().equals("")) {

          sbfont.mapUsedGlyphName(glyph,"/" + name);

        }

      }

    }

 else {

      LOG.warn("Only Custom or StandardEncoding is supported when creating a Type 1 subset.");

    }

  }

  return subsetEncodingEntries;

}

Location: Type1SubsetFile.java

Content: 

private boolean readMainSection(List<PSElement> mainSection,byte[] decoded,List<String> subsetEncodingEntries,PSElement charStrings){

  subsetEncodingEntries.add(0,"dup 0 /.notdef put");

  PSDictionary charStringsDict=(PSDictionary)charStrings;

  for (  String tag : sbfont.getUsedGlyphNames().values()) {

    if (!tag.equals("/.notdef")) {

      charNames.add(tag);

    }

    int[] location=charStringsDict.getBinaryEntries().get(tag);

    if (location == null) {

      continue;

    }

    byte[] charStringEntry=getBinaryEntry(location,decoded);

    int skipBytes=4;

    PSElement element=getElement("lenIV",mainSection);

    if (element != null && element instanceof PSVariable) {

      PSVariable lenIV=(PSVariable)element;

      try {

        skipBytes=Integer.parseInt(lenIV.getValue());

      }

 catch (      NumberFormatException ex) {

        LOG.warn(String.format("Invalid value `%s` for lenIV found in font %s",lenIV.getValue(),sbfont.getEmbedFileURI().toString()));

      }

    }

    charStringEntry=BinaryCoder.decodeBytes(charStringEntry,4330,skipBytes);

    PSFixedArray subroutines=(PSFixedArray)getElement("/Subrs",mainSection);

    if (subsetSubroutines) {

      charStringEntry=createSubsetCharStrings(decoded,charStringEntry,subroutines,subsetEncodingEntries);

    }

    if (charStringEntry.length == 0) {

      return false;

    }

    charStringEntry=BinaryCoder.encodeBytes(charStringEntry,4330,skipBytes);

    subsetCharStrings.put(tag,charStringEntry);

  }

  return true;

}

Location: Type1SubsetFile.java

Content: 

String readVariableContents(String variable){

  int level=0;

  String result="";

  int start=0;

  int end=0;

  boolean reading=false;

  List<Integer> results=new ArrayList<Integer>();

  for (int i=0; i < variable.length(); i++) {

    char curChar=variable.charAt(i);

    boolean sectionEnd=false;

    if (curChar == '{') {

      level++;

      sectionEnd=true;

    }

 else     if (curChar == '}') {

      level--;

      sectionEnd=true;

    }

 else     if (level == 1) {

      if (!reading) {

        reading=true;

        start=i;

      }

      end=i;

    }

    if (sectionEnd && reading) {

      results.add(start);

      results.add(end);

      reading=false;

    }

  }

  for (int i=0; i < results.size(); i+=2) {

    result=result.concat(variable.substring(results.get(i),results.get(i + 1) + 1));

  }

  return result;

}

Location: Type1SubsetFile.java

Content: 

protected List<String> searchEntries(HashMap<Integer,String> encodingEntries,int glyph){

  List<String> matches=new ArrayList<String>();

  for (  Entry<Integer,String> entry : encodingEntries.entrySet()) {

    String tag=getEntryPart(entry.getValue(),3);

    String name=sbfont.getGlyphName(sbfont.getUsedGlyphs().get(glyph));

    if (name.equals(tag)) {

      matches.add(entry.getValue());

    }

  }

  return matches;

}

Location: Type1SubsetFile.java

Content: 

public byte[] stitchFont(ByteArrayOutputStream boasHeader,ByteArrayOutputStream boasMain,ByteArrayOutputStream boasTrailer) throws IOException {

  int headerLength=boasHeader.size();

  int mainLength=boasMain.size();

  boasMain.write(128);

  boasMain.write(1);

  updateSectionSize(boasTrailer.size()).writeTo(boasMain);

  boasTrailer.write(128);

  boasTrailer.write(3);

  boasTrailer.writeTo(boasMain);

  boasHeader.write(128);

  boasHeader.write(2);

  updateSectionSize(mainLength).writeTo(boasHeader);

  boasMain.writeTo(boasHeader);

  ByteArrayOutputStream fullFont=new ByteArrayOutputStream();

  fullFont.write(128);

  fullFont.write(1);

  updateSectionSize(headerLength).writeTo(fullFont);

  boasHeader.writeTo(fullFont);

  return fullFont.toByteArray();

}

Location: Type1SubsetFile.java

Content: 

ByteArrayOutputStream updateSectionSize(int size) throws IOException {

  ByteArrayOutputStream boas=new ByteArrayOutputStream();

  byte[] lowOrderSize=ByteBuffer.allocate(4).order(ByteOrder.LITTLE_ENDIAN).putInt(size).array();

  boas.write(lowOrderSize);

  return boas;

}

Location: Type1SubsetFile.java

Content: 

protected ByteArrayOutputStream writeHeader(PFBData pfbData,PSElement encoding) throws IOException {

  ByteArrayOutputStream boasHeader=new ByteArrayOutputStream();

  boasHeader.write(pfbData.getHeaderSegment(),0,encoding.getStartPoint() - 1);

  if (!standardEncoding) {

    String encodingArray=eol + "/Encoding 256 array" + eol+ "0 1 255 {1 index exch /.notdef put } for"+ eol;

    byte[] encodingDefinition=encodingArray.getBytes("ASCII");

    boasHeader.write(encodingDefinition,0,encodingDefinition.length);

    Set<Entry<Integer,String>> entrySet=sbfont.getUsedGlyphNames().entrySet();

    for (    Entry<Integer,String> entry : entrySet) {

      String arrayEntry=String.format("dup %d %s put",entry.getKey(),entry.getValue());

      writeString(arrayEntry + eol,boasHeader);

    }

    writeString("readonly def" + eol,boasHeader);

  }

 else {

    String theEncoding=eol + "/Encoding StandardEncoding def" + eol;

    boasHeader.write(theEncoding.getBytes("ASCII"));

  }

  boasHeader.write(pfbData.getHeaderSegment(),encoding.getEndPoint(),pfbData.getHeaderSegment().length - encoding.getEndPoint());

  return boasHeader;

}

Location: Type1SubsetFile.java

Content: 

protected ByteArrayOutputStream writeMainSection(byte[] decoded,List<PSElement> mainSection,PSElement charStrings) throws IOException {

  ByteArrayOutputStream main=new ByteArrayOutputStream();

  PSElement subrs=getElement("/Subrs",mainSection);

  String rd=findVariable(decoded,mainSection,new String[]{"string currentfile exch readstring pop"},"RD");

  String nd=findVariable(decoded,mainSection,new String[]{"def","noaccess def"},"noaccess def");

  String np=findVariable(decoded,mainSection,new String[]{"put","noaccess put"},"noaccess put");

  main.write(decoded,0,subrs.getStartPoint());

  if (subsetSubroutines) {

    writeString(eol + String.format("/Subrs %d array",uniqueSubs.size()),main);

    int count=0;

    for (    Entry<Integer,byte[]> entry : uniqueSubs.entrySet()) {

      writeString(eol + String.format("dup %d %d %s ",count++,entry.getValue().length,rd),main);

      main.write(entry.getValue());

      writeString(" " + np,main);

    }

    writeString(eol + nd,main);

  }

 else {

    int fullSubrsLength=subrs.getEndPoint() - subrs.getStartPoint();

    main.write(decoded,subrs.getStartPoint(),fullSubrsLength);

  }

  main.write(decoded,subrs.getEndPoint(),charStrings.getStartPoint() - subrs.getEndPoint());

  writeString(eol + String.format("/CharStrings %d dict dup begin",subsetCharStrings.size()),main);

  for (  Entry<String,byte[]> entry : subsetCharStrings.entrySet()) {

    writeString(eol + String.format("%s %d %s ",entry.getKey(),entry.getValue().length,rd),main);

    main.write(entry.getValue());

    writeString(" " + nd,main);

  }

  writeString(eol + "end",main);

  main.write(decoded,charStrings.getEndPoint(),decoded.length - charStrings.getEndPoint());

  return main;

}

Location: Type1SubsetFile.java

Content: 

protected void writeString(String entry,ByteArrayOutputStream boas) throws IOException {

  byte[] byteEntry=entry.getBytes("ASCII");

  boas.write(byteEntry);

}

