Location: RelativeNumericProperty.java

Content: 

/** 

 * Return a resolved (calculated) Numeric with the value of the expression.

 * @param context Evaluation context

 * @return the resolved {@link Numeric} corresponding to the value of the expression

 * @throws PropertyException when an exception occur during evaluation.

 */

private Numeric getResolved(PercentBaseContext context) throws PropertyException {

switch (operation) {

case ADDITION:

    return NumericOp.addition2(op1,op2,context);

case SUBTRACTION:

  return NumericOp.subtraction2(op1,op2,context);

case MULTIPLY:

return NumericOp.multiply2(op1,op2,context);

case DIVIDE:

return NumericOp.divide2(op1,op2,context);

case MODULO:

return NumericOp.modulo2(op1,op2,context);

case NEGATE:

return NumericOp.negate2(op1,context);

case ABS:

return NumericOp.abs2(op1,context);

case MAX:

return NumericOp.max2(op1,op2,context);

case MIN:

return NumericOp.min2(op1,op2,context);

default :

throw new PropertyException("Unknown expr operation " + operation);

}

}

Location: RelativeNumericProperty.java

Content: 

/** 

 * Constructor for a one argument operation.

 * @param operation the operation opcode: NEGATE, ABS

 * @param op the operand.

 */

public RelativeNumericProperty(int operation,Numeric op){

  this.operation=operation;

  this.op1=op;

  this.dimension=op.getDimension();

}

Location: RelativeNumericProperty.java

Content: 

/** 

 * Constructor for a two argument operation.

 * @param operation the operation opcode: ADDITION, SUBTRACTION, ...

 * @param op1 the first operand.

 * @param op2 the second operand

 */

public RelativeNumericProperty(int operation,Numeric op1,Numeric op2){

  this.operation=operation;

  this.op1=op1;

  this.op2=op2;

switch (operation) {

case MULTIPLY:

    dimension=op1.getDimension() + op2.getDimension();

  break;

case DIVIDE:

dimension=op1.getDimension() - op2.getDimension();

break;

default :

dimension=op1.getDimension();

}

}

