Location: RtfAfterBeforeBase.java

Content: 

public void closeAll() throws IOException {

  closeCurrentParagraph();

  closeCurrentExternalGraphic();

  closeCurrentTable();

}

Location: RtfAfterBeforeBase.java

Content: 

private void closeCurrentExternalGraphic() throws IOException {

  if (externalGraphic != null) {

    externalGraphic.close();

  }

}

Location: RtfAfterBeforeBase.java

Content: 

private void closeCurrentParagraph() throws IOException {

  if (para != null) {

    para.close();

  }

}

Location: RtfAfterBeforeBase.java

Content: 

private void closeCurrentTable() throws IOException {

  if (table != null) {

    table.close();

  }

}

Location: RtfAfterBeforeBase.java

Content: 

public RtfTextrun getTextrun() throws IOException {

  return RtfTextrun.getTextrun(this,writer,null);

}

Location: RtfAfterBeforeBase.java

Content: 

public RtfExternalGraphic newImage() throws IOException {

  hongshuai();

  closeCurrentParagraph();

  closeCurrentExternalGraphic();

  closeCurrentTable();

  externalGraphic=new RtfExternalGraphic(this,writer);

  return externalGraphic;

}

Location: RtfAfterBeforeBase.java

Content: 

public RtfParagraph newParagraph() throws IOException {

  hongshuai();

  closeCurrentParagraph();

  closeCurrentExternalGraphic();

  closeCurrentTable();

  para=new RtfParagraph(this,writer);

  return para;

}

Location: RtfAfterBeforeBase.java

Content: 

public RtfParagraph newParagraph(RtfAttributes attrs) throws IOException {

  hongshuai();

  closeCurrentParagraph();

  closeCurrentExternalGraphic();

  closeCurrentTable();

  para=new RtfParagraph(this,writer,attrs);

  return para;

}

Location: RtfAfterBeforeBase.java

Content: 

/** 

 * close current table if any and start a new one  

 */

public RtfTable newTable(ITableColumnsInfo tc) throws IOException {

  hongshuai();

  closeCurrentParagraph();

  closeCurrentExternalGraphic();

  closeCurrentTable();

  table=new RtfTable(this,writer,tc);

  return table;

}

Location: RtfAfterBeforeBase.java

Content: 

/** 

 * close current table if any and start a new one

 * @param tc added by Boris Poud√©rous on july 2002 in order to processnumber-columns-spanned attribute

 */

public RtfTable newTable(RtfAttributes attrs,ITableColumnsInfo tc) throws IOException {

  hongshuai();

  closeCurrentParagraph();

  closeCurrentExternalGraphic();

  closeCurrentTable();

  table=new RtfTable(this,writer,attrs,tc);

  return table;

}

Location: RtfAfterBeforeBase.java

Content: 

RtfAfterBeforeBase(RtfSection parent,Writer w,RtfAttributes attrs) throws IOException {

  super((RtfContainer)parent,w,attrs);

}

Location: RtfAfterBeforeBase.java

Content: 

/** 

 * must be implemented to write the header or footer attributes 

 */

protected abstract void writeMyAttributes() throws IOException ;

Location: RtfAfterBeforeBase.java

Content: 

protected void writeRtfPrefix() throws IOException {

  writeGroupMark(true);

  writeMyAttributes();

}

Location: RtfAfterBeforeBase.java

Content: 

protected void writeRtfSuffix() throws IOException {

  writeGroupMark(false);

}

