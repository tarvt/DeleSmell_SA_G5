Location: ImageEncoderPNGTestCase.java

Content: 

@Test public void testGetImplicitFilterWithComponentColorModel(){

  ImageSize is=RawPNGTestUtil.getImageSize();

  ComponentColorModel cm=mock(ComponentColorModel.class);

  when(cm.getNumComponents()).thenReturn(3);

  ImageRawPNG irpng=mock(ImageRawPNG.class);

  when(irpng.getColorModel()).thenReturn(cm);

  when(irpng.getBitDepth()).thenReturn(8);

  when(irpng.getSize()).thenReturn(is);

  ImageEncoderPNG iepng=new ImageEncoderPNG(irpng);

  String expectedFilter="<< /Predictor 15 /Columns 32 /Colors 3 /BitsPerComponent 8 >> /FlateDecode";

  assertEquals(expectedFilter,iepng.getImplicitFilter());

}

Location: ImageEncoderPNGTestCase.java

Content: 

@Test public void testGetImplicitFilterWithIndexColorModel(){

  ImageSize is=RawPNGTestUtil.getImageSize();

  IndexColorModel cm=mock(IndexColorModel.class);

  ImageRawPNG irpng=mock(ImageRawPNG.class);

  when(irpng.getColorModel()).thenReturn(cm);

  when(irpng.getBitDepth()).thenReturn(8);

  when(irpng.getSize()).thenReturn(is);

  ImageEncoderPNG iepng=new ImageEncoderPNG(irpng);

  String expectedFilter="<< /Predictor 15 /Columns 32 /Colors 1 /BitsPerComponent 8 >> /FlateDecode";

  assertEquals(expectedFilter,iepng.getImplicitFilter());

}

Location: ImageEncoderPNGTestCase.java

Content: 

@Test public void testWriteToWithGAPNG() throws IOException {

  testWriteToWithGRGBAPNG(128,-1,-1,-1,128);

}

Location: ImageEncoderPNGTestCase.java

Content: 

@Test public void testWriteToWithGPNG() throws IOException {

  testWriteToWithGRGBAPNG(128,-1,-1,-1,-1);

}

Location: ImageEncoderPNGTestCase.java

Content: 

private void testWriteToWithGRGBAPNG(int gray,int red,int green,int blue,int alpha) throws IOException {

  int numComponents=(gray > -1 ? 1 : 3) + (alpha > -1 ? 1 : 0);

  ImageSize is=RawPNGTestUtil.getImageSize();

  ComponentColorModel cm=mock(ComponentColorModel.class);

  when(cm.getNumComponents()).thenReturn(numComponents);

  ImageRawPNG irpng=mock(ImageRawPNG.class);

  when(irpng.getColorModel()).thenReturn(cm);

  when(irpng.getSize()).thenReturn(is);

  ImageEncoderPNG iepng=new ImageEncoderPNG(irpng);

  ByteArrayOutputStream baos=new ByteArrayOutputStream();

  byte[] data=RawPNGTestUtil.buildGRGBAData(gray,red,green,blue,alpha);

  ByteArrayInputStream bais=new ByteArrayInputStream(data);

  when(irpng.createInputStream()).thenReturn(bais);

  iepng.writeTo(baos);

  if (alpha > -1) {

    byte[] expected=RawPNGTestUtil.buildGRGBAData(gray,red,green,blue,-1);

    assertArrayEquals(expected,baos.toByteArray());

  }

 else {

    assertArrayEquals(data,baos.toByteArray());

  }

}

Location: ImageEncoderPNGTestCase.java

Content: 

@Test public void testWriteToWithPalettePNG() throws IOException {

  ImageSize is=RawPNGTestUtil.getImageSize();

  IndexColorModel cm=mock(IndexColorModel.class);

  ImageRawPNG irpng=mock(ImageRawPNG.class);

  when(irpng.getColorModel()).thenReturn(cm);

  when(irpng.getSize()).thenReturn(is);

  ImageEncoderPNG iepng=new ImageEncoderPNG(irpng);

  ByteArrayOutputStream baos=new ByteArrayOutputStream();

  byte[] data=RawPNGTestUtil.buildGRGBAData(128,-1,-1,-1,-1);

  ByteArrayInputStream bais=new ByteArrayInputStream(data);

  when(irpng.createInputStream()).thenReturn(bais);

  iepng.writeTo(baos);

  assertArrayEquals(data,baos.toByteArray());

}

Location: ImageEncoderPNGTestCase.java

Content: 

@Test public void testWriteToWithRGBAPNG() throws IOException {

  testWriteToWithGRGBAPNG(-1,128,128,128,128);

}

Location: ImageEncoderPNGTestCase.java

Content: 

@Test public void testWriteToWithRGBPNG() throws IOException {

  testWriteToWithGRGBAPNG(-1,128,128,128,-1);

}

