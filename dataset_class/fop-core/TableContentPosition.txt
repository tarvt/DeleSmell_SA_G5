Location: TableContentPosition.java

Content: 

/** 

 * Returns a flag for this GridUnit.

 * @param which the requested flag

 * @return the value of the flag

 */

public boolean getFlag(int which){

  return (flags & (1 << which)) != 0;

}

Location: TableContentPosition.java

Content: 

EffRow getNewPageRow(){

  return newPageRow;

}

Location: TableContentPosition.java

Content: 

TablePart getTablePart(){

  return ((CellPart)cellParts.get(0)).pgu.getTablePart();

}

Location: TableContentPosition.java

Content: 

/** 

 * Sets a flag on a GridUnit.

 * @param which the flag to set

 * @param value the new value for the flag

 */

public void setFlag(int which,boolean value){

  if (value) {

    flags|=(1 << which);

  }

 else {

    flags&=~(1 << which);

  }

}

Location: TableContentPosition.java

Content: 

/** 

 * Sets the row corresponding to this position if it starts a new page. In which case, if the delay mechanism is on, this is the delayed row that starts the page, and not the current row being extended.

 * @param newPageRow the row that will start the page if this position is the firstone on that page

 */

void setNewPageRow(EffRow newPageRow){

  this.newPageRow=newPageRow;

}

Location: TableContentPosition.java

Content: 

/** 

 * Creates a new TableContentPosition.

 * @param lm applicable layout manager

 * @param cellParts the list of CellPart instances

 * @param row effective row this position belongs to

 */

protected TableContentPosition(LayoutManager lm,List cellParts,EffRow row){

  super(lm);

  this.cellParts=cellParts;

  this.row=row;

  this.newPageRow=row;

}

