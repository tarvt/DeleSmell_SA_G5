Location: PCLPainter.java

Content: 

private void changePrintDirection() throws IOException {

  AffineTransform at=graphicContext.getTransform();

  int newDir;

  newDir=PCLRenderingUtil.determinePrintDirection(at);

  if (newDir != this.currentPrintDirection) {

    this.currentPrintDirection=newDir;

    gen.changePrintDirection(this.currentPrintDirection);

  }

}

Location: PCLPainter.java

Content: 

/** 

 * {@inheritDoc} 

 */

public void drawBorderRect(final Rectangle rect,final BorderProps top,final BorderProps bottom,final BorderProps left,final BorderProps right) throws IFException {

  if (isSpeedOptimized()) {

    super.drawBorderRect(rect,top,bottom,left,right,null);

    return;

  }

  if (top != null || bottom != null || left != null || right != null) {

    final Rectangle boundingBox=rect;

    final Dimension dim=boundingBox.getSize();

    Graphics2DImagePainter painter=new Graphics2DImagePainter(){

      public void paint(      Graphics2D g2d,      Rectangle2D area){

        g2d.translate(-rect.x,-rect.y);

        Java2DPainter painter=new Java2DPainter(g2d,getContext(),getFontInfo(),state);

        try {

          painter.drawBorderRect(rect,top,bottom,left,right);

        }

 catch (        IFException e) {

          throw new RuntimeException("Unexpected error while painting borders",e);

        }

      }

      public Dimension getImageSize(){

        return dim.getSize();

      }

    }

;

    paintMarksAsBitmap(painter,boundingBox);

  }

}

Location: PCLPainter.java

Content: 

private void drawTextAsBitmap(final int x,final int y,final int letterSpacing,final int wordSpacing,final int[][] dp,final String text,FontTriplet triplet) throws IFException {

  final Font font=getFontInfo().getFontInstance(triplet,state.getFontSize());

  FontMetricsMapper mapper;

  try {

    mapper=(FontMetricsMapper)getFontInfo().getMetricsFor(font.getFontName());

  }

 catch (  Exception t) {

    throw new RuntimeException(t);

  }

  final int maxAscent=mapper.getMaxAscent(font.getFontSize()) / 1000;

  final int ascent=mapper.getAscender(font.getFontSize()) / 1000;

  final int descent=mapper.getDescender(font.getFontSize()) / 1000;

  int safetyMargin=(int)(SAFETY_MARGIN_FACTOR * font.getFontSize());

  final int baselineOffset=maxAscent + safetyMargin;

  final Rectangle boundingBox=getTextBoundingBox(x,y,letterSpacing,wordSpacing,dp,text,font,mapper);

  final Dimension dim=boundingBox.getSize();

  Graphics2DImagePainter painter=new Graphics2DImagePainter(){

    public void paint(    Graphics2D g2d,    Rectangle2D area){

      if (DEBUG) {

        g2d.setBackground(Color.LIGHT_GRAY);

        g2d.clearRect(0,0,(int)area.getWidth(),(int)area.getHeight());

      }

      g2d.translate(-x,-y + baselineOffset);

      if (DEBUG) {

        Rectangle rect=new Rectangle(x,y - maxAscent,3000,maxAscent);

        g2d.draw(rect);

        rect=new Rectangle(x,y - ascent,2000,ascent);

        g2d.draw(rect);

        rect=new Rectangle(x,y,1000,-descent);

        g2d.draw(rect);

      }

      Java2DPainter painter=new Java2DPainter(g2d,getContext(),getFontInfo(),state);

      try {

        painter.drawText(x,y,letterSpacing,wordSpacing,dp,text);

      }

 catch (      IFException e) {

        throw new RuntimeException("Unexpected error while painting text",e);

      }

    }

    public Dimension getImageSize(){

      return dim.getSize();

    }

  }

;

  paintMarksAsBitmap(painter,boundingBox);

}

Location: PCLPainter.java

Content: 

private void drawTextNative(int x,int y,int letterSpacing,int wordSpacing,int[][] dp,String text,FontTriplet triplet) throws IOException {

  Color textColor=state.getTextColor();

  if (textColor != null) {

    gen.setTransparencyMode(true,false);

    if (getDocumentHandler().getPCLUtil().isColorEnabled()) {

      gen.selectColor(textColor);

    }

 else {

      gen.selectGrayscale(textColor);

    }

  }

  gen.setTransparencyMode(true,true);

  setCursorPos(x,y);

  float fontSize=state.getFontSize() / 1000f;

  Font font=getFontInfo().getFontInstance(triplet,state.getFontSize());

  int l=text.length();

  StringBuffer sb=new StringBuffer(Math.max(16,l));

  if (dp != null && dp[0] != null && dp[0][0] != 0) {

    if (dp[0][0] > 0) {

      sb.append("\u001B&a+").append(gen.formatDouble2(dp[0][0] / 100.0)).append('H');

    }

 else {

      sb.append("\u001B&a-").append(gen.formatDouble2(-dp[0][0] / 100.0)).append('H');

    }

  }

  if (dp != null && dp[0] != null && dp[0][1] != 0) {

    if (dp[0][1] > 0) {

      sb.append("\u001B&a-").append(gen.formatDouble2(dp[0][1] / 100.0)).append('V');

    }

 else {

      sb.append("\u001B&a+").append(gen.formatDouble2(-dp[0][1] / 100.0)).append('V');

    }

  }

  for (int i=0; i < l; i++) {

    char orgChar=text.charAt(i);

    char ch;

    float xGlyphAdjust=0;

    float yGlyphAdjust=0;

    if (font.hasChar(orgChar)) {

      ch=font.mapChar(orgChar);

    }

 else {

      if (CharUtilities.isFixedWidthSpace(orgChar)) {

        ch=font.mapChar(CharUtilities.SPACE);

        int spaceDiff=font.getCharWidth(ch) - font.getCharWidth(orgChar);

        xGlyphAdjust=-(10 * spaceDiff / fontSize);

      }

 else {

        ch=font.mapChar(orgChar);

      }

    }

    sb.append(ch);

    if ((wordSpacing != 0) && CharUtilities.isAdjustableSpace(orgChar)) {

      xGlyphAdjust+=wordSpacing;

    }

    xGlyphAdjust+=letterSpacing;

    if (dp != null && i < dp.length && dp[i] != null) {

      xGlyphAdjust+=dp[i][2] - dp[i][0];

      yGlyphAdjust+=dp[i][3] - dp[i][1];

    }

    if (dp != null && i < dp.length - 1 && dp[i + 1] != null) {

      xGlyphAdjust+=dp[i + 1][0];

      yGlyphAdjust+=dp[i + 1][1];

    }

    if (xGlyphAdjust != 0) {

      if (xGlyphAdjust > 0) {

        sb.append("\u001B&a+").append(gen.formatDouble2(xGlyphAdjust / 100.0)).append('H');

      }

 else {

        sb.append("\u001B&a-").append(gen.formatDouble2(-xGlyphAdjust / 100.0)).append('H');

      }

    }

    if (yGlyphAdjust != 0) {

      if (yGlyphAdjust > 0) {

        sb.append("\u001B&a-").append(gen.formatDouble2(yGlyphAdjust / 100.0)).append('V');

      }

 else {

        sb.append("\u001B&a+").append(gen.formatDouble2(-yGlyphAdjust / 100.0)).append('V');

      }

    }

  }

  gen.getOutputStream().write(sb.toString().getBytes(gen.getTextEncoding()));

}

Location: PCLPainter.java

Content: 

private void drawTextUsingSoftFont(int x,int y,int letterSpacing,int wordSpacing,int[][] dp,String text,FontTriplet triplet,PCLSoftFont softFont) throws IOException {

  Color textColor=state.getTextColor();

  if (textColor != null) {

    gen.setTransparencyMode(true,false);

    if (getDocumentHandler().getPCLUtil().isColorEnabled()) {

      gen.selectColor(textColor);

    }

 else {

      gen.selectGrayscale(textColor);

    }

  }

  if (x != -1 && y != -1) {

    setCursorPos(x,y);

  }

  float fontSize=state.getFontSize() / 1000f;

  Font font=getFontInfo().getFontInstance(triplet,state.getFontSize());

  int l=text.length();

  int[] dx=IFUtil.convertDPToDX(dp);

  int dxl=(dx != null ? dx.length : 0);

  StringBuffer sb=new StringBuffer(Math.max(16,l));

  if (dx != null && dxl > 0 && dx[0] != 0) {

    sb.append("\u001B&a+").append(gen.formatDouble2(dx[0] / 100.0)).append('H');

  }

  String current="";

  for (int i=0; i < l; i++) {

    char orgChar=text.charAt(i);

    float glyphAdjust=0;

    if (!font.hasChar(orgChar)) {

      if (CharUtilities.isFixedWidthSpace(orgChar)) {

        char ch=font.mapChar(CharUtilities.SPACE);

        int spaceDiff=font.getCharWidth(ch) - font.getCharWidth(orgChar);

        glyphAdjust=-(10 * spaceDiff / fontSize);

      }

    }

    if ((wordSpacing != 0) && CharUtilities.isAdjustableSpace(orgChar)) {

      glyphAdjust+=wordSpacing;

    }

    current+=orgChar;

    glyphAdjust+=letterSpacing;

    if (dx != null && i < dxl - 1) {

      glyphAdjust+=dx[i + 1];

    }

    if (glyphAdjust != 0) {

      gen.getOutputStream().write(sb.toString().getBytes(gen.getTextEncoding()));

      for (int j=0; j < current.length(); j++) {

        gen.getOutputStream().write(softFont.getCharCode(current.charAt(j)));

      }

      sb=new StringBuffer();

      String command=(glyphAdjust > 0) ? "\u001B&a+" : "\u001B&a";

      sb.append(command).append(gen.formatDouble2(glyphAdjust / 100.0)).append('H');

      current="";

    }

  }

  if (!current.equals("")) {

    gen.getOutputStream().write(sb.toString().getBytes(gen.getTextEncoding()));

    for (int i=0; i < current.length(); i++) {

      gen.getOutputStream().write(softFont.getCharCode(current.charAt(i)));

    }

  }

}

Location: PCLPainter.java

Content: 

private Rectangle getTextBoundingBox(int x,int y,int letterSpacing,int wordSpacing,int[][] dp,String text,Font font,FontMetricsMapper metrics){

  int maxAscent=metrics.getMaxAscent(font.getFontSize()) / 1000;

  int descent=metrics.getDescender(font.getFontSize()) / 1000;

  int safetyMargin=(int)(SAFETY_MARGIN_FACTOR * font.getFontSize());

  Rectangle boundingRect=new Rectangle(x,y - maxAscent - safetyMargin,0,maxAscent - descent + 2 * safetyMargin);

  int l=text.length();

  int[] dx=IFUtil.convertDPToDX(dp);

  int dxl=(dx != null ? dx.length : 0);

  if (dx != null && dxl > 0 && dx[0] != 0) {

    boundingRect.setLocation(boundingRect.x - (int)Math.ceil(dx[0] / 10f),boundingRect.y);

  }

  float width=0.0f;

  for (int i=0; i < l; i++) {

    char orgChar=text.charAt(i);

    float glyphAdjust=0;

    int cw=font.getCharWidth(orgChar);

    if ((wordSpacing != 0) && CharUtilities.isAdjustableSpace(orgChar)) {

      glyphAdjust+=wordSpacing;

    }

    glyphAdjust+=letterSpacing;

    if (dx != null && i < dxl - 1) {

      glyphAdjust+=dx[i + 1];

    }

    width+=cw + glyphAdjust;

  }

  int extraWidth=font.getFontSize() / 3;

  boundingRect.setSize((int)Math.ceil(width) + extraWidth,boundingRect.height);

  return boundingRect;

}

Location: PCLPainter.java

Content: 

private boolean isSpeedOptimized(){

  return getPCLUtil().getRenderingMode() == PCLRenderingMode.SPEED;

}

Location: PCLPainter.java

Content: 

private boolean isTrueType(Typeface tf){

  if (tf.getFontType().equals(FontType.TRUETYPE)) {

    return true;

  }

 else   if (tf instanceof CustomFontMetricsMapper) {

    Typeface realFont=((CustomFontMetricsMapper)tf).getRealFont();

    if (realFont instanceof MultiByteFont) {

      return ((MultiByteFont)realFont).getCIDType().equals(CIDFontType.CIDTYPE2);

    }

  }

  return false;

}

Location: PCLPainter.java

Content: 

private void paintMarksAsBitmap(Graphics2DImagePainter painter,Rectangle boundingBox) throws IFException {

  ImageInfo info=new ImageInfo(null,null);

  ImageSize size=new ImageSize();

  size.setSizeInMillipoints(boundingBox.width,boundingBox.height);

  info.setSize(size);

  ImageGraphics2D img=new ImageGraphics2D(info,painter);

  Map hints=new java.util.HashMap();

  if (isSpeedOptimized()) {

    hints.put(ImageProcessingHints.BITMAP_TYPE_INTENT,ImageProcessingHints.BITMAP_TYPE_INTENT_MONO);

  }

 else {

    hints.put(ImageProcessingHints.BITMAP_TYPE_INTENT,ImageProcessingHints.BITMAP_TYPE_INTENT_GRAY);

  }

  hints.put(ImageHandlerUtil.CONVERSION_MODE,ImageHandlerUtil.CONVERSION_MODE_BITMAP);

  PCLRenderingContext context=(PCLRenderingContext)createRenderingContext();

  context.setSourceTransparencyEnabled(true);

  try {

    drawImage(img,boundingBox,context,true,hints);

  }

 catch (  IOException ioe) {

    throw new IFException("I/O error while painting marks using a bitmap",ioe);

  }

catch (  ImageException ie) {

    throw new IFException("Error while painting marks using a bitmap",ie);

  }

}

Location: PCLPainter.java

Content: 

/** 

 * Main constructor.

 * @param parent the parent document handler

 * @param pageDefinition the page definition describing the page to be rendered

 */

public PCLPainter(PCLDocumentHandler parent,PCLPageDefinition pageDefinition){

  super(parent);

  this.gen=parent.getPCLGenerator();

  this.state=IFState.create();

  this.currentPageDefinition=pageDefinition;

}

Location: PCLPainter.java

Content: 

/** 

 * Sets the current cursor position. The coordinates are transformed to the absolute position on the logical PCL page and then passed on to the PCLGenerator.

 * @param x the x coordinate (in millipoints)

 * @param y the y coordinate (in millipoints)

 */

void setCursorPos(int x,int y) throws IOException {

  Point2D transPoint=transformedPoint(x,y);

  gen.setCursorPos(transPoint.getX(),transPoint.getY());

}

