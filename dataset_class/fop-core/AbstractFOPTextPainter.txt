Location: AbstractFOPTextPainter.java

Content: 

/** 

 * Create a new PS text painter with the given font information.

 * @param nativeTextHandler the NativeTextHandler instance used for text painting

 */

public AbstractFOPTextPainter(FOPTextHandler nativeTextHandler,TextPainter proxyTextPainter){

  this.nativeTextHandler=nativeTextHandler;

  this.proxyTextPainter=proxyTextPainter;

}

Location: AbstractFOPTextPainter.java

Content: 

/** 

 * Get the bounds. This uses the StrokingTextPainter to get the bounds since in theory it should be the same.

 * @param node the text node

 * @return the bounds of the text

 */

public Rectangle2D getBounds2D(TextNode node){

  return proxyTextPainter.getBounds2D(node);

}

Location: AbstractFOPTextPainter.java

Content: 

private Font getFont(AttributedCharacterIterator aci){

  Font[] fonts=ACIUtils.findFontsForBatikACI(aci,nativeTextHandler.getFontInfo());

  return fonts == null ? null : fonts[0];

}

Location: AbstractFOPTextPainter.java

Content: 

/** 

 * Get the geometry bounds. This uses the StrokingTextPainter to get the bounds since in theory it should be the same.

 * @param node the text node

 * @return the bounds of the text

 */

public Rectangle2D getGeometryBounds(TextNode node){

  return proxyTextPainter.getGeometryBounds(node);

}

Location: AbstractFOPTextPainter.java

Content: 

/** 

 * Get the highlighted shape. This does nothing since the output is AFP and not interactive.

 * @param beginMark the start mark

 * @param endMark the end mark

 * @return null

 */

public Shape getHighlightShape(Mark beginMark,Mark endMark){

  return null;

}

Location: AbstractFOPTextPainter.java

Content: 

/** 

 * Get the mark. This does nothing since the output is AFP and not interactive.

 * @param node the text node

 * @param pos the position

 * @param all select all

 * @return null

 */

public Mark getMark(TextNode node,int pos,boolean all){

  return null;

}

Location: AbstractFOPTextPainter.java

Content: 

/** 

 * Get the outline shape of the text characters. This uses the StrokingTextPainter to get the outline shape since in theory it should be the same.

 * @param node the text node

 * @return the outline shape of the text characters

 */

public Shape getOutline(TextNode node){

  return proxyTextPainter.getOutline(node);

}

Location: AbstractFOPTextPainter.java

Content: 

/** 

 * Get selected. This does nothing since the output is AFP and not interactive.

 * @param start the start mark

 * @param finish the finish mark

 * @return null

 */

public int[] getSelected(Mark start,Mark finish){

  return null;

}

Location: AbstractFOPTextPainter.java

Content: 

private float getStringWidth(String str,Font font){

  float wordWidth=0;

  float whitespaceWidth=font.getWidth(font.mapChar(' '));

  for (int i=0; i < str.length(); i++) {

    float charWidth;

    char c=str.charAt(i);

    if (!((c == ' ') || (c == '\n') || (c == '\r')|| (c == '\t'))) {

      charWidth=font.getWidth(font.mapChar(c));

      if (charWidth <= 0) {

        charWidth=whitespaceWidth;

      }

    }

 else {

      charWidth=whitespaceWidth;

    }

    wordWidth+=charWidth;

  }

  return wordWidth / 1000f;

}

Location: AbstractFOPTextPainter.java

Content: 

/** 

 * Extract the raw text from an ACI.

 * @param aci ACI to inspect

 * @return the extracted text

 */

protected String getText(AttributedCharacterIterator aci){

  StringBuffer sb=new StringBuffer(aci.getEndIndex() - aci.getBeginIndex());

  for (char c=aci.first(); c != CharacterIterator.DONE; c=aci.next()) {

    sb.append(c);

  }

  return sb.toString();

}

Location: AbstractFOPTextPainter.java

Content: 

/** 

 * Checks whether the Graphics2D is compatible with this text painter. Batik may pass in a Graphics2D instance that paints on a special buffer image, for example for filtering operations. In that case, the text painter should be bypassed.

 * @param g2d the Graphics2D instance to check

 * @return true if the Graphics2D is supported

 */

protected abstract boolean isSupportedGraphics2D(Graphics2D g2d);

Location: AbstractFOPTextPainter.java

Content: 

/** 

 * Paints the specified attributed character iterator using the specified Graphics2D and context and font context.

 * @param node the TextNode to paint

 * @param g2d the Graphics2D to use

 */

public void paint(TextNode node,Graphics2D g2d){

  if (isSupportedGraphics2D(g2d)) {

    new TextRunPainter().paintTextRuns(node.getTextRuns(),g2d,node.getLocation());

  }

  proxyTextPainter.paint(node,g2d);

}

Location: AbstractFOPTextPainter.java

Content: 

/** 

 * Select at. This does nothing since the output is AFP and not interactive.

 * @param x the x position

 * @param y the y position

 * @param node the text node

 * @return null

 */

public Mark selectAt(double x,double y,TextNode node){

  return null;

}

Location: AbstractFOPTextPainter.java

Content: 

/** 

 * Selec first. This does nothing since the output is AFP and not interactive.

 * @param node the text node

 * @return null

 */

public Mark selectFirst(TextNode node){

  return null;

}

Location: AbstractFOPTextPainter.java

Content: 

/** 

 * Select last. This does nothing since the output is AFP and not interactive.

 * @param node the text node

 * @return null

 */

public Mark selectLast(TextNode node){

  return null;

}

Location: AbstractFOPTextPainter.java

Content: 

/** 

 * Select to. This does nothing since the output is AFP and not interactive.

 * @param x the x position

 * @param y the y position

 * @param beginMark the start mark

 * @return null

 */

public Mark selectTo(double x,double y,Mark beginMark){

  return null;

}

