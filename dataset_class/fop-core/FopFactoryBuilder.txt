Location: FopFactoryBuilder.java

Content: 

/** 

 * Returns the  {@link FopFactoryConfig} which is needed to get an instance of{@link FopFactory}.

 * @return build the {@link FopFactoryConfig}

 * @deprecated Exposing the {@link FopFactoryConfig} is only to maintain backwards compatibility

 */

public FopFactoryConfig buildConfig(){

  return buildConfiguration();

}

Location: FopFactoryBuilder.java

Content: 

/** 

 * Builds the configuration object used by the FopFactory.

 * @return the config for the {@link FopFactory}

 */

FopFactoryConfig buildConfiguration(){

  fopFactoryConfigBuilder=CompletedFopFactoryConfigBuilder.INSTANCE;

  return config;

}

Location: FopFactoryBuilder.java

Content: 

/** 

 * A builder class for  {@link FopFactory} which can be used for setting configuration.

 * @param enviro the profile of the FOP deployment environment

 */

public FopFactoryBuilder(EnvironmentProfile enviro){

  config=new FopFactoryConfigImpl(enviro);

  fopFactoryConfigBuilder=new ActiveFopFactoryConfigBuilder((FopFactoryConfigImpl)config);

}

Location: FopFactoryBuilder.java

Content: 

/** 

 * A builder class for  {@link FopFactory} which can be used for setting configuration. This isa helper constructor that uses the default URI resolver implementation that FOP packages provide.

 * @param defaultBaseURI the default base URI for resolving URIs against

 */

public FopFactoryBuilder(URI defaultBaseURI){

  this(defaultBaseURI,ResourceResolverFactory.createDefaultResourceResolver());

}

Location: FopFactoryBuilder.java

Content: 

/** 

 * A builder class for  {@link FopFactory} which can be used for setting configuration.

 * @param defaultBaseURI the default base URI for resolving URIs against

 * @param resourceResolver the URI resolver

 */

public FopFactoryBuilder(URI defaultBaseURI,ResourceResolver resourceResolver){

  this(EnvironmentalProfileFactory.createDefault(defaultBaseURI,resourceResolver));

}

Location: FopFactoryBuilder.java

Content: 

/** 

 * FOP will ignore the colletion of XML element namespaces.

 * @param namespaceURIs a collection of namespace URIs to ignore

 * @return <code>this</code>

 */

public FopFactoryBuilder ignoreNamespaces(Collection<String> namespaceURIs){

  fopFactoryConfigBuilder.ignoreNamespaces(namespaceURIs);

  return this;

}

Location: FopFactoryBuilder.java

Content: 

/** 

 * FOP will ignore the specified XML element namespace.

 * @param namespaceURI the namespace URI to ignore

 * @return <code>this</code>

 */

public FopFactoryBuilder ignoreNamespace(String namespaceURI){

  fopFactoryConfigBuilder.ignoreNamespace(namespaceURI);

  return this;

}

Location: FopFactoryBuilder.java

Content: 

/** 

 * Sets whether to include accessibility features in document creation.

 * @param enableAccessibility true to set accessibility on

 * @return <code>this</code>

 */

public FopFactoryBuilder setAccessibility(boolean enableAccessibility){

  fopFactoryConfigBuilder.setAccessibility(enableAccessibility);

  return this;

}

Location: FopFactoryBuilder.java

Content: 

/** 

 * Sets the base URI, this will be used for resolving all URIs given to FOP.

 * @param baseURI the base URI

 * @return <code>this</code>

 */

public FopFactoryBuilder setBaseURI(URI baseURI){

  fopFactoryConfigBuilder.setBaseURI(baseURI);

  return this;

}

Location: FopFactoryBuilder.java

Content: 

public FopFactoryBuilder setComplexScriptFeatures(boolean csf){

  fopFactoryConfigBuilder.setComplexScriptFeaturesEnabled(csf);

  return this;

}

Location: FopFactoryBuilder.java

Content: 

/** 

 * Sets the Avalon configuration if a FOP conf is used.

 * @param cfg the fop conf configuration

 * @return <code>this</code>

 */

public FopFactoryBuilder setConfiguration(Configuration cfg){

  fopFactoryConfigBuilder.setConfiguration(cfg);

  return this;

}

Location: FopFactoryBuilder.java

Content: 

public FopFactoryBuilder setHyphenBaseResourceResolver(InternalResourceResolver hyphenationResourceResolver){

  fopFactoryConfigBuilder.setHyphenationResourceResolver(hyphenationResourceResolver);

  return this;

}

Location: FopFactoryBuilder.java

Content: 

public FopFactoryBuilder setHyphPatNames(Map<String,String> hyphPatNames){

  fopFactoryConfigBuilder.setHyphPatNames(hyphPatNames);

  return this;

}

Location: FopFactoryBuilder.java

Content: 

public FopFactoryBuilder setKeepEmptyTags(boolean b){

  fopFactoryConfigBuilder.setKeepEmptyTags(b);

  return this;

}

Location: FopFactoryBuilder.java

Content: 

/** 

 * Sets the  {@link LayoutManagerMaker} so that users can configure how FOP creates{@link org.apache.fop.layoutmgr.LayoutManager}s.

 * @param lmMaker he layout manager maker

 * @return <code>this</code>

 */

public FopFactoryBuilder setLayoutManagerMakerOverride(LayoutManagerMaker lmMaker){

  fopFactoryConfigBuilder.setLayoutManagerMakerOverride(lmMaker);

  return this;

}

Location: FopFactoryBuilder.java

Content: 

/** 

 * Sets the page height of the paginated output.

 * @param pageHeight the page height

 * @return <code>this</code>

 */

public FopFactoryBuilder setPageHeight(String pageHeight){

  fopFactoryConfigBuilder.setPageHeight(pageHeight);

  return this;

}

Location: FopFactoryBuilder.java

Content: 

/** 

 * Sets the page width of the paginated output.

 * @param pageWidth the page width

 * @return <code>this</code>

 */

public FopFactoryBuilder setPageWidth(String pageWidth){

  fopFactoryConfigBuilder.setPageWidth(pageWidth);

  return this;

}

Location: FopFactoryBuilder.java

Content: 

/** 

 * Sets whether to perform strict validation on the FO used.

 * @param validateStrictly true if the FO is to be strictly validated

 * @return <code>this</code>

 */

public FopFactoryBuilder setStrictFOValidation(boolean validateStrictly){

  fopFactoryConfigBuilder.setStrictFOValidation(validateStrictly);

  return this;

}

Location: FopFactoryBuilder.java

Content: 

/** 

 * Sets whether to perform strict alidation on the user-configuration.

 * @param validateStrictly true if the fop conf is to be strictly validated

 * @return <code>this</code>

 */

public FopFactoryBuilder setStrictUserConfigValidation(boolean validateStrictly){

  fopFactoryConfigBuilder.setStrictUserConfigValidation(validateStrictly);

  return this;

}

