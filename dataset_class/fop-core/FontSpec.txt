Location: FontSpec.java

Content: 

/** 

 * Adds font family names.

 * @param names the names

 */

public void addFamilyNames(Collection<String> names){

  this.familyNames.addAll(names);

}

Location: FontSpec.java

Content: 

/** 

 * Adds a font triplet.

 * @param triplet the font triplet

 */

public void addTriplet(FontTriplet triplet){

  this.triplets.add(triplet);

}

Location: FontSpec.java

Content: 

@Override public int compareTo(Object o){

  if (o instanceof FontSpec) {

    FontSpec other=(FontSpec)o;

    return metrics.getFullName().compareTo(other.metrics.getFullName());

  }

 else {

    return 1;

  }

}

Location: FontSpec.java

Content: 

/** 

 * Creates a new font spec.

 * @param key the internal font key

 * @param metrics the font metrics

 */

public FontSpec(String key,FontMetrics metrics){

  this.key=key;

  this.metrics=metrics;

}

Location: FontSpec.java

Content: 

/** 

 * Returns the font family names.

 * @return the font family names

 */

public SortedSet getFamilyNames(){

  return Collections.unmodifiableSortedSet(this.familyNames);

}

Location: FontSpec.java

Content: 

/** 

 * Returns the font metrics.

 * @return the font metrics

 */

public FontMetrics getFontMetrics(){

  return this.metrics;

}

Location: FontSpec.java

Content: 

/** 

 * Returns the internal font key.

 * @return the internal font key

 */

public String getKey(){

  return this.key;

}

Location: FontSpec.java

Content: 

/** 

 * Returns the font triplets.

 * @return the font triplets

 */

public Collection getTriplets(){

  return Collections.unmodifiableCollection(this.triplets);

}

