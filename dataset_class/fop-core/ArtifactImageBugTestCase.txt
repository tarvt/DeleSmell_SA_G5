Location: ArtifactImageBugTestCase.java

Content: 

private void formatFO(URL foFile,ByteArrayOutputStream out,String mimeFopIf) throws IOException, SAXException, TransformerException {

  FopFactory fopFactory=getFopFactory();

  FOUserAgent userAgent=fopFactory.newFOUserAgent();

  if (mimeFopIf.equals(MimeConstants.MIME_FOP_IF)) {

    IFSerializer serializer=new IFSerializer(new IFContext(userAgent));

    IFDocumentHandler targetHandler=userAgent.getRendererFactory().createDocumentHandler(userAgent,MimeConstants.MIME_PDF);

    serializer.mimicDocumentHandler(targetHandler);

    userAgent.setDocumentHandlerOverride(serializer);

  }

  Fop fop=fopFactory.newFop(mimeFopIf,userAgent,out);

  Transformer transformer=TransformerFactory.newInstance().newTransformer();

  Source src=new StreamSource(foFile.openStream());

  Result res=new SAXResult(fop.getDefaultHandler());

  transformer.transform(src,res);

}

Location: ArtifactImageBugTestCase.java

Content: 

private URL needResource(Class contextClass,String resourceName){

  URL url=contextClass.getResource(resourceName);

  if (url == null) {

    throw new MissingResourceException("Resource not found: " + resourceName,contextClass.getName(),resourceName);

  }

  return url;

}

Location: ArtifactImageBugTestCase.java

Content: 

private URL needResource(String resourceName){

  return needResource(getClass(),resourceName);

}

Location: ArtifactImageBugTestCase.java

Content: 

@Test public void testMarkerStateTrackingBug() throws Exception {

  ByteArrayOutputStream out=new ByteArrayOutputStream();

  formatFO(needResource("artifact-image-npe.fo"),out,MimeConstants.MIME_PDF);

}

