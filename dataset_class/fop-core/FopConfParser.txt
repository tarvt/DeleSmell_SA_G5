Location: FopConfParser.java

Content: 

private static void addError(String message,StringBuffer error){

  if (error.length() != 0) {

    error.append(". ");

  }

  error.append(message);

}

Location: FopConfParser.java

Content: 

private void configureImageLoading(Configuration parent,boolean strict) throws FOPException {

  if (parent == null) {

    return;

  }

  ImageImplRegistry registry=fopFactoryBuilder.getImageManager().getRegistry();

  Configuration[] penalties=parent.getChildren("penalty");

  try {

    for (    Configuration penaltyCfg : penalties) {

      String className=penaltyCfg.getAttribute("class");

      String value=penaltyCfg.getAttribute("value");

      Penalty p=null;

      if (value.toUpperCase(Locale.getDefault()).startsWith("INF")) {

        p=Penalty.INFINITE_PENALTY;

      }

 else {

        try {

          p=Penalty.toPenalty(Integer.parseInt(value));

        }

 catch (        NumberFormatException nfe) {

          LogUtil.handleException(log,nfe,strict);

        }

      }

      if (p != null) {

        registry.setAdditionalPenalty(className,p);

      }

    }

  }

 catch (  ConfigurationException e) {

    LogUtil.handleException(log,e,strict);

  }

}

Location: FopConfParser.java

Content: 

private void configure(final URI baseURI,final ResourceResolver resourceResolver,Configuration cfg) throws FOPException {

  if (log.isDebugEnabled()) {

    log.debug("Initializing FopFactory Configuration");

  }

  if (cfg.getChild("strict-validation",false) != null) {

    try {

      boolean strict=cfg.getChild("strict-validation").getValueAsBoolean();

      fopFactoryBuilder.setStrictFOValidation(strict);

    }

 catch (    ConfigurationException e) {

      LogUtil.handleException(log,e,false);

    }

  }

  boolean strict=false;

  if (cfg.getChild("strict-configuration",false) != null) {

    try {

      strict=cfg.getChild("strict-configuration").getValueAsBoolean();

      fopFactoryBuilder.setStrictUserConfigValidation(strict);

    }

 catch (    ConfigurationException e) {

      LogUtil.handleException(log,e,false);

    }

  }

  if (cfg.getChild("accessibility",false) != null) {

    try {

      fopFactoryBuilder.setAccessibility(cfg.getChild("accessibility").getValueAsBoolean());

      fopFactoryBuilder.setKeepEmptyTags(cfg.getChild("accessibility").getAttributeAsBoolean(Accessibility.KEEP_EMPTY_TAGS,true));

    }

 catch (    ConfigurationException e) {

      LogUtil.handleException(log,e,false);

    }

  }

  if (cfg.getChild("base",false) != null) {

    try {

      URI confUri=InternalResourceResolver.getBaseURI(cfg.getChild("base").getValue(null));

      fopFactoryBuilder.setBaseURI(baseURI.resolve(confUri));

    }

 catch (    URISyntaxException use) {

      LogUtil.handleException(log,use,strict);

    }

  }

  if (cfg.getChild("source-resolution",false) != null) {

    float srcRes=cfg.getChild("source-resolution").getValueAsFloat(FopFactoryConfig.DEFAULT_SOURCE_RESOLUTION);

    fopFactoryBuilder.setSourceResolution(srcRes);

    if (log.isDebugEnabled()) {

      log.debug("source-resolution set to: " + srcRes + "dpi");

    }

  }

  if (cfg.getChild("target-resolution",false) != null) {

    float targetRes=cfg.getChild("target-resolution").getValueAsFloat(FopFactoryConfig.DEFAULT_TARGET_RESOLUTION);

    fopFactoryBuilder.setTargetResolution(targetRes);

    if (log.isDebugEnabled()) {

      log.debug("target-resolution set to: " + targetRes + "dpi");

    }

  }

  if (cfg.getChild("break-indent-inheritance",false) != null) {

    try {

      fopFactoryBuilder.setBreakIndentInheritanceOnReferenceAreaBoundary(cfg.getChild("break-indent-inheritance").getValueAsBoolean());

    }

 catch (    ConfigurationException e) {

      LogUtil.handleException(log,e,strict);

    }

  }

  Configuration pageConfig=cfg.getChild("default-page-settings");

  if (pageConfig.getAttribute("height",null) != null) {

    String pageHeight=pageConfig.getAttribute("height",FopFactoryConfig.DEFAULT_PAGE_HEIGHT);

    fopFactoryBuilder.setPageHeight(pageHeight);

    if (log.isInfoEnabled()) {

      log.info("Default page-height set to: " + pageHeight);

    }

  }

  if (pageConfig.getAttribute("width",null) != null) {

    String pageWidth=pageConfig.getAttribute("width",FopFactoryConfig.DEFAULT_PAGE_WIDTH);

    fopFactoryBuilder.setPageWidth(pageWidth);

    if (log.isInfoEnabled()) {

      log.info("Default page-width set to: " + pageWidth);

    }

  }

  if (cfg.getChild("complex-scripts") != null) {

    Configuration csConfig=cfg.getChild("complex-scripts");

    fopFactoryBuilder.setComplexScriptFeatures(!csConfig.getAttributeAsBoolean("disabled",false));

  }

  setHyphenationBase(cfg,resourceResolver,baseURI,fopFactoryBuilder);

  setHyphPatNames(cfg,fopFactoryBuilder,strict);

  if (cfg.getChild(PREFER_RENDERER,false) != null) {

    try {

      fopFactoryBuilder.setPreferRenderer(cfg.getChild(PREFER_RENDERER).getValueAsBoolean());

    }

 catch (    ConfigurationException e) {

      LogUtil.handleException(log,e,strict);

    }

  }

  new FontManagerConfigurator(cfg,baseURI,fopFactoryBuilder.getBaseURI(),resourceResolver).configure(fopFactoryBuilder.getFontManager(),strict);

  configureImageLoading(cfg.getChild("image-loading",false),strict);

}

Location: FopConfParser.java

Content: 

/** 

 * Constructor that takes the FOP conf and uses the default URI resolver.

 * @param fopConfFile the FOP conf file

 * @throws SAXException if a SAX error was thrown parsing the FOP conf

 * @throws IOException if an I/O error is thrown while parsing the FOP conf

 */

public FopConfParser(File fopConfFile) throws SAXException, IOException {

  this(fopConfFile,ResourceResolverFactory.createDefaultResourceResolver());

}

Location: FopConfParser.java

Content: 

/** 

 * Constructor that parses the FOP conf and uses the URI resolver given.

 * @param fopConfFile the FOP conf file

 * @param resourceResolver the URI resolver

 * @throws SAXException if a SAX error was thrown parsing the FOP conf

 * @throws IOException if an I/O error is thrown while parsing the FOP conf

 */

public FopConfParser(File fopConfFile,ResourceResolver resourceResolver) throws SAXException, IOException {

  this(new FileInputStream(fopConfFile),fopConfFile.toURI(),resourceResolver);

}

Location: FopConfParser.java

Content: 

/** 

 * Constructor that takes the FOP conf and a default base URI and uses the default URI resolver.

 * @param fopConfFile the FOP conf file

 * @param defaultBaseURI the default base URI

 * @throws SAXException if a SAX error was thrown parsing the FOP conf

 * @throws IOException if an I/O error is thrown while parsing the FOP conf

 */

public FopConfParser(File fopConfFile,URI defaultBaseURI) throws SAXException, IOException {

  this(new FileInputStream(fopConfFile),fopConfFile.toURI(),EnvironmentalProfileFactory.createDefault(defaultBaseURI,ResourceResolverFactory.createDefaultResourceResolver()));

}

Location: FopConfParser.java

Content: 

/** 

 * Constructor that takes the FOP conf in the form of an  {@link InputStream}. A default base URI must be given as a fall-back mechanism for URI resolution.

 * @param fopConfStream the fop conf input stream

 * @param enviro the profile of the FOP deployment environment

 * @throws SAXException if a SAX error was thrown parsing the FOP conf

 * @throws IOException if an I/O error is thrown while parsing the FOP conf

 */

public FopConfParser(InputStream fopConfStream,EnvironmentProfile enviro) throws SAXException, IOException {

  this(fopConfStream,enviro.getDefaultBaseURI(),enviro);

}

Location: FopConfParser.java

Content: 

/** 

 * Constructor that takes the FOP conf in the form of an  {@link InputStream}. A default base URI must be given as a fall-back mechanism for URI resolution. The default URI resolvers is used.

 * @param fopConfStream the fop conf input stream

 * @param defaultBaseURI the default base URI

 * @throws SAXException if a SAX error was thrown parsing the FOP conf

 * @throws IOException if an I/O error is thrown while parsing the FOP conf

 */

public FopConfParser(InputStream fopConfStream,URI defaultBaseURI) throws SAXException, IOException {

  this(fopConfStream,defaultBaseURI,ResourceResolverFactory.createDefaultResourceResolver());

}

Location: FopConfParser.java

Content: 

public FopConfParser(InputStream fopConfStream,URI baseURI,EnvironmentProfile enviro) throws SAXException, IOException {

  DefaultConfigurationBuilder cfgBuilder=new DefaultConfigurationBuilder();

  Configuration cfg;

  try {

    cfg=cfgBuilder.build(fopConfStream);

  }

 catch (  ConfigurationException e) {

    throw new FOPException(e);

  }

  fopFactoryBuilder=new FopFactoryBuilder(enviro).setConfiguration(cfg);

  configure(baseURI,enviro.getResourceResolver(),cfg);

}

Location: FopConfParser.java

Content: 

/** 

 * Constructor that takes the FOP conf in the form of an  {@link InputStream}. A default base URI must be given as a fall-back mechanism for URI resolution.

 * @param fopConfStream the fop conf input stream

 * @param defaultBaseURI the default base URI

 * @param resourceResolver the URI resolver

 * @throws SAXException if a SAX error was thrown parsing the FOP conf

 * @throws IOException if an I/O error is thrown while parsing the FOP conf

 */

public FopConfParser(InputStream fopConfStream,URI defaultBaseURI,ResourceResolver resourceResolver) throws SAXException, IOException {

  this(fopConfStream,defaultBaseURI,EnvironmentalProfileFactory.createDefault(defaultBaseURI,resourceResolver));

}

Location: FopConfParser.java

Content: 

/** 

 * Returns the  {@link FopFactoryBuilder}.

 * @return the object for configuring the {@link FopFactory}

 */

public FopFactoryBuilder getFopFactoryBuilder(){

  return fopFactoryBuilder;

}

Location: FopConfParser.java

Content: 

private void setHyphenationBase(Configuration cfg,ResourceResolver resourceResolver,URI baseURI,FopFactoryBuilder fopFactoryBuilder) throws FOPException {

  if (cfg.getChild("hyphenation-base",false) != null) {

    try {

      URI fontBase=InternalResourceResolver.getBaseURI(cfg.getChild("hyphenation-base").getValue(null));

      fopFactoryBuilder.setHyphenBaseResourceResolver(ResourceResolverFactory.createInternalResourceResolver(baseURI.resolve(fontBase),resourceResolver));

    }

 catch (    URISyntaxException use) {

      LogUtil.handleException(log,use,true);

    }

  }

 else {

    fopFactoryBuilder.setHyphenBaseResourceResolver(ResourceResolverFactory.createInternalResourceResolver(fopFactoryBuilder.getBaseURI(),resourceResolver));

  }

}

Location: FopConfParser.java

Content: 

private void setHyphPatNames(Configuration cfg,FopFactoryBuilder builder,boolean strict) throws FOPException {

  Configuration[] hyphPatConfig=cfg.getChildren("hyphenation-pattern");

  if (hyphPatConfig.length != 0) {

    Map<String,String> hyphPatNames=new HashMap<String,String>();

    for (    Configuration aHyphPatConfig : hyphPatConfig) {

      String lang;

      String country;

      String filename;

      StringBuffer error=new StringBuffer();

      String location=aHyphPatConfig.getLocation();

      lang=aHyphPatConfig.getAttribute("lang",null);

      if (lang == null) {

        addError("The lang attribute of a hyphenation-pattern configuration" + " element must exist (" + location + ")",error);

      }

 else       if (!lang.matches("[a-zA-Z]{2}")) {

        addError("The lang attribute of a hyphenation-pattern configuration" + " element must consist of exactly two letters (" + location + ")",error);

      }

      lang=lang.toLowerCase(Locale.getDefault());

      country=aHyphPatConfig.getAttribute("country",null);

      if ("".equals(country)) {

        country=null;

      }

      if (country != null) {

        if (!country.matches("[a-zA-Z]{2}")) {

          addError("The country attribute of a hyphenation-pattern configuration" + " element must consist of exactly two letters (" + location + ")",error);

        }

        country=country.toUpperCase(Locale.getDefault());

      }

      filename=aHyphPatConfig.getValue(null);

      if (filename == null) {

        addError("The value of a hyphenation-pattern configuration" + " element may not be empty (" + location + ")",error);

      }

      if (error.length() != 0) {

        LogUtil.handleError(log,error.toString(),strict);

        continue;

      }

      String llccKey=HyphenationTreeCache.constructLlccKey(lang,country);

      String extension=aHyphPatConfig.getAttribute("extension",null);

      if ("xml".equals(extension)) {

        hyphPatNames.put(llccKey,filename + Hyphenator.XMLTYPE);

      }

 else       if ("hyp".equals(extension)) {

        hyphPatNames.put(llccKey,filename + Hyphenator.HYPTYPE);

      }

 else {

        hyphPatNames.put(llccKey,filename);

      }

      if (log.isDebugEnabled()) {

        log.debug("Using hyphenation pattern filename " + filename + " for lang=\""+ lang+ "\""+ (country != null ? ", country=\"" + country + "\"" : ""));

      }

    }

    builder.setHyphPatNames(hyphPatNames);

  }

}

