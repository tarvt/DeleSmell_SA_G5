Location: FONodeMocks.java

Content: 

private FONodeMocks(){

}

Location: FONodeMocks.java

Content: 

public static ColumnNumberManager mockGetColumnNumberManager(ColumnNumberManagerHolder mock){

  ColumnNumberManager mockColumnNumberManager=mock(ColumnNumberManager.class);

  when(mock.getColumnNumberManager()).thenReturn(mockColumnNumberManager);

  return mockColumnNumberManager;

}

Location: FONodeMocks.java

Content: 

public static EventBroadcaster mockGetEventBroadcaster(FOUserAgent mockFOUserAgent){

  EventBroadcaster mockBroadcaster=mock(EventBroadcaster.class);

  when(mockFOUserAgent.getEventBroadcaster()).thenReturn(mockBroadcaster);

  return mockBroadcaster;

}

Location: FONodeMocks.java

Content: 

public static FOEventHandler mockGetFOEventHandler(FONode mockFONode){

  FOEventHandler mockFOEventHandler=mock(FOEventHandler.class);

  mockGetUserAgent(mockFOEventHandler);

  when(mockFONode.getFOEventHandler()).thenReturn(mockFOEventHandler);

  return mockFOEventHandler;

}

Location: FONodeMocks.java

Content: 

public static ImageManager mockGetImageManager(FOUserAgent mockFOUserAgent){

  try {

    ImageManager mockImageManager=mock(ImageManager.class);

    when(mockImageManager.getImageInfo(anyString(),any(ImageSessionContext.class))).thenReturn(null);

    when(mockFOUserAgent.getImageManager()).thenReturn(mockImageManager);

    return mockImageManager;

  }

 catch (  ImageException e) {

    throw new RuntimeException(e);

  }

catch (  IOException e) {

    throw new RuntimeException(e);

  }

}

Location: FONodeMocks.java

Content: 

public static FOUserAgent mockGetUserAgent(FOEventHandler mockFOEventHandler){

  FOUserAgent mockFOUserAgent=mock(FOUserAgent.class);

  when(mockFOEventHandler.getUserAgent()).thenReturn(mockFOUserAgent);

  return mockFOUserAgent;

}

