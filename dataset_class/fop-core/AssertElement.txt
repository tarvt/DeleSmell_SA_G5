Location: AssertElement.java

Content: 

/** 

 * Creates a new AssertElement instance that is a child of the given  {@link FONode}

 * @param parent  the parent {@link FONode}

 */

public AssertElement(FONode parent){

  super(parent);

}

Location: AssertElement.java

Content: 

/** 

 * @see org.apache.fop.fo.FONode#getLocalName() 

 */

public String getLocalName(){

  return "assert";

}

Location: AssertElement.java

Content: 

/** 

 * @see org.apache.fop.fo.FONode#processNode

 */

public void processNode(String elementName,Locator locator,Attributes attlist,PropertyList propertyList) throws FOPException {

  ResultCollector collector=ResultCollector.getInstance();

  String propName=attlist.getValue("property");

  String expected=attlist.getValue("expected");

  String component=null;

  int dotIndex=propName.indexOf('.');

  if (dotIndex >= 0) {

    component=propName.substring(dotIndex + 1);

    propName=propName.substring(0,dotIndex);

  }

  int propID=FOPropertyMapping.getPropertyId(propName);

  if (propID < 0) {

    collector.notifyAssertionFailure("Property not found: " + propName);

  }

 else {

    Property prop;

    prop=propertyList.getParentPropertyList().get(propID);

    if (component != null) {

      Property mainProp=prop;

      prop=null;

      LengthPairProperty lpp=mainProp.getLengthPair();

      if (lpp != null) {

        prop=lpp.getComponent(FOPropertyMapping.getSubPropertyId(component));

      }

      LengthRangeProperty lrp=mainProp.getLengthRange();

      if (lrp != null) {

        prop=lrp.getComponent(FOPropertyMapping.getSubPropertyId(component));

      }

      KeepProperty kp=mainProp.getKeep();

      if (kp != null) {

        prop=kp.getComponent(FOPropertyMapping.getSubPropertyId(component));

      }

      SpaceProperty sp=mainProp.getSpace();

      if (sp != null) {

        prop=sp.getComponent(FOPropertyMapping.getSubPropertyId(component));

      }

    }

    String s;

    if (prop instanceof PercentLength) {

      s=prop.getString();

    }

 else {

      s=String.valueOf(prop);

    }

    if (!expected.equals(s)) {

      collector.notifyAssertionFailure(locator.getSystemId() + "\nProperty '" + propName+ "' expected to evaluate to '"+ expected+ "' but got '"+ s+ "'\n(test:assert in "+ propertyList.getParentFObj().getName()+ " at line #"+ locator.getLineNumber()+ ", column #"+ locator.getColumnNumber()+ ")\n");

    }

  }

}

