Location: Shading.java

Content: 

public int getBitsPerCoordinate(){

  return bitsPerCoordinate;

}

Location: Shading.java

Content: 

public int getBitsPerFlag(){

  return bitsPerFlag;

}

Location: Shading.java

Content: 

public List<Double> getCoords(){

  return coords;

}

Location: Shading.java

Content: 

public List<Boolean> getExtend(){

  return extend;

}

Location: Shading.java

Content: 

public Function getFunction(){

  return function;

}

Location: Shading.java

Content: 

public int getShadingType(){

  return shadingType;

}

Location: Shading.java

Content: 

public int getVerticesPerRow(){

  return verticesPerRow;

}

Location: Shading.java

Content: 

public boolean isAntiAlias(){

  return antiAlias;

}

Location: Shading.java

Content: 

private void outputFunction(StringBuilder out,FunctionRenderer functionRenderer){

  if (function != null) {

    out.append("/Function ");

    functionRenderer.outputFunction(out);

    out.append("\n");

  }

}

Location: Shading.java

Content: 

private void outputShadingType1(StringBuilder out,DoubleFormatter doubleFormatter,Shading.FunctionRenderer functionRenderer){

  outputFunction(out,functionRenderer);

}

Location: Shading.java

Content: 

private void outputShadingType2or3(StringBuilder out,DoubleFormatter doubleFormatter,Shading.FunctionRenderer functionRenderer){

  if (coords != null) {

    out.append("/Coords ");

    GradientMaker.outputDoubles(out,doubleFormatter,coords);

    out.append("\n");

  }

  out.append("/Extend [ ");

  for (  Boolean b : extend) {

    out.append(b);

    out.append(" ");

  }

  out.append("]\n");

  outputFunction(out,functionRenderer);

}

Location: Shading.java

Content: 

private void outputShadingType4or6or7(StringBuilder out,DoubleFormatter doubleFormatter,Shading.FunctionRenderer functionRenderer){

  if (bitsPerCoordinate > 0) {

    out.append("/BitsPerCoordinate " + bitsPerCoordinate + "\n");

  }

 else {

    out.append("/BitsPerCoordinate 1 \n");

  }

  if (bitsPerComponent > 0) {

    out.append("/BitsPerComponent " + bitsPerComponent + "\n");

  }

 else {

    out.append("/BitsPerComponent 1 \n");

  }

  if (bitsPerFlag > 0) {

    out.append("/BitsPerFlag " + bitsPerFlag + "\n");

  }

 else {

    out.append("/BitsPerFlag 2 \n");

  }

  outputFunction(out,functionRenderer);

}

Location: Shading.java

Content: 

private void outputShadingType5(StringBuilder out,DoubleFormatter doubleFormatter,Shading.FunctionRenderer functionRenderer){

  if (bitsPerCoordinate > 0) {

    out.append("/BitsPerCoordinate " + bitsPerCoordinate + "\n");

  }

 else {

    out.append("/BitsPerCoordinate 1 \n");

  }

  if (bitsPerComponent > 0) {

    out.append("/BitsPerComponent " + bitsPerComponent + "\n");

  }

 else {

    out.append("/BitsPerComponent 1 \n");

  }

  outputFunction(out,functionRenderer);

  if (verticesPerRow > 0) {

    out.append("/VerticesPerRow " + verticesPerRow + "\n");

  }

 else {

    out.append("/VerticesPerRow 2 \n");

  }

}

Location: Shading.java

Content: 

public void output(StringBuilder out,DoubleFormatter doubleFormatter,FunctionRenderer functionRenderer){

  out.append("<<\n/ShadingType " + shadingType + "\n");

  if (colorSpace != null) {

    out.append("/ColorSpace /" + colorSpace.getName() + "\n");

  }

  if (antiAlias) {

    out.append("/AntiAlias " + antiAlias + "\n");

  }

switch (shadingType) {

case 1:

    outputShadingType1(out,doubleFormatter,functionRenderer);

  break;

case 2:

case 3:

outputShadingType2or3(out,doubleFormatter,functionRenderer);

break;

case 4:

case 6:

case 7:

outputShadingType4or6or7(out,doubleFormatter,functionRenderer);

break;

case 5:

outputShadingType5(out,doubleFormatter,functionRenderer);

break;

default :

throw new UnsupportedOperationException("Shading type " + shadingType);

}

out.append(">>");

}

Location: Shading.java

Content: 

public Shading(int shadingType,PDFDeviceColorSpace colorSpace,List<Double> coords,Function function){

  this.shadingType=shadingType;

  this.colorSpace=colorSpace;

  this.antiAlias=false;

  this.coords=coords;

  this.function=function;

  this.extend=Arrays.asList(true,true);

  this.bitsPerCoordinate=0;

  this.bitsPerFlag=0;

  this.bitsPerComponent=0;

  this.verticesPerRow=0;

}

