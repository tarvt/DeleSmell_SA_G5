Location: LinkResolver.java

Content: 

/** 

 * Add dependent resolvable. Used to resolve second-order resolvables that depend on resolution of this resolver.

 * @param dependent resolvable

 */

public void addDependent(Resolvable dependent){

  if (dependents == null) {

    dependents=new ArrayList<Resolvable>();

  }

  dependents.add(dependent);

}

Location: LinkResolver.java

Content: 

public LinkResolver(){

  this(null,null);

}

Location: LinkResolver.java

Content: 

/** 

 * Create a new link resolver.

 * @param id the id to resolve

 * @param a the area that will have the link attribute

 */

public LinkResolver(String id,Area a){

  idRef=id;

  area=a;

}

Location: LinkResolver.java

Content: 

private void resolveDependents(String id,PageViewport pv){

  if (dependents != null) {

    List<PageViewport> pages=new ArrayList<PageViewport>();

    pages.add(pv);

    for (    Resolvable r : dependents) {

      r.resolveIDRef(id,pages);

    }

  }

}

Location: LinkResolver.java

Content: 

/** 

 * Resolve by adding an InternalLink trait to the area

 * @param id the target id (should be equal to the object's idRef)

 * @param pv the PageViewport containing the first area with the given id

 */

public void resolveIDRef(String id,PageViewport pv){

  if (idRef.equals(id) && pv != null) {

    resolved=true;

    if (area != null) {

      Trait.InternalLink iLink=new Trait.InternalLink(pv.getKey(),idRef);

      area.addTrait(Trait.INTERNAL_LINK,iLink);

      area=null;

    }

    resolveDependents(id,pv);

  }

}

