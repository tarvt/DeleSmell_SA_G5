Location: NestedTable.java

Content: 

/** 

 * fill the nested table 

 */

private void fillNestedTable(RtfTable tbl,int index) throws IOException {

  final String id="TABLE " + index;

{

    RtfTableRow r=tbl.newTableRow();

    r.newTableCell(80 * MM_TO_TWIPS).newParagraph().newText(id + ":nested cell 0,0. Nested table contains 3 rows with 1,2 and 3 cells respectively");

  }

{

    RtfTableRow r=tbl.newTableRow();

    r.newTableCell(40 * MM_TO_TWIPS).newParagraph().newText(id + ":nested cell 1,0, 40mm.");

    r.newTableCell(40 * MM_TO_TWIPS).newParagraph().newText(id + ":nested cell 1,1, 40mm.");

  }

{

    RtfTableRow r=tbl.newTableRow();

    r.newTableCell(30 * MM_TO_TWIPS).newParagraph().newText(id + ":nested cell 2,0, 30mm.");

    r.newTableCell(30 * MM_TO_TWIPS).newParagraph().newText(id + ":nested cell 2,1, 30mm.");

    r.newTableCell(20 * MM_TO_TWIPS).newParagraph().newText(id + ":nested cell 2,2, 20mm.");

  }

}

Location: NestedTable.java

Content: 

private void firstTestTable(RtfSection sect) throws IOException {

  sect.newParagraph().newText("First test: table with one nested table in cell 1,1");

  final RtfTable tbl=sect.newTable(new DummyTableColumnsInfo());

{

    RtfTableRow r=tbl.newTableRow();

    RtfTableCell c=r.newTableCell(160 * MM_TO_TWIPS);

    c.newParagraph().newText("cell 0,0, width 160mm, only cell in this row.");

  }

{

    RtfTableRow r=tbl.newTableRow();

    r.newTableCell(40 * MM_TO_TWIPS).newParagraph().newText("cell 1,0, width 40mm, to the left of nested table.");

    final RtfTableCell c=r.newTableCell(80 * MM_TO_TWIPS);

    c.newParagraph().newText("cell 1,1, width 80mm, this text is " + "followed by a nested table in the same cell, followed " + "by text that says 'AFTER NESTED TABLE'.");

    fillNestedTable(c.newTable(new DummyTableColumnsInfo()),1);

    c.newParagraph().newText("AFTER NESTED TABLE");

    r.newTableCell(40 * MM_TO_TWIPS).newParagraph().newText("cell 1,2, width 40mm, to the right of nested table.");

  }

{

    RtfTableRow r=tbl.newTableRow();

    r.newTableCell(80 * MM_TO_TWIPS).newParagraph().newText("cell 2,0, width 80mm, this row has two cells.");

    r.newTableCell(80 * MM_TO_TWIPS).newParagraph().newText("cell 2,1, width 80mm, last cell.");

  }

}

Location: NestedTable.java

Content: 

private void secondTestTable(RtfSection sect) throws IOException {

  sect.newParagraph().newText("Second test: table with two nested tables in cell 1,1");

  final RtfTable tbl=sect.newTable(new DummyTableColumnsInfo());

{

    RtfTableRow r=tbl.newTableRow();

    RtfTableCell c=r.newTableCell(160 * MM_TO_TWIPS);

    c.newParagraph().newText("second test table: cell 0,0, width 160mm, " + "only cell in this row.");

  }

{

    RtfTableRow r=tbl.newTableRow();

    r.newTableCell(40 * MM_TO_TWIPS).newParagraph().newText("cell 1,0, width 40mm, to the left of nested tables.");

    final RtfTableCell c=r.newTableCell(80 * MM_TO_TWIPS);

    c.newParagraph().newText("cell 1,1, width 80mm, this text is " + "followed by a nested table in the same cell, followed " + "by text that says 'BETWEEN', then another table, then 'AFTER'.");

    fillNestedTable(c.newTable(new DummyTableColumnsInfo()),2);

    c.newParagraph().newText("BETWEEN");

    fillNestedTable(c.newTable(new DummyTableColumnsInfo()),3);

    c.newParagraph().newText("AFTER");

    r.newTableCell(40 * MM_TO_TWIPS).newParagraph().newText("cell 1,2, width 40mm, to the right of nested table.");

  }

{

    RtfTableRow r=tbl.newTableRow();

    r.newTableCell(80 * MM_TO_TWIPS).newParagraph().newText("cell 2,0, width 80mm, this row has two cells.");

    r.newTableCell(80 * MM_TO_TWIPS).newParagraph().newText("cell 2,1, width 80mm, last cell.");

  }

}

Location: NestedTable.java

Content: 

private void thirdTestTable(RtfSection sect) throws IOException {

  sect.newParagraph().newText("Third test: table with two nested tables " + "in cell 1,1 and one nested table in cell 0,1");

  final RtfTable tbl=sect.newTable(new DummyTableColumnsInfo());

{

    RtfTableRow r=tbl.newTableRow();

    RtfTableCell c=r.newTableCell(80 * MM_TO_TWIPS);

    c.newParagraph().newText("third test table: cell 0,0, width 40mm, " + "the cell to its right contains a nested table with no other text.");

    c=r.newTableCell(80 * MM_TO_TWIPS);

    fillNestedTable(c.newTable(new DummyTableColumnsInfo()),4);

  }

{

    RtfTableRow r=tbl.newTableRow();

    r.newTableCell(40 * MM_TO_TWIPS).newParagraph().newText("cell 1,0, width 40mm, to the left of nested tables.");

    final RtfTableCell c=r.newTableCell(80 * MM_TO_TWIPS);

    c.newParagraph().newText("cell 1,1, width 80mm, this text is " + "followed by a nested table in the same cell, followed " + "by text that says 'BETWEEN', then another table, then 'AFTER'.");

    fillNestedTable(c.newTable(new DummyTableColumnsInfo()),5);

    c.newParagraph().newText("BETWEEN");

    fillNestedTable(c.newTable(new DummyTableColumnsInfo()),6);

    c.newParagraph().newText("AFTER");

    r.newTableCell(40 * MM_TO_TWIPS).newParagraph().newText("cell 1,2, width 40mm, to the right of nested table.");

  }

{

    RtfTableRow r=tbl.newTableRow();

    r.newTableCell(80 * MM_TO_TWIPS).newParagraph().newText("cell 2,0, width 80mm, this row has two cells.");

    r.newTableCell(80 * MM_TO_TWIPS).newParagraph().newText("cell 2,1, width 80mm, last cell.");

  }

}

