Location: GlyphPositioningState.java

Content: 

/** 

 * Perform adjustments at current position index.

 * @param v value containing adjustments

 * @return true if a non-zero adjustment was made

 */

public boolean adjust(GlyphPositioningTable.Value v){

  return adjust(v,0);

}

Location: GlyphPositioningState.java

Content: 

/** 

 * Perform adjustments at specified offset from current position index.

 * @param v value containing adjustments

 * @param offset from current position index

 * @return true if a non-zero adjustment was made

 */

public boolean adjust(GlyphPositioningTable.Value v,int offset){

  assert v != null;

  if ((index + offset) < indexLast) {

    return v.adjust(adjustments[index + offset],fontSize);

  }

 else {

    throw new IndexOutOfBoundsException();

  }

}

Location: GlyphPositioningState.java

Content: 

/** 

 * Apply positioning subtable to current state at current position (only), resulting in the consumption of zero or more input glyphs.

 * @param st the glyph positioning subtable to apply

 * @return true if subtable applied, or false if it did not (e.g., itsinput coverage table did not match current input context)

 */

public boolean apply(GlyphPositioningSubtable st){

  assert st != null;

  updateSubtableState(st);

  boolean applied=st.position(this);

  return applied;

}

Location: GlyphPositioningState.java

Content: 

/** 

 * Get adjusted state.

 * @return adjusted true if some non-zero adjustment occurred andwas recorded by  {@link #setAdjusted}; otherwise, false.

 */

public boolean getAdjusted(){

  return adjusted;

}

Location: GlyphPositioningState.java

Content: 

/** 

 * Obtain current adjustments at current position index.

 * @return array of adjustments (int[4]) at current position

 */

public int[] getAdjustment(){

  return getAdjustment(0);

}

Location: GlyphPositioningState.java

Content: 

/** 

 * Obtain current adjustments at specified offset from current position index.

 * @param offset from current position index

 * @return array of adjustments (int[4]) at specified offset

 * @throws IndexOutOfBoundsException if offset is invalid

 */

public int[] getAdjustment(int offset) throws IndexOutOfBoundsException {

  if ((index + offset) < indexLast) {

    return adjustments[index + offset];

  }

 else {

    throw new IndexOutOfBoundsException();

  }

}

Location: GlyphPositioningState.java

Content: 

/** 

 * Construct default (reset) glyph positioning state.

 */

public GlyphPositioningState(){

}

Location: GlyphPositioningState.java

Content: 

/** 

 * Construct glyph positioning state using an existing state object using shallow copy except as follows: input glyph sequence is copied deep except for its characters array.

 * @param ps existing positioning state to copy from

 */

public GlyphPositioningState(GlyphPositioningState ps){

  super(ps);

  this.fontSize=ps.fontSize;

  this.widths=ps.widths;

  this.adjustments=ps.adjustments;

}

Location: GlyphPositioningState.java

Content: 

/** 

 * Construct glyph positioning state.

 * @param gs input glyph sequence

 * @param script script identifier

 * @param language language identifier

 * @param feature feature identifier

 * @param fontSize font size (in micropoints)

 * @param widths array of design advancements (in glyph index order)

 * @param adjustments positioning adjustments to which positioning is applied

 * @param sct script context tester (or null)

 */

public GlyphPositioningState(GlyphSequence gs,String script,String language,String feature,int fontSize,int[] widths,int[][] adjustments,ScriptContextTester sct){

  super(gs,script,language,feature,sct);

  this.fontSize=fontSize;

  this.widths=widths;

  this.adjustments=adjustments;

}

Location: GlyphPositioningState.java

Content: 

/** 

 * Reset glyph positioning state.

 * @param gs input glyph sequence

 * @param script script identifier

 * @param language language identifier

 * @param feature feature identifier

 * @param fontSize font size (in micropoints)

 * @param widths array of design advancements (in glyph index order)

 * @param adjustments positioning adjustments to which positioning is applied

 * @param sct script context tester (or null)

 */

public GlyphPositioningState reset(GlyphSequence gs,String script,String language,String feature,int fontSize,int[] widths,int[][] adjustments,ScriptContextTester sct){

  super.reset(gs,script,language,feature,sct);

  this.fontSize=fontSize;

  this.widths=widths;

  this.adjustments=adjustments;

  this.adjusted=false;

  return this;

}

Location: GlyphPositioningState.java

Content: 

/** 

 * Set adjusted state, used to record effect of non-zero adjustment.

 * @param adjusted true if to set adjusted state, otherwise false toclear adjusted state

 */

public void setAdjusted(boolean adjusted){

  this.adjusted=adjusted;

}

