Location: NamedCharacter.java

Content: 

/** 

 * Returns the single Unicode value associated with this named character. Check {@link #hasSingleUnicodeValue()} before you call this method because anIllegalStateException is thrown is a Unicode sequence with more than one character is associated with this character.

 * @return the single Unicode value (or FFFF ("NOT A CHARACTER") if no Unicode value isavailable)

 * @throws IllegalStateException if a Unicode sequence with more than one value is associatedwith the named character

 */

public char getSingleUnicodeValue() throws IllegalStateException {

  if (this.unicodeSequence == null) {

    return CharUtilities.NOT_A_CHARACTER;

  }

  if (this.unicodeSequence.length() > 1) {

    throw new IllegalStateException("getSingleUnicodeValue() may not be called for a" + " named character that has more than one Unicode value (a sequence)" + " associated with the named character!");

  }

  return this.unicodeSequence.charAt(0);

}

Location: NamedCharacter.java

Content: 

/** 

 * Indicates whether a single Unicode value is associated with this character.

 * @return true if exactly one Unicode value is associated with this character, false otherwise

 */

public boolean hasSingleUnicodeValue(){

  return (this.unicodeSequence != null && this.unicodeSequence.length() == 1);

}

Location: NamedCharacter.java

Content: 

/** 

 * Simple constructor.

 * @param charName the character name

 */

public NamedCharacter(String charName){

  this(charName,null);

}

Location: NamedCharacter.java

Content: 

/** 

 * Main constructor.

 * @param charName the character name

 * @param unicodeSequence the Unicode sequence associated with this character

 */

public NamedCharacter(String charName,String unicodeSequence){

  if (charName == null) {

    throw new NullPointerException("charName must not be null");

  }

  this.charName=charName;

  if (unicodeSequence != null) {

    this.unicodeSequence=unicodeSequence;

  }

 else {

    this.unicodeSequence=Glyphs.getUnicodeSequenceForGlyphName(charName);

  }

}

