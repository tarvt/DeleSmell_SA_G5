Location: KnuthSequence.java

Content: 

/** 

 * Append sequence to this sequence if it can be appended. If that is not possible, close this sequence.

 * @param sequence The sequence that is to be appended.

 * @return whether the sequence was succesfully appended to this sequence.

 */

public boolean appendSequenceOrClose(KnuthSequence sequence){

  if (!appendSequence(sequence)) {

    endSequence();

    return false;

  }

 else {

    return true;

  }

}

Location: KnuthSequence.java

Content: 

/** 

 * Append sequence to this sequence if it can be appended. If that is not possible, close this sequence.

 * @param sequence The sequence that is to be appended.

 * @param keepTogether Whether the two sequences must be kept together.

 * @param breakElement The BreakElement that may be inserted between the two sequences.

 * @return whether the sequence was succesfully appended to this sequence.

 */

public boolean appendSequenceOrClose(KnuthSequence sequence,boolean keepTogether,BreakElement breakElement){

  if (!appendSequence(sequence,keepTogether,breakElement)) {

    endSequence();

    return false;

  }

 else {

    return true;

  }

}

Location: KnuthSequence.java

Content: 

/** 

 * Returns the position index of the first box in this sequence, starting at the given index. If  {@code startIndex} is outside the bounds of this sequence, it isreturned.

 * @param startIndex the index from which to start the lookup

 * @return the index of the next box element, {@link #size()} if there is no suchelement,  {@code startIndex} if {@code (startIndex < 0 || startIndex >= size())}

 */

protected int getFirstBoxIndex(int startIndex){

  if (startIndex < 0 || startIndex >= size()) {

    return startIndex;

  }

 else {

    int boxIndex=startIndex;

    @SuppressWarnings("unchecked") Iterator<ListElement> iter=listIterator(startIndex);

    while (iter.hasNext() && !iter.next().isBox()) {

      boxIndex++;

    }

    return boxIndex;

  }

}

Location: KnuthSequence.java

Content: 

/** 

 * @return the last element of this sequence.

 */

public ListElement getLast(){

  return (isEmpty() ? null : (ListElement)ListUtil.getLast(this));

}

Location: KnuthSequence.java

Content: 

/** 

 * Creates a new and empty list.

 */

public KnuthSequence(){

  super();

}

Location: KnuthSequence.java

Content: 

/** 

 * Creates a new list from an existing list.

 * @param list The list from which to create the new list.

 */

public KnuthSequence(List list){

  super(list);

}

Location: KnuthSequence.java

Content: 

/** 

 * Remove the last element of this sequence.

 * @return the removed element.

 */

public ListElement removeLast(){

  return (isEmpty() ? null : (ListElement)ListUtil.removeLast(this));

}

Location: KnuthSequence.java

Content: 

/** 

 * Marks the start of the sequence.

 */

public void startSequence(){

}

Location: KnuthSequence.java

Content: 

/** 

 * Wrap the Positions of the elements of this sequence in a Position for LayoutManager lm.

 * @param lm The LayoutManager for the Positions that will be created.

 */

public void wrapPositions(LayoutManager lm){

  ListIterator listIter=listIterator();

  ListElement element;

  while (listIter.hasNext()) {

    element=(ListElement)listIter.next();

    element.setPosition(lm.notifyPos(new NonLeafPosition(lm,element.getPosition())));

  }

}

