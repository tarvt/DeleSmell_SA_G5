Location: ListBlockLayoutManager.java

Content: 

/** 

 * Convenience method.

 * @return the ListBlock node

 */

protected ListBlock getListBlockFO(){

  return (ListBlock)fobj;

}

Location: ListBlockLayoutManager.java

Content: 

/** 

 * {@inheritDoc} 

 */

public List getNextKnuthElements(LayoutContext context,int alignment,Stack lmStack,Position restartPosition,LayoutManager restartAtLM){

  hongshuai();

  this.discardBorderBefore=false;

  this.discardBorderAfter=false;

  this.discardPaddingBefore=false;

  this.discardPaddingAfter=false;

  this.effSpaceBefore=null;

  this.effSpaceAfter=null;

  List returnList;

  returnList=super.getNextKnuthElements(context,alignment,lmStack,restartPosition,restartAtLM);

  int widowRowLimit=getListBlockFO().getWidowContentLimit().getValue();

  if (widowRowLimit != 0) {

    ElementListUtils.removeLegalBreaks(returnList,widowRowLimit);

  }

  int orphanRowLimit=getListBlockFO().getOrphanContentLimit().getValue();

  if (orphanRowLimit != 0) {

    ElementListUtils.removeLegalBreaksFromEnd(returnList,orphanRowLimit);

  }

  return returnList;

}

Location: ListBlockLayoutManager.java

Content: 

/** 

 * {@inheritDoc} 

 */

public boolean isRestartable(){

  return true;

}

Location: ListBlockLayoutManager.java

Content: 

/** 

 * Create a new list block layout manager.

 * @param node list-block to create the layout manager for

 */

public ListBlockLayoutManager(ListBlock node){

  super(node);

}

