Location: PDFBridgeContext.java

Content: 

/** 

 * {@inheritDoc} 

 */

@Override public BridgeContext createBridgeContext(SVGOMDocument doc){

  return new PDFBridgeContext(getUserAgent(),getDocumentLoader(),fontInfo,getImageManager(),getImageSessionContext(),linkTransform);

}

Location: PDFBridgeContext.java

Content: 

/** 

 * Constructs a new bridge context.

 * @param userAgent the user agent

 * @param fontInfo the font list for the text painter, may be nullin which case text is painted as shapes

 * @param imageManager an image manager

 * @param imageSessionContext an image session context

 * @param linkTransform AffineTransform to properly place links,may be null

 */

public PDFBridgeContext(SVGUserAgent userAgent,FontInfo fontInfo,ImageManager imageManager,ImageSessionContext imageSessionContext,AffineTransform linkTransform){

  super(userAgent,fontInfo,imageManager,imageSessionContext,linkTransform);

}

Location: PDFBridgeContext.java

Content: 

/** 

 * Constructs a new bridge context.

 * @param userAgent the user agent

 * @param documentLoader the Document Loader to use for referenced documents.

 * @param fontInfo the font list for the text painter, may be nullin which case text is painted as shapes

 * @param imageManager an image manager

 * @param imageSessionContext an image session context

 * @param linkTransform AffineTransform to properly place links,may be null

 */

public PDFBridgeContext(UserAgent userAgent,DocumentLoader documentLoader,FontInfo fontInfo,ImageManager imageManager,ImageSessionContext imageSessionContext,AffineTransform linkTransform){

  super(userAgent,documentLoader,fontInfo,imageManager,imageSessionContext,linkTransform);

}

Location: PDFBridgeContext.java

Content: 

/** 

 * Constructs a new bridge context.

 * @param userAgent the user agent

 * @param fontInfo the font list for the text painter, may be nullin which case text is painted as shapes

 * @param imageManager an image manager

 * @param imageSessionContext an image session context

 */

public PDFBridgeContext(UserAgent userAgent,FontInfo fontInfo,ImageManager imageManager,ImageSessionContext imageSessionContext){

  super(userAgent,fontInfo,imageManager,imageSessionContext);

}

Location: PDFBridgeContext.java

Content: 

/** 

 * {@inheritDoc} 

 */

@Override public void registerSVGBridges(){

  super.registerSVGBridges();

  if (fontInfo != null) {

    TextPainter textPainter=new PDFTextPainter(fontInfo);

    SVGTextElementBridge textElementBridge=new PDFTextElementBridge(textPainter);

    putBridge(textElementBridge);

    putElementBridgeConditional("org.apache.fop.svg.PDFBatikFlowTextElementBridge","org.apache.batik.extension.svg.BatikFlowTextElementBridge");

    putElementBridgeConditional("org.apache.fop.svg.PDFSVG12TextElementBridge","org.apache.batik.bridge.svg12.SVG12TextElementBridge");

    putElementBridgeConditional("org.apache.fop.svg.PDFSVGFlowRootElementBridge","org.apache.batik.bridge.svg12.SVGFlowRootElementBridge");

  }

  PDFAElementBridge pdfAElementBridge=new PDFAElementBridge();

  if (linkTransform != null) {

    pdfAElementBridge.setCurrentTransform(linkTransform);

  }

 else {

    pdfAElementBridge.setCurrentTransform(new AffineTransform());

  }

  putBridge(pdfAElementBridge);

  putBridge(new PDFImageElementBridge());

}

