Location: CIDSubset.java

Content: 

public CIDSubset(MultiByteFont mbf){

  font=mbf;

  usedGlyphs.put(0,0);

  usedGlyphsIndex.put(0,0);

  usedGlyphsCount++;

}

Location: CIDSubset.java

Content: 

/** 

 * {@inheritDoc} 

 */

public char[] getChars(){

  StringBuilder buf=new StringBuilder();

  for (int i=0; i < usedGlyphsCount; i++) {

    buf.appendCodePoint(getUnicode(i));

  }

  return buf.toString().toCharArray();

}

Location: CIDSubset.java

Content: 

/** 

 * {@inheritDoc} 

 */

public int getGIDFromChar(char ch){

  return charToGIDs.get((int)ch);

}

Location: CIDSubset.java

Content: 

/** 

 * {@inheritDoc} 

 */

public BitSet getGlyphIndices(){

  BitSet bitset=new BitSet();

  for (  Integer cid : usedGlyphs.keySet()) {

    bitset.set(cid);

  }

  return bitset;

}

Location: CIDSubset.java

Content: 

/** 

 * {@inheritDoc} 

 */

public Map<Integer,Integer> getGlyphs(){

  return Collections.unmodifiableMap(this.usedGlyphs);

}

Location: CIDSubset.java

Content: 

/** 

 * {@inheritDoc} 

 */

public int getNumberOfGlyphs(){

  return this.usedGlyphsCount;

}

Location: CIDSubset.java

Content: 

/** 

 * {@inheritDoc} 

 */

public int getOriginalGlyphIndex(int index){

  Integer glyphIndex=usedGlyphsIndex.get(index);

  if (glyphIndex != null) {

    return glyphIndex;

  }

 else {

    return -1;

  }

}

Location: CIDSubset.java

Content: 

/** 

 * {@inheritDoc} 

 */

public char getUnicodeFromGID(int glyphIndex){

  int selector=usedGlyphs.get(glyphIndex);

  return (char)usedCharsIndex.get(selector).intValue();

}

Location: CIDSubset.java

Content: 

/** 

 * {@inheritDoc} 

 */

public int getUnicode(int index){

  Integer mapValue=usedCharsIndex.get(index);

  if (mapValue != null) {

    return mapValue;

  }

 else {

    return CharUtilities.NOT_A_CHARACTER;

  }

}

Location: CIDSubset.java

Content: 

/** 

 * {@inheritDoc} 

 */

public int mapChar(int glyphIndex,char unicode){

  return mapCodePoint(glyphIndex,unicode);

}

Location: CIDSubset.java

Content: 

/** 

 * {@inheritDoc} 

 */

public int mapCodePoint(int glyphIndex,int codePoint){

  Integer subsetCharSelector=usedGlyphs.get(glyphIndex);

  if (subsetCharSelector == null) {

    int selector=usedGlyphsCount;

    usedGlyphs.put(glyphIndex,selector);

    usedGlyphsIndex.put(selector,glyphIndex);

    usedCharsIndex.put(selector,codePoint);

    charToGIDs.put(codePoint,glyphIndex);

    usedGlyphsCount++;

    return selector;

  }

 else {

    return subsetCharSelector;

  }

}

