Location: AbstractTripletStructuredObjectTest.java

Content: 

/** 

 * Test addTriplet() - mostly tested above, but check boundary cases

 */

public void testAddTriplet(){

  getSut().addTriplet(null);

}

Location: AbstractTripletStructuredObjectTest.java

Content: 

/** 

 * Test addTriplets() - ensure all triplets are added.

 */

@Test public void testAddTriplets(){

  List<AbstractTriplet> expectedList=TRIPLETS;

  emptyStructuredObject.addTriplets(expectedList);

  assertEquals(expectedList,emptyStructuredObject.getTriplets());

  getSut().addTriplets(expectedList);

  List<AbstractTriplet> newExpected=new ArrayList<AbstractTriplet>(expectedList);

  newExpected.addAll(expectedList);

  assertEquals(newExpected,getSut().getTriplets());

  emptyStructuredObject.addTriplets(null);

}

Location: AbstractTripletStructuredObjectTest.java

Content: 

/** 

 * Test getTripletLength() - ensure a sum of all enclosing object lengths is returned.

 */

public void testGetTripletLength(){

  int dataLength=0;

  for (  Triplet t : TRIPLETS) {

    dataLength+=t.getDataLength();

  }

  assertEquals(dataLength,getSut().getTripletDataLength());

  assertEquals(0,emptyStructuredObject.getTripletDataLength());

}

Location: AbstractTripletStructuredObjectTest.java

Content: 

/** 

 * Test hasTriplet() - ensure both positive and negative values are returned.

 */

public void testHasTriplet(){

  for (  AbstractTriplet triplet : TRIPLETS) {

    assertTrue(getSut().hasTriplet(triplet.getId()));

    assertFalse(emptyStructuredObject.hasTriplet(triplet.getId()));

  }

  CommentTriplet notInSystem=new CommentTriplet((byte)0x30,"This should return false");

  assertFalse(getSut().hasTriplet(notInSystem.getId()));

}

Location: AbstractTripletStructuredObjectTest.java

Content: 

/** 

 * Test hasTriplets()

 */

public void testHasTriplets(){

  assertTrue(getSut().hasTriplets());

  assertFalse(emptyStructuredObject.hasTriplets());

}

