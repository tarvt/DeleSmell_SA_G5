Location: PropertyTokenizer.java

Content: 

/** 

 * Return a boolean value indicating whether the following non-whitespace character is an opening parenthesis.

 */

private boolean followingParen(){

  for (int i=exprIndex; i < exprLength; i++) {

switch (expr.charAt(i)) {

case '(':

      exprIndex=i + 1;

    return true;

case ' ':

case '\r':

case '\n':

case '\t':

  break;

default :

return false;

}

}

return false;

}

Location: PropertyTokenizer.java

Content: 

/** 

 * Return a boolean value indicating whether the argument is a decimal digit (0-9).

 * @param c The character to check

 */

private static boolean isDigit(char c){

  return DIGITS.indexOf(c) >= 0;

}

Location: PropertyTokenizer.java

Content: 

/** 

 * Return a boolean value indicating whether the argument is a hexadecimal digit (0-9, A-F, a-f).

 * @param c The character to check

 */

private static boolean isHexDigit(char c){

  return HEX_CHARS.indexOf(c) >= 0;

}

Location: PropertyTokenizer.java

Content: 

/** 

 * Return a  boolean value indicating whether the argument is a valid name character, ie. can occur in a NAME as defined by XSL.

 * @param c The character to check

 */

private static boolean isNameChar(char c){

  return NAME_START_CHARS.indexOf(c) >= 0 || NAME_CHARS.indexOf(c) >= 0 || c >= 0x80;

}

Location: PropertyTokenizer.java

Content: 

/** 

 * Return a  boolean value indicating whether the argument is a valid name start character, ie. can start a NAME as defined by XSL.

 * @param c The character to check

 */

private static boolean isNameStartChar(char c){

  return NAME_START_CHARS.indexOf(c) >= 0 || c >= 0x80;

}

Location: PropertyTokenizer.java

Content: 

private void nextColor() throws PropertyException {

  if (exprIndex < exprLength) {

    ++exprIndex;

    scanHexDigits();

    int len=exprIndex - currentTokenStartIndex - 1;

    if (len % 3 == 0) {

      currentToken=TOK_COLORSPEC;

    }

 else {

      scanRestOfName();

      currentToken=TOK_NCNAME;

    }

    currentTokenValue=expr.substring(currentTokenStartIndex,exprIndex);

    return;

  }

 else {

    throw new PropertyException("illegal character '#'");

  }

}

Location: PropertyTokenizer.java

Content: 

private void nextDecimalPoint() throws PropertyException {

  if (exprIndex < exprLength && isDigit(expr.charAt(exprIndex))) {

    ++exprIndex;

    scanDigits();

    if (exprIndex < exprLength && expr.charAt(exprIndex) == '%') {

      exprIndex++;

      currentToken=TOK_PERCENT;

    }

 else {

      currentUnitLength=exprIndex;

      scanName();

      currentUnitLength=exprIndex - currentUnitLength;

      currentToken=(currentUnitLength > 0) ? TOK_NUMERIC : TOK_FLOAT;

    }

    currentTokenValue=expr.substring(currentTokenStartIndex,exprIndex);

    return;

  }

  throw new PropertyException("illegal character '.'");

}

Location: PropertyTokenizer.java

Content: 

/** 

 * Construct a new PropertyTokenizer object to tokenize the passed String.

 * @param s The Property expressio to tokenize.

 */

PropertyTokenizer(String s){

  this.expr=s;

  this.exprLength=s.length();

}

Location: PropertyTokenizer.java

Content: 

/** 

 * Attempt to recognize a valid sequence of decimal DIGITS in the input expression.

 */

private void scanDigits(){

  while (exprIndex < exprLength && isDigit(expr.charAt(exprIndex))) {

    exprIndex++;

  }

}

Location: PropertyTokenizer.java

Content: 

/** 

 * Attempt to recognize a valid sequence of hexadecimal DIGITS in the input expression.

 */

private void scanHexDigits(){

  while (exprIndex < exprLength && isHexDigit(expr.charAt(exprIndex))) {

    exprIndex++;

  }

}

Location: PropertyTokenizer.java

Content: 

/** 

 * Attempt to recognize a valid NAME token in the input expression.

 */

private void scanName(){

  if (exprIndex < exprLength && isNameStartChar(expr.charAt(exprIndex))) {

    scanRestOfName();

  }

}

Location: PropertyTokenizer.java

Content: 

private void scanRestOfName(){

  while (++exprIndex < exprLength) {

    if (!isNameChar(expr.charAt(exprIndex))) {

      break;

    }

  }

}

