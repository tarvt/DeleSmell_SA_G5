Location: IndentPropertyMaker.java

Content: 

/** 

 * Calculate the corresponding value for start-indent and end-indent. This method calculates indent following an alternative rule set that tries to mimic many commercial solutions that chose to violate the XSL specification.

 * @param propertyList the property list to use in the computation

 * @return the computed indent property

 * @throws PropertyException if a property exception occurs

 * @see CorrespondingPropertyMaker#compute(PropertyList)

 */

public Property computeAlternativeRuleset(PropertyList propertyList) throws PropertyException {

  PropertyList pList=getWMPropertyList(propertyList);

  if (pList == null) {

    return null;

  }

  Numeric padding=getCorresponding(paddingCorresponding,propertyList).getNumeric();

  Numeric border=getCorresponding(borderWidthCorresponding,propertyList).getNumeric();

  int marginProp=pList.selectFromWritingMode(lrtb,rltb,tbrl,tblr);

  boolean marginNearest=false;

  PropertyList pl=propertyList.getParentPropertyList();

  while (pl != null) {

    if (pl.getExplicit(baseMaker.propId) != null) {

      break;

    }

 else     if (pl.getExplicitOrShorthand(marginProp) != null) {

      marginNearest=true;

      break;

    }

    pl=pl.getParentPropertyList();

  }

  if (propertyList.getExplicitOrShorthand(marginProp) == null) {

    Property indent=propertyList.getExplicit(baseMaker.propId);

    if (indent == null) {

      if (isInherited(propertyList) || !marginNearest) {

        return null;

      }

 else {

        return FixedLength.ZERO_FIXED_LENGTH;

      }

    }

 else {

      return indent;

    }

  }

 else {

    Numeric margin=propertyList.get(marginProp).getNumeric();

    Numeric v=FixedLength.ZERO_FIXED_LENGTH;

    if (isInherited(propertyList)) {

      v=NumericOp.addition(v,propertyList.getInherited(baseMaker.propId).getNumeric());

    }

    v=NumericOp.addition(v,margin);

    v=NumericOp.addition(v,padding);

    v=NumericOp.addition(v,border);

    return (Property)v;

  }

}

Location: IndentPropertyMaker.java

Content: 

/** 

 * Calculate the corresponding value for start-indent and end-indent.

 * @param propertyList the property list to use in the computation

 * @return the computed indent property

 * @throws PropertyException if a property exception occurs

 * @see CorrespondingPropertyMaker#compute(PropertyList)

 */

public Property computeConforming(PropertyList propertyList) throws PropertyException {

  PropertyList pList=getWMPropertyList(propertyList);

  if (pList == null) {

    return null;

  }

  Numeric padding=getCorresponding(paddingCorresponding,propertyList).getNumeric();

  Numeric border=getCorresponding(borderWidthCorresponding,propertyList).getNumeric();

  int marginProp=pList.selectFromWritingMode(lrtb,rltb,tbrl,tblr);

  if (propertyList.getExplicitOrShorthand(marginProp) == null) {

    Property indent=propertyList.getExplicit(baseMaker.propId);

    if (indent == null) {

      return null;

    }

 else {

      return indent;

    }

  }

 else {

    Numeric margin=propertyList.get(marginProp).getNumeric();

    Numeric v=FixedLength.ZERO_FIXED_LENGTH;

    if (!propertyList.getFObj().generatesReferenceAreas()) {

      v=NumericOp.addition(v,propertyList.getInherited(baseMaker.propId).getNumeric());

    }

    v=NumericOp.addition(v,margin);

    v=NumericOp.addition(v,padding);

    v=NumericOp.addition(v,border);

    return (Property)v;

  }

}

Location: IndentPropertyMaker.java

Content: 

private Property getCorresponding(int[] corresponding,PropertyList propertyList) throws PropertyException {

  PropertyList pList=getWMPropertyList(propertyList);

  if (pList != null) {

    int wmcorr=pList.selectFromWritingMode(corresponding[0],corresponding[1],corresponding[2],corresponding[3]);

    return propertyList.get(wmcorr);

  }

 else {

    return null;

  }

}

Location: IndentPropertyMaker.java

Content: 

/** 

 * Create a start-indent or end-indent property maker.

 * @param baseMaker the property maker to use

 */

public IndentPropertyMaker(PropertyMaker baseMaker){

  super(baseMaker);

}

Location: IndentPropertyMaker.java

Content: 

private boolean isInherited(PropertyList pList){

  if (pList.getFObj().getUserAgent().isBreakIndentInheritanceOnReferenceAreaBoundary()) {

    FONode nd=pList.getFObj().getParent();

    return !((nd instanceof FObj) && ((FObj)nd).generatesReferenceAreas());

  }

 else {

    return true;

  }

}

Location: IndentPropertyMaker.java

Content: 

/** 

 * Set the corresponding values for the border-*-width properties.

 * @param borderWidthCorresponding the corresping propids.

 */

public void setBorderWidthCorresponding(int[] borderWidthCorresponding){

  if ((borderWidthCorresponding == null) || (borderWidthCorresponding.length != 4)) {

    throw new IllegalArgumentException();

  }

  this.borderWidthCorresponding=borderWidthCorresponding;

}

Location: IndentPropertyMaker.java

Content: 

/** 

 * Set the corresponding values for the padding-* properties.

 * @param paddingCorresponding the corresping propids.

 */

public void setPaddingCorresponding(int[] paddingCorresponding){

  if ((paddingCorresponding == null) || (paddingCorresponding.length != 4)) {

    throw new IllegalArgumentException();

  }

  this.paddingCorresponding=paddingCorresponding;

}

