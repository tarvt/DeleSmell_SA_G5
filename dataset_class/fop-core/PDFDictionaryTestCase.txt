Location: PDFDictionaryTestCase.java

Content: 

/** 

 * Tests get() - tests that objects can be properly retrieved from the dictionary.

 */

@Test public void testGet(){

}

Location: PDFDictionaryTestCase.java

Content: 

/** 

 * Tests put() - tests that the object is put into the dictionary and it is handled if it is a {@link PDFObject}.

 */

@Test public void testPut(){

  assertEquals("TestValue",pdfDictUnderTest.get("String"));

  assertEquals(10,pdfDictUnderTest.get("int"));

  assertEquals(3.1,pdfDictUnderTest.get("double"));

  assertEquals(testArray,pdfDictUnderTest.get("array"));

  assertEquals(pdfDictUnderTest,testArray.getParent());

  assertEquals(testNumber,pdfDictUnderTest.get("number"));

  assertNull(pdfDictUnderTest.get("Not in dictionary"));

  pdfDictUnderTest.put("array",10);

  assertEquals(10,pdfDictUnderTest.get("array"));

  assertNull(pdfDictUnderTest.get("null"));

}

Location: PDFDictionaryTestCase.java

Content: 

/** 

 * Tests writeDictionary() - tests that the dictionary is properly written to the output-stream.

 */

@Test public void testWriteDictionary(){

  ByteArrayOutputStream outStream=new ByteArrayOutputStream();

  CountingOutputStream cout=new CountingOutputStream(outStream);

  StringBuilder textBuffer=new StringBuilder();

  try {

    pdfDictUnderTest.writeDictionary(cout,textBuffer);

    PDFDocument.flushTextBuffer(textBuffer,cout);

    assertEquals(expectedOutput,outStream.toString());

  }

 catch (  IOException e) {

    fail("IOException: " + e.getMessage());

  }

}

