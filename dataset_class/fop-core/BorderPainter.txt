Location: BorderPainter.java

Content: 

public BorderPainter(GraphicsPainter graphicsPainter){

  this.graphicsPainter=graphicsPainter;

}

Location: BorderPainter.java

Content: 

private static BorderSegment borderSegmentForAfter(BorderProps after){

  return AbstractBorderSegment.asFlippedBorderSegment(after);

}

Location: BorderPainter.java

Content: 

private static BorderSegment borderSegmentForBefore(BorderProps before){

  return AbstractBorderSegment.asBorderSegment(before);

}

Location: BorderPainter.java

Content: 

private static BorderSegment borderSegmentForEnd(BorderProps end){

  return AbstractBorderSegment.asBorderSegment(end);

}

Location: BorderPainter.java

Content: 

private static BorderSegment borderSegmentForStart(BorderProps start){

  return AbstractBorderSegment.asFlippedBorderSegment(start);

}

Location: BorderPainter.java

Content: 

/** 

 * Calculate the correction factor to handle over-sized elliptic corner radii.

 * @param width the border width

 * @param height the border height

 * @param before the before border properties

 * @param after the after border properties

 * @param start the start border properties

 * @param end the end border properties

 */

protected static double calculateCornerCorrectionFactor(int width,int height,BorderProps before,BorderProps after,BorderProps start,BorderProps end){

  return calculateCornerScaleCorrection(width,height,borderSegmentForBefore(before),borderSegmentForAfter(after),borderSegmentForStart(start),borderSegmentForEnd(end));

}

Location: BorderPainter.java

Content: 

/** 

 * Calculate the scaling factor to handle over-sized elliptic corner radii.

 * @param width the border width

 * @param height the border height

 * @param before the before border segment

 * @param after the after border segment

 * @param start the start border segment

 * @param end the end border segment

 */

protected static double calculateCornerScaleCorrection(int width,int height,BorderSegment before,BorderSegment after,BorderSegment start,BorderSegment end){

  return CornerScaleCorrectionCalculator.calculate(width,height,before,after,start,end);

}

Location: BorderPainter.java

Content: 

private static int correctRadius(double cornerCorrectionFactor,int radius){

  return (int)(Math.round(cornerCorrectionFactor * radius));

}

Location: BorderPainter.java

Content: 

/** 

 * This method calculates the length of the "dash" in a dashed border. The dash satisfies the condition that corners start on a dash and end with a dash (rather than ending with a white space).

 * @param borderLength The length of the border.

 * @param borderWidth The width/thickness of the border.

 * @return returns the length of the dash such that it fits the criteria above.

 */

public static float dashWidthCalculator(float borderLength,float borderWidth){

  float dashWidth=DASHED_BORDER_LENGTH_FACTOR * borderWidth;

  if (borderWidth < 3) {

    dashWidth=(DASHED_BORDER_LENGTH_FACTOR * 3) * borderWidth;

  }

  int period=(int)((borderLength - dashWidth) / dashWidth / (1.0f + DASHED_BORDER_SPACE_RATIO));

  period=period < 0 ? 0 : period;

  return borderLength / (period * (1.0f + DASHED_BORDER_SPACE_RATIO) + 1.0f);

}

Location: BorderPainter.java

Content: 

private void drawBorderSegment(BorderSegment start,BorderSegment before,BorderSegment end,int orientation,int width,int x,int y,double cornerCorrectionFactor) throws IOException {

  if (before.getWidth() != 0) {

    final int sx2=start.getWidth() - start.getClippedWidth();

    final int ex1=width;

    final int ex2=ex1 - end.getWidth() + end.getClippedWidth();

    final int outery=-before.getClippedWidth();

    final int innery=outery + before.getWidth();

    final int ellipseSBRadiusX=correctRadius(cornerCorrectionFactor,start.getRadiusEnd());

    final int ellipseSBRadiusY=correctRadius(cornerCorrectionFactor,before.getRadiusStart());

    final int ellipseBERadiusX=correctRadius(cornerCorrectionFactor,end.getRadiusStart());

    final int ellipseBERadiusY=correctRadius(cornerCorrectionFactor,before.getRadiusEnd());

    saveGraphicsState();

    translateCoordinates(x,y);

    if (orientation != 0) {

      rotateCoordinates(Math.PI * orientation / 2d);

    }

    final int ellipseSBX=ellipseSBRadiusX;

    final int ellipseSBY=ellipseSBRadiusY;

    final int ellipseBEX=ex1 - ellipseBERadiusX;

    final int ellipseBEY=ellipseBERadiusY;

    int sx1a=0;

    int ex1a=ex1;

    if (ellipseSBRadiusX != 0 && ellipseSBRadiusY != 0) {

      final double[] joinMetrics=getCornerBorderJoinMetrics(ellipseSBRadiusX,ellipseSBRadiusY,sx2,innery);

      final double outerJoinPointX=joinMetrics[0];

      final double outerJoinPointY=joinMetrics[1];

      final double sbJoinAngle=joinMetrics[2];

      moveTo((int)outerJoinPointX,(int)outerJoinPointY);

      arcTo(Math.PI + sbJoinAngle,Math.PI * 3 / 2,ellipseSBX,ellipseSBY,ellipseSBRadiusX,ellipseSBRadiusY);

    }

 else {

      moveTo(0,0);

      if (before.isCollapseOuter()) {

        if (start.isCollapseOuter()) {

          sx1a-=start.getClippedWidth();

        }

        if (end.isCollapseOuter()) {

          ex1a+=end.getClippedWidth();

        }

        lineTo(sx1a,outery);

        lineTo(ex1a,outery);

      }

    }

    if (ellipseBERadiusX != 0 && ellipseBERadiusY != 0) {

      final double[] outerJoinMetrics=getCornerBorderJoinMetrics(ellipseBERadiusX,ellipseBERadiusY,ex1 - ex2,innery);

      final double beJoinAngle=ex1 == ex2 ? Math.PI / 2 : Math.PI / 2 - outerJoinMetrics[2];

      lineTo(ellipseBEX,0);

      arcTo(Math.PI * 3 / 2,Math.PI * 3 / 2 + beJoinAngle,ellipseBEX,ellipseBEY,ellipseBERadiusX,ellipseBERadiusY);

      if (ellipseBEX < ex2 && ellipseBEY > innery) {

        final double[] innerJoinMetrics=getCornerBorderJoinMetrics((double)ex2 - ellipseBEX,(double)ellipseBEY - innery,ex1 - ex2,innery);

        final double innerJoinPointX=innerJoinMetrics[0];

        final double innerJoinPointY=innerJoinMetrics[1];

        final double beInnerJoinAngle=Math.PI / 2 - innerJoinMetrics[2];

        lineTo((int)(ex2 - innerJoinPointX),(int)(innerJoinPointY + innery));

        arcTo(beInnerJoinAngle + Math.PI * 3 / 2,Math.PI * 3 / 2,ellipseBEX,ellipseBEY,ex2 - ellipseBEX,ellipseBEY - innery);

      }

 else {

        lineTo(ex2,innery);

      }

    }

 else {

      lineTo(ex1,0);

      lineTo(ex2,innery);

    }

    if (ellipseSBRadiusX == 0) {

      lineTo(sx2,innery);

    }

 else {

      if (ellipseSBX > sx2 && ellipseSBY > innery) {

        final double[] innerJoinMetrics=getCornerBorderJoinMetrics(ellipseSBRadiusX - sx2,ellipseSBRadiusY - innery,sx2,innery);

        final double sbInnerJoinAngle=innerJoinMetrics[2];

        lineTo(ellipseSBX,innery);

        arcTo(Math.PI * 3 / 2,sbInnerJoinAngle + Math.PI,ellipseSBX,ellipseSBY,ellipseSBX - sx2,ellipseSBY - innery);

      }

 else {

        lineTo(sx2,innery);

      }

    }

    closePath();

    clip();

    if (ellipseBERadiusY == 0 && ellipseSBRadiusY == 0) {

      drawBorderLine(sx1a,outery,ex1a,innery,true,true,before.getStyle(),before.getColor());

    }

 else {

      int innerFillY=Math.max(Math.max(ellipseBEY,ellipseSBY),innery);

      drawBorderLine(sx1a,outery,ex1a,innerFillY,true,true,before.getStyle(),before.getColor());

    }

    restoreGraphicsState();

  }

}

Location: BorderPainter.java

Content: 

/** 

 * Draws borders.

 * @param borderRect the border rectangle

 * @param bpsTop the border specification on the top side

 * @param bpsBottom the border specification on the bottom side

 * @param bpsLeft the border specification on the left side

 * @param bpsRight the border specification on the end side

 * @param innerBackgroundColor the inner background color

 * @throws IFException if an error occurs while drawing the borders

 */

public void drawBorders(Rectangle borderRect,BorderProps bpsTop,BorderProps bpsBottom,BorderProps bpsLeft,BorderProps bpsRight,Color innerBackgroundColor) throws IFException {

  try {

    drawRoundedBorders(borderRect,bpsTop,bpsBottom,bpsLeft,bpsRight);

  }

 catch (  IOException ioe) {

    throw new IFException("IO error drawing borders",ioe);

  }

}

Location: BorderPainter.java

Content: 

/** 

 * TODO merge with drawRoundedBorders()?

 * @param borderRect the border rectangle

 * @param bpsTop the border specification on the top side

 * @param bpsBottom the border specification on the bottom side

 * @param bpsLeft the border specification on the left side

 * @param bpsRight the border specification on the end side

 * @throws IOException

 */

protected void drawRectangularBorders(Rectangle borderRect,BorderProps bpsTop,BorderProps bpsBottom,BorderProps bpsLeft,BorderProps bpsRight) throws IOException {

  bpsTop=sanitizeBorderProps(bpsTop);

  bpsBottom=sanitizeBorderProps(bpsBottom);

  bpsLeft=sanitizeBorderProps(bpsLeft);

  bpsRight=sanitizeBorderProps(bpsRight);

  int startx=borderRect.x;

  int starty=borderRect.y;

  int width=borderRect.width;

  int height=borderRect.height;

  boolean[] b=new boolean[]{(bpsTop != null),(bpsRight != null),(bpsBottom != null),(bpsLeft != null)};

  if (!b[TOP] && !b[RIGHT] && !b[BOTTOM]&& !b[LEFT]) {

    return;

  }

  int[] bw=new int[]{(b[TOP] ? bpsTop.width : 0),(b[RIGHT] ? bpsRight.width : 0),(b[BOTTOM] ? bpsBottom.width : 0),(b[LEFT] ? bpsLeft.width : 0)};

  int[] clipw=new int[]{BorderProps.getClippedWidth(bpsTop),BorderProps.getClippedWidth(bpsRight),BorderProps.getClippedWidth(bpsBottom),BorderProps.getClippedWidth(bpsLeft)};

  starty+=clipw[TOP];

  height-=clipw[TOP];

  height-=clipw[BOTTOM];

  startx+=clipw[LEFT];

  width-=clipw[LEFT];

  width-=clipw[RIGHT];

  boolean[] slant=new boolean[]{(b[LEFT] && b[TOP]),(b[TOP] && b[RIGHT]),(b[RIGHT] && b[BOTTOM]),(b[BOTTOM] && b[LEFT])};

  if (bpsTop != null) {

    int sx1=startx;

    int sx2=(slant[TOP_LEFT] ? sx1 + bw[LEFT] - clipw[LEFT] : sx1);

    int ex1=startx + width;

    int ex2=(slant[TOP_RIGHT] ? ex1 - bw[RIGHT] + clipw[RIGHT] : ex1);

    int outery=starty - clipw[TOP];

    int clipy=outery + clipw[TOP];

    int innery=outery + bw[TOP];

    saveGraphicsState();

    moveTo(sx1,clipy);

    int sx1a=sx1;

    int ex1a=ex1;

    if (isCollapseOuter(bpsTop)) {

      if (isCollapseOuter(bpsLeft)) {

        sx1a-=clipw[LEFT];

      }

      if (isCollapseOuter(bpsRight)) {

        ex1a+=clipw[RIGHT];

      }

      lineTo(sx1a,outery);

      lineTo(ex1a,outery);

    }

    lineTo(ex1,clipy);

    lineTo(ex2,innery);

    lineTo(sx2,innery);

    closePath();

    clip();

    drawBorderLine(sx1a,outery,ex1a,innery,true,true,bpsTop.style,bpsTop.color);

    restoreGraphicsState();

  }

  if (bpsRight != null) {

    int sy1=starty;

    int sy2=(slant[TOP_RIGHT] ? sy1 + bw[TOP] - clipw[TOP] : sy1);

    int ey1=starty + height;

    int ey2=(slant[BOTTOM_RIGHT] ? ey1 - bw[BOTTOM] + clipw[BOTTOM] : ey1);

    int outerx=startx + width + clipw[RIGHT];

    int clipx=outerx - clipw[RIGHT];

    int innerx=outerx - bw[RIGHT];

    saveGraphicsState();

    moveTo(clipx,sy1);

    int sy1a=sy1;

    int ey1a=ey1;

    if (isCollapseOuter(bpsRight)) {

      if (isCollapseOuter(bpsTop)) {

        sy1a-=clipw[TOP];

      }

      if (isCollapseOuter(bpsBottom)) {

        ey1a+=clipw[BOTTOM];

      }

      lineTo(outerx,sy1a);

      lineTo(outerx,ey1a);

    }

    lineTo(clipx,ey1);

    lineTo(innerx,ey2);

    lineTo(innerx,sy2);

    closePath();

    clip();

    drawBorderLine(innerx,sy1a,outerx,ey1a,false,false,bpsRight.style,bpsRight.color);

    restoreGraphicsState();

  }

  if (bpsBottom != null) {

    int sx1=startx;

    int sx2=(slant[BOTTOM_LEFT] ? sx1 + bw[LEFT] - clipw[LEFT] : sx1);

    int ex1=startx + width;

    int ex2=(slant[BOTTOM_RIGHT] ? ex1 - bw[RIGHT] + clipw[RIGHT] : ex1);

    int outery=starty + height + clipw[BOTTOM];

    int clipy=outery - clipw[BOTTOM];

    int innery=outery - bw[BOTTOM];

    saveGraphicsState();

    moveTo(ex1,clipy);

    int sx1a=sx1;

    int ex1a=ex1;

    if (isCollapseOuter(bpsBottom)) {

      if (isCollapseOuter(bpsLeft)) {

        sx1a-=clipw[LEFT];

      }

      if (isCollapseOuter(bpsRight)) {

        ex1a+=clipw[RIGHT];

      }

      lineTo(ex1a,outery);

      lineTo(sx1a,outery);

    }

    lineTo(sx1,clipy);

    lineTo(sx2,innery);

    lineTo(ex2,innery);

    closePath();

    clip();

    drawBorderLine(sx1a,innery,ex1a,outery,true,false,bpsBottom.style,bpsBottom.color);

    restoreGraphicsState();

  }

  if (bpsLeft != null) {

    int sy1=starty;

    int sy2=(slant[TOP_LEFT] ? sy1 + bw[TOP] - clipw[TOP] : sy1);

    int ey1=sy1 + height;

    int ey2=(slant[BOTTOM_LEFT] ? ey1 - bw[BOTTOM] + clipw[BOTTOM] : ey1);

    int outerx=startx - clipw[LEFT];

    int clipx=outerx + clipw[LEFT];

    int innerx=outerx + bw[LEFT];

    saveGraphicsState();

    moveTo(clipx,ey1);

    int sy1a=sy1;

    int ey1a=ey1;

    if (isCollapseOuter(bpsLeft)) {

      if (isCollapseOuter(bpsTop)) {

        sy1a-=clipw[TOP];

      }

      if (isCollapseOuter(bpsBottom)) {

        ey1a+=clipw[BOTTOM];

      }

      lineTo(outerx,ey1a);

      lineTo(outerx,sy1a);

    }

    lineTo(clipx,sy1);

    lineTo(innerx,sy2);

    lineTo(innerx,ey2);

    closePath();

    clip();

    drawBorderLine(outerx,sy1a,innerx,ey1a,false,true,bpsLeft.style,bpsLeft.color);

    restoreGraphicsState();

  }

}

Location: BorderPainter.java

Content: 

/** 

 * TODO merge with drawRectangularBorders?

 * @param borderRect the border rectangle

 * @throws IOException on io exception

 */

protected void drawRoundedBorders(Rectangle borderRect,BorderProps beforeBorderProps,BorderProps afterBorderProps,BorderProps startBorderProps,BorderProps endBorderProps) throws IOException {

  BorderSegment before=borderSegmentForBefore(beforeBorderProps);

  BorderSegment after=borderSegmentForAfter(afterBorderProps);

  BorderSegment start=borderSegmentForStart(startBorderProps);

  BorderSegment end=borderSegmentForEnd(endBorderProps);

  if (before.getWidth() == 0 && after.getWidth() == 0 && start.getWidth() == 0 && end.getWidth() == 0) {

    return;

  }

  final int startx=borderRect.x + start.getClippedWidth();

  final int starty=borderRect.y + before.getClippedWidth();

  final int width=borderRect.width - start.getClippedWidth() - end.getClippedWidth();

  final int height=borderRect.height - before.getClippedWidth() - after.getClippedWidth();

  double cornerCorrectionFactor=calculateCornerScaleCorrection(width,height,before,after,start,end);

  drawBorderSegment(start,before,end,0,width,startx,starty,cornerCorrectionFactor);

  drawBorderSegment(before,end,after,1,height,startx + width,starty,cornerCorrectionFactor);

  drawBorderSegment(end,after,start,2,width,startx + width,starty + height,cornerCorrectionFactor);

  drawBorderSegment(after,start,before,3,height,startx,starty + height,cornerCorrectionFactor);

}

Location: BorderPainter.java

Content: 

private double[] getCornerBorderJoinMetrics(double ellipseCenterX,double ellipseCenterY,double borderWidthRatio){

  double x=ellipseCenterY * ellipseCenterX * (ellipseCenterY + ellipseCenterX * borderWidthRatio - Math.sqrt(2d * ellipseCenterX * ellipseCenterY* borderWidthRatio)) / (ellipseCenterY * ellipseCenterY + ellipseCenterX * ellipseCenterX * borderWidthRatio* borderWidthRatio);

  double y=borderWidthRatio * x;

  return new double[]{x,y,Math.atan((ellipseCenterY - y) / (ellipseCenterX - x))};

}

Location: BorderPainter.java

Content: 

private double[] getCornerBorderJoinMetrics(double ellipseCenterX,double ellipseCenterY,double xWidth,double yWidth){

  if (xWidth > 0) {

    return getCornerBorderJoinMetrics(ellipseCenterX,ellipseCenterY,yWidth / xWidth);

  }

 else {

    return new double[]{0,ellipseCenterY,0};

  }

}

Location: BorderPainter.java

Content: 

private boolean isCollapseOuter(BorderProps bp){

  return bp != null && bp.isCollapseOuter();

}

Location: BorderPainter.java

Content: 

private BorderProps sanitizeBorderProps(BorderProps bps){

  return bps == null ? bps : bps.width == 0 ? (BorderProps)null : bps;

}

