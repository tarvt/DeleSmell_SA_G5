Location: ListItemLayoutManager.java

Content: 

/** 

 * Overridden to unconditionally add elements for space-before. {@inheritDoc}

 */

@Override protected void addFirstVisibleMarks(List<ListElement> elements,LayoutContext context,int alignment){

  addKnuthElementsForSpaceBefore(elements,alignment);

  addKnuthElementsForBorderPaddingBefore(elements,!firstVisibleMarkServed);

  firstVisibleMarkServed=true;

  addPendingMarks(context);

}

Location: ListItemLayoutManager.java

Content: 

@Override public int getBaselineOffset(){

  if (label.hasLineAreaDescendant()) {

    return label.getBaselineOffset();

  }

 else   if (body.hasLineAreaDescendant()) {

    return body.getBaselineOffset();

  }

 else {

    throw newNoLineAreaDescendantException();

  }

}

Location: ListItemLayoutManager.java

Content: 

@Override public int getBreakBefore(){

  int breakBefore=BreakOpportunityHelper.getBreakBefore(this);

  breakBefore=BreakUtil.compareBreakClasses(breakBefore,label.getBreakBefore());

  breakBefore=BreakUtil.compareBreakClasses(breakBefore,body.getBreakBefore());

  return breakBefore;

}

Location: ListItemLayoutManager.java

Content: 

/** 

 * {@inheritDoc} 

 */

@Override public List getChangedKnuthElements(List oldList,int alignment){

  labelList=label.getChangedKnuthElements(labelList,alignment);

  ListIterator oldListIterator=oldList.listIterator();

  KnuthElement oldElement;

  while (oldListIterator.hasNext()) {

    oldElement=(KnuthElement)oldListIterator.next();

    Position innerPosition=oldElement.getPosition().getPosition();

    if (innerPosition != null) {

      oldElement.setPosition(innerPosition);

    }

 else {

      oldElement.setPosition(new Position(this));

    }

  }

  List returnedList=body.getChangedKnuthElements(oldList,alignment);

  List tempList=returnedList;

  KnuthElement tempElement;

  returnedList=new LinkedList();

  for (  Object aTempList : tempList) {

    tempElement=(KnuthElement)aTempList;

    tempElement.setPosition(new NonLeafPosition(this,tempElement.getPosition()));

    returnedList.add(tempElement);

  }

  return returnedList;

}

Location: ListItemLayoutManager.java

Content: 

private List getCombinedKnuthElementsForListItem(List<ListElement> labelElements,List<ListElement> bodyElements,LayoutContext context){

  List[] elementLists={new ArrayList<ListElement>(labelElements),new ArrayList<ListElement>(bodyElements)};

  int[] fullHeights={ElementListUtils.calcContentLength(elementLists[0]),ElementListUtils.calcContentLength(elementLists[1])};

  int[] partialHeights={0,0};

  int[] start={-1,-1};

  int[] end={-1,-1};

  int totalHeight=Math.max(fullHeights[0],fullHeights[1]);

  int step;

  int addedBoxHeight=0;

  Keep keepWithNextActive=Keep.KEEP_AUTO;

  LinkedList<ListElement> returnList=new LinkedList<ListElement>();

  while ((step=getNextStep(elementLists,start,end,partialHeights)) > 0) {

    if (end[0] + 1 == elementLists[0].size()) {

      keepWithNextActive=keepWithNextActive.compare(keepWithNextPendingOnLabel);

    }

    if (end[1] + 1 == elementLists[1].size()) {

      keepWithNextActive=keepWithNextActive.compare(keepWithNextPendingOnBody);

    }

    int penaltyHeight=step + getMaxRemainingHeight(fullHeights,partialHeights) - totalHeight;

    int additionalPenaltyHeight=0;

    int stepPenalty=0;

    int breakClass=EN_AUTO;

    KnuthElement endEl=elementLists[0].size() > 0 ? (KnuthElement)elementLists[0].get(end[0]) : null;

    Position originalLabelPosition=(endEl != null && endEl.getPosition() != null) ? endEl.getPosition().getPosition() : null;

    if (endEl instanceof KnuthPenalty) {

      additionalPenaltyHeight=endEl.getWidth();

      stepPenalty=endEl.getPenalty() == -KnuthElement.INFINITE ? -KnuthElement.INFINITE : Math.max(stepPenalty,endEl.getPenalty());

      breakClass=BreakUtil.compareBreakClasses(breakClass,((KnuthPenalty)endEl).getBreakClass());

    }

    endEl=elementLists[1].size() > 0 ? (KnuthElement)elementLists[1].get(end[1]) : null;

    Position originalBodyPosition=(endEl != null && endEl.getPosition() != null) ? endEl.getPosition().getPosition() : null;

    if (endEl instanceof KnuthPenalty) {

      additionalPenaltyHeight=Math.max(additionalPenaltyHeight,endEl.getWidth());

      stepPenalty=endEl.getPenalty() == -KnuthElement.INFINITE ? -KnuthElement.INFINITE : Math.max(stepPenalty,endEl.getPenalty());

      breakClass=BreakUtil.compareBreakClasses(breakClass,((KnuthPenalty)endEl).getBreakClass());

    }

    int boxHeight=step - addedBoxHeight - penaltyHeight;

    penaltyHeight+=additionalPenaltyHeight;

    LinkedList<LayoutManager> footnoteList=new LinkedList<LayoutManager>();

    for (int i=0; i < elementLists.length; i++) {

      footnoteList.addAll(FootenoteUtil.getFootnotes(elementLists[i],start[i],end[i]));

    }

    LinkedList<FloatContentLayoutManager> floats=new LinkedList<FloatContentLayoutManager>();

    for (int i=0; i < elementLists.length; i++) {

      floats.addAll(FloatContentLayoutManager.checkForFloats(elementLists[i],start[i],end[i]));

    }

    addedBoxHeight+=boxHeight;

    ListItemPosition stepPosition=new ListItemPosition(this,start[0],end[0],start[1],end[1]);

    stepPosition.setOriginalLabelPosition(originalLabelPosition);

    stepPosition.setOriginalBodyPosition(originalBodyPosition);

    if (floats.isEmpty()) {

      returnList.add(new KnuthBlockBox(boxHeight,footnoteList,stepPosition,false));

    }

 else {

      returnList.add(new KnuthBlockBox(0,Collections.emptyList(),stepPosition,false,floats));

      Keep keep=getKeepTogether();

      returnList.add(new BreakElement(stepPosition,keep.getPenalty(),keep.getContext(),context));

      returnList.add(new KnuthBlockBox(boxHeight,footnoteList,stepPosition,false));

    }

    if (originalBodyPosition != null && getKeepWithPrevious().isAuto() && shouldWeAvoidBreak(returnList,originalBodyPosition.getLM())) {

      stepPenalty++;

    }

    if (addedBoxHeight < totalHeight) {

      Keep keep=keepWithNextActive.compare(getKeepTogether());

      int p=stepPenalty;

      if (p > -KnuthElement.INFINITE) {

        p=Math.max(p,keep.getPenalty());

        breakClass=keep.getContext();

      }

      returnList.add(new BreakElement(stepPosition,penaltyHeight,p,breakClass,context));

    }

  }

  return returnList;

}

Location: ListItemLayoutManager.java

Content: 

/** 

 * Convenience method.

 * @return the ListBlock node

 */

protected ListItem getListItemFO(){

  return (ListItem)fobj;

}

Location: ListItemLayoutManager.java

Content: 

private int getMaxRemainingHeight(int[] fullHeights,int[] partialHeights){

  return Math.max(fullHeights[0] - partialHeights[0],fullHeights[1] - partialHeights[1]);

}

Location: ListItemLayoutManager.java

Content: 

private int getNextStep(List[] elementLists,int[] start,int[] end,int[] partialHeights){

  int[] backupHeights={partialHeights[0],partialHeights[1]};

  start[0]=end[0] + 1;

  start[1]=end[1] + 1;

  int seqCount=0;

  for (int i=0; i < start.length; i++) {

    while (end[i] + 1 < elementLists[i].size()) {

      end[i]++;

      KnuthElement el=(KnuthElement)elementLists[i].get(end[i]);

      if (el.isPenalty()) {

        if (el.getPenalty() < KnuthElement.INFINITE) {

          break;

        }

      }

 else       if (el.isGlue()) {

        if (end[i] > 0) {

          KnuthElement prev=(KnuthElement)elementLists[i].get(end[i] - 1);

          if (prev.isBox()) {

            break;

          }

        }

        partialHeights[i]+=el.getWidth();

      }

 else {

        partialHeights[i]+=el.getWidth();

      }

    }

    if (end[i] < start[i]) {

      partialHeights[i]=backupHeights[i];

    }

 else {

      seqCount++;

    }

  }

  if (seqCount == 0) {

    return 0;

  }

  int step;

  if (backupHeights[0] == 0 && backupHeights[1] == 0) {

    step=Math.max((end[0] >= start[0] ? partialHeights[0] : Integer.MIN_VALUE),(end[1] >= start[1] ? partialHeights[1] : Integer.MIN_VALUE));

  }

 else {

    step=Math.min((end[0] >= start[0] ? partialHeights[0] : Integer.MAX_VALUE),(end[1] >= start[1] ? partialHeights[1] : Integer.MAX_VALUE));

  }

  for (int i=0; i < partialHeights.length; i++) {

    if (partialHeights[i] > step) {

      partialHeights[i]=backupHeights[i];

      end[i]=start[i] - 1;

    }

  }

  return step;

}

Location: ListItemLayoutManager.java

Content: 

@Override public boolean hasLineAreaDescendant(){

  return label.hasLineAreaDescendant() || body.hasLineAreaDescendant();

}

Location: ListItemLayoutManager.java

Content: 

/** 

 * Create a new list item layout manager.

 * @param node list-item to create the layout manager for

 */

public ListItemLayoutManager(ListItem node){

  super(node);

  setLabel(node.getLabel());

  setBody(node.getBody());

}

Location: ListItemLayoutManager.java

Content: 

/** 

 * Create a LM for the fo:list-item-body object

 * @param node the fo:list-item-body FO

 */

public void setBody(ListItemBody node){

  body=new ListItemContentLayoutManager(node);

  body.setParent(this);

}

Location: ListItemLayoutManager.java

Content: 

/** 

 * Create a LM for the fo:list-item-label object

 * @param node the fo:list-item-label FO

 */

public void setLabel(ListItemLabel node){

  label=new ListItemContentLayoutManager(node);

  label.setParent(this);

}

Location: ListItemLayoutManager.java

Content: 

private boolean shouldWeAvoidBreak(List returnList,LayoutManager lm){

  if (lm instanceof BlockLayoutManager) {

    return true;

  }

  if (lm instanceof ListBlockLayoutManager) {

    int penaltyShootout=0;

    for (    Object o : returnList) {

      if (o instanceof BreakElement) {

        if (((BreakElement)o).getPenaltyValue() > 0) {

          penaltyShootout++;

        }

 else {

          penaltyShootout--;

        }

      }

    }

    return penaltyShootout > 0;

  }

  return false;

}

