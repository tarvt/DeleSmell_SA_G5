Location: PDFRendererOptionsConfig.java

Content: 

private static PDFEncryptionParams copyPDFEncryptionParams(PDFEncryptionParams source){

  return source == null ? null : new PDFEncryptionParams(source);

}

Location: PDFRendererOptionsConfig.java

Content: 

public Boolean getDisableSRGBColorSpace(){

  return (Boolean)properties.get(DISABLE_SRGB_COLORSPACE);

}

Location: PDFRendererOptionsConfig.java

Content: 

public PDFEncryptionParams getEncryptionParameters(){

  return encryptionConfig;

}

Location: PDFRendererOptionsConfig.java

Content: 

public Map<String,List<String>> getFilterMap(){

  return (Map<String,List<String>>)properties.get(FILTER_LIST);

}

Location: PDFRendererOptionsConfig.java

Content: 

public Boolean getFormXObjectEnabled(){

  return (Boolean)properties.get(FORM_XOBJECT);

}

Location: PDFRendererOptionsConfig.java

Content: 

public Boolean getLinearizationEnabled(){

  return (Boolean)properties.get(LINEARIZATION);

}

Location: PDFRendererOptionsConfig.java

Content: 

public Boolean getMergeFontsEnabled(){

  return (Boolean)properties.get(MERGE_FONTS);

}

Location: PDFRendererOptionsConfig.java

Content: 

public URI getOutputProfileURI(){

  return (URI)properties.get(OUTPUT_PROFILE);

}

Location: PDFRendererOptionsConfig.java

Content: 

public PDFAMode getPDFAMode(){

  return (PDFAMode)properties.get(PDF_A_MODE);

}

Location: PDFRendererOptionsConfig.java

Content: 

public PDFUAMode getPDFUAMode(){

  return (PDFUAMode)properties.get(PDF_UA_MODE);

}

Location: PDFRendererOptionsConfig.java

Content: 

public Version getPDFVersion(){

  return (Version)properties.get(VERSION);

}

Location: PDFRendererOptionsConfig.java

Content: 

public PDFVTMode getPDFVTMode(){

  return (PDFVTMode)properties.get(PDF_VT_MODE);

}

Location: PDFRendererOptionsConfig.java

Content: 

public PDFXMode getPDFXMode(){

  return (PDFXMode)properties.get(PDF_X_MODE);

}

Location: PDFRendererOptionsConfig.java

Content: 

private static Map<PDFRendererOption,Object> merge(Map<PDFRendererOption,Object> first,Map<PDFRendererOption,Object> second){

  final EnumMap<PDFRendererOption,Object> merged=new EnumMap<PDFRendererOption,Object>(PDFRendererOption.class);

  for (  PDFRendererOption option : PDFRendererOption.values()) {

    Object value=second.get(option);

    if (value != null) {

      merged.put(option,value);

    }

 else {

      merged.put(option,first.get(option));

    }

  }

  return merged;

}

Location: PDFRendererOptionsConfig.java

Content: 

PDFRendererOptionsConfig merge(PDFRendererOptionsConfig config){

  if (config == null) {

    return this;

  }

 else {

    return new PDFRendererOptionsConfig(merge(this.properties,config.properties),config.getEncryptionParameters() == null ? copyPDFEncryptionParams(this.encryptionConfig) : copyPDFEncryptionParams(config.getEncryptionParameters()));

  }

}

Location: PDFRendererOptionsConfig.java

Content: 

PDFRendererOptionsConfig(Map<PDFRendererOption,Object> props,PDFEncryptionParams encryptionParams){

  properties.putAll(props);

  this.encryptionConfig=copyPDFEncryptionParams(encryptionParams);

}

