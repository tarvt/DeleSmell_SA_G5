Location: FOPFontFamilyResolverTestCase.java

Content: 

@Before public void createFontFamilyResolver(){

  resolver=new FOPFontFamilyResolverImpl(fontInfo);

}

Location: FOPFontFamilyResolverTestCase.java

Content: 

private LineMetrics getAWTLineMetrics() throws FontFormatException, IOException {

  File fontFile=new File("test/resources/fonts/ttf/DejaVuLGCSerif.ttf");

  java.awt.Font awtFont=java.awt.Font.createFont(java.awt.Font.TRUETYPE_FONT,fontFile).deriveFont(10f);

  GraphicsEnvironment ge=GraphicsEnvironment.getLocalGraphicsEnvironment();

  BufferedImage dummyImage=new BufferedImage(1000,1000,BufferedImage.TYPE_INT_RGB);

  FontRenderContext frc=ge.createGraphics(dummyImage).getFontRenderContext();

  LineMetrics awtMetrics=awtFont.getLineMetrics("ABC",frc);

  return awtMetrics;

}

Location: FOPFontFamilyResolverTestCase.java

Content: 

private void printDifference(String value,float awt,float fop){

  System.out.println(String.format("%22s  AWT: %10f  FOP: %10f  Difference: %.2f%%",value,awt,fop,(fop - awt) / awt * 100));

}

Location: FOPFontFamilyResolverTestCase.java

Content: 

@BeforeClass public static void setUpFontInfo(){

  fontInfo=new FontInfoBuilder().useDejaVuLGCSerif().useDroidSansMono().build();

}

Location: FOPFontFamilyResolverTestCase.java

Content: 

@Test public void testDeriveFont(){

  FOPGVTFontFamily family=resolver.resolve(FontInfoBuilder.DEJAVU_LGC_SERIF);

  FOPGVTFont font=family.deriveFont(10,Collections.emptyMap());

  assertEquals(10,font.getSize(),0);

  assertTrue(font.canDisplay('\u01F6'));

  assertFalse(font.canDisplay('\u01F7'));

}

Location: FOPFontFamilyResolverTestCase.java

Content: 

@Test public void testGetFamilyThatCanDisplay(){

  GVTFontFamily family=resolver.getFamilyThatCanDisplay('\u0180');

  assertEquals(FontInfoBuilder.DEJAVU_LGC_SERIF,family.getFamilyName());

  family=resolver.getFamilyThatCanDisplay('\u02F3');

  assertEquals(FontInfoBuilder.DROID_SANS_MONO,family.getFamilyName());

  family=resolver.getFamilyThatCanDisplay('\u02DF');

  assertNull(family);

}

Location: FOPFontFamilyResolverTestCase.java

Content: 

@Test @Ignore("FOP metrics don't match AWT, but not sure who is right and who is wrong") public void testLineMetrics() throws FontFormatException, IOException {

  FOPGVTFontFamily family=resolver.resolve(FontInfoBuilder.DEJAVU_LGC_SERIF);

  FOPGVTFont font=family.deriveFont(10,Collections.emptyMap());

  GVTLineMetrics fopMetrics=font.getLineMetrics("",null);

  LineMetrics awtMetrics=getAWTLineMetrics();

  printDifference("Ascent",awtMetrics.getAscent(),fopMetrics.getAscent());

  printDifference("Descent",awtMetrics.getDescent(),fopMetrics.getDescent());

  printDifference("Height",awtMetrics.getHeight(),fopMetrics.getHeight());

  printDifference("Leading",awtMetrics.getLeading(),fopMetrics.getLeading());

  printDifference("StrikethroughOffset",awtMetrics.getStrikethroughOffset(),fopMetrics.getStrikethroughOffset());

  printDifference("StrikethroughThickness",awtMetrics.getStrikethroughThickness(),fopMetrics.getStrikethroughThickness());

  printDifference("UnderlineOffset",awtMetrics.getUnderlineOffset(),fopMetrics.getUnderlineOffset());

  printDifference("UnderlineThickness",awtMetrics.getUnderlineThickness(),fopMetrics.getUnderlineThickness());

}

Location: FOPFontFamilyResolverTestCase.java

Content: 

@Test public void testResolve(){

  assertNull(resolver.resolve("Unavailable"));

  assertNotNull(resolver.resolve(FontInfoBuilder.DEJAVU_LGC_SERIF));

}

