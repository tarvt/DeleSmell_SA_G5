Location: FopFactoryBuilderTestCase.java

Content: 

private FopFactory buildFopFactory(){

  return defaultBuilder.build();

}

Location: FopFactoryBuilderTestCase.java

Content: 

private void runSetterTest(Runnable setterTest){

  setterTest.run();

  try {

    setterTest.run();

    fail(POST_SET_ERROR_MSG);

  }

 catch (  IllegalStateException e) {

  }

}

Location: FopFactoryBuilderTestCase.java

Content: 

@Test public void testDefaultImplementation(){

  testDefaults(defaultBuilder.build(),URI.create("."));

}

Location: FopFactoryBuilderTestCase.java

Content: 

public static void testDefaults(FopFactory factory,URI baseURI){

  assertFalse(factory.isAccessibilityEnabled());

  assertNull(factory.getLayoutManagerMakerOverride());

  assertEquals(FopFactoryConfig.DEFAULT_STRICT_FO_VALIDATION,factory.validateStrictly());

  assertEquals(FopFactoryConfig.DEFAULT_STRICT_USERCONFIG_VALIDATION,factory.validateUserConfigStrictly());

  assertEquals(FopFactoryConfig.DEFAULT_BREAK_INDENT_INHERITANCE,factory.isBreakIndentInheritanceOnReferenceAreaBoundary());

  assertEquals(FopFactoryConfig.DEFAULT_SOURCE_RESOLUTION,factory.getSourceResolution(),0.001f);

  assertEquals(FopFactoryConfig.DEFAULT_TARGET_RESOLUTION,factory.getTargetResolution(),0.001f);

  assertEquals(FopFactoryConfig.DEFAULT_PAGE_HEIGHT,factory.getPageHeight());

  assertEquals(FopFactoryConfig.DEFAULT_PAGE_WIDTH,factory.getPageWidth());

  assertFalse(factory.getRendererFactory().isRendererPreferred());

}

Location: FopFactoryBuilderTestCase.java

Content: 

@Test public void testGetSetBreakInheritance(){

  runSetterTest(new Runnable(){

    public void run(){

      defaultBuilder.setBreakIndentInheritanceOnReferenceAreaBoundary(true);

      assertTrue(buildFopFactory().isBreakIndentInheritanceOnReferenceAreaBoundary());

    }

  }

);

}

Location: FopFactoryBuilderTestCase.java

Content: 

@Test public void testGetSetIsNamespaceIgnored(){

  runSetterTest(new Runnable(){

    public void run(){

      String testString="Purely for testing";

      defaultBuilder.ignoreNamespace(testString);

      assertTrue(buildFopFactory().isNamespaceIgnored(testString));

    }

  }

);

}

Location: FopFactoryBuilderTestCase.java

Content: 

@Test public void testGetSetListNamespaceIgnored(){

  runSetterTest(new Runnable(){

    public void run(){

      List<String> strings=new ArrayList<String>();

      strings.add("1");

      strings.add("2");

      strings.add("3");

      defaultBuilder.ignoreNamespaces(strings);

      FopFactory factory=buildFopFactory();

      assertTrue(factory.isNamespaceIgnored("1"));

      assertTrue(factory.isNamespaceIgnored("2"));

      assertTrue(factory.isNamespaceIgnored("3"));

    }

  }

);

}

Location: FopFactoryBuilderTestCase.java

Content: 

@Test public void testGetSetPageHeight(){

  runSetterTest(new Runnable(){

    public void run(){

      String testString="Purely for testing";

      defaultBuilder.setPageHeight(testString);

      assertEquals(testString,buildFopFactory().getPageHeight());

    }

  }

);

}

Location: FopFactoryBuilderTestCase.java

Content: 

@Test public void testGetSetPageWidth(){

  runSetterTest(new Runnable(){

    public void run(){

      String testString="Purely for testing";

      defaultBuilder.setPageWidth(testString);

      assertEquals(testString,buildFopFactory().getPageWidth());

    }

  }

);

}

Location: FopFactoryBuilderTestCase.java

Content: 

@Test public void testGetSetPreferRenderer(){

  runSetterTest(new Runnable(){

    public void run(){

      defaultBuilder.setPreferRenderer(true);

      assertTrue(buildFopFactory().getRendererFactory().isRendererPreferred());

    }

  }

);

}

Location: FopFactoryBuilderTestCase.java

Content: 

@Test public void testGetSetSourceRes(){

  runSetterTest(new Runnable(){

    public void run(){

      float testRes=10f;

      defaultBuilder.setSourceResolution(testRes);

      assertEquals(testRes,buildFopFactory().getSourceResolution(),0.0001);

    }

  }

);

}

Location: FopFactoryBuilderTestCase.java

Content: 

@Test public void testGetSetTargetRes(){

  runSetterTest(new Runnable(){

    public void run(){

      float testRes=10f;

      defaultBuilder.setTargetResolution(testRes);

      assertEquals(testRes,buildFopFactory().getTargetResolution(),0.0001f);

    }

  }

);

}

Location: FopFactoryBuilderTestCase.java

Content: 

@Test public void testGetSetValidateFO(){

  runSetterTest(new Runnable(){

    public void run(){

      defaultBuilder.setStrictFOValidation(false);

      assertFalse(buildFopFactory().validateStrictly());

    }

  }

);

}

Location: FopFactoryBuilderTestCase.java

Content: 

@Test public void testGetSetValidateUserConfig(){

  runSetterTest(new Runnable(){

    public void run(){

      defaultBuilder.setStrictUserConfigValidation(false);

      assertFalse(buildFopFactory().validateUserConfigStrictly());

    }

  }

);

}

Location: FopFactoryBuilderTestCase.java

Content: 

@Test(expected=IllegalArgumentException.class) public void testNullParamsInConstructor() throws URISyntaxException {

  new FopFactoryBuilder(null,ResourceResolverFactory.createDefaultResourceResolver());

}

Location: FopFactoryBuilderTestCase.java

Content: 

@Test public void testSetGetAccessibility(){

  runSetterTest(new Runnable(){

    public void run(){

      defaultBuilder.setAccessibility(true);

      assertTrue(buildFopFactory().isAccessibilityEnabled());

    }

  }

);

}

Location: FopFactoryBuilderTestCase.java

Content: 

@Test public void testSetGetBaseURI(){

  runSetterTest(new Runnable(){

    public void run(){

      URI nonDefaultURI=URI.create("./test/");

      defaultBuilder.setBaseURI(nonDefaultURI);

      assertEquals(nonDefaultURI,defaultBuilder.buildConfiguration().getBaseURI());

    }

  }

);

}

Location: FopFactoryBuilderTestCase.java

Content: 

@Test public void testsetGetLMM(){

  runSetterTest(new Runnable(){

    public void run(){

      LayoutManagerMaker testLmm=new LayoutManagerMaker(){

        public StaticContentLayoutManager makeStaticContentLayoutManager(        PageSequenceLayoutManager pslm,        StaticContent sc,        Block block){

          return null;

        }

        public StaticContentLayoutManager makeStaticContentLayoutManager(        PageSequenceLayoutManager pslm,        StaticContent sc,        SideRegion reg){

          return null;

        }

        public PageSequenceLayoutManager makePageSequenceLayoutManager(        AreaTreeHandler ath,        PageSequence ps){

          return null;

        }

        public void makeLayoutManagers(        FONode node,        List lms){

        }

        public LayoutManager makeLayoutManager(        FONode node){

          return null;

        }

        public FlowLayoutManager makeFlowLayoutManager(        PageSequenceLayoutManager pslm,        Flow flow){

          return null;

        }

        public ExternalDocumentLayoutManager makeExternalDocumentLayoutManager(        AreaTreeHandler ath,        ExternalDocument ed){

          return null;

        }

        public ContentLayoutManager makeContentLayoutManager(        PageSequenceLayoutManager pslm,        Title title){

          return null;

        }

      }

;

      defaultBuilder.setLayoutManagerMakerOverride(testLmm);

      assertEquals(testLmm,buildFopFactory().getLayoutManagerMakerOverride());

    }

  }

);

}

