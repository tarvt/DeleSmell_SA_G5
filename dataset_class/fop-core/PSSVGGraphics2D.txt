Location: PSSVGGraphics2D.java

Content: 

private String outputPattern(Pattern pattern){

  StringBuilder p=new StringBuilder(64);

  p.append("/Pattern setcolorspace\n");

  p.append("<< \n/Type /Pattern \n");

  p.append("/PatternType " + pattern.getPatternType() + " \n");

  if (pattern.getShading() != null) {

    p.append("/Shading ");

    outputShading(p,pattern.getShading());

    p.append(" \n");

  }

  p.append(">> \n");

  p.append("[ ");

  for (  double m : pattern.getMatrix()) {

    p.append(getPSGenerator().formatDouble(m));

    p.append(" ");

  }

  p.append("] ");

  p.append("makepattern setcolor\n");

  return p.toString();

}

Location: PSSVGGraphics2D.java

Content: 

private void outputShading(StringBuilder out,Shading shading){

  final GradientMaker.DoubleFormatter doubleFormatter=new DoubleFormatter(){

    public String formatDouble(    double d){

      return getPSGenerator().formatDouble(d);

    }

  }

;

  final Function function=shading.getFunction();

  Shading.FunctionRenderer functionRenderer=new Shading.FunctionRenderer(){

    public void outputFunction(    StringBuilder out){

      SubFunctionRenderer subFunctionRenderer=new Function.SubFunctionRenderer(){

        public void outputFunction(        StringBuilder out,        int functionIndex){

          Function subFunction=function.getFunctions().get(functionIndex);

          assert subFunction.getFunctions().isEmpty();

          subFunction.output(out,doubleFormatter,null);

        }

      }

;

      function.output(out,doubleFormatter,subFunctionRenderer);

    }

  }

;

  shading.output(out,doubleFormatter,functionRenderer);

}

Location: PSSVGGraphics2D.java

Content: 

/** 

 * Create a new Graphics2D that generates PostScript code.

 * @param textAsShapes True if text should be rendered as graphics

 * @see org.apache.xmlgraphics.java2d.AbstractGraphics2D#AbstractGraphics2D(boolean)

 */

public PSSVGGraphics2D(boolean textAsShapes){

  super(textAsShapes);

}

Location: PSSVGGraphics2D.java

Content: 

/** 

 * Create a new Graphics2D that generates PostScript code.

 * @param textAsShapes True if text should be rendered as graphics

 * @param gen PostScript generator to use for output

 * @see org.apache.xmlgraphics.java2d.AbstractGraphics2D#AbstractGraphics2D(boolean)

 */

public PSSVGGraphics2D(boolean textAsShapes,PSGenerator gen){

  super(textAsShapes,gen);

}

Location: PSSVGGraphics2D.java

Content: 

/** 

 * Constructor for creating copies

 * @param g parent PostScript Graphics2D

 */

public PSSVGGraphics2D(PSGraphics2D g){

  super(g);

}

