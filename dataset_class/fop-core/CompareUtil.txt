Location: CompareUtil.java

Content: 

private CompareUtil(){

}

Location: CompareUtil.java

Content: 

/** 

 * Compares two numbers for equality. Uses the same comparison algorithm as the  {@link Double#equals(Object)} method.

 * @param n1 a number

 * @param n2 another number

 * @return true if the two numbers are equal, false otherwise

 */

public static boolean equal(double n1,double n2){

  return Double.doubleToLongBits(n1) == Double.doubleToLongBits(n2);

}

Location: CompareUtil.java

Content: 

/** 

 * Compares two objects for equality. In order to prevent lock-ordering deadlocks the following strategy is used: when two non null objects are passed to the method, the comparison is done by calling the  {@link Object#equals(Object)} method of the objectwith the lower hash code ( {@link System#identityHashCode(Object)}); in the rare case that two different objects have the same hash code, a lock is used.

 * @param o1 an object

 * @param o2 another object

 * @return true if either o1 and o2 are null or if o1.equals(o2)

 */

public static boolean equal(Object o1,Object o2){

  int o1Hash=System.identityHashCode(o1);

  int o2Hash=System.identityHashCode(o2);

  if (o1Hash == o2Hash && o1 != o2 && o1Hash != 0) {

synchronized (TIE_LOCK) {

      return o1.equals(o2);

    }

  }

  if (o1Hash > o2Hash) {

    Object tmp=o1;

    o1=o2;

    o2=tmp;

  }

  return o1 == null ? o2 == null : o1 == o2 || o1.equals(o2);

}

Location: CompareUtil.java

Content: 

/** 

 * Returns a hash code for the given number. Applies the same algorithm as the  {@link Double#hashCode()} method.

 * @param number a number

 * @return a hash code for that number

 */

public static int getHashCode(double number){

  long bits=Double.doubleToLongBits(number);

  return (int)(bits ^ (bits >>> 32));

}

Location: CompareUtil.java

Content: 

/** 

 * Returns the hash code of the given object.

 * @param object an object

 * @return object.hashCode(), or 0 if object is null

 */

public static int getHashCode(Object object){

  return object == null ? 0 : object.hashCode();

}

