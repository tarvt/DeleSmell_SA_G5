Location: MapCodedFont.java

Content: 

/** 

 * Add a font definition on the the map coded font object.

 * @param fontReference the font number used as the resource identifier

 * @param font the font

 * @param size the size of the font

 * @param orientation the orientation of the font

 * @throws MaximumSizeExceededException if the maximum number of fonts have been exceeded

 */

public void addFont(int fontReference,AFPFont font,int size,int orientation) throws MaximumSizeExceededException {

  FontDefinition fontDefinition=new FontDefinition();

  fontDefinition.fontReferenceKey=BinaryUtils.convert(fontReference)[0];

switch (orientation) {

case 90:

    fontDefinition.orientation=0x2D;

  break;

case 180:

fontDefinition.orientation=0x5A;

break;

case 270:

fontDefinition.orientation=(byte)0x87;

break;

default :

fontDefinition.orientation=0x00;

break;

}

try {

if (font instanceof RasterFont) {

RasterFont raster=(RasterFont)font;

CharacterSet cs=raster.getCharacterSet(size);

if (cs == null) {

String msg="Character set not found for font " + font.getFontName() + " with point size "+ size;

LOG.error(msg);

throw new FontRuntimeException(msg);

}

fontDefinition.characterSet=cs.getNameBytes();

if (fontDefinition.characterSet.length != 8) {

throw new IllegalArgumentException("The character set " + new String(fontDefinition.characterSet,AFPConstants.EBCIDIC_ENCODING) + " must have a fixed length of 8 characters.");

}

fontDefinition.codePage=cs.getCodePage().getBytes(AFPConstants.EBCIDIC_ENCODING);

if (fontDefinition.codePage.length != 8) {

throw new IllegalArgumentException("The code page " + new String(fontDefinition.codePage,AFPConstants.EBCIDIC_ENCODING) + " must have a fixed length of 8 characters.");

}

}

 else if (font instanceof OutlineFont) {

OutlineFont outline=(OutlineFont)font;

CharacterSet cs=outline.getCharacterSet();

fontDefinition.characterSet=cs.getNameBytes();

fontDefinition.scale=20 * size / 1000;

fontDefinition.codePage=cs.getCodePage().getBytes(AFPConstants.EBCIDIC_ENCODING);

if (fontDefinition.codePage.length != 8) {

throw new IllegalArgumentException("The code page " + new String(fontDefinition.codePage,AFPConstants.EBCIDIC_ENCODING) + " must have a fixed length of 8 characters.");

}

}

 else if (font instanceof DoubleByteFont) {

DoubleByteFont outline=(DoubleByteFont)font;

CharacterSet cs=outline.getCharacterSet();

fontDefinition.characterSet=cs.getNameBytes();

fontDefinition.scale=20 * size / 1000;

fontDefinition.codePage=cs.getCodePage().getBytes(AFPConstants.EBCIDIC_ENCODING);

if (fontDefinition.codePage.length != 8) {

throw new IllegalArgumentException("The code page " + new String(fontDefinition.codePage,AFPConstants.EBCIDIC_ENCODING) + " must have a fixed length of 8 characters.");

}

}

 else {

String msg="Font of type " + font.getClass().getName() + " not recognized.";

LOG.error(msg);

throw new FontRuntimeException(msg);

}

if (fontList.size() > 253) {

throw new MaximumSizeExceededException();

}

 else {

fontList.add(fontDefinition);

}

}

 catch (UnsupportedEncodingException ex) {

throw new FontRuntimeException("Failed to create font " + " due to a UnsupportedEncodingException",ex);

}

}

Location: MapCodedFont.java

Content: 

/** 

 * Main constructor

 */

public MapCodedFont(){

}

