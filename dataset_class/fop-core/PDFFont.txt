Location: PDFFont.java

Content: 

/** 

 * factory method with the basic parameters

 * @param fontname the internal name for the font

 * @param subtype the font's subtype

 * @param basefont the base font name

 * @param encoding the character encoding schema used by the font

 * @return the generated PDFFont object

 */

public static PDFFont createFont(String fontname,FontType subtype,String basefont,Object encoding){

  if (subtype == FontType.TYPE0 || subtype == FontType.CIDTYPE0) {

    return new PDFFontType0(fontname,basefont,encoding);

  }

 else   if ((subtype == FontType.TYPE1) || (subtype == FontType.TYPE1C) || (subtype == FontType.MMTYPE1)) {

    return new PDFFontType1(fontname,basefont,encoding);

  }

 else   if (subtype == FontType.TYPE3) {

    return null;

  }

 else   if (subtype == FontType.TRUETYPE) {

    return new PDFFontTrueType(fontname,basefont,encoding);

  }

 else {

    return null;

  }

}

Location: PDFFont.java

Content: 

/** 

 * Returns the name of the BaseFont.

 * @return the BaseFont

 */

public PDFName getBaseFont(){

  return (PDFName)get("BaseFont");

}

Location: PDFFont.java

Content: 

/** 

 * Returns the PDF name for a certain font type.

 * @param fontType font type

 * @return String corresponding PDF name

 */

protected PDFName getPDFNameForFontType(FontType fontType){

  if (fontType == FontType.TYPE0) {

    return new PDFName(fontType.getName());

  }

 else   if (fontType == FontType.TYPE1) {

    return new PDFName(fontType.getName());

  }

 else   if (fontType == FontType.MMTYPE1) {

    return new PDFName(fontType.getName());

  }

 else   if (fontType == FontType.TYPE3) {

    return new PDFName(fontType.getName());

  }

 else   if (fontType == FontType.TRUETYPE) {

    return new PDFName(fontType.getName());

  }

 else {

    throw new IllegalArgumentException("Unsupported font type: " + fontType.getName());

  }

}

Location: PDFFont.java

Content: 

/** 

 * create the /Font object

 * @param fontname the internal name for the font

 * @param subtype the font's subtype

 * @param basefont the base font name

 * @param encoding the character encoding schema used by the font

 */

public PDFFont(String fontname,FontType subtype,String basefont,Object encoding){

  super();

  this.fontname=fontname;

  put("Type",new PDFName("Font"));

  put("Subtype",getPDFNameForFontType(subtype));

  put("BaseFont",new PDFName(basefont));

  if (encoding instanceof PDFEncoding) {

    setEncoding((PDFEncoding)encoding);

  }

 else   if (encoding instanceof String) {

    setEncoding((String)encoding);

  }

}

Location: PDFFont.java

Content: 

/** 

 * Sets the Encoding value of the font.

 * @param encoding the encoding

 */

public void setEncoding(PDFEncoding encoding){

  if (encoding != null) {

    put("Encoding",encoding);

  }

}

Location: PDFFont.java

Content: 

/** 

 * Sets a ToUnicode CMap.

 * @param cmap the ToUnicode character map

 */

public void setToUnicode(PDFCMap cmap){

  put("ToUnicode",cmap);

}

