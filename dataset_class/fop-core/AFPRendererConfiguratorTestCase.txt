Location: AFPRendererConfiguratorTestCase.java

Content: 

public AFPRendererConfiguratorTestCase(){

  super(MimeConstants.MIME_AFP,AFPRendererConfBuilder.class,AFPDocumentHandler.class);

}

Location: AFPRendererConfiguratorTestCase.java

Content: 

@Test public void testBitmapEncodeQuality() throws Exception {

  parseConfig(createBuilder().startImages().setBitmapEncodingQuality(0.5f).endImages());

  verify(getDocHandler()).setBitmapEncodingQuality(0.5f);

}

Location: AFPRendererConfiguratorTestCase.java

Content: 

@Test public void testBitsPerPixel() throws Exception {

  for (int bpp=0; bpp < 40; bpp+=8) {

    parseConfig(createBuilder().startImages().setModeAttribute("bits-per-pixel",String.valueOf(bpp)).endImages());

    verify(getDocHandler()).setBitsPerPixel(bpp);

  }

}

Location: AFPRendererConfiguratorTestCase.java

Content: 

@Test public void testCanEmbedJpeg() throws Exception {

  parseConfig(createBuilder().startImages().setAllowJpegEmbedding(true).endImages());

  verify(getDocHandler()).canEmbedJpeg(true);

  parseConfig(createBuilder().startImages().setAllowJpegEmbedding(false).endImages());

  verify(getDocHandler()).canEmbedJpeg(false);

}

Location: AFPRendererConfiguratorTestCase.java

Content: 

@Test public void testCMYKImagesSupport() throws Exception {

  parseConfig(createBuilder().startImages(ImagesModeOptions.MODE_COLOR).setModeAttribute("cmyk","true").endImages());

  verify(getDocHandler()).setCMYKImagesSupported(true);

  parseConfig(createBuilder().startImages(ImagesModeOptions.MODE_COLOR).setModeAttribute("cmyk","false").endImages());

  verify(getDocHandler()).setCMYKImagesSupported(false);

}

Location: AFPRendererConfiguratorTestCase.java

Content: 

@Test public void testColorImages() throws Exception {

  parseConfig(createBuilder().startImages(ImagesModeOptions.MODE_COLOR).endImages());

  verify(getDocHandler()).setColorImages(true);

  parseConfig(createBuilder().startImages(ImagesModeOptions.MODE_GRAYSCALE).endImages());

  verify(getDocHandler()).setColorImages(false);

}

Location: AFPRendererConfiguratorTestCase.java

Content: 

@Test public void testDitheringQuality() throws Exception {

  float ditheringQuality=100f;

  parseConfig(createBuilder().startImages().setDitheringQuality(ditheringQuality).endImages());

  verify(getDocHandler()).setDitheringQuality(ditheringQuality);

  ditheringQuality=1000f;

  parseConfig(createBuilder().startImages().setDitheringQuality(ditheringQuality).endImages());

  verify(getDocHandler()).setDitheringQuality(ditheringQuality);

}

Location: AFPRendererConfiguratorTestCase.java

Content: 

@Test public void testExternalResourceDefault() throws Exception {

  testResourceLevelDefault(ResourceType.EXTERNAL);

}

Location: AFPRendererConfiguratorTestCase.java

Content: 

@Test public void testInlineResourceDefault() throws Exception {

  testResourceLevelDefault(ResourceType.INLINE);

}

Location: AFPRendererConfiguratorTestCase.java

Content: 

@Test public void testLineWidthCorrection() throws Exception {

  for (float resolution=0; resolution < 50; resolution+=5) {

    parseConfig(createBuilder().setLineWidthCorrection(resolution));

    verify(getDocHandler()).setLineWidthCorrection(resolution);

  }

}

Location: AFPRendererConfiguratorTestCase.java

Content: 

@Test public void testNativeImagesSupported() throws Exception {

  parseConfig(createBuilder().startImages().setNativeImageSupport(true).endImages());

  verify(getDocHandler()).setNativeImagesSupported(true);

  parseConfig(createBuilder().startImages().setNativeImageSupport(false).endImages());

  verify(getDocHandler()).setNativeImagesSupported(false);

}

Location: AFPRendererConfiguratorTestCase.java

Content: 

@Test public void testPageGroupResourceDefault() throws Exception {

  testResourceLevelDefault(ResourceType.PAGE_GROUP);

}

Location: AFPRendererConfiguratorTestCase.java

Content: 

@Test public void testPageResourceDefault() throws Exception {

  testResourceLevelDefault(ResourceType.PAGE);

}

Location: AFPRendererConfiguratorTestCase.java

Content: 

@Test public void testPrintFileResourceDefault() throws Exception {

  testResourceLevelDefault(ResourceType.PRINT_FILE);

}

Location: AFPRendererConfiguratorTestCase.java

Content: 

@Test public void testRendererResolution() throws Exception {

  for (int resolution=0; resolution < 1000; resolution+=100) {

    parseConfig(createBuilder().setRenderingResolution(resolution));

    verify(getDocHandler()).setResolution(resolution);

  }

}

Location: AFPRendererConfiguratorTestCase.java

Content: 

@Test public void testResourceGroupURI() throws Exception {

  URI uri=URI.create("test://URI/just/used/for/testing");

  parseConfig(createBuilder().setResourceGroupUri(uri.toASCIIString()));

  verify(getDocHandler()).setDefaultResourceGroupUri(uri);

}

Location: AFPRendererConfiguratorTestCase.java

Content: 

@Test public void testResourceLevelDefaults() throws Exception {

  testResourceLevelDefault(ResourceType.DOCUMENT);

}

Location: AFPRendererConfiguratorTestCase.java

Content: 

private void testResourceLevelDefault(ResourceType resType) throws Exception {

  Map<String,String> resourceLevels=new HashMap<String,String>();

  resourceLevels.put("goca",resType.getName());

  parseConfig(createBuilder().setDefaultResourceLevels(resourceLevels));

  ArgumentCaptor<AFPResourceLevelDefaults> argument=ArgumentCaptor.forClass(AFPResourceLevelDefaults.class);

  verify(getDocHandler()).setResourceLevelDefaults(argument.capture());

  AFPResourceLevel expectedLevel=new AFPResourceLevel(resType);

  assertEquals(expectedLevel,argument.getValue().getDefaultResourceLevel((byte)3));

}

Location: AFPRendererConfiguratorTestCase.java

Content: 

@Test public void testShadingMode() throws Exception {

  for (  AFPShadingMode mode : AFPShadingMode.values()) {

    parseConfig(createBuilder().setShading(mode));

    verify(getDocHandler()).setShadingMode(mode);

  }

}

