Location: RetrieveTableMarker.java

Content: 

/** 

 * {@inheritDoc} 

 */

public void clearChildNodes(){

  super.clearChildNodes();

  this.currentTextNode=null;

  this.lastFOTextProcessed=null;

}

Location: RetrieveTableMarker.java

Content: 

/** 

 * Overridden to flag the ancestor table-cell.

 * @param ancestorID    ID of node name to check for (e.g., FO_ROOT)

 * @return number of levels above FO where ancestor exists,-1 if not found

 */

@Override protected int findAncestor(int ancestorID){

  int found=1;

  FONode temp=getParent();

  while (temp != null) {

    if (temp instanceof TableCell && (ancestorID == FO_TABLE_HEADER || ancestorID == FO_TABLE_FOOTER)) {

      ((TableCell)temp).flagAsHavingRetrieveTableMarker();

    }

    if (temp.getNameId() == ancestorID) {

      return found;

    }

    found+=1;

    temp=temp.getParent();

  }

  return -1;

}

Location: RetrieveTableMarker.java

Content: 

/** 

 * Return the value for the <code>retrieve-boundary-within-table</code> property

 * @return  the value for retrieve-boundary-within-table; one of{@link org.apache.fop.fo.Constants#EN_TABLE}, {@link org.apache.fop.fo.Constants#EN_TABLE_FRAGMENT}, {@link org.apache.fop.fo.Constants#EN_PAGE}.

 */

public int getRetrieveBoundaryWithinTable(){

  return getBoundary();

}

Location: RetrieveTableMarker.java

Content: 

/** 

 * Return the value for the <code>retrieve-position-within-table</code> property

 * @return  the value for retrieve-position-within-table; one of{@link org.apache.fop.fo.Constants#EN_FIRST_STARTING}, {@link org.apache.fop.fo.Constants#EN_FIC}, {@link org.apache.fop.fo.Constants#EN_LAST_STARTING}, {@link org.apache.fop.fo.Constants#EN_LAST_ENDING}.

 */

public int getRetrievePositionWithinTable(){

  return getPosition();

}

Location: RetrieveTableMarker.java

Content: 

@Override protected void restoreFOEventHandlerState(){

  getFOEventHandler().restoreState(this);

}

Location: RetrieveTableMarker.java

Content: 

/** 

 * Create a new RetrieveTableMarker instance that is a child of the given  {@link FONode}.

 * @param parent    the parent {@link FONode}

 */

public RetrieveTableMarker(FONode parent){

  super(parent);

}

