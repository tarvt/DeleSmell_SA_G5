Location: ImageUtil.java

Content: 

/** 

 * Compares two hexadecimal values.

 * @param pattern Target

 * @param data Data

 * @param searchAt Position to start compare

 * @param searchForward Direction to compare byte arrays

 * @return true    If equalfalse   If different

 */

public static boolean compareHexValues(byte[] pattern,byte[] data,int searchAt,boolean searchForward){

  if (searchAt >= data.length) {

    return false;

  }

  int pLen=pattern.length;

  if (searchForward) {

    if (pLen >= (data.length - searchAt)) {

      return false;

    }

    for (int i=0; i < pLen; i++) {

      if (pattern[i] != data[searchAt + i]) {

        return false;

      }

    }

    return true;

  }

 else {

    if (pLen > (searchAt + 1)) {

      return false;

    }

    for (int i=0; i < pLen; i++) {

      if (pattern[pLen - i - 1] != data[searchAt - i]) {

        return false;

      }

    }

    return true;

  }

}

Location: ImageUtil.java

Content: 

/** 

 * Determines a integer value from a hexadecimal byte array.

 * @param data Image

 * @param startAt Start index to read from

 * @param length Number of data elements to read

 * @param searchForward True if searching forward, False if not (??)

 * @return integer

 */

public static int getIntFromByteArray(byte[] data,int startAt,int length,boolean searchForward){

  int bit=8;

  int bitMoving=length * bit;

  int retVal=0;

  if (startAt >= data.length) {

    return retVal;

  }

  if (searchForward) {

    if (length >= (data.length - startAt)) {

      return retVal;

    }

    for (int i=0; i < length; i++) {

      bitMoving-=bit;

      int iData=(int)data[startAt + i];

      if (iData < 0) {

        iData+=256;

      }

      retVal+=iData << bitMoving;

    }

  }

 else {

    if (length > (startAt + 1)) {

      return retVal;

    }

    for (int i=0; i < length; i++) {

      bitMoving-=bit;

      int iData=(int)data[startAt - i];

      if (iData < 0) {

        iData+=256;

      }

      retVal+=iData << bitMoving;

    }

  }

  return retVal;

}

Location: ImageUtil.java

Content: 

/** 

 * Determines the digits from a string.

 * @param value String with digits

 * @return -1      There is no digitnumber  The digits as integer

 */

public static int getInt(String value){

  String retString="";

  StringBuffer s=new StringBuffer(value);

  int len=s.length();

  for (int i=0; i < len; i++) {

    if (Character.isDigit(s.charAt(i))) {

      retString+=s.charAt(i);

    }

 else {

      break;

    }

  }

  if (retString.length() == 0) {

    return -1;

  }

 else {

    return Integer.parseInt(retString);

  }

}

Location: ImageUtil.java

Content: 

/** 

 * Private constructor.

 */

private ImageUtil(){

}

Location: ImageUtil.java

Content: 

/** 

 * Checks the string for percent character at the end of string.

 * @param value String with digits

 * @return true    The string contains a % valuefalse   Other string

 */

public static boolean isPercent(String value){

  if (value.endsWith("%")) {

    return true;

  }

  return false;

}

