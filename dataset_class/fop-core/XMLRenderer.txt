Location: XMLRenderer.java

Content: 

/** 

 * Adds the general Area attributes.

 * @param area Area to extract attributes from

 */

protected void addAreaAttributes(Area area){

  addAttribute("ipd",area.getIPD());

  addAttribute("bpd",area.getBPD());

  maybeAddLevelAttribute(area);

  if (isDetailedFormat()) {

    if (area.getIPD() != 0) {

      addAttribute("ipda",area.getAllocIPD());

    }

    if (area.getBPD() != 0) {

      addAttribute("bpda",area.getAllocBPD());

    }

    addAttribute("bap",area.getBorderAndPaddingWidthStart() + " " + area.getBorderAndPaddingWidthEnd()+ " "+ area.getBorderAndPaddingWidthBefore()+ " "+ area.getBorderAndPaddingWidthAfter());

  }

}

Location: XMLRenderer.java

Content: 

/** 

 * Adds attributes from traits of an Area.

 * @param area Area to extract traits from

 */

protected void addTraitAttributes(Area area){

  Map traitMap=area.getTraits();

  if (traitMap != null) {

    for (    Object o : traitMap.entrySet()) {

      Map.Entry traitEntry=(Map.Entry)o;

      Object key=traitEntry.getKey();

      String name=Trait.getTraitName(key);

      Class clazz=Trait.getTraitClass(key);

      if ("break-before".equals(name) || "break-after".equals(name)) {

        continue;

      }

      Object value=traitEntry.getValue();

      if (((Integer)key).intValue() == Trait.FONT) {

        FontTriplet triplet=(FontTriplet)value;

        addAttribute("font-name",triplet.getName());

        addAttribute("font-style",triplet.getStyle());

        addAttribute("font-weight",triplet.getWeight());

      }

 else       if (clazz.equals(InternalLink.class)) {

        InternalLink iLink=(InternalLink)value;

        addAttribute(name,iLink.xmlAttribute());

      }

 else       if (clazz.equals(Background.class)) {

        Background bkg=(Background)value;

        addAttribute(name,bkg.toString());

        if (bkg.getColor() != null) {

          addAttribute("bkg-color",ColorUtil.colorToString(bkg.getColor()));

        }

        if (bkg.getURL() != null) {

          addAttribute("bkg-img",bkg.getURL());

          String repString;

          int repeat=bkg.getRepeat();

switch (repeat) {

case Constants.EN_REPEAT:

            repString="repeat";

          break;

case Constants.EN_REPEATX:

        repString="repeat-x";

      break;

case Constants.EN_REPEATY:

    repString="repeat-y";

  break;

case Constants.EN_NOREPEAT:

repString="no-repeat";

break;

default :

throw new IllegalStateException("Illegal value for repeat encountered: " + repeat);

}

addAttribute("bkg-repeat",repString);

addAttribute("bkg-horz-offset",bkg.getHoriz());

addAttribute("bkg-vert-offset",bkg.getVertical());

}

}

 else if (clazz.equals(Color.class)) {

Color c=(Color)value;

addAttribute(name,ColorUtil.colorToString(c));

}

 else if (((Integer)key).intValue() == Trait.START_INDENT || ((Integer)key).intValue() == Trait.END_INDENT) {

if ((Integer)value != 0) {

addAttribute(name,value.toString());

}

}

 else {

addAttribute(name,value.toString());

}

}

}

transferForeignObjects(area);

}

Location: XMLRenderer.java

Content: 

/** 

 * {@inheritDoc} 

 */

protected void endLayer(){

}

Location: XMLRenderer.java

Content: 

/** 

 * Tells the renderer to finish the current PageSequence

 */

public void endPageSequence(){

  if (startedSequence) {

    endElement("pageSequence");

  }

  startedSequence=false;

}

Location: XMLRenderer.java

Content: 

/** 

 * {@inheritDoc} 

 */

@Override protected void endVParea(){

}

Location: XMLRenderer.java

Content: 

private boolean isDetailedFormat(){

  return !this.compactFormat;

}

Location: XMLRenderer.java

Content: 

private void maybeAddLevelAttribute(Area a){

  int level=a.getBidiLevel();

  if (level >= 0) {

    addAttribute("level",level);

  }

}

Location: XMLRenderer.java

Content: 

private void maybeAddPositionAdjustAttribute(WordArea w){

  int[][] adjustments=w.getGlyphPositionAdjustments();

  if (adjustments != null) {

    addAttribute("position-adjust",XMLUtil.encodePositionAdjustments(adjustments));

  }

}

Location: XMLRenderer.java

Content: 

private void maybeAddReversedAttribute(WordArea w,String text){

  if (w.isReversed() && (text.length() > 1)) {

    addAttribute("reversed","true");

  }

}

Location: XMLRenderer.java

Content: 

/** 

 * Call this method to make the XMLRenderer mimic a different renderer by using its font setup. This is useful when working with the intermediate format parser.

 * @param renderer the renderer to mimic

 */

public void mimicRenderer(Renderer renderer){

  this.mimic=renderer;

}

Location: XMLRenderer.java

Content: 

/** 

 * {@inheritDoc}

 */

@Override protected void renderBeforeFloat(BeforeFloat bf){

  startElement("beforeFloat");

  super.renderBeforeFloat(bf);

  endElement("beforeFloat");

}

Location: XMLRenderer.java

Content: 

/** 

 * {@inheritDoc} 

 */

@Override protected void renderBlock(Block block){

  atts.clear();

  addAreaAttributes(block);

  addTraitAttributes(block);

  int positioning=block.getPositioning();

  if (block instanceof BlockViewport) {

    BlockViewport bvp=(BlockViewport)block;

    boolean abspos=false;

    if (bvp.getPositioning() == Block.ABSOLUTE || bvp.getPositioning() == Block.FIXED) {

      abspos=true;

    }

    if (abspos) {

      addAttribute("left-position",bvp.getXOffset());

      addAttribute("top-position",bvp.getYOffset());

    }

    addAttribute("ctm",bvp.getCTM().toString());

    if (bvp.hasClip()) {

      addAttribute("clipped","true");

    }

  }

 else {

    if (block.getXOffset() != 0) {

      addAttribute("left-offset",block.getXOffset());

    }

    if (block.getYOffset() != 0) {

      addAttribute("top-offset",block.getYOffset());

    }

  }

switch (positioning) {

case Block.RELATIVE:

    addAttribute("positioning","relative");

  break;

case Block.ABSOLUTE:

addAttribute("positioning","absolute");

break;

case Block.FIXED:

addAttribute("positioning","fixed");

break;

default :

}

startElement("block",atts);

super.renderBlock(block);

endElement("block");

}

Location: XMLRenderer.java

Content: 

private void renderBookmarkItem(BookmarkData bm){

  atts.clear();

  addAttribute("title",bm.getBookmarkTitle());

  addAttribute("show-children",String.valueOf(bm.showChildItems()));

  PageViewport pv=bm.getPageViewport();

  String pvKey=pv == null ? null : pv.getKey();

  addAttribute("internal-link",InternalLink.makeXMLAttribute(pvKey,bm.getIDRef()));

  startElement("bookmark",atts);

  for (int i=0; i < bm.getCount(); i++) {

    renderBookmarkItem(bm.getSubData(i));

  }

  endElement("bookmark");

}

Location: XMLRenderer.java

Content: 

/** 

 * {@inheritDoc}

 */

@Override public void renderContainer(Container cont){

  startElement("container");

  super.renderContainer(cont);

  endElement("container");

}

Location: XMLRenderer.java

Content: 

/** 

 * Renders a DestinationData object (named destination)

 * @param destination the destination object

 */

protected void renderDestination(DestinationData destination){

  if (destination.getWhenToProcess() == OffDocumentItem.END_OF_DOC) {

    endPageSequence();

  }

  atts.clear();

  PageViewport pv=destination.getPageViewport();

  String pvKey=pv == null ? null : pv.getKey();

  addAttribute("internal-link",InternalLink.makeXMLAttribute(pvKey,destination.getIDRef()));

  startElement("destination",atts);

  endElement("destination");

}

Location: XMLRenderer.java

Content: 

/** 

 * {@inheritDoc}

 */

@Override protected void renderFlow(NormalFlow flow){

  atts.clear();

  addAreaAttributes(flow);

  addTraitAttributes(flow);

  startElement("flow",atts);

  super.renderFlow(flow);

  endElement("flow");

}

Location: XMLRenderer.java

Content: 

/** 

 * {@inheritDoc}

 */

@Override protected void renderFootnote(Footnote footnote){

  atts.clear();

  addAttribute("top-offset",footnote.getTop());

  startElement("footnote",atts);

  super.renderFootnote(footnote);

  endElement("footnote");

}

Location: XMLRenderer.java

Content: 

/** 

 * Renders an fo:foreing-object.

 * @param fo the foreign object

 * @param pos the position of the foreign object

 * @see org.apache.fop.render.AbstractRenderer#renderForeignObject(ForeignObject,Rectangle2D)

 */

@Override public void renderForeignObject(ForeignObject fo,Rectangle2D pos){

  atts.clear();

  addAreaAttributes(fo);

  addTraitAttributes(fo);

  String ns=fo.getNameSpace();

  addAttribute("ns",ns);

  startElement("foreignObject",atts);

  Document doc=fo.getDocument();

  context.setProperty(XMLXMLHandler.HANDLER,handler);

  renderXML(context,doc,ns);

  endElement("foreignObject");

}

Location: XMLRenderer.java

Content: 

/** 

 * {@inheritDoc}

 */

@Override public void renderImage(Image image,Rectangle2D pos){

  atts.clear();

  addAreaAttributes(image);

  addTraitAttributes(image);

  addAttribute("url",image.getURL());

  startElement("image",atts);

  endElement("image");

}

Location: XMLRenderer.java

Content: 

/** 

 * {@inheritDoc}org.apache.fop.area.inline.InlineArea)

 */

@Override protected void renderInlineAreaBackAndBorders(InlineArea area){

}

Location: XMLRenderer.java

Content: 

/** 

 * {@inheritDoc}

 */

@Override protected void renderInlineArea(InlineArea inlineArea){

  atts.clear();

  if (inlineArea.getClass() == InlineArea.class) {

    addAreaAttributes(inlineArea);

    addTraitAttributes(inlineArea);

    startElement("inline",atts);

    endElement("inline");

  }

 else {

    super.renderInlineArea(inlineArea);

  }

}

Location: XMLRenderer.java

Content: 

/** 

 * {@inheritDoc}

 */

@Override protected void renderInlineBlockParent(InlineBlockParent ibp){

  atts.clear();

  addAreaAttributes(ibp);

  addTraitAttributes(ibp);

  addAttribute("offset",ibp.getBlockProgressionOffset());

  startElement("inlineblockparent",atts);

  super.renderInlineBlockParent(ibp);

  endElement("inlineblockparent");

}

Location: XMLRenderer.java

Content: 

/** 

 * {@inheritDoc} 

 */

@Override protected void renderInlineBlock(InlineBlock inlineBlock){

  Block block=inlineBlock.getBlock();

  atts.clear();

  addAreaAttributes(block);

  addTraitAttributes(block);

  if (block.getXOffset() != 0) {

    addAttribute("left-offset",block.getXOffset());

  }

  if (block.getYOffset() != 0) {

    addAttribute("top-offset",block.getYOffset());

  }

  startElement("inlineblock",atts);

  if (block.getChildAreas() != null) {

    renderBlocks(null,block.getChildAreas());

  }

  endElement("inlineblock");

}

Location: XMLRenderer.java

Content: 

/** 

 * {@inheritDoc}

 */

@Override protected void renderInlineParent(InlineParent ip){

  atts.clear();

  addAreaAttributes(ip);

  addTraitAttributes(ip);

  addAttribute("offset",ip.getBlockProgressionOffset());

  startElement("inlineparent",atts);

  super.renderInlineParent(ip);

  endElement("inlineparent");

}

Location: XMLRenderer.java

Content: 

/** 

 * {@inheritDoc}

 */

@Override protected void renderInlineSpace(Space space){

  atts.clear();

  addAreaAttributes(space);

  addTraitAttributes(space);

  addAttribute("offset",space.getBlockProgressionOffset());

  startElement("space",atts);

  endElement("space");

}

Location: XMLRenderer.java

Content: 

/** 

 * {@inheritDoc}

 */

@Override protected void renderInlineViewport(InlineViewport viewport){

  atts.clear();

  addAreaAttributes(viewport);

  addTraitAttributes(viewport);

  addAttribute("offset",viewport.getBlockProgressionOffset());

  addAttribute("pos",viewport.getContentPosition());

  if (viewport.hasClip()) {

    addAttribute("clip","true");

  }

  startElement("viewport",atts);

  super.renderInlineViewport(viewport);

  endElement("viewport");

}

Location: XMLRenderer.java

Content: 

/** 

 * {@inheritDoc}

 */

@Override protected void renderLeader(Leader area){

  atts.clear();

  addAreaAttributes(area);

  addTraitAttributes(area);

  addAttribute("offset",area.getBlockProgressionOffset());

  addAttribute("ruleStyle",area.getRuleStyleAsString());

  addAttribute("ruleThickness",area.getRuleThickness());

  startElement("leader",atts);

  endElement("leader");

  super.renderLeader(area);

}

Location: XMLRenderer.java

Content: 

/** 

 * {@inheritDoc}

 */

@Override protected void renderLineArea(LineArea line){

  atts.clear();

  addAreaAttributes(line);

  addTraitAttributes(line);

  startElement("lineArea",atts);

  super.renderLineArea(line);

  endElement("lineArea");

}

Location: XMLRenderer.java

Content: 

/** 

 * {@inheritDoc}

 */

@Override protected void renderMainReference(MainReference mr){

  atts.clear();

  addAreaAttributes(mr);

  addTraitAttributes(mr);

  if (mr.getColumnCount() != 1) {

    addAttribute("columnGap",mr.getColumnGap());

  }

  startElement("mainReference",atts);

  Span span=null;

  List spans=mr.getSpans();

  for (  Object span1 : spans) {

    span=(Span)span1;

    atts.clear();

    if (span.getColumnCount() != 1) {

      addAttribute("columnCount",span.getColumnCount());

    }

    addAreaAttributes(span);

    addTraitAttributes(span);

    startElement("span",atts);

    for (int c=0; c < span.getColumnCount(); c++) {

      NormalFlow flow=span.getNormalFlow(c);

      renderFlow(flow);

    }

    endElement("span");

  }

  endElement("mainReference");

}

Location: XMLRenderer.java

Content: 

/** 

 * {@inheritDoc} 

 */

@Override public void renderPage(PageViewport page) throws IOException, FOPException {

  atts.clear();

  addAttribute("bounds",page.getViewArea());

  addAttribute("key",page.getKey());

  addAttribute("nr",page.getPageNumber());

  addAttribute("formatted-nr",page.getPageNumberString());

  if (page.getSimplePageMasterName() != null) {

    addAttribute("simple-page-master-name",page.getSimplePageMasterName());

  }

  if (page.isBlank()) {

    addAttribute("blank","true");

  }

  transferForeignObjects(page);

  startElement("pageViewport",atts);

  startElement("page");

  handlePageExtensionAttachments(page);

  super.renderPage(page);

  endElement("page");

  endElement("pageViewport");

}

Location: XMLRenderer.java

Content: 

/** 

 * {@inheritDoc} 

 */

@Override protected void renderReferenceArea(Block block){

  handleBlockTraits(block);

  List children=block.getChildAreas();

  if (children != null) {

    renderBlocks(block,children);

  }

}

Location: XMLRenderer.java

Content: 

/** 

 * {@inheritDoc}

 */

@Override protected void renderRegionViewport(RegionViewport port){

  if (port != null) {

    atts.clear();

    addAreaAttributes(port);

    addTraitAttributes(port);

    addAttribute("rect",port.getViewArea());

    if (port.hasClip()) {

      addAttribute("clipped","true");

    }

    startElement("regionViewport",atts);

    RegionReference region=port.getRegionReference();

    atts.clear();

    addAreaAttributes(region);

    addTraitAttributes(region);

    addAttribute("name",region.getRegionName());

    addAttribute("ctm",region.getCTM().toString());

    if (region.getRegionClass() == FO_REGION_BEFORE) {

      startElement("regionBefore",atts);

      renderRegion(region);

      endElement("regionBefore");

    }

 else     if (region.getRegionClass() == FO_REGION_START) {

      startElement("regionStart",atts);

      renderRegion(region);

      endElement("regionStart");

    }

 else     if (region.getRegionClass() == FO_REGION_BODY) {

      assert (region instanceof BodyRegion);

      BodyRegion body=(BodyRegion)region;

      if (body.getColumnCount() != 1) {

        addAttribute("columnGap",body.getColumnGap());

        addAttribute("columnCount",body.getColumnCount());

      }

      startElement("regionBody",atts);

      renderBodyRegion(body);

      endElement("regionBody");

    }

 else     if (region.getRegionClass() == FO_REGION_END) {

      startElement("regionEnd",atts);

      renderRegion(region);

      endElement("regionEnd");

    }

 else     if (region.getRegionClass() == FO_REGION_AFTER) {

      startElement("regionAfter",atts);

      renderRegion(region);

      endElement("regionAfter");

    }

    endElement("regionViewport");

  }

}

Location: XMLRenderer.java

Content: 

/** 

 * {@inheritDoc}

 */

@Override protected void renderSpace(SpaceArea space){

  atts.clear();

  int offset=space.getBlockProgressionOffset();

  if (offset != 0) {

    addAttribute("offset",offset);

  }

  maybeAddLevelAttribute(space);

  if (!space.isAdjustable()) {

    addAttribute("adj","false");

  }

  startElement("space",atts);

  characters(space.getSpace());

  endElement("space");

  super.renderSpace(space);

}

Location: XMLRenderer.java

Content: 

/** 

 * {@inheritDoc}

 */

@Override protected void renderText(TextArea text){

  atts.clear();

  if (text.getTextWordSpaceAdjust() != 0) {

    addAttribute("twsadjust",text.getTextWordSpaceAdjust());

  }

  if (text.getTextLetterSpaceAdjust() != 0) {

    addAttribute("tlsadjust",text.getTextLetterSpaceAdjust());

  }

  addAttribute("offset",text.getBlockProgressionOffset());

  addAttribute("baseline",text.getBaselineOffset());

  addAreaAttributes(text);

  addTraitAttributes(text);

  startElement("text",atts);

  super.renderText(text);

  endElement("text");

}

Location: XMLRenderer.java

Content: 

/** 

 * {@inheritDoc}

 */

@Override protected void renderWord(WordArea word){

  atts.clear();

  int offset=word.getBlockProgressionOffset();

  if (offset != 0) {

    addAttribute("offset",offset);

  }

  int[] letterAdjust=word.getLetterAdjustArray();

  if (letterAdjust != null) {

    StringBuffer sb=new StringBuffer(64);

    boolean nonZeroFound=false;

    for (int i=0, c=letterAdjust.length; i < c; i++) {

      if (i > 0) {

        sb.append(' ');

      }

      sb.append(letterAdjust[i]);

      nonZeroFound|=(letterAdjust[i] != 0);

    }

    if (nonZeroFound) {

      addAttribute("letter-adjust",sb.toString());

    }

  }

  maybeAddLevelAttribute(word);

  maybeAddPositionAdjustAttribute(word);

  String text=word.getWord();

  maybeAddReversedAttribute(word,text);

  startElement("word",atts);

  characters(text);

  endElement("word");

  super.renderWord(word);

}

Location: XMLRenderer.java

Content: 

/** 

 * Controls whether to create a more compact format which omit certain attributes.

 * @param compact true to activate the compact format

 */

public void setCompactFormat(boolean compact){

  this.compactFormat=compact;

}

Location: XMLRenderer.java

Content: 

/** 

 * {@inheritDoc} 

 */

@Override public void setupFontInfo(FontInfo inFontInfo) throws FOPException {

  if (mimic != null) {

    mimic.setupFontInfo(inFontInfo);

  }

 else {

    super.setupFontInfo(inFontInfo);

  }

}

Location: XMLRenderer.java

Content: 

/** 

 * {@inheritDoc} 

 */

protected void startLayer(String layer){

}

Location: XMLRenderer.java

Content: 

/** 

 * {@inheritDoc} 

 */

@Override public void startPageSequence(PageSequence pageSequence){

  handleDocumentExtensionAttachments();

  endPageSequence();

  startedSequence=true;

  atts.clear();

  Locale locale=pageSequence.getLocale();

  if (locale != null) {

    addAttribute(new QName(XMLConstants.XML_NS_URI,"xml:lang"),LanguageTags.toLanguageTag(locale));

  }

  transferForeignObjects(pageSequence);

  startElement("pageSequence",atts);

  handleExtensionAttachments(pageSequence.getExtensionAttachments());

  LineArea seqTitle=pageSequence.getTitle();

  if (seqTitle != null) {

    startElement("title");

    List children=seqTitle.getInlineAreas();

    for (    Object aChildren : children) {

      InlineArea inline=(InlineArea)aChildren;

      renderInlineArea(inline);

    }

    endElement("title");

  }

}

Location: XMLRenderer.java

Content: 

@Override protected void startVParea(CTM ctm,Rectangle clippingRect){

}

Location: XMLRenderer.java

Content: 

private void transferForeignObjects(AreaTreeObject ato){

  Map prefixes=new java.util.HashMap();

  Iterator iter=ato.getForeignAttributes().entrySet().iterator();

  while (iter.hasNext()) {

    Map.Entry entry=(Map.Entry)iter.next();

    QName qname=(QName)entry.getKey();

    prefixes.put(qname.getPrefix(),qname.getNamespaceURI());

    addAttribute(qname,(String)entry.getValue());

  }

  iter=prefixes.entrySet().iterator();

  while (iter.hasNext()) {

    Map.Entry entry=(Map.Entry)iter.next();

    String qn="xmlns:" + (String)entry.getKey();

    atts.addAttribute("",(String)entry.getKey(),qn,CDATA,(String)entry.getValue());

  }

}

Location: XMLRenderer.java

Content: 

/** 

 * @param userAgent the user agent that contains configuration details. This cannot be null.

 */

public XMLRenderer(FOUserAgent userAgent){

  super(userAgent);

  context=new RendererContext(this,XML_MIME_TYPE);

  XMLHandler xmlHandler=new XMLXMLHandler();

  userAgent.getXMLHandlerRegistry().addXMLHandler(xmlHandler);

  Boolean b=(Boolean)userAgent.getRendererOptions().get("compact-format");

  if (b != null) {

    setCompactFormat(b);

  }

}

