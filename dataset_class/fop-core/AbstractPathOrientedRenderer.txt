Location: AbstractPathOrientedRenderer.java

Content: 

/** 

 * @param userAgent the user agent that contains configuration details. This cannot be null.

 */

public AbstractPathOrientedRenderer(FOUserAgent userAgent){

  super(userAgent);

}

Location: AbstractPathOrientedRenderer.java

Content: 

/** 

 * Draw the background and borders. This draws the background and border traits for an area given the position.

 * @param backgroundArea the area to get the background traits from

 * @param borderArea the area to get the border traits from

 * @param startx the start x position

 * @param starty the start y position

 * @param width the width of the area

 * @param height the height of the area

 */

protected void drawBackAndBorders(Area backgroundArea,Area borderArea,float startx,float starty,float width,float height){

  BorderProps bpsBefore=(BorderProps)borderArea.getTrait(Trait.BORDER_BEFORE);

  BorderProps bpsAfter=(BorderProps)borderArea.getTrait(Trait.BORDER_AFTER);

  BorderProps bpsStart=(BorderProps)borderArea.getTrait(Trait.BORDER_START);

  BorderProps bpsEnd=(BorderProps)borderArea.getTrait(Trait.BORDER_END);

  Trait.Background backgroundTrait=(Trait.Background)backgroundArea.getTrait(Trait.BACKGROUND);

  drawBackground(startx,starty,width,height,(Trait.Background)backgroundArea.getTrait(Trait.BACKGROUND),bpsBefore,bpsAfter,bpsStart,bpsEnd,backgroundArea.getBidiLevel());

  Color bg=Color.white;

  if (backgroundTrait != null && backgroundTrait.getColor() != null) {

    bg=backgroundTrait.getColor();

  }

  drawBorders(startx,starty,width,height,bpsBefore,bpsAfter,bpsStart,bpsEnd,backgroundArea.getBidiLevel(),bg);

}

Location: AbstractPathOrientedRenderer.java

Content: 

/** 

 * Draw the background. This draws the background given the position and the traits.

 * @param startx the start x position

 * @param starty the start y position

 * @param width the width of the area

 * @param height the height of the area

 * @param back the background traits

 * @param bpsBefore the border-before traits

 * @param bpsAfter the border-after traits

 * @param bpsStart the border-start traits

 * @param bpsEnd the border-end traits

 * @param level of bidirectional embedding

 */

protected void drawBackground(float startx,float starty,float width,float height,Trait.Background back,BorderProps bpsBefore,BorderProps bpsAfter,BorderProps bpsStart,BorderProps bpsEnd,int level){

  BorderProps bpsTop=bpsBefore;

  BorderProps bpsBottom=bpsAfter;

  BorderProps bpsLeft;

  BorderProps bpsRight;

  if ((level == -1) || ((level & 1) == 0)) {

    bpsLeft=bpsStart;

    bpsRight=bpsEnd;

  }

 else {

    bpsLeft=bpsEnd;

    bpsRight=bpsStart;

  }

  drawBackground(startx,starty,width,height,back,bpsTop,bpsBottom,bpsLeft,bpsRight);

}

Location: AbstractPathOrientedRenderer.java

Content: 

/** 

 * Establishes a new coordinate system with the given transformation matrix. The current graphics state is saved and the new coordinate system is concatenated.

 * @param at the transformation matrix

 */

protected void establishTransformationMatrix(AffineTransform at){

  saveGraphicsState();

  concatenateTransformationMatrix(UnitConv.mptToPt(at));

}

Location: AbstractPathOrientedRenderer.java

Content: 

/** 

 * Paints the text decoration marks.

 * @param fm Current typeface

 * @param fontsize Current font size

 * @param inline inline area to paint the marks for

 * @param baseline position of the baseline

 * @param startx start IPD

 */

protected void renderTextDecoration(FontMetrics fm,int fontsize,InlineArea inline,int baseline,int startx){

  boolean hasTextDeco=inline.hasUnderline() || inline.hasOverline() || inline.hasLineThrough();

  if (hasTextDeco) {

    endTextObject();

    float descender=fm.getDescender(fontsize) / 1000f;

    float capHeight=fm.getCapHeight(fontsize) / 1000f;

    float halfLineWidth=(descender / -8f) / 2f;

    float endx=(startx + inline.getIPD()) / 1000f;

    if (inline.hasUnderline()) {

      Color ct=(Color)inline.getTrait(Trait.UNDERLINE_COLOR);

      float y=baseline - descender / 2f;

      drawBorderLine(startx / 1000f,(y - halfLineWidth) / 1000f,endx,(y + halfLineWidth) / 1000f,true,true,Constants.EN_SOLID,ct);

    }

    if (inline.hasOverline()) {

      Color ct=(Color)inline.getTrait(Trait.OVERLINE_COLOR);

      float y=(float)(baseline - (1.1 * capHeight));

      drawBorderLine(startx / 1000f,(y - halfLineWidth) / 1000f,endx,(y + halfLineWidth) / 1000f,true,true,Constants.EN_SOLID,ct);

    }

    if (inline.hasLineThrough()) {

      Color ct=(Color)inline.getTrait(Trait.LINETHROUGH_COLOR);

      float y=(float)(baseline - (0.45 * capHeight));

      drawBorderLine(startx / 1000f,(y - halfLineWidth) / 1000f,endx,(y + halfLineWidth) / 1000f,true,true,Constants.EN_SOLID,ct);

    }

  }

}

