Location: OTFToType1TestCase.java

Content: 

private Type1Font getFont(String s) throws IOException {

  InputStream is=((CFFToType1Font)getRealFont(s)).getInputStreams().get(0);

  return Type1Font.createWithPFB(is);

}

Location: OTFToType1TestCase.java

Content: 

private CustomFont getRealFont(String s) throws IOException {

  InternalResourceResolver rr=ResourceResolverFactory.createDefaultInternalResourceResolver(new File(".").toURI());

  CustomFont realFont=FontLoader.loadFont(new FontUris(new File(s).toURI(),null),null,true,EmbeddingMode.SUBSET,EncodingMode.AUTO,true,true,rr,false,true);

  realFont.mapChar('d');

  return realFont;

}

Location: OTFToType1TestCase.java

Content: 

@Test public void testFont() throws IOException {

  Type1Font t1=getFont("test/resources/fonts/otf/SourceSansProBold.otf");

  Assert.assertEquals(t1.getFontName(),"SourceSansPro-Bold.0");

  Assert.assertEquals(t1.getCharStringsDict().keySet().toString(),"[.notdef, d]");

  t1=getFont("test/resources/fonts/otf/AlexBrushRegular.otf");

  Assert.assertEquals(t1.getFontName(),"AlexBrush-Regular.0");

}

Location: OTFToType1TestCase.java

Content: 

@Test public void testFontType() throws IOException {

  CustomFont t1=getRealFont("test/resources/fonts/otf/SourceSansProBold.otf");

  Assert.assertEquals(t1.getFontType(),FontType.TYPE1);

}

