Location: SerializeHyphPattern.java

Content: 

private HyphenationTree buildPatternFile(File infile){

  System.out.println("Processing " + infile);

  HyphenationTree hTree=new HyphenationTree();

  try {

    hTree.loadPatterns(infile.toString());

    if (errorDump) {

      System.out.println("Stats: ");

      hTree.printStats();

    }

  }

 catch (  HyphenationException ex) {

    System.err.println("Can't load patterns from xml file " + infile + " - Maybe hyphenation.dtd is missing?");

    if (errorDump) {

      System.err.println(ex.toString());

    }

  }

  return hTree;

}

Location: SerializeHyphPattern.java

Content: 

/** 

 * Checks for existence of output file and compares dates with input and stylesheet file

 */

private boolean rebuild(File infile,File outfile){

  if (outfile.exists()) {

    if (outfile.lastModified() < infile.lastModified()) {

      return true;

    }

  }

 else {

    return true;

  }

  return false;

}

Location: SerializeHyphPattern.java

Content: 

/** 

 * Compile all xml files in sourceDir, and write output hyp files in targetDir

 * @param sourceDir Directory with pattern xml files

 * @param targetDir Directory to which compiled pattern hyp files should be written

 */

public void serializeDir(File sourceDir,File targetDir){

  final String extension=".xml";

  String[] sourceFiles=sourceDir.list(new FilenameFilter(){

    public boolean accept(    File dir,    String name){

      return name.endsWith(extension);

    }

  }

);

  if (sourceFiles != null) {

    for (    String sourceFile : sourceFiles) {

      File infile=new File(sourceDir,sourceFile);

      String outfilename=sourceFile.substring(0,sourceFile.length() - extension.length()) + ".hyp";

      File outfile=new File(targetDir,outfilename);

      serializeFile(infile,outfile);

    }

  }

}

Location: SerializeHyphPattern.java

Content: 

private void serializeFile(File infile,File outfile){

  boolean startProcess;

  startProcess=rebuild(infile,outfile);

  if (startProcess) {

    HyphenationTree hTree=buildPatternFile(infile);

    try {

      ObjectOutputStream out=new ObjectOutputStream(new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile)));

      out.writeObject(hTree);

      out.close();

    }

 catch (    IOException ioe) {

      System.err.println("Can't write compiled pattern file: " + outfile);

      System.err.println(ioe);

    }

  }

}

Location: SerializeHyphPattern.java

Content: 

/** 

 * Controls the amount of error information dumped.

 * @param errorDump True if more error info should be provided

 */

public void setErrorDump(boolean errorDump){

  this.errorDump=errorDump;

}

