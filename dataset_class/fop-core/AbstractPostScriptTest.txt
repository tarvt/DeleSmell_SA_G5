Location: AbstractPostScriptTest.java

Content: 

/** 

 * Scans for a certain resource DSC comment and checks against a given resource.

 * @param parser the DSC parser

 * @param comment the comment to scan for

 * @param resource the resource to check against

 * @throws IOException if an I/O error occurs

 * @throws DSCException if a DSC error occurs

 */

protected void checkResourceComment(DSCParser parser,String comment,PSResource resource) throws IOException, DSCException {

  AbstractResourceDSCComment resComment;

  resComment=(AbstractResourceDSCComment)gotoDSCComment(parser,comment);

  assertEquals(resource,resComment.getResource());

}

Location: AbstractPostScriptTest.java

Content: 

/** 

 * Advances the DSC parser to a DSC comment with the given name.

 * @param parser the DSC parser

 * @param name the name of the DSC comment

 * @return the DSC comment

 * @throws IOException if an I/O error occurs

 * @throws DSCException if a DSC error occurs

 */

protected static DSCComment gotoDSCComment(DSCParser parser,String name) throws IOException, DSCException {

  while (parser.hasNext()) {

    DSCEvent event=parser.nextEvent();

    if (event.isDSCComment()) {

      DSCComment comment=event.asDSCComment();

      if (comment.getName().equals(name)) {

        return comment;

      }

    }

  }

  return null;

}

Location: AbstractPostScriptTest.java

Content: 

/** 

 * Renders a test file.

 * @param ua the user agent (with override set!)

 * @param resourceName the resource name for the FO file

 * @param suffix a suffix for the output filename

 * @return the output file

 * @throws Exception if an error occurs

 */

protected File renderFile(FOUserAgent ua,String resourceName,String suffix) throws Exception {

  return renderFile(ua,resourceName,suffix,MimeConstants.MIME_POSTSCRIPT);

}

