Location: AbstractPSPDFBitmapProducer.java

Content: 

public AbstractPSPDFBitmapProducer(URI baseUri){

  super(baseUri);

  fopFactory=FopFactory.newInstance(baseUri);

}

Location: AbstractPSPDFBitmapProducer.java

Content: 

/** 

 * Calls an external converter to convert the file generated by FOP to a bitmap.

 * @param inFile the generated output file to be converted

 * @param outFile the target filename for the bitmap

 * @param context context information (required bitmap resolution etc.)

 * @throws IOException in case the conversion fails

 */

public void convert(File inFile,File outFile,ProducerContext context) throws IOException {

  outFile.delete();

  String cmd=MessageFormat.format(converter,new Object[]{inFile.toString(),outFile.toString(),Integer.toString(context.getTargetResolution())});

  ConvertUtils.convert(cmd,null,null,log);

  if (!outFile.exists()) {

    throw new IOException("The target file has not been generated");

  }

}

Location: AbstractPSPDFBitmapProducer.java

Content: 

/** 

 * @return the native extension generated by the output format, ex. "ps" or "pdf".

 */

protected abstract String getTargetExtension();

Location: AbstractPSPDFBitmapProducer.java

Content: 

/** 

 * @return the output format for the FOP renderer, i.e. a MIME type.

 */

protected String getTargetFormat(){

  return this.targetFormat;

}

