Location: ContentLayoutManager.java

Content: 

/** 

 * {@inheritDoc}

 */

public void addChildLMs(List newLMs){

  if (newLMs == null || newLMs.size() == 0) {

    return;

  }

  for (  Object newLM : newLMs) {

    LayoutManager lm=(LayoutManager)newLM;

    addChildLM(lm);

  }

}

Location: ContentLayoutManager.java

Content: 

/** 

 * {@inheritDoc}

 */

public void addChildLM(LayoutManager lm){

  if (lm == null) {

    return;

  }

  lm.setParent(this);

  childLM=(InlineLevelLayoutManager)lm;

  log.trace(this.getClass().getName() + ": Adding child LM " + lm.getClass().getName());

}

Location: ContentLayoutManager.java

Content: 

/** 

 * Constructs a new ContentLayoutManager

 * @param area  The parent area

 * @param parentLM the parent layout manager

 */

public ContentLayoutManager(Area area,LayoutManager parentLM){

  holder=area;

  this.parentLM=parentLM;

}

Location: ContentLayoutManager.java

Content: 

/** 

 * Constructor using a fo:title formatting object and its PageSequenceLayoutManager parent. throws IllegalStateException if the foTitle has no children. TODO: convert IllegalStateException to FOPException; also in makeLayoutManager and makeContentLayoutManager and callers.

 * @param pslm the PageSequenceLayoutManager parent of this LM

 * @param foTitle the Title FO for which this LM is made

 */

public ContentLayoutManager(PageSequenceLayoutManager pslm,Title foTitle){

  this.parentLM=pslm;

  holder=new LineArea();

  holder.setChangeBarList(getChangeBarList());

  try {

    LayoutManager lm=pslm.getLayoutManagerMaker().makeLayoutManager(foTitle);

    addChildLM(lm);

    fillArea(lm);

  }

 catch (  IllegalStateException e) {

    log.warn("Title has no content");

    throw e;

  }

}

Location: ContentLayoutManager.java

Content: 

/** 

 * {@inheritDoc}

 */

public boolean createNextChildLMs(int pos){

  return false;

}

Location: ContentLayoutManager.java

Content: 

private void fillArea(LayoutManager curLM){

  int ipd=1000000;

  LayoutContext childLC=LayoutContext.newInstance();

  childLC.setFlags(LayoutContext.NEW_AREA);

  childLC.setLeadingSpace(new SpaceSpecifier(false));

  childLC.setTrailingSpace(new SpaceSpecifier(false));

  childLC.setRefIPD(ipd);

  int lineHeight=14000;

  int lead=12000;

  int follow=2000;

  int halfLeading=(lineHeight - lead - follow) / 2;

  int lineLead=lead + halfLeading;

  int maxtb=follow + halfLeading;

  int middlefollow=maxtb;

  stackSize=0;

  List contentList=getNextKnuthElements(childLC,Constants.EN_START);

  for (  Object aContentList : contentList) {

    KnuthElement element=(KnuthElement)aContentList;

    if (element instanceof KnuthInlineBox) {

      KnuthInlineBox box=(KnuthInlineBox)element;

    }

  }

  if (maxtb - lineLead > middlefollow) {

    middlefollow=maxtb - lineLead;

  }

  LayoutContext lc=LayoutContext.newInstance();

  lc.setFlags(LayoutContext.RESOLVE_LEADING_SPACE,true);

  lc.setLeadingSpace(new SpaceSpecifier(false));

  lc.setTrailingSpace(new SpaceSpecifier(false));

  KnuthPossPosIter contentPosIter=new KnuthPossPosIter(contentList,0,contentList.size());

  curLM.addAreas(contentPosIter,lc);

}

Location: ContentLayoutManager.java

Content: 

/** 

 * {@inheritDoc}

 */

public List getChildLMs(){

  List childLMs=new ArrayList(1);

  childLMs.add(childLM);

  return childLMs;

}

Location: ContentLayoutManager.java

Content: 

/** 

 * {@inheritDoc} 

 */

public PageSequenceLayoutManager getPSLM(){

  return parentLM.getPSLM();

}

Location: ContentLayoutManager.java

Content: 

/** 

 * @return stack size 

 */

public int getStackingSize(){

  return stackSize;

}

Location: ContentLayoutManager.java

Content: 

/** 

 * {@inheritDoc}

 */

public boolean isFinished(){

  return false;

}

Location: ContentLayoutManager.java

Content: 

/** 

 * {@inheritDoc}

 */

public Position notifyPos(Position pos){

  return pos;

}

Location: ContentLayoutManager.java

Content: 

/** 

 * {@inheritDoc}

 */

public void setFinished(boolean isFinished){

}

