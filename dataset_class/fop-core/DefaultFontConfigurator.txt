Location: DefaultFontConfigurator.java

Content: 

private void addDirectories(DefaultFontConfig fontInfoConfig,FontAdder fontAdder,List<EmbedFontInfo> fontInfoList) throws FOPException {

  List<Directory> directories=fontInfoConfig.getDirectories();

  for (  Directory directory : directories) {

    FontFileFinder fontFileFinder=new FontFileFinder(directory.isRecursive() ? -1 : 1,listener);

    List<URL> fontURLList;

    try {

      fontURLList=fontFileFinder.find(directory.getDirectory());

      fontAdder.add(fontURLList,fontInfoList);

    }

 catch (    IOException e) {

      LogUtil.handleException(log,e,strict);

    }

catch (    URISyntaxException use) {

      LogUtil.handleException(log,use,strict);

    }

  }

}

Location: DefaultFontConfigurator.java

Content: 

private void addFonts(DefaultFontConfig fontInfoConfig,FontCache fontCache,List<EmbedFontInfo> fontInfoList) throws FOPException, URISyntaxException {

  List<DefaultFontConfig.Font> fonts=fontInfoConfig.getFonts();

  for (  DefaultFontConfig.Font font : fonts) {

    EmbedFontInfo embedFontInfo=getFontInfo(font,fontCache);

    if (embedFontInfo != null) {

      fontInfoList.add(embedFontInfo);

    }

  }

}

Location: DefaultFontConfigurator.java

Content: 

/** 

 * Initializes font info settings from the user configuration

 * @throws FOPException if an exception occurs while processing the configuration

 */

public List<EmbedFontInfo> configure(FontConfig fontInfoConfig) throws FOPException {

  List<EmbedFontInfo> fontInfoList=new ArrayList<EmbedFontInfo>();

  if (fontInfoConfig != null) {

    assert fontInfoConfig instanceof DefaultFontConfig;

    DefaultFontConfig adobeFontInfoConfig=(DefaultFontConfig)fontInfoConfig;

    long start=0;

    if (log.isDebugEnabled()) {

      log.debug("Starting font configuration...");

      start=System.currentTimeMillis();

    }

    FontAdder fontAdder=new FontAdder(fontManager,resourceResolver,listener);

    fontManager.autoDetectFonts(adobeFontInfoConfig.isAutoDetectFonts(),fontAdder,strict,listener,fontInfoList);

    addDirectories(adobeFontInfoConfig,fontAdder,fontInfoList);

    FontCache fontCache=fontManager.getFontCache();

    try {

      addFonts(adobeFontInfoConfig,fontCache,fontInfoList);

    }

 catch (    URISyntaxException use) {

      LogUtil.handleException(log,use,strict);

    }

    fontManager.updateReferencedFonts(fontInfoList);

    List<String> referencedFonts=adobeFontInfoConfig.getReferencedFontFamily();

    if (referencedFonts.size() > 0) {

      FontTriplet.Matcher matcher=FontManagerConfigurator.createFontsMatcher(referencedFonts,strict);

      fontManager.updateReferencedFonts(fontInfoList,matcher);

    }

    fontManager.saveCache();

    if (log.isDebugEnabled()) {

      log.debug("Finished font configuration in " + (System.currentTimeMillis() - start) + "ms");

    }

  }

  return Collections.unmodifiableList(fontInfoList);

}

Location: DefaultFontConfigurator.java

Content: 

/** 

 * Main constructor

 * @param fontManager the font manager

 * @param listener the font event listener

 * @param strict true if an Exception should be thrown if an error is found.

 */

public DefaultFontConfigurator(FontManager fontManager,FontEventListener listener,boolean strict){

  this.fontManager=fontManager;

  this.resourceResolver=fontManager.getResourceResolver();

  this.listener=listener;

  this.strict=strict;

}

Location: DefaultFontConfigurator.java

Content: 

private EmbedFontInfo getFontInfo(DefaultFontConfig.Font font,FontCache fontCache) throws FOPException, URISyntaxException {

  String embed=font.getEmbedURI();

  String metrics=font.getMetrics();

  String afm=font.getAfm();

  String pfm=font.getPfm();

  URI embedUri=InternalResourceResolver.cleanURI(embed);

  URI metricsUri=metrics == null ? null : InternalResourceResolver.cleanURI(metrics);

  URI afmUri=(afm == null) ? null : InternalResourceResolver.cleanURI(afm);

  URI pfmUri=(pfm == null) ? null : InternalResourceResolver.cleanURI(pfm);

  FontUris fontUris=(afmUri != null || pfmUri != null) ? new FontUris(embedUri,metricsUri,afmUri,pfmUri) : new FontUris(embedUri,metricsUri);

  String subFont=font.getSubFont();

  List<FontTriplet> tripletList=font.getTripletList();

  if (tripletList.size() == 0) {

    URI fontUri=resourceResolver.resolveFromBase(embedUri);

    FontInfoFinder finder=new FontInfoFinder();

    finder.setEventListener(listener);

    EmbedFontInfo[] infos=finder.find(fontUri,resourceResolver,fontCache);

    return infos[0];

  }

  EncodingMode encodingMode=EncodingMode.getValue(font.getEncodingMode());

  EmbeddingMode embeddingMode=EmbeddingMode.getValue(font.getEmbeddingMode());

  EmbedFontInfo embedFontInfo=new EmbedFontInfo(fontUris,font.isKerning(),font.isAdvanced(),tripletList,subFont,encodingMode,embeddingMode,font.getSimulateStyle(),font.getEmbedAsType1());

  if (fontCache != null) {

    if (!fontCache.containsFont(embedFontInfo)) {

      fontCache.addFont(embedFontInfo,resourceResolver);

    }

  }

  if (log.isDebugEnabled()) {

    URI embedFile=embedFontInfo.getEmbedURI();

    log.debug("Adding font " + (embedFile != null ? embedFile + ", " : "") + "metrics URI "+ embedFontInfo.getMetricsURI());

    for (    FontTriplet triplet : tripletList) {

      log.debug("  Font triplet " + triplet.getName() + ", "+ triplet.getStyle()+ ", "+ triplet.getWeight());

    }

  }

  return embedFontInfo;

}

