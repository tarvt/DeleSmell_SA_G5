Location: FontResourceCache.java

Content: 

/** 

 * Adds a number of fonts to the cache.

 * @param fontMap the font map

 */

public void addAll(Map fontMap){

  this.fontResources.putAll(fontMap);

}

Location: FontResourceCache.java

Content: 

public FontResourceCache(FontInfo fontInfo){

  this.fontInfo=fontInfo;

}

Location: FontResourceCache.java

Content: 

/** 

 * Returns the PSFontResource for the given font key.

 * @param key the font key ("F*")

 * @return the matching PSFontResource instance

 */

public PSFontResource getFontResourceForFontKey(String key){

  PSFontResource res=null;

  if (this.fontResources != null) {

    res=(PSFontResource)this.fontResources.get(key);

  }

 else {

    this.fontResources=new java.util.HashMap();

  }

  if (res == null) {

    res=PSFontResource.createFontResource(new PSResource(PSResource.TYPE_FONT,getPostScriptNameForFontKey(key)));

    this.fontResources.put(key,res);

  }

  return res;

}

Location: FontResourceCache.java

Content: 

private String getPostScriptNameForFontKey(String key){

  int pos=key.indexOf('_');

  String postFix=null;

  if (pos > 0) {

    postFix=key.substring(pos);

    key=key.substring(0,pos);

  }

  Map<String,Typeface> fonts=fontInfo.getFonts();

  Typeface tf=fonts.get(key);

  if (tf instanceof LazyFont) {

    tf=((LazyFont)tf).getRealFont();

  }

  if (tf == null) {

    throw new IllegalStateException("Font not available: " + key);

  }

  if (postFix == null) {

    return tf.getEmbedFontName();

  }

 else {

    return tf.getEmbedFontName() + postFix;

  }

}

