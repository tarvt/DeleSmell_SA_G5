Location: PCLCharacterDefinition.java

Content: 

public void addCompositeGlyph(PCLCharacterDefinition composite){

  composites.add(composite);

}

Location: PCLCharacterDefinition.java

Content: 

public byte[] getCharacterCommand() throws IOException {

  return PCLByteWriterUtil.writeCommand(String.format("*c%dE",(isComposite) ? 65535 : charCode));

}

Location: PCLCharacterDefinition.java

Content: 

public byte[] getCharacterDefinitionCommand() throws IOException {

  return PCLByteWriterUtil.writeCommand(String.format("(s%dW",10 + glyfData.length));

}

Location: PCLCharacterDefinition.java

Content: 

public List<PCLCharacterDefinition> getCompositeGlyphs(){

  return composites;

}

Location: PCLCharacterDefinition.java

Content: 

public PCLCharacterDefinition(int charCode,PCLCharacterFormat charFormat,PCLCharacterClass charClass,byte[] glyfData,boolean isComposite){

  this.charCode=charCode;

  this.charFormat=charFormat;

  this.charClass=charClass;

  this.glyfData=glyfData;

  this.isComposite=isComposite;

  charDefinitionSize=glyfData.length + 4 + 2+ 2;

  hasContinuation=charDefinitionSize > 32767;

  composites=new ArrayList<PCLCharacterDefinition>();

}

Location: PCLCharacterDefinition.java

Content: 

private void writeCharacterDescriptorHeader(int continuation,ByteArrayOutputStream baos) throws IOException {

  baos.write(PCLByteWriterUtil.unsignedByte(charFormat.getValue()));

  baos.write(continuation);

  baos.write(PCLByteWriterUtil.unsignedByte(2));

  baos.write(PCLByteWriterUtil.unsignedByte(charClass.getValue()));

  baos.write(PCLByteWriterUtil.unsignedInt(glyfData.length + 4));

  baos.write(PCLByteWriterUtil.unsignedInt(charCode));

}

