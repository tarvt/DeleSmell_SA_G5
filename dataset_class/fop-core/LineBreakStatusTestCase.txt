Location: LineBreakStatusTestCase.java

Content: 

/** 

 * Tests the paragraph break status (break actions) returned from calling LineBreakStatus.nextChar() on each character of paragraph against the expected break actions. There must be a positional match between the characters in paragraph and characters in breakAction.

 * @param paragraph The text to be analysed for line breaks

 * @param breakActions The symbolic representation of the break actionsexpected to be returned.

 */

private boolean testBreak(String paragraph,String breakActions){

  boolean result=true;

  int length=paragraph.length();

  LineBreakStatus lbs=new LineBreakStatus();

  for (int i=0; i < length; i++) {

    byte breakAction=lbs.nextChar(paragraph.charAt(i));

    if (BREAK_ACTION.charAt(breakAction) != breakActions.charAt(i)) {

      System.err.println(paragraph);

      System.err.println(breakActions);

      System.err.println("pos = " + i + " expected '"+ breakActions.charAt(i)+ "' got '"+ BREAK_ACTION.charAt(breakAction)+ "'");

      result=false;

    }

  }

  return result;

}

Location: LineBreakStatusTestCase.java

Content: 

/** 

 * Test of nextChar method, of class org.apache.commons.text.linebreak.LineBreakStatus. Runs tests for most of the Line Breaking Properties defined in the Unicode standard.

 */

@Test public void testNextChar(){

  System.out.println("testNextChar");

  assertTrue(testBreak("Nobreak","^^^^^^^"));

  assertTrue(testBreak("Thin Space" + "\u2009" + "break","^^^^^%^^^^" + "^" + "_^^^^"));

  assertTrue(testBreak("Shy" + "\u00AD" + "break","^^^" + "^" + "_^^^^"));

  assertTrue(testBreak("Acute Accent" + "\u00B4" + "break","^^^^^^%^^^^^" + "_" + "^^^^^"));

  assertTrue(testBreak("Em Dash" + "\u2014" + "break","^^^%^^^" + "_" + "_^^^^"));

  assertTrue(testBreak("Em Dash Dash" + "\u2014" + "\u2014"+ "break","^^^%^^^^%^^^" + "_" + "^"+ "_^^^^"));

  assertTrue(testBreak("Form Feed" + "\u000C" + "break","^^^^^%^^^" + "^" + "!^^^^"));

  assertTrue(testBreak("Line Separator" + "\u2028" + "break","^^^^^%^^^^^^^^" + "^" + "!^^^^"));

  assertTrue(testBreak("Paragraph Separator" + "\u2029" + "break","^^^^^^^^^^%^^^^^^^^" + "^" + "!^^^^"));

  assertTrue(testBreak("Right Parenthesis ) break","^^^^^^%^^^^^^^^^^^^^%^^^^"));

  assertTrue(testBreak("Grave Accent" + "\u0300" + " break","^^^^^^%^^^^^" + "^" + "^%^^^^"));

  assertTrue(testBreak("CR" + "\r" + "break","^^" + "^" + "!^^^^"));

  assertTrue(testBreak("CRLF" + "\r\n" + "break","^^^^" + "^^" + "!^^^^"));

  assertTrue(testBreak("EX CL ! ) break","^^^%^^^^^^%^^^^"));

  assertTrue(testBreak("EX Wave Dash ! " + "\u301C" + " break","^^^%^^^^%^^^^^^" + "%" + "^_^^^^"));

  assertTrue(testBreak("No" + "\u00a0" + "break","^^" + "^" + "^^^^^"));

  assertTrue(testBreak("Non" + "\u2011" + " Hyphen","^^^" + "^" + "^%^^^^^"));

  assertTrue(testBreak("Normal-Hyphen","^^^^^^^_^^^^^"));

  assertTrue(testBreak("Normal - Hyphen","^^^^^^^%^_^^^^^"));

  assertTrue(testBreak("123-456","^^^^^^^"));

  assertTrue(testBreak("123 - 456","^^^^%^%^^"));

  assertTrue(testBreak("\u4E00" + "\u3000" + "\u4E02","^" + "_" + "_"));

  assertTrue(testBreak("IN " + "\u2024" + "\u2025"+ "\u2026","^^^" + "%" + "^"+ "^"));

  assertTrue(testBreak("123,456.00 12:59","^^^^^^^^^^^%^^^^"));

  assertTrue(testBreak("Simple" + "\n" + "\n"+ "break","^^^^^^" + "^" + "!"+ "!^^^^"));

  assertTrue(testBreak("NL" + "\u0085" + "break","^^" + "^" + "!^^^^"));

  assertTrue(testBreak("[ Bracket ( Parenthesis","^^^^^^^^^^%^^^^^^^^^^^^"));

  assertTrue(testBreak("(12.00)%","^^^^^^^^"));

  assertTrue(testBreak("$1000.00","^^^^^^^^"));

  assertTrue(testBreak("'In Quotes'","^^^^%^^^^^^"));

  assertTrue(testBreak("' (In Quotes) '","^^^^^^%^^^^^^^%"));

  assertTrue(testBreak("Simple break","^^^^^^^%^^^^"));

  assertTrue(testBreak("Simple    break2","^^^^^^^^^^%^^^^^"));

  assertTrue(testBreak("http://xmlgraphics.apache.org/fop","^^^^^^^_^^^^^^^^^^^^^^^^^^^^^^_^^"));

  assertTrue(testBreak("1/2 31/10/2005","^^^^%^^^^^^^^^"));

  assertTrue(testBreak("http://" + "\u2060" + "xmlgraphics.apache.org/"+ "\uFEFF"+ "fop","^^^^^^^" + "^" + "^^^^^^^^^^^^^^^^^^^^^^^"+ "^"+ "^^^"));

  assertTrue(testBreak("Simple " + "\u2060" + "break","^^^^^^^" + "^" + "^^^^^"));

  assertTrue(testBreak("Simple" + "\u200B" + "\u2060"+ "break","^^^^^^" + "^" + "_"+ "^^^^^"));

  assertTrue(testBreak("Simple" + "\u200B" + "break","^^^^^^" + "^" + "_^^^^"));

  assertTrue(testBreak("No" + "\u1F7E" + "break","^^" + "^" + "^^^^^"));

}

Location: LineBreakStatusTestCase.java

Content: 

/** 

 * Test of reset method, of class org.apache.commons.text.linebreak.LineBreakStatus.

 */

@Test public void testReset(){

  System.out.println("testReset");

}

