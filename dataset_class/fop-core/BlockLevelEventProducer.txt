Location: BlockLevelEventProducer.java

Content: 

/** 

 * Indicates that FOP doesn't support flows that are not mapped to region-body, yet.

 * @param source the event source

 * @param flowName the flow name

 * @param masterName the page master name

 * @param loc the location of the error or null

 * @throws UnsupportedOperationException the layout error provoked by the method call

 * @event.severity FATAL

 */

void flowNotMappingToRegionBody(Object source,String flowName,String masterName,Locator loc) throws UnsupportedOperationException ;

Location: BlockLevelEventProducer.java

Content: 

/** 

 * Last page master reference missing.

 * @param source the event source

 * @event.severity WARN

 */

void lastPageMasterReferenceMissing(Object source,Locator loc);

Location: BlockLevelEventProducer.java

Content: 

/** 

 * A feasible layout has reached the given number of parts (columns or pages).

 * @param source the event source

 * @param partCount the number of parts that the layout has reached

 * @event.severity INFO

 */

void layoutHasReachedParts(Object source,int partCount);

Location: BlockLevelEventProducer.java

Content: 

/** 

 * No subsequences in page sequence master.

 * @param source the event source

 * @param pageSequenceMasterName the name of the page sequence master

 * @param loc the location of the error or null

 * @throws PageProductionException the error provoked by the method call

 * @event.severity FATAL

 */

void missingSubsequencesInPageSequenceMaster(Object source,String pageSequenceMasterName,Locator loc) throws PageProductionException ;

Location: BlockLevelEventProducer.java

Content: 

/** 

 * No single-page-master matching in page sequence master.

 * @param source the event source

 * @param pageSequenceMasterName the name of the page sequence master

 * @param pageMasterName the name of the page master not matching

 * @param loc the location of the error or null

 * @throws PageProductionException the error provoked by the method call

 * @event.severity FATAL

 */

void noMatchingPageMaster(Object source,String pageSequenceMasterName,String pageMasterName,Locator loc) throws PageProductionException ;

Location: BlockLevelEventProducer.java

Content: 

/** 

 * An element that cannot handle changing IPD (list, table) is flowing to a narrower page. Some content may be lost.

 * @param source the event source

 * @event.severity WARN

 */

void nonRestartableContentFlowingToNarrowerPage(Object source);

Location: BlockLevelEventProducer.java

Content: 

/** 

 * An formatting object is too wide.

 * @param source the event source

 * @param elementName the formatting object

 * @param effIPD the effective extent in inline-progression direction of the table contents

 * @param maxIPD the maximum extent in inline-progression direction available

 * @param loc the location of the error or null

 * @event.severity WARN

 */

void objectTooWide(Object source,String elementName,int effIPD,int maxIPD,Locator loc);

Location: BlockLevelEventProducer.java

Content: 

/** 

 * An overconstrained geometry adjustment rule was triggered (5.3.4, XSL 1.0).

 * @param source the event source

 * @param elementName the formatting object

 * @param amount the amount of the adjustment (in mpt)

 * @param loc the location of the error or null

 * @event.severity INFO

 */

void overconstrainedAdjustEndIndent(Object source,String elementName,int amount,Locator loc);

Location: BlockLevelEventProducer.java

Content: 

/** 

 * A page sequence master is exhausted.

 * @param source the event source

 * @param pageSequenceMasterName the name of the page sequence master

 * @param canRecover indicates whether FOP can recover from this problem and continue working

 * @param loc the location of the error or null

 * @throws PageProductionException the error provoked by the method call

 * @event.severity FATAL

 */

void pageSequenceMasterExhausted(Object source,String pageSequenceMasterName,boolean canRecover,Locator loc) throws PageProductionException ;

Location: BlockLevelEventProducer.java

Content: 

/** 

 * Contents overflow a region viewport.

 * @param source the event source

 * @param elementName the formatting object

 * @param page the page number/name where the overflow happened

 * @param amount the amount by which the contents overflow (in mpt)

 * @param clip true if the content will be clipped

 * @param canRecover indicates whether FOP can recover from this problem and continue working

 * @param loc the location of the error or null

 * @throws LayoutException the layout error provoked by the method call

 * @event.severity FATAL

 */

void regionOverflow(Object source,String elementName,String page,int amount,boolean clip,boolean canRecover,Locator loc) throws LayoutException ;

Location: BlockLevelEventProducer.java

Content: 

/** 

 * The contents of a table-row are too big to fit in the constraints.

 * @param source the event source

 * @param row the row number

 * @param effCellBPD the effective extent in block-progression direction of the cell

 * @param maxCellBPD the maximum extent in block-progression direction of the cell

 * @param loc the location of the error or null

 * @event.severity WARN

 */

void rowTooTall(Object source,int row,int effCellBPD,int maxCellBPD,Locator loc);

Location: BlockLevelEventProducer.java

Content: 

/** 

 * Contents overflow a static region viewport.

 * @param source the event source

 * @param elementName the formatting object

 * @param page the page number/name where the overflow happened

 * @param amount the amount by which the contents overflow (in mpt)

 * @param clip true if the content will be clipped

 * @param canRecover indicates whether FOP can recover from this problem and continue working

 * @param loc the location of the error or null

 * @throws LayoutException the layout error provoked by the method call

 * @event.severity FATAL

 */

void staticRegionOverflow(Object source,String elementName,String page,int amount,boolean clip,boolean canRecover,Locator loc) throws LayoutException ;

Location: BlockLevelEventProducer.java

Content: 

/** 

 * Auto-table layout is not supported, yet.

 * @param source the event source

 * @param loc the location of the error or null

 * @event.severity INFO

 */

void tableFixedAutoWidthNotSupported(Object source,Locator loc);

Location: BlockLevelEventProducer.java

Content: 

/** 

 * Contents BPD overflow a viewport.

 * @param source the event source

 * @param elementName the formatting object

 * @param amount the amount by which the contents overflow (in mpt)

 * @param clip true if the content will be clipped

 * @param canRecover indicates whether FOP can recover from this problem and continue working

 * @param loc the location of the error or null

 * @event.severity ERROR

 */

void viewportBPDOverflow(Object source,String elementName,int amount,boolean clip,boolean canRecover,Locator loc);

Location: BlockLevelEventProducer.java

Content: 

/** 

 * Contents IPD overflow a viewport.

 * @param source the event source

 * @param elementName the formatting object

 * @param amount the amount by which the contents overflow (in mpt)

 * @param clip true if the content will be clipped

 * @param canRecover indicates whether FOP can recover from this problem and continue working

 * @param loc the location of the error or null

 * @event.severity ERROR

 */

void viewportIPDOverflow(Object source,String elementName,int amount,boolean clip,boolean canRecover,Locator loc);

