Location: GlyphMapping.java

Content: 

public void addToAreaIPD(MinOptMax idp){

  areaIPD=areaIPD.plus(idp);

}

Location: GlyphMapping.java

Content: 

private static void addToLetterAdjust(MinOptMax[] letterSpaceAdjustArray,int index,int width){

  if (letterSpaceAdjustArray[index] == null) {

    letterSpaceAdjustArray[index]=MinOptMax.getInstance(width);

  }

 else {

    letterSpaceAdjustArray[index]=letterSpaceAdjustArray[index].plus(width);

  }

}

Location: GlyphMapping.java

Content: 

public static GlyphMapping doGlyphMapping(TextFragment text,int startIndex,int endIndex,Font font,MinOptMax letterSpaceIPD,MinOptMax[] letterSpaceAdjustArray,char precedingChar,char breakOpportunityChar,final boolean endsWithHyphen,int level,boolean dontOptimizeForIdentityMapping,boolean retainAssociations,boolean retainControls){

  GlyphMapping mapping;

  if (font.performsSubstitution() || font.performsPositioning()) {

    mapping=processWordMapping(text,startIndex,endIndex,font,breakOpportunityChar,endsWithHyphen,level,dontOptimizeForIdentityMapping,retainAssociations,retainControls);

  }

 else {

    mapping=processWordNoMapping(text,startIndex,endIndex,font,letterSpaceIPD,letterSpaceAdjustArray,precedingChar,breakOpportunityChar,endsWithHyphen,level);

  }

  return mapping;

}

Location: GlyphMapping.java

Content: 

/** 

 * Given a mapped character sequence MCS, obtain glyph position adjustments from the font's kerning data.

 * @param mcs mapped character sequence

 * @param font applicable font

 * @return glyph position adjustments (or null if no kerning)

 */

private static int[][] getKerningAdjustments(CharSequence mcs,final Font font,int[][] gpa){

  int numCodepoints=Character.codePointCount(mcs,0,mcs.length());

  int[] kernings=new int[numCodepoints];

  int prevCp=-1;

  int i=0;

  for (  int cp : CharUtilities.codepointsIter(mcs)) {

    if (prevCp >= 0) {

      kernings[i]=font.getKernValue(prevCp,cp);

    }

    prevCp=cp;

    i++;

  }

  boolean hasKerning=false;

  for (  int kerningValue : kernings) {

    if (kerningValue != 0) {

      hasKerning=true;

      break;

    }

  }

  if (hasKerning) {

    if (gpa == null) {

      gpa=new int[numCodepoints][4];

    }

    for (i=0; i < numCodepoints; i++) {

      if (i > 0) {

        gpa[i - 1][GlyphPositioningTable.Value.IDX_X_ADVANCE]+=kernings[i];

      }

    }

    return gpa;

  }

 else {

    return null;

  }

}

Location: GlyphMapping.java

Content: 

/** 

 * Obtain number of 'characters' contained in word. If word is mapped, then this number may be less than or greater than the original length (breakIndex - startIndex). We compute and memoize thius length upon first invocation of this method.

 */

public int getWordLength(){

  if (wordCharLength == -1) {

    if (mapping != null) {

      wordCharLength=mapping.length();

    }

 else {

      assert endIndex >= startIndex;

      wordCharLength=endIndex - startIndex;

    }

  }

  return wordCharLength;

}

Location: GlyphMapping.java

Content: 

public GlyphMapping(int startIndex,int endIndex,int wordSpaceCount,int letterSpaceCount,MinOptMax areaIPD,boolean isHyphenated,boolean isSpace,boolean breakOppAfter,Font font,int level,int[][] gposAdjustments){

  this(startIndex,endIndex,wordSpaceCount,letterSpaceCount,areaIPD,isHyphenated,isSpace,breakOppAfter,font,level,gposAdjustments,null,null);

}

Location: GlyphMapping.java

Content: 

public GlyphMapping(int startIndex,int endIndex,int wordSpaceCount,int letterSpaceCount,MinOptMax areaIPD,boolean isHyphenated,boolean isSpace,boolean breakOppAfter,Font font,int level,int[][] gposAdjustments,String mapping,List associations){

  assert startIndex <= endIndex;

  this.startIndex=startIndex;

  this.endIndex=endIndex;

  this.wordCharLength=-1;

  this.wordSpaceCount=wordSpaceCount;

  this.letterSpaceCount=letterSpaceCount;

  this.areaIPD=areaIPD;

  this.isHyphenated=isHyphenated;

  this.isSpace=isSpace;

  this.breakOppAfter=breakOppAfter;

  this.font=font;

  this.level=level;

  this.gposAdjustments=gposAdjustments;

  this.mapping=mapping;

  this.associations=associations;

}

Location: GlyphMapping.java

Content: 

/** 

 * Indicates whether a character is a space in terms of this layout manager.

 * @param ch the character

 * @return true if it's a space

 */

public static boolean isSpace(final char ch){

  return ch == CharUtilities.SPACE || CharUtilities.isNonBreakableSpace(ch) || CharUtilities.isFixedWidthSpace(ch);

}

Location: GlyphMapping.java

Content: 

private static GlyphMapping processWordMapping(TextFragment text,int startIndex,int endIndex,final Font font,final char breakOpportunityChar,final boolean endsWithHyphen,int level,boolean dontOptimizeForIdentityMapping,boolean retainAssociations,boolean retainControls){

  int nLS=0;

  String script=text.getScript();

  String language=text.getLanguage();

  if (LOG.isDebugEnabled()) {

    LOG.debug("PW: [" + startIndex + ","+ endIndex+ "]: {"+ " +M"+ ", level = "+ level+ " }");

  }

  CharSequence ics=text.subSequence(startIndex,endIndex);

  if ((script == null) || "auto".equals(script)) {

    script=CharScript.scriptTagFromCode(CharScript.dominantScript(ics));

  }

  if ((language == null) || "none".equals(language)) {

    language="dflt";

  }

  List associations=retainAssociations ? new ArrayList() : null;

  if ("zyyy".equals(script) || "auto".equals(script)) {

    script="*";

  }

  CharSequence mcs=font.performSubstitution(ics,script,language,associations,retainControls);

  int[][] gpa=null;

  if (font.performsPositioning()) {

    gpa=font.performPositioning(mcs,script,language);

  }

  if (useKerningAdjustments(font,script,language)) {

    gpa=getKerningAdjustments(mcs,font,gpa);

  }

  mcs=font.reorderCombiningMarks(mcs,gpa,script,language,associations);

  MinOptMax ipd=MinOptMax.ZERO;

  for (int i=0, n=mcs.length(); i < n; i++) {

    int c=mcs.charAt(i);

    if (CharUtilities.containsSurrogatePairAt(mcs,i)) {

      c=Character.toCodePoint((char)c,mcs.charAt(++i));

    }

    int w=font.getCharWidth(c);

    if (w < 0) {

      w=0;

    }

    if (gpa != null) {

      w+=gpa[i][GlyphPositioningTable.Value.IDX_X_ADVANCE];

    }

    ipd=ipd.plus(w);

  }

  return new GlyphMapping(startIndex,endIndex,0,nLS,ipd,endsWithHyphen,false,breakOpportunityChar != 0,font,level,gpa,!dontOptimizeForIdentityMapping && CharUtilities.isSameSequence(mcs,ics) ? null : mcs.toString(),associations);

}

Location: GlyphMapping.java

Content: 

private static GlyphMapping processWordNoMapping(TextFragment text,int startIndex,int endIndex,final Font font,MinOptMax letterSpaceIPD,MinOptMax[] letterSpaceAdjustArray,char precedingChar,final char breakOpportunityChar,final boolean endsWithHyphen,int level){

  boolean kerning=font.hasKerning();

  MinOptMax wordIPD=MinOptMax.ZERO;

  if (LOG.isDebugEnabled()) {

    LOG.debug("PW: [" + startIndex + ","+ endIndex+ "]: {"+ " -M"+ ", level = "+ level+ " }");

  }

  CharSequence ics=text.subSequence(startIndex,endIndex);

  int offset=0;

  for (  int currentChar : CharUtilities.codepointsIter(ics)) {

    int charWidth=font.getCharWidth(currentChar);

    wordIPD=wordIPD.plus(charWidth);

    if (kerning) {

      int kern=0;

      if (offset > 0) {

        int previousChar=Character.codePointAt(ics,offset - 1);

        kern=font.getKernValue(previousChar,currentChar);

      }

 else       if (precedingChar != 0) {

        kern=font.getKernValue(precedingChar,currentChar);

      }

      if (kern != 0) {

        addToLetterAdjust(letterSpaceAdjustArray,startIndex + offset,kern);

        wordIPD=wordIPD.plus(kern);

      }

    }

    offset++;

  }

  if (kerning && (breakOpportunityChar != 0) && !isSpace(breakOpportunityChar)&& endIndex > 0 && endsWithHyphen) {

    int endChar=text.charAt(endIndex - 1);

    if (Character.isLowSurrogate((char)endChar)) {

      char highSurrogate=text.charAt(endIndex - 2);

      endChar=Character.toCodePoint(highSurrogate,(char)endChar);

    }

    int kern=font.getKernValue(endChar,(int)breakOpportunityChar);

    if (kern != 0) {

      addToLetterAdjust(letterSpaceAdjustArray,endIndex,kern);

    }

  }

  int wordLength=endIndex - startIndex;

  int letterSpaces=0;

  if (wordLength != 0) {

    letterSpaces=wordLength - 1;

    if ((breakOpportunityChar != 0) && !isSpace(breakOpportunityChar)) {

      letterSpaces++;

    }

  }

  assert letterSpaces >= 0;

  wordIPD=wordIPD.plus(letterSpaceIPD.mult(letterSpaces));

  return new GlyphMapping(startIndex,endIndex,0,letterSpaces,wordIPD,endsWithHyphen,false,(breakOpportunityChar != 0) && !isSpace(breakOpportunityChar),font,level,null);

}

Location: GlyphMapping.java

Content: 

private static boolean useKerningAdjustments(final Font font,String script,String language){

  return font.hasKerning() && !font.hasFeature(GlyphTable.GLYPH_TABLE_TYPE_POSITIONING,script,language,"kern");

}

