Location: BorderManager.java

Content: 

/** 

 * Adds border element to <code>borderInfo</code>.

 * @param x x-coordinate

 * @param y y-coordinate

 * @param style border-style

 * @param type border element type, binary representation of wich givesinformation about availability or absence of corresponding side.

 */

public void addBorderElement(int x,int y,int style,int type){

  AbstractBorderElement be=null;

  if (style == Constants.EN_SOLID || style == Constants.EN_DOUBLE) {

    be=new SolidAndDoubleBorderElement(style,type);

  }

 else   if (style == Constants.EN_DOTTED) {

    be=new DottedBorderElement();

  }

 else   if (style == Constants.EN_DASHED) {

    be=new DashedBorderElement(type);

  }

 else {

    return;

  }

  be.transformElement(state);

  if (borderInfo[y][x] != null) {

    borderInfo[y][x]=borderInfo[y][x].merge(be);

  }

 else {

    borderInfo[y][x]=be;

  }

}

Location: BorderManager.java

Content: 

/** 

 * Constructs BorderManger, using <code>pageWidth</code> and <code>pageHeight</code> for creating <code>borderInfo</code>.

 * @param pageWidth page width

 * @param pageHeight page height

 * @param state TXTState

 */

public BorderManager(int pageWidth,int pageHeight,TXTState state){

  this.state=state;

  borderInfo=new AbstractBorderElement[pageHeight][pageWidth];

}

Location: BorderManager.java

Content: 

/** 

 * @param x x-coordinate

 * @param y y-coordinate

 * @return if border element at point (x,y) is available, returns instanceof Character, created on char, given by corresponding border element, otherwise returns null.

 */

public Character getCharacter(int x,int y){

  Character c=null;

  if (borderInfo[y][x] != null) {

    c=borderInfo[y][x].convert2Char();

  }

  return c;

}

Location: BorderManager.java

Content: 

/** 

 * @return height of current processed border.

 */

public int getHeight(){

  return height;

}

Location: BorderManager.java

Content: 

/** 

 * @return x-coordinate of upper left point of current processed border.

 */

public int getStartX(){

  return startX;

}

Location: BorderManager.java

Content: 

/** 

 * @return y-coordinate of upper left point of current processed border.

 */

public int getStartY(){

  return startY;

}

Location: BorderManager.java

Content: 

/** 

 * @return width of current processed border.

 */

public int getWidth(){

  return width;

}

Location: BorderManager.java

Content: 

/** 

 * Sets height of current processed border.

 * @param height height of border

 */

public void setHeight(int height){

  this.height=height;

}

Location: BorderManager.java

Content: 

/** 

 * Sets x-coordinate of upper left point of current processed border.

 * @param startX x-coordinate of upper left border's point.

 */

public void setStartX(int startX){

  this.startX=startX;

}

Location: BorderManager.java

Content: 

/** 

 * Sets y-coordinate of upper left point of current processed border.

 * @param startY y-coordinate of upper left border's point.

 */

public void setStartY(int startY){

  this.startY=startY;

}

Location: BorderManager.java

Content: 

/** 

 * Sets width of current processed border.

 * @param width width of border

 */

public void setWidth(int width){

  this.width=width;

}

