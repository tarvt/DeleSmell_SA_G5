Location: ImageHandlerRegistry.java

Content: 

/** 

 * Add an image handler. The handler itself is inspected to find out what it supports.

 * @param handler the ImageHandler instance

 */

public synchronized void addHandler(ImageHandler handler){

  Class<? extends Image> imageClass=handler.getSupportedImageClass();

  this.handlers.put(imageClass,handler);

  ListIterator<ImageHandler> iter=this.handlerList.listIterator();

  while (iter.hasNext()) {

    ImageHandler h=iter.next();

    if (HANDLER_COMPARATOR.compare(handler,h) < 0) {

      iter.previous();

      break;

    }

  }

  iter.add(handler);

  this.handlerRegistrations++;

}

Location: ImageHandlerRegistry.java

Content: 

/** 

 * Add an PDFImageHandler. The handler itself is inspected to find out what it supports.

 * @param classname the fully qualified class name

 */

public void addHandler(String classname){

  try {

    ImageHandler handlerInstance=(ImageHandler)Class.forName(classname).getDeclaredConstructor().newInstance();

    addHandler(handlerInstance);

  }

 catch (  ClassNotFoundException e) {

    throw new IllegalArgumentException("Could not find " + classname);

  }

catch (  InstantiationException e) {

    throw new IllegalArgumentException("Could not instantiate " + classname);

  }

catch (  IllegalAccessException e) {

    throw new IllegalArgumentException("Could not access " + classname);

  }

catch (  ClassCastException e) {

    throw new IllegalArgumentException(classname + " is not an " + ImageHandler.class.getName());

  }

catch (  NoSuchMethodException e) {

    throw new IllegalArgumentException(e);

  }

catch (  InvocationTargetException e) {

    throw new IllegalArgumentException(e);

  }

}

Location: ImageHandlerRegistry.java

Content: 

/** 

 * Discovers ImageHandler implementations through the classpath and dynamically registers them.

 */

private void discoverHandlers(){

  Iterator providers=Service.providers(ImageHandler.class);

  if (providers != null) {

    while (providers.hasNext()) {

      ImageHandler handler=(ImageHandler)providers.next();

      try {

        if (log.isDebugEnabled()) {

          log.debug("Dynamically adding ImageHandler: " + handler.getClass().getName());

        }

        addHandler(handler);

      }

 catch (      IllegalArgumentException e) {

        log.error("Error while adding ImageHandler",e);

      }

    }

  }

}

Location: ImageHandlerRegistry.java

Content: 

/** 

 * Returns an  {@link ImageHandler} which handles an specific image type given the MIME typeof the image.

 * @param targetContext the target rendering context that is used for identifying compatibility

 * @param image the Image to be handled

 * @return the image handler responsible for handling the image or null if none is available

 */

public ImageHandler getHandler(RenderingContext targetContext,Image image){

  for (  ImageHandler h : this.handlerList) {

    if (h.isCompatible(targetContext,image)) {

      return h;

    }

  }

  return null;

}

Location: ImageHandlerRegistry.java

Content: 

/** 

 * Returns the ordered array of supported image flavors. The array needs to be ordered by priority so the image loader framework can return the preferred image type.

 * @param context the rendering context

 * @return the array of image flavors

 */

public synchronized ImageFlavor[] getSupportedFlavors(RenderingContext context){

  List<ImageFlavor> flavors=new java.util.ArrayList<ImageFlavor>();

  for (  ImageHandler handler : this.handlerList) {

    if (handler.isCompatible(context,null)) {

      ImageFlavor[] f=handler.getSupportedImageFlavors();

      Collections.addAll(flavors,f);

    }

  }

  return flavors.toArray(new ImageFlavor[flavors.size()]);

}

Location: ImageHandlerRegistry.java

Content: 

/** 

 * Default constructor.

 */

public ImageHandlerRegistry(){

  discoverHandlers();

}

