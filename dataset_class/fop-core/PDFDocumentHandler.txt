Location: PDFDocumentHandler.java

Content: 

PageReference getCurrentPageRef(){

  return currentPageRef;

}

Location: PDFDocumentHandler.java

Content: 

/** 

 * {@inheritDoc} 

 */

public IFDocumentNavigationHandler getDocumentNavigationHandler(){

  return this.documentNavigationHandler;

}

Location: PDFDocumentHandler.java

Content: 

PDFLogicalStructureHandler getLogicalStructureHandler(){

  return logicalStructureHandler;

}

Location: PDFDocumentHandler.java

Content: 

PageReference getPageReference(int pageIndex){

  return this.pageReferences.get(pageIndex);

}

Location: PDFDocumentHandler.java

Content: 

@Override public StructureTreeEventHandler getStructureTreeEventHandler(){

  if (structureTreeBuilder == null) {

    structureTreeBuilder=new PDFStructureTreeBuilder();

  }

  return structureTreeBuilder;

}

Location: PDFDocumentHandler.java

Content: 

/** 

 * Default constructor.

 */

public PDFDocumentHandler(IFContext context){

  super(context);

  this.pdfUtil=new PDFRenderingUtil(context.getUserAgent());

}

Location: PDFDocumentHandler.java

Content: 

/** 

 * {@inheritDoc} 

 */

public void setDocumentLocale(Locale locale){

  pdfDoc.getRoot().setLanguage(locale);

}

Location: PDFDocumentHandler.java

Content: 

private void setUpContents() throws IOException {

  PDFStream stream=generator.getStream();

  String hash=stream.streamHashCode();

  if (!contents.containsKey(hash)) {

    pdfDoc.registerObject(stream);

    PDFReference ref=new PDFReference(stream);

    contents.put(hash,ref);

  }

  currentPage.setContents(contents.get(hash));

}

Location: PDFDocumentHandler.java

Content: 

private Rectangle2D toPDFCoordSystem(Rectangle box,AffineTransform transform){

  return transform.createTransformedShape(box).getBounds2D();

}

