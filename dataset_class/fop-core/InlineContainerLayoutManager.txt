Location: InlineContainerLayoutManager.java

Content: 

private boolean canRecoverFromOverflow(){

  return getInlineContainer().getOverflow() != EN_ERROR_IF_OVERFLOW;

}

Location: InlineContainerLayoutManager.java

Content: 

private void determineBPD(){

  LengthRangeProperty bpd=getInlineContainer().getBlockProgressionDimension();

  Property optimum=bpd.getOptimum(this);

  int actualBPD=ElementListUtils.calcContentLength(childElements);

  if (optimum.isAuto()) {

    contentAreaBPD=actualBPD;

  }

 else {

    double bpdValue=optimum.getLength().getNumericValue(this);

    if (bpdValue < 0) {

      contentAreaBPD=actualBPD;

    }

 else {

      contentAreaBPD=(int)Math.round(bpdValue);

      if (contentAreaBPD < actualBPD) {

        BlockLevelEventProducer eventProducer=getBlockLevelEventProducer();

        eventProducer.viewportBPDOverflow(this,fobj.getName(),actualBPD - contentAreaBPD,needClip(),canRecoverFromOverflow(),fobj.getLocator());

      }

    }

  }

}

Location: InlineContainerLayoutManager.java

Content: 

private void determineIPD(LayoutContext layoutContext){

  LengthRangeProperty ipd=getInlineContainer().getInlineProgressionDimension();

  Property optimum=ipd.getOptimum(this);

  if (optimum.isAuto()) {

    contentAreaIPD=layoutContext.getRefIPD();

    InlineLevelEventProducer eventProducer=InlineLevelEventProducer.Provider.get(fobj.getUserAgent().getEventBroadcaster());

    eventProducer.inlineContainerAutoIPDNotSupported(this,contentAreaIPD / 1000f);

  }

 else {

    contentAreaIPD=optimum.getLength().getValue(this);

  }

}

Location: InlineContainerLayoutManager.java

Content: 

private int getAlignmentPoint(int dominantBaseline){

  Length alignmentAdjust=getInlineContainer().getAlignmentAdjust();

  int baseline=alignmentAdjust.getEnum();

  if (baseline == Constants.EN_AUTO) {

    return getInlineContainerBaselineOffset(getInlineContainer().getAlignmentBaseline());

  }

 else   if (baseline == Constants.EN_BASELINE) {

    return getInlineContainerBaselineOffset(dominantBaseline);

  }

 else   if (baseline != 0) {

    return getInlineContainerBaselineOffset(baseline);

  }

 else {

    int baselineOffset=getInlineContainerBaselineOffset(dominantBaseline);

    int lineHeight=getInlineContainer().getLineHeight().getOptimum(this).getLength().getValue(this);

    int adjust=alignmentAdjust.getValue(new SimplePercentBaseContext(null,LengthBase.ALIGNMENT_ADJUST,lineHeight));

    return baselineOffset + adjust;

  }

}

Location: InlineContainerLayoutManager.java

Content: 

private BlockLevelEventProducer getBlockLevelEventProducer(){

  return BlockLevelEventProducer.Provider.get(fobj.getUserAgent().getEventBroadcaster());

}

Location: InlineContainerLayoutManager.java

Content: 

private List<ListElement> getChildKnuthElements(LayoutContext layoutContext,int alignment){

  List<ListElement> allChildElements=new LinkedList<ListElement>();

  LayoutManager childLM;

  while ((childLM=getChildLM()) != null) {

    LayoutContext childLC=LayoutContext.offspringOf(layoutContext);

    childLC.setRefIPD(contentAreaIPD);

    @SuppressWarnings("unchecked") List<ListElement> childElements=childLM.getNextKnuthElements(childLC,alignment);

    allChildElements.addAll(childElements);

  }

  handleIPDOverflow();

  wrapPositions(allChildElements);

  SpaceResolver.resolveElementList(allChildElements);

  SpaceResolver.performConditionalsNotification(allChildElements,0,allChildElements.size() - 1,-1);

  return allChildElements;

}

Location: InlineContainerLayoutManager.java

Content: 

private InlineContainer getInlineContainer(){

  assert fobj instanceof InlineContainer;

  return (InlineContainer)fobj;

}

Location: InlineContainerLayoutManager.java

Content: 

private int getInlineContainerBaselineOffset(int property){

switch (property) {

case Constants.EN_BEFORE_EDGE:

case Constants.EN_TEXT_BEFORE_EDGE:

    return 0;

case Constants.EN_AFTER_EDGE:

case Constants.EN_TEXT_AFTER_EDGE:

  return contentAreaBPD;

case Constants.EN_MIDDLE:

case Constants.EN_CENTRAL:

case Constants.EN_MATHEMATICAL:

return contentAreaBPD / 2;

case Constants.EN_IDEOGRAPHIC:

return contentAreaBPD * 7 / 10;

case Constants.EN_ALPHABETIC:

return contentAreaBPD * 6 / 10;

case Constants.EN_HANGING:

return contentAreaBPD * 2 / 10;

case Constants.EN_AUTO:

case Constants.EN_BASELINE:

return hasLineAreaDescendant() ? getBaselineOffset() : contentAreaBPD;

default :

throw new AssertionError("Unknown baseline value: " + property);

}

}

Location: InlineContainerLayoutManager.java

Content: 

private void handleIPDOverflow(){

  if (ipdOverflow > 0) {

    BlockLevelEventProducer eventProducer=getBlockLevelEventProducer();

    eventProducer.viewportIPDOverflow(this,fobj.getName(),ipdOverflow,needClip(),canRecoverFromOverflow(),fobj.getLocator());

  }

}

Location: InlineContainerLayoutManager.java

Content: 

public InlineContainerLayoutManager(InlineContainer node){

  super(node);

  setGeneratesReferenceArea(true);

}

Location: InlineContainerLayoutManager.java

Content: 

private boolean needClip(){

  int overflow=getInlineContainer().getOverflow();

  return (overflow == EN_HIDDEN || overflow == EN_ERROR_IF_OVERFLOW);

}

Location: InlineContainerLayoutManager.java

Content: 

private void wrapPositions(List<ListElement> elements){

  for (  ListElement element : elements) {

    Position position=new NonLeafPosition(this,element.getPosition());

    notifyPos(position);

    element.setPosition(position);

  }

}

