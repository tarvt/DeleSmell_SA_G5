Location: TestConverter.java

Content: 

private Node locateResult(Node testcase,String id){

  NodeList cases=testcase.getChildNodes();

  for (int count=0; count < cases.getLength(); count++) {

    Node node=cases.item(count);

    String nodename=node.getNodeName();

    if (nodename.equals("result")) {

      String resultid=node.getAttributes().getNamedItem("id").getNodeValue();

      if (id.equals(resultid)) {

        return node;

      }

    }

  }

  return null;

}

Location: TestConverter.java

Content: 

/** 

 * Return a suitable file extension for the output format.

 */

private String makeResultExtension(){

  if (MimeConstants.MIME_PDF.equals(outputFormat)) {

    return ".pdf";

  }

 else   if (MimeConstants.MIME_RTF.equals(outputFormat)) {

    return ".rtf";

  }

 else   if (MimeConstants.MIME_POSTSCRIPT.equals(outputFormat)) {

    return ".ps";

  }

 else {

    return ".at.xml";

  }

}

Location: TestConverter.java

Content: 

/** 

 * Run a test case. This goes through a test case in the document. A testcase can contain a test, a result or more test cases. A test case is handled recursively otherwise the test is run.

 * @param tcase Test case node to run

 */

protected void runTestCase(Node tcase){

  if (tcase.hasAttributes()) {

    String profile=tcase.getAttributes().getNamedItem("profile").getNodeValue();

    logger.debug("testing profile:" + profile);

  }

  NodeList cases=tcase.getChildNodes();

  for (int count=0; count < cases.getLength(); count++) {

    Node node=cases.item(count);

    String nodename=node.getNodeName();

    if (nodename.equals("testcases")) {

      runTestCase(node);

    }

 else     if (nodename.equals("test")) {

      runTest(tcase,node);

    }

  }

}

Location: TestConverter.java

Content: 

/** 

 * Run the Tests. This runs the tests specified in the xml file fname. The document is read as a dom and each testcase is covered.

 * @param fname filename of the input file

 * @param dest destination directory

 * @param compDir comparison directory

 * @return Map a Map containing differences

 */

public Map runTests(String fname,String dest,String compDir){

  logger.debug("running tests in file:" + fname);

  try {

    if (compDir != null) {

      compare=new File(baseDir + "/" + compDir);

    }

    destdir=new File(baseDir + "/" + dest);

    destdir.mkdirs();

    File f=new File(baseDir + "/" + fname);

    DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();

    DocumentBuilder db=factory.newDocumentBuilder();

    Document doc=db.parse(f);

    NodeList suitelist=doc.getChildNodes();

    if (suitelist.getLength() == 0) {

      return differ;

    }

    Node testsuite=null;

    testsuite=doc.getDocumentElement();

    if (testsuite.hasAttributes()) {

      String profile=testsuite.getAttributes().getNamedItem("profile").getNodeValue();

      logger.debug("testing test suite:" + profile);

    }

    NodeList testcases=testsuite.getChildNodes();

    for (int count=0; count < testcases.getLength(); count++) {

      Node testcase=testcases.item(count);

      if (testcase.getNodeName().equals("testcases")) {

        runTestCase(testcase);

      }

    }

  }

 catch (  Exception e) {

    logger.error("Error while running tests",e);

  }

  return differ;

}

Location: TestConverter.java

Content: 

/** 

 * Run a particular test. This runs a test defined by the xml and xsl documents. If the test has a result specified it is checked. This creates an XSLTInputHandler to provide the input for FOP and writes the data out to an XML are tree.

 * @param testcase Test case to run

 * @param test Test

 */

protected void runTest(Node testcase,Node test){

  String id=test.getAttributes().getNamedItem("id").getNodeValue();

  Node result=locateResult(testcase,id);

  boolean pass=false;

  if (result != null) {

    String agreement=result.getAttributes().getNamedItem("agreement").getNodeValue();

    pass=agreement.equals("full");

  }

  if (pass && failOnly) {

    return;

  }

  String xml=test.getAttributes().getNamedItem("xml").getNodeValue();

  Node xslNode=test.getAttributes().getNamedItem("xsl");

  String xsl=null;

  if (xslNode != null) {

    xsl=xslNode.getNodeValue();

  }

  logger.debug("converting xml:" + xml + " and xsl:"+ xsl+ " to area tree");

  String res=xml;

  Node resNode=test.getAttributes().getNamedItem("results");

  if (resNode != null) {

    res=resNode.getNodeValue();

  }

  try {

    File xmlFile=new File(baseDir + "/" + xml);

    URI baseUri=xmlFile.getParentFile().toURI();

    InputHandler inputHandler=null;

    if (xsl == null) {

      inputHandler=new InputHandler(xmlFile);

    }

 else {

      inputHandler=new InputHandler(xmlFile,new File(baseDir + "/" + xsl),null);

    }

    FopFactory fopFactory=FopFactory.newInstance(baseUri);

    FOUserAgent userAgent=fopFactory.newFOUserAgent();

    userAgent.getRendererOptions().put("fineDetail",false);

    userAgent.getRendererOptions().put("consistentOutput",true);

    userAgent.setProducer("Testsuite Converter");

    String outname=res;

    if (outname.endsWith(".xml") || outname.endsWith(".pdf")) {

      outname=outname.substring(0,outname.length() - 4);

    }

    File outputFile=new File(destdir,outname + makeResultExtension());

    outputFile.getParentFile().mkdirs();

    OutputStream outStream=null;

    try {

      outStream=new java.io.BufferedOutputStream(new java.io.FileOutputStream(outputFile));

      logger.debug("ddir:" + destdir + " on:"+ outputFile.getName());

      inputHandler.renderTo(userAgent,outputFormat,outStream);

    }

  finally {

      IOUtils.closeQuietly(outStream);

    }

    if (compare != null) {

      File f1=new File(destdir,outname + ".at.xml");

      File f2=new File(compare,outname + ".at.xml");

      if (!compareFiles(f1,f2)) {

        differ.put(outname + ".at.xml",pass);

      }

    }

  }

 catch (  Exception e) {

    logger.error("Error while running tests",e);

  }

}

Location: TestConverter.java

Content: 

/** 

 * Controls whether to set logging to debug level

 * @param debug If true, debug level, if false, error level

 */

public void setDebug(boolean debug){

  if (debug) {

    logger.setLevel(SimpleLog.LOG_LEVEL_DEBUG);

  }

 else {

    logger.setLevel(SimpleLog.LOG_LEVEL_ERROR);

  }

}

Location: TestConverter.java

Content: 

/** 

 * Controls whether to process only the tests which are specified as fail in the test results.

 * @param fail True if only fail tests should be processed

 */

public void setFailOnly(boolean fail){

  failOnly=fail;

}

Location: TestConverter.java

Content: 

/** 

 * Controls output format to generate

 * @param outputFormat the MIME type of the output format

 */

public void setOutputFormat(String outputFormat){

  this.outputFormat=outputFormat;

}

Location: TestConverter.java

Content: 

/** 

 * Construct a new TestConverter

 */

public TestConverter(){

  logger=new SimpleLog("FOP/Test");

  logger.setLevel(SimpleLog.LOG_LEVEL_ERROR);

}

