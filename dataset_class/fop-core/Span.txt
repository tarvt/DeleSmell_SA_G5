Location: Span.java

Content: 

/** 

 * Create the normal flows for this Span

 */

private void createNormalFlows(){

  flowAreas=new java.util.ArrayList<NormalFlow>(colCount);

  colWidth=(ipd - ((colCount - 1) * colGap)) / colCount;

  for (int i=0; i < colCount; i++) {

    NormalFlow newFlow=new NormalFlow(colWidth);

    flowAreas.add(newFlow);

  }

}

Location: Span.java

Content: 

/** 

 * Get the NormalFlow area currently being processed

 * @return the current NormalFlow

 */

public NormalFlow getCurrentFlow(){

  return getNormalFlow(curFlowIdx);

}

Location: Span.java

Content: 

/** 

 * @return the index of the current normal flow 

 */

public int getCurrentFlowIndex(){

  return curFlowIdx;

}

Location: Span.java

Content: 

/** 

 * Get the normal flow area for a particular column.

 * @param colRequested the zero-based column number of the flow

 * @return the flow area for the requested column

 */

public NormalFlow getNormalFlow(int colRequested){

  if (colRequested >= 0 && colRequested < colCount) {

    return flowAreas.get(colRequested);

  }

 else {

    throw new IllegalArgumentException("Invalid column number " + colRequested + " requested; only 0-"+ (colCount - 1)+ " available.");

  }

}

Location: Span.java

Content: 

/** 

 * Indicates if the Span has unprocessed flows.

 * @return true if Span can increment to the next flow,false otherwise.

 */

public boolean hasMoreFlows(){

  return (curFlowIdx < colCount - 1);

}

Location: Span.java

Content: 

/** 

 * Indicate to the Span that the next column is being processed.

 * @return the new NormalFlow (in the next column)

 */

public NormalFlow moveToNextFlow(){

  if (hasMoreFlows()) {

    curFlowIdx++;

    return getNormalFlow(curFlowIdx);

  }

 else {

    throw new IllegalStateException("(Internal error.) No more flows left in span.");

  }

}

Location: Span.java

Content: 

/** 

 * Called to notify the span that all its flows have been fully generated so it can update its own BPD extent.

 */

public void notifyFlowsFinished(){

  int maxFlowBPD=Integer.MIN_VALUE;

  for (int i=0; i < colCount; i++) {

    maxFlowBPD=Math.max(maxFlowBPD,getNormalFlow(i).getAllocBPD());

  }

  bpd=maxFlowBPD;

}

Location: Span.java

Content: 

/** 

 * Create a span area with the number of columns for this span area.

 * @param colCount the number of columns in the span

 * @param colGap the column gap between each column

 * @param ipd the total ipd of the span

 */

public Span(int colCount,int colGap,int ipd){

  addTrait(Trait.IS_REFERENCE_AREA,Boolean.TRUE);

  this.colCount=colCount;

  this.colGap=colGap;

  this.ipd=ipd;

  curFlowIdx=0;

  createNormalFlows();

}

