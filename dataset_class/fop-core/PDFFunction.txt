Location: PDFFunction.java

Content: 

@SuppressWarnings("unchecked") public PDFFunction(Function function){

  this(function,Collections.EMPTY_LIST);

}

Location: PDFFunction.java

Content: 

public PDFFunction(Function function,List<PDFFunction> pdfFunctions){

  this.function=function;

  this.pdfFunctions=pdfFunctions;

}

Location: PDFFunction.java

Content: 

/** 

 * create an complete Function object of Type 2, an Exponential Interpolation function. Use null for an optional object parameter if you choose not to use it. For optional int parameters, pass the default.

 * @param domain List objects of Double objects.This is the domain of the function. See page 264 of the PDF 1.3 Spec.

 * @param range List of Doubles that is the Range of the function.See page 264 of the PDF 1.3 Spec.

 * @param cZero This is a vector of Double objects which defines the function resultwhen x=0. This attribute is optional. It's described on page 268 of the PDF 1.3 spec.

 * @param cOne This is a vector of Double objects which defines the function resultwhen x=1. This attribute is optional. It's described on page 268 of the PDF 1.3 spec.

 * @param interpolationExponentN This is the inerpolation exponent.This attribute is required. PDF Spec page 268

 */

public PDFFunction(List<Double> domain,List<Double> range,float[] cZero,float[] cOne,double interpolationExponentN){

  this(new Function(domain,range,cZero,cOne,interpolationExponentN));

}

Location: PDFFunction.java

Content: 

public byte[] toByteString(){

  SubFunctionRenderer subFunctionRenderer=new SubFunctionRenderer(){

    public void outputFunction(    StringBuilder out,    int functionIndex){

      out.append(pdfFunctions.get(functionIndex).referencePDF());

    }

  }

;

  StringBuilder out=new StringBuilder();

  GradientMaker.DoubleFormatter doubleFormatter=new DoubleFormatter(){

    public String formatDouble(    double d){

      return PDFNumber.doubleOut(d);

    }

  }

;

  function.output(out,doubleFormatter,subFunctionRenderer);

  return encode(out.toString());

}

