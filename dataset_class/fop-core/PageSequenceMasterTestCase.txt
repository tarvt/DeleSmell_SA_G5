Location: PageSequenceMasterTestCase.java

Content: 

private PageSequenceMaster createPageSequenceMaster(BlockLevelEventProducer blockLevelEventProducer) throws FOPException {

  return createPageSequenceMaster(mock(LayoutMasterSet.class),blockLevelEventProducer);

}

Location: PageSequenceMasterTestCase.java

Content: 

private PageSequenceMaster createPageSequenceMaster(LayoutMasterSet layoutMasterSet,BlockLevelEventProducer blockLevelEventProducer) throws FOPException {

  FONode mockParent=mock(FONode.class);

  Root mockRoot=mock(Root.class);

  when(mockParent.getRoot()).thenReturn(mockRoot);

  when(mockRoot.getLayoutMasterSet()).thenReturn(layoutMasterSet);

  PageSequenceMaster psm=new PageSequenceMaster(mockParent,blockLevelEventProducer);

  psm.startOfNode();

  return psm;

}

Location: PageSequenceMasterTestCase.java

Content: 

/** 

 * Test that PageProductionException is thrown if the final simple-page-master cannot handle the main-flow of the page sequence

 * @throws Exception exception

 */

@Test public void testGetNextSimplePageMasterException() throws Exception {

  final String mainFlowRegionName="main";

  final String emptyFlowRegionName="empty";

  SimplePageMaster mockEmptySPM=mock(SimplePageMaster.class);

  Region mockRegion=mock(Region.class);

  SinglePageMasterReference mockSinglePageMasterReference=mock(SinglePageMasterReference.class);

  BlockLevelEventProducer mockBlockLevelEventProducer=mock(BlockLevelEventProducer.class);

  LayoutMasterSet mockLayoutMasterSet=mock(LayoutMasterSet.class);

  when(mockLayoutMasterSet.getSimplePageMaster(anyString())).thenReturn(mockEmptySPM);

  when(mockEmptySPM.getRegion(anyInt())).thenReturn(mockRegion);

  when(mockRegion.getRegionName()).thenReturn(emptyFlowRegionName);

  when(mockSinglePageMasterReference.getNextPageMaster(anyBoolean(),anyBoolean(),anyBoolean(),anyBoolean())).thenReturn(null,mockEmptySPM);

  PageSequenceMaster pageSequenceMaster=createPageSequenceMaster(mockLayoutMasterSet,mockBlockLevelEventProducer);

  pageSequenceMaster.startOfNode();

  pageSequenceMaster.addSubsequenceSpecifier(mockSinglePageMasterReference);

  try {

    pageSequenceMaster.getNextSimplePageMaster(false,false,false,false,mainFlowRegionName);

    fail("The next simple page master does not refer to the main flow");

  }

 catch (  PageProductionException ppe) {

  }

}

Location: PageSequenceMasterTestCase.java

Content: 

/** 

 * Test that block level events are produced in line with XSL:FO - 6.4.8 fo:page-sequence-master - "It is an error if the entire sequence of sub-sequence-specifiers children is exhausted while some areas returned by an fo:flow are not placed. Implementations may recover, if possible, by re-using the sub-sequence-specifier that was last used to generate a page."

 * @throws Exception exception

 */

@Test public void testGetNextSimplePageMasterExhausted() throws Exception {

  testGetNextSimplePageMasterExhausted(true);

  testGetNextSimplePageMasterExhausted(false);

}

Location: PageSequenceMasterTestCase.java

Content: 

private void testGetNextSimplePageMasterExhausted(boolean canResume) throws Exception {

  SimplePageMaster spm=mock(SimplePageMaster.class);

  SubSequenceSpecifier mockSinglePageMasterReference=mock(SubSequenceSpecifier.class);

  BlockLevelEventProducer mockBlockLevelEventProducer=mock(BlockLevelEventProducer.class);

  PageSequenceMaster pageSequenceMaster=createPageSequenceMaster(mockBlockLevelEventProducer);

  pageSequenceMaster.addSubsequenceSpecifier(mockSinglePageMasterReference);

  when(mockSinglePageMasterReference.getNextPageMaster(anyBoolean(),anyBoolean(),anyBoolean(),anyBoolean())).thenReturn(null,spm);

  when(mockSinglePageMasterReference.canProcess(anyString())).thenReturn(true);

  when(mockSinglePageMasterReference.isReusable()).thenReturn(canResume);

  pageSequenceMaster.getNextSimplePageMaster(false,false,false,false,null);

  verify(mockBlockLevelEventProducer).pageSequenceMasterExhausted((Locator)anyObject(),anyString(),eq(canResume),(Locator)anyObject());

}

