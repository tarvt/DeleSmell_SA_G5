Location: PDFRoot.java

Content: 

public void addAF(PDFFileSpec fileSpec){

  if (af == null) {

    af=new PDFArray();

    put("AF",af);

  }

  af.add(fileSpec);

  fileSpec.put("AFRelationship",new PDFName("Data"));

}

Location: PDFRoot.java

Content: 

/** 

 * Adds an OutputIntent to the PDF

 * @param outputIntent the OutputIntent dictionary

 * @since PDF 1.4

 */

public void addOutputIntent(PDFOutputIntent outputIntent){

  if (getDocumentSafely().getPDFVersion().compareTo(Version.V1_4) >= 0) {

    PDFArray outputIntents=getOutputIntents();

    if (outputIntents == null) {

      outputIntents=new PDFArray(this);

      put("OutputIntents",outputIntents);

    }

    outputIntents.add(outputIntent);

  }

}

Location: PDFRoot.java

Content: 

/** 

 * add a /Page object to the root /Pages object

 * @param page the /Page object to add

 */

public void addPage(PDFPage page){

  PDFPages pages=getRootPages();

  pages.addPage(page);

}

Location: PDFRoot.java

Content: 

public PDFDPartRoot getDPartRoot(){

  if (dPartRoot == null) {

    dPartRoot=getDocument().getFactory().makeDPartRoot();

    put("DPartRoot",dPartRoot.makeReference());

  }

  return dPartRoot;

}

Location: PDFRoot.java

Content: 

/** 

 * Returns the MarkInfo dictionary.

 * @return the MarkInfo dictionary (or null if it's not present)

 */

public PDFDictionary getMarkInfo(){

  return (PDFDictionary)get("MarkInfo");

}

Location: PDFRoot.java

Content: 

/** 

 * Returns the /OutputIntents array.

 * @return the /OutputIntents array or null if it doesn't exist

 * @since PDF 1.4

 */

public PDFArray getOutputIntents(){

  return (PDFArray)get("OutputIntents");

}

Location: PDFRoot.java

Content: 

/** 

 * Returns the /PageLabels object.

 * @return the /PageLabels object if set, null otherwise.

 * @since PDF 1.3

 */

public PDFPageLabels getPageLabels(){

  PDFReference ref=(PDFReference)get("PageLabels");

  return (ref != null ? (PDFPageLabels)ref.getObject() : null);

}

Location: PDFRoot.java

Content: 

/** 

 * Returns the currently active /PageMode.

 * @return the /PageMode (one of PAGEMODE_*)

 */

public int getPageMode(){

  PDFName mode=(PDFName)get("PageMode");

  if (mode != null) {

    for (int i=0; i < PAGEMODE_NAMES.length; i++) {

      if (PAGEMODE_NAMES[i].equals(mode)) {

        return i;

      }

    }

    throw new IllegalStateException("Unknown /PageMode encountered: " + mode);

  }

 else {

    return PAGEMODE_USENONE;

  }

}

Location: PDFRoot.java

Content: 

/** 

 * Get the root PDF outline for the document.

 * @return the root PDF Outline

 */

public PDFOutline getRootOutline(){

  PDFReference ref=(PDFReference)get("Outlines");

  return (ref != null ? (PDFOutline)ref.getObject() : null);

}

Location: PDFRoot.java

Content: 

/** 

 * Returns the /PageLabels object.

 * @return the /PageLabels object if set, null otherwise.

 * @since PDF 1.3

 */

public PDFPages getRootPages(){

  PDFReference ref=(PDFReference)get("Pages");

  return (ref != null ? (PDFPages)ref.getObject() : null);

}

Location: PDFRoot.java

Content: 

/** 

 * Returns the StructTreeRoot object.

 * @return the structure tree root (or null if accessibility is not enabled)

 */

public PDFStructTreeRoot getStructTreeRoot(){

  return (PDFStructTreeRoot)get("StructTreeRoot");

}

Location: PDFRoot.java

Content: 

/** 

 * Marks this document as conforming to the Tagged PDF conventions.

 */

public void makeTagged(){

  PDFDictionary dict=new PDFDictionary();

  dict.put("Marked",Boolean.TRUE);

  put("MarkInfo",dict);

}

Location: PDFRoot.java

Content: 

/** 

 * create a Root (/Catalog) object. NOTE: The PDFRoot object must be created before the PDF document is generated, but it is not assigned an object ID until it is about to be written (immediately before the xref table as part of the trailer). (mark-fop@inomial.com)

 * @param document TODO

 * @param pages the PDFPages object

 */

public PDFRoot(PDFDocument document,PDFPages pages){

  this.document=document;

  setObjectNumber(document);

  put("Type",new PDFName("Catalog"));

  setRootPages(pages);

  setLanguage("x-unknown");

}

Location: PDFRoot.java

Content: 

private void setLanguage(String lang){

  put("Lang",lang);

}

Location: PDFRoot.java

Content: 

/** 

 * Set the optional Metadata object.

 * @param meta the Metadata object

 * @since PDF 1.4

 */

public void setMetadata(PDFMetadata meta){

  if (getDocumentSafely().getPDFVersion().compareTo(Version.V1_4) >= 0) {

    put("Metadata",meta.makeReference());

  }

}

Location: PDFRoot.java

Content: 

/** 

 * Set the /Names object.

 * @param names the Names object

 * @since PDF 1.2

 */

public void setNames(PDFNames names){

  put("Names",names.makeReference());

}

Location: PDFRoot.java

Content: 

/** 

 * Sets the /PageLabels object.

 * @param pageLabels the /PageLabels object

 */

public void setPageLabels(PDFPageLabels pageLabels){

  put("PageLabels",pageLabels.makeReference());

}

Location: PDFRoot.java

Content: 

/** 

 * Set the page mode for the PDF document.

 * @param mode the page mode (one of PAGEMODE_*)

 */

public void setPageMode(int mode){

  put("PageMode",PAGEMODE_NAMES[mode]);

}

Location: PDFRoot.java

Content: 

/** 

 * Set the root outline for the PDF document.

 * @param out the root PDF Outline

 */

public void setRootOutline(PDFOutline out){

  put("Outlines",out.makeReference());

  PDFName mode=(PDFName)get("PageMode");

  if (mode == null) {

    setPageMode(PAGEMODE_USEOUTLINES);

  }

}

Location: PDFRoot.java

Content: 

/** 

 * set the root /Pages object

 * @param pages the /Pages object to set as root

 */

public void setRootPages(PDFPages pages){

  put("Pages",pages.makeReference());

}

Location: PDFRoot.java

Content: 

/** 

 * Sets the StructTreeRoot object. Used for accessibility.

 * @param structTreeRoot of this document

 */

public void setStructTreeRoot(PDFStructTreeRoot structTreeRoot){

  if (structTreeRoot == null) {

    throw new NullPointerException("structTreeRoot must not be null");

  }

  put("StructTreeRoot",structTreeRoot);

}

Location: PDFRoot.java

Content: 

/** 

 * Sets the "Version" entry. If this version is greater than that specified in the header, this version takes precedence.

 * @param version the PDF document version

 * @since PDF 1.4

 */

void setVersion(Version version){

  put("Version",new PDFName(version.toString()));

}

