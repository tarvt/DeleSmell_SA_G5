Location: PFMInputStream.java

Content: 

/** 

 * Constructs a PFMInputStream based on an InputStream representing the PFM file.

 * @param in The stream from which to read the PFM file

 */

public PFMInputStream(InputStream in){

  super(in);

  datain=new DataInputStream(in);

}

Location: PFMInputStream.java

Content: 

/** 

 * Parses a one byte value out of the stream.

 * @return The value extracted

 * @throws IOException In case of an I/O problem

 */

public short readByte() throws IOException {

  short s=datain.readByte();

  int s1=(((s & 0xF0) >>> 4) << 4) + (s & 0x0F);

  return (short)s1;

}

Location: PFMInputStream.java

Content: 

/** 

 * Parses a four byte value out of the stream.

 * @return The value extracted

 * @throws IOException In case of an I/O problem

 */

public long readInt() throws IOException {

  int i=datain.readInt();

  int i1=(i & 0xFF000000) >>> 24;

  int i2=(i & 0x00FF0000) >>> 8;

  int i3=(i & 0x0000FF00) << 8;

  int i4=(i & 0x000000FF) << 24;

  return i1 + i2 + i3+ i4;

}

Location: PFMInputStream.java

Content: 

/** 

 * Parses a two byte value out of the stream.

 * @return The value extracted

 * @throws IOException In case of an I/O problem

 */

public int readShort() throws IOException {

  int i=datain.readShort();

  int high=(i & 0xFF00) >>> 8;

  int low=(i & 0x00FF) << 8;

  return low + high;

}

Location: PFMInputStream.java

Content: 

/** 

 * Parses a zero-terminated string out of the stream.

 * @return The value extracted

 * @throws IOException In case of an I/O problem

 */

public String readString() throws IOException {

  InputStreamReader reader=new InputStreamReader(in,"ISO-8859-1");

  StringBuffer buf=new StringBuffer();

  int ch=reader.read();

  while (ch > 0) {

    buf.append((char)ch);

    ch=reader.read();

  }

  if (ch == -1) {

    throw new EOFException("Unexpected end of stream reached");

  }

  return buf.toString();

}

