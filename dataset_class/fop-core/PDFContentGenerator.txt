Location: PDFContentGenerator.java

Content: 

/** 

 * Begins a new marked content sequence (BDC or BMC). If  {@code structElemType} isnull, a BMC operator with an "Artifact" tag is generated. Otherwise, a BDC operator with  {@code structElemType} as a tag is generated, and the given mcid stored in itsproperty list.

 * @param structElemType the type of the associated structure element

 * @param mcid the marked content identifier

 */

protected void beginMarkedContentSequence(String structElemType,int mcid){

  beginMarkedContentSequence(structElemType,mcid,null);

}

Location: PDFContentGenerator.java

Content: 

/** 

 * Begins a new marked content sequence (BDC or BMC). If  {@code structElemType} isnull, a BMC operator with an "Artifact" tag is generated. Otherwise, a BDC operator with  {@code structElemType} as a tag is generated, and the given mcid and actualtext are stored in its property list.

 * @param structElemType the type of the associated structure element

 * @param mcid the marked content identifier

 * @param actualText the replacement text for the marked content

 */

protected void beginMarkedContentSequence(String structElemType,int mcid,String actualText){

  assert !this.inMarkedContentSequence;

  assert !this.inArtifactMode;

  if (structElemType != null) {

    String actualTextProperty=actualText == null ? "" : " /ActualText " + PDFText.escapeText(actualText);

    getStream().add(structElemType + " <</MCID " + String.valueOf(mcid)+ actualTextProperty+ ">>\n"+ "BDC\n");

  }

 else {

    if (context != null && context.getRegionType() != null) {

      getStream().add("/Artifact\n<</Type /Pagination\n/Subtype /" + context.getRegionType() + ">>\nBDC\n");

    }

 else {

      getStream().add("/Artifact\nBMC\n");

    }

    this.inArtifactMode=true;

  }

  this.inMarkedContentSequence=true;

}

Location: PDFContentGenerator.java

Content: 

private void beginOptionalContent(String layerId){

  String name;

  PDFReference layer=document.resolveExtensionReference(layerId);

  if (layer != null) {

    name="oc" + ++ocNameIndex;

    document.getResources().addProperty(name,layer);

  }

 else {

    name="unknown";

  }

  getStream().add("/OC /" + name + " BDC\n");

}

Location: PDFContentGenerator.java

Content: 

/** 

 * Indicates the beginning of a marked-content text object.

 * @param structElemType structure element type

 * @param mcid sequence number

 * @see #beginTextObject()

 * @see #beginMarkedContentSequence(String,int)

 */

protected void beginTextObject(String structElemType,int mcid){

  beginTextObject(structElemType,mcid,null);

}

Location: PDFContentGenerator.java

Content: 

/** 

 * Indicates the beginning of a marked-content text object.

 * @param structElemType structure element type

 * @param mcid sequence number

 * @param actualText the replacement text for the marked content

 * @see #beginTextObject()

 * @see #beginMarkedContentSequence

 */

protected void beginTextObject(String structElemType,int mcid,String actualText){

  if (!textutil.isInTextObject()) {

    beginMarkedContentSequence(structElemType,mcid,actualText);

    textutil.beginTextObject();

  }

}

Location: PDFContentGenerator.java

Content: 

void endMarkedContentSequence(){

  getStream().add("EMC\n");

  this.inMarkedContentSequence=false;

  this.inArtifactMode=false;

}

Location: PDFContentGenerator.java

Content: 

private void endOptionalContent(){

  getStream().add("EMC\n");

}

Location: PDFContentGenerator.java

Content: 

/** 

 * Flushes all queued PDF objects ready to be written to the output stream.

 * @throws IOException if an error occurs while flushing the PDF objects

 */

public void flushPDFDoc() throws IOException {

  if (document.isLinearizationEnabled()) {

    new PDFLinearization(document).outputPages(outputStream);

  }

  this.document.output(this.outputStream);

}

Location: PDFContentGenerator.java

Content: 

/** 

 * Formats a float value (normally coordinates in points) as Strings.

 * @param value the value

 * @return the formatted value

 */

public static final String format(float value){

  return PDFNumber.doubleOut(value);

}

Location: PDFContentGenerator.java

Content: 

public AffineTransform getAffineTransform(){

  return transform;

}

Location: PDFContentGenerator.java

Content: 

/** 

 * Returns the output stream the PDF document is written to.

 * @return the output stream

 */

public OutputStream getOutputStream(){

  return this.outputStream;

}

Location: PDFContentGenerator.java

Content: 

/** 

 * Returns the applicable resource context for the generator.

 * @return the resource context

 */

public PDFResourceContext getResourceContext(){

  return this.resourceContext;

}

Location: PDFContentGenerator.java

Content: 

/** 

 * Returns the  {@link PDFPaintingState} associated with this instance.

 * @return the PDF state

 */

public PDFPaintingState getState(){

  return this.currentState;

}

Location: PDFContentGenerator.java

Content: 

/** 

 * Returns the  {@link PDFStream} associated with this instance.

 * @return the PDF stream

 */

public PDFStream getStream(){

  return this.currentStream;

}

Location: PDFContentGenerator.java

Content: 

/** 

 * Returns the  {@link PDFTextUtil} associated with this instance.

 * @return the text utility

 */

public PDFTextUtil getTextUtil(){

  return this.textutil;

}

Location: PDFContentGenerator.java

Content: 

private void maybeBeginLayer(String layer){

  if ((layer != null) && (layer.length() > 0)) {

    getState().setLayer(layer);

    beginOptionalContent(layer);

  }

}

Location: PDFContentGenerator.java

Content: 

private void maybeEndLayer(){

  if (getState().getLayerChanged()) {

    endOptionalContent();

  }

}

Location: PDFContentGenerator.java

Content: 

/** 

 * Main constructor. Creates a new PDF stream and additional helper classes for text painting and state management.

 * @param document the PDF document

 * @param out the output stream the PDF document is generated to

 * @param resourceContext the resource context

 */

public PDFContentGenerator(PDFDocument document,OutputStream out,PDFResourceContext resourceContext){

  this(document,out,resourceContext,null);

}

Location: PDFContentGenerator.java

Content: 

public PDFContentGenerator(PDFDocument document,OutputStream out,PDFResourceContext resourceContext,IFContext context){

  this.document=document;

  this.outputStream=out;

  this.resourceContext=resourceContext;

  this.currentStream=document.getFactory().makeStream(PDFFilterList.CONTENT_FILTER,false);

  this.textutil=new PDFTextUtil(){

    protected void write(    String code){

      currentStream.add(code);

    }

    protected void write(    StringBuffer code){

      currentStream.add(code);

    }

  }

;

  this.currentState=new PDFPaintingState();

  this.colorHandler=new PDFColorHandler(document.getResources());

  this.context=context;

}

Location: PDFContentGenerator.java

Content: 

public void placeImage(AffineTransform at,String stream){

  hongshuai();

  endTextObject();

  getState().save();

  getStream().add("q\n");

  concatenate(at);

  add(stream);

  restoreGraphicsState();

}

Location: PDFContentGenerator.java

Content: 

/** 

 * Places a previously registered image at a certain place on the page.

 * @param x X coordinate

 * @param y Y coordinate

 * @param w width for image

 * @param h height for image

 * @param xobj the image XObject

 */

public void placeImage(float x,float y,float w,float h,PDFXObject xobj){

  hongshuai();

  endTextObject();

  getState().save();

  getStream().add("q\n");

  add(format(w) + " 0 0 " + format(-h)+ " "+ format(x)+ " "+ format(y + h)+ " cm\n"+ xobj.getName()+ " Do\n");

  restoreGraphicsState();

}

Location: PDFContentGenerator.java

Content: 

/** 

 * Places a previously registered image at a certain place on the page, bracketing it as a marked-content sequence.

 * @param x X coordinate

 * @param y Y coordinate

 * @param w width for image

 * @param h height for image

 * @param xobj the image XObject

 * @param structElemType structure element type

 * @param mcid sequence number

 * @see #beginMarkedContentSequence(String,int)

 */

public void placeImage(float x,float y,float w,float h,PDFXObject xobj,String structElemType,int mcid){

  saveGraphicsState(structElemType,mcid);

  add(format(w) + " 0 0 " + format(-h)+ " "+ format(x)+ " "+ format(y + h)+ " cm\n"+ xobj.getName()+ " Do\n");

  restoreGraphicsStateAccess();

}

Location: PDFContentGenerator.java

Content: 

/** 

 * Same as  {@link #restoreGraphicsState()}, additionally ending the current marked content sequence if any.

 */

protected void restoreGraphicsStateAccess(){

  endTextObject();

  getStream().add("Q\n");

  if (this.inMarkedContentSequence) {

    hongshuai();

    getStream().add("EMC\n");

    this.inMarkedContentSequence=false;

    this.inArtifactMode=false;

  }

  getState().restore();

}

Location: PDFContentGenerator.java

Content: 

/** 

 * Restored the graphics state valid before the previous  {@link #saveGraphicsState()}.

 * @param popState true if the state should also be popped, false if only the PDF commandshould be issued

 */

protected void restoreGraphicsState(boolean popState){

  endTextObject();

  getStream().add("Q\n");

  maybeEndLayer();

  if (popState) {

    getState().restore();

  }

}

Location: PDFContentGenerator.java

Content: 

/** 

 * Save graphics state with optional layer. 

 */

protected void saveGraphicsState(String layer){

  endTextObject();

  getState().save();

  maybeBeginLayer(layer);

  getStream().add("q\n");

}

Location: PDFContentGenerator.java

Content: 

/** 

 * Save graphics state.

 * @param structElemType an element type

 * @param sequenceNum a sequence number

 */

protected void saveGraphicsState(String structElemType,int sequenceNum){

  endTextObject();

  getState().save();

  beginMarkedContentSequence(structElemType,sequenceNum);

  getStream().add("q\n");

}

Location: PDFContentGenerator.java

Content: 

/** 

 * Establishes a new foreground or fill color.

 * @param col the color to apply

 * @param fill true to set the fill color, false for the foreground color

 */

public void setColor(Color col,boolean fill){

  setColor(col,fill,getStream());

}

Location: PDFContentGenerator.java

Content: 

/** 

 * Establishes a new foreground or fill color.

 * @param col the color to apply

 * @param fill true to set the fill color, false for the foreground color

 * @param stream the PDFStream to write the PDF code to

 */

public void setColor(Color col,boolean fill,PDFStream stream){

  assert stream != null;

  StringBuffer sb=new StringBuffer();

  setColor(col,fill,sb);

  stream.add(sb.toString());

}

Location: PDFContentGenerator.java

Content: 

/** 

 * Establishes a new foreground or fill color. In contrast to updateColor this method does not check the PDFState for optimization possibilities.

 * @param col the color to apply

 * @param fill true to set the fill color, false for the foreground color

 * @param pdf StringBuffer to write the PDF code to, if null, the code iswritten to the current stream.

 */

protected void setColor(Color col,boolean fill,StringBuffer pdf){

  if (pdf != null) {

    colorHandler.establishColor(pdf,col,fill);

  }

 else {

    setColor(col,fill,getStream());

  }

}

Location: PDFContentGenerator.java

Content: 

/** 

 * Sets the current character spacing (Tc) value.

 * @param value the Tc value (in unscaled text units)

 */

public void updateCharacterSpacing(float value){

  if (getState().setCharacterSpacing(value)) {

    getStream().add(format(value) + " Tc\n");

  }

}

Location: PDFContentGenerator.java

Content: 

/** 

 * Establishes a new foreground or fill color.

 * @param col the color to apply (null skips this operation)

 * @param fill true to set the fill color, false for the foreground color

 * @param pdf StringBuffer to write the PDF code to, if null, the code iswritten to the current stream.

 */

public void updateColor(Color col,boolean fill,StringBuffer pdf){

  if (col == null) {

    return;

  }

  boolean update=false;

  if (fill) {

    update=getState().setBackColor(col);

  }

 else {

    update=getState().setColor(col);

  }

  if (update) {

    setColor(col,fill,pdf);

  }

}

Location: PDFContentGenerator.java

Content: 

/** 

 * Sets the current line width in points.

 * @param width line width in points

 */

public void updateLineWidth(float width){

  if (getState().setLineWidth(width)) {

    getStream().add(format(width) + " w\n");

  }

}

