Location: PDFParentTreeTestCase.java

Content: 

/** 

 * Gets the number of arrays created for a given number of elements

 * @param elementNumber The number of elements to be added to the nums array

 * @return Returns the number of array objects

 * @throws Exception

 */

private int getArrayNumber(int elementNumber) throws Exception {

  PDFStructElem structElem=mock(PDFStructElem.class);

  for (int structParent=0; structParent < elementNumber; structParent++) {

    parentTree.addToNums(structParent,structElem);

  }

  return parentTree.getKids().length();

}

Location: PDFParentTreeTestCase.java

Content: 

@Before public void initializeStructureTree(){

  parentTree=new PDFParentTree();

  PDFDocument pdfDocument=new PDFDocument("test");

  pdfDocument.makeStructTreeRoot(parentTree);

}

Location: PDFParentTreeTestCase.java

Content: 

/** 

 * Adds items to the nums array to cause and test that multiple splits occur

 * @throws Exception

 */

@Test public void testMultipleSplit() throws Exception {

  assertEquals(getArrayNumber(165),4);

}

Location: PDFParentTreeTestCase.java

Content: 

/** 

 * Adds less structured items than the imposed limit which should result in only one nums array being created.

 * @throws Exception

 */

@Test public void testNoSplit() throws Exception {

  assertEquals(getArrayNumber(45),1);

}

Location: PDFParentTreeTestCase.java

Content: 

/** 

 * Ensures that items added out of order get added to the correct nums array

 * @throws Exception

 */

@Test public void testOutOfOrderSplit() throws Exception {

  PDFStructElem structElem=mock(PDFStructElem.class);

  for (int num=50; num < 53; num++) {

    parentTree.addToNums(num,structElem);

  }

  assertEquals(getArrayNumber(50),2);

  PDFNumberTreeNode treeNode=(PDFNumberTreeNode)parentTree.getKids().get(0);

  for (int num=0; num < 50; num++) {

    assertTrue(treeNode.getNums().map.containsKey(num));

  }

  treeNode=(PDFNumberTreeNode)parentTree.getKids().get(1);

  for (int num=50; num < 53; num++) {

    assertTrue(treeNode.getNums().map.containsKey(num));

  }

}

Location: PDFParentTreeTestCase.java

Content: 

/** 

 * Adds more than the imposed array limit to test that it splits the nums array into two objects.

 * @throws Exception

 */

@Test public void testSingleSplit() throws Exception {

  assertEquals(getArrayNumber(70),2);

}

