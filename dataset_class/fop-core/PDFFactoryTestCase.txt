Location: PDFFactoryTestCase.java

Content: 

@Test public void testGetExternalAction(){

  String germanAe="\u00E4";

  String filename="test";

  String unicodeFilename="t" + germanAe + "st.pdf";

  PDFFileSpec fileSpec=new PDFFileSpec(filename,unicodeFilename);

  PDFDocument doc=new PDFDocument("");

  doc.registerObject(fileSpec);

  PDFNames names=doc.getRoot().getNames();

  if (names == null) {

    names=doc.getFactory().makeNames();

    doc.getRoot().setNames(names);

  }

  PDFEmbeddedFiles embeddedFiles=names.getEmbeddedFiles();

  if (embeddedFiles == null) {

    embeddedFiles=new PDFEmbeddedFiles();

    doc.assignObjectNumber(embeddedFiles);

    doc.addTrailerObject(embeddedFiles);

    names.setEmbeddedFiles(embeddedFiles);

  }

  PDFArray nameArray=embeddedFiles.getNames();

  if (nameArray == null) {

    nameArray=new PDFArray();

    embeddedFiles.setNames(nameArray);

  }

  nameArray.add(fileSpec.getFilename());

  nameArray.add(new PDFReference(fileSpec));

  PDFFactory pdfFactory=new PDFFactory(doc);

  String target="embedded-file:" + unicodeFilename;

  PDFJavaScriptLaunchAction pdfAction=(PDFJavaScriptLaunchAction)pdfFactory.getExternalAction(target,false);

  String expectedString="<<\n/S /JavaScript\n/JS (this.exportDataObject\\({cName:\"" + fileSpec.getFilename() + "\", nLaunch:2}\\);)\n>>";

  assertEquals(expectedString,pdfAction.toPDFString());

}

Location: PDFFactoryTestCase.java

Content: 

@Test public void testMakeFont() throws IOException {

  PDFDocument doc=new PDFDocument("");

  PDFFactory pdfFactory=new PDFFactory(doc);

  SingleByteFont sb=new TestSingleByteFont(null);

  sb.setFontName("test");

  sb.setWidth(0,0);

  sb.setFlags(0);

  sb.setEmbedResourceName("");

  sb.mapChar('a');

  sb.addUnencodedCharacter(new NamedCharacter("xyz",String.valueOf((char)0x2202)),0,new Rectangle());

  sb.mapChar((char)0x2202);

  sb.setEncoding(new CodePointMapping("FOPPDFEncoding",new int[0]));

  PDFFont font=pdfFactory.makeFont("a","a","WinAnsiEncoding",sb,sb);

  ByteArrayOutputStream bos=new ByteArrayOutputStream();

  font.output(bos);

  assertTrue(bos.toString().contains("/BaseFont /EAAAAA+a"));

  assertEquals(sb.getAdditionalEncodingCount(),1);

}

Location: PDFFactoryTestCase.java

Content: 

@Test public void testMakeOTFFont() throws IOException {

  InternalResourceResolver rr=ResourceResolverFactory.createDefaultInternalResourceResolver(new File(".").toURI());

  PDFDocument doc=new PDFDocument("");

  PDFFactory pdfFactory=new PDFFactory(doc);

  URI uri=new File("test/resources/fonts/otf/SourceSansProBold.otf").toURI();

  CustomFont sb=OFFontLoader.loadFont(new FontUris(uri,null),null,true,EmbeddingMode.SUBSET,null,false,false,rr,false,false);

  for (char c=0; c < 512; c++) {

    sb.mapChar(c);

  }

  pdfFactory.makeFont("a","a","WinAnsiEncoding",sb,sb);

  ByteArrayOutputStream bos=new ByteArrayOutputStream();

  doc.outputTrailer(bos);

  assertEquals(pdfFactory.getDocument().getFontMap().size(),2);

  PDFFont pdfFont=pdfFactory.getDocument().getFontMap().get("a_1");

  PDFEncoding enc=(PDFEncoding)pdfFont.get("Encoding");

  PDFArray diff=(PDFArray)enc.get("Differences");

  assertEquals(diff.length(),80);

  assertEquals(diff.get(1).toString(),"/nacute");

  pdfFont=pdfFactory.getDocument().getFontMap().get("a");

  enc=(PDFEncoding)pdfFont.get("Encoding");

  diff=(PDFArray)enc.get("Differences");

  assertEquals(diff.length(),257);

  assertEquals(diff.get(2).toString(),"/space");

  assertTrue(bos.toString().contains("/Subtype /Type1\n"));

  assertTrue(bos.toString().contains("/Subtype /Type1C"));

}

Location: PDFFactoryTestCase.java

Content: 

@Test public void testMakeTrueTypeFont() throws IOException {

  PDFDocument doc=new PDFDocument("");

  PDFFactory pdfFactory=new PDFFactory(doc);

  SingleByteFont sb=new TestSingleByteFont(null);

  sb.setFontType(FontType.TRUETYPE);

  sb.setFontName("test");

  sb.setWidth(0,0);

  sb.setFlags(0);

  sb.setEncoding(new CodePointMapping("FOPPDFEncoding",new int[0]));

  String enc="MacRomanEncoding";

  PDFFont font=pdfFactory.makeFont("a","a",enc,sb,sb);

  font.output(new ByteArrayOutputStream());

  assertEquals(((PDFName)font.entries.get("Encoding")).getName(),enc);

}

Location: PDFFactoryTestCase.java

Content: 

/** 

 * This tests that when a font is subset embedded in a PDF, the font name is prefixed with a pseudo-random tag as per the PDF spec.

 */

@Test public void testSubsetFontNamePrefix(){

class MockedFont extends MultiByteFont {

    public MockedFont(    InternalResourceResolver resolver){

      super(resolver,EmbeddingMode.AUTO);

    }

    @Override public int[] getWidths(){

      return new int[]{0};

    }

    @Override public CIDSet getCIDSet(){

      return new CIDSubset(this);

    }

  }

  PDFDocument doc=new PDFDocument("Test");

  PDFFactory pdfFactory=new PDFFactory(doc);

  URI thisURI=new File(".").toURI();

  ResourceResolver resolver=ResourceResolverFactory.createDefaultResourceResolver();

  InternalResourceResolver resourceResolver=ResourceResolverFactory.createInternalResourceResolver(thisURI,resolver);

  MockedFont font=new MockedFont(resourceResolver);

  PDFFont pdfDejaVu=pdfFactory.makeFont("DejaVu","DejaVu","TTF",font,font);

  assertEquals("/EAAAAA+DejaVu",pdfDejaVu.getBaseFont().toString());

  PDFFont pdfArial=pdfFactory.makeFont("Arial","Arial","TTF",font,font);

  assertEquals("/EAAAAB+Arial",pdfArial.getBaseFont().toString());

}

