Location: FOPGVTFont.java

Content: 

public int canDisplayUpTo(CharacterIterator iter,int start,int limit){

  for (char c=iter.setIndex(start); iter.getIndex() < limit; c=iter.next()) {

    if (!canDisplay(c)) {

      return iter.getIndex();

    }

  }

  return -1;

}

Location: FOPGVTFont.java

Content: 

public int canDisplayUpTo(char[] text,int start,int limit){

  for (int i=start; i < limit; i++) {

    if (!canDisplay(text[i])) {

      return i;

    }

  }

  return -1;

}

Location: FOPGVTFont.java

Content: 

public int canDisplayUpTo(String str){

  for (int i=0; i < str.length(); i++) {

    if (!canDisplay(str.charAt(i))) {

      return i;

    }

  }

  return -1;

}

Location: FOPGVTFont.java

Content: 

public boolean canDisplay(char c){

  return font.hasChar(c);

}

Location: FOPGVTFont.java

Content: 

public GVTGlyphVector createGlyphVector(FontRenderContext frc,char[] chars){

  return createGlyphVector(frc,new String(chars));

}

Location: FOPGVTFont.java

Content: 

public GVTGlyphVector createGlyphVector(FontRenderContext frc,CharacterIterator ci){

  if (!font.performsSubstitution() && !font.performsPositioning()) {

    return new FOPGVTGlyphVector(this,ci,frc);

  }

 else {

    return new ComplexGlyphVector(this,ci,frc);

  }

}

Location: FOPGVTFont.java

Content: 

public GVTGlyphVector createGlyphVector(FontRenderContext frc,int[] glyphCodes,CharacterIterator ci){

  throw new UnsupportedOperationException("Not implemented");

}

Location: FOPGVTFont.java

Content: 

public GVTGlyphVector createGlyphVector(FontRenderContext frc,String text){

  StringCharacterIterator sci=new StringCharacterIterator(text);

  return createGlyphVector(frc,sci);

}

Location: FOPGVTFont.java

Content: 

public GVTGlyphVector createGlyphVector(FontRenderContext frc,String text,String script,String language){

  if ((script != null) || (language != null)) {

    AttributedString as=new AttributedString(text);

    if (script != null) {

      as.addAttribute(GVTAttributedCharacterIterator.TextAttribute.SCRIPT,script);

    }

    if (language != null) {

      as.addAttribute(GVTAttributedCharacterIterator.TextAttribute.LANGUAGE,language);

    }

    return createGlyphVector(frc,as.getIterator());

  }

 else {

    return createGlyphVector(frc,text);

  }

}

Location: FOPGVTFont.java

Content: 

public FOPGVTFont deriveFont(float size){

  throw new UnsupportedOperationException("Not implemented");

}

Location: FOPGVTFont.java

Content: 

public FOPGVTFont(Font font,GVTFontFamily fontFamily){

  this.font=font;

  this.fontFamily=fontFamily;

}

Location: FOPGVTFont.java

Content: 

public float getHKern(int glyphCode1,int glyphCode2){

  return 0;

}

Location: FOPGVTFont.java

Content: 

public GVTLineMetrics getLineMetrics(CharacterIterator ci,int beginIndex,int limit,FontRenderContext frc){

  return getLineMetrics(limit - beginIndex);

}

Location: FOPGVTFont.java

Content: 

public GVTLineMetrics getLineMetrics(char[] chars,int beginIndex,int limit,FontRenderContext frc){

  return getLineMetrics(limit - beginIndex);

}

Location: FOPGVTFont.java

Content: 

GVTLineMetrics getLineMetrics(int numChars){

  numChars=numChars < 0 ? 0 : numChars;

  FontMetrics metrics=font.getFontMetrics();

  int size=font.getFontSize();

  return new GVTLineMetrics(metrics.getCapHeight(size) / 1000000f,java.awt.Font.ROMAN_BASELINE,null,-metrics.getDescender(size) / 1000000f,0,0,numChars,-metrics.getStrikeoutPosition(size) / 1000000f,metrics.getStrikeoutThickness(size) / 1000000f,-metrics.getUnderlinePosition(size) / 1000000f,metrics.getUnderlineThickness(size) / 1000000f,-metrics.getCapHeight(size) / 1000000f,metrics.getUnderlineThickness(size) / 1000000f);

}

Location: FOPGVTFont.java

Content: 

public GVTLineMetrics getLineMetrics(String str,FontRenderContext frc){

  return getLineMetrics(str.length());

}

Location: FOPGVTFont.java

Content: 

public GVTLineMetrics getLineMetrics(String str,int beginIndex,int limit,FontRenderContext frc){

  return getLineMetrics(limit - beginIndex);

}

Location: FOPGVTFont.java

Content: 

public float getSize(){

  return font.getFontSize() / 1000f;

}

Location: FOPGVTFont.java

Content: 

public float getVKern(int glyphCode1,int glyphCode2){

  return 0;

}

