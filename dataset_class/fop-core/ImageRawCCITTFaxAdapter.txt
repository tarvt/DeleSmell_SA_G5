Location: ImageRawCCITTFaxAdapter.java

Content: 

/** 

 * {@inheritDoc} 

 */

public int getBitsPerComponent(){

  return 1;

}

Location: ImageRawCCITTFaxAdapter.java

Content: 

/** 

 * {@inheritDoc} 

 */

public String getFilterHint(){

  return PDFFilterList.TIFF_FILTER;

}

Location: ImageRawCCITTFaxAdapter.java

Content: 

/** 

 * Returns the  {@link ImageRawCCITTFax} instance for this adapter.

 * @return the image instance

 */

public ImageRawCCITTFax getImage(){

  return ((ImageRawCCITTFax)this.image);

}

Location: ImageRawCCITTFaxAdapter.java

Content: 

/** 

 * {@inheritDoc} 

 */

public PDFFilter getPDFFilter(){

  return pdfFilter;

}

Location: ImageRawCCITTFaxAdapter.java

Content: 

/** 

 * Creates a new PDFImage from an Image instance.

 * @param image the CCITT encoded image

 * @param key XObject key

 */

public ImageRawCCITTFaxAdapter(ImageRawCCITTFax image,String key){

  super(image,key);

}

Location: ImageRawCCITTFaxAdapter.java

Content: 

/** 

 * {@inheritDoc} 

 */

public void outputContents(OutputStream out) throws IOException {

  getImage().writeTo(out);

}

Location: ImageRawCCITTFaxAdapter.java

Content: 

/** 

 * {@inheritDoc} 

 */

public void setup(PDFDocument doc){

  pdfFilter=new CCFFilter();

  pdfFilter.setApplied(true);

  PDFDictionary dict=new PDFDictionary();

  dict.put("Columns",this.image.getSize().getWidthPx());

  int compression=getImage().getCompression();

switch (compression) {

case TIFFImage.COMP_FAX_G3_1D:

    dict.put("K",0);

  break;

case TIFFImage.COMP_FAX_G3_2D:

dict.put("K",1);

break;

case TIFFImage.COMP_FAX_G4_2D:

dict.put("K",-1);

break;

default :

throw new IllegalStateException("Invalid compression scheme: " + compression);

}

((CCFFilter)pdfFilter).setDecodeParms(dict);

super.setup(doc);

}

