Location: AbstractRetrieveMarker.java

Content: 

/** 

 * Create a new AbstractRetrieveMarker instance that is a child of the given  {@link FONode}

 * @param parent    the parent {@link FONode}

 */

public AbstractRetrieveMarker(FONode parent){

  super(parent);

}

Location: AbstractRetrieveMarker.java

Content: 

/** 

 * Clone the subtree of the given marker

 * @param marker the marker that is to be cloned

 */

public void bindMarker(Marker marker){

  if (firstChild != null) {

    currentTextNode=null;

    firstChild=null;

  }

  if (marker.getChildNodes() != null) {

    try {

      restoreFOEventHandlerState();

      cloneFromMarker(marker);

    }

 catch (    FOPException exc) {

      getFOValidationEventProducer().markerCloningFailed(this,marker.getMarkerClassName(),exc,getLocator());

    }

  }

 else   if (log.isDebugEnabled()) {

    log.debug("Empty marker retrieved...");

  }

}

Location: AbstractRetrieveMarker.java

Content: 

public void changePositionTo(int position){

  this.position=position;

}

Location: AbstractRetrieveMarker.java

Content: 

private void cloneFromMarker(Marker marker) throws FOPException {

  cloneSubtree(marker.getChildNodes(),this,marker,propertyList);

  handleWhiteSpaceFor(this,null);

}

Location: AbstractRetrieveMarker.java

Content: 

private void cloneSingleNode(FONode child,FONode newParent,Marker marker,PropertyList parentPropertyList) throws FOPException {

  if (child != null) {

    FONode newChild=child.clone(newParent,true);

    if (child instanceof FObj) {

      Marker.MarkerPropertyList pList;

      PropertyList newPropertyList=createPropertyListFor((FObj)newChild,parentPropertyList);

      pList=marker.getPropertyListFor(child);

      newChild.processNode(child.getLocalName(),getLocator(),pList,newPropertyList);

      addChildTo(newChild,newParent);

      newChild.startOfNode();

switch (newChild.getNameId()) {

case FO_TABLE:

        Table t=(Table)child;

      cloneSubtree(t.getColumns().iterator(),newChild,marker,newPropertyList);

    cloneSingleNode(t.getTableHeader(),newChild,marker,newPropertyList);

  cloneSingleNode(t.getTableFooter(),newChild,marker,newPropertyList);

cloneSubtree(child.getChildNodes(),newChild,marker,newPropertyList);

break;

case FO_LIST_ITEM:

ListItem li=(ListItem)child;

cloneSingleNode(li.getLabel(),newChild,marker,newPropertyList);

cloneSingleNode(li.getBody(),newChild,marker,newPropertyList);

break;

default :

cloneSubtree(child.getChildNodes(),newChild,marker,newPropertyList);

break;

}

newChild.endOfNode();

}

 else if (child instanceof FOText) {

FOText ft=(FOText)newChild;

ft.bind(parentPropertyList);

addChildTo(newChild,newParent);

if (newParent instanceof AbstractRetrieveMarker) {

newChild.endOfNode();

}

}

 else if (child instanceof XMLObj) {

addChildTo(newChild,newParent);

}

}

}

Location: AbstractRetrieveMarker.java

Content: 

/** 

 * Clone the FO nodes in the parent iterator, attach the new nodes to the new parent, and map the new nodes to the existing property lists. FOText nodes are also in the new map, with a null value. Clone the subtree by a recursive call to this method.

 * @param parentIter the iterator over the children of the old parent

 * @param newParent the new parent for the cloned nodes

 * @param marker the marker that contains the old property list mapping

 * @param parentPropertyList the parent PropertyList

 * @throws FOPException in case there was an error

 */

private void cloneSubtree(Iterator parentIter,FONode newParent,Marker marker,PropertyList parentPropertyList) throws FOPException {

  if (parentIter != null) {

    FONode child;

    while (parentIter.hasNext()) {

      child=(FONode)parentIter.next();

      cloneSingleNode(child,newParent,marker,parentPropertyList);

    }

  }

}

Location: AbstractRetrieveMarker.java

Content: 

private PropertyList createPropertyListFor(FObj fo,PropertyList parent){

  return getBuilderContext().getPropertyListMaker().make(fo,parent);

}

Location: AbstractRetrieveMarker.java

Content: 

public int getBoundary(){

  return this.boundary;

}

Location: AbstractRetrieveMarker.java

Content: 

public String getBoundaryLabel(){

  return this.boundaryLabel;

}

Location: AbstractRetrieveMarker.java

Content: 

public String getPositionLabel(){

  return this.positionLabel;

}

Location: AbstractRetrieveMarker.java

Content: 

/** 

 * Return the value for the <code>retrieve-class-name</code> property

 * @return the value for retrieve-class-name

 */

public String getRetrieveClassName(){

  return this.retrieveClassName;

}

Location: AbstractRetrieveMarker.java

Content: 

protected void setBoundaryLabel(String label){

  this.boundaryLabel=label;

}

Location: AbstractRetrieveMarker.java

Content: 

protected void setBoundary(int boundary){

  this.boundary=boundary;

}

Location: AbstractRetrieveMarker.java

Content: 

protected void setPositionLabel(String label){

  this.positionLabel=label;

}

Location: AbstractRetrieveMarker.java

Content: 

protected void setPosition(int position){

  this.position=position;

}

