Location: SVGElement.java

Content: 

/** 

 * Get the dimensions of this XML document.

 * @param view the viewport dimensions

 * @return the dimensions of this SVG document

 */

public Point2D getDimension(final Point2D view){

  Element svgRoot=element;

  try {

    URI baseUri=getUserAgent().getResourceResolver().getBaseURI();

    if (baseUri != null) {

      SVGOMDocument svgdoc=(SVGOMDocument)doc;

      svgdoc.setURLObject(baseUri.toURL());

    }

  }

 catch (  Exception e) {

    log.error("Could not set base URL for svg",e);

  }

  final float ptmm=getUserAgent().getSourcePixelUnitToMillimeter();

  SVGContext dc=new SVGContext(){

    public float getPixelToMM(){

      return ptmm;

    }

    public float getPixelUnitToMillimeter(){

      return ptmm;

    }

    public Rectangle2D getBBox(){

      return new Rectangle2D.Double(0,0,view.getX(),view.getY());

    }

    /** 

 * Returns the transform from the global transform space to pixels.

 */

    public AffineTransform getScreenTransform(){

      throw new UnsupportedOperationException("NYI");

    }

    /** 

 * Sets the transform to be used from the global transform space to pixels.

 */

    public void setScreenTransform(    AffineTransform at){

      throw new UnsupportedOperationException("NYI");

    }

    public AffineTransform getCTM(){

      return new AffineTransform();

    }

    public AffineTransform getGlobalTransform(){

      return new AffineTransform();

    }

    public float getViewportWidth(){

      return (float)view.getX();

    }

    public float getViewportHeight(){

      return (float)view.getY();

    }

    public float getFontSize(){

      return 12;

    }

  }

;

  SVGOMElement e=(SVGOMElement)svgRoot;

  e.setSVGContext(dc);

  e.setAttributeNS(XMLSupport.XMLNS_NAMESPACE_URI,"xmlns",SVGDOMImplementation.SVG_NAMESPACE_URI);

  int fontSize=12;

  Point2D p2d=getSize(fontSize,svgRoot,getUserAgent().getSourcePixelUnitToMillimeter());

  e.setSVGContext(null);

  double pixelToPoint=72d / getUserAgent().getSourceResolution();

  return new Point2D.Double(p2d.getX() * pixelToPoint,p2d.getY() * pixelToPoint);

}

Location: SVGElement.java

Content: 

/** 

 * Get the size of the SVG root element.

 * @param size the font size

 * @param svgRoot the svg root element

 * @param ptmm the pixel to millimeter conversion factor

 * @return the size of the SVG document

 */

public static Point2D getSize(int size,Element svgRoot,float ptmm){

  String str;

  UnitProcessor.Context ctx;

  ctx=new PDFUnitContext(size,svgRoot,ptmm);

  str=svgRoot.getAttributeNS(null,SVGConstants.SVG_WIDTH_ATTRIBUTE);

  if (str.length() == 0) {

    str="100%";

  }

  float width=UnitProcessor.svgHorizontalLengthToUserSpace(str,SVGConstants.SVG_WIDTH_ATTRIBUTE,ctx);

  str=svgRoot.getAttributeNS(null,SVGConstants.SVG_HEIGHT_ATTRIBUTE);

  if (str.length() == 0) {

    str="100%";

  }

  float height=UnitProcessor.svgVerticalLengthToUserSpace(str,SVGConstants.SVG_HEIGHT_ATTRIBUTE,ctx);

  return new Point2D.Float(width,height);

}

Location: SVGElement.java

Content: 

/** 

 * Constructs an SVG object

 * @param parent the parent formatting object

 */

public SVGElement(FONode parent){

  super(parent);

}

