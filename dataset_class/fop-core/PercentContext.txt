Location: PercentContext.java

Content: 

/** 

 * Searches for the parent object of fobj.

 */

private Integer findParent(FONode fobj){

  if (fobj.getRoot() != fobj) {

    if (lengthMap.containsKey(fobj)) {

      return Integer.valueOf(lengthMap.get(fobj).toString());

    }

 else {

      return findParent(fobj.getParent());

    }

  }

 else {

    log.error("Base Value for element " + fobj.getName() + " not found");

    return -1;

  }

}

Location: PercentContext.java

Content: 

/** 

 * Returns the available width for a specific FObj

 * @param lengthBase lengthBase not used

 * @param fobj the FObj

 * @return Available Width

 */

public int getBaseLength(int lengthBase,FObj fobj){

  if (fobj == null) {

    return 0;

  }

  if ((fobj instanceof TableColumn) && (fobj.getParent() instanceof FObj)) {

    fobj=(FObj)fobj.getParent();

  }

switch (lengthBase) {

case LengthBase.CONTAINING_BLOCK_WIDTH:

case LengthBase.PARENT_AREA_WIDTH:

case LengthBase.CONTAINING_REFAREA_WIDTH:

    Object width=lengthMap.get(fobj);

  if (width != null) {

    return Integer.parseInt(width.toString());

  }

 else   if (fobj.getParent() != null) {

    width=lengthMap.get(fobj.getParent());

    if (width != null) {

      return Integer.parseInt(width.toString());

    }

  }

return 0;

case LengthBase.TABLE_UNITS:

Object unit=tableUnitMap.get(fobj);

if (unit != null) {

return (Integer)unit;

}

 else if (fobj.getParent() != null) {

unit=tableUnitMap.get(fobj.getParent());

if (unit != null) {

return (Integer)unit;

}

}

return 0;

default :

log.error(new Exception("Unsupported base type for LengthBase:" + lengthBase));

return 0;

}

}

Location: PercentContext.java

Content: 

/** 

 * Elements willing to use this context have to register themselves by calling this function.

 * @param fobj the FObj

 */

public void setDimension(FObj fobj){

  if (baseWidthSet) {

    Integer width=findParent(fobj.getParent());

    if (width != -1) {

      lengthMap.put(fobj,width);

    }

  }

}

Location: PercentContext.java

Content: 

/** 

 * Elements having a width property can call this function if their width is calculated in RTFHandler

 * @param fobj the FObj

 * @param width width of the FObj (in millipoints)

 */

public void setDimension(FObj fobj,int width){

  if (fobj instanceof PageSequence) {

    baseWidthSet=true;

  }

  lengthMap.put(fobj,width);

}

Location: PercentContext.java

Content: 

/** 

 * Records the calculated table unit for a given table.

 * @param table the table for which the table unit is set

 * @param tableUnit the table unit value (in millipoints)

 */

public void setTableUnit(Table table,int tableUnit){

  tableUnitMap.put(table,tableUnit);

}

