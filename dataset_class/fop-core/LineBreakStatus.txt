Location: LineBreakStatus.java

Content: 

/** 

 * Resets the class to the same state as if new LineBreakStatus() had just been called.

 */

public LineBreakStatus(){

  reset();

}

Location: LineBreakStatus.java

Content: 

/** 

 * Check whether a line break may happen according to the rules described in the <a href="http://unicode.org/reports/tr14/#Algorithm">Unicode Line Breaking Algorithm</a>. The function returns the line breaking status of the point <em>before</em> the given character. The algorithm is the table-driven algorithm, as described in <a href="http://unicode.org/reports/tr14/#PairBasedImplementation"> Unicode Technical Report #14</a>. The pair table is taken from  {@link LineBreakUtils}. TODO: Better handling for AI, SA, SG and XX line break classes.

 * @param c the character to check

 * @return the break action to be takenone of:  {@link #DIRECT_BREAK}, {@link #INDIRECT_BREAK}, {@link #COMBINING_INDIRECT_BREAK}, {@link #COMBINING_PROHIBITED_BREAK}, {@link #PROHIBITED_BREAK}, {@link #EXPLICIT_BREAK}

 */

public byte nextChar(char c){

  byte currentClass=LineBreakUtils.getLineBreakProperty(c);

switch (currentClass) {

case 0:

case LineBreakUtils.LINE_BREAK_PROPERTY_AI:

case LineBreakUtils.LINE_BREAK_PROPERTY_SG:

case LineBreakUtils.LINE_BREAK_PROPERTY_XX:

    currentClass=LineBreakUtils.LINE_BREAK_PROPERTY_AL;

  break;

case LineBreakUtils.LINE_BREAK_PROPERTY_SA:

switch (Character.getType(c)) {

case Character.COMBINING_SPACING_MARK:

case Character.NON_SPACING_MARK:

  currentClass=LineBreakUtils.LINE_BREAK_PROPERTY_CM;

break;

default :

currentClass=LineBreakUtils.LINE_BREAK_PROPERTY_AL;

}

default :

}

switch (leftClass) {

case -1:

leftClass=currentClass;

if (leftClass == LineBreakUtils.LINE_BREAK_PROPERTY_CM) {

leftClass=LineBreakUtils.LINE_BREAK_PROPERTY_AL;

}

return PROHIBITED_BREAK;

case LineBreakUtils.LINE_BREAK_PROPERTY_BK:

case LineBreakUtils.LINE_BREAK_PROPERTY_LF:

case LineBreakUtils.LINE_BREAK_PROPERTY_NL:

reset();

leftClass=currentClass;

return EXPLICIT_BREAK;

case LineBreakUtils.LINE_BREAK_PROPERTY_CR:

if (currentClass != LineBreakUtils.LINE_BREAK_PROPERTY_LF) {

reset();

leftClass=currentClass;

return EXPLICIT_BREAK;

}

default :

}

switch (currentClass) {

case LineBreakUtils.LINE_BREAK_PROPERTY_BK:

case LineBreakUtils.LINE_BREAK_PROPERTY_LF:

case LineBreakUtils.LINE_BREAK_PROPERTY_NL:

case LineBreakUtils.LINE_BREAK_PROPERTY_CR:

leftClass=currentClass;

return PROHIBITED_BREAK;

case LineBreakUtils.LINE_BREAK_PROPERTY_SP:

hadSpace=true;

return PROHIBITED_BREAK;

default :

}

boolean savedHadSpace=hadSpace;

hadSpace=false;

byte breakAction=LineBreakUtils.getLineBreakPairProperty(leftClass,currentClass);

switch (breakAction) {

case PROHIBITED_BREAK:

case DIRECT_BREAK:

leftClass=currentClass;

return breakAction;

case INDIRECT_BREAK:

leftClass=currentClass;

if (savedHadSpace) {

return INDIRECT_BREAK;

}

 else {

return PROHIBITED_BREAK;

}

case COMBINING_INDIRECT_BREAK:

if (savedHadSpace) {

leftClass=currentClass;

return COMBINING_INDIRECT_BREAK;

}

 else {

return PROHIBITED_BREAK;

}

case COMBINING_PROHIBITED_BREAK:

if (savedHadSpace) {

leftClass=currentClass;

}

return COMBINING_PROHIBITED_BREAK;

default :

assert false;

return breakAction;

}

}

