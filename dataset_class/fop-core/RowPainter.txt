Location: RowPainter.java

Content: 

private void addAreaForEmptyGridUnit(EmptyGridUnit gu,int rowIndex,int colIndex,int actualRowHeight,int borderBeforeWhich,int borderAfterWhich,boolean lastOnPage){

  BorderInfo borderBefore=gu.getBorderBefore(borderBeforeWhich);

  BorderInfo borderAfter=gu.getBorderAfter(borderAfterWhich);

  BorderInfo borderStart=gu.getBorderStart();

  BorderInfo borderEnd=gu.getBorderEnd();

  if (borderBefore.getRetainedWidth() == 0 && borderAfter.getRetainedWidth() == 0 && borderStart.getRetainedWidth() == 0 && borderEnd.getRetainedWidth() == 0) {

    return;

  }

  TableLayoutManager tableLM=tclm.getTableLM();

  Table table=tableLM.getTable();

  TableColumn col=tclm.getColumns().getColumn(colIndex + 1);

  boolean firstOnPage=(rowIndex == firstRowOnPageIndex);

  boolean inFirstColumn=(colIndex == 0);

  boolean inLastColumn=(colIndex == table.getNumberOfColumns() - 1);

  int ipd=col.getColumnWidth().getValue(tableLM);

  ipd-=(borderStart.getRetainedWidth() + borderEnd.getRetainedWidth()) / 2;

  int bpd=actualRowHeight;

  bpd-=(borderBefore.getRetainedWidth() + borderAfter.getRetainedWidth()) / 2;

  Block block=new Block();

  block.setChangeBarList(tclm.getTableLM().getFObj().getChangeBarList());

  block.setPositioning(Block.ABSOLUTE);

  block.addTrait(Trait.IS_REFERENCE_AREA,Boolean.TRUE);

  block.setIPD(ipd);

  block.setBPD(bpd);

  block.setXOffset(tclm.getXOffsetOfGridUnit(colIndex,1) + (borderStart.getRetainedWidth() / 2));

  block.setYOffset(getRowOffset(rowIndex) - (borderBefore.getRetainedWidth() / 2));

  boolean[] outer=new boolean[]{firstOnPage,lastOnPage,inFirstColumn,inLastColumn};

  TraitSetter.addCollapsingBorders(block,borderBefore,borderAfter,borderStart,borderEnd,outer);

  tableLM.addChildArea(block);

}

Location: RowPainter.java

Content: 

/** 

 * Creates the areas corresponding to the last row. That is, an area with background for the row, plus areas for all the cells that finish on the row (not spanning over further rows).

 * @param lastInPart true if the row is the last from its table part to be displayedon the current page. In which case all the cells must be flushed even if they aren't finished, plus the proper collapsed borders must be selected (trailing instead of normal, or rest if the cell is unfinished)

 * @param lastOnPage true if the row is the very last row of the table that will bedisplayed on the current page. In which case collapsed after borders must be drawn in the outer mode

 */

private void addAreasAndFlushRow(boolean lastInPart,boolean lastOnPage){

  if (log.isDebugEnabled()) {

    log.debug("Remembering yoffset for row " + currentRow.getIndex() + ": "+ currentRowOffset);

  }

  recordRowOffset(currentRow.getIndex(),currentRowOffset);

  boolean firstCellPart=true;

  boolean lastCellPart=true;

  int actualRowHeight=0;

  for (int i=0; i < colCount; i++) {

    GridUnit currentGU=currentRow.getGridUnit(i);

    if (currentGU.isEmpty()) {

      continue;

    }

    if (currentGU.getColSpanIndex() == 0 && (lastInPart || currentGU.isLastGridUnitRowSpan()) && firstCellParts[i] != null) {

      int cellHeight=cellHeights[i];

      cellHeight+=lastCellParts[i].getConditionalAfterContentLength();

      cellHeight+=lastCellParts[i].getBorderPaddingAfter(lastInPart);

      int cellOffset=getRowOffset(Math.max(firstCellParts[i].pgu.getRowIndex(),firstRowIndex));

      actualRowHeight=Math.max(actualRowHeight,cellOffset + cellHeight - currentRowOffset);

    }

    if (firstCellParts[i] != null && !firstCellParts[i].isFirstPart()) {

      firstCellPart=false;

    }

    if (lastCellParts[i] != null && !lastCellParts[i].isLastPart()) {

      lastCellPart=false;

    }

  }

  for (int i=0; i < colCount; i++) {

    GridUnit currentGU=currentRow.getGridUnit(i);

    if (currentGU.isEmpty() && !tclm.isSeparateBorderModel()) {

      int borderBeforeWhich;

      if (firstCellPart) {

        if (firstCellOnPage[i]) {

          borderBeforeWhich=ConditionalBorder.LEADING_TRAILING;

        }

 else {

          borderBeforeWhich=ConditionalBorder.NORMAL;

        }

      }

 else {

        borderBeforeWhich=ConditionalBorder.REST;

      }

      int borderAfterWhich;

      if (lastCellPart) {

        if (lastInPart) {

          borderAfterWhich=ConditionalBorder.LEADING_TRAILING;

        }

 else {

          borderAfterWhich=ConditionalBorder.NORMAL;

        }

      }

 else {

        borderAfterWhich=ConditionalBorder.REST;

      }

      assert (currentGU instanceof EmptyGridUnit);

      addAreaForEmptyGridUnit((EmptyGridUnit)currentGU,currentRow.getIndex(),i,actualRowHeight,borderBeforeWhich,borderAfterWhich,lastOnPage);

      firstCellOnPage[i]=false;

    }

 else     if (currentGU.getColSpanIndex() == 0 && (lastInPart || currentGU.isLastGridUnitRowSpan()) && firstCellParts[i] != null) {

      assert firstCellParts[i].pgu == currentGU.getPrimary();

      int borderBeforeWhich;

      if (firstCellParts[i].isFirstPart()) {

        if (firstCellOnPage[i]) {

          borderBeforeWhich=ConditionalBorder.LEADING_TRAILING;

        }

 else {

          borderBeforeWhich=ConditionalBorder.NORMAL;

        }

      }

 else {

        assert firstCellOnPage[i];

        borderBeforeWhich=ConditionalBorder.REST;

      }

      int borderAfterWhich;

      if (lastCellParts[i].isLastPart()) {

        if (lastInPart) {

          borderAfterWhich=ConditionalBorder.LEADING_TRAILING;

        }

 else {

          borderAfterWhich=ConditionalBorder.NORMAL;

        }

      }

 else {

        borderAfterWhich=ConditionalBorder.REST;

      }

      lastCellParts[i].pgu.getCellLM().setLastTrait(lastCellParts[i].isLastPart());

      addAreasForCell(firstCellParts[i].pgu,firstCellParts[i].start,lastCellParts[i].end,actualRowHeight,borderBeforeWhich,borderAfterWhich,lastOnPage);

      firstCellParts[i]=null;

      Arrays.fill(firstCellOnPage,i,i + currentGU.getCell().getNumberColumnsSpanned(),false);

    }

  }

  currentRowOffset+=actualRowHeight;

  if (lastInPart) {

    currentRow=null;

    firstRowIndex=-1;

    rowOffsets.clear();

    firstRowOnPageIndex=Integer.MAX_VALUE;

  }

}

Location: RowPainter.java

Content: 

private void addAreasForCell(PrimaryGridUnit pgu,int startPos,int endPos,int rowHeight,int borderBeforeWhich,int borderAfterWhich,boolean lastOnPage){

  int currentRowIndex=currentRow.getIndex();

  int startRowIndex;

  int firstRowHeight;

  if (pgu.getRowIndex() >= firstRowIndex) {

    startRowIndex=pgu.getRowIndex();

    if (startRowIndex < currentRowIndex) {

      firstRowHeight=getRowOffset(startRowIndex + 1) - getRowOffset(startRowIndex);

    }

 else {

      firstRowHeight=rowHeight;

    }

  }

 else {

    startRowIndex=firstRowIndex;

    firstRowHeight=0;

  }

  int[] spannedGridRowHeights=null;

  if (!tclm.getTableLM().getTable().isSeparateBorderModel() && pgu.hasSpanning()) {

    spannedGridRowHeights=new int[currentRowIndex - startRowIndex + 1];

    int prevOffset=getRowOffset(startRowIndex);

    for (int i=0; i < currentRowIndex - startRowIndex; i++) {

      int newOffset=getRowOffset(startRowIndex + i + 1);

      spannedGridRowHeights[i]=newOffset - prevOffset;

      prevOffset=newOffset;

    }

    spannedGridRowHeights[currentRowIndex - startRowIndex]=rowHeight;

  }

  int cellOffset=getRowOffset(startRowIndex);

  int cellTotalHeight=rowHeight + currentRowOffset - cellOffset;

  if (log.isDebugEnabled()) {

    log.debug("Creating area for cell:");

    log.debug("  start row: " + pgu.getRowIndex() + " "+ currentRowOffset+ " "+ cellOffset);

    log.debug(" rowHeight=" + rowHeight + " cellTotalHeight="+ cellTotalHeight);

  }

  TableCellLayoutManager cellLM=pgu.getCellLM();

  cellLM.setXOffset(tclm.getXOffsetOfGridUnit(pgu));

  cellLM.setYOffset(cellOffset);

  cellLM.setContentHeight(computeContentLength(pgu,startPos,endPos));

  cellLM.setTotalHeight(cellTotalHeight);

  int prevBreak=ElementListUtils.determinePreviousBreak(pgu.getElements(),startPos);

  if (endPos >= 0) {

    SpaceResolver.performConditionalsNotification(pgu.getElements(),startPos,endPos,prevBreak);

  }

  cellLM.addAreas(new KnuthPossPosIter(pgu.getElements(),startPos,endPos + 1),layoutContext,spannedGridRowHeights,startRowIndex - pgu.getRowIndex(),currentRowIndex - pgu.getRowIndex(),borderBeforeWhich,borderAfterWhich,startRowIndex == firstRowOnPageIndex,lastOnPage,this,firstRowHeight);

}

Location: RowPainter.java

Content: 

private int computeContentLength(PrimaryGridUnit pgu,int startIndex,int endIndex){

  if (startIndex > endIndex) {

    return 0;

  }

 else {

    ListIterator iter=pgu.getElements().listIterator(startIndex);

    boolean nextIsBox=false;

    while (iter.nextIndex() <= endIndex && !nextIsBox) {

      nextIsBox=((KnuthElement)iter.next()).isBox();

    }

    int len=0;

    if (((KnuthElement)iter.previous()).isBox()) {

      while (iter.nextIndex() < endIndex) {

        KnuthElement el=(KnuthElement)iter.next();

        if (el.isBox() || el.isGlue()) {

          len+=el.getWidth();

        }

      }

      len+=ActiveCell.getElementContentLength((KnuthElement)iter.next());

    }

    return len;

  }

}

Location: RowPainter.java

Content: 

/** 

 * Signals that the end of the current table part is reached.

 * @param lastInBody true if the part is the last table-body element to be displayedon the current page. In which case all the cells must be flushed even if they aren't finished, plus the proper collapsed borders must be selected (trailing instead of normal, or rest if the cell is unfinished)

 * @param lastOnPage true if the part is the last to be displayed on the current page.In which case collapsed after borders for the cells on the last row must be drawn in the outer mode

 */

void endTablePart(boolean lastInBody,boolean lastOnPage){

  addAreasAndFlushRow(lastInBody,lastOnPage);

  if (tablePartBackground != null) {

    TableLayoutManager tableLM=tclm.getTableLM();

    for (    Object tablePartBackgroundArea : tablePartBackgroundAreas) {

      Block backgroundArea=(Block)tablePartBackgroundArea;

      TraitSetter.addBackground(backgroundArea,tablePartBackground,tableLM,-backgroundArea.getXOffset(),tablePartOffset - backgroundArea.getYOffset(),tableLM.getContentAreaIPD(),currentRowOffset - tablePartOffset);

    }

    tablePartBackground=null;

    tablePartBackgroundAreas.clear();

  }

}

Location: RowPainter.java

Content: 

int getAccumulatedBPD(){

  return currentRowOffset;

}

Location: RowPainter.java

Content: 

/** 

 * Returns the offset of the row with the given index.

 * @param rowIndex index of the row

 * @return its y-offset on the page

 */

private int getRowOffset(int rowIndex){

  return (Integer)rowOffsets.get(rowIndex - firstRowIndex);

}

Location: RowPainter.java

Content: 

/** 

 * Records the fragment of row represented by the given position. If it belongs to another (grid) row than the current one, that latter is painted and flushed first.

 * @param tcpos a position representing the row fragment

 */

void handleTableContentPosition(TableContentPosition tcpos){

  if (log.isDebugEnabled()) {

    log.debug("===handleTableContentPosition(" + tcpos);

  }

  if (currentRow == null) {

    currentRow=tcpos.getNewPageRow();

  }

 else {

    EffRow row=tcpos.getRow();

    if (row.getIndex() > currentRow.getIndex()) {

      addAreasAndFlushRow(false,false);

      currentRow=row;

    }

  }

  if (firstRowIndex < 0) {

    firstRowIndex=currentRow.getIndex();

    if (firstRowOnPageIndex < 0) {

      firstRowOnPageIndex=firstRowIndex;

    }

  }

  for (  Object cellPart1 : tcpos.cellParts) {

    CellPart cellPart=(CellPart)cellPart1;

    if (log.isDebugEnabled()) {

      log.debug(">" + cellPart);

    }

    int colIndex=cellPart.pgu.getColIndex();

    if (firstCellParts[colIndex] == null) {

      firstCellParts[colIndex]=cellPart;

      cellHeights[colIndex]=cellPart.getBorderPaddingBefore(firstCellOnPage[colIndex]);

    }

 else {

      assert firstCellParts[colIndex].pgu == cellPart.pgu;

      cellHeights[colIndex]+=cellPart.getConditionalBeforeContentLength();

    }

    cellHeights[colIndex]+=cellPart.getLength();

    lastCellParts[colIndex]=cellPart;

  }

}

Location: RowPainter.java

Content: 

/** 

 * Records the y-offset of the row with the given index.

 * @param rowIndex index of the row

 * @param offset y-offset of the row on the page

 */

private void recordRowOffset(int rowIndex,int offset){

  for (int i=rowOffsets.size(); i <= rowIndex - firstRowIndex; i++) {

    rowOffsets.add(offset);

  }

}

Location: RowPainter.java

Content: 

/** 

 * Registers the given area, that will be used to render the part of table-header/footer/body background covered by a table-cell. If percentages are used to place the background image, the final bpd of the (fraction of) table part that will be rendered on the current page must be known. The traits can't then be set when the areas for the cell are created since at that moment this bpd is yet unknown. So they will instead be set in {@link #addAreasAndFlushRow(boolean,boolean)}.

 * @param backgroundArea the block of the cell's dimensions that will hold the partbackground

 */

void registerPartBackgroundArea(Block backgroundArea){

  tclm.getTableLM().addBackgroundArea(backgroundArea);

  tablePartBackgroundAreas.add(backgroundArea);

}

Location: RowPainter.java

Content: 

RowPainter(TableContentLayoutManager tclm,LayoutContext layoutContext){

  this.tclm=tclm;

  this.layoutContext=layoutContext;

  this.colCount=tclm.getColumns().getColumnCount();

  this.cellHeights=new int[colCount];

  this.firstCellOnPage=new boolean[colCount];

  this.firstCellParts=new CellPart[colCount];

  this.lastCellParts=new CellPart[colCount];

  this.firstRowIndex=-1;

  this.firstRowOnPageIndex=-1;

}

Location: RowPainter.java

Content: 

void startTablePart(TablePart tablePart){

  CommonBorderPaddingBackground background=tablePart.getCommonBorderPaddingBackground();

  if (background.hasBackground()) {

    tablePartBackground=background;

    if (tablePartBackgroundAreas == null) {

      tablePartBackgroundAreas=new ArrayList();

    }

  }

  tablePartOffset=currentRowOffset;

}

