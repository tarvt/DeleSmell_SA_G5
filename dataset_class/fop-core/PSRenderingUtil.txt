Location: PSRenderingUtil.java

Content: 

private boolean booleanValueOf(Object obj){

  if (obj instanceof Boolean) {

    return (Boolean)obj;

  }

 else   if (obj instanceof String) {

    return Boolean.valueOf((String)obj);

  }

 else {

    throw new IllegalArgumentException("Boolean or \"true\" or \"false\" expected.");

  }

}

Location: PSRenderingUtil.java

Content: 

private int intValueOf(Object obj){

  if (obj instanceof Integer) {

    return (Integer)obj;

  }

 else   if (obj instanceof String) {

    return Integer.parseInt((String)obj);

  }

 else {

    throw new IllegalArgumentException("Integer or String with a number expected.");

  }

}

Location: PSRenderingUtil.java

Content: 

PSRenderingUtil(FOUserAgent userAgent){

  this.userAgent=userAgent;

  initialize();

}

Location: PSRenderingUtil.java

Content: 

public void setAcrobatDownsample(boolean b){

  acrobatDownsample=b;

}

Location: PSRenderingUtil.java

Content: 

/** 

 * Sets whether or not the safe set page device macro should be used (as opposed to directly invoking setpagedevice) when setting the PostScript page device. <p> This option is a useful option when you want to guard against the possibility of invalid/unsupported PostScript key/values being placed in the page device. <p>

 * @param value setting to false and the renderer will make astandard "setpagedevice" call, setting to true will make a safe set page device macro call (default is false).

 */

public void setDSCComplianceEnabled(boolean value){

  this.dscCompliant=value;

}

Location: PSRenderingUtil.java

Content: 

/** 

 * Sets the rendering mode.

 * @param renderingMode the rendering mode

 */

public void setRenderingMode(PSRenderingMode renderingMode){

  this.renderingMode=renderingMode;

}

Location: PSRenderingUtil.java

Content: 

/** 

 * Formats and writes a Collection of PSExtensionAttachment instances to the output stream. The instances are removed from the collection when they have been written.

 * @param gen the PS generator

 * @param attachmentCollection a Collection of PSExtensionAttachment instances

 * @throws IOException if an I/O error occurs.

 */

public static void writeEnclosedExtensionAttachments(PSGenerator gen,Collection attachmentCollection) throws IOException {

  Iterator iter=attachmentCollection.iterator();

  while (iter.hasNext()) {

    PSExtensionAttachment attachment=(PSExtensionAttachment)iter.next();

    if (attachment != null) {

      writeEnclosedExtensionAttachment(gen,attachment);

    }

    iter.remove();

  }

}

Location: PSRenderingUtil.java

Content: 

/** 

 * Formats and writes a PSExtensionAttachment to the output stream.

 * @param gen the PS generator

 * @param attachment an PSExtensionAttachment instance

 * @throws IOException if an I/O error occurs.

 */

public static void writeEnclosedExtensionAttachment(PSGenerator gen,PSExtensionAttachment attachment) throws IOException {

  if (attachment instanceof PSCommentBefore) {

    gen.commentln("%" + attachment.getContent());

  }

 else   if (attachment instanceof PSCommentAfter) {

    gen.commentln("%" + attachment.getContent());

  }

 else {

    String info="";

    if (attachment instanceof PSSetupCode) {

      PSSetupCode setupCodeAttach=(PSSetupCode)attachment;

      String name=setupCodeAttach.getName();

      if (name != null) {

        info+=": (" + name + ")";

      }

    }

    String type=attachment.getType();

    gen.commentln("%FOPBegin" + type + info);

    LineNumberReader reader=new LineNumberReader(new java.io.StringReader(attachment.getContent()));

    String line;

    while ((line=reader.readLine()) != null) {

      line=line.trim();

      if (line.length() > 0) {

        gen.writeln(line);

      }

    }

    gen.commentln("%FOPEnd" + type);

  }

}

Location: PSRenderingUtil.java

Content: 

/** 

 * Formats and writes a List of PSSetupCode instances to the output stream.

 * @param gen the PS generator

 * @param setupCodeList a List of PSSetupCode instances

 * @param type the type of code section

 * @throws IOException if an I/O error occurs.

 */

public static void writeSetupCodeList(PSGenerator gen,List setupCodeList,String type) throws IOException {

  if (setupCodeList != null) {

    Iterator i=setupCodeList.iterator();

    while (i.hasNext()) {

      PSSetupCode setupCode=(PSSetupCode)i.next();

      gen.commentln("%FOPBegin" + type + ": ("+ (setupCode.getName() != null ? setupCode.getName() : "")+ ")");

      LineNumberReader reader=new LineNumberReader(new java.io.StringReader(setupCode.getContent()));

      String line;

      while ((line=reader.readLine()) != null) {

        line=line.trim();

        if (line.length() > 0) {

          gen.writeln(line.trim());

        }

      }

      gen.commentln("%FOPEnd" + type);

      i.remove();

    }

  }

}

