Location: PDFColor.java

Content: 

/** 

 * Get the black component.

 * @return the black double value

 */

public double black(){

  return (this.black);

}

Location: PDFColor.java

Content: 

/** 

 * Get the blue component.

 * @return the blue double value

 */

public double blue(){

  return (this.blue);

}

Location: PDFColor.java

Content: 

/** 

 * Get the blue integer component.

 * @return the blue integer value

 */

public int blue255(){

  return (int)(this.blue * 255d);

}

Location: PDFColor.java

Content: 

/** 

 * Convert the color from CMYK to Gray.

 */

protected void convertCMYKtoGRAY(){

  double tempDouble=0.0;

  tempDouble=this.cyan;

  if (this.magenta < tempDouble) {

    tempDouble=this.magenta;

  }

  if (this.yellow < tempDouble) {

    tempDouble=this.yellow;

  }

  this.black=(tempDouble / PDFColor.blackFactor);

}

Location: PDFColor.java

Content: 

/** 

 * Convert the color from CMYK to RGB.

 */

protected void convertCMYKtoRGB(){

  this.red=1.0 - this.cyan;

  this.green=1.0 - this.green;

  this.blue=1.0 - this.yellow;

  this.red=(this.black / PDFColor.blackFactor) + this.red;

  this.green=(this.black / PDFColor.blackFactor) + this.green;

  this.blue=(this.black / PDFColor.blackFactor) + this.blue;

}

Location: PDFColor.java

Content: 

/** 

 * Convert the color from Gray to CMYK.

 */

protected void convertGRAYtoCMYK(){

  this.cyan=this.black;

  this.magenta=this.black;

  this.yellow=this.black;

}

Location: PDFColor.java

Content: 

/** 

 * Convert the color from Gray to RGB.

 */

protected void convertGRAYtoRGB(){

  this.red=1.0 - this.black;

  this.green=1.0 - this.black;

  this.blue=1.0 - this.black;

}

Location: PDFColor.java

Content: 

/** 

 * Convert the color from RGB to CMYK.

 */

protected void convertRGBtoCMYK(){

  this.cyan=1.0 - this.red;

  this.magenta=1.0 - this.green;

  this.yellow=1.0 - this.blue;

  this.black=0.0;

}

Location: PDFColor.java

Content: 

/** 

 * Convert the color from RGB to Gray.

 */

protected void convertRGBtoGRAY(){

  double tempDouble=0.0;

  tempDouble=this.red;

  if (this.green < tempDouble) {

    tempDouble=this.green;

  }

  if (this.blue < tempDouble) {

    tempDouble=this.blue;

  }

  this.black=1.0 - (tempDouble / PDFColor.blackFactor);

}

Location: PDFColor.java

Content: 

/** 

 * Get the cyan component.

 * @return the cyan double value

 */

public double cyan(){

  return (this.cyan);

}

Location: PDFColor.java

Content: 

/** 

 * Return a vector representation of the color in the appropriate colorspace.

 * @return a list containing the Double values of the color

 */

public List getVector(){

  List theColorVector=new ArrayList();

  if (this.colorSpace.getColorSpace() == PDFDeviceColorSpace.DEVICE_RGB) {

    theColorVector.add(this.red);

    theColorVector.add(this.green);

    theColorVector.add(this.blue);

  }

 else   if (this.colorSpace.getColorSpace() == PDFDeviceColorSpace.DEVICE_CMYK) {

    theColorVector.add(this.cyan);

    theColorVector.add(this.magenta);

    theColorVector.add(this.yellow);

    theColorVector.add(this.black);

  }

 else {

    theColorVector.add(this.black);

  }

  return (theColorVector);

}

Location: PDFColor.java

Content: 

/** 

 * Get the green component.

 * @return the green double value

 */

public double green(){

  return (this.green);

}

Location: PDFColor.java

Content: 

/** 

 * Get the green integer component.

 * @return the green integer value

 */

public int green255(){

  return (int)(this.green * 255d);

}

Location: PDFColor.java

Content: 

/** 

 * Get the magenta component.

 * @return the magenta double value

 */

public double magenta(){

  return (this.magenta);

}

Location: PDFColor.java

Content: 

/** 

 * Create a PDF color with double values ranging from 0 to 1.

 * @param theRed the red double value

 * @param theGreen the green double value

 * @param theBlue the blue double value

 */

public PDFColor(double theRed,double theGreen,double theBlue){

  this.colorSpace=new PDFDeviceColorSpace(PDFDeviceColorSpace.DEVICE_RGB);

  this.red=theRed;

  this.green=theGreen;

  this.blue=theBlue;

}

Location: PDFColor.java

Content: 

/** 

 * Create a PDF color with CMYK values.

 * @param theCyan the cyan value

 * @param theMagenta the magenta value

 * @param theYellow the yellow value

 * @param theBlack the black value

 */

public PDFColor(double theCyan,double theMagenta,double theYellow,double theBlack){

  this.colorSpace=new PDFDeviceColorSpace(PDFDeviceColorSpace.DEVICE_CMYK);

  this.cyan=theCyan;

  this.magenta=theMagenta;

  this.yellow=theYellow;

  this.black=theBlack;

}

Location: PDFColor.java

Content: 

/** 

 * Create a PDF color with int values ranging from 0 to 255

 * @param theRed the red integer value

 * @param theGreen the green integer value

 * @param theBlue the blue integer value

 */

public PDFColor(int theRed,int theGreen,int theBlue){

  this(((double)theRed) / 255d,((double)theGreen) / 255d,((double)theBlue) / 255d);

}

Location: PDFColor.java

Content: 

/** 

 * Create a PDF color from a java.awt.Color object. Different Color objects are handled differently. Cases recognized are. 1. CMYK color 3. 'Normal' java.awt.Color (RGB case assumed or implicit conversion to sRGB)

 * @param col the java.awt.Color object for which to create a PDFColor object

 */

public PDFColor(java.awt.Color col){

  ColorSpace cs=col.getColorSpace();

  if (cs != null && cs instanceof DeviceCMYKColorSpace) {

    this.colorSpace=new PDFDeviceColorSpace(PDFDeviceColorSpace.DEVICE_CMYK);

    float[] cmyk=col.getColorComponents(null);

    this.cyan=cmyk[0];

    this.magenta=cmyk[1];

    this.yellow=cmyk[2];

    this.black=cmyk[3];

  }

 else {

    this.colorSpace=new PDFDeviceColorSpace(PDFDeviceColorSpace.DEVICE_RGB);

    float[] comps=new float[3];

    comps=col.getColorComponents(comps);

    this.red=comps[0];

    this.green=comps[1];

    this.blue=comps[2];

  }

}

Location: PDFColor.java

Content: 

/** 

 * Get the red component.

 * @return the red double value

 */

public double red(){

  return (this.red);

}

Location: PDFColor.java

Content: 

/** 

 * Get the red integer component.

 * @return the red integer value

 */

public int red255(){

  return (int)(this.red * 255d);

}

Location: PDFColor.java

Content: 

/** 

 * Get the yellow component.

 * @return the yellow double value

 */

public double yellow(){

  return (this.yellow);

}

