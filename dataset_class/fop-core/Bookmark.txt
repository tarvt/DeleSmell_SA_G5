Location: Bookmark.java

Content: 

/** 

 * Adds a child bookmark.

 * @param bookmark the child bookmark

 */

public void addChildBookmark(Bookmark bookmark){

  if (this.childBookmarks == null) {

    this.childBookmarks=new java.util.ArrayList();

  }

  this.childBookmarks.add(bookmark);

}

Location: Bookmark.java

Content: 

/** 

 * {@inheritDoc} 

 */

public void bind(PropertyList pList) throws FOPException {

  commonAccessibility=CommonAccessibility.getInstance(pList);

  externalDestination=pList.get(PR_EXTERNAL_DESTINATION).getString();

  internalDestination=pList.get(PR_INTERNAL_DESTINATION).getString();

  bShow=(pList.get(PR_STARTING_STATE).getEnum() == EN_SHOW);

  if (internalDestination.length() > 0) {

    externalDestination=null;

  }

 else   if (externalDestination.length() == 0) {

    getFOValidationEventProducer().missingLinkDestination(this,getName(),locator);

  }

 else {

    getFOValidationEventProducer().unimplementedFeature(this,getName(),"external-destination",getLocator());

  }

}

Location: Bookmark.java

Content: 

/** 

 * Create a new Bookmark object that is a child of the given  {@link FONode}.

 * @param parent the parent fo node

 */

public Bookmark(FONode parent){

  super(parent);

}

Location: Bookmark.java

Content: 

/** 

 * Creates a new bookmark.

 * @param title the bookmark's title

 * @param show true if the bookmark shall be shown, false for hidden

 * @param action the action performed when the bookmark is clicked

 */

public Bookmark(String title,boolean show,AbstractAction action){

  this.title=title;

  this.show=show;

  this.action=action;

}

Location: Bookmark.java

Content: 

/** 

 * Returns the action performed when the bookmark is clicked.

 * @return the action

 */

public AbstractAction getAction(){

  return this.action;

}

Location: Bookmark.java

Content: 

/** 

 * Get the bookmark title for this bookmark

 * @return the bookmark title string or an empty string if not found

 */

public String getBookmarkTitle(){

  return bookmarkTitle == null ? "" : bookmarkTitle.getTitle();

}

Location: Bookmark.java

Content: 

/** 

 * Returns a list of child bookmarks.

 * @return the child bookmarks

 */

public List getChildBookmarks(){

  if (this.childBookmarks == null) {

    return Collections.EMPTY_LIST;

  }

 else {

    return Collections.unmodifiableList(this.childBookmarks);

  }

}

Location: Bookmark.java

Content: 

/** 

 * Returns the value of the external-destination property.

 * @return the external-destination

 */

public String getExternalDestination(){

  return externalDestination;

}

Location: Bookmark.java

Content: 

/** 

 * Returns the value of the internal-destination property.

 * @return the internal-destination

 */

public String getInternalDestination(){

  return internalDestination;

}

Location: Bookmark.java

Content: 

/** 

 * Returns the bookmark's title.

 * @return the title

 */

public String getTitle(){

  return this.title;

}

Location: Bookmark.java

Content: 

/** 

 * Indicates whether the bookmark shall be shown initially.

 * @return true if it shall be shown

 */

public boolean isShown(){

  return this.show;

}

Location: Bookmark.java

Content: 

/** 

 * Sets the action performed when the bookmark is clicked.

 * @param action the action

 */

public void setAction(AbstractAction action){

  this.action=action;

}

Location: Bookmark.java

Content: 

/** 

 * Determines if this fo:bookmark's subitems should be initially displayed or hidden, based on the starting-state property set on this FO.

 * @return true if this bookmark's starting-state is "show", false if "hide".

 */

public boolean showChildItems(){

  return bShow;

}

