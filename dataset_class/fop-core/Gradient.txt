Location: Gradient.java

Content: 

private Gradient(){

}

Location: Gradient.java

Content: 

public static String outputPattern(Pattern pattern,DoubleFormatter doubleFormatter){

  StringBuilder p=new StringBuilder(64);

  p.append("/Pattern setcolorspace\n");

  p.append("<< \n/Type /Pattern \n");

  p.append("/PatternType " + pattern.getPatternType() + " \n");

  if (pattern.getShading() != null) {

    p.append("/Shading ");

    outputShading(p,pattern.getShading(),doubleFormatter);

    p.append(" \n");

  }

  p.append(">> \n");

  List<Double> matrix=pattern.getMatrix();

  if (matrix == null) {

    p.append("matrix ");

  }

 else {

    p.append("[ ");

    for (    double m : pattern.getMatrix()) {

      p.append(doubleFormatter.formatDouble(m));

      p.append(" ");

    }

    p.append("] ");

  }

  p.append("makepattern setcolor\n");

  return p.toString();

}

Location: Gradient.java

Content: 

private static void outputShading(StringBuilder out,Shading shading,final DoubleFormatter doubleFormatter){

  final Function function=shading.getFunction();

  Shading.FunctionRenderer functionRenderer=new Shading.FunctionRenderer(){

    public void outputFunction(    StringBuilder out){

      SubFunctionRenderer subFunctionRenderer=new Function.SubFunctionRenderer(){

        public void outputFunction(        StringBuilder out,        int functionIndex){

          Function subFunction=function.getFunctions().get(functionIndex);

          assert subFunction.getFunctions().isEmpty();

          subFunction.output(out,doubleFormatter,null);

        }

      }

;

      function.output(out,doubleFormatter,subFunctionRenderer);

    }

  }

;

  shading.output(out,doubleFormatter,functionRenderer);

}

