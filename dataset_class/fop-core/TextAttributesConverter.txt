Location: TextAttributesConverter.java

Content: 

/** 

 * Reads background-color from bl and writes it to rtfAttr.

 * @param bpb the CommonBorderPaddingBackground from which the properties are read

 * @param rtfAttr the RtfAttributes object the attributes are written to

 */

private static void attrBackgroundColor(CommonBorderPaddingBackground bpb,RtfAttributes rtfAttr){

  Color fopValue=bpb.backgroundColor;

  int rtfColor=0;

  if ((fopValue == null) || ((fopValue.getRed() == 0) && (fopValue.getGreen() == 0) && (fopValue.getBlue() == 0)&& (fopValue.getAlpha() == 0))) {

    return;

  }

 else {

    rtfColor=convertFOPColorToRTF(fopValue);

  }

  rtfAttr.set(RtfText.ATTR_BACKGROUND_COLOR,rtfColor);

}

Location: TextAttributesConverter.java

Content: 

private static void attrBaseLineShift(Length baselineShift,RtfAttributes rtfAttr){

  int s=baselineShift.getEnum();

  if (s == Constants.EN_SUPER) {

    rtfAttr.set(RtfText.ATTR_SUPERSCRIPT);

  }

 else   if (s == Constants.EN_SUB) {

    rtfAttr.set(RtfText.ATTR_SUBSCRIPT);

  }

}

Location: TextAttributesConverter.java

Content: 

/** 

 * Reads background-color for block from <code>bpb</code> and writes it to <code>rtfAttr</code>.

 */

private static void attrBlockBackgroundColor(CommonBorderPaddingBackground bpb,RtfAttributes rtfAttr){

  if (bpb.hasBackground()) {

    rtfAttr.set(RtfText.SHADING,RtfText.FULL_SHADING);

    rtfAttr.set(RtfText.SHADING_FRONT_COLOR,convertFOPColorToRTF(bpb.backgroundColor));

  }

}

Location: TextAttributesConverter.java

Content: 

private static void attrBlockMargin(CommonMarginBlock cmb,FOPRtfAttributes rtfAttr){

  rtfAttr.setTwips(RtfText.SPACE_BEFORE,cmb.spaceBefore.getOptimum(null).getLength());

  rtfAttr.setTwips(RtfText.SPACE_AFTER,cmb.spaceAfter.getOptimum(null).getLength());

  rtfAttr.setTwips(RtfText.LEFT_INDENT_BODY,cmb.startIndent);

  rtfAttr.setTwips(RtfText.RIGHT_INDENT_BODY,cmb.endIndent);

}

Location: TextAttributesConverter.java

Content: 

private static void attrBlockTextAlign(int alignment,RtfAttributes rtfAttr){

  String rtfValue=null;

switch (alignment) {

case Constants.EN_CENTER:

    rtfValue=RtfText.ALIGN_CENTER;

  break;

case Constants.EN_END:

rtfValue=RtfText.ALIGN_RIGHT;

break;

case Constants.EN_JUSTIFY:

rtfValue=RtfText.ALIGN_JUSTIFIED;

break;

default :

rtfValue=RtfText.ALIGN_LEFT;

break;

}

rtfAttr.set(rtfValue);

}

Location: TextAttributesConverter.java

Content: 

private static void attrBlockTextIndent(Length textIndent,FOPRtfAttributes rtfAttr){

  rtfAttr.setTwips(RtfText.LEFT_INDENT_FIRST,textIndent.getValue());

}

Location: TextAttributesConverter.java

Content: 

/** 

 * Adds border information from <code>bpb</code> to <code>rtrAttr</code>. 

 */

private static void attrBorder(CommonBorderPaddingBackground bpb,RtfAttributes rtfAttr,FONode fobj){

  if (hasBorder(fobj.getParent())) {

    attrInlineBorder(bpb,rtfAttr);

    return;

  }

  BorderAttributesConverter.makeBorder(bpb,CommonBorderPaddingBackground.BEFORE,rtfAttr,IBorderAttributes.BORDER_TOP);

  BorderAttributesConverter.makeBorder(bpb,CommonBorderPaddingBackground.AFTER,rtfAttr,IBorderAttributes.BORDER_BOTTOM);

  BorderAttributesConverter.makeBorder(bpb,CommonBorderPaddingBackground.START,rtfAttr,IBorderAttributes.BORDER_LEFT);

  BorderAttributesConverter.makeBorder(bpb,CommonBorderPaddingBackground.END,rtfAttr,IBorderAttributes.BORDER_RIGHT);

}

Location: TextAttributesConverter.java

Content: 

private static void attrBreak(Block fobj,FOPRtfAttributes attrib){

  int breakValue=fobj.getBreakBefore();

  if (breakValue != Constants.EN_AUTO) {

    boolean bHasTableCellParent=false;

    FONode f=fobj;

    while (f.getParent() != null) {

      f=f.getParent();

      if (f instanceof TableCell) {

        bHasTableCellParent=true;

        break;

      }

    }

    if (!bHasTableCellParent) {

      attrib.set("sect");

switch (breakValue) {

case Constants.EN_EVEN_PAGE:

        attrib.set("sbkeven");

      break;

case Constants.EN_ODD_PAGE:

    attrib.set("sbkodd");

  break;

case Constants.EN_COLUMN:

attrib.set("sbkcol");

break;

default :

attrib.set("sbkpage");

}

}

 else {

log.warn("Cannot create break-before for a block inside a table.");

}

}

}

Location: TextAttributesConverter.java

Content: 

private static void attrFontColor(Color colorType,RtfAttributes rtfAttr){

  if (colorType != null) {

    if (colorType.getAlpha() != 0 || colorType.getRed() != 0 || colorType.getGreen() != 0 || colorType.getBlue() != 0) {

      rtfAttr.set(RtfText.ATTR_FONT_COLOR,convertFOPColorToRTF(colorType));

    }

  }

}

Location: TextAttributesConverter.java

Content: 

private static void attrFont(CommonFont font,FOPRtfAttributes rtfAttr){

  rtfAttr.set(RtfText.ATTR_FONT_FAMILY,RtfFontManager.getInstance().getFontNumber(font.getFirstFontFamily()));

  rtfAttr.setHalfPoints(RtfText.ATTR_FONT_SIZE,font.fontSize);

  if (font.getFontWeight() == Constants.EN_700 || font.getFontWeight() == Constants.EN_800 || font.getFontWeight() == Constants.EN_900) {

    rtfAttr.set("b",1);

  }

 else {

    rtfAttr.set("b",0);

  }

  if (font.getFontStyle() == Constants.EN_ITALIC) {

    rtfAttr.set(RtfText.ATTR_ITALIC,1);

  }

 else {

    rtfAttr.set(RtfText.ATTR_ITALIC,0);

  }

}

Location: TextAttributesConverter.java

Content: 

/** 

 * Adds inline border information from <code>bpb</code> to <code>rtrAttr</code>. 

 */

private static void attrInlineBorder(CommonBorderPaddingBackground bpb,RtfAttributes rtfAttr){

  BorderAttributesConverter.makeBorder(bpb,CommonBorderPaddingBackground.BEFORE,rtfAttr,IBorderAttributes.BORDER_CHARACTER);

}

Location: TextAttributesConverter.java

Content: 

private static void attrTextDecoration(CommonTextDecoration textDecoration,RtfAttributes rtfAttr){

  if (textDecoration == null) {

    rtfAttr.set(RtfText.ATTR_UNDERLINE,0);

    rtfAttr.set(RtfText.ATTR_STRIKETHROUGH,0);

    return;

  }

  if (textDecoration.hasUnderline()) {

    rtfAttr.set(RtfText.ATTR_UNDERLINE,1);

  }

 else {

    rtfAttr.set(RtfText.ATTR_UNDERLINE,0);

  }

  if (textDecoration.hasLineThrough()) {

    rtfAttr.set(RtfText.ATTR_STRIKETHROUGH,1);

  }

 else {

    rtfAttr.set(RtfText.ATTR_STRIKETHROUGH,0);

  }

}

Location: TextAttributesConverter.java

Content: 

/** 

 * Converts all known text FO properties to RtfAttributes

 * @param fobj the FO for which the attributes are to be converted

 */

public static RtfAttributes convertAttributes(Block fobj) throws FOPException {

  FOPRtfAttributes attrib=new FOPRtfAttributes();

  attrFont(fobj.getCommonFont(),attrib);

  attrFontColor(fobj.getColor(),attrib);

  attrBlockBackgroundColor(fobj.getCommonBorderPaddingBackground(),attrib);

  attrBlockMargin(fobj.getCommonMarginBlock(),attrib);

  attrBlockTextAlign(fobj.getTextAlign(),attrib);

  attrBorder(fobj.getCommonBorderPaddingBackground(),attrib,fobj);

  attrBreak(fobj,attrib);

  attrBlockTextIndent(fobj.getTextIndent(),attrib);

  return attrib;

}

Location: TextAttributesConverter.java

Content: 

/** 

 * Converts all known text FO properties to RtfAttributes

 * @param fobj FObj whose properties are to be converted

 */

public static RtfAttributes convertBlockContainerAttributes(BlockContainer fobj) throws FOPException {

  FOPRtfAttributes attrib=new FOPRtfAttributes();

  attrBackgroundColor(fobj.getCommonBorderPaddingBackground(),attrib);

  attrBlockMargin(fobj.getCommonMarginBlock(),attrib);

  attrBorder(fobj.getCommonBorderPaddingBackground(),attrib,fobj);

  return attrib;

}

Location: TextAttributesConverter.java

Content: 

/** 

 * Converts all character related FO properties to RtfAttributes.

 * @param fobj FObj whose properties are to be converted

 */

public static RtfAttributes convertCharacterAttributes(FOText fobj) throws FOPException {

  FOPRtfAttributes attrib=new FOPRtfAttributes();

  attrFont(fobj.getCommonFont(),attrib);

  attrFontColor(fobj.getColor(),attrib);

  attrTextDecoration(fobj.getTextDecoration(),attrib);

  attrBaseLineShift(fobj.getBaseLineShift(),attrib);

  return attrib;

}

Location: TextAttributesConverter.java

Content: 

/** 

 * Converts all character related FO properties to RtfAttributes.

 * @param fobj FObj whose properties are to be converted

 */

public static RtfAttributes convertCharacterAttributes(Inline fobj) throws FOPException {

  FOPRtfAttributes attrib=new FOPRtfAttributes();

  attrFont(fobj.getCommonFont(),attrib);

  attrFontColor(fobj.getColor(),attrib);

  attrBackgroundColor(fobj.getCommonBorderPaddingBackground(),attrib);

  attrInlineBorder(fobj.getCommonBorderPaddingBackground(),attrib);

  return attrib;

}

Location: TextAttributesConverter.java

Content: 

/** 

 * Converts all character related FO properties to RtfAttributes.

 * @param fobj FObj whose properties are to be converted

 */

public static RtfAttributes convertCharacterAttributes(PageNumber fobj) throws FOPException {

  FOPRtfAttributes attrib=new FOPRtfAttributes();

  attrFont(fobj.getCommonFont(),attrib);

  attrTextDecoration(fobj.getTextDecoration(),attrib);

  attrBackgroundColor(fobj.getCommonBorderPaddingBackground(),attrib);

  return attrib;

}

Location: TextAttributesConverter.java

Content: 

/** 

 * Converts a FOP ColorType to the integer pointing into the RTF color table

 * @param fopColor the ColorType object to be converted

 * @return integer pointing into the RTF color table

 */

public static int convertFOPColorToRTF(Color fopColor){

  int redComponent=fopColor.getRed();

  int greenComponent=fopColor.getGreen();

  int blueComponent=fopColor.getBlue();

  return RtfColorTable.getInstance().getColorNumber(redComponent,greenComponent,blueComponent);

}

Location: TextAttributesConverter.java

Content: 

/** 

 * Converts FO properties used by RtfLeader to RtfAttributes.

 * @param fobj Leader

 * @param context PercentBaseContext

 * @return RtfAttributes

 * @throws FOPException

 */

public static RtfAttributes convertLeaderAttributes(Leader fobj,PercentBaseContext context) throws FOPException {

  boolean tab=false;

  FOPRtfAttributes attrib=new FOPRtfAttributes();

  attrib.set(RtfText.ATTR_FONT_FAMILY,RtfFontManager.getInstance().getFontNumber(fobj.getCommonFont().getFirstFontFamily()));

  if (fobj.getLeaderLength() != null) {

    attrib.set(RtfLeader.LEADER_WIDTH,convertMptToTwips(fobj.getLeaderLength().getMaximum(context).getLength().getValue(context)));

    if (fobj.getLeaderLength().getMaximum(context) instanceof PercentLength) {

      if (((PercentLength)fobj.getLeaderLength().getMaximum(context)).getString().equals("100.0%")) {

        attrib.set(RtfLeader.LEADER_USETAB,1);

        tab=true;

      }

    }

  }

  attrFontColor(fobj.getColor(),attrib);

switch (fobj.getLeaderPattern()) {

case Constants.EN_DOTS:

    if (tab) {

      attrib.set(RtfLeader.LEADER_TABLEAD,RtfLeader.LEADER_TAB_DOTTED);

    }

 else {

      attrib.set(RtfLeader.LEADER_TABLEAD,RtfLeader.LEADER_DOTTED);

    }

  break;

case Constants.EN_SPACE:

break;

case Constants.EN_RULE:

if (fobj.getRuleThickness() != null) {

log.warn("RTF: fo:leader rule-thickness not supported");

}

switch (fobj.getRuleStyle()) {

case Constants.EN_SOLID:

if (tab) {

attrib.set(RtfLeader.LEADER_TABLEAD,RtfLeader.LEADER_TAB_THICK);

}

 else {

attrib.set(RtfLeader.LEADER_TABLEAD,RtfLeader.LEADER_THICK);

}

break;

case Constants.EN_DASHED:

if (tab) {

attrib.set(RtfLeader.LEADER_TABLEAD,RtfLeader.LEADER_TAB_MIDDLEDOTTED);

}

 else {

attrib.set(RtfLeader.LEADER_TABLEAD,RtfLeader.LEADER_MIDDLEDOTTED);

}

break;

case Constants.EN_DOTTED:

if (tab) {

attrib.set(RtfLeader.LEADER_TABLEAD,RtfLeader.LEADER_TAB_DOTTED);

}

 else {

attrib.set(RtfLeader.LEADER_TABLEAD,RtfLeader.LEADER_DOTTED);

}

break;

case Constants.EN_DOUBLE:

if (tab) {

attrib.set(RtfLeader.LEADER_TABLEAD,RtfLeader.LEADER_TAB_EQUAL);

}

 else {

attrib.set(RtfLeader.LEADER_TABLEAD,RtfLeader.LEADER_EQUAL);

}

break;

case Constants.EN_GROOVE:

if (tab) {

attrib.set(RtfLeader.LEADER_TABLEAD,RtfLeader.LEADER_TAB_HYPHENS);

}

 else {

attrib.set(RtfLeader.LEADER_TABLEAD,RtfLeader.LEADER_HYPHENS);

}

break;

case Constants.EN_RIDGE:

if (tab) {

attrib.set(RtfLeader.LEADER_TABLEAD,RtfLeader.LEADER_TAB_UNDERLINE);

}

 else {

attrib.set(RtfLeader.LEADER_TABLEAD,RtfLeader.LEADER_UNDERLINE);

}

break;

default :

break;

}

break;

case Constants.EN_USECONTENT:

log.warn("RTF: fo:leader use-content not supported");

break;

default :

break;

}

if (fobj.getLeaderAlignment() == Constants.EN_REFERENCE_AREA) {

log.warn("RTF: fo:leader reference-area not supported");

}

return attrib;

}

Location: TextAttributesConverter.java

Content: 

private static int convertMptToTwips(int mpt){

  return Math.round(FoUnitsConverter.getInstance().convertMptToTwips(mpt));

}

Location: TextAttributesConverter.java

Content: 

/** 

 * @return true, if element <code>node</code> has border. 

 */

private static boolean hasBorder(FONode node){

  while (node != null) {

    CommonBorderPaddingBackground commonBorderPaddingBackground=null;

    if (node instanceof Block) {

      Block block=(Block)node;

      commonBorderPaddingBackground=block.getCommonBorderPaddingBackground();

    }

 else     if (node instanceof BlockContainer) {

      BlockContainer container=(BlockContainer)node;

      commonBorderPaddingBackground=container.getCommonBorderPaddingBackground();

    }

    if (commonBorderPaddingBackground != null && commonBorderPaddingBackground.hasBorder()) {

      return true;

    }

    node=node.getParent();

  }

  return false;

}

Location: TextAttributesConverter.java

Content: 

/** 

 * Constructor is private, because it's just a utility class.

 */

private TextAttributesConverter(){

}

