Location: EmbedFontInfo.java

Content: 

/** 

 * Main constructor

 * @param fontUris the URI of the XML resource containing font metrics

 * @param kerning True if kerning should be enabled

 * @param fontTriplets List of font triplets to associate with this font

 * @param subFontName the sub-fontname used for TrueType Collections (null otherwise)

 */

public EmbedFontInfo(FontUris fontUris,boolean kerning,boolean advanced,List<FontTriplet> fontTriplets,String subFontName){

  this(fontUris,kerning,advanced,fontTriplets,subFontName,EncodingMode.AUTO,EmbeddingMode.AUTO,false,false);

}

Location: EmbedFontInfo.java

Content: 

/** 

 * Main constructor

 * @param fontUris the URI of the XML resource containing font metrics

 * @param kerning True if kerning should be enabled

 * @param advanced true if advanced typography features should be enabled

 * @param fontTriplets List of font triplets to associate with this font

 * @param subFontName the sub-fontname used for TrueType Collections (null otherwise)

 * @param encodingMode the encoding mode to use for this font

 */

public EmbedFontInfo(FontUris fontUris,boolean kerning,boolean advanced,List<FontTriplet> fontTriplets,String subFontName,EncodingMode encodingMode,EmbeddingMode embeddingMode,boolean simulateStyle,boolean embedAsType1){

  this.kerning=kerning;

  this.advanced=advanced;

  this.fontTriplets=fontTriplets;

  this.subFontName=subFontName;

  this.encodingMode=encodingMode;

  this.embeddingMode=embeddingMode;

  this.fontUris=fontUris;

  this.simulateStyle=simulateStyle;

  this.embedAsType1=embedAsType1;

}

Location: EmbedFontInfo.java

Content: 

/** 

 * Determines if advanced typographic features are enabled

 * @return true if enabled

 */

public boolean getAdvanced(){

  return advanced;

}

Location: EmbedFontInfo.java

Content: 

public boolean getEmbedAsType1(){

  return embedAsType1;

}

Location: EmbedFontInfo.java

Content: 

/** 

 * Returns the URI to the embeddable font resource

 * @return the font resource URI

 */

public URI getEmbedURI(){

  return fontUris.getEmbed();

}

Location: EmbedFontInfo.java

Content: 

/** 

 * Returns the requested encoding mode for this font.

 * @return the encoding mode

 */

public EncodingMode getEncodingMode(){

  return this.encodingMode;

}

Location: EmbedFontInfo.java

Content: 

public FontUris getFontUris(){

  return fontUris;

}

Location: EmbedFontInfo.java

Content: 

/** 

 * Returns the URI of the metrics XML resource

 * @return the metrics file path

 */

public URI getMetricsURI(){

  return fontUris.getMetrics();

}

Location: EmbedFontInfo.java

Content: 

/** 

 * Returns the sub-font name of the font. This is primarily used for TrueType Collections to select one of the sub-fonts. For all other fonts, this is always null.

 * @return the sub-font name (or null)

 */

public String getSubFontName(){

  return this.subFontName;

}

Location: EmbedFontInfo.java

Content: 

/** 

 * Indicates whether the font is only referenced rather than embedded.

 * @return true if the font is embedded, false if it is referenced.

 */

public boolean isEmbedded(){

  if (fontUris.getEmbed() == null) {

    return false;

  }

 else {

    return this.embedded;

  }

}

Location: EmbedFontInfo.java

Content: 

private void readObject(java.io.ObjectInputStream in) throws IOException, ClassNotFoundException {

  in.defaultReadObject();

  this.embedded=true;

}

Location: EmbedFontInfo.java

Content: 

/** 

 * Defines whether the font is embedded or not.

 * @param value true to embed the font, false to reference it

 */

public void setEmbedded(boolean value){

  this.embedded=value;

}

Location: EmbedFontInfo.java

Content: 

/** 

 * Sets the PostScript name of the font

 * @param postScriptName the PostScript name

 */

public void setPostScriptName(String postScriptName){

  this.postScriptName=postScriptName;

}

