Location: PNGRenderer.java

Content: 

/** 

 * Returns the OutputStream corresponding to this page

 * @param pageNumber 0-based page number

 * @return the corresponding OutputStream

 * @throws IOException In case of an I/O error

 */

protected OutputStream getCurrentOutputStream(int pageNumber) throws IOException {

  if (pageNumber == 0) {

    return firstOutputStream;

  }

 else {

    return multiFileUtil.createOutputStream(pageNumber);

  }

}

Location: PNGRenderer.java

Content: 

/** 

 * @param userAgent the user agent that contains configuration details. This cannot be null.

 */

public PNGRenderer(FOUserAgent userAgent){

  super(userAgent);

}

Location: PNGRenderer.java

Content: 

private void writeImage(OutputStream os,RenderedImage image) throws IOException {

  ImageWriterParams params=new ImageWriterParams();

  params.setResolution(Math.round(userAgent.getTargetResolution()));

  ImageWriter writer=ImageWriterRegistry.getInstance().getWriterFor(getMimeType());

  if (writer == null) {

    BitmapRendererEventProducer eventProducer=BitmapRendererEventProducer.Provider.get(getUserAgent().getEventBroadcaster());

    eventProducer.noImageWriterFound(this,getMimeType());

  }

 else {

    if (log.isDebugEnabled()) {

      log.debug("Writing image using " + writer.getClass().getName());

    }

    writer.writeImage(image,os,params);

  }

}

