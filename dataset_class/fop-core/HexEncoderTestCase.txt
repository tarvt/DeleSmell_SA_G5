Location: HexEncoderTestCase.java

Content: 

private static void increment(char[] digits){

  int d=digits.length;

  do {

    d--;

    digits[d]=successor(digits[d]);

  }

 while (digits[d] == '0' && d > 0);

}

Location: HexEncoderTestCase.java

Content: 

private static char successor(char d){

  if (d == '9') {

    return 'A';

  }

 else   if (d == 'F') {

    return '0';

  }

 else {

    return (char)(d + 1);

  }

}

Location: HexEncoderTestCase.java

Content: 

/** 

 * Tests that characters are properly encoded into hex strings.

 */

@Test public void testEncodeChar(){

  char[] digits=new char[]{'0','0','0','0'};

  for (int c=0; c <= 0xFFFF; c++) {

    assertEquals(new String(digits),HexEncoder.encode((char)c));

    increment(digits);

  }

}

Location: HexEncoderTestCase.java

Content: 

/** 

 * Tests that codepoints are properly encoded into hex strings.

 */

@Test public void testEncodeCodepoints(){

  char[] digits=new char[]{'0','1','0','0','0','0'};

  for (int c=0x10000; c <= 0x1FFFF; c++) {

    assertEquals(new String(digits),HexEncoder.encode(c));

    increment(digits);

  }

}

