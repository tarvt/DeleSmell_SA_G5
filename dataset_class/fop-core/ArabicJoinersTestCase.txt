Location: ArabicJoinersTestCase.java

Content: 

private GlyphSequence makeGlyphSequence(String s){

  Integer[] ca=UTF32.toUTF32(s,0,true);

  IntBuffer cb=IntBuffer.allocate(ca.length);

  for (  Integer c : ca) {

    cb.put(c);

  }

  cb.rewind();

  return new GlyphSequence(cb,null,null);

}

Location: ArabicJoinersTestCase.java

Content: 

private BitSet parseBitSet(String s){

  BitSet bits=new BitSet();

  for (int i=0, n=s.length(); i < n; ++i) {

    char c=s.charAt(i);

    assert (c == '0') || (c == '1');

    if (c == '1') {

      bits.set(i);

    }

  }

  return bits;

}

Location: ArabicJoinersTestCase.java

Content: 

@Test public void testArabicJoiners(){

  String script=CharScript.scriptTagFromCode(CharScript.SCRIPT_ARABIC);

  ScriptProcessor sp=ScriptProcessor.getInstance(script,new HashMap<String,ScriptProcessor>());

  assertTrue(sp != null);

  ScriptContextTester sct=sp.getSubstitutionContextTester();

  assertTrue(sct != null);

  String language="dflt";

  int flags=0;

  testZWJ(sct,script,language,"isol",flags,ZWJ_TESTS_ISOL);

  testZWJ(sct,script,language,"init",flags,ZWJ_TESTS_INIT);

  testZWJ(sct,script,language,"medi",flags,ZWJ_TESTS_MEDI);

  testZWJ(sct,script,language,"fina",flags,ZWJ_TESTS_FINA);

  testZWJ(sct,script,language,"liga",flags,ZWJ_TESTS_LIGA);

}

Location: ArabicJoinersTestCase.java

Content: 

@Test public void testArabicNonJoiners(){

}

Location: ArabicJoinersTestCase.java

Content: 

private void testZWJ(GlyphContextTester gct,String script,String language,String feature,int flags,String[] test){

  assert test.length == 2;

  String str=test[0];

  BitSet act=new BitSet();

  GlyphSequence gs=makeGlyphSequence(str);

  for (int i=0, n=str.length(); i < n; ++i) {

    if (gct.test(script,language,feature,gs,i,flags)) {

      act.set(i);

    }

  }

  BitSet exp=parseBitSet(test[1]);

  assertTrue(act.equals(exp));

}

Location: ArabicJoinersTestCase.java

Content: 

private void testZWJ(ScriptContextTester sct,String script,String language,String feature,int flags,String[][] tests){

  GlyphContextTester gct=sct.getTester(feature);

  assertTrue(gct != null);

  for (  String[] t : tests) {

    testZWJ(gct,script,language,feature,flags,t);

  }

}

