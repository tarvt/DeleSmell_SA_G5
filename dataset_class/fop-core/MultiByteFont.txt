Location: MultiByteFont.java

Content: 

/** 

 * Add a private use mapping {PU,GI} to the existing character map. N.B. Does not insert in order, merely appends to end of existing map.

 */

protected synchronized void addPrivateUseMapping(int pu,int gi){

  assert findGlyphIndex(pu) == SingleByteEncoding.NOT_FOUND_CODE_POINT;

  cmap.add(new CMapSegment(pu,pu,gi));

}

Location: MultiByteFont.java

Content: 

public GlyphSequence charSequenceToGlyphSequence(CharSequence charSequence,List associations){

  CharSequence normalizedCharSequence=normalize(charSequence,associations);

  return mapCharsToGlyphs(normalizedCharSequence,associations);

}

Location: MultiByteFont.java

Content: 

/** 

 * Given a glyph index, create a new private use mapping, augmenting the bfentries table. This is needed to accommodate the presence of an (output) glyph index in a complex script glyph substitution that does not correspond to a character in the font's CMAP.  The creation of such private use mappings is deferred until an attempt is actually made to perform the reverse lookup from the glyph index. This is necessary in order to avoid exhausting the private use space on fonts containing many such non-mapped glyph indices, if these mappings had been created statically at font load time.

 * @param gi glyph index

 * @returns unicode scalar value

 */

private int createPrivateUseMapping(int gi){

  while ((nextPrivateUse < 0xF900) && (findGlyphIndex(nextPrivateUse) != SingleByteEncoding.NOT_FOUND_CODE_POINT)) {

    nextPrivateUse++;

  }

  if (nextPrivateUse < 0xF900) {

    int pu=nextPrivateUse;

    addPrivateUseMapping(pu,gi);

    if (firstPrivate == 0) {

      firstPrivate=pu;

    }

    lastPrivate=pu;

    numMapped++;

    if (log.isDebugEnabled()) {

      log.debug("Create private use mapping from " + CharUtilities.format(pu) + " to glyph index "+ gi+ " in font '"+ getFullName()+ "'");

    }

    return pu;

  }

 else {

    if (firstUnmapped == 0) {

      firstUnmapped=gi;

    }

    lastUnmapped=gi;

    numUnmapped++;

    log.warn("Exhausted private use area: unable to map " + numUnmapped + " glyphs in glyph index range ["+ firstUnmapped+ ","+ lastUnmapped+ "] (inclusive) of font '"+ getFullName()+ "'");

    return 0;

  }

}

Location: MultiByteFont.java

Content: 

private CharSequence decompose(CharSequence cs,List associations){

  StringBuffer sb=new StringBuffer(cs.length());

  int[] daBuffer=new int[CharNormalize.maximumDecompositionLength()];

  for (int i=0, n=cs.length(); i < n; i++) {

    int cc=cs.charAt(i);

    int[] da=CharNormalize.decompose(cc,daBuffer);

    for (    int aDa : da) {

      if (aDa > 0) {

        sb.append((char)aDa);

      }

 else {

        break;

      }

    }

  }

  return sb;

}

Location: MultiByteFont.java

Content: 

/** 

 * Removes the glyphs associated with elidable control characters. All the characters in an association must be elidable in order to remove the corresponding glyph.

 * @param gs GlyphSequence that may contains the elidable glyphs

 * @return GlyphSequence without the elidable glyphs

 */

private static GlyphSequence elideControls(GlyphSequence gs){

  if (hasElidableControl(gs)) {

    int[] ca=gs.getCharacterArray(false);

    IntBuffer ngb=IntBuffer.allocate(gs.getGlyphCount());

    List nal=new java.util.ArrayList(gs.getGlyphCount());

    for (int i=0, n=gs.getGlyphCount(); i < n; ++i) {

      CharAssociation a=gs.getAssociation(i);

      int s=a.getStart();

      int e=a.getEnd();

      while (s < e) {

        int ch=ca[s];

        if (!isElidableControl(ch)) {

          break;

        }

 else {

          ++s;

        }

      }

      if (s != e) {

        ngb.put(gs.getGlyph(i));

        nal.add(a);

      }

    }

    ngb.flip();

    return new GlyphSequence(gs.getCharacters(),ngb,nal,gs.getPredications());

  }

 else {

    return gs;

  }

}

Location: MultiByteFont.java

Content: 

private int findCharacterFromGlyphIndex(int gi){

  return findCharacterFromGlyphIndex(gi,true);

}

Location: MultiByteFont.java

Content: 

/** 

 * Returns the Unicode scalar value that corresponds to the glyph index. If more than one correspondence exists, then the first one is returned (ordered by bfentries[]).

 * @param gi glyph index

 * @return unicode scalar value

 */

private int findCharacterFromGlyphIndex(int gi,boolean augment){

  int cc=0;

  for (  CMapSegment segment : cmap) {

    int s=segment.getGlyphStartIndex();

    int e=s + (segment.getUnicodeEnd() - segment.getUnicodeStart());

    if ((gi >= s) && (gi <= e)) {

      cc=segment.getUnicodeStart() + (gi - s);

      break;

    }

  }

  if ((cc == 0) && augment) {

    cc=createPrivateUseMapping(gi);

  }

  return cc;

}

Location: MultiByteFont.java

Content: 

/** 

 * Returns the glyph index for a Unicode character. The method returns 0 if there's no such glyph in the character map.

 * @param c the Unicode character index

 * @return the glyph index (or 0 if the glyph is not available)

 */

public int findGlyphIndex(int c){

  int idx=c;

  int retIdx=SingleByteEncoding.NOT_FOUND_CODE_POINT;

  if (idx < NUM_MOST_LIKELY_GLYPHS && mostLikelyGlyphs[idx] != 0) {

    return mostLikelyGlyphs[idx];

  }

  for (  CMapSegment i : cmap) {

    if (retIdx == 0 && i.getUnicodeStart() <= idx && i.getUnicodeEnd() >= idx) {

      retIdx=i.getGlyphStartIndex() + idx - i.getUnicodeStart();

      if (idx < NUM_MOST_LIKELY_GLYPHS) {

        mostLikelyGlyphs[idx]=retIdx;

      }

      if (retIdx != 0) {

        break;

      }

    }

  }

  return retIdx;

}

Location: MultiByteFont.java

Content: 

/** 

 * {@inheritDoc} 

 */

@Override public CIDFontType getCIDType(){

  return cidType;

}

Location: MultiByteFont.java

Content: 

public InputStream getCmapStream(){

  return null;

}

Location: MultiByteFont.java

Content: 

/** 

 * {@inheritDoc} 

 */

@Override public int getDefaultWidth(){

  return defaultWidth;

}

Location: MultiByteFont.java

Content: 

/** 

 * {@inheritDoc} 

 */

@Override public String getOrdering(){

  return "UCS";

}

Location: MultiByteFont.java

Content: 

/** 

 * {@inheritDoc} 

 */

@Override public String getRegistry(){

  return "Adobe";

}

Location: MultiByteFont.java

Content: 

/** 

 * {@inheritDoc} 

 */

@Override public int getSupplement(){

  return 0;

}

Location: MultiByteFont.java

Content: 

/** 

 * Returns the TrueType Collection Name.

 * @return the TrueType Collection Name

 */

public String getTTCName(){

  return ttcName;

}

Location: MultiByteFont.java

Content: 

protected int[] getUnscaledWidths(GlyphSequence gs){

  int[] widths=new int[gs.getGlyphCount()];

  for (int i=0, n=widths.length; i < n; ++i) {

    if (i < width.length) {

      widths[i]=width[i];

    }

  }

  return widths;

}

Location: MultiByteFont.java

Content: 

public LinkedHashMap<Integer,String> getUsedGlyphNames(){

  return usedGlyphNames;

}

Location: MultiByteFont.java

Content: 

/** 

 * Returns a Map of used Glyphs.

 * @return Map Map of used Glyphs

 */

public Map<Integer,Integer> getUsedGlyphs(){

  return cidSet.getGlyphs();

}

Location: MultiByteFont.java

Content: 

public Map<Integer,Integer> getWidthsMap(){

  return null;

}

Location: MultiByteFont.java

Content: 

/** 

 * {@inheritDoc} 

 */

@Override public boolean hasCodePoint(int cp){

  return (findGlyphIndex(cp) != SingleByteEncoding.NOT_FOUND_CODE_POINT);

}

Location: MultiByteFont.java

Content: 

private boolean hasDecomposable(CharSequence cs){

  for (int i=0, n=cs.length(); i < n; i++) {

    int cc=cs.charAt(i);

    if (CharNormalize.isDecomposable(cc)) {

      return true;

    }

  }

  return false;

}

Location: MultiByteFont.java

Content: 

private static boolean hasElidableControl(GlyphSequence gs){

  int[] ca=gs.getCharacterArray(false);

  for (  int ch : ca) {

    if (isElidableControl(ch)) {

      return true;

    }

  }

  return false;

}

Location: MultiByteFont.java

Content: 

private static boolean isElidableControl(int ch){

  if (ch < 0x0020) {

    return true;

  }

 else   if ((ch >= 0x80) && (ch < 0x00A0)) {

    return true;

  }

 else   if ((ch >= 0x2000) && (ch <= 0x206F)) {

    if ((ch >= 0x200B) && (ch <= 0x200F)) {

      return true;

    }

 else     if ((ch >= 0x2028) && (ch <= 0x202E)) {

      return true;

    }

 else     if (ch >= 0x2066) {

      return true;

    }

 else {

      return ch == 0x2060;

    }

  }

 else {

    return false;

  }

}

Location: MultiByteFont.java

Content: 

public boolean isOTFFile(){

  return this.isOTFFile;

}

Location: MultiByteFont.java

Content: 

public boolean isSubsetEmbedded(){

  if (getEmbeddingMode() == EmbeddingMode.FULL) {

    return false;

  }

  return true;

}

Location: MultiByteFont.java

Content: 

/** 

 * Map sequence CS, comprising a sequence of UTF-16 encoded Unicode Code Points, to an output character sequence GS, comprising a sequence of Glyph Indices. N.B. Unlike mapChar(), this method does not make use of embedded subset encodings.

 * @param cs a CharSequence containing UTF-16 encoded Unicode characters

 * @returns a CharSequence containing glyph indices

 */

private GlyphSequence mapCharsToGlyphs(CharSequence cs,List associations){

  IntBuffer cb=IntBuffer.allocate(cs.length());

  IntBuffer gb=IntBuffer.allocate(cs.length());

  int gi;

  int giMissing=findGlyphIndex(Typeface.NOT_FOUND);

  for (int i=0, n=cs.length(); i < n; i++) {

    int cc=cs.charAt(i);

    if ((cc >= 0xD800) && (cc < 0xDC00)) {

      if ((i + 1) < n) {

        int sh=cc;

        int sl=cs.charAt(++i);

        if ((sl >= 0xDC00) && (sl < 0xE000)) {

          cc=0x10000 + ((sh - 0xD800) << 10) + ((sl - 0xDC00) << 0);

        }

 else {

          throw new IllegalArgumentException("ill-formed UTF-16 sequence, " + "contains isolated high surrogate at index " + i);

        }

      }

 else {

        throw new IllegalArgumentException("ill-formed UTF-16 sequence, " + "contains isolated high surrogate at end of sequence");

      }

    }

 else     if ((cc >= 0xDC00) && (cc < 0xE000)) {

      throw new IllegalArgumentException("ill-formed UTF-16 sequence, " + "contains isolated low surrogate at index " + i);

    }

    notifyMapOperation();

    gi=findGlyphIndex(cc);

    if (gi == SingleByteEncoding.NOT_FOUND_CODE_POINT) {

      warnMissingGlyph((char)cc);

      gi=giMissing;

    }

    cb.put(cc);

    gb.put(gi);

  }

  cb.flip();

  gb.flip();

  if ((associations != null) && (associations.size() == cs.length())) {

    associations=new java.util.ArrayList(associations);

  }

 else {

    associations=null;

  }

  return new GlyphSequence(cb,gb,associations);

}

Location: MultiByteFont.java

Content: 

/** 

 * {@inheritDoc} 

 */

@Override public int mapCodePoint(int cp){

  notifyMapOperation();

  int glyphIndex=findGlyphIndex(cp);

  if (glyphIndex == SingleByteEncoding.NOT_FOUND_CODE_POINT) {

    for (    char ch : Character.toChars(cp)) {

      warnMissingGlyph(ch);

    }

    if (!isOTFFile) {

      glyphIndex=findGlyphIndex(Typeface.NOT_FOUND);

    }

  }

  if (isEmbeddable()) {

    glyphIndex=cidSet.mapCodePoint(glyphIndex,cp);

  }

  return (char)glyphIndex;

}

Location: MultiByteFont.java

Content: 

/** 

 * Map sequence GS, comprising a sequence of Glyph Indices, to output sequence CS, comprising a sequence of UTF-16 encoded Unicode Code Points.

 * @param gs a GlyphSequence containing glyph indices

 * @returns a CharSequence containing UTF-16 encoded Unicode characters

 */

private CharSequence mapGlyphsToChars(GlyphSequence gs){

  int ng=gs.getGlyphCount();

  int ccMissing=Typeface.NOT_FOUND;

  List<Character> chars=new ArrayList<Character>(gs.getUTF16CharacterCount());

  for (int i=0, n=ng; i < n; i++) {

    int gi=gs.getGlyph(i);

    int cc=findCharacterFromGlyphIndex(gi);

    if ((cc == 0) || (cc > 0x10FFFF)) {

      cc=ccMissing;

      log.warn("Unable to map glyph index " + gi + " to Unicode scalar in font '"+ getFullName()+ "', substituting missing character '"+ (char)cc+ "'");

    }

    if (cc > 0x00FFFF) {

      int sh;

      int sl;

      cc-=0x10000;

      sh=((cc >> 10) & 0x3FF) + 0xD800;

      sl=((cc >> 0) & 0x3FF) + 0xDC00;

      chars.add((char)sh);

      chars.add((char)sl);

    }

 else {

      chars.add((char)cc);

    }

  }

  CharBuffer cb=CharBuffer.allocate(chars.size());

  for (  char c : chars) {

    cb.put(c);

  }

  cb.flip();

  return cb;

}

Location: MultiByteFont.java

Content: 

public void mapUsedGlyphName(int gid,String value){

  usedGlyphNames.put(gid,value);

}

Location: MultiByteFont.java

Content: 

/** 

 * Default constructor

 */

public MultiByteFont(InternalResourceResolver resourceResolver,EmbeddingMode embeddingMode){

  super(resourceResolver);

  setFontType(FontType.TYPE0);

  setEmbeddingMode(embeddingMode);

  if (embeddingMode != EmbeddingMode.FULL) {

    cidSet=new CIDSubset(this);

  }

 else {

    cidSet=new CIDFull(this);

  }

}

Location: MultiByteFont.java

Content: 

private CharSequence normalize(CharSequence cs,List associations){

  return hasDecomposable(cs) ? decompose(cs,associations) : cs;

}

Location: MultiByteFont.java

Content: 

private int[][] scaleAdjustments(int[][] adjustments,int fontSize){

  if (adjustments != null) {

    for (    int[] gpa : adjustments) {

      for (int k=0; k < 4; k++) {

        gpa[k]=(gpa[k] * fontSize) / 1000;

      }

    }

    return adjustments;

  }

 else {

    return null;

  }

}

Location: MultiByteFont.java

Content: 

/** 

 * Sets the bounding boxes array.

 * @param boundingBoxes array of bounding boxes.

 */

public void setBBoxArray(Rectangle[] boundingBoxes){

  this.boundingBoxes=boundingBoxes;

}

Location: MultiByteFont.java

Content: 

/** 

 * Sets the CIDType.

 * @param cidType The cidType to set

 */

public void setCIDType(CIDFontType cidType){

  this.cidType=cidType;

}

Location: MultiByteFont.java

Content: 

/** 

 * Sets the defaultWidth.

 * @param defaultWidth The defaultWidth to set

 */

public void setDefaultWidth(int defaultWidth){

  this.defaultWidth=defaultWidth;

}

Location: MultiByteFont.java

Content: 

/** 

 * Establishes the glyph definition table.

 * @param gdef the glyph definition table to be used by this font

 */

public void setGDEF(GlyphDefinitionTable gdef){

  if ((this.gdef == null) || (gdef == null)) {

    this.gdef=gdef;

  }

 else {

    throw new IllegalStateException("font already associated with GDEF table");

  }

}

Location: MultiByteFont.java

Content: 

/** 

 * Establishes the glyph positioning table.

 * @param gpos the glyph positioning table to be used by this font

 */

public void setGPOS(GlyphPositioningTable gpos){

  if ((this.gpos == null) || (gpos == null)) {

    this.gpos=gpos;

  }

 else {

    throw new IllegalStateException("font already associated with GPOS table");

  }

}

Location: MultiByteFont.java

Content: 

/** 

 * Establishes the glyph substitution table.

 * @param gsub the glyph substitution table to be used by this font

 */

public void setGSUB(GlyphSubstitutionTable gsub){

  if ((this.gsub == null) || (gsub == null)) {

    this.gsub=gsub;

  }

 else {

    throw new IllegalStateException("font already associated with GSUB table");

  }

}

Location: MultiByteFont.java

Content: 

public void setIsOTFFile(boolean isOTFFile){

  this.isOTFFile=isOTFFile;

}

Location: MultiByteFont.java

Content: 

/** 

 * Sets the the TrueType Collection Name.

 * @param ttcName the TrueType Collection Name

 */

public void setTTCName(String ttcName){

  this.ttcName=ttcName;

}

Location: MultiByteFont.java

Content: 

/** 

 * Sets the width array.

 * @param wds array of widths.

 */

public void setWidthArray(int[] wds){

  this.width=wds;

}

