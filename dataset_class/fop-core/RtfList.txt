Location: RtfList.java

Content: 

/** 

 * Returns true, if the list has a parent table.

 * @return true, if the list has a parent table

 */

public boolean getHasTableParent(){

  return hasTableParent;

}

Location: RtfList.java

Content: 

/** 

 * Returns the Id of the list.

 * @return Id of the list

 */

public Integer getListId(){

  return listId;

}

Location: RtfList.java

Content: 

/** 

 * Returns the Id of the list template.

 * @return Id of the list template

 */

public Integer getListTemplateId(){

  return listTemplateId;

}

Location: RtfList.java

Content: 

/** 

 * Close current list item and start a new one

 * @return new RtfListItem

 * @throws IOException for I/O problems

 */

public RtfListItem newListItem() throws IOException {

  if (item != null) {

    item.close();

  }

  item=new RtfListItem(this,writer);

  return item;

}

Location: RtfList.java

Content: 

/** 

 * Create an RTF list as a child of given container with given attributes 

 */

RtfList(RtfContainer parent,Writer w,RtfAttributes attr) throws IOException {

  super(parent,w,attr);

  listId=listIdGenerator.nextInt();

  listTemplateId=listIdGenerator.nextInt();

  listTable=getRtfFile().startListTable(attr);

  listTable.addList(this);

  hasTableParent=this.getParentOfClass(RtfTable.class) != null;

  this.setRtfListStyle(new RtfListStyleBullet());

}

