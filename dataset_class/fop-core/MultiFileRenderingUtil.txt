Location: MultiFileRenderingUtil.java

Content: 

/** 

 * Creates a new  {@link OutputStream} for the given page number.

 * @param pageNumber the page number (zero-based)

 * @return the output stream for the page

 * @throws IOException if there's an I/O error while setting up the output stream

 */

public OutputStream createOutputStream(int pageNumber) throws IOException {

  if (filePrefix == null) {

    return null;

  }

 else {

    File f=new File(outputDir,filePrefix + (pageNumber + 1) + "."+ fileExtension);

    OutputStream os=new BufferedOutputStream(new FileOutputStream(f));

    return os;

  }

}

Location: MultiFileRenderingUtil.java

Content: 

/** 

 * Creates a new instance. <p> The file name must not have an extension, or must have extension "png", and its last period must not be at the start (empty file prefix).

 * @param ext the extension to be used

 * @param outputFile the output file or null if there's no such information

 */

public MultiFileRenderingUtil(String ext,File outputFile){

  this.fileExtension=ext;

  if (outputFile == null) {

    outputDir=null;

    filePrefix=null;

  }

 else {

    outputDir=outputFile.getParentFile();

    String s=outputFile.getName();

    int i=s.lastIndexOf(".");

    if (i > 0) {

      String extension=s.substring(i + 1).toLowerCase();

      if (!ext.equals(extension)) {

        throw new IllegalArgumentException("Invalid file extension ('" + extension + "') specified");

      }

    }

 else     if (i == -1) {

      i=s.length();

    }

 else {

      throw new IllegalArgumentException("Invalid file name ('" + s + "') specified");

    }

    if (s.charAt(i - 1) == '1') {

      i--;

    }

    filePrefix=s.substring(0,i);

  }

}

