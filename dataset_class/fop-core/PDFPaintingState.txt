Location: PDFPaintingState.java

Content: 

/** 

 * Check if the clip will change the current state. A clip is assumed to be used in a situation where it will add to any clip in the current or parent states. A clip cannot be cleared, this can only be achieved by going to a parent level with the correct clip. If the clip is different then it may start a new state so that it can return to the previous clip.

 * @param cl the clip shape to check

 * @return true if the clip will change the current clip.

 */

public boolean checkClip(Shape cl){

  Shape clip=getPDFData().clip;

  if (clip == null) {

    if (cl != null) {

      return true;

    }

  }

 else   if (!new Area(clip).equals(new Area(cl))) {

    return true;

  }

  return false;

}

Location: PDFPaintingState.java

Content: 

/** 

 * Returns the current character spacing (Tc) value.

 * @return the Tc value

 */

public float getCharacterSpacing(){

  return getPDFData().characterSpacing;

}

Location: PDFPaintingState.java

Content: 

/** 

 * Get the graphics state. This gets the combination of all graphic states for the current context. This is the graphic state set with the gs operator not the other graphic state changes.

 * @return the calculated ExtGState in the current context

 */

public PDFGState getGState(){

  PDFGState defaultState=PDFGState.DEFAULT;

  PDFGState state;

  PDFGState newState=new PDFGState();

  newState.addValues(defaultState);

  for (  AbstractData abstractData : getStateStack()) {

    PDFData data=(PDFData)abstractData;

    state=data.gstate;

    if (state != null) {

      newState.addValues(state);

    }

  }

  if (getPDFData().gstate != null) {

    newState.addValues(getPDFData().gstate);

  }

  return newState;

}

Location: PDFPaintingState.java

Content: 

public String getLayer(){

  return getPDFData().getLayer();

}

Location: PDFPaintingState.java

Content: 

public boolean getLayerChanged(){

  String layerCurrent=getLayer();

  if (layerCurrent == null) {

    return false;

  }

 else   if (getStateStack().isEmpty()) {

    return true;

  }

 else {

    for (int i=getStackLevel(); i > 0; --i) {

      String layerPrev=((PDFData)getStateStack().get(i - 1)).getLayer();

      if (layerPrev == null) {

        continue;

      }

 else {

        return !layerCurrent.equals(layerPrev);

      }

    }

    return true;

  }

}

Location: PDFPaintingState.java

Content: 

private PDFData getPDFData(){

  return (PDFData)getData();

}

Location: PDFPaintingState.java

Content: 

/** 

 * Get the current stack level.

 * @return the current stack level

 */

public int getStackLevel(){

  return getStateStack().size();

}

Location: PDFPaintingState.java

Content: 

/** 

 * PDF State for storing graphics state.

 */

public PDFPaintingState(){

}

Location: PDFPaintingState.java

Content: 

/** 

 * Sets the character spacing (Tc).

 * @param value the new value

 * @return true if the value was changed with respect to the previous value

 */

public boolean setCharacterSpacing(float value){

  PDFData data=getPDFData();

  if (value != data.characterSpacing) {

    data.characterSpacing=value;

    return true;

  }

  return false;

}

Location: PDFPaintingState.java

Content: 

/** 

 * Set the current clip. This either sets a new clip or sets the clip to the intersect of the old clip and the new clip.

 * @param cl the new clip in the current state

 */

public void setClip(Shape cl){

  PDFData data=getPDFData();

  Shape clip=data.clip;

  if (clip != null) {

    Area newClip=new Area(clip);

    newClip.intersect(new Area(cl));

    data.clip=new GeneralPath(newClip);

  }

 else {

    data.clip=cl;

  }

}

Location: PDFPaintingState.java

Content: 

public void setLayer(String layer){

  getPDFData().setLayer(layer);

}

Location: PDFPaintingState.java

Content: 

/** 

 * Set the current paint. This checks if the paint will change and then sets the current paint.

 * @param p the new paint

 * @return true if the new paint changes the current paint

 */

public boolean setPaint(Paint p){

  PDFData data=getPDFData();

  Paint currentPaint=data.paint;

  if (currentPaint == null) {

    if (p != null) {

      data.paint=p;

      return true;

    }

  }

 else   if (p instanceof Color && currentPaint instanceof Color) {

    if (!ColorUtil.isSameColor((Color)p,(Color)currentPaint)) {

      data.paint=p;

      return true;

    }

  }

 else   if (!currentPaint.equals(p)) {

    data.paint=p;

    return true;

  }

  return false;

}

