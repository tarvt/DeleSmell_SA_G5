Location: RtfFontManager.java

Content: 

/** 

 * Adds a font to the table.

 * @param family Identifier of font

 */

private void addFont(String family){

  fontIndex.put(getFontKey(family),fontTable.size());

  fontTable.addElement(family);

}

Location: RtfFontManager.java

Content: 

private String getFontKey(String family){

  return family.toLowerCase();

}

Location: RtfFontManager.java

Content: 

/** 

 * Gets the number of font in the font table

 * @param family Font family name ('Helvetica')

 * @return The number of the font in the table

 */

public int getFontNumber(String family){

  Object o=fontIndex.get(getFontKey(family));

  int retVal;

  if (o == null) {

    addFont(family);

    retVal=fontTable.size() - 1;

  }

 else {

    retVal=(Integer)o;

  }

  return retVal;

}

Location: RtfFontManager.java

Content: 

/** 

 * Constructor.

 */

private RtfFontManager(){

  fontTable=new Vector();

  fontIndex=new Hashtable();

  init();

}

Location: RtfFontManager.java

Content: 

/** 

 * Writes the font table in the header.

 * @param header The header container to write in

 * @throws IOException On error

 */

public void writeFonts(RtfHeader header) throws IOException {

  if (fontTable == null || fontTable.size() == 0) {

    return;

  }

  header.newLine();

  header.writeGroupMark(true);

  header.writeControlWord("fonttbl");

  int len=fontTable.size();

  for (int i=0; i < len; i++) {

    header.writeGroupMark(true);

    header.newLine();

    header.write("\\f" + i);

    header.write(" " + (String)fontTable.elementAt(i));

    header.write(";");

    header.writeGroupMark(false);

  }

  header.newLine();

  header.writeGroupMark(false);

}

