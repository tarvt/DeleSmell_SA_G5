Location: IFStructureTreeBuilder.java

Content: 

private AttributesImpl addIDAttribute(Attributes attributes,String id){

  AttributesImpl atts=new AttributesImpl(attributes);

  atts.addAttribute(InternalElementMapping.URI,InternalElementMapping.STRUCT_ID,InternalElementMapping.STANDARD_PREFIX + ":" + InternalElementMapping.STRUCT_ID,XMLUtil.CDATA,id);

  return atts;

}

Location: IFStructureTreeBuilder.java

Content: 

private AttributesImpl addParentAttribute(AttributesImpl attributes,StructureTreeElement parent){

  if (parent != null) {

    attributes.addAttribute(InternalElementMapping.URI,InternalElementMapping.STRUCT_REF,InternalElementMapping.STANDARD_PREFIX + ":" + InternalElementMapping.STRUCT_REF,XMLConstants.CDATA,((IFStructureTreeElement)parent).getId());

  }

  return attributes;

}

Location: IFStructureTreeBuilder.java

Content: 

private String getNextID(){

  return Integer.toHexString(idCounter++);

}

Location: IFStructureTreeBuilder.java

Content: 

private void prepareRetrievedMarkersEventRecorder(){

  SAXEventRecorder eventRecorder=new SAXEventRecorder();

  retrievedMarkersEventRecorder=eventRecorder;

  delegate=StructureTree2SAXEventAdapter.newInstance(eventRecorder);

}

Location: IFStructureTreeBuilder.java

Content: 

/** 

 * Replay SAX events for a page sequence.

 * @param handler The handler that receives SAX events

 * @param pageSequenceIndex The index of the page sequence

 * @throws SAXException

 */

public void replayEventsForPageSequence(ContentHandler handler,int pageSequenceIndex) throws SAXException {

  pageSequenceEventRecorders.get(pageSequenceIndex).replay(handler);

}

Location: IFStructureTreeBuilder.java

Content: 

public void replayEventsForRetrievedMarkers(ContentHandler handler) throws SAXException {

  if (!retrievedMarkersEventRecorder.events.isEmpty()) {

    delegate=StructureTree2SAXEventAdapter.newInstance(handler);

    delegate.startPageSequence(null,null);

    retrievedMarkersEventRecorder.replay(handler);

    delegate.endPageSequence();

    prepareRetrievedMarkersEventRecorder();

  }

}

