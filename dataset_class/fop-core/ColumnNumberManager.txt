Location: ColumnNumberManager.java

Content: 

/** 

 * Returns the number of the column that shall receive the next parsed cell.

 * @return a column number, 1-based

 */

int getCurrentColumnNumber(){

  return columnNumber;

}

Location: ColumnNumberManager.java

Content: 

/** 

 * Checks whether a given column-number is already in use for the current row.

 * @param colNr the column-number to check

 * @return true if column-number is already occupied

 */

public boolean isColumnNumberUsed(int colNr){

  return usedColumnIndices.get(colNr - 1);

}

Location: ColumnNumberManager.java

Content: 

/** 

 * Resets the record of occupied columns, taking into account columns already occupied by previous spanning cells, and computes the number of the first free column.

 * @param pendingSpans List&lt;PendingSpan&gt; of possible spans over the next row

 */

void prepareForNextRow(List pendingSpans){

  usedColumnIndices.clear();

  PendingSpan pSpan;

  for (int i=0; i < pendingSpans.size(); i++) {

    pSpan=(PendingSpan)pendingSpans.get(i);

    if (pSpan != null) {

      if (pSpan.decrRowsLeft() == 0) {

        pendingSpans.set(i,null);

      }

 else {

        usedColumnIndices.set(i);

      }

    }

  }

  columnNumber=1;

  while (usedColumnIndices.get(columnNumber - 1)) {

    columnNumber++;

  }

}

Location: ColumnNumberManager.java

Content: 

/** 

 * Flags columns <code>start</code> to <code>end</code> as occupied, and updates the number of the next available column.

 * @param start start number, inclusive, 1-based

 * @param end   end number, inclusive

 */

void signalUsedColumnNumbers(int start,int end){

  for (int i=start - 1; i < end; i++) {

    usedColumnIndices.set(i);

  }

  columnNumber=end + 1;

  while (usedColumnIndices.get(columnNumber - 1)) {

    columnNumber++;

  }

}

