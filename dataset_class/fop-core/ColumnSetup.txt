Location: ColumnSetup.java

Content: 

/** 

 * Main Constructor.

 * @param table the table to construct this column setup for

 */

public ColumnSetup(Table table){

  assert table != null;

  this.table=table;

  this.wmTraits=WritingModeTraits.getWritingModeTraitsGetter(table);

  prepareColumns();

  initializeColumnWidths();

}

Location: ColumnSetup.java

Content: 

/** 

 * Works out the base unit for resolving proportional-column-width() [p-c-w(x) = x * base_unit_ipd]

 * @param percentBaseContext the percent base context for relative values

 * @param contentAreaIPD the IPD of the available content area

 * @return the computed base unit (in millipoints)

 */

public float computeTableUnit(PercentBaseContext percentBaseContext,int contentAreaIPD){

  int sumCols=0;

  float factors=0;

  float unit=0;

  for (  Object colWidth1 : colWidths) {

    Length colWidth=(Length)colWidth1;

    if (colWidth != null) {

      sumCols+=colWidth.getValue(percentBaseContext);

      if (colWidth instanceof RelativeNumericProperty) {

        factors+=((RelativeNumericProperty)colWidth).getTableUnits();

      }

 else       if (colWidth instanceof TableColLength) {

        factors+=((TableColLength)colWidth).getTableUnits();

      }

    }

  }

  if (factors > 0) {

    if (sumCols < contentAreaIPD) {

      unit=(contentAreaIPD - sumCols) / factors;

    }

 else {

      log.warn("No space remaining to distribute over columns.");

    }

  }

  return unit;

}

Location: ColumnSetup.java

Content: 

/** 

 * Works out the base unit for resolving proportional-column-width() [p-c-w(x) = x * base_unit_ipd]

 * @param tlm   the TableLayoutManager

 * @return the computed base unit (in millipoint)

 */

protected double computeTableUnit(TableLayoutManager tlm){

  return computeTableUnit(tlm,tlm.getContentAreaIPD());

}

Location: ColumnSetup.java

Content: 

/** 

 * @return the number of columns in the setup. 

 */

public int getColumnCount(){

  if (maxColIndexReferenced > columns.size()) {

    return maxColIndexReferenced;

  }

 else {

    return columns.size();

  }

}

Location: ColumnSetup.java

Content: 

/** 

 * Returns a column. If the index of the column is bigger than the number of explicitly defined columns the last column is returned.

 * @param index index of the column (1 is the first column)

 * @return the requested column

 */

public TableColumn getColumn(int index){

  int size=columns.size();

  if (index > size) {

    if (index > maxColIndexReferenced) {

      maxColIndexReferenced=index;

      TableColumn col=getColumn(1);

      if (!(size == 1 && col.isImplicitColumn())) {

        assert false;

        log.warn(FONode.decorateWithContextInfo("There are fewer table-columns than are needed. " + "Column " + index + " was accessed, but only "+ size+ " columns have been defined. "+ "The last defined column will be reused.",table));

        if (!table.isAutoLayout()) {

          log.warn("Please note that according XSL-FO 1.0 (7.26.9) says that " + "the 'column-width' property must be specified for every " + "column, unless the automatic table layout is used.");

        }

      }

    }

    return (TableColumn)columns.get(size - 1);

  }

 else {

    return (TableColumn)columns.get(index - 1);

  }

}

Location: ColumnSetup.java

Content: 

/** 

 * Calculates the sum of all column widths.

 * @param context the context for percentage based calculations

 * @return the requested sum in millipoints

 */

public int getSumOfColumnWidths(PercentBaseContext context){

  int sum=0;

  for (int i=1, c=getColumnCount(); i <= c; i++) {

    int effIndex=i;

    if (i >= colWidths.size()) {

      effIndex=colWidths.size() - 1;

    }

    if (colWidths.get(effIndex) != null) {

      sum+=((Length)colWidths.get(effIndex)).getValue(context);

    }

  }

  return sum;

}

Location: ColumnSetup.java

Content: 

private int getXOffsetLTR(int col,PercentBaseContext context){

  int xoffset=0;

  for (int i=col; --i >= 0; ) {

    int effCol;

    if (i < colWidths.size()) {

      effCol=i;

    }

 else {

      effCol=colWidths.size() - 1;

    }

    if (colWidths.get(effCol) != null) {

      xoffset+=((Length)colWidths.get(effCol)).getValue(context);

    }

  }

  return xoffset;

}

Location: ColumnSetup.java

Content: 

private int getXOffsetRTL(int col,int nrColSpan,PercentBaseContext context){

  int xoffset=0;

  for (int i=(col + nrColSpan - 1), nc=colWidths.size(); ++i < nc; ) {

    int effCol=i;

    if (colWidths.get(effCol) != null) {

      xoffset+=((Length)colWidths.get(effCol)).getValue(context);

    }

  }

  return xoffset;

}

Location: ColumnSetup.java

Content: 

/** 

 * Determine the X offset of the indicated column, where this offset denotes the left edge of the column irrespective of writing mode. If writing mode's column progression direction is right-to-left, then the first column is the right-most column and the last column is the left-most column; otherwise, the first column is the left-most column.

 * @param col column index (1 is first column)

 * @param nrColSpan number columns spanned (for calculating offset in rtl mode)

 * @param context the context for percentage based calculations

 * @return the X offset of the requested column

 */

public int getXOffset(int col,int nrColSpan,PercentBaseContext context){

  if ((wmTraits != null) && (wmTraits.getColumnProgressionDirection() == Direction.RL)) {

    return getXOffsetRTL(col,nrColSpan,context);

  }

 else {

    return getXOffsetLTR(col,context);

  }

}

Location: ColumnSetup.java

Content: 

/** 

 * Initializes the column's widths

 */

private void initializeColumnWidths(){

  TableColumn col;

  Length colWidth;

  for (int i=columns.size(); --i >= 0; ) {

    if (columns.get(i) != null) {

      col=(TableColumn)columns.get(i);

      colWidth=col.getColumnWidth();

      colWidths.add(0,colWidth);

    }

  }

  colWidths.add(0,null);

}

Location: ColumnSetup.java

Content: 

/** 

 * @return an Iterator over all columns 

 */

public Iterator iterator(){

  return this.columns.iterator();

}

Location: ColumnSetup.java

Content: 

private void prepareColumns(){

  List rawCols=table.getColumns();

  if (rawCols != null) {

    int colnum=1;

    for (    Object rawCol : rawCols) {

      TableColumn col=(TableColumn)rawCol;

      if (col == null) {

        continue;

      }

      colnum=col.getColumnNumber();

      for (int i=0; i < col.getNumberColumnsRepeated(); i++) {

        while (colnum > columns.size()) {

          columns.add(null);

        }

        columns.set(colnum - 1,col);

        colnum++;

      }

    }

    int pos=1;

    for (    Object column : columns) {

      TableColumn col=(TableColumn)column;

      if (col == null) {

        assert false;

      }

      pos++;

    }

  }

}

