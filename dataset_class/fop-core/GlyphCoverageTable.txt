Location: GlyphCoverageTable.java

Content: 

/** 

 * Create glyph coverage table.

 * @param entries list of mapped or ranged coverage entries, or null or empty list

 * @return a new covera table instance

 */

public static GlyphCoverageTable createCoverageTable(List entries){

  GlyphCoverageMapping cm;

  if ((entries == null) || (entries.size() == 0)) {

    cm=new EmptyCoverageTable(entries);

  }

 else   if (isMappedCoverage(entries)) {

    cm=new MappedCoverageTable(entries);

  }

 else   if (isRangeCoverage(entries)) {

    cm=new RangeCoverageTable(entries);

  }

 else {

    cm=null;

  }

  assert cm != null : "unknown coverage type";

  return new GlyphCoverageTable(cm);

}

Location: GlyphCoverageTable.java

Content: 

private GlyphCoverageTable(GlyphCoverageMapping cm){

  assert cm != null;

  assert cm instanceof GlyphMappingTable;

  this.cm=cm;

}

Location: GlyphCoverageTable.java

Content: 

private static boolean isMappedCoverage(List entries){

  if ((entries == null) || (entries.size() == 0)) {

    return false;

  }

 else {

    for (    Object o : entries) {

      if (!(o instanceof Integer)) {

        return false;

      }

    }

    return true;

  }

}

Location: GlyphCoverageTable.java

Content: 

private static boolean isRangeCoverage(List entries){

  if ((entries == null) || (entries.size() == 0)) {

    return false;

  }

 else {

    for (    Object o : entries) {

      if (!(o instanceof MappingRange)) {

        return false;

      }

    }

    return true;

  }

}

