Location: ArcToBezierCurveTransformerTestCase.java

Content: 

private void assertAngleWithinFirstQuadrant(double angle){

  if (angle <= 0 || angle > Math.PI / 2) {

    fail("Angle " + angle + " is in (0, "+ Math.PI / 2 + ")");

  }

}

Location: ArcToBezierCurveTransformerTestCase.java

Content: 

private void testArcTo(double startAngle,double endAngle,int xCenter,int yCenter,int width,int height) throws IOException {

  assertAngleWithinFirstQuadrant(startAngle);

  assertAngleWithinFirstQuadrant(endAngle);

  BezierCurvePainter bezierCurvePainter=mock(BezierCurvePainter.class);

  ArcToBezierCurveTransformer sut=new ArcToBezierCurveTransformer(bezierCurvePainter);

  sut.arcTo(startAngle,endAngle,xCenter,yCenter,width,height);

  double tan1=Math.tan(startAngle);

  double tan2=Math.tan(endAngle);

  double lambda1=Math.atan(height * tan1 / width);

  double lambda2=Math.atan(height * tan2 / width);

  double xStart=width * Math.cos(lambda1) + xCenter;

  double yStart=height * Math.sin(lambda1) + yCenter;

  double xEnd=width * Math.cos(lambda2) + xCenter;

  double yEnd=height * Math.sin(lambda2) + yCenter;

  ArgumentCaptor<Integer> xP1Captor=ArgumentCaptor.forClass(Integer.class);

  ArgumentCaptor<Integer> yP1Captor=ArgumentCaptor.forClass(Integer.class);

  ArgumentCaptor<Integer> xP2Captor=ArgumentCaptor.forClass(Integer.class);

  ArgumentCaptor<Integer> yP2Captor=ArgumentCaptor.forClass(Integer.class);

  ArgumentCaptor<Integer> xP3Captor=ArgumentCaptor.forClass(Integer.class);

  ArgumentCaptor<Integer> yP3Captor=ArgumentCaptor.forClass(Integer.class);

  verify(bezierCurvePainter).cubicBezierTo(xP1Captor.capture(),yP1Captor.capture(),xP2Captor.capture(),yP2Captor.capture(),xP3Captor.capture(),yP3Captor.capture());

  int xP1=xP1Captor.getValue();

  int yP1=yP1Captor.getValue();

  int xP2=xP2Captor.getValue();

  int yP2=yP2Captor.getValue();

  int xP3=xP3Captor.getValue();

  int yP3=yP3Captor.getValue();

  assertEquals((yP1 - yStart) / (xP1 - xStart),-width * width / height / height / tan1,0.01);

  assertEquals((yP2 - yEnd) / (xP2 - xEnd),-width * width / height / height / tan2,0.01);

  assertEquals((int)xEnd,xP3);

  assertEquals((int)yEnd,yP3);

}

