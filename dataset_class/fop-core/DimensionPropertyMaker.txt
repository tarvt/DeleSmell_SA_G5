Location: DimensionPropertyMaker.java

Content: 

/** 

 * {@inheritDoc} 

 */

public Property compute(PropertyList propertyList) throws PropertyException {

  Property p=super.compute(propertyList);

  if (p == null) {

    p=baseMaker.make(propertyList);

  }

  int wmcorr=propertyList.selectFromWritingMode(extraCorresponding[0][0],extraCorresponding[0][1],extraCorresponding[0][2],extraCorresponding[0][3]);

  Property subprop=propertyList.getExplicitOrShorthand(wmcorr);

  if (subprop != null) {

    baseMaker.setSubprop(p,Constants.CP_MINIMUM,subprop);

  }

  wmcorr=propertyList.selectFromWritingMode(extraCorresponding[1][0],extraCorresponding[1][1],extraCorresponding[1][2],extraCorresponding[1][3]);

  subprop=propertyList.getExplicitOrShorthand(wmcorr);

  if (subprop != null) {

    baseMaker.setSubprop(p,Constants.CP_MAXIMUM,subprop);

  }

  return p;

}

Location: DimensionPropertyMaker.java

Content: 

/** 

 * Instantiate a dimension property maker.

 * @param baseMaker the base property maker

 */

public DimensionPropertyMaker(PropertyMaker baseMaker){

  super(baseMaker);

}

Location: DimensionPropertyMaker.java

Content: 

/** 

 * Determine if corresponding property is forced.

 * @param propertyList the property list to use

 * @return true if it is forced

 */

public boolean isCorrespondingForced(PropertyList propertyList){

  if (super.isCorrespondingForced(propertyList)) {

    return true;

  }

  for (  int[] anExtraCorresponding : extraCorresponding) {

    int wmcorr=anExtraCorresponding[0];

    if (propertyList.getExplicit(wmcorr) != null) {

      return true;

    }

  }

  return false;

}

Location: DimensionPropertyMaker.java

Content: 

/** 

 * Set extra correspondences.

 * @param extraCorresponding an array of four element integer arrays

 */

public void setExtraCorresponding(int[][] extraCorresponding){

  if (extraCorresponding == null) {

    throw new NullPointerException();

  }

  for (int i=0; i < extraCorresponding.length; i++) {

    int[] eca=extraCorresponding[i];

    if ((eca == null) || (eca.length != 4)) {

      throw new IllegalArgumentException("bad sub-array @ [" + i + "]");

    }

  }

  this.extraCorresponding=extraCorresponding;

}

