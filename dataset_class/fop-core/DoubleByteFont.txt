Location: DoubleByteFont.java

Content: 

/** 

 * Constructor for an double-byte outline font.

 * @param name the name of the font

 * @param embeddable whether or not this font is embeddable

 * @param charSet the character set

 * @param eventProducer Handles any AFP related events

 */

public DoubleByteFont(String name,boolean embeddable,CharacterSet charSet,AFPEventProducer eventProducer){

  super(name,embeddable,charSet,eventProducer);

  charsProcessed=new HashSet<Integer>();

}

Location: DoubleByteFont.java

Content: 

private Rectangle getBoundingBoxOrNull(int character,int size){

  Rectangle characterBox=null;

  try {

    characterBox=charSet.getCharacterBox(toUnicodeCodepoint(character),size);

  }

 catch (  IllegalArgumentException e) {

    if (!charsProcessed.contains(character)) {

      charsProcessed.add(character);

      getAFPEventProducer().charactersetMissingMetrics(this,(char)character,charSet.getName().trim());

    }

  }

  return characterBox;

}

Location: DoubleByteFont.java

Content: 

private Rectangle getDefaultCharacterBox(int character,int size){

  return getBoundingBoxOrNull('-',size);

}

Location: DoubleByteFont.java

Content: 

private int getDefaultCharacterWidth(int character){

  int nominalCharIncrement=charSet.getNominalCharIncrement();

  if (nominalCharIncrement > 0) {

    return nominalCharIncrement;

  }

 else {

    return inferCharWidth(character);

  }

}

Location: DoubleByteFont.java

Content: 

private int inferCharWidth(int character){

  boolean isIdeographic=false;

  Character.UnicodeBlock charBlock=Character.UnicodeBlock.of((char)character);

  if (charBlock == null) {

    isIdeographic=false;

  }

 else   if (IDEOGRAPHIC.contains(charBlock)) {

    isIdeographic=true;

  }

 else {

    isIdeographic=false;

  }

  if (isIdeographic) {

    return charSet.getEmSpaceIncrement();

  }

 else {

    return charSet.getSpaceIncrement();

  }

}

