Location: PDFGraphicsPainterTestCase.java

Content: 

@Test public void arcTo() throws IOException {

  int width=10;

  int height=10;

  int x=0;

  int y=0;

  double startAngle=0;

  double endAngle=Math.PI / 2;

  sut.arcTo(startAngle,endAngle,x,y,width,height);

  verify(generator).add(endsWith(" c "));

}

Location: PDFGraphicsPainterTestCase.java

Content: 

@Test public void clip(){

  sut.clip();

  verify(generator).add(opln("W\nn"));

}

Location: PDFGraphicsPainterTestCase.java

Content: 

@Test public void closePath(){

  sut.closePath();

  verify(generator).add(op("h"));

}

Location: PDFGraphicsPainterTestCase.java

Content: 

@Test public void cubicBezierTo(){

  int[] args=new int[]{1,2,3,4,5,6};

  sut.cubicBezierTo(args[0],args[1],args[2],args[3],args[4],args[5]);

  verify(generator).add(op("c",args));

}

Location: PDFGraphicsPainterTestCase.java

Content: 

private float format(int i){

  return (float)i / 1000;

}

Location: PDFGraphicsPainterTestCase.java

Content: 

@Test public void lineTo(){

  int x=10;

  int y=20;

  sut.lineTo(x,y);

  verify(generator).add(op("l",x,y));

}

Location: PDFGraphicsPainterTestCase.java

Content: 

@Test public void moveTo(){

  int x=10;

  int y=20;

  sut.moveTo(x,y);

  verify(generator).add(op("m",x,y));

}

Location: PDFGraphicsPainterTestCase.java

Content: 

private String opf(String op,float... args){

  return opf(op," ",args);

}

Location: PDFGraphicsPainterTestCase.java

Content: 

private String opf(String op,String ending,float... args){

  StringBuilder sb=new StringBuilder();

  for (  float arg : args) {

    sb.append("" + PDFNumber.doubleOut(arg) + " ");

  }

  return sb.append(op.trim()).append(ending).toString();

}

Location: PDFGraphicsPainterTestCase.java

Content: 

private String opln(String op,int... args){

  return op(op,"\n",args);

}

Location: PDFGraphicsPainterTestCase.java

Content: 

private String op(String op,int... args){

  return op(op," ",args);

}

Location: PDFGraphicsPainterTestCase.java

Content: 

private String op(String op,String ending,int... args){

  float[] formattedArgs=new float[args.length];

  for (int i=0; i < args.length; i++) {

    formattedArgs[i]=format(args[i]);

  }

  return opf(op,ending,formattedArgs);

}

Location: PDFGraphicsPainterTestCase.java

Content: 

@Test public void restoreGraphicsState(){

  sut.restoreGraphicsState();

  verify(generator).add(opln("Q"));

}

Location: PDFGraphicsPainterTestCase.java

Content: 

@Test public void rotateCoordinates() throws IOException {

  double angle=0;

  float s=(float)Math.sin(angle);

  float c=(float)Math.cos(angle);

  sut.rotateCoordinates(angle);

  testTransformCoordinatesF(c,s,-s,c,0,0);

}

Location: PDFGraphicsPainterTestCase.java

Content: 

@Test public void saveGraphicsState(){

  sut.saveGraphicsState();

  verify(generator).add(opln("q"));

}

Location: PDFGraphicsPainterTestCase.java

Content: 

@Test public void scaleCoordinates() throws IOException {

  float xScaleFactor=10f;

  float yScaleFactor=2f;

  sut.scaleCoordinates(xScaleFactor,yScaleFactor);

  testTransformCoordinatesF(xScaleFactor,0f,0f,yScaleFactor,0f,0f);

}

Location: PDFGraphicsPainterTestCase.java

Content: 

private void testTransformCoordinatesF(float... args){

  verify(generator).add(opf("cm",args));

}

Location: PDFGraphicsPainterTestCase.java

Content: 

private void testTransformCoordinates(int... args){

  verify(generator).add(op("cm",args));

}

Location: PDFGraphicsPainterTestCase.java

Content: 

@Test public void translateCoordinates() throws IOException {

  int x=10;

  int y=20;

  sut.translateCoordinates(x,y);

  testTransformCoordinates(1000,0,0,1000,x,y);

}

