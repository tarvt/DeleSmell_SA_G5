Location: HyphenationTree.java

Content: 

/** 

 * Add a character class to the tree. It is used by {@link PatternParser PatternParser} as callback toadd character classes. Character classes define the valid word characters for hyphenation. If a word contains a character not defined in any of the classes, it is not hyphenated. It also defines a way to normalize the characters in order to compare them with the stored patterns. Usually pattern files use only lower case characters, in this case a class for letter 'a', for example, should be defined as "aA", the first character being the normalization char.

 * @param chargroup a character class (group)

 */

public void addClass(String chargroup){

  if (chargroup.length() > 0) {

    char equivChar=chargroup.charAt(0);

    char[] key=new char[2];

    key[1]=0;

    for (int i=0; i < chargroup.length(); i++) {

      key[0]=chargroup.charAt(i);

      classmap.insert(key,0,equivChar);

    }

  }

}

Location: HyphenationTree.java

Content: 

/** 

 * Add an exception to the tree. It is used by {@link PatternParser PatternParser} class as callback tostore the hyphenation exceptions.

 * @param word normalized word

 * @param hyphenatedword a vector of alternating strings and{@link Hyphen hyphen} objects.

 */

public void addException(String word,ArrayList hyphenatedword){

  stoplist.put(word,hyphenatedword);

}

Location: HyphenationTree.java

Content: 

/** 

 * Add a pattern to the tree. Mainly, to be used by {@link PatternParser PatternParser} class as callback toadd a pattern to the tree.

 * @param pattern the hyphenation pattern

 * @param ivalue interletter weight values indicating thedesirability and priority of hyphenating at a given point within the pattern. It should contain only digit characters. (i.e. '0' to '9').

 */

public void addPattern(String pattern,String ivalue){

  int k=ivalues.find(ivalue);

  if (k <= 0) {

    k=packValues(ivalue);

    ivalues.insert(ivalue,(char)k);

  }

  insert(pattern,(char)k);

}

Location: HyphenationTree.java

Content: 

private int calcForeWordsSize(List<char[]> nonLetterWords,int iNonLetterWord){

  int result=0;

  for (int i=0; i < iNonLetterWord; i++) {

    result+=nonLetterWords.get(i).length + 1;

  }

  return result;

}

Location: HyphenationTree.java

Content: 

/** 

 * Find pattern.

 * @param pat a pattern

 * @return a string

 */

public String findPattern(String pat){

  int k=super.find(pat);

  if (k >= 0) {

    return unpackValues(k);

  }

  return "";

}

Location: HyphenationTree.java

Content: 

private int[] getHyphPointsForWords(List<char[]> nonLetterWords,int remainCharCount,int pushCharCount){

  int[] breaks=new int[0];

  for (int iNonLetterWord=0; iNonLetterWord < nonLetterWords.size(); iNonLetterWord++) {

    char[] nonLetterWord=nonLetterWords.get(iNonLetterWord);

    Hyphenation curHyph=hyphenate(nonLetterWord,0,nonLetterWord.length,(iNonLetterWord == 0) ? remainCharCount : 1,(iNonLetterWord == nonLetterWords.size() - 1) ? pushCharCount : 1);

    if (curHyph == null) {

      continue;

    }

    int[] combined=new int[breaks.length + curHyph.getHyphenationPoints().length];

    int[] hyphPoints=curHyph.getHyphenationPoints();

    int foreWordsSize=calcForeWordsSize(nonLetterWords,iNonLetterWord);

    for (int i=0; i < hyphPoints.length; i++) {

      hyphPoints[i]+=foreWordsSize;

    }

    System.arraycopy(breaks,0,combined,0,breaks.length);

    System.arraycopy(hyphPoints,0,combined,breaks.length,hyphPoints.length);

    breaks=combined;

  }

  return breaks;

}

Location: HyphenationTree.java

Content: 

private List<Integer> getNonLetterBreaks(char[] word){

  char[] c=new char[2];

  List<Integer> breakPoints=new ArrayList<Integer>();

  boolean foundLetter=false;

  for (int i=0; i < word.length; i++) {

    c[0]=word[i];

    if (classmap.find(c,0) < 0) {

      if (foundLetter) {

        breakPoints.add(i);

      }

    }

 else {

      foundLetter=true;

    }

  }

  return breakPoints;

}

Location: HyphenationTree.java

Content: 

/** 

 * Get values.

 * @param k an integer

 * @return a byte array

 */

protected byte[] getValues(int k){

  StringBuffer buf=new StringBuffer();

  byte v=vspace.get(k++);

  while (v != 0) {

    char c=(char)((v >>> 4) - 1);

    buf.append(c);

    c=(char)(v & 0x0f);

    if (c == 0) {

      break;

    }

    c=(char)(c - 1);

    buf.append(c);

    v=vspace.get(k++);

  }

  byte[] res=new byte[buf.length()];

  for (int i=0; i < res.length; i++) {

    res[i]=(byte)buf.charAt(i);

  }

  return res;

}

Location: HyphenationTree.java

Content: 

private char[] getWordFromCharArray(char[] word,int startIndex,int endIndex){

  char[] newWord=new char[endIndex - ((startIndex == 0) ? startIndex : startIndex + 1)];

  int iChar=0;

  for (int i=(startIndex == 0) ? 0 : startIndex + 1; i < endIndex; i++) {

    newWord[iChar++]=word[i];

  }

  return newWord;

}

Location: HyphenationTree.java

Content: 

/** 

 * String compare, returns 0 if equal or t is a substring of s.

 * @param s first character array

 * @param si starting index into first array

 * @param t second character array

 * @param ti starting index into second array

 * @return an integer

 */

protected int hstrcmp(char[] s,int si,char[] t,int ti){

  for (; s[si] == t[ti]; si++, ti++) {

    if (s[si] == 0) {

      return 0;

    }

  }

  if (t[ti] == 0) {

    return 0;

  }

  return s[si] - t[ti];

}

Location: HyphenationTree.java

Content: 

/** 

 * Hyphenate word and return an array of hyphenation points.

 * @param w char array that contains the word

 * @param offset Offset to first character in word

 * @param len Length of word

 * @param remainCharCount Minimum number of characters allowedbefore the hyphenation point.

 * @param pushCharCount Minimum number of characters allowed afterthe hyphenation point.

 * @return a {@link Hyphenation Hyphenation} object representingthe hyphenated word or null if word is not hyphenated.

 */

public Hyphenation hyphenate(char[] w,int offset,int len,int remainCharCount,int pushCharCount){

  int i;

  char[] word=new char[len + 3];

  char[] c=new char[2];

  int iIgnoreAtBeginning=0;

  int iLength=len;

  boolean bEndOfLetters=false;

  for (i=1; i <= len; i++) {

    c[0]=w[offset + i - 1];

    int nc=classmap.find(c,0);

    if (nc < 0) {

      if (i == (1 + iIgnoreAtBeginning)) {

        iIgnoreAtBeginning++;

      }

 else {

        bEndOfLetters=true;

      }

      iLength--;

    }

 else {

      if (!bEndOfLetters) {

        word[i - iIgnoreAtBeginning]=(char)nc;

      }

 else {

        return null;

      }

    }

  }

  len=iLength;

  if (len < (remainCharCount + pushCharCount)) {

    return null;

  }

  int[] result=new int[len + 1];

  int k=0;

  String sw=new String(word,1,len);

  if (stoplist.containsKey(sw)) {

    ArrayList hw=(ArrayList)stoplist.get(sw);

    int j=0;

    for (i=0; i < hw.size(); i++) {

      Object o=hw.get(i);

      if (o instanceof String) {

        j+=((String)o).length();

        if (j >= remainCharCount && j < (len - pushCharCount)) {

          result[k++]=j + iIgnoreAtBeginning;

        }

      }

    }

  }

 else {

    word[0]='.';

    word[len + 1]='.';

    word[len + 2]=0;

    byte[] il=new byte[len + 3];

    for (i=0; i < len + 1; i++) {

      searchPatterns(word,i,il);

    }

    for (i=0; i < len; i++) {

      if (((il[i + 1] & 1) == 1) && i >= remainCharCount && i <= (len - pushCharCount)) {

        result[k++]=i + iIgnoreAtBeginning;

      }

    }

  }

  if (k > 0) {

    int[] res=new int[k];

    System.arraycopy(result,0,res,0,k);

    return new Hyphenation(new String(w,offset,len),res);

  }

 else {

    return null;

  }

}

Location: HyphenationTree.java

Content: 

/** 

 * Hyphenate word and return a Hyphenation object.

 * @param word the word to be hyphenated

 * @param remainCharCount Minimum number of characters allowedbefore the hyphenation point.

 * @param pushCharCount Minimum number of characters allowed afterthe hyphenation point.

 * @return a {@link Hyphenation Hyphenation} object representingthe hyphenated word or null if word is not hyphenated.

 */

public Hyphenation hyphenate(String word,int remainCharCount,int pushCharCount){

  char[] w=word.toCharArray();

  if (isMultiPartWord(w,w.length)) {

    List<char[]> words=splitOnNonCharacters(w);

    return new Hyphenation(new String(w),getHyphPointsForWords(words,remainCharCount,pushCharCount));

  }

 else {

    return hyphenate(w,0,w.length,remainCharCount,pushCharCount);

  }

}

Location: HyphenationTree.java

Content: 

/** 

 * Default constructor. 

 */

public HyphenationTree(){

  stoplist=new HashMap(23);

  classmap=new TernaryTree();

  vspace=new ByteVector();

  vspace.alloc(1);

}

Location: HyphenationTree.java

Content: 

private boolean isMultiPartWord(char[] w,int len){

  int wordParts=0;

  for (int i=0; i < len; i++) {

    char[] c=new char[2];

    c[0]=w[i];

    int nc=classmap.find(c,0);

    if (nc > 0) {

      if (wordParts > 1) {

        return true;

      }

      wordParts=1;

    }

 else {

      if (wordParts == 1) {

        wordParts++;

      }

    }

  }

  return false;

}

Location: HyphenationTree.java

Content: 

/** 

 * Read hyphenation patterns from an XML file.

 * @param source the InputSource for the file

 * @throws HyphenationException In case the parsing fails

 */

public void loadPatterns(InputSource source) throws HyphenationException {

  PatternParser pp=new PatternParser(this);

  ivalues=new TernaryTree();

  pp.parse(source);

  trimToSize();

  vspace.trimToSize();

  classmap.trimToSize();

  ivalues=null;

}

Location: HyphenationTree.java

Content: 

/** 

 * Read hyphenation patterns from an XML file.

 * @param filename the filename

 * @throws HyphenationException In case the parsing fails

 */

public void loadPatterns(String filename) throws HyphenationException {

  File f=new File(filename);

  try {

    InputSource src=new InputSource(f.toURI().toURL().toExternalForm());

    loadPatterns(src);

  }

 catch (  MalformedURLException e) {

    throw new HyphenationException("Error converting the File '" + f + "' to a URL: "+ e.getMessage());

  }

}

Location: HyphenationTree.java

Content: 

/** 

 * Packs the values by storing them in 4 bits, two values into a byte Values range is from 0 to 9. We use zero as terminator, so we'll add 1 to the value.

 * @param values a string of digits from '0' to '9' representing theinterletter values.

 * @return the index into the vspace array where the packed valuesare stored.

 */

protected int packValues(String values){

  int i;

  int n=values.length();

  int m=(n & 1) == 1 ? (n >> 1) + 2 : (n >> 1) + 1;

  int offset=vspace.alloc(m);

  byte[] va=vspace.getArray();

  for (i=0; i < n; i++) {

    int j=i >> 1;

    byte v=(byte)((values.charAt(i) - '0' + 1) & 0x0f);

    if ((i & 1) == 1) {

      va[j + offset]=(byte)(va[j + offset] | v);

    }

 else {

      va[j + offset]=(byte)(v << 4);

    }

  }

  va[m - 1 + offset]=0;

  return offset;

}

Location: HyphenationTree.java

Content: 

private void readObject(ObjectInputStream ois) throws ClassNotFoundException, IOException {

  ois.defaultReadObject();

}

Location: HyphenationTree.java

Content: 

/** 

 * <p>Search for all possible partial matches of word starting at index an update interletter values. In other words, it does something like:</p> <code> for(i=0; i&lt;patterns.length; i++) { if ( word.substring(index).startsWidth(patterns[i]) ) update_interletter_values(patterns[i]); } </code> <p>But it is done in an efficient way since the patterns are stored in a ternary tree. In fact, this is the whole purpose of having the tree: doing this search without having to test every single pattern. The number of patterns for languages such as English range from 4000 to 10000. Thus, doing thousands of string comparisons for each word to hyphenate would be really slow without the tree. The tradeoff is memory, but using a ternary tree instead of a trie, almost halves the the memory used by Lout or TeX. It's also faster than using a hash table</p>

 * @param word null terminated word to match

 * @param index start index from word

 * @param il interletter values array to update

 */

protected void searchPatterns(char[] word,int index,byte[] il){

  byte[] values;

  int i=index;

  char p;

  char q;

  char sp=word[i];

  p=root;

  while (p > 0 && p < sc.length) {

    if (sc[p] == 0xFFFF) {

      if (hstrcmp(word,i,kv.getArray(),lo[p]) == 0) {

        values=getValues(eq[p]);

        int j=index;

        for (        byte value : values) {

          if (j < il.length && value > il[j]) {

            il[j]=value;

          }

          j++;

        }

      }

      return;

    }

    int d=sp - sc[p];

    if (d == 0) {

      if (sp == 0) {

        break;

      }

      sp=word[++i];

      p=eq[p];

      q=p;

      while (q > 0 && q < sc.length) {

        if (sc[q] == 0xFFFF) {

          break;

        }

        if (sc[q] == 0) {

          values=getValues(eq[q]);

          int j=index;

          for (          byte value : values) {

            if (j < il.length && value > il[j]) {

              il[j]=value;

            }

            j++;

          }

          break;

        }

 else {

          q=lo[q];

        }

      }

    }

 else {

      p=d < 0 ? lo[p] : hi[p];

    }

  }

}

Location: HyphenationTree.java

Content: 

private List<char[]> splitOnNonCharacters(char[] word){

  List<Integer> breakPoints=getNonLetterBreaks(word);

  if (breakPoints.size() == 0) {

    return Collections.emptyList();

  }

  List<char[]> words=new ArrayList<char[]>();

  for (int ibreak=0; ibreak < breakPoints.size(); ibreak++) {

    char[] newWord=getWordFromCharArray(word,((ibreak == 0) ? 0 : breakPoints.get(ibreak - 1)),breakPoints.get(ibreak));

    words.add(newWord);

  }

  if (word.length - breakPoints.get(breakPoints.size() - 1) - 1 > 1) {

    char[] newWord=getWordFromCharArray(word,breakPoints.get(breakPoints.size() - 1),word.length);

    words.add(newWord);

  }

  return words;

}

Location: HyphenationTree.java

Content: 

/** 

 * Unpack values.

 * @param k an integer

 * @return a string

 */

protected String unpackValues(int k){

  StringBuffer buf=new StringBuffer();

  byte v=vspace.get(k++);

  while (v != 0) {

    char c=(char)((v >>> 4) - 1 + '0');

    buf.append(c);

    c=(char)(v & 0x0f);

    if (c == 0) {

      break;

    }

    c=(char)(c - 1 + '0');

    buf.append(c);

    v=vspace.get(k++);

  }

  return buf.toString();

}

