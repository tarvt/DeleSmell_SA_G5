Location: PDFObjectTestCase.java

Content: 

/** 

 * Tests getGeneration() - returns the generation number of the underlying PDF object.

 */

@Test public void testGetGeneration(){

  assertEquals(0,pdfObjectUnderTest.getGeneration());

}

Location: PDFObjectTestCase.java

Content: 

/** 

 * Test getObjectID() - returns the PDF object ID.

 */

@Test public void testGetObjectID(){

  pdfObjectUnderTest.setObjectNumber(10);

  assertEquals("10 0 obj\n",pdfObjectUnderTest.getObjectID());

}

Location: PDFObjectTestCase.java

Content: 

/** 

 * Tests hasObjectNumber() - returns the object number of the underlying PDF object.

 */

@Test public void testHasObjectNumber(){

  assertFalse(pdfObjectUnderTest.hasObjectNumber());

  pdfObjectUnderTest.setObjectNumber(1);

  assertTrue(pdfObjectUnderTest.hasObjectNumber());

}

Location: PDFObjectTestCase.java

Content: 

/** 

 * Test makeReference() - returns this object represented as a  {@link PDFReference}.

 */

@Test public void testMakeReference(){

  pdfObjectUnderTest.setObjectNumber(10);

  PDFReference ref=pdfObjectUnderTest.makeReference();

  assertEquals(pdfObjectUnderTest.getObjectNumber(),ref.getObjectNumber());

  assertEquals(pdfObjectUnderTest,ref.getObject());

  assertEquals(pdfObjectUnderTest.referencePDF(),ref.toString());

}

Location: PDFObjectTestCase.java

Content: 

/** 

 * A generic method to test output() for sub-classes of (@link PDFObject}. The expected String should be formatted such that the object number and object descriptor aren't printed i.e. for a simple integer object in PDF: <pre> 1 0 obj  ** ommited from expectedString 10 endobj   ** ommited from expectedString </pre> Thus the expected string would be "10".

 * @param expectedString the string that is expected.

 * @param object the object being tested

 * @throws IOException error with I/O

 */

protected void testOutputStreams(String expectedString,PDFObject object) throws IOException {

  ByteArrayOutputStream outStream=new ByteArrayOutputStream();

  object.setObjectNumber(0);

  assertEquals(expectedString.length(),object.output(outStream));

  assertEquals(expectedString,outStream.toString());

  outStream.reset();

  object.setObjectNumber(1);

  assertEquals(expectedString.length(),object.output(outStream));

  assertEquals(expectedString,outStream.toString());

}

Location: PDFObjectTestCase.java

Content: 

/** 

 * Tests PDF object references.

 * @throws Exception if an error occurs

 */

@Test public void testReference() throws Exception {

  PDFDictionary dict=new PDFDictionary();

  dict.setObjectNumber(7);

  PDFReference ref=dict.makeReference();

  assertEquals(ref.getObjectNumber().getNumber(),7);

  assertEquals(ref.getGeneration(),0);

  assertEquals(ref.toString(),"7 0 R");

  ref=new PDFReference("8 0 R");

  assertEquals(ref.getObjectNumber().getNumber(),8);

  assertEquals(ref.getGeneration(),0);

  assertEquals(ref.toString(),"8 0 R");

}

Location: PDFObjectTestCase.java

Content: 

/** 

 * Test referencePDF() - returns a  {@link String} in PDF format to reference this object.

 */

@Test public void testReferencePDF(){

  try {

    pdfObjectUnderTest.referencePDF();

    fail("The object number is not set, an exception should be thrown");

  }

 catch (  IllegalArgumentException e) {

  }

  pdfObjectUnderTest.setObjectNumber(10);

  assertEquals("10 0 R",pdfObjectUnderTest.referencePDF());

}

Location: PDFObjectTestCase.java

Content: 

/** 

 * Tests setDocument() - returns the document to which this object is bound.

 */

@Test public void testSetDocument(){

  assertEquals(doc,pdfObjectUnderTest.getDocument());

  PDFDocument anotherDoc=new PDFDocument("another test");

  pdfObjectUnderTest.setDocument(anotherDoc);

  assertEquals(anotherDoc,pdfObjectUnderTest.getDocument());

}

Location: PDFObjectTestCase.java

Content: 

/** 

 * Tests setObjectNumber()

 */

@Test public void testSetObjectNumber(){

  pdfObjectUnderTest.setObjectNumber(1);

  assertEquals(1,pdfObjectUnderTest.getObjectNumber().getNumber());

  pdfObjectUnderTest.setObjectNumber(5);

  assertEquals(5,pdfObjectUnderTest.getObjectNumber().getNumber());

}

Location: PDFObjectTestCase.java

Content: 

/** 

 * Tests setParent() - assigns the object a parent.

 */

@Test public void testSetParent(){

  assertEquals(parent,pdfObjectUnderTest.getParent());

  DummyPDFObject anotherParent=new DummyPDFObject();

  pdfObjectUnderTest.setParent(anotherParent);

  assertEquals(anotherParent,pdfObjectUnderTest.getParent());

}

