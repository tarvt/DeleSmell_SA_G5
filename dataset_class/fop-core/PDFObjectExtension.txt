Location: PDFObjectExtension.java

Content: 

/** 

 * Obtain entry value as Boolean.

 * @return entry value

 */

public Boolean getValueAsBoolean(){

  Object value=getValue();

  if (value instanceof Boolean) {

    return (Boolean)value;

  }

 else   if (value instanceof String) {

    return Boolean.valueOf((String)value);

  }

 else {

    return false;

  }

}

Location: PDFObjectExtension.java

Content: 

/** 

 * Obtain entry value as Number.

 * @return entry value

 */

public Number getValueAsNumber(){

  Object value=getValue();

  if (value instanceof Number) {

    return (Number)value;

  }

 else   if (value instanceof String) {

    double d=Double.parseDouble((String)value);

    if (Math.abs(Math.floor(d) - d) < 1E-10) {

      return (long)d;

    }

 else {

      return d;

    }

  }

 else {

    return 0;

  }

}

Location: PDFObjectExtension.java

Content: 

public String getValueAsString(){

  Object value=getValue();

  if (value == null) {

    return null;

  }

 else   if (value instanceof String) {

    return (String)value;

  }

 else {

    return value.toString();

  }

}

Location: PDFObjectExtension.java

Content: 

public String getValueAsXMLEscapedString(){

  return XMLUtil.escape(getValueAsString());

}

Location: PDFObjectExtension.java

Content: 

PDFObjectExtension(PDFObjectType type){

  this.type=type;

}

