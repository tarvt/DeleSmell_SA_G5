Location: FopConfBuilder.java

Content: 

private FopConfBuilder createElement(String elementName,String elementValue){

  Element el=fopConfDOM.createElement(elementName);

  el.appendChild(fopConfDOM.createTextNode(elementValue));

  root.appendChild(el);

  return this;

}

Location: FopConfBuilder.java

Content: 

public void dump(){

  dump(System.out);

}

Location: FopConfBuilder.java

Content: 

public void dump(OutputStream out){

  TransformerFactory tf=TransformerFactory.newInstance();

  Transformer transformer;

  try {

    transformer=tf.newTransformer();

  }

 catch (  TransformerConfigurationException e1) {

    throw new RuntimeException(e1);

  }

  transformer.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION,"no");

  transformer.setOutputProperty(OutputKeys.METHOD,"xml");

  transformer.setOutputProperty(OutputKeys.INDENT,"yes");

  transformer.setOutputProperty(OutputKeys.ENCODING,"UTF-8");

  transformer.setOutputProperty("{http://xml.apache.org/xslt}indent-amount","4");

  try {

    transformer.transform(new DOMSource(fopConfDOM),new StreamResult(new OutputStreamWriter(out,"UTF-8")));

  }

 catch (  UnsupportedEncodingException e) {

    throw new RuntimeException(e);

  }

catch (  TransformerException e) {

    throw new RuntimeException(e);

  }

}

Location: FopConfBuilder.java

Content: 

/** 

 * Ends the fonts config builder.

 * @return <b>this</b>

 */

public FopConfBuilder endFontsConfig(){

  root.appendChild(currentFontsConfig.fontsEl);

  currentFontsConfig=null;

  return this;

}

Location: FopConfBuilder.java

Content: 

/** 

 * Ends a renderer specific config builder.

 * @return <b>this</b>

 */

private FopConfBuilder endRendererConfig(){

  Element renderersEl=fopConfDOM.createElement("renderers");

  renderersEl.appendChild(currentRendererConfig.rendererEl);

  root.appendChild(renderersEl);

  currentRendererConfig=null;

  return this;

}

Location: FopConfBuilder.java

Content: 

/** 

 * Constructs the FopConfBuilder and initializes the underlying DOM.

 */

public FopConfBuilder(){

  try {

    DocumentBuilderFactory dbf=DocumentBuilderFactory.newInstance();

    dbf.setNamespaceAware(true);

    DocumentBuilder db=dbf.newDocumentBuilder();

    fopConfDOM=db.newDocument();

    root=fopConfDOM.createElement("fop");

    fopConfDOM.appendChild(root);

  }

 catch (  ParserConfigurationException e) {

    throw new RuntimeException(e);

  }

}

Location: FopConfBuilder.java

Content: 

/** 

 * Set the &lt;accessibility&gt; tag within the fop.xconf.

 * @param setAccessibility true to enable accessibility features

 * @return <b>this</b>

 */

public FopConfBuilder setAccessibility(boolean setAccessibility,boolean keepEmptyTags){

  Element el=fopConfDOM.createElement(Accessibility.ACCESSIBILITY);

  el.setAttribute(Accessibility.KEEP_EMPTY_TAGS,String.valueOf(keepEmptyTags));

  el.appendChild(fopConfDOM.createTextNode(String.valueOf(setAccessibility)));

  root.appendChild(el);

  return this;

}

Location: FopConfBuilder.java

Content: 

/** 

 * Set the &lt;base&gt; tag within the fop.xconf.

 * @param baseURI the base URI

 * @return <b>this</b>

 */

public FopConfBuilder setBaseURI(String baseURI){

  return createElement("base",baseURI);

}

Location: FopConfBuilder.java

Content: 

/** 

 * Set the &lt;break-indent-inheritance&gt; tag within the fop.xconf.

 * @param value true to break indent inheritance

 * @return <b>this</b>

 */

public FopConfBuilder setBreakIndentInheritance(boolean value){

  return createElement("break-indent-inheritance",String.valueOf(value));

}

Location: FopConfBuilder.java

Content: 

/** 

 * Set the &lt;default-page-settings&gt; tag within the fop.xconf.

 * @param height the height of the page

 * @param width the width of the page

 * @return <b>this</b>

 */

public FopConfBuilder setDefaultPageSettings(float height,float width){

  Element el=fopConfDOM.createElement("default-page-settings");

  el.setAttribute("height",String.valueOf(height));

  el.setAttribute("width",String.valueOf(width));

  root.appendChild(el);

  return this;

}

Location: FopConfBuilder.java

Content: 

/** 

 * Set the &lt;font-base&gt; tag within the fop.xconf.

 * @param fontBase the font base value

 * @return <b>this</b>

 */

public FopConfBuilder setFontBaseURI(String fontBase){

  return createElement("font-base",fontBase);

}

Location: FopConfBuilder.java

Content: 

@Deprecated public FopConfBuilder setHyphenationBaseURI(String uri){

  return createElement("hyphenation-base",uri);

}

Location: FopConfBuilder.java

Content: 

/** 

 * Set the &lt;prefer-renderer&gt; tag within the fop.xconf.

 * @param value true to prefer the renderer

 * @return <b>this</b>

 */

public FopConfBuilder setPreferRenderer(boolean value){

  return createElement("prefer-renderer",String.valueOf(value));

}

Location: FopConfBuilder.java

Content: 

/** 

 * Set the &lt;source-resolution&gt; tag within the fop.xconf.

 * @param srcRes the source resolution

 * @return <b>this</b>

 */

public FopConfBuilder setSourceResolution(float srcRes){

  return createElement("source-resolution",String.valueOf(srcRes));

}

Location: FopConfBuilder.java

Content: 

/** 

 * Set the &lt;strict-validation&gt; tag within the fop.xconf.

 * @param validateStrictly true to enforce strict FO validation

 * @return <b>this</b>

 */

public FopConfBuilder setStrictConfiguration(boolean validateStrictly){

  return createElement("strict-configuration",String.valueOf(validateStrictly));

}

Location: FopConfBuilder.java

Content: 

/** 

 * Set the &lt;strict-validation&gt; tag within the fop.xconf.

 * @param validateStrictly true to enforce strict configuration validation

 * @return <b>this</b>

 */

public FopConfBuilder setStrictValidation(boolean validateStrictly){

  return createElement("strict-validation",String.valueOf(validateStrictly));

}

Location: FopConfBuilder.java

Content: 

/** 

 * Set the &lt;target-resolution&gt; tag within the fop.xconf.

 * @param targetRes the target resolution

 * @return <b>this</b>

 */

public FopConfBuilder setTargetResolution(float targetRes){

  return createElement("target-resolution",String.valueOf(targetRes));

}

Location: FopConfBuilder.java

Content: 

/** 

 * Starts a fonts config builder, for configuring the fonts handling system within FOP i.e. the &lt;fonts&gt; element.

 * @return the fop config builder

 */

public FontsConfBuilder<FopConfBuilder> startFontsConfig(){

  currentFontsConfig=new FontsConfBuilder<FopConfBuilder>(this);

  currentFontsConfig.setFopConfDOM(fopConfDOM);

  return currentFontsConfig;

}

Location: FopConfBuilder.java

Content: 

/** 

 * Starts a renderer specific config builder.

 * @param mimeType the MIME type of the builder

 * @return the renderer config builder

 */

public <T extends RendererConfBuilder>T startRendererConfig(Class<T> rendererConfigClass){

  try {

    currentRendererConfig=rendererConfigClass.getDeclaredConstructor().newInstance();

  }

 catch (  InstantiationException e) {

    throw new RuntimeException(e);

  }

catch (  NoSuchMethodException e) {

    throw new RuntimeException(e);

  }

catch (  InvocationTargetException e) {

    throw new RuntimeException(e);

  }

catch (  IllegalAccessException e) {

    throw new RuntimeException(e);

  }

  currentRendererConfig.init(this,fopConfDOM);

  return rendererConfigClass.cast(currentRendererConfig);

}

Location: FopConfBuilder.java

Content: 

/** 

 * Sets whether the fonts cache is used or not.

 * @param enableFontCaching true to enable font data caching.

 * @return <b>this</b>

 */

public FopConfBuilder useCache(boolean enableFontCaching){

  return createElement("use-cache",String.valueOf(enableFontCaching));

}

