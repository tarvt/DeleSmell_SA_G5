Location: CondLengthProperty.java

Content: 

/** 

 * Returns the conditionality.

 * @return the conditionality

 */

public Property getConditionality(){

  return this.conditionality;

}

Location: CondLengthProperty.java

Content: 

/** 

 * @return this.condLength

 */

public CondLengthProperty getCondLength(){

  if (this.length.getLength().isAbsolute()) {

    CondLengthProperty clp=CACHE.fetch(this);

    if (clp == this) {

      isCached=true;

    }

    return clp;

  }

 else {

    return this;

  }

}

Location: CondLengthProperty.java

Content: 

/** 

 * Returns the length.

 * @return the length

 */

public Property getLengthComponent(){

  return this.length;

}

Location: CondLengthProperty.java

Content: 

/** 

 * Returns the computed length value.

 * @return the length in millipoints

 */

public int getLengthValue(){

  return this.length.getLength().getValue();

}

Location: CondLengthProperty.java

Content: 

/** 

 * Returns the computed length value.

 * @param context The context for the length calculation (for percentage based lengths)

 * @return the length in millipoints

 */

public int getLengthValue(PercentBaseContext context){

  return this.length.getLength().getValue(context);

}

Location: CondLengthProperty.java

Content: 

/** 

 * Indicates if the length can be discarded on certain conditions.

 * @return true if the length can be discarded.

 */

public boolean isDiscard(){

  return this.conditionality.getEnum() == Constants.EN_DISCARD;

}

