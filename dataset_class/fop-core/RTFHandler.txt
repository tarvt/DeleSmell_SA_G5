Location: RTFHandler.java

Content: 

/** 

 * {@inheritDoc} 

 */

public void endBlockContainer(BlockContainer bl){

  if (bDefer) {

    return;

  }

  try {

    IRtfTextrunContainer container=(IRtfTextrunContainer)builderContext.getContainer(IRtfTextrunContainer.class,true,this);

    RtfTextrun textrun=container.getTextrun();

    textrun.addParagraphBreak();

    int breakValue=toRtfBreakValue(bl.getBreakAfter());

    textrun.popBlockAttributes(breakValue);

  }

 catch (  IOException ioe) {

    handleIOTrouble(ioe);

  }

catch (  Exception e) {

    log.error("startBlock:" + e.getMessage());

    throw new RuntimeException(e.getMessage());

  }

}

Location: RTFHandler.java

Content: 

/** 

 * {@inheritDoc} 

 */

public void endBlock(Block bl){

  if (bDefer) {

    return;

  }

  try {

    IRtfTextrunContainer container=(IRtfTextrunContainer)builderContext.getContainer(IRtfTextrunContainer.class,true,this);

    RtfTextrun textrun=container.getTextrun();

    RtfParagraphBreak par=textrun.addParagraphBreak();

    RtfTableCell cellParent=(RtfTableCell)textrun.getParentOfClass(RtfTableCell.class);

    if (cellParent != null && par != null) {

      cellParent.setLastParagraph(par);

    }

    int breakValue=toRtfBreakValue(bl.getBreakAfter());

    textrun.popBlockAttributes(breakValue);

  }

 catch (  IOException ioe) {

    handleIOTrouble(ioe);

  }

catch (  Exception e) {

    log.error("startBlock:" + e.getMessage());

    throw new RuntimeException(e.getMessage());

  }

}

Location: RTFHandler.java

Content: 

/** 

 * {@inheritDoc} 

 */

public void endBody(TableBody body){

  builderContext.popPart(TableBody.class,this);

  endPart(body);

}

Location: RTFHandler.java

Content: 

/** 

 * {@inheritDoc} 

 */

public void endCell(TableCell tc){

  if (bDefer) {

    return;

  }

  try {

    RtfTableCell cell=(RtfTableCell)builderContext.getContainer(RtfTableCell.class,false,this);

    cell.finish();

  }

 catch (  Exception e) {

    log.error("endCell: " + e.getMessage());

    throw new RuntimeException(e.getMessage());

  }

  builderContext.popContainer(RtfTableCell.class,this);

  builderContext.getTableContext().selectNextColumn();

}

Location: RTFHandler.java

Content: 

/** 

 * {@inheritDoc} 

 */

public void endColumn(TableColumn tc){

}

Location: RTFHandler.java

Content: 

/** 

 * Closes any mismatched tags that are detected in the RTF structure.

 * @param containerClass The class representing the tag to close.

 * @return Determines whether the tag mismatch has been handled.

 */

public boolean endContainer(Class containerClass){

  if (containerClass == RtfTableRow.class) {

    endRow(null);

    return true;

  }

  return false;

}

Location: RTFHandler.java

Content: 

/** 

 * {@inheritDoc} 

 */

public void endFlow(Flow fl){

  if (bDefer) {

    return;

  }

  try {

    Region regionBody=pagemaster.getRegion(Constants.FO_REGION_BODY);

    Region regionBefore=pagemaster.getRegion(Constants.FO_REGION_BEFORE);

    Region regionAfter=pagemaster.getRegion(Constants.FO_REGION_AFTER);

    if (fl.getFlowName().equals(regionBody.getRegionName())) {

    }

 else     if (regionBefore != null && fl.getFlowName().equals(regionBefore.getRegionName())) {

      builderContext.popContainer(RtfBefore.class,this);

    }

 else     if (regionAfter != null && fl.getFlowName().equals(regionAfter.getRegionName())) {

      builderContext.popContainer(RtfAfter.class,this);

    }

  }

 catch (  Exception e) {

    log.error("endFlow: " + e.getMessage());

    throw new RuntimeException(e.getMessage());

  }

}

Location: RTFHandler.java

Content: 

/** 

 * {@inheritDoc} 

 */

public void endFooter(TableFooter footer){

  builderContext.popPart(footer.getClass(),this);

  endPart(footer);

}

Location: RTFHandler.java

Content: 

/** 

 * {@inheritDoc} 

 */

public void endFootnoteBody(FootnoteBody body){

  if (bDefer) {

    return;

  }

  try {

    RtfFootnote rtfFootnote=(RtfFootnote)builderContext.getContainer(RtfFootnote.class,true,this);

    rtfFootnote.endBody();

  }

 catch (  IOException ioe) {

    handleIOTrouble(ioe);

  }

catch (  Exception e) {

    log.error("endFootnoteBody: " + e.getMessage());

    throw new RuntimeException("Exception: " + e);

  }

}

Location: RTFHandler.java

Content: 

/** 

 * {@inheritDoc} 

 */

public void endFootnote(Footnote footnote){

  if (bDefer) {

    return;

  }

  builderContext.popContainer(RtfFootnote.class,this);

}

Location: RTFHandler.java

Content: 

/** 

 * {@inheritDoc} 

 */

public void endHeader(TableHeader header){

  builderContext.popPart(header.getClass(),this);

  endPart(header);

}

Location: RTFHandler.java

Content: 

/** 

 * {@inheritDoc} 

 */

public void endInline(Inline inl){

  if (bDefer) {

    return;

  }

  try {

    IRtfTextrunContainer container=(IRtfTextrunContainer)builderContext.getContainer(IRtfTextrunContainer.class,true,this);

    RtfTextrun textrun=container.getTextrun();

    textrun.popInlineAttributes();

  }

 catch (  IOException ioe) {

    handleIOTrouble(ioe);

  }

catch (  Exception e) {

    log.error("startInline:" + e.getMessage());

    throw new RuntimeException(e.getMessage());

  }

}

Location: RTFHandler.java

Content: 

/** 

 * {@inheritDoc} 

 */

public void endInstreamForeignObject(InstreamForeignObject ifo){

  if (bDefer) {

    return;

  }

  try {

    XMLObj child=ifo.getChildXMLObj();

    Document doc=child.getDOMDocument();

    String ns=child.getNamespaceURI();

    ImageInfo info=new ImageInfo(null,null);

    FOUserAgent ua=ifo.getUserAgent();

    ImageSize size=new ImageSize();

    size.setResolution(ua.getSourceResolution());

    Point2D csize=new Point2D.Float(-1,-1);

    Point2D intrinsicDimensions=child.getDimension(csize);

    if (intrinsicDimensions == null) {

      ResourceEventProducer eventProducer=ResourceEventProducer.Provider.get(getUserAgent().getEventBroadcaster());

      eventProducer.ifoNoIntrinsicSize(this,child.getLocator());

      return;

    }

    size.setSizeInMillipoints((int)Math.round(intrinsicDimensions.getX() * 1000),(int)Math.round(intrinsicDimensions.getY() * 1000));

    size.calcPixelsFromSize();

    info.setSize(size);

    ImageXMLDOM image=new ImageXMLDOM(info,doc,ns);

    FOUserAgent userAgent=ifo.getUserAgent();

    ImageManager manager=userAgent.getImageManager();

    Map hints=ImageUtil.getDefaultHints(ua.getImageSessionContext());

    Image converted=manager.convertImage(image,FLAVORS,hints);

    putGraphic(ifo,converted);

  }

 catch (  ImageException ie) {

    ResourceEventProducer eventProducer=ResourceEventProducer.Provider.get(getUserAgent().getEventBroadcaster());

    eventProducer.imageError(this,null,ie,null);

  }

catch (  IOException ioe) {

    ResourceEventProducer eventProducer=ResourceEventProducer.Provider.get(getUserAgent().getEventBroadcaster());

    eventProducer.imageIOError(this,null,ioe,null);

  }

}

Location: RTFHandler.java

Content: 

/** 

 * {@inheritDoc} 

 */

public void endLink(BasicLink basicLink){

  if (bDefer) {

    return;

  }

  builderContext.popContainer(RtfHyperLink.class,this);

}

Location: RTFHandler.java

Content: 

/** 

 * {@inheritDoc} 

 */

public void endListBody(ListItemBody listItemBody){

}

Location: RTFHandler.java

Content: 

/** 

 * {@inheritDoc} 

 */

public void endListItem(ListItem li){

  if (bDefer) {

    return;

  }

  builderContext.popContainer(RtfListItem.class,this);

}

Location: RTFHandler.java

Content: 

/** 

 * {@inheritDoc} 

 */

public void endListLabel(ListItemLabel listItemLabel){

  if (bDefer) {

    return;

  }

  builderContext.popContainer(RtfListItemLabel.class,this);

}

Location: RTFHandler.java

Content: 

/** 

 * {@inheritDoc} 

 */

public void endList(ListBlock lb){

  if (bDefer) {

    return;

  }

  builderContext.popContainer(RtfList.class,this);

}

Location: RTFHandler.java

Content: 

/** 

 * {@inheritDoc} 

 */

public void endMarkup(){

}

Location: RTFHandler.java

Content: 

/** 

 * {@inheritDoc} 

 */

public void endPageNumber(PageNumber pagenum){

}

Location: RTFHandler.java

Content: 

/** 

 * {@inheritDoc} 

 */

public void endPageSequence(PageSequence pageSeq){

  if (bDefer) {

    bDefer=false;

    recurseFONode(pageSeq);

    this.pagemaster=null;

    bDefer=true;

    return;

  }

 else {

    builderContext.popContainer(RtfSection.class,this);

    this.pagemaster=null;

  }

}

Location: RTFHandler.java

Content: 

private void endPart(TablePart tb){

  if (bDefer) {

    return;

  }

  try {

    RtfTable tbl=(RtfTable)builderContext.getContainer(RtfTable.class,true,this);

    tbl.setHeaderAttribs(null);

  }

 catch (  IOException ioe) {

    handleIOTrouble(ioe);

  }

catch (  Exception e) {

    log.error("endPart: " + e.getMessage());

    throw new RuntimeException(e.getMessage());

  }

}

Location: RTFHandler.java

Content: 

/** 

 * {@inheritDoc} 

 */

public void endRow(TableRow tr){

  if (bDefer) {

    return;

  }

  try {

    TableContext tctx=builderContext.getTableContext();

    final RtfTableRow row=(RtfTableRow)builderContext.getContainer(RtfTableRow.class,true,null);

    while (tctx.getNumberOfColumns() > tctx.getColumnIndex() && tctx.getColumnRowSpanningNumber() > 0) {

      RtfTableCell vCell=row.newTableCellMergedVertically((int)tctx.getColumnWidth(),tctx.getColumnRowSpanningAttrs());

      if (!tctx.getFirstSpanningCol()) {

        vCell.setHMerge(RtfTableCell.MERGE_WITH_PREVIOUS);

      }

      tctx.selectNextColumn();

    }

  }

 catch (  IOException ioe) {

    handleIOTrouble(ioe);

  }

catch (  Exception e) {

    log.error("endRow: " + e.getMessage());

    throw new RuntimeException(e.getMessage());

  }

  builderContext.popContainer(RtfTableRow.class,this);

  builderContext.getTableContext().decreaseRowSpannings();

}

Location: RTFHandler.java

Content: 

/** 

 * {@inheritDoc} 

 */

public void endStatic(StaticContent statisContent){

}

Location: RTFHandler.java

Content: 

/** 

 * Central exception handler for I/O exceptions.

 * @param ioe IOException to handle

 */

protected void handleIOTrouble(IOException ioe){

  RendererEventProducer eventProducer=RendererEventProducer.Provider.get(getUserAgent().getEventBroadcaster());

  eventProducer.ioError(this,ioe);

}

Location: RTFHandler.java

Content: 

/** 

 * {@inheritDoc} 

 */

public void image(ExternalGraphic eg){

  if (bDefer) {

    return;

  }

  String uri=eg.getURL();

  ImageInfo info=null;

  try {

    FOUserAgent userAgent=eg.getUserAgent();

    ImageManager manager=userAgent.getImageManager();

    info=manager.getImageInfo(uri,userAgent.getImageSessionContext());

    putGraphic(eg,info);

  }

 catch (  ImageException ie) {

    ResourceEventProducer eventProducer=ResourceEventProducer.Provider.get(getUserAgent().getEventBroadcaster());

    eventProducer.imageError(this,uri,ie,null);

  }

catch (  FileNotFoundException fe) {

    ResourceEventProducer eventProducer=ResourceEventProducer.Provider.get(getUserAgent().getEventBroadcaster());

    eventProducer.imageNotFound(this,(info != null ? info.toString() : uri),fe,null);

  }

catch (  IOException ioe) {

    ResourceEventProducer eventProducer=ResourceEventProducer.Provider.get(getUserAgent().getEventBroadcaster());

    eventProducer.imageIOError(this,(info != null ? info.toString() : uri),ioe,null);

  }

}

Location: RTFHandler.java

Content: 

/** 

 * Calls the appropriate event handler for the passed FObj.

 * @param foNode FO node whose event is to be called

 * @param bStart TRUE calls the start handler, FALSE the end handler

 */

private void invokeDeferredEvent(FONode foNode,boolean bStart){

  if (foNode instanceof PageSequence) {

    if (bStart) {

      startPageSequence((PageSequence)foNode);

    }

 else {

      endPageSequence((PageSequence)foNode);

    }

  }

 else   if (foNode instanceof Flow) {

    if (bStart) {

      startFlow((Flow)foNode);

    }

 else {

      endFlow((Flow)foNode);

    }

  }

 else   if (foNode instanceof StaticContent) {

    if (bStart) {

      startStatic(null);

    }

 else {

      endStatic(null);

    }

  }

 else   if (foNode instanceof ExternalGraphic) {

    if (bStart) {

      image((ExternalGraphic)foNode);

    }

  }

 else   if (foNode instanceof InstreamForeignObject) {

    if (bStart) {

      endInstreamForeignObject((InstreamForeignObject)foNode);

    }

  }

 else   if (foNode instanceof Block) {

    if (bStart) {

      startBlock((Block)foNode);

    }

 else {

      endBlock((Block)foNode);

    }

  }

 else   if (foNode instanceof BlockContainer) {

    if (bStart) {

      startBlockContainer((BlockContainer)foNode);

    }

 else {

      endBlockContainer((BlockContainer)foNode);

    }

  }

 else   if (foNode instanceof BasicLink) {

    if (bStart) {

      startLink((BasicLink)foNode);

    }

 else {

      endLink(null);

    }

  }

 else   if (foNode instanceof Inline) {

    if (bStart) {

      startInline((Inline)foNode);

    }

 else {

      endInline((Inline)foNode);

    }

  }

 else   if (foNode instanceof FOText) {

    if (bStart) {

      FOText text=(FOText)foNode;

      text(text,text.getCharSequence());

    }

  }

 else   if (foNode instanceof Character) {

    if (bStart) {

      Character c=(Character)foNode;

      character(c);

    }

  }

 else   if (foNode instanceof PageNumber) {

    if (bStart) {

      startPageNumber((PageNumber)foNode);

    }

 else {

      endPageNumber((PageNumber)foNode);

    }

  }

 else   if (foNode instanceof Footnote) {

    if (bStart) {

      startFootnote((Footnote)foNode);

    }

 else {

      endFootnote((Footnote)foNode);

    }

  }

 else   if (foNode instanceof FootnoteBody) {

    if (bStart) {

      startFootnoteBody((FootnoteBody)foNode);

    }

 else {

      endFootnoteBody((FootnoteBody)foNode);

    }

  }

 else   if (foNode instanceof ListBlock) {

    if (bStart) {

      startList((ListBlock)foNode);

    }

 else {

      endList((ListBlock)foNode);

    }

  }

 else   if (foNode instanceof ListItemBody) {

    if (bStart) {

      startListBody(null);

    }

 else {

      endListBody(null);

    }

  }

 else   if (foNode instanceof ListItem) {

    if (bStart) {

      startListItem((ListItem)foNode);

    }

 else {

      endListItem((ListItem)foNode);

    }

  }

 else   if (foNode instanceof ListItemLabel) {

    if (bStart) {

      startListLabel(null);

    }

 else {

      endListLabel(null);

    }

  }

 else   if (foNode instanceof Table) {

    if (bStart) {

      startTable((Table)foNode);

    }

 else {

      endTable((Table)foNode);

    }

  }

 else   if (foNode instanceof TableHeader) {

    if (bStart) {

      startHeader((TableHeader)foNode);

    }

 else {

      endHeader((TableHeader)foNode);

    }

  }

 else   if (foNode instanceof TableFooter) {

    if (bStart) {

      startFooter((TableFooter)foNode);

    }

 else {

      endFooter((TableFooter)foNode);

    }

  }

 else   if (foNode instanceof TableBody) {

    if (bStart) {

      startBody((TableBody)foNode);

    }

 else {

      endBody((TableBody)foNode);

    }

  }

 else   if (foNode instanceof TableColumn) {

    if (bStart) {

      startColumn((TableColumn)foNode);

    }

 else {

      endColumn((TableColumn)foNode);

    }

  }

 else   if (foNode instanceof TableRow) {

    if (bStart) {

      startRow((TableRow)foNode);

    }

 else {

      endRow((TableRow)foNode);

    }

  }

 else   if (foNode instanceof TableCell) {

    if (bStart) {

      startCell((TableCell)foNode);

    }

 else {

      endCell((TableCell)foNode);

    }

  }

 else   if (foNode instanceof Leader) {

    if (bStart) {

      startLeader((Leader)foNode);

    }

  }

 else   if (foNode instanceof PageNumberCitation) {

    if (bStart) {

      startPageNumberCitation((PageNumberCitation)foNode);

    }

 else {

      endPageNumberCitation((PageNumberCitation)foNode);

    }

  }

 else   if (foNode instanceof PageNumberCitationLast) {

    if (bStart) {

      startPageNumberCitationLast((PageNumberCitationLast)foNode);

    }

 else {

      endPageNumberCitationLast((PageNumberCitationLast)foNode);

    }

  }

 else {

    RTFEventProducer eventProducer=RTFEventProducer.Provider.get(getUserAgent().getEventBroadcaster());

    eventProducer.ignoredDeferredEvent(this,foNode,bStart,foNode.getLocator());

  }

}

Location: RTFHandler.java

Content: 

/** 

 * {@inheritDoc} 

 */

public void pageRef(){

}

Location: RTFHandler.java

Content: 

private void prepareTable(Table tab){

  percentManager.setDimension(tab);

  int tabDiff=tab.getCommonBorderPaddingBackground().getBorderStartWidth(false) / 2 + tab.getCommonBorderPaddingBackground().getBorderEndWidth(false);

  if (!(tab.getInlineProgressionDimension().getMaximum(null).getLength() instanceof EnumLength)) {

    percentManager.setDimension(tab,tab.getInlineProgressionDimension().getMaximum(null).getLength().getValue(percentManager) - tabDiff);

  }

 else {

    percentManager.setDimension(tab,percentManager.getBaseLength(LengthBase.CONTAINING_BLOCK_WIDTH,tab) - tabDiff);

  }

  ColumnSetup columnSetup=new ColumnSetup(tab);

  float tableWidth=percentManager.getBaseLength(LengthBase.CONTAINING_BLOCK_WIDTH,tab);

  float tableUnit=columnSetup.computeTableUnit(percentManager,Math.round(tableWidth));

  percentManager.setTableUnit(tab,Math.round(tableUnit));

}

Location: RTFHandler.java

Content: 

/** 

 * Puts a graphic/image into the generated RTF file.

 * @param abstractGraphic the graphic (external-graphic or instream-foreign-object)

 * @param image the image

 * @throws IOException In case of an I/O error

 */

private void putGraphic(AbstractGraphics abstractGraphic,Image image) throws IOException {

  byte[] rawData=null;

  final ImageInfo info=image.getInfo();

  if (image instanceof ImageRawStream) {

    ImageRawStream rawImage=(ImageRawStream)image;

    InputStream in=rawImage.createInputStream();

    try {

      rawData=IOUtils.toByteArray(in);

    }

  finally {

      IOUtils.closeQuietly(in);

    }

  }

  if (rawData == null) {

    ResourceEventProducer eventProducer=ResourceEventProducer.Provider.get(getUserAgent().getEventBroadcaster());

    eventProducer.imageWritingError(this,null);

    return;

  }

  this.percentManager.setDimension(abstractGraphic);

  PercentBaseContext pContext=new PercentBaseContext(){

    public int getBaseLength(    int lengthBase,    FObj fobj){

switch (lengthBase) {

case LengthBase.IMAGE_INTRINSIC_WIDTH:

        return info.getSize().getWidthMpt();

case LengthBase.IMAGE_INTRINSIC_HEIGHT:

      return info.getSize().getHeightMpt();

default :

    return percentManager.getBaseLength(lengthBase,fobj);

}

}

}

;

ImageLayout layout=new ImageLayout(abstractGraphic,pContext,image.getInfo().getSize().getDimensionMpt());

final IRtfTextrunContainer c=(IRtfTextrunContainer)builderContext.getContainer(IRtfTextrunContainer.class,true,this);

final RtfExternalGraphic rtfGraphic=c.getTextrun().newImage();

if (info.getOriginalURI() != null) {

rtfGraphic.setURL(info.getOriginalURI());

}

rtfGraphic.setImageData(rawData);

FoUnitsConverter converter=FoUnitsConverter.getInstance();

Dimension viewport=layout.getViewportSize();

Rectangle placement=layout.getPlacement();

int cropLeft=Math.round(converter.convertMptToTwips(-placement.x));

int cropTop=Math.round(converter.convertMptToTwips(-placement.y));

int cropRight=Math.round(converter.convertMptToTwips(-1 * (viewport.width - placement.x - placement.width)));

int cropBottom=Math.round(converter.convertMptToTwips(-1 * (viewport.height - placement.y - placement.height)));

rtfGraphic.setCropping(cropLeft,cropTop,cropRight,cropBottom);

int width=Math.round(converter.convertMptToTwips(viewport.width));

int height=Math.round(converter.convertMptToTwips(viewport.height));

width+=cropLeft + cropRight;

height+=cropTop + cropBottom;

rtfGraphic.setWidthTwips(width);

rtfGraphic.setHeightTwips(height);

int compression=0;

if (compression != 0) {

if (!rtfGraphic.setCompressionRate(compression)) {

log.warn("The compression rate " + compression + " is invalid. The value has to be between 1 and 100 %.");

}

}

}

Location: RTFHandler.java

Content: 

/** 

 * Puts a graphic/image into the generated RTF file.

 * @param abstractGraphic the graphic (external-graphic or instream-foreign-object)

 * @param info the image info object

 * @throws IOException In case of an I/O error

 */

private void putGraphic(AbstractGraphics abstractGraphic,ImageInfo info) throws IOException {

  try {

    FOUserAgent userAgent=abstractGraphic.getUserAgent();

    ImageManager manager=userAgent.getImageManager();

    ImageSessionContext sessionContext=userAgent.getImageSessionContext();

    Map hints=ImageUtil.getDefaultHints(sessionContext);

    Image image=manager.getImage(info,FLAVORS,hints,sessionContext);

    putGraphic(abstractGraphic,image);

  }

 catch (  ImageException ie) {

    ResourceEventProducer eventProducer=ResourceEventProducer.Provider.get(getUserAgent().getEventBroadcaster());

    eventProducer.imageError(this,null,ie,null);

  }

}

Location: RTFHandler.java

Content: 

/** 

 * Calls the event handlers for the passed FONode and all its elements.

 * @param foNode FONode object which shall be recursed

 */

private void recurseFONode(FONode foNode){

  invokeDeferredEvent(foNode,true);

  if (foNode instanceof PageSequence) {

    PageSequence pageSequence=(PageSequence)foNode;

    Region regionBefore=pagemaster.getRegion(Constants.FO_REGION_BEFORE);

    if (regionBefore != null) {

      FONode staticBefore=pageSequence.getFlowMap().get(regionBefore.getRegionName());

      if (staticBefore != null) {

        recurseFONode(staticBefore);

      }

    }

    Region regionAfter=pagemaster.getRegion(Constants.FO_REGION_AFTER);

    if (regionAfter != null) {

      FONode staticAfter=pageSequence.getFlowMap().get(regionAfter.getRegionName());

      if (staticAfter != null) {

        recurseFONode(staticAfter);

      }

    }

    recurseFONode(pageSequence.getMainFlow());

  }

 else   if (foNode instanceof Table) {

    Table table=(Table)foNode;

    if (table.getColumns() != null) {

      prepareTable(table);

      for (      Object o : table.getColumns()) {

        recurseFONode((FONode)o);

      }

    }

 else {

      RTFEventProducer eventProducer=RTFEventProducer.Provider.get(getUserAgent().getEventBroadcaster());

      eventProducer.explicitTableColumnsRequired(this,table.getLocator());

    }

    if (table.getTableHeader() != null) {

      recurseFONode(table.getTableHeader());

    }

    if (table.getTableFooter() != null) {

      recurseFONode(table.getTableFooter());

    }

    if (foNode.getChildNodes() != null) {

      for (Iterator it=foNode.getChildNodes(); it.hasNext(); ) {

        recurseFONode((FONode)it.next());

      }

    }

  }

 else   if (foNode instanceof ListItem) {

    ListItem item=(ListItem)foNode;

    recurseFONode(item.getLabel());

    recurseFONode(item.getBody());

  }

 else   if (foNode instanceof Footnote) {

    Footnote fn=(Footnote)foNode;

    recurseFONode(fn.getFootnoteCitation());

    recurseFONode(fn.getFootnoteBody());

  }

 else {

    if (foNode.getChildNodes() != null) {

      for (Iterator it=foNode.getChildNodes(); it.hasNext(); ) {

        FONode fn=(FONode)it.next();

        if (log.isTraceEnabled()) {

          log.trace("  ChildNode for " + fn + " ("+ fn.getName()+ ")");

        }

        recurseFONode(fn);

      }

    }

  }

  invokeDeferredEvent(foNode,false);

}

Location: RTFHandler.java

Content: 

/** 

 * Creates a new RTF structure handler.

 * @param userAgent the FOUserAgent for this process

 * @param os OutputStream to write to

 */

public RTFHandler(FOUserAgent userAgent,OutputStream os){

  super(userAgent);

  this.os=os;

  bDefer=true;

  boolean base14Kerning=false;

  FontSetup.setup(fontInfo,null,userAgent.getResourceResolver(),base14Kerning);

}

Location: RTFHandler.java

Content: 

/** 

 * {@inheritDoc} 

 */

public void startBlockContainer(BlockContainer blc){

  if (bDefer) {

    return;

  }

  try {

    RtfAttributes rtfAttr=TextAttributesConverter.convertBlockContainerAttributes(blc);

    IRtfTextrunContainer container=(IRtfTextrunContainer)builderContext.getContainer(IRtfTextrunContainer.class,true,this);

    RtfTextrun textrun=container.getTextrun();

    textrun.addParagraphBreak();

    textrun.pushBlockAttributes(rtfAttr);

  }

 catch (  IOException ioe) {

    handleIOTrouble(ioe);

  }

catch (  Exception e) {

    log.error("startBlock: " + e.getMessage());

    throw new RuntimeException("Exception: " + e);

  }

}

Location: RTFHandler.java

Content: 

/** 

 * {@inheritDoc} 

 */

public void startBlock(Block bl){

  if (bDefer) {

    return;

  }

  try {

    RtfAttributes rtfAttr=TextAttributesConverter.convertAttributes(bl);

    IRtfTextrunContainer container=(IRtfTextrunContainer)builderContext.getContainer(IRtfTextrunContainer.class,true,this);

    RtfTextrun textrun=container.getTextrun();

    textrun.addParagraphBreak();

    textrun.pushBlockAttributes(rtfAttr);

    textrun.addBookmark(bl.getId());

  }

 catch (  IOException ioe) {

    handleIOTrouble(ioe);

  }

catch (  Exception e) {

    log.error("startBlock: " + e.getMessage());

    throw new RuntimeException("Exception: " + e);

  }

}

Location: RTFHandler.java

Content: 

/** 

 * {@inheritDoc}

 */

public void startBody(TableBody body){

  builderContext.pushPart(body);

  startPart(body);

}

Location: RTFHandler.java

Content: 

/** 

 * {@inheritDoc} 

 */

public void startCell(TableCell tc){

  if (bDefer) {

    return;

  }

  try {

    TableContext tctx=builderContext.getTableContext();

    final RtfTableRow row=(RtfTableRow)builderContext.getContainer(RtfTableRow.class,true,null);

    int numberRowsSpanned=tc.getNumberRowsSpanned();

    int numberColumnsSpanned=tc.getNumberColumnsSpanned();

    while (tctx.getNumberOfColumns() > tctx.getColumnIndex() && tctx.getColumnRowSpanningNumber() > 0) {

      RtfTableCell vCell=row.newTableCellMergedVertically((int)tctx.getColumnWidth(),tctx.getColumnRowSpanningAttrs());

      if (!tctx.getFirstSpanningCol()) {

        vCell.setHMerge(RtfTableCell.MERGE_WITH_PREVIOUS);

      }

      tctx.selectNextColumn();

    }

    float width=tctx.getColumnWidth();

    RtfAttributes atts=TableAttributesConverter.convertCellAttributes(tc);

    RtfTableCell cell=row.newTableCell((int)width,atts);

    if (numberRowsSpanned > 1) {

      cell.setVMerge(RtfTableCell.MERGE_START);

      tctx.setCurrentColumnRowSpanning(numberRowsSpanned,cell.getRtfAttributes());

    }

 else {

      tctx.setCurrentColumnRowSpanning(numberRowsSpanned,null);

    }

    if (numberColumnsSpanned > 0) {

      tctx.setCurrentFirstSpanningCol(true);

      for (int i=0; i < numberColumnsSpanned - 1; ++i) {

        tctx.selectNextColumn();

        width+=tctx.getColumnWidth();

        tctx.setCurrentFirstSpanningCol(false);

        RtfTableCell hCell=row.newTableCellMergedHorizontally(0,null);

        if (numberRowsSpanned > 1) {

          hCell.setVMerge(RtfTableCell.MERGE_START);

          tctx.setCurrentColumnRowSpanning(numberRowsSpanned,cell.getRtfAttributes());

        }

 else {

          tctx.setCurrentColumnRowSpanning(numberRowsSpanned,cell.getRtfAttributes());

        }

      }

    }

    percentManager.setDimension(tc,(int)width * 50);

    builderContext.pushContainer(cell);

  }

 catch (  IOException ioe) {

    handleIOTrouble(ioe);

  }

catch (  Exception e) {

    log.error("startCell: " + e.getMessage());

    throw new RuntimeException(e.getMessage());

  }

}

Location: RTFHandler.java

Content: 

/** 

 * {@inheritDoc} 

 */

public void startColumn(TableColumn tc){

  if (bDefer) {

    return;

  }

  try {

    int iWidth=tc.getColumnWidth().getValue(percentManager);

    percentManager.setDimension(tc,iWidth);

    Float width=FoUnitsConverter.getInstance().convertMptToTwips(iWidth);

    builderContext.getTableContext().setNextColumnWidth(width);

    builderContext.getTableContext().setNextColumnRowSpanning(0,null);

    builderContext.getTableContext().setNextFirstSpanningCol(false);

  }

 catch (  Exception e) {

    log.error("startColumn: " + e.getMessage());

    throw new RuntimeException(e.getMessage());

  }

}

Location: RTFHandler.java

Content: 

/** 

 * {@inheritDoc} 

 */

public void startFlow(Flow fl){

  if (bDefer) {

    return;

  }

  try {

    log.debug("starting flow: " + fl.getFlowName());

    boolean handled=false;

    Region regionBody=pagemaster.getRegion(Constants.FO_REGION_BODY);

    Region regionBefore=pagemaster.getRegion(Constants.FO_REGION_BEFORE);

    Region regionAfter=pagemaster.getRegion(Constants.FO_REGION_AFTER);

    if (fl.getFlowName().equals(regionBody.getRegionName())) {

      if (bPrevHeaderSpecified && !bHeaderSpecified) {

        RtfAttributes attr=new RtfAttributes();

        attr.set(RtfBefore.HEADER);

        final IRtfBeforeContainer contBefore=(IRtfBeforeContainer)builderContext.getContainer(IRtfBeforeContainer.class,true,this);

        contBefore.newBefore(attr);

      }

      if (bPrevFooterSpecified && !bFooterSpecified) {

        RtfAttributes attr=new RtfAttributes();

        attr.set(RtfAfter.FOOTER);

        final IRtfAfterContainer contAfter=(IRtfAfterContainer)builderContext.getContainer(IRtfAfterContainer.class,true,this);

        contAfter.newAfter(attr);

      }

      handled=true;

    }

 else     if (regionBefore != null && fl.getFlowName().equals(regionBefore.getRegionName())) {

      bHeaderSpecified=true;

      bPrevHeaderSpecified=true;

      final IRtfBeforeContainer c=(IRtfBeforeContainer)builderContext.getContainer(IRtfBeforeContainer.class,true,this);

      RtfAttributes beforeAttributes=((RtfElement)c).getRtfAttributes();

      if (beforeAttributes == null) {

        beforeAttributes=new RtfAttributes();

      }

      beforeAttributes.set(RtfBefore.HEADER);

      RtfBefore before=c.newBefore(beforeAttributes);

      builderContext.pushContainer(before);

      handled=true;

    }

 else     if (regionAfter != null && fl.getFlowName().equals(regionAfter.getRegionName())) {

      bFooterSpecified=true;

      bPrevFooterSpecified=true;

      final IRtfAfterContainer c=(IRtfAfterContainer)builderContext.getContainer(IRtfAfterContainer.class,true,this);

      RtfAttributes afterAttributes=((RtfElement)c).getRtfAttributes();

      if (afterAttributes == null) {

        afterAttributes=new RtfAttributes();

      }

      afterAttributes.set(RtfAfter.FOOTER);

      RtfAfter after=c.newAfter(afterAttributes);

      builderContext.pushContainer(after);

      handled=true;

    }

    if (!handled) {

      log.warn("A " + fl.getLocalName() + " has been skipped: "+ fl.getFlowName());

    }

  }

 catch (  IOException ioe) {

    handleIOTrouble(ioe);

  }

catch (  Exception e) {

    log.error("startFlow: " + e.getMessage());

    throw new RuntimeException(e.getMessage());

  }

}

Location: RTFHandler.java

Content: 

/** 

 * {@inheritDoc} 

 */

public void startFooter(TableFooter footer){

  builderContext.pushPart(footer);

  startPart(footer);

}

Location: RTFHandler.java

Content: 

/** 

 * {@inheritDoc} 

 */

public void startFootnoteBody(FootnoteBody body){

  if (bDefer) {

    return;

  }

  try {

    RtfFootnote rtfFootnote=(RtfFootnote)builderContext.getContainer(RtfFootnote.class,true,this);

    rtfFootnote.startBody();

  }

 catch (  IOException ioe) {

    handleIOTrouble(ioe);

  }

catch (  Exception e) {

    log.error("startFootnoteBody: " + e.getMessage());

    throw new RuntimeException("Exception: " + e);

  }

}

Location: RTFHandler.java

Content: 

/** 

 * {@inheritDoc} 

 */

public void startFootnote(Footnote footnote){

  if (bDefer) {

    return;

  }

  try {

    IRtfTextrunContainer container=(IRtfTextrunContainer)builderContext.getContainer(IRtfTextrunContainer.class,true,this);

    RtfTextrun textrun=container.getTextrun();

    RtfFootnote rtfFootnote=textrun.addFootnote();

    builderContext.pushContainer(rtfFootnote);

  }

 catch (  IOException ioe) {

    handleIOTrouble(ioe);

  }

catch (  Exception e) {

    log.error("startFootnote: " + e.getMessage());

    throw new RuntimeException("Exception: " + e);

  }

}

Location: RTFHandler.java

Content: 

/** 

 * {@inheritDoc} 

 */

public void startHeader(TableHeader header){

  builderContext.pushPart(header);

  startPart(header);

}

Location: RTFHandler.java

Content: 

/** 

 * {@inheritDoc} 

 */

public void startInline(Inline inl){

  if (bDefer) {

    return;

  }

  try {

    RtfAttributes rtfAttr=TextAttributesConverter.convertCharacterAttributes(inl);

    IRtfTextrunContainer container=(IRtfTextrunContainer)builderContext.getContainer(IRtfTextrunContainer.class,true,this);

    RtfTextrun textrun=container.getTextrun();

    textrun.pushInlineAttributes(rtfAttr);

    textrun.addBookmark(inl.getId());

  }

 catch (  IOException ioe) {

    handleIOTrouble(ioe);

  }

catch (  FOPException fe) {

    log.error("startInline:" + fe.getMessage());

    throw new RuntimeException(fe.getMessage());

  }

catch (  Exception e) {

    log.error("startInline:" + e.getMessage());

    throw new RuntimeException(e.getMessage());

  }

}

Location: RTFHandler.java

Content: 

/** 

 * {@inheritDoc} 

 */

public void startLeader(Leader l){

  if (bDefer) {

    return;

  }

  try {

    percentManager.setDimension(l);

    RtfAttributes rtfAttr=TextAttributesConverter.convertLeaderAttributes(l,percentManager);

    IRtfTextrunContainer container=(IRtfTextrunContainer)builderContext.getContainer(IRtfTextrunContainer.class,true,this);

    RtfTextrun textrun=container.getTextrun();

    textrun.addLeader(rtfAttr);

  }

 catch (  IOException e) {

    log.error("startLeader: " + e.getMessage());

    throw new RuntimeException(e.getMessage());

  }

catch (  FOPException e) {

    log.error("startLeader: " + e.getMessage());

    throw new RuntimeException(e.getMessage());

  }

}

Location: RTFHandler.java

Content: 

/** 

 * {@inheritDoc} 

 */

public void startLink(BasicLink basicLink){

  if (bDefer) {

    return;

  }

  try {

    IRtfTextrunContainer container=(IRtfTextrunContainer)builderContext.getContainer(IRtfTextrunContainer.class,true,this);

    RtfTextrun textrun=container.getTextrun();

    RtfHyperLink link=textrun.addHyperlink(new RtfAttributes());

    if (basicLink.hasExternalDestination()) {

      link.setExternalURL(basicLink.getExternalDestination());

    }

 else {

      link.setInternalURL(basicLink.getInternalDestination());

    }

    builderContext.pushContainer(link);

  }

 catch (  IOException ioe) {

    handleIOTrouble(ioe);

  }

catch (  Exception e) {

    log.error("startLink: " + e.getMessage());

    throw new RuntimeException(e.getMessage());

  }

}

Location: RTFHandler.java

Content: 

/** 

 * {@inheritDoc} 

 */

public void startListBody(ListItemBody listItemBody){

}

Location: RTFHandler.java

Content: 

/** 

 * {@inheritDoc} 

 */

public void startListItem(ListItem li){

  if (bDefer) {

    return;

  }

  try {

    RtfList list=(RtfList)builderContext.getContainer(RtfList.class,true,this);

    if (list.getChildCount() > 0) {

      this.endListBody(null);

      this.endList((ListBlock)li.getParent());

      this.startList((ListBlock)li.getParent());

      this.startListBody(null);

      list=(RtfList)builderContext.getContainer(RtfList.class,true,this);

    }

    builderContext.pushContainer(list.newListItem());

  }

 catch (  IOException ioe) {

    handleIOTrouble(ioe);

  }

catch (  Exception e) {

    log.error("startList: " + e.getMessage());

    throw new RuntimeException(e.getMessage());

  }

}

Location: RTFHandler.java

Content: 

/** 

 * {@inheritDoc} 

 */

public void startListLabel(ListItemLabel listItemLabel){

  if (bDefer) {

    return;

  }

  try {

    RtfListItem item=(RtfListItem)builderContext.getContainer(RtfListItem.class,true,this);

    RtfListItemLabel label=item.new RtfListItemLabel(item);

    builderContext.pushContainer(label);

  }

 catch (  IOException ioe) {

    handleIOTrouble(ioe);

  }

catch (  Exception e) {

    log.error("startPageNumber: " + e.getMessage());

    throw new RuntimeException(e.getMessage());

  }

}

Location: RTFHandler.java

Content: 

/** 

 * {@inheritDoc} 

 */

public void startList(ListBlock lb){

  if (bDefer) {

    return;

  }

  try {

    final IRtfListContainer c=(IRtfListContainer)builderContext.getContainer(IRtfListContainer.class,true,this);

    final RtfList newList=c.newList(ListAttributesConverter.convertAttributes(lb));

    builderContext.pushContainer(newList);

  }

 catch (  IOException ioe) {

    handleIOTrouble(ioe);

  }

catch (  FOPException fe) {

    log.error("startList: " + fe.getMessage());

    throw new RuntimeException(fe.getMessage());

  }

catch (  Exception e) {

    log.error("startList: " + e.getMessage());

    throw new RuntimeException(e.getMessage());

  }

}

Location: RTFHandler.java

Content: 

/** 

 * {@inheritDoc} 

 */

public void startMarkup(){

}

Location: RTFHandler.java

Content: 

/** 

 * {@inheritDoc} 

 */

public void startPageNumberCitationLast(PageNumberCitationLast l){

  if (bDefer) {

    return;

  }

  try {

    IRtfTextrunContainer container=(IRtfTextrunContainer)builderContext.getContainer(IRtfTextrunContainer.class,true,this);

    RtfTextrun textrun=container.getTextrun();

    textrun.addPageNumberCitation(l.getRefId());

  }

 catch (  RtfException e) {

    log.error("startPageNumberCitationLast: " + e.getMessage());

    throw new RuntimeException(e.getMessage());

  }

catch (  IOException e) {

    log.error("startPageNumberCitationLast: " + e.getMessage());

    throw new RuntimeException(e.getMessage());

  }

}

Location: RTFHandler.java

Content: 

/** 

 * {@inheritDoc} 

 */

public void startPageNumberCitation(PageNumberCitation l){

  if (bDefer) {

    return;

  }

  try {

    IRtfTextrunContainer container=(IRtfTextrunContainer)builderContext.getContainer(IRtfTextrunContainer.class,true,this);

    RtfTextrun textrun=container.getTextrun();

    textrun.addPageNumberCitation(l.getRefId());

  }

 catch (  Exception e) {

    log.error("startPageNumberCitation: " + e.getMessage());

    throw new RuntimeException(e.getMessage());

  }

}

Location: RTFHandler.java

Content: 

/** 

 * {@inheritDoc} 

 */

public void startPageNumber(PageNumber pagenum){

  if (bDefer) {

    return;

  }

  try {

    RtfAttributes rtfAttr=TextAttributesConverter.convertCharacterAttributes(pagenum);

    IRtfTextrunContainer container=(IRtfTextrunContainer)builderContext.getContainer(IRtfTextrunContainer.class,true,this);

    RtfTextrun textrun=container.getTextrun();

    textrun.addPageNumber(rtfAttr);

  }

 catch (  IOException ioe) {

    handleIOTrouble(ioe);

  }

catch (  Exception e) {

    log.error("startPageNumber: " + e.getMessage());

    throw new RuntimeException(e.getMessage());

  }

}

Location: RTFHandler.java

Content: 

private void startPart(TablePart part){

  if (bDefer) {

    return;

  }

  try {

    RtfAttributes atts=TableAttributesConverter.convertTablePartAttributes(part);

    RtfTable tbl=(RtfTable)builderContext.getContainer(RtfTable.class,true,this);

    tbl.setHeaderAttribs(atts);

  }

 catch (  IOException ioe) {

    handleIOTrouble(ioe);

  }

catch (  Exception e) {

    log.error("startPart: " + e.getMessage());

    throw new RuntimeException(e.getMessage());

  }

}

Location: RTFHandler.java

Content: 

/** 

 * {@inheritDoc}

 */

public void startRow(TableRow tr){

  if (bDefer) {

    return;

  }

  try {

    final RtfTable tbl=(RtfTable)builderContext.getContainer(RtfTable.class,true,null);

    RtfAttributes atts=TableAttributesConverter.convertRowAttributes(tr,tbl.getHeaderAttribs());

    if (tr.getParent() instanceof TableHeader) {

      atts.set(ITableAttributes.ATTR_HEADER);

    }

    builderContext.pushContainer(tbl.newTableRow(atts));

    builderContext.getTableContext().selectFirstColumn();

  }

 catch (  IOException ioe) {

    handleIOTrouble(ioe);

  }

catch (  Exception e) {

    log.error("startRow: " + e.getMessage());

    throw new RuntimeException(e.getMessage());

  }

}

Location: RTFHandler.java

Content: 

/** 

 * {@inheritDoc} 

 */

public void startStatic(StaticContent staticContent){

}

Location: RTFHandler.java

Content: 

/** 

 * {@inheritDoc} 

 */

public void startTable(Table tbl){

  if (bDefer) {

    return;

  }

  TableContext tableContext=new TableContext(builderContext);

  try {

    final IRtfTableContainer tc=(IRtfTableContainer)builderContext.getContainer(IRtfTableContainer.class,true,null);

    RtfAttributes atts=TableAttributesConverter.convertTableAttributes(tbl);

    RtfTable table=tc.newTable(atts,tableContext);

    table.setNestedTableDepth(nestedTableDepth);

    nestedTableDepth++;

    CommonBorderPaddingBackground border=tbl.getCommonBorderPaddingBackground();

    RtfAttributes borderAttributes=new RtfAttributes();

    BorderAttributesConverter.makeBorder(border,CommonBorderPaddingBackground.BEFORE,borderAttributes,ITableAttributes.CELL_BORDER_TOP);

    BorderAttributesConverter.makeBorder(border,CommonBorderPaddingBackground.AFTER,borderAttributes,ITableAttributes.CELL_BORDER_BOTTOM);

    BorderAttributesConverter.makeBorder(border,CommonBorderPaddingBackground.START,borderAttributes,ITableAttributes.CELL_BORDER_LEFT);

    BorderAttributesConverter.makeBorder(border,CommonBorderPaddingBackground.END,borderAttributes,ITableAttributes.CELL_BORDER_RIGHT);

    table.setBorderAttributes(borderAttributes);

    builderContext.pushContainer(table);

  }

 catch (  IOException ioe) {

    handleIOTrouble(ioe);

  }

catch (  Exception e) {

    log.error("startTable:" + e.getMessage());

    throw new RuntimeException(e.getMessage());

  }

  builderContext.pushTableContext(tableContext);

}

Location: RTFHandler.java

Content: 

/** 

 * @param text FOText object

 * @param characters CharSequence of the characters to process.

 */

public void text(FOText text,CharSequence characters){

  if (bDefer) {

    return;

  }

  try {

    IRtfTextrunContainer container=(IRtfTextrunContainer)builderContext.getContainer(IRtfTextrunContainer.class,true,this);

    RtfTextrun textrun=container.getTextrun();

    RtfAttributes rtfAttr=TextAttributesConverter.convertCharacterAttributes(text);

    textrun.pushInlineAttributes(rtfAttr);

    textrun.addString(characters.toString());

    textrun.popInlineAttributes();

  }

 catch (  IOException ioe) {

    handleIOTrouble(ioe);

  }

catch (  Exception e) {

    log.error("characters:" + e.getMessage());

    throw new RuntimeException(e.getMessage());

  }

}

Location: RTFHandler.java

Content: 

private int toRtfBreakValue(int foBreakValue){

switch (foBreakValue) {

case Constants.EN_PAGE:

    return RtfTextrun.BREAK_PAGE;

case Constants.EN_EVEN_PAGE:

  return RtfTextrun.BREAK_EVEN_PAGE;

case Constants.EN_ODD_PAGE:

return RtfTextrun.BREAK_ODD_PAGE;

case Constants.EN_COLUMN:

return RtfTextrun.BREAK_COLUMN;

default :

return RtfTextrun.BREAK_NONE;

}

}

