Location: FontInfoFinder.java

Content: 

/** 

 * Attempts to determine EmbedFontInfo from a given font file.

 * @param fontURI the URI of the font resource

 * @param resourceResolver font resolver used to resolve font

 * @param fontCache font cache (may be null)

 * @return an array of newly created embed font info. Generally, this arraywill have only one entry, unless the fontUrl is a TrueType Collection

 */

public EmbedFontInfo[] find(URI fontURI,InternalResourceResolver resourceResolver,FontCache fontCache){

  URI embedUri=resourceResolver.resolveFromBase(fontURI);

  String embedStr=embedUri.toASCIIString();

  boolean useKerning=true;

  boolean useAdvanced=true;

  long fileLastModified=-1;

  if (fontCache != null) {

    fileLastModified=FontCache.getLastModified(fontURI);

    if (fontCache.containsFont(embedStr)) {

      EmbedFontInfo[] fontInfos=fontCache.getFontInfos(embedStr,fileLastModified);

      if (fontInfos != null) {

        return fontInfos;

      }

    }

 else     if (fontCache.isFailedFont(embedStr,fileLastModified)) {

      if (log.isDebugEnabled()) {

        log.debug("Skipping font file that failed to load previously: " + embedUri);

      }

      return null;

    }

  }

  CustomFont customFont=null;

  if (fontURI.toASCIIString().toLowerCase().endsWith(".ttc")) {

    List<String> ttcNames=null;

    InputStream in=null;

    try {

      in=resourceResolver.getResource(fontURI);

      TTFFile ttf=new TTFFile(false,false);

      FontFileReader reader=new FontFileReader(in);

      ttcNames=ttf.getTTCnames(reader);

    }

 catch (    Exception e) {

      if (this.eventListener != null) {

        this.eventListener.fontLoadingErrorAtAutoDetection(this,fontURI.toASCIIString(),e);

      }

      return null;

    }

 finally {

      IOUtils.closeQuietly(in);

    }

    List<EmbedFontInfo> embedFontInfoList=new java.util.ArrayList<EmbedFontInfo>();

    for (    String fontName : ttcNames) {

      if (log.isDebugEnabled()) {

        log.debug("Loading " + fontName);

      }

      try {

        OFFontLoader ttfLoader=new OFFontLoader(fontURI,fontName,true,EmbeddingMode.AUTO,EncodingMode.AUTO,useKerning,useAdvanced,resourceResolver,false,false);

        customFont=ttfLoader.getFont();

        if (this.eventListener != null) {

          customFont.setEventListener(this.eventListener);

        }

      }

 catch (      Exception e) {

        if (fontCache != null) {

          fontCache.registerFailedFont(embedUri.toASCIIString(),fileLastModified);

        }

        if (this.eventListener != null) {

          this.eventListener.fontLoadingErrorAtAutoDetection(this,embedUri.toASCIIString(),e);

        }

        continue;

      }

      EmbedFontInfo fi=getFontInfoFromCustomFont(fontURI,customFont,fontCache,resourceResolver);

      if (fi != null) {

        embedFontInfoList.add(fi);

      }

    }

    return embedFontInfoList.toArray(new EmbedFontInfo[embedFontInfoList.size()]);

  }

 else {

    try {

      FontUris fontUris=new FontUris(fontURI,null);

      customFont=FontLoader.loadFont(fontUris,null,true,EmbeddingMode.AUTO,EncodingMode.AUTO,useKerning,useAdvanced,resourceResolver,false,false);

      if (this.eventListener != null) {

        customFont.setEventListener(this.eventListener);

      }

    }

 catch (    Exception e) {

      if (fontCache != null) {

        fontCache.registerFailedFont(embedUri.toASCIIString(),fileLastModified);

      }

      if (this.eventListener != null) {

        this.eventListener.fontLoadingErrorAtAutoDetection(this,embedUri.toASCIIString(),e);

      }

      return null;

    }

    EmbedFontInfo fi=getFontInfoFromCustomFont(fontURI,customFont,fontCache,resourceResolver);

    if (fi != null) {

      return new EmbedFontInfo[]{fi};

    }

 else {

      return null;

    }

  }

}

Location: FontInfoFinder.java

Content: 

/** 

 * Attempts to determine FontTriplets from a given CustomFont. It seems to be fairly accurate but will probably require some tweaking over time

 * @param customFont CustomFont

 * @param triplets Collection that will take the generated triplets

 */

private void generateTripletsFromFont(CustomFont customFont,Collection<FontTriplet> triplets){

  if (log.isTraceEnabled()) {

    log.trace("Font: " + customFont.getFullName() + ", family: "+ customFont.getFamilyNames()+ ", PS: "+ customFont.getFontName()+ ", EmbedName: "+ customFont.getEmbedFontName());

  }

  String strippedName=stripQuotes(customFont.getStrippedFontName());

  String fullName=stripQuotes(customFont.getFullName());

  String searchName=fullName.toLowerCase();

  String style=guessStyle(customFont,searchName);

  int weight;

  int guessedWeight=FontUtil.guessWeight(searchName);

  weight=guessedWeight;

  triplets.add(new FontTriplet(fullName,Font.STYLE_NORMAL,Font.WEIGHT_NORMAL));

  if (!fullName.equals(strippedName)) {

    triplets.add(new FontTriplet(strippedName,Font.STYLE_NORMAL,Font.WEIGHT_NORMAL));

  }

  Set<String> familyNames=customFont.getFamilyNames();

  for (  String familyName : familyNames) {

    familyName=stripQuotes(familyName);

    if (!fullName.equals(familyName)) {

      int priority=fullName.startsWith(familyName) ? fullName.length() - familyName.length() : fullName.length();

      triplets.add(new FontTriplet(familyName,style,weight,priority));

    }

  }

}

Location: FontInfoFinder.java

Content: 

/** 

 * Attempts to determine FontInfo from a given custom font

 * @param fontUri the font URI

 * @param customFont the custom font

 * @param fontCache font cache (may be null)

 * @return FontInfo from the given custom font

 */

private EmbedFontInfo getFontInfoFromCustomFont(URI fontUri,CustomFont customFont,FontCache fontCache,InternalResourceResolver resourceResolver){

  FontUris fontUris=new FontUris(fontUri,null);

  List<FontTriplet> fontTripletList=new java.util.ArrayList<FontTriplet>();

  generateTripletsFromFont(customFont,fontTripletList);

  String subFontName=null;

  if (customFont instanceof MultiByteFont) {

    subFontName=((MultiByteFont)customFont).getTTCName();

  }

  EmbedFontInfo fontInfo=new EmbedFontInfo(fontUris,customFont.isKerningEnabled(),customFont.isAdvancedEnabled(),fontTripletList,subFontName);

  fontInfo.setPostScriptName(customFont.getFontName());

  if (fontCache != null) {

    fontCache.addFont(fontInfo,resourceResolver);

  }

  return fontInfo;

}

Location: FontInfoFinder.java

Content: 

private String guessStyle(CustomFont customFont,String fontName){

  String style=Font.STYLE_NORMAL;

  if (customFont.getItalicAngle() > 0) {

    style=Font.STYLE_ITALIC;

  }

 else {

    style=FontUtil.guessStyle(fontName);

  }

  return style;

}

Location: FontInfoFinder.java

Content: 

/** 

 * Sets the font event listener that can be used to receive events about particular events in this class.

 * @param listener the font event listener

 */

public void setEventListener(FontEventListener listener){

  this.eventListener=listener;

}

