Location: AbstractTripletStructuredObject.java

Content: 

/** 

 * Adds a list of triplets to the triplets contained within this structured field

 * @param tripletCollection a collection of triplets

 */

public void addTriplets(Collection<AbstractTriplet> tripletCollection){

  if (tripletCollection != null) {

    triplets.addAll(tripletCollection);

  }

}

Location: AbstractTripletStructuredObject.java

Content: 

/** 

 * Adds a triplet to this structured object

 * @param triplet the triplet to add

 */

public void addTriplet(AbstractTriplet triplet){

  triplets.add(triplet);

}

Location: AbstractTripletStructuredObject.java

Content: 

/** 

 * Returns the triplet data length

 * @return the triplet data length

 */

protected int getTripletDataLength(){

  int dataLength=0;

  for (  Triplet triplet : triplets) {

    dataLength+=triplet.getDataLength();

  }

  return dataLength;

}

Location: AbstractTripletStructuredObject.java

Content: 

/** 

 * Returns the first matching triplet found in the structured field triplet list

 * @param tripletId the triplet identifier

 */

private AbstractTriplet getTriplet(byte tripletId){

  for (  AbstractTriplet trip : triplets) {

    if (trip.getId() == tripletId) {

      return trip;

    }

  }

  return null;

}

Location: AbstractTripletStructuredObject.java

Content: 

/** 

 * Returns true when this structured field contains triplets

 * @return true when this structured field contains triplets

 */

public boolean hasTriplets(){

  return triplets.size() > 0;

}

Location: AbstractTripletStructuredObject.java

Content: 

/** 

 * Returns true of this structured field has the given triplet

 * @param tripletId the triplet identifier

 * @return true if the structured field has the given triplet

 */

public boolean hasTriplet(byte tripletId){

  return getTriplet(tripletId) != null;

}

Location: AbstractTripletStructuredObject.java

Content: 

/** 

 * Sets a comment on this resource

 * @param commentString a comment string

 */

public void setComment(String commentString){

  addTriplet(new CommentTriplet(AbstractTriplet.COMMENT,commentString));

}

Location: AbstractTripletStructuredObject.java

Content: 

/** 

 * Sets the fully qualified name of this structured field

 * @param fqnType the fully qualified name type of this resource

 * @param fqnFormat the fully qualified name format of this resource

 * @param fqName the fully qualified name of this resource

 */

public void setFullyQualifiedName(byte fqnType,byte fqnFormat,String fqName){

  addTriplet(new FullyQualifiedNameTriplet(fqnType,fqnFormat,fqName,false));

}

Location: AbstractTripletStructuredObject.java

Content: 

public void setFullyQualifiedName(byte fqnType,byte fqnFormat,String fqName,boolean utf16be){

  addTriplet(new FullyQualifiedNameTriplet(fqnType,fqnFormat,fqName,utf16be));

}

Location: AbstractTripletStructuredObject.java

Content: 

/** 

 * Sets the objects classification

 * @param objectClass the classification of the object

 * @param objectType the MOD:CA registry object type entry for the givenobject/component type of the object

 * @param dataInContainer whether the data resides in the container

 * @param containerHasOEG whether the container has an object environment group

 * @param dataInOCD whether the data resides in a object container data structured field

 */

public void setObjectClassification(byte objectClass,ObjectType objectType,boolean dataInContainer,boolean containerHasOEG,boolean dataInOCD){

  addTriplet(new ObjectClassificationTriplet(objectClass,objectType,dataInContainer,containerHasOEG,dataInOCD));

}

Location: AbstractTripletStructuredObject.java

Content: 

/** 

 * Writes any triplet data

 * @param os The stream to write to

 * @throws IOException The stream to write to

 */

protected void writeTriplets(OutputStream os) throws IOException {

  if (hasTriplets()) {

    writeObjects(triplets,os);

    triplets=null;

  }

}

