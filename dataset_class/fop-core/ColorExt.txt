Location: ColorExt.java

Content: 

private ColorExt(ColorSpace colorSpace,float[] colorValues,float opacity){

  super(colorSpace,colorValues,opacity);

}

Location: ColorExt.java

Content: 

private ColorExt(float red,float green,float blue,float opacity){

  super(red,green,blue,opacity);

}

Location: ColorExt.java

Content: 

/** 

 * Create ColorExt object backup up FO's rgb-icc color function

 * @param redReplacement Red part of RGB replacement color that will be used when ICC profile can not be loaded

 * @param greenReplacement Green part of RGB replacement color that will be used when ICC profile can not be loaded

 * @param blueReplacement Blue part of RGB replacement color that will be used when ICC profile can not be loaded

 * @param profileName Name of ICC profile

 * @param profileSrc Source of ICC profile

 * @param colorSpace ICC ColorSpace for the ICC profile

 * @param iccValues color values

 * @return the requested color object

 */

public static ColorExt createFromFoRgbIcc(float redReplacement,float greenReplacement,float blueReplacement,String profileName,String profileSrc,ColorSpace colorSpace,float[] iccValues){

  ColorExt ce=new ColorExt(colorSpace,iccValues,1.0f);

  ce.rgbReplacementRed=redReplacement;

  ce.rgbReplacementGreen=greenReplacement;

  ce.rgbReplacementBlue=blueReplacement;

  ce.iccProfileName=profileName;

  ce.iccProfileSrc=profileSrc;

  ce.colorSpace=colorSpace;

  ce.colorValues=iccValues;

  return ce;

}

Location: ColorExt.java

Content: 

/** 

 * Create ColorExt object backing up SVG's icc-color function.

 * @param red Red value resulting from the conversion from the user provided (icc) color values to the batik (rgb) color space

 * @param green Green value resulting from the conversion from the user provided (icc) color values to the batik (rgb) color space

 * @param blue Blue value resulting from the conversion from the user provided (icc) color values to the batik (rgb) color space

 * @param opacity Opacity

 * @param profileName ICC profile name

 * @param profileHref the URI to the color profile

 * @param profileCS ICC ColorSpace profile

 * @param colorValues ICC color values

 * @return the requested color object

 */

public static ColorExt createFromSvgIccColor(float red,float green,float blue,float opacity,String profileName,String profileHref,ColorSpace profileCS,float[] colorValues){

  ColorExt ce=new ColorExt(red,green,blue,opacity);

  ce.rgbReplacementRed=-1;

  ce.rgbReplacementGreen=-1;

  ce.rgbReplacementBlue=-1;

  ce.iccProfileName=profileName;

  ce.iccProfileSrc=profileHref;

  ce.colorSpace=profileCS;

  ce.colorValues=colorValues;

  return ce;

}

Location: ColorExt.java

Content: 

/** 

 * {@inheritDoc} 

 */

@Override public boolean equals(Object obj){

  if (this == obj) {

    return true;

  }

  if (!super.equals(obj)) {

    return false;

  }

  if (getClass() != obj.getClass()) {

    return false;

  }

  ColorExt other=(ColorExt)obj;

  if (!Arrays.equals(colorValues,other.colorValues)) {

    return false;

  }

  if (iccProfileName == null) {

    if (other.iccProfileName != null) {

      return false;

    }

  }

 else   if (!iccProfileName.equals(other.iccProfileName)) {

    return false;

  }

  if (iccProfileSrc == null) {

    if (other.iccProfileSrc != null) {

      return false;

    }

  }

 else   if (!iccProfileSrc.equals(other.iccProfileSrc)) {

    return false;

  }

  if (Float.floatToIntBits(rgbReplacementBlue) != Float.floatToIntBits(other.rgbReplacementBlue)) {

    return false;

  }

  if (Float.floatToIntBits(rgbReplacementGreen) != Float.floatToIntBits(other.rgbReplacementGreen)) {

    return false;

  }

  if (Float.floatToIntBits(rgbReplacementRed) != Float.floatToIntBits(other.rgbReplacementRed)) {

    return false;

  }

  return true;

}

Location: ColorExt.java

Content: 

/** 

 * Get ICC profile name

 * @return ICC profile name

 */

public String getIccProfileName(){

  return this.iccProfileName;

}

Location: ColorExt.java

Content: 

/** 

 * Get ICC profile source

 * @return ICC profile source

 */

public String getIccProfileSrc(){

  return this.iccProfileSrc;

}

Location: ColorExt.java

Content: 

/** 

 * @return the original ColorSpace

 */

public ColorSpace getOrigColorSpace(){

  return this.colorSpace;

}

Location: ColorExt.java

Content: 

/** 

 * Returns the original color values.

 * @return the original color values

 */

public float[] getOriginalColorComponents(){

  float[] copy=new float[this.colorValues.length];

  System.arraycopy(this.colorValues,0,copy,0,copy.length);

  return copy;

}

Location: ColorExt.java

Content: 

/** 

 * {@inheritDoc} 

 */

@Override public int hashCode(){

  return super.hashCode();

}

Location: ColorExt.java

Content: 

/** 

 * Create string representation of fop-rgb-icc function call to map this ColorExt settings

 * @return the string representing the internal fop-rgb-icc() function call

 */

public String toFunctionCall(){

  StringBuffer sb=new StringBuffer(40);

  sb.append("fop-rgb-icc(");

  sb.append(this.rgbReplacementRed + ",");

  sb.append(this.rgbReplacementGreen + ",");

  sb.append(this.rgbReplacementBlue + ",");

  sb.append(this.iccProfileName + ",");

  if (this.iccProfileSrc != null) {

    sb.append("\"" + this.iccProfileSrc + "\"");

  }

  float[] colorComponents=this.getColorComponents(null);

  for (  float colorComponent : colorComponents) {

    sb.append(",");

    sb.append(colorComponent);

  }

  sb.append(")");

  return sb.toString();

}

