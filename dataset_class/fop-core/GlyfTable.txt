Location: GlyfTable.java

Content: 

/** 

 * Adds to the subset, all the glyphs that are composed by a glyph, but do not appear themselves in the subset.

 */

protected void addAllComposedGlyphsToSubset(){

  int newIndex=subset.size();

  for (  int composedGlyph : composedGlyphs) {

    subset.put(composedGlyph,newIndex++);

  }

}

Location: GlyfTable.java

Content: 

public GlyfTable(FontFileReader in,OFMtxEntry[] metrics,OFDirTabEntry dirTableEntry,Map<Integer,Integer> glyphs) throws IOException {

  mtxTab=metrics;

  tableOffset=dirTableEntry.getOffset();

  remappedComposites=new HashSet<Long>();

  this.subset=glyphs;

  this.in=in;

}

Location: GlyfTable.java

Content: 

public boolean isComposite(int indexInOriginal) throws IOException {

  int numberOfContours=in.readTTFShort(tableOffset + mtxTab[indexInOriginal].getOffset());

  return numberOfContours < 0;

}

Location: GlyfTable.java

Content: 

/** 

 * Populates the map of subset glyphs with all the glyphs that compose the glyphs in the subset. This also re-maps the indices of composed glyphs to their new index in the subset font.

 * @throws IOException an I/O error

 */

protected void populateGlyphsWithComposites() throws IOException {

  for (  int indexInOriginal : subset.keySet()) {

    scanGlyphsRecursively(indexInOriginal);

  }

  addAllComposedGlyphsToSubset();

  for (  int compositeGlyph : compositeGlyphs) {

    long offset=tableOffset + mtxTab[compositeGlyph].getOffset() + 10;

    if (!remappedComposites.contains(offset)) {

      remapComposite(offset);

    }

  }

}

Location: GlyfTable.java

Content: 

/** 

 * Re-maps the index of composed glyphs in the original font to the index of the same glyph in the subset font.

 * @param glyphOffset the offset of the composite glyph

 * @throws IOException an I/O error

 */

private void remapComposite(long glyphOffset) throws IOException {

  long currentGlyphOffset=glyphOffset;

  remappedComposites.add(currentGlyphOffset);

  int flags=0;

  do {

    flags=in.readTTFUShort(currentGlyphOffset);

    int glyphIndex=in.readTTFUShort(currentGlyphOffset + 2);

    Integer indexInSubset=subset.get(glyphIndex);

    assert indexInSubset != null;

    in.writeTTFUShort(currentGlyphOffset + 2,indexInSubset);

    currentGlyphOffset+=4 + GlyfFlags.getOffsetToNextComposedGlyf(flags);

  }

 while (GlyfFlags.hasMoreComposites(flags));

}

Location: GlyfTable.java

Content: 

/** 

 * Reads a composite glyph at a given index and retrieves all the glyph indices of contingent composed glyphs.

 * @param indexInOriginal the glyph index of the composite glyph

 * @return the set of glyph indices this glyph composes

 * @throws IOException an I/O error

 */

public Set<Integer> retrieveComposedGlyphs(int indexInOriginal) throws IOException {

  Set<Integer> composedGlyphs=new HashSet<Integer>();

  long offset=tableOffset + mtxTab[indexInOriginal].getOffset() + 10;

  int flags=0;

  do {

    flags=in.readTTFUShort(offset);

    composedGlyphs.add(in.readTTFUShort(offset + 2));

    offset+=4 + GlyfFlags.getOffsetToNextComposedGlyf(flags);

  }

 while (GlyfFlags.hasMoreComposites(flags));

  return composedGlyphs;

}

Location: GlyfTable.java

Content: 

/** 

 * Scans each glyph for any composed glyphs. This populates <code>compositeGlyphs</code> with all the composite glyphs being used in the subset. This also populates <code>newGlyphs</code> with any new glyphs that are composed and do not appear in the subset of glyphs. For example the double quote mark (") is often composed of two apostrophes ('), if an apostrophe doesn't appear in the glyphs in the subset, it will be included and will be added to newGlyphs.

 * @param indexInOriginal the index of the glyph to test from the original font

 * @throws IOException an I/O error

 */

private void scanGlyphsRecursively(int indexInOriginal) throws IOException {

  if (!subset.containsKey(indexInOriginal)) {

    composedGlyphs.add(indexInOriginal);

  }

  if (isComposite(indexInOriginal)) {

    compositeGlyphs.add(indexInOriginal);

    Set<Integer> composedGlyphs=retrieveComposedGlyphs(indexInOriginal);

    for (    Integer composedGlyph : composedGlyphs) {

      scanGlyphsRecursively(composedGlyph);

    }

  }

}

