Location: PageableRenderer.java

Content: 

/** 

 * {@inheritDoc} 

 */

public PageFormat getPageFormat(int pageIndex) throws IndexOutOfBoundsException {

  try {

    if (pageIndex >= getNumberOfPages()) {

      return null;

    }

    PageFormat pageFormat=new PageFormat();

    Paper paper=new Paper();

    Rectangle2D dim=getPageViewport(pageIndex).getViewArea();

    double width=dim.getWidth();

    double height=dim.getHeight();

    if (width > height) {

      paper.setImageableArea(0,0,height / 1000d,width / 1000d);

      paper.setSize(height / 1000d,width / 1000d);

      pageFormat.setOrientation(PageFormat.LANDSCAPE);

    }

 else {

      paper.setImageableArea(0,0,width / 1000d,height / 1000d);

      paper.setSize(width / 1000d,height / 1000d);

      pageFormat.setOrientation(PageFormat.PORTRAIT);

    }

    pageFormat.setPaper(paper);

    return pageFormat;

  }

 catch (  FOPException fopEx) {

    throw new IndexOutOfBoundsException(fopEx.getMessage());

  }

}

Location: PageableRenderer.java

Content: 

/** 

 * Converts an object into a positive integer value if possible. The method throws an {@link IllegalArgumentException} if the value is invalid.

 * @param o the object to be converted

 * @return the positive integer

 */

protected int getPositiveInteger(Object o){

  if (o instanceof Integer) {

    Integer i=(Integer)o;

    if (i < 1) {

      throw new IllegalArgumentException("Value must be a positive Integer");

    }

    return i;

  }

 else   if (o instanceof String) {

    return Integer.parseInt((String)o);

  }

 else {

    throw new IllegalArgumentException("Value must be a positive integer");

  }

}

Location: PageableRenderer.java

Content: 

/** 

 * {@inheritDoc} 

 */

public Printable getPrintable(int pageIndex) throws IndexOutOfBoundsException {

  return this;

}

Location: PageableRenderer.java

Content: 

/** 

 * Creates a new PageableRenderer.

 * @param userAgent the user agent that contains configuration details. This cannot be null.

 */

public PageableRenderer(FOUserAgent userAgent){

  super(userAgent);

  Map rendererOptions=getUserAgent().getRendererOptions();

  processOptions(rendererOptions);

  this.pageFilter=new DefaultPageFilter();

}

Location: PageableRenderer.java

Content: 

private void processOptions(Map rendererOptions){

  Object o=rendererOptions.get(PageableRenderer.PAGES_MODE);

  if (o != null) {

    if (o instanceof PagesMode) {

      this.mode=(PagesMode)o;

    }

 else     if (o instanceof String) {

      this.mode=PagesMode.byName((String)o);

    }

 else {

      throw new IllegalArgumentException("Renderer option " + PageableRenderer.PAGES_MODE + " must be an 'all', 'even', 'odd' or a PagesMode instance.");

    }

  }

  o=rendererOptions.get(PageableRenderer.START_PAGE);

  if (o != null) {

    this.startNumber=getPositiveInteger(o);

  }

  o=rendererOptions.get(PageableRenderer.END_PAGE);

  if (o != null) {

    this.endNumber=getPositiveInteger(o);

  }

  if (this.endNumber >= 0 && this.endNumber < this.startNumber) {

    this.endNumber=this.startNumber;

  }

}

Location: PageableRenderer.java

Content: 

/** 

 * {@inheritDoc} 

 */

protected void rememberPage(PageViewport pageViewport){

  if (this.pageFilter.isValid(pageViewport)) {

    super.rememberPage(pageViewport);

  }

}

