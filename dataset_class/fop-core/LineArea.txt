Location: LineArea.java

Content: 

/** 

 * Add an inline child area to this line area.

 * @param area the inline child area to add

 */

public void addInlineArea(InlineArea area){

  inlineAreas.add(area);

}

Location: LineArea.java

Content: 

/** 

 * Get the end indent of this line area. The end indent is used for offsetting the end of the inline areas for alignment or other indents.

 * @return the end indent value

 */

public int getEndIndent(){

  if (hasTrait(Trait.END_INDENT)) {

    return getTraitAsInteger(Trait.END_INDENT);

  }

 else {

    return 0;

  }

}

Location: LineArea.java

Content: 

/** 

 * Get the inline child areas of this line area.

 * @return the list of inline areas

 */

public List getInlineAreas(){

  return inlineAreas;

}

Location: LineArea.java

Content: 

/** 

 * default constructor: nothing to do

 */

public LineArea(){

}

Location: LineArea.java

Content: 

/** 

 * constructor with extra parameters: a new LineAdjustingInfo object is created

 * @param alignment alignment of this line

 * @param diff      difference between content width and line width

 * @param stretch   the available stretch for any adjustments

 * @param shrink    the available shrink for any adjustments

 */

public LineArea(int alignment,int diff,int stretch,int shrink){

  adjustingInfo=new LineAdjustingInfo(alignment,diff,stretch,shrink);

}

Location: LineArea.java

Content: 

/** 

 * <p>Set (en masse) the inline child areas of this line area.</p> <p> Used by bidirectional processing after line area consituent reordering.</p>

 * @param inlineAreas the list of inline areas

 */

public void setInlineAreas(List inlineAreas){

  for (  InlineArea ia : (Iterable<InlineArea>)inlineAreas) {

    Area pa=ia.getParentArea();

    if (pa == null) {

      ia.setParentArea(this);

    }

 else {

      assert pa == this;

    }

  }

  this.inlineAreas=inlineAreas;

}

Location: LineArea.java

Content: 

/** 

 * Updates the extents of the line area from its children.

 */

public void updateExtentsFromChildren(){

  int ipd=0;

  int bpd=0;

  for (  InlineArea inlineArea : inlineAreas) {

    ipd=Math.max(ipd,inlineArea.getAllocIPD());

    bpd+=inlineArea.getAllocBPD();

  }

  setIPD(ipd);

  setBPD(bpd);

}

