Location: AFPRendererConfig.java

Content: 

private AFPRendererConfig(AFPFontConfig fontConfig){

  this.fontConfig=fontConfig;

}

Location: AFPRendererConfig.java

Content: 

public Boolean allowJpegEmbedding(){

  return getParam(JPEG_ALLOW_JPEG_EMBEDDING,Boolean.class);

}

Location: AFPRendererConfig.java

Content: 

public Float getBitmapEncodingQuality(){

  return getParam(JPEG_BITMAP_ENCODING_QUALITY,Float.class);

}

Location: AFPRendererConfig.java

Content: 

public Integer getBitsPerPixel(){

  if (isColorImages()) {

    throw new IllegalStateException();

  }

  return Integer.class.cast(imageModeParams.get(MODE_GRAYSCALE));

}

Location: AFPRendererConfig.java

Content: 

public URI getDefaultResourceGroupUri(){

  return getParam(RESOURCE_GROUP_URI,URI.class);

}

Location: AFPRendererConfig.java

Content: 

public Float getLineWidthCorrection(){

  return getParam(LINE_WIDTH_CORRECTION,Float.class);

}

Location: AFPRendererConfig.java

Content: 

private <T>T getParam(AFPRendererOption options,Class<T> type){

  assert options.getType().equals(type);

  return type.cast(params.get(options));

}

Location: AFPRendererConfig.java

Content: 

public AFPResourceLevelDefaults getResourceLevelDefaults(){

  return getParam(DEFAULT_RESOURCE_LEVELS,AFPResourceLevelDefaults.class);

}

Location: AFPRendererConfig.java

Content: 

public AFPShadingMode getShadingMode(){

  return getParam(SHADING,AFPShadingMode.class);

}

Location: AFPRendererConfig.java

Content: 

public Boolean isCmykImagesSupported(){

  if (!isColorImages()) {

    throw new IllegalStateException();

  }

  return Boolean.class.cast(imageModeParams.get(MODE_COLOR));

}

Location: AFPRendererConfig.java

Content: 

public Boolean isColorImages(){

  return getParam(IMAGES_MODE,Boolean.class);

}

Location: AFPRendererConfig.java

Content: 

public Boolean isFs45(){

  return getParam(IMAGES_FS45,Boolean.class);

}

Location: AFPRendererConfig.java

Content: 

public Boolean isGocaWrapPseg(){

  return getParam(GOCA_WRAP_PSEG,Boolean.class);

}

Location: AFPRendererConfig.java

Content: 

public Boolean isNativeImagesSupported(){

  return getParam(IMAGES_NATIVE,Boolean.class);

}

Location: AFPRendererConfig.java

Content: 

public Boolean isWrapPseg(){

  return getParam(IMAGES_WRAP_PSEG,Boolean.class);

}

Location: AFPRendererConfig.java

Content: 

private <T>void setParam(AFPRendererOption option,T value){

  assert option.getType().isInstance(value);

  params.put(option,value);

}

