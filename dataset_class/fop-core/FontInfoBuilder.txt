Location: FontInfoBuilder.java

Content: 

public FontInfo build(){

  FontInfo fontInfo=this.fontInfo;

  reset();

  return fontInfo;

}

Location: FontInfoBuilder.java

Content: 

public FontInfoBuilder(){

  reset();

}

Location: FontInfoBuilder.java

Content: 

private void registerFont(FontMetrics font,String key,String familyName){

  fontInfo.addMetrics(key,font);

  fontInfo.addFontProperties(key,familyName,Font.STYLE_NORMAL,Font.WEIGHT_NORMAL);

}

Location: FontInfoBuilder.java

Content: 

private void reset(){

  fontInfo=new FontInfo();

  fontKey=1;

}

Location: FontInfoBuilder.java

Content: 

public FontInfoBuilder useDejaVuLGCSerif(){

  return useDejaVuLGCSerif(USE_ADVANCED_BY_DEFAULT);

}

Location: FontInfoBuilder.java

Content: 

public FontInfoBuilder useDejaVuLGCSerif(boolean useAdvanced){

  try {

    return useFont(DEJAVU_LGC_SERIF,"DejaVuLGCSerif.ttf",useAdvanced);

  }

 catch (  Exception e) {

    throw new RuntimeException(e);

  }

}

Location: FontInfoBuilder.java

Content: 

public FontInfoBuilder useDroidSansMono(){

  return useDroidSansMono(USE_ADVANCED_BY_DEFAULT);

}

Location: FontInfoBuilder.java

Content: 

public FontInfoBuilder useDroidSansMono(boolean useAdvanced){

  try {

    return useFont(DROID_SANS_MONO,"DroidSansMono.ttf",useAdvanced);

  }

 catch (  Exception e) {

    throw new RuntimeException(e);

  }

}

Location: FontInfoBuilder.java

Content: 

private FontInfoBuilder useFont(String fontName,String filename,boolean useAdvanced) throws IOException, URISyntaxException {

  URI baseURI=new File("test/resources/fonts/ttf").toURI();

  InternalResourceResolver resolver=ResourceResolverFactory.createDefaultInternalResourceResolver(baseURI);

  OFFontLoader fontLoader=new OFFontLoader(new URI(filename),null,true,EmbeddingMode.AUTO,EncodingMode.AUTO,true,useAdvanced,resolver,false,false);

  FontMetrics font=fontLoader.getFont();

  registerFont(font,"F" + fontKey++,fontName);

  return this;

}

