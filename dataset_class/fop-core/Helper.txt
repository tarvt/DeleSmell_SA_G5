Location: Helper.java

Content: 

/** 

 * Returns the smallest integer that is greater than or equal to the <code>x/y</code> fraction. It's possible to consider this function as a analog of Math.ceil(x/y), without having deal with non-integer.

 * @param x integer, fraction numerator

 * @param y  integer, fraction denominator

 * @return the smallest integer that is greater than or equal to<code>x/y</code> fraction

 * @see java.lang.Math#ceil(double)

 */

public static int ceilPosition(int x,int y){

  return ceil(x,y) / y;

}

Location: Helper.java

Content: 

/** 

 * Returns minimal possible integer, greater or equal than <code>x</code>, divisible by <code>quantum</code>.

 * @param x integer for quantization

 * @param quantum integer, representing quantization

 * @return computed nearest integer

 */

public static int ceil(int x,int quantum){

  int dx=(x < 0) || (x % quantum == 0) ? 0 : 1;

  return (x / quantum + dx) * quantum;

}

Location: Helper.java

Content: 

/** 

 * Returns the largest integer that is less than or equal to the argument and is equal to <code>x/y</code> fraction. It's possible to consider this function as a analog of Math.floor(x/y), without having deal with non-integer.

 * @param x integer, fraction numerator

 * @param y integer, fraction denominator

 * @return the largest integer that is less than or equal tothe argument and is equal to <code>x/y</code> fraction

 * @see java.lang.Math#floor(double)

 */

public static int floorPosition(int x,int y){

  return floor(x,y) / y;

}

Location: Helper.java

Content: 

/** 

 * Returns maximum possible integer, less or equal than <code>oldValue</code>, divisible by <code>quantum</code>.

 * @param x integer for quantization

 * @param quantum integer, representing quantization

 * @return computed nearest integer

 */

public static int floor(int x,int quantum){

  int dx=(x > 0) || (x % quantum == 0) ? 0 : -1;

  return (x / quantum + dx) * quantum;

}

Location: Helper.java

Content: 

/** 

 * Don't let anyone instantiate this class.

 */

private Helper(){

}

Location: Helper.java

Content: 

/** 

 * Returns the closest integer to <code>x/y</code> fraction. It's possible to consider this methos as a analog of Math.round(x/y), without having deal with non-integer.

 * @param x integer, fraction numerator

 * @param y  integer, fraction denominator

 * @return the value of the fraction rounded to the nearest

 * @see java.lang.Math#round(double)

 */

public static int roundPosition(int x,int y){

  return round(x,y) / y;

}

Location: Helper.java

Content: 

/** 

 * Returns nearest integer to <code>x</code>, divisible by <code>quantum</code>.

 * @param x integer for quantization

 * @param quantum integer, representing quantization

 * @return computed nearest integer

 */

public static int round(int x,int quantum){

  int ceil=ceil(x,quantum);

  int floor=floor(x,quantum);

  return (ceil - x < x - floor) ? ceil : floor;

}

