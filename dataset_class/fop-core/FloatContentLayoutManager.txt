Location: FloatContentLayoutManager.java

Content: 

/** 

 * {Add info}

 * @param elemenList

 * @param startIndex

 * @param endIndex

 * @return

 */

public static List<FloatContentLayoutManager> checkForFloats(List<ListElement> elemenList,int startIndex,int endIndex){

  ListIterator<ListElement> iter=elemenList.listIterator(startIndex);

  List<FloatContentLayoutManager> floats=new ArrayList<FloatContentLayoutManager>();

  while (iter.nextIndex() <= endIndex) {

    ListElement element=iter.next();

    if (element instanceof KnuthInlineBox && ((KnuthInlineBox)element).isFloatAnchor()) {

      floats.add(((KnuthInlineBox)element).getFloatContentLM());

    }

 else     if (element instanceof KnuthBlockBox && ((KnuthBlockBox)element).hasFloatAnchors()) {

      floats.addAll(((KnuthBlockBox)element).getFloatContentLMs());

    }

  }

  if (floats.isEmpty()) {

    return Collections.emptyList();

  }

 else {

    return floats;

  }

}

Location: FloatContentLayoutManager.java

Content: 

/** 

 * {Add info}

 * @param node the {@link Float} associated with this instance

 */

public FloatContentLayoutManager(Float node){

  super(node);

  generatesReferenceArea=true;

  side=node.getFloat();

}

Location: FloatContentLayoutManager.java

Content: 

private int getContentAreaIPD(List<LayoutManager> childLMs){

  int ipd=0;

  for (  LayoutManager childLM : childLMs) {

    if (childLM instanceof TableLayoutManager) {

      ipd+=childLM.getContentAreaIPD();

    }

 else {

      ipd+=getContentAreaIPD(childLM.getChildLMs());

    }

  }

  return ipd;

}

Location: FloatContentLayoutManager.java

Content: 

private int getContentAreaIPD(List<LayoutManager> childLMs,Area childArea){

  int ipd=getContentAreaIPD(childLMs);

  if (ipd == 0) {

    return childArea.getEffectiveAllocIPD();

  }

  return ipd;

}

Location: FloatContentLayoutManager.java

Content: 

private int getStartIndent(){

  int startIndent;

  LayoutManager lm=getParent();

  while (!(lm instanceof BlockLayoutManager)) {

    lm=lm.getParent();

  }

  startIndent=((BlockLayoutManager)lm).startIndent;

  return startIndent;

}

