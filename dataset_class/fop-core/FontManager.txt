Location: FontManager.java

Content: 

/** 

 * Detect fonts from the operating system via FOPs autodetect mechanism.

 * @param autoDetectFonts if autodetect has been enabled

 * @param fontAdder the font adding mechanism

 * @param strict whether to enforce strict validation

 * @param listener the listener for font related events

 * @param fontInfoList a list of font info objects

 * @throws FOPException if an exception was thrown auto-detecting fonts

 */

public void autoDetectFonts(boolean autoDetectFonts,FontAdder fontAdder,boolean strict,FontEventListener listener,List<EmbedFontInfo> fontInfoList) throws FOPException {

  if (autoDetectFonts) {

    fontDetector.detect(this,fontAdder,strict,listener,fontInfoList);

  }

}

Location: FontManager.java

Content: 

/** 

 * Deletes the current FontCache file

 * @throws FOPException if an error was thrown while deleting the cache

 */

public void deleteCache() throws FOPException {

  fontCacheManager.delete();

}

Location: FontManager.java

Content: 

/** 

 * Whether or not to cache results of font triplet detection/auto-config

 */

public void disableFontCache(){

  fontCacheManager=FontCacheManagerFactory.createDisabled();

}

Location: FontManager.java

Content: 

/** 

 * Main constructor

 * @param resourceResolver the URI resolver

 * @param fontDetector the font detector

 * @param fontCacheManager the font cache manager

 */

public FontManager(InternalResourceResolver resourceResolver,FontDetector fontDetector,FontCacheManager fontCacheManager){

  this.resourceResolver=resourceResolver;

  this.fontDetector=fontDetector;

  this.fontCacheManager=fontCacheManager;

}

Location: FontManager.java

Content: 

/** 

 * Returns the font cache instance used by this font manager.

 * @return the font cache

 */

public FontCache getFontCache(){

  return fontCacheManager.load();

}

Location: FontManager.java

Content: 

/** 

 * Returns the font substitution catalog

 * @return the font substitution catalog

 */

protected FontSubstitutions getFontSubstitutions(){

  if (fontSubstitutions == null) {

    this.fontSubstitutions=new FontSubstitutions();

  }

  return fontSubstitutions;

}

Location: FontManager.java

Content: 

/** 

 * Gets the  {@link FontTriplet.Matcher} that can be used to identify the fonts that shallbe referenced rather than embedded.

 * @return the font triplet matcher (or null if none is set)

 */

public Matcher getReferencedFontsMatcher(){

  return this.referencedFontsMatcher;

}

Location: FontManager.java

Content: 

/** 

 * @return true if kerning on base 14 fonts is enabled 

 */

public boolean isBase14KerningEnabled(){

  return this.enableBase14Kerning;

}

Location: FontManager.java

Content: 

/** 

 * Saves the FontCache as necessary

 * @throws FOPException fop exception

 */

public void saveCache() throws FOPException {

  fontCacheManager.save();

}

Location: FontManager.java

Content: 

/** 

 * Controls whether kerning is activated on base 14 fonts.

 * @param value true if kerning should be activated

 */

public void setBase14KerningEnabled(boolean value){

  this.enableBase14Kerning=value;

}

Location: FontManager.java

Content: 

/** 

 * Sets the font cache file

 * @param cacheFileURI the URI of the font cache file

 */

public void setCacheFile(URI cacheFileURI){

  fontCacheManager.setCacheFile(resourceResolver.resolveFromBase(cacheFileURI));

}

Location: FontManager.java

Content: 

/** 

 * Sets the font substitutions

 * @param substitutions font substitutions

 */

public void setFontSubstitutions(FontSubstitutions substitutions){

  this.fontSubstitutions=substitutions;

}

Location: FontManager.java

Content: 

/** 

 * Sets the  {@link FontTriplet.Matcher} that can be used to identify the fonts that shallbe referenced rather than embedded.

 * @param matcher the font triplet matcher

 */

public void setReferencedFontsMatcher(FontTriplet.Matcher matcher){

  this.referencedFontsMatcher=matcher;

}

Location: FontManager.java

Content: 

/** 

 * Sets the font resource resolver

 * @param resourceResolver resource resolver

 */

public void setResourceResolver(InternalResourceResolver resourceResolver){

  this.resourceResolver=resourceResolver;

}

Location: FontManager.java

Content: 

/** 

 * Sets up the fonts on a given FontInfo object. The fonts to setup are defined by an array of  {@link FontCollection} objects.

 * @param fontInfo the FontInfo object to set up

 * @param fontCollections the array of font collections/sources

 */

public void setup(FontInfo fontInfo,FontCollection[] fontCollections){

  int startNum=1;

  for (  FontCollection fontCollection : fontCollections) {

    startNum=fontCollection.setup(startNum,fontInfo);

  }

  getFontSubstitutions().adjustFontInfo(fontInfo);

}

Location: FontManager.java

Content: 

/** 

 * Updates the referenced font list using the FontManager's referenced fonts matcher ( {@link #getReferencedFontsMatcher()}).

 * @param fontInfoList a font info list

 */

public void updateReferencedFonts(List<EmbedFontInfo> fontInfoList){

  Matcher matcher=getReferencedFontsMatcher();

  updateReferencedFonts(fontInfoList,matcher);

}

Location: FontManager.java

Content: 

/** 

 * Updates the referenced font list.

 * @param fontInfoList a font info list

 * @param matcher the font triplet matcher to use

 */

public void updateReferencedFonts(List<EmbedFontInfo> fontInfoList,Matcher matcher){

  if (matcher == null) {

    return;

  }

  for (  EmbedFontInfo fontInfo : fontInfoList) {

    for (    FontTriplet triplet : fontInfo.getFontTriplets()) {

      if (matcher.matches(triplet)) {

        fontInfo.setEmbedded(false);

        break;

      }

    }

  }

}

