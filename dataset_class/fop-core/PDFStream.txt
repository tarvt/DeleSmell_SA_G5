Location: PDFStream.java

Content: 

/** 

 * Append data to the stream

 * @param sb the string buffer of PDF to add

 */

public void add(StringBuffer sb){

  try {

    int nHave=sb.length();

    if (charBuffer == null) {

      charBuffer=new char[nHave * 2];

    }

 else {

      int nAvail=charBuffer.length;

      if (nAvail < nHave) {

        int nAlloc=nAvail;

        while (nAlloc < nHave) {

          nAlloc*=2;

        }

        charBuffer=new char[nAlloc];

      }

    }

    sb.getChars(0,nHave,charBuffer,0);

    this.streamWriter.write(charBuffer,0,nHave);

  }

 catch (  IOException ex) {

    ex.printStackTrace();

  }

}

Location: PDFStream.java

Content: 

/** 

 * Returns an OutputStream that can be used to write to the buffer which is used to build up the PDF stream.

 * @return the OutputStream

 * @throws IOException In case of an I/O problem

 */

public OutputStream getBufferOutputStream() throws IOException {

  if (this.streamWriter != null) {

    flush();

  }

  return this.data.getOutputStream();

}

Location: PDFStream.java

Content: 

/** 

 * Returns a Writer that writes to the OutputStream of the buffer.

 * @return the Writer

 */

public Writer getBufferWriter(){

  return this.streamWriter;

}

Location: PDFStream.java

Content: 

/** 

 * Returns the size of the content.

 * @return size of the content

 */

public int getDataLength(){

  try {

    flush();

    return data.getSize();

  }

 catch (  Exception e) {

    e.printStackTrace();

    return 0;

  }

}

Location: PDFStream.java

Content: 

/** 

 * {@inheritDoc} 

 */

protected int getSizeHint() throws IOException {

  flush();

  return data.getSize();

}

Location: PDFStream.java

Content: 

/** 

 * Create an empty stream object

 */

public PDFStream(){

  setUp();

}

Location: PDFStream.java

Content: 

public PDFStream(boolean encodeOnTheFly){

  super(encodeOnTheFly);

  setUp();

}

Location: PDFStream.java

Content: 

public PDFStream(PDFDictionary dictionary){

  super(dictionary);

  setUp();

}

Location: PDFStream.java

Content: 

public PDFStream(PDFDictionary dictionary,boolean encodeOnTheFly){

  super(dictionary,encodeOnTheFly);

  setUp();

}

Location: PDFStream.java

Content: 

/** 

 * Used to set the contents of the PDF stream.

 * @param data the contents as a byte array

 * @throws IOException in case of an I/O problem

 */

public void setData(byte[] data) throws IOException {

  this.data.clear();

  this.data.write(data);

}

Location: PDFStream.java

Content: 

public String streamHashCode() throws IOException {

  ByteArrayOutputStream bos=new ByteArrayOutputStream();

  outputRawStreamData(bos);

  try {

    MessageDigest md=MessageDigest.getInstance("MD5");

    byte[] thedigest=md.digest(bos.toByteArray());

    StringBuilder hex=new StringBuilder();

    for (    byte b : thedigest) {

      hex.append(String.format("%02x",b));

    }

    return hex.toString();

  }

 catch (  NoSuchAlgorithmException e) {

    throw new IOException(e);

  }

}

