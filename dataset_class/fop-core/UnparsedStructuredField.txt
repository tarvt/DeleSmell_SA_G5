Location: UnparsedStructuredField.java

Content: 

/** 

 * Returns category code function name for this field.

 * @return the category code function name

 */

private String getCategoryCodeAsString(){

switch (getSfCategoryCode() & 0xFF) {

case 0x5F:

    return "Page Segment";

case 0x6B:

  return "Object Area";

case 0x77:

return "Color Attribute Table";

case 0x7B:

return "IM Image";

case 0x88:

return "Medium";

case 0x89:

return "Font";

case 0x8A:

return "Coded Font";

case 0x90:

return "Process Element";

case 0x92:

return "Object Container";

case 0x9B:

return "Presentation Text";

case 0xA7:

return "Index";

case 0xA8:

return "Document";

case 0xAD:

return "Page Group";

case 0xAF:

return "Page";

case 0xBB:

return "Graphics";

case 0xC3:

return "Data Resource";

case 0xC4:

return "Document Environment Group (DEG)";

case 0xC6:

return "Resource Group";

case 0xC7:

return "Object Environment Group (OEG)";

case 0xC9:

return "Active Environment Group (AEG)";

case 0xCC:

return "Medium Map";

case 0xCD:

return "Form Map";

case 0xCE:

return "Name Resource";

case 0xD8:

return "Page Overlay";

case 0xD9:

return "Resource Environment Group (REG)";

case 0xDF:

return "Overlay";

case 0xEA:

return "Data Supression";

case 0xEB:

return "Bar Code";

case 0xEE:

return "No Operation";

case 0xFB:

return "Image";

default :

return "Unknown:" + Integer.toHexString(getSfTypeCode()).toUpperCase();

}

}

Location: UnparsedStructuredField.java

Content: 

/** 

 * Returns the complete structured field as a byte array.

 * @return the complete field data

 */

public byte[] getCompleteFieldAsBytes(){

  ByteArrayOutputStream baos=new ByteArrayOutputStream(getSfLength());

  try {

    writeTo(baos);

  }

 catch (  IOException ioe) {

  }

  return baos.toByteArray();

}

Location: UnparsedStructuredField.java

Content: 

/** 

 * Returns the extension data if present.

 * @return the extension data (or null if no extension is present)

 */

byte[] getExtData(){

  if (this.extData == null) {

    return new byte[0];

  }

  byte[] rtn=new byte[this.extData.length];

  System.arraycopy(this.extData,0,rtn,0,rtn.length);

  return rtn;

}

Location: UnparsedStructuredField.java

Content: 

/** 

 * Returns the length of the extension if present.

 * @return the length of the extension (or 0 if no extension is present)

 */

public short getExtLength(){

  return (extData != null) ? (short)(extData.length + 1) : 0;

}

Location: UnparsedStructuredField.java

Content: 

byte[] getIntroducerData(){

  return introducer.getIntroducerData();

}

Location: UnparsedStructuredField.java

Content: 

/** 

 * Returns the structured field's category code.

 * @return the sfCategoryCode

 */

public byte getSfCategoryCode(){

  return introducer.categoryCode;

}

Location: UnparsedStructuredField.java

Content: 

/** 

 * Returns the structured field's class code.

 * @return the field class code

 */

public byte getSfClassCode(){

  return introducer.classCode;

}

Location: UnparsedStructuredField.java

Content: 

/** 

 * Returns the structured field's length.

 * @return the field length

 */

public short getSfLength(){

  return introducer.length;

}

Location: UnparsedStructuredField.java

Content: 

/** 

 * Returns the structured field's type code.

 * @return the type code

 */

public byte getSfTypeCode(){

  return introducer.typeCode;

}

Location: UnparsedStructuredField.java

Content: 

/** 

 * Returns the structured field's identifier.

 * @return the field identifier

 */

public int getSfTypeID(){

  return ((getSfClassCode() & 0xFF) << 16) | ((getSfTypeCode() & 0xFF) << 8) | (getSfCategoryCode() & 0xFF);

}

Location: UnparsedStructuredField.java

Content: 

/** 

 * Returns type code function name for this field.

 * @return the type code function name

 */

private String getTypeCodeAsString(){

switch (getSfTypeCode() & 0xFF) {

case 0xA0:

    return "Attribute";

case 0xA2:

  return "CopyCount";

case 0xA6:

return "Descriptor";

case 0xA7:

return "Control";

case 0xA8:

return "Begin";

case 0xA9:

return "End";

case 0xAB:

return "Map";

case 0xAC:

return "Position";

case 0xAD:

return "Process";

case 0xAF:

return "Include";

case 0xB0:

return "Table";

case 0xB1:

return "Migration";

case 0xB2:

return "Variable";

case 0xB4:

return "Link";

case 0xEE:

return "Data";

default :

return "Unknown:" + Integer.toHexString(getSfTypeCode()).toUpperCase();

}

}

Location: UnparsedStructuredField.java

Content: 

/** 

 * Indicates whether an field introducer extension is present.

 * @return true if an field introducer extension is present

 */

public boolean isSfiExtensionPresent(){

  return introducer.extensionPresent && (this.extData != null);

}

Location: UnparsedStructuredField.java

Content: 

/** 

 * Indicates whether the data is padded.

 * @return true if the data is padded

 */

public boolean isSfiPaddingPresent(){

  return introducer.paddingPresent;

}

Location: UnparsedStructuredField.java

Content: 

/** 

 * Indicates whether segmented data is present.

 * @return true if the data is segmented

 */

public boolean isSfiSegmentedData(){

  return introducer.segmentedData;

}

Location: UnparsedStructuredField.java

Content: 

/** 

 * @param Structured field introducer

 * @param data Structured field data

 * @param extData Structured field extension data

 */

UnparsedStructuredField(Introducer introducer,byte[] data,byte[] extData){

  this.introducer=introducer;

  this.data=data;

  if (extData != null) {

    this.extData=extData;

  }

 else {

    this.extData=null;

  }

}

