Location: PSDocumentHandler.java

Content: 

/** 

 * {@inheritDoc} 

 */

public void endDocumentHeader() throws IFException {

  try {

    hongshuai();

    gen.writeln(DSCConstants.PS_ADOBE_30);

    gen.writeDSCComment(DSCConstants.CREATOR,new String[]{getUserAgent().getProducer()});

    gen.writeDSCComment(DSCConstants.CREATION_DATE,new Object[]{new java.util.Date()});

    gen.writeDSCComment(DSCConstants.LANGUAGE_LEVEL,gen.getPSLevel());

    gen.writeDSCComment(DSCConstants.PAGES,new Object[]{DSCConstants.ATEND});

    gen.writeDSCComment(DSCConstants.BBOX,DSCConstants.ATEND);

    gen.writeDSCComment(DSCConstants.HIRES_BBOX,DSCConstants.ATEND);

    gen.writeDSCComment(DSCConstants.DOCUMENT_SUPPLIED_RESOURCES,new Object[]{DSCConstants.ATEND});

    writeExtensions(COMMENT_DOCUMENT_HEADER);

    gen.writeDSCComment(DSCConstants.END_COMMENTS);

    gen.writeDSCComment(DSCConstants.BEGIN_DEFAULTS);

    gen.writeDSCComment(DSCConstants.END_DEFAULTS);

    gen.writeDSCComment(DSCConstants.BEGIN_PROLOG);

    PSProcSets.writeStdProcSet(gen);

    PSProcSets.writeEPSProcSet(gen);

    FOPProcSet.INSTANCE.writeTo(gen);

    gen.writeDSCComment(DSCConstants.END_PROLOG);

    gen.writeDSCComment(DSCConstants.BEGIN_SETUP);

    PSRenderingUtil.writeSetupCodeList(gen,setupCodeList,"SetupCode");

    if (!psUtil.isOptimizeResources()) {

      this.fontResources.addAll(PSFontUtils.writeFontDict(gen,fontInfo,eventProducer));

    }

 else {

      gen.commentln("%FOPFontSetup");

    }

    gen.writeDSCComment(DSCConstants.END_SETUP);

  }

 catch (  IOException ioe) {

    throw new IFException("I/O error writing the PostScript header",ioe);

  }

}

Location: PSDocumentHandler.java

Content: 

/** 

 * {@inheritDoc} 

 */

public void endPage() throws IFException {

  try {

    gen.getResourceTracker().writeResources(true,gen);

  }

 catch (  IOException ioe) {

    throw new IFException("I/O error in endPage()",ioe);

  }

  this.currentPageDefinition=null;

}

Location: PSDocumentHandler.java

Content: 

/** 

 * {@inheritDoc} 

 */

public void endPageContent() throws IFException {

  try {

    gen.showPage();

  }

 catch (  IOException ioe) {

    throw new IFException("I/O error in endPageContent()",ioe);

  }

}

Location: PSDocumentHandler.java

Content: 

/** 

 * {@inheritDoc} 

 */

public void endPageHeader() throws IFException {

  try {

    if (!pageDeviceDictionary.isEmpty()) {

      String content=pageDeviceDictionary.getContent();

      if (psUtil.isSafeSetPageDevice()) {

        content+=" SSPD";

      }

 else {

        content+=" setpagedevice";

      }

      PSRenderingUtil.writeEnclosedExtensionAttachment(gen,new PSSetPageDevice(content));

    }

    double pageHeight=this.currentPageDefinition.dimensions.getHeight();

    if (this.currentPageDefinition.rotate) {

      gen.writeln(gen.formatDouble(pageHeight) + " 0 translate");

      gen.writeln("90 rotate");

    }

    gen.concatMatrix(1,0,0,-1,0,pageHeight);

    gen.writeDSCComment(DSCConstants.END_PAGE_SETUP);

  }

 catch (  IOException ioe) {

    throw new IFException("I/O error in endPageHeader()",ioe);

  }

  super.endPageHeader();

}

Location: PSDocumentHandler.java

Content: 

/** 

 * {@inheritDoc} 

 */

public void endPageTrailer() throws IFException {

  try {

    writeExtensions(COMMENT_PAGE_TRAILER);

  }

 catch (  IOException ioe) {

    throw new IFException("I/O error in endPageTrailer()",ioe);

  }

  super.endPageTrailer();

}

Location: PSDocumentHandler.java

Content: 

/** 

 * {@inheritDoc} 

 */

public IFDocumentHandlerConfigurator getConfigurator(){

  return new PSRendererConfigurator(getUserAgent(),new PSRendererConfigParser());

}

Location: PSDocumentHandler.java

Content: 

/** 

 * Returns a PSResource instance representing a image as a PostScript form.

 * @param uri the image URI

 * @return a PSResource instance

 */

public PSResource getFormForImage(String uri){

  if (uri == null || "".equals(uri)) {

    throw new IllegalArgumentException("uri must not be empty or null");

  }

  if (this.formResources == null) {

    this.formResources=new java.util.HashMap();

  }

  PSResource form=(PSResource)this.formResources.get(uri);

  if (form == null) {

    form=new PSImageFormResource(this.formResources.size() + 1,uri);

    this.formResources.put(uri,form);

  }

  return form;

}

Location: PSDocumentHandler.java

Content: 

PSGenerator getGenerator(){

  return gen;

}

Location: PSDocumentHandler.java

Content: 

/** 

 * Returns the PSResource for the given font key.

 * @param key the font key ("F*")

 * @return the matching PSResource

 */

protected PSFontResource getPSResourceForFontKey(String key){

  return this.fontResources.getFontResourceForFontKey(key);

}

Location: PSDocumentHandler.java

Content: 

public PSRenderingUtil getPSUtil(){

  return this.psUtil;

}

Location: PSDocumentHandler.java

Content: 

/** 

 * {@inheritDoc} 

 */

public void handleExtensionObject(Object extension) throws IFException {

  try {

    if (extension instanceof PSSetupCode) {

      if (inPage()) {

        PSRenderingUtil.writeEnclosedExtensionAttachment(gen,(PSSetupCode)extension);

      }

 else {

        if (setupCodeList == null) {

          setupCodeList=new java.util.ArrayList();

        }

        if (!setupCodeList.contains(extension)) {

          setupCodeList.add(extension);

        }

      }

    }

 else     if (extension instanceof PSSetPageDevice) {

      PSSetPageDevice setPageDevice=(PSSetPageDevice)extension;

      String content=setPageDevice.getContent();

      if (content != null) {

        try {

          this.pageDeviceDictionary.putAll(PSDictionary.valueOf(content));

        }

 catch (        PSDictionaryFormatException e) {

          PSEventProducer eventProducer=PSEventProducer.Provider.get(getUserAgent().getEventBroadcaster());

          eventProducer.postscriptDictionaryParseError(this,content,e);

        }

      }

    }

 else     if (extension instanceof PSCommentBefore) {

      if (inPage()) {

        PSRenderingUtil.writeEnclosedExtensionAttachment(gen,(PSCommentBefore)extension);

      }

 else {

        if (comments[COMMENT_DOCUMENT_HEADER] == null) {

          comments[COMMENT_DOCUMENT_HEADER]=new java.util.ArrayList();

        }

        comments[COMMENT_DOCUMENT_HEADER].add(extension);

      }

    }

 else     if (extension instanceof PSCommentAfter) {

      int targetCollection=(inPage() ? COMMENT_PAGE_TRAILER : COMMENT_DOCUMENT_TRAILER);

      if (comments[targetCollection] == null) {

        comments[targetCollection]=new java.util.ArrayList();

      }

      comments[targetCollection].add(extension);

    }

 else     if (extension instanceof PSPageTrailerCodeBefore) {

      if (comments[PAGE_TRAILER_CODE_BEFORE] == null) {

        comments[PAGE_TRAILER_CODE_BEFORE]=new ArrayList();

      }

      comments[PAGE_TRAILER_CODE_BEFORE].add(extension);

    }

  }

 catch (  IOException ioe) {

    throw new IFException("I/O error in handleExtensionObject()",ioe);

  }

}

Location: PSDocumentHandler.java

Content: 

private boolean inPage(){

  return this.currentPageDefinition != null;

}

Location: PSDocumentHandler.java

Content: 

/** 

 * Default constructor.

 */

public PSDocumentHandler(IFContext context){

  super(context);

  this.psUtil=new PSRenderingUtil(context.getUserAgent());

}

Location: PSDocumentHandler.java

Content: 

/** 

 * Used for two-pass production. This will rewrite the PostScript file from the temporary file while adding all needed resources.

 * @throws IOException In case of an I/O error.

 */

private void rewritePostScriptFile() throws IOException {

  log.debug("Processing PostScript resources...");

  long startTime=System.currentTimeMillis();

  ResourceTracker resTracker=gen.getResourceTracker();

  InputStream in=new BufferedInputStream(getUserAgent().getResourceResolver().getResource(tempURI));

  try {

    try {

      ResourceHandler handler=new ResourceHandler(getUserAgent(),eventProducer,this.fontInfo,resTracker,this.formResources);

      handler.process(in,this.outputStream,this.currentPageNumber,this.documentBoundingBox,psUtil);

      this.outputStream.flush();

    }

 catch (    DSCException e) {

      throw new RuntimeException(e.getMessage());

    }

  }

  finally {

    IOUtils.closeQuietly(in);

  }

  if (log.isDebugEnabled()) {

    long duration=System.currentTimeMillis() - startTime;

    log.debug("Resource Processing complete in " + duration + " ms.");

  }

}

Location: PSDocumentHandler.java

Content: 

/** 

 * {@inheritDoc} 

 */

public IFPainter startPageContent() throws IFException {

  return new PSPainter(this);

}

Location: PSDocumentHandler.java

Content: 

/** 

 * {@inheritDoc} 

 */

public void startPageHeader() throws IFException {

  super.startPageHeader();

  try {

    gen.writeDSCComment(DSCConstants.BEGIN_PAGE_SETUP);

  }

 catch (  IOException ioe) {

    throw new IFException("I/O error in startPageHeader()",ioe);

  }

}

Location: PSDocumentHandler.java

Content: 

/** 

 * {@inheritDoc} 

 */

public void startPageSequence(String id) throws IFException {

}

Location: PSDocumentHandler.java

Content: 

/** 

 * {@inheritDoc} 

 */

public void startPageTrailer() throws IFException {

  try {

    writeExtensions(PAGE_TRAILER_CODE_BEFORE);

    super.startPageTrailer();

    gen.writeDSCComment(DSCConstants.PAGE_TRAILER);

  }

 catch (  IOException ioe) {

    throw new IFException("I/O error in startPageTrailer()",ioe);

  }

}

Location: PSDocumentHandler.java

Content: 

/** 

 * {@inheritDoc} 

 */

public void startPage(int index,String name,String pageMasterName,Dimension size) throws IFException {

  try {

    this.currentPageNumber++;

    gen.getResourceTracker().notifyStartNewPage();

    gen.getResourceTracker().notifyResourceUsageOnPage(PSProcSets.STD_PROCSET);

    gen.writeDSCComment(DSCConstants.PAGE,new Object[]{name,this.currentPageNumber});

    double pageWidth=size.width / 1000.0;

    double pageHeight=size.height / 1000.0;

    boolean rotate=false;

    List pageSizes=new java.util.ArrayList();

    if (this.psUtil.isAutoRotateLandscape() && (pageHeight < pageWidth)) {

      rotate=true;

      pageSizes.add(Math.round(pageHeight));

      pageSizes.add(Math.round(pageWidth));

    }

 else {

      pageSizes.add(Math.round(pageWidth));

      pageSizes.add(Math.round(pageHeight));

    }

    pageDeviceDictionary.put("/PageSize",pageSizes);

    this.currentPageDefinition=new PageDefinition(new Dimension2DDouble(pageWidth,pageHeight),rotate);

    final Integer zero=0;

    Rectangle2D pageBoundingBox=new Rectangle2D.Double();

    if (rotate) {

      pageBoundingBox.setRect(0,0,pageHeight,pageWidth);

      gen.writeDSCComment(DSCConstants.PAGE_BBOX,new Object[]{zero,zero,Math.round(pageHeight),Math.round(pageWidth)});

      gen.writeDSCComment(DSCConstants.PAGE_HIRES_BBOX,new Object[]{zero,zero,pageHeight,pageWidth});

      gen.writeDSCComment(DSCConstants.PAGE_ORIENTATION,"Landscape");

    }

 else {

      pageBoundingBox.setRect(0,0,pageWidth,pageHeight);

      gen.writeDSCComment(DSCConstants.PAGE_BBOX,new Object[]{zero,zero,Math.round(pageWidth),Math.round(pageHeight)});

      gen.writeDSCComment(DSCConstants.PAGE_HIRES_BBOX,new Object[]{zero,zero,pageWidth,pageHeight});

      if (psUtil.isAutoRotateLandscape()) {

        gen.writeDSCComment(DSCConstants.PAGE_ORIENTATION,"Portrait");

      }

    }

    this.documentBoundingBox.add(pageBoundingBox);

    gen.writeDSCComment(DSCConstants.PAGE_RESOURCES,new Object[]{DSCConstants.ATEND});

    gen.commentln("%FOPSimplePageMaster: " + pageMasterName);

  }

 catch (  IOException ioe) {

    throw new IFException("I/O error in startPage()",ioe);

  }

}

Location: PSDocumentHandler.java

Content: 

/** 

 * {@inheritDoc} 

 */

public boolean supportsPagesOutOfOrder(){

  return false;

}

Location: PSDocumentHandler.java

Content: 

private void writeExtensions(int which) throws IOException {

  Collection extensions=comments[which];

  if (extensions != null) {

    PSRenderingUtil.writeEnclosedExtensionAttachments(gen,extensions);

    extensions.clear();

  }

}

