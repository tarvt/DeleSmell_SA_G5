Location: ElementListUtilsTestCase.java

Content: 

/** 

 * Tests ElementListUtils.removeLegalBreaksFromEnd().

 * @throws Exception if the test fails

 */

@Test public void testRemoveElementFromEndPenalty1() throws Exception {

  LinkedList lst=new LinkedList();

  lst.add(new KnuthBox(4000,null,false));

  lst.add(new KnuthPenalty(0,0,false,null,false));

  lst.add(new KnuthBox(4000,null,false));

  lst.add(new KnuthPenalty(0,200,false,null,false));

  lst.add(new KnuthBox(4000,null,false));

  lst.add(new KnuthPenalty(0,0,false,null,false));

  lst.add(new KnuthBox(4000,null,false));

  lst.add(new KnuthPenalty(0,KnuthElement.INFINITE,false,null,false));

  lst.add(new KnuthGlue(0,Integer.MAX_VALUE,0,null,false));

  lst.add(new KnuthPenalty(0,-KnuthElement.INFINITE,false,null,false));

  boolean res=ElementListUtils.removeLegalBreaksFromEnd(lst,9000);

  assertFalse(res);

  assertEquals(0,((KnuthPenalty)lst.get(1)).getPenalty());

  assertEquals(KnuthElement.INFINITE,((KnuthPenalty)lst.get(3)).getPenalty());

  assertEquals(KnuthElement.INFINITE,((KnuthPenalty)lst.get(5)).getPenalty());

}

Location: ElementListUtilsTestCase.java

Content: 

/** 

 * Tests ElementListUtils.removeLegalBreaksFromEnd().

 * @throws Exception if the test fails

 */

@Test public void testRemoveElementFromEndPenalty2() throws Exception {

  LinkedList lst=new LinkedList();

  lst.add(new KnuthBox(4000,null,false));

  lst.add(new KnuthPenalty(0,0,false,null,false));

  lst.add(new KnuthBox(4000,null,false));

  lst.add(new KnuthPenalty(0,200,false,null,false));

  lst.add(new KnuthBox(4000,null,false));

  lst.add(new KnuthGlue(0,0,0,null,false));

  lst.add(new KnuthBox(4000,null,false));

  lst.add(new KnuthPenalty(0,KnuthElement.INFINITE,false,null,false));

  lst.add(new KnuthGlue(0,Integer.MAX_VALUE,0,null,false));

  lst.add(new KnuthPenalty(0,-KnuthElement.INFINITE,false,null,false));

  boolean res=ElementListUtils.removeLegalBreaksFromEnd(lst,9000);

  assertFalse(res);

  assertEquals(0,((KnuthPenalty)lst.get(1)).getPenalty());

  assertEquals(KnuthElement.INFINITE,((KnuthPenalty)lst.get(3)).getPenalty());

  assertEquals(KnuthElement.INFINITE,((KnuthPenalty)lst.get(5)).getPenalty());

  assertEquals(0,((KnuthGlue)lst.get(6)).getWidth());

}

Location: ElementListUtilsTestCase.java

Content: 

/** 

 * Tests ElementListUtils.removeLegalBreaks().

 * @throws Exception if the test fails

 */

@Test public void testRemoveElementPenalty1() throws Exception {

  LinkedList lst=new LinkedList();

  lst.add(new KnuthBox(4000,null,false));

  lst.add(new KnuthPenalty(0,0,false,null,false));

  lst.add(new KnuthBox(4000,null,false));

  lst.add(new KnuthPenalty(0,200,false,null,false));

  lst.add(new KnuthBox(4000,null,false));

  lst.add(new KnuthPenalty(0,0,false,null,false));

  lst.add(new KnuthBox(4000,null,false));

  lst.add(new KnuthPenalty(0,KnuthElement.INFINITE,false,null,false));

  lst.add(new KnuthGlue(0,Integer.MAX_VALUE,0,null,false));

  lst.add(new KnuthPenalty(0,-KnuthElement.INFINITE,false,null,false));

  boolean res=ElementListUtils.removeLegalBreaks(lst,9000);

  assertFalse(res);

  assertEquals(KnuthElement.INFINITE,((KnuthPenalty)lst.get(1)).getPenalty());

  assertEquals(KnuthElement.INFINITE,((KnuthPenalty)lst.get(3)).getPenalty());

  assertEquals(0,((KnuthPenalty)lst.get(5)).getPenalty());

}

Location: ElementListUtilsTestCase.java

Content: 

/** 

 * Tests ElementListUtils.removeLegalBreaks().

 * @throws Exception if the test fails

 */

@Test public void testRemoveElementPenalty2() throws Exception {

  LinkedList lst=new LinkedList();

  lst.add(new KnuthBox(4000,null,false));

  lst.add(new KnuthGlue(0,0,0,null,false));

  lst.add(new KnuthBox(4000,null,false));

  lst.add(new KnuthGlue(0,0,0,null,false));

  lst.add(new KnuthBox(4000,null,false));

  lst.add(new KnuthGlue(0,0,0,null,false));

  lst.add(new KnuthBox(4000,null,false));

  lst.add(new KnuthPenalty(0,KnuthElement.INFINITE,false,null,false));

  lst.add(new KnuthGlue(0,Integer.MAX_VALUE,0,null,false));

  lst.add(new KnuthPenalty(0,-KnuthElement.INFINITE,false,null,false));

  boolean res=ElementListUtils.removeLegalBreaks(lst,9000);

  assertFalse(res);

  assertEquals(KnuthElement.INFINITE,((KnuthPenalty)lst.get(1)).getPenalty());

  assertEquals(0,((KnuthGlue)lst.get(2)).getWidth());

  assertEquals(KnuthElement.INFINITE,((KnuthPenalty)lst.get(4)).getPenalty());

  assertEquals(0,((KnuthGlue)lst.get(5)).getWidth());

  assertEquals(0,((KnuthGlue)lst.get(7)).getWidth());

}

