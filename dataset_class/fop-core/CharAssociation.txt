Location: CharAssociation.java

Content: 

/** 

 * Instantiate a non-disjoint character association.

 * @param subIntervals if disjoint, then array of sub-intervals, otherwise null; evenmembers of array are sub-interval starts, and odd members are sub-interval ends (exclusive)

 */

public CharAssociation(int[] subIntervals){

  this(getSubIntervalsStart(subIntervals),getSubIntervalsLength(subIntervals),subIntervals);

}

Location: CharAssociation.java

Content: 

/** 

 * Instantiate a non-disjoint character association.

 * @param offset into array of UTF-16 code elements (in associated CharSequence)

 * @param count of UTF-16 character code elements (in associated CharSequence)

 */

public CharAssociation(int offset,int count){

  this(offset,count,null);

}

Location: CharAssociation.java

Content: 

/** 

 * Instantiate a character association.

 * @param offset into array of Unicode scalar values (in associated IntBuffer)

 * @param count of Unicode scalar values (in associated IntBuffer)

 * @param subIntervals if disjoint, then array of sub-intervals, otherwise null; evenmembers of array are sub-interval starts, and odd members are sub-interval ends (exclusive)

 */

public CharAssociation(int offset,int count,int[] subIntervals){

  this.offset=offset;

  this.count=count;

  this.subIntervals=((subIntervals != null) && (subIntervals.length > 2)) ? subIntervals : null;

}

Location: CharAssociation.java

Content: 

/** 

 * @param offset of interval in sequence

 * @param count length of interval

 * @return true if this association is contained within [offset,offset+count)

 */

public boolean contained(int offset,int count){

  int s=offset;

  int e=offset + count;

  if (!isDisjoint()) {

    int s0=getStart();

    int e0=getEnd();

    return (s0 >= s) && (e0 <= e);

  }

 else {

    int ns=getSubIntervalCount();

    for (int i=0; i < ns; i++) {

      int s0=subIntervals[2 * i + 0];

      int e0=subIntervals[2 * i + 1];

      if ((s0 >= s) && (e0 <= e)) {

        return true;

      }

    }

    return false;

  }

}

Location: CharAssociation.java

Content: 

/** 

 * Extract sorted sub-intervals.

 */

private static int[] extractIntervals(CharAssociation[] aa){

  int ni=0;

  for (  CharAssociation a : aa) {

    if (a.isDisjoint()) {

      ni+=a.getSubIntervalCount();

    }

 else {

      ni+=1;

    }

  }

  int[] sa=new int[ni];

  int[] ea=new int[ni];

  for (int i=0, k=0; i < aa.length; i++) {

    CharAssociation a=aa[i];

    if (a.isDisjoint()) {

      int[] da=a.getSubIntervals();

      for (int j=0; j < da.length; j+=2) {

        sa[k]=da[j + 0];

        ea[k]=da[j + 1];

        k++;

      }

    }

 else {

      sa[k]=a.getStart();

      ea[k]=a.getEnd();

      k++;

    }

  }

  return sortIntervals(sa,ea);

}

Location: CharAssociation.java

Content: 

/** 

 * @return end of association interval 

 */

public int getEnd(){

  return getOffset() + getCount();

}

Location: CharAssociation.java

Content: 

/** 

 * Obtain predication merger for KEY.

 * @param key for predication merger

 * @return predication merger or null if none exists

 */

public static PredicationMerger getPredicationMerger(String key){

  if (predicationMergers != null) {

    return predicationMergers.get(key);

  }

 else {

    return null;

  }

}

Location: CharAssociation.java

Content: 

/** 

 * Get predication KEY.

 * @param key predication key

 * @return predication KEY at OFFSET or null if none exists

 */

public Object getPredication(String key){

  if (predications != null) {

    return predications.get(key);

  }

 else {

    return null;

  }

}

Location: CharAssociation.java

Content: 

/** 

 * @return start of association interval 

 */

public int getStart(){

  return getOffset();

}

Location: CharAssociation.java

Content: 

/** 

 * @return count of subintervals of disjoint association 

 */

public int getSubIntervalCount(){

  return (subIntervals != null) ? (subIntervals.length / 2) : 0;

}

Location: CharAssociation.java

Content: 

/** 

 * @return subintervals of disjoint association 

 */

public int[] getSubIntervals(){

  return subIntervals;

}

Location: CharAssociation.java

Content: 

private static int getSubIntervalsLength(int[] ia){

  int us=Integer.MAX_VALUE;

  int ue=Integer.MIN_VALUE;

  if (ia != null) {

    for (int i=0, n=ia.length; i < n; i+=2) {

      int s=ia[i + 0];

      int e=ia[i + 1];

      if (s < us) {

        us=s;

      }

      if (e > ue) {

        ue=e;

      }

    }

    if (ue < 0) {

      ue=0;

    }

    if (us > ue) {

      us=ue;

    }

  }

  return ue - us;

}

Location: CharAssociation.java

Content: 

private static int getSubIntervalsStart(int[] ia){

  int us=Integer.MAX_VALUE;

  int ue=Integer.MIN_VALUE;

  if (ia != null) {

    for (int i=0, n=ia.length; i < n; i+=2) {

      int s=ia[i + 0];

      int e=ia[i + 1];

      if (s < us) {

        us=s;

      }

      if (e > ue) {

        ue=e;

      }

    }

    if (ue < 0) {

      ue=0;

    }

    if (us > ue) {

      us=ue;

    }

  }

  return us;

}

Location: CharAssociation.java

Content: 

/** 

 * @return true if association is disjoint 

 */

public boolean isDisjoint(){

  return subIntervals != null;

}

Location: CharAssociation.java

Content: 

/** 

 * Join (merge) multiple associations into a single, potentially disjoint association.

 * @param aa array of associations to join

 * @return (possibly disjoint) association containing joined associations

 */

public static CharAssociation join(CharAssociation[] aa){

  CharAssociation ca;

  int[] ia=extractIntervals(aa);

  if ((ia == null) || (ia.length == 0)) {

    ca=new CharAssociation(0,0);

  }

 else   if (ia.length == 2) {

    int s=ia[0];

    int e=ia[1];

    ca=new CharAssociation(s,e - s);

  }

 else {

    ca=new CharAssociation(mergeIntervals(ia));

  }

  return mergePredicates(ca,aa);

}

Location: CharAssociation.java

Content: 

/** 

 * Merge overlapping and abutting sub-intervals.

 */

private static int[] mergeIntervals(int[] ia){

  int ni=ia.length;

  int i;

  int n;

  int nm;

  int is;

  int ie;

  for (i=0, n=ni, nm=0, is=ie=-1; i < n; i+=2) {

    int s=ia[i + 0];

    int e=ia[i + 1];

    if ((ie < 0) || (s > ie)) {

      is=s;

      ie=e;

      nm++;

    }

 else     if (s >= is) {

      if (e > ie) {

        ie=e;

      }

    }

  }

  int[] mi=new int[nm * 2];

  for (i=0, n=ni, nm=0, is=ie=-1; i < n; i+=2) {

    int s=ia[i + 0];

    int e=ia[i + 1];

    int k=nm * 2;

    if ((ie < 0) || (s > ie)) {

      is=s;

      ie=e;

      mi[k + 0]=is;

      mi[k + 1]=ie;

      nm++;

    }

 else     if (s >= is) {

      if (e > ie) {

        ie=e;

      }

      mi[k - 1]=ie;

    }

  }

  return mi;

}

Location: CharAssociation.java

Content: 

private static CharAssociation mergePredicates(CharAssociation ca,CharAssociation[] aa){

  for (  CharAssociation a : aa) {

    ca.mergePredications(a);

  }

  return ca;

}

Location: CharAssociation.java

Content: 

/** 

 * Merge predications from another CA.

 * @param ca from which to merge

 */

public void mergePredications(CharAssociation ca){

  if (ca.predications != null) {

    for (    Map.Entry<String,Object> e : ca.predications.entrySet()) {

      mergePredication(e.getKey(),e.getValue());

    }

  }

}

Location: CharAssociation.java

Content: 

/** 

 * Merge predication values V1 and V2 on KEY. Uses registered <code>PredicationMerger</code> if one exists, otherwise uses V2 if non-null, otherwise uses V1.

 * @param key predication key

 * @param v1 first (original) predication value

 * @param v2 second (to be merged) predication value

 * @return merged value

 */

public static Object mergePredicationValues(String key,Object v1,Object v2){

  PredicationMerger pm=getPredicationMerger(key);

  if (pm != null) {

    return pm.merge(key,v1,v2);

  }

 else   if (v2 != null) {

    return v2;

  }

 else {

    return v1;

  }

}

Location: CharAssociation.java

Content: 

/** 

 * Merge predication &lt;KEY,VALUE&gt;.

 * @param key predication key

 * @param value predication value

 */

public void mergePredication(String key,Object value){

  if (predications == null) {

    predications=new HashMap<String,Object>();

  }

  if (predications != null) {

    if (predications.containsKey(key)) {

      Object v1=predications.get(key);

      Object v2=value;

      predications.put(key,mergePredicationValues(key,v1,v2));

    }

 else {

      predications.put(key,value);

    }

  }

}

Location: CharAssociation.java

Content: 

/** 

 * Replicate association to form <code>repeat</code> new associations.

 * @param a association to replicate

 * @param repeat count

 * @return array of replicated associations

 */

public static CharAssociation[] replicate(CharAssociation a,int repeat){

  CharAssociation[] aa=new CharAssociation[repeat];

  for (int i=0, n=aa.length; i < n; i++) {

    aa[i]=(CharAssociation)a.clone();

  }

  return aa;

}

Location: CharAssociation.java

Content: 

/** 

 * Register predication merger PM for KEY.

 * @param key for predication merger

 * @param pm predication merger

 */

public static void setPredicationMerger(String key,PredicationMerger pm){

  if (predicationMergers == null) {

    predicationMergers=new HashMap<String,PredicationMerger>();

  }

  if (predicationMergers != null) {

    predicationMergers.put(key,pm);

  }

}

Location: CharAssociation.java

Content: 

/** 

 * Set predication &lt;KEY,VALUE&gt;.

 * @param key predication key

 * @param value predication value

 */

public void setPredication(String key,Object value){

  if (predications == null) {

    predications=new HashMap<String,Object>();

  }

  if (predications != null) {

    predications.put(key,value);

  }

}

Location: CharAssociation.java

Content: 

/** 

 * Sort sub-intervals using modified Shell Sort.

 */

private static int[] sortIntervals(int[] sa,int[] ea){

  assert sa != null;

  assert ea != null;

  assert sa.length == ea.length;

  int ni=sa.length;

  int[] incr=(ni < 21) ? SORT_INCREMENTS_03 : SORT_INCREMENTS_16;

  for (  int anIncr : incr) {

    for (int h=anIncr, i=h, n=ni, j; i < n; i++) {

      int s1=sa[i];

      int e1=ea[i];

      for (j=i; j >= h; j-=h) {

        int s2=sa[j - h];

        int e2=ea[j - h];

        if (s2 > s1) {

          sa[j]=s2;

          ea[j]=e2;

        }

 else         if ((s2 == s1) && (e2 > e1)) {

          sa[j]=s2;

          ea[j]=e2;

        }

 else {

          break;

        }

      }

      sa[j]=s1;

      ea[j]=e1;

    }

  }

  int[] ia=new int[ni * 2];

  for (int i=0; i < ni; i++) {

    ia[(i * 2) + 0]=sa[i];

    ia[(i * 2) + 1]=ea[i];

  }

  return ia;

}

