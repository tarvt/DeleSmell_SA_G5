Location: FoUnitsConverter.java

Content: 

/** 

 * convert a font size given in points like "12pt" 

 */

int convertFontSize(String size) throws FOPException {

  size=size.trim();

  final String sFONTSUFFIX=FixedLength.POINT;

  if (!size.endsWith(sFONTSUFFIX)) {

    throw new FOPException("Invalid font size '" + size + "', must end with '"+ sFONTSUFFIX+ "'");

  }

  float result=0;

  size=size.substring(0,size.length() - sFONTSUFFIX.length());

  try {

    result=(Float.valueOf(size));

  }

 catch (  Exception e) {

    throw new FOPException("Invalid font size value '" + size + "'");

  }

  return (int)(result * 2.0);

}

Location: FoUnitsConverter.java

Content: 

/** 

 * convert given value to RTF units

 * @param foValue a value like "12mm"TODO: tested with "mm" units only, needs work to comply with FO spec Why does it search for period instead of simply breaking last two Characters into another units string? - Chris

 */

float convertToTwips(String foValue) throws FOPException {

  foValue=foValue.trim();

  final StringBuffer number=new StringBuffer();

  final StringBuffer units=new StringBuffer();

  for (int i=0; i < foValue.length(); i++) {

    final char c=foValue.charAt(i);

    if (Character.isDigit(c) || c == '.') {

      number.append(c);

    }

 else {

      units.append(foValue.substring(i).trim());

      break;

    }

  }

  return numberToTwips(number.toString(),units.toString());

}

Location: FoUnitsConverter.java

Content: 

/** 

 * singleton pattern 

 */

private FoUnitsConverter(){

}

Location: FoUnitsConverter.java

Content: 

/** 

 * convert given value to twips according to given units 

 */

private float numberToTwips(String number,String units) throws FOPException {

  float result=0;

  try {

    if (number != null && number.trim().length() > 0) {

      result=Float.valueOf(number);

    }

  }

 catch (  Exception e) {

    throw new FOPException("number format error: cannot convert '" + number + "' to float value");

  }

  if (units != null && units.trim().length() > 0) {

    final Float factor=(Float)TWIP_FACTORS.get(units.toLowerCase());

    if (factor == null) {

      throw new FOPException("conversion factor not found for '" + units + "' units");

    }

    result*=factor;

  }

  return result;

}

