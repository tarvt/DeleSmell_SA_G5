Location: AbstractGraphics2DAdapter.java

Content: 

private static BufferedImage createGrayBufferedImageWithAlpha(int width,int height){

  BufferedImage bi;

  boolean alphaPremultiplied=true;

  int bands=2;

  int[] bits=new int[bands];

  for (int i=0; i < bands; i++) {

    bits[i]=8;

  }

  ColorModel cm=new ComponentColorModel(ColorSpace.getInstance(ColorSpace.CS_GRAY),bits,true,alphaPremultiplied,Transparency.TRANSLUCENT,DataBuffer.TYPE_BYTE);

  WritableRaster wr=Raster.createInterleavedRaster(DataBuffer.TYPE_BYTE,width,height,bands,new Point(0,0));

  bi=new BufferedImage(cm,wr,alphaPremultiplied,null);

  return bi;

}

Location: AbstractGraphics2DAdapter.java

Content: 

/** 

 * Paints the image to a BufferedImage and returns that.

 * @param painter the painter which will paint the actual image

 * @param context the renderer context for the current renderer

 * @param resolution the requested bitmap resolution

 * @param gray true if the generated image should be in grayscales

 * @param withAlpha true if an alpha channel should be created

 * @return the generated BufferedImage

 */

protected BufferedImage paintToBufferedImage(org.apache.xmlgraphics.java2d.Graphics2DImagePainter painter,RendererContextWrapper context,int resolution,boolean gray,boolean withAlpha){

  int bmw=mpt2px(context.getWidth(),resolution);

  int bmh=mpt2px(context.getHeight(),resolution);

  BufferedImage bi;

  if (gray) {

    if (withAlpha) {

      bi=createGrayBufferedImageWithAlpha(bmw,bmh);

    }

 else {

      bi=new BufferedImage(bmw,bmh,BufferedImage.TYPE_BYTE_GRAY);

    }

  }

 else {

    if (withAlpha) {

      bi=new BufferedImage(bmw,bmh,BufferedImage.TYPE_INT_ARGB);

    }

 else {

      bi=new BufferedImage(bmw,bmh,BufferedImage.TYPE_INT_RGB);

    }

  }

  Graphics2D g2d=bi.createGraphics();

  try {

    g2d.setRenderingHint(RenderingHints.KEY_FRACTIONALMETRICS,RenderingHints.VALUE_FRACTIONALMETRICS_ON);

    setRenderingHintsForBufferedImage(g2d);

    g2d.setBackground(Color.white);

    g2d.setColor(Color.black);

    if (!withAlpha) {

      g2d.clearRect(0,0,bmw,bmh);

    }

    double sx=(double)bmw / context.getWidth();

    double sy=(double)bmh / context.getHeight();

    g2d.scale(sx,sy);

    Rectangle2D area=new Rectangle2D.Double(0.0,0.0,context.getWidth(),context.getHeight());

    painter.paint(g2d,area);

  }

  finally {

    g2d.dispose();

  }

  return bi;

}

Location: AbstractGraphics2DAdapter.java

Content: 

/** 

 * Sets rendering hints on the Graphics2D created for painting to a BufferedImage. Subclasses can modify the settings to customize the behaviour.

 * @param g2d the Graphics2D instance

 */

protected void setRenderingHintsForBufferedImage(Graphics2D g2d){

  g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_OFF);

  g2d.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING,RenderingHints.VALUE_TEXT_ANTIALIAS_OFF);

}

