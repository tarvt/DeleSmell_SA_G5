Location: TernaryTree.java

Content: 

/** 

 * Balance the tree for best search performance

 */

public void balance(){

  int i=0;

  int n=length;

  String[] k=new String[n];

  char[] v=new char[n];

  Iterator iter=new Iterator();

  while (iter.hasMoreElements()) {

    v[i]=iter.getValue();

    k[i++]=(String)iter.nextElement();

  }

  init();

  insertBalanced(k,v,0,n);

}

Location: TernaryTree.java

Content: 

private void compact(CharVector kx,TernaryTree map,char p){

  int k;

  if (p == 0) {

    return;

  }

  if (sc[p] == 0xFFFF) {

    k=map.find(kv.getArray(),lo[p]);

    if (k < 0) {

      k=kx.alloc(strlen(kv.getArray(),lo[p]) + 1);

      strcpy(kx.getArray(),k,kv.getArray(),lo[p]);

      map.insert(kx.getArray(),k,(char)k);

    }

    lo[p]=(char)k;

  }

 else {

    compact(kx,map,lo[p]);

    if (sc[p] != 0) {

      compact(kx,map,eq[p]);

    }

    compact(kx,map,hi[p]);

  }

}

Location: TernaryTree.java

Content: 

/** 

 * Find key.

 * @param key the key

 * @param start offset into key array

 * @return result

 */

public int find(char[] key,int start){

  int d;

  char p=root;

  int i=start;

  char c;

  while (p != 0) {

    if (sc[p] == 0xFFFF) {

      if (strcmp(key,i,kv.getArray(),lo[p]) == 0) {

        return eq[p];

      }

 else {

        return -1;

      }

    }

    c=key[i];

    d=c - sc[p];

    if (d == 0) {

      if (c == 0) {

        return eq[p];

      }

      i++;

      p=eq[p];

    }

 else     if (d < 0) {

      p=lo[p];

    }

 else {

      p=hi[p];

    }

  }

  return -1;

}

Location: TernaryTree.java

Content: 

/** 

 * Find key.

 * @param key the key

 * @return result

 */

public int find(String key){

  int len=key.length();

  char[] strkey=new char[len + 1];

  key.getChars(0,len,strkey,0);

  strkey[len]=0;

  return find(strkey,0);

}

Location: TernaryTree.java

Content: 

/** 

 * Recursively insert the median first and then the median of the lower and upper halves, and so on in order to get a balanced tree. The array of keys is assumed to be sorted in ascending order.

 * @param k array of keys

 * @param v array of values

 * @param offset where to insert

 * @param n count to insert

 */

protected void insertBalanced(String[] k,char[] v,int offset,int n){

  int m;

  if (n < 1) {

    return;

  }

  m=n >> 1;

  insert(k[m + offset],v[m + offset]);

  insertBalanced(k,v,offset,m);

  insertBalanced(k,v,offset + m + 1,n - m - 1);

}

Location: TernaryTree.java

Content: 

/** 

 * The actual insertion function, recursive version.

 */

private char insert(char p,char[] key,int start,char val){

  int len=strlen(key,start);

  if (p == 0) {

    p=freenode++;

    eq[p]=val;

    length++;

    hi[p]=0;

    if (len > 0) {

      sc[p]=0xFFFF;

      lo[p]=(char)kv.alloc(len + 1);

      strcpy(kv.getArray(),lo[p],key,start);

    }

 else {

      sc[p]=0;

      lo[p]=0;

    }

    return p;

  }

  if (sc[p] == 0xFFFF) {

    char pp=freenode++;

    lo[pp]=lo[p];

    eq[pp]=eq[p];

    lo[p]=0;

    if (len > 0) {

      sc[p]=kv.get(lo[pp]);

      eq[p]=pp;

      lo[pp]++;

      if (kv.get(lo[pp]) == 0) {

        lo[pp]=0;

        sc[pp]=0;

        hi[pp]=0;

      }

 else {

        sc[pp]=0xFFFF;

      }

    }

 else {

      sc[pp]=0xFFFF;

      hi[p]=pp;

      sc[p]=0;

      eq[p]=val;

      length++;

      return p;

    }

  }

  char s=key[start];

  if (s < sc[p]) {

    lo[p]=insert(lo[p],key,start,val);

  }

 else   if (s == sc[p]) {

    if (s != 0) {

      eq[p]=insert(eq[p],key,start + 1,val);

    }

 else {

      eq[p]=val;

    }

  }

 else {

    hi[p]=insert(hi[p],key,start,val);

  }

  return p;

}

Location: TernaryTree.java

Content: 

/** 

 * Insert key.

 * @param key the key

 * @param start offset into key array

 * @param val a value

 */

public void insert(char[] key,int start,char val){

  int len=strlen(key) + 1;

  if (freenode + len > eq.length) {

    redimNodeArrays(eq.length + BLOCK_SIZE);

  }

  root=insert(root,key,start,val);

}

Location: TernaryTree.java

Content: 

/** 

 * Branches are initially compressed, needing one node per key plus the size of the string key. They are decompressed as needed when another key with same prefix is inserted. This saves a lot of space, specially for long keys.

 * @param key the key

 * @param val a value

 */

public void insert(String key,char val){

  int len=key.length() + 1;

  if (freenode + len > eq.length) {

    redimNodeArrays(eq.length + BLOCK_SIZE);

  }

  char[] strkey=new char[len--];

  key.getChars(0,len,strkey,0);

  strkey[len]=0;

  root=insert(root,strkey,0,val);

}

Location: TernaryTree.java

Content: 

/** 

 * @return the keys 

 */

public Enumeration keys(){

  return new Iterator();

}

Location: TernaryTree.java

Content: 

/** 

 * @param key a key

 * @return trye if key present

 */

public boolean knows(String key){

  return (find(key) >= 0);

}

Location: TernaryTree.java

Content: 

/** 

 * Print stats (for testing).

 */

public void printStats(){

  System.out.println("Number of keys = " + Integer.toString(length));

  System.out.println("Node count = " + Integer.toString(freenode));

  System.out.println("Key Array length = " + Integer.toString(kv.length()));

}

Location: TernaryTree.java

Content: 

private void redimNodeArrays(int newsize){

  int len=newsize < lo.length ? newsize : lo.length;

  char[] na=new char[newsize];

  System.arraycopy(lo,0,na,0,len);

  lo=na;

  na=new char[newsize];

  System.arraycopy(hi,0,na,0,len);

  hi=na;

  na=new char[newsize];

  System.arraycopy(eq,0,na,0,len);

  eq=na;

  na=new char[newsize];

  System.arraycopy(sc,0,na,0,len);

  sc=na;

}

Location: TernaryTree.java

Content: 

/** 

 * @return length 

 */

public int size(){

  return length;

}

Location: TernaryTree.java

Content: 

/** 

 * Compares 2 null terminated char arrays

 * @param a a character array

 * @param startA an index into character array

 * @param b a character array

 * @param startB an index into character array

 * @return an integer

 */

public static int strcmp(char[] a,int startA,char[] b,int startB){

  for (; a[startA] == b[startB]; startA++, startB++) {

    if (a[startA] == 0) {

      return 0;

    }

  }

  return a[startA] - b[startB];

}

Location: TernaryTree.java

Content: 

/** 

 * Compares a string with null terminated char array

 * @param str a string

 * @param a a character array

 * @param start an index into character array

 * @return an integer

 */

public static int strcmp(String str,char[] a,int start){

  int i;

  int d;

  int len=str.length();

  for (i=0; i < len; i++) {

    d=(int)str.charAt(i) - a[start + i];

    if (d != 0) {

      return d;

    }

    if (a[start + i] == 0) {

      return d;

    }

  }

  if (a[start + i] != 0) {

    return -a[start + i];

  }

  return 0;

}

Location: TernaryTree.java

Content: 

/** 

 * @param dst a character array

 * @param di an index into character array

 * @param src a character array

 * @param si an index into character array

 */

public static void strcpy(char[] dst,int di,char[] src,int si){

  while (src[si] != 0) {

    dst[di++]=src[si++];

  }

  dst[di]=0;

}

Location: TernaryTree.java

Content: 

/** 

 * @param a a character array

 * @return an integer

 */

public static int strlen(char[] a){

  return strlen(a,0);

}

Location: TernaryTree.java

Content: 

/** 

 * @param a a character array

 * @param start an index into character array

 * @return an integer

 */

public static int strlen(char[] a,int start){

  int len=0;

  for (int i=start; i < a.length && a[i] != 0; i++) {

    len++;

  }

  return len;

}

Location: TernaryTree.java

Content: 

/** 

 * default constructor 

 */

TernaryTree(){

  hongshuai();

  root=0;

  freenode=1;

  length=0;

  lo=new char[BLOCK_SIZE];

  hi=new char[BLOCK_SIZE];

  eq=new char[BLOCK_SIZE];

  sc=new char[BLOCK_SIZE];

  kv=new CharVector();

}

Location: TernaryTree.java

Content: 

/** 

 * Each node stores a character (splitchar) which is part of some key(s). In a compressed branch (one that only contain a single string key) the trailer of the key which is not already in nodes is stored  externally in the kv array. As items are inserted, key substrings decrease. Some substrings may completely  disappear when the whole branch is totally decompressed. The tree is traversed to find the key substrings actually used. In addition, duplicate substrings are removed using a map (implemented with a TernaryTree!).

 */

public void trimToSize(){

  hongshuai();

  int i=0;

  int n=length;

  String[] k=new String[n];

  char[] v=new char[n];

  Iterator iter=new Iterator();

  while (iter.hasMoreElements()) {

    v[i]=iter.getValue();

    k[i++]=(String)iter.nextElement();

  }

  init();

  insertBalanced(k,v,0,n);

  redimNodeArrays(freenode);

  CharVector kx=new CharVector();

  kx.alloc(1);

  TernaryTree map=new TernaryTree();

  compact(kx,map,root);

  kv=kx;

  kv.trimToSize();

}

