Location: PDFStructureTreeBuilder.java

Content: 

private static void addBuilder(String fo,StructureElementBuilder mapper){

  BUILDERS.put(fo,mapper);

}

Location: PDFStructureTreeBuilder.java

Content: 

private static void addBuilder(String fo,StructureType structureType){

  addBuilder(fo,new DefaultStructureElementBuilder(structureType));

}

Location: PDFStructureTreeBuilder.java

Content: 

private void createRootStructureElement(PDFLogicalStructureHandler logicalStructureHandler){

  assert rootStructureElement == null;

  PDFParentTree parentTree=logicalStructureHandler.getParentTree();

  PDFStructTreeRoot structTreeRoot=pdfFactory.getDocument().makeStructTreeRoot(parentTree);

  rootStructureElement=createStructureElement("root",structTreeRoot,new AttributesImpl(),pdfFactory,eventBroadcaster);

}

Location: PDFStructureTreeBuilder.java

Content: 

public static PDFStructElem createStructureElement(String name,StructureHierarchyMember parent,Attributes attributes,PDFFactory pdfFactory,EventBroadcaster eventBroadcaster){

  StructureElementBuilder builder=BUILDERS.get(name);

  if (builder == null) {

    builder=DEFAULT_BUILDER;

  }

  return builder.build(parent,attributes,pdfFactory,eventBroadcaster);

}

Location: PDFStructureTreeBuilder.java

Content: 

public void endNode(String name){

  if (isPDFA1Safe(name)) {

    ancestors.removeFirst();

  }

}

Location: PDFStructureTreeBuilder.java

Content: 

private boolean isPDFA1Safe(String name){

  return !((pdfFactory.getDocument().getProfile().getPDFAMode().isPart1() || pdfFactory.getDocument().getProfile().getPDFUAMode().isEnabled()) && (name.equals("table-body") || name.equals("table-header") || name.equals("table-footer")));

}

Location: PDFStructureTreeBuilder.java

Content: 

void setEventBroadcaster(EventBroadcaster eventBroadcaster){

  this.eventBroadcaster=eventBroadcaster;

}

Location: PDFStructureTreeBuilder.java

Content: 

void setLogicalStructureHandler(PDFLogicalStructureHandler logicalStructureHandler){

  createRootStructureElement(logicalStructureHandler);

}

Location: PDFStructureTreeBuilder.java

Content: 

void setPdfFactory(PDFFactory pdfFactory){

  this.pdfFactory=pdfFactory;

}

Location: PDFStructureTreeBuilder.java

Content: 

public StructureTreeElement startImageNode(String name,Attributes attributes,StructureTreeElement parent){

  return startNode(name,attributes,parent);

}

Location: PDFStructureTreeBuilder.java

Content: 

public StructureTreeElement startNode(String name,Attributes attributes,StructureTreeElement parent){

  if (!isPDFA1Safe(name)) {

    return null;

  }

  assert parent == null || parent instanceof PDFStructElem;

  PDFStructElem parentElem=parent == null ? ancestors.getFirst() : (PDFStructElem)parent;

  PDFStructElem structElem=createStructureElement(name,parentElem,attributes,pdfFactory,eventBroadcaster);

  ancestors.addFirst(structElem);

  return structElem;

}

Location: PDFStructureTreeBuilder.java

Content: 

public void startPageSequence(Locale language,String role){

  ancestors=new LinkedList<PDFStructElem>();

  AttributesImpl attributes=new AttributesImpl();

  attributes.addAttribute("",ROLE,ROLE,XMLUtil.CDATA,role);

  PDFStructElem structElem=createStructureElement("page-sequence",rootStructureElement,attributes,pdfFactory,eventBroadcaster);

  if (language != null) {

    structElem.setLanguage(language);

  }

  ancestors.add(structElem);

}

Location: PDFStructureTreeBuilder.java

Content: 

public StructureTreeElement startReferencedNode(String name,Attributes attributes,StructureTreeElement parent){

  return startNode(name,attributes,parent);

}

