Location: RtfTextrun.java

Content: 

/** 

 * Inserts a bookmark.

 * @param id Id for the inserted bookmark

 * @throws IOException for I/O problems

 */

public void addBookmark(String id) throws IOException {

  if (id.length() > 0) {

    new RtfBookmark(this,writer,id);

  }

}

Location: RtfTextrun.java

Content: 

/** 

 * Adds instance of <code>CloseGroupMark</code> as a child, but without a break option. Inline attributes do not need that for example

 * @throws IOException for I/O problems

 */

private void addCloseGroupMark() throws IOException {

  RtfCloseGroupMark r=new RtfCloseGroupMark(this,writer,BREAK_NONE);

}

Location: RtfTextrun.java

Content: 

/** 

 * Adds instance of <code>CloseGroupMark</code> as a child.

 * @throws IOException for I/O problems

 */

private void addCloseGroupMark(int breakType) throws IOException {

  RtfCloseGroupMark r=new RtfCloseGroupMark(this,writer,breakType);

}

Location: RtfTextrun.java

Content: 

/** 

 * Inserts a footnote.

 * @return inserted footnote

 * @throws IOException for I/O problems

 */

public RtfFootnote addFootnote() throws IOException {

  return new RtfFootnote(this,writer);

}

Location: RtfTextrun.java

Content: 

/** 

 * Inserts a hyperlink.

 * @param attr Attributes for the hyperlink to insert.

 * @return inserted hyperlink

 * @throws IOException for I/O problems

 */

public RtfHyperLink addHyperlink(RtfAttributes attr) throws IOException {

  return new RtfHyperLink(this,writer,attr);

}

Location: RtfTextrun.java

Content: 

/** 

 * Inserts a leader.

 * @param attrs Attributes for the leader

 * @throws IOException for I/O problems

 */

public void addLeader(RtfAttributes attrs) throws IOException {

  new RtfLeader(this,writer,attrs);

}

Location: RtfTextrun.java

Content: 

/** 

 * Adds instance of <code>OpenGroupMark</code> as a child with attributes.

 * @param attrs  attributes to add

 * @throws IOException for I/O problems

 */

private void addOpenGroupMark(RtfAttributes attrs) throws IOException {

  RtfOpenGroupMark r=new RtfOpenGroupMark(this,writer,attrs);

}

Location: RtfTextrun.java

Content: 

/** 

 * Inserts a page number citation.

 * @param refId the identifier being referenced

 * @throws IOException for I/O problems

 */

public void addPageNumberCitation(String refId) throws IOException {

  RtfPageNumberCitation r=new RtfPageNumberCitation(this,writer,refId);

}

Location: RtfTextrun.java

Content: 

/** 

 * Inserts a page number.

 * @param attr Attributes for the page number to insert.

 * @throws IOException for I/O problems

 */

public void addPageNumber(RtfAttributes attr) throws IOException {

  RtfPageNumber r=new RtfPageNumber(this,writer,attr);

}

Location: RtfTextrun.java

Content: 

/** 

 * Inserts paragraph break before all close group marks.

 * @throws IOException  for I/O problems

 * @return The paragraph break element

 */

public RtfParagraphBreak addParagraphBreak() throws IOException {

  List children=getChildren();

  Stack tmp=new Stack();

  RtfParagraphBreak par=null;

  int deletedCloseGroupCount=0;

  ListIterator lit=children.listIterator(children.size());

  while (lit.hasPrevious() && (lit.previous() instanceof RtfCloseGroupMark)) {

    tmp.push(((RtfCloseGroupMark)lit.next()).getBreakType());

    lit.remove();

    deletedCloseGroupCount++;

  }

  if (children.size() != 0) {

    setChildren(children);

    par=new RtfParagraphBreak(this,writer);

    for (int i=0; i < deletedCloseGroupCount; i++) {

      addCloseGroupMark((Integer)tmp.pop());

    }

  }

  return par;

}

Location: RtfTextrun.java

Content: 

/** 

 * Add string to children list.

 * @param s  string to add

 * @throws IOException for I/O problems

 */

public void addString(String s) throws IOException {

  if (s.equals("")) {

    return;

  }

  RtfAttributes attrs=rtfSpaceManager.getLastInlineAttribute();

  rtfSpaceManager.pushRtfSpaceSplitter(attrs);

  rtfSpaceManager.setCandidate(attrs);

  new RtfString(this,writer,s);

  rtfSpaceManager.popRtfSpaceSplitter();

}

Location: RtfTextrun.java

Content: 

/** 

 * Gets the parent list-item of the textrun.

 * @return parent list-item of the textrun

 */

public RtfListItem getRtfListItem(){

  return rtfListItem;

}

Location: RtfTextrun.java

Content: 

/** 

 * Adds a new RtfTextrun to the given container if necessary, and returns it.

 * @param container RtfContainer, which is the parent of the returned RtfTextrun

 * @param writer Writer of the given RtfContainer

 * @param attrs RtfAttributes which are to write at the beginning of the RtfTextrun

 * @return new or existing RtfTextrun object.

 * @throws IOException for I/O problems

 */

public static RtfTextrun getTextrun(RtfContainer container,Writer writer,RtfAttributes attrs) throws IOException {

  List list=container.getChildren();

  if (list.size() == 0) {

    RtfTextrun textrun=new RtfTextrun(container,writer,attrs);

    list.add(textrun);

    return textrun;

  }

  Object obj=list.get(list.size() - 1);

  if (obj instanceof RtfTextrun) {

    return (RtfTextrun)obj;

  }

  RtfTextrun textrun=new RtfTextrun(container,writer,attrs);

  list.add(textrun);

  return textrun;

}

Location: RtfTextrun.java

Content: 

/** 

 * Pops block attributes, notifies all opened blocks about pushing block attributes, adds <code>CloseGroupMark</code> as a child.

 * @param breakType the break type

 * @throws IOException for I/O problems

 */

public void popBlockAttributes(int breakType) throws IOException {

  rtfSpaceManager.popRtfSpaceSplitter();

  rtfSpaceManager.stopUpdatingSpaceBefore();

  addCloseGroupMark(breakType);

}

Location: RtfTextrun.java

Content: 

/** 

 * Pop inline attributes.

 * @throws IOException for I/O problems

 */

public void popInlineAttributes() throws IOException {

  rtfSpaceManager.popInlineAttributes();

  addCloseGroupMark();

}

Location: RtfTextrun.java

Content: 

/** 

 * Pushes block attributes, notifies all opened blocks about pushing block attributes, adds <code>OpenGroupMark</code> as a child.

 * @param attrs  the block attributes to push

 * @throws IOException for I/O problems

 */

public void pushBlockAttributes(RtfAttributes attrs) throws IOException {

  rtfSpaceManager.stopUpdatingSpaceBefore();

  RtfSpaceSplitter splitter=rtfSpaceManager.pushRtfSpaceSplitter(attrs);

  addOpenGroupMark(splitter.getCommonAttributes());

}

Location: RtfTextrun.java

Content: 

/** 

 * Pushes inline attributes.

 * @param attrs  the inline attributes to push

 * @throws IOException for I/O problems

 */

public void pushInlineAttributes(RtfAttributes attrs) throws IOException {

  rtfSpaceManager.pushInlineAttributes(attrs);

  addOpenGroupMark(attrs);

}

Location: RtfTextrun.java

Content: 

/** 

 * Create an RTF container as a child of given container 

 */

RtfTextrun(RtfContainer parent,Writer w,RtfAttributes attrs) throws IOException {

  super(parent,w,attrs);

}

Location: RtfTextrun.java

Content: 

/** 

 * Set the parent list-item of the textrun.

 * @param listItem parent list-item of the textrun

 */

public void setRtfListItem(RtfListItem listItem){

  rtfListItem=listItem;

}

Location: RtfTextrun.java

Content: 

/** 

 * specify, if the last paragraph control word (\par) should be suppressed.

 * @param bSuppress true, if the last \par should be suppressed

 */

public void setSuppressLastPar(boolean bSuppress){

  bSuppressLastPar=bSuppress;

}

