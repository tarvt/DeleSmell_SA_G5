Location: IDTracker.java

Content: 

/** 

 * Get the first  {@link PageViewport} containing content generatedby the FO with the given  {@code id}.

 * @param id    the id

 * @return  the first {@link PageViewport} for the id; {@code null} ifno matching  {@link PageViewport} was found

 */

public PageViewport getFirstPageViewportContaining(String id){

  List<PageViewport> list=getPageViewportsContainingID(id);

  if (!(list == null || list.isEmpty())) {

    return list.get(0);

  }

  return null;

}

Location: IDTracker.java

Content: 

/** 

 * Get the last  {@link PageViewport} containing content generatedby the FO with the given  {@code id}.

 * @param id    the id

 * @return  the last {@link PageViewport} for the id; {@code null} ifno matching  {@link PageViewport} was found

 */

public PageViewport getLastPageViewportContaining(String id){

  List<PageViewport> list=getPageViewportsContainingID(id);

  if (!(list == null || list.isEmpty())) {

    return list.get(list.size() - 1);

  }

  return null;

}

Location: IDTracker.java

Content: 

/** 

 * Replace all id locations pointing to the old page view port with a new one. This is necessary when a layouted page is replaced with a new one (e.g. last page handling).

 * @param oldPageViewPort old page view port

 * @param newPageViewPort new page view port

 */

public void replacePageViewPort(PageViewport oldPageViewPort,PageViewport newPageViewPort){

  for (  List<PageViewport> viewPortList : idLocations.values()) {

    for (int i=0, len=viewPortList.size(); i < len; i++) {

      PageViewport currPV=viewPortList.get(i);

      if (currPV == oldPageViewPort) {

        viewPortList.set(i,newPageViewPort);

      }

    }

  }

}

Location: IDTracker.java

Content: 

/** 

 * Tries to resolve all unresolved ID references on the given set of pages.

 * @param id ID to resolve

 * @param pvList list of PageViewports

 */

private void tryIDResolution(String id,List<PageViewport> pvList){

  Set<Resolvable> todo=unresolvedIDRefs.get(id);

  if (todo != null) {

    for (    Resolvable res : todo) {

      if (!unfinishedIDs.contains(id)) {

        res.resolveIDRef(id,pvList);

      }

 else {

        return;

      }

    }

    alreadyResolvedIDs.add(id);

    unresolvedIDRefs.remove(id);

  }

}

