Location: RasterFont.java

Content: 

/** 

 * Adds the character set for the given point size

 * @param size point size (in mpt)

 * @param characterSet character set

 */

public void addCharacterSet(int size,CharacterSet characterSet){

  this.charSets.put(size,characterSet);

  this.charSet=characterSet;

}

Location: RasterFont.java

Content: 

private int metricsToAbsoluteSize(CharacterSet cs,double value,int givenSize){

  int nominalVerticalSize=cs.getNominalVerticalSize();

  if (nominalVerticalSize != 0) {

    return (int)(value * nominalVerticalSize);

  }

 else {

    return (int)(value * givenSize);

  }

}

Location: RasterFont.java

Content: 

private int metricsToAbsoluteSize(CharacterSet cs,int value,int givenSize){

  int nominalVerticalSize=cs.getNominalVerticalSize();

  if (nominalVerticalSize != 0) {

    return value * nominalVerticalSize;

  }

 else {

    return value * givenSize;

  }

}

Location: RasterFont.java

Content: 

/** 

 * Constructor for the raster font requires the name, weight and style attribute to be available as this forms the key to the font.

 * @param name the name of the font

 * @param embeddable {@code true} if the font is embeddable

 */

public RasterFont(String name,boolean embeddable){

  super(name,embeddable);

}

