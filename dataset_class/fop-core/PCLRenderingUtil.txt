Location: PCLRenderingUtil.java

Content: 

/** 

 * Determines the print direction based on the given transformation matrix. This method only detects right angles (0, 90, 180, 270). If any other angle is determined, 0 is returned.

 * @param transform the transformation matrix

 * @return the angle in degrees of the print direction.

 */

public static int determinePrintDirection(AffineTransform transform){

  int newDir;

  if (transform.getScaleX() == 0 && transform.getScaleY() == 0 && transform.getShearX() == 1 && transform.getShearY() == -1) {

    newDir=90;

  }

 else   if (transform.getScaleX() == -1 && transform.getScaleY() == -1 && transform.getShearX() == 0 && transform.getShearY() == 0) {

    newDir=180;

  }

 else   if (transform.getScaleX() == 0 && transform.getScaleY() == 0 && transform.getShearX() == -1 && transform.getShearY() == 1) {

    newDir=270;

  }

 else {

    newDir=0;

  }

  return newDir;

}

Location: PCLRenderingUtil.java

Content: 

/** 

 * Returns the dithering quality to be used when encoding gray or color images.

 * @return the quality (0.0f..1.0f)

 */

public float getDitheringQuality(){

  return this.ditheringQuality;

}

Location: PCLRenderingUtil.java

Content: 

/** 

 * Indicates whether all text shall be painted as bitmaps.

 * @return true if all text shall be painted as bitmaps

 */

public boolean isAllTextAsBitmaps(){

  return this.allTextAsBitmaps;

}

Location: PCLRenderingUtil.java

Content: 

/** 

 * Indicates whether PJL generation is disabled.

 * @return true if PJL generation is disabled.

 */

public boolean isPJLDisabled(){

  return this.disabledPJL;

}

Location: PCLRenderingUtil.java

Content: 

PCLRenderingUtil(FOUserAgent userAgent){

  this.userAgent=userAgent;

  initialize();

}

Location: PCLRenderingUtil.java

Content: 

/** 

 * Controls whether all text should be generated as bitmaps or only text for which there's no native font.

 * @param allTextAsBitmaps true if all text should be painted as bitmaps

 */

public void setAllTextAsBitmaps(boolean allTextAsBitmaps){

  this.allTextAsBitmaps=allTextAsBitmaps;

}

Location: PCLRenderingUtil.java

Content: 

public void setColorEnabled(boolean useColor){

  this.useColor=useColor;

}

Location: PCLRenderingUtil.java

Content: 

/** 

 * Controls whether PJL commands shall be generated by the PCL renderer.

 * @param disable true to disable PJL commands

 */

public void setPJLDisabled(boolean disable){

  this.disabledPJL=disable;

}

Location: PCLRenderingUtil.java

Content: 

/** 

 * Returns a coordinate in PCL's coordinate system when given a coordinate in the user coordinate system.

 * @param x the X coordinate

 * @param y the Y coordinate

 * @param transform the currently valid transformation matrix

 * @param pageDefinition the currently valid page definition

 * @param printDirection the currently valid print direction

 * @return the transformed point

 */

public static Point2D transformedPoint(int x,int y,AffineTransform transform,PCLPageDefinition pageDefinition,int printDirection){

  if (log.isTraceEnabled()) {

    log.trace("Current transform: " + transform);

  }

  Point2D.Float orgPoint=new Point2D.Float(x,y);

  Point2D.Float transPoint=new Point2D.Float();

  transform.transform(orgPoint,transPoint);

  Dimension pageSize=pageDefinition.getPhysicalPageSize();

  Rectangle logRect=pageDefinition.getLogicalPageRect();

switch (printDirection) {

case 0:

    transPoint.x-=logRect.x;

  transPoint.y-=logRect.y;

break;

case 90:

float ty=transPoint.x;

transPoint.x=pageSize.height - transPoint.y;

transPoint.y=ty;

transPoint.x-=logRect.y;

transPoint.y-=logRect.x;

break;

case 180:

transPoint.x=pageSize.width - transPoint.x;

transPoint.y=pageSize.height - transPoint.y;

transPoint.x-=pageSize.width - logRect.x - logRect.width;

transPoint.y-=pageSize.height - logRect.y - logRect.height;

transPoint.y-=UnitConv.in2mpt(0.5);

break;

case 270:

float tx=transPoint.y;

transPoint.y=pageSize.width - transPoint.x;

transPoint.x=tx;

transPoint.x-=pageSize.height - logRect.y - logRect.height;

transPoint.y-=pageSize.width - logRect.x - logRect.width;

break;

default :

throw new IllegalStateException("Illegal print direction: " + printDirection);

}

return transPoint;

}

