Location: RtfContainer.java

Content: 

/** 

 * add a child element to this

 * @param e child element to add

 * @throws RtfStructureException for trying to add an invalid child (??)

 */

protected void addChild(RtfElement e) throws RtfStructureException {

  if (isClosed()) {

    final StringBuffer sb=new StringBuffer();

    sb.append("addChild: container already closed (parent=");

    sb.append(this.getClass().getName());

    sb.append(" child=");

    sb.append(e.getClass().getName());

    sb.append(")");

    final String msg=sb.toString();

    final RtfFile rf=getRtfFile();

  }

  children.add(e);

  lastChild=e;

}

Location: RtfContainer.java

Content: 

/** 

 * true if this (recursively) contains at least one RtfText object 

 */

boolean containsText(){

  boolean result=false;

  for (  Object aChildren : children) {

    final RtfElement e=(RtfElement)aChildren;

    if (e instanceof RtfText) {

      result=!e.isEmpty();

    }

 else     if (e instanceof RtfContainer) {

      if (((RtfContainer)e).containsText()) {

        result=true;

      }

    }

    if (result) {

      break;

    }

  }

  return result;

}

Location: RtfContainer.java

Content: 

/** 

 * debugging to given Writer 

 */

void dump(Writer w,int indent) throws IOException {

  super.dump(w,indent);

  for (  Object aChildren : children) {

    final RtfElement e=(RtfElement)aChildren;

    e.dump(w,indent + 1);

  }

}

Location: RtfContainer.java

Content: 

/** 

 * Find the passed child in the current container

 * @param aChild the child element

 * @return the depth (nested level) inside the current container

 */

public int findChildren(RtfElement aChild){

  return findChildren(aChild,0);

}

Location: RtfContainer.java

Content: 

private int findChildren(RtfElement aChild,int iStart){

  for (  Object o : this.getChildren()) {

    final RtfElement e=(RtfElement)o;

    if (aChild == e) {

      return iStart;

    }

 else     if (e instanceof RtfContainer) {

      int iFound=((RtfContainer)e).findChildren(aChild,(iStart + 1));

      if (iFound != -1) {

        return iFound;

      }

    }

  }

  return -1;

}

Location: RtfContainer.java

Content: 

/** 

 * @return the number of children

 */

public int getChildCount(){

  return children.size();

}

Location: RtfContainer.java

Content: 

/** 

 * @return a copy of our children's list

 */

public List getChildren(){

  return (List)children.clone();

}

Location: RtfContainer.java

Content: 

/** 

 * return our options 

 */

RtfOptions getOptions(){

  return options;

}

Location: RtfContainer.java

Content: 

/** 

 * Create an RTF container as a child of given container 

 */

RtfContainer(RtfContainer parent,Writer w) throws IOException {

  this(parent,w,null);

}

Location: RtfContainer.java

Content: 

/** 

 * Create an RTF container as a child of given container with given attributes 

 */

RtfContainer(RtfContainer parent,Writer w,RtfAttributes attr) throws IOException {

  super(parent,w,attr);

  children=new LinkedList();

}

Location: RtfContainer.java

Content: 

/** 

 * Add by Boris Poud√©rous on 07/22/2002 Set the children list

 * @param list list of child objects

 * @return true if process succeeded

 */

public boolean setChildren(List list){

  if (list instanceof LinkedList) {

    this.children=(LinkedList)list;

    return true;

  }

  return false;

}

Location: RtfContainer.java

Content: 

/** 

 * set options

 * @param opt options to set

 */

public void setOptions(RtfOptions opt){

  options=opt;

}

