Location: PSTTFGeneratorTestCase.java

Content: 

/** 

 * Constructor

 */

public PSTTFGeneratorTestCase(){

  byteArray=new byte[65536];

  for (int i=0; i < 65536; i++) {

    byteArray[i]=(byte)i;

  }

}

Location: PSTTFGeneratorTestCase.java

Content: 

/** 

 * Test endString() - ensures strings are ended in the PostScript document in the correct format, a "00" needs to be appended to the end of a string.

 * @throws IOException file write error

 */

@Test public void testEndString() throws IOException {

  ttfGen.endString();

  assertEquals("00\n> ",out.toString());

  out.reset();

  ttfGen.streamBytes(byteArray,0,40);

  ttfGen.endString();

  assertTrue(out.toString().matches("([0-9A-F]{80}\n)00\n> "));

}

Location: PSTTFGeneratorTestCase.java

Content: 

/** 

 * Tests startString() - starts the string in an appropriate way for a PostScript file.

 * @exception IOException write error

 */

@Test public void testStartString() throws IOException {

  ttfGen.startString();

  assertEquals("<\n",out.toString());

}

Location: PSTTFGeneratorTestCase.java

Content: 

/** 

 * Test streamBytes() - tests that strings are written to file in the proper format.

 * @throws IOException write error.

 */

@Test public void testStreamBytes() throws IOException {

  ttfGen.streamBytes(byteArray,0,16);

  assertEquals("000102030405060708090A0B0C0D0E0F",out.toString());

  ttfGen.streamBytes(byteArray,0,32744);

  assertTrue(out.toString().matches("([0-9A-F]{80}\n){819}"));

  try {

    ttfGen.streamBytes(byteArray,0,PSTTFGenerator.MAX_BUFFER_SIZE + 1);

    fail("Shouldn't be able to write more than MAX_BUFFER_SIZE to a PS document");

  }

 catch (  UnsupportedOperationException e) {

  }

}

