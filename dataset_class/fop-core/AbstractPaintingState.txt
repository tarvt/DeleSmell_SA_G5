Location: AbstractPaintingState.java

Content: 

/** 

 * Check the current transform. The transform for the current state is the combination of all transforms in the current state. The parameter is compared against this current transform.

 * @param tf the transform the check against

 * @return true if the new transform is different then the current transform

 */

public boolean checkTransform(AffineTransform tf){

  return !tf.equals(getData().getTransform());

}

Location: AbstractPaintingState.java

Content: 

/** 

 * Clears the state stack

 */

public void clear(){

  stateStack.clear();

  setData(null);

}

Location: AbstractPaintingState.java

Content: 

/** 

 * Clears the current AffineTransform to the Identity AffineTransform

 */

public void clearTransform(){

  getData().clearTransform();

}

Location: AbstractPaintingState.java

Content: 

/** 

 * {@inheritDoc} 

 */

@Override public Object clone(){

  AbstractPaintingState state=instantiate();

  state.stateStack=new StateStack<AbstractData>(this.stateStack);

  if (this.data != null) {

    state.data=(AbstractData)this.data.clone();

  }

  return state;

}

Location: AbstractPaintingState.java

Content: 

/** 

 * Concatenates the given AffineTransform to the current one.

 * @param at the transform to concatenate to the current level transform

 */

public void concatenate(AffineTransform at){

  getData().concatenate(at);

}

Location: AbstractPaintingState.java

Content: 

/** 

 * Get the background color.

 * @return the background color

 */

public Color getBackColor(){

  if (getData().backColor == null) {

    getData().backColor=Color.white;

  }

  return getData().backColor;

}

Location: AbstractPaintingState.java

Content: 

/** 

 * Get a copy of the base transform for the page. Used to translate IPP/BPP values into X,Y positions when positioning is "fixed".

 * @return the base transform, or null if the state stack is empty

 */

public AffineTransform getBaseTransform(){

  if (stateStack.isEmpty()) {

    return null;

  }

 else {

    AbstractData baseData=stateStack.get(0);

    return (AffineTransform)baseData.getTransform().clone();

  }

}

Location: AbstractPaintingState.java

Content: 

/** 

 * Get the color.

 * @return the color

 */

public Color getColor(){

  if (getData().color == null) {

    getData().color=Color.black;

  }

  return getData().color;

}

Location: AbstractPaintingState.java

Content: 

/** 

 * Returns the currently valid state

 * @return the currently valid state

 */

public AbstractData getData(){

  if (data == null) {

    data=instantiateData();

  }

  return data;

}

Location: AbstractPaintingState.java

Content: 

/** 

 * Gets the current font name

 * @return the current font name

 */

public String getFontName(){

  return getData().fontName;

}

Location: AbstractPaintingState.java

Content: 

/** 

 * Gets the current font size

 * @return the current font size

 */

public int getFontSize(){

  return getData().fontSize;

}

Location: AbstractPaintingState.java

Content: 

/** 

 * Returns the current line width

 * @return the current line width

 */

public float getLineWidth(){

  return getData().lineWidth;

}

Location: AbstractPaintingState.java

Content: 

/** 

 * Return the state stack

 * @return the state stack

 */

protected Stack<AbstractData> getStateStack(){

  return this.stateStack;

}

Location: AbstractPaintingState.java

Content: 

/** 

 * Get the current transform. This gets the combination of all transforms in the current state.

 * @return the calculate combined transform for the current state

 */

public AffineTransform getTransform(){

  AffineTransform at=new AffineTransform();

  for (  AbstractData data : stateStack) {

    AffineTransform stackTrans=data.getTransform();

    at.concatenate(stackTrans);

  }

  AffineTransform currentTrans=getData().getTransform();

  at.concatenate(currentTrans);

  return at;

}

Location: AbstractPaintingState.java

Content: 

/** 

 * Instantiates a new state object

 * @return a new state object

 */

protected abstract AbstractPaintingState instantiate();

Location: AbstractPaintingState.java

Content: 

/** 

 * Instantiates a new state data object

 * @return a new state data object

 */

protected abstract AbstractData instantiateData();

Location: AbstractPaintingState.java

Content: 

/** 

 * Resets the current AffineTransform to the Base AffineTransform.

 */

public void resetTransform(){

  getData().setTransform(getBaseTransform());

}

Location: AbstractPaintingState.java

Content: 

/** 

 * Restore the current painting state. This pops the painting state from the stack and sets current values to popped state.

 * @return the restored state, null if the stack is empty

 */

public AbstractData restore(){

  if (!stateStack.isEmpty()) {

    setData(stateStack.pop());

    return this.data;

  }

 else {

    return null;

  }

}

Location: AbstractPaintingState.java

Content: 

/** 

 * Restore all painting state data. This pops all painting state data from the stack

 * @return a list of state data popped from the stack

 */

public List<AbstractData> restoreAll(){

  List<AbstractData> dataList=new java.util.ArrayList<AbstractData>();

  AbstractData data;

  while (true) {

    data=getData();

    if (restore() == null) {

      break;

    }

    dataList.add(0,data);

  }

  return dataList;

}

Location: AbstractPaintingState.java

Content: 

/** 

 * Save the current painting state. This pushes the current painting state onto the stack. This call should be used when the Q operator is used so that the state is known when popped.

 */

public void save(){

  AbstractData copy=(AbstractData)getData().clone();

  stateStack.push(copy);

}

Location: AbstractPaintingState.java

Content: 

/** 

 * Save all painting state data. This pushes all painting state data in the given list to the stack

 * @param dataList a state data list

 */

public void saveAll(List<AbstractData> dataList){

  for (  AbstractData data : dataList) {

    save();

    setData(data);

  }

}

Location: AbstractPaintingState.java

Content: 

/** 

 * Set the current background color. Check if the new background color is a change and then set the current background color.

 * @param col the background color to set

 * @return true if the color has changed

 */

public boolean setBackColor(Color col){

  Color other=getData().backColor;

  if (!org.apache.xmlgraphics.java2d.color.ColorUtil.isSameColor(col,other)) {

    getData().backColor=col;

    return true;

  }

  return false;

}

Location: AbstractPaintingState.java

Content: 

/** 

 * Set the current color. Check if the new color is a change and then set the current color.

 * @param col the color to set

 * @return true if the color has changed

 */

public boolean setColor(Color col){

  Color other=getData().color;

  if (!org.apache.xmlgraphics.java2d.color.ColorUtil.isSameColor(col,other)) {

    getData().color=col;

    return true;

  }

  return false;

}

Location: AbstractPaintingState.java

Content: 

/** 

 * Sets the dash array (line type) for the current basic stroke

 * @param dash the line dash array

 * @return true if the dash array has changed

 */

public boolean setDashArray(float[] dash){

  if (!Arrays.equals(dash,getData().dashArray)) {

    getData().dashArray=dash;

    return true;

  }

  return false;

}

Location: AbstractPaintingState.java

Content: 

/** 

 * Sets the current state data

 * @param data the state data

 */

protected void setData(AbstractData data){

  this.data=data;

}

Location: AbstractPaintingState.java

Content: 

/** 

 * Set the current font name

 * @param internalFontName the internal font name

 * @return true if the font name has changed

 */

public boolean setFontName(String internalFontName){

  if (!internalFontName.equals(getData().fontName)) {

    getData().fontName=internalFontName;

    return true;

  }

  return false;

}

Location: AbstractPaintingState.java

Content: 

/** 

 * Set the current font size. Check if the font size is a change and then set the current font size.

 * @param size the font size to set

 * @return true if the font size has changed

 */

public boolean setFontSize(int size){

  if (size != getData().fontSize) {

    getData().fontSize=size;

    return true;

  }

  return false;

}

Location: AbstractPaintingState.java

Content: 

/** 

 * Set the current line width.

 * @param width the line width in points

 * @return true if the line width has changed

 */

public boolean setLineWidth(float width){

  if (getData().lineWidth != width) {

    getData().lineWidth=width;

    return true;

  }

  return false;

}

