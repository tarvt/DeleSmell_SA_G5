Location: PDFLinearizationTestCase.java

Content: 

private void checkFirstObj(byte[] data) throws IOException {

  int firstObjPos=getValue("/E",getFirstObj(data));

  InputStream is=new ByteArrayInputStream(data);

  Assert.assertEquals(is.skip(firstObjPos),firstObjPos);

  byte[] obj=new byte[10];

  Assert.assertEquals(is.read(obj),obj.length);

  Assert.assertTrue(new String(obj).startsWith("1 0 obj"));

}

Location: PDFLinearizationTestCase.java

Content: 

private void checkHintTable(byte[] out) throws IOException {

  String firstObj=getFirstObj(out);

  int hintPos=getArrayValue("/H",firstObj)[0];

  int hintLength=getArrayValue("/H",firstObj)[1];

  InputStream data=new ByteArrayInputStream(out);

  Assert.assertEquals(data.skip(hintPos),hintPos);

  byte[] hintTable=new byte[hintLength];

  Assert.assertEquals(data.read(hintTable),hintLength);

  String hintTableStr=new String(hintTable);

  Assert.assertTrue(hintTableStr.contains("/S "));

  Assert.assertTrue(hintTableStr.contains("/C "));

  Assert.assertTrue(hintTableStr.contains("/E "));

  Assert.assertTrue(hintTableStr.contains("/L "));

  Assert.assertTrue(hintTableStr.contains("/V "));

  Assert.assertTrue(hintTableStr.contains("/O "));

  Assert.assertTrue(hintTableStr.contains("/I "));

  Assert.assertTrue(hintTableStr.contains("/Length "));

  Assert.assertTrue(hintTableStr.contains("stream"));

  Assert.assertTrue(hintTableStr.contains("endstream"));

  Assert.assertTrue(hintTableStr.endsWith("endobj\n"));

  data=new ByteArrayInputStream(hintTable);

  readStart(data);

  int pages=getValue("/N",firstObj);

  readObjectsTable(data,pages);

  readSharedObjectsTable(data);

  Assert.assertEquals(objectLeast,1);

}

Location: PDFLinearizationTestCase.java

Content: 

private void checkPDF(byte[] data) throws IOException {

  checkHintTable(data);

  InputStream is=new ByteArrayInputStream(data);

  Map<String,StringBuilder> objs=readObjs(is);

  List<String> keys=new ArrayList<String>(objs.keySet());

  int start=keys.indexOf("1 0 obj");

  Assert.assertTrue(start > 1);

  int j=1;

  for (int i=start; i < keys.size(); i++) {

    Assert.assertEquals(keys.get(i),j + " 0 obj");

    j++;

  }

  for (int i=0; i < start; i++) {

    Assert.assertEquals(keys.get(i),j + " 0 obj");

    j++;

  }

  checkFirstObj(data);

  checkTrailer(data);

  String firstObj=objs.values().iterator().next().toString().replace("\n","");

  Assert.assertTrue(firstObj.startsWith("<<  /Linearized 1  /L " + data.length));

  Assert.assertTrue(firstObj.endsWith("startxref0%%EOF"));

  int pageObjNumber=getValue("/O",firstObj);

  Assert.assertTrue(objs.get(pageObjNumber + " 0 obj").toString().contains("/Type /Page"));

  Assert.assertTrue(objs.get("5 0 obj").toString().contains("/Type /Pages"));

  int total=0;

  for (  int i : objects) {

    total+=i;

  }

  Assert.assertEquals(total,objs.size() - 6);

}

Location: PDFLinearizationTestCase.java

Content: 

private void checkTrailer(byte[] data) throws IOException {

  int trailerPos=getValue("/T",getFirstObj(data));

  InputStream is=new ByteArrayInputStream(data);

  Assert.assertEquals(is.skip(trailerPos),trailerPos);

  byte[] obj=new byte[20];

  Assert.assertEquals(is.read(obj),obj.length);

  Assert.assertTrue(new String(obj).startsWith("0000000000 65535 f"));

}

Location: PDFLinearizationTestCase.java

Content: 

private int[] getArrayValue(String name,String firstObj) throws IOException {

  String[] split=firstObj.split(" ");

  for (int i=0; i < split.length; i++) {

    if (split[i].equals(name)) {

      int[] v=new int[2];

      v[0]=Integer.valueOf(split[i + 1].replace("[",""));

      v[1]=Integer.valueOf(split[i + 2].replace("]",""));

      return v;

    }

  }

  throw new IOException(name + " not found " + firstObj);

}

Location: PDFLinearizationTestCase.java

Content: 

private String getFirstObj(byte[] out) throws IOException {

  InputStream data=new ByteArrayInputStream(out);

  Map<String,StringBuilder> objs=readObjs(data);

  return objs.values().iterator().next().toString().replace("\n","");

}

Location: PDFLinearizationTestCase.java

Content: 

private int read16(InputStream data) throws IOException {

  int ch1=data.read();

  int ch2=data.read();

  return (ch1 << 8) + (ch2);

}

Location: PDFLinearizationTestCase.java

Content: 

private int read32(InputStream data) throws IOException {

  int ch1=data.read();

  int ch2=data.read();

  int ch3=data.read();

  int ch4=data.read();

  return ((ch1 << 24) + (ch2 << 16) + (ch3 << 8)+ (ch4));

}

Location: PDFLinearizationTestCase.java

Content: 

private int readBits(int bits,InputStream data) throws IOException {

  if (bits == 32) {

    return read32(data);

  }

  if (bits == 16) {

    return read16(data);

  }

  throw new IOException("Wrong bits");

}

Location: PDFLinearizationTestCase.java

Content: 

private void readObjectsTable(InputStream data,int pages) throws IOException {

  objectLeast=read32(data);

  read32(data);

  int bitsDiffObjects=read16(data);

  read32(data);

  int bitsDiffPageLength=read16(data);

  read32(data);

  read16(data);

  read32(data);

  read16(data);

  read16(data);

  read16(data);

  read16(data);

  read16(data);

  objects=new int[pages];

  for (int i=0; i < pages; i++) {

    objects[i]=objectLeast + readBits(bitsDiffObjects,data);

  }

  for (int i=0; i < pages; i++) {

    readBits(bitsDiffPageLength,data);

  }

  for (int i=0; i < pages; i++) {

    readBits(32,data);

  }

}

Location: PDFLinearizationTestCase.java

Content: 

public static Map<String,StringBuilder> readObjs(InputStream inputStream) throws IOException {

  Map<String,StringBuilder> objs=new LinkedHashMap<String,StringBuilder>();

  StringBuilder sb=new StringBuilder();

  String key=null;

  while (inputStream.available() > 0) {

    int data=inputStream.read();

    if (data == '\n') {

      if (sb.toString().endsWith(" 0 obj")) {

        key=sb.toString().trim();

        objs.put(key,new StringBuilder());

      }

 else       if (key != null) {

        objs.get(key).append(sb).append("\n");

      }

      sb.setLength(0);

    }

 else {

      sb.append((char)data);

    }

  }

  return objs;

}

Location: PDFLinearizationTestCase.java

Content: 

private void readSharedObjectsTable(InputStream str) throws IOException {

  readBits(32,str);

  readBits(32,str);

  readBits(32,str);

  int sharedGroups=readBits(32,str);

  readBits(16,str);

  readBits(32,str);

  int bitsDiffGroupLength=readBits(16,str);

  for (int i=0; i < sharedGroups; i++) {

    readBits(bitsDiffGroupLength,str);

  }

}

Location: PDFLinearizationTestCase.java

Content: 

private void readStart(InputStream inputStream) throws IOException {

  StringBuilder sb=new StringBuilder();

  while (inputStream.available() > 0) {

    int data=inputStream.read();

    if (data == '\n') {

      if (sb.toString().equals("stream")) {

        return;

      }

      sb.setLength(0);

    }

 else {

      sb.append((char)data);

    }

  }

}

Location: PDFLinearizationTestCase.java

Content: 

@Test public void testImage() throws Exception {

  String fopxconf="<fop version=\"1.0\"><renderers>" + "<renderer mime=\"application/pdf\">" + "<linearization>true</linearization>"+ "</renderer></renderers></fop>";

  FopFactory fopFactory=FopFactory.newInstance(new File(".").toURI(),new ByteArrayInputStream(fopxconf.getBytes()));

  FOUserAgent foUserAgent=fopFactory.newFOUserAgent();

  IFContext ifContext=new IFContext(foUserAgent);

  PDFDocumentHandler documentHandler=new PDFDocumentHandler(ifContext);

  documentHandler.getConfigurator().configure(documentHandler);

  ByteArrayOutputStream out=new ByteArrayOutputStream();

  documentHandler.setFontInfo(new FontInfo());

  documentHandler.setResult(new StreamResult(out));

  documentHandler.startDocument();

  documentHandler.startPage(0,"","",new Dimension());

  PDFPainter pdfPainter=new PDFPainter(documentHandler,null);

  pdfPainter.drawImage("test/resources/fop/svg/logo.jpg",new Rectangle());

  documentHandler.endPage();

  Assert.assertFalse(out.toString().contains("/Subtype /Image"));

  documentHandler.endDocument();

  Assert.assertTrue(out.toString().contains("/Subtype /Image"));

}

