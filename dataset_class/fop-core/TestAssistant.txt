Location: TestAssistant.java

Content: 

public FopFactory getFopFactory(Document testDoc){

  EnvironmentProfile envProfile=EnvironmentalProfileFactory.createRestrictedIO(testDir.getParentFile().toURI(),ResourceResolverFactory.createDefaultResourceResolver());

  FopFactoryBuilder builder=new FopFactoryBuilder(envProfile);

  builder.setStrictFOValidation(isStrictValidation(testDoc));

  builder.getFontManager().setBase14KerningEnabled(isBase14KerningEnabled(testDoc));

  return builder.build();

}

Location: TestAssistant.java

Content: 

/** 

 * Returns the stylesheet for convert extracting the checks from the test case.

 * @return the stylesheet

 * @throws TransformerConfigurationException if an error occurs loading the stylesheet

 */

private Templates getTestcase2ChecksStylesheet() throws TransformerConfigurationException {

  if (testcase2checks == null) {

    Source src=new StreamSource(new File("test/layoutengine/testcase2checks.xsl"));

    testcase2checks=tfactory.newTemplates(src);

  }

  return testcase2checks;

}

Location: TestAssistant.java

Content: 

/** 

 * Returns the stylesheet for convert extracting the XSL-FO part from the test case.

 * @return the stylesheet

 * @throws TransformerConfigurationException if an error occurs loading the stylesheet

 */

public Templates getTestcase2FOStylesheet() throws TransformerConfigurationException {

  if (testcase2fo == null) {

    Source src=new StreamSource(new File("test/layoutengine/testcase2fo.xsl"));

    testcase2fo=tfactory.newTemplates(src);

  }

  return testcase2fo;

}

Location: TestAssistant.java

Content: 

/** 

 * Returns the element from the given XML file that encloses the tests.

 * @param testFile a test case

 * @return the parent element of the group(s) of checks

 * @throws TransformerException if an error occurs while extracting the test element

 */

public Element getTestRoot(File testFile) throws TransformerException {

  Transformer transformer=getTestcase2ChecksStylesheet().newTransformer();

  DOMResult res=new DOMResult();

  transformer.transform(new StreamSource(testFile),res);

  Document doc=(Document)res.getNode();

  return doc.getDocumentElement();

}

Location: TestAssistant.java

Content: 

private boolean isBase14KerningEnabled(Document testDoc){

  try {

    XObject xo=XPathAPI.eval(testDoc,"/testcase/cfg/base14kerning");

    String s=xo.str();

    return ("true".equalsIgnoreCase(s));

  }

 catch (  TransformerException e) {

    throw new RuntimeException("Error while evaluating XPath expression",e);

  }

}

Location: TestAssistant.java

Content: 

private boolean isStrictValidation(Document testDoc){

  try {

    XObject xo=XPathAPI.eval(testDoc,"/testcase/cfg/strict-validation");

    return !("false".equalsIgnoreCase(xo.str()));

  }

 catch (  TransformerException e) {

    throw new RuntimeException("Error while evaluating XPath expression",e);

  }

}

Location: TestAssistant.java

Content: 

/** 

 * Loads a test case into a DOM document.

 * @param testFile the test file

 * @return the loaded test case

 * @throws IOException if an I/O error occurs loading the test case

 */

public Document loadTestCase(File testFile) throws IOException {

  try {

    DocumentBuilder builder=domBuilderFactory.newDocumentBuilder();

    Document testDoc=builder.parse(testFile);

    return testDoc;

  }

 catch (  Exception e) {

    throw new IOException("Error while loading test case: " + e.getMessage());

  }

}

Location: TestAssistant.java

Content: 

/** 

 * Serialize the DOM for later inspection.

 * @param doc the DOM document

 * @param target target file

 * @throws TransformerException if a problem occurs during serialization

 */

public void saveDOM(Document doc,File target) throws TransformerException {

  Transformer transformer=getTransformerFactory().newTransformer();

  Source src=new DOMSource(doc);

  Result res=new StreamResult(target);

  transformer.transform(src,res);

}

Location: TestAssistant.java

Content: 

/** 

 * Main constructor.

 */

public TestAssistant(){

  domBuilderFactory=DocumentBuilderFactory.newInstance();

  domBuilderFactory.setNamespaceAware(true);

  domBuilderFactory.setValidating(false);

}

