Location: CollapsedConditionalBorderTestCase.java

Content: 

private static void checkBorder(String errorMsge,BorderSpecification border,int expectedLength,Color expectedColor){

  BorderInfo borderInfo=border.getBorderInfo();

  if (expectedLength == 0) {

    assertEquals(errorMsge,Constants.EN_NONE,borderInfo.getStyle());

  }

 else {

    assertEquals(errorMsge,expectedLength,borderInfo.getWidth().getLengthValue());

    assertEquals(errorMsge,expectedColor,borderInfo.getColor());

  }

}

Location: CollapsedConditionalBorderTestCase.java

Content: 

private static void checkBorder(String errorMsge,BorderSpecification border,Object[] resolvedBorder){

  checkBorder(errorMsge,border,(Integer)resolvedBorder[0],(Color)resolvedBorder[1]);

}

Location: CollapsedConditionalBorderTestCase.java

Content: 

private static GridUnit getGridUnit(TablePart part){

  return (GridUnit)((List)((List)part.getRowGroups().get(0)).get(0)).get(0);

}

Location: CollapsedConditionalBorderTestCase.java

Content: 

@Test public void testCollapsedConditionalBorders() throws Exception {

  setUp("table/collapsed-conditional-borders.fo");

  int tableNum=0;

  Iterator tableIterator=getTableIterator();

  do {

    String baseErrorMsge="table " + Integer.toString(tableNum) + " (0-based), ";

    Table table=(Table)tableIterator.next();

    TablePart part=(TablePart)table.getChildNodes().next();

    GridUnit gu=getGridUnit(part);

    String errorMsge=baseErrorMsge + "border-before";

    checkBorder(errorMsge,gu.borderBefore.normal,8000,Color.black);

    checkBorder(errorMsge,gu.borderBefore.leadingTrailing,8000,Color.black);

    checkBorder(errorMsge,gu.borderBefore.rest,resolvedBorders[tableNum][0]);

    errorMsge=baseErrorMsge + "border-after";

    checkBorder(errorMsge,gu.borderAfter.normal,8000,Color.black);

    checkBorder(errorMsge,gu.borderAfter.leadingTrailing,8000,Color.black);

    checkBorder(errorMsge,gu.borderAfter.rest,resolvedBorders[tableNum][1]);

    tableNum++;

  }

 while (tableIterator.hasNext());

}

Location: CollapsedConditionalBorderTestCase.java

Content: 

@Test public void testCollapsedConditionalBordersHeaderFooter() throws Exception {

  setUp("table/collapsed-conditional-borders_header-footer.fo");

  int tableNum=0;

  Iterator tableIterator=getTableIterator();

  do {

    String errorMsge="table " + Integer.toString(tableNum) + " (0-based)";

    int borderNum=0;

    Table table=(Table)tableIterator.next();

    TableHeader header=table.getTableHeader();

    GridUnit gu=getGridUnit(header);

    checkBorder(errorMsge,gu.borderBefore.normal,resolvedBordersHF[tableNum][borderNum++]);

    checkBorder(errorMsge,gu.borderBefore.rest,resolvedBordersHF[tableNum][borderNum++]);

    TableFooter footer=table.getTableFooter();

    gu=getGridUnit(footer);

    checkBorder(errorMsge,gu.borderAfter.normal,resolvedBordersHF[tableNum][borderNum++]);

    checkBorder(errorMsge,gu.borderAfter.rest,resolvedBordersHF[tableNum][borderNum++]);

    FONodeIterator bodyIter=table.getChildNodes();

    TableBody body=(TableBody)bodyIter.next();

    gu=getGridUnit(body);

    checkBorder(errorMsge,gu.borderBefore.normal,resolvedBordersHF[tableNum][borderNum++]);

    checkBorder(errorMsge,gu.borderBefore.leadingTrailing,resolvedBordersHF[tableNum][borderNum++]);

    checkBorder(errorMsge,gu.borderBefore.rest,resolvedBordersHF[tableNum][borderNum++]);

    checkBorder(errorMsge,gu.borderAfter.normal,resolvedBordersHF[tableNum][borderNum++]);

    checkBorder(errorMsge,gu.borderAfter.leadingTrailing,resolvedBordersHF[tableNum][borderNum++]);

    checkBorder(errorMsge,gu.borderAfter.rest,resolvedBordersHF[tableNum][borderNum++]);

    body=(TableBody)bodyIter.next();

    gu=getGridUnit(body);

    checkBorder(errorMsge,gu.borderBefore.normal,resolvedBordersHF[tableNum][borderNum++]);

    checkBorder(errorMsge,gu.borderBefore.leadingTrailing,resolvedBordersHF[tableNum][borderNum++]);

    checkBorder(errorMsge,gu.borderBefore.rest,resolvedBordersHF[tableNum][borderNum++]);

    checkBorder(errorMsge,gu.borderAfter.normal,resolvedBordersHF[tableNum][borderNum++]);

    checkBorder(errorMsge,gu.borderAfter.leadingTrailing,resolvedBordersHF[tableNum][borderNum++]);

    checkBorder(errorMsge,gu.borderAfter.rest,resolvedBordersHF[tableNum][borderNum++]);

    tableNum++;

  }

 while (tableIterator.hasNext());

}

