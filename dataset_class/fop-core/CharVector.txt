Location: CharVector.java

Content: 

/** 

 * This is to implement memory allocation in the array. Like malloc().

 * @param size to allocate

 * @return previous length

 */

public int alloc(int size){

  int index=n;

  int len=array.length;

  if (n + size >= len) {

    char[] aux=new char[len + blockSize];

    System.arraycopy(array,0,aux,0,len);

    array=aux;

  }

  n+=size;

  return index;

}

Location: CharVector.java

Content: 

/** 

 * Obtain capacity of array.

 * @return current capacity of array

 */

public int capacity(){

  return array.length;

}

Location: CharVector.java

Content: 

/** 

 * Construct char vector instance with default block size.

 */

public CharVector(){

  this(DEFAULT_BLOCK_SIZE);

}

Location: CharVector.java

Content: 

/** 

 * Construct char vector instance.

 * @param a char array to use

 */

public CharVector(char[] a){

  blockSize=DEFAULT_BLOCK_SIZE;

  array=a;

  n=a.length;

}

Location: CharVector.java

Content: 

/** 

 * Construct char vector instance.

 * @param a char array to use

 * @param capacity initial block size

 */

public CharVector(char[] a,int capacity){

  if (capacity > 0) {

    blockSize=capacity;

  }

 else {

    blockSize=DEFAULT_BLOCK_SIZE;

  }

  array=a;

  n=a.length;

}

Location: CharVector.java

Content: 

/** 

 * Construct char vector instance.

 * @param capacity initial block size

 */

public CharVector(int capacity){

  if (capacity > 0) {

    blockSize=capacity;

  }

 else {

    blockSize=DEFAULT_BLOCK_SIZE;

  }

  array=new char[blockSize];

  n=0;

}

Location: CharVector.java

Content: 

/** 

 * Obtain char vector array.

 * @return char array

 */

public char[] getArray(){

  return array;

}

Location: CharVector.java

Content: 

/** 

 * Pet char at index.

 * @param index the index

 * @param val a char

 */

public void put(int index,char val){

  array[index]=val;

}

