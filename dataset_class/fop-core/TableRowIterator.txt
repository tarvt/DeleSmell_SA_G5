Location: TableRowIterator.java

Content: 

/** 

 * Returns the next row group if any. A row group in this context is the minimum number of consecutive rows which contains all spanned grid units of its cells.

 * @return the next row group, or null

 */

EffRow[] getNextRowGroup(){

  if (!rowGroupsIter.hasNext()) {

    return null;

  }

  List rowGroup=(List)rowGroupsIter.next();

  EffRow[] effRowGroup=new EffRow[rowGroup.size()];

  int i=0;

  for (  Object aRowGroup : rowGroup) {

    List gridUnits=(List)aRowGroup;

    effRowGroup[i++]=new EffRow(rowIndex++,tablePart,gridUnits);

  }

  return effRowGroup;

}

Location: TableRowIterator.java

Content: 

/** 

 * Creates a new TableRowIterator.

 * @param table the table to iterate over

 * @param tablePart indicates what part of the table to iterate over (HEADER, FOOTER, BODY)

 */

public TableRowIterator(Table table,int tablePart){

  this.tablePart=tablePart;

switch (tablePart) {

case HEADER:

    rowGroupsIter=table.getTableHeader().getRowGroups().iterator();

  break;

case FOOTER:

rowGroupsIter=table.getTableFooter().getRowGroups().iterator();

break;

case BODY:

List rowGroupsList=new LinkedList();

for (FONodeIterator iter=table.getChildNodes(); iter.hasNext(); ) {

FONode node=iter.next();

if (node instanceof TableBody) {

rowGroupsList.addAll(((TableBody)node).getRowGroups());

}

}

rowGroupsIter=rowGroupsList.iterator();

break;

default :

throw new IllegalArgumentException("Unrecognised TablePart: " + tablePart);

}

}

