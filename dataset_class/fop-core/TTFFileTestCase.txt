Location: TTFFileTestCase.java

Content: 

@Test public void testBBox(){

  assertEquals(dejavuTTFFile.getBBox(1)[0],49);

  assertEquals(dejavuTTFFile.getBBox(2330).length,4);

}

Location: TTFFileTestCase.java

Content: 

/** 

 * Test checkTTC()

 * @throws IOException exception

 */

@Test public void testCheckTTC() throws IOException {

  String dejavuHeader=OFFontLoader.readHeader(dejavuReader);

  assertTrue(dejavuTTFFile.checkTTC(dejavuHeader,""));

  String droidmonoHeader=OFFontLoader.readHeader(droidmonoReader);

  assertTrue(droidmonoTTFFile.checkTTC(droidmonoHeader,""));

}

Location: TTFFileTestCase.java

Content: 

/** 

 * Test convertTTFUnit2PDFUnit() - The units per em retrieved reading the HEAD table from the font file. (DroidSansMono has the same units per em as DejaVu so no point testing it)

 */

@Test public void testConvertTTFUnit2PDFUnit(){

  assertEquals(1000,dejavuTTFFile.convertTTFUnit2PDFUnit(2048));

  assertEquals(0,dejavuTTFFile.convertTTFUnit2PDFUnit(1));

  assertEquals(0,dejavuTTFFile.convertTTFUnit2PDFUnit(2));

  assertEquals(0,dejavuTTFFile.convertTTFUnit2PDFUnit(-0));

  assertEquals(-1000,dejavuTTFFile.convertTTFUnit2PDFUnit(-2048));

  assertEquals(0,dejavuTTFFile.convertTTFUnit2PDFUnit(-1));

  assertEquals(0,dejavuTTFFile.convertTTFUnit2PDFUnit(-2));

}

Location: TTFFileTestCase.java

Content: 

/** 

 * Test getAnsiKerning() - Tests values retrieved from the kern table in the font file.

 */

@Test public void testGetAnsiKerning(){

  Map<Integer,Map<Integer,Integer>> ansiKerning=dejavuTTFFile.getAnsiKerning();

  if (ansiKerning.isEmpty()) {

    fail();

  }

  Integer k1=ansiKerning.get((int)'A').get((int)'T');

  assertEquals(dejavuTTFFile.convertTTFUnit2PDFUnit(-112),k1.intValue());

  Integer k2=ansiKerning.get((int)'Y').get((int)'u');

  assertEquals(dejavuTTFFile.convertTTFUnit2PDFUnit(-178),k2.intValue());

  ansiKerning=droidmonoTTFFile.getAnsiKerning();

  if (!ansiKerning.isEmpty()) {

    fail("DroidSansMono shouldn't have any kerning data.");

  }

  ansiKerning=androidEmojiTTFFile.getAnsiKerning();

  if (!ansiKerning.isEmpty()) {

    fail("AndroidEmoji shouldn't have any kerning data.");

  }

}

Location: TTFFileTestCase.java

Content: 

/** 

 * Test getCapHeight - there are several paths to test: 1) The PCLT table (if present) 2) The yMax (3rd) value, for the bounding box, for 'H' in the glyf table. if not the above: 3) The caps height in the OS/2 table Tests values retrieved from analysing the font file.

 */

@Test public void testGetCapHeight(){

  assertEquals(dejavuTTFFile.convertTTFUnit2PDFUnit(1493),dejavuTTFFile.getCapHeight());

  assertEquals(droidmonoTTFFile.convertTTFUnit2PDFUnit(1462),droidmonoTTFFile.getCapHeight());

  assertEquals(androidEmojiTTFFile.convertTTFUnit2PDFUnit(1462),androidEmojiTTFFile.getCapHeight());

}

Location: TTFFileTestCase.java

Content: 

/** 

 * Test getCharSetName() - check that it returns "WinAnsiEncoding".

 */

@Test public void testGetCharSetName(){

  assertTrue("WinAnsiEncoding".equals(dejavuTTFFile.getCharSetName()));

  assertTrue("WinAnsiEncoding".equals(droidmonoTTFFile.getCharSetName()));

  assertTrue("WinAnsiEncoding".equals(androidEmojiTTFFile.getCharSetName()));

}

Location: TTFFileTestCase.java

Content: 

/** 

 * Test getCharWidth() - Test values retrieved from the metrics in the glyf table in the font file.

 */

@Test public void testGetCharWidth(){

  assertEquals(dejavuTTFFile.convertTTFUnit2PDFUnit(1786),dejavuTTFFile.getCharWidth(0x48));

  assertEquals(dejavuTTFFile.convertTTFUnit2PDFUnit(655),dejavuTTFFile.getCharWidth(0x69));

  assertEquals(dejavuTTFFile.convertTTFUnit2PDFUnit(823),dejavuTTFFile.getCharWidth(0x21));

  int charWidth=droidmonoTTFFile.convertTTFUnit2PDFUnit(1229);

  for (int i=0; i < 255; i++) {

    assertEquals(charWidth,droidmonoTTFFile.getCharWidth(i));

  }

  charWidth=androidEmojiTTFFile.convertTTFUnit2PDFUnit(2600);

  for (int i=0; i < 255; i++) {

    assertEquals(charWidth,androidEmojiTTFFile.getCharWidth(i));

  }

}

Location: TTFFileTestCase.java

Content: 

/** 

 * TODO: add implementation to this test

 */

@Test public void testGetCMaps(){

  List<CMapSegment> cmaps=androidEmojiTTFFile.getCMaps();

  for (  CMapSegment seg : cmaps) {

    System.out.println(seg.getUnicodeStart() + "-" + seg.getUnicodeEnd()+ " -> "+ seg.getGlyphStartIndex());

  }

}

Location: TTFFileTestCase.java

Content: 

/** 

 * Test getFamilyNames() - Test value retrieved from the name table in the font file.

 */

@Test public void testGetFamilyNames(){

  assertEquals(1,dejavuTTFFile.getFamilyNames().size());

  for (  String name : dejavuTTFFile.getFamilyNames()) {

    assertEquals("DejaVu LGC Serif",name);

  }

  assertEquals(1,droidmonoTTFFile.getFamilyNames().size());

  for (  String name : droidmonoTTFFile.getFamilyNames()) {

    assertEquals("Droid Sans Mono",name);

  }

  assertEquals(1,androidEmojiTTFFile.getFamilyNames().size());

  for (  String name : androidEmojiTTFFile.getFamilyNames()) {

    assertEquals("Android Emoji",name);

  }

}

Location: TTFFileTestCase.java

Content: 

/** 

 * Test getFirstChar() - TODO: implement a more intelligent test here.

 */

@Test public void testGetFirstChar(){

  assertEquals(0,dejavuTTFFile.getFirstChar());

  assertEquals(0,droidmonoTTFFile.getFirstChar());

  assertEquals(0,androidEmojiTTFFile.getFirstChar());

}

Location: TTFFileTestCase.java

Content: 

/** 

 * Test getFlags() - Test values retrieved from the POST table in the font file.

 */

@Test public void testGetFlags(){

  int flags=dejavuTTFFile.getFlags();

  assertEquals(0,flags & 64);

  assertEquals(32,flags & 32);

  assertEquals(0,flags & 2);

  assertEquals(1,flags & 1);

  flags=droidmonoTTFFile.getFlags();

  assertEquals(0,flags & 64);

  assertEquals(32,flags & 32);

  assertEquals(2,flags & 2);

  assertEquals(1,flags & 1);

  flags=androidEmojiTTFFile.getFlags();

  assertEquals(0,flags & 64);

  assertEquals(32,flags & 32);

  assertEquals(0,flags & 2);

  assertEquals(1,flags & 1);

}

Location: TTFFileTestCase.java

Content: 

/** 

 * Test getFontBBox() - Test values retrieved from values in the HEAD table in the font file.

 */

@Test public void testGetFontBBox(){

  int[] bBox=dejavuTTFFile.getFontBBox();

  assertEquals(dejavuTTFFile.convertTTFUnit2PDFUnit(-1576),bBox[0]);

  assertEquals(dejavuTTFFile.convertTTFUnit2PDFUnit(-710),bBox[1]);

  assertEquals(dejavuTTFFile.convertTTFUnit2PDFUnit(3439),bBox[2]);

  assertEquals(dejavuTTFFile.convertTTFUnit2PDFUnit(2544),bBox[3]);

  bBox=droidmonoTTFFile.getFontBBox();

  assertEquals(droidmonoTTFFile.convertTTFUnit2PDFUnit(-312),bBox[0]);

  assertEquals(droidmonoTTFFile.convertTTFUnit2PDFUnit(-555),bBox[1]);

  assertEquals(droidmonoTTFFile.convertTTFUnit2PDFUnit(1315),bBox[2]);

  assertEquals(droidmonoTTFFile.convertTTFUnit2PDFUnit(2163),bBox[3]);

  bBox=androidEmojiTTFFile.getFontBBox();

  assertEquals(androidEmojiTTFFile.convertTTFUnit2PDFUnit(-50),bBox[0]);

  assertEquals(androidEmojiTTFFile.convertTTFUnit2PDFUnit(-733),bBox[1]);

  assertEquals(androidEmojiTTFFile.convertTTFUnit2PDFUnit(2550),bBox[2]);

  assertEquals(androidEmojiTTFFile.convertTTFUnit2PDFUnit(2181),bBox[3]);

}

Location: TTFFileTestCase.java

Content: 

/** 

 * Test getFullName() - Test value retrieved from the name table in the font file.

 */

@Test public void testGetFullName(){

  assertEquals("DejaVu LGC Serif",dejavuTTFFile.getFullName());

  assertEquals("Droid Sans Mono",droidmonoTTFFile.getFullName());

  assertEquals("Android Emoji",androidEmojiTTFFile.getFullName());

}

Location: TTFFileTestCase.java

Content: 

/** 

 * Test getGlyphName - Test value retrieved from the POST table in the font file.

 */

@Test public void testGetGlyphName(){

  assertEquals("H",dejavuTTFFile.getGlyphName(43));

  assertEquals("H",droidmonoTTFFile.getGlyphName(43));

  assertEquals("smileface",androidEmojiTTFFile.getGlyphName(64));

}

Location: TTFFileTestCase.java

Content: 

/** 

 * Test getItalicAngle() - Test value retrieved from the POST table in the font file.

 */

@Test public void testGetItalicAngle(){

  assertEquals("0",dejavuTTFFile.getItalicAngle());

  assertEquals("0",droidmonoTTFFile.getItalicAngle());

  assertEquals("0",androidEmojiTTFFile.getItalicAngle());

}

Location: TTFFileTestCase.java

Content: 

/** 

 * Test getKerning() - Test values retrieved from the kern table in the font file.

 */

@Test public void testGetKerning(){

  Map<Integer,Map<Integer,Integer>> kerning=dejavuTTFFile.getKerning();

  if (kerning.isEmpty()) {

    fail();

  }

  Integer k1=kerning.get((int)'A').get((int)'T');

  assertEquals(dejavuTTFFile.convertTTFUnit2PDFUnit(-112),k1.intValue());

  Integer k2=kerning.get((int)'K').get((int)'u');

  assertEquals(dejavuTTFFile.convertTTFUnit2PDFUnit(-45),k2.intValue());

  kerning=droidmonoTTFFile.getKerning();

  if (!kerning.isEmpty()) {

    fail("DroidSansMono shouldn't have any kerning data");

  }

  kerning=androidEmojiTTFFile.getKerning();

  if (!kerning.isEmpty()) {

    fail("AndroidEmoji shouldn't have any kerning data.");

  }

}

Location: TTFFileTestCase.java

Content: 

/** 

 * Test getLowerCaseAscent() - There are several paths to test: 1) The values in the HHEA table (see code) 2) Fall back to values from the OS/2 table Test values retrieved from the font file.

 */

@Test public void testGetLowerCaseAscent(){

  assertEquals(dejavuTTFFile.convertTTFUnit2PDFUnit(1556),dejavuTTFFile.getLowerCaseAscent());

  assertEquals(droidmonoTTFFile.convertTTFUnit2PDFUnit(1556),droidmonoTTFFile.getLowerCaseAscent());

  assertEquals(androidEmojiTTFFile.convertTTFUnit2PDFUnit(0),androidEmojiTTFFile.getLowerCaseAscent());

}

Location: TTFFileTestCase.java

Content: 

/** 

 * Test getPostScriptName() - Test values retrieved from the post table in the font file.

 */

@Test public void testGetPostScriptName(){

  assertEquals(PostScriptVersion.V2,dejavuTTFFile.getPostScriptVersion());

  assertEquals(PostScriptVersion.V2,droidmonoTTFFile.getPostScriptVersion());

  assertEquals(PostScriptVersion.V2,androidEmojiTTFFile.getPostScriptVersion());

}

Location: TTFFileTestCase.java

Content: 

/** 

 * Test getStemV() - Undefined.

 */

@Test public void testGetStemV(){

  assertEquals("0",dejavuTTFFile.getStemV());

  assertEquals("0",droidmonoTTFFile.getStemV());

  assertEquals("0",androidEmojiTTFFile.getStemV());

}

Location: TTFFileTestCase.java

Content: 

/** 

 * Test getSubFamilyName() - Test values retrieved from the name table in the font file.

 */

@Test public void testGetSubFamilyName(){

  assertEquals("Book",dejavuTTFFile.getSubFamilyName());

  assertEquals("Regular",droidmonoTTFFile.getSubFamilyName());

  assertEquals("Regular",androidEmojiTTFFile.getSubFamilyName());

}

Location: TTFFileTestCase.java

Content: 

/** 

 * Test getTTCnames() - TODO: add implementation with TTC font.

 */

public void testGetTTCnames(){

}

Location: TTFFileTestCase.java

Content: 

/** 

 * Test getWeightClass() - Test value retrieved from the OS/2 table in the font file.

 */

@Test public void testGetWeightClass(){

  assertEquals(400,dejavuTTFFile.getWeightClass());

  assertEquals(400,droidmonoTTFFile.getWeightClass());

  assertEquals(400,androidEmojiTTFFile.getWeightClass());

}

Location: TTFFileTestCase.java

Content: 

/** 

 * Test getWidths() - Test values retrieved from the hmtx table in the font file.

 */

@Test public void testGetWidths(){

  int[] widths=dejavuTTFFile.getWidths();

  assertEquals(dejavuTTFFile.convertTTFUnit2PDFUnit(1479),widths[36]);

  assertEquals(dejavuTTFFile.convertTTFUnit2PDFUnit(690),widths[95]);

  widths=droidmonoTTFFile.getWidths();

  int charWidth=droidmonoTTFFile.convertTTFUnit2PDFUnit(1229);

  for (  OpenFont.UnicodeMapping unicodeMapping : droidmonoTTFFile.unicodeMappings) {

    assertEquals(charWidth,widths[unicodeMapping.getGlyphIndex()]);

  }

  charWidth=androidEmojiTTFFile.convertTTFUnit2PDFUnit(2600);

  widths=androidEmojiTTFFile.getWidths();

  for (  OpenFont.UnicodeMapping unicodeMapping : androidEmojiTTFFile.unicodeMappings) {

    assertEquals(charWidth,widths[unicodeMapping.getGlyphIndex()]);

  }

}

Location: TTFFileTestCase.java

Content: 

/** 

 * Test getXHeight() - There are several paths to test: 1) The PCLT table (if available) 2) The yMax for the bounding box for 'x' in the glyf table. Fall back: 3) The xheight in the OS/2 table.

 */

@Test public void testGetXHeight(){

  assertEquals(dejavuTTFFile.convertTTFUnit2PDFUnit(1064),dejavuTTFFile.getXHeight());

  assertEquals(droidmonoTTFFile.convertTTFUnit2PDFUnit(1098),droidmonoTTFFile.getXHeight());

}

Location: TTFFileTestCase.java

Content: 

/** 

 * Test isCFF() - TODO: add test for a CFF font.

 */

@Test public void testIsCFF(){

  assertEquals(false,dejavuTTFFile.isCFF());

  assertEquals(false,droidmonoTTFFile.isCFF());

  assertEquals(false,androidEmojiTTFFile.isCFF());

}

Location: TTFFileTestCase.java

Content: 

/** 

 * Test isEmbeddable() - Test value retrieved from the OS/2 table in the font file.

 */

@Test public void testIsEmbeddable(){

  assertEquals(true,dejavuTTFFile.isEmbeddable());

  assertEquals(true,droidmonoTTFFile.isEmbeddable());

  assertEquals(true,androidEmojiTTFFile.isEmbeddable());

}

Location: TTFFileTestCase.java

Content: 

/** 

 * Test lastChar() - TODO: implement a more intelligent test

 */

@Test public void testLastChar(){

  assertEquals(0xff,dejavuTTFFile.getLastChar());

  assertEquals(0xff,droidmonoTTFFile.getLastChar());

  assertEquals(0xae,androidEmojiTTFFile.getLastChar());

}

Location: TTFFileTestCase.java

Content: 

/** 

 * Test readFont() - Add implementation if necessary.

 */

public void testReadFont(){

}

Location: TTFFileTestCase.java

Content: 

@Test public void testReservedIndex() throws IOException {

  ByteArrayOutputStream bos=new ByteArrayOutputStream();

  DataOutputStream dos=new DataOutputStream(bos);

  dos.write(0);

  dos.write(2);

  for (int i=0; i < 31; i++) {

    dos.write(0);

  }

  dos.write(1);

  dos.writeShort(32768);

  TTFFile ttfFile=new TTFFile();

  ttfFile.dirTabs=new HashMap<OFTableName,OFDirTabEntry>();

  ttfFile.fontFile=new FontFileReader(new ByteArrayInputStream(bos.toByteArray()));

  ttfFile.mtxTab=new OFMtxEntry[1];

  ttfFile.mtxTab[0]=new OFMtxEntry();

  ttfFile.readPostScript();

}

Location: TTFFileTestCase.java

Content: 

/** 

 * Strikeout position and thickness. 

 */

@Test public void testStrikeout(){

  assertEquals(258,dejavuTTFFile.getStrikeoutPosition());

  assertEquals(49,dejavuTTFFile.getStrikeoutThickness());

  assertEquals(243,droidmonoTTFFile.getStrikeoutPosition());

  assertEquals(49,droidmonoTTFFile.getStrikeoutThickness());

  assertEquals(122,androidEmojiTTFFile.getStrikeoutPosition());

  assertEquals(24,androidEmojiTTFFile.getStrikeoutThickness());

}

Location: TTFFileTestCase.java

Content: 

/** 

 * Underline position and thickness. 

 */

@Test public void testUnderline(){

  assertEquals(-63,dejavuTTFFile.getUnderlinePosition());

  assertEquals(43,dejavuTTFFile.getUnderlineThickness());

  assertEquals(-75,droidmonoTTFFile.getUnderlinePosition());

  assertEquals(49,droidmonoTTFFile.getUnderlineThickness());

  assertEquals(-75,androidEmojiTTFFile.getUnderlinePosition());

  assertEquals(49,androidEmojiTTFFile.getUnderlineThickness());

}

Location: TTFFileTestCase.java

Content: 

@Test public void textUnicodeCoverage(){

  int nonBMPcount=0;

  for (  OpenFont.UnicodeMapping unicodeMapping : droidmonoTTFFile.unicodeMappings) {

    nonBMPcount+=unicodeMapping.getUnicodeIndex() > 0xFFFF ? 1 : 0;

  }

  assertEquals("The font DroidSansMono is supposed to have only BMP codepoints",0,nonBMPcount);

  nonBMPcount=0;

  for (  OpenFont.UnicodeMapping unicodeMapping : androidEmojiTTFFile.unicodeMappings) {

    nonBMPcount+=unicodeMapping.getUnicodeIndex() > 0xFFFF ? 1 : 0;

  }

  assertTrue("The font AndroidEmoji is supposed to have non-BMP codepoints",0 != nonBMPcount);

}

Location: TTFFileTestCase.java

Content: 

/** 

 * Constructor initialises FileFontReader to

 * @throws IOException exception

 */

public TTFFileTestCase() throws IOException {

  InputStream dejaStream=new FileInputStream("test/resources/fonts/ttf/DejaVuLGCSerif.ttf");

  dejavuTTFFile=new TTFFile();

  dejavuReader=new FontFileReader(dejaStream);

  String dejavuHeader=OFFontLoader.readHeader(dejavuReader);

  dejavuTTFFile.readFont(dejavuReader,dejavuHeader);

  dejaStream.close();

  InputStream droidStream=new FileInputStream("test/resources/fonts/ttf/DroidSansMono.ttf");

  droidmonoTTFFile=new TTFFile();

  droidmonoReader=new FontFileReader(droidStream);

  String droidmonoHeader=OFFontLoader.readHeader(droidmonoReader);

  droidmonoTTFFile.readFont(droidmonoReader,droidmonoHeader);

  droidStream.close();

  InputStream emojiStream=new FileInputStream("test/resources/fonts/ttf/AndroidEmoji.ttf");

  androidEmojiTTFFile=new TTFFile();

  androidEmojiReader=new FontFileReader(emojiStream);

  String androidEmojiHeader=OFFontLoader.readHeader(androidEmojiReader);

  androidEmojiTTFFile.readFont(androidEmojiReader,androidEmojiHeader);

  emojiStream.close();

}

