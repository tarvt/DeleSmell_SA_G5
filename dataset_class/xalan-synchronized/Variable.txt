Location: Variable.java

Content: 

/** 

 * Get the analysis bits for this walker, as defined in the WalkerFactory.

 * @return One of WalkerFactory#BIT_DESCENDANT, etc.

 */

public int getAnalysisBits(){

  org.apache.xalan.templates.ElemVariable vvar=getElemVariable();

  if (null != vvar) {

    XPath xpath=vvar.getSelect();

    if (null != xpath) {

      Expression expr=xpath.getExpression();

      if (null != expr && expr instanceof PathComponent) {

        return ((PathComponent)expr).getAnalysisBits();

      }

    }

  }

  return WalkerFactory.BIT_FILTER;

}

Location: Variable.java

Content: 

/** 

 * Get the XSLT ElemVariable that this sub-expression references. In order for this to work, the SourceLocator must be the owning ElemTemplateElement.

 * @return The dereference to the ElemVariable, or null if not found.

 */

public org.apache.xalan.templates.ElemVariable getElemVariable(){

  org.apache.xalan.templates.ElemVariable vvar=null;

  org.apache.xpath.ExpressionNode owner=getExpressionOwner();

  if (null != owner && owner instanceof org.apache.xalan.templates.ElemTemplateElement) {

    org.apache.xalan.templates.ElemTemplateElement prev=(org.apache.xalan.templates.ElemTemplateElement)owner;

    if (!(prev instanceof org.apache.xalan.templates.Stylesheet)) {

      while (prev != null && !(prev.getParentNode() instanceof org.apache.xalan.templates.Stylesheet)) {

        org.apache.xalan.templates.ElemTemplateElement savedprev=prev;

        while (null != (prev=prev.getPreviousSiblingElem())) {

          if (prev instanceof org.apache.xalan.templates.ElemVariable) {

            vvar=(org.apache.xalan.templates.ElemVariable)prev;

            if (vvar.getName().equals(m_qname)) {

              return vvar;

            }

            vvar=null;

          }

        }

        prev=savedprev.getParentElem();

      }

    }

    if (prev != null)     vvar=prev.getStylesheetRoot().getVariableOrParamComposed(m_qname);

  }

  return vvar;

}

Location: Variable.java

Content: 

/** 

 * Set the index for the variable into the stack. For advanced use only.

 * @return true if this should be a global variable reference.

 */

public boolean getGlobal(){

  return m_isGlobal;

}

Location: Variable.java

Content: 

/** 

 * Set the index for the variable into the stack. For advanced use only.

 * @return index a global or local index.

 */

public int getIndex(){

  return m_index;

}

Location: Variable.java

Content: 

/** 

 * Get the qualified name of the variable.

 * @return A non-null reference to a qualified name.

 */

public QName getQName(){

  return m_qname;

}

Location: Variable.java

Content: 

/** 

 * This method is part of a little trick that is needed to use local variables inside nested for-each loops. See the initializeVariables() method in the ForEach class for an explanation

 */

public void initialize(ClassGenerator classGen,MethodGenerator methodGen){

  final ConstantPoolGen cpg=classGen.getConstantPool();

  final InstructionList il=methodGen.getInstructionList();

  if (isLocal() && !_refs.isEmpty()) {

    if (_local == null) {

      _local=methodGen.addLocalVariable2(getEscapedName(),_type.toJCType(),null);

    }

    if ((_type instanceof IntType) || (_type instanceof NodeType) || (_type instanceof BooleanType))     il.append(new ICONST(0));

 else     if (_type instanceof RealType)     il.append(new DCONST(0));

 else     il.append(new ACONST_NULL());

    _local.setStart(il.append(_type.STORE(_local.getIndex())));

  }

}

Location: Variable.java

Content: 

/** 

 * Tell if this is a psuedo variable reference, declared by Xalan instead of by the user.

 */

public boolean isPsuedoVarRef(){

  java.lang.String ns=m_qname.getNamespaceURI();

  if ((null != ns) && ns.equals(PSUEDOVARNAMESPACE)) {

    if (m_qname.getLocalName().startsWith("#"))     return true;

  }

  return false;

}

Location: Variable.java

Content: 

/** 

 * Tell if this expression returns a stable number that will not change during iterations within the expression. This is used to determine if a proximity position predicate can indicate that no more searching has to occur.

 * @return true if the expression represents a stable number.

 */

public boolean isStableNumber(){

  return true;

}

Location: Variable.java

Content: 

/** 

 * Set the index for the variable into the stack. For advanced use only. You must know what you are doing to use this.

 * @param index a global or local index.

 */

public void setIndex(int index){

  m_index=index;

}

Location: Variable.java

Content: 

/** 

 * Set whether or not this is a global reference. For advanced use only.

 * @param isGlobal true if this should be a global variable reference.

 */

public void setIsGlobal(boolean isGlobal){

  m_isGlobal=isGlobal;

}

Location: Variable.java

Content: 

/** 

 * Set the qualified name of the variable.

 * @param qname Must be a non-null reference to a qualified name.

 */

public void setQName(QName qname){

  m_qname=qname;

}

