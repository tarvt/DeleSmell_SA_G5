Location: Template.java

Content: 

public boolean disabled(){

  return (_disabled);

}

Location: Template.java

Content: 

public QName getModeName(){

  return _mode;

}

Location: Template.java

Content: 

public Vector getParameters(){

  return _parameters;

}

Location: Template.java

Content: 

public Pattern getPattern(){

  return _pattern;

}

Location: Template.java

Content: 

public boolean hasParams(){

  return _parameters.size() > 0;

}

Location: Template.java

Content: 

public boolean isNamed(){

  return _name != null;

}

Location: Template.java

Content: 

public boolean isSimpleNamedTemplate(){

  return _isSimpleNamedTemplate;

}

Location: Template.java

Content: 

/** 

 * When the parser realises that it is dealign with a simplified stylesheet it will create an empty Stylesheet object with the root element of the stylesheet (a LiteralElement object) as its only child. The Stylesheet object will then create this Template object and invoke this method to force some specific behaviour. What we need to do is: o) create a pattern matching on the root node o) add the LRE root node (the only child of the Stylesheet) as our only child node o) set the empty Stylesheet as our parent o) set this template as the Stylesheet's only child

 */

public void parseSimplified(Stylesheet stylesheet,Parser parser){

  _stylesheet=stylesheet;

  setParent(stylesheet);

  _name=null;

  _mode=null;

  _priority=Double.NaN;

  _pattern=parser.parsePattern(this,"/");

  final Vector contents=_stylesheet.getContents();

  final SyntaxTreeNode root=(SyntaxTreeNode)contents.elementAt(0);

  if (root instanceof LiteralElement) {

    addElement(root);

    root.setParent(this);

    contents.set(0,this);

    parser.setTemplate(this);

    root.parseContents(parser);

    parser.setTemplate(null);

  }

}

Location: Template.java

Content: 

private boolean resolveNamedTemplates(Template other,Parser parser){

  if (other == null)   return true;

  SymbolTable stable=parser.getSymbolTable();

  final int us=this.getImportPrecedence();

  final int them=other.getImportPrecedence();

  if (us > them) {

    other.disable();

    return true;

  }

 else   if (us < them) {

    stable.addTemplate(other);

    this.disable();

    return true;

  }

 else {

    return false;

  }

}

Location: Template.java

Content: 

public void setName(QName qname){

  if (_name == null)   _name=qname;

}

