Location: ToSAXHandler.java

Content: 

/** 

 * Returns true if namespace declarations from calls such as startPrefixMapping("prefix1","uri1") should also be mirrored with self generated additional attributes of elements that declare the namespace, for example the attribute xmlns:prefix1="uri1"

 */

boolean getShouldOutputNSAttr(){

  return m_shouldGenerateNSAttribute;

}

Location: ToSAXHandler.java

Content: 

/** 

 * Reset all of the fields owned by ToSAXHandler class

 */

private void resetToSAXHandler(){

  this.m_lexHandler=null;

  this.m_saxHandler=null;

  this.m_state=null;

  this.m_shouldGenerateNSAttribute=false;

}

Location: ToSAXHandler.java

Content: 

/** 

 * Sets the LexicalHandler.

 * @param _lexHandler The LexicalHandler to set

 */

public void setLexHandler(LexicalHandler _lexHandler){

  this.m_lexHandler=_lexHandler;

}

Location: ToSAXHandler.java

Content: 

/** 

 * Set whether or not namespace declarations (e.g. xmlns:foo) should appear as attributes of elements

 * @param doOutputNSAttr whether or not namespace declarations should appear asattributes

 */

public void setShouldOutputNSAttr(boolean doOutputNSAttr){

  m_shouldGenerateNSAttribute=doOutputNSAttr;

}

Location: ToSAXHandler.java

Content: 

/** 

 * Pass in a reference to a TransformState object, which can be used during SAX ContentHandler events to obtain information about he state of the transformation. This method will be called before each startDocument event.

 * @param ts A reference to a TransformState object

 */

public void setTransformState(TransformStateSetter ts){

  this.m_state=ts;

}

Location: ToSAXHandler.java

Content: 

public ToSAXHandler(){

}

Location: ToSAXHandler.java

Content: 

public ToSAXHandler(ContentHandler hdlr,LexicalHandler lex,String encoding){

  setContentHandler(hdlr);

  setLexHandler(lex);

  setEncoding(encoding);

}

Location: ToSAXHandler.java

Content: 

public ToSAXHandler(ContentHandler handler,String encoding){

  setContentHandler(handler);

  setEncoding(encoding);

}

