Location: ObjectPool.java

Content: 

/** 

 * Add an instance of the given object to the pool

 * @param obj Object to add.

 */

public synchronized void freeInstance(Object obj){

  freeStack.add(obj);

}

Location: ObjectPool.java

Content: 

/** 

 * Get an instance of the given object in this pool if available

 * @return an instance of the given object if available or null

 */

public synchronized Object getInstanceIfFree(){

  if (!freeStack.isEmpty()) {

    Object result=freeStack.remove(freeStack.size() - 1);

    return result;

  }

  return null;

}

Location: ObjectPool.java

Content: 

/** 

 * Constructor ObjectPool

 */

public ObjectPool(){

  objectType=null;

  freeStack=new ArrayList();

}

Location: ObjectPool.java

Content: 

/** 

 * Constructor ObjectPool

 * @param type Type of objects for this pool

 */

public ObjectPool(Class type){

  objectType=type;

  freeStack=new ArrayList();

}

Location: ObjectPool.java

Content: 

/** 

 * Constructor ObjectPool

 * @param type Type of objects for this pool

 * @param size Size of vector to allocate

 */

public ObjectPool(Class type,int size){

  objectType=type;

  freeStack=new ArrayList(size);

}

Location: ObjectPool.java

Content: 

/** 

 * Constructor ObjectPool

 * @param className Fully qualified name of the type of objects for this pool.

 */

public ObjectPool(String className){

  try {

    objectType=ObjectFactory.findProviderClass(className,ObjectFactory.findClassLoader(),true);

  }

 catch (  ClassNotFoundException cnfe) {

    throw new WrappedRuntimeException(cnfe);

  }

  freeStack=new ArrayList();

}

