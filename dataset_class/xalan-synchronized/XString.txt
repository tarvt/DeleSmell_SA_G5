Location: XString.java

Content: 

/** 

 * Tests if this string ends with the specified suffix.

 * @param suffix the suffix.

 * @return <code>true</code> if the character sequence represented by theargument is a suffix of the character sequence represented by this object; <code>false</code> otherwise. Note that the result will be <code>true</code> if the argument is the empty string or is equal to this <code>String</code> object as determined by the {@link #equals(Object)} method.

 * @exception java.lang.NullPointerException if <code>suffix</code> is<code>null</code>.

 */

public boolean endsWith(String suffix){

  return str().endsWith(suffix);

}

Location: XString.java

Content: 

/** 

 * Returns the index within this string of the first occurrence of the specified substring. The integer returned is the smallest value <i>k</i> such that: <blockquote> <pre> this.startsWith(str, <i>k</i>) </pre> </blockquote> is <code>true</code>.

 * @param str any string.

 * @return if the string argument occurs as a substring within this object, thenthe index of the first character of the first such substring is returned; if it does not occur as a substring, <code>-1</code> is returned.

 * @exception java.lang.NullPointerException if <code>str</code> is<code>null</code>.

 */

public int indexOf(String str){

  return str().indexOf(str);

}

Location: XString.java

Content: 

/** 

 * Returns the index within this string of the first occurrence of the specified substring, starting at the specified index. The integer returned is the smallest value <i>k</i> such that: <blockquote> <pre> this.startsWith(str, <i>k</i>) && (<i>k</i> >= fromIndex) </pre> </blockquote> is <code>true</code>. <p> There is no restriction on the value of <code>fromIndex</code>. If it is negative, it has the same effect as if it were zero: this entire string may be searched. If it is greater than the length of this string, it has the same effect as if it were equal to the length of this string: <code>-1</code> is returned.

 * @param str       the substring to search for.

 * @param fromIndex the index to start the search from.

 * @return If the string argument occurs as a substring within this object at astarting index no smaller than <code>fromIndex</code>, then the index of the first character of the first such substring is returned. If it does not occur as a substring starting at <code>fromIndex</code> or beyond, <code>-1</code> is returned.

 * @exception java.lang.NullPointerException if <code>str</code> is<code>null</code>

 */

public int indexOf(String str,int fromIndex){

  return str().indexOf(str,fromIndex);

}

Location: XString.java

Content: 

/** 

 * Returns the index within this string of the first occurrence of the specified substring. The integer returned is the smallest value <i>k</i> such that: <blockquote> <pre> this.startsWith(str, <i>k</i>) </pre> </blockquote> is <code>true</code>.

 * @param str any string.

 * @return if the string argument occurs as a substring within this object, thenthe index of the first character of the first such substring is returned; if it does not occur as a substring, <code>-1</code> is returned.

 * @exception java.lang.NullPointerException if <code>str</code> is<code>null</code>.

 */

public int indexOf(XMLString str){

  return str().indexOf(str.toString());

}

Location: XString.java

Content: 

/** 

 * Returns the index within this string of the last occurrence of the specified character. That is, the index returned is the largest value <i>k</i> such that: <blockquote> <pre> this.charAt(<i>k</i>) == ch </pre> </blockquote> is true. The String is searched backwards starting at the last character.

 * @param ch a character.

 * @return the index of the last occurrence of the character in the charactersequence represented by this object, or <code>-1</code> if the character does not occur.

 */

public int lastIndexOf(int ch){

  return str().lastIndexOf(ch);

}

Location: XString.java

Content: 

/** 

 * Returns the index within this string of the last occurrence of the specified character, searching backward starting at the specified index. That is, the index returned is the largest value <i>k</i> such that: <blockquote> <pre> this.charAt(k) == ch) && (k <= fromIndex) </pre> </blockquote> is true.

 * @param ch        a character.

 * @param fromIndex the index to start the search from. There is no restrictionon the value of <code>fromIndex</code>. If it is greater than or equal to the length of this string, it has the same effect as if it were equal to one less than the length of this string: this entire string may be searched. If it is negative, it has the same effect as if it were -1: -1 is returned.

 * @return the index of the last occurrence of the character in the charactersequence represented by this object that is less than or equal to <code>fromIndex</code>, or <code>-1</code> if the character does not occur before that point.

 */

public int lastIndexOf(int ch,int fromIndex){

  return str().lastIndexOf(ch,fromIndex);

}

Location: XString.java

Content: 

/** 

 * Returns the index within this string of the rightmost occurrence of the specified substring. The rightmost empty string "" is considered to occur at the index value <code>this.length()</code>. The returned index is the largest value <i>k</i> such that <blockquote> <pre> this.startsWith(str, k) </pre> </blockquote> is true.

 * @param str the substring to search for.

 * @return if the string argument occurs one or more times as a substring withinthis object, then the index of the first character of the last such substring is returned. If it does not occur as a substring, <code>-1</code> is returned.

 * @exception java.lang.NullPointerException if <code>str</code> is<code>null</code>.

 */

public int lastIndexOf(String str){

  return str().lastIndexOf(str);

}

Location: XString.java

Content: 

/** 

 * Returns the index within this string of the last occurrence of the specified substring.

 * @param str       the substring to search for.

 * @param fromIndex the index to start the search from. There is no restrictionon the value of fromIndex. If it is greater than the length of this string, it has the same effect as if it were equal to the length of this string: this entire string may be searched. If it is negative, it has the same effect as if it were -1: -1 is returned.

 * @return If the string argument occurs one or more times as a substring withinthis object at a starting index no greater than <code>fromIndex</code>, then the index of the first character of the last such substring is returned. If it does not occur as a substring starting at <code>fromIndex</code> or earlier, <code>-1</code> is returned.

 * @exception java.lang.NullPointerException if <code>str</code> is<code>null</code>.

 */

public int lastIndexOf(String str,int fromIndex){

  return str().lastIndexOf(str,fromIndex);

}

Location: XString.java

Content: 

/** 

 * Tests if this string starts with the specified prefix.

 * @param prefix the prefix.

 * @return <code>true</code> if the character sequence represented by theargument is a prefix of the character sequence represented by this string; <code>false</code> otherwise. Note also that <code>true</code> will be returned if the argument is an empty string or is equal to this <code>String</code> object as determined by the {@link #equals(Object)} method.

 * @exception java.lang.NullPointerException if <code>prefix</code> is<code>null</code>.

 */

public boolean startsWith(String prefix){

  return startsWith(prefix,0);

}

Location: XString.java

Content: 

/** 

 * Tests if this string starts with the specified prefix beginning a specified index.

 * @param prefix  the prefix.

 * @param toffset where to begin looking in the string.

 * @return <code>true</code> if the character sequence represented by theargument is a prefix of the substring of this object starting at index <code>toffset</code>; <code>false</code> otherwise. The result is <code>false</code> if <code>toffset</code> is negative or greater than the length of this <code>String</code> object; otherwise the result is the same as the result of the expression <pre> this.subString(toffset).startsWith(prefix) </pre>

 * @exception java.lang.NullPointerException if <code>prefix</code> is<code>null</code>.

 */

public boolean startsWith(String prefix,int toffset){

  return str().startsWith(prefix,toffset);

}

Location: XString.java

Content: 

/** 

 * Converts all of the characters in this <code>String</code> to lower case using the rules of the default locale, which is returned by <code>Locale.getDefault</code>. <p>

 * @return the string, converted to lowercase.

 * @see java.lang.Character#toLowerCase(char)

 * @see java.lang.String#toLowerCase(Locale)

 */

public XMLString toLowerCase(){

  return new XString(str().toLowerCase());

}

Location: XString.java

Content: 

/** 

 * Converts all of the characters in this <code>String</code> to lower case using the rules of the given <code>Locale</code>.

 * @param locale use the case transformation rules for this locale

 * @return the String, converted to lowercase.

 * @see java.lang.Character#toLowerCase(char)

 * @see java.lang.String#toUpperCase(Locale)

 */

public XMLString toLowerCase(Locale locale){

  return new XString(str().toLowerCase(locale));

}

Location: XString.java

Content: 

/** 

 * Converts all of the characters in this <code>String</code> to upper case using the rules of the default locale, which is returned by <code>Locale.getDefault</code>. <p> If no character in this string has a different uppercase version, based on calling the <code>toUpperCase</code> method defined by <code>Character</code>, then the original string is returned. <p> Otherwise, this method creates a new <code>String</code> object representing a character sequence identical in length to the character sequence represented by this <code>String</code> object and with every character equal to the result of applying the method <code>Character.toUpperCase</code> to the corresponding character of this <code>String</code> object. <p> Examples: <blockquote> <pre> "Fahrvergn&uuml;gen".toUpperCase() returns "FAHRVERGN&Uuml;GEN" "Visit Ljubinje!".toUpperCase() returns "VISIT LJUBINJE!" </pre> </blockquote>

 * @return the string, converted to uppercase.

 * @see java.lang.Character#toUpperCase(char)

 * @see java.lang.String#toUpperCase(Locale)

 */

public XMLString toUpperCase(){

  return new XString(str().toUpperCase());

}

Location: XString.java

Content: 

/** 

 * Converts all of the characters in this <code>String</code> to upper case using the rules of the given locale.

 * @param locale use the case transformation rules for this locale

 * @return the String, converted to uppercase.

 * @see java.lang.Character#toUpperCase(char)

 * @see java.lang.String#toLowerCase(Locale)

 */

public XMLString toUpperCase(Locale locale){

  return new XString(str().toUpperCase(locale));

}

Location: XString.java

Content: 

/** 

 * Construct a XString object. This constructor exists for derived classes.

 * @param val String object this will wrap.

 */

protected XString(Object val){

  super(val);

}

Location: XString.java

Content: 

/** 

 * Construct a XNodeSet object.

 * @param val String object this will wrap.

 */

public XString(String val){

  super(val);

}

