Location: FunctionAvailableCall.java

Content: 

/** 

 * Returns an object representing the compile-time evaluation of an expression. We are only using this for function-available and element-available at this time.

 */

public Object evaluateAtCompileTime(){

  return getResult() ? Boolean.TRUE : Boolean.FALSE;

}

Location: FunctionAvailableCall.java

Content: 

/** 

 * Constructs a FunctionAvailableCall FunctionCall. Takes the function name qname, for example, 'function-available', and a list of arguments where the arguments must be instances of LiteralExpression.

 */

public FunctionAvailableCall(QName fname,Vector arguments){

  super(fname,arguments);

  _arg=(Expression)arguments.elementAt(0);

  _type=null;

  if (_arg instanceof LiteralExpr) {

    LiteralExpr arg=(LiteralExpr)_arg;

    _namespaceOfFunct=arg.getNamespace();

    _nameOfFunct=arg.getValue();

    if (!isInternalNamespace()) {

      _isFunctionAvailable=hasMethods();

    }

  }

}

Location: FunctionAvailableCall.java

Content: 

/** 

 * Reports on whether the function specified in the argument to xslt function 'function-available' was found.

 */

public boolean getResult(){

  if (_nameOfFunct == null) {

    return false;

  }

  if (isInternalNamespace()) {

    final Parser parser=getParser();

    _isFunctionAvailable=parser.functionSupported(Util.getLocalName(_nameOfFunct));

  }

  return _isFunctionAvailable;

}

Location: FunctionAvailableCall.java

Content: 

/** 

 * for external java functions only: reports on whether or not the specified method is found in the specifed class.

 */

private boolean hasMethods(){

  String className=getClassNameFromUri(_namespaceOfFunct);

  String methodName=null;

  int colonIndex=_nameOfFunct.indexOf(":");

  if (colonIndex > 0) {

    String functionName=_nameOfFunct.substring(colonIndex + 1);

    int lastDotIndex=functionName.lastIndexOf('.');

    if (lastDotIndex > 0) {

      methodName=functionName.substring(lastDotIndex + 1);

      if (className != null && className.length() != 0)       className=className + "." + functionName.substring(0,lastDotIndex);

 else       className=functionName.substring(0,lastDotIndex);

    }

 else     methodName=functionName;

  }

 else   methodName=_nameOfFunct;

  if (className == null || methodName == null) {

    return false;

  }

  if (methodName.indexOf('-') > 0)   methodName=replaceDash(methodName);

  try {

    final Class clazz=ObjectFactory.findProviderClass(className,ObjectFactory.findClassLoader(),true);

    if (clazz == null) {

      return false;

    }

    final Method[] methods=clazz.getMethods();

    for (int i=0; i < methods.length; i++) {

      final int mods=methods[i].getModifiers();

      if (Modifier.isPublic(mods) && Modifier.isStatic(mods) && methods[i].getName().equals(methodName)) {

        return true;

      }

    }

  }

 catch (  ClassNotFoundException e) {

    return false;

  }

  return false;

}

Location: FunctionAvailableCall.java

Content: 

/** 

 * Return true if the namespace uri is null or it is the XSLTC translet uri.

 */

private boolean isInternalNamespace(){

  return (_namespaceOfFunct == null || _namespaceOfFunct.equals(EMPTYSTRING) || _namespaceOfFunct.equals(TRANSLET_URI));

}

