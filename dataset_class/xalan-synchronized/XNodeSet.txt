Location: XNodeSet.java

Content: 

/** 

 * Compare two numbers for non-equality.

 * @param n1 First number to compare

 * @param n2 Second number to compare

 * @return true if n1 is not equal to n2

 */

boolean compareNumbers(double n1,double n2){

  return n1 != n2;

}

Location: XNodeSet.java

Content: 

/** 

 * Compare two strings for non-equality.

 * @param s1 First string to compare

 * @param s2 Second String to compare

 * @return true if s1 is not equal to s2

 */

boolean compareStrings(XMLString s1,XMLString s2){

  return !s1.equals(s2);

}

Location: XNodeSet.java

Content: 

/** 

 * Tell if one object is less than the other.

 * @param obj2       Object to compare this nodeset to

 * @param comparator Comparator to use

 * @return See the comments below for each object type comparison

 * @throws javax.xml.transform.TransformerException

 */

public boolean compare(XObject obj2,Comparator comparator) throws javax.xml.transform.TransformerException {

  boolean result=false;

  int type=obj2.getType();

  if (XObject.CLASS_NODESET == type) {

    DTMIterator list1=iterRaw();

    DTMIterator list2=((XNodeSet)obj2).iterRaw();

    int node1;

    java.util.Vector node2Strings=null;

    while (DTM.NULL != (node1=list1.nextNode())) {

      XMLString s1=getStringFromNode(node1);

      if (null == node2Strings) {

        int node2;

        while (DTM.NULL != (node2=list2.nextNode())) {

          XMLString s2=getStringFromNode(node2);

          if (comparator.compareStrings(s1,s2)) {

            result=true;

            break;

          }

          if (null == node2Strings)           node2Strings=new java.util.Vector();

          node2Strings.addElement(s2);

        }

      }

 else {

        int n=node2Strings.size();

        for (int i=0; i < n; i++) {

          if (comparator.compareStrings(s1,(XMLString)node2Strings.elementAt(i))) {

            result=true;

            break;

          }

        }

      }

    }

    list1.reset();

    list2.reset();

  }

 else   if (XObject.CLASS_BOOLEAN == type) {

    double num1=bool() ? 1.0 : 0.0;

    double num2=obj2.num();

    result=comparator.compareNumbers(num1,num2);

  }

 else   if (XObject.CLASS_NUMBER == type) {

    DTMIterator list1=iterRaw();

    double num2=obj2.num();

    int node;

    while (DTM.NULL != (node=list1.nextNode())) {

      double num1=getNumberFromNode(node);

      if (comparator.compareNumbers(num1,num2)) {

        result=true;

        break;

      }

    }

    list1.reset();

  }

 else   if (XObject.CLASS_RTREEFRAG == type) {

    XMLString s2=obj2.xstr();

    DTMIterator list1=iterRaw();

    int node;

    while (DTM.NULL != (node=list1.nextNode())) {

      XMLString s1=getStringFromNode(node);

      if (comparator.compareStrings(s1,s2)) {

        result=true;

        break;

      }

    }

    list1.reset();

  }

 else   if (XObject.CLASS_STRING == type) {

    XMLString s2=obj2.xstr();

    DTMIterator list1=iterRaw();

    int node;

    while (DTM.NULL != (node=list1.nextNode())) {

      XMLString s1=getStringFromNode(node);

      if (comparator.compareStrings(s1,s2)) {

        result=true;

        break;

      }

    }

    list1.reset();

  }

 else {

    result=comparator.compareNumbers(this.num(),obj2.num());

  }

  return result;

}

Location: XNodeSet.java

Content: 

/** 

 * Get numeric value of the string conversion from a single node.

 * @param n Node to convert

 * @return numeric value of the string conversion from a single node.

 */

public double getNumberFromNode(int n){

  XMLString xstr=m_dtmMgr.getDTM(n).getStringValue(n);

  return xstr.toDouble();

}

Location: XNodeSet.java

Content: 

/** 

 * Get the string conversion from a single node.

 * @param n Node to convert

 * @return the string conversion from a single node.

 */

public XMLString getStringFromNode(int n){

  if (DTM.NULL != n) {

    return m_dtmMgr.getDTM(n).getStringValue(n);

  }

 else {

    return org.apache.xpath.objects.XString.EMPTYSTRING;

  }

}

Location: XNodeSet.java

Content: 

/** 

 * Return the iterator without cloning, etc.

 */

public DTMIterator iterRaw(){

  return this;

}

Location: XNodeSet.java

Content: 

public void release(DTMIterator iter){

}

Location: XNodeSet.java

Content: 

/** 

 * Default constructor for derived objects.

 */

protected XNodeSet(){

}

Location: XNodeSet.java

Content: 

/** 

 * Construct a XNodeSet object.

 * @param val Value of the XNodeSet object

 */

public XNodeSet(DTMIterator val){

  super();

  if (val instanceof XNodeSet) {

    final XNodeSet nodeSet=(XNodeSet)val;

    setIter(nodeSet.m_iter);

    m_dtmMgr=nodeSet.m_dtmMgr;

    m_last=nodeSet.m_last;

    if (!nodeSet.hasCache())     nodeSet.setShouldCacheNodes(true);

    setObject(nodeSet.getIteratorCache());

  }

 else   setIter(val);

}

Location: XNodeSet.java

Content: 

/** 

 * Construct an empty XNodeSet object. This is used to create a mutable nodeset to which random nodes may be added.

 */

public XNodeSet(DTMManager dtmMgr){

  this(DTM.NULL,dtmMgr);

}

Location: XNodeSet.java

Content: 

/** 

 * Construct a XNodeSet object for one node.

 * @param n Node to add to the new XNodeSet object

 */

public XNodeSet(int n,DTMManager dtmMgr){

  super(new NodeSetDTM(dtmMgr));

  m_dtmMgr=dtmMgr;

  if (DTM.NULL != n) {

    ((NodeSetDTM)m_obj).addNode(n);

    m_last=1;

  }

 else   m_last=0;

}

Location: XNodeSet.java

Content: 

/** 

 * Construct a XNodeSet object.

 * @param val Value of the XNodeSet object

 */

public XNodeSet(XNodeSet val){

  super();

  setIter(val.m_iter);

  m_dtmMgr=val.m_dtmMgr;

  m_last=val.m_last;

  if (!val.hasCache())   val.setShouldCacheNodes(true);

  setObject(val.m_obj);

}

