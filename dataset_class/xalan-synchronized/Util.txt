Location: Util.java

Content: 

public static String baseName(String name){

  return org.apache.xalan.xsltc.compiler.util.Util.baseName(name);

}

Location: Util.java

Content: 

/** 

 * Replace occurances of '.', '-', '/' and ':'

 */

public static String escape(String input){

  return replace(input,".-/:",new String[]{"$dot$","$dash$","$slash$","$colon$"});

}

Location: Util.java

Content: 

/** 

 * Creates a SAX2 InputSource object from a TrAX Source object

 */

public static InputSource getInputSource(XSLTC xsltc,Source source) throws TransformerConfigurationException {

  InputSource input=null;

  String systemId=source.getSystemId();

  try {

    if (source instanceof SAXSource) {

      final SAXSource sax=(SAXSource)source;

      input=sax.getInputSource();

      try {

        XMLReader reader=sax.getXMLReader();

        if (reader == null) {

          try {

            reader=XMLReaderFactory.createXMLReader();

          }

 catch (          Exception e) {

            try {

              SAXParserFactory parserFactory=SAXParserFactory.newInstance();

              parserFactory.setNamespaceAware(true);

              if (xsltc.isSecureProcessing()) {

                try {

                  parserFactory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING,true);

                }

 catch (                org.xml.sax.SAXException se) {

                }

              }

              reader=parserFactory.newSAXParser().getXMLReader();

            }

 catch (            ParserConfigurationException pce) {

              throw new TransformerConfigurationException("ParserConfigurationException",pce);

            }

          }

        }

        reader.setFeature("http://xml.org/sax/features/namespaces",true);

        reader.setFeature("http://xml.org/sax/features/namespace-prefixes",false);

        xsltc.setXMLReader(reader);

      }

 catch (      SAXNotRecognizedException snre) {

        throw new TransformerConfigurationException("SAXNotRecognizedException ",snre);

      }

catch (      SAXNotSupportedException snse) {

        throw new TransformerConfigurationException("SAXNotSupportedException ",snse);

      }

catch (      SAXException se) {

        throw new TransformerConfigurationException("SAXException ",se);

      }

    }

 else     if (source instanceof DOMSource) {

      final DOMSource domsrc=(DOMSource)source;

      final Document dom=(Document)domsrc.getNode();

      final DOM2SAX dom2sax=new DOM2SAX(dom);

      xsltc.setXMLReader(dom2sax);

      input=SAXSource.sourceToInputSource(source);

      if (input == null) {

        input=new InputSource(domsrc.getSystemId());

      }

    }

 else     if (source instanceof StreamSource) {

      final StreamSource stream=(StreamSource)source;

      final InputStream istream=stream.getInputStream();

      final Reader reader=stream.getReader();

      xsltc.setXMLReader(null);

      if (istream != null) {

        input=new InputSource(istream);

      }

 else       if (reader != null) {

        input=new InputSource(reader);

      }

 else {

        input=new InputSource(systemId);

      }

    }

 else {

      ErrorMsg err=new ErrorMsg(ErrorMsg.JAXP_UNKNOWN_SOURCE_ERR);

      throw new TransformerConfigurationException(err.toString());

    }

    input.setSystemId(systemId);

  }

 catch (  NullPointerException e) {

    ErrorMsg err=new ErrorMsg(ErrorMsg.JAXP_NO_SOURCE_ERR,"TransformerFactory.newTemplates()");

    throw new TransformerConfigurationException(err.toString());

  }

catch (  SecurityException e) {

    ErrorMsg err=new ErrorMsg(ErrorMsg.FILE_ACCESS_ERR,systemId);

    throw new TransformerConfigurationException(err.toString());

  }

  return input;

}

Location: Util.java

Content: 

public static Type getJCRefType(String signature){

  return Type.getType(signature);

}

Location: Util.java

Content: 

public static String internalName(String cname){

  return cname.replace('.',filesep);

}

Location: Util.java

Content: 

/** 

 * Checks if the string is a literal (i.e. not an AVT) or not.

 */

public static boolean isLiteral(String str){

  final int length=str.length();

  for (int i=0; i < length - 1; i++) {

    if (str.charAt(i) == '{' && str.charAt(i + 1) != '{') {

      return false;

    }

  }

  return true;

}

Location: Util.java

Content: 

/** 

 * Checks if the string is valid list of qnames

 */

public static boolean isValidQNames(String str){

  if ((str != null) && (!str.equals(Constants.EMPTYSTRING))) {

    final StringTokenizer tokens=new StringTokenizer(str);

    while (tokens.hasMoreTokens()) {

      if (!XML11Char.isXML11ValidQName(tokens.nextToken())) {

        return false;

      }

    }

  }

  return true;

}

Location: Util.java

Content: 

public static String noExtName(String name){

  return org.apache.xalan.xsltc.compiler.util.Util.noExtName(name);

}

Location: Util.java

Content: 

/** 

 * Search for both slashes in order to support URLs and files.

 */

public static String pathName(String name){

  int index=name.lastIndexOf('/');

  if (index < 0) {

    index=name.lastIndexOf('\\');

  }

  return name.substring(0,index + 1);

}

Location: Util.java

Content: 

public static void println(char ch){

  System.out.println(ch);

}

Location: Util.java

Content: 

public static void println(String s){

  System.out.println(s);

}

Location: Util.java

Content: 

public static String toJavaName(String name){

  return org.apache.xalan.xsltc.compiler.util.Util.toJavaName(name);

}

Location: Util.java

Content: 

public static void TRACE1(){

  System.out.println("TRACE1");

}

Location: Util.java

Content: 

public static void TRACE2(){

  System.out.println("TRACE2");

}

Location: Util.java

Content: 

public static void TRACE3(){

  System.out.println("TRACE3");

}

