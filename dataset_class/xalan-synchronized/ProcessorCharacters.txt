Location: ProcessorCharacters.java

Content: 

/** 

 * Receive notification of character data inside an element.

 * @param handler non-null reference to current StylesheetHandler that isconstructing the Templates.

 * @param ch      The characters.

 * @param start   The start position in the character array.

 * @param length  The number of characters to use from the character array.

 * @throws org.xml.sax.SAXException Any SAX exception, possibly wrapping anotherexception.

 * @see org.xml.sax.ContentHandler#characters

 */

public void characters(StylesheetHandler handler,char ch[],int start,int length) throws org.xml.sax.SAXException {

  m_accumulator.append(ch,start,length);

  if (null == m_firstBackPointer)   m_firstBackPointer=handler.getOriginatingNode();

  if (this != handler.getCurrentProcessor())   handler.pushProcessor(this);

}

Location: ProcessorCharacters.java

Content: 

/** 

 * Set the current setXslTextElement. The xsl:text processor will call this to set a preserve space state.

 * @param xslTextElement The current xslTextElement that is preserving state, ornull.

 */

void setXslTextElement(ElemText xslTextElement){

  m_xslTextElement=xslTextElement;

}

Location: ProcessorCharacters.java

Content: 

/** 

 * Receive notification of the start of the non-text event. This is sent to the current processor when any non-text event occurs.

 * @param handler non-null reference to current StylesheetHandler that isconstructing the Templates.

 */

public void startNonText(StylesheetHandler handler) throws org.xml.sax.SAXException {

  if (this == handler.getCurrentProcessor()) {

    handler.popProcessor();

  }

  int nChars=m_accumulator.length();

  if ((nChars > 0) && ((null != m_xslTextElement) || !XMLCharacterRecognizer.isWhiteSpace(m_accumulator)) || handler.isSpacePreserve()) {

    ElemTextLiteral elem=new ElemTextLiteral();

    elem.setDOMBackPointer(m_firstBackPointer);

    elem.setLocaterInfo(handler.getLocator());

    try {

      elem.setPrefixes(handler.getNamespaceSupport());

    }

 catch (    TransformerException te) {

      throw new org.xml.sax.SAXException(te);

    }

    boolean doe=(null != m_xslTextElement) ? m_xslTextElement.getDisableOutputEscaping() : false;

    elem.setDisableOutputEscaping(doe);

    elem.setPreserveSpace(true);

    char[] chars=new char[nChars];

    m_accumulator.getChars(0,nChars,chars,0);

    elem.setChars(chars);

    ElemTemplateElement parent=handler.getElemTemplateElement();

    parent.appendChild(elem);

  }

  m_accumulator.setLength(0);

  m_firstBackPointer=null;

}

