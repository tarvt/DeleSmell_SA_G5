Location: ExpandedNameTable.java

Content: 

/** 

 * Create an expanded name table.

 */

public ExpandedNameTable(){

  m_capacity=m_initialCapacity;

  m_threshold=(int)(m_capacity * m_loadFactor);

  m_table=new HashEntry[m_capacity];

  initExtendedTypes();

}

Location: ExpandedNameTable.java

Content: 

/** 

 * Given a type, return an expanded name ID.Any additional nodes that are created that have this expanded name will use this ID.

 * @return the expanded-name id of the node.

 */

public int getExpandedTypeID(int type){

  return type;

}

Location: ExpandedNameTable.java

Content: 

/** 

 * Given an expanded name represented by namespace, local name and node type, return an ID. If the expanded-name does not exist in the internal tables, the entry will be created, and the ID will be returned. Any additional nodes that are created that have this expanded name will use this ID.

 * @param namespace The namespace

 * @param localName The local name

 * @param type      The node type

 * @return the expanded-name id of the node.

 */

public int getExpandedTypeID(String namespace,String localName,int type){

  return getExpandedTypeID(namespace,localName,type,false);

}

Location: ExpandedNameTable.java

Content: 

/** 

 * Given an expanded name represented by namespace, local name and node type, return an ID. If the expanded-name does not exist in the internal tables, the entry will be created, and the ID will be returned. Any additional nodes that are created that have this expanded name will use this ID. <p> If searchOnly is true, we will return -1 if the name is not found in the table, otherwise the name is added to the table and the expanded name id of the new entry is returned.

 * @param namespace  The namespace

 * @param localName  The local name

 * @param type       The node type

 * @param searchOnly If it is true, we will only search for the expanded name.-1 is return is the name is not found.

 * @return the expanded-name id of the node.

 */

public int getExpandedTypeID(String namespace,String localName,int type,boolean searchOnly){

  if (null == namespace)   namespace="";

  if (null == localName)   localName="";

  int hash=type + namespace.hashCode() + localName.hashCode();

  hashET.redefine(type,namespace,localName,hash);

  int index=hash % m_capacity;

  if (index < 0)   index=-index;

  for (HashEntry e=m_table[index]; e != null; e=e.next) {

    if (e.hash == hash && e.key.equals(hashET))     return e.value;

  }

  if (searchOnly) {

    return DTM.NULL;

  }

  if (m_nextType > m_threshold) {

    rehash();

    index=hash % m_capacity;

    if (index < 0)     index=-index;

  }

  ExtendedType newET=new ExtendedType(type,namespace,localName,hash);

  if (m_extendedTypes.length == m_nextType) {

    ExtendedType[] newArray=new ExtendedType[m_extendedTypes.length * 2];

    System.arraycopy(m_extendedTypes,0,newArray,0,m_extendedTypes.length);

    m_extendedTypes=newArray;

  }

  m_extendedTypes[m_nextType]=newET;

  HashEntry entry=new HashEntry(newET,m_nextType,hash,m_table[index]);

  m_table[index]=entry;

  return m_nextType++;

}

Location: ExpandedNameTable.java

Content: 

/** 

 * Return the array of extended types

 * @return The array of extended types

 */

public ExtendedType[] getExtendedTypes(){

  return m_extendedTypes;

}

Location: ExpandedNameTable.java

Content: 

/** 

 * Given an expanded-name ID, return the local name ID.

 * @param ExpandedNameID an ID that represents an expanded-name.

 * @return The id of this local name.

 */

public final int getLocalNameID(int ExpandedNameID){

  if (m_extendedTypes[ExpandedNameID].getLocalName().length() == 0)   return 0;

 else   return ExpandedNameID;

}

Location: ExpandedNameTable.java

Content: 

/** 

 * Given an expanded-name ID, return the namespace URI ID.

 * @param ExpandedNameID an ID that represents an expanded-name.

 * @return The id of this namespace.

 */

public final int getNamespaceID(int ExpandedNameID){

  if (m_extendedTypes[ExpandedNameID].getNamespace().length() == 0)   return 0;

 else   return ExpandedNameID;

}

Location: ExpandedNameTable.java

Content: 

/** 

 * Given an expanded-name ID, return the namespace URI part.

 * @param ExpandedNameID an ID that represents an expanded-name.

 * @return String URI value of this node's namespace, or null if no namespacewas resolved.

 */

public String getNamespace(int ExpandedNameID){

  String namespace=m_extendedTypes[ExpandedNameID].getNamespace();

  return (namespace.length() == 0 ? null : namespace);

}

Location: ExpandedNameTable.java

Content: 

/** 

 * Return the size of the ExpandedNameTable

 * @return The size of the ExpandedNameTable

 */

public int getSize(){

  return m_nextType;

}

Location: ExpandedNameTable.java

Content: 

/** 

 * Initialize the vector of extended types with the basic DOM node types.

 */

private void initExtendedTypes(){

  m_extendedTypes=new ExtendedType[m_initialSize];

  for (int i=0; i < DTM.NTYPES; i++) {

    m_extendedTypes[i]=m_defaultExtendedTypes[i];

    m_table[i]=new HashEntry(m_defaultExtendedTypes[i],i,i,null);

  }

  m_nextType=DTM.NTYPES;

}

Location: ExpandedNameTable.java

Content: 

/** 

 * Increases the capacity of and internally reorganizes the hashtable, in order to accommodate and access its entries more efficiently. This method is called when the number of keys in the hashtable exceeds this hashtable's capacity and load factor.

 */

private void rehash(){

  int oldCapacity=m_capacity;

  HashEntry[] oldTable=m_table;

  int newCapacity=2 * oldCapacity + 1;

  m_capacity=newCapacity;

  m_threshold=(int)(newCapacity * m_loadFactor);

  m_table=new HashEntry[newCapacity];

  for (int i=oldCapacity - 1; i >= 0; i--) {

    for (HashEntry old=oldTable[i]; old != null; ) {

      HashEntry e=old;

      old=old.next;

      int newIndex=e.hash % newCapacity;

      if (newIndex < 0)       newIndex=-newIndex;

      e.next=m_table[newIndex];

      m_table[newIndex]=e;

    }

  }

}

