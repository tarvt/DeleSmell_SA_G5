Location: DecimalFormatProperties.java

Content: 

/** 

 * Constructor DecimalFormatProperties

 */

public DecimalFormatProperties(int docOrderNumber){

  m_dfs=new java.text.DecimalFormatSymbols();

  m_dfs.setInfinity(Constants.ATTRVAL_INFINITY);

  m_dfs.setNaN(Constants.ATTRVAL_NAN);

  m_docOrderNumber=docOrderNumber;

}

Location: DecimalFormatProperties.java

Content: 

/** 

 * Return the decimal format Symbols for this element. <p> The xsl:decimal-format element declares a decimal-format, which controls the interpretation of a format pattern used by the format-number function. If there is a name attribute, then the element declares a named decimal-format; otherwise, it declares the default decimal-format. The value of the name attribute is a QName, which is expanded as described in [2.4 Qualified Names]. It is an error to declare either the default decimal-format or a decimal-format with a given name more than once (even with different import precedence), unless it is declared every time with the same value for all attributes (taking into account any default values). </p> <p> The other attributes on xsl:decimal-format correspond to the methods on the JDK 1.1 DecimalFormatSymbols class. For each get/set method pair there is an attribute defined for the xsl:decimal-format element. </p>

 * @return the decimal format Symbols for this element.

 */

public DecimalFormatSymbols getDecimalFormatSymbols(){

  return m_dfs;

}

Location: DecimalFormatProperties.java

Content: 

/** 

 * Get the "decimal-separator" attribute. decimal-separator specifies the character used for the decimal sign; the default value is the period character (.).

 * @return the character to use as decimal separator

 */

public char getDecimalSeparator(){

  return m_dfs.getDecimalSeparator();

}

Location: DecimalFormatProperties.java

Content: 

/** 

 * Get the "digit" attribute. digit specifies the character used for a digit in the format pattern; the default value is the number sign character (#).

 * @return Character to use for a digit in format pattern

 */

public char getDigit(){

  return m_dfs.getDigit();

}

Location: DecimalFormatProperties.java

Content: 

/** 

 * Get the "grouping-separator" attribute. grouping-separator specifies the character used as a grouping (e.g. thousands) separator; the default value is the comma character (,).

 * @return Character to use a grouping separator

 */

public char getGroupingSeparator(){

  return m_dfs.getGroupingSeparator();

}

Location: DecimalFormatProperties.java

Content: 

/** 

 * Get the "infinity" attribute. infinity specifies the string used to represent infinity; the default value is the string Infinity.

 * @return String to use as the "infinity" attribute.

 */

public String getInfinity(){

  return m_dfs.getInfinity();

}

Location: DecimalFormatProperties.java

Content: 

/** 

 * Get the "minus-sign" attribute. minus-sign specifies the character used as the default minus sign; the default value is the hyphen-minus character (-, #x2D).

 * @return Character to use as minus sign

 */

public char getMinusSign(){

  return m_dfs.getMinusSign();

}

Location: DecimalFormatProperties.java

Content: 

/** 

 * Get the "NaN" attribute. NaN specifies the string used to represent the NaN value; the default value is the string NaN.

 * @return String to use as the "NaN" attribute.

 */

public String getNaN(){

  return m_dfs.getNaN();

}

Location: DecimalFormatProperties.java

Content: 

/** 

 * Get the "pattern-separator" attribute. pattern-separator specifies the character used to separate positive and negative sub patterns in a pattern; the default value is the semi-colon character (;).

 * @return Character to use as a pattern separator

 */

public char getPatternSeparator(){

  return m_dfs.getPatternSeparator();

}

Location: DecimalFormatProperties.java

Content: 

/** 

 * Get the "percent" attribute. percent specifies the character used as a percent sign; the default value is the percent character (%).

 * @return Character to use as percent

 */

public char getPercent(){

  return m_dfs.getPercent();

}

Location: DecimalFormatProperties.java

Content: 

/** 

 * Get the "per-mille" attribute. per-mille specifies the character used as a per mille sign; the default value is the Unicode per-mille character (#x2030).

 * @return Character to use as per-mille

 */

public char getPerMille(){

  return m_dfs.getPerMill();

}

Location: DecimalFormatProperties.java

Content: 

/** 

 * Get the "zero-digit" attribute. zero-digit specifies the character used as the digit zero; the default value is the digit zero (0).

 * @return Character to use as the digit zero

 */

public char getZeroDigit(){

  return m_dfs.getZeroDigit();

}

Location: DecimalFormatProperties.java

Content: 

/** 

 * Set the "decimal-separator" attribute. decimal-separator specifies the character used for the decimal sign; the default value is the period character (.).

 * @param ds Character to set as decimal separator

 */

public void setDecimalSeparator(char ds){

  m_dfs.setDecimalSeparator(ds);

}

Location: DecimalFormatProperties.java

Content: 

/** 

 * Set the "digit" attribute. digit specifies the character used for a digit in the format pattern; the default value is the number sign character (#).

 * @param v Character to use for a digit in format pattern

 */

public void setDigit(char v){

  m_dfs.setDigit(v);

}

Location: DecimalFormatProperties.java

Content: 

/** 

 * Set the "grouping-separator" attribute. grouping-separator specifies the character used as a grouping (e.g. thousands) separator; the default value is the comma character (,).

 * @param gs Character to use a grouping separator

 */

public void setGroupingSeparator(char gs){

  m_dfs.setGroupingSeparator(gs);

}

Location: DecimalFormatProperties.java

Content: 

/** 

 * Set the "infinity" attribute. infinity specifies the string used to represent infinity; the default value is the string Infinity.

 * @param inf String to use as the "infinity" attribute.

 */

public void setInfinity(String inf){

  m_dfs.setInfinity(inf);

}

Location: DecimalFormatProperties.java

Content: 

/** 

 * Set the "minus-sign" attribute. minus-sign specifies the character used as the default minus sign; the default value is the hyphen-minus character (-, #x2D).

 * @param v Character to use as minus sign

 */

public void setMinusSign(char v){

  m_dfs.setMinusSign(v);

}

Location: DecimalFormatProperties.java

Content: 

/** 

 * Set the "NaN" attribute. NaN specifies the string used to represent the NaN value; the default value is the string NaN.

 * @param v String to use as the "NaN" attribute.

 */

public void setNaN(String v){

  m_dfs.setNaN(v);

}

Location: DecimalFormatProperties.java

Content: 

/** 

 * Set the "pattern-separator" attribute. pattern-separator specifies the character used to separate positive and negative sub patterns in a pattern; the default value is the semi-colon character (;).

 * @param v Character to use as a pattern separator

 */

public void setPatternSeparator(char v){

  m_dfs.setPatternSeparator(v);

}

Location: DecimalFormatProperties.java

Content: 

/** 

 * Set the "percent" attribute. percent specifies the character used as a percent sign; the default value is the percent character (%).

 * @param v Character to use as percent

 */

public void setPercent(char v){

  m_dfs.setPercent(v);

}

Location: DecimalFormatProperties.java

Content: 

/** 

 * Set the "per-mille" attribute. per-mille specifies the character used as a per mille sign; the default value is the Unicode per-mille character (#x2030).

 * @param v Character to use as per-mille

 */

public void setPerMille(char v){

  m_dfs.setPerMill(v);

}

Location: DecimalFormatProperties.java

Content: 

/** 

 * Set the "zero-digit" attribute. zero-digit specifies the character used as the digit zero; the default value is the digit zero (0).

 * @param v Character to use as the digit zero

 */

public void setZeroDigit(char v){

  m_dfs.setZeroDigit(v);

}

