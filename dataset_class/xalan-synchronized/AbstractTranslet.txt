Location: AbstractTranslet.java

Content: 

public void addAuxiliaryClass(Class auxClass){

  if (_auxClasses == null)   _auxClasses=new Hashtable();

  _auxClasses.put(auxClass.getName(),auxClass);

}

Location: AbstractTranslet.java

Content: 

/** 

 * Add's a name of an element whose text contents should be output as CDATA

 */

public void addCdataElement(String name){

  if (_cdata == null) {

    _cdata=new Vector();

  }

  int lastColon=name.lastIndexOf(':');

  if (lastColon > 0) {

    String uri=name.substring(0,lastColon);

    String localName=name.substring(lastColon + 1);

    _cdata.addElement(uri);

    _cdata.addElement(localName);

  }

 else {

    _cdata.addElement(null);

    _cdata.addElement(name);

  }

}

Location: AbstractTranslet.java

Content: 

/** 

 * Adds a DecimalFormat object to the _formatSymbols hashtable. The entry is created with the input DecimalFormatSymbols.

 */

public void addDecimalFormat(String name,DecimalFormatSymbols symbols){

  if (_formatSymbols == null)   _formatSymbols=new Hashtable();

  if (name == null)   name=EMPTYSTRING;

  final DecimalFormat df=new DecimalFormat();

  if (symbols != null) {

    df.setDecimalFormatSymbols(symbols);

  }

  _formatSymbols.put(name,df);

}

Location: AbstractTranslet.java

Content: 

/** 

 * Add a new global parameter if not already in the current frame. To setParameters of the form {http://foo.bar}xyz This needs to get mapped to an instance variable in the class The mapping created so that the global variables in the generated class become http$colon$$flash$$flash$foo$dot$bar$colon$xyz

 */

public final Object addParameter(String name,Object value){

  name=BasisLibrary.mapQNameToJavaName(name);

  return addParameter(name,value,false);

}

Location: AbstractTranslet.java

Content: 

/** 

 * Add a new global or local parameter if not already in the current frame. The 'isDefault' parameter is set to true if the value passed is the default value from the <xsl:parameter> element's select attribute or element body.

 */

public final Object addParameter(String name,Object value,boolean isDefault){

  for (int i=pframe - 1; i >= pbase; i--) {

    final Parameter param=(Parameter)paramsStack.get(i);

    if (param._name.equals(name)) {

      if (param._isDefault || !isDefault) {

        param._value=value;

        param._isDefault=isDefault;

        return value;

      }

      return param._value;

    }

  }

  paramsStack.add(pframe++,new Parameter(name,value,isDefault));

  return value;

}

Location: AbstractTranslet.java

Content: 

/** 

 * Leverages the Key Class to implement the XSLT id() function. buildIdIndex creates the index (##id) that Key Class uses. The index contains the element node index (int) and Id value (String).

 */

private final void buildIDIndex(DOM document){

  setRootForKeys(document.getDocument());

  if (document instanceof DOMEnhancedForDTM) {

    DOMEnhancedForDTM enhancedDOM=(DOMEnhancedForDTM)document;

    if (enhancedDOM.hasDOMSource()) {

      buildKeyIndex(ID_INDEX_NAME,document);

      return;

    }

 else {

      final Hashtable elementsByID=enhancedDOM.getElementsWithIDs();

      if (elementsByID == null) {

        return;

      }

      final Enumeration idValues=elementsByID.keys();

      boolean hasIDValues=false;

      while (idValues.hasMoreElements()) {

        final Object idValue=idValues.nextElement();

        final int element=document.getNodeHandle(((Integer)elementsByID.get(idValue)).intValue());

        buildKeyIndex(ID_INDEX_NAME,element,idValue);

        hasIDValues=true;

      }

      if (hasIDValues) {

        setKeyIndexDom(ID_INDEX_NAME,document);

      }

    }

  }

}

Location: AbstractTranslet.java

Content: 

/** 

 * Create an empty KeyIndex in the DOM case

 * @param name is the name of the index (the key or ##id)

 * @param dom  is the DOM

 */

public void buildKeyIndex(String name,DOM dom){

  if (_keyIndexes == null)   _keyIndexes=new Hashtable();

  KeyIndex index=(KeyIndex)_keyIndexes.get(name);

  if (index == null) {

    _keyIndexes.put(name,index=new KeyIndex(_indexSize));

  }

  index.setDom(dom);

}

Location: AbstractTranslet.java

Content: 

/** 

 * Adds a value to a key/id index

 * @param name  is the name of the index (the key or ##id)

 * @param node  is the node handle of the node to insert

 * @param value is the value that will look up the node in the given index

 */

public void buildKeyIndex(String name,int node,Object value){

  if (_keyIndexes == null)   _keyIndexes=new Hashtable();

  KeyIndex index=(KeyIndex)_keyIndexes.get(name);

  if (index == null) {

    _keyIndexes.put(name,index=new KeyIndex(_indexSize));

  }

  index.add(value,node,_currentRootForKeys);

}

Location: AbstractTranslet.java

Content: 

/** 

 * This method builds key indexes - it is overridden in the compiled translet in cases where the <xsl:key> element is used

 */

public void buildKeys(DOM document,DTMAxisIterator iterator,SerializationHandler handler,int root) throws TransletException {

}

Location: AbstractTranslet.java

Content: 

/** 

 * Used by some compiled code as a shortcut for passing strings to the output handler

 */

public final void characters(final String string,SerializationHandler handler) throws TransletException {

  if (string != null) {

    try {

      handler.characters(string);

    }

 catch (    Exception e) {

      throw new TransletException(e);

    }

  }

}

Location: AbstractTranslet.java

Content: 

public void closeOutputHandler(SerializationHandler handler){

  try {

    handler.endDocument();

    handler.close();

  }

 catch (  Exception e) {

  }

}

Location: AbstractTranslet.java

Content: 

/** 

 * Creates a KeyIndex object of the desired size - don't want to resize!!!

 */

public KeyIndex createKeyIndex(){

  return (new KeyIndex(_indexSize));

}

Location: AbstractTranslet.java

Content: 

/** 

 * Pass a message to the message handler - used by Message class.

 */

public final void displayMessage(String msg){

  if (_msgHandler == null) {

    System.err.println(msg);

  }

 else {

    _msgHandler.displayMessage(msg);

  }

}

Location: AbstractTranslet.java

Content: 

public Class getAuxiliaryClass(String className){

  if (_auxClasses == null)   return null;

  return ((Class)_auxClasses.get(className));

}

Location: AbstractTranslet.java

Content: 

/** 

 * Retrieves a named DecimalFormat object from _formatSymbols hashtable.

 */

public final DecimalFormat getDecimalFormat(String name){

  if (_formatSymbols != null) {

    if (name == null)     name=EMPTYSTRING;

    DecimalFormat df=(DecimalFormat)_formatSymbols.get(name);

    if (df == null)     df=(DecimalFormat)_formatSymbols.get(EMPTYSTRING);

    return df;

  }

  return (null);

}

Location: AbstractTranslet.java

Content: 

/** 

 * Returns the DOM cache used for this translet. Used by the LoadDocument class (if present) when the document() function is used.

 */

public DOMCache getDOMCache(){

  return (_domCache);

}

Location: AbstractTranslet.java

Content: 

/** 

 * Returns the index for a given key (or id). The index implements our internal iterator interface

 */

public KeyIndex getKeyIndex(String name){

  if (_keyIndexes == null) {

    return (_emptyKeyIndex != null) ? _emptyKeyIndex : (_emptyKeyIndex=new KeyIndex(1));

  }

  final KeyIndex index=(KeyIndex)_keyIndexes.get(name);

  if (index == null) {

    return (_emptyKeyIndex != null) ? _emptyKeyIndex : (_emptyKeyIndex=new KeyIndex(1));

  }

  return (index);

}

Location: AbstractTranslet.java

Content: 

public String[] getNamesArray(){

  return namesArray;

}

Location: AbstractTranslet.java

Content: 

public String[] getNamespaceArray(){

  return namespaceArray;

}

Location: AbstractTranslet.java

Content: 

public int[] getTypesArray(){

  return typesArray;

}

Location: AbstractTranslet.java

Content: 

public String[] getUrisArray(){

  return urisArray;

}

Location: AbstractTranslet.java

Content: 

public boolean hasIdCall(){

  return _hasIdCall;

}

Location: AbstractTranslet.java

Content: 

/** 

 * Wrap the initial input DOM in a dom adapter. This adapter is wrapped in a DOM multiplexer if the document() function is used (handled by compiled code in the translet - see compiler/Stylesheet.compileTransform()).

 */

public final DOMAdapter makeDOMAdapter(DOM dom) throws TransletException {

  setRootForKeys(dom.getDocument());

  return new DOMAdapter(dom,namesArray,urisArray,typesArray,namespaceArray);

}

Location: AbstractTranslet.java

Content: 

public Document newDocument(String uri,String qname) throws ParserConfigurationException {

  if (_domImplementation == null) {

    _domImplementation=DocumentBuilderFactory.newInstance().newDocumentBuilder().getDOMImplementation();

  }

  return _domImplementation.createDocument(uri,qname,null);

}

Location: AbstractTranslet.java

Content: 

public SerializationHandler openOutputHandler(String filename) throws TransletException {

  return openOutputHandler(filename,false);

}

Location: AbstractTranslet.java

Content: 

/** 

 * Multiple output document extension. See compiler/TransletOutput for actual implementation.

 */

public SerializationHandler openOutputHandler(String filename,boolean append) throws TransletException {

  try {

    final TransletOutputHandlerFactory factory=TransletOutputHandlerFactory.newInstance();

    String dirStr=new File(filename).getParent();

    if ((null != dirStr) && (dirStr.length() > 0)) {

      File dir=new File(dirStr);

      dir.mkdirs();

    }

    factory.setEncoding(_encoding);

    factory.setOutputMethod(_method);

    factory.setWriter(new FileWriter(filename,append));

    factory.setOutputType(TransletOutputHandlerFactory.STREAM);

    final SerializationHandler handler=factory.getSerializationHandler();

    transferOutputSettings(handler);

    handler.startDocument();

    return handler;

  }

 catch (  Exception e) {

    throw new TransletException(e);

  }

}

Location: AbstractTranslet.java

Content: 

/** 

 * Pop the topmost parameter frame.

 */

public final void popParamFrame(){

  if (pbase > 0) {

    final int oldpbase=((Integer)paramsStack.get(--pbase)).intValue();

    for (int i=pframe - 1; i >= pbase; i--) {

      paramsStack.remove(i);

    }

    pframe=pbase;

    pbase=oldpbase;

  }

}

Location: AbstractTranslet.java

Content: 

/** 

 * After constructing the translet object, this method must be called to perform any version-specific post-initialization that's required.

 */

public final void postInitialization(){

  if (transletVersion < VER_SPLIT_NAMES_ARRAY) {

    int arraySize=namesArray.length;

    String[] newURIsArray=new String[arraySize];

    String[] newNamesArray=new String[arraySize];

    int[] newTypesArray=new int[arraySize];

    for (int i=0; i < arraySize; i++) {

      String name=namesArray[i];

      int colonIndex=name.lastIndexOf(':');

      int lNameStartIdx=colonIndex + 1;

      if (colonIndex > -1) {

        newURIsArray[i]=name.substring(0,colonIndex);

      }

      if (name.charAt(lNameStartIdx) == '@') {

        lNameStartIdx++;

        newTypesArray[i]=DTM.ATTRIBUTE_NODE;

      }

 else       if (name.charAt(lNameStartIdx) == '?') {

        lNameStartIdx++;

        newTypesArray[i]=DTM.NAMESPACE_NODE;

      }

 else {

        newTypesArray[i]=DTM.ELEMENT_NODE;

      }

      newNamesArray[i]=(lNameStartIdx == 0) ? name : name.substring(lNameStartIdx);

    }

    namesArray=newNamesArray;

    urisArray=newURIsArray;

    typesArray=newTypesArray;

  }

  if (transletVersion > CURRENT_TRANSLET_VERSION) {

    BasisLibrary.runTimeError(BasisLibrary.UNKNOWN_TRANSLET_VERSION_ERR,this.getClass().getName());

  }

}

Location: AbstractTranslet.java

Content: 

/** 

 * Give the translet an opportunity to perform a prepass on the document to extract any information that it can store in an optimized form. Currently, it only extracts information about attributes of type ID.

 */

public final void prepassDocument(DOM document){

  setIndexSize(document.getSize());

  buildIDIndex(document);

}

Location: AbstractTranslet.java

Content: 

/** 

 * Debugging

 */

public void printInternalState(){

  System.out.println("-------------------------------------");

  System.out.println("AbstractTranslet this = " + this);

  System.out.println("pbase = " + pbase);

  System.out.println("vframe = " + pframe);

  System.out.println("paramsStack.size() = " + paramsStack.size());

  System.out.println("namesArray.size = " + namesArray.length);

  System.out.println("namespaceArray.size = " + namespaceArray.length);

  System.out.println("");

  System.out.println("Total memory = " + Runtime.getRuntime().totalMemory());

}

Location: AbstractTranslet.java

Content: 

/** 

 * Push a new parameter frame.

 */

public final void pushParamFrame(){

  paramsStack.add(pframe,new Integer(pbase));

  pbase=++pframe;

}

Location: AbstractTranslet.java

Content: 

public void setAuxiliaryClasses(Hashtable auxClasses){

  _auxClasses=auxClasses;

}

Location: AbstractTranslet.java

Content: 

/** 

 * Sets the DOM cache used for additional documents loaded using the document() function.

 */

public void setDOMCache(DOMCache cache){

  _domCache=cache;

}

Location: AbstractTranslet.java

Content: 

/** 

 * This method is used to pass the largest DOM size to the translet. Needed to make sure that the translet can index the whole DOM.

 */

public void setIndexSize(int size){

  if (size > _indexSize)   _indexSize=size;

}

Location: AbstractTranslet.java

Content: 

/** 

 * This method builds key indexes - it is overridden in the compiled translet in cases where the <xsl:key> element is used

 */

public void setKeyIndexDom(String name,DOM document){

  getKeyIndex(name).setDom(document);

}

Location: AbstractTranslet.java

Content: 

/** 

 * Set the translet's message handler - must implement MessageHandler

 */

public final void setMessageHandler(MessageHandler handler){

  _msgHandler=handler;

}

Location: AbstractTranslet.java

Content: 

private void setRootForKeys(int root){

  _currentRootForKeys=root;

}

Location: AbstractTranslet.java

Content: 

public void setTemplates(Templates templates){

  _templates=templates;

}

Location: AbstractTranslet.java

Content: 

/** 

 * Transfer the output settings to the output post-processor

 */

protected void transferOutputSettings(SerializationHandler handler){

  if (_method != null) {

    if (_method.equals("xml")) {

      if (_standalone != null) {

        handler.setStandalone(_standalone);

      }

      if (_omitHeader) {

        handler.setOmitXMLDeclaration(true);

      }

      handler.setCdataSectionElements(_cdata);

      if (_version != null) {

        handler.setVersion(_version);

      }

      handler.setIndent(_indent);

      handler.setIndentAmount(_indentamount);

      if (_doctypeSystem != null) {

        handler.setDoctype(_doctypeSystem,_doctypePublic);

      }

    }

 else     if (_method.equals("html")) {

      handler.setIndent(_indent);

      handler.setDoctype(_doctypeSystem,_doctypePublic);

      if (_mediaType != null) {

        handler.setMediaType(_mediaType);

      }

    }

  }

 else {

    handler.setCdataSectionElements(_cdata);

    if (_version != null) {

      handler.setVersion(_version);

    }

    if (_standalone != null) {

      handler.setStandalone(_standalone);

    }

    if (_omitHeader) {

      handler.setOmitXMLDeclaration(true);

    }

    handler.setIndent(_indent);

    handler.setDoctype(_doctypeSystem,_doctypePublic);

  }

}

Location: AbstractTranslet.java

Content: 

/** 

 * Main transform() method - this is overridden by the compiled translet

 */

public abstract void transform(DOM document,DTMAxisIterator iterator,SerializationHandler handler) throws TransletException ;

Location: AbstractTranslet.java

Content: 

/** 

 * Calls transform() with a given output handler

 */

public final void transform(DOM document,SerializationHandler handler) throws TransletException {

  try {

    transform(document,document.getIterator(),handler);

  }

  finally {

    _keyIndexes=null;

  }

}

