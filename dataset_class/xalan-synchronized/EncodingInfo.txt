Location: EncodingInfo.java

Content: 

/** 

 * Create an EncodingInfo object based on the ISO name and Java name. If both parameters are null any character will be considered to be in the encoding. This is useful for when the serializer is in temporary output state, and has no assciated encoding.

 * @param name     reference to the ISO name.

 * @param javaName reference to the Java encoding name.

 * @param highChar The char for which characters at or below this value aredefinately in the encoding, although for characters above this point they might be in the encoding.

 */

public EncodingInfo(String name,String javaName,char highChar){

  this.name=name;

  this.javaName=javaName;

  this.m_highCharInContiguousGroup=highChar;

}

Location: EncodingInfo.java

Content: 

/** 

 * This method exists for performance reasons. <p> Except for '\u0000', if a char is less than or equal to the value returned by this method then it in the encoding. <p> The characters in an encoding are not contiguous, however there is a lowest group of chars starting at '\u0001' upto and including the char returned by this method that are all in the encoding. So the char returned by this method essentially defines the lowest contiguous group. <p> chars above the value returned might be in the encoding, but chars at or below the value returned are definately in the encoding. <p> In any case however, the isInEncoding(char) method can be used regardless of the value of the char returned by this method. <p> If the value returned is '\u0000' it means that every character must be tested with an isInEncoding method  {@link #isInEncoding(char)} or{@link #isInEncoding(char,char)} for surrogate pairs.<p> This method is not a public API.

 * @xsl.usage internal

 */

public final char getHighChar(){

  return m_highCharInContiguousGroup;

}

Location: EncodingInfo.java

Content: 

/** 

 * This method is the core of determining if character is in the encoding. The method is not foolproof, because s.getBytes(encoding) has specified behavior only if the characters are in the specified encoding. However this method tries it's best.

 * @param ch   the char that was converted using getBytes, or the first char ofa high/low pair that was converted.

 * @param data the bytes written out by the call to s.getBytes(encoding);

 * @return true if the character is in the encoding.

 */

private static boolean inEncoding(char ch,byte[] data){

  final boolean isInEncoding;

  if (data == null || data.length == 0) {

    isInEncoding=false;

  }

 else {

    if (data[0] == 0)     isInEncoding=false;

 else     if (data[0] == '?' && ch != '?')     isInEncoding=false;

 else {

      isInEncoding=true;

    }

  }

  return isInEncoding;

}

Location: EncodingInfo.java

Content: 

/** 

 * This is heart of the code that determines if a given high/low surrogate pair forms a character that is in the given encoding. This method is probably expensive, and the answer should be cached. <p> This method is not a public API, and should only be used internally within the serializer.

 * @param high     the high char of a high/low surrogate pair.

 * @param low      the low char of a high/low surrogate pair.

 * @param encoding the Java name of the encoding.

 * @xsl.usage internal

 */

private static boolean inEncoding(char high,char low,String encoding){

  boolean isInEncoding;

  try {

    char cArray[]=new char[2];

    cArray[0]=high;

    cArray[1]=low;

    String s=new String(cArray);

    byte[] bArray=s.getBytes(encoding);

    isInEncoding=inEncoding(high,bArray);

  }

 catch (  Exception e) {

    isInEncoding=false;

  }

  return isInEncoding;

}

Location: EncodingInfo.java

Content: 

/** 

 * This is heart of the code that determines if a given character is in the given encoding. This method is probably expensive, and the answer should be cached. <p> This method is not a public API, and should only be used internally within the serializer.

 * @param ch       the char in question, that is not a high char of a high/lowsurrogate pair.

 * @param encoding the Java name of the enocding.

 * @xsl.usage internal

 */

private static boolean inEncoding(char ch,String encoding){

  boolean isInEncoding;

  try {

    char cArray[]=new char[1];

    cArray[0]=ch;

    String s=new String(cArray);

    byte[] bArray=s.getBytes(encoding);

    isInEncoding=inEncoding(ch,bArray);

  }

 catch (  Exception e) {

    isInEncoding=false;

    if (encoding == null)     isInEncoding=true;

  }

  return isInEncoding;

}

Location: EncodingInfo.java

Content: 

/** 

 * This is not a public API. It returns true if the char in question is in the encoding.

 * @param ch the char in question.<p> This method is not a public API.

 * @xsl.usage internal

 */

public boolean isInEncoding(char ch){

  if (m_encoding == null) {

    m_encoding=new EncodingImpl();

  }

  return m_encoding.isInEncoding(ch);

}

Location: EncodingInfo.java

Content: 

/** 

 * This is not a public API. It returns true if the character formed by the high/low pair is in the encoding.

 * @param high a char that the a high char of a high/low surrogate pair.

 * @param low  a char that is the low char of a high/low surrogate pair.<p> This method is not a public API.

 * @xsl.usage internal

 */

public boolean isInEncoding(char high,char low){

  if (m_encoding == null) {

    m_encoding=new EncodingImpl();

  }

  return m_encoding.isInEncoding(high,low);

}

