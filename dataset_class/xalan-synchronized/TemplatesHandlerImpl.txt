Location: TemplatesHandlerImpl.java

Content: 

/** 

 * Implements javax.xml.transform.sax.TemplatesHandler.getTemplates() When a TemplatesHandler object is used as a ContentHandler or DocumentHandler for the parsing of transformation instructions, it creates a Templates object, which the caller can get once the SAX events have been completed.

 * @return The Templates object that was created during the SAX event process,or null if no Templates object has been created.

 */

public Templates getTemplates(){

  return _templates;

}

Location: TemplatesHandlerImpl.java

Content: 

/** 

 * This method implements XSLTC's SourceLoader interface. It is used to glue a TrAX URIResolver to the XSLTC compiler's Input and Import classes.

 * @param href    The URI of the document to load

 * @param context The URI of the currently loaded document

 * @param xsltc   The compiler that resuests the document

 * @return An InputSource with the loaded document

 */

public InputSource loadSource(String href,String context,XSLTC xsltc){

  try {

    final Source source=_uriResolver.resolve(href,context);

    if (source != null) {

      return Util.getInputSource(xsltc,source);

    }

  }

 catch (  TransformerException e) {

  }

  return null;

}

Location: TemplatesHandlerImpl.java

Content: 

/** 

 * Default constructor

 */

protected TemplatesHandlerImpl(int indentNumber,TransformerFactoryImpl tfactory){

  _indentNumber=indentNumber;

  _tfactory=tfactory;

  XSLTC xsltc=new XSLTC();

  if (tfactory.getFeature(XMLConstants.FEATURE_SECURE_PROCESSING))   xsltc.setSecureProcessing(true);

  if ("true".equals(tfactory.getAttribute(TransformerFactoryImpl.ENABLE_INLINING)))   xsltc.setTemplateInlining(true);

 else   xsltc.setTemplateInlining(false);

  _parser=xsltc.getParser();

}

