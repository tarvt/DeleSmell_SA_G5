Location: Transform.java

Content: 

private void doTransform(){

  try {

    final Class clazz=ObjectFactory.findProviderClass(_className,ObjectFactory.findClassLoader(),true);

    final AbstractTranslet translet=(AbstractTranslet)clazz.newInstance();

    translet.postInitialization();

    final SAXParserFactory factory=SAXParserFactory.newInstance();

    try {

      factory.setFeature(Constants.NAMESPACE_FEATURE,true);

    }

 catch (    Exception e) {

      factory.setNamespaceAware(true);

    }

    final SAXParser parser=factory.newSAXParser();

    final XMLReader reader=parser.getXMLReader();

    XSLTCDTMManager dtmManager=(XSLTCDTMManager)XSLTCDTMManager.getDTMManagerClass().newInstance();

    DTMWSFilter wsfilter;

    if (translet != null && translet instanceof StripFilter) {

      wsfilter=new DOMWSFilter(translet);

    }

 else {

      wsfilter=null;

    }

    final DOMEnhancedForDTM dom=(DOMEnhancedForDTM)dtmManager.getDTM(new SAXSource(reader,new InputSource(_fileName)),false,wsfilter,true,false,translet.hasIdCall());

    dom.setDocumentURI(_fileName);

    translet.prepassDocument(dom);

    int n=_params.size();

    for (int i=0; i < n; i++) {

      Parameter param=(Parameter)_params.elementAt(i);

      translet.addParameter(param._name,param._value);

    }

    TransletOutputHandlerFactory tohFactory=TransletOutputHandlerFactory.newInstance();

    tohFactory.setOutputType(TransletOutputHandlerFactory.STREAM);

    tohFactory.setEncoding(translet._encoding);

    tohFactory.setOutputMethod(translet._method);

    if (_iterations == -1) {

      translet.transform(dom,tohFactory.getSerializationHandler());

    }

 else     if (_iterations > 0) {

      long mm=System.currentTimeMillis();

      for (int i=0; i < _iterations; i++) {

        translet.transform(dom,tohFactory.getSerializationHandler());

      }

      mm=System.currentTimeMillis() - mm;

      System.err.println("\n<!--");

      System.err.println("  transform  = " + (((double)mm) / ((double)_iterations)) + " ms");

      System.err.println("  throughput = " + (1000.0 / (((double)mm) / ((double)_iterations))) + " tps");

      System.err.println("-->");

    }

  }

 catch (  TransletException e) {

    if (_debug)     e.printStackTrace();

    System.err.println(new ErrorMsg(ErrorMsg.RUNTIME_ERROR_KEY) + e.getMessage());

  }

catch (  RuntimeException e) {

    if (_debug)     e.printStackTrace();

    System.err.println(new ErrorMsg(ErrorMsg.RUNTIME_ERROR_KEY) + e.getMessage());

  }

catch (  FileNotFoundException e) {

    if (_debug)     e.printStackTrace();

    ErrorMsg err=new ErrorMsg(ErrorMsg.FILE_NOT_FOUND_ERR,_fileName);

    System.err.println(new ErrorMsg(ErrorMsg.RUNTIME_ERROR_KEY) + err.toString());

  }

catch (  MalformedURLException e) {

    if (_debug)     e.printStackTrace();

    ErrorMsg err=new ErrorMsg(ErrorMsg.INVALID_URI_ERR,_fileName);

    System.err.println(new ErrorMsg(ErrorMsg.RUNTIME_ERROR_KEY) + err.toString());

  }

catch (  ClassNotFoundException e) {

    if (_debug)     e.printStackTrace();

    ErrorMsg err=new ErrorMsg(ErrorMsg.CLASS_NOT_FOUND_ERR,_className);

    System.err.println(new ErrorMsg(ErrorMsg.RUNTIME_ERROR_KEY) + err.toString());

  }

catch (  UnknownHostException e) {

    if (_debug)     e.printStackTrace();

    ErrorMsg err=new ErrorMsg(ErrorMsg.INVALID_URI_ERR,_fileName);

    System.err.println(new ErrorMsg(ErrorMsg.RUNTIME_ERROR_KEY) + err.toString());

  }

catch (  SAXException e) {

    Exception ex=e.getException();

    if (_debug) {

      if (ex != null)       ex.printStackTrace();

      e.printStackTrace();

    }

    System.err.print(new ErrorMsg(ErrorMsg.RUNTIME_ERROR_KEY));

    if (ex != null)     System.err.println(ex.getMessage());

 else     System.err.println(e.getMessage());

  }

catch (  Exception e) {

    if (_debug)     e.printStackTrace();

    System.err.println(new ErrorMsg(ErrorMsg.RUNTIME_ERROR_KEY) + e.getMessage());

  }

}

Location: Transform.java

Content: 

public String getFileName(){

  return _fileName;

}

Location: Transform.java

Content: 

public static void printUsage(){

  System.err.println(new ErrorMsg(ErrorMsg.TRANSFORM_USAGE_STR));

}

Location: Transform.java

Content: 

private void setJarFileInputSrc(boolean flag,String jarFile){

  _isJarFileSpecified=flag;

  _jarFileSrc=jarFile;

}

Location: Transform.java

Content: 

public void setParameters(Vector params){

  _params=params;

}

Location: Transform.java

Content: 

public Transform(String className,String fileName,boolean uri,boolean debug,int iterations){

  _fileName=fileName;

  _className=className;

  _uri=uri;

  _debug=debug;

  _iterations=iterations;

}

