Location: SQLDocument.java

Content: 

/** 

 * Pull a record from the result set and map it to a DTM based ROW If we are in Streaming mode, then only create a single row and keep copying the data into the same row. This will keep the memory footprint constint independant of the RecordSet Size. If we are not in Streaming mode then create ROWS for the whole tree.

 * @return

 */

private boolean addRowToDTMFromResultSet(){

  try {

    if (m_FirstRowIdx == DTM.NULL) {

      m_RowSetIdx=addElement(1,m_RowSet_TypeID,m_SQLIdx,m_MultipleResults ? m_RowSetIdx : m_MetaDataIdx);

      if (m_MultipleResults)       extractSQLMetaData(m_ResultSet.getMetaData());

    }

    if (!m_ResultSet.next()) {

      if (m_StreamingMode && (m_LastRowIdx != DTM.NULL)) {

        m_nextsib.setElementAt(DTM.NULL,m_LastRowIdx);

      }

      m_ResultSet.close();

      if (m_MultipleResults) {

        while (!m_Statement.getMoreResults() && m_Statement.getUpdateCount() >= 0)         ;

        m_ResultSet=m_Statement.getResultSet();

      }

 else       m_ResultSet=null;

      if (m_ResultSet != null) {

        m_FirstRowIdx=DTM.NULL;

        addRowToDTMFromResultSet();

      }

 else {

        Vector parameters=m_QueryParser.getParameters();

        if (parameters != null) {

          int outParamIdx=addElement(1,m_OutParameter_TypeID,m_SQLIdx,m_RowSetIdx);

          int lastColID=DTM.NULL;

          for (int indx=0; indx < parameters.size(); indx++) {

            QueryParameter parm=(QueryParameter)parameters.elementAt(indx);

            if (parm.isOutput()) {

              Object rawobj=((CallableStatement)m_Statement).getObject(indx + 1);

              lastColID=addElementWithData(rawobj,2,m_Col_TypeID,outParamIdx,lastColID);

              addAttributeToNode(parm.getName(),m_ColAttrib_COLUMN_NAME_TypeID,lastColID);

              addAttributeToNode(parm.getName(),m_ColAttrib_COLUMN_LABEL_TypeID,lastColID);

              addAttributeToNode(new Integer(parm.getType()),m_ColAttrib_COLUMN_TYPE_TypeID,lastColID);

              addAttributeToNode(parm.getTypeName(),m_ColAttrib_COLUMN_TYPENAME_TypeID,lastColID);

            }

          }

        }

        SQLWarning warn=checkWarnings();

        if (warn != null)         m_XConnection.setError(null,null,warn);

      }

      return false;

    }

    if (m_FirstRowIdx == DTM.NULL) {

      m_FirstRowIdx=addElement(2,m_Row_TypeID,m_RowSetIdx,m_MultipleResults ? m_MetaDataIdx : DTM.NULL);

      m_LastRowIdx=m_FirstRowIdx;

      if (m_StreamingMode) {

        m_nextsib.setElementAt(m_LastRowIdx,m_LastRowIdx);

      }

    }

 else {

      if (!m_StreamingMode) {

        m_LastRowIdx=addElement(2,m_Row_TypeID,m_RowSetIdx,m_LastRowIdx);

      }

    }

    int colID=_firstch(m_LastRowIdx);

    int pcolID=DTM.NULL;

    for (int i=1; i <= m_ColCount; i++) {

      Object o=m_ResultSet.getObject(i);

      if (colID == DTM.NULL) {

        pcolID=addElementWithData(o,3,m_Col_TypeID,m_LastRowIdx,pcolID);

        cloneAttributeFromNode(pcolID,m_ColHeadersIdx[i - 1]);

      }

 else {

        int dataIdent=_firstch(colID);

        if (dataIdent == DTM.NULL) {

          error("Streaming Mode, Data Error");

        }

 else {

          m_ObjectArray.setAt(dataIdent,o);

        }

      }

      if (colID != DTM.NULL) {

        colID=_nextsib(colID);

      }

    }

  }

 catch (  Exception e) {

    if (DEBUG) {

      System.out.println("SQL Error Fetching next row [" + e.getLocalizedMessage() + "]");

    }

    m_XConnection.setError(e,this,checkWarnings());

    m_HasErrors=true;

  }

  return true;

}

Location: SQLDocument.java

Content: 

public SQLWarning checkWarnings(){

  SQLWarning warn=null;

  if (m_Statement != null) {

    try {

      warn=m_Statement.getWarnings();

      m_Statement.clearWarnings();

    }

 catch (    SQLException se) {

    }

  }

  return (warn);

}

Location: SQLDocument.java

Content: 

/** 

 * Close down any resources used by this document. If an SQL Error occure while the document was being accessed, the SQL Connection used to create this document will be released to the Connection Pool on error. This allows the COnnection Pool to give special attention to any connection that may be in a errored state.

 */

public void close(boolean flushConnPool){

  try {

    SQLWarning warn=checkWarnings();

    if (warn != null)     m_XConnection.setError(null,null,warn);

  }

 catch (  Exception e) {

  }

  try {

    if (null != m_ResultSet) {

      m_ResultSet.close();

      m_ResultSet=null;

    }

  }

 catch (  Exception e) {

  }

  Connection conn=null;

  try {

    if (null != m_Statement) {

      conn=m_Statement.getConnection();

      m_Statement.close();

      m_Statement=null;

    }

  }

 catch (  Exception e) {

  }

  try {

    if (conn != null) {

      if (m_HasErrors)       m_ConnectionPool.releaseConnectionOnError(conn);

 else       m_ConnectionPool.releaseConnection(conn);

    }

  }

 catch (  Exception e) {

  }

  getManager().release(this,true);

}

Location: SQLDocument.java

Content: 

private void executeSQLStatement() throws SQLException {

  m_ConnectionPool=m_XConnection.getConnectionPool();

  Connection conn=m_ConnectionPool.getConnection();

  if (!m_QueryParser.hasParameters()) {

    m_Statement=conn.createStatement();

    m_ResultSet=m_Statement.executeQuery(m_QueryParser.getSQLQuery());

  }

 else   if (m_QueryParser.isCallable()) {

    CallableStatement cstmt=conn.prepareCall(m_QueryParser.getSQLQuery());

    m_QueryParser.registerOutputParameters(cstmt);

    m_QueryParser.populateStatement(cstmt,m_ExpressionContext);

    m_Statement=cstmt;

    if (!cstmt.execute())     throw new SQLException("Error in Callable Statement");

    m_ResultSet=m_Statement.getResultSet();

  }

 else {

    PreparedStatement stmt=conn.prepareStatement(m_QueryParser.getSQLQuery());

    m_QueryParser.populateStatement(stmt,m_ExpressionContext);

    m_Statement=stmt;

    m_ResultSet=stmt.executeQuery();

  }

}

Location: SQLDocument.java

Content: 

public void execute(XConnection xconn,SQLQueryParser query) throws SQLException {

  try {

    m_StreamingMode="true".equals(xconn.getFeature("streaming"));

    m_MultipleResults="true".equals(xconn.getFeature("multiple-results"));

    m_IsStatementCachingEnabled="true".equals(xconn.getFeature("cache-statements"));

    m_XConnection=xconn;

    m_QueryParser=query;

    executeSQLStatement();

    createExpandedNameTable();

    m_DocumentIdx=addElement(0,m_Document_TypeID,DTM.NULL,DTM.NULL);

    m_SQLIdx=addElement(1,m_SQL_TypeID,m_DocumentIdx,DTM.NULL);

    if (!m_MultipleResults)     extractSQLMetaData(m_ResultSet.getMetaData());

  }

 catch (  SQLException e) {

    m_HasErrors=true;

    throw e;

  }

}

Location: SQLDocument.java

Content: 

/** 

 * Extract the Meta Data and build the Column Attribute List.

 * @param meta

 * @return

 */

private void extractSQLMetaData(ResultSetMetaData meta){

  m_MetaDataIdx=addElement(1,m_MetaData_TypeID,m_MultipleResults ? m_RowSetIdx : m_SQLIdx,DTM.NULL);

  try {

    m_ColCount=meta.getColumnCount();

    m_ColHeadersIdx=new int[m_ColCount];

  }

 catch (  Exception e) {

    m_XConnection.setError(e,this,checkWarnings());

  }

  int lastColHeaderIdx=DTM.NULL;

  int i=1;

  for (i=1; i <= m_ColCount; i++) {

    m_ColHeadersIdx[i - 1]=addElement(2,m_ColumnHeader_TypeID,m_MetaDataIdx,lastColHeaderIdx);

    lastColHeaderIdx=m_ColHeadersIdx[i - 1];

    try {

      addAttributeToNode(meta.getColumnName(i),m_ColAttrib_COLUMN_NAME_TypeID,lastColHeaderIdx);

    }

 catch (    Exception e) {

      addAttributeToNode(S_ATTRIB_NOT_SUPPORTED,m_ColAttrib_COLUMN_NAME_TypeID,lastColHeaderIdx);

    }

    try {

      addAttributeToNode(meta.getColumnLabel(i),m_ColAttrib_COLUMN_LABEL_TypeID,lastColHeaderIdx);

    }

 catch (    Exception e) {

      addAttributeToNode(S_ATTRIB_NOT_SUPPORTED,m_ColAttrib_COLUMN_LABEL_TypeID,lastColHeaderIdx);

    }

    try {

      addAttributeToNode(meta.getCatalogName(i),m_ColAttrib_CATALOGUE_NAME_TypeID,lastColHeaderIdx);

    }

 catch (    Exception e) {

      addAttributeToNode(S_ATTRIB_NOT_SUPPORTED,m_ColAttrib_CATALOGUE_NAME_TypeID,lastColHeaderIdx);

    }

    try {

      addAttributeToNode(new Integer(meta.getColumnDisplaySize(i)),m_ColAttrib_DISPLAY_SIZE_TypeID,lastColHeaderIdx);

    }

 catch (    Exception e) {

      addAttributeToNode(S_ATTRIB_NOT_SUPPORTED,m_ColAttrib_DISPLAY_SIZE_TypeID,lastColHeaderIdx);

    }

    try {

      addAttributeToNode(new Integer(meta.getColumnType(i)),m_ColAttrib_COLUMN_TYPE_TypeID,lastColHeaderIdx);

    }

 catch (    Exception e) {

      addAttributeToNode(S_ATTRIB_NOT_SUPPORTED,m_ColAttrib_COLUMN_TYPE_TypeID,lastColHeaderIdx);

    }

    try {

      addAttributeToNode(meta.getColumnTypeName(i),m_ColAttrib_COLUMN_TYPENAME_TypeID,lastColHeaderIdx);

    }

 catch (    Exception e) {

      addAttributeToNode(S_ATTRIB_NOT_SUPPORTED,m_ColAttrib_COLUMN_TYPENAME_TypeID,lastColHeaderIdx);

    }

    try {

      addAttributeToNode(new Integer(meta.getPrecision(i)),m_ColAttrib_PRECISION_TypeID,lastColHeaderIdx);

    }

 catch (    Exception e) {

      addAttributeToNode(S_ATTRIB_NOT_SUPPORTED,m_ColAttrib_PRECISION_TypeID,lastColHeaderIdx);

    }

    try {

      addAttributeToNode(new Integer(meta.getScale(i)),m_ColAttrib_SCALE_TypeID,lastColHeaderIdx);

    }

 catch (    Exception e) {

      addAttributeToNode(S_ATTRIB_NOT_SUPPORTED,m_ColAttrib_SCALE_TypeID,lastColHeaderIdx);

    }

    try {

      addAttributeToNode(meta.getSchemaName(i),m_ColAttrib_SCHEMA_NAME_TypeID,lastColHeaderIdx);

    }

 catch (    Exception e) {

      addAttributeToNode(S_ATTRIB_NOT_SUPPORTED,m_ColAttrib_SCHEMA_NAME_TypeID,lastColHeaderIdx);

    }

    try {

      addAttributeToNode(meta.getTableName(i),m_ColAttrib_TABLE_NAME_TypeID,lastColHeaderIdx);

    }

 catch (    Exception e) {

      addAttributeToNode(S_ATTRIB_NOT_SUPPORTED,m_ColAttrib_TABLE_NAME_TypeID,lastColHeaderIdx);

    }

    try {

      addAttributeToNode(meta.isCaseSensitive(i) ? S_ISTRUE : S_ISFALSE,m_ColAttrib_CASESENSITIVE_TypeID,lastColHeaderIdx);

    }

 catch (    Exception e) {

      addAttributeToNode(S_ATTRIB_NOT_SUPPORTED,m_ColAttrib_CASESENSITIVE_TypeID,lastColHeaderIdx);

    }

    try {

      addAttributeToNode(meta.isDefinitelyWritable(i) ? S_ISTRUE : S_ISFALSE,m_ColAttrib_DEFINITELYWRITEABLE_TypeID,lastColHeaderIdx);

    }

 catch (    Exception e) {

      addAttributeToNode(S_ATTRIB_NOT_SUPPORTED,m_ColAttrib_DEFINITELYWRITEABLE_TypeID,lastColHeaderIdx);

    }

    try {

      addAttributeToNode(meta.isNullable(i) != 0 ? S_ISTRUE : S_ISFALSE,m_ColAttrib_ISNULLABLE_TypeID,lastColHeaderIdx);

    }

 catch (    Exception e) {

      addAttributeToNode(S_ATTRIB_NOT_SUPPORTED,m_ColAttrib_ISNULLABLE_TypeID,lastColHeaderIdx);

    }

    try {

      addAttributeToNode(meta.isSigned(i) ? S_ISTRUE : S_ISFALSE,m_ColAttrib_ISSIGNED_TypeID,lastColHeaderIdx);

    }

 catch (    Exception e) {

      addAttributeToNode(S_ATTRIB_NOT_SUPPORTED,m_ColAttrib_ISSIGNED_TypeID,lastColHeaderIdx);

    }

    try {

      addAttributeToNode(meta.isWritable(i) == true ? S_ISTRUE : S_ISFALSE,m_ColAttrib_ISWRITEABLE_TypeID,lastColHeaderIdx);

    }

 catch (    Exception e) {

      addAttributeToNode(S_ATTRIB_NOT_SUPPORTED,m_ColAttrib_ISWRITEABLE_TypeID,lastColHeaderIdx);

    }

    try {

      addAttributeToNode(meta.isSearchable(i) == true ? S_ISTRUE : S_ISFALSE,m_ColAttrib_ISSEARCHABLE_TypeID,lastColHeaderIdx);

    }

 catch (    Exception e) {

      addAttributeToNode(S_ATTRIB_NOT_SUPPORTED,m_ColAttrib_ISSEARCHABLE_TypeID,lastColHeaderIdx);

    }

  }

}

Location: SQLDocument.java

Content: 

/** 

 * This static method simplifies the creation of an SQL Document and allows us to embedd the complexity of creating / handling the dtmIdent inside the document. This type of method may better placed inside the DTMDocument code

 */

public static SQLDocument getNewDocument(ExpressionContext exprContext){

  DTMManager mgr=((XPathContext.XPathExpressionContext)exprContext).getDTMManager();

  DTMManagerDefault mgrDefault=(DTMManagerDefault)mgr;

  int dtmIdent=mgrDefault.getFirstFreeDTMID();

  SQLDocument doc=new SQLDocument(mgr,dtmIdent << DTMManager.IDENT_DTM_NODE_BITS);

  mgrDefault.addDTM(doc,dtmIdent);

  doc.setExpressionContext(exprContext);

  return doc;

}

Location: SQLDocument.java

Content: 

/** 

 * Used by the XConnection to determine if the Document should handle the document differently.

 */

public boolean hasErrors(){

  return m_HasErrors;

}

Location: SQLDocument.java

Content: 

/** 

 * When building the SQL Document, we need to store the Expression Context that was used to create the document. This will be se to reference items int he XSLT process such as any variables that were present.

 */

protected void setExpressionContext(ExpressionContext expr){

  m_ExpressionContext=expr;

}

Location: SQLDocument.java

Content: 

/** 

 * Push the record set forward value rows. Used to help in SQL pagination.

 * @param value

 */

public void skip(int value){

  try {

    if (m_ResultSet != null)     m_ResultSet.relative(value);

  }

 catch (  Exception origEx) {

    try {

      for (int x=0; x < value; x++) {

        if (!m_ResultSet.next())         break;

      }

    }

 catch (    Exception e) {

      m_XConnection.setError(origEx,this,checkWarnings());

      m_XConnection.setError(e,this,checkWarnings());

    }

  }

}

Location: SQLDocument.java

Content: 

/** 

 * @param mgr

 * @param ident

 * @throws SQLException

 */

public SQLDocument(DTMManager mgr,int ident){

  super(mgr,ident);

}

