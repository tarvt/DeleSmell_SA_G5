Location: CurrentNodeListIterator.java

Content: 

private int computePositionOfLast(){

  final int last=_nodes.cardinality();

  final int currNode=_currentNode;

  final AbstractTranslet translet=_translet;

  int lastPosition=_position;

  for (int index=_currentIndex; index < last; ) {

    final int position=_docOrder ? index + 1 : last - index;

    int nodeIndex=_nodes.at(index++);

    if (_filter.test(nodeIndex,position,last,currNode,translet,this)) {

      lastPosition++;

    }

  }

  return lastPosition;

}

Location: CurrentNodeListIterator.java

Content: 

public CurrentNodeListIterator(DTMAxisIterator source,boolean docOrder,CurrentNodeListFilter filter,int currentNode,AbstractTranslet translet){

  _source=source;

  _filter=filter;

  _translet=translet;

  _docOrder=docOrder;

  _currentNode=currentNode;

}

Location: CurrentNodeListIterator.java

Content: 

public CurrentNodeListIterator(DTMAxisIterator source,CurrentNodeListFilter filter,int currentNode,AbstractTranslet translet){

  this(source,!source.isReverse(),filter,currentNode,translet);

}

Location: CurrentNodeListIterator.java

Content: 

public DTMAxisIterator forceNaturalOrder(){

  _docOrder=true;

  return this;

}

