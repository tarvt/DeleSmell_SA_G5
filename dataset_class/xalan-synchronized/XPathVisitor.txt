Location: XPathVisitor.java

Content: 

/** 

 * Visit a binary operation.

 * @param owner The owner of the expression, to which the expression can bereset if rewriting takes place.

 * @param op    The operation object.

 * @return true if the sub expressions should be traversed.

 */

public boolean visitBinaryOperation(ExpressionOwner owner,Operation op){

  return true;

}

Location: XPathVisitor.java

Content: 

/** 

 * Visit a LocationPath.

 * @param owner The owner of the expression, to which the expression can bereset if rewriting takes place.

 * @param path  The LocationPath object.

 * @return true if the sub expressions should be traversed.

 */

public boolean visitLocationPath(ExpressionOwner owner,LocPathIterator path){

  return true;

}

Location: XPathVisitor.java

Content: 

/** 

 * Visit a match pattern.

 * @param owner   The owner of the expression, to which the expression can bereset if rewriting takes place.

 * @param pattern The match pattern object.

 * @return true if the sub expressions should be traversed.

 */

public boolean visitMatchPattern(ExpressionOwner owner,StepPattern pattern){

  return true;

}

Location: XPathVisitor.java

Content: 

/** 

 * Visit a number literal.

 * @param owner The owner of the expression, to which the expression can bereset if rewriting takes place.

 * @param num   The number literal object.

 * @return true if the sub expressions should be traversed.

 */

public boolean visitNumberLiteral(ExpressionOwner owner,XNumber num){

  return true;

}

Location: XPathVisitor.java

Content: 

/** 

 * Visit a step within a location path.

 * @param owner The owner of the expression, to which the expression can bereset if rewriting takes place.

 * @param step  The Step object.

 * @return true if the sub expressions should be traversed.

 */

public boolean visitStep(ExpressionOwner owner,NodeTest step){

  return true;

}

Location: XPathVisitor.java

Content: 

/** 

 * Visit a string literal.

 * @param owner The owner of the expression, to which the expression can bereset if rewriting takes place.

 * @param str   The string literal object.

 * @return true if the sub expressions should be traversed.

 */

public boolean visitStringLiteral(ExpressionOwner owner,XString str){

  return true;

}

Location: XPathVisitor.java

Content: 

/** 

 * Visit a unary operation.

 * @param owner The owner of the expression, to which the expression can bereset if rewriting takes place.

 * @param op    The operation object.

 * @return true if the sub expressions should be traversed.

 */

public boolean visitUnaryOperation(ExpressionOwner owner,UnaryOperation op){

  return true;

}

Location: XPathVisitor.java

Content: 

/** 

 * Visit a UnionPath.

 * @param owner The owner of the expression, to which the expression can bereset if rewriting takes place.

 * @param path  The UnionPath object.

 * @return true if the sub expressions should be traversed.

 */

public boolean visitUnionPath(ExpressionOwner owner,UnionPathIterator path){

  return true;

}

Location: XPathVisitor.java

Content: 

/** 

 * Visit a union pattern.

 * @param owner   The owner of the expression, to which the expression can bereset if rewriting takes place.

 * @param pattern The union pattern object.

 * @return true if the sub expressions should be traversed.

 */

public boolean visitUnionPattern(ExpressionOwner owner,UnionPattern pattern){

  return true;

}

Location: XPathVisitor.java

Content: 

/** 

 * Visit a variable reference.

 * @param owner The owner of the expression, to which the expression can bereset if rewriting takes place.

 * @param var   The variable reference object.

 * @return true if the sub expressions should be traversed.

 */

public boolean visitVariableRef(ExpressionOwner owner,Variable var){

  return true;

}

