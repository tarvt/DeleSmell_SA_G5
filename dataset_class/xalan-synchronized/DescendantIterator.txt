Location: DescendantIterator.java

Content: 

/** 

 * Get a cloned Iterator that is reset to the beginning of the query.

 * @return A cloned NodeIterator set of the start of the query.

 * @throws CloneNotSupportedException

 */

public DTMIterator cloneWithReset() throws CloneNotSupportedException {

  DescendantIterator clone=(DescendantIterator)super.cloneWithReset();

  clone.m_traverser=m_traverser;

  clone.resetProximityPositions();

  return clone;

}

Location: DescendantIterator.java

Content: 

/** 

 * Create a DescendantIterator object.

 */

public DescendantIterator(){

  super(null);

  m_axis=Axis.DESCENDANTSORSELFFROMROOT;

  int whatToShow=DTMFilter.SHOW_ALL;

  initNodeTest(whatToShow);

}

Location: DescendantIterator.java

Content: 

/** 

 * Create a DescendantIterator object.

 * @param compiler A reference to the Compiler that contains the op map.

 * @param opPos    The position within the op map, which contains the locationpath expression for this itterator.

 * @throws javax.xml.transform.TransformerException

 */

DescendantIterator(Compiler compiler,int opPos,int analysis) throws javax.xml.transform.TransformerException {

  super(compiler,opPos,analysis,false);

  int firstStepPos=OpMap.getFirstChildPos(opPos);

  int stepType=compiler.getOp(firstStepPos);

  boolean orSelf=(OpCodes.FROM_DESCENDANTS_OR_SELF == stepType);

  boolean fromRoot=false;

  if (OpCodes.FROM_SELF == stepType) {

    orSelf=true;

  }

 else   if (OpCodes.FROM_ROOT == stepType) {

    fromRoot=true;

    int nextStepPos=compiler.getNextStepPos(firstStepPos);

    if (compiler.getOp(nextStepPos) == OpCodes.FROM_DESCENDANTS_OR_SELF)     orSelf=true;

  }

  int nextStepPos=firstStepPos;

  while (true) {

    nextStepPos=compiler.getNextStepPos(nextStepPos);

    if (nextStepPos > 0) {

      int stepOp=compiler.getOp(nextStepPos);

      if (OpCodes.ENDOP != stepOp)       firstStepPos=nextStepPos;

 else       break;

    }

 else     break;

  }

  if ((analysis & WalkerFactory.BIT_CHILD) != 0)   orSelf=false;

  if (fromRoot) {

    if (orSelf)     m_axis=Axis.DESCENDANTSORSELFFROMROOT;

 else     m_axis=Axis.DESCENDANTSFROMROOT;

  }

 else   if (orSelf)   m_axis=Axis.DESCENDANTORSELF;

 else   m_axis=Axis.DESCENDANT;

  int whatToShow=compiler.getWhatToShow(firstStepPos);

  if ((0 == (whatToShow & (DTMFilter.SHOW_ATTRIBUTE | DTMFilter.SHOW_ELEMENT | DTMFilter.SHOW_PROCESSING_INSTRUCTION))) || (whatToShow == DTMFilter.SHOW_ALL))   initNodeTest(whatToShow);

 else {

    initNodeTest(whatToShow,compiler.getStepNS(firstStepPos),compiler.getStepLocalName(firstStepPos));

  }

  initPredicateInfo(compiler,firstStepPos);

}

Location: DescendantIterator.java

Content: 

/** 

 * Initialize the context values for this expression after it is cloned.

 * @param context The XPath runtime context for this transformation.

 */

public void setRoot(int context,Object environment){

  super.setRoot(context,environment);

  m_traverser=m_cdtm.getAxisTraverser(m_axis);

  String localName=getLocalName();

  String namespace=getNamespace();

  int what=m_whatToShow;

  if (DTMFilter.SHOW_ALL == what || NodeTest.WILD.equals(localName) || NodeTest.WILD.equals(namespace)) {

    m_extendedTypeID=0;

  }

 else {

    int type=getNodeTypeTest(what);

    m_extendedTypeID=m_cdtm.getExpandedTypeID(namespace,localName,type);

  }

}

