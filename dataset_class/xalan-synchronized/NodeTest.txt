Location: NodeTest.java

Content: 

/** 

 * Do a diagnostics dump of a whatToShow bit set.

 * @param whatToShow Bit set defined mainly by{@link org.apache.xml.dtm.DTMFilter}.

 */

public static void debugWhatToShow(int whatToShow){

  java.util.Vector v=new java.util.Vector();

  if (0 != (whatToShow & DTMFilter.SHOW_ATTRIBUTE))   v.addElement("SHOW_ATTRIBUTE");

  if (0 != (whatToShow & DTMFilter.SHOW_NAMESPACE))   v.addElement("SHOW_NAMESPACE");

  if (0 != (whatToShow & DTMFilter.SHOW_CDATA_SECTION))   v.addElement("SHOW_CDATA_SECTION");

  if (0 != (whatToShow & DTMFilter.SHOW_COMMENT))   v.addElement("SHOW_COMMENT");

  if (0 != (whatToShow & DTMFilter.SHOW_DOCUMENT))   v.addElement("SHOW_DOCUMENT");

  if (0 != (whatToShow & DTMFilter.SHOW_DOCUMENT_FRAGMENT))   v.addElement("SHOW_DOCUMENT_FRAGMENT");

  if (0 != (whatToShow & DTMFilter.SHOW_DOCUMENT_TYPE))   v.addElement("SHOW_DOCUMENT_TYPE");

  if (0 != (whatToShow & DTMFilter.SHOW_ELEMENT))   v.addElement("SHOW_ELEMENT");

  if (0 != (whatToShow & DTMFilter.SHOW_ENTITY))   v.addElement("SHOW_ENTITY");

  if (0 != (whatToShow & DTMFilter.SHOW_ENTITY_REFERENCE))   v.addElement("SHOW_ENTITY_REFERENCE");

  if (0 != (whatToShow & DTMFilter.SHOW_NOTATION))   v.addElement("SHOW_NOTATION");

  if (0 != (whatToShow & DTMFilter.SHOW_PROCESSING_INSTRUCTION))   v.addElement("SHOW_PROCESSING_INSTRUCTION");

  if (0 != (whatToShow & DTMFilter.SHOW_TEXT))   v.addElement("SHOW_TEXT");

  int n=v.size();

  for (int i=0; i < n; i++) {

    if (i > 0)     System.out.print(" | ");

    System.out.print(v.elementAt(i));

  }

  if (0 == n)   System.out.print("empty whatToShow: " + whatToShow);

  System.out.println();

}

Location: NodeTest.java

Content: 

/** 

 * Get the score that this test will return if a test succeeds.

 * @return the score that this test will return if a test succeeds.

 */

public double getDefaultScore(){

  return m_score.num();

}

Location: NodeTest.java

Content: 

/** 

 * Return the local name to be tested.

 * @return the local name to be tested, or {@link #WILD}, or an empty string.

 */

public String getLocalName(){

  return (null == m_name) ? "" : m_name;

}

Location: NodeTest.java

Content: 

/** 

 * Return the namespace to be tested.

 * @return The namespace to be tested for, or {@link #WILD}, or null.

 */

public String getNamespace(){

  return m_namespace;

}

Location: NodeTest.java

Content: 

/** 

 * Tell what node type to test, if not DTMFilter.SHOW_ALL.

 * @param whatToShow Bit set defined mainly by{@link org.apache.xml.dtm.DTMFilter}.

 * @return the node type for the whatToShow. Since whatToShow can specifymultiple types, it will return the first bit tested that is on, so the caller of this function should take care that this is the function they really want to call. If none of the known bits are set, this function will return zero.

 */

public static int getNodeTypeTest(int whatToShow){

  if (0 != (whatToShow & DTMFilter.SHOW_ELEMENT))   return DTM.ELEMENT_NODE;

  if (0 != (whatToShow & DTMFilter.SHOW_ATTRIBUTE))   return DTM.ATTRIBUTE_NODE;

  if (0 != (whatToShow & DTMFilter.SHOW_TEXT))   return DTM.TEXT_NODE;

  if (0 != (whatToShow & DTMFilter.SHOW_DOCUMENT))   return DTM.DOCUMENT_NODE;

  if (0 != (whatToShow & DTMFilter.SHOW_DOCUMENT_FRAGMENT))   return DTM.DOCUMENT_FRAGMENT_NODE;

  if (0 != (whatToShow & DTMFilter.SHOW_NAMESPACE))   return DTM.NAMESPACE_NODE;

  if (0 != (whatToShow & DTMFilter.SHOW_COMMENT))   return DTM.COMMENT_NODE;

  if (0 != (whatToShow & DTMFilter.SHOW_PROCESSING_INSTRUCTION))   return DTM.PROCESSING_INSTRUCTION_NODE;

  if (0 != (whatToShow & DTMFilter.SHOW_DOCUMENT_TYPE))   return DTM.DOCUMENT_TYPE_NODE;

  if (0 != (whatToShow & DTMFilter.SHOW_ENTITY))   return DTM.ENTITY_NODE;

  if (0 != (whatToShow & DTMFilter.SHOW_ENTITY_REFERENCE))   return DTM.ENTITY_REFERENCE_NODE;

  if (0 != (whatToShow & DTMFilter.SHOW_NOTATION))   return DTM.NOTATION_NODE;

  if (0 != (whatToShow & DTMFilter.SHOW_CDATA_SECTION))   return DTM.CDATA_SECTION_NODE;

  return 0;

}

Location: NodeTest.java

Content: 

/** 

 * Get the static score for this node test.

 * @return Should be one of the SCORE_XXX constants.

 */

public XNumber getStaticScore(){

  return m_score;

}

Location: NodeTest.java

Content: 

/** 

 * This attribute determines which node types are accepted. These constants are defined in the  {@link org.w3c.dom.traversal.NodeFilter} interface.

 * @return bitset mainly defined in {@link org.w3c.dom.traversal.NodeFilter}.

 */

public int getWhatToShow(){

  return m_whatToShow;

}

Location: NodeTest.java

Content: 

/** 

 * Initialize this node test by setting the whatToShow property, and calculating the score that this test will return if a test succeeds.

 * @param whatToShow Bit set defined mainly by{@link org.w3c.dom.traversal.NodeFilter}.

 */

public void initNodeTest(int whatToShow){

  m_whatToShow=whatToShow;

  calcScore();

}

Location: NodeTest.java

Content: 

/** 

 * Initialize this node test by setting the whatToShow property and the namespace and local name, and calculating the score that this test will return if a test succeeds.

 * @param whatToShow Bit set defined mainly by{@link org.w3c.dom.traversal.NodeFilter}.

 * @param namespace  The namespace to be tested.

 * @param name       The local name to be tested.

 */

public void initNodeTest(int whatToShow,String namespace,String name){

  m_whatToShow=whatToShow;

  m_namespace=namespace;

  m_name=name;

  calcScore();

}

Location: NodeTest.java

Content: 

/** 

 * Null argument constructor.

 */

public NodeTest(){

}

Location: NodeTest.java

Content: 

/** 

 * Construct an NodeTest that doesn't test for node names.

 * @param whatToShow Bit set defined mainly by{@link org.w3c.dom.traversal.NodeFilter}.

 */

public NodeTest(int whatToShow){

  initNodeTest(whatToShow);

}

Location: NodeTest.java

Content: 

/** 

 * Construct an NodeTest that tests for namespaces and node names.

 * @param whatToShow Bit set defined mainly by{@link org.w3c.dom.traversal.NodeFilter}.

 * @param namespace  The namespace to be tested.

 * @param name       The local name to be tested.

 */

public NodeTest(int whatToShow,String namespace,String name){

  initNodeTest(whatToShow,namespace,name);

}

Location: NodeTest.java

Content: 

/** 

 * Set the local name to be tested.

 * @param name the local name to be tested, or {@link #WILD}, or an empty string.

 */

public void setLocalName(String name){

  m_name=name;

}

Location: NodeTest.java

Content: 

/** 

 * Set the namespace to be tested.

 * @param ns The namespace to be tested for, or {@link #WILD}, or null.

 */

public void setNamespace(String ns){

  m_namespace=ns;

}

Location: NodeTest.java

Content: 

/** 

 * Set the static score for this node test.

 * @param score Should be one of the SCORE_XXX constants.

 */

public void setStaticScore(XNumber score){

  m_score=score;

}

Location: NodeTest.java

Content: 

/** 

 * This attribute determines which node types are accepted. These constants are defined in the  {@link org.w3c.dom.traversal.NodeFilter} interface.

 * @param what bitset mainly defined in{@link org.w3c.dom.traversal.NodeFilter}.

 */

public void setWhatToShow(int what){

  m_whatToShow=what;

}

Location: NodeTest.java

Content: 

/** 

 * This is temporary to patch over Xerces issue with representing DOM namespaces as "".

 * @param p part string from the node, which may represent the null namespace asnull or as "".

 * @param t target string, which may be {@link #WILD}.

 * @return true if the strings match according to the rules of this method.

 */

private static final boolean subPartMatchNS(String p,String t){

  return (p == t) || ((null != p) && ((p.length() > 0) ? ((t == WILD) || p.equals(t)) : null == t));

}

Location: NodeTest.java

Content: 

/** 

 * Two names are equal if they and either both are null or the name t is wild and the name p is non-null, or the two strings are equal.

 * @param p part string from the node.

 * @param t target string, which may be {@link #WILD}.

 * @return true if the strings match according to the rules of this method.

 */

private static final boolean subPartMatch(String p,String t){

  return (p == t) || ((null != p) && ((t == WILD) || p.equals(t)));

}

