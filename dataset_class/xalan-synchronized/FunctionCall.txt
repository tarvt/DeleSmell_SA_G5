Location: FunctionCall.java

Content: 

protected final int argumentCount(){

  return _arguments.size();

}

Location: FunctionCall.java

Content: 

protected final Expression argument(int i){

  return (Expression)_arguments.elementAt(i);

}

Location: FunctionCall.java

Content: 

/** 

 * Returns a vector with all constructors named <code>_fname</code> after stripping its namespace or <code>null</code> if no such methods exist.

 */

private Vector findConstructors(){

  Vector result=null;

  final String namespace=_fname.getNamespace();

  final int nArgs=_arguments.size();

  try {

    if (_clazz == null) {

      _clazz=ObjectFactory.findProviderClass(_className,ObjectFactory.findClassLoader(),true);

      if (_clazz == null) {

        final ErrorMsg msg=new ErrorMsg(ErrorMsg.CLASS_NOT_FOUND_ERR,_className);

        getParser().reportError(Constants.ERROR,msg);

      }

    }

    final Constructor[] constructors=_clazz.getConstructors();

    for (int i=0; i < constructors.length; i++) {

      final int mods=constructors[i].getModifiers();

      if (Modifier.isPublic(mods) && constructors[i].getParameterTypes().length == nArgs) {

        if (result == null) {

          result=new Vector();

        }

        result.addElement(constructors[i]);

      }

    }

  }

 catch (  ClassNotFoundException e) {

    final ErrorMsg msg=new ErrorMsg(ErrorMsg.CLASS_NOT_FOUND_ERR,_className);

    getParser().reportError(Constants.ERROR,msg);

  }

  return result;

}

Location: FunctionCall.java

Content: 

/** 

 * Returns a vector with all methods named <code>_fname</code> after stripping its namespace or <code>null</code> if no such methods exist.

 */

private Vector findMethods(){

  Vector result=null;

  final String namespace=_fname.getNamespace();

  if (_className != null && _className.length() > 0) {

    final int nArgs=_arguments.size();

    try {

      if (_clazz == null) {

        _clazz=ObjectFactory.findProviderClass(_className,ObjectFactory.findClassLoader(),true);

        if (_clazz == null) {

          final ErrorMsg msg=new ErrorMsg(ErrorMsg.CLASS_NOT_FOUND_ERR,_className);

          getParser().reportError(Constants.ERROR,msg);

        }

      }

      final String methodName=_fname.getLocalPart();

      final Method[] methods=_clazz.getMethods();

      for (int i=0; i < methods.length; i++) {

        final int mods=methods[i].getModifiers();

        if (Modifier.isPublic(mods) && methods[i].getName().equals(methodName) && methods[i].getParameterTypes().length == nArgs) {

          if (result == null) {

            result=new Vector();

          }

          result.addElement(methods[i]);

        }

      }

    }

 catch (    ClassNotFoundException e) {

      final ErrorMsg msg=new ErrorMsg(ErrorMsg.CLASS_NOT_FOUND_ERR,_className);

      getParser().reportError(Constants.ERROR,msg);

    }

  }

  return result;

}

Location: FunctionCall.java

Content: 

public FunctionCall(QName fname){

  this(fname,EMPTY_ARG_LIST);

}

Location: FunctionCall.java

Content: 

public FunctionCall(QName fname,Vector arguments){

  _fname=fname;

  _arguments=arguments;

  _type=null;

}

Location: FunctionCall.java

Content: 

public String getClassNameFromUri(String uri){

  String className=(String)_extensionNamespaceTable.get(uri);

  if (className != null)   return className;

 else {

    if (uri.startsWith(JAVA_EXT_XSLTC)) {

      int length=JAVA_EXT_XSLTC.length() + 1;

      return (uri.length() > length) ? uri.substring(length) : EMPTYSTRING;

    }

 else     if (uri.startsWith(JAVA_EXT_XALAN)) {

      int length=JAVA_EXT_XALAN.length() + 1;

      return (uri.length() > length) ? uri.substring(length) : EMPTYSTRING;

    }

 else     if (uri.startsWith(JAVA_EXT_XALAN_OLD)) {

      int length=JAVA_EXT_XALAN_OLD.length() + 1;

      return (uri.length() > length) ? uri.substring(length) : EMPTYSTRING;

    }

 else {

      int index=uri.lastIndexOf('/');

      return (index > 0) ? uri.substring(index + 1) : uri;

    }

  }

}

Location: FunctionCall.java

Content: 

/** 

 * Return the signature of the current method

 */

private String getMethodSignature(Vector argsType){

  final StringBuffer buf=new StringBuffer(_className);

  buf.append('.').append(_fname.getLocalPart()).append('(');

  int nArgs=argsType.size();

  for (int i=0; i < nArgs; i++) {

    final Type intType=(Type)argsType.elementAt(i);

    buf.append(intType.toString());

    if (i < nArgs - 1)     buf.append(", ");

  }

  buf.append(')');

  return buf.toString();

}

Location: FunctionCall.java

Content: 

/** 

 * Compute the JVM signature for the class.

 */

static final String getSignature(Class clazz){

  if (clazz.isArray()) {

    final StringBuffer sb=new StringBuffer();

    Class cl=clazz;

    while (cl.isArray()) {

      sb.append("[");

      cl=cl.getComponentType();

    }

    sb.append(getSignature(cl));

    return sb.toString();

  }

 else   if (clazz.isPrimitive()) {

    if (clazz == Integer.TYPE) {

      return "I";

    }

 else     if (clazz == Byte.TYPE) {

      return "B";

    }

 else     if (clazz == Long.TYPE) {

      return "J";

    }

 else     if (clazz == Float.TYPE) {

      return "F";

    }

 else     if (clazz == Double.TYPE) {

      return "D";

    }

 else     if (clazz == Short.TYPE) {

      return "S";

    }

 else     if (clazz == Character.TYPE) {

      return "C";

    }

 else     if (clazz == Boolean.TYPE) {

      return "Z";

    }

 else     if (clazz == Void.TYPE) {

      return "V";

    }

 else {

      final String name=clazz.toString();

      ErrorMsg err=new ErrorMsg(ErrorMsg.UNKNOWN_SIG_TYPE_ERR,name);

      throw new Error(err.toString());

    }

  }

 else {

    return "L" + clazz.getName().replace('.','/') + ';';

  }

}

Location: FunctionCall.java

Content: 

/** 

 * Compute the JVM constructor descriptor for the constructor.

 */

static final String getSignature(Constructor cons){

  final StringBuffer sb=new StringBuffer();

  sb.append('(');

  final Class[] params=cons.getParameterTypes();

  for (int j=0; j < params.length; j++) {

    sb.append(getSignature(params[j]));

  }

  return sb.append(")V").toString();

}

Location: FunctionCall.java

Content: 

/** 

 * Compute the JVM method descriptor for the method.

 */

static final String getSignature(Method meth){

  final StringBuffer sb=new StringBuffer();

  sb.append('(');

  final Class[] params=meth.getParameterTypes();

  for (int j=0; j < params.length; j++) {

    sb.append(getSignature(params[j]));

  }

  return sb.append(')').append(getSignature(meth.getReturnType())).toString();

}

Location: FunctionCall.java

Content: 

public boolean isExtension(){

  final String namespace=_fname.getNamespace();

  return (namespace != null) && (namespace.equals(EXT_XSLTC));

}

Location: FunctionCall.java

Content: 

public boolean isStandard(){

  final String namespace=_fname.getNamespace();

  return (namespace == null) || (namespace.equals(Constants.EMPTYSTRING));

}

Location: FunctionCall.java

Content: 

/** 

 * To support EXSLT extensions, convert names with dash to allowable Java names: e.g., convert abc-xyz to abcXyz. Note: dashes only appear in middle of an EXSLT function or element name.

 */

protected static String replaceDash(String name){

  char dash='-';

  StringBuffer buff=new StringBuffer("");

  for (int i=0; i < name.length(); i++) {

    if (i > 0 && name.charAt(i - 1) == dash)     buff.append(Character.toUpperCase(name.charAt(i)));

 else     if (name.charAt(i) != dash)     buff.append(name.charAt(i));

  }

  return buff.toString();

}

Location: FunctionCall.java

Content: 

protected final void setArgument(int i,Expression exp){

  _arguments.setElementAt(exp,i);

}

Location: FunctionCall.java

Content: 

/** 

 * Translate code to call the BasisLibrary.unallowed_extensionF(String) method.

 */

private void translateUnallowedExtension(ConstantPoolGen cpg,InstructionList il){

  int index=cpg.addMethodref(BASIS_LIBRARY_CLASS,"unallowed_extension_functionF","(Ljava/lang/String;)V");

  il.append(new PUSH(cpg,_fname.toString()));

  il.append(new INVOKESTATIC(index));

}

Location: FunctionCall.java

Content: 

/** 

 * Type check the actual arguments of this function call.

 */

public Vector typeCheckArgs(SymbolTable stable) throws TypeCheckError {

  final Vector result=new Vector();

  final Enumeration e=_arguments.elements();

  while (e.hasMoreElements()) {

    final Expression exp=(Expression)e.nextElement();

    result.addElement(exp.typeCheck(stable));

  }

  return result;

}

Location: FunctionCall.java

Content: 

public Type typeCheckConstructor(SymbolTable stable) throws TypeCheckError {

  final Vector constructors=findConstructors();

  if (constructors == null) {

    throw new TypeCheckError(ErrorMsg.CONSTRUCTOR_NOT_FOUND,_className);

  }

  final int nConstructors=constructors.size();

  final int nArgs=_arguments.size();

  final Vector argsType=typeCheckArgs(stable);

  int bestConstrDistance=Integer.MAX_VALUE;

  _type=null;

  for (int j, i=0; i < nConstructors; i++) {

    final Constructor constructor=(Constructor)constructors.elementAt(i);

    final Class[] paramTypes=constructor.getParameterTypes();

    Class extType=null;

    int currConstrDistance=0;

    for (j=0; j < nArgs; j++) {

      extType=paramTypes[j];

      final Type intType=(Type)argsType.elementAt(j);

      Object match=_internal2Java.maps(intType,extType);

      if (match != null) {

        currConstrDistance+=((JavaType)match).distance;

      }

 else       if (intType instanceof ObjectType) {

        ObjectType objectType=(ObjectType)intType;

        if (objectType.getJavaClass() == extType)         continue;

 else         if (extType.isAssignableFrom(objectType.getJavaClass()))         currConstrDistance+=1;

 else {

          currConstrDistance=Integer.MAX_VALUE;

          break;

        }

      }

 else {

        currConstrDistance=Integer.MAX_VALUE;

        break;

      }

    }

    if (j == nArgs && currConstrDistance < bestConstrDistance) {

      _chosenConstructor=constructor;

      _isExtConstructor=true;

      bestConstrDistance=currConstrDistance;

      _type=(_clazz != null) ? Type.newObjectType(_clazz) : Type.newObjectType(_className);

    }

  }

  if (_type != null) {

    return _type;

  }

  throw new TypeCheckError(ErrorMsg.ARGUMENT_CONVERSION_ERR,getMethodSignature(argsType));

}

Location: FunctionCall.java

Content: 

/** 

 * Type check a call to an external (Java) method. The method must be static an public, and a legal type conversion must exist for all its arguments and its return type. Every method of name <code>_fname</code> is inspected as a possible candidate.

 */

public Type typeCheckExternal(SymbolTable stable) throws TypeCheckError {

  int nArgs=_arguments.size();

  final String name=_fname.getLocalPart();

  if (_fname.getLocalPart().equals("new")) {

    return typeCheckConstructor(stable);

  }

 else {

    boolean hasThisArgument=false;

    if (nArgs == 0)     _isStatic=true;

    if (!_isStatic) {

      if (_namespace_format == NAMESPACE_FORMAT_JAVA || _namespace_format == NAMESPACE_FORMAT_PACKAGE)       hasThisArgument=true;

      Expression firstArg=(Expression)_arguments.elementAt(0);

      Type firstArgType=(Type)firstArg.typeCheck(stable);

      if (_namespace_format == NAMESPACE_FORMAT_CLASS && firstArgType instanceof ObjectType && _clazz != null && _clazz.isAssignableFrom(((ObjectType)firstArgType).getJavaClass()))       hasThisArgument=true;

      if (hasThisArgument) {

        _thisArgument=(Expression)_arguments.elementAt(0);

        _arguments.remove(0);

        nArgs--;

        if (firstArgType instanceof ObjectType) {

          _className=((ObjectType)firstArgType).getJavaClassName();

        }

 else         throw new TypeCheckError(ErrorMsg.NO_JAVA_FUNCT_THIS_REF,name);

      }

    }

 else     if (_className.length() == 0) {

      final Parser parser=getParser();

      if (parser != null) {

        reportWarning(this,parser,ErrorMsg.FUNCTION_RESOLVE_ERR,_fname.toString());

      }

      unresolvedExternal=true;

      return _type=Type.Int;

    }

  }

  final Vector methods=findMethods();

  if (methods == null) {

    throw new TypeCheckError(ErrorMsg.METHOD_NOT_FOUND_ERR,_className + "." + name);

  }

  Class extType=null;

  final int nMethods=methods.size();

  final Vector argsType=typeCheckArgs(stable);

  int bestMethodDistance=Integer.MAX_VALUE;

  _type=null;

  for (int j, i=0; i < nMethods; i++) {

    final Method method=(Method)methods.elementAt(i);

    final Class[] paramTypes=method.getParameterTypes();

    int currMethodDistance=0;

    for (j=0; j < nArgs; j++) {

      extType=paramTypes[j];

      final Type intType=(Type)argsType.elementAt(j);

      Object match=_internal2Java.maps(intType,extType);

      if (match != null) {

        currMethodDistance+=((JavaType)match).distance;

      }

 else {

        if (intType instanceof ReferenceType) {

          currMethodDistance+=1;

        }

 else         if (intType instanceof ObjectType) {

          ObjectType object=(ObjectType)intType;

          if (extType.getName().equals(object.getJavaClassName()))           currMethodDistance+=0;

 else           if (extType.isAssignableFrom(object.getJavaClass()))           currMethodDistance+=1;

 else {

            currMethodDistance=Integer.MAX_VALUE;

            break;

          }

        }

 else {

          currMethodDistance=Integer.MAX_VALUE;

          break;

        }

      }

    }

    if (j == nArgs) {

      extType=method.getReturnType();

      _type=(Type)_java2Internal.get(extType);

      if (_type == null) {

        _type=Type.newObjectType(extType);

      }

      if (_type != null && currMethodDistance < bestMethodDistance) {

        _chosenMethod=method;

        bestMethodDistance=currMethodDistance;

      }

    }

  }

  if (_chosenMethod != null && _thisArgument == null && !Modifier.isStatic(_chosenMethod.getModifiers())) {

    throw new TypeCheckError(ErrorMsg.NO_JAVA_FUNCT_THIS_REF,getMethodSignature(argsType));

  }

  if (_type != null) {

    if (_type == Type.NodeSet) {

      getXSLTC().setMultiDocument(true);

    }

    return _type;

  }

  throw new TypeCheckError(ErrorMsg.ARGUMENT_CONVERSION_ERR,getMethodSignature(argsType));

}

Location: FunctionCall.java

Content: 

/** 

 * Type check a call to a standard function. Insert CastExprs when needed. If as a result of the insertion of a CastExpr a type check error is thrown, then catch it and re-throw it with a new "this".

 */

public Type typeCheckStandard(SymbolTable stable) throws TypeCheckError {

  _fname.clearNamespace();

  final int n=_arguments.size();

  final Vector argsType=typeCheckArgs(stable);

  final MethodType args=new MethodType(Type.Void,argsType);

  final MethodType ptype=lookupPrimop(stable,_fname.getLocalPart(),args);

  if (ptype != null) {

    for (int i=0; i < n; i++) {

      final Type argType=(Type)ptype.argsType().elementAt(i);

      final Expression exp=(Expression)_arguments.elementAt(i);

      if (!argType.identicalTo(exp.getType())) {

        try {

          _arguments.setElementAt(new CastExpr(exp,argType),i);

        }

 catch (        TypeCheckError e) {

          throw new TypeCheckError(this);

        }

      }

    }

    _chosenMethodType=ptype;

    return _type=ptype.resultType();

  }

  throw new TypeCheckError(this);

}

