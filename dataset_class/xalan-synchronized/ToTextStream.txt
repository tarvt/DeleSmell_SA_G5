Location: ToTextStream.java

Content: 

/** 

 * Receive notification of the beginning of a document. <p> The SAX parser will invoke this method only once, before any other methods in this interface or in DTDHandler (except for setDocumentLocator). </p>

 * @throws org.xml.sax.SAXException Any SAX exception, possibly wrapping anotherexception.

 * @throws org.xml.sax.SAXException

 */

protected void startDocumentInternal() throws org.xml.sax.SAXException {

  super.startDocumentInternal();

  m_needToCallStartDocument=false;

}

Location: ToTextStream.java

Content: 

/** 

 * Default constructor.

 */

public ToTextStream(){

  super();

}

Location: ToTextStream.java

Content: 

/** 

 * Normalize the characters, but don't escape. Different from SerializerToXML#writeNormalizedChars because it does not attempt to do XML escaping at all.

 * @param ch         The characters from the XML document.

 * @param start      The start position in the array.

 * @param length     The number of characters to read from the array.

 * @param useLineSep true if the operating systems end-of-line separator shouldbe output rather than a new-line character.

 * @throws IOException

 * @throws org.xml.sax.SAXException

 */

void writeNormalizedChars(final char ch[],final int start,final int length,final boolean useLineSep) throws IOException, org.xml.sax.SAXException {

  final String encoding=getEncoding();

  final java.io.Writer writer=m_writer;

  final int end=start + length;

  final char S_LINEFEED=CharInfo.S_LINEFEED;

  for (int i=start; i < end; i++) {

    final char c=ch[i];

    if (S_LINEFEED == c && useLineSep) {

      writer.write(m_lineSep,0,m_lineSepLen);

    }

 else     if (m_encodingInfo.isInEncoding(c)) {

      writer.write(c);

    }

 else     if (Encodings.isHighUTF16Surrogate(c)) {

      final int codePoint=writeUTF16Surrogate(c,ch,i,end);

      if (codePoint != 0) {

        final String integralValue=Integer.toString(codePoint);

        final String msg=Utils.messages.createMessage(MsgKey.ER_ILLEGAL_CHARACTER,new Object[]{integralValue,encoding});

        System.err.println(msg);

      }

      i++;

    }

 else {

      if (encoding != null) {

        writer.write('&');

        writer.write('#');

        writer.write(Integer.toString(c));

        writer.write(';');

        final String integralValue=Integer.toString(c);

        final String msg=Utils.messages.createMessage(MsgKey.ER_ILLEGAL_CHARACTER,new Object[]{integralValue,encoding});

        System.err.println(msg);

      }

 else {

        writer.write(c);

      }

    }

  }

}

