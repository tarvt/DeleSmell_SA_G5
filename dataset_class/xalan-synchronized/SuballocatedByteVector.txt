Location: SuballocatedByteVector.java

Content: 

/** 

 * Append several byte values onto the vector.

 * @param value Byte to add to the list

 */

private void addElements(byte value,int numberOfElements){

  if (m_firstFree + numberOfElements < m_blocksize)   for (int i=0; i < numberOfElements; i++) {

    m_map0[m_firstFree++]=value;

  }

 else {

    int index=m_firstFree / m_blocksize;

    int offset=m_firstFree % m_blocksize;

    m_firstFree+=numberOfElements;

    while (numberOfElements > 0) {

      if (index >= m_map.length) {

        int newsize=index + m_numblocks;

        byte[][] newMap=new byte[newsize][];

        System.arraycopy(m_map,0,newMap,0,m_map.length);

        m_map=newMap;

      }

      byte[] block=m_map[index];

      if (null == block)       block=m_map[index]=new byte[m_blocksize];

      int copied=(m_blocksize - offset < numberOfElements) ? m_blocksize - offset : numberOfElements;

      numberOfElements-=copied;

      while (copied-- > 0)       block[offset++]=value;

      ++index;

      offset=0;

    }

  }

}

Location: SuballocatedByteVector.java

Content: 

/** 

 * Append a byte onto the vector.

 * @param value Byte to add to the list

 */

public void addElement(byte value){

  if (m_firstFree < m_blocksize)   m_map0[m_firstFree++]=value;

 else {

    int index=m_firstFree / m_blocksize;

    int offset=m_firstFree % m_blocksize;

    ++m_firstFree;

    if (index >= m_map.length) {

      int newsize=index + m_numblocks;

      byte[][] newMap=new byte[newsize][];

      System.arraycopy(m_map,0,newMap,0,m_map.length);

      m_map=newMap;

    }

    byte[] block=m_map[index];

    if (null == block)     block=m_map[index]=new byte[m_blocksize];

    block[offset]=value;

  }

}

Location: SuballocatedByteVector.java

Content: 

/** 

 * Tell if the table contains the given node.

 * @param s object to look for

 * @return true if the object is in the list

 */

private boolean contains(byte s){

  return (indexOf(s,0) >= 0);

}

Location: SuballocatedByteVector.java

Content: 

/** 

 * Searches for the first occurence of the given argument, beginning the search at index, and testing for equality using the equals method.

 * @param elem object to look for

 * @return the index of the first occurrence of the object argument in thisvector at position index or later in the vector; returns -1 if the object is not found.

 */

public int indexOf(byte elem){

  return indexOf(elem,0);

}

Location: SuballocatedByteVector.java

Content: 

/** 

 * Searches for the first occurence of the given argument, beginning the search at index, and testing for equality using the equals method.

 * @param elem  object to look for

 * @param index Index of where to begin search

 * @return the index of the first occurrence of the object argument in thisvector at position index or later in the vector; returns -1 if the object is not found.

 */

public int indexOf(byte elem,int index){

  if (index >= m_firstFree)   return -1;

  int bindex=index / m_blocksize;

  int boffset=index % m_blocksize;

  int maxindex=m_firstFree / m_blocksize;

  byte[] block;

  for (; bindex < maxindex; ++bindex) {

    block=m_map[bindex];

    if (block != null)     for (int offset=boffset; offset < m_blocksize; ++offset)     if (block[offset] == elem)     return offset + bindex * m_blocksize;

    boffset=0;

  }

  int maxoffset=m_firstFree % m_blocksize;

  block=m_map[maxindex];

  for (int offset=boffset; offset < maxoffset; ++offset)   if (block[offset] == elem)   return offset + maxindex * m_blocksize;

  return -1;

}

Location: SuballocatedByteVector.java

Content: 

/** 

 * Inserts the specified node in this vector at the specified index. Each component in this vector with an index greater or equal to the specified index is shifted upward to have an index one greater than the value it had previously. Insertion may be an EXPENSIVE operation!

 * @param value Byte to insert

 * @param at    Index of where to insert

 */

private void insertElementAt(byte value,int at){

  if (at == m_firstFree)   addElement(value);

 else   if (at > m_firstFree) {

    int index=at / m_blocksize;

    if (index >= m_map.length) {

      int newsize=index + m_numblocks;

      byte[][] newMap=new byte[newsize][];

      System.arraycopy(m_map,0,newMap,0,m_map.length);

      m_map=newMap;

    }

    byte[] block=m_map[index];

    if (null == block)     block=m_map[index]=new byte[m_blocksize];

    int offset=at % m_blocksize;

    block[offset]=value;

    m_firstFree=offset + 1;

  }

 else {

    int index=at / m_blocksize;

    int maxindex=m_firstFree + 1 / m_blocksize;

    ++m_firstFree;

    int offset=at % m_blocksize;

    byte push;

    while (index <= maxindex) {

      int copylen=m_blocksize - offset - 1;

      byte[] block=m_map[index];

      if (null == block) {

        push=0;

        block=m_map[index]=new byte[m_blocksize];

      }

 else {

        push=block[m_blocksize - 1];

        System.arraycopy(block,offset,block,offset + 1,copylen);

      }

      block[offset]=value;

      value=push;

      offset=0;

      ++index;

    }

  }

}

Location: SuballocatedByteVector.java

Content: 

/** 

 * Searches for the first occurence of the given argument, beginning the search at index, and testing for equality using the equals method.

 * @param elem Object to look for

 * @return the index of the first occurrence of the object argument in thisvector at position index or later in the vector; returns -1 if the object is not found.

 */

private int lastIndexOf(byte elem){

  int boffset=m_firstFree % m_blocksize;

  for (int index=m_firstFree / m_blocksize; index >= 0; --index) {

    byte[] block=m_map[index];

    if (block != null)     for (int offset=boffset; offset >= 0; --offset)     if (block[offset] == elem)     return offset + index * m_blocksize;

    boffset=0;

  }

  return -1;

}

Location: SuballocatedByteVector.java

Content: 

/** 

 * Removes the first occurrence of the argument from this vector. If the object is found in this vector, each component in the vector with an index greater or equal to the object's index is shifted downward to have an index one smaller than the value it had previously.

 * @param s Byte to remove from array

 * @return True if the byte was removed, false if it was not found

 */

private boolean removeElement(byte s){

  int at=indexOf(s,0);

  if (at < 0)   return false;

  removeElementAt(at);

  return true;

}

Location: SuballocatedByteVector.java

Content: 

/** 

 * Sets the component at the specified index of this vector to be the specified object. The previous component at that position is discarded. The index must be a value greater than or equal to 0 and less than the current size of the vector.

 * @param value

 * @param at    Index of where to set the object

 */

public void setElementAt(byte value,int at){

  if (at < m_blocksize) {

    m_map0[at]=value;

    return;

  }

  int index=at / m_blocksize;

  int offset=at % m_blocksize;

  if (index >= m_map.length) {

    int newsize=index + m_numblocks;

    byte[][] newMap=new byte[newsize][];

    System.arraycopy(m_map,0,newMap,0,m_map.length);

    m_map=newMap;

  }

  byte[] block=m_map[index];

  if (null == block)   block=m_map[index]=new byte[m_blocksize];

  block[offset]=value;

  if (at >= m_firstFree)   m_firstFree=at + 1;

}

Location: SuballocatedByteVector.java

Content: 

/** 

 * Default constructor. Note that the default block size is very small, for small lists.

 */

public SuballocatedByteVector(){

  this(2048);

}

Location: SuballocatedByteVector.java

Content: 

/** 

 * Construct a ByteVector, using the given block size.

 * @param blocksize Size of block to allocate

 */

public SuballocatedByteVector(int blocksize){

  m_blocksize=blocksize;

  m_map0=new byte[blocksize];

  m_map=new byte[m_numblocks][];

  m_map[0]=m_map0;

}

Location: SuballocatedByteVector.java

Content: 

/** 

 * Construct a ByteVector, using the given block size.

 * @param blocksize Size of block to allocate

 */

public SuballocatedByteVector(int blocksize,int increaseSize){

  this(blocksize);

}

