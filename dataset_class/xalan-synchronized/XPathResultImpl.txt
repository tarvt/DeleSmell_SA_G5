Location: XPathResultImpl.java

Content: 

/** 

 * Add m_contextNode to Event Listner to listen for Mutations Events

 */

private void addEventListener(){

  if (m_contextNode instanceof EventTarget)   ((EventTarget)m_contextNode).addEventListener("DOMSubtreeModified",this,true);

}

Location: XPathResultImpl.java

Content: 

/** 

 * @see org.w3c.dom.xpath.XPathResult#getBooleanValue()

 */

public boolean getBooleanValue() throws XPathException {

  if (getResultType() != BOOLEAN_TYPE) {

    String fmsg=XPATHMessages.createXPATHMessage(XPATHErrorResources.ER_CANT_CONVERT_TO_BOOLEAN,new Object[]{m_xpath.getPatternString(),getTypeString(m_resultType)});

    throw new XPathException(XPathException.TYPE_ERR,fmsg);

  }

 else {

    try {

      return m_resultObj.bool();

    }

 catch (    TransformerException e) {

      throw new XPathException(XPathException.TYPE_ERR,e.getMessage());

    }

  }

}

Location: XPathResultImpl.java

Content: 

/** 

 * @see org.w3c.dom.xpath.XPathResult#getInvalidIteratorState()

 */

public boolean getInvalidIteratorState(){

  return m_isInvalidIteratorState;

}

Location: XPathResultImpl.java

Content: 

/** 

 * The value of this number result.

 * @exception XPathException TYPE_ERR: raised if <code>resultType</code> is not<code>NUMBER_TYPE</code>.

 * @see org.w3c.dom.xpath.XPathResult#getNumberValue()

 */

public double getNumberValue() throws XPathException {

  if (getResultType() != NUMBER_TYPE) {

    String fmsg=XPATHMessages.createXPATHMessage(XPATHErrorResources.ER_CANT_CONVERT_XPATHRESULTTYPE_TO_NUMBER,new Object[]{m_xpath.getPatternString(),getTypeString(m_resultType)});

    throw new XPathException(XPathException.TYPE_ERR,fmsg);

  }

 else {

    try {

      return m_resultObj.num();

    }

 catch (    Exception e) {

      throw new XPathException(XPathException.TYPE_ERR,e.getMessage());

    }

  }

}

Location: XPathResultImpl.java

Content: 

/** 

 * @see org.w3c.dom.xpath.XPathResult#getResultType()

 */

public short getResultType(){

  return m_resultType;

}

Location: XPathResultImpl.java

Content: 

/** 

 * The value of this single node result, which may be <code>null</code>.

 * @exception XPathException TYPE_ERR: raised if <code>resultType</code> is not<code>ANY_UNORDERED_NODE_TYPE</code> or <code>FIRST_ORDERED_NODE_TYPE</code>.

 * @see org.w3c.dom.xpath.XPathResult#getSingleNodeValue()

 */

public Node getSingleNodeValue() throws XPathException {

  if ((m_resultType != ANY_UNORDERED_NODE_TYPE) && (m_resultType != FIRST_ORDERED_NODE_TYPE)) {

    String fmsg=XPATHMessages.createXPATHMessage(XPATHErrorResources.ER_CANT_CONVERT_TO_SINGLENODE,new Object[]{m_xpath.getPatternString(),getTypeString(m_resultType)});

    throw new XPathException(XPathException.TYPE_ERR,fmsg);

  }

  NodeIterator result=null;

  try {

    result=m_resultObj.nodeset();

  }

 catch (  TransformerException te) {

    throw new XPathException(XPathException.TYPE_ERR,te.getMessage());

  }

  if (null == result)   return null;

  Node node=result.nextNode();

  if (isNamespaceNode(node)) {

    return new XPathNamespaceImpl(node);

  }

 else {

    return node;

  }

}

Location: XPathResultImpl.java

Content: 

/** 

 * The number of nodes in the result snapshot. Valid values for snapshotItem indices are <code>0</code> to <code>snapshotLength-1</code> inclusive.

 * @exception XPathException TYPE_ERR: raised if <code>resultType</code> is not<code>UNORDERED_NODE_SNAPSHOT_TYPE</code> or <code>ORDERED_NODE_SNAPSHOT_TYPE</code>.

 * @see org.w3c.dom.xpath.XPathResult#getSnapshotLength()

 */

public int getSnapshotLength() throws XPathException {

  if ((m_resultType != UNORDERED_NODE_SNAPSHOT_TYPE) && (m_resultType != ORDERED_NODE_SNAPSHOT_TYPE)) {

    String fmsg=XPATHMessages.createXPATHMessage(XPATHErrorResources.ER_CANT_GET_SNAPSHOT_LENGTH,new Object[]{m_xpath.getPatternString(),getTypeString(m_resultType)});

    throw new XPathException(XPathException.TYPE_ERR,fmsg);

  }

  return m_list.getLength();

}

Location: XPathResultImpl.java

Content: 

/** 

 * The value of this string result.

 * @exception XPathException TYPE_ERR: raised if <code>resultType</code> is not<code>STRING_TYPE</code>.

 * @see org.w3c.dom.xpath.XPathResult#getStringValue()

 */

public String getStringValue() throws XPathException {

  if (getResultType() != STRING_TYPE) {

    String fmsg=XPATHMessages.createXPATHMessage(XPATHErrorResources.ER_CANT_CONVERT_TO_STRING,new Object[]{m_xpath.getPatternString(),m_resultObj.getTypeString()});

    throw new XPathException(XPathException.TYPE_ERR,fmsg);

  }

 else {

    try {

      return m_resultObj.str();

    }

 catch (    Exception e) {

      throw new XPathException(XPathException.TYPE_ERR,e.getMessage());

    }

  }

}

Location: XPathResultImpl.java

Content: 

/** 

 * Given an XObject, determine the corresponding DOM XPath type

 * @return type string

 */

private short getTypeFromXObject(XObject object){

switch (object.getType()) {

case XObject.CLASS_BOOLEAN:

    return BOOLEAN_TYPE;

case XObject.CLASS_NODESET:

  return UNORDERED_NODE_ITERATOR_TYPE;

case XObject.CLASS_NUMBER:

return NUMBER_TYPE;

case XObject.CLASS_STRING:

return STRING_TYPE;

case XObject.CLASS_RTREEFRAG:

return UNORDERED_NODE_ITERATOR_TYPE;

case XObject.CLASS_NULL:

return ANY_TYPE;

default :

return ANY_TYPE;

}

}

Location: XPathResultImpl.java

Content: 

/** 

 * Given a request type, return the equivalent string. For diagnostic purposes.

 * @return type string

 */

private String getTypeString(int type){

switch (type) {

case ANY_TYPE:

    return "ANY_TYPE";

case ANY_UNORDERED_NODE_TYPE:

  return "ANY_UNORDERED_NODE_TYPE";

case BOOLEAN_TYPE:

return "BOOLEAN";

case FIRST_ORDERED_NODE_TYPE:

return "FIRST_ORDERED_NODE_TYPE";

case NUMBER_TYPE:

return "NUMBER_TYPE";

case ORDERED_NODE_ITERATOR_TYPE:

return "ORDERED_NODE_ITERATOR_TYPE";

case ORDERED_NODE_SNAPSHOT_TYPE:

return "ORDERED_NODE_SNAPSHOT_TYPE";

case STRING_TYPE:

return "STRING_TYPE";

case UNORDERED_NODE_ITERATOR_TYPE:

return "UNORDERED_NODE_ITERATOR_TYPE";

case UNORDERED_NODE_SNAPSHOT_TYPE:

return "UNORDERED_NODE_SNAPSHOT_TYPE";

default :

return "#UNKNOWN";

}

}

Location: XPathResultImpl.java

Content: 

/** 

 * @see org.w3c.dom.events.EventListener#handleEvent(Event)

 */

public void handleEvent(Event event){

  if (event.getType().equals("DOMSubtreeModified")) {

    m_isInvalidIteratorState=true;

    removeEventListener();

  }

}

Location: XPathResultImpl.java

Content: 

/** 

 * Given a node, determine if it is a namespace node.

 * @param node

 * @return boolean Returns true if this is a namespace node; otherwise, returnsfalse.

 */

private boolean isNamespaceNode(Node node){

  if ((null != node) && (node.getNodeType() == Node.ATTRIBUTE_NODE) && (node.getNodeName().startsWith("xmlns:") || node.getNodeName().equals("xmlns"))) {

    return true;

  }

 else {

    return false;

  }

}

Location: XPathResultImpl.java

Content: 

/** 

 * Check if the specified type is one of the supported types.

 * @param type The specified type

 * @return true If the specified type is supported; otherwise, returns false.

 */

static boolean isValidType(short type){

switch (type) {

case ANY_TYPE:

case NUMBER_TYPE:

case STRING_TYPE:

case BOOLEAN_TYPE:

case UNORDERED_NODE_ITERATOR_TYPE:

case ORDERED_NODE_ITERATOR_TYPE:

case UNORDERED_NODE_SNAPSHOT_TYPE:

case ORDERED_NODE_SNAPSHOT_TYPE:

case ANY_UNORDERED_NODE_TYPE:

case FIRST_ORDERED_NODE_TYPE:

    return true;

default :

  return false;

}

}

Location: XPathResultImpl.java

Content: 

/** 

 * Iterates and returns the next node from the node set or <code>null</code>if there are no more nodes.

 * @return Returns the next node.

 * @exception XPathException TYPE_ERR: raised if <code>resultType</code> is not<code>UNORDERED_NODE_ITERATOR_TYPE</code> or <code>ORDERED_NODE_ITERATOR_TYPE</code>.

 * @exception DOMException   INVALID_STATE_ERR: The document has been mutatedsince the result was returned.

 * @see org.w3c.dom.xpath.XPathResult#iterateNext()

 */

public Node iterateNext() throws XPathException, DOMException {

  if ((m_resultType != UNORDERED_NODE_ITERATOR_TYPE) && (m_resultType != ORDERED_NODE_ITERATOR_TYPE)) {

    String fmsg=XPATHMessages.createXPATHMessage(XPATHErrorResources.ER_NON_ITERATOR_TYPE,new Object[]{m_xpath.getPatternString(),getTypeString(m_resultType)});

    throw new XPathException(XPathException.TYPE_ERR,fmsg);

  }

  if (getInvalidIteratorState()) {

    String fmsg=XPATHMessages.createXPATHMessage(XPATHErrorResources.ER_DOC_MUTATED,null);

    throw new DOMException(DOMException.INVALID_STATE_ERR,fmsg);

  }

  Node node=m_iterator.nextNode();

  if (null == node)   removeEventListener();

  if (isNamespaceNode(node)) {

    return new XPathNamespaceImpl(node);

  }

 else {

    return node;

  }

}

Location: XPathResultImpl.java

Content: 

/** 

 * Remove m_contextNode to Event Listner to listen for Mutations Events

 */

private void removeEventListener(){

  if (m_contextNode instanceof EventTarget)   ((EventTarget)m_contextNode).removeEventListener("DOMSubtreeModified",this,true);

}

Location: XPathResultImpl.java

Content: 

/** 

 * Returns the <code>index</code>th item in the snapshot collection. If <code>index</code> is greater than or equal to the number of nodes in the list, this method returns <code>null</code>. Unlike the iterator result, the snapshot does not become invalid, but may not correspond to the current document if it is mutated.

 * @param index Index into the snapshot collection.

 * @return The node at the <code>index</code>th position in the<code>NodeList</code>, or <code>null</code> if that is not a valid index.

 * @exception XPathException TYPE_ERR: raised if <code>resultType</code> is not<code>UNORDERED_NODE_SNAPSHOT_TYPE</code> or <code>ORDERED_NODE_SNAPSHOT_TYPE</code>.

 * @see org.w3c.dom.xpath.XPathResult#snapshotItem(int)

 */

public Node snapshotItem(int index) throws XPathException {

  if ((m_resultType != UNORDERED_NODE_SNAPSHOT_TYPE) && (m_resultType != ORDERED_NODE_SNAPSHOT_TYPE)) {

    String fmsg=XPATHMessages.createXPATHMessage(XPATHErrorResources.ER_NON_SNAPSHOT_TYPE,new Object[]{m_xpath.getPatternString(),getTypeString(m_resultType)});

    throw new XPathException(XPathException.TYPE_ERR,fmsg);

  }

  Node node=m_list.item(index);

  if (isNamespaceNode(node)) {

    return new XPathNamespaceImpl(node);

  }

 else {

    return node;

  }

}

Location: XPathResultImpl.java

Content: 

/** 

 * Constructor for XPathResultImpl. For internal use only.

 */

XPathResultImpl(short type,XObject result,Node contextNode,XPath xpath){

  if (!isValidType(type)) {

    String fmsg=XPATHMessages.createXPATHMessage(XPATHErrorResources.ER_INVALID_XPATH_TYPE,new Object[]{new Integer(type)});

    throw new XPathException(XPathException.TYPE_ERR,fmsg);

  }

  if (null == result) {

    String fmsg=XPATHMessages.createXPATHMessage(XPATHErrorResources.ER_EMPTY_XPATH_RESULT,null);

    throw new XPathException(XPathException.INVALID_EXPRESSION_ERR,fmsg);

  }

  this.m_resultObj=result;

  this.m_contextNode=contextNode;

  this.m_xpath=xpath;

  if (type == ANY_TYPE) {

    this.m_resultType=getTypeFromXObject(result);

  }

 else {

    this.m_resultType=type;

  }

  if (((m_resultType == XPathResult.ORDERED_NODE_ITERATOR_TYPE) || (m_resultType == XPathResult.UNORDERED_NODE_ITERATOR_TYPE))) {

    addEventListener();

  }

  if ((m_resultType == ORDERED_NODE_ITERATOR_TYPE) || (m_resultType == UNORDERED_NODE_ITERATOR_TYPE) || (m_resultType == ANY_UNORDERED_NODE_TYPE)|| (m_resultType == FIRST_ORDERED_NODE_TYPE)) {

    try {

      m_iterator=m_resultObj.nodeset();

    }

 catch (    TransformerException te) {

      String fmsg=XPATHMessages.createXPATHMessage(XPATHErrorResources.ER_INCOMPATIBLE_TYPES,new Object[]{m_xpath.getPatternString(),getTypeString(getTypeFromXObject(m_resultObj)),getTypeString(m_resultType)});

      throw new XPathException(XPathException.TYPE_ERR,fmsg);

    }

  }

 else   if ((m_resultType == UNORDERED_NODE_SNAPSHOT_TYPE) || (m_resultType == ORDERED_NODE_SNAPSHOT_TYPE)) {

    try {

      m_list=m_resultObj.nodelist();

    }

 catch (    TransformerException te) {

      String fmsg=XPATHMessages.createXPATHMessage(XPATHErrorResources.ER_INCOMPATIBLE_TYPES,new Object[]{m_xpath.getPatternString(),getTypeString(getTypeFromXObject(m_resultObj)),getTypeString(m_resultType)});

      throw new XPathException(XPathException.TYPE_ERR,fmsg);

    }

  }

}

