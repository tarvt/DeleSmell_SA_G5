Location: ElemLiteralResult.java

Content: 

/** 

 * Set a literal result attribute (AVTs only).

 * @param avt literal result attribute to add (AVT only)

 */

public void addLiteralResultAttribute(AVT avt){

  if (null == m_avts)   m_avts=new ArrayList();

  m_avts.add(avt);

}

Location: ElemLiteralResult.java

Content: 

/** 

 * Set a literal result attribute (used for xsl attributes).

 * @param att literal result attribute to add

 */

public void addLiteralResultAttribute(String att){

  if (null == m_xslAttr)   m_xslAttr=new ArrayList();

  m_xslAttr.add(att);

}

Location: ElemLiteralResult.java

Content: 

/** 

 * Get whether or not the passed URL is flagged by the "extension-element-prefixes" or "exclude-result-prefixes" properties.

 * @see <a href="http://www.w3.org/TR/xslt#extension-element">extension-element

	 *      in XSLT Specification</a>

 * @param prefix non-null reference to prefix that might be excluded.(notcurrently used)

 * @param uri    reference to namespace that prefix maps to

 * @return true if the prefix should normally be excluded.

 */

public boolean containsExcludeResultPrefix(String prefix,String uri){

  if (uri == null || (null == m_excludeResultPrefixes && null == m_ExtensionElementURIs))   return super.containsExcludeResultPrefix(prefix,uri);

  if (prefix.length() == 0)   prefix=Constants.ATTRVAL_DEFAULT_PREFIX;

  if (m_excludeResultPrefixes != null)   for (int i=0; i < m_excludeResultPrefixes.size(); i++) {

    if (uri.equals(getNamespaceForPrefix(m_excludeResultPrefixes.elementAt(i))))     return true;

  }

  if (m_ExtensionElementURIs != null && m_ExtensionElementURIs.contains(uri))   return true;

  return super.containsExcludeResultPrefix(prefix,uri);

}

Location: ElemLiteralResult.java

Content: 

/** 

 * Find out if the given "extension-element-prefix" property is defined.

 * @see <a href="http://www.w3.org/TR/xslt#extension-element">extension-element

	 *      in XSLT Specification</a>

 * @param uri The URI to find

 * @return True if the given URI is found

 */

public boolean containsExtensionElementURI(String uri){

  if (null == m_ExtensionElementURIs)   return false;

  return m_ExtensionElementURIs.contains(uri);

}

Location: ElemLiteralResult.java

Content: 

/** 

 * Compiling templates requires that we be able to list the AVTs ADDED 9/5/2000 to support compilation experiment

 * @return an Enumeration of the literal result attributes associated with thiselement.

 */

public Iterator enumerateLiteralResultAttributes(){

  return (null == m_avts) ? null : m_avts.iterator();

}

Location: ElemLiteralResult.java

Content: 

/** 

 * Tell if the result namespace decl should be excluded. Should be called before namespace aliasing (I think).

 * @param prefix Prefix of namespace to check

 * @param uri    URI of namespace to check

 * @return True if the given namespace should be excluded

 * @throws TransformerException

 */

private boolean excludeResultNSDecl(String prefix,String uri) throws TransformerException {

  if (null != m_excludeResultPrefixes) {

    return containsExcludeResultPrefix(prefix,uri);

  }

  return false;

}

Location: ElemLiteralResult.java

Content: 

/** 

 * Get the number of "extension-element-prefixes" Strings.

 * @see <a href="http://www.w3.org/TR/xslt#extension-element">extension-element

	 *      in XSLT Specification</a>

 * @return the number of "extension-element-prefixes" Strings

 */

public int getExtensionElementPrefixCount(){

  return (null != m_ExtensionElementURIs) ? m_ExtensionElementURIs.size() : 0;

}

Location: ElemLiteralResult.java

Content: 

/** 

 * Get an "extension-element-prefix" property.

 * @see <a href="http://www.w3.org/TR/xslt#extension-element">extension-element

	 *      in XSLT Specification</a>

 * @param i Index of URI ("extension-element-prefix" property) to get

 * @return URI at given index ("extension-element-prefix" property)

 * @throws ArrayIndexOutOfBoundsException

 */

public String getExtensionElementPrefix(int i) throws ArrayIndexOutOfBoundsException {

  if (null == m_ExtensionElementURIs)   throw new ArrayIndexOutOfBoundsException();

  return m_ExtensionElementURIs.elementAt(i);

}

Location: ElemLiteralResult.java

Content: 

/** 

 * Return whether this element represents a root element that is also the stylesheet element.

 * @return boolean flag indicating whether this element represents a rootelement that is also the stylesheet element.

 */

public boolean getIsLiteralResultAsStylesheet(){

  return isLiteralResultAsStylesheet;

}

Location: ElemLiteralResult.java

Content: 

/** 

 * Get a literal result attribute by name.

 * @param namespaceURI Namespace URI of attribute node to get

 * @param localName    Local part of qualified name of attribute node to get

 * @return literal result attribute (AVT)

 */

public AVT getLiteralResultAttributeNS(String namespaceURI,String localName){

  if (null != m_avts) {

    int nAttrs=m_avts.size();

    for (int i=(nAttrs - 1); i >= 0; i--) {

      AVT avt=(AVT)m_avts.get(i);

      if (avt.getName().equals(localName) && avt.getURI().equals(namespaceURI)) {

        return avt;

      }

    }

  }

  return null;

}

Location: ElemLiteralResult.java

Content: 

/** 

 * Get a literal result attribute by name. The name is namespaceURI:localname if namespace is not null.

 * @param name Name of literal result attribute to get

 * @return literal result attribute (AVT)

 */

public AVT getLiteralResultAttribute(String name){

  if (null != m_avts) {

    int nAttrs=m_avts.size();

    String namespace=null;

    for (int i=(nAttrs - 1); i >= 0; i--) {

      AVT avt=(AVT)m_avts.get(i);

      namespace=avt.getURI();

      if ((namespace != null && (namespace.length() != 0) && (namespace + ":" + avt.getName()).equals(name)) || ((namespace == null || namespace.length() == 0) && avt.getRawName().equals(name))) {

        return avt;

      }

    }

  }

  return null;

}

Location: ElemLiteralResult.java

Content: 

/** 

 * Get the raw name of the Literal Result Element.

 * @return The qualified name (with prefix), or the empty string if qualifiednames are not available.

 */

public String getRawName(){

  return m_rawName;

}

Location: ElemLiteralResult.java

Content: 

/** 

 * Return whether we need to check namespace prefixes against the exclude result prefixes or extensions lists. Note that this will create a new prefix table if one has not been created already. NEEDSDOC ($objectName$) @return

 */

boolean needToCheckExclude(){

  if (null == m_excludeResultPrefixes && null == getPrefixTable() && m_ExtensionElementURIs == null)   return false;

 else {

    if (null == getPrefixTable())     setPrefixTable(new java.util.ArrayList());

    return true;

  }

}

Location: ElemLiteralResult.java

Content: 

/** 

 * Augment resolvePrefixTables, resolving the namespace aliases once the superclass has resolved the tables.

 * @throws TransformerException

 */

public void resolvePrefixTables() throws TransformerException {

  super.resolvePrefixTables();

  StylesheetRoot stylesheet=getStylesheetRoot();

  if ((null != m_namespace) && (m_namespace.length() > 0)) {

    NamespaceAlias nsa=stylesheet.getNamespaceAliasComposed(m_namespace);

    if (null != nsa) {

      m_namespace=nsa.getResultNamespace();

      String resultPrefix=nsa.getStylesheetPrefix();

      if ((null != resultPrefix) && (resultPrefix.length() > 0))       m_rawName=resultPrefix + ":" + m_localName;

 else       m_rawName=m_localName;

    }

  }

  if (null != m_avts) {

    int n=m_avts.size();

    for (int i=0; i < n; i++) {

      AVT avt=(AVT)m_avts.get(i);

      String ns=avt.getURI();

      if ((null != ns) && (ns.length() > 0)) {

        NamespaceAlias nsa=stylesheet.getNamespaceAliasComposed(m_namespace);

        if (null != nsa) {

          String namespace=nsa.getResultNamespace();

          String resultPrefix=nsa.getStylesheetPrefix();

          String rawName=avt.getName();

          if ((null != resultPrefix) && (resultPrefix.length() > 0))           rawName=resultPrefix + ":" + rawName;

          avt.setURI(namespace);

          avt.setRawName(rawName);

        }

      }

    }

  }

}

Location: ElemLiteralResult.java

Content: 

/** 

 * Set the "exclude-result-prefixes" property. The designation of a namespace as an excluded namespace is effective within the subtree of the stylesheet rooted at the element bearing the exclude-result-prefixes or xsl:exclude-result-prefixes attribute; a subtree rooted at an xsl:stylesheet element does not include any stylesheets imported or included by children of that xsl:stylesheet element.

 * @see <a href=

	 *      "http://www.w3.org/TR/xslt#literal-result-element">literal-result-element

	 *      in XSLT Specification</a>

 * @param v vector of prefixes that are resolvable to strings.

 */

public void setExcludeResultPrefixes(StringVector v){

  m_excludeResultPrefixes=v;

}

Location: ElemLiteralResult.java

Content: 

/** 

 * Set the "extension-element-prefixes" property.

 * @see <a href="http://www.w3.org/TR/xslt#extension-element">extension-element

	 *      in XSLT Specification</a>

 * @param v Vector of URIs (not prefixes) to set as the"extension-element-prefixes" property

 */

public void setExtensionElementPrefixes(StringVector v){

  m_ExtensionElementURIs=v;

}

Location: ElemLiteralResult.java

Content: 

/** 

 * Set whether this element represents a root element that is also the stylesheet element.

 * @param b boolean flag indicating whether this element represents a rootelement that is also the stylesheet element.

 */

public void setIsLiteralResultAsStylesheet(boolean b){

  isLiteralResultAsStylesheet=b;

}

Location: ElemLiteralResult.java

Content: 

/** 

 * Set the raw name of the LRE.

 * @param rawName The qualified name (with prefix), or the empty string ifqualified names are not available.

 */

public void setRawName(String rawName){

  m_rawName=rawName;

}

Location: ElemLiteralResult.java

Content: 

/** 

 * Set the "xml:space" attribute. A text node is preserved if an ancestor element of the text node has an xml:space attribute with a value of preserve, and no closer ancestor element has xml:space with a value of default.

 * @see <a href="http://www.w3.org/TR/xslt#strip">strip in XSLT

	 *      Specification</a>

 * @see <a href=

	 *      "http://www.w3.org/TR/xslt#section-Creating-Text">section-Creating-Text

	 *      in XSLT Specification</a>

 * @param avt Enumerated value, either Constants.ATTRVAL_PRESERVE orConstants.ATTRVAL_STRIP.

 */

public void setXmlSpace(AVT avt){

  addLiteralResultAttribute(avt);

  String val=avt.getSimpleString();

  if (val.equals("default")) {

    super.setXmlSpace(Constants.ATTRVAL_STRIP);

  }

 else   if (val.equals("preserve")) {

    super.setXmlSpace(Constants.ATTRVAL_PRESERVE);

  }

}

Location: ElemLiteralResult.java

Content: 

/** 

 * Throw a DOMException

 * @param msg key of the error that occured.

 */

public void throwDOMException(short code,String msg){

  String themsg=XSLMessages.createMessage(msg,null);

  throw new DOMException(code,themsg);

}

