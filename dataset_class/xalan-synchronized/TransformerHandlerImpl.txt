Location: TransformerHandlerImpl.java

Content: 

/** 

 * Do what needs to be done to shut down the CoRoutine management.

 */

protected void clearCoRoutine(SAXException ex){

  if (null != ex)   m_transformer.setExceptionThrown(ex);

  if (m_dtm instanceof SAX2DTM) {

    if (DEBUG)     System.err.println("In clearCoRoutine...");

    try {

      SAX2DTM sax2dtm=((SAX2DTM)m_dtm);

      if (null != m_contentHandler && m_contentHandler instanceof IncrementalSAXSource_Filter) {

        IncrementalSAXSource_Filter sp=(IncrementalSAXSource_Filter)m_contentHandler;

        sp.deliverMoreNodes(false);

      }

      sax2dtm.clearCoRoutine(true);

      m_contentHandler=null;

      m_dtdHandler=null;

      m_entityResolver=null;

      m_errorHandler=null;

      m_lexicalHandler=null;

    }

 catch (    Throwable throwable) {

      throwable.printStackTrace();

    }

    if (DEBUG)     System.err.println("...exiting clearCoRoutine");

  }

}

Location: TransformerHandlerImpl.java

Content: 

/** 

 * Implements javax.xml.transform.sax.TransformerHandler.setResult() Enables the user of the TransformerHandler to set the to set the Result for the transformation.

 * @param result A Result instance, should not be null

 * @throws IllegalArgumentException if result is invalid for some reason

 */

public void setResult(Result result) throws IllegalArgumentException {

  _result=result;

  if (null == result) {

    ErrorMsg err=new ErrorMsg(ErrorMsg.ER_RESULT_NULL);

    throw new IllegalArgumentException(err.toString());

  }

  if (_isIdentity) {

    try {

      SerializationHandler outputHandler=_transformer.getOutputHandler(result);

      _transformer.transferOutputProperties(outputHandler);

      _handler=outputHandler;

      _lexHandler=outputHandler;

    }

 catch (    TransformerException e) {

      _result=null;

    }

  }

 else   if (_done) {

    try {

      _transformer.setDOM(_dom);

      _transformer.transform(null,_result);

    }

 catch (    TransformerException e) {

      throw new IllegalArgumentException(e.getMessage());

    }

  }

}

Location: TransformerHandlerImpl.java

Content: 

/** 

 * Cosntructor - pass in reference to a TransformerImpl object

 */

public TransformerHandlerImpl(TransformerImpl transformer){

  _transformer=transformer;

  if (transformer.isIdentity()) {

    _handler=new DefaultHandler();

    _isIdentity=true;

  }

 else {

    _translet=_transformer.getTranslet();

  }

}

Location: TransformerHandlerImpl.java

Content: 

/** 

 * Construct a TransformerHandlerImpl.

 * @param transformer  Non-null reference to the Xalan transformer impl.

 * @param doFragment   True if the result should be a document fragement.

 * @param baseSystemID The system ID to use as the base for relative URLs.

 */

public TransformerHandlerImpl(TransformerImpl transformer,boolean doFragment,String baseSystemID){

  super();

  m_transformer=transformer;

  m_baseSystemID=baseSystemID;

  XPathContext xctxt=transformer.getXPathContext();

  DTM dtm=xctxt.getDTM(null,true,transformer,true,true);

  m_dtm=dtm;

  dtm.setDocumentBaseURI(baseSystemID);

  m_contentHandler=dtm.getContentHandler();

  m_dtdHandler=dtm.getDTDHandler();

  m_entityResolver=dtm.getEntityResolver();

  m_errorHandler=dtm.getErrorHandler();

  m_lexicalHandler=dtm.getLexicalHandler();

  m_incremental=transformer.getIncremental();

  m_optimizer=transformer.getOptimize();

  m_source_location=transformer.getSource_location();

}

