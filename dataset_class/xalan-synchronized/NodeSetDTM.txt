Location: NodeSetDTM.java

Content: 

/** 

 * Append a Node onto the vector.

 * @param value The node to be added.

 * @throws RuntimeException thrown if this NodeSetDTM is not of a mutable type.

 */

public void addElement(int value){

  if (!m_mutable)   throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESETDTM_NOT_MUTABLE,null));

  super.addElement(value);

}

Location: NodeSetDTM.java

Content: 

/** 

 * Add the node into a vector of nodes where it should occur in document order.

 * @param node    The node to be added.

 * @param test    true if we should test for doc order

 * @param support The XPath runtime context.

 * @return insertIndex.

 * @throws RuntimeException thrown if this NodeSetDTM is not of a mutable type.

 */

public int addNodeInDocOrder(int node,boolean test,XPathContext support){

  if (!m_mutable)   throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESETDTM_NOT_MUTABLE,null));

  int insertIndex=-1;

  if (test) {

    int size=size(), i;

    for (i=size - 1; i >= 0; i--) {

      int child=elementAt(i);

      if (child == node) {

        i=-2;

        break;

      }

      DTM dtm=support.getDTM(node);

      if (!dtm.isNodeAfter(node,child)) {

        break;

      }

    }

    if (i != -2) {

      insertIndex=i + 1;

      insertElementAt(node,insertIndex);

    }

  }

 else {

    insertIndex=this.size();

    boolean foundit=false;

    for (int i=0; i < insertIndex; i++) {

      if (i == node) {

        foundit=true;

        break;

      }

    }

    if (!foundit)     addElement(node);

  }

  return insertIndex;

}

Location: NodeSetDTM.java

Content: 

/** 

 * Add the node into a vector of nodes where it should occur in document order.

 * @param node    The node to be added.

 * @param support The XPath runtime context.

 * @return The index where it was inserted.

 * @throws RuntimeException thrown if this NodeSetDTM is not of a mutable type.

 */

public int addNodeInDocOrder(int node,XPathContext support){

  if (!m_mutable)   throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESETDTM_NOT_MUTABLE,null));

  return addNodeInDocOrder(node,true,support);

}

Location: NodeSetDTM.java

Content: 

/** 

 * Copy NodeList members into this nodelist, adding in document order. If a node is null, don't add it.

 * @param iterator DTMIterator which yields the nodes to be added.

 * @param support  The XPath runtime context.

 * @throws RuntimeException thrown if this NodeSetDTM is not of a mutable type.

 */

public void addNodesInDocOrder(DTMIterator iterator,XPathContext support){

  if (!m_mutable)   throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESETDTM_NOT_MUTABLE,null));

  int node;

  while (DTM.NULL != (node=iterator.nextNode())) {

    addNodeInDocOrder(node,support);

  }

}

Location: NodeSetDTM.java

Content: 

/** 

 * Copy NodeList members into this nodelist, adding in document order. Null references are not added.

 * @param iterator DTMIterator which yields the nodes to be added.

 * @throws RuntimeException thrown if this NodeSetDTM is not of a mutable type.

 */

public void addNodes(DTMIterator iterator){

  if (!m_mutable)   throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESETDTM_NOT_MUTABLE,null));

  if (null != iterator) {

    int obj;

    while (DTM.NULL != (obj=iterator.nextNode())) {

      addElement(obj);

    }

  }

}

Location: NodeSetDTM.java

Content: 

/** 

 * Add a node to the NodeSetDTM. Not all types of NodeSetDTMs support this operation

 * @param n Node to be added

 * @throws RuntimeException thrown if this NodeSetDTM is not of a mutable type.

 */

public void addNode(int n){

  if (!m_mutable)   throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESETDTM_NOT_MUTABLE,null));

  this.addElement(n);

}

Location: NodeSetDTM.java

Content: 

/** 

 * Append the nodes to the list.

 * @param nodes The nodes to be appended to this node set.

 * @throws RuntimeException thrown if this NodeSetDTM is not of a mutable type.

 */

public void appendNodes(NodeVector nodes){

  if (!m_mutable)   throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESETDTM_NOT_MUTABLE,null));

  super.appendNodes(nodes);

}

Location: NodeSetDTM.java

Content: 

/** 

 * Tell if the table contains the given node.

 * @param s Node to look for

 * @return True if the given node was found.

 */

public boolean contains(int s){

  runTo(-1);

  return super.contains(s);

}

Location: NodeSetDTM.java

Content: 

/** 

 * Inserts the specified node in this vector at the specified index. Each component in this vector with an index greater or equal to the specified index is shifted upward to have an index one greater than the value it had previously.

 * @param value The node to be inserted.

 * @param at    The index where the insert should occur.

 * @throws RuntimeException thrown if this NodeSetDTM is not of a mutable type.

 */

public void insertElementAt(int value,int at){

  if (!m_mutable)   throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESETDTM_NOT_MUTABLE,null));

  super.insertElementAt(value,at);

}

Location: NodeSetDTM.java

Content: 

/** 

 * Insert a node at a given position.

 * @param n   Node to be added

 * @param pos Offset at which the node is to be inserted, with 0 being the firstposition.

 * @throws RuntimeException thrown if this NodeSetDTM is not of a mutable type.

 */

public void insertNode(int n,int pos){

  if (!m_mutable)   throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESETDTM_NOT_MUTABLE,null));

  insertElementAt(n,pos);

}

Location: NodeSetDTM.java

Content: 

/** 

 * Create a NodeSetDTM, and copy the members of the given DTMIterator into it.

 * @param ni Iterator which yields Nodes to be made members of the new set.

 */

public NodeSetDTM(DTMIterator ni){

  super();

  m_manager=ni.getDTMManager();

  m_root=ni.getRoot();

  addNodes(ni);

}

Location: NodeSetDTM.java

Content: 

/** 

 * Create an empty nodelist.

 */

public NodeSetDTM(DTMManager dtmManager){

  super();

  m_manager=dtmManager;

}

Location: NodeSetDTM.java

Content: 

/** 

 * Create a NodeSetDTM which contains the given Node.

 * @param node Single node to be added to the new set.

 */

public NodeSetDTM(int node,DTMManager dtmManager){

  super();

  m_manager=dtmManager;

  addNode(node);

}

Location: NodeSetDTM.java

Content: 

/** 

 * Create an empty, using the given block size.

 * @param blocksize Size of blocks to allocate

 * @param dummy     pass zero for right now...

 */

public NodeSetDTM(int blocksize,int dummy,DTMManager dtmManager){

  super(blocksize);

  m_manager=dtmManager;

}

Location: NodeSetDTM.java

Content: 

/** 

 * Create a NodeSetDTM, and copy the members of the given DTMIterator into it.

 * @param iterator Iterator which yields Nodes to be made members of the newset.

 */

public NodeSetDTM(NodeIterator iterator,XPathContext xctxt){

  super();

  Node node;

  m_manager=xctxt.getDTMManager();

  while (null != (node=iterator.nextNode())) {

    int handle=xctxt.getDTMHandleFromNode(node);

    addNodeInDocOrder(handle,xctxt);

  }

}

Location: NodeSetDTM.java

Content: 

/** 

 * Create a NodeSetDTM, and copy the members of the given DTMIterator into it.

 */

public NodeSetDTM(NodeList nodeList,XPathContext xctxt){

  super();

  m_manager=xctxt.getDTMManager();

  int n=nodeList.getLength();

  for (int i=0; i < n; i++) {

    Node node=nodeList.item(i);

    int handle=xctxt.getDTMHandleFromNode(node);

    addNode(handle);

  }

}

Location: NodeSetDTM.java

Content: 

/** 

 * Create a NodeSetDTM, and copy the members of the given NodeSetDTM into it.

 * @param nodelist Set of Nodes to be made members of the new set.

 */

public NodeSetDTM(NodeSetDTM nodelist){

  super();

  m_manager=nodelist.getDTMManager();

  m_root=nodelist.getRoot();

  addNodes((DTMIterator)nodelist);

}

Location: NodeSetDTM.java

Content: 

/** 

 * Removes the first occurrence of the argument from this vector. If the object is found in this vector, each component in the vector with an index greater or equal to the object's index is shifted downward to have an index one smaller than the value it had previously.

 * @param s The node to be removed.

 * @return True if the node was successfully removed

 * @throws RuntimeException thrown if this NodeSetDTM is not of a mutable type.

 */

public boolean removeElement(int s){

  if (!m_mutable)   throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESETDTM_NOT_MUTABLE,null));

  return super.removeElement(s);

}

Location: NodeSetDTM.java

Content: 

/** 

 * Remove a node.

 * @param n Node to be added

 * @throws RuntimeException thrown if this NodeSetDTM is not of a mutable type.

 */

public void removeNode(int n){

  if (!m_mutable)   throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESETDTM_NOT_MUTABLE,null));

  this.removeElement(n);

}

