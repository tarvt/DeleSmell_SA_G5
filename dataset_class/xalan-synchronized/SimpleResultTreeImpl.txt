Location: SimpleResultTreeImpl.java

Content: 

/** 

 * Dispatch the character content of a node to an output handler. The escape setting should be taken care of when outputting to a handler.

 */

public void characters(final int node,SerializationHandler handler) throws TransletException {

  int nodeID=getNodeIdent(node);

  if (nodeID == RTF_ROOT || nodeID == RTF_TEXT) {

    boolean escapeBit=false;

    boolean oldEscapeSetting=false;

    try {

      for (int i=0; i < _size; i++) {

        if (_dontEscape != null) {

          escapeBit=_dontEscape.getBit(i);

          if (escapeBit) {

            oldEscapeSetting=handler.setEscaping(false);

          }

        }

        handler.characters(_textArray[i]);

        if (escapeBit) {

          handler.setEscaping(oldEscapeSetting);

        }

      }

    }

 catch (    SAXException e) {

      throw new TransletException(e);

    }

  }

}

Location: SimpleResultTreeImpl.java

Content: 

public void copy(DTMAxisIterator nodes,SerializationHandler handler) throws TransletException {

  int node;

  while ((node=nodes.next()) != DTM.NULL) {

    copy(node,handler);

  }

}

Location: SimpleResultTreeImpl.java

Content: 

public void copy(final int node,SerializationHandler handler) throws TransletException {

  characters(node,handler);

}

Location: SimpleResultTreeImpl.java

Content: 

public int getAttributeNode(final int gType,final int element){

  return DTM.NULL;

}

Location: SimpleResultTreeImpl.java

Content: 

public DTMAxisIterator getChildren(final int node){

  return new SimpleIterator().setStartNode(node);

}

Location: SimpleResultTreeImpl.java

Content: 

public String getDocumentURI(int node){

  return "simple_rtf" + _documentURIIndex++;

}

Location: SimpleResultTreeImpl.java

Content: 

public Hashtable getElementsWithIDs(){

  return null;

}

Location: SimpleResultTreeImpl.java

Content: 

public DTMAxisIterator getIterator(){

  return new SingletonIterator(getDocument());

}

Location: SimpleResultTreeImpl.java

Content: 

public String getLanguage(int node){

  return null;

}

Location: SimpleResultTreeImpl.java

Content: 

public DTMAxisIterator getNamespaceAxisIterator(final int axis,final int ns){

  return null;

}

Location: SimpleResultTreeImpl.java

Content: 

public String getNamespaceName(final int node){

  return EMPTY_STR;

}

Location: SimpleResultTreeImpl.java

Content: 

public DTMAxisIterator getNodeValueIterator(DTMAxisIterator iter,int returnType,String value,boolean op){

  return null;

}

Location: SimpleResultTreeImpl.java

Content: 

public int getNSType(int node){

  return 0;

}

Location: SimpleResultTreeImpl.java

Content: 

public DTMAxisIterator getNthDescendant(int node,int n,boolean includeself){

  return null;

}

Location: SimpleResultTreeImpl.java

Content: 

public SerializationHandler getOutputDomBuilder(){

  return this;

}

Location: SimpleResultTreeImpl.java

Content: 

public DOM getResultTreeFrag(int initialSize,int rtfType){

  return null;

}

Location: SimpleResultTreeImpl.java

Content: 

public DOM getResultTreeFrag(int initialSize,int rtfType,boolean addToManager){

  return null;

}

Location: SimpleResultTreeImpl.java

Content: 

public DTMAxisIterator getTypedChildren(final int type){

  return new SimpleIterator(SimpleIterator.DIRECTION_DOWN,type);

}

Location: SimpleResultTreeImpl.java

Content: 

public boolean isAttribute(final int node){

  return false;

}

Location: SimpleResultTreeImpl.java

Content: 

public boolean isElement(final int node){

  return false;

}

Location: SimpleResultTreeImpl.java

Content: 

public boolean lessThan(final int node1,final int node2){

  if (node1 == DTM.NULL) {

    return false;

  }

 else   if (node2 == DTM.NULL) {

    return true;

  }

 else   return (node1 < node2);

}

Location: SimpleResultTreeImpl.java

Content: 

public String lookupNamespace(int node,String prefix) throws TransletException {

  return null;

}

Location: SimpleResultTreeImpl.java

Content: 

public NodeList makeNodeList(DTMAxisIterator iter){

  return null;

}

Location: SimpleResultTreeImpl.java

Content: 

public NodeList makeNodeList(int index){

  return null;

}

Location: SimpleResultTreeImpl.java

Content: 

public Node makeNode(DTMAxisIterator iter){

  return null;

}

Location: SimpleResultTreeImpl.java

Content: 

public Node makeNode(int index){

  return null;

}

Location: SimpleResultTreeImpl.java

Content: 

public DTMAxisIterator orderNodes(DTMAxisIterator source,int node){

  return source;

}

Location: SimpleResultTreeImpl.java

Content: 

public void setFilter(StripFilter filter){

}

Location: SimpleResultTreeImpl.java

Content: 

public void setupMapping(String[] names,String[] uris,int[] types,String[] namespaces){

}

Location: SimpleResultTreeImpl.java

Content: 

public String shallowCopy(final int node,SerializationHandler handler) throws TransletException {

  characters(node,handler);

  return null;

}

Location: SimpleResultTreeImpl.java

Content: 

public SimpleResultTreeImpl(XSLTCDTMManager dtmManager,int documentID){

  _dtmManager=dtmManager;

  _documentID=documentID;

  _textArray=new String[4];

}

