Location: ExsltSets.java

Content: 

/** 

 * The set:has-same-node function returns true if the node set passed as the first argument shares any nodes with the node set passed as the second argument. If there are no nodes that are in both node sets, then it returns false. The Xalan extensions MethodResolver converts 'has-same-node' to 'hasSameNode'. Note: Not to be confused with hasSameNodes in the Xalan namespace, which returns true if the two node sets contain the exactly the same nodes (perhaps in a different order), otherwise false.

 * @see <a href="http://www.exslt.org/">EXSLT</a>

 */

public static boolean hasSameNode(NodeList nl1,NodeList nl2){

  NodeSet ns1=new NodeSet(nl1);

  NodeSet ns2=new NodeSet(nl2);

  for (int i=0; i < ns1.getLength(); i++) {

    if (ns2.contains(ns1.elementAt(i)))     return true;

  }

  return false;

}

Location: ExsltSets.java

Content: 

/** 

 * The set:leading function returns the nodes in the node set passed as the first argument that precede, in document order, the first node in the node set passed as the second argument. If the first node in the second node set is not contained in the first node set, then an empty node set is returned. If the second node set is empty, then the first node set is returned.

 * @param nl1 NodeList for first node-set.

 * @param nl2 NodeList for second node-set.

 * @return a NodeList containing the nodes in nl1 that precede in document orderthe first node in nl2; an empty node-set if the first node in nl2 is not in nl1; all of nl1 if nl2 is empty.

 * @see <a href="http://www.exslt.org/">EXSLT</a>

 */

public static NodeList leading(NodeList nl1,NodeList nl2){

  if (nl2.getLength() == 0)   return nl1;

  NodeSet ns1=new NodeSet(nl1);

  NodeSet leadNodes=new NodeSet();

  Node endNode=nl2.item(0);

  if (!ns1.contains(endNode))   return leadNodes;

  for (int i=0; i < nl1.getLength(); i++) {

    Node testNode=nl1.item(i);

    if (DOMHelper.isNodeAfter(testNode,endNode) && !DOMHelper.isNodeTheSame(testNode,endNode))     leadNodes.addElement(testNode);

  }

  return leadNodes;

}

Location: ExsltSets.java

Content: 

/** 

 * The set:trailing function returns the nodes in the node set passed as the first argument that follow, in document order, the first node in the node set passed as the second argument. If the first node in the second node set is not contained in the first node set, then an empty node set is returned. If the second node set is empty, then the first node set is returned.

 * @param nl1 NodeList for first node-set.

 * @param nl2 NodeList for second node-set.

 * @return a NodeList containing the nodes in nl1 that follow in document orderthe first node in nl2; an empty node-set if the first node in nl2 is not in nl1; all of nl1 if nl2 is empty.

 * @see <a href="http://www.exslt.org/">EXSLT</a>

 */

public static NodeList trailing(NodeList nl1,NodeList nl2){

  if (nl2.getLength() == 0)   return nl1;

  NodeSet ns1=new NodeSet(nl1);

  NodeSet trailNodes=new NodeSet();

  Node startNode=nl2.item(0);

  if (!ns1.contains(startNode))   return trailNodes;

  for (int i=0; i < nl1.getLength(); i++) {

    Node testNode=nl1.item(i);

    if (DOMHelper.isNodeAfter(startNode,testNode) && !DOMHelper.isNodeTheSame(startNode,testNode))     trailNodes.addElement(testNode);

  }

  return trailNodes;

}

