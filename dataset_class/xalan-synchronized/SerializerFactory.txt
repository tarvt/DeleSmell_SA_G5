Location: SerializerFactory.java

Content: 

/** 

 * Returns a serializer for the specified output method. The output method is specified by the value of the property associated with the "method" key. If no implementation exists that supports the specified output method an exception of some type will be thrown. For a list of the output "method" key values see  {@link Method}.

 * @param format The output format, minimally the "method" property must be set.

 * @return A suitable serializer.

 * @throws IllegalArgumentException if method is null or an appropriateserializer can't be found

 * @throws Exception                if the class for the serializer is found butdoes not implement ContentHandler.

 * @throws WrappedRuntimeException  if an exception is thrown while trying tofind serializer

 */

public static Serializer getSerializer(Properties format){

  Serializer ser;

  try {

    String method=format.getProperty(OutputKeys.METHOD);

    if (method == null) {

      String msg=Utils.messages.createMessage(MsgKey.ER_FACTORY_PROPERTY_MISSING,new Object[]{OutputKeys.METHOD});

      throw new IllegalArgumentException(msg);

    }

    String className=format.getProperty(OutputPropertiesFactory.S_KEY_CONTENT_HANDLER);

    if (null == className) {

      Properties methodDefaults=OutputPropertiesFactory.getDefaultMethodProperties(method);

      className=methodDefaults.getProperty(OutputPropertiesFactory.S_KEY_CONTENT_HANDLER);

      if (null == className) {

        String msg=Utils.messages.createMessage(MsgKey.ER_FACTORY_PROPERTY_MISSING,new Object[]{OutputPropertiesFactory.S_KEY_CONTENT_HANDLER});

        throw new IllegalArgumentException(msg);

      }

    }

    ClassLoader loader=ObjectFactory.findClassLoader();

    Class cls=ObjectFactory.findProviderClass(className,loader,true);

    Object obj=cls.newInstance();

    if (obj instanceof SerializationHandler) {

      ser=(Serializer)cls.newInstance();

      ser.setOutputFormat(format);

    }

 else {

      if (obj instanceof ContentHandler) {

        className=SerializerConstants.DEFAULT_SAX_SERIALIZER;

        cls=ObjectFactory.findProviderClass(className,loader,true);

        SerializationHandler sh=(SerializationHandler)cls.newInstance();

        sh.setContentHandler((ContentHandler)obj);

        sh.setOutputFormat(format);

        ser=sh;

      }

 else {

        throw new Exception(Utils.messages.createMessage(MsgKey.ER_SERIALIZER_NOT_CONTENTHANDLER,new Object[]{className}));

      }

    }

  }

 catch (  Exception e) {

    throw new org.apache.xml.serializer.utils.WrappedRuntimeException(e);

  }

  return ser;

}

Location: SerializerFactory.java

Content: 

/** 

 * This constructor is private just to prevent the creation of such an object.

 */

private SerializerFactory(){

}

