Location: SymbolTable.java

Content: 

public AttributeSet addAttributeSet(AttributeSet atts){

  if (_attributeSets == null)   _attributeSets=new Hashtable();

  return (AttributeSet)_attributeSets.put(atts.getName(),atts);

}

Location: SymbolTable.java

Content: 

public void addDecimalFormatting(QName name,DecimalFormatting symbols){

  if (_decimalFormats == null)   _decimalFormats=new Hashtable();

  _decimalFormats.put(name,symbols);

}

Location: SymbolTable.java

Content: 

public void addKey(QName name,Key key){

  if (_keys == null)   _keys=new Hashtable();

  _keys.put(name,key);

}

Location: SymbolTable.java

Content: 

/** 

 * Adds an alias for a namespace prefix

 */

public void addPrefixAlias(String prefix,String alias){

  if (_aliases == null)   _aliases=new Hashtable();

  _aliases.put(prefix,alias);

}

Location: SymbolTable.java

Content: 

/** 

 * Add a primitive operator or function to the symbol table. To avoid name clashes with user-defined names, the prefix <tt>PrimopPrefix</tt> is prepended.

 */

public void addPrimop(String name,MethodType mtype){

  Vector methods=(Vector)_primops.get(name);

  if (methods == null) {

    _primops.put(name,methods=new Vector());

  }

  methods.addElement(mtype);

}

Location: SymbolTable.java

Content: 

public Stylesheet addStylesheet(QName name,Stylesheet node){

  return (Stylesheet)_stylesheets.put(name,node);

}

Location: SymbolTable.java

Content: 

/** 

 * Exclude a series of namespaces given by a list of whitespace separated namespace prefixes.

 */

public void excludeNamespaces(String prefixes){

  if (prefixes != null) {

    StringTokenizer tokens=new StringTokenizer(prefixes);

    while (tokens.hasMoreTokens()) {

      final String prefix=tokens.nextToken();

      final String uri;

      if (prefix.equals("#default"))       uri=lookupNamespace(Constants.EMPTYSTRING);

 else       uri=lookupNamespace(prefix);

      if (uri != null)       excludeURI(uri);

    }

  }

}

Location: SymbolTable.java

Content: 

/** 

 * Register a namespace URI so that it will not be declared in the output unless it is actually referenced in the output.

 */

public void excludeURI(String uri){

  if (uri == null)   return;

  if (_excludedURI == null)   _excludedURI=new Hashtable();

  Integer refcnt=(Integer)_excludedURI.get(uri);

  if (refcnt == null)   refcnt=new Integer(1);

 else   refcnt=new Integer(refcnt.intValue() + 1);

  _excludedURI.put(uri,refcnt);

}

Location: SymbolTable.java

Content: 

public String generateNamespacePrefix(){

  return ("ns" + (_nsCounter++));

}

Location: SymbolTable.java

Content: 

public DecimalFormatting getDecimalFormatting(QName name){

  if (_decimalFormats == null)   return null;

  return ((DecimalFormatting)_decimalFormats.get(name));

}

Location: SymbolTable.java

Content: 

public Key getKey(QName name){

  if (_keys == null)   return null;

  return (Key)_keys.get(name);

}

Location: SymbolTable.java

Content: 

/** 

 * Check if a namespace should not be declared in the output (unless used)

 */

public boolean isExcludedNamespace(String uri){

  if (uri != null && _excludedURI != null) {

    final Integer refcnt=(Integer)_excludedURI.get(uri);

    return (refcnt != null && refcnt.intValue() > 0);

  }

  return false;

}

Location: SymbolTable.java

Content: 

public AttributeSet lookupAttributeSet(QName name){

  if (_attributeSets == null)   return null;

  return (AttributeSet)_attributeSets.get(name);

}

Location: SymbolTable.java

Content: 

public SyntaxTreeNode lookupName(QName qname){

  if (_variables == null)   return null;

  final String name=qname.getStringRep();

  return (SyntaxTreeNode)_variables.get(name);

}

Location: SymbolTable.java

Content: 

public Param lookupParam(QName qname){

  if (_variables == null)   return null;

  final String name=qname.getStringRep();

  final Object obj=_variables.get(name);

  return obj instanceof Param ? (Param)obj : null;

}

Location: SymbolTable.java

Content: 

/** 

 * Retrieves any alias for a given namespace prefix

 */

public String lookupPrefixAlias(String prefix){

  if (_aliases == null)   return null;

  return (String)_aliases.get(prefix);

}

Location: SymbolTable.java

Content: 

/** 

 * Lookup a primitive operator or function in the symbol table by prepending the prefix <tt>PrimopPrefix</tt>.

 */

public Vector lookupPrimop(String name){

  return (Vector)_primops.get(name);

}

Location: SymbolTable.java

Content: 

public Stylesheet lookupStylesheet(QName name){

  return (Stylesheet)_stylesheets.get(name);

}

Location: SymbolTable.java

Content: 

public Template lookupTemplate(QName name){

  if (_templates == null)   return null;

  return (Template)_templates.get(name);

}

Location: SymbolTable.java

Content: 

/** 

 * Exclusion of namespaces by a stylesheet does not extend to any stylesheet imported or included by the stylesheet. Upon exiting the context of a stylesheet, a call to this method is needed to restore the set of excluded namespaces that was in effect prior to entering the context of the current stylesheet.

 */

public void popExcludedNamespacesContext(){

  _excludedURI=(Hashtable)_excludedURIStack.pop();

  if (_excludedURIStack.isEmpty()) {

    _excludedURIStack=null;

  }

}

Location: SymbolTable.java

Content: 

/** 

 * Exclusion of namespaces by a stylesheet does not extend to any stylesheet imported or included by the stylesheet. Upon entering the context of a new stylesheet, a call to this method is needed to clear the current set of excluded namespaces temporarily. Every call to this method requires a corresponding call to  {@link #popExcludedNamespacesContext()}.

 */

public void pushExcludedNamespacesContext(){

  if (_excludedURIStack == null) {

    _excludedURIStack=new Stack();

  }

  _excludedURIStack.push(_excludedURI);

  _excludedURI=null;

}

Location: SymbolTable.java

Content: 

public void setCurrentNode(SyntaxTreeNode node){

  _current=node;

}

Location: SymbolTable.java

Content: 

/** 

 * Turn of namespace declaration exclusion

 */

public void unExcludeNamespaces(String prefixes){

  if (_excludedURI == null)   return;

  if (prefixes != null) {

    StringTokenizer tokens=new StringTokenizer(prefixes);

    while (tokens.hasMoreTokens()) {

      final String prefix=tokens.nextToken();

      final String uri;

      if (prefix.equals("#default"))       uri=lookupNamespace(Constants.EMPTYSTRING);

 else       uri=lookupNamespace(prefix);

      Integer refcnt=(Integer)_excludedURI.get(uri);

      if (refcnt != null)       _excludedURI.put(uri,new Integer(refcnt.intValue() - 1));

    }

  }

}

