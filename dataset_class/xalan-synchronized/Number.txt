Location: Number.java

Content: 

/** 

 * Add new variable to the closure.

 */

public void addVariable(VariableRefBase variableRef){

  if (_closureVars == null) {

    _closureVars=new ArrayList();

  }

  if (!_closureVars.contains(variableRef)) {

    _closureVars.add(variableRef);

  }

}

Location: Number.java

Content: 

/** 

 * Compiles a constructor for the class <tt>_className</tt> that inherits from {Any,Single,Multiple}NodeCounter. This constructor simply calls the same constructor in the super class.

 */

private void compileConstructor(ClassGenerator classGen){

  MethodGenerator cons;

  final InstructionList il=new InstructionList();

  final ConstantPoolGen cpg=classGen.getConstantPool();

  cons=new MethodGenerator(ACC_PUBLIC,org.apache.bcel.generic.Type.VOID,new org.apache.bcel.generic.Type[]{Util.getJCRefType(TRANSLET_INTF_SIG),Util.getJCRefType(DOM_INTF_SIG),Util.getJCRefType(NODE_ITERATOR_SIG)},new String[]{"dom","translet","iterator"},"<init>",_className,il,cpg);

  il.append(ALOAD_0);

  il.append(ALOAD_1);

  il.append(ALOAD_2);

  il.append(new ALOAD(3));

  int index=cpg.addMethodref(ClassNames[_level],"<init>","(" + TRANSLET_INTF_SIG + DOM_INTF_SIG+ NODE_ITERATOR_SIG+ ")V");

  il.append(new INVOKESPECIAL(index));

  il.append(RETURN);

  classGen.addMethod(cons);

}

Location: Number.java

Content: 

private void compileDefault(ClassGenerator classGen,MethodGenerator methodGen){

  int index;

  ConstantPoolGen cpg=classGen.getConstantPool();

  InstructionList il=methodGen.getInstructionList();

  int[] fieldIndexes=getXSLTC().getNumberFieldIndexes();

  if (fieldIndexes[_level] == -1) {

    Field defaultNode=new Field(ACC_PRIVATE,cpg.addUtf8(FieldNames[_level]),cpg.addUtf8(NODE_COUNTER_SIG),null,cpg.getConstantPool());

    classGen.addField(defaultNode);

    fieldIndexes[_level]=cpg.addFieldref(classGen.getClassName(),FieldNames[_level],NODE_COUNTER_SIG);

  }

  il.append(classGen.loadTranslet());

  il.append(new GETFIELD(fieldIndexes[_level]));

  final BranchHandle ifBlock1=il.append(new IFNONNULL(null));

  index=cpg.addMethodref(ClassNames[_level],"getDefaultNodeCounter","(" + TRANSLET_INTF_SIG + DOM_INTF_SIG+ NODE_ITERATOR_SIG+ ")"+ NODE_COUNTER_SIG);

  il.append(classGen.loadTranslet());

  il.append(methodGen.loadDOM());

  il.append(methodGen.loadIterator());

  il.append(new INVOKESTATIC(index));

  il.append(DUP);

  il.append(classGen.loadTranslet());

  il.append(SWAP);

  il.append(new PUTFIELD(fieldIndexes[_level]));

  final BranchHandle ifBlock2=il.append(new GOTO(null));

  ifBlock1.setTarget(il.append(classGen.loadTranslet()));

  il.append(new GETFIELD(fieldIndexes[_level]));

  ifBlock2.setTarget(il.append(NOP));

}

Location: Number.java

Content: 

/** 

 * This method compiles code that is common to matchesFrom() and matchesCount() in the auxillary class.

 */

private void compileLocals(NodeCounterGenerator nodeCounterGen,MatchGenerator matchGen,InstructionList il){

  int field;

  LocalVariableGen local;

  ConstantPoolGen cpg=nodeCounterGen.getConstantPool();

  local=matchGen.addLocalVariable("iterator",Util.getJCRefType(NODE_ITERATOR_SIG),null,null);

  field=cpg.addFieldref(NODE_COUNTER,"_iterator",ITERATOR_FIELD_SIG);

  il.append(ALOAD_0);

  il.append(new GETFIELD(field));

  local.setStart(il.append(new ASTORE(local.getIndex())));

  matchGen.setIteratorIndex(local.getIndex());

  local=matchGen.addLocalVariable("translet",Util.getJCRefType(TRANSLET_SIG),null,null);

  field=cpg.addFieldref(NODE_COUNTER,"_translet","Lorg/apache/xalan/xsltc/Translet;");

  il.append(ALOAD_0);

  il.append(new GETFIELD(field));

  il.append(new CHECKCAST(cpg.addClass(TRANSLET_CLASS)));

  local.setStart(il.append(new ASTORE(local.getIndex())));

  nodeCounterGen.setTransletIndex(local.getIndex());

  local=matchGen.addLocalVariable("document",Util.getJCRefType(DOM_INTF_SIG),null,null);

  field=cpg.addFieldref(_className,"_document",DOM_INTF_SIG);

  il.append(ALOAD_0);

  il.append(new GETFIELD(field));

  local.setStart(il.append(new ASTORE(local.getIndex())));

  matchGen.setDomIndex(local.getIndex());

}

Location: Number.java

Content: 

private void compilePatterns(ClassGenerator classGen,MethodGenerator methodGen){

  int current;

  int field;

  LocalVariableGen local;

  MatchGenerator matchGen;

  NodeCounterGenerator nodeCounterGen;

  _className=getXSLTC().getHelperClassName();

  nodeCounterGen=new NodeCounterGenerator(_className,ClassNames[_level],toString(),ACC_PUBLIC | ACC_SUPER,null,classGen.getStylesheet());

  InstructionList il=null;

  ConstantPoolGen cpg=nodeCounterGen.getConstantPool();

  final int closureLen=(_closureVars == null) ? 0 : _closureVars.size();

  for (int i=0; i < closureLen; i++) {

    VariableBase var=((VariableRefBase)_closureVars.get(i)).getVariable();

    nodeCounterGen.addField(new Field(ACC_PUBLIC,cpg.addUtf8(var.getEscapedName()),cpg.addUtf8(var.getType().toSignature()),null,cpg.getConstantPool()));

  }

  compileConstructor(nodeCounterGen);

  if (_from != null) {

    il=new InstructionList();

    matchGen=new MatchGenerator(ACC_PUBLIC | ACC_FINAL,org.apache.bcel.generic.Type.BOOLEAN,new org.apache.bcel.generic.Type[]{org.apache.bcel.generic.Type.INT},new String[]{"node"},"matchesFrom",_className,il,cpg);

    compileLocals(nodeCounterGen,matchGen,il);

    il.append(matchGen.loadContextNode());

    _from.translate(nodeCounterGen,matchGen);

    _from.synthesize(nodeCounterGen,matchGen);

    il.append(IRETURN);

    nodeCounterGen.addMethod(matchGen);

  }

  if (_count != null) {

    il=new InstructionList();

    matchGen=new MatchGenerator(ACC_PUBLIC | ACC_FINAL,org.apache.bcel.generic.Type.BOOLEAN,new org.apache.bcel.generic.Type[]{org.apache.bcel.generic.Type.INT},new String[]{"node"},"matchesCount",_className,il,cpg);

    compileLocals(nodeCounterGen,matchGen,il);

    il.append(matchGen.loadContextNode());

    _count.translate(nodeCounterGen,matchGen);

    _count.synthesize(nodeCounterGen,matchGen);

    il.append(IRETURN);

    nodeCounterGen.addMethod(matchGen);

  }

  getXSLTC().dumpClass(nodeCounterGen.getJavaClass());

  cpg=classGen.getConstantPool();

  il=methodGen.getInstructionList();

  final int index=cpg.addMethodref(_className,"<init>","(" + TRANSLET_INTF_SIG + DOM_INTF_SIG+ NODE_ITERATOR_SIG+ ")V");

  il.append(new NEW(cpg.addClass(_className)));

  il.append(DUP);

  il.append(classGen.loadTranslet());

  il.append(methodGen.loadDOM());

  il.append(methodGen.loadIterator());

  il.append(new INVOKESPECIAL(index));

  for (int i=0; i < closureLen; i++) {

    final VariableRefBase varRef=(VariableRefBase)_closureVars.get(i);

    final VariableBase var=varRef.getVariable();

    final Type varType=var.getType();

    il.append(DUP);

    il.append(var.loadInstruction());

    il.append(new PUTFIELD(cpg.addFieldref(_className,var.getEscapedName(),varType.toSignature())));

  }

}

Location: Number.java

Content: 

/** 

 * Returns the name of the auxiliary class or null if this predicate is compiled inside the Translet.

 */

public String getInnerClassName(){

  return _className;

}

Location: Number.java

Content: 

/** 

 * Returns a reference to its parent closure or null if outermost.

 */

public Closure getParentClosure(){

  return null;

}

Location: Number.java

Content: 

/** 

 * True if the has specified a value for this instance of number.

 */

public boolean hasValue(){

  return _value != null;

}

Location: Number.java

Content: 

/** 

 * Returns true if this closure is compiled in an inner class (i.e. if this is a real closure).

 */

public boolean inInnerClass(){

  return (_className != null);

}

Location: Number.java

Content: 

/** 

 * Returns <tt>true</tt> if this instance of number has neither a from nor a count pattern.

 */

public boolean isDefault(){

  return _from == null && _count == null;

}

