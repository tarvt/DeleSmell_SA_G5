Location: AxesWalker.java

Content: 

/** 

 * Construct an AxesWalker using a LocPathIterator.

 * @param locPathIterator non-null reference to the parent iterator.

 */

public AxesWalker(LocPathIterator locPathIterator,int axis){

  super(locPathIterator);

  m_axis=axis;

}

Location: AxesWalker.java

Content: 

/** 

 * Do a deep clone of this walker, including next and previous walkers. If the this AxesWalker is on the clone list, don't clone but return the already cloned version.

 * @param cloneOwner non-null reference to the cloned location path iterator towhich this clone will be added.

 * @param cloneList  non-null vector of sources in odd elements, and thecorresponding clones in even vectors.

 * @return non-null clone, which may be a new clone, or may be a clone containedon the cloneList.

 */

AxesWalker cloneDeep(WalkingIterator cloneOwner,Vector cloneList) throws CloneNotSupportedException {

  AxesWalker clone=findClone(this,cloneList);

  if (null != clone)   return clone;

  clone=(AxesWalker)this.clone();

  clone.setLocPathIterator(cloneOwner);

  if (null != cloneList) {

    cloneList.addElement(this);

    cloneList.addElement(clone);

  }

  if (wi().m_lastUsedWalker == this)   cloneOwner.m_lastUsedWalker=clone;

  if (null != m_nextWalker)   clone.m_nextWalker=m_nextWalker.cloneDeep(cloneOwner,cloneList);

  if (null != cloneList) {

    if (null != m_prevWalker)     clone.m_prevWalker=m_prevWalker.cloneDeep(cloneOwner,cloneList);

  }

 else {

    if (null != m_nextWalker)     clone.m_nextWalker.m_prevWalker=clone;

  }

  return clone;

}

Location: AxesWalker.java

Content: 

/** 

 * Find a clone that corresponds to the key argument.

 * @param key       The original AxesWalker for which there may be a clone.

 * @param cloneList vector of sources in odd elements, and the correspondingclones in even vectors, may be null.

 * @return A clone that corresponds to the key, or null if key not found.

 */

static AxesWalker findClone(AxesWalker key,Vector cloneList){

  if (null != cloneList) {

    int n=cloneList.size();

    for (int i=0; i < n; i+=2) {

      if (key == cloneList.elementAt(i))       return (AxesWalker)cloneList.elementAt(i + 1);

    }

  }

  return null;

}

Location: AxesWalker.java

Content: 

/** 

 * The node at which the TreeWalker is currently positioned. <br> The value must not be null. Alterations to the DOM tree may cause the current node to no longer be accepted by the TreeWalker's associated filter. currentNode may also be explicitly set to any node, whether or not it is within the subtree specified by the root node or would be accepted by the filter and whatToShow flags. Further traversal occurs relative to currentNode even if it is not part of the current view by applying the filters in the requested direction (not changing currentNode where no traversal is possible).

 * @return The node at which the TreeWalker is currently positioned, only nullif setRoot has not yet been called.

 */

public final int getCurrentNode(){

  return m_currentNode;

}

Location: AxesWalker.java

Content: 

/** 

 * Get the DTM for this walker.

 * @return Non-null reference to a DTM.

 */

public DTM getDTM(int node){

  return wi().getXPathContext().getDTM(node);

}

Location: AxesWalker.java

Content: 

/** 

 * Get the next walker in the location step chain.

 * @return Reference to AxesWalker derivative, or null.

 */

public AxesWalker getNextWalker(){

  return m_nextWalker;

}

Location: AxesWalker.java

Content: 

/** 

 * Get the previous walker reference in the location step chain.

 * @return Reference to previous walker reference in the location step chain, ornull.

 */

public AxesWalker getPrevWalker(){

  return m_prevWalker;

}

Location: AxesWalker.java

Content: 

/** 

 * The root node of the TreeWalker, as specified in setRoot(int root). Note that this may actually be below the current node.

 * @return The context node of the step.

 */

public int getRoot(){

  return m_root;

}

Location: AxesWalker.java

Content: 

/** 

 * Initialize an AxesWalker during the parse of the XPath expression.

 * @param compiler The Compiler object that has information about this walker inthe op map.

 * @param opPos    The op code position of this location step.

 * @param stepType The type of location step.

 * @throws javax.xml.transform.TransformerException

 */

public void init(Compiler compiler,int opPos,int stepType) throws javax.xml.transform.TransformerException {

  initPredicateInfo(compiler,opPos);

}

Location: AxesWalker.java

Content: 

/** 

 * Returns true if all the nodes in the iteration well be returned in document order. Warning: This can only be called after setRoot has been called!

 * @return true as a default.

 */

public boolean isDocOrdered(){

  return true;

}

Location: AxesWalker.java

Content: 

/** 

 * This is simply a way to bottle-neck the return of the next node, for diagnostic purposes.

 * @param n Node to return, or null.

 * @return The argument.

 */

private int returnNextNode(int n){

  return n;

}

Location: AxesWalker.java

Content: 

/** 

 * Set the DTM for this walker.

 * @param dtm Non-null reference to a DTM.

 */

public void setDefaultDTM(DTM dtm){

  m_dtm=dtm;

}

Location: AxesWalker.java

Content: 

/** 

 * Set the next walker in the location step chain.

 * @param walker Reference to AxesWalker derivative, or may be null.

 */

public void setNextWalker(AxesWalker walker){

  m_nextWalker=walker;

}

Location: AxesWalker.java

Content: 

/** 

 * Set or clear the previous walker reference in the location step chain.

 * @param walker Reference to previous walker reference in the location stepchain, or null.

 */

public void setPrevWalker(AxesWalker walker){

  m_prevWalker=walker;

}

Location: AxesWalker.java

Content: 

/** 

 * Set the root node of the TreeWalker. (Not part of the DOM2 TreeWalker interface).

 * @param root The context node of this step.

 */

public void setRoot(int root){

  XPathContext xctxt=wi().getXPathContext();

  m_dtm=xctxt.getDTM(root);

  m_traverser=m_dtm.getAxisTraverser(m_axis);

  m_isFresh=true;

  m_foundLast=false;

  m_root=root;

  m_currentNode=root;

  if (DTM.NULL == root) {

    throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_SETTING_WALKER_ROOT_TO_NULL,null));

  }

  resetProximityPositions();

}

Location: AxesWalker.java

Content: 

public final WalkingIterator wi(){

  return (WalkingIterator)m_lpi;

}

