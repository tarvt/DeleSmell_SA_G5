Location: StylesheetRoot.java

Content: 

/** 

 * Add the imports in the given sheet to the working importList vector. The will be added from highest import precedence to least import precedence. This is a post-order traversal of the import tree as described in <a href="http://www.w3.org/TR/xslt.html#import">the XSLT Recommendation</a>. <p> For example, suppose </p> <p> stylesheet A imports stylesheets B and C in that order; </p> <p> stylesheet B imports stylesheet D; </p> <p> stylesheet C imports stylesheet E. </p> <p> Then the order of import precedence (highest first) is A, C, E, B, D. </p>

 * @param stylesheet Stylesheet to examine for imports.

 * @param addToList  <code>true</code> if this template should be added to theimport list

 * @param importList The working import list. Templates are added here in thereverse order of priority. When we're all done, we'll reverse this to the correct priority in an array.

 */

protected void addImports(Stylesheet stylesheet,boolean addToList,Vector importList){

  int n=stylesheet.getImportCount();

  if (n > 0) {

    for (int i=0; i < n; i++) {

      Stylesheet imported=stylesheet.getImport(i);

      addImports(imported,true,importList);

    }

  }

  n=stylesheet.getIncludeCount();

  if (n > 0) {

    for (int i=0; i < n; i++) {

      Stylesheet included=stylesheet.getInclude(i);

      addImports(included,false,importList);

    }

  }

  if (addToList)   importList.addElement(stylesheet);

}

Location: StylesheetRoot.java

Content: 

/** 

 * Clear the compose state.

 */

private void clearComposeState(){

  m_composeState=null;

}

Location: StylesheetRoot.java

Content: 

/** 

 * Call the compose function for each ElemTemplateElement.

 * @param templ non-null reference to template element that will have thecomposed method called on it, and will have it's children's composed methods called.

 */

void composeTemplates(ElemTemplateElement templ) throws TransformerException {

  templ.compose(this);

  for (ElemTemplateElement child=templ.getFirstChildElem(); child != null; child=child.getNextSiblingElem()) {

    composeTemplates(child);

  }

  templ.endCompose(this);

}

Location: StylesheetRoot.java

Content: 

/** 

 * Get a list "xsl:attribute-set" properties that match the qname.

 * @see <a href="http://www.w3.org/TR/xslt#attribute-sets">attribute-sets in

	 *      XSLT Specification</a>

 * @param name Qualified name of attribute set properties to get

 * @return A vector of attribute sets matching the given name

 * @throws ArrayIndexOutOfBoundsException

 */

public ArrayList getAttributeSetComposed(QName name) throws ArrayIndexOutOfBoundsException {

  return (ArrayList)m_attrSets.get(name);

}

Location: StylesheetRoot.java

Content: 

/** 

 * Get the hashtable of available elements.

 * @return table of available elements, keyed by qualified names, and withvalues of the same qualified names.

 */

public HashMap getAvailableElements(){

  return m_availElems;

}

Location: StylesheetRoot.java

Content: 

/** 

 * Return class to track state global state during the compose() operation.

 * @return ComposeState reference, or null if endCompose has been called.

 */

ComposeState getComposeState(){

  return m_composeState;

}

Location: StylesheetRoot.java

Content: 

/** 

 * Given a valid element decimal-format name, return the decimalFormatSymbols with that name. <p> It is an error to declare either the default decimal-format or a decimal-format with a given name more than once (even with different import precedence), unless it is declared every time with the same value for all attributes (taking into account any default values). </p> <p> Which means, as far as I can tell, the decimal-format properties are not additive. </p>

 * @param name Qualified name of the decimal format to find

 * @return DecimalFormatSymbols object matching the given name or null if nameis not found.

 */

public DecimalFormatSymbols getDecimalFormatComposed(QName name){

  return (DecimalFormatSymbols)m_decimalFormatSymbols.get(name);

}

Location: StylesheetRoot.java

Content: 

public Properties getDefaultOutputProps(){

  return m_outputProperties.getProperties();

}

Location: StylesheetRoot.java

Content: 

/** 

 * Get the default template for a root node.

 * @return The default template for a root node.

 * @xsl.usage advanced

 */

public final ElemTemplate getDefaultRootRule(){

  return m_defaultRootRule;

}

Location: StylesheetRoot.java

Content: 

/** 

 * Get the default template for elements.

 * @return the default template for elements.

 * @xsl.usage advanced

 */

public final ElemTemplate getDefaultRule(){

  return m_defaultRule;

}

Location: StylesheetRoot.java

Content: 

/** 

 * Get the default template for text.

 * @return the default template for text.

 * @xsl.usage advanced

 */

public final ElemTemplate getDefaultTextRule(){

  return m_defaultTextRule;

}

Location: StylesheetRoot.java

Content: 

/** 

 * @xsl.usage internal

 */

public String getExtensionHandlerClass(){

  return m_extensionHandlerClass;

}

Location: StylesheetRoot.java

Content: 

/** 

 * Only instantiate an ExtensionNamespacesManager if one is called for (i.e., if the stylesheet contains extension functions and/or elements).

 */

public ExtensionNamespacesManager getExtensionNamespacesManager(){

  if (m_extNsMgr == null)   m_extNsMgr=new ExtensionNamespacesManager();

  return m_extNsMgr;

}

Location: StylesheetRoot.java

Content: 

/** 

 * Get the vector of extension namespaces. Used to provide the extensions table access to a list of extension namespaces encountered during composition of a stylesheet.

 */

public Vector getExtensions(){

  return m_extNsMgr != null ? m_extNsMgr.getExtensions() : null;

}

Location: StylesheetRoot.java

Content: 

/** 

 * Get the total number of imports in the global import list.

 * @return The total number of imported stylesheets, including the rootstylesheet, thus the number will always be 1 or greater. TODO: JKESS PROPOSES SPECIAL-CASE FOR NO IMPORT LIST, TO MATCH DESCRIPTION.

 */

public int getGlobalImportCount(){

  return (m_globalImportList != null) ? m_globalImportList.length : 1;

}

Location: StylesheetRoot.java

Content: 

/** 

 * Get a stylesheet from the global import list. TODO: JKESS PROPOSES SPECIAL-CASE FOR NO IMPORT LIST, TO MATCH COUNT.

 * @param i Index of stylesheet to get from global import list

 * @return The stylesheet at the given index

 */

public StylesheetComposed getGlobalImport(int i){

  return m_globalImportList[i];

}

Location: StylesheetRoot.java

Content: 

/** 

 * Given a stylesheet, return the number of the stylesheet in the global import list.

 * @param sheet The stylesheet which will be located in the global import list.

 * @return The index into the global import list of the given stylesheet, or -1if it is not found (which should never happen).

 */

public int getImportNumber(StylesheetComposed sheet){

  if (this == sheet)   return 0;

  int n=getGlobalImportCount();

  for (int i=0; i < n; i++) {

    if (sheet == getGlobalImport(i))     return i;

  }

  return -1;

}

Location: StylesheetRoot.java

Content: 

/** 

 * Get the composed "xsl:key" properties.

 * @see <a href="http://www.w3.org/TR/xslt#key">key in XSLT Specification</a>

 * @return A vector of the composed "xsl:key" properties.

 */

public Vector getKeysComposed(){

  return m_keyDecls;

}

Location: StylesheetRoot.java

Content: 

/** 

 * Get the "xsl:namespace-alias" property. Return the NamespaceAlias for a given namespace uri.

 * @see <a href=

	 *      "http://www.w3.org/TR/xslt#literal-result-element">literal-result-element

	 *      in XSLT Specification</a>

 * @param uri non-null reference to namespace that is to be aliased.

 * @return NamespaceAlias that matches uri, or null if no match.

 */

public NamespaceAlias getNamespaceAliasComposed(String uri){

  return (NamespaceAlias)((null == m_namespaceAliasComposed) ? null : m_namespaceAliasComposed.get(uri));

}

Location: StylesheetRoot.java

Content: 

/** 

 * @return Optimization flag

 */

public boolean getOptimizer(){

  return m_optimizer;

}

Location: StylesheetRoot.java

Content: 

/** 

 * Get the combined "xsl:output" property with the properties combined from the included stylesheets. If a xsl:output is not declared in this stylesheet or an included stylesheet, look in the imports. Please note that this returns a reference to the OutputProperties object, not a cloned object, like getOutputProperties does.

 * @see <a href="http://www.w3.org/TR/xslt#output">output in XSLT

	 *      Specification</a>

 * @return non-null reference to composed output properties object.

 */

public OutputProperties getOutputComposed(){

  return m_outputProperties;

}

Location: StylesheetRoot.java

Content: 

/** 

 * Get the default template for a root node.

 * @return The default template for a root node.

 * @xsl.usage advanced

 */

public final ElemTemplate getStartRule(){

  return m_startRule;

}

Location: StylesheetRoot.java

Content: 

/** 

 * Get an "xsl:template" property. This looks in the imports as well as this stylesheet.

 * @see <a href=

	 *      "http://www.w3.org/TR/xslt#section-Defining-Template-Rules">section-Defining-Template-Rules

	 *      in XSLT Specification</a>

 * @param qname non-null reference to qualified name of template.

 * @return reference to named template, or null if not found.

 */

public ElemTemplate getTemplateComposed(QName qname){

  return m_templateList.getTemplate(qname);

}

Location: StylesheetRoot.java

Content: 

/** 

 * Get an "xsl:template" property by node match. This looks in the imports as well as this stylesheet.

 * @see <a href=

	 *      "http://www.w3.org/TR/xslt#section-Defining-Template-Rules">section-Defining-Template-Rules

	 *      in XSLT Specification</a>

 * @param xctxt                 non-null reference to XPath runtime executioncontext.

 * @param targetNode            non-null reference of node that the templatemust match.

 * @param mode                  qualified name of the node, or null.

 * @param quietConflictWarnings true if conflict warnings should not bereported.

 * @return reference to ElemTemplate that is the best match for targetNode, ornull if no match could be made.

 * @throws TransformerException

 */

public ElemTemplate getTemplateComposed(XPathContext xctxt,int targetNode,QName mode,boolean quietConflictWarnings,DTM dtm) throws TransformerException {

  return m_templateList.getTemplate(xctxt,targetNode,mode,quietConflictWarnings,dtm);

}

Location: StylesheetRoot.java

Content: 

/** 

 * Get an "xsl:template" property by node match. This looks in the imports as well as this stylesheet.

 * @see <a href=

	 *      "http://www.w3.org/TR/xslt#section-Defining-Template-Rules">section-Defining-Template-Rules

	 *      in XSLT Specification</a>

 * @param xctxt                 non-null reference to XPath runtime executioncontext.

 * @param targetNode            non-null reference of node that the templatemust match.

 * @param mode                  qualified name of the node, or null.

 * @param maxImportLevel        The maximum importCountComposed that we shouldconsider or -1 if we should consider all import levels. This is used by apply-imports to access templates that have been overridden.

 * @param endImportLevel        The count of composed imports

 * @param quietConflictWarnings true if conflict warnings should not bereported.

 * @return reference to ElemTemplate that is the best match for targetNode, ornull if no match could be made.

 * @throws TransformerException

 */

public ElemTemplate getTemplateComposed(XPathContext xctxt,int targetNode,QName mode,int maxImportLevel,int endImportLevel,boolean quietConflictWarnings,DTM dtm) throws TransformerException {

  return m_templateList.getTemplate(xctxt,targetNode,mode,maxImportLevel,endImportLevel,quietConflictWarnings,dtm);

}

Location: StylesheetRoot.java

Content: 

/** 

 * Accessor method to retrieve the <code>TemplateList</code> associated with this StylesheetRoot.

 * @return The composed <code>TemplateList</code>.

 */

public final TemplateList getTemplateListComposed(){

  return m_templateList;

}

Location: StylesheetRoot.java

Content: 

/** 

 * Get an "xsl:variable" property.

 * @see <a href=

	 *      "http://www.w3.org/TR/xslt#top-level-variables">top-level-variables in

	 *      XSLT Specification</a>

 * @param qname Qualified name of variable or param

 * @return The ElemVariable with the given qualified name

 */

public ElemVariable getVariableOrParamComposed(QName qname){

  if (null != m_variables) {

    int n=m_variables.size();

    for (int i=0; i < n; i++) {

      ElemVariable var=(ElemVariable)m_variables.elementAt(i);

      if (var.getName().equals(qname))       return var;

    }

  }

  return null;

}

Location: StylesheetRoot.java

Content: 

/** 

 * Get all global "xsl:variable" properties in scope for this stylesheet.

 * @see <a href=

	 *      "http://www.w3.org/TR/xslt#top-level-variables">top-level-variables in

	 *      XSLT Specification</a>

 * @return Vector of all variables and params in scope

 */

public Vector getVariablesAndParamsComposed(){

  return m_variables;

}

Location: StylesheetRoot.java

Content: 

/** 

 * Get information about whether or not an element should strip whitespace.

 * @see <a href="http://www.w3.org/TR/xslt#strip">strip in XSLT

	 *      Specification</a>

 * @param support       The XPath runtime state.

 * @param targetElement Element to check

 * @return WhiteSpaceInfo for the given element

 * @throws TransformerException

 */

public WhiteSpaceInfo getWhiteSpaceInfo(XPathContext support,int targetElement,DTM dtm) throws TransformerException {

  if (null != m_whiteSpaceInfoList)   return (WhiteSpaceInfo)m_whiteSpaceInfoList.getTemplate(support,targetElement,null,false,dtm);

 else   return null;

}

Location: StylesheetRoot.java

Content: 

/** 

 * Initialize a new ComposeState.

 */

void initComposeState(){

  m_composeState=new ComposeState();

}

Location: StylesheetRoot.java

Content: 

/** 

 * Create the default rule if needed.

 * @throws TransformerException

 */

private void initDefaultRule(ErrorListener errorListener) throws TransformerException {

  m_defaultRule=new ElemTemplate();

  m_defaultRule.setStylesheet(this);

  XPath defMatch=new XPath("*",this,this,XPath.MATCH,errorListener);

  m_defaultRule.setMatch(defMatch);

  ElemApplyTemplates childrenElement=new ElemApplyTemplates();

  childrenElement.setIsDefaultTemplate(true);

  childrenElement.setSelect(m_selectDefault);

  m_defaultRule.appendChild(childrenElement);

  m_startRule=m_defaultRule;

  m_defaultTextRule=new ElemTemplate();

  m_defaultTextRule.setStylesheet(this);

  defMatch=new XPath("text() | @*",this,this,XPath.MATCH,errorListener);

  m_defaultTextRule.setMatch(defMatch);

  ElemValueOf elemValueOf=new ElemValueOf();

  m_defaultTextRule.appendChild(elemValueOf);

  XPath selectPattern=new XPath(".",this,this,XPath.SELECT,errorListener);

  elemValueOf.setSelect(selectPattern);

  m_defaultRootRule=new ElemTemplate();

  m_defaultRootRule.setStylesheet(this);

  defMatch=new XPath("/",this,this,XPath.MATCH,errorListener);

  m_defaultRootRule.setMatch(defMatch);

  childrenElement=new ElemApplyTemplates();

  childrenElement.setIsDefaultTemplate(true);

  m_defaultRootRule.appendChild(childrenElement);

  childrenElement.setSelect(m_selectDefault);

}

Location: StylesheetRoot.java

Content: 

/** 

 * Find out if an output method has been set by the user.

 * @return Value indicating whether an output method has been set by the user

 * @xsl.usage internal

 */

public boolean isOutputMethodSet(){

  return m_outputMethodSet;

}

Location: StylesheetRoot.java

Content: 

/** 

 * This is a generic version of C.A.R Hoare's Quick Sort algorithm. This will handle arrays that are already sorted, and arrays with duplicate keys. It was lifted from the NodeSorter class but should probably be eliminated and replaced with a call to Collections.sort when we migrate to Java2.<BR> If you think of a one dimensional array as going from the lowest index on the left to the highest index on the right then the parameters to this function are lowest index or left and highest index or right. The first time you call this function it will be with the parameters 0, a.length - 1.

 * @param v   a vector of ElemTemplateElement elements

 * @param lo0 left boundary of partition

 * @param hi0 right boundary of partition

 */

private void QuickSort2(Vector v,int lo0,int hi0){

  int lo=lo0;

  int hi=hi0;

  if (hi0 > lo0) {

    ElemTemplateElement midNode=(ElemTemplateElement)v.elementAt((lo0 + hi0) / 2);

    while (lo <= hi) {

      while ((lo < hi0) && (((ElemTemplateElement)v.elementAt(lo)).compareTo(midNode) < 0)) {

        ++lo;

      }

      while ((hi > lo0) && (((ElemTemplateElement)v.elementAt(hi)).compareTo(midNode) > 0)) {

        --hi;

      }

      if (lo <= hi) {

        ElemTemplateElement node=(ElemTemplateElement)v.elementAt(lo);

        v.setElementAt(v.elementAt(hi),lo);

        v.setElementAt(node,hi);

        ++lo;

        --hi;

      }

    }

    if (lo0 < hi) {

      QuickSort2(v,lo0,hi);

    }

    if (lo < hi0) {

      QuickSort2(v,lo,hi0);

    }

  }

}

Location: StylesheetRoot.java

Content: 

/** 

 * Recompose the values of all "composed" properties, meaning properties that need to be combined or calculated from the combination of imported and included stylesheets. This method determines the proper import precedence of all imported stylesheets. It then iterates through all of the elements and properties in the proper order and triggers the individual recompose methods.

 * @throws TransformerException

 */

public void recompose() throws TransformerException {

  Vector recomposableElements=new Vector();

  if (null == m_globalImportList) {

    Vector importList=new Vector();

    addImports(this,true,importList);

    m_globalImportList=new StylesheetComposed[importList.size()];

    for (int i=0, j=importList.size() - 1; i < importList.size(); i++) {

      m_globalImportList[j]=(StylesheetComposed)importList.elementAt(i);

      m_globalImportList[j].recomposeIncludes(m_globalImportList[j]);

      m_globalImportList[j--].recomposeImports();

    }

  }

  int n=getGlobalImportCount();

  for (int i=0; i < n; i++) {

    StylesheetComposed imported=getGlobalImport(i);

    imported.recompose(recomposableElements);

  }

  QuickSort2(recomposableElements,0,recomposableElements.size() - 1);

  m_outputProperties=new OutputProperties(org.apache.xml.serializer.Method.UNKNOWN);

  m_attrSets=new HashMap();

  m_decimalFormatSymbols=new Hashtable();

  m_keyDecls=new Vector();

  m_namespaceAliasComposed=new Hashtable();

  m_templateList=new TemplateList();

  m_variables=new Vector();

  for (int i=recomposableElements.size() - 1; i >= 0; i--)   ((ElemTemplateElement)recomposableElements.elementAt(i)).recompose(this);

  initComposeState();

  m_templateList.compose(this);

  m_outputProperties.compose(this);

  m_outputProperties.endCompose(this);

  n=getGlobalImportCount();

  for (int i=0; i < n; i++) {

    StylesheetComposed imported=this.getGlobalImport(i);

    int includedCount=imported.getIncludeCountComposed();

    for (int j=-1; j < includedCount; j++) {

      Stylesheet included=imported.getIncludeComposed(j);

      composeTemplates(included);

    }

  }

  if (m_extNsMgr != null)   m_extNsMgr.registerUnregisteredNamespaces();

  clearComposeState();

}

Location: StylesheetRoot.java

Content: 

/** 

 * Recompose the attribute-set declarations.

 * @param attrSet An attribute-set to add to the hashtable of attribute sets.

 */

void recomposeAttributeSets(ElemAttributeSet attrSet){

  ArrayList attrSetList=(ArrayList)m_attrSets.get(attrSet.getName());

  if (null == attrSetList) {

    attrSetList=new ArrayList();

    m_attrSets.put(attrSet.getName(),attrSetList);

  }

  attrSetList.add(attrSet);

}

Location: StylesheetRoot.java

Content: 

/** 

 * Recompose the decimal-format declarations.

 * @param dfp A DecimalFormatProperties to add to the hashtable of decimalformats.

 */

void recomposeDecimalFormats(DecimalFormatProperties dfp){

  DecimalFormatSymbols oldDfs=(DecimalFormatSymbols)m_decimalFormatSymbols.get(dfp.getName());

  if (null == oldDfs) {

    m_decimalFormatSymbols.put(dfp.getName(),dfp.getDecimalFormatSymbols());

  }

 else   if (!dfp.getDecimalFormatSymbols().equals(oldDfs)) {

    String themsg;

    if (dfp.getName().equals(new QName(""))) {

      themsg=XSLMessages.createWarning(XSLTErrorResources.WG_ONE_DEFAULT_XSLDECIMALFORMAT_ALLOWED,new Object[0]);

    }

 else {

      themsg=XSLMessages.createWarning(XSLTErrorResources.WG_XSLDECIMALFORMAT_NAMES_MUST_BE_UNIQUE,new Object[]{dfp.getName()});

    }

    error(themsg);

  }

}

Location: StylesheetRoot.java

Content: 

/** 

 * Recompose the key declarations.

 * @param keyDecl A KeyDeclaration to be added to the vector of keydeclarations.

 */

void recomposeKeys(KeyDeclaration keyDecl){

  m_keyDecls.addElement(keyDecl);

}

Location: StylesheetRoot.java

Content: 

/** 

 * Recompose the namespace-alias declarations.

 * @param nsAlias A NamespaceAlias object to add to the hashtable of namespacealiases.

 */

void recomposeNamespaceAliases(NamespaceAlias nsAlias){

  m_namespaceAliasComposed.put(nsAlias.getStylesheetNamespace(),nsAlias);

}

Location: StylesheetRoot.java

Content: 

/** 

 * Recompose the output format object from the included elements.

 * @param oprops non-null reference to xsl:output properties representation.

 */

void recomposeOutput(OutputProperties oprops) throws TransformerException {

  m_outputProperties.copyFrom(oprops);

}

Location: StylesheetRoot.java

Content: 

/** 

 * Recompose the template declarations.

 * @param template An ElemTemplate object to add to the template list.

 */

void recomposeTemplates(ElemTemplate template){

  m_templateList.setTemplate(template);

}

Location: StylesheetRoot.java

Content: 

/** 

 * Recompose the top level variable and parameter declarations.

 * @param elemVar A top level variable or parameter to be added to the Vector.

 */

void recomposeVariables(ElemVariable elemVar){

  if (getVariableOrParamComposed(elemVar.getName()) == null) {

    elemVar.setIsTopLevel(true);

    elemVar.setIndex(m_variables.size());

    m_variables.addElement(elemVar);

  }

}

Location: StylesheetRoot.java

Content: 

/** 

 * Recompose the strip-space and preserve-space declarations.

 * @param wsi A WhiteSpaceInfo element to add to the list of WhiteSpaceInfoelements.

 */

void recomposeWhiteSpaceInfo(WhiteSpaceInfo wsi){

  if (null == m_whiteSpaceInfoList)   m_whiteSpaceInfoList=new TemplateList();

  m_whiteSpaceInfoList.setTemplate(wsi);

}

Location: StylesheetRoot.java

Content: 

/** 

 * This internal method allows the setting of the java class to handle the extension function (if other than the default one).

 * @xsl.usage internal

 */

public String setExtensionHandlerClass(String handlerClassName){

  String oldvalue=m_extensionHandlerClass;

  m_extensionHandlerClass=handlerClassName;

  return oldvalue;

}

Location: StylesheetRoot.java

Content: 

/** 

 * @param b Optimization flag

 */

public void setOptimizer(boolean b){

  m_optimizer=b;

}

Location: StylesheetRoot.java

Content: 

/** 

 * Mutator method to set the <code>TemplateList</code> associated with this StylesheetRoot. This method should only be used by the compiler. Normally, the template list is built during the recompose process and should not be altered by the user.

 * @param templateList The new <code>TemplateList</code> for thisStylesheetRoot.

 */

public final void setTemplateListComposed(TemplateList templateList){

  m_templateList=templateList;

}

Location: StylesheetRoot.java

Content: 

/** 

 * Check to see if the caller should bother with check for whitespace nodes.

 * @return Whether the caller should bother with check for whitespace nodes.

 */

public boolean shouldCheckWhitespace(){

  return null != m_whiteSpaceInfoList;

}

Location: StylesheetRoot.java

Content: 

/** 

 * Get information about whether or not an element should strip whitespace.

 * @see <a href="http://www.w3.org/TR/xslt#strip">strip in XSLT

	 *      Specification</a>

 * @param support       The XPath runtime state.

 * @param targetElement Element to check

 * @return true if the whitespace should be stripped.

 * @throws TransformerException

 */

public boolean shouldStripWhiteSpace(XPathContext support,int targetElement) throws TransformerException {

  if (null != m_whiteSpaceInfoList) {

    while (DTM.NULL != targetElement) {

      DTM dtm=support.getDTM(targetElement);

      WhiteSpaceInfo info=(WhiteSpaceInfo)m_whiteSpaceInfoList.getTemplate(support,targetElement,null,false,dtm);

      if (null != info)       return info.getShouldStripSpace();

      int parent=dtm.getParent(targetElement);

      if (DTM.NULL != parent && DTM.ELEMENT_NODE == dtm.getNodeType(parent))       targetElement=parent;

 else       targetElement=DTM.NULL;

    }

  }

  return false;

}

Location: StylesheetRoot.java

Content: 

/** 

 * Uses an XSL stylesheet document.

 * @throws TransformerConfigurationException if the baseIdentifier can not beresolved to a URL.

 */

public StylesheetRoot(ErrorListener errorListener) throws TransformerConfigurationException {

  super(null);

  setStylesheetRoot(this);

  try {

    m_selectDefault=new XPath("node()",this,this,XPath.SELECT,errorListener);

    initDefaultRule(errorListener);

  }

 catch (  TransformerException se) {

    throw new TransformerConfigurationException(XSLMessages.createMessage(XSLTErrorResources.ER_CANNOT_INIT_DEFAULT_TEMPLATES,null),se);

  }

}

Location: StylesheetRoot.java

Content: 

/** 

 * Creates a StylesheetRoot and retains a pointer to the schema used to create this StylesheetRoot. The schema may be needed later for an element-available() function call.

 * @param schema The schema used to create this stylesheet

 * @throws TransformerConfigurationException if the baseIdentifier can not beresolved to a URL.

 */

public StylesheetRoot(XSLTSchema schema,ErrorListener listener) throws TransformerConfigurationException {

  this(listener);

  m_availElems=schema.getElemsAvailable();

}

