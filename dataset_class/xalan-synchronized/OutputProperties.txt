Location: OutputProperties.java

Content: 

/** 

 * Copy the keys and values from the source to this object. This will not copy the default values. This is meant to be used by going from a higher precedence object to a lower precedence object, so that if a key already exists, this method will not reset it.

 * @param opsrc non-null reference to an OutputProperties.

 */

public void copyFrom(OutputProperties opsrc) throws TransformerException {

  copyFrom(opsrc.getProperties());

}

Location: OutputProperties.java

Content: 

/** 

 * Copy the keys and values from the source to this object. This will not copy the default values. This is meant to be used by going from a higher precedence object to a lower precedence object, so that if a key already exists, this method will not reset it.

 * @param src non-null reference to the source properties.

 */

public void copyFrom(Properties src){

  copyFrom(src,true);

}

Location: OutputProperties.java

Content: 

/** 

 * Copy the keys and values from the source to this object. This will not copy the default values. This is meant to be used by going from a higher precedence object to a lower precedence object, so that if a key already exists, this method will not reset it.

 * @param src                 non-null reference to the source properties.

 * @param shouldResetDefaults true if the defaults should be reset based on themethod property.

 */

public void copyFrom(Properties src,boolean shouldResetDefaults){

  Enumeration keys=src.keys();

  while (keys.hasMoreElements()) {

    String key=(String)keys.nextElement();

    if (!isLegalPropertyKey(key))     throw new IllegalArgumentException(XSLMessages.createMessage(XSLTErrorResources.ER_OUTPUT_PROPERTY_NOT_RECOGNIZED,new Object[]{key}));

    Object oldValue=m_properties.get(key);

    if (null == oldValue) {

      String val=(String)src.get(key);

      if (shouldResetDefaults && key.equals(OutputKeys.METHOD)) {

        setMethodDefaults(val);

      }

      m_properties.put(key,val);

    }

 else     if (key.equals(OutputKeys.CDATA_SECTION_ELEMENTS)) {

      m_properties.put(key,(String)oldValue + " " + (String)src.get(key));

    }

  }

}

Location: OutputProperties.java

Content: 

/** 

 * Searches for the boolean property with the specified key in the property list. If the key is not found in this property list, the default property list, and its defaults, recursively, are then checked. The method returns <code>false</code> if the property is not found, or if the value is other than "yes".

 * @param key the property key.

 * @return the value in this property list as a boolean value, or false if nullor not "yes".

 */

public boolean getBooleanProperty(QName key){

  return getBooleanProperty(key.toNamespacedString());

}

Location: OutputProperties.java

Content: 

/** 

 * Searches for the boolean property with the specified key in the property list. If the key is not found in this property list, the default property list, and its defaults, recursively, are then checked. The method returns <code>false</code> if the property is not found, or if the value is other than "yes".

 * @param key the property key.

 * @return the value in this property list as a boolean value, or false if nullor not "yes".

 */

public boolean getBooleanProperty(String key){

  return OutputPropertyUtils.getBooleanProperty(key,m_properties);

}

Location: OutputProperties.java

Content: 

/** 

 * Searches for the int property with the specified key in the property list. If the key is not found in this property list, the default property list, and its defaults, recursively, are then checked. The method returns <code>false</code> if the property is not found, or if the value is other than "yes".

 * @param key the property key.

 * @return the value in this property list as a int value, or false if null ornot a number.

 */

public int getIntProperty(QName key){

  return getIntProperty(key.toNamespacedString());

}

Location: OutputProperties.java

Content: 

/** 

 * Searches for the int property with the specified key in the property list. If the key is not found in this property list, the default property list, and its defaults, recursively, are then checked. The method returns <code>false</code> if the property is not found, or if the value is other than "yes".

 * @param key the property key.

 * @return the value in this property list as a int value, or false if null ornot a number.

 */

public int getIntProperty(String key){

  return OutputPropertyUtils.getIntProperty(key,m_properties);

}

Location: OutputProperties.java

Content: 

/** 

 * Searches for the property with the specified key in the property list. If the key is not found in this property list, the default property list, and its defaults, recursively, are then checked. The method returns <code>null</code> if the property is not found.

 * @param key the property key.

 * @return the value in this property list with the specified key value.

 */

public String getProperty(QName key){

  return m_properties.getProperty(key.toNamespacedString());

}

Location: OutputProperties.java

Content: 

/** 

 * Searches for the list of qname properties with the specified key in the property list. If the key is not found in this property list, the default property list, and its defaults, recursively, are then checked. The method returns <code>null</code> if the property is not found.

 * @param key the property key.

 * @return the value in this property list as a vector of QNames, or false ifnull or not "yes".

 */

public Vector getQNameProperties(QName key){

  return getQNameProperties(key.toNamespacedString());

}

Location: OutputProperties.java

Content: 

/** 

 * Searches for the list of qname properties with the specified key in the property list. If the key is not found in this property list, the default property list, and its defaults, recursively, are then checked. The method returns <code>null</code> if the property is not found.

 * @param key the property key.

 * @return the value in this property list as a vector of QNames, or false ifnull or not "yes".

 */

public Vector getQNameProperties(String key){

  return getQNameProperties(key,m_properties);

}

Location: OutputProperties.java

Content: 

/** 

 * Searches for the list of qname properties with the specified key in the property list. If the key is not found in this property list, the default property list, and its defaults, recursively, are then checked. The method returns <code>null</code> if the property is not found.

 * @param key   the property key.

 * @param props the list of properties to search in.

 * @return the value in this property list as a vector of QNames, or false ifnull or not "yes".

 */

public static Vector getQNameProperties(String key,Properties props){

  String s=props.getProperty(key);

  if (null != s) {

    Vector v=new Vector();

    int l=s.length();

    boolean inCurly=false;

    FastStringBuffer buf=new FastStringBuffer();

    for (int i=0; i < l; i++) {

      char c=s.charAt(i);

      if (Character.isWhitespace(c)) {

        if (!inCurly) {

          if (buf.length() > 0) {

            QName qname=QName.getQNameFromString(buf.toString());

            v.addElement(qname);

            buf.reset();

          }

          continue;

        }

      }

 else       if ('{' == c)       inCurly=true;

 else       if ('}' == c)       inCurly=false;

      buf.append(c);

    }

    if (buf.length() > 0) {

      QName qname=QName.getQNameFromString(buf.toString());

      v.addElement(qname);

      buf.reset();

    }

    return v;

  }

 else   return null;

}

Location: OutputProperties.java

Content: 

/** 

 * Searches for the qname property with the specified key in the property list. If the key is not found in this property list, the default property list, and its defaults, recursively, are then checked. The method returns <code>null</code> if the property is not found.

 * @param key the property key.

 * @return the value in this property list as a QName value, or false if null ornot "yes".

 */

public QName getQNameProperty(QName key){

  return getQNameProperty(key.toNamespacedString());

}

Location: OutputProperties.java

Content: 

/** 

 * Searches for the qname property with the specified key in the property list. If the key is not found in this property list, the default property list, and its defaults, recursively, are then checked. The method returns <code>null</code> if the property is not found.

 * @param key the property key.

 * @return the value in this property list as a QName value, or false if null ornot "yes".

 */

public QName getQNameProperty(String key){

  return getQNameProperty(key,m_properties);

}

Location: OutputProperties.java

Content: 

/** 

 * Searches for the qname property with the specified key in the property list. If the key is not found in this property list, the default property list, and its defaults, recursively, are then checked. The method returns <code>null</code> if the property is not found.

 * @param key   the property key.

 * @param props the list of properties to search in.

 * @return the value in this property list as a QName value, or false if null ornot "yes".

 */

public static QName getQNameProperty(String key,Properties props){

  String s=props.getProperty(key);

  if (null != s)   return QName.getQNameFromString(s);

 else   return null;

}

Location: OutputProperties.java

Content: 

/** 

 * Report if the key given as an argument is a legal xsl:output key.

 * @param key non-null reference to key name.

 * @return true if key is legal.

 */

public static boolean isLegalPropertyKey(String key){

  return (key.equals(OutputKeys.CDATA_SECTION_ELEMENTS) || key.equals(OutputKeys.DOCTYPE_PUBLIC) || key.equals(OutputKeys.DOCTYPE_SYSTEM)|| key.equals(OutputKeys.ENCODING)|| key.equals(OutputKeys.INDENT)|| key.equals(OutputKeys.MEDIA_TYPE)|| key.equals(OutputKeys.METHOD)|| key.equals(OutputKeys.OMIT_XML_DECLARATION)|| key.equals(OutputKeys.STANDALONE)|| key.equals(OutputKeys.VERSION)|| (key.length() > 0) && (key.charAt(0) == '{') && (key.lastIndexOf('{') == 0)&& (key.indexOf('}') > 0)&& (key.lastIndexOf('}') == key.indexOf('}')));

}

Location: OutputProperties.java

Content: 

/** 

 * Creates an empty OutputProperties with no default values.

 */

public OutputProperties(){

  this(org.apache.xml.serializer.Method.XML);

}

Location: OutputProperties.java

Content: 

/** 

 * Creates an empty OutputProperties with the specified defaults.

 * @param defaults the defaults.

 */

public OutputProperties(Properties defaults){

  m_properties=new Properties(defaults);

}

Location: OutputProperties.java

Content: 

/** 

 * Creates an empty OutputProperties with the defaults specified by a property file. The method argument is used to construct a string of the form output_[method].properties (for instance, output_html.properties). The output_xml.properties file is always used as the base. <p> At the moment, anything other than 'text', 'xml', and 'html', will use the output_xml.properties file. </p>

 * @param method non-null reference to method name.

 */

public OutputProperties(String method){

  m_properties=new Properties(OutputPropertiesFactory.getDefaultMethodProperties(method));

}

Location: OutputProperties.java

Content: 

/** 

 * Set an output property.

 * @param key   the key to be placed into the property list.

 * @param value the value corresponding to <tt>key</tt>.

 * @see javax.xml.transform.OutputKeys

 */

public void setBooleanProperty(QName key,boolean value){

  m_properties.put(key.toNamespacedString(),value ? "yes" : "no");

}

Location: OutputProperties.java

Content: 

/** 

 * Set an output property.

 * @param key   the key to be placed into the property list.

 * @param value the value corresponding to <tt>key</tt>.

 * @see javax.xml.transform.OutputKeys

 */

public void setBooleanProperty(String key,boolean value){

  m_properties.put(key,value ? "yes" : "no");

}

Location: OutputProperties.java

Content: 

/** 

 * Set an output property.

 * @param key   the key to be placed into the property list.

 * @param value the value corresponding to <tt>key</tt>.

 * @see javax.xml.transform.OutputKeys

 */

public void setIntProperty(QName key,int value){

  setIntProperty(key.toNamespacedString(),value);

}

Location: OutputProperties.java

Content: 

/** 

 * Set an output property.

 * @param key   the key to be placed into the property list.

 * @param value the value corresponding to <tt>key</tt>.

 * @see javax.xml.transform.OutputKeys

 */

public void setIntProperty(String key,int value){

  m_properties.put(key,Integer.toString(value));

}

Location: OutputProperties.java

Content: 

/** 

 * Reset the default properties based on the method.

 * @param method the method value.

 * @see javax.xml.transform.OutputKeys

 */

public void setMethodDefaults(String method){

  String defaultMethod=m_properties.getProperty(OutputKeys.METHOD);

  if ((null == defaultMethod) || !defaultMethod.equals(method) || defaultMethod.equals("xml")) {

    Properties savedProps=m_properties;

    Properties newDefaults=OutputPropertiesFactory.getDefaultMethodProperties(method);

    m_properties=new Properties(newDefaults);

    copyFrom(savedProps,false);

  }

}

Location: OutputProperties.java

Content: 

/** 

 * Set an output property.

 * @param key   the key to be placed into the property list.

 * @param value the value corresponding to <tt>key</tt>.

 * @see javax.xml.transform.OutputKeys

 */

public void setProperty(QName key,String value){

  setProperty(key.toNamespacedString(),value);

}

Location: OutputProperties.java

Content: 

/** 

 * Set an output property.

 * @param key   the key to be placed into the property list.

 * @param value the value corresponding to <tt>key</tt>.

 * @see javax.xml.transform.OutputKeys

 */

public void setProperty(String key,String value){

  if (key.equals(OutputKeys.METHOD)) {

    setMethodDefaults(value);

  }

  if (key.startsWith(OutputPropertiesFactory.S_BUILTIN_OLD_EXTENSIONS_UNIVERSAL))   key=OutputPropertiesFactory.S_BUILTIN_EXTENSIONS_UNIVERSAL + key.substring(OutputPropertiesFactory.S_BUILTIN_OLD_EXTENSIONS_UNIVERSAL_LEN);

  m_properties.put(key,value);

}

Location: OutputProperties.java

Content: 

/** 

 * Set an output property with a QName list value. The QNames will be turned into strings with the namespace in curly brackets.

 * @param key the key to be placed into the property list.

 * @param v   non-null list of QNames corresponding to <tt>key</tt>.

 * @see javax.xml.transform.OutputKeys

 */

public void setQNameProperties(QName key,Vector v){

  setQNameProperties(key.toNamespacedString(),v);

}

Location: OutputProperties.java

Content: 

/** 

 * Set an output property with a QName list value. The QNames will be turned into strings with the namespace in curly brackets.

 * @param key the key to be placed into the property list.

 * @param v   non-null list of QNames corresponding to <tt>key</tt>.

 * @see javax.xml.transform.OutputKeys

 */

public void setQNameProperties(String key,Vector v){

  int s=v.size();

  FastStringBuffer fsb=new FastStringBuffer(9,9);

  for (int i=0; i < s; i++) {

    QName qname=(QName)v.elementAt(i);

    fsb.append(qname.toNamespacedString());

    if (i < s - 1)     fsb.append(' ');

  }

  m_properties.put(key,fsb.toString());

}

Location: OutputProperties.java

Content: 

/** 

 * Set an output property with a QName value. The QName will be turned into a string with the namespace in curly brackets.

 * @param key   the key to be placed into the property list.

 * @param value the value corresponding to <tt>key</tt>.

 * @see javax.xml.transform.OutputKeys

 */

public void setQNameProperty(QName key,QName value){

  setQNameProperty(key.toNamespacedString(),value);

}

Location: OutputProperties.java

Content: 

/** 

 * Set an output property with a QName value. The QName will be turned into a string with the namespace in curly brackets.

 * @param key   the key to be placed into the property list.

 * @param value the value corresponding to <tt>key</tt>.

 * @see javax.xml.transform.OutputKeys

 */

public void setQNameProperty(String key,QName value){

  setProperty(key,value.toNamespacedString());

}

