Location: DTMDocumentImpl.java

Content: 

/** 

 * Append an Attribute child at the current insertion point. Assumes that the symbols (namespace URI, local name, and prefix) have already been added to the pools, and that the content has already been appended to m_char. Note that the attribute's content has been flattened into a single string; DTM does _NOT_ attempt to model the details of entity references within attribute values.

 * @param namespaceIndex       int Index within the namespaceURI string pool

 * @param localNameIndex       int Index within the local name string pool

 * @param prefixIndex          int Index within the prefix string pool

 * @param isID                 boolean True if this attribute was declared as anID (for use in supporting getElementByID).

 * @param m_char_current_start int Starting offset of node's content in m_char.

 * @param contentLength        int Length of node's content in m_char.

 */

void appendAttribute(int namespaceIndex,int localNameIndex,int prefixIndex,boolean isID,int m_char_current_start,int contentLength){

  int w0=ATTRIBUTE_NODE | namespaceIndex << 16;

  int w1=currentParent;

  int w2=0;

  int w3=localNameIndex | prefixIndex << 16;

  System.out.println("set w3=" + w3 + " "+ (w3 >> 16)+ "/"+ (w3 & 0xffff));

  int ourslot=appendNode(w0,w1,w2,w3);

  previousSibling=ourslot;

  w0=TEXT_NODE;

  w1=ourslot;

  w2=m_char_current_start;

  w3=contentLength;

  appendNode(w0,w1,w2,w3);

  previousSiblingWasParent=true;

  return;

}

Location: DTMDocumentImpl.java

Content: 

/** 

 * Append a child to the end of the child list of the current node. Please note that the node is always cloned if it is owned by another document. <p> %REVIEW% "End of the document" needs to be defined more clearly. Does it become the last child of the Document? Of the root element? </p>

 * @param newChild   Must be a valid new node handle.

 * @param clone      true if the child should be cloned into the document.

 * @param cloneDepth if the clone argument is true, specifies that the cloneshould include all it's children.

 */

public void appendChild(int newChild,boolean clone,boolean cloneDepth){

  boolean sameDoc=((newChild & DOCHANDLE_MASK) == m_docHandle);

  if (clone || !sameDoc) {

  }

 else {

  }

}

Location: DTMDocumentImpl.java

Content: 

/** 

 * Append a comment child at the current insertion point. Assumes that the actual content of the comment has previously been appended to the m_char buffer (shared with the builder).

 * @param m_char_current_start int Starting offset of node's content in m_char.

 * @param contentLength        int Length of node's content in m_char.

 */

void appendComment(int m_char_current_start,int contentLength){

  int w0=COMMENT_NODE;

  int w1=currentParent;

  int w2=m_char_current_start;

  int w3=contentLength;

  int ourslot=appendNode(w0,w1,w2,w3);

  previousSibling=ourslot;

}

Location: DTMDocumentImpl.java

Content: 

/** 

 * All appends to this document have finished; do whatever final cleanup is needed.

 */

void appendEndDocument(){

  done=true;

}

Location: DTMDocumentImpl.java

Content: 

/** 

 * Terminate the element currently acting as an insertion point. Subsequent insertions will occur as the last child of this element's parent.

 */

void appendEndElement(){

  if (previousSiblingWasParent)   nodes.writeEntry(previousSibling,2,NULL);

  previousSibling=currentParent;

  nodes.readSlot(currentParent,gotslot);

  currentParent=gotslot[1] & 0xFFFF;

  previousSiblingWasParent=true;

}

Location: DTMDocumentImpl.java

Content: 

/** 

 * Wrapper for ChunkedIntArray.append, to automatically update the previous sibling's "next" reference (if necessary) and periodically wake a reader who may have encountered incomplete data and entered a wait state.

 * @param w0 int As in ChunkedIntArray.append

 * @param w1 int As in ChunkedIntArray.append

 * @param w2 int As in ChunkedIntArray.append

 * @param w3 int As in ChunkedIntArray.append

 * @return int As in ChunkedIntArray.append

 * @see ChunkedIntArray.append

 */

private final int appendNode(int w0,int w1,int w2,int w3){

  int slotnumber=nodes.appendSlot(w0,w1,w2,w3);

  if (DEBUG)   System.out.println(slotnumber + ": " + w0+ " "+ w1+ " "+ w2+ " "+ w3);

  if (previousSiblingWasParent)   nodes.writeEntry(previousSibling,2,slotnumber);

  previousSiblingWasParent=false;

  return slotnumber;

}

Location: DTMDocumentImpl.java

Content: 

/** 

 * Append a Namespace Declaration child at the current insertion point. Assumes that the symbols (namespace URI and prefix) have already been added to the pools

 * @param prefixIndex:    Index within the prefix string pool

 * @param namespaceIndex: Index within the namespaceURI string pool

 * @param isID:           If someone really insists on writing a bad DTD, it istheoretically possible for a namespace declaration to also be declared as being a node ID. I don't really want to support that stupidity, but I'm not sure we can refuse to accept it.

 */

void appendNSDeclaration(int prefixIndex,int namespaceIndex,boolean isID){

  final int namespaceForNamespaces=m_nsNames.stringToIndex("http://www.w3.org/2000/xmlns/");

  int w0=NAMESPACE_NODE | (m_nsNames.stringToIndex("http://www.w3.org/2000/xmlns/") << 16);

  int w1=currentParent;

  int w2=0;

  int w3=namespaceIndex;

  int ourslot=appendNode(w0,w1,w2,w3);

  previousSibling=ourslot;

  previousSiblingWasParent=false;

  return;

}

Location: DTMDocumentImpl.java

Content: 

/** 

 * Starting a new document. Perform any resets/initialization not already handled.

 */

void appendStartDocument(){

  m_docElement=NULL;

  initDocument(0);

}

Location: DTMDocumentImpl.java

Content: 

/** 

 * Append an Element child at the current insertion point. This Element then _becomes_ the insertion point; subsequent appends become its lastChild until an appendEndElement() call is made. Assumes that the symbols (local name, namespace URI and prefix) have already been added to the pools Note that this _only_ handles the Element node itself. Attrs and namespace nodes are unbundled in the ContentHandler layer and appended separately.

 * @param namespaceIndex: Index within the namespaceURI string pool

 * @param localNameIndex  Index within the local name string pool

 * @param prefixIndex:    Index within the prefix string pool

 */

void appendStartElement(int namespaceIndex,int localNameIndex,int prefixIndex){

  int w0=(namespaceIndex << 16) | ELEMENT_NODE;

  int w1=currentParent;

  int w2=0;

  int w3=localNameIndex | prefixIndex << 16;

  System.out.println("set w3=" + w3 + " "+ (w3 >> 16)+ "/"+ (w3 & 0xffff));

  int ourslot=appendNode(w0,w1,w2,w3);

  currentParent=ourslot;

  previousSibling=0;

  if (m_docElement == NULL)   m_docElement=ourslot;

}

Location: DTMDocumentImpl.java

Content: 

/** 

 * Append a text child at the current insertion point. Assumes that the actual content of the text has previously been appended to the m_char buffer (shared with the builder).

 * @param m_char_current_start int Starting offset of node's content in m_char.

 * @param contentLength        int Length of node's content in m_char.

 */

void appendTextChild(int m_char_current_start,int contentLength){

  int w0=TEXT_NODE;

  int w1=currentParent;

  int w2=m_char_current_start;

  int w3=contentLength;

  int ourslot=appendNode(w0,w1,w2,w3);

  previousSibling=ourslot;

}

Location: DTMDocumentImpl.java

Content: 

/** 

 * Append a text node child that will be constructed from a string, to the end of the document. <p> %REVIEW% "End of the document" needs to be defined more clearly. Does it become the last child of the Document? Of the root element? </p>

 * @param str Non-null reference to a string.

 */

public void appendTextChild(String str){

}

Location: DTMDocumentImpl.java

Content: 

/** 

 * A dummy routine to satisify the abstract interface. If the DTM implememtation that extends the default base requires notification of registration, they can override this method.

 */

public void documentRegistration(){

}

Location: DTMDocumentImpl.java

Content: 

/** 

 * A dummy routine to satisify the abstract interface. If the DTM implememtation that extends the default base requires notification when the document is being released, they can override this method

 */

public void documentRelease(){

}

Location: DTMDocumentImpl.java

Content: 

/** 

 * Construct a DTM.

 * @param documentNumber the ID number assigned to this document. It will beshifted up into the high bits and returned as part of all node ID numbers, so those IDs indicate which document they came from as well as a location within the document. It is the DTMManager's responsibility to assign a unique number to each document.

 */

public DTMDocumentImpl(DTMManager mgr,int documentNumber,DTMWSFilter whiteSpaceFilter,XMLStringFactory xstringfactory){

  initDocument(documentNumber);

  m_xsf=xstringfactory;

}

Location: DTMDocumentImpl.java

Content: 

/** 

 * Get a reference pointer to the content-text repository

 * @return FastStringBuffer reference to an instance of buffer

 */

FastStringBuffer getContentBuffer(){

  return m_char;

}

Location: DTMDocumentImpl.java

Content: 

/** 

 * Return an indication of whether the processor has read the complete DTD. Its value is a boolean. If it is false, then certain properties (indicated in their descriptions below) may be unknown. If it is true, those properties are never unknown.

 * @return <code>true</code> if all declarations were processed {};<code>false</code> otherwise.

 */

public boolean getDocumentAllDeclarationsProcessed(){

  return false;

}

Location: DTMDocumentImpl.java

Content: 

/** 

 * Return the base URI of the document entity. If it is not known (because the document was parsed from a socket connection or from standard input, for example), the value of this property is unknown.

 * @return the document base URI String object or null if unknown.

 */

public String getDocumentBaseURI(){

  return m_documentBaseURI;

}

Location: DTMDocumentImpl.java

Content: 

/** 

 * Return the name of the character encoding scheme in which the document entity is expressed.

 * @param nodeHandle The node id, which can be any valid node handle.

 * @return the document encoding String object.

 */

public String getDocumentEncoding(int nodeHandle){

  return null;

}

Location: DTMDocumentImpl.java

Content: 

/** 

 * Returns the root element of the document.

 * @return nodeHandle to the Document Root.

 */

public int getDocumentRoot(){

  return (m_docHandle | m_docElement);

}

Location: DTMDocumentImpl.java

Content: 

/** 

 * Return an indication of the standalone status of the document, either "yes" or "no". This property is derived from the optional standalone document declaration in the XML declaration at the beginning of the document entity, and has no value if there is no standalone document declaration.

 * @param nodeHandle The node id, which can be any valid node handle.

 * @return the document standalone String object, either "yes", "no", or null.

 */

public String getDocumentStandalone(int nodeHandle){

  return null;

}

Location: DTMDocumentImpl.java

Content: 

/** 

 * Return the system identifier of the document entity. If it is not known, the value of this property is unknown.

 * @param nodeHandle The node id, which can be any valid node handle.

 * @return the system identifier String object or null if unknown.

 */

public String getDocumentSystemIdentifier(int nodeHandle){

  return null;

}

Location: DTMDocumentImpl.java

Content: 

/** 

 * Return a string representing the XML version of the document. This property is derived from the XML declaration optionally present at the beginning of the document entity, and has no value if there is no XML declaration.

 * @param documentHandle the document handle

 * @return the document version String object

 */

public String getDocumentVersion(int documentHandle){

  return null;

}

Location: DTMDocumentImpl.java

Content: 

/** 

 * Given a node handle, get the handle of the node's first child. If not yet resolved, waits for more nodes to be added to the document and tries again.

 * @param nodeHandle int Handle of the node.

 * @return int DTM node-number of first child, or DTM.NULL to indicate noneexists.

 */

public int getFirstChild(int nodeHandle){

  nodeHandle&=NODEHANDLE_MASK;

  nodes.readSlot(nodeHandle,gotslot);

  short type=(short)(gotslot[0] & 0xFFFF);

  if ((type == ELEMENT_NODE) || (type == DOCUMENT_NODE) || (type == ENTITY_REFERENCE_NODE)) {

    int kid=nodeHandle + 1;

    nodes.readSlot(kid,gotslot);

    while (ATTRIBUTE_NODE == (gotslot[0] & 0xFFFF)) {

      kid=gotslot[2];

      if (kid == NULL)       return NULL;

      nodes.readSlot(kid,gotslot);

    }

    if (gotslot[1] == nodeHandle) {

      int firstChild=kid | m_docHandle;

      return firstChild;

    }

  }

  return NULL;

}

Location: DTMDocumentImpl.java

Content: 

/** 

 * Given a node handle, get the index of the node's first child. If not yet resolved, waits for more nodes to be added to the document and tries again

 * @param nodeHandle handle to node, which should probably be an element node,but need not be.

 * @param inScope    true if all namespaces in scope should be returned, falseif only the namespace declarations should be returned.

 * @return handle of first namespace, or DTM.NULL to indicate none exists.

 */

public int getFirstNamespaceNode(int nodeHandle,boolean inScope){

  return NULL;

}

Location: DTMDocumentImpl.java

Content: 

/** 

 * Given a node handle, advance to its last child. If not yet resolved, waits for more nodes to be added to the document and tries again.

 * @param nodeHandle int Handle of the node.

 * @return int Node-number of last child, or DTM.NULL to indicate none exists.

 */

public int getLastChild(int nodeHandle){

  nodeHandle&=NODEHANDLE_MASK;

  int lastChild=NULL;

  for (int nextkid=getFirstChild(nodeHandle); nextkid != NULL; nextkid=getNextSibling(nextkid)) {

    lastChild=nextkid;

  }

  return lastChild | m_docHandle;

}

Location: DTMDocumentImpl.java

Content: 

/** 

 * Get the depth level of this node in the tree (equals 1 for a parentless node).

 * @param nodeHandle The node id.

 * @return the number of ancestors, plus one

 * @xsl.usage internal

 */

public short getLevel(int nodeHandle){

  short count=0;

  while (nodeHandle != 0) {

    count++;

    nodeHandle=nodes.readEntry(nodeHandle,1);

  }

  return count;

}

Location: DTMDocumentImpl.java

Content: 

/** 

 * Given an expanded-name ID, return the local name part.

 * @param ExpandedNameID an ID that represents an expanded-name.

 * @return String Local name of this node.

 */

public String getLocalNameFromExpandedNameID(int ExpandedNameID){

  String expandedName=m_localNames.indexToString(ExpandedNameID);

  int colonpos=expandedName.indexOf(":");

  String localName=expandedName.substring(colonpos + 1);

  return localName;

}

Location: DTMDocumentImpl.java

Content: 

/** 

 * Get a reference pointer to the element name symbol table.

 * @return DTMStringPool reference to an instance of table.

 */

public DTMStringPool getLocalNameTable(){

  return m_localNames;

}

Location: DTMDocumentImpl.java

Content: 

/** 

 * Given an expanded-name ID, return the namespace URI part.

 * @param ExpandedNameID an ID that represents an expanded-name.

 * @return String URI value of this node's namespace, or null if no namespacewas resolved.

 */

public String getNamespaceFromExpandedNameID(int ExpandedNameID){

  String expandedName=m_localNames.indexToString(ExpandedNameID);

  int colonpos=expandedName.indexOf(":");

  String nsName=expandedName.substring(0,colonpos);

  return nsName;

}

Location: DTMDocumentImpl.java

Content: 

/** 

 * Given a node handle, advance to the next attribute. If an element, we advance to its first attribute; if an attr, we advance to the next attr on the same node.

 * @param nodeHandle int Handle of the node.

 * @return int DTM node-number of the resolved attr, or DTM.NULL to indicatenone exists.

 */

public int getNextAttribute(int nodeHandle){

  nodeHandle&=NODEHANDLE_MASK;

  nodes.readSlot(nodeHandle,gotslot);

  short type=(short)(gotslot[0] & 0xFFFF);

  if (type == ELEMENT_NODE) {

    return getFirstAttribute(nodeHandle);

  }

 else   if (type == ATTRIBUTE_NODE) {

    if (gotslot[2] != NULL)     return (m_docHandle | gotslot[2]);

  }

  return NULL;

}

Location: DTMDocumentImpl.java

Content: 

/** 

 * Given a node handle, advance to its next descendant. If not yet resolved, waits for more nodes to be added to the document and tries again.

 * @param subtreeRootHandle

 * @param nodeHandle        int Handle of the node.

 * @return handle of next descendant, or DTM.NULL to indicate none exists.

 */

public int getNextDescendant(int subtreeRootHandle,int nodeHandle){

  subtreeRootHandle&=NODEHANDLE_MASK;

  nodeHandle&=NODEHANDLE_MASK;

  if (nodeHandle == 0)   return NULL;

  while (!m_isError) {

    if (done && (nodeHandle > nodes.slotsUsed()))     break;

    if (nodeHandle > subtreeRootHandle) {

      nodes.readSlot(nodeHandle + 1,gotslot);

      if (gotslot[2] != 0) {

        short type=(short)(gotslot[0] & 0xFFFF);

        if (type == ATTRIBUTE_NODE) {

          nodeHandle+=2;

        }

 else {

          int nextParentPos=gotslot[1];

          if (nextParentPos >= subtreeRootHandle)           return (m_docHandle | (nodeHandle + 1));

 else           break;

        }

      }

 else       if (!done) {

      }

 else       break;

    }

 else {

      nodeHandle++;

    }

  }

  return NULL;

}

Location: DTMDocumentImpl.java

Content: 

/** 

 * Given a node handle, advance to the next node on the following axis.

 * @param axisContextHandle the start of the axis that is being traversed.

 * @param nodeHandle

 * @return handle of next sibling, or DTM.NULL to indicate none exists.

 */

public int getNextFollowing(int axisContextHandle,int nodeHandle){

  return NULL;

}

Location: DTMDocumentImpl.java

Content: 

/** 

 * Given a namespace handle, advance to the next namespace. %TBD% THIS METHOD DOES NOT MATCH THE CURRENT SIGNATURE IN THE DTM INTERFACE. FIX IT, OR JUSTIFY CHANGING THE DTM API.

 * @param namespaceHandle handle to node which must be of type NAMESPACE_NODE.

 * @return handle of next namespace, or DTM.NULL to indicate none exists.

 */

public int getNextNamespaceNode(int baseHandle,int namespaceHandle,boolean inScope){

  return NULL;

}

Location: DTMDocumentImpl.java

Content: 

/** 

 * Given a node handle, advance to the next node on the preceding axis.

 * @param axisContextHandle the start of the axis that is being traversed.

 * @param nodeHandle        the id of the node.

 * @return int Node-number of preceding sibling, or DTM.NULL to indicate noneexists.

 */

public int getNextPreceding(int axisContextHandle,int nodeHandle){

  nodeHandle&=NODEHANDLE_MASK;

  while (nodeHandle > 1) {

    nodeHandle--;

    if (ATTRIBUTE_NODE == (nodes.readEntry(nodeHandle,0) & 0xFFFF))     continue;

    return (m_docHandle | nodes.specialFind(axisContextHandle,nodeHandle));

  }

  return NULL;

}

Location: DTMDocumentImpl.java

Content: 

/** 

 * Given a node handle, advance to its next sibling. %TBD% This currently uses the DTM-internal definition of sibling; eg, the last attr's next sib is the first child. In the old DTM, the DOM proxy layer provided the additional logic for the public view. If we're rewriting for XPath emulation, that test must be done here. %TBD% CODE INTERACTION WITH INCREMENTAL PARSE - If not yet resolved, should wait for more nodes to be added to the document and tries again.

 * @param nodeHandle int Handle of the node.

 * @return int Node-number of next sibling, or DTM.NULL to indicate none exists.

 */

public int getNextSibling(int nodeHandle){

  nodeHandle&=NODEHANDLE_MASK;

  if (nodeHandle == 0)   return NULL;

  short type=(short)(nodes.readEntry(nodeHandle,0) & 0xFFFF);

  if ((type == ELEMENT_NODE) || (type == ATTRIBUTE_NODE) || (type == ENTITY_REFERENCE_NODE)) {

    int nextSib=nodes.readEntry(nodeHandle,2);

    if (nextSib == NULL)     return NULL;

    if (nextSib != 0)     return (m_docHandle | nextSib);

  }

  int thisParent=nodes.readEntry(nodeHandle,1);

  if (nodes.readEntry(++nodeHandle,1) == thisParent)   return (m_docHandle | nodeHandle);

  return NULL;

}

Location: DTMDocumentImpl.java

Content: 

/** 

 * Given a node handle, return its DOM-style node type. <p> %REVIEW% Generally, returning short is false economy. Return int?

 * @param nodeHandle The node id.

 * @return int Node type, as per the DOM's Node._NODE constants.

 */

public short getNodeType(int nodeHandle){

  return (short)(nodes.readEntry(nodeHandle,0) & 0xFFFF);

}

Location: DTMDocumentImpl.java

Content: 

/** 

 * Get a reference pointer to the namespace URI symbol table.

 * @return DTMStringPool reference to an instance of table.

 */

public DTMStringPool getNsNameTable(){

  return m_nsNames;

}

Location: DTMDocumentImpl.java

Content: 

/** 

 * Given a node handle, find the owning document node. This has the exact same semantics as the DOM Document method of the same name, in that if the nodeHandle is a document node, it will return NULL. <p> %REVIEW% Since this is DOM-specific, it may belong at the DOM binding layer. Included here as a convenience function and to aid porting of DOM code to DTM. </p>

 * @param nodeHandle the id of the node.

 * @return int Node handle of owning document, or NULL if the nodeHandle is adocument.

 */

public int getOwnerDocument(int nodeHandle){

  if ((nodeHandle & NODEHANDLE_MASK) == 0)   return NULL;

  return (nodeHandle & DOCHANDLE_MASK);

}

Location: DTMDocumentImpl.java

Content: 

/** 

 * Given a node handle, find its parent node.

 * @param nodeHandle the id of the node.

 * @return int Node-number of parent, or DTM.NULL to indicate none exists.

 */

public int getParent(int nodeHandle){

  return (m_docHandle | nodes.readEntry(nodeHandle,1));

}

Location: DTMDocumentImpl.java

Content: 

/** 

 * Get a reference pointer to the prefix name symbol table.

 * @return DTMStringPool reference to an instance of table.

 */

public DTMStringPool getPrefixNameTable(){

  return m_prefixNames;

}

Location: DTMDocumentImpl.java

Content: 

/** 

 * Given a node handle, find its preceeding sibling. WARNING: DTM is asymmetric; this operation is resolved by search, and is relatively expensive.

 * @param nodeHandle the id of the node.

 * @return int Node-number of the previous sib, or DTM.NULL to indicate noneexists.

 */

public int getPreviousSibling(int nodeHandle){

  nodeHandle&=NODEHANDLE_MASK;

  if (nodeHandle == 0)   return NULL;

  int parent=nodes.readEntry(nodeHandle,1);

  int kid=NULL;

  for (int nextkid=getFirstChild(parent); nextkid != nodeHandle; nextkid=getNextSibling(nextkid)) {

    kid=nextkid;

  }

  return kid | m_docHandle;

}

Location: DTMDocumentImpl.java

Content: 

/** 

 * Get number of character array chunks in the string-value of a node. (see http://www.w3.org/TR/xpath#data-model for the definition of a node's string-value). Note that a single text node may have multiple text chunks. EXPLANATION: This method is an artifact of the fact that the underlying m_chars object may not store characters in a single contiguous array -- for example,the current FastStringBuffer may split a single node's text across multiple allocation units. This call tells us how many separate accesses will be required to retrieve the entire content. PLEASE NOTE that this may not be the same as the number of SAX characters() events that caused the text node to be built in the first place, since m_chars buffering may be on different boundaries than the parser's buffers.

 * @param nodeHandle The node ID.

 * @return number of character array chunks in the string-value of a node.

 */

public int getStringValueChunkCount(int nodeHandle){

  return 0;

}

Location: DTMDocumentImpl.java

Content: 

/** 

 * Get a character array chunk in the string-value of a node. (see http://www.w3.org/TR/xpath#data-model for the definition of a node's string-value). Note that a single text node may have multiple text chunks. EXPLANATION: This method is an artifact of the fact that the underlying m_chars object may not store characters in a single contiguous array -- for example,the current FastStringBuffer may split a single node's text across multiple allocation units. This call retrieves a single contiguous portion of the text -- as much as m-chars was able to store in a single allocation unit. PLEASE NOTE that this may not be the same granularityas the SAX characters() events that caused the text node to be built in the first place, since m_chars buffering may be on different boundaries than the parser's buffers.

 * @param nodeHandle  The node ID.

 * @param chunkIndex  Which chunk to get.

 * @param startAndLen An array of 2 where the start position and length of thechunk will be returned.

 * @return The character array reference where the chunk occurs.

 */

public char[] getStringValueChunk(int nodeHandle,int chunkIndex,int[] startAndLen){

  return new char[0];

}

Location: DTMDocumentImpl.java

Content: 

/** 

 * Given a node handle, test if it has child nodes. <p> %REVIEW% This is obviously useful at the DOM layer, where it would permit testing this without having to create a proxy node. It's less useful in the DTM API, where (dtm.getFirstChild(nodeHandle)!=DTM.NULL) is just as fast and almost as self-evident. But it's a convenience, and eases porting of DOM code to DTM. </p>

 * @param nodeHandle int Handle of the node.

 * @return int true if the given node has child nodes.

 */

public boolean hasChildNodes(int nodeHandle){

  return (getFirstChild(nodeHandle) != NULL);

}

Location: DTMDocumentImpl.java

Content: 

/** 

 * Reset a dtm document to its initial (empty) state. The DTMManager will invoke this method when the dtm is created.

 * @param documentNumber the handle for the DTM document.

 */

final void initDocument(int documentNumber){

  m_docHandle=documentNumber << DOCHANDLE_SHIFT;

  nodes.writeSlot(0,DOCUMENT_NODE,-1,-1,0);

  done=false;

}

Location: DTMDocumentImpl.java

Content: 

/** 

 * 2. [element content whitespace] A boolean indicating whether the character is white space appearing within element content (see [XML], 2.10 "White Space Handling"). Note that validating XML processors are required by XML 1.0 to provide this information. If there is no declaration for the containing element, this property has no value for white space characters. If no declaration has been read, but the [all declarations processed] property of the document information item is false (so there may be an unread declaration), then the value of this property is unknown for white space characters. It is always false for characters that are not white space.

 * @param nodeHandle the node ID.

 * @return <code>true</code> if the character data is whitespace;<code>false</code> otherwise.

 */

public boolean isCharacterElementContentWhitespace(int nodeHandle){

  return false;

}

Location: DTMDocumentImpl.java

Content: 

/** 

 * 10. [all declarations processed] This property is not strictly speaking part of the infoset of the document. Rather it is an indication of whether the processor has read the complete DTD. Its value is a boolean. If it is false, then certain properties (indicated in their descriptions below) may be unknown. If it is true, those properties are never unknown.

 * @param documentHandle A node handle that must identify a document.

 * @return <code>true</code> if all declarations were processed;<code>false</code> otherwise.

 */

public boolean isDocumentAllDeclarationsProcessed(int documentHandle){

  return false;

}

Location: DTMDocumentImpl.java

Content: 

/** 

 * Figure out whether nodeHandle2 should be considered as being later in the document than nodeHandle1, in Document Order as defined by the XPath model. This may not agree with the ordering defined by other XML applications. <p> There are some cases where ordering isn't defined, and neither are the results of this function -- though we'll generally return true. TODO: Make sure this does the right thing with attribute nodes!!!

 * @param nodeHandle1 DOM Node to perform position comparison on.

 * @param nodeHandle2 DOM Node to perform position comparison on .

 * @return false if node2 comes before node1, otherwise return true. You canthink of this as <code>(node1.documentOrderPosition &lt;= node2.documentOrderPosition)</code>.

 */

public boolean isNodeAfter(int nodeHandle1,int nodeHandle2){

  return false;

}

Location: DTMDocumentImpl.java

Content: 

private void processAccumulatedText(){

  int len=m_char.length();

  if (len != m_char_current_start) {

    appendTextChild(m_char_current_start,len - m_char_current_start);

    m_char_current_start=len;

  }

}

Location: DTMDocumentImpl.java

Content: 

/** 

 * Set a reference pointer to the content-text repository

 * @param buffer FastStringBuffer reference to an instance of buffer

 */

void setContentBuffer(FastStringBuffer buffer){

  m_char=buffer;

}

Location: DTMDocumentImpl.java

Content: 

/** 

 * Set the base URI of the document entity.

 * @param baseURI the document base URI String object or null if unknown.

 */

public void setDocumentBaseURI(String baseURI){

  m_documentBaseURI=baseURI;

}

Location: DTMDocumentImpl.java

Content: 

/** 

 * Set a reference pointer to the element name symbol table. %REVIEW% Should this really be Public? Changing it while DTM is in use would be a disaster.

 * @param poolRef DTMStringPool reference to an instance of table.

 */

public void setLocalNameTable(DTMStringPool poolRef){

  m_localNames=poolRef;

}

Location: DTMDocumentImpl.java

Content: 

/** 

 * Set a reference pointer to the namespace URI symbol table. %REVIEW% Should this really be Public? Changing it while DTM is in use would be a disaster.

 * @param poolRef DTMStringPool reference to an instance of table.

 */

public void setNsNameTable(DTMStringPool poolRef){

  m_nsNames=poolRef;

}

Location: DTMDocumentImpl.java

Content: 

/** 

 * Set a reference pointer to the prefix name symbol table. %REVIEW% Should this really be Public? Changing it while DTM is in use would be a disaster.

 * @param poolRef DTMStringPool reference to an instance of table.

 */

public void setPrefixNameTable(DTMStringPool poolRef){

  m_prefixNames=poolRef;

}

Location: DTMDocumentImpl.java

Content: 

/** 

 * Return true if the xsl:strip-space or xsl:preserve-space was processed during construction of the DTM document. <p> %REVEIW% Presumes a 1:1 mapping from DTM to Document, since we aren't saying which Document to query...? </p>

 */

public boolean supportsPreStripping(){

  return false;

}

