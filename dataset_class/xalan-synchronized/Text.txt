Location: Text.java

Content: 

/** 

 * Check whether this Text node can be stored in a char[] in the translet. Calling this is precondition to calling loadAsArrayOffsetLength.

 * @see #loadAsArrayOffsetLength(ClassGenerator,MethodGenerator)

 * @return true if this Text node can be

 */

public boolean canLoadAsArrayOffsetLength(){

  return (_text.length() <= 21845);

}

Location: Text.java

Content: 

/** 

 * Returns the text wrapped inside this node

 * @return The text wrapped inside this node

 */

protected String getText(){

  return _text;

}

Location: Text.java

Content: 

public boolean isIgnore(){

  return _ignore;

}

Location: Text.java

Content: 

public boolean isTextElement(){

  return _textElement;

}

Location: Text.java

Content: 

/** 

 * Generates code that loads the array that will contain the character data represented by this Text node, followed by the offset of the data from the start of the array, and then the length of the data. The pre-condition to calling this method is that canLoadAsArrayOffsetLength() returns true.

 * @see #canLoadArrayOffsetLength()

 */

public void loadAsArrayOffsetLength(ClassGenerator classGen,MethodGenerator methodGen){

  final ConstantPoolGen cpg=classGen.getConstantPool();

  final InstructionList il=methodGen.getInstructionList();

  final XSLTC xsltc=classGen.getParser().getXSLTC();

  final int offset=xsltc.addCharacterData(_text);

  final int length=_text.length();

  String charDataFieldName=STATIC_CHAR_DATA_FIELD + (xsltc.getCharacterDataCount() - 1);

  il.append(new GETSTATIC(cpg.addFieldref(xsltc.getClassName(),charDataFieldName,STATIC_CHAR_DATA_FIELD_SIG)));

  il.append(new PUSH(cpg,offset));

  il.append(new PUSH(cpg,_text.length()));

}

Location: Text.java

Content: 

/** 

 * Set the text for this node. Appends the given text to any already existing text (using string concatenation, so use only when needed).

 * @param text is the text to wrap inside this node.

 */

protected void setText(String text){

  if (_text == null)   _text=text;

 else   _text=_text + text;

}

Location: Text.java

Content: 

/** 

 * Create a blank Text syntax tree node.

 */

public Text(){

  _textElement=true;

}

Location: Text.java

Content: 

/** 

 * Create text syntax tree node.

 * @param text is the text to put in the node.

 */

public Text(String text){

  _text=text;

}

