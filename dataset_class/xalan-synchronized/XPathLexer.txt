Location: XPathLexer.java

Content: 

/** 

 * If symbol is not followed by '::' or '(', then treat it as a name instead of an axis or function (Jira-1912).

 */

Symbol disambiguateAxisOrFunction(int ss) throws Exception {

  int index=yy_buffer_index;

  while (index < yy_buffer_read && isWhitespace(yy_buffer[index])) {

    index++;

  }

  if (index >= yy_buffer_read) {

    return new Symbol(ss);

  }

  return (yy_buffer[index] == ':' && yy_buffer[index + 1] == ':' || yy_buffer[index] == '(') ? newSymbol(ss) : newSymbol(sym.QNAME,yytext());

}

Location: XPathLexer.java

Content: 

/** 

 * If symbol is first token or if it follows any of the operators listed in http://www.w3.org/TR/xpath#exprlex then treat as a name instead of a keyword (Jira-1912).

 */

Symbol disambiguateOperator(int ss) throws Exception {

switch (last) {

case -1:

case sym.ATSIGN:

case sym.DCOLON:

case sym.LPAREN:

case sym.LBRACK:

case sym.COMMA:

case sym.AND:

case sym.OR:

case sym.MOD:

case sym.DIV:

case sym.MULT:

case sym.SLASH:

case sym.DSLASH:

case sym.VBAR:

case sym.PLUS:

case sym.MINUS:

case sym.EQ:

case sym.NE:

case sym.LT:

case sym.LE:

case sym.GT:

case sym.GE:

    return newSymbol(sym.QNAME,yytext());

}

return newSymbol(ss);

}

Location: XPathLexer.java

Content: 

/** 

 * If symbol is first token or if it follows any of the operators listed in http://www.w3.org/TR/xpath#exprlex then treat as a wildcard instead of a multiplication operator

 */

Symbol disambiguateStar() throws Exception {

switch (last) {

case -1:

case sym.ATSIGN:

case sym.DCOLON:

case sym.LPAREN:

case sym.LBRACK:

case sym.COMMA:

case sym.AND:

case sym.OR:

case sym.MOD:

case sym.DIV:

case sym.MULT:

case sym.SLASH:

case sym.DSLASH:

case sym.VBAR:

case sym.PLUS:

case sym.MINUS:

case sym.EQ:

case sym.NE:

case sym.LT:

case sym.LE:

case sym.GT:

case sym.GE:

    return newSymbol(sym.STAR);

}

return newSymbol(sym.MULT);

}

Location: XPathLexer.java

Content: 

void initialize(){

  last=-1;

}

Location: XPathLexer.java

Content: 

Symbol newSymbol(int ss){

  last=ss;

  return new Symbol(ss);

}

Location: XPathLexer.java

Content: 

Symbol newSymbol(int ss,Double value){

  last=ss;

  return new Symbol(ss,value);

}

Location: XPathLexer.java

Content: 

Symbol newSymbol(int ss,Long value){

  last=ss;

  return new Symbol(ss,value);

}

Location: XPathLexer.java

Content: 

Symbol newSymbol(int ss,String value){

  last=ss;

  return new Symbol(ss,value);

}

Location: XPathLexer.java

Content: 

public java_cup.runtime.Symbol next_token() throws java.io.IOException, Exception {

  int yy_lookahead;

  int yy_anchor=YY_NO_ANCHOR;

  int yy_state=yy_state_dtrans[yy_lexical_state];

  int yy_next_state=YY_NO_STATE;

  int yy_last_accept_state=YY_NO_STATE;

  boolean yy_initial=true;

  int yy_this_accept;

  yy_mark_start();

  yy_this_accept=yy_acpt[yy_state];

  if (YY_NOT_ACCEPT != yy_this_accept) {

    yy_last_accept_state=yy_state;

    yy_mark_end();

  }

  while (true) {

    if (yy_initial && yy_at_bol)     yy_lookahead=YY_BOL;

 else     yy_lookahead=yy_advance();

    yy_next_state=YY_F;

    yy_next_state=yy_nxt[yy_rmap[yy_state]][yy_cmap[yy_lookahead]];

    if (YY_EOF == yy_lookahead && true == yy_initial) {

      return newSymbol(sym.EOF);

    }

    if (YY_F != yy_next_state) {

      yy_state=yy_next_state;

      yy_initial=false;

      yy_this_accept=yy_acpt[yy_state];

      if (YY_NOT_ACCEPT != yy_this_accept) {

        yy_last_accept_state=yy_state;

        yy_mark_end();

      }

    }

 else {

      if (YY_NO_STATE == yy_last_accept_state) {

        throw (new Error("Lexical Error: Unmatched Input."));

      }

 else {

        yy_anchor=yy_acpt[yy_last_accept_state];

        if (0 != (YY_END & yy_anchor)) {

          yy_move_end();

        }

        yy_to_mark();

switch (yy_last_accept_state) {

case 1:

case -2:

          break;

case 2:

{

          return disambiguateStar();

        }

case -3:

      break;

case 3:

{

      return newSymbol(sym.SLASH);

    }

case -4:

  break;

case 4:

{

  return newSymbol(sym.PLUS);

}

case -5:

break;

case 5:

{

return newSymbol(sym.MINUS);

}

case -6:

break;

case 6:

{

return newSymbol(sym.QNAME,yytext());

}

case -7:

break;

case 7:

{

throw new Exception(yytext());

}

case -8:

break;

case 8:

{

return newSymbol(sym.COMMA);

}

case -9:

break;

case 9:

{

return newSymbol(sym.ATSIGN);

}

case -10:

break;

case 10:

{

return newSymbol(sym.DOT);

}

case -11:

break;

case 11:

{

return newSymbol(sym.VBAR);

}

case -12:

break;

case 12:

{

return newSymbol(sym.DOLLAR);

}

case -13:

break;

case 13:

{

return newSymbol(sym.EQ);

}

case -14:

break;

case 14:

{

return newSymbol(sym.LT);

}

case -15:

break;

case 15:

{

return newSymbol(sym.GT);

}

case -16:

break;

case 16:

{

return newSymbol(sym.LPAREN);

}

case -17:

break;

case 17:

{

return newSymbol(sym.RPAREN);

}

case -18:

break;

case 18:

{

}

case -19:

break;

case 19:

{

return newSymbol(sym.LBRACK);

}

case -20:

break;

case 20:

{

return newSymbol(sym.RBRACK);

}

case -21:

break;

case 21:

{

return newSymbol(sym.INT,new Long(yytext()));

}

case -22:

break;

case 22:

{

return newSymbol(sym.DSLASH);

}

case -23:

break;

case 23:

{

return disambiguateAxisOrFunction(sym.ID);

}

case -24:

break;

case 24:

{

return disambiguateOperator(sym.OR);

}

case -25:

break;

case 25:

{

return newSymbol(sym.DCOLON);

}

case -26:

break;

case 26:

{

return newSymbol(sym.QNAME,yytext());

}

case -27:

break;

case 27:

{

return newSymbol(sym.DDOT);

}

case -28:

break;

case 28:

{

return newSymbol(sym.REAL,new Double(yytext()));

}

case -29:

break;

case 29:

{

return newSymbol(sym.NE);

}

case -30:

break;

case 30:

{

return newSymbol(sym.LE);

}

case -31:

break;

case 31:

{

return newSymbol(sym.GE);

}

case -32:

break;

case 32:

{

return newSymbol(sym.Literal,yytext().substring(1,yytext().length() - 1));

}

case -33:

break;

case 33:

{

return newSymbol(sym.Literal,yytext().substring(1,yytext().length() - 1));

}

case -34:

break;

case 34:

{

return newSymbol(sym.REAL,new Double(yytext()));

}

case -35:

break;

case 35:

{

return disambiguateOperator(sym.DIV);

}

case -36:

break;

case 36:

{

return newSymbol(sym.QNAME,yytext());

}

case -37:

break;

case 37:

{

return disambiguateOperator(sym.MOD);

}

case -38:

break;

case 38:

{

return disambiguateAxisOrFunction(sym.KEY);

}

case -39:

break;

case 39:

{

return disambiguateOperator(sym.AND);

}

case -40:

break;

case 40:

{

return disambiguateAxisOrFunction(sym.SELF);

}

case -41:

break;

case 41:

{

return disambiguateAxisOrFunction(sym.CHILD);

}

case -42:

break;

case 42:

{

return newSymbol(sym.TEXT);

}

case -43:

break;

case 43:

{

return newSymbol(sym.NODE);

}

case -44:

break;

case 44:

{

return disambiguateAxisOrFunction(sym.PARENT);

}

case -45:

break;

case 45:

{

return newSymbol(sym.TEXT);

}

case -46:

break;

case 46:

{

return newSymbol(sym.NODE);

}

case -47:

break;

case 47:

{

return disambiguateAxisOrFunction(sym.ANCESTOR);

}

case -48:

break;

case 48:

{

initialize();

return new Symbol(sym.PATTERN);

}

case -49:

break;

case 49:

{

return disambiguateAxisOrFunction(sym.NAMESPACE);

}

case -50:

break;

case 50:

{

return newSymbol(sym.COMMENT);

}

case -51:

break;

case 51:

{

return disambiguateAxisOrFunction(sym.PRECEDING);

}

case -52:

break;

case 52:

{

return disambiguateAxisOrFunction(sym.ATTRIBUTE);

}

case -53:

break;

case 53:

{

return disambiguateAxisOrFunction(sym.FOLLOWING);

}

case -54:

break;

case 54:

{

return disambiguateAxisOrFunction(sym.DESCENDANT);

}

case -55:

break;

case 55:

{

return newSymbol(sym.COMMENT);

}

case -56:

break;

case 56:

{

initialize();

return new Symbol(sym.EXPRESSION);

}

case -57:

break;

case 57:

{

return disambiguateAxisOrFunction(sym.ANCESTORORSELF);

}

case -58:

break;

case 58:

{

return disambiguateAxisOrFunction(sym.PRECEDINGSIBLING);

}

case -59:

break;

case 59:

{

return disambiguateAxisOrFunction(sym.FOLLOWINGSIBLING);

}

case -60:

break;

case 60:

{

return disambiguateAxisOrFunction(sym.DESCENDANTORSELF);

}

case -61:

break;

case 61:

{

return disambiguateAxisOrFunction(sym.PIPARAM);

}

case -62:

break;

case 62:

{

return newSymbol(sym.PI);

}

case -63:

break;

case 63:

{

return newSymbol(sym.PI);

}

case -64:

break;

case 65:

{

return newSymbol(sym.QNAME,yytext());

}

case -65:

break;

case 66:

{

throw new Exception(yytext());

}

case -66:

break;

case 67:

{

return newSymbol(sym.INT,new Long(yytext()));

}

case -67:

break;

case 68:

{

return newSymbol(sym.REAL,new Double(yytext()));

}

case -68:

break;

case 70:

{

return newSymbol(sym.QNAME,yytext());

}

case -69:

break;

case 71:

{

throw new Exception(yytext());

}

case -70:

break;

case 73:

{

return newSymbol(sym.QNAME,yytext());

}

case -71:

break;

case 74:

{

throw new Exception(yytext());

}

case -72:

break;

case 76:

{

return newSymbol(sym.QNAME,yytext());

}

case -73:

break;

case 77:

{

throw new Exception(yytext());

}

case -74:

break;

case 79:

{

return newSymbol(sym.QNAME,yytext());

}

case -75:

break;

case 81:

{

return newSymbol(sym.QNAME,yytext());

}

case -76:

break;

case 83:

{

return newSymbol(sym.QNAME,yytext());

}

case -77:

break;

case 85:

{

return newSymbol(sym.QNAME,yytext());

}

case -78:

break;

case 87:

{

return newSymbol(sym.QNAME,yytext());

}

case -79:

break;

case 89:

{

return newSymbol(sym.QNAME,yytext());

}

case -80:

break;

case 91:

{

return newSymbol(sym.QNAME,yytext());

}

case -81:

break;

case 93:

{

return newSymbol(sym.QNAME,yytext());

}

case -82:

break;

case 95:

{

return newSymbol(sym.QNAME,yytext());

}

case -83:

break;

case 97:

{

return newSymbol(sym.QNAME,yytext());

}

case -84:

break;

case 99:

{

return newSymbol(sym.QNAME,yytext());

}

case -85:

break;

case 101:

{

return newSymbol(sym.QNAME,yytext());

}

case -86:

break;

case 103:

{

return newSymbol(sym.QNAME,yytext());

}

case -87:

break;

case 105:

{

return newSymbol(sym.QNAME,yytext());

}

case -88:

break;

case 107:

{

return newSymbol(sym.QNAME,yytext());

}

case -89:

break;

case 109:

{

return newSymbol(sym.QNAME,yytext());

}

case -90:

break;

case 111:

{

return newSymbol(sym.QNAME,yytext());

}

case -91:

break;

case 113:

{

return newSymbol(sym.QNAME,yytext());

}

case -92:

break;

case 115:

{

return newSymbol(sym.QNAME,yytext());

}

case -93:

break;

case 117:

{

return newSymbol(sym.QNAME,yytext());

}

case -94:

break;

case 119:

{

return newSymbol(sym.QNAME,yytext());

}

case -95:

break;

case 121:

{

return newSymbol(sym.QNAME,yytext());

}

case -96:

break;

case 123:

{

return newSymbol(sym.QNAME,yytext());

}

case -97:

break;

case 125:

{

return newSymbol(sym.QNAME,yytext());

}

case -98:

break;

case 127:

{

return newSymbol(sym.QNAME,yytext());

}

case -99:

break;

case 128:

{

return newSymbol(sym.QNAME,yytext());

}

case -100:

break;

case 129:

{

return newSymbol(sym.QNAME,yytext());

}

case -101:

break;

case 130:

{

return newSymbol(sym.QNAME,yytext());

}

case -102:

break;

case 131:

{

return newSymbol(sym.QNAME,yytext());

}

case -103:

break;

case 132:

{

return newSymbol(sym.QNAME,yytext());

}

case -104:

break;

case 133:

{

return newSymbol(sym.QNAME,yytext());

}

case -105:

break;

case 134:

{

return newSymbol(sym.QNAME,yytext());

}

case -106:

break;

case 135:

{

return newSymbol(sym.QNAME,yytext());

}

case -107:

break;

case 136:

{

return newSymbol(sym.QNAME,yytext());

}

case -108:

break;

case 137:

{

return newSymbol(sym.QNAME,yytext());

}

case -109:

break;

case 138:

{

return newSymbol(sym.QNAME,yytext());

}

case -110:

break;

case 139:

{

return newSymbol(sym.QNAME,yytext());

}

case -111:

break;

case 140:

{

return newSymbol(sym.QNAME,yytext());

}

case -112:

break;

case 141:

{

return newSymbol(sym.QNAME,yytext());

}

case -113:

break;

case 142:

{

return newSymbol(sym.QNAME,yytext());

}

case -114:

break;

case 143:

{

return newSymbol(sym.QNAME,yytext());

}

case -115:

break;

case 144:

{

return newSymbol(sym.QNAME,yytext());

}

case -116:

break;

case 145:

{

return newSymbol(sym.QNAME,yytext());

}

case -117:

break;

case 146:

{

return newSymbol(sym.QNAME,yytext());

}

case -118:

break;

case 147:

{

return newSymbol(sym.QNAME,yytext());

}

case -119:

break;

case 148:

{

return newSymbol(sym.QNAME,yytext());

}

case -120:

break;

case 149:

{

return newSymbol(sym.QNAME,yytext());

}

case -121:

break;

case 150:

{

return newSymbol(sym.QNAME,yytext());

}

case -122:

break;

case 151:

{

return newSymbol(sym.QNAME,yytext());

}

case -123:

break;

case 152:

{

return newSymbol(sym.QNAME,yytext());

}

case -124:

break;

case 153:

{

return newSymbol(sym.QNAME,yytext());

}

case -125:

break;

case 154:

{

return newSymbol(sym.QNAME,yytext());

}

case -126:

break;

case 155:

{

return newSymbol(sym.QNAME,yytext());

}

case -127:

break;

case 156:

{

return newSymbol(sym.QNAME,yytext());

}

case -128:

break;

case 157:

{

return newSymbol(sym.QNAME,yytext());

}

case -129:

break;

case 158:

{

return newSymbol(sym.QNAME,yytext());

}

case -130:

break;

case 159:

{

return newSymbol(sym.QNAME,yytext());

}

case -131:

break;

case 160:

{

return newSymbol(sym.QNAME,yytext());

}

case -132:

break;

case 161:

{

return newSymbol(sym.QNAME,yytext());

}

case -133:

break;

case 162:

{

return newSymbol(sym.QNAME,yytext());

}

case -134:

break;

case 163:

{

return newSymbol(sym.QNAME,yytext());

}

case -135:

break;

case 164:

{

return newSymbol(sym.QNAME,yytext());

}

case -136:

break;

case 165:

{

return newSymbol(sym.QNAME,yytext());

}

case -137:

break;

case 166:

{

return newSymbol(sym.QNAME,yytext());

}

case -138:

break;

case 167:

{

return newSymbol(sym.QNAME,yytext());

}

case -139:

break;

case 168:

{

return newSymbol(sym.QNAME,yytext());

}

case -140:

break;

case 169:

{

return newSymbol(sym.QNAME,yytext());

}

case -141:

break;

case 170:

{

return newSymbol(sym.QNAME,yytext());

}

case -142:

break;

case 171:

{

return newSymbol(sym.QNAME,yytext());

}

case -143:

break;

case 172:

{

return newSymbol(sym.QNAME,yytext());

}

case -144:

break;

case 173:

{

return newSymbol(sym.QNAME,yytext());

}

case -145:

break;

case 174:

{

return newSymbol(sym.QNAME,yytext());

}

case -146:

break;

case 175:

{

return newSymbol(sym.QNAME,yytext());

}

case -147:

break;

case 176:

{

return newSymbol(sym.QNAME,yytext());

}

case -148:

break;

case 177:

{

return newSymbol(sym.QNAME,yytext());

}

case -149:

break;

case 178:

{

return newSymbol(sym.QNAME,yytext());

}

case -150:

break;

case 179:

{

return newSymbol(sym.QNAME,yytext());

}

case -151:

break;

case 180:

{

return newSymbol(sym.QNAME,yytext());

}

case -152:

break;

case 181:

{

return newSymbol(sym.QNAME,yytext());

}

case -153:

break;

case 182:

{

return newSymbol(sym.QNAME,yytext());

}

case -154:

break;

case 183:

{

return newSymbol(sym.QNAME,yytext());

}

case -155:

break;

case 184:

{

return newSymbol(sym.QNAME,yytext());

}

case -156:

break;

case 187:

{

return newSymbol(sym.QNAME,yytext());

}

case -157:

break;

case 189:

{

return newSymbol(sym.QNAME,yytext());

}

case -158:

break;

case 191:

{

return newSymbol(sym.QNAME,yytext());

}

case -159:

break;

case 192:

{

return newSymbol(sym.QNAME,yytext());

}

case -160:

break;

case 193:

{

return newSymbol(sym.QNAME,yytext());

}

case -161:

break;

case 194:

{

return newSymbol(sym.QNAME,yytext());

}

case -162:

break;

case 195:

{

return newSymbol(sym.QNAME,yytext());

}

case -163:

break;

case 196:

{

return newSymbol(sym.QNAME,yytext());

}

case -164:

break;

case 197:

{

return newSymbol(sym.QNAME,yytext());

}

case -165:

break;

case 198:

{

return newSymbol(sym.QNAME,yytext());

}

case -166:

break;

case 199:

{

return newSymbol(sym.QNAME,yytext());

}

case -167:

break;

case 200:

{

return newSymbol(sym.QNAME,yytext());

}

case -168:

break;

case 201:

{

return newSymbol(sym.QNAME,yytext());

}

case -169:

break;

case 202:

{

return newSymbol(sym.QNAME,yytext());

}

case -170:

break;

case 203:

{

return newSymbol(sym.QNAME,yytext());

}

case -171:

break;

case 204:

{

return newSymbol(sym.QNAME,yytext());

}

case -172:

break;

case 205:

{

return newSymbol(sym.QNAME,yytext());

}

case -173:

break;

case 206:

{

return newSymbol(sym.QNAME,yytext());

}

case -174:

break;

case 207:

{

return newSymbol(sym.QNAME,yytext());

}

case -175:

break;

case 208:

{

return newSymbol(sym.QNAME,yytext());

}

case -176:

break;

case 209:

{

return newSymbol(sym.QNAME,yytext());

}

case -177:

break;

case 210:

{

return newSymbol(sym.QNAME,yytext());

}

case -178:

break;

case 211:

{

return newSymbol(sym.QNAME,yytext());

}

case -179:

break;

case 212:

{

return newSymbol(sym.QNAME,yytext());

}

case -180:

break;

case 213:

{

return newSymbol(sym.QNAME,yytext());

}

case -181:

break;

case 214:

{

return newSymbol(sym.QNAME,yytext());

}

case -182:

break;

case 215:

{

return newSymbol(sym.QNAME,yytext());

}

case -183:

break;

case 216:

{

return newSymbol(sym.QNAME,yytext());

}

case -184:

break;

case 217:

{

return newSymbol(sym.QNAME,yytext());

}

case -185:

break;

case 218:

{

return newSymbol(sym.QNAME,yytext());

}

case -186:

break;

case 219:

{

return newSymbol(sym.QNAME,yytext());

}

case -187:

break;

case 220:

{

return newSymbol(sym.QNAME,yytext());

}

case -188:

break;

case 221:

{

return newSymbol(sym.QNAME,yytext());

}

case -189:

break;

case 222:

{

return newSymbol(sym.QNAME,yytext());

}

case -190:

break;

case 223:

{

return newSymbol(sym.QNAME,yytext());

}

case -191:

break;

case 224:

{

return newSymbol(sym.QNAME,yytext());

}

case -192:

break;

case 225:

{

return newSymbol(sym.QNAME,yytext());

}

case -193:

break;

case 226:

{

return newSymbol(sym.QNAME,yytext());

}

case -194:

break;

case 227:

{

return newSymbol(sym.QNAME,yytext());

}

case -195:

break;

case 228:

{

return newSymbol(sym.QNAME,yytext());

}

case -196:

break;

case 229:

{

return newSymbol(sym.QNAME,yytext());

}

case -197:

break;

case 230:

{

return newSymbol(sym.QNAME,yytext());

}

case -198:

break;

case 231:

{

return newSymbol(sym.QNAME,yytext());

}

case -199:

break;

case 232:

{

return newSymbol(sym.QNAME,yytext());

}

case -200:

break;

case 233:

{

return newSymbol(sym.QNAME,yytext());

}

case -201:

break;

default :

yy_error(YY_E_INTERNAL,false);

case -1:

}

yy_initial=true;

yy_state=yy_state_dtrans[yy_lexical_state];

yy_next_state=YY_NO_STATE;

yy_last_accept_state=YY_NO_STATE;

yy_mark_start();

yy_this_accept=yy_acpt[yy_state];

if (YY_NOT_ACCEPT != yy_this_accept) {

yy_last_accept_state=yy_state;

yy_mark_end();

}

}

}

}

}

Location: XPathLexer.java

Content: 

static private int[][] unpackFromString(int size1,int size2,String st){

  int colonIndex=-1;

  String lengthString;

  int sequenceLength=0;

  int sequenceInteger=0;

  int commaIndex;

  String workString;

  int res[][]=new int[size1][size2];

  for (int i=0; i < size1; i++) {

    for (int j=0; j < size2; j++) {

      if (sequenceLength != 0) {

        res[i][j]=sequenceInteger;

        sequenceLength--;

        continue;

      }

      commaIndex=st.indexOf(',');

      workString=(commaIndex == -1) ? st : st.substring(0,commaIndex);

      st=st.substring(commaIndex + 1);

      colonIndex=workString.indexOf(':');

      if (colonIndex == -1) {

        res[i][j]=Integer.parseInt(workString);

        continue;

      }

      lengthString=workString.substring(colonIndex + 1);

      sequenceLength=Integer.parseInt(lengthString);

      workString=workString.substring(0,colonIndex);

      sequenceInteger=Integer.parseInt(workString);

      res[i][j]=sequenceInteger;

      sequenceLength--;

    }

  }

  return res;

}

Location: XPathLexer.java

Content: 

private XPathLexer(){

  yy_buffer=new char[YY_BUFFER_SIZE];

  yy_buffer_read=0;

  yy_buffer_index=0;

  yy_buffer_start=0;

  yy_buffer_end=0;

  yy_at_bol=true;

  yy_lexical_state=YYINITIAL;

}

Location: XPathLexer.java

Content: 

XPathLexer(java.io.InputStream instream){

  this();

  if (null == instream) {

    throw (new Error("Error: Bad input stream initializer."));

  }

  yy_reader=new java.io.BufferedReader(new java.io.InputStreamReader(instream));

}

Location: XPathLexer.java

Content: 

private void yybegin(int state){

  yy_lexical_state=state;

}

Location: XPathLexer.java

Content: 

private int yylength(){

  return yy_buffer_end - yy_buffer_start;

}

Location: XPathLexer.java

Content: 

private java.lang.String yytext(){

  return (new java.lang.String(yy_buffer,yy_buffer_start,yy_buffer_end - yy_buffer_start));

}

Location: XPathLexer.java

Content: 

private int yy_advance() throws java.io.IOException {

  int next_read;

  int i;

  int j;

  if (yy_buffer_index < yy_buffer_read) {

    return yy_buffer[yy_buffer_index++];

  }

  if (0 != yy_buffer_start) {

    i=yy_buffer_start;

    j=0;

    while (i < yy_buffer_read) {

      yy_buffer[j]=yy_buffer[i];

      ++i;

      ++j;

    }

    yy_buffer_end=yy_buffer_end - yy_buffer_start;

    yy_buffer_start=0;

    yy_buffer_read=j;

    yy_buffer_index=j;

    next_read=yy_reader.read(yy_buffer,yy_buffer_read,yy_buffer.length - yy_buffer_read);

    if (-1 == next_read) {

      return YY_EOF;

    }

    yy_buffer_read=yy_buffer_read + next_read;

  }

  while (yy_buffer_index >= yy_buffer_read) {

    if (yy_buffer_index >= yy_buffer.length) {

      yy_buffer=yy_double(yy_buffer);

    }

    next_read=yy_reader.read(yy_buffer,yy_buffer_read,yy_buffer.length - yy_buffer_read);

    if (-1 == next_read) {

      return YY_EOF;

    }

    yy_buffer_read=yy_buffer_read + next_read;

  }

  return yy_buffer[yy_buffer_index++];

}

Location: XPathLexer.java

Content: 

private char[] yy_double(char buf[]){

  int i;

  char newbuf[];

  newbuf=new char[2 * buf.length];

  for (i=0; i < buf.length; ++i) {

    newbuf[i]=buf[i];

  }

  return newbuf;

}

Location: XPathLexer.java

Content: 

private void yy_error(int code,boolean fatal){

  java.lang.System.out.print(yy_error_string[code]);

  java.lang.System.out.flush();

  if (fatal) {

    throw new Error("Fatal Error.\n");

  }

}

Location: XPathLexer.java

Content: 

private void yy_mark_end(){

  yy_buffer_end=yy_buffer_index;

}

Location: XPathLexer.java

Content: 

private void yy_mark_start(){

  yy_buffer_start=yy_buffer_index;

}

Location: XPathLexer.java

Content: 

private void yy_move_end(){

  if (yy_buffer_end > yy_buffer_start && '\n' == yy_buffer[yy_buffer_end - 1])   yy_buffer_end--;

  if (yy_buffer_end > yy_buffer_start && '\r' == yy_buffer[yy_buffer_end - 1])   yy_buffer_end--;

}

Location: XPathLexer.java

Content: 

private void yy_to_mark(){

  yy_buffer_index=yy_buffer_end;

  yy_at_bol=(yy_buffer_end > yy_buffer_start) && ('\r' == yy_buffer[yy_buffer_end - 1] || '\n' == yy_buffer[yy_buffer_end - 1] || 2028 == yy_buffer[yy_buffer_end - 1] || 2029 == yy_buffer[yy_buffer_end - 1]);

}

