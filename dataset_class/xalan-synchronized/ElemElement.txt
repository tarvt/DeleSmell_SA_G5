Location: ElemElement.java

Content: 

/** 

 * Construct a node in the result tree. This method is overloaded by xsl:attribute. At this class level, this method creates an element. If the node is null, we instantiate only the content of the node in accordance with section 7.1.2 of the XSLT 1.0 Recommendation.

 * @param nodeName      The name of the node, which may be <code>null</code>. If<code>null</code>, only the non-attribute children of this node will be processed.

 * @param prefix        The prefix for the namespace, which may be<code>null</code>. If not <code>null</code>, this prefix will be mapped and unmapped.

 * @param nodeNamespace The namespace of the node, which may be not be<code>null</code>.

 * @param transformer   non-null reference to the the current transform-timestate.

 * @throws TransformerException

 */

void constructNode(String nodeName,String prefix,String nodeNamespace,TransformerImpl transformer) throws TransformerException {

  boolean shouldAddAttrs;

  try {

    SerializationHandler rhandler=transformer.getResultTreeHandler();

    if (null == nodeName) {

      shouldAddAttrs=false;

    }

 else {

      if (null != prefix) {

        rhandler.startPrefixMapping(prefix,nodeNamespace,true);

      }

      rhandler.startElement(nodeNamespace,QName.getLocalPart(nodeName),nodeName);

      super.execute(transformer);

      shouldAddAttrs=true;

    }

    transformer.executeChildTemplates(this,shouldAddAttrs);

    if (null != nodeName) {

      rhandler.endElement(nodeNamespace,QName.getLocalPart(nodeName),nodeName);

      if (null != prefix) {

        rhandler.endPrefixMapping(prefix);

      }

    }

  }

 catch (  SAXException se) {

    throw new TransformerException(se);

  }

}

Location: ElemElement.java

Content: 

/** 

 * Resolve the namespace into a prefix. Meant to be overidded by elemAttribute if this class is derived.

 * @param rhandler      The current result tree handler.

 * @param prefix        The probable prefix if already known.

 * @param nodeNamespace The namespace.

 * @return The prefix to be used.

 */

protected String resolvePrefix(SerializationHandler rhandler,String prefix,String nodeNamespace) throws TransformerException {

  return prefix;

}

Location: ElemElement.java

Content: 

/** 

 * Set the "namespace" attribute. If the namespace attribute is present, then it also is interpreted as an attribute value template. The string that results from instantiating the attribute value template should be a URI reference. It is not an error if the string is not a syntactically legal URI reference.

 * @param v NameSpace attribute to set for this element

 */

public void setNamespace(AVT v){

  m_namespace_avt=v;

}

