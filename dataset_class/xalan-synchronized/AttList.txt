Location: AttList.java

Content: 

/** 

 * Constructor AttList

 * @param attrs List of attributes this will contain

 * @param dh    DOMHelper

 */

public AttList(NamedNodeMap attrs,DOM2Helper dh){

  m_attrs=attrs;

  m_lastIndex=m_attrs.getLength() - 1;

  m_dh=dh;

}

Location: AttList.java

Content: 

/** 

 * Constructor AttList

 * @param attrs List of attributes this will contain

 * @param dh    DOMHelper

 */

public AttList(NamedNodeMap attrs,DOMHelper dh){

  m_attrs=attrs;

  m_lastIndex=m_attrs.getLength() - 1;

  m_dh=dh;

}

Location: AttList.java

Content: 

/** 

 * Look up the index of an attribute by raw XML 1.0 name.

 * @param qName The qualified (prefixed) name.

 * @return The index of the attribute, or -1 if it does not appear in the list.

 */

public int getIndex(String qName){

  for (int i=m_attrs.getLength() - 1; i >= 0; --i) {

    Node a=m_attrs.item(i);

    if (a.getNodeName().equals(qName))     return i;

  }

  return -1;

}

Location: AttList.java

Content: 

/** 

 * Look up the index of an attribute by Namespace name.

 * @param uri       The Namespace URI, or the empty string if the name has noNamespace URI.

 * @param localPart The attribute's local name.

 * @return The index of the attribute, or -1 if it does not appear in the list.

 */

public int getIndex(String uri,String localPart){

  for (int i=m_attrs.getLength() - 1; i >= 0; --i) {

    Node a=m_attrs.item(i);

    String u=a.getNamespaceURI();

    if ((u == null ? uri == null : u.equals(uri)) && a.getLocalName().equals(localPart))     return i;

  }

  return -1;

}

Location: AttList.java

Content: 

/** 

 * Look up an attribute's local name by index.

 * @param index The attribute index (zero-based).

 * @return The local name, or the empty string if Namespace processing is notbeing performed, or null if the index is out of range.

 */

public String getLocalName(int index){

  return m_dh.getLocalNameOfNode(((Attr)m_attrs.item(index)));

}

Location: AttList.java

Content: 

/** 

 * Look up an attribute's qualified name by index.

 * @param i The attribute index (zero-based).

 * @return The attribute's qualified name

 */

public String getQName(int i){

  return ((Attr)m_attrs.item(i)).getName();

}

Location: AttList.java

Content: 

/** 

 * Get the attribute's node type by index

 * @param i The attribute index (zero-based)

 * @return the attribute's node type

 */

public String getType(int i){

  return "CDATA";

}

Location: AttList.java

Content: 

/** 

 * Get the attribute's node type by name

 * @param name Attribute name

 * @return the attribute's node type

 */

public String getType(String name){

  return "CDATA";

}

Location: AttList.java

Content: 

/** 

 * Look up an attribute's type by Namespace name.

 * @param uri       The Namespace URI, or the empty String if the name has noNamespace URI.

 * @param localName The local name of the attribute.

 * @return The attribute type as a string, or null if the attribute is not inthe list or if Namespace processing is not being performed.

 */

public String getType(String uri,String localName){

  return "CDATA";

}

Location: AttList.java

Content: 

/** 

 * Look up an attribute's Namespace URI by index.

 * @param index The attribute index (zero-based).

 * @return The Namespace URI, or the empty string if none is available, or nullif the index is out of range.

 */

public String getURI(int index){

  String ns=m_dh.getNamespaceOfNode(((Attr)m_attrs.item(index)));

  if (null == ns)   ns="";

  return ns;

}

Location: AttList.java

Content: 

/** 

 * Get the attribute's node value by index

 * @param i The attribute index (zero-based)

 * @return the attribute's node value

 */

public String getValue(int i){

  return ((Attr)m_attrs.item(i)).getValue();

}

Location: AttList.java

Content: 

/** 

 * Look up an attribute's value by name.

 * @param name The attribute node's name

 * @return The attribute node's value

 */

public String getValue(String name){

  Attr attr=((Attr)m_attrs.getNamedItem(name));

  return (null != attr) ? attr.getValue() : null;

}

Location: AttList.java

Content: 

/** 

 * Look up an attribute's value by Namespace name.

 * @param uri       The Namespace URI, or the empty String if the name has noNamespace URI.

 * @param localName The local name of the attribute.

 * @return The attribute value as a string, or null if the attribute is not inthe list.

 */

public String getValue(String uri,String localName){

  Node a=m_attrs.getNamedItemNS(uri,localName);

  return (a == null) ? null : a.getNodeValue();

}

