Location: ElemDesc.java

Content: 

/** 

 * Construct an ElementDescription with an initial set of flags.

 * @param flags Element flags

 * @see m_flags

 */

ElemDesc(int flags){

  m_flags=flags;

}

Location: ElemDesc.java

Content: 

int getFlags(){

  return m_flags;

}

Location: ElemDesc.java

Content: 

/** 

 * Find out if a flag is set in a given attribute of this element

 * @param name  Attribute name

 * @param flags Flag to check

 * @return True if the flag is set in the attribute. Returns false if theattribute is not found

 * @see m_flags

 */

boolean isAttrFlagSet(String name,int flags){

  if (null != m_attrs) {

    Integer _flags=(Integer)m_attrs.get(name);

    if (null != _flags) {

      return (_flags.intValue() & flags) != 0;

    }

  }

  return false;

}

Location: ElemDesc.java

Content: 

/** 

 * "is (this element described by these flags)". This might more properly be called areFlagsSet(). It accepts an integer (being used as a bitvector) and checks whether all the corresponding bits are set in our internal flags. Note that this test is performed as a bitwise AND, not an equality test, so a 0 bit in the input means "don't test", not "must be set false".

 * @param flags Vector of flags to compare against this element's flags

 * @return true if the flags set in the parameter are also set in the element'sstored flags.

 * @see m_flags

 * @see isAttrFlagSet

 */

boolean is(int flags){

  return (m_flags & flags) != 0;

}

Location: ElemDesc.java

Content: 

/** 

 * Set a new attribute for this element

 * @param name  Attribute name

 * @param flags Attibute flags

 */

void setAttr(String name,int flags){

  if (null == m_attrs)   m_attrs=new Hashtable();

  m_attrs.put(name,new Integer(flags));

}

