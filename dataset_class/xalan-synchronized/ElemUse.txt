Location: ElemUse.java

Content: 

/** 

 * Add the attributes from the named attribute sets to the attribute list. TODO: Error handling for: "It is an error if there are two attribute sets with the same expanded-name and with equal import precedence and that both contain the same attribute unless there is a definition of the attribute set with higher import precedence that also contains the attribute."

 * @param transformer non-null reference to the the current transform-timestate.

 * @param stylesheet  The owning root stylesheet

 * @throws TransformerException

 */

public void applyAttrSets(TransformerImpl transformer,StylesheetRoot stylesheet) throws TransformerException {

  applyAttrSets(transformer,stylesheet,m_attributeSetsNames);

}

Location: ElemUse.java

Content: 

/** 

 * Add the attributes from the named attribute sets to the attribute list. TODO: Error handling for: "It is an error if there are two attribute sets with the same expanded-name and with equal import precedence and that both contain the same attribute unless there is a definition of the attribute set with higher import precedence that also contains the attribute."

 * @param transformer        non-null reference to the the currenttransform-time state.

 * @param stylesheet         The owning root stylesheet

 * @param attributeSetsNames List of attribute sets names to apply

 * @throws TransformerException

 */

private void applyAttrSets(TransformerImpl transformer,StylesheetRoot stylesheet,QName attributeSetsNames[]) throws TransformerException {

  if (null != attributeSetsNames) {

    int nNames=attributeSetsNames.length;

    for (int i=0; i < nNames; i++) {

      QName qname=attributeSetsNames[i];

      java.util.List attrSets=stylesheet.getAttributeSetComposed(qname);

      if (null != attrSets) {

        int nSets=attrSets.size();

        for (int k=nSets - 1; k >= 0; k--) {

          ElemAttributeSet attrSet=(ElemAttributeSet)attrSets.get(k);

          attrSet.execute(transformer);

        }

      }

 else {

        throw new TransformerException(XSLMessages.createMessage(XSLTErrorResources.ER_NO_ATTRIB_SET,new Object[]{qname}),this);

      }

    }

  }

}

Location: ElemUse.java

Content: 

/** 

 * Set the "use-attribute-sets" attribute. Attribute sets are used by specifying a use-attribute-sets attribute on xsl:element, xsl:copy (see [7.5 Copying]) or xsl:attribute-set elements. The value of the use-attribute-sets attribute is a whitespace-separated list of names of attribute sets. Each name is specified as a QName, which is expanded as described in [2.4 Qualified Names].

 * @param v The value to set for the "use-attribute-sets" attribute.

 */

public void setUseAttributeSets(QName[] v){

  m_attributeSetsNames=v;

}

Location: ElemUse.java

Content: 

/** 

 * Set the "use-attribute-sets" attribute. Attribute sets are used by specifying a use-attribute-sets attribute on xsl:element, xsl:copy (see [7.5 Copying]) or xsl:attribute-set elements. The value of the use-attribute-sets attribute is a whitespace-separated list of names of attribute sets. Each name is specified as a QName, which is expanded as described in [2.4 Qualified Names].

 * @param v The value to set for the "use-attribute-sets" attribute.

 */

public void setUseAttributeSets(Vector v){

  int n=v.size();

  m_attributeSetsNames=new QName[n];

  for (int i=0; i < n; i++) {

    m_attributeSetsNames[i]=(QName)v.elementAt(i);

  }

}

