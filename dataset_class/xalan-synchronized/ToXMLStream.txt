Location: ToXMLStream.java

Content: 

/** 

 * Copy properties from another SerializerToXML.

 * @param xmlListener non-null reference to a SerializerToXML object.

 */

public void CopyFrom(ToXMLStream xmlListener){

  setWriter(xmlListener.m_writer);

  String encoding=xmlListener.getEncoding();

  setEncoding(encoding);

  setOmitXMLDeclaration(xmlListener.getOmitXMLDeclaration());

  m_ispreserve=xmlListener.m_ispreserve;

  m_preserves=xmlListener.m_preserves;

  m_isprevtext=xmlListener.m_isprevtext;

  m_doIndent=xmlListener.m_doIndent;

  setIndentAmount(xmlListener.getIndentAmount());

  m_startNewLine=xmlListener.m_startNewLine;

  m_needToOutputDocTypeDecl=xmlListener.m_needToOutputDocTypeDecl;

  setDoctypeSystem(xmlListener.getDoctypeSystem());

  setDoctypePublic(xmlListener.getDoctypePublic());

  setStandalone(xmlListener.getStandalone());

  setMediaType(xmlListener.getMediaType());

  m_encodingInfo=xmlListener.m_encodingInfo;

  m_spaceBeforeClose=xmlListener.m_spaceBeforeClose;

  m_cdataStartCalled=xmlListener.m_cdataStartCalled;

}

Location: ToXMLStream.java

Content: 

/** 

 * Ends a whitespace preserving section.

 * @see #startPreserving

 * @throws org.xml.sax.SAXException

 */

public void endPreserving() throws org.xml.sax.SAXException {

  m_ispreserve=m_preserves.isEmpty() ? false : m_preserves.pop();

}

Location: ToXMLStream.java

Content: 

/** 

 * From XSLTC Declare a prefix to point to a namespace URI. Inform SAX handler if this is a new prefix mapping.

 */

protected boolean pushNamespace(String prefix,String uri){

  try {

    if (m_prefixMap.pushNamespace(prefix,uri,m_elemContext.m_currentElemDepth)) {

      startPrefixMapping(prefix,uri);

      return true;

    }

  }

 catch (  SAXException e) {

  }

  return false;

}

Location: ToXMLStream.java

Content: 

/** 

 * Reset all of the fields owned by ToStream class

 */

private void resetToXMLStream(){

  return;

}

Location: ToXMLStream.java

Content: 

/** 

 * Starts a whitespace preserving section. All characters printed within a preserving section are printed without indentation and without consolidating multiple spaces. This is equivalent to the <tt>xml:space=&quot;preserve&quot;</tt> attribute. Only XML and HTML serializers need to support this method. <p> The contents of the whitespace preserving section will be delivered through the regular <tt>characters</tt> event.

 * @throws org.xml.sax.SAXException

 */

public void startPreserving() throws org.xml.sax.SAXException {

  m_preserves.push(true);

  m_ispreserve=true;

}

Location: ToXMLStream.java

Content: 

/** 

 * Default constructor.

 */

public ToXMLStream(){

  m_charInfo=m_xmlcharInfo;

  initCDATA();

  m_prefixMap=new NamespaceMappings();

}

