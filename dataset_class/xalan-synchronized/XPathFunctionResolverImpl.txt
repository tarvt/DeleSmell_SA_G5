Location: XPathFunctionResolverImpl.java

Content: 

/** 

 * Return the implementation class name of an EXSLT extension from a given namespace uri. The uri must starts with "http://exslt.org".

 */

private String getEXSLTClassName(String uri){

  if (uri.equals(ExtensionNamespaceContext.EXSLT_MATH_URI))   return "org.apache.xalan.lib.ExsltMath";

 else   if (uri.equals(ExtensionNamespaceContext.EXSLT_SET_URI))   return "org.apache.xalan.lib.ExsltSets";

 else   if (uri.equals(ExtensionNamespaceContext.EXSLT_STRING_URI))   return "org.apache.xalan.lib.ExsltStrings";

 else   if (uri.equals(ExtensionNamespaceContext.EXSLT_DATETIME_URI))   return "org.apache.xalan.lib.ExsltDatetime";

 else   if (uri.equals(ExtensionNamespaceContext.EXSLT_DYNAMIC_URI))   return "org.apache.xalan.lib.ExsltDynamic";

 else   if (uri.equals(ExtensionNamespaceContext.EXSLT_URI))   return "org.apache.xalan.lib.ExsltCommon";

 else   return null;

}

Location: XPathFunctionResolverImpl.java

Content: 

/** 

 * Resolve an extension function from the qualified name and arity.

 */

public XPathFunction resolveFunction(QName qname,int arity){

  if (qname == null)   throw new NullPointerException(XSLMessages.createMessage(XSLTErrorResources.ER_XPATH_RESOLVER_NULL_QNAME,null));

  if (arity < 0)   throw new IllegalArgumentException(XSLMessages.createMessage(XSLTErrorResources.ER_XPATH_RESOLVER_NEGATIVE_ARITY,null));

  String uri=qname.getNamespaceURI();

  if (uri == null || uri.length() == 0)   return null;

  String className=null;

  String methodName=null;

  if (uri.startsWith("http://exslt.org")) {

    className=getEXSLTClassName(uri);

    methodName=qname.getLocalPart();

  }

 else   if (!uri.equals(ExtensionNamespaceContext.JAVA_EXT_URI)) {

    int lastSlash=className.lastIndexOf('/');

    if (-1 != lastSlash)     className=className.substring(lastSlash + 1);

  }

  String localPart=qname.getLocalPart();

  int lastDotIndex=localPart.lastIndexOf('.');

  if (lastDotIndex > 0) {

    if (className != null)     className=className + "." + localPart.substring(0,lastDotIndex);

 else     className=localPart.substring(0,lastDotIndex);

    methodName=localPart.substring(lastDotIndex + 1);

  }

 else   methodName=localPart;

  if (null == className || className.trim().length() == 0 || null == methodName || methodName.trim().length() == 0)   return null;

  ExtensionHandler handler=null;

  try {

    ExtensionHandler.getClassForName(className);

    handler=new ExtensionHandlerJavaClass(uri,"javaclass",className);

  }

 catch (  ClassNotFoundException e) {

    return null;

  }

  return new XPathFunctionImpl(handler,methodName);

}

