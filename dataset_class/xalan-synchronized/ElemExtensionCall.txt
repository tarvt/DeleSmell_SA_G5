Location: ElemExtensionCall.java

Content: 

/** 

 * Return the value of the attribute interpreted as an Attribute Value Template (in other words, you can use curly expressions such as href="http://{website}".

 * @param rawName     Raw name of the attribute to get

 * @param sourceNode  non-null reference to the <a href="http://www.w3.org/TR/xslt#dt-current-node">current source node</a>.

 * @param transformer non-null reference to the the current transform-timestate.

 * @return the value of the attribute

 * @throws TransformerException

 */

public String getAttribute(String rawName,org.w3c.dom.Node sourceNode,TransformerImpl transformer) throws TransformerException {

  AVT avt=getLiteralResultAttribute(rawName);

  if ((null != avt) && avt.getRawName().equals(rawName)) {

    XPathContext xctxt=transformer.getXPathContext();

    return avt.evaluate(xctxt,xctxt.getDTMHandleFromNode(sourceNode),this);

  }

  return null;

}

Location: ElemExtensionCall.java

Content: 

/** 

 * Return the ElemExtensionDecl for this extension element

 * @param stylesheet Stylesheet root associated with this extension element

 * @param namespace  Namespace associated with this extension element

 * @return the ElemExtensionDecl for this extension element.

 */

private ElemExtensionDecl getElemExtensionDecl(StylesheetRoot stylesheet,String namespace){

  ElemExtensionDecl decl=null;

  int n=stylesheet.getGlobalImportCount();

  for (int i=0; i < n; i++) {

    Stylesheet imported=stylesheet.getGlobalImport(i);

    for (ElemTemplateElement child=imported.getFirstChildElem(); child != null; child=child.getNextSiblingElem()) {

      if (Constants.ELEMNAME_EXTENSIONDECL == child.getXSLToken()) {

        decl=(ElemExtensionDecl)child;

        String prefix=decl.getPrefix();

        String declNamespace=child.getNamespaceForPrefix(prefix);

        if (namespace.equals(declNamespace)) {

          return decl;

        }

      }

    }

  }

  return null;

}

