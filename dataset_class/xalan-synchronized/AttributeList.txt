Location: AttributeList.java

Content: 

/** 

 * Adds an attribute to the list

 */

public void add(String qname,String value){

  if (_attributes == null)   alloc();

  Integer obj=(Integer)_attributes.get(qname);

  if (obj == null) {

    _attributes.put(qname,obj=new Integer(_length++));

    _qnames.addElement(qname);

    _values.addElement(value);

    int col=qname.lastIndexOf(':');

    if (col > -1) {

      _uris.addElement(qname.substring(0,col));

      _names.addElement(qname.substring(col + 1));

    }

 else {

      _uris.addElement(EMPTYSTRING);

      _names.addElement(qname);

    }

  }

 else {

    final int index=obj.intValue();

    _values.set(index,value);

  }

}

Location: AttributeList.java

Content: 

/** 

 * Allocate memory for the AttributeList %OPT% Use on-demand allocation for the internal vectors. The memory is only allocated when there is an attribute. This reduces the cost of creating many small RTFs.

 */

private void alloc(){

  _attributes=new Hashtable();

  _names=new Vector();

  _values=new Vector();

  _qnames=new Vector();

  _uris=new Vector();

}

Location: AttributeList.java

Content: 

/** 

 * Attributes clone constructor

 */

public AttributeList(org.xml.sax.Attributes attributes){

  this();

  if (attributes != null) {

    final int count=attributes.getLength();

    for (int i=0; i < count; i++) {

      add(attributes.getQName(i),attributes.getValue(i));

    }

  }

}

