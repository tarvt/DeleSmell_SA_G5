Location: DOMBuilder.java

Content: 

/** 

 * Append a node to the current container.

 * @param newNode New node to append

 */

protected void append(Node newNode) throws org.xml.sax.SAXException {

  Node currentNode=m_currentNode;

  if (null != currentNode) {

    if (currentNode == m_root && m_nextSibling != null)     currentNode.insertBefore(newNode,m_nextSibling);

 else     currentNode.appendChild(newNode);

  }

 else   if (null != m_docFrag) {

    if (m_nextSibling != null)     m_docFrag.insertBefore(newNode,m_nextSibling);

 else     m_docFrag.appendChild(newNode);

  }

 else {

    boolean ok=true;

    short type=newNode.getNodeType();

    if (type == Node.TEXT_NODE) {

      String data=newNode.getNodeValue();

      if ((null != data) && (data.trim().length() > 0)) {

        throw new org.xml.sax.SAXException(XMLMessages.createXMLMessage(XMLErrorResources.ER_CANT_OUTPUT_TEXT_BEFORE_DOC,null));

      }

      ok=false;

    }

 else     if (type == Node.ELEMENT_NODE) {

      if (m_doc.getDocumentElement() != null) {

        ok=false;

        throw new org.xml.sax.SAXException(XMLMessages.createXMLMessage(XMLErrorResources.ER_CANT_HAVE_MORE_THAN_ONE_ROOT,null));

      }

    }

    if (ok) {

      if (m_nextSibling != null)       m_doc.insertBefore(newNode,m_nextSibling);

 else       m_doc.appendChild(newNode);

    }

  }

}

Location: DOMBuilder.java

Content: 

/** 

 * Receive notification of cdata. <p> The Parser will call this method to report each chunk of character data. SAX parsers may return all contiguous character data in a single chunk, or they may split it into several chunks; however, all of the characters in any single event must come from the same external entity, so that the Locator provides useful information. </p> <p> The application must not attempt to read from the array outside of the specified range. </p> <p> Note that some parsers will report whitespace using the ignorableWhitespace() method rather than this one (validating parsers must do so). </p>

 * @param ch     The characters from the XML document.

 * @param start  The start position in the array.

 * @param length The number of characters to read from the array.

 * @see #ignorableWhitespace

 * @see org.xml.sax.Locator

 */

public void cdata(char ch[],int start,int length) throws org.xml.sax.SAXException {

  if (isOutsideDocElem() && org.apache.xml.utils.XMLCharacterRecognizer.isWhiteSpace(ch,start,length))   return;

  String s=new String(ch,start,length);

  CDATASection section=(CDATASection)m_currentNode.getLastChild();

  section.appendData(s);

}

Location: DOMBuilder.java

Content: 

/** 

 * Receive notification of character data. <p> The Parser will call this method to report each chunk of character data. SAX parsers may return all contiguous character data in a single chunk, or they may split it into several chunks; however, all of the characters in any single event must come from the same external entity, so that the Locator provides useful information. </p> <p> The application must not attempt to read from the array outside of the specified range. </p> <p> Note that some parsers will report whitespace using the ignorableWhitespace() method rather than this one (validating parsers must do so). </p>

 * @param ch     The characters from the XML document.

 * @param start  The start position in the array.

 * @param length The number of characters to read from the array.

 * @see #ignorableWhitespace

 * @see org.xml.sax.Locator

 */

public void characters(char ch[],int start,int length) throws org.xml.sax.SAXException {

  if (isOutsideDocElem() && org.apache.xml.utils.XMLCharacterRecognizer.isWhiteSpace(ch,start,length))   return;

  if (m_inCData) {

    cdata(ch,start,length);

    return;

  }

  String s=new String(ch,start,length);

  Node childNode;

  childNode=m_currentNode != null ? m_currentNode.getLastChild() : null;

  if (childNode != null && childNode.getNodeType() == Node.TEXT_NODE) {

    ((Text)childNode).appendData(s);

  }

 else {

    Text text=m_doc.createTextNode(s);

    append(text);

  }

}

Location: DOMBuilder.java

Content: 

/** 

 * Report an XML comment anywhere in the document. This callback will be used for comments inside or outside the document element, including comments in the external DTD subset (if read).

 * @param ch     An array holding the characters in the comment.

 * @param start  The starting position in the array.

 * @param length The number of characters to use from the array.

 */

public void comment(char ch[],int start,int length) throws org.xml.sax.SAXException {

  append(m_doc.createComment(new String(ch,start,length)));

}

Location: DOMBuilder.java

Content: 

/** 

 * DOMBuilder instance constructor... it will add the DOM nodes to the document.

 * @param doc Root document

 */

public DOMBuilder(Document doc){

  m_doc=doc;

}

Location: DOMBuilder.java

Content: 

/** 

 * DOMBuilder instance constructor... it will add the DOM nodes to the document fragment.

 * @param doc     Root document

 * @param docFrag Document fragment

 */

public DOMBuilder(Document doc,DocumentFragment docFrag){

  m_doc=doc;

  m_docFrag=docFrag;

}

Location: DOMBuilder.java

Content: 

/** 

 * DOMBuilder instance constructor... it will add the DOM nodes to the document fragment.

 * @param doc  Root document

 * @param node Current node

 */

public DOMBuilder(Document doc,Node node){

  m_doc=doc;

  m_currentNode=m_root=node;

  if (node instanceof Element)   m_elemStack.push(node);

}

Location: DOMBuilder.java

Content: 

/** 

 * Report the end of a CDATA section.

 * @see #startCDATA

 */

public void endCDATA() throws org.xml.sax.SAXException {

  m_inCData=false;

}

Location: DOMBuilder.java

Content: 

/** 

 * Receive notification of the end of a document. <p> The SAX parser will invoke this method only once, and it will be the last method invoked during the parse. The parser shall not invoke this method until it has either abandoned parsing (because of an unrecoverable error) or reached the end of input. </p>

 */

public void endDocument() throws org.xml.sax.SAXException {

}

Location: DOMBuilder.java

Content: 

/** 

 * Report the end of DTD declarations.

 * @see #startDTD

 */

public void endDTD() throws org.xml.sax.SAXException {

}

Location: DOMBuilder.java

Content: 

/** 

 * Receive notification of the end of an element. <p> The SAX parser will invoke this method at the end of every element in the XML document; there will be a corresponding startElement() event for every endElement() event (even when the element is empty). </p> <p> If the element name has a namespace prefix, the prefix will still be attached to the name. </p>

 * @param ns        the namespace of the element

 * @param localName The local part of the qualified name of the element

 * @param name      The element name

 */

public void endElement(String ns,String localName,String name) throws org.xml.sax.SAXException {

  m_elemStack.pop();

  m_currentNode=m_elemStack.isEmpty() ? null : (Node)m_elemStack.peek();

}

Location: DOMBuilder.java

Content: 

/** 

 * Report the end of an entity.

 * @param name The name of the entity that is ending.

 * @see #startEntity

 */

public void endEntity(String name) throws org.xml.sax.SAXException {

}

Location: DOMBuilder.java

Content: 

/** 

 * End the scope of a prefix-URI mapping. <p> See startPrefixMapping for details. This event will always occur after the corresponding endElement event, but the order of endPrefixMapping events is not otherwise guaranteed. </p>

 * @param prefix The prefix that was being mapping.

 * @see #startPrefixMapping

 * @see #endElement

 */

public void endPrefixMapping(String prefix) throws org.xml.sax.SAXException {

}

Location: DOMBuilder.java

Content: 

/** 

 * Receive notivication of a entityReference.

 * @param name name of the entity reference

 */

public void entityReference(String name) throws org.xml.sax.SAXException {

  append(m_doc.createEntityReference(name));

}

Location: DOMBuilder.java

Content: 

/** 

 * Get the root document or DocumentFragment of the DOM being created.

 * @return The root document or document fragment if not null

 */

public Node getRootDocument(){

  return (null != m_docFrag) ? (Node)m_docFrag : (Node)m_doc;

}

Location: DOMBuilder.java

Content: 

/** 

 * Get the root node of the DOM tree.

 */

public Node getRootNode(){

  return m_root;

}

Location: DOMBuilder.java

Content: 

/** 

 * Return null since there is no Writer for this class.

 * @return null

 */

public java.io.Writer getWriter(){

  return null;

}

Location: DOMBuilder.java

Content: 

/** 

 * Receive notification of ignorable whitespace in element content. <p> Validating Parsers must use this method to report each chunk of ignorable whitespace (see the W3C XML 1.0 recommendation, section 2.10): non-validating parsers may also use this method if they are capable of parsing and using content models. </p> <p> SAX parsers may return all contiguous whitespace in a single chunk, or they may split it into several chunks; however, all of the characters in any single event must come from the same external entity, so that the Locator provides useful information. </p> <p> The application must not attempt to read from the array outside of the specified range. </p>

 * @param ch     The characters from the XML document.

 * @param start  The start position in the array.

 * @param length The number of characters to read from the array.

 * @see #characters

 */

public void ignorableWhitespace(char ch[],int start,int length) throws org.xml.sax.SAXException {

  if (isOutsideDocElem())   return;

  String s=new String(ch,start,length);

  append(m_doc.createTextNode(s));

}

Location: DOMBuilder.java

Content: 

/** 

 * Tell if the current node is outside the document element.

 * @return true if the current node is outside the document element.

 */

private boolean isOutsideDocElem(){

  return (null == m_docFrag) && m_elemStack.size() == 0 && (null == m_currentNode || m_currentNode.getNodeType() == Node.DOCUMENT_NODE);

}

Location: DOMBuilder.java

Content: 

/** 

 * Receive an object for locating the origin of SAX document events. <p> SAX parsers are strongly encouraged (though not absolutely required) to supply a locator: if it does so, it must supply the locator to the application by invoking this method before invoking any of the other methods in the ContentHandler interface. </p> <p> The locator allows the application to determine the end position of any document-related event, even if the parser is not reporting an error. Typically, the application will use this information for reporting its own errors (such as character content that does not match an application's business rules). The information returned by the locator is probably not sufficient for use with a search engine. </p> <p> Note that the locator will return correct information only during the invocation of the events in this interface. The application should not attempt to use it at any other time. </p>

 * @param locator An object that can return the location of any SAX documentevent.

 * @see org.xml.sax.Locator

 */

public void setDocumentLocator(Locator locator){

}

Location: DOMBuilder.java

Content: 

/** 

 * Set an ID string to node association in the ID table.

 * @param id   The ID string.

 * @param elem The associated ID.

 */

public void setIDAttribute(String id,Element elem){

}

Location: DOMBuilder.java

Content: 

/** 

 * Set the next sibling node, which is where the result nodes should be inserted before.

 * @param nextSibling the next sibling node.

 */

public void setNextSibling(Node nextSibling){

  m_nextSibling=nextSibling;

}

Location: DOMBuilder.java

Content: 

/** 

 * Receive notification of a skipped entity. <p> The Parser will invoke this method once for each entity skipped. Non-validating processors may skip entities if they have not seen the declarations (because, for example, the entity was declared in an external DTD subset). All processors may skip external entities, depending on the values of the http://xml.org/sax/features/external-general-entities and the http://xml.org/sax/features/external-parameter-entities properties. </p>

 * @param name The name of the skipped entity. If it is a parameter entity, thename will begin with '%'.

 */

public void skippedEntity(String name) throws org.xml.sax.SAXException {

}

Location: DOMBuilder.java

Content: 

/** 

 * Report the start of a CDATA section.

 * @see #endCDATA

 */

public void startCDATA() throws org.xml.sax.SAXException {

  m_inCData=true;

  append(m_doc.createCDATASection(""));

}

Location: DOMBuilder.java

Content: 

/** 

 * Receive notification of the beginning of a document. <p> The SAX parser will invoke this method only once, before any other methods in this interface or in DTDHandler (except for setDocumentLocator). </p>

 */

public void startDocument() throws org.xml.sax.SAXException {

}

Location: DOMBuilder.java

Content: 

/** 

 * Report the start of DTD declarations, if any. Any declarations are assumed to be in the internal subset unless otherwise indicated.

 * @param name     The document type name.

 * @param publicId The declared public identifier for the external DTD subset,or null if none was declared.

 * @param systemId The declared system identifier for the external DTD subset,or null if none was declared.

 * @see #endDTD

 * @see #startEntity

 */

public void startDTD(String name,String publicId,String systemId) throws org.xml.sax.SAXException {

}

Location: DOMBuilder.java

Content: 

/** 

 * Report the beginning of an entity. The start and end of the document entity are not reported. The start and end of the external DTD subset are reported using the pseudo-name "[dtd]". All other events must be properly nested within start/end entity events.

 * @param name The name of the entity. If it is a parameter entity, the namewill begin with '%'.

 * @see #endEntity

 * @see org.xml.sax.ext.DeclHandler#internalEntityDecl

 * @see org.xml.sax.ext.DeclHandler#externalEntityDecl

 */

public void startEntity(String name) throws org.xml.sax.SAXException {

}

Location: DOMBuilder.java

Content: 

/** 

 * Begin the scope of a prefix-URI Namespace mapping. <p> The information from this event is not necessary for normal Namespace processing: the SAX XML reader will automatically replace prefixes for element and attribute names when the http://xml.org/sax/features/namespaces feature is true (the default). </p> <p> There are cases, however, when applications need to use prefixes in character data or in attribute values, where they cannot safely be expanded automatically; the start/endPrefixMapping event supplies the information to the application to expand prefixes in those contexts itself, if necessary. </p> <p> Note that start/endPrefixMapping events are not guaranteed to be properly nested relative to each-other: all startPrefixMapping events will occur before the corresponding startElement event, and all endPrefixMapping events will occur after the corresponding endElement event, but their order is not guaranteed. </p>

 * @param prefix The Namespace prefix being declared.

 * @param uri    The Namespace URI the prefix is mapped to.

 * @see #endPrefixMapping

 * @see #startElement

 */

public void startPrefixMapping(String prefix,String uri) throws org.xml.sax.SAXException {

  if (null == prefix || prefix.length() == 0)   prefix="xmlns";

 else   prefix="xmlns:" + prefix;

  m_prefixMappings.addElement(prefix);

  m_prefixMappings.addElement(uri);

}

