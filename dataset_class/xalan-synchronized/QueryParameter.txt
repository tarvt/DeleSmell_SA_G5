Location: QueryParameter.java

Content: 

/** 

 */

public boolean isOutput(){

  return m_output;

}

Location: QueryParameter.java

Content: 

private static int map_type(String typename){

  if (m_Typetable == null) {

    m_Typetable=new Hashtable();

    m_Typetable.put("BIGINT",new Integer(java.sql.Types.BIGINT));

    m_Typetable.put("BINARY",new Integer(java.sql.Types.BINARY));

    m_Typetable.put("BIT",new Integer(java.sql.Types.BIT));

    m_Typetable.put("CHAR",new Integer(java.sql.Types.CHAR));

    m_Typetable.put("DATE",new Integer(java.sql.Types.DATE));

    m_Typetable.put("DECIMAL",new Integer(java.sql.Types.DECIMAL));

    m_Typetable.put("DOUBLE",new Integer(java.sql.Types.DOUBLE));

    m_Typetable.put("FLOAT",new Integer(java.sql.Types.FLOAT));

    m_Typetable.put("INTEGER",new Integer(java.sql.Types.INTEGER));

    m_Typetable.put("LONGVARBINARY",new Integer(java.sql.Types.LONGVARBINARY));

    m_Typetable.put("LONGVARCHAR",new Integer(java.sql.Types.LONGVARCHAR));

    m_Typetable.put("NULL",new Integer(java.sql.Types.NULL));

    m_Typetable.put("NUMERIC",new Integer(java.sql.Types.NUMERIC));

    m_Typetable.put("OTHER",new Integer(java.sql.Types.OTHER));

    m_Typetable.put("REAL",new Integer(java.sql.Types.REAL));

    m_Typetable.put("SMALLINT",new Integer(java.sql.Types.SMALLINT));

    m_Typetable.put("TIME",new Integer(java.sql.Types.TIME));

    m_Typetable.put("TIMESTAMP",new Integer(java.sql.Types.TIMESTAMP));

    m_Typetable.put("TINYINT",new Integer(java.sql.Types.TINYINT));

    m_Typetable.put("VARBINARY",new Integer(java.sql.Types.VARBINARY));

    m_Typetable.put("VARCHAR",new Integer(java.sql.Types.VARCHAR));

    m_Typetable.put("STRING",new Integer(java.sql.Types.VARCHAR));

    m_Typetable.put("BIGDECIMAL",new Integer(java.sql.Types.NUMERIC));

    m_Typetable.put("BOOLEAN",new Integer(java.sql.Types.BIT));

    m_Typetable.put("BYTES",new Integer(java.sql.Types.LONGVARBINARY));

    m_Typetable.put("LONG",new Integer(java.sql.Types.BIGINT));

    m_Typetable.put("SHORT",new Integer(java.sql.Types.SMALLINT));

  }

  Integer type=(Integer)m_Typetable.get(typename.toUpperCase());

  int rtype;

  if (type == null)   rtype=java.sql.Types.OTHER;

 else   rtype=type.intValue();

  return (rtype);

}

Location: QueryParameter.java

Content: 

public QueryParameter(){

  m_type=-1;

  m_name=null;

  m_value=null;

  m_output=false;

  m_typeName=null;

}

Location: QueryParameter.java

Content: 

/** 

 * @param v The parameter value.

 * @param t The type of the parameter.

 */

public QueryParameter(String v,String t){

  m_name=null;

  m_value=v;

  m_output=false;

  setTypeName(t);

}

Location: QueryParameter.java

Content: 

public QueryParameter(String name,String value,String type,boolean out_flag){

  m_name=name;

  m_value=value;

  m_output=out_flag;

  setTypeName(type);

}

Location: QueryParameter.java

Content: 

/** 

 * Set Name, this should really be covered in the constructor but the QueryParser has a State issue where the name is discoverd after the Parameter object needs to be created

 */

public void setIsOutput(boolean flag){

  m_output=flag;

}

Location: QueryParameter.java

Content: 

/** 

 * Used to set the parameter type when the type information is provided in the query.

 * @param newType The parameter type.

 */

public void setTypeName(String newType){

  m_type=map_type(newType);

  m_typeName=newType;

}

