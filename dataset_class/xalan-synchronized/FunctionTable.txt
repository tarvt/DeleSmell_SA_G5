Location: FunctionTable.java

Content: 

/** 

 * Tell if a built-in, non-namespaced function is available.

 * @param methName The local name of the function.

 * @return True if the function can be executed.

 */

public boolean functionAvailable(String methName){

  Object tblEntry=m_functionID.get(methName);

  if (null != tblEntry)   return true;

 else {

    tblEntry=m_functionID_customer.get(methName);

    return (null != tblEntry) ? true : false;

  }

}

Location: FunctionTable.java

Content: 

public FunctionTable(){

}

Location: FunctionTable.java

Content: 

/** 

 * Obtain a function ID from a given function name

 * @param key the function name in a java.lang.String format.

 * @return a function ID, which may correspond to one of the FUNC_XXX valuesfound in  {@link org.apache.xpath.compiler.FunctionTable}, but may be a value installed by an external module.

 */

Object getFunctionID(String key){

  Object id=m_functionID_customer.get(key);

  if (null == id)   id=m_functionID.get(key);

  return id;

}

Location: FunctionTable.java

Content: 

/** 

 * Return the name of the a function in the static table. Needed to avoid making the table publicly available.

 */

String getFunctionName(int funcID){

  if (funcID < NUM_BUILT_IN_FUNCS)   return m_functions[funcID].getName();

 else   return m_functions_customer[funcID - NUM_BUILT_IN_FUNCS].getName();

}

Location: FunctionTable.java

Content: 

/** 

 * Obtain a new Function object from a function ID.

 * @param which The function ID, which may correspond to one of the FUNC_XXXvalues found in  {@link org.apache.xpath.compiler.FunctionTable}, but may be a value installed by an external module.

 * @return a a new Function instance.

 * @throws javax.xml.transform.TransformerException if ClassNotFoundException,IllegalAccessException, or InstantiationException is thrown.

 */

Function getFunction(int which) throws javax.xml.transform.TransformerException {

  try {

    if (which < NUM_BUILT_IN_FUNCS)     return (Function)m_functions[which].newInstance();

 else     return (Function)m_functions_customer[which - NUM_BUILT_IN_FUNCS].newInstance();

  }

 catch (  IllegalAccessException ex) {

    throw new TransformerException(ex.getMessage());

  }

catch (  InstantiationException ex) {

    throw new TransformerException(ex.getMessage());

  }

}

Location: FunctionTable.java

Content: 

/** 

 * Install a built-in function.

 * @param name The unqualified name of the function, must not be null

 * @param func A Implementation of an XPath Function object.

 * @return the position of the function in the internal index.

 */

public int installFunction(String name,Class func){

  int funcIndex;

  Object funcIndexObj=getFunctionID(name);

  if (null != funcIndexObj) {

    funcIndex=((Integer)funcIndexObj).intValue();

    if (funcIndex < NUM_BUILT_IN_FUNCS) {

      funcIndex=m_funcNextFreeIndex++;

      m_functionID_customer.put(name,new Integer(funcIndex));

    }

    m_functions_customer[funcIndex - NUM_BUILT_IN_FUNCS]=func;

  }

 else {

    funcIndex=m_funcNextFreeIndex++;

    m_functions_customer[funcIndex - NUM_BUILT_IN_FUNCS]=func;

    m_functionID_customer.put(name,new Integer(funcIndex));

  }

  return funcIndex;

}

