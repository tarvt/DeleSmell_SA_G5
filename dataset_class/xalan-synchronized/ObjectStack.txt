Location: ObjectStack.java

Content: 

/** 

 * Default constructor. Note that the default block size is very small, for small lists.

 */

public ObjectStack(){

  super();

}

Location: ObjectStack.java

Content: 

/** 

 * Construct a ObjectVector, using the given block size.

 * @param blocksize Size of block to allocate

 */

public ObjectStack(int blocksize){

  super(blocksize);

}

Location: ObjectStack.java

Content: 

/** 

 * Copy constructor for ObjectStack

 * @param v ObjectStack to copy

 */

public ObjectStack(ObjectStack v){

  super(v);

}

Location: ObjectStack.java

Content: 

/** 

 * Pushes an item onto the top of this stack.

 * @param i the int to be pushed onto this stack.

 * @return the <code>item</code> argument.

 */

public Object push(Object i){

  if ((m_firstFree + 1) >= m_mapSize) {

    m_mapSize+=m_blocksize;

    Object newMap[]=new Object[m_mapSize];

    System.arraycopy(m_map,0,newMap,0,m_firstFree + 1);

    m_map=newMap;

  }

  m_map[m_firstFree]=i;

  m_firstFree++;

  return i;

}

Location: ObjectStack.java

Content: 

/** 

 * Returns where an object is on this stack.

 * @param o the desired object.

 * @return the distance from the top of the stack where the object is] located;the return value <code>-1</code> indicates that the object is not on the stack.

 * @since JDK1.0

 */

public int search(Object o){

  int i=lastIndexOf(o);

  if (i >= 0) {

    return size() - i;

  }

  return -1;

}

Location: ObjectStack.java

Content: 

/** 

 * Sets an object at a the top of the statck

 * @param val object to set at the top

 * @throws EmptyStackException if this stack is empty.

 */

public void setTop(Object val){

  try {

    m_map[m_firstFree - 1]=val;

  }

 catch (  ArrayIndexOutOfBoundsException e) {

    throw new EmptyStackException();

  }

}

