Location: UnImplNode.java

Content: 

/** 

 * NEEDSDOC Method adoptNode NEEDSDOC @param source NEEDSDOC (adoptNode) @return

 * @throws DOMException

 */

public Node adoptNode(Node source) throws DOMException {

  error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED);

  return null;

}

Location: UnImplNode.java

Content: 

/** 

 * Unimplemented.

 * @param arg String data to append

 * @throws DOMException

 */

public void appendData(String arg) throws DOMException {

  error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED);

}

Location: UnImplNode.java

Content: 

/** 

 * Unimplemented. See org.w3c.dom.Document

 * @param namespaceURI  Namespace URI of the attribute

 * @param qualifiedName Qualified name of the attribute

 * @return null

 * @throws DOMException

 */

public Attr createAttributeNS(String namespaceURI,String qualifiedName) throws DOMException {

  error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED);

  return null;

}

Location: UnImplNode.java

Content: 

/** 

 * Unimplemented. See org.w3c.dom.Document

 * @param name Attribute name

 * @return null

 * @throws DOMException

 */

public Attr createAttribute(String name) throws DOMException {

  error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED);

  return null;

}

Location: UnImplNode.java

Content: 

/** 

 * Unimplemented. See org.w3c.dom.Document

 * @param data Data for CDATA section

 * @return null

 * @throws DOMException

 */

public CDATASection createCDATASection(String data) throws DOMException {

  error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED);

  return null;

}

Location: UnImplNode.java

Content: 

/** 

 * Unimplemented. See org.w3c.dom.Document

 * @param data Data for comment

 * @return null

 */

public Comment createComment(String data){

  error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED);

  return null;

}

Location: UnImplNode.java

Content: 

/** 

 * Unimplemented. See org.w3c.dom.Document

 * @param namespaceURI  Namespace URI for the element

 * @param qualifiedName Qualified name of the element

 * @return null

 * @throws DOMException

 */

public Element createElementNS(String namespaceURI,String qualifiedName) throws DOMException {

  error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED);

  return null;

}

Location: UnImplNode.java

Content: 

/** 

 * Unimplemented. See org.w3c.dom.Document

 * @param tagName Element tag name

 * @return null

 * @throws DOMException

 */

public Element createElement(String tagName) throws DOMException {

  error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED);

  return null;

}

Location: UnImplNode.java

Content: 

/** 

 * Unimplemented. See org.w3c.dom.Document

 * @param name Entity Reference name

 * @return null

 * @throws DOMException

 */

public EntityReference createEntityReference(String name) throws DOMException {

  error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED);

  return null;

}

Location: UnImplNode.java

Content: 

/** 

 * Unimplemented. See org.w3c.dom.Document

 * @param target Target for Processing instruction

 * @param data   Data for Processing instruction

 * @return null

 * @throws DOMException

 */

public ProcessingInstruction createProcessingInstruction(String target,String data) throws DOMException {

  error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED);

  return null;

}

Location: UnImplNode.java

Content: 

/** 

 * Unimplemented. See org.w3c.dom.Document

 * @param data Data for text node

 * @return null

 */

public Text createTextNode(String data){

  error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED);

  return null;

}

Location: UnImplNode.java

Content: 

/** 

 * Unimplemented.

 * @param offset Start offset of substring to delete.

 * @param count  The length of the substring to delete.

 * @throws DOMException

 */

public void deleteData(int offset,int count) throws DOMException {

  error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED);

}

Location: UnImplNode.java

Content: 

/** 

 * DOM Level 3 An attribute specifying the actual encoding of this document. This is <code>null</code> otherwise. <br> This attribute represents the property [character encoding scheme] defined in .

 * @since DOM Level 3

 */

public String getActualEncoding(){

  return actualEncoding;

}

Location: UnImplNode.java

Content: 

/** 

 * Unimplemented. See org.w3c.dom.Element

 * @param namespaceURI Namespace URI of attribute node to get

 * @param localName    Local part of qualified name of attribute node to get

 * @return null

 */

public Attr getAttributeNodeNS(String namespaceURI,String localName){

  error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED);

  return null;

}

Location: UnImplNode.java

Content: 

/** 

 * Unimplemented. See org.w3c.dom.Element

 * @param name Attribute node name

 * @return null

 */

public Attr getAttributeNode(String name){

  error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED);

  return null;

}

Location: UnImplNode.java

Content: 

/** 

 * Unimplemented. See org.w3c.dom.Element

 * @param namespaceURI Namespace URI of attribute node to get

 * @param localName    Local part of qualified name of attribute node to get

 * @return null

 */

public String getAttributeNS(String namespaceURI,String localName){

  error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED);

  return null;

}

Location: UnImplNode.java

Content: 

/** 

 * Unimplemented. See org.w3c.dom.Element

 * @param name Name of attribute to get

 * @return null

 */

public String getAttribute(String name){

  error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED);

  return null;

}

Location: UnImplNode.java

Content: 

/** 

 * Unimplemented. See org.w3c.dom.Document

 * @return null

 */

public DocumentType getDoctype(){

  error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED);

  return null;

}

Location: UnImplNode.java

Content: 

/** 

 * Unimplemented. See org.w3c.dom.Document

 * @return null

 */

public Element getDocumentElement(){

  error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED);

  return null;

}

Location: UnImplNode.java

Content: 

/** 

 * DOM Level 3 The location of the document or <code>null</code> if undefined. <br> Beware that when the <code>Document</code> supports the feature "HTML" , the href attribute of the HTML BASE element takes precedence over this attribute.

 * @since DOM Level 3

 */

public String getDocumentURI(){

  return fDocumentURI;

}

Location: UnImplNode.java

Content: 

/** 

 * The configuration used when <code>Document.normalizeDocument</code> is invoked.

 * @since DOM Level 3

 */

public DOMConfiguration getDomConfig(){

  return null;

}

Location: UnImplNode.java

Content: 

/** 

 * Unimplemented. See org.w3c.dom.Document

 * @param elementId ID of the element to get

 * @return null

 */

public Element getElementById(String elementId){

  error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED);

  return null;

}

Location: UnImplNode.java

Content: 

/** 

 * Unimplemented. See org.w3c.dom.Element

 * @param namespaceURI Namespace URI of the element

 * @param localName    Local part of qualified name of the element

 * @return null

 */

public NodeList getElementsByTagNameNS(String namespaceURI,String localName){

  error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED);

  return null;

}

Location: UnImplNode.java

Content: 

/** 

 * Unimplemented. See org.w3c.dom.Element

 * @param name Name of the element

 * @return null

 */

public NodeList getElementsByTagName(String name){

  error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED);

  return null;

}

Location: UnImplNode.java

Content: 

/** 

 * Unimplemented. See org.w3c.dom.Document

 * @return null

 */

public DOMImplementation getImplementation(){

  error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED);

  return null;

}

Location: UnImplNode.java

Content: 

/** 

 * <p> Based on the <a href='http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407'>Document Object Model (DOM) Level 3 Core Specification of 07 April 2004.</a>. <p> An attribute specifying, as part of the XML declaration, the encoding of this document. This is <code>null</code> when unspecified.

 * @since DOM Level 3NEEDSDOC ($objectName$) @return

 */

public String getInputEncoding(){

  error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED);

  return null;

}

Location: UnImplNode.java

Content: 

/** 

 * Method getSchemaTypeInfo.

 * @return TypeInfo

 */

public TypeInfo getSchemaTypeInfo(){

  return null;

}

Location: UnImplNode.java

Content: 

/** 

 * Unimplemented. See org.w3c.dom.Node

 * @return False

 */

public boolean getSpecified(){

  error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED);

  return false;

}

Location: UnImplNode.java

Content: 

/** 

 * <p> Based on the <a href='http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407'>Document Object Model (DOM) Level 3 Core Specification of 07 April 2004.</a>. <p> An attribute specifying whether errors checking is enforced or not. When set to <code>false</code>, the implementation is free to not test every possible error case normally defined on DOM operations, and not raise any <code>DOMException</code>. In case of error, the behavior is undefined. This attribute is <code>true</code> by defaults.

 * @since DOM Level 3NEEDSDOC ($objectName$) @return

 */

public boolean getStrictErrorChecking(){

  error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED);

  return false;

}

Location: UnImplNode.java

Content: 

/** 

 * Unimplemented. See org.w3c.dom.Node

 * @return null

 */

public String getTagName(){

  error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED);

  return null;

}

Location: UnImplNode.java

Content: 

/** 

 * DOM Level 3 Returns all text of <code>Text</code> nodes logically-adjacent text nodes to this node, concatenated in document order.

 * @since DOM Level 3

 */

public String getWholeText(){

  return null;

}

Location: UnImplNode.java

Content: 

public String getXmlEncoding(){

  return xmlEncoding;

}

Location: UnImplNode.java

Content: 

public boolean getXmlStandalone(){

  return xmlStandalone;

}

Location: UnImplNode.java

Content: 

public String getXmlVersion(){

  return xmlVersion;

}

Location: UnImplNode.java

Content: 

/** 

 * Unimplemented. See org.w3c.dom.Element

 * @param name

 * @param x

 * @return false

 */

public boolean hasAttributeNS(String name,String x){

  error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED);

  return false;

}

Location: UnImplNode.java

Content: 

/** 

 * Unimplemented. See org.w3c.dom.Element

 * @param name Name of an attribute

 * @return false

 */

public boolean hasAttribute(String name){

  error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED);

  return false;

}

Location: UnImplNode.java

Content: 

/** 

 * Unimplemented. See org.w3c.dom.Document

 * @param importedNode The node to import.

 * @param deep         If <code>true</code>, recursively import the subtreeunder the specified node; if <code>false</code>, import only the node itself, as explained above. This has no effect on <code>Attr</code> , <code>EntityReference</code>, and <code>Notation</code> nodes.

 * @return null

 * @throws DOMException

 */

public Node importNode(Node importedNode,boolean deep) throws DOMException {

  error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED);

  return null;

}

Location: UnImplNode.java

Content: 

/** 

 * Unimplemented.

 * @param offset Start offset of substring to insert. NEEDSDOC @param arg

 * @throws DOMException

 */

public void insertData(int offset,String arg) throws DOMException {

  error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED);

}

Location: UnImplNode.java

Content: 

public boolean isId(){

  return false;

}

Location: UnImplNode.java

Content: 

/** 

 * DOM Level 3 Returns whether this text node contains whitespace in element content, often abusively called "ignorable whitespace".

 */

public boolean isWhitespaceInElementContent(){

  return false;

}

Location: UnImplNode.java

Content: 

/** 

 * DOM Level 3 Normalize document.

 */

public void normalizeDocument(){

}

Location: UnImplNode.java

Content: 

/** 

 * Unimplemented. See org.w3c.dom.Element

 * @param oldAttr Attribute to be removed from this node's list of attributes

 * @return null

 * @throws DOMException

 */

public Attr removeAttributeNode(Attr oldAttr) throws DOMException {

  error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED);

  return null;

}

Location: UnImplNode.java

Content: 

/** 

 * Unimplemented. See org.w3c.dom.Element

 * @param namespaceURI Namespace URI of attribute node to remove

 * @param localName    Local part of qualified name of attribute node to remove

 * @throws DOMException

 */

public void removeAttributeNS(String namespaceURI,String localName) throws DOMException {

  error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED);

}

Location: UnImplNode.java

Content: 

/** 

 * Unimplemented. See org.w3c.dom.Element

 * @param name Attribute node name to remove from list of attributes

 * @throws DOMException

 */

public void removeAttribute(String name) throws DOMException {

  error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED);

}

Location: UnImplNode.java

Content: 

/** 

 * DOM Level 3 Renaming node

 */

public Node renameNode(Node n,String namespaceURI,String name) throws DOMException {

  return n;

}

Location: UnImplNode.java

Content: 

/** 

 * Unimplemented.

 * @param offset Start offset of substring to replace.

 * @param count  The length of the substring to replace.

 * @param arg    substring to replace with

 * @throws DOMException

 */

public void replaceData(int offset,int count,String arg) throws DOMException {

  error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED);

}

Location: UnImplNode.java

Content: 

/** 

 * DOM Level 3

 */

public Text replaceWholeText(String content) throws DOMException {

  return null;

}

Location: UnImplNode.java

Content: 

/** 

 * DOM Level 3 An attribute specifying the actual encoding of this document. This is <code>null</code> otherwise. <br> This attribute represents the property [character encoding scheme] defined in .

 * @since DOM Level 3

 */

public void setActualEncoding(String value){

  actualEncoding=value;

}

Location: UnImplNode.java

Content: 

/** 

 * Unimplemented. See org.w3c.dom.Element

 * @param newAttr Attribute to set

 * @return null

 * @throws DOMException

 */

public Attr setAttributeNodeNS(Attr newAttr) throws DOMException {

  error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED);

  return null;

}

Location: UnImplNode.java

Content: 

/** 

 * Unimplemented. See org.w3c.dom.Element

 * @param newAttr Attribute node to be added to this node's list of attributes

 * @return null

 * @throws DOMException

 */

public Attr setAttributeNode(Attr newAttr) throws DOMException {

  error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED);

  return null;

}

Location: UnImplNode.java

Content: 

/** 

 * Unimplemented. See org.w3c.dom.Element

 * @param namespaceURI Namespace URI of attribute node to set NEEDSDOC @paramqualifiedName

 * @param value        value of attribute

 * @throws DOMException

 */

public void setAttributeNS(String namespaceURI,String qualifiedName,String value) throws DOMException {

  error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED);

}

Location: UnImplNode.java

Content: 

/** 

 * Unimplemented. See org.w3c.dom.Element

 * @param name  Name of attribute to set

 * @param value Value of attribute

 * @throws DOMException

 */

public void setAttribute(String name,String value) throws DOMException {

  error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED);

}

Location: UnImplNode.java

Content: 

/** 

 * Set Node data

 * @param data data to set for this node

 * @throws DOMException

 */

public void setData(String data) throws DOMException {

  error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED);

}

Location: UnImplNode.java

Content: 

/** 

 * DOM Level 3

 */

public void setDocumentURI(String documentURI){

  fDocumentURI=documentURI;

}

Location: UnImplNode.java

Content: 

/** 

 * DOM Level 3: register the given attribute node as an ID attribute

 */

public void setIdAttributeNode(Attr at,boolean makeId){

}

Location: UnImplNode.java

Content: 

/** 

 * DOM Level 3: register the given attribute node as an ID attribute

 */

public void setIdAttributeNS(String namespaceURI,String localName,boolean makeId){

}

Location: UnImplNode.java

Content: 

/** 

 * NON-DOM: set the type of this attribute to be ID type.

 * @param id

 */

public void setIdAttribute(boolean id){

}

Location: UnImplNode.java

Content: 

/** 

 * DOM Level 3: register the given attribute node as an ID attribute

 */

public void setIdAttribute(String name,boolean makeId){

}

Location: UnImplNode.java

Content: 

/** 

 * <p> Based on the <a href='http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407'>Document Object Model (DOM) Level 3 Core Specification of 07 April 2004.</a>. <p> An attribute specifying, as part of the XML declaration, the encoding of this document. This is <code>null</code> when unspecified.

 * @since DOM Level 3NEEDSDOC @param encoding

 */

public void setInputEncoding(String encoding){

  error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED);

}

Location: UnImplNode.java

Content: 

/** 

 * <p> Based on the <a href='http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407'>Document Object Model (DOM) Level 3 Core Specification of 07 April 2004.</a>. <p> An attribute specifying whether errors checking is enforced or not. When set to <code>false</code>, the implementation is free to not test every possible error case normally defined on DOM operations, and not raise any <code>DOMException</code>. In case of error, the behavior is undefined. This attribute is <code>true</code> by defaults.

 * @since DOM Level 3NEEDSDOC @param strictErrorChecking

 */

public void setStrictErrorChecking(boolean strictErrorChecking){

  error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED);

}

Location: UnImplNode.java

Content: 

/** 

 * Unimplemented. See org.w3c.dom.Node

 * @param value Value to set this node to

 * @throws DOMException

 */

public void setValue(String value) throws DOMException {

  error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED);

}

Location: UnImplNode.java

Content: 

public void setXmlEncoding(String xmlEncoding){

  this.xmlEncoding=xmlEncoding;

}

Location: UnImplNode.java

Content: 

public void setXmlStandalone(boolean xmlStandalone) throws DOMException {

  this.xmlStandalone=xmlStandalone;

}

Location: UnImplNode.java

Content: 

public void setXmlVersion(String xmlVersion) throws DOMException {

  this.xmlVersion=xmlVersion;

}

Location: UnImplNode.java

Content: 

/** 

 * Unimplemented.

 * @param offset Offset into text to split

 * @return null, unimplemented

 * @throws DOMException

 */

public Text splitText(int offset) throws DOMException {

  error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED);

  return null;

}

Location: UnImplNode.java

Content: 

/** 

 * Unimplemented.

 * @param offset Start offset of substring to extract.

 * @param count  The length of the substring to extract.

 * @return null

 * @throws DOMException

 */

public String substringData(int offset,int count) throws DOMException {

  error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED);

  return null;

}

Location: UnImplNode.java

Content: 

/** 

 * Constructor UnImplNode

 */

public UnImplNode(){

}

