Location: EqualityExpr.java

Content: 

public EqualityExpr(int op,Expression left,Expression right){

  _op=op;

  (_left=left).setParent(this);

  (_right=right).setParent(this);

}

Location: EqualityExpr.java

Content: 

public Expression getLeft(){

  return _left;

}

Location: EqualityExpr.java

Content: 

public boolean getOp(){

  return (_op != Operators.NE);

}

Location: EqualityExpr.java

Content: 

public Expression getRight(){

  return _right;

}

Location: EqualityExpr.java

Content: 

public boolean hasLastCall(){

  if (_left.hasLastCall())   return true;

  if (_right.hasLastCall())   return true;

  return false;

}

Location: EqualityExpr.java

Content: 

/** 

 * Returns true if this expressions contains a call to position(). This is needed for context changes in node steps containing multiple predicates.

 */

public boolean hasPositionCall(){

  if (_left.hasPositionCall())   return true;

  if (_right.hasPositionCall())   return true;

  return false;

}

Location: EqualityExpr.java

Content: 

public void setParser(Parser parser){

  super.setParser(parser);

  _left.setParser(parser);

  _right.setParser(parser);

}

Location: EqualityExpr.java

Content: 

private void swapArguments(){

  final Expression temp=_left;

  _left=_right;

  _right=temp;

}

Location: EqualityExpr.java

Content: 

public void translateDesynthesized(ClassGenerator classGen,MethodGenerator methodGen){

  final Type tleft=_left.getType();

  final InstructionList il=methodGen.getInstructionList();

  if (tleft instanceof BooleanType) {

    _left.translate(classGen,methodGen);

    _right.translate(classGen,methodGen);

    _falseList.add(il.append(_op == Operators.EQ ? (BranchInstruction)new IF_ICMPNE(null) : (BranchInstruction)new IF_ICMPEQ(null)));

  }

 else   if (tleft instanceof NumberType) {

    _left.translate(classGen,methodGen);

    _right.translate(classGen,methodGen);

    if (tleft instanceof RealType) {

      il.append(DCMPG);

      _falseList.add(il.append(_op == Operators.EQ ? (BranchInstruction)new IFNE(null) : (BranchInstruction)new IFEQ(null)));

    }

 else {

      _falseList.add(il.append(_op == Operators.EQ ? (BranchInstruction)new IF_ICMPNE(null) : (BranchInstruction)new IF_ICMPEQ(null)));

    }

  }

 else {

    translate(classGen,methodGen);

    desynthesize(classGen,methodGen);

  }

}

