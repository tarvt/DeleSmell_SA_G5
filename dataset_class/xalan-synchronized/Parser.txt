Location: Parser.java

Content: 

public void addParameter(Param param){

  addVariableOrParam(param);

}

Location: Parser.java

Content: 

private void addVariableOrParam(VariableBase var){

  Object existing=_variableScope.get(var.getName());

  if (existing != null) {

    if (existing instanceof Stack) {

      Stack stack=(Stack)existing;

      stack.push(var);

    }

 else     if (existing instanceof VariableBase) {

      Stack stack=new Stack();

      stack.push(existing);

      stack.push(var);

      _variableScope.put(var.getName(),stack);

    }

  }

 else {

    _variableScope.put(var.getName(),var);

  }

}

Location: Parser.java

Content: 

public void addVariable(Variable var){

  addVariableOrParam(var);

}

Location: Parser.java

Content: 

/** 

 * checks the list of attributes against a list of allowed attributes for a particular element node.

 */

private void checkForSuperfluousAttributes(SyntaxTreeNode node,Attributes attrs){

  QName qname=node.getQName();

  boolean isStylesheet=(node instanceof Stylesheet);

  String[] legal=(String[])_instructionAttrs.get(qname);

  if (versionIsOne && legal != null) {

    int j;

    final int n=attrs.getLength();

    for (int i=0; i < n; i++) {

      final String attrQName=attrs.getQName(i);

      if (isStylesheet && attrQName.equals("version")) {

        versionIsOne=attrs.getValue(i).equals("1.0");

      }

      if (attrQName.startsWith("xml") || attrQName.indexOf(':') > 0)       continue;

      for (j=0; j < legal.length; j++) {

        if (attrQName.equalsIgnoreCase(legal[j])) {

          break;

        }

      }

      if (j == legal.length) {

        final ErrorMsg err=new ErrorMsg(ErrorMsg.ILLEGAL_ATTRIBUTE_ERR,attrQName,node);

        err.setWarningError(true);

        reportError(WARNING,err);

      }

    }

  }

}

Location: Parser.java

Content: 

/** 

 * Instanciates a SAX2 parser and generate the AST from the input.

 */

public void createAST(Stylesheet stylesheet){

  try {

    if (stylesheet != null) {

      stylesheet.parseContents(this);

      final int precedence=stylesheet.getImportPrecedence();

      final Enumeration elements=stylesheet.elements();

      while (elements.hasMoreElements()) {

        Object child=elements.nextElement();

        if (child instanceof Text) {

          final int l=getLineNumber();

          ErrorMsg err=new ErrorMsg(ErrorMsg.ILLEGAL_TEXT_NODE_ERR,l,null);

          reportError(ERROR,err);

        }

      }

      if (!errorsFound()) {

        stylesheet.typeCheck(_symbolTable);

      }

    }

  }

 catch (  TypeCheckError e) {

    reportError(ERROR,new ErrorMsg(e));

  }

}

Location: Parser.java

Content: 

public boolean elementSupported(String namespace,String localName){

  return (_instructionClasses.get(getQName(namespace,XSL,localName)) != null);

}

Location: Parser.java

Content: 

/** 

 * Returns true if there were any errors during compilation

 */

public boolean errorsFound(){

  return _errors.size() > 0;

}

Location: Parser.java

Content: 

/** 

 * Find a Stylesheet element with a specific ID attribute value. This method is used to find a Stylesheet node that is referred in a <?xml-stylesheet ... ?> processing instruction.

 */

private SyntaxTreeNode findStylesheet(SyntaxTreeNode root,String href){

  if (root == null)   return null;

  if (root instanceof Stylesheet) {

    String id=root.getAttribute("id");

    if (id.equals(href))     return root;

  }

  Vector children=root.getContents();

  if (children != null) {

    final int count=children.size();

    for (int i=0; i < count; i++) {

      SyntaxTreeNode child=(SyntaxTreeNode)children.elementAt(i);

      SyntaxTreeNode node=findStylesheet(child,href);

      if (node != null)       return node;

    }

  }

  return null;

}

Location: Parser.java

Content: 

public boolean functionSupported(String fname){

  return (_symbolTable.lookupPrimop(fname) != null);

}

Location: Parser.java

Content: 

public int getCurrentImportPrecedence(){

  return _currentImportPrecedence;

}

Location: Parser.java

Content: 

public Stylesheet getCurrentStylesheet(){

  return _currentStylesheet;

}

Location: Parser.java

Content: 

public Vector getErrors(){

  return _errors;

}

Location: Parser.java

Content: 

public QName getExcludeResultPrefixes(){

  return _excludeResultPrefixes;

}

Location: Parser.java

Content: 

public QName getExtensionElementPrefixes(){

  return _extensionElementPrefixes;

}

Location: Parser.java

Content: 

public int getNextImportPrecedence(){

  return ++_currentImportPrecedence;

}

Location: Parser.java

Content: 

public Output getOutput(){

  return _output;

}

Location: Parser.java

Content: 

public QName getQNameIgnoreDefaultNs(final String stringRep){

  return getQName(stringRep,true,true);

}

Location: Parser.java

Content: 

public QName getQNameSafe(final String stringRep){

  final int colon=stringRep.lastIndexOf(':');

  if (colon != -1) {

    final String prefix=stringRep.substring(0,colon);

    final String localname=stringRep.substring(colon + 1);

    String namespace=null;

    if (prefix.equals(XMLNS_PREFIX) == false) {

      namespace=_symbolTable.lookupNamespace(prefix);

      if (namespace == null)       namespace=EMPTYSTRING;

    }

    return getQName(namespace,prefix,localname);

  }

 else {

    final String uri=stringRep.equals(XMLNS_PREFIX) ? null : _symbolTable.lookupNamespace(EMPTYSTRING);

    return getQName(uri,null,stringRep);

  }

}

Location: Parser.java

Content: 

public QName getQName(QName scope,QName name){

  return getQName(scope.toString() + name.toString());

}

Location: Parser.java

Content: 

public QName getQName(final String stringRep){

  return getQName(stringRep,true,false);

}

Location: Parser.java

Content: 

public QName getQName(final String stringRep,boolean reportError){

  return getQName(stringRep,reportError,false);

}

Location: Parser.java

Content: 

private QName getQName(final String stringRep,boolean reportError,boolean ignoreDefaultNs){

  final int colon=stringRep.lastIndexOf(':');

  if (colon != -1) {

    final String prefix=stringRep.substring(0,colon);

    final String localname=stringRep.substring(colon + 1);

    String namespace=null;

    if (prefix.equals(XMLNS_PREFIX) == false) {

      namespace=_symbolTable.lookupNamespace(prefix);

      if (namespace == null && reportError) {

        final int line=getLineNumber();

        ErrorMsg err=new ErrorMsg(ErrorMsg.NAMESPACE_UNDEF_ERR,line,prefix);

        reportError(ERROR,err);

      }

    }

    return getQName(namespace,prefix,localname);

  }

 else {

    if (stringRep.equals(XMLNS_PREFIX)) {

      ignoreDefaultNs=true;

    }

    final String defURI=ignoreDefaultNs ? null : _symbolTable.lookupNamespace(EMPTYSTRING);

    return getQName(defURI,null,stringRep);

  }

}

Location: Parser.java

Content: 

public QName getQName(String scope,String name){

  return getQName(scope + name);

}

Location: Parser.java

Content: 

public QName getQName(String namespace,String prefix,String localname){

  if (namespace == null || namespace.equals(EMPTYSTRING)) {

    QName name=(QName)_qNames.get(localname);

    if (name == null) {

      name=new QName(null,prefix,localname);

      _qNames.put(localname,name);

    }

    return name;

  }

 else {

    Dictionary space=(Dictionary)_namespaces.get(namespace);

    String lexicalQName=(prefix == null || prefix.length() == 0) ? localname : (prefix + ':' + localname);

    if (space == null) {

      final QName name=new QName(namespace,prefix,localname);

      _namespaces.put(namespace,space=new Hashtable());

      space.put(lexicalQName,name);

      return name;

    }

 else {

      QName name=(QName)space.get(lexicalQName);

      if (name == null) {

        name=new QName(namespace,prefix,localname);

        space.put(lexicalQName,name);

      }

      return name;

    }

  }

}

Location: Parser.java

Content: 

/** 

 * Extracts the DOM for the stylesheet. In the case of an embedded stylesheet, it extracts the DOM subtree corresponding to the embedded stylesheet that has an 'id' attribute whose value is the same as the value declared in the <?xml-stylesheet...?> processing instruction (P.I.). In the xml-stylesheet P.I. the value is labeled as the 'href' data of the P.I. The extracted DOM representing the stylesheet is returned as an Element object.

 */

private SyntaxTreeNode getStylesheet(SyntaxTreeNode root) throws CompilerException {

  if (_target == null) {

    if (!_rootNamespaceDef) {

      ErrorMsg msg=new ErrorMsg(ErrorMsg.MISSING_XSLT_URI_ERR);

      throw new CompilerException(msg.toString());

    }

    return (root);

  }

  if (_target.charAt(0) == '#') {

    SyntaxTreeNode element=findStylesheet(root,_target.substring(1));

    if (element == null) {

      ErrorMsg msg=new ErrorMsg(ErrorMsg.MISSING_XSLT_TARGET_ERR,_target,root);

      throw new CompilerException(msg.toString());

    }

    return (element);

  }

 else {

    return (loadExternalStylesheet(_target));

  }

}

Location: Parser.java

Content: 

public SymbolTable getSymbolTable(){

  return _symbolTable;

}

Location: Parser.java

Content: 

public int getTemplateIndex(){

  return (_templateIndex++);

}

Location: Parser.java

Content: 

private String getTokenValue(String token){

  final int start=token.indexOf('"');

  final int stop=token.lastIndexOf('"');

  return token.substring(start + 1,stop);

}

Location: Parser.java

Content: 

public Stylesheet getTopLevelStylesheet(){

  return _xsltc.getStylesheet();

}

Location: Parser.java

Content: 

public QName getUseAttributeSets(){

  return _useAttributeSets;

}

Location: Parser.java

Content: 

public Vector getWarnings(){

  return _warnings;

}

Location: Parser.java

Content: 

public XSLTC getXSLTC(){

  return _xsltc;

}

Location: Parser.java

Content: 

private void initAttrTable(String elementName,String[] attrs){

  _instructionAttrs.put(getQName(XSLT_URI,XSL,elementName),attrs);

}

Location: Parser.java

Content: 

private void initExtClasses(){

  initExtClass("output","TransletOutput");

  initExtClass(REDIRECT_URI,"write","TransletOutput");

}

Location: Parser.java

Content: 

private void initExtClass(String elementName,String className){

  _instructionClasses.put(getQName(TRANSLET_URI,TRANSLET,elementName),COMPILER_PACKAGE + '.' + className);

}

Location: Parser.java

Content: 

private void initExtClass(String namespace,String elementName,String className){

  _instructionClasses.put(getQName(namespace,TRANSLET,elementName),COMPILER_PACKAGE + '.' + className);

}

Location: Parser.java

Content: 

private void initInstructionAttrs(){

  initAttrTable("template",new String[]{"match","name","priority","mode"});

  initAttrTable("stylesheet",new String[]{"id","version","extension-element-prefixes","exclude-result-prefixes"});

  initAttrTable("transform",new String[]{"id","version","extension-element-prefixes","exclude-result-prefixes"});

  initAttrTable("text",new String[]{"disable-output-escaping"});

  initAttrTable("if",new String[]{"test"});

  initAttrTable("choose",new String[]{});

  initAttrTable("when",new String[]{"test"});

  initAttrTable("otherwise",new String[]{});

  initAttrTable("for-each",new String[]{"select"});

  initAttrTable("message",new String[]{"terminate"});

  initAttrTable("number",new String[]{"level","count","from","value","format","lang","letter-value","grouping-separator","grouping-size"});

  initAttrTable("comment",new String[]{});

  initAttrTable("copy",new String[]{"use-attribute-sets"});

  initAttrTable("copy-of",new String[]{"select"});

  initAttrTable("param",new String[]{"name","select"});

  initAttrTable("with-param",new String[]{"name","select"});

  initAttrTable("variable",new String[]{"name","select"});

  initAttrTable("output",new String[]{"method","version","encoding","omit-xml-declaration","standalone","doctype-public","doctype-system","cdata-section-elements","indent","media-type"});

  initAttrTable("sort",new String[]{"select","order","case-order","lang","data-type"});

  initAttrTable("key",new String[]{"name","match","use"});

  initAttrTable("fallback",new String[]{});

  initAttrTable("attribute",new String[]{"name","namespace"});

  initAttrTable("attribute-set",new String[]{"name","use-attribute-sets"});

  initAttrTable("value-of",new String[]{"select","disable-output-escaping"});

  initAttrTable("element",new String[]{"name","namespace","use-attribute-sets"});

  initAttrTable("call-template",new String[]{"name"});

  initAttrTable("apply-templates",new String[]{"select","mode"});

  initAttrTable("apply-imports",new String[]{});

  initAttrTable("decimal-format",new String[]{"name","decimal-separator","grouping-separator","infinity","minus-sign","NaN","percent","per-mille","zero-digit","digit","pattern-separator"});

  initAttrTable("import",new String[]{"href"});

  initAttrTable("include",new String[]{"href"});

  initAttrTable("strip-space",new String[]{"elements"});

  initAttrTable("preserve-space",new String[]{"elements"});

  initAttrTable("processing-instruction",new String[]{"name"});

  initAttrTable("namespace-alias",new String[]{"stylesheet-prefix","result-prefix"});

}

Location: Parser.java

Content: 

/** 

 * Initialize the _instructionClasses Hashtable, which maps XSL element names to Java classes in this package.

 */

private void initStdClasses(){

  initStdClass("template","Template");

  initStdClass("stylesheet","Stylesheet");

  initStdClass("transform","Stylesheet");

  initStdClass("text","Text");

  initStdClass("if","If");

  initStdClass("choose","Choose");

  initStdClass("when","When");

  initStdClass("otherwise","Otherwise");

  initStdClass("for-each","ForEach");

  initStdClass("message","Message");

  initStdClass("number","Number");

  initStdClass("comment","Comment");

  initStdClass("copy","Copy");

  initStdClass("copy-of","CopyOf");

  initStdClass("param","Param");

  initStdClass("with-param","WithParam");

  initStdClass("variable","Variable");

  initStdClass("output","Output");

  initStdClass("sort","Sort");

  initStdClass("key","Key");

  initStdClass("fallback","Fallback");

  initStdClass("attribute","XslAttribute");

  initStdClass("attribute-set","AttributeSet");

  initStdClass("value-of","ValueOf");

  initStdClass("element","XslElement");

  initStdClass("call-template","CallTemplate");

  initStdClass("apply-templates","ApplyTemplates");

  initStdClass("apply-imports","ApplyImports");

  initStdClass("decimal-format","DecimalFormatting");

  initStdClass("import","Import");

  initStdClass("include","Include");

  initStdClass("strip-space","Whitespace");

  initStdClass("preserve-space","Whitespace");

  initStdClass("processing-instruction","ProcessingInstruction");

  initStdClass("namespace-alias","NamespaceAlias");

}

Location: Parser.java

Content: 

private void initStdClass(String elementName,String className){

  _instructionClasses.put(getQName(XSLT_URI,XSL,elementName),COMPILER_PACKAGE + '.' + className);

}

Location: Parser.java

Content: 

/** 

 * Add primops and base functions to the symbol table.

 */

private void initSymbolTable(){

  MethodType I_V=new MethodType(Type.Int,Type.Void);

  MethodType I_R=new MethodType(Type.Int,Type.Real);

  MethodType I_S=new MethodType(Type.Int,Type.String);

  MethodType I_D=new MethodType(Type.Int,Type.NodeSet);

  MethodType R_I=new MethodType(Type.Real,Type.Int);

  MethodType R_V=new MethodType(Type.Real,Type.Void);

  MethodType R_R=new MethodType(Type.Real,Type.Real);

  MethodType R_D=new MethodType(Type.Real,Type.NodeSet);

  MethodType R_O=new MethodType(Type.Real,Type.Reference);

  MethodType I_I=new MethodType(Type.Int,Type.Int);

  MethodType D_O=new MethodType(Type.NodeSet,Type.Reference);

  MethodType D_V=new MethodType(Type.NodeSet,Type.Void);

  MethodType D_S=new MethodType(Type.NodeSet,Type.String);

  MethodType D_D=new MethodType(Type.NodeSet,Type.NodeSet);

  MethodType A_V=new MethodType(Type.Node,Type.Void);

  MethodType S_V=new MethodType(Type.String,Type.Void);

  MethodType S_S=new MethodType(Type.String,Type.String);

  MethodType S_A=new MethodType(Type.String,Type.Node);

  MethodType S_D=new MethodType(Type.String,Type.NodeSet);

  MethodType S_O=new MethodType(Type.String,Type.Reference);

  MethodType B_O=new MethodType(Type.Boolean,Type.Reference);

  MethodType B_V=new MethodType(Type.Boolean,Type.Void);

  MethodType B_B=new MethodType(Type.Boolean,Type.Boolean);

  MethodType B_S=new MethodType(Type.Boolean,Type.String);

  MethodType D_X=new MethodType(Type.NodeSet,Type.Object);

  MethodType R_RR=new MethodType(Type.Real,Type.Real,Type.Real);

  MethodType I_II=new MethodType(Type.Int,Type.Int,Type.Int);

  MethodType B_RR=new MethodType(Type.Boolean,Type.Real,Type.Real);

  MethodType B_II=new MethodType(Type.Boolean,Type.Int,Type.Int);

  MethodType S_SS=new MethodType(Type.String,Type.String,Type.String);

  MethodType S_DS=new MethodType(Type.String,Type.Real,Type.String);

  MethodType S_SR=new MethodType(Type.String,Type.String,Type.Real);

  MethodType O_SO=new MethodType(Type.Reference,Type.String,Type.Reference);

  MethodType D_SS=new MethodType(Type.NodeSet,Type.String,Type.String);

  MethodType D_SD=new MethodType(Type.NodeSet,Type.String,Type.NodeSet);

  MethodType B_BB=new MethodType(Type.Boolean,Type.Boolean,Type.Boolean);

  MethodType B_SS=new MethodType(Type.Boolean,Type.String,Type.String);

  MethodType S_SD=new MethodType(Type.String,Type.String,Type.NodeSet);

  MethodType S_DSS=new MethodType(Type.String,Type.Real,Type.String,Type.String);

  MethodType S_SRR=new MethodType(Type.String,Type.String,Type.Real,Type.Real);

  MethodType S_SSS=new MethodType(Type.String,Type.String,Type.String,Type.String);

  _symbolTable.addPrimop("current",A_V);

  _symbolTable.addPrimop("last",I_V);

  _symbolTable.addPrimop("position",I_V);

  _symbolTable.addPrimop("true",B_V);

  _symbolTable.addPrimop("false",B_V);

  _symbolTable.addPrimop("not",B_B);

  _symbolTable.addPrimop("name",S_V);

  _symbolTable.addPrimop("name",S_A);

  _symbolTable.addPrimop("generate-id",S_V);

  _symbolTable.addPrimop("generate-id",S_A);

  _symbolTable.addPrimop("ceiling",R_R);

  _symbolTable.addPrimop("floor",R_R);

  _symbolTable.addPrimop("round",R_R);

  _symbolTable.addPrimop("contains",B_SS);

  _symbolTable.addPrimop("number",R_O);

  _symbolTable.addPrimop("number",R_V);

  _symbolTable.addPrimop("boolean",B_O);

  _symbolTable.addPrimop("string",S_O);

  _symbolTable.addPrimop("string",S_V);

  _symbolTable.addPrimop("translate",S_SSS);

  _symbolTable.addPrimop("string-length",I_V);

  _symbolTable.addPrimop("string-length",I_S);

  _symbolTable.addPrimop("starts-with",B_SS);

  _symbolTable.addPrimop("format-number",S_DS);

  _symbolTable.addPrimop("format-number",S_DSS);

  _symbolTable.addPrimop("unparsed-entity-uri",S_S);

  _symbolTable.addPrimop("key",D_SS);

  _symbolTable.addPrimop("key",D_SD);

  _symbolTable.addPrimop("id",D_S);

  _symbolTable.addPrimop("id",D_D);

  _symbolTable.addPrimop("namespace-uri",S_V);

  _symbolTable.addPrimop("function-available",B_S);

  _symbolTable.addPrimop("element-available",B_S);

  _symbolTable.addPrimop("document",D_S);

  _symbolTable.addPrimop("document",D_V);

  _symbolTable.addPrimop("count",I_D);

  _symbolTable.addPrimop("sum",R_D);

  _symbolTable.addPrimop("local-name",S_V);

  _symbolTable.addPrimop("local-name",S_D);

  _symbolTable.addPrimop("namespace-uri",S_V);

  _symbolTable.addPrimop("namespace-uri",S_D);

  _symbolTable.addPrimop("substring",S_SR);

  _symbolTable.addPrimop("substring",S_SRR);

  _symbolTable.addPrimop("substring-after",S_SS);

  _symbolTable.addPrimop("substring-before",S_SS);

  _symbolTable.addPrimop("normalize-space",S_V);

  _symbolTable.addPrimop("normalize-space",S_S);

  _symbolTable.addPrimop("system-property",S_S);

  _symbolTable.addPrimop("nodeset",D_O);

  _symbolTable.addPrimop("objectType",S_O);

  _symbolTable.addPrimop("cast",O_SO);

  _symbolTable.addPrimop("+",R_RR);

  _symbolTable.addPrimop("-",R_RR);

  _symbolTable.addPrimop("*",R_RR);

  _symbolTable.addPrimop("/",R_RR);

  _symbolTable.addPrimop("%",R_RR);

  _symbolTable.addPrimop("+",I_II);

  _symbolTable.addPrimop("-",I_II);

  _symbolTable.addPrimop("*",I_II);

  _symbolTable.addPrimop("<",B_RR);

  _symbolTable.addPrimop("<=",B_RR);

  _symbolTable.addPrimop(">",B_RR);

  _symbolTable.addPrimop(">=",B_RR);

  _symbolTable.addPrimop("<",B_II);

  _symbolTable.addPrimop("<=",B_II);

  _symbolTable.addPrimop(">",B_II);

  _symbolTable.addPrimop(">=",B_II);

  _symbolTable.addPrimop("<",B_BB);

  _symbolTable.addPrimop("<=",B_BB);

  _symbolTable.addPrimop(">",B_BB);

  _symbolTable.addPrimop(">=",B_BB);

  _symbolTable.addPrimop("or",B_BB);

  _symbolTable.addPrimop("and",B_BB);

  _symbolTable.addPrimop("u-",R_R);

  _symbolTable.addPrimop("u-",I_I);

}

Location: Parser.java

Content: 

/** 

 * For embedded stylesheets: Load an external file with stylesheet

 */

private SyntaxTreeNode loadExternalStylesheet(String location) throws CompilerException {

  InputSource source;

  if ((new File(location)).exists())   source=new InputSource("file:" + location);

 else   source=new InputSource(location);

  SyntaxTreeNode external=(SyntaxTreeNode)parse(source);

  return (external);

}

Location: Parser.java

Content: 

public VariableBase lookupVariable(QName name){

  Object existing=_variableScope.get(name);

  if (existing instanceof VariableBase) {

    return ((VariableBase)existing);

  }

 else   if (existing instanceof Stack) {

    Stack stack=(Stack)existing;

    return ((VariableBase)stack.peek());

  }

  return (null);

}

Location: Parser.java

Content: 

public SyntaxTreeNode makeInstance(String uri,String prefix,String local,Attributes attributes){

  SyntaxTreeNode node=null;

  QName qname=getQName(uri,prefix,local);

  String className=(String)_instructionClasses.get(qname);

  if (className != null) {

    try {

      final Class clazz=ObjectFactory.findProviderClass(className,ObjectFactory.findClassLoader(),true);

      node=(SyntaxTreeNode)clazz.newInstance();

      node.setQName(qname);

      node.setParser(this);

      if (_locator != null) {

        node.setLineNumber(getLineNumber());

      }

      if (node instanceof Stylesheet) {

        _xsltc.setStylesheet((Stylesheet)node);

      }

      checkForSuperfluousAttributes(node,attributes);

    }

 catch (    ClassNotFoundException e) {

      ErrorMsg err=new ErrorMsg(ErrorMsg.CLASS_NOT_FOUND_ERR,node);

      reportError(ERROR,err);

    }

catch (    Exception e) {

      ErrorMsg err=new ErrorMsg(ErrorMsg.INTERNAL_ERR,e.getMessage(),node);

      reportError(FATAL,err);

    }

  }

 else {

    if (uri != null) {

      if (uri.equals(XSLT_URI)) {

        node=new UnsupportedElement(uri,prefix,local,false);

        UnsupportedElement element=(UnsupportedElement)node;

        ErrorMsg msg=new ErrorMsg(ErrorMsg.UNSUPPORTED_XSL_ERR,getLineNumber(),local);

        element.setErrorMessage(msg);

        if (versionIsOne) {

          reportError(UNSUPPORTED,msg);

        }

      }

 else       if (uri.equals(TRANSLET_URI)) {

        node=new UnsupportedElement(uri,prefix,local,true);

        UnsupportedElement element=(UnsupportedElement)node;

        ErrorMsg msg=new ErrorMsg(ErrorMsg.UNSUPPORTED_EXT_ERR,getLineNumber(),local);

        element.setErrorMessage(msg);

      }

 else {

        Stylesheet sheet=_xsltc.getStylesheet();

        if ((sheet != null) && (sheet.isExtension(uri))) {

          if (sheet != (SyntaxTreeNode)_parentStack.peek()) {

            node=new UnsupportedElement(uri,prefix,local,true);

            UnsupportedElement elem=(UnsupportedElement)node;

            ErrorMsg msg=new ErrorMsg(ErrorMsg.UNSUPPORTED_EXT_ERR,getLineNumber(),prefix + ":" + local);

            elem.setErrorMessage(msg);

          }

        }

      }

    }

    if (node == null) {

      node=new LiteralElement();

      node.setLineNumber(getLineNumber());

    }

    node.setParser(this);

  }

  if ((node != null) && (node instanceof LiteralElement)) {

    ((LiteralElement)node).setQName(qname);

  }

  return (node);

}

Location: Parser.java

Content: 

/** 

 * Create an instance of the <code>Stylesheet</code> class, and then parse, typecheck and compile the instance. Must be called after <code>parse()</code>.

 */

public Stylesheet makeStylesheet(SyntaxTreeNode element) throws CompilerException {

  try {

    Stylesheet stylesheet;

    if (element instanceof Stylesheet) {

      stylesheet=(Stylesheet)element;

    }

 else {

      stylesheet=new Stylesheet();

      stylesheet.setSimplified();

      stylesheet.addElement(element);

      stylesheet.setAttributes((AttributeList)element.getAttributes());

      if (element.lookupNamespace(EMPTYSTRING) == null) {

        element.addPrefixMapping(EMPTYSTRING,EMPTYSTRING);

      }

    }

    stylesheet.setParser(this);

    return stylesheet;

  }

 catch (  ClassCastException e) {

    ErrorMsg err=new ErrorMsg(ErrorMsg.NOT_STYLESHEET_ERR,element);

    throw new CompilerException(err.toString());

  }

}

Location: Parser.java

Content: 

/** 

 * Parse an XPath expression:

 * @param parent - XSL element where the expression occured

 * @param exp    - textual representation of the expression

 */

public Expression parseExpression(SyntaxTreeNode parent,String exp){

  return (Expression)parseTopLevel(parent,"<EXPRESSION>" + exp,null);

}

Location: Parser.java

Content: 

/** 

 * Parse an XPath expression:

 * @param parent - XSL element where the expression occured

 * @param attr   - name of this element's attribute to get expression from

 * @param def    - default expression (if the attribute was not found)

 */

public Expression parseExpression(SyntaxTreeNode parent,String attr,String def){

  String exp=parent.getAttribute(attr);

  if ((exp.length() == 0) && (def != null))   exp=def;

  return (Expression)parseTopLevel(parent,"<EXPRESSION>" + exp,exp);

}

Location: Parser.java

Content: 

/** 

 * Parse an XPath pattern:

 * @param parent  - XSL element where the pattern occured

 * @param pattern - textual representation of the pattern

 */

public Pattern parsePattern(SyntaxTreeNode parent,String pattern){

  return (Pattern)parseTopLevel(parent,"<PATTERN>" + pattern,pattern);

}

Location: Parser.java

Content: 

/** 

 * Parse an XPath pattern:

 * @param parent - XSL element where the pattern occured

 * @param attr   - name of this element's attribute to get pattern from

 * @param def    - default pattern (if the attribute was not found)

 */

public Pattern parsePattern(SyntaxTreeNode parent,String attr,String def){

  String pattern=parent.getAttribute(attr);

  if ((pattern.length() == 0) && (def != null))   pattern=def;

  return (Pattern)parseTopLevel(parent,"<PATTERN>" + pattern,pattern);

}

Location: Parser.java

Content: 

public Parser(XSLTC xsltc){

  _xsltc=xsltc;

}

Location: Parser.java

Content: 

/** 

 * Parse an XPath expression or pattern using the generated XPathParser The method will return a Dummy node if the XPath parser fails.

 */

private SyntaxTreeNode parseTopLevel(SyntaxTreeNode parent,String text,String expression){

  int line=getLineNumber();

  try {

    _xpathParser.setScanner(new XPathLexer(new StringReader(text)));

    Symbol result=_xpathParser.parse(expression,line);

    if (result != null) {

      final SyntaxTreeNode node=(SyntaxTreeNode)result.value;

      if (node != null) {

        node.setParser(this);

        node.setParent(parent);

        node.setLineNumber(line);

        return node;

      }

    }

    reportError(ERROR,new ErrorMsg(ErrorMsg.XPATH_PARSER_ERR,expression,parent));

  }

 catch (  Exception e) {

    if (_xsltc.debug())     e.printStackTrace();

    reportError(ERROR,new ErrorMsg(ErrorMsg.XPATH_PARSER_ERR,expression,parent));

  }

  SyntaxTreeNode.Dummy.setParser(this);

  return SyntaxTreeNode.Dummy;

}

Location: Parser.java

Content: 

/** 

 * Parses a stylesheet and builds the internal abstract syntax tree

 * @param reader A SAX2 SAXReader (parser)

 * @param input  A SAX2 InputSource can be passed to a SAX reader

 * @return The root of the abstract syntax tree

 */

public SyntaxTreeNode parse(XMLReader reader,InputSource input){

  try {

    reader.setContentHandler(this);

    reader.parse(input);

    return (SyntaxTreeNode)getStylesheet(_root);

  }

 catch (  IOException e) {

    if (_xsltc.debug())     e.printStackTrace();

    reportError(ERROR,new ErrorMsg(e));

  }

catch (  SAXException e) {

    Throwable ex=e.getException();

    if (_xsltc.debug()) {

      e.printStackTrace();

      if (ex != null)       ex.printStackTrace();

    }

    reportError(ERROR,new ErrorMsg(e));

  }

catch (  CompilerException e) {

    if (_xsltc.debug())     e.printStackTrace();

    reportError(ERROR,new ErrorMsg(e));

  }

catch (  Exception e) {

    if (_xsltc.debug())     e.printStackTrace();

    reportError(ERROR,new ErrorMsg(e));

  }

  return null;

}

Location: Parser.java

Content: 

/** 

 * Prints all compile-time errors

 */

public void printErrors(){

  final int size=_errors.size();

  if (size > 0) {

    System.err.println(new ErrorMsg(ErrorMsg.COMPILER_ERROR_KEY));

    for (int i=0; i < size; i++) {

      System.err.println("  " + _errors.elementAt(i));

    }

  }

}

Location: Parser.java

Content: 

/** 

 * Prints all compile-time warnings

 */

public void printWarnings(){

  final int size=_warnings.size();

  if (size > 0) {

    System.err.println(new ErrorMsg(ErrorMsg.COMPILER_WARNING_KEY));

    for (int i=0; i < size; i++) {

      System.err.println("  " + _warnings.elementAt(i));

    }

  }

}

Location: Parser.java

Content: 

public void removeVariable(QName name){

  Object existing=_variableScope.get(name);

  if (existing instanceof Stack) {

    Stack stack=(Stack)existing;

    if (!stack.isEmpty())     stack.pop();

    if (!stack.isEmpty())     return;

  }

  _variableScope.remove(name);

}

Location: Parser.java

Content: 

/** 

 * Common error/warning message handler

 */

public void reportError(final int category,final ErrorMsg error){

switch (category) {

case Constants.INTERNAL:

    _errors.addElement(error);

  break;

case Constants.UNSUPPORTED:

_errors.addElement(error);

break;

case Constants.FATAL:

_errors.addElement(error);

break;

case Constants.ERROR:

_errors.addElement(error);

break;

case Constants.WARNING:

_warnings.addElement(error);

break;

}

}

Location: Parser.java

Content: 

public void setCurrentStylesheet(Stylesheet stylesheet){

  _currentStylesheet=stylesheet;

}

Location: Parser.java

Content: 

public void setOutput(Output output){

  if (_output != null) {

    if (_output.getImportPrecedence() <= output.getImportPrecedence()) {

      String cdata=_output.getCdata();

      output.mergeOutput(_output);

      _output.disable();

      _output=output;

    }

 else {

      output.disable();

    }

  }

 else {

    _output=output;

  }

}

Location: Parser.java

Content: 

/** 

 * Set the parameters to use to locate the correct <?xml-stylesheet ...?> processing instruction in the case where the input document is an XML document with one or more references to a stylesheet.

 * @param media   The media attribute to be matched. May be null, in which casethe prefered templates will be used (i.e. alternate = no).

 * @param title   The value of the title attribute to match. May be null.

 * @param charset The value of the charset attribute to match. May be null.

 */

protected void setPIParameters(String media,String title,String charset){

  _PImedia=media;

  _PItitle=title;

  _PIcharset=charset;

}

Location: Parser.java

Content: 

public void setXSLTC(XSLTC xsltc){

  _xsltc=xsltc;

}

