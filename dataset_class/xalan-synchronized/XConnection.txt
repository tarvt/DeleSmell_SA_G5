Location: XConnection.java

Content: 

/** 

 * Add a single parameter to the parameter list formatted as an Element

 * @param e

 */

public void addParameterFromElement(Element e){

  NamedNodeMap attrs=e.getAttributes();

  Node Type=attrs.getNamedItem("type");

  Node n1=e.getFirstChild();

  if (null != n1) {

    String value=n1.getNodeValue();

    if (value == null)     value="";

    m_ParameterList.addElement(new QueryParameter(value,Type.getNodeValue()));

  }

}

Location: XConnection.java

Content: 

/** 

 * Add a section of parameters to the Parameter List Do each element from the list

 * @param nl

 */

public void addParameterFromElement(NodeList nl){

  int count=nl.getLength();

  for (int x=0; x < count; x++) {

    addParameters((Element)nl.item(x));

  }

}

Location: XConnection.java

Content: 

/** 

 * @param elem

 */

private void addParameters(Element elem){

  Node n=elem.getFirstChild();

  if (null == n)   return;

  do {

    if (n.getNodeType() == Node.ELEMENT_NODE) {

      NamedNodeMap attrs=n.getAttributes();

      Node Type=attrs.getNamedItem("type");

      String TypeStr;

      if (Type == null)       TypeStr="string";

 else       TypeStr=Type.getNodeValue();

      Node n1=n.getFirstChild();

      if (null != n1) {

        String value=n1.getNodeValue();

        if (value == null)         value="";

        m_ParameterList.addElement(new QueryParameter(value,TypeStr));

      }

    }

  }

 while ((n=n.getNextSibling()) != null);

}

Location: XConnection.java

Content: 

/** 

 * Add a typed parameter to the parameter list.

 * @param value

 * @param Type

 */

public void addParameterWithType(String value,String Type){

  m_ParameterList.addElement(new QueryParameter(value,Type));

}

Location: XConnection.java

Content: 

/** 

 * Add an untyped value to the parameter list.

 * @param value

 */

public void addParameter(String value){

  addParameterWithType(value,null);

}

Location: XConnection.java

Content: 

private void addTypeToData(String typeInfo){

  int indx;

  if (typeInfo != null && m_ParameterList != null) {

    StringTokenizer plist=new StringTokenizer(typeInfo);

    indx=0;

    while (plist.hasMoreTokens()) {

      String value=plist.nextToken();

      QueryParameter qp=(QueryParameter)m_ParameterList.elementAt(indx);

      if (null != qp) {

        qp.setTypeName(value);

      }

      indx++;

    }

  }

}

Location: XConnection.java

Content: 

/** 

 * @param exprContext

 * @param excp

 */

private SQLErrorDocument buildErrorDocument(){

  SQLErrorDocument eDoc=null;

  if (m_LastSQLDocumentWithError != null) {

    ExpressionContext ctx=m_LastSQLDocumentWithError.getExpressionContext();

    SQLWarning warn=m_LastSQLDocumentWithError.checkWarnings();

    try {

      DTMManager mgr=((XPathContext.XPathExpressionContext)ctx).getDTMManager();

      DTMManagerDefault mgrDefault=(DTMManagerDefault)mgr;

      int dtmIdent=mgrDefault.getFirstFreeDTMID();

      eDoc=new SQLErrorDocument(mgr,dtmIdent << DTMManager.IDENT_DTM_NODE_BITS,m_Error,warn,m_FullErrors);

      mgrDefault.addDTM(eDoc,dtmIdent);

      m_Error=null;

      m_LastSQLDocumentWithError=null;

    }

 catch (    Exception e) {

      eDoc=null;

    }

  }

  return (eDoc);

}

Location: XConnection.java

Content: 

/** 

 * Close the connection to the data source. Only close the connections for a single document.

 * @throws SQLException

 */

public void close(ExpressionContext exprContext,Object doc) throws SQLException {

  if (DEBUG)   System.out.println("Entering XConnection.close(" + doc + ")");

  SQLDocument sqlDoc=locateSQLDocument(exprContext,doc);

  if (sqlDoc != null) {

    sqlDoc.close(m_IsDefaultPool);

    m_OpenSQLDocuments.remove(sqlDoc);

  }

}

Location: XConnection.java

Content: 

/** 

 * @param exprContext

 * @param protocolElem

 */

public XBooleanStatic connect(ExpressionContext exprContext,Element protocolElem){

  try {

    initFromElement(protocolElem);

    return new XBooleanStatic(true);

  }

 catch (  SQLException e) {

    setError(e,exprContext);

    return new XBooleanStatic(false);

  }

catch (  Exception e) {

    setError(e,exprContext);

    return new XBooleanStatic(false);

  }

}

Location: XConnection.java

Content: 

/** 

 * @param exprContext

 * @param list

 */

public XBooleanStatic connect(ExpressionContext exprContext,NodeList list){

  try {

    initFromElement((Element)list.item(0));

    return new XBooleanStatic(true);

  }

 catch (  SQLException e) {

    setError(e,exprContext);

    return new XBooleanStatic(false);

  }

catch (  Exception e) {

    setError(e,exprContext);

    return new XBooleanStatic(false);

  }

}

Location: XConnection.java

Content: 

/** 

 * Returns an XConnection from either a user created <code>org.apache.xalan.lib.sql.ConnectionPool</code> or a JNDI datasource. This method first tries to resolve the passed name against <code>ConnectionPool</code>s registered with <code>ConnectionPoolManager</code>. If that fails, it attempts to find the name as a JNDI DataSource path.

 * @param exprContext Context automatically passed from the XSLT sheet.

 * @param name        The name of the ConnectionPool or the JNDI DataSourcepath.

 */

public XBooleanStatic connect(ExpressionContext exprContext,String name){

  try {

    m_ConnectionPool=m_PoolMgr.getPool(name);

    if (m_ConnectionPool == null) {

      ConnectionPool pool=new JNDIConnectionPool(name);

      if (pool.testConnection()) {

        m_PoolMgr.registerPool(name,pool);

        m_ConnectionPool=pool;

        m_IsDefaultPool=false;

        return new XBooleanStatic(true);

      }

 else {

        throw new IllegalArgumentException("Invalid ConnectionPool name or JNDI Datasource path: " + name);

      }

    }

 else {

      m_IsDefaultPool=false;

      return new XBooleanStatic(true);

    }

  }

 catch (  Exception e) {

    setError(e,exprContext);

    return new XBooleanStatic(false);

  }

}

Location: XConnection.java

Content: 

/** 

 * Create an XConnection object with just a driver and database URL.

 * @param exprContext

 * @param driver      JDBC driver of the form foo.bar.Driver.

 * @param dbURL       database URL of the form jdbc:subprotocol:subname.

 */

public XBooleanStatic connect(ExpressionContext exprContext,String driver,String dbURL){

  try {

    init(driver,dbURL,new Properties());

    return new XBooleanStatic(true);

  }

 catch (  SQLException e) {

    setError(e,exprContext);

    return new XBooleanStatic(false);

  }

catch (  Exception e) {

    setError(e,exprContext);

    return new XBooleanStatic(false);

  }

}

Location: XConnection.java

Content: 

/** 

 * Create an XConnection object with a connection protocol

 * @param exprContext

 * @param driver       JDBC driver of the form foo.bar.Driver.

 * @param dbURL        database URL of the form jdbc:subprotocol:subname.

 * @param protocolElem list of string tag/value connection arguments, normallyincluding at least "user" and "password".

 */

public XBooleanStatic connect(ExpressionContext exprContext,String driver,String dbURL,Element protocolElem){

  try {

    Properties prop=new Properties();

    NamedNodeMap atts=protocolElem.getAttributes();

    for (int i=0; i < atts.getLength(); i++) {

      prop.put(atts.item(i).getNodeName(),atts.item(i).getNodeValue());

    }

    init(driver,dbURL,prop);

    return new XBooleanStatic(true);

  }

 catch (  SQLException e) {

    setError(e,exprContext);

    return new XBooleanStatic(false);

  }

catch (  Exception e) {

    setError(e,exprContext);

    return new XBooleanStatic(false);

  }

}

Location: XConnection.java

Content: 

/** 

 * Create an XConnection object with user ID and password.

 * @param exprContext

 * @param driver      JDBC driver of the form foo.bar.Driver.

 * @param dbURL       database URL of the form jdbc:subprotocol:subname.

 * @param user        user ID.

 * @param password    connection password.

 */

public XBooleanStatic connect(ExpressionContext exprContext,String driver,String dbURL,String user,String password){

  try {

    Properties prop=new Properties();

    prop.put("user",user);

    prop.put("password",password);

    init(driver,dbURL,prop);

    return new XBooleanStatic(true);

  }

 catch (  SQLException e) {

    setError(e,exprContext);

    return new XBooleanStatic(false);

  }

catch (  Exception e) {

    setError(e,exprContext);

    return new XBooleanStatic(false);

  }

}

Location: XConnection.java

Content: 

/** 

 * See enableDefaultConnectionPool

 * @deprecated Use setFeature("default-pool-enabled", "false");

 */

public void disableDefaultConnectionPool(){

  if (DEBUG)   System.out.println("Disabling Default Connection Pool");

  m_DefaultPoolingEnabled=false;

  if (m_ConnectionPool == null)   return;

  if (!m_IsDefaultPool)   return;

  m_ConnectionPool.setPoolEnabled(false);

}

Location: XConnection.java

Content: 

/** 

 * Control how the SQL Document uses memory. In Streaming Mode, memory consumption is greatly reduces so you can have queries of unlimited size but it will not let you traverse the data more than once.

 * @deprecated Use setFeature("streaming", "false");

 */

public void disableStreamingMode(){

  if (DEBUG)   System.out.println("Disable Streaming Mode");

  m_IsStreamingEnabled=false;

}

Location: XConnection.java

Content: 

/** 

 * There is a problem with some JDBC drivers when a Connection is open and the JVM shutsdown. If there is a problem, there is no way to control the currently open connections in the pool. So for the default connection pool, the actuall pooling mechinsm is disabled by default. The Stylesheet designer can re-enabled pooling to take advantage of connection pools. The connection pool can even be disabled which will close all outstanding connections.

 * @deprecated Use setFeature("default-pool-enabled", "true");

 */

public void enableDefaultConnectionPool(){

  if (DEBUG)   System.out.println("Enabling Default Connection Pool");

  m_DefaultPoolingEnabled=true;

  if (m_ConnectionPool == null)   return;

  if (m_IsDefaultPool)   return;

  m_ConnectionPool.setPoolEnabled(true);

}

Location: XConnection.java

Content: 

/** 

 * Control how the SQL Document uses memory. In Streaming Mode, memory consumption is greatly reduces so you can have queries of unlimited size but it will not let you traverse the data more than once.

 * @deprecated Use setFeature("streaming", "true");

 */

public void enableStreamingMode(){

  if (DEBUG)   System.out.println("Enabling Streaming Mode");

  m_IsStreamingEnabled=true;

}

Location: XConnection.java

Content: 

/** 

 */

protected void finalize(){

  if (DEBUG)   System.out.println("In XConnection, finalize");

  try {

    close();

  }

 catch (  Exception e) {

  }

}

Location: XConnection.java

Content: 

/** 

 * Allow the SQL Document to retrive a connection to be used to build the SQL Statement.

 */

public ConnectionPool getConnectionPool(){

  return m_ConnectionPool;

}

Location: XConnection.java

Content: 

/** 

 * Provide access to the last error that occued. This error may be over written when the next operation occurs.

 */

public DTM getError(){

  if (m_FullErrors) {

    for (int idx=0; idx < m_OpenSQLDocuments.size(); idx++) {

      SQLDocument doc=(SQLDocument)m_OpenSQLDocuments.elementAt(idx);

      SQLWarning warn=doc.checkWarnings();

      if (warn != null)       setError(null,doc,warn);

    }

  }

  return (buildErrorDocument());

}

Location: XConnection.java

Content: 

/** 

 * Allow the database connection information to be sepcified in the XML tree. The connection information could also be externally originated and passed in as an XSL Parameter. The required XML Format is as follows. A document fragment is needed to specify the connection information the top tag name is not specific for this code, we are only interested in the tags inside. <DBINFO-TAG> Specify the driver name for this connection pool <dbdriver>drivername</dbdriver> Specify the URL for the driver in this connection pool <dburl>url</dburl> Specify the password for this connection pool <password>password</password> Specify the username for this connection pool <user>username</user> You can add extra protocol items including the User Name & Password with the protocol tag. For each extra protocol item, add a new element where the name of the item is specified as the name attribute and and its value as the elements value. <protocol name="name of value">value</protocol> </DBINFO-TAG>

 * @param e

 * @throws SQLException

 */

private void initFromElement(Element e) throws SQLException {

  Properties prop=new Properties();

  String driver="";

  String dbURL="";

  Node n=e.getFirstChild();

  if (null == n)   return;

  do {

    String nName=n.getNodeName();

    if (nName.equalsIgnoreCase("dbdriver")) {

      driver="";

      Node n1=n.getFirstChild();

      if (null != n1) {

        driver=n1.getNodeValue();

      }

    }

    if (nName.equalsIgnoreCase("dburl")) {

      dbURL="";

      Node n1=n.getFirstChild();

      if (null != n1) {

        dbURL=n1.getNodeValue();

      }

    }

    if (nName.equalsIgnoreCase("password")) {

      String s="";

      Node n1=n.getFirstChild();

      if (null != n1) {

        s=n1.getNodeValue();

      }

      prop.put("password",s);

    }

    if (nName.equalsIgnoreCase("user")) {

      String s="";

      Node n1=n.getFirstChild();

      if (null != n1) {

        s=n1.getNodeValue();

      }

      prop.put("user",s);

    }

    if (nName.equalsIgnoreCase("protocol")) {

      String Name="";

      NamedNodeMap attrs=n.getAttributes();

      Node n1=attrs.getNamedItem("name");

      if (null != n1) {

        String s="";

        Name=n1.getNodeValue();

        Node n2=n.getFirstChild();

        if (null != n2)         s=n2.getNodeValue();

        prop.put(Name,s);

      }

    }

  }

 while ((n=n.getNextSibling()) != null);

  init(driver,dbURL,prop);

}

Location: XConnection.java

Content: 

/** 

 * Initilize is being called because we did not have an existing Connection Pool, so let's see if we created one already or lets create one ourselves.

 * @param driver

 * @param dbURL

 * @param prop

 * @throws SQLException

 */

private void init(String driver,String dbURL,Properties prop) throws SQLException {

  Connection con=null;

  if (DEBUG)   System.out.println("XConnection, Connection Init");

  String user=prop.getProperty("user");

  if (user == null)   user="";

  String passwd=prop.getProperty("password");

  if (passwd == null)   passwd="";

  String poolName=driver + dbURL + user+ passwd;

  ConnectionPool cpool=m_PoolMgr.getPool(poolName);

  if (cpool == null) {

    if (DEBUG) {

      System.out.println("XConnection, Creating Connection");

      System.out.println(" Driver  :" + driver);

      System.out.println(" URL     :" + dbURL);

      System.out.println(" user    :" + user);

      System.out.println(" passwd  :" + passwd);

    }

    DefaultConnectionPool defpool=new DefaultConnectionPool();

    if ((DEBUG) && (defpool == null))     System.out.println("Failed to Create a Default Connection Pool");

    defpool.setDriver(driver);

    defpool.setURL(dbURL);

    defpool.setProtocol(prop);

    if (m_DefaultPoolingEnabled)     defpool.setPoolEnabled(true);

    m_PoolMgr.registerPool(poolName,defpool);

    m_ConnectionPool=defpool;

  }

 else {

    m_ConnectionPool=cpool;

  }

  m_IsDefaultPool=true;

  try {

    con=m_ConnectionPool.getConnection();

  }

 catch (  SQLException e) {

    if (con != null) {

      m_ConnectionPool.releaseConnectionOnError(con);

      con=null;

    }

    throw e;

  }

 finally {

    if (con != null)     m_ConnectionPool.releaseConnection(con);

  }

}

Location: XConnection.java

Content: 

/** 

 * When an SQL Document is returned as a DTM object, the XSL variable is actually assigned as a DTMIterator. This is a helper function that will allow you to get a reference to the original SQLDocument from the iterator. Original code submitted by Moraine Didier mailto://didier.moraine@winterthur.be

 * @param doc

 * @return

 */

private SQLDocument locateSQLDocument(ExpressionContext exprContext,Object doc){

  try {

    if (doc instanceof DTMNodeIterator) {

      DTMNodeIterator dtmIter=(DTMNodeIterator)doc;

      try {

        DTMNodeProxy root=(DTMNodeProxy)dtmIter.getRoot();

        return (SQLDocument)root.getDTM();

      }

 catch (      Exception e) {

        XNodeSet xNS=(XNodeSet)dtmIter.getDTMIterator();

        DTMIterator iter=(DTMIterator)xNS.getContainedIter();

        DTM dtm=iter.getDTM(xNS.nextNode());

        return (SQLDocument)dtm;

      }

    }

    setError(new Exception("SQL Extension:close - Can Not Identify SQLDocument"),exprContext);

    return null;

  }

 catch (  Exception e) {

    setError(e,exprContext);

    return null;

  }

}

Location: XConnection.java

Content: 

/** 

 * Execute a parameterized query statement by instantiating an

 * @param exprContext

 * @param queryString the SQL query.

 * @return XStatement implements NodeIterator.

 * @throws SQLException

 * @link org.apache.xalan.lib.sql.XStatement XStatement} object. The XStatementexecutes the query, and uses the result set to create a

 * @link org.apache.xalan.lib.sql.RowSet RowSet}, a row-set element.

 */

public DTM pquery(ExpressionContext exprContext,String queryString){

  return (pquery(exprContext,queryString,null));

}

Location: XConnection.java

Content: 

/** 

 * Execute a parameterized query statement by instantiating an

 * @param exprContext

 * @param queryString the SQL query.

 * @param typeInfo

 * @return XStatement implements NodeIterator.

 * @throws SQLException

 * @link org.apache.xalan.lib.sql.XStatement XStatement} object. The XStatementexecutes the query, and uses the result set to create a

 * @link org.apache.xalan.lib.sql.RowSet RowSet}, a row-set element. This methodallows for the user to pass in a comma seperated String that represents a list of parameter types. If supplied the parameter types will be used to overload the current types in the current parameter list.

 */

public DTM pquery(ExpressionContext exprContext,String queryString,String typeInfo){

  SQLDocument doc=null;

  try {

    if (DEBUG)     System.out.println("pquery()");

    if (null == m_ConnectionPool)     return null;

    SQLQueryParser query=m_QueryParser.parse(this,queryString,SQLQueryParser.NO_OVERRIDE);

    if (!m_InlineVariables) {

      addTypeToData(typeInfo);

      query.setParameters(m_ParameterList);

    }

    doc=SQLDocument.getNewDocument(exprContext);

    doc.execute(this,query);

    m_OpenSQLDocuments.addElement(doc);

  }

 catch (  Exception e) {

    if (DEBUG)     System.out.println("exception in query()");

    if (doc != null) {

      if (doc.hasErrors()) {

        setError(e,doc,doc.checkWarnings());

      }

      doc.close(m_IsDefaultPool);

      doc=null;

    }

  }

 finally {

    if (DEBUG)     System.out.println("leaving query()");

  }

  return doc;

}

Location: XConnection.java

Content: 

/** 

 * Execute a query statement by instantiating an

 * @param exprContext

 * @param queryString the SQL query.

 * @return XStatement implements NodeIterator.

 * @throws SQLException

 * @link org.apache.xalan.lib.sql.XStatement XStatement} object. The XStatementexecutes the query, and uses the result set to create a

 * @link org.apache.xalan.lib.sql.RowSet RowSet}, a row-set element.

 */

public DTM query(ExpressionContext exprContext,String queryString){

  SQLDocument doc=null;

  try {

    if (DEBUG)     System.out.println("pquery()");

    if (null == m_ConnectionPool)     return null;

    SQLQueryParser query=m_QueryParser.parse(this,queryString,SQLQueryParser.NO_INLINE_PARSER);

    doc=SQLDocument.getNewDocument(exprContext);

    doc.execute(this,query);

    m_OpenSQLDocuments.addElement(doc);

  }

 catch (  Exception e) {

    if (DEBUG)     System.out.println("exception in query()");

    if (doc != null) {

      if (doc.hasErrors()) {

        setError(e,doc,doc.checkWarnings());

      }

      doc.close(m_IsDefaultPool);

      doc=null;

    }

  }

 finally {

    if (DEBUG)     System.out.println("leaving query()");

  }

  return doc;

}

Location: XConnection.java

Content: 

/** 

 * This is an internal version of Set Error that is called withen XConnection where there is no SQLDocument created yet. As in the Connect statement or creation of the ConnectionPool.

 */

public void setError(Exception excp,ExpressionContext expr){

  try {

    ErrorListener listen=expr.getErrorListener();

    if (listen != null && excp != null) {

      listen.warning(new TransformerException(excp.toString(),expr.getXPathContext().getSAXLocator(),excp));

    }

  }

 catch (  Exception e) {

  }

}

Location: XConnection.java

Content: 

/** 

 * Set an error and/or warning on this connection.

 */

public void setError(Exception excp,SQLDocument doc,SQLWarning warn){

  ExpressionContext cont=doc.getExpressionContext();

  m_LastSQLDocumentWithError=doc;

  try {

    ErrorListener listen=cont.getErrorListener();

    if (listen != null && excp != null)     listen.warning(new TransformerException(excp.toString(),cont.getXPathContext().getSAXLocator(),excp));

    if (listen != null && warn != null) {

      listen.warning(new TransformerException(warn.toString(),cont.getXPathContext().getSAXLocator(),warn));

    }

    if (excp != null)     m_Error=excp;

    if (warn != null) {

      SQLWarning tw=new SQLWarning(warn.getMessage(),warn.getSQLState(),warn.getErrorCode());

      SQLWarning nw=warn.getNextWarning();

      while (nw != null) {

        tw.setNextWarning(new SQLWarning(nw.getMessage(),nw.getSQLState(),nw.getErrorCode()));

        nw=nw.getNextWarning();

      }

      tw.setNextWarning(new SQLWarning(warn.getMessage(),warn.getSQLState(),warn.getErrorCode()));

    }

  }

 catch (  Exception e) {

  }

}

Location: XConnection.java

Content: 

/** 

 * Set feature options for this XConnection.

 * @param feature The name of the feature being set, currently supports(streaming, inline-variables, multiple-results, cache-statements, default-pool-enabled).

 * @param setting The new setting for the specified feature, currently "true" istrue and anything else is false.

 */

public void setFeature(String feature,String setting){

  boolean value=false;

  if ("true".equalsIgnoreCase(setting))   value=true;

  if ("streaming".equalsIgnoreCase(feature)) {

    m_IsStreamingEnabled=value;

  }

 else   if ("inline-variables".equalsIgnoreCase(feature)) {

    m_InlineVariables=value;

  }

 else   if ("multiple-results".equalsIgnoreCase(feature)) {

    m_IsMultipleResultsEnabled=value;

  }

 else   if ("cache-statements".equalsIgnoreCase(feature)) {

    m_IsStatementCachingEnabled=value;

  }

 else   if ("default-pool-enabled".equalsIgnoreCase(feature)) {

    m_DefaultPoolingEnabled=value;

    if (m_ConnectionPool == null)     return;

    if (m_IsDefaultPool)     return;

    m_ConnectionPool.setPoolEnabled(value);

  }

 else   if ("full-errors".equalsIgnoreCase(feature)) {

    m_FullErrors=value;

  }

}

Location: XConnection.java

Content: 

/** 

 * The purpose of this routine is to force the DB cursor to skip forward N records. You should call this function after [p]query to help with pagination. i.e. Perfrom your select, then skip forward past the records you read previously.

 * @param exprContext

 * @param o

 * @param value

 */

public void skipRec(ExpressionContext exprContext,Object o,int value){

  SQLDocument sqldoc=null;

  DTMNodeIterator nodei=null;

  sqldoc=locateSQLDocument(exprContext,o);

  if (sqldoc != null)   sqldoc.skip(value);

}

Location: XConnection.java

Content: 

/** 

 */

public XConnection(){

}

Location: XConnection.java

Content: 

/** 

 * @param exprContext

 * @param list

 */

public XConnection(ExpressionContext exprContext,NodeList list){

  connect(exprContext,list);

}

Location: XConnection.java

Content: 

/** 

 * Constructs a new XConnection and attempts to connect to a datasource as defined in the <code>connect(ExpressionContext exprContext, String connPoolName)</code> method. <code>org.apache.xalan.lib.sql.ConnectionPool</code> or a JNDI datasource.

 * @param exprContext Context automatically passed from the XSLT sheet.

 * @param name        The name of the ConnectionPool or the JNDI DataSourcepath.

 */

public XConnection(ExpressionContext exprContext,String connPoolName){

  connect(exprContext,connPoolName);

}

Location: XConnection.java

Content: 

/** 

 * @param exprContext

 * @param driver

 * @param dbURL

 */

public XConnection(ExpressionContext exprContext,String driver,String dbURL){

  connect(exprContext,driver,dbURL);

}

Location: XConnection.java

Content: 

/** 

 * @param exprContext

 * @param driver

 * @param dbURL

 * @param protocolElem

 */

public XConnection(ExpressionContext exprContext,String driver,String dbURL,Element protocolElem){

  connect(exprContext,driver,dbURL,protocolElem);

}

Location: XConnection.java

Content: 

/** 

 * @param exprContext

 * @param driver

 * @param dbURL

 * @param user

 * @param password

 */

public XConnection(ExpressionContext exprContext,String driver,String dbURL,String user,String password){

  connect(exprContext,driver,dbURL,user,password);

}

