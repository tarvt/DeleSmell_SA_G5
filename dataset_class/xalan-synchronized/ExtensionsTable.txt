Location: ExtensionsTable.java

Content: 

/** 

 * Register an extension namespace handler. This handler provides functions for testing whether a function is known within the namespace and also for invoking the functions.

 * @param uri   the URI for the extension.

 * @param extNS the extension handler.

 * @xsl.usage advanced

 */

public void addExtensionNamespace(String uri,ExtensionHandler extNS){

  m_extensionFunctionNamespaces.put(uri,extNS);

}

Location: ExtensionsTable.java

Content: 

/** 

 * The constructor (called from TransformerImpl) registers the StylesheetRoot for the transformation and instantiates an ExtensionHandler for each extension namespace.

 * @xsl.usage advanced

 */

public ExtensionsTable(StylesheetRoot sroot) throws javax.xml.transform.TransformerException {

  m_sroot=sroot;

  Vector extensions=m_sroot.getExtensions();

  for (int i=0; i < extensions.size(); i++) {

    ExtensionNamespaceSupport extNamespaceSpt=(ExtensionNamespaceSupport)extensions.get(i);

    ExtensionHandler extHandler=extNamespaceSpt.launch();

    if (extHandler != null)     addExtensionNamespace(extNamespaceSpt.getNamespace(),extHandler);

  }

}

Location: ExtensionsTable.java

Content: 

/** 

 * Handle an extension function.

 * @param extFunction the extension function

 * @param argVec      arguments to the function in a vector

 * @param exprContext a context which may be passed to an extension function andprovides callback functions to access various areas in the environment

 * @return result of executing the function

 * @throws javax.xml.transform.TransformerException

 */

public Object extFunction(FuncExtFunction extFunction,Vector argVec,ExpressionContext exprContext) throws javax.xml.transform.TransformerException {

  Object result=null;

  String ns=extFunction.getNamespace();

  if (null != ns) {

    ExtensionHandler extNS=(ExtensionHandler)m_extensionFunctionNamespaces.get(ns);

    if (null != extNS) {

      try {

        result=extNS.callFunction(extFunction,argVec,exprContext);

      }

 catch (      javax.xml.transform.TransformerException e) {

        throw e;

      }

catch (      Exception e) {

        throw new javax.xml.transform.TransformerException(e);

      }

    }

 else {

      throw new XPathProcessorException(XSLMessages.createMessage(XSLTErrorResources.ER_EXTENSION_FUNC_UNKNOWN,new Object[]{ns,extFunction.getFunctionName()}));

    }

  }

  return result;

}

Location: ExtensionsTable.java

Content: 

/** 

 * Handle an extension function.

 * @param ns          the URI of namespace in which the function is needed

 * @param funcName    the function name being called

 * @param argVec      arguments to the function in a vector

 * @param methodKey   a unique key identifying this function instance in thestylesheet

 * @param exprContext a context which may be passed to an extension function andprovides callback functions to access various areas in the environment

 * @return result of executing the function

 * @throws javax.xml.transform.TransformerException

 */

public Object extFunction(String ns,String funcName,Vector argVec,Object methodKey,ExpressionContext exprContext) throws javax.xml.transform.TransformerException {

  Object result=null;

  if (null != ns) {

    ExtensionHandler extNS=(ExtensionHandler)m_extensionFunctionNamespaces.get(ns);

    if (null != extNS) {

      try {

        result=extNS.callFunction(funcName,argVec,methodKey,exprContext);

      }

 catch (      javax.xml.transform.TransformerException e) {

        throw e;

      }

catch (      Exception e) {

        throw new javax.xml.transform.TransformerException(e);

      }

    }

 else {

      throw new XPathProcessorException(XSLMessages.createMessage(XSLTErrorResources.ER_EXTENSION_FUNC_UNKNOWN,new Object[]{ns,funcName}));

    }

  }

  return result;

}

