Location: Key.java

Content: 

/** 

 * This method is called if the "use" attribute of the key contains a node set. In this case we must traverse all nodes in the set and create one entry in this key's index for each node in the set.

 */

public void traverseNodeSet(ClassGenerator classGen,MethodGenerator methodGen,int buildKeyIndex){

  final ConstantPoolGen cpg=classGen.getConstantPool();

  final InstructionList il=methodGen.getInstructionList();

  final int getNodeValue=cpg.addInterfaceMethodref(DOM_INTF,GET_NODE_VALUE,"(I)" + STRING_SIG);

  final int getNodeIdent=cpg.addInterfaceMethodref(DOM_INTF,"getNodeIdent","(I)" + NODE_SIG);

  final int keyDom=cpg.addMethodref(TRANSLET_CLASS,"setKeyIndexDom","(" + STRING_SIG + DOM_INTF_SIG+ ")V");

  final LocalVariableGen parentNode=methodGen.addLocalVariable("parentNode",Util.getJCRefType("I"),null,null);

  parentNode.setStart(il.append(new ISTORE(parentNode.getIndex())));

  il.append(methodGen.loadCurrentNode());

  il.append(methodGen.loadIterator());

  _use.translate(classGen,methodGen);

  _use.startIterator(classGen,methodGen);

  il.append(methodGen.storeIterator());

  final BranchHandle nextNode=il.append(new GOTO(null));

  final InstructionHandle loop=il.append(NOP);

  il.append(classGen.loadTranslet());

  il.append(new PUSH(cpg,_name.toString()));

  parentNode.setEnd(il.append(new ILOAD(parentNode.getIndex())));

  il.append(methodGen.loadDOM());

  il.append(methodGen.loadCurrentNode());

  il.append(new INVOKEINTERFACE(getNodeValue,2));

  il.append(new INVOKEVIRTUAL(buildKeyIndex));

  il.append(classGen.loadTranslet());

  il.append(new PUSH(cpg,getName()));

  il.append(methodGen.loadDOM());

  il.append(new INVOKEVIRTUAL(keyDom));

  nextNode.setTarget(il.append(methodGen.loadIterator()));

  il.append(methodGen.nextNode());

  il.append(DUP);

  il.append(methodGen.storeCurrentNode());

  il.append(new IFGE(loop));

  il.append(methodGen.storeIterator());

  il.append(methodGen.storeCurrentNode());

}

