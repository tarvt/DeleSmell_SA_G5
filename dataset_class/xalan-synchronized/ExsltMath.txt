Location: ExsltMath.java

Content: 

/** 

 * The math:abs function returns the absolute value of a number.

 * @param num A number

 * @return The absolute value of the number

 */

public static double abs(double num){

  return Math.abs(num);

}

Location: ExsltMath.java

Content: 

/** 

 * The math:acos function returns the arccosine value of a number.

 * @param num A number

 * @return The arccosine value of the number

 */

public static double acos(double num){

  return Math.acos(num);

}

Location: ExsltMath.java

Content: 

/** 

 * The math:asin function returns the arcsine value of a number.

 * @param num A number

 * @return The arcsine value of the number

 */

public static double asin(double num){

  return Math.asin(num);

}

Location: ExsltMath.java

Content: 

/** 

 * The math:atan2 function returns the angle ( in radians ) from the X axis to a point (y,x).

 * @param num1 The X axis value

 * @param num2 The Y axis value

 * @return The angle (in radians) from the X axis to a point (y,x)

 */

public static double atan2(double num1,double num2){

  return Math.atan2(num1,num2);

}

Location: ExsltMath.java

Content: 

/** 

 * The math:atan function returns the arctangent value of a number.

 * @param num A number

 * @return The arctangent value of the number

 */

public static double atan(double num){

  return Math.atan(num);

}

Location: ExsltMath.java

Content: 

/** 

 * The math:constant function returns the specified constant to a set precision. The possible constants are: <pre> PI E SQRRT2 LN2 LN10 LOG2E SQRT1_2 </pre>

 * @param name      The name of the constant

 * @param precision The precision

 * @return The value of the specified constant to the given precision

 */

public static double constant(String name,double precision){

  String value=null;

  if (name.equals("PI"))   value=PI;

 else   if (name.equals("E"))   value=E;

 else   if (name.equals("SQRRT2"))   value=SQRRT2;

 else   if (name.equals("LN2"))   value=LN2;

 else   if (name.equals("LN10"))   value=LN10;

 else   if (name.equals("LOG2E"))   value=LOG2E;

 else   if (name.equals("SQRT1_2"))   value=SQRT1_2;

  if (value != null) {

    int bits=new Double(precision).intValue();

    if (bits <= value.length())     value=value.substring(0,bits);

    return new Double(value).doubleValue();

  }

 else   return Double.NaN;

}

Location: ExsltMath.java

Content: 

/** 

 * The math:cos function returns cosine of the passed argument.

 * @param num A number

 * @return The cosine value of the number

 */

public static double cos(double num){

  return Math.cos(num);

}

Location: ExsltMath.java

Content: 

/** 

 * The math:exp function returns e (the base of natural logarithms) raised to a power.

 * @param num A number

 * @return The value of e raised to the given power

 */

public static double exp(double num){

  return Math.exp(num);

}

Location: ExsltMath.java

Content: 

/** 

 * The math:highest function returns the nodes in the node set whose value is the maximum value for the node set. The maximum value for the node set is the same as the value as calculated by math:max. A node has this maximum value if the result of converting its string value to a number as if by the number function is equal to the maximum value, where the equality comparison is defined as a numerical comparison using the = operator. <p> If any of the nodes in the node set has a non-numeric value, the math:max function will return NaN. The definition numeric comparisons entails that NaN != NaN. Therefore if any of the nodes in the node set has a non-numeric value, math:highest will return an empty node set.

 * @param nl The NodeList for the node-set to be evaluated.

 * @return node-set with nodes containing the maximum value found, an emptynode-set if any node cannot be converted to a number.

 */

public static NodeList highest(NodeList nl){

  double maxValue=max(nl);

  NodeSet highNodes=new NodeSet();

  highNodes.setShouldCacheNodes(true);

  if (Double.isNaN(maxValue))   return highNodes;

  for (int i=0; i < nl.getLength(); i++) {

    Node n=nl.item(i);

    double d=toNumber(n);

    if (d == maxValue)     highNodes.addElement(n);

  }

  return highNodes;

}

Location: ExsltMath.java

Content: 

/** 

 * The math:log function returns the natural logarithm of a number.

 * @param num A number

 * @return The natural logarithm of the number

 */

public static double log(double num){

  return Math.log(num);

}

Location: ExsltMath.java

Content: 

/** 

 * The math:lowest function returns the nodes in the node set whose value is the minimum value for the node set. The minimum value for the node set is the same as the value as calculated by math:min. A node has this minimum value if the result of converting its string value to a number as if by the number function is equal to the minimum value, where the equality comparison is defined as a numerical comparison using the = operator. <p> If any of the nodes in the node set has a non-numeric value, the math:min function will return NaN. The definition numeric comparisons entails that NaN != NaN. Therefore if any of the nodes in the node set has a non-numeric value, math:lowest will return an empty node set.

 * @param nl The NodeList for the node-set to be evaluated.

 * @return node-set with nodes containing the minimum value found, an emptynode-set if any node cannot be converted to a number.

 */

public static NodeList lowest(NodeList nl){

  double minValue=min(nl);

  NodeSet lowNodes=new NodeSet();

  lowNodes.setShouldCacheNodes(true);

  if (Double.isNaN(minValue))   return lowNodes;

  for (int i=0; i < nl.getLength(); i++) {

    Node n=nl.item(i);

    double d=toNumber(n);

    if (d == minValue)     lowNodes.addElement(n);

  }

  return lowNodes;

}

Location: ExsltMath.java

Content: 

/** 

 * The math:max function returns the maximum value of the nodes passed as the argument. The maximum value is defined as follows. The node set passed as an argument is sorted in descending order as it would be by xsl:sort with a data type of number. The maximum is the result of converting the string value of the first node in this sorted list to a number using the number function. <p> If the node set is empty, or if the result of converting the string values of any of the nodes to a number is NaN, then NaN is returned.

 * @param nl The NodeList for the node-set to be evaluated.

 * @return the maximum value found, NaN if any node cannot be converted to anumber.

 * @see <a href="http://www.exslt.org/">EXSLT</a>

 */

public static double max(NodeList nl){

  if (nl == null || nl.getLength() == 0)   return Double.NaN;

  double m=-Double.MAX_VALUE;

  for (int i=0; i < nl.getLength(); i++) {

    Node n=nl.item(i);

    double d=toNumber(n);

    if (Double.isNaN(d))     return Double.NaN;

 else     if (d > m)     m=d;

  }

  return m;

}

Location: ExsltMath.java

Content: 

/** 

 * The math:min function returns the minimum value of the nodes passed as the argument. The minimum value is defined as follows. The node set passed as an argument is sorted in ascending order as it would be by xsl:sort with a data type of number. The minimum is the result of converting the string value of the first node in this sorted list to a number using the number function. <p> If the node set is empty, or if the result of converting the string values of any of the nodes to a number is NaN, then NaN is returned.

 * @param nl The NodeList for the node-set to be evaluated.

 * @return the minimum value found, NaN if any node cannot be converted to anumber.

 * @see <a href="http://www.exslt.org/">EXSLT</a>

 */

public static double min(NodeList nl){

  if (nl == null || nl.getLength() == 0)   return Double.NaN;

  double m=Double.MAX_VALUE;

  for (int i=0; i < nl.getLength(); i++) {

    Node n=nl.item(i);

    double d=toNumber(n);

    if (Double.isNaN(d))     return Double.NaN;

 else     if (d < m)     m=d;

  }

  return m;

}

Location: ExsltMath.java

Content: 

/** 

 * The math:power function returns the value of a base expression taken to a specified power.

 * @param num1 The base

 * @param num2 The power

 * @return The value of the base expression taken to the specified power

 */

public static double power(double num1,double num2){

  return Math.pow(num1,num2);

}

Location: ExsltMath.java

Content: 

/** 

 * The math:random function returns a random number from 0 to 1.

 * @return A random double from 0 to 1

 */

public static double random(){

  return Math.random();

}

Location: ExsltMath.java

Content: 

/** 

 * The math:sin function returns the sine of the number.

 * @param num A number

 * @return The sine value of the number

 */

public static double sin(double num){

  return Math.sin(num);

}

Location: ExsltMath.java

Content: 

/** 

 * The math:sqrt function returns the square root of a number.

 * @param num A number

 * @return The square root of the number

 */

public static double sqrt(double num){

  return Math.sqrt(num);

}

Location: ExsltMath.java

Content: 

/** 

 * The math:tan function returns the tangent of the number passed as an argument.

 * @param num A number

 * @return The tangent value of the number

 */

public static double tan(double num){

  return Math.tan(num);

}

