Location: DOM2SAX.java

Content: 

public DOM2SAX(Node root){

  _dom=root;

}

Location: DOM2SAX.java

Content: 

/** 

 * If the DOM was created using a DOM 1.0 API, the local name may be null. If so, get the local name from the qualified name before generating the SAX event.

 */

private static String getLocalName(Node node){

  final String localName=node.getLocalName();

  if (localName == null) {

    final String qname=node.getNodeName();

    final int col=qname.lastIndexOf(':');

    return (col > 0) ? qname.substring(col + 1) : qname;

  }

  return localName;

}

Location: DOM2SAX.java

Content: 

private String getNodeTypeFromCode(short code){

  String retval=null;

switch (code) {

case Node.ATTRIBUTE_NODE:

    retval="ATTRIBUTE_NODE";

  break;

case Node.CDATA_SECTION_NODE:

retval="CDATA_SECTION_NODE";

break;

case Node.COMMENT_NODE:

retval="COMMENT_NODE";

break;

case Node.DOCUMENT_FRAGMENT_NODE:

retval="DOCUMENT_FRAGMENT_NODE";

break;

case Node.DOCUMENT_NODE:

retval="DOCUMENT_NODE";

break;

case Node.DOCUMENT_TYPE_NODE:

retval="DOCUMENT_TYPE_NODE";

break;

case Node.ELEMENT_NODE:

retval="ELEMENT_NODE";

break;

case Node.ENTITY_NODE:

retval="ENTITY_NODE";

break;

case Node.ENTITY_REFERENCE_NODE:

retval="ENTITY_REFERENCE_NODE";

break;

case Node.NOTATION_NODE:

retval="NOTATION_NODE";

break;

case Node.PROCESSING_INSTRUCTION_NODE:

retval="PROCESSING_INSTRUCTION_NODE";

break;

case Node.TEXT_NODE:

retval="TEXT_NODE";

break;

}

return retval;

}

Location: DOM2SAX.java

Content: 

/** 

 * This class is only used internally so this method should never be called.

 */

public Object getProperty(String name) throws SAXNotRecognizedException, SAXNotSupportedException {

  return null;

}

Location: DOM2SAX.java

Content: 

public void parse() throws IOException, SAXException {

  if (_dom != null) {

    boolean isIncomplete=(_dom.getNodeType() != org.w3c.dom.Node.DOCUMENT_NODE);

    if (isIncomplete) {

      _sax.startDocument();

      parse(_dom);

      _sax.endDocument();

    }

 else {

      parse(_dom);

    }

  }

}

Location: DOM2SAX.java

Content: 

/** 

 * Traverse the DOM and generate SAX events for a handler. A startElement() event passes all attributes, including namespace declarations.

 */

private void parse(Node node) throws IOException, SAXException {

  Node first=null;

  if (node == null)   return;

switch (node.getNodeType()) {

case Node.ATTRIBUTE_NODE:

case Node.DOCUMENT_FRAGMENT_NODE:

case Node.DOCUMENT_TYPE_NODE:

case Node.ENTITY_NODE:

case Node.ENTITY_REFERENCE_NODE:

case Node.NOTATION_NODE:

    break;

case Node.CDATA_SECTION_NODE:

  final String cdata=node.getNodeValue();

if (_lex != null) {

  _lex.startCDATA();

  _sax.characters(cdata.toCharArray(),0,cdata.length());

  _lex.endCDATA();

}

 else {

  _sax.characters(cdata.toCharArray(),0,cdata.length());

}

break;

case Node.COMMENT_NODE:

if (_lex != null) {

final String value=node.getNodeValue();

_lex.comment(value.toCharArray(),0,value.length());

}

break;

case Node.DOCUMENT_NODE:

_sax.setDocumentLocator(this);

_sax.startDocument();

Node next=node.getFirstChild();

while (next != null) {

parse(next);

next=next.getNextSibling();

}

_sax.endDocument();

break;

case Node.ELEMENT_NODE:

String prefix;

List pushedPrefixes=new ArrayList();

final AttributesImpl attrs=new AttributesImpl();

final NamedNodeMap map=node.getAttributes();

final int length=map.getLength();

for (int i=0; i < length; i++) {

final Node attr=map.item(i);

final String qnameAttr=attr.getNodeName();

if (qnameAttr.startsWith(XMLNS_PREFIX)) {

final String uriAttr=attr.getNodeValue();

final int colon=qnameAttr.lastIndexOf(':');

prefix=(colon > 0) ? qnameAttr.substring(colon + 1) : EMPTYSTRING;

if (startPrefixMapping(prefix,uriAttr)) {

pushedPrefixes.add(prefix);

}

}

}

for (int i=0; i < length; i++) {

final Node attr=map.item(i);

final String qnameAttr=attr.getNodeName();

if (!qnameAttr.startsWith(XMLNS_PREFIX)) {

final String uriAttr=attr.getNamespaceURI();

final String localNameAttr=getLocalName(attr);

if (uriAttr != null) {

final int colon=qnameAttr.lastIndexOf(':');

prefix=(colon > 0) ? qnameAttr.substring(0,colon) : EMPTYSTRING;

if (startPrefixMapping(prefix,uriAttr)) {

pushedPrefixes.add(prefix);

}

}

attrs.addAttribute(attr.getNamespaceURI(),getLocalName(attr),qnameAttr,"CDATA",attr.getNodeValue());

}

}

final String qname=node.getNodeName();

final String uri=node.getNamespaceURI();

final String localName=getLocalName(node);

if (uri != null) {

final int colon=qname.lastIndexOf(':');

prefix=(colon > 0) ? qname.substring(0,colon) : EMPTYSTRING;

if (startPrefixMapping(prefix,uri)) {

pushedPrefixes.add(prefix);

}

}

if (_saxImpl != null) {

_saxImpl.startElement(uri,localName,qname,attrs,node);

}

 else {

_sax.startElement(uri,localName,qname,attrs);

}

next=node.getFirstChild();

while (next != null) {

parse(next);

next=next.getNextSibling();

}

_sax.endElement(uri,localName,qname);

final int nPushedPrefixes=pushedPrefixes.size();

for (int i=0; i < nPushedPrefixes; i++) {

endPrefixMapping((String)pushedPrefixes.get(i));

}

break;

case Node.PROCESSING_INSTRUCTION_NODE:

_sax.processingInstruction(node.getNodeName(),node.getNodeValue());

break;

case Node.TEXT_NODE:

final String data=node.getNodeValue();

_sax.characters(data.toCharArray(),0,data.length());

break;

}

}

Location: DOM2SAX.java

Content: 

/** 

 * This class is only used internally so this method should never be called.

 */

public void setEntityResolver(EntityResolver resolver) throws NullPointerException {

}

Location: DOM2SAX.java

Content: 

/** 

 * This class is only used internally so this method should never be called.

 */

public void setErrorHandler(ErrorHandler handler) throws NullPointerException {

}

