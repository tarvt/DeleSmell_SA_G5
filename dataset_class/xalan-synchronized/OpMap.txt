Location: OpMap.java

Content: 

/** 

 * Given a location step, get the length of that step.

 * @param opPos Position of location step in op map.

 * @return The length of the step.

 */

public int getArgLengthOfStep(int opPos){

  return m_opMap.elementAt(opPos + MAPINDEX_LENGTH + 1) - 3;

}

Location: OpMap.java

Content: 

/** 

 * Get the length of an operation.

 * @param opPos The position of the operation in the op map.

 * @return The size of the operation.

 */

public int getArgLength(int opPos){

  return m_opMap.elementAt(opPos + MAPINDEX_LENGTH);

}

Location: OpMap.java

Content: 

/** 

 * Get the first child position of a given location step.

 * @param opPos Position of location step in the location map.

 * @return The first child position of the step.

 */

public static int getFirstChildPosOfStep(int opPos){

  return opPos + 3;

}

Location: OpMap.java

Content: 

/** 

 * Go to the first child of a given operation.

 * @param opPos position of operation.

 * @return The position of the first child of the operation.

 */

public static int getFirstChildPos(int opPos){

  return opPos + 2;

}

Location: OpMap.java

Content: 

/** 

 * Given an FROM_stepType position, return the position of the first predicate, if there is one, or else this will point to the end of the FROM_stepType. Example: int posOfPredicate = xpath.getNextOpPos(stepPos); boolean hasPredicates = OpCodes.OP_PREDICATE == xpath.getOp(posOfPredicate);

 * @param opPos position of FROM_stepType op.

 * @return position of predicate in FROM_stepType structure.

 */

public int getFirstPredicateOpPos(int opPos) throws javax.xml.transform.TransformerException {

  int stepType=m_opMap.elementAt(opPos);

  if ((stepType >= OpCodes.AXES_START_TYPES) && (stepType <= OpCodes.AXES_END_TYPES)) {

    return opPos + m_opMap.elementAt(opPos + 2);

  }

 else   if ((stepType >= OpCodes.FIRST_NODESET_OP) && (stepType <= OpCodes.LAST_NODESET_OP)) {

    return opPos + m_opMap.elementAt(opPos + 1);

  }

 else   if (-2 == stepType) {

    return -2;

  }

 else {

    error(org.apache.xpath.res.XPATHErrorResources.ER_UNKNOWN_OPCODE,new Object[]{String.valueOf(stepType)});

    return -1;

  }

}

Location: OpMap.java

Content: 

/** 

 * Given an operation position, return the end position, i.e. the beginning of the next operation.

 * @param opPos An op position of an operation for which there is a size entryfollowing.

 * @return position of next operation in m_opMap.

 */

public int getNextOpPos(int opPos){

  return opPos + m_opMap.elementAt(opPos + 1);

}

Location: OpMap.java

Content: 

/** 

 * Given an operation position, return the end position, i.e. the beginning of the next operation.

 * @param opMap The operations map.

 * @param opPos index to operation, for which there is a size entry following.

 * @return position of next operation in m_opMap.

 */

public static int getNextOpPos(int[] opMap,int opPos){

  return opPos + opMap[opPos + 1];

}

Location: OpMap.java

Content: 

/** 

 * Given a location step position, return the end position, i.e. the beginning of the next step.

 * @param opPos the position of a location step.

 * @return the position of the next location step.

 */

public int getNextStepPos(int opPos){

  int stepType=getOp(opPos);

  if ((stepType >= OpCodes.AXES_START_TYPES) && (stepType <= OpCodes.AXES_END_TYPES)) {

    return getNextOpPos(opPos);

  }

 else   if ((stepType >= OpCodes.FIRST_NODESET_OP) && (stepType <= OpCodes.LAST_NODESET_OP)) {

    int newOpPos=getNextOpPos(opPos);

    while (OpCodes.OP_PREDICATE == getOp(newOpPos)) {

      newOpPos=getNextOpPos(newOpPos);

    }

    stepType=getOp(newOpPos);

    if (!((stepType >= OpCodes.AXES_START_TYPES) && (stepType <= OpCodes.AXES_END_TYPES))) {

      return OpCodes.ENDOP;

    }

    return newOpPos;

  }

 else {

    throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_UNKNOWN_STEP,new Object[]{String.valueOf(stepType)}));

  }

}

Location: OpMap.java

Content: 

/** 

 * Get the opcode list that describes the XPath operations. It contains operations codes and indexes into the m_tokenQueue. I use an array instead of a full parse tree in order to cut down on the number of objects created.

 * @return An IntVector that is the opcode list that describes the XPathoperations.

 */

public OpMapVector getOpMap(){

  return m_opMap;

}

Location: OpMap.java

Content: 

/** 

 * Given an operation position, return the current op.

 * @param opPos index into op map.

 * @return the op that corresponds to the opPos argument.

 */

public int getOp(int opPos){

  return m_opMap.elementAt(opPos);

}

Location: OpMap.java

Content: 

/** 

 * Return the expression as a string for diagnostics.

 * @return The expression string.

 */

public String getPatternString(){

  return m_currentPattern;

}

Location: OpMap.java

Content: 

/** 

 * Get the local name of the step.

 * @param opPosOfStep The position of the FROM_XXX step.

 * @return OpCodes.EMPTY, OpCodes.ELEMWILDCARD, or the local name.

 */

public String getStepLocalName(int opPosOfStep){

  int argLenOfStep=getArgLengthOfStep(opPosOfStep);

  int index;

switch (argLenOfStep) {

case 0:

    index=OpCodes.EMPTY;

  break;

case 1:

index=OpCodes.ELEMWILDCARD;

break;

case 2:

index=m_opMap.elementAt(opPosOfStep + 4);

break;

case 3:

index=m_opMap.elementAt(opPosOfStep + 5);

break;

default :

index=OpCodes.EMPTY;

break;

}

if (index >= 0) return (String)m_tokenQueue.elementAt(index).toString();

 else if (OpCodes.ELEMWILDCARD == index) return NodeTest.WILD;

 else return null;

}

Location: OpMap.java

Content: 

/** 

 * Get the namespace of the step.

 * @param opPosOfStep The position of the FROM_XXX step.

 * @return The step's namespace, NodeTest.WILD, or null for null namespace.

 */

public String getStepNS(int opPosOfStep){

  int argLenOfStep=getArgLengthOfStep(opPosOfStep);

  if (argLenOfStep == 3) {

    int index=m_opMap.elementAt(opPosOfStep + 4);

    if (index >= 0)     return (String)m_tokenQueue.elementAt(index);

 else     if (OpCodes.ELEMWILDCARD == index)     return NodeTest.WILD;

 else     return null;

  }

 else   return null;

}

Location: OpMap.java

Content: 

/** 

 * Get the test type of the step, i.e. NODETYPE_XXX value.

 * @param opPosOfStep The position of the FROM_XXX step.

 * @return NODETYPE_XXX value.

 */

public int getStepTestType(int opPosOfStep){

  return m_opMap.elementAt(opPosOfStep + 3);

}

Location: OpMap.java

Content: 

/** 

 * Get the XPath as a list of tokens.

 * @return ObjectVector of tokens.

 */

public ObjectVector getTokenQueue(){

  return m_tokenQueue;

}

Location: OpMap.java

Content: 

/** 

 * Get size of the token queue.

 * @return The size of the token queue.

 */

public int getTokenQueueSize(){

  return m_tokenQueue.size();

}

Location: OpMap.java

Content: 

/** 

 * Get the XPath as a list of tokens.

 * @param pos index into token queue.

 * @return The token, normally a string.

 */

public Object getToken(int pos){

  return m_tokenQueue.elementAt(pos);

}

Location: OpMap.java

Content: 

/** 

 * Set the op at index to the given int.

 * @param opPos index into op map.

 * @param value Value to set

 */

public void setOp(int opPos,int value){

  m_opMap.setElementAt(value,opPos);

}

Location: OpMap.java

Content: 

/** 

 * Replace the large arrays with a small array.

 */

void shrink(){

  int n=m_opMap.elementAt(MAPINDEX_LENGTH);

  m_opMap.setToSize(n + 4);

  m_opMap.setElementAt(0,n);

  m_opMap.setElementAt(0,n + 1);

  m_opMap.setElementAt(0,n + 2);

  n=m_tokenQueue.size();

  m_tokenQueue.setToSize(n + 4);

  m_tokenQueue.setElementAt(null,n);

  m_tokenQueue.setElementAt(null,n + 1);

  m_tokenQueue.setElementAt(null,n + 2);

}

