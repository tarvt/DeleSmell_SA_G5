Location: PredicatedNodeTest.java

Content: 

/** 

 * This will traverse the heararchy, calling the visitor for each member. If the called visitor method returns false, the subtree should not be called.

 * @param visitor The visitor whose appropriate method will be called.

 */

public void callPredicateVisitors(XPathVisitor visitor){

  if (null != m_predicates) {

    int n=m_predicates.length;

    for (int i=0; i < n; i++) {

      ExpressionOwner predOwner=new PredOwner(i);

      if (visitor.visitPredicate(predOwner,m_predicates[i])) {

        m_predicates[i].callVisitors(predOwner,visitor);

      }

    }

  }

}

Location: PredicatedNodeTest.java

Content: 

/** 

 * Get a cloned PrdicatedNodeTest.

 * @return A new PredicatedNodeTest that can be used without mutating this one.

 * @throws CloneNotSupportedException

 */

public Object clone() throws CloneNotSupportedException {

  PredicatedNodeTest clone=(PredicatedNodeTest)super.clone();

  if ((null != this.m_proximityPositions) && (this.m_proximityPositions == clone.m_proximityPositions)) {

    clone.m_proximityPositions=new int[this.m_proximityPositions.length];

    System.arraycopy(this.m_proximityPositions,0,clone.m_proximityPositions,0,this.m_proximityPositions.length);

  }

  if (clone.m_lpi == this)   clone.m_lpi=(LocPathIterator)clone;

  return clone;

}

Location: PredicatedNodeTest.java

Content: 

/** 

 * Count forward one proximity position.

 * @param i The index into the m_proximityPositions array, where the incrementwill occur.

 */

protected void countProximityPosition(int i){

  int[] pp=m_proximityPositions;

  if ((null != pp) && (i < pp.length))   pp[i]++;

}

Location: PredicatedNodeTest.java

Content: 

/** 

 * Process the predicates.

 * @param context The current context node.

 * @param xctxt   The XPath runtime context.

 * @return the result of executing the predicate expressions.

 * @throws javax.xml.transform.TransformerException

 */

boolean executePredicates(int context,XPathContext xctxt) throws javax.xml.transform.TransformerException {

  int nPredicates=getPredicateCount();

  if (nPredicates == 0)   return true;

  PrefixResolver savedResolver=xctxt.getNamespaceContext();

  try {

    m_predicateIndex=0;

    xctxt.pushSubContextList(this);

    xctxt.pushNamespaceContext(m_lpi.getPrefixResolver());

    xctxt.pushCurrentNode(context);

    for (int i=0; i < nPredicates; i++) {

      XObject pred=m_predicates[i].execute(xctxt);

      if (XObject.CLASS_NUMBER == pred.getType()) {

        if (DEBUG_PREDICATECOUNTING) {

          System.out.flush();

          System.out.println("\n===== start predicate count ========");

          System.out.println("m_predicateIndex: " + m_predicateIndex);

          System.out.println("pred.num(): " + pred.num());

        }

        int proxPos=this.getProximityPosition(m_predicateIndex);

        int predIndex=(int)pred.num();

        if (proxPos != predIndex) {

          if (DEBUG_PREDICATECOUNTING) {

            System.out.println("\nnode context: " + nodeToString(context));

            System.out.println("index predicate is false: " + proxPos);

            System.out.println("\n===== end predicate count ========");

          }

          return false;

        }

 else         if (DEBUG_PREDICATECOUNTING) {

          System.out.println("\nnode context: " + nodeToString(context));

          System.out.println("index predicate is true: " + proxPos);

          System.out.println("\n===== end predicate count ========");

        }

        if (m_predicates[i].isStableNumber() && i == nPredicates - 1) {

          m_foundLast=true;

        }

      }

 else       if (!pred.bool())       return false;

      countProximityPosition(++m_predicateIndex);

    }

  }

  finally {

    xctxt.popCurrentNode();

    xctxt.popNamespaceContext();

    xctxt.popSubContextList();

    m_predicateIndex=-1;

  }

  return true;

}

Location: PredicatedNodeTest.java

Content: 

/** 

 * Get the owning location path iterator.

 * @return the owning location path iterator, which should not be null.

 */

public LocPathIterator getLocPathIterator(){

  return m_lpi;

}

Location: PredicatedNodeTest.java

Content: 

/** 

 * Get which predicate is executing.

 * @return The current predicate index, or -1 if no predicate is executing.

 */

public int getPredicateIndex(){

  return m_predicateIndex;

}

Location: PredicatedNodeTest.java

Content: 

/** 

 * Get the current sub-context position.

 * @return The node position of this walker in the sub-context node list.

 */

public int getProximityPosition(){

  return getProximityPosition(m_predicateIndex);

}

Location: PredicatedNodeTest.java

Content: 

/** 

 * Get the current sub-context position.

 * @param predicateIndex The index of the predicate where the proximity shouldbe taken from.

 * @return The node position of this walker in the sub-context node list.

 */

protected int getProximityPosition(int predicateIndex){

  return (predicateIndex >= 0) ? m_proximityPositions[predicateIndex] : 0;

}

Location: PredicatedNodeTest.java

Content: 

/** 

 * Init predicate info.

 * @param compiler The Compiler object that has information about this walker inthe op map.

 * @param opPos    The op code position of this location step.

 * @throws javax.xml.transform.TransformerException

 */

protected void initPredicateInfo(Compiler compiler,int opPos) throws javax.xml.transform.TransformerException {

  int pos=compiler.getFirstPredicateOpPos(opPos);

  if (pos > 0) {

    m_predicates=compiler.getCompiledPredicates(pos);

    if (null != m_predicates) {

      for (int i=0; i < m_predicates.length; i++) {

        m_predicates[i].exprSetParent(this);

      }

    }

  }

}

Location: PredicatedNodeTest.java

Content: 

/** 

 * Init the proximity position to zero for a forward axes.

 * @param i The index into the m_proximityPositions array.

 * @throws javax.xml.transform.TransformerException

 */

public void initProximityPosition(int i) throws javax.xml.transform.TransformerException {

  m_proximityPositions[i]=0;

}

Location: PredicatedNodeTest.java

Content: 

/** 

 * Tells if this is a reverse axes.

 * @return false, unless a derived class overrides.

 */

public boolean isReverseAxes(){

  return false;

}

Location: PredicatedNodeTest.java

Content: 

/** 

 * Diagnostics.

 * @param n Node to give diagnostic information about, or null.

 * @return Informative string about the argument.

 */

protected String nodeToString(int n){

  if (DTM.NULL != n) {

    DTM dtm=m_lpi.getXPathContext().getDTM(n);

    return dtm.getNodeName(n) + "{" + (n + 1)+ "}";

  }

 else {

    return "null";

  }

}

Location: PredicatedNodeTest.java

Content: 

/** 

 * Construct an AxesWalker. The location path iterator will have to be set before use.

 */

PredicatedNodeTest(){

}

Location: PredicatedNodeTest.java

Content: 

/** 

 * Construct an AxesWalker using a LocPathIterator.

 * @param locPathIterator non-null reference to the parent iterator.

 */

PredicatedNodeTest(LocPathIterator locPathIterator){

  m_lpi=locPathIterator;

}

Location: PredicatedNodeTest.java

Content: 

/** 

 * Read the object from a serialization stream.

 * @param stream Input stream to read from

 * @throws java.io.IOException

 * @throws javax.xml.transform.TransformerException

 */

private void readObject(java.io.ObjectInputStream stream) throws java.io.IOException, javax.xml.transform.TransformerException {

  try {

    stream.defaultReadObject();

    m_predicateIndex=-1;

    resetProximityPositions();

  }

 catch (  ClassNotFoundException cnfe) {

    throw new javax.xml.transform.TransformerException(cnfe);

  }

}

Location: PredicatedNodeTest.java

Content: 

/** 

 * Reset the proximity positions counts.

 */

public void resetProximityPositions(){

  int nPredicates=getPredicateCount();

  if (nPredicates > 0) {

    if (null == m_proximityPositions)     m_proximityPositions=new int[nPredicates];

    for (int i=0; i < nPredicates; i++) {

      try {

        initProximityPosition(i);

      }

 catch (      Exception e) {

        throw new org.apache.xml.utils.WrappedRuntimeException(e);

      }

    }

  }

}

Location: PredicatedNodeTest.java

Content: 

/** 

 * Set the location path iterator owner for this walker. Besides initialization, this function is called during cloning operations.

 * @param li non-null reference to the owning location path iterator.

 */

public void setLocPathIterator(LocPathIterator li){

  m_lpi=li;

  if (this != li)   li.exprSetParent(this);

}

Location: PredicatedNodeTest.java

Content: 

/** 

 * Set the number of predicates that this walker has. This does more that one would think, as it creates a new predicate array of the size of the count argument, and copies count predicates into the new one from the old, and then reassigns the predicates value. All this to keep from having to have a predicate count value.

 * @param count The number of predicates, which must be equal or less than theexisting count.

 */

public void setPredicateCount(int count){

  if (count > 0) {

    Expression[] newPredicates=new Expression[count];

    for (int i=0; i < count; i++) {

      newPredicates[i]=m_predicates[i];

    }

    m_predicates=newPredicates;

  }

 else   m_predicates=null;

}

