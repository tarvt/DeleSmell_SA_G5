Location: DocumentCache.java

Content: 

/** 

 * DocumentCache constructor

 */

public DocumentCache(int size) throws SAXException {

  this(size,null);

  try {

    _dtmManager=(XSLTCDTMManager)XSLTCDTMManager.getDTMManagerClass().newInstance();

  }

 catch (  Exception e) {

    throw new SAXException(e);

  }

}

Location: DocumentCache.java

Content: 

/** 

 * DocumentCache constructor

 */

public DocumentCache(int size,XSLTCDTMManager dtmManager) throws SAXException {

  _dtmManager=dtmManager;

  _count=0;

  _current=0;

  _size=size;

  _references=new Hashtable(_size + 2);

  _URIs=new String[_size];

  try {

    final SAXParserFactory factory=SAXParserFactory.newInstance();

    try {

      factory.setFeature(Constants.NAMESPACE_FEATURE,true);

    }

 catch (    Exception e) {

      factory.setNamespaceAware(true);

    }

    _parser=factory.newSAXParser();

    _reader=_parser.getXMLReader();

  }

 catch (  ParserConfigurationException e) {

    BasisLibrary.runTimeError(BasisLibrary.NAMESPACES_SUPPORT_ERR);

  }

}

Location: DocumentCache.java

Content: 

/** 

 * Returns the time-stamp for a document's last update

 */

private final long getLastModified(String uri){

  try {

    URL url=new URL(uri);

    URLConnection connection=url.openConnection();

    long timestamp=connection.getLastModified();

    if (timestamp == 0) {

      if ("file".equals(url.getProtocol())) {

        File localfile=new File(URLDecoder.decode(url.getFile()));

        timestamp=localfile.lastModified();

      }

    }

    return (timestamp);

  }

 catch (  Exception e) {

    return (System.currentTimeMillis());

  }

}

Location: DocumentCache.java

Content: 

/** 

 * Outputs the cache statistics

 */

public void getStatistics(PrintWriter out){

  out.println("<h2>DOM cache statistics</h2><center><table border=\"2\">" + "<tr><td><b>Document URI</b></td>" + "<td><center><b>Build time</b></center></td>"+ "<td><center><b>Access count</b></center></td>"+ "<td><center><b>Last accessed</b></center></td>"+ "<td><center><b>Last modified</b></center></td></tr>");

  for (int i=0; i < _count; i++) {

    CachedDocument doc=(CachedDocument)_references.get(_URIs[i]);

    out.print("<tr><td><a href=\"" + _URIs[i] + "\">"+ "<font size=-1>"+ _URIs[i]+ "</font></a></td>");

    out.print("<td><center>" + doc.getLatency() + "ms</center></td>");

    out.print("<td><center>" + doc.getAccessCount() + "</center></td>");

    out.print("<td><center>" + (new Date(doc.getLastReferenced())) + "</center></td>");

    out.print("<td><center>" + (new Date(doc.getLastModified())) + "</center></td>");

    out.println("</tr>");

  }

  out.println("</table></center>");

}

Location: DocumentCache.java

Content: 

/** 

 */

private synchronized void insertDocument(String uri,CachedDocument doc){

  if (_count < _size) {

    _URIs[_count++]=uri;

    _current=0;

  }

 else {

    _references.remove(_URIs[_current]);

    _URIs[_current]=uri;

    if (++_current >= _size)     _current=0;

  }

  _references.put(uri,doc);

}

Location: DocumentCache.java

Content: 

/** 

 */

private CachedDocument lookupDocument(String uri){

  return ((CachedDocument)_references.get(uri));

}

Location: DocumentCache.java

Content: 

/** 

 */

private synchronized void replaceDocument(String uri,CachedDocument doc){

  CachedDocument old=(CachedDocument)_references.get(uri);

  if (doc == null)   insertDocument(uri,doc);

 else   _references.put(uri,doc);

}

