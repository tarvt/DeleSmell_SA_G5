Location: VariableStack.java

Content: 

/** 

 * Use this to clear the variables in a section of the stack. This is used to clear the parameter section of the stack, so that default param values can tell if they've already been set. It is important to note that this function has a 1K limitation.

 * @param start The start position, relative to the current local stack frame.

 * @param len   The number of slots to be cleared.

 */

public void clearLocalSlots(int start,int len){

  start+=_currentFrameBottom;

  System.arraycopy(m_nulls,0,_stackFrames,start,len);

}

Location: VariableStack.java

Content: 

/** 

 * Get a global variable or parameter from the global stack frame.

 * @param xctxt The XPath context, which must be passed in order to lazyevaluate variables.

 * @param index Global variable index relative to the global stack frame bottom.

 * @return The value of the variable.

 * @throws TransformerException

 */

public XObject getGlobalVariable(XPathContext xctxt,final int index) throws TransformerException {

  XObject val=_stackFrames[index];

  if (val.getType() == XObject.CLASS_UNRESOLVEDVARIABLE)   return (_stackFrames[index]=val.execute(xctxt));

  return val;

}

Location: VariableStack.java

Content: 

/** 

 * Get a global variable or parameter from the global stack frame.

 * @param xctxt The XPath context, which must be passed in order to lazyevaluate variables.

 * @param index Global variable index relative to the global stack frame bottom.

 * @return The value of the variable.

 * @throws TransformerException

 */

public XObject getGlobalVariable(XPathContext xctxt,final int index,boolean destructiveOK) throws TransformerException {

  XObject val=_stackFrames[index];

  if (val.getType() == XObject.CLASS_UNRESOLVEDVARIABLE)   return (_stackFrames[index]=val.execute(xctxt));

  return destructiveOK ? val : val.getFresh();

}

Location: VariableStack.java

Content: 

/** 

 * Get a local variable or parameter in the current stack frame.

 * @param index Local variable index relative to the given frame bottom.NEEDSDOC @param frame

 * @return The value of the variable.

 * @throws TransformerException

 */

public XObject getLocalVariable(int index,int frame) throws TransformerException {

  index+=frame;

  XObject val=_stackFrames[index];

  return val;

}

Location: VariableStack.java

Content: 

/** 

 * Get a local variable or parameter in the current stack frame.

 * @param xctxt The XPath context, which must be passed in order to lazyevaluate variables.

 * @param index Local variable index relative to the current stack frame bottom.

 * @return The value of the variable.

 * @throws TransformerException

 */

public XObject getLocalVariable(XPathContext xctxt,int index) throws TransformerException {

  index+=_currentFrameBottom;

  XObject val=_stackFrames[index];

  if (null == val)   throw new TransformerException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_VARIABLE_ACCESSED_BEFORE_BIND,null),xctxt.getSAXLocator());

  if (val.getType() == XObject.CLASS_UNRESOLVEDVARIABLE)   return (_stackFrames[index]=val.execute(xctxt));

  return val;

}

Location: VariableStack.java

Content: 

/** 

 * Get a local variable or parameter in the current stack frame.

 * @param xctxt The XPath context, which must be passed in order to lazyevaluate variables.

 * @param index Local variable index relative to the current stack frame bottom.

 * @return The value of the variable.

 * @throws TransformerException

 */

public XObject getLocalVariable(XPathContext xctxt,int index,boolean destructiveOK) throws TransformerException {

  index+=_currentFrameBottom;

  XObject val=_stackFrames[index];

  if (null == val)   throw new TransformerException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_VARIABLE_ACCESSED_BEFORE_BIND,null),xctxt.getSAXLocator());

  if (val.getType() == XObject.CLASS_UNRESOLVEDVARIABLE)   return (_stackFrames[index]=val.execute(xctxt));

  return destructiveOK ? val : val.getFresh();

}

Location: VariableStack.java

Content: 

/** 

 * Get the position from where the search should start, which is either the searchStart property, or the top of the stack if that value is -1.

 * @return The current stack frame position.

 */

public int getStackFrame(){

  return _currentFrameBottom;

}

Location: VariableStack.java

Content: 

/** 

 * Get a variable based on it's qualified name. This is for external use only.

 * @param xctxt The XPath context, which must be passed in order to lazyevaluate variables.

 * @param qname The qualified name of the variable.

 * @return The evaluated value of the variable.

 * @throws javax.xml.transform.TransformerException

 */

public XObject getVariableOrParam(XPathContext xctxt,org.apache.xml.utils.QName qname) throws javax.xml.transform.TransformerException {

  org.apache.xml.utils.PrefixResolver prefixResolver=xctxt.getNamespaceContext();

  if (prefixResolver instanceof org.apache.xalan.templates.ElemTemplateElement) {

    org.apache.xalan.templates.ElemVariable vvar;

    org.apache.xalan.templates.ElemTemplateElement prev=(org.apache.xalan.templates.ElemTemplateElement)prefixResolver;

    if (!(prev instanceof org.apache.xalan.templates.Stylesheet)) {

      while (!(prev.getParentNode() instanceof org.apache.xalan.templates.Stylesheet)) {

        org.apache.xalan.templates.ElemTemplateElement savedprev=prev;

        while (null != (prev=prev.getPreviousSiblingElem())) {

          if (prev instanceof org.apache.xalan.templates.ElemVariable) {

            vvar=(org.apache.xalan.templates.ElemVariable)prev;

            if (vvar.getName().equals(qname))             return getLocalVariable(xctxt,vvar.getIndex());

          }

        }

        prev=savedprev.getParentElem();

      }

    }

    vvar=prev.getStylesheetRoot().getVariableOrParamComposed(qname);

    if (null != vvar)     return getGlobalVariable(xctxt,vvar.getIndex());

  }

  throw new javax.xml.transform.TransformerException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_VAR_NOT_RESOLVABLE,new Object[]{qname.toString()}));

}

Location: VariableStack.java

Content: 

/** 

 * Tell if a local variable has been set or not.

 * @param index Local variable index relative to the current stack frame bottom.

 * @return true if the value at the index is not null.

 * @throws TransformerException

 */

public boolean isLocalSet(int index) throws TransformerException {

  return (_stackFrames[index + _currentFrameBottom] != null);

}

Location: VariableStack.java

Content: 

/** 

 * Allocates memory (called a stackframe) on the stack; used to store local variables and parameter arguments. <p> I use the link/unlink concept because of distant <a href= "http://math.millikin.edu/mprogers/Courses/currentCourses/CS481-ComputerArchitecture/cs481.Motorola68000.html"> Motorola 68000 assembler</a> memories. </p>

 * @param size The size of the stack frame allocation. This ammount shouldnormally be the maximum number of variables that you can have allocated at one time in the new stack frame.

 * @return The bottom of the stack frame, from where local variable addressingshould start from.

 */

public int link(final int size){

  _currentFrameBottom=_frameTop;

  _frameTop+=size;

  if (_frameTop >= _stackFrames.length) {

    XObject newsf[]=new XObject[_stackFrames.length + XPathContext.RECURSIONLIMIT + size];

    System.arraycopy(_stackFrames,0,newsf,0,_stackFrames.length);

    _stackFrames=newsf;

  }

  if (_linksTop + 1 >= _links.length) {

    int newlinks[]=new int[_links.length + (CLEARLIMITATION * 2)];

    System.arraycopy(_links,0,newlinks,0,_links.length);

    _links=newlinks;

  }

  _links[_linksTop++]=_currentFrameBottom;

  return _currentFrameBottom;

}

Location: VariableStack.java

Content: 

/** 

 * Reset the stack to a start position.

 * @param linksSize    Initial stack size to use

 * @param varArraySize Initial variable array size to use

 */

protected void reset(int linksSize,int varArraySize){

  _frameTop=0;

  _linksTop=0;

  if (_links == null) {

    _links=new int[linksSize];

  }

  _links[_linksTop++]=0;

  _stackFrames=new XObject[varArraySize];

}

Location: VariableStack.java

Content: 

/** 

 * Set a global variable or parameter in the global stack frame.

 * @param index Local variable index relative to the global stack frame bottom.

 * @param val   The value of the variable that is being set.

 */

public void setGlobalVariable(final int index,final XObject val){

  _stackFrames[index]=val;

}

Location: VariableStack.java

Content: 

/** 

 * Set a local variable or parameter in the current stack frame.

 * @param index Local variable index relative to the current stack frame bottom.

 * @param val   The value of the variable that is being set.

 */

public void setLocalVariable(int index,XObject val){

  _stackFrames[index + _currentFrameBottom]=val;

}

Location: VariableStack.java

Content: 

/** 

 * Set a local variable or parameter in the specified stack frame.

 * @param index Local variable index relative to the current stack frame bottom.NEEDSDOC @param stackFrame

 * @param val   The value of the variable that is being set.

 */

public void setLocalVariable(int index,XObject val,int stackFrame){

  _stackFrames[index + stackFrame]=val;

}

Location: VariableStack.java

Content: 

/** 

 * Set the current stack frame.

 * @param sf The new stack frame position.

 */

public void setStackFrame(int sf){

  _currentFrameBottom=sf;

}

Location: VariableStack.java

Content: 

/** 

 * Free up the stack frame that was last allocated with  {@link #link(int size)}.

 */

public void unlink(){

  _frameTop=_links[--_linksTop];

  _currentFrameBottom=_links[_linksTop - 1];

}

Location: VariableStack.java

Content: 

/** 

 * Free up the stack frame that was last allocated with  {@link #link(int size)}.

 * @param currentFrame The current frame to set to after the unlink.

 */

public void unlink(int currentFrame){

  _frameTop=_links[--_linksTop];

  _currentFrameBottom=currentFrame;

}

Location: VariableStack.java

Content: 

/** 

 * Constructor for a variable stack.

 */

public VariableStack(){

  reset();

}

Location: VariableStack.java

Content: 

/** 

 * Constructor for a variable stack.

 * @param initStackSize The initial stack size. Must be at least one. The stackcan grow if needed.

 */

public VariableStack(int initStackSize){

  reset(initStackSize,initStackSize * 2);

}

