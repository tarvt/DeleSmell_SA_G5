Location: NodeSet.java

Content: 

/** 

 * Append a Node onto the vector.

 * @param value Node to add to the vector

 */

public void addElement(Node value){

  if (!m_mutable)   throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESET_NOT_MUTABLE,null));

  if ((m_firstFree + 1) >= m_mapSize) {

    if (null == m_map) {

      m_map=new Node[m_blocksize];

      m_mapSize=m_blocksize;

    }

 else {

      m_mapSize+=m_blocksize;

      Node newMap[]=new Node[m_mapSize];

      System.arraycopy(m_map,0,newMap,0,m_firstFree + 1);

      m_map=newMap;

    }

  }

  m_map[m_firstFree]=value;

  m_firstFree++;

}

Location: NodeSet.java

Content: 

/** 

 * Add the node into a vector of nodes where it should occur in document order.

 * @param node    The node to be added.

 * @param test    true if we should test for doc order

 * @param support The XPath runtime context.

 * @return insertIndex.

 * @throws RuntimeException thrown if this NodeSet is not of a mutable type.

 */

public int addNodeInDocOrder(Node node,boolean test,XPathContext support){

  if (!m_mutable)   throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESET_NOT_MUTABLE,null));

  int insertIndex=-1;

  if (test) {

    int size=size(), i;

    for (i=size - 1; i >= 0; i--) {

      Node child=(Node)elementAt(i);

      if (child == node) {

        i=-2;

        break;

      }

      if (!DOM2Helper.isNodeAfter(node,child)) {

        break;

      }

    }

    if (i != -2) {

      insertIndex=i + 1;

      insertElementAt(node,insertIndex);

    }

  }

 else {

    insertIndex=this.size();

    boolean foundit=false;

    for (int i=0; i < insertIndex; i++) {

      if (this.item(i).equals(node)) {

        foundit=true;

        break;

      }

    }

    if (!foundit)     addElement(node);

  }

  return insertIndex;

}

Location: NodeSet.java

Content: 

/** 

 * Add the node into a vector of nodes where it should occur in document order.

 * @param node    The node to be added.

 * @param support The XPath runtime context.

 * @return The index where it was inserted.

 * @throws RuntimeException thrown if this NodeSet is not of a mutable type.

 */

public int addNodeInDocOrder(Node node,XPathContext support){

  if (!m_mutable)   throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESET_NOT_MUTABLE,null));

  return addNodeInDocOrder(node,true,support);

}

Location: NodeSet.java

Content: 

/** 

 * Add the node list to this node set in document order.

 * @param start     index.

 * @param end       index.

 * @param testIndex index.

 * @param nodelist  The nodelist to add.

 * @param support   The XPath runtime context.

 * @return false always.

 * @throws RuntimeException thrown if this NodeSet is not of a mutable type.

 */

private boolean addNodesInDocOrder(int start,int end,int testIndex,NodeList nodelist,XPathContext support){

  if (!m_mutable)   throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESET_NOT_MUTABLE,null));

  boolean foundit=false;

  int i;

  Node node=nodelist.item(testIndex);

  for (i=end; i >= start; i--) {

    Node child=(Node)elementAt(i);

    if (child == node) {

      i=-2;

      break;

    }

    if (!DOM2Helper.isNodeAfter(node,child)) {

      insertElementAt(node,i + 1);

      testIndex--;

      if (testIndex > 0) {

        boolean foundPrev=addNodesInDocOrder(0,i,testIndex,nodelist,support);

        if (!foundPrev) {

          addNodesInDocOrder(i,size() - 1,testIndex,nodelist,support);

        }

      }

      break;

    }

  }

  if (i == -1) {

    insertElementAt(node,0);

  }

  return foundit;

}

Location: NodeSet.java

Content: 

/** 

 * Copy NodeList members into this nodelist, adding in document order. If a node is null, don't add it.

 * @param iterator NodeIterator which yields the nodes to be added.

 * @param support  The XPath runtime context.

 * @throws RuntimeException thrown if this NodeSet is not of a mutable type.

 */

public void addNodesInDocOrder(NodeIterator iterator,XPathContext support){

  if (!m_mutable)   throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESET_NOT_MUTABLE,null));

  Node node;

  while (null != (node=iterator.nextNode())) {

    addNodeInDocOrder(node,support);

  }

}

Location: NodeSet.java

Content: 

/** 

 * Copy NodeList members into this nodelist, adding in document order. If a node is null, don't add it.

 * @param nodelist List of nodes to be added

 * @param support  The XPath runtime context.

 * @throws RuntimeException thrown if this NodeSet is not of a mutable type.

 */

public void addNodesInDocOrder(NodeList nodelist,XPathContext support){

  if (!m_mutable)   throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESET_NOT_MUTABLE,null));

  int nChildren=nodelist.getLength();

  for (int i=0; i < nChildren; i++) {

    Node node=nodelist.item(i);

    if (null != node) {

      addNodeInDocOrder(node,support);

    }

  }

}

Location: NodeSet.java

Content: 

/** 

 * Copy NodeList members into this nodelist, adding in document order. Null references are not added.

 * @param iterator NodeIterator which yields the nodes to be added.

 * @throws RuntimeException thrown if this NodeSet is not of a mutable type.

 */

public void addNodes(NodeIterator iterator){

  if (!m_mutable)   throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESET_NOT_MUTABLE,null));

  if (null != iterator) {

    Node obj;

    while (null != (obj=iterator.nextNode())) {

      addElement(obj);

    }

  }

}

Location: NodeSet.java

Content: 

/** 

 * Copy NodeList members into this nodelist, adding in document order. If a node is null, don't add it.

 * @param nodelist List of nodes which should now be referenced by this NodeSet.

 * @throws RuntimeException thrown if this NodeSet is not of a mutable type.

 */

public void addNodes(NodeList nodelist){

  if (!m_mutable)   throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESET_NOT_MUTABLE,null));

  if (null != nodelist) {

    int nChildren=nodelist.getLength();

    for (int i=0; i < nChildren; i++) {

      Node obj=nodelist.item(i);

      if (null != obj) {

        addElement(obj);

      }

    }

  }

}

Location: NodeSet.java

Content: 

/** 

 * <p> Copy NodeList members into this nodelist, adding in document order. Only genuine node references will be copied; nulls appearing in the source NodeSet will not be added to this one. </p> <p> In case you're wondering why this function is needed: NodeSet implements both NodeIterator and NodeList. If this method isn't provided, Java can't decide which of those to use when addNodes() is invoked. Providing the more-explicit match avoids that ambiguity.) </p>

 * @param ns NodeSet whose members should be merged into this NodeSet.

 * @throws RuntimeException thrown if this NodeSet is not of a mutable type.

 */

public void addNodes(NodeSet ns){

  if (!m_mutable)   throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESET_NOT_MUTABLE,null));

  addNodes((NodeIterator)ns);

}

Location: NodeSet.java

Content: 

/** 

 * Add a node to the NodeSet. Not all types of NodeSets support this operation

 * @param n Node to be added

 * @throws RuntimeException thrown if this NodeSet is not of a mutable type.

 */

public void addNode(Node n){

  if (!m_mutable)   throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESET_NOT_MUTABLE,null));

  this.addElement(n);

}

Location: NodeSet.java

Content: 

/** 

 * Append the nodes to the list.

 * @param nodes NodeVector to append to this list

 */

public void appendNodes(NodeSet nodes){

  int nNodes=nodes.size();

  if (null == m_map) {

    m_mapSize=nNodes + m_blocksize;

    m_map=new Node[m_mapSize];

  }

 else   if ((m_firstFree + nNodes) >= m_mapSize) {

    m_mapSize+=(nNodes + m_blocksize);

    Node newMap[]=new Node[m_mapSize];

    System.arraycopy(m_map,0,newMap,0,m_firstFree + nNodes);

    m_map=newMap;

  }

  System.arraycopy(nodes.m_map,0,m_map,m_firstFree,nNodes);

  m_firstFree+=nNodes;

}

Location: NodeSet.java

Content: 

/** 

 * Tell if the table contains the given node.

 * @param s Node to look for

 * @return True if the given node was found.

 */

public boolean contains(Node s){

  runTo(-1);

  if (null == m_map)   return false;

  for (int i=0; i < m_firstFree; i++) {

    Node node=m_map[i];

    if ((null != node) && node.equals(s))     return true;

  }

  return false;

}

Location: NodeSet.java

Content: 

/** 

 * Get whether or not this is a cached node set.

 * @return True if this list is cached.

 */

public boolean getShouldCacheNodes(){

  return m_cacheNodes;

}

Location: NodeSet.java

Content: 

/** 

 * Searches for the first occurence of the given argument, beginning the search at index, and testing for equality using the equals method.

 * @param elem Node to look for

 * @return the index of the first occurrence of the object argument in thisvector at position index or later in the vector; returns -1 if the object is not found.

 */

public int indexOf(Node elem){

  runTo(-1);

  if (null == m_map)   return -1;

  for (int i=0; i < m_firstFree; i++) {

    Node node=m_map[i];

    if ((null != node) && node.equals(elem))     return i;

  }

  return -1;

}

Location: NodeSet.java

Content: 

/** 

 * Searches for the first occurence of the given argument, beginning the search at index, and testing for equality using the equals method.

 * @param elem  Node to look for

 * @param index Index of where to start the search

 * @return the index of the first occurrence of the object argument in thisvector at position index or later in the vector; returns -1 if the object is not found.

 */

public int indexOf(Node elem,int index){

  runTo(-1);

  if (null == m_map)   return -1;

  for (int i=index; i < m_firstFree; i++) {

    Node node=m_map[i];

    if ((null != node) && node.equals(elem))     return i;

  }

  return -1;

}

Location: NodeSet.java

Content: 

/** 

 * Inserts the specified node in this vector at the specified index. Each component in this vector with an index greater or equal to the specified index is shifted upward to have an index one greater than the value it had previously.

 * @param value Node to insert

 * @param at    Position where to insert

 */

public void insertElementAt(Node value,int at){

  if (!m_mutable)   throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESET_NOT_MUTABLE,null));

  if (null == m_map) {

    m_map=new Node[m_blocksize];

    m_mapSize=m_blocksize;

  }

 else   if ((m_firstFree + 1) >= m_mapSize) {

    m_mapSize+=m_blocksize;

    Node newMap[]=new Node[m_mapSize];

    System.arraycopy(m_map,0,newMap,0,m_firstFree + 1);

    m_map=newMap;

  }

  if (at <= (m_firstFree - 1)) {

    System.arraycopy(m_map,at,m_map,at + 1,m_firstFree - at);

  }

  m_map[at]=value;

  m_firstFree++;

}

Location: NodeSet.java

Content: 

/** 

 * Insert a node at a given position.

 * @param n   Node to be added

 * @param pos Offset at which the node is to be inserted, with 0 being the firstposition.

 * @throws RuntimeException thrown if this NodeSet is not of a mutable type.

 */

public void insertNode(Node n,int pos){

  if (!m_mutable)   throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESET_NOT_MUTABLE,null));

  insertElementAt(n,pos);

}

Location: NodeSet.java

Content: 

/** 

 * Create an empty, using the given block size.

 * @param blocksize Size of blocks to allocate

 */

public NodeSet(int blocksize){

  m_blocksize=blocksize;

  m_mapSize=0;

}

Location: NodeSet.java

Content: 

/** 

 * Create a NodeSet which contains the given Node.

 * @param node Single node to be added to the new set.

 */

public NodeSet(Node node){

  this(32);

  addNode(node);

}

Location: NodeSet.java

Content: 

/** 

 * Create a NodeSet, and copy the members of the given NodeIterator into it.

 * @param ni Iterator which yields Nodes to be made members of the new set.

 */

public NodeSet(NodeIterator ni){

  this(32);

  addNodes(ni);

}

Location: NodeSet.java

Content: 

/** 

 * Create a NodeSet, and copy the members of the given nodelist into it.

 * @param nodelist List of Nodes to be made members of the new set.

 */

public NodeSet(NodeList nodelist){

  this(32);

  addNodes(nodelist);

}

Location: NodeSet.java

Content: 

/** 

 * Create a NodeSet, and copy the members of the given NodeSet into it.

 * @param nodelist Set of Nodes to be made members of the new set.

 */

public NodeSet(NodeSet nodelist){

  this(32);

  addNodes((NodeIterator)nodelist);

}

Location: NodeSet.java

Content: 

/** 

 * Return the node at the top of the stack without popping the stack. Special purpose method for TransformerImpl, pushElemTemplateElement. Performance critical.

 * @return Node at the top of the stack or null if stack is empty.

 */

public final Node peepOrNull(){

  return ((null != m_map) && (m_firstFree > 0)) ? m_map[m_firstFree - 1] : null;

}

Location: NodeSet.java

Content: 

/** 

 * Return the node at the tail of the vector without popping Special purpose method for TransformerImpl, pushElemTemplateElement. Performance critical.

 * @return Node at the tail of the vector

 */

public final Node peepTail(){

  return m_map[m_firstFree - 1];

}

Location: NodeSet.java

Content: 

/** 

 * Return the node one position from the tail without popping. Special purpose method for TransformerImpl, pushElemTemplateElement. Performance critical.

 * @return Node one away from the tail

 */

public final Node peepTailSub1(){

  return m_map[m_firstFree - 2];

}

Location: NodeSet.java

Content: 

/** 

 * Pop a node from the tail of the vector and return the result.

 * @return the node at the tail of the vector

 */

public final Node pop(){

  m_firstFree--;

  Node n=m_map[m_firstFree];

  m_map[m_firstFree]=null;

  return n;

}

Location: NodeSet.java

Content: 

/** 

 * Pop a node from the tail of the vector and return the top of the stack after the pop.

 * @return The top of the stack after it's been popped

 */

public final Node popAndTop(){

  m_firstFree--;

  m_map[m_firstFree]=null;

  return (m_firstFree == 0) ? null : m_map[m_firstFree - 1];

}

Location: NodeSet.java

Content: 

/** 

 * Pop a pair of nodes from the tail of the stack. Special purpose method for TransformerImpl, pushElemTemplateElement. Performance critical.

 */

public final void popPair(){

  m_firstFree-=2;

  m_map[m_firstFree]=null;

  m_map[m_firstFree + 1]=null;

}

Location: NodeSet.java

Content: 

/** 

 * Pop a node from the tail of the vector.

 */

public final void popQuick(){

  m_firstFree--;

  m_map[m_firstFree]=null;

}

Location: NodeSet.java

Content: 

/** 

 * Push a pair of nodes into the stack. Special purpose method for TransformerImpl, pushElemTemplateElement. Performance critical.

 * @param v1 First node to add to vector

 * @param v2 Second node to add to vector

 */

public final void pushPair(Node v1,Node v2){

  if (null == m_map) {

    m_map=new Node[m_blocksize];

    m_mapSize=m_blocksize;

  }

 else {

    if ((m_firstFree + 2) >= m_mapSize) {

      m_mapSize+=m_blocksize;

      Node newMap[]=new Node[m_mapSize];

      System.arraycopy(m_map,0,newMap,0,m_firstFree);

      m_map=newMap;

    }

  }

  m_map[m_firstFree]=v1;

  m_map[m_firstFree + 1]=v2;

  m_firstFree+=2;

}

Location: NodeSet.java

Content: 

/** 

 * Append a Node onto the vector.

 * @param value Node to add to the vector

 */

public final void push(Node value){

  int ff=m_firstFree;

  if ((ff + 1) >= m_mapSize) {

    if (null == m_map) {

      m_map=new Node[m_blocksize];

      m_mapSize=m_blocksize;

    }

 else {

      m_mapSize+=m_blocksize;

      Node newMap[]=new Node[m_mapSize];

      System.arraycopy(m_map,0,newMap,0,ff + 1);

      m_map=newMap;

    }

  }

  m_map[ff]=value;

  ff++;

  m_firstFree=ff;

}

Location: NodeSet.java

Content: 

/** 

 * Inserts the specified node in this vector at the specified index. Each component in this vector with an index greater or equal to the specified index is shifted upward to have an index one greater than the value it had previously.

 */

public void removeAllElements(){

  if (null == m_map)   return;

  for (int i=0; i < m_firstFree; i++) {

    m_map[i]=null;

  }

  m_firstFree=0;

}

Location: NodeSet.java

Content: 

/** 

 * Deletes the component at the specified index. Each component in this vector with an index greater or equal to the specified index is shifted downward to have an index one smaller than the value it had previously.

 * @param i Index of node to remove

 */

public void removeElementAt(int i){

  if (null == m_map)   return;

  if (i >= m_firstFree)   throw new ArrayIndexOutOfBoundsException(i + " >= " + m_firstFree);

 else   if (i < 0)   throw new ArrayIndexOutOfBoundsException(i);

  if (i < m_firstFree - 1)   System.arraycopy(m_map,i + 1,m_map,i,m_firstFree - i - 1);

  m_firstFree--;

  m_map[m_firstFree]=null;

}

Location: NodeSet.java

Content: 

/** 

 * Removes the first occurrence of the argument from this vector. If the object is found in this vector, each component in the vector with an index greater or equal to the object's index is shifted downward to have an index one smaller than the value it had previously.

 * @param s Node to remove from the list

 * @return True if the node was successfully removed

 */

public boolean removeElement(Node s){

  if (!m_mutable)   throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESET_NOT_MUTABLE,null));

  if (null == m_map)   return false;

  for (int i=0; i < m_firstFree; i++) {

    Node node=m_map[i];

    if ((null != node) && node.equals(s)) {

      if (i < m_firstFree - 1)       System.arraycopy(m_map,i + 1,m_map,i,m_firstFree - i - 1);

      m_firstFree--;

      m_map[m_firstFree]=null;

      return true;

    }

  }

  return false;

}

Location: NodeSet.java

Content: 

/** 

 * Remove a node.

 * @param n Node to be added

 * @throws RuntimeException thrown if this NodeSet is not of a mutable type.

 */

public void removeNode(Node n){

  if (!m_mutable)   throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESET_NOT_MUTABLE,null));

  this.removeElement(n);

}

Location: NodeSet.java

Content: 

/** 

 * Sets the component at the specified index of this vector to be the specified object. The previous component at that position is discarded. The index must be a value greater than or equal to 0 and less than the current size of the vector.

 * @param node  Node to set

 * @param index Index of where to set the node

 */

public void setElementAt(Node node,int index){

  if (!m_mutable)   throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESET_NOT_MUTABLE,null));

  if (null == m_map) {

    m_map=new Node[m_blocksize];

    m_mapSize=m_blocksize;

  }

  m_map[index]=node;

}

Location: NodeSet.java

Content: 

/** 

 * Set the given node one position from the tail. Special purpose method for TransformerImpl, pushElemTemplateElement. Performance critical.

 * @param n Node to set

 */

public final void setTailSub1(Node n){

  m_map[m_firstFree - 2]=n;

}

Location: NodeSet.java

Content: 

/** 

 * Set the tail of the stack to the given node. Special purpose method for TransformerImpl, pushElemTemplateElement. Performance critical.

 * @param n Node to set at the tail of vector

 */

public final void setTail(Node n){

  m_map[m_firstFree - 1]=n;

}

