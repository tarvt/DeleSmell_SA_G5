Location: OutputPropertiesFactory.java

Content: 

private static Class findAccessControllerClass(){

  try {

    return Class.forName("java.security.AccessController");

  }

 catch (  Exception e) {

  }

  return null;

}

Location: OutputPropertiesFactory.java

Content: 

/** 

 * Fix up a string in an output properties file according to the rules of {@link #loadPropertiesFile}.

 * @param s non-null reference to string that may need to be fixed up.

 * @return A new string if fixup occured, otherwise the s argument.

 */

static private String fixupPropertyString(String s,boolean doClipping){

  int index;

  if (doClipping && s.startsWith(S_XSLT_PREFIX)) {

    s=s.substring(S_XSLT_PREFIX_LEN);

  }

  if (s.startsWith(S_XALAN_PREFIX)) {

    s=S_BUILTIN_EXTENSIONS_UNIVERSAL + s.substring(S_XALAN_PREFIX_LEN);

  }

  if ((index=s.indexOf("\\u003a")) > 0) {

    String temp=s.substring(index + 6);

    s=s.substring(0,index) + ":" + temp;

  }

  return s;

}

Location: OutputPropertiesFactory.java

Content: 

/** 

 * Creates an empty OutputProperties with the property key/value defaults specified by a property file. The method argument is used to construct a string of the form output_[method].properties (for instance, output_html.properties). The output_xml.properties file is always used as the base. <p> Anything other than 'text', 'xml', and 'html', will use the output_xml.properties file. </p>

 * @param method non-null reference to method name.

 * @return Properties object that holds the defaults for the given method.

 */

static public final Properties getDefaultMethodProperties(String method){

  String fileName=null;

  Properties defaultProperties=null;

  try {

synchronized (m_synch_object) {

      if (null == m_xml_properties) {

        fileName=PROP_FILE_XML;

        m_xml_properties=loadPropertiesFile(fileName,null);

      }

    }

    if (method.equals(Method.XML)) {

      defaultProperties=m_xml_properties;

    }

 else     if (method.equals(Method.HTML)) {

      if (null == m_html_properties) {

        fileName=PROP_FILE_HTML;

        m_html_properties=loadPropertiesFile(fileName,m_xml_properties);

      }

      defaultProperties=m_html_properties;

    }

 else     if (method.equals(Method.TEXT)) {

      if (null == m_text_properties) {

        fileName=PROP_FILE_TEXT;

        m_text_properties=loadPropertiesFile(fileName,m_xml_properties);

        if (null == m_text_properties.getProperty(OutputKeys.ENCODING)) {

          String mimeEncoding=Encodings.getMimeEncoding(null);

          m_text_properties.put(OutputKeys.ENCODING,mimeEncoding);

        }

      }

      defaultProperties=m_text_properties;

    }

 else     if (method.equals(Method.UNKNOWN)) {

      if (null == m_unknown_properties) {

        fileName=PROP_FILE_UNKNOWN;

        m_unknown_properties=loadPropertiesFile(fileName,m_xml_properties);

      }

      defaultProperties=m_unknown_properties;

    }

 else {

      defaultProperties=m_xml_properties;

    }

  }

 catch (  IOException ioe) {

    throw new WrappedRuntimeException(Utils.messages.createMessage(MsgKey.ER_COULD_NOT_LOAD_METHOD_PROPERTY,new Object[]{fileName,method}),ioe);

  }

  return new Properties(defaultProperties);

}

Location: OutputPropertiesFactory.java

Content: 

/** 

 * Load the properties file from a resource stream. If a key name such as "org.apache.xslt.xxx", fix up the start of string to be a curly namespace. If a key name starts with "xslt.output.xxx", clip off "xslt.output.". If a key name *or* a key value is discovered, check for \u003a in the text, and fix it up to be ":", since earlier versions of the JDK do not handle the escape sequence (at least in key names).

 * @param resourceName non-null reference to resource name.

 * @param defaults     Default properties, which may be null.

 */

static private Properties loadPropertiesFile(final String resourceName,Properties defaults) throws IOException {

  Properties props=new Properties(defaults);

  InputStream is=null;

  BufferedInputStream bis=null;

  try {

    if (ACCESS_CONTROLLER_CLASS != null) {

      is=(InputStream)AccessController.doPrivileged(new PrivilegedAction(){

        public Object run(){

          return OutputPropertiesFactory.class.getResourceAsStream(resourceName);

        }

      }

);

    }

 else {

      is=OutputPropertiesFactory.class.getResourceAsStream(resourceName);

    }

    bis=new BufferedInputStream(is);

    props.load(bis);

  }

 catch (  IOException ioe) {

    if (defaults == null) {

      throw ioe;

    }

 else {

      throw new WrappedRuntimeException(Utils.messages.createMessage(MsgKey.ER_COULD_NOT_LOAD_RESOURCE,new Object[]{resourceName}),ioe);

    }

  }

catch (  SecurityException se) {

    if (defaults == null) {

      throw se;

    }

 else {

      throw new WrappedRuntimeException(Utils.messages.createMessage(MsgKey.ER_COULD_NOT_LOAD_RESOURCE,new Object[]{resourceName}),se);

    }

  }

 finally {

    if (bis != null) {

      bis.close();

    }

    if (is != null) {

      is.close();

    }

  }

  Enumeration keys=((Properties)props.clone()).keys();

  while (keys.hasMoreElements()) {

    String key=(String)keys.nextElement();

    String value=null;

    try {

      value=System.getProperty(key);

    }

 catch (    SecurityException se) {

    }

    if (value == null)     value=(String)props.get(key);

    String newKey=fixupPropertyString(key,true);

    String newValue=null;

    try {

      newValue=System.getProperty(newKey);

    }

 catch (    SecurityException se) {

    }

    if (newValue == null)     newValue=fixupPropertyString(value,false);

 else     newValue=fixupPropertyString(newValue,false);

    if (key != newKey || value != newValue) {

      props.remove(key);

      props.put(newKey,newValue);

    }

  }

  return props;

}

