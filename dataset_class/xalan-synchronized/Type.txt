Location: Type.java

Content: 

public Instruction ADD(){

  return null;

}

Location: Type.java

Content: 

public Instruction CMP(boolean less){

  return null;

}

Location: Type.java

Content: 

public Instruction DIV(){

  return null;

}

Location: Type.java

Content: 

public Instruction DUP(){

  return DUP;

}

Location: Type.java

Content: 

public BranchInstruction GE(boolean tozero){

  return null;

}

Location: Type.java

Content: 

public BranchInstruction GT(boolean tozero){

  return null;

}

Location: Type.java

Content: 

public BranchInstruction LE(boolean tozero){

  return null;

}

Location: Type.java

Content: 

public BranchInstruction LT(boolean tozero){

  return null;

}

Location: Type.java

Content: 

public Instruction MUL(){

  return null;

}

Location: Type.java

Content: 

public Instruction NEG(){

  return null;

}

Location: Type.java

Content: 

/** 

 * Factory method to instantiate object types. Returns a pre-defined instance for java.lang.Object.class and java.lang.String.class.

 */

public static Type newObjectType(Class clazz){

  if (clazz == java.lang.Object.class) {

    return Type.Object;

  }

 else   if (clazz == java.lang.String.class) {

    return Type.String;

  }

 else {

    return new ObjectType(clazz);

  }

}

Location: Type.java

Content: 

/** 

 * Factory method to instantiate object types. Returns a pre-defined instance for "java.lang.Object" and "java.lang.String".

 */

public static Type newObjectType(String javaClassName){

  if (javaClassName == "java.lang.Object") {

    return Type.Object;

  }

 else   if (javaClassName == "java.lang.String") {

    return Type.String;

  }

 else {

    return new ObjectType(javaClassName);

  }

}

Location: Type.java

Content: 

public Instruction REM(){

  return null;

}

Location: Type.java

Content: 

public Instruction SUB(){

  return null;

}

Location: Type.java

Content: 

/** 

 * Translates object of this type to an object of type <code>type</code>. Expects an object of the former type and pushes an object of the latter if not boolean. If type <code>type</code> is boolean then a branchhandle list (to be appended to the false list) is returned.

 */

public FlowList translateToDesynthesized(ClassGenerator classGen,MethodGenerator methodGen,Type type){

  FlowList fl=null;

  if (type == Type.Boolean) {

    fl=translateToDesynthesized(classGen,methodGen,(BooleanType)type);

  }

 else {

    translateTo(classGen,methodGen,type);

  }

  return fl;

}

