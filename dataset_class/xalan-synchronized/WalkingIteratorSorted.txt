Location: WalkingIteratorSorted.java

Content: 

/** 

 * Tell if the nodeset can be walked in doc order, via static analysis.

 * @return true if the nodeset can be walked in doc order, without sorting.

 */

boolean canBeWalkedInNaturalDocOrderStatic(){

  if (null != m_firstWalker) {

    AxesWalker walker=m_firstWalker;

    int prevAxis=-1;

    boolean prevIsSimpleDownAxis=true;

    for (int i=0; null != walker; i++) {

      int axis=walker.getAxis();

      if (walker.isDocOrdered()) {

        boolean isSimpleDownAxis=((axis == Axis.CHILD) || (axis == Axis.SELF) || (axis == Axis.ROOT));

        if (isSimpleDownAxis || (axis == -1))         walker=walker.getNextWalker();

 else {

          boolean isLastWalker=(null == walker.getNextWalker());

          if (isLastWalker) {

            if (walker.isDocOrdered() && (axis == Axis.DESCENDANT || axis == Axis.DESCENDANTORSELF || axis == Axis.DESCENDANTSFROMROOT || axis == Axis.DESCENDANTSORSELFFROMROOT) || (axis == Axis.ATTRIBUTE))             return true;

          }

          return false;

        }

      }

 else       return false;

    }

    return true;

  }

  return false;

}

Location: WalkingIteratorSorted.java

Content: 

/** 

 * Create a WalkingIterator iterator, including creation of step walkers from the opcode list, and call back into the Compiler to create predicate expressions.

 * @param compiler          The Compiler which is creating this expression.

 * @param opPos             The position of this iterator in the opcode listfrom the compiler.

 * @param shouldLoadWalkers True if walkers should be loaded, or false if thisis a derived iterator and it doesn't wish to load child walkers.

 * @throws javax.xml.transform.TransformerException

 */

WalkingIteratorSorted(Compiler compiler,int opPos,int analysis,boolean shouldLoadWalkers) throws javax.xml.transform.TransformerException {

  super(compiler,opPos,analysis,shouldLoadWalkers);

}

Location: WalkingIteratorSorted.java

Content: 

/** 

 * Create a WalkingIteratorSorted object.

 * @param nscontext The namespace context for this iterator, should be OK ifnull.

 */

public WalkingIteratorSorted(PrefixResolver nscontext){

  super(nscontext);

}

