Location: IntegerArray.java

Content: 

/** 

 * Adds new int at the end if not already present.

 */

public void addNew(int value){

  for (int i=0; i < _free; i++) {

    if (_array[i] == value)     return;

  }

  add(value);

}

Location: IntegerArray.java

Content: 

public final void add(int value){

  if (_free == _size) {

    growArray(_size * 2);

  }

  _array[_free++]=value;

}

Location: IntegerArray.java

Content: 

public final int at(int index){

  return _array[index];

}

Location: IntegerArray.java

Content: 

public final int cardinality(){

  return _free;

}

Location: IntegerArray.java

Content: 

private void growArray(int size){

  final int[] newArray=new int[_size=size];

  System.arraycopy(_array,0,newArray,0,_free);

  _array=newArray;

}

Location: IntegerArray.java

Content: 

public IntegerArray(){

  this(InitialSize);

}

Location: IntegerArray.java

Content: 

public IntegerArray(int[] array){

  this(array.length);

  System.arraycopy(array,0,_array,0,_free=_size);

}

Location: IntegerArray.java

Content: 

public int last(){

  return _array[_free - 1];

}

Location: IntegerArray.java

Content: 

/** 

 * Merge two sorted arrays and eliminate duplicates. Elements of the other IntegerArray must not be changed.

 */

public void merge(final IntegerArray other){

  final int newSize=_free + other._free;

  int[] newArray=new int[newSize];

  int i=0, j=0, k;

  for (k=0; i < _free && j < other._free; k++) {

    int x=_array[i];

    int y=other._array[j];

    if (x < y) {

      newArray[k]=x;

      i++;

    }

 else     if (x > y) {

      newArray[k]=y;

      j++;

    }

 else {

      newArray[k]=x;

      i++;

      j++;

    }

  }

  if (i >= _free) {

    while (j < other._free) {

      newArray[k++]=other._array[j++];

    }

  }

 else {

    while (i < _free) {

      newArray[k++]=_array[i++];

    }

  }

  _array=newArray;

  _free=_size=newSize;

}

Location: IntegerArray.java

Content: 

private static int partition(int[] array,int p,int r){

  final int x=array[(p + r) >>> 1];

  int i=p - 1;

  int j=r + 1;

  while (true) {

    while (x < array[--j])     ;

    while (x > array[++i])     ;

    if (i < j) {

      int temp=array[i];

      array[i]=array[j];

      array[j]=temp;

    }

 else {

      return j;

    }

  }

}

Location: IntegerArray.java

Content: 

public int popLast(){

  return _array[--_free];

}

Location: IntegerArray.java

Content: 

public void pop(int n){

  _free-=n;

}

Location: IntegerArray.java

Content: 

public void print(java.io.PrintStream out){

  if (_free > 0) {

    for (int i=0; i < _free - 1; i++) {

      out.print(_array[i]);

      out.print(' ');

    }

    out.println(_array[_free - 1]);

  }

 else {

    out.println("IntegerArray: empty");

  }

}

Location: IntegerArray.java

Content: 

private static void quicksort(int[] array,int p,int r){

  if (p < r) {

    final int q=partition(array,p,r);

    quicksort(array,p,q);

    quicksort(array,q + 1,r);

  }

}

Location: IntegerArray.java

Content: 

public void reverse(){

  int left=0;

  int right=_free - 1;

  while (left < right) {

    int temp=_array[left];

    _array[left++]=_array[right];

    _array[right--]=temp;

  }

}

Location: IntegerArray.java

Content: 

public final void set(int index,int value){

  _array[index]=value;

}

Location: IntegerArray.java

Content: 

public int[] toIntArray(){

  final int[] result=new int[cardinality()];

  System.arraycopy(_array,0,result,0,cardinality());

  return result;

}

