Location: XPathContext.java

Content: 

/** 

 * Creates an empty <code>DocumentFragment</code> object.

 * @return A new <code>DocumentFragment handle</code>.

 */

public DTM createDocumentFragment(){

  return m_dtmManager.createDocumentFragment();

}

Location: XPathContext.java

Content: 

/** 

 * Create a new <code>DTMIterator</code> that holds exactly one node.

 * @param node The node handle that the DTMIterator will iterate to.

 * @return The newly created <code>DTMIterator</code>.

 */

public DTMIterator createDTMIterator(int node){

  DTMIterator iter=new org.apache.xpath.axes.OneStepIteratorForward(Axis.SELF);

  iter.setRoot(node,this);

  return iter;

}

Location: XPathContext.java

Content: 

/** 

 * Create a new <code>DTMIterator</code> based only on a whatToShow and a DTMFilter. The traversal semantics are defined as the descendant access.

 * @param whatToShow               This flag specifies which node types mayappear in the logical view of the tree presented by the iterator. See the description of <code>NodeFilter</code> for the set of possible <code>SHOW_</code> values.These flags can be combined using <code>OR</code>.

 * @param filter                   The <code>NodeFilter</code> to be used withthis <code>TreeWalker</code>, or <code>null</code> to indicate no filter.

 * @param entityReferenceExpansion The value of this flag determines whetherentity reference nodes are expanded.

 * @return The newly created <code>NodeIterator</code>.

 */

public DTMIterator createDTMIterator(int whatToShow,DTMFilter filter,boolean entityReferenceExpansion){

  return m_dtmManager.createDTMIterator(whatToShow,filter,entityReferenceExpansion);

}

Location: XPathContext.java

Content: 

/** 

 * Create a new <code>DTMIterator</code> based on an XPath <a href="http://www.w3.org/TR/xpath#NT-LocationPath>LocationPath</a> or a <a href="http://www.w3.org/TR/xpath#NT-UnionExpr">UnionExpr</a>.

 * @param xpathCompiler ??? Somehow we need to pass in a subpart of theexpression. I hate to do this with strings, since the larger expression has already been parsed.

 * @param pos           The position in the expression.

 * @return The newly created <code>DTMIterator</code>.

 */

public DTMIterator createDTMIterator(Object xpathCompiler,int pos){

  return m_dtmManager.createDTMIterator(xpathCompiler,pos);

}

Location: XPathContext.java

Content: 

/** 

 * Create a new <code>DTMIterator</code> based on an XPath <a href="http://www.w3.org/TR/xpath#NT-LocationPath>LocationPath</a> or a <a href="http://www.w3.org/TR/xpath#NT-UnionExpr">UnionExpr</a>.

 * @param xpathString Must be a valid string expressing a <ahref="http://www.w3.org/TR/xpath#NT-LocationPath>LocationPath</a> or a <a href= "http://www.w3.org/TR/xpath#NT-UnionExpr">UnionExpr</a>.

 * @param presolver   An object that can resolve prefixes to namespace URLs.

 * @return The newly created <code>DTMIterator</code>.

 */

public DTMIterator createDTMIterator(String xpathString,PrefixResolver presolver){

  return m_dtmManager.createDTMIterator(xpathString,presolver);

}

Location: XPathContext.java

Content: 

public Stack getAxesIteratorStackStacks(){

  return m_axesIteratorStack;

}

Location: XPathContext.java

Content: 

/** 

 * Get the current context node.

 * @return The current context node.

 */

public final int getContextNode(){

  return this.getCurrentNode();

}

Location: XPathContext.java

Content: 

/** 

 * Get the current context node list.

 * @return the <a href="http://www.w3.org/TR/xslt#dt-current-node-list">currentnode list</a>, also refered to here as a <term>context node list</term>.

 */

public final DTMIterator getContextNodeList(){

  if (m_contextNodeLists.size() > 0)   return (DTMIterator)m_contextNodeLists.peek();

 else   return null;

}

Location: XPathContext.java

Content: 

public Stack getContextNodeListsStack(){

  return m_contextNodeLists;

}

Location: XPathContext.java

Content: 

/** 

 * Get the current context node list.

 * @return An iterator for the current context list, as defined in XSLT.

 */

public final DTMIterator getContextNodes(){

  try {

    DTMIterator cnl=getContextNodeList();

    if (null != cnl)     return cnl.cloneWithReset();

 else     return null;

  }

 catch (  CloneNotSupportedException cnse) {

    return null;

  }

}

Location: XPathContext.java

Content: 

/** 

 * Get the current node that is the expression's context (i.e. for current() support).

 * @return The current sub-expression node.

 */

public final int getCurrentExpressionNode(){

  return m_currentExpressionNodes.peek();

}

Location: XPathContext.java

Content: 

public IntStack getCurrentExpressionNodeStack(){

  return m_currentExpressionNodes;

}

Location: XPathContext.java

Content: 

/** 

 * Get the <a href="http://www.w3.org/TR/xslt#dt-current-node-list">current node list</a> as defined by the XSLT spec.

 * @return the <a href="http://www.w3.org/TR/xslt#dt-current-node-list">currentnode list</a>.

 * @xsl.usage internal

 */

public org.apache.xpath.axes.SubContextList getCurrentNodeList(){

  return m_axesIteratorStack.isEmpty() ? null : (SubContextList)m_axesIteratorStack.elementAt(0);

}

Location: XPathContext.java

Content: 

public IntStack getCurrentNodeStack(){

  return m_currentNodes;

}

Location: XPathContext.java

Content: 

/** 

 * Given a W3C DOM node, try and return a DTM handle. Note: calling this may be non-optimal.

 * @param node Non-null reference to a DOM node.

 * @return a valid DTM handle.

 */

public int getDTMHandleFromNode(org.w3c.dom.Node node){

  return m_dtmManager.getDTMHandleFromNode(node);

}

Location: XPathContext.java

Content: 

/** 

 * %TBD% Doc

 */

public int getDTMIdentity(DTM dtm){

  return m_dtmManager.getDTMIdentity(dtm);

}

Location: XPathContext.java

Content: 

/** 

 * Gets DTMXRTreeFrag object if one has already been created. Creates new DTMXRTreeFrag object and adds to m_DTMXRTreeFrags HashMap, otherwise.

 * @param dtmIdentity

 * @return DTMXRTreeFrag

 */

public DTMXRTreeFrag getDTMXRTreeFrag(int dtmIdentity){

  if (m_DTMXRTreeFrags == null) {

    m_DTMXRTreeFrags=new HashMap();

  }

  if (m_DTMXRTreeFrags.containsKey(new Integer(dtmIdentity))) {

    return (DTMXRTreeFrag)m_DTMXRTreeFrags.get(new Integer(dtmIdentity));

  }

 else {

    final DTMXRTreeFrag frag=new DTMXRTreeFrag(dtmIdentity,this);

    m_DTMXRTreeFrags.put(new Integer(dtmIdentity),frag);

    return frag;

  }

}

Location: XPathContext.java

Content: 

/** 

 * Get an instance of a DTM, loaded with the content from the specified source. If the unique flag is true, a new instance will always be returned. Otherwise it is up to the DTMManager to return a new instance or an instance that it already created and may be being used by someone else. (I think more parameters will need to be added for error handling, and entity resolution).

 * @param source      the specification of the source object, which may be null,in which case it is assumed that node construction will take by some other means.

 * @param unique      true if the returned DTM must be unique, probably becauseit is going to be mutated.

 * @param wsfilter    Enables filtering of whitespace nodes, and may be null.

 * @param incremental true if the construction should try and be incremental.

 * @param doIndexing  true if the caller considers it worth it to use indexingschemes.

 * @return a non-null DTM reference.

 */

public DTM getDTM(javax.xml.transform.Source source,boolean unique,DTMWSFilter wsfilter,boolean incremental,boolean doIndexing){

  return m_dtmManager.getDTM(source,unique,wsfilter,incremental,doIndexing);

}

Location: XPathContext.java

Content: 

/** 

 * The the expression context for extensions for this context.

 * @return An object that implements the ExpressionContext.

 */

public ExpressionContext getExpressionContext(){

  return expressionContext;

}

Location: XPathContext.java

Content: 

/** 

 * Get a DTM to be used as a container for a global Result Tree Fragment. This will always be an instance of (derived from? equivalent to?) SAX2DTM, since each RTF is constructed by temporarily redirecting our SAX output to it. It may be a single DTM containing for multiple fragments, if the implementation supports that. Note: The distinction between this method and getRTFDTM() is that the latter allocates space from the dynamic variable stack (m_rtfdtm_stack), which may be pruned away again as the templates which defined those variables are exited. Global variables may be bound late (see XUnresolvedVariable), and never want to be discarded, hence we need to allocate them separately and don't actually need a stack to track them.

 * @return a non-null DTM reference.

 */

public DTM getGlobalRTFDTM(){

  if (m_global_rtfdtm == null || m_global_rtfdtm.isTreeIncomplete()) {

    m_global_rtfdtm=(SAX2RTFDTM)m_dtmManager.getDTM(null,true,null,false,false);

  }

  return m_global_rtfdtm;

}

Location: XPathContext.java

Content: 

/** 

 * Get the current location path iterator root.

 */

public final int getIteratorRoot(){

  return m_iteratorRoots.peepOrNull();

}

Location: XPathContext.java

Content: 

/** 

 * Get the "owner" context of this context, which should be, in the case of XSLT, the Transformer object. This is needed so that XSLT functions can get the Transformer.

 * @return The owner object passed into the constructor, or null.

 */

public Object getOwnerObject(){

  return m_owner;

}

Location: XPathContext.java

Content: 

public final int getPredicatePos(){

  return m_predicatePos.peek();

}

Location: XPathContext.java

Content: 

/** 

 * Get the current predicate root.

 */

public final int getPredicateRoot(){

  return m_predicateRoots.peepOrNull();

}

Location: XPathContext.java

Content: 

/** 

 * Get primary XMLReader associated with this execution context.

 * @return The reader of the primary source tree.

 */

public final XMLReader getPrimaryReader(){

  return m_primaryReader;

}

Location: XPathContext.java

Content: 

/** 

 * Get a DTM to be used as a container for a dynamic Result Tree Fragment. This will always be an instance of (derived from? equivalent to?) SAX2DTM, since each RTF is constructed by temporarily redirecting our SAX output to it. It may be a single DTM containing for multiple fragments, if the implementation supports that.

 * @return a non-null DTM reference.

 */

public DTM getRTFDTM(){

  SAX2RTFDTM rtfdtm;

  if (m_rtfdtm_stack == null) {

    m_rtfdtm_stack=new Vector();

    rtfdtm=(SAX2RTFDTM)m_dtmManager.getDTM(null,true,null,false,false);

    m_rtfdtm_stack.addElement(rtfdtm);

    ++m_which_rtfdtm;

  }

 else   if (m_which_rtfdtm < 0) {

    rtfdtm=(SAX2RTFDTM)m_rtfdtm_stack.elementAt(++m_which_rtfdtm);

  }

 else {

    rtfdtm=(SAX2RTFDTM)m_rtfdtm_stack.elementAt(m_which_rtfdtm);

    if (rtfdtm.isTreeIncomplete()) {

      if (++m_which_rtfdtm < m_rtfdtm_stack.size())       rtfdtm=(SAX2RTFDTM)m_rtfdtm_stack.elementAt(m_which_rtfdtm);

 else {

        rtfdtm=(SAX2RTFDTM)m_dtmManager.getDTM(null,true,null,false,false);

        m_rtfdtm_stack.addElement(rtfdtm);

      }

    }

  }

  return rtfdtm;

}

Location: XPathContext.java

Content: 

/** 

 * Get the current locater in the stylesheet.

 * @return The location within the stylesheet, or null if not known.

 */

public SourceLocator getSAXLocator(){

  return (SourceLocator)m_saxLocations.peek();

}

Location: XPathContext.java

Content: 

/** 

 * Get the SourceTreeManager associated with this execution context.

 * @return the SourceTreeManager associated with this execution context.

 */

public final SourceTreeManager getSourceTreeManager(){

  return m_sourceTreeManager;

}

Location: XPathContext.java

Content: 

/** 

 * Get the current axes iterator, or return null if none.

 * @return the sub-context node list.

 * @xsl.usage internal

 */

public SubContextList getSubContextList(){

  return m_axesIteratorStack.isEmpty() ? null : (SubContextList)m_axesIteratorStack.peek();

}

Location: XPathContext.java

Content: 

/** 

 * Get the URIResolver associated with this execution context.

 * @return a URI resolver, which may be null.

 */

public final URIResolver getURIResolver(){

  return m_uriResolver;

}

Location: XPathContext.java

Content: 

/** 

 * Get the variable stack, which is in charge of variables and parameters.

 * @return the variable stack, which should not be null.

 */

public final VariableStack getVarStack(){

  return m_variableStacks;

}

Location: XPathContext.java

Content: 

/** 

 * Return the state of the secure processing feature

 */

public boolean isSecureProcessing(){

  return m_isSecureProcessing;

}

Location: XPathContext.java

Content: 

/** 

 * Pop the current context node list.

 * @xsl.usage internal

 */

public final void popContextNodeList(){

  if (m_contextNodeLists.isEmpty())   System.err.println("Warning: popContextNodeList when stack is empty!");

 else   m_contextNodeLists.pop();

}

Location: XPathContext.java

Content: 

/** 

 * Pop the current node that is the expression's context (i.e. for current() support).

 */

public final void popCurrentExpressionNode(){

  m_currentExpressionNodes.quickPop(1);

}

Location: XPathContext.java

Content: 

/** 

 * Pop the current context node.

 */

public final void popCurrentNode(){

  m_currentNodes.quickPop(1);

}

Location: XPathContext.java

Content: 

/** 

 * Set the current context node.

 */

public final void popCurrentNodeAndExpression(){

  m_currentNodes.quickPop(1);

  m_currentExpressionNodes.quickPop(1);

}

Location: XPathContext.java

Content: 

/** 

 * Pop the current context node, expression node, and prefix resolver.

 */

public final void popExpressionState(){

  m_currentNodes.quickPop(1);

  m_currentExpressionNodes.quickPop(1);

  m_prefixResolvers.pop();

}

Location: XPathContext.java

Content: 

/** 

 * Pop the current location path iterator root.

 */

public final void popIteratorRoot(){

  m_iteratorRoots.popQuick();

}

Location: XPathContext.java

Content: 

/** 

 * Pop the current namespace context for the xpath.

 */

public final void popNamespaceContext(){

  m_prefixResolvers.pop();

}

Location: XPathContext.java

Content: 

public final void popPredicatePos(){

  m_predicatePos.pop();

}

Location: XPathContext.java

Content: 

/** 

 * Pop the current predicate root.

 */

public final void popPredicateRoot(){

  m_predicateRoots.popQuick();

}

Location: XPathContext.java

Content: 

/** 

 * Pop the RTFDTM's context mark. This discards any RTFs added after the last mark was set. If there is no RTF DTM, there's nothing to pop so this becomes a no-op. If pushes were issued before this was called, we count on the fact that popRewindMark is defined such that overpopping just resets to empty. Complicating factor: We need to handle the case of popping back to a previous RTF DTM, if one of the weird produce-an-RTF-to-build-an-RTF cases arose. Basically: If pop says this DTM is now empty, then return to the previous if one exists, in whatever state we left it in. UGLY, but hopefully the situation which forces us to consider this will arise exceedingly rarely.

 */

public void popRTFContext(){

  int previous=m_last_pushed_rtfdtm.pop();

  if (null == m_rtfdtm_stack)   return;

  if (m_which_rtfdtm == previous) {

    if (previous >= 0) {

      boolean isEmpty=((SAX2RTFDTM)(m_rtfdtm_stack.elementAt(previous))).popRewindMark();

    }

  }

 else   while (m_which_rtfdtm != previous) {

    boolean isEmpty=((SAX2RTFDTM)(m_rtfdtm_stack.elementAt(m_which_rtfdtm))).popRewindMark();

    --m_which_rtfdtm;

  }

}

Location: XPathContext.java

Content: 

/** 

 * Pop the current locater.

 */

public void popSAXLocator(){

  m_saxLocations.pop();

}

Location: XPathContext.java

Content: 

/** 

 * Pop the last pushed axes iterator.

 * @xsl.usage internal

 */

public final void popSubContextList(){

  m_axesIteratorStack.pop();

}

Location: XPathContext.java

Content: 

/** 

 * Set the current context node list.

 * @param nl the<a href="http://www.w3.org/TR/xslt#dt-current-node-list">current node list</a>, also refered to here as a <term>context node list</term>.

 * @xsl.usage internal

 */

public final void pushContextNodeList(DTMIterator nl){

  m_contextNodeLists.push(nl);

}

Location: XPathContext.java

Content: 

/** 

 * Set the current node that is the expression's context (i.e. for current() support).

 * @param n The sub-expression node to be current.

 */

public final void pushCurrentExpressionNode(int n){

  m_currentExpressionNodes.push(n);

}

Location: XPathContext.java

Content: 

/** 

 * Set the current context node and expression node.

 * @param cn the <a href="http://www.w3.org/TR/xslt#dt-current-node">currentnode</a>.

 * @param en the sub-expression context node.

 */

public final void pushCurrentNodeAndExpression(int cn,int en){

  m_currentNodes.push(cn);

  m_currentExpressionNodes.push(cn);

}

Location: XPathContext.java

Content: 

/** 

 * Set the current context node.

 * @param n the <a href="http://www.w3.org/TR/xslt#dt-current-node">currentnode</a>.

 */

public final void pushCurrentNode(int n){

  m_currentNodes.push(n);

}

Location: XPathContext.java

Content: 

/** 

 * Push the current context node, expression node, and prefix resolver.

 * @param cn the <a href="http://www.w3.org/TR/xslt#dt-current-node">currentnode</a>.

 * @param en the sub-expression context node.

 * @param nc the namespace context (prefix resolver.

 */

public final void pushExpressionState(int cn,int en,PrefixResolver nc){

  m_currentNodes.push(cn);

  m_currentExpressionNodes.push(cn);

  m_prefixResolvers.push(nc);

}

Location: XPathContext.java

Content: 

/** 

 * Set the current location path iterator root.

 */

public final void pushIteratorRoot(int n){

  m_iteratorRoots.push(n);

}

Location: XPathContext.java

Content: 

/** 

 * Just increment the namespace contest stack, so that setNamespaceContext can be used on the slot.

 */

public final void pushNamespaceContextNull(){

  m_prefixResolvers.push(null);

}

Location: XPathContext.java

Content: 

/** 

 * Push a current namespace context for the xpath.

 * @param pr the prefix resolver to be used for resolving prefixes to namespaceURLs.

 */

public final void pushNamespaceContext(PrefixResolver pr){

  m_prefixResolvers.push(pr);

}

Location: XPathContext.java

Content: 

public final void pushPredicatePos(int n){

  m_predicatePos.push(n);

}

Location: XPathContext.java

Content: 

/** 

 * Set the current predicate root.

 */

public final void pushPredicateRoot(int n){

  m_predicateRoots.push(n);

}

Location: XPathContext.java

Content: 

/** 

 * Push the RTFDTM's context mark, to allows discarding RTFs added after this point. (If it doesn't exist we don't push, since we might still be able to get away with not creating it. That requires that excessive pops be harmless.)

 */

public void pushRTFContext(){

  m_last_pushed_rtfdtm.push(m_which_rtfdtm);

  if (null != m_rtfdtm_stack)   ((SAX2RTFDTM)(getRTFDTM())).pushRewindMark();

}

Location: XPathContext.java

Content: 

/** 

 * Push a slot on the locations stack so that setSAXLocator can be repeatedly called.

 */

public void pushSAXLocatorNull(){

  m_saxLocations.push(null);

}

Location: XPathContext.java

Content: 

/** 

 * Set the current locater in the stylesheet.

 * @param location The location within the stylesheet.

 */

public void pushSAXLocator(SourceLocator location){

  m_saxLocations.push(location);

}

Location: XPathContext.java

Content: 

/** 

 * Push a TreeWalker on the stack.

 * @param iter A sub-context AxesWalker.

 * @xsl.usage internal

 */

public final void pushSubContextList(SubContextList iter){

  m_axesIteratorStack.push(iter);

}

Location: XPathContext.java

Content: 

/** 

 * Cleans DTMXRTreeFrag objects by removing references to DTM and XPathContext objects.

 */

private final void releaseDTMXRTreeFrags(){

  if (m_DTMXRTreeFrags == null) {

    return;

  }

  final Iterator iter=(m_DTMXRTreeFrags.values()).iterator();

  while (iter.hasNext()) {

    DTMXRTreeFrag frag=(DTMXRTreeFrag)iter.next();

    frag.destruct();

    iter.remove();

  }

  m_DTMXRTreeFrags=null;

}

Location: XPathContext.java

Content: 

/** 

 * Release a DTM either to a lru pool, or completely remove reference. DTMs without system IDs are always hard deleted. State: experimental.

 * @param dtm              The DTM to be released.

 * @param shouldHardDelete True if the DTM should be removed no matter what.

 * @return true if the DTM was removed, false if it was put back in a lru pool.

 */

public boolean release(DTM dtm,boolean shouldHardDelete){

  if (m_rtfdtm_stack != null && m_rtfdtm_stack.contains(dtm)) {

    return false;

  }

  return m_dtmManager.release(dtm,shouldHardDelete);

}

Location: XPathContext.java

Content: 

public void setAxesIteratorStackStacks(Stack s){

  m_axesIteratorStack=s;

}

Location: XPathContext.java

Content: 

public void setContextNodeListsStack(Stack s){

  m_contextNodeLists=s;

}

Location: XPathContext.java

Content: 

public void setCurrentExpressionNodeStack(IntStack nv){

  m_currentExpressionNodes=nv;

}

Location: XPathContext.java

Content: 

public void setCurrentNodeStack(IntStack nv){

  m_currentNodes=nv;

}

Location: XPathContext.java

Content: 

/** 

 * Set the ErrorListener where errors and warnings are to be reported.

 * @param listener A non-null ErrorListener reference.

 */

public void setErrorListener(ErrorListener listener) throws IllegalArgumentException {

  if (listener == null)   throw new IllegalArgumentException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NULL_ERROR_HANDLER,null));

  m_errorListener=listener;

}

Location: XPathContext.java

Content: 

/** 

 * Set primary XMLReader associated with this execution context.

 * @param reader The reader of the primary source tree.

 */

public void setPrimaryReader(XMLReader reader){

  m_primaryReader=reader;

}

Location: XPathContext.java

Content: 

/** 

 * Set the current locater in the stylesheet.

 * @param location The location within the stylesheet.

 */

public void setSAXLocator(SourceLocator location){

  m_saxLocations.setTop(location);

}

Location: XPathContext.java

Content: 

/** 

 * Set the state of the secure processing feature

 */

public void setSecureProcessing(boolean flag){

  m_isSecureProcessing=flag;

}

Location: XPathContext.java

Content: 

/** 

 * Set the SourceTreeManager associated with this execution context.

 * @param mgr the SourceTreeManager to be associated with this executioncontext.

 */

public void setSourceTreeManager(SourceTreeManager mgr){

  m_sourceTreeManager=mgr;

}

Location: XPathContext.java

Content: 

/** 

 * Set the URIResolver associated with this execution context.

 * @param resolver the URIResolver to be associated with this execution context,may be null to clear an already set resolver.

 */

public void setURIResolver(URIResolver resolver){

  m_uriResolver=resolver;

}

Location: XPathContext.java

Content: 

/** 

 * Get the variable stack, which is in charge of variables and parameters.

 * @param varStack non-null reference to the variable stack.

 */

public final void setVarStack(VariableStack varStack){

  m_variableStacks=varStack;

}

Location: XPathContext.java

Content: 

/** 

 * Create an XPathContext instance. This is equivalent to calling the {@link #XPathContext(boolean)} constructor with the value <code>true</code>.

 */

public XPathContext(){

  this(true);

}

Location: XPathContext.java

Content: 

/** 

 * Create an XPathContext instance.

 * @param recursiveVarContext A <code>boolean</code> value indicating whetherthe XPath context needs to support pushing of scopes for variable resolution

 */

public XPathContext(boolean recursiveVarContext){

  m_prefixResolvers.push(null);

  m_currentNodes.push(DTM.NULL);

  m_currentExpressionNodes.push(DTM.NULL);

  m_saxLocations.push(null);

  m_variableStacks=recursiveVarContext ? new VariableStack() : new VariableStack(1);

}

Location: XPathContext.java

Content: 

/** 

 * Create an XPathContext instance. This is equivalent to calling the constructor  {@link #XPathContext(java.lang.Object,boolean)} with the value ofthe second parameter set to <code>true</code>.

 * @param owner Value that can be retrieved via the getOwnerObject() method.

 * @see #getOwnerObject

 */

public XPathContext(Object owner){

  this(owner,true);

}

Location: XPathContext.java

Content: 

/** 

 * Create an XPathContext instance.

 * @param owner Value that can be retrieved via the getOwnerObject() method.

 * @see #getOwnerObject

 * @param recursiveVarContext A <code>boolean</code> value indicating whetherthe XPath context needs to support pushing of scopes for variable resolution

 */

public XPathContext(Object owner,boolean recursiveVarContext){

  this(recursiveVarContext);

  m_owner=owner;

  try {

    m_ownerGetErrorListener=m_owner.getClass().getMethod("getErrorListener",new Class[]{});

  }

 catch (  NoSuchMethodException nsme) {

  }

}

