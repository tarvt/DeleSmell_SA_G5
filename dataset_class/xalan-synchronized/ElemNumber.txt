Location: ElemNumber.java

Content: 

/** 

 * Given a 'from' pattern (ala xsl:number), a match pattern and a context, find the first ancestor that matches the pattern (including the context handed in).

 * @param xctxt             The XPath runtime state for this.

 * @param fromMatchPattern  The ancestor must match this pattern.

 * @param countMatchPattern The ancestor must also match this pattern.

 * @param context           The node that "." expresses.

 * @param namespaceContext  The context in which namespaces in the queries aresupposed to be expanded.

 * @return the first ancestor that matches the given pattern

 * @throws javax.xml.transform.TransformerException

 */

int findAncestor(XPathContext xctxt,XPath fromMatchPattern,XPath countMatchPattern,int context,ElemNumber namespaceContext) throws javax.xml.transform.TransformerException {

  DTM dtm=xctxt.getDTM(context);

  while (DTM.NULL != context) {

    if (null != fromMatchPattern) {

      if (fromMatchPattern.getMatchScore(xctxt,context) != XPath.MATCH_SCORE_NONE) {

        break;

      }

    }

    if (null != countMatchPattern) {

      if (countMatchPattern.getMatchScore(xctxt,context) != XPath.MATCH_SCORE_NONE) {

        break;

      }

    }

    context=dtm.getParent(context);

  }

  return context;

}

Location: ElemNumber.java

Content: 

/** 

 * Given a 'from' pattern (ala xsl:number), a match pattern and a context, find the first ancestor that matches the pattern (including the context handed in).

 * @param xctxt             The XPath runtime state for this.

 * @param fromMatchPattern  The ancestor must match this pattern.

 * @param countMatchPattern The ancestor must also match this pattern.

 * @param context           The node that "." expresses.

 * @param namespaceContext  The context in which namespaces in the queries aresupposed to be expanded.

 * @return the first preceding, ancestor or self node that matches the givenpattern

 * @throws javax.xml.transform.TransformerException

 */

private int findPrecedingOrAncestorOrSelf(XPathContext xctxt,XPath fromMatchPattern,XPath countMatchPattern,int context,ElemNumber namespaceContext) throws javax.xml.transform.TransformerException {

  DTM dtm=xctxt.getDTM(context);

  while (DTM.NULL != context) {

    if (null != fromMatchPattern) {

      if (fromMatchPattern.getMatchScore(xctxt,context) != XPath.MATCH_SCORE_NONE) {

        context=DTM.NULL;

        break;

      }

    }

    if (null != countMatchPattern) {

      if (countMatchPattern.getMatchScore(xctxt,context) != XPath.MATCH_SCORE_NONE) {

        break;

      }

    }

    int prevSibling=dtm.getPreviousSibling(context);

    if (DTM.NULL == prevSibling) {

      context=dtm.getParent(context);

    }

 else {

      context=dtm.getLastChild(prevSibling);

      if (context == DTM.NULL)       context=prevSibling;

    }

  }

  return context;

}

Location: ElemNumber.java

Content: 

/** 

 * Format a vector of numbers into a formatted string.

 * @param transformer non-null reference to the the current transform-timestate.

 * @param list        Array of one or more long integer numbers.

 * @param contextNode The node that "." expresses.

 * @return String that represents list according to %conversion-atts;attributes. TODO: Optimize formatNumberList so that it caches the last count and reuses that info for the next count.

 * @throws TransformerException

 */

String formatNumberList(TransformerImpl transformer,long[] list,int contextNode) throws TransformerException {

  String numStr;

  FastStringBuffer formattedNumber=StringBufferPool.get();

  try {

    int nNumbers=list.length, numberWidth=1;

    char numberType='1';

    String formatToken, lastSepString=null, formatTokenString=null;

    String lastSep=".";

    boolean isFirstToken=true;

    String formatValue=(null != m_format_avt) ? m_format_avt.evaluate(transformer.getXPathContext(),contextNode,this) : null;

    if (null == formatValue)     formatValue="1";

    NumberFormatStringTokenizer formatTokenizer=new NumberFormatStringTokenizer(formatValue);

    for (int i=0; i < nNumbers; i++) {

      if (formatTokenizer.hasMoreTokens()) {

        formatToken=formatTokenizer.nextToken();

        if (Character.isLetterOrDigit(formatToken.charAt(formatToken.length() - 1))) {

          numberWidth=formatToken.length();

          numberType=formatToken.charAt(numberWidth - 1);

        }

 else         if (formatTokenizer.isLetterOrDigitAhead()) {

          final StringBuffer formatTokenStringBuffer=new StringBuffer(formatToken);

          while (formatTokenizer.nextIsSep()) {

            formatToken=formatTokenizer.nextToken();

            formatTokenStringBuffer.append(formatToken);

          }

          formatTokenString=formatTokenStringBuffer.toString();

          if (!isFirstToken)           lastSep=formatTokenString;

          formatToken=formatTokenizer.nextToken();

          numberWidth=formatToken.length();

          numberType=formatToken.charAt(numberWidth - 1);

        }

 else {

          lastSepString=formatToken;

          while (formatTokenizer.hasMoreTokens()) {

            formatToken=formatTokenizer.nextToken();

            lastSepString+=formatToken;

          }

        }

      }

      if (null != formatTokenString && isFirstToken) {

        formattedNumber.append(formatTokenString);

      }

 else       if (null != lastSep && !isFirstToken)       formattedNumber.append(lastSep);

      getFormattedNumber(transformer,contextNode,numberType,numberWidth,list[i],formattedNumber);

      isFirstToken=false;

    }

    while (formatTokenizer.isLetterOrDigitAhead()) {

      formatTokenizer.nextToken();

    }

    if (lastSepString != null)     formattedNumber.append(lastSepString);

    while (formatTokenizer.hasMoreTokens()) {

      formatToken=formatTokenizer.nextToken();

      formattedNumber.append(formatToken);

    }

    numStr=formattedNumber.toString();

  }

  finally {

    StringBufferPool.free(formattedNumber);

  }

  return numStr;

}

Location: ElemNumber.java

Content: 

/** 

 * Get the "count" attribute. The count attribute is a pattern that specifies what nodes should be counted at those levels. If count attribute is not specified, then it defaults to the pattern that matches any node with the same node type as the current node and, if the current node has an expanded-name, with the same expanded-name as the current node.

 * @return Value of "count" attribute.

 */

public XPath getCount(){

  return m_countMatchPattern;

}

Location: ElemNumber.java

Content: 

/** 

 * Get the count match pattern, or a default value.

 * @param support     The XPath runtime state for this.

 * @param contextNode The node that "." expresses.

 * @return the count match pattern, or a default value.

 * @throws javax.xml.transform.TransformerException

 */

XPath getCountMatchPattern(XPathContext support,int contextNode) throws javax.xml.transform.TransformerException {

  XPath countMatchPattern=m_countMatchPattern;

  DTM dtm=support.getDTM(contextNode);

  if (null == countMatchPattern) {

switch (dtm.getNodeType(contextNode)) {

case DTM.ELEMENT_NODE:

      MyPrefixResolver resolver;

    if (dtm.getNamespaceURI(contextNode) == null) {

      resolver=new MyPrefixResolver(dtm.getNode(contextNode),dtm,contextNode,false);

    }

 else {

      resolver=new MyPrefixResolver(dtm.getNode(contextNode),dtm,contextNode,true);

    }

  countMatchPattern=new XPath(dtm.getNodeName(contextNode),this,resolver,XPath.MATCH,support.getErrorListener());

break;

case DTM.ATTRIBUTE_NODE:

countMatchPattern=new XPath("@" + dtm.getNodeName(contextNode),this,this,XPath.MATCH,support.getErrorListener());

break;

case DTM.CDATA_SECTION_NODE:

case DTM.TEXT_NODE:

countMatchPattern=new XPath("text()",this,this,XPath.MATCH,support.getErrorListener());

break;

case DTM.COMMENT_NODE:

countMatchPattern=new XPath("comment()",this,this,XPath.MATCH,support.getErrorListener());

break;

case DTM.DOCUMENT_NODE:

countMatchPattern=new XPath("/",this,this,XPath.MATCH,support.getErrorListener());

break;

case DTM.PROCESSING_INSTRUCTION_NODE:

countMatchPattern=new XPath("pi(" + dtm.getNodeName(contextNode) + ")",this,this,XPath.MATCH,support.getErrorListener());

break;

default :

countMatchPattern=null;

}

}

return countMatchPattern;

}

Location: ElemNumber.java

Content: 

/** 

 * Given an XML source node, get the count according to the parameters set up by the xsl:number attributes.

 * @param transformer non-null reference to the the current transform-timestate.

 * @param sourceNode  The source node being counted.

 * @return The count of nodes

 * @throws TransformerException

 */

String getCountString(TransformerImpl transformer,int sourceNode) throws TransformerException {

  long[] list=null;

  XPathContext xctxt=transformer.getXPathContext();

  CountersTable ctable=transformer.getCountersTable();

  if (null != m_valueExpr) {

    XObject countObj=m_valueExpr.execute(xctxt,sourceNode,this);

    double d_count=java.lang.Math.floor(countObj.num() + 0.5);

    if (Double.isNaN(d_count))     return "NaN";

 else     if (d_count < 0 && Double.isInfinite(d_count))     return "-Infinity";

 else     if (Double.isInfinite(d_count))     return "Infinity";

 else     if (d_count == 0)     return "0";

 else {

      long count=(long)d_count;

      list=new long[1];

      list[0]=count;

    }

  }

 else {

    if (Constants.NUMBERLEVEL_ANY == m_level) {

      list=new long[1];

      list[0]=ctable.countNode(xctxt,this,sourceNode);

    }

 else {

      NodeVector ancestors=getMatchingAncestors(xctxt,sourceNode,Constants.NUMBERLEVEL_SINGLE == m_level);

      int lastIndex=ancestors.size() - 1;

      if (lastIndex >= 0) {

        list=new long[lastIndex + 1];

        for (int i=lastIndex; i >= 0; i--) {

          int target=ancestors.elementAt(i);

          list[lastIndex - i]=ctable.countNode(xctxt,this,target);

        }

      }

    }

  }

  return (null != list) ? formatNumberList(transformer,list,sourceNode) : "";

}

Location: ElemNumber.java

Content: 

/** 

 * Get the "format" attribute. The "format" attribute is used to control conversion of a list of numbers into a string.

 * @see <a href="http://www.w3.org/TR/xslt#convert">convert in XSLT

	 *      Specification</a>

 * @return Value of "format" attribute.

 */

public AVT getFormat(){

  return m_format_avt;

}

Location: ElemNumber.java

Content: 

/** 

 * Format the given number and store it in the given buffer

 * @param transformer     non-null reference to the the current transform-timestate.

 * @param contextNode     The node that "." expresses.

 * @param numberType      Type to format to

 * @param numberWidth     Maximum length of formatted number

 * @param listElement     Number to format

 * @param formattedNumber Buffer to store formatted number

 * @throws javax.xml.transform.TransformerException

 */

private void getFormattedNumber(TransformerImpl transformer,int contextNode,char numberType,int numberWidth,long listElement,FastStringBuffer formattedNumber) throws javax.xml.transform.TransformerException {

  String letterVal=(m_lettervalue_avt != null) ? m_lettervalue_avt.evaluate(transformer.getXPathContext(),contextNode,this) : null;

  CharArrayWrapper alphaCountTable=null;

  XResourceBundle thisBundle=null;

switch (numberType) {

case 'A':

    if (null == m_alphaCountTable) {

      thisBundle=(XResourceBundle)XResourceBundle.loadResourceBundle(org.apache.xml.utils.res.XResourceBundle.LANG_BUNDLE_NAME,getLocale(transformer,contextNode));

      m_alphaCountTable=(CharArrayWrapper)thisBundle.getObject(org.apache.xml.utils.res.XResourceBundle.LANG_ALPHABET);

    }

  int2alphaCount(listElement,m_alphaCountTable,formattedNumber);

break;

case 'a':

if (null == m_alphaCountTable) {

thisBundle=(XResourceBundle)XResourceBundle.loadResourceBundle(org.apache.xml.utils.res.XResourceBundle.LANG_BUNDLE_NAME,getLocale(transformer,contextNode));

m_alphaCountTable=(CharArrayWrapper)thisBundle.getObject(org.apache.xml.utils.res.XResourceBundle.LANG_ALPHABET);

}

FastStringBuffer stringBuf=StringBufferPool.get();

try {

int2alphaCount(listElement,m_alphaCountTable,stringBuf);

formattedNumber.append(stringBuf.toString().toLowerCase(getLocale(transformer,contextNode)));

}

  finally {

StringBufferPool.free(stringBuf);

}

break;

case 'I':

formattedNumber.append(long2roman(listElement,true));

break;

case 'i':

formattedNumber.append(long2roman(listElement,true).toLowerCase(getLocale(transformer,contextNode)));

break;

case 0x3042:

{

thisBundle=(XResourceBundle)XResourceBundle.loadResourceBundle(org.apache.xml.utils.res.XResourceBundle.LANG_BUNDLE_NAME,new Locale("ja","JP","HA"));

if (letterVal != null && letterVal.equals(Constants.ATTRVAL_TRADITIONAL)) formattedNumber.append(tradAlphaCount(listElement,thisBundle));

 else formattedNumber.append(int2singlealphaCount(listElement,(CharArrayWrapper)thisBundle.getObject(org.apache.xml.utils.res.XResourceBundle.LANG_ALPHABET)));

break;

}

case 0x3044:

{

thisBundle=(XResourceBundle)XResourceBundle.loadResourceBundle(org.apache.xml.utils.res.XResourceBundle.LANG_BUNDLE_NAME,new Locale("ja","JP","HI"));

if ((letterVal != null) && letterVal.equals(Constants.ATTRVAL_TRADITIONAL)) formattedNumber.append(tradAlphaCount(listElement,thisBundle));

 else formattedNumber.append(int2singlealphaCount(listElement,(CharArrayWrapper)thisBundle.getObject(org.apache.xml.utils.res.XResourceBundle.LANG_ALPHABET)));

break;

}

case 0x30A2:

{

thisBundle=(XResourceBundle)XResourceBundle.loadResourceBundle(org.apache.xml.utils.res.XResourceBundle.LANG_BUNDLE_NAME,new Locale("ja","JP","A"));

if (letterVal != null && letterVal.equals(Constants.ATTRVAL_TRADITIONAL)) formattedNumber.append(tradAlphaCount(listElement,thisBundle));

 else formattedNumber.append(int2singlealphaCount(listElement,(CharArrayWrapper)thisBundle.getObject(org.apache.xml.utils.res.XResourceBundle.LANG_ALPHABET)));

break;

}

case 0x30A4:

{

thisBundle=(XResourceBundle)XResourceBundle.loadResourceBundle(org.apache.xml.utils.res.XResourceBundle.LANG_BUNDLE_NAME,new Locale("ja","JP","I"));

if (letterVal != null && letterVal.equals(Constants.ATTRVAL_TRADITIONAL)) formattedNumber.append(tradAlphaCount(listElement,thisBundle));

 else formattedNumber.append(int2singlealphaCount(listElement,(CharArrayWrapper)thisBundle.getObject(org.apache.xml.utils.res.XResourceBundle.LANG_ALPHABET)));

break;

}

case 0x4E00:

{

thisBundle=(XResourceBundle)XResourceBundle.loadResourceBundle(org.apache.xml.utils.res.XResourceBundle.LANG_BUNDLE_NAME,new Locale("zh","CN"));

if (letterVal != null && letterVal.equals(Constants.ATTRVAL_TRADITIONAL)) {

formattedNumber.append(tradAlphaCount(listElement,thisBundle));

}

 else int2alphaCount(listElement,(CharArrayWrapper)thisBundle.getObject(org.apache.xml.utils.res.XResourceBundle.LANG_ALPHABET),formattedNumber);

break;

}

case 0x58F9:

{

thisBundle=(XResourceBundle)XResourceBundle.loadResourceBundle(org.apache.xml.utils.res.XResourceBundle.LANG_BUNDLE_NAME,new Locale("zh","TW"));

if (letterVal != null && letterVal.equals(Constants.ATTRVAL_TRADITIONAL)) formattedNumber.append(tradAlphaCount(listElement,thisBundle));

 else int2alphaCount(listElement,(CharArrayWrapper)thisBundle.getObject(org.apache.xml.utils.res.XResourceBundle.LANG_ALPHABET),formattedNumber);

break;

}

case 0x0E51:

{

thisBundle=(XResourceBundle)XResourceBundle.loadResourceBundle(org.apache.xml.utils.res.XResourceBundle.LANG_BUNDLE_NAME,new Locale("th",""));

if (letterVal != null && letterVal.equals(Constants.ATTRVAL_TRADITIONAL)) formattedNumber.append(tradAlphaCount(listElement,thisBundle));

 else int2alphaCount(listElement,(CharArrayWrapper)thisBundle.getObject(org.apache.xml.utils.res.XResourceBundle.LANG_ALPHABET),formattedNumber);

break;

}

case 0x05D0:

{

thisBundle=(XResourceBundle)XResourceBundle.loadResourceBundle(org.apache.xml.utils.res.XResourceBundle.LANG_BUNDLE_NAME,new Locale("he",""));

if (letterVal != null && letterVal.equals(Constants.ATTRVAL_TRADITIONAL)) formattedNumber.append(tradAlphaCount(listElement,thisBundle));

 else int2alphaCount(listElement,(CharArrayWrapper)thisBundle.getObject(org.apache.xml.utils.res.XResourceBundle.LANG_ALPHABET),formattedNumber);

break;

}

case 0x10D0:

{

thisBundle=(XResourceBundle)XResourceBundle.loadResourceBundle(org.apache.xml.utils.res.XResourceBundle.LANG_BUNDLE_NAME,new Locale("ka",""));

if (letterVal != null && letterVal.equals(Constants.ATTRVAL_TRADITIONAL)) formattedNumber.append(tradAlphaCount(listElement,thisBundle));

 else int2alphaCount(listElement,(CharArrayWrapper)thisBundle.getObject(org.apache.xml.utils.res.XResourceBundle.LANG_ALPHABET),formattedNumber);

break;

}

case 0x03B1:

{

thisBundle=(XResourceBundle)XResourceBundle.loadResourceBundle(org.apache.xml.utils.res.XResourceBundle.LANG_BUNDLE_NAME,new Locale("el",""));

if (letterVal != null && letterVal.equals(Constants.ATTRVAL_TRADITIONAL)) formattedNumber.append(tradAlphaCount(listElement,thisBundle));

 else int2alphaCount(listElement,(CharArrayWrapper)thisBundle.getObject(org.apache.xml.utils.res.XResourceBundle.LANG_ALPHABET),formattedNumber);

break;

}

case 0x0430:

{

thisBundle=(XResourceBundle)XResourceBundle.loadResourceBundle(org.apache.xml.utils.res.XResourceBundle.LANG_BUNDLE_NAME,new Locale("cy",""));

if (letterVal != null && letterVal.equals(Constants.ATTRVAL_TRADITIONAL)) formattedNumber.append(tradAlphaCount(listElement,thisBundle));

 else int2alphaCount(listElement,(CharArrayWrapper)thisBundle.getObject(org.apache.xml.utils.res.XResourceBundle.LANG_ALPHABET),formattedNumber);

break;

}

default :

DecimalFormat formatter=getNumberFormatter(transformer,contextNode);

String padString=formatter == null ? String.valueOf(0) : formatter.format(0);

String numString=formatter == null ? String.valueOf(listElement) : formatter.format(listElement);

int nPadding=numberWidth - numString.length();

for (int k=0; k < nPadding; k++) {

formattedNumber.append(padString);

}

formattedNumber.append(numString);

}

}

Location: ElemNumber.java

Content: 

/** 

 * Get the "from" attribute. For level="single" or level="multiple": Only ancestors that are searched are those that are descendants of the nearest ancestor that matches the from pattern. For level="any: Only nodes after the first node before the current node that match the from pattern are considered.

 * @return Value of "from" attribute.

 */

public XPath getFrom(){

  return m_fromMatchPattern;

}

Location: ElemNumber.java

Content: 

/** 

 * Get the "grouping-size" attribute. The optional grouping-size specifies the size (normally 3) of the grouping.

 * @see <a href="http://www.w3.org/TR/xslt#convert">convert in XSLT

	 *      Specification</a>

 * @return Value of "grouping-size" attribute.

 */

public AVT getGroupingSize(){

  return m_groupingSize_avt;

}

Location: ElemNumber.java

Content: 

/** 

 * Get the "letter-value" attribute. The letter-value attribute disambiguates between numbering sequences that use letters.

 * @see <a href="http://www.w3.org/TR/xslt#convert">convert in XSLT

	 *      Specification</a>

 * @return Value to set for "letter-value" attribute.

 */

public AVT getLetterValue(){

  return m_lettervalue_avt;

}

Location: ElemNumber.java

Content: 

/** 

 * Get the "level" attribute. The level attribute specifies what levels of the source tree should be considered; it has the values single, multiple or any. The default is single.

 * @return Value of "level" attribute.

 */

public int getLevel(){

  return m_level;

}

Location: ElemNumber.java

Content: 

/** 

 * Get the locale we should be using.

 * @param transformer non-null reference to the the current transform-timestate.

 * @param contextNode The node that "." expresses.

 * @return The locale to use. May be specified by "lang" attribute, but if not,use default locale on the system.

 * @throws TransformerException

 */

Locale getLocale(TransformerImpl transformer,int contextNode) throws TransformerException {

  Locale locale=null;

  if (null != m_lang_avt) {

    XPathContext xctxt=transformer.getXPathContext();

    String langValue=m_lang_avt.evaluate(xctxt,contextNode,this);

    if (null != langValue) {

      locale=new Locale(langValue.toUpperCase(),"");

      if (null == locale) {

        transformer.getMsgMgr().warn(this,null,xctxt.getDTM(contextNode).getNode(contextNode),XSLTErrorResources.WG_LOCALE_NOT_FOUND,new Object[]{langValue});

        locale=Locale.getDefault();

      }

    }

  }

 else {

    locale=Locale.getDefault();

  }

  return locale;

}

Location: ElemNumber.java

Content: 

/** 

 * Get the ancestors, up to the root, that match the pattern.

 * @param xctxt            The XPath runtime state for this.

 * @param node             Count this node and it's ancestors.

 * @param stopAtFirstFound Flag indicating to stop after the first node is found(difference between level = single or multiple)

 * @return The number of ancestors that match the pattern.

 * @throws javax.xml.transform.TransformerException

 */

NodeVector getMatchingAncestors(XPathContext xctxt,int node,boolean stopAtFirstFound) throws javax.xml.transform.TransformerException {

  NodeSetDTM ancestors=new NodeSetDTM(xctxt.getDTMManager());

  XPath countMatchPattern=getCountMatchPattern(xctxt,node);

  DTM dtm=xctxt.getDTM(node);

  while (DTM.NULL != node) {

    if ((null != m_fromMatchPattern) && (m_fromMatchPattern.getMatchScore(xctxt,node) != XPath.MATCH_SCORE_NONE)) {

      if (!stopAtFirstFound)       break;

    }

    if (null == countMatchPattern)     System.out.println("Programmers error! countMatchPattern should never be null!");

    if (countMatchPattern.getMatchScore(xctxt,node) != XPath.MATCH_SCORE_NONE) {

      ancestors.addElement(node);

      if (stopAtFirstFound)       break;

    }

    node=dtm.getParent(node);

  }

  return ancestors;

}

Location: ElemNumber.java

Content: 

/** 

 * Get the number formatter to be used the format the numbers

 * @param transformer non-null reference to the the current transform-timestate.

 * @param contextNode The node that "." expresses.($objectName$) @return The number formatter to be used

 * @throws TransformerException

 */

private DecimalFormat getNumberFormatter(TransformerImpl transformer,int contextNode) throws TransformerException {

  Locale locale=(Locale)getLocale(transformer,contextNode).clone();

  DecimalFormat formatter=null;

  String digitGroupSepValue=(null != m_groupingSeparator_avt) ? m_groupingSeparator_avt.evaluate(transformer.getXPathContext(),contextNode,this) : null;

  if ((digitGroupSepValue != null) && (!m_groupingSeparator_avt.isSimple()) && (digitGroupSepValue.length() != 1)) {

    transformer.getMsgMgr().warn(this,XSLTErrorResources.WG_ILLEGAL_ATTRIBUTE_VALUE,new Object[]{Constants.ATTRNAME_NAME,m_groupingSeparator_avt.getName()});

  }

  String nDigitsPerGroupValue=(null != m_groupingSize_avt) ? m_groupingSize_avt.evaluate(transformer.getXPathContext(),contextNode,this) : null;

  if ((null != digitGroupSepValue) && (null != nDigitsPerGroupValue) && (digitGroupSepValue.length() > 0)) {

    try {

      formatter=(DecimalFormat)NumberFormat.getNumberInstance(locale);

      formatter.setGroupingSize(Integer.valueOf(nDigitsPerGroupValue).intValue());

      DecimalFormatSymbols symbols=formatter.getDecimalFormatSymbols();

      symbols.setGroupingSeparator(digitGroupSepValue.charAt(0));

      formatter.setDecimalFormatSymbols(symbols);

      formatter.setGroupingUsed(true);

    }

 catch (    NumberFormatException ex) {

      formatter.setGroupingUsed(false);

    }

  }

  return formatter;

}

Location: ElemNumber.java

Content: 

/** 

 * Get the previous node to be counted.

 * @param xctxt The XPath runtime state for this.

 * @param pos   The current node

 * @return the previous node to be counted.

 * @throws TransformerException

 */

public int getPreviousNode(XPathContext xctxt,int pos) throws TransformerException {

  XPath countMatchPattern=getCountMatchPattern(xctxt,pos);

  DTM dtm=xctxt.getDTM(pos);

  if (Constants.NUMBERLEVEL_ANY == m_level) {

    XPath fromMatchPattern=m_fromMatchPattern;

    while (DTM.NULL != pos) {

      int next=dtm.getPreviousSibling(pos);

      if (DTM.NULL == next) {

        next=dtm.getParent(pos);

        if ((DTM.NULL != next) && ((((null != fromMatchPattern) && (fromMatchPattern.getMatchScore(xctxt,next) != XPath.MATCH_SCORE_NONE))) || (dtm.getNodeType(next) == DTM.DOCUMENT_NODE))) {

          pos=DTM.NULL;

          break;

        }

      }

 else {

        int child=next;

        while (DTM.NULL != child) {

          child=dtm.getLastChild(next);

          if (DTM.NULL != child)           next=child;

        }

      }

      pos=next;

      if ((DTM.NULL != pos) && ((null == countMatchPattern) || (countMatchPattern.getMatchScore(xctxt,pos) != XPath.MATCH_SCORE_NONE))) {

        break;

      }

    }

  }

 else {

    while (DTM.NULL != pos) {

      pos=dtm.getPreviousSibling(pos);

      if ((DTM.NULL != pos) && ((null == countMatchPattern) || (countMatchPattern.getMatchScore(xctxt,pos) != XPath.MATCH_SCORE_NONE))) {

        break;

      }

    }

  }

  return pos;

}

Location: ElemNumber.java

Content: 

/** 

 * Get the target node that will be counted..

 * @param xctxt      The XPath runtime state for this.

 * @param sourceNode non-null reference to the<a href="http://www.w3.org/TR/xslt#dt-current-node">current source node</a>.

 * @return the target node that will be counted

 * @throws TransformerException

 */

public int getTargetNode(XPathContext xctxt,int sourceNode) throws TransformerException {

  int target=DTM.NULL;

  XPath countMatchPattern=getCountMatchPattern(xctxt,sourceNode);

  if (Constants.NUMBERLEVEL_ANY == m_level) {

    target=findPrecedingOrAncestorOrSelf(xctxt,m_fromMatchPattern,countMatchPattern,sourceNode,this);

  }

 else {

    target=findAncestor(xctxt,m_fromMatchPattern,countMatchPattern,sourceNode,this);

  }

  return target;

}

Location: ElemNumber.java

Content: 

/** 

 * Get a string value for zero, which is not really defined by the 1.0 spec, thought I think it might be cleared up by the erreta.

 */

String getZeroString(){

  return "" + 0;

}

Location: ElemNumber.java

Content: 

/** 

 * Convert a long integer into alphabetic counting, in other words count using the sequence A B C ... Z AA AB AC.... etc.

 * @param val       Value to convert -- must be greater than zero.

 * @param table     a table containing one character for each digit in the radix

 * @param aTable    Array of alpha characters representing numbers

 * @param stringBuf Buffer where to save the string representing alpha count ofnumber.

 * @see TransformerImpl#DecimalToRoman Note that the radix of the conversion is inferred from the size of the table.

 */

protected void int2alphaCount(long val,CharArrayWrapper aTable,FastStringBuffer stringBuf){

  int radix=aTable.getLength();

  char[] table=new char[radix];

  int i;

  for (i=0; i < radix - 1; i++) {

    table[i + 1]=aTable.getChar(i);

  }

  table[0]=aTable.getChar(i);

  char buf[]=new char[100];

  int charPos;

  charPos=buf.length - 1;

  int lookupIndex=1;

  long correction=0;

  do {

    correction=((lookupIndex == 0) || (correction != 0 && lookupIndex == radix - 1)) ? (radix - 1) : 0;

    lookupIndex=(int)(val + correction) % radix;

    val=(val / radix);

    if (lookupIndex == 0 && val == 0)     break;

    buf[charPos--]=table[lookupIndex];

  }

 while (val > 0);

  stringBuf.append(buf,charPos + 1,(buf.length - charPos - 1));

}

Location: ElemNumber.java

Content: 

/** 

 * Convert a long integer into alphabetic counting, in other words count using the sequence A B C ... Z.

 * @param val   Value to convert -- must be greater than zero.

 * @param table a table containing one character for each digit in the radix

 * @return String representing alpha count of number.

 * @see TransformerImpl#DecimalToRoman Note that the radix of the conversion is inferred from the size of the table.

 */

protected String int2singlealphaCount(long val,CharArrayWrapper table){

  int radix=table.getLength();

  if (val > radix) {

    return getZeroString();

  }

 else   return (new Character(table.getChar((int)val - 1))).toString();

}

Location: ElemNumber.java

Content: 

/** 

 * Set the "count" attribute. The count attribute is a pattern that specifies what nodes should be counted at those levels. If count attribute is not specified, then it defaults to the pattern that matches any node with the same node type as the current node and, if the current node has an expanded-name, with the same expanded-name as the current node.

 * @param v Value to set for "count" attribute.

 */

public void setCount(XPath v){

  m_countMatchPattern=v;

}

Location: ElemNumber.java

Content: 

/** 

 * Set the "format" attribute. The "format" attribute is used to control conversion of a list of numbers into a string.

 * @see <a href="http://www.w3.org/TR/xslt#convert">convert in XSLT

	 *      Specification</a>

 * @param v Value to set for "format" attribute.

 */

public void setFormat(AVT v){

  m_format_avt=v;

}

Location: ElemNumber.java

Content: 

/** 

 * Set the "from" attribute. Specifies where to count from. For level="single" or level="multiple": Only ancestors that are searched are those that are descendants of the nearest ancestor that matches the from pattern. For level="any: Only nodes after the first node before the current node that match the from pattern are considered.

 * @param v Value to set for "from" attribute.

 */

public void setFrom(XPath v){

  m_fromMatchPattern=v;

}

Location: ElemNumber.java

Content: 

/** 

 * Set the "grouping-separator" attribute. The grouping-separator attribute gives the separator used as a grouping (e.g. thousands) separator in decimal numbering sequences.

 * @see <a href="http://www.w3.org/TR/xslt#convert">convert in XSLT

	 *      Specification</a>

 * @param v Value to set for "grouping-separator" attribute.

 */

public void setGroupingSeparator(AVT v){

  m_groupingSeparator_avt=v;

}

Location: ElemNumber.java

Content: 

/** 

 * Set the "grouping-size" attribute. The optional grouping-size specifies the size (normally 3) of the grouping.

 * @see <a href="http://www.w3.org/TR/xslt#convert">convert in XSLT

	 *      Specification</a>

 * @param v Value to set for "grouping-size" attribute.

 */

public void setGroupingSize(AVT v){

  m_groupingSize_avt=v;

}

Location: ElemNumber.java

Content: 

/** 

 * Set the "letter-value" attribute. The letter-value attribute disambiguates between numbering sequences that use letters.

 * @see <a href="http://www.w3.org/TR/xslt#convert">convert in XSLT

	 *      Specification</a>

 * @param v Value to set for "letter-value" attribute.

 */

public void setLetterValue(AVT v){

  m_lettervalue_avt=v;

}

Location: ElemNumber.java

Content: 

/** 

 * Set the "level" attribute. The level attribute specifies what levels of the source tree should be considered; it has the values single, multiple or any. The default is single.

 * @param v Value to set for "level" attribute.

 */

public void setLevel(int v){

  m_level=v;

}

Location: ElemNumber.java

Content: 

/** 

 * Set the "value" attribute. The value attribute contains an expression. The expression is evaluated and the resulting object is converted to a number as if by a call to the number function.

 * @param v Value to set for "value" attribute.

 */

public void setValue(XPath v){

  m_valueExpr=v;

}

Location: ElemNumber.java

Content: 

/** 

 * Convert a long integer into traditional alphabetic counting, in other words count using the traditional numbering.

 * @param val        Value to convert -- must be greater than zero.

 * @param thisBundle Resource bundle to use

 * @return String representing alpha count of number.

 * @see XSLProcessor#DecimalToRoman Note that the radix of the conversion is inferred from the size of the table.

 */

protected String tradAlphaCount(long val,XResourceBundle thisBundle){

  if (val > Long.MAX_VALUE) {

    this.error(XSLTErrorResources.ER_NUMBER_TOO_BIG);

    return XSLTErrorResources.ERROR_STRING;

  }

  char[] table=null;

  int lookupIndex=1;

  char buf[]=new char[100];

  int charPos;

  charPos=0;

  IntArrayWrapper groups=(IntArrayWrapper)thisBundle.getObject(org.apache.xml.utils.res.XResourceBundle.LANG_NUMBERGROUPS);

  StringArrayWrapper tables=(StringArrayWrapper)(thisBundle.getObject(org.apache.xml.utils.res.XResourceBundle.LANG_NUM_TABLES));

  String numbering=thisBundle.getString(org.apache.xml.utils.res.XResourceBundle.LANG_NUMBERING);

  if (numbering.equals(org.apache.xml.utils.res.XResourceBundle.LANG_MULT_ADD)) {

    String mult_order=thisBundle.getString(org.apache.xml.utils.res.XResourceBundle.MULT_ORDER);

    LongArrayWrapper multiplier=(LongArrayWrapper)(thisBundle.getObject(org.apache.xml.utils.res.XResourceBundle.LANG_MULTIPLIER));

    CharArrayWrapper zeroChar=(CharArrayWrapper)thisBundle.getObject("zero");

    int i=0;

    while (i < multiplier.getLength() && val < multiplier.getLong(i)) {

      i++;

    }

    do {

      if (i >= multiplier.getLength())       break;

      if (val < multiplier.getLong(i)) {

        if (zeroChar.getLength() == 0) {

          i++;

        }

 else {

          if (buf[charPos - 1] != zeroChar.getChar(0))           buf[charPos++]=zeroChar.getChar(0);

          i++;

        }

      }

 else       if (val >= multiplier.getLong(i)) {

        long mult=val / multiplier.getLong(i);

        val=val % multiplier.getLong(i);

        int k=0;

        while (k < groups.getLength()) {

          lookupIndex=1;

          if (mult / groups.getInt(k) <= 0)           k++;

 else {

            CharArrayWrapper THEletters=(CharArrayWrapper)thisBundle.getObject(tables.getString(k));

            table=new char[THEletters.getLength() + 1];

            int j;

            for (j=0; j < THEletters.getLength(); j++) {

              table[j + 1]=THEletters.getChar(j);

            }

            table[0]=THEletters.getChar(j - 1);

            lookupIndex=(int)mult / groups.getInt(k);

            if (lookupIndex == 0 && mult == 0)             break;

            char multiplierChar=((CharArrayWrapper)(thisBundle.getObject(org.apache.xml.utils.res.XResourceBundle.LANG_MULTIPLIER_CHAR))).getChar(i);

            if (lookupIndex < table.length) {

              if (mult_order.equals(org.apache.xml.utils.res.XResourceBundle.MULT_PRECEDES)) {

                buf[charPos++]=multiplierChar;

                buf[charPos++]=table[lookupIndex];

              }

 else {

                if (lookupIndex == 1 && i == multiplier.getLength() - 1) {

                }

 else                 buf[charPos++]=table[lookupIndex];

                buf[charPos++]=multiplierChar;

              }

              break;

            }

 else             return XSLTErrorResources.ERROR_STRING;

          }

        }

        i++;

      }

    }

 while (i < multiplier.getLength());

  }

  int count=0;

  String tableName;

  while (count < groups.getLength()) {

    if (val / groups.getInt(count) <= 0)     count++;

 else {

      CharArrayWrapper theletters=(CharArrayWrapper)thisBundle.getObject(tables.getString(count));

      table=new char[theletters.getLength() + 1];

      int j;

      for (j=0; j < theletters.getLength(); j++) {

        table[j + 1]=theletters.getChar(j);

      }

      table[0]=theletters.getChar(j - 1);

      lookupIndex=(int)val / groups.getInt(count);

      val=val % groups.getInt(count);

      if (lookupIndex == 0 && val == 0)       break;

      if (lookupIndex < table.length) {

        buf[charPos++]=table[lookupIndex];

      }

 else       return XSLTErrorResources.ERROR_STRING;

      count++;

    }

  }

  return new String(buf,0,charPos);

}

