Location: XSLTElementDef.java

Content: 

/** 

 * Construct an instance of XSLTElementDef.

 * @param namespace      The Namespace URI, "*", or null.

 * @param name           The local name (without prefix), "*", or null.

 * @param nameAlias      A potential alias for the name, or null.

 * @param elements       An array of allowed child element defs, or null.

 * @param attributes     An array of allowed attribute defs, or null.

 * @param contentHandler The element processor for this element.

 * @param classObject    The class of the object that this element def shouldproduce.

 */

void build(String namespace,String name,String nameAlias,XSLTElementDef[] elements,XSLTAttributeDef[] attributes,XSLTElementProcessor contentHandler,Class classObject){

  this.m_namespace=namespace;

  this.m_name=name;

  this.m_nameAlias=nameAlias;

  this.m_elements=elements;

  this.m_attributes=attributes;

  setElementProcessor(contentHandler);

  this.m_classObject=classObject;

  if (hasRequired() && m_elements != null) {

    int n=m_elements.length;

    for (int i=0; i < n; i++) {

      XSLTElementDef def=m_elements[i];

      if (def != null && def.getRequired()) {

        if (m_requiredFound == null)         m_requiredFound=new Hashtable();

        m_requiredFound.put(def.getName(),"xsl:" + def.getName());

      }

    }

  }

}

Location: XSLTElementDef.java

Content: 

/** 

 * Tell if the two string refs are equal, equality being defined as: 1) Both strings are null. 2) One string is null and the other is empty. 3) Both strings are non-null, and equal.

 * @param s1 A reference to the first string, or null.

 * @param s2 A reference to the second string, or null.

 * @return true if Both strings are null, or if one string is null and the otheris empty, or if both strings are non-null, and equal because s1.equals(s2) returns true.

 */

private static boolean equalsMayBeNullOrZeroLen(String s1,String s2){

  int len1=(s1 == null) ? 0 : s1.length();

  int len2=(s2 == null) ? 0 : s2.length();

  return (len1 != len2) ? false : (len1 == 0) ? true : s1.equals(s2);

}

Location: XSLTElementDef.java

Content: 

/** 

 * Tell if two objects are equal, when either one may be null. If both are null, they are considered equal.

 * @param obj1 A reference to the first object, or null.

 * @param obj2 A reference to the second object, or null.

 * @return true if the to objects are equal by both being null or becauseobj2.equals(obj1) returns true.

 */

private static boolean equalsMayBeNull(Object obj1,Object obj2){

  return (obj2 == obj1) || ((null != obj1) && (null != obj2) && obj2.equals(obj1));

}

Location: XSLTElementDef.java

Content: 

/** 

 * Given a namespace URI, and a local name, return the element's attribute definition, if it has one.

 * @param uri       The Namespace URI, or an empty string.

 * @param localName The local name (without prefix), or empty string if notnamespace processing.

 * @return The attribute def that matches the arguments, or null.

 */

XSLTAttributeDef getAttributeDef(String uri,String localName){

  XSLTAttributeDef defaultDef=null;

  XSLTAttributeDef[] attrDefs=getAttributes();

  int nAttrDefs=attrDefs.length;

  for (int k=0; k < nAttrDefs; k++) {

    XSLTAttributeDef attrDef=attrDefs[k];

    String uriDef=attrDef.getNamespace();

    String nameDef=attrDef.getName();

    if (nameDef.equals("*") && (equalsMayBeNullOrZeroLen(uri,uriDef) || (uriDef != null && uriDef.equals("*") && uri != null && uri.length() > 0))) {

      return attrDef;

    }

 else     if (nameDef.equals("*") && (uriDef == null)) {

      defaultDef=attrDef;

    }

 else     if (equalsMayBeNullOrZeroLen(uri,uriDef) && localName.equals(nameDef)) {

      return attrDef;

    }

  }

  if (null == defaultDef) {

    if (uri.length() > 0 && !equalsMayBeNullOrZeroLen(uri,Constants.S_XSLNAMESPACEURL)) {

      return XSLTAttributeDef.m_foreignAttr;

    }

  }

  return defaultDef;

}

Location: XSLTElementDef.java

Content: 

/** 

 * Return the class object that should in instantiated for a Xalan instance of this element.

 * @return The class of the object that this element def should produce, ornull.

 */

Class getClassObject(){

  return m_classObject;

}

Location: XSLTElementDef.java

Content: 

/** 

 * Return the XSLTElementProcessor for this element.

 * @return The element processor for this element.

 * @xsl.usage internal

 */

public XSLTElementProcessor getElementProcessor(){

  return m_elementProcessor;

}

Location: XSLTElementDef.java

Content: 

/** 

 * Get the highest order of child elements have appeared so far .

 * @return the highest order of child elements have appeared so far.

 */

int getLastOrder(){

  return m_lastOrder;

}

Location: XSLTElementDef.java

Content: 

/** 

 * Get whether this element can appear multiple times

 * @return true if this element can appear multiple times

 */

boolean getMultiAllowed(){

  return m_multiAllowed;

}

Location: XSLTElementDef.java

Content: 

/** 

 * Get the name of this element.

 * @return A potential alias for the name, or null.

 */

String getNameAlias(){

  return m_nameAlias;

}

Location: XSLTElementDef.java

Content: 

/** 

 * Given an unknown element, get the processor for the element.

 * @param uri       The Namespace URI, or an empty string.

 * @param localName The local name (without prefix), or empty string if notnamespace processing.

 * @return normally a {@link ProcessorUnknown} reference.

 * @see ProcessorUnknown

 */

XSLTElementProcessor getProcessorForUnknown(String uri,String localName){

  if (null == m_elements)   return null;

  int n=m_elements.length;

  for (int i=0; i < n; i++) {

    XSLTElementDef def=m_elements[i];

    if (def.m_name.equals("unknown") && uri.length() > 0) {

      return def.m_elementProcessor;

    }

  }

  return null;

}

Location: XSLTElementDef.java

Content: 

/** 

 * Given a namespace URI, and a local name, get the processor for the element, or return null if not allowed.

 * @param uri       The Namespace URI, or an empty string.

 * @param localName The local name (without prefix), or empty string if notnamespace processing.

 * @return The element processor that matches the arguments, or null.

 */

XSLTElementProcessor getProcessorFor(String uri,String localName){

  XSLTElementProcessor elemDef=null;

  if (null == m_elements)   return null;

  int n=m_elements.length;

  int order=-1;

  boolean multiAllowed=true;

  for (int i=0; i < n; i++) {

    XSLTElementDef def=m_elements[i];

    if (def.m_name.equals("*")) {

      if (!equalsMayBeNullOrZeroLen(uri,Constants.S_XSLNAMESPACEURL)) {

        elemDef=def.m_elementProcessor;

        order=def.getOrder();

        multiAllowed=def.getMultiAllowed();

      }

    }

 else     if (def.QNameEquals(uri,localName)) {

      if (def.getRequired())       this.setRequiredFound(def.getName(),true);

      order=def.getOrder();

      multiAllowed=def.getMultiAllowed();

      elemDef=def.m_elementProcessor;

      break;

    }

  }

  if (elemDef != null && this.isOrdered()) {

    int lastOrder=getLastOrder();

    if (order > lastOrder)     setLastOrder(order);

 else     if (order == lastOrder && !multiAllowed) {

      return null;

    }

 else     if (order < lastOrder && order > 0) {

      return null;

    }

  }

  return elemDef;

}

Location: XSLTElementDef.java

Content: 

/** 

 * Get whether or not this is a required element.

 * @return true if this is a required element.

 */

boolean getRequired(){

  return m_required;

}

Location: XSLTElementDef.java

Content: 

/** 

 * Get required elements that were not found.

 * @return required elements that were not found.

 */

String getRequiredElem(){

  if (m_requiredFound == null)   return null;

  Enumeration elems=m_requiredFound.elements();

  String s="";

  boolean first=true;

  while (elems.hasMoreElements()) {

    if (first)     first=false;

 else     s=s + ", ";

    s=s + (String)elems.nextElement();

  }

  return s;

}

Location: XSLTElementDef.java

Content: 

/** 

 * Get whether all required elements were found.

 * @return true if all required elements were found.

 */

boolean getRequiredFound(){

  if (m_requiredFound == null)   return true;

  return m_requiredFound.isEmpty();

}

Location: XSLTElementDef.java

Content: 

/** 

 * Get whether or not this has a required element.

 * @return true if this this has a required element.

 */

boolean hasRequired(){

  return m_has_required;

}

Location: XSLTElementDef.java

Content: 

/** 

 * Get whether this element requires ordered children.

 * @return true if this element requires ordered children.

 */

boolean isOrdered(){

  return m_isOrdered;

}

Location: XSLTElementDef.java

Content: 

/** 

 * Tell if the namespace URI and local name match this element.

 * @param uri       The namespace uri, which may be null.

 * @param localName The local name of an element, which may be null.

 * @return true if the uri and local name arguments are considered to match theuri and local name of this element def.

 */

private boolean QNameEquals(String uri,String localName){

  return (equalsMayBeNullOrZeroLen(m_namespace,uri) && (equalsMayBeNullOrZeroLen(m_name,localName) || equalsMayBeNullOrZeroLen(m_nameAlias,localName)));

}

Location: XSLTElementDef.java

Content: 

/** 

 * Set the XSLTElementProcessor for this element.

 * @param handler The element processor for this element.

 * @xsl.usage internal

 */

public void setElementProcessor(XSLTElementProcessor handler){

  if (handler != null) {

    m_elementProcessor=handler;

    m_elementProcessor.setElemDef(this);

  }

}

Location: XSLTElementDef.java

Content: 

/** 

 * Set the allowed elements for this type.

 * @param defs An array of allowed child element defs, or null.

 */

void setElements(XSLTElementDef[] defs){

  m_elements=defs;

}

Location: XSLTElementDef.java

Content: 

/** 

 * Set the highest order of child elements have appeared so far .

 * @param order the highest order of child elements have appeared so far.

 */

void setLastOrder(int order){

  m_lastOrder=order;

}

Location: XSLTElementDef.java

Content: 

/** 

 * Set this required element found.

 */

void setRequiredFound(String elem,boolean found){

  if (m_requiredFound.get(elem) != null)   m_requiredFound.remove(elem);

}

Location: XSLTElementDef.java

Content: 

/** 

 * Set the type of this element.

 * @param t Content type, one of T_ELEMENT, T_PCDATA, or T_ANY.

 */

void setType(int t){

  m_type=t;

}

Location: XSLTElementDef.java

Content: 

/** 

 * Construct an instance of XSLTElementDef. This must be followed by a call to build().

 */

XSLTElementDef(){

}

Location: XSLTElementDef.java

Content: 

/** 

 * Construct an instance of XSLTElementDef that represents text.

 * @param classObject    The class of the object that this element def shouldproduce.

 * @param contentHandler The element processor for this element.

 * @param type           Content type, one of T_ELEMENT, T_PCDATA, or T_ANY.

 */

XSLTElementDef(Class classObject,XSLTElementProcessor contentHandler,int type){

  this.m_classObject=classObject;

  this.m_type=type;

  setElementProcessor(contentHandler);

}

Location: XSLTElementDef.java

Content: 

/** 

 * Construct an instance of XSLTElementDef.

 * @param namespace      The Namespace URI, "*", or null.

 * @param name           The local name (without prefix), "*", or null.

 * @param nameAlias      A potential alias for the name, or null.

 * @param elements       An array of allowed child element defs, or null.

 * @param attributes     An array of allowed attribute defs, or null.

 * @param contentHandler The element processor for this element.

 * @param classObject    The class of the object that this element def shouldproduce.

 */

XSLTElementDef(XSLTSchema schema,String namespace,String name,String nameAlias,XSLTElementDef[] elements,XSLTAttributeDef[] attributes,XSLTElementProcessor contentHandler,Class classObject){

  build(namespace,name,nameAlias,elements,attributes,contentHandler,classObject);

  if ((null != namespace) && (namespace.equals(Constants.S_XSLNAMESPACEURL) || namespace.equals(Constants.S_BUILTIN_EXTENSIONS_URL) || namespace.equals(Constants.S_BUILTIN_OLD_EXTENSIONS_URL))) {

    schema.addAvailableElement(new QName(namespace,name));

    if (null != nameAlias)     schema.addAvailableElement(new QName(namespace,nameAlias));

  }

}

Location: XSLTElementDef.java

Content: 

/** 

 * Construct an instance of XSLTElementDef.

 * @param namespace      The Namespace URI, "*", or null.

 * @param name           The local name (without prefix), "*", or null.

 * @param nameAlias      A potential alias for the name, or null.

 * @param elements       An array of allowed child element defs, or null.

 * @param attributes     An array of allowed attribute defs, or null.

 * @param contentHandler The element processor for this element.

 * @param classObject    The class of the object that this element def shouldproduce.

 * @param has_required   true if this element has required elements by the XSLTspecification.

 */

XSLTElementDef(XSLTSchema schema,String namespace,String name,String nameAlias,XSLTElementDef[] elements,XSLTAttributeDef[] attributes,XSLTElementProcessor contentHandler,Class classObject,boolean has_required){

  this.m_has_required=has_required;

  build(namespace,name,nameAlias,elements,attributes,contentHandler,classObject);

  if ((null != namespace) && (namespace.equals(Constants.S_XSLNAMESPACEURL) || namespace.equals(Constants.S_BUILTIN_EXTENSIONS_URL) || namespace.equals(Constants.S_BUILTIN_OLD_EXTENSIONS_URL))) {

    schema.addAvailableElement(new QName(namespace,name));

    if (null != nameAlias)     schema.addAvailableElement(new QName(namespace,nameAlias));

  }

}

Location: XSLTElementDef.java

Content: 

/** 

 * Construct an instance of XSLTElementDef.

 * @param namespace      The Namespace URI, "*", or null.

 * @param name           The local name (without prefix), "*", or null.

 * @param nameAlias      A potential alias for the name, or null.

 * @param elements       An array of allowed child element defs, or null.

 * @param attributes     An array of allowed attribute defs, or null.

 * @param contentHandler The element processor for this element.

 * @param classObject    The class of the object that this element def shouldproduce.

 * @param has_required   true if this element has required elements by the XSLTspecification.

 * @param required       true if this element is required by the XSLTspecification.

 */

XSLTElementDef(XSLTSchema schema,String namespace,String name,String nameAlias,XSLTElementDef[] elements,XSLTAttributeDef[] attributes,XSLTElementProcessor contentHandler,Class classObject,boolean has_required,boolean required){

  this(schema,namespace,name,nameAlias,elements,attributes,contentHandler,classObject,has_required);

  this.m_required=required;

}

Location: XSLTElementDef.java

Content: 

/** 

 * Construct an instance of XSLTElementDef.

 * @param namespace      The Namespace URI, "*", or null.

 * @param name           The local name (without prefix), "*", or null.

 * @param nameAlias      A potential alias for the name, or null.

 * @param elements       An array of allowed child element defs, or null.

 * @param attributes     An array of allowed attribute defs, or null.

 * @param contentHandler The element processor for this element.

 * @param classObject    The class of the object that this element def shouldproduce.

 * @param has_required   true if this element has required elements by the XSLTspecification.

 * @param required       true if this element is required by the XSLTspecification.

 * @param has_order      whether this element has ordered child elements

 * @param order          the order this element should appear according to theXSLT specification.

 * @param multiAllowed   whether this element is allowed more than once

 */

XSLTElementDef(XSLTSchema schema,String namespace,String name,String nameAlias,XSLTElementDef[] elements,XSLTAttributeDef[] attributes,XSLTElementProcessor contentHandler,Class classObject,boolean has_required,boolean required,boolean has_order,int order,boolean multiAllowed){

  this(schema,namespace,name,nameAlias,elements,attributes,contentHandler,classObject,has_required,required);

  this.m_order=order;

  this.m_multiAllowed=multiAllowed;

  this.m_isOrdered=has_order;

}

Location: XSLTElementDef.java

Content: 

/** 

 * Construct an instance of XSLTElementDef.

 * @param namespace      The Namespace URI, "*", or null.

 * @param name           The local name (without prefix), "*", or null.

 * @param nameAlias      A potential alias for the name, or null.

 * @param elements       An array of allowed child element defs, or null.

 * @param attributes     An array of allowed attribute defs, or null.

 * @param contentHandler The element processor for this element.

 * @param classObject    The class of the object that this element def shouldproduce.

 * @param has_required   true if this element has required elements by the XSLTspecification.

 * @param required       true if this element is required by the XSLTspecification.

 * @param order          the order this element should appear according to theXSLT specification.

 * @param multiAllowed   whether this element is allowed more than once

 */

XSLTElementDef(XSLTSchema schema,String namespace,String name,String nameAlias,XSLTElementDef[] elements,XSLTAttributeDef[] attributes,XSLTElementProcessor contentHandler,Class classObject,boolean has_required,boolean required,int order,boolean multiAllowed){

  this(schema,namespace,name,nameAlias,elements,attributes,contentHandler,classObject,has_required,required);

  this.m_order=order;

  this.m_multiAllowed=multiAllowed;

}

Location: XSLTElementDef.java

Content: 

/** 

 * Construct an instance of XSLTElementDef.

 * @param namespace      The Namespace URI, "*", or null.

 * @param name           The local name (without prefix), "*", or null.

 * @param nameAlias      A potential alias for the name, or null.

 * @param elements       An array of allowed child element defs, or null.

 * @param attributes     An array of allowed attribute defs, or null.

 * @param contentHandler The element processor for this element.

 * @param classObject    The class of the object that this element def shouldproduce.

 * @param has_order      whether this element has ordered child elements

 * @param order          the order this element should appear according to theXSLT specification.

 * @param multiAllowed   whether this element is allowed more than once

 */

XSLTElementDef(XSLTSchema schema,String namespace,String name,String nameAlias,XSLTElementDef[] elements,XSLTAttributeDef[] attributes,XSLTElementProcessor contentHandler,Class classObject,boolean has_order,int order,boolean multiAllowed){

  this(schema,namespace,name,nameAlias,elements,attributes,contentHandler,classObject,order,multiAllowed);

  this.m_isOrdered=has_order;

}

Location: XSLTElementDef.java

Content: 

/** 

 * Construct an instance of XSLTElementDef.

 * @param namespace      The Namespace URI, "*", or null.

 * @param name           The local name (without prefix), "*", or null.

 * @param nameAlias      A potential alias for the name, or null.

 * @param elements       An array of allowed child element defs, or null.

 * @param attributes     An array of allowed attribute defs, or null.

 * @param contentHandler The element processor for this element.

 * @param classObject    The class of the object that this element def shouldproduce.

 * @param order          the order this element should appear according to theXSLT specification.

 * @param multiAllowed   whether this element is allowed more than once

 */

XSLTElementDef(XSLTSchema schema,String namespace,String name,String nameAlias,XSLTElementDef[] elements,XSLTAttributeDef[] attributes,XSLTElementProcessor contentHandler,Class classObject,int order,boolean multiAllowed){

  this(schema,namespace,name,nameAlias,elements,attributes,contentHandler,classObject);

  this.m_order=order;

  this.m_multiAllowed=multiAllowed;

}

