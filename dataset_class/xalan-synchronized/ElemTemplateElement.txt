Location: ElemTemplateElement.java

Content: 

/** 

 * Add or replace this namespace declaration in list of namespaces in scope for this element.

 * @param newDecl namespace declaration to add to list

 */

void addOrReplaceDecls(XMLNSDecl newDecl){

  int n=m_prefixTable.size();

  for (int i=n - 1; i >= 0; i--) {

    XMLNSDecl decl=(XMLNSDecl)m_prefixTable.get(i);

    if (decl.getPrefix().equals(newDecl.getPrefix())) {

      return;

    }

  }

  m_prefixTable.add(newDecl);

}

Location: ElemTemplateElement.java

Content: 

/** 

 * Call the children visitors.

 * @param visitor The visitor whose appropriate method will be called.

 */

protected void callChildVisitors(XSLTVisitor visitor){

  callChildVisitors(visitor,true);

}

Location: ElemTemplateElement.java

Content: 

/** 

 * @see XSLTVisitable#callVisitors(XSLTVisitor)

 */

public void callVisitors(XSLTVisitor visitor){

  if (accept(visitor)) {

    callChildVisitors(visitor);

  }

}

Location: ElemTemplateElement.java

Content: 

/** 

 * Tell if this element can accept variable declarations.

 * @return true if the element can accept and process variable declarations.

 */

public boolean canAcceptVariables(){

  return true;

}

Location: ElemTemplateElement.java

Content: 

/** 

 * Construct a template element instance.

 */

public ElemTemplateElement(){

}

Location: ElemTemplateElement.java

Content: 

/** 

 * Send startPrefixMapping events to the result tree handler for all declared prefix mappings in the stylesheet.

 * @param transformer non-null reference to the the current transform-timestate.

 * @throws TransformerException

 */

void executeNSDecls(TransformerImpl transformer) throws TransformerException {

  executeNSDecls(transformer,null);

}

Location: ElemTemplateElement.java

Content: 

/** 

 * Send startPrefixMapping events to the result tree handler for all declared prefix mappings in the stylesheet.

 * @param transformer  non-null reference to the the current transform-timestate.

 * @param ignorePrefix string prefix to not startPrefixMapping

 * @throws TransformerException

 */

void executeNSDecls(TransformerImpl transformer,String ignorePrefix) throws TransformerException {

  try {

    if (null != m_prefixTable) {

      SerializationHandler rhandler=transformer.getResultTreeHandler();

      int n=m_prefixTable.size();

      for (int i=n - 1; i >= 0; i--) {

        XMLNSDecl decl=(XMLNSDecl)m_prefixTable.get(i);

        if (!decl.getIsExcluded() && !(null != ignorePrefix && decl.getPrefix().equals(ignorePrefix))) {

          rhandler.startPrefixMapping(decl.getPrefix(),decl.getURI(),true);

        }

      }

    }

  }

 catch (  org.xml.sax.SAXException se) {

    throw new TransformerException(se);

  }

}

Location: ElemTemplateElement.java

Content: 

/** 

 * If this stylesheet was created from a DOM, get the DOM backpointer that this element originated from. For tooling use.

 * @return DOM backpointer that this element originated from or null.

 */

public org.w3c.dom.Node getDOMBackPointer(){

  return m_DOMBackPointer;

}

Location: ElemTemplateElement.java

Content: 

/** 

 * Return the column number where the current document event ends. Note that this is the column number of the first character after the text associated with the document event. The first column in a line is position 1.

 * @return The column number, or -1 if none is available.

 * @see #getLineNumber

 */

public int getEndColumnNumber(){

  return m_endColumnNumber;

}

Location: ElemTemplateElement.java

Content: 

/** 

 * Return the line number where the current document event ends. Note that this is the line position of the first character after the text associated with the document event.

 * @return The line number, or -1 if none is available.

 * @see #getColumnNumber

 */

public int getEndLineNumber(){

  return m_endLineNumber;

}

Location: ElemTemplateElement.java

Content: 

/** 

 * Get the first child as a ElemTemplateElement.

 * @return This node's first child (as a ElemTemplateElement) or null

 */

public ElemTemplateElement getFirstChildElem(){

  return m_firstChild;

}

Location: ElemTemplateElement.java

Content: 

/** 

 * Get the last child.

 * @return This node's last child

 */

public ElemTemplateElement getLastChildElem(){

  ElemTemplateElement lastChild=null;

  for (ElemTemplateElement node=m_firstChild; node != null; node=node.m_nextSibling) {

    lastChild=node;

  }

  return lastChild;

}

Location: ElemTemplateElement.java

Content: 

/** 

 * Get the next sibling (as a ElemTemplateElement) or return null.

 * @return This node's next sibling (as a ElemTemplateElement) or null

 */

public ElemTemplateElement getNextSiblingElem(){

  return m_nextSibling;

}

Location: ElemTemplateElement.java

Content: 

/** 

 * Get the owning xsl:template element.

 * @return The owning xsl:template element, this element if it is axsl:template, or null if not found.

 */

public ElemTemplate getOwnerXSLTemplate(){

  ElemTemplateElement el=this;

  int type=el.getXSLToken();

  while ((null != el) && (type != Constants.ELEMNAME_TEMPLATE)) {

    el=el.getParentElem();

    if (null != el)     type=el.getXSLToken();

  }

  return (ElemTemplate)el;

}

Location: ElemTemplateElement.java

Content: 

/** 

 * Get the parent as an ElemTemplateElement.

 * @return This node's parent as an ElemTemplateElement

 */

public ElemTemplateElement getParentElem(){

  return m_parentNode;

}

Location: ElemTemplateElement.java

Content: 

/** 

 * Get the parent element.

 * @return This node's next parent (as a ElemTemplateElement) or null

 */

public ElemTemplateElement getParentNodeElem(){

  return m_parentNode;

}

Location: ElemTemplateElement.java

Content: 

/** 

 * Return a table that contains all prefixes available within this element context.

 * @return reference to vector of {@link XMLNSDecl}s, which may be null.

 */

List getPrefixTable(){

  return m_prefixTable;

}

Location: ElemTemplateElement.java

Content: 

/** 

 * Get the previous sibling (as a Node) or return null. Note that this may be expensive if the parent has many kids; we accept that price in exchange for avoiding the prev pointer TODO: If we were sure parents and sibs are always ElemTemplateElements, we could hit the fields directly rather than thru accessors.

 * @return This node's previous sibling or null

 */

public ElemTemplateElement getPreviousSiblingElem(){

  ElemTemplateElement walker=getParentNodeElem();

  ElemTemplateElement prev=null;

  if (walker != null)   for (walker=walker.getFirstChildElem(); walker != null; prev=walker, walker=walker.getNextSiblingElem()) {

    if (walker == this)     return prev;

  }

  return null;

}

Location: ElemTemplateElement.java

Content: 

/** 

 * Get the "xml:space" attribute. A text node is preserved if an ancestor element of the text node has an xml:space attribute with a value of preserve, and no closer ancestor element has xml:space with a value of default.

 * @see <a href="http://www.w3.org/TR/xslt#strip">strip in XSLT

	 *      Specification</a>

 * @see <a href=

	 *      "http://www.w3.org/TR/xslt#section-Creating-Text">section-Creating-Text

	 *      in XSLT Specification</a>

 * @return The value of the xml:space attribute

 */

public boolean getXmlSpace(){

  return m_defaultSpace;

}

Location: ElemTemplateElement.java

Content: 

/** 

 * Tell if this element only has one text child, for optimization purposes.

 * @return true of this element only has one text literal child.

 */

public boolean hasTextLitOnly(){

  return m_hasTextLitOnly;

}

Location: ElemTemplateElement.java

Content: 

public boolean hasVariableDecl(){

  return m_hasVariableDecl;

}

Location: ElemTemplateElement.java

Content: 

/** 

 * Tell if this template is a compiled template.

 * @return Boolean flag indicating whether this is a compiled template

 */

public boolean isCompiledTemplate(){

  return false;

}

Location: ElemTemplateElement.java

Content: 

/** 

 * Remove a child. ADDED 9/8/200 to support compilation. TODO: ***** Alternative is "removeMe() from my parent if any" ... which is less well checked, but more convenient in some cases. Given that we assume only experts are calling this class, it might be preferable. It's less DOMish, though.

 * @param childETE The child to remove. This operation is a no-op if oldChild isnot a child of this node.

 * @return the removed child, or null if the specified node was not a child ofthis element.

 */

public ElemTemplateElement removeChild(ElemTemplateElement childETE){

  if (childETE == null || childETE.m_parentNode != this)   return null;

  if (childETE == m_firstChild)   m_firstChild=childETE.m_nextSibling;

 else {

    ElemTemplateElement prev=childETE.getPreviousSiblingElem();

    prev.m_nextSibling=childETE.m_nextSibling;

  }

  childETE.m_parentNode=null;

  childETE.m_nextSibling=null;

  return childETE;

}

Location: ElemTemplateElement.java

Content: 

/** 

 * Replace the old child with a new child.

 * @param newChildElem New child to replace with

 * @param oldChildElem Old child to be replaced

 * @return The new child

 * @throws DOMException

 */

public ElemTemplateElement replaceChild(ElemTemplateElement newChildElem,ElemTemplateElement oldChildElem){

  if (oldChildElem == null || oldChildElem.getParentElem() != this)   return null;

  ElemTemplateElement prev=oldChildElem.getPreviousSiblingElem();

  if (null != prev)   prev.m_nextSibling=newChildElem;

  if (m_firstChild == oldChildElem)   m_firstChild=newChildElem;

  newChildElem.m_parentNode=this;

  oldChildElem.m_parentNode=null;

  newChildElem.m_nextSibling=oldChildElem.m_nextSibling;

  oldChildElem.m_nextSibling=null;

  return newChildElem;

}

Location: ElemTemplateElement.java

Content: 

/** 

 * If this stylesheet was created from a DOM, set the DOM backpointer that this element originated from. For tooling use.

 * @param n DOM backpointer that this element originated from.

 */

public void setDOMBackPointer(org.w3c.dom.Node n){

  m_DOMBackPointer=n;

}

Location: ElemTemplateElement.java

Content: 

/** 

 * Set the end location information for this element.

 * @param locator Source Locator with location information for this element

 */

public void setEndLocaterInfo(SourceLocator locator){

  m_endLineNumber=locator.getLineNumber();

  m_endColumnNumber=locator.getColumnNumber();

}

Location: ElemTemplateElement.java

Content: 

/** 

 * From the SAX2 helper class, set the namespace table for this element. Take care to call resolveInheritedNamespaceDecls. after all namespace declarations have been added.

 * @param nsSupport non-null reference to NamespaceSupport from theContentHandler.

 * @throws TransformerException

 */

public void setPrefixes(NamespaceSupport nsSupport) throws TransformerException {

  setPrefixes(nsSupport,false);

}

Location: ElemTemplateElement.java

Content: 

/** 

 * Copy the namespace declarations from the NamespaceSupport object. Take care to call resolveInheritedNamespaceDecls. after all namespace declarations have been added.

 * @param nsSupport      non-null reference to NamespaceSupport from theContentHandler.

 * @param excludeXSLDecl true if XSLT namespaces should be ignored.

 * @throws TransformerException

 */

public void setPrefixes(NamespaceSupport nsSupport,boolean excludeXSLDecl) throws TransformerException {

  Enumeration decls=nsSupport.getDeclaredPrefixes();

  while (decls.hasMoreElements()) {

    String prefix=(String)decls.nextElement();

    if (null == m_declaredPrefixes)     m_declaredPrefixes=new ArrayList();

    String uri=nsSupport.getURI(prefix);

    if (excludeXSLDecl && uri.equals(Constants.S_XSLNAMESPACEURL))     continue;

    XMLNSDecl decl=new XMLNSDecl(prefix,uri,false);

    m_declaredPrefixes.add(decl);

  }

}

Location: ElemTemplateElement.java

Content: 

void setPrefixTable(List list){

  m_prefixTable=list;

}

Location: ElemTemplateElement.java

Content: 

/** 

 * Set the UID (document order index).

 * @param i Index of this child.

 */

public void setUid(int i){

  m_docOrderNumber=i;

}

Location: ElemTemplateElement.java

Content: 

/** 

 * Set the "xml:space" attribute. A text node is preserved if an ancestor element of the text node has an xml:space attribute with a value of preserve, and no closer ancestor element has xml:space with a value of default.

 * @see <a href="http://www.w3.org/TR/xslt#strip">strip in XSLT

	 *      Specification</a>

 * @see <a href=

	 *      "http://www.w3.org/TR/xslt#section-Creating-Text">section-Creating-Text

	 *      in XSLT Specification</a>

 * @param v Enumerated value, either Constants.ATTRVAL_PRESERVE orConstants.ATTRVAL_STRIP.

 */

public void setXmlSpace(int v){

  m_defaultSpace=((Constants.ATTRVAL_STRIP == v) ? true : false);

}

Location: ElemTemplateElement.java

Content: 

/** 

 * Get information about whether or not an element should strip whitespace.

 * @see <a href="http://www.w3.org/TR/xslt#strip">strip in XSLT

	 *      Specification</a>

 * @param support       The XPath runtime state.

 * @param targetElement Element to check

 * @return true if the whitespace should be stripped.

 * @throws TransformerException

 */

public boolean shouldStripWhiteSpace(org.apache.xpath.XPathContext support,org.w3c.dom.Element targetElement) throws TransformerException {

  StylesheetRoot sroot=this.getStylesheetRoot();

  return (null != sroot) ? sroot.shouldStripWhiteSpace(support,targetElement) : false;

}

Location: ElemTemplateElement.java

Content: 

/** 

 * Send endPrefixMapping events to the result tree handler for all declared prefix mappings in the stylesheet.

 * @param transformer non-null reference to the the current transform-timestate.

 * @throws TransformerException

 */

void unexecuteNSDecls(TransformerImpl transformer) throws TransformerException {

  unexecuteNSDecls(transformer,null);

}

Location: ElemTemplateElement.java

Content: 

/** 

 * Send endPrefixMapping events to the result tree handler for all declared prefix mappings in the stylesheet.

 * @param transformer  non-null reference to the the current transform-timestate.

 * @param ignorePrefix string prefix to not endPrefixMapping

 * @throws TransformerException

 */

void unexecuteNSDecls(TransformerImpl transformer,String ignorePrefix) throws TransformerException {

  try {

    if (null != m_prefixTable) {

      SerializationHandler rhandler=transformer.getResultTreeHandler();

      int n=m_prefixTable.size();

      for (int i=0; i < n; i++) {

        XMLNSDecl decl=(XMLNSDecl)m_prefixTable.get(i);

        if (!decl.getIsExcluded() && !(null != ignorePrefix && decl.getPrefix().equals(ignorePrefix))) {

          rhandler.endPrefixMapping(decl.getPrefix());

        }

      }

    }

  }

 catch (  org.xml.sax.SAXException se) {

    throw new TransformerException(se);

  }

}

