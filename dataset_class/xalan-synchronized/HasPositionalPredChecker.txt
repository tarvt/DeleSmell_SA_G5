Location: HasPositionalPredChecker.java

Content: 

/** 

 * Process the LocPathIterator to see if it contains variables or functions that may make it context dependent.

 * @param path LocPathIterator that is assumed to be absolute, but needschecking.

 * @return true if the path is confirmed to be absolute, false if it may containcontext dependencies.

 */

public static boolean check(LocPathIterator path){

  HasPositionalPredChecker hppc=new HasPositionalPredChecker();

  path.callVisitors(null,hppc);

  return hppc.m_hasPositionalPred;

}

Location: HasPositionalPredChecker.java

Content: 

/** 

 * Visit a function.

 * @param owner The owner of the expression, to which the expression can bereset if rewriting takes place.

 * @param func  The function reference object.

 * @return true if the sub expressions should be traversed.

 */

public boolean visitFunction(ExpressionOwner owner,Function func){

  if ((func instanceof FuncPosition) || (func instanceof FuncLast))   m_hasPositionalPred=true;

  return true;

}

Location: HasPositionalPredChecker.java

Content: 

/** 

 * Visit a predicate within a location path. Note that there isn't a proper unique component for predicates, and that the expression will be called also for whatever type Expression is.

 * @param owner The owner of the expression, to which the expression can bereset if rewriting takes place.

 * @param pred  The predicate object.

 * @return true if the sub expressions should be traversed.

 */

public boolean visitPredicate(ExpressionOwner owner,Expression pred){

  m_predDepth++;

  if (m_predDepth == 1) {

    if ((pred instanceof Variable) || (pred instanceof XNumber) || (pred instanceof Div)|| (pred instanceof Plus)|| (pred instanceof Minus)|| (pred instanceof Mod)|| (pred instanceof Quo)|| (pred instanceof Mult)|| (pred instanceof org.apache.xpath.operations.Number)|| (pred instanceof Function))     m_hasPositionalPred=true;

 else     pred.callVisitors(owner,this);

  }

  m_predDepth--;

  return false;

}

