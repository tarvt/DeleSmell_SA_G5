Location: WalkingIterator.java

Content: 

/** 

 * Get the head of the walker list.

 * @return The head of the walker list, or null if this iterator does notimplement walkers.

 * @xsl.usage advanced

 */

public final AxesWalker getFirstWalker(){

  return m_firstWalker;

}

Location: WalkingIterator.java

Content: 

/** 

 * Get the last used walker.

 * @return The last used walker, or null.

 * @xsl.usage advanced

 */

public final AxesWalker getLastUsedWalker(){

  return m_lastUsedWalker;

}

Location: WalkingIterator.java

Content: 

/** 

 * Set the head of the walker list.

 * @param walker Should be a valid AxesWalker.

 * @xsl.usage advanced

 */

public final void setFirstWalker(AxesWalker walker){

  m_firstWalker=walker;

}

Location: WalkingIterator.java

Content: 

/** 

 * Set the last used walker.

 * @param walker The last used walker, or null.

 * @xsl.usage advanced

 */

public final void setLastUsedWalker(AxesWalker walker){

  m_lastUsedWalker=walker;

}

Location: WalkingIterator.java

Content: 

/** 

 * Create a WalkingIterator iterator, including creation of step walkers from the opcode list, and call back into the Compiler to create predicate expressions.

 * @param compiler          The Compiler which is creating this expression.

 * @param opPos             The position of this iterator in the opcode listfrom the compiler.

 * @param shouldLoadWalkers True if walkers should be loaded, or false if thisis a derived iterator and it doesn't wish to load child walkers.

 * @throws javax.xml.transform.TransformerException

 */

WalkingIterator(Compiler compiler,int opPos,int analysis,boolean shouldLoadWalkers) throws javax.xml.transform.TransformerException {

  super(compiler,opPos,analysis,shouldLoadWalkers);

  int firstStepPos=OpMap.getFirstChildPos(opPos);

  if (shouldLoadWalkers) {

    m_firstWalker=WalkerFactory.loadWalkers(this,compiler,firstStepPos,0);

    m_lastUsedWalker=m_firstWalker;

  }

}

Location: WalkingIterator.java

Content: 

/** 

 * Create a WalkingIterator object.

 * @param nscontext The namespace context for this iterator, should be OK ifnull.

 */

public WalkingIterator(PrefixResolver nscontext){

  super(nscontext);

}

