Location: LocationPathPattern.java

Content: 

public double getDefaultPriority(){

  return 0.5;

}

Location: LocationPathPattern.java

Content: 

public abstract StepPattern getKernelPattern();

Location: LocationPathPattern.java

Content: 

public final double getPriority(){

  return Double.isNaN(_priority) ? getDefaultPriority() : _priority;

}

Location: LocationPathPattern.java

Content: 

public Template getTemplate(){

  return _template;

}

Location: LocationPathPattern.java

Content: 

public abstract boolean isWildcard();

Location: LocationPathPattern.java

Content: 

/** 

 * This method is used by the Mode class to prioritise patterns and template. This method is called for templates that are in the same mode and that match on the same core pattern. The rules used are: o) first check precedence - highest precedence wins o) then check priority - highest priority wins o) then check the position - the template that occured last wins

 */

public boolean noSmallerThan(LocationPathPattern other){

  if (_importPrecedence > other._importPrecedence) {

    return true;

  }

 else   if (_importPrecedence == other._importPrecedence) {

    if (_priority > other._priority) {

      return true;

    }

 else     if (_priority == other._priority) {

      if (_position > other._position) {

        return true;

      }

    }

  }

  return false;

}

Location: LocationPathPattern.java

Content: 

public abstract void reduceKernelPattern();

Location: LocationPathPattern.java

Content: 

public void setTemplate(final Template template){

  _template=template;

  _priority=template.getPriority();

  _importPrecedence=template.getImportPrecedence();

  _position=template.getPosition();

}

Location: LocationPathPattern.java

Content: 

public void translate(ClassGenerator classGen,MethodGenerator methodGen){

}

Location: LocationPathPattern.java

Content: 

public Type typeCheck(SymbolTable stable) throws TypeCheckError {

  return Type.Void;

}

