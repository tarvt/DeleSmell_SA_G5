Location: SortingIterator.java

Content: 

private void addRecord(NodeSortRecord record){

  if (_free == _data.length) {

    NodeSortRecord[] newArray=new NodeSortRecord[_data.length * 2];

    System.arraycopy(_data,0,newArray,0,_free);

    _data=newArray;

  }

  _data[_free++]=record;

}

Location: SortingIterator.java

Content: 

private int partition(int p,int r){

  final NodeSortRecord x=_data[(p + r) >>> 1];

  int i=p - 1;

  int j=r + 1;

  while (true) {

    while (x.compareTo(_data[--j]) < 0)     ;

    while (x.compareTo(_data[++i]) > 0)     ;

    if (i < j) {

      final NodeSortRecord t=_data[i];

      _data[i]=_data[j];

      _data[j]=t;

    }

 else {

      return (j);

    }

  }

}

Location: SortingIterator.java

Content: 

private void quicksort(int p,int r){

  while (p < r) {

    final int q=partition(p,r);

    quicksort(p,q);

    p=q + 1;

  }

}

Location: SortingIterator.java

Content: 

public SortingIterator(DTMAxisIterator source,NodeSortRecordFactory factory){

  _source=source;

  _factory=factory;

}

