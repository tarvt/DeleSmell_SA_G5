Location: NodeSequence.java

Content: 

/** 

 * Add the node into a vector of nodes where it should occur in document order.

 * @param node The node to be added.

 * @return insertIndex.

 * @throws RuntimeException thrown if this NodeSetDTM is not of a mutable type.

 */

protected int addNodeInDocOrder(int node){

  assertion(hasCache(),"addNodeInDocOrder must be done on a mutable sequence!");

  int insertIndex=-1;

  NodeVector vec=getVector();

  int size=vec.size(), i;

  for (i=size - 1; i >= 0; i--) {

    int child=vec.elementAt(i);

    if (child == node) {

      i=-2;

      break;

    }

    DTM dtm=m_dtmMgr.getDTM(node);

    if (!dtm.isNodeAfter(node,child)) {

      break;

    }

  }

  if (i != -2) {

    insertIndex=i + 1;

    vec.insertElementAt(node,insertIndex);

  }

  return insertIndex;

}

Location: NodeSequence.java

Content: 

/** 

 * If this NodeSequence has a cache, and that cache is fully populated then this method returns true, otherwise if there is no cache or it is not complete it returns false.

 */

private boolean cacheComplete(){

  final boolean complete;

  if (m_cache != null) {

    complete=m_cache.isComplete();

  }

 else {

    complete=false;

  }

  return complete;

}

Location: NodeSequence.java

Content: 

/** 

 * @see org.apache.xpath.Expression#fixupVariables(Vector,int)

 */

public void fixupVariables(Vector vars,int globalsSize){

  super.fixupVariables(vars,globalsSize);

}

Location: NodeSequence.java

Content: 

/** 

 * Get the cache (if any) of nodes obtained from the iterator so far. Note that the cache keeps growing until the iterator is walked to exhaustion, at which point the cache is "complete".

 */

private IteratorCache getCache(){

  return m_cache;

}

Location: NodeSequence.java

Content: 

/** 

 * Get the functional iterator that fetches nodes.

 * @return The contained iterator.

 */

public final DTMIterator getContainedIter(){

  return m_iter;

}

Location: NodeSequence.java

Content: 

/** 

 * Get the cached list of nodes appended with values obtained from the iterator as a NodeSequence is walked when its nextNode() method is called.

 */

protected IteratorCache getIteratorCache(){

  return m_cache;

}

Location: NodeSequence.java

Content: 

/** 

 * If this iterator needs to cache nodes that are fetched, they are stored in the Vector in the generic object.

 */

protected NodeVector getVector(){

  NodeVector nv=(m_cache != null) ? m_cache.getVector() : null;

  return nv;

}

Location: NodeSequence.java

Content: 

/** 

 * If the iterator needs to cache nodes as they are fetched, then this method returns true.

 */

public boolean hasCache(){

  final NodeVector nv=getVector();

  return (nv != null);

}

Location: NodeSequence.java

Content: 

/** 

 * If this NodeSequence has a cache, mark that it is complete. This method should be called after the iterator is exhausted.

 */

private void markCacheComplete(){

  NodeVector nv=getVector();

  if (nv != null) {

    m_cache.setCacheComplete(true);

  }

}

Location: NodeSequence.java

Content: 

/** 

 * Create a new NodeSequence in an invalid (null) state.

 */

public NodeSequence(){

  return;

}

Location: NodeSequence.java

Content: 

/** 

 * Create a new NodeSequence from a (already cloned) iterator.

 * @param iter             Cloned (not static) DTMIterator.

 * @param context          The initial context node.

 * @param xctxt            The execution context.

 * @param shouldCacheNodes True if this sequence can random access.

 */

private NodeSequence(DTMIterator iter,int context,XPathContext xctxt,boolean shouldCacheNodes){

  setIter(iter);

  setRoot(context,xctxt);

  setShouldCacheNodes(shouldCacheNodes);

}

Location: NodeSequence.java

Content: 

/** 

 * Construct an empty XNodeSet object. This is used to create a mutable nodeset to which random nodes may be added.

 */

private NodeSequence(DTMManager dtmMgr){

  super(new NodeVector());

  m_last=0;

  m_dtmMgr=dtmMgr;

}

Location: NodeSequence.java

Content: 

/** 

 * Create a new NodeSequence from a (already cloned) iterator.

 * @param nodeVector

 */

public NodeSequence(Object nodeVector){

  super(nodeVector);

  if (nodeVector instanceof NodeVector) {

    SetVector((NodeVector)nodeVector);

  }

  if (null != nodeVector) {

    assertion(nodeVector instanceof NodeVector,"Must have a NodeVector as the object for NodeSequence!");

    if (nodeVector instanceof DTMIterator) {

      setIter((DTMIterator)nodeVector);

      m_last=((DTMIterator)nodeVector).getLength();

    }

  }

}

Location: NodeSequence.java

Content: 

/** 

 * Set the functional iterator that fetches nodes.

 * @param iter The iterator that is to be contained.

 */

public final void setIter(DTMIterator iter){

  m_iter=iter;

}

Location: NodeSequence.java

Content: 

/** 

 * Set the vector where nodes will be cached.

 */

protected void SetVector(NodeVector v){

  setObject(v);

}

