Location: MatchPatternIterator.java

Content: 

/** 

 * Test whether a specified node is visible in the logical view of a TreeWalker or NodeIterator. This function will be called by the implementation of TreeWalker and NodeIterator; it is not intended to be called directly from user code.

 * @param n The node to check to see if it passes the filter or not.

 * @return a constant to determine whether the node is accepted, rejected, orskipped, as defined above .

 */

public short acceptNode(int n,XPathContext xctxt){

  try {

    xctxt.pushCurrentNode(n);

    xctxt.pushIteratorRoot(m_context);

    if (DEBUG) {

      System.out.println("traverser: " + m_traverser);

      System.out.print("node: " + n);

      System.out.println(", " + m_cdtm.getNodeName(n));

      System.out.println("pattern: " + m_pattern.toString());

      m_pattern.debugWhatToShow(m_pattern.getWhatToShow());

    }

    XObject score=m_pattern.execute(xctxt);

    if (DEBUG) {

      System.out.println("score: " + score);

      System.out.println("skip: " + (score == NodeTest.SCORE_NONE));

    }

    return (score == NodeTest.SCORE_NONE) ? DTMIterator.FILTER_SKIP : DTMIterator.FILTER_ACCEPT;

  }

 catch (  javax.xml.transform.TransformerException se) {

    throw new RuntimeException(se.getMessage());

  }

 finally {

    xctxt.popCurrentNode();

    xctxt.popIteratorRoot();

  }

}

Location: MatchPatternIterator.java

Content: 

/** 

 * Create a LocPathIterator object, including creation of step walkers from the opcode list, and call back into the Compiler to create predicate expressions.

 * @param compiler The Compiler which is creating this expression.

 * @param opPos    The position of this iterator in the opcode list from thecompiler.

 * @param analysis Analysis bits that give general information about theLocationPath.

 * @throws javax.xml.transform.TransformerException

 */

MatchPatternIterator(Compiler compiler,int opPos,int analysis) throws javax.xml.transform.TransformerException {

  super(compiler,opPos,analysis,false);

  int firstStepPos=OpMap.getFirstChildPos(opPos);

  m_pattern=WalkerFactory.loadSteps(this,compiler,firstStepPos,0);

  boolean fromRoot=false;

  boolean walkBack=false;

  boolean walkDescendants=false;

  boolean walkAttributes=false;

  if (0 != (analysis & (WalkerFactory.BIT_ROOT | WalkerFactory.BIT_ANY_DESCENDANT_FROM_ROOT)))   fromRoot=true;

  if (0 != (analysis & (WalkerFactory.BIT_ANCESTOR | WalkerFactory.BIT_ANCESTOR_OR_SELF | WalkerFactory.BIT_PRECEDING| WalkerFactory.BIT_PRECEDING_SIBLING| WalkerFactory.BIT_FOLLOWING| WalkerFactory.BIT_FOLLOWING_SIBLING| WalkerFactory.BIT_PARENT| WalkerFactory.BIT_FILTER)))   walkBack=true;

  if (0 != (analysis & (WalkerFactory.BIT_DESCENDANT_OR_SELF | WalkerFactory.BIT_DESCENDANT | WalkerFactory.BIT_CHILD)))   walkDescendants=true;

  if (0 != (analysis & (WalkerFactory.BIT_ATTRIBUTE | WalkerFactory.BIT_NAMESPACE)))   walkAttributes=true;

  if (false || DEBUG) {

    System.out.print("analysis: " + Integer.toBinaryString(analysis));

    System.out.println(", " + WalkerFactory.getAnalysisString(analysis));

  }

  if (fromRoot || walkBack) {

    if (walkAttributes) {

      m_superAxis=Axis.ALL;

    }

 else {

      m_superAxis=Axis.DESCENDANTSFROMROOT;

    }

  }

 else   if (walkDescendants) {

    if (walkAttributes) {

      m_superAxis=Axis.ALLFROMNODE;

    }

 else {

      m_superAxis=Axis.DESCENDANTORSELF;

    }

  }

 else {

    m_superAxis=Axis.ALL;

  }

  if (false || DEBUG) {

    System.out.println("axis: " + Axis.getNames(m_superAxis));

  }

}

