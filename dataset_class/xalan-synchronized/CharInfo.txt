Location: CharInfo.java

Content: 

/** 

 * Returns the array element holding the bit value for the given integer

 * @param i the integer that might be in the set of integers

 */

private static int arrayIndex(int i){

  return (i >> SHIFT_PER_WORD);

}

Location: CharInfo.java

Content: 

/** 

 * For a given integer in the set it returns the single bit value used within a given word that represents whether the integer is in the set or not.

 */

private static int bit(int i){

  int ret=(1 << (i & LOW_ORDER_BITMASK));

  return ret;

}

Location: CharInfo.java

Content: 

/** 

 * A base constructor just to explicitly create the fields, with the exception of m_charToString which is handled by the constructor that delegates base construction to this one. <p> m_charToString is not created here only for performance reasons, to avoid creating a Hashtable that will be replaced when making a mutable copy, {@link #mutableCopyOf(CharInfo)}.

 */

private CharInfo(){

  this.array_of_bits=createEmptySetOfIntegers(65535);

  this.firstWordNotUsed=0;

  this.shouldMapAttrChar_ASCII=new boolean[ASCII_MAX];

  this.shouldMapTextChar_ASCII=new boolean[ASCII_MAX];

  this.m_charKey=new CharKey();

  this.onlyQuotAmpLtGt=true;

  return;

}

Location: CharInfo.java

Content: 

private CharInfo(String entitiesResource,String method,boolean internal){

  this();

  m_charToString=new HashMap();

  ResourceBundle entities=null;

  boolean noExtraEntities=true;

  if (internal) {

    try {

      entities=PropertyResourceBundle.getBundle(entitiesResource);

    }

 catch (    Exception e) {

    }

  }

  if (entities != null) {

    Enumeration keys=entities.getKeys();

    while (keys.hasMoreElements()) {

      String name=(String)keys.nextElement();

      String value=entities.getString(name);

      int code=Integer.parseInt(value);

      boolean extra=defineEntity(name,(char)code);

      if (extra)       noExtraEntities=false;

    }

  }

 else {

    InputStream is=null;

    try {

      if (internal) {

        is=CharInfo.class.getResourceAsStream(entitiesResource);

      }

 else {

        ClassLoader cl=ObjectFactory.findClassLoader();

        if (cl == null) {

          is=ClassLoader.getSystemResourceAsStream(entitiesResource);

        }

 else {

          is=cl.getResourceAsStream(entitiesResource);

        }

        if (is == null) {

          try {

            URL url=new URL(entitiesResource);

            is=url.openStream();

          }

 catch (          Exception e) {

          }

        }

      }

      if (is == null) {

        throw new RuntimeException(Utils.messages.createMessage(MsgKey.ER_RESOURCE_COULD_NOT_FIND,new Object[]{entitiesResource,entitiesResource}));

      }

      BufferedReader reader;

      try {

        reader=new BufferedReader(new InputStreamReader(is,"UTF-8"));

      }

 catch (      UnsupportedEncodingException e) {

        reader=new BufferedReader(new InputStreamReader(is));

      }

      String line=reader.readLine();

      while (line != null) {

        if (line.length() == 0 || line.charAt(0) == '#') {

          line=reader.readLine();

          continue;

        }

        int index=line.indexOf(' ');

        if (index > 1) {

          String name=line.substring(0,index);

          ++index;

          if (index < line.length()) {

            String value=line.substring(index);

            index=value.indexOf(' ');

            if (index > 0) {

              value=value.substring(0,index);

            }

            int code=Integer.parseInt(value);

            boolean extra=defineEntity(name,(char)code);

            if (extra)             noExtraEntities=false;

          }

        }

        line=reader.readLine();

      }

      is.close();

    }

 catch (    Exception e) {

      throw new RuntimeException(Utils.messages.createMessage(MsgKey.ER_RESOURCE_COULD_NOT_LOAD,new Object[]{entitiesResource,e.toString(),entitiesResource,e.toString()}));

    }

 finally {

      if (is != null) {

        try {

          is.close();

        }

 catch (        Exception except) {

        }

      }

    }

  }

  onlyQuotAmpLtGt=noExtraEntities;

  if (Method.XML.equals(method)) {

    shouldMapTextChar_ASCII[S_QUOTE]=false;

  }

  if (Method.HTML.equals(method)) {

    shouldMapAttrChar_ASCII['<']=false;

    shouldMapTextChar_ASCII[S_QUOTE]=false;

  }

}

Location: CharInfo.java

Content: 

/** 

 * Creates a new empty set of integers (characters)

 * @param max the maximum integer to be in the set.

 */

private int[] createEmptySetOfIntegers(int max){

  firstWordNotUsed=0;

  int[] arr=new int[arrayIndex(max - 1) + 1];

  return arr;

}

Location: CharInfo.java

Content: 

/** 

 * Call this method to register a char to String mapping, for example to map '<' to "&lt;".

 * @param outputString The String to map to.

 * @param inputChar    The char to map from.

 * @return true if the mapping is not one of:<ul> <li>'<' to "&lt;" <li>'>' to "&gt;" <li>'&' to "&amp;" <li>'"' to "&quot;" </ul>

 */

boolean defineChar2StringMapping(String outputString,char inputChar){

  CharKey character=new CharKey(inputChar);

  m_charToString.put(character,outputString);

  set(inputChar);

  boolean extraMapping=extraEntity(outputString,inputChar);

  return extraMapping;

}

Location: CharInfo.java

Content: 

/** 

 * Defines a new character reference. The reference's name and value are supplied. Nothing happens if the character reference is already defined. <p> Unlike internal entities, character references are a string to single character mapping. They are used to map non-ASCII characters both on parsing and printing, primarily for HTML documents. '&amp;lt;' is an example of a character reference. </p>

 * @param name  The entity's name

 * @param value The entity's value

 * @return true if the mapping is not one of:<ul> <li>'<' to "&lt;" <li>'>' to "&gt;" <li>'&' to "&amp;" <li>'"' to "&quot;" </ul>

 */

private boolean defineEntity(String name,char value){

  StringBuffer sb=new StringBuffer("&");

  sb.append(name);

  sb.append(';');

  String entityString=sb.toString();

  boolean extra=defineChar2StringMapping(entityString,value);

  return extra;

}

Location: CharInfo.java

Content: 

/** 

 * This method returns true if there are some non-standard mappings to entities other than quot, amp, lt, gt, and its only purpose is for performance.

 * @param charToMap    The value of the character that is mapped to a String

 * @param outputString The String to which the character is mapped, usually anentity reference such as "&lt;".

 * @return true if the mapping is not one of:<ul> <li>'<' to "&lt;" <li>'>' to "&gt;" <li>'&' to "&amp;" <li>'"' to "&quot;" </ul>

 */

private boolean extraEntity(String outputString,int charToMap){

  boolean extra=false;

  if (charToMap < ASCII_MAX) {

switch (charToMap) {

case '"':

      if (!outputString.equals("&quot;"))       extra=true;

    break;

case '&':

  if (!outputString.equals("&amp;"))   extra=true;

break;

case '<':

if (!outputString.equals("&lt;")) extra=true;

break;

case '>':

if (!outputString.equals("&gt;")) extra=true;

break;

default :

extra=true;

}

}

return extra;

}

Location: CharInfo.java

Content: 

private static CharInfo getCharInfoBasedOnPrivilege(final String entitiesFileName,final String method,final boolean internal){

  return (CharInfo)AccessController.doPrivileged(new PrivilegedAction(){

    public Object run(){

      return new CharInfo(entitiesFileName,method,internal);

    }

  }

);

}

Location: CharInfo.java

Content: 

/** 

 * Factory that reads in a resource file that describes the mapping of characters to entity references. Resource files must be encoded in UTF-8 and have a format like: <pre> # First char # is a comment Entity numericValue quot 34 amp 38 </pre> (Note: Why don't we just switch to .properties files? Oct-01 -sc)

 * @param entitiesResource Name of entities resource file that should be loaded,which describes that mapping of characters to entity references.

 * @param method           the output method type, which should be one of "xml","html", "text"...

 * @xsl.usage internal

 */

static CharInfo getCharInfo(String entitiesFileName,String method){

  CharInfo charInfo=(CharInfo)m_getCharInfoCache.get(entitiesFileName);

  if (charInfo != null) {

    return mutableCopyOf(charInfo);

  }

  try {

    charInfo=getCharInfoBasedOnPrivilege(entitiesFileName,method,true);

    m_getCharInfoCache.put(entitiesFileName,charInfo);

    return mutableCopyOf(charInfo);

  }

 catch (  Exception e) {

  }

  try {

    return getCharInfoBasedOnPrivilege(entitiesFileName,method,false);

  }

 catch (  Exception e) {

  }

  String absoluteEntitiesFileName;

  if (entitiesFileName.indexOf(':') < 0) {

    absoluteEntitiesFileName=SystemIDResolver.getAbsoluteURIFromRelative(entitiesFileName);

  }

 else {

    try {

      absoluteEntitiesFileName=SystemIDResolver.getAbsoluteURI(entitiesFileName,null);

    }

 catch (    TransformerException te) {

      throw new WrappedRuntimeException(te);

    }

  }

  return getCharInfoBasedOnPrivilege(entitiesFileName,method,false);

}

Location: CharInfo.java

Content: 

/** 

 * Map a character to a String. For example given the character '>' this method would return the fully decorated entity name "&lt;". Strings for entity references are loaded from a properties file, but additional mappings defined through calls to defineChar2String() are possible. Such entity reference mappings could be over-ridden. This is reusing a stored key object, in an effort to avoid heap activity. Unfortunately, that introduces a threading risk. Simplest fix for now is to make it a synchronized method, or to give up the reuse; I see very little performance difference between them. Long-term solution would be to replace the hashtable with a sparse array keyed directly from the character's integer value; see DTM's string pool for a related solution.

 * @param value The character that should be resolved to a String, e.g. resolve'>' to "&lt;".

 * @return The String that the character is mapped to, or null if not found.

 * @xsl.usage internal

 */

String getOutputStringForChar(char value){

  m_charKey.setChar(value);

  return (String)m_charToString.get(m_charKey);

}

Location: CharInfo.java

Content: 

/** 

 * Return true if the integer (character)is in the set of integers. This implementation uses an array of integers with 32 bits per integer. If a bit is set to 1 the corresponding integer is in the set of integers.

 * @param i an integer that is tested to see if it is the set of integers, ornot.

 */

private final boolean get(int i){

  boolean in_the_set=false;

  int j=(i >> SHIFT_PER_WORD);

  if (j < firstWordNotUsed)   in_the_set=(array_of_bits[j] & (1 << (i & LOW_ORDER_BITMASK))) != 0;

  return in_the_set;

}

Location: CharInfo.java

Content: 

/** 

 * Create a mutable copy of the cached one.

 * @param charInfo The cached one.

 * @return

 */

private static CharInfo mutableCopyOf(CharInfo charInfo){

  CharInfo copy=new CharInfo();

  int max=charInfo.array_of_bits.length;

  System.arraycopy(charInfo.array_of_bits,0,copy.array_of_bits,0,max);

  copy.firstWordNotUsed=charInfo.firstWordNotUsed;

  max=charInfo.shouldMapAttrChar_ASCII.length;

  System.arraycopy(charInfo.shouldMapAttrChar_ASCII,0,copy.shouldMapAttrChar_ASCII,0,max);

  max=charInfo.shouldMapTextChar_ASCII.length;

  System.arraycopy(charInfo.shouldMapTextChar_ASCII,0,copy.shouldMapTextChar_ASCII,0,max);

  copy.m_charToString=(HashMap)charInfo.m_charToString.clone();

  copy.onlyQuotAmpLtGt=charInfo.onlyQuotAmpLtGt;

  return copy;

}

Location: CharInfo.java

Content: 

/** 

 * If the character is in the ASCII range then mark it as needing replacement with a String on output if it occurs in a attribute value.

 * @param ch

 */

private void setASCIIattrDirty(int j){

  if (0 <= j && j < ASCII_MAX) {

    shouldMapAttrChar_ASCII[j]=true;

  }

}

Location: CharInfo.java

Content: 

/** 

 * If the character is in the ASCII range then mark it as needing replacement with a String on output if it occurs in a text node.

 * @param ch

 */

private void setASCIItextDirty(int j){

  if (0 <= j && j < ASCII_MAX) {

    shouldMapTextChar_ASCII[j]=true;

  }

}

Location: CharInfo.java

Content: 

/** 

 * Adds the integer (character) to the set of integers.

 * @param i the integer to add to the set, valid values are 0, 1, 2 ... up tothe maximum that was specified at the creation of the set.

 */

private final void set(int i){

  setASCIItextDirty(i);

  setASCIIattrDirty(i);

  int j=(i >> SHIFT_PER_WORD);

  int k=j + 1;

  if (firstWordNotUsed < k)   firstWordNotUsed=k;

  array_of_bits[j]|=(1 << (i & LOW_ORDER_BITMASK));

}

Location: CharInfo.java

Content: 

/** 

 * Tell if the character argument that is from an attribute value has a mapping to a String.

 * @param value the value of a character that is in an attribute value

 * @return true if the character should have any special treatment, such as whenwriting out entity references.

 * @xsl.usage internal

 */

final boolean shouldMapAttrChar(int value){

  if (value < ASCII_MAX)   return shouldMapAttrChar_ASCII[value];

  return get(value);

}

Location: CharInfo.java

Content: 

/** 

 * Tell if the character argument that is from a text node has a mapping to a String, for example to map '<' to "&lt;".

 * @param value the value of a character that is in a text node

 * @return true if the character has a mapping to a String, such as when writingout entity references.

 * @xsl.usage internal

 */

final boolean shouldMapTextChar(int value){

  if (value < ASCII_MAX)   return shouldMapTextChar_ASCII[value];

  return get(value);

}

