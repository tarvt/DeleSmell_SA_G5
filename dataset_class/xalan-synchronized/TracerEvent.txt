Location: TracerEvent.java

Content: 

/** 

 * Returns a string representation of the node list. The string will contain the list of nodes inside square braces. Elements will contain the element name and any attributes enclosed in angle brackets. Attributes will be of form, "name=value."

 * @param l any DOM node list. Must not be null.

 * @return a string representation of the given node list.

 */

public static String printNodeList(NodeList l){

  String r=l.hashCode() + "[";

  int len=l.getLength() - 1;

  int i=0;

  while (i < len) {

    Node n=l.item(i);

    if (null != n) {

      r+=printNode(n) + ", ";

    }

    ++i;

  }

  if (i == len) {

    Node n=l.item(len);

    if (null != n) {

      r+=printNode(n);

    }

  }

  return r + "]";

}

Location: TracerEvent.java

Content: 

/** 

 * Returns a string representation of the node. The string returned for elements will contain the element name and any attributes enclosed in angle brackets. The string returned for attributes will be of form, "name=value."

 * @param n any DOM node. Must not be null.

 * @return a string representation of the given node.

 */

public static String printNode(Node n){

  String r=n.hashCode() + " ";

  if (n instanceof Element) {

    r+="<" + n.getNodeName();

    Node c=n.getFirstChild();

    while (null != c) {

      if (c instanceof Attr) {

        r+=printNode(c) + " ";

      }

      c=c.getNextSibling();

    }

    r+=">";

  }

 else {

    if (n instanceof Attr) {

      r+=n.getNodeName() + "=" + n.getNodeValue();

    }

 else {

      r+=n.getNodeName();

    }

  }

  return r;

}

Location: TracerEvent.java

Content: 

/** 

 * Create an event originating at the given node of the style tree.

 * @param processor  The XSLT TransformerFactory.

 * @param sourceNode The current context node.

 * @param mode       The current mode.

 * @param styleNode  The stylesheet element that is executing.

 */

public TracerEvent(TransformerImpl processor,Node sourceNode,QName mode,ElemTemplateElement styleNode){

  this.m_processor=processor;

  this.m_sourceNode=sourceNode;

  this.m_mode=mode;

  this.m_styleNode=styleNode;

}

