Location: FuncExtFunction.java

Content: 

/** 

 * Set the parent node. For an extension function, we also need to set the parent node for all argument expressions.

 * @param n The parent node

 */

public void exprSetParent(ExpressionNode n){

  super.exprSetParent(n);

  int nArgs=m_argVec.size();

  for (int i=0; i < nArgs; i++) {

    Expression arg=(Expression)m_argVec.elementAt(i);

    arg.exprSetParent(n);

  }

}

Location: FuncExtFunction.java

Content: 

/** 

 * Create a new FuncExtFunction based on the qualified name of the extension, and a unique method key.

 * @param namespace     The namespace for the extension function, which shouldnot normally be null or empty.

 * @param extensionName The local name of the extension.

 * @param methodKey     Unique method key, which is passed toExtensionsTable#extFunction in order to allow caching of the method.

 */

public FuncExtFunction(java.lang.String namespace,java.lang.String extensionName,Object methodKey){

  m_namespace=namespace;

  m_extensionName=extensionName;

  m_methodKey=methodKey;

}

Location: FuncExtFunction.java

Content: 

/** 

 * Return the number of arguments that were passed into this extension function.

 * @return The number of arguments.

 */

public int getArgCount(){

  return m_argVec.size();

}

Location: FuncExtFunction.java

Content: 

/** 

 * Return the nth argument passed to the extension function.

 * @param n The argument number index.

 * @return The Expression object at the given index.

 */

public Expression getArg(int n){

  if (n >= 0 && n < m_argVec.size())   return (Expression)m_argVec.elementAt(n);

 else   return null;

}

Location: FuncExtFunction.java

Content: 

/** 

 * Return the name of the extension function.

 * @return The name of the extension function.

 */

public String getFunctionName(){

  return m_extensionName;

}

Location: FuncExtFunction.java

Content: 

/** 

 * Return the method key of the extension function.

 * @return The method key of the extension function.

 */

public Object getMethodKey(){

  return m_methodKey;

}

