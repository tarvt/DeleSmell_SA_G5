Location: IteratorPool.java

Content: 

/** 

 * Add an instance of the given object to the pool

 * @param obj Object to add.

 */

public synchronized void freeInstance(DTMIterator obj){

  m_freeStack.add(obj);

}

Location: IteratorPool.java

Content: 

/** 

 * Get an instance of the given object in this pool

 * @return An instance of the given object

 */

public synchronized DTMIterator getInstance(){

  if (m_freeStack.isEmpty()) {

    try {

      return (DTMIterator)m_orig.clone();

    }

 catch (    Exception ex) {

      throw new WrappedRuntimeException(ex);

    }

  }

 else {

    DTMIterator result=(DTMIterator)m_freeStack.remove(m_freeStack.size() - 1);

    return result;

  }

}

Location: IteratorPool.java

Content: 

/** 

 * Get an instance of the given object in this pool

 * @return An instance of the given object

 */

public synchronized DTMIterator getInstanceOrThrow() throws CloneNotSupportedException {

  if (m_freeStack.isEmpty()) {

    return (DTMIterator)m_orig.clone();

  }

 else {

    DTMIterator result=(DTMIterator)m_freeStack.remove(m_freeStack.size() - 1);

    return result;

  }

}

Location: IteratorPool.java

Content: 

/** 

 * Constructor IteratorPool

 * @param original The original iterator from which all others will be cloned.

 */

public IteratorPool(DTMIterator original){

  m_orig=original;

  m_freeStack=new ArrayList();

}

