Location: Hashtree2Node.java

Content: 

/** 

 * Convert a Hashtable into a Node tree. <p> The hash may have either Hashtables as values (in which case we recurse) or other values, in which case we print them as &lt;item> elements, with a 'key' attribute with the value of the key, and the element contents as the value. </p> <p> If args are null we simply return without doing anything. If we encounter an error, we will attempt to add an 'ERROR' Element with exception info; if that doesn't work we simply return without doing anything else byt printStackTrace(). </p>

 * @param hash      to get info from (may have sub-hashtables)

 * @param name      to use as parent element for appended node futurework couldhave namespace and prefix as well

 * @param container Node to append our report to

 * @param factory   Document providing createElement, etc. services

 */

public static void appendHashToNode(Hashtable hash,String name,Node container,Document factory){

  if ((null == container) || (null == factory) || (null == hash)) {

    return;

  }

  String elemName=null;

  if ((null == name) || ("".equals(name)))   elemName="appendHashToNode";

 else   elemName=name;

  try {

    Element hashNode=factory.createElement(elemName);

    container.appendChild(hashNode);

    Enumeration keys=hash.keys();

    List v=new ArrayList();

    while (keys.hasMoreElements()) {

      Object key=keys.nextElement();

      String keyStr=key.toString();

      Object item=hash.get(key);

      if (item instanceof Hashtable) {

        v.add(keyStr);

        v.add((Hashtable)item);

      }

 else {

        try {

          Element node=factory.createElement("item");

          node.setAttribute("key",keyStr);

          node.appendChild(factory.createTextNode((String)item));

          hashNode.appendChild(node);

        }

 catch (        Exception e) {

          Element node=factory.createElement("item");

          node.setAttribute("key",keyStr);

          node.appendChild(factory.createTextNode("ERROR: Reading " + key + " threw: "+ e.toString()));

          hashNode.appendChild(node);

        }

      }

    }

    Iterator it=v.iterator();

    while (it.hasNext()) {

      String n=(String)it.next();

      Hashtable h=(Hashtable)it.next();

      appendHashToNode(h,n,hashNode,factory);

    }

  }

 catch (  Exception e2) {

    e2.printStackTrace();

  }

}

