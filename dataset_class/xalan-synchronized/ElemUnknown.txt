Location: ElemUnknown.java

Content: 

/** 

 * Execute the fallbacks when an extension is not available.

 * @param transformer non-null reference to the the current transform-timestate.

 * @throws TransformerException

 */

private void executeFallbacks(TransformerImpl transformer) throws TransformerException {

  for (ElemTemplateElement child=m_firstChild; child != null; child=child.m_nextSibling) {

    if (child.getXSLToken() == Constants.ELEMNAME_FALLBACK) {

      try {

        transformer.pushElemTemplateElement(child);

        ((ElemFallback)child).executeFallback(transformer);

      }

  finally {

        transformer.popElemTemplateElement();

      }

    }

  }

}

Location: ElemUnknown.java

Content: 

/** 

 * Return true if this extension element has a <xsl:fallback> child element.

 * @return true if this extension element has a <xsl:fallback> child element.

 */

private boolean hasFallbackChildren(){

  for (ElemTemplateElement child=m_firstChild; child != null; child=child.m_nextSibling) {

    if (child.getXSLToken() == Constants.ELEMNAME_FALLBACK)     return true;

  }

  return false;

}

