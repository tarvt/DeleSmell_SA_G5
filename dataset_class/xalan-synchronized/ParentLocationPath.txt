Location: ParentLocationPath.java

Content: 

/** 

 * This method is used to determine if this parent location path is a combination of two step's with axes that will create duplicate or unordered nodes.

 */

public boolean checkAxisMismatch(){

  int left=_path.getAxis();

  int right=((Step)_step).getAxis();

  if (((left == Axis.ANCESTOR) || (left == Axis.ANCESTORORSELF)) && ((right == Axis.CHILD) || (right == Axis.DESCENDANT) || (right == Axis.DESCENDANTORSELF)|| (right == Axis.PARENT)|| (right == Axis.PRECEDING)|| (right == Axis.PRECEDINGSIBLING)))   return true;

  if ((left == Axis.CHILD) && (right == Axis.ANCESTOR) || (right == Axis.ANCESTORORSELF) || (right == Axis.PARENT) || (right == Axis.PRECEDING))   return true;

  if ((left == Axis.DESCENDANT) || (left == Axis.DESCENDANTORSELF))   return true;

  if (((left == Axis.FOLLOWING) || (left == Axis.FOLLOWINGSIBLING)) && ((right == Axis.FOLLOWING) || (right == Axis.PARENT) || (right == Axis.PRECEDING)|| (right == Axis.PRECEDINGSIBLING)))   return true;

  if (((left == Axis.PRECEDING) || (left == Axis.PRECEDINGSIBLING)) && ((right == Axis.DESCENDANT) || (right == Axis.DESCENDANTORSELF) || (right == Axis.FOLLOWING)|| (right == Axis.FOLLOWINGSIBLING)|| (right == Axis.PARENT)|| (right == Axis.PRECEDING)|| (right == Axis.PRECEDINGSIBLING)))   return true;

  if ((right == Axis.FOLLOWING) && (left == Axis.CHILD)) {

    if (_path instanceof Step) {

      int type=((Step)_path).getNodeType();

      if (type == DTM.ATTRIBUTE_NODE)       return true;

    }

  }

  return false;

}

Location: ParentLocationPath.java

Content: 

public void enableNodeOrdering(){

  SyntaxTreeNode parent=getParent();

  if (parent instanceof ParentLocationPath)   ((ParentLocationPath)parent).enableNodeOrdering();

 else {

    _orderNodes=true;

  }

}

Location: ParentLocationPath.java

Content: 

public Expression getStep(){

  return (_step);

}

Location: ParentLocationPath.java

Content: 

public ParentLocationPath(RelativeLocationPath path,Expression step){

  _path=path;

  _step=step;

  _path.setParent(this);

  _step.setParent(this);

  if (_step instanceof Step) {

    _axisMismatch=checkAxisMismatch();

  }

}

