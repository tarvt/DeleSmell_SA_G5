Location: Expression.java

Content: 

/** 

 * Given an select expression and a context, evaluate the XPath and return the resulting iterator, but do not clone.

 * @param xctxt       The execution context.

 * @param contextNode The node that "." expresses.

 * @return A valid DTMIterator.

 * @throws TransformerException                     thrown if the activeProblemListener decides the error condition is severe enough to halt processing.

 * @throws javax.xml.transform.TransformerException

 * @xsl.usage experimental

 */

public DTMIterator asIteratorRaw(XPathContext xctxt,int contextNode) throws javax.xml.transform.TransformerException {

  try {

    xctxt.pushCurrentNodeAndExpression(contextNode,contextNode);

    XNodeSet nodeset=(XNodeSet)execute(xctxt);

    return nodeset.iterRaw();

  }

  finally {

    xctxt.popCurrentNodeAndExpression();

  }

}

Location: Expression.java

Content: 

public void backPatchFalseList(InstructionHandle ih){

  _falseList.backPatch(ih);

}

Location: Expression.java

Content: 

public void backPatchTrueList(InstructionHandle ih){

  _trueList.backPatch(ih);

}

Location: Expression.java

Content: 

public void desynthesize(ClassGenerator classGen,MethodGenerator methodGen){

  final InstructionList il=methodGen.getInstructionList();

  _falseList.add(il.append(new IFEQ(null)));

}

Location: Expression.java

Content: 

/** 

 * Tell the user of an error, and probably throw an exception.

 * @param xctxt The XPath runtime context.

 * @param msg   An error msgkey that corresponds to one of the constants foundin  {@link org.apache.xpath.res.XPATHErrorResources}, which is a key for a format string.

 * @param args  An array of arguments represented in the format string, whichmay be null.

 * @throws TransformerException                     if the current ErrorListonerdetermines to throw an exception.

 * @throws javax.xml.transform.TransformerException

 */

public void error(XPathContext xctxt,String msg,Object[] args) throws javax.xml.transform.TransformerException {

  java.lang.String fmsg=XSLMessages.createXPATHMessage(msg,args);

  if (null != xctxt) {

    ErrorListener eh=xctxt.getErrorListener();

    TransformerException te=new TransformerException(fmsg,this);

    eh.fatalError(te);

  }

}

Location: Expression.java

Content: 

/** 

 * This method tells the node to add its argument to the node's list of children.

 */

public void exprAddChild(ExpressionNode n,int i){

  assertion(false,"exprAddChild method not implemented!");

}

Location: Expression.java

Content: 

/** 

 * This method returns a child node. The children are numbered from zero, left to right.

 */

public ExpressionNode exprGetChild(int i){

  return null;

}

Location: Expression.java

Content: 

/** 

 * Return the number of children the node has. 

 */

public int exprGetNumChildren(){

  return 0;

}

Location: Expression.java

Content: 

public ExpressionNode exprGetParent(){

  return m_parent;

}

Location: Expression.java

Content: 

/** 

 * Return the character position where the current document event ends. <p> <strong>Warning:</strong> The return value from the method is intended only as an approximation for the sake of error reporting; it is not intended to provide sufficient information to edit the character content of the original XML document. </p> <p> The return value is an approximation of the column number in the document entity or external parsed entity where the markup that triggered the event appears. </p>

 * @return The column number, or -1 if none is available.

 * @see #getLineNumber

 */

public int getColumnNumber(){

  if (null == m_parent)   return 0;

  return m_parent.getColumnNumber();

}

Location: Expression.java

Content: 

/** 

 * Get the first non-Expression parent of this node.

 * @return null or first ancestor that is not an Expression.

 */

public ExpressionNode getExpressionOwner(){

  ExpressionNode parent=exprGetParent();

  while ((null != parent) && (parent instanceof Expression))   parent=parent.exprGetParent();

  return parent;

}

Location: Expression.java

Content: 

public FlowList getFalseList(){

  return _falseList;

}

Location: Expression.java

Content: 

/** 

 * Return the line number where the current document event ends. <p> <strong>Warning:</strong> The return value from the method is intended only as an approximation for the sake of error reporting; it is not intended to provide sufficient information to edit the character content of the original XML document. </p> <p> The return value is an approximation of the line number in the document entity or external parsed entity where the markup that triggered the event appears. </p>

 * @return The line number, or -1 if none is available.

 * @see #getColumnNumber

 */

public int getLineNumber(){

  if (null == m_parent)   return 0;

  return m_parent.getLineNumber();

}

Location: Expression.java

Content: 

/** 

 * Return the public identifier for the current document event. <p> The return value is the public identifier of the document entity or of the external parsed entity in which the markup that triggered the event appears. </p>

 * @return A string containing the public identifier, or null if none isavailable.

 * @see #getSystemId

 */

public String getPublicId(){

  if (null == m_parent)   return null;

  return m_parent.getPublicId();

}

Location: Expression.java

Content: 

/** 

 * Return the system identifier for the current document event. <p> The return value is the system identifier of the document entity or of the external parsed entity in which the markup that triggered the event appears. </p> <p> If the system identifier is a URL, the parser must resolve it fully before passing it to the application. </p>

 * @return A string containing the system identifier, or null if none isavailable.

 * @see #getPublicId

 */

public String getSystemId(){

  if (null == m_parent)   return null;

  return m_parent.getSystemId();

}

Location: Expression.java

Content: 

public FlowList getTrueList(){

  return _trueList;

}

Location: Expression.java

Content: 

/** 

 * This is a utility method to tell if the passed in class is the same class as this. It is to be used by the deepEquals method. I'm bottlenecking it here because I'm not totally confident that comparing the class objects is the best way to do this.

 * @return true of the passed in class is the exact same class as this class.

 */

protected final boolean isSameClass(Expression expr){

  if (null == expr)   return false;

  return (getClass() == expr.getClass());

}

Location: Expression.java

Content: 

/** 

 * Search for a primop in the symbol table that matches the method type <code>ctype</code>. Two methods match if they have the same arity. If a primop is overloaded then the "closest match" is returned. The first entry in the vector of primops that has the right arity is considered to be the default one.

 */

public MethodType lookupPrimop(SymbolTable stable,String op,MethodType ctype){

  MethodType result=null;

  final Vector primop=stable.lookupPrimop(op);

  if (primop != null) {

    final int n=primop.size();

    int minDistance=Integer.MAX_VALUE;

    for (int i=0; i < n; i++) {

      final MethodType ptype=(MethodType)primop.elementAt(i);

      if (ptype.argsCount() != ctype.argsCount()) {

        continue;

      }

      if (result == null) {

        result=ptype;

      }

      final int distance=ctype.distanceTo(ptype);

      if (distance < minDistance) {

        minDistance=distance;

        result=ptype;

      }

    }

  }

  return result;

}

Location: Expression.java

Content: 

/** 

 * If this expression is of type node-set and it is not a variable reference, then call setStartNode() passing the context node.

 */

public void startIterator(ClassGenerator classGen,MethodGenerator methodGen){

  if (_type instanceof NodeSetType == false) {

    return;

  }

  Expression expr=this;

  if (expr instanceof CastExpr) {

    expr=((CastExpr)expr).getExpr();

  }

  if (expr instanceof VariableRefBase == false) {

    final InstructionList il=methodGen.getInstructionList();

    il.append(methodGen.loadContextNode());

    il.append(methodGen.setStartNode());

  }

}

Location: Expression.java

Content: 

/** 

 * Synthesize a boolean expression, i.e., either push a 0 or 1 onto the operand stack for the next statement to succeed. Returns the handle of the instruction to be backpatched.

 */

public void synthesize(ClassGenerator classGen,MethodGenerator methodGen){

  final ConstantPoolGen cpg=classGen.getConstantPool();

  final InstructionList il=methodGen.getInstructionList();

  _trueList.backPatch(il.append(ICONST_1));

  final BranchHandle truec=il.append(new GOTO_W(null));

  _falseList.backPatch(il.append(ICONST_0));

  truec.setTarget(il.append(NOP));

}

Location: Expression.java

Content: 

/** 

 * Warn the user of an problem.

 * @param xctxt The XPath runtime context.

 * @param msg   An error msgkey that corresponds to one of the conststants foundin  {@link org.apache.xpath.res.XPATHErrorResources}, which is a key for a format string.

 * @param args  An array of arguments represented in the format string, whichmay be null.

 * @throws TransformerException                     if the current ErrorListonerdetermines to throw an exception.

 * @throws javax.xml.transform.TransformerException

 */

public void warn(XPathContext xctxt,String msg,Object[] args) throws javax.xml.transform.TransformerException {

  java.lang.String fmsg=XSLMessages.createXPATHWarning(msg,args);

  if (null != xctxt) {

    ErrorListener eh=xctxt.getErrorListener();

    eh.warning(new TransformerException(fmsg,xctxt.getSAXLocator()));

  }

}

Location: Expression.java

Content: 

/** 

 * Cast result object to a string.

 * @param xctxt The XPath runtime context.

 * @return The string this wraps or the empty string if null

 * @throws javax.xml.transform.TransformerException

 */

public XMLString xstr(XPathContext xctxt) throws javax.xml.transform.TransformerException {

  return execute(xctxt).xstr();

}

