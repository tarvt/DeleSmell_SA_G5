Location: UnsupportedElement.java

Content: 

/** 

 * Scan and process all fallback children of the unsupported element.

 */

private void processFallbacks(Parser parser){

  Vector children=getContents();

  if (children != null) {

    final int count=children.size();

    for (int i=0; i < count; i++) {

      SyntaxTreeNode child=(SyntaxTreeNode)children.elementAt(i);

      if (child instanceof Fallback) {

        Fallback fallback=(Fallback)child;

        fallback.activate();

        fallback.parseContents(parser);

        if (_fallbacks == null) {

          _fallbacks=new Vector();

        }

        _fallbacks.addElement(child);

      }

    }

  }

}

Location: UnsupportedElement.java

Content: 

/** 

 * There are different categories of unsupported elements (believe it or not): there are elements within the XSLT namespace (these would be elements that are not yet implemented), there are extensions of other XSLT processors and there are unrecognised extension elements of this XSLT processor. The error message passed to this method should describe the unsupported element itself and what category the element belongs in.

 */

public void setErrorMessage(ErrorMsg message){

  _message=message;

}

Location: UnsupportedElement.java

Content: 

/** 

 * Basic consutrcor - stores element uri/prefix/localname

 */

public UnsupportedElement(String uri,String prefix,String local,boolean isExtension){

  super(uri,prefix,local);

  _isExtension=isExtension;

}

