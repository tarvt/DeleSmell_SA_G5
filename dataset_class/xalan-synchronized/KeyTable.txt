Location: KeyTable.java

Content: 

/** 

 * Add an association between a ref and a node in the m_refsTable. Requires that m_refsTable != null

 * @param xctxt XPath context

 * @param ref   the value of the use clause of the current key for the givennode

 * @param node  the node to reference

 */

private void addValueInRefsTable(XPathContext xctxt,XMLString ref,int node){

  XNodeSet nodes=(XNodeSet)m_refsTable.get(ref);

  if (nodes == null) {

    nodes=new XNodeSet(node,xctxt.getDTMManager());

    nodes.nextNode();

    m_refsTable.put(ref,nodes);

  }

 else {

    if (nodes.getCurrentNode() != node) {

      nodes.mutableNodeset().addNode(node);

      nodes.nextNode();

    }

  }

}

Location: KeyTable.java

Content: 

/** 

 * Get the document root matching this key.

 * @return the document root matching this key

 */

public int getDocKey(){

  return m_docKey;

}

Location: KeyTable.java

Content: 

/** 

 * @return key declarations for the key associated to this KeyTable

 */

private Vector getKeyDeclarations(){

  int nDeclarations=m_keyDeclarations.size();

  Vector keyDecls=new Vector(nDeclarations);

  for (int i=0; i < nDeclarations; i++) {

    KeyDeclaration kd=(KeyDeclaration)m_keyDeclarations.elementAt(i);

    if (kd.getName().equals(getKeyTableName())) {

      keyDecls.add(kd);

    }

  }

  return keyDecls;

}

Location: KeyTable.java

Content: 

KeyIterator getKeyIterator(){

  return (KeyIterator)(m_keyNodes.getContainedIter());

}

Location: KeyTable.java

Content: 

/** 

 * Get Key Name for this KeyTable

 * @return Key name

 */

public QName getKeyTableName(){

  return getKeyIterator().getName();

}

Location: KeyTable.java

Content: 

/** 

 * Given a valid element key, return the corresponding node list.

 * @param name The name of the key, which must match the 'name' attribute onxsl:key.

 * @param ref  The value that must match the value found by the 'match'attribute on xsl:key.

 * @return a set of nodes referenced by the key named <CODE>name</CODE> and thereference <CODE>ref</CODE>. If no node is referenced by this key, an empty node set is returned.

 */

public XNodeSet getNodeSetDTMByKey(QName name,XMLString ref){

  XNodeSet refNodes=(XNodeSet)getRefsTable().get(ref);

  try {

    if (refNodes != null) {

      refNodes=(XNodeSet)refNodes.cloneWithReset();

    }

  }

 catch (  CloneNotSupportedException e) {

    refNodes=null;

  }

  if (refNodes == null) {

    KeyIterator ki=(KeyIterator)(m_keyNodes).getContainedIter();

    XPathContext xctxt=ki.getXPathContext();

    refNodes=new XNodeSet(xctxt.getDTMManager()){

      public void setRoot(      int nodeHandle,      Object environment){

      }

    }

;

    refNodes.reset();

  }

  return refNodes;

}

Location: KeyTable.java

Content: 

/** 

 * @return lazy initialized refs table associating evaluation of key functionwith a XNodeSet

 */

private Hashtable getRefsTable(){

  if (m_refsTable == null) {

    m_refsTable=new Hashtable(89);

    KeyIterator ki=(KeyIterator)(m_keyNodes).getContainedIter();

    XPathContext xctxt=ki.getXPathContext();

    Vector keyDecls=getKeyDeclarations();

    int nKeyDecls=keyDecls.size();

    int currentNode;

    m_keyNodes.reset();

    while (DTM.NULL != (currentNode=m_keyNodes.nextNode())) {

      try {

        for (int keyDeclIdx=0; keyDeclIdx < nKeyDecls; keyDeclIdx++) {

          KeyDeclaration keyDeclaration=(KeyDeclaration)keyDecls.elementAt(keyDeclIdx);

          XObject xuse=keyDeclaration.getUse().execute(xctxt,currentNode,ki.getPrefixResolver());

          if (xuse.getType() != xuse.CLASS_NODESET) {

            XMLString exprResult=xuse.xstr();

            addValueInRefsTable(xctxt,exprResult,currentNode);

          }

 else {

            DTMIterator i=((XNodeSet)xuse).iterRaw();

            int currentNodeInUseClause;

            while (DTM.NULL != (currentNodeInUseClause=i.nextNode())) {

              DTM dtm=xctxt.getDTM(currentNodeInUseClause);

              XMLString exprResult=dtm.getStringValue(currentNodeInUseClause);

              addValueInRefsTable(xctxt,exprResult,currentNode);

            }

          }

        }

      }

 catch (      TransformerException te) {

        throw new WrappedRuntimeException(te);

      }

    }

  }

  return m_refsTable;

}

Location: KeyTable.java

Content: 

/** 

 * Build a keys table.

 * @param doc             The owner document key.

 * @param nscontext       The stylesheet's namespace context.

 * @param name            The key name

 * @param keyDeclarations The stylesheet's xsl:key declarations.

 * @throws javax.xml.transform.TransformerException

 */

public KeyTable(int doc,PrefixResolver nscontext,QName name,Vector keyDeclarations,XPathContext xctxt) throws javax.xml.transform.TransformerException {

  m_docKey=doc;

  m_keyDeclarations=keyDeclarations;

  KeyIterator ki=new KeyIterator(name,keyDeclarations);

  m_keyNodes=new XNodeSet(ki);

  m_keyNodes.allowDetachToRelease(false);

  m_keyNodes.setRoot(doc,xctxt);

}

