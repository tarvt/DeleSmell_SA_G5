Location: StylesheetPIHandler.java

Content: 

/** 

 * Return the last stylesheet found that match the constraints.

 * @return Source object that references the last stylesheet reference thatmatches the constraints.

 */

public Source getAssociatedStylesheet(){

  int sz=m_stylesheets.size();

  if (sz > 0) {

    Source source=(Source)m_stylesheets.elementAt(sz - 1);

    return source;

  }

 else   return null;

}

Location: StylesheetPIHandler.java

Content: 

public String getBaseId(){

  return m_baseID;

}

Location: StylesheetPIHandler.java

Content: 

/** 

 * Handle the xml-stylesheet processing instruction.

 * @param target The processing instruction target.

 * @param data   The processing instruction data, or null if none is supplied.

 * @throws org.xml.sax.SAXException Any SAX exception, possibly wrapping anotherexception.

 * @see org.xml.sax.ContentHandler#processingInstruction

 * @see <a href="http://www.w3.org/TR/xml-stylesheet/">Associating Style Sheets

	 *      with XML documents, Version 1.0</a>

 */

public void processingInstruction(String target,String data) throws org.xml.sax.SAXException {

  if (target.equals("xml-stylesheet")) {

    String href=null;

    String type=null;

    String title=null;

    String media=null;

    String charset=null;

    boolean alternate=false;

    StringTokenizer tokenizer=new StringTokenizer(data," \t=\n",true);

    boolean lookedAhead=false;

    Source source=null;

    String token="";

    while (tokenizer.hasMoreTokens()) {

      if (!lookedAhead)       token=tokenizer.nextToken();

 else       lookedAhead=false;

      if (tokenizer.hasMoreTokens() && (token.equals(" ") || token.equals("\t") || token.equals("=")))       continue;

      String name=token;

      if (name.equals("type")) {

        token=tokenizer.nextToken();

        while (tokenizer.hasMoreTokens() && (token.equals(" ") || token.equals("\t") || token.equals("=")))         token=tokenizer.nextToken();

        type=token.substring(1,token.length() - 1);

      }

 else       if (name.equals("href")) {

        token=tokenizer.nextToken();

        while (tokenizer.hasMoreTokens() && (token.equals(" ") || token.equals("\t") || token.equals("=")))         token=tokenizer.nextToken();

        href=token;

        if (tokenizer.hasMoreTokens()) {

          token=tokenizer.nextToken();

          while (token.equals("=") && tokenizer.hasMoreTokens()) {

            href=href + token + tokenizer.nextToken();

            if (tokenizer.hasMoreTokens()) {

              token=tokenizer.nextToken();

              lookedAhead=true;

            }

 else {

              break;

            }

          }

        }

        href=href.substring(1,href.length() - 1);

        try {

          if (m_uriResolver != null) {

            source=m_uriResolver.resolve(href,m_baseID);

          }

 else {

            href=SystemIDResolver.getAbsoluteURI(href,m_baseID);

            source=new SAXSource(new InputSource(href));

          }

        }

 catch (        TransformerException te) {

          throw new org.xml.sax.SAXException(te);

        }

      }

 else       if (name.equals("title")) {

        token=tokenizer.nextToken();

        while (tokenizer.hasMoreTokens() && (token.equals(" ") || token.equals("\t") || token.equals("=")))         token=tokenizer.nextToken();

        title=token.substring(1,token.length() - 1);

      }

 else       if (name.equals("media")) {

        token=tokenizer.nextToken();

        while (tokenizer.hasMoreTokens() && (token.equals(" ") || token.equals("\t") || token.equals("=")))         token=tokenizer.nextToken();

        media=token.substring(1,token.length() - 1);

      }

 else       if (name.equals("charset")) {

        token=tokenizer.nextToken();

        while (tokenizer.hasMoreTokens() && (token.equals(" ") || token.equals("\t") || token.equals("=")))         token=tokenizer.nextToken();

        charset=token.substring(1,token.length() - 1);

      }

 else       if (name.equals("alternate")) {

        token=tokenizer.nextToken();

        while (tokenizer.hasMoreTokens() && (token.equals(" ") || token.equals("\t") || token.equals("=")))         token=tokenizer.nextToken();

        alternate=token.substring(1,token.length() - 1).equals("yes");

      }

    }

    if ((null != type) && (type.equals("text/xsl") || type.equals("text/xml") || type.equals("application/xml+xslt")) && (null != href)) {

      if (null != m_media) {

        if (null != media) {

          if (!media.equals(m_media))           return;

        }

 else         return;

      }

      if (null != m_charset) {

        if (null != charset) {

          if (!charset.equals(m_charset))           return;

        }

 else         return;

      }

      if (null != m_title) {

        if (null != title) {

          if (!title.equals(m_title))           return;

        }

 else         return;

      }

      m_stylesheets.addElement(source);

    }

  }

}

Location: StylesheetPIHandler.java

Content: 

/** 

 * Added additional getter and setter methods for the Base Id to fix bugzilla bug 24187

 */

public void setBaseId(String baseId){

  m_baseID=baseId;

}

Location: StylesheetPIHandler.java

Content: 

/** 

 * The spec notes that "The xml-stylesheet processing instruction is allowed only in the prolog of an XML document.", so, at least for right now, I'm going to go ahead an throw a TransformerException in order to stop the parse.

 * @param namespaceURI The Namespace URI, or an empty string.

 * @param localName    The local name (without prefix), or empty string if notnamespace processing.

 * @param qName        The qualified name (with prefix).

 * @param atts         The specified or defaulted attributes.

 * @throws StopParseException since there can be no valid xml-stylesheetprocessing instructions past the first element.

 */

public void startElement(String namespaceURI,String localName,String qName,Attributes atts) throws org.xml.sax.SAXException {

  throw new StopParseException();

}

Location: StylesheetPIHandler.java

Content: 

/** 

 * Construct a StylesheetPIHandler instance that will search for xml-stylesheet PIs based on the given criteria.

 * @param baseID  The base ID of the XML document, needed to resolve relativeIDs.

 * @param media   The desired media criteria.

 * @param title   The desired title criteria.

 * @param charset The desired character set criteria.

 */

public StylesheetPIHandler(String baseID,String media,String title,String charset){

  m_baseID=baseID;

  m_media=media;

  m_title=title;

  m_charset=charset;

}

