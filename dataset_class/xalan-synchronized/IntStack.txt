Location: IntStack.java

Content: 

/** 

 * Tests if this stack is empty.

 * @return <code>true</code> if this stack is empty; <code>false</code>otherwise.

 * @since JDK1.0

 */

public boolean empty(){

  return m_firstFree == 0;

}

Location: IntStack.java

Content: 

/** 

 * Default constructor. Note that the default block size is very small, for small lists.

 */

public IntStack(){

  super();

}

Location: IntStack.java

Content: 

/** 

 * Construct a IntVector, using the given block size.

 * @param blocksize Size of block to allocate

 */

public IntStack(int blocksize){

  super(blocksize);

}

Location: IntStack.java

Content: 

/** 

 * Copy constructor for IntStack

 * @param v IntStack to copy

 */

public IntStack(IntStack v){

  super(v);

}

Location: IntStack.java

Content: 

/** 

 * Looks at the object at the position the stack counting down n items.

 * @param n The number of items down, indexed from zero.

 * @return the object at n items down.

 * @throws EmptyStackException if this stack is empty.

 */

public int peek(int n){

  try {

    return m_map[m_firstFree - (1 + n)];

  }

 catch (  ArrayIndexOutOfBoundsException e) {

    throw new EmptyStackException();

  }

}

Location: IntStack.java

Content: 

/** 

 * Quickly pops a number of items from the stack.

 */

public final void quickPop(int n){

  m_firstFree-=n;

}

Location: IntStack.java

Content: 

/** 

 * Returns where an object is on this stack.

 * @param o the desired object.

 * @return the distance from the top of the stack where the object is] located;the return value <code>-1</code> indicates that the object is not on the stack.

 * @since JDK1.0

 */

public int search(int o){

  int i=lastIndexOf(o);

  if (i >= 0) {

    return size() - i;

  }

  return -1;

}

Location: IntStack.java

Content: 

/** 

 * Sets an object at a the top of the statck

 * @param val object to set at the top

 * @throws EmptyStackException if this stack is empty.

 */

public void setTop(int val){

  try {

    m_map[m_firstFree - 1]=val;

  }

 catch (  ArrayIndexOutOfBoundsException e) {

    throw new EmptyStackException();

  }

}

