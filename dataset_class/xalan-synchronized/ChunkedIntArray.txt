Location: ChunkedIntArray.java

Content: 

/** 

 * Append a 4-integer record to the CIA, starting with record 1. (Since arrays are initialized to all-0, 0 has been reserved as the "unknown" value in DTM.)

 * @return the index at which this record was inserted.

 */

int appendSlot(int w0,int w1,int w2,int w3){

{

    final int slotsize=4;

    int newoffset=(lastUsed + 1) * slotsize;

    int chunkpos=newoffset >> lowbits;

    int slotpos=(newoffset & lowmask);

    if (chunkpos > chunks.size() - 1)     chunks.addElement(new int[chunkalloc]);

    int[] chunk=chunks.elementAt(chunkpos);

    chunk[slotpos]=w0;

    chunk[slotpos + 1]=w1;

    chunk[slotpos + 2]=w2;

    chunk[slotpos + 3]=w3;

    return ++lastUsed;

  }

}

Location: ChunkedIntArray.java

Content: 

/** 

 * Create a new CIA with specified record size. Currently record size MUST be a power of two... and in fact is hardcoded to 4.

 */

ChunkedIntArray(int slotsize){

  if (this.slotsize < slotsize)   throw new ArrayIndexOutOfBoundsException(XMLMessages.createXMLMessage(XMLErrorResources.ER_CHUNKEDINTARRAY_NOT_SUPPORTED,new Object[]{Integer.toString(slotsize)}));

 else   if (this.slotsize > slotsize)   System.out.println("*****WARNING: ChunkedIntArray(" + slotsize + ") wasting "+ (this.slotsize - slotsize)+ " words per slot");

  chunks.addElement(fastArray);

}

Location: ChunkedIntArray.java

Content: 

/** 

 * Disard the highest-numbered record. This is used in the string-buffer CIA; when only a single characters() chunk has been recieved, its index is moved into the Text node rather than being referenced by indirection into the text accumulator.

 */

void discardLast(){

  --lastUsed;

}

Location: ChunkedIntArray.java

Content: 

/** 

 * Retrieve an integer from the CIA by record number and column within the record, both 0-based (though position 0 is reserved for special purposes).

 * @param position int Record number

 * @param slotpos  int Column number

 */

int readEntry(int position,int offset) throws ArrayIndexOutOfBoundsException {

{

    if (offset >= slotsize)     throw new ArrayIndexOutOfBoundsException(XMLMessages.createXMLMessage(XMLErrorResources.ER_OFFSET_BIGGER_THAN_SLOT,null));

    position*=slotsize;

    int chunkpos=position >> lowbits;

    int slotpos=position & lowmask;

    int[] chunk=chunks.elementAt(chunkpos);

    return chunk[slotpos + offset];

  }

}

Location: ChunkedIntArray.java

Content: 

/** 

 * Retrieve the contents of a record into a user-supplied buffer array. Used to reduce addressing overhead when code will access several columns of the record.

 * @param position int Record number

 * @param buffer   int[] Integer array provided by user, must be large enough tohold a complete record.

 */

void readSlot(int position,int[] buffer){

{

    position*=slotsize;

    int chunkpos=position >> lowbits;

    int slotpos=(position & lowmask);

    if (chunkpos > chunks.size() - 1)     chunks.addElement(new int[chunkalloc]);

    int[] chunk=chunks.elementAt(chunkpos);

    System.arraycopy(chunk,slotpos,buffer,0,slotsize);

  }

}

Location: ChunkedIntArray.java

Content: 

/** 

 * @return int index of highest-numbered record currently in use

 */

int slotsUsed(){

  return lastUsed;

}

Location: ChunkedIntArray.java

Content: 

int specialFind(int startPos,int position){

  int ancestor=startPos;

  while (ancestor > 0) {

    ancestor*=slotsize;

    int chunkpos=ancestor >> lowbits;

    int slotpos=ancestor & lowmask;

    int[] chunk=chunks.elementAt(chunkpos);

    ancestor=chunk[slotpos + 1];

    if (ancestor == position)     break;

  }

  if (ancestor <= 0) {

    return position;

  }

  return -1;

}

Location: ChunkedIntArray.java

Content: 

/** 

 * Overwrite the integer found at a specific record and column. Used to back-patch existing records, most often changing their "next sibling" reference from 0 (unknown) to something meaningful

 * @param position int Record number

 * @param offset   int Column number

 * @param value    int New contents

 */

void writeEntry(int position,int offset,int value) throws ArrayIndexOutOfBoundsException {

{

    if (offset >= slotsize)     throw new ArrayIndexOutOfBoundsException(XMLMessages.createXMLMessage(XMLErrorResources.ER_OFFSET_BIGGER_THAN_SLOT,null));

    position*=slotsize;

    int chunkpos=position >> lowbits;

    int slotpos=position & lowmask;

    int[] chunk=chunks.elementAt(chunkpos);

    chunk[slotpos + offset]=value;

  }

}

Location: ChunkedIntArray.java

Content: 

/** 

 * Overwrite an entire (4-integer) record at the specified index. Mostly used to create record 0, the Document node.

 * @param position integer Record number

 * @param w0       int

 * @param w1       int

 * @param w2       int

 * @param w3       int

 */

void writeSlot(int position,int w0,int w1,int w2,int w3){

  position*=slotsize;

  int chunkpos=position >> lowbits;

  int slotpos=(position & lowmask);

  if (chunkpos > chunks.size() - 1)   chunks.addElement(new int[chunkalloc]);

  int[] chunk=chunks.elementAt(chunkpos);

  chunk[slotpos]=w0;

  chunk[slotpos + 1]=w1;

  chunk[slotpos + 2]=w2;

  chunk[slotpos + 3]=w3;

}

