Location: DTMDefaultBase.java

Content: 

/** 

 * Build table of namespace declaration locations during DTM construction. Table is a Vector of SuballocatedIntVectors containing the namespace node HANDLES declared at that ID, plus an SuballocatedIntVector of the element node INDEXES at which these declarations appeared. NOTE: Since this occurs during model build, nodes will be encountered in doucment order and thus the table will be ordered by element, permitting binary-search as a possible retrieval optimization. %REVIEW% Directly managed arrays rather than vectors? %REVIEW% Handles or IDs? Given usage, I think handles.

 */

protected void declareNamespaceInContext(int elementNodeIndex,int namespaceNodeIndex){

  SuballocatedIntVector nsList=null;

  if (m_namespaceDeclSets == null) {

    m_namespaceDeclSetElements=new SuballocatedIntVector(32);

    m_namespaceDeclSetElements.addElement(elementNodeIndex);

    m_namespaceDeclSets=new Vector();

    nsList=new SuballocatedIntVector(32);

    m_namespaceDeclSets.addElement(nsList);

  }

 else {

    int last=m_namespaceDeclSetElements.size() - 1;

    if (last >= 0 && elementNodeIndex == m_namespaceDeclSetElements.elementAt(last)) {

      nsList=(SuballocatedIntVector)m_namespaceDeclSets.elementAt(last);

    }

  }

  if (nsList == null) {

    m_namespaceDeclSetElements.addElement(elementNodeIndex);

    SuballocatedIntVector inherited=findNamespaceContext(_parent(elementNodeIndex));

    if (inherited != null) {

      int isize=inherited.size();

      nsList=new SuballocatedIntVector(Math.max(Math.min(isize + 16,2048),32));

      for (int i=0; i < isize; ++i) {

        nsList.addElement(inherited.elementAt(i));

      }

    }

 else {

      nsList=new SuballocatedIntVector(32);

    }

    m_namespaceDeclSets.addElement(nsList);

  }

  int newEType=_exptype(namespaceNodeIndex);

  for (int i=nsList.size() - 1; i >= 0; --i) {

    if (newEType == getExpandedTypeID(nsList.elementAt(i))) {

      nsList.setElementAt(makeNodeHandle(namespaceNodeIndex),i);

      return;

    }

  }

  nsList.addElement(makeNodeHandle(namespaceNodeIndex));

}

Location: DTMDefaultBase.java

Content: 

/** 

 * Construct a DTMDefaultBase object using the default block size.

 * @param mgr              The DTMManager who owns this DTM.

 * @param source           The object that is used to specify the constructionsource.

 * @param dtmIdentity      The DTM identity ID for this DTM.

 * @param whiteSpaceFilter The white space filter for this DTM, which may benull.

 * @param xstringfactory   The factory to use for creating XMLStrings.

 * @param doIndexing       true if the caller considers it worth it to useindexing schemes.

 */

public DTMDefaultBase(DTMManager mgr,Source source,int dtmIdentity,DTMWSFilter whiteSpaceFilter,XMLStringFactory xstringfactory,boolean doIndexing){

  this(mgr,source,dtmIdentity,whiteSpaceFilter,xstringfactory,doIndexing,DEFAULT_BLOCKSIZE,true,false);

}

Location: DTMDefaultBase.java

Content: 

/** 

 * Construct a DTMDefaultBase object from a DOM node.

 * @param mgr              The DTMManager who owns this DTM.

 * @param source           The object that is used to specify the constructionsource.

 * @param dtmIdentity      The DTM identity ID for this DTM.

 * @param whiteSpaceFilter The white space filter for this DTM, which may benull.

 * @param xstringfactory   The factory to use for creating XMLStrings.

 * @param doIndexing       true if the caller considers it worth it to useindexing schemes.

 * @param blocksize        The block size of the DTM.

 * @param usePrevsib       true if we want to build the previous sibling nodearray.

 * @param newNameTable     true if we want to use a new ExpandedNameTable forthis DTM.

 */

public DTMDefaultBase(DTMManager mgr,Source source,int dtmIdentity,DTMWSFilter whiteSpaceFilter,XMLStringFactory xstringfactory,boolean doIndexing,int blocksize,boolean usePrevsib,boolean newNameTable){

  int numblocks;

  if (blocksize <= 64) {

    numblocks=DEFAULT_NUMBLOCKS_SMALL;

    m_dtmIdent=new SuballocatedIntVector(4,1);

  }

 else {

    numblocks=DEFAULT_NUMBLOCKS;

    m_dtmIdent=new SuballocatedIntVector(32);

  }

  m_exptype=new SuballocatedIntVector(blocksize,numblocks);

  m_firstch=new SuballocatedIntVector(blocksize,numblocks);

  m_nextsib=new SuballocatedIntVector(blocksize,numblocks);

  m_parent=new SuballocatedIntVector(blocksize,numblocks);

  if (usePrevsib)   m_prevsib=new SuballocatedIntVector(blocksize,numblocks);

  m_mgr=mgr;

  if (mgr instanceof DTMManagerDefault)   m_mgrDefault=(DTMManagerDefault)mgr;

  m_documentBaseURI=(null != source) ? source.getSystemId() : null;

  m_dtmIdent.setElementAt(dtmIdentity,0);

  m_wsfilter=whiteSpaceFilter;

  m_xstrf=xstringfactory;

  m_indexing=doIndexing;

  if (doIndexing) {

    m_expandedNameTable=new ExpandedNameTable();

  }

 else {

    m_expandedNameTable=m_mgrDefault.getExpandedNameTable(this);

  }

  if (null != whiteSpaceFilter) {

    m_shouldStripWhitespaceStack=new BoolStack();

    pushShouldStripWhitespace(false);

  }

}

Location: DTMDefaultBase.java

Content: 

/** 

 * Diagnostics function to dump the DTM.

 */

public void dumpDTM(OutputStream os){

  try {

    if (os == null) {

      File f=new File("DTMDump" + ((Object)this).hashCode() + ".txt");

      System.err.println("Dumping... " + f.getAbsolutePath());

      os=new FileOutputStream(f);

    }

    PrintStream ps=new PrintStream(os);

    while (nextNode()) {

    }

    int nRecords=m_size;

    ps.println("Total nodes: " + nRecords);

    for (int index=0; index < nRecords; ++index) {

      int i=makeNodeHandle(index);

      ps.println("=========== index=" + index + " handle="+ i+ " ===========");

      ps.println("NodeName: " + getNodeName(i));

      ps.println("NodeNameX: " + getNodeNameX(i));

      ps.println("LocalName: " + getLocalName(i));

      ps.println("NamespaceURI: " + getNamespaceURI(i));

      ps.println("Prefix: " + getPrefix(i));

      int exTypeID=_exptype(index);

      ps.println("Expanded Type ID: " + Integer.toHexString(exTypeID));

      int type=_type(index);

      String typestring;

switch (type) {

case DTM.ATTRIBUTE_NODE:

        typestring="ATTRIBUTE_NODE";

      break;

case DTM.CDATA_SECTION_NODE:

    typestring="CDATA_SECTION_NODE";

  break;

case DTM.COMMENT_NODE:

typestring="COMMENT_NODE";

break;

case DTM.DOCUMENT_FRAGMENT_NODE:

typestring="DOCUMENT_FRAGMENT_NODE";

break;

case DTM.DOCUMENT_NODE:

typestring="DOCUMENT_NODE";

break;

case DTM.DOCUMENT_TYPE_NODE:

typestring="DOCUMENT_NODE";

break;

case DTM.ELEMENT_NODE:

typestring="ELEMENT_NODE";

break;

case DTM.ENTITY_NODE:

typestring="ENTITY_NODE";

break;

case DTM.ENTITY_REFERENCE_NODE:

typestring="ENTITY_REFERENCE_NODE";

break;

case DTM.NAMESPACE_NODE:

typestring="NAMESPACE_NODE";

break;

case DTM.NOTATION_NODE:

typestring="NOTATION_NODE";

break;

case DTM.NULL:

typestring="NULL";

break;

case DTM.PROCESSING_INSTRUCTION_NODE:

typestring="PROCESSING_INSTRUCTION_NODE";

break;

case DTM.TEXT_NODE:

typestring="TEXT_NODE";

break;

default :

typestring="Unknown!";

break;

}

ps.println("Type: " + typestring);

int firstChild=_firstch(index);

if (DTM.NULL == firstChild) ps.println("First child: DTM.NULL");

 else if (NOTPROCESSED == firstChild) ps.println("First child: NOTPROCESSED");

 else ps.println("First child: " + firstChild);

if (m_prevsib != null) {

int prevSibling=_prevsib(index);

if (DTM.NULL == prevSibling) ps.println("Prev sibling: DTM.NULL");

 else if (NOTPROCESSED == prevSibling) ps.println("Prev sibling: NOTPROCESSED");

 else ps.println("Prev sibling: " + prevSibling);

}

int nextSibling=_nextsib(index);

if (DTM.NULL == nextSibling) ps.println("Next sibling: DTM.NULL");

 else if (NOTPROCESSED == nextSibling) ps.println("Next sibling: NOTPROCESSED");

 else ps.println("Next sibling: " + nextSibling);

int parent=_parent(index);

if (DTM.NULL == parent) ps.println("Parent: DTM.NULL");

 else if (NOTPROCESSED == parent) ps.println("Parent: NOTPROCESSED");

 else ps.println("Parent: " + parent);

int level=_level(index);

ps.println("Level: " + level);

ps.println("Node Value: " + getNodeValue(i));

ps.println("String Value: " + getStringValue(i));

}

}

 catch (IOException ioe) {

ioe.printStackTrace(System.err);

throw new RuntimeException(ioe.getMessage());

}

}

Location: DTMDefaultBase.java

Content: 

/** 

 * Diagnostics function to dump a single node. %REVIEW% KNOWN GLITCH: If you pass it a node index rather than a node handle, it works just fine... but the displayed identity number before the colon is different, which complicates comparing it with nodes printed the other way. We could always OR the DTM ID into the value, to suppress that distinction... %REVIEW% This might want to be moved up to DTMDefaultBase, or possibly DTM itself, since it's a useful diagnostic and uses only DTM's public APIs.

 */

public String dumpNode(int nodeHandle){

  if (nodeHandle == DTM.NULL)   return "[null]";

  String typestring;

switch (getNodeType(nodeHandle)) {

case DTM.ATTRIBUTE_NODE:

    typestring="ATTR";

  break;

case DTM.CDATA_SECTION_NODE:

typestring="CDATA";

break;

case DTM.COMMENT_NODE:

typestring="COMMENT";

break;

case DTM.DOCUMENT_FRAGMENT_NODE:

typestring="DOC_FRAG";

break;

case DTM.DOCUMENT_NODE:

typestring="DOC";

break;

case DTM.DOCUMENT_TYPE_NODE:

typestring="DOC_TYPE";

break;

case DTM.ELEMENT_NODE:

typestring="ELEMENT";

break;

case DTM.ENTITY_NODE:

typestring="ENTITY";

break;

case DTM.ENTITY_REFERENCE_NODE:

typestring="ENT_REF";

break;

case DTM.NAMESPACE_NODE:

typestring="NAMESPACE";

break;

case DTM.NOTATION_NODE:

typestring="NOTATION";

break;

case DTM.NULL:

typestring="null";

break;

case DTM.PROCESSING_INSTRUCTION_NODE:

typestring="PI";

break;

case DTM.TEXT_NODE:

typestring="TEXT";

break;

default :

typestring="Unknown!";

break;

}

StringBuffer sb=new StringBuffer();

sb.append("[" + nodeHandle + ": "+ typestring+ "(0x"+ Integer.toHexString(getExpandedTypeID(nodeHandle))+ ") "+ getNodeNameX(nodeHandle)+ " {"+ getNamespaceURI(nodeHandle)+ "}"+ "=\""+ getNodeValue(nodeHandle)+ "\"]");

return sb.toString();

}

Location: DTMDefaultBase.java

Content: 

/** 

 * Ensure that the size of the element indexes can hold the information.

 * @param namespaceID Namespace ID index.

 * @param LocalNameID Local name ID.

 */

protected void ensureSizeOfIndex(int namespaceID,int LocalNameID){

  if (null == m_elemIndexes) {

    m_elemIndexes=new int[namespaceID + 20][][];

  }

 else   if (m_elemIndexes.length <= namespaceID) {

    int[][][] indexes=m_elemIndexes;

    m_elemIndexes=new int[namespaceID + 20][][];

    System.arraycopy(indexes,0,m_elemIndexes,0,indexes.length);

  }

  int[][] localNameIndex=m_elemIndexes[namespaceID];

  if (null == localNameIndex) {

    localNameIndex=new int[LocalNameID + 100][];

    m_elemIndexes[namespaceID]=localNameIndex;

  }

 else   if (localNameIndex.length <= LocalNameID) {

    int[][] indexes=localNameIndex;

    localNameIndex=new int[LocalNameID + 100][];

    System.arraycopy(indexes,0,localNameIndex,0,indexes.length);

    m_elemIndexes[namespaceID]=localNameIndex;

  }

  int[] elemHandles=localNameIndex[LocalNameID];

  if (null == elemHandles) {

    elemHandles=new int[128];

    localNameIndex[LocalNameID]=elemHandles;

    elemHandles[0]=1;

  }

 else   if (elemHandles.length <= elemHandles[0] + 1) {

    int[] indexes=elemHandles;

    elemHandles=new int[elemHandles[0] + 1024];

    System.arraycopy(indexes,0,elemHandles,0,indexes.length);

    localNameIndex[LocalNameID]=elemHandles;

  }

}

Location: DTMDefaultBase.java

Content: 

/** 

 * Find the first matching element from the index at or after the given node.

 * @param nsIndex        The namespace index lookup.

 * @param lnIndex        The local name index lookup.

 * @param firstPotential The first potential match that is worth looking at.

 * @return The first node that is greater than or equal to the firstPotentialargument, or DTM.NOTPROCESSED if not found.

 */

int findElementFromIndex(int nsIndex,int lnIndex,int firstPotential){

  int[][][] indexes=m_elemIndexes;

  if (null != indexes && nsIndex < indexes.length) {

    int[][] lnIndexs=indexes[nsIndex];

    if (null != lnIndexs && lnIndex < lnIndexs.length) {

      int[] elems=lnIndexs[lnIndex];

      if (null != elems) {

        int pos=findGTE(elems,1,elems[0],firstPotential);

        if (pos > -1) {

          return elems[pos];

        }

      }

    }

  }

  return NOTPROCESSED;

}

Location: DTMDefaultBase.java

Content: 

/** 

 * Find the first index that occurs in the list that is greater than or equal to the given value.

 * @param list  A list of integers.

 * @param start The start index to begin the search.

 * @param len   The number of items to search.

 * @param value Find the slot that has a value that is greater than or identicalto this argument.

 * @return The index in the list of the slot that is higher or identical to theidentity argument, or -1 if no node is higher or equal.

 */

protected int findGTE(int[] list,int start,int len,int value){

  int low=start;

  int high=start + (len - 1);

  int end=high;

  while (low <= high) {

    int mid=(low + high) >>> 1;

    int c=list[mid];

    if (c > value)     high=mid - 1;

 else     if (c < value)     low=mid + 1;

 else     return mid;

  }

  return (low <= end && list[low] > value) ? low : -1;

}

Location: DTMDefaultBase.java

Content: 

/** 

 * Subroutine: Locate the specified node within m_namespaceDeclSetElements, or the last element which preceeds it in document order %REVIEW% Inlne this into findNamespaceContext? Create SortedSuballocatedIntVector type?

 * @return If positive or zero, the index of the found item. If negative, indexof the point at which it would have appeared, encoded as -1-index and hence reconvertable by subtracting it from -1. (Encoding because I don't want to recompare the strings but don't want to burn bytes on a datatype to hold a flagged value.)

 */

protected int findInSortedSuballocatedIntVector(SuballocatedIntVector vector,int lookfor){

  int i=0;

  if (vector != null) {

    int first=0;

    int last=vector.size() - 1;

    while (first <= last) {

      i=(first + last) / 2;

      int test=lookfor - vector.elementAt(i);

      if (test == 0) {

        return i;

      }

 else       if (test < 0) {

        last=i - 1;

      }

 else {

        first=i + 1;

      }

    }

    if (first > i) {

      i=first;

    }

  }

  return -1 - i;

}

Location: DTMDefaultBase.java

Content: 

/** 

 * Retrieve list of namespace declaration locations active at this node. List is an SuballocatedIntVector whose entries are the namespace node HANDLES declared at that ID. %REVIEW% Directly managed arrays rather than vectors? %REVIEW% Handles or IDs? Given usage, I think handles.

 */

protected SuballocatedIntVector findNamespaceContext(int elementNodeIndex){

  if (null != m_namespaceDeclSetElements) {

    int wouldBeAt=findInSortedSuballocatedIntVector(m_namespaceDeclSetElements,elementNodeIndex);

    if (wouldBeAt >= 0)     return (SuballocatedIntVector)m_namespaceDeclSets.elementAt(wouldBeAt);

    if (wouldBeAt == -1)     return null;

    wouldBeAt=-1 - wouldBeAt;

    int candidate=m_namespaceDeclSetElements.elementAt(--wouldBeAt);

    int ancestor=_parent(elementNodeIndex);

    if (wouldBeAt == 0 && candidate < ancestor) {

      int rootHandle=getDocumentRoot(makeNodeHandle(elementNodeIndex));

      int rootID=makeNodeIdentity(rootHandle);

      int uppermostNSCandidateID;

      if (getNodeType(rootHandle) == DTM.DOCUMENT_NODE) {

        int ch=_firstch(rootID);

        uppermostNSCandidateID=(ch != DTM.NULL) ? ch : rootID;

      }

 else {

        uppermostNSCandidateID=rootID;

      }

      if (candidate == uppermostNSCandidateID) {

        return (SuballocatedIntVector)m_namespaceDeclSets.elementAt(wouldBeAt);

      }

    }

    while (wouldBeAt >= 0 && ancestor > 0) {

      if (candidate == ancestor) {

        return (SuballocatedIntVector)m_namespaceDeclSets.elementAt(wouldBeAt);

      }

 else       if (candidate < ancestor) {

        do {

          ancestor=_parent(ancestor);

        }

 while (candidate < ancestor);

      }

 else       if (wouldBeAt > 0) {

        candidate=m_namespaceDeclSetElements.elementAt(--wouldBeAt);

      }

 else       break;

    }

  }

  return null;

}

Location: DTMDefaultBase.java

Content: 

/** 

 * Query which DTMIDs this DTM is currently using within the DTMManager. %REVEW% Should this become part of the base DTM API?

 * @return an IntVector, or null if this is a "stand-alone" DTM.

 */

public SuballocatedIntVector getDTMIDs(){

  if (m_mgr == null)   return null;

  return m_dtmIdent;

}

Location: DTMDefaultBase.java

Content: 

/** 

 * Query which DTMManager this DTM is currently being handled by. %REVEW% Should this become part of the base DTM API?

 * @return a DTMManager, or null if this is a "stand-alone" DTM.

 */

public DTMManager getManager(){

  return m_mgr;

}

Location: DTMDefaultBase.java

Content: 

/** 

 * Returns the namespace type of a specific node

 * @param nodeHandle the id of the node.

 * @return the ID of the namespace.

 */

public int getNamespaceType(final int nodeHandle){

  int identity=makeNodeIdentity(nodeHandle);

  int expandedNameID=_exptype(identity);

  return m_expandedNameTable.getNamespaceID(expandedNameID);

}

Location: DTMDefaultBase.java

Content: 

/** 

 * Get the handle of this node in the tree

 * @param nodeId The node identity.

 * @return the node handle

 * @xsl.usage internal

 */

public int getNodeHandle(int nodeId){

  return makeNodeHandle(nodeId);

}

Location: DTMDefaultBase.java

Content: 

/** 

 * Get the identity of this node in the tree

 * @param nodeHandle The node handle.

 * @return the node identity

 * @xsl.usage internal

 */

public int getNodeIdent(int nodeHandle){

  return makeNodeIdentity(nodeHandle);

}

Location: DTMDefaultBase.java

Content: 

/** 

 * Find out whether or not to strip whispace nodes.

 * @return whether or not to strip whispace nodes.

 */

protected boolean getShouldStripWhitespace(){

  return m_shouldStripWS;

}

Location: DTMDefaultBase.java

Content: 

/** 

 * Given a node handle, get the handle of the node's first child. If not yet resolved, waits for more nodes to be added to the document and tries again.

 * @param nodeHandle int Handle of the node.

 * @return int DTM node-number of first child, or DTM.NULL to indicate noneexists.

 */

public int getTypedFirstChild(int nodeHandle,int nodeType){

  int firstChild, eType;

  if (nodeType < DTM.NTYPES) {

    for (firstChild=_firstch(makeNodeIdentity(nodeHandle)); firstChild != DTM.NULL; firstChild=_nextsib(firstChild)) {

      eType=_exptype(firstChild);

      if (eType == nodeType || (eType >= DTM.NTYPES && m_expandedNameTable.getType(eType) == nodeType)) {

        return makeNodeHandle(firstChild);

      }

    }

  }

 else {

    for (firstChild=_firstch(makeNodeIdentity(nodeHandle)); firstChild != DTM.NULL; firstChild=_nextsib(firstChild)) {

      if (_exptype(firstChild) == nodeType) {

        return makeNodeHandle(firstChild);

      }

    }

  }

  return DTM.NULL;

}

Location: DTMDefaultBase.java

Content: 

/** 

 * Given a node handle, advance to its next sibling. If not yet resolved, waits for more nodes to be added to the document and tries again.

 * @param nodeHandle int Handle of the node.

 * @return int Node-number of next sibling, or DTM.NULL to indicate none exists.

 */

public int getTypedNextSibling(int nodeHandle,int nodeType){

  if (nodeHandle == DTM.NULL)   return DTM.NULL;

  int node=makeNodeIdentity(nodeHandle);

  int eType;

  while ((node=_nextsib(node)) != DTM.NULL && ((eType=_exptype(node)) != nodeType && m_expandedNameTable.getType(eType) != nodeType))   ;

  return (node == DTM.NULL ? DTM.NULL : makeNodeHandle(node));

}

Location: DTMDefaultBase.java

Content: 

/** 

 * Add a node to the element indexes. The node will not be added unless it's an element.

 * @param expandedTypeID The expanded type ID of the node.

 * @param identity       The node identity index.

 */

protected void indexNode(int expandedTypeID,int identity){

  ExpandedNameTable ent=m_expandedNameTable;

  short type=ent.getType(expandedTypeID);

  if (DTM.ELEMENT_NODE == type) {

    int namespaceID=ent.getNamespaceID(expandedTypeID);

    int localNameID=ent.getLocalNameID(expandedTypeID);

    ensureSizeOfIndex(namespaceID,localNameID);

    int[] index=m_elemIndexes[namespaceID][localNameID];

    index[index[0]]=identity;

    index[0]++;

  }

}

Location: DTMDefaultBase.java

Content: 

/** 

 * Given a node identity, return a node handle. If extended addressing has been used (multiple DTM IDs), we need to map the high bits of the identity into the proper DTM ID. This has been made FINAL to facilitate inlining, since we do not expect any subclass of DTMDefaultBase to ever change the algorithm. (I don't really like doing so, and would love to have an excuse not to...) %REVIEW% Is it worth trying to specialcase small documents? %REVIEW% Should this be exposed at the package/public layers?

 * @param nodeIdentity Internal offset to this node's records.

 * @return NodeHandle (external representation of node)

 */

final public int makeNodeHandle(int nodeIdentity){

  if (NULL == nodeIdentity)   return NULL;

  if (JJK_DEBUG && nodeIdentity > DTMManager.IDENT_NODE_DEFAULT)   System.err.println("GONK! (only useful in limited situations)");

  return m_dtmIdent.elementAt(nodeIdentity >>> DTMManager.IDENT_DTM_NODE_BITS) + (nodeIdentity & DTMManager.IDENT_NODE_DEFAULT);

}

Location: DTMDefaultBase.java

Content: 

/** 

 * Given a node handle, return a node identity. If extended addressing has been used (multiple DTM IDs), we need to map the high bits of the identity into the proper DTM ID and thence find the proper offset to add to the low bits of the identity This has been made FINAL to facilitate inlining, since we do not expect any subclass of DTMDefaultBase to ever change the algorithm. (I don't really like doing so, and would love to have an excuse not to...) %OPT% Performance is critical for this operation. %REVIEW% Should this be exposed at the package/public layers?

 * @param nodeHandle (external representation of node)

 * @return nodeIdentity Internal offset to this node's records.

 */

final public int makeNodeIdentity(int nodeHandle){

  if (NULL == nodeHandle)   return NULL;

  if (m_mgrDefault != null) {

    int whichDTMindex=nodeHandle >>> DTMManager.IDENT_DTM_NODE_BITS;

    if (m_mgrDefault.m_dtms[whichDTMindex] != this)     return NULL;

 else     return m_mgrDefault.m_dtm_offsets[whichDTMindex] | (nodeHandle & DTMManager.IDENT_NODE_DEFAULT);

  }

  int whichDTMid=m_dtmIdent.indexOf(nodeHandle & DTMManager.IDENT_DTM_DEFAULT);

  return (whichDTMid == NULL) ? NULL : (whichDTMid << DTMManager.IDENT_DTM_NODE_BITS) + (nodeHandle & DTMManager.IDENT_NODE_DEFAULT);

}

Location: DTMDefaultBase.java

Content: 

/** 

 * Set whether to strip whitespaces at this point by popping out m_shouldStripWhitespaceStack.

 */

protected void popShouldStripWhitespace(){

  if (null != m_shouldStripWhitespaceStack)   m_shouldStripWS=m_shouldStripWhitespaceStack.popAndTop();

}

Location: DTMDefaultBase.java

Content: 

/** 

 * Set whether to strip whitespaces and push in current value of m_shouldStripWS in m_shouldStripWhitespaceStack.

 * @param shouldStrip Flag indicating whether to strip whitespace nodes

 */

protected void pushShouldStripWhitespace(boolean shouldStrip){

  m_shouldStripWS=shouldStrip;

  if (null != m_shouldStripWhitespaceStack)   m_shouldStripWhitespaceStack.push(shouldStrip);

}

Location: DTMDefaultBase.java

Content: 

/** 

 * Set whether to strip whitespaces and set the top of the stack to the current value of m_shouldStripWS.

 * @param shouldStrip Flag indicating whether to strip whitespace nodes

 */

protected void setShouldStripWhitespace(boolean shouldStrip){

  m_shouldStripWS=shouldStrip;

  if (null != m_shouldStripWhitespaceStack)   m_shouldStripWhitespaceStack.setTop(shouldStrip);

}

Location: DTMDefaultBase.java

Content: 

/** 

 * Get the first child for the given node identity.

 * @param identity The node identity.

 * @return The first child identity, or DTM.NULL.

 */

protected int _firstch(int identity){

  int info=(identity >= m_size) ? NOTPROCESSED : m_firstch.elementAt(identity);

  while (info == NOTPROCESSED) {

    boolean isMore=nextNode();

    if (identity >= m_size && !isMore)     return NULL;

 else {

      info=m_firstch.elementAt(identity);

      if (info == NOTPROCESSED && !isMore)       return NULL;

    }

  }

  return info;

}

Location: DTMDefaultBase.java

Content: 

/** 

 * Get the level in the tree for the given node identity.

 * @param identity The node identity.

 * @return The tree level, or DTM.NULL.

 */

protected int _level(int identity){

  while (identity >= m_size) {

    boolean isMore=nextNode();

    if (!isMore && identity >= m_size)     return NULL;

  }

  int i=0;

  while (NULL != (identity=_parent(identity)))   ++i;

  return i;

}

Location: DTMDefaultBase.java

Content: 

/** 

 * Get the next sibling for the given node identity.

 * @param identity The node identity.

 * @return The next sibling identity, or DTM.NULL.

 */

protected int _nextsib(int identity){

  int info=(identity >= m_size) ? NOTPROCESSED : m_nextsib.elementAt(identity);

  while (info == NOTPROCESSED) {

    boolean isMore=nextNode();

    if (identity >= m_size && !isMore)     return NULL;

 else {

      info=m_nextsib.elementAt(identity);

      if (info == NOTPROCESSED && !isMore)       return NULL;

    }

  }

  return info;

}

Location: DTMDefaultBase.java

Content: 

/** 

 * Get the parent for the given node identity.

 * @param identity The node identity.

 * @return The parent identity, or DTM.NULL.

 */

protected int _parent(int identity){

  if (identity < m_size)   return m_parent.elementAt(identity);

  while (true) {

    boolean isMore=nextNode();

    if (identity >= m_size && !isMore)     return NULL;

 else     if (identity < m_size)     return m_parent.elementAt(identity);

  }

}

Location: DTMDefaultBase.java

Content: 

/** 

 * Get the previous sibling for the given node identity.

 * @param identity The node identity.

 * @return The previous sibling identity, or DTM.NULL.

 */

protected int _prevsib(int identity){

  if (identity < m_size)   return m_prevsib.elementAt(identity);

  while (true) {

    boolean isMore=nextNode();

    if (identity >= m_size && !isMore)     return NULL;

 else     if (identity < m_size)     return m_prevsib.elementAt(identity);

  }

}

Location: DTMDefaultBase.java

Content: 

/** 

 * Get the simple type ID for the given node identity.

 * @param identity The node identity.

 * @return The simple type ID, or DTM.NULL.

 */

protected short _type(int identity){

  int info=_exptype(identity);

  if (NULL != info)   return m_expandedNameTable.getType(info);

 else   return NULL;

}

