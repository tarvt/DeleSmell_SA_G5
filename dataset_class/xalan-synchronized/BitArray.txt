Location: BitArray.java

Content: 

/** 

 * Constructor. Defines the initial size of the bit array (in bits).

 */

public BitArray(){

  this(32);

}

Location: BitArray.java

Content: 

public BitArray(int size){

  if (size < 32)   size=32;

  _bitSize=size;

  _intSize=(_bitSize >>> 5) + 1;

  _bits=new int[_intSize + 1];

}

Location: BitArray.java

Content: 

public BitArray(int size,int[] bits){

  if (size < 32)   size=32;

  _bitSize=size;

  _intSize=(_bitSize >>> 5) + 1;

  _bits=bits;

}

Location: BitArray.java

Content: 

public BitArray cloneArray(){

  return (new BitArray(_intSize,_bits));

}

Location: BitArray.java

Content: 

/** 

 * Returns the integer array in which the bit array is contained

 */

public final int[] data(){

  return (_bits);

}

Location: BitArray.java

Content: 

public final int getBitNumber(int pos){

  if (pos == _pos)   return (_node);

  if (pos < _pos) {

    _int=_bit=_pos=0;

  }

  for (; _int <= _intSize; _int++) {

    int bits=_bits[_int];

    if (bits != 0) {

      for (; _bit < 32; _bit++) {

        if ((bits & _masks[_bit]) != 0) {

          if (++_pos == pos) {

            _node=((_int << 5) + _bit) - 1;

            return (_node);

          }

        }

      }

      _bit=0;

    }

  }

  return (0);

}

Location: BitArray.java

Content: 

/** 

 * Returns true if the given bit is set

 */

public final boolean getBit(int bit){

  if (DEBUG_ASSERTIONS) {

    if (bit >= _bitSize) {

      throw new Error("Programmer's assertion in  BitArray.getBit");

    }

  }

  return ((_bits[bit >>> 5] & _masks[bit % 32]) != 0);

}

Location: BitArray.java

Content: 

/** 

 * See setMask()

 */

public int getMask(){

  return (_mask);

}

Location: BitArray.java

Content: 

/** 

 * Returns the next set bit from a given position

 */

public final int getNextBit(int startBit){

  for (int i=(startBit >>> 5); i <= _intSize; i++) {

    int bits=_bits[i];

    if (bits != 0) {

      for (int b=(startBit % 32); b < 32; b++) {

        if ((bits & _masks[b]) != 0) {

          return ((i << 5) + b);

        }

      }

    }

    startBit=0;

  }

  return (DTMAxisIterator.END);

}

Location: BitArray.java

Content: 

/** 

 * Merge two bit arrays. This currently only works for nodes from a single DOM (because there is only one _mask per array).

 */

public final BitArray merge(BitArray other){

  if (_last == -1) {

    _bits=other._bits;

  }

 else   if (other._last != -1) {

    int start=(_first < other._first) ? _first : other._first;

    int stop=(_last > other._last) ? _last : other._last;

    if (other._intSize > _intSize) {

      if (stop > _intSize)       stop=_intSize;

      for (int i=start; i <= stop; i++)       other._bits[i]|=_bits[i];

      _bits=other._bits;

    }

 else {

      if (stop > other._intSize)       stop=other._intSize;

      for (int i=start; i <= stop; i++)       _bits[i]|=other._bits[i];

    }

  }

  return (this);

}

Location: BitArray.java

Content: 

/** 

 * Read the whole tree from a file (serialized)

 */

public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException {

  _bitSize=in.readInt();

  _intSize=(_bitSize >>> 5) + 1;

  _mask=in.readInt();

  _bits=(int[])in.readObject();

}

Location: BitArray.java

Content: 

/** 

 * Resizes the bit array - try to avoid using this method!!!

 */

public final void resize(int newSize){

  if (newSize > _bitSize) {

    _intSize=(newSize >>> 5) + 1;

    final int[] newBits=new int[_intSize + 1];

    System.arraycopy(_bits,0,newBits,0,(_bitSize >>> 5) + 1);

    _bits=newBits;

    _bitSize=newSize;

  }

}

Location: BitArray.java

Content: 

/** 

 * Sets a given bit

 */

public final void setBit(int bit){

  if (DEBUG_ASSERTIONS) {

    if (bit >= _bitSize) {

      throw new Error("Programmer's assertion in  BitArray.getBit");

    }

  }

  if (bit >= _bitSize)   return;

  final int i=(bit >>> 5);

  if (i < _first)   _first=i;

  if (i > _last)   _last=i;

  _bits[i]|=_masks[bit % 32];

}

Location: BitArray.java

Content: 

/** 

 * Set the mask for this bit array. The upper 8 bits of this mask indicate the DOM in which the nodes in this array belong.

 */

public void setMask(int mask){

  _mask=mask;

}

Location: BitArray.java

Content: 

public void writeExternal(ObjectOutput out) throws IOException {

  out.writeInt(_bitSize);

  out.writeInt(_mask);

  out.writeObject(_bits);

  out.flush();

}

