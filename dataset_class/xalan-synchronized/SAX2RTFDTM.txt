Location: SAX2RTFDTM.java

Content: 

/** 

 * Given a node handle, find the owning document node, using DTM semantics (Document owns itself) rather than DOM semantics (Document has no owner). (I'm counting on the fact that getOwnerDocument() is implemented on top of this call, in the superclass, to avoid having to rewrite that one. Be careful if that code changes!)

 * @param nodeHandle the id of the node.

 * @return int Node handle of owning document

 */

public int getDocumentRoot(int nodeHandle){

  for (int id=makeNodeIdentity(nodeHandle); id != NULL; id=_parent(id)) {

    if (_type(id) == DTM.DOCUMENT_NODE) {

      return makeNodeHandle(id);

    }

  }

  return DTM.NULL;

}

Location: SAX2RTFDTM.java

Content: 

/** 

 * @return true if a DTM tree is currently under construction.

 */

public boolean isTreeIncomplete(){

  return !m_endDocumentOccured;

}

Location: SAX2RTFDTM.java

Content: 

/** 

 * "Tail-pruning" support for RTFs. This function pops the information previously saved by pushRewindMark (which see) and uses it to discard all nodes added to the DTM after that time. We expect that this will allow us to reuse storage more effectively. This is _not_ intended to be called while a document is still being constructed -- only between endDocument and the next startDocument %REVIEW% WARNING: This is the first use of some of the truncation methods. If Xalan blows up after this is called, that's a likely place to check. %REVIEW% Our original design for DTMs permitted them to share string pools. If there any risk that this might be happening, we can _not_ rewind and recover the string storage. One solution might to assert that DTMs used for RTFs Must Not take advantage of that feature, but this seems excessively fragile. Another, much less attractive, would be to just let them leak... Nah.

 * @return true if and only if the pop completely emptied the RTF. That responseis used when determining how to unspool RTF-started-while-RTF-open situations.

 */

public boolean popRewindMark(){

  boolean top=mark_size.empty();

  m_size=top ? m_emptyNodeCount : mark_size.pop();

  m_exptype.setSize(m_size);

  m_firstch.setSize(m_size);

  m_nextsib.setSize(m_size);

  m_prevsib.setSize(m_size);

  m_parent.setSize(m_size);

  m_elemIndexes=null;

  int ds=top ? m_emptyNSDeclSetCount : mark_nsdeclset_size.pop();

  if (m_namespaceDeclSets != null) {

    m_namespaceDeclSets.setSize(ds);

  }

  int ds1=top ? m_emptyNSDeclSetElemsCount : mark_nsdeclelem_size.pop();

  if (m_namespaceDeclSetElements != null) {

    m_namespaceDeclSetElements.setSize(ds1);

  }

  m_data.setSize(top ? m_emptyDataCount : mark_data_size.pop());

  m_chars.setLength(top ? m_emptyCharsCount : mark_char_size.pop());

  m_dataOrQName.setSize(top ? m_emptyDataQNCount : mark_doq_size.pop());

  return m_size == 0;

}

Location: SAX2RTFDTM.java

Content: 

/** 

 * "Tail-pruning" support for RTFs. This function pushes information about the current size of the DTM's data structures onto a stack, for use by popRewindMark() (which see). %REVIEW% I have no idea how to rewind m_elemIndexes. However, RTFs will not be indexed, so I can simply panic if that case arises. Hey, it works...

 */

public void pushRewindMark(){

  if (m_indexing || m_elemIndexes != null)   throw new java.lang.NullPointerException("Coding error; Don't try to mark/rewind an indexed DTM");

  mark_size.push(m_size);

  mark_nsdeclset_size.push((m_namespaceDeclSets == null) ? 0 : m_namespaceDeclSets.size());

  mark_nsdeclelem_size.push((m_namespaceDeclSetElements == null) ? 0 : m_namespaceDeclSetElements.size());

  mark_data_size.push(m_data.size());

  mark_char_size.push(m_chars.size());

  mark_doq_size.push(m_dataOrQName.size());

}

Location: SAX2RTFDTM.java

Content: 

public SAX2RTFDTM(DTMManager mgr,Source source,int dtmIdentity,DTMWSFilter whiteSpaceFilter,XMLStringFactory xstringfactory,boolean doIndexing){

  super(mgr,source,dtmIdentity,whiteSpaceFilter,xstringfactory,doIndexing);

  m_useSourceLocationProperty=false;

  m_sourceSystemId=(m_useSourceLocationProperty) ? new StringVector() : null;

  m_sourceLine=(m_useSourceLocationProperty) ? new IntVector() : null;

  m_sourceColumn=(m_useSourceLocationProperty) ? new IntVector() : null;

  m_emptyNodeCount=m_size;

  m_emptyNSDeclSetCount=(m_namespaceDeclSets == null) ? 0 : m_namespaceDeclSets.size();

  m_emptyNSDeclSetElemsCount=(m_namespaceDeclSetElements == null) ? 0 : m_namespaceDeclSetElements.size();

  m_emptyDataCount=m_data.size();

  m_emptyCharsCount=m_chars.size();

  m_emptyDataQNCount=m_dataOrQName.size();

}

Location: SAX2RTFDTM.java

Content: 

/** 

 * Given a node identifier, find the owning document node. Unlike the DOM, this considers the owningDocument of a Document to be itself. Note that in shared DTMs this may not be zero.

 * @param nodeIdentifier the id of the starting node.

 * @return int Node identifier of the root of this DTM tree

 */

protected int _documentRoot(int nodeIdentifier){

  if (nodeIdentifier == NULL)   return NULL;

  for (int parent=_parent(nodeIdentifier); parent != NULL; nodeIdentifier=parent, parent=_parent(nodeIdentifier))   ;

  return nodeIdentifier;

}

