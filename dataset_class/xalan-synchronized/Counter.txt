Location: Counter.java

Content: 

/** 

 * Construct a counter object.

 * @param numberElem The owning xsl:number element.

 * @param countNodes A vector of all nodes counted so far.

 * @throws TransformerException

 */

Counter(ElemNumber numberElem,NodeSetDTM countNodes) throws TransformerException {

  m_countNodes=countNodes;

  m_numberElem=numberElem;

}

Location: Counter.java

Content: 

/** 

 * Try and find a node that was previously counted. If found, return a positive integer that corresponds to the count.

 * @param support The XPath context to use

 * @param node    The node to be counted.

 * @return The count of the node, or -1 if not found.

 */

int getPreviouslyCounted(XPathContext support,int node){

  int n=m_countNodes.size();

  m_countResult=0;

  for (int i=n - 1; i >= 0; i--) {

    int countedNode=m_countNodes.elementAt(i);

    if (node == countedNode) {

      m_countResult=i + 1 + m_countNodesStartCount;

      break;

    }

    DTM dtm=support.getDTM(countedNode);

    if (dtm.isNodeAfter(countedNode,node))     break;

  }

  return m_countResult;

}

