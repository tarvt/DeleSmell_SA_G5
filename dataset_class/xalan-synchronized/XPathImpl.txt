Location: XPathImpl.java

Content: 

/** 

 * <p> Compile an XPath expression for later evaluation. </p> <p> If <code>expression</code> contains any  {@link XPathFunction}s, they must be available via the  {@link XPathFunctionResolver}. An {@link XPathExpressionException} will be thrown if the<code>XPathFunction</code> cannot be resovled with the <code>XPathFunctionResolver</code>. </p> <p> If <code>expression</code> is <code>null</code>, a <code>NullPointerException</code> is thrown. </p>

 * @param expression The XPath expression.

 * @return Compiled XPath expression.

 * @throws XPathExpressionException If <code>expression</code> cannot becompiled.

 * @throws NullPointerException     If <code>expression</code> is<code>null</code>.

 */

public XPathExpression compile(String expression) throws XPathExpressionException {

  if (expression == null) {

    String fmsg=XSLMessages.createXPATHMessage(XPATHErrorResources.ER_ARG_CANNOT_BE_NULL,new Object[]{"XPath expression"});

    throw new NullPointerException(fmsg);

  }

  try {

    org.apache.xpath.XPath xpath=new XPath(expression,null,prefixResolver,org.apache.xpath.XPath.SELECT);

    XPathExpressionImpl ximpl=new XPathExpressionImpl(xpath,prefixResolver,functionResolver,variableResolver,featureSecureProcessing);

    return ximpl;

  }

 catch (  javax.xml.transform.TransformerException te) {

    throw new XPathExpressionException(te);

  }

}

Location: XPathImpl.java

Content: 

/** 

 * <p> Evaluate an XPath expression in the context of the specified <code>InputSource</code> and return the result as a <code>String</code>. </p> <p> This method calls {@link #evaluate(String expression,InputSource source,QName returnType)}with a <code>returnType</code> of  {@link XPathConstants#STRING}. </p> <p> See "Evaluation of XPath Expressions" section of JAXP 1.3 spec for context item evaluation, variable, function and QName resolution and return type conversion. </p> <p> If <code>expression</code> or <code>source</code> is <code>null</code>, then a <code>NullPointerException</code> is thrown. </p>

 * @param expression The XPath expression.

 * @param source     The <code>InputSource</code> of the document to evaluateover.

 * @return The <code>String</code> that is the result of evaluating theexpression and converting the result to a <code>String</code>.

 * @throws XPathExpressionException If expression cannot be evaluated.

 * @throws NullPointerException     If <code>expression</code> or<code>source</code> is <code>null</code>.

 */

public String evaluate(String expression,InputSource source) throws XPathExpressionException {

  return (String)this.evaluate(expression,source,XPathConstants.STRING);

}

Location: XPathImpl.java

Content: 

/** 

 * <p> Evaluate an XPath expression in the context of the specified <code>InputSource</code> and return the result as the specified type. </p> <p> This method builds a data model for the  {@link InputSource} and calls{@link #evaluate(String expression,Object item,QName returnType)} on theresulting document object. </p> <p> See "Evaluation of XPath Expressions" section of JAXP 1.3 spec for context item evaluation, variable, function and QName resolution and return type conversion. </p> <p> If <code>returnType</code> is not one of the types defined in {@link XPathConstants}, then an <code>IllegalArgumentException</code> is thrown. </p> <p> If <code>expression</code>, <code>source</code> or <code>returnType</code> is <code>null</code>, then a <code>NullPointerException</code> is thrown. </p>

 * @param expression The XPath expression.

 * @param source     The input source of the document to evaluate over.

 * @param returnType The desired return type.

 * @return The <code>Object</code> that encapsulates the result of evaluatingthe expression.

 * @throws XPathExpressionException If expression cannot be evaluated.

 * @throws IllegalArgumentException If <code>returnType</code> is not one of thetypes defined in  {@link XPathConstants}.

 * @throws NullPointerException     If <code>expression</code>,<code>source</code> or <code>returnType</code> is <code>null</code>.

 */

public Object evaluate(String expression,InputSource source,QName returnType) throws XPathExpressionException {

  if (source == null) {

    String fmsg=XSLMessages.createXPATHMessage(XPATHErrorResources.ER_ARG_CANNOT_BE_NULL,new Object[]{"source"});

    throw new NullPointerException(fmsg);

  }

  if (expression == null) {

    String fmsg=XSLMessages.createXPATHMessage(XPATHErrorResources.ER_ARG_CANNOT_BE_NULL,new Object[]{"XPath expression"});

    throw new NullPointerException(fmsg);

  }

  if (returnType == null) {

    String fmsg=XSLMessages.createXPATHMessage(XPATHErrorResources.ER_ARG_CANNOT_BE_NULL,new Object[]{"returnType"});

    throw new NullPointerException(fmsg);

  }

  if (!isSupported(returnType)) {

    String fmsg=XSLMessages.createXPATHMessage(XPATHErrorResources.ER_UNSUPPORTED_RETURN_TYPE,new Object[]{returnType.toString()});

    throw new IllegalArgumentException(fmsg);

  }

  try {

    Document document=getParser().parse(source);

    XObject resultObject=eval(expression,document);

    return getResultAsType(resultObject,returnType);

  }

 catch (  SAXException e) {

    throw new XPathExpressionException(e);

  }

catch (  IOException e) {

    throw new XPathExpressionException(e);

  }

catch (  javax.xml.transform.TransformerException te) {

    Throwable nestedException=te.getException();

    if (nestedException instanceof javax.xml.xpath.XPathFunctionException) {

      throw (javax.xml.xpath.XPathFunctionException)nestedException;

    }

 else {

      throw new XPathExpressionException(te);

    }

  }

}

Location: XPathImpl.java

Content: 

/** 

 * <p> Evaluate an XPath expression in the specified context and return the result as a <code>String</code>. </p> <p> This method calls {@link #evaluate(String expression,Object item,QName returnType)} with a<code>returnType</code> of  {@link XPathConstants#STRING}. </p> <p> See "Evaluation of XPath Expressions" of JAXP 1.3 spec for context item evaluation, variable, function and QName resolution and return type conversion. </p> <p> If a <code>null</code> value is provided for <code>item</code>, an empty document will be used for the context. If <code>expression</code> is <code>null</code>, then a <code>NullPointerException</code> is thrown. </p>

 * @param expression The XPath expression.

 * @param item       The starting context (node or node list, for example).

 * @return The <code>String</code> that is the result of evaluating theexpression and converting the result to a <code>String</code>.

 * @throws XPathExpressionException If <code>expression</code> cannot beevaluated.

 * @throws NullPointerException     If <code>expression</code> is<code>null</code>.

 */

public String evaluate(String expression,Object item) throws XPathExpressionException {

  return (String)this.evaluate(expression,item,XPathConstants.STRING);

}

Location: XPathImpl.java

Content: 

/** 

 * <p> Evaluate an <code>XPath</code> expression in the specified context and return the result as the specified type. </p> <p> See "Evaluation of XPath Expressions" section of JAXP 1.3 spec for context item evaluation, variable, function and <code>QName</code> resolution and return type conversion. </p> <p> If <code>returnType</code> is not one of the types defined in {@link XPathConstants} ( {@link XPathConstants#NUMBER NUMBER}, {@link XPathConstants#STRING STRING},  {@link XPathConstants#BOOLEAN BOOLEAN}, {@link XPathConstants#NODE NODE} or {@link XPathConstants#NODESET NODESET}) then an <code>IllegalArgumentException</code> is thrown. </p> <p> If a <code>null</code> value is provided for <code>item</code>, an empty document will be used for the context. If <code>expression</code> or <code>returnType</code> is <code>null</code>, then a <code>NullPointerException</code> is thrown. </p>

 * @param expression The XPath expression.

 * @param item       The starting context (node or node list, for example).

 * @param returnType The desired return type.

 * @return Result of evaluating an XPath expression as an <code>Object</code> of<code>returnType</code>.

 * @throws XPathExpressionException If <code>expression</code> cannot beevaluated.

 * @throws IllegalArgumentException If <code>returnType</code> is not one of thetypes defined in  {@link XPathConstants}.

 * @throws NullPointerException     If <code>expression</code> or<code>returnType</code> is <code>null</code>.

 */

public Object evaluate(String expression,Object item,QName returnType) throws XPathExpressionException {

  if (expression == null) {

    String fmsg=XSLMessages.createXPATHMessage(XPATHErrorResources.ER_ARG_CANNOT_BE_NULL,new Object[]{"XPath expression"});

    throw new NullPointerException(fmsg);

  }

  if (returnType == null) {

    String fmsg=XSLMessages.createXPATHMessage(XPATHErrorResources.ER_ARG_CANNOT_BE_NULL,new Object[]{"returnType"});

    throw new NullPointerException(fmsg);

  }

  if (!isSupported(returnType)) {

    String fmsg=XSLMessages.createXPATHMessage(XPATHErrorResources.ER_UNSUPPORTED_RETURN_TYPE,new Object[]{returnType.toString()});

    throw new IllegalArgumentException(fmsg);

  }

  try {

    XObject resultObject=eval(expression,item);

    return getResultAsType(resultObject,returnType);

  }

 catch (  java.lang.NullPointerException npe) {

    throw new XPathExpressionException(npe);

  }

catch (  javax.xml.transform.TransformerException te) {

    Throwable nestedException=te.getException();

    if (nestedException instanceof javax.xml.xpath.XPathFunctionException) {

      throw (javax.xml.xpath.XPathFunctionException)nestedException;

    }

 else {

      throw new XPathExpressionException(te);

    }

  }

}

Location: XPathImpl.java

Content: 

private XObject eval(String expression,Object contextItem) throws javax.xml.transform.TransformerException {

  org.apache.xpath.XPath xpath=new org.apache.xpath.XPath(expression,null,prefixResolver,org.apache.xpath.XPath.SELECT);

  org.apache.xpath.XPathContext xpathSupport=null;

  if (functionResolver != null) {

    JAXPExtensionsProvider jep=new JAXPExtensionsProvider(functionResolver,featureSecureProcessing);

    xpathSupport=new org.apache.xpath.XPathContext(jep,false);

  }

 else {

    xpathSupport=new org.apache.xpath.XPathContext(false);

  }

  XObject xobj=null;

  xpathSupport.setVarStack(new JAXPVariableStack(variableResolver));

  if (contextItem instanceof Node) {

    xobj=xpath.execute(xpathSupport,(Node)contextItem,prefixResolver);

  }

 else {

    xobj=xpath.execute(xpathSupport,DTM.NULL,prefixResolver);

  }

  return xobj;

}

Location: XPathImpl.java

Content: 

/** 

 * <p> Returns the current namespace context. </p>

 * @return Current Namespace context

 */

public NamespaceContext getNamespaceContext(){

  return namespaceContext;

}

Location: XPathImpl.java

Content: 

private static DocumentBuilder getParser(){

  try {

    DocumentBuilderFactory dbf=DocumentBuilderFactory.newInstance();

    dbf.setNamespaceAware(true);

    dbf.setValidating(false);

    return dbf.newDocumentBuilder();

  }

 catch (  ParserConfigurationException e) {

    throw new Error(e.toString());

  }

}

Location: XPathImpl.java

Content: 

/** 

 * <p> Returns the current function resolver. </p>

 * @return Current function resolver

 */

public XPathFunctionResolver getXPathFunctionResolver(){

  return functionResolver;

}

Location: XPathImpl.java

Content: 

/** 

 * <p> Returns the current variable resolver. </p>

 * @return Current variable resolver

 */

public XPathVariableResolver getXPathVariableResolver(){

  return variableResolver;

}

Location: XPathImpl.java

Content: 

/** 

 * <p> Establishes a namespace context. </p>

 * @param nsContext Namespace context to use

 */

public void setNamespaceContext(NamespaceContext nsContext){

  if (nsContext == null) {

    String fmsg=XSLMessages.createXPATHMessage(XPATHErrorResources.ER_ARG_CANNOT_BE_NULL,new Object[]{"NamespaceContext"});

    throw new NullPointerException(fmsg);

  }

  this.namespaceContext=nsContext;

  this.prefixResolver=new JAXPPrefixResolver(nsContext);

}

Location: XPathImpl.java

Content: 

XPathImpl(XPathVariableResolver vr,XPathFunctionResolver fr){

  this.origVariableResolver=this.variableResolver=vr;

  this.origFunctionResolver=this.functionResolver=fr;

}

Location: XPathImpl.java

Content: 

XPathImpl(XPathVariableResolver vr,XPathFunctionResolver fr,boolean featureSecureProcessing){

  this.origVariableResolver=this.variableResolver=vr;

  this.origFunctionResolver=this.functionResolver=fr;

  this.featureSecureProcessing=featureSecureProcessing;

}

