Location: CallTemplate.java

Content: 

/** 

 * Build the list of effective parameters in this CallTemplate. The parameters of the called template are put into the array first. Then we visit the WithParam children of this CallTemplate and replace the Param with a corresponding WithParam having the same name.

 */

private void buildParameterList(){

  Vector defaultParams=_calleeTemplate.getParameters();

  int numParams=defaultParams.size();

  _parameters=new Object[numParams];

  for (int i=0; i < numParams; i++) {

    _parameters[i]=defaultParams.elementAt(i);

  }

  int count=elementCount();

  for (int i=0; i < count; i++) {

    Object node=elementAt(i);

    if (node instanceof WithParam) {

      WithParam withParam=(WithParam)node;

      QName name=withParam.getName();

      for (int k=0; k < numParams; k++) {

        Object object=_parameters[k];

        if (object instanceof Param && ((Param)object).getName().equals(name)) {

          withParam.setDoParameterOptimization(true);

          _parameters[k]=withParam;

          break;

        }

 else         if (object instanceof WithParam && ((WithParam)object).getName().equals(name)) {

          withParam.setDoParameterOptimization(true);

          _parameters[k]=withParam;

          break;

        }

      }

    }

  }

}

Location: CallTemplate.java

Content: 

/** 

 * Return the simple named template which this CallTemplate calls. Return false if there is no matched template or the matched template is not a simple named template.

 */

public Template getCalleeTemplate(){

  Template foundTemplate=getXSLTC().getParser().getSymbolTable().lookupTemplate(_name);

  return foundTemplate.isSimpleNamedTemplate() ? foundTemplate : null;

}

