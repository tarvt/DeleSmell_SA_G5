Location: DTMManager.java

Content: 

/** 

 * Default constructor is protected on purpose.

 */

protected DTMManager(){

}

Location: DTMManager.java

Content: 

/** 

 * %TBD% Doc NEEDSDOC ($objectName$) @return

 */

public int getDTMIdentityMask(){

  return IDENT_DTM_DEFAULT;

}

Location: DTMManager.java

Content: 

/** 

 * Get a flag indicating whether an incremental transform is desired

 * @return incremental boolean.

 */

public boolean getIncremental(){

  return m_incremental;

}

Location: DTMManager.java

Content: 

/** 

 * %TBD% Doc NEEDSDOC ($objectName$) @return

 */

public int getNodeIdentityMask(){

  return IDENT_NODE_DEFAULT;

}

Location: DTMManager.java

Content: 

/** 

 * Get a flag indicating whether the transformation phase should keep track of line and column numbers for the input source document.

 * @return source location boolean

 */

public boolean getSource_location(){

  return m_source_location;

}

Location: DTMManager.java

Content: 

/** 

 * Get the XMLStringFactory used for the DTMs.

 * @return a valid XMLStringFactory object, or null if it hasn't been set yet.

 */

public XMLStringFactory getXMLStringFactory(){

  return m_xsf;

}

Location: DTMManager.java

Content: 

/** 

 * Obtain a new instance of a <code>DTMManager</code>. This static method creates a new factory instance This method uses the following ordered lookup procedure to determine the <code>DTMManager</code> implementation class to load: <ul> <li>Use the <code>org.apache.xml.dtm.DTMManager</code> system property.</li> <li>Use the JAVA_HOME(the parent directory where jdk is installed)/lib/xalan.properties for a property file that contains the name of the implementation class keyed on the same value as the system property defined above.</li> <li>Use the Services API (as detailed in the JAR specification), if available, to determine the classname. The Services API will look for a classname in the file <code>META-INF/services/org.apache.xml.dtm.DTMManager</code> in jars available to the runtime.</li> <li>Use the default <code>DTMManager</code> classname, which is <code>org.apache.xml.dtm.ref.DTMManagerDefault</code>.</li> </ul> Once an application has obtained a reference to a <code> DTMManager</code> it can use the factory to configure and obtain parser instances.

 * @return new DTMManager instance, never null.

 * @throws DTMConfigurationException if the implementation is not available orcannot be instantiated.

 */

public static DTMManager newInstance(XMLStringFactory xsf) throws DTMConfigurationException {

  DTMManager factoryImpl=null;

  try {

    factoryImpl=(DTMManager)ObjectFactory.createObject(defaultPropName,defaultClassName);

  }

 catch (  ObjectFactory.ConfigurationError e) {

    throw new DTMConfigurationException(XMLMessages.createXMLMessage(XMLErrorResources.ER_NO_DEFAULT_IMPL,null),e.getException());

  }

  if (factoryImpl == null) {

    throw new DTMConfigurationException(XMLMessages.createXMLMessage(XMLErrorResources.ER_NO_DEFAULT_IMPL,null));

  }

  factoryImpl.setXMLStringFactory(xsf);

  return factoryImpl;

}

Location: DTMManager.java

Content: 

/** 

 * Set a flag indicating whether an incremental transform is desired This flag should have the same value as the FEATURE_INCREMENTAL feature which is set by the TransformerFactory.setAttribut() method before a DTMManager is created

 * @param incremental boolean to use to set m_incremental.

 */

public void setIncremental(boolean incremental){

  m_incremental=incremental;

}

Location: DTMManager.java

Content: 

/** 

 * Set a flag indicating whether the transformation phase should keep track of line and column numbers for the input source document. This flag should have the same value as the FEATURE_SOURCE_LOCATION feature which is set by the TransformerFactory.setAttribut() method before a DTMManager is created

 * @param sourceLocation boolean to use to set m_source_location

 */

public void setSource_location(boolean sourceLocation){

  m_source_location=sourceLocation;

}

Location: DTMManager.java

Content: 

/** 

 * Set the XMLStringFactory used for the DTMs.

 * @param xsf a valid XMLStringFactory object, should not be null.

 */

public void setXMLStringFactory(XMLStringFactory xsf){

  m_xsf=xsf;

}

