Location: ElemFallback.java

Content: 

/** 

 * Execute the fallback elements. This must be explicitly called to instantiate the content of an xsl:fallback element. When an XSLT transformer performs fallback for an instruction element, if the instruction element has one or more xsl:fallback children, then the content of each of the xsl:fallback children must be instantiated in sequence; otherwise, an error must be signaled. The content of an xsl:fallback element is a template.

 * @param transformer non-null reference to the the current transform-timestate.

 * @throws TransformerException

 */

public void executeFallback(TransformerImpl transformer) throws TransformerException {

  int parentElemType=m_parentNode.getXSLToken();

  if (Constants.ELEMNAME_EXTENSIONCALL == parentElemType || Constants.ELEMNAME_UNDEFINED == parentElemType) {

    if (transformer.getDebug())     transformer.getTraceManager().fireTraceEvent(this);

    transformer.executeChildTemplates(this,true);

    if (transformer.getDebug())     transformer.getTraceManager().fireTraceEndEvent(this);

  }

 else {

    System.out.println("Error!  parent of xsl:fallback must be an extension or unknown element!");

  }

}

