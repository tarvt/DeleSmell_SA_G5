Location: Process.java

Content: 

/** 

 * It is _much_ easier to debug under VJ++ if I can set a single breakpoint before this blows itself out of the water... (I keep checking this in, it keeps vanishing. Grr!)

 */

static void doExit(String msg){

  throw new RuntimeException(msg);

}

Location: Process.java

Content: 

/** 

 * Prints argument options.

 * @param resbundle Resource bundle

 */

protected static void printArgOptions(ResourceBundle resbundle){

  System.out.println(resbundle.getString("xslProc_option"));

  System.out.println("\n\t\t\t" + resbundle.getString("xslProc_common_options") + "\n");

  System.out.println(resbundle.getString("optionXSLTC"));

  System.out.println(resbundle.getString("optionIN"));

  System.out.println(resbundle.getString("optionXSL"));

  System.out.println(resbundle.getString("optionOUT"));

  System.out.println(resbundle.getString("optionV"));

  System.out.println(resbundle.getString("optionEDUMP"));

  System.out.println(resbundle.getString("optionXML"));

  System.out.println(resbundle.getString("optionTEXT"));

  System.out.println(resbundle.getString("optionHTML"));

  System.out.println(resbundle.getString("optionPARAM"));

  System.out.println(resbundle.getString("optionMEDIA"));

  System.out.println(resbundle.getString("optionFLAVOR"));

  System.out.println(resbundle.getString("optionDIAG"));

  System.out.println(resbundle.getString("optionURIRESOLVER"));

  System.out.println(resbundle.getString("optionENTITYRESOLVER"));

  waitForReturnKey(resbundle);

  System.out.println(resbundle.getString("optionCONTENTHANDLER"));

  System.out.println(resbundle.getString("optionSECUREPROCESSING"));

  System.out.println("\n\t\t\t" + resbundle.getString("xslProc_xalan_options") + "\n");

  System.out.println(resbundle.getString("optionQC"));

  System.out.println(resbundle.getString("optionTT"));

  System.out.println(resbundle.getString("optionTG"));

  System.out.println(resbundle.getString("optionTS"));

  System.out.println(resbundle.getString("optionTTC"));

  System.out.println(resbundle.getString("optionTCLASS"));

  System.out.println(resbundle.getString("optionLINENUMBERS"));

  System.out.println(resbundle.getString("optionINCREMENTAL"));

  System.out.println(resbundle.getString("optionNOOPTIMIMIZE"));

  System.out.println(resbundle.getString("optionRL"));

  System.out.println("\n\t\t\t" + resbundle.getString("xslProc_xsltc_options") + "\n");

  System.out.println(resbundle.getString("optionXO"));

  waitForReturnKey(resbundle);

  System.out.println(resbundle.getString("optionXD"));

  System.out.println(resbundle.getString("optionXJ"));

  System.out.println(resbundle.getString("optionXP"));

  System.out.println(resbundle.getString("optionXN"));

  System.out.println(resbundle.getString("optionXX"));

  System.out.println(resbundle.getString("optionXT"));

}

Location: Process.java

Content: 

/** 

 * Print a message if an option can only be used with -XSLTC.

 * @param option The option String

 */

private static void printInvalidXalanOption(String option){

  System.err.println(XSLMessages.createMessage("xslProc_invalid_xalan_option",new Object[]{option}));

}

Location: Process.java

Content: 

/** 

 * Print a message if an option cannot be used with -XSLTC.

 * @param option The option String

 */

private static void printInvalidXSLTCOption(String option){

  System.err.println(XSLMessages.createMessage("xslProc_invalid_xsltc_option",new Object[]{option}));

}

Location: Process.java

Content: 

/** 

 * Wait for a return key to continue

 * @param resbundle The resource bundle

 */

private static void waitForReturnKey(ResourceBundle resbundle){

  System.out.println(resbundle.getString("xslProc_return_to_continue"));

  try {

    while (System.in.read() != '\n')     ;

  }

 catch (  java.io.IOException e) {

  }

}

