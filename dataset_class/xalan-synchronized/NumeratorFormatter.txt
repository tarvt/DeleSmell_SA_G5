Location: NumeratorFormatter.java

Content: 

/** 

 * Convert a long integer into alphabetic counting, in other words count using the sequence A B C ... Z AA AB AC.... etc.

 * @param val   Value to convert -- must be greater than zero.

 * @param table a table containing one character for each digit in the radix

 * @return String representing alpha count of number.

 * @see org.apache.xalan.transformer.DecimalToRoman Note that the radix of the conversion is inferred from the size of the table.

 */

protected String int2alphaCount(int val,char[] table){

  int radix=table.length;

  char buf[]=new char[100];

  int charPos=buf.length - 1;

  int lookupIndex=1;

  int correction=0;

  do {

    correction=((lookupIndex == 0) || (correction != 0 && lookupIndex == radix - 1)) ? (radix - 1) : 0;

    lookupIndex=(val + correction) % radix;

    val=(val / radix);

    if (lookupIndex == 0 && val == 0)     break;

    buf[charPos--]=table[lookupIndex];

  }

 while (val > 0);

  return new String(buf,charPos + 1,(buf.length - charPos - 1));

}

Location: NumeratorFormatter.java

Content: 

/** 

 * Convert a long integer into roman numerals.

 * @param val           Value to convert.

 * @param prefixesAreOK true_ to enable prefix notation (e.g. 4 = "IV"), false_to disable prefix notation (e.g. 4 = "IIII").

 * @return Roman numeral string.

 * @see DecimalToRoman

 * @see m_romanConvertTable

 */

String long2roman(long val,boolean prefixesAreOK){

  if (val <= 0) {

    return "#E(" + val + ")";

  }

  final String roman;

  int place=0;

  if (val <= 3999L) {

    StringBuffer romanBuffer=new StringBuffer();

    do {

      while (val >= m_romanConvertTable[place].m_postValue) {

        romanBuffer.append(m_romanConvertTable[place].m_postLetter);

        val-=m_romanConvertTable[place].m_postValue;

      }

      if (prefixesAreOK) {

        if (val >= m_romanConvertTable[place].m_preValue) {

          romanBuffer.append(m_romanConvertTable[place].m_preLetter);

          val-=m_romanConvertTable[place].m_preValue;

        }

      }

      place++;

    }

 while (val > 0);

    roman=romanBuffer.toString();

  }

 else {

    roman="#error";

  }

  return roman;

}

Location: NumeratorFormatter.java

Content: 

/** 

 * Construct a NumeratorFormatter using an element that contains XSL number conversion attributes - format, letter-value, xml:lang, digit-group-sep, n-digits-per-group, and sequence-src.

 * @param xslNumberElement The given xsl:number element

 * @param processor        a non-null transformer instance

 */

NumeratorFormatter(Element xslNumberElement,TransformerImpl processor){

  m_xslNumberElement=xslNumberElement;

  m_processor=processor;

}

