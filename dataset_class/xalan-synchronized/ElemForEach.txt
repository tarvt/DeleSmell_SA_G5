Location: ElemForEach.java

Content: 

/** 

 * Construct a element representing xsl:for-each.

 */

public ElemForEach(){

}

Location: ElemForEach.java

Content: 

/** 

 * Get the count xsl:sort elements associated with this element.

 * @return The number of xsl:sort elements.

 */

public int getSortElemCount(){

  return (m_sortElems == null) ? 0 : m_sortElems.size();

}

Location: ElemForEach.java

Content: 

/** 

 * Get a xsl:sort element associated with this element.

 * @param i Index of xsl:sort element to get

 * @return xsl:sort element at given index

 */

public ElemSort getSortElem(int i){

  return (ElemSort)m_sortElems.elementAt(i);

}

Location: ElemForEach.java

Content: 

/** 

 * Get template element associated with this

 * @return template element associated with this (itself)

 */

protected ElemTemplateElement getTemplateMatch(){

  return this;

}

Location: ElemForEach.java

Content: 

/** 

 * Set a xsl:sort element associated with this element.

 * @param sortElem xsl:sort element to set

 */

public void setSortElem(ElemSort sortElem){

  if (null == m_sortElems)   m_sortElems=new Vector();

  m_sortElems.addElement(sortElem);

}

Location: ElemForEach.java

Content: 

/** 

 * Sort given nodes

 * @param xctxt       The XPath runtime state for the sort.

 * @param keys        Vector of sort keyx

 * @param sourceNodes Iterator of nodes to sort

 * @return iterator of sorted nodes

 * @throws TransformerException

 */

public DTMIterator sortNodes(XPathContext xctxt,Vector keys,DTMIterator sourceNodes) throws TransformerException {

  NodeSorter sorter=new NodeSorter(xctxt);

  sourceNodes.setShouldCacheNodes(true);

  sourceNodes.runTo(-1);

  xctxt.pushContextNodeList(sourceNodes);

  try {

    sorter.sort(sourceNodes,keys,xctxt);

    sourceNodes.setCurrentPos(0);

  }

  finally {

    xctxt.popContextNodeList();

  }

  return sourceNodes;

}

