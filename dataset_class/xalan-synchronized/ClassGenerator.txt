Location: ClassGenerator.java

Content: 

public void addMethod(MethodGenerator methodGen){

  Method[] methodsToAdd=methodGen.getGeneratedMethods(this);

  for (int i=0; i < methodsToAdd.length; i++) {

    addMethod(methodsToAdd[i]);

  }

}

Location: ClassGenerator.java

Content: 

public ClassGenerator(String class_name,String super_class_name,String file_name,int access_flags,String[] interfaces,Stylesheet stylesheet){

  super(class_name,super_class_name,file_name,access_flags,interfaces);

  _stylesheet=stylesheet;

  _parser=stylesheet.getParser();

  _aloadTranslet=new ALOAD(TRANSLET_INDEX);

  if (stylesheet.isMultiDocument()) {

    _domClass="org.apache.xalan.xsltc.dom.MultiDOM";

    _domClassSig="Lorg/apache/xalan/xsltc/dom/MultiDOM;";

  }

 else {

    _domClass="org.apache.xalan.xsltc.dom.DOMAdapter";

    _domClassSig="Lorg/apache/xalan/xsltc/dom/DOMAdapter;";

  }

  _applyTemplatesSig="(" + Constants.DOM_INTF_SIG + Constants.NODE_ITERATOR_SIG+ Constants.TRANSLET_OUTPUT_SIG+ ")V";

  _applyTemplatesSigForImport="(" + Constants.DOM_INTF_SIG + Constants.NODE_ITERATOR_SIG+ Constants.TRANSLET_OUTPUT_SIG+ Constants.NODE_FIELD_SIG+ ")V";

}

Location: ClassGenerator.java

Content: 

public final String getApplyTemplatesSig(){

  return _applyTemplatesSig;

}

Location: ClassGenerator.java

Content: 

public final String getApplyTemplatesSigForImport(){

  return _applyTemplatesSigForImport;

}

Location: ClassGenerator.java

Content: 

public final String getDOMClass(){

  return _domClass;

}

Location: ClassGenerator.java

Content: 

public final String getDOMClassSig(){

  return _domClassSig;

}

Location: ClassGenerator.java

Content: 

public final Stylesheet getStylesheet(){

  return _stylesheet;

}

