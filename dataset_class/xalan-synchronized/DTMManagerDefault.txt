Location: DTMManagerDefault.java

Content: 

/** 

 * Add a DTM to the DTM table. This convenience call adds it as the "base DTM ID", with offset 0. The other version of addDTM should be used if you want to add "extended" DTM IDs with nonzero offsets.

 * @param dtm Should be a valid reference to a DTM.

 * @param id  Integer DTM ID to be bound to this DTM

 */

synchronized public void addDTM(DTM dtm,int id){

  addDTM(dtm,id,0);

}

Location: DTMManagerDefault.java

Content: 

/** 

 * Add a DTM to the DTM table.

 * @param dtm    Should be a valid reference to a DTM.

 * @param id     Integer DTM ID to be bound to this DTM.

 * @param offset Integer addressing offset. The internal DTM Node ID is obtainedby adding this offset to the node-number field of the public DTM Handle. For the first DTM ID accessing each DTM, this is 0; for overflow addressing it will be a multiple of 1<<IDENT_DTM_NODE_BITS.

 */

synchronized public void addDTM(DTM dtm,int id,int offset){

  if (id >= IDENT_MAX_DTMS) {

    throw new DTMException(XMLMessages.createXMLMessage(XMLErrorResources.ER_NO_DTMIDS_AVAIL,null));

  }

  int oldlen=m_dtms.length;

  if (oldlen <= id) {

    int newlen=Math.min((id + 256),IDENT_MAX_DTMS);

    DTM new_m_dtms[]=new DTM[newlen];

    System.arraycopy(m_dtms,0,new_m_dtms,0,oldlen);

    m_dtms=new_m_dtms;

    int new_m_dtm_offsets[]=new int[newlen];

    System.arraycopy(m_dtm_offsets,0,new_m_dtm_offsets,0,oldlen);

    m_dtm_offsets=new_m_dtm_offsets;

  }

  m_dtms[id]=dtm;

  m_dtm_offsets[id]=offset;

  dtm.documentRegistration();

}

Location: DTMManagerDefault.java

Content: 

/** 

 * Constructor DTMManagerDefault

 */

public DTMManagerDefault(){

}

Location: DTMManagerDefault.java

Content: 

/** 

 * Get an instance of a DTM, loaded with the content from the specified source. If the unique flag is true, a new instance will always be returned. Otherwise it is up to the DTMManager to return a new instance or an instance that it already created and may be being used by someone else. A bit of magic in this implementation: If the source is null, unique is true, and incremental and doIndexing are both false, we return an instance of SAX2RTFDTM, which see. (I think more parameters will need to be added for error handling, and entity resolution, and more explicit control of the RTF situation).

 * @param source           the specification of the source object.

 * @param unique           true if the returned DTM must be unique, probablybecause it is going to be mutated.

 * @param whiteSpaceFilter Enables filtering of whitespace nodes, and may benull.

 * @param incremental      true if the DTM should be built incrementally, ifpossible.

 * @param doIndexing       true if the caller considers it worth it to useindexing schemes.

 * @return a non-null DTM reference.

 */

synchronized public DTM getDTM(Source source,boolean unique,DTMWSFilter whiteSpaceFilter,boolean incremental,boolean doIndexing){

  if (DEBUG && null != source)   System.out.println("Starting " + (unique ? "UNIQUE" : "shared") + " source: "+ source.getSystemId());

  XMLStringFactory xstringFactory=m_xsf;

  int dtmPos=getFirstFreeDTMID();

  int documentID=dtmPos << IDENT_DTM_NODE_BITS;

  if ((null != source) && source instanceof DOMSource) {

    DOM2DTM dtm=new DOM2DTM(this,(DOMSource)source,documentID,whiteSpaceFilter,xstringFactory,doIndexing);

    addDTM(dtm,dtmPos,0);

    return dtm;

  }

 else {

    boolean isSAXSource=(null != source) ? (source instanceof SAXSource) : true;

    boolean isStreamSource=(null != source) ? (source instanceof StreamSource) : false;

    if (isSAXSource || isStreamSource) {

      XMLReader reader=null;

      SAX2DTM dtm;

      try {

        InputSource xmlSource;

        if (null == source) {

          xmlSource=null;

        }

 else {

          reader=getXMLReader(source);

          xmlSource=SAXSource.sourceToInputSource(source);

          String urlOfSource=xmlSource.getSystemId();

          if (null != urlOfSource) {

            try {

              urlOfSource=SystemIDResolver.getAbsoluteURI(urlOfSource);

            }

 catch (            Exception e) {

              System.err.println("Can not absolutize URL: " + urlOfSource);

            }

            xmlSource.setSystemId(urlOfSource);

          }

        }

        if (source == null && unique && !incremental && !doIndexing) {

          dtm=new SAX2RTFDTM(this,source,documentID,whiteSpaceFilter,xstringFactory,doIndexing);

        }

 else {

          dtm=new SAX2DTM(this,source,documentID,whiteSpaceFilter,xstringFactory,doIndexing);

        }

        addDTM(dtm,dtmPos,0);

        boolean haveXercesParser=(null != reader) && (reader.getClass().getName().equals("org.apache.xerces.parsers.SAXParser"));

        if (haveXercesParser) {

          incremental=true;

        }

        if (m_incremental && incremental) {

          IncrementalSAXSource coParser=null;

          if (haveXercesParser) {

            try {

              coParser=(IncrementalSAXSource)Class.forName("org.apache.xml.dtm.ref.IncrementalSAXSource_Xerces").newInstance();

            }

 catch (            Exception ex) {

              ex.printStackTrace();

              coParser=null;

            }

          }

          if (coParser == null) {

            if (null == reader) {

              coParser=new IncrementalSAXSource_Filter();

            }

 else {

              IncrementalSAXSource_Filter filter=new IncrementalSAXSource_Filter();

              filter.setXMLReader(reader);

              coParser=filter;

            }

          }

          dtm.setIncrementalSAXSource(coParser);

          if (null == xmlSource) {

            return dtm;

          }

          if (null == reader.getErrorHandler()) {

            reader.setErrorHandler(dtm);

          }

          reader.setDTDHandler(dtm);

          try {

            coParser.startParse(xmlSource);

          }

 catch (          RuntimeException re) {

            dtm.clearCoRoutine();

            throw re;

          }

catch (          Exception e) {

            dtm.clearCoRoutine();

            throw new org.apache.xml.utils.WrappedRuntimeException(e);

          }

        }

 else {

          if (null == reader) {

            return dtm;

          }

          reader.setContentHandler(dtm);

          reader.setDTDHandler(dtm);

          if (null == reader.getErrorHandler()) {

            reader.setErrorHandler(dtm);

          }

          try {

            reader.setProperty("http://xml.org/sax/properties/lexical-handler",dtm);

          }

 catch (          SAXNotRecognizedException e) {

          }

catch (          SAXNotSupportedException e) {

          }

          try {

            reader.parse(xmlSource);

          }

 catch (          RuntimeException re) {

            dtm.clearCoRoutine();

            throw re;

          }

catch (          Exception e) {

            dtm.clearCoRoutine();

            throw new org.apache.xml.utils.WrappedRuntimeException(e);

          }

        }

        if (DUMPTREE) {

          System.out.println("Dumping SAX2DOM");

          dtm.dumpDTM(System.err);

        }

        return dtm;

      }

  finally {

        if (reader != null && !(m_incremental && incremental)) {

          reader.setContentHandler(m_defaultHandler);

          reader.setDTDHandler(m_defaultHandler);

          reader.setErrorHandler(m_defaultHandler);

          try {

            reader.setProperty("http://xml.org/sax/properties/lexical-handler",null);

          }

 catch (          Exception e) {

          }

        }

        releaseXMLReader(reader);

      }

    }

 else {

      throw new DTMException(XMLMessages.createXMLMessage(XMLErrorResources.ER_NOT_SUPPORTED,new Object[]{source}));

    }

  }

}

Location: DTMManagerDefault.java

Content: 

/** 

 * return the expanded name table. NEEDSDOC @param dtm NEEDSDOC ($objectName$) @return

 */

public ExpandedNameTable getExpandedNameTable(DTM dtm){

  return m_expandedNameTable;

}

Location: DTMManagerDefault.java

Content: 

/** 

 * Get the first free DTM ID available. %OPT% Linear search is inefficient!

 */

synchronized public int getFirstFreeDTMID(){

  int n=m_dtms.length;

  for (int i=1; i < n; i++) {

    if (null == m_dtms[i]) {

      return i;

    }

  }

  return n;

}

Location: DTMManagerDefault.java

Content: 

/** 

 * This method returns the SAX2 parser to use with the InputSource obtained from this URI. It may return null if any SAX2-conformant XML parser can be used, or if getInputSource() will also return null. The parser must be free for use (i.e., not currently in use for another parse(). After use of the parser is completed, the releaseXMLReader(XMLReader) must be called.

 * @param inputSource The value returned from the URIResolver.

 * @return a SAX2 XMLReader to use to resolve the inputSource argument.

 * @return non-null XMLReader reference ready to parse.

 */

synchronized public XMLReader getXMLReader(Source inputSource){

  try {

    XMLReader reader=(inputSource instanceof SAXSource) ? ((SAXSource)inputSource).getXMLReader() : null;

    if (null == reader) {

      if (m_readerManager == null) {

        m_readerManager=XMLReaderManager.getInstance();

      }

      reader=m_readerManager.getXMLReader();

    }

    return reader;

  }

 catch (  SAXException se) {

    throw new DTMException(se.getMessage(),se);

  }

}

