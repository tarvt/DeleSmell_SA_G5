Location: Predicate.java

Content: 

/** 

 * Create a new "Filter" class implementing <code>CurrentNodeListFilter</code>. Allocate registers for local variables and local parameters passed in the closure to test(). Notice that local variables need to be "unboxed".

 */

private void compileFilter(ClassGenerator classGen,MethodGenerator methodGen){

  TestGenerator testGen;

  LocalVariableGen local;

  FilterGenerator filterGen;

  _className=getXSLTC().getHelperClassName();

  filterGen=new FilterGenerator(_className,"java.lang.Object",toString(),ACC_PUBLIC | ACC_SUPER,new String[]{CURRENT_NODE_LIST_FILTER},classGen.getStylesheet());

  final ConstantPoolGen cpg=filterGen.getConstantPool();

  final int length=(_closureVars == null) ? 0 : _closureVars.size();

  for (int i=0; i < length; i++) {

    VariableBase var=((VariableRefBase)_closureVars.get(i)).getVariable();

    filterGen.addField(new Field(ACC_PUBLIC,cpg.addUtf8(var.getEscapedName()),cpg.addUtf8(var.getType().toSignature()),null,cpg.getConstantPool()));

  }

  final InstructionList il=new InstructionList();

  testGen=new TestGenerator(ACC_PUBLIC | ACC_FINAL,org.apache.bcel.generic.Type.BOOLEAN,new org.apache.bcel.generic.Type[]{org.apache.bcel.generic.Type.INT,org.apache.bcel.generic.Type.INT,org.apache.bcel.generic.Type.INT,org.apache.bcel.generic.Type.INT,Util.getJCRefType(TRANSLET_SIG),Util.getJCRefType(NODE_ITERATOR_SIG)},new String[]{"node","position","last","current","translet","iterator"},"test",_className,il,cpg);

  local=testGen.addLocalVariable("document",Util.getJCRefType(DOM_INTF_SIG),null,null);

  final String className=classGen.getClassName();

  il.append(filterGen.loadTranslet());

  il.append(new CHECKCAST(cpg.addClass(className)));

  il.append(new GETFIELD(cpg.addFieldref(className,DOM_FIELD,DOM_INTF_SIG)));

  local.setStart(il.append(new ASTORE(local.getIndex())));

  testGen.setDomIndex(local.getIndex());

  _exp.translate(filterGen,testGen);

  il.append(IRETURN);

  filterGen.addEmptyConstructor(ACC_PUBLIC);

  filterGen.addMethod(testGen);

  getXSLTC().dumpClass(filterGen.getJavaClass());

}

Location: Predicate.java

Content: 

/** 

 * Turns off all optimizations for this predicate.

 */

public void dontOptimize(){

  _canOptimize=false;

}

Location: Predicate.java

Content: 

/** 

 * Returns the value in an expression of the form 'step = value'. A value may be either a literal string or a variable whose type is string. Optimization if off if null is returned.

 */

public Expression getCompareValue(){

  if (_value != null) {

    return _value;

  }

  if (_exp == null) {

    return null;

  }

  if (_exp instanceof EqualityExpr) {

    EqualityExpr exp=(EqualityExpr)_exp;

    Expression left=exp.getLeft();

    Expression right=exp.getRight();

    if (left instanceof LiteralExpr) {

      _value=left;

      return _value;

    }

    if (left instanceof VariableRefBase && left.getType() == Type.String) {

      _value=left;

      return _value;

    }

    if (right instanceof LiteralExpr) {

      _value=right;

      return _value;

    }

    if (right instanceof VariableRefBase && right.getType() == Type.String) {

      _value=right;

      return _value;

    }

  }

  return null;

}

Location: Predicate.java

Content: 

/** 

 * Returns the node type of the expression owning this predicate. The return value is cached in <code>_ptype</code>.

 */

public int getPosType(){

  if (_ptype == -1) {

    SyntaxTreeNode parent=getParent();

    if (parent instanceof StepPattern) {

      _ptype=((StepPattern)parent).getNodeType();

    }

 else     if (parent instanceof AbsoluteLocationPath) {

      AbsoluteLocationPath path=(AbsoluteLocationPath)parent;

      Expression exp=path.getPath();

      if (exp instanceof Step) {

        _ptype=((Step)exp).getNodeType();

      }

    }

 else     if (parent instanceof VariableRefBase) {

      final VariableRefBase ref=(VariableRefBase)parent;

      final VariableBase var=ref.getVariable();

      final Expression exp=var.getExpression();

      if (exp instanceof Step) {

        _ptype=((Step)exp).getNodeType();

      }

    }

 else     if (parent instanceof Step) {

      _ptype=((Step)parent).getNodeType();

    }

  }

  return _ptype;

}

Location: Predicate.java

Content: 

/** 

 * Returns true if the predicate is a test for the existance of an element or attribute. All we have to do is to get the first node from the step, check if it is there, and then return true/false.

 */

public boolean isBooleanTest(){

  return (_exp instanceof BooleanExpr);

}

Location: Predicate.java

Content: 

/** 

 * Method to see if we can optimise the predicate by using a specialised iterator for expressions like '/foo/bar[@attr = $var]', which are very common in many stylesheets

 */

public boolean isNodeValueTest(){

  if (!_canOptimize)   return false;

  return (getStep() != null && getCompareValue() != null);

}

Location: Predicate.java

Content: 

/** 

 * Returns a boolean value indicating if the nth descendant optimization is on. Must be call after type checking!

 */

public boolean isNthDescendant(){

  return _nthDescendant;

}

Location: Predicate.java

Content: 

/** 

 * Returns a boolean value indicating if the nth position optimization is on. Must be call after type checking!

 */

public boolean isNthPositionFilter(){

  return _nthPositionFilter;

}

Location: Predicate.java

Content: 

public boolean parentIsPattern(){

  return (getParent() instanceof Pattern);

}

Location: Predicate.java

Content: 

/** 

 * Initializes a predicate.

 */

public Predicate(Expression exp){

  _exp=exp;

  _exp.setParent(this);

}

Location: Predicate.java

Content: 

/** 

 * Translate a predicate expression. This translation pushes two references on the stack: a reference to a newly created filter object and a reference to the predicate's closure.

 */

public void translateFilter(ClassGenerator classGen,MethodGenerator methodGen){

  final ConstantPoolGen cpg=classGen.getConstantPool();

  final InstructionList il=methodGen.getInstructionList();

  compileFilter(classGen,methodGen);

  il.append(new NEW(cpg.addClass(_className)));

  il.append(DUP);

  il.append(new INVOKESPECIAL(cpg.addMethodref(_className,"<init>","()V")));

  final int length=(_closureVars == null) ? 0 : _closureVars.size();

  for (int i=0; i < length; i++) {

    VariableRefBase varRef=(VariableRefBase)_closureVars.get(i);

    VariableBase var=varRef.getVariable();

    Type varType=var.getType();

    il.append(DUP);

    Closure variableClosure=_parentClosure;

    while (variableClosure != null) {

      if (variableClosure.inInnerClass())       break;

      variableClosure=variableClosure.getParentClosure();

    }

    if (variableClosure != null) {

      il.append(ALOAD_0);

      il.append(new GETFIELD(cpg.addFieldref(variableClosure.getInnerClassName(),var.getEscapedName(),varType.toSignature())));

    }

 else {

      il.append(var.loadInstruction());

    }

    il.append(new PUTFIELD(cpg.addFieldref(_className,var.getEscapedName(),varType.toSignature())));

  }

}

