Location: CountersTable.java

Content: 

/** 

 * Add a list of counted nodes that were built in backwards document order, or a list of counted nodes that are in forwards document order.

 * @param flist Vector of nodes built in forwards document order

 * @param blist Vector of nodes built in backwards document order

 */

void appendBtoFList(NodeSetDTM flist,NodeSetDTM blist){

  int n=blist.size();

  for (int i=(n - 1); i >= 0; i--) {

    flist.addElement(blist.item(i));

  }

}

Location: CountersTable.java

Content: 

/** 

 * Construct a CountersTable.

 */

public CountersTable(){

}

Location: CountersTable.java

Content: 

/** 

 * Count forward until the given node is found, or until we have looked to the given amount.

 * @param support    The XPath context to use

 * @param numberElem The given xsl:number element.

 * @param node       The node to count.

 * @return The node count, or 0 if not found.

 * @throws TransformerException

 */

public int countNode(XPathContext support,ElemNumber numberElem,int node) throws TransformerException {

  int count=0;

  Vector counters=getCounters(numberElem);

  int nCounters=counters.size();

  int target=numberElem.getTargetNode(support,node);

  if (DTM.NULL != target) {

    for (int i=0; i < nCounters; i++) {

      Counter counter=(Counter)counters.elementAt(i);

      count=counter.getPreviouslyCounted(support,target);

      if (count > 0)       return count;

    }

    count=0;

    if (m_newFound == null)     m_newFound=new NodeSetDTM(support.getDTMManager());

    for (; DTM.NULL != target; target=numberElem.getPreviousNode(support,target)) {

      if (0 != count) {

        for (int i=0; i < nCounters; i++) {

          Counter counter=(Counter)counters.elementAt(i);

          int cacheLen=counter.m_countNodes.size();

          if ((cacheLen > 0) && (counter.m_countNodes.elementAt(cacheLen - 1) == target)) {

            count+=(cacheLen + counter.m_countNodesStartCount);

            if (cacheLen > 0)             appendBtoFList(counter.m_countNodes,m_newFound);

            m_newFound.removeAllElements();

            return count;

          }

        }

      }

      m_newFound.addElement(target);

      count++;

    }

    Counter counter=new Counter(numberElem,new NodeSetDTM(support.getDTMManager()));

    m_countersMade++;

    appendBtoFList(counter.m_countNodes,m_newFound);

    m_newFound.removeAllElements();

    counters.addElement(counter);

  }

  return count;

}

Location: CountersTable.java

Content: 

/** 

 * Get the list of counters that corresponds to the given ElemNumber object.

 * @param numberElem the given xsl:number element.

 * @return the list of counters that corresponds to the given ElemNumber object.

 */

Vector getCounters(ElemNumber numberElem){

  Vector counters=(Vector)this.get(numberElem);

  return (null == counters) ? putElemNumber(numberElem) : counters;

}

Location: CountersTable.java

Content: 

/** 

 * Put a counter into the table and create an empty vector as it's value.

 * @param numberElem the given xsl:number element.

 * @return an empty vector to be used to store counts for this number element.

 */

Vector putElemNumber(ElemNumber numberElem){

  Vector counters=new Vector();

  this.put(numberElem,counters);

  return counters;

}

