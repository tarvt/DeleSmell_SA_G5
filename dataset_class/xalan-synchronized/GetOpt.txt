Location: GetOpt.java

Content: 

/** 

 * gets list of the commandline arguments. For example, in command such as 'cmd -s -d file file2 file3 file4' with the usage 'cmd [-s] [-d <file>] <file>...', getCmdArgs() would return the list {file2, file3, file4}.

 * @return String[] - list of command arguments that may appear after optionsand option arguments.

 */

public String[] getCmdArgs(){

  String[] retval=new String[theCmdArgs.size()];

  int i=0;

  for (ListIterator it=theCmdArgs.listIterator(); it.hasNext(); ) {

    retval[i++]=(String)it.next();

  }

  return retval;

}

Location: GetOpt.java

Content: 

/** 

 * gets the next option found in the commandline. Distinguishes between two bad cases, one case is when an illegal option is found, and then other case is when an option takes an argument but no argument was found for that option. If the option found was not declared in the optString, then an IllegalArgumentException will be thrown (case 1). If the next option found has been declared to take an argument, and no such argument exists, then a MissingOptArgException is thrown (case 2).

 * @return int - the next option found.

 * @throws IllegalArgumentException , MissingOptArgException.

 */

public int getNextOption() throws IllegalArgumentException, MissingOptArgException {

  int retval=-1;

  if (theOptionsIterator.hasNext()) {

    theCurrentOption=(Option)theOptionsIterator.next();

    char c=theCurrentOption.getArgLetter();

    boolean shouldHaveArg=theOptionMatcher.hasArg(c);

    String arg=theCurrentOption.getArgument();

    if (!theOptionMatcher.match(c)) {

      ErrorMsg msg=new ErrorMsg(ErrorMsg.ILLEGAL_CMDLINE_OPTION_ERR,new Character(c));

      throw (new IllegalArgumentException(msg.toString()));

    }

 else     if (shouldHaveArg && (arg == null)) {

      ErrorMsg msg=new ErrorMsg(ErrorMsg.CMDLINE_OPT_MISSING_ARG_ERR,new Character(c));

      throw (new MissingOptArgException(msg.toString()));

    }

    retval=c;

  }

  return retval;

}

Location: GetOpt.java

Content: 

/** 

 * gets the argument for the current parsed option. For example, in case of '-d <file>', if current option parsed is 'd' then getOptionArg() would return '<file>'.

 * @return String - argument for current parsed option.

 */

public String getOptionArg(){

  String retval=null;

  String tmp=theCurrentOption.getArgument();

  char c=theCurrentOption.getArgLetter();

  if (theOptionMatcher.hasArg(c)) {

    retval=tmp;

  }

  return retval;

}

Location: GetOpt.java

Content: 

public GetOpt(String[] args,String optString){

  theOptions=new ArrayList();

  int currOptIndex=0;

  theCmdArgs=new ArrayList();

  theOptionMatcher=new OptionMatcher(optString);

  for (int i=0; i < args.length; i++) {

    String token=args[i];

    int tokenLength=token.length();

    if (token.equals("--")) {

      currOptIndex=i + 1;

      break;

    }

 else     if (token.startsWith("-") && tokenLength == 2) {

      theOptions.add(new Option(token.charAt(1)));

    }

 else     if (token.startsWith("-") && tokenLength > 2) {

      for (int j=1; j < tokenLength; j++) {

        theOptions.add(new Option(token.charAt(j)));

      }

    }

 else     if (!token.startsWith("-")) {

      if (theOptions.size() == 0) {

        currOptIndex=i;

        break;

      }

 else {

        int indexoflast=0;

        indexoflast=theOptions.size() - 1;

        Option op=(Option)theOptions.get(indexoflast);

        char opLetter=op.getArgLetter();

        if (!op.hasArg() && theOptionMatcher.hasArg(opLetter)) {

          op.setArg(token);

        }

 else {

          currOptIndex=i;

          break;

        }

      }

    }

  }

  theOptionsIterator=theOptions.listIterator();

  for (int i=currOptIndex; i < args.length; i++) {

    String token=args[i];

    theCmdArgs.add(token);

  }

}

Location: GetOpt.java

Content: 

/** 

 * debugging routine to print out all options collected

 */

public void printOptions(){

  for (ListIterator it=theOptions.listIterator(); it.hasNext(); ) {

    Option opt=(Option)it.next();

    System.out.print("OPT =" + opt.getArgLetter());

    String arg=opt.getArgument();

    if (arg != null) {

      System.out.print(" " + arg);

    }

    System.out.println();

  }

}

