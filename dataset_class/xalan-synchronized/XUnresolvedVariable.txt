Location: XUnresolvedVariable.java

Content: 

/** 

 * Set an index into the variable stack where the variable context ends, i.e. at the point we should terminate the search.

 * @param bottom The point at which the search should terminate, normally zerofor global variables.

 */

public void setVarStackContext(int bottom){

  m_varStackContext=bottom;

}

Location: XUnresolvedVariable.java

Content: 

/** 

 * Set an index to the point in the variable stack where we should begin variable searches for evaluation of expressions. This is -1 if m_isTopLevel is false.

 * @param top A valid value that specifies where in the variable stack thesearch should begin.

 */

public void setVarStackPos(int top){

  m_varStackPos=top;

}

Location: XUnresolvedVariable.java

Content: 

/** 

 * Create an XUnresolvedVariable, that may be executed at a later time. This is primarily used so that forward referencing works with global variables. An XUnresolvedVariable is initially pushed into the global variable stack, and then replaced with the real thing when it is accessed.

 * @param obj             Must be a non-null reference to an ElemVariable.

 * @param sourceNode      The node context for execution.

 * @param transformer     The transformer execution context.

 * @param varStackPos     An index to the point in the variable stack where weshould begin variable searches for evaluation of expressions.

 * @param varStackContext An index into the variable stack where the variablecontext ends, i.e. at the point we should terminate the search.

 * @param isGlobal        true if this is a global variable.

 */

public XUnresolvedVariable(ElemVariable obj,int sourceNode,TransformerImpl transformer,int varStackPos,int varStackContext,boolean isGlobal){

  super(obj);

  m_context=sourceNode;

  m_transformer=transformer;

  m_varStackPos=varStackPos;

  m_varStackContext=varStackContext;

  m_isGlobal=isGlobal;

}

