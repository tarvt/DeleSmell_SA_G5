Location: XSLTElementProcessor.java

Content: 

/** 

 * Get the element definition that belongs to this element.

 * @return The element definition object that produced and constrains thiselement.

 */

XSLTElementDef getElemDef(){

  return m_elemDef;

}

Location: XSLTElementProcessor.java

Content: 

/** 

 * Receive notification of ignorable whitespace in element content.

 * @param handler non-null reference to current StylesheetHandler that isconstructing the Templates.

 * @param ch      The whitespace characters.

 * @param start   The start position in the character array.

 * @param length  The number of characters to use from the character array.

 */

public void ignorableWhitespace(StylesheetHandler handler,char ch[],int start,int length) throws org.xml.sax.SAXException {

}

Location: XSLTElementProcessor.java

Content: 

/** 

 * Receive notification of a notation declaration.

 * @param handler  non-null reference to current StylesheetHandler that isconstructing the Templates.

 * @param name     The notation name.

 * @param publicId The notation public identifier, or null if not available.

 * @param systemId The notation system identifier.

 * @see org.xml.sax.DTDHandler#notationDecl

 */

public void notationDecl(StylesheetHandler handler,String name,String publicId,String systemId){

}

Location: XSLTElementProcessor.java

Content: 

/** 

 * Receive notification of a processing instruction.

 * @param handler non-null reference to current StylesheetHandler that isconstructing the Templates.

 * @param target  The processing instruction target.

 * @param data    The processing instruction data, or null if none is supplied.

 */

public void processingInstruction(StylesheetHandler handler,String target,String data) throws org.xml.sax.SAXException {

}

Location: XSLTElementProcessor.java

Content: 

/** 

 * Resolve an external entity.

 * @param handler  non-null reference to current StylesheetHandler that isconstructing the Templates.

 * @param publicId The public identifer, or null if none is available.

 * @param systemId The system identifier provided in the XML document.

 * @return The new input source, or null to require the default behaviour.

 */

public InputSource resolveEntity(StylesheetHandler handler,String publicId,String systemId) throws org.xml.sax.SAXException {

  return null;

}

Location: XSLTElementProcessor.java

Content: 

/** 

 * Set the element definition that belongs to this element.

 * @param def The element definition object that produced and constrains thiselement.

 */

void setElemDef(XSLTElementDef def){

  m_elemDef=def;

}

Location: XSLTElementProcessor.java

Content: 

/** 

 * Set the properties of an object from the given attribute list.

 * @param handler    The stylesheet's Content handler, needed for errorreporting.

 * @param rawName    The raw name of the owner element, needed for errorreporting.

 * @param attributes The list of attributes.

 * @param target     The target element where the properties will be set.

 */

void setPropertiesFromAttributes(StylesheetHandler handler,String rawName,Attributes attributes,ElemTemplateElement target) throws org.xml.sax.SAXException {

  setPropertiesFromAttributes(handler,rawName,attributes,target,true);

}

Location: XSLTElementProcessor.java

Content: 

/** 

 * Set the properties of an object from the given attribute list.

 * @param handler    The stylesheet's Content handler, needed for errorreporting.

 * @param rawName    The raw name of the owner element, needed for errorreporting.

 * @param attributes The list of attributes.

 * @param target     The target element where the properties will be set.

 * @param throwError True if it should throw an error if an attribute is notdefined.

 * @return the attributes not allowed on this element.

 * @throws TransformerException

 */

Attributes setPropertiesFromAttributes(StylesheetHandler handler,String rawName,Attributes attributes,ElemTemplateElement target,boolean throwError) throws org.xml.sax.SAXException {

  XSLTElementDef def=getElemDef();

  AttributesImpl undefines=null;

  boolean isCompatibleMode=((null != handler.getStylesheet() && handler.getStylesheet().getCompatibleMode()) || !throwError);

  if (isCompatibleMode)   undefines=new AttributesImpl();

  List processedDefs=new ArrayList();

  List errorDefs=new ArrayList();

  int nAttrs=attributes.getLength();

  for (int i=0; i < nAttrs; i++) {

    String attrUri=attributes.getURI(i);

    if ((null != attrUri) && (attrUri.length() == 0) && (attributes.getQName(i).startsWith("xmlns:") || attributes.getQName(i).equals("xmlns"))) {

      attrUri=org.apache.xalan.templates.Constants.S_XMLNAMESPACEURI;

    }

    String attrLocalName=attributes.getLocalName(i);

    XSLTAttributeDef attrDef=def.getAttributeDef(attrUri,attrLocalName);

    if (null == attrDef) {

      if (!isCompatibleMode) {

        handler.error(XSLTErrorResources.ER_ATTR_NOT_ALLOWED,new Object[]{attributes.getQName(i),rawName},null);

      }

 else {

        undefines.addAttribute(attrUri,attrLocalName,attributes.getQName(i),attributes.getType(i),attributes.getValue(i));

      }

    }

 else {

      if (handler.getStylesheetProcessor() == null)       System.out.println("stylesheet processor null");

      if (attrDef.getName().compareTo("*") == 0 && handler.getStylesheetProcessor().isSecureProcessing()) {

        handler.error(XSLTErrorResources.ER_ATTR_NOT_ALLOWED,new Object[]{attributes.getQName(i),rawName},null);

      }

 else {

        boolean success=attrDef.setAttrValue(handler,attrUri,attrLocalName,attributes.getQName(i),attributes.getValue(i),target);

        if (success)         processedDefs.add(attrDef);

 else         errorDefs.add(attrDef);

      }

    }

  }

  XSLTAttributeDef[] attrDefs=def.getAttributes();

  int nAttrDefs=attrDefs.length;

  for (int i=0; i < nAttrDefs; i++) {

    XSLTAttributeDef attrDef=attrDefs[i];

    String defVal=attrDef.getDefault();

    if (null != defVal) {

      if (!processedDefs.contains(attrDef)) {

        attrDef.setDefAttrValue(handler,target);

      }

    }

    if (attrDef.getRequired()) {

      if ((!processedDefs.contains(attrDef)) && (!errorDefs.contains(attrDef)))       handler.error(XSLMessages.createMessage(XSLTErrorResources.ER_REQUIRES_ATTRIB,new Object[]{rawName,attrDef.getName()}),null);

    }

  }

  return undefines;

}

Location: XSLTElementProcessor.java

Content: 

/** 

 * Receive notification of a skipped entity.

 * @param handler non-null reference to current StylesheetHandler that isconstructing the Templates.

 * @param name    The name of the skipped entity.

 */

public void skippedEntity(StylesheetHandler handler,String name) throws org.xml.sax.SAXException {

}

Location: XSLTElementProcessor.java

Content: 

/** 

 * Receive notification of an unparsed entity declaration.

 * @param handler      non-null reference to current StylesheetHandler that isconstructing the Templates.

 * @param name         The entity name.

 * @param publicId     The entity public identifier, or null if not available.

 * @param systemId     The entity system identifier.

 * @param notationName The name of the associated notation.

 * @see org.xml.sax.DTDHandler#unparsedEntityDecl

 */

public void unparsedEntityDecl(StylesheetHandler handler,String name,String publicId,String systemId,String notationName){

}

Location: XSLTElementProcessor.java

Content: 

/** 

 * Construct a processor for top-level elements.

 * @see <a href="http://www.w3.org/TR/xslt#dtd">XSLT DTD</a>

 */

XSLTElementProcessor(){

}

