Location: LocPathIterator.java

Content: 

/** 

 * Given an select expression and a context, evaluate the XPath and return the resulting iterator.

 * @param xctxt       The execution context.

 * @param contextNode The node that "." expresses.

 * @throws TransformerException                     thrown if the activeProblemListener decides the error condition is severe enough to halt processing.

 * @throws javax.xml.transform.TransformerException

 * @xsl.usage experimental

 */

public DTMIterator asIterator(XPathContext xctxt,int contextNode) throws javax.xml.transform.TransformerException {

  XNodeSet iter=new XNodeSet((LocPathIterator)m_clones.getInstance());

  iter.setRoot(contextNode,xctxt);

  return iter;

}

Location: LocPathIterator.java

Content: 

/** 

 * Execute an expression in the XPath runtime context, and return the result of the expression.

 * @param xctxt   The XPath runtime context.

 * @param handler The target content handler.

 * @return The result of the expression in the form of a <code>XObject</code>.

 * @throws javax.xml.transform.TransformerException if a runtime exceptionoccurs.

 * @throws org.xml.sax.SAXException

 */

public void executeCharsToContentHandler(XPathContext xctxt,org.xml.sax.ContentHandler handler) throws javax.xml.transform.TransformerException, org.xml.sax.SAXException {

  LocPathIterator clone=(LocPathIterator)m_clones.getInstance();

  int current=xctxt.getCurrentNode();

  clone.setRoot(current,xctxt);

  int node=clone.nextNode();

  DTM dtm=clone.getDTM(node);

  clone.detach();

  if (node != DTM.NULL) {

    dtm.dispatchCharactersEvents(node,handler,false);

  }

}

Location: LocPathIterator.java

Content: 

/** 

 * The node context for the iterator.

 * @return The node context, same as getRoot().

 */

public final int getContext(){

  return m_context;

}

Location: LocPathIterator.java

Content: 

/** 

 * The node context from where the expression is being executed from (i.e. for current() support).

 * @return The top-level node context of the entire expression.

 */

public final int getCurrentContextNode(){

  return m_currentContextNode;

}

Location: LocPathIterator.java

Content: 

/** 

 * Get the current position, which is one less than the next nextNode() call will retrieve. i.e. if you call getCurrentPos() and the return is 0, the next fetch will take place at index 1.

 * @return A value greater than or equal to zero that indicates the next nodeposition to fetch.

 */

public final int getCurrentPos(){

  return m_pos;

}

Location: LocPathIterator.java

Content: 

/** 

 * Get an instance of the DTMManager. Since a node iterator may be passed without a DTMManager, this allows the caller to easily get the DTMManager using just the iterator.

 * @return a non-null DTMManager reference.

 */

public DTMManager getDTMManager(){

  return m_execContext.getDTMManager();

}

Location: LocPathIterator.java

Content: 

/** 

 * The value of this flag determines whether the children of entity reference nodes are visible to the iterator. If false, they will be skipped over. <br> To produce a view of the document that has entity references expanded and does not expose the entity reference node itself, use the whatToShow flags to hide the entity reference node and set expandEntityReferences to true when creating the iterator. To produce a view of the document that has entity reference nodes but no entity expansion, use the whatToShow flags to show the entity reference node and set expandEntityReferences to false.

 * @return Always true, since entity reference nodes are not visible in theXPath model.

 */

public boolean getExpandEntityReferences(){

  return true;

}

Location: LocPathIterator.java

Content: 

/** 

 * The filter used to screen nodes. Not used at this time, this is here only to fullfill the DOM NodeIterator interface.

 * @return Always null.

 * @see org.w3c.dom.traversal.NodeIterator

 */

public DTMFilter getFilter(){

  return null;

}

Location: LocPathIterator.java

Content: 

/** 

 * Tells if we've found the last node yet.

 * @return true if the last nextNode returned null.

 */

public final boolean getFoundLast(){

  return m_foundLast;

}

Location: LocPathIterator.java

Content: 

/** 

 * Get if this is an iterator at the upper level of the XPath.

 * @return true if this location path is at the top level of the expression.

 * @xsl.usage advanced

 */

public boolean getIsTopLevel(){

  return m_isTopLevel;

}

Location: LocPathIterator.java

Content: 

/** 

 * The number of nodes in the list. The range of valid child node indices is 0 to <code>length-1</code> inclusive.

 * @return The number of nodes in the list, always greater or equal to zero.

 */

public int getLength(){

  boolean isPredicateTest=(this == m_execContext.getSubContextList());

  int predCount=getPredicateCount();

  if (-1 != m_length && isPredicateTest && m_predicateIndex < 1)   return m_length;

  if (m_foundLast)   return m_pos;

  int pos=(m_predicateIndex >= 0) ? getProximityPosition() : m_pos;

  LocPathIterator clone;

  try {

    clone=(LocPathIterator)clone();

  }

 catch (  CloneNotSupportedException cnse) {

    return -1;

  }

  if (predCount > 0 && isPredicateTest) {

    clone.m_predCount=m_predicateIndex;

  }

  int next;

  while (DTM.NULL != (next=clone.nextNode())) {

    pos++;

  }

  if (isPredicateTest && m_predicateIndex < 1)   m_length=pos;

  return pos;

}

Location: LocPathIterator.java

Content: 

/** 

 * Return the saved reference to the prefix resolver that was in effect when this iterator was created.

 * @return The prefix resolver or this iterator, which may be null.

 */

public final PrefixResolver getPrefixResolver(){

  if (null == m_prefixResolver) {

    m_prefixResolver=(PrefixResolver)getExpressionOwner();

  }

  return m_prefixResolver;

}

Location: LocPathIterator.java

Content: 

/** 

 * Increment the current position in the node set.

 */

public void incrementCurrentPos(){

  m_pos++;

}

Location: LocPathIterator.java

Content: 

/** 

 * Tells if this NodeSetDTM is "fresh", in other words, if the first nextNode() that is called will return the first node in the set.

 * @return true of nextNode has not been called.

 */

public boolean isFresh(){

  return (m_pos == 0);

}

Location: LocPathIterator.java

Content: 

/** 

 * Tells if this iterator can have nodes added to it or set via the <code>setItem(int node, int index)</code> method.

 * @return True if the nodelist can be mutated.

 */

public boolean isMutable(){

  return false;

}

Location: LocPathIterator.java

Content: 

/** 

 * Tell if the expression is a nodeset expression.

 * @return true if the expression can be represented as a nodeset.

 */

public boolean isNodesetExpr(){

  return true;

}

Location: LocPathIterator.java

Content: 

/** 

 * Returns the <code>index</code> th item in the collection. If <code>index</code> is greater than or equal to the number of nodes in the list, this returns <code>null</code> .

 * @param index Index into the collection.

 * @return The node at the <code>index</code> th position in the<code>NodeList</code> , or <code>null</code> if that is not a valid index.

 */

public int item(int index){

  assertion(false,"item(int index) not supported by this iterator!");

  return 0;

}

Location: LocPathIterator.java

Content: 

/** 

 * Create a LocPathIterator object.

 */

protected LocPathIterator(){

}

Location: LocPathIterator.java

Content: 

/** 

 * Create a LocPathIterator object, including creation of step walkers from the opcode list, and call back into the Compiler to create predicate expressions.

 * @param compiler The Compiler which is creating this expression.

 * @param opPos    The position of this iterator in the opcode list from thecompiler.

 * @throws javax.xml.transform.TransformerException

 */

protected LocPathIterator(Compiler compiler,int opPos,int analysis) throws javax.xml.transform.TransformerException {

  this(compiler,opPos,analysis,true);

}

Location: LocPathIterator.java

Content: 

/** 

 * Create a LocPathIterator object, including creation of step walkers from the opcode list, and call back into the Compiler to create predicate expressions.

 * @param compiler          The Compiler which is creating this expression.

 * @param opPos             The position of this iterator in the opcode listfrom the compiler.

 * @param shouldLoadWalkers True if walkers should be loaded, or false if thisis a derived iterator and it doesn't wish to load child walkers.

 * @throws javax.xml.transform.TransformerException

 */

protected LocPathIterator(Compiler compiler,int opPos,int analysis,boolean shouldLoadWalkers) throws javax.xml.transform.TransformerException {

  setLocPathIterator(this);

}

Location: LocPathIterator.java

Content: 

/** 

 * Create a LocPathIterator object.

 * @param nscontext The namespace context for this iterator, should be OK ifnull.

 */

protected LocPathIterator(PrefixResolver nscontext){

  setLocPathIterator(this);

  m_prefixResolver=nscontext;

}

Location: LocPathIterator.java

Content: 

/** 

 * Returns the previous node in the set and moves the position of the iterator backwards in the set.

 * @return The previous <code>Node</code> in the set being iterated over,or<code>null</code> if there are no more members in that set.

 */

public int previousNode(){

  throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESETDTM_CANNOT_ITERATE,null));

}

Location: LocPathIterator.java

Content: 

/** 

 * If an index is requested, NodeSetDTM will call this method to run the iterator to the index. By default this sets m_next to the index. If the index argument is -1, this signals that the iterator should be run to the end.

 * @param index The index to run to, or -1 if the iterator should run to theend.

 */

public void runTo(int index){

  if (m_foundLast || ((index >= 0) && (index <= getCurrentPos())))   return;

  int n;

  if (-1 == index) {

    while (DTM.NULL != (n=nextNode()))     ;

  }

 else {

    while (DTM.NULL != (n=nextNode())) {

      if (getCurrentPos() >= index)       break;

    }

  }

}

Location: LocPathIterator.java

Content: 

/** 

 * Set the current context node for this iterator.

 * @param n Must be a non-null reference to the node context.

 */

public final void setCurrentContextNode(int n){

  m_currentContextNode=n;

}

Location: LocPathIterator.java

Content: 

/** 

 * Set the current position in the node set.

 * @param i Must be a valid index greater than or equal to zero and less thanm_cachedNodes.size().

 */

public void setCurrentPos(int i){

  assertion(false,"setCurrentPos not supported by this iterator!");

}

Location: LocPathIterator.java

Content: 

/** 

 * Set the environment in which this iterator operates, which should provide: a node (the context node... same value as "root" defined below) a pair of non-zero positive integers (the context position and the context size) a set of variable bindings a function library the set of namespace declarations in scope for the expression. <p> At this time the exact implementation of this environment is application dependent. Probably a proper interface will be created fairly soon. </p>

 * @param environment The environment object.

 */

public void setEnvironment(Object environment){

}

Location: LocPathIterator.java

Content: 

/** 

 * Set if this is an iterator at the upper level of the XPath.

 * @param b true if this location path is at the top level of the expression.

 * @xsl.usage advanced

 */

public void setIsTopLevel(boolean b){

  m_isTopLevel=b;

}

Location: LocPathIterator.java

Content: 

/** 

 * Sets the node at the specified index of this vector to be the specified node. The previous component at that position is discarded. <p> The index must be a value greater than or equal to 0 and less than the current size of the vector. The iterator must be in cached mode. </p> <p> Meant to be used for sorted iterators. </p>

 * @param node  Node to set

 * @param index Index of where to set the node

 */

public void setItem(int node,int index){

  assertion(false,"setItem not supported by this iterator!");

}

Location: LocPathIterator.java

Content: 

/** 

 * Set the next position index of this iterator.

 * @param next A value greater than or equal to zero that indicates the nextnode position to fetch.

 */

protected void setNextPosition(int next){

  assertion(false,"setNextPosition not supported in this iterator!");

}

Location: LocPathIterator.java

Content: 

/** 

 * If setShouldCacheNodes(true) is called, then nodes will be cached. They are not cached by default.

 * @param b True if this iterator should cache nodes.

 */

public void setShouldCacheNodes(boolean b){

  assertion(false,"setShouldCacheNodes not supported by this iterater!");

}

Location: LocPathIterator.java

Content: 

/** 

 * Get the length of the cached nodes. <p> Note: for the moment at least, this only returns the size of the nodes that have been fetched to date, it doesn't attempt to run to the end to make sure we have found everything. This should be reviewed. </p>

 * @return The size of the current cache list.

 */

public int size(){

  assertion(false,"size() not supported by this iterator!");

  return 0;

}

