Location: MultiValuedNodeHeapIterator.java

Content: 

protected void addHeapNode(HeapNode node){

  if (_free == _size) {

    HeapNode[] newArray=new HeapNode[_size*=2];

    System.arraycopy(_heap,0,newArray,0,_free);

    _heap=newArray;

  }

  _heapSize++;

  _heap[_free++]=node;

}

Location: MultiValuedNodeHeapIterator.java

Content: 

private void heapify(int i){

  for (int r, l, smallest; ; ) {

    r=(i + 1) << 1;

    l=r - 1;

    smallest=l < _heapSize && _heap[l].isLessThan(_heap[i]) ? l : i;

    if (r < _heapSize && _heap[r].isLessThan(_heap[smallest])) {

      smallest=r;

    }

    if (smallest != i) {

      final HeapNode temp=_heap[smallest];

      _heap[smallest]=_heap[i];

      _heap[i]=temp;

      i=smallest;

    }

 else {

      break;

    }

  }

}

Location: MultiValuedNodeHeapIterator.java

Content: 

protected void init(){

  for (int i=0; i < _free; i++) {

    _heap[i]=null;

  }

  _heapSize=0;

  _free=0;

}

