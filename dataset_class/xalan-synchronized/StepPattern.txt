Location: StepPattern.java

Content: 

private int analyzeCases(){

  boolean noContext=true;

  final int n=_predicates.size();

  for (int i=0; i < n && noContext; i++) {

    Predicate pred=(Predicate)_predicates.elementAt(i);

    if (pred.isNthPositionFilter() || pred.hasPositionCall() || pred.hasLastCall()) {

      noContext=false;

    }

  }

  if (noContext) {

    return NO_CONTEXT;

  }

 else   if (n == 1) {

    return SIMPLE_CONTEXT;

  }

  return GENERAL_CONTEXT;

}

Location: StepPattern.java

Content: 

/** 

 * Static calc of match score.

 */

public void calcScore(){

  if ((getPredicateCount() > 0) || (null != m_relativePathPattern)) {

    m_score=SCORE_OTHER;

  }

 else   super.calcScore();

  if (null == m_targetString)   calcTargetString();

}

Location: StepPattern.java

Content: 

/** 

 * Calculate the local name or psuedo name of the node that this pattern will test, for hash table lookup optimization.

 * @see org.apache.xpath.compiler.PsuedoNames

 */

public void calcTargetString(){

  int whatToShow=getWhatToShow();

switch (whatToShow) {

case DTMFilter.SHOW_COMMENT:

    m_targetString=PsuedoNames.PSEUDONAME_COMMENT;

  break;

case DTMFilter.SHOW_TEXT:

case DTMFilter.SHOW_CDATA_SECTION:

case (DTMFilter.SHOW_TEXT | DTMFilter.SHOW_CDATA_SECTION):

m_targetString=PsuedoNames.PSEUDONAME_TEXT;

break;

case DTMFilter.SHOW_ALL:

m_targetString=PsuedoNames.PSEUDONAME_ANY;

break;

case DTMFilter.SHOW_DOCUMENT:

case DTMFilter.SHOW_DOCUMENT | DTMFilter.SHOW_DOCUMENT_FRAGMENT:

m_targetString=PsuedoNames.PSEUDONAME_ROOT;

break;

case DTMFilter.SHOW_ELEMENT:

if (this.WILD == m_name) m_targetString=PsuedoNames.PSEUDONAME_ANY;

 else m_targetString=m_name;

break;

default :

m_targetString=PsuedoNames.PSEUDONAME_ANY;

break;

}

}

Location: StepPattern.java

Content: 

/** 

 * Call the visitors on the subtree. Factored out from callVisitors so it may be called by derived classes.

 */

protected void callSubtreeVisitors(XPathVisitor visitor){

  if (null != m_predicates) {

    int n=m_predicates.length;

    for (int i=0; i < n; i++) {

      ExpressionOwner predOwner=new PredOwner(i);

      if (visitor.visitPredicate(predOwner,m_predicates[i])) {

        m_predicates[i].callVisitors(predOwner,visitor);

      }

    }

  }

  if (null != m_relativePathPattern) {

    m_relativePathPattern.callVisitors(this,visitor);

  }

}

Location: StepPattern.java

Content: 

/** 

 * @see org.apache.xpath.XPathVisitable#callVisitors(ExpressionOwner,XPathVisitor)

 */

public void callVisitors(ExpressionOwner owner,XPathVisitor visitor){

  if (visitor.visitMatchPattern(owner,this)) {

    callSubtreeVisitors(visitor);

  }

}

Location: StepPattern.java

Content: 

/** 

 * Tell if this expression or it's subexpressions can traverse outside the current subtree. NOTE: Ancestors tests with predicates are problematic, and will require special treatment.

 * @return true if traversal outside the context node's subtree can occur.

 */

public boolean canTraverseOutsideSubtree(){

  int n=getPredicateCount();

  for (int i=0; i < n; i++) {

    if (getPredicate(i).canTraverseOutsideSubtree())     return true;

  }

  return false;

}

Location: StepPattern.java

Content: 

/** 

 * New Method to check whether the current node satisfies a position predicate

 * @param xctxt   The XPath runtime context.

 * @param predPos Which predicate we're evaluating of foo[1][2][3].

 * @param dtm     The DTM of the current node.

 * @param context The currentNode.

 * @param pos     The position being requested, i.e. the value returned bym_predicates[predPos].execute(xctxt).

 * @return true of the position of the context matches pos, false otherwise.

 */

private final boolean checkProximityPosition(XPathContext xctxt,int predPos,DTM dtm,int context,int pos){

  try {

    DTMAxisTraverser traverser=dtm.getAxisTraverser(Axis.PRECEDINGSIBLING);

    for (int child=traverser.first(context); DTM.NULL != child; child=traverser.next(context,child)) {

      try {

        xctxt.pushCurrentNode(child);

        if (NodeTest.SCORE_NONE != super.execute(xctxt,child)) {

          boolean pass=true;

          try {

            xctxt.pushSubContextList(this);

            for (int i=0; i < predPos; i++) {

              xctxt.pushPredicatePos(i);

              try {

                XObject pred=m_predicates[i].execute(xctxt);

                try {

                  if (XObject.CLASS_NUMBER == pred.getType()) {

                    throw new Error("Why: Should never have been called");

                  }

 else                   if (!pred.boolWithSideEffects()) {

                    pass=false;

                    break;

                  }

                }

  finally {

                  pred.detach();

                }

              }

  finally {

                xctxt.popPredicatePos();

              }

            }

          }

  finally {

            xctxt.popSubContextList();

          }

          if (pass)           pos--;

          if (pos < 1)           return false;

        }

      }

  finally {

        xctxt.popCurrentNode();

      }

    }

  }

 catch (  javax.xml.transform.TransformerException se) {

    throw new java.lang.RuntimeException(se.getMessage());

  }

  return (pos == 1);

}

Location: StepPattern.java

Content: 

/** 

 * @see Expression#deepEquals(Expression)

 */

public boolean deepEquals(Expression expr){

  if (!super.deepEquals(expr))   return false;

  StepPattern sp=(StepPattern)expr;

  if (null != m_predicates) {

    int n=m_predicates.length;

    if ((null == sp.m_predicates) || (sp.m_predicates.length != n))     return false;

    for (int i=0; i < n; i++) {

      if (!m_predicates[i].deepEquals(sp.m_predicates[i]))       return false;

    }

  }

 else   if (null != sp.m_predicates)   return false;

  if (null != m_relativePathPattern) {

    if (!m_relativePathPattern.deepEquals(sp.m_relativePathPattern))     return false;

  }

 else   if (sp.m_relativePathPattern != null)   return false;

  return true;

}

Location: StepPattern.java

Content: 

/** 

 * Execute the predicates on this step to determine if the current node should be filtered or accepted.

 * @param xctxt       The XPath runtime context.

 * @param dtm         The DTM of the current node.

 * @param currentNode The current node context.

 * @return true if the node should be accepted, false otherwise.

 * @throws javax.xml.transform.TransformerException

 */

protected final boolean executePredicates(XPathContext xctxt,DTM dtm,int currentNode) throws javax.xml.transform.TransformerException {

  boolean result=true;

  boolean positionAlreadySeen=false;

  int n=getPredicateCount();

  try {

    xctxt.pushSubContextList(this);

    for (int i=0; i < n; i++) {

      xctxt.pushPredicatePos(i);

      try {

        XObject pred=m_predicates[i].execute(xctxt);

        try {

          if (XObject.CLASS_NUMBER == pred.getType()) {

            int pos=(int)pred.num();

            if (positionAlreadySeen) {

              result=(pos == 1);

              break;

            }

 else {

              positionAlreadySeen=true;

              if (!checkProximityPosition(xctxt,i,dtm,currentNode,pos)) {

                result=false;

                break;

              }

            }

          }

 else           if (!pred.boolWithSideEffects()) {

            result=false;

            break;

          }

        }

  finally {

          pred.detach();

        }

      }

  finally {

        xctxt.popPredicatePos();

      }

    }

  }

  finally {

    xctxt.popSubContextList();

  }

  return result;

}

Location: StepPattern.java

Content: 

/** 

 * Execute the match pattern step relative to another step.

 * @param xctxt       The XPath runtime context.

 * @param dtm         The DTM of the current node.

 * @param currentNode The current node context.

 * @return {@link org.apache.xpath.patterns.NodeTest#SCORE_NODETEST}, {@link org.apache.xpath.patterns.NodeTest#SCORE_NONE}, {@link org.apache.xpath.patterns.NodeTest#SCORE_NSWILD}, {@link org.apache.xpath.patterns.NodeTest#SCORE_QNAME}, or {@link org.apache.xpath.patterns.NodeTest#SCORE_OTHER}.

 * @throws javax.xml.transform.TransformerException

 */

protected final XObject executeRelativePathPattern(XPathContext xctxt,DTM dtm,int currentNode) throws javax.xml.transform.TransformerException {

  XObject score=NodeTest.SCORE_NONE;

  int context=currentNode;

  DTMAxisTraverser traverser;

  traverser=dtm.getAxisTraverser(m_axis);

  for (int relative=traverser.first(context); DTM.NULL != relative; relative=traverser.next(context,relative)) {

    try {

      xctxt.pushCurrentNode(relative);

      score=execute(xctxt);

      if (score != NodeTest.SCORE_NONE)       break;

    }

  finally {

      xctxt.popCurrentNode();

    }

  }

  return score;

}

Location: StepPattern.java

Content: 

/** 

 * Execute this pattern step, including predicates.

 * @param xctxt XPath runtime context.

 * @return {@link org.apache.xpath.patterns.NodeTest#SCORE_NODETEST}, {@link org.apache.xpath.patterns.NodeTest#SCORE_NONE}, {@link org.apache.xpath.patterns.NodeTest#SCORE_NSWILD}, {@link org.apache.xpath.patterns.NodeTest#SCORE_QNAME}, or {@link org.apache.xpath.patterns.NodeTest#SCORE_OTHER}.

 * @throws javax.xml.transform.TransformerException

 */

public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {

  return execute(xctxt,xctxt.getCurrentNode());

}

Location: StepPattern.java

Content: 

/** 

 * Execute this pattern step, including predicates.

 * @param xctxt       XPath runtime context.

 * @param currentNode The current node context.

 * @return {@link org.apache.xpath.patterns.NodeTest#SCORE_NODETEST}, {@link org.apache.xpath.patterns.NodeTest#SCORE_NONE}, {@link org.apache.xpath.patterns.NodeTest#SCORE_NSWILD}, {@link org.apache.xpath.patterns.NodeTest#SCORE_QNAME}, or {@link org.apache.xpath.patterns.NodeTest#SCORE_OTHER}.

 * @throws javax.xml.transform.TransformerException

 */

public XObject execute(XPathContext xctxt,int currentNode) throws javax.xml.transform.TransformerException {

  DTM dtm=xctxt.getDTM(currentNode);

  if (dtm != null) {

    int expType=dtm.getExpandedTypeID(currentNode);

    return execute(xctxt,currentNode,dtm,expType);

  }

  return NodeTest.SCORE_NONE;

}

Location: StepPattern.java

Content: 

/** 

 * Execute an expression in the XPath runtime context, and return the result of the expression.

 * @param xctxt       The XPath runtime context.

 * @param currentNode The currentNode.

 * @param dtm         The DTM of the current node.

 * @param expType     The expanded type ID of the current node.

 * @return The result of the expression in the form of a <code>XObject</code>.

 * @throws javax.xml.transform.TransformerException if a runtime exceptionoccurs.

 */

public XObject execute(XPathContext xctxt,int currentNode,DTM dtm,int expType) throws javax.xml.transform.TransformerException {

  if (m_whatToShow == NodeTest.SHOW_BYFUNCTION) {

    if (null != m_relativePathPattern) {

      return m_relativePathPattern.execute(xctxt);

    }

 else     return NodeTest.SCORE_NONE;

  }

  XObject score;

  score=super.execute(xctxt,currentNode,dtm,expType);

  if (score == NodeTest.SCORE_NONE)   return NodeTest.SCORE_NONE;

  if (getPredicateCount() != 0) {

    if (!executePredicates(xctxt,dtm,currentNode))     return NodeTest.SCORE_NONE;

  }

  if (null != m_relativePathPattern)   return m_relativePathPattern.executeRelativePathPattern(xctxt,dtm,currentNode);

  return score;

}

Location: StepPattern.java

Content: 

/** 

 * This function is used to fixup variables from QNames to stack frame indexes at stylesheet build time.

 * @param vars        List of QNames that correspond to variables. This listshould be searched backwards for the first qualified name that corresponds to the variable reference qname. The position of the QName in the vector from the start of the vector will be its position in the stack frame (but variables above the globalsTop value will need to be offset to the current stack frame).

 * @param globalsSize The number of variables in the global variable area.

 */

public void fixupVariables(java.util.Vector vars,int globalsSize){

  super.fixupVariables(vars,globalsSize);

  if (null != m_predicates) {

    for (int i=0; i < m_predicates.length; i++) {

      m_predicates[i].fixupVariables(vars,globalsSize);

    }

  }

  if (null != m_relativePathPattern) {

    m_relativePathPattern.fixupVariables(vars,globalsSize);

  }

}

Location: StepPattern.java

Content: 

/** 

 * Get the axis that this step follows.

 * @return The Axis for this test, one of of Axes.ANCESTORORSELF, etc.

 */

public int getAxis(){

  return m_axis;

}

Location: StepPattern.java

Content: 

/** 

 * @see ExpressionOwner#getExpression()

 */

public Expression getExpression(){

  return m_relativePathPattern;

}

Location: StepPattern.java

Content: 

/** 

 * Get the count of the nodes that match the test, which is the proximity position of the last node that can pass this test in the sub context selection. In XSLT 1-based indexing, this count is the index of the last node.

 * @param xctxt XPath runtime context.

 * @return the count of the nodes that match the test.

 */

public int getLastPos(XPathContext xctxt){

  return getProximityPosition(xctxt,xctxt.getPredicatePos(),true);

}

Location: StepPattern.java

Content: 

/** 

 * Get the match score of the given node.

 * @param xctxt   The XPath runtime context.

 * @param context The node to be tested.

 * @return {@link org.apache.xpath.patterns.NodeTest#SCORE_NODETEST}, {@link org.apache.xpath.patterns.NodeTest#SCORE_NONE}, {@link org.apache.xpath.patterns.NodeTest#SCORE_NSWILD}, {@link org.apache.xpath.patterns.NodeTest#SCORE_QNAME}, or {@link org.apache.xpath.patterns.NodeTest#SCORE_OTHER}.

 * @throws javax.xml.transform.TransformerException

 */

public double getMatchScore(XPathContext xctxt,int context) throws javax.xml.transform.TransformerException {

  xctxt.pushCurrentNode(context);

  xctxt.pushCurrentExpressionNode(context);

  try {

    XObject score=execute(xctxt);

    return score.num();

  }

  finally {

    xctxt.popCurrentNode();

    xctxt.popCurrentExpressionNode();

  }

}

Location: StepPattern.java

Content: 

private String getNextFieldName(){

  return "__step_pattern_iter_" + getXSLTC().nextStepPatternSerial();

}

Location: StepPattern.java

Content: 

/** 

 * Get the number of predicates for this match pattern step.

 * @return the number of predicates for this match pattern step.

 */

public final int getPredicateCount(){

  return (null == m_predicates) ? 0 : m_predicates.length;

}

Location: StepPattern.java

Content: 

/** 

 * Set the list of predicate expressions for this pattern step.

 * @return List of expression objects.

 */

public Expression[] getPredicates(){

  return m_predicates;

}

Location: StepPattern.java

Content: 

/** 

 * Get a predicate expression.

 * @param i The index of the predicate.

 * @return A predicate expression.

 */

public Expression getPredicate(int i){

  return m_predicates[i];

}

Location: StepPattern.java

Content: 

/** 

 * Get the proximity position index of the current node based on this node test.

 * @param xctxt XPath runtime context.

 * @return the proximity position index of the current node based on the nodetest.

 */

public int getProximityPosition(XPathContext xctxt){

  return getProximityPosition(xctxt,xctxt.getPredicatePos(),false);

}

Location: StepPattern.java

Content: 

/** 

 * Get the proximity position index of the current node based on this node test.

 * @param xctxt    XPath runtime context.

 * @param predPos  Which predicate we're evaluating of foo[1][2][3].

 * @param findLast If true, don't terminate when the context node is found.

 * @return the proximity position index of the current node based on the nodetest.

 */

private final int getProximityPosition(XPathContext xctxt,int predPos,boolean findLast){

  int pos=0;

  int context=xctxt.getCurrentNode();

  DTM dtm=xctxt.getDTM(context);

  int parent=dtm.getParent(context);

  try {

    DTMAxisTraverser traverser=dtm.getAxisTraverser(Axis.CHILD);

    for (int child=traverser.first(parent); DTM.NULL != child; child=traverser.next(parent,child)) {

      try {

        xctxt.pushCurrentNode(child);

        if (NodeTest.SCORE_NONE != super.execute(xctxt,child)) {

          boolean pass=true;

          try {

            xctxt.pushSubContextList(this);

            for (int i=0; i < predPos; i++) {

              xctxt.pushPredicatePos(i);

              try {

                XObject pred=m_predicates[i].execute(xctxt);

                try {

                  if (XObject.CLASS_NUMBER == pred.getType()) {

                    if ((pos + 1) != (int)pred.numWithSideEffects()) {

                      pass=false;

                      break;

                    }

                  }

 else                   if (!pred.boolWithSideEffects()) {

                    pass=false;

                    break;

                  }

                }

  finally {

                  pred.detach();

                }

              }

  finally {

                xctxt.popPredicatePos();

              }

            }

          }

  finally {

            xctxt.popSubContextList();

          }

          if (pass)           pos++;

          if (!findLast && child == context) {

            return pos;

          }

        }

      }

  finally {

        xctxt.popCurrentNode();

      }

    }

  }

 catch (  javax.xml.transform.TransformerException se) {

    throw new java.lang.RuntimeException(se.getMessage());

  }

  return pos;

}

Location: StepPattern.java

Content: 

/** 

 * Get the reference to nodetest and predicate for parent or ancestor.

 * @return The relative pattern expression.

 */

public StepPattern getRelativePathPattern(){

  return m_relativePathPattern;

}

Location: StepPattern.java

Content: 

/** 

 * Get the local name or psuedo name of the node that this pattern will test, for hash table lookup optimization.

 * @return local name or psuedo name of the node.

 * @see org.apache.xpath.compiler.PsuedoNames

 */

public String getTargetString(){

  return m_targetString;

}

Location: StepPattern.java

Content: 

/** 

 * Set the axis that this step should follow.

 * @param axis The Axis for this test, one of of Axes.ANCESTORORSELF, etc.

 */

public void setAxis(int axis){

  m_axis=axis;

}

Location: StepPattern.java

Content: 

/** 

 * @see ExpressionOwner#setExpression(Expression)

 */

public void setExpression(Expression exp){

  exp.exprSetParent(this);

  m_relativePathPattern=(StepPattern)exp;

}

Location: StepPattern.java

Content: 

/** 

 * Set the predicates for this match pattern step.

 * @param predicates An array of expressions that define predicates for thisstep.

 */

public void setPredicates(Expression[] predicates){

  m_predicates=predicates;

  if (null != predicates) {

    for (int i=0; i < predicates.length; i++) {

      predicates[i].exprSetParent(this);

    }

  }

  calcScore();

}

Location: StepPattern.java

Content: 

public StepPattern setPredicates(Vector predicates){

  _predicates=predicates;

  return (this);

}

Location: StepPattern.java

Content: 

public void setPriority(double priority){

  _priority=priority;

}

Location: StepPattern.java

Content: 

/** 

 * Set the reference to nodetest and predicate for parent or ancestor.

 * @param expr The relative pattern expression.

 */

public void setRelativePathPattern(StepPattern expr){

  m_relativePathPattern=expr;

  expr.exprSetParent(this);

  calcScore();

}

Location: StepPattern.java

Content: 

/** 

 * Construct a StepPattern that doesn't test for node names.

 * @param whatToShow       Bit set defined mainly by{@link org.w3c.dom.traversal.NodeFilter}.

 * @param axis             The Axis for this test, one of ofAxes.ANCESTORORSELF, etc.

 * @param axisForPredicate No longer used.

 */

public StepPattern(int whatToShow,int axis,int axisForPredicate){

  super(whatToShow);

  m_axis=axis;

}

Location: StepPattern.java

Content: 

public StepPattern(int axis,int nodeType,Vector predicates){

  _axis=axis;

  _nodeType=nodeType;

  _predicates=predicates;

}

Location: StepPattern.java

Content: 

/** 

 * Construct a StepPattern that tests for namespaces and node names.

 * @param whatToShow       Bit set defined mainly by{@link org.w3c.dom.traversal.NodeFilter}.

 * @param namespace        The namespace to be tested.

 * @param name             The local name to be tested.

 * @param axis             The Axis for this test, one of ofAxes.ANCESTORORSELF, etc.

 * @param axisForPredicate No longer used.

 */

public StepPattern(int whatToShow,String namespace,String name,int axis,int axisForPredicate){

  super(whatToShow,namespace,name);

  m_axis=axis;

}

Location: StepPattern.java

Content: 

/** 

 * Get the string represenentation of this step for diagnostic purposes.

 * @return A string representation of this step, built by reverse-engineeringthe contained info.

 */

public String toString(){

  StringBuffer buf=new StringBuffer();

  for (StepPattern pat=this; pat != null; pat=pat.m_relativePathPattern) {

    if (pat != this)     buf.append("/");

    buf.append(Axis.getNames(pat.m_axis));

    buf.append("::");

    if (0x000005000 == pat.m_whatToShow) {

      buf.append("doc()");

    }

 else     if (DTMFilter.SHOW_BYFUNCTION == pat.m_whatToShow) {

      buf.append("function()");

    }

 else     if (DTMFilter.SHOW_ALL == pat.m_whatToShow) {

      buf.append("node()");

    }

 else     if (DTMFilter.SHOW_TEXT == pat.m_whatToShow) {

      buf.append("text()");

    }

 else     if (DTMFilter.SHOW_PROCESSING_INSTRUCTION == pat.m_whatToShow) {

      buf.append("processing-instruction(");

      if (null != pat.m_name) {

        buf.append(pat.m_name);

      }

      buf.append(")");

    }

 else     if (DTMFilter.SHOW_COMMENT == pat.m_whatToShow) {

      buf.append("comment()");

    }

 else     if (null != pat.m_name) {

      if (DTMFilter.SHOW_ATTRIBUTE == pat.m_whatToShow) {

        buf.append("@");

      }

      if (null != pat.m_namespace) {

        buf.append("{");

        buf.append(pat.m_namespace);

        buf.append("}");

      }

      buf.append(pat.m_name);

    }

 else     if (DTMFilter.SHOW_ATTRIBUTE == pat.m_whatToShow) {

      buf.append("@");

    }

 else     if ((DTMFilter.SHOW_DOCUMENT | DTMFilter.SHOW_DOCUMENT_FRAGMENT) == pat.m_whatToShow) {

      buf.append("doc-root()");

    }

 else {

      buf.append("?" + Integer.toHexString(pat.m_whatToShow));

    }

    if (null != pat.m_predicates) {

      for (int i=0; i < pat.m_predicates.length; i++) {

        buf.append("[");

        buf.append(pat.m_predicates[i]);

        buf.append("]");

      }

    }

  }

  return buf.toString();

}

Location: StepPattern.java

Content: 

private void translateGeneralContext(ClassGenerator classGen,MethodGenerator methodGen){

  final ConstantPoolGen cpg=classGen.getConstantPool();

  final InstructionList il=methodGen.getInstructionList();

  int iteratorIndex=0;

  BranchHandle ifBlock=null;

  LocalVariableGen iter, node, node2;

  final String iteratorName=getNextFieldName();

  node=methodGen.addLocalVariable("step_pattern_tmp1",Util.getJCRefType(NODE_SIG),null,null);

  node.setStart(il.append(new ISTORE(node.getIndex())));

  iter=methodGen.addLocalVariable("step_pattern_tmp2",Util.getJCRefType(NODE_ITERATOR_SIG),null,null);

  if (!classGen.isExternal()) {

    final Field iterator=new Field(ACC_PRIVATE,cpg.addUtf8(iteratorName),cpg.addUtf8(NODE_ITERATOR_SIG),null,cpg.getConstantPool());

    classGen.addField(iterator);

    iteratorIndex=cpg.addFieldref(classGen.getClassName(),iteratorName,NODE_ITERATOR_SIG);

    il.append(classGen.loadTranslet());

    il.append(new GETFIELD(iteratorIndex));

    il.append(DUP);

    iter.setStart(il.append(new ASTORE(iter.getIndex())));

    ifBlock=il.append(new IFNONNULL(null));

    il.append(classGen.loadTranslet());

  }

  _step.translate(classGen,methodGen);

  InstructionHandle iterStore=il.append(new ASTORE(iter.getIndex()));

  if (!classGen.isExternal()) {

    il.append(new ALOAD(iter.getIndex()));

    il.append(new PUTFIELD(iteratorIndex));

    ifBlock.setTarget(il.append(NOP));

  }

 else {

    iter.setStart(iterStore);

  }

  il.append(methodGen.loadDOM());

  il.append(new ILOAD(node.getIndex()));

  int index=cpg.addInterfaceMethodref(DOM_INTF,GET_PARENT,GET_PARENT_SIG);

  il.append(new INVOKEINTERFACE(index,2));

  il.append(new ALOAD(iter.getIndex()));

  il.append(SWAP);

  il.append(methodGen.setStartNode());

  BranchHandle skipNext;

  InstructionHandle begin, next;

  node2=methodGen.addLocalVariable("step_pattern_tmp3",Util.getJCRefType(NODE_SIG),null,null);

  skipNext=il.append(new GOTO(null));

  next=il.append(new ALOAD(iter.getIndex()));

  node2.setStart(next);

  begin=il.append(methodGen.nextNode());

  il.append(DUP);

  il.append(new ISTORE(node2.getIndex()));

  _falseList.add(il.append(new IFLT(null)));

  il.append(new ILOAD(node2.getIndex()));

  il.append(new ILOAD(node.getIndex()));

  iter.setEnd(il.append(new IF_ICMPLT(next)));

  node2.setEnd(il.append(new ILOAD(node2.getIndex())));

  node.setEnd(il.append(new ILOAD(node.getIndex())));

  _falseList.add(il.append(new IF_ICMPNE(null)));

  skipNext.setTarget(begin);

}

Location: StepPattern.java

Content: 

private void translateKernel(ClassGenerator classGen,MethodGenerator methodGen){

  final ConstantPoolGen cpg=classGen.getConstantPool();

  final InstructionList il=methodGen.getInstructionList();

  if (_nodeType == DTM.ELEMENT_NODE) {

    final int check=cpg.addInterfaceMethodref(DOM_INTF,"isElement","(I)Z");

    il.append(methodGen.loadDOM());

    il.append(SWAP);

    il.append(new INVOKEINTERFACE(check,2));

    final BranchHandle icmp=il.append(new IFNE(null));

    _falseList.add(il.append(new GOTO_W(null)));

    icmp.setTarget(il.append(NOP));

  }

 else   if (_nodeType == DTM.ATTRIBUTE_NODE) {

    final int check=cpg.addInterfaceMethodref(DOM_INTF,"isAttribute","(I)Z");

    il.append(methodGen.loadDOM());

    il.append(SWAP);

    il.append(new INVOKEINTERFACE(check,2));

    final BranchHandle icmp=il.append(new IFNE(null));

    _falseList.add(il.append(new GOTO_W(null)));

    icmp.setTarget(il.append(NOP));

  }

 else {

    final int getEType=cpg.addInterfaceMethodref(DOM_INTF,"getExpandedTypeID","(I)I");

    il.append(methodGen.loadDOM());

    il.append(SWAP);

    il.append(new INVOKEINTERFACE(getEType,2));

    il.append(new PUSH(cpg,_nodeType));

    final BranchHandle icmp=il.append(new IF_ICMPEQ(null));

    _falseList.add(il.append(new GOTO_W(null)));

    icmp.setTarget(il.append(NOP));

  }

}

Location: StepPattern.java

Content: 

private void translateNoContext(ClassGenerator classGen,MethodGenerator methodGen){

  final ConstantPoolGen cpg=classGen.getConstantPool();

  final InstructionList il=methodGen.getInstructionList();

  il.append(methodGen.loadCurrentNode());

  il.append(SWAP);

  il.append(methodGen.storeCurrentNode());

  if (!_isEpsilon) {

    il.append(methodGen.loadCurrentNode());

    translateKernel(classGen,methodGen);

  }

  final int n=_predicates.size();

  for (int i=0; i < n; i++) {

    Predicate pred=(Predicate)_predicates.elementAt(i);

    Expression exp=pred.getExpr();

    exp.translateDesynthesized(classGen,methodGen);

    _trueList.append(exp._trueList);

    _falseList.append(exp._falseList);

  }

  InstructionHandle restore;

  restore=il.append(methodGen.storeCurrentNode());

  backPatchTrueList(restore);

  BranchHandle skipFalse=il.append(new GOTO(null));

  restore=il.append(methodGen.storeCurrentNode());

  backPatchFalseList(restore);

  _falseList.add(il.append(new GOTO(null)));

  skipFalse.setTarget(il.append(NOP));

}

Location: StepPattern.java

Content: 

private void translateSimpleContext(ClassGenerator classGen,MethodGenerator methodGen){

  int index;

  final ConstantPoolGen cpg=classGen.getConstantPool();

  final InstructionList il=methodGen.getInstructionList();

  LocalVariableGen match;

  match=methodGen.addLocalVariable("step_pattern_tmp1",Util.getJCRefType(NODE_SIG),null,null);

  match.setStart(il.append(new ISTORE(match.getIndex())));

  if (!_isEpsilon) {

    il.append(new ILOAD(match.getIndex()));

    translateKernel(classGen,methodGen);

  }

  il.append(methodGen.loadCurrentNode());

  il.append(methodGen.loadIterator());

  index=cpg.addMethodref(MATCHING_ITERATOR,"<init>","(I" + NODE_ITERATOR_SIG + ")V");

  _step.translate(classGen,methodGen);

  LocalVariableGen stepIteratorTemp=methodGen.addLocalVariable("step_pattern_tmp2",Util.getJCRefType(NODE_ITERATOR_SIG),null,null);

  stepIteratorTemp.setStart(il.append(new ASTORE(stepIteratorTemp.getIndex())));

  il.append(new NEW(cpg.addClass(MATCHING_ITERATOR)));

  il.append(DUP);

  il.append(new ILOAD(match.getIndex()));

  stepIteratorTemp.setEnd(il.append(new ALOAD(stepIteratorTemp.getIndex())));

  il.append(new INVOKESPECIAL(index));

  il.append(methodGen.loadDOM());

  il.append(new ILOAD(match.getIndex()));

  index=cpg.addInterfaceMethodref(DOM_INTF,GET_PARENT,GET_PARENT_SIG);

  il.append(new INVOKEINTERFACE(index,2));

  il.append(methodGen.setStartNode());

  il.append(methodGen.storeIterator());

  match.setEnd(il.append(new ILOAD(match.getIndex())));

  il.append(methodGen.storeCurrentNode());

  Predicate pred=(Predicate)_predicates.elementAt(0);

  Expression exp=pred.getExpr();

  exp.translateDesynthesized(classGen,methodGen);

  InstructionHandle restore=il.append(methodGen.storeIterator());

  il.append(methodGen.storeCurrentNode());

  exp.backPatchTrueList(restore);

  BranchHandle skipFalse=il.append(new GOTO(null));

  restore=il.append(methodGen.storeIterator());

  il.append(methodGen.storeCurrentNode());

  exp.backPatchFalseList(restore);

  _falseList.add(il.append(new GOTO(null)));

  skipFalse.setTarget(il.append(NOP));

}

