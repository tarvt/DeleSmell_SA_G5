Location: NodeSortRecord.java

Content: 

/** 

 */

public final int compareDocOrder(NodeSortRecord other){

  return _node - other._node;

}

Location: NodeSortRecord.java

Content: 

/** 

 * Compare this sort element to another. The first level is checked first, and we proceed to the next level only if the first level keys are identical (and so the key values may not even be extracted from the DOM) !!!!MUST OPTIMISE - THIS IS REALLY, REALLY SLOW!!!!

 */

public int compareTo(NodeSortRecord other){

  int cmp, level;

  int[] sortOrder=_settings.getSortOrders();

  int levels=_settings.getSortOrders().length;

  int[] compareTypes=_settings.getTypes();

  for (level=0; level < levels; level++) {

    if (compareTypes[level] == COMPARE_NUMERIC) {

      final Double our=numericValue(level);

      final Double their=other.numericValue(level);

      cmp=our.compareTo(their);

    }

 else {

      final Comparable our=stringValue(level);

      final Comparable their=other.stringValue(level);

      cmp=our.compareTo(their);

    }

    if (cmp != 0) {

      return sortOrder[level] == COMPARE_DESCENDING ? 0 - cmp : cmp;

    }

  }

  return (_node - other._node);

}

Location: NodeSortRecord.java

Content: 

/** 

 * Extract the sort value for a level of this key.

 */

public abstract String extractValueFromDOM(DOM dom,int current,int level,AbstractTranslet translet,int last);

Location: NodeSortRecord.java

Content: 

/** 

 * Returns the array of Collators used for text comparisons in this object. May be overridden by inheriting classes

 */

public Collator[] getCollator(){

  return _collators;

}

Location: NodeSortRecord.java

Content: 

/** 

 * This method allows the caller to set the values that could not be passed to the default constructor.

 */

public final void initialize(int node,int last,DOM dom,SortSettings settings) throws TransletException {

  _dom=dom;

  _node=node;

  _last=last;

  _settings=settings;

  int levels=settings.getSortOrders().length;

  _values=new Object[levels];

  String colFactClassname=System.getProperty("org.apache.xalan.xsltc.COLLATOR_FACTORY");

  if (colFactClassname != null) {

    try {

      Object candObj=ObjectFactory.findProviderClass(colFactClassname,ObjectFactory.findClassLoader(),true);

      _collatorFactory=(CollatorFactory)candObj;

    }

 catch (    ClassNotFoundException e) {

      throw new TransletException(e);

    }

    Locale[] locales=settings.getLocales();

    _collators=new Collator[levels];

    for (int i=0; i < levels; i++) {

      _collators[i]=_collatorFactory.getCollator(locales[i]);

    }

    _collator=_collators[0];

  }

 else {

    _collators=settings.getCollators();

    _collator=_collators[0];

  }

}

Location: NodeSortRecord.java

Content: 

public NodeSortRecord(){

  this(0);

}

Location: NodeSortRecord.java

Content: 

/** 

 * This constructor is run by a call to ClassLoader in the makeNodeSortRecord method in the NodeSortRecordFactory class. Since we cannot pass any parameters to the constructor in that case we just set the default values here and wait for new values through initialize().

 */

public NodeSortRecord(int node){

  _node=node;

}

Location: NodeSortRecord.java

Content: 

private final Double numericValue(int level){

  if (_scanned <= level) {

    AbstractTranslet translet=_settings.getTranslet();

    final String str=extractValueFromDOM(_dom,_node,level,translet,_last);

    Double num;

    try {

      num=new Double(str);

    }

 catch (    NumberFormatException e) {

      num=new Double(Double.NEGATIVE_INFINITY);

    }

    _values[_scanned++]=num;

    return (num);

  }

  return ((Double)_values[level]);

}

Location: NodeSortRecord.java

Content: 

/** 

 * Get the string or numeric value of a specific level key for this sort element. The value is extracted from the DOM if it is not already in our sort key vector.

 */

private final Comparable stringValue(int level){

  if (_scanned <= level) {

    AbstractTranslet translet=_settings.getTranslet();

    Locale[] locales=_settings.getLocales();

    String[] caseOrder=_settings.getCaseOrders();

    final String str=extractValueFromDOM(_dom,_node,level,translet,_last);

    final Comparable key=StringComparable.getComparator(str,locales[level],_collators[level],caseOrder[level]);

    _values[_scanned++]=key;

    return (key);

  }

  return ((Comparable)_values[level]);

}

