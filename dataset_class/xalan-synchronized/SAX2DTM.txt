Location: SAX2DTM.java

Content: 

/** 

 * Get a new DTM ID beginning at the specified node index.

 * @param nodeIndex The node identity at which the new DTM ID will beginaddressing.

 */

protected void addNewDTMID(int nodeIndex){

  try {

    if (m_mgr == null)     throw new ClassCastException();

    DTMManagerDefault mgrD=(DTMManagerDefault)m_mgr;

    int id=mgrD.getFirstFreeDTMID();

    mgrD.addDTM(this,id,nodeIndex);

    m_dtmIdent.addElement(id << DTMManager.IDENT_DTM_NODE_BITS);

  }

 catch (  ClassCastException e) {

    error(XMLMessages.createXMLMessage(XMLErrorResources.ER_NO_DTMIDS_AVAIL,null));

  }

}

Location: SAX2DTM.java

Content: 

/** 

 * Ask the CoRoutine parser to doTerminate and clear the reference.

 */

public void clearCoRoutine(){

  clearCoRoutine(true);

}

Location: SAX2DTM.java

Content: 

/** 

 * Ask the CoRoutine parser to doTerminate and clear the reference. If the CoRoutine parser has already been cleared, this will have no effect.

 * @param callDoTerminate true of doTerminate should be called on the coRoutineparser.

 */

public void clearCoRoutine(boolean callDoTerminate){

  if (null != m_incrementalSAXSource) {

    if (callDoTerminate)     m_incrementalSAXSource.deliverMoreNodes(false);

    m_incrementalSAXSource=null;

  }

}

Location: SAX2DTM.java

Content: 

/** 

 * Check if a declaration has already been made for a given prefix.

 * @param prefix non-null prefix string.

 * @return true if the declaration has already been declared in the currentcontext.

 */

protected boolean declAlreadyDeclared(String prefix){

  int startDecls=m_contextIndexes.peek();

  java.util.Vector prefixMappings=m_prefixMappings;

  int nDecls=prefixMappings.size();

  for (int i=startDecls; i < nDecls; i+=2) {

    String prefixDecl=(String)prefixMappings.elementAt(i);

    if (prefixDecl == null)     continue;

    if (prefixDecl.equals(prefix))     return true;

  }

  return false;

}

Location: SAX2DTM.java

Content: 

/** 

 * Directly create SAX parser events from a subtree.

 * @param nodeHandle The node ID.

 * @param ch         A non-null reference to a ContentHandler.

 * @throws org.xml.sax.SAXException

 */

public void dispatchToEvents(int nodeHandle,org.xml.sax.ContentHandler ch) throws org.xml.sax.SAXException {

  DTMTreeWalker treeWalker=m_walker;

  ContentHandler prevCH=treeWalker.getcontentHandler();

  if (null != prevCH) {

    treeWalker=new DTMTreeWalker();

  }

  treeWalker.setcontentHandler(ch);

  treeWalker.setDTM(this);

  try {

    treeWalker.traverse(nodeHandle);

  }

  finally {

    treeWalker.setcontentHandler(null);

  }

}

Location: SAX2DTM.java

Content: 

/** 

 * Retrieves an attribute node by by qualified name and namespace URI.

 * @param nodeHandle   int Handle of the node upon which to look up thisattribute..

 * @param namespaceURI The namespace URI of the attribute to retrieve, or null.

 * @param name         The local name of the attribute to retrieve.

 * @return The attribute node handle with the specified name (<code>nodeName</code>) or <code>DTM.NULL</code> if there is no such attribute.

 */

public int getAttributeNode(int nodeHandle,String namespaceURI,String name){

  for (int attrH=getFirstAttribute(nodeHandle); DTM.NULL != attrH; attrH=getNextAttribute(attrH)) {

    String attrNS=getNamespaceURI(attrH);

    String attrName=getLocalName(attrH);

    boolean nsMatch=namespaceURI == attrNS || (namespaceURI != null && namespaceURI.equals(attrNS));

    if (nsMatch && name.equals(attrName))     return attrH;

  }

  return DTM.NULL;

}

Location: SAX2DTM.java

Content: 

/** 

 * Return this DTM's DeclHandler.

 * @return null if this model doesn't respond to SAX Decl events.

 */

public DeclHandler getDeclHandler(){

  return this;

}

Location: SAX2DTM.java

Content: 

/** 

 * Return the public identifier of the external subset, normalized as described in 4.2.2 External Entities [XML]. If there is no external subset or if it has no public identifier, this property has no value.

 * @return the public identifier String object, or null if there is none.

 */

public String getDocumentTypeDeclarationPublicIdentifier(){

  error(XMLMessages.createXMLMessage(XMLErrorResources.ER_METHOD_NOT_SUPPORTED,null));

  return null;

}

Location: SAX2DTM.java

Content: 

/** 

 * A document type declaration information item has the following properties: 1. [system identifier] The system identifier of the external subset, if it exists. Otherwise this property has no value.

 * @return the system identifier String object, or null if there is none.

 */

public String getDocumentTypeDeclarationSystemIdentifier(){

  error(XMLMessages.createXMLMessage(XMLErrorResources.ER_METHOD_NOT_SUPPORTED,null));

  return null;

}

Location: SAX2DTM.java

Content: 

/** 

 * Return this DTM's DTDHandler.

 * @return null if this model doesn't respond to SAX dtd events.

 */

public DTDHandler getDTDHandler(){

  return this;

}

Location: SAX2DTM.java

Content: 

/** 

 * Return this DTM's EntityResolver.

 * @return null if this model doesn't respond to SAX entity ref events.

 */

public EntityResolver getEntityResolver(){

  return this;

}

Location: SAX2DTM.java

Content: 

public String getFixedNames(int type){

  return m_fixednames[type];

}

Location: SAX2DTM.java

Content: 

/** 

 * Return this DTM's lexical handler. %REVIEW% Should this return null if constrution already done/begun?

 * @return null if this model doesn't respond to lexical SAX events, "this" ifthe DTM object has a built-in SAX ContentHandler, the IncrementalSAXSource if we're bound to one and should receive the SAX stream via it for incremental build purposes...

 */

public LexicalHandler getLexicalHandler(){

  if (m_incrementalSAXSource instanceof IncrementalSAXSource_Filter)   return (LexicalHandler)m_incrementalSAXSource;

 else   return this;

}

Location: SAX2DTM.java

Content: 

/** 

 * Given a node handle, return its DOM-style namespace URI (As defined in Namespaces, this is the declared URI which this node's prefix -- or default in lieu thereof -- was mapped to.) <p> %REVIEW% Null or ""? -sb </p>

 * @param nodeHandle the id of the node.

 * @return String URI value of this node's namespace, or null if no namespacewas resolved.

 */

public String getNamespaceURI(int nodeHandle){

  return m_expandedNameTable.getNamespace(_exptype(makeNodeIdentity(nodeHandle)));

}

Location: SAX2DTM.java

Content: 

/** 

 * Get a prefix either from the qname or from the uri mapping, or just make one up!

 * @return The prefix if there is one, or null.

 */

public String getNamespaceURI(String prefix){

  String uri="";

  int prefixIndex=m_contextIndexes.peek() - 1;

  if (null == prefix)   prefix="";

  do {

    prefixIndex=m_prefixMappings.indexOf(prefix,++prefixIndex);

  }

 while ((prefixIndex >= 0) && (prefixIndex & 0x01) == 0x01);

  if (prefixIndex > -1) {

    uri=(String)m_prefixMappings.elementAt(prefixIndex + 1);

  }

  return uri;

}

Location: SAX2DTM.java

Content: 

/** 

 * Get the next node identity value in the list, and call the iterator if it hasn't been added yet.

 * @param identity The node identity (index).

 * @return identity+1, or DTM.NULL.

 */

protected int getNextNodeIdentity(int identity){

  identity+=1;

  while (identity >= m_size) {

    if (null == m_incrementalSAXSource)     return DTM.NULL;

    nextNode();

  }

  return identity;

}

Location: SAX2DTM.java

Content: 

/** 

 * Get the number of nodes that have been added.

 * @return The number of that are currently in the tree.

 */

public int getNumberOfNodes(){

  return m_size;

}

Location: SAX2DTM.java

Content: 

/** 

 * Given a namespace handle, return the prefix that the namespace decl is mapping. Given a node handle, return the prefix used to map to the namespace. <p> %REVIEW% Are you sure you want "" for no prefix? </p> <p> %REVIEW-COMMENT% I think so... not totally sure. -sb </p>

 * @param nodeHandle the id of the node.

 * @return String prefix of this node's name, or "" if no explicit namespaceprefix was given.

 */

public String getPrefix(int nodeHandle){

  int identity=makeNodeIdentity(nodeHandle);

  int type=_type(identity);

  if (DTM.ELEMENT_NODE == type) {

    int prefixIndex=_dataOrQName(identity);

    if (0 == prefixIndex)     return "";

 else {

      String qname=m_valuesOrPrefixes.indexToString(prefixIndex);

      return getPrefix(qname,null);

    }

  }

 else   if (DTM.ATTRIBUTE_NODE == type) {

    int prefixIndex=_dataOrQName(identity);

    if (prefixIndex < 0) {

      prefixIndex=m_data.elementAt(-prefixIndex);

      String qname=m_valuesOrPrefixes.indexToString(prefixIndex);

      return getPrefix(qname,null);

    }

  }

  return "";

}

Location: SAX2DTM.java

Content: 

/** 

 * Get a prefix either from the qname or from the uri mapping, or just make one up!

 * @param qname The qualified name, which may be null.

 * @param uri   The namespace URI, which may be null.

 * @return The prefix if there is one, or null.

 */

public String getPrefix(String qname,String uri){

  String prefix;

  int uriIndex=-1;

  if (null != uri && uri.length() > 0) {

    do {

      uriIndex=m_prefixMappings.indexOf(uri,++uriIndex);

    }

 while ((uriIndex & 0x01) == 0);

    if (uriIndex >= 0) {

      prefix=(String)m_prefixMappings.elementAt(uriIndex - 1);

    }

 else     if (null != qname) {

      int indexOfNSSep=qname.indexOf(':');

      if (qname.equals("xmlns"))       prefix="";

 else       if (qname.startsWith("xmlns:"))       prefix=qname.substring(indexOfNSSep + 1);

 else       prefix=(indexOfNSSep > 0) ? qname.substring(0,indexOfNSSep) : null;

    }

 else {

      prefix=null;

    }

  }

 else   if (null != qname) {

    int indexOfNSSep=qname.indexOf(':');

    if (indexOfNSSep > 0) {

      if (qname.startsWith("xmlns:"))       prefix=qname.substring(indexOfNSSep + 1);

 else       prefix=qname.substring(0,indexOfNSSep);

    }

 else {

      if (qname.equals("xmlns"))       prefix="";

 else       prefix=null;

    }

  }

 else {

    prefix=null;

  }

  return prefix;

}

Location: SAX2DTM.java

Content: 

/** 

 * Retrieve the SourceLocator associated with a specific node. This is only meaningful if the XalanProperties.SOURCE_LOCATION flag was set True using setProperty; if it was never set, or was set false, we will return null. (We _could_ return a locator with the document's base URI and bogus line/column information. Trying that; see the else clause.)

 */

public SourceLocator getSourceLocatorFor(int node){

  if (m_useSourceLocationProperty) {

    node=makeNodeIdentity(node);

    return new NodeLocator(null,m_sourceSystemId.elementAt(node),m_sourceLine.elementAt(node),m_sourceColumn.elementAt(node));

  }

 else   if (m_locator != null) {

    return new NodeLocator(null,m_locator.getSystemId(),-1,-1);

  }

 else   if (m_systemId != null) {

    return new NodeLocator(null,m_systemId,-1,-1);

  }

  return null;

}

Location: SAX2DTM.java

Content: 

/** 

 * The getUnparsedEntityURI function returns the URI of the unparsed entity with the specified name in the same document as the context node (see [3.3 Unparsed Entities]). It returns the empty string if there is no such entity. <p> XML processors may choose to use the System Identifier (if one is provided) to resolve the entity, rather than the URI in the Public Identifier. The details are dependent on the processor, and we would have to support some form of plug-in resolver to handle this properly. Currently, we simply return the System Identifier if present, and hope that it a usable URI or that our caller can map it to one. TODO: Resolve Public Identifiers... or consider changing function name. <p> If we find a relative URI reference, XML expects it to be resolved in terms of the base URI of the document. The DOM doesn't do that for us, and it isn't entirely clear whether that should be done here; currently that's pushed up to a higher level of our application. (Note that DOM Level 1 didn't store the document's base URI.) TODO: Consider resolving Relative URIs. <p> (The DOM's statement that "An XML processor may choose to completely expand entities before the structure model is passed to the DOM" refers only to parsed entities, not unparsed, and hence doesn't affect this function.)

 * @param name A string containing the Entity Name of the unparsed entity.

 * @return String containing the URI of the Unparsed Entity, or an empty stringif no such entity exists.

 */

public String getUnparsedEntityURI(String name){

  String url="";

  if (null == m_entities)   return url;

  int n=m_entities.size();

  for (int i=0; i < n; i+=ENTITY_FIELDS_PER) {

    String ename=(String)m_entities.elementAt(i + ENTITY_FIELD_NAME);

    if (null != ename && ename.equals(name)) {

      String nname=(String)m_entities.elementAt(i + ENTITY_FIELD_NOTATIONNAME);

      if (null != nname) {

        url=(String)m_entities.elementAt(i + ENTITY_FIELD_SYSTEMID);

        if (null == url) {

          url=(String)m_entities.elementAt(i + ENTITY_FIELD_PUBLICID);

        }

      }

      break;

    }

  }

  return url;

}

Location: SAX2DTM.java

Content: 

/** 

 * 5. [specified] A flag indicating whether this attribute was actually specified in the start-tag of its element, or was defaulted from the DTD.

 * @param attributeHandle Must be a valid handle to an attribute node.

 * @return <code>true</code> if the attribute was specified; <code>false</code>if it was defaulted.

 */

public boolean isAttributeSpecified(int attributeHandle){

  return true;

}

Location: SAX2DTM.java

Content: 

/** 

 * Bottleneck determination of text type.

 * @param type oneof DTM.XXX_NODE.

 * @return true if this is a text or cdata section.

 */

private final boolean isTextType(int type){

  return (DTM.TEXT_NODE == type || DTM.CDATA_SECTION_NODE == type);

}

Location: SAX2DTM.java

Content: 

/** 

 * Determine if the string-value of a node is whitespace

 * @param nodeHandle The node Handle.

 * @return Return true if the given node is whitespace.

 */

public boolean isWhitespace(int nodeHandle){

  int identity=makeNodeIdentity(nodeHandle);

  int type;

  if (identity == DTM.NULL)   type=DTM.NULL;

 else   type=_type(identity);

  if (isTextType(type)) {

    int dataIndex=_dataOrQName(identity);

    int offset=m_data.elementAt(dataIndex);

    int length=m_data.elementAt(dataIndex + 1);

    return m_chars.isWhitespace(offset,length);

  }

  return false;

}

Location: SAX2DTM.java

Content: 

/** 

 * Migrate a DTM built with an old DTMManager to a new DTMManager. After the migration, the new DTMManager will treat the DTM as one that is built by itself. This is used to support DTM sharing between multiple transformations.

 * @param manager the DTMManager

 */

public void migrateTo(DTMManager manager){

  super.migrateTo(manager);

  int numDTMs=m_dtmIdent.size();

  int dtmId=m_mgrDefault.getFirstFreeDTMID();

  int nodeIndex=0;

  for (int i=0; i < numDTMs; i++) {

    m_dtmIdent.setElementAt(dtmId << DTMManager.IDENT_DTM_NODE_BITS,i);

    m_mgrDefault.addDTM(this,dtmId,nodeIndex);

    dtmId++;

    nodeIndex+=(1 << DTMManager.IDENT_DTM_NODE_BITS);

  }

}

Location: SAX2DTM.java

Content: 

/** 

 * @return true iff we're building this model incrementally (eg we're partneredwith a IncrementalSAXSource) and thus require that the transformation and the parse run simultaneously. Guidance to the DTMManager.

 */

public boolean needsTwoThreads(){

  return null != m_incrementalSAXSource;

}

Location: SAX2DTM.java

Content: 

/** 

 * Resolve an external entity. <p> Always return null, so that the parser will use the system identifier provided in the XML document. This method implements the SAX default behaviour: application writers can override it in a subclass to do special translations such as catalog lookups or URI redirection. </p>

 * @param publicId The public identifer, or null if none is available.

 * @param systemId The system identifier provided in the XML document.

 * @return The new input source, or null to require the default behaviour.

 * @throws SAXException Any SAX exception, possibly wrapping another exception.

 * @see org.xml.sax.EntityResolver#resolveEntity

 * @throws SAXException

 */

public InputSource resolveEntity(String publicId,String systemId) throws SAXException {

  return null;

}

Location: SAX2DTM.java

Content: 

/** 

 * Construct a SAX2DTM object using the default block size.

 * @param mgr              The DTMManager who owns this DTM.

 * @param source           the JAXP 1.1 Source object for this DTM.

 * @param dtmIdentity      The DTM identity ID for this DTM.

 * @param whiteSpaceFilter The white space filter for this DTM, which may benull.

 * @param xstringfactory   XMLString factory for creating character content.

 * @param doIndexing       true if the caller considers it worth it to useindexing schemes.

 */

public SAX2DTM(DTMManager mgr,Source source,int dtmIdentity,DTMWSFilter whiteSpaceFilter,XMLStringFactory xstringfactory,boolean doIndexing){

  this(mgr,source,dtmIdentity,whiteSpaceFilter,xstringfactory,doIndexing,DEFAULT_BLOCKSIZE,true,false);

}

Location: SAX2DTM.java

Content: 

/** 

 * Construct a SAX2DTM object ready to be constructed from SAX2 ContentHandler events.

 * @param mgr              The DTMManager who owns this DTM.

 * @param source           the JAXP 1.1 Source object for this DTM.

 * @param dtmIdentity      The DTM identity ID for this DTM.

 * @param whiteSpaceFilter The white space filter for this DTM, which may benull.

 * @param xstringfactory   XMLString factory for creating character content.

 * @param doIndexing       true if the caller considers it worth it to useindexing schemes.

 * @param blocksize        The block size of the DTM.

 * @param usePrevsib       true if we want to build the previous sibling nodearray.

 * @param newNameTable     true if we want to use a new ExpandedNameTable forthis DTM.

 */

public SAX2DTM(DTMManager mgr,Source source,int dtmIdentity,DTMWSFilter whiteSpaceFilter,XMLStringFactory xstringfactory,boolean doIndexing,int blocksize,boolean usePrevsib,boolean newNameTable){

  super(mgr,source,dtmIdentity,whiteSpaceFilter,xstringfactory,doIndexing,blocksize,usePrevsib,newNameTable);

  if (blocksize <= 64) {

    m_data=new SuballocatedIntVector(blocksize,DEFAULT_NUMBLOCKS_SMALL);

    m_dataOrQName=new SuballocatedIntVector(blocksize,DEFAULT_NUMBLOCKS_SMALL);

    m_valuesOrPrefixes=new DTMStringPool(16);

    m_chars=new FastStringBuffer(7,10);

    m_contextIndexes=new IntStack(4);

    m_parents=new IntStack(4);

  }

 else {

    m_data=new SuballocatedIntVector(blocksize,DEFAULT_NUMBLOCKS);

    m_dataOrQName=new SuballocatedIntVector(blocksize,DEFAULT_NUMBLOCKS);

    m_valuesOrPrefixes=new DTMStringPool();

    m_chars=new FastStringBuffer(10,13);

    m_contextIndexes=new IntStack();

    m_parents=new IntStack();

  }

  m_data.addElement(0);

  m_useSourceLocationProperty=mgr.getSource_location();

  m_sourceSystemId=(m_useSourceLocationProperty) ? new StringVector() : null;

  m_sourceLine=(m_useSourceLocationProperty) ? new IntVector() : null;

  m_sourceColumn=(m_useSourceLocationProperty) ? new IntVector() : null;

}

Location: SAX2DTM.java

Content: 

/** 

 * Set an ID string to node association in the ID table.

 * @param id   The ID string.

 * @param elem The associated element handle.

 */

public void setIDAttribute(String id,int elem){

  m_idAttributes.put(id,new Integer(elem));

}

Location: SAX2DTM.java

Content: 

/** 

 * Bind a IncrementalSAXSource to this DTM. If we discover we need nodes that have not yet been built, we will ask this object to send us more events, and it will manage interactions with its data sources. Note that we do not actually build the IncrementalSAXSource, since we don't know what source it's reading from, what thread that source will run in, or when it will run.

 * @param incrementalSAXSource The parser that we want to recieve events from ondemand.

 */

public void setIncrementalSAXSource(IncrementalSAXSource incrementalSAXSource){

  m_incrementalSAXSource=incrementalSAXSource;

  incrementalSAXSource.setContentHandler(this);

  incrementalSAXSource.setLexicalHandler(this);

  incrementalSAXSource.setDTDHandler(this);

}

Location: SAX2DTM.java

Content: 

/** 

 * Set a run time property for this DTM instance. %REVIEW% Now that we no longer use this method to support getSourceLocatorFor, can we remove it?

 * @param property a <code>String</code> value

 * @param value    an <code>Object</code> value

 */

public void setProperty(String property,Object value){

}

Location: SAX2DTM.java

Content: 

/** 

 * Store the source location of the current node. This method must be called as every node is added to the DTM or for no node.

 */

protected void setSourceLocation(){

  m_sourceSystemId.addElement(m_locator.getSystemId());

  m_sourceLine.addElement(m_locator.getLineNumber());

  m_sourceColumn.addElement(m_locator.getColumnNumber());

  if (m_sourceSystemId.size() != m_size) {

    String msg="CODING ERROR in Source Location: " + m_size + " != "+ m_sourceSystemId.size();

    System.err.println(msg);

    throw new RuntimeException(msg);

  }

}

Location: SAX2DTM.java

Content: 

/** 

 * Set whether information about document source location should be maintained or not.

 */

public void setUseSourceLocation(boolean useSourceLocation){

  m_useSourceLocationProperty=useSourceLocation;

}

Location: SAX2DTM.java

Content: 

/** 

 * Get the data or qualified name for the given node identity.

 * @param identity The node identity.

 * @return The data or qualified name, or DTM.NULL.

 */

protected int _dataOrQName(int identity){

  if (identity < m_size)   return m_dataOrQName.elementAt(identity);

  while (true) {

    boolean isMore=nextNode();

    if (!isMore)     return NULL;

 else     if (identity < m_size)     return m_dataOrQName.elementAt(identity);

  }

}

