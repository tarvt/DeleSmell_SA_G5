Location: SyntaxTreeNode.java

Content: 

/** 

 * Adds a child node to this syntax tree node.

 * @param element is the new child node.

 */

protected final void addElement(SyntaxTreeNode element){

  _contents.addElement(element);

  element.setParent(this);

}

Location: SyntaxTreeNode.java

Content: 

/** 

 * Utility method used by parameters and variables to store result trees

 * @param classGen  BCEL Java class generator

 * @param methodGen BCEL Java method generator

 */

protected void compileResultTree(ClassGenerator classGen,MethodGenerator methodGen){

  final ConstantPoolGen cpg=classGen.getConstantPool();

  final InstructionList il=methodGen.getInstructionList();

  final Stylesheet stylesheet=classGen.getStylesheet();

  boolean isSimple=isSimpleRTF(this);

  boolean isAdaptive=false;

  if (!isSimple) {

    isAdaptive=isAdaptiveRTF(this);

  }

  int rtfType=isSimple ? DOM.SIMPLE_RTF : (isAdaptive ? DOM.ADAPTIVE_RTF : DOM.TREE_RTF);

  il.append(methodGen.loadHandler());

  final String DOM_CLASS=classGen.getDOMClass();

  il.append(methodGen.loadDOM());

  int index=cpg.addInterfaceMethodref(DOM_INTF,"getResultTreeFrag","(IIZ)" + DOM_INTF_SIG);

  il.append(new PUSH(cpg,RTF_INITIAL_SIZE));

  il.append(new PUSH(cpg,rtfType));

  il.append(new PUSH(cpg,stylesheet.callsNodeset()));

  il.append(new INVOKEINTERFACE(index,4));

  il.append(DUP);

  index=cpg.addInterfaceMethodref(DOM_INTF,"getOutputDomBuilder","()" + TRANSLET_OUTPUT_SIG);

  il.append(new INVOKEINTERFACE(index,1));

  il.append(DUP);

  il.append(methodGen.storeHandler());

  il.append(methodGen.startDocument());

  translateContents(classGen,methodGen);

  il.append(methodGen.loadHandler());

  il.append(methodGen.endDocument());

  if (stylesheet.callsNodeset() && !DOM_CLASS.equals(DOM_IMPL_CLASS)) {

    index=cpg.addMethodref(DOM_ADAPTER_CLASS,"<init>","(" + DOM_INTF_SIG + "["+ STRING_SIG+ "["+ STRING_SIG+ "[I"+ "["+ STRING_SIG+ ")V");

    il.append(new NEW(cpg.addClass(DOM_ADAPTER_CLASS)));

    il.append(new DUP_X1());

    il.append(SWAP);

    if (!stylesheet.callsNodeset()) {

      il.append(new ICONST(0));

      il.append(new ANEWARRAY(cpg.addClass(STRING)));

      il.append(DUP);

      il.append(DUP);

      il.append(new ICONST(0));

      il.append(new NEWARRAY(BasicType.INT));

      il.append(SWAP);

      il.append(new INVOKESPECIAL(index));

    }

 else {

      il.append(ALOAD_0);

      il.append(new GETFIELD(cpg.addFieldref(TRANSLET_CLASS,NAMES_INDEX,NAMES_INDEX_SIG)));

      il.append(ALOAD_0);

      il.append(new GETFIELD(cpg.addFieldref(TRANSLET_CLASS,URIS_INDEX,URIS_INDEX_SIG)));

      il.append(ALOAD_0);

      il.append(new GETFIELD(cpg.addFieldref(TRANSLET_CLASS,TYPES_INDEX,TYPES_INDEX_SIG)));

      il.append(ALOAD_0);

      il.append(new GETFIELD(cpg.addFieldref(TRANSLET_CLASS,NAMESPACE_INDEX,NAMESPACE_INDEX_SIG)));

      il.append(new INVOKESPECIAL(index));

      il.append(DUP);

      il.append(methodGen.loadDOM());

      il.append(new CHECKCAST(cpg.addClass(classGen.getDOMClass())));

      il.append(SWAP);

      index=cpg.addMethodref(MULTI_DOM_CLASS,"addDOMAdapter","(" + DOM_ADAPTER_SIG + ")I");

      il.append(new INVOKEVIRTUAL(index));

      il.append(POP);

    }

  }

  il.append(SWAP);

  il.append(methodGen.storeHandler());

}

Location: SyntaxTreeNode.java

Content: 

/** 

 * Return true if any of the expressions/instructions in the contents of this node is context dependent.

 * @return 'true' if the contents of this node is context dependent.

 */

protected boolean dependentContents(){

  final int n=elementCount();

  for (int i=0; i < n; i++) {

    final SyntaxTreeNode item=(SyntaxTreeNode)_contents.elementAt(i);

    if (item.contextDependent()) {

      return true;

    }

  }

  return false;

}

Location: SyntaxTreeNode.java

Content: 

/** 

 * Displays the contents of this syntax tree node (to stdout). This method is intended for debugging _only_ !!!

 * @param indent Indentation level for syntax tree levels.

 */

protected void displayContents(int indent){

  final int n=elementCount();

  for (int i=0; i < n; i++) {

    SyntaxTreeNode item=(SyntaxTreeNode)_contents.elementAt(i);

    item.display(indent);

  }

}

Location: SyntaxTreeNode.java

Content: 

/** 

 * Returns the number of children this node has.

 * @return Number of child nodes.

 */

protected final int elementCount(){

  return _contents.size();

}

Location: SyntaxTreeNode.java

Content: 

protected String getAttribute(String prefix,String localName){

  return getAttribute(prefix + ':' + localName);

}

Location: SyntaxTreeNode.java

Content: 

/** 

 * Retrieve an ID to identify the namespaces in scope at this point in the stylesheet

 * @return An <code>int</code> representing the node ID or <code>-1</code> if nonamespace declarations are in scope

 */

protected final int getNodeIDForStylesheetNSLookup(){

  if (_nodeIDForStylesheetNSLookup == UNKNOWN_STYLESHEET_NODE_ID) {

    Hashtable prefixMapping=getPrefixMapping();

    int parentNodeID=(_parent != null) ? _parent.getNodeIDForStylesheetNSLookup() : UNKNOWN_STYLESHEET_NODE_ID;

    if (prefixMapping == null) {

      _nodeIDForStylesheetNSLookup=parentNodeID;

    }

 else {

      _nodeIDForStylesheetNSLookup=getXSLTC().registerStylesheetPrefixMappingForRuntime(prefixMapping,parentNodeID);

    }

  }

  return _nodeIDForStylesheetNSLookup;

}

Location: SyntaxTreeNode.java

Content: 

/** 

 * Returns a Hashtable containing the prefix mappings that were declared for this element. This does not include all prefix mappings in scope, so one may have to check ancestor elements to get all mappings that are in in scope.

 * @return Prefix mappings (for this element only).

 */

protected Hashtable getPrefixMapping(){

  return _prefixMapping;

}

Location: SyntaxTreeNode.java

Content: 

/** 

 * Tells you if this node has any child nodes.

 * @return 'true' if this node has any children.

 */

protected final boolean hasContents(){

  return elementCount() > 0;

}

Location: SyntaxTreeNode.java

Content: 

/** 

 * Return true if the node represents an adaptive RTF. A node is an adaptive RTF if each children is a Text element or it is <xsl:call-template> or <xsl:apply-templates>.

 * @param node A node

 * @return true if the node content can be considered as an adaptive RTF.

 */

private boolean isAdaptiveRTF(SyntaxTreeNode node){

  Vector contents=node.getContents();

  for (int i=0; i < contents.size(); i++) {

    SyntaxTreeNode item=(SyntaxTreeNode)contents.elementAt(i);

    if (!isTextElement(item,true))     return false;

  }

  return true;

}

Location: SyntaxTreeNode.java

Content: 

/** 

 * Returns 'true' if this syntax tree node is the Sentinal node.

 * @return 'true' if this syntax tree node is the Sentinal node.

 */

protected final boolean isDummy(){

  return this == Dummy;

}

Location: SyntaxTreeNode.java

Content: 

/** 

 * Return true if the node represents a simple RTF. A node is a simple RTF if all children only produce Text value.

 * @param node A node

 * @return true if the node content can be considered as a simple RTF.

 */

private boolean isSimpleRTF(SyntaxTreeNode node){

  Vector contents=node.getContents();

  for (int i=0; i < contents.size(); i++) {

    SyntaxTreeNode item=(SyntaxTreeNode)contents.elementAt(i);

    if (!isTextElement(item,false))     return false;

  }

  return true;

}

Location: SyntaxTreeNode.java

Content: 

/** 

 * Return true if the node only produces Text content. A node is a Text element if it is Text, xsl:value-of, xsl:number, or a combination of these nested in a control instruction (xsl:if or xsl:choose). If the doExtendedCheck flag is true, xsl:call-template and xsl:apply-templates are also considered as Text elements.

 * @param node            A node

 * @param doExtendedCheck If this flag is true, <xsl:call-template> and<xsl:apply-templates> are also considered as Text elements.

 * @return true if the node of Text type

 */

private boolean isTextElement(SyntaxTreeNode node,boolean doExtendedCheck){

  if (node instanceof ValueOf || node instanceof Number || node instanceof Text) {

    return true;

  }

 else   if (node instanceof If) {

    return doExtendedCheck ? isAdaptiveRTF(node) : isSimpleRTF(node);

  }

 else   if (node instanceof Choose) {

    Vector contents=node.getContents();

    for (int i=0; i < contents.size(); i++) {

      SyntaxTreeNode item=(SyntaxTreeNode)contents.elementAt(i);

      if (item instanceof Text || ((item instanceof When || item instanceof Otherwise) && ((doExtendedCheck && isAdaptiveRTF(item)) || (!doExtendedCheck && isSimpleRTF(item)))))       continue;

 else       return false;

    }

    return true;

  }

 else   if (doExtendedCheck && (node instanceof CallTemplate || node instanceof ApplyTemplates))   return true;

 else   return false;

}

Location: SyntaxTreeNode.java

Content: 

/** 

 * Returns this element's last child

 * @return The child node.

 */

protected final SyntaxTreeNode lastChild(){

  if (_contents.size() == 0)   return null;

  return (SyntaxTreeNode)_contents.lastElement();

}

Location: SyntaxTreeNode.java

Content: 

/** 

 * Parse all children of this syntax tree node. This method is normally called by the parseContents() method.

 * @param parser reference to the XSLT parser

 */

protected final void parseChildren(Parser parser){

  Vector locals=null;

  final int count=_contents.size();

  for (int i=0; i < count; i++) {

    SyntaxTreeNode child=(SyntaxTreeNode)_contents.elementAt(i);

    parser.getSymbolTable().setCurrentNode(child);

    child.parseContents(parser);

    final QName varOrParamName=updateScope(parser,child);

    if (varOrParamName != null) {

      if (locals == null) {

        locals=new Vector(2);

      }

      locals.addElement(varOrParamName);

    }

  }

  parser.getSymbolTable().setCurrentNode(this);

  if (locals != null) {

    final int nLocals=locals.size();

    for (int i=0; i < nLocals; i++) {

      parser.removeVariable((QName)locals.elementAt(i));

    }

  }

}

Location: SyntaxTreeNode.java

Content: 

/** 

 * Removed a child node of this syntax tree node.

 * @param element is the child node to remove.

 */

protected final void removeElement(SyntaxTreeNode element){

  _contents.remove(element);

  element.setParent(null);

}

Location: SyntaxTreeNode.java

Content: 

/** 

 * Report an error to the parser.

 * @param element The element in which the error occured (normally 'this' but itcould also be an expression/pattern/etc.)

 * @param parser  The XSLT parser to report the error to.

 * @param error   The error code (from util/ErrorMsg).

 * @param message Any additional error message.

 */

protected void reportError(SyntaxTreeNode element,Parser parser,String errorCode,String message){

  final ErrorMsg error=new ErrorMsg(errorCode,message,element);

  parser.reportError(Constants.ERROR,error);

}

Location: SyntaxTreeNode.java

Content: 

/** 

 * Report a recoverable error to the parser.

 * @param element The element in which the error occured (normally 'this' but itcould also be an expression/pattern/etc.)

 * @param parser  The XSLT parser to report the error to.

 * @param error   The error code (from util/ErrorMsg).

 * @param message Any additional error message.

 */

protected void reportWarning(SyntaxTreeNode element,Parser parser,String errorCode,String message){

  final ErrorMsg error=new ErrorMsg(errorCode,message,element);

  parser.reportError(Constants.WARNING,error);

}

Location: SyntaxTreeNode.java

Content: 

/** 

 * Set the attributes for this SyntaxTreeNode.

 * @param attributes Attributes for the element. Must be passed in as animplementation of org.xml.sax.Attributes.

 */

protected void setAttributes(AttributeList attributes){

  _attributes=attributes;

}

Location: SyntaxTreeNode.java

Content: 

/** 

 * Inserts the first child node of this syntax tree node. The existing children are shifted back one position.

 * @param element is the new child node.

 */

protected final void setFirstElement(SyntaxTreeNode element){

  _contents.insertElementAt(element,0);

  element.setParent(this);

}

Location: SyntaxTreeNode.java

Content: 

/** 

 * Set this syntax tree node's parent node

 * @param parent The parent node.

 */

protected void setParent(SyntaxTreeNode parent){

  if (_parent == null)   _parent=parent;

}

Location: SyntaxTreeNode.java

Content: 

/** 

 * Sets the prefix mapping for the namespaces that were declared in this element. This does not include all prefix mappings in scope, so one may have to check ancestor elements to get all mappings that are in in scope. The prefixes must be passed in as a Hashtable that maps namespace prefixes (String objects) to namespace URIs (also String).

 * @param mapping The Hashtable containing the mappings.

 */

protected void setPrefixMapping(Hashtable mapping){

  _prefixMapping=mapping;

}

Location: SyntaxTreeNode.java

Content: 

/** 

 * Set the QName for the SyntaxTreeNode

 * @param uri    The element's namespace URI

 * @param prefix The element's namespace prefix

 * @param local  The element's local name

 */

protected void setQName(String uri,String prefix,String localname){

  _qname=new QName(uri,prefix,localname);

}

Location: SyntaxTreeNode.java

Content: 

/** 

 * Creates a new SyntaxTreeNode with a 'null' QName and no source file line number reference.

 */

public SyntaxTreeNode(){

  _line=0;

  _qname=null;

}

Location: SyntaxTreeNode.java

Content: 

/** 

 * Creates a new SyntaxTreeNode with a 'null' QName.

 * @param line Source file line number reference

 */

public SyntaxTreeNode(int line){

  _line=line;

  _qname=null;

}

Location: SyntaxTreeNode.java

Content: 

/** 

 * Creates a new SyntaxTreeNode with no source file line number reference.

 * @param uri    The element's namespace URI

 * @param prefix The element's namespace prefix

 * @param local  The element's local name

 */

public SyntaxTreeNode(String uri,String prefix,String local){

  _line=0;

  setQName(uri,prefix,local);

}

Location: SyntaxTreeNode.java

Content: 

/** 

 * Call typeCheck() on all child syntax tree nodes.

 * @param stable The compiler/parser's symbol table

 */

protected Type typeCheckContents(SymbolTable stable) throws TypeCheckError {

  final int n=elementCount();

  for (int i=0; i < n; i++) {

    SyntaxTreeNode item=(SyntaxTreeNode)_contents.elementAt(i);

    item.typeCheck(stable);

  }

  return Type.Void;

}

Location: SyntaxTreeNode.java

Content: 

/** 

 * Add a node to the current scope and return name of a variable or parameter if the node represents a variable or a parameter.

 */

protected QName updateScope(Parser parser,SyntaxTreeNode node){

  if (node instanceof Variable) {

    final Variable var=(Variable)node;

    parser.addVariable(var);

    return var.getName();

  }

 else   if (node instanceof Param) {

    final Param param=(Param)node;

    parser.addParameter(param);

    return param.getName();

  }

 else {

    return null;

  }

}

