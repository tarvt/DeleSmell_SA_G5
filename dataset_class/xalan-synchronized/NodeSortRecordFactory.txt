Location: NodeSortRecordFactory.java

Content: 

public String getClassName(){

  return _className;

}

Location: NodeSortRecordFactory.java

Content: 

/** 

 * Create an instance of a sub-class of NodeSortRecord. The name of this sub-class is passed to us in the constructor.

 */

public NodeSortRecord makeNodeSortRecord(int node,int last) throws ExceptionInInitializerError, LinkageError, IllegalAccessException, InstantiationException, SecurityException, TransletException {

  final NodeSortRecord sortRecord=(NodeSortRecord)_class.newInstance();

  sortRecord.initialize(node,last,_dom,_sortSettings);

  return sortRecord;

}

Location: NodeSortRecordFactory.java

Content: 

/** 

 * Creates a NodeSortRecord producing object. The DOM specifies which tree to get the nodes to sort from, the class name specifies what auxillary class to use to sort the nodes (this class is generated by the Sort class), and the translet parameter is needed for methods called by this object.

 * @deprecated This constructor is no longer used in generated code. It existsonly for backwards compatibility.

 */

public NodeSortRecordFactory(DOM dom,String className,Translet translet,String order[],String type[]) throws TransletException {

  this(dom,className,translet,order,type,null,null);

}

Location: NodeSortRecordFactory.java

Content: 

/** 

 * Creates a NodeSortRecord producing object. The DOM specifies which tree to get the nodes to sort from, the class name specifies what auxillary class to use to sort the nodes (this class is generated by the Sort class), and the translet parameter is needed for methods called by this object.

 */

public NodeSortRecordFactory(DOM dom,String className,Translet translet,String order[],String type[],String lang[],String caseOrder[]) throws TransletException {

  try {

    _dom=dom;

    _className=className;

    _class=translet.getAuxiliaryClass(className);

    if (_class == null) {

      _class=ObjectFactory.findProviderClass(className,ObjectFactory.findClassLoader(),true);

    }

    int levels=order.length;

    int[] iOrder=new int[levels];

    int[] iType=new int[levels];

    for (int i=0; i < levels; i++) {

      if (order[i].length() == DESCENDING) {

        iOrder[i]=NodeSortRecord.COMPARE_DESCENDING;

      }

      if (type[i].length() == NUMBER) {

        iType[i]=NodeSortRecord.COMPARE_NUMERIC;

      }

    }

    String[] emptyStringArray=null;

    if (lang == null || caseOrder == null) {

      int numSortKeys=order.length;

      emptyStringArray=new String[numSortKeys];

      for (int i=0; i < numSortKeys; i++) {

        emptyStringArray[i]="";

      }

    }

    if (lang == null) {

      lang=emptyStringArray;

    }

    if (caseOrder == null) {

      caseOrder=emptyStringArray;

    }

    final int length=lang.length;

    Locale[] locales=new Locale[length];

    Collator[] collators=new Collator[length];

    for (int i=0; i < length; i++) {

      locales[i]=LocaleUtility.langToLocale(lang[i]);

      collators[i]=Collator.getInstance(locales[i]);

    }

    _sortSettings=new SortSettings((AbstractTranslet)translet,iOrder,iType,locales,collators,caseOrder);

  }

 catch (  ClassNotFoundException e) {

    throw new TransletException(e);

  }

}

Location: NodeSortRecordFactory.java

Content: 

private final void setLang(final String lang[]){

}

