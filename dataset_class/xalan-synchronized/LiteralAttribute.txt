Location: LiteralAttribute.java

Content: 

/** 

 * Return true if at least one character in the String is considered to be a "bad" character. A bad character is one whose code is: less than 32 (a space), or greater than 126, or it is one of '<', '>', '&' or '\"'. This helps the serializer to decide whether the String needs to be escaped.

 */

private boolean hasBadChars(String value){

  char[] chars=value.toCharArray();

  int size=chars.length;

  for (int i=0; i < size; i++) {

    char ch=chars[i];

    if (ch < 32 || 126 < ch || ch == '<' || ch == '>' || ch == '&' || ch == '\"')     return true;

  }

  return false;

}

Location: LiteralAttribute.java

Content: 

/** 

 * Creates a new literal attribute (but does not insert it into the AST).

 * @param name   the attribute name (incl. prefix) as a String.

 * @param value  the attribute value.

 * @param parser the XSLT parser (wraps XPath parser).

 */

public LiteralAttribute(String name,String value,Parser parser,SyntaxTreeNode parent){

  _name=name;

  setParent(parent);

  _value=AttributeValue.create(this,value,parser);

}

