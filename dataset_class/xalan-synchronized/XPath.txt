Location: XPath.java

Content: 

/** 

 * Given an expression and a context, evaluate the XPath and return the result.

 * @param xctxt            The execution context.

 * @param contextNode      The node that "." expresses.

 * @param namespaceContext The context in which namespaces in the XPath aresupposed to be expanded.

 * @throws TransformerException                     thrown if the activeProblemListener decides the error condition is severe enough to halt processing.

 * @throws javax.xml.transform.TransformerException

 * @xsl.usage experimental

 */

public boolean bool(XPathContext xctxt,int contextNode,PrefixResolver namespaceContext) throws javax.xml.transform.TransformerException {

  xctxt.pushNamespaceContext(namespaceContext);

  xctxt.pushCurrentNodeAndExpression(contextNode,contextNode);

  try {

    return m_mainExp.bool(xctxt);

  }

 catch (  TransformerException te) {

    te.setLocator(this.getLocator());

    ErrorListener el=xctxt.getErrorListener();

    if (null != el) {

      el.error(te);

    }

 else     throw te;

  }

catch (  Exception e) {

    while (e instanceof org.apache.xml.utils.WrappedRuntimeException) {

      e=((org.apache.xml.utils.WrappedRuntimeException)e).getException();

    }

    String msg=e.getMessage();

    if (msg == null || msg.length() == 0) {

      msg=XSLMessages.createXPATHMessage(XPATHErrorResources.ER_XPATH_ERROR,null);

    }

    TransformerException te=new TransformerException(msg,getLocator(),e);

    ErrorListener el=xctxt.getErrorListener();

    if (null != el) {

      el.fatalError(te);

    }

 else     throw te;

  }

 finally {

    xctxt.popNamespaceContext();

    xctxt.popCurrentNodeAndExpression();

  }

  return false;

}

Location: XPath.java

Content: 

/** 

 * Tell the user of an error, and probably throw an exception.

 * @param xctxt      The XPath runtime context.

 * @param sourceNode Not used.

 * @param msg        An error msgkey that corresponds to one of the constantsfound in  {@link org.apache.xpath.res.XPATHErrorResources}, which is a key for a format string.

 * @param args       An array of arguments represented in the format string,which may be null.

 * @throws TransformerException if the current ErrorListoner determines to throwan exception.

 */

public void error(XPathContext xctxt,int sourceNode,String msg,Object[] args) throws javax.xml.transform.TransformerException {

  String fmsg=XSLMessages.createXPATHMessage(msg,args);

  ErrorListener ehandler=xctxt.getErrorListener();

  if (null != ehandler) {

    ehandler.fatalError(new TransformerException(fmsg,(SAXSourceLocator)xctxt.getSAXLocator()));

  }

 else {

    SourceLocator slocator=xctxt.getSAXLocator();

    System.out.println(fmsg + "; file " + slocator.getSystemId()+ "; line "+ slocator.getLineNumber()+ "; column "+ slocator.getColumnNumber());

  }

}

Location: XPath.java

Content: 

/** 

 * Given an expression and a context, evaluate the XPath and return the result.

 * @param xctxt            The execution context.

 * @param contextNode      The node that "." expresses.

 * @param namespaceContext The context in which namespaces in the XPath aresupposed to be expanded.

 * @throws TransformerException                     thrown if the activeProblemListener decides the error condition is severe enough to halt processing.

 * @throws javax.xml.transform.TransformerException

 * @xsl.usage experimental

 */

public XObject execute(XPathContext xctxt,int contextNode,PrefixResolver namespaceContext) throws javax.xml.transform.TransformerException {

  xctxt.pushNamespaceContext(namespaceContext);

  xctxt.pushCurrentNodeAndExpression(contextNode,contextNode);

  XObject xobj=null;

  try {

    xobj=m_mainExp.execute(xctxt);

  }

 catch (  TransformerException te) {

    te.setLocator(this.getLocator());

    ErrorListener el=xctxt.getErrorListener();

    if (null != el) {

      el.error(te);

    }

 else     throw te;

  }

catch (  Exception e) {

    while (e instanceof org.apache.xml.utils.WrappedRuntimeException) {

      e=((org.apache.xml.utils.WrappedRuntimeException)e).getException();

    }

    String msg=e.getMessage();

    if (msg == null || msg.length() == 0) {

      msg=XSLMessages.createXPATHMessage(XPATHErrorResources.ER_XPATH_ERROR,null);

    }

    TransformerException te=new TransformerException(msg,getLocator(),e);

    ErrorListener el=xctxt.getErrorListener();

    if (null != el) {

      el.fatalError(te);

    }

 else     throw te;

  }

 finally {

    xctxt.popNamespaceContext();

    xctxt.popCurrentNodeAndExpression();

  }

  return xobj;

}

Location: XPath.java

Content: 

/** 

 * Given an expression and a context, evaluate the XPath and return the result.

 * @param xctxt            The execution context.

 * @param contextNode      The node that "." expresses.

 * @param namespaceContext The context in which namespaces in the XPath aresupposed to be expanded.

 * @return The result of the XPath or null if callbacks are used.

 * @throws TransformerException                     thrown if the errorcondition is severe enough to halt processing.

 * @throws javax.xml.transform.TransformerException

 * @xsl.usage experimental

 */

public XObject execute(XPathContext xctxt,org.w3c.dom.Node contextNode,PrefixResolver namespaceContext) throws javax.xml.transform.TransformerException {

  return execute(xctxt,xctxt.getDTMHandleFromNode(contextNode),namespaceContext);

}

Location: XPath.java

Content: 

/** 

 * Get the SourceLocator on the expression object.

 * @return the SourceLocator on the expression object, which may be null.

 */

public SourceLocator getLocator(){

  return m_mainExp;

}

Location: XPath.java

Content: 

/** 

 * initial the function table

 */

private void initFunctionTable(){

  m_funcTable=new FunctionTable();

}

Location: XPath.java

Content: 

/** 

 * Warn the user of an problem.

 * @param xctxt      The XPath runtime context.

 * @param sourceNode Not used.

 * @param msg        An error msgkey that corresponds to one of the constantsfound in  {@link org.apache.xpath.res.XPATHErrorResources}, which is a key for a format string.

 * @param args       An array of arguments represented in the format string,which may be null.

 * @throws TransformerException if the current ErrorListoner determines to throwan exception.

 */

public void warn(XPathContext xctxt,int sourceNode,String msg,Object[] args) throws javax.xml.transform.TransformerException {

  String fmsg=XSLMessages.createXPATHWarning(msg,args);

  ErrorListener ehandler=xctxt.getErrorListener();

  if (null != ehandler) {

    ehandler.warning(new TransformerException(fmsg,(SAXSourceLocator)xctxt.getSAXLocator()));

  }

}

Location: XPath.java

Content: 

/** 

 * Construct an XPath object.

 * @param expr The Expression object.

 * @throws javax.xml.transform.TransformerException if syntax or other error.

 */

public XPath(Expression expr){

  this.setExpression(expr);

  initFunctionTable();

}

Location: XPath.java

Content: 

/** 

 * Construct an XPath object. (Needs review -sc) This method initializes an XPathParser/ Compiler and compiles the expression.

 * @param exprString     The XPath expression.

 * @param locator        The location of the expression, may be null.

 * @param prefixResolver A prefix resolver to use to resolve prefixes tonamespace URIs.

 * @param type           one of {@link #SELECT} or {@link #MATCH}.

 * @throws javax.xml.transform.TransformerException if syntax or other error.

 */

public XPath(String exprString,SourceLocator locator,PrefixResolver prefixResolver,int type) throws javax.xml.transform.TransformerException {

  this(exprString,locator,prefixResolver,type,null);

}

Location: XPath.java

Content: 

/** 

 * Construct an XPath object. (Needs review -sc) This method initializes an XPathParser/ Compiler and compiles the expression.

 * @param exprString     The XPath expression.

 * @param locator        The location of the expression, may be null.

 * @param prefixResolver A prefix resolver to use to resolve prefixes tonamespace URIs.

 * @param type           one of {@link #SELECT} or {@link #MATCH}.

 * @param errorListener  The error listener, or null if default should be used.

 * @throws javax.xml.transform.TransformerException if syntax or other error.

 */

public XPath(String exprString,SourceLocator locator,PrefixResolver prefixResolver,int type,ErrorListener errorListener) throws javax.xml.transform.TransformerException {

  initFunctionTable();

  if (null == errorListener)   errorListener=new org.apache.xml.utils.DefaultErrorHandler();

  m_patternString=exprString;

  XPathParser parser=new XPathParser(errorListener,locator);

  Compiler compiler=new Compiler(errorListener,locator,m_funcTable);

  if (SELECT == type)   parser.initXPath(compiler,exprString,prefixResolver);

 else   if (MATCH == type)   parser.initMatchPattern(compiler,exprString,prefixResolver);

 else   throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_CANNOT_DEAL_XPATH_TYPE,new Object[]{Integer.toString(type)}));

  Expression expr=compiler.compile(0);

  this.setExpression(expr);

  if ((null != locator) && locator instanceof ExpressionNode) {

    expr.exprSetParent((ExpressionNode)locator);

  }

}

Location: XPath.java

Content: 

/** 

 * Construct an XPath object. (Needs review -sc) This method initializes an XPathParser/ Compiler and compiles the expression.

 * @param exprString     The XPath expression.

 * @param locator        The location of the expression, may be null.

 * @param prefixResolver A prefix resolver to use to resolve prefixes tonamespace URIs.

 * @param type           one of {@link #SELECT} or {@link #MATCH}.

 * @param errorListener  The error listener, or null if default should be used.

 * @throws javax.xml.transform.TransformerException if syntax or other error.

 */

public XPath(String exprString,SourceLocator locator,PrefixResolver prefixResolver,int type,ErrorListener errorListener,FunctionTable aTable) throws javax.xml.transform.TransformerException {

  m_funcTable=aTable;

  if (null == errorListener)   errorListener=new org.apache.xml.utils.DefaultErrorHandler();

  m_patternString=exprString;

  XPathParser parser=new XPathParser(errorListener,locator);

  Compiler compiler=new Compiler(errorListener,locator,m_funcTable);

  if (SELECT == type)   parser.initXPath(compiler,exprString,prefixResolver);

 else   if (MATCH == type)   parser.initMatchPattern(compiler,exprString,prefixResolver);

 else   throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_CANNOT_DEAL_XPATH_TYPE,new Object[]{Integer.toString(type)}));

  Expression expr=compiler.compile(0);

  this.setExpression(expr);

  if ((null != locator) && locator instanceof ExpressionNode) {

    expr.exprSetParent((ExpressionNode)locator);

  }

}

