Location: XPathException.java

Content: 

/** 

 * Return the embedded exception, if any. Overrides javax.xml.transform.TransformerException.getException().

 * @return The embedded exception, or null if there is none.

 */

public Throwable getException(){

  return m_exception;

}

Location: XPathException.java

Content: 

/** 

 * Get the first non-Expression parent of this node.

 * @return null or first ancestor that is not an Expression.

 */

protected ExpressionNode getExpressionOwner(ExpressionNode ex){

  ExpressionNode parent=ex.exprGetParent();

  while ((null != parent) && (parent instanceof Expression))   parent=parent.exprGetParent();

  return parent;

}

Location: XPathException.java

Content: 

/** 

 * Find the most contained message.

 * @return The error message of the originating exception.

 */

public String getMessage(){

  String lastMessage=super.getMessage();

  Throwable exception=m_exception;

  while (null != exception) {

    String nextMessage=exception.getMessage();

    if (null != nextMessage)     lastMessage=nextMessage;

    if (exception instanceof TransformerException) {

      TransformerException se=(TransformerException)exception;

      Throwable prev=exception;

      exception=se.getException();

      if (prev == exception)       break;

    }

 else {

      exception=null;

    }

  }

  return (null != lastMessage) ? lastMessage : "";

}

Location: XPathException.java

Content: 

/** 

 * Get the stylesheet node from where this error originated.

 * @return The stylesheet node from where this error originated, or null.

 */

public Object getStylesheetNode(){

  return m_styleNode;

}

Location: XPathException.java

Content: 

/** 

 * Get the XSLT ElemVariable that this sub-expression references. In order for this to work, the SourceLocator must be the owning ElemTemplateElement.

 * @return The dereference to the ElemVariable, or null if not found.

 */

public org.w3c.dom.Node getStylesheetNode(ExpressionNode ex){

  ExpressionNode owner=getExpressionOwner(ex);

  if (null != owner && owner instanceof org.w3c.dom.Node) {

    return ((org.w3c.dom.Node)owner);

  }

  return null;

}

Location: XPathException.java

Content: 

/** 

 * Print the the trace of methods from where the error originated. This will trace all nested exception objects, as well as this object.

 * @param s The writer where the dump will be sent to.

 */

public void printStackTrace(java.io.PrintWriter s){

  if (s == null)   s=new java.io.PrintWriter(System.err);

  try {

    super.printStackTrace(s);

  }

 catch (  Exception e) {

  }

  boolean isJdk14OrHigher=false;

  try {

    Throwable.class.getMethod("getCause",null);

    isJdk14OrHigher=true;

  }

 catch (  NoSuchMethodException nsme) {

  }

  if (!isJdk14OrHigher) {

    Throwable exception=m_exception;

    for (int i=0; (i < 10) && (null != exception); i++) {

      s.println("---------");

      try {

        exception.printStackTrace(s);

      }

 catch (      Exception e) {

        s.println("Could not print stack trace...");

      }

      if (exception instanceof TransformerException) {

        TransformerException se=(TransformerException)exception;

        Throwable prev=exception;

        exception=se.getException();

        if (prev == exception) {

          exception=null;

          break;

        }

      }

 else {

        exception=null;

      }

    }

  }

}

Location: XPathException.java

Content: 

/** 

 * Set the stylesheet node from where this error originated.

 * @param styleNode The stylesheet node from where this error originated, ornull.

 */

public void setStylesheetNode(Object styleNode){

  m_styleNode=styleNode;

}

Location: XPathException.java

Content: 

/** 

 * Create an XPathException object that holds an error message.

 * @param message The error message.

 */

public XPathException(String message){

  super(message);

}

Location: XPathException.java

Content: 

/** 

 * Create an XPathException object that holds an error message, and another exception that caused this exception.

 * @param message The error message.

 * @param e       The exception that caused this exception.

 */

public XPathException(String message,Exception e){

  super(message);

  this.m_exception=e;

}

Location: XPathException.java

Content: 

/** 

 * Create an XPathException object that holds an error message.

 * @param message The error message.

 */

public XPathException(String message,ExpressionNode ex){

  super(message);

  this.setLocator(ex);

  setStylesheetNode(getStylesheetNode(ex));

}

Location: XPathException.java

Content: 

/** 

 * Create an XPathException object that holds an error message, the stylesheet node that the error originated from, and another exception that caused this exception.

 * @param message   The error message.

 * @param styleNode The stylesheet node that the error originated from.

 * @param e         The exception that caused this exception.

 */

public XPathException(String message,Node styleNode,Exception e){

  super(message);

  m_styleNode=styleNode;

  this.m_exception=e;

}

Location: XPathException.java

Content: 

/** 

 * Create an XPathException object that holds an error message and the stylesheet node that the error originated from.

 * @param message   The error message.

 * @param styleNode The stylesheet node that the error originated from.

 */

public XPathException(String message,Object styleNode){

  super(message);

  m_styleNode=styleNode;

}

