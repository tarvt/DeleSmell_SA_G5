Location: ToStream.java

Content: 

/** 

 * Handle one of the default entities, return false if it is not a default entity.

 * @param ch           character to be escaped.

 * @param i            index into character array.

 * @param chars        non-null reference to character array.

 * @param len          length of chars.

 * @param fromTextNode true if the characters being processed are from a textnode, false if they are from an attribute value

 * @param escLF        true if the linefeed should be escaped.

 * @return i+1 if the character was written, else i.

 * @throws java.io.IOException

 */

int accumDefaultEntity(java.io.Writer writer,char ch,int i,char[] chars,int len,boolean fromTextNode,boolean escLF) throws IOException {

  if (!escLF && CharInfo.S_LINEFEED == ch) {

    writer.write(m_lineSep,0,m_lineSepLen);

  }

 else {

    if ((fromTextNode && m_charInfo.shouldMapTextChar(ch)) || (!fromTextNode && m_charInfo.shouldMapAttrChar(ch))) {

      String outputStringForChar=m_charInfo.getOutputStringForChar(ch);

      if (null != outputStringForChar) {

        writer.write(outputStringForChar);

      }

 else       return i;

    }

 else     return i;

  }

  return i + 1;

}

Location: ToStream.java

Content: 

/** 

 * Escape and writer.write a character.

 * @param ch           character to be escaped.

 * @param i            index into character array.

 * @param chars        non-null reference to character array.

 * @param len          length of chars.

 * @param fromTextNode true if the characters being processed are from a textnode, false if the characters being processed are from an attribute value.

 * @param escLF        true if the linefeed should be escaped.

 * @return i+1 if a character was written, i+2 if two characters were writtenout, else return i.

 * @throws org.xml.sax.SAXException

 */

private int accumDefaultEscape(Writer writer,char ch,int i,char[] chars,int len,boolean fromTextNode,boolean escLF) throws IOException {

  int pos=accumDefaultEntity(writer,ch,i,chars,len,fromTextNode,escLF);

  if (i == pos) {

    if (Encodings.isHighUTF16Surrogate(ch)) {

      char next;

      int codePoint=0;

      if (i + 1 >= len) {

        throw new IOException(Utils.messages.createMessage(MsgKey.ER_INVALID_UTF16_SURROGATE,new Object[]{Integer.toHexString(ch)}));

      }

 else {

        next=chars[++i];

        if (!(Encodings.isLowUTF16Surrogate(next)))         throw new IOException(Utils.messages.createMessage(MsgKey.ER_INVALID_UTF16_SURROGATE,new Object[]{Integer.toHexString(ch) + " " + Integer.toHexString(next)}));

        codePoint=Encodings.toCodePoint(ch,next);

      }

      writer.write("&#");

      writer.write(Integer.toString(codePoint));

      writer.write(';');

      pos+=2;

    }

 else {

      if (isCharacterInC0orC1Range(ch) || isNELorLSEPCharacter(ch)) {

        writer.write("&#");

        writer.write(Integer.toString(ch));

        writer.write(';');

      }

 else       if ((!escapingNotNeeded(ch) || ((fromTextNode && m_charInfo.shouldMapTextChar(ch)) || (!fromTextNode && m_charInfo.shouldMapAttrChar(ch)))) && m_elemContext.m_currentElemDepth > 0) {

        writer.write("&#");

        writer.write(Integer.toString(ch));

        writer.write(';');

      }

 else {

        writer.write(ch);

      }

      pos++;

    }

  }

  return pos;

}

Location: ToStream.java

Content: 

/** 

 * Remembers the cdata sections specified in the cdata-section-elements by appending the given cdata section elements to the list. This method can be called multiple times, but once an element is put in the list of cdata section elements it can not be removed. This method should be used by both Xalan and XSLTC.

 * @param URI_and_localNames a whitespace separated list of element names, eachelement is a URI in curly braces (optional) and a local name. An example of such a parameter is: "{http://company.com}price {myURI2}book chapter"

 */

public void addCdataSectionElements(String URI_and_localNames){

  if (URI_and_localNames != null)   initCdataElems(URI_and_localNames);

  if (m_StringOfCDATASections == null)   m_StringOfCDATASections=URI_and_localNames;

 else   m_StringOfCDATASections+=(" " + URI_and_localNames);

}

Location: ToStream.java

Content: 

/** 

 * Adds a URI/LocalName pair of strings to the list.

 * @param URI_and_localName String of the form "{uri}local" or "local"

 * @return a QName object

 */

private void addCdataSectionElement(String URI_and_localName,Vector v){

  StringTokenizer tokenizer=new StringTokenizer(URI_and_localName,"{}",false);

  String s1=tokenizer.nextToken();

  String s2=tokenizer.hasMoreTokens() ? tokenizer.nextToken() : null;

  if (null == s2) {

    v.addElement(null);

    v.addElement(s1);

  }

 else {

    v.addElement(s1);

    v.addElement(s2);

  }

}

Location: ToStream.java

Content: 

/** 

 * A private helper method to output the

 * @throws SAXException

 * @throws IOException

 */

private void DTDprolog() throws SAXException, IOException {

  final java.io.Writer writer=m_writer;

  if (m_needToOutputDocTypeDecl) {

    outputDocTypeDecl(m_elemContext.m_elementName,false);

    m_needToOutputDocTypeDecl=false;

  }

  if (m_inDoctype) {

    writer.write(" [");

    writer.write(m_lineSep,0,m_lineSepLen);

    m_inDoctype=false;

  }

}

Location: ToStream.java

Content: 

/** 

 * Ends an un-escaping section.

 * @see #startNonEscaping

 * @throws org.xml.sax.SAXException

 */

public void endNonEscaping() throws org.xml.sax.SAXException {

  m_disableOutputEscapingStates.pop();

}

Location: ToStream.java

Content: 

/** 

 * Makes sure that the namespace URI for the given qualified attribute name is declared.

 * @param ns      the namespace URI

 * @param rawName the qualified name

 * @return returns null if no action is taken, otherwise it returns the prefixused in declaring the namespace.

 * @throws SAXException

 */

protected String ensureAttributesNamespaceIsDeclared(String ns,String localName,String rawName) throws org.xml.sax.SAXException {

  if (ns != null && ns.length() > 0) {

    int index=0;

    String prefixFromRawName=(index=rawName.indexOf(":")) < 0 ? "" : rawName.substring(0,index);

    if (index > 0) {

      String uri=m_prefixMap.lookupNamespace(prefixFromRawName);

      if (uri != null && uri.equals(ns)) {

        return null;

      }

 else {

        this.startPrefixMapping(prefixFromRawName,ns,false);

        this.addAttribute("http://www.w3.org/2000/xmlns/",prefixFromRawName,"xmlns:" + prefixFromRawName,"CDATA",ns,false);

        return prefixFromRawName;

      }

    }

 else {

      String prefix=m_prefixMap.lookupPrefix(ns);

      if (prefix == null) {

        prefix=m_prefixMap.generateNextPrefix();

        this.startPrefixMapping(prefix,ns,false);

        this.addAttribute("http://www.w3.org/2000/xmlns/",prefix,"xmlns:" + prefix,"CDATA",ns,false);

      }

      return prefix;

    }

  }

  return null;

}

Location: ToStream.java

Content: 

/** 

 * Tell if this character can be written without escaping.

 */

protected boolean escapingNotNeeded(char ch){

  final boolean ret;

  if (ch < 127) {

    if (ch >= CharInfo.S_SPACE || (CharInfo.S_LINEFEED == ch || CharInfo.S_CARRIAGERETURN == ch || CharInfo.S_HORIZONAL_TAB == ch))     ret=true;

 else     ret=false;

  }

 else {

    ret=m_encodingInfo.isInEncoding(ch);

  }

  return ret;

}

Location: ToStream.java

Content: 

/** 

 * To fire off the pseudo characters of attributes, as they currently exist. This method should be called everytime an attribute is added, or when an attribute value is changed, or an element is created.

 */

protected void firePseudoAttributes(){

  if (m_tracer != null) {

    try {

      m_writer.flush();

      StringBuffer sb=new StringBuffer();

      int nAttrs=m_attributes.getLength();

      if (nAttrs > 0) {

        java.io.Writer writer=new ToStream.WritertoStringBuffer(sb);

        processAttributes(writer,nAttrs);

      }

      sb.append('>');

      char ch[]=sb.toString().toCharArray();

      m_tracer.fireGenerateEvent(SerializerTrace.EVENTTYPE_OUTPUT_PSEUDO_CHARACTERS,ch,0,ch.length);

    }

 catch (    IOException ioe) {

    }

catch (    SAXException se) {

    }

  }

}

Location: ToStream.java

Content: 

/** 

 * Flush the formatter's result stream.

 * @throws org.xml.sax.SAXException

 */

protected final void flushWriter() throws org.xml.sax.SAXException {

  final java.io.Writer writer=m_writer;

  if (null != writer) {

    try {

      if (writer instanceof WriterToUTF8Buffered) {

        if (m_shouldFlush)         ((WriterToUTF8Buffered)writer).flush();

 else         ((WriterToUTF8Buffered)writer).flushBuffer();

      }

      if (writer instanceof WriterToASCI) {

        if (m_shouldFlush)         writer.flush();

      }

 else {

        writer.flush();

      }

    }

 catch (    IOException ioe) {

      throw new org.xml.sax.SAXException(ioe);

    }

  }

}

Location: ToStream.java

Content: 

/** 

 * Indent at the current element nesting depth.

 * @throws IOException

 */

protected void indent() throws IOException {

  indent(m_elemContext.m_currentElemDepth);

}

Location: ToStream.java

Content: 

/** 

 * This method checks if a given character is between C0 or C1 range of Control characters. This method is added to support Control Characters for XML 1.1 If a given character is TAB (0x09), LF (0x0A) or CR (0x0D), this method return false. Since they are whitespace characters, no special processing is needed.

 * @param ch

 * @return boolean

 */

private static boolean isCharacterInC0orC1Range(char ch){

  if (ch == 0x09 || ch == 0x0A || ch == 0x0D)   return false;

 else   return (ch >= 0x7F && ch <= 0x9F) || (ch >= 0x01 && ch <= 0x1F);

}

Location: ToStream.java

Content: 

/** 

 * Tell if the character escaping should be disabled for the current state.

 * @return true if the character escaping should be disabled.

 */

private boolean isEscapingDisabled(){

  return m_disableOutputEscapingStates.peekOrFalse();

}

Location: ToStream.java

Content: 

/** 

 * This method checks if a given character either NEL (0x85) or LSEP (0x2028) These are new end of line charcters added in XML 1.1. These characters must be written as Numeric Character References (NCR) in XML 1.1 output document.

 * @param ch

 * @return boolean

 */

private static boolean isNELorLSEPCharacter(char ch){

  return (ch == 0x85 || ch == 0x2028);

}

Location: ToStream.java

Content: 

/** 

 * Output the doc type declaration.

 * @param name non-null reference to document type name. NEEDSDOC @paramcloseDecl

 * @throws java.io.IOException

 */

void outputDocTypeDecl(String name,boolean closeDecl) throws SAXException {

  if (m_cdataTagOpen)   closeCDATA();

  try {

    final java.io.Writer writer=m_writer;

    writer.write("<!DOCTYPE ");

    writer.write(name);

    String doctypePublic=getDoctypePublic();

    if (null != doctypePublic) {

      writer.write(" PUBLIC \"");

      writer.write(doctypePublic);

      writer.write('\"');

    }

    String doctypeSystem=getDoctypeSystem();

    if (null != doctypeSystem) {

      if (null == doctypePublic)       writer.write(" SYSTEM \"");

 else       writer.write(" \"");

      writer.write(doctypeSystem);

      if (closeDecl) {

        writer.write("\">");

        writer.write(m_lineSep,0,m_lineSepLen);

        closeDecl=false;

      }

 else       writer.write('\"');

    }

  }

 catch (  IOException e) {

    throw new SAXException(e);

  }

}

Location: ToStream.java

Content: 

/** 

 * Output the doc type declaration.

 * @param name non-null reference to document type name. NEEDSDOC @param value

 * @throws org.xml.sax.SAXException

 */

void outputEntityDecl(String name,String value) throws IOException {

  final java.io.Writer writer=m_writer;

  writer.write("<!ENTITY ");

  writer.write(name);

  writer.write(" \"");

  writer.write(value);

  writer.write("\">");

  writer.write(m_lineSep,0,m_lineSepLen);

}

Location: ToStream.java

Content: 

/** 

 * Output a system-dependent line break.

 * @throws org.xml.sax.SAXException

 */

protected final void outputLineSep() throws IOException {

  m_writer.write(m_lineSep,0,m_lineSepLen);

}

Location: ToStream.java

Content: 

/** 

 * Prints <var>n</var> spaces.

 * @param n Number of spaces to print.

 * @throws org.xml.sax.SAXException if an error occurs when writing.

 */

private void printSpace(int n) throws IOException {

  final java.io.Writer writer=m_writer;

  for (int i=0; i < n; i++) {

    writer.write(' ');

  }

}

Location: ToStream.java

Content: 

/** 

 * Process a dirty character and any preeceding clean characters that were not yet processed.

 * @param chars        array of characters being processed

 * @param end          one (1) beyond the last character in chars to beprocessed

 * @param i            the index of the dirty character

 * @param ch           the character in chars[i]

 * @param lastDirty    the last dirty character previous to i

 * @param fromTextNode true if the characters being processed are from a textnode, false if they are from an attribute value.

 * @return the index of the last character processed

 */

private int processDirty(char[] chars,int end,int i,char ch,int lastDirty,boolean fromTextNode) throws IOException {

  int startClean=lastDirty + 1;

  if (i > startClean) {

    int lengthClean=i - startClean;

    m_writer.write(chars,startClean,lengthClean);

  }

  if (CharInfo.S_LINEFEED == ch && fromTextNode) {

    m_writer.write(m_lineSep,0,m_lineSepLen);

  }

 else {

    startClean=accumDefaultEscape(m_writer,(char)ch,i,chars,end,fromTextNode,false);

    i=startClean - 1;

  }

  return i;

}

Location: ToStream.java

Content: 

private int processLineFeed(final char[] chars,int i,int lastProcessed,final Writer writer) throws IOException {

  if (!m_lineSepUse || (m_lineSepLen == 1 && m_lineSep[0] == CharInfo.S_LINEFEED)) {

  }

 else {

    writeOutCleanChars(chars,i,lastProcessed);

    writer.write(m_lineSep,0,m_lineSepLen);

    lastProcessed=i;

  }

  return lastProcessed;

}

Location: ToStream.java

Content: 

/** 

 * Reset all of the fields owned by ToStream class

 */

private void resetToStream(){

  this.m_cdataStartCalled=false;

  this.m_disableOutputEscapingStates.clear();

  this.m_escaping=true;

  this.m_expandDTDEntities=true;

  this.m_inDoctype=false;

  this.m_ispreserve=false;

  this.m_isprevtext=false;

  this.m_isUTF8=false;

  this.m_lineSep=s_systemLineSep;

  this.m_lineSepLen=s_systemLineSep.length;

  this.m_lineSepUse=true;

  this.m_preserves.clear();

  this.m_shouldFlush=true;

  this.m_spaceBeforeClose=false;

  this.m_startNewLine=false;

  this.m_writer_set_by_user=false;

}

Location: ToStream.java

Content: 

/** 

 * Searches for the list of qname properties with the specified key in the property list. If the key is not found in this property list, the default property list, and its defaults, recursively, are then checked. The method returns <code>null</code> if the property is not found.

 * @param key   the property key.

 * @param props the list of properties to search in.Sets the vector of local-name/URI pairs of the cdata section elements specified in the cdata-section-elements property. This method is essentially a copy of getQNameProperties() from OutputProperties. Eventually this method should go away and a call to setCdataSectionElements(Vector v) should be made directly.

 */

private void setCdataSectionElements(String key,Properties props){

  String s=props.getProperty(key);

  if (null != s) {

    Vector v=new Vector();

    int l=s.length();

    boolean inCurly=false;

    StringBuffer buf=new StringBuffer();

    for (int i=0; i < l; i++) {

      char c=s.charAt(i);

      if (Character.isWhitespace(c)) {

        if (!inCurly) {

          if (buf.length() > 0) {

            addCdataSectionElement(buf.toString(),v);

            buf.setLength(0);

          }

          continue;

        }

      }

 else       if ('{' == c)       inCurly=true;

 else       if ('}' == c)       inCurly=false;

      buf.append(c);

    }

    if (buf.length() > 0) {

      addCdataSectionElement(buf.toString(),v);

      buf.setLength(0);

    }

    setCdataSectionElements(v);

  }

}

Location: ToStream.java

Content: 

/** 

 * Set if the operating systems end-of-line line separator should be used when serializing. If set false NL character (decimal 10) is left alone, otherwise the new-line will be replaced on output with the systems line separator. For example on UNIX this is NL, while on Windows it is two characters, CR NL, where CR is the carriage-return (decimal 13).

 * @param use_sytem_line_break True if an input NL is replaced with theoperating systems end-of-line separator.

 * @return The previously set value of the serializer.

 */

public boolean setLineSepUse(boolean use_sytem_line_break){

  boolean oldValue=m_lineSepUse;

  m_lineSepUse=use_sytem_line_break;

  return oldValue;

}

Location: ToStream.java

Content: 

private void setOutputStreamInternal(OutputStream output,boolean setByUser){

  m_outputStream=output;

  String encoding=getOutputProperty(OutputKeys.ENCODING);

  if (Encodings.DEFAULT_MIME_ENCODING.equalsIgnoreCase(encoding)) {

    setWriterInternal(new WriterToUTF8Buffered(output),false);

  }

 else   if ("WINDOWS-1250".equals(encoding) || "US-ASCII".equals(encoding) || "ASCII".equals(encoding)) {

    setWriterInternal(new WriterToASCI(output),false);

  }

 else   if (encoding != null) {

    Writer osw=null;

    try {

      osw=Encodings.getWriter(output,encoding);

    }

 catch (    UnsupportedEncodingException uee) {

      osw=null;

    }

    if (osw == null) {

      System.out.println("Warning: encoding \"" + encoding + "\" not supported"+ ", using "+ Encodings.DEFAULT_MIME_ENCODING);

      encoding=Encodings.DEFAULT_MIME_ENCODING;

      setEncoding(encoding);

      try {

        osw=Encodings.getWriter(output,encoding);

      }

 catch (      UnsupportedEncodingException e) {

        e.printStackTrace();

      }

    }

    setWriterInternal(osw,false);

  }

 else {

    Writer osw=new OutputStreamWriter(output);

    setWriterInternal(osw,false);

  }

}

Location: ToStream.java

Content: 

private void setWriterInternal(Writer writer,boolean setByUser){

  m_writer_set_by_user=setByUser;

  m_writer=writer;

  if (m_tracer != null) {

    boolean noTracerYet=true;

    Writer w2=m_writer;

    while (w2 instanceof WriterChain) {

      if (w2 instanceof SerializerTraceWriter) {

        noTracerYet=false;

        break;

      }

      w2=((WriterChain)w2).getWriter();

    }

    if (noTracerYet)     m_writer=new SerializerTraceWriter(m_writer,m_tracer);

  }

}

Location: ToStream.java

Content: 

/** 

 * Tell if, based on space preservation constraints and the doIndent property, if an indent should occur.

 * @return True if an indent should occur.

 */

protected boolean shouldIndent(){

  return m_doIndent && (!m_ispreserve && !m_isprevtext) && m_elemContext.m_currentElemDepth > 0;

}

Location: ToStream.java

Content: 

/** 

 * Starts an un-escaping section. All characters printed within an un- escaping section are printed as is, without escaping special characters into entity references. Only XML and HTML serializers need to support this method. <p> The contents of the un-escaping section will be delivered through the regular <tt>characters</tt> event.

 * @throws org.xml.sax.SAXException

 */

public void startNonEscaping() throws org.xml.sax.SAXException {

  m_disableOutputEscapingStates.push(true);

}

Location: ToStream.java

Content: 

/** 

 * Default constructor

 */

public ToStream(){

}

Location: ToStream.java

Content: 

/** 

 * Returns the specified <var>string</var> after substituting <VAR>specials</VAR>, and UTF-16 surrogates for chracter references <CODE>&amp;#xnn</CODE>.

 * @param string   String to convert to XML format.

 * @param encoding CURRENTLY NOT IMPLEMENTED.

 * @throws java.io.IOException

 */

public void writeAttrString(Writer writer,String string,String encoding) throws IOException {

  final int len=string.length();

  if (len > m_attrBuff.length) {

    m_attrBuff=new char[len * 2 + 1];

  }

  string.getChars(0,len,m_attrBuff,0);

  final char[] stringChars=m_attrBuff;

  for (int i=0; i < len; i++) {

    char ch=stringChars[i];

    if (m_charInfo.shouldMapAttrChar(ch)) {

      accumDefaultEscape(writer,ch,i,stringChars,len,false,true);

    }

 else {

      if (0x0 <= ch && ch <= 0x1F) {

switch (ch) {

case CharInfo.S_HORIZONAL_TAB:

          writer.write("&#9;");

        break;

case CharInfo.S_LINEFEED:

      writer.write("&#10;");

    break;

case CharInfo.S_CARRIAGERETURN:

  writer.write("&#13;");

break;

default :

writer.write("&#");

writer.write(Integer.toString(ch));

writer.write(';');

break;

}

}

 else if (ch < 0x7F) {

writer.write(ch);

}

 else if (ch <= 0x9F) {

writer.write("&#");

writer.write(Integer.toString(ch));

writer.write(';');

}

 else if (ch == CharInfo.S_LINE_SEPARATOR) {

writer.write("&#8232;");

}

 else if (m_encodingInfo.isInEncoding(ch)) {

writer.write(ch);

}

 else {

writer.write("&#");

writer.write(Integer.toString(ch));

writer.write(';');

}

}

}

}

Location: ToStream.java

Content: 

/** 

 * Normalize the characters, but don't escape.

 * @param ch                     The characters from the XML document.

 * @param start                  The start position in the array.

 * @param length                 The number of characters to read from thearray.

 * @param isCData                true if a CDATA block should be built aroundthe characters.

 * @param useSystemLineSeparator true if the operating systems end-of-lineseparator should be output rather than a new-line character.

 * @throws IOException

 * @throws org.xml.sax.SAXException

 */

void writeNormalizedChars(char ch[],int start,int length,boolean isCData,boolean useSystemLineSeparator) throws IOException, org.xml.sax.SAXException {

  final java.io.Writer writer=m_writer;

  int end=start + length;

  for (int i=start; i < end; i++) {

    char c=ch[i];

    if (CharInfo.S_LINEFEED == c && useSystemLineSeparator) {

      writer.write(m_lineSep,0,m_lineSepLen);

    }

 else     if (isCData && (!escapingNotNeeded(c))) {

      if (m_cdataTagOpen)       closeCDATA();

      if (Encodings.isHighUTF16Surrogate(c)) {

        writeUTF16Surrogate(c,ch,i,end);

        i++;

      }

 else {

        writer.write("&#");

        String intStr=Integer.toString((int)c);

        writer.write(intStr);

        writer.write(';');

      }

    }

 else     if (isCData && ((i < (end - 2)) && (']' == c) && (']' == ch[i + 1])&& ('>' == ch[i + 2]))) {

      writer.write(CDATA_CONTINUE);

      i+=2;

    }

 else {

      if (escapingNotNeeded(c)) {

        if (isCData && !m_cdataTagOpen) {

          writer.write(CDATA_DELIMITER_OPEN);

          m_cdataTagOpen=true;

        }

        writer.write(c);

      }

 else       if (Encodings.isHighUTF16Surrogate(c)) {

        if (m_cdataTagOpen)         closeCDATA();

        writeUTF16Surrogate(c,ch,i,end);

        i++;

      }

 else {

        if (m_cdataTagOpen)         closeCDATA();

        writer.write("&#");

        String intStr=Integer.toString((int)c);

        writer.write(intStr);

        writer.write(';');

      }

    }

  }

}

Location: ToStream.java

Content: 

private void writeOutCleanChars(final char[] chars,int i,int lastProcessed) throws IOException {

  int startClean;

  startClean=lastProcessed + 1;

  if (startClean < i) {

    int lengthClean=i - startClean;

    m_writer.write(chars,startClean,lengthClean);

  }

}

Location: ToStream.java

Content: 

/** 

 * Once a surrogate has been detected, write out the pair of characters if it is in the encoding, or if there is no encoding, otherwise write out an entity reference of the value of the unicode code point of the character represented by the high/low surrogate pair. <p> An exception is thrown if there is no low surrogate in the pair, because the array ends unexpectely, or if the low char is there but its value is such that it is not a low surrogate.

 * @param c   the first (high) part of the surrogate, which must be confirmedbefore calling this method.

 * @param ch  Character array.

 * @param i   position Where the surrogate was detected.

 * @param end The end index of the significant characters.

 * @return 0 if the pair of characters was written out as-is, the unicode codepoint of the character represented by the surrogate pair if an entity reference with that value was written out.

 * @throws IOException

 * @throws org.xml.sax.SAXException if invalid UTF-16 surrogate detected.

 */

protected int writeUTF16Surrogate(char c,char ch[],int i,int end) throws IOException {

  int codePoint=0;

  if (i + 1 >= end) {

    throw new IOException(Utils.messages.createMessage(MsgKey.ER_INVALID_UTF16_SURROGATE,new Object[]{Integer.toHexString((int)c)}));

  }

  final char high=c;

  final char low=ch[i + 1];

  if (!Encodings.isLowUTF16Surrogate(low)) {

    throw new IOException(Utils.messages.createMessage(MsgKey.ER_INVALID_UTF16_SURROGATE,new Object[]{Integer.toHexString((int)c) + " " + Integer.toHexString(low)}));

  }

  final java.io.Writer writer=m_writer;

  if (m_encodingInfo.isInEncoding(c,low)) {

    writer.write(ch,i,2);

  }

 else {

    final String encoding=getEncoding();

    if (encoding != null) {

      codePoint=Encodings.toCodePoint(high,low);

      writer.write('&');

      writer.write('#');

      writer.write(Integer.toString(codePoint));

      writer.write(';');

    }

 else {

      writer.write(ch,i,2);

    }

  }

  return codePoint;

}

