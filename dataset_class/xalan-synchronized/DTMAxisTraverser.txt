Location: DTMAxisTraverser.java

Content: 

/** 

 * By the nature of the stateless traversal, the context node can not be returned or the iteration will go into an infinate loop. So to traverse an axis, the first function must be used to get the first node. <p> This method needs to be overloaded only by those axis that process the self node. <\p>

 * @param context The context node of this traversal. This is the point that thetraversal starts from.

 * @return the first node in the traversal.

 */

public int first(int context){

  return next(context,context);

}

Location: DTMAxisTraverser.java

Content: 

/** 

 * By the nature of the stateless traversal, the context node can not be returned or the iteration will go into an infinate loop. So to traverse an axis, the first function must be used to get the first node. <p> This method needs to be overloaded only by those axis that process the self node. <\p>

 * @param context        The context node of this traversal. This is the pointof origin for the traversal -- its "root node" or starting point.

 * @param extendedTypeID The extended type ID that must match.

 * @return the first node in the traversal.

 */

public int first(int context,int extendedTypeID){

  return next(context,context,extendedTypeID);

}

Location: DTMAxisTraverser.java

Content: 

/** 

 * Traverse to the next node after the current node.

 * @param context The context node of this traversal. This is the point oforigin for the traversal -- its "root node" or starting point.

 * @param current The current node of the traversal. This is the last knownlocation in the traversal, typically the node-handle returned by the previous traversal step. For the first traversal step, context should be set equal to current. Note that in order to test whether context is in the set, you must use the first() method instead.

 * @return the next node in the iteration, or DTM.NULL.

 * @see #first(int)

 */

public abstract int next(int context,int current);

Location: DTMAxisTraverser.java

Content: 

/** 

 * Traverse to the next node after the current node that is matched by the extended type ID.

 * @param context        The context node of this traversal. This is the pointof origin for the traversal -- its "root node" or starting point.

 * @param current        The current node of the traversal. This is the lastknown location in the traversal, typically the node-handle returned by the previous traversal step. For the first traversal step, context should be set equal to current. Note that in order to test whether context is in the set, you must use the first() method instead.

 * @param extendedTypeID The extended type ID that must match.

 * @return the next node in the iteration, or DTM.NULL.

 * @see #first(int,int)

 */

public abstract int next(int context,int current,int extendedTypeID);

