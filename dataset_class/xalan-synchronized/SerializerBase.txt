Location: SerializerBase.java

Content: 

/** 

 * Adds the given attribute to the set of attributes, even if there is no currently open element. This is useful if a SAX startPrefixMapping() should need to add an attribute before the element name is seen.

 * @param uri          the URI of the attribute

 * @param localName    the local name of the attribute

 * @param rawName      the qualified name of the attribute

 * @param type         the type of the attribute (probably CDATA)

 * @param value        the value of the attribute

 * @param XSLAttribute true if this attribute is coming from an xsl:attributeelement

 * @return true if the attribute was added, false if an existing value wasreplaced.

 */

public boolean addAttributeAlways(String uri,String localName,String rawName,String type,String value,boolean XSLAttribute){

  boolean was_added;

  int index;

  if (localName == null || uri == null || uri.length() == 0)   index=m_attributes.getIndex(rawName);

 else {

    index=m_attributes.getIndex(uri,localName);

  }

  if (index >= 0) {

    m_attributes.setValue(index,value);

    was_added=false;

  }

 else {

    m_attributes.addAttribute(uri,localName,rawName,type,value);

    was_added=true;

  }

  return was_added;

}

Location: SerializerBase.java

Content: 

private void addCDATAElement(String uri,String localName){

  if (m_CdataElems == null) {

    m_CdataElems=new java.util.Hashtable();

  }

  java.util.Hashtable h=(java.util.Hashtable)m_CdataElems.get(localName);

  if (h == null) {

    h=new java.util.Hashtable();

    m_CdataElems.put(localName,h);

  }

  h.put(uri,uri);

}

Location: SerializerBase.java

Content: 

/** 

 * Return true if nothing has been sent to this result tree yet. <p> This is not a public API.

 * @xsl.usage internal

 */

public boolean documentIsEmpty(){

  return m_docIsEmpty && (m_elemContext.m_currentElemDepth == 0);

}

Location: SerializerBase.java

Content: 

/** 

 * Report the CDATA trace event

 * @param chars  content of CDATA

 * @param start  starting index of characters to output

 * @param length number of characters to output

 */

protected void fireCDATAEvent(char[] chars,int start,int length) throws org.xml.sax.SAXException {

  if (m_tracer != null) {

    flushMyWriter();

    m_tracer.fireGenerateEvent(SerializerTrace.EVENTTYPE_CDATA,chars,start,length);

  }

}

Location: SerializerBase.java

Content: 

/** 

 * Report the characters trace event

 * @param chars  content of characters

 * @param start  starting index of characters to output

 * @param length number of characters to output

 */

protected void fireCharEvent(char[] chars,int start,int length) throws org.xml.sax.SAXException {

  if (m_tracer != null) {

    flushMyWriter();

    m_tracer.fireGenerateEvent(SerializerTrace.EVENTTYPE_CHARACTERS,chars,start,length);

  }

}

Location: SerializerBase.java

Content: 

/** 

 * Report the comment trace event

 * @param chars  content of comment

 * @param start  starting index of comment to output

 * @param length number of characters to output

 */

protected void fireCommentEvent(char[] chars,int start,int length) throws org.xml.sax.SAXException {

  if (m_tracer != null) {

    flushMyWriter();

    m_tracer.fireGenerateEvent(SerializerTrace.EVENTTYPE_COMMENT,new String(chars,start,length));

  }

}

Location: SerializerBase.java

Content: 

/** 

 * To fire off end document trace event

 */

protected void fireEndDoc() throws org.xml.sax.SAXException {

  if (m_tracer != null) {

    flushMyWriter();

    m_tracer.fireGenerateEvent(SerializerTrace.EVENTTYPE_ENDDOCUMENT);

  }

}

Location: SerializerBase.java

Content: 

/** 

 * To fire off the end element trace event

 * @param name Name of element

 */

protected void fireEndElem(String name) throws org.xml.sax.SAXException {

  if (m_tracer != null) {

    flushMyWriter();

    m_tracer.fireGenerateEvent(SerializerTrace.EVENTTYPE_ENDELEMENT,name,(Attributes)null);

  }

}

Location: SerializerBase.java

Content: 

/** 

 * To fire off end entity trace event

 * @param name Name of entity

 */

public void fireEndEntity(String name) throws org.xml.sax.SAXException {

  if (m_tracer != null)   flushMyWriter();

}

Location: SerializerBase.java

Content: 

/** 

 * To fire off the entity reference trace event

 * @param name Name of entity reference

 */

protected void fireEntityReference(String name) throws org.xml.sax.SAXException {

  if (m_tracer != null) {

    flushMyWriter();

    m_tracer.fireGenerateEvent(SerializerTrace.EVENTTYPE_ENTITYREF,name,(Attributes)null);

  }

}

Location: SerializerBase.java

Content: 

/** 

 * To fire off the PI trace event

 * @param name Name of PI

 */

protected void fireEscapingEvent(String name,String data) throws org.xml.sax.SAXException {

  if (m_tracer != null) {

    flushMyWriter();

    m_tracer.fireGenerateEvent(SerializerTrace.EVENTTYPE_PI,name,data);

  }

}

Location: SerializerBase.java

Content: 

/** 

 * To fire off start document trace event

 */

protected void fireStartDoc() throws org.xml.sax.SAXException {

  if (m_tracer != null) {

    flushMyWriter();

    m_tracer.fireGenerateEvent(SerializerTrace.EVENTTYPE_STARTDOCUMENT);

  }

}

Location: SerializerBase.java

Content: 

/** 

 * Report the start element trace event. This trace method needs to be called just before the attributes are cleared.

 * @param elemName the qualified name of the element

 */

protected void fireStartElem(String elemName) throws org.xml.sax.SAXException {

  if (m_tracer != null) {

    flushMyWriter();

    m_tracer.fireGenerateEvent(SerializerTrace.EVENTTYPE_STARTELEMENT,elemName,m_attributes);

  }

}

Location: SerializerBase.java

Content: 

/** 

 * To fire off start entity trace event

 * @param name Name of entity

 */

protected void fireStartEntity(String name) throws org.xml.sax.SAXException {

  if (m_tracer != null) {

    flushMyWriter();

    m_tracer.fireGenerateEvent(SerializerTrace.EVENTTYPE_ENTITYREF,name);

  }

}

Location: SerializerBase.java

Content: 

/** 

 * This method is only used internally when flushing the writer from the various fire...() trace events. Due to the writer being wrapped with SerializerTraceWriter it may cause the flush of these trace events: EVENTTYPE_OUTPUT_PSEUDO_CHARACTERS EVENTTYPE_OUTPUT_CHARACTERS which trace the output written to the output stream.

 */

private void flushMyWriter(){

  if (m_writer != null) {

    try {

      m_writer.flush();

    }

 catch (    IOException ioe) {

    }

  }

}

Location: SerializerBase.java

Content: 

/** 

 * Before this call m_elementContext.m_elementURI is null, which means it is not yet known. After this call it is non-null, but possibly "" meaning that it is in the default namespace.

 * @return The URI of the element, never null, but possibly "".

 */

private String getElementURI(){

  String uri=null;

  String prefix=getPrefixPart(m_elemContext.m_elementName);

  if (prefix == null) {

    uri=m_prefixMap.lookupNamespace("");

  }

 else {

    uri=m_prefixMap.lookupNamespace(prefix);

  }

  if (uri == null) {

    uri=EMPTYSTRING;

  }

  return uri;

}

Location: SerializerBase.java

Content: 

/** 

 * Get the first char of the local name

 * @param name Either a local name, or a local name preceeded by a uri enclosedin curly braces.

 */

static char getFirstCharLocName(String name){

  final char first;

  int i=name.indexOf('}');

  if (i < 0)   first=name.charAt(0);

 else   first=name.charAt(i + 1);

  return first;

}

Location: SerializerBase.java

Content: 

/** 

 * Returns the local name of a qualified name. If the name has no prefix, then it works as the identity (SAX2).

 * @param qname the qualified name

 * @return the name, but excluding any prefix and colon.

 */

protected static String getLocalName(String qname){

  final int col=qname.lastIndexOf(':');

  return (col > 0) ? qname.substring(col + 1) : qname;

}

Location: SerializerBase.java

Content: 

Set getOutputPropDefaultKeys(){

  return m_OutputPropsDefault.keySet();

}

Location: SerializerBase.java

Content: 

/** 

 * Get the value of an output property, not the default value. If there is a default value, but no non-default value this method will return null. <p>

 */

public String getOutputPropertyNonDefault(String name){

  return getProp(name,false);

}

Location: SerializerBase.java

Content: 

Set getOutputPropKeys(){

  return m_OutputProps.keySet();

}

Location: SerializerBase.java

Content: 

private String getProp(String name,boolean defaultVal){

  if (m_OutputProps == null) {

    m_OutputProps=new HashMap();

    m_OutputPropsDefault=new HashMap();

  }

  String val;

  if (defaultVal)   val=(String)m_OutputPropsDefault.get(name);

 else   val=(String)m_OutputProps.get(name);

  return val;

}

Location: SerializerBase.java

Content: 

/** 

 * Initialize global variables

 */

protected void initCDATA(){

}

Location: SerializerBase.java

Content: 

void initCdataElems(String s){

  if (s != null) {

    int max=s.length();

    boolean inCurly=false;

    boolean foundURI=false;

    StringBuffer buf=new StringBuffer();

    String uri=null;

    String localName=null;

    for (int i=0; i < max; i++) {

      char c=s.charAt(i);

      if (Character.isWhitespace(c)) {

        if (!inCurly) {

          if (buf.length() > 0) {

            localName=buf.toString();

            if (!foundURI)             uri="";

            addCDATAElement(uri,localName);

            buf.setLength(0);

            foundURI=false;

          }

          continue;

        }

 else         buf.append(c);

      }

 else       if ('{' == c)       inCurly=true;

 else       if ('}' == c) {

        foundURI=true;

        uri=buf.toString();

        buf.setLength(0);

        inCurly=false;

      }

 else {

        buf.append(c);

      }

    }

    if (buf.length() > 0) {

      localName=buf.toString();

      if (!foundURI)       uri="";

      addCDATAElement(uri,localName);

    }

  }

}

Location: SerializerBase.java

Content: 

/** 

 * Returns true if the serializer is used for temporary output rather than final output. This concept is made clear in the XSLT 2.0 draft.

 */

final boolean inTemporaryOutputState(){

  return (getEncoding() == null);

}

Location: SerializerBase.java

Content: 

/** 

 * Return true if the current element in m_elemContext is a CDATA section. CDATA sections are specified in the <xsl:output> attribute cdata-section-names or in the JAXP equivalent property. In any case the format of the value of such a property is: <pre> "{uri1}localName1 {uri2}localName2 . . . " </pre> <p> This method is not a public API, but is only used internally by the serializer.

 */

protected boolean isCdataSection(){

  boolean b=false;

  if (null != m_StringOfCDATASections) {

    if (m_elemContext.m_elementLocalName == null) {

      String localName=getLocalName(m_elemContext.m_elementName);

      m_elemContext.m_elementLocalName=localName;

    }

    if (m_elemContext.m_elementURI == null) {

      m_elemContext.m_elementURI=getElementURI();

    }

 else     if (m_elemContext.m_elementURI.length() == 0) {

      if (m_elemContext.m_elementName == null) {

        m_elemContext.m_elementName=m_elemContext.m_elementLocalName;

      }

 else       if (m_elemContext.m_elementLocalName.length() < m_elemContext.m_elementName.length()) {

        m_elemContext.m_elementURI=getElementURI();

      }

    }

    java.util.Hashtable h=(java.util.Hashtable)m_CdataElems.get(m_elemContext.m_elementLocalName);

    if (h != null) {

      Object obj=h.get(m_elemContext.m_elementURI);

      if (obj != null)       b=true;

    }

  }

  return b;

}

Location: SerializerBase.java

Content: 

/** 

 * If at runtime, when the qname of the attribute is known, another prefix is specified for the attribute, then we can patch or hack the name with this method. For a qname of the form "ns?:otherprefix:name", this function patches the qname by simply ignoring "otherprefix". TODO: This method is a HACK! We do not have access to the XML file, it sometimes generates a NS prefix of the form "ns?" for an attribute.

 */

protected String patchName(String qname){

  final int lastColon=qname.lastIndexOf(':');

  if (lastColon > 0) {

    final int firstColon=qname.indexOf(':');

    final String prefix=qname.substring(0,firstColon);

    final String localName=qname.substring(lastColon + 1);

    final String uri=m_prefixMap.lookupNamespace(prefix);

    if (uri != null && uri.length() == 0) {

      return localName;

    }

 else     if (firstColon != lastColon) {

      return prefix + ':' + localName;

    }

  }

  return qname;

}

Location: SerializerBase.java

Content: 

/** 

 * Reset all of the fields owned by SerializerBase

 */

private void resetSerializerBase(){

  this.m_attributes.clear();

  this.m_CdataElems=null;

  this.m_cdataTagOpen=false;

  this.m_docIsEmpty=true;

  this.m_doctypePublic=null;

  this.m_doctypeSystem=null;

  this.m_doIndent=false;

  this.m_elemContext=new ElemContext();

  this.m_indentAmount=0;

  this.m_inEntityRef=false;

  this.m_inExternalDTD=false;

  this.m_mediatype=null;

  this.m_needToCallStartDocument=true;

  this.m_needToOutputDocTypeDecl=false;

  if (m_OutputProps != null)   this.m_OutputProps.clear();

  if (m_OutputPropsDefault != null)   this.m_OutputPropsDefault.clear();

  if (this.m_prefixMap != null)   this.m_prefixMap.reset();

  this.m_shouldNotWriteXMLHeader=false;

  this.m_sourceLocator=null;

  this.m_standalone=null;

  this.m_standaloneWasSpecified=false;

  this.m_StringOfCDATASections=null;

  this.m_tracer=null;

  this.m_transformer=null;

  this.m_version=null;

}

Location: SerializerBase.java

Content: 

SerializerBase(){

  return;

}

Location: SerializerBase.java

Content: 

/** 

 * @param name       The name of the property, e.g. "{http://myprop}indent-tabs"or "indent".

 * @param val        The value of the property, e.g. "4"

 * @param defaultVal true if this is a default value being set for the propertyas opposed to a user define on, set say explicitly in the stylesheet or via JAXP

 */

void setProp(String name,String val,boolean defaultVal){

  if (m_OutputProps == null) {

    m_OutputProps=new HashMap();

    m_OutputPropsDefault=new HashMap();

  }

  if (defaultVal)   m_OutputPropsDefault.put(name,val);

 else {

    if (OutputKeys.CDATA_SECTION_ELEMENTS.equals(name) && val != null) {

      initCdataElems(val);

      String oldVal=(String)m_OutputProps.get(name);

      String newVal;

      if (oldVal == null)       newVal=oldVal + ' ' + val;

 else       newVal=val;

      m_OutputProps.put(name,newVal);

    }

 else {

      m_OutputProps.put(name,val);

    }

  }

}

Location: SerializerBase.java

Content: 

/** 

 * Sets the XSL standalone attribute, but does not remember if this is a default or explicite setting.

 * @param standalone "yes" | "no"

 */

protected void setStandaloneInternal(String standalone){

  if ("yes".equals(standalone))   m_standalone="yes";

 else   m_standalone="no";

}

