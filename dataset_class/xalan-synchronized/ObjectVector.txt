Location: ObjectVector.java

Content: 

/** 

 * Append several Object values onto the vector.

 * @param value Object to add to the list

 */

public final void addElements(Object value,int numberOfElements){

  if ((m_firstFree + numberOfElements) >= m_mapSize) {

    m_mapSize+=(m_blocksize + numberOfElements);

    Object newMap[]=new Object[m_mapSize];

    System.arraycopy(m_map,0,newMap,0,m_firstFree + 1);

    m_map=newMap;

  }

  for (int i=0; i < numberOfElements; i++) {

    m_map[m_firstFree]=value;

    m_firstFree++;

  }

}

Location: ObjectVector.java

Content: 

/** 

 * Append an object onto the vector.

 * @param value Object to add to the list

 */

public final void addElement(Object value){

  if ((m_firstFree + 1) >= m_mapSize) {

    m_mapSize+=m_blocksize;

    Object newMap[]=new Object[m_mapSize];

    System.arraycopy(m_map,0,newMap,0,m_firstFree + 1);

    m_map=newMap;

  }

  m_map[m_firstFree]=value;

  m_firstFree++;

}

Location: ObjectVector.java

Content: 

/** 

 * Tell if the table contains the given Object.

 * @param s object to look for

 * @return true if the object is in the list

 */

public final boolean contains(Object s){

  for (int i=0; i < m_firstFree; i++) {

    if (m_map[i] == s)     return true;

  }

  return false;

}

Location: ObjectVector.java

Content: 

/** 

 * Searches for the first occurence of the given argument, beginning the search at index, and testing for equality using the equals method.

 * @param elem object to look for

 * @return the index of the first occurrence of the object argument in thisvector at position index or later in the vector; returns -1 if the object is not found.

 */

public final int indexOf(Object elem){

  for (int i=0; i < m_firstFree; i++) {

    if (m_map[i] == elem)     return i;

  }

  return java.lang.Integer.MIN_VALUE;

}

Location: ObjectVector.java

Content: 

/** 

 * Searches for the first occurence of the given argument, beginning the search at index, and testing for equality using the equals method.

 * @param elem  object to look for

 * @param index Index of where to begin search

 * @return the index of the first occurrence of the object argument in thisvector at position index or later in the vector; returns -1 if the object is not found.

 */

public final int indexOf(Object elem,int index){

  for (int i=index; i < m_firstFree; i++) {

    if (m_map[i] == elem)     return i;

  }

  return java.lang.Integer.MIN_VALUE;

}

Location: ObjectVector.java

Content: 

/** 

 * Inserts the specified object in this vector at the specified index. Each component in this vector with an index greater or equal to the specified index is shifted upward to have an index one greater than the value it had previously.

 * @param value Object to insert

 * @param at    Index of where to insert

 */

public final void insertElementAt(Object value,int at){

  if ((m_firstFree + 1) >= m_mapSize) {

    m_mapSize+=m_blocksize;

    Object newMap[]=new Object[m_mapSize];

    System.arraycopy(m_map,0,newMap,0,m_firstFree + 1);

    m_map=newMap;

  }

  if (at <= (m_firstFree - 1)) {

    System.arraycopy(m_map,at,m_map,at + 1,m_firstFree - at);

  }

  m_map[at]=value;

  m_firstFree++;

}

Location: ObjectVector.java

Content: 

/** 

 * Searches for the first occurence of the given argument, beginning the search at index, and testing for equality using the equals method.

 * @param elem Object to look for

 * @return the index of the first occurrence of the object argument in thisvector at position index or later in the vector; returns -1 if the object is not found.

 */

public final int lastIndexOf(Object elem){

  for (int i=(m_firstFree - 1); i >= 0; i--) {

    if (m_map[i] == elem)     return i;

  }

  return java.lang.Integer.MIN_VALUE;

}

Location: ObjectVector.java

Content: 

/** 

 * Default constructor. Note that the default block size is very small, for small lists.

 */

public ObjectVector(){

  m_blocksize=32;

  m_mapSize=m_blocksize;

  m_map=new Object[m_blocksize];

}

Location: ObjectVector.java

Content: 

/** 

 * Construct a IntVector, using the given block size.

 * @param blocksize Size of block to allocate

 */

public ObjectVector(int blocksize){

  m_blocksize=blocksize;

  m_mapSize=blocksize;

  m_map=new Object[blocksize];

}

Location: ObjectVector.java

Content: 

/** 

 * Construct a IntVector, using the given block size.

 * @param blocksize Size of block to allocate

 */

public ObjectVector(int blocksize,int increaseSize){

  m_blocksize=increaseSize;

  m_mapSize=blocksize;

  m_map=new Object[blocksize];

}

Location: ObjectVector.java

Content: 

/** 

 * Copy constructor for ObjectVector

 * @param v Existing ObjectVector to copy

 */

public ObjectVector(ObjectVector v){

  m_map=new Object[v.m_mapSize];

  m_mapSize=v.m_mapSize;

  m_firstFree=v.m_firstFree;

  m_blocksize=v.m_blocksize;

  System.arraycopy(v.m_map,0,m_map,0,m_firstFree);

}

Location: ObjectVector.java

Content: 

/** 

 * Removes the first occurrence of the argument from this vector. If the object is found in this vector, each component in the vector with an index greater or equal to the object's index is shifted downward to have an index one smaller than the value it had previously.

 * @param s Object to remove from array

 * @return True if the object was removed, false if it was not found

 */

public final boolean removeElement(Object s){

  for (int i=0; i < m_firstFree; i++) {

    if (m_map[i] == s) {

      if ((i + 1) < m_firstFree)       System.arraycopy(m_map,i + 1,m_map,i - 1,m_firstFree - i);

 else       m_map[i]=null;

      m_firstFree--;

      return true;

    }

  }

  return false;

}

Location: ObjectVector.java

Content: 

/** 

 * Sets the component at the specified index of this vector to be the specified object. The previous component at that position is discarded. The index must be a value greater than or equal to 0 and less than the current size of the vector.

 * @param value object to set

 * @param index Index of where to set the object

 */

public final void setElementAt(Object value,int index){

  m_map[index]=value;

}

