Location: DOM3TreeWalker.java

Content: 

/** 

 * Applies a filter on the node to serialize

 * @param node The Node to serialize

 * @return True if the node is to be serialized else false if the node is to berejected or skipped.

 */

protected boolean applyFilter(Node node,int nodeType){

  if (fFilter != null && (fWhatToShowFilter & nodeType) != 0) {

    short code=fFilter.acceptNode(node);

switch (code) {

case NodeFilter.FILTER_REJECT:

case NodeFilter.FILTER_SKIP:

      return false;

default :

  }

}

return true;

}

Location: DOM3TreeWalker.java

Content: 

/** 

 * If the configuration parameter "namespaces" is set to true, this methods checks if an entity whose replacement text contains unbound namespace prefixes is referenced in a location where there are no bindings for the namespace prefixes and if so raises a LSException with the error-type "unbound-prefix-in-entity-reference"

 * @param Node, The EntityReference nodes whose children are to be checked

 */

protected void checkUnboundPrefixInEntRef(Node node){

  Node child, next;

  for (child=node.getFirstChild(); child != null; child=next) {

    next=child.getNextSibling();

    if (child.getNodeType() == Node.ELEMENT_NODE) {

      String prefix=child.getPrefix();

      if (prefix != null && fNSBinder.getURI(prefix) == null) {

        String msg=Utils.messages.createMessage(MsgKey.ER_ELEM_UNBOUND_PREFIX_IN_ENTREF,new Object[]{node.getNodeName(),child.getNodeName(),prefix});

        if (fErrorHandler != null) {

          fErrorHandler.handleError(new DOMErrorImpl(DOMError.SEVERITY_FATAL_ERROR,msg,MsgKey.ER_ELEM_UNBOUND_PREFIX_IN_ENTREF,null,null,null));

        }

      }

      NamedNodeMap attrs=child.getAttributes();

      for (int i=0; i < attrs.getLength(); i++) {

        String attrPrefix=attrs.item(i).getPrefix();

        if (attrPrefix != null && fNSBinder.getURI(attrPrefix) == null) {

          String msg=Utils.messages.createMessage(MsgKey.ER_ATTR_UNBOUND_PREFIX_IN_ENTREF,new Object[]{node.getNodeName(),child.getNodeName(),attrs.item(i)});

          if (fErrorHandler != null) {

            fErrorHandler.handleError(new DOMErrorImpl(DOMError.SEVERITY_FATAL_ERROR,msg,MsgKey.ER_ATTR_UNBOUND_PREFIX_IN_ENTREF,null,null,null));

          }

        }

      }

    }

    if (child.hasChildNodes()) {

      checkUnboundPrefixInEntRef(child);

    }

  }

}

Location: DOM3TreeWalker.java

Content: 

/** 

 * Constructor.

 * @param contentHandler serialHandler The implemention of theSerializationHandler interface

 */

DOM3TreeWalker(SerializationHandler serialHandler,DOMErrorHandler errHandler,LSSerializerFilter filter,String newLine){

  fSerializer=serialHandler;

  fErrorHandler=errHandler;

  fFilter=filter;

  fLexicalHandler=null;

  fNewLine=newLine;

  fNSBinder=new NamespaceSupport();

  fLocalNSBinder=new NamespaceSupport();

  fDOMConfigProperties=fSerializer.getOutputFormat();

  fSerializer.setDocumentLocator(fLocator);

  initProperties(fDOMConfigProperties);

  try {

    fLocator.setSystemId(System.getProperty("user.dir") + File.separator + "dummy.xsl");

  }

 catch (  SecurityException se) {

  }

}

Location: DOM3TreeWalker.java

Content: 

/** 

 * Fixes an element's namespace

 * @param Node, The element node, whose namespace is to be fixed

 */

protected void fixupElementNS(Node node) throws SAXException {

  String namespaceURI=((Element)node).getNamespaceURI();

  String prefix=((Element)node).getPrefix();

  String localName=((Element)node).getLocalName();

  if (namespaceURI != null) {

    prefix=prefix == null ? "" : prefix;

    String inScopeNamespaceURI=fNSBinder.getURI(prefix);

    if ((inScopeNamespaceURI != null && inScopeNamespaceURI.equals(namespaceURI))) {

    }

 else {

      if ((fFeatures & NAMESPACEDECLS) != 0) {

        if ("".equals(prefix) || "".equals(namespaceURI)) {

          ((Element)node).setAttributeNS(XMLNS_URI,XMLNS_PREFIX,namespaceURI);

        }

 else {

          ((Element)node).setAttributeNS(XMLNS_URI,XMLNS_PREFIX + ":" + prefix,namespaceURI);

        }

      }

      fLocalNSBinder.declarePrefix(prefix,namespaceURI);

      fNSBinder.declarePrefix(prefix,namespaceURI);

    }

  }

 else {

    if (localName == null || "".equals(localName)) {

      String msg=Utils.messages.createMessage(MsgKey.ER_NULL_LOCAL_ELEMENT_NAME,new Object[]{node.getNodeName()});

      if (fErrorHandler != null) {

        fErrorHandler.handleError(new DOMErrorImpl(DOMError.SEVERITY_ERROR,msg,MsgKey.ER_NULL_LOCAL_ELEMENT_NAME,null,null,null));

      }

    }

 else {

      namespaceURI=fNSBinder.getURI("");

      if (namespaceURI != null && namespaceURI.length() > 0) {

        ((Element)node).setAttributeNS(XMLNS_URI,XMLNS_PREFIX,"");

        fLocalNSBinder.declarePrefix("","");

        fNSBinder.declarePrefix("","");

      }

    }

  }

}

Location: DOM3TreeWalker.java

Content: 

/** 

 * Initializes fFeatures based on the DOMConfiguration Parameters set.

 * @param properties DOMConfiguraiton properties that were set and which are tobe used while serializing the DOM.

 */

protected void initProperties(Properties properties){

  for (Enumeration keys=properties.keys(); keys.hasMoreElements(); ) {

    final String key=(String)keys.nextElement();

    final Object iobj=s_propKeys.get(key);

    if (iobj != null) {

      if (iobj instanceof Integer) {

        final int BITFLAG=((Integer)iobj).intValue();

        if ((properties.getProperty(key).endsWith("yes"))) {

          fFeatures=fFeatures | BITFLAG;

        }

 else {

          fFeatures=fFeatures & ~BITFLAG;

        }

      }

 else {

        if ((DOMConstants.S_DOM3_PROPERTIES_NS + DOMConstants.DOM_FORMAT_PRETTY_PRINT).equals(key)) {

          if ((properties.getProperty(key).endsWith("yes"))) {

            fSerializer.setIndent(true);

            fSerializer.setIndentAmount(3);

          }

 else {

            fSerializer.setIndent(false);

          }

        }

 else         if ((DOMConstants.S_XSL_OUTPUT_OMIT_XML_DECL).equals(key)) {

          if ((properties.getProperty(key).endsWith("yes"))) {

            fSerializer.setOmitXMLDeclaration(true);

          }

 else {

            fSerializer.setOmitXMLDeclaration(false);

          }

        }

 else         if ((DOMConstants.S_XERCES_PROPERTIES_NS + DOMConstants.S_XML_VERSION).equals(key)) {

          String version=properties.getProperty(key);

          if ("1.1".equals(version)) {

            fIsXMLVersion11=true;

            fSerializer.setVersion(version);

          }

 else {

            fSerializer.setVersion("1.0");

          }

        }

 else         if ((DOMConstants.S_XSL_OUTPUT_ENCODING).equals(key)) {

          String encoding=properties.getProperty(key);

          if (encoding != null) {

            fSerializer.setEncoding(encoding);

          }

        }

 else         if ((DOMConstants.S_XERCES_PROPERTIES_NS + DOMConstants.DOM_ENTITIES).equals(key)) {

          if ((properties.getProperty(key).endsWith("yes"))) {

            fSerializer.setDTDEntityExpansion(false);

          }

 else {

            fSerializer.setDTDEntityExpansion(true);

          }

        }

 else {

        }

      }

    }

  }

  if (fNewLine != null) {

    fSerializer.setOutputProperty(OutputPropertiesFactory.S_KEY_LINE_SEPARATOR,fNewLine);

  }

}

Location: DOM3TreeWalker.java

Content: 

/** 

 * Checks if an attr node is well-formed, by checking it's Name and value for well-formedness.

 * @param data The contents of the comment node

 * @return a boolean indiacating if the comment is well-formed or not.

 */

protected void isAttributeWellFormed(Node node){

  boolean isNameWF=false;

  if ((fFeatures & NAMESPACES) != 0) {

    isNameWF=isValidQName(node.getPrefix(),node.getLocalName(),fIsXMLVersion11);

  }

 else {

    isNameWF=isXMLName(node.getNodeName(),fIsXMLVersion11);

  }

  if (!isNameWF) {

    String msg=Utils.messages.createMessage(MsgKey.ER_WF_INVALID_CHARACTER_IN_NODE_NAME,new Object[]{"Attr",node.getNodeName()});

    if (fErrorHandler != null) {

      fErrorHandler.handleError(new DOMErrorImpl(DOMError.SEVERITY_FATAL_ERROR,msg,MsgKey.ER_WF_INVALID_CHARACTER_IN_NODE_NAME,null,null,null));

    }

  }

  String value=node.getNodeValue();

  if (value.indexOf('<') >= 0) {

    String msg=Utils.messages.createMessage(MsgKey.ER_WF_LT_IN_ATTVAL,new Object[]{((Attr)node).getOwnerElement().getNodeName(),node.getNodeName()});

    if (fErrorHandler != null) {

      fErrorHandler.handleError(new DOMErrorImpl(DOMError.SEVERITY_FATAL_ERROR,msg,MsgKey.ER_WF_LT_IN_ATTVAL,null,null,null));

    }

  }

  NodeList children=node.getChildNodes();

  for (int i=0; i < children.getLength(); i++) {

    Node child=children.item(i);

    if (child == null) {

      continue;

    }

switch (child.getNodeType()) {

case Node.TEXT_NODE:

      isTextWellFormed((Text)child);

    break;

case Node.ENTITY_REFERENCE_NODE:

  isEntityReferneceWellFormed((EntityReference)child);

break;

default :

}

}

}

Location: DOM3TreeWalker.java

Content: 

/** 

 * Checks if an CDATASection node is well-formed, by checking it's data for well-formedness. Note that the presence of a CDATA termination mark in the contents of a CDATASection is handled by the parameter spli-cdata-sections

 * @param data The contents of the comment node

 */

protected void isCDATASectionWellFormed(CDATASection node){

  Character invalidChar=isWFXMLChar(node.getData());

  if (invalidChar != null) {

    String msg=Utils.messages.createMessage(MsgKey.ER_WF_INVALID_CHARACTER_IN_CDATA,new Object[]{Integer.toHexString(Character.getNumericValue(invalidChar.charValue()))});

    if (fErrorHandler != null) {

      fErrorHandler.handleError(new DOMErrorImpl(DOMError.SEVERITY_FATAL_ERROR,msg,MsgKey.ER_WF_INVALID_CHARACTER,null,null,null));

    }

  }

}

Location: DOM3TreeWalker.java

Content: 

/** 

 * Checks if a comment node is well-formed

 * @param data The contents of the comment node

 * @return a boolean indiacating if the comment is well-formed or not.

 */

protected void isCommentWellFormed(String data){

  if (data == null || (data.length() == 0)) {

    return;

  }

  char[] dataarray=data.toCharArray();

  int datalength=dataarray.length;

  if (fIsXMLVersion11) {

    int i=0;

    while (i < datalength) {

      char c=dataarray[i++];

      if (XML11Char.isXML11Invalid(c)) {

        if (XMLChar.isHighSurrogate(c) && i < datalength) {

          char c2=dataarray[i++];

          if (XMLChar.isLowSurrogate(c2) && XMLChar.isSupplemental(XMLChar.supplemental(c,c2))) {

            continue;

          }

        }

        String msg=Utils.messages.createMessage(MsgKey.ER_WF_INVALID_CHARACTER_IN_COMMENT,new Object[]{new Character(c)});

        if (fErrorHandler != null) {

          fErrorHandler.handleError(new DOMErrorImpl(DOMError.SEVERITY_FATAL_ERROR,msg,MsgKey.ER_WF_INVALID_CHARACTER,null,null,null));

        }

      }

 else       if (c == '-' && i < datalength && dataarray[i] == '-') {

        String msg=Utils.messages.createMessage(MsgKey.ER_WF_DASH_IN_COMMENT,null);

        if (fErrorHandler != null) {

          fErrorHandler.handleError(new DOMErrorImpl(DOMError.SEVERITY_FATAL_ERROR,msg,MsgKey.ER_WF_INVALID_CHARACTER,null,null,null));

        }

      }

    }

  }

 else {

    int i=0;

    while (i < datalength) {

      char c=dataarray[i++];

      if (XMLChar.isInvalid(c)) {

        if (XMLChar.isHighSurrogate(c) && i < datalength) {

          char c2=dataarray[i++];

          if (XMLChar.isLowSurrogate(c2) && XMLChar.isSupplemental(XMLChar.supplemental(c,c2))) {

            continue;

          }

        }

        String msg=Utils.messages.createMessage(MsgKey.ER_WF_INVALID_CHARACTER_IN_COMMENT,new Object[]{new Character(c)});

        if (fErrorHandler != null) {

          fErrorHandler.handleError(new DOMErrorImpl(DOMError.SEVERITY_FATAL_ERROR,msg,MsgKey.ER_WF_INVALID_CHARACTER,null,null,null));

        }

      }

 else       if (c == '-' && i < datalength && dataarray[i] == '-') {

        String msg=Utils.messages.createMessage(MsgKey.ER_WF_DASH_IN_COMMENT,null);

        if (fErrorHandler != null) {

          fErrorHandler.handleError(new DOMErrorImpl(DOMError.SEVERITY_FATAL_ERROR,msg,MsgKey.ER_WF_INVALID_CHARACTER,null,null,null));

        }

      }

    }

  }

  return;

}

Location: DOM3TreeWalker.java

Content: 

/** 

 * Checks if an element node is well-formed, by checking its Name for well-formedness.

 * @param data The contents of the comment node

 * @return a boolean indiacating if the comment is well-formed or not.

 */

protected void isElementWellFormed(Node node){

  boolean isNameWF=false;

  if ((fFeatures & NAMESPACES) != 0) {

    isNameWF=isValidQName(node.getPrefix(),node.getLocalName(),fIsXMLVersion11);

  }

 else {

    isNameWF=isXMLName(node.getNodeName(),fIsXMLVersion11);

  }

  if (!isNameWF) {

    String msg=Utils.messages.createMessage(MsgKey.ER_WF_INVALID_CHARACTER_IN_NODE_NAME,new Object[]{"Element",node.getNodeName()});

    if (fErrorHandler != null) {

      fErrorHandler.handleError(new DOMErrorImpl(DOMError.SEVERITY_FATAL_ERROR,msg,MsgKey.ER_WF_INVALID_CHARACTER_IN_NODE_NAME,null,null,null));

    }

  }

}

Location: DOM3TreeWalker.java

Content: 

/** 

 * Checks if an EntityRefernece node is well-formed, by checking it's node name. Then depending on whether it is referenced in Element content or in an Attr Node, checks if the EntityReference references an unparsed entity or a external entity and if so throws raises the appropriate well-formedness error.

 * @param data The contents of the comment node

 * @parent The parent of the EntityReference Node

 */

protected void isEntityReferneceWellFormed(EntityReference node){

  if (!isXMLName(node.getNodeName(),fIsXMLVersion11)) {

    String msg=Utils.messages.createMessage(MsgKey.ER_WF_INVALID_CHARACTER_IN_NODE_NAME,new Object[]{"EntityReference",node.getNodeName()});

    if (fErrorHandler != null) {

      fErrorHandler.handleError(new DOMErrorImpl(DOMError.SEVERITY_FATAL_ERROR,msg,MsgKey.ER_WF_INVALID_CHARACTER_IN_NODE_NAME,null,null,null));

    }

  }

  Node parent=node.getParentNode();

  DocumentType docType=node.getOwnerDocument().getDoctype();

  if (docType != null) {

    NamedNodeMap entities=docType.getEntities();

    for (int i=0; i < entities.getLength(); i++) {

      Entity ent=(Entity)entities.item(i);

      String nodeName=node.getNodeName() == null ? "" : node.getNodeName();

      String nodeNamespaceURI=node.getNamespaceURI() == null ? "" : node.getNamespaceURI();

      String entName=ent.getNodeName() == null ? "" : ent.getNodeName();

      String entNamespaceURI=ent.getNamespaceURI() == null ? "" : ent.getNamespaceURI();

      if (parent.getNodeType() == Node.ELEMENT_NODE) {

        if (entNamespaceURI.equals(nodeNamespaceURI) && entName.equals(nodeName)) {

          if (ent.getNotationName() != null) {

            String msg=Utils.messages.createMessage(MsgKey.ER_WF_REF_TO_UNPARSED_ENT,new Object[]{node.getNodeName()});

            if (fErrorHandler != null) {

              fErrorHandler.handleError(new DOMErrorImpl(DOMError.SEVERITY_FATAL_ERROR,msg,MsgKey.ER_WF_REF_TO_UNPARSED_ENT,null,null,null));

            }

          }

        }

      }

      if (parent.getNodeType() == Node.ATTRIBUTE_NODE) {

        if (entNamespaceURI.equals(nodeNamespaceURI) && entName.equals(nodeName)) {

          if (ent.getPublicId() != null || ent.getSystemId() != null || ent.getNotationName() != null) {

            String msg=Utils.messages.createMessage(MsgKey.ER_WF_REF_TO_EXTERNAL_ENT,new Object[]{node.getNodeName()});

            if (fErrorHandler != null) {

              fErrorHandler.handleError(new DOMErrorImpl(DOMError.SEVERITY_FATAL_ERROR,msg,MsgKey.ER_WF_REF_TO_EXTERNAL_ENT,null,null,null));

            }

          }

        }

      }

    }

  }

}

Location: DOM3TreeWalker.java

Content: 

/** 

 * Checks if a PI node is well-formed, by checking it's Name and data for well-formedness.

 * @param data The contents of the comment node

 */

protected void isPIWellFormed(ProcessingInstruction node){

  if (!isXMLName(node.getNodeName(),fIsXMLVersion11)) {

    String msg=Utils.messages.createMessage(MsgKey.ER_WF_INVALID_CHARACTER_IN_NODE_NAME,new Object[]{"ProcessingInstruction",node.getTarget()});

    if (fErrorHandler != null) {

      fErrorHandler.handleError(new DOMErrorImpl(DOMError.SEVERITY_FATAL_ERROR,msg,MsgKey.ER_WF_INVALID_CHARACTER_IN_NODE_NAME,null,null,null));

    }

  }

  Character invalidChar=isWFXMLChar(node.getData());

  if (invalidChar != null) {

    String msg=Utils.messages.createMessage(MsgKey.ER_WF_INVALID_CHARACTER_IN_PI,new Object[]{Integer.toHexString(Character.getNumericValue(invalidChar.charValue()))});

    if (fErrorHandler != null) {

      fErrorHandler.handleError(new DOMErrorImpl(DOMError.SEVERITY_FATAL_ERROR,msg,MsgKey.ER_WF_INVALID_CHARACTER,null,null,null));

    }

  }

}

Location: DOM3TreeWalker.java

Content: 

/** 

 * Checks if an Text node is well-formed, by checking if it contains invalid XML characters.

 * @param data The contents of the comment node

 */

protected void isTextWellFormed(Text node){

  Character invalidChar=isWFXMLChar(node.getData());

  if (invalidChar != null) {

    String msg=Utils.messages.createMessage(MsgKey.ER_WF_INVALID_CHARACTER_IN_TEXT,new Object[]{Integer.toHexString(Character.getNumericValue(invalidChar.charValue()))});

    if (fErrorHandler != null) {

      fErrorHandler.handleError(new DOMErrorImpl(DOMError.SEVERITY_FATAL_ERROR,msg,MsgKey.ER_WF_INVALID_CHARACTER,null,null,null));

    }

  }

}

Location: DOM3TreeWalker.java

Content: 

/** 

 * Taken from org.apache.xerces.dom.CoreDocumentImpl Checks if the given qualified name is legal with respect to the version of XML to which this document must conform.

 * @param prefix prefix of qualified name

 * @param local  local part of qualified name

 */

protected boolean isValidQName(String prefix,String local,boolean xml11Version){

  if (local == null)   return false;

  boolean validNCName=false;

  if (!xml11Version) {

    validNCName=(prefix == null || XMLChar.isValidNCName(prefix)) && XMLChar.isValidNCName(local);

  }

 else {

    validNCName=(prefix == null || XML11Char.isXML11ValidNCName(prefix)) && XML11Char.isXML11ValidNCName(local);

  }

  return validNCName;

}

Location: DOM3TreeWalker.java

Content: 

/** 

 * Checks if a XML character is well-formed. If there is a problem with the character a non-null Character is returned else null is returned.

 * @param characters A String of characters to be checked for Well-Formedness

 * @return Character A reference to the character to be returned that wasdetermined invalid.

 */

protected Character isWFXMLChar(String chardata){

  Character refInvalidChar;

  if (chardata == null || (chardata.length() == 0)) {

    return null;

  }

  char[] dataarray=chardata.toCharArray();

  int datalength=dataarray.length;

  if (fIsXMLVersion11) {

    int i=0;

    while (i < datalength) {

      if (XML11Char.isXML11Invalid(dataarray[i++])) {

        char ch=dataarray[i - 1];

        if (XMLChar.isHighSurrogate(ch) && i < datalength) {

          char ch2=dataarray[i++];

          if (XMLChar.isLowSurrogate(ch2) && XMLChar.isSupplemental(XMLChar.supplemental(ch,ch2))) {

            continue;

          }

        }

        refInvalidChar=new Character(ch);

        return refInvalidChar;

      }

    }

  }

 else {

    int i=0;

    while (i < datalength) {

      if (XMLChar.isInvalid(dataarray[i++])) {

        char ch=dataarray[i - 1];

        if (XMLChar.isHighSurrogate(ch) && i < datalength) {

          char ch2=dataarray[i++];

          if (XMLChar.isLowSurrogate(ch2) && XMLChar.isSupplemental(XMLChar.supplemental(ch,ch2))) {

            continue;

          }

        }

        refInvalidChar=new Character(ch);

        return refInvalidChar;

      }

    }

  }

  return null;

}

Location: DOM3TreeWalker.java

Content: 

/** 

 * Checks if a XML character is well-formed

 * @param characters     A String of characters to be checked forWell-Formedness

 * @param refInvalidChar A reference to the character to be returned that wasdetermined invalid.

 */

protected boolean isWFXMLChar(String chardata,Character refInvalidChar){

  if (chardata == null || (chardata.length() == 0)) {

    return true;

  }

  char[] dataarray=chardata.toCharArray();

  int datalength=dataarray.length;

  if (fIsXMLVersion11) {

    int i=0;

    while (i < datalength) {

      if (XML11Char.isXML11Invalid(dataarray[i++])) {

        char ch=dataarray[i - 1];

        if (XMLChar.isHighSurrogate(ch) && i < datalength) {

          char ch2=dataarray[i++];

          if (XMLChar.isLowSurrogate(ch2) && XMLChar.isSupplemental(XMLChar.supplemental(ch,ch2))) {

            continue;

          }

        }

        refInvalidChar=new Character(ch);

        return false;

      }

    }

  }

 else {

    int i=0;

    while (i < datalength) {

      if (XMLChar.isInvalid(dataarray[i++])) {

        char ch=dataarray[i - 1];

        if (XMLChar.isHighSurrogate(ch) && i < datalength) {

          char ch2=dataarray[i++];

          if (XMLChar.isLowSurrogate(ch2) && XMLChar.isSupplemental(XMLChar.supplemental(ch,ch2))) {

            continue;

          }

        }

        refInvalidChar=new Character(ch);

        return false;

      }

    }

  }

  return true;

}

Location: DOM3TreeWalker.java

Content: 

/** 

 * Taken from org.apache.xerces.dom.CoreDocumentImpl Check the string against XML's definition of acceptable names for elements and attributes and so on using the XMLCharacterProperties utility class

 */

protected boolean isXMLName(String s,boolean xml11Version){

  if (s == null) {

    return false;

  }

  if (!xml11Version)   return XMLChar.isValidName(s);

 else   return XML11Char.isXML11ValidName(s);

}

Location: DOM3TreeWalker.java

Content: 

/** 

 * Records local namespace declarations, to be used for normalization later

 * @param Node, The element node, whose namespace declarations are to berecorded

 */

protected void recordLocalNSDecl(Node node){

  NamedNodeMap atts=((Element)node).getAttributes();

  int length=atts.getLength();

  for (int i=0; i < length; i++) {

    Node attr=atts.item(i);

    String localName=attr.getLocalName();

    String attrPrefix=attr.getPrefix();

    String attrValue=attr.getNodeValue();

    String attrNS=attr.getNamespaceURI();

    localName=localName == null || XMLNS_PREFIX.equals(localName) ? "" : localName;

    attrPrefix=attrPrefix == null ? "" : attrPrefix;

    attrValue=attrValue == null ? "" : attrValue;

    attrNS=attrNS == null ? "" : attrNS;

    if (XMLNS_URI.equals(attrNS)) {

      if (XMLNS_URI.equals(attrValue)) {

        String msg=Utils.messages.createMessage(MsgKey.ER_NS_PREFIX_CANNOT_BE_BOUND,new Object[]{attrPrefix,XMLNS_URI});

        if (fErrorHandler != null) {

          fErrorHandler.handleError(new DOMErrorImpl(DOMError.SEVERITY_ERROR,msg,MsgKey.ER_NS_PREFIX_CANNOT_BE_BOUND,null,null,null));

        }

      }

 else {

        if (XMLNS_PREFIX.equals(attrPrefix)) {

          if (attrValue.length() != 0) {

            fNSBinder.declarePrefix(localName,attrValue);

          }

 else {

          }

        }

 else {

          fNSBinder.declarePrefix("",attrValue);

        }

      }

    }

  }

}

Location: DOM3TreeWalker.java

Content: 

/** 

 * Serializes the Attr Nodes of an Element.

 * @param node The OwnerElement whose Attr Nodes are to be serialized.

 */

protected void serializeAttList(Element node) throws SAXException {

  NamedNodeMap atts=node.getAttributes();

  int nAttrs=atts.getLength();

  for (int i=0; i < nAttrs; i++) {

    Node attr=atts.item(i);

    String localName=attr.getLocalName();

    String attrName=attr.getNodeName();

    String attrPrefix=attr.getPrefix() == null ? "" : attr.getPrefix();

    String attrValue=attr.getNodeValue();

    String type=null;

    if (fIsLevel3DOM) {

      type=((Attr)attr).getSchemaTypeInfo().getTypeName();

    }

    type=type == null ? "CDATA" : type;

    String attrNS=attr.getNamespaceURI();

    if (attrNS != null && attrNS.length() == 0) {

      attrNS=null;

      attrName=attr.getLocalName();

    }

    boolean isSpecified=((Attr)attr).getSpecified();

    boolean addAttr=true;

    boolean applyFilter=false;

    boolean xmlnsAttr=attrName.equals("xmlns") || attrName.startsWith("xmlns:");

    if ((fFeatures & WELLFORMED) != 0) {

      isAttributeWellFormed(attr);

    }

    if ((fFeatures & NAMESPACES) != 0 && !xmlnsAttr) {

      if (attrNS != null) {

        attrPrefix=attrPrefix == null ? "" : attrPrefix;

        String declAttrPrefix=fNSBinder.getPrefix(attrNS);

        String declAttrNS=fNSBinder.getURI(attrPrefix);

        if ("".equals(attrPrefix) || "".equals(declAttrPrefix) || !attrPrefix.equals(declAttrPrefix)) {

          if (declAttrPrefix != null && !"".equals(declAttrPrefix)) {

            attrPrefix=declAttrPrefix;

            if (declAttrPrefix.length() > 0) {

              attrName=declAttrPrefix + ":" + localName;

            }

 else {

              attrName=localName;

            }

          }

 else {

            if (attrPrefix != null && !"".equals(attrPrefix) && declAttrNS == null) {

              if ((fFeatures & NAMESPACEDECLS) != 0) {

                fSerializer.addAttribute(XMLNS_URI,attrPrefix,XMLNS_PREFIX + ":" + attrPrefix,"CDATA",attrNS);

                fNSBinder.declarePrefix(attrPrefix,attrNS);

                fLocalNSBinder.declarePrefix(attrPrefix,attrNS);

              }

            }

 else {

              int counter=1;

              attrPrefix="NS" + counter++;

              while (fLocalNSBinder.getURI(attrPrefix) != null) {

                attrPrefix="NS" + counter++;

              }

              attrName=attrPrefix + ":" + localName;

              if ((fFeatures & NAMESPACEDECLS) != 0) {

                fSerializer.addAttribute(XMLNS_URI,attrPrefix,XMLNS_PREFIX + ":" + attrPrefix,"CDATA",attrNS);

                fNSBinder.declarePrefix(attrPrefix,attrNS);

                fLocalNSBinder.declarePrefix(attrPrefix,attrNS);

              }

            }

          }

        }

      }

 else {

        if (localName == null) {

          String msg=Utils.messages.createMessage(MsgKey.ER_NULL_LOCAL_ELEMENT_NAME,new Object[]{attrName});

          if (fErrorHandler != null) {

            fErrorHandler.handleError(new DOMErrorImpl(DOMError.SEVERITY_ERROR,msg,MsgKey.ER_NULL_LOCAL_ELEMENT_NAME,null,null,null));

          }

        }

 else {

        }

      }

    }

    if ((((fFeatures & DISCARDDEFAULT) != 0) && isSpecified) || ((fFeatures & DISCARDDEFAULT) == 0)) {

      applyFilter=true;

    }

 else {

      addAttr=false;

    }

    if (applyFilter) {

      if (fFilter != null && (fFilter.getWhatToShow() & NodeFilter.SHOW_ATTRIBUTE) != 0) {

        if (!xmlnsAttr) {

          short code=fFilter.acceptNode(attr);

switch (code) {

case NodeFilter.FILTER_REJECT:

case NodeFilter.FILTER_SKIP:

            addAttr=false;

          break;

default :

      }

    }

  }

}

if (addAttr && xmlnsAttr) {

  if ((fFeatures & NAMESPACEDECLS) != 0) {

    if (localName != null && !"".equals(localName)) {

      fSerializer.addAttribute(attrNS,localName,attrName,type,attrValue);

    }

  }

}

 else if (addAttr && !xmlnsAttr) {

  if (((fFeatures & NAMESPACEDECLS) != 0) && (attrNS != null)) {

    fSerializer.addAttribute(attrNS,localName,attrName,type,attrValue);

  }

 else {

    fSerializer.addAttribute("",localName,attrName,type,attrValue);

  }

}

if (xmlnsAttr && ((fFeatures & NAMESPACEDECLS) != 0)) {

  int index;

  String prefix=(index=attrName.indexOf(":")) < 0 ? "" : attrName.substring(index + 1);

  if (!"".equals(prefix)) {

    fSerializer.namespaceAfterStartElement(prefix,attrValue);

  }

}

}

}

Location: DOM3TreeWalker.java

Content: 

/** 

 * Serializes an CDATASection Node.

 * @param node The CDATASection Node to serialize

 */

protected void serializeCDATASection(CDATASection node) throws SAXException {

  if ((fFeatures & WELLFORMED) != 0) {

    isCDATASectionWellFormed(node);

  }

  if ((fFeatures & CDATA) != 0) {

    String nodeValue=node.getNodeValue();

    int endIndex=nodeValue.indexOf("]]>");

    if ((fFeatures & SPLITCDATA) != 0) {

      if (endIndex >= 0) {

        String relatedData=nodeValue.substring(0,endIndex + 2);

        String msg=Utils.messages.createMessage(MsgKey.ER_CDATA_SECTIONS_SPLIT,null);

        if (fErrorHandler != null) {

          fErrorHandler.handleError(new DOMErrorImpl(DOMError.SEVERITY_WARNING,msg,MsgKey.ER_CDATA_SECTIONS_SPLIT,null,relatedData,null));

        }

      }

    }

 else {

      if (endIndex >= 0) {

        String relatedData=nodeValue.substring(0,endIndex + 2);

        String msg=Utils.messages.createMessage(MsgKey.ER_CDATA_SECTIONS_SPLIT,null);

        if (fErrorHandler != null) {

          fErrorHandler.handleError(new DOMErrorImpl(DOMError.SEVERITY_ERROR,msg,MsgKey.ER_CDATA_SECTIONS_SPLIT));

        }

        return;

      }

    }

    if (!applyFilter(node,NodeFilter.SHOW_CDATA_SECTION)) {

      return;

    }

    if (fLexicalHandler != null) {

      fLexicalHandler.startCDATA();

    }

    dispatachChars(node);

    if (fLexicalHandler != null) {

      fLexicalHandler.endCDATA();

    }

  }

 else {

    dispatachChars(node);

  }

}

Location: DOM3TreeWalker.java

Content: 

/** 

 * Serializes a Comment Node.

 * @param node The Comment Node to serialize

 */

protected void serializeComment(Comment node) throws SAXException {

  if ((fFeatures & COMMENTS) != 0) {

    String data=node.getData();

    if ((fFeatures & WELLFORMED) != 0) {

      isCommentWellFormed(data);

    }

    if (fLexicalHandler != null) {

      if (!applyFilter(node,NodeFilter.SHOW_COMMENT)) {

        return;

      }

      fLexicalHandler.comment(data.toCharArray(),0,data.length());

    }

  }

}

Location: DOM3TreeWalker.java

Content: 

/** 

 * Serializes a Document Type Node.

 * @param node   The Docuemnt Type Node to serialize

 * @param bStart Invoked at the start or end of node. Default true.

 */

protected void serializeDocType(DocumentType node,boolean bStart) throws SAXException {

  String docTypeName=node.getNodeName();

  String publicId=node.getPublicId();

  String systemId=node.getSystemId();

  String internalSubset=node.getInternalSubset();

  if (internalSubset != null && !"".equals(internalSubset)) {

    if (bStart) {

      try {

        Writer writer=fSerializer.getWriter();

        StringBuffer dtd=new StringBuffer();

        dtd.append("<!DOCTYPE ");

        dtd.append(docTypeName);

        if (null != publicId) {

          dtd.append(" PUBLIC \"");

          dtd.append(publicId);

          dtd.append('\"');

        }

        if (null != systemId) {

          if (null == publicId) {

            dtd.append(" SYSTEM \"");

          }

 else {

            dtd.append(" \"");

          }

          dtd.append(systemId);

          dtd.append('\"');

        }

        dtd.append(" [ ");

        dtd.append(fNewLine);

        dtd.append(internalSubset);

        dtd.append("]>");

        dtd.append(fNewLine);

        writer.write(dtd.toString());

        writer.flush();

      }

 catch (      IOException e) {

        throw new SAXException(Utils.messages.createMessage(MsgKey.ER_WRITING_INTERNAL_SUBSET,null),e);

      }

    }

  }

 else {

    if (bStart) {

      if (fLexicalHandler != null) {

        fLexicalHandler.startDTD(docTypeName,publicId,systemId);

      }

    }

 else {

      if (fLexicalHandler != null) {

        fLexicalHandler.endDTD();

      }

    }

  }

}

Location: DOM3TreeWalker.java

Content: 

/** 

 * Serializes an Element Node.

 * @param node   The Element Node to serialize

 * @param bStart Invoked at the start or end of node.

 */

protected void serializeElement(Element node,boolean bStart) throws SAXException {

  if (bStart) {

    fElementDepth++;

    if ((fFeatures & WELLFORMED) != 0) {

      isElementWellFormed(node);

    }

    if (!applyFilter(node,NodeFilter.SHOW_ELEMENT)) {

      return;

    }

    if ((fFeatures & NAMESPACES) != 0) {

      fNSBinder.pushContext();

      fLocalNSBinder.reset();

      recordLocalNSDecl(node);

      fixupElementNS(node);

    }

    fSerializer.startElement(node.getNamespaceURI(),node.getLocalName(),node.getNodeName());

    serializeAttList(node);

  }

 else {

    fElementDepth--;

    if (!applyFilter(node,NodeFilter.SHOW_ELEMENT)) {

      return;

    }

    this.fSerializer.endElement(node.getNamespaceURI(),node.getLocalName(),node.getNodeName());

    if ((fFeatures & NAMESPACES) != 0) {

      fNSBinder.popContext();

    }

  }

}

Location: DOM3TreeWalker.java

Content: 

/** 

 * Serializes an EntityReference Node.

 * @param node   The EntityReference Node to serialize

 * @param bStart Inicates if called from start or endNode

 */

protected void serializeEntityReference(EntityReference node,boolean bStart) throws SAXException {

  if (bStart) {

    EntityReference eref=node;

    if ((fFeatures & ENTITIES) != 0) {

      if ((fFeatures & WELLFORMED) != 0) {

        isEntityReferneceWellFormed(node);

      }

      if ((fFeatures & NAMESPACES) != 0) {

        checkUnboundPrefixInEntRef(node);

      }

    }

    if (fLexicalHandler != null) {

      fLexicalHandler.startEntity(eref.getNodeName());

    }

  }

 else {

    EntityReference eref=node;

    if (fLexicalHandler != null) {

      fLexicalHandler.endEntity(eref.getNodeName());

    }

  }

}

Location: DOM3TreeWalker.java

Content: 

/** 

 * Serializes an ProcessingInstruction Node.

 * @param node The ProcessingInstruction Node to serialize

 */

protected void serializePI(ProcessingInstruction node) throws SAXException {

  ProcessingInstruction pi=node;

  String name=pi.getNodeName();

  if ((fFeatures & WELLFORMED) != 0) {

    isPIWellFormed(node);

  }

  if (!applyFilter(node,NodeFilter.SHOW_PROCESSING_INSTRUCTION)) {

    return;

  }

  if (name.equals("xslt-next-is-raw")) {

    fNextIsRaw=true;

  }

 else {

    this.fSerializer.processingInstruction(name,pi.getData());

  }

}

Location: DOM3TreeWalker.java

Content: 

/** 

 * Serializes an Text Node.

 * @param node The Text Node to serialize

 */

protected void serializeText(Text node) throws SAXException {

  if (fNextIsRaw) {

    fNextIsRaw=false;

    fSerializer.processingInstruction(javax.xml.transform.Result.PI_DISABLE_OUTPUT_ESCAPING,"");

    dispatachChars(node);

    fSerializer.processingInstruction(javax.xml.transform.Result.PI_ENABLE_OUTPUT_ESCAPING,"");

  }

 else {

    boolean bDispatch=false;

    if ((fFeatures & WELLFORMED) != 0) {

      isTextWellFormed(node);

    }

    boolean isElementContentWhitespace=false;

    if (fIsLevel3DOM) {

      isElementContentWhitespace=node.isElementContentWhitespace();

    }

    if (isElementContentWhitespace) {

      if ((fFeatures & ELEM_CONTENT_WHITESPACE) != 0) {

        bDispatch=true;

      }

    }

 else {

      bDispatch=true;

    }

    if (!applyFilter(node,NodeFilter.SHOW_TEXT)) {

      return;

    }

    if (bDispatch) {

      dispatachChars(node);

    }

  }

}

