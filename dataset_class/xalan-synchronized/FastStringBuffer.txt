Location: FastStringBuffer.java

Content: 

/** 

 * Append a single character onto the FastStringBuffer, growing the storage if necessary. <p> NOTE THAT after calling append(), previously obtained references to m_array[][] may no longer be valid.... though in fact they should be in this instance.

 * @param value character to be appended.

 */

public final void append(char value){

  char[] chunk;

  if (m_firstFree < m_chunkSize)   chunk=m_array[m_lastChunk];

 else {

    int i=m_array.length;

    if (m_lastChunk + 1 == i) {

      char[][] newarray=new char[i + 16][];

      System.arraycopy(m_array,0,newarray,0,i);

      m_array=newarray;

    }

    chunk=m_array[++m_lastChunk];

    if (chunk == null) {

      if (m_lastChunk == 1 << m_rebundleBits && m_chunkBits < m_maxChunkBits) {

        m_innerFSB=new FastStringBuffer(this);

      }

      chunk=m_array[m_lastChunk]=new char[m_chunkSize];

    }

    m_firstFree=0;

  }

  chunk[m_firstFree++]=value;

}

Location: FastStringBuffer.java

Content: 

/** 

 * Append part of the contents of a Character Array onto the FastStringBuffer, growing the storage if necessary. <p> NOTE THAT after calling append(), previously obtained references to m_array[] may no longer be valid.

 * @param chars  character array from which data is to be copied

 * @param start  offset in chars of first character to be copied, zero-based.

 * @param length number of characters to be copied

 */

public final void append(char[] chars,int start,int length){

  int strlen=length;

  if (0 == strlen)   return;

  int copyfrom=start;

  char[] chunk=m_array[m_lastChunk];

  int available=m_chunkSize - m_firstFree;

  while (strlen > 0) {

    if (available > strlen)     available=strlen;

    System.arraycopy(chars,copyfrom,m_array[m_lastChunk],m_firstFree,available);

    strlen-=available;

    copyfrom+=available;

    if (strlen > 0) {

      int i=m_array.length;

      if (m_lastChunk + 1 == i) {

        char[][] newarray=new char[i + 16][];

        System.arraycopy(m_array,0,newarray,0,i);

        m_array=newarray;

      }

      chunk=m_array[++m_lastChunk];

      if (chunk == null) {

        if (m_lastChunk == 1 << m_rebundleBits && m_chunkBits < m_maxChunkBits) {

          m_innerFSB=new FastStringBuffer(this);

        }

        chunk=m_array[m_lastChunk]=new char[m_chunkSize];

      }

      available=m_chunkSize;

      m_firstFree=0;

    }

  }

  m_firstFree+=available;

}

Location: FastStringBuffer.java

Content: 

/** 

 * Append the contents of another FastStringBuffer onto this FastStringBuffer, growing the storage if necessary. <p> NOTE THAT after calling append(), previously obtained references to m_array[] may no longer be valid.

 * @param value FastStringBuffer whose contents are to be appended.

 */

public final void append(FastStringBuffer value){

  if (value == null)   return;

  int strlen=value.length();

  if (0 == strlen)   return;

  int copyfrom=0;

  char[] chunk=m_array[m_lastChunk];

  int available=m_chunkSize - m_firstFree;

  while (strlen > 0) {

    if (available > strlen)     available=strlen;

    int sourcechunk=(copyfrom + value.m_chunkSize - 1) >>> value.m_chunkBits;

    int sourcecolumn=copyfrom & value.m_chunkMask;

    int runlength=value.m_chunkSize - sourcecolumn;

    if (runlength > available)     runlength=available;

    System.arraycopy(value.m_array[sourcechunk],sourcecolumn,m_array[m_lastChunk],m_firstFree,runlength);

    if (runlength != available)     System.arraycopy(value.m_array[sourcechunk + 1],0,m_array[m_lastChunk],m_firstFree + runlength,available - runlength);

    strlen-=available;

    copyfrom+=available;

    if (strlen > 0) {

      int i=m_array.length;

      if (m_lastChunk + 1 == i) {

        char[][] newarray=new char[i + 16][];

        System.arraycopy(m_array,0,newarray,0,i);

        m_array=newarray;

      }

      chunk=m_array[++m_lastChunk];

      if (chunk == null) {

        if (m_lastChunk == 1 << m_rebundleBits && m_chunkBits < m_maxChunkBits) {

          m_innerFSB=new FastStringBuffer(this);

        }

        chunk=m_array[m_lastChunk]=new char[m_chunkSize];

      }

      available=m_chunkSize;

      m_firstFree=0;

    }

  }

  m_firstFree+=available;

}

Location: FastStringBuffer.java

Content: 

/** 

 * Append the contents of a String onto the FastStringBuffer, growing the storage if necessary. <p> NOTE THAT after calling append(), previously obtained references to m_array[] may no longer be valid.

 * @param value String whose contents are to be appended.

 */

public final void append(String value){

  if (value == null)   return;

  int strlen=value.length();

  if (0 == strlen)   return;

  int copyfrom=0;

  char[] chunk=m_array[m_lastChunk];

  int available=m_chunkSize - m_firstFree;

  while (strlen > 0) {

    if (available > strlen)     available=strlen;

    value.getChars(copyfrom,copyfrom + available,m_array[m_lastChunk],m_firstFree);

    strlen-=available;

    copyfrom+=available;

    if (strlen > 0) {

      int i=m_array.length;

      if (m_lastChunk + 1 == i) {

        char[][] newarray=new char[i + 16][];

        System.arraycopy(m_array,0,newarray,0,i);

        m_array=newarray;

      }

      chunk=m_array[++m_lastChunk];

      if (chunk == null) {

        if (m_lastChunk == 1 << m_rebundleBits && m_chunkBits < m_maxChunkBits) {

          m_innerFSB=new FastStringBuffer(this);

        }

        chunk=m_array[m_lastChunk]=new char[m_chunkSize];

      }

      available=m_chunkSize;

      m_firstFree=0;

    }

  }

  m_firstFree+=available;

}

Location: FastStringBuffer.java

Content: 

/** 

 * Append the contents of a StringBuffer onto the FastStringBuffer, growing the storage if necessary. <p> NOTE THAT after calling append(), previously obtained references to m_array[] may no longer be valid.

 * @param value StringBuffer whose contents are to be appended.

 */

public final void append(StringBuffer value){

  if (value == null)   return;

  int strlen=value.length();

  if (0 == strlen)   return;

  int copyfrom=0;

  char[] chunk=m_array[m_lastChunk];

  int available=m_chunkSize - m_firstFree;

  while (strlen > 0) {

    if (available > strlen)     available=strlen;

    value.getChars(copyfrom,copyfrom + available,m_array[m_lastChunk],m_firstFree);

    strlen-=available;

    copyfrom+=available;

    if (strlen > 0) {

      int i=m_array.length;

      if (m_lastChunk + 1 == i) {

        char[][] newarray=new char[i + 16][];

        System.arraycopy(m_array,0,newarray,0,i);

        m_array=newarray;

      }

      chunk=m_array[++m_lastChunk];

      if (chunk == null) {

        if (m_lastChunk == 1 << m_rebundleBits && m_chunkBits < m_maxChunkBits) {

          m_innerFSB=new FastStringBuffer(this);

        }

        chunk=m_array[m_lastChunk]=new char[m_chunkSize];

      }

      available=m_chunkSize;

      m_firstFree=0;

    }

  }

  m_firstFree+=available;

}

Location: FastStringBuffer.java

Content: 

/** 

 * Construct a FastStringBuffer, using a default allocation policy.

 */

public FastStringBuffer(){

  this(10,15,2);

}

Location: FastStringBuffer.java

Content: 

/** 

 * Encapsulation c'tor. After this is called, the source FastStringBuffer will be reset to use the new object as its m_innerFSB, and will have had its chunk size reset appropriately. IT SHOULD NEVER BE CALLED EXCEPT WHEN source.length()==1<<(source.m_chunkBits+source.m_rebundleBits) NEEDSDOC @param source

 */

private FastStringBuffer(FastStringBuffer source){

  m_chunkBits=source.m_chunkBits;

  m_maxChunkBits=source.m_maxChunkBits;

  m_rebundleBits=source.m_rebundleBits;

  m_chunkSize=source.m_chunkSize;

  m_chunkMask=source.m_chunkMask;

  m_array=source.m_array;

  m_innerFSB=source.m_innerFSB;

  m_lastChunk=source.m_lastChunk - 1;

  m_firstFree=source.m_chunkSize;

  source.m_array=new char[16][];

  source.m_innerFSB=this;

  source.m_lastChunk=1;

  source.m_firstFree=0;

  source.m_chunkBits+=m_rebundleBits;

  source.m_chunkSize=1 << (source.m_chunkBits);

  source.m_chunkMask=source.m_chunkSize - 1;

}

Location: FastStringBuffer.java

Content: 

/** 

 * Construct a FastStringBuffer, using default maxChunkBits and rebundleBits values. <p> ISSUE: Should this call assert initial size, or fixed size? Now configured as initial, with a default for fixed. NEEDSDOC @param initChunkBits

 */

public FastStringBuffer(int initChunkBits){

  this(initChunkBits,15,2);

}

Location: FastStringBuffer.java

Content: 

/** 

 * Construct a FastStringBuffer, using a default rebundleBits value. NEEDSDOC @param initChunkBits NEEDSDOC @param maxChunkBits

 */

public FastStringBuffer(int initChunkBits,int maxChunkBits){

  this(initChunkBits,maxChunkBits,2);

}

Location: FastStringBuffer.java

Content: 

/** 

 * Construct a FastStringBuffer, with allocation policy as per parameters. <p> For coding convenience, I've expressed both allocation sizes in terms of a number of bits. That's needed for the final size of a chunk, to permit fast and efficient shift-and-mask addressing. It's less critical for the inital size, and may be reconsidered. <p> An alternative would be to accept integer sizes and round to powers of two; that really doesn't seem to buy us much, if anything.

 * @param initChunkBits Length in characters of the initial allocation of achunk, expressed in log-base-2. (That is, 10 means allocate 1024 characters.) Later chunks will use larger allocation units, to trade off allocation speed of large document against storage efficiency of small ones.

 * @param maxChunkBits  Number of character-offset bits that should be used foraddressing within a chunk. Maximum length of a chunk is 2^chunkBits characters.

 * @param rebundleBits  Number of character-offset bits that addressing shouldadvance before we attempt to take a step from initChunkBits to maxChunkBits

 */

public FastStringBuffer(int initChunkBits,int maxChunkBits,int rebundleBits){

  if (DEBUG_FORCE_INIT_BITS != 0)   initChunkBits=DEBUG_FORCE_INIT_BITS;

  if (DEBUG_FORCE_FIXED_CHUNKSIZE)   maxChunkBits=initChunkBits;

  m_array=new char[16][];

  if (initChunkBits > maxChunkBits)   initChunkBits=maxChunkBits;

  m_chunkBits=initChunkBits;

  m_maxChunkBits=maxChunkBits;

  m_rebundleBits=rebundleBits;

  m_chunkSize=1 << (initChunkBits);

  m_chunkMask=m_chunkSize - 1;

  m_array[0]=new char[m_chunkSize];

}

Location: FastStringBuffer.java

Content: 

protected String getOneChunkString(int startChunk,int startColumn,int length){

  return new String(m_array[startChunk],startColumn,length);

}

Location: FastStringBuffer.java

Content: 

/** 

 * @param start  Offset of first character in the range.

 * @param length Number of characters to send.

 * @return a new String object initialized from the specified range ofcharacters.

 */

public String getString(int start,int length){

  int startColumn=start & m_chunkMask;

  int startChunk=start >>> m_chunkBits;

  if (startColumn + length < m_chunkMask && m_innerFSB == null) {

    return getOneChunkString(startChunk,startColumn,length);

  }

  return getString(new StringBuffer(length),startChunk,startColumn,length).toString();

}

Location: FastStringBuffer.java

Content: 

/** 

 * @param sb     StringBuffer to be appended to

 * @param start  Offset of first character in the range.

 * @param length Number of characters to send.

 * @return sb with the requested text appended to it

 */

StringBuffer getString(StringBuffer sb,int start,int length){

  return getString(sb,start >>> m_chunkBits,start & m_chunkMask,length);

}

Location: FastStringBuffer.java

Content: 

/** 

 * Internal support for toString() and getString(). PLEASE NOTE SIGNATURE CHANGE from earlier versions; it now appends into and returns a StringBuffer supplied by the caller. This simplifies m_innerFSB support. <p> Note that this operation has been somewhat deoptimized by the shift to a chunked array, as there is no factory method to produce a String object directly from an array of arrays and hence a double copy is needed. By presetting length we hope to minimize the heap overhead of building the intermediate StringBuffer. <p> (It really is a pity that Java didn't design String as a final subclass of MutableString, rather than having StringBuffer be a separate hierarchy. We'd avoid a <strong>lot</strong> of double-buffering.)

 * @param sb

 * @param startChunk

 * @param startColumn

 * @param length

 * @return the contents of the FastStringBuffer as a standard Java string.

 */

StringBuffer getString(StringBuffer sb,int startChunk,int startColumn,int length){

  int stop=(startChunk << m_chunkBits) + startColumn + length;

  int stopChunk=stop >>> m_chunkBits;

  int stopColumn=stop & m_chunkMask;

  for (int i=startChunk; i < stopChunk; ++i) {

    if (i == 0 && m_innerFSB != null)     m_innerFSB.getString(sb,startColumn,m_chunkSize - startColumn);

 else     sb.append(m_array[i],startColumn,m_chunkSize - startColumn);

    startColumn=0;

  }

  if (stopChunk == 0 && m_innerFSB != null)   m_innerFSB.getString(sb,startColumn,stopColumn - startColumn);

 else   if (stopColumn > startColumn)   sb.append(m_array[stopChunk],startColumn,stopColumn - startColumn);

  return sb;

}

Location: FastStringBuffer.java

Content: 

/** 

 * @return true if the specified range of characters are all whitespace, asdefined by XMLCharacterRecognizer. <p> CURRENTLY DOES NOT CHECK FOR OUT-OF-RANGE.

 * @param start  Offset of first character in the range.

 * @param length Number of characters to send.

 */

public boolean isWhitespace(int start,int length){

  int sourcechunk=start >>> m_chunkBits;

  int sourcecolumn=start & m_chunkMask;

  int available=m_chunkSize - sourcecolumn;

  boolean chunkOK;

  while (length > 0) {

    int runlength=(length <= available) ? length : available;

    if (sourcechunk == 0 && m_innerFSB != null)     chunkOK=m_innerFSB.isWhitespace(sourcecolumn,runlength);

 else     chunkOK=org.apache.xml.utils.XMLCharacterRecognizer.isWhiteSpace(m_array[sourcechunk],sourcecolumn,runlength);

    if (!chunkOK)     return false;

    length-=runlength;

    ++sourcechunk;

    sourcecolumn=0;

    available=m_chunkSize;

  }

  return true;

}

Location: FastStringBuffer.java

Content: 

/** 

 * Directly normalize and dispatch the character array.

 * @param ch      The characters from the XML document.

 * @param start   The start position in the array.

 * @param length  The number of characters to read from the array.

 * @param handler SAX ContentHandler object to receive the event.

 * @exception org.xml.sax.SAXException Any SAX exception, possibly wrappinganother exception.

 */

public static void sendNormalizedSAXcharacters(char ch[],int start,int length,org.xml.sax.ContentHandler handler) throws org.xml.sax.SAXException {

  sendNormalizedSAXcharacters(ch,start,length,handler,SUPPRESS_BOTH);

}

Location: FastStringBuffer.java

Content: 

/** 

 * Internal method to directly normalize and dispatch the character array. This version is aware of the fact that it may be called several times in succession if the data is made up of multiple "chunks", and thus must actively manage the handling of leading and trailing whitespace. Note: The recursion is due to the possible recursion of inner FSBs.

 * @param ch                 The characters from the XML document.

 * @param start              The start position in the array.

 * @param length             The number of characters to read from the array.

 * @param handler            SAX ContentHandler object to receive the event.

 * @param edgeTreatmentFlags How leading/trailing spaces should be handled. Thisis a bitfield contining two flags, bitwise-ORed together: <dl> <dt>SUPPRESS_LEADING_WS</dt> <dd>When false, causes leading whitespace to be converted to a single space; when true, causes it to be discarded entirely. Should be set TRUE for the first chunk, and (in multi-chunk output) whenever the previous chunk ended in retained whitespace.</dd> <dt>SUPPRESS_TRAILING_WS</dt> <dd>When false, causes trailing whitespace to be converted to a single space; when true, causes it to be discarded entirely. Should be set TRUE for the last or only chunk.</dd> </dl>

 * @return normalization status, as in the edgeTreatmentFlags parameter:<dl> <dt>0</dt> <dd>if this output did not end in retained whitespace, and thus whitespace at the start of the following chunk (if any) should be converted to a single space. <dt>SUPPRESS_LEADING_WS</dt> <dd>if this output ended in retained whitespace, and thus whitespace at the start of the following chunk (if any) should be completely suppressed.</dd></dd> </dl>

 * @exception org.xml.sax.SAXException Any SAX exception, possibly wrappinganother exception.

 */

static int sendNormalizedSAXcharacters(char ch[],int start,int length,org.xml.sax.ContentHandler handler,int edgeTreatmentFlags) throws org.xml.sax.SAXException {

  boolean processingLeadingWhitespace=((edgeTreatmentFlags & SUPPRESS_LEADING_WS) != 0);

  boolean seenWhitespace=((edgeTreatmentFlags & CARRY_WS) != 0);

  int currPos=start;

  int limit=start + length;

  if (processingLeadingWhitespace) {

    for (; currPos < limit && XMLCharacterRecognizer.isWhiteSpace(ch[currPos]); currPos++) {

    }

    if (currPos == limit) {

      return edgeTreatmentFlags;

    }

  }

  while (currPos < limit) {

    int startNonWhitespace=currPos;

    for (; currPos < limit && !XMLCharacterRecognizer.isWhiteSpace(ch[currPos]); currPos++) {

    }

    if (startNonWhitespace != currPos) {

      if (seenWhitespace) {

        handler.characters(SINGLE_SPACE,0,1);

        seenWhitespace=false;

      }

      handler.characters(ch,startNonWhitespace,currPos - startNonWhitespace);

    }

    int startWhitespace=currPos;

    for (; currPos < limit && XMLCharacterRecognizer.isWhiteSpace(ch[currPos]); currPos++) {

    }

    if (startWhitespace != currPos) {

      seenWhitespace=true;

    }

  }

  return (seenWhitespace ? CARRY_WS : 0) | (edgeTreatmentFlags & SUPPRESS_TRAILING_WS);

}

Location: FastStringBuffer.java

Content: 

/** 

 * Sends the specified range of characters as one or more SAX characters() events, normalizing the characters according to XSLT rules.

 * @param ch     SAX ContentHandler object to receive the event.

 * @param start  Offset of first character in the range.

 * @param length Number of characters to send.

 * @return normalization status to apply to next chunk (because we may have beencalled recursively to process an inner FSB): <dl> <dt>0</dt> <dd>if this output did not end in retained whitespace, and thus whitespace at the start of the following chunk (if any) should be converted to a single space. <dt>SUPPRESS_LEADING_WS</dt> <dd>if this output ended in retained whitespace, and thus whitespace at the start of the following chunk (if any) should be completely suppressed.</dd></dd> </dl>

 * @exception org.xml.sax.SAXException may be thrown by handler's characters()method.

 */

public int sendNormalizedSAXcharacters(org.xml.sax.ContentHandler ch,int start,int length) throws org.xml.sax.SAXException {

  int stateForNextChunk=SUPPRESS_LEADING_WS;

  int stop=start + length;

  int startChunk=start >>> m_chunkBits;

  int startColumn=start & m_chunkMask;

  int stopChunk=stop >>> m_chunkBits;

  int stopColumn=stop & m_chunkMask;

  for (int i=startChunk; i < stopChunk; ++i) {

    if (i == 0 && m_innerFSB != null)     stateForNextChunk=m_innerFSB.sendNormalizedSAXcharacters(ch,startColumn,m_chunkSize - startColumn);

 else     stateForNextChunk=sendNormalizedSAXcharacters(m_array[i],startColumn,m_chunkSize - startColumn,ch,stateForNextChunk);

    startColumn=0;

  }

  if (stopChunk == 0 && m_innerFSB != null)   stateForNextChunk=m_innerFSB.sendNormalizedSAXcharacters(ch,startColumn,stopColumn - startColumn);

 else   if (stopColumn > startColumn) {

    stateForNextChunk=sendNormalizedSAXcharacters(m_array[stopChunk],startColumn,stopColumn - startColumn,ch,stateForNextChunk | SUPPRESS_TRAILING_WS);

  }

  return stateForNextChunk;

}

Location: FastStringBuffer.java

Content: 

/** 

 * Sends the specified range of characters as one or more SAX characters() events. Note that the buffer reference passed to the ContentHandler may be invalidated if the FastStringBuffer is edited; it's the user's responsibility to manage access to the FastStringBuffer to prevent this problem from arising. <p> Note too that there is no promise that the output will be sent as a single call. As is always true in SAX, one logical string may be split across multiple blocks of memory and hence delivered as several successive events.

 * @param ch     SAX ContentHandler object to receive the event.

 * @param start  Offset of first character in the range.

 * @param length Number of characters to send.

 * @exception org.xml.sax.SAXException may be thrown by handler's characters()method.

 */

public void sendSAXcharacters(org.xml.sax.ContentHandler ch,int start,int length) throws org.xml.sax.SAXException {

  int startChunk=start >>> m_chunkBits;

  int startColumn=start & m_chunkMask;

  if (startColumn + length < m_chunkMask && m_innerFSB == null) {

    ch.characters(m_array[startChunk],startColumn,length);

    return;

  }

  int stop=start + length;

  int stopChunk=stop >>> m_chunkBits;

  int stopColumn=stop & m_chunkMask;

  for (int i=startChunk; i < stopChunk; ++i) {

    if (i == 0 && m_innerFSB != null)     m_innerFSB.sendSAXcharacters(ch,startColumn,m_chunkSize - startColumn);

 else     ch.characters(m_array[i],startColumn,m_chunkSize - startColumn);

    startColumn=0;

  }

  if (stopChunk == 0 && m_innerFSB != null)   m_innerFSB.sendSAXcharacters(ch,startColumn,stopColumn - startColumn);

 else   if (stopColumn > startColumn) {

    ch.characters(m_array[stopChunk],startColumn,stopColumn - startColumn);

  }

}

Location: FastStringBuffer.java

Content: 

/** 

 * Sends the specified range of characters as sax Comment. <p> Note that, unlike sendSAXcharacters, this has to be done as a single call to LexicalHandler#comment.

 * @param ch     SAX LexicalHandler object to receive the event.

 * @param start  Offset of first character in the range.

 * @param length Number of characters to send.

 * @exception org.xml.sax.SAXException may be thrown by handler's characters()method.

 */

public void sendSAXComment(org.xml.sax.ext.LexicalHandler ch,int start,int length) throws org.xml.sax.SAXException {

  String comment=getString(start,length);

  ch.comment(comment.toCharArray(),0,length);

}

Location: FastStringBuffer.java

Content: 

/** 

 * Directly set how much of the FastStringBuffer's storage is to be considered part of its content. This is a fast but hazardous operation. It is not protected against negative values, or values greater than the amount of storage currently available... and even if additional storage does exist, its contents are unpredictable. The only safe use for our setLength() is to truncate the FastStringBuffer to a shorter string.

 * @param l New length. If l<0 or l>=getLength(), this operation will not reportan error but future operations will almost certainly fail.

 */

public final void setLength(int l){

  m_lastChunk=l >>> m_chunkBits;

  if (m_lastChunk == 0 && m_innerFSB != null) {

    m_innerFSB.setLength(l,this);

  }

 else {

    m_firstFree=l & m_chunkMask;

    if (m_firstFree == 0 && m_lastChunk > 0) {

      --m_lastChunk;

      m_firstFree=m_chunkSize;

    }

  }

}

Location: FastStringBuffer.java

Content: 

/** 

 * Subroutine for the public setLength() method. Deals with the fact that truncation may require restoring one of the innerFSBs NEEDSDOC @param l NEEDSDOC @param rootFSB

 */

private final void setLength(int l,FastStringBuffer rootFSB){

  m_lastChunk=l >>> m_chunkBits;

  if (m_lastChunk == 0 && m_innerFSB != null) {

    m_innerFSB.setLength(l,rootFSB);

  }

 else {

    rootFSB.m_chunkBits=m_chunkBits;

    rootFSB.m_maxChunkBits=m_maxChunkBits;

    rootFSB.m_rebundleBits=m_rebundleBits;

    rootFSB.m_chunkSize=m_chunkSize;

    rootFSB.m_chunkMask=m_chunkMask;

    rootFSB.m_array=m_array;

    rootFSB.m_innerFSB=m_innerFSB;

    rootFSB.m_lastChunk=m_lastChunk;

    rootFSB.m_firstFree=l & m_chunkMask;

  }

}

