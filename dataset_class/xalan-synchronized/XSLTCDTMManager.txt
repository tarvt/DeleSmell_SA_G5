Location: XSLTCDTMManager.java

Content: 

/** 

 * Get an instance of a DTM, loaded with the content from the specified source. If the unique flag is true, a new instance will always be returned. Otherwise it is up to the DTMManager to return a new instance or an instance that it already created and may be being used by someone else. (I think more parameters will need to be added for error handling, and entity resolution).

 * @param source           the specification of the source object.

 * @param unique           true if the returned DTM must be unique, probablybecause it is going to be mutated.

 * @param whiteSpaceFilter Enables filtering of whitespace nodes, and may benull.

 * @param incremental      true if the DTM should be built incrementally, ifpossible.

 * @param doIndexing       true if the caller considers it worth it to useindexing schemes.

 * @param buildIdIndex     true if the id index table should be built.

 * @return a non-null DTM reference.

 */

public DTM getDTM(Source source,boolean unique,DTMWSFilter whiteSpaceFilter,boolean incremental,boolean doIndexing,boolean buildIdIndex){

  return getDTM(source,unique,whiteSpaceFilter,incremental,doIndexing,false,0,buildIdIndex,false);

}

Location: XSLTCDTMManager.java

Content: 

/** 

 * Get an instance of a DTM, loaded with the content from the specified source. If the unique flag is true, a new instance will always be returned. Otherwise it is up to the DTMManager to return a new instance or an instance that it already created and may be being used by someone else. (I think more parameters will need to be added for error handling, and entity resolution).

 * @param source           the specification of the source object.

 * @param unique           true if the returned DTM must be unique, probablybecause it is going to be mutated.

 * @param whiteSpaceFilter Enables filtering of whitespace nodes, and may benull.

 * @param incremental      true if the DTM should be built incrementally, ifpossible.

 * @param doIndexing       true if the caller considers it worth it to useindexing schemes.

 * @param buildIdIndex     true if the id index table should be built.

 * @param newNameTable     true if we want to use a separate ExpandedNameTablefor this DTM.

 * @return a non-null DTM reference.

 */

public DTM getDTM(Source source,boolean unique,DTMWSFilter whiteSpaceFilter,boolean incremental,boolean doIndexing,boolean buildIdIndex,boolean newNameTable){

  return getDTM(source,unique,whiteSpaceFilter,incremental,doIndexing,false,0,buildIdIndex,newNameTable);

}

Location: XSLTCDTMManager.java

Content: 

/** 

 * Get an instance of a DTM, loaded with the content from the specified source. If the unique flag is true, a new instance will always be returned. Otherwise it is up to the DTMManager to return a new instance or an instance that it already created and may be being used by someone else. (I think more parameters will need to be added for error handling, and entity resolution).

 * @param source           the specification of the source object.

 * @param unique           true if the returned DTM must be unique, probablybecause it is going to be mutated.

 * @param whiteSpaceFilter Enables filtering of whitespace nodes, and may benull.

 * @param incremental      true if the DTM should be built incrementally, ifpossible.

 * @param doIndexing       true if the caller considers it worth it to useindexing schemes.

 * @param hasUserReader    true if <code>source</code> is a<code>SAXSource</code> object that has an <code>XMLReader</code>, that was specified by the user.

 * @param size             Specifies initial size of tables that represent theDTM

 * @param buildIdIndex     true if the id index table should be built.

 * @return a non-null DTM reference.

 */

public DTM getDTM(Source source,boolean unique,DTMWSFilter whiteSpaceFilter,boolean incremental,boolean doIndexing,boolean hasUserReader,int size,boolean buildIdIndex){

  return getDTM(source,unique,whiteSpaceFilter,incremental,doIndexing,hasUserReader,size,buildIdIndex,false);

}

Location: XSLTCDTMManager.java

Content: 

/** 

 * Get an instance of a DTM, loaded with the content from the specified source. If the unique flag is true, a new instance will always be returned. Otherwise it is up to the DTMManager to return a new instance or an instance that it already created and may be being used by someone else. (I think more parameters will need to be added for error handling, and entity resolution).

 * @param source           the specification of the source object.

 * @param unique           true if the returned DTM must be unique, probablybecause it is going to be mutated.

 * @param whiteSpaceFilter Enables filtering of whitespace nodes, and may benull.

 * @param incremental      true if the DTM should be built incrementally, ifpossible.

 * @param doIndexing       true if the caller considers it worth it to useindexing schemes.

 * @param hasUserReader    true if <code>source</code> is a<code>SAXSource</code> object that has an <code>XMLReader</code>, that was specified by the user.

 * @param size             Specifies initial size of tables that represent theDTM

 * @param buildIdIndex     true if the id index table should be built.

 * @param newNameTable     true if we want to use a separate ExpandedNameTablefor this DTM.

 * @return a non-null DTM reference.

 */

public DTM getDTM(Source source,boolean unique,DTMWSFilter whiteSpaceFilter,boolean incremental,boolean doIndexing,boolean hasUserReader,int size,boolean buildIdIndex,boolean newNameTable){

  if (DEBUG && null != source) {

    System.out.println("Starting " + (unique ? "UNIQUE" : "shared") + " source: "+ source.getSystemId());

  }

  int dtmPos=getFirstFreeDTMID();

  int documentID=dtmPos << IDENT_DTM_NODE_BITS;

  if ((null != source) && source instanceof DOMSource) {

    final DOMSource domsrc=(DOMSource)source;

    final org.w3c.dom.Node node=domsrc.getNode();

    final DOM2SAX dom2sax=new DOM2SAX(node);

    SAXImpl dtm;

    if (size <= 0) {

      dtm=new SAXImpl(this,source,documentID,whiteSpaceFilter,null,doIndexing,DTMDefaultBase.DEFAULT_BLOCKSIZE,buildIdIndex,newNameTable);

    }

 else {

      dtm=new SAXImpl(this,source,documentID,whiteSpaceFilter,null,doIndexing,size,buildIdIndex,newNameTable);

    }

    dtm.setDocumentURI(source.getSystemId());

    addDTM(dtm,dtmPos,0);

    dom2sax.setContentHandler(dtm);

    try {

      dom2sax.parse();

    }

 catch (    RuntimeException re) {

      throw re;

    }

catch (    Exception e) {

      throw new org.apache.xml.utils.WrappedRuntimeException(e);

    }

    return dtm;

  }

 else {

    boolean isSAXSource=(null != source) ? (source instanceof SAXSource) : true;

    boolean isStreamSource=(null != source) ? (source instanceof StreamSource) : false;

    if (isSAXSource || isStreamSource) {

      XMLReader reader;

      InputSource xmlSource;

      if (null == source) {

        xmlSource=null;

        reader=null;

        hasUserReader=false;

      }

 else {

        reader=getXMLReader(source);

        xmlSource=SAXSource.sourceToInputSource(source);

        String urlOfSource=xmlSource.getSystemId();

        if (null != urlOfSource) {

          try {

            urlOfSource=SystemIDResolver.getAbsoluteURI(urlOfSource);

          }

 catch (          Exception e) {

            System.err.println("Can not absolutize URL: " + urlOfSource);

          }

          xmlSource.setSystemId(urlOfSource);

        }

      }

      SAXImpl dtm;

      if (size <= 0) {

        dtm=new SAXImpl(this,source,documentID,whiteSpaceFilter,null,doIndexing,DTMDefaultBase.DEFAULT_BLOCKSIZE,buildIdIndex,newNameTable);

      }

 else {

        dtm=new SAXImpl(this,source,documentID,whiteSpaceFilter,null,doIndexing,size,buildIdIndex,newNameTable);

      }

      addDTM(dtm,dtmPos,0);

      if (null == reader) {

        return dtm;

      }

      reader.setContentHandler(dtm.getBuilder());

      if (!hasUserReader || null == reader.getDTDHandler()) {

        reader.setDTDHandler(dtm);

      }

      if (!hasUserReader || null == reader.getErrorHandler()) {

        reader.setErrorHandler(dtm);

      }

      try {

        reader.setProperty("http://xml.org/sax/properties/lexical-handler",dtm);

      }

 catch (      SAXNotRecognizedException e) {

      }

catch (      SAXNotSupportedException e) {

      }

      try {

        reader.parse(xmlSource);

      }

 catch (      RuntimeException re) {

        throw re;

      }

catch (      Exception e) {

        throw new org.apache.xml.utils.WrappedRuntimeException(e);

      }

 finally {

        if (!hasUserReader) {

          releaseXMLReader(reader);

        }

      }

      if (DUMPTREE) {

        System.out.println("Dumping SAX2DOM");

        dtm.dumpDTM(System.err);

      }

      return dtm;

    }

 else {

      throw new DTMException(XMLMessages.createXMLMessage(XMLErrorResources.ER_NOT_SUPPORTED,new Object[]{source}));

    }

  }

}

Location: XSLTCDTMManager.java

Content: 

/** 

 * Constructor DTMManagerDefault

 */

public XSLTCDTMManager(){

  super();

}

