Location: TemplateList.java

Content: 

/** 

 * Add object to vector if not already there.

 * @param obj

 * @param v

 */

private void addObjectIfNotFound(Object obj,Vector v){

  int n=v.size();

  boolean addIt=true;

  for (int i=0; i < n; i++) {

    if (v.elementAt(i) == obj) {

      addIt=false;

      break;

    }

  }

  if (addIt) {

    v.addElement(obj);

  }

}

Location: TemplateList.java

Content: 

/** 

 * Check for match conflicts, and warn the stylesheet author.

 * @param head       Template pattern

 * @param xctxt      Current XPath context

 * @param targetNode Node matching the pattern

 * @param mode       reference, which may be null, to the<a href="http://www.w3.org/TR/xslt#modes">current mode</a>.

 */

private void checkConflicts(TemplateSubPatternAssociation head,XPathContext xctxt,int targetNode,QName mode){

}

Location: TemplateList.java

Content: 

/** 

 * Dump all patterns and elements that match those patterns

 */

void dumpAssociationTables(){

  Enumeration associations=m_patternTable.elements();

  while (associations.hasMoreElements()) {

    TemplateSubPatternAssociation head=(TemplateSubPatternAssociation)associations.nextElement();

    while (null != head) {

      System.out.print("(" + head.getTargetString() + ", "+ head.getPattern()+ ")");

      head=head.getNext();

    }

    System.out.println("\n.....");

  }

  TemplateSubPatternAssociation head=m_wildCardPatterns;

  System.out.print("wild card list: ");

  while (null != head) {

    System.out.print("(" + head.getTargetString() + ", "+ head.getPattern()+ ")");

    head=head.getNext();

  }

  System.out.println("\n.....");

}

Location: TemplateList.java

Content: 

/** 

 * Get the head of the assocation list that is keyed by target.

 * @param key The name of a node.

 * @return The head of a linked list that contains all possible match pattern totemplate associations for the given key.

 */

private TemplateSubPatternAssociation getHead(String key){

  return (TemplateSubPatternAssociation)m_patternTable.get(key);

}

Location: TemplateList.java

Content: 

/** 

 * Get the head of the most likely list of associations to check, based on the name and type of the targetNode argument.

 * @param xctxt      The XPath runtime context.

 * @param targetNode The target node that will be checked for a match.

 * @param dtm        The dtm owner for the target node.

 * @return The head of a linked list that contains all possible match pattern totemplate associations.

 */

public TemplateSubPatternAssociation getHead(XPathContext xctxt,int targetNode,DTM dtm){

  short targetNodeType=dtm.getNodeType(targetNode);

  TemplateSubPatternAssociation head;

switch (targetNodeType) {

case DTM.ELEMENT_NODE:

case DTM.ATTRIBUTE_NODE:

    head=(TemplateSubPatternAssociation)m_patternTable.get(dtm.getLocalName(targetNode));

  break;

case DTM.TEXT_NODE:

case DTM.CDATA_SECTION_NODE:

head=m_textPatterns;

break;

case DTM.ENTITY_REFERENCE_NODE:

case DTM.ENTITY_NODE:

head=(TemplateSubPatternAssociation)m_patternTable.get(dtm.getNodeName(targetNode));

break;

case DTM.PROCESSING_INSTRUCTION_NODE:

head=(TemplateSubPatternAssociation)m_patternTable.get(dtm.getLocalName(targetNode));

break;

case DTM.COMMENT_NODE:

head=m_commentPatterns;

break;

case DTM.DOCUMENT_NODE:

case DTM.DOCUMENT_FRAGMENT_NODE:

head=m_docPatterns;

break;

case DTM.NOTATION_NODE:

default :

head=(TemplateSubPatternAssociation)m_patternTable.get(dtm.getNodeName(targetNode));

}

return (null == head) ? m_wildCardPatterns : head;

}

Location: TemplateList.java

Content: 

/** 

 * Get table of named Templates. These are keyed on template names, and holding values that are template elements.

 * @return A Hashtable dictionary that contains {@link java.lang.String}s as the keys, and  {@link org.apache.xalan.templates.ElemTemplate}s as the values.

 */

private Hashtable getNamedTemplates(){

  return m_namedTemplates;

}

Location: TemplateList.java

Content: 

/** 

 * Given a match pattern and template association, return the score of that match. This score or priority can always be statically calculated.

 * @param matchPat The match pattern to template association.

 * @return {@link org.apache.xpath.patterns.NodeTest#SCORE_NODETEST}, {@link org.apache.xpath.patterns.NodeTest#SCORE_NONE}, {@link org.apache.xpath.patterns.NodeTest#SCORE_NSWILD}, {@link org.apache.xpath.patterns.NodeTest#SCORE_QNAME}, or {@link org.apache.xpath.patterns.NodeTest#SCORE_OTHER}, or the value defined by the priority attribute of the template.

 */

private double getPriorityOrScore(TemplateSubPatternAssociation matchPat){

  double priority=matchPat.getTemplate().getPriority();

  if (priority == XPath.MATCH_SCORE_NONE) {

    Expression ex=matchPat.getStepPattern();

    if (ex instanceof NodeTest) {

      return ((NodeTest)ex).getDefaultScore();

    }

  }

  return priority;

}

Location: TemplateList.java

Content: 

/** 

 * Given a target element, find the template that best matches in the given XSL document, according to the rules specified in the xsl draft. This variation of getTemplate assumes the current node and current expression node have already been pushed.

 * @param xctxt

 * @param targetNode

 * @param mode                  A string indicating the display mode.

 * @param maxImportLevel        The maximum importCountComposed that we shouldconsider or -1 if we should consider all import levels. This is used by apply-imports to access templates that have been overridden.

 * @param quietConflictWarnings

 * @return Rule that best matches targetElem.

 * @throws XSLProcessorException thrown if the active ProblemListener andXPathContext decide the error condition is severe enough to halt processing.

 * @throws TransformerException

 */

public ElemTemplate getTemplateFast(XPathContext xctxt,int targetNode,int expTypeID,QName mode,int maxImportLevel,boolean quietConflictWarnings,DTM dtm) throws TransformerException {

  TemplateSubPatternAssociation head;

switch (dtm.getNodeType(targetNode)) {

case DTM.ELEMENT_NODE:

case DTM.ATTRIBUTE_NODE:

    head=(TemplateSubPatternAssociation)m_patternTable.get(dtm.getLocalNameFromExpandedNameID(expTypeID));

  break;

case DTM.TEXT_NODE:

case DTM.CDATA_SECTION_NODE:

head=m_textPatterns;

break;

case DTM.ENTITY_REFERENCE_NODE:

case DTM.ENTITY_NODE:

head=(TemplateSubPatternAssociation)m_patternTable.get(dtm.getNodeName(targetNode));

break;

case DTM.PROCESSING_INSTRUCTION_NODE:

head=(TemplateSubPatternAssociation)m_patternTable.get(dtm.getLocalName(targetNode));

break;

case DTM.COMMENT_NODE:

head=m_commentPatterns;

break;

case DTM.DOCUMENT_NODE:

case DTM.DOCUMENT_FRAGMENT_NODE:

head=m_docPatterns;

break;

case DTM.NOTATION_NODE:

default :

head=(TemplateSubPatternAssociation)m_patternTable.get(dtm.getNodeName(targetNode));

}

if (null == head) {

head=m_wildCardPatterns;

if (null == head) return null;

}

xctxt.pushNamespaceContextNull();

try {

do {

if ((maxImportLevel > -1) && (head.getImportLevel() > maxImportLevel)) {

continue;

}

ElemTemplate template=head.getTemplate();

xctxt.setNamespaceContext(template);

if ((head.m_stepPattern.execute(xctxt,targetNode,dtm,expTypeID) != NodeTest.SCORE_NONE) && head.matchMode(mode)) {

if (quietConflictWarnings) checkConflicts(head,xctxt,targetNode,mode);

return template;

}

}

 while (null != (head=head.getNext()));

}

  finally {

xctxt.popNamespaceContext();

}

return null;

}

Location: TemplateList.java

Content: 

/** 

 * Locate a named template.

 * @param qname Qualified name of the template.

 * @return Template argument with the requested name, or null if not found.

 */

public ElemTemplate getTemplate(QName qname){

  return (ElemTemplate)m_namedTemplates.get(qname);

}

Location: TemplateList.java

Content: 

/** 

 * Given a target element, find the template that best matches in the given XSL document, according to the rules specified in the xsl draft.

 * @param xctxt

 * @param targetNode

 * @param mode                  A string indicating the display mode.

 * @param quietConflictWarnings

 * @return Rule that best matches targetElem.

 * @throws XSLProcessorException thrown if the active ProblemListener andXPathContext decide the error condition is severe enough to halt processing.

 * @throws TransformerException

 */

public ElemTemplate getTemplate(XPathContext xctxt,int targetNode,QName mode,boolean quietConflictWarnings,DTM dtm) throws TransformerException {

  TemplateSubPatternAssociation head=getHead(xctxt,targetNode,dtm);

  if (null != head) {

    xctxt.pushNamespaceContextNull();

    xctxt.pushCurrentNodeAndExpression(targetNode,targetNode);

    try {

      do {

        ElemTemplate template=head.getTemplate();

        xctxt.setNamespaceContext(template);

        if ((head.m_stepPattern.execute(xctxt,targetNode) != NodeTest.SCORE_NONE) && head.matchMode(mode)) {

          if (quietConflictWarnings)           checkConflicts(head,xctxt,targetNode,mode);

          return template;

        }

      }

 while (null != (head=head.getNext()));

    }

  finally {

      xctxt.popCurrentNodeAndExpression();

      xctxt.popNamespaceContext();

    }

  }

  return null;

}

Location: TemplateList.java

Content: 

/** 

 * Given a target element, find the template that best matches in the given XSL document, according to the rules specified in the xsl draft.

 * @param xctxt

 * @param targetNode

 * @param mode                  A string indicating the display mode.

 * @param maxImportLevel        The maximum importCountComposed that we shouldconsider or -1 if we should consider all import levels. This is used by apply-imports to access templates that have been overridden.

 * @param endImportLevel        The count of composed imports

 * @param quietConflictWarnings

 * @return Rule that best matches targetElem.

 * @throws XSLProcessorException thrown if the active ProblemListener andXPathContext decide the error condition is severe enough to halt processing.

 * @throws TransformerException

 */

public ElemTemplate getTemplate(XPathContext xctxt,int targetNode,QName mode,int maxImportLevel,int endImportLevel,boolean quietConflictWarnings,DTM dtm) throws TransformerException {

  TemplateSubPatternAssociation head=getHead(xctxt,targetNode,dtm);

  if (null != head) {

    xctxt.pushNamespaceContextNull();

    xctxt.pushCurrentNodeAndExpression(targetNode,targetNode);

    try {

      do {

        if ((maxImportLevel > -1) && (head.getImportLevel() > maxImportLevel)) {

          continue;

        }

        if (head.getImportLevel() <= maxImportLevel - endImportLevel)         return null;

        ElemTemplate template=head.getTemplate();

        xctxt.setNamespaceContext(template);

        if ((head.m_stepPattern.execute(xctxt,targetNode) != NodeTest.SCORE_NONE) && head.matchMode(mode)) {

          if (quietConflictWarnings)           checkConflicts(head,xctxt,targetNode,mode);

          return template;

        }

      }

 while (null != (head=head.getNext()));

    }

  finally {

      xctxt.popCurrentNodeAndExpression();

      xctxt.popNamespaceContext();

    }

  }

  return null;

}

Location: TemplateList.java

Content: 

/** 

 * Get a TemplateWalker for use by a compiler. See the documentation for the TreeWalker inner class for further details.

 */

public TemplateWalker getWalker(){

  return new TemplateWalker();

}

Location: TemplateList.java

Content: 

/** 

 * Insert the given TemplateSubPatternAssociation into the the linked list. Sort by import precedence, then priority, then by document order.

 * @param head             The first TemplateSubPatternAssociation in the linkedlist.

 * @param item             The item that we want to insert into the properplace.

 * @param isWildCardInsert <code>true</code> if we are inserting a wild cardtemplate onto this list.

 * @return the new head of the list.

 */

private TemplateSubPatternAssociation insertAssociationIntoList(TemplateSubPatternAssociation head,TemplateSubPatternAssociation item,boolean isWildCardInsert){

  double priority=getPriorityOrScore(item);

  double workPriority;

  int importLevel=item.getImportLevel();

  int docOrder=item.getDocOrderPos();

  TemplateSubPatternAssociation insertPoint=head;

  TemplateSubPatternAssociation next;

  boolean insertBefore;

  while (true) {

    next=insertPoint.getNext();

    if (null == next)     break;

 else {

      workPriority=getPriorityOrScore(next);

      if (importLevel > next.getImportLevel())       break;

 else       if (importLevel < next.getImportLevel())       insertPoint=next;

 else       if (priority > workPriority)       break;

 else       if (priority < workPriority)       insertPoint=next;

 else       if (docOrder >= next.getDocOrderPos())       break;

 else       insertPoint=next;

    }

  }

  if ((null == next) || (insertPoint == head)) {

    workPriority=getPriorityOrScore(insertPoint);

    if (importLevel > insertPoint.getImportLevel())     insertBefore=true;

 else     if (importLevel < insertPoint.getImportLevel())     insertBefore=false;

 else     if (priority > workPriority)     insertBefore=true;

 else     if (priority < workPriority)     insertBefore=false;

 else     if (docOrder >= insertPoint.getDocOrderPos())     insertBefore=true;

 else     insertBefore=false;

  }

 else   insertBefore=false;

  if (isWildCardInsert) {

    if (insertBefore) {

      item.setNext(insertPoint);

      String key=insertPoint.getTargetString();

      item.setTargetString(key);

      putHead(key,item);

      return item;

    }

 else {

      item.setNext(next);

      insertPoint.setNext(item);

      return head;

    }

  }

 else {

    if (insertBefore) {

      item.setNext(insertPoint);

      if (insertPoint.isWild() || item.isWild())       m_wildCardPatterns=item;

 else       putHead(item.getTargetString(),item);

      return item;

    }

 else {

      item.setNext(next);

      insertPoint.setNext(item);

      return head;

    }

  }

}

Location: TemplateList.java

Content: 

/** 

 * Add a template to the template list.

 * @param pattern

 * @param template

 */

private void insertPatternInTable(StepPattern pattern,ElemTemplate template){

  String target=pattern.getTargetString();

  if (null != target) {

    String pstring=template.getMatch().getPatternString();

    TemplateSubPatternAssociation association=new TemplateSubPatternAssociation(template,pattern,pstring);

    boolean isWildCard=association.isWild();

    TemplateSubPatternAssociation head=isWildCard ? m_wildCardPatterns : getHead(target);

    if (null == head) {

      if (isWildCard)       m_wildCardPatterns=association;

 else       putHead(target,association);

    }

 else {

      insertAssociationIntoList(head,association,false);

    }

  }

}

Location: TemplateList.java

Content: 

/** 

 * Get the head of the assocation list that is keyed by target.

 * @param key

 * @param assoc

 */

private void putHead(String key,TemplateSubPatternAssociation assoc){

  if (key.equals(PsuedoNames.PSEUDONAME_TEXT))   m_textPatterns=assoc;

 else   if (key.equals(PsuedoNames.PSEUDONAME_ROOT))   m_docPatterns=assoc;

 else   if (key.equals(PsuedoNames.PSEUDONAME_COMMENT))   m_commentPatterns=assoc;

  m_patternTable.put(key,assoc);

}

Location: TemplateList.java

Content: 

/** 

 * Set table of named Templates. These are keyed on string macro names, and holding values that are template elements in the XSL DOM tree.

 * @param v Hashtable dictionary that contains {@link java.lang.String}s as the keys, and  {@link org.apache.xalan.templates.ElemTemplate}s as the values.

 */

private void setNamedTemplates(Hashtable v){

  m_namedTemplates=v;

}

Location: TemplateList.java

Content: 

/** 

 * Construct a TemplateList object. Needs to be public so it can be invoked from the CompilingStylesheetHandler.

 */

public TemplateList(){

  super();

}

