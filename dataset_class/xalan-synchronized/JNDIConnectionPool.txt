Location: JNDIConnectionPool.java

Content: 

/** 

 * Internal method used to look up the datasource.

 * @throws NamingException

 */

protected void findDatasource() throws NamingException {

  try {

    InitialContext context=new InitialContext();

    jdbcSource=context.lookup(jndiPath);

    Class withArgs[]={String.class,String.class};

    getConnectionWithArgs=jdbcSource.getClass().getDeclaredMethod("getConnection",withArgs);

    Class noArgs[]={};

    getConnection=jdbcSource.getClass().getDeclaredMethod("getConnection",noArgs);

  }

 catch (  NamingException e) {

    throw e;

  }

catch (  NoSuchMethodException e) {

    throw new NamingException("Unable to resolve JNDI DataSource - " + e);

  }

}

Location: JNDIConnectionPool.java

Content: 

/** 

 * Returns the path for the jndi datasource

 * @param jndiPath

 */

public String getJndiPath(){

  return jndiPath;

}

Location: JNDIConnectionPool.java

Content: 

/** 

 * Use of the default constructor requires the jndi path to be set via setJndiPath().

 */

public JNDIConnectionPool(){

}

Location: JNDIConnectionPool.java

Content: 

/** 

 * Creates a connection pool with a specified JNDI path.

 * @param jndiDatasourcePath Complete path to the JNDI datasource

 */

public JNDIConnectionPool(String jndiDatasourcePath){

  jndiPath=jndiDatasourcePath.trim();

}

Location: JNDIConnectionPool.java

Content: 

/** 

 * Sets the path for the jndi datasource

 * @param jndiPath

 */

public void setJndiPath(String jndiPath){

  this.jndiPath=jndiPath;

}

