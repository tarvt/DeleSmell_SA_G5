Location: CoroutineManager.java

Content: 

/** 

 * In the standard coroutine architecture, coroutines are identified by their method names and are launched and run up to their first yield by simply resuming them; its's presumed that this recognizes the not-already-running case and does the right thing. We seem to need a way to achieve that same threadsafe run-up... eg, start the coroutine with a wait. %TBD% whether this makes any sense...

 * @param thisCoroutine the identifier of this coroutine, so we can recognizewhen we are being resumed.

 * @exception java.lang.NoSuchMethodException if thisCoroutine isn't aregistered member of this group. %REVIEW% whether this is the best choice.

 */

public synchronized Object co_entry_pause(int thisCoroutine) throws java.lang.NoSuchMethodException {

  if (!m_activeIDs.get(thisCoroutine))   throw new java.lang.NoSuchMethodException();

  while (m_nextCoroutine != thisCoroutine) {

    try {

      wait();

    }

 catch (    java.lang.InterruptedException e) {

    }

  }

  return m_yield;

}

Location: CoroutineManager.java

Content: 

/** 

 * Terminate this entire set of coroutines. The others will be deregistered and have exceptions thrown at them. Note that this is intended as a panic-shutdown operation; under normal circumstances a coroutine should always end with co_exit_to() in order to politely inform at least one of its partners that it is going away. %TBD% This may need significantly more work. %TBD% Should this just be co_exit_to(,,CoroutineManager.PANIC)?

 * @param thisCoroutine Integer identifier for the coroutine requesting exit.

 */

public synchronized void co_exit(int thisCoroutine){

  m_activeIDs.clear(thisCoroutine);

  m_nextCoroutine=NOBODY;

  notify();

}

Location: CoroutineManager.java

Content: 

/** 

 * Make the ID available for reuse and terminate this coroutine, transferring control to the specified coroutine. Note that this returns immediately rather than waiting for any further coroutine traffic, so the thread can proceed with other shutdown activities.

 * @param arg_object    A value to be passed to the other coroutine.

 * @param thisCoroutine Integer identifier for the coroutine leaving the set.

 * @param toCoroutine   Integer identifier for the coroutine we wish to invoke.

 * @exception java.lang.NoSuchMethodException if toCoroutine isn't a registeredmember of this group. %REVIEW% whether this is the best choice.

 */

public synchronized void co_exit_to(Object arg_object,int thisCoroutine,int toCoroutine) throws java.lang.NoSuchMethodException {

  if (!m_activeIDs.get(toCoroutine))   throw new java.lang.NoSuchMethodException(XMLMessages.createXMLMessage(XMLErrorResources.ER_COROUTINE_NOT_AVAIL,new Object[]{Integer.toString(toCoroutine)}));

  m_yield=arg_object;

  m_nextCoroutine=toCoroutine;

  m_activeIDs.clear(thisCoroutine);

  notify();

}

Location: CoroutineManager.java

Content: 

/** 

 * <p> Each coroutine in the set managed by a single CoroutineManager is identified by a small positive integer. This brings up the question of how to manage those integers to avoid reuse... since if two coroutines use the same ID number, resuming that ID could resume either. I can see arguments for either allowing applications to select their own numbers (they may want to declare mnemonics via manefest constants) or generating numbers on demand. This routine's intended to support both approaches. </p> <p> %REVIEW% We could use an object as the identifier. Not sure it's a net gain, though it would allow the thread to be its own ID. Ponder. </p>

 * @param coroutineID If >=0, requests that we reserve this number. If <0,requests that we find, reserve, and return an available ID number.

 * @return If >=0, the ID number to be used by this coroutine. If <0, an erroroccurred -- the ID requested was already in use, or we couldn't assign one without going over the "unreasonable value" mark

 */

public synchronized int co_joinCoroutineSet(int coroutineID){

  if (coroutineID >= 0) {

    if (coroutineID >= m_unreasonableId || m_activeIDs.get(coroutineID))     return -1;

  }

 else {

    coroutineID=0;

    while (coroutineID < m_unreasonableId) {

      if (m_activeIDs.get(coroutineID))       ++coroutineID;

 else       break;

    }

    if (coroutineID >= m_unreasonableId)     return -1;

  }

  m_activeIDs.set(coroutineID);

  return coroutineID;

}

Location: CoroutineManager.java

Content: 

/** 

 * Transfer control to another coroutine which has already been started and is waiting on this CoroutineManager. We won't return from this call until that routine has relinquished control. %TBD% What should we do if toCoroutine isn't registered? Exception?

 * @param arg_object    A value to be passed to the other coroutine.

 * @param thisCoroutine Integer identifier for this coroutine. This is the ID wewatch for to see if we're the ones being resumed.

 * @param toCoroutine   Integer identifier for the coroutine we wish to invoke.

 * @exception java.lang.NoSuchMethodException if toCoroutine isn't a registeredmember of this group. %REVIEW% whether this is the best choice.

 */

public synchronized Object co_resume(Object arg_object,int thisCoroutine,int toCoroutine) throws java.lang.NoSuchMethodException {

  if (!m_activeIDs.get(toCoroutine))   throw new java.lang.NoSuchMethodException(XMLMessages.createXMLMessage(XMLErrorResources.ER_COROUTINE_NOT_AVAIL,new Object[]{Integer.toString(toCoroutine)}));

  m_yield=arg_object;

  m_nextCoroutine=toCoroutine;

  notify();

  while (m_nextCoroutine != thisCoroutine || m_nextCoroutine == ANYBODY || m_nextCoroutine == NOBODY) {

    try {

      wait();

    }

 catch (    java.lang.InterruptedException e) {

    }

  }

  if (m_nextCoroutine == NOBODY) {

    co_exit(thisCoroutine);

    throw new java.lang.NoSuchMethodException(XMLMessages.createXMLMessage(XMLErrorResources.ER_COROUTINE_CO_EXIT,null));

  }

  return m_yield;

}

