Location: ObjectArray.java

Content: 

/** 

 * @param o Object to be appended to the Array

 */

public int append(Object o){

  if (m_nextSlot >= m_minArraySize) {

    m_Arrays.addElement(m_currentArray);

    m_nextSlot=0;

    m_currentArray=new _ObjectArray(m_minArraySize);

  }

  m_currentArray.objects[m_nextSlot]=o;

  int pos=(m_Arrays.size() * m_minArraySize) + m_nextSlot;

  m_nextSlot++;

  return pos;

}

Location: ObjectArray.java

Content: 

/** 

 * @param idx Index of the Object in the Array

 */

public Object getAt(final int idx){

  int arrayIndx=idx / m_minArraySize;

  int arrayOffset=idx - (arrayIndx * m_minArraySize);

  if (arrayIndx < m_Arrays.size()) {

    _ObjectArray a=(_ObjectArray)m_Arrays.elementAt(arrayIndx);

    return a.objects[arrayOffset];

  }

 else {

    return m_currentArray.objects[arrayOffset];

  }

}

Location: ObjectArray.java

Content: 

/** 

 * @param size

 */

private void init(int size){

  m_minArraySize=size;

  m_currentArray=new _ObjectArray(m_minArraySize);

}

Location: ObjectArray.java

Content: 

/** 

 */

public ObjectArray(){

  init(10);

}

Location: ObjectArray.java

Content: 

/** 

 * @param minArraySize The size of the Arrays stored in the Vector

 */

public ObjectArray(final int minArraySize){

  init(minArraySize);

}

Location: ObjectArray.java

Content: 

/** 

 * @param idx Index of the Object in the Array

 * @param obj , The value to set in the Array

 */

public void setAt(final int idx,final Object obj){

  int arrayIndx=idx / m_minArraySize;

  int arrayOffset=idx - (arrayIndx * m_minArraySize);

  if (arrayIndx < m_Arrays.size()) {

    _ObjectArray a=(_ObjectArray)m_Arrays.elementAt(arrayIndx);

    a.objects[arrayOffset]=obj;

  }

 else {

    m_currentArray.objects[arrayOffset]=obj;

  }

}

