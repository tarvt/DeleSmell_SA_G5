Location: ElemVariable.java

Content: 

/** 

 * Accept a visitor and call the appropriate method for this class.

 * @param visitor The visitor whose appropriate method will be called.

 * @return true if the children of the object should be visited.

 */

protected boolean accept(XSLTVisitor visitor){

  return visitor.visitVariableOrParamDecl(this);

}

Location: ElemVariable.java

Content: 

/** 

 * Add a child to the child list. If the select attribute is present, an error will be raised.

 * @param elem New element to append to this element's children list

 * @return null if the select attribute was present, otherwise the child justadded to the child list

 */

public ElemTemplateElement appendChild(ElemTemplateElement elem){

  if (m_selectPattern != null) {

    error(XSLTErrorResources.ER_CANT_HAVE_CONTENT_AND_SELECT,new Object[]{"xsl:" + this.getNodeName()});

    return null;

  }

  return super.appendChild(elem);

}

Location: ElemVariable.java

Content: 

/** 

 * Call the children visitors.

 * @param visitor The visitor whose appropriate method will be called.

 */

protected void callChildVisitors(XSLTVisitor visitor,boolean callAttrs){

  if (null != m_selectPattern)   m_selectPattern.getExpression().callVisitors(m_selectPattern,visitor);

  super.callChildVisitors(visitor,callAttrs);

}

Location: ElemVariable.java

Content: 

/** 

 * Constructor ElemVariable

 */

public ElemVariable(){

}

Location: ElemVariable.java

Content: 

/** 

 * Copy constructor.

 * @param param An element created from an xsl:variable

 * @throws TransformerException

 */

public ElemVariable(ElemVariable param) throws TransformerException {

  m_selectPattern=param.m_selectPattern;

  m_qname=param.m_qname;

  m_isTopLevel=param.m_isTopLevel;

}

Location: ElemVariable.java

Content: 

/** 

 * This after the template's children have been composed. We have to get the count of how many variables have been declared, so we can do a link and unlink.

 */

public void endCompose(StylesheetRoot sroot) throws TransformerException {

  super.endCompose(sroot);

  if (m_parentNode instanceof Stylesheet) {

    StylesheetRoot.ComposeState cstate=sroot.getComposeState();

    m_frameSize=cstate.getFrameSize();

    cstate.resetStackFrameSize();

  }

}

Location: ElemVariable.java

Content: 

/** 

 * Get the "select" attribute. If the variable-binding element has a select attribute, then the value of the attribute must be an expression and the value of the variable is the object that results from evaluating the expression. In this case, the content of the variable must be empty.

 * @return Value of the "select" attribute.

 */

public XPath getSelect(){

  return m_selectPattern;

}

Location: ElemVariable.java

Content: 

/** 

 * Get the XObject representation of the variable.

 * @param transformer non-null reference to the the current transform-timestate.

 * @param sourceNode  non-null reference to the <a href="http://www.w3.org/TR/xslt#dt-current-node">current source node</a>.

 * @return the XObject representation of the variable.

 * @throws TransformerException

 */

public XObject getValue(TransformerImpl transformer,int sourceNode) throws TransformerException {

  XObject var;

  XPathContext xctxt=transformer.getXPathContext();

  xctxt.pushCurrentNode(sourceNode);

  try {

    if (null != m_selectPattern) {

      var=m_selectPattern.execute(xctxt,sourceNode,this);

      var.allowDetachToRelease(false);

      if (transformer.getDebug())       transformer.getTraceManager().fireSelectedEvent(sourceNode,this,"select",m_selectPattern,var);

    }

 else     if (null == getFirstChildElem()) {

      var=XString.EMPTYSTRING;

    }

 else {

      int df;

      try {

        if (m_parentNode instanceof Stylesheet)         df=transformer.transformToGlobalRTF(this);

 else         df=transformer.transformToRTF(this);

      }

  finally {

      }

      var=new XRTreeFrag(df,xctxt,this);

    }

  }

  finally {

    xctxt.popCurrentNode();

  }

  return var;

}

Location: ElemVariable.java

Content: 

/** 

 * Tell if this is a psuedo variable reference, declared by Xalan instead of by the user.

 */

public boolean isPsuedoVar(){

  java.lang.String ns=m_qname.getNamespaceURI();

  if ((null != ns) && ns.equals(RedundentExprEliminator.PSUEDOVARNAMESPACE)) {

    if (m_qname.getLocalName().startsWith("#"))     return true;

  }

  return false;

}

Location: ElemVariable.java

Content: 

/** 

 * This function is called during recomposition to control how this element is composed.

 * @param root The root stylesheet for this transformation.

 */

public void recompose(StylesheetRoot root){

  root.recomposeVariables(this);

}

Location: ElemVariable.java

Content: 

/** 

 * If the children of a variable is a single xsl:value-of or text literal, it is cheaper to evaluate this as an expression, so try and adapt the child an an expression.

 * @param varElem Should be a ElemParam, ElemVariable, or ElemWithParam.

 * @return An XPath if rewrite is possible, else null.

 * @throws TransformerException

 */

static XPath rewriteChildToExpression(ElemTemplateElement varElem) throws TransformerException {

  ElemTemplateElement t=varElem.getFirstChildElem();

  if (null != t && null == t.getNextSiblingElem()) {

    int etype=t.getXSLToken();

    if (Constants.ELEMNAME_VALUEOF == etype) {

      ElemValueOf valueof=(ElemValueOf)t;

      if (valueof.getDisableOutputEscaping() == false && valueof.getDOMBackPointer() == null) {

        varElem.m_firstChild=null;

        return new XPath(new XRTreeFragSelectWrapper(valueof.getSelect().getExpression()));

      }

    }

 else     if (Constants.ELEMNAME_TEXTLITERALRESULT == etype) {

      ElemTextLiteral lit=(ElemTextLiteral)t;

      if (lit.getDisableOutputEscaping() == false && lit.getDOMBackPointer() == null) {

        String str=lit.getNodeValue();

        XString xstr=new XString(str);

        varElem.m_firstChild=null;

        return new XPath(new XRTreeFragSelectWrapper(xstr));

      }

    }

  }

  return null;

}

Location: ElemVariable.java

Content: 

/** 

 * Set the parent as an ElemTemplateElement.

 * @param p This node's parent as an ElemTemplateElement

 */

public void setParentElem(ElemTemplateElement p){

  super.setParentElem(p);

  p.m_hasVariableDecl=true;

}

Location: ElemVariable.java

Content: 

/** 

 * Set the "select" attribute. If the variable-binding element has a select attribute, then the value of the attribute must be an expression and the value of the variable is the object that results from evaluating the expression. In this case, the content of the variable must be empty.

 * @param v Value to set for the "select" attribute.

 */

public void setSelect(XPath v){

  m_selectPattern=v;

}

