Location: ElemContext.java

Content: 

/** 

 * Constructor to create the root of the element contexts.

 */

ElemContext(){

  m_prev=this;

  m_currentElemDepth=0;

}

Location: ElemContext.java

Content: 

/** 

 * Constructor to create the "stack frame" for a given element depth. This implementation will re-use the context at each depth. If a documents deepest element depth is N then there will be (N+1) such objects created, no more than that.

 * @param previous The "stack frame" corresponding to the new elements parentelement.

 */

private ElemContext(final ElemContext previous){

  m_prev=previous;

  m_currentElemDepth=previous.m_currentElemDepth + 1;

}

Location: ElemContext.java

Content: 

/** 

 * This method pushes an element "stack frame" but with no initialization of values in that frame. This method is used for optimization purposes, like when pushing a stack frame for an HTML "IMG" tag which has no children and the stack frame will almost immediately be popped.

 */

final ElemContext push(){

  ElemContext frame=this.m_next;

  if (frame == null) {

    frame=new ElemContext(this);

    this.m_next=frame;

  }

  frame.m_startTagOpen=true;

  return frame;

}

Location: ElemContext.java

Content: 

/** 

 * Push an element context on the stack. This context keeps track of information gathered about the element.

 * @param uri       The URI for the namespace for the element name, can be nullif it is not yet known.

 * @param localName The local name of the element (no prefix), can be null.

 * @param qName     The qualified name (with prefix, if any) of the element,this parameter is required.

 */

final ElemContext push(final String uri,final String localName,final String qName){

  ElemContext frame=this.m_next;

  if (frame == null) {

    frame=new ElemContext(this);

    this.m_next=frame;

  }

  frame.m_elementName=qName;

  frame.m_elementLocalName=localName;

  frame.m_elementURI=uri;

  frame.m_isCdataSection=false;

  frame.m_startTagOpen=true;

  return frame;

}

