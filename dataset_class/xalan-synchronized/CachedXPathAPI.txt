Location: CachedXPathAPI.java

Content: 

/** 

 * <p> Default constructor. Establishes its own  {@link XPathContext}, and hence its own  {@link org.apache.xml.dtm.DTMManager}. Good choice for simple uses. </p> <p> Note that any particular instance of  {@link CachedXPathAPI} must not beoperated upon by multiple threads without synchronization; we do not currently support multithreaded access to a single {@link org.apache.xml.dtm.DTM}. </p>

 */

public CachedXPathAPI(){

  xpathSupport=new XPathContext(false);

}

Location: CachedXPathAPI.java

Content: 

/** 

 * <p> This constructor shares its  {@link XPathContext} with a pre-existing{@link CachedXPathAPI}. That allows sharing document models ( {@link org.apache.xml.dtm.DTM}) and previously established location state. </p> <p> Note that the original  {@link CachedXPathAPI} and the new one should not beoperated upon concurrently; we do not support multithreaded access to a single  {@link org.apache.xml.dtm.DTM} at this time. Similarly, any particularinstance of  {@link CachedXPathAPI} must not be operated upon by multiplethreads without synchronization. </p> <p> %REVIEW% Should this instead do a clone-and-reset on the XPathSupport object? </p>

 */

public CachedXPathAPI(CachedXPathAPI priorXPathAPI){

  xpathSupport=priorXPathAPI.xpathSupport;

}

Location: CachedXPathAPI.java

Content: 

/** 

 * Evaluate XPath string to an XObject. Using this method, XPath namespace prefixes will be resolved from the namespaceNode.

 * @param contextNode The node to start searching from.

 * @param str         A valid XPath string.

 * @return An XObject, which can be used to obtain a string, number, nodelist,etc, should never be null.

 * @see org.apache.xpath.objects.XObject

 * @see org.apache.xpath.objects.XNull

 * @see org.apache.xpath.objects.XBoolean

 * @see org.apache.xpath.objects.XNumber

 * @see org.apache.xpath.objects.XString

 * @see org.apache.xpath.objects.XRTreeFrag

 * @throws TransformerException

 */

public XObject eval(Node contextNode,String str) throws TransformerException {

  return eval(contextNode,str,contextNode);

}

Location: CachedXPathAPI.java

Content: 

/** 

 * Evaluate XPath string to an XObject. XPath namespace prefixes are resolved from the namespaceNode. The implementation of this is a little slow, since it creates a number of objects each time it is called. This could be optimized to keep the same objects around, but then thread-safety issues would arise.

 * @param contextNode   The node to start searching from.

 * @param str           A valid XPath string.

 * @param namespaceNode The node from which prefixes in the XPath will beresolved to namespaces.

 * @return An XObject, which can be used to obtain a string, number, nodelist,etc, should never be null.

 * @see org.apache.xpath.objects.XObject

 * @see org.apache.xpath.objects.XNull

 * @see org.apache.xpath.objects.XBoolean

 * @see org.apache.xpath.objects.XNumber

 * @see org.apache.xpath.objects.XString

 * @see org.apache.xpath.objects.XRTreeFrag

 * @throws TransformerException

 */

public XObject eval(Node contextNode,String str,Node namespaceNode) throws TransformerException {

  PrefixResolverDefault prefixResolver=new PrefixResolverDefault((namespaceNode.getNodeType() == Node.DOCUMENT_NODE) ? ((Document)namespaceNode).getDocumentElement() : namespaceNode);

  XPath xpath=new XPath(str,null,prefixResolver,XPath.SELECT,null);

  int ctxtNode=xpathSupport.getDTMHandleFromNode(contextNode);

  return xpath.execute(xpathSupport,ctxtNode,prefixResolver);

}

Location: CachedXPathAPI.java

Content: 

/** 

 * Evaluate XPath string to an XObject. XPath namespace prefixes are resolved from the namespaceNode. The implementation of this is a little slow, since it creates a number of objects each time it is called. This could be optimized to keep the same objects around, but then thread-safety issues would arise.

 * @param contextNode    The node to start searching from.

 * @param str            A valid XPath string.

 * @param prefixResolver Will be called if the parser encounters namespaceprefixes, to resolve the prefixes to URLs.

 * @return An XObject, which can be used to obtain a string, number, nodelist,etc, should never be null.

 * @see org.apache.xpath.objects.XObject

 * @see org.apache.xpath.objects.XNull

 * @see org.apache.xpath.objects.XBoolean

 * @see org.apache.xpath.objects.XNumber

 * @see org.apache.xpath.objects.XString

 * @see org.apache.xpath.objects.XRTreeFrag

 * @throws TransformerException

 */

public XObject eval(Node contextNode,String str,PrefixResolver prefixResolver) throws TransformerException {

  XPath xpath=new XPath(str,null,prefixResolver,XPath.SELECT,null);

  XPathContext xpathSupport=new XPathContext(false);

  int ctxtNode=xpathSupport.getDTMHandleFromNode(contextNode);

  return xpath.execute(xpathSupport,ctxtNode,prefixResolver);

}

Location: CachedXPathAPI.java

Content: 

/** 

 * Use an XPath string to select a nodelist. XPath namespace prefixes are resolved from the contextNode.

 * @param contextNode The node to start searching from.

 * @param str         A valid XPath string.

 * @return A NodeIterator, should never be null.

 * @throws TransformerException

 */

public NodeIterator selectNodeIterator(Node contextNode,String str) throws TransformerException {

  return selectNodeIterator(contextNode,str,contextNode);

}

Location: CachedXPathAPI.java

Content: 

/** 

 * Use an XPath string to select a nodelist. XPath namespace prefixes are resolved from the namespaceNode.

 * @param contextNode   The node to start searching from.

 * @param str           A valid XPath string.

 * @param namespaceNode The node from which prefixes in the XPath will beresolved to namespaces.

 * @return A NodeIterator, should never be null.

 * @throws TransformerException

 */

public NodeIterator selectNodeIterator(Node contextNode,String str,Node namespaceNode) throws TransformerException {

  XObject list=eval(contextNode,str,namespaceNode);

  return list.nodeset();

}

Location: CachedXPathAPI.java

Content: 

/** 

 * Use an XPath string to select a nodelist. XPath namespace prefixes are resolved from the contextNode.

 * @param contextNode The node to start searching from.

 * @param str         A valid XPath string.

 * @return A NodeIterator, should never be null.

 * @throws TransformerException

 */

public NodeList selectNodeList(Node contextNode,String str) throws TransformerException {

  return selectNodeList(contextNode,str,contextNode);

}

Location: CachedXPathAPI.java

Content: 

/** 

 * Use an XPath string to select a nodelist. XPath namespace prefixes are resolved from the namespaceNode.

 * @param contextNode   The node to start searching from.

 * @param str           A valid XPath string.

 * @param namespaceNode The node from which prefixes in the XPath will beresolved to namespaces.

 * @return A NodeIterator, should never be null.

 * @throws TransformerException

 */

public NodeList selectNodeList(Node contextNode,String str,Node namespaceNode) throws TransformerException {

  XObject list=eval(contextNode,str,namespaceNode);

  return list.nodelist();

}

Location: CachedXPathAPI.java

Content: 

/** 

 * Use an XPath string to select a single node. XPath namespace prefixes are resolved from the context node, which may not be what you want (see the next method).

 * @param contextNode The node to start searching from.

 * @param str         A valid XPath string.

 * @return The first node found that matches the XPath, or null.

 * @throws TransformerException

 */

public Node selectSingleNode(Node contextNode,String str) throws TransformerException {

  return selectSingleNode(contextNode,str,contextNode);

}

Location: CachedXPathAPI.java

Content: 

/** 

 * Use an XPath string to select a single node. XPath namespace prefixes are resolved from the namespaceNode.

 * @param contextNode   The node to start searching from.

 * @param str           A valid XPath string.

 * @param namespaceNode The node from which prefixes in the XPath will beresolved to namespaces.

 * @return The first node found that matches the XPath, or null.

 * @throws TransformerException

 */

public Node selectSingleNode(Node contextNode,String str,Node namespaceNode) throws TransformerException {

  NodeIterator nl=selectNodeIterator(contextNode,str,namespaceNode);

  return nl.nextNode();

}

