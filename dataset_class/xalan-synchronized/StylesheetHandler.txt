Location: StylesheetHandler.java

Content: 

/** 

 * Check to see if an ID attribute matched the #id, called from startElement.

 * @param attributes The specified or defaulted attributes.

 */

private void checkForFragmentID(Attributes attributes){

  if (!m_shouldProcess) {

    if ((null != attributes) && (null != m_fragmentIDString)) {

      int n=attributes.getLength();

      for (int i=0; i < n; i++) {

        String name=attributes.getQName(i);

        if (name.equals(Constants.ATTRNAME_ID)) {

          String val=attributes.getValue(i);

          if (val.equalsIgnoreCase(m_fragmentIDString)) {

            m_shouldProcess=true;

            m_fragmentID=m_elementID;

          }

        }

      }

    }

  }

}

Location: StylesheetHandler.java

Content: 

/** 

 * Process an expression string into an XPath.

 * @param str A non-null reference to a valid or invalid match pattern string.

 * @return A non-null reference to an XPath object that represents the stringargument.

 * @throws javax.xml.transform.TransformerException if the pattern can not beprocessed.

 * @see <a href="http://www.w3.org/TR/xslt#patterns">Section 5.2 Patterns in

	 *      XSLT Specification</a>

 */

XPath createMatchPatternXPath(String str,ElemTemplateElement owningTemplate) throws javax.xml.transform.TransformerException {

  ErrorListener handler=m_stylesheetProcessor.getErrorListener();

  XPath xpath=new XPath(str,owningTemplate,this,XPath.MATCH,handler,m_funcTable);

  xpath.callVisitors(xpath,new ExpressionVisitor(getStylesheetRoot()));

  return xpath;

}

Location: StylesheetHandler.java

Content: 

/** 

 * Process an expression string into an XPath. Must be public for access by the AVT class.

 * @param str A non-null reference to a valid or invalid XPath expressionstring.

 * @return A non-null reference to an XPath object that represents the stringargument.

 * @throws javax.xml.transform.TransformerException if the expression can not beprocessed.

 * @see <a href="http://www.w3.org/TR/xslt#section-Expressions">Section 4

	 *      Expressions in XSLT Specification</a>

 */

public XPath createXPath(String str,ElemTemplateElement owningTemplate) throws javax.xml.transform.TransformerException {

  ErrorListener handler=m_stylesheetProcessor.getErrorListener();

  XPath xpath=new XPath(str,owningTemplate,this,XPath.SELECT,handler,m_funcTable);

  xpath.callVisitors(xpath,new ExpressionVisitor(getStylesheetRoot()));

  return xpath;

}

Location: StylesheetHandler.java

Content: 

/** 

 * Receive notification of a recoverable XSLT processing error.

 * @param e The error information encoded as an exception.

 * @throws org.xml.sax.SAXException that wraps a{@link javax.xml.transform.TransformerException}if the current {@link javax.xml.transform.ErrorListener#error}method chooses to flag this condition as an error.

 */

public void error(org.xml.sax.SAXParseException e) throws org.xml.sax.SAXException {

  String formattedMsg=e.getMessage();

  SAXSourceLocator locator=getLocator();

  ErrorListener handler=m_stylesheetProcessor.getErrorListener();

  try {

    handler.error(new TransformerException(formattedMsg,locator));

  }

 catch (  TransformerException te) {

    throw new org.xml.sax.SAXException(te);

  }

}

Location: StylesheetHandler.java

Content: 

/** 

 * Tell the user of an error, and probably throw an exception.

 * @param msg An error message.

 * @param e   An error which the SAXException should wrap.

 * @throws org.xml.sax.SAXException that wraps a{@link javax.xml.transform.TransformerException}if the current {@link javax.xml.transform.ErrorListener#error}method chooses to flag this condition as an error.

 * @xsl.usage internal

 */

protected void error(String msg,Exception e) throws org.xml.sax.SAXException {

  SAXSourceLocator locator=getLocator();

  ErrorListener handler=m_stylesheetProcessor.getErrorListener();

  TransformerException pe;

  if (!(e instanceof TransformerException)) {

    pe=(null == e) ? new TransformerException(msg,locator) : new TransformerException(msg,locator,e);

  }

 else   pe=(TransformerException)e;

  if (null != handler) {

    try {

      handler.error(pe);

    }

 catch (    TransformerException te) {

      throw new org.xml.sax.SAXException(te);

    }

  }

 else   throw new org.xml.sax.SAXException(pe);

}

Location: StylesheetHandler.java

Content: 

/** 

 * Tell the user of an error, and probably throw an exception.

 * @param msg  A key into the {@link org.apache.xalan.res.XSLTErrorResources}table, that is one of the WG_ prefixed definitions.

 * @param args An array of arguments for the given warning.

 * @param e    An error which the SAXException should wrap.

 * @throws org.xml.sax.SAXException that wraps a{@link javax.xml.transform.TransformerException}if the current {@link javax.xml.transform.ErrorListener#error}method chooses to flag this condition as an error.

 * @xsl.usage internal

 */

protected void error(String msg,Object args[],Exception e) throws org.xml.sax.SAXException {

  String formattedMsg=XSLMessages.createMessage(msg,args);

  error(formattedMsg,e);

}

Location: StylesheetHandler.java

Content: 

/** 

 * Report a fatal XSLT processing error.

 * @param e The error information encoded as an exception.

 * @throws org.xml.sax.SAXException that wraps a{@link javax.xml.transform.TransformerException}if the current {@link javax.xml.transform.ErrorListener#fatalError}method chooses to flag this condition as an error.

 */

public void fatalError(org.xml.sax.SAXParseException e) throws org.xml.sax.SAXException {

  String formattedMsg=e.getMessage();

  SAXSourceLocator locator=getLocator();

  ErrorListener handler=m_stylesheetProcessor.getErrorListener();

  try {

    handler.fatalError(new TransformerException(formattedMsg,locator));

  }

 catch (  TransformerException te) {

    throw new org.xml.sax.SAXException(te);

  }

}

Location: StylesheetHandler.java

Content: 

/** 

 * Flush the characters buffer.

 * @throws org.xml.sax.SAXException

 */

private void flushCharacters() throws org.xml.sax.SAXException {

  XSLTElementProcessor elemProcessor=getCurrentProcessor();

  if (null != elemProcessor)   elemProcessor.startNonText(this);

}

Location: StylesheetHandler.java

Content: 

/** 

 * Get the current XSLTElementProcessor at the top of the stack.

 * @return Valid XSLTElementProcessor, which should never be null.

 */

XSLTElementProcessor getCurrentProcessor(){

  return (XSLTElementProcessor)m_processors.peek();

}

Location: StylesheetHandler.java

Content: 

/** 

 * Get the current ElemTemplateElement at the top of the stack.

 * @return Valid ElemTemplateElement, which may be null.

 */

ElemTemplateElement getElemTemplateElement(){

  try {

    return (ElemTemplateElement)m_elems.peek();

  }

 catch (  java.util.EmptyStackException ese) {

    return null;

  }

}

Location: StylesheetHandler.java

Content: 

private double getElemVersion(){

  ElemTemplateElement elem=getElemTemplateElement();

  double version=-1;

  while ((version == -1 || version == Constants.XSLTVERSUPPORTED) && elem != null) {

    try {

      version=Double.valueOf(elem.getXmlVersion()).doubleValue();

    }

 catch (    Exception ex) {

      version=-1;

    }

    elem=elem.getParentElem();

  }

  return (version == -1) ? Constants.XSLTVERSUPPORTED : version;

}

Location: StylesheetHandler.java

Content: 

/** 

 * Return the last stylesheet that was popped off the stylesheets stack.

 * @return The last popped stylesheet, or null.

 */

Stylesheet getLastPoppedStylesheet(){

  return m_lastPoppedStylesheet;

}

Location: StylesheetHandler.java

Content: 

/** 

 * Get the current NamespaceSupport object.

 * @return a non-null reference to the current NamespaceSupport object, which isthe top of the namespace support stack.

 */

NamespaceSupport getNamespaceSupport(){

  return (NamespaceSupport)m_nsSupportStack.peek();

}

Location: StylesheetHandler.java

Content: 

/** 

 * Set the node that is originating the SAX event.

 * @return Reference to node that originated the current event.

 * @see org.apache.xml.utils.NodeConsumer

 */

public Node getOriginatingNode(){

  return m_originatingNode;

}

Location: StylesheetHandler.java

Content: 

/** 

 * Given a namespace URI, and a local name or a node type, get the processor for the element, or return null if not allowed.

 * @param uri       The Namespace URI, or an empty string.

 * @param localName The local name (without prefix), or empty string if notnamespace processing.

 * @param rawName   The qualified name (with prefix).

 * @return A non-null reference to a element processor.

 * @throws org.xml.sax.SAXException if the element is not allowed in the foundposition in the stylesheet.

 */

XSLTElementProcessor getProcessorFor(String uri,String localName,String rawName) throws org.xml.sax.SAXException {

  XSLTElementProcessor currentProcessor=getCurrentProcessor();

  XSLTElementDef def=currentProcessor.getElemDef();

  XSLTElementProcessor elemProcessor=def.getProcessorFor(uri,localName);

  if (null == elemProcessor && !(currentProcessor instanceof ProcessorStylesheetDoc) && ((null == getStylesheet() || Double.valueOf(getStylesheet().getVersion()).doubleValue() > Constants.XSLTVERSUPPORTED) || (!uri.equals(Constants.S_XSLNAMESPACEURL) && currentProcessor instanceof ProcessorStylesheetElement) || getElemVersion() > Constants.XSLTVERSUPPORTED)) {

    elemProcessor=def.getProcessorForUnknown(uri,localName);

  }

  if (null == elemProcessor)   error(XSLMessages.createMessage(XSLTErrorResources.ER_NOT_ALLOWED_IN_POSITION,new Object[]{rawName}),null);

  return elemProcessor;

}

Location: StylesheetHandler.java

Content: 

/** 

 * Get the root of the XSLT Schema, which tells us how to transition content handlers, create elements, etc.

 * @return The root XSLT Schema, which should never be null.

 * @xsl.usage internal

 */

public XSLTSchema getSchema(){

  return m_schema;

}

Location: StylesheetHandler.java

Content: 

/** 

 * Get the XSLT TransformerFactoryImpl for needed services. TODO: This method should be renamed.

 * @return The TransformerFactoryImpl that owns this handler.

 */

public TransformerFactoryImpl getStylesheetProcessor(){

  return m_stylesheetProcessor;

}

Location: StylesheetHandler.java

Content: 

/** 

 * See if the imported stylesheet stack already contains the given URL. Used to test for recursive imports.

 * @param hrefUrl non-null reference to a URL string.

 * @return true if the URL is on the import stack.

 */

boolean importStackContains(String hrefUrl){

  return stackContains(m_importStack,hrefUrl);

}

Location: StylesheetHandler.java

Content: 

/** 

 * Do common initialization.

 * @param processor non-null reference to the transformer factory that owns thishandler.

 */

void init(TransformerFactoryImpl processor){

  m_stylesheetProcessor=processor;

  m_processors.push(m_schema.getElementProcessor());

  this.pushNewNamespaceSupport();

}

Location: StylesheetHandler.java

Content: 

/** 

 * Return boolean value from the spacePreserve stack depending on the value of xml:space=default/preserve.

 * @return true if space should be preserved, false otherwise.

 */

boolean isSpacePreserve(){

  return m_spacePreserveStack.peek();

}

Location: StylesheetHandler.java

Content: 

/** 

 * Test whether the _last_ endDocument() has been processed. This is needed as guidance for stylesheet optimization and compilation engines, which generally don't want to start until all included and imported stylesheets have been fully parsed.

 * @return true iff the complete stylesheet tree has been built.

 */

public boolean isStylesheetParsingComplete(){

  return m_parsingComplete;

}

Location: StylesheetHandler.java

Content: 

/** 

 * Returns the next m_docOrderCount number and increments the number for future use.

 */

int nextUid(){

  return m_docOrderCount++;

}

Location: StylesheetHandler.java

Content: 

String peekImportURL(){

  return (String)m_importStack.peek();

}

Location: StylesheetHandler.java

Content: 

Source peekSourceFromURIResolver(){

  return (Source)m_importSourceStack.peek();

}

Location: StylesheetHandler.java

Content: 

/** 

 * Pop a base URI from the stack.

 * @return baseIdentifier.

 */

String popBaseIndentifier(){

  return (String)m_baseIdentifiers.pop();

}

Location: StylesheetHandler.java

Content: 

/** 

 * Pop a Source from a user provided URIResolver, corresponding to the URL popped from the m_importStack.

 */

Source popImportSource(){

  return (Source)m_importSourceStack.pop();

}

Location: StylesheetHandler.java

Content: 

/** 

 * Pop an import href from the stylesheet stack.

 * @return non-null reference to the import URL that was popped.

 */

String popImportURL(){

  return (String)m_importStack.pop();

}

Location: StylesheetHandler.java

Content: 

/** 

 * Pop the current NamespaceSupport object.

 */

void popNamespaceSupport(){

  m_nsSupportStack.pop();

}

Location: StylesheetHandler.java

Content: 

/** 

 * Pop the current XSLTElementProcessor from the top of the stack.

 * @return the XSLTElementProcessor which was popped.

 */

XSLTElementProcessor popProcessor(){

  return (XSLTElementProcessor)m_processors.pop();

}

Location: StylesheetHandler.java

Content: 

/** 

 * Pop boolean value from the spacePreserve stack.

 */

void popSpaceHandling(){

  m_spacePreserveStack.pop();

}

Location: StylesheetHandler.java

Content: 

/** 

 * Pop the last stylesheet pushed, and return the stylesheet that this handler is constructing, and set the last popped stylesheet member. Also pop the stylesheet locator stack.

 * @return The stylesheet popped off the stack, or the last popped stylesheet.

 */

Stylesheet popStylesheet(){

  if (!m_stylesheetLocatorStack.isEmpty())   m_stylesheetLocatorStack.pop();

  if (!m_stylesheets.isEmpty())   m_lastPoppedStylesheet=(Stylesheet)m_stylesheets.pop();

  return m_lastPoppedStylesheet;

}

Location: StylesheetHandler.java

Content: 

/** 

 * Push a base identifier onto the base URI stack.

 * @param baseID The current base identifier for this position in thestylesheet, which may be a fragment identifier, or which may be null.

 * @see <a href="http://www.w3.org/TR/xslt#base-uri"> Section 3.2 Base URI of

	 *      XSLT specification.</a>

 */

void pushBaseIndentifier(String baseID){

  if (null != baseID) {

    int posOfHash=baseID.indexOf('#');

    if (posOfHash > -1) {

      m_fragmentIDString=baseID.substring(posOfHash + 1);

      m_shouldProcess=false;

    }

 else     m_shouldProcess=true;

  }

 else   m_shouldProcess=true;

  m_baseIdentifiers.push(baseID);

}

Location: StylesheetHandler.java

Content: 

/** 

 * Push the Source of an import href onto the stylesheet stack, obtained from a URIResolver, null if there is no URIResolver, or if that resolver returned null.

 */

void pushImportSource(Source sourceFromURIResolver){

  m_importSourceStack.push(sourceFromURIResolver);

}

Location: StylesheetHandler.java

Content: 

/** 

 * Push an import href onto the stylesheet stack.

 * @param hrefUrl non-null reference to the URL for the current importedstylesheet.

 */

void pushImportURL(String hrefUrl){

  m_importStack.push(hrefUrl);

}

Location: StylesheetHandler.java

Content: 

/** 

 * Push a new NamespaceSupport instance.

 */

void pushNewNamespaceSupport(){

  m_nsSupportStack.push(new NamespaceSupport2());

}

Location: StylesheetHandler.java

Content: 

/** 

 * Push the current XSLTElementProcessor onto the top of the stack.

 * @param processor non-null reference to the current element processor.

 */

void pushProcessor(XSLTElementProcessor processor){

  m_processors.push(processor);

}

Location: StylesheetHandler.java

Content: 

/** 

 * Push boolean value on to the spacePreserve stack depending on the value of xml:space=default/preserve.

 * @param attrs list of attributes that were passed to startElement.

 */

void pushSpaceHandling(Attributes attrs) throws org.xml.sax.SAXParseException {

  String value=attrs.getValue("xml:space");

  if (null == value) {

    m_spacePreserveStack.push(m_spacePreserveStack.peekOrFalse());

  }

 else   if (value.equals("preserve")) {

    m_spacePreserveStack.push(true);

  }

 else   if (value.equals("default")) {

    m_spacePreserveStack.push(false);

  }

 else {

    SAXSourceLocator locator=getLocator();

    ErrorListener handler=m_stylesheetProcessor.getErrorListener();

    try {

      handler.error(new TransformerException(XSLMessages.createMessage(XSLTErrorResources.ER_ILLEGAL_XMLSPACE_VALUE,null),locator));

    }

 catch (    TransformerException te) {

      throw new org.xml.sax.SAXParseException(te.getMessage(),locator,te);

    }

    m_spacePreserveStack.push(m_spacePreserveStack.peek());

  }

}

Location: StylesheetHandler.java

Content: 

/** 

 * Push boolean value on to the spacePreserve stack.

 * @param b true if space should be preserved, false otherwise.

 */

void pushSpaceHandling(boolean b) throws org.xml.sax.SAXParseException {

  m_spacePreserveStack.push(b);

}

Location: StylesheetHandler.java

Content: 

/** 

 * Push the current stylesheet being constructed. If no other stylesheets have been pushed onto the stack, assume the argument is a stylesheet root, and also set the stylesheet root member.

 * @param s non-null reference to a stylesheet.

 */

public void pushStylesheet(Stylesheet s){

  if (m_stylesheets.size() == 0)   m_stylesheetRoot=(StylesheetRoot)s;

  m_stylesheets.push(s);

}

Location: StylesheetHandler.java

Content: 

/** 

 * Set the type of stylesheet that should be built or is being processed.

 * @param type Must be one of STYPE_ROOT, STYPE_INCLUDE, or STYPE_IMPORT.

 */

void setStylesheetType(int type){

  m_stylesheetType=type;

}

Location: StylesheetHandler.java

Content: 

/** 

 * Utility function to see if the stack contains the given URL.

 * @param stack non-null reference to a Stack.

 * @param url   URL string on which an equality test will be performed.

 * @return true if the stack contains the url argument.

 */

private boolean stackContains(Stack stack,String url){

  int n=stack.size();

  boolean contains=false;

  for (int i=0; i < n; i++) {

    String url2=(String)stack.elementAt(i);

    if (url2.equals(url)) {

      contains=true;

      break;

    }

  }

  return contains;

}

Location: StylesheetHandler.java

Content: 

/** 

 * Create a StylesheetHandler object, creating a root stylesheet as the target.

 * @param processor non-null reference to the transformer factory that owns thishandler.

 * @throws TransformerConfigurationException if a StylesheetRoot can not beconstructed for some reason.

 */

public StylesheetHandler(TransformerFactoryImpl processor) throws TransformerConfigurationException {

  Class func=org.apache.xalan.templates.FuncDocument.class;

  m_funcTable.installFunction("document",func);

  func=org.apache.xalan.templates.FuncFormatNumb.class;

  m_funcTable.installFunction("format-number",func);

  m_optimize=((Boolean)processor.getAttribute(TransformerFactoryImpl.FEATURE_OPTIMIZE)).booleanValue();

  m_incremental=((Boolean)processor.getAttribute(TransformerFactoryImpl.FEATURE_INCREMENTAL)).booleanValue();

  m_source_location=((Boolean)processor.getAttribute(TransformerFactoryImpl.FEATURE_SOURCE_LOCATION)).booleanValue();

  init(processor);

}

Location: StylesheetHandler.java

Content: 

/** 

 * Receive notification of a XSLT processing warning.

 * @param e The warning information encoded as an exception.

 * @throws org.xml.sax.SAXException that wraps a{@link javax.xml.transform.TransformerException}if the current {@link javax.xml.transform.ErrorListener#warning}method chooses to flag this condition as an error.

 */

public void warning(org.xml.sax.SAXParseException e) throws org.xml.sax.SAXException {

  String formattedMsg=e.getMessage();

  SAXSourceLocator locator=getLocator();

  ErrorListener handler=m_stylesheetProcessor.getErrorListener();

  try {

    handler.warning(new TransformerException(formattedMsg,locator));

  }

 catch (  TransformerException te) {

    throw new org.xml.sax.SAXException(te);

  }

}

