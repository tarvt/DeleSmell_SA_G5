Location: DOM2Helper.java

Content: 

/** 

 * Check node to see if it was created by a DOM implementation that this helper is intended to support. This is currently disabled, and assumes all nodes are acceptable rather than checking that they implement org.apache.xerces.dom.NodeImpl.

 * @param node The node to be tested.

 * @throws TransformerException if the node is not one which this DOM2Helper cansupport. If we return without throwing the exception, the node is compatable.

 * @xsl.usage internal

 */

public void checkNode(Node node) throws TransformerException {

}

Location: DOM2Helper.java

Content: 

/** 

 * Construct an instance.

 */

public DOM2Helper(){

}

Location: DOM2Helper.java

Content: 

/** 

 * Query which document this helper is currently operating on.

 * @return The DOM Document node for this document.

 * @see #setDocument

 */

public Document getDocument(){

  return m_doc;

}

Location: DOM2Helper.java

Content: 

/** 

 * Given an XML ID, return the element. This requires assistance from the DOM and parser, and is meaningful only in the context of a DTD or schema which declares attributes as being of type ID. This information may or may not be available in all parsers, may or may not be available for specific documents, and may or may not be available when validation is not turned on.

 * @param id  The ID to search for, as a String.

 * @param doc The document to search within, as a DOM Document node.

 * @return DOM Element node with an attribute of type ID whose value uniquelymatches the requested id string, or null if there isn't such an element or if the DOM can't answer the question for other reasons.

 */

public Element getElementByID(String id,Document doc){

  return doc.getElementById(id);

}

Location: DOM2Helper.java

Content: 

/** 

 * Returns the local name of the given node. If the node's name begins with a namespace prefix, this is the part after the colon; otherwise it's the full node name. This method is copied from org.apache.xml.utils.DOMHelper

 * @param n the node to be examined.

 * @return String containing the Local Name

 */

private String getLocalNameOfNodeFallback(Node n){

  String qname=n.getNodeName();

  int index=qname.indexOf(':');

  return (index < 0) ? qname : qname.substring(index + 1);

}

Location: DOM2Helper.java

Content: 

/** 

 * Returns the local name of the given node, as defined by the XML Namespaces specification. This is prepared to handle documents built using DOM Level 1 methods by falling back upon explicitly parsing the node name.

 * @param n Node to be examined

 * @return String containing the local name, or null if the node was notassigned a Namespace.

 */

public String getLocalNameOfNode(Node n){

  String name=n.getLocalName();

  return (null == name) ? super.getLocalNameOfNode(n) : name;

}

Location: DOM2Helper.java

Content: 

/** 

 * Returns the Namespace Name (Namespace URI) for the given node. In a Level 2 DOM, you can ask the node itself. Note, however, that doing so conflicts with our decision in getLocalNameOfNode not to trust the that the DOM was indeed created using the Level 2 methods. If Level 1 methods were used, these two functions will disagree with each other. <p> TODO: Reconcile with getLocalNameOfNode.

 * @param n Node to be examined

 * @return String containing the Namespace URI bound to this DOM node at thetime the Node was created.

 */

public String getNamespaceOfNode(Node n){

  return n.getNamespaceURI();

}

Location: DOM2Helper.java

Content: 

/** 

 * Get the XPath-model parent of a node. This version takes advantage of the DOM Level 2 Attr.ownerElement() method; the base version we would otherwise inherit is prepared to fall back on exhaustively walking the document to find an Attr's parent.

 * @param node Node to be examined

 * @return the DOM parent of the input node, if there is one, or theownerElement if the input node is an Attr, or null if the node is a Document, a DocumentFragment, or an orphan.

 */

public static Node getParentOfNode(Node node){

  Node parent=node.getParentNode();

  if (parent == null && (Node.ATTRIBUTE_NODE == node.getNodeType()))   parent=((Attr)node).getOwnerElement();

  return parent;

}

Location: DOM2Helper.java

Content: 

/** 

 * Figure out whether node2 should be considered as being later in the document than node1, in Document Order as defined by the XPath model. This may not agree with the ordering defined by other XML applications. <p> There are some cases where ordering isn't defined, and neither are the results of this function -- though we'll generally return true. <p> TODO: Make sure this does the right thing with attribute nodes!!!

 * @param node1 DOM Node to perform position comparison on.

 * @param node2 DOM Node to perform position comparison on .

 * @return false if node2 comes before node1, otherwise return true. You canthink of this as <code>(node1.documentOrderPosition &lt;= node2.documentOrderPosition)</code>.

 */

public static boolean isNodeAfter(Node node1,Node node2){

  if (node1 instanceof DOMOrder && node2 instanceof DOMOrder) {

    int index1=((DOMOrder)node1).getUid();

    int index2=((DOMOrder)node2).getUid();

    return index1 <= index2;

  }

 else {

    return DOMHelper.isNodeAfter(node1,node2);

  }

}

Location: DOM2Helper.java

Content: 

/** 

 * Parse an XML document. <p> Right now the Xerces DOMParser class is used. This needs fixing, either via jaxp, or via some other, standard method. </p> <p> The application can use this method to instruct the SAX parser to begin parsing an XML document from any valid input source (a character stream, a byte stream, or a URI). </p> <p> Applications may not invoke this method while a parse is in progress (they should create a new Parser instead for each additional XML document). Once a parse is complete, an application may reuse the same Parser object, possibly with a different input source. </p>

 * @param source The input source for the top-level of the XML document.

 * @throws TransformerException if any checked exception is thrown.

 * @xsl.usage internal

 */

public void parse(InputSource source) throws TransformerException {

  try {

    DocumentBuilderFactory builderFactory=DocumentBuilderFactory.newInstance();

    builderFactory.setNamespaceAware(true);

    builderFactory.setValidating(true);

    DocumentBuilder parser=builderFactory.newDocumentBuilder();

    parser.setErrorHandler(new org.apache.xml.utils.DefaultErrorHandler());

    setDocument(parser.parse(source));

  }

 catch (  org.xml.sax.SAXException se) {

    throw new TransformerException(se);

  }

catch (  ParserConfigurationException pce) {

    throw new TransformerException(pce);

  }

catch (  IOException ioe) {

    throw new TransformerException(ioe);

  }

}

Location: DOM2Helper.java

Content: 

/** 

 * Specify which document this helper is currently operating on.

 * @param doc The DOM Document node for this document.

 * @see #getDocument

 */

public void setDocument(Document doc){

  m_doc=doc;

}

Location: DOM2Helper.java

Content: 

/** 

 * Returns true if the DOM implementation handled by this helper supports the SAX ContentHandler interface.

 * @return true (since Xerces does).

 */

public boolean supportsSAX(){

  return true;

}

