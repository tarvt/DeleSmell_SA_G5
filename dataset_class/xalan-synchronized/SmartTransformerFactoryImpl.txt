Location: SmartTransformerFactoryImpl.java

Content: 

private void createXalanTransformerFactory(){

  final String xalanMessage="org.apache.xalan.xsltc.trax.SmartTransformerFactoryImpl " + "could not create an " + "org.apache.xalan.processor.TransformerFactoryImpl.";

  try {

    Class xalanFactClass=ObjectFactory.findProviderClass("org.apache.xalan.processor.TransformerFactoryImpl",ObjectFactory.findClassLoader(),true);

    _xalanFactory=(SAXTransformerFactory)xalanFactClass.newInstance();

  }

 catch (  ClassNotFoundException e) {

    System.err.println(xalanMessage);

  }

catch (  InstantiationException e) {

    System.err.println(xalanMessage);

  }

catch (  IllegalAccessException e) {

    System.err.println(xalanMessage);

  }

  _currFactory=_xalanFactory;

}

Location: SmartTransformerFactoryImpl.java

Content: 

private void createXSLTCTransformerFactory(){

  _xsltcFactory=new TransformerFactoryImpl();

  _currFactory=_xsltcFactory;

}

Location: SmartTransformerFactoryImpl.java

Content: 

public Source getAssociatedStylesheet(Source source,String media,String title,String charset) throws TransformerConfigurationException {

  if (_currFactory == null) {

    createXSLTCTransformerFactory();

  }

  return _currFactory.getAssociatedStylesheet(source,media,title,charset);

}

Location: SmartTransformerFactoryImpl.java

Content: 

/** 

 * Get a TemplatesHandler object that can process SAX ContentHandler events into a Templates object. Uses the org.apache.xalan.xsltc.trax.TransformerFactory.

 */

public TemplatesHandler newTemplatesHandler() throws TransformerConfigurationException {

  if (_xsltcFactory == null) {

    createXSLTCTransformerFactory();

  }

  if (_errorlistener != null) {

    _xsltcFactory.setErrorListener(_errorlistener);

  }

  if (_uriresolver != null) {

    _xsltcFactory.setURIResolver(_uriresolver);

  }

  return _xsltcFactory.newTemplatesHandler();

}

Location: SmartTransformerFactoryImpl.java

Content: 

/** 

 * Create a Templates object that from the input stylesheet Uses the org.apache.xalan.xsltc.trax.TransformerFactory.

 * @param source the stylesheet.

 * @return A Templates object.

 */

public Templates newTemplates(Source source) throws TransformerConfigurationException {

  if (_xsltcFactory == null) {

    createXSLTCTransformerFactory();

  }

  if (_errorlistener != null) {

    _xsltcFactory.setErrorListener(_errorlistener);

  }

  if (_uriresolver != null) {

    _xsltcFactory.setURIResolver(_uriresolver);

  }

  _currFactory=_xsltcFactory;

  return _currFactory.newTemplates(source);

}

Location: SmartTransformerFactoryImpl.java

Content: 

/** 

 * Get a TransformerHandler object that can process SAX ContentHandler events based on a copy transformer. Uses org.apache.xalan.processor.TransformerFactory.

 */

public TransformerHandler newTransformerHandler() throws TransformerConfigurationException {

  if (_xalanFactory == null) {

    createXalanTransformerFactory();

  }

  if (_errorlistener != null) {

    _xalanFactory.setErrorListener(_errorlistener);

  }

  if (_uriresolver != null) {

    _xalanFactory.setURIResolver(_uriresolver);

  }

  return _xalanFactory.newTransformerHandler();

}

Location: SmartTransformerFactoryImpl.java

Content: 

/** 

 * Get a TransformerHandler object that can process SAX ContentHandler events based on a transformer specified by the stylesheet Source. Uses org.apache.xalan.processor.TransformerFactory.

 */

public TransformerHandler newTransformerHandler(Source src) throws TransformerConfigurationException {

  if (_xalanFactory == null) {

    createXalanTransformerFactory();

  }

  if (_errorlistener != null) {

    _xalanFactory.setErrorListener(_errorlistener);

  }

  if (_uriresolver != null) {

    _xalanFactory.setURIResolver(_uriresolver);

  }

  return _xalanFactory.newTransformerHandler(src);

}

Location: SmartTransformerFactoryImpl.java

Content: 

/** 

 * Get a TransformerHandler object that can process SAX ContentHandler events based on a transformer specified by the stylesheet Source. Uses org.apache.xalan.xsltc.trax.TransformerFactory.

 */

public TransformerHandler newTransformerHandler(Templates templates) throws TransformerConfigurationException {

  if (_xsltcFactory == null) {

    createXSLTCTransformerFactory();

  }

  if (_errorlistener != null) {

    _xsltcFactory.setErrorListener(_errorlistener);

  }

  if (_uriresolver != null) {

    _xsltcFactory.setURIResolver(_uriresolver);

  }

  return _xsltcFactory.newTransformerHandler(templates);

}

Location: SmartTransformerFactoryImpl.java

Content: 

/** 

 * Create a Transformer object that from the input stylesheet Uses the org.apache.xalan.processor.TransformerFactory.

 * @param source the stylesheet.

 * @return A Transformer object.

 */

public Transformer newTransformer(Source source) throws TransformerConfigurationException {

  if (_xalanFactory == null) {

    createXalanTransformerFactory();

  }

  if (_errorlistener != null) {

    _xalanFactory.setErrorListener(_errorlistener);

  }

  if (_uriresolver != null) {

    _xalanFactory.setURIResolver(_uriresolver);

  }

  _currFactory=_xalanFactory;

  return _currFactory.newTransformer(source);

}

Location: SmartTransformerFactoryImpl.java

Content: 

/** 

 * Create an XMLFilter that uses the given source as the transformation instructions. Uses org.apache.xalan.xsltc.trax.TransformerFactory.

 */

public XMLFilter newXMLFilter(Source src) throws TransformerConfigurationException {

  if (_xsltcFactory == null) {

    createXSLTCTransformerFactory();

  }

  if (_errorlistener != null) {

    _xsltcFactory.setErrorListener(_errorlistener);

  }

  if (_uriresolver != null) {

    _xsltcFactory.setURIResolver(_uriresolver);

  }

  Templates templates=_xsltcFactory.newTemplates(src);

  if (templates == null)   return null;

  return newXMLFilter(templates);

}

Location: SmartTransformerFactoryImpl.java

Content: 

public XMLFilter newXMLFilter(Templates templates) throws TransformerConfigurationException {

  try {

    return new org.apache.xalan.xsltc.trax.TrAXFilter(templates);

  }

 catch (  TransformerConfigurationException e1) {

    if (_xsltcFactory == null) {

      createXSLTCTransformerFactory();

    }

    ErrorListener errorListener=_xsltcFactory.getErrorListener();

    if (errorListener != null) {

      try {

        errorListener.fatalError(e1);

        return null;

      }

 catch (      TransformerException e2) {

        new TransformerConfigurationException(e2);

      }

    }

    throw e1;

  }

}

Location: SmartTransformerFactoryImpl.java

Content: 

public void setAttribute(String name,Object value) throws IllegalArgumentException {

  if ((name.equals("translet-name")) || (name.equals("debug"))) {

    if (_xsltcFactory == null) {

      createXSLTCTransformerFactory();

    }

    _xsltcFactory.setAttribute(name,value);

  }

 else {

    if (_xalanFactory == null) {

      createXalanTransformerFactory();

    }

    _xalanFactory.setAttribute(name,value);

  }

}

Location: SmartTransformerFactoryImpl.java

Content: 

/** 

 * implementation of the SmartTransformerFactory. This factory uses org.apache.xalan.xsltc.trax.TransformerFactory to return Templates objects; and uses org.apache.xalan.processor.TransformerFactory to return Transformer objects.

 */

public SmartTransformerFactoryImpl(){

}

