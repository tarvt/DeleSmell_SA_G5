Location: DTMNodeProxy.java

Content: 

/** 

 * Create a DTMNodeProxy Node representing a specific Node in a DTM

 * @param dtm  The DTM Reference, must be non-null.

 * @param node The DTM node handle.

 */

public DTMNodeProxy(DTM dtm,int node){

  this.dtm=dtm;

  this.node=node;

}

Location: DTMNodeProxy.java

Content: 

/** 

 * Test for equality based on node number.

 * @param node A DTM node proxy reference.

 * @return true if the given node has the same handle as this node.

 */

public final boolean equals(Node node){

  try {

    DTMNodeProxy dtmp=(DTMNodeProxy)node;

    return (dtmp.node == this.node) && (dtmp.dtm == this.dtm);

  }

 catch (  ClassCastException cce) {

    return false;

  }

}

Location: DTMNodeProxy.java

Content: 

/** 

 * @throws DOMException

 * @see org.w3c.dom.CharacterData

 */

public final String getData() throws DOMException {

  return dtm.getNodeValue(node);

}

Location: DTMNodeProxy.java

Content: 

/** 

 * NON-DOM: Return the DTM node number

 * @return The DTM node handle.

 */

public final int getDTMNodeNumber(){

  return node;

}

Location: DTMNodeProxy.java

Content: 

/** 

 * @see org.w3c.dom.Node

 */

public final Node getOwnerNode(){

  int newnode=dtm.getParent(node);

  return (newnode == DTM.NULL) ? null : dtm.getNode(newnode);

}

Location: DTMNodeProxy.java

Content: 

/** 

 * A PI's "target" states what processor channel the PI's data should be directed to. It is defined differently in HTML and XML. <p> In XML, a PI's "target" is the first (whitespace-delimited) token following the "<?" token that begins the PI. <p> In HTML, target is always null. <p> Note that getNodeName is aliased to getTarget.

 */

public final String getTarget(){

  return dtm.getNodeName(node);

}

Location: DTMNodeProxy.java

Content: 

/** 

 * DOM Level 3 Returns whether this text node contains whitespace in element content, often abusively called "ignorable whitespace".

 */

public boolean isElementContentWhitespace(){

  return false;

}

Location: DTMNodeProxy.java

Content: 

/** 

 * FUTURE DOM: Test node identity, in lieu of Node==Node

 * @param other

 * @return true if the given node has the same handle as this node.

 */

public final boolean sameNodeAs(Node other){

  if (!(other instanceof DTMNodeProxy))   return false;

  DTMNodeProxy that=(DTMNodeProxy)other;

  return this.dtm == that.dtm && this.node == that.node;

}

Location: DTMNodeProxy.java

Content: 

/** 

 * Ask whether we support a given DOM feature. In fact, we do not _fully_ support any DOM feature -- we're a read-only subset -- so arguably we should always return false. Or we could say that we support DOM Core Level 2 but all nodes are read-only. Unclear which answer is least misleading. NON-DOM method. This was present in early drafts of DOM Level 2, but was renamed isSupported. It's present here only because it's cheap, harmless, and might help some poor fool who is still trying to use an early Working Draft of the DOM.

 * @param feature

 * @param version

 * @return false

 */

public final boolean supports(String feature,String version){

  return implementation.hasFeature(feature,version);

}

Location: DTMNodeProxy.java

Content: 

/** 

 * @param listVector

 * @param tempNode

 * @param tagname

 * @param isTagNameWildCard Private method to be used for recursive iterations to obtain elements by tag name.

 */

private final void traverseChildren(Vector listVector,Node tempNode,String tagname,boolean isTagNameWildCard){

  if (tempNode == null) {

    return;

  }

 else {

    if (tempNode.getNodeType() == DTM.ELEMENT_NODE && (isTagNameWildCard || tempNode.getNodeName().equals(tagname))) {

      listVector.add(tempNode);

    }

    if (tempNode.hasChildNodes()) {

      NodeList nodeList=tempNode.getChildNodes();

      for (int i=0; i < nodeList.getLength(); i++) {

        traverseChildren(listVector,nodeList.item(i),tagname,isTagNameWildCard);

      }

    }

  }

}

Location: DTMNodeProxy.java

Content: 

/** 

 * @param listVector

 * @param tempNode

 * @param namespaceURI

 * @param localname

 * @param isNamespaceURIWildCard

 * @param isLocalNameWildCard Private method to be used for recursive iterations to obtain elements by tag name and namespaceURI.

 */

private final void traverseChildren(Vector listVector,Node tempNode,String namespaceURI,String localname,boolean isNamespaceURIWildCard,boolean isLocalNameWildCard){

  if (tempNode == null) {

    return;

  }

 else {

    if (tempNode.getNodeType() == DTM.ELEMENT_NODE && (isLocalNameWildCard || tempNode.getLocalName().equals(localname))) {

      String nsURI=tempNode.getNamespaceURI();

      if ((namespaceURI == null && nsURI == null) || isNamespaceURIWildCard || (namespaceURI != null && namespaceURI.equals(nsURI))) {

        listVector.add(tempNode);

      }

    }

    if (tempNode.hasChildNodes()) {

      NodeList nl=tempNode.getChildNodes();

      for (int i=0; i < nl.getLength(); i++) {

        traverseChildren(listVector,nl.item(i),namespaceURI,localname,isNamespaceURIWildCard,isLocalNameWildCard);

      }

    }

  }

}

