Location: TemplateSubPatternAssociation.java

Content: 

/** 

 * Return the position of the template in document order in the stylesheet.

 * @return The position of the template in the overall template order.

 */

public int getDocOrderPos(){

  return m_template.getUid();

}

Location: TemplateSubPatternAssociation.java

Content: 

/** 

 * Return the import level associated with the stylesheet into which this template is composed.

 * @return The import level of this template.

 */

public final int getImportLevel(){

  return m_template.getStylesheetComposed().getImportCountComposed();

}

Location: TemplateSubPatternAssociation.java

Content: 

/** 

 * Get the next association.

 * @return A valid TemplateSubPatternAssociation, or null.

 */

public final TemplateSubPatternAssociation getNext(){

  return m_next;

}

Location: TemplateSubPatternAssociation.java

Content: 

/** 

 * Get associated XSLT StepPattern.

 * @return An executable StepPattern object, never null.

 */

public final StepPattern getStepPattern(){

  return m_stepPattern;

}

Location: TemplateSubPatternAssociation.java

Content: 

/** 

 * Tell if the pattern for this association is a wildcard.

 * @return true if this pattern is considered to be a wild match.

 */

public final boolean isWild(){

  return m_wild;

}

Location: TemplateSubPatternAssociation.java

Content: 

/** 

 * Return the mode associated with the template.

 * @param xctxt      XPath context to use with this template

 * @param targetNode Target node

 * @param mode       reference, which may be null, to the<a href="http://www.w3.org/TR/xslt#modes">current mode</a>.

 * @return The mode associated with the template.

 * @throws TransformerException

 */

public boolean matches(XPathContext xctxt,int targetNode,QName mode) throws TransformerException {

  double score=m_stepPattern.getMatchScore(xctxt,targetNode);

  return (XPath.MATCH_SCORE_NONE != score) && matchModes(mode,m_template.getMode());

}

Location: TemplateSubPatternAssociation.java

Content: 

/** 

 * Tell if two modes match according to the rules of XSLT.

 * @param m1 First mode to match

 * @param m2 Second mode to match

 * @return True if the two given modes match

 */

private boolean matchModes(QName m1,QName m2){

  return (((null == m1) && (null == m2)) || ((null != m1) && (null != m2) && m1.equals(m2)));

}

Location: TemplateSubPatternAssociation.java

Content: 

/** 

 * Tell if two modes match according to the rules of XSLT.

 * @param m1 mode to match

 * @return True if the given mode matches this template's mode

 */

boolean matchMode(QName m1){

  return matchModes(m1,m_template.getMode());

}

Location: TemplateSubPatternAssociation.java

Content: 

/** 

 * Set the next element on this association list, which should be equal or less in priority to this association, and, if equal priority, should occur before this template in document order.

 * @param mp The next association to score if this one fails.

 */

public void setNext(TemplateSubPatternAssociation mp){

  m_next=mp;

}

Location: TemplateSubPatternAssociation.java

Content: 

/** 

 * Set Target String for this template pattern

 * @param key Target string to set

 */

public void setTargetString(String key){

  m_targetString=key;

}

Location: TemplateSubPatternAssociation.java

Content: 

/** 

 * Construct a match pattern from a pattern and template.

 * @param template The node that contains the template for this pattern.

 * @param pattern  An executable XSLT StepPattern.

 * @param pat      For now a Nodelist that contains old-style element patterns.

 */

TemplateSubPatternAssociation(ElemTemplate template,StepPattern pattern,String pat){

  m_pattern=pat;

  m_template=template;

  m_stepPattern=pattern;

  m_targetString=m_stepPattern.getTargetString();

  m_wild=m_targetString.equals("*");

}

