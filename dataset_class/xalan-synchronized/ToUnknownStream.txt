Location: ToUnknownStream.java

Content: 

/** 

 * Adds an attribute to the currenly open tag

 * @param rawName the attribute name, with prefix (if any)

 * @param value   the value of the parameter

 * @see ExtendedContentHandler#addAttribute(String,String)

 */

public void addAttribute(String rawName,String value){

  if (m_firstTagNotEmitted) {

    flush();

  }

  m_handler.addAttribute(rawName,value);

}

Location: ToUnknownStream.java

Content: 

/** 

 * Adds a unique attribute to the currenly open tag

 */

public void addUniqueAttribute(String rawName,String value,int flags) throws SAXException {

  if (m_firstTagNotEmitted) {

    flush();

  }

  m_handler.addUniqueAttribute(rawName,value,flags);

}

Location: ToUnknownStream.java

Content: 

/** 

 * @see Serializer#asContentHandler()

 * @return the wrapped XML or HTML handler

 */

public ContentHandler asContentHandler() throws IOException {

  return this;

}

Location: ToUnknownStream.java

Content: 

/** 

 * @see org.apache.xml.serializer.Serializer#asDOM3Serializer()

 */

public Object asDOM3Serializer() throws IOException {

  return m_handler.asDOM3Serializer();

}

Location: ToUnknownStream.java

Content: 

/** 

 * @see Serializer#asDOMSerializer()

 */

public DOMSerializer asDOMSerializer() throws IOException {

  return m_handler.asDOMSerializer();

}

Location: ToUnknownStream.java

Content: 

/** 

 * @see SerializationHandler#close()

 */

public void close(){

  m_handler.close();

}

Location: ToUnknownStream.java

Content: 

/** 

 * Pass the call on to the underlying handler

 * @see ExtendedLexicalHandler#comment(String)

 */

public void comment(String comment) throws SAXException {

  if (m_firstTagNotEmitted && m_firstElementName != null) {

    emitFirstTag();

  }

 else   if (m_needToCallStartDocument) {

    m_handler.startDocument();

    m_needToCallStartDocument=false;

  }

  m_handler.comment(comment);

}

Location: ToUnknownStream.java

Content: 

private void emitFirstTag() throws SAXException {

  if (m_firstElementName != null) {

    if (m_wrapped_handler_not_initialized) {

      initStreamOutput();

      m_wrapped_handler_not_initialized=false;

    }

    m_handler.startElement(m_firstElementURI,null,m_firstElementName,m_attributes);

    m_attributes=null;

    if (m_namespacePrefix != null) {

      final int n=m_namespacePrefix.size();

      for (int i=0; i < n; i++) {

        final String prefix=(String)m_namespacePrefix.elementAt(i);

        final String uri=(String)m_namespaceURI.elementAt(i);

        m_handler.startPrefixMapping(prefix,uri,false);

      }

      m_namespacePrefix=null;

      m_namespaceURI=null;

    }

    m_firstTagNotEmitted=false;

  }

}

Location: ToUnknownStream.java

Content: 

protected void firePseudoElement(String elementName){

  if (m_tracer != null) {

    StringBuffer sb=new StringBuffer();

    sb.append('<');

    sb.append(elementName);

    char ch[]=sb.toString().toCharArray();

    m_tracer.fireGenerateEvent(SerializerTrace.EVENTTYPE_OUTPUT_PSEUDO_CHARACTERS,ch,0,ch.length);

  }

}

Location: ToUnknownStream.java

Content: 

private void flush(){

  try {

    if (m_firstTagNotEmitted) {

      emitFirstTag();

    }

    if (m_needToCallStartDocument) {

      m_handler.startDocument();

      m_needToCallStartDocument=false;

    }

  }

 catch (  SAXException e) {

    throw new RuntimeException(e.toString());

  }

}

Location: ToUnknownStream.java

Content: 

/** 

 * @see SerializationHandler#flushPending()

 */

public void flushPending() throws SAXException {

  flush();

  m_handler.flushPending();

}

Location: ToUnknownStream.java

Content: 

/** 

 * Pass the call on to the underlying handler

 * @see XSLOutputAttributes#getDoctypePublic()

 */

public String getDoctypePublic(){

  return m_handler.getDoctypePublic();

}

Location: ToUnknownStream.java

Content: 

/** 

 * Pass the call on to the underlying handler

 * @see XSLOutputAttributes#getDoctypeSystem()

 */

public String getDoctypeSystem(){

  return m_handler.getDoctypeSystem();

}

Location: ToUnknownStream.java

Content: 

/** 

 * Pass the call on to the underlying handler

 * @see XSLOutputAttributes#getIndent()

 */

public boolean getIndent(){

  return m_handler.getIndent();

}

Location: ToUnknownStream.java

Content: 

/** 

 * Pass the call on to the underlying handler

 * @see XSLOutputAttributes#getIndentAmount()

 */

public int getIndentAmount(){

  return m_handler.getIndentAmount();

}

Location: ToUnknownStream.java

Content: 

/** 

 * Utility function for calls to local-name(). Don't want to override static function on SerializerBase So added Unknown suffix to method name.

 */

private String getLocalNameUnknown(String value){

  int idx=value.lastIndexOf(':');

  if (idx >= 0)   value=value.substring(idx + 1);

  idx=value.lastIndexOf('@');

  if (idx >= 0)   value=value.substring(idx + 1);

  return (value);

}

Location: ToUnknownStream.java

Content: 

/** 

 * Pass the call on to the underlying handler

 * @see XSLOutputAttributes#getMediaType()

 */

public String getMediaType(){

  return m_handler.getMediaType();

}

Location: ToUnknownStream.java

Content: 

/** 

 * Get the current namespace mappings. Simply returns the mappings of the wrapped handler.

 * @see ExtendedContentHandler#getNamespaceMappings()

 */

public NamespaceMappings getNamespaceMappings(){

  NamespaceMappings mappings=null;

  if (m_handler != null) {

    mappings=m_handler.getNamespaceMappings();

  }

  return mappings;

}

Location: ToUnknownStream.java

Content: 

public String getNamespaceURIFromPrefix(String prefix){

  return m_handler.getNamespaceURIFromPrefix(prefix);

}

Location: ToUnknownStream.java

Content: 

/** 

 * @see ExtendedContentHandler#getNamespaceURI(java.lang.String,boolean)

 */

public String getNamespaceURI(String qname,boolean isElement){

  return m_handler.getNamespaceURI(qname,isElement);

}

Location: ToUnknownStream.java

Content: 

/** 

 * Pass the call on to the underlying handler

 * @see XSLOutputAttributes#getOmitXMLDeclaration()

 */

public boolean getOmitXMLDeclaration(){

  return m_handler.getOmitXMLDeclaration();

}

Location: ToUnknownStream.java

Content: 

/** 

 * Utility function to return prefix Don't want to override static function on SerializerBase So added Unknown suffix to method name.

 */

private String getPrefixPartUnknown(String qname){

  final int index=qname.indexOf(':');

  return (index > 0) ? qname.substring(0,index) : EMPTYSTRING;

}

Location: ToUnknownStream.java

Content: 

/** 

 * Pass the call on to the underlying handler

 * @see XSLOutputAttributes#getStandalone()

 */

public String getStandalone(){

  return m_handler.getStandalone();

}

Location: ToUnknownStream.java

Content: 

public Transformer getTransformer(){

  return m_handler.getTransformer();

}

Location: ToUnknownStream.java

Content: 

/** 

 * Pass the call on to the underlying handler

 * @see XSLOutputAttributes#getVersion()

 */

public String getVersion(){

  return m_handler.getVersion();

}

Location: ToUnknownStream.java

Content: 

/** 

 * Initialize the wrapped output stream (XML or HTML). If the stream handler should be HTML, then replace the XML handler with an HTML handler. After than send the starting method calls that were cached to the wrapped handler.

 */

private void initStreamOutput() throws SAXException {

  boolean firstElementIsHTML=isFirstElemHTML();

  if (firstElementIsHTML) {

    SerializationHandler oldHandler=m_handler;

    Properties htmlProperties=OutputPropertiesFactory.getDefaultMethodProperties(Method.HTML);

    Serializer serializer=SerializerFactory.getSerializer(htmlProperties);

    m_handler=(SerializationHandler)serializer;

    Writer writer=oldHandler.getWriter();

    if (null != writer)     m_handler.setWriter(writer);

 else {

      OutputStream os=oldHandler.getOutputStream();

      if (null != os)       m_handler.setOutputStream(os);

    }

    m_handler.setVersion(oldHandler.getVersion());

    m_handler.setDoctypeSystem(oldHandler.getDoctypeSystem());

    m_handler.setDoctypePublic(oldHandler.getDoctypePublic());

    m_handler.setMediaType(oldHandler.getMediaType());

    m_handler.setTransformer(oldHandler.getTransformer());

  }

  if (m_needToCallStartDocument) {

    m_handler.startDocument();

    m_needToCallStartDocument=false;

  }

  m_wrapped_handler_not_initialized=false;

}

Location: ToUnknownStream.java

Content: 

/** 

 * Determine if the firts element in the document is <html> or <HTML> This uses the cached first element name, first element prefix and the cached namespaces from previous method calls

 * @return true if the first element is an opening <html> tag

 */

private boolean isFirstElemHTML(){

  boolean isHTML;

  isHTML=getLocalNameUnknown(m_firstElementName).equalsIgnoreCase("html");

  if (isHTML && m_firstElementURI != null && !EMPTYSTRING.equals(m_firstElementURI)) {

    isHTML=false;

  }

  if (isHTML && m_namespacePrefix != null) {

    final int max=m_namespacePrefix.size();

    for (int i=0; i < max; i++) {

      final String prefix=(String)m_namespacePrefix.elementAt(i);

      final String uri=(String)m_namespaceURI.elementAt(i);

      if (m_firstElementPrefix != null && m_firstElementPrefix.equals(prefix) && !EMPTYSTRING.equals(uri)) {

        isHTML=false;

        break;

      }

    }

  }

  return isHTML;

}

Location: ToUnknownStream.java

Content: 

/** 

 * @param URI_and_localNames Vector a list of pairs of URI/localName specifiedin the cdata-section-elements attribute.

 * @see SerializationHandler#setCdataSectionElements(java.util.Vector)

 */

public void setCdataSectionElements(Vector URI_and_localNames){

  m_handler.setCdataSectionElements(URI_and_localNames);

}

Location: ToUnknownStream.java

Content: 

/** 

 * Set the doctype in the underlying XML handler. Remember that this method was called, just in case we need to transfer this doctype to an HTML handler

 * @param doctype the public doctype to set

 * @see XSLOutputAttributes#setDoctypePublic(String)

 */

public void setDoctypePublic(String doctype){

  m_handler.setDoctypePublic(doctype);

  m_setDoctypePublic_called=true;

}

Location: ToUnknownStream.java

Content: 

/** 

 * Set the doctype in the underlying XML handler. Remember that this method was called, just in case we need to transfer this doctype to an HTML handler

 * @param doctype the system doctype to set

 * @see XSLOutputAttributes#setDoctypeSystem(String)

 */

public void setDoctypeSystem(String doctype){

  m_handler.setDoctypeSystem(doctype);

  m_setDoctypeSystem_called=true;

}

Location: ToUnknownStream.java

Content: 

/** 

 * @see XSLOutputAttributes#setDoctype(String,String)

 */

public void setDoctype(String system,String pub){

  m_handler.setDoctypePublic(pub);

  m_handler.setDoctypeSystem(system);

}

Location: ToUnknownStream.java

Content: 

/** 

 * Pass the call on to the underlying handler

 */

public void setIndentAmount(int value){

  m_handler.setIndentAmount(value);

}

Location: ToUnknownStream.java

Content: 

/** 

 * Pass the call on to the underlying handler

 * @see XSLOutputAttributes#setIndent(boolean)

 */

public void setIndent(boolean indent){

  m_handler.setIndent(indent);

}

Location: ToUnknownStream.java

Content: 

/** 

 * @see XSLOutputAttributes#setMediaType(String)

 */

public void setMediaType(String mediaType){

  m_handler.setMediaType(mediaType);

  m_setMediaType_called=true;

}

Location: ToUnknownStream.java

Content: 

/** 

 * Pass the call on to the underlying handler

 * @see XSLOutputAttributes#setOmitXMLDeclaration(boolean)

 */

public void setOmitXMLDeclaration(boolean b){

  m_handler.setOmitXMLDeclaration(b);

}

Location: ToUnknownStream.java

Content: 

/** 

 * This method is used to set the source locator, which might be used to generated an error message.

 * @param locator the source locator

 * @see ExtendedContentHandler#setSourceLocator(javax.xml.transform.SourceLocator)

 */

public void setSourceLocator(SourceLocator locator){

  m_handler.setSourceLocator(locator);

}

Location: ToUnknownStream.java

Content: 

/** 

 * Pass the call on to the underlying handler

 * @see XSLOutputAttributes#setStandalone(String)

 */

public void setStandalone(String standalone){

  m_handler.setStandalone(standalone);

}

Location: ToUnknownStream.java

Content: 

public void setTransformer(Transformer t){

  m_handler.setTransformer(t);

  if ((t instanceof SerializerTrace) && (((SerializerTrace)t).hasTraceListeners())) {

    m_tracer=(SerializerTrace)t;

  }

 else {

    m_tracer=null;

  }

}

Location: ToUnknownStream.java

Content: 

/** 

 * This method cannot be cached because default is different in HTML and XML (we need more than a boolean).

 */

public void setVersion(String version){

  m_handler.setVersion(version);

  m_setVersion_called=true;

}

Location: ToUnknownStream.java

Content: 

/** 

 * Default constructor. Initially this object wraps an XML Stream object, so _handler is never null. That may change later to an HTML Stream object.

 */

public ToUnknownStream(){

  m_handler=new ToXMLStream();

}

