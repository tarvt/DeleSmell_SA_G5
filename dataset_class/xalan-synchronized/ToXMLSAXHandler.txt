Location: ToXMLSAXHandler.java

Content: 

/** 

 * Adds the given attribute to the set of attributes, and also makes sure that the needed prefix/uri mapping is declared, but only if there is a currently open element.

 * @param uri          the URI of the attribute

 * @param localName    the local name of the attribute

 * @param rawName      the qualified name of the attribute

 * @param type         the type of the attribute (probably CDATA)

 * @param value        the value of the attribute

 * @param XSLAttribute true if this attribute is coming from an xsl:attributeelement

 * @see ExtendedContentHandler#addAttribute(String,String,String,String,String)

 */

public void addAttribute(String uri,String localName,String rawName,String type,String value,boolean XSLAttribute) throws SAXException {

  if (m_elemContext.m_startTagOpen) {

    ensurePrefixIsDeclared(uri,rawName);

    addAttributeAlways(uri,localName,rawName,type,value,false);

  }

}

Location: ToXMLSAXHandler.java

Content: 

/** 

 * @see org.xml.sax.ext.DeclHandler#attributeDecl(String,String,String,String,String)

 */

public void attributeDecl(String arg0,String arg1,String arg2,String arg3,String arg4) throws SAXException {

}

Location: ToXMLSAXHandler.java

Content: 

/** 

 * @see ExtendedContentHandler#characters(String)

 */

public void characters(String chars) throws SAXException {

  final int length=chars.length();

  if (length > m_charsBuff.length) {

    m_charsBuff=new char[length * 2 + 1];

  }

  chars.getChars(0,length,m_charsBuff,0);

  this.characters(m_charsBuff,0,length);

}

Location: ToXMLSAXHandler.java

Content: 

/** 

 * Closes ane open cdata tag, and unlike the this.endCDATA() method (from the LexicalHandler) interface, this "internal" method will send the endCDATA() call to the wrapped handler.

 */

public void closeCDATA() throws SAXException {

  if (m_lexHandler != null && m_cdataTagOpen) {

    m_lexHandler.endCDATA();

  }

  m_cdataTagOpen=false;

}

Location: ToXMLSAXHandler.java

Content: 

/** 

 * This method is called when all the data needed for a call to the SAX handler's startElement() method has been gathered.

 */

protected void closeStartTag() throws SAXException {

  m_elemContext.m_startTagOpen=false;

  final String localName=getLocalName(m_elemContext.m_elementName);

  final String uri=getNamespaceURI(m_elemContext.m_elementName,true);

  if (m_needToCallStartDocument) {

    startDocumentInternal();

  }

  m_saxHandler.startElement(uri,localName,m_elemContext.m_elementName,m_attributes);

  m_attributes.clear();

  if (m_state != null)   m_state.setCurrentNode(null);

}

Location: ToXMLSAXHandler.java

Content: 

/** 

 * @see org.xml.sax.ext.DeclHandler#elementDecl(String,String)

 */

public void elementDecl(String arg0,String arg1) throws SAXException {

}

Location: ToXMLSAXHandler.java

Content: 

/** 

 * @see ExtendedContentHandler#endElement(String)

 */

public void endElement(String elemName) throws SAXException {

  endElement(null,null,elemName);

}

Location: ToXMLSAXHandler.java

Content: 

private void ensurePrefixIsDeclared(String ns,String rawName) throws org.xml.sax.SAXException {

  if (ns != null && ns.length() > 0) {

    int index;

    final boolean no_prefix=((index=rawName.indexOf(":")) < 0);

    String prefix=(no_prefix) ? "" : rawName.substring(0,index);

    if (null != prefix) {

      String foundURI=m_prefixMap.lookupNamespace(prefix);

      if ((null == foundURI) || !foundURI.equals(ns)) {

        this.startPrefixMapping(prefix,ns,false);

        if (getShouldOutputNSAttr()) {

          this.addAttributeAlways("http://www.w3.org/2000/xmlns/",no_prefix ? "xmlns" : prefix,no_prefix ? "xmlns" : ("xmlns:" + prefix),"CDATA",ns,false);

        }

      }

    }

  }

}

Location: ToXMLSAXHandler.java

Content: 

/** 

 * @see org.xml.sax.ext.DeclHandler#externalEntityDecl(String,String,String)

 */

public void externalEntityDecl(String arg0,String arg1,String arg2) throws SAXException {

}

Location: ToXMLSAXHandler.java

Content: 

/** 

 * @see Serializer#getOutputFormat()

 */

public Properties getOutputFormat(){

  return null;

}

Location: ToXMLSAXHandler.java

Content: 

/** 

 * @see Serializer#getOutputStream()

 */

public OutputStream getOutputStream(){

  return null;

}

Location: ToXMLSAXHandler.java

Content: 

/** 

 * Do nothing for SAX.

 */

public void indent(int n) throws SAXException {

}

Location: ToXMLSAXHandler.java

Content: 

/** 

 * @see org.xml.sax.ext.DeclHandler#internalEntityDecl(String,String)

 */

public void internalEntityDecl(String arg0,String arg1) throws SAXException {

}

Location: ToXMLSAXHandler.java

Content: 

/** 

 * Send a namespace declaration in the output document. The namespace declaration will not be include if the namespace is already in scope with the same prefix.

 */

public void namespaceAfterStartElement(final String prefix,final String uri) throws SAXException {

  startPrefixMapping(prefix,uri,false);

}

Location: ToXMLSAXHandler.java

Content: 

/** 

 * Undeclare the namespace that is currently pointed to by a given prefix. Inform SAX handler if prefix was previously mapped.

 */

protected boolean popNamespace(String prefix){

  try {

    if (m_prefixMap.popNamespace(prefix)) {

      m_saxHandler.endPrefixMapping(prefix);

      return true;

    }

  }

 catch (  SAXException e) {

  }

  return false;

}

Location: ToXMLSAXHandler.java

Content: 

/** 

 * Reset all of the fields owned by ToXMLSAXHandler class

 */

private void resetToXMLSAXHandler(){

  this.m_escapeSetting=true;

}

Location: ToXMLSAXHandler.java

Content: 

/** 

 * @see DOMSerializer#serialize(Node)

 */

public void serialize(Node node) throws IOException {

}

Location: ToXMLSAXHandler.java

Content: 

/** 

 * @see SerializationHandler#setEscaping(boolean)

 */

public boolean setEscaping(boolean escape) throws SAXException {

  boolean oldEscapeSetting=m_escapeSetting;

  m_escapeSetting=escape;

  if (escape) {

    processingInstruction(Result.PI_ENABLE_OUTPUT_ESCAPING,"");

  }

 else {

    processingInstruction(Result.PI_DISABLE_OUTPUT_ESCAPING,"");

  }

  return oldEscapeSetting;

}

Location: ToXMLSAXHandler.java

Content: 

/** 

 * @see Serializer#setOutputFormat(Properties)

 */

public void setOutputFormat(Properties format){

}

Location: ToXMLSAXHandler.java

Content: 

/** 

 * @see Serializer#setOutputStream(OutputStream)

 */

public void setOutputStream(OutputStream output){

}

Location: ToXMLSAXHandler.java

Content: 

/** 

 * @see Serializer#setWriter(Writer)

 */

public void setWriter(Writer writer){

}

Location: ToXMLSAXHandler.java

Content: 

public void startElement(String elementName) throws SAXException {

  startElement(null,null,elementName,null);

}

Location: ToXMLSAXHandler.java

Content: 

/** 

 * Start an element in the output document. This might be an XML element (<elem>data</elem> type) or a CDATA section.

 */

public void startElement(String elementNamespaceURI,String elementLocalName,String elementName) throws SAXException {

  startElement(elementNamespaceURI,elementLocalName,elementName,null);

}

Location: ToXMLSAXHandler.java

Content: 

/** 

 * Remember the prefix/uri mapping at the current nested element depth.

 * @see org.xml.sax.ContentHandler#startPrefixMapping(String,String)

 * @param prefix      The prefix that maps to the URI

 * @param uri         The URI for the namespace

 * @param shouldFlush a flag indicating if the mapping applies to the currentelement or an up coming child (not used).

 */

public boolean startPrefixMapping(String prefix,String uri,boolean shouldFlush) throws org.xml.sax.SAXException {

  boolean pushed;

  int pushDepth;

  if (shouldFlush) {

    flushPending();

    pushDepth=m_elemContext.m_currentElemDepth + 1;

  }

 else {

    pushDepth=m_elemContext.m_currentElemDepth;

  }

  pushed=m_prefixMap.pushNamespace(prefix,uri,pushDepth);

  if (pushed) {

    m_saxHandler.startPrefixMapping(prefix,uri);

    if (getShouldOutputNSAttr()) {

      String name;

      if (EMPTYSTRING.equals(prefix)) {

        name="xmlns";

        addAttributeAlways(XMLNS_URI,name,name,"CDATA",uri,false);

      }

 else {

        if (!EMPTYSTRING.equals(uri)) {

          name="xmlns:" + prefix;

          addAttributeAlways(XMLNS_URI,prefix,name,"CDATA",uri,false);

        }

      }

    }

  }

  return pushed;

}

Location: ToXMLSAXHandler.java

Content: 

public ToXMLSAXHandler(){

  m_prefixMap=new NamespaceMappings();

  initCDATA();

}

Location: ToXMLSAXHandler.java

Content: 

public ToXMLSAXHandler(ContentHandler handler,LexicalHandler lex,String encoding){

  super(handler,lex,encoding);

  initCDATA();

  m_prefixMap=new NamespaceMappings();

}

Location: ToXMLSAXHandler.java

Content: 

public ToXMLSAXHandler(ContentHandler handler,String encoding){

  super(handler,encoding);

  initCDATA();

  m_prefixMap=new NamespaceMappings();

}

