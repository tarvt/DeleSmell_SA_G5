Location: Function3Args.java

Content: 

/** 

 * @see org.apache.xpath.XPathVisitable#callVisitors(ExpressionOwner,XPathVisitor)

 */

public void callArgVisitors(XPathVisitor visitor){

  super.callArgVisitors(visitor);

  if (null != m_arg2)   m_arg2.callVisitors(new Arg2Owner(),visitor);

}

Location: Function3Args.java

Content: 

/** 

 * Check that the number of arguments passed to this function is correct.

 * @param argNum The number of arguments that is being passed to the function.

 * @throws WrongNumberArgsException

 */

public void checkNumberArgs(int argNum) throws WrongNumberArgsException {

  if (argNum != 3)   reportWrongNumberArgs();

}

Location: Function3Args.java

Content: 

/** 

 * Return the third argument passed to the function (at index 2).

 * @return An expression that represents the third argument passed to thefunction.

 */

public Expression getArg2(){

  return m_arg2;

}

Location: Function3Args.java

Content: 

/** 

 * Constructs and throws a WrongNumberArgException with the appropriate message for this function object.

 * @throws WrongNumberArgsException

 */

protected void reportWrongNumberArgs() throws WrongNumberArgsException {

  throw new WrongNumberArgsException(XSLMessages.createXPATHMessage("three",null));

}

Location: Function3Args.java

Content: 

/** 

 * Set an argument expression for a function. This method is called by the XPath compiler.

 * @param arg    non-null expression that represents the argument.

 * @param argNum The argument number index.

 * @throws WrongNumberArgsException If the argNum parameter is greater than 2.

 */

public void setArg(Expression arg,int argNum) throws WrongNumberArgsException {

  if (argNum < 2)   super.setArg(arg,argNum);

 else   if (2 == argNum) {

    m_arg2=arg;

    arg.exprSetParent(this);

  }

 else   reportWrongNumberArgs();

}

