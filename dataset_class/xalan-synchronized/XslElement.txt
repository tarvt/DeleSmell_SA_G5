Location: XslElement.java

Content: 

/** 

 * This method is now deprecated. The new implemation of this class never declares the default NS.

 */

public boolean declaresDefaultNS(){

  return false;

}

Location: XslElement.java

Content: 

/** 

 * Override this method to make sure that xsl:attributes are not copied to output if this xsl:element is to be ignored

 */

public void translateContents(ClassGenerator classGen,MethodGenerator methodGen){

  final int n=elementCount();

  for (int i=0; i < n; i++) {

    final SyntaxTreeNode item=(SyntaxTreeNode)getContents().elementAt(i);

    if (_ignore && item instanceof XslAttribute)     continue;

    item.translate(classGen,methodGen);

  }

}

Location: XslElement.java

Content: 

/** 

 * This method is called when the name of the element is known at compile time. In this case, there is no need to inspect the element name at runtime to determine if a prefix exists, needs to be generated, etc.

 */

public void translateLiteral(ClassGenerator classGen,MethodGenerator methodGen){

  final ConstantPoolGen cpg=classGen.getConstantPool();

  final InstructionList il=methodGen.getInstructionList();

  if (!_ignore) {

    il.append(methodGen.loadHandler());

    _name.translate(classGen,methodGen);

    il.append(DUP2);

    il.append(methodGen.startElement());

    if (_namespace != null) {

      il.append(methodGen.loadHandler());

      il.append(new PUSH(cpg,_prefix));

      _namespace.translate(classGen,methodGen);

      il.append(methodGen.namespace());

    }

  }

  translateContents(classGen,methodGen);

  if (!_ignore) {

    il.append(methodGen.endElement());

  }

}

