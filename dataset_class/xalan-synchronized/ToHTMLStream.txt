Location: ToHTMLStream.java

Content: 

/** 

 * Calls to this method could be replaced with calls to getElemDesc(name), but this one should be faster.

 */

private ElemDesc getElemDesc2(String name){

  Object obj=m_htmlInfo.get2(name);

  if (null != obj)   return (ElemDesc)obj;

  return m_dummy;

}

Location: ToHTMLStream.java

Content: 

/** 

 * Get a description of the given element.

 * @param name non-null name of element, case insensitive.

 * @return non-null reference to ElemDesc, which may be m_dummy if no elementdescription matches the given name.

 */

public static final ElemDesc getElemDesc(String name){

  Object obj=m_elementFlags.get(name);

  if (null != obj)   return (ElemDesc)obj;

  return m_dummy;

}

Location: ToHTMLStream.java

Content: 

/** 

 * Tells if the formatter should omit the META tag.

 * @return True if the META tag should be omitted.

 */

private final boolean getOmitMetaTag(){

  return m_omitMetaTag;

}

Location: ToHTMLStream.java

Content: 

/** 

 * Tells if the formatter should use special URL escaping.

 * @return True if URLs should be specially escaped with the %xx form.

 */

private final boolean getSpecialEscapeURLs(){

  return m_specialEscapeURLs;

}

Location: ToHTMLStream.java

Content: 

static void initTagReference(Trie m_elementFlags){

  m_elementFlags.put("BASEFONT",new ElemDesc(0 | ElemDesc.EMPTY));

  m_elementFlags.put("FRAME",new ElemDesc(0 | ElemDesc.EMPTY | ElemDesc.BLOCK));

  m_elementFlags.put("FRAMESET",new ElemDesc(0 | ElemDesc.BLOCK));

  m_elementFlags.put("NOFRAMES",new ElemDesc(0 | ElemDesc.BLOCK));

  m_elementFlags.put("ISINDEX",new ElemDesc(0 | ElemDesc.EMPTY | ElemDesc.BLOCK));

  m_elementFlags.put("APPLET",new ElemDesc(0 | ElemDesc.WHITESPACESENSITIVE));

  m_elementFlags.put("CENTER",new ElemDesc(0 | ElemDesc.BLOCK));

  m_elementFlags.put("DIR",new ElemDesc(0 | ElemDesc.BLOCK));

  m_elementFlags.put("MENU",new ElemDesc(0 | ElemDesc.BLOCK));

  m_elementFlags.put("TT",new ElemDesc(0 | ElemDesc.FONTSTYLE));

  m_elementFlags.put("I",new ElemDesc(0 | ElemDesc.FONTSTYLE));

  m_elementFlags.put("B",new ElemDesc(0 | ElemDesc.FONTSTYLE));

  m_elementFlags.put("BIG",new ElemDesc(0 | ElemDesc.FONTSTYLE));

  m_elementFlags.put("SMALL",new ElemDesc(0 | ElemDesc.FONTSTYLE));

  m_elementFlags.put("EM",new ElemDesc(0 | ElemDesc.PHRASE));

  m_elementFlags.put("STRONG",new ElemDesc(0 | ElemDesc.PHRASE));

  m_elementFlags.put("DFN",new ElemDesc(0 | ElemDesc.PHRASE));

  m_elementFlags.put("CODE",new ElemDesc(0 | ElemDesc.PHRASE));

  m_elementFlags.put("SAMP",new ElemDesc(0 | ElemDesc.PHRASE));

  m_elementFlags.put("KBD",new ElemDesc(0 | ElemDesc.PHRASE));

  m_elementFlags.put("VAR",new ElemDesc(0 | ElemDesc.PHRASE));

  m_elementFlags.put("CITE",new ElemDesc(0 | ElemDesc.PHRASE));

  m_elementFlags.put("ABBR",new ElemDesc(0 | ElemDesc.PHRASE));

  m_elementFlags.put("ACRONYM",new ElemDesc(0 | ElemDesc.PHRASE));

  m_elementFlags.put("SUP",new ElemDesc(0 | ElemDesc.SPECIAL | ElemDesc.ASPECIAL));

  m_elementFlags.put("SUB",new ElemDesc(0 | ElemDesc.SPECIAL | ElemDesc.ASPECIAL));

  m_elementFlags.put("SPAN",new ElemDesc(0 | ElemDesc.SPECIAL | ElemDesc.ASPECIAL));

  m_elementFlags.put("BDO",new ElemDesc(0 | ElemDesc.SPECIAL | ElemDesc.ASPECIAL));

  m_elementFlags.put("BR",new ElemDesc(0 | ElemDesc.SPECIAL | ElemDesc.ASPECIAL| ElemDesc.EMPTY| ElemDesc.BLOCK));

  m_elementFlags.put("BODY",new ElemDesc(0 | ElemDesc.BLOCK));

  m_elementFlags.put("ADDRESS",new ElemDesc(0 | ElemDesc.BLOCK | ElemDesc.BLOCKFORM| ElemDesc.BLOCKFORMFIELDSET));

  m_elementFlags.put("DIV",new ElemDesc(0 | ElemDesc.BLOCK | ElemDesc.BLOCKFORM| ElemDesc.BLOCKFORMFIELDSET));

  m_elementFlags.put("A",new ElemDesc(0 | ElemDesc.SPECIAL));

  m_elementFlags.put("MAP",new ElemDesc(0 | ElemDesc.SPECIAL | ElemDesc.ASPECIAL| ElemDesc.BLOCK));

  m_elementFlags.put("AREA",new ElemDesc(0 | ElemDesc.EMPTY | ElemDesc.BLOCK));

  m_elementFlags.put("LINK",new ElemDesc(0 | ElemDesc.HEADMISC | ElemDesc.EMPTY| ElemDesc.BLOCK));

  m_elementFlags.put("IMG",new ElemDesc(0 | ElemDesc.SPECIAL | ElemDesc.ASPECIAL| ElemDesc.EMPTY| ElemDesc.WHITESPACESENSITIVE));

  m_elementFlags.put("OBJECT",new ElemDesc(0 | ElemDesc.SPECIAL | ElemDesc.ASPECIAL| ElemDesc.HEADMISC| ElemDesc.WHITESPACESENSITIVE));

  m_elementFlags.put("PARAM",new ElemDesc(0 | ElemDesc.EMPTY));

  m_elementFlags.put("HR",new ElemDesc(0 | ElemDesc.BLOCK | ElemDesc.BLOCKFORM| ElemDesc.BLOCKFORMFIELDSET| ElemDesc.EMPTY));

  m_elementFlags.put("P",new ElemDesc(0 | ElemDesc.BLOCK | ElemDesc.BLOCKFORM| ElemDesc.BLOCKFORMFIELDSET));

  m_elementFlags.put("H1",new ElemDesc(0 | ElemDesc.HEAD | ElemDesc.BLOCK));

  m_elementFlags.put("H2",new ElemDesc(0 | ElemDesc.HEAD | ElemDesc.BLOCK));

  m_elementFlags.put("H3",new ElemDesc(0 | ElemDesc.HEAD | ElemDesc.BLOCK));

  m_elementFlags.put("H4",new ElemDesc(0 | ElemDesc.HEAD | ElemDesc.BLOCK));

  m_elementFlags.put("H5",new ElemDesc(0 | ElemDesc.HEAD | ElemDesc.BLOCK));

  m_elementFlags.put("H6",new ElemDesc(0 | ElemDesc.HEAD | ElemDesc.BLOCK));

  m_elementFlags.put("PRE",new ElemDesc(0 | ElemDesc.PREFORMATTED | ElemDesc.BLOCK));

  m_elementFlags.put("Q",new ElemDesc(0 | ElemDesc.SPECIAL | ElemDesc.ASPECIAL));

  m_elementFlags.put("BLOCKQUOTE",new ElemDesc(0 | ElemDesc.BLOCK | ElemDesc.BLOCKFORM| ElemDesc.BLOCKFORMFIELDSET));

  m_elementFlags.put("INS",new ElemDesc(0));

  m_elementFlags.put("DEL",new ElemDesc(0));

  m_elementFlags.put("DL",new ElemDesc(0 | ElemDesc.BLOCK | ElemDesc.BLOCKFORM| ElemDesc.BLOCKFORMFIELDSET));

  m_elementFlags.put("DT",new ElemDesc(0 | ElemDesc.BLOCK));

  m_elementFlags.put("DD",new ElemDesc(0 | ElemDesc.BLOCK));

  m_elementFlags.put("OL",new ElemDesc(0 | ElemDesc.LIST | ElemDesc.BLOCK));

  m_elementFlags.put("UL",new ElemDesc(0 | ElemDesc.LIST | ElemDesc.BLOCK));

  m_elementFlags.put("LI",new ElemDesc(0 | ElemDesc.BLOCK));

  m_elementFlags.put("FORM",new ElemDesc(0 | ElemDesc.BLOCK));

  m_elementFlags.put("LABEL",new ElemDesc(0 | ElemDesc.FORMCTRL));

  m_elementFlags.put("INPUT",new ElemDesc(0 | ElemDesc.FORMCTRL | ElemDesc.INLINELABEL| ElemDesc.EMPTY));

  m_elementFlags.put("SELECT",new ElemDesc(0 | ElemDesc.FORMCTRL | ElemDesc.INLINELABEL));

  m_elementFlags.put("OPTGROUP",new ElemDesc(0));

  m_elementFlags.put("OPTION",new ElemDesc(0));

  m_elementFlags.put("TEXTAREA",new ElemDesc(0 | ElemDesc.FORMCTRL | ElemDesc.INLINELABEL));

  m_elementFlags.put("FIELDSET",new ElemDesc(0 | ElemDesc.BLOCK | ElemDesc.BLOCKFORM));

  m_elementFlags.put("LEGEND",new ElemDesc(0));

  m_elementFlags.put("BUTTON",new ElemDesc(0 | ElemDesc.FORMCTRL | ElemDesc.INLINELABEL));

  m_elementFlags.put("TABLE",new ElemDesc(0 | ElemDesc.BLOCK | ElemDesc.BLOCKFORM| ElemDesc.BLOCKFORMFIELDSET));

  m_elementFlags.put("CAPTION",new ElemDesc(0 | ElemDesc.BLOCK));

  m_elementFlags.put("THEAD",new ElemDesc(0 | ElemDesc.BLOCK));

  m_elementFlags.put("TFOOT",new ElemDesc(0 | ElemDesc.BLOCK));

  m_elementFlags.put("TBODY",new ElemDesc(0 | ElemDesc.BLOCK));

  m_elementFlags.put("COLGROUP",new ElemDesc(0 | ElemDesc.BLOCK));

  m_elementFlags.put("COL",new ElemDesc(0 | ElemDesc.EMPTY | ElemDesc.BLOCK));

  m_elementFlags.put("TR",new ElemDesc(0 | ElemDesc.BLOCK));

  m_elementFlags.put("TH",new ElemDesc(0));

  m_elementFlags.put("TD",new ElemDesc(0));

  m_elementFlags.put("HEAD",new ElemDesc(0 | ElemDesc.BLOCK | ElemDesc.HEADELEM));

  m_elementFlags.put("TITLE",new ElemDesc(0 | ElemDesc.BLOCK));

  m_elementFlags.put("BASE",new ElemDesc(0 | ElemDesc.EMPTY | ElemDesc.BLOCK));

  m_elementFlags.put("META",new ElemDesc(0 | ElemDesc.HEADMISC | ElemDesc.EMPTY| ElemDesc.BLOCK));

  m_elementFlags.put("STYLE",new ElemDesc(0 | ElemDesc.HEADMISC | ElemDesc.RAW| ElemDesc.BLOCK));

  m_elementFlags.put("SCRIPT",new ElemDesc(0 | ElemDesc.SPECIAL | ElemDesc.ASPECIAL| ElemDesc.HEADMISC| ElemDesc.RAW));

  m_elementFlags.put("NOSCRIPT",new ElemDesc(0 | ElemDesc.BLOCK | ElemDesc.BLOCKFORM| ElemDesc.BLOCKFORMFIELDSET));

  m_elementFlags.put("HTML",new ElemDesc(0 | ElemDesc.BLOCK | ElemDesc.HTMLELEM));

  m_elementFlags.put("FONT",new ElemDesc(0 | ElemDesc.FONTSTYLE));

  m_elementFlags.put("S",new ElemDesc(0 | ElemDesc.FONTSTYLE));

  m_elementFlags.put("STRIKE",new ElemDesc(0 | ElemDesc.FONTSTYLE));

  m_elementFlags.put("U",new ElemDesc(0 | ElemDesc.FONTSTYLE));

  m_elementFlags.put("NOBR",new ElemDesc(0 | ElemDesc.FONTSTYLE));

  m_elementFlags.put("IFRAME",new ElemDesc(0 | ElemDesc.BLOCK | ElemDesc.BLOCKFORM| ElemDesc.BLOCKFORMFIELDSET));

  m_elementFlags.put("LAYER",new ElemDesc(0 | ElemDesc.BLOCK | ElemDesc.BLOCKFORM| ElemDesc.BLOCKFORMFIELDSET));

  m_elementFlags.put("ILAYER",new ElemDesc(0 | ElemDesc.BLOCK | ElemDesc.BLOCKFORM| ElemDesc.BLOCKFORMFIELDSET));

  ElemDesc elemDesc;

  elemDesc=(ElemDesc)m_elementFlags.get("a");

  elemDesc.setAttr("HREF",ElemDesc.ATTRURL);

  elemDesc.setAttr("NAME",ElemDesc.ATTRURL);

  elemDesc=(ElemDesc)m_elementFlags.get("area");

  elemDesc.setAttr("HREF",ElemDesc.ATTRURL);

  elemDesc.setAttr("NOHREF",ElemDesc.ATTREMPTY);

  elemDesc=(ElemDesc)m_elementFlags.get("base");

  elemDesc.setAttr("HREF",ElemDesc.ATTRURL);

  elemDesc=(ElemDesc)m_elementFlags.get("button");

  elemDesc.setAttr("DISABLED",ElemDesc.ATTREMPTY);

  elemDesc=(ElemDesc)m_elementFlags.get("blockquote");

  elemDesc.setAttr("CITE",ElemDesc.ATTRURL);

  elemDesc=(ElemDesc)m_elementFlags.get("del");

  elemDesc.setAttr("CITE",ElemDesc.ATTRURL);

  elemDesc=(ElemDesc)m_elementFlags.get("dir");

  elemDesc.setAttr("COMPACT",ElemDesc.ATTREMPTY);

  elemDesc=(ElemDesc)m_elementFlags.get("div");

  elemDesc.setAttr("SRC",ElemDesc.ATTRURL);

  elemDesc.setAttr("NOWRAP",ElemDesc.ATTREMPTY);

  elemDesc=(ElemDesc)m_elementFlags.get("dl");

  elemDesc.setAttr("COMPACT",ElemDesc.ATTREMPTY);

  elemDesc=(ElemDesc)m_elementFlags.get("form");

  elemDesc.setAttr("ACTION",ElemDesc.ATTRURL);

  elemDesc=(ElemDesc)m_elementFlags.get("frame");

  elemDesc.setAttr("SRC",ElemDesc.ATTRURL);

  elemDesc.setAttr("LONGDESC",ElemDesc.ATTRURL);

  elemDesc.setAttr("NORESIZE",ElemDesc.ATTREMPTY);

  elemDesc=(ElemDesc)m_elementFlags.get("head");

  elemDesc.setAttr("PROFILE",ElemDesc.ATTRURL);

  elemDesc=(ElemDesc)m_elementFlags.get("hr");

  elemDesc.setAttr("NOSHADE",ElemDesc.ATTREMPTY);

  elemDesc=(ElemDesc)m_elementFlags.get("iframe");

  elemDesc.setAttr("SRC",ElemDesc.ATTRURL);

  elemDesc.setAttr("LONGDESC",ElemDesc.ATTRURL);

  elemDesc=(ElemDesc)m_elementFlags.get("ilayer");

  elemDesc.setAttr("SRC",ElemDesc.ATTRURL);

  elemDesc=(ElemDesc)m_elementFlags.get("img");

  elemDesc.setAttr("SRC",ElemDesc.ATTRURL);

  elemDesc.setAttr("LONGDESC",ElemDesc.ATTRURL);

  elemDesc.setAttr("USEMAP",ElemDesc.ATTRURL);

  elemDesc.setAttr("ISMAP",ElemDesc.ATTREMPTY);

  elemDesc=(ElemDesc)m_elementFlags.get("input");

  elemDesc.setAttr("SRC",ElemDesc.ATTRURL);

  elemDesc.setAttr("USEMAP",ElemDesc.ATTRURL);

  elemDesc.setAttr("CHECKED",ElemDesc.ATTREMPTY);

  elemDesc.setAttr("DISABLED",ElemDesc.ATTREMPTY);

  elemDesc.setAttr("ISMAP",ElemDesc.ATTREMPTY);

  elemDesc.setAttr("READONLY",ElemDesc.ATTREMPTY);

  elemDesc=(ElemDesc)m_elementFlags.get("ins");

  elemDesc.setAttr("CITE",ElemDesc.ATTRURL);

  elemDesc=(ElemDesc)m_elementFlags.get("layer");

  elemDesc.setAttr("SRC",ElemDesc.ATTRURL);

  elemDesc=(ElemDesc)m_elementFlags.get("link");

  elemDesc.setAttr("HREF",ElemDesc.ATTRURL);

  elemDesc=(ElemDesc)m_elementFlags.get("menu");

  elemDesc.setAttr("COMPACT",ElemDesc.ATTREMPTY);

  elemDesc=(ElemDesc)m_elementFlags.get("object");

  elemDesc.setAttr("CLASSID",ElemDesc.ATTRURL);

  elemDesc.setAttr("CODEBASE",ElemDesc.ATTRURL);

  elemDesc.setAttr("DATA",ElemDesc.ATTRURL);

  elemDesc.setAttr("ARCHIVE",ElemDesc.ATTRURL);

  elemDesc.setAttr("USEMAP",ElemDesc.ATTRURL);

  elemDesc.setAttr("DECLARE",ElemDesc.ATTREMPTY);

  elemDesc=(ElemDesc)m_elementFlags.get("ol");

  elemDesc.setAttr("COMPACT",ElemDesc.ATTREMPTY);

  elemDesc=(ElemDesc)m_elementFlags.get("optgroup");

  elemDesc.setAttr("DISABLED",ElemDesc.ATTREMPTY);

  elemDesc=(ElemDesc)m_elementFlags.get("option");

  elemDesc.setAttr("SELECTED",ElemDesc.ATTREMPTY);

  elemDesc.setAttr("DISABLED",ElemDesc.ATTREMPTY);

  elemDesc=(ElemDesc)m_elementFlags.get("q");

  elemDesc.setAttr("CITE",ElemDesc.ATTRURL);

  elemDesc=(ElemDesc)m_elementFlags.get("script");

  elemDesc.setAttr("SRC",ElemDesc.ATTRURL);

  elemDesc.setAttr("FOR",ElemDesc.ATTRURL);

  elemDesc.setAttr("DEFER",ElemDesc.ATTREMPTY);

  elemDesc=(ElemDesc)m_elementFlags.get("select");

  elemDesc.setAttr("DISABLED",ElemDesc.ATTREMPTY);

  elemDesc.setAttr("MULTIPLE",ElemDesc.ATTREMPTY);

  elemDesc=(ElemDesc)m_elementFlags.get("table");

  elemDesc.setAttr("NOWRAP",ElemDesc.ATTREMPTY);

  elemDesc=(ElemDesc)m_elementFlags.get("td");

  elemDesc.setAttr("NOWRAP",ElemDesc.ATTREMPTY);

  elemDesc=(ElemDesc)m_elementFlags.get("textarea");

  elemDesc.setAttr("DISABLED",ElemDesc.ATTREMPTY);

  elemDesc.setAttr("READONLY",ElemDesc.ATTREMPTY);

  elemDesc=(ElemDesc)m_elementFlags.get("th");

  elemDesc.setAttr("NOWRAP",ElemDesc.ATTREMPTY);

  elemDesc=(ElemDesc)m_elementFlags.get("tr");

  elemDesc.setAttr("NOWRAP",ElemDesc.ATTREMPTY);

  elemDesc=(ElemDesc)m_elementFlags.get("ul");

  elemDesc.setAttr("COMPACT",ElemDesc.ATTREMPTY);

}

Location: ToHTMLStream.java

Content: 

/** 

 * Tell if a character is an ASCII digit.

 */

private boolean isASCIIDigit(char c){

  return (c >= '0' && c <= '9');

}

Location: ToHTMLStream.java

Content: 

/** 

 * Dmitri Ilyin: Makes sure if the String is HH encoded sign.

 * @param str must be 2 characters long

 * @return true or false

 */

private boolean isHHSign(String str){

  boolean sign=true;

  try {

    char r=(char)Integer.parseInt(str,16);

  }

 catch (  NumberFormatException e) {

    sign=false;

  }

  return sign;

}

Location: ToHTMLStream.java

Content: 

/** 

 * Make an integer into an HH hex value. Does no checking on the size of the input, since this is only meant to be used locally by writeAttrURI.

 * @param i must be a value less than 255.

 * @return should be a two character string.

 */

private static String makeHHString(int i){

  String s=Integer.toHexString(i).toUpperCase();

  if (s.length() == 1) {

    s="0" + s;

  }

  return s;

}

Location: ToHTMLStream.java

Content: 

/** 

 * This method should only get called once. If a DOCTYPE declaration needs to get written out, it will be written out. If it doesn't need to be written out, then the call to this method has no effect.

 */

private void outputDocTypeDecl(String name) throws SAXException {

  if (true == m_needToOutputDocTypeDecl) {

    String doctypeSystem=getDoctypeSystem();

    String doctypePublic=getDoctypePublic();

    if ((null != doctypeSystem) || (null != doctypePublic)) {

      final java.io.Writer writer=m_writer;

      try {

        writer.write("<!DOCTYPE ");

        writer.write(name);

        if (null != doctypePublic) {

          writer.write(" PUBLIC \"");

          writer.write(doctypePublic);

          writer.write('"');

        }

        if (null != doctypeSystem) {

          if (null == doctypePublic)           writer.write(" SYSTEM \"");

 else           writer.write(" \"");

          writer.write(doctypeSystem);

          writer.write('"');

        }

        writer.write('>');

        outputLineSep();

      }

 catch (      IOException e) {

        throw new SAXException(e);

      }

    }

  }

  m_needToOutputDocTypeDecl=false;

}

Location: ToHTMLStream.java

Content: 

/** 

 * Process the attributes, which means to write out the currently collected attributes to the writer. The attributes are not cleared by this method

 * @param writer the writer to write processed attributes to.

 * @param nAttrs the number of attributes in m_attributes to be processed

 * @throws org.xml.sax.SAXException

 */

public void processAttributes(java.io.Writer writer,int nAttrs) throws IOException, SAXException {

  for (int i=0; i < nAttrs; i++) {

    processAttribute(writer,m_attributes.getQName(i),m_attributes.getValue(i),m_elemContext.m_elementDesc);

  }

}

Location: ToHTMLStream.java

Content: 

/** 

 * Process an attribute.

 * @param writer   The writer to write the processed output to.

 * @param name     The name of the attribute.

 * @param value    The value of the attribute.

 * @param elemDesc The description of the HTML element that has this attribute.

 * @throws org.xml.sax.SAXException

 */

protected void processAttribute(java.io.Writer writer,String name,String value,ElemDesc elemDesc) throws IOException {

  writer.write(' ');

  if (((value.length() == 0) || value.equalsIgnoreCase(name)) && elemDesc != null && elemDesc.isAttrFlagSet(name,ElemDesc.ATTREMPTY)) {

    writer.write(name);

  }

 else {

    writer.write(name);

    writer.write("=\"");

    if (elemDesc != null && elemDesc.isAttrFlagSet(name,ElemDesc.ATTRURL))     writeAttrURI(writer,value,m_specialEscapeURLs);

 else     writeAttrString(writer,value,this.getEncoding());

    writer.write('"');

  }

}

Location: ToHTMLStream.java

Content: 

private void resetToHTMLStream(){

  m_inBlockElem=false;

  m_inDTD=false;

  m_omitMetaTag=false;

  m_specialEscapeURLs=true;

}

Location: ToHTMLStream.java

Content: 

/** 

 * Tells if the formatter should omit the META tag.

 * @param bool True if the META tag should be omitted.

 */

public void setOmitMetaTag(boolean bool){

  m_omitMetaTag=bool;

}

Location: ToHTMLStream.java

Content: 

/** 

 * Tells if the formatter should use special URL escaping.

 * @param bool True if URLs should be specially escaped with the %xx form.

 */

public void setSpecialEscapeURLs(boolean bool){

  m_specialEscapeURLs=bool;

}

Location: ToHTMLStream.java

Content: 

/** 

 * Default constructor.

 */

public ToHTMLStream(){

  super();

  m_doIndent=true;

  m_charInfo=m_htmlcharInfo;

  m_prefixMap=new NamespaceMappings();

}

Location: ToHTMLStream.java

Content: 

/** 

 * Writes the specified <var>string</var> after substituting <VAR>specials</VAR>, and UTF-16 surrogates for character references <CODE>&amp;#xnn</CODE>.

 * @param string   String to convert to XML format.

 * @param encoding CURRENTLY NOT IMPLEMENTED.

 * @throws org.xml.sax.SAXException

 */

public void writeAttrString(final java.io.Writer writer,String string,String encoding) throws IOException {

  final int end=string.length();

  if (end > m_attrBuff.length) {

    m_attrBuff=new char[end * 2 + 1];

  }

  string.getChars(0,end,m_attrBuff,0);

  final char[] chars=m_attrBuff;

  int cleanStart=0;

  int cleanLength=0;

  char ch=0;

  for (int i=0; i < end; i++) {

    ch=chars[i];

    if (escapingNotNeeded(ch) && (!m_charInfo.shouldMapAttrChar(ch))) {

      cleanLength++;

    }

 else     if ('<' == ch || '>' == ch) {

      cleanLength++;

    }

 else     if (('&' == ch) && ((i + 1) < end) && ('{' == chars[i + 1])) {

      cleanLength++;

    }

 else {

      if (cleanLength > 0) {

        writer.write(chars,cleanStart,cleanLength);

        cleanLength=0;

      }

      int pos=accumDefaultEntity(writer,ch,i,chars,end,false,true);

      if (i != pos) {

        i=pos - 1;

      }

 else {

        if (Encodings.isHighUTF16Surrogate(ch)) {

          writeUTF16Surrogate(ch,chars,i,end);

          i++;

        }

        String outputStringForChar=m_charInfo.getOutputStringForChar(ch);

        if (null != outputStringForChar) {

          writer.write(outputStringForChar);

        }

 else         if (escapingNotNeeded(ch)) {

          writer.write(ch);

        }

 else {

          writer.write("&#");

          writer.write(Integer.toString(ch));

          writer.write(';');

        }

      }

      cleanStart=i + 1;

    }

  }

  if (cleanLength > 1) {

    if (cleanStart == 0)     writer.write(string);

 else     writer.write(chars,cleanStart,cleanLength);

  }

 else   if (cleanLength == 1) {

    writer.write(ch);

  }

}

Location: ToHTMLStream.java

Content: 

/** 

 * Write the specified <var>string</var> after substituting non ASCII characters, with <CODE>%HH</CODE>, where HH is the hex of the byte value.

 * @param string        String to convert to XML format.

 * @param doURLEscaping True if we should try to encode as perhttp://www.ietf.org/rfc/rfc2396.txt.

 * @throws org.xml.sax.SAXException if a bad surrogate pair is detected.

 */

public void writeAttrURI(final java.io.Writer writer,String string,boolean doURLEscaping) throws IOException {

  final int end=string.length();

  if (end > m_attrBuff.length) {

    m_attrBuff=new char[end * 2 + 1];

  }

  string.getChars(0,end,m_attrBuff,0);

  final char[] chars=m_attrBuff;

  int cleanStart=0;

  int cleanLength=0;

  char ch=0;

  for (int i=0; i < end; i++) {

    ch=chars[i];

    if ((ch < 32) || (ch > 126)) {

      if (cleanLength > 0) {

        writer.write(chars,cleanStart,cleanLength);

        cleanLength=0;

      }

      if (doURLEscaping) {

        if (ch <= 0x7F) {

          writer.write('%');

          writer.write(makeHHString(ch));

        }

 else         if (ch <= 0x7FF) {

          int high=(ch >> 6) | 0xC0;

          int low=(ch & 0x3F) | 0x80;

          writer.write('%');

          writer.write(makeHHString(high));

          writer.write('%');

          writer.write(makeHHString(low));

        }

 else         if (Encodings.isHighUTF16Surrogate(ch)) {

          int highSurrogate=((int)ch) & 0x03FF;

          int wwww=((highSurrogate & 0x03C0) >> 6);

          int uuuuu=wwww + 1;

          int zzzz=(highSurrogate & 0x003C) >> 2;

          int yyyyyy=((highSurrogate & 0x0003) << 4) & 0x30;

          ch=chars[++i];

          int lowSurrogate=((int)ch) & 0x03FF;

          yyyyyy=yyyyyy | ((lowSurrogate & 0x03C0) >> 6);

          int xxxxxx=(lowSurrogate & 0x003F);

          int byte1=0xF0 | (uuuuu >> 2);

          int byte2=0x80 | (((uuuuu & 0x03) << 4) & 0x30) | zzzz;

          int byte3=0x80 | yyyyyy;

          int byte4=0x80 | xxxxxx;

          writer.write('%');

          writer.write(makeHHString(byte1));

          writer.write('%');

          writer.write(makeHHString(byte2));

          writer.write('%');

          writer.write(makeHHString(byte3));

          writer.write('%');

          writer.write(makeHHString(byte4));

        }

 else {

          int high=(ch >> 12) | 0xE0;

          int middle=((ch & 0x0FC0) >> 6) | 0x80;

          int low=(ch & 0x3F) | 0x80;

          writer.write('%');

          writer.write(makeHHString(high));

          writer.write('%');

          writer.write(makeHHString(middle));

          writer.write('%');

          writer.write(makeHHString(low));

        }

      }

 else       if (escapingNotNeeded(ch)) {

        writer.write(ch);

      }

 else {

        writer.write("&#");

        writer.write(Integer.toString(ch));

        writer.write(';');

      }

      cleanStart=i + 1;

    }

 else     if (ch == '"') {

      if (cleanLength > 0) {

        writer.write(chars,cleanStart,cleanLength);

        cleanLength=0;

      }

      if (doURLEscaping)       writer.write("%22");

 else       writer.write("&quot;");

      cleanStart=i + 1;

    }

 else     if (ch == '&') {

      if (cleanLength > 0) {

        writer.write(chars,cleanStart,cleanLength);

        cleanLength=0;

      }

      writer.write("&amp;");

      cleanStart=i + 1;

    }

 else {

      cleanLength++;

    }

  }

  if (cleanLength > 1) {

    if (cleanStart == 0)     writer.write(string);

 else     writer.write(chars,cleanStart,cleanLength);

  }

 else   if (cleanLength == 1) {

    writer.write(ch);

  }

}

