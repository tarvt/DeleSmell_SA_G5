Location: ElemExtensionDecl.java

Content: 

/** 

 * Constructor ElemExtensionDecl

 */

public ElemExtensionDecl(){

}

Location: ElemExtensionDecl.java

Content: 

/** 

 * Return the count of elements defined for this extension element

 * @return the count of elements defined for this extension element

 */

public int getElementCount(){

  return (null != m_elements) ? m_elements.size() : 0;

}

Location: ElemExtensionDecl.java

Content: 

/** 

 * Get StringVector of elements defined for this extension

 * @return StringVector of elements defined for this extension

 */

public StringVector getElements(){

  return m_elements;

}

Location: ElemExtensionDecl.java

Content: 

/** 

 * Get count of functions defined in this extension element

 * @return count of functions defined in this extension element

 */

public int getFunctionCount(){

  return (null != m_functions) ? m_functions.size() : 0;

}

Location: ElemExtensionDecl.java

Content: 

/** 

 * Get the names of functions defined in this extension

 * @return StringVector holding the names of functions defined in this extension

 */

public StringVector getFunctions(){

  return m_functions;

}

Location: ElemExtensionDecl.java

Content: 

/** 

 * This function will be called on top-level elements only, just before the transform begins.

 * @param transformer The XSLT TransformerFactory.

 * @throws TransformerException

 */

public void runtimeInit(TransformerImpl transformer) throws TransformerException {

}

Location: ElemExtensionDecl.java

Content: 

/** 

 * Set StringVector of elements for this extension

 * @param v StringVector of elements to set

 */

public void setElements(StringVector v){

  m_elements=v;

}

Location: ElemExtensionDecl.java

Content: 

/** 

 * Set the names of functions defined in this extension

 * @param v StringVector holding the names of functions defined in thisextension

 */

public void setFunctions(StringVector v){

  m_functions=v;

}

