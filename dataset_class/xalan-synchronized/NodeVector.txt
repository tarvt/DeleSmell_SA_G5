Location: NodeVector.java

Content: 

/** 

 * Insert a node in order in the list.

 * @param value Node to insert

 */

public void insertInOrder(int value){

  for (int i=0; i < m_firstFree; i++) {

    if (value < m_map[i]) {

      insertElementAt(value,i);

      return;

    }

  }

  addElement(value);

}

Location: NodeVector.java

Content: 

/** 

 * Default constructor.

 */

public NodeVector(){

  m_blocksize=32;

  m_mapSize=0;

}

Location: NodeVector.java

Content: 

/** 

 * Construct a NodeVector, using the given block size.

 * @param blocksize Size of blocks to allocate

 */

public NodeVector(int blocksize){

  m_blocksize=blocksize;

  m_mapSize=0;

}

Location: NodeVector.java

Content: 

/** 

 * Push a pair of nodes into the stack. Special purpose method for TransformerImpl, pushElemTemplateElement. Performance critical.

 * @param v1 First node to add to vector

 * @param v2 Second node to add to vector

 */

public final void pushPair(int v1,int v2){

  if (null == m_map) {

    m_map=new int[m_blocksize];

    m_mapSize=m_blocksize;

  }

 else {

    if ((m_firstFree + 2) >= m_mapSize) {

      m_mapSize+=m_blocksize;

      int newMap[]=new int[m_mapSize];

      System.arraycopy(m_map,0,newMap,0,m_firstFree);

      m_map=newMap;

    }

  }

  m_map[m_firstFree]=v1;

  m_map[m_firstFree + 1]=v2;

  m_firstFree+=2;

}

Location: NodeVector.java

Content: 

/** 

 * Append a Node onto the vector.

 * @param value Node to add to the vector

 */

public final void push(int value){

  int ff=m_firstFree;

  if ((ff + 1) >= m_mapSize) {

    if (null == m_map) {

      m_map=new int[m_blocksize];

      m_mapSize=m_blocksize;

    }

 else {

      m_mapSize+=m_blocksize;

      int newMap[]=new int[m_mapSize];

      System.arraycopy(m_map,0,newMap,0,ff + 1);

      m_map=newMap;

    }

  }

  m_map[ff]=value;

  ff++;

  m_firstFree=ff;

}

Location: NodeVector.java

Content: 

/** 

 * Set the length to zero, but don't clear the array.

 */

public void RemoveAllNoClear(){

  if (null == m_map)   return;

  m_firstFree=0;

}

Location: NodeVector.java

Content: 

/** 

 * Set the given node one position from the tail. Special purpose method for TransformerImpl, pushElemTemplateElement. Performance critical.

 * @param n Node to set

 */

public final void setTailSub1(int n){

  m_map[m_firstFree - 2]=n;

}

Location: NodeVector.java

Content: 

/** 

 * Set the tail of the stack to the given node. Special purpose method for TransformerImpl, pushElemTemplateElement. Performance critical.

 * @param n Node to set at the tail of vector

 */

public final void setTail(int n){

  m_map[m_firstFree - 1]=n;

}

Location: NodeVector.java

Content: 

/** 

 * Sort an array using a quicksort algorithm.

 * @throws Exception

 */

public void sort() throws Exception {

  sort(m_map,0,m_firstFree - 1);

}

Location: NodeVector.java

Content: 

/** 

 * Sort an array using a quicksort algorithm.

 * @param a   The array to be sorted.

 * @param lo0 The low index.

 * @param hi0 The high index.

 * @throws Exception

 */

public void sort(int a[],int lo0,int hi0) throws Exception {

  int lo=lo0;

  int hi=hi0;

  if (lo >= hi) {

    return;

  }

 else   if (lo == hi - 1) {

    if (a[lo] > a[hi]) {

      int T=a[lo];

      a[lo]=a[hi];

      a[hi]=T;

    }

    return;

  }

  int mid=(lo + hi) >>> 1;

  int pivot=a[mid];

  a[mid]=a[hi];

  a[hi]=pivot;

  while (lo < hi) {

    while (a[lo] <= pivot && lo < hi) {

      lo++;

    }

    while (pivot <= a[hi] && lo < hi) {

      hi--;

    }

    if (lo < hi) {

      int T=a[lo];

      a[lo]=a[hi];

      a[hi]=T;

    }

  }

  a[hi0]=a[hi];

  a[hi]=pivot;

  sort(a,lo0,lo - 1);

  sort(a,hi + 1,hi0);

}

