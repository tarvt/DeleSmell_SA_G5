Location: EnvironmentCheck.java

Content: 

/** 

 * Stylesheet extension entrypoint: Dump a basic Xalan environment report from getEnvironmentHash() to a Node. <p> Copy of writeEnvironmentReport that creates a Node suitable for other processing instead of a properties-like text output. </p>

 * @param container Node to append our report to

 * @param factory   Document providing createElement, etc. services

 * @param h         Hash presumably from {@link #getEnvironmentHash()}

 * @see #writeEnvironmentReport(Hashtable) for an equivalent that writes to aPrintWriter instead

 */

public void appendEnvironmentReport(Node container,Document factory,Hashtable h){

  if ((null == container) || (null == factory)) {

    return;

  }

  try {

    Element envCheckNode=factory.createElement("EnvironmentCheck");

    envCheckNode.setAttribute("version","$Revision: 468646 $");

    container.appendChild(envCheckNode);

    if (null == h) {

      Element statusNode=factory.createElement("status");

      statusNode.setAttribute("result","ERROR");

      statusNode.appendChild(factory.createTextNode("appendEnvironmentReport called with null Hashtable!"));

      envCheckNode.appendChild(statusNode);

      return;

    }

    boolean errors=false;

    Element hashNode=factory.createElement("environment");

    envCheckNode.appendChild(hashNode);

    for (Enumeration keys=h.keys(); keys.hasMoreElements(); ) {

      Object key=keys.nextElement();

      String keyStr=(String)key;

      try {

        if (keyStr.startsWith(FOUNDCLASSES)) {

          Vector v=(Vector)h.get(keyStr);

          errors|=appendFoundJars(hashNode,factory,v,keyStr);

        }

 else {

          if (keyStr.startsWith(ERROR)) {

            errors=true;

          }

          Element node=factory.createElement("item");

          node.setAttribute("key",keyStr);

          node.appendChild(factory.createTextNode((String)h.get(keyStr)));

          hashNode.appendChild(node);

        }

      }

 catch (      Exception e) {

        errors=true;

        Element node=factory.createElement("item");

        node.setAttribute("key",keyStr);

        node.appendChild(factory.createTextNode(ERROR + " Reading " + key+ " threw: "+ e.toString()));

        hashNode.appendChild(node);

      }

    }

    Element statusNode=factory.createElement("status");

    statusNode.setAttribute("result",(errors ? "ERROR" : "OK"));

    envCheckNode.appendChild(statusNode);

  }

 catch (  Exception e2) {

    System.err.println("appendEnvironmentReport threw: " + e2.toString());

    e2.printStackTrace();

  }

}

Location: EnvironmentCheck.java

Content: 

/** 

 * Print out report of .jars found in a classpath. Takes the information encoded from a checkPathForJars() call and dumps it out to our PrintWriter.

 * @param container Node to append our report to

 * @param factory   Document providing createElement, etc. services

 * @param v         Vector of Hashtables of .jar file info

 * @param desc      description to print out in header

 * @return false if OK, true if any .jars were reported as having errors

 * @see #checkPathForJars(String,String[])

 */

protected boolean appendFoundJars(Node container,Document factory,Vector v,String desc){

  if ((null == v) || (v.size() < 1))   return false;

  boolean errors=false;

  for (int i=0; i < v.size(); i++) {

    Hashtable subhash=(Hashtable)v.elementAt(i);

    for (Enumeration keys=subhash.keys(); keys.hasMoreElements(); ) {

      Object key=keys.nextElement();

      try {

        String keyStr=(String)key;

        if (keyStr.startsWith(ERROR)) {

          errors=true;

        }

        Element node=factory.createElement("foundJar");

        node.setAttribute("name",keyStr.substring(0,keyStr.indexOf("-")));

        node.setAttribute("desc",keyStr.substring(keyStr.indexOf("-") + 1));

        node.appendChild(factory.createTextNode((String)subhash.get(keyStr)));

        container.appendChild(node);

      }

 catch (      Exception e) {

        errors=true;

        Element node=factory.createElement("foundJar");

        node.appendChild(factory.createTextNode(ERROR + " Reading " + key+ " threw: "+ e.toString()));

        container.appendChild(node);

      }

    }

  }

  return errors;

}

Location: EnvironmentCheck.java

Content: 

/** 

 * Report product version information from Ant.

 * @param h Hashtable to put information in

 */

protected void checkAntVersion(Hashtable h){

  if (null == h)   h=new Hashtable();

  try {

    final String ANT_VERSION_CLASS="org.apache.tools.ant.Main";

    final String ANT_VERSION_METHOD="getAntVersion";

    final Class noArgs[]=new Class[0];

    Class clazz=ObjectFactory.findProviderClass(ANT_VERSION_CLASS,ObjectFactory.findClassLoader(),true);

    Method method=clazz.getMethod(ANT_VERSION_METHOD,noArgs);

    Object returnValue=method.invoke(null,new Object[0]);

    h.put(VERSION + "ant",(String)returnValue);

  }

 catch (  Exception e) {

    h.put(VERSION + "ant",CLASS_NOTPRESENT);

  }

}

Location: EnvironmentCheck.java

Content: 

/** 

 * Report version info from DOM interfaces. Currently distinguishes between pre-DOM level 2, the DOM level 2 working draft, the DOM level 2 final draft, and not found.

 * @param h Hashtable to put information in

 */

protected void checkDOMVersion(Hashtable h){

  if (null == h)   h=new Hashtable();

  final String DOM_LEVEL2_CLASS="org.w3c.dom.Document";

  final String DOM_LEVEL2_METHOD="createElementNS";

  final String DOM_LEVEL2WD_CLASS="org.w3c.dom.Node";

  final String DOM_LEVEL2WD_METHOD="supported";

  final String DOM_LEVEL2FD_CLASS="org.w3c.dom.Node";

  final String DOM_LEVEL2FD_METHOD="isSupported";

  final Class twoStringArgs[]={java.lang.String.class,java.lang.String.class};

  try {

    Class clazz=ObjectFactory.findProviderClass(DOM_LEVEL2_CLASS,ObjectFactory.findClassLoader(),true);

    Method method=clazz.getMethod(DOM_LEVEL2_METHOD,twoStringArgs);

    h.put(VERSION + "DOM","2.0");

    try {

      clazz=ObjectFactory.findProviderClass(DOM_LEVEL2WD_CLASS,ObjectFactory.findClassLoader(),true);

      method=clazz.getMethod(DOM_LEVEL2WD_METHOD,twoStringArgs);

      h.put(ERROR + VERSION + "DOM.draftlevel","2.0wd");

      h.put(ERROR,ERROR_FOUND);

    }

 catch (    Exception e2) {

      try {

        clazz=ObjectFactory.findProviderClass(DOM_LEVEL2FD_CLASS,ObjectFactory.findClassLoader(),true);

        method=clazz.getMethod(DOM_LEVEL2FD_METHOD,twoStringArgs);

        h.put(VERSION + "DOM.draftlevel","2.0fd");

      }

 catch (      Exception e3) {

        h.put(ERROR + VERSION + "DOM.draftlevel","2.0unknown");

        h.put(ERROR,ERROR_FOUND);

      }

    }

  }

 catch (  Exception e) {

    h.put(ERROR + VERSION + "DOM","ERROR attempting to load DOM level 2 class: " + e.toString());

    h.put(ERROR,ERROR_FOUND);

  }

}

Location: EnvironmentCheck.java

Content: 

/** 

 * Programmatic entrypoint: Report on basic Java environment and CLASSPATH settings that affect Xalan. <p> Note that this class is not advanced enough to tell you everything about the environment that affects Xalan, and sometimes reports errors that will not actually affect Xalan's behavior. Currently, it very simplistically checks the JVM's environment for some basic properties and logs them out; it will report a problem if it finds a setting or .jar file that is <i>likely</i> to cause problems. </p> <p> Advanced users can peruse the code herein to help them investigate potential environment problems found; other users may simply send the output from this tool along with any bugs they submit to help us in the debugging process. </p>

 * @param pw PrintWriter to send output to; can be sent to a file that will looksimilar to a Properties file; defaults to System.out if null

 * @return true if your environment appears to have no major problems; false ifpotential environment problems found

 * @see #getEnvironmentHash()

 */

public boolean checkEnvironment(PrintWriter pw){

  if (null != pw)   outWriter=pw;

  Hashtable hash=getEnvironmentHash();

  boolean environmentHasErrors=writeEnvironmentReport(hash);

  if (environmentHasErrors) {

    logMsg("# WARNING: Potential problems found in your environment!");

    logMsg("#    Check any 'ERROR' items above against the Xalan FAQs");

    logMsg("#    to correct potential problems with your classes/jars");

    logMsg("#    http://xml.apache.org/xalan-j/faq.html");

    if (null != outWriter)     outWriter.flush();

    return false;

  }

 else {

    logMsg("# YAHOO! Your environment seems to be OK.");

    if (null != outWriter)     outWriter.flush();

    return true;

  }

}

Location: EnvironmentCheck.java

Content: 

/** 

 * Report version information about JAXP interfaces. Currently distinguishes between JAXP 1.0.1 and JAXP 1.1, and not found; only tests the interfaces, and does not check for reference implementation versions.

 * @param h Hashtable to put information in

 */

protected void checkJAXPVersion(Hashtable h){

  if (null == h)   h=new Hashtable();

  final Class noArgs[]=new Class[0];

  Class clazz=null;

  try {

    final String JAXP1_CLASS="javax.xml.parsers.DocumentBuilder";

    final String JAXP11_METHOD="getDOMImplementation";

    clazz=ObjectFactory.findProviderClass(JAXP1_CLASS,ObjectFactory.findClassLoader(),true);

    Method method=clazz.getMethod(JAXP11_METHOD,noArgs);

    h.put(VERSION + "JAXP","1.1 or higher");

  }

 catch (  Exception e) {

    if (null != clazz) {

      h.put(ERROR + VERSION + "JAXP","1.0.1");

      h.put(ERROR,ERROR_FOUND);

    }

 else {

      h.put(ERROR + VERSION + "JAXP",CLASS_NOTPRESENT);

      h.put(ERROR,ERROR_FOUND);

    }

  }

}

Location: EnvironmentCheck.java

Content: 

/** 

 * Report product version information from common parsers. Looks for version info in xerces.jar/xercesImpl.jar/crimson.jar. //@todo actually look up version info in crimson manifest

 * @param h Hashtable to put information in

 */

protected void checkParserVersion(Hashtable h){

  if (null == h)   h=new Hashtable();

  try {

    final String XERCES1_VERSION_CLASS="org.apache.xerces.framework.Version";

    Class clazz=ObjectFactory.findProviderClass(XERCES1_VERSION_CLASS,ObjectFactory.findClassLoader(),true);

    Field f=clazz.getField("fVersion");

    String parserVersion=(String)f.get(null);

    h.put(VERSION + "xerces1",parserVersion);

  }

 catch (  Exception e) {

    h.put(VERSION + "xerces1",CLASS_NOTPRESENT);

  }

  try {

    final String XERCES2_VERSION_CLASS="org.apache.xerces.impl.Version";

    Class clazz=ObjectFactory.findProviderClass(XERCES2_VERSION_CLASS,ObjectFactory.findClassLoader(),true);

    Field f=clazz.getField("fVersion");

    String parserVersion=(String)f.get(null);

    h.put(VERSION + "xerces2",parserVersion);

  }

 catch (  Exception e) {

    h.put(VERSION + "xerces2",CLASS_NOTPRESENT);

  }

  try {

    final String CRIMSON_CLASS="org.apache.crimson.parser.Parser2";

    Class clazz=ObjectFactory.findProviderClass(CRIMSON_CLASS,ObjectFactory.findClassLoader(),true);

    h.put(VERSION + "crimson",CLASS_PRESENT);

  }

 catch (  Exception e) {

    h.put(VERSION + "crimson",CLASS_NOTPRESENT);

  }

}

Location: EnvironmentCheck.java

Content: 

/** 

 * Cheap-o listing of specified .jars found in the classpath. cp should be separated by the usual File.pathSeparator. We then do a simplistic search of the path for any requested .jar filenames, and return a listing of their names and where (apparently) they came from.

 * @param cp   classpath to search

 * @param jars array of .jar base filenames to look for

 * @return Vector of Hashtables filled with info about found .jars

 * @see #jarNames

 * @see #logFoundJars(Vector,String)

 * @see #appendFoundJars(Node,Document,Vector,String)

 * @see #getApparentVersion(String,long)

 */

protected Vector checkPathForJars(String cp,String[] jars){

  if ((null == cp) || (null == jars) || (0 == cp.length())|| (0 == jars.length))   return null;

  Vector v=new Vector();

  StringTokenizer st=new StringTokenizer(cp,File.pathSeparator);

  while (st.hasMoreTokens()) {

    String filename=st.nextToken();

    for (int i=0; i < jars.length; i++) {

      if (filename.indexOf(jars[i]) > -1) {

        File f=new File(filename);

        if (f.exists()) {

          try {

            Hashtable h=new Hashtable(2);

            h.put(jars[i] + "-path",f.getAbsolutePath());

            if (!("xalan.jar".equalsIgnoreCase(jars[i]))) {

              h.put(jars[i] + "-apparent.version",getApparentVersion(jars[i],f.length()));

            }

            v.addElement(h);

          }

 catch (          Exception e) {

          }

        }

 else {

          Hashtable h=new Hashtable(2);

          h.put(jars[i] + "-path",WARNING + " Classpath entry: " + filename+ " does not exist");

          h.put(jars[i] + "-apparent.version",CLASS_NOTPRESENT);

          v.addElement(h);

        }

      }

    }

  }

  return v;

}

Location: EnvironmentCheck.java

Content: 

/** 

 * Report product version information from Xalan-J. Looks for version info in xalan.jar from Xalan-J products.

 * @param h Hashtable to put information in

 */

protected void checkProcessorVersion(Hashtable h){

  if (null == h)   h=new Hashtable();

  try {

    final String XALAN1_VERSION_CLASS="org.apache.xalan.xslt.XSLProcessorVersion";

    Class clazz=ObjectFactory.findProviderClass(XALAN1_VERSION_CLASS,ObjectFactory.findClassLoader(),true);

    StringBuffer buf=new StringBuffer();

    Field f=clazz.getField("PRODUCT");

    buf.append(f.get(null));

    buf.append(';');

    f=clazz.getField("LANGUAGE");

    buf.append(f.get(null));

    buf.append(';');

    f=clazz.getField("S_VERSION");

    buf.append(f.get(null));

    buf.append(';');

    h.put(VERSION + "xalan1",buf.toString());

  }

 catch (  Exception e1) {

    h.put(VERSION + "xalan1",CLASS_NOTPRESENT);

  }

  try {

    final String XALAN2_VERSION_CLASS="org.apache.xalan.processor.XSLProcessorVersion";

    Class clazz=ObjectFactory.findProviderClass(XALAN2_VERSION_CLASS,ObjectFactory.findClassLoader(),true);

    StringBuffer buf=new StringBuffer();

    Field f=clazz.getField("S_VERSION");

    buf.append(f.get(null));

    h.put(VERSION + "xalan2x",buf.toString());

  }

 catch (  Exception e2) {

    h.put(VERSION + "xalan2x",CLASS_NOTPRESENT);

  }

  try {

    final String XALAN2_2_VERSION_CLASS="org.apache.xalan.Version";

    final String XALAN2_2_VERSION_METHOD="getVersion";

    final Class noArgs[]=new Class[0];

    Class clazz=ObjectFactory.findProviderClass(XALAN2_2_VERSION_CLASS,ObjectFactory.findClassLoader(),true);

    Method method=clazz.getMethod(XALAN2_2_VERSION_METHOD,noArgs);

    Object returnValue=method.invoke(null,new Object[0]);

    h.put(VERSION + "xalan2_2",(String)returnValue);

  }

 catch (  Exception e2) {

    h.put(VERSION + "xalan2_2",CLASS_NOTPRESENT);

  }

}

Location: EnvironmentCheck.java

Content: 

/** 

 * Report version info from SAX interfaces. Currently distinguishes between SAX 2, SAX 2.0beta2, SAX1, and not found.

 * @param h Hashtable to put information in

 */

protected void checkSAXVersion(Hashtable h){

  if (null == h)   h=new Hashtable();

  final String SAX_VERSION1_CLASS="org.xml.sax.Parser";

  final String SAX_VERSION1_METHOD="parse";

  final String SAX_VERSION2_CLASS="org.xml.sax.XMLReader";

  final String SAX_VERSION2_METHOD="parse";

  final String SAX_VERSION2BETA_CLASSNF="org.xml.sax.helpers.AttributesImpl";

  final String SAX_VERSION2BETA_METHODNF="setAttributes";

  final Class oneStringArg[]={java.lang.String.class};

  final Class attributesArg[]={org.xml.sax.Attributes.class};

  try {

    Class clazz=ObjectFactory.findProviderClass(SAX_VERSION2BETA_CLASSNF,ObjectFactory.findClassLoader(),true);

    Method method=clazz.getMethod(SAX_VERSION2BETA_METHODNF,attributesArg);

    h.put(VERSION + "SAX","2.0");

  }

 catch (  Exception e) {

    h.put(ERROR + VERSION + "SAX","ERROR attempting to load SAX version 2 class: " + e.toString());

    h.put(ERROR,ERROR_FOUND);

    try {

      Class clazz=ObjectFactory.findProviderClass(SAX_VERSION2_CLASS,ObjectFactory.findClassLoader(),true);

      Method method=clazz.getMethod(SAX_VERSION2_METHOD,oneStringArg);

      h.put(VERSION + "SAX-backlevel","2.0beta2-or-earlier");

    }

 catch (    Exception e2) {

      h.put(ERROR + VERSION + "SAX","ERROR attempting to load SAX version 2 class: " + e.toString());

      h.put(ERROR,ERROR_FOUND);

      try {

        Class clazz=ObjectFactory.findProviderClass(SAX_VERSION1_CLASS,ObjectFactory.findClassLoader(),true);

        Method method=clazz.getMethod(SAX_VERSION1_METHOD,oneStringArg);

        h.put(VERSION + "SAX-backlevel","1.0");

      }

 catch (      Exception e3) {

        h.put(ERROR + VERSION + "SAX-backlevel","ERROR attempting to load SAX version 1 class: " + e3.toString());

      }

    }

  }

}

Location: EnvironmentCheck.java

Content: 

/** 

 * Fillin hash with info about SystemProperties. Logs java.class.path and other likely paths; then attempts to search those paths for .jar files with Xalan-related classes. //@todo NOTE: We don't actually search java.ext.dirs for // *.jar files therein! This should be updated

 * @param h Hashtable to put information in

 * @see #jarNames

 * @see #checkPathForJars(String,String[])

 */

protected void checkSystemProperties(Hashtable h){

  if (null == h)   h=new Hashtable();

  try {

    String javaVersion=System.getProperty("java.version");

    h.put("java.version",javaVersion);

  }

 catch (  SecurityException se) {

    h.put("java.version","WARNING: SecurityException thrown accessing system version properties");

  }

  try {

    String cp=System.getProperty("java.class.path");

    h.put("java.class.path",cp);

    Vector classpathJars=checkPathForJars(cp,jarNames);

    if (null != classpathJars)     h.put(FOUNDCLASSES + "java.class.path",classpathJars);

    String othercp=System.getProperty("sun.boot.class.path");

    if (null != othercp) {

      h.put("sun.boot.class.path",othercp);

      classpathJars=checkPathForJars(othercp,jarNames);

      if (null != classpathJars)       h.put(FOUNDCLASSES + "sun.boot.class.path",classpathJars);

    }

    othercp=System.getProperty("java.ext.dirs");

    if (null != othercp) {

      h.put("java.ext.dirs",othercp);

      classpathJars=checkPathForJars(othercp,jarNames);

      if (null != classpathJars)       h.put(FOUNDCLASSES + "java.ext.dirs",classpathJars);

    }

  }

 catch (  SecurityException se2) {

    h.put("java.class.path","WARNING: SecurityException thrown accessing system classpath properties");

  }

}

Location: EnvironmentCheck.java

Content: 

/** 

 * Cheap-o method to determine the product version of a .jar. Currently does a lookup into a local table of some recent shipped Xalan builds to determine where the .jar probably came from. Note that if you recompile Xalan or Xerces yourself this will likely report a potential error, since we can't certify builds other than the ones we ship. Only reports against selected posted Xalan-J builds. //@todo actually look up version info in manifests

 * @param jarName base filename of the .jarfile

 * @param jarSize size of the .jarfile

 * @return String describing where the .jar file probably came from

 */

protected String getApparentVersion(String jarName,long jarSize){

  String foundSize=(String)jarVersions.get(new Long(jarSize));

  if ((null != foundSize) && (foundSize.startsWith(jarName))) {

    return foundSize;

  }

 else {

    if ("xerces.jar".equalsIgnoreCase(jarName) || "xercesImpl.jar".equalsIgnoreCase(jarName)) {

      return jarName + " " + WARNING+ CLASS_PRESENT;

    }

 else {

      return jarName + " " + CLASS_PRESENT;

    }

  }

}

Location: EnvironmentCheck.java

Content: 

/** 

 * Fill a hash with basic environment settings that affect Xalan. <p> Worker method called from various places. </p> <p> Various system and CLASSPATH, etc. properties are put into the hash as keys with a brief description of the current state of that item as the value. Any serious problems will be put in with a key that is prefixed with {@link #ERROR 'ERROR.'} so it stands out in any resulting report; also a keywith just that constant will be set as well for any error. </p> <p> Note that some legitimate cases are flaged as potential errors - namely when a developer recompiles xalan.jar on their own - and even a non-error state doesn't guaruntee that everything in the environment is correct. But this will help point out the most common classpath and system property problems that we've seen. </p>

 * @return Hashtable full of useful environment info about Xalan and relatedsystem properties, etc.

 */

public Hashtable getEnvironmentHash(){

  Hashtable hash=new Hashtable();

  checkJAXPVersion(hash);

  checkProcessorVersion(hash);

  checkParserVersion(hash);

  checkAntVersion(hash);

  checkDOMVersion(hash);

  checkSAXVersion(hash);

  checkSystemProperties(hash);

  return hash;

}

Location: EnvironmentCheck.java

Content: 

/** 

 * Print out report of .jars found in a classpath. Takes the information encoded from a checkPathForJars() call and dumps it out to our PrintWriter.

 * @param v    Vector of Hashtables of .jar file info

 * @param desc description to print out in header

 * @return false if OK, true if any .jars were reported as having errors

 * @see #checkPathForJars(String,String[])

 */

protected boolean logFoundJars(Vector v,String desc){

  if ((null == v) || (v.size() < 1))   return false;

  boolean errors=false;

  logMsg("#---- BEGIN Listing XML-related jars in: " + desc + " ----");

  for (int i=0; i < v.size(); i++) {

    Hashtable subhash=(Hashtable)v.elementAt(i);

    for (Enumeration keys=subhash.keys(); keys.hasMoreElements(); ) {

      Object key=keys.nextElement();

      String keyStr=(String)key;

      try {

        if (keyStr.startsWith(ERROR)) {

          errors=true;

        }

        logMsg(keyStr + "=" + subhash.get(keyStr));

      }

 catch (      Exception e) {

        errors=true;

        logMsg("Reading-" + key + "= threw: "+ e.toString());

      }

    }

  }

  logMsg("#----- END Listing XML-related jars in: " + desc + " -----");

  return errors;

}

Location: EnvironmentCheck.java

Content: 

/** 

 * Bottleneck output: calls outWriter.println(s).

 * @param s String to print

 */

protected void logMsg(String s){

  outWriter.println(s);

}

Location: EnvironmentCheck.java

Content: 

/** 

 * Dump a basic Xalan environment report to outWriter. <p> This dumps a simple header and then each of the entries in the Hashtable to our PrintWriter; it does special processing for entries that are .jars found in the classpath. </p>

 * @param h Hashtable of items to report on; presumably filled in by our variouscheck*() methods

 * @return true if your environment appears to have no major problems; false ifpotential environment problems found

 * @see #appendEnvironmentReport(Node,Document,Hashtable) for an equivalentthat appends to a Node instead

 */

protected boolean writeEnvironmentReport(Hashtable h){

  if (null == h) {

    logMsg("# ERROR: writeEnvironmentReport called with null Hashtable");

    return false;

  }

  boolean errors=false;

  logMsg("#---- BEGIN writeEnvironmentReport($Revision: 468646 $): Useful stuff found: ----");

  for (Enumeration keys=h.keys(); keys.hasMoreElements(); ) {

    Object key=keys.nextElement();

    String keyStr=(String)key;

    try {

      if (keyStr.startsWith(FOUNDCLASSES)) {

        Vector v=(Vector)h.get(keyStr);

        errors|=logFoundJars(v,keyStr);

      }

 else {

        if (keyStr.startsWith(ERROR)) {

          errors=true;

        }

        logMsg(keyStr + "=" + h.get(keyStr));

      }

    }

 catch (    Exception e) {

      logMsg("Reading-" + key + "= threw: "+ e.toString());

    }

  }

  logMsg("#----- END writeEnvironmentReport: Useful properties found: -----");

  return errors;

}

