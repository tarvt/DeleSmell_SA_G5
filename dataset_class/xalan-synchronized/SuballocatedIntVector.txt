Location: SuballocatedIntVector.java

Content: 

/** 

 * Append several slots onto the vector, but do not set the values. Note: "Not Set" means the value is unspecified.

 * @param numberOfElements Int to add to the list

 */

private void addElements(int numberOfElements){

  int newlen=m_firstFree + numberOfElements;

  if (newlen > m_blocksize) {

    int index=m_firstFree >>> m_SHIFT;

    int newindex=(m_firstFree + numberOfElements) >>> m_SHIFT;

    for (int i=index + 1; i <= newindex; ++i)     m_map[i]=new int[m_blocksize];

  }

  m_firstFree=newlen;

}

Location: SuballocatedIntVector.java

Content: 

/** 

 * Append several int values onto the vector.

 * @param value Int to add to the list

 */

private void addElements(int value,int numberOfElements){

  if (m_firstFree + numberOfElements < m_blocksize)   for (int i=0; i < numberOfElements; i++) {

    m_map0[m_firstFree++]=value;

  }

 else {

    int index=m_firstFree >>> m_SHIFT;

    int offset=m_firstFree & m_MASK;

    m_firstFree+=numberOfElements;

    while (numberOfElements > 0) {

      if (index >= m_map.length) {

        int newsize=index + m_numblocks;

        int[][] newMap=new int[newsize][];

        System.arraycopy(m_map,0,newMap,0,m_map.length);

        m_map=newMap;

      }

      int[] block=m_map[index];

      if (null == block)       block=m_map[index]=new int[m_blocksize];

      int copied=(m_blocksize - offset < numberOfElements) ? m_blocksize - offset : numberOfElements;

      numberOfElements-=copied;

      while (copied-- > 0)       block[offset++]=value;

      ++index;

      offset=0;

    }

  }

}

Location: SuballocatedIntVector.java

Content: 

/** 

 * Return the m_map double array

 * @return the internal map of array of arrays

 */

public final int[][] getMap(){

  return m_map;

}

Location: SuballocatedIntVector.java

Content: 

/** 

 * Return the internal m_map0 array

 * @return the m_map0 array

 */

public final int[] getMap0(){

  return m_map0;

}

Location: SuballocatedIntVector.java

Content: 

/** 

 * Set the length of the list. This will only work to truncate the list, and even then it has not been heavily tested and may not be trustworthy.

 * @return length of the list

 */

public void setSize(int sz){

  if (m_firstFree > sz)   m_firstFree=sz;

}

Location: SuballocatedIntVector.java

Content: 

/** 

 * Default constructor. Note that the default block size is currently 2K, which may be overkill for small lists and undershootng for large ones.

 */

public SuballocatedIntVector(){

  this(2048);

}

Location: SuballocatedIntVector.java

Content: 

/** 

 * Construct a IntVector, using the given block size and the default number of blocks (32).

 * @param blocksize Size of block to allocate

 */

public SuballocatedIntVector(int blocksize){

  this(blocksize,NUMBLOCKS_DEFAULT);

}

Location: SuballocatedIntVector.java

Content: 

/** 

 * Construct a IntVector, using the given block size and number of blocks. For efficiency, we will round the requested size off to a power of two.

 * @param blocksize Size of block to allocate

 * @param numblocks Number of blocks to allocate

 */

public SuballocatedIntVector(int blocksize,int numblocks){

  for (m_SHIFT=0; 0 != (blocksize>>>=1); ++m_SHIFT)   ;

  m_blocksize=1 << m_SHIFT;

  m_MASK=m_blocksize - 1;

  m_numblocks=numblocks;

  m_map0=new int[m_blocksize];

  m_map=new int[numblocks][];

  m_map[0]=m_map0;

  m_buildCache=m_map0;

  m_buildCacheStartIndex=0;

}

