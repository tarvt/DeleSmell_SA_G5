Location: CoroutineParser.java

Content: 

/** 

 * doMore() is a simple API which tells the coroutine parser that we need more nodes. This is intended to be called from one of our partner coroutines, and serves both to encapsulate the communication protocol and to avoid having to explicitly use the CoroutineParser's coroutine ID number.

 * @param parsemore    If true, tells the incremental parser to generate anotherchunk of output. If false, tells the parser that we're satisfied and it can terminate parsing of this document.

 * @param appCoroutine The coroutine ID number of the coroutine invoking thismethod, so it can be resumed after the parser has responded to the request.

 * @return Boolean.TRUE if the CoroutineParser believes more data may beavailable for further parsing. Boolean.FALSE if parsing ran to completion. Exception if the parser objected for some reason.

 */

public Object doMore(boolean parsemore,int appCoroutine);

Location: CoroutineParser.java

Content: 

/** 

 * doParse() is a simple API which tells the coroutine parser to begin reading from a file. This is intended to be called from one of our partner coroutines, and serves both to encapsulate the communication protocol and to avoid having to explicitly use the CoroutineParser's coroutine ID number. %REVIEW% Can/should this unify with doMore? (if URI hasn't changed, parse more from same file, else end and restart parsing...?

 * @param source       The InputSource to parse from.

 * @param appCoroutine The coroutine ID number of the coroutine invoking thismethod, so it can be resumed after the parser has responded to the request.

 * @return Boolean.TRUE if the CoroutineParser believes more data may beavailable for further parsing. Boolean.FALSE if parsing ran to completion. Exception if the parser objected for some reason.

 */

public Object doParse(InputSource source,int appCoroutine);

Location: CoroutineParser.java

Content: 

/** 

 * doTerminate() is a simple API which tells the coroutine parser to terminate itself. This is intended to be called from one of our partner coroutines, and serves both to encapsulate the communication protocol and to avoid having to explicitly use the CoroutineParser's coroutine ID number. Returns only after the CoroutineParser has acknowledged the request.

 * @param appCoroutine The coroutine ID number of the coroutine invoking thismethod, so it can be resumed after the parser has responded to the request.

 */

public void doTerminate(int appCoroutine);

Location: CoroutineParser.java

Content: 

/** 

 * @return the CoroutineManager for this CoroutineParser object. If you're usingthe do...() methods, applications should only need to talk to the CoroutineManager once, to obtain the application's Coroutine ID.

 */

public CoroutineManager getCoroutineManager();

Location: CoroutineParser.java

Content: 

/** 

 * @return the coroutine ID number for this CoroutineParser object. Note thatthis isn't useful unless you know which CoroutineManager you're talking to. Also note that the do...() methods encapsulate the common transactions with the CoroutineParser, so you shouldn't need this in most cases.

 */

public int getParserCoroutineID();

Location: CoroutineParser.java

Content: 

/** 

 * Initialize the coroutine parser. Same parameters could be passed in a non-default constructor, or by using using context ClassLoader and newInstance and then calling init()

 */

public void init(CoroutineManager co,int appCoroutineID,XMLReader parser);

Location: CoroutineParser.java

Content: 

/** 

 * Register a SAX-style lexical handler for us to output to Not all parsers support this... %REVIEW% Not called setLexicalHandler because Xalan uses that name internally, which causes subclassing nuisances.

 */

public void setLexHandler(org.xml.sax.ext.LexicalHandler handler);

