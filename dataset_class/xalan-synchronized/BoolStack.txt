Location: BoolStack.java

Content: 

/** 

 * Default constructor. Note that the default block size is very small, for small lists.

 */

public BoolStack(){

  this(32);

}

Location: BoolStack.java

Content: 

/** 

 * Construct a IntVector, using the given block size.

 * @param size array size to allocate

 */

public BoolStack(int size){

  m_allocatedSize=size;

  m_values=new boolean[size];

  m_index=-1;

}

Location: BoolStack.java

Content: 

/** 

 * Clears the stack.

 */

public final void clear(){

  m_index=-1;

}

Location: BoolStack.java

Content: 

/** 

 * Grows the size of the stack

 */

private void grow(){

  m_allocatedSize*=2;

  boolean newVector[]=new boolean[m_allocatedSize];

  System.arraycopy(m_values,0,newVector,0,m_index + 1);

  m_values=newVector;

}

Location: BoolStack.java

Content: 

/** 

 * Tests if this stack is empty.

 * @return <code>true</code> if this stack is empty; <code>false</code>otherwise.

 */

public boolean isEmpty(){

  return (m_index == -1);

}

Location: BoolStack.java

Content: 

/** 

 * Looks at the object at the top of this stack without removing it from the stack.

 * @return the object at the top of this stack.

 * @throws EmptyStackException if this stack is empty.

 */

public final boolean peek(){

  return m_values[m_index];

}

Location: BoolStack.java

Content: 

/** 

 * Looks at the object at the top of this stack without removing it from the stack. If the stack is empty, it returns false.

 * @return the object at the top of this stack.

 */

public final boolean peekOrFalse(){

  return (m_index > -1) ? m_values[m_index] : false;

}

Location: BoolStack.java

Content: 

/** 

 * Looks at the object at the top of this stack without removing it from the stack. If the stack is empty, it returns true.

 * @return the object at the top of this stack.

 */

public final boolean peekOrTrue(){

  return (m_index > -1) ? m_values[m_index] : true;

}

Location: BoolStack.java

Content: 

/** 

 * Pushes an item onto the top of this stack.

 * @param val the boolean to be pushed onto this stack.

 * @return the <code>item</code> argument.

 */

public final boolean push(boolean val){

  if (m_index == m_allocatedSize - 1)   grow();

  return (m_values[++m_index]=val);

}

Location: BoolStack.java

Content: 

/** 

 * Set the item at the top of this stack

 * @param b Object to set at the top of this stack

 */

public final void setTop(boolean b){

  m_values[m_index]=b;

}

