Location: QName.java

Content: 

public void clearNamespace(){

  _namespace=Constants.EMPTYSTRING;

}

Location: QName.java

Content: 

public String dump(){

  return "QName: " + _namespace + "("+ _prefix+ "):"+ _localname;

}

Location: QName.java

Content: 

/** 

 * Override equals and agree that we're equal if the passed object is a string and it matches the name of the arg.

 * @param ns        Namespace URI to compare to

 * @param localPart Local part of qualified name to compare to

 * @return True if the local name and uri match

 */

public boolean equals(String ns,String localPart){

  String thisnamespace=getNamespaceURI();

  return getLocalName().equals(localPart) && (((null != thisnamespace) && (null != ns)) ? thisnamespace.equals(ns) : ((null == thisnamespace) && (null == ns)));

}

Location: QName.java

Content: 

/** 

 * Get the local part of the qualified name.

 * @return the local part of the qualified name

 */

public String getLocalPart(){

  return getLocalName();

}

Location: QName.java

Content: 

/** 

 * Returns the local name of the given node.

 * @param qname Input name

 * @return Local part of the name if prefixed, or the given name if not

 */

public static String getLocalPart(String qname){

  int index=qname.indexOf(':');

  return (index < 0) ? qname : qname.substring(index + 1);

}

Location: QName.java

Content: 

/** 

 * This function tells if a raw attribute name is a xmlns attribute.

 * @param attRawName Raw name of attribute

 * @return Prefix of attribute

 */

public static String getPrefixFromXMLNSDecl(String attRawName){

  int index=attRawName.indexOf(':');

  return (index >= 0) ? attRawName.substring(index + 1) : "";

}

Location: QName.java

Content: 

/** 

 * Returns the local name of the given node.

 * @param qname Input name

 * @return Prefix of name or empty string if none there

 */

public static String getPrefixPart(String qname){

  int index=qname.indexOf(':');

  return (index >= 0) ? qname.substring(0,index) : "";

}

Location: QName.java

Content: 

/** 

 * Given a string, create and return a QName object

 * @param name String to use to create QName

 * @return a QName object

 */

public static QName getQNameFromString(String name){

  StringTokenizer tokenizer=new StringTokenizer(name,"{}",false);

  QName qname;

  String s1=tokenizer.nextToken();

  String s2=tokenizer.hasMoreTokens() ? tokenizer.nextToken() : null;

  if (null == s2)   qname=new QName(null,s1);

 else   qname=new QName(s1,s2);

  return qname;

}

Location: QName.java

Content: 

public String getStringRep(){

  return _stringRep;

}

Location: QName.java

Content: 

/** 

 * This function tells if a raw attribute name is a xmlns attribute.

 * @param attRawName Raw name of attribute

 * @return True if the attribute starts with or is equal to xmlns

 */

public static boolean isXMLNSDecl(String attRawName){

  return (attRawName.startsWith("xmlns") && (attRawName.equals("xmlns") || attRawName.startsWith("xmlns:")));

}

Location: QName.java

Content: 

/** 

 * Construct a QName from a string, without namespace resolution. Good for a few odd cases.

 * @param localName Local part of qualified name

 */

public QName(String localName){

  this(localName,false);

}

Location: QName.java

Content: 

/** 

 * Construct a QName from a string, without namespace resolution. Good for a few odd cases.

 * @param localName Local part of qualified name

 * @param validate  If true the new QName will be validated and anIllegalArgumentException will be thrown if it is invalid.

 */

public QName(String localName,boolean validate){

  if (localName == null)   throw new IllegalArgumentException(XMLMessages.createXMLMessage(XMLErrorResources.ER_ARG_LOCALNAME_NULL,null));

  if (validate) {

    if (!XML11Char.isXML11ValidNCName(localName)) {

      throw new IllegalArgumentException(XMLMessages.createXMLMessage(XMLErrorResources.ER_ARG_LOCALNAME_INVALID,null));

    }

  }

  _namespaceURI=null;

  _localName=localName;

  m_hashCode=toString().hashCode();

}

Location: QName.java

Content: 

/** 

 * Construct a QName from a string, resolving the prefix using the given namespace context and prefix resolver. The default namespace is not resolved.

 * @param qname            Qualified name to resolve

 * @param namespaceContext Namespace Context to use

 * @param resolver         Prefix resolver for this context

 */

public QName(String qname,Element namespaceContext,PrefixResolver resolver){

  this(qname,namespaceContext,resolver,false);

}

Location: QName.java

Content: 

/** 

 * Construct a QName from a string, resolving the prefix using the given namespace context and prefix resolver. The default namespace is not resolved.

 * @param qname            Qualified name to resolve

 * @param namespaceContext Namespace Context to use

 * @param resolver         Prefix resolver for this context

 * @param validate         If true the new QName will be validated and anIllegalArgumentException will be thrown if it is invalid.

 */

public QName(String qname,Element namespaceContext,PrefixResolver resolver,boolean validate){

  _namespaceURI=null;

  int indexOfNSSep=qname.indexOf(':');

  if (indexOfNSSep > 0) {

    if (null != namespaceContext) {

      String prefix=qname.substring(0,indexOfNSSep);

      _prefix=prefix;

      if (prefix.equals("xml")) {

        _namespaceURI=S_XMLNAMESPACEURI;

      }

 else       if (prefix.equals("xmlns")) {

        return;

      }

 else {

        _namespaceURI=resolver.getNamespaceForPrefix(prefix,namespaceContext);

      }

      if (null == _namespaceURI) {

        throw new RuntimeException(XMLMessages.createXMLMessage(XMLErrorResources.ER_PREFIX_MUST_RESOLVE,new Object[]{prefix}));

      }

    }

 else {

    }

  }

  _localName=(indexOfNSSep < 0) ? qname : qname.substring(indexOfNSSep + 1);

  if (validate) {

    if ((_localName == null) || (!XML11Char.isXML11ValidNCName(_localName))) {

      throw new IllegalArgumentException(XMLMessages.createXMLMessage(XMLErrorResources.ER_ARG_LOCALNAME_INVALID,null));

    }

  }

  m_hashCode=toString().hashCode();

}

Location: QName.java

Content: 

/** 

 * Construct a QName from a string, resolving the prefix using the given namespace stack. The default namespace is not resolved.

 * @param qname    Qualified name to resolve

 * @param resolver Prefix resolver for this context

 */

public QName(String qname,PrefixResolver resolver){

  this(qname,resolver,false);

}

Location: QName.java

Content: 

/** 

 * Construct a QName from a string, resolving the prefix using the given namespace stack. The default namespace is not resolved.

 * @param qname    Qualified name to resolve

 * @param resolver Prefix resolver for this context

 * @param validate If true the new QName will be validated and anIllegalArgumentException will be thrown if it is invalid.

 */

public QName(String qname,PrefixResolver resolver,boolean validate){

  String prefix=null;

  _namespaceURI=null;

  int indexOfNSSep=qname.indexOf(':');

  if (indexOfNSSep > 0) {

    prefix=qname.substring(0,indexOfNSSep);

    if (prefix.equals("xml")) {

      _namespaceURI=S_XMLNAMESPACEURI;

    }

 else {

      _namespaceURI=resolver.getNamespaceForPrefix(prefix);

    }

    if (null == _namespaceURI) {

      throw new RuntimeException(XMLMessages.createXMLMessage(XMLErrorResources.ER_PREFIX_MUST_RESOLVE,new Object[]{prefix}));

    }

    _localName=qname.substring(indexOfNSSep + 1);

  }

 else   if (indexOfNSSep == 0) {

    throw new RuntimeException(XMLMessages.createXMLMessage(XMLErrorResources.ER_NAME_CANT_START_WITH_COLON,null));

  }

 else {

    _localName=qname;

  }

  if (validate) {

    if ((_localName == null) || (!XML11Char.isXML11ValidNCName(_localName))) {

      throw new IllegalArgumentException(XMLMessages.createXMLMessage(XMLErrorResources.ER_ARG_LOCALNAME_INVALID,null));

    }

  }

  m_hashCode=toString().hashCode();

  _prefix=prefix;

}

Location: QName.java

Content: 

/** 

 * Construct a QName from a string, resolving the prefix using the given namespace stack. The default namespace is not resolved.

 * @param qname      Qualified name to resolve

 * @param namespaces Namespace stack to use to resolve namespace

 */

public QName(String qname,Stack namespaces){

  this(qname,namespaces,false);

}

Location: QName.java

Content: 

/** 

 * Construct a QName from a string, resolving the prefix using the given namespace stack. The default namespace is not resolved.

 * @param qname      Qualified name to resolve

 * @param namespaces Namespace stack to use to resolve namespace

 * @param validate   If true the new QName will be validated and anIllegalArgumentException will be thrown if it is invalid.

 */

public QName(String qname,Stack namespaces,boolean validate){

  String namespace=null;

  String prefix=null;

  int indexOfNSSep=qname.indexOf(':');

  if (indexOfNSSep > 0) {

    prefix=qname.substring(0,indexOfNSSep);

    if (prefix.equals("xml")) {

      namespace=S_XMLNAMESPACEURI;

    }

 else     if (prefix.equals("xmlns")) {

      return;

    }

 else {

      int depth=namespaces.size();

      for (int i=depth - 1; i >= 0; i--) {

        NameSpace ns=(NameSpace)namespaces.elementAt(i);

        while (null != ns) {

          if ((null != ns.m_prefix) && prefix.equals(ns.m_prefix)) {

            namespace=ns.m_uri;

            i=-1;

            break;

          }

          ns=ns.m_next;

        }

      }

    }

    if (null == namespace) {

      throw new RuntimeException(XMLMessages.createXMLMessage(XMLErrorResources.ER_PREFIX_MUST_RESOLVE,new Object[]{prefix}));

    }

  }

  _localName=(indexOfNSSep < 0) ? qname : qname.substring(indexOfNSSep + 1);

  if (validate) {

    if ((_localName == null) || (!XML11Char.isXML11ValidNCName(_localName))) {

      throw new IllegalArgumentException(XMLMessages.createXMLMessage(XMLErrorResources.ER_ARG_LOCALNAME_INVALID,null));

    }

  }

  _namespaceURI=namespace;

  _prefix=prefix;

  m_hashCode=toString().hashCode();

}

Location: QName.java

Content: 

/** 

 * Constructs a new QName with the specified namespace URI and local name.

 * @param namespaceURI The namespace URI if known, or null

 * @param localName    The local name

 */

public QName(String namespaceURI,String localName){

  this(namespaceURI,localName,false);

}

Location: QName.java

Content: 

/** 

 * Constructs a new QName with the specified namespace URI and local name.

 * @param namespaceURI The namespace URI if known, or null

 * @param localName    The local name

 * @param validate     If true the new QName will be validated and anIllegalArgumentException will be thrown if it is invalid.

 */

public QName(String namespaceURI,String localName,boolean validate){

  if (localName == null)   throw new IllegalArgumentException(XMLMessages.createXMLMessage(XMLErrorResources.ER_ARG_LOCALNAME_NULL,null));

  if (validate) {

    if (!XML11Char.isXML11ValidNCName(localName)) {

      throw new IllegalArgumentException(XMLMessages.createXMLMessage(XMLErrorResources.ER_ARG_LOCALNAME_INVALID,null));

    }

  }

  _namespaceURI=namespaceURI;

  _localName=localName;

  m_hashCode=toString().hashCode();

}

Location: QName.java

Content: 

/** 

 * Constructs a new QName with the specified namespace URI, prefix and local name.

 * @param namespaceURI The namespace URI if known, or null

 * @param prefix       The namespace prefix is known, or null

 * @param localName    The local name

 */

public QName(String namespaceURI,String prefix,String localName){

  this(namespaceURI,prefix,localName,false);

}

Location: QName.java

Content: 

/** 

 * Constructs a new QName with the specified namespace URI, prefix and local name.

 * @param namespaceURI The namespace URI if known, or null

 * @param prefix       The namespace prefix is known, or null

 * @param localName    The local name

 * @param validate     If true the new QName will be validated and anIllegalArgumentException will be thrown if it is invalid.

 */

public QName(String namespaceURI,String prefix,String localName,boolean validate){

  if (localName == null)   throw new IllegalArgumentException(XMLMessages.createXMLMessage(XMLErrorResources.ER_ARG_LOCALNAME_NULL,null));

  if (validate) {

    if (!XML11Char.isXML11ValidNCName(localName)) {

      throw new IllegalArgumentException(XMLMessages.createXMLMessage(XMLErrorResources.ER_ARG_LOCALNAME_INVALID,null));

    }

    if ((null != prefix) && (!XML11Char.isXML11ValidNCName(prefix))) {

      throw new IllegalArgumentException(XMLMessages.createXMLMessage(XMLErrorResources.ER_ARG_PREFIX_INVALID,null));

    }

  }

  _namespaceURI=namespaceURI;

  _prefix=prefix;

  _localName=localName;

  m_hashCode=toString().hashCode();

}

Location: QName.java

Content: 

/** 

 * Return the string representation of the qualified name using the the '{ns}foo' notation. Performs string concatenation, so beware of performance issues.

 * @return the string representation of the namespace

 */

public String toNamespacedString(){

  return (_namespaceURI != null ? ("{" + _namespaceURI + "}"+ _localName) : _localName);

}

