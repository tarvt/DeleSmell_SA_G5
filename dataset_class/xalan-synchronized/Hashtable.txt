Location: Hashtable.java

Content: 

/** 

 * Tests if the specified object is a key in this hashtable.

 */

public boolean containsKey(Object key){

  HashtableEntry e;

  HashtableEntry tab[]=table;

  int hash=key.hashCode();

  int index=(hash & 0x7FFFFFFF) % tab.length;

  for (e=tab[index]; e != null; e=e.next)   if ((e.hash == hash) && e.key.equals(key))   return true;

  return false;

}

Location: Hashtable.java

Content: 

/** 

 * Returns an enumeration of the values in this hashtable. Use the Enumeration methods on the returned object to fetch the elements sequentially.

 */

public Enumeration elements(){

  return new HashtableEnumerator(table,false);

}

Location: Hashtable.java

Content: 

/** 

 * Returns the value to which the specified key is mapped in this hashtable.

 */

public Object get(Object key){

  HashtableEntry e;

  HashtableEntry tab[]=table;

  int hash=key.hashCode();

  int index=(hash & 0x7FFFFFFF) % tab.length;

  for (e=tab[index]; e != null; e=e.next)   if ((e.hash == hash) && e.key.equals(key))   return e.value;

  return null;

}

Location: Hashtable.java

Content: 

/** 

 * Constructs a new, empty hashtable with a default capacity and load factor.

 */

public Hashtable(){

  this(101,0.75f);

}

Location: Hashtable.java

Content: 

/** 

 * Constructs a new, empty hashtable with the specified initial capacity and default load factor.

 */

public Hashtable(int initialCapacity){

  this(initialCapacity,0.75f);

}

Location: Hashtable.java

Content: 

/** 

 * Constructs a new, empty hashtable with the specified initial capacity and the specified load factor.

 */

public Hashtable(int initialCapacity,float loadFactor){

  if (initialCapacity <= 0)   initialCapacity=11;

  if (loadFactor <= 0.0)   loadFactor=0.75f;

  this.loadFactor=loadFactor;

  table=new HashtableEntry[initialCapacity];

  threshold=(int)(initialCapacity * loadFactor);

}

Location: Hashtable.java

Content: 

/** 

 * Maps the specified <code>key</code> to the specified <code>value</code> in this hashtable. Neither the key nor the value can be <code>null</code>. <p> The value can be retrieved by calling the <code>get</code> method with a key that is equal to the original key.

 */

public Object put(Object key,Object value){

  if (value == null)   throw new NullPointerException();

  HashtableEntry e;

  HashtableEntry tab[]=table;

  int hash=key.hashCode();

  int index=(hash & 0x7FFFFFFF) % tab.length;

  for (e=tab[index]; e != null; e=e.next) {

    if ((e.hash == hash) && e.key.equals(key)) {

      Object old=e.value;

      e.value=value;

      return old;

    }

  }

  if (count >= threshold) {

    rehash();

    return put(key,value);

  }

  e=new HashtableEntry();

  e.hash=hash;

  e.key=key;

  e.value=value;

  e.next=tab[index];

  tab[index]=e;

  count++;

  return null;

}

Location: Hashtable.java

Content: 

/** 

 * Removes the key (and its corresponding value) from this hashtable. This method does nothing if the key is not in the hashtable.

 */

public Object remove(Object key){

  HashtableEntry e, prev;

  HashtableEntry tab[]=table;

  int hash=key.hashCode();

  int index=(hash & 0x7FFFFFFF) % tab.length;

  for (e=tab[index], prev=null; e != null; prev=e, e=e.next) {

    if ((e.hash == hash) && e.key.equals(key)) {

      if (prev != null)       prev.next=e.next;

 else       tab[index]=e.next;

      count--;

      return e.value;

    }

  }

  return null;

}

