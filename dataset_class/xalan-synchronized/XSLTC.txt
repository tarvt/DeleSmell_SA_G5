Location: XSLTC.java

Content: 

/** 

 * Add literal text to char arrays that will be used to store character data in the stylesheet.

 * @param newData String data to be added to char arrays. Pre-condition:<code>newData.length() &le; 21845</code>

 * @return int offset at which character data will be stored

 */

public int addCharacterData(String newData){

  StringBuffer currData;

  if (m_characterData == null) {

    m_characterData=new Vector();

    currData=new StringBuffer();

    m_characterData.addElement(currData);

  }

 else {

    currData=(StringBuffer)m_characterData.elementAt(m_characterData.size() - 1);

  }

  if (newData.length() + currData.length() > 21845) {

    currData=new StringBuffer();

    m_characterData.addElement(currData);

  }

  int newDataOffset=currData.length();

  currData.append(newData);

  return newDataOffset;

}

Location: XSLTC.java

Content: 

/** 

 * Convert for Java class name of local system file name. (Replace '.' with '/' on UNIX and replace '.' by '\' on Windows/DOS.)

 */

private String classFileName(final String className){

  return className.replace('.',File.separatorChar) + ".class";

}

Location: XSLTC.java

Content: 

/** 

 * Compiles an XSL stylesheet passed in through an InputStream

 * @param input An InputSource that will pass in the stylesheet contents

 * @param name  The name of the translet class to generate - can be null

 * @return 'true' if the compilation was successful

 */

public boolean compile(InputSource input,String name){

  try {

    reset();

    String systemId=null;

    if (input != null) {

      systemId=input.getSystemId();

    }

    if (_className == null) {

      if (name != null) {

        setClassName(name);

      }

 else       if (systemId != null && systemId.length() != 0) {

        setClassName(Util.baseName(systemId));

      }

      if (_className == null || _className.length() == 0) {

        setClassName("GregorSamsa");

      }

    }

    SyntaxTreeNode element=null;

    if (_reader == null) {

      element=_parser.parse(input);

    }

 else {

      element=_parser.parse(_reader,input);

    }

    if ((!_parser.errorsFound()) && (element != null)) {

      _stylesheet=_parser.makeStylesheet(element);

      _stylesheet.setSourceLoader(_loader);

      _stylesheet.setSystemId(systemId);

      _stylesheet.setParentStylesheet(null);

      _stylesheet.setTemplateInlining(_templateInlining);

      _parser.setCurrentStylesheet(_stylesheet);

      _parser.createAST(_stylesheet);

    }

    if ((!_parser.errorsFound()) && (_stylesheet != null)) {

      _stylesheet.setCallsNodeset(_callsNodeset);

      _stylesheet.setMultiDocument(_multiDocument);

      _stylesheet.setHasIdCall(_hasIdCall);

synchronized (getClass()) {

        _stylesheet.translate();

      }

    }

  }

 catch (  Exception e) {

    e.printStackTrace();

    _parser.reportError(Constants.FATAL,new ErrorMsg(e));

  }

catch (  Error e) {

    if (_debug)     e.printStackTrace();

    _parser.reportError(Constants.FATAL,new ErrorMsg(e));

  }

 finally {

    _reader=null;

  }

  return !_parser.errorsFound();

}

Location: XSLTC.java

Content: 

/** 

 * Compiles an XSL stylesheet passed in through an InputStream

 * @param stream An InputStream that will pass in the stylesheet contents

 * @param name   The name of the translet class to generate

 * @return 'true' if the compilation was successful

 */

public boolean compile(InputStream stream,String name){

  final InputSource input=new InputSource(stream);

  input.setSystemId(name);

  return compile(input,name);

}

Location: XSLTC.java

Content: 

/** 

 * Compiles a stylesheet pointed to by a URL. The result is put in a set of byte arrays. One byte array for each generated class.

 * @param name  The name of the translet class to generate

 * @param input An InputSource that will pass in the stylesheet contents

 * @return JVM bytecodes that represent translet class definition

 */

public byte[][] compile(String name,InputSource input){

  return compile(name,input,BYTEARRAY_OUTPUT);

}

Location: XSLTC.java

Content: 

/** 

 * Compiles a stylesheet pointed to by a URL. The result is put in a set of byte arrays. One byte array for each generated class.

 * @param name       The name of the translet class to generate

 * @param input      An InputSource that will pass in the stylesheet contents

 * @param outputType The output type

 * @return JVM bytecodes that represent translet class definition

 */

public byte[][] compile(String name,InputSource input,int outputType){

  _outputType=outputType;

  if (compile(input,name))   return getBytecodes();

 else   return null;

}

Location: XSLTC.java

Content: 

/** 

 * Compiles an XSL stylesheet pointed to by a URL

 * @param url An URL containing the input XSL stylesheet

 */

public boolean compile(URL url){

  try {

    final InputStream stream=url.openStream();

    final InputSource input=new InputSource(stream);

    input.setSystemId(url.toString());

    return compile(input,_className);

  }

 catch (  IOException e) {

    _parser.reportError(Constants.FATAL,new ErrorMsg(e));

    return false;

  }

}

Location: XSLTC.java

Content: 

/** 

 * Compiles an XSL stylesheet pointed to by a URL

 * @param url  An URL containing the input XSL stylesheet

 * @param name The name to assign to the translet class

 */

public boolean compile(URL url,String name){

  try {

    final InputStream stream=url.openStream();

    final InputSource input=new InputSource(stream);

    input.setSystemId(url.toString());

    return compile(input,name);

  }

 catch (  IOException e) {

    _parser.reportError(Constants.FATAL,new ErrorMsg(e));

    return false;

  }

}

Location: XSLTC.java

Content: 

/** 

 * Compiles a set of stylesheets pointed to by a Vector of URLs

 * @param stylesheets A Vector containing URLs pointing to the stylesheets

 * @return 'true' if the compilation was successful

 */

public boolean compile(Vector stylesheets){

  final int count=stylesheets.size();

  if (count == 0)   return true;

  if (count == 1) {

    final Object url=stylesheets.firstElement();

    if (url instanceof URL)     return compile((URL)url);

 else     return false;

  }

 else {

    final Enumeration urls=stylesheets.elements();

    while (urls.hasMoreElements()) {

      _className=null;

      final Object url=urls.nextElement();

      if (url instanceof URL) {

        if (!compile((URL)url))         return false;

      }

    }

  }

  return true;

}

Location: XSLTC.java

Content: 

/** 

 * Get current debugging message setting

 */

public boolean debug(){

  return _debug;

}

Location: XSLTC.java

Content: 

public void dumpClass(JavaClass clazz){

  if (_outputType == FILE_OUTPUT || _outputType == BYTEARRAY_AND_FILE_OUTPUT) {

    File outFile=getOutputFile(clazz.getClassName());

    String parentDir=outFile.getParent();

    if (parentDir != null) {

      File parentFile=new File(parentDir);

      if (!parentFile.exists())       parentFile.mkdirs();

    }

  }

  try {

switch (_outputType) {

case FILE_OUTPUT:

      clazz.dump(new BufferedOutputStream(new FileOutputStream(getOutputFile(clazz.getClassName()))));

    break;

case JAR_OUTPUT:

  _bcelClasses.addElement(clazz);

break;

case BYTEARRAY_OUTPUT:

case BYTEARRAY_AND_FILE_OUTPUT:

case BYTEARRAY_AND_JAR_OUTPUT:

case CLASSLOADER_OUTPUT:

ByteArrayOutputStream out=new ByteArrayOutputStream(2048);

clazz.dump(out);

_classes.addElement(out.toByteArray());

if (_outputType == BYTEARRAY_AND_FILE_OUTPUT) clazz.dump(new BufferedOutputStream(new FileOutputStream(getOutputFile(clazz.getClassName()))));

 else if (_outputType == BYTEARRAY_AND_JAR_OUTPUT) _bcelClasses.addElement(clazz);

break;

}

}

 catch (Exception e) {

e.printStackTrace();

}

}

Location: XSLTC.java

Content: 

/** 

 * File separators are converted to forward slashes for ZIP files.

 */

private String entryName(File f) throws IOException {

  return f.getName().replace(File.separatorChar,'/');

}

Location: XSLTC.java

Content: 

/** 

 * Returns an array of bytecode arrays generated by a compilation.

 * @return JVM bytecodes that represent translet class definition

 */

public byte[][] getBytecodes(){

  final int count=_classes.size();

  final byte[][] result=new byte[count][1];

  for (int i=0; i < count; i++)   result[i]=(byte[])_classes.elementAt(i);

  return result;

}

Location: XSLTC.java

Content: 

/** 

 * Get the number of char[] arrays, thus far, that will be created to store literal text in the stylesheet.

 */

public int getCharacterDataCount(){

  return (m_characterData != null) ? m_characterData.size() : 0;

}

Location: XSLTC.java

Content: 

/** 

 * Retrieve a string representation of the character data to be stored in the translet as a <code>char[]</code>. There may be more than one such array required.

 * @param index The index of the <code>char[]</code>. Zero-based.

 * @return String The character data to be stored in the corresponding<code>char[]</code>.

 */

public String getCharacterData(int index){

  return ((StringBuffer)m_characterData.elementAt(index)).toString();

}

Location: XSLTC.java

Content: 

/** 

 * Returns a unique name for every helper class needed to execute a translet.

 */

public String getHelperClassName(){

  return getClassName() + '$' + _helperClassSerial++;

}

Location: XSLTC.java

Content: 

public String getJarFileName(){

  return _jarFileName;

}

Location: XSLTC.java

Content: 

public Vector getNamesIndex(){

  return _namesIndex;

}

Location: XSLTC.java

Content: 

public Vector getNamespaceIndex(){

  return _namespaceIndex;

}

Location: XSLTC.java

Content: 

public Vector getNSAncestorPointers(){

  return _stylesheetNSAncestorPointers;

}

Location: XSLTC.java

Content: 

public int[] getNumberFieldIndexes(){

  return _numberFieldIndexes;

}

Location: XSLTC.java

Content: 

/** 

 * Generate an output File object to send the translet to

 */

private File getOutputFile(String className){

  if (_destDir != null)   return new File(_destDir,classFileName(className));

 else   return new File(classFileName(className));

}

Location: XSLTC.java

Content: 

public Vector getPrefixURIPairs(){

  return _prefixURIPairs;

}

Location: XSLTC.java

Content: 

public Vector getPrefixURIPairsIdx(){

  return _prefixURIPairsIdx;

}

Location: XSLTC.java

Content: 

public int nextAttributeSetSerial(){

  return _attributeSetSerial++;

}

Location: XSLTC.java

Content: 

public int nextHelperClassSerial(){

  return _helperClassSerial++;

}

Location: XSLTC.java

Content: 

public int nextModeSerial(){

  return _modeSerial++;

}

Location: XSLTC.java

Content: 

public int nextStepPatternSerial(){

  return _stepPatternSerial++;

}

Location: XSLTC.java

Content: 

public int nextStylesheetSerial(){

  return _stylesheetSerial++;

}

Location: XSLTC.java

Content: 

/** 

 * Generate output JAR-file and packages

 */

public void outputToJar() throws IOException {

  final Manifest manifest=new Manifest();

  final java.util.jar.Attributes atrs=manifest.getMainAttributes();

  atrs.put(java.util.jar.Attributes.Name.MANIFEST_VERSION,"1.2");

  final Map map=manifest.getEntries();

  Enumeration classes=_bcelClasses.elements();

  final String now=(new Date()).toString();

  final java.util.jar.Attributes.Name dateAttr=new java.util.jar.Attributes.Name("Date");

  while (classes.hasMoreElements()) {

    final JavaClass clazz=(JavaClass)classes.nextElement();

    final String className=clazz.getClassName().replace('.','/');

    final java.util.jar.Attributes attr=new java.util.jar.Attributes();

    attr.put(dateAttr,now);

    map.put(className + ".class",attr);

  }

  final File jarFile=new File(_destDir,_jarFileName);

  final JarOutputStream jos=new JarOutputStream(new FileOutputStream(jarFile),manifest);

  classes=_bcelClasses.elements();

  while (classes.hasMoreElements()) {

    final JavaClass clazz=(JavaClass)classes.nextElement();

    final String className=clazz.getClassName().replace('.','/');

    jos.putNextEntry(new JarEntry(className + ".class"));

    final ByteArrayOutputStream out=new ByteArrayOutputStream(2048);

    clazz.dump(out);

    out.writeTo(jos);

  }

  jos.close();

}

Location: XSLTC.java

Content: 

/** 

 * Registers an attribute and gives it a type so that it can be mapped to DOM attribute types at run-time.

 */

public int registerAttribute(QName name){

  Integer code=(Integer)_attributes.get(name.toString());

  if (code == null) {

    code=new Integer(_nextGType++);

    _attributes.put(name.toString(),code);

    final String uri=name.getNamespace();

    final String local="@" + name.getLocalPart();

    if ((uri != null) && (uri.length() != 0))     _namesIndex.addElement(uri + ":" + local);

 else     _namesIndex.addElement(local);

    if (name.getLocalPart().equals("*")) {

      registerNamespace(name.getNamespace());

    }

  }

  return code.intValue();

}

Location: XSLTC.java

Content: 

/** 

 * Registers an element and gives it a type so that it can be mapped to DOM element types at run-time.

 */

public int registerElement(QName name){

  Integer code=(Integer)_elements.get(name.toString());

  if (code == null) {

    _elements.put(name.toString(),code=new Integer(_nextGType++));

    _namesIndex.addElement(name.toString());

  }

  if (name.getLocalPart().equals("*")) {

    registerNamespace(name.getNamespace());

  }

  return code.intValue();

}

Location: XSLTC.java

Content: 

/** 

 * Registers a namespace prefix and gives it a type so that it can be mapped to DOM namespace types at run-time.

 */

public int registerNamespacePrefix(QName name){

  Integer code=(Integer)_namespacePrefixes.get(name.toString());

  if (code == null) {

    code=new Integer(_nextGType++);

    _namespacePrefixes.put(name.toString(),code);

    final String uri=name.getNamespace();

    if ((uri != null) && (uri.length() != 0)) {

      _namesIndex.addElement("?");

    }

 else {

      _namesIndex.addElement("?" + name.getLocalPart());

    }

  }

  return code.intValue();

}

Location: XSLTC.java

Content: 

/** 

 * Registers a namespace and gives it a type so that it can be mapped to DOM namespace types at run-time.

 */

public int registerNamespacePrefix(String name){

  Integer code=(Integer)_namespacePrefixes.get(name);

  if (code == null) {

    code=new Integer(_nextGType++);

    _namespacePrefixes.put(name,code);

    _namesIndex.addElement("?" + name);

  }

  return code.intValue();

}

Location: XSLTC.java

Content: 

/** 

 * Registers a namespace and gives it a type so that it can be mapped to DOM namespace types at run-time.

 */

public int registerNamespace(String namespaceURI){

  Integer code=(Integer)_namespaces.get(namespaceURI);

  if (code == null) {

    code=new Integer(_nextNSType++);

    _namespaces.put(namespaceURI,code);

    _namespaceIndex.addElement(namespaceURI);

  }

  return code.intValue();

}

Location: XSLTC.java

Content: 

/** 

 * Registers namespace declarations that the stylesheet might need to look up dynamically - for instance, if an <code>xsl:element</code> has a a <code>name</code> attribute with variable parts and has no <code>namespace</code> attribute.

 * @param prefixMap  a <code>Hashtable</code> mapping namespace prefixes toURIs. Must not be <code>null</code>. The default namespace and namespace undeclarations are represented by a zero-length string.

 * @param ancestorID The <code>int</code> node ID of the nearest ancestor in thestylesheet that declares namespaces, or a value less than zero if there is no such ancestor

 * @return A new node ID for the stylesheet element

 */

public int registerStylesheetPrefixMappingForRuntime(Hashtable prefixMap,int ancestorID){

  if (_stylesheetNSAncestorPointers == null) {

    _stylesheetNSAncestorPointers=new Vector();

  }

  if (_prefixURIPairs == null) {

    _prefixURIPairs=new Vector();

  }

  if (_prefixURIPairsIdx == null) {

    _prefixURIPairsIdx=new Vector();

  }

  int currentNodeID=_stylesheetNSAncestorPointers.size();

  _stylesheetNSAncestorPointers.add(new Integer(ancestorID));

  Iterator prefixMapIterator=prefixMap.entrySet().iterator();

  int prefixNSPairStartIdx=_prefixURIPairs.size();

  _prefixURIPairsIdx.add(new Integer(prefixNSPairStartIdx));

  while (prefixMapIterator.hasNext()) {

    Map.Entry entry=(Map.Entry)prefixMapIterator.next();

    String prefix=(String)entry.getKey();

    String uri=(String)entry.getValue();

    _prefixURIPairs.add(prefix);

    _prefixURIPairs.add(uri);

  }

  return currentNodeID;

}

Location: XSLTC.java

Content: 

/** 

 * Set the class name for the generated translet. This class name is overridden if multiple stylesheets are compiled in one go using the compile(Vector urls) method.

 * @param className The name to assign to the translet class

 */

public void setClassName(String className){

  final String base=Util.baseName(className);

  final String noext=Util.noExtName(base);

  String name=Util.toJavaName(noext);

  if (_packageName == null)   _className=name;

 else   _className=_packageName + '.' + name;

}

Location: XSLTC.java

Content: 

/** 

 * Turn debugging messages on/off

 */

public void setDebug(boolean debug){

  _debug=debug;

}

Location: XSLTC.java

Content: 

/** 

 * Set the destination directory for the translet. The current working directory will be used by default.

 */

public boolean setDestDirectory(String dstDirName){

  final File dir=new File(dstDirName);

  if (dir.exists() || dir.mkdirs()) {

    _destDir=dir;

    return true;

  }

 else {

    _destDir=null;

    return false;

  }

}

Location: XSLTC.java

Content: 

/** 

 * Set the name of an optional JAR-file to dump the translet and auxiliary classes to

 */

public void setJarFileName(String jarFileName){

  final String JAR_EXT=".jar";

  if (jarFileName.endsWith(JAR_EXT))   _jarFileName=jarFileName;

 else   _jarFileName=jarFileName + JAR_EXT;

  _outputType=JAR_OUTPUT;

}

Location: XSLTC.java

Content: 

/** 

 * Set an optional package name for the translet and auxiliary classes

 */

public void setPackageName(String packageName){

  _packageName=packageName;

  if (_className != null)   setClassName(_className);

}

Location: XSLTC.java

Content: 

/** 

 * Set the top-level stylesheet

 */

public void setStylesheet(Stylesheet stylesheet){

  if (_stylesheet == null)   _stylesheet=stylesheet;

}

Location: XSLTC.java

Content: 

/** 

 * XSLTC compiler constructor

 */

public XSLTC(){

  _parser=new Parser(this);

}

