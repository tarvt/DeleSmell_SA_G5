Location: XObject.java

Content: 

/** 

 * Specify if it's OK for detach to release the iterator for reuse. This function should be called with a value of false for objects that are stored in variables. Calling this with a value of false on a XNodeSet will cause the nodeset to be cached.

 * @param allowRelease true if it is OK for detach to release this iterator forpooling.

 */

public void allowDetachToRelease(boolean allowRelease){

}

Location: XObject.java

Content: 

/** 

 * Cast result object to a boolean. Always issues an error.

 * @return false

 * @throws javax.xml.transform.TransformerException

 */

public boolean bool() throws javax.xml.transform.TransformerException {

  error(XPATHErrorResources.ER_CANT_CONVERT_TO_NUMBER,new Object[]{getTypeString()});

  return false;

}

Location: XObject.java

Content: 

/** 

 * Cast result object to a boolean, but allow side effects, such as the incrementing of an iterator.

 * @return True if there is a next node in the nodeset

 */

public boolean boolWithSideEffects() throws javax.xml.transform.TransformerException {

  return bool();

}

Location: XObject.java

Content: 

/** 

 * Cast object to type t.

 * @param t       Type of object to cast this to

 * @param support XPath context to use for the conversion

 * @return This object as the given type t

 * @throws javax.xml.transform.TransformerException

 */

public Object castToType(int t,XPathContext support) throws javax.xml.transform.TransformerException {

  Object result;

switch (t) {

case CLASS_STRING:

    result=str();

  break;

case CLASS_NUMBER:

result=new Double(num());

break;

case CLASS_NODESET:

result=iter();

break;

case CLASS_BOOLEAN:

result=bool() ? Boolean.TRUE : Boolean.FALSE;

break;

case CLASS_UNKNOWN:

result=m_obj;

break;

default :

error(XPATHErrorResources.ER_CANT_CONVERT_TO_TYPE,new Object[]{getTypeString(),Integer.toString(t)});

result=null;

}

return result;

}

Location: XObject.java

Content: 

/** 

 * Forces the object to release it's resources. This is more harsh than detach().

 */

public void destruct(){

  if (null != m_obj) {

    allowDetachToRelease(true);

    detach();

    setObject(null);

  }

}

Location: XObject.java

Content: 

/** 

 * Tell the user of an error, and probably throw an exception.

 * @param msg Error message to issue

 * @throws javax.xml.transform.TransformerException

 */

protected void error(String msg) throws javax.xml.transform.TransformerException {

  error(msg,null);

}

Location: XObject.java

Content: 

/** 

 * Tell the user of an error, and probably throw an exception.

 * @param msg  Error message to issue

 * @param args Arguments to use in the message

 * @throws javax.xml.transform.TransformerException

 */

protected void error(String msg,Object[] args) throws javax.xml.transform.TransformerException {

  String fmsg=XSLMessages.createXPATHMessage(msg,args);

{

    throw new XPathException(fmsg,this);

  }

}

Location: XObject.java

Content: 

/** 

 * Get a fresh copy of the object. For use with variables.

 * @return This object, unless overridden by subclass.

 */

public XObject getFresh(){

  return this;

}

Location: XObject.java

Content: 

/** 

 * Given a request type, return the equivalent string. For diagnostic purposes.

 * @return type string "#UNKNOWN" + object class name

 */

public String getTypeString(){

  return "#UNKNOWN (" + object().getClass().getName() + ")";

}

Location: XObject.java

Content: 

/** 

 * Tell if one object is greater than or equal to the other.

 * @param obj2 Object to compare this to

 * @return True if this object is greater than or equal to the given object

 * @throws javax.xml.transform.TransformerException

 */

public boolean greaterThanOrEqual(XObject obj2) throws javax.xml.transform.TransformerException {

  if (obj2.getType() == XObject.CLASS_NODESET)   return obj2.lessThanOrEqual(this);

  return this.num() >= obj2.num();

}

Location: XObject.java

Content: 

/** 

 * Tell if one object is greater than the other.

 * @param obj2 Object to compare this to

 * @return True if this object is greater than the given object

 * @throws javax.xml.transform.TransformerException

 */

public boolean greaterThan(XObject obj2) throws javax.xml.transform.TransformerException {

  if (obj2.getType() == XObject.CLASS_NODESET)   return obj2.lessThan(this);

  return this.num() > obj2.num();

}

Location: XObject.java

Content: 

/** 

 * Cast result object to a nodelist. Always issues an error.

 * @return null

 * @throws javax.xml.transform.TransformerException

 */

public DTMIterator iter() throws javax.xml.transform.TransformerException {

  error(XPATHErrorResources.ER_CANT_CONVERT_TO_NODELIST,new Object[]{getTypeString()});

  return null;

}

Location: XObject.java

Content: 

/** 

 * Tell if one object is less than or equal to the other.

 * @param obj2 Object to compare this to

 * @return True if this object is less than or equal to the given object

 * @throws javax.xml.transform.TransformerException

 */

public boolean lessThanOrEqual(XObject obj2) throws javax.xml.transform.TransformerException {

  if (obj2.getType() == XObject.CLASS_NODESET)   return obj2.greaterThanOrEqual(this);

  return this.num() <= obj2.num();

}

Location: XObject.java

Content: 

/** 

 * Tell if one object is less than the other.

 * @param obj2 Object to compare this to

 * @return True if this object is less than the given object

 * @throws javax.xml.transform.TransformerException

 */

public boolean lessThan(XObject obj2) throws javax.xml.transform.TransformerException {

  if (obj2.getType() == XObject.CLASS_NODESET)   return obj2.greaterThan(this);

  return this.num() < obj2.num();

}

Location: XObject.java

Content: 

/** 

 * Cast result object to a nodelist. Always issues an error.

 * @return The object as a NodeSetDTM.

 * @throws javax.xml.transform.TransformerException

 */

public NodeSetDTM mutableNodeset() throws javax.xml.transform.TransformerException {

  error(XPATHErrorResources.ER_CANT_CONVERT_TO_MUTABLENODELIST,new Object[]{getTypeString()});

  return (NodeSetDTM)m_obj;

}

Location: XObject.java

Content: 

/** 

 * Cast result object to a nodelist. Always issues an error.

 * @return null

 * @throws javax.xml.transform.TransformerException

 */

public NodeList nodelist() throws javax.xml.transform.TransformerException {

  error(XPATHErrorResources.ER_CANT_CONVERT_TO_NODELIST,new Object[]{getTypeString()});

  return null;

}

Location: XObject.java

Content: 

/** 

 * Cast result object to a nodelist. Always issues an error.

 * @return null

 * @throws javax.xml.transform.TransformerException

 */

public NodeIterator nodeset() throws javax.xml.transform.TransformerException {

  error(XPATHErrorResources.ER_CANT_CONVERT_TO_NODELIST,new Object[]{getTypeString()});

  return null;

}

Location: XObject.java

Content: 

/** 

 * Tell if two objects are functionally not equal.

 * @param obj2 Object to compare this to

 * @return True if this object is not equal to the given object

 * @throws javax.xml.transform.TransformerException

 */

public boolean notEquals(XObject obj2) throws javax.xml.transform.TransformerException {

  if (obj2.getType() == XObject.CLASS_NODESET)   return obj2.notEquals(this);

  return !equals(obj2);

}

Location: XObject.java

Content: 

/** 

 * Cast result object to a number, but allow side effects, such as the incrementing of an iterator.

 * @return numeric value of the string conversion from the next node in theNodeSetDTM, or NAN if no node was found

 */

public double numWithSideEffects() throws javax.xml.transform.TransformerException {

  return num();

}

Location: XObject.java

Content: 

/** 

 * Reset for fresh reuse.

 */

public void reset(){

}

Location: XObject.java

Content: 

/** 

 * Cast result object to a result tree fragment.

 * @param support XPath context to use for the conversion

 * @return the objec as a result tree fragment.

 */

public int rtf(XPathContext support){

  int result=rtf();

  if (DTM.NULL == result) {

    DTM frag=support.createDocumentFragment();

    frag.appendTextChild(str());

    result=frag.getDocument();

  }

  return result;

}

Location: XObject.java

Content: 

/** 

 * For functions to override.

 * @return null

 */

public DocumentFragment rtree(){

  return null;

}

Location: XObject.java

Content: 

/** 

 * Cast result object to a result tree fragment.

 * @param support XPath context to use for the conversion

 * @return the objec as a result tree fragment.

 */

public DocumentFragment rtree(XPathContext support){

  DocumentFragment docFrag=null;

  int result=rtf();

  if (DTM.NULL == result) {

    DTM frag=support.createDocumentFragment();

    frag.appendTextChild(str());

    docFrag=(DocumentFragment)frag.getNode(frag.getDocument());

  }

 else {

    DTM frag=support.getDTM(result);

    docFrag=(DocumentFragment)frag.getNode(frag.getDocument());

  }

  return docFrag;

}

Location: XObject.java

Content: 

protected void setObject(Object obj){

  m_obj=obj;

}

Location: XObject.java

Content: 

/** 

 * Create an XObject.

 */

public XObject(){

}

Location: XObject.java

Content: 

/** 

 * Create an XObject.

 * @param obj Can be any object, should be a specific type for derived classes,or null.

 */

public XObject(Object obj){

  setObject(obj);

}

