Location: MethodResolver.java

Content: 

/** 

 * Do a standard conversion of a double to the specified type.

 * @param num       The number to be converted.

 * @param javaClass The class type to be converted to.

 * @return An object specified by javaClass, or a Double instance.

 */

static Object convertDoubleToNumber(double num,Class javaClass){

  if ((javaClass == Double.TYPE) || (javaClass == java.lang.Double.class))   return new Double(num);

 else   if (javaClass == Float.TYPE)   return new Float(num);

 else   if (javaClass == Long.TYPE) {

    return new Long((long)num);

  }

 else   if (javaClass == Integer.TYPE) {

    return new Integer((int)num);

  }

 else   if (javaClass == Short.TYPE) {

    return new Short((short)num);

  }

 else   if (javaClass == Character.TYPE) {

    return new Character((char)num);

  }

 else   if (javaClass == Byte.TYPE) {

    return new Byte((byte)num);

  }

 else {

    return new Double(num);

  }

}

Location: MethodResolver.java

Content: 

/** 

 * Convert a set of parameters based on a set of paramTypes.

 * @param argsIn     An array of XSLT/XPath arguments.

 * @param argsOut    An array of the exact size as argsIn, which will bepopulated with converted arguments.

 * @param paramTypes An array of class objects, of the exact same size as argsInand argsOut.

 * @throws TransformerException may be thrown for Xalan conversion exceptions.

 */

public static void convertParams(Object[] argsIn,Object[][] argsOut,Class[] paramTypes,ExpressionContext exprContext) throws javax.xml.transform.TransformerException {

  if (paramTypes == null)   argsOut[0]=null;

 else {

    int nParams=paramTypes.length;

    argsOut[0]=new Object[nParams];

    int paramIndex=0;

    if ((nParams > 0) && ExpressionContext.class.isAssignableFrom(paramTypes[0])) {

      argsOut[0][0]=exprContext;

      paramIndex++;

    }

    if (argsIn != null) {

      for (int i=argsIn.length - nParams + paramIndex; paramIndex < nParams; i++, paramIndex++) {

        argsOut[0][paramIndex]=convert(argsIn[i],paramTypes[paramIndex]);

      }

    }

  }

}

Location: MethodResolver.java

Content: 

/** 

 * Convert the given XSLT object to an object of the given class.

 * @param xsltObj   The XSLT object that needs conversion.

 * @param javaClass The type of object to convert to.

 * @returns An object suitable for passing to the Method.invoke function in theargs array, which may be null in some cases.

 * @throws TransformerException may be thrown for Xalan conversion exceptions.

 */

static Object convert(Object xsltObj,Class javaClass) throws javax.xml.transform.TransformerException {

  if (xsltObj instanceof XObject) {

    XObject xobj=((XObject)xsltObj);

    int xsltClassType=xobj.getType();

switch (xsltClassType) {

case XObject.CLASS_NULL:

      return null;

case XObject.CLASS_BOOLEAN:

{

      if (javaClass == java.lang.String.class)       return xobj.str();

 else       return xobj.bool() ? Boolean.TRUE : Boolean.FALSE;

    }

case XObject.CLASS_NUMBER:

{

    if (javaClass == java.lang.String.class)     return xobj.str();

 else     if (javaClass == Boolean.TYPE)     return xobj.bool() ? Boolean.TRUE : Boolean.FALSE;

 else {

      return convertDoubleToNumber(xobj.num(),javaClass);

    }

  }

case XObject.CLASS_STRING:

{

  if ((javaClass == java.lang.String.class) || (javaClass == java.lang.Object.class))   return xobj.str();

 else   if (javaClass == Character.TYPE) {

    String str=xobj.str();

    if (str.length() > 0)     return new Character(str.charAt(0));

 else     return null;

  }

 else   if (javaClass == Boolean.TYPE)   return xobj.bool() ? Boolean.TRUE : Boolean.FALSE;

 else {

    return convertDoubleToNumber(xobj.num(),javaClass);

  }

}

case XObject.CLASS_RTREEFRAG:

{

if ((javaClass == NodeIterator.class) || (javaClass == java.lang.Object.class)) {

  DTMIterator dtmIter=((XRTreeFrag)xobj).asNodeIterator();

  return new DTMNodeIterator(dtmIter);

}

 else if (javaClass == NodeList.class) {

  return ((XRTreeFrag)xobj).convertToNodeset();

}

 else if (javaClass == Node.class) {

  DTMIterator iter=((XRTreeFrag)xobj).asNodeIterator();

  int rootHandle=iter.nextNode();

  DTM dtm=iter.getDTM(rootHandle);

  return dtm.getNode(dtm.getFirstChild(rootHandle));

}

 else if (javaClass == java.lang.String.class) {

  return xobj.str();

}

 else if (javaClass == Boolean.TYPE) {

  return xobj.bool() ? Boolean.TRUE : Boolean.FALSE;

}

 else if (javaClass.isPrimitive()) {

  return convertDoubleToNumber(xobj.num(),javaClass);

}

 else {

  DTMIterator iter=((XRTreeFrag)xobj).asNodeIterator();

  int rootHandle=iter.nextNode();

  DTM dtm=iter.getDTM(rootHandle);

  Node child=dtm.getNode(dtm.getFirstChild(rootHandle));

  if (javaClass.isAssignableFrom(child.getClass()))   return child;

 else   return null;

}

}

case XObject.CLASS_NODESET:

{

if ((javaClass == NodeIterator.class) || (javaClass == java.lang.Object.class)) {

return xobj.nodeset();

}

 else if (javaClass == NodeList.class) {

return xobj.nodelist();

}

 else if (javaClass == Node.class) {

DTMIterator ni=xobj.iter();

int handle=ni.nextNode();

if (handle != DTM.NULL) return ni.getDTM(handle).getNode(handle);

 else return null;

}

 else if (javaClass == java.lang.String.class) {

return xobj.str();

}

 else if (javaClass == Boolean.TYPE) {

return xobj.bool() ? Boolean.TRUE : Boolean.FALSE;

}

 else if (javaClass.isPrimitive()) {

return convertDoubleToNumber(xobj.num(),javaClass);

}

 else {

DTMIterator iter=xobj.iter();

int childHandle=iter.nextNode();

DTM dtm=iter.getDTM(childHandle);

Node child=dtm.getNode(childHandle);

if (javaClass.isAssignableFrom(child.getClass())) return child;

 else return null;

}

}

}

xsltObj=xobj.object();

}

if (null != xsltObj) {

if (javaClass == java.lang.String.class) {

return xsltObj.toString();

}

 else if (javaClass.isPrimitive()) {

XString xstr=new XString(xsltObj.toString());

double num=xstr.num();

return convertDoubleToNumber(num,javaClass);

}

 else if (javaClass == java.lang.Class.class) {

return xsltObj.getClass();

}

 else {

return xsltObj;

}

}

 else {

return xsltObj;

}

}

Location: MethodResolver.java

Content: 

private static String errArgs(Object[] xsltArgs,int startingArg){

  StringBuffer returnArgs=new StringBuffer();

  for (int i=startingArg; i < xsltArgs.length; i++) {

    if (i != startingArg)     returnArgs.append(", ");

    if (xsltArgs[i] instanceof XObject)     returnArgs.append(((XObject)xsltArgs[i]).getTypeString());

 else     returnArgs.append(xsltArgs[i].getClass().getName());

  }

  return returnArgs.toString();

}

Location: MethodResolver.java

Content: 

/** 

 * Format the message for the NoSuchMethodException containing all the information about the method we're looking for.

 */

private static String errString(String callType,String searchType,Class classObj,String funcName,int searchMethod,Object[] xsltArgs){

  String resultString="For extension " + callType + ", could not find "+ searchType+ " ";

switch (searchMethod) {

case STATIC_ONLY:

    return resultString + "static " + classObj.getName()+ "."+ funcName+ "([ExpressionContext,] "+ errArgs(xsltArgs,0)+ ").";

case INSTANCE_ONLY:

  return resultString + classObj.getName() + "."+ funcName+ "([ExpressionContext,] "+ errArgs(xsltArgs,0)+ ").";

case STATIC_AND_INSTANCE:

return resultString + classObj.getName() + "."+ funcName+ "([ExpressionContext,] "+ errArgs(xsltArgs,0)+ ").\n"+ "Checked both static and instance methods.";

case DYNAMIC:

return resultString + "static " + classObj.getName()+ "."+ funcName+ "([ExpressionContext, ]"+ errArgs(xsltArgs,0)+ ") nor\n"+ classObj+ "."+ funcName+ "([ExpressionContext,] "+ errArgs(xsltArgs,1)+ ").";

default :

if (callType.equals("function")) {

return resultString + classObj.getName() + "([ExpressionContext,] "+ errArgs(xsltArgs,0)+ ").";

}

 else {

return resultString + classObj.getName() + "."+ funcName+ "(org.apache.xalan.extensions.XSLProcessorContext, "+ "org.apache.xalan.templates.ElemExtensionCall).";

}

}

}

Location: MethodResolver.java

Content: 

/** 

 * Given a class, figure out the resolution of the Java Constructor from the XSLT argument types, and perform the conversion of the arguments.

 * @param classObj the Class of the object to be constructed.

 * @param argsIn   An array of XSLT/XPath arguments.

 * @param argsOut  An array of the exact size as argsIn, which will be populatedwith converted arguments if a suitable method is found.

 * @return A constructor that will work with the argsOut array.

 * @throws TransformerException may be thrown for Xalan conversion exceptions.

 */

public static Constructor getConstructor(Class classObj,Object[] argsIn,Object[][] argsOut,ExpressionContext exprContext) throws NoSuchMethodException, SecurityException, TransformerException {

  Constructor bestConstructor=null;

  Class[] bestParamTypes=null;

  Constructor[] constructors=classObj.getConstructors();

  int nMethods=constructors.length;

  int bestScore=Integer.MAX_VALUE;

  int bestScoreCount=0;

  for (int i=0; i < nMethods; i++) {

    Constructor ctor=constructors[i];

    Class[] paramTypes=ctor.getParameterTypes();

    int numberMethodParams=paramTypes.length;

    int paramStart=0;

    boolean isFirstExpressionContext=false;

    int scoreStart;

    if (numberMethodParams == (argsIn.length + 1)) {

      Class javaClass=paramTypes[0];

      if (ExpressionContext.class.isAssignableFrom(javaClass)) {

        isFirstExpressionContext=true;

        scoreStart=0;

        paramStart++;

      }

 else       continue;

    }

 else     scoreStart=1000;

    if (argsIn.length == (numberMethodParams - paramStart)) {

      int score=scoreMatch(paramTypes,paramStart,argsIn,scoreStart);

      if (-1 == score)       continue;

      if (score < bestScore) {

        bestConstructor=ctor;

        bestParamTypes=paramTypes;

        bestScore=score;

        bestScoreCount=1;

      }

 else       if (score == bestScore)       bestScoreCount++;

    }

  }

  if (null == bestConstructor) {

    throw new NoSuchMethodException(errString("function","constructor",classObj,"",0,argsIn));

  }

 else   convertParams(argsIn,argsOut,bestParamTypes,exprContext);

  return bestConstructor;

}

Location: MethodResolver.java

Content: 

/** 

 * Given the name of a method, figure out the resolution of the Java Method

 * @param classObj The Class of the object that should have the method.

 * @param name     The name of the method to be invoked.

 * @return A method that will work to be called as an element.

 * @throws TransformerException may be thrown for Xalan conversion exceptions.

 */

public static Method getElementMethod(Class classObj,String name) throws NoSuchMethodException, SecurityException, TransformerException {

  Method bestMethod=null;

  Method[] methods=classObj.getMethods();

  int nMethods=methods.length;

  int bestScoreCount=0;

  for (int i=0; i < nMethods; i++) {

    Method method=methods[i];

    if (method.getName().equals(name)) {

      Class[] paramTypes=method.getParameterTypes();

      if ((paramTypes.length == 2) && paramTypes[1].isAssignableFrom(org.apache.xalan.templates.ElemExtensionCall.class) && paramTypes[0].isAssignableFrom(org.apache.xalan.extensions.XSLProcessorContext.class)) {

        if (++bestScoreCount == 1)         bestMethod=method;

 else         break;

      }

    }

  }

  if (null == bestMethod) {

    throw new NoSuchMethodException(errString("element","method",classObj,name,0,null));

  }

 else   if (bestScoreCount > 1)   throw new TransformerException(XSLMessages.createMessage(XSLTErrorResources.ER_MORE_MATCH_ELEMENT,new Object[]{name}));

  return bestMethod;

}

Location: MethodResolver.java

Content: 

/** 

 * Given the name of a method, figure out the resolution of the Java Method from the XSLT argument types, and perform the conversion of the arguments.

 * @param classObj The Class of the object that should have the method.

 * @param name     The name of the method to be invoked.

 * @param argsIn   An array of XSLT/XPath arguments.

 * @param argsOut  An array of the exact size as argsIn, which will be populatedwith converted arguments if a suitable method is found.

 * @return A method that will work with the argsOut array.

 * @throws TransformerException may be thrown for Xalan conversion exceptions.

 */

public static Method getMethod(Class classObj,String name,Object[] argsIn,Object[][] argsOut,ExpressionContext exprContext,int searchMethod) throws NoSuchMethodException, SecurityException, TransformerException {

  if (name.indexOf("-") > 0)   name=replaceDash(name);

  Method bestMethod=null;

  Class[] bestParamTypes=null;

  Method[] methods=classObj.getMethods();

  int nMethods=methods.length;

  int bestScore=Integer.MAX_VALUE;

  int bestScoreCount=0;

  boolean isStatic;

  for (int i=0; i < nMethods; i++) {

    Method method=methods[i];

    int xsltParamStart=0;

    if (method.getName().equals(name)) {

      isStatic=Modifier.isStatic(method.getModifiers());

switch (searchMethod) {

case STATIC_ONLY:

        if (!isStatic) {

          continue;

        }

      break;

case INSTANCE_ONLY:

    if (isStatic) {

      continue;

    }

  break;

case STATIC_AND_INSTANCE:

break;

case DYNAMIC:

if (!isStatic) xsltParamStart=1;

}

int javaParamStart=0;

Class[] paramTypes=method.getParameterTypes();

int numberMethodParams=paramTypes.length;

boolean isFirstExpressionContext=false;

int scoreStart;

int argsLen=(null != argsIn) ? argsIn.length : 0;

if (numberMethodParams == (argsLen - xsltParamStart + 1)) {

Class javaClass=paramTypes[0];

if (ExpressionContext.class.isAssignableFrom(javaClass)) {

isFirstExpressionContext=true;

scoreStart=0;

javaParamStart++;

}

 else {

continue;

}

}

 else scoreStart=1000;

if ((argsLen - xsltParamStart) == (numberMethodParams - javaParamStart)) {

int score=scoreMatch(paramTypes,javaParamStart,argsIn,scoreStart);

if (-1 == score) continue;

if (score < bestScore) {

bestMethod=method;

bestParamTypes=paramTypes;

bestScore=score;

bestScoreCount=1;

}

 else if (score == bestScore) bestScoreCount++;

}

}

}

if (null == bestMethod) {

throw new NoSuchMethodException(errString("function","method",classObj,name,searchMethod,argsIn));

}

 else convertParams(argsIn,argsOut,bestParamTypes,exprContext);

return bestMethod;

}

Location: MethodResolver.java

Content: 

/** 

 * Score the conversion of a set of XSLT arguments to a given set of Java parameters. If any invocations of this function for a method with the same name return the same positive value, then a conflict has occured, and an error should be signaled.

 * @param javaParamTypes Must be filled with valid class names, and of the samelength as xsltArgs.

 * @param xsltArgs       Must be filled with valid object instances, and of thesame length as javeParamTypes.

 * @return -1 for no allowed conversion, or a positive score that is closer tozero for more preferred, or further from zero for less preferred.

 */

public static int scoreMatch(Class[] javaParamTypes,int javaParamsStart,Object[] xsltArgs,int score){

  if ((xsltArgs == null) || (javaParamTypes == null))   return score;

  int nParams=xsltArgs.length;

  for (int i=nParams - javaParamTypes.length + javaParamsStart, javaParamTypesIndex=javaParamsStart; i < nParams; i++, javaParamTypesIndex++) {

    Object xsltObj=xsltArgs[i];

    int xsltClassType=(xsltObj instanceof XObject) ? ((XObject)xsltObj).getType() : XObject.CLASS_UNKNOWN;

    Class javaClass=javaParamTypes[javaParamTypesIndex];

    if (xsltClassType == XObject.CLASS_NULL) {

      if (!javaClass.isPrimitive()) {

        score+=10;

        continue;

      }

 else       return -1;

    }

    ConversionInfo[] convInfo=m_conversions[xsltClassType];

    int nConversions=convInfo.length;

    int k;

    for (k=0; k < nConversions; k++) {

      ConversionInfo cinfo=convInfo[k];

      if (javaClass.isAssignableFrom(cinfo.m_class)) {

        score+=cinfo.m_score;

        break;

      }

    }

    if (k == nConversions) {

      if (XObject.CLASS_UNKNOWN == xsltClassType) {

        Class realClass=null;

        if (xsltObj instanceof XObject) {

          Object realObj=((XObject)xsltObj).object();

          if (null != realObj) {

            realClass=realObj.getClass();

          }

 else {

            score+=10;

            continue;

          }

        }

 else {

          realClass=xsltObj.getClass();

        }

        if (javaClass.isAssignableFrom(realClass)) {

          score+=0;

        }

 else         return -1;

      }

 else       return -1;

    }

  }

  return score;

}

