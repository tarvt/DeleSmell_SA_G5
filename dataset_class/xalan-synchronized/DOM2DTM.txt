Location: DOM2DTM.java

Content: 

/** 

 * Construct the node map from the node.

 * @param node            The node that is to be added to the DTM.

 * @param parentIndex     The current parent index.

 * @param previousSibling The previous sibling index.

 * @param forceNodeType   If not DTM.NULL, overrides the DOM node type. Used toforce nodes to Text rather than CDATASection when their coalesced value includes ordinary Text nodes (current DTM behavior).

 * @return The index identity of the node that was added.

 */

protected int addNode(Node node,int parentIndex,int previousSibling,int forceNodeType){

  int nodeIndex=m_nodes.size();

  if (m_dtmIdent.size() == (nodeIndex >>> DTMManager.IDENT_DTM_NODE_BITS)) {

    try {

      if (m_mgr == null)       throw new ClassCastException();

      DTMManagerDefault mgrD=(DTMManagerDefault)m_mgr;

      int id=mgrD.getFirstFreeDTMID();

      mgrD.addDTM(this,id,nodeIndex);

      m_dtmIdent.addElement(id << DTMManager.IDENT_DTM_NODE_BITS);

    }

 catch (    ClassCastException e) {

      error(XMLMessages.createXMLMessage(XMLErrorResources.ER_NO_DTMIDS_AVAIL,null));

    }

  }

  m_size++;

  int type;

  if (NULL == forceNodeType)   type=node.getNodeType();

 else   type=forceNodeType;

  if (Node.ATTRIBUTE_NODE == type) {

    String name=node.getNodeName();

    if (name.startsWith("xmlns:") || name.equals("xmlns")) {

      type=DTM.NAMESPACE_NODE;

    }

  }

  m_nodes.addElement(node);

  m_firstch.setElementAt(NOTPROCESSED,nodeIndex);

  m_nextsib.setElementAt(NOTPROCESSED,nodeIndex);

  m_prevsib.setElementAt(previousSibling,nodeIndex);

  m_parent.setElementAt(parentIndex,nodeIndex);

  if (DTM.NULL != parentIndex && type != DTM.ATTRIBUTE_NODE && type != DTM.NAMESPACE_NODE) {

    if (NOTPROCESSED == m_firstch.elementAt(parentIndex))     m_firstch.setElementAt(nodeIndex,parentIndex);

  }

  String nsURI=node.getNamespaceURI();

  String localName=(type == Node.PROCESSING_INSTRUCTION_NODE) ? node.getNodeName() : node.getLocalName();

  if (((type == Node.ELEMENT_NODE) || (type == Node.ATTRIBUTE_NODE)) && null == localName)   localName=node.getNodeName();

  ExpandedNameTable exnt=m_expandedNameTable;

  if (node.getLocalName() == null && (type == Node.ELEMENT_NODE || type == Node.ATTRIBUTE_NODE)) {

  }

  int expandedNameID=(null != localName) ? exnt.getExpandedTypeID(nsURI,localName,type) : exnt.getExpandedTypeID(type);

  m_exptype.setElementAt(expandedNameID,nodeIndex);

  indexNode(expandedNameID,nodeIndex);

  if (DTM.NULL != previousSibling)   m_nextsib.setElementAt(nodeIndex,previousSibling);

  if (type == DTM.NAMESPACE_NODE)   declareNamespaceInContext(parentIndex,nodeIndex);

  return nodeIndex;

}

Location: DOM2DTM.java

Content: 

/** 

 * Directly call the characters method on the passed ContentHandler for the string-value of the given node (see http://www.w3.org/TR/xpath#data-model for the definition of a node's string-value). Multiple calls to the ContentHandler's characters methods may well occur for a single call to this method.

 * @param nodeHandle The node ID.

 * @param ch         A non-null reference to a ContentHandler.

 * @throws org.xml.sax.SAXException

 */

public void dispatchCharactersEvents(int nodeHandle,org.xml.sax.ContentHandler ch,boolean normalize) throws org.xml.sax.SAXException {

  if (normalize) {

    XMLString str=getStringValue(nodeHandle);

    str=str.fixWhiteSpace(true,true,false);

    str.dispatchCharactersEvents(ch);

  }

 else {

    int type=getNodeType(nodeHandle);

    Node node=getNode(nodeHandle);

    dispatchNodeData(node,ch,0);

    if (TEXT_NODE == type || CDATA_SECTION_NODE == type) {

      while (null != (node=logicalNextDOMTextNode(node))) {

        dispatchNodeData(node,ch,0);

      }

    }

  }

}

Location: DOM2DTM.java

Content: 

/** 

 * Retrieve the text content of a DOM subtree, appending it into a user-supplied FastStringBuffer object. Note that attributes are not considered part of the content of an element. <p> There are open questions regarding whitespace stripping. Currently we make no special effort in that regard, since the standard DOM doesn't yet provide DTD-based information to distinguish whitespace-in-element-context from genuine #PCDATA. Note that we should probably also consider xml:space if/when we address this. DOM Level 3 may solve the problem for us. <p> %REVIEW% Note that as a DOM-level operation, it can be argued that this routine _shouldn't_ perform any processing beyond what the DOM already does, and that whitespace stripping and so on belong at the DTM level. If you want a stripped DOM view, wrap DTM2DOM around DOM2DTM.

 * @param node Node whose subtree is to be walked, gathering the contents of allText or CDATASection nodes.

 */

protected static void dispatchNodeData(Node node,org.xml.sax.ContentHandler ch,int depth) throws org.xml.sax.SAXException {

switch (node.getNodeType()) {

case Node.DOCUMENT_FRAGMENT_NODE:

case Node.DOCUMENT_NODE:

case Node.ELEMENT_NODE:

{

      for (Node child=node.getFirstChild(); null != child; child=child.getNextSibling()) {

        dispatchNodeData(child,ch,depth + 1);

      }

    }

  break;

case Node.PROCESSING_INSTRUCTION_NODE:

case Node.COMMENT_NODE:

if (0 != depth) break;

case Node.TEXT_NODE:

case Node.CDATA_SECTION_NODE:

case Node.ATTRIBUTE_NODE:

String str=node.getNodeValue();

if (ch instanceof CharacterNodeHandler) {

((CharacterNodeHandler)ch).characters(node);

}

 else {

ch.characters(str.toCharArray(),0,str.length());

}

break;

default :

break;

}

}

Location: DOM2DTM.java

Content: 

/** 

 * Construct a DOM2DTM object from a DOM node.

 * @param mgr              The DTMManager who owns this DTM.

 * @param domSource        the DOM source that this DTM will wrap.

 * @param dtmIdentity      The DTM identity ID for this DTM.

 * @param whiteSpaceFilter The white space filter for this DTM, which may benull.

 * @param xstringfactory   XMLString factory for creating character content.

 * @param doIndexing       true if the caller considers it worth it to useindexing schemes.

 */

public DOM2DTM(DTMManager mgr,DOMSource domSource,int dtmIdentity,DTMWSFilter whiteSpaceFilter,XMLStringFactory xstringfactory,boolean doIndexing){

  super(mgr,domSource,dtmIdentity,whiteSpaceFilter,xstringfactory,doIndexing);

  m_pos=m_root=domSource.getNode();

  m_last_parent=m_last_kid=NULL;

  m_last_kid=addNode(m_root,m_last_parent,m_last_kid,NULL);

  if (ELEMENT_NODE == m_root.getNodeType()) {

    NamedNodeMap attrs=m_root.getAttributes();

    int attrsize=(attrs == null) ? 0 : attrs.getLength();

    if (attrsize > 0) {

      int attrIndex=NULL;

      for (int i=0; i < attrsize; ++i) {

        attrIndex=addNode(attrs.item(i),0,attrIndex,NULL);

        m_firstch.setElementAt(DTM.NULL,attrIndex);

      }

      m_nextsib.setElementAt(DTM.NULL,attrIndex);

    }

  }

  m_nodesAreProcessed=false;

}

Location: DOM2DTM.java

Content: 

/** 

 * Get the handle from a Node. <p> %OPT% This will be pretty slow. </p> <p> %OPT% An XPath-like search (walk up DOM to root, tracking path; walk down DTM reconstructing path) might be considerably faster on later nodes in large documents. That might also imply improving this call to handle nodes which would be in this DTM but have not yet been built, which might or might not be a Good Thing. </p> %REVIEW% This relies on being able to test node-identity via object-identity. DTM2DOM proxying is a great example of a case where that doesn't work. DOM Level 3 will provide the isSameNode() method to fix that, but until then this is going to be flaky.

 * @param node A node, which may be null.

 * @return The node handle or <code>DTM.NULL</code>.

 */

private int getHandleFromNode(Node node){

  if (null != node) {

    int len=m_nodes.size();

    boolean isMore;

    int i=0;

    do {

      for (; i < len; i++) {

        if (m_nodes.elementAt(i) == node)         return makeNodeHandle(i);

      }

      isMore=nextNode();

      len=m_nodes.size();

    }

 while (isMore || i < len);

  }

  return DTM.NULL;

}

Location: DOM2DTM.java

Content: 

/** 

 * Get the handle from a Node. This is a more robust version of getHandleFromNode, intended to be usable by the public. <p> %OPT% This will be pretty slow. </p> %REVIEW% This relies on being able to test node-identity via object-identity. DTM2DOM proxying is a great example of a case where that doesn't work. DOM Level 3 will provide the isSameNode() method to fix that, but until then this is going to be flaky.

 * @param node A node, which may be null.

 * @return The node handle or <code>DTM.NULL</code>.

 */

public int getHandleOfNode(Node node){

  if (null != node) {

    if ((m_root == node) || (m_root.getNodeType() == DOCUMENT_NODE && m_root == node.getOwnerDocument()) || (m_root.getNodeType() != DOCUMENT_NODE && m_root.getOwnerDocument() == node.getOwnerDocument())) {

      for (Node cursor=node; cursor != null; cursor=(cursor.getNodeType() != ATTRIBUTE_NODE) ? cursor.getParentNode() : ((org.w3c.dom.Attr)cursor).getOwnerElement()) {

        if (cursor == m_root)         return getHandleFromNode(node);

      }

    }

  }

  return DTM.NULL;

}

Location: DOM2DTM.java

Content: 

/** 

 * Return an DOM node for the given node.

 * @param nodeHandle The node ID.

 * @return A node representation of the DTM node.

 */

public Node getNode(int nodeHandle){

  int identity=makeNodeIdentity(nodeHandle);

  return (Node)m_nodes.elementAt(identity);

}

Location: DOM2DTM.java

Content: 

/** 

 * Utility function: Given a DOM Text node, determine whether it is logically followed by another Text or CDATASection node. This may involve traversing into Entity References. %REVIEW% DOM Level 3 is expected to add functionality which may allow us to retire this.

 */

private Node logicalNextDOMTextNode(Node n){

  Node p=n.getNextSibling();

  if (p == null) {

    for (n=n.getParentNode(); n != null && ENTITY_REFERENCE_NODE == n.getNodeType(); n=n.getParentNode()) {

      p=n.getNextSibling();

      if (p != null)       break;

    }

  }

  n=p;

  while (n != null && ENTITY_REFERENCE_NODE == n.getNodeType()) {

    if (n.hasChildNodes())     n=n.getFirstChild();

 else     n=n.getNextSibling();

  }

  if (n != null) {

    int ntype=n.getNodeType();

    if (TEXT_NODE != ntype && CDATA_SECTION_NODE != ntype)     n=null;

  }

  return n;

}

Location: DOM2DTM.java

Content: 

/** 

 * Get a Node from an identity index. NEEDSDOC @param nodeIdentity NEEDSDOC ($objectName$) @return

 */

protected Node lookupNode(int nodeIdentity){

  return (Node)m_nodes.elementAt(nodeIdentity);

}

