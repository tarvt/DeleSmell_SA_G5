Location: DTMException.java

Content: 

/** 

 * Create a new DTMException.

 * @param message The error or warning message.

 */

public DTMException(String message){

  super(message);

  this.containedException=null;

  this.locator=null;

}

Location: DTMException.java

Content: 

/** 

 * Create a new DTMException from a message and a Locator. <p> This constructor is especially useful when an application is creating its own exception from within a DocumentHandler callback. </p>

 * @param message The error or warning message.

 * @param locator The locator object for the error or warning.

 */

public DTMException(String message,SourceLocator locator){

  super(message);

  this.containedException=null;

  this.locator=locator;

}

Location: DTMException.java

Content: 

/** 

 * Wrap an existing exception in a DTMException.

 * @param message The error or warning message, or null to use the message fromthe embedded exception.

 * @param locator The locator object for the error or warning.

 * @param e       Any exception

 */

public DTMException(String message,SourceLocator locator,Throwable e){

  super(message);

  this.containedException=e;

  this.locator=locator;

}

Location: DTMException.java

Content: 

/** 

 * Wrap an existing exception in a DTMException. <p> This is used for throwing processor exceptions before the processing has started. </p>

 * @param message The error or warning message, or null to use the message fromthe embedded exception.

 * @param e       Any exception

 */

public DTMException(String message,Throwable e){

  super(((message == null) || (message.length() == 0)) ? e.getMessage() : message);

  this.containedException=e;

  this.locator=null;

}

Location: DTMException.java

Content: 

/** 

 * Create a new DTMException wrapping an existing exception.

 * @param e The exception to be wrapped.

 */

public DTMException(Throwable e){

  super(e.getMessage());

  this.containedException=e;

  this.locator=null;

}

Location: DTMException.java

Content: 

/** 

 * Returns the cause of this throwable or <code>null</code> if the cause is nonexistent or unknown. (The cause is the throwable that caused this throwable to get thrown.)

 */

public Throwable getCause(){

  return ((containedException == this) ? null : containedException);

}

Location: DTMException.java

Content: 

/** 

 * Get the location information as a string.

 * @return A string with location info, or null if there is no locationinformation.

 */

public String getLocationAsString(){

  if (null != locator) {

    StringBuffer sbuffer=new StringBuffer();

    String systemID=locator.getSystemId();

    int line=locator.getLineNumber();

    int column=locator.getColumnNumber();

    if (null != systemID) {

      sbuffer.append("; SystemID: ");

      sbuffer.append(systemID);

    }

    if (0 != line) {

      sbuffer.append("; Line#: ");

      sbuffer.append(line);

    }

    if (0 != column) {

      sbuffer.append("; Column#: ");

      sbuffer.append(column);

    }

    return sbuffer.toString();

  }

 else {

    return null;

  }

}

Location: DTMException.java

Content: 

/** 

 * Get the error message with location information appended.

 */

public String getMessageAndLocation(){

  StringBuffer sbuffer=new StringBuffer();

  String message=super.getMessage();

  if (null != message) {

    sbuffer.append(message);

  }

  if (null != locator) {

    String systemID=locator.getSystemId();

    int line=locator.getLineNumber();

    int column=locator.getColumnNumber();

    if (null != systemID) {

      sbuffer.append("; SystemID: ");

      sbuffer.append(systemID);

    }

    if (0 != line) {

      sbuffer.append("; Line#: ");

      sbuffer.append(line);

    }

    if (0 != column) {

      sbuffer.append("; Column#: ");

      sbuffer.append(column);

    }

  }

  return sbuffer.toString();

}

Location: DTMException.java

Content: 

/** 

 * Initializes the <i>cause</i> of this throwable to the specified value. (The cause is the throwable that caused this throwable to get thrown.) <p> This method can be called at most once. It is generally called from within the constructor, or immediately after creating the throwable. If this throwable was created with  {@link #DTMException(Throwable)} or{@link #DTMException(String,Throwable)}, this method cannot be called even once.

 * @param cause the cause (which is saved for later retrieval by the{@link #getCause()} method). (A <tt>null</tt> value ispermitted, and indicates that the cause is nonexistent or unknown.)

 * @return a reference to this <code>Throwable</code> instance.

 * @throws IllegalArgumentException if <code>cause</code> is this throwable. (Athrowable cannot be its own cause.)

 * @throws IllegalStateException    if this throwable was created with{@link #DTMException(Throwable)} or{@link #DTMException(String,Throwable)}, or this method has already been called on this throwable.

 */

public synchronized Throwable initCause(Throwable cause){

  if ((this.containedException == null) && (cause != null)) {

    throw new IllegalStateException(XMLMessages.createXMLMessage(XMLErrorResources.ER_CANNOT_OVERWRITE_CAUSE,null));

  }

  if (cause == this) {

    throw new IllegalArgumentException(XMLMessages.createXMLMessage(XMLErrorResources.ER_SELF_CAUSATION_NOT_PERMITTED,null));

  }

  this.containedException=cause;

  return this;

}

Location: DTMException.java

Content: 

/** 

 * Print the the trace of methods from where the error originated. This will trace all nested exception objects, as well as this object.

 */

public void printStackTrace(){

  printStackTrace(new java.io.PrintWriter(System.err,true));

}

Location: DTMException.java

Content: 

/** 

 * Method setLocator sets an instance of a SourceLocator object that specifies where an error occured.

 * @param location A SourceLocator object, or null to clear the location.

 */

public void setLocator(SourceLocator location){

  locator=location;

}

