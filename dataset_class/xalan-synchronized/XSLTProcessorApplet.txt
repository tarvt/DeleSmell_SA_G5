Location: XSLTProcessorApplet.java

Content: 

/** 

 * Cleanup; called when applet is terminated and unloaded.

 */

public void destroy(){

  if (null != m_trustedWorker) {

    m_trustedWorker.stop();

    m_trustedWorker=null;

  }

  m_styleURLOfCached=null;

  m_documentURLOfCached=null;

}

Location: XSLTProcessorApplet.java

Content: 

/** 

 * Given a String containing markup, escape the markup so it can be displayed in the browser.

 * @param s String to escapeThe escaped string.

 */

public String escapeString(String s){

  StringBuffer sb=new StringBuffer();

  int length=s.length();

  for (int i=0; i < length; i++) {

    char ch=s.charAt(i);

    if ('<' == ch) {

      sb.append("&lt;");

    }

 else     if ('>' == ch) {

      sb.append("&gt;");

    }

 else     if ('&' == ch) {

      sb.append("&amp;");

    }

 else     if (0xd800 <= ch && ch < 0xdc00) {

      int next;

      if (i + 1 >= length) {

        throw new RuntimeException(XSLMessages.createMessage(XSLTErrorResources.ER_INVALID_UTF16_SURROGATE,new Object[]{Integer.toHexString(ch)}));

      }

 else {

        next=s.charAt(++i);

        if (!(0xdc00 <= next && next < 0xe000))         throw new RuntimeException(XSLMessages.createMessage(XSLTErrorResources.ER_INVALID_UTF16_SURROGATE,new Object[]{Integer.toHexString(ch) + " " + Integer.toHexString(next)}));

        next=((ch - 0xd800) << 10) + next - 0xdc00 + 0x00010000;

      }

      sb.append("&#x");

      sb.append(Integer.toHexString(next));

      sb.append(";");

    }

 else {

      sb.append(ch);

    }

  }

  return sb.toString();

}

Location: XSLTProcessorApplet.java

Content: 

/** 

 * The processor keeps a cache of the source and style trees, so call this method if they have changed or you want to do garbage collection.

 */

public void freeCache(){

  m_styleURLOfCached=null;

  m_documentURLOfCached=null;

}

Location: XSLTProcessorApplet.java

Content: 

/** 

 * Get basic information about the applet

 * @return A String with the applet name and author.

 */

public String getAppletInfo(){

  return "Name: XSLTProcessorApplet\r\n" + "Author: Scott Boag";

}

Location: XSLTProcessorApplet.java

Content: 

/** 

 * Assuming the stylesheet URL and the input XML URL have been set, perform the transformation and return the result as a String.

 * @return A string that contains the contents pointed to by the URL.

 */

public String getHtmlText(){

  m_trustedAgent.m_getData=true;

  m_callThread=Thread.currentThread();

  try {

synchronized (m_callThread) {

      m_callThread.wait();

    }

  }

 catch (  InterruptedException ie) {

    System.out.println(ie.getMessage());

  }

  return m_htmlText;

}

Location: XSLTProcessorApplet.java

Content: 

/** 

 * Get descriptions of the applet parameters.

 * @return A two-dimensional array of Strings with Name, Type, and Descriptionfor each parameter.

 */

public String[][] getParameterInfo(){

  String[][] info={{PARAM_styleURL,"String","URL to an XSL stylesheet"},{PARAM_documentURL,"String","URL to an XML document"}};

  return info;

}

Location: XSLTProcessorApplet.java

Content: 

/** 

 * Get the HTML result Tree as a text string suitable for display in a browser. Note that this is for display of the XML itself, not for rendering of HTML by the browser.

 * @return Transformation result as unmarked text.

 * @throws Exception thrown if tree can not be converted.

 */

public String getResultTreeAsText() throws Exception {

  return escapeString(getHtmlText());

}

Location: XSLTProcessorApplet.java

Content: 

/** 

 * Use a Transformer to copy the source document to a StreamResult.

 * @return the document as a string

 */

private String getSource() throws TransformerException {

  StringWriter osw=new StringWriter();

  PrintWriter pw=new PrintWriter(osw,false);

  String text="";

  try {

    URL docURL=new URL(m_documentBase,m_treeURL);

synchronized (m_tfactory) {

      Transformer transformer=m_tfactory.newTransformer();

      StreamSource source=new StreamSource(docURL.toString());

      StreamResult result=new StreamResult(pw);

      transformer.transform(source,result);

      text=osw.toString();

    }

  }

 catch (  MalformedURLException e) {

    e.printStackTrace();

    throw new RuntimeException(e.getMessage());

  }

catch (  Exception any_error) {

    any_error.printStackTrace();

  }

  return text;

}

Location: XSLTProcessorApplet.java

Content: 

/** 

 * Get the XML source Tree as a text string suitable for display in a browser. Note that this is for display of the XML itself, not for rendering of HTML by the browser.

 * @return XML source document as a string.

 * @throws Exception thrown if tree can not be converted.

 */

public String getSourceTreeAsText() throws Exception {

  return getTreeAsText(m_documentURL);

}

Location: XSLTProcessorApplet.java

Content: 

/** 

 * Get the XSL style Tree as a text string suitable for display in a browser. Note that this is for display of the XML itself, not for rendering of HTML by the browser.

 * @return The XSL stylesheet as a string.

 * @throws Exception thrown if tree can not be converted.

 */

public String getStyleTreeAsText() throws Exception {

  return getTreeAsText(m_styleURL);

}

Location: XSLTProcessorApplet.java

Content: 

/** 

 * Get an XML document (or stylesheet)

 * @param treeURL valid URL string for the document.

 * @return document

 * @throws IOException

 */

public String getTreeAsText(String treeURL) throws IOException {

  m_treeURL=treeURL;

  m_trustedAgent.m_getData=true;

  m_trustedAgent.m_getSource=true;

  m_callThread=Thread.currentThread();

  try {

synchronized (m_callThread) {

      m_callThread.wait();

    }

  }

 catch (  InterruptedException ie) {

    System.out.println(ie.getMessage());

  }

  return m_sourceText;

}

Location: XSLTProcessorApplet.java

Content: 

/** 

 * Do not call; this applet contains no UI or visual components.

 */

public void paint(Graphics g){

}

Location: XSLTProcessorApplet.java

Content: 

/** 

 * Process the transformation.

 * @return The transformation result as a string.

 * @throws TransformerException

 */

private String processTransformation() throws TransformerException {

  String htmlData=null;

  this.showStatus("Waiting for Transformer and Parser to finish loading and JITing...");

synchronized (m_tfactory) {

    URL documentURL=null;

    URL styleURL=null;

    StringWriter osw=new StringWriter();

    PrintWriter pw=new PrintWriter(osw,false);

    StreamResult result=new StreamResult(pw);

    this.showStatus("Begin Transformation...");

    try {

      documentURL=new URL(m_codeBase,m_documentURL);

      StreamSource xmlSource=new StreamSource(documentURL.toString());

      styleURL=new URL(m_codeBase,m_styleURL);

      StreamSource xslSource=new StreamSource(styleURL.toString());

      Transformer transformer=m_tfactory.newTransformer(xslSource);

      Iterator m_entries=m_parameters.entrySet().iterator();

      while (m_entries.hasNext()) {

        Map.Entry entry=(Map.Entry)m_entries.next();

        Object key=entry.getKey();

        Object expression=entry.getValue();

        transformer.setParameter((String)key,expression);

      }

      transformer.transform(xmlSource,result);

    }

 catch (    TransformerConfigurationException tfe) {

      tfe.printStackTrace();

      throw new RuntimeException(tfe.getMessage());

    }

catch (    MalformedURLException e) {

      e.printStackTrace();

      throw new RuntimeException(e.getMessage());

    }

    this.showStatus("Transformation Done!");

    htmlData=osw.toString();

  }

  return htmlData;

}

Location: XSLTProcessorApplet.java

Content: 

/** 

 * Set the URL to the XML document that will be transformed with the XSL stylesheet. No processing is done yet.

 * @param urlString valid URL string for XML document.

 */

public void setDocumentURL(String urlString){

  m_documentURL=urlString;

}

Location: XSLTProcessorApplet.java

Content: 

/** 

 * Set an attribute in the stylesheet, which gives the ability to have some dynamic selection control.

 * @param nameOfIDAttrOfElemToModify The name of an attribute to search for aunique id.

 * @param elemId                     The unique ID to look for.

 * @param attrName                   Once the element is found, the name of theattribute to set.

 * @param value                      The value to set the attribute to.

 */

public void setStyleSheetAttribute(String nameOfIDAttrOfElemToModify,String elemId,String attrName,String value){

  m_nameOfIDAttrOfElemToModify=nameOfIDAttrOfElemToModify;

  m_elemIdToModify=elemId;

  m_attrNameToSet=attrName;

  m_attrValueToSet=value;

}

Location: XSLTProcessorApplet.java

Content: 

/** 

 * Submit a stylesheet parameter.

 * @param key  stylesheet parameter key

 * @param expr the parameter expression to be submitted.

 * @see javax.xml.transform.Transformer#setParameter(String,Object)

 */

public void setStylesheetParam(String key,String expr){

  m_parameters.put(key,expr);

}

Location: XSLTProcessorApplet.java

Content: 

/** 

 * Set the URL to the XSL stylesheet that will be used to transform the input XML. No processing is done yet.

 * @param urlString valid URL string for XSL stylesheet.

 */

public void setStyleURL(String urlString){

  m_styleURL=urlString;

}

Location: XSLTProcessorApplet.java

Content: 

/** 

 * Automatically called when the HTML client containing the applet loads. This method starts execution of the applet thread.

 */

public void start(){

  m_trustedAgent=new TrustedAgent();

  Thread currentThread=Thread.currentThread();

  m_trustedWorker=new Thread(currentThread.getThreadGroup(),m_trustedAgent);

  m_trustedWorker.start();

  try {

    m_tfactory=TransformerFactory.newInstance();

    this.showStatus("Causing Transformer and Parser to Load and JIT...");

    StringReader xmlbuf=new StringReader("<?xml version='1.0'?><foo/>");

    StringReader xslbuf=new StringReader("<?xml version='1.0'?><xsl:stylesheet xmlns:xsl='http://www.w3.org/1999/XSL/Transform' version='1.0'><xsl:template match='foo'><out/></xsl:template></xsl:stylesheet>");

    PrintWriter pw=new PrintWriter(new StringWriter());

synchronized (m_tfactory) {

      Templates templates=m_tfactory.newTemplates(new StreamSource(xslbuf));

      Transformer transformer=templates.newTransformer();

      transformer.transform(new StreamSource(xmlbuf),new StreamResult(pw));

    }

    System.out.println("Primed the pump!");

    this.showStatus("Ready to go!");

  }

 catch (  Exception e) {

    this.showStatus("Could not prime the pump!");

    System.out.println("Could not prime the pump!");

    e.printStackTrace();

  }

}

Location: XSLTProcessorApplet.java

Content: 

/** 

 * Automatically called when the HTML page containing the applet is no longer on the screen. Stops execution of the applet thread.

 */

public void stop(){

  if (null != m_trustedWorker) {

    m_trustedWorker.stop();

    m_trustedWorker=null;

  }

  m_styleURLOfCached=null;

  m_documentURLOfCached=null;

}

Location: XSLTProcessorApplet.java

Content: 

/** 

 * Process a document and a stylesheet and return the transformation result. Use the xsl:stylesheet PI to find the document, if one exists.

 * @param doc URL string to XML document containing an xsl:stylesheet PI.

 * @return HTML transformation result

 */

public String transformToHtml(String doc){

  if (null != doc) {

    m_documentURL=doc;

  }

  m_styleURL=null;

  return getHtmlText();

}

Location: XSLTProcessorApplet.java

Content: 

/** 

 * Process a document and a stylesheet and return the transformation result. If one of these is null, the existing value (of a previous transformation) is not affected.

 * @param doc   URL string to XML document

 * @param style URL string to XSL stylesheet

 * @return HTML transformation result

 */

public String transformToHtml(String doc,String style){

  if (null != doc) {

    m_documentURL=doc;

  }

  if (null != style) {

    m_styleURL=style;

  }

  return getHtmlText();

}

Location: XSLTProcessorApplet.java

Content: 

/** 

 * The XSLTProcessorApplet constructor takes no arguments.

 */

public XSLTProcessorApplet(){

}

