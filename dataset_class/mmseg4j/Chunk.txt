Location: Chunk.java

Content: 

/** 

 * Largest Average Word Length

 */

public double getAvgLen(){

  if (avgLen < 0) {

    avgLen=(double)getLen() / getCount();

  }

  return avgLen;

}

Location: Chunk.java

Content: 

/** 

 */

public int getCount(){

  if (count < 0) {

    count=0;

    for (    Word word : words) {

      if (word != null) {

        count++;

      }

    }

  }

  return count;

}

Location: Chunk.java

Content: 

/** 

 * Word Length

 */

public int getLen(){

  if (len < 0) {

    len=0;

    count=0;

    for (    Word word : words) {

      if (word != null) {

        len+=word.getLength();

        count++;

      }

    }

  }

  return len;

}

Location: Chunk.java

Content: 

/** 

 * Sum of Degree of Morphemic Freedom of One-Character

 */

public int getSumDegree(){

  if (sumDegree < 0) {

    int sum=0;

    for (    Word word : words) {

      if (word != null && word.getDegree() > -1) {

        sum+=word.getDegree();

      }

    }

    sumDegree=sum;

  }

  return sumDegree;

}

Location: Chunk.java

Content: 

/** Variance of Word Lengths

 */

public double getVariance(){

  if (variance < 0) {

    double sum=0;

    for (    Word word : words) {

      if (word != null) {

        sum+=Math.pow(word.getLength() - getAvgLen(),2);

      }

    }

    variance=sum / getCount();

  }

  return variance;

}

Location: Chunk.java

Content: 

public Word[] getWords(){

  return words;

}

Location: Chunk.java

Content: 

public void setWords(Word[] words){

  this.words=words;

  count=words.length;

}

Location: Chunk.java

Content: 

public String toFactorString(){

  StringBuilder sb=new StringBuilder();

  sb.append("[");

  sb.append("len=").append(getLen()).append(", ");

  sb.append("avgLen=").append(getAvgLen()).append(", ");

  sb.append("variance=").append(getVariance()).append(", ");

  sb.append("sum100log=").append(getSumDegree()).append("]");

  return sb.toString();

}

Location: Chunk.java

Content: 

@Override public String toString(){

  StringBuilder sb=new StringBuilder();

  for (  Word word : words) {

    if (word != null) {

      sb.append(word.getString()).append('_');

    }

  }

  return sb.toString();

}

