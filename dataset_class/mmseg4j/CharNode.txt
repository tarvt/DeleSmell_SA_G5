Location: CharNode.java

Content: 

public void addWordTail(char[] wordTail){

  keyTreeWordTails.add(wordTail);

  wordNum++;

  if (wordTail.length > maxLen) {

    maxLen=wordTail.length;

  }

}

Location: CharNode.java

Content: 

public CharNode(){

}

Location: CharNode.java

Content: 

public int getFreq(){

  return freq;

}

Location: CharNode.java

Content: 

public int getMaxLen(){

  return maxLen;

}

Location: CharNode.java

Content: 

public int indexOf(char[] sen,int offset,int tailLen){

  return keyTreeWordTails.match(sen,offset + 1,tailLen) ? 1 : -1;

}

Location: CharNode.java

Content: 

/** 

 */

public ArrayList<Integer> maxMatch(ArrayList<Integer> tailLens,char[] sen,int wordTailOffset){

  return keyTreeWordTails.maxMatch(tailLens,sen,wordTailOffset);

}

Location: CharNode.java

Content: 

public void setFreq(int freq){

  this.freq=freq;

}

Location: CharNode.java

Content: 

public void setMaxLen(int maxLen){

  this.maxLen=maxLen;

}

Location: CharNode.java

Content: 

public int wordNum(){

  return wordNum;

}

