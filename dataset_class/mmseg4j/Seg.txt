Location: Seg.java

Content: 

/** 

 * @see Dictionary#isUnit(Character)

 */

protected boolean isUnit(int codePoint){

  return dic.isUnit((char)codePoint);

}

Location: Seg.java

Content: 

/**  

 */

protected int maxMatch(CharNode[] cns,int cnIdx,char[] chs,int offset){

  CharNode cn=null;

  char ch=0;

  if (offset < chs.length) {

    ch=chs[offset];

    cn=dic.head(ch);

  }

  cns[cnIdx]=cn;

  int len=dic.maxMatch(cn,chs,offset);

  if (len == 0 && MMSeg.isLetterOrDigit(ch)) {

    int cnt=skipChars(chs,offset);

    if (cnt > 0) {

      return cnt;

    }

  }

  return len;

}

Location: Seg.java

Content: 

/** 

 */

protected void maxMatch(CharNode[] cns,int idx,char[] chs,int offset,ArrayList<Integer>[] tailLens,int tailLensIdx){

  CharNode cn=null;

  char ch=0;

  if (offset < chs.length) {

    ch=chs[offset];

    cn=dic.head(ch);

  }

  cns[idx]=cn;

  dic.maxMatch(cn,tailLens[tailLensIdx],chs,offset);

  if (tailLens[tailLensIdx].size() == 1 && tailLens[tailLensIdx].get(0) == 0 && MMSeg.isLetterOrDigit(ch)) {

    int cnt=skipChars(chs,offset);

    if (cnt > 0) {

      tailLens[tailLensIdx].set(0,cnt);

    }

  }

}

Location: Seg.java

Content: 

/** 

 */

protected void printChunk(List<Chunk> chunks){

  for (  Chunk ck : chunks) {

    System.out.println(ck + " -> " + ck.toFactorString());

  }

}

Location: Seg.java

Content: 

/** 

 */

protected int search(char[] chs,int offset,int tailLen){

  if (tailLen == 0) {

    return -1;

  }

  CharNode cn=dic.head(chs[offset]);

  return search(cn,chs,offset,tailLen);

}

Location: Seg.java

Content: 

/** 

 */

protected int search(CharNode cn,char[] chs,int offset,int tailLen){

  if (tailLen == 0 || cn == null) {

    return -1;

  }

  return dic.search(cn,chs,offset,tailLen);

}

Location: Seg.java

Content: 

public Seg(Dictionary dic){

  super();

  this.dic=dic;

}

Location: Seg.java

Content: 

int skipChars(char[] chs,int offset){

  int num=0;

  ReadCharByAsciiOrDigit rcad=new ReadCharByAsciiOrDigit();

  for (int i=offset + 1; i < chs.length; i++) {

    int d=rcad.transform(MMSeg.toAscii(chs[i]));

    if (rcad.isRead(d) || pass.contains(String.valueOf(d)))     num++;

 else {

      int m=rcad.transform(MMSeg.toAscii(chs[i++]));

      if (dic.isUnit((char)m)) {

        num++;

        break;

      }

 else       break;

    }

  }

  return num;

}

