Location: ComplexSeg.java

Content: 

public ComplexSeg(Dictionary dic){

  super(dic);

  otherRules.add(new LargestAvgLenRule());

  otherRules.add(new SmallestVarianceRule());

  otherRules.add(new LargestSumDegreeFreedomRule());

}

Location: ComplexSeg.java

Content: 

private Chunk createChunk(Sentence sen,char[] chs,int[] tailLen,int[] offsets,CharNode[] cns){

  Chunk ck=new Chunk();

  for (int i=0; i < 3; i++) {

    if (offsets[i] < chs.length) {

      ck.words[i]=new Word(chs,sen.getStartOffset(),offsets[i],tailLen[i] + 1);

      if (tailLen[i] == 0) {

        CharNode cn=cns[i];

        if (cn != null) {

          ck.words[i].setDegree(cn.getFreq());

        }

      }

    }

  }

  return ck;

}

Location: ComplexSeg.java

Content: 

public static boolean isShowChunk(){

  return showChunk;

}

Location: ComplexSeg.java

Content: 

public static void setShowChunk(boolean showChunk){

  ComplexSeg.showChunk=showChunk;

}

