Location: DISCARD.java

Content: 

public DISCARD addIgnoredMembers(Address... senders){

  ignoredMembers.addAll(Arrays.asList(senders));

  return this;

}

Location: DISCARD.java

Content: 

/** 

 * Messages from this sender will get dropped 

 */

public DISCARD addIgnoreMember(Address sender){

  ignoredMembers.add(sender);

  return this;

}

Location: DISCARD.java

Content: 

public double getDownDiscardRate(){

  return down;

}

Location: DISCARD.java

Content: 

public int getDropDownMulticasts(){

  return drop_down_multicasts;

}

Location: DISCARD.java

Content: 

public int getDropDownUnicasts(){

  return drop_down_unicasts;

}

Location: DISCARD.java

Content: 

@ManagedAttribute(description="The set of ignored members") public String getIgnoredMembers(){

  return ignoredMembers.toString();

}

Location: DISCARD.java

Content: 

public double getUpDiscardRate(){

  return up;

}

Location: DISCARD.java

Content: 

public boolean isDiscardAll(){

  return discard_all;

}

Location: DISCARD.java

Content: 

public boolean isExcludeItself(){

  return excludeItself;

}

Location: DISCARD.java

Content: 

public DISCARD localAddress(Address addr){

  setLocalAddress(addr);

  return this;

}

Location: DISCARD.java

Content: 

public DISCARD removeIgnoredMember(Address member){

  ignoredMembers.remove(member);

  return this;

}

Location: DISCARD.java

Content: 

public DISCARD resetIgnoredMembers(){

  ignoredMembers.clear();

  return this;

}

Location: DISCARD.java

Content: 

public DISCARD setDiscardAll(boolean discard_all){

  this.discard_all=discard_all;

  return this;

}

Location: DISCARD.java

Content: 

public DISCARD setDownDiscardRate(double down){

  this.down=down;

  return this;

}

Location: DISCARD.java

Content: 

public DISCARD setDropDownMulticasts(int drop_down_multicasts){

  this.drop_down_multicasts=drop_down_multicasts;

  return this;

}

Location: DISCARD.java

Content: 

/** 

 * Drop the next N unicasts down the stack

 * @param drop_down_unicasts

 */

public DISCARD setDropDownUnicasts(int drop_down_unicasts){

  this.drop_down_unicasts=drop_down_unicasts;

  return this;

}

Location: DISCARD.java

Content: 

public DISCARD setExcludeItself(boolean excludeItself){

  this.excludeItself=excludeItself;

  return this;

}

Location: DISCARD.java

Content: 

public DISCARD setLocalAddress(Address localAddress){

  this.localAddress=localAddress;

  if (discard_dialog != null)   discard_dialog.setTitle(localAddress != null ? localAddress.toString() : "n/a");

  return this;

}

Location: DISCARD.java

Content: 

public DISCARD setUpDiscardRate(double up){

  this.up=up;

  return this;

}

Location: DISCARD.java

Content: 

/** 

 * Checks if a message should be passed up, or not 

 */

protected boolean shouldDropUpMessage(@SuppressWarnings("UnusedParameters") Message msg,Address sender){

  if (discard_all && !sender.equals(localAddress()))   return true;

  if (ignoredMembers.contains(sender)) {

    if (log.isTraceEnabled())     log.trace(localAddress + ": dropping message from " + sender);

    num_up++;

    return true;

  }

  if (up > 0) {

    double r=Math.random();

    if (r < up) {

      if (excludeItself && sender.equals(localAddress())) {

        if (log.isTraceEnabled())         log.trace("excluding myself");

      }

 else {

        if (log.isTraceEnabled())         log.trace(localAddress + ": dropping message from " + sender);

        num_up++;

        return true;

      }

    }

  }

  return false;

}

Location: DISCARD.java

Content: 

@ManagedOperation public void startGui(){

  if (discard_dialog == null) {

    discard_dialog=new DiscardDialog();

    discard_dialog.init();

    discard_dialog.setTitle(localAddress() != null ? localAddress().toString() : "n/a");

    discard_dialog.handleView(members);

  }

}

Location: DISCARD.java

Content: 

@ManagedOperation public void stopGui(){

  if (discard_dialog != null)   discard_dialog.dispose();

  discard_dialog=null;

}

