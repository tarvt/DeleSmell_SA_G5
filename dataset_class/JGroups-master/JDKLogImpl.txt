Location: JDKLogImpl.java

Content: 

protected String format(String format,Object... args){

  try {

    return String.format(format,args);

  }

 catch (  IllegalFormatException ex) {

    error("Illegal format string \"" + format + "\", args="+ Arrays.toString(args));

  }

catch (  Throwable t) {

    error("Failure formatting string: format string=" + format + ", args="+ Arrays.toString(args));

  }

  return format;

}

Location: JDKLogImpl.java

Content: 

public JDKLogImpl(Class<?> clazz){

  logger=Logger.getLogger(clazz.getName());

}

Location: JDKLogImpl.java

Content: 

public JDKLogImpl(String category){

  logger=Logger.getLogger(category);

}

Location: JDKLogImpl.java

Content: 

private void log(Level lv,String msg){

  log(lv,msg,null);

}

Location: JDKLogImpl.java

Content: 

/** 

 * To correctly attribute the source class/method name to that of the JGroups class, we can't let JDK compute that. Instead, we do it on our own.

 */

private void log(Level lv,String msg,Throwable e){

  if (logger.isLoggable(lv)) {

    LogRecord r=new LogRecord(lv,msg);

    r.setThrown(e);

    for (    StackTraceElement frame : new Exception().getStackTrace()) {

      if (!frame.getClassName().equals(THIS_CLASS_NAME)) {

        r.setSourceClassName(frame.getClassName());

        r.setSourceMethodName(frame.getMethodName());

        break;

      }

    }

    logger.log(r);

  }

}

Location: JDKLogImpl.java

Content: 

protected static Level strToLevel(String level){

  if (level == null)   return null;

  level=level.toLowerCase().trim();

  if (level.equals("fatal"))   return Level.SEVERE;

  if (level.equals("error"))   return Level.SEVERE;

  if (level.equals("warn"))   return Level.WARNING;

  if (level.equals("warning"))   return Level.WARNING;

  if (level.equals("info"))   return Level.INFO;

  if (level.equals("debug"))   return Level.FINE;

  if (level.equals("trace"))   return Level.FINER;

  return null;

}

