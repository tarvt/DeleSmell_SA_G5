Location: MessageDispatcher.java

Content: 

/** 

 * Sends a message to all members and expects responses from members in dests (if non-null).

 * @param dests A list of group members from which to expect responses (if the call is blocking).

 * @param data The message to be sent

 * @param opts A set of options that govern the call. See {@link org.jgroups.blocks.RequestOptions} for details

 * @return CompletableFuture<T> A future from which the results (RspList) can be retrieved, or null if the requestwas sent asynchronously

 * @throws Exception If the request cannot be sent

 */

public <T>CompletableFuture<RspList<T>> castMessageWithFuture(final Collection<Address> dests,Buffer data,RequestOptions opts) throws Exception {

  return cast(dests,data,opts,false);

}

Location: MessageDispatcher.java

Content: 

/** 

 * Sends a message to all members and expects responses from members in dests (if non-null).

 * @param dests A list of group members from which to expect responses (if the call is blocking).

 * @param data The message to be sent

 * @param opts A set of options that govern the call. See {@link org.jgroups.blocks.RequestOptions} for details

 * @return RspList A list of Rsp elements, or null if the RPC is asynchronous

 * @throws Exception If the request cannot be sent

 * @since 2.9

 */

public <T>RspList<T> castMessage(final Collection<Address> dests,Buffer data,RequestOptions opts) throws Exception {

  GroupRequest<T> req=cast(dests,data,opts,true);

  return req != null ? req.getNow(null) : null;

}

Location: MessageDispatcher.java

Content: 

/** 

 * Sends a message to all members and expects responses from members in dests (if non-null).

 * @param dests A list of group members from which to expect responses (if the call is blocking).

 * @param data The buffer

 * @param offset the offset into data

 * @param length the number of bytes to send

 * @param opts A set of options that govern the call. See {@link org.jgroups.blocks.RequestOptions} for details

 * @return RspList A list of Rsp elements, or null if the RPC is asynchronous

 * @throws Exception If the request cannot be sent

 * @since 4.0

 */

public <T>RspList<T> castMessage(Collection<Address> dests,byte[] data,int offset,int length,RequestOptions opts) throws Exception {

  return castMessage(dests,new Buffer(data,offset,length),opts);

}

Location: MessageDispatcher.java

Content: 

protected <T>GroupRequest<T> cast(final Collection<Address> dests,Buffer data,RequestOptions options,boolean block_for_results) throws Exception {

  if (options == null) {

    log.warn("request options were null, using default of sync");

    options=RequestOptions.SYNC();

  }

  List<Address> real_dests;

  if (dests != null)   real_dests=dests.stream().filter(dest -> dest instanceof SiteAddress || this.members.contains(dest)).collect(ArrayList::new,(list,dest) -> {

    if (!list.contains(dest))     list.add(dest);

  }

,(l,r) -> {

  }

);

 else   real_dests=new ArrayList<>(members);

  JChannel tmp=channel;

  if ((tmp != null && tmp.getDiscardOwnMessages()) || options.transientFlagSet(Message.TransientFlag.DONT_LOOPBACK)) {

    if (local_addr == null)     local_addr=tmp != null ? tmp.getAddress() : null;

    real_dests.remove(local_addr);

  }

  if (options.hasExclusionList())   Stream.of(options.exclusionList()).forEach(real_dests::remove);

  if (real_dests.isEmpty()) {

    log.trace("destination list is empty, won't send message");

    return empty_group_request;

  }

  boolean sync=options.mode() != ResponseMode.GET_NONE;

  boolean non_blocking=!sync || !block_for_results, anycast=options.anycasting();

  if (non_blocking)   updateStats(real_dests,anycast,sync,0);

  if (!sync) {

    corr.sendRequest(real_dests,data,null,options);

    return null;

  }

  GroupRequest<T> req=new GroupRequest<>(corr,real_dests,options);

  long start=non_blocking || !rpc_stats.extendedStats() ? 0 : System.nanoTime();

  req.execute(data,block_for_results);

  long time=non_blocking || !rpc_stats.extendedStats() ? 0 : System.nanoTime() - start;

  if (!non_blocking)   updateStats(real_dests,anycast,true,time);

  return req;

}

Location: MessageDispatcher.java

Content: 

protected <T>GroupRequest<T> cast(final Collection<Address> dests,byte[] data,int offset,int length,RequestOptions options,boolean block_for_results) throws Exception {

  return cast(dests,new Buffer(data,offset,length),options,block_for_results);

}

Location: MessageDispatcher.java

Content: 

public RequestCorrelator correlator(){

  return corr;

}

Location: MessageDispatcher.java

Content: 

public <X extends MessageDispatcher>X correlator(RequestCorrelator c){

  if (c == null)   return (X)this;

  stop();

  this.corr=c;

  corr.asyncDispatching(this.async_dispatching).wrapExceptions(this.wrap_exceptions);

  start();

  return (X)this;

}

Location: MessageDispatcher.java

Content: 

protected static RequestCorrelator createRequestCorrelator(Protocol transport,RequestHandler handler,Address local_addr){

  return new RequestCorrelator(transport,handler,local_addr);

}

Location: MessageDispatcher.java

Content: 

public boolean getAsyncDispatching(){

  return async_dispatching;

}

Location: MessageDispatcher.java

Content: 

public RequestCorrelator getCorrelator(){

  return corr;

}

Location: MessageDispatcher.java

Content: 

public boolean getExtendedStats(){

  return rpc_stats.extendedStats();

}

Location: MessageDispatcher.java

Content: 

public UpHandler getProtocolAdapter(){

  return prot_adapter;

}

Location: MessageDispatcher.java

Content: 

public RpcStats getRpcStats(){

  return rpc_stats;

}

Location: MessageDispatcher.java

Content: 

public boolean getWrapExceptions(){

  return wrap_exceptions;

}

Location: MessageDispatcher.java

Content: 

protected Object handleUpEvent(Event evt) throws Exception {

switch (evt.getType()) {

case Event.GET_APPLSTATE:

    byte[] tmp_state=null;

  if (state_listener != null) {

    ByteArrayOutputStream output=new ByteArrayOutputStream(1024);

    state_listener.getState(output);

    tmp_state=output.toByteArray();

  }

return new StateTransferInfo(null,0L,tmp_state);

case Event.GET_STATE_OK:

if (state_listener != null) {

StateTransferResult result=evt.getArg();

if (result.hasBuffer()) {

  ByteArrayInputStream input=new ByteArrayInputStream(result.getBuffer());

  state_listener.setState(input);

}

}

break;

case Event.STATE_TRANSFER_OUTPUTSTREAM:

OutputStream os=evt.getArg();

if (state_listener != null && os != null) state_listener.getState(os);

break;

case Event.STATE_TRANSFER_INPUTSTREAM:

InputStream is=evt.getArg();

if (state_listener != null && is != null) state_listener.setState(is);

break;

case Event.VIEW_CHANGE:

View v=evt.getArg();

List<Address> new_mbrs=v.getMembers();

setMembers(new_mbrs);

if (membership_listener != null) membership_listener.viewAccepted(v);

break;

case Event.SET_LOCAL_ADDRESS:

log.trace("setting local_addr (%s) to %s",local_addr,evt.getArg());

local_addr=evt.getArg();

break;

case Event.SUSPECT:

if (membership_listener != null) {

Collection<Address> c=evt.arg() instanceof Address ? Collections.singletonList(evt.arg()) : evt.arg();

c.forEach(membership_listener::suspect);

}

break;

case Event.BLOCK:

if (membership_listener != null) membership_listener.block();

break;

case Event.UNBLOCK:

if (membership_listener != null) membership_listener.unblock();

break;

}

return null;

}

Location: MessageDispatcher.java

Content: 

/** 

 * Sets the given UpHandler as the UpHandler for the channel. If the relevant handler is already installed, the  {@code canReplace} controls whether this method replaces it (after logging a WARN) or simplyleaves  {@code handler} uninstalled.<p>Passing  {@code false} as the {@code canReplace} value allows callers to use this method to install defaultswithout concern about inadvertently overriding

 * @param handler the UpHandler to install

 * @param canReplace {@code true} if an existing Channel upHandler can be replaced; {@code false}if this method shouldn't install

 */

protected <X extends MessageDispatcher>X installUpHandler(UpHandler handler,boolean canReplace){

  UpHandler existing=channel.getUpHandler();

  if (existing == null)   channel.setUpHandler(handler);

 else   if (canReplace) {

    log.warn("Channel already has an up handler installed (%s) but now it is being overridden",existing);

    channel.setUpHandler(handler);

  }

  return (X)this;

}

Location: MessageDispatcher.java

Content: 

public MessageDispatcher(){

}

Location: MessageDispatcher.java

Content: 

public MessageDispatcher(JChannel channel){

  this.channel=channel;

  prot_adapter=new ProtocolAdapter();

  if (channel != null) {

    channel.addChannelListener(this);

    local_addr=channel.getAddress();

    installUpHandler(prot_adapter,true);

  }

  start();

}

Location: MessageDispatcher.java

Content: 

public MessageDispatcher(JChannel channel,RequestHandler req_handler){

  this(channel);

  setRequestHandler(req_handler);

}

Location: MessageDispatcher.java

Content: 

public UpHandler protocolAdapter(){

  return prot_adapter;

}

Location: MessageDispatcher.java

Content: 

public RpcStats rpcStats(){

  return rpc_stats;

}

Location: MessageDispatcher.java

Content: 

/** 

 * Sends a unicast message to the target defined by msg.getDest() and returns a future

 * @param dest the target to which to send the unicast message. Must not be null.

 * @param data the payload to send

 * @param opts the options

 * @return CompletableFuture<T> A future from which the result can be fetched, or null if the call was asynchronous

 * @throws Exception If there was problem sending the request, processing it at the receiver, or processingit at the sender.  {@link java.util.concurrent.Future#get()} will throw this exception

 */

public <T>CompletableFuture<T> sendMessageWithFuture(Address dest,Buffer data,RequestOptions opts) throws Exception {

  if (dest == null)   throw new IllegalArgumentException("message destination is null, cannot send message");

  if (opts == null) {

    log.warn("request options were null, using default of sync");

    opts=RequestOptions.SYNC();

  }

  rpc_stats.add(RpcStats.Type.UNICAST,dest,opts.mode() != ResponseMode.GET_NONE,0);

  if (opts.mode() == ResponseMode.GET_NONE) {

    corr.sendUnicastRequest(dest,data,null,opts);

    return null;

  }

  UnicastRequest<T> req=new UnicastRequest<>(corr,dest,opts);

  req.execute(data,false);

  return req;

}

Location: MessageDispatcher.java

Content: 

/** 

 * Sends a unicast message to the target defined by msg.getDest() and returns a future

 * @param dest the target to which to send the unicast message. Must not be null.

 * @param data the payload to send

 * @param offset the offset at which the data starts

 * @param length the number of bytes to send

 * @param opts the options

 * @return CompletableFuture<T> A future from which the result can be fetched, or null if the call was asynchronous

 * @throws Exception If there was problem sending the request, processing it at the receiver, or processingit at the sender.  {@link java.util.concurrent.Future#get()} will throw this exception

 */

public <T>CompletableFuture<T> sendMessageWithFuture(Address dest,byte[] data,int offset,int length,RequestOptions opts) throws Exception {

  return sendMessageWithFuture(dest,new Buffer(data,offset,length),opts);

}

Location: MessageDispatcher.java

Content: 

/** 

 * Sends a unicast message and - depending on the options - returns a result

 * @param dest the target to which to send the unicast message. Must not be null.

 * @param data the payload to send

 * @param opts the options to be used

 * @return T the result. Null if the call is asynchronous (non-blocking) or if the response is null

 * @throws Exception If there was problem sending the request, processing it at the receiver, or processingit at the sender.

 * @throws TimeoutException If the call didn't succeed within the timeout defined in options (if set)

 */

public <T>T sendMessage(Address dest,Buffer data,RequestOptions opts) throws Exception {

  if (dest == null)   throw new IllegalArgumentException("message destination is null, cannot send message");

  if (opts == null) {

    log.warn("request options were null, using default of sync");

    opts=RequestOptions.SYNC();

  }

  if (opts.mode() == ResponseMode.GET_NONE) {

    rpc_stats.add(RpcStats.Type.UNICAST,dest,false,0);

    corr.sendUnicastRequest(dest,data,null,opts);

    return null;

  }

  UnicastRequest<T> req=new UnicastRequest<>(corr,dest,opts);

  long start=!rpc_stats.extendedStats() ? 0 : System.nanoTime();

  try {

    return req.execute(data,true);

  }

  finally {

    long time=!rpc_stats.extendedStats() ? 0 : System.nanoTime() - start;

    rpc_stats.add(RpcStats.Type.UNICAST,dest,true,time);

  }

}

Location: MessageDispatcher.java

Content: 

/** 

 * Sends a unicast message and - depending on the options - returns a result

 * @param dest the target to which to send the unicast message. Must not be null.

 * @param data the payload to send

 * @param offset the offset at which the data starts

 * @param length the number of bytes to send

 * @param opts the options to be used

 * @return T the result. Null if the call is asynchronous (non-blocking) or if the response is null

 * @throws Exception If there was problem sending the request, processing it at the receiver, or processingit at the sender.

 * @throws TimeoutException If the call didn't succeed within the timeout defined in options (if set)

 */

public <T>T sendMessage(Address dest,byte[] data,int offset,int length,RequestOptions opts) throws Exception {

  return sendMessage(dest,new Buffer(data,offset,length),opts);

}

Location: MessageDispatcher.java

Content: 

public <X extends MessageDispatcher>X setAsynDispatching(boolean flag){

  return asyncDispatching(flag);

}

Location: MessageDispatcher.java

Content: 

public <X extends MessageDispatcher>X setCorrelator(RequestCorrelator c){

  return correlator(c);

}

Location: MessageDispatcher.java

Content: 

public <X extends MessageDispatcher>X setExtendedStats(boolean fl){

  return extendedStats(fl);

}

Location: MessageDispatcher.java

Content: 

protected <X extends MessageDispatcher>X setMembers(List<Address> new_mbrs){

  if (new_mbrs != null)   members=new HashSet<>(new_mbrs);

  return (X)this;

}

Location: MessageDispatcher.java

Content: 

public <X extends MessageDispatcher>X setStateListener(StateListener sl){

  this.state_listener=sl;

  return (X)this;

}

Location: MessageDispatcher.java

Content: 

public <X extends MessageDispatcher>X setWrapExceptions(boolean flag){

  return wrapExceptions(flag);

}

Location: MessageDispatcher.java

Content: 

protected void updateStats(Collection<Address> dests,boolean anycast,boolean sync,long time){

  if (anycast)   rpc_stats.addAnycast(sync,time,dests);

 else   rpc_stats.add(RpcStats.Type.MULTICAST,null,sync,time);

}

