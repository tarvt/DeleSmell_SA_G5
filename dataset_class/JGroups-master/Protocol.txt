Location: Protocol.java

Content: 

/** 

 * Called by the default implementation of  {@link #up(org.jgroups.util.MessageBatch)} for each message to determineif the message should be removed from the message batch (and handled by the current protocol) or not.

 * @param msg The message. Guaranteed to be non-null

 * @return True if the message should be handled by this protocol (will be removed from the batch), false if themessage should remain in the batch and be passed up.<p/> The default implementation tries to find a header matching the current protocol's ID and returns true if there is a match, or false otherwise

 */

protected boolean accept(Message msg){

  short tmp_id=getId();

  return tmp_id > 0 && msg.getHeader(tmp_id) != null;

}

Location: Protocol.java

Content: 

public String afterCreationHook(){

  return after_creation_hook;

}

Location: Protocol.java

Content: 

public void enableStats(boolean flag){

  stats=flag;

}

Location: Protocol.java

Content: 

/** 

 * After configuring the protocol itself from the properties defined in the XML config, a protocol might have additional objects which need to be configured. This callback allows a protocol developer to configure those other objects. This call is guaranteed to be invoked <em>after</em> the protocol itself has been configured. See AUTH for an example.

 */

public List<Object> getConfigurableObjects(){

  return null;

}

Location: Protocol.java

Content: 

public <T extends Protocol>T getDownProtocol(){

  return (T)down_prot;

}

Location: Protocol.java

Content: 

/** 

 * Returns all services provided by protocols below the current protocol 

 */

public final List<Integer> getDownServices(){

  List<Integer> retval=new ArrayList<>();

  Protocol prot=down_prot;

  while (prot != null) {

    List<Integer> tmp=prot.providedUpServices();

    if (tmp != null && !tmp.isEmpty())     retval.addAll(tmp);

    prot=prot.down_prot;

  }

  return retval;

}

Location: Protocol.java

Content: 

public short getId(){

  return id;

}

Location: Protocol.java

Content: 

/** 

 * Returns the protocol IDs of all protocols above this one (excluding the current protocol) 

 */

public short[] getIdsAbove(){

  short[] retval;

  List<Short> ids=new ArrayList<>();

  Protocol current=up_prot;

  while (current != null) {

    ids.add(current.getId());

    current=current.up_prot;

  }

  retval=new short[ids.size()];

  for (int i=0; i < ids.size(); i++)   retval[i]=ids.get(i);

  return retval;

}

Location: Protocol.java

Content: 

@Property(name="level",description="logger level (see javadocs)") public String getLevel(){

  return log.getLevel();

}

Location: Protocol.java

Content: 

public Log getLog(){

  return log;

}

Location: Protocol.java

Content: 

public ProtocolStack getProtocolStack(){

  return stack;

}

Location: Protocol.java

Content: 

/** 

 * Returns the SocketFactory associated with this protocol, if overridden in a subclass, or passes the call down

 * @return SocketFactory

 */

public SocketFactory getSocketFactory(){

  return down_prot != null ? down_prot.getSocketFactory() : null;

}

Location: Protocol.java

Content: 

/** 

 * Supposed to be overwritten by subclasses. Usually the transport returns a valid non-null thread factory, but thread factories can also be created by individual protocols

 * @return

 */

public ThreadFactory getThreadFactory(){

  return down_prot != null ? down_prot.getThreadFactory() : null;

}

Location: Protocol.java

Content: 

public <T extends Protocol>T getUpProtocol(){

  return (T)up_prot;

}

Location: Protocol.java

Content: 

/** 

 * Returns all services provided by the protocols above the current protocol 

 */

public final List<Integer> getUpServices(){

  List<Integer> retval=new ArrayList<>();

  Protocol prot=up_prot;

  while (prot != null) {

    List<Integer> tmp=prot.providedDownServices();

    if (tmp != null && !tmp.isEmpty())     retval.addAll(tmp);

    prot=prot.up_prot;

  }

  return retval;

}

Location: Protocol.java

Content: 

public Object getValue(String name){

  if (name == null)   return null;

  Field field=Util.getField(getClass(),name);

  if (field == null)   throw new IllegalArgumentException("field \"" + name + "\n not found");

  return Util.getField(field,this);

}

Location: Protocol.java

Content: 

public boolean isErgonomics(){

  return ergonomics;

}

Location: Protocol.java

Content: 

public <T extends Protocol>T level(String level){

  return setLevel(level);

}

Location: Protocol.java

Content: 

/** 

 * Called by the XML parser when subelements are found in the configuration of a protocol. This allows a protocol to define protocol-specific information and to parse it 

 */

public void parse(Node node) throws Exception {

  ;

}

Location: Protocol.java

Content: 

/** 

 * List of events that are provided to layers below (they will be handled when sent from down below) 

 */

public List<Integer> providedDownServices(){

  return null;

}

Location: Protocol.java

Content: 

/** 

 * List of events that are provided to layers above (they will be handled when sent down from above) 

 */

public List<Integer> providedUpServices(){

  return null;

}

Location: Protocol.java

Content: 

/** 

 * List of events that are required to be answered by some layer below 

 */

public List<Integer> requiredDownServices(){

  return null;

}

Location: Protocol.java

Content: 

/** 

 * List of events that are required to be answered by some layer above 

 */

public List<Integer> requiredUpServices(){

  return null;

}

Location: Protocol.java

Content: 

@ManagedOperation(description="Resets all stats") public void resetStatistics(){

  resetStats();

}

Location: Protocol.java

Content: 

public <T extends Protocol>T setDownProtocol(Protocol prot){

  this.down_prot=prot;

  return (T)this;

}

Location: Protocol.java

Content: 

public <T extends Protocol>T setErgonomics(boolean ergonomics){

  this.ergonomics=ergonomics;

  return (T)this;

}

Location: Protocol.java

Content: 

public <T extends Protocol>T setId(short id){

  this.id=id;

  return (T)this;

}

Location: Protocol.java

Content: 

/** 

 * Sets the level of a logger. This method is used to dynamically change the logging level of a running system, e.g. via JMX. The appender of a level needs to exist.

 * @param level The new level. Valid values are "fatal", "error", "warn", "info", "debug", "trace"(capitalization not relevant)

 */

@Property(name="level",description="Sets the level") public <T extends Protocol>T setLevel(String level){

  log.setLevel(level);

  return (T)this;

}

Location: Protocol.java

Content: 

public <T extends Protocol>T setProtocolStack(ProtocolStack s){

  this.stack=s;

  return (T)this;

}

Location: Protocol.java

Content: 

/** 

 * Sets a SocketFactory. Socket factories are typically provided by the transport ( {@link org.jgroups.protocols.TP})

 * @param factory

 */

public void setSocketFactory(SocketFactory factory){

  if (down_prot != null)   down_prot.setSocketFactory(factory);

}

Location: Protocol.java

Content: 

public <T extends Protocol>T setUpProtocol(Protocol prot){

  this.up_prot=prot;

  return (T)this;

}

Location: Protocol.java

Content: 

public <T extends Protocol>T setValue(String name,Object value){

  if (name == null || value == null)   return (T)this;

  Field field=Util.getField(getClass(),name);

  if (field == null)   throw new IllegalArgumentException("field " + name + " not found");

  Property prop=field.getAnnotation(Property.class);

  if (prop != null) {

    String deprecated_msg=prop.deprecatedMessage();

    if (deprecated_msg != null && !deprecated_msg.isEmpty())     log.warn("Field " + getName() + "."+ name+ " is deprecated: "+ deprecated_msg);

  }

  Util.setField(field,this,value);

  return (T)this;

}

Location: Protocol.java

Content: 

public boolean statsEnabled(){

  return stats;

}

