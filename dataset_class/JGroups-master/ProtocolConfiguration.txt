Location: ProtocolConfiguration.java

Content: 

public void addSubtree(Node node){

  if (node == null)   return;

  if (subtrees == null)   subtrees=new ArrayList<>();

  subtrees.add(node);

}

Location: ProtocolConfiguration.java

Content: 

public ClassLoader getClassLoader(){

  return this.loader;

}

Location: ProtocolConfiguration.java

Content: 

protected static String getParameterStringXml(String name,String val){

  StringBuilder buf=new StringBuilder(name);

  if (val != null)   buf.append("=\"").append(val).append('\"');

  return buf.toString();

}

Location: ProtocolConfiguration.java

Content: 

protected static String getParameterString(String name,String value){

  StringBuilder buf=new StringBuilder(name);

  if (value != null)   buf.append('=').append(value);

  return buf.toString();

}

Location: ProtocolConfiguration.java

Content: 

public Map<String,String> getProperties(){

  return properties;

}

Location: ProtocolConfiguration.java

Content: 

public String getProtocolName(){

  return protocol_name;

}

Location: ProtocolConfiguration.java

Content: 

public String getProtocolString(){

  StringBuilder buf=new StringBuilder(protocol_name);

  if (!properties.isEmpty()) {

    boolean first=true;

    buf.append('(');

    for (    Map.Entry<String,String> entry : properties.entrySet()) {

      String key=entry.getKey();

      String val=entry.getValue();

      if (first)       first=false;

 else       buf.append(';');

      buf.append(getParameterString(key,val));

    }

    buf.append(')');

  }

  return buf.toString();

}

Location: ProtocolConfiguration.java

Content: 

public String getProtocolStringNewXml(){

  StringBuilder buf=new StringBuilder(protocol_name + ' ');

  if (!properties.isEmpty()) {

    boolean first=true;

    for (    Map.Entry<String,String> entry : properties.entrySet()) {

      String key=entry.getKey();

      String val=entry.getValue();

      if (first)       first=false;

 else       buf.append(' ');

      buf.append(getParameterStringXml(key,val));

    }

  }

  return buf.toString();

}

Location: ProtocolConfiguration.java

Content: 

public String getProtocolString(boolean new_format){

  return new_format ? getProtocolStringNewXml() : getProtocolString();

}

Location: ProtocolConfiguration.java

Content: 

public List<Node> getSubtrees(){

  return subtrees;

}

Location: ProtocolConfiguration.java

Content: 

protected void parsePropertiesString(Map<String,String> properties) throws Exception {

  int index=0;

  if (!properties_str.isEmpty()) {

    String[] components=properties_str.split(";");

    for (    String property : components) {

      String name, value;

      index=property.indexOf('=');

      if (index == -1) {

        throw new Exception("Configurator.ProtocolConfiguration(): '=' not found in " + property + " of "+ protocol_name);

      }

      name=property.substring(0,index);

      value=property.substring(index + 1);

      properties.put(name,value);

    }

  }

}

Location: ProtocolConfiguration.java

Content: 

public String propertiesToString(){

  return Util.printMapWithDelimiter(properties,";");

}

Location: ProtocolConfiguration.java

Content: 

/** 

 * Creates a new ProtocolConfiguration.

 * @param config_str The configuration specification for the protocol, e.g.<pre>VERIFY_SUSPECT(timeout=1500)</pre>

 */

public ProtocolConfiguration(String config_str) throws Exception {

  int index=config_str.indexOf('(');

  int end_index=config_str.lastIndexOf(')');

  if (index == -1) {

    protocol_name=config_str;

    properties_str="";

  }

 else {

    if (end_index == -1) {

      throw new Exception("Configurator.ProtocolConfiguration(): closing ')' " + "not found in " + config_str + ": properties cannot be set !");

    }

 else {

      properties_str=config_str.substring(index + 1,end_index);

      protocol_name=config_str.substring(0,index);

    }

  }

  parsePropertiesString(properties);

  this.loader=ProtocolConfiguration.class.getClassLoader();

}

Location: ProtocolConfiguration.java

Content: 

public ProtocolConfiguration(String protocol_name,Map<String,String> properties){

  this(protocol_name,properties,ProtocolConfiguration.class.getClassLoader());

}

Location: ProtocolConfiguration.java

Content: 

public ProtocolConfiguration(String protocol_name,Map<String,String> properties,ClassLoader loader){

  this.protocol_name=protocol_name;

  this.loader=loader;

  if (!properties.isEmpty()) {

    this.properties.putAll(properties);

    properties_str=propertiesToString();

  }

}

Location: ProtocolConfiguration.java

Content: 

public void substituteVariables(){

  for (Iterator<Map.Entry<String,String>> it=properties.entrySet().iterator(); it.hasNext(); ) {

    Map.Entry<String,String> entry=it.next();

    String key=entry.getKey();

    String val=entry.getValue();

    String tmp=Util.substituteVariable(val);

    if (!val.equals(tmp)) {

      properties.put(key,tmp);

    }

 else {

      if (tmp.contains("${"))       it.remove();

    }

  }

  properties_str=propertiesToString();

}

