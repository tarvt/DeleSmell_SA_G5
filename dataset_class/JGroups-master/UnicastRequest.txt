Location: UnicastRequest.java

Content: 

protected T around(Supplier<T> supplier){

  try {

    return supplier.get();

  }

  finally {

    corrDone();

  }

}

Location: UnicastRequest.java

Content: 

public T getNow(T valueIfAbsent){

  return around(() -> super.getNow(valueIfAbsent));

}

Location: UnicastRequest.java

Content: 

protected T getResult(Callable<T> supplier) throws Exception {

  try {

    T result=supplier.call();

    if (result == null && !isDone())     throw new TimeoutException("timeout waiting for response from " + target + ", request: "+ toString());

    return result;

  }

 catch (  ExecutionException ex) {

    Throwable exception=ex.getCause();

    if (exception instanceof Error)     throw (Error)exception;

 else     if (exception instanceof RuntimeException)     throw (RuntimeException)exception;

 else     if (exception instanceof Exception)     throw (Exception)exception;

 else     throw new RuntimeException(exception);

  }

 finally {

    corrDone();

  }

}

Location: UnicastRequest.java

Content: 

public UnicastRequest(RequestCorrelator corr,Address target,RequestOptions options){

  super(corr,options);

  this.target=target;

}

