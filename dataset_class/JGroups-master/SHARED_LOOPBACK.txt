Location: SHARED_LOOPBACK.java

Content: 

public static List<PingData> getDiscoveryResponsesFor(String cluster_name){

  if (cluster_name == null)   return null;

  Map<Address,SHARED_LOOPBACK> mbrs=routing_table.get(new AsciiString(cluster_name));

  List<PingData> rsps=new ArrayList<>(mbrs != null ? mbrs.size() : 0);

  if (mbrs != null) {

    for (    Map.Entry<Address,SHARED_LOOPBACK> entry : mbrs.entrySet()) {

      Address addr=entry.getKey();

      SHARED_LOOPBACK slp=entry.getValue();

      PingData data=new PingData(addr,slp.isServer(),NameCache.get(addr),null).coord(slp.isCoord());

      rsps.add(data);

    }

  }

  return rsps;

}

Location: SHARED_LOOPBACK.java

Content: 

protected static void register(AsciiString channel_name,Address local_addr,SHARED_LOOPBACK shared_loopback){

  Map<Address,SHARED_LOOPBACK> map=routing_table.computeIfAbsent(channel_name,n -> new ConcurrentHashMap<>());

  map.putIfAbsent(local_addr,shared_loopback);

}

Location: SHARED_LOOPBACK.java

Content: 

protected static void unregister(AsciiString channel_name,Address local_addr){

  Map<Address,SHARED_LOOPBACK> map=channel_name != null ? routing_table.get(channel_name) : null;

  if (map != null) {

    map.remove(local_addr);

    if (map.isEmpty())     routing_table.remove(channel_name);

  }

}

