Location: TOA.java

Content: 

private Collection<Address> extract(AnycastAddress anycastAddress){

  return anycastAddress.findAddresses().orElseGet(deliverManager::getViewMembers);

}

Location: TOA.java

Content: 

private MessageID generateId(){

  return new MessageID(localAddress,messageIdCounter.getAndIncrement());

}

Location: TOA.java

Content: 

@ManagedAttribute(description="The average duration (in milliseconds) in processing a data message received") public double getAvgDataMessageReceivedDuration(){

  return statsCollector.getAvgDataMessageReceivedDuration();

}

Location: TOA.java

Content: 

@ManagedAttribute(description="The average duration (in milliseconds) in processing a final message received") public double getAvgFinalMessageReceivedDuration(){

  return statsCollector.getAvgFinalMessageReceivedDuration();

}

Location: TOA.java

Content: 

@ManagedAttribute(description="The average duration (in milliseconds) in processing the last propose message " + "received. This last propose message will originate the sending of the final message") public double getAvgLastProposeMessageReceivedDuration(){

  return statsCollector.getAvgLastProposeMessageReceivedDuration();

}

Location: TOA.java

Content: 

@ManagedAttribute(description="The average number of unicasts messages created per anycast message") public double getAvgNumberOfUnicastSentPerAnycast(){

  return statsCollector.getAvgNumberOfUnicastSentPerAnycast();

}

Location: TOA.java

Content: 

@ManagedAttribute(description="The average duration (in milliseconds) in processing a propose message received" + "(not the last one") public double getAvgProposeMessageReceivedDuration(){

  return statsCollector.getAvgProposeMesageReceivedDuration();

}

Location: TOA.java

Content: 

@ManagedAttribute(description="The average duration (in milliseconds) in processing and sending the anycast " + "message to all the recipients") public double getAvgToaSendDuration(){

  return statsCollector.getAvgAnycastSentDuration();

}

Location: TOA.java

Content: 

public DeliveryManager getDeliverManager(){

  return deliverManager;

}

Location: TOA.java

Content: 

@ManagedOperation public String getMessageList(){

  return deliverManager.getMessageSet().toString();

}

Location: TOA.java

Content: 

@ManagedAttribute(description="The number of anycast messages delivered") public int getNumberOfAnycastMessagesDelivered(){

  return statsCollector.getAnycastDelivered();

}

Location: TOA.java

Content: 

@ManagedAttribute(description="The number of anycast messages sent") public int getNumberOfAnycastMessagesSent(){

  return statsCollector.getNumberOfAnycastMessagesSent();

}

Location: TOA.java

Content: 

@ManagedAttribute(description="The number of data messages delivered") public int getNumberOfDataMessagesDelivered(){

  return statsCollector.getNumberOfProposeMessagesSent();

}

Location: TOA.java

Content: 

@ManagedAttribute(description="The number of final anycast sent") public int getNumberOfFinalAnycastSent(){

  return statsCollector.getNumberOfFinalAnycastsSent();

}

Location: TOA.java

Content: 

@ManagedAttribute(description="The number of final messages delivered") public int getNumberOfFinalMessagesDelivered(){

  return statsCollector.getNumberOfFinalMessagesDelivered();

}

Location: TOA.java

Content: 

@ManagedAttribute(description="The number of propose messages received") public int getNumberOfProposeMessageReceived(){

  return statsCollector.getNumberOfProposeMessagesReceived();

}

Location: TOA.java

Content: 

@ManagedAttribute(description="The number of propose messages sent") public int getNumberOfProposeMessageSent(){

  return statsCollector.getNumberOfProposeMessagesSent();

}

Location: TOA.java

Content: 

private void handleDataMessage(Message message,ToaHeader header){

  final long startTime=statsCollector.now();

  try {

    final MessageID messageID=header.getMessageID();

    long myProposeSequenceNumber=deliverManager.addRemoteMessageToDeliver(messageID,message,header.getSequencerNumber(),header.getViewId());

    if (log.isTraceEnabled()) {

      log.trace("Received the message with %s. The proposed sequence number is %d",header,myProposeSequenceNumber);

    }

    if (myProposeSequenceNumber == -1) {

      return;

    }

    ToaHeader newHeader=ToaHeader.newProposeMessageHeader(messageID,myProposeSequenceNumber);

    Message proposeMessage=new Message().src(localAddress).dest(messageID.getAddress()).putHeader(this.id,newHeader).setFlag(Message.Flag.OOB,Message.Flag.INTERNAL,Message.Flag.DONT_BUNDLE);

    down_prot.down(proposeMessage);

  }

 catch (  Exception e) {

    logException("Exception caught while processing the data message " + header.getMessageID(),e);

  }

 finally {

    statsCollector.addDataMessageDuration(statsCollector.now() - startTime);

  }

}

Location: TOA.java

Content: 

private void handleFinalSequenceNumber(ToaHeader header){

  long startTime=statsCollector.now();

  long duration=-1;

  try {

    MessageID messageID=header.getMessageID();

    if (log.isTraceEnabled()) {

      log.trace("Received the final sequence number message with %s",header);

    }

    deliverManager.markReadyToDeliver(messageID,header.getSequencerNumber());

    duration=statsCollector.now() - startTime;

  }

 catch (  Exception e) {

    logException("Exception caught while processing the final sequence number for " + header.getMessageID(),e);

  }

 finally {

    statsCollector.addFinalSequenceNumberDuration(duration);

  }

}

Location: TOA.java

Content: 

private void handleSequenceNumberPropose(Address from,ToaHeader header){

  long startTime=statsCollector.now();

  long duration=-1;

  boolean lastProposeReceived=false;

  boolean trace=log.isTraceEnabled();

  try {

    MessageID messageID=header.getMessageID();

    if (trace) {

      log.trace("Received the proposed sequence number message with %s from %s",header,from);

    }

    deliverManager.updateSequenceNumber(header.getSequencerNumber());

    long finalSequenceNumber=senderManager.addPropose(messageID,from,header.getSequencerNumber());

    if (finalSequenceNumber != SenderManager.NOT_READY) {

      lastProposeReceived=true;

      ToaHeader finalHeader=ToaHeader.newFinalMessageHeader(messageID,finalSequenceNumber);

      Message finalMessage=new Message().src(localAddress).putHeader(this.id,finalHeader).setFlag(Message.Flag.OOB,Message.Flag.INTERNAL,Message.Flag.DONT_BUNDLE);

      Set<Address> destinations=senderManager.getDestination(messageID);

      if (destinations.contains(localAddress)) {

        destinations.remove(localAddress);

      }

      if (trace) {

        log.trace("Message %s is ready to be delivered. Final sequencer number is %d",messageID,finalSequenceNumber);

      }

      send(destinations,finalMessage,false);

      if (senderManager.markSent(messageID)) {

        deliverManager.markReadyToDeliver(messageID,finalSequenceNumber);

      }

    }

    duration=statsCollector.now() - startTime;

  }

 catch (  Exception e) {

    logException("Exception caught while processing the propose sequence number for " + header.getMessageID(),e);

  }

 finally {

    statsCollector.addProposeSequenceNumberDuration(duration,lastProposeReceived);

  }

}

Location: TOA.java

Content: 

private void handleViewChange(View view){

  if (log.isTraceEnabled()) {

    log.trace("Handle view %s",view);

  }

  final Collection<Address> leavers=deliverManager.handleView(view);

  Collection<MessageID> pendingSentMessages=senderManager.getPendingMessageIDs();

  for (  MessageID messageID : pendingSentMessages) {

    long finalSequenceNumber=senderManager.removeLeavers(messageID,leavers);

    if (finalSequenceNumber != SenderManager.NOT_READY) {

      ToaHeader finalHeader=ToaHeader.newFinalMessageHeader(messageID,finalSequenceNumber);

      Message finalMessage=new Message().src(localAddress).putHeader(this.id,finalHeader).setFlag(Message.Flag.OOB,Message.Flag.INTERNAL,Message.Flag.DONT_BUNDLE);

      if (log.isTraceEnabled()) {

        log.trace("Message %s is ready to be delivered. Final sequencer number is %d",messageID,finalSequenceNumber);

      }

      send(senderManager.getDestination(messageID),finalMessage,false);

      if (senderManager.markSent(messageID)) {

        deliverManager.markReadyToDeliver(messageID,finalSequenceNumber);

      }

    }

  }

}

Location: TOA.java

Content: 

private void logException(String msg,Exception e){

  if (log.isDebugEnabled()) {

    log.debug(msg,e);

  }

 else   if (log.isWarnEnabled()) {

    log.warn("%s. Error is %s",msg,e.getLocalizedMessage());

  }

}

Location: TOA.java

Content: 

private void sendTotalOrderAnycastMessage(Collection<Address> destinations,Message message){

  boolean trace=log.isTraceEnabled();

  long startTime=statsCollector.now();

  final boolean deliverToMySelf=destinations.contains(localAddress);

  final MessageID messageID=generateId();

  if (destinations.size() == 1) {

    message.putHeader(id,ToaHeader.createSingleDestinationHeader(messageID));

    message.setDest(destinations.iterator().next());

    if (trace) {

      log.trace("Sending total order anycast message %s (%s) to single destination",message,message.getHeader(id));

    }

    if (deliverToMySelf) {

      deliverManager.deliverSingleDestinationMessage(message,messageID);

    }

 else {

      down_prot.down(message);

    }

    return;

  }

  try {

    ToaHeader header=ToaHeader.newDataMessageHeader(messageID,deliverManager.getViewId());

    message.putHeader(this.id,header);

    long sequenceNumber=deliverToMySelf ? deliverManager.addLocalMessageToDeliver(messageID,message,header) : -1;

    if (trace) {

      log.trace("Sending total order anycast message %s (%s) to %s",message,message.getHeader(id),destinations);

    }

    senderManager.addNewMessageToSend(messageID,destinations,sequenceNumber,deliverToMySelf);

    send(destinations,message,false);

  }

 catch (  Exception e) {

    logException("Exception caught while sending anycast message. Error is " + e.getLocalizedMessage(),e);

  }

 finally {

    long duration=statsCollector.now() - startTime;

    statsCollector.addAnycastSentDuration(duration,(destinations.size() - (deliverToMySelf ? 1 : 0)));

  }

}

Location: TOA.java

Content: 

private void send(Collection<Address> destinations,Message msg,boolean sendToMyself){

  if (log.isTraceEnabled()) {

    log.trace("sending anycast total order message %s to %s",msg,destinations);

  }

  for (  Address address : destinations) {

    if (!sendToMyself && address.equals(localAddress)) {

      continue;

    }

    Message cpy=msg.copy();

    cpy.setDest(address);

    down_prot.down(cpy);

  }

}

Location: TOA.java

Content: 

public TOA(){

}

