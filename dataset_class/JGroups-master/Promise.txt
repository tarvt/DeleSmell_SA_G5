Location: Promise.java

Content: 

/** 

 * Returns when the result is available (blocking until tthe result is available) 

 */

public T getResult(){

  try {

    return getResultWithTimeout(0);

  }

 catch (  TimeoutException e) {

    return null;

  }

}

Location: Promise.java

Content: 

/** 

 * Blocks until a result is available, or timeout milliseconds have elapsed

 * @param timeout in ms

 * @return An object

 * @throws TimeoutException If a timeout occurred (implies that timeout > 0)

 */

public T getResultWithTimeout(long timeout) throws TimeoutException {

  return _getResultWithTimeout(timeout);

}

Location: Promise.java

Content: 

public T getResultWithTimeout(long timeout,boolean reset) throws TimeoutException {

  if (!reset)   return _getResultWithTimeout(timeout);

  lock.lock();

  try {

    return _getResultWithTimeout(timeout);

  }

  finally {

    reset();

    lock.unlock();

  }

}

Location: Promise.java

Content: 

/** 

 * Returns the result, but never throws a TimeoutException; returns null instead.

 * @param timeout in ms

 * @return T

 */

public T getResult(long timeout){

  return getResult(timeout,false);

}

Location: Promise.java

Content: 

public T getResult(long timeout,boolean reset){

  try {

    return getResultWithTimeout(timeout,reset);

  }

 catch (  TimeoutException e) {

    return null;

  }

}

Location: Promise.java

Content: 

/** 

 * Checks whether result is available. Does not block.

 */

public boolean hasResult(){

  lock.lock();

  try {

    return hasResult;

  }

  finally {

    lock.unlock();

  }

}

Location: Promise.java

Content: 

public void reset(boolean signal){

  lock.lock();

  try {

    result=null;

    hasResult=false;

    if (signal)     cond.signal(true);

  }

  finally {

    lock.unlock();

  }

}

Location: Promise.java

Content: 

/** 

 * Sets the result and notifies any threads waiting for it

 */

public void setResult(T obj){

  lock.lock();

  try {

    result=obj;

    hasResult=true;

    cond.signal(true);

  }

  finally {

    lock.unlock();

  }

}

Location: Promise.java

Content: 

/** 

 * Blocks until a result is available, or timeout milliseconds have elapsed. Needs to be called with lock held

 * @param timeout in ms

 * @return An object

 * @throws TimeoutException If a timeout occurred (implies that timeout > 0)

 */

protected T _getResultWithTimeout(final long timeout) throws TimeoutException {

  if (timeout <= 0)   cond.waitFor(this::hasResult);

 else   if (!cond.waitFor(this::hasResult,timeout,TimeUnit.MILLISECONDS))   throw new TimeoutException();

  return result;

}

