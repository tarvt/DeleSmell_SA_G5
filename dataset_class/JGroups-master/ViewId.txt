Location: ViewId.java

Content: 

/** 

 * Establishes an order between 2 ViewIds. <em>Note that we compare only on IDs !</em>

 * @return 0 for equality, value less than 0 if smaller, greater than 0 if greater.

 */

public int compareToIDs(ViewId other){

  return id > other.id ? 1 : id < other.id ? -1 : 0;

}

Location: ViewId.java

Content: 

/** 

 * Establishes an order between 2 ViewIds. The comparison is done on the IDs, if they are equal, we use the creator.

 * @return 0 for equality, value less than 0 if smaller, greater than 0 if greater.

 */

public int compareTo(ViewId other){

  return id > other.id ? 1 : id < other.id ? -1 : creator.compareTo(other.creator);

}

Location: ViewId.java

Content: 

/** 

 * Returns the address of the member that issued this view

 * @return the Address of the the creator

 */

public Address getCreator(){

  return creator;

}

Location: ViewId.java

Content: 

public ViewId(){

}

Location: ViewId.java

Content: 

/** 

 * Creates a ViewID with the coordinator address and a Lamport timestamp of 0.

 * @param creator the address of the member that issued this view

 */

public ViewId(Address creator){

  this.creator=creator;

  if (this.creator == null)   throw new IllegalArgumentException("creator cannot be null");

}

Location: ViewId.java

Content: 

/** 

 * Creates a ViewID with the coordinator address and the given Lamport timestamp.

 * @param creator - the address of the member that issued this view

 * @param id         - the Lamport timestamp of the view

 */

public ViewId(Address creator,long id){

  this(creator);

  this.id=id;

}

