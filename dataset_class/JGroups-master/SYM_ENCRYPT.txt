Location: SYM_ENCRYPT.java

Content: 

public String alias(){

  return alias;

}

Location: SYM_ENCRYPT.java

Content: 

public SYM_ENCRYPT alias(String a){

  this.alias=a;

  return this;

}

Location: SYM_ENCRYPT.java

Content: 

protected InputStream getKeyStoreSource() throws FileNotFoundException {

  InputStream inputStream=Thread.currentThread().getContextClassLoader().getResourceAsStream(keystore_name);

  return (inputStream == null) ? new FileInputStream(keystore_name) : inputStream;

}

Location: SYM_ENCRYPT.java

Content: 

public String keystoreName(){

  return this.keystore_name;

}

Location: SYM_ENCRYPT.java

Content: 

public SYM_ENCRYPT keystoreName(String n){

  this.keystore_name=n;

  return this;

}

Location: SYM_ENCRYPT.java

Content: 

/** 

 * Initialisation if a supplied key is defined in the properties. This supplied key must be in a keystore which can be generated using the keystoreGenerator file in demos. The keystore must be on the classpath to find it.

 */

protected void readSecretKeyFromKeystore() throws Exception {

  KeyStore store=KeyStore.getInstance(keystore_type != null ? keystore_type : KeyStore.getDefaultType());

  if (key_password == null && store_password != null) {

    key_password=store_password;

    log.debug("%s: key_password used is same as store_password",local_addr);

  }

  try (InputStream inputStream=getKeyStoreSource()){

    store.load(inputStream,store_password.toCharArray());

  }

   if (!store.entryInstanceOf(alias,KeyStore.SecretKeyEntry.class)) {

    throw new Exception("Key '" + alias + "' from keystore "+ keystore_name+ " is not a secret key");

  }

  KeyStore.SecretKeyEntry entry=(KeyStore.SecretKeyEntry)store.getEntry(alias,new KeyStore.PasswordProtection(key_password.toCharArray()));

  if (entry == null) {

    throw new Exception("Key '" + alias + "' not found in keystore "+ keystore_name);

  }

  this.setKeyStoreEntry(entry);

}

Location: SYM_ENCRYPT.java

Content: 

@Override public void setKeyStoreEntry(KeyStore.SecretKeyEntry entry){

  this.setSecretKey(entry.getSecretKey());

}

Location: SYM_ENCRYPT.java

Content: 

public void setSecretKey(SecretKey key){

  this.sym_algorithm=key.getAlgorithm();

  this.secret_key=key;

}

Location: SYM_ENCRYPT.java

Content: 

public String storePassword(){

  return store_password;

}

Location: SYM_ENCRYPT.java

Content: 

public SYM_ENCRYPT storePassword(String pwd){

  this.store_password=pwd;

  return this;

}

