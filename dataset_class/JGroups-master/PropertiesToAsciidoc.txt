Location: PropertiesToAsciidoc.java

Content: 

private static void convertProtocolToAsciidocTable(Properties props,Class<Protocol> clazz) throws Exception {

  boolean isUnsupported=clazz.isAnnotationPresent(Unsupported.class);

  if (isUnsupported)   return;

  Map<String,String> nameToDescription=new TreeMap<>();

  Field[] fields=clazz.getDeclaredFields();

  for (  Field field : fields) {

    if (field.isAnnotationPresent(Property.class)) {

      String property=field.getName();

      Property annotation=field.getAnnotation(Property.class);

      String desc=annotation.description();

      nameToDescription.put(property,desc);

    }

  }

  Method[] methods=clazz.getDeclaredMethods();

  for (  Method method : methods) {

    if (method.isAnnotationPresent(Property.class)) {

      Property annotation=method.getAnnotation(Property.class);

      String desc=annotation.description();

      if (desc == null || desc.isEmpty())       desc="n/a";

      String name=annotation.name();

      if (name.length() < 1) {

        name=Util.methodNameToAttributeName(method.getName());

      }

      nameToDescription.put(name,desc);

    }

  }

  if (nameToDescription.isEmpty())   return;

  List<String[]> rows=new ArrayList<>(nameToDescription.size() + 1);

  rows.add(new String[]{"Name","Description"});

  for (  Map.Entry<String,String> entry : nameToDescription.entrySet())   rows.add(new String[]{entry.getKey(),entry.getValue()});

  String tmp=createAsciidocTable(rows,clazz.getSimpleName(),"[align=\"left\",width=\"90%\",cols=\"2,10\",options=\"header\"]");

  props.put(clazz.getSimpleName(),tmp);

}

Location: PropertiesToAsciidoc.java

Content: 

protected static void convertUnsupportedToAsciidocTable(Properties props,List<Class<?>> clazzes,String title) throws ParserConfigurationException, TransformerException {

  List<String[]> rows=new ArrayList<>(clazzes.size() + 1);

  rows.add(new String[]{"Package","Class"});

  for (  Class<?> clazz : clazzes)   rows.add(new String[]{clazz.getPackage().getName(),clazz.getSimpleName()});

  String tmp=createAsciidocTable(rows,title,"[align=\"left\",width=\"50%\",options=\"header\"]");

  if (clazzes.size() > 1) {

    props.put(title,tmp);

  }

}

Location: PropertiesToAsciidoc.java

Content: 

public static int copy(Reader input,Writer output) throws IOException {

  char[] buffer=new char[8 * 1024];

  int count=0;

  int n=0;

  try {

    while (-1 != (n=input.read(buffer))) {

      output.write(buffer,0,n);

      count+=n;

    }

  }

  finally {

    output.flush();

    output.close();

  }

  return count;

}

Location: PropertiesToAsciidoc.java

Content: 

/** 

 * Creates an AsciiDoc table of the elements in rows. The first tuple needs to be the column names, the rest the contents 

 */

protected static String createAsciidocTable(List<String[]> rows,String title,String header) throws ParserConfigurationException, TransformerException {

  StringBuilder sb=new StringBuilder(".").append(title).append("\n").append(header).append("\n").append("|=================\n");

  for (  String[] row : rows) {

    for (    String el : row)     sb.append("|").append(el);

    sb.append("\n");

  }

  sb.append("|=================\n");

  return sb.toString();

}

Location: PropertiesToAsciidoc.java

Content: 

private static String fileToString(File f) throws Exception {

  StringWriter output=new StringWriter();

  FileReader input=new FileReader(f);

  char[] buffer=new char[8 * 1024];

  int n=0;

  while (-1 != (n=input.read(buffer))) {

    output.write(buffer,0,n);

  }

  return output.toString();

}

Location: PropertiesToAsciidoc.java

Content: 

static void help(){

  System.out.println("PropertiesToXML <path to protocols.adoc file> <path to installation.adoc file>");

}

