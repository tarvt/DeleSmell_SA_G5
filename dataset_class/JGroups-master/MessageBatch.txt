Location: MessageBatch.java

Content: 

public MessageBatch add(final Message msg){

  add(msg,true);

  return this;

}

Location: MessageBatch.java

Content: 

public MessageBatch add(final MessageBatch batch){

  add(batch,true);

  return this;

}

Location: MessageBatch.java

Content: 

/** 

 * Adds another batch to this one

 * @param batch the batch to add to this batch

 * @param resize when true, this batch will be resized to accommodate the other batch

 * @return the number of messages from the other batch that were added successfully. Will always be batch.size()unless resize==0: in this case, the number of messages that were added successfully is returned

 */

public int add(final MessageBatch batch,boolean resize){

  if (batch == null)   return 0;

  if (this == batch)   throw new IllegalArgumentException("cannot add batch to itself");

  int batch_size=batch.size();

  if (index + batch_size >= messages.length && resize)   resize(messages.length + batch_size + 1);

  int cnt=0;

  for (  Message msg : batch) {

    if (index >= messages.length)     return cnt;

    messages[index++]=msg;

    cnt++;

  }

  return cnt;

}

Location: MessageBatch.java

Content: 

/** 

 * Adds a message to the table

 * @param msg the message

 * @param resize whether or not to resize the table. If true, the method will always return 1

 * @return always 1 if resize==true, else 1 if the message was added or 0 if not

 */

public int add(final Message msg,boolean resize){

  if (msg == null)   return 0;

  if (index >= messages.length) {

    if (!resize)     return 0;

    resize();

  }

  messages[index++]=msg;

  return 1;

}

Location: MessageBatch.java

Content: 

/** 

 * Returns the underlying message array. This is only intended for testing ! 

 */

public Message[] array(){

  return messages;

}

Location: MessageBatch.java

Content: 

public AsciiString clusterName(){

  return cluster_name;

}

Location: MessageBatch.java

Content: 

public MessageBatch clusterName(AsciiString name){

  this.cluster_name=name;

  return this;

}

Location: MessageBatch.java

Content: 

public Address dest(){

  return dest;

}

Location: MessageBatch.java

Content: 

public MessageBatch dest(Address dest){

  this.dest=dest;

  return this;

}

Location: MessageBatch.java

Content: 

public Mode determineMode(){

  int num_oob=0, num_reg=0, num_internal=0;

  for (int i=0; i < index; i++) {

    if (messages[i] == null)     continue;

    if (messages[i].isFlagSet(Message.Flag.OOB))     num_oob++;

 else     if (messages[i].isFlagSet(Message.Flag.INTERNAL))     num_internal++;

 else     num_reg++;

  }

  if (num_internal > 0 && num_oob == 0 && num_reg == 0)   return Mode.INTERNAL;

  if (num_oob > 0 && num_internal == 0 && num_reg == 0)   return Mode.OOB;

  if (num_reg > 0 && num_oob == 0 && num_internal == 0)   return Mode.REG;

  return Mode.MIXED;

}

Location: MessageBatch.java

Content: 

public Message first(){

  for (int i=0; i < index; i++)   if (messages[i] != null)   return messages[i];

  return null;

}

Location: MessageBatch.java

Content: 

public void forEach(BiConsumer<Message,MessageBatch> consumer){

  for (int i=0; i < index; i++) {

    try {

      consumer.accept(messages[i],this);

    }

 catch (    Throwable t) {

    }

  }

}

Location: MessageBatch.java

Content: 

public int getCapacity(){

  return messages.length;

}

Location: MessageBatch.java

Content: 

public AsciiString getClusterName(){

  return cluster_name;

}

Location: MessageBatch.java

Content: 

public Address getDest(){

  return dest;

}

Location: MessageBatch.java

Content: 

/** 

 * Removes and returns all messages which have a header with ID == id 

 */

public Collection<Message> getMatchingMessages(final short id,boolean remove){

  return map((msg,batch) -> {

    if (msg != null && msg.getHeader(id) != null) {

      if (remove)       batch.remove(msg);

      return msg;

    }

    return null;

  }

);

}

Location: MessageBatch.java

Content: 

public Mode getMode(){

  return mode;

}

Location: MessageBatch.java

Content: 

public Address getSender(){

  return sender;

}

Location: MessageBatch.java

Content: 

public int index(){

  return index;

}

Location: MessageBatch.java

Content: 

public boolean isMulticast(){

  return multicast;

}

Location: MessageBatch.java

Content: 

public Message last(){

  for (int i=index - 1; i >= 0; i--)   if (messages[i] != null)   return messages[i];

  return null;

}

Location: MessageBatch.java

Content: 

/** 

 * Applies a function to all messages and returns a list of the function results 

 */

public <T>Collection<T> map(BiFunction<Message,MessageBatch,T> visitor){

  Collection<T> retval=null;

  for (int i=0; i < index; i++) {

    try {

      T result=visitor.apply(messages[i],this);

      if (result != null) {

        if (retval == null)         retval=new ArrayList<>();

        retval.add(result);

      }

    }

 catch (    Throwable t) {

    }

  }

  return retval;

}

Location: MessageBatch.java

Content: 

public MessageBatch(Address dest,Address sender,AsciiString cluster_name,boolean multicast,Collection<Message> msgs){

  this(dest,sender,cluster_name,multicast,msgs,null);

}

Location: MessageBatch.java

Content: 

public MessageBatch(Address dest,Address sender,AsciiString cluster_name,boolean multicast,Collection<Message> msgs,Predicate<Message> filter){

  messages=new Message[msgs.size()];

  for (  Message msg : msgs) {

    if (filter != null && !filter.test(msg))     continue;

    messages[index++]=msg;

  }

  this.dest=dest;

  this.sender=sender;

  this.cluster_name=cluster_name;

  this.multicast=multicast;

  this.mode=determineMode();

}

Location: MessageBatch.java

Content: 

public MessageBatch(Address dest,Address sender,AsciiString cluster_name,boolean multicast,Mode mode,int capacity){

  this(capacity);

  this.dest=dest;

  this.sender=sender;

  this.cluster_name=cluster_name;

  this.multicast=multicast;

  this.mode=mode;

}

Location: MessageBatch.java

Content: 

public MessageBatch(Collection<Message> msgs){

  messages=new Message[msgs.size()];

  for (  Message msg : msgs)   messages[index++]=msg;

  mode=determineMode();

}

Location: MessageBatch.java

Content: 

public MessageBatch(int capacity){

  this.messages=new Message[capacity];

}

Location: MessageBatch.java

Content: 

public Mode mode(){

  return mode;

}

Location: MessageBatch.java

Content: 

public MessageBatch mode(Mode mode){

  this.mode=mode;

  return this;

}

Location: MessageBatch.java

Content: 

public boolean multicast(){

  return multicast;

}

Location: MessageBatch.java

Content: 

public MessageBatch multicast(boolean flag){

  multicast=flag;

  return this;

}

Location: MessageBatch.java

Content: 

public String printHeaders(){

  StringBuilder sb=new StringBuilder().append("dest=" + dest);

  if (sender != null)   sb.append(", sender=").append(sender);

  sb.append("\n").append(size()).append(":\n");

  int count=1;

  for (  Message msg : this)   sb.append("#").append(count++).append(": ").append(msg.printHeaders()).append("\n");

  return sb.toString();

}

Location: MessageBatch.java

Content: 

/** 

 * Removes the current message (found by indentity (==)) by nulling it in the message array

 * @param msg

 * @return

 */

public MessageBatch remove(Message msg){

  return replace(msg,null);

}

Location: MessageBatch.java

Content: 

/** 

 * Removes all messages which match filter

 * @param filter the filter. If null, no removal takes place

 * @return the MessageBatch

 */

public MessageBatch remove(Predicate<Message> filter){

  return replace(filter,null,true);

}

Location: MessageBatch.java

Content: 

/** 

 * Replaces all messages that match a given filter with a replacement message

 * @param filter the filter. If null, no changes take place. Note that filter needs to be able to handle null msgs

 * @param replacement the replacement message. Can be null, which essentially removes all messages matching filter

 * @param match_all whether to replace the first or all matches

 * @return the number of matched messages

 */

public int replaceIf(Predicate<Message> filter,Message replacement,boolean match_all){

  if (filter == null)   return 0;

  int matched=0;

  for (int i=0; i < index; i++) {

    if (filter.test(messages[i])) {

      messages[i]=replacement;

      matched++;

      if (!match_all)       break;

    }

  }

  return matched;

}

Location: MessageBatch.java

Content: 

/** 

 * Replaces a message in the batch with another one

 * @param existing_msg The message to be replaced. The message has to be non-null and is found by identity (==)comparison

 * @param new_msg The message to replace the existing message with, can be null

 * @return

 */

public MessageBatch replace(Message existing_msg,Message new_msg){

  if (existing_msg == null)   return this;

  for (int i=0; i < index; i++) {

    if (messages[i] != null && messages[i] == existing_msg) {

      messages[i]=new_msg;

      break;

    }

  }

  return this;

}

Location: MessageBatch.java

Content: 

/** 

 * Replaces all messages which match a given filter with a replacement message

 * @param filter the filter. If null, no changes take place. Note that filter needs to be able to handle null msgs

 * @param replacement the replacement message. Can be null, which essentially removes all messages matching filter

 * @param match_all whether to replace the first or all matches

 * @return the MessageBatch

 */

public MessageBatch replace(Predicate<Message> filter,Message replacement,boolean match_all){

  replaceIf(filter,replacement,match_all);

  return this;

}

Location: MessageBatch.java

Content: 

protected void resize(){

  resize(messages.length + INCR);

}

Location: MessageBatch.java

Content: 

public Address sender(){

  return sender;

}

Location: MessageBatch.java

Content: 

public MessageBatch sender(Address sender){

  this.sender=sender;

  return this;

}

Location: MessageBatch.java

Content: 

public MessageBatch setClusterName(AsciiString name){

  this.cluster_name=name;

  return this;

}

Location: MessageBatch.java

Content: 

public MessageBatch setDest(Address dest){

  this.dest=dest;

  return this;

}

Location: MessageBatch.java

Content: 

public MessageBatch setMode(Mode mode){

  this.mode=mode;

  return this;

}

Location: MessageBatch.java

Content: 

public MessageBatch setSender(Address sender){

  this.sender=sender;

  return this;

}

Location: MessageBatch.java

Content: 

/** 

 * Returns the size of the message batch (by calling  {@link org.jgroups.Message#size()} on all messages) 

 */

public long totalSize(){

  long retval=0;

  for (int i=0; i < index; i++)   retval+=total_size_visitor.applyAsLong(messages[i],this);

  return retval;

}

Location: MessageBatch.java

Content: 

/** 

 * Transfers messages from other to this batch. Optionally clears the other batch after the transfer

 * @param other the other batch

 * @param clear If true, the transferred messages are removed from the other batch

 * @return the number of transferred messages (may be 0 if the other batch was empty)

 */

public int transferFrom(MessageBatch other,boolean clear){

  if (other == null || this == other)   return 0;

  int capacity=messages.length, other_size=other.size();

  if (other_size == 0)   return 0;

  if (capacity < other_size)   messages=new Message[other_size];

  System.arraycopy(other.messages,0,this.messages,0,other_size);

  if (this.index > other_size)   for (int i=other_size; i < this.index; i++)   messages[i]=null;

  this.index=other_size;

  if (clear)   other.clear();

  return other_size;

}

