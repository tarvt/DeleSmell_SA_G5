Location: SizeBoundedQueue.java

Content: 

public void add(T element,int size) throws InterruptedException {

  if (element == null)   throw new IllegalArgumentException("element cannot be null");

  boolean incremented=false;

  lock.lockInterruptibly();

  try {

    while (max_size - this.count - size < 0) {

      if (!incremented) {

        incremented=true;

        waiters++;

      }

      not_full.await();

    }

    queue.add(new El(element,size));

    boolean signal=count == 0;

    this.count+=size;

    if (signal)     not_empty.signalAll();

  }

  finally {

    if (incremented)     waiters--;

    lock.unlock();

  }

}

Location: SizeBoundedQueue.java

Content: 

/** 

 * Returns the number of elements in the queue 

 */

public int getElements(){

  return queue.size();

}

Location: SizeBoundedQueue.java

Content: 

public int getWaiters(){

  return waiters;

}

Location: SizeBoundedQueue.java

Content: 

public boolean hasWaiters(){

  return waiters > 0;

}

Location: SizeBoundedQueue.java

Content: 

/** 

 * For testing only - should always be the same as size() 

 */

public int queueSize(){

  return queue.stream().map(el -> el.size).reduce(0,(l,r) -> l + r);

}

Location: SizeBoundedQueue.java

Content: 

public SizeBoundedQueue(int max_size){

  this(max_size,new ReentrantLock(true));

}

Location: SizeBoundedQueue.java

Content: 

public SizeBoundedQueue(int max_size,final Lock lock){

  this.lock=lock;

  this.max_size=max_size;

  if (lock == null)   throw new IllegalArgumentException("lock must not be null");

  not_full=lock.newCondition();

  not_empty=lock.newCondition();

}

