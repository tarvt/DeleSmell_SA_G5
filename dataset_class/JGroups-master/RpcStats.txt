Location: RpcStats.java

Content: 

public void addAnycast(boolean sync,long time,Collection<Address> dests){

  update(Type.ANYCAST,sync);

  if (dests != null)   for (  Address dest : dests)   addToResults(dest,sync,time);

}

Location: RpcStats.java

Content: 

protected void addToResults(Address dest,boolean sync,long time){

  ConcurrentMap<Address,Result> map=stats;

  if (map == null)   return;

  if (dest == null)   dest=Global.NULL_ADDRESS;

  Result res=map.get(dest);

  if (res == null) {

    Result tmp=map.putIfAbsent(dest,res=new Result());

    if (tmp != null)     res=tmp;

  }

  res.add(sync,time);

}

Location: RpcStats.java

Content: 

public void add(Type type,Address dest,boolean sync,long time){

  update(type,sync);

  addToResults(dest,sync,time);

}

Location: RpcStats.java

Content: 

public int anycasts(boolean sync){

  return sync ? sync_anycasts.get() : async_anycasts.get();

}

Location: RpcStats.java

Content: 

public boolean extendedStats(){

  return stats != null;

}

Location: RpcStats.java

Content: 

public RpcStats extendedStats(boolean f){

  if (f) {

    if (stats == null)     stats=new ConcurrentHashMap<>();

  }

 else   stats=null;

  return this;

}

Location: RpcStats.java

Content: 

public int multicasts(boolean sync){

  return sync ? sync_multicasts.get() : async_multicasts.get();

}

Location: RpcStats.java

Content: 

public String printOrderByDest(){

  if (stats == null)   return "(no stats)";

  StringBuilder sb=new StringBuilder("\n");

  for (  Map.Entry<Address,Result> entry : stats.entrySet()) {

    Address dst=entry.getKey();

    sb.append(String.format("%s: %s\n",dst == Global.NULL_ADDRESS ? "<all>" : dst,entry.getValue()));

  }

  return sb.toString();

}

Location: RpcStats.java

Content: 

public RpcStats(boolean extended_stats){

  extendedStats(extended_stats);

}

Location: RpcStats.java

Content: 

public int unicasts(boolean sync){

  return sync ? sync_unicasts.get() : async_unicasts.get();

}

Location: RpcStats.java

Content: 

protected void update(Type type,boolean sync){

switch (type) {

case MULTICAST:

    if (sync)     sync_multicasts.incrementAndGet();

 else     async_multicasts.incrementAndGet();

  break;

case UNICAST:

if (sync) sync_unicasts.incrementAndGet();

 else async_unicasts.incrementAndGet();

break;

case ANYCAST:

if (sync) sync_anycasts.incrementAndGet();

 else async_anycasts.incrementAndGet();

break;

}

}

