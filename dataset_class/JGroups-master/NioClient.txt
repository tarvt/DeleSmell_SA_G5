Location: NioClient.java

Content: 

/** 

 * Creates an instance of an  {@link NioClient} that acts as a <em>client</em>: no server channel is created andno acceptor is started to listen for incoming connections. Instead, a channel is created (bound to bind_addr/bind_port) and connected to server_addr/server_port. This is used to send messages to the remote server and receive messages from it. Note that there is only a single TCP connection established between the client and server.

 * @param bind_addr The address to which the local channel should bind to. Can be null, then the OS picks the address

 * @param bind_port The local port. Can be 0, then the OS picks the port.

 * @param server_addr The address of the server to connect to

 * @param server_port The port of the server to connect to.

 * @throws Exception If the creation failed

 */

public NioClient(InetAddress bind_addr,int bind_port,InetAddress server_addr,int server_port){

  this(new DefaultThreadFactory("nio",false),new DefaultSocketFactory());

  clientBindAddress(bind_addr).clientBindPort(bind_port);

  this.remote_addr=new IpAddress(server_addr,server_port);

}

Location: NioClient.java

Content: 

/** 

 * Creates an instance of an  {@link NioClient} that acts as a <em>client</em>: no server channel is created andno acceptor is started to listen for incoming connections. Instead, a channel is created (bound to bind_addr/bind_port) and connected to server_addr/server_port. This is used to send messages to the remote server and receive messages from it. Note that there is only a single TCP connection established between the client and server.

 * @param bind_addr The address to which the local channel should bind to. Can be null, then the OS picks the address

 * @param server_addr The address of the server to connect to

 * @throws Exception If the creation failed

 */

public NioClient(IpAddress bind_addr,IpAddress server_addr){

  this(bind_addr != null ? bind_addr.getIpAddress() : null,bind_addr != null ? bind_addr.getPort() : 0,server_addr != null ? server_addr.getIpAddress() : null,server_addr != null ? server_addr.getPort() : 0);

}

Location: NioClient.java

Content: 

protected NioClient(ThreadFactory thread_factory,SocketFactory sf){

  super(thread_factory,sf);

}

Location: NioClient.java

Content: 

public Address remoteAddress(){

  return remote_addr;

}

Location: NioClient.java

Content: 

/** 

 * Sets the address of the server. Has no effect when already connected. 

 */

public NioClient remoteAddress(IpAddress addr){

  this.remote_addr=addr;

  return this;

}

Location: NioClient.java

Content: 

@Override public void send(Address dest,ByteBuffer data) throws Exception {

  send(data);

}

