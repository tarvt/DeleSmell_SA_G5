Location: MockSocketChannel.java

Content: 

@Override public SocketChannel bind(SocketAddress local) throws IOException {

  return null;

}

Location: MockSocketChannel.java

Content: 

public ByteBuffer bytesToRead(){

  return bytes_to_read;

}

Location: MockSocketChannel.java

Content: 

public MockSocketChannel bytesToRead(byte[] buf){

  bytes_to_read=ByteBuffer.wrap(buf);

  return this;

}

Location: MockSocketChannel.java

Content: 

public MockSocketChannel bytesToRead(ByteBuffer buf){

  bytes_to_read=buf;

  return this;

}

Location: MockSocketChannel.java

Content: 

public MockSocketChannel bytesToWrite(int num){

  bytes_to_write=num;

  return this;

}

Location: MockSocketChannel.java

Content: 

@Override public boolean connect(SocketAddress remote) throws IOException {

  return true;

}

Location: MockSocketChannel.java

Content: 

public void doClose(){

  closed=true;

}

Location: MockSocketChannel.java

Content: 

@Override public boolean finishConnect() throws IOException {

  return true;

}

Location: MockSocketChannel.java

Content: 

@Override public <T>T getOption(SocketOption<T> name) throws IOException {

  return null;

}

Location: MockSocketChannel.java

Content: 

@Override public SocketAddress getRemoteAddress() throws IOException {

  return null;

}

Location: MockSocketChannel.java

Content: 

@Override protected void implCloseSelectableChannel() throws IOException {

}

Location: MockSocketChannel.java

Content: 

@Override protected void implConfigureBlocking(boolean block) throws IOException {

}

Location: MockSocketChannel.java

Content: 

@Override public boolean isConnectionPending(){

  return false;

}

Location: MockSocketChannel.java

Content: 

public MockSocketChannel(){

  super(null);

}

Location: MockSocketChannel.java

Content: 

/** 

 * Initializes a new instance of this class.

 * @param provider The provider that created this channel

 */

public MockSocketChannel(SelectorProvider provider){

  super(provider);

}

Location: MockSocketChannel.java

Content: 

@Override public int read(ByteBuffer dst) throws IOException {

  int read=0;

  while (dst.hasRemaining() && bytes_to_read.hasRemaining()) {

    dst.put(bytes_to_read.get());

    read++;

  }

  return read > 0 ? read : closed ? -1 : read;

}

Location: MockSocketChannel.java

Content: 

@Override public long read(ByteBuffer[] dsts,int offset,int length) throws IOException {

  long total=0;

  for (int i=offset; i < offset + length; i++) {

    ByteBuffer buf=i >= 0 && i < dsts.length ? dsts[i] : null;

    if (buf != null) {

      int read=read(buf);

      if (read >= 0)       total+=read;

 else       return read;

    }

  }

  return total;

}

Location: MockSocketChannel.java

Content: 

public ByteBuffer recorder(){

  return recorder;

}

Location: MockSocketChannel.java

Content: 

public MockSocketChannel recorder(ByteBuffer buf){

  this.recorder=buf;

  return this;

}

Location: MockSocketChannel.java

Content: 

@Override public <T>SocketChannel setOption(SocketOption<T> name,T value) throws IOException {

  return null;

}

Location: MockSocketChannel.java

Content: 

@Override public SocketChannel shutdownInput() throws IOException {

  return null;

}

Location: MockSocketChannel.java

Content: 

@Override public SocketChannel shutdownOutput() throws IOException {

  return null;

}

Location: MockSocketChannel.java

Content: 

@Override public Socket socket(){

  return null;

}

Location: MockSocketChannel.java

Content: 

@Override public Set<SocketOption<?>> supportedOptions(){

  return null;

}

Location: MockSocketChannel.java

Content: 

@Override public int write(ByteBuffer buf) throws IOException {

  if (bytes_to_write == 0)   return 0;

  int written=0;

  while (buf.hasRemaining() && bytes_to_write-- > 0) {

    byte b=buf.get();

    written++;

    if (recorder != null)     recorder.put(b);

  }

  return written;

}

Location: MockSocketChannel.java

Content: 

@Override public long write(ByteBuffer[] srcs,int offset,int length) throws IOException {

  if (bytes_to_write == 0)   return 0;

  int written=0;

  for (int i=offset; i < Math.min(srcs.length,length + offset); i++) {

    ByteBuffer buf=srcs[i];

    while (buf.hasRemaining() && bytes_to_write-- > 0) {

      byte b=buf.get();

      written++;

      if (recorder != null)       recorder.put(b);

    }

  }

  return written;

}

