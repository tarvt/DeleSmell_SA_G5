Location: SenderManager.java

Content: 

/** 

 * Add a new message sent

 * @param messageID             the message ID

 * @param destinations          the destination set

 * @param initialSequenceNumber the initial sequence number

 * @param deliverToMyself       true if *this* member is in destination sent, false otherwise

 */

public void addNewMessageToSend(MessageID messageID,Collection<Address> destinations,long initialSequenceNumber,boolean deliverToMyself){

  MessageInfo messageInfo=new MessageInfo(destinations,initialSequenceNumber,deliverToMyself);

  if (deliverToMyself) {

    messageInfo.setProposeReceived(messageID.getAddress());

  }

  sentMessages.put(messageID,messageInfo);

}

Location: SenderManager.java

Content: 

/** 

 * Add a propose from a member in destination set

 * @param messageID         the message ID

 * @param from              the originator of the propose

 * @param sequenceNumber    the proposed sequence number

 * @return NOT_READY if the final sequence number is not know, or the final sequence number

 */

public long addPropose(MessageID messageID,Address from,long sequenceNumber){

  MessageInfo messageInfo=sentMessages.get(messageID);

  if (messageInfo != null && messageInfo.addPropose(from,sequenceNumber)) {

    return messageInfo.getAndMarkFinalSent();

  }

  return NOT_READY;

}

Location: SenderManager.java

Content: 

/** 

 * obtains the destination set of a message

 * @param messageID the message ID

 * @return the destination set

 */

public Set<Address> getDestination(MessageID messageID){

  MessageInfo messageInfo=sentMessages.get(messageID);

  Set<Address> destination;

  if (messageInfo != null) {

    destination=new HashSet<>(messageInfo.destinations);

  }

 else {

    destination=Collections.emptySet();

  }

  return destination;

}

Location: SenderManager.java

Content: 

public Collection<MessageID> getPendingMessageIDs(){

  return sentMessages.keySet();

}

Location: SenderManager.java

Content: 

/** 

 * Mark the message as sent

 * @param messageID the message ID

 * @return  return true if *this* member is in destination set

 */

public boolean markSent(MessageID messageID){

  MessageInfo messageInfo=sentMessages.remove(messageID);

  return messageInfo != null && messageInfo.toSelfDeliver;

}

Location: SenderManager.java

Content: 

public long removeLeavers(MessageID messageID,Collection<Address> leavers){

  MessageInfo messageInfo=sentMessages.get(messageID);

  if (messageInfo != null && messageInfo.removeLeavers(leavers)) {

    return messageInfo.getAndMarkFinalSent();

  }

  return NOT_READY;

}

