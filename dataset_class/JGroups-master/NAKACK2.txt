Location: NAKACK2.java

Content: 

/** 

 * Removes old members from xmit-table and adds new members to xmit-table (at seqnos hd=0, hr=0). This method is not called concurrently

 */

protected void adjustReceivers(List<Address> members){

  Set<Address> keys=xmit_table.keySet();

  for (  Address member : keys) {

    if (!members.contains(member)) {

      if (Objects.equals(local_addr,member))       continue;

      Table<Message> buf=xmit_table.remove(member);

      if (buf != null)       log.debug("%s: removed %s from xmit_table (not member anymore)",local_addr,member);

    }

  }

  members.stream().filter(mbr -> !keys.contains(mbr)).forEach(mbr -> xmit_table.putIfAbsent(mbr,createTable(0)));

}

Location: NAKACK2.java

Content: 

protected void cancelRebroadcasting(){

  rebroadcast_lock.lock();

  try {

    rebroadcasting=false;

    rebroadcast_done.signalAll();

  }

  finally {

    rebroadcast_lock.unlock();

  }

}

Location: NAKACK2.java

Content: 

protected void checkForRebroadcasts(){

  Digest tmp=getDigest();

  boolean cancel_rebroadcasting=false;

  rebroadcast_digest_lock.lock();

  try {

    cancel_rebroadcasting=isGreaterThanOrEqual(tmp,rebroadcast_digest);

  }

 catch (  Throwable t) {

    ;

  }

 finally {

    rebroadcast_digest_lock.unlock();

  }

  if (cancel_rebroadcasting)   cancelRebroadcasting();

}

Location: NAKACK2.java

Content: 

@ManagedOperation(description="Clears the cache for messages from non-members") public void clearNonMemberCache(){

  if (suppress_log_non_member != null)   suppress_log_non_member.getCache().clear();

}

Location: NAKACK2.java

Content: 

protected Table<Message> createTable(long initial_seqno){

  return new Table<>(xmit_table_num_rows,xmit_table_msgs_per_row,initial_seqno,xmit_table_resize_factor,xmit_table_max_compaction_time);

}

Location: NAKACK2.java

Content: 

protected void deliverBatch(MessageBatch batch){

  try {

    if (batch == null || batch.isEmpty())     return;

    if (is_trace) {

      Message first=batch.first(), last=batch.last();

      StringBuilder sb=new StringBuilder(local_addr + " <-- " + batch.sender()+ ": ");

      if (first != null && last != null) {

        NakAckHeader2 hdr1=first.getHeader(id), hdr2=last.getHeader(id);

        sb.append("#").append(hdr1.seqno).append("-").append(hdr2.seqno);

      }

      sb.append(" (" + batch.size()).append(" messages)");

      log.trace(sb);

    }

    up_prot.up(batch);

  }

 catch (  Throwable t) {

    log.error(Util.getMessage("FailedToDeliverMsg"),local_addr,"batch",batch,t);

  }

}

Location: NAKACK2.java

Content: 

protected void deliver(Message msg,Address sender,long seqno,String error_msg){

  if (is_trace)   log.trace("%s <-- %s: #%d",local_addr,sender,seqno);

  try {

    up_prot.up(msg);

  }

 catch (  Throwable t) {

    log.error(Util.getMessage("FailedToDeliverMsg"),local_addr,error_msg,msg,t);

  }

}

Location: NAKACK2.java

Content: 

@ManagedOperation(description="Prints the number of rows currently allocated in the matrix for all members. " + "This value will not be lower than xmit_table_now_rows") public String dumpXmitTablesNumCurrentRows(){

  StringBuilder sb=new StringBuilder();

  for (  Map.Entry<Address,Table<Message>> entry : xmit_table.entrySet())   sb.append(String.format("%s: %d\n",entry.getKey(),entry.getValue().getNumRows()));

  return sb.toString();

}

Location: NAKACK2.java

Content: 

/** 

 * Flushes the queue. Done in a separate thread as we don't want to block the {@link ClientGmsImpl#installView(org.jgroups.View,org.jgroups.util.Digest)} method (called when a view is installed).

 */

protected void flushBecomeServerQueue(){

  if (become_server_queue != null && !become_server_queue.isEmpty()) {

    log.trace("%s: flushing become_server_queue (%d elements)",local_addr,become_server_queue.size());

    TP transport=getTransport();

    for (    final Message msg : become_server_queue) {

      transport.submitToThreadPool(() -> {

        try {

          up(msg);

        }

  finally {

          become_server_queue.remove(msg);

        }

      }

,true);

    }

  }

}

Location: NAKACK2.java

Content: 

@ManagedAttribute(description="Actual size of the become_server_queue") public int getBecomeServerQueueSizeActual(){

  return become_server_queue != null ? become_server_queue.size() : -1;

}

Location: NAKACK2.java

Content: 

@ManagedAttribute public long getCurrentSeqno(){

  return seqno.get();

}

Location: NAKACK2.java

Content: 

public Digest getDigest(Address mbr){

  if (mbr == null)   return getDigest();

  Table<Message> buf=xmit_table.get(mbr);

  if (buf == null)   return null;

  long[] seqnos=buf.getDigest();

  return new Digest(mbr,seqnos[0],seqnos[1]);

}

Location: NAKACK2.java

Content: 

public boolean getLogDiscardMessages(){

  return log_discard_msgs;

}

Location: NAKACK2.java

Content: 

@ManagedAttribute(description="Number of messages from non-members") public int getNonMemberMessages(){

  return suppress_log_non_member != null ? suppress_log_non_member.getCache().size() : 0;

}

Location: NAKACK2.java

Content: 

@ManagedAttribute(description="Returns the number of bytes of all messages in all retransmit buffers. " + "To compute the size, Message.getLength() is used") public long getSizeOfAllMessages(){

  long retval=0;

  for (  Table<Message> buf : xmit_table.values())   retval+=sizeOfAllMessages(buf,false);

  return retval;

}

Location: NAKACK2.java

Content: 

@ManagedAttribute(description="Returns the number of bytes of all messages in all retransmit buffers. " + "To compute the size, Message.size() is used") public long getSizeOfAllMessagesInclHeaders(){

  long retval=0;

  for (  Table<Message> buf : xmit_table.values())   retval+=sizeOfAllMessages(buf,true);

  return retval;

}

Location: NAKACK2.java

Content: 

/** 

 * Returns the receive window for sender; only used for testing. Do not use ! 

 */

public Table<Message> getWindow(Address sender){

  return xmit_table.get(sender);

}

Location: NAKACK2.java

Content: 

public long getXmitRequestsReceived(){

  return xmit_reqs_received.sum();

}

Location: NAKACK2.java

Content: 

public long getXmitRequestsSent(){

  return xmit_reqs_sent.sum();

}

Location: NAKACK2.java

Content: 

public long getXmitResponsesReceived(){

  return xmit_rsps_received.sum();

}

Location: NAKACK2.java

Content: 

public long getXmitResponsesSent(){

  return xmit_rsps_sent.sum();

}

Location: NAKACK2.java

Content: 

@ManagedAttribute(description="Capacity of the retransmit buffer. Computed as xmit_table_num_rows * xmit_table_msgs_per_row") public long getXmitTableCapacity(){

  Table<Message> table=local_addr != null ? xmit_table.get(local_addr) : null;

  return table != null ? table.capacity() : 0;

}

Location: NAKACK2.java

Content: 

@ManagedAttribute(description="Total number of missing (= not received) messages in all retransmit buffers") public int getXmitTableMissingMessages(){

  int num=0;

  for (  Table<Message> buf : xmit_table.values())   num+=buf.getNumMissing();

  return num;

}

Location: NAKACK2.java

Content: 

@ManagedAttribute(description="Number of retransmit table compactions") public int getXmitTableNumCompactions(){

  Table<Message> table=local_addr != null ? xmit_table.get(local_addr) : null;

  return table != null ? table.getNumCompactions() : 0;

}

Location: NAKACK2.java

Content: 

@ManagedAttribute(description="Prints the number of rows currently allocated in the matrix. This value will not " + "be lower than xmit_table_now_rows") public int getXmitTableNumCurrentRows(){

  Table<Message> table=local_addr != null ? xmit_table.get(local_addr) : null;

  return table != null ? table.getNumRows() : 0;

}

Location: NAKACK2.java

Content: 

@ManagedAttribute(description="Number of retransmit table moves") public int getXmitTableNumMoves(){

  Table<Message> table=local_addr != null ? xmit_table.get(local_addr) : null;

  return table != null ? table.getNumMoves() : 0;

}

Location: NAKACK2.java

Content: 

@ManagedAttribute(description="Number of retransmit table purges") public int getXmitTableNumPurges(){

  Table<Message> table=local_addr != null ? xmit_table.get(local_addr) : null;

  return table != null ? table.getNumPurges() : 0;

}

Location: NAKACK2.java

Content: 

@ManagedAttribute(description="Number of retransmit table resizes") public int getXmitTableNumResizes(){

  Table<Message> table=local_addr != null ? xmit_table.get(local_addr) : null;

  return table != null ? table.getNumResizes() : 0;

}

Location: NAKACK2.java

Content: 

@ManagedAttribute(description="Total number of undelivered messages in all retransmit buffers") public int getXmitTableUndeliveredMsgs(){

  int num=0;

  for (  Table<Message> buf : xmit_table.values())   num+=buf.size();

  return num;

}

Location: NAKACK2.java

Content: 

/** 

 * Compares the sender's highest seqno with my highest seqno: if the sender's is higher, ask sender for retransmission

 * @param sender The sender

 * @param seqno The highest seqno sent by sender

 */

protected void handleHighestSeqno(Address sender,long seqno){

  Table<Message> buf=xmit_table.get(sender);

  if (buf == null)   return;

  long my_highest_received=buf.getHighestReceived();

  if (my_highest_received >= 0 && seqno > my_highest_received) {

    log.trace("%s: my_highest_rcvd (%s#%d) < highest received (%s#%d): requesting retransmission",local_addr,sender,my_highest_received,sender,seqno);

    retransmit(seqno,seqno,sender);

  }

}

Location: NAKACK2.java

Content: 

protected void handleMessages(Address dest,Address sender,List<LongTuple<Message>> msgs,boolean oob,AsciiString cluster_name){

  Table<Message> buf=xmit_table.get(sender);

  if (buf == null) {

    unknownMember(sender,"batch");

    return;

  }

  num_messages_received+=msgs.size();

  boolean loopback=local_addr.equals(sender);

  boolean added=loopback || buf.add(msgs,oob,oob ? DUMMY_OOB_MSG : null);

  if (added && oob) {

    MessageBatch oob_batch=new MessageBatch(dest,sender,null,dest == null,MessageBatch.Mode.OOB,msgs.size());

    if (loopback) {

      for (      LongTuple<Message> tuple : msgs) {

        long seq=tuple.getVal1();

        Message msg=buf.get(seq);

        if (msg != null && msg.isFlagSet(Message.Flag.OOB) && msg.setTransientFlagIfAbsent(Message.TransientFlag.OOB_DELIVERED))         oob_batch.add(msg);

      }

    }

 else {

      for (      LongTuple<Message> tuple : msgs)       oob_batch.add(tuple.getVal2());

    }

    deliverBatch(oob_batch);

  }

  removeAndDeliver(buf,sender,loopback,cluster_name);

}

Location: NAKACK2.java

Content: 

/** 

 * Finds the corresponding retransmit buffer and adds the message to it (according to seqno). Then removes as many messages as possible and passes them up the stack. Discards messages from non-members.

 */

protected void handleMessage(Message msg,NakAckHeader2 hdr){

  Address sender=msg.getSrc();

  Table<Message> buf=xmit_table.get(sender);

  if (buf == null) {

    unknownMember(sender,hdr.seqno);

    return;

  }

  num_messages_received++;

  boolean loopback=local_addr.equals(sender);

  boolean added=loopback || buf.add(hdr.seqno,msg.isFlagSet(Message.Flag.OOB) ? DUMMY_OOB_MSG : msg);

  if (added && msg.isFlagSet(Message.Flag.OOB)) {

    if (loopback) {

      msg=buf.get(hdr.seqno);

      if (msg != null && msg.isFlagSet(Message.Flag.OOB) && msg.setTransientFlagIfAbsent(Message.TransientFlag.OOB_DELIVERED))       deliver(msg,sender,hdr.seqno,"OOB message");

    }

 else     deliver(msg,sender,hdr.seqno,"OOB message");

  }

  removeAndDeliver(buf,sender,loopback,null);

}

Location: NAKACK2.java

Content: 

/** 

 * Retransmits messsages first_seqno to last_seqno from original_sender from xmit_table to xmit_requester, called when XMIT_REQ is received.

 * @param xmit_requester The sender of the XMIT_REQ, we have to send the requested copy of the message to this address

 * @param missing_msgs A list of seqnos that have to be retransmitted

 * @param original_sender The member who originally sent the messsage. Guaranteed to be non-null

 */

protected void handleXmitReq(Address xmit_requester,SeqnoList missing_msgs,Address original_sender){

  log.trace("%s <-- %s: XMIT(%s%s)",local_addr,xmit_requester,original_sender,missing_msgs);

  if (stats)   xmit_reqs_received.add(missing_msgs.size());

  Table<Message> buf=xmit_table.get(original_sender);

  if (buf == null) {

    log.error(Util.getMessage("SenderNotFound"),local_addr,original_sender);

    return;

  }

  for (  long i : missing_msgs) {

    Message msg=buf.get(i);

    if (msg == null) {

      if (log.isWarnEnabled() && log_not_found_msgs && !local_addr.equals(xmit_requester)&& i > buf.getLow())       log.warn(Util.getMessage("MessageNotFound"),local_addr,original_sender,i);

      continue;

    }

    if (is_trace)     log.trace("%s --> [all]: resending %s#%d",local_addr,original_sender,i);

    sendXmitRsp(xmit_requester,msg);

  }

}

Location: NAKACK2.java

Content: 

protected void handleXmitRsp(Message msg,NakAckHeader2 hdr){

  if (msg == null)   return;

  try {

    if (stats)     xmit_rsps_received.increment();

    msg.setDest(null);

    NakAckHeader2 newhdr=hdr.copy();

    newhdr.type=NakAckHeader2.MSG;

    msg.putHeader(id,newhdr);

    handleMessage(msg,newhdr);

    if (rebroadcasting)     checkForRebroadcasts();

  }

 catch (  Exception ex) {

    log.error(Util.getMessage("FailedToDeliverMsg"),local_addr,"retransmitted message",msg,ex);

  }

}

Location: NAKACK2.java

Content: 

public boolean isDiscardDeliveredMsgs(){

  return discard_delivered_msgs;

}

Location: NAKACK2.java

Content: 

/** 

 * Returns true if all senders of the current digest have their seqnos >= the ones from other

 */

protected static boolean isGreaterThanOrEqual(Digest first,Digest other){

  if (other == null)   return true;

  for (  Digest.Entry entry : first) {

    Address sender=entry.getMember();

    long[] their_entry=other.get(sender);

    if (their_entry == null)     continue;

    long my_highest=entry.getHighest();

    long their_highest=Math.max(their_entry[0],their_entry[1]);

    if (my_highest < their_highest)     return false;

  }

  return true;

}

Location: NAKACK2.java

Content: 

public boolean isUseMcastXmit(){

  return use_mcast_xmit;

}

Location: NAKACK2.java

Content: 

public boolean isXmitFromRandomMember(){

  return xmit_from_random_member;

}

Location: NAKACK2.java

Content: 

@ManagedAttribute(description="Is the retransmit task running") public boolean isXmitTaskRunning(){

  return xmit_task != null && !xmit_task.isDone();

}

Location: NAKACK2.java

Content: 

protected Message msgFromXmitRsp(Message msg,NakAckHeader2 hdr){

  if (msg == null)   return null;

  if (stats)   xmit_rsps_received.increment();

  msg.setDest(null);

  NakAckHeader2 newhdr=hdr.copy();

  newhdr.type=NakAckHeader2.MSG;

  msg.putHeader(id,newhdr);

  return msg;

}

Location: NAKACK2.java

Content: 

/** 

 * Overwrites existing entries, but does NOT remove entries not found in the digest

 * @param digest

 */

protected void overwriteDigest(Digest digest){

  if (digest == null)   return;

  StringBuilder sb=new StringBuilder("\n[overwriteDigest()]\n");

  sb.append("existing digest:  " + getDigest()).append("\nnew digest:       " + digest);

  for (  Digest.Entry entry : digest) {

    Address member=entry.getMember();

    if (member == null)     continue;

    long highest_delivered_seqno=entry.getHighestDeliveredSeqno();

    Table<Message> buf=xmit_table.get(member);

    if (buf != null) {

      if (local_addr.equals(member)) {

        buf.setHighestDelivered(highest_delivered_seqno);

        continue;

      }

      xmit_table.remove(member);

    }

    buf=createTable(highest_delivered_seqno);

    xmit_table.put(member,buf);

  }

  sb.append("\n").append("resulting digest: " + getDigest().toString(digest));

  digest_history.add(sb.toString());

  log.debug(sb.toString());

}

Location: NAKACK2.java

Content: 

@ManagedOperation(description="Keeps information about the last N times a digest was set or merged") public String printDigestHistory(){

  StringBuilder sb=new StringBuilder(local_addr + ":\n");

  for (  String tmp : digest_history)   sb.append(tmp).append("\n");

  return sb.toString();

}

Location: NAKACK2.java

Content: 

@ManagedOperation(description="Prints the contents of the receiver windows for all members") public String printMessages(){

  StringBuilder ret=new StringBuilder(local_addr + ":\n");

  for (  Map.Entry<Address,Table<Message>> entry : xmit_table.entrySet()) {

    Address addr=entry.getKey();

    Table<Message> buf=entry.getValue();

    ret.append(addr).append(": ").append(buf.toString()).append('\n');

  }

  return ret.toString();

}

Location: NAKACK2.java

Content: 

@ManagedOperation(description="Prints the stability messages received") public String printStabilityMessages(){

  return Util.printListWithDelimiter(stability_msgs,"\n");

}

Location: NAKACK2.java

Content: 

protected void queueMessage(Message msg,long seqno){

  if (become_server_queue != null) {

    become_server_queue.add(msg);

    log.trace("%s: message %s#%d was added to queue (not yet server)",local_addr,msg.getSrc(),seqno);

  }

 else   log.trace("%s: message %s#%d was discarded (not yet server)",local_addr,msg.getSrc(),seqno);

}

Location: NAKACK2.java

Content: 

/** 

 * Takes the argument highest_seqnos and compares it to the current digest. If the current digest has fewer messages, then send retransmit messages for the missing messages. Return when all missing messages have been received. If we're waiting for a missing message from P, and P crashes while waiting, we need to exclude P from the wait set.

 */

protected void rebroadcastMessages(){

  Digest their_digest;

  long sleep=max_rebroadcast_timeout / NUM_REBROADCAST_MSGS;

  long wait_time=max_rebroadcast_timeout, start=System.currentTimeMillis();

  while (wait_time > 0) {

    rebroadcast_digest_lock.lock();

    try {

      if (rebroadcast_digest == null)       break;

      their_digest=rebroadcast_digest.copy();

    }

  finally {

      rebroadcast_digest_lock.unlock();

    }

    Digest my_digest=getDigest();

    boolean xmitted=false;

    for (    Digest.Entry entry : their_digest) {

      Address member=entry.getMember();

      long[] my_entry=my_digest.get(member);

      if (my_entry == null)       continue;

      long their_high=entry.getHighest();

      long my_high=Math.max(my_entry[0],my_entry[1]);

      if (their_high > my_high) {

        log.trace("%s: fetching %d-%d from %s",local_addr,my_high,their_high,member);

        retransmit(my_high + 1,their_high,member,true);

        xmitted=true;

      }

    }

    if (!xmitted)     return;

    rebroadcast_lock.lock();

    try {

      try {

        my_digest=getDigest();

        rebroadcast_digest_lock.lock();

        try {

          if (!rebroadcasting || isGreaterThanOrEqual(my_digest,rebroadcast_digest))           return;

        }

  finally {

          rebroadcast_digest_lock.unlock();

        }

        rebroadcast_done.await(sleep,TimeUnit.MILLISECONDS);

        wait_time-=(System.currentTimeMillis() - start);

      }

 catch (      InterruptedException e) {

      }

    }

  finally {

      rebroadcast_lock.unlock();

    }

  }

}

Location: NAKACK2.java

Content: 

/** 

 * Efficient way of checking whether another thread is already processing messages from sender. If that's the case, we return immediately and let the existing thread process our message (https://jira.jboss.org/jira/browse/JGRP-829). Benefit: fewer threads blocked on the same lock, these threads can be returned to the thread pool

 */

protected void removeAndDeliver(Table<Message> buf,Address sender,boolean loopback,AsciiString cluster_name){

  AtomicInteger adders=buf.getAdders();

  if (adders.getAndIncrement() != 0)   return;

  boolean remove_msgs=discard_delivered_msgs && !loopback;

  MessageBatch batch=new MessageBatch(buf.size()).dest(null).sender(sender).clusterName(cluster_name).multicast(true);

  Supplier<MessageBatch> batch_creator=() -> batch;

  do {

    try {

      batch.reset();

      buf.removeMany(remove_msgs,0,no_dummy_and_no_oob_delivered_msgs_and_no_dont_loopback_msgs,batch_creator,BATCH_ACCUMULATOR);

    }

 catch (    Throwable t) {

      log.error("failed removing messages from table for " + sender,t);

    }

    if (!batch.isEmpty())     deliverBatch(batch);

  }

 while (adders.decrementAndGet() != 0);

  if (rebroadcasting)   checkForRebroadcasts();

}

Location: NAKACK2.java

Content: 

@ManagedAttribute(description="Whether or not the task to resend the last seqno is running (depends on resend_last_seqno)") public boolean resendTaskRunning(){

  return last_seqno_resender != null;

}

Location: NAKACK2.java

Content: 

protected void retransmit(long first_seqno,long last_seqno,Address sender){

  if (first_seqno <= last_seqno)   retransmit(first_seqno,last_seqno,sender,false);

}

Location: NAKACK2.java

Content: 

protected void retransmit(long first_seqno,long last_seqno,final Address sender,boolean multicast_xmit_request){

  SeqnoList list=new SeqnoList((int)(last_seqno - first_seqno + 1),first_seqno).add(first_seqno,last_seqno);

  retransmit(list,sender,multicast_xmit_request);

}

Location: NAKACK2.java

Content: 

protected void retransmit(SeqnoList missing_msgs,final Address sender,boolean multicast_xmit_request){

  Address dest=(multicast_xmit_request || this.use_mcast_xmit_req) ? null : sender;

  if (xmit_from_random_member && !local_addr.equals(sender)) {

    Address random_member=Util.pickRandomElement(members);

    if (random_member != null && !local_addr.equals(random_member))     dest=random_member;

  }

  Message retransmit_msg=new Message(dest).setBuffer(Util.streamableToBuffer(missing_msgs)).setFlag(Message.Flag.OOB,Message.Flag.INTERNAL).putHeader(this.id,NakAckHeader2.createXmitRequestHeader(sender));

  log.trace("%s --> %s: XMIT_REQ(%s)",local_addr,dest,missing_msgs);

  down_prot.down(retransmit_msg);

  if (stats)   xmit_reqs_sent.add(missing_msgs.size());

}

Location: NAKACK2.java

Content: 

/** 

 * Sends a message msg to the requester. We have to wrap the original message into a retransmit message, as we need to preserve the original message's properties, such as src, headers etc.

 * @param dest

 * @param msg

 */

protected void sendXmitRsp(Address dest,Message msg){

  if (msg == null)   return;

  if (stats)   xmit_rsps_sent.increment();

  if (msg.getSrc() == null)   msg.setSrc(local_addr);

  if (use_mcast_xmit) {

    down_prot.down(msg);

    return;

  }

  Message xmit_msg=msg.copy(true,true).dest(dest);

  NakAckHeader2 hdr=xmit_msg.getHeader(id);

  NakAckHeader2 newhdr=hdr.copy();

  newhdr.type=NakAckHeader2.XMIT_RSP;

  xmit_msg.putHeader(id,newhdr);

  down_prot.down(xmit_msg);

}

Location: NAKACK2.java

Content: 

/** 

 * Adds the message to the sent_msgs table and then passes it down the stack. Change Bela Ban May 26 2002: we don't store a copy of the message, but a reference ! This saves us a lot of memory. However, this also means that a message should not be changed after storing it in the sent-table ! See protocols/DESIGN for details. Made seqno increment and adding to sent_msgs atomic, e.g. seqno won't get incremented if adding to sent_msgs fails e.g. due to an OOM (see http://jira.jboss.com/jira/browse/JGRP-179). bela Jan 13 2006

 */

protected void send(Message msg){

  if (!running) {

    log.trace("%s: discarded message as we're not in the 'running' state, message: %s",local_addr,msg);

    return;

  }

  long msg_id;

  Table<Message> buf=xmit_table.get(local_addr);

  if (buf == null)   return;

  if (msg.src() == null)   msg.src(local_addr);

  boolean dont_loopback_set=msg.isTransientFlagSet(Message.TransientFlag.DONT_LOOPBACK);

  msg_id=seqno.incrementAndGet();

  long sleep=10;

  do {

    try {

      msg.putHeader(this.id,NakAckHeader2.createMessageHeader(msg_id));

      buf.add(msg_id,msg,dont_loopback_set ? dont_loopback_filter : null);

      break;

    }

 catch (    Throwable t) {

      if (running) {

        Util.sleep(sleep);

        sleep=Math.min(5000,sleep * 2);

      }

    }

  }

 while (running);

  if (is_trace)   log.trace("%s --> [all]: #%d",local_addr,msg_id);

  down_prot.down(msg);

  num_messages_sent++;

  if (resend_last_seqno && last_seqno_resender != null)   last_seqno_resender.skipNext();

}

Location: NAKACK2.java

Content: 

/** 

 * Sets or merges the digest. If there is no entry for a given member in xmit_table, create a new buffer. Else skip the existing entry, unless it is a merge. In this case, skip the existing entry if its seqno is greater than or equal to the one in the digest, or reset the window and create a new one if not.

 * @param digest The digest

 * @param merge Whether to merge the new digest with our own, or not

 */

protected void setDigest(Digest digest,boolean merge){

  if (digest == null)   return;

  StringBuilder sb=log.isDebugEnabled() ? new StringBuilder("\n[" + local_addr + (merge ? " mergeDigest()]\n" : " setDigest()]\n")).append("existing digest:  " + getDigest()).append("\nnew digest:       " + digest) : null;

  boolean set_own_seqno=false;

  for (  Digest.Entry entry : digest) {

    Address member=entry.getMember();

    if (member == null)     continue;

    long highest_delivered_seqno=entry.getHighestDeliveredSeqno();

    Table<Message> buf=xmit_table.get(member);

    if (buf != null) {

      if (!merge || (Objects.equals(local_addr,member)) || buf.getHighestDelivered() >= highest_delivered_seqno)       continue;

      xmit_table.remove(member);

      if (member.equals(local_addr)) {

        seqno.set(highest_delivered_seqno);

        set_own_seqno=true;

      }

    }

    buf=createTable(highest_delivered_seqno);

    xmit_table.put(member,buf);

  }

  if (sb != null) {

    sb.append("\n").append("resulting digest: " + getDigest().toString(digest));

    if (set_own_seqno)     sb.append("\nnew seqno for " + local_addr + ": "+ seqno);

    digest_history.add(sb.toString());

    log.debug(sb.toString());

  }

}

Location: NAKACK2.java

Content: 

public void setDiscardDeliveredMsgs(boolean discard_delivered_msgs){

  this.discard_delivered_msgs=discard_delivered_msgs;

}

Location: NAKACK2.java

Content: 

public NAKACK2 setLogDiscardMessages(boolean flag){

  log_discard_msgs=flag;

  return this;

}

Location: NAKACK2.java

Content: 

public NAKACK2 setLogNotFoundMessages(boolean flag){

  log_not_found_msgs=flag;

  return this;

}

Location: NAKACK2.java

Content: 

public NAKACK2 setResendLastSeqnoMaxTimes(int n){

  this.resend_last_seqno_max_times=n;

  return this;

}

Location: NAKACK2.java

Content: 

@ManagedAttribute public void setResendLastSeqno(boolean flag){

  if (resend_last_seqno != flag)   resend_last_seqno=flag;

  if (resend_last_seqno) {

    if (last_seqno_resender == null)     last_seqno_resender=new LastSeqnoResender();

  }

 else {

    if (last_seqno_resender != null)     last_seqno_resender=null;

  }

}

Location: NAKACK2.java

Content: 

/** 

 * Only used for unit tests, don't use ! 

 */

public void setTimer(TimeScheduler timer){

  this.timer=timer;

}

Location: NAKACK2.java

Content: 

public NAKACK2 setUseMcastXmitReq(boolean flag){

  this.use_mcast_xmit_req=flag;

  return this;

}

Location: NAKACK2.java

Content: 

public NAKACK2 setUseMcastXmit(boolean use_mcast_xmit){

  this.use_mcast_xmit=use_mcast_xmit;

  return this;

}

Location: NAKACK2.java

Content: 

public NAKACK2 setXmitFromRandomMember(boolean xmit_from_random_member){

  this.xmit_from_random_member=xmit_from_random_member;

  return this;

}

Location: NAKACK2.java

Content: 

protected static long sizeOfAllMessages(Table<Message> buf,boolean include_headers){

  return buf.stream().reduce(0L,(size,el) -> {

    if (el == null)     return size;

 else     return size + (include_headers ? el.size() : el.getLength());

  }

,(l,r) -> l);

}

Location: NAKACK2.java

Content: 

/** 

 * Garbage collect messages that have been seen by all members. Update sent_msgs: for the sender P in the digest which is equal to the local address, garbage collect all messages <= seqno at digest[P]. Update xmit_table: for each sender P in the digest and its highest seqno seen SEQ, garbage collect all delivered_msgs in the retransmit buffer corresponding to P which are <= seqno at digest[P].

 */

protected void stable(Digest digest){

  if (members == null || local_addr == null || digest == null)   return;

  log.trace("%s: received stable digest %s",local_addr,digest);

  stability_msgs.add(digest.toString());

  for (  Digest.Entry entry : digest) {

    Address member=entry.getMember();

    if (member == null)     continue;

    long hd=entry.getHighestDeliveredSeqno();

    long hr=entry.getHighestReceivedSeqno();

    Table<Message> buf=xmit_table.get(member);

    if (buf != null) {

      long my_hr=buf.getHighestReceived();

      if (hr >= 0 && hr > my_hr) {

        log.trace("%s: my_highest_rcvd (%d) < stability_highest_rcvd (%d): requesting retransmission of %s",local_addr,my_hr,hr,member + "#" + hr);

        retransmit(hr,hr,member);

      }

    }

    if (hd >= 0 && buf != null) {

      log.trace("%s: deleting msgs <= %s from %s",local_addr,hd,member);

      buf.purge(hd);

    }

  }

}

Location: NAKACK2.java

Content: 

protected void startRetransmitTask(){

  if (xmit_task == null || xmit_task.isDone())   xmit_task=timer.scheduleWithFixedDelay(new RetransmitTask(),0,xmit_interval,TimeUnit.MILLISECONDS,sends_can_block);

}

Location: NAKACK2.java

Content: 

protected void stopRetransmitTask(){

  if (xmit_task != null) {

    xmit_task.cancel(true);

    xmit_task=null;

  }

}

Location: NAKACK2.java

Content: 

@ManagedOperation(description="Triggers the retransmission task, asking all senders for missing messages") public void triggerXmit(){

  SeqnoList missing;

  for (  Map.Entry<Address,Table<Message>> entry : xmit_table.entrySet()) {

    Address target=entry.getKey();

    Table<Message> buf=entry.getValue();

    if (buf != null && buf.getNumMissing() > 0 && (missing=buf.getMissing(max_xmit_req_size)) != null) {

      long highest=missing.getLast();

      Long prev_seqno=xmit_task_map.get(target);

      if (prev_seqno == null) {

        xmit_task_map.put(target,highest);

      }

 else {

        missing.removeHigherThan(prev_seqno);

        if (highest > prev_seqno)         xmit_task_map.put(target,highest);

        if (!missing.isEmpty())         retransmit(missing,target,false);

      }

    }

 else     if (!xmit_task_map.isEmpty())     xmit_task_map.remove(target);

  }

  if (resend_last_seqno && last_seqno_resender != null)   last_seqno_resender.execute(seqno.get());

}

Location: NAKACK2.java

Content: 

protected void unknownMember(Address sender,Object message){

  if (leaving)   return;

  if (log_discard_msgs && log.isWarnEnabled()) {

    if (suppress_log_non_member != null)     suppress_log_non_member.log(SuppressLog.Level.warn,sender,suppress_time_non_member_warnings,local_addr,message,sender,view);

 else     log.warn(Util.getMessage("MsgDroppedNak"),local_addr,message,sender,view);

  }

}

