Location: ClientGmsImpl.java

Content: 

void becomeSingletonMember(Address mbr){

  View new_view=View.create(mbr,0,mbr);

  Digest initial_digest=new Digest(mbr,0,0);

  gms.installView(new_view,initial_digest);

  gms.becomeCoordinator();

  gms.getUpProtocol().up(new Event(Event.BECOME_SERVER));

  gms.getDownProtocol().down(new Event(Event.BECOME_SERVER));

  log.debug("%s: created cluster (first member). My view is %s, impl is %s",gms.getLocalAddress(),gms.getViewId(),gms.getImpl().getClass().getName());

}

Location: ClientGmsImpl.java

Content: 

public ClientGmsImpl(GMS g){

  super(g);

}

Location: ClientGmsImpl.java

Content: 

/** 

 * Handles the case where no coord responses were received. Returns true if we became the coord (caller needs to terminate the join() call), or false when the caller needs to continue 

 */

protected boolean firstOfAllClients(final Address joiner,final Responses rsps){

  log.trace("%s: could not determine coordinator from rsps %s",gms.local_addr,rsps);

  SortedSet<Address> clients=new TreeSet<>();

  clients.add(joiner);

  for (  PingData response : rsps)   clients.add(response.getAddress());

  log.trace("%s: nodes to choose new coord from are: %s",gms.local_addr,clients);

  Address new_coord=clients.first();

  if (new_coord.equals(joiner)) {

    log.trace("%s: I (%s) am the first of the nodes, will become coordinator",gms.local_addr,joiner);

    becomeSingletonMember(joiner);

    return true;

  }

  log.trace("%s: I (%s) am not the first of the nodes, waiting for another client to become coordinator",gms.local_addr,joiner);

  return false;

}

Location: ClientGmsImpl.java

Content: 

/** 

 * Returns all members whose PingData is flagged as coordinator 

 */

private static List<Address> getCoords(Iterable<PingData> mbrs){

  if (mbrs == null)   return null;

  List<Address> coords=null;

  for (  PingData mbr : mbrs) {

    if (mbr.isCoord()) {

      if (coords == null)       coords=new ArrayList<>();

      if (!coords.contains(mbr.getAddress()))       coords.add(mbr.getAddress());

    }

  }

  return coords;

}

Location: ClientGmsImpl.java

Content: 

public void handleJoinResponse(JoinRsp join_rsp){

  join_promise.setResult(join_rsp);

}

Location: ClientGmsImpl.java

Content: 

protected boolean installViewIfValidJoinRsp(final Promise<JoinRsp> join_promise,boolean block_for_rsp){

  boolean success=false;

  JoinRsp rsp=null;

  try {

    if (join_promise.hasResult())     rsp=join_promise.getResult(1,true);

 else     if (block_for_rsp)     rsp=join_promise.getResult(gms.join_timeout,true);

    return success=rsp != null && isJoinResponseValid(rsp) && installView(rsp.getView(),rsp.getDigest());

  }

  finally {

    if (success)     gms.sendViewAck(rsp.getView().getCreator());

  }

}

Location: ClientGmsImpl.java

Content: 

/** 

 * Called by join(). Installs the view returned by calling Coord.handleJoin() and becomes coordinator.

 */

private boolean installView(View new_view,Digest digest){

  if (!new_view.containsMember(gms.local_addr)) {

    log.error("%s: I'm not member of %s, will not install view",gms.local_addr,new_view);

    return false;

  }

  gms.installView(new_view,digest);

  if (gms.impl == null || gms.impl instanceof ClientGmsImpl)   gms.becomeParticipant();

  gms.getUpProtocol().up(new Event(Event.BECOME_SERVER));

  gms.getDownProtocol().down(new Event(Event.BECOME_SERVER));

  return true;

}

Location: ClientGmsImpl.java

Content: 

protected boolean isJoinResponseValid(final JoinRsp rsp){

  if (rsp.getFailReason() != null)   throw new SecurityException(rsp.getFailReason());

  Digest tmp_digest=rsp.getDigest();

  if (tmp_digest == null || tmp_digest.capacity() == 0) {

    log.warn("%s: digest is empty: digest=%s",gms.local_addr,rsp.getDigest());

    return false;

  }

  if (!tmp_digest.contains(gms.local_addr)) {

    log.error("%s: digest in JOIN_RSP does not contain myself; join response: %s",gms.local_addr,rsp);

    return false;

  }

  if (rsp.getView() == null) {

    log.error("%s: JoinRsp has a null view, skipping it",gms.local_addr);

    return false;

  }

  return true;

}

Location: ClientGmsImpl.java

Content: 

/** 

 * Joins this process to a group. Determines the coordinator and sends a unicast handleJoin() message to it. The coordinator returns a JoinRsp and then broadcasts the new view, which contains a message digest and the current membership (including the joiner). The joiner is then supposed to install the new view and the digest and starts accepting mcast messages. Previous mcast messages were discarded (this is done in PBCAST). <p> If successful, impl is changed to an instance of ParticipantGmsImpl. Otherwise, we continue trying to send join() messages to the coordinator, until we succeed (or there is no member in the group. In this case, we create our own singleton group).

 * @param mbr Our own address (assigned through SET_LOCAL_ADDRESS)

 */

protected void joinInternal(Address mbr,boolean joinWithStateTransfer,boolean useFlushIfPresent){

  long join_attempts=0;

  gms.setLeaving(false);

  join_promise.reset();

  while (!gms.isLeaving()) {

    if (installViewIfValidJoinRsp(join_promise,false))     return;

    long start=System.currentTimeMillis();

    Responses responses=(Responses)gms.getDownProtocol().down(new Event(Event.FIND_INITIAL_MBRS,gms.getJoinTimeout()));

    if (installViewIfValidJoinRsp(join_promise,false))     return;

    responses.waitFor(gms.join_timeout);

    responses.done();

    long diff=System.currentTimeMillis() - start;

    if (responses.isEmpty()) {

      log.info("%s: no members discovered after %d ms: creating cluster as first member",gms.local_addr,diff);

      becomeSingletonMember(mbr);

      return;

    }

    log.trace("%s: discovery took %d ms, members: %s",gms.local_addr,diff,responses);

    List<Address> coords=getCoords(responses);

    if (coords == null) {

      if (firstOfAllClients(mbr,responses))       return;

    }

 else {

      if (coords.size() > 1) {

        log.debug("%s: found multiple coords: %s",gms.local_addr,coords);

        Collections.shuffle(coords);

      }

      for (      Address coord : coords) {

        log.debug("%s: sending JOIN(%s) to %s",gms.local_addr,mbr,coord);

        sendJoinMessage(coord,mbr,joinWithStateTransfer,useFlushIfPresent);

        if (installViewIfValidJoinRsp(join_promise,true))         return;

        log.warn("%s: JOIN(%s) sent to %s timed out (after %d ms), on try %d",gms.local_addr,mbr,coord,gms.join_timeout,join_attempts);

      }

    }

    if (gms.max_join_attempts > 0 && ++join_attempts >= gms.max_join_attempts) {

      log.warn("%s: too many JOIN attempts (%d): becoming singleton",gms.local_addr,join_attempts);

      becomeSingletonMember(mbr);

      return;

    }

  }

}

Location: ClientGmsImpl.java

Content: 

public void joinWithStateTransfer(Address local_addr,boolean useFlushIfPresent){

  joinInternal(local_addr,true,useFlushIfPresent);

}

Location: ClientGmsImpl.java

Content: 

public void join(Address address,boolean useFlushIfPresent){

  joinInternal(address,false,useFlushIfPresent);

}

Location: ClientGmsImpl.java

Content: 

public void leave(Address mbr){

  gms.setLeaving(true);

  wrongMethod("leave");

}

Location: ClientGmsImpl.java

Content: 

void sendJoinMessage(Address coord,Address mbr,boolean joinWithTransfer,boolean useFlushIfPresent){

  byte type=joinWithTransfer ? GMS.GmsHeader.JOIN_REQ_WITH_STATE_TRANSFER : GMS.GmsHeader.JOIN_REQ;

  GMS.GmsHeader hdr=new GMS.GmsHeader(type,mbr,useFlushIfPresent);

  Message msg=new Message(coord).setFlag(Message.Flag.OOB,Message.Flag.INTERNAL).putHeader(gms.getId(),hdr);

  gms.getDownProtocol().down(msg);

}

