Location: CoordGmsImpl.java

Content: 

public CoordGmsImpl(GMS g){

  super(g);

}

Location: CoordGmsImpl.java

Content: 

public void handleCoordLeave(Address mbr){

  gms.setLeaving(true);

  gms.suspendViewHandler();

  Address next_coord=gms.determineNextCoordinator();

  if (next_coord == null || sendLeaveReqToCoord(next_coord)) {

    if (next_coord == null)     log.trace("%s: no next-in-line coord found to send LEAVE req to; terminating",gms.getLocalAddress());

    gms.getLeavePromise().setResult(null);

    gms.initState();

  }

}

Location: CoordGmsImpl.java

Content: 

public void handleMembershipChange(Collection<Request> requests){

  boolean joinAndStateTransferInitiated=false;

  boolean useFlushIfPresent=gms.use_flush_if_present;

  Collection<Address> new_mbrs=new LinkedHashSet<>(requests.size());

  Collection<Address> suspected_mbrs=new LinkedHashSet<>(requests.size());

  Collection<Address> leaving_mbrs=new LinkedHashSet<>(requests.size());

  log.trace("%s: handleMembershipChange(%s)",gms.getLocalAddress(),requests);

  boolean self_leaving=false;

  for (  Request req : requests) {

switch (req.type) {

case Request.JOIN:

      new_mbrs.add(req.mbr);

    if (req.useFlushIfPresent)     useFlushIfPresent=true;

  break;

case Request.JOIN_WITH_STATE_TRANSFER:

new_mbrs.add(req.mbr);

joinAndStateTransferInitiated=true;

if (req.useFlushIfPresent) useFlushIfPresent=true;

break;

case Request.LEAVE:

leaving_mbrs.add(req.mbr);

if (Objects.equals(gms.local_addr,req.mbr)) self_leaving=true;

break;

case Request.SUSPECT:

suspected_mbrs.add(req.mbr);

break;

}

}

new_mbrs.remove(gms.local_addr);

if (gms.getViewId() == null) {

log.debug("gms.view_id is null, I'm not the coordinator anymore (leaving=%b); " + "the new coordinator will handle the leave request",self_leaving);

return;

}

List<Address> current_members=gms.members.getMembers();

leaving_mbrs.retainAll(current_members);

if (suspected_mbrs.remove(gms.local_addr)) log.warn("I am the coord and I'm being suspected -- will probably leave shortly");

suspected_mbrs.retainAll(current_members);

for (Iterator<Address> it=new_mbrs.iterator(); it.hasNext(); ) {

Address mbr=it.next();

if (gms.members.contains(mbr)) {

log.trace("%s: %s already present; returning existing view %s",gms.local_addr,mbr,gms.view);

Tuple<View,Digest> tuple=gms.getViewAndDigest();

if (tuple != null) gms.sendJoinResponse(new JoinRsp(tuple.getVal1(),tuple.getVal2()),mbr);

 else log.warn("%s: did not find a digest matching view %s; dropping JOIN-RSP",gms.local_addr,gms.view);

it.remove();

}

}

if (new_mbrs.isEmpty() && leaving_mbrs.isEmpty() && suspected_mbrs.isEmpty()) {

log.trace("%s: found no members to add or remove, will not create new view",gms.local_addr);

return;

}

View new_view=gms.getNextView(new_mbrs,leaving_mbrs,suspected_mbrs);

if (new_view.size() == 0 && gms.local_addr != null && gms.local_addr.equals(new_view.getCreator())) {

if (self_leaving) gms.initState();

return;

}

log.trace("%s: joiners=%s, suspected=%s, leaving=%s, new view: %s",gms.local_addr,new_mbrs,suspected_mbrs,leaving_mbrs,new_view);

JoinRsp join_rsp=null;

boolean hasJoiningMembers=!new_mbrs.isEmpty();

try {

boolean successfulFlush=!useFlushIfPresent || !gms.flushProtocolInStack || gms.startFlush(new_view);

if (!successfulFlush && hasJoiningMembers) {

sendLeaveResponses(leaving_mbrs);

return;

}

if (hasJoiningMembers) {

gms.getDownProtocol().down(new Event(Event.SUSPEND_STABLE,MAX_SUSPEND_TIMEOUT));

MutableDigest join_digest=new MutableDigest(new_view.getMembersRaw()).set(gms.getDigest());

for (Address member : new_mbrs) join_digest.set(member,0,0);

if (join_digest.allSet() || join_digest.set(gms.getDigest()).allSet()) join_rsp=new JoinRsp(new_view,join_digest);

 else log.warn("%s: digest does not match view (missing seqnos for %s); dropping JOIN-RSP",gms.local_addr,Arrays.toString(join_digest.getNonSetMembers()));

}

sendLeaveResponses(leaving_mbrs);

gms.castViewChangeAndSendJoinRsps(new_view,null,new_view.getMembers(),new_mbrs,join_rsp);

}

  finally {

if (hasJoiningMembers) gms.getDownProtocol().down(new Event(Event.RESUME_STABLE));

if (!joinAndStateTransferInitiated && useFlushIfPresent) gms.stopFlush();

}

}

Location: CoordGmsImpl.java

Content: 

private void sendLeaveResponses(Collection<Address> leaving_members){

  for (  Address address : leaving_members) {

    Message msg=new Message(address).setFlag(Message.Flag.OOB,Message.Flag.INTERNAL,Message.Flag.NO_RELIABILITY).putHeader(gms.getId(),new GMS.GmsHeader(GMS.GmsHeader.LEAVE_RSP));

    log.trace("%s: sending LEAVE response to %s",gms.local_addr,address);

    gms.getDownProtocol().down(msg);

  }

}

