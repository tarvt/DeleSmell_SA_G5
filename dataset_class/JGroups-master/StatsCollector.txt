Location: StatsCollector.java

Content: 

public void addAnycastSentDuration(long duration,int numberOfUnicasts){

  if (!shouldCollectStats(duration)) {

    return;

  }

  counters.get(StatsCollector.Counter.UNICAST_MESSAGE_SENT).addAndGet(numberOfUnicasts);

  counters.get(Counter.ANYCAST_MESSAGE_SENT).incrementAndGet();

  durations.get(Duration.ANYCAST_MESSAGE_SENT).addAndGet(duration);

}

Location: StatsCollector.java

Content: 

public void addDataMessageDuration(long duration){

  if (!shouldCollectStats(duration)) {

    return;

  }

  counters.get(Counter.DATA_MESSAGE_RECEIVED).incrementAndGet();

  durations.get(Duration.DATA_MESSAGE).addAndGet(duration);

}

Location: StatsCollector.java

Content: 

public void addFinalSequenceNumberDuration(long duration){

  if (!shouldCollectStats(duration)) {

    return;

  }

  counters.get(Counter.FINAL_MESSAGE_RECEIVED).incrementAndGet();

  durations.get(Duration.FINAL_MESSAGE).addAndGet(duration);

}

Location: StatsCollector.java

Content: 

public void addProposeSequenceNumberDuration(long durationValue,boolean isLastProposeMessage){

  if (!shouldCollectStats(durationValue)) {

    return;

  }

  Counter counter=isLastProposeMessage ? Counter.LAST_PROPOSE_MESSAGE_RECEIVED : Counter.PROPOSE_MESSAGE_RECEIVED;

  Duration duration=isLastProposeMessage ? Duration.LAST_PROPOSE_MESSAGE : Duration.PROPOSE_MESSAGE;

  counters.get(counter).incrementAndGet();

  durations.get(duration).addAndGet(durationValue);

}

Location: StatsCollector.java

Content: 

public void clearStats(){

  for (  AtomicInteger counter : counters.values()) {

    counter.set(0);

  }

  for (  AtomicLong duration : durations.values()) {

    duration.set(0);

  }

}

Location: StatsCollector.java

Content: 

private static double convertNanosToMillis(long nanos){

  return nanos / 1000000.0;

}

Location: StatsCollector.java

Content: 

public int getAnycastDelivered(){

  return counters.get(Counter.ANYCAST_MESSAGE_DELIVERED).get();

}

Location: StatsCollector.java

Content: 

public double getAvgAnycastSentDuration(){

  int count=counters.get(Counter.ANYCAST_MESSAGE_SENT).get();

  if (count > 0) {

    long dur=durations.get(Duration.ANYCAST_MESSAGE_SENT).get();

    return convertNanosToMillis(dur) / count;

  }

  return 0D;

}

Location: StatsCollector.java

Content: 

public double getAvgProposeMesageReceivedDuration(){

  int count=counters.get(Counter.PROPOSE_MESSAGE_RECEIVED).get();

  if (count > 0) {

    long dur=durations.get(Duration.PROPOSE_MESSAGE).get();

    return convertNanosToMillis(dur) / count;

  }

  return 0D;

}

Location: StatsCollector.java

Content: 

public int getNumberOfFinalAnycastsSent(){

  return counters.get(Counter.LAST_PROPOSE_MESSAGE_RECEIVED).get();

}

Location: StatsCollector.java

Content: 

public int getNumberOfProposeMessagesReceived(){

  return counters.get(Counter.PROPOSE_MESSAGE_RECEIVED).get() + counters.get(Counter.LAST_PROPOSE_MESSAGE_RECEIVED).get();

}

Location: StatsCollector.java

Content: 

public int getNumberOfProposeMessagesSent(){

  return counters.get(Counter.DATA_MESSAGE_RECEIVED).get();

}

Location: StatsCollector.java

Content: 

public void incrementMessageDeliver(){

  if (!shouldCollectStats()) {

    return;

  }

  counters.get(Counter.ANYCAST_MESSAGE_DELIVERED).incrementAndGet();

}

Location: StatsCollector.java

Content: 

public long now(){

  return statsEnabled ? System.nanoTime() : -1;

}

Location: StatsCollector.java

Content: 

public void setStatsEnabled(boolean statsEnabled){

  this.statsEnabled=statsEnabled;

}

Location: StatsCollector.java

Content: 

private boolean shouldCollectStats(long... values){

  if (!statsEnabled) {

    return false;

  }

  for (  long value : values) {

    if (value < 0) {

      return false;

    }

  }

  return true;

}

Location: StatsCollector.java

Content: 

public StatsCollector(){

  counters=new EnumMap<>(Counter.class);

  durations=new EnumMap<>(Duration.class);

  for (  Counter counter : Counter.values()) {

    counters.put(counter,new AtomicInteger(0));

  }

  for (  Duration duration : Duration.values()) {

    durations.put(duration,new AtomicLong(0));

  }

}

