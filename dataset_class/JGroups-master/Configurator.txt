Location: Configurator.java

Content: 

/** 

 * DFS of dependency graph formed by Property annotations and dependsUpon parameter This is used to create a list of Properties in dependency order

 */

static void addPropertyToDependencyList(List<AccessibleObject> orderedList,Map<String,AccessibleObject> props,Stack<AccessibleObject> stack,AccessibleObject obj){

  if (orderedList.contains(obj))   return;

  if (stack.search(obj) > 0)   throw new RuntimeException("Deadlock in @Property dependency processing");

  stack.push(obj);

  Property annotation=obj.getAnnotation(Property.class);

  String dependsClause=annotation.dependsUpon();

  StringTokenizer st=new StringTokenizer(dependsClause,",");

  while (st.hasMoreTokens()) {

    String token=st.nextToken().trim();

    AccessibleObject dep=props.get(token);

    addPropertyToDependencyList(orderedList,props,stack,dep);

  }

  stack.pop();

  orderedList.add(obj);

}

Location: Configurator.java

Content: 

static void checkDependencyReferencesPresent(List<AccessibleObject> objects,Map<String,AccessibleObject> props){

  for (int i=0; i < objects.size(); i++) {

    AccessibleObject ao=objects.get(i);

    Property annotation=ao.getAnnotation(Property.class);

    if (annotation == null) {

      throw new IllegalArgumentException("@Property annotation is required for checking dependencies;" + " annotation is missing for Field/Method " + ao.toString());

    }

    String dependsClause=annotation.dependsUpon();

    if (dependsClause.trim().isEmpty())     continue;

    StringTokenizer st=new StringTokenizer(dependsClause,",");

    while (st.hasMoreTokens()) {

      String token=st.nextToken().trim();

      boolean found=false;

      Set<String> keyset=props.keySet();

      for (Iterator<String> iter=keyset.iterator(); iter.hasNext(); ) {

        if (iter.next().equals(token)) {

          found=true;

          break;

        }

      }

      if (!found)       throw new IllegalArgumentException("@Property annotation " + annotation.name() + " has an unresolved dependsUpon property: "+ token);

    }

  }

}

Location: Configurator.java

Content: 

/** 

 * This method creates a list of all properties (field or method) in dependency order, where dependencies are specified using the dependsUpon specifier of the Property annotation. In particular, it does the following: (i) creates a master list of properties (ii) checks that all dependency references are present (iii) creates a copy of the master list in dependency order

 */

static AccessibleObject[] computePropertyDependencies(Object obj,Map<String,String> properties){

  List<AccessibleObject> unorderedFieldsAndMethods=new LinkedList<>();

  List<AccessibleObject> orderedFieldsAndMethods=new LinkedList<>();

  Map<String,AccessibleObject> propertiesInventory=new HashMap<>();

  Method[] methods=obj.getClass().getMethods();

  for (int i=0; i < methods.length; i++) {

    if (methods[i].isAnnotationPresent(Property.class) && isSetPropertyMethod(methods[i],obj.getClass())) {

      String propertyName=PropertyHelper.getPropertyName(methods[i]);

      unorderedFieldsAndMethods.add(methods[i]);

      propertiesInventory.put(propertyName,methods[i]);

    }

  }

  for (Class<?> clazz=obj.getClass(); clazz != null; clazz=clazz.getSuperclass()) {

    Field[] fields=clazz.getDeclaredFields();

    for (int i=0; i < fields.length; i++) {

      if (fields[i].isAnnotationPresent(Property.class)) {

        String propertyName=PropertyHelper.getPropertyName(fields[i],properties);

        unorderedFieldsAndMethods.add(fields[i]);

        propertiesInventory.put(propertyName,fields[i]);

      }

    }

  }

  checkDependencyReferencesPresent(unorderedFieldsAndMethods,propertiesInventory);

  orderedFieldsAndMethods=orderFieldsAndMethodsByDependency(unorderedFieldsAndMethods,propertiesInventory);

  AccessibleObject[] result=new AccessibleObject[orderedFieldsAndMethods.size()];

  for (int i=0; i < orderedFieldsAndMethods.size(); i++)   result[i]=orderedFieldsAndMethods.get(i);

  return result;

}

Location: Configurator.java

Content: 

public Configurator(){

  stack=null;

}

Location: Configurator.java

Content: 

public Configurator(ProtocolStack protocolStack){

  stack=protocolStack;

}

Location: Configurator.java

Content: 

/** 

 * Creates a protocol stack by iterating through the protocol list and connecting adjacent layers. The list starts with the topmost layer and has the bottommost layer at the tail.

 * @param protocol_list List of Protocol elements (from top to bottom)

 * @return Protocol stack

 */

public static Protocol connectProtocols(List<Protocol> protocol_list) throws Exception {

  Protocol current_layer=null, next_layer=null;

  for (int i=0; i < protocol_list.size(); i++) {

    current_layer=protocol_list.get(i);

    if (i + 1 >= protocol_list.size())     break;

    next_layer=protocol_list.get(i + 1);

    next_layer.setDownProtocol(current_layer);

    current_layer.setUpProtocol(next_layer);

  }

  sanityCheck(protocol_list);

  return current_layer;

}

Location: Configurator.java

Content: 

public static Map<String,Map<String,InetAddressInfo>> createInetAddressMap(List<ProtocolConfiguration> protocol_configs,List<Protocol> protocols) throws Exception {

  Map<String,Map<String,InetAddressInfo>> inetAddressMap=new HashMap<>();

  for (int i=0; i < protocol_configs.size(); i++) {

    ProtocolConfiguration protocol_config=protocol_configs.get(i);

    Protocol protocol=protocols.get(i);

    String protocolName=protocol.getName();

    Map<String,String> properties=new HashMap<>(protocol_config.getProperties());

    Method[] methods=Util.getAllDeclaredMethodsWithAnnotations(protocol.getClass(),Property.class);

    for (int j=0; j < methods.length; j++) {

      if (isSetPropertyMethod(methods[j],protocol.getClass())) {

        String propertyName=PropertyHelper.getPropertyName(methods[j]);

        String propertyValue=properties.get(propertyName);

        String tmp=grabSystemProp(methods[j].getAnnotation(Property.class));

        if (tmp != null)         propertyValue=tmp;

        if (propertyValue != null && InetAddressInfo.isInetAddressRelated(methods[j])) {

          Object converted=null;

          try {

            converted=PropertyHelper.getConvertedValue(protocol,methods[j],properties,propertyValue,false,Util.getIpStackType());

          }

 catch (          Exception e) {

            throw new Exception("string could not be converted for method " + propertyName + " in "+ protocolName+ " with default value "+ propertyValue+ ".Exception is "+ e,e);

          }

          InetAddressInfo inetinfo=new InetAddressInfo(protocol,methods[j],properties,propertyValue,converted);

          Map<String,InetAddressInfo> m=inetAddressMap.computeIfAbsent(protocolName,k -> new HashMap<>());

          m.put(propertyName,inetinfo);

        }

      }

    }

    Field[] fields=Util.getAllDeclaredFieldsWithAnnotations(protocol.getClass(),Property.class);

    for (int j=0; j < fields.length; j++) {

      String propertyName=PropertyHelper.getPropertyName(fields[j],properties);

      String propertyValue=properties.get(propertyName);

      String tmp=grabSystemProp(fields[j].getAnnotation(Property.class));

      if (tmp != null)       propertyValue=tmp;

      if ((propertyValue != null || !PropertyHelper.usesDefaultConverter(fields[j])) && InetAddressInfo.isInetAddressRelated(fields[j])) {

        Object converted=null;

        try {

          converted=PropertyHelper.getConvertedValue(protocol,fields[j],properties,propertyValue,false,Util.getIpStackType());

        }

 catch (        Exception e) {

          throw new Exception("string could not be converted for method " + propertyName + " in "+ protocolName+ " with default value "+ propertyValue+ ".Exception is "+ e,e);

        }

        InetAddressInfo inetinfo=new InetAddressInfo(protocol,fields[j],properties,propertyValue,converted);

        Map<String,InetAddressInfo> m=inetAddressMap.computeIfAbsent(protocolName,k -> new HashMap<>());

        m.put(propertyName,inetinfo);

      }

    }

  }

  return inetAddressMap;

}

Location: Configurator.java

Content: 

protected static Protocol createLayer(ProtocolStack stack,ProtocolConfiguration config) throws Exception {

  String protocol_name=config.getProtocolName();

  if (protocol_name == null)   return null;

  String defaultProtocolName=ProtocolConfiguration.protocol_prefix + '.' + protocol_name;

  Class<?> clazz=null;

  try {

    clazz=Util.loadClass(defaultProtocolName,stack != null ? stack.getClass() : null);

  }

 catch (  ClassNotFoundException e) {

  }

  if (clazz == null) {

    try {

      clazz=Util.loadClass(protocol_name,config.getClassLoader());

    }

 catch (    ClassNotFoundException e) {

    }

    if (clazz == null)     throw new Exception(String.format(Util.getMessage("ProtocolLoadError"),protocol_name,defaultProtocolName));

  }

  try {

    Protocol retval=(Protocol)clazz.getDeclaredConstructor().newInstance();

    if (stack != null)     retval.setProtocolStack(stack);

    return retval;

  }

 catch (  InstantiationException inst_ex) {

    throw new InstantiationException(String.format(Util.getMessage("ProtocolCreateError"),protocol_name,inst_ex.getLocalizedMessage()));

  }

}

Location: Configurator.java

Content: 

public static List<Protocol> createProtocolsAndInitializeAttrs(List<ProtocolConfiguration> cfgs,ProtocolStack st) throws Exception {

  List<Protocol> protocols=createProtocols(cfgs,st);

  if (protocols == null)   return null;

  StackType ip_version=Util.getIpStackType();

  Protocol transport=protocols.get(0);

  if (transport instanceof TP) {

    ProtocolConfiguration cfg=cfgs.get(0);

    Field bind_addr_field=Util.getField(transport.getClass(),"bind_addr");

    resolveAndAssignField(transport,bind_addr_field,cfg.getProperties(),ip_version);

    InetAddress resolved_addr=(InetAddress)Util.getField(bind_addr_field,transport);

    if (resolved_addr != null)     ip_version=resolved_addr instanceof Inet6Address ? StackType.IPv6 : StackType.IPv4;

 else     if (ip_version == StackType.Dual)     ip_version=StackType.IPv4;

  }

  for (int i=0; i < cfgs.size(); i++) {

    ProtocolConfiguration config=cfgs.get(i);

    Protocol prot=protocols.get(i);

    initializeAttrs(prot,config,ip_version);

  }

  setDefaultValues(cfgs,protocols,ip_version);

  ensureValidBindAddresses(protocols);

  return protocols;

}

Location: Configurator.java

Content: 

/** 

 * Takes a list of configurations, creates a protocol for each and returns all protocols in a list.

 * @param protocol_configs A list of ProtocolConfigurations

 * @param stack            The protocol stack

 * @return List of Protocols

 */

public static List<Protocol> createProtocols(List<ProtocolConfiguration> protocol_configs,ProtocolStack stack) throws Exception {

  List<Protocol> retval=new LinkedList<>();

  for (int i=0; i < protocol_configs.size(); i++) {

    ProtocolConfiguration protocol_config=protocol_configs.get(i);

    Protocol layer=createLayer(stack,protocol_config);

    if (layer == null)     return null;

    retval.add(layer);

  }

  return retval;

}

Location: Configurator.java

Content: 

public static Protocol createProtocol(String prot_spec,ProtocolStack stack) throws Exception {

  return createProtocol(prot_spec,stack,true);

}

Location: Configurator.java

Content: 

/** 

 * Creates a new protocol given the protocol specification. Initializes the properties and starts the up and down handler threads.

 * @param prot_spec The specification of the protocol. Same convention as for specifying a protocol stack.An exception will be thrown if the class cannot be created. Example: <pre>"VERIFY_SUSPECT(timeout=1500)"</pre> Note that no colons (:) have to be specified

 * @param stack     The protocol stack

 * @return Protocol The newly created protocol

 * @throws Exception Will be thrown when the new protocol cannot be created

 */

public static Protocol createProtocol(String prot_spec,ProtocolStack stack,boolean init_attrs) throws Exception {

  if (prot_spec == null)   throw new Exception("Configurator.createProtocol(): prot_spec is null");

  ProtocolConfiguration config=new ProtocolConfiguration(prot_spec);

  Protocol prot=createLayer(stack,config);

  if (init_attrs)   Configurator.initializeAttrs(prot,config,Util.getIpStackType());

  prot.init();

  return prot;

}

Location: Configurator.java

Content: 

/** 

 * Makes sure that all fields annotated with @LocalAddress is (1) an InetAddress and (2) a valid address on any local network interface

 */

public static void ensureValidBindAddresses(List<Protocol> protocols) throws Exception {

  for (  Protocol protocol : protocols) {

    String protocolName=protocol.getName();

    Field[] fields=Util.getAllDeclaredFieldsWithAnnotations(protocol.getClass(),LocalAddress.class);

    for (int i=0; i < fields.length; i++) {

      Object val=getValueFromProtocol(protocol,fields[i]);

      if (val == null)       continue;

      if (!(val instanceof InetAddress))       throw new Exception("field " + protocolName + "."+ fields[i].getName()+ " is not an InetAddress");

      Util.checkIfValidAddress((InetAddress)val,protocolName);

    }

  }

}

Location: Configurator.java

Content: 

/** 

 * Returns all inet addresses found 

 */

public static Collection<InetAddress> getAddresses(Map<String,Map<String,InetAddressInfo>> map) throws Exception {

  return map.values().stream().flatMap(m -> m.values().stream()).flatMap(i -> i.getInetAddresses().stream()).filter(Objects::nonNull).collect(Collectors.toSet());

}

Location: Configurator.java

Content: 

public static List<InetAddress> getInetAddresses(List<Protocol> protocols) throws Exception {

  List<InetAddress> retval=new LinkedList<>();

  for (  Protocol protocol : protocols) {

    for (Class<?> clazz=protocol.getClass(); clazz != null; clazz=clazz.getSuperclass()) {

      Field[] fields=clazz.getDeclaredFields();

      for (int j=0; j < fields.length; j++) {

        if (fields[j].isAnnotationPresent(Property.class)) {

          if (InetAddressInfo.isInetAddressRelated(fields[j])) {

            Object value=getValueFromProtocol(protocol,fields[j]);

            if (value instanceof InetAddress)             retval.add((InetAddress)value);

 else             if (value instanceof IpAddress)             retval.add(((IpAddress)value).getIpAddress());

 else             if (value instanceof InetSocketAddress)             retval.add(((InetSocketAddress)value).getAddress());

          }

        }

      }

    }

  }

  return retval;

}

Location: Configurator.java

Content: 

public static <T extends Object>T getValueFromProtocol(Protocol protocol,Field field) throws IllegalAccessException {

  if (protocol == null || field == null)   return null;

  if (!Modifier.isPublic(field.getModifiers()))   field.setAccessible(true);

  return (T)field.get(protocol);

}

Location: Configurator.java

Content: 

public static <T extends Object>T getValueFromProtocol(Protocol protocol,String field_name) throws IllegalAccessException {

  if (protocol == null || field_name == null)   return null;

  Field field=Util.getField(protocol.getClass(),field_name);

  return field != null ? getValueFromProtocol(protocol,field) : null;

}

Location: Configurator.java

Content: 

private static String grabSystemProp(Property annotation){

  String[] system_property_names=annotation.systemProperty();

  String retval=null;

  for (  String system_property_name : system_property_names) {

    if (system_property_name != null && !system_property_name.isEmpty()) {

      try {

        retval=System.getProperty(system_property_name);

        if (retval != null)         return retval;

      }

 catch (      SecurityException ex) {

        log.error(Util.getMessage("SyspropFailure"),system_property_name,ex);

      }

      try {

        retval=System.getenv(system_property_name);

        if (retval != null)         return retval;

      }

 catch (      SecurityException ex) {

        log.error(Util.getMessage("SyspropFailure"),system_property_name,ex);

      }

    }

  }

  return retval;

}

Location: Configurator.java

Content: 

/** 

 * Sets the attributes in a given protocol from properties 

 */

public static void initializeAttrs(Protocol prot,ProtocolConfiguration config,StackType ip_version) throws Exception {

  String protocol_name=config.getProtocolName();

  if (protocol_name == null)   return;

  Map<String,String> properties=new HashMap<>(config.getProperties());

  AccessibleObject[] dependencyOrderedFieldsAndMethods=computePropertyDependencies(prot,properties);

  for (  AccessibleObject ordered : dependencyOrderedFieldsAndMethods) {

    if (ordered instanceof Field)     resolveAndAssignField(prot,(Field)ordered,properties,ip_version);

 else     if (ordered instanceof Method)     resolveAndInvokePropertyMethod(prot,(Method)ordered,properties,ip_version);

  }

  List<Object> additional_objects=prot.getConfigurableObjects();

  if (additional_objects != null && !additional_objects.isEmpty()) {

    for (    Object obj : additional_objects) {

      resolveAndAssignFields(obj,properties,ip_version);

      resolveAndInvokePropertyMethods(obj,properties,ip_version);

    }

  }

  if (!properties.isEmpty())   throw new IllegalArgumentException(String.format(Util.getMessage("ConfigurationError"),protocol_name,properties));

  List<Node> subtrees=config.getSubtrees();

  if (subtrees != null) {

    for (    Node node : subtrees)     prot.parse(node);

  }

}

Location: Configurator.java

Content: 

public static boolean isSetPropertyMethod(Method method){

  return (method.getName().startsWith("set") && method.getReturnType() == java.lang.Void.TYPE && method.getParameterTypes().length == 1);

}

Location: Configurator.java

Content: 

public static boolean isSetPropertyMethod(Method method,Class<?> enclosing_clazz){

  return (method.getName().startsWith("set") && (method.getReturnType() == java.lang.Void.TYPE || enclosing_clazz.isAssignableFrom(method.getReturnType())) && method.getParameterTypes().length == 1);

}

Location: Configurator.java

Content: 

static List<AccessibleObject> orderFieldsAndMethodsByDependency(List<AccessibleObject> unorderedList,Map<String,AccessibleObject> propertiesMap){

  Stack<AccessibleObject> stack=new Stack<>();

  List<AccessibleObject> orderedList=new LinkedList<>();

  for (int i=0; i < unorderedList.size(); i++) {

    AccessibleObject obj=unorderedList.get(i);

    addPropertyToDependencyList(orderedList,propertiesMap,stack,obj);

  }

  return orderedList;

}

Location: Configurator.java

Content: 

protected static String printEvents(List<Integer> events){

  return events.stream().map(Event::type2String).collect(Collectors.joining(" ","[","]"));

}

Location: Configurator.java

Content: 

/** 

 * Removes all events provided by the protocol above protocol from events

 * @param protocol

 * @param events

 */

protected static void removeProvidedDownServices(Protocol protocol,List<Integer> events){

  if (protocol == null || events == null)   return;

  for (Protocol prot=protocol.getUpProtocol(); prot != null && !events.isEmpty(); prot=prot.getUpProtocol()) {

    List<Integer> provided_down_services=prot.providedDownServices();

    if (provided_down_services != null && !provided_down_services.isEmpty())     events.removeAll(provided_down_services);

  }

}

Location: Configurator.java

Content: 

/** 

 * Removes all events provided by the protocol below protocol from events

 * @param protocol

 * @param events

 */

protected static void removeProvidedUpServices(Protocol protocol,List<Integer> events){

  if (protocol == null || events == null)   return;

  for (Protocol prot=protocol.getDownProtocol(); prot != null && !events.isEmpty(); prot=prot.getDownProtocol()) {

    List<Integer> provided_up_services=prot.providedUpServices();

    if (provided_up_services != null && !provided_up_services.isEmpty())     events.removeAll(provided_up_services);

  }

}

Location: Configurator.java

Content: 

public static void resolveAndAssignFields(Object obj,Map<String,String> props,StackType ip_version) throws Exception {

  for (Class<?> clazz=obj.getClass(); clazz != null; clazz=clazz.getSuperclass()) {

    Field[] fields=clazz.getDeclaredFields();

    for (    Field field : fields)     resolveAndAssignField(obj,field,props,ip_version);

  }

}

Location: Configurator.java

Content: 

public static void resolveAndAssignField(Object obj,Field field,Map<String,String> props,StackType ip_version) throws Exception {

  Property annotation=field.getAnnotation(Property.class);

  if (annotation != null) {

    String propertyName=PropertyHelper.getPropertyName(field,props);

    String propertyValue=props.get(propertyName);

    if (propertyValue == null) {

      String tmp=grabSystemProp(field.getAnnotation(Property.class));

      if (tmp != null)       propertyValue=tmp;

    }

    if (propertyName != null && propertyValue != null) {

      String deprecated_msg=annotation.deprecatedMessage();

      if (deprecated_msg != null && !deprecated_msg.isEmpty()) {

        log.warn(Util.getMessage("Deprecated"),field.getDeclaringClass().getSimpleName() + "." + field.getName(),deprecated_msg);

      }

    }

    if (propertyValue != null || !PropertyHelper.usesDefaultConverter(field)) {

      Object converted=null;

      try {

        converted=PropertyHelper.getConvertedValue(obj,field,props,propertyValue,true,ip_version);

        if (converted != null)         Util.setField(field,obj,converted);

      }

 catch (      Exception e) {

        String name=obj instanceof Protocol ? ((Protocol)obj).getName() : obj.getClass().getName();

        throw new Exception("Property assignment of " + propertyName + " in "+ name+ " with original property value "+ propertyValue+ " and converted to "+ converted+ " could not be assigned",e);

      }

    }

    props.remove(propertyName);

  }

}

Location: Configurator.java

Content: 

public static void resolveAndInvokePropertyMethods(Object obj,Map<String,String> props,StackType ip_version) throws Exception {

  Method[] methods=obj.getClass().getMethods();

  for (  Method method : methods) {

    resolveAndInvokePropertyMethod(obj,method,props,ip_version);

  }

}

Location: Configurator.java

Content: 

public static void resolveAndInvokePropertyMethod(Object obj,Method method,Map<String,String> props,StackType ip_version) throws Exception {

  String methodName=method.getName();

  Property annotation=method.getAnnotation(Property.class);

  if (annotation != null && isSetPropertyMethod(method,obj.getClass())) {

    String propertyName=PropertyHelper.getPropertyName(method);

    String propertyValue=props.get(propertyName);

    String tmp=grabSystemProp(method.getAnnotation(Property.class));

    if (tmp != null)     propertyValue=tmp;

    if (propertyName != null && propertyValue != null) {

      String deprecated_msg=annotation.deprecatedMessage();

      if (deprecated_msg != null && !deprecated_msg.isEmpty()) {

        log.warn(Util.getMessage("Deprecated"),method.getDeclaringClass().getSimpleName() + "." + methodName,deprecated_msg);

      }

    }

    if (propertyValue != null) {

      Object converted=null;

      try {

        converted=PropertyHelper.getConvertedValue(obj,method,props,propertyValue,true,ip_version);

        method.invoke(obj,converted);

      }

 catch (      Exception e) {

        String name=obj instanceof Protocol ? ((Protocol)obj).getName() : obj.getClass().getName();

        throw new Exception("Could not assign property " + propertyName + " in "+ name+ ", method is "+ methodName+ ", converted value is "+ converted,e);

      }

    }

    props.remove(propertyName);

  }

}

Location: Configurator.java

Content: 

/** 

 * Throws an exception if sanity check fails. Possible sanity check is uniqueness of all protocol names

 */

public static void sanityCheck(List<Protocol> protocols) throws Exception {

  Set<Short> ids=new HashSet<>();

  for (  Protocol protocol : protocols) {

    short id=protocol.getId();

    String name=protocol.getName();

    if (id > 0 && !ids.add(id))     throw new Exception("Protocol ID " + id + " (name="+ name+ ") is duplicate; IDs have to be unique");

  }

  for (  Protocol protocol : protocols) {

    List<Integer> required_down_services=protocol.requiredDownServices();

    List<Integer> required_up_services=protocol.requiredUpServices();

    if (required_down_services != null && !required_down_services.isEmpty()) {

      List<Integer> tmp=new ArrayList<>(required_down_services);

      removeProvidedUpServices(protocol,tmp);

      if (!tmp.isEmpty())       throw new Exception("events " + printEvents(tmp) + " are required by "+ protocol.getName()+ ", but not provided by any of the protocols below it");

    }

    if (required_up_services != null && !required_up_services.isEmpty()) {

      List<Integer> tmp=new ArrayList<>(required_up_services);

      removeProvidedDownServices(protocol,tmp);

      if (!tmp.isEmpty())       throw new Exception("events " + printEvents(tmp) + " are required by "+ protocol.getName()+ ", but not provided by any of the protocols above it");

    }

  }

}

Location: Configurator.java

Content: 

/** 

 * Method which processes @Property.defaultValue() values, associated with the annotation using the defaultValue() annotation. This method does the following: - find all properties which have no user value assigned - if the defaultValue attribute is not "", generate a value for the field using the property converter for that property and assign it to the field

 */

public static void setDefaultValues(List<ProtocolConfiguration> protocol_configs,List<Protocol> protocols,StackType ip_version) throws Exception {

  InetAddress default_ip_address=Util.getNonLoopbackAddress(ip_version);

  if (default_ip_address == null) {

    log.warn(Util.getMessage("OnlyLoopbackFound"),ip_version);

    default_ip_address=Util.getLoopback(ip_version);

  }

  for (int i=0; i < protocol_configs.size(); i++) {

    ProtocolConfiguration protocol_config=protocol_configs.get(i);

    Protocol protocol=protocols.get(i);

    String protocolName=protocol.getName();

    Map<String,String> properties=new HashMap<>(protocol_config.getProperties());

    Method[] methods=Util.getAllDeclaredMethodsWithAnnotations(protocol.getClass(),Property.class);

    for (int j=0; j < methods.length; j++) {

      if (isSetPropertyMethod(methods[j],protocol.getClass())) {

        String propertyName=PropertyHelper.getPropertyName(methods[j]);

        Object propertyValue=getValueFromProtocol(protocol,propertyName);

        if (propertyValue == null) {

          Property annotation=methods[j].getAnnotation(Property.class);

          if (InetAddressInfo.isInetAddressRelated(methods[j])) {

            String defaultValue=ip_version == StackType.IPv4 ? annotation.defaultValueIPv4() : annotation.defaultValueIPv6();

            if (defaultValue != null && !defaultValue.isEmpty()) {

              Object converted=null;

              try {

                if (defaultValue.equalsIgnoreCase(Global.NON_LOOPBACK_ADDRESS))                 converted=default_ip_address;

 else                 converted=PropertyHelper.getConvertedValue(protocol,methods[j],properties,defaultValue,true,ip_version);

                methods[j].invoke(protocol,converted);

              }

 catch (              Exception e) {

                throw new Exception("default could not be assigned for method " + propertyName + " in "+ protocolName+ " with default "+ defaultValue,e);

              }

              log.debug("set property %s.%s to default value %s",protocolName,propertyName,converted);

            }

          }

        }

      }

    }

    Field[] fields=Util.getAllDeclaredFieldsWithAnnotations(protocol.getClass(),Property.class);

    for (int j=0; j < fields.length; j++) {

      String propertyName=PropertyHelper.getPropertyName(fields[j],properties);

      Object propertyValue=getValueFromProtocol(protocol,fields[j]);

      if (propertyValue == null) {

        Property annotation=fields[j].getAnnotation(Property.class);

        if (InetAddressInfo.isInetAddressRelated(fields[j])) {

          String defaultValue=ip_version == StackType.IPv4 ? annotation.defaultValueIPv4() : annotation.defaultValueIPv6();

          if (defaultValue != null && !defaultValue.isEmpty()) {

            if (defaultValue != null || !PropertyHelper.usesDefaultConverter(fields[j])) {

              Object converted=null;

              try {

                if (defaultValue.equalsIgnoreCase(Global.NON_LOOPBACK_ADDRESS))                 converted=default_ip_address;

 else                 converted=PropertyHelper.getConvertedValue(protocol,fields[j],properties,defaultValue,true,ip_version);

                if (converted != null)                 Util.setField(fields[j],protocol,converted);

              }

 catch (              Exception e) {

                throw new Exception("default could not be assigned for field " + propertyName + " in "+ protocolName+ " with default value "+ defaultValue,e);

              }

              log.debug("set property " + protocolName + "."+ propertyName+ " to default value "+ converted);

            }

          }

        }

      }

    }

  }

}

Location: Configurator.java

Content: 

public static void setDefaultValues(List<Protocol> protocols,StackType ip_version) throws Exception {

  InetAddress default_ip_address=Util.getNonLoopbackAddress(ip_version);

  if (default_ip_address == null) {

    log.warn(Util.getMessage("OnlyLoopbackFound"),ip_version);

    default_ip_address=Util.getLoopback(ip_version);

  }

  for (  Protocol protocol : protocols) {

    String protocolName=protocol.getName();

    Field[] fields=Util.getAllDeclaredFieldsWithAnnotations(protocol.getClass(),Property.class);

    for (int j=0; j < fields.length; j++) {

      if (InetAddressInfo.isInetAddressRelated(fields[j])) {

        Object propertyValue=getValueFromProtocol(protocol,fields[j]);

        if (propertyValue == null) {

          Property annotation=fields[j].getAnnotation(Property.class);

          String defaultValue=ip_version == StackType.IPv6 ? annotation.defaultValueIPv6() : annotation.defaultValueIPv4();

          if (defaultValue != null && !defaultValue.isEmpty()) {

            Object converted=null;

            try {

              if (defaultValue.equalsIgnoreCase(Global.NON_LOOPBACK_ADDRESS))               converted=default_ip_address;

 else               converted=PropertyHelper.getConvertedValue(protocol,fields[j],defaultValue,true,ip_version);

              if (converted != null)               Util.setField(fields[j],protocol,converted);

            }

 catch (            Exception e) {

              throw new Exception("default could not be assigned for field " + fields[j].getName() + " in "+ protocolName+ " with default value "+ defaultValue,e);

            }

            log.debug("set property " + protocolName + "."+ fields[j].getName()+ " to default value "+ converted);

          }

        }

      }

    }

  }

}

Location: Configurator.java

Content: 

public Protocol setupProtocolStack(List<ProtocolConfiguration> config) throws Exception {

  return setupProtocolStack(config,stack);

}

Location: Configurator.java

Content: 

/** 

 * Sets up the protocol stack. Each  {@link ProtocolConfiguration} has the protocol name and a map of attributenames and values (strings). Reflection is used to find the right fields (or setters) based on attribute names, and set them (by converting the attribute value to the proper object).

 */

public static Protocol setupProtocolStack(List<ProtocolConfiguration> protocol_configs,ProtocolStack st) throws Exception {

  List<Protocol> protocols=createProtocolsAndInitializeAttrs(protocol_configs,st);

  Protocol top_protocol=protocols.get(protocols.size() - 1);

  top_protocol.setUpProtocol(st);

  return connectProtocols(protocols);

}

Location: Configurator.java

Content: 

public Protocol setupProtocolStack(ProtocolStack copySource) throws Exception {

  List<Protocol> protocols=copySource.copyProtocols(stack);

  Collections.reverse(protocols);

  return connectProtocols(protocols);

}

