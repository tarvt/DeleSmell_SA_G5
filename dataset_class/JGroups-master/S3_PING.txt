Location: S3_PING.java

Content: 

protected AWSAuthConnection createConnection(){

  return port > 0 ? new AWSAuthConnection(access_key,secret_access_key,use_ssl,host,port) : new AWSAuthConnection(access_key,secret_access_key,use_ssl,host);

}

Location: S3_PING.java

Content: 

@Override protected void createRootDir(){

  ;

}

Location: S3_PING.java

Content: 

/** 

 * Use this helper method to generate pre-signed S3 urls for use with S3_PING. You'll need to generate urls for both the put and delete http methods. Example: Your AWS Access Key is "abcd". Your AWS Secret Access Key is "efgh". You want this node to write its information to "/S3_PING/DemoCluster/node1". So, your bucket is "S3_PING" and your key is "DemoCluster/node1". You want this to expire one year from now, or (System.currentTimeMillis / 1000) + (60 * 60 * 24 * 365) Let's assume that this equals 1316286684 Here's how to generate the value for the pre_signed_put_url property: String putUrl = S3_PING.generatePreSignedUrl("abcd", "efgh", "put", "S3_Ping", "DemoCluster/node1", 1316286684); Here's how to generate the value for the pre_signed_delete_url property: String deleteUrl = S3_PING.generatePreSignedUrl("abcd", "efgh", "delete", "S3_Ping", "DemoCluster/node1", 1316286684);

 * @param awsAccessKey Your AWS Access Key

 * @param awsSecretAccessKey Your AWS Secret Access Key

 * @param method The HTTP method - use "put" or "delete" for use with S3_PING

 * @param bucket The S3 bucket you want to write to

 * @param key The key within the bucket to write to

 * @param expirationDate The date this pre-signed url should expire, in seconds since epoch

 * @return The pre-signed url to be used in pre_signed_put_url or pre_signed_delete_url properties

 */

public static String generatePreSignedUrl(String awsAccessKey,String awsSecretAccessKey,String method,String bucket,String key,long expirationDate){

  Map headers=new HashMap();

  if (method.equalsIgnoreCase("PUT")) {

    headers.put("x-amz-acl",Collections.singletonList("public-read"));

  }

  return Utils.generateQueryStringAuthentication(awsAccessKey,awsSecretAccessKey,method,bucket,key,new HashMap(),headers,expirationDate);

}

Location: S3_PING.java

Content: 

@Override protected void readAll(List<Address> members,String clustername,Responses responses){

  if (clustername == null)   return;

  try {

    if (usingPreSignedUrls()) {

      PreSignedUrlParser parsedPut=new PreSignedUrlParser(pre_signed_put_url);

      clustername=parsedPut.getPrefix();

    }

    clustername=sanitize(clustername);

    ListBucketResponse rsp=conn.listBucket(location,clustername,null,null,null);

    if (rsp.entries != null) {

      for (Iterator<ListEntry> it=rsp.entries.iterator(); it.hasNext(); ) {

        ListEntry key=it.next();

        try {

          GetResponse val=conn.get(location,key.key,null);

          readResponse(val,members,responses);

        }

 catch (        Throwable t) {

          log.error("failed reading key %s: %s",key.key,t);

        }

      }

    }

  }

 catch (  IOException ex) {

    log.error(Util.getMessage("FailedReadingAddresses"),ex);

  }

}

Location: S3_PING.java

Content: 

protected void readResponse(GetResponse rsp,List<Address> mbrs,Responses responses){

  if (rsp.object == null)   return;

  byte[] buf=rsp.object.data;

  List<PingData> list;

  if (buf != null && buf.length > 0) {

    try {

      list=read(new ByteArrayInputStream(buf));

      if (list != null) {

        for (        PingData data : list) {

          if (mbrs == null || mbrs.contains(data.getAddress()))           responses.addResponse(data,data.isCoord());

          if (local_addr != null && !local_addr.equals(data.getAddress()))           addDiscoveryResponseToCaches(data.getAddress(),data.getLogicalName(),data.getPhysicalAddr());

        }

      }

    }

 catch (    Throwable e) {

      log.error(Util.getMessage("FailedUnmarshallingResponse"),e);

    }

  }

}

Location: S3_PING.java

Content: 

@Override protected void removeAll(String clustername){

  if (clustername == null)   return;

  try {

    Map headers=new TreeMap();

    headers.put("Content-Type",Collections.singletonList("text/plain"));

    clustername=sanitize(clustername);

    ListBucketResponse rsp=conn.listBucket(location,clustername,null,null,null);

    if (rsp.entries != null) {

      for (Iterator<ListEntry> it=rsp.entries.iterator(); it.hasNext(); ) {

        ListEntry key=it.next();

        try {

          if (usingPreSignedUrls())           conn.delete(pre_signed_delete_url).connection.getResponseMessage();

 else           conn.delete(location,key.key,headers).connection.getResponseMessage();

          log.trace("removing %s/%s",location,key.key);

        }

 catch (        Throwable t) {

          log.error("failed deleting object %s/%s: %s",location,key.key,t);

        }

      }

    }

  }

 catch (  IOException ex) {

    log.error(Util.getMessage("FailedDeletingAllObjects"),ex);

  }

}

Location: S3_PING.java

Content: 

protected void remove(String clustername,Address addr){

  if (clustername == null || addr == null)   return;

  String filename=addressToFilename(addr);

  String key=sanitize(clustername) + "/" + sanitize(filename);

  try {

    Map headers=new TreeMap();

    headers.put("Content-Type",Collections.singletonList("text/plain"));

    if (usingPreSignedUrls()) {

      conn.delete(pre_signed_delete_url).connection.getResponseMessage();

    }

 else {

      conn.delete(location,key,headers).connection.getResponseMessage();

    }

    if (log.isTraceEnabled())     log.trace("removing " + location + "/"+ key);

  }

 catch (  Exception e) {

    log.error(Util.getMessage("FailureRemovingData"),e);

  }

}

Location: S3_PING.java

Content: 

/** 

 * Sanitizes bucket and folder names according to AWS guidelines 

 */

protected static String sanitize(final String name){

  String retval=name;

  retval=retval.replace('/','-');

  retval=retval.replace('\\','-');

  return retval;

}

Location: S3_PING.java

Content: 

protected boolean usingPreSignedUrls(){

  return pre_signed_put_url != null;

}

Location: S3_PING.java

Content: 

@Override protected void write(List<PingData> list,String clustername){

  String filename=addressToFilename(local_addr);

  String key=sanitize(clustername) + "/" + sanitize(filename);

  HttpURLConnection httpConn=null;

  try {

    ByteArrayOutputStream out=new ByteArrayOutputStream(4096);

    write(list,out);

    byte[] data=out.toByteArray();

    S3Object val=new S3Object(data,null);

    if (usingPreSignedUrls()) {

      Map headers=new TreeMap();

      headers.put("x-amz-acl",Collections.singletonList("public-read"));

      httpConn=conn.put(pre_signed_put_url,val,headers).connection;

    }

 else {

      Map headers=new TreeMap();

      headers.put("Content-Type",Collections.singletonList("text/plain"));

      httpConn=conn.put(location,key,val,headers).connection;

    }

    if (!httpConn.getResponseMessage().equals("OK")) {

      log.error(Util.getMessage("FailedToWriteFileToS3BucketHTTPResponseCode") + httpConn.getResponseCode() + ")");

    }

  }

 catch (  Exception e) {

    log.error(Util.getMessage("ErrorMarshallingObject"),e);

  }

}

