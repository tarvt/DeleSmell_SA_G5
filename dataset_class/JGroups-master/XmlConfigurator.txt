Location: XmlConfigurator.java

Content: 

private static String dump(Collection<ProtocolConfiguration> configs){

  StringBuilder sb=new StringBuilder();

  String indent="  ";

  sb.append("<config>\n");

  for (  ProtocolConfiguration cfg : configs) {

    sb.append(indent).append("<").append(cfg.getProtocolName());

    Map<String,String> props=cfg.getProperties();

    if (props.isEmpty()) {

      sb.append(" />\n");

    }

 else {

      sb.append("\n").append(indent).append(indent);

      for (      Map.Entry<String,String> entry : props.entrySet()) {

        String key=entry.getKey();

        String val=entry.getValue();

        key=trim(key);

        val=trim(val);

        sb.append(key).append("=\"").append(val).append("\" ");

      }

      sb.append(" />\n");

    }

  }

  sb.append("</config>\n");

  return sb.toString();

}

Location: XmlConfigurator.java

Content: 

private static InputStream getAsInputStreamFromClassLoader(String filename){

  ClassLoader cl=Thread.currentThread().getContextClassLoader();

  InputStream is=cl == null ? null : cl.getResourceAsStream(filename);

  if (is == null) {

    is=XmlConfigurator.class.getClassLoader().getResourceAsStream(filename);

  }

  return is;

}

Location: XmlConfigurator.java

Content: 

public static XmlConfigurator getInstance(InputStream stream) throws java.io.IOException {

  return getInstance(stream,false);

}

Location: XmlConfigurator.java

Content: 

public static XmlConfigurator getInstance(InputStream stream,boolean validate) throws java.io.IOException {

  return parse(stream,validate);

}

Location: XmlConfigurator.java

Content: 

public String getProtocolStackString(){

  return getProtocolStackString(false);

}

Location: XmlConfigurator.java

Content: 

/** 

 * @param convert If false: print old plain output, else print new XML format

 * @return String with protocol stack in specified format

 */

public String getProtocolStackString(boolean convert){

  StringBuilder buf=new StringBuilder();

  Iterator<ProtocolConfiguration> it=configuration.iterator();

  if (convert)   buf.append("<config>\n");

  while (it.hasNext()) {

    ProtocolConfiguration d=it.next();

    if (convert)     buf.append("    <");

    buf.append(d.getProtocolString(convert));

    if (convert)     buf.append("/>");

    if (it.hasNext()) {

      if (convert)       buf.append('\n');

 else       buf.append(':');

    }

  }

  if (convert)   buf.append("\n</config>");

  return buf.toString();

}

Location: XmlConfigurator.java

Content: 

private static String inputAsString(InputStream input) throws IOException {

  int len=input.available();

  byte[] buf=new byte[len];

  input.read(buf,0,len);

  return new String(buf);

}

Location: XmlConfigurator.java

Content: 

public static List<ProtocolConfiguration> parseProtocols(Element root_element) throws Exception {

  String root_name=root_element.getNodeName().trim().toLowerCase();

  if (!"config".equals(root_name))   throw new IOException("the configuration does not start with a <config> element: " + root_name);

  final List<ProtocolConfiguration> prot_data=new ArrayList<>();

  NodeList prots=root_element.getChildNodes();

  for (int i=0; i < prots.getLength(); i++) {

    Node node=prots.item(i);

    if (node.getNodeType() != Node.ELEMENT_NODE)     continue;

    Element tag=(Element)node;

    String protocol=tag.getTagName();

    Map<String,String> params=new HashMap<>();

    NamedNodeMap attrs=tag.getAttributes();

    int attrLength=attrs.getLength();

    for (int a=0; a < attrLength; a++) {

      Attr attr=(Attr)attrs.item(a);

      String name=attr.getName();

      String value=attr.getValue();

      params.put(name,value);

    }

    ProtocolConfiguration cfg=new ProtocolConfiguration(protocol,params);

    prot_data.add(cfg);

    NodeList subnodes=node.getChildNodes();

    for (int j=0; j < subnodes.getLength(); j++) {

      Node subnode=subnodes.item(j);

      if (subnode.getNodeType() != Node.ELEMENT_NODE)       continue;

      cfg.addSubtree(subnode);

    }

  }

  return prot_data;

}

Location: XmlConfigurator.java

Content: 

protected static XmlConfigurator parse(Element root_element) throws Exception {

  return new XmlConfigurator(parseProtocols(root_element));

}

Location: XmlConfigurator.java

Content: 

protected static XmlConfigurator parse(InputStream stream,boolean validate) throws java.io.IOException {

  try {

    DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();

    factory.setValidating(validate);

    factory.setNamespaceAware(validate);

    if (validate)     factory.setAttribute(JAXP_SCHEMA_LANGUAGE,W3C_XML_SCHEMA);

    DocumentBuilder builder=factory.newDocumentBuilder();

    builder.setEntityResolver((publicId,systemId) -> {

      if (systemId != null && systemId.startsWith("http://www.jgroups.org/schema/JGroups-")) {

        String schemaName=systemId.substring("http://www.jgroups.org/".length());

        InputStream schemaIs=getAsInputStreamFromClassLoader(schemaName);

        if (schemaIs == null) {

          throw new IOException("Schema not found from classloader: " + schemaName);

        }

        InputSource source=new InputSource(schemaIs);

        source.setPublicId(publicId);

        source.setSystemId(systemId);

        return source;

      }

      return null;

    }

);

    final AtomicReference<SAXParseException> exceptionRef=new AtomicReference<>();

    builder.setErrorHandler(new ErrorHandler(){

      public void warning(      SAXParseException exception) throws SAXException {

        log.warn(Util.getMessage("ParseFailure"),exception);

      }

      public void fatalError(      SAXParseException exception) throws SAXException {

        exceptionRef.set(exception);

      }

      public void error(      SAXParseException exception) throws SAXException {

        exceptionRef.set(exception);

      }

    }

);

    Document document=builder.parse(stream);

    if (exceptionRef.get() != null) {

      throw exceptionRef.get();

    }

    Element configElement=document.getDocumentElement();

    return parse(configElement);

  }

 catch (  Exception x) {

    throw new IOException(String.format(Util.getMessage("ParseError"),x.getLocalizedMessage()));

  }

}

Location: XmlConfigurator.java

Content: 

public static String replace(String input,final String expr,String replacement){

  StringBuilder sb=new StringBuilder();

  int new_index=0, index=0, len=expr.length(), input_len=input.length();

  while (true) {

    new_index=input.indexOf(expr,index);

    if (new_index == -1) {

      sb.append(input,index,input_len);

      break;

    }

    sb.append(input,index,new_index);

    sb.append(replacement);

    index=new_index + len;

  }

  return sb.toString();

}

Location: XmlConfigurator.java

Content: 

private static String trim(String val){

  StringBuilder retval=new StringBuilder();

  int index;

  val=val.trim();

  while (true) {

    index=val.indexOf('\n');

    if (index == -1) {

      retval.append(val);

      break;

    }

    retval.append(val,0,index);

    val=val.substring(index + 1);

  }

  return retval.toString();

}

Location: XmlConfigurator.java

Content: 

protected XmlConfigurator(List<ProtocolConfiguration> protocols){

  configuration.addAll(protocols);

}

