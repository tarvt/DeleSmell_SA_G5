Location: RingBufferSeqnoLockless.java

Content: 

/** 

 * Creates a RingBuffer

 * @param capacity The number of elements the ring buffer's array should hold

 * @param offset The offset. The first element to be added has to be offset +1.

 */

public RingBufferSeqnoLockless(int capacity,long offset){

  if (capacity < 1)   throw new IllegalArgumentException("incorrect capacity of " + capacity);

  if (offset < 0)   throw new IllegalArgumentException("invalid offset of " + offset);

  int cap=1;

  while (capacity > cap)   cap<<=1;

  this.buf=new AtomicReferenceArray<>(cap);

  this.low=this.hd=this.offset=offset;

  this.hr.set(offset);

}

Location: RingBufferSeqnoLockless.java

Content: 

protected static final void validate(long seqno){

  if (seqno < 0)   throw new IllegalArgumentException("seqno " + seqno + " cannot be negative");

}

