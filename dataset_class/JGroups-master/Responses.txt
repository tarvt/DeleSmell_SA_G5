Location: Responses.java

Content: 

public void addResponse(PingData rsp,boolean overwrite){

  if (rsp == null)   return;

  boolean is_coord_rsp=rsp.isCoord(), changed=false;

  lock.lock();

  try {

    int ind=find(rsp);

    if (ind == -1) {

      add(rsp);

      changed=true;

    }

 else {

      PingData existing=ping_rsps[ind];

      if (overwrite || (is_coord_rsp && !existing.isCoord())) {

        ping_rsps[ind]=rsp;

        changed=true;

      }

    }

    if (changed && ((num_expected_rsps > 0 && index >= num_expected_rsps) || break_on_coord_rsp && is_coord_rsp))     _done();

  }

  finally {

    lock.unlock();

  }

}

Location: Responses.java

Content: 

@GuardedBy("lock") protected void add(PingData data){

  if (index >= ping_rsps.length)   resize(newLength(ping_rsps.length));

  ping_rsps[index++]=data;

}

Location: Responses.java

Content: 

public Responses clear(){

  lock.lock();

  try {

    index=0;

    return _done();

  }

  finally {

    lock.unlock();

  }

}

Location: Responses.java

Content: 

public boolean containsResponseFrom(Address mbr){

  if (mbr == null)   return false;

  for (int i=0; i < index; i++) {

    if (ping_rsps[i] != null && mbr.equals(ping_rsps[i].getAddress()))     return true;

  }

  return false;

}

Location: Responses.java

Content: 

public Responses done(){

  lock.lock();

  try {

    return _done();

  }

  finally {

    lock.unlock();

  }

}

Location: Responses.java

Content: 

public PingData findResponseFrom(Address mbr){

  if (mbr == null)   return null;

  for (int i=0; i < index; i++) {

    if (ping_rsps[i] != null && mbr.equals(ping_rsps[i].getAddress()))     return ping_rsps[i];

  }

  return null;

}

Location: Responses.java

Content: 

@GuardedBy("lock") protected int find(PingData data){

  if (data == null)   return -1;

  for (int i=0; i < index; i++) {

    if (data.equals(ping_rsps[i]))     return i;

  }

  return -1;

}

Location: Responses.java

Content: 

public boolean isDone(){

  lock.lock();

  try {

    return done;

  }

  finally {

    lock.unlock();

  }

}

Location: Responses.java

Content: 

protected static int newLength(int length){

  return length > 1000 ? (int)(length * 1.1) : Math.max(5,length * 2);

}

Location: Responses.java

Content: 

protected int[] numResponses(){

  lock.lock();

  try {

    int[] num={0,0};

    for (int i=0; i < index; i++) {

      PingData data=ping_rsps[i];

      num[0]++;

      if (data.isCoord())       num[1]++;

    }

    return num;

  }

  finally {

    lock.unlock();

  }

}

Location: Responses.java

Content: 

protected void resize(int new_size){

  lock.lock();

  try {

    ping_rsps=Arrays.copyOf(ping_rsps,new_size);

  }

  finally {

    lock.unlock();

  }

}

Location: Responses.java

Content: 

public Responses(boolean break_on_coord_rsp){

  this(0,break_on_coord_rsp);

}

Location: Responses.java

Content: 

public Responses(int num_expected_rsps,boolean break_on_coord_rsp){

  this(num_expected_rsps,break_on_coord_rsp,16);

}

Location: Responses.java

Content: 

public Responses(int num_expected_rsps,boolean break_on_coord_rsp,int initial_capacity){

  this.num_expected_rsps=num_expected_rsps;

  this.break_on_coord_rsp=break_on_coord_rsp;

  ping_rsps=new PingData[Math.max(5,initial_capacity)];

}

Location: Responses.java

Content: 

@GuardedBy("lock") protected List<PingData> toList(){

  return new ArrayList<>(Arrays.asList(ping_rsps).subList(0,index));

}

Location: Responses.java

Content: 

public boolean waitFor(long timeout){

  return cond.waitFor(this::isDone,timeout,TimeUnit.MILLISECONDS);

}

Location: Responses.java

Content: 

@GuardedBy("lock") protected Responses _done(){

  if (!done) {

    done=true;

    cond.signal(true);

  }

  return this;

}

