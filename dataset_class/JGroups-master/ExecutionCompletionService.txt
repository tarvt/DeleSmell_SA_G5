Location: ExecutionCompletionService.java

Content: 

/** 

 * Creates an ExecutorCompletionService using the supplied executor for base task execution and a {@link LinkedBlockingQueue} as a completion queue.

 * @param executor the executor to use

 * @throws NullPointerException if executor is <tt>null</tt>

 */

public ExecutionCompletionService(ExecutionService executor){

  this(executor,null,null);

}

Location: ExecutionCompletionService.java

Content: 

/** 

 * Creates an ExecutorCompletionService using the supplied executor for base task execution and the supplied queue as its completion queue.

 * @param executor the executor to use

 * @param completionQueue the queue to use as the completion queuenormally one dedicated for use by this service

 * @throws NullPointerException if executor is <tt>null</tt>

 */

public ExecutionCompletionService(ExecutionService executor,BlockingQueue<NotifyingFuture<V>> completionQueue){

  this(executor,completionQueue,null);

}

Location: ExecutionCompletionService.java

Content: 

/** 

 * This constructor is here if someone wants to override this class and  provide their own QueueingListener to possibly listen in on futures being finished

 * @param executor the executor to use

 * @param completionQueue the queue to use as the completion queuenormally one dedicated for use by this service

 * @param listener the listener to notify.  To work properly this listenershould at minimum call the super.futureDone or else this completion service may not work correctly.

 * @throws NullPointerException if executor is <tt>null</tt>

 */

protected ExecutionCompletionService(ExecutionService executor,BlockingQueue<NotifyingFuture<V>> completionQueue,QueueingListener listener){

  if (executor == null)   throw new NullPointerException();

  this.executor=executor;

  if (completionQueue == null) {

    this.completionQueue=new LinkedBlockingQueue<>();

  }

 else {

    this.completionQueue=completionQueue;

  }

  if (listener == null) {

    this.listener=new QueueingListener();

  }

 else {

    this.listener=listener;

  }

}

Location: ExecutionCompletionService.java

Content: 

/** 

 * {@inheritDoc CompletionService}<p> This future object may not be used as a NotifyingFuture.  That is because internally this class sets the listener to provide ability to add to the queue.

 */

public Future<V> submit(Callable<V> task){

  if (task == null)   throw new NullPointerException();

  NotifyingFuture<V> f=executor.submit(task);

  f.setListener(listener);

  return f;

}

Location: ExecutionCompletionService.java

Content: 

/** 

 * {@inheritDoc CompletionService}<p> This future object may not be used as a NotifyingFuture.  That is because internally this class sets the listener to provide ability to add to the queue.

 */

public Future<V> submit(Runnable task,V result){

  if (task == null)   throw new NullPointerException();

  NotifyingFuture<V> f=executor.submit(task,result);

  f.setListener(listener);

  return f;

}

