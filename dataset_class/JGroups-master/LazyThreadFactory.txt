Location: LazyThreadFactory.java

Content: 

/** 

 * Replaces "<ADDR>" with the local address and <CLUSTER> with the cluster name 

 */

protected String changeName(String name){

  String retval=name;

  StringBuilder tmp;

  if (address != null) {

    tmp=new StringBuilder(address);

    retval=retval.replace(ADDR,tmp);

  }

  if (clusterName != null) {

    tmp=new StringBuilder(clusterName);

    retval=retval.replace(CLUSTER,tmp);

  }

  return retval;

}

Location: LazyThreadFactory.java

Content: 

public LazyThreadFactory(String baseName,boolean createDaemons,boolean use_numbering){

  super(baseName,createDaemons,use_numbering);

}

Location: LazyThreadFactory.java

Content: 

public void removeTerminatedThreads(){

  for (Iterator<WeakReference<Thread>> it=threads.iterator(); it.hasNext(); ) {

    WeakReference<Thread> ref=it.next();

    Thread thread=ref.get();

    if (thread == null || thread.getState() == Thread.State.TERMINATED)     it.remove();

  }

}

Location: LazyThreadFactory.java

Content: 

protected void renameThreads(){

  for (Iterator<WeakReference<Thread>> it=threads.iterator(); it.hasNext(); ) {

    WeakReference<Thread> ref=it.next();

    Thread thread=ref.get();

    if (thread == null || thread.getState() == Thread.State.TERMINATED) {

      it.remove();

      continue;

    }

    String name=thread.getName();

    name=changeName(name);

    thread.setName(name);

    if (!name.contains(ADDR) && !name.contains(CLUSTER))     it.remove();

  }

}

