Location: AUTH.java

Content: 

public AUTH(){

}

Location: AUTH.java

Content: 

protected boolean callUpHandlers(Message msg){

  boolean pass_up=true;

  for (  UpHandler handler : up_handlers) {

    if (!handler.handleUpMessage(msg))     pass_up=false;

  }

  return pass_up;

}

Location: AUTH.java

Content: 

public String getAuthClass(){

  return auth_token != null ? auth_token.getClass().getName() : null;

}

Location: AUTH.java

Content: 

public AuthToken getAuthToken(){

  return auth_token;

}

Location: AUTH.java

Content: 

protected static GMS.GmsHeader getGMSHeader(Message msg){

  Header hdr=msg.getHeader(GMS_ID);

  if (hdr instanceof GMS.GmsHeader)   return (GMS.GmsHeader)hdr;

  return null;

}

Location: AUTH.java

Content: 

/** 

 * Handles a GMS header

 * @param gms_hdr

 * @param msg

 * @return true if the message should be passed up, or else false

 */

protected boolean handleAuthHeader(GMS.GmsHeader gms_hdr,AuthHeader auth_hdr,Message msg){

  if (needsAuthentication(gms_hdr)) {

    if (this.auth_token.authenticate(auth_hdr.getToken(),msg))     return true;

 else {

      log.warn("%s: failed to validate AuthHeader (token: %s) from %s; dropping message and sending " + "rejection message",local_addr,auth_token.getClass().getSimpleName(),msg.src());

      sendRejectionMessage(gms_hdr.getType(),msg.getSrc(),"authentication failed");

      return false;

    }

  }

  return true;

}

Location: AUTH.java

Content: 

protected boolean needsAuthentication(GMS.GmsHeader hdr){

switch (hdr.getType()) {

case GMS.GmsHeader.JOIN_REQ:

case GMS.GmsHeader.JOIN_REQ_WITH_STATE_TRANSFER:

case GMS.GmsHeader.MERGE_REQ:

    return true;

case GMS.GmsHeader.JOIN_RSP:

case GMS.GmsHeader.MERGE_RSP:

case GMS.GmsHeader.INSTALL_MERGE_VIEW:

  return this.authenticate_coord;

default :

return false;

}

}

Location: AUTH.java

Content: 

public AUTH register(UpHandler handler){

  up_handlers.add(handler);

  return this;

}

Location: AUTH.java

Content: 

@Property(name="auth_class",description="The fully qualified name of the class implementing the AuthToken interface") public void setAuthClass(String class_name) throws Exception {

  Object obj=Class.forName(class_name).getDeclaredConstructor().newInstance();

  auth_token=(AuthToken)obj;

  auth_token.setAuth(this);

}

Location: AUTH.java

Content: 

@Property(description="Do join or merge responses from the coordinator also need to be authenticated") public AUTH setAuthCoord(boolean authenticateCoord){

  this.authenticate_coord=authenticateCoord;

  return this;

}

Location: AUTH.java

Content: 

public AUTH setAuthToken(AuthToken token){

  this.auth_token=token;

  return this;

}

Location: AUTH.java

Content: 

public AUTH unregister(UpHandler handler){

  up_handlers.remove(handler);

  return this;

}

