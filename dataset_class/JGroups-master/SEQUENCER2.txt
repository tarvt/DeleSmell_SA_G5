Location: SEQUENCER2.java

Content: 

protected void broadcast(final Message msg,long seqno){

  msg.putHeader(this.id,new SequencerHeader(SequencerHeader.BCAST,seqno));

  if (log.isTraceEnabled())   log.trace(local_addr + ": broadcasting ::" + seqno);

  down_prot.down(msg);

  bcasts_sent++;

}

Location: SEQUENCER2.java

Content: 

@ManagedAttribute(description="Number of messages in the forward-queue") public int getFwdQueueSize(){

  return fwd_queue.size();

}

Location: SEQUENCER2.java

Content: 

protected void removeAndDeliver(Table<Message> win,Address sender){

  AtomicInteger adders=win.getAdders();

  if (adders.getAndIncrement() != 0)   return;

  final MessageBatch batch=new MessageBatch(win.size()).dest(local_addr).sender(sender).multicast(false);

  Supplier<MessageBatch> batch_creator=() -> batch;

  do {

    try {

      batch.reset();

      win.removeMany(true,0,null,batch_creator,BATCH_ACCUMULATOR);

    }

 catch (    Throwable t) {

      log.error("failed removing messages from table for " + sender,t);

    }

    if (!batch.isEmpty()) {

      deliverBatch(batch);

    }

  }

 while (adders.decrementAndGet() != 0);

}

Location: SEQUENCER2.java

Content: 

protected void sendSeqnoRequest(int num_seqnos){

  Address target=coord;

  if (target == null)   return;

  SequencerHeader hdr=new SequencerHeader(SequencerHeader.REQUEST,0,num_seqnos);

  Message forward_msg=new Message(target).putHeader(this.id,hdr);

  down_prot.down(forward_msg);

  sent_requests++;

}

Location: SEQUENCER2.java

Content: 

protected void sendSeqnoResponse(Address original_sender,long seqno,int num_seqnos){

  SequencerHeader hdr=new SequencerHeader(SequencerHeader.RESPONSE,seqno,num_seqnos);

  Message ucast_msg=new Message(original_sender).putHeader(this.id,hdr);

  if (log.isTraceEnabled())   log.trace(local_addr + ": sending seqno response to " + original_sender+ ":: new_seqno="+ seqno+ ", num_seqnos="+ num_seqnos);

  down_prot.down(ucast_msg);

  sent_responses++;

}

