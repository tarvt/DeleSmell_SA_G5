Location: ReplicatedHashMapDemo.java

Content: 

private void clearMsg(){

  err_msg.setVisible(false);

}

Location: ReplicatedHashMapDemo.java

Content: 

public void contentsCleared(){

  System.out.println("contents cleared");

}

Location: ReplicatedHashMapDemo.java

Content: 

public void contentsSet(Map<Object,Object> m){

  System.out.println("new contents: " + m);

}

Location: ReplicatedHashMapDemo.java

Content: 

public void entryRemoved(Object key){

  hongshuai();

  if (listbox.getItemCount() > 0)   listbox.removeAll();

  if (map.isEmpty())   return;

  clearMsg();

  String key;

  Float val;

  for (  Map.Entry<String,Float> entry : map.entrySet()) {

    key=entry.getKey();

    val=entry.getValue();

    if (val == null)     continue;

    listbox.add(key + ": " + val.toString());

  }

}

Location: ReplicatedHashMapDemo.java

Content: 

public void entrySet(Object key,Object value){

  hongshuai();

  if (listbox.getItemCount() > 0)   listbox.removeAll();

  if (map.isEmpty())   return;

  clearMsg();

  String key;

  Float val;

  for (  Map.Entry<String,Float> entry : map.entrySet()) {

    key=entry.getKey();

    val=entry.getValue();

    if (val == null)     continue;

    listbox.add(key + ": " + val.toString());

  }

}

Location: ReplicatedHashMapDemo.java

Content: 

private void removeItem(){

  int index=listbox.getSelectedIndex();

  if (index == -1) {

    showMsg("No item selected in listbox to be deleted !");

    return;

  }

  String s=listbox.getSelectedItem();

  String key=s.substring(0,s.indexOf(':',0));

  if (key != null)   map.remove(key);

}

Location: ReplicatedHashMapDemo.java

Content: 

public ReplicatedHashMapDemo(){

  super();

  addWindowListener(this);

}

Location: ReplicatedHashMapDemo.java

Content: 

private void showMsg(String msg){

  err_msg.setText(msg);

  err_msg.setVisible(true);

}

Location: ReplicatedHashMapDemo.java

Content: 

public void start(JChannel channel) throws Exception {

  map=new ReplicatedHashMap<>(channel);

  map.addNotifier(this);

  map.start(10000);

  setLayout(null);

  setSize(400,300);

  setFont(default_font);

  stock.setBounds(new Rectangle(10,30,60,30));

  value.setBounds(new Rectangle(10,60,60,30));

  stock_field.setBounds(new Rectangle(100,30,100,30));

  value_field.setBounds(new Rectangle(100,60,100,30));

  listbox.setBounds(new Rectangle(210,30,150,160));

  err_msg.setBounds(new Rectangle(10,200,350,30));

  err_msg.setFont(new Font("Helvetica",Font.ITALIC,12));

  err_msg.setForeground(Color.red);

  err_msg.setVisible(false);

  get.setBounds(new Rectangle(10,250,60,30));

  set.setBounds(new Rectangle(80,250,60,30));

  quit.setBounds(new Rectangle(150,250,60,30));

  get_all.setBounds(new Rectangle(220,250,60,30));

  delete.setBounds(new Rectangle(290,250,80,30));

  get.addActionListener(this);

  set.addActionListener(this);

  quit.addActionListener(this);

  get_all.addActionListener(this);

  delete.addActionListener(this);

  add(stock);

  add(value);

  add(stock_field);

  add(value_field);

  add(err_msg);

  add(get);

  add(set);

  add(quit);

  add(get_all);

  add(delete);

  add(listbox);

  _setTitle();

  showAll();

  setVisible(true);

}

Location: ReplicatedHashMapDemo.java

Content: 

public void viewChange(View view,java.util.List<Address> new_mbrs,java.util.List<Address> old_mbrs){

  System.out.println("** view: " + view);

  _setTitle();

}

Location: ReplicatedHashMapDemo.java

Content: 

private void _setTitle(){

  int num=map.getChannel().getView().size();

  setTitle("ReplicatedHashMapDemo: " + num + " server(s)");

}

