Location: AuthHeader.java

Content: 

public AuthHeader(){

}

Location: AuthHeader.java

Content: 

public AuthHeader(AuthToken token){

  this.token=token;

}

Location: AuthHeader.java

Content: 

public AuthToken getToken(){

  return this.token;

}

Location: AuthHeader.java

Content: 

protected static AuthToken readAuthToken(DataInput in) throws IOException, ClassNotFoundException {

  if (in.readByte() == 0)   return null;

  short id=in.readShort();

  AuthToken retval=null;

  if (id >= 0)   retval=ClassConfigurator.create(id);

 else {

    String classname=in.readUTF();

    Class<?> clazz=Class.forName(classname);

    try {

      retval=(AuthToken)clazz.getDeclaredConstructor().newInstance();

    }

 catch (    ReflectiveOperationException e) {

      throw new IllegalStateException(e);

    }

  }

  retval.readFrom(in);

  return retval;

}

Location: AuthHeader.java

Content: 

public void setToken(AuthToken token){

  this.token=token;

}

Location: AuthHeader.java

Content: 

protected static int sizeOf(AuthToken tok){

  int retval=Global.BYTE_SIZE;

  if (tok == null)   return retval;

  retval+=Global.SHORT_SIZE;

  short id=ClassConfigurator.getMagicNumber(tok.getClass());

  if (id < 0) {

    String classname=tok.getClass().getName();

    retval+=classname.length() + 2;

  }

  retval+=tok.size();

  return retval;

}

Location: AuthHeader.java

Content: 

public AuthToken token(){

  return this.token;

}

Location: AuthHeader.java

Content: 

public AuthHeader token(AuthToken token){

  this.token=token;

  return this;

}

Location: AuthHeader.java

Content: 

protected static void writeAuthToken(DataOutput out,AuthToken tok) throws IOException {

  out.writeByte(tok == null ? 0 : 1);

  if (tok == null)   return;

  short id=ClassConfigurator.getMagicNumber(tok.getClass());

  out.writeShort(id);

  if (id < 0) {

    String classname=tok.getClass().getName();

    out.writeUTF(classname);

  }

  tok.writeTo(out);

}

