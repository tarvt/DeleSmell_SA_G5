Location: DELAY.java

Content: 

/** 

 * Compute a random number between 0 and n

 */

private int computeDelay(final int n){

  if (n <= 1) {

    return 0;

  }

  return constant_delay ? n : randomNumberGenerator.nextInt(n);

}

Location: DELAY.java

Content: 

public int getInDelay(){

  return in_delay;

}

Location: DELAY.java

Content: 

public int getInDelayNanos(){

  return in_delay_nanos;

}

Location: DELAY.java

Content: 

public int getOutDelay(){

  return out_delay;

}

Location: DELAY.java

Content: 

public int getOutDelayNanos(){

  return out_delay_nanos;

}

Location: DELAY.java

Content: 

public void setInDelayNanos(int in_delay_nanos){

  this.in_delay_nanos=in_delay_nanos;

}

Location: DELAY.java

Content: 

public void setInDelay(int in_delay){

  this.in_delay=in_delay;

}

Location: DELAY.java

Content: 

public void setOutDelayNanos(int out_delay_nanos){

  this.out_delay_nanos=out_delay_nanos;

}

Location: DELAY.java

Content: 

public void setOutDelay(int out_delay){

  this.out_delay=out_delay;

}

Location: DELAY.java

Content: 

private void sleep(final int variable_milliseconds_delay,final int nano_delay){

  final int millis=computeDelay(variable_milliseconds_delay);

  if (millis != 0 || nano_delay != 0) {

    Util.sleep(millis,nano_delay);

  }

}

