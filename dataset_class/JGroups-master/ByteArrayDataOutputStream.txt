Location: ByteArrayDataOutputStream.java

Content: 

public byte[] buffer(){

  return buf;

}

Location: ByteArrayDataOutputStream.java

Content: 

public ByteArrayDataOutputStream(){

  this(32,false);

}

Location: ByteArrayDataOutputStream.java

Content: 

public ByteArrayDataOutputStream(int capacity){

  this(capacity,false);

}

Location: ByteArrayDataOutputStream.java

Content: 

public ByteArrayDataOutputStream(int capacity,boolean grow_exponentially){

  this.buf=new byte[capacity];

  this.grow_exponentially=grow_exponentially;

}

Location: ByteArrayDataOutputStream.java

Content: 

protected int checkBounds(int pos){

  if (pos < 0 || pos > buf.length)   throw new IndexOutOfBoundsException("pos=" + pos + ", length="+ buf.length);

  return pos;

}

Location: ByteArrayDataOutputStream.java

Content: 

/** 

 * Grows the buffer; whether it grow linearly or exponentially depends on grow_exponentially 

 */

protected void ensureCapacity(int bytes){

  int minCapacity=pos + bytes;

  if (minCapacity - buf.length > 0) {

    int newCapacity=this.grow_exponentially ? buf.length << 1 : pos + bytes + 32;

    if (newCapacity - minCapacity < 0)     newCapacity=minCapacity;

    if (newCapacity < 0) {

      if (minCapacity < 0)       throw new OutOfMemoryError();

      newCapacity=Integer.MAX_VALUE;

    }

    buf=Arrays.copyOf(buf,newCapacity);

  }

}

Location: ByteArrayDataOutputStream.java

Content: 

public ByteBuffer getByteBuffer(){

  return ByteBuffer.wrap(buf,0,pos);

}

Location: ByteArrayDataOutputStream.java

Content: 

public boolean growExponentially(){

  return grow_exponentially;

}

Location: ByteArrayDataOutputStream.java

Content: 

public ByteArrayDataOutputStream growExponentially(boolean b){

  grow_exponentially=b;

  return this;

}

Location: ByteArrayDataOutputStream.java

Content: 

public int position(){

  return pos;

}

Location: ByteArrayDataOutputStream.java

Content: 

public ByteArrayDataOutputStream position(int pos){

  this.pos=checkBounds(pos);

  return this;

}

