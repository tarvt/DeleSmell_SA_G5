Location: MergeView.java

Content: 

public List<View> getSubgroups(){

  return Collections.unmodifiableList(Arrays.asList(subgroups));

}

Location: MergeView.java

Content: 

protected static View[] listToArray(List<View> list){

  if (list == null)   return null;

  View[] retval=new View[list.size()];

  int index=0;

  for (  View view : list)   retval[index++]=view;

  return retval;

}

Location: MergeView.java

Content: 

public MergeView(){

}

Location: MergeView.java

Content: 

/** 

 * Creates a new view

 * @param creator The creator of this view (can not be null)

 * @param id The lamport timestamp of this view

 * @param members Contains a list of all the members in the view, can be empty but not null.

 * @param subgroups A list of Views representing the former subgroups

 */

public MergeView(Address creator,long id,List<Address> members,List<View> subgroups){

  super(creator,id,members);

  this.subgroups=listToArray(subgroups);

}

Location: MergeView.java

Content: 

public MergeView(ViewId view_id,Address[] members,List<View> subgroups){

  super(view_id,members);

  this.subgroups=listToArray(subgroups);

}

Location: MergeView.java

Content: 

/** 

 * Creates a new merge view

 * @param view_id The view id of this view (can not be null)

 * @param members Contains a list of all the members in the view, can be empty but not null.

 * @param subgroups A list of Views representing the former subgroups

 */

public MergeView(ViewId view_id,List<Address> members,List<View> subgroups){

  super(view_id,members);

  this.subgroups=listToArray(subgroups);

}

