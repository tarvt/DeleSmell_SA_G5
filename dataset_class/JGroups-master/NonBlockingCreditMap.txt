Location: NonBlockingCreditMap.java

Content: 

protected boolean addToQueue(Message msg,int length){

  try {

    msg_queue.add(msg,length);

    num_queued.increment();

  }

 catch (  InterruptedException e) {

  }

  return false;

}

Location: NonBlockingCreditMap.java

Content: 

@Override public boolean decrement(Message msg,int credits,long timeout){

  lock.lock();

  try {

    if (queuing)     return addToQueue(msg,credits);

    if (decrement(credits))     return true;

    queuing=true;

    return addToQueue(msg,credits);

  }

  finally {

    lock.unlock();

  }

}

Location: NonBlockingCreditMap.java

Content: 

public int getEnqueuedMessages(){

  return num_queued.intValue();

}

Location: NonBlockingCreditMap.java

Content: 

public int getQueuedMessages(){

  return msg_queue.getElements();

}

Location: NonBlockingCreditMap.java

Content: 

public int getQueuedMessageSize(){

  return msg_queue.size();

}

Location: NonBlockingCreditMap.java

Content: 

public boolean isQueuing(){

  return queuing;

}

Location: NonBlockingCreditMap.java

Content: 

public NonBlockingCreditMap(long max_credits,int max_size,Lock lock){

  this(max_credits,max_size,lock,NO_OP_SEND_FUNCTION);

}

Location: NonBlockingCreditMap.java

Content: 

public NonBlockingCreditMap(long max_credits,int max_size,Lock lock,final Consumer<Message> send_function){

  super(max_credits,lock);

  this.msg_queue=new SizeBoundedQueue<>(max_size,lock);

  this.send_function=send_function;

}

Location: NonBlockingCreditMap.java

Content: 

@Override public void replenish(Address sender,long new_credits){

  if (sender == null)   return;

  List<Message> drain_list;

  lock.lock();

  try {

    super.replenish(sender,new_credits);

    if (!queuing || msg_queue.isEmpty())     return;

    int drained=msg_queue.drainTo(drain_list=new ArrayList<>(msg_queue.getElements()),(int)this.min_credits);

    if (drained > 0)     decrement(drained);

    if (msg_queue.isEmpty())     queuing=false;

  }

  finally {

    lock.unlock();

  }

  if (!drain_list.isEmpty())   drain_list.forEach(send_function);

}

