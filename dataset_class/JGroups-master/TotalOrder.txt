Location: TotalOrder.java

Content: 

public void addValueTo(int x,int y,int value){

synchronized (array) {

    array[x][y]+=value;

    repaint();

  }

}

Location: TotalOrder.java

Content: 

public int checksum(){

  int retval=0;

synchronized (array) {

    for (int i=0; i < num_fields; i++)     for (int j=0; j < num_fields; j++)     retval+=array[i][j];

  }

  return retval;

}

Location: TotalOrder.java

Content: 

Point coord2Index(int x,int y){

  Point ret=new Point();

  ret.x=x_offset + (x * field_size);

  ret.y=y_offset + ((num_fields - 1 - y) * field_size);

  return ret;

}

Location: TotalOrder.java

Content: 

private MenuBar createMenuBar(){

  MenuBar ret=new MenuBar();

  Menu file=new Menu("File");

  MenuItem quitm=new MenuItem("Quit");

  ret.setFont(def_font2);

  ret.add(file);

  file.addSeparator();

  file.add(quitm);

  quitm.addActionListener(e -> System.exit(1));

  return ret;

}

Location: TotalOrder.java

Content: 

private TotOrderRequest createRandomRequest(){

  TotOrderRequest ret=null;

  byte op_type=(byte)(((Math.random() * 10) % 4) + 1);

  int x=(int)((Math.random() * num_fields * 2) % num_fields);

  int y=(int)((Math.random() * num_fields * 2) % num_fields);

  int val=(int)((Math.random() * num_fields * 200) % 10);

  ret=new TotOrderRequest(op_type,x,y,val);

  return ret;

}

Location: TotalOrder.java

Content: 

public void divideValueBy(int x,int y,int value){

  if (value == 0)   return;

synchronized (array) {

    array[x][y]/=value;

    repaint();

  }

}

Location: TotalOrder.java

Content: 

/** 

 * Draws the empty board, no pieces on it yet, just grid lines

 */

void drawEmptyBoard(Graphics g){

  int x=x_offset, y=y_offset;

  Color old_col=g.getColor();

  g.setFont(def_font2);

  old_col=g.getColor();

  g.setColor(checksum_col);

  g.drawString(("Checksum: " + checksum),x_offset + field_size,y_offset - 20);

  g.setFont(def_font);

  g.setColor(old_col);

  for (int i=0; i < num_fields; i++) {

    for (int j=0; j < num_fields; j++) {

      g.drawRect(x,y,field_size,field_size);

      x+=field_size;

    }

    g.drawString((String.valueOf((num_fields - i - 1))),x + 20,y + field_size / 2);

    y+=field_size;

    x=x_offset;

  }

  for (int i=0; i < num_fields; i++) {

    g.drawString((String.valueOf(i)),x_offset + i * field_size + field_size / 2,y + 30);

  }

}

Location: TotalOrder.java

Content: 

void drawNumbers(Graphics g){

  Point p;

  String num;

  FontMetrics fm=g.getFontMetrics();

  int len=0;

synchronized (array) {

    for (int i=0; i < num_fields; i++)     for (int j=0; j < num_fields; j++) {

      num=String.valueOf(array[i][j]);

      len=fm.stringWidth(num);

      p=index2Coord(i,j);

      g.drawString(num,p.x - (len / 2),p.y);

    }

  }

}

Location: TotalOrder.java

Content: 

public int[][] getCopyOfState(){

  int[][] retval=new int[num_fields][num_fields];

synchronized (array) {

    for (int i=0; i < num_fields; i++)     System.arraycopy(array[i],0,retval[i],0,num_fields);

    return retval;

  }

}

Location: TotalOrder.java

Content: 

public int[][] getState(){

synchronized (array) {

    return array;

  }

}

Location: TotalOrder.java

Content: 

public int getValueAt(int x,int y){

synchronized (array) {

    return array[x][y];

  }

}

Location: TotalOrder.java

Content: 

Point index2Coord(int i,int j){

  int x=x_offset + i * field_size + field_size / 2;

  int y=y_offset + num_fields * field_size - j * field_size - field_size / 2;

  return new Point(x,y);

}

Location: TotalOrder.java

Content: 

public void init(ByteBuffer buf){

  type=buf.get();

  x=buf.getInt();

  y=buf.getInt();

  val=buf.getInt();

}

Location: TotalOrder.java

Content: 

public void multiplyValueWith(int x,int y,int value){

synchronized (array) {

    array[x][y]*=value;

    repaint();

  }

}

Location: TotalOrder.java

Content: 

public MyCanvas(int num_fields,int field_size,int x_offset,int y_offset){

  this.num_fields=num_fields;

  this.field_size=field_size;

  this.x_offset=x_offset;

  this.y_offset=y_offset;

  array=new int[num_fields][num_fields];

  setBackground(Color.white);

  setSize(2 * x_offset + num_fields * field_size + 30,y_offset + num_fields * field_size + 50);

  for (int i=0; i < num_fields; i++)   for (int j=0; j < num_fields; j++)   array[i][j]=0;

}

Location: TotalOrder.java

Content: 

public String printType(){

switch (type) {

case STOP:

    return "STOP";

case ADDITION:

  return "ADDITION";

case SUBTRACTION:

return "SUBTRACTION";

case MULTIPLICATION:

return "MULTIPLICATION";

case DIVISION:

return "DIVISION";

default :

return "<unknown>";

}

}

Location: TotalOrder.java

Content: 

void processRequest(TotOrderRequest req) throws Exception {

  int x=req.x, y=req.y, val=req.val;

  if (req.type == TotOrderRequest.STOP) {

    hongshuai();

    running=false;

    interrupt();

    System.out.println("-- num_additions: " + num_additions + "\n-- num_subtractions: "+ num_subtractions+ "\n-- num_divisions: "+ num_divisions+ "\n-- num_multiplications: "+ num_multiplications);

    num_additions=num_subtractions=num_multiplications=num_divisions=0;

    return;

  }

switch (req.type) {

case TotOrderRequest.ADDITION:

    canvas.addValueTo(x,y,val);

  num_additions++;

break;

case TotOrderRequest.SUBTRACTION:

canvas.subtractValueFrom(x,y,val);

num_subtractions++;

break;

case TotOrderRequest.MULTIPLICATION:

canvas.multiplyValueWith(x,y,val);

num_multiplications++;

break;

case TotOrderRequest.DIVISION:

canvas.divideValueBy(x,y,val);

num_divisions++;

break;

}

canvas.update();

}

Location: TotalOrder.java

Content: 

public void setFieldSize(int fs){

  field_size=fs;

}

Location: TotalOrder.java

Content: 

public void setNumFields(int nf){

  num_fields=nf;

}

Location: TotalOrder.java

Content: 

public void setState(Object new_state){

  if (new_state == null)   return;

  try {

    int[][] new_array=(int[][])new_state;

synchronized (array) {

      clear();

      for (int i=0; i < num_fields; i++)       System.arraycopy(new_array[i],0,array[i],0,num_fields);

      checksum=checksum();

      repaint();

    }

  }

 catch (  Exception e) {

    System.err.println(e);

  }

}

Location: TotalOrder.java

Content: 

public void setValueAt(int x,int y,int value){

synchronized (array) {

    array[x][y]=value;

  }

  repaint();

}

Location: TotalOrder.java

Content: 

public void setXOffset(int o){

  x_offset=o;

}

Location: TotalOrder.java

Content: 

public void setYOffset(int o){

  y_offset=o;

}

Location: TotalOrder.java

Content: 

void startSender(){

  if (sender == null || !sender.isAlive()) {

    sender=new SenderThread();

    sender.start();

  }

}

Location: TotalOrder.java

Content: 

void stopSender(){

  if (sender != null) {

    sender.stopSender();

    sender=null;

  }

}

Location: TotalOrder.java

Content: 

public void subtractValueFrom(int x,int y,int value){

synchronized (array) {

    array[x][y]-=value;

    repaint();

  }

}

Location: TotalOrder.java

Content: 

public byte[] toBuffer(){

  ByteBuffer buf=ByteBuffer.allocate(SIZE);

  buf.put(type);

  buf.putInt(x);

  buf.putInt(y);

  buf.putInt(val);

  return buf.array();

}

Location: TotalOrder.java

Content: 

public TotalOrder(String title,long timeout,int num_fields,int field_size,String props,int num){

  Dimension s;

  this.timeout=timeout;

  this.num_fields=num_fields;

  this.field_size=field_size;

  this.num=num;

  setFont(def_font);

  start.addActionListener(e -> startSender());

  stop.addActionListener(e -> {

    try {

      TotOrderRequest req=new TotOrderRequest(TotOrderRequest.STOP,0,0,0);

      byte[] buf=req.toBuffer();

      channel.send(new Message(null,buf));

    }

 catch (    Exception ex) {

    }

  }

);

  clear.addActionListener(e -> canvas.clear());

  get_state.addActionListener(e -> {

    try {

      channel.getState(null,3000);

    }

 catch (    Throwable t) {

      error("exception fetching state: " + t);

    }

  }

);

  quit.addActionListener(e -> {

    channel.close();

    System.exit(0);

  }

);

  setTitle(title);

  addWindowListener(new EventHandler(this));

  setBackground(Color.white);

  setMenuBar(menubar);

  setLayout(new BorderLayout());

  canvas=new MyCanvas(num_fields,field_size,x_offset,y_offset);

  add("Center",canvas);

  button_panel.setLayout(new FlowLayout());

  button_panel.setFont(def_font2);

  button_panel.add(start);

  button_panel.add(stop);

  button_panel.add(clear);

  button_panel.add(get_state);

  button_panel.add(quit);

  add("South",button_panel);

  s=canvas.getSize();

  s.height+=100;

  setSize(s);

  try {

    channel=new JChannel(props);

    channel.setReceiver(new ReceiverAdapter(){

      public void receive(      Message msg){

        try {

          TotOrderRequest req=new TotOrderRequest();

          ByteBuffer buf=ByteBuffer.wrap(msg.getRawBuffer(),msg.getOffset(),msg.getLength());

          req.init(buf);

          processRequest(req);

        }

 catch (        Exception e) {

          System.err.println(e);

        }

      }

      public void getState(      OutputStream output) throws Exception {

        int[][] copy_of_state=canvas.getCopyOfState();

        Util.objectToStream(copy_of_state,new DataOutputStream(output));

      }

      public void setState(      InputStream input) throws Exception {

        canvas.setState(Util.objectFromStream(new DataInputStream(input)));

      }

      public void viewAccepted(      View view){

        System.out.println("view = " + view);

      }

    }

);

    channel.connect("TotalOrderGroup");

    channel.getState(null,8000);

  }

 catch (  Exception e) {

    e.printStackTrace();

    System.exit(-1);

  }

}

Location: TotalOrder.java

Content: 

public TotOrderRequest(){

}

Location: TotalOrder.java

Content: 

TotOrderRequest(byte type,int x,int y,int val){

  this.type=type;

  this.x=x;

  this.y=y;

  this.val=val;

}

Location: TotalOrder.java

Content: 

public void update(){

  checksum=checksum();

  repaint();

}

