Location: TimeScheduler.java

Content: 

/** 

 * Executes command with zero required delay. This has effect equivalent to <tt>schedule(command, 0, anyUnit)</tt>.

 * @param command the task to execute

 * @throws java.util.concurrent.RejectedExecutionException at discretion of <tt>RejectedExecutionHandler</tt>,if task cannot be accepted for execution because the executor has been shut down.

 * @throws NullPointerException if command is null

 */

default void execute(Runnable command){

  execute(command,true);

}

Location: TimeScheduler.java

Content: 

/** 

 * Creates and executes a periodic action that becomes enabled first after the given initial delay, and subsequently with the given period; that is executions will commence after <tt>initialDelay</tt> then <tt>initialDelay+period</tt>, then <tt>initialDelay + 2 * period</tt>, and so on. If any execution of the task encounters an exception, subsequent executions are suppressed. Otherwise, the task will only terminate via cancellation or termination of the executor.  If any execution of this task takes longer than its period, then subsequent executions may start late, but will not concurrently execute.

 * @param command the task to execute

 * @param initialDelay the time to delay first execution

 * @param period the period between successive executions

 * @param unit the time unit of the initialDelay and period parameters

 * @return a ScheduledFuture representing pending completion ofthe task, and whose <tt>get()</tt> method will throw an exception upon cancellation

 * @throws java.util.concurrent.RejectedExecutionException if the task cannot bescheduled for execution

 * @throws NullPointerException if command is null

 * @throws IllegalArgumentException if period less than or equal to zero

 */

default Future<?> scheduleAtFixedRate(Runnable command,long initialDelay,long period,TimeUnit unit){

  return scheduleAtFixedRate(command,initialDelay,period,unit,true);

}

Location: TimeScheduler.java

Content: 

/** 

 * Schedule a task for execution at varying intervals. After execution, the task will get rescheduled after {@link org.jgroups.util.TimeScheduler.Task#nextInterval()} milliseconds. This is delay-based and notrate-based. The task is never done until nextInterval() return a value <= 0 or the task is cancelled.

 * @param task the task to execute

 */

default Future<?> scheduleWithDynamicInterval(Task task){

  return scheduleWithDynamicInterval(task,true);

}

Location: TimeScheduler.java

Content: 

Future<?> scheduleWithDynamicInterval(Task task,boolean can_block);

Location: TimeScheduler.java

Content: 

/** 

 * Creates and executes a periodic action that becomes enabled first after the given initial delay, and subsequently with the given delay between the termination of one execution and the commencement of the next. If any execution of the task encounters an exception, subsequent executions are suppressed. Otherwise, the task will only terminate via cancellation or termination of the executor.

 * @param command the task to execute

 * @param initialDelay the time to delay first execution

 * @param delay the delay between the termination of one execution and the commencement of the next

 * @param unit the time unit of the initialDelay and delay parameters

 * @return a ScheduledFuture representing pending completion of the task, and whose <tt>get()</tt>method will throw an exception upon cancellation

 * @throws java.util.concurrent.RejectedExecutionException if the task cannot be scheduled for execution

 * @throws NullPointerException if command is null

 * @throws IllegalArgumentException if delay less than or equal to zero

 */

default Future<?> scheduleWithFixedDelay(Runnable command,long initialDelay,long delay,TimeUnit unit){

  return scheduleWithFixedDelay(command,initialDelay,delay,unit,true);

}

Location: TimeScheduler.java

Content: 

/** 

 * Creates and executes a one-shot action that becomes enabled after the given delay.

 * @param command the task to execute

 * @param delay the time from now to delay execution

 * @param unit the time unit of the delay parameter

 * @return a ScheduledFuture representing pending completion of the task and whose <tt>get()</tt> methodwill return <tt>null</tt> upon completion

 * @throws java.util.concurrent.RejectedExecutionException if the task cannot be scheduled for execution

 * @throws NullPointerException if command is null

 */

default Future<?> schedule(Runnable command,long delay,TimeUnit unit){

  return schedule(command,delay,unit,true);

}

