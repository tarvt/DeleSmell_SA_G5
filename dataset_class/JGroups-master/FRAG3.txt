Location: FRAG3.java

Content: 

@ManagedOperation(description="Removes all entries from the fragmentation table. " + "Dangerous: this might remove fragments that are still needed to assemble an entire message") public void clearAllFragments(){

  fragment_list.clear();

}

Location: FRAG3.java

Content: 

@ManagedOperation(description="removes all fragments sent by mbr") public void clearFragmentsFor(Address mbr){

  if (mbr == null)   return;

  fragment_list.remove(mbr);

  log.trace("%s: removed %s from fragmentation table",local_addr,mbr);

}

Location: FRAG3.java

Content: 

/** 

 * Send all fragments as separate messages (with same ID !). Example: <pre> Given the generated ID is 2344, number of fragments=3, message {dst,src,buf} would be fragmented into: [2344,3,0]{dst,src,buf1}, [2344,3,1]{dst,src,buf2} and [2344,3,2]{dst,src,buf3} </pre>

 */

protected void fragment(Message msg){

  try {

    byte[] buffer=msg.getRawBuffer();

    int original_length=msg.getLength();

    int num_frags=(int)Math.ceil(original_length / (double)frag_size);

    num_frags_sent.add(num_frags);

    if (log.isTraceEnabled()) {

      Address dest=msg.getDest();

      log.trace("%s: fragmenting message to %s (size=%d) into %d fragment(s) [frag_size=%d]",local_addr,dest != null ? dest : "<all>",original_length,num_frags,frag_size);

    }

    int frag_id=getNextId();

    int total_size=original_length + msg.getOffset();

    int offset=msg.getOffset();

    int tmp_size=0, i=0;

    while (offset < total_size) {

      if (offset + frag_size <= total_size)       tmp_size=frag_size;

 else       tmp_size=total_size - offset;

      Frag3Header hdr=new Frag3Header(frag_id,i,num_frags,original_length,offset - msg.getOffset());

      Message frag_msg=msg.copy(false,i == 0).setBuffer(buffer,offset,tmp_size).putHeader(this.id,hdr);

      down_prot.down(frag_msg);

      offset+=tmp_size;

      i++;

    }

  }

 catch (  Exception e) {

    log.error(String.format("%s: fragmentation failure",local_addr),e);

  }

}

Location: FRAG3.java

Content: 

public int fragSize(){

  return frag_size;

}

Location: FRAG3.java

Content: 

public FRAG3 fragSize(int size){

  frag_size=size;

  return this;

}

Location: FRAG3.java

Content: 

@ManagedAttribute(description="min/avg/max size (in bytes) for messages sent down that needed to be fragmented") public String getAvgSizeDown(){

  return avg_size_down.toString();

}

Location: FRAG3.java

Content: 

@ManagedAttribute(description="min/avg/max size (in bytes) of messages re-assembled from fragments") public String getAvgSizeUp(){

  return avg_size_up.toString();

}

Location: FRAG3.java

Content: 

/** 

 * 1. Get all the fragment buffers 2. When all are received -> Assemble them into one big buffer 3. Read headers and byte buffer from big buffer 4. Set headers and buffer in msg 5. Return the message

 */

protected Message unfragment(Message msg,Frag3Header hdr){

  Address sender=msg.getSrc();

  Message assembled_msg=null;

  ConcurrentMap<Integer,FragEntry> frag_table=fragment_list.get(sender);

  if (frag_table == null) {

    frag_table=Util.createConcurrentMap(16,.075f,16);

    ConcurrentMap<Integer,FragEntry> tmp=fragment_list.putIfAbsent(sender,frag_table);

    if (tmp != null)     frag_table=tmp;

  }

  num_frags_received.increment();

  FragEntry entry=frag_table.get(hdr.id);

  if (entry == null) {

    entry=new FragEntry(hdr.num_frags);

    FragEntry tmp=frag_table.putIfAbsent(hdr.id,entry);

    if (tmp != null)     entry=tmp;

  }

  if ((assembled_msg=entry.set(msg,hdr)) != null) {

    frag_table.remove(hdr.id);

    if (log.isTraceEnabled())     log.trace("%s: unfragmented message from %s (size=%d) from %d fragments",local_addr,sender,assembled_msg.getLength(),entry.num_frags);

  }

  return assembled_msg;

}

