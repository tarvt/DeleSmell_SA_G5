Location: TCP_NIO2.java

Content: 

@ManagedOperation(description="Clears all connections (they will get re-established). For testing only, don't use !") public void clearConnections(){

  server.clearConnections();

}

Location: TCP_NIO2.java

Content: 

@ManagedAttribute public int getOpenConnections(){

  return server.getNumConnections();

}

Location: TCP_NIO2.java

Content: 

@ManagedAttribute(description="Is the acceptor thread (calling select()) running") public boolean isAcceptorRunning(){

  return server != null && server.acceptorRunning();

}

Location: TCP_NIO2.java

Content: 

@ManagedAttribute(description="Is the selector open") public boolean isSelectorOpen(){

  return server != null && server.selectorOpen();

}

Location: TCP_NIO2.java

Content: 

@ManagedAttribute(description="Number of partial writes for all connections (not all bytes were written)") public int numPartialWrites(){

  return server.numPartialWrites();

}

Location: TCP_NIO2.java

Content: 

@ManagedAttribute(description="Number of times select() was called") public int numSelects(){

  return server != null ? server.numSelects() : -1;

}

Location: TCP_NIO2.java

Content: 

@ManagedOperation(description="Prints send and receive buffers for all connections") public String printBuffers(){

  return server.printBuffers();

}

Location: TCP_NIO2.java

Content: 

@ManagedAttribute(description="Number of ms a reader thread on a given connection can be idle (not receiving any messages) " + "until it terminates. New messages will start a new reader") public void readerIdleTime(long t){

  this.reader_idle_time=t;

  server.readerIdleTime(t);

}

Location: TCP_NIO2.java

Content: 

public TCP_NIO2(){

}

