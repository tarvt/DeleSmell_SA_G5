Location: FLUSH.java

Content: 

private void blockMessageDuringFlush(){

  boolean shouldSuspendByItself=false;

  blockMutex.lock();

  try {

    while (isBlockingFlushDown) {

      if (log.isDebugEnabled())       log.debug(localAddress + ": blocking for " + (timeout <= 0 ? "ever" : timeout + "ms"));

      if (timeout <= 0) {

        notBlockedDown.await();

      }

 else {

        shouldSuspendByItself=!notBlockedDown.await(timeout,TimeUnit.MILLISECONDS);

      }

      if (shouldSuspendByItself) {

        isBlockingFlushDown=false;

        log.warn(localAddress + ": unblocking after " + timeout+ "ms");

        flush_promise.setResult(new FlushStartResult(Boolean.TRUE,null));

        notBlockedDown.signalAll();

      }

    }

  }

 catch (  InterruptedException e) {

    Thread.currentThread().interrupt();

  }

 finally {

    blockMutex.unlock();

  }

}

Location: FLUSH.java

Content: 

private long currentViewId(){

  long viewId=-1;

synchronized (sharedLock) {

    ViewId view=currentView.getViewId();

    if (view != null) {

      viewId=view.getId();

    }

  }

  return viewId;

}

Location: FLUSH.java

Content: 

private Digest findHighestSequences(View view){

  List<Digest> digests=new ArrayList<>(flushCompletedMap.values());

  return maxSeqnos(view,digests);

}

Location: FLUSH.java

Content: 

@ManagedAttribute public double getAverageFlushDuration(){

  return averageFlushDuration;

}

Location: FLUSH.java

Content: 

@ManagedAttribute public int getNumberOfFlushes(){

  return numberOfFlushes;

}

Location: FLUSH.java

Content: 

public long getRetryTimeout(){

  return retry_timeout;

}

Location: FLUSH.java

Content: 

public long getStartFlushTimeout(){

  return start_flush_timeout;

}

Location: FLUSH.java

Content: 

@ManagedAttribute public long getTotalTimeInFlush(){

  return totalTimeInFlush;

}

Location: FLUSH.java

Content: 

private Object handleConnect(Event evt,boolean waitForUnblock){

  if (sentBlock.compareAndSet(false,true)) {

    sendBlockUpToChannel();

  }

  Object result=down_prot.down(evt);

  if (result instanceof Throwable) {

    sentBlock.set(false);

  }

  if (waitForUnblock)   waitForUnblock();

  return result;

}

Location: FLUSH.java

Content: 

private void handleFlushReconcile(Message msg){

  Address requester=msg.getSrc();

  Tuple<Collection<? extends Address>,Digest> tuple=readParticipantsAndDigest(msg.getRawBuffer(),msg.getOffset(),msg.getLength());

  Digest reconcileDigest=tuple.getVal2();

  if (log.isDebugEnabled())   log.debug(localAddress + ": received FLUSH_RECONCILE, passing digest to NAKACK " + reconcileDigest);

  down_prot.down(new Event(Event.REBROADCAST,reconcileDigest));

  if (log.isDebugEnabled())   log.debug(localAddress + ": returned from FLUSH_RECONCILE, " + " sending RECONCILE_OK to "+ requester);

  Message reconcileOk=new Message(requester).setFlag(Message.Flag.OOB,Message.Flag.INTERNAL).putHeader(this.id,new FlushHeader(FlushHeader.FLUSH_RECONCILE_OK));

  down_prot.down(reconcileOk);

}

Location: FLUSH.java

Content: 

private void handleStartFlush(Message msg,FlushHeader fh){

  Address flushRequester=msg.getSrc();

  boolean proceed=flushInProgress.compareAndSet(false,true);

  if (proceed) {

synchronized (sharedLock) {

      flushCoordinator=flushRequester;

    }

    onStartFlush(flushRequester,msg,fh);

  }

 else {

    Tuple<Collection<? extends Address>,Digest> tuple=readParticipantsAndDigest(msg.getRawBuffer(),msg.getOffset(),msg.getLength());

    Collection<? extends Address> flushParticipants=tuple.getVal1();

    Message response=new Message(flushRequester).putHeader(this.id,new FlushHeader(FlushHeader.FLUSH_NOT_COMPLETED,fh.viewID)).setBuffer(marshal(flushParticipants,null));

    down_prot.down(response);

    if (log.isDebugEnabled())     log.debug(localAddress + ": received START_FLUSH, responded with FLUSH_NOT_COMPLETED to " + flushRequester);

  }

}

Location: FLUSH.java

Content: 

private boolean hasVirtualSynchronyGaps(){

  ArrayList<Digest> digests=new ArrayList<>();

  digests.addAll(flushCompletedMap.values());

  return !same(digests);

}

Location: FLUSH.java

Content: 

private boolean isCurrentFlushMessage(FlushHeader fh){

  return fh.viewID == currentViewId();

}

Location: FLUSH.java

Content: 

protected static Buffer marshal(final Collection<? extends Address> participants,final Digest digest){

  final ByteArrayDataOutputStream out=new ByteArrayDataOutputStream(512);

  try {

    Util.writeAddresses(participants,out);

    Util.writeStreamable(digest,out);

    return out.getBuffer();

  }

 catch (  Exception ex) {

    return null;

  }

}

Location: FLUSH.java

Content: 

/** 

 * Returns a digest which contains, for all members of view, the highest delivered and received seqno of all digests 

 */

protected static Digest maxSeqnos(final View view,List<Digest> digests){

  if (view == null || digests == null)   return null;

  MutableDigest digest=new MutableDigest(view.getMembersRaw());

  digests.forEach(digest::merge);

  return digest;

}

Location: FLUSH.java

Content: 

private void onFlushCompleted(Address address,final Message m,final FlushHeader header){

  Message msg=null;

  boolean needsReconciliationPhase=false;

  boolean collision=false;

  final Tuple<Collection<? extends Address>,Digest> tuple=readParticipantsAndDigest(m.getRawBuffer(),m.getOffset(),m.getLength());

  Digest digest=tuple.getVal2();

synchronized (sharedLock) {

    flushCompletedMap.put(address,digest);

    flushCompleted=flushCompletedMap.size() >= flushMembers.size() && !flushMembers.isEmpty() && flushCompletedMap.keySet().containsAll(flushMembers);

    collision=!flushNotCompletedMap.isEmpty();

    if (log.isDebugEnabled())     log.debug(localAddress + ": FLUSH_COMPLETED from " + address+ ", completed "+ flushCompleted+ ", flushMembers "+ flushMembers+ ", flushCompleted "+ flushCompletedMap.keySet());

    needsReconciliationPhase=enable_reconciliation && flushCompleted && hasVirtualSynchronyGaps();

    if (needsReconciliationPhase) {

      Digest d=findHighestSequences(currentView);

      msg=new Message().setFlag(Message.Flag.OOB);

      reconcileOks.clear();

      msg.putHeader(this.id,new FlushHeader(FlushHeader.FLUSH_RECONCILE,currentViewId())).setBuffer(marshal(flushMembers,d));

      if (log.isDebugEnabled())       log.debug(localAddress + ": reconciling flush mebers due to virtual synchrony gap, digest is " + d+ " flush members are "+ flushMembers);

      flushCompletedMap.clear();

    }

 else     if (flushCompleted) {

      flushCompletedMap.clear();

    }

 else     if (collision) {

      flushNotCompletedMap.clear();

      flushCompletedMap.clear();

    }

  }

  if (needsReconciliationPhase) {

    down_prot.down(msg);

  }

 else   if (flushCompleted) {

    flush_promise.setResult(SUCCESS_START_FLUSH);

    if (log.isDebugEnabled())     log.debug(localAddress + ": all FLUSH_COMPLETED received");

  }

 else   if (collision) {

    Runnable r=() -> rejectFlush(tuple.getVal1(),header.viewID);

    new Thread(r).start();

  }

}

Location: FLUSH.java

Content: 

private void onFlushReconcileOK(Message msg){

  if (log.isDebugEnabled())   log.debug(localAddress + ": received reconcile ok from " + msg.getSrc());

synchronized (sharedLock) {

    reconcileOks.add(msg.getSrc());

    if (reconcileOks.size() >= flushMembers.size()) {

      flush_promise.setResult(SUCCESS_START_FLUSH);

      if (log.isDebugEnabled())       log.debug(localAddress + ": all FLUSH_RECONCILE_OK received");

    }

  }

}

Location: FLUSH.java

Content: 

@SuppressWarnings("unchecked") private void onResume(Event evt){

  List<Address> members=evt.getArg();

  long viewID=currentViewId();

  boolean isParticipant=false;

synchronized (sharedLock) {

    isParticipant=flushMembers.contains(localAddress) || (members != null && members.contains(localAddress));

  }

  if (members == null || members.isEmpty()) {

    Message msg=new Message(null).src(localAddress);

    if (log.isDebugEnabled())     log.debug(localAddress + ": received RESUME, sending STOP_FLUSH to all");

    msg.putHeader(this.id,new FlushHeader(FlushHeader.STOP_FLUSH,viewID));

    down_prot.down(msg);

  }

 else {

    for (    Address address : members) {

      Message msg=new Message(address).src(localAddress);

      if (log.isDebugEnabled())       log.debug(localAddress + ": received RESUME, sending STOP_FLUSH to " + address);

      msg.putHeader(this.id,new FlushHeader(FlushHeader.STOP_FLUSH,viewID));

      down_prot.down(msg);

    }

  }

  if (isParticipant)   waitForUnblock();

}

Location: FLUSH.java

Content: 

private void onStartFlush(Address flushStarter,Message msg,FlushHeader fh){

  if (stats) {

    startFlushTime=System.currentTimeMillis();

    numberOfFlushes+=1;

  }

  boolean proceed=false;

  boolean amIFlushInitiator=false;

  Tuple<Collection<? extends Address>,Digest> tuple=readParticipantsAndDigest(msg.getRawBuffer(),msg.getOffset(),msg.getLength());

synchronized (sharedLock) {

    amIFlushInitiator=flushStarter.equals(localAddress);

    if (!amIFlushInitiator) {

      flushCoordinator=flushStarter;

      flushMembers.clear();

      if (tuple.getVal1() != null) {

        flushMembers.addAll(tuple.getVal1());

      }

      flushMembers.removeAll(suspected);

    }

    proceed=flushMembers.contains(localAddress);

  }

  if (proceed) {

    if (sentBlock.compareAndSet(false,true)) {

      sendBlockUpToChannel();

      blockMutex.lock();

      try {

        isBlockingFlushDown=true;

      }

  finally {

        blockMutex.unlock();

      }

    }

 else {

      if (log.isDebugEnabled())       log.debug(localAddress + ": received START_FLUSH, but not sending BLOCK up");

    }

    Digest digest=(Digest)down_prot.down(Event.GET_DIGEST_EVT);

    Message start_msg=new Message(flushStarter).putHeader(this.id,new FlushHeader(FlushHeader.FLUSH_COMPLETED,fh.viewID)).setBuffer(marshal(tuple.getVal1(),digest));

    down_prot.down(start_msg);

    log.debug(localAddress + ": received START_FLUSH, responded with FLUSH_COMPLETED to " + flushStarter);

  }

}

Location: FLUSH.java

Content: 

private void onStopFlush(){

  if (stats && startFlushTime > 0) {

    long stopFlushTime=System.currentTimeMillis();

    totalTimeInFlush+=(stopFlushTime - startFlushTime);

    if (numberOfFlushes > 0) {

      averageFlushDuration=totalTimeInFlush / (double)numberOfFlushes;

    }

    startFlushTime=0;

  }

  if (log.isDebugEnabled())   log.debug(localAddress + ": received STOP_FLUSH, unblocking FLUSH.down() and sending UNBLOCK up");

  resetForNextFlush();

  if (sentUnblock.compareAndSet(false,true)) {

    sendUnBlockUpToChannel();

  }

}

Location: FLUSH.java

Content: 

private void onSuspect(Collection<Address> addresses){

  boolean amINeighbourOfCrashedFlushCoordinator=false;

  ArrayList<Address> flushMembersCopy=null;

synchronized (sharedLock) {

    boolean flushCoordinatorSuspected=addresses != null && addresses.contains(flushCoordinator);

    if (flushCoordinatorSuspected) {

      int indexOfCoordinator=flushMembers.indexOf(flushCoordinator);

      int myIndex=flushMembers.indexOf(localAddress);

      int diff=myIndex - indexOfCoordinator;

      amINeighbourOfCrashedFlushCoordinator=(diff == 1 || (myIndex == 0 && indexOfCoordinator == flushMembers.size()));

      if (amINeighbourOfCrashedFlushCoordinator) {

        flushMembersCopy=new ArrayList<>(flushMembers);

      }

    }

  }

  if (amINeighbourOfCrashedFlushCoordinator) {

    if (log.isDebugEnabled())     log.debug(localAddress + ": flush coordinator " + flushCoordinator+ " suspected,"+ " I am the neighbor, completing the flush ");

    onResume(new Event(Event.RESUME,flushMembersCopy));

  }

  boolean flushOkCompleted=false;

  Message m=null;

  long viewID=0;

synchronized (sharedLock) {

    suspected.addAll(addresses);

    flushMembers.removeAll(suspected);

    viewID=currentViewId();

    flushOkCompleted=!flushCompletedMap.isEmpty() && flushCompletedMap.keySet().containsAll(flushMembers);

    if (flushOkCompleted) {

      m=new Message(flushCoordinator).src(localAddress);

    }

    log.debug(localAddress + ": suspects: " + addresses+ ", completed "+ flushOkCompleted+ ", flushOkSet "+ flushCompletedMap+ ", flushMembers "+ flushMembers);

  }

  if (flushOkCompleted) {

    Digest digest=(Digest)down_prot.down(Event.GET_DIGEST_EVT);

    m.putHeader(this.id,new FlushHeader(FlushHeader.FLUSH_COMPLETED,viewID)).setBuffer(marshal(null,digest));

    down_prot.down(m);

    if (log.isDebugEnabled())     log.debug(localAddress + ": sent FLUSH_COMPLETED message to " + flushCoordinator);

  }

}

Location: FLUSH.java

Content: 

/** 

 * Starts the flush protocol

 * @param members List of participants in the flush protocol. Guaranteed to be non-null

 */

private void onSuspend(final List<Address> members){

  Message msg=null;

  Collection<Address> participantsInFlush=null;

synchronized (sharedLock) {

    flushCoordinator=localAddress;

    participantsInFlush=members;

    participantsInFlush.retainAll(currentView.getMembers());

    flushMembers.clear();

    flushMembers.addAll(participantsInFlush);

    flushMembers.removeAll(suspected);

    msg=new Message(null).src(localAddress).setBuffer(marshal(participantsInFlush,null)).putHeader(this.id,new FlushHeader(FlushHeader.START_FLUSH,currentViewId()));

  }

  if (participantsInFlush.isEmpty()) {

    flush_promise.setResult(SUCCESS_START_FLUSH);

  }

 else {

    down_prot.down(msg);

    if (log.isDebugEnabled())     log.debug(localAddress + ": flush coordinator " + " is starting FLUSH with participants "+ participantsInFlush);

  }

}

Location: FLUSH.java

Content: 

private boolean onViewChange(View view){

  boolean coordinatorLeft=false;

  View oldView;

synchronized (sharedLock) {

    suspected.retainAll(view.getMembers());

    oldView=currentView;

    currentView=view;

    coordinatorLeft=!oldView.getMembers().isEmpty() && !view.getMembers().isEmpty() && !view.containsMember(oldView.getCreator());

  }

  if (log.isDebugEnabled())   log.debug(localAddress + ": installing view " + view);

  return coordinatorLeft;

}

Location: FLUSH.java

Content: 

protected Tuple<Collection<? extends Address>,Digest> readParticipantsAndDigest(byte[] buffer,int offset,int length){

  if (buffer == null)   return null;

  try {

    DataInput in=new ByteArrayDataInputStream(buffer,offset,length);

    Collection<Address> participants=Util.readAddresses(in,ArrayList::new);

    Digest digest=Util.readStreamable(Digest::new,in);

    return new Tuple<>(participants,digest);

  }

 catch (  Exception ex) {

    log.error("%s: failed reading particpants and digest from message: %s",localAddress,ex);

    return null;

  }

}

Location: FLUSH.java

Content: 

private void rejectFlush(Collection<? extends Address> participants,long viewId){

  if (participants == null)   return;

  for (  Address flushMember : participants) {

    if (flushMember == null)     continue;

    Message reject=new Message(flushMember).src(localAddress).setFlag(Message.Flag.OOB,Message.Flag.INTERNAL).putHeader(this.id,new FlushHeader(FlushHeader.ABORT_FLUSH,viewId)).setBuffer(marshal(participants,null));

    down_prot.down(reject);

  }

}

Location: FLUSH.java

Content: 

private void resetForNextFlush(){

synchronized (sharedLock) {

    flushCompletedMap.clear();

    flushNotCompletedMap.clear();

    flushMembers.clear();

    suspected.clear();

    flushCoordinator=null;

    flushCompleted=false;

  }

  blockMutex.lock();

  try {

    isBlockingFlushDown=false;

    notBlockedDown.signalAll();

  }

  finally {

    blockMutex.unlock();

  }

  flushInProgress.set(false);

}

Location: FLUSH.java

Content: 

protected static boolean same(final List<Digest> digests){

  if (digests == null)   return false;

  Digest first=digests.get(0);

  for (int i=1; i < digests.size(); i++) {

    Digest current=digests.get(i);

    if (!first.equals(current))     return false;

  }

  return true;

}

Location: FLUSH.java

Content: 

private void sendBlockUpToChannel(){

  this.up(new Event(Event.BLOCK));

  sentUnblock.set(false);

}

Location: FLUSH.java

Content: 

private void sendUnBlockUpToChannel(){

  sentBlock.set(false);

  this.up(new Event(Event.UNBLOCK));

}

Location: FLUSH.java

Content: 

@ManagedOperation(description="Sets the bypass flag") public boolean setBypass(boolean flag){

  boolean ret=bypass;

  bypass=flag;

  return ret;

}

Location: FLUSH.java

Content: 

public void setRetryTimeout(long retry_timeout){

  this.retry_timeout=retry_timeout;

}

Location: FLUSH.java

Content: 

public void setStartFlushTimeout(long start_flush_timeout){

  this.start_flush_timeout=start_flush_timeout;

}

Location: FLUSH.java

Content: 

@ManagedOperation(description="Request cluster flush") public void startFlush(){

  startFlush(new Event(Event.SUSPEND));

}

Location: FLUSH.java

Content: 

@SuppressWarnings("unchecked") private void startFlush(Event evt){

  List<Address> flushParticipants=evt.getArg();

  startFlush(flushParticipants);

}

Location: FLUSH.java

Content: 

private void startFlush(List<Address> flushParticipants){

  if (!flushInProgress.get()) {

    flush_promise.reset();

synchronized (sharedLock) {

      if (flushParticipants == null)       flushParticipants=new ArrayList<>(currentView.getMembers());

    }

    onSuspend(flushParticipants);

    try {

      FlushStartResult r=flush_promise.getResultWithTimeout(start_flush_timeout);

      if (r.failed())       throw new RuntimeException(r.getFailureCause());

    }

 catch (    TimeoutException e) {

      Set<Address> missingMembers=new HashSet<>();

synchronized (sharedLock) {

        missingMembers.addAll(flushMembers);

        missingMembers.removeAll(flushCompletedMap.keySet());

      }

      rejectFlush(flushParticipants,currentViewId());

      throw new RuntimeException(localAddress + " timed out waiting for flush responses from " + missingMembers+ " after "+ start_flush_timeout+ " ms. Rejected flush to participants "+ flushParticipants,e);

    }

  }

 else {

    throw new RuntimeException("Flush attempt is in progress");

  }

}

Location: FLUSH.java

Content: 

private void waitForUnblock(){

  try {

    flush_unblock_promise.reset();

    flush_unblock_promise.getResultWithTimeout(end_flush_timeout);

  }

 catch (  TimeoutException t) {

    if (log.isWarnEnabled())     log.warn(localAddress + ": waiting for UNBLOCK timed out after " + end_flush_timeout+ " ms");

  }

}

