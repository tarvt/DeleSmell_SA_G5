Location: RELAY.java

Content: 

protected void createBridge(){

  try {

    if (log.isTraceEnabled())     log.trace("I'm the coordinator, creating a channel (props=" + bridge_props + ", cluster_name="+ bridge_name+ ")");

    bridge=new JChannel(bridge_props);

    bridge.setDiscardOwnMessages(true);

    bridge.setReceiver(new Receiver());

    bridge.connect(bridge_name);

  }

 catch (  Exception e) {

    log.error(Util.getMessage("FailedCreatingBridgeChannelProps") + bridge_props + ")",e);

  }

}

Location: RELAY.java

Content: 

/** 

 * Wraps the message annd sends it to the current coordinator 

 */

protected void forwardToCoord(Message msg){

  Message tmp=msg.copy(true,Global.BLOCKS_START_ID);

  if (tmp.getSrc() == null)   tmp.setSrc(local_addr);

  try {

    byte[] buf=Util.streamableToByteBuffer(tmp);

    if (coord != null) {

      if (coord.equals(local_addr)) {

        forward(buf,0,buf.length);

        return;

      }

      tmp=new Message(coord,buf,0,buf.length).putHeader(id,new RelayHeader(RelayHeader.Type.FORWARD));

      down_prot.down(tmp);

    }

  }

 catch (  Exception e) {

    log.error(Util.getMessage("FailedForwardingUnicastMessageToCoord"),e);

  }

}

Location: RELAY.java

Content: 

/** 

 * Forwards the message across the TCP link to the other local cluster 

 */

protected void forward(byte[] buffer,int offset,int length){

  Message msg=new Message(null,buffer,offset,length).putHeader(id,new RelayHeader(RelayHeader.Type.FORWARD));

  if (bridge != null) {

    try {

      bridge.send(msg);

    }

 catch (    Throwable t) {

      log.error(Util.getMessage("FailedForwardingMessageOverBridge"),t);

    }

  }

}

Location: RELAY.java

Content: 

protected View generateGlobalView(View local_view,View remote_view){

  return generateGlobalView(local_view,remote_view,false);

}

Location: RELAY.java

Content: 

protected View generateGlobalView(View local_view,View remote_view,boolean merge){

  List<View> views=new ArrayList<>(2);

  if (local_view != null)   views.add(local_view);

  if (remote_view != null)   views.add(remote_view);

  Collections.sort(views,(v1,v2) -> {

    ViewId vid1=v1.getViewId(), vid2=v2.getViewId();

    Address creator1=vid1.getCreator(), creator2=vid2.getCreator();

    int rc=creator1.compareTo(creator2);

    if (rc != 0)     return rc;

    long id1=vid1.getId(), id2=vid2.getId();

    return id1 > id2 ? 1 : id1 < id2 ? -1 : 0;

  }

);

  List<Address> combined_members=new ArrayList<>();

  for (  View view : views)   combined_members.addAll(view.getMembers());

  long new_view_id;

synchronized (this) {

    new_view_id=global_view_id++;

  }

  Address view_creator=combined_members.isEmpty() ? local_addr : combined_members.get(0);

  if (merge)   return new MergeView(view_creator,new_view_id,combined_members,views);

 else   return new View(view_creator,new_view_id,combined_members);

}

Location: RELAY.java

Content: 

@ManagedAttribute public String getBridgeView(){

  return bridge_view != null ? bridge_view.toString() : "n/a";

}

Location: RELAY.java

Content: 

@ManagedAttribute public String getGlobalView(){

  return global_view != null ? global_view.toString() : "n/a";

}

Location: RELAY.java

Content: 

@ManagedAttribute public String getLocalView(){

  return local_view != null ? local_view.toString() : "n/a";

}

Location: RELAY.java

Content: 

@ManagedAttribute public String getRemoteView(){

  return remote_view != null ? remote_view.toString() : "n/a";

}

Location: RELAY.java

Content: 

protected Object handleUpEvent(Message msg,RelayHeader hdr){

switch (hdr.type) {

case DISSEMINATE:

    Message copy=msg.copy();

  if (hdr.original_sender != null)   copy.setSrc(hdr.original_sender);

return up_prot.up(copy);

case FORWARD:

if (is_coord) forward(msg.getRawBuffer(),msg.getOffset(),msg.getLength());

break;

case VIEW:

return installView(msg.getRawBuffer(),msg.getOffset(),msg.getLength());

case BROADCAST_VIEW:

break;

default :

throw new IllegalArgumentException(hdr.type + " is not a valid type");

}

return null;

}

Location: RELAY.java

Content: 

protected Object installView(byte[] buf,int offset,int length){

  try {

    ViewData data=Util.streamableFromByteBuffer(ViewData::new,buf,offset,length);

    if (data.uuids != null)     NameCache.add(data.uuids);

    remote_view=data.remote_view;

    if (global_view == null || (data.global_view != null && !global_view.equals(data.global_view))) {

      global_view=data.global_view;

synchronized (this) {

        if (data.global_view.getViewId().getId() > global_view_id)         global_view_id=data.global_view.getViewId().getId();

      }

      if (present_global_views)       return up_prot.up(new Event(Event.VIEW_CHANGE,global_view));

    }

  }

 catch (  Exception e) {

    log.error(Util.getMessage("FailedInstallingView"),e);

  }

  return null;

}

Location: RELAY.java

Content: 

/** 

 * Does the payload match the 'site' ID. Checks only unicast destinations (multicast destinations return true) 

 */

protected boolean isLocal(Address dest){

  if (dest instanceof ExtendedUUID) {

    byte[] tmp=((ExtendedUUID)dest).get(SITE_ID);

    String str=Util.bytesToString(tmp);

    return Objects.equals(str,site);

  }

  return true;

}

Location: RELAY.java

Content: 

protected void sendOnLocalCluster(byte[] buf,int offset,int length){

  try {

    Message msg=Util.streamableFromByteBuffer(Message::new,buf,offset,length);

    Address sender=msg.getSrc();

    Address dest=msg.getDest();

    if (!isLocal(dest)) {

      if (log.isWarnEnabled())       log.warn("[" + local_addr + "] dest="+ dest+ " is not local (site="+ this.site+ "); discarding it");

      return;

    }

    msg.setSrc(local_addr);

    msg.putHeader(id,RelayHeader.createDisseminateHeader(sender));

    if (log.isTraceEnabled())     log.trace("received msg from " + sender + ", passing down the stack with dest="+ msg.getDest()+ " and src="+ msg.getSrc());

    down_prot.down(msg);

  }

 catch (  Exception e) {

    log.error(Util.getMessage("FailedSendingOnLocalCluster"),e);

  }

}

Location: RELAY.java

Content: 

protected void sendViewOnLocalCluster(final List<Address> destinations,final byte[] buffer){

  for (  Address dest : destinations) {

    Message view_msg=new Message(dest,buffer).putHeader(id,RelayHeader.create(RelayHeader.Type.VIEW));

    down_prot.down(view_msg);

  }

}

Location: RELAY.java

Content: 

protected void sendViewOnLocalCluster(ViewData data,boolean use_seperate_thread,final List<Address> new_mbrs){

  try {

    final byte[] buffer=Util.streamableToByteBuffer(data);

    final List<Address> destinations=new ArrayList<>();

    destinations.add(null);

    if (new_mbrs != null)     destinations.addAll(new_mbrs);

    if (use_seperate_thread) {

      timer.execute(() -> sendViewOnLocalCluster(destinations,buffer));

    }

 else     sendViewOnLocalCluster(destinations,buffer);

  }

 catch (  Exception e) {

    log.error(Util.getMessage("FailedSendingViewToLocalCluster"),e);

  }

}

Location: RELAY.java

Content: 

protected void sendViewOnLocalCluster(View remote_view,View global_view,boolean use_seperate_thread,List<Address> new_mbrs){

  sendViewOnLocalCluster(ViewData.create(remote_view,global_view),use_seperate_thread,new_mbrs);

}

Location: RELAY.java

Content: 

protected void sendViewToRemote(ViewData view_data,boolean use_seperate_thread){

  try {

    if (bridge != null && bridge.isConnected()) {

      byte[] buf=Util.streamableToByteBuffer(view_data);

      final Message msg=new Message(null,buf).putHeader(id,RelayHeader.create(RelayHeader.Type.VIEW));

      if (use_seperate_thread) {

        timer.execute(() -> {

          try {

            bridge.send(msg);

          }

 catch (          Exception e) {

            log.error(Util.getMessage("FailedSendingViewToRemote"),e);

          }

        }

);

      }

 else       bridge.send(msg);

    }

  }

 catch (  Exception e) {

    log.error(Util.getMessage("FailedSendingViewToRemote"),e);

  }

}

Location: RELAY.java

Content: 

@ManagedOperation public void setRelay(boolean relay){

  this.relay=relay;

}

Location: RELAY.java

Content: 

protected synchronized void startRemoteViewFetcher(){

  if (remote_view_fetcher_future == null || remote_view_fetcher_future.isDone()) {

    remote_view_fetcher_future=timer.scheduleWithFixedDelay(new RemoteViewFetcher(),500,2000,TimeUnit.MILLISECONDS);

  }

}

Location: RELAY.java

Content: 

protected synchronized void stopRemoteViewFetcher(){

  if (remote_view_fetcher_future != null) {

    remote_view_fetcher_future.cancel(false);

    remote_view_fetcher_future=null;

  }

}

