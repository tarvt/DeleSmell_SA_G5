Location: Owner.java

Content: 

public int compareTo(Owner o){

  return thread_id < o.thread_id ? -1 : thread_id > o.thread_id ? 1 : address.compareTo(o.address);

}

Location: Owner.java

Content: 

public boolean equals(Object obj){

  if (obj == null)   return false;

  Owner other=(Owner)obj;

  return address.equals(other.address) && thread_id == other.thread_id;

}

Location: Owner.java

Content: 

public Address getAddress(){

  return address;

}

Location: Owner.java

Content: 

public long getThreadId(){

  return thread_id;

}

Location: Owner.java

Content: 

public int hashCode(){

  return (int)(address.hashCode() + thread_id);

}

Location: Owner.java

Content: 

public Owner(){

}

Location: Owner.java

Content: 

public Owner(Address address,long thread_id){

  this.address=address;

  this.thread_id=thread_id;

}

Location: Owner.java

Content: 

@Override public void readFrom(DataInput in) throws IOException, ClassNotFoundException {

  address=Util.readAddress(in);

  thread_id=Bits.readLong(in);

}

Location: Owner.java

Content: 

@Override public void writeTo(DataOutput out) throws IOException {

  Util.writeAddress(address,out);

  Bits.writeLong(thread_id,out);

}

