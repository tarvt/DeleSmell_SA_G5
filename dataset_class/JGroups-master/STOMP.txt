Location: STOMP.java

Content: 

protected void broadcastEndpoint(){

  if (endpoint != null) {

    Message msg=new Message().putHeader(id,StompHeader.createHeader(StompHeader.Type.ENDPOINT,"endpoint",endpoint));

    down_prot.down(msg);

  }

}

Location: STOMP.java

Content: 

private String getAddress(StackType ip_version){

  InetSocketAddress saddr=(InetSocketAddress)srv_sock.getLocalSocketAddress();

  InetAddress tmp=saddr.getAddress();

  if (!tmp.isAnyLocalAddress())   return tmp.getHostAddress() + ":" + srv_sock.getLocalPort();

  for (  Util.AddressScope scope : Util.AddressScope.values()) {

    try {

      InetAddress addr=Util.getAddress(scope,ip_version);

      if (addr != null)       return addr.getHostAddress() + ":" + srv_sock.getLocalPort();

    }

 catch (    SocketException e) {

    }

  }

  return null;

}

Location: STOMP.java

Content: 

protected String getAllEndpoints(){

synchronized (endpoints) {

    return Util.printListWithDelimiter(endpoints.values(),",");

  }

}

Location: STOMP.java

Content: 

@ManagedAttribute public String getEndpoints(){

  return endpoints.toString();

}

Location: STOMP.java

Content: 

@ManagedAttribute(description="Number of client connections") public int getNumConnections(){

  return connections.size();

}

Location: STOMP.java

Content: 

@ManagedAttribute(description="Number of subscriptions") public int getNumSubscriptions(){

  return subscriptions.size();

}

Location: STOMP.java

Content: 

@ManagedAttribute(description="Print subscriptions") public String getSubscriptions(){

  return subscriptions.keySet().toString();

}

Location: STOMP.java

Content: 

public static Frame readFrame(DataInputStream in) throws IOException {

  String verb=Util.readLine(in);

  if (verb == null)   throw new EOFException("reading verb");

  if (verb.isEmpty())   return null;

  verb=verb.trim();

  Map<String,String> headers=new HashMap<>();

  byte[] body=null;

  for (; ; ) {

    String header=Util.readLine(in);

    if (header == null)     throw new EOFException("reading header");

    if (header.isEmpty())     break;

    int index=header.indexOf(':');

    if (index != -1)     headers.put(header.substring(0,index).trim(),header.substring(index + 1).trim());

  }

  if (headers.containsKey("content-length")) {

    int length=Integer.parseInt(headers.get("content-length"));

    body=new byte[length];

    in.read(body,0,body.length);

  }

 else {

    ByteBuffer buf=ByteBuffer.allocate(500);

    boolean terminate=false;

    for (; ; ) {

      int c=in.read();

      if (c == -1 || c == 0)       terminate=true;

      if (buf.remaining() == 0 || terminate) {

        if (body == null) {

          body=new byte[buf.position()];

          System.arraycopy(buf.array(),buf.arrayOffset(),body,0,buf.position());

        }

 else {

          byte[] tmp=new byte[body.length + buf.position()];

          System.arraycopy(body,0,tmp,0,body.length);

          try {

            System.arraycopy(buf.array(),buf.arrayOffset(),tmp,body.length,buf.position());

          }

 catch (          Throwable t) {

          }

          body=tmp;

        }

        buf.rewind();

      }

      if (terminate)       break;

      buf.put((byte)c);

    }

  }

  return new Frame(verb,headers,body);

}

Location: STOMP.java

Content: 

private void sendToClients(Map<String,String> headers,byte[] buffer,int offset,int length){

  int len=50 + length + (ServerVerb.MESSAGE.name().length() + 2);

  if (headers != null) {

    for (    Map.Entry<String,String> entry : headers.entrySet()) {

      len+=entry.getKey().length() + 2;

      len+=entry.getValue().length() + 2;

      len+=5;

    }

  }

  len+=(buffer != null ? 20 : 0);

  ByteBuffer buf=ByteBuffer.allocate(len);

  StringBuilder sb=new StringBuilder(ServerVerb.MESSAGE.name()).append("\n");

  if (headers != null) {

    for (    Map.Entry<String,String> entry : headers.entrySet())     sb.append(entry.getKey()).append(": ").append(entry.getValue()).append("\n");

  }

  if (buffer != null)   sb.append("content-length: ").append(length).append("\n");

  sb.append("\n");

  byte[] tmp=sb.toString().getBytes();

  if (buffer != null) {

    buf.put(tmp,0,tmp.length);

    buf.put(buffer,offset,length);

  }

  buf.put(NULL_BYTE);

  final Set<Connection> target_connections=new HashSet<>();

  String destination=headers != null ? headers.get("destination") : null;

  if (destination == null) {

synchronized (connections) {

      target_connections.addAll(connections);

    }

  }

 else {

    if (!exact_destination_match) {

      subscriptions.entrySet().stream().filter(entry -> entry.getKey().startsWith(destination)).forEach(entry -> target_connections.addAll(entry.getValue()));

    }

 else {

      Set<Connection> conns=subscriptions.get(destination);

      if (conns != null)       target_connections.addAll(conns);

    }

  }

  for (  Connection conn : target_connections)   conn.writeResponse(buf.array(),buf.arrayOffset(),buf.position());

}

Location: STOMP.java

Content: 

public STOMP(){

}

