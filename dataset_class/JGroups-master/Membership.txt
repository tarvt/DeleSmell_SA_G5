Location: Membership.java

Content: 

public Membership add(Address... mbrs){

  for (  Address mbr : mbrs)   add(mbr);

  return this;

}

Location: Membership.java

Content: 

/** 

 * Returns the component at the specified index

 * @param index - 0..size()-1

 * @throws ArrayIndexOutOfBoundsException - if the index is negative or not less than the current size of this Membership object.

 */

public Address elementAt(int index){

synchronized (members) {

    return members.get(index);

  }

}

Location: Membership.java

Content: 

/** 

 * Creates a member ship object with zero members

 */

public Membership(){

}

Location: Membership.java

Content: 

public Membership(Address... initial_members){

  if (initial_members != null)   add(initial_members);

}

Location: Membership.java

Content: 

/** 

 * Creates a Membership with a given initial members. The Address references are copied out of the list, so that the list passed in as parameters is not the same reference as the list that the membership class uses

 * @param initial_members a list of members that belong to this membership

 */

public Membership(Collection<Address> initial_members){

  if (initial_members != null)   add(initial_members);

}

Location: Membership.java

Content: 

/** 

 * Merges membership with the new members and removes suspects. The Merge method will remove all the suspects and add in the new members. It will do it in the order 1. Remove suspects 2. Add new members the order is very important to notice.

 * @param new_mems - a vector containing a list of members (Address) to be added to this membership

 * @param suspects - a vector containing a list of members (Address) to be removed from this membership

 */

public Membership merge(Collection<Address> new_mems,Collection<Address> suspects){

  remove(suspects);

  return add(new_mems);

}

Location: Membership.java

Content: 

/** 

 * Removes all the members contained in v from this membership

 * @param v a list of all the members to be removed

 */

public Membership remove(Collection<Address> v){

  if (v != null) {

synchronized (members) {

      members.removeAll(v);

    }

  }

  return this;

}

Location: Membership.java

Content: 

/** 

 * Clears the membership and adds all members of v This method will clear out all the old members of this membership by invoking the  {@code Clear} method. Then it will add all the allmembers provided in the vector v

 * @param v - a vector containing all the members this membership will contain

 */

public Membership set(Collection<Address> v){

  clear();

  return add(v);

}

Location: Membership.java

Content: 

/** 

 * Clears the membership and adds all members of a given membership parameter. Prior to setting membership this method will clear out all the old members of this membership by invoking the {@code clear} method.

 * @param m a membership containing all the members this membership will contain

 */

public Membership set(Membership m){

  clear();

  if (m != null)   add(m.getMembers());

  return this;

}

Location: Membership.java

Content: 

public Membership sort(){

synchronized (members) {

    Collections.sort(members);

  }

  return this;

}

