Location: ResponseCollectorTask.java

Content: 

public boolean add(Address member,T data){

  boolean retval;

  if ((retval=super.add(member,data)) && hasAllResponses())   stop();

  return retval;

}

Location: ResponseCollectorTask.java

Content: 

public ResponseCollectorTask(){

}

Location: ResponseCollectorTask.java

Content: 

public ResponseCollectorTask(Address... members){

  super(members);

}

Location: ResponseCollectorTask.java

Content: 

public ResponseCollectorTask(Collection<Address> members){

  super(members);

}

Location: ResponseCollectorTask.java

Content: 

public boolean retainAll(List<Address> members){

  boolean retval=super.retainAll(members);

  if (retval && this.hasAllResponses())   stop();

  return retval;

}

Location: ResponseCollectorTask.java

Content: 

public ResponseCollectorTask<T> setFinalizerTask(Consumer<ResponseCollectorTask<T>> r){

  this.finalizer_task=r;

  return this;

}

Location: ResponseCollectorTask.java

Content: 

public ResponseCollectorTask<T> setPeriodicTask(Consumer<ResponseCollectorTask<T>> pt){

  this.periodic_task=pt;

  return this;

}

Location: ResponseCollectorTask.java

Content: 

public synchronized ResponseCollectorTask<T> start(TimeScheduler timer,long initial_delay,long interval){

  if (hasAllResponses())   return this;

  if (periodic_task != null && (runner == null || runner.isDone()))   runner=timer.scheduleAtFixedRate(stub,initial_delay,interval,TimeUnit.MILLISECONDS);

  return this;

}

