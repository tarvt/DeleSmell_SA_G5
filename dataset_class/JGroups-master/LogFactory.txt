Location: LogFactory.java

Content: 

protected static Constructor<? extends Log> findConstructor(String classname,Class<?> arg) throws Exception {

  Class<?> clazz=Util.loadClass(classname,(Class<?>)null);

  @SuppressWarnings("unchecked") Constructor<? extends Log> constructor=(Constructor<? extends Log>)clazz.getDeclaredConstructor(arg);

  return constructor;

}

Location: LogFactory.java

Content: 

public static CustomLogFactory getCustomLogFactory(){

  return custom_log_factory;

}

Location: LogFactory.java

Content: 

public static Log getLog(Class<?> clazz){

  if (custom_log_factory != null)   return custom_log_factory.getLog(clazz);

  if (ctor_class != null) {

    try {

      return ctor_class.newInstance(clazz);

    }

 catch (    Throwable t) {

      throw new RuntimeException(t);

    }

  }

  if (use_jdk_logger)   return new JDKLogImpl(clazz);

  if (IS_LOG4J2_AVAILABLE)   return new Log4J2LogImpl(clazz);

  if (IS_SLF4J_AVAILABLE)   return new Slf4jLogImpl(clazz);

  return new JDKLogImpl(clazz);

}

Location: LogFactory.java

Content: 

public static Log getLog(String category){

  if (custom_log_factory != null)   return custom_log_factory.getLog(category);

  if (ctor_str != null) {

    try {

      ctor_str.newInstance(category);

    }

 catch (    Throwable t) {

      throw new RuntimeException(t);

    }

  }

  if (use_jdk_logger)   return new JDKLogImpl(category);

  if (IS_LOG4J2_AVAILABLE)   return new Log4J2LogImpl(category);

  if (IS_SLF4J_AVAILABLE)   return new Slf4jLogImpl(category);

  return new JDKLogImpl(category);

}

Location: LogFactory.java

Content: 

protected static boolean isAvailable(String classname){

  try {

    return Class.forName(classname) != null;

  }

 catch (  ClassNotFoundException cnfe) {

    return false;

  }

}

Location: LogFactory.java

Content: 

protected static boolean isPropertySet(String property_name){

  try {

    return Boolean.parseBoolean(System.getProperty(property_name));

  }

 catch (  Throwable t) {

    return false;

  }

}

Location: LogFactory.java

Content: 

private LogFactory(){

  throw new InstantiationError("Must not instantiate this class");

}

Location: LogFactory.java

Content: 

public static void setCustomLogFactory(CustomLogFactory factory){

  custom_log_factory=factory;

}

Location: LogFactory.java

Content: 

public static boolean useJdkLogger(){

  return use_jdk_logger;

}

Location: LogFactory.java

Content: 

public static void useJdkLogger(boolean flag){

  use_jdk_logger=flag;

}

