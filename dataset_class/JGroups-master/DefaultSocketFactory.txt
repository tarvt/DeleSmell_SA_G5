Location: DefaultSocketFactory.java

Content: 

public void close(DatagramSocket sock){

  Util.close(sock);

}

Location: DefaultSocketFactory.java

Content: 

public void close(ServerSocket sock) throws IOException {

  Util.close(sock);

}

Location: DefaultSocketFactory.java

Content: 

public void close(Socket sock) throws IOException {

  Util.close(sock);

}

Location: DefaultSocketFactory.java

Content: 

public DatagramSocket createDatagramSocket(String service_name) throws SocketException {

  return new DatagramSocket();

}

Location: DefaultSocketFactory.java

Content: 

public DatagramSocket createDatagramSocket(String service_name,int port) throws SocketException {

  return new DatagramSocket(port);

}

Location: DefaultSocketFactory.java

Content: 

public DatagramSocket createDatagramSocket(String service_name,int port,InetAddress laddr) throws SocketException {

  return new DatagramSocket(port,laddr);

}

Location: DefaultSocketFactory.java

Content: 

public DatagramSocket createDatagramSocket(String service_name,SocketAddress bindaddr) throws SocketException {

  return new DatagramSocket(bindaddr);

}

Location: DefaultSocketFactory.java

Content: 

public MulticastSocket createMulticastSocket(String service_name) throws IOException {

  return new MulticastSocket();

}

Location: DefaultSocketFactory.java

Content: 

public MulticastSocket createMulticastSocket(String service_name,int port) throws IOException {

  return new MulticastSocket(port);

}

Location: DefaultSocketFactory.java

Content: 

public MulticastSocket createMulticastSocket(String service_name,SocketAddress bindaddr) throws IOException {

  return new MulticastSocket(bindaddr);

}

Location: DefaultSocketFactory.java

Content: 

@SuppressWarnings("UnusedParameters") public ServerSocketChannel createServerSocketChannel(String service_name) throws IOException {

  return ServerSocketChannel.open();

}

Location: DefaultSocketFactory.java

Content: 

public ServerSocketChannel createServerSocketChannel(String service_name,int port) throws IOException {

  return createServerSocketChannel(service_name).bind(new InetSocketAddress(port));

}

Location: DefaultSocketFactory.java

Content: 

public ServerSocketChannel createServerSocketChannel(String service_name,int port,int backlog) throws IOException {

  return createServerSocketChannel(service_name).bind(new InetSocketAddress(port),backlog);

}

Location: DefaultSocketFactory.java

Content: 

public ServerSocketChannel createServerSocketChannel(String service_name,int port,int backlog,InetAddress bindAddr) throws IOException {

  return createServerSocketChannel(service_name).bind(new InetSocketAddress(bindAddr,port),backlog);

}

Location: DefaultSocketFactory.java

Content: 

public ServerSocket createServerSocket(String service_name) throws IOException {

  return new ServerSocket();

}

Location: DefaultSocketFactory.java

Content: 

public ServerSocket createServerSocket(String service_name,int port) throws IOException {

  return new ServerSocket(port);

}

Location: DefaultSocketFactory.java

Content: 

public ServerSocket createServerSocket(String service_name,int port,int backlog) throws IOException {

  return new ServerSocket(port,backlog);

}

Location: DefaultSocketFactory.java

Content: 

public ServerSocket createServerSocket(String service_name,int port,int backlog,InetAddress bindAddr) throws IOException {

  return new ServerSocket(port,backlog,bindAddr);

}

Location: DefaultSocketFactory.java

Content: 

public Socket createSocket(String service_name) throws IOException {

  return new Socket();

}

Location: DefaultSocketFactory.java

Content: 

public Socket createSocket(String service_name,InetAddress address,int port) throws IOException {

  return new Socket(address,port);

}

Location: DefaultSocketFactory.java

Content: 

public Socket createSocket(String service_name,InetAddress address,int port,InetAddress localAddr,int localPort) throws IOException {

  return new Socket(address,port,localAddr,localPort);

}

Location: DefaultSocketFactory.java

Content: 

public Socket createSocket(String service_name,String host,int port) throws IOException {

  return new Socket(host,port);

}

Location: DefaultSocketFactory.java

Content: 

public Socket createSocket(String service_name,String host,int port,InetAddress localAddr,int localPort) throws IOException {

  return new Socket(host,port,localAddr,localPort);

}

Location: DefaultSocketFactory.java

Content: 

public Map<Object,String> getSockets(){

  return null;

}

