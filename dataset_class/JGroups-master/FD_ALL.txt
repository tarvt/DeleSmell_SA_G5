Location: FD_ALL.java

Content: 

protected void addIfAbsent(Address mbr){

  if (mbr != null && !mbr.equals(local_addr))   timestamps.putIfAbsent(mbr,getTimestamp());

}

Location: FD_ALL.java

Content: 

public FD_ALL(){

}

Location: FD_ALL.java

Content: 

public int getHeartbeatsReceived(){

  return num_heartbeats_received;

}

Location: FD_ALL.java

Content: 

public int getHeartbeatsSent(){

  return num_heartbeats_sent;

}

Location: FD_ALL.java

Content: 

public long getInterval(){

  return interval;

}

Location: FD_ALL.java

Content: 

public int getSuspectEventsSent(){

  return num_suspect_events;

}

Location: FD_ALL.java

Content: 

public long getTimeoutCheckInterval(){

  return timeout_check_interval;

}

Location: FD_ALL.java

Content: 

protected boolean isHeartbeatSenderRunning(){

  return heartbeat_sender_future != null && !heartbeat_sender_future.isDone();

}

Location: FD_ALL.java

Content: 

protected boolean isTimeoutCheckerRunning(){

  return timeout_checker_future != null && !timeout_checker_future.isDone();

}

Location: FD_ALL.java

Content: 

public void setInterval(long interval){

  this.interval=interval;

}

Location: FD_ALL.java

Content: 

public void setTimeoutCheckInterval(long timeout_check_interval){

  this.timeout_check_interval=timeout_check_interval;

}

Location: FD_ALL.java

Content: 

@ManagedOperation(description="Resumes checking for crashed members") public void startFailureDetection(){

  startTimeoutChecker();

}

Location: FD_ALL.java

Content: 

protected void startHeartbeatSender(){

  lock.lock();

  try {

    if (!isHeartbeatSenderRunning())     heartbeat_sender_future=timer.scheduleWithFixedDelay(new HeartbeatSender(),interval,interval,TimeUnit.MILLISECONDS,getTransport() instanceof TCP);

  }

  finally {

    lock.unlock();

  }

}

Location: FD_ALL.java

Content: 

protected void startTimeoutChecker(){

  lock.lock();

  try {

    if (!isTimeoutCheckerRunning()) {

      timeout_checker_future=timer.scheduleWithFixedDelay(new TimeoutChecker(),timeout_check_interval,timeout_check_interval,TimeUnit.MILLISECONDS,false);

    }

  }

  finally {

    lock.unlock();

  }

}

Location: FD_ALL.java

Content: 

@ManagedOperation(description="Stops checking for crashed members") public void stopFailureDetection(){

  stopTimeoutChecker();

}

Location: FD_ALL.java

Content: 

protected void stopHeartbeatSender(){

  lock.lock();

  try {

    if (heartbeat_sender_future != null) {

      heartbeat_sender_future.cancel(true);

      heartbeat_sender_future=null;

    }

  }

  finally {

    lock.unlock();

  }

}

Location: FD_ALL.java

Content: 

protected void stopTimeoutChecker(){

  lock.lock();

  try {

    if (timeout_checker_future != null) {

      timeout_checker_future.cancel(true);

      timeout_checker_future=null;

    }

  }

  finally {

    lock.unlock();

  }

}

Location: FD_ALL.java

Content: 

public FD_ALL timeoutCheckInterval(long i){

  timeout_check_interval=i;

  return this;

}

Location: FD_ALL.java

Content: 

public FD_ALL timeout(long t){

  this.timeout=t;

  return this;

}

Location: FD_ALL.java

Content: 

protected void update(Address sender){

  if (sender != null && !sender.equals(local_addr))   timestamps.put(sender,getTimestamp());

  if (log.isTraceEnabled())   log.trace("Received heartbeat from %s",sender);

}

