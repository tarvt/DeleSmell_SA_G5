Location: ForwardQueue.java

Content: 

public void ack(long id){

  forward_table.remove(id);

  ack_promise.setResult(id);

}

Location: ForwardQueue.java

Content: 

protected void block(){

  send_lock.lock();

  try {

    while (flushing && running) {

      try {

        send_cond.await();

      }

 catch (      InterruptedException e) {

      }

    }

  }

  finally {

    send_lock.unlock();

  }

}

Location: ForwardQueue.java

Content: 

/** 

 * Checks if seqno has already been received from sender. This weeds out duplicates. Note that this method is never called concurrently for the same sender.

 */

protected boolean canDeliver(Address sender,long seqno){

  BoundedHashMap<Long,Long> seqno_set=delivery_table.get(sender);

  if (seqno_set == null) {

    seqno_set=new BoundedHashMap<>(delivery_table_max_size);

    BoundedHashMap<Long,Long> existing=delivery_table.put(sender,seqno_set);

    if (existing != null)     seqno_set=existing;

  }

  return seqno_set.add(seqno,seqno);

}

Location: ForwardQueue.java

Content: 

/** 

 * Total size of all queues of the delivery table 

 */

public int deliveryTableSize(){

  int retval=0;

  for (  BoundedHashMap<Long,Long> val : delivery_table.values())   retval+=val.size();

  return retval;

}

Location: ForwardQueue.java

Content: 

protected void doFlush(final Address new_target) throws InterruptedException {

  while (flushing && running) {

    if (in_flight_sends.get() == 0)     break;

    Thread.sleep(100);

  }

  send_lock.lockInterruptibly();

  try {

    if (log.isTraceEnabled())     log.trace(local_addr + ": target changed to " + new_target);

    flushMessagesInForwardTable(new_target);

  }

  finally {

    if (log.isTraceEnabled())     log.trace(local_addr + ": flushing completed");

    flushing=false;

    send_cond.signalAll();

    send_lock.unlock();

  }

}

Location: ForwardQueue.java

Content: 

/** 

 * Sends all messages currently in forward_table to the new target (changing the dest field). This needs to be done, so the underlying reliable unicast protocol (e.g. UNICAST) adds these messages to its retransmission mechanism<br/> Note that we need to resend the messages in order of their seqnos ! We also need to prevent other message from being inserted until we're done, that's why there's synchronization.<br/> Access to the forward_table doesn't need to be synchronized as there won't be any insertions during flushing (all down-threads are blocked)

 */

protected void flushMessagesInForwardTable(Address target){

  Map.Entry<Long,Message> first=forward_table.firstEntry();

  if (first == null)   return;

  Long key=first.getKey();

  Message val=first.getValue();

  Message forward_msg;

  while (flushing && running && !forward_table.isEmpty()) {

    forward_msg=val.copy();

    forward_msg.setDest(target);

    forward_msg.setFlag(Message.Flag.DONT_BUNDLE);

    if (log.isTraceEnabled())     log.trace(local_addr + ": flushing (forwarding) " + "::"+ key+ " to target "+ target);

    ack_promise.reset();

    down_prot.down(forward_msg);

    Long ack=ack_promise.getResult(500);

    if ((Objects.equals(ack,key)) || !forward_table.containsKey(key))     break;

  }

  for (  Map.Entry<Long,Message> entry : forward_table.entrySet()) {

    key=entry.getKey();

    val=entry.getValue();

    if (flushing && running) {

      forward_msg=val.copy();

      forward_msg.setDest(target);

      forward_msg.setFlag(Message.Flag.DONT_BUNDLE);

      if (log.isTraceEnabled())       log.trace(local_addr + ": flushing (forwarding) " + "::"+ key+ " to target "+ target);

      down_prot.down(forward_msg);

    }

  }

}

Location: ForwardQueue.java

Content: 

public void flush(Address new_target,final List<Address> mbrs){

  delivery_table.keySet().retainAll(mbrs);

  if (new_target != null) {

    hongshuai();

    flushing=false;

    Thread tmp=flusher;

    while (tmp != null && tmp.isAlive()) {

      tmp.interrupt();

      ack_promise.setResult(null);

      try {

        tmp.join();

      }

 catch (      InterruptedException e) {

      }

    }

    startFlusher(new_target);

  }

}

Location: ForwardQueue.java

Content: 

public ForwardQueue(Log log){

  this.log=log;

}

Location: ForwardQueue.java

Content: 

public int getDeliveryTableMaxSize(){

  return delivery_table_max_size;

}

Location: ForwardQueue.java

Content: 

public Protocol getDownProt(){

  return down_prot;

}

Location: ForwardQueue.java

Content: 

public Address getLocalAddr(){

  return local_addr;

}

Location: ForwardQueue.java

Content: 

public Protocol getUpProt(){

  return up_prot;

}

Location: ForwardQueue.java

Content: 

public void receive(long id,Message msg){

  Address sender=msg.getSrc();

  if (sender == null) {

    if (log.isErrorEnabled())     log.error(local_addr + ": sender is null, cannot deliver message " + "::"+ id);

    return;

  }

  if (!canDeliver(sender,id)) {

    if (log.isWarnEnabled())     log.warn(local_addr + ": dropped duplicate message " + sender+ "::"+ id);

    return;

  }

  if (log.isTraceEnabled())   log.trace(local_addr + ": delivering " + sender+ "::"+ id);

  up_prot.up(msg);

}

Location: ForwardQueue.java

Content: 

public void send(long id,Message msg){

  if (flushing)   block();

  in_flight_sends.incrementAndGet();

  try {

    forward_table.put(id,msg);

    if (running && !flushing)     down_prot.down(msg);

  }

  finally {

    in_flight_sends.decrementAndGet();

  }

}

Location: ForwardQueue.java

Content: 

public void setDeliveryTableMaxSize(int max_size){

  this.delivery_table_max_size=max_size;

}

Location: ForwardQueue.java

Content: 

public void setDownProt(Protocol down_prot){

  this.down_prot=down_prot;

}

Location: ForwardQueue.java

Content: 

public void setLocalAddr(Address local_addr){

  this.local_addr=local_addr;

}

Location: ForwardQueue.java

Content: 

public void setUpProt(Protocol up_prot){

  this.up_prot=up_prot;

}

Location: ForwardQueue.java

Content: 

protected synchronized void startFlusher(final Address new_coord){

  if (flusher == null || !flusher.isAlive()) {

    if (log.isTraceEnabled())     log.trace(local_addr + ": flushing started");

    flushing=true;

    flusher=new Flusher(new_coord);

    flusher.setName("Flusher");

    flusher.start();

  }

}

Location: ForwardQueue.java

Content: 

protected void stopFlusher(){

  flushing=false;

  Thread tmp=flusher;

  while (tmp != null && tmp.isAlive()) {

    tmp.interrupt();

    ack_promise.setResult(null);

    try {

      tmp.join();

    }

 catch (    InterruptedException e) {

    }

  }

}

Location: ForwardQueue.java

Content: 

protected void unblockAll(){

  flushing=false;

  send_lock.lock();

  try {

    send_cond.signalAll();

    ack_promise.setResult(null);

  }

  finally {

    send_lock.unlock();

  }

}

