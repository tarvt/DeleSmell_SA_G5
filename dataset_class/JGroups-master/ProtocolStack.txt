Location: ProtocolStack.java

Content: 

/** 

 * Adds a list of protocols

 * @param prots

 * @return

 * @since 2.1

 */

public ProtocolStack addProtocols(List<Protocol> prots){

  if (prots != null)   prots.forEach(this::addProtocol);

  return this;

}

Location: ProtocolStack.java

Content: 

/** 

 * Adds a list of protocols

 * @param prots

 * @return

 * @since 2.11

 */

public ProtocolStack addProtocols(Protocol... prots){

  if (prots != null) {

    for (    Protocol prot : prots)     addProtocol(prot);

  }

  return this;

}

Location: ProtocolStack.java

Content: 

/** 

 * Adds a protocol at the tail of the protocol list

 * @param prot

 * @return

 * @since 2.11

 */

public ProtocolStack addProtocol(Protocol prot){

  if (prot == null)   return this;

  prot.setProtocolStack(this);

  prot.setUpProtocol(this);

  if (bottom_prot == null) {

    top_prot=bottom_prot=prot;

    return this;

  }

  prot.setDownProtocol(top_prot);

  prot.getDownProtocol().setUpProtocol(prot);

  top_prot=prot;

  return this;

}

Location: ProtocolStack.java

Content: 

public ProtocolStack bottomProtocol(Protocol bottom){

  this.bottom_prot=bottom;

  return this;

}

Location: ProtocolStack.java

Content: 

protected static void callAfterCreationHook(Protocol prot,String classname) throws Exception {

  if (classname == null || prot == null)   return;

  Class<ProtocolHook> clazz=Util.loadClass(classname,prot.getClass());

  ProtocolHook hook=clazz.getDeclaredConstructor().newInstance();

  hook.afterCreation(prot);

}

Location: ProtocolStack.java

Content: 

private void checkAndSwitchTop(Protocol oldTop,Protocol newTop){

  if (oldTop == top_prot) {

    top_prot=newTop;

    top_prot.setUpProtocol(this);

  }

}

Location: ProtocolStack.java

Content: 

public List<Protocol> copyProtocols(ProtocolStack targetStack) throws Exception {

  List<Protocol> list=getProtocols();

  List<Protocol> retval=new ArrayList<>(list.size());

  for (  Protocol prot : list) {

    Protocol new_prot=prot.getClass().getDeclaredConstructor().newInstance();

    new_prot.setProtocolStack(targetStack);

    retval.add(new_prot);

    for (Class<?> clazz=prot.getClass(); clazz != null; clazz=clazz.getSuperclass()) {

      Field[] fields=clazz.getDeclaredFields();

      for (      Field field : fields) {

        if (field.isAnnotationPresent(Property.class)) {

          Object value=Util.getField(field,prot);

          Util.setField(field,new_prot,value);

        }

      }

      Method[] methods=clazz.getDeclaredMethods();

      for (      Method method : methods) {

        String methodName=method.getName();

        if (method.isAnnotationPresent(Property.class) && Configurator.isSetPropertyMethod(method,clazz)) {

          Property annotation=method.getAnnotation(Property.class);

          List<String> possible_names=new LinkedList<>();

          if (annotation.name() != null)           possible_names.add(annotation.name());

          possible_names.add(Util.methodNameToAttributeName(methodName));

          Field field=Util.findField(prot,possible_names);

          if (field != null) {

            Object value=Util.getField(field,prot);

            Util.setField(field,new_prot,value);

          }

        }

      }

    }

  }

  return retval;

}

Location: ProtocolStack.java

Content: 

protected Protocol createProtocol(String classname) throws Exception {

  String defaultProtocolName=ProtocolConfiguration.protocol_prefix + '.' + classname;

  Class<?> clazz=null;

  try {

    clazz=Util.loadClass(defaultProtocolName,getClass());

  }

 catch (  ClassNotFoundException e) {

  }

  if (clazz == null) {

    try {

      clazz=Util.loadClass(classname,getClass());

    }

 catch (    ClassNotFoundException e) {

    }

    if (clazz == null) {

      throw new Exception("unable to load class for protocol " + classname + " (either as an absolute - "+ classname+ " - or relative - "+ defaultProtocolName+ " - package name)");

    }

  }

  Protocol retval=(Protocol)clazz.getDeclaredConstructor().newInstance();

  if (retval == null)   throw new Exception("creation of instance for protocol " + classname + "failed");

  retval.setProtocolStack(this);

  return retval;

}

Location: ProtocolStack.java

Content: 

public Object down(Event evt){

  if (top_prot != null)   return top_prot.down(evt);

  return null;

}

Location: ProtocolStack.java

Content: 

public Object down(Message msg){

  if (top_prot != null)   return top_prot.down(msg);

  return null;

}

Location: ProtocolStack.java

Content: 

public Map<String,Map<String,Object>> dumpStats(){

  Map<String,Map<String,Object>> retval=new HashMap<>();

  for (Protocol p=top_prot; p != null; p=p.getDownProtocol()) {

    String prot_name=p.getName();

    if (prot_name == null)     continue;

    Map<String,Object> tmp=new TreeMap<>();

    dumpStats(p,tmp,log);

    if (!tmp.isEmpty())     retval.put(prot_name,tmp);

  }

  return retval;

}

Location: ProtocolStack.java

Content: 

protected static void dumpStats(Object obj,Map<String,Object> map,Log log){

  ResourceDMBean.dumpStats(obj,map,log);

  if (obj instanceof AdditionalJmxObjects) {

    Object[] objs=((AdditionalJmxObjects)obj).getJmxObjects();

    if (objs != null && objs.length > 0) {

      for (      Object o : objs) {

        if (o != null)         ResourceDMBean.dumpStats(o,map,log);

      }

    }

  }

}

Location: ProtocolStack.java

Content: 

public Map<String,Map<String,Object>> dumpStats(final String protocol_name,List<String> attrs){

  List<Protocol> prots=findProtocols(protocol_name);

  if (prots == null || prots.isEmpty())   return null;

  Map<String,Map<String,Object>> retval=new HashMap<>();

  for (  Protocol prot : prots) {

    Map<String,Object> tmp=new TreeMap<>();

    dumpStats(prot,tmp,log);

    if (attrs != null && !attrs.isEmpty()) {

      for (Iterator<String> it=tmp.keySet().iterator(); it.hasNext(); ) {

        String attrname=it.next();

        boolean found=false;

        for (        String attr : attrs) {

          if (attrname.startsWith(attr)) {

            found=true;

            break;

          }

        }

        if (!found)         it.remove();

      }

    }

    if (retval.containsKey(protocol_name))     retval.put(protocol_name + "-" + prot.getId(),tmp);

 else     retval.put(protocol_name,tmp);

  }

  return retval;

}

Location: ProtocolStack.java

Content: 

public <T extends Protocol>List<T> findProtocols(String regexp){

  List<T> retval=null;

  Pattern pattern=Pattern.compile(regexp);

  for (T prot=(T)top_prot; prot != null; prot=prot.getDownProtocol()) {

    String prot_name=prot.getName();

    if (pattern.matcher(prot_name).matches()) {

      if (retval == null)       retval=new ArrayList<>();

      retval.add(prot);

    }

  }

  return retval;

}

Location: ProtocolStack.java

Content: 

/** 

 * Finds the first protocol of a list and returns it. Returns null if no protocol can be found

 * @param classes A list of protocol classes to find

 * @return Protocol The protocol found

 */

@SafeVarargs public final <T extends Protocol>T findProtocol(Class<? extends Protocol>... classes){

  for (  Class<? extends Protocol> clazz : classes) {

    T prot=findProtocol(clazz);

    if (prot != null)     return prot;

  }

  return null;

}

Location: ProtocolStack.java

Content: 

/** 

 * Returns a given protocol or null if not found 

 */

public <T extends Protocol>T findProtocol(String name){

  T tmp=(T)top_prot;

  String prot_name;

  while (tmp != null) {

    prot_name=tmp.getName();

    if (Objects.equals(prot_name,name))     return tmp;

    tmp=tmp.getDownProtocol();

  }

  return null;

}

Location: ProtocolStack.java

Content: 

public <T extends Protocol>T getBottomProtocol(){

  T curr_prot=(T)this;

  while (curr_prot != null && curr_prot.getDownProtocol() != null)   curr_prot=curr_prot.getDownProtocol();

  return curr_prot;

}

Location: ProtocolStack.java

Content: 

public JChannel getChannel(){

  return channel;

}

Location: ProtocolStack.java

Content: 

public String getName(){

  return "ProtocolStack";

}

Location: ProtocolStack.java

Content: 

private static Map<String,String> getProps(Protocol prot){

  Map<String,String> retval=new HashMap<>();

  for (Class<?> clazz=prot.getClass(); clazz != null; clazz=clazz.getSuperclass()) {

    Field[] fields=clazz.getDeclaredFields();

    Property annotation;

    for (    Field field : fields) {

      if (field.isAnnotationPresent(Property.class)) {

        Object value=Util.getField(field,prot);

        if (value != null) {

          annotation=field.getAnnotation(Property.class);

          Class<?> conv_class=annotation.converter();

          PropertyConverter conv=null;

          try {

            conv=(PropertyConverter)conv_class.getDeclaredConstructor().newInstance();

          }

 catch (          Exception e) {

          }

          String tmp=conv != null ? conv.toString(value) : value.toString();

          retval.put(field.getName(),tmp);

        }

      }

    }

    Method[] methods=clazz.getDeclaredMethods();

    for (    Method method : methods) {

      String methodName=method.getName();

      if (method.isAnnotationPresent(Property.class) && Configurator.isSetPropertyMethod(method,clazz)) {

        annotation=method.getAnnotation(Property.class);

        List<String> possible_names=new LinkedList<>();

        if (annotation.name() != null)         possible_names.add(annotation.name());

        possible_names.add(Util.methodNameToAttributeName(methodName));

        Field field=Util.findField(prot,possible_names);

        if (field != null) {

          Object value=Util.getField(field,prot);

          if (value != null) {

            Class<?> conv_class=annotation.converter();

            PropertyConverter conv=null;

            try {

              conv=(PropertyConverter)conv_class.getDeclaredConstructor().newInstance();

            }

 catch (            Exception e) {

            }

            String tmp=conv != null ? conv.toString(value) : value.toString();

            retval.put(field.getName(),tmp);

          }

        }

      }

    }

  }

  return retval;

}

Location: ProtocolStack.java

Content: 

/** 

 * Returns all protocols in a list, from top to bottom. <em>These are not copies of protocols, so modifications will affect the actual instances !</em> 

 */

public List<Protocol> getProtocols(){

  List<Protocol> v=new ArrayList<>(15);

  Protocol p=top_prot;

  while (p != null) {

    v.add(p);

    p=p.getDownProtocol();

  }

  return v;

}

Location: ProtocolStack.java

Content: 

public Protocol getTopProtocol(){

  return top_prot;

}

Location: ProtocolStack.java

Content: 

/** 

 * Returns the bottom most protocol 

 */

public TP getTransport(){

  return (TP)getBottomProtocol();

}

Location: ProtocolStack.java

Content: 

public void init() throws Exception {

  List<Protocol> protocols=getProtocols();

  Collections.reverse(protocols);

  top_prot=Configurator.connectProtocols(protocols);

  top_prot.setUpProtocol(this);

  this.setDownProtocol(top_prot);

  bottom_prot=getBottomProtocol();

  StackType ip_version=Util.getIpStackType();

  InetAddress resolved_addr=Configurator.getValueFromProtocol(bottom_prot,"bind_addr");

  if (resolved_addr != null)   ip_version=resolved_addr instanceof Inet6Address ? StackType.IPv6 : StackType.IPv4;

 else   if (ip_version == StackType.Dual)   ip_version=StackType.IPv4;

  Configurator.setDefaultValues(protocols,ip_version);

  initProtocolStack();

}

Location: ProtocolStack.java

Content: 

/** 

 * Calls @link{ {@link Protocol#init()}} in all protocols, from bottom to top 

 */

public void initProtocolStack() throws Exception {

  List<Protocol> protocols=getProtocols();

  Collections.reverse(protocols);

  try {

    for (    Protocol prot : protocols) {

      if (prot.getProtocolStack() == null)       prot.setProtocolStack(this);

      callAfterCreationHook(prot,prot.afterCreationHook());

      prot.init();

    }

  }

 catch (  Exception ex) {

    this.destroy();

    throw ex;

  }

}

Location: ProtocolStack.java

Content: 

public void insertProtocolAtTop(Protocol prot){

  if (prot == null)   throw new IllegalArgumentException("prot needs to be non-null");

  Class<? extends Protocol> clazz=prot.getClass();

  Protocol existing_instance=findProtocol(clazz);

  if (existing_instance != null)   return;

  top_prot.up_prot=prot;

  prot.down_prot=top_prot;

  prot.up_prot=this;

  top_prot=prot;

  log.debug("inserted " + prot + " at the top of the stack");

}

Location: ProtocolStack.java

Content: 

public void insertProtocolInStack(Protocol prot,Protocol neighbor,Position position){

  if (position == Position.BELOW) {

    prot.setUpProtocol(neighbor);

    Protocol below=neighbor.getDownProtocol();

    prot.setDownProtocol(below);

    if (below != null)     below.setUpProtocol(prot);

    neighbor.setDownProtocol(prot);

  }

 else {

    Protocol above=neighbor.getUpProtocol();

    checkAndSwitchTop(neighbor,prot);

    prot.setUpProtocol(above);

    if (above != null)     above.setDownProtocol(prot);

    prot.setDownProtocol(neighbor);

    neighbor.setUpProtocol(prot);

  }

}

Location: ProtocolStack.java

Content: 

@SafeVarargs public final void insertProtocol(Protocol prot,Position position,Class<? extends Protocol>... neighbor_prots) throws Exception {

  if (neighbor_prots == null)   throw new IllegalArgumentException("neighbor_prots is null");

  Protocol neighbor=findProtocol(neighbor_prots);

  if (neighbor == null)   throw new IllegalArgumentException("protocol \"" + Arrays.toString(neighbor_prots) + "\" not found in "+ stack.printProtocolSpec(false));

  insertProtocolInStack(prot,neighbor,position);

}

Location: ProtocolStack.java

Content: 

/** 

 * Inserts an already created (and initialized) protocol into the protocol list. Sets the links to the protocols above and below correctly and adjusts the linked list of protocols accordingly. Note that this method may change the value of top_prot or bottom_prot.

 * @param prot The protocol to be inserted. Before insertion, a sanity check will ensure that noneof the existing protocols have the same name as the new protocol.

 * @param position Where to place the protocol with respect to the neighbor_prot (ABOVE, BELOW)

 * @param neighbor_prot The name of the neighbor protocol. An exception will be thrown if this nameis not found

 * @exception Exception Will be thrown when the new protocol cannot be created, or inserted.

 */

public void insertProtocol(Protocol prot,Position position,String neighbor_prot) throws Exception {

  if (neighbor_prot == null)   throw new IllegalArgumentException("neighbor_prot is null");

  Protocol neighbor=findProtocol(neighbor_prot);

  if (neighbor == null)   throw new IllegalArgumentException("protocol " + neighbor_prot + " not found in "+ printProtocolSpec(false));

  if (position == Position.BELOW && neighbor instanceof TP)   throw new IllegalArgumentException("Cannot insert protocol " + prot.getName() + " below transport protocol");

  insertProtocolInStack(prot,neighbor,position);

}

Location: ProtocolStack.java

Content: 

public String printProtocolSpecAsPlainString(){

  return printProtocolSpecAsPlainString(false);

}

Location: ProtocolStack.java

Content: 

private String printProtocolSpecAsPlainString(boolean print_props){

  StringBuilder sb=new StringBuilder();

  List<Protocol> protocols=getProtocols();

  if (protocols == null)   return null;

  Collections.reverse(protocols);

  for (  Protocol prot : protocols) {

    sb.append(prot.getClass().getName()).append("\n");

    if (print_props) {

      Map<String,String> tmp=getProps(prot);

      for (      Map.Entry<String,String> entry : tmp.entrySet()) {

        sb.append("    ").append(entry.getKey()).append("=").append(entry.getValue()).append("\n");

      }

    }

  }

  return sb.toString();

}

Location: ProtocolStack.java

Content: 

public String printProtocolSpecAsXML(){

  StringBuilder sb=new StringBuilder();

  Protocol prot=bottom_prot;

  int len, max_len=30;

  sb.append("<config>\n");

  while (prot != null && !Objects.equals(prot.getClass(),ProtocolStack.class)) {

    String prot_name=prot.getClass().getName();

    if (prot_name != null) {

      sb.append("  <").append(prot_name).append(" ");

      Map<String,String> tmpProps=getProps(prot);

      if (tmpProps != null) {

        len=prot_name.length();

        String s;

        for (Iterator<Entry<String,String>> it=tmpProps.entrySet().iterator(); it.hasNext(); ) {

          Entry<String,String> entry=it.next();

          s=entry.getKey() + "=\"" + entry.getValue()+ "\" ";

          if (len + s.length() > max_len) {

            sb.append("\n       ");

            len=8;

          }

          sb.append(s);

          len+=s.length();

        }

      }

      sb.append("/>\n");

      prot=prot.getUpProtocol();

    }

  }

  sb.append("</config>");

  return sb.toString();

}

Location: ProtocolStack.java

Content: 

/** 

 * Prints the names of the protocols, from the bottom to top. If include_properties is true, the properties for each protocol will also be printed.

 */

public String printProtocolSpec(boolean include_properties){

  StringBuilder sb=new StringBuilder();

  List<Protocol> protocols=getProtocols();

  if (protocols == null || protocols.isEmpty())   return null;

  boolean first_colon_printed=false;

  Collections.reverse(protocols);

  for (  Protocol prot : protocols) {

    String prot_name=prot.getClass().getName();

    int index=prot_name.indexOf(Global.PREFIX);

    if (index >= 0)     prot_name=prot_name.substring(Global.PREFIX.length());

    if (first_colon_printed)     sb.append(":");

 else     first_colon_printed=true;

    sb.append(prot_name);

    if (include_properties) {

      Map<String,String> tmp=getProps(prot);

      if (!tmp.isEmpty()) {

        boolean printed=false;

        sb.append("(");

        for (        Map.Entry<String,String> entry : tmp.entrySet()) {

          if (printed)           sb.append(";");

 else           printed=true;

          sb.append(entry.getKey()).append("=").append(entry.getValue());

        }

        sb.append(")\n");

      }

    }

  }

  return sb.toString();

}

Location: ProtocolStack.java

Content: 

/** 

 * Used for programmatic creation of ProtocolStack 

 */

public ProtocolStack(){

}

Location: ProtocolStack.java

Content: 

public ProtocolStack(JChannel channel) throws Exception {

  this.channel=channel;

  Class<?> tmp=ClassConfigurator.class;

  tmp.getDeclaredConstructor().newInstance();

}

Location: ProtocolStack.java

Content: 

@SafeVarargs public final ProtocolStack removeProtocols(Class<? extends Protocol>... protocols){

  for (  Class<? extends Protocol> protocol : protocols)   removeProtocol(protocol);

  return this;

}

Location: ProtocolStack.java

Content: 

public ProtocolStack removeProtocols(String... protocols){

  for (  String protocol : protocols)   removeProtocol(protocol);

  return this;

}

Location: ProtocolStack.java

Content: 

public <T extends Protocol>T removeProtocol(Class<? extends Protocol> prot){

  if (prot == null)   return null;

  return removeProtocol(findProtocol(prot));

}

Location: ProtocolStack.java

Content: 

/** 

 * Removes a protocol from the stack. Stops the protocol and readjusts the linked lists of protocols.

 * @param prot_name The name of the protocol. Since all protocol names in a stack have to be unique(otherwise the stack won't be created), the name refers to just 1 protocol.

 * @exception Exception Thrown if the protocol cannot be stopped correctly.

 */

public <T extends Protocol>T removeProtocol(String prot_name){

  if (prot_name == null)   return null;

  return removeProtocol(findProtocol(prot_name));

}

Location: ProtocolStack.java

Content: 

public <T extends Protocol>T removeProtocol(T prot){

  if (prot == null)   return null;

  Protocol above=prot.getUpProtocol(), below=prot.getDownProtocol();

  checkAndSwitchTop(prot,below);

  if (above != null)   above.setDownProtocol(below);

  if (below != null)   below.setUpProtocol(above);

  prot.setUpProtocol(null);

  prot.setDownProtocol(null);

  try {

    prot.stop();

  }

 catch (  Throwable t) {

    log.error(Util.getMessage("FailedStopping") + prot.getName() + ": "+ t);

  }

  try {

    prot.destroy();

  }

 catch (  Throwable t) {

    log.error(Util.getMessage("FailedDestroying") + prot.getName() + ": "+ t);

  }

  return prot;

}

Location: ProtocolStack.java

Content: 

/** 

 * Replaces one protocol instance with another. Should be done before the stack is connected

 * @param existing_prot

 * @param new_prot

 */

public void replaceProtocol(Protocol existing_prot,Protocol new_prot) throws Exception {

  Protocol up_neighbor=existing_prot.getUpProtocol(), down_neighbor=existing_prot.getDownProtocol();

  new_prot.setUpProtocol(existing_prot.getUpProtocol());

  new_prot.setDownProtocol(existing_prot.getDownProtocol());

  up_neighbor.setDownProtocol(new_prot);

  if (down_neighbor != null)   down_neighbor.setUpProtocol(new_prot);

  existing_prot.setDownProtocol(null);

  existing_prot.setUpProtocol(null);

  existing_prot.stop();

  existing_prot.destroy();

  if (new_prot.getUpProtocol() == this)   top_prot=new_prot;

  callAfterCreationHook(new_prot,afterCreationHook());

  new_prot.init();

}

Location: ProtocolStack.java

Content: 

public ProtocolStack setChannel(JChannel ch){

  this.channel=ch;

  return this;

}

Location: ProtocolStack.java

Content: 

public void setup(List<ProtocolConfiguration> configs) throws Exception {

  if (top_prot == null) {

    top_prot=new Configurator(this).setupProtocolStack(configs);

    top_prot.setUpProtocol(this);

    this.setDownProtocol(top_prot);

    bottom_prot=getBottomProtocol();

    initProtocolStack();

  }

}

Location: ProtocolStack.java

Content: 

public void setup(ProtocolStack stack) throws Exception {

  if (top_prot == null) {

    top_prot=new Configurator(this).setupProtocolStack(stack);

    top_prot.setUpProtocol(this);

    this.setDownProtocol(top_prot);

    bottom_prot=getBottomProtocol();

    initProtocolStack();

  }

}

Location: ProtocolStack.java

Content: 

/** 

 * Start all protocols. The  {@link Protocol#start()} method is called in each protocol,<em>from bottom to top</em>. Each protocol can perform some initialization, e.g. create a multicast socket

 */

public void startStack() throws Exception {

  if (!stopped)   return;

  List<Protocol> protocols=getProtocols();

  Collections.reverse(protocols);

  for (  Protocol prot : protocols)   prot.start();

  TP transport=getTransport();

  transport.registerProbeHandler(props_handler);

  stopped=false;

}

Location: ProtocolStack.java

Content: 

/** 

 * Iterates through all the protocols <em>from top to bottom</em> and does the following: <ol> <li>Waits until all messages in the down queue have been flushed (ie., size is 0) <li>Calls stop() on the protocol </ol>

 */

public void stopStack(String cluster){

  if (stopped)   return;

  getProtocols().forEach(Protocol::stop);

  TP transport=getTransport();

  transport.unregisterProbeHandler(props_handler);

  stopped=true;

}

Location: ProtocolStack.java

Content: 

public ProtocolStack topProtocol(Protocol top){

  this.top_prot=top;

  return this;

}

Location: ProtocolStack.java

Content: 

public Object up(Event evt){

  return channel.up(evt);

}

Location: ProtocolStack.java

Content: 

public Object up(Message msg){

  return channel.up(msg);

}

Location: ProtocolStack.java

Content: 

public void up(MessageBatch batch){

  channel.up(batch);

}

