Location: Cache.java

Content: 

@ManagedOperation public void disableReaping(){

  if (task != null) {

    task.cancel(false);

    task=null;

  }

}

Location: Cache.java

Content: 

/** 

 * Runs the reaper every interval ms, evicts expired items 

 */

@ManagedOperation public void enableReaping(long interval){

  if (task != null)   task.cancel(false);

  task=timer.scheduleWithFixedDelay(new Reaper(),0,interval,TimeUnit.MILLISECONDS);

}

Location: Cache.java

Content: 

public Value<V> getEntry(K key){

  if (log.isTraceEnabled())   log.trace("getEntry(" + key + ")");

  return map.get(key);

}

Location: Cache.java

Content: 

/** 

 * This method should not be used to add or remove elements ! It was just added because ReplCacheDemo requires it for its data model

 * @return

 */

public ConcurrentMap<K,Value<V>> getInternalMap(){

  return map;

}

Location: Cache.java

Content: 

public int getMaxNumberOfEntries(){

  return max_num_entries;

}

Location: Cache.java

Content: 

@ManagedAttribute public int getSize(){

  return map.size();

}

Location: Cache.java

Content: 

private V getValue(Value<V> val){

  return val == null ? null : val.getValue();

}

Location: Cache.java

Content: 

private boolean isExpired(Value<V> val){

  return val != null && (val.timeout == -1 || (val.timeout > 0 && System.currentTimeMillis() > val.insertion_time + val.timeout));

}

Location: Cache.java

Content: 

@ManagedAttribute public boolean isReapingEnabled(){

  return task != null && !task.isCancelled();

}

Location: Cache.java

Content: 

public void setMaxNumberOfEntries(int max_num_entries){

  this.max_num_entries=max_num_entries;

}

