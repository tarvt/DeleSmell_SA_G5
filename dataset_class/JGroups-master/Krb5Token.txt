Location: Krb5Token.java

Content: 

private void authenticateClientPrincipal() throws LoginException {

  subject=Krb5TokenUtils.generateSecuritySubject(JASS_SECURITY_CONFIG,client_principal_name,client_password);

}

Location: Krb5Token.java

Content: 

private void generateServiceTicket() throws IOException {

  try {

    krbServiceTicket=Krb5TokenUtils.initiateSecurityContext(subject,service_principal_name);

  }

 catch (  GSSException ge) {

    throw new IOException("Failed to generate serviceticket",ge);

  }

}

Location: Krb5Token.java

Content: 

/** 

 * Private Methods

 */

private boolean isAuthenticated(){

  return (subject != null);

}

Location: Krb5Token.java

Content: 

public Krb5Token(){

}

Location: Krb5Token.java

Content: 

private void readRemoteServiceTicketFromStream(DataInput in) throws IOException {

  try {

    remoteKrbServiceTicket=Krb5TokenUtils.decodeDataFromStream(in);

  }

 catch (  IOException ioe) {

    throw ioe;

  }

catch (  Exception e) {

    throw new IOException(e);

  }

}

Location: Krb5Token.java

Content: 

public void setValue(Properties properties){

  String value;

  if ((value=properties.getProperty(CLIENT_PRINCIPAL_NAME)) != null) {

    this.client_principal_name=value;

    properties.remove(CLIENT_PRINCIPAL_NAME);

  }

  if ((value=properties.getProperty(CLIENT_PASSWORD)) != null) {

    this.client_password=value;

    properties.remove(CLIENT_PASSWORD);

  }

  if ((value=properties.getProperty(SERVICE_PRINCIPAL_NAME)) != null) {

    this.service_principal_name=value;

    properties.remove(SERVICE_PRINCIPAL_NAME);

  }

  try {

    authenticateClientPrincipal();

  }

 catch (  Exception e) {

    log.warn("Krb5Token failed to authenticate",e);

    subject=null;

  }

}

Location: Krb5Token.java

Content: 

private void validateRemoteServiceTicket(Krb5Token remoteToken) throws Exception {

  byte[] remoteKrbServiceTicketLocal=remoteToken.remoteKrbServiceTicket;

  String clientPrincipalName=Krb5TokenUtils.validateSecurityContext(subject,remoteKrbServiceTicketLocal);

  if (!clientPrincipalName.equals(this.client_principal_name))   throw new Exception("Client Principal Names did not match");

}

Location: Krb5Token.java

Content: 

private void writeServiceTicketToSream(DataOutput out) throws IOException {

  try {

    Krb5TokenUtils.encodeDataToStream(krbServiceTicket,out);

  }

 catch (  IOException ioe) {

    throw ioe;

  }

catch (  Exception e) {

    throw new IOException(e);

  }

}

