Location: NioBaseServer.java

Content: 

protected void acceptorDone(){

}

Location: NioBaseServer.java

Content: 

public boolean acceptorRunning(){

  return acceptor != null && acceptor.isAlive();

}

Location: NioBaseServer.java

Content: 

public boolean copyOnPartialWrite(){

  return copy_on_partial_write;

}

Location: NioBaseServer.java

Content: 

public NioBaseServer copyOnPartialWrite(boolean b){

  this.copy_on_partial_write=b;

synchronized (this) {

    for (    Connection c : conns.values()) {

      NioConnection conn=(NioConnection)c;

      conn.copyOnPartialWrite(b);

    }

  }

  return this;

}

Location: NioBaseServer.java

Content: 

@Override protected NioConnection createConnection(Address dest) throws Exception {

  return new NioConnection(dest,this).copyOnPartialWrite(copy_on_partial_write);

}

Location: NioBaseServer.java

Content: 

protected void handleAccept(SelectionKey key) throws Exception {

  ;

}

Location: NioBaseServer.java

Content: 

public int maxSendBuffers(){

  return max_send_buffers;

}

Location: NioBaseServer.java

Content: 

public NioBaseServer maxSendBuffers(int num){

  this.max_send_buffers=num;

  return this;

}

Location: NioBaseServer.java

Content: 

protected NioBaseServer(ThreadFactory f,SocketFactory sf){

  super(f,sf);

}

Location: NioBaseServer.java

Content: 

public long readerIdleTime(){

  return reader_idle_time;

}

Location: NioBaseServer.java

Content: 

protected SelectionKey register(SelectableChannel ch,int interest_ops,NioConnection conn) throws Exception {

  reg_lock.lock();

  try {

    registration=true;

    selector.wakeup();

    return ch.register(selector,interest_ops,conn);

  }

  finally {

    reg_lock.unlock();

  }

}

Location: NioBaseServer.java

Content: 

public boolean selectorOpen(){

  return selector != null && selector.isOpen();

}

