Location: Route.java

Content: 

public JChannel bridge(){

  return bridge;

}

Location: Route.java

Content: 

public int compareTo(Route o){

  return site_master.compareTo(o.siteMaster());

}

Location: Route.java

Content: 

protected Message createMessage(Address target,Address final_destination,Address original_sender,final Message msg){

  Message copy=relay.copy(msg).dest(target).src(null);

  RELAY2.Relay2Header hdr=new RELAY2.Relay2Header(RELAY2.Relay2Header.DATA,final_destination,original_sender);

  copy.putHeader(relay.getId(),hdr);

  return copy;

}

Location: Route.java

Content: 

public Route(Address site_master,JChannel bridge,RELAY2 relay,Log log){

  this.site_master=site_master;

  this.bridge=bridge;

  this.relay=relay;

  this.log=log;

}

Location: Route.java

Content: 

public void send(Address final_destination,Address original_sender,final Message msg){

  if (log.isTraceEnabled())   log.trace("routing message to " + final_destination + " via "+ site_master);

  long start=stats ? System.nanoTime() : 0;

  try {

    Message copy=createMessage(site_master,final_destination,original_sender,msg);

    bridge.send(copy);

    if (stats) {

      relay.addToRelayedTime(System.nanoTime() - start);

      relay.incrementRelayed();

    }

  }

 catch (  Exception e) {

    log.error(Util.getMessage("FailureRelayingMessage"),e);

  }

}

Location: Route.java

Content: 

public boolean stats(){

  return stats;

}

Location: Route.java

Content: 

public Route stats(boolean f){

  stats=f;

  return this;

}

