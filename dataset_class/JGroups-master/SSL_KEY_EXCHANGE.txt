Location: SSL_KEY_EXCHANGE.java

Content: 

protected void accept(){

  try (SSLSocket client_sock=(SSLSocket)srv_sock.accept()){

    client_sock.setEnabledCipherSuites(client_sock.getSupportedCipherSuites());

    client_sock.startHandshake();

    SSLSession sslSession=client_sock.getSession();

    log.debug("%s: accepted SSL connection from %s; protocol: %s, cipher suite: %s",local_addr,client_sock.getRemoteSocketAddress(),sslSession.getProtocol(),sslSession.getCipherSuite());

    if (session_verifier != null)     session_verifier.verify(sslSession);

    InputStream in=client_sock.getInputStream();

    DataOutput out=new DataOutputStream(client_sock.getOutputStream());

    byte ordinal=(byte)in.read();

    Type req=Type.values()[ordinal];

    if (req != Type.SECRET_KEY_REQ)     throw new IllegalStateException(String.format("expected request of %s but got type=%d",Type.SECRET_KEY_REQ,ordinal));

    Tuple<SecretKey,byte[]> tuple=(Tuple<SecretKey,byte[]>)up_prot.up(new Event(Event.GET_SECRET_KEY));

    if (tuple == null)     return;

    byte[] version=tuple.getVal2();

    byte[] secret_key=tuple.getVal1().getEncoded();

    out.write(Type.SECRET_KEY_RSP.ordinal());

    out.writeInt(version.length);

    out.write(version,0,version.length);

    out.writeInt(secret_key.length);

    out.write(secret_key);

  }

 catch (  Throwable t) {

    log.trace("%s: failure handling client socket: %s",local_addr,t.getMessage());

  }

}

Location: SSL_KEY_EXCHANGE.java

Content: 

protected synchronized void becomeKeyserver() throws Exception {

  if (srv_sock == null || srv_sock.isClosed()) {

    log.debug("%s: becoming keyserver; creating server socket",local_addr);

    srv_sock=createServerSocket();

    srv_sock_handler=new Runner(getThreadFactory(),SSL_KEY_EXCHANGE.class.getSimpleName() + "-runner",this::accept,() -> Util.close(srv_sock));

    srv_sock_handler.start();

    log.debug("%s: SSL server socket listening on %s",local_addr,srv_sock.getLocalSocketAddress());

  }

}

Location: SSL_KEY_EXCHANGE.java

Content: 

protected SSLServerSocket createServerSocket() throws Exception {

  SSLContext ctx=getContext();

  SSLServerSocketFactory sslServerSocketFactory=ctx.getServerSocketFactory();

  SSLServerSocket sslServerSocket=null;

  for (int i=0; i < port_range; i++) {

    try {

      sslServerSocket=(SSLServerSocket)sslServerSocketFactory.createServerSocket(port + i,50,bind_addr);

      sslServerSocket.setNeedClientAuth(require_client_authentication);

      return sslServerSocket;

    }

 catch (    Throwable t) {

    }

  }

  throw new IllegalStateException(String.format("found no valid port to bind to in range [%d-%d]",port,port + port_range));

}

Location: SSL_KEY_EXCHANGE.java

Content: 

protected SSLSocket createSocketTo(Address target) throws Exception {

  SSLContext ctx=getContext();

  SSLSocketFactory sslSocketFactory=ctx.getSocketFactory();

  if (target instanceof IpAddress)   return createSocketTo((IpAddress)target,sslSocketFactory);

  IpAddress dest=(IpAddress)down_prot.down(new Event(Event.GET_PHYSICAL_ADDRESS,target));

  SSLSocket sock=null;

  for (int i=0; i < port_range; i++) {

    try {

      sock=(SSLSocket)sslSocketFactory.createSocket(dest.getIpAddress(),port + i);

      sock.setSoTimeout(socket_timeout);

      sock.setEnabledCipherSuites(sock.getSupportedCipherSuites());

      sock.startHandshake();

      SSLSession sslSession=sock.getSession();

      log.debug("%s: created SSL connection to %s (%s); protocol: %s, cipher suite: %s",local_addr,target,sock.getRemoteSocketAddress(),sslSession.getProtocol(),sslSession.getCipherSuite());

      if (session_verifier != null)       session_verifier.verify(sslSession);

      return sock;

    }

 catch (    SecurityException sec_ex) {

      throw sec_ex;

    }

catch (    Throwable t) {

    }

  }

  throw new IllegalStateException(String.format("failed connecting to %s (port range [%d - %d])",dest.getIpAddress(),port,port + port_range));

}

Location: SSL_KEY_EXCHANGE.java

Content: 

protected SSLSocket createSocketTo(IpAddress dest,SSLSocketFactory sslSocketFactory){

  try {

    SSLSocket sock=(SSLSocket)sslSocketFactory.createSocket(dest.getIpAddress(),dest.getPort());

    sock.setSoTimeout(socket_timeout);

    sock.setEnabledCipherSuites(sock.getSupportedCipherSuites());

    sock.startHandshake();

    SSLSession sslSession=sock.getSession();

    log.debug("%s: created SSL connection to %s (%s); protocol: %s, cipher suite: %s",local_addr,dest,sock.getRemoteSocketAddress(),sslSession.getProtocol(),sslSession.getCipherSuite());

    if (session_verifier != null)     session_verifier.verify(sslSession);

    return sock;

  }

 catch (  SecurityException sec_ex) {

    throw sec_ex;

  }

catch (  Throwable t) {

    throw new IllegalStateException(String.format("failed connecting to %s: %s",dest,t.getMessage()));

  }

}

Location: SSL_KEY_EXCHANGE.java

Content: 

public InetAddress getBindAddress(){

  return bind_addr;

}

Location: SSL_KEY_EXCHANGE.java

Content: 

protected SSLContext getContext() throws Exception {

  if (this.ssl_ctx != null)   return this.ssl_ctx;

  KeyManagerFactory keyManagerFactory=KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());

  keyManagerFactory.init(key_store,keystore_password.toCharArray());

  KeyManager[] km=keyManagerFactory.getKeyManagers();

  TrustManagerFactory trustManagerFactory=TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());

  trustManagerFactory.init(key_store);

  TrustManager[] tm=trustManagerFactory.getTrustManagers();

  SSLContext sslContext=SSLContext.getInstance("TLSv1");

  sslContext.init(km,tm,null);

  return this.ssl_ctx=sslContext;

}

Location: SSL_KEY_EXCHANGE.java

Content: 

public KeyStore getKeystore(){

  return key_store;

}

Location: SSL_KEY_EXCHANGE.java

Content: 

public String getKeystoreName(){

  return keystore_name;

}

Location: SSL_KEY_EXCHANGE.java

Content: 

public String getKeystorePassword(){

  return keystore_password;

}

Location: SSL_KEY_EXCHANGE.java

Content: 

public String getKeystoreType(){

  return keystore_type;

}

Location: SSL_KEY_EXCHANGE.java

Content: 

public boolean getRequireClientAuthentication(){

  return require_client_authentication;

}

Location: SSL_KEY_EXCHANGE.java

Content: 

public String getSecretKeyAlgorithm(){

  return secret_key_algorithm;

}

Location: SSL_KEY_EXCHANGE.java

Content: 

public SessionVerifier getSessionVerifier(){

  return session_verifier;

}

Location: SSL_KEY_EXCHANGE.java

Content: 

public String getSessionVerifierArg(){

  return session_verifier_arg;

}

Location: SSL_KEY_EXCHANGE.java

Content: 

public String getSessionVerifierClass(){

  return session_verifier_class;

}

Location: SSL_KEY_EXCHANGE.java

Content: 

public int getSocketTimeout(){

  return socket_timeout;

}

Location: SSL_KEY_EXCHANGE.java

Content: 

public SSLContext getSSLContext(){

  return ssl_ctx;

}

Location: SSL_KEY_EXCHANGE.java

Content: 

protected static String print16(PublicKey pub_key){

  MessageDigest digest=null;

  try {

    digest=MessageDigest.getInstance("SHA-256");

    digest.update(pub_key.getEncoded());

    return Util.byteArrayToHexString(digest.digest(),0,16);

  }

 catch (  NoSuchAlgorithmException e) {

    return e.toString();

  }

}

Location: SSL_KEY_EXCHANGE.java

Content: 

public SSL_KEY_EXCHANGE setBindAddress(InetAddress a){

  this.bind_addr=a;

  return this;

}

Location: SSL_KEY_EXCHANGE.java

Content: 

public SSL_KEY_EXCHANGE setKeystoreName(String name){

  this.keystore_name=name;

  return this;

}

Location: SSL_KEY_EXCHANGE.java

Content: 

public SSL_KEY_EXCHANGE setKeystorePassword(String pwd){

  this.keystore_password=pwd;

  return this;

}

Location: SSL_KEY_EXCHANGE.java

Content: 

public SSL_KEY_EXCHANGE setKeystoreType(String type){

  this.keystore_type=type;

  return this;

}

Location: SSL_KEY_EXCHANGE.java

Content: 

public SSL_KEY_EXCHANGE setKeystore(KeyStore ks){

  this.key_store=ks;

  return this;

}

Location: SSL_KEY_EXCHANGE.java

Content: 

public SSL_KEY_EXCHANGE setPort(int p){

  this.port=p;

  return this;

}

Location: SSL_KEY_EXCHANGE.java

Content: 

public SSL_KEY_EXCHANGE setRequireClientAuthentication(boolean b){

  require_client_authentication=b;

  return this;

}

Location: SSL_KEY_EXCHANGE.java

Content: 

public SSL_KEY_EXCHANGE setSecretKeyAlgorithm(String a){

  this.secret_key_algorithm=a;

  return this;

}

Location: SSL_KEY_EXCHANGE.java

Content: 

public SSL_KEY_EXCHANGE setSessionVerifierArg(String arg){

  this.session_verifier_arg=arg;

  return this;

}

Location: SSL_KEY_EXCHANGE.java

Content: 

public SSL_KEY_EXCHANGE setSessionVerifierClass(String cl){

  this.session_verifier_class=cl;

  return this;

}

Location: SSL_KEY_EXCHANGE.java

Content: 

public SSL_KEY_EXCHANGE setSessionVerifier(SessionVerifier s){

  this.session_verifier=s;

  return this;

}

Location: SSL_KEY_EXCHANGE.java

Content: 

public SSL_KEY_EXCHANGE setSocketTimeout(int timeout){

  this.socket_timeout=timeout;

  return this;

}

Location: SSL_KEY_EXCHANGE.java

Content: 

public SSL_KEY_EXCHANGE setSSLContext(SSLContext ssl_ctx){

  this.ssl_ctx=ssl_ctx;

  return this;

}

Location: SSL_KEY_EXCHANGE.java

Content: 

protected synchronized void stopKeyserver(){

  if (srv_sock != null) {

    Util.close(srv_sock);

    srv_sock=null;

  }

  if (srv_sock_handler != null) {

    log.debug("%s: ceasing to be the keyserver; closing the server socket",local_addr);

    srv_sock_handler.stop();

    srv_sock_handler=null;

  }

}

