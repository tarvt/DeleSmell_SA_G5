Location: TransferQueueBundler.java

Content: 

protected void addAndSendIfSizeExceeded(Message msg){

  long size=msg.size();

  if (count + size >= transport.getMaxBundleSize()) {

    num_sends_because_full_queue++;

    fill_count.add(count);

    _sendBundledMessages();

  }

  _addMessage(msg,size);

}

Location: TransferQueueBundler.java

Content: 

protected static int assertPositive(int value,String message){

  if (value <= 0)   throw new IllegalArgumentException(message);

  return value;

}

Location: TransferQueueBundler.java

Content: 

/** 

 * Takes all messages from the queue, adds them to the hashmap and then sends all bundled messages 

 */

protected void drain(){

  Message msg;

  while ((msg=queue.poll()) != null)   addAndSendIfSizeExceeded(msg);

  _sendBundledMessages();

}

Location: TransferQueueBundler.java

Content: 

public int getBufferSize(){

  return queue.size();

}

Location: TransferQueueBundler.java

Content: 

public int removeQueueSize(){

  return remove_queue.size();

}

Location: TransferQueueBundler.java

Content: 

public TransferQueueBundler removeQueueSize(int size){

  this.remove_queue=new ArrayList<>(size);

  return this;

}

Location: TransferQueueBundler.java

Content: 

public TransferQueueBundler(){

  this.remove_queue=new ArrayList<>(16);

}

Location: TransferQueueBundler.java

Content: 

protected TransferQueueBundler(BlockingQueue<Message> queue){

  this.queue=queue;

  this.remove_queue=new ArrayList<>(16);

}

Location: TransferQueueBundler.java

Content: 

public TransferQueueBundler(int capacity){

  this(new ArrayBlockingQueue<>(assertPositive(capacity,"bundler capacity cannot be " + capacity)));

}

