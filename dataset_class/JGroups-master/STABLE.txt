Location: STABLE.java

Content: 

/** 

 * Adds mbr to votes and returns true if we have all the votes, otherwise false.

 * @param rank

 */

@GuardedBy("lock") protected boolean addVote(int rank){

  try {

    return votes.set(rank) && allVotesReceived(votes);

  }

 catch (  Throwable t) {

    return false;

  }

}

Location: STABLE.java

Content: 

/** 

 * Votes is already locked and guaranteed to be non-null 

 */

@GuardedBy("lock") protected static boolean allVotesReceived(FixedSizeBitSet votes){

  return votes.cardinality() == votes.size();

}

Location: STABLE.java

Content: 

@ManagedOperation(description="Sends a STABLE message; when every member has received a STABLE message " + "from everybody else, a STABILITY message will be sent") public void gc(){

  sendStableMessage(false);

}

Location: STABLE.java

Content: 

public long getBytes(){

  return num_bytes_received;

}

Location: STABLE.java

Content: 

public long getDesiredAverageGossip(){

  return desired_avg_gossip;

}

Location: STABLE.java

Content: 

public long getMaxBytes(){

  return max_bytes;

}

Location: STABLE.java

Content: 

protected static int getRank(Address member,View v){

  if (v == null || member == null)   return -1;

  Address[] members=v.getMembersRaw();

  for (int i=0; i < members.length; i++)   if (member.equals(members[i]))   return i;

  return -1;

}

Location: STABLE.java

Content: 

@ManagedAttribute public int getStabilityReceived(){

  return num_stability_msgs_received;

}

Location: STABLE.java

Content: 

@ManagedAttribute public int getStabilitySent(){

  return num_stability_msgs_sent;

}

Location: STABLE.java

Content: 

@ManagedAttribute public int getStableReceived(){

  return num_stable_msgs_received;

}

Location: STABLE.java

Content: 

@ManagedAttribute public int getStableSent(){

  return num_stable_msgs_sent;

}

Location: STABLE.java

Content: 

@ManagedAttribute public boolean getStableTaskRunning(){

  stable_task_lock.lock();

  try {

    return stable_task_future != null && !stable_task_future.isDone() && !stable_task_future.isCancelled();

  }

  finally {

    stable_task_lock.unlock();

  }

}

Location: STABLE.java

Content: 

protected void handleRegularMessage(Message msg){

  if (max_bytes <= 0)   return;

  if (msg.getDest() == null) {

    boolean send_stable_msg=false;

    received.lock();

    try {

      num_bytes_received+=msg.getLength();

      if (num_bytes_received >= max_bytes) {

        log.trace("max_bytes has been reached (%s, bytes received=%s): triggers stable msg",max_bytes,num_bytes_received);

        num_bytes_received=0;

        send_stable_msg=true;

      }

    }

  finally {

      received.unlock();

    }

    if (send_stable_msg)     sendStableMessage(true);

  }

}

Location: STABLE.java

Content: 

protected void handleStabilityMessage(final Digest stable_digest,final Address sender,final ViewId view_id){

  if (stable_digest == null) {

    if (log.isErrorEnabled())     log.error(Util.getMessage("StabilityDigestIsNull"));

    return;

  }

  if (!initialized || suspended) {

    log.trace("%s: STABLE message is ignored: initialized=%b, suspended=%b",local_addr,initialized,suspended);

    return;

  }

  if (Objects.equals(local_addr,sender)) {

    num_stability_msgs_received++;

    return;

  }

  stopStabilityTask();

  lock.lock();

  try {

    if (!view_id.equals(this.view.getViewId())) {

      log.trace("%s: discarded STABILITY message with different view-id %s (my view-id=%s)",local_addr,view_id,view);

      return;

    }

    log.trace("%s: received stability msg from %s: %s",local_addr,sender,printDigest(stable_digest));

    num_stability_msgs_received++;

    resetDigest();

  }

  finally {

    lock.unlock();

  }

  resetNumBytes();

  down_prot.down(new Event(Event.STABLE,stable_digest));

}

Location: STABLE.java

Content: 

/** 

 * Digest d contains (a) the highest seqnos <em>deliverable</em> for each sender and (b) the highest seqnos <em>seen</em> for each member. (Difference: with 1,2,4,5, the highest seqno seen is 5, whereas the highest seqno deliverable is 2). The minimum of all highest seqnos deliverable will be taken to send a stability message, which results in garbage collection of messages lower than the ones in the stability vector. The maximum of all seqnos will be taken to trigger possible retransmission of last missing seqno (see DESIGN for details).

 */

protected void handleStableMessage(final Digest d,final Address sender,final ViewId view_id){

  if (d == null || sender == null) {

    if (log.isErrorEnabled())     log.error(Util.getMessage("DigestOrSenderIsNull"));

    return;

  }

  if (!initialized || suspended) {

    log.trace("%s: STABLE message is ignored: initialized=%b, suspended=%b",local_addr,initialized,suspended);

    return;

  }

  if (!view_id.equals(view.getViewId())) {

    log.trace("%s: discarded STABLE message with different view-id %s (my view-id=%s)",local_addr,view_id,view.getViewId());

    return;

  }

  Digest stable_digest=null;

  ViewId stable_view_id=null;

  lock.lock();

  try {

    int rank=getRank(sender,view);

    if (rank < 0 || votes.get(rank))     return;

    num_stable_msgs_received++;

    updateLocalDigest(d,sender);

    if (addVote(rank)) {

      stable_digest=digest;

      stable_view_id=view.getViewId();

      resetDigest();

    }

  }

 catch (  Throwable t) {

    return;

  }

 finally {

    lock.unlock();

  }

  if (stable_digest != null) {

    resetNumBytes();

    sendStabilityMessage(stable_digest,stable_view_id);

    down_prot.down(new Event(Event.STABLE,stable_digest));

  }

}

Location: STABLE.java

Content: 

protected void handleUpEvent(StableHeader hdr,Address sender,Digest digest){

switch (hdr.type) {

case StableHeader.STABLE_GOSSIP:

    handleStableMessage(digest,sender,hdr.view_id);

  break;

case StableHeader.STABILITY:

handleStabilityMessage(digest,sender,hdr.view_id);

break;

default :

log.error("%s: StableHeader type %s not known",local_addr,hdr.type);

}

}

Location: STABLE.java

Content: 

public static Buffer marshal(Digest digest){

  return Util.streamableToBuffer(digest);

}

Location: STABLE.java

Content: 

protected String printDigest(final Digest digest){

  if (digest == null)   return null;

  return view != null ? digest.toString(view.getMembersRaw(),false) : digest.toString();

}

Location: STABLE.java

Content: 

protected Digest readDigest(byte[] buffer,int offset,int length){

  try {

    return buffer != null ? Util.streamableFromBuffer(Digest::new,buffer,offset,length) : null;

  }

 catch (  Exception ex) {

    log.error("%s: failed reading Digest from message: %s",local_addr,ex);

    return null;

  }

}

Location: STABLE.java

Content: 

@GuardedBy("lock") protected void resetDigest(){

  if (view == null)   return;

  digest=new MutableDigest(view.getMembersRaw());

  votes=new FixedSizeBitSet(view.size());

}

Location: STABLE.java

Content: 

protected void resetNumBytes(){

  received.lock();

  try {

    num_bytes_received=0;

  }

  finally {

    received.unlock();

  }

}

Location: STABLE.java

Content: 

/** 

 * Schedules a stability message to be mcast after a random number of milliseconds (range [1-stability_delay] secs). The reason for waiting a random amount of time is that, in the worst case, all members receive a STABLE_GOSSIP message from the last outstanding member at the same time and would therefore mcast the STABILITY message at the same time too. To avoid this, each member waits random N msecs. If, before N elapses, some other member sent the STABILITY message, we just cancel our own message. If, during waiting for N msecs to send STABILITY message S1, another STABILITY message S2 is to be sent, we just discard S2.

 * @param tmp A copy of the stability digest, so we don't need to copy it again

 */

protected void sendStabilityMessage(Digest tmp,final ViewId view_id){

  if (send_stable_msgs_to_coord_only || stability_delay <= 1)   _sendStabilityMessage(tmp,view_id);

 else {

    startStabilityTask(tmp,view_id,Util.random(stability_delay));

  }

}

Location: STABLE.java

Content: 

/** 

 * Broadcasts a STABLE message of the current digest to all members (or the coordinator only). The message contains the highest seqno delivered and received for all members. The seqnos are retrieved from the NAKACK layer below.

 */

protected void sendStableMessage(boolean send_in_background){

  if (suspended || view == null)   return;

  final View current_view=view;

  final MutableDigest d=new MutableDigest(current_view.getMembersRaw()).set(getDigest());

  Address dest=send_stable_msgs_to_coord_only ? coordinator : null;

  if (d.allSet() || d.set(getDigest()).allSet())   log.trace("%s: sending stable msg to %s: %s",local_addr,(send_stable_msgs_to_coord_only ? coordinator : "cluster"),printDigest(d));

 else {

    log.trace("%s: could not find matching digest for view %s, missing members: %s",local_addr,current_view,d.getNonSetMembers());

    return;

  }

  final Message msg=new Message(dest).setFlag(Message.Flag.OOB,Message.Flag.INTERNAL,Message.Flag.NO_RELIABILITY).putHeader(this.id,new StableHeader(StableHeader.STABLE_GOSSIP,current_view.getViewId())).setBuffer(marshal(d));

  try {

    if (!send_in_background) {

      down_prot.down(msg);

      return;

    }

    Runnable r=new Runnable(){

      public void run(){

        down_prot.down(msg);

        num_stable_msgs_sent++;

      }

      public String toString(){

        return STABLE.class.getSimpleName() + ": STABLE-GOSSIP";

      }

    }

;

    timer.execute(r,getTransport() instanceof TCP);

  }

 catch (  Throwable t) {

    log.warn("failed sending STABLE message",t);

  }

}

Location: STABLE.java

Content: 

public void setDesiredAverageGossip(long gossip_interval){

  desired_avg_gossip=gossip_interval;

}

Location: STABLE.java

Content: 

public void setMaxBytes(long max_bytes){

  this.max_bytes=max_bytes;

}

Location: STABLE.java

Content: 

public STABLE(){

}

Location: STABLE.java

Content: 

protected void startResumeTask(long max_suspend_time){

  max_suspend_time=(long)(max_suspend_time * 1.1);

  if (max_suspend_time <= 0)   max_suspend_time=MAX_SUSPEND_TIME;

synchronized (resume_task_mutex) {

    if (resume_task_future == null || resume_task_future.isDone()) {

      ResumeTask resume_task=new ResumeTask();

      resume_task_future=timer.schedule(resume_task,max_suspend_time,TimeUnit.MILLISECONDS,false);

      log.debug("%s: resume task started, max_suspend_time=%d",local_addr,max_suspend_time);

    }

  }

}

Location: STABLE.java

Content: 

protected void startStabilityTask(Digest d,ViewId view_id,long delay){

  stability_lock.lock();

  try {

    if (stability_task_future == null || stability_task_future.isDone()) {

      StabilitySendTask stability_task=new StabilitySendTask(d,view_id);

      stability_task_future=timer.schedule(stability_task,delay,TimeUnit.MILLISECONDS,getTransport() instanceof TCP);

    }

  }

  finally {

    stability_lock.unlock();

  }

}

Location: STABLE.java

Content: 

protected void startStableTask(){

  stable_task_lock.lock();

  try {

    if (stable_task_future == null || stable_task_future.isDone()) {

      StableTask stable_task=new StableTask();

      stable_task_future=timer.scheduleWithDynamicInterval(stable_task,getTransport() instanceof TCP);

      log.trace("%s: stable task started",local_addr);

    }

  }

  finally {

    stable_task_lock.unlock();

  }

}

Location: STABLE.java

Content: 

protected void stopResumeTask(){

synchronized (resume_task_mutex) {

    if (resume_task_future != null) {

      resume_task_future.cancel(false);

      resume_task_future=null;

    }

  }

}

Location: STABLE.java

Content: 

protected void stopStabilityTask(){

  stability_lock.lock();

  try {

    if (stability_task_future != null) {

      stability_task_future.cancel(false);

      stability_task_future=null;

    }

  }

  finally {

    stability_lock.unlock();

  }

}

Location: STABLE.java

Content: 

protected void stopStableTask(){

  stable_task_lock.lock();

  try {

    if (stable_task_future != null) {

      stable_task_future.cancel(false);

      stable_task_future=null;

    }

  }

  finally {

    stable_task_lock.unlock();

  }

}

Location: STABLE.java

Content: 

protected void suspend(long timeout){

  if (!suspended) {

    suspended=true;

    log.debug("suspending message garbage collection");

  }

  startResumeTask(timeout);

}

Location: STABLE.java

Content: 

/** 

 * Update my own digest from a digest received by somebody else. Returns whether the update was successful. Needs to be called with a lock on digest 

 */

@GuardedBy("lock") protected void updateLocalDigest(Digest d,Address sender){

  StringBuilder sb=null;

  if (log.isTraceEnabled())   sb=new StringBuilder().append(local_addr).append(": handling digest from ").append(sender).append(":\nmine:   ").append(printDigest(digest)).append("\nother:  ").append(printDigest(d));

  for (  Digest.Entry entry : d) {

    Address mbr=entry.getMember();

    long hd=entry.getHighestDeliveredSeqno(), hr=entry.getHighestReceivedSeqno();

    long[] seqnos=digest.get(mbr);

    if (seqnos == null)     continue;

    long my_hd=seqnos[0];

    long my_hr=seqnos[1];

    if (my_hd == -1)     my_hd=hd;

    long new_hd=Math.min(my_hd,hd);

    long new_hr=Math.max(my_hr,hr);

    digest.set(mbr,new_hd,new_hr);

  }

  if (sb != null)   log.trace(sb.append("\nresult: ").append(printDigest(digest)).append("\n"));

}

Location: STABLE.java

Content: 

protected void _sendStabilityMessage(Digest stability_digest,final ViewId view_id){

  if (suspended) {

    log.debug("STABILITY message will not be sent as suspended=%b",suspended);

    return;

  }

  try {

    Message msg=new Message().setFlag(Message.Flag.OOB,Message.Flag.INTERNAL,Message.Flag.NO_RELIABILITY).putHeader(id,new StableHeader(StableHeader.STABILITY,view_id)).setBuffer(marshal(stability_digest));

    log.trace("%s: sending stability msg %s",local_addr,printDigest(stability_digest));

    num_stability_msgs_sent++;

    down_prot.down(msg);

  }

 catch (  Exception e) {

    log.warn("failed sending STABILITY message",e);

  }

}

