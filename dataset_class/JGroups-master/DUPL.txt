Location: DUPL.java

Content: 

private void copy(Message msg,int num_copies,Direction direction){

  Address dest=msg.getDest();

  boolean multicast=dest == null;

  if ((multicast && copy_multicast_msgs) || (!multicast && copy_unicast_msgs)) {

    for (int i=0; i < num_copies; i++) {

      Message copy=msg.copy(true);

switch (direction) {

case UP:

        up_prot.up(copy);

      break;

case DOWN:

    down_prot.down(copy);

  break;

}

}

}

}

Location: DUPL.java

Content: 

public DUPL(){

}

Location: DUPL.java

Content: 

public DUPL(boolean copy_multicast_msgs,boolean copy_unicast_msgs,int incoming_copies,int outgoing_copies){

  this.copy_multicast_msgs=copy_multicast_msgs;

  this.copy_unicast_msgs=copy_unicast_msgs;

  this.incoming_copies=incoming_copies;

  this.outgoing_copies=outgoing_copies;

}

Location: DUPL.java

Content: 

public int getIncomingCopies(){

  return incoming_copies;

}

Location: DUPL.java

Content: 

public int getOutgoingCopies(){

  return outgoing_copies;

}

Location: DUPL.java

Content: 

public boolean isCopyMulticastMsgs(){

  return copy_multicast_msgs;

}

Location: DUPL.java

Content: 

public boolean isCopyUnicastMsgs(){

  return copy_unicast_msgs;

}

Location: DUPL.java

Content: 

public void setCopyMulticastMsgs(boolean copy_multicast_msgs){

  this.copy_multicast_msgs=copy_multicast_msgs;

}

Location: DUPL.java

Content: 

public void setCopyUnicastMsgs(boolean copy_unicast_msgs){

  this.copy_unicast_msgs=copy_unicast_msgs;

}

Location: DUPL.java

Content: 

public void setIncomingCopies(int incoming_copies){

  this.incoming_copies=incoming_copies;

}

Location: DUPL.java

Content: 

public void setOutgoingCopies(int outgoing_copies){

  this.outgoing_copies=outgoing_copies;

}

