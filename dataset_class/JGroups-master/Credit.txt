Location: Credit.java

Content: 

public Credit(long credits){

  this(credits,new ReentrantLock());

}

Location: Credit.java

Content: 

public Credit(long credits,final Lock lock){

  this.credits_left=credits;

  this.lock=lock;

  this.credits_available=lock.newCondition();

}

Location: Credit.java

Content: 

public long decrementAndGet(long credits,final long min_credits,final long max_credits){

  lock.lock();

  try {

    credits_left=Math.max(0,credits_left - credits);

    if (min_credits - credits_left >= 0) {

      long credit_response=Math.min(max_credits,max_credits - credits_left);

      credits_left=max_credits;

      return credit_response;

    }

    return 0;

  }

  finally {

    lock.unlock();

  }

}

Location: Credit.java

Content: 

public boolean decrementIfEnoughCredits(final Message msg,int credits,long timeout){

  lock.lock();

  try {

    if (decrement(credits))     return true;

    if (timeout <= 0)     return false;

    long start=System.nanoTime();

    try {

      credits_available.await(timeout,TimeUnit.MILLISECONDS);

    }

 catch (    InterruptedException e) {

    }

    num_blockings++;

    avg_blockings.add(System.nanoTime() - start);

    return decrement(credits);

  }

  finally {

    lock.unlock();

  }

}

Location: Credit.java

Content: 

@GuardedBy("lock") protected boolean decrement(long credits){

  if (credits_left - credits >= 0) {

    credits_left-=credits;

    return true;

  }

  return false;

}

Location: Credit.java

Content: 

public double getAverageBlockTime(){

  return avg_blockings.getAverage();

}

Location: Credit.java

Content: 

public int getNumBlockings(){

  return num_blockings;

}

Location: Credit.java

Content: 

public void increment(long credits,final long max_credits){

  lock.lock();

  try {

    credits_left=Math.min(max_credits,credits_left + credits);

    credits_available.signalAll();

  }

  finally {

    lock.unlock();

  }

}

Location: Credit.java

Content: 

public boolean needToSendCreditRequest(final long max_block_time){

  lock.lock();

  try {

    long current_time=System.nanoTime();

    if (current_time - last_credit_request >= TimeUnit.NANOSECONDS.convert(max_block_time,TimeUnit.MILLISECONDS)) {

      last_credit_request=current_time;

      return true;

    }

    return false;

  }

  finally {

    lock.unlock();

  }

}

