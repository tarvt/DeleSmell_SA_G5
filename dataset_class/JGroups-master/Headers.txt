Location: Headers.java

Content: 

public static Header[] copy(final Header[] headers){

  if (headers == null)   return new Header[0];

  Header[] retval=new Header[headers.length];

  System.arraycopy(headers,0,retval,0,headers.length);

  return retval;

}

Location: Headers.java

Content: 

public static Map<Short,Header> getHeaders(final Header[] hdrs){

  if (hdrs == null)   return new HashMap<>();

  Map<Short,Header> retval=new HashMap<>(hdrs.length);

  for (  Header hdr : hdrs) {

    if (hdr == null)     break;

    retval.put(hdr.getProtId(),hdr);

  }

  return retval;

}

Location: Headers.java

Content: 

/** 

 * Returns the header associated with a set of IDs

 * @param hdrs

 * @param ids The IDs

 * @param < T >

 * @return

 */

public static <T extends Header>T getHeader(final Header[] hdrs,short... ids){

  if (hdrs == null || ids == null || ids.length == 0)   return null;

  for (  Header hdr : hdrs) {

    if (hdr == null)     return null;

    for (    short id : ids)     if (hdr.getProtId() == id)     return (T)hdr;

  }

  return null;

}

Location: Headers.java

Content: 

private Headers(){

  throw new InstantiationError("Must not instantiate this class");

}

Location: Headers.java

Content: 

public static int marshalledSize(final Header[] hdrs){

  int retval=0;

  if (hdrs == null)   return retval;

  for (  Header hdr : hdrs) {

    if (hdr == null)     break;

    retval+=Global.SHORT_SIZE * 2;

    retval+=hdr.serializedSize();

  }

  return retval;

}

Location: Headers.java

Content: 

public static String printHeaders(final Header[] hdrs){

  if (hdrs == null)   return "";

  StringBuilder sb=new StringBuilder();

  boolean first=true;

  for (  Header hdr : hdrs) {

    if (hdr == null)     break;

    short id=hdr.getProtId();

    if (first)     first=false;

 else     sb.append(", ");

    Class clazz=ClassConfigurator.getProtocol(id);

    String name=clazz != null ? clazz.getSimpleName() : Short.toString(id);

    sb.append(name).append(": ").append(hdr);

  }

  return sb.toString();

}

Location: Headers.java

Content: 

public static String printObjectHeaders(final Header[] hdrs){

  if (hdrs == null)   return "";

  StringBuilder sb=new StringBuilder();

  for (  Header hdr : hdrs) {

    if (hdr == null)     break;

    sb.append(hdr.getProtId()).append(": ").append(hdr).append('\n');

  }

  return sb.toString();

}

Location: Headers.java

Content: 

/** 

 * Adds hdr at the next available slot. If none is available, the headers array passed in will be copied and the copy returned

 * @param headers The headers array

 * @param id The protocol ID of the header

 * @param hdr The header

 * @param replace_if_present Whether or not to overwrite an existing header

 * @return A new copy of headers if the array needed to be expanded, or null otherwise

 */

public static Header[] putHeader(final Header[] headers,short id,Header hdr,boolean replace_if_present){

  int i=0;

  Header[] hdrs=headers;

  boolean resized=false;

  while (i < hdrs.length) {

    if (hdrs[i] == null) {

      hdrs[i]=hdr;

      return resized ? hdrs : null;

    }

    short hdr_id=hdrs[i].getProtId();

    if (hdr_id == id) {

      if (replace_if_present || hdrs[i] == null)       hdrs[i]=hdr;

      return resized ? hdrs : null;

    }

    i++;

    if (i >= hdrs.length) {

      hdrs=resize(hdrs);

      resized=true;

    }

  }

  throw new IllegalStateException("unable to add element " + id + ", index="+ i);

}

Location: Headers.java

Content: 

/** 

 * Increases the capacity of the array and copies the contents of the old into the new array

 */

public static Header[] resize(final Header[] headers){

  int new_capacity=headers.length + RESIZE_INCR;

  Header[] new_hdrs=new Header[new_capacity];

  System.arraycopy(headers,0,new_hdrs,0,headers.length);

  return new_hdrs;

}

Location: Headers.java

Content: 

public static int size(Header[] hdrs){

  int retval=0;

  if (hdrs == null)   return retval;

  for (  Header hdr : hdrs) {

    if (hdr == null)     break;

    retval++;

  }

  return retval;

}

Location: Headers.java

Content: 

public static int size(Header[] hdrs,short... excluded_ids){

  int retval=0;

  if (hdrs == null)   return retval;

  for (  Header hdr : hdrs) {

    if (hdr == null)     break;

    if (!Util.containsId(hdr.getProtId(),excluded_ids))     retval++;

  }

  return retval;

}

