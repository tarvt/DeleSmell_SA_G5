Location: FORK.java

Content: 

protected void createForkStacks(Map<String,List<ProtocolConfiguration>> protocols) throws Exception {

  for (  Map.Entry<String,List<ProtocolConfiguration>> entry : protocols.entrySet()) {

    String fork_stack_id=entry.getKey();

    if (get(fork_stack_id) != null)     continue;

    List<Protocol> prots=Configurator.createProtocolsAndInitializeAttrs(entry.getValue(),null);

    createForkStack(fork_stack_id,prots,false);

  }

}

Location: FORK.java

Content: 

protected void createForkStacks(String config) throws Exception {

  InputStream in=getForkStream(config);

  if (in == null)   throw new FileNotFoundException("fork stacks config " + config + " not found");

  Map<String,List<ProtocolConfiguration>> protocols=ForkConfig.parse(in);

  createForkStacks(protocols);

}

Location: FORK.java

Content: 

/** 

 * Returns the fork stack for fork_stack_id (if exitstent), or creates a new fork-stack from protocols and adds it into the hashmap of fork-stack (key is fork_stack_id). Method init() will be called on each protocol, from bottom to top.

 * @param fork_stack_id The key under which the new fork-stack should be added to the fork-stacks hashmap

 * @param protocols A list of protocols from <em>bottom to top</em> to be inserted. They will be sandwichedbetween ForkProtocolStack (top) and ForkProtocol (bottom). The list can be empty (or null) in which case we won't create any protocols, but still have a separate fork-stack inserted.

 * @param initialize If false, the ref count 'inits' will not get incremented and init() won't be called. This isneeded when creating a fork stack from an XML config inside of the FORK protocol. The protocols in the fork stack will only get initialized on the first ForkChannel creation

 * @return The new {@link ForkProtocolStack}, or the existing stack (if present)

 */

public synchronized ProtocolStack createForkStack(String fork_stack_id,List<Protocol> protocols,boolean initialize) throws Exception {

  Protocol bottom;

  if ((bottom=get(fork_stack_id)) != null) {

    ForkProtocolStack retval=getForkStack(bottom);

    return initialize ? retval.incrInits() : retval;

  }

  List<Protocol> prots=new ArrayList<>();

  prots.add(bottom=new ForkProtocol(fork_stack_id).setDownProtocol(this));

  if (protocols != null)   prots.addAll(protocols);

  ForkProtocolStack fork_stack=(ForkProtocolStack)new ForkProtocolStack(getUnknownForkHandler(),prots,fork_stack_id).setChannel(this.stack.getChannel());

  fork_stack.init();

  if (initialize)   fork_stack.incrInits();

  fork_stacks.put(fork_stack_id,bottom);

  return fork_stack;

}

Location: FORK.java

Content: 

@ManagedAttribute(description="Number of fork-stacks") public int getForkStacks(){

  return fork_stacks.size();

}

Location: FORK.java

Content: 

public static ForkProtocolStack getForkStack(Protocol prot){

  while (prot != null && !(prot instanceof ForkProtocolStack))   prot=prot.getUpProtocol();

  return prot instanceof ForkProtocolStack ? (ForkProtocolStack)prot : null;

}

Location: FORK.java

Content: 

public static InputStream getForkStream(String config) throws IOException {

  InputStream configStream=null;

  try {

    configStream=new FileInputStream(config);

  }

 catch (  FileNotFoundException|AccessControlException fnfe) {

  }

  if (configStream == null) {

    try {

      configStream=new URL(config).openStream();

    }

 catch (    MalformedURLException ignored) {

    }

  }

  if (configStream == null)   configStream=Util.getResourceAsStream(config,ConfiguratorFactory.class);

  return configStream;

}

Location: FORK.java

Content: 

protected void getStateFromMainAndForkChannels(Event evt){

  final OutputStream out=evt.getArg();

  try (DataOutputStream dos=new DataOutputStream(out)){

    getStateFrom(null,up_prot,null,null,dos);

    for (    Map.Entry<String,Protocol> entry : fork_stacks.entrySet()) {

      String stack_name=entry.getKey();

      Protocol prot=entry.getValue();

      ForkProtocolStack fork_stack=getForkStack(prot);

      for (      Map.Entry<String,JChannel> en : fork_stack.getForkChannels().entrySet()) {

        String fc_name=en.getKey();

        JChannel fc=en.getValue();

        getStateFrom(fc,null,stack_name,fc_name,dos);

      }

    }

  }

 catch (  Throwable ex) {

    log.error("%s: failed fetching state from main channel",local_addr,ex);

  }

}

Location: FORK.java

Content: 

protected void getStateFrom(JChannel channel,Protocol prot,String stack,String ch,DataOutputStream out) throws Exception {

  ByteArrayDataOutputStream output=new ByteArrayDataOutputStream(1024);

  OutputStreamAdapter out_ad=new OutputStreamAdapter(output);

  Event evt=new Event(Event.STATE_TRANSFER_OUTPUTSTREAM,out_ad);

  if (channel != null)   channel.up(evt);

 else   prot.up(evt);

  int len=output.position();

  if (len > 0) {

    Bits.writeString(stack,out);

    Bits.writeString(ch,out);

    out.writeInt(len);

    out.write(output.buffer(),0,len);

    log.trace("%s: fetched %d bytes from %s:%s",local_addr,len,stack,ch);

  }

}

Location: FORK.java

Content: 

public UnknownForkHandler getUnknownForkHandler(){

  return this.unknownForkHandler;

}

Location: FORK.java

Content: 

public Protocol putIfAbsent(String fork_stack_id,Protocol prot){

  return fork_stacks.put(fork_stack_id,prot);

}

Location: FORK.java

Content: 

protected void setStateInMainAndForkChannels(InputStream in){

  try (DataInputStream input=new DataInputStream(in)){

    for (; ; ) {

      String stack_name=Bits.readString(input);

      String ch_name=Bits.readString(input);

      int len=input.readInt();

      if (len > 0) {

        byte[] data=new byte[len];

        in.read(data,0,len);

        ByteArrayInputStream tmp=new ByteArrayInputStream(data,0,len);

        if (stack_name == null && ch_name == null)         up_prot.up(new Event(Event.STATE_TRANSFER_INPUTSTREAM,tmp));

 else {

          Protocol prot=fork_stacks.get(stack_name);

          if (prot == null) {

            log.warn("%s: fork stack %s not found, dropping state for %s:%s",local_addr,stack_name,stack_name,ch_name);

            continue;

          }

          ForkProtocolStack fork_stack=getForkStack(prot);

          JChannel fork_ch=fork_stack.get(ch_name);

          if (fork_ch == null) {

            log.warn("%s: fork channel %s not found, dropping state for %s:%s",local_addr,ch_name,stack_name,ch_name);

            continue;

          }

          fork_ch.up(new Event(Event.STATE_TRANSFER_INPUTSTREAM,tmp));

        }

      }

    }

  }

 catch (  EOFException ignored) {

  }

catch (  Throwable ex) {

    log.error("%s: failed setting state in main channel",local_addr,ex);

  }

}

Location: FORK.java

Content: 

public void setUnknownForkHandler(UnknownForkHandler unknownForkHandler){

  this.unknownForkHandler=unknownForkHandler;

  fork_stacks.values().forEach(p -> {

    if (p instanceof ForkProtocol) {

      ForkProtocolStack st=getForkStack(p);

      if (st != null)       st.setUnknownForkHandler(unknownForkHandler);

    }

  }

);

}

