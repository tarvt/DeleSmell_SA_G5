Location: Average.java

Content: 

public <T extends Average>T add(long num){

  if (num < 0)   return (T)this;

  if (Util.productGreaterThan(count,(long)Math.ceil(avg),Long.MAX_VALUE))   clear();

  double total=count * avg;

  avg=(total + num) / ++count;

  return (T)this;

}

Location: Average.java

Content: 

public double average(){

  return avg;

}

Location: Average.java

Content: 

public long count(){

  return count;

}

Location: Average.java

Content: 

public double getAverage(){

  return avg;

}

Location: Average.java

Content: 

public long getCount(){

  return count;

}

Location: Average.java

Content: 

/** 

 * Merges this average with another one 

 */

public <T extends Average>T merge(T other){

  if (Util.productGreaterThan(count,(long)Math.ceil(avg),Long.MAX_VALUE) || Util.productGreaterThan(other.count(),(long)Math.ceil(other.average()),Long.MAX_VALUE)) {

    avg=avg + other.average() / 2.0;

  }

 else {

    long total_count=count + other.count();

    avg=(count * avg + other.count() * other.average()) / total_count;

    count=total_count / 2;

  }

  return (T)this;

}

