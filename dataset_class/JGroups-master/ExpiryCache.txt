Location: ExpiryCache.java

Content: 

public boolean addIfAbsentOrExpired(K key){

  Long val=map.get(key);

  if (val == null)   return map.putIfAbsent(key,System.nanoTime()) == null;

  long current_time=System.nanoTime();

  return hasExpired(val,current_time) && map.replace(key,val,current_time);

}

Location: ExpiryCache.java

Content: 

public boolean contains(K key){

  return key != null && map.containsKey(key);

}

Location: ExpiryCache.java

Content: 

/** 

 * Creates a new instance

 * @param timeout Timeout in ms

 */

public ExpiryCache(long timeout){

  setTimeout(timeout);

}

Location: ExpiryCache.java

Content: 

public long getTimeout(){

  return TimeUnit.MILLISECONDS.convert(timeout,TimeUnit.NANOSECONDS);

}

Location: ExpiryCache.java

Content: 

public boolean hasExpired(K key){

  Long val=map.get(key);

  return val == null || hasExpired(val,System.nanoTime());

}

Location: ExpiryCache.java

Content: 

protected boolean hasExpired(long val,long current_time){

  return current_time - val > timeout;

}

Location: ExpiryCache.java

Content: 

public int removeExpiredElements(){

  int removed=0;

  long current_time=System.nanoTime();

  for (  Map.Entry<K,Long> entry : map.entrySet()) {

    Long val=entry.getValue();

    if (val == null || hasExpired(val,current_time)) {

      map.remove(entry.getKey());

      removed++;

    }

  }

  return removed;

}

Location: ExpiryCache.java

Content: 

public void remove(K key){

  map.remove(key);

}

Location: ExpiryCache.java

Content: 

public void setTimeout(long timeout){

  this.timeout=TimeUnit.NANOSECONDS.convert(timeout,TimeUnit.MILLISECONDS);

}

