Location: RspList.java

Content: 

public RspList<T> addRsp(Address sender,T retval){

  Rsp<T> rsp=get(sender);

  if (rsp != null) {

    rsp.setValue(retval);

    return this;

  }

  put(sender,new Rsp<>(retval));

  return this;

}

Location: RspList.java

Content: 

/** 

 * Returns the first value in the response set. This is random, but we try to return a non-null value first 

 */

public T getFirst(){

  Optional<Rsp<T>> retval=values().stream().filter(rsp -> rsp.getValue() != null).findFirst();

  return retval.isPresent() ? retval.get().getValue() : null;

}

Location: RspList.java

Content: 

public List<Address> getSuspectedMembers(){

  return entrySet().stream().filter(entry -> entry.getValue() != null && entry.getValue().wasSuspected()).map(Entry::getKey).collect(Collectors.toList());

}

Location: RspList.java

Content: 

/** 

 * Returns the value associated with address key

 * @param key

 * @return Object value

 */

public T getValue(Object key){

  Rsp<T> rsp=get(key);

  return rsp != null ? rsp.getValue() : null;

}

Location: RspList.java

Content: 

public boolean isReceived(Address sender){

  Rsp<T> rsp=get(sender);

  return rsp != null && rsp.wasReceived();

}

Location: RspList.java

Content: 

public boolean isSuspected(Address sender){

  Rsp<T> rsp=get(sender);

  return rsp != null && rsp.wasSuspected();

}

Location: RspList.java

Content: 

public int numReceived(){

  return (int)values().stream().filter(Rsp::wasReceived).count();

}

Location: RspList.java

Content: 

public int numSuspectedMembers(){

  return (int)values().stream().filter(Rsp::wasSuspected).count();

}

Location: RspList.java

Content: 

public RspList(){

}

Location: RspList.java

Content: 

public RspList(int size){

  super(size);

}

Location: RspList.java

Content: 

public RspList(Map<Address,Rsp<T>> map){

  putAll(map);

}

