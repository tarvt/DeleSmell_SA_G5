Location: RELAY2.java

Content: 

public RELAY2 addSite(String site_name,RelayConfig.SiteConfig cfg){

  sites.put(site_name,cfg);

  return this;

}

Location: RELAY2.java

Content: 

public void addToRelayedTime(long delta){

  relayed_time.add(delta);

}

Location: RELAY2.java

Content: 

public boolean asyncRelayCreation(){

  return async_relay_creation;

}

Location: RELAY2.java

Content: 

public RELAY2 asyncRelayCreation(boolean flag){

  async_relay_creation=flag;

  return this;

}

Location: RELAY2.java

Content: 

public boolean canBecomeSiteMaster(){

  return can_become_site_master;

}

Location: RELAY2.java

Content: 

public RELAY2 canBecomeSiteMaster(boolean flag){

  can_become_site_master=flag;

  return this;

}

Location: RELAY2.java

Content: 

public String config(){

  return config;

}

Location: RELAY2.java

Content: 

public void configure() throws Exception {

  timer=getTransport().getTimer();

  if (site == null)   throw new IllegalArgumentException("site cannot be null");

  TP tp=getTransport();

  if (tp.getUseIpAddresses())   throw new IllegalArgumentException(String.format("%s cannot be used if %s.use_ip_addrs is true",RELAY2.class.getSimpleName(),tp.getClass().getSimpleName()));

  if (max_site_masters < 1) {

    log.warn("max_size_masters was " + max_site_masters + ", changed to 1");

    max_site_masters=1;

  }

  if (site_master_picker_impl != null) {

    Class<SiteMasterPicker> clazz=Util.loadClass(site_master_picker_impl,(Class)null);

    this.site_master_picker=clazz.getDeclaredConstructor().newInstance();

  }

  if (config != null)   parseSiteConfiguration(sites);

  site_config=sites.get(site);

  if (site_config == null)   throw new Exception("site configuration for \"" + site + "\" not found in "+ config);

  log.trace(local_addr + ": site configuration:\n" + site_config);

  if (!site_config.getForwards().isEmpty())   log.warn(local_addr + ": forwarding routes are currently not supported and will be ignored. This will change " + "with hierarchical routing (https://issues.jboss.org/browse/JGRP-1506)");

  List<Integer> available_down_services=getDownServices();

  forwarding_protocol_present=available_down_services != null && available_down_services.contains(Event.FORWARD_TO_COORD);

  if (!forwarding_protocol_present && warn_when_ftc_missing && log.isWarnEnabled())   log.warn(local_addr + ": " + FORWARD_TO_COORD.class.getSimpleName()+ " protocol not found below; "+ "unable to re-submit messages to the new coordinator if the current coordinator crashes");

  if (enable_address_tagging) {

    JChannel ch=getProtocolStack().getChannel();

    ch.addAddressGenerator(() -> {

      ExtendedUUID retval=ExtendedUUID.randomUUID();

      if (can_become_site_master)       retval.setFlag(can_become_site_master_flag);

      return retval;

    }

);

  }

  prots_above=getIdsAbove();

}

Location: RELAY2.java

Content: 

public RELAY2 config(String cfg){

  config=cfg;

  return this;

}

Location: RELAY2.java

Content: 

/** 

 * Copies the message, but only the headers above the current protocol (RELAY) (or RpcDispatcher related headers) 

 */

protected Message copy(Message msg){

  return msg.copy(true,Global.BLOCKS_START_ID,this.prots_above);

}

Location: RELAY2.java

Content: 

protected void deliverLocally(SiteAddress dest,SiteAddress sender,Message msg){

  Address local_dest;

  boolean send_to_coord=false;

  if (dest instanceof SiteUUID) {

    if (dest instanceof SiteMaster) {

      local_dest=pickSiteMaster(sender);

      if (local_dest == null)       throw new IllegalStateException("site master was null");

      send_to_coord=true;

    }

 else {

      SiteUUID tmp=(SiteUUID)dest;

      local_dest=new UUID(tmp.getMostSignificantBits(),tmp.getLeastSignificantBits());

    }

  }

 else   local_dest=dest;

  if (log.isTraceEnabled())   log.trace(local_addr + ": delivering message to " + dest+ " in local cluster");

  long start=stats ? System.nanoTime() : 0;

  forwardTo(local_dest,dest,sender,msg,send_to_coord);

  if (stats) {

    forward_to_local_mbr_time.add(System.nanoTime() - start);

    forward_to_local_mbr.increment();

  }

}

Location: RELAY2.java

Content: 

protected void deliver(Address dest,Address sender,final Message msg){

  try {

    Message copy=copy(msg).dest(dest).src(sender);

    if (log.isTraceEnabled())     log.trace(local_addr + ": delivering message from " + sender);

    long start=stats ? System.nanoTime() : 0;

    up_prot.up(copy);

    if (stats) {

      local_delivery_time.add(System.nanoTime() - start);

      local_deliveries.increment();

    }

  }

 catch (  Exception e) {

    log.error(Util.getMessage("FailedDeliveringMessage"),e);

  }

}

Location: RELAY2.java

Content: 

/** 

 * Iterates over the list of members and adds every member if the member's rank is below max_site_masters. Skips members which cannot become site masters (can_become_site_master == false). If no site master can be found, the first member of the view will be returned (even if it has can_become_site_master == false)

 */

protected List<Address> determineSiteMasters(View view){

  List<Address> retval=new ArrayList<>(view.size());

  int selected=0;

  for (  Address member : view) {

    if (member instanceof ExtendedUUID && !((ExtendedUUID)member).isFlagSet(can_become_site_master_flag))     continue;

    if (selected++ < max_site_masters)     retval.add(member);

  }

  if (retval.isEmpty()) {

    Address coord=view.getCoord();

    if (coord != null)     retval.add(coord);

  }

  return retval;

}

Location: RELAY2.java

Content: 

public boolean enableAddressTagging(){

  return enable_address_tagging;

}

Location: RELAY2.java

Content: 

public RELAY2 enableAddressTagging(boolean flag){

  enable_address_tagging=flag;

  return this;

}

Location: RELAY2.java

Content: 

protected void forwardTo(Address next_dest,SiteAddress final_dest,Address original_sender,final Message msg,boolean forward_to_current_coord){

  if (log.isTraceEnabled())   log.trace(local_addr + ": forwarding message to final destination " + final_dest+ " to "+ (forward_to_current_coord ? " the current coordinator" : next_dest));

  Message copy=copy(msg).dest(next_dest).src(null);

  Relay2Header hdr=new Relay2Header(Relay2Header.DATA,final_dest,original_sender);

  copy.putHeader(id,hdr);

  if (forward_to_current_coord && forwarding_protocol_present)   down_prot.down(new Event(Event.FORWARD_TO_COORD,copy));

 else   down_prot.down(copy);

}

Location: RELAY2.java

Content: 

@ManagedAttribute(description="The average number of messages / s for delivering received messages locally") public long getAvgMsgsDeliveringLocally(){

  return getTimeDeliveringLocally() > 0 ? (long)(getNumLocalDeliveries() / (getTimeDeliveringLocally() / 1000.0)) : 0;

}

Location: RELAY2.java

Content: 

@ManagedAttribute(description="The average number of messages / s for forwarding messages to a member in the same site") public long getAvgMsgsForwardingToLocalMbr(){

  return getTimeForwardingToLocalMbr() > 0 ? (long)(getNumForwardedToLocalMbr() / (getTimeForwardingToLocalMbr() / 1000.0)) : 0;

}

Location: RELAY2.java

Content: 

@ManagedAttribute(description="The average number of messages / s for forwarding messages to the local SiteMaster") public long getAvgMsgsForwardingToSM(){

  return getTimeForwardingToSM() > 0 ? (long)(getNumForwardedToSiteMaster() / (getTimeForwardingToSM() / 1000.0)) : 0;

}

Location: RELAY2.java

Content: 

@ManagedAttribute(description="The average number of messages / s for relaying messages from this SiteMaster to remote SiteMasters") public long getAvgMsgsRelaying(){

  return getTimeRelaying() > 0 ? (long)(getNumRelayed() / (getTimeRelaying() / 1000.0)) : 0;

}

Location: RELAY2.java

Content: 

public View getBridgeView(String cluster_name){

  Relayer tmp=relayer;

  return tmp != null ? tmp.getBridgeView(cluster_name) : null;

}

Location: RELAY2.java

Content: 

/** 

 * Returns the bridge channel to a given site

 * @param site_name The site name, e.g. "SFO"

 * @return The JChannel to the given site, or null if no route was found or we're not the coordinator

 */

public JChannel getBridge(String site_name){

  Relayer tmp=relayer;

  Route route=tmp != null ? tmp.getRoute(site_name) : null;

  return route != null ? route.bridge() : null;

}

Location: RELAY2.java

Content: 

@ManagedAttribute(description="Number of messages (received from a remote Sitemaster and) delivered " + "by this SiteMaster to a local node") public long getNumForwardedToLocalMbr(){

  return forward_to_local_mbr.sum();

}

Location: RELAY2.java

Content: 

@ManagedAttribute(description="Number of messages forwarded to the local SiteMaster") public long getNumForwardedToSiteMaster(){

  return forward_to_site_master.sum();

}

Location: RELAY2.java

Content: 

@ManagedAttribute(description="Number of messages delivered locally, e.g. received and delivered to self") public long getNumLocalDeliveries(){

  return local_deliveries.sum();

}

Location: RELAY2.java

Content: 

@ManagedAttribute(description="Number of messages sent by this SiteMaster to a remote SiteMaster") public long getNumRelayed(){

  return relayed.sum();

}

Location: RELAY2.java

Content: 

public RouteStatusListener getRouteStatusListener(){

  return route_status_listener;

}

Location: RELAY2.java

Content: 

/** 

 * Returns the route to a given site

 * @param site_name The site name, e.g. "SFO"

 * @return The route to the given site, or null if no route was found or we're not the coordinator

 */

public Route getRoute(String site_name){

  Relayer tmp=relayer;

  return tmp != null ? tmp.getRoute(site_name) : null;

}

Location: RELAY2.java

Content: 

public List<String> getSites(){

  return sites.isEmpty() ? Collections.emptyList() : new ArrayList<>(sites.keySet());

}

Location: RELAY2.java

Content: 

@ManagedAttribute(description="The total time (ms) spent delivering received messages locally") public long getTimeDeliveringLocally(){

  return TimeUnit.MILLISECONDS.convert(local_delivery_time.sum(),TimeUnit.NANOSECONDS);

}

Location: RELAY2.java

Content: 

@ManagedAttribute(description="The total time (in ms) spent forwarding messages to a member in the same site") public long getTimeForwardingToLocalMbr(){

  return TimeUnit.MILLISECONDS.convert(forward_to_local_mbr_time.sum(),TimeUnit.NANOSECONDS);

}

Location: RELAY2.java

Content: 

@ManagedAttribute(description="The total time (in ms) spent forwarding messages to the local SiteMaster") public long getTimeForwardingToSM(){

  return TimeUnit.MILLISECONDS.convert(forward_sm_time.sum(),TimeUnit.NANOSECONDS);

}

Location: RELAY2.java

Content: 

public TimeScheduler getTimer(){

  return timer;

}

Location: RELAY2.java

Content: 

@ManagedAttribute(description="The total time (ms) spent relaying messages from this SiteMaster to remote SiteMasters") public long getTimeRelaying(){

  return TimeUnit.MILLISECONDS.convert(relayed_time.sum(),TimeUnit.NANOSECONDS);

}

Location: RELAY2.java

Content: 

/** 

 * Called to handle a message received by the transport 

 */

protected void handleMessage(Relay2Header hdr,Message msg){

switch (hdr.type) {

case Relay2Header.DATA:

    route((SiteAddress)hdr.final_dest,(SiteAddress)hdr.original_sender,msg);

  break;

case Relay2Header.SITE_UNREACHABLE:

up_prot.up(new Event(Event.SITE_UNREACHABLE,hdr.final_dest));

break;

case Relay2Header.HOST_UNREACHABLE:

break;

default :

log.error("type " + hdr.type + " unknown");

break;

}

}

Location: RELAY2.java

Content: 

/** 

 * Called to handle a message received by the relayer 

 */

protected void handleRelayMessage(Relay2Header hdr,Message msg){

  if (hdr.final_dest != null) {

    Message message=msg;

    Relay2Header header=hdr;

    if (header.type == Relay2Header.DATA && can_forward_local_cluster) {

      SiteUUID site_uuid=(SiteUUID)hdr.final_dest;

      UUID tmp=(UUID)Util.pickRandomElement(members);

      SiteAddress final_dest=new SiteUUID(tmp,site_uuid.getName(),site_uuid.getSite());

      if (!final_dest.equals(hdr.final_dest)) {

        message=copy(msg);

        header=new Relay2Header(Relay2Header.DATA,final_dest,hdr.original_sender);

        message.putHeader(id,header);

      }

    }

    handleMessage(header,message);

  }

 else {

    Message copy=copy(msg).dest(null).src(null).putHeader(id,hdr);

    down_prot.down(copy);

  }

}

Location: RELAY2.java

Content: 

public void incrementRelayed(){

  relayed.increment();

}

Location: RELAY2.java

Content: 

@ManagedAttribute(description="Whether or not this instance is a site master") public boolean isSiteMaster(){

  return relayer != null;

}

Location: RELAY2.java

Content: 

protected void notifySiteMasterListener(boolean flag){

  if (site_master_listener != null)   site_master_listener.accept(flag);

}

Location: RELAY2.java

Content: 

/** 

 * Parses the configuration by reading the config file.

 * @throws Exception

 */

protected void parseSiteConfiguration(final Map<String,RelayConfig.SiteConfig> map) throws Exception {

  InputStream input=null;

  try {

    input=ConfiguratorFactory.getConfigStream(config);

    RelayConfig.parse(input,map);

  }

  finally {

    Util.close(input);

  }

}

Location: RELAY2.java

Content: 

/** 

 * Returns a site master from site_masters 

 */

protected Address pickSiteMaster(Address sender){

  List<Address> masters=site_masters;

  if (masters.size() == 1)   return masters.get(0);

  return site_master_picker.pickSiteMaster(masters,sender);

}

Location: RELAY2.java

Content: 

@ManagedOperation(description="Prints the contents of the routing table. " + "Only available if we're the current coordinator (site master)") public String printRoutes(){

  return relayer != null ? relayer.printRoutes() : "n/a (not site master)";

}

Location: RELAY2.java

Content: 

@ManagedOperation(description="Prints the routes that are currently up. " + "Only available if we're the current coordinator (site master)") public String printSites(){

  return relayer != null ? Util.print(relayer.getSiteNames()) : "n/a (not site master)";

}

Location: RELAY2.java

Content: 

public boolean relayMulticasts(){

  return relay_multicasts;

}

Location: RELAY2.java

Content: 

public RELAY2 relayMulticasts(boolean flag){

  relay_multicasts=flag;

  return this;

}

Location: RELAY2.java

Content: 

/** 

 * Routes the message to the target destination, used by a site master (coordinator)

 * @param dest

 * @param sender the address of the sender

 * @param msg The message

 */

protected void route(SiteAddress dest,SiteAddress sender,Message msg){

  String target_site=dest.getSite();

  if (target_site.equals(site)) {

    if (local_addr.equals(dest) || ((dest instanceof SiteMaster) && is_site_master)) {

      deliver(dest,sender,msg);

    }

 else     deliverLocally(dest,sender,msg);

    return;

  }

  Relayer tmp=relayer;

  if (tmp == null) {

    log.warn(local_addr + ": not site master; dropping message");

    return;

  }

  Route route=tmp.getRoute(target_site,sender);

  if (route == null) {

    log.error(local_addr + ": no route to " + target_site+ ": dropping message");

    sendSiteUnreachableTo(sender,target_site);

  }

 else   route.send(dest,sender,msg);

}

Location: RELAY2.java

Content: 

/** 

 * Sends a SITE-UNREACHABLE message to the sender of the message. Because the sender is always local (we're the relayer), no routing needs to be done

 * @param dest

 * @param target_site

 */

protected void sendSiteUnreachableTo(Address dest,String target_site){

  Message msg=new Message(dest).setFlag(Message.Flag.OOB,Message.Flag.INTERNAL).src(new SiteUUID((UUID)local_addr,NameCache.get(local_addr),site)).putHeader(id,new Relay2Header(Relay2Header.SITE_UNREACHABLE,new SiteMaster(target_site),null));

  down_prot.down(msg);

}

Location: RELAY2.java

Content: 

/** 

 * Sends the message via all bridges excluding the excluded_sites bridges 

 */

protected void sendToBridges(Address sender,final Message msg,String... excluded_sites){

  Relayer tmp=relayer;

  List<Route> routes=tmp != null ? tmp.getRoutes(excluded_sites) : null;

  if (routes == null)   return;

  for (  Route route : routes) {

    if (log.isTraceEnabled())     log.trace(local_addr + ": relaying multicast message from " + sender+ " via route "+ route);

    try {

      route.send(null,sender,msg);

    }

 catch (    Exception ex) {

      log.error(local_addr + ": failed relaying message from " + sender+ " via route "+ route,ex);

    }

  }

}

Location: RELAY2.java

Content: 

public void setRouteStatusListener(RouteStatusListener l){

  this.route_status_listener=l;

}

Location: RELAY2.java

Content: 

public RELAY2 setSiteMasterListener(Consumer<Boolean> l){

  site_master_listener=l;

  return this;

}

Location: RELAY2.java

Content: 

public String site(){

  return site;

}

Location: RELAY2.java

Content: 

public RELAY2 siteMasterPicker(SiteMasterPicker s){

  if (s != null)   this.site_master_picker=s;

  return this;

}

Location: RELAY2.java

Content: 

public List<String> siteNames(){

  return getSites();

}

Location: RELAY2.java

Content: 

public RELAY2 site(String site_name){

  site=site_name;

  return this;

}

Location: RELAY2.java

Content: 

protected void startRelayer(Relayer rel,String bridge_name){

  try {

    log.trace(local_addr + ": became site master; starting bridges");

    rel.start(site_config.getBridges(),bridge_name,site);

  }

 catch (  Throwable t) {

    log.error(local_addr + ": failed starting relayer",t);

  }

}

