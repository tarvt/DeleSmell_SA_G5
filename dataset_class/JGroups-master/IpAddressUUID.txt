Location: IpAddressUUID.java

Content: 

protected static long[] createUUID(){

  byte[] data=UUID.generateRandomBytes(12);

  long msb=0;

  int lsb=0;

  for (int i=0; i < 8; i++)   msb=(msb << 8) | (data[i] & 0xff);

  for (int i=8; i < 12; i++)   lsb=(lsb << 8) | (data[i] & 0xff);

  return new long[]{msb,lsb};

}

Location: IpAddressUUID.java

Content: 

public IpAddressUUID(){

}

Location: IpAddressUUID.java

Content: 

public IpAddressUUID(InetAddress i,int p){

  super(i,p);

  long[] tmp=createUUID();

  low=tmp[0];

  high=(int)tmp[1];

}

Location: IpAddressUUID.java

Content: 

protected IpAddressUUID(InetAddress i,int p,long low,int high){

  this.ip_addr=i;

  this.port=p;

  this.low=low;

  this.high=high;

}

Location: IpAddressUUID.java

Content: 

public IpAddressUUID(InetSocketAddress sock_addr){

  super(sock_addr);

  long[] tmp=createUUID();

  low=tmp[0];

  high=(int)tmp[1];

}

Location: IpAddressUUID.java

Content: 

public IpAddressUUID(int port){

  super(port);

  long[] tmp=createUUID();

  low=tmp[0];

  high=(int)tmp[1];

}

Location: IpAddressUUID.java

Content: 

public IpAddressUUID(int port,boolean set_default_host){

  super(port,set_default_host);

  long[] tmp=createUUID();

  low=tmp[0];

  high=(int)tmp[1];

}

Location: IpAddressUUID.java

Content: 

public IpAddressUUID(String addr_port) throws Exception {

  super(addr_port);

  long[] tmp=createUUID();

  low=tmp[0];

  high=(int)tmp[1];

}

Location: IpAddressUUID.java

Content: 

public IpAddressUUID(String i,int p) throws UnknownHostException {

  super(i,p);

  long[] tmp=createUUID();

  low=tmp[0];

  high=(int)tmp[1];

}

Location: IpAddressUUID.java

Content: 

public String toString(boolean detailed){

  String logical_name=NameCache.get(this);

  if (logical_name != null)   return detailed ? String.format("%s (%s)",logical_name,super.toString()) : logical_name;

  return super.toString();

}

