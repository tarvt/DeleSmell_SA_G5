Location: View.java

Content: 

public int compareTo(View o){

  return view_id.compareTo(o.view_id);

}

Location: View.java

Content: 

/** 

 * Returns true if all mbrs are elements of this view, false otherwise 

 */

public boolean containsMembers(Address... mbrs){

  if (mbrs == null || members == null)   return false;

  for (  Address mbr : mbrs) {

    if (!containsMember(mbr))     return false;

  }

  return true;

}

Location: View.java

Content: 

/** 

 * Returns true if this view contains a certain member

 * @param mbr - the address of the member,

 * @return true if this view contains the member, false if it doesn't

 */

public boolean containsMember(Address mbr){

  if (mbr == null || members == null)   return false;

  for (  Address member : members)   if (Objects.equals(member,mbr))   return true;

  return false;

}

Location: View.java

Content: 

public static View create(Address coord,long id,Address... members){

  return new View(new ViewId(coord,id),members);

}

Location: View.java

Content: 

public static View create(Address coord,long id,Collection<Address> members){

  return new View(new ViewId(coord,id),members);

}

Location: View.java

Content: 

public boolean deepEquals(View other){

  return this == other || equals(other) && Arrays.equals(members,other.members);

}

Location: View.java

Content: 

/** 

 * Returns the difference between 2 views from and to. It is assumed that view 'from' is logically prior to view 'to'.

 * @param from The first view

 * @param to The second view

 * @return an array of 2 Address arrays: index 0 has the addresses of the joined member, index 1 those of the left members

 */

public static Address[][] diff(final View from,final View to){

  if (to == null)   throw new IllegalArgumentException("the second view cannot be null");

  if (from == to)   return new Address[][]{{},{}};

  if (from == null) {

    Address[] joined=new Address[to.size()];

    int index=0;

    for (    Address addr : to.getMembers())     joined[index++]=addr;

    return new Address[][]{joined,{}};

  }

  Address[] joined=null, left=null;

  int num_joiners=0, num_left=0;

  for (  Address addr : to)   if (!from.containsMember(addr))   num_joiners++;

  if (num_joiners > 0) {

    joined=new Address[num_joiners];

    int index=0;

    for (    Address addr : to)     if (!from.containsMember(addr))     joined[index++]=addr;

  }

  for (  Address addr : from)   if (!to.containsMember(addr))   num_left++;

  if (num_left > 0) {

    left=new Address[num_left];

    int index=0;

    for (    Address addr : from)     if (!to.containsMember(addr))     left[index++]=addr;

  }

  return new Address[][]{joined != null ? joined : new Address[]{},left != null ? left : new Address[]{}};

}

Location: View.java

Content: 

/** 

 * Returns a list of members which left from view one to two

 * @param one

 * @param two

 */

public static List<Address> leftMembers(View one,View two){

  if (one == null || two == null)   return null;

  List<Address> retval=new ArrayList<>(one.getMembers());

  retval.removeAll(two.getMembers());

  return retval;

}

Location: View.java

Content: 

public static List<Address> newMembers(View old,View new_view){

  if (old == null || new_view == null)   return null;

  List<Address> retval=new ArrayList<>(new_view.getMembers());

  retval.removeAll(old.getMembers());

  return retval;

}

Location: View.java

Content: 

/** 

 * Checks if two views have the same members observing order. E.g. {A,B,C} and {B,A,C} returns false, {A,C,B} and {A,C,B} returns true 

 */

public static boolean sameMembersOrdered(View v1,View v2){

  return Arrays.equals(v1.getMembersRaw(),v2.getMembersRaw());

}

Location: View.java

Content: 

/** 

 * Checks if two views have the same members regardless of order. E.g. {A,B,C} and {B,A,C} returns true 

 */

public static boolean sameMembers(View v1,View v2){

  if (v1 == v2)   return true;

  if (v1.size() != v2.size())   return false;

  Address[][] diff=diff(v1,v2);

  return diff[0].length == 0 && diff[1].length == 0;

}

Location: View.java

Content: 

public static boolean sameViews(Collection<View> views){

  ViewId first_view_id=views.iterator().next().getViewId();

  return views.stream().allMatch(v -> v.getViewId().equals(first_view_id));

}

Location: View.java

Content: 

/** 

 * Returns true if all views are the same. Uses the view IDs for comparison 

 */

public static boolean sameViews(View... views){

  ViewId first_view_id=views[0].getViewId();

  return Stream.of(views).allMatch(v -> v.getViewId().equals(first_view_id));

}

Location: View.java

Content: 

/** 

 * Creates a new view

 * @param creator The creator of this view (can not be null)

 * @param id      The lamport timestamp of this view

 * @param members Contains a list of all the members in the view, can be empty but not null.

 */

public View(Address creator,long id,List<Address> members){

  this(new ViewId(creator,id),members);

}

Location: View.java

Content: 

/** 

 * Creates a new view.

 * @param view_id The new view-id

 * @param members The members. Note that the parameter is <em>not</em> copied.

 */

public View(ViewId view_id,Address[] members){

  this.view_id=view_id;

  this.members=members;

  if (members == null)   throw new IllegalArgumentException("members cannot be null");

}

Location: View.java

Content: 

/** 

 * Creates a new view

 * @param view_id The view id of this view (can not be null)

 * @param members Contains a list of all the members in the view, can be empty but not null.

 */

public View(ViewId view_id,Collection<Address> members){

  this.view_id=view_id;

  if (members == null)   throw new IllegalArgumentException("members cannot be null");

  this.members=new Address[members.size()];

  int index=0;

  for (  Address member : members)   this.members[index++]=member;

}

