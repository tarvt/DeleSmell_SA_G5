Location: KeyExchange.java

Content: 

/** 

 * Needs to fetch the secret key from a given destination (usually the key server). When received, the secret key (and version) needs to be installed in a protocol above using  {@link #setSecretKeyAbove(Tuple)}.

 * @param target The member from which to fetch the secret key

 */

public abstract void fetchSecretKeyFrom(Address target) throws Exception ;

Location: KeyExchange.java

Content: 

protected <T extends Protocol>T findProtocolAbove(Class<? extends Protocol> clazz){

  Protocol tmp=this;

  while (tmp != null) {

    Class<?> protClass=tmp.getClass();

    if (clazz.isAssignableFrom(protClass))     return (T)tmp;

    tmp=tmp.getUpProtocol();

  }

  return null;

}

Location: KeyExchange.java

Content: 

/** 

 * Fetches the secret key from a protocol above us

 * @return The secret key and its version

 */

protected Tuple<SecretKey,byte[]> getSecretKeyFromAbove(){

  return (Tuple<SecretKey,byte[]>)up_prot.up(new Event(Event.GET_SECRET_KEY));

}

Location: KeyExchange.java

Content: 

/** 

 * Returns the address of the server, e.g. server socket (if any) 

 */

public abstract Address getServerLocation();

Location: KeyExchange.java

Content: 

/** 

 * Sets the secret key in a protocol above us

 * @param key The secret key and its version

 */

protected void setSecretKeyAbove(Tuple<SecretKey,byte[]> key){

  up_prot.up(new Event(Event.SET_SECRET_KEY,key));

}

