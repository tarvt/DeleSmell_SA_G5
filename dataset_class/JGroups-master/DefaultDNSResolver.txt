Location: DefaultDNSResolver.java

Content: 

DefaultDNSResolver(DirContext context){

  this.dnsContext=context;

}

Location: DefaultDNSResolver.java

Content: 

public DefaultDNSResolver(String dnsContextFactory,String dnsAddress) throws NamingException {

  log.trace("initializing DNS Context with factory: %s and url: %s",dnsContextFactory,dnsAddress);

  Properties env=new Properties();

  env.put(Context.INITIAL_CONTEXT_FACTORY,dnsContextFactory);

  if (dnsAddress != null) {

    env.put(Context.PROVIDER_URL,"dns://" + dnsAddress);

  }

  this.dnsContext=new InitialDirContext(env);

}

Location: DefaultDNSResolver.java

Content: 

protected DirContext getDnsContext(){

  return dnsContext;

}

Location: DefaultDNSResolver.java

Content: 

protected static List<Address> resolveAEntries(String dnsQuery,String srcPort){

  List<Address> addresses=new ArrayList<>();

  try {

    InetAddress[] inetAddresses=InetAddress.getAllByName(dnsQuery);

    for (    InetAddress address : inetAddresses) {

      addresses.add(new IpAddress(address,Integer.parseInt(srcPort)));

    }

  }

 catch (  UnknownHostException ex) {

    log.trace("failed to resolve query %s, ex: %s",dnsQuery,ex.getMessage());

  }

  return addresses;

}

Location: DefaultDNSResolver.java

Content: 

protected List<Address> resolveSRVEntries(String dnsQuery){

  List<Address> addresses=new ArrayList<>();

  try {

    Attributes attributes=dnsContext.getAttributes(dnsQuery,new String[]{DNSRecordType.SRV.toString()});

    if (attributes != null && attributes.getAll().hasMoreElements()) {

      NamingEnumeration<?> namingEnumeration=attributes.get(DNSRecordType.SRV.toString()).getAll();

      while (namingEnumeration.hasMoreElements()) {

        try {

          String srvEntry=namingEnumeration.nextElement().toString();

          Matcher matcher=SRV_REGEXP.matcher(srvEntry);

          if (matcher.find()) {

            String srcPort=matcher.group(1);

            String srcDNSRecord=matcher.group(2);

            addresses.addAll(resolveAEntries(srcDNSRecord,srcPort));

          }

        }

 catch (        Exception e) {

          log.trace("non critical DNS resolution error",e);

        }

      }

    }

  }

 catch (  NamingException ex) {

    log.trace("no DNS records for query %s, ex: %s",dnsQuery,ex.getMessage());

  }

  return addresses;

}

