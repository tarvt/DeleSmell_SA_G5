Location: RouterStubManager.java

Content: 

protected boolean add(RouterStub stub){

  if (stub == null)   return false;

  List<RouterStub> new_stubs=new ArrayList<>(stubs);

  boolean retval=!new_stubs.contains(stub) && new_stubs.add(stub);

  this.stubs=new_stubs;

  return retval;

}

Location: RouterStubManager.java

Content: 

protected boolean add(Target target){

  if (target == null)   return false;

  Set<Target> new_set=new HashSet<>(reconnect_list);

  if (new_set.add(target)) {

    this.reconnect_list=new_set;

    return true;

  }

  return false;

}

Location: RouterStubManager.java

Content: 

@Override public void closed(RouterStub stub){

  moveStubToReconnects(stub);

}

Location: RouterStubManager.java

Content: 

public void connectStubs(){

  for (  RouterStub stub : stubs) {

    try {

      if (!stub.isConnected())       stub.connect(cluster_name,local_addr,logical_name,phys_addr);

    }

 catch (    Throwable e) {

      moveStubToReconnects(stub);

    }

  }

}

Location: RouterStubManager.java

Content: 

public RouterStub createAndRegisterStub(IpAddress local,IpAddress router_addr){

  RouterStub stub=new RouterStub(local,router_addr,use_nio,this);

  RouterStub old_stub=unregisterStub(router_addr);

  if (old_stub != null)   old_stub.destroy();

  add(stub);

  return stub;

}

Location: RouterStubManager.java

Content: 

public void destroyStubs(){

  stopReconnector();

  stubs.forEach(RouterStub::destroy);

  stubs.clear();

}

Location: RouterStubManager.java

Content: 

public void disconnectStubs(){

  stopReconnector();

  for (  RouterStub stub : stubs) {

    try {

      stub.disconnect(cluster_name,local_addr);

    }

 catch (    Throwable e) {

    }

  }

}

Location: RouterStubManager.java

Content: 

public static RouterStubManager emptyGossipClientStubManager(Protocol p){

  return new RouterStubManager(p,null,null,null,null,0L);

}

Location: RouterStubManager.java

Content: 

protected RouterStub find(IpAddress router_addr){

  for (  RouterStub stub : stubs) {

    IpAddress addr=stub.gossipRouterAddress();

    if (Objects.equals(addr,router_addr))     return stub;

  }

  return null;

}

Location: RouterStubManager.java

Content: 

/** 

 * Applies action to a randomly picked RouterStub that's connected

 * @param action

 */

public void forAny(Consumer<RouterStub> action){

  while (!stubs.isEmpty()) {

    RouterStub stub=Util.pickRandomElement(stubs);

    if (stub != null && stub.isConnected()) {

      action.accept(stub);

      return;

    }

  }

}

Location: RouterStubManager.java

Content: 

/** 

 * Applies action to all RouterStubs that are connected

 * @param action

 */

public void forEach(Consumer<RouterStub> action){

  stubs.stream().filter(RouterStub::isConnected).forEach(action);

}

Location: RouterStubManager.java

Content: 

protected void moveStubToReconnects(RouterStub stub){

  if (stub == null)   return;

  remove(stub);

  if (add(new Target(stub.local(),stub.remote(),stub.receiver()))) {

    log.debug("%s: connection to %s closed, trying to re-establish connection",local_addr,stub.remote());

    startReconnector();

  }

}

Location: RouterStubManager.java

Content: 

public String printReconnectList(){

  return Util.printListWithDelimiter(reconnect_list,", ");

}

Location: RouterStubManager.java

Content: 

public String printStubs(){

  return Util.printListWithDelimiter(stubs,", ");

}

Location: RouterStubManager.java

Content: 

protected boolean reconnect(Target target){

  RouterStub stub=new RouterStub(target.bind_addr,target.router_addr,this.use_nio,this).receiver(target.receiver);

  if (!add(stub))   return false;

  try {

    stub.connect(this.cluster_name,this.local_addr,this.logical_name,this.phys_addr);

    log.debug("%s: re-established connection to %s successfully for group %s",local_addr,stub.remote(),this.cluster_name);

    return true;

  }

 catch (  Throwable t) {

    remove(stub);

    return false;

  }

}

Location: RouterStubManager.java

Content: 

protected boolean remove(RouterStub stub){

  if (stub == null)   return false;

  stub.destroy();

  List<RouterStub> new_stubs=new ArrayList<>(stubs);

  boolean retval=new_stubs.remove(stub);

  this.stubs=new_stubs;

  return retval;

}

Location: RouterStubManager.java

Content: 

protected boolean remove(Target target){

  if (target == null)   return false;

  Set<Target> new_set=new HashSet<>(reconnect_list);

  if (new_set.remove(target)) {

    this.reconnect_list=new_set;

    return true;

  }

  return false;

}

Location: RouterStubManager.java

Content: 

public RouterStubManager(Protocol owner,String cluster_name,Address local_addr,String logical_name,PhysicalAddress phys_addr,long interval){

  this.owner=owner;

  this.stubs=new ArrayList<>();

  this.reconnect_list=new HashSet<>();

  this.log=LogFactory.getLog(owner.getClass());

  this.timer=owner.getTransport().getTimer();

  this.cluster_name=cluster_name;

  this.local_addr=local_addr;

  this.logical_name=logical_name;

  this.phys_addr=phys_addr;

  this.interval=interval;

}

Location: RouterStubManager.java

Content: 

protected synchronized void startReconnector(){

  if (reconnector_task == null || reconnector_task.isDone())   reconnector_task=timer.scheduleWithFixedDelay(this,interval,interval,TimeUnit.MILLISECONDS);

}

Location: RouterStubManager.java

Content: 

protected synchronized void stopReconnector(){

  if (reconnector_task != null)   reconnector_task.cancel(true);

}

Location: RouterStubManager.java

Content: 

public RouterStub unregisterStub(IpAddress router_addr){

  RouterStub stub=find(router_addr);

  if (stub != null)   remove(stub);

  return stub;

}

Location: RouterStubManager.java

Content: 

public RouterStubManager useNio(boolean flag){

  use_nio=flag;

  return this;

}

