Location: RouterStub.java

Content: 

@Override public int compareTo(RouterStub o){

  return remote.compareTo(o.remote);

}

Location: RouterStub.java

Content: 

public synchronized void connect() throws Exception {

  _doConnect();

}

Location: RouterStub.java

Content: 

@Override public void connectionClosed(Connection conn,String reason){

  if (close_listener != null)   close_listener.closed(this);

}

Location: RouterStub.java

Content: 

@Override public void connectionEstablished(Connection conn){

}

Location: RouterStub.java

Content: 

public CloseListener connectionListener(){

  return close_listener;

}

Location: RouterStub.java

Content: 

public RouterStub connectionListener(CloseListener l){

  this.close_listener=l;

  return this;

}

Location: RouterStub.java

Content: 

/** 

 * Registers mbr with the GossipRouter under the given group, with the given logical name and physical address. Establishes a connection to the GossipRouter and sends a CONNECT message.

 * @param group The group cluster) name under which to register the member

 * @param addr The address of the member

 * @param logical_name The logical name of the member

 * @param phys_addr The physical address of the member

 * @throws Exception Thrown when the registration failed

 */

public void connect(String group,Address addr,String logical_name,PhysicalAddress phys_addr) throws Exception {

synchronized (this) {

    _doConnect();

  }

  try {

    writeRequest(new GossipData(GossipType.REGISTER,group,addr,logical_name,phys_addr));

  }

 catch (  Exception ex) {

    throw new Exception(String.format("connection to %s failed: %s",group,ex));

  }

}

Location: RouterStub.java

Content: 

public void disconnect(String group,Address addr) throws Exception {

  writeRequest(new GossipData(GossipType.UNREGISTER,group,addr));

}

Location: RouterStub.java

Content: 

/** 

 * Fetches a list of  {@link PingData} from the GossipRouter, one for each member in the given group. This callreturns immediately and when the results are available, the {@link org.jgroups.stack.RouterStub.MembersNotification#members(List)} callback will be invoked.

 * @param group The group for which we need members information

 * @param callback The callback to be invoked.

 */

public void getMembers(final String group,MembersNotification callback) throws Exception {

  if (callback == null)   return;

synchronized (get_members_map) {

    List<MembersNotification> set=get_members_map.get(group);

    if (set == null)     get_members_map.put(group,set=new ArrayList<>());

    set.add(callback);

  }

  try {

    writeRequest(new GossipData(GossipType.GET_MBRS,group,null));

  }

 catch (  Exception ex) {

    removeResponse(group,callback);

    throw new Exception(String.format("connection to %s broken. Could not send %s request: %s",gossipRouterAddress(),GossipType.GET_MBRS,ex));

  }

}

Location: RouterStub.java

Content: 

public IpAddress gossipRouterAddress(){

  return remote;

}

Location: RouterStub.java

Content: 

public boolean isConnected(){

  return client != null && ((Client)client).isConnected();

}

Location: RouterStub.java

Content: 

public IpAddress local(){

  return local;

}

Location: RouterStub.java

Content: 

protected void notifyResponse(String group,List<PingData> list){

  if (group == null)   return;

  if (list == null)   list=Collections.emptyList();

synchronized (get_members_map) {

    List<MembersNotification> set=get_members_map.get(group);

    while (set != null && !set.isEmpty()) {

      try {

        MembersNotification rsp=set.remove(0);

        rsp.members(list);

      }

 catch (      Throwable t) {

        log.error("failed notifying %s: %s",group,t);

      }

    }

    get_members_map.remove(group);

  }

}

Location: RouterStub.java

Content: 

public StubReceiver receiver(){

  return receiver;

}

Location: RouterStub.java

Content: 

public RouterStub receiver(StubReceiver r){

  receiver=r;

  return this;

}

Location: RouterStub.java

Content: 

@Override public void receive(Address sender,ByteBuffer buf){

  Util.bufferToArray(sender,buf,this);

}

Location: RouterStub.java

Content: 

@Override public void receive(Address sender,byte[] buf,int offset,int length){

  ByteArrayDataInputStream in=new ByteArrayDataInputStream(buf,offset,length);

  GossipData data=new GossipData();

  try {

    data.readFrom(in);

switch (data.getType()) {

case MESSAGE:

case SUSPECT:

      if (receiver != null)       receiver.receive(data);

    break;

case GET_MBRS_RSP:

  notifyResponse(data.getGroup(),data.getPingData());

break;

}

}

 catch (Exception ex) {

log.error(Util.getMessage("FailedReadingData"),ex);

}

}

Location: RouterStub.java

Content: 

public void receive(Address sender,DataInput in) throws Exception {

  GossipData data=new GossipData();

  data.readFrom(in);

switch (data.getType()) {

case MESSAGE:

case SUSPECT:

    if (receiver != null)     receiver.receive(data);

  break;

case GET_MBRS_RSP:

notifyResponse(data.getGroup(),data.getPingData());

break;

}

}

Location: RouterStub.java

Content: 

public IpAddress remote(){

  return remote;

}

Location: RouterStub.java

Content: 

protected void removeResponse(String group,MembersNotification notif){

synchronized (get_members_map) {

    List<MembersNotification> set=get_members_map.get(group);

    if (set == null || set.isEmpty()) {

      get_members_map.remove(group);

      return;

    }

    if (set.remove(notif) && set.isEmpty())     get_members_map.remove(group);

  }

}

Location: RouterStub.java

Content: 

/** 

 * Creates a stub to a remote GossipRouter

 * @param bind_addr The local address to bind to. If null, one will be picked

 * @param bind_port The local port. If 0, a random port will be used

 * @param router_host The address of the remote {@link GossipRouter}

 * @param router_port The port on which the remote GossipRouter is listening

 * @param use_nio Whether to use blocking or non-blocking IO

 * @param l The {@link org.jgroups.stack.RouterStub.CloseListener}

 */

public RouterStub(InetAddress bind_addr,int bind_port,InetAddress router_host,int router_port,boolean use_nio,CloseListener l){

  local=new IpAddress(bind_addr,bind_port);

  this.remote=new IpAddress(router_host,router_port);

  this.use_nio=use_nio;

  this.close_listener=l;

  client=use_nio ? new NioClient(bind_addr,bind_port,router_host,router_port) : new TcpClient(bind_addr,bind_port,router_host,router_port);

  client.addConnectionListener(this);

  client.receiver(this);

  client.socketConnectionTimeout(sock_conn_timeout).tcpNodelay(tcp_nodelay);

}

Location: RouterStub.java

Content: 

public RouterStub(IpAddress local,IpAddress remote,boolean use_nio,CloseListener l){

  this.local=local;

  this.remote=remote;

  this.use_nio=use_nio;

  this.close_listener=l;

  client=use_nio ? new NioClient(local,remote) : new TcpClient(local,remote);

  client.receiver(this);

  client.addConnectionListener(this);

  client.socketConnectionTimeout(sock_conn_timeout).tcpNodelay(tcp_nodelay);

}

Location: RouterStub.java

Content: 

public void sendToAllMembers(String group,Address sender,byte[] data,int offset,int length) throws Exception {

  sendToMember(group,null,sender,data,offset,length);

}

Location: RouterStub.java

Content: 

public void sendToMember(String group,Address dest,Address sender,byte[] data,int offset,int length) throws Exception {

  try {

    writeRequest(new GossipData(GossipType.MESSAGE,group,dest,data,offset,length).setSender(sender));

  }

 catch (  Exception ex) {

    throw new Exception(String.format("connection to %s broken. Could not send message to %s: %s",gossipRouterAddress(),dest,ex));

  }

}

Location: RouterStub.java

Content: 

public RouterStub set(String attr,Object val){

switch (attr) {

case "tcp_nodelay":

    tcpNoDelay((Boolean)val);

  break;

default :

throw new IllegalArgumentException("Attribute " + attr + " unknown");

}

return this;

}

Location: RouterStub.java

Content: 

public int socketConnectionTimeout(){

  return sock_conn_timeout;

}

Location: RouterStub.java

Content: 

public RouterStub socketConnectionTimeout(int timeout){

  this.sock_conn_timeout=timeout;

  return this;

}

Location: RouterStub.java

Content: 

public boolean tcpNoDelay(){

  return tcp_nodelay;

}

Location: RouterStub.java

Content: 

public RouterStub tcpNoDelay(boolean tcp_nodelay){

  this.tcp_nodelay=tcp_nodelay;

  return this;

}

Location: RouterStub.java

Content: 

public boolean useNio(){

  return use_nio;

}

Location: RouterStub.java

Content: 

protected synchronized void writeRequest(GossipData req) throws Exception {

  int size=req.serializedSize();

  ByteArrayDataOutputStream out=new ByteArrayDataOutputStream(size + 5);

  req.writeTo(out);

  client.send(remote,out.buffer(),0,out.position());

}

Location: RouterStub.java

Content: 

@GuardedBy("lock") protected void _doConnect() throws Exception {

  client.start();

}

