Location: Request.java

Content: 

public boolean cancel(boolean mayInterruptIfRunning){

  try {

    return super.cancel(mayInterruptIfRunning);

  }

  finally {

    corrDone();

  }

}

Location: Request.java

Content: 

protected void corrDone(){

  if (corr != null && this.req_id > 0)   corr.done(this.req_id);

}

Location: Request.java

Content: 

public T execute(Buffer data,boolean block_for_results) throws Exception {

  if (corr == null)   return null;

  sendRequest(data);

  if (!block_for_results || options.mode() == ResponseMode.GET_NONE)   return null;

  long timeout=options.timeout();

  return timeout > 0 ? waitForCompletion(options.timeout(),TimeUnit.MILLISECONDS) : waitForCompletion();

}

Location: Request.java

Content: 

public abstract void receiveResponse(Object response_value,Address sender,boolean is_exception);

Location: Request.java

Content: 

public long requestId(){

  return req_id;

}

Location: Request.java

Content: 

public Request<T> requestId(long req_id){

  this.req_id=req_id;

  return this;

}

Location: Request.java

Content: 

public Request(RequestCorrelator corr,RequestOptions options){

  this.corr=corr;

  this.options=options;

}

Location: Request.java

Content: 

public abstract void sendRequest(Buffer data) throws Exception ;

Location: Request.java

Content: 

public Request setResponseFilter(RspFilter filter){

  options.rspFilter(filter);

  return this;

}

Location: Request.java

Content: 

public abstract void siteUnreachable(String site);

Location: Request.java

Content: 

public abstract void transportClosed();

Location: Request.java

Content: 

public abstract T waitForCompletion() throws Exception ;

Location: Request.java

Content: 

/** 

 * Blocks until all responses have been received and returns result or throws exception 

 */

public abstract T waitForCompletion(long timeout,TimeUnit unit) throws Exception ;

