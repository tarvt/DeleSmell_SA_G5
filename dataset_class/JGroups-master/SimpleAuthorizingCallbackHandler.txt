Location: SimpleAuthorizingCallbackHandler.java

Content: 

@Override public void handle(Callback[] callbacks) throws IOException, UnsupportedCallbackException {

  List<Callback> responseCallbacks=new LinkedList<>();

  String remotePrincipal=null;

  boolean remotePrincipalFound=false;

  for (  Callback current : callbacks) {

    if (current instanceof AuthorizeCallback) {

      responseCallbacks.add(current);

    }

 else     if (current instanceof NameCallback) {

      NameCallback nameCallback=(NameCallback)current;

      remotePrincipal=nameCallback.getDefaultName();

      if (remotePrincipal != null) {

        remotePrincipalFound=credentials.containsKey(remotePrincipal);

      }

 else {

        responseCallbacks.add(current);

      }

    }

 else     if (current instanceof PasswordCallback) {

      responseCallbacks.add(current);

    }

 else     if (current instanceof RealmCallback) {

      String realmLocal=((RealmCallback)current).getDefaultText();

      if (realmLocal != null && !realmLocal.equals(this.realm)) {

        throw new IOException("Invalid realm " + realmLocal);

      }

      responseCallbacks.add(current);

    }

 else {

      throw new UnsupportedCallbackException(current);

    }

  }

  for (  Callback current : responseCallbacks) {

    if (current instanceof NameCallback) {

      ((NameCallback)current).setName(localPrincipal);

    }

 else     if (current instanceof AuthorizeCallback) {

      AuthorizeCallback acb=(AuthorizeCallback)current;

      String authenticationId=acb.getAuthenticationID();

      String authorizationId=acb.getAuthorizationID();

      acb.setAuthorized(authenticationId.equals(authorizationId));

      if (role != null) {

        String principalRoleNames=roles.getProperty(acb.getAuthorizationID());

        List<String> principalRoles=(List<String>)(principalRoleNames != null ? Arrays.asList(principalRoleNames.split("\\s*,\\s*")) : Collections.emptyList());

        if (!principalRoles.contains(role)) {

          throw new IOException("Unauthorized user " + authorizationId);

        }

      }

    }

 else     if (current instanceof PasswordCallback) {

      String password;

      if (remotePrincipal == null) {

        password=credentials.getProperty(localPrincipal);

      }

 else       if (remotePrincipalFound) {

        password=credentials.getProperty(remotePrincipal);

      }

 else {

        throw new IOException("Unauthorized user " + remotePrincipal);

      }

      ((PasswordCallback)current).setPassword(password.toCharArray());

    }

 else     if (current instanceof RealmCallback) {

      ((RealmCallback)current).setText(realm);

    }

  }

}

Location: SimpleAuthorizingCallbackHandler.java

Content: 

private static String requireProperty(Properties properties,String propertyName){

  String value=properties.getProperty(propertyName);

  if (value == null) {

    throw new IllegalStateException("The required system property " + propertyName + " has not been set");

  }

 else {

    return value;

  }

}

Location: SimpleAuthorizingCallbackHandler.java

Content: 

public SimpleAuthorizingCallbackHandler(){

  this(SecurityActions.getSystemProperties());

}

Location: SimpleAuthorizingCallbackHandler.java

Content: 

public SimpleAuthorizingCallbackHandler(Properties properties){

  this.credentials=new Properties();

  this.roles=new Properties();

  localPrincipal=requireProperty(properties,"sasl.local.principal");

  String credentialsFile=requireProperty(properties,"sasl.credentials.properties");

  timer=new Timer();

  File fCredentials=new File(credentialsFile);

  timer.scheduleAtFixedRate(new FileWatchTask(fCredentials,new PropertiesReloadFileObserver(fCredentials,credentials)),0,TimeUnit.SECONDS.toMillis(10));

  role=properties.getProperty("sasl.role");

  String rolesFile=properties.getProperty("sasl.roles.properties");

  if (role != null) {

    if (rolesFile == null) {

      throw new IllegalStateException("To enable role authorization, both sasl.role and sasl.roles.properties system properties must be set");

    }

 else {

      File fRoles=new File(rolesFile);

      timer.scheduleAtFixedRate(new FileWatchTask(fRoles,new PropertiesReloadFileObserver(fRoles,roles)),0,TimeUnit.SECONDS.toMillis(10));

    }

  }

  realm=properties.getProperty("sasl.realm");

}

