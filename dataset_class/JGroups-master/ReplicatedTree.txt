Location: ReplicatedTree.java

Content: 

public void addReplicatedTreeListener(ReplicatedTreeListener listener){

  if (!listeners.contains(listener))   listeners.add(listener);

}

Location: ReplicatedTree.java

Content: 

/** 

 * Checks whether a given node exists in the tree

 * @param fqn The fully qualified name of the node

 * @return boolean Whether or not the node exists

 */

public boolean exists(String fqn){

  return fqn != null && findNode(fqn) != null;

}

Location: ReplicatedTree.java

Content: 

/** 

 * Fetch the group state from the current coordinator. If successful, this will trigger setState().

 */

public void fetchState(long timeout) throws Exception {

  channel.getState(null,timeout);

}

Location: ReplicatedTree.java

Content: 

/** 

 * Returns the node at fqn. This method should not be used by clients (therefore it is package-private): it is only used internally (for navigation). C++ 'friend' would come in handy here...

 * @param fqn The fully qualified name of the node

 * @return Node The node at fqn

 */

Node findNode(String fqn){

  StringHolder sh=new StringHolder();

  Node n=findParentNode(fqn,sh,false);

  String child_name=sh.getValue();

  if (fqn == null || fqn.equals(SEPARATOR) || fqn != null && fqn.isEmpty())   return root;

  if (n == null || child_name == null)   return null;

 else   return n.getChild(child_name);

}

Location: ReplicatedTree.java

Content: 

/** 

 * Find the node just <em>above</em> the one indicated by  {@code fqn}. This is needed in many cases, e.g. to add a new node or remove an existing node.

 * @param fqn The fully qualified name of the node.

 * @param child_name Will be filled with the name of the child when this method returns. The child nameis the last relative name of the  {@code fqn}, e.g. in "/a/b/c" it would be "c".

 * @param create_if_not_exists Create parent nodes along the way if they don't exist. Otherwise, this methodwill return when a node cannot be found.

 */

Node findParentNode(String fqn,StringHolder child_name,boolean create_if_not_exists){

  Node curr=root, node;

  StringTokenizer tok;

  String name;

  StringBuilder sb=null;

  if (fqn == null || fqn.equals(SEPARATOR) || fqn != null && fqn.isEmpty())   return curr;

  sb=new StringBuilder();

  tok=new StringTokenizer(fqn,SEPARATOR);

  while (tok.countTokens() > 1) {

    name=tok.nextToken();

    sb.append(SEPARATOR).append(name);

    node=curr.getChild(name);

    if (node == null && create_if_not_exists)     node=curr.createChild(name,sb.toString(),null,null);

    if (node == null)     return null;

 else     curr=node;

  }

  if (tok.countTokens() > 0 && child_name != null)   child_name.setValue(tok.nextToken());

  return curr;

}

Location: ReplicatedTree.java

Content: 

/** 

 * Returns all children of a given node

 * @param fqn The fully qualified name of the node

 * @return Set A list of child names (as Strings)

 */

public Set getChildrenNames(String fqn){

  Node n=findNode(fqn);

  Map m;

  if (n == null)   return null;

  m=n.getChildren();

  if (m != null)   return m.keySet();

 else   return null;

}

Location: ReplicatedTree.java

Content: 

/** 

 * Returns the number of current members joined to the group

 * @return int

 */

public int getGroupMembersNumber(){

  return members.size();

}

Location: ReplicatedTree.java

Content: 

/** 

 * Returns the name of the group that the DistributedTree is connected to

 * @return String

 */

public String getGroupName(){

  return groupname;

}

Location: ReplicatedTree.java

Content: 

/** 

 * Gets the keys of the  {@code data} map. Returns all keys as Strings. Returns null if nodedoes not exist.

 * @param fqn The fully qualified name of the node

 * @return Set A set of keys (as Strings)

 */

public Set getKeys(String fqn){

  Node n=findNode(fqn);

  Map data;

  if (n == null)   return null;

  data=n.getData();

  if (data == null)   return null;

  return data.keySet();

}

Location: ReplicatedTree.java

Content: 

/** 

 * Finds a node given its name and returns the value associated with a given key in its  {@code data}map. Returns null if the node was not found in the tree or the key was not found in the hashmap.

 * @param fqn The fully qualified name of the node.

 * @param key The key.

 */

public Object get(String fqn,String key){

  Node n=findNode(fqn);

  if (n == null)   return null;

  return n.getData(key);

}

Location: ReplicatedTree.java

Content: 

/** 

 * Generates NodeAdded notifications for all nodes of the tree. This is called whenever the tree is initially retrieved (state transfer) 

 */

void notifyAllNodesCreated(Node curr){

  Node n;

  Map children;

  if (curr == null)   return;

  notifyNodeAdded(curr.fqn);

  if ((children=curr.getChildren()) != null) {

    for (Iterator it=children.values().iterator(); it.hasNext(); ) {

      n=(Node)it.next();

      notifyAllNodesCreated(n);

    }

  }

}

Location: ReplicatedTree.java

Content: 

void notifyNodeAdded(String fqn){

  for (int i=0; i < listeners.size(); i++)   listeners.get(i).nodeAdded(fqn);

}

Location: ReplicatedTree.java

Content: 

void notifyNodeModified(String fqn){

  for (int i=0; i < listeners.size(); i++)   listeners.get(i).nodeModified(fqn);

}

Location: ReplicatedTree.java

Content: 

void notifyNodeRemoved(String fqn){

  for (int i=0; i < listeners.size(); i++)   listeners.get(i).nodeRemoved(fqn);

}

Location: ReplicatedTree.java

Content: 

void notifyViewChange(View v){

  for (int i=0; i < listeners.size(); i++)   listeners.get(i).viewChange(v);

}

Location: ReplicatedTree.java

Content: 

/** 

 * Prints a representation of the node defined by  {@code fqn}. Output includes name, fqn and data.

 */

public String print(String fqn){

  Node n=findNode(fqn);

  if (n == null)   return null;

  return n.toString();

}

Location: ReplicatedTree.java

Content: 

/** 

 * Adds a new node to the tree and sets its data. If the node doesn not yet exist, it will be created. Also, parent nodes will be created if not existent. If the node already has data, then the new data will override the old one. If the node already existed, a nodeModified() notification will be generated. Otherwise a nodeCreated() motification will be emitted.

 * @param fqn The fully qualified name of the new node

 * @param data The new data. May be null if no data should be set in the node.

 */

public void put(String fqn,HashMap data){

  if (!remote_calls) {

    _put(fqn,data);

    return;

  }

  if (send_message) {

    if (channel == null) {

      if (log.isErrorEnabled())       log.error("channel is null, cannot broadcast PUT request");

      return;

    }

    try {

      channel.send(new Message(null,new Request(Request.PUT,fqn,data)));

    }

 catch (    Exception ex) {

      if (log.isErrorEnabled())       log.error("failure bcasting PUT request: " + ex);

    }

  }

 else {

    _put(fqn,data);

  }

}

Location: ReplicatedTree.java

Content: 

/** 

 * Adds a key and value to a given node. If the node doesn't exist, it will be created. If the node already existed, a nodeModified() notification will be generated. Otherwise a nodeCreated() motification will be emitted.

 * @param fqn The fully qualified name of the node

 * @param key The key

 * @param value The value

 */

public void put(String fqn,String key,Object value){

  if (!remote_calls) {

    _put(fqn,key,value);

    return;

  }

  if (send_message) {

    if (channel == null) {

      if (log.isErrorEnabled())       log.error("channel is null, cannot broadcast PUT request");

      return;

    }

    try {

      channel.send(new Message(null,new Request(Request.PUT,fqn,key,value)));

    }

 catch (    Exception ex) {

      if (log.isErrorEnabled())       log.error("failure bcasting PUT request: " + ex);

    }

  }

 else {

    _put(fqn,key,value);

  }

}

Location: ReplicatedTree.java

Content: 

public void removeReplicatedTreeListener(ReplicatedTreeListener listener){

  listeners.remove(listener);

}

Location: ReplicatedTree.java

Content: 

/** 

 * Removes  {@code key} from the node's hashmap

 * @param fqn The fullly qualified name of the node

 * @param key The key to be removed

 */

public void remove(String fqn,String key){

  if (!remote_calls) {

    _remove(fqn,key);

    return;

  }

  if (send_message) {

    if (channel == null) {

      if (log.isErrorEnabled())       log.error("channel is null, cannot broadcast REMOVE request");

      return;

    }

    try {

      channel.send(new Message(null,new Request(Request.REMOVE,fqn,key)));

    }

 catch (    Exception ex) {

      if (log.isErrorEnabled())       log.error("failure bcasting REMOVE request: " + ex);

    }

  }

 else {

    _remove(fqn,key);

  }

}

Location: ReplicatedTree.java

Content: 

public ReplicatedTree(){

}

Location: ReplicatedTree.java

Content: 

/** 

 * Expects an already connected channel. Creates a PullPushAdapter and starts it

 */

public ReplicatedTree(JChannel channel) throws Exception {

  this.channel=channel;

  channel.setReceiver(this);

  viewAccepted(channel.getView());

  start();

}

Location: ReplicatedTree.java

Content: 

/** 

 * Creates a channel with the given properties. Connects to the channel, then creates a PullPushAdapter and starts it

 */

public ReplicatedTree(String groupname,String props,long state_fetch_timeout) throws Exception {

  if (groupname != null)   this.groupname=groupname;

  if (props != null)   this.props=props;

  this.state_fetch_timeout=state_fetch_timeout;

  channel=new JChannel(this.props);

  channel.setReceiver(this);

  channel.connect(this.groupname);

  start();

}

Location: ReplicatedTree.java

Content: 

public ReplicatedTree(String groupname,String props,long state_fetch_timeout,boolean jmx) throws Exception {

  if (groupname != null)   this.groupname=groupname;

  if (props != null)   this.props=props;

  this.jmx=jmx;

  this.state_fetch_timeout=state_fetch_timeout;

  channel=new JChannel(this.props);

  channel.setReceiver(this);

  channel.connect(this.groupname);

  if (jmx) {

    MBeanServer server=Util.getMBeanServer();

    if (server == null)     throw new Exception("No MBeanServers found; need to run with an MBeanServer present, or inside JDK 5");

    JmxConfigurator.registerChannel(channel,server,"jgroups",channel.getClusterName(),true);

  }

  start();

}

Location: ReplicatedTree.java

Content: 

public void setRemoteCalls(boolean flag){

  remote_calls=flag;

}

Location: ReplicatedTree.java

Content: 

public void setRootNode(Node n){

  root=n;

}

Location: ReplicatedTree.java

Content: 

public void _put(String fqn,HashMap data){

  Node n;

  StringHolder child_name=new StringHolder();

  boolean child_exists=false;

  if (fqn == null)   return;

  n=findParentNode(fqn,child_name,true);

  if (child_name.getValue() != null) {

    child_exists=n.childExists(child_name.getValue());

    n.createChild(child_name.getValue(),fqn,n,data);

  }

 else {

    child_exists=true;

    n.setData(data);

  }

  if (child_exists)   notifyNodeModified(fqn);

 else   notifyNodeAdded(fqn);

}

Location: ReplicatedTree.java

Content: 

public void _put(String fqn,String key,Object value){

  Node n;

  StringHolder child_name=new StringHolder();

  boolean child_exists=false;

  if (fqn == null || key == null || value == null)   return;

  n=findParentNode(fqn,child_name,true);

  if (child_name.getValue() != null) {

    child_exists=n.childExists(child_name.getValue());

    n.createChild(child_name.getValue(),fqn,n,key,value);

  }

 else {

    child_exists=true;

    n.setData(key,value);

  }

  if (child_exists)   notifyNodeModified(fqn);

 else   notifyNodeAdded(fqn);

}

Location: ReplicatedTree.java

Content: 

public void _removeData(String fqn){

  Node n;

  if (fqn == null)   return;

  n=findNode(fqn);

  if (n != null)   n.removeData();

}

Location: ReplicatedTree.java

Content: 

public void _remove(String fqn){

  Node n;

  StringHolder child_name=new StringHolder();

  if (fqn == null)   return;

  if (fqn.equals(SEPARATOR)) {

    root.removeAll();

    notifyNodeRemoved(fqn);

    return;

  }

  n=findParentNode(fqn,child_name,false);

  if (n == null)   return;

  n.removeChild(child_name.getValue(),fqn);

  notifyNodeRemoved(fqn);

}

Location: ReplicatedTree.java

Content: 

public void _remove(String fqn,String key){

  Node n;

  if (fqn == null || key == null)   return;

  n=findNode(fqn);

  if (n != null)   n.removeData(key);

}

