Location: FixedMembershipToken.java

Content: 

public FixedMembershipToken(){

}

Location: FixedMembershipToken.java

Content: 

public FixedMembershipToken(String token){

  this.token=token;

}

Location: FixedMembershipToken.java

Content: 

public boolean isInMembersList(IpAddress sender){

  if (memberList == null || sender == null)   return false;

  for (  InetSocketAddress addr : memberList) {

    if (match(sender,addr))     return true;

  }

  return false;

}

Location: FixedMembershipToken.java

Content: 

public static boolean match(IpAddress sender,InetSocketAddress addr){

  return !(sender == null || addr == null) && addr.getAddress().equals(sender.getIpAddress()) && (addr.getPort() == 0 || addr.getPort() == sender.getPort());

}

Location: FixedMembershipToken.java

Content: 

@Property public void setFixedMembersSeparator(String value){

  fixed_members_seperator=value;

}

Location: FixedMembershipToken.java

Content: 

@Property(name="fixed_members_value") public void setMemberList(String list) throws UnknownHostException {

  memberList.clear();

  StringTokenizer memberListTokenizer=new StringTokenizer(list,fixed_members_seperator);

  while (memberListTokenizer.hasMoreTokens()) {

    String tmp=memberListTokenizer.nextToken().trim();

    int index=tmp.lastIndexOf('/');

    int port=index != -1 ? Integer.parseInt(tmp.substring(index + 1)) : 0;

    String addr_str=index != -1 ? tmp.substring(0,index) : tmp;

    InetAddress addr=InetAddress.getByName(addr_str);

    memberList.add(new InetSocketAddress(addr,port));

  }

}

