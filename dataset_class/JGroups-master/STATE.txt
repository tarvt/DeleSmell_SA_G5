Location: STATE.java

Content: 

protected Tuple<InputStream,Object> createStreamToProvider(final Address provider,final StateHeader hdr){

  Util.close(input_stream);

  input_stream=new BlockingInputStream(buffer_size);

  return new Tuple<>(input_stream,null);

}

Location: STATE.java

Content: 

protected void createStreamToRequester(Address requester){

  OutputStream bos=new StateOutputStream(requester);

  getStateFromApplication(requester,bos,false);

}

Location: STATE.java

Content: 

protected void handleEOF(Address sender){

  Util.close(input_stream);

  super.handleEOF(sender);

}

Location: STATE.java

Content: 

protected void handleStateChunk(Address sender,byte[] buffer,int offset,int length){

  if (buffer == null || input_stream == null)   return;

  try {

    if (log.isTraceEnabled())     log.trace("%s: received chunk of %s from %s",local_addr,Util.printBytes(length),sender);

    input_stream.write(buffer,offset,length);

  }

 catch (  IOException e) {

    handleException(e);

  }

}

Location: STATE.java

Content: 

public STATE(){

  super();

}

Location: STATE.java

Content: 

@Override protected boolean useAsyncStateDelivery(){

  return true;

}

