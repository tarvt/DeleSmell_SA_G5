Location: SeqnoList.java

Content: 

/** 

 * Adds a seqno range 

 */

public SeqnoList add(long from,long to){

  super.set(index(from),index(to));

  return this;

}

Location: SeqnoList.java

Content: 

/** 

 * Returns the last seqno, this should also be the highest seqno in the list as we're supposed to add seqnos in order

 * @return

 */

public long getLast(){

  int index=previousSetBit(size - 1);

  return index == -1 ? -1 : seqno(index);

}

Location: SeqnoList.java

Content: 

/** 

 * Removes all seqnos > seqno 

 */

public void removeHigherThan(long max_seqno){

  int from=index(max_seqno + 1), to=size - 1;

  if (from <= to && from >= 0)   super.clear(from,to);

}

Location: SeqnoList.java

Content: 

/** 

 * Only to be used by serialization 

 */

public SeqnoList(){

}

Location: SeqnoList.java

Content: 

public SeqnoList(int size){

  this(size,0);

}

Location: SeqnoList.java

Content: 

/** 

 * Creates a SeqnoList with a capacity for size elements.

 * @param size The max number of seqnos in the bitset

 * @param offset Lowest seqno. Used to compute the index of a given seqno into the bitset: seqno - offset

 */

public SeqnoList(int size,long offset){

  super(size);

  this.offset=offset;

}

Location: SeqnoList.java

Content: 

protected long seqno(int index){

  return offset + index;

}

