Location: AckCollector.java

Content: 

public AckCollector(){

  missing_acks=new ArrayList<>();

  expected_acks=0;

}

Location: AckCollector.java

Content: 

public AckCollector(Address... members){

  missing_acks=new ArrayList<>(members != null ? members.length : 10);

  addAll(members);

}

Location: AckCollector.java

Content: 

public AckCollector(Collection<Address> members){

  missing_acks=new ArrayList<>(members != null ? members.size() : 10);

  addAll(members);

}

Location: AckCollector.java

Content: 

public synchronized void ack(Address... members){

  for (  Address member : members) {

    if (member != null && missing_acks.remove(member) && missing_acks.isEmpty())     all_acks_received.setResult(Boolean.TRUE);

  }

}

Location: AckCollector.java

Content: 

public synchronized void ack(Collection<Address> members){

  for (  Address member : members) {

    if (member != null && missing_acks.remove(member) && missing_acks.isEmpty())     all_acks_received.setResult(Boolean.TRUE);

  }

}

Location: AckCollector.java

Content: 

protected synchronized void addAll(Address... members){

  if (members == null)   return;

  for (  Address member : members)   if (member != null && !missing_acks.contains(member))   missing_acks.add(member);

  expected_acks=missing_acks.size();

}

Location: AckCollector.java

Content: 

protected synchronized void addAll(Collection<Address> members){

  if (members == null)   return;

  members.stream().filter(member -> member != null && !missing_acks.contains(member)).forEach(missing_acks::add);

  expected_acks=missing_acks.size();

}

Location: AckCollector.java

Content: 

protected synchronized void addAll(Collection<Address> members,Address... exclude){

  if (members == null)   return;

  members.stream().filter(member -> member != null && !missing_acks.contains(member) && (exclude != null && !Util.contains(member,exclude))).forEach(missing_acks::add);

  expected_acks=missing_acks.size();

}

Location: AckCollector.java

Content: 

protected synchronized void addAll(Collection<Address> members,Collection<Address> exclude){

  if (members == null)   return;

  members.stream().filter(member -> member != null && !missing_acks.contains(member) && (exclude != null && !exclude.contains(member))).forEach(missing_acks::add);

  expected_acks=missing_acks.size();

}

Location: AckCollector.java

Content: 

public synchronized void destroy(){

  suspected_mbrs.clear();

  missing_acks.clear();

  expected_acks=0;

  all_acks_received.setResult(null);

}

Location: AckCollector.java

Content: 

public synchronized int expectedAcks(){

  return expected_acks;

}

Location: AckCollector.java

Content: 

public synchronized String printMissing(){

  return Util.printListWithDelimiter(missing_acks,", ");

}

Location: AckCollector.java

Content: 

public synchronized String printSuspected(){

  return Util.printListWithDelimiter(suspected_mbrs,", ");

}

Location: AckCollector.java

Content: 

public synchronized void reset(Collection<Address> members){

  suspected_mbrs.clear();

  missing_acks.clear();

  addAll(members);

  all_acks_received.reset();

}

Location: AckCollector.java

Content: 

public synchronized AckCollector reset(Collection<Address> expected_acks,Address... exclude){

  suspected_mbrs.clear();

  missing_acks.clear();

  addAll(expected_acks,exclude);

  all_acks_received.reset();

  return this;

}

Location: AckCollector.java

Content: 

public synchronized AckCollector reset(Collection<Address> expected_acks,Collection<Address> exclude){

  suspected_mbrs.clear();

  missing_acks.clear();

  addAll(expected_acks,exclude);

  all_acks_received.reset();

  return this;

}

Location: AckCollector.java

Content: 

public boolean retainAll(Collection<Address> members){

  if (members == null)   return false;

  boolean retval=false;

synchronized (this) {

    suspected_mbrs.retainAll(members);

    if ((retval=missing_acks.retainAll(members)) && missing_acks.isEmpty())     all_acks_received.setResult(Boolean.TRUE);

  }

  return retval;

}

Location: AckCollector.java

Content: 

public synchronized void suspect(Address... members){

  for (  Address member : members) {

    if (!suspected_mbrs.contains(member))     suspected_mbrs.add(member);

  }

  ack(members);

}

Location: AckCollector.java

Content: 

public synchronized void suspect(Collection<Address> members){

  for (  Address member : members) {

    if (!suspected_mbrs.contains(member))     suspected_mbrs.add(member);

  }

  ack(members);

}

Location: AckCollector.java

Content: 

public boolean waitForAllAcks(){

  if (missing_acks.isEmpty())   return true;

  Boolean result=all_acks_received.getResult();

  return result != null && result;

}

Location: AckCollector.java

Content: 

public boolean waitForAllAcks(long timeout) throws TimeoutException {

  if (missing_acks.isEmpty())   return true;

  Boolean result=all_acks_received.getResultWithTimeout(timeout);

  return result != null && result;

}

