Location: ResponseCollector.java

Content: 

public Map<Address,T> getResults(){

  return responses;

}

Location: ResponseCollector.java

Content: 

public List<Address> getValidResults(){

  return responses.entrySet().stream().filter(entry -> entry.getValue() != null).map(Map.Entry::getKey).collect(Collectors.toList());

}

Location: ResponseCollector.java

Content: 

public boolean hasAllResponses(){

  lock.lock();

  try {

    return responses.isEmpty() || responses.entrySet().stream().allMatch(entry -> entry.getValue() != null);

  }

  finally {

    lock.unlock();

  }

}

Location: ResponseCollector.java

Content: 

public int numberOfValidResponses(){

  int retval=0;

  lock.lock();

  try {

    for (    Map.Entry<Address,T> entry : responses.entrySet()) {

      if (entry.getValue() != null)       retval++;

    }

    return retval;

  }

  finally {

    lock.unlock();

  }

}

Location: ResponseCollector.java

Content: 

public void remove(Address member){

  if (member == null)   return;

  lock.lock();

  try {

    if (responses.remove(member) != null)     cond.signal(true);

  }

  finally {

    lock.unlock();

  }

}

Location: ResponseCollector.java

Content: 

public void remove(List<Address> members){

  if (members == null || members.isEmpty())   return;

  lock.lock();

  try {

    members.forEach(responses::remove);

    cond.signal(true);

  }

  finally {

    lock.unlock();

  }

}

Location: ResponseCollector.java

Content: 

public void reset(Address... members){

  lock.lock();

  try {

    responses.clear();

    if (members != null) {

      for (      Address mbr : members)       responses.put(mbr,null);

    }

    cond.signal(true);

  }

  finally {

    lock.unlock();

  }

}

Location: ResponseCollector.java

Content: 

public ResponseCollector(){

  responses=new HashMap<>();

}

Location: ResponseCollector.java

Content: 

public ResponseCollector(Address... members){

  responses=members != null ? new HashMap<>(members.length) : new HashMap<>();

  reset(members);

}

Location: ResponseCollector.java

Content: 

/** 

 * @param members List of members from which we expect responses

 */

public ResponseCollector(Collection<Address> members){

  responses=members != null ? new HashMap<>(members.size()) : new HashMap<>();

  reset(members);

}

Location: ResponseCollector.java

Content: 

/** 

 * Waits until all responses have been received, or until a timeout has elapsed.

 * @param timeout Number of milliseconds to wait max. This value needs to be greater than 0, or elseit will be adjusted to 2000

 * @return boolean True if all responses have been received within timeout ms, else false (e.g. if interrupted)

 */

public boolean waitForAllResponses(long timeout){

  if (timeout <= 0)   timeout=2000L;

  return cond.waitFor(this::hasAllResponses,timeout,TimeUnit.MILLISECONDS);

}

