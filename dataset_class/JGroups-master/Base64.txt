Location: Base64.java

Content: 

/** 

 * Defeats instantiation. 

 */

private Base64(){

}

Location: Base64.java

Content: 

/** 

 * Decodes four bytes from array <var>source</var> and writes the resulting bytes (up to three of them) to <var>destination</var>. The source and destination arrays can be manipulated anywhere along their length by specifying  <var>srcOffset</var> and <var>destOffset</var>. This method does not check to make sure your arrays are large enough to accomodate <var>srcOffset</var> + 4 for the <var>source</var> array or <var>destOffset</var> + 3 for the <var>destination</var> array. This method returns the actual number of bytes that  were converted from the Base64 encoding. <p>This is the lowest level of the decoding methods with all possible parameters.</p>

 * @param source the array to convert

 * @param srcOffset the index where conversion begins

 * @param destination the array to hold the conversion

 * @param destOffset the index where output will be put

 * @param options alphabet type is pulled from this (standard, url-safe, ordered)

 * @return the number of decoded bytes converted

 * @throws NullPointerException if source or destination arrays are null

 * @throws IllegalArgumentException if srcOffset or destOffset are invalidor there is not enough room in the array.

 * @since 1.3

 */

private static int decode4to3(byte[] source,int srcOffset,byte[] destination,int destOffset,int options){

  if (source == null) {

    throw new NullPointerException("Source array was null.");

  }

  if (destination == null) {

    throw new NullPointerException("Destination array was null.");

  }

  if (srcOffset < 0 || srcOffset + 3 >= source.length) {

    throw new IllegalArgumentException(String.format("Source array with length %d cannot have offset of %d and still process four bytes.",source.length,srcOffset));

  }

  if (destOffset < 0 || destOffset + 2 >= destination.length) {

    throw new IllegalArgumentException(String.format("Destination array with length %d cannot have offset of %d and still store three bytes.",destination.length,destOffset));

  }

  byte[] DECODABET=getDecodabet(options);

  if (source[srcOffset + 2] == EQUALS_SIGN) {

    int outBuff=((DECODABET[source[srcOffset]] & 0xFF) << 18) | ((DECODABET[source[srcOffset + 1]] & 0xFF) << 12);

    destination[destOffset]=(byte)(outBuff >>> 16);

    return 1;

  }

 else   if (source[srcOffset + 3] == EQUALS_SIGN) {

    int outBuff=((DECODABET[source[srcOffset]] & 0xFF) << 18) | ((DECODABET[source[srcOffset + 1]] & 0xFF) << 12) | ((DECODABET[source[srcOffset + 2]] & 0xFF) << 6);

    destination[destOffset]=(byte)(outBuff >>> 16);

    destination[destOffset + 1]=(byte)(outBuff >>> 8);

    return 2;

  }

 else {

    int outBuff=((DECODABET[source[srcOffset]] & 0xFF) << 18) | ((DECODABET[source[srcOffset + 1]] & 0xFF) << 12) | ((DECODABET[source[srcOffset + 2]] & 0xFF) << 6)| ((DECODABET[source[srcOffset + 3]] & 0xFF));

    destination[destOffset]=(byte)(outBuff >> 16);

    destination[destOffset + 1]=(byte)(outBuff >> 8);

    destination[destOffset + 2]=(byte)(outBuff);

    return 3;

  }

}

Location: Base64.java

Content: 

/** 

 * Reads <tt>infile</tt> and decodes it to <tt>outfile</tt>.

 * @param infile Input file

 * @param outfile Output file

 * @throws java.io.IOException if there is an error

 * @since 2.2

 */

public static void decodeFileToFile(String infile,String outfile) throws java.io.IOException {

  byte[] decoded=Base64.decodeFromFile(infile);

  java.io.OutputStream out=null;

  try {

    out=new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));

    out.write(decoded);

  }

 catch (  java.io.IOException e) {

    throw e;

  }

 finally {

    try {

      out.close();

    }

 catch (    Exception ex) {

    }

  }

}

Location: Base64.java

Content: 

/** 

 * Convenience method for reading a base64-encoded file and decoding it. <p>As of v 2.3, if there is a error, the method will throw an java.io.IOException. <b>This is new to v2.3!</b> In earlier versions, it just returned false, but in retrospect that's a pretty poor way to handle it.</p>

 * @param filename Filename for reading encoded data

 * @return decoded byte array

 * @throws java.io.IOException if there is an error

 * @since 2.1

 */

public static byte[] decodeFromFile(String filename) throws java.io.IOException {

  byte[] decodedData=null;

  Base64.InputStream bis=null;

  try {

    java.io.File file=new java.io.File(filename);

    byte[] buffer=null;

    int length=0;

    int numBytes=0;

    if (file.length() > Integer.MAX_VALUE) {

      throw new java.io.IOException("File is too big for this convenience method (" + file.length() + " bytes).");

    }

    buffer=new byte[(int)file.length()];

    bis=new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(file)),Base64.DECODE);

    while ((numBytes=bis.read(buffer,length,4096)) >= 0) {

      length+=numBytes;

    }

    decodedData=new byte[length];

    System.arraycopy(buffer,0,decodedData,0,length);

  }

 catch (  java.io.IOException e) {

    throw e;

  }

 finally {

    try {

      bis.close();

    }

 catch (    Exception e) {

    }

  }

  return decodedData;

}

Location: Base64.java

Content: 

/** 

 * Convenience method for decoding data to a file. <p>As of v 2.3, if there is a error, the method will throw an java.io.IOException. <b>This is new to v2.3!</b> In earlier versions, it just returned false, but in retrospect that's a pretty poor way to handle it.</p>

 * @param dataToDecode Base64-encoded data as a string

 * @param filename Filename for saving decoded data

 * @throws java.io.IOException if there is an error

 * @since 2.1

 */

public static void decodeToFile(String dataToDecode,String filename) throws java.io.IOException {

  Base64.OutputStream bos=null;

  try {

    bos=new Base64.OutputStream(new java.io.FileOutputStream(filename),Base64.DECODE);

    bos.write(dataToDecode.getBytes(PREFERRED_ENCODING));

  }

 catch (  java.io.IOException e) {

    throw e;

  }

 finally {

    try {

      bos.close();

    }

 catch (    Exception e) {

    }

  }

}

Location: Base64.java

Content: 

/** 

 * Attempts to decode Base64 data and deserialize a Java Object within. Returns <tt>null</tt> if there was an error.

 * @param encodedObject The Base64 data to decode

 * @return The decoded and deserialized object

 * @throws NullPointerException if encodedObject is null

 * @throws java.io.IOException if there is a general error

 * @throws ClassNotFoundException if the decoded object is of aclass that cannot be found by the JVM

 * @since 1.5

 */

public static Object decodeToObject(String encodedObject) throws java.io.IOException, java.lang.ClassNotFoundException {

  return decodeToObject(encodedObject,NO_OPTIONS,null);

}

Location: Base64.java

Content: 

/** 

 * Attempts to decode Base64 data and deserialize a Java Object within. Returns <tt>null</tt> if there was an error. If <tt>loader</tt> is not null, it will be the class loader used when deserializing.

 * @param encodedObject The Base64 data to decode

 * @param options Various parameters related to decoding

 * @param loader Optional class loader to use in deserializing classes.

 * @return The decoded and deserialized object

 * @throws NullPointerException if encodedObject is null

 * @throws java.io.IOException if there is a general error

 * @throws ClassNotFoundException if the decoded object is of a class that cannot be found by the JVM

 * @since 2.3.4

 */

public static Object decodeToObject(String encodedObject,int options,final ClassLoader loader) throws java.io.IOException, java.lang.ClassNotFoundException {

  byte[] objBytes=decode(encodedObject,options);

  java.io.ByteArrayInputStream bais=null;

  java.io.ObjectInputStream ois=null;

  Object obj=null;

  try {

    bais=new java.io.ByteArrayInputStream(objBytes);

    if (loader == null) {

      ois=new java.io.ObjectInputStream(bais);

    }

 else {

      ois=new java.io.ObjectInputStream(bais){

        @Override public Class<?> resolveClass(        java.io.ObjectStreamClass streamClass) throws java.io.IOException, ClassNotFoundException {

          Class c=Class.forName(streamClass.getName(),false,loader);

          if (c == null) {

            return super.resolveClass(streamClass);

          }

 else {

            return c;

          }

        }

      }

;

    }

    obj=ois.readObject();

  }

 catch (  java.io.IOException|ClassNotFoundException e) {

    throw e;

  }

 finally {

    try {

      bais.close();

    }

 catch (    Exception e) {

    }

    try {

      ois.close();

    }

 catch (    Exception e) {

    }

  }

  return obj;

}

Location: Base64.java

Content: 

/** 

 * Low-level access to decoding ASCII characters in the form of a byte array. <strong>Ignores GUNZIP option, if it's set.</strong> This is not generally a recommended method, although it is used internally as part of the decoding process. Special case: if len = 0, an empty array is returned. Still, if you need more speed and reduced memory footprint (and aren't gzipping), consider this method.

 * @param source The Base64 encoded data

 * @return decoded data

 * @since 2.3.1

 */

public static byte[] decode(byte[] source) throws java.io.IOException {

  byte[] decoded=null;

  decoded=decode(source,0,source.length,Base64.NO_OPTIONS);

  return decoded;

}

Location: Base64.java

Content: 

/** 

 * Low-level access to decoding ASCII characters in the form of a byte array. <strong>Ignores GUNZIP option, if it's set.</strong> This is not generally a recommended method, although it is used internally as part of the decoding process. Special case: if len = 0, an empty array is returned. Still, if you need more speed and reduced memory footprint (and aren't gzipping), consider this method.

 * @param source The Base64 encoded data

 * @param off    The offset of where to begin decoding

 * @param len    The length of characters to decode

 * @param options Can specify options such as alphabet type to use

 * @return decoded data

 * @throws java.io.IOException If bogus characters exist in source data

 * @since 1.3

 */

public static byte[] decode(byte[] source,int off,int len,int options) throws java.io.IOException {

  if (source == null) {

    throw new NullPointerException("Cannot decode null source array.");

  }

  if (off < 0 || off + len > source.length) {

    throw new IllegalArgumentException(String.format("Source array with length %d cannot have offset of %d and process %d bytes.",source.length,off,len));

  }

  if (len == 0) {

    return new byte[0];

  }

 else   if (len < 4) {

    throw new IllegalArgumentException("Base64-encoded string must have at least four characters, but length specified was " + len);

  }

  byte[] DECODABET=getDecodabet(options);

  int len34=len * 3 / 4;

  byte[] outBuff=new byte[len34];

  int outBuffPosn=0;

  byte[] b4=new byte[4];

  int b4Posn=0;

  int i=0;

  byte sbiDecode=0;

  for (i=off; i < off + len; i++) {

    sbiDecode=DECODABET[source[i] & 0xFF];

    if (sbiDecode >= WHITE_SPACE_ENC) {

      if (sbiDecode >= EQUALS_SIGN_ENC) {

        b4[b4Posn++]=source[i];

        if (b4Posn > 3) {

          outBuffPosn+=decode4to3(b4,0,outBuff,outBuffPosn,options);

          b4Posn=0;

          if (source[i] == EQUALS_SIGN) {

            break;

          }

        }

      }

    }

 else {

      throw new java.io.IOException(String.format("Bad Base64 input character decimal %d in array position %d",((int)source[i]) & 0xFF,i));

    }

  }

  byte[] out=new byte[outBuffPosn];

  System.arraycopy(outBuff,0,out,0,outBuffPosn);

  return out;

}

Location: Base64.java

Content: 

/** 

 * Decodes data from Base64 notation, automatically detecting gzip-compressed data and decompressing it.

 * @param s the string to decode

 * @return the decoded data

 * @throws java.io.IOException If there is a problem

 * @since 1.4

 */

public static byte[] decode(String s) throws java.io.IOException {

  return decode(s,NO_OPTIONS);

}

Location: Base64.java

Content: 

/** 

 * Decodes data from Base64 notation, automatically detecting gzip-compressed data and decompressing it.

 * @param s the string to decode

 * @param options encode options such as URL_SAFE

 * @return the decoded data

 * @throws java.io.IOException if there is an error

 * @throws NullPointerException if <tt>s</tt> is null

 * @since 1.4

 */

public static byte[] decode(String s,int options) throws java.io.IOException {

  if (s == null) {

    throw new NullPointerException("Input string was null.");

  }

  byte[] bytes;

  try {

    bytes=s.getBytes(PREFERRED_ENCODING);

  }

 catch (  java.io.UnsupportedEncodingException uee) {

    bytes=s.getBytes();

  }

  bytes=decode(bytes,0,bytes.length,options);

  boolean dontGunzip=(options & DONT_GUNZIP) != 0;

  if ((bytes != null) && (bytes.length >= 4) && (!dontGunzip)) {

    int head=((int)bytes[0] & 0xff) | ((bytes[1] << 8) & 0xff00);

    if (java.util.zip.GZIPInputStream.GZIP_MAGIC == head) {

      java.io.ByteArrayInputStream bais=null;

      java.util.zip.GZIPInputStream gzis=null;

      java.io.ByteArrayOutputStream baos=null;

      byte[] buffer=new byte[2048];

      int length=0;

      try {

        baos=new java.io.ByteArrayOutputStream();

        bais=new java.io.ByteArrayInputStream(bytes);

        gzis=new java.util.zip.GZIPInputStream(bais);

        while ((length=gzis.read(buffer)) >= 0) {

          baos.write(buffer,0,length);

        }

        bytes=baos.toByteArray();

      }

 catch (      java.io.IOException e) {

        e.printStackTrace();

      }

 finally {

        try {

          baos.close();

        }

 catch (        Exception e) {

        }

        try {

          gzis.close();

        }

 catch (        Exception e) {

        }

        try {

          bais.close();

        }

 catch (        Exception e) {

        }

      }

    }

  }

  return bytes;

}

Location: Base64.java

Content: 

/** 

 * Encodes up to the first three bytes of array <var>threeBytes</var> and returns a four-byte array in Base64 notation. The actual number of significant bytes in your array is given by <var>numSigBytes</var>. The array <var>threeBytes</var> needs only be as big as <var>numSigBytes</var>. Code can reuse a byte array by passing a four-byte array as <var>b4</var>.

 * @param b4 A reusable byte array to reduce array instantiation

 * @param threeBytes the array to convert

 * @param numSigBytes the number of significant bytes in your array

 * @return four byte array in Base64 notation.

 * @since 1.5.1

 */

private static byte[] encode3to4(byte[] b4,byte[] threeBytes,int numSigBytes,int options){

  encode3to4(threeBytes,0,numSigBytes,b4,0,options);

  return b4;

}

Location: Base64.java

Content: 

/** 

 * <p>Encodes up to three bytes of the array <var>source</var> and writes the resulting four Base64 bytes to <var>destination</var>. The source and destination arrays can be manipulated anywhere along their length by specifying  <var>srcOffset</var> and <var>destOffset</var>. This method does not check to make sure your arrays are large enough to accomodate <var>srcOffset</var> + 3 for the <var>source</var> array or <var>destOffset</var> + 4 for the <var>destination</var> array. The actual number of significant bytes in your array is given by <var>numSigBytes</var>.</p> <p>This is the lowest level of the encoding methods with all possible parameters.</p>

 * @param source the array to convert

 * @param srcOffset the index where conversion begins

 * @param numSigBytes the number of significant bytes in your array

 * @param destination the array to hold the conversion

 * @param destOffset the index where output will be put

 * @return the <var>destination</var> array

 * @since 1.3

 */

private static byte[] encode3to4(byte[] source,int srcOffset,int numSigBytes,byte[] destination,int destOffset,int options){

  byte[] ALPHABET=getAlphabet(options);

  int inBuff=(numSigBytes > 0 ? ((source[srcOffset] << 24) >>> 8) : 0) | (numSigBytes > 1 ? ((source[srcOffset + 1] << 24) >>> 16) : 0) | (numSigBytes > 2 ? ((source[srcOffset + 2] << 24) >>> 24) : 0);

switch (numSigBytes) {

case 3:

    destination[destOffset]=ALPHABET[(inBuff >>> 18)];

  destination[destOffset + 1]=ALPHABET[(inBuff >>> 12) & 0x3f];

destination[destOffset + 2]=ALPHABET[(inBuff >>> 6) & 0x3f];

destination[destOffset + 3]=ALPHABET[(inBuff) & 0x3f];

return destination;

case 2:

destination[destOffset]=ALPHABET[(inBuff >>> 18)];

destination[destOffset + 1]=ALPHABET[(inBuff >>> 12) & 0x3f];

destination[destOffset + 2]=ALPHABET[(inBuff >>> 6) & 0x3f];

destination[destOffset + 3]=EQUALS_SIGN;

return destination;

case 1:

destination[destOffset]=ALPHABET[(inBuff >>> 18)];

destination[destOffset + 1]=ALPHABET[(inBuff >>> 12) & 0x3f];

destination[destOffset + 2]=EQUALS_SIGN;

destination[destOffset + 3]=EQUALS_SIGN;

return destination;

default :

return destination;

}

}

Location: Base64.java

Content: 

/** 

 * Similar to  {@link #encodeBytes(byte[])} but returnsa byte array instead of instantiating a String. This is more efficient if you're working with I/O streams and have large data sets to encode.

 * @param source The data to convert

 * @return The Base64-encoded data as a byte[] (of ASCII characters)

 * @throws NullPointerException if source array is null

 * @since 2.3.1

 */

public static byte[] encodeBytesToBytes(byte[] source){

  byte[] encoded=null;

  try {

    encoded=encodeBytesToBytes(source,0,source.length,Base64.NO_OPTIONS);

  }

 catch (  java.io.IOException ex) {

    assert false : "IOExceptions only come from GZipping, which is turned off: " + ex.getMessage();

  }

  return encoded;

}

Location: Base64.java

Content: 

/** 

 * Similar to  {@link #encodeBytes(byte[],int,int,int)} but returnsa byte array instead of instantiating a String. This is more efficient if you're working with I/O streams and have large data sets to encode.

 * @param source The data to convert

 * @param off Offset in array where conversion should begin

 * @param len Length of data to convert

 * @param options Specified options

 * @return The Base64-encoded data as a String

 * @see Base64#GZIP

 * @see Base64#DO_BREAK_LINES

 * @throws java.io.IOException if there is an error

 * @throws NullPointerException if source array is null

 * @throws IllegalArgumentException if source array, offset, or length are invalid

 * @since 2.3.1

 */

public static byte[] encodeBytesToBytes(byte[] source,int off,int len,int options) throws java.io.IOException {

  if (source == null) {

    throw new NullPointerException("Cannot serialize a null array.");

  }

  if (off < 0) {

    throw new IllegalArgumentException("Cannot have negative offset: " + off);

  }

  if (len < 0) {

    throw new IllegalArgumentException("Cannot have length offset: " + len);

  }

  if (off + len > source.length) {

    throw new IllegalArgumentException(String.format("Cannot have offset of %d and length of %d with array of length %d",off,len,source.length));

  }

  if ((options & GZIP) != 0) {

    java.io.ByteArrayOutputStream baos=null;

    java.util.zip.GZIPOutputStream gzos=null;

    Base64.OutputStream b64os=null;

    try {

      baos=new java.io.ByteArrayOutputStream();

      b64os=new Base64.OutputStream(baos,ENCODE | options);

      gzos=new java.util.zip.GZIPOutputStream(b64os);

      gzos.write(source,off,len);

      gzos.close();

    }

 catch (    java.io.IOException e) {

      throw e;

    }

 finally {

      try {

        gzos.close();

      }

 catch (      Exception e) {

      }

      try {

        b64os.close();

      }

 catch (      Exception e) {

      }

      try {

        baos.close();

      }

 catch (      Exception e) {

      }

    }

    return baos.toByteArray();

  }

 else {

    boolean breakLines=(options & DO_BREAK_LINES) != 0;

    int encLen=(len / 3) * 4 + (len % 3 > 0 ? 4 : 0);

    if (breakLines) {

      encLen+=encLen / MAX_LINE_LENGTH;

    }

    byte[] outBuff=new byte[encLen];

    int d=0;

    int e=0;

    int len2=len - 2;

    int lineLength=0;

    for (; d < len2; d+=3, e+=4) {

      encode3to4(source,d + off,3,outBuff,e,options);

      lineLength+=4;

      if (breakLines && lineLength >= MAX_LINE_LENGTH) {

        outBuff[e + 4]=NEW_LINE;

        e++;

        lineLength=0;

      }

    }

    if (d < len) {

      encode3to4(source,d + off,len - d,outBuff,e,options);

      e+=4;

    }

    if (e <= outBuff.length - 1) {

      byte[] finalOut=new byte[e];

      System.arraycopy(outBuff,0,finalOut,0,e);

      return finalOut;

    }

 else {

      return outBuff;

    }

  }

}

Location: Base64.java

Content: 

/** 

 * Encodes a byte array into Base64 notation. Does not GZip-compress data.

 * @param source The data to convert

 * @return The data in Base64-encoded form

 * @throws NullPointerException if source array is null

 * @since 1.4

 */

public static String encodeBytes(byte[] source){

  String encoded=null;

  try {

    encoded=encodeBytes(source,0,source.length,NO_OPTIONS);

  }

 catch (  java.io.IOException ex) {

    assert false : ex.getMessage();

  }

  assert encoded != null;

  return encoded;

}

Location: Base64.java

Content: 

/** 

 * Encodes a byte array into Base64 notation. <p> Example options:<pre> GZIP: gzip-compresses object before encoding it. DO_BREAK_LINES: break lines at 76 characters <i>Note: Technically, this makes your encoding non-compliant.</i> </pre> <p> Example: <code>encodeBytes( myData, Base64.GZIP )</code> or <p> Example: <code>encodeBytes( myData, Base64.GZIP | Base64.DO_BREAK_LINES )</code> <p>As of v 2.3, if there is an error with the GZIP stream, the method will throw an java.io.IOException. <b>This is new to v2.3!</b> In earlier versions, it just returned a null value, but in retrospect that's a pretty poor way to handle it.</p>

 * @param source The data to convert

 * @param options Specified options

 * @return The Base64-encoded data as a String

 * @see Base64#GZIP

 * @see Base64#DO_BREAK_LINES

 * @throws java.io.IOException if there is an error

 * @throws NullPointerException if source array is null

 * @since 2.0

 */

public static String encodeBytes(byte[] source,int options) throws java.io.IOException {

  return encodeBytes(source,0,source.length,options);

}

Location: Base64.java

Content: 

/** 

 * Encodes a byte array into Base64 notation. Does not GZip-compress data. <p>As of v 2.3, if there is an error, the method will throw an java.io.IOException. <b>This is new to v2.3!</b> In earlier versions, it just returned a null value, but in retrospect that's a pretty poor way to handle it.</p>

 * @param source The data to convert

 * @param off Offset in array where conversion should begin

 * @param len Length of data to convert

 * @return The Base64-encoded data as a String

 * @throws NullPointerException if source array is null

 * @throws IllegalArgumentException if source array, offset, or length are invalid

 * @since 1.4

 */

public static String encodeBytes(byte[] source,int off,int len){

  String encoded=null;

  try {

    encoded=encodeBytes(source,off,len,NO_OPTIONS);

  }

 catch (  java.io.IOException ex) {

    assert false : ex.getMessage();

  }

  assert encoded != null;

  return encoded;

}

Location: Base64.java

Content: 

/** 

 * Encodes a byte array into Base64 notation. <p> Example options:<pre> GZIP: gzip-compresses object before encoding it. DO_BREAK_LINES: break lines at 76 characters <i>Note: Technically, this makes your encoding non-compliant.</i> </pre> <p> Example: <code>encodeBytes( myData, Base64.GZIP )</code> or <p> Example: <code>encodeBytes( myData, Base64.GZIP | Base64.DO_BREAK_LINES )</code> <p>As of v 2.3, if there is an error with the GZIP stream, the method will throw an java.io.IOException. <b>This is new to v2.3!</b> In earlier versions, it just returned a null value, but in retrospect that's a pretty poor way to handle it.</p>

 * @param source The data to convert

 * @param off Offset in array where conversion should begin

 * @param len Length of data to convert

 * @param options Specified options

 * @return The Base64-encoded data as a String

 * @see Base64#GZIP

 * @see Base64#DO_BREAK_LINES

 * @throws java.io.IOException if there is an error

 * @throws NullPointerException if source array is null

 * @throws IllegalArgumentException if source array, offset, or length are invalid

 * @since 2.0

 */

public static String encodeBytes(byte[] source,int off,int len,int options) throws java.io.IOException {

  byte[] encoded=encodeBytesToBytes(source,off,len,options);

  try {

    return new String(encoded,PREFERRED_ENCODING);

  }

 catch (  java.io.UnsupportedEncodingException uue) {

    return new String(encoded);

  }

}

Location: Base64.java

Content: 

/** 

 * Reads <tt>infile</tt> and encodes it to <tt>outfile</tt>.

 * @param infile Input file

 * @param outfile Output file

 * @throws java.io.IOException if there is an error

 * @since 2.2

 */

public static void encodeFileToFile(String infile,String outfile) throws java.io.IOException {

  String encoded=Base64.encodeFromFile(infile);

  java.io.OutputStream out=null;

  try {

    out=new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));

    out.write(encoded.getBytes("US-ASCII"));

  }

 catch (  java.io.IOException e) {

    throw e;

  }

 finally {

    try {

      out.close();

    }

 catch (    Exception ex) {

    }

  }

}

Location: Base64.java

Content: 

/** 

 * Convenience method for reading a binary file and base64-encoding it. <p>As of v 2.3, if there is a error, the method will throw an java.io.IOException. <b>This is new to v2.3!</b> In earlier versions, it just returned false, but in retrospect that's a pretty poor way to handle it.</p>

 * @param filename Filename for reading binary data

 * @return base64-encoded string

 * @throws java.io.IOException if there is an error

 * @since 2.1

 */

public static String encodeFromFile(String filename) throws java.io.IOException {

  String encodedData=null;

  Base64.InputStream bis=null;

  try {

    java.io.File file=new java.io.File(filename);

    byte[] buffer=new byte[Math.max((int)(file.length() * 1.4 + 1),40)];

    int length=0;

    int numBytes=0;

    bis=new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(file)),Base64.ENCODE);

    while ((numBytes=bis.read(buffer,length,4096)) >= 0) {

      length+=numBytes;

    }

    encodedData=new String(buffer,0,length,Base64.PREFERRED_ENCODING);

  }

 catch (  java.io.IOException e) {

    throw e;

  }

 finally {

    try {

      bis.close();

    }

 catch (    Exception e) {

    }

  }

  return encodedData;

}

Location: Base64.java

Content: 

/** 

 * Serializes an object and returns the Base64-encoded version of that serialized object.   <p>As of v 2.3, if the object cannot be serialized or there is another error, the method will throw an java.io.IOException. <b>This is new to v2.3!</b> In earlier versions, it just returned a null value, but in retrospect that's a pretty poor way to handle it.</p> The object is not GZip-compressed before being encoded.

 * @param serializableObject The object to encode

 * @return The Base64-encoded object

 * @throws java.io.IOException if there is an error

 * @throws NullPointerException if serializedObject is null

 * @since 1.4

 */

public static String encodeObject(java.io.Serializable serializableObject) throws java.io.IOException {

  return encodeObject(serializableObject,NO_OPTIONS);

}

Location: Base64.java

Content: 

/** 

 * Serializes an object and returns the Base64-encoded version of that serialized object. <p>As of v 2.3, if the object cannot be serialized or there is another error, the method will throw an java.io.IOException. <b>This is new to v2.3!</b> In earlier versions, it just returned a null value, but in retrospect that's a pretty poor way to handle it.</p> The object is not GZip-compressed before being encoded. <p> Example options:<pre> GZIP: gzip-compresses object before encoding it. DO_BREAK_LINES: break lines at 76 characters </pre> <p> Example: <code>encodeObject( myObj, Base64.GZIP )</code> or <p> Example: <code>encodeObject( myObj, Base64.GZIP | Base64.DO_BREAK_LINES )</code>

 * @param serializableObject The object to encode

 * @param options Specified options

 * @return The Base64-encoded object

 * @see Base64#GZIP

 * @see Base64#DO_BREAK_LINES

 * @throws java.io.IOException if there is an error

 * @since 2.0

 */

public static String encodeObject(java.io.Serializable serializableObject,int options) throws java.io.IOException {

  if (serializableObject == null) {

    throw new NullPointerException("Cannot serialize a null object.");

  }

  java.io.ByteArrayOutputStream baos=null;

  java.io.OutputStream b64os=null;

  java.util.zip.GZIPOutputStream gzos=null;

  java.io.ObjectOutputStream oos=null;

  try {

    baos=new java.io.ByteArrayOutputStream();

    b64os=new Base64.OutputStream(baos,ENCODE | options);

    if ((options & GZIP) != 0) {

      gzos=new java.util.zip.GZIPOutputStream(b64os);

      oos=new java.io.ObjectOutputStream(gzos);

    }

 else {

      oos=new java.io.ObjectOutputStream(b64os);

    }

    oos.writeObject(serializableObject);

  }

 catch (  java.io.IOException e) {

    throw e;

  }

 finally {

    try {

      oos.close();

    }

 catch (    Exception e) {

    }

    try {

      gzos.close();

    }

 catch (    Exception e) {

    }

    try {

      b64os.close();

    }

 catch (    Exception e) {

    }

    try {

      baos.close();

    }

 catch (    Exception e) {

    }

  }

  try {

    return new String(baos.toByteArray(),PREFERRED_ENCODING);

  }

 catch (  java.io.UnsupportedEncodingException uue) {

    return new String(baos.toByteArray());

  }

}

Location: Base64.java

Content: 

/** 

 * Convenience method for encoding data to a file. <p>As of v 2.3, if there is a error, the method will throw an java.io.IOException. <b>This is new to v2.3!</b> In earlier versions, it just returned false, but in retrospect that's a pretty poor way to handle it.</p>

 * @param dataToEncode byte array of data to encode in base64 form

 * @param filename Filename for saving encoded data

 * @throws java.io.IOException if there is an error

 * @throws NullPointerException if dataToEncode is null

 * @since 2.1

 */

public static void encodeToFile(byte[] dataToEncode,String filename) throws java.io.IOException {

  if (dataToEncode == null) {

    throw new NullPointerException("Data to encode was null.");

  }

  Base64.OutputStream bos=null;

  try {

    bos=new Base64.OutputStream(new java.io.FileOutputStream(filename),Base64.ENCODE);

    bos.write(dataToEncode);

  }

 catch (  java.io.IOException e) {

    throw e;

  }

 finally {

    try {

      bos.close();

    }

 catch (    Exception e) {

    }

  }

}

Location: Base64.java

Content: 

/** 

 * Performs Base64 encoding on the <code>raw</code> ByteBuffer, writing it to the <code>encoded</code> CharBuffer. This is an experimental feature. Currently it does not pass along any options (such as  {@link #DO_BREAK_LINES}or  {@link #GZIP}.

 * @param raw input buffer

 * @param encoded output buffer

 * @since 2.3

 */

public static void encode(java.nio.ByteBuffer raw,java.nio.CharBuffer encoded){

  byte[] raw3=new byte[3];

  byte[] enc4=new byte[4];

  while (raw.hasRemaining()) {

    int rem=Math.min(3,raw.remaining());

    raw.get(raw3,0,rem);

    Base64.encode3to4(enc4,raw3,rem,Base64.NO_OPTIONS);

    for (int i=0; i < 4; i++) {

      encoded.put((char)(enc4[i] & 0xFF));

    }

  }

}

Location: Base64.java

Content: 

/** 

 * Returns one of the _SOMETHING_ALPHABET byte arrays depending on the options specified. It's possible, though silly, to specify ORDERED <b>and</b> URLSAFE in which case one of them will be picked, though there is no guarantee as to which one will be picked.

 */

private final static byte[] getAlphabet(int options){

  if ((options & URL_SAFE) == URL_SAFE) {

    return _URL_SAFE_ALPHABET;

  }

 else   if ((options & ORDERED) == ORDERED) {

    return _ORDERED_ALPHABET;

  }

 else {

    return _STANDARD_ALPHABET;

  }

}

Location: Base64.java

Content: 

/** 

 * Returns one of the _SOMETHING_DECODABET byte arrays depending on the options specified. It's possible, though silly, to specify ORDERED and URL_SAFE in which case one of them will be picked, though there is no guarantee as to which one will be picked.

 */

private final static byte[] getDecodabet(int options){

  if ((options & URL_SAFE) == URL_SAFE) {

    return _URL_SAFE_DECODABET;

  }

 else   if ((options & ORDERED) == ORDERED) {

    return _ORDERED_DECODABET;

  }

 else {

    return _STANDARD_DECODABET;

  }

}

