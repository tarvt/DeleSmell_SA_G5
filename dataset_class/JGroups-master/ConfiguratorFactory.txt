Location: ConfiguratorFactory.java

Content: 

/** 

 * Checks the availability of the JAXP classes on the classpath.

 * @throws NoClassDefFoundError if the required JAXP classes are not availabile on the classpath.

 */

static void checkJAXPAvailability(){

  try {

    XmlConfigurator.class.getName();

  }

 catch (  NoClassDefFoundError error) {

    Error tmp=new NoClassDefFoundError(JAXP_MISSING_ERROR_MSG);

    tmp.initCause(error);

    throw tmp;

  }

}

Location: ConfiguratorFactory.java

Content: 

protected ConfiguratorFactory(){

}

Location: ConfiguratorFactory.java

Content: 

public static InputStream getConfigStream(File file) throws Exception {

  return new FileInputStream(Objects.requireNonNull(file));

}

Location: ConfiguratorFactory.java

Content: 

public static InputStream getConfigStream(Object properties) throws IOException {

  InputStream input=null;

  if (properties == null)   properties=Global.DEFAULT_PROTOCOL_STACK;

  if (properties instanceof URL) {

    try {

      input=((URL)properties).openStream();

    }

 catch (    Throwable t) {

    }

  }

  if (input == null && properties instanceof String)   input=getConfigStream((String)properties);

  if (input == null && properties instanceof File) {

    try {

      input=new FileInputStream((File)properties);

    }

 catch (    Throwable t) {

    }

  }

  if (input != null)   return input;

  if (properties instanceof Element) {

    return getConfigStream(properties);

  }

  return new ByteArrayInputStream(((String)properties).getBytes());

}

Location: ConfiguratorFactory.java

Content: 

/** 

 * Returns a JGroups XML configuration InputStream based on the provided properties string.

 * @param properties a string representing a system resource containing a JGroups XML configuration, a stringrepresenting a URL pointing to a JGroups ML configuration, or a string representing a file name that contains a JGroups XML configuration.

 * @throws IOException  if the provided properties string appears to be a valid URL but is unreachable.

 */

public static InputStream getConfigStream(String properties) throws IOException {

  InputStream configStream=null;

  try {

    configStream=new FileInputStream(properties);

  }

 catch (  FileNotFoundException|AccessControlException fnfe) {

  }

  if (configStream == null) {

    try {

      configStream=new URL(properties).openStream();

    }

 catch (    MalformedURLException mre) {

    }

  }

  if (configStream == null && properties.endsWith("xml"))   configStream=Util.getResourceAsStream(properties,ConfiguratorFactory.class);

  return configStream;

}

Location: ConfiguratorFactory.java

Content: 

/** 

 * Returns a protocol stack configurator based on the XML configuration provided by the specified File.

 * @param file a File with a JGroups XML configuration.

 * @return a {@code ProtocolStackConfigurator} containing the stack configuration.

 * @throws Exception if problems occur during the configuration of the protocol stack.

 */

public static ProtocolStackConfigurator getStackConfigurator(File file) throws Exception {

  checkJAXPAvailability();

  InputStream input=getConfigStream(file);

  return XmlConfigurator.getInstance(input);

}

Location: ConfiguratorFactory.java

Content: 

public static ProtocolStackConfigurator getStackConfigurator(InputStream input) throws Exception {

  return XmlConfigurator.getInstance(input);

}

Location: ConfiguratorFactory.java

Content: 

/** 

 * Returns a protocol stack configurator based on the provided properties string.

 * @param properties a string representing a system resource containing a JGroups XML configuration, a URL pointingto a JGroups XML configuration or a string representing a file name that contains a JGroups XML configuration.

 */

public static ProtocolStackConfigurator getStackConfigurator(String properties) throws Exception {

  if (properties == null)   properties=Global.DEFAULT_PROTOCOL_STACK;

  XmlConfigurator configurator=getXmlConfigurator(Objects.requireNonNull(properties));

  if (configurator != null)   return configurator;

  throw new IllegalStateException(String.format("configuration %s not found or invalid",properties));

}

Location: ConfiguratorFactory.java

Content: 

/** 

 * Returns an XmlConfigurator based on the provided properties string (if possible).

 * @param properties a string representing a system resource containing a JGroups XML configuration, a stringrepresenting a URL pointing to a JGroups ML configuration, or a string representing a file name that contains a JGroups XML configuration.

 * @return an XmlConfigurator instance based on the provided properties string; {@code null} if the providedproperties string does not point to an XML configuration.

 * @throws IOException  if the provided properties string appears to be a valid URL but is unreachable, or if theJGroups XML configuration pointed to by the URL can not be parsed.

 */

static XmlConfigurator getXmlConfigurator(String properties) throws IOException {

  XmlConfigurator returnValue=null;

  InputStream configStream=getConfigStream(properties);

  if (configStream == null && properties.endsWith("xml"))   throw new FileNotFoundException(String.format(Util.getMessage("FileNotFound"),properties));

  if (configStream != null) {

    checkJAXPAvailability();

    returnValue=XmlConfigurator.getInstance(configStream);

  }

  return returnValue;

}

