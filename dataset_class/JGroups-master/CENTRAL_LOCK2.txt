Location: CENTRAL_LOCK2.java

Content: 

public CENTRAL_LOCK2(){

  req_handler=new Runner(new DefaultThreadFactory("lock-handler",true,true),"lock-handler",this::processQueue,req_queue::clear);

}

Location: CENTRAL_LOCK2.java

Content: 

protected LockInfoResponse createLockInfoResponse(){

  LockInfoResponse rsp=new LockInfoResponse();

  List<Tuple<String,Owner>> locks=client_lock_table.getLockInfo();

  for (  Tuple<String,Owner> t : locks)   rsp.add(t);

  List<Request> pending_reqs=client_lock_table.getPendingRequests(local_addr);

  if (pending_reqs != null && !pending_reqs.isEmpty())   rsp.pending_requests=pending_reqs;

  return rsp;

}

Location: CENTRAL_LOCK2.java

Content: 

protected void handleLockInfoRequest(Address requester){

  if (requester != null && !Objects.equals(coord,requester)) {

    log.trace("%s: changed coord from %s to %s as a result of getting a LOCK_INFO_REQ",local_addr,coord,requester);

    coord=requester;

  }

  LockInfoResponse response=createLockInfoResponse();

  if (log.isTraceEnabled())   log.trace("%s --> %s LOCK-INFO-RSP:\n%s",local_addr,requester,response.printDetails());

  send(requester,new Request(Type.LOCK_INFO_RSP).infoRsp(response));

}

Location: CENTRAL_LOCK2.java

Content: 

@Override protected void handleLockInfoResponse(Address sender,Request rsp){

  lock_info_responses.add(sender,rsp.info_rsp);

}

Location: CENTRAL_LOCK2.java

Content: 

@Override protected void handleLockRevoked(Request rsp){

  notifyLockRevoked(rsp.lock_name,rsp.owner);

}

Location: CENTRAL_LOCK2.java

Content: 

@ManagedAttribute public boolean isRequestHandlerRunning(){

  return req_handler.isRunning();

}

Location: CENTRAL_LOCK2.java

Content: 

protected void processQueue(){

  Request req=null;

  try {

    req=req_queue.take();

  }

 catch (  InterruptedException e) {

  }

  try {

    if (req != null && log.isTraceEnabled())     log.trace("%s <-- %s: %s",local_addr,req.sender,req);

    handleRequest(req);

  }

 catch (  Throwable t) {

    log.error("%s: failed handling request %s: %s",local_addr,req,t);

  }

}

Location: CENTRAL_LOCK2.java

Content: 

@ManagedAttribute public int requestQueueSize(){

  return req_queue.size();

}

Location: CENTRAL_LOCK2.java

Content: 

@Override protected void requestReceived(Request req){

  if (req == null)   return;

switch (req.type) {

case GRANT_LOCK:

case RELEASE_LOCK:

case CREATE_LOCK:

case DELETE_LOCK:

case COND_SIG:

case COND_SIG_ALL:

case LOCK_AWAIT:

case DELETE_LOCK_AWAIT:

case CREATE_AWAITER:

case DELETE_AWAITER:

    req_queue.add(req);

  break;

case LOCK_GRANTED:

case RELEASE_LOCK_OK:

case LOCK_DENIED:

case SIG_RET:

case LOCK_INFO_REQ:

case LOCK_INFO_RSP:

case LOCK_REVOKED:

if (log.isTraceEnabled()) log.trace("%s <-- %s: %s",local_addr,req.sender,req);

handleRequest(req);

break;

default :

log.error("%s: request of type %s not known",local_addr,req.type);

break;

}

}

Location: CENTRAL_LOCK2.java

Content: 

/** 

 * Grabs information about locks held and pending lock/unlock requests from all members 

 */

@ManagedOperation(description="Runs the reconciliation protocol to fetch information about owned locks and pending " + "lock/unlock requests from each member to establish the server lock table. Only run by a coordinator.") public void runReconciliation(){

  if (!isCoord()) {

    log.warn("%s: reconciliation protocol is not run as I'm not the coordinator (%s is)",local_addr,getCoordinator());

    return;

  }

  Request lock_info_req=new Request(Type.LOCK_INFO_REQ);

  Address[] mbrs=view.getMembersRaw();

  log.debug("%s: running reconciliation protocol on %d members",local_addr,mbrs != null ? mbrs.length : 0);

  lock_info_responses.reset(mbrs);

  lock_info_responses.add(local_addr,createLockInfoResponse());

  log.trace("%s --> ALL: %s",local_addr,lock_info_req);

  sendLockInfoRequestTo(Util.streamableToBuffer(lock_info_req),mbrs,local_addr);

  if (!lock_info_responses.waitForAllResponses(lock_reconciliation_timeout)) {

    List<Address> missing=lock_info_responses.getMissing();

    log.warn("%s: failed getting lock information from all members, missing responses: %d (from %s)",local_addr,missing.size(),missing);

  }

  Collection<LockInfoResponse> responses=lock_info_responses.getResults().values();

  responses.stream().filter(rsp -> rsp != null && rsp.existing_locks != null).map(rsp -> rsp.existing_locks).flatMap(Collection::stream).forEach(t -> {

    String lock_name=t.getVal1();

    Owner owner=t.getVal2();

    ServerLock srv_lock=new ServerLock(lock_name,owner);

    ServerLock ret=server_locks.putIfAbsent(lock_name,srv_lock);

    if (ret != null) {

      if (!Objects.equals(owner,ret.owner)) {

        log.warn("%s: lock %s requested by %s is already present: %s",local_addr,lock_name,owner,ret);

        send(owner.getAddress(),new Request(Type.LOCK_REVOKED,lock_name,ret.owner,0));

      }

    }

 else {

      notifyLockCreated(lock_name);

      log.trace("%s: added lock %s",local_addr,lock_name);

    }

  }

);

  responses.stream().filter(rsp -> rsp != null && rsp.pending_requests != null && !rsp.pending_requests.isEmpty()).map(rsp -> rsp.pending_requests).flatMap(Collection::stream).forEach(req -> {

    try {

      if (log.isTraceEnabled())       log.trace("%s: processing request %s",local_addr,req);

      handleRequest(req);

    }

 catch (    Throwable t) {

      log.error("%s: failed handling request %s: %s",local_addr,req,t);

    }

  }

);

}

Location: CENTRAL_LOCK2.java

Content: 

@Override protected void sendAwaitConditionRequest(String lock_name,Owner owner){

  sendRequest(coord,Type.LOCK_AWAIT,lock_name,owner,0,false);

}

Location: CENTRAL_LOCK2.java

Content: 

@Override protected void sendDeleteAwaitConditionRequest(String lock_name,Owner owner){

  sendRequest(coord,Type.DELETE_LOCK_AWAIT,lock_name,owner,0,false);

}

Location: CENTRAL_LOCK2.java

Content: 

protected void sendGrantLockRequest(String lock_name,int lock_id,Owner owner,long timeout,boolean is_trylock){

  Address dest=coord;

  if (dest == null)   throw new IllegalStateException("No coordinator available, cannot send GRANT-LOCK request");

  sendRequest(dest,Type.GRANT_LOCK,lock_name,lock_id,owner,timeout,is_trylock);

}

Location: CENTRAL_LOCK2.java

Content: 

protected void sendLockInfoRequestTo(Buffer buf,Address[] mbrs,Address exclude){

  Stream.of(mbrs).filter(m -> m != null && !Objects.equals(m,exclude)).forEach(dest -> {

    Message msg=new Message(dest,buf).putHeader(id,new LockingHeader());

    if (bypass_bundling)     msg.setFlag(Message.Flag.DONT_BUNDLE);

    try {

      down_prot.down(msg);

    }

 catch (    Throwable t) {

      log.error("%s: failed sending LOCK_INFO_REQ to %s: %s",local_addr,dest,t);

    }

  }

);

}

Location: CENTRAL_LOCK2.java

Content: 

protected void sendReleaseLockRequest(String lock_name,int lock_id,Owner owner){

  Address dest=coord;

  if (dest == null)   throw new IllegalStateException("No coordinator available, cannot send RELEASE-LOCK request");

  sendRequest(dest,Type.RELEASE_LOCK,lock_name,lock_id,owner,0,false);

}

Location: CENTRAL_LOCK2.java

Content: 

@Override protected void sendSignalConditionRequest(String lock_name,boolean all){

  sendRequest(coord,all ? Type.COND_SIG_ALL : Type.COND_SIG,lock_name,null,0,false);

}

