Location: UUID.java

Content: 

/** 

 * Compares this UUID with the specified UUID. <p> The first of two UUIDs is greater than the second if the most significant field in which the UUIDs differ is greater for the first UUID.

 * @param other {@code UUID} to which this {@code UUID} is to be compared

 * @return  -1, 0 or 1 as this {@code UUID} is less than, equal to, or greater than {@code val}

 */

public int compareTo(Address other){

  UUID val=(UUID)other;

  if (this == val)   return 0;

  return (this.mostSigBits < val.mostSigBits ? -1 : (this.mostSigBits > val.mostSigBits ? 1 : (this.leastSigBits < val.leastSigBits ? -1 : (this.leastSigBits > val.leastSigBits ? 1 : 0))));

}

Location: UUID.java

Content: 

public Supplier<? extends UUID> create(){

  return UUID::new;

}

Location: UUID.java

Content: 

/** 

 * Returns val represented by the specified number of hex digits. 

 */

protected static String digits(long val,int digits){

  long hi=1L << (digits * 4);

  return Long.toHexString(hi | (val & (hi - 1))).substring(1);

}

Location: UUID.java

Content: 

/** 

 * Creates a  {@code UUID} from the string standard representation asdescribed in the  {@link #toString} method.

 * @param name A string that specifies a  {@code UUID}

 * @return  A {@code UUID} with the specified value

 * @throws IllegalArgumentException If name does not conform to the string representation as described in  {@link #toString}

 */

public static UUID fromString(String name){

  String[] components=name.split("-");

  if (components.length != 5)   throw new IllegalArgumentException("Invalid UUID string: " + name);

  for (int i=0; i < 5; i++)   components[i]="0x" + components[i];

  long mostSigBits=Long.decode(components[0]);

  mostSigBits<<=16;

  mostSigBits|=Long.decode(components[1]);

  mostSigBits<<=16;

  mostSigBits|=Long.decode(components[2]);

  long leastSigBits=Long.decode(components[3]);

  leastSigBits<<=48;

  leastSigBits|=Long.decode(components[4]);

  return new UUID(mostSigBits,leastSigBits);

}

Location: UUID.java

Content: 

public static byte[] generateRandomBytes(){

  return generateRandomBytes(16);

}

Location: UUID.java

Content: 

public static byte[] generateRandomBytes(int size){

  SecureRandom ng=numberGenerator;

  if (ng == null)   numberGenerator=ng=new SecureRandom();

  byte[] randomBytes=new byte[size];

  ng.nextBytes(randomBytes);

  return randomBytes;

}

Location: UUID.java

Content: 

public long getLeastSignificantBits(){

  return leastSigBits;

}

Location: UUID.java

Content: 

/** 

 * Returns the most significant 64 bits of this UUID's 128 bit value.

 * @return  The most significant 64 bits of this UUID's 128 bit value

 */

public long getMostSignificantBits(){

  return mostSigBits;

}

Location: UUID.java

Content: 

/** 

 * Static factory to retrieve a type 4 (pseudo randomly generated) UUID. The  {@code UUID} is generated using a cryptographically strong pseudo random number generator.

 * @return  A randomly generated {@code UUID}

 */

public static UUID randomUUID(){

  return new UUID(generateRandomBytes(16));

}

Location: UUID.java

Content: 

/** 

 * Returns a  {@code String} object representing this {@code UUID}. <p> The UUID string representation is as described by this BNF: <blockquote><pre> {@code UUID                   = <time_low> "-" <time_mid> "-" <time_high_and_version> "-" <variant_and_sequence> "-" <node> time_low               = 4*<hexOctet> time_mid               = 2*<hexOctet> time_high_and_version  = 2*<hexOctet> variant_and_sequence   = 2*<hexOctet> node                   = 6*<hexOctet> hexOctet               = <hexDigit><hexDigit> hexDigit               = "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "a" | "b" | "c" | "d" | "e" | "f" | "A" | "B" | "C" | "D" | "E" | "F"}</pre></blockquote>

 * @return  A string representation of this {@code UUID}

 */

public String toStringLong(){

  return (digits(mostSigBits >> 32,8) + "-" + digits(mostSigBits >> 16,4)+ "-"+ digits(mostSigBits,4)+ "-"+ digits(leastSigBits >> 48,4)+ "-"+ digits(leastSigBits,12));

}

Location: UUID.java

Content: 

public UUID(){

}

Location: UUID.java

Content: 

/** 

 * Private constructor which uses a byte array to construct the new UUID 

 */

protected UUID(byte[] data){

  long msb=0;

  long lsb=0;

  if (data.length != 16)   throw new RuntimeException("UUID needs a 16-byte array");

  for (int i=0; i < 8; i++)   msb=(msb << 8) | (data[i] & 0xff);

  for (int i=8; i < 16; i++)   lsb=(lsb << 8) | (data[i] & 0xff);

  this.mostSigBits=msb;

  this.leastSigBits=lsb;

}

Location: UUID.java

Content: 

public UUID(long mostSigBits,long leastSigBits){

  this.mostSigBits=mostSigBits;

  this.leastSigBits=leastSigBits;

}

