Location: ExtendedUUID.java

Content: 

public ExtendedUUID(){

  super();

}

Location: ExtendedUUID.java

Content: 

protected ExtendedUUID(byte[] data){

  super(data);

}

Location: ExtendedUUID.java

Content: 

public ExtendedUUID(long mostSigBits,long leastSigBits){

  super(mostSigBits,leastSigBits);

}

Location: ExtendedUUID.java

Content: 

public <T extends FlagsUUID>ExtendedUUID(T o){

  super(o);

  if (o instanceof ExtendedUUID) {

    ExtendedUUID other=(ExtendedUUID)o;

    if (other.keys != null) {

      keys=Arrays.copyOf(other.keys,other.keys.length);

      values=Arrays.copyOf(other.values,other.values.length);

    }

  }

}

Location: ExtendedUUID.java

Content: 

public byte[] get(byte[] key){

  if (keys == null || key == null)   return null;

  for (int i=0; i < keys.length; i++) {

    byte[] k=keys[i];

    if (k != null && Arrays.equals(k,key))     return values[i];

  }

  return null;

}

Location: ExtendedUUID.java

Content: 

public byte[] get(String key){

  return get(Util.stringToBytes(key));

}

Location: ExtendedUUID.java

Content: 

public boolean keyExists(byte[] key){

  if (keys == null || key == null)   return false;

  for (int i=0; i < keys.length; i++) {

    byte[] k=keys[i];

    if (k != null && Arrays.equals(k,key))     return true;

  }

  return false;

}

Location: ExtendedUUID.java

Content: 

public boolean keyExists(String key){

  return keyExists(Util.stringToBytes(key));

}

Location: ExtendedUUID.java

Content: 

public ExtendedUUID put(byte[] key,byte[] val){

  return put(0,key,val);

}

Location: ExtendedUUID.java

Content: 

protected ExtendedUUID put(int start_index,byte[] key,byte[] val){

  if (val != null && val.length > 0xff)   throw new IllegalArgumentException("value has to be <= " + 0xff + " bytes");

  if (keys == null)   resize(3);

  for (int i=start_index; i < keys.length; i++) {

    byte[] k=keys[i];

    if (k == null || Arrays.equals(key,k)) {

      keys[i]=key;

      values[i]=val;

      return this;

    }

  }

  int index=keys.length;

  resize(keys.length + 3);

  return put(index,key,val);

}

Location: ExtendedUUID.java

Content: 

public ExtendedUUID put(String key,byte[] val){

  return put(Util.stringToBytes(key),val);

}

Location: ExtendedUUID.java

Content: 

protected void read(DataInput in) throws IOException {

  int length=in.readUnsignedByte();

  if (length == 0)   return;

  resize(length);

  for (int i=0; i < length; i++) {

    int len=in.readUnsignedByte();

    keys[i]=new byte[len];

    in.readFully(keys[i]);

    len=in.readUnsignedByte();

    if (len > 0) {

      values[i]=new byte[len];

      in.readFully(values[i]);

    }

  }

}

Location: ExtendedUUID.java

Content: 

public byte[] remove(byte[] key){

  if (keys == null || key == null)   return null;

  for (int i=0; i < keys.length; i++) {

    byte[] k=keys[i];

    if (k != null && Arrays.equals(k,key)) {

      byte[] old_val=values[i];

      keys[i]=values[i]=null;

      return old_val;

    }

  }

  return null;

}

Location: ExtendedUUID.java

Content: 

public byte[] remove(String key){

  return remove(Util.stringToBytes(key));

}

Location: ExtendedUUID.java

Content: 

protected int sizeofHashMap(){

  if (keys == null)   return 0;

  int retval=0;

  for (int i=0; i < keys.length; i++) {

    byte[] key=keys[i];

    if (key == null)     continue;

    retval+=key.length + Global.BYTE_SIZE;

    byte[] val=values[i];

    retval+=Global.BYTE_SIZE + (val != null ? val.length : 0);

  }

  return retval;

}

Location: ExtendedUUID.java

Content: 

protected void write(DataOutput out) throws IOException {

  int length=length();

  out.writeByte(length);

  if (keys == null)   return;

  for (int i=0; i < keys.length; i++) {

    byte[] k=keys[i];

    if (k != null) {

      out.writeByte(k.length);

      out.write(k);

      byte[] v=values[i];

      out.writeByte(v != null ? v.length : 0);

      if (v != null)       out.write(v);

    }

  }

}

