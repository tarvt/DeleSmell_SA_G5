Location: DNS_PING.java

Content: 

@ManagedOperation(description="Executes the DNS query and returns the result in string format") public String fetchFromDns(){

  long start=System.currentTimeMillis();

  List<Address> dns_discovery_members=dns_resolver.resolveIps(dns_query,DNSResolver.DNSRecordType.valueOf(dns_record_type));

  String ret=dns_discovery_members != null ? dns_discovery_members.toString() : null;

  long time=System.currentTimeMillis() - start;

  return String.format("%s\n(took %d ms)\n",ret,time);

}

Location: DNS_PING.java

Content: 

@Override public void findMembers(List<Address> members,boolean initial_discovery,Responses responses){

  PingData data=null;

  PhysicalAddress physical_addr=null;

  Set<PhysicalAddress> cluster_members=new LinkedHashSet<>();

  DNSResolver.DNSRecordType record_type=DNSResolver.DNSRecordType.valueOf(dns_record_type);

  if (!use_ip_addrs || !initial_discovery) {

    physical_addr=(PhysicalAddress)down(new Event(Event.GET_PHYSICAL_ADDRESS,local_addr));

    data=new PingData(local_addr,false,NameCache.get(local_addr),physical_addr);

    if (members != null && members.size() <= max_members_in_discovery_request)     data.mbrs(members);

  }

  long start=System.currentTimeMillis();

  List<Address> dns_discovery_members=dns_resolver.resolveIps(dns_query,record_type);

  long time=System.currentTimeMillis() - start;

  if (log.isDebugEnabled()) {

    if (dns_discovery_members != null && !dns_discovery_members.isEmpty())     log.debug("%s: entries collected from DNS (in %d ms): %s",local_addr,time,dns_discovery_members);

 else     log.debug("%s: no entries collected from DNS (in %d ms)",local_addr,time);

  }

  boolean ports_found=false;

  if (dns_discovery_members != null) {

    for (    Address address : dns_discovery_members) {

      if (address.equals(physical_addr))       continue;

      if (address instanceof IpAddress) {

        IpAddress ip=((IpAddress)address);

        if (record_type == DNSResolver.DNSRecordType.SRV && ip.getPort() > 0) {

          ports_found=true;

          cluster_members.add(ip);

          if (!probe_transport_ports)           continue;

        }

        for (int i=0; i <= portRange; i++)         cluster_members.add(new IpAddress(ip.getIpAddress(),transportPort + i));

      }

    }

  }

  if (dns_discovery_members != null && !dns_discovery_members.isEmpty() && log.isDebugEnabled()) {

    if (ports_found)     log.debug("%s: sending discovery requests to %s",local_addr,cluster_members);

 else     log.debug("%s: sending discovery requests to hosts %s on ports [%d .. %d]",local_addr,dns_discovery_members,transportPort,transportPort + portRange);

  }

  PingHeader hdr=new PingHeader(PingHeader.GET_MBRS_REQ).clusterName(cluster_name).initialDiscovery(initial_discovery);

  for (  Address addr : cluster_members) {

    Message msg=new Message(addr).setFlag(Message.Flag.INTERNAL,Message.Flag.DONT_BUNDLE,Message.Flag.OOB).putHeader(this.id,hdr);

    if (data != null)     msg.setBuffer(marshal(data));

    if (async_discovery_use_separate_thread_per_request)     timer.execute(() -> sendDiscoveryRequest(msg),sends_can_block);

 else     sendDiscoveryRequest(msg);

  }

}

Location: DNS_PING.java

Content: 

@Override public boolean isDynamic(){

  return true;

}

Location: DNS_PING.java

Content: 

protected void sendDiscoveryRequest(Message req){

  try {

    log.trace("%s: sending discovery request to %s",local_addr,req.getDest());

    down_prot.down(req);

  }

 catch (  Throwable t) {

    log.error("sending discovery request to %s failed: %s",req.dest(),t);

  }

}

Location: DNS_PING.java

Content: 

protected void validateProperties(){

  if (dns_query == null || dns_query.trim().isEmpty()) {

    throw new IllegalArgumentException("dns_query can not be null or empty");

  }

}

