Location: Item.java

Content: 

public boolean containsProperty(String key){

  return properties.containsKey(key);

}

Location: Item.java

Content: 

public void display(){

  QueueProvider.offer("Name: " + name + "\nDescription: "+ description+ "\nLevel: "+ level);

  for (  Map.Entry<String,Integer> entry : properties.entrySet()) {

    QueueProvider.offer(entry.getKey() + ": " + entry.getValue());

  }

}

Location: Item.java

Content: 

public String getId(){

  return id;

}

Location: Item.java

Content: 

public int getLevel(){

  return level;

}

Location: Item.java

Content: 

public String getName(){

  return name;

}

Location: Item.java

Content: 

public EquipmentLocation getPosition(){

  return position;

}

Location: Item.java

Content: 

public Map<String,Integer> getProperties(){

  return Collections.unmodifiableMap(properties);

}

Location: Item.java

Content: 

public int getProperty(String property){

  if (!properties.containsKey(property)) {

    return 0;

  }

  return properties.get(property);

}

Location: Item.java

Content: 

public String getType(){

  return type;

}

Location: Item.java

Content: 

public Integer getWeight(){

  if (properties.containsKey("weight")) {

    return properties.get("weight");

  }

  return Integer.valueOf(0);

}

Location: Item.java

Content: 

public Item(String id,String type,String name,String description,EquipmentLocation position,int level,Map<String,Integer> properties){

  this.id=id;

  this.type=type;

  this.name=name;

  this.description=description;

  this.position=position;

  this.level=level;

  if (properties != null) {

    this.properties=properties;

  }

 else {

    this.properties=new TreeMap<>();

  }

}

Location: Item.java

Content: 

public Item(String id,String type,String name,String description,int level,Map<String,Integer> properties){

  this(id,type,name,description,null,level,properties);

}

