Location: Entity.java

Content: 

public void addItemToStorage(Item item){

  storage.addItem(new ItemStack(1,item));

}

Location: Entity.java

Content: 

public Entity(){

  this(100,100,"default",0,null,new HashMap<EquipmentLocation,Item>());

}

Location: Entity.java

Content: 

public Entity(int healthMax,int health,String name,int gold,Storage storage,Map<EquipmentLocation,Item> equipment){

  this.healthMax=healthMax;

  this.health=health;

  this.name=name;

  this.gold=gold;

  if (storage != null) {

    this.storage=storage;

  }

 else {

    this.storage=new Storage(300);

  }

  this.equipment=equipment;

}

Location: Entity.java

Content: 

public Map<String,String> equipItem(EquipmentLocation place,Item item){

  double oldDamage=this.damage;

  int oldArmour=this.armour;

  if (place == null) {

    place=item.getPosition();

  }

  if (equipment.get(place) != null) {

    unequipItem(equipment.get(place));

  }

  if (place == EquipmentLocation.BOTH_HANDS) {

    unequipTwoPlaces(EquipmentLocation.LEFT_HAND,EquipmentLocation.RIGHT_HAND);

  }

 else   if (place == EquipmentLocation.BOTH_ARMS) {

    unequipTwoPlaces(EquipmentLocation.LEFT_ARM,EquipmentLocation.RIGHT_ARM);

  }

  Item bothHands=equipment.get(EquipmentLocation.BOTH_HANDS);

  if (bothHands != null && (EquipmentLocation.LEFT_HAND == place || EquipmentLocation.RIGHT_HAND == place)) {

    unequipItem(bothHands);

  }

  Item bothArms=equipment.get(EquipmentLocation.BOTH_ARMS);

  if (bothArms != null && (place == EquipmentLocation.LEFT_ARM || place == EquipmentLocation.RIGHT_ARM)) {

    unequipItem(bothArms);

  }

  equipment.put(place,item);

  removeItemFromStorage(item);

  Map<String,String> result=new HashMap<String,String>();

switch (item.getId().charAt(0)) {

case 'w':

{

      this.weapon=item.getId();

      this.damage+=item.getProperty("damage");

      double diffDamage=this.damage - oldDamage;

      result.put("damage",String.valueOf(diffDamage));

      break;

    }

case 'a':

{

    this.armour+=item.getProperty("armour");

    int diffArmour=this.armour - oldArmour;

    result.put("armour",String.valueOf(diffArmour));

    break;

  }

case 'p':

{

  if (item.containsProperty("healthMax")) {

    int healthOld=this.getHealth();

    this.healthMax+=item.getProperty("healthMax");

    this.health+=item.getProperty("health");

    this.health=(this.health > this.healthMax) ? this.healthMax : this.health;

    int healthNew=this.health;

    unequipItem(item);

    removeItemFromStorage(item);

    if (healthNew != healthOld) {

      result.put("health",String.valueOf(health - healthOld));

    }

 else {

      result.put("health",String.valueOf(item.getProperty("healthMax")));

    }

  }

  break;

}

case 'f':

{

int healthOld=this.getHealth();

this.health+=item.getProperty("health");

this.health=(this.health > this.healthMax) ? this.healthMax : this.health;

unequipItem(item);

removeItemFromStorage(item);

result.put("health",String.valueOf(health - healthOld));

break;

}

}

return result;

}

Location: Entity.java

Content: 

public int getArmour(){

  return armour;

}

Location: Entity.java

Content: 

public double getCritChance(){

  return critChance;

}

Location: Entity.java

Content: 

public double getDamage(){

  return damage;

}

Location: Entity.java

Content: 

public int getDexterity(){

  return dexterity;

}

Location: Entity.java

Content: 

public Map<EquipmentLocation,Item> getEquipment(){

  return Collections.unmodifiableMap(equipment);

}

Location: Entity.java

Content: 

public int getGold(){

  return gold;

}

Location: Entity.java

Content: 

public int getHealth(){

  return this.health;

}

Location: Entity.java

Content: 

public int getHealthMax(){

  return healthMax;

}

Location: Entity.java

Content: 

public int getIntelligence(){

  return intelligence;

}

Location: Entity.java

Content: 

public String getIntro(){

  return this.intro;

}

Location: Entity.java

Content: 

public int getLuck(){

  return luck;

}

Location: Entity.java

Content: 

public int getStealth(){

  return stealth;

}

Location: Entity.java

Content: 

public int getStrength(){

  return strength;

}

Location: Entity.java

Content: 

public String getWeapon(){

  return weapon;

}

Location: Entity.java

Content: 

public void printEquipment(){

  QueueProvider.offer("\n------------------------------------------------------------");

  QueueProvider.offer("Equipped Items:");

  if (equipment.keySet().size() == 0) {

    QueueProvider.offer("--Empty--");

  }

 else {

    int i=0;

    Item hands=itemRepo.getItem("hands");

    Map<EquipmentLocation,String> locations=new HashMap<>();

    locations.put(EquipmentLocation.HEAD,"Head");

    locations.put(EquipmentLocation.CHEST,"Chest");

    locations.put(EquipmentLocation.LEFT_ARM,"Left arm");

    locations.put(EquipmentLocation.LEFT_HAND,"Left hand");

    locations.put(EquipmentLocation.RIGHT_ARM,"Right arm");

    locations.put(EquipmentLocation.RIGHT_HAND,"Right hand");

    locations.put(EquipmentLocation.BOTH_HANDS,"Both hands");

    locations.put(EquipmentLocation.BOTH_ARMS,"Both arms");

    locations.put(EquipmentLocation.LEGS,"Legs");

    locations.put(EquipmentLocation.FEET,"Feet");

    for (    Map.Entry<EquipmentLocation,Item> item : equipment.entrySet()) {

      if (item.getKey() != null && !hands.equals(item.getValue()) && item.getValue() != null) {

        QueueProvider.offer(locations.get(item.getKey()) + " - " + item.getValue().getName());

      }

 else {

        i++;

      }

    }

    if (i == equipment.keySet().size()) {

      QueueProvider.offer("--Empty--");

    }

  }

  QueueProvider.offer("------------------------------------------------------------");

}

Location: Entity.java

Content: 

public void printStorage(){

  storage.display();

}

Location: Entity.java

Content: 

public void removeItemFromStorage(Item item){

  storage.removeItem(new ItemStack(1,item));

}

Location: Entity.java

Content: 

public void setArmour(int armour){

  this.armour=armour;

}

Location: Entity.java

Content: 

public void setCritChance(double critChance){

  this.critChance=critChance;

}

Location: Entity.java

Content: 

public void setDamage(double damage){

  this.damage=damage;

}

Location: Entity.java

Content: 

public void setDexterity(int dexterity){

  this.dexterity=dexterity;

}

Location: Entity.java

Content: 

public void setEquipment(Map<EquipmentLocation,Item> equipment){

  this.equipment=equipment;

}

Location: Entity.java

Content: 

public void setGold(int gold){

  this.gold=gold;

}

Location: Entity.java

Content: 

public void setHealthMax(int healthMax){

  this.healthMax=healthMax;

  if (health > healthMax) {

    health=healthMax;

  }

}

Location: Entity.java

Content: 

public void setHealth(int health){

  if (health > healthMax) {

    health=healthMax;

  }

  this.health=health;

}

Location: Entity.java

Content: 

public void setIntelligence(int intelligence){

  this.intelligence=intelligence;

}

Location: Entity.java

Content: 

public void setIntro(String intro){

  this.intro=intro;

}

Location: Entity.java

Content: 

public void setLevel(int level){

  this.level=level;

}

Location: Entity.java

Content: 

public void setLuck(int luck){

  this.luck=luck;

}

Location: Entity.java

Content: 

public void setName(String name){

  this.name=name;

}

Location: Entity.java

Content: 

public void setStealth(int stealth){

  this.stealth=stealth;

}

Location: Entity.java

Content: 

public void setStorage(Storage storage){

  this.storage=storage;

}

Location: Entity.java

Content: 

public void setStrength(int strength){

  this.strength=strength;

}

Location: Entity.java

Content: 

public Map<String,String> unequipItem(Item item){

  for (  EquipmentLocation key : equipment.keySet()) {

    if (item.equals(equipment.get(key))) {

      equipment.put(key,null);

    }

  }

  if (!item.equals(itemRepo.getItem("hands"))) {

    addItemToStorage(item);

  }

  Map<String,String> result=new HashMap<String,String>();

  if (item.containsProperty("damage")) {

    double oldDamage=damage;

    weapon="hands";

    damage-=item.getProperty("damage");

    double diffDamage=damage - oldDamage;

    result.put("damage",String.valueOf(diffDamage));

  }

  if (item.containsProperty("armour")) {

    int oldArmour=armour;

    armour-=item.getProperty("armour");

    int diffArmour=armour - oldArmour;

    result.put("armour",String.valueOf(diffArmour));

  }

  return result;

}

Location: Entity.java

Content: 

private void unequipTwoPlaces(EquipmentLocation leftLocation,EquipmentLocation rightLocation){

  Item left=equipment.get(leftLocation);

  Item right=equipment.get(rightLocation);

  if (left != null) {

    unequipItem(left);

  }

  if (right != null) {

    unequipItem(right);

  }

}

