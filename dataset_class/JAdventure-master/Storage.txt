Location: Storage.java

Content: 

/** 

 * Adds an ItemStack to the items list.

 */

public void addItem(ItemStack itemStack){

  boolean canBeAdded=true;

  if (hasMaxWeight()) {

    double totalWeight=itemStack.getItem().getWeight() * itemStack.getAmount();

    if (totalWeight > maxWeight) {

      canBeAdded=false;

    }

  }

  if (canBeAdded) {

    if (contains(itemStack)) {

      ItemStack sameType=this.getSameType(itemStack);

      this.itemStacks.remove(sameType);

      this.itemStacks.add(new ItemStack(sameType.getAmount() + 1,sameType.getItem()));

    }

 else {

      this.itemStacks.add(itemStack);

    }

  }

}

Location: Storage.java

Content: 

public void add(Item item){

  addItem(new ItemStack(1,item));

}

Location: Storage.java

Content: 

public Integer calculateWeight(){

  int weight=0;

  for (  ItemStack itemStask : itemStacks) {

    weight+=itemStask.getAmount() * itemStask.getItem().getProperty("weight");

  }

  return Integer.valueOf(weight);

}

Location: Storage.java

Content: 

/** 

 * Checks if the current Storage contains an ItemStack with the same type of item as the argument.

 */

private boolean contains(ItemStack item){

  for (  ItemStack itemStack : this.itemStacks) {

    if (itemStack.getItem().equals(item.getItem())) {

      return true;

    }

  }

  return false;

}

Location: Storage.java

Content: 

public String displayWithValue(int playerLuck,int playerInt){

  if (itemStacks.isEmpty()) {

    return "--Empty--";

  }

 else {

    String content="";

    if (playerLuck > 0) {

      for (      ItemStack itemStack : itemStacks) {

        int value=(int)((0.5 + 0.02 * (playerInt + playerLuck)) * (itemStack.getItem().getProperties().get("value")));

        content+="- " + itemStack.getItem().getName() + " : "+ itemStack.getAmount()+ " at "+ value+ " gold coins each\n";

      }

    }

 else {

      for (      ItemStack itemStack : itemStacks) {

        int value=itemStack.getItem().getProperties().get("value");

        content+="- " + itemStack.getItem().getName() + " : "+ itemStack.getAmount()+ " at "+ value+ " gold coins each\n";

      }

    }

    return content;

  }

}

Location: Storage.java

Content: 

public List<ItemStack> getItemStack(){

  return itemStacks;

}

Location: Storage.java

Content: 

public double getMaxWeight(){

  return maxWeight;

}

Location: Storage.java

Content: 

/** 

 * Finds the only item of the same type as the input, and returns that ItemStack. This prevents duplicate items in your backpack.

 */

private ItemStack getSameType(ItemStack item){

  for (  ItemStack itemStack : this.itemStacks) {

    if (itemStack.getItem().equals(item.getItem())) {

      return itemStack;

    }

  }

  return null;

}

Location: Storage.java

Content: 

private boolean hasMaxWeight(){

  return !(maxWeight == -1);

}

Location: Storage.java

Content: 

public boolean isEmpty(){

  return this.itemStacks.isEmpty();

}

Location: Storage.java

Content: 

/** 

 * Removes one Item from the ItemStack and replaces the old ItemStack in this.items with the new one.

 */

public Item removeItem(ItemStack item){

  return removeItem(item,1);

}

Location: Storage.java

Content: 

/** 

 * Removes amount of Items from the ItemStack and replaces the old ItemStack in this.items with the new one.

 */

public Item removeItem(ItemStack itemStack,int amount){

  if (contains(itemStack)) {

    ItemStack sameType=getSameType(itemStack);

    if (sameType.getAmount() - amount <= 0) {

      itemStacks.remove(sameType);

    }

 else {

      itemStacks.remove(sameType);

      itemStacks.add(new ItemStack(sameType.getAmount() - amount,sameType.getItem()));

    }

    return itemStack.getItem();

  }

  return null;

}

Location: Storage.java

Content: 

public Item remove(Item item){

  return removeItem(new ItemStack(0,item),1);

}

Location: Storage.java

Content: 

public List<Item> search(String name){

  List<Item> items=new ArrayList<>();

  for (  ItemStack itemStack : itemStacks) {

    if (itemStack.getItem().getName().equalsIgnoreCase(name)) {

      items.add(itemStack.getItem());

    }

  }

  return items;

}

Location: Storage.java

Content: 

public Storage(){

  this(WEIGHT_UNLIMITED);

}

Location: Storage.java

Content: 

public Storage(double maxWeight){

  this(maxWeight,new ArrayList<ItemStack>());

}

Location: Storage.java

Content: 

public Storage(double maxWeight,List<ItemStack> items){

  this.maxWeight=maxWeight;

  this.itemStacks=items;

}

