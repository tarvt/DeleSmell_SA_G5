Location: NPC.java

Content: 

public List<String> getAllies(){

  return allies;

}

Location: NPC.java

Content: 

public List<String> getEnemies(){

  return enemies;

}

Location: NPC.java

Content: 

public int getXPGain(){

  return xpGain;

}

Location: NPC.java

Content: 

public NPC(){

  allies=new ArrayList<>();

  enemies=new ArrayList<>();

}

Location: NPC.java

Content: 

public NPC(String entityID){

  allies=new ArrayList<>();

  enemies=new ArrayList<>();

  this.id=entityID;

}

Location: NPC.java

Content: 

public void setAllies(List<String> allies){

  this.allies=allies;

}

Location: NPC.java

Content: 

public void setEnemies(List<String> enemies){

  this.enemies=enemies;

}

Location: NPC.java

Content: 

public void setItems(JsonObject json,int itemLimit,int i){

  JsonArray items=json.get("items").getAsJsonArray();

  JsonArray itemTypes=json.get("tradingEmphasis").getAsJsonArray();

  boolean cont;

  for (  JsonElement item : items) {

    if (i == itemLimit) {

      break;

    }

    cont=false;

    char itemType=item.getAsString().charAt(0);

    for (    JsonElement type : itemTypes) {

      if (itemType == type.getAsString().charAt(0)) {

        cont=true;

      }

    }

    Random rand=new Random();

    int j=rand.nextInt(100) + 1;

    if (cont) {

      if ((j > 0) && (j <= 95)) {

        addItemToStorage(itemRepo.getItem(item.getAsString()));

        i++;

      }

    }

 else {

      if ((j > 95) && (j <= 100)) {

        addItemToStorage(itemRepo.getItem(item.getAsString()));

        i++;

      }

    }

  }

  if (i != itemLimit) {

    setItems(json,itemLimit,i);

  }

}

Location: NPC.java

Content: 

public void setXPGain(int xpGain){

  this.xpGain=xpGain;

}

