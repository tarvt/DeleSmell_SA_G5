Location: LocationRepository.java

Content: 

public void addLocation(ILocation location){

  locations.put(location.getCoordinate(),location);

}

Location: LocationRepository.java

Content: 

private String getFileName(){

  return fileName;

}

Location: LocationRepository.java

Content: 

public ILocation getInitialLocation(){

  String profileName=fileName.split("/")[2];

  instance=null;

  LocationRepository.createRepo(profileName);

  load();

  Coordinate coordinate=new Coordinate(0,0,-1);

  return getLocation(coordinate);

}

Location: LocationRepository.java

Content: 

public ILocation getLocation(Coordinate coordinate){

  if (coordinate == null) {

    return null;

  }

  if (!locations.containsKey(coordinate)) {

    throw new RepositoryException("Argument 'coordinate' with value '" + coordinate.toString() + "' not found in repository");

  }

  return locations.get(coordinate);

}

Location: LocationRepository.java

Content: 

private ILocation loadLocation(JsonObject json){

  Coordinate coordinate=new Coordinate(json.get("coordinate").getAsString());

  String title=json.get("title").getAsString();

  String description=json.get("description").getAsString();

  LocationType locationType=LocationType.valueOf(json.get("locationType").getAsString());

  ILocation location=new Location(coordinate,title,description,locationType);

  location.setDangerRating(json.get("danger").getAsInt());

  if (json.has("items")) {

    List<String> items=new Gson().fromJson(json.get("items"),new TypeToken<List<String>>(){

    }

.getType());

    for (    String id : items) {

      location.addItem(itemRepo.getItem(id));

    }

  }

  if (json.has("npcs")) {

    List<String> npcs=new Gson().fromJson(json.get("npcs"),new TypeToken<List<String>>(){

    }

.getType());

    for (    String npc : npcs) {

      location.addNpc(npcRepo.getNpc(npc));

    }

  }

  return location;

}

Location: LocationRepository.java

Content: 

public LocationRepository(String profileName){

  locations=new HashMap<>();

  fileName="json/profiles/" + profileName + "/locations.json";

  load();

}

Location: LocationRepository.java

Content: 

public void writeLocations(){

  try {

    JsonObject jsonObject=new JsonObject();

    for (    Map.Entry<Coordinate,ILocation> entry : locations.entrySet()) {

      ILocation location=entry.getValue();

      JsonObject locationJsonElement=new JsonObject();

      locationJsonElement.addProperty("title",location.getTitle());

      locationJsonElement.addProperty("coordinate",location.getCoordinate().toString());

      locationJsonElement.addProperty("description",location.getDescription());

      locationJsonElement.addProperty("locationType",location.getLocationType().toString());

      locationJsonElement.addProperty("danger",String.valueOf(location.getDangerRating()));

      JsonArray itemList=new JsonArray();

      List<Item> items=location.getItems();

      if (items.size() > 0) {

        for (        Item item : items) {

          JsonPrimitive itemJson=new JsonPrimitive(item.getId());

          itemList.add(itemJson);

        }

        locationJsonElement.add("items",itemList);

      }

      JsonArray npcList=new JsonArray();

      List<NPC> npcs=location.getNpcs();

      if (npcs.size() > 0) {

        for (        NPC npc : npcs) {

          JsonPrimitive npcJson=new JsonPrimitive(npc.getId());

          npcList.add(npcJson);

        }

        locationJsonElement.add("npcs",npcList);

      }

      jsonObject.add(location.getCoordinate().toString(),locationJsonElement);

    }

    Writer writer=new FileWriter(fileName);

    Gson gson=new Gson();

    gson.toJson(jsonObject,writer);

    writer.close();

    QueueProvider.offer("The game locations were saved.");

  }

 catch (  IOException ex) {

    QueueProvider.offer("Unable to save to file " + fileName);

  }

}

