Location: CommandCollectionTest.java

Content: 

@Test public void commandGoTest() throws DeathException {

  player.setName("player1");

  LocationRepository locationRepo=GameBeans.getLocationRepository(player.getName());

  player.setLocation(locationRepo.getInitialLocation());

  collection.command_g("s");

  assertTrue(outContent.toString().contains("Stairs:"));

}

Location: CommandCollectionTest.java

Content: 

@Test public void commandHelpTest(){

  collection.command_help();

  int n=countLines(outContent.toString());

  assertEquals(14,n);

}

Location: CommandCollectionTest.java

Content: 

@Test public void commandInspectAliasesTest(){

  Method inspectMethod=commandMap.get("inspect");

  Method inspectFirstMethodAlias=commandMap.get("lookat");

  Method inspectSecondMethodAlias=commandMap.get("i");

  assertEquals(inspectMethod,inspectFirstMethodAlias);

  assertEquals(inspectMethod,inspectSecondMethodAlias);

}

Location: CommandCollectionTest.java

Content: 

@Test public void commandInspectTest(){

  collection.command_i("");

  assertTrue(outContent.toString().contains("Item doesn't exist"));

}

Location: CommandCollectionTest.java

Content: 

@Test public void commandMonsterTest(){

  collection.command_m();

  assertTrue(outContent.toString().contains("no monsters"));

  Troll troll=new Troll(player.getLevel());

  player.getLocation().addMonster(troll);

  collection.command_m();

  assertTrue(outContent.toString().contains(troll.monsterType));

}

Location: CommandCollectionTest.java

Content: 

@Test public void commandPickAliasesTest(){

  Method inspectMethod=commandMap.get("pick");

  Method inspectFirstMethodAlias=commandMap.get("pickup");

  Method inspectSecondMethodAlias=commandMap.get("p");

  assertEquals(inspectMethod,inspectFirstMethodAlias);

  assertEquals(inspectMethod,inspectSecondMethodAlias);

}

Location: CommandCollectionTest.java

Content: 

@Test public void commandSaveTest(){

  collection.command_save();

  assertTrue(outContent.toString().contains("data was saved"));

}

Location: CommandCollectionTest.java

Content: 

@Test public void commandViewTest(){

  collection.command_v("b");

  assertTrue(outContent.toString().contains("Backpack"));

  collection.command_v("s");

  assertTrue(outContent.toString().contains("Player name:"));

  collection.command_v("e");

  assertTrue(outContent.toString().contains("Equipped Items:"));

}

Location: CommandCollectionTest.java

Content: 

private static int countLines(String str){

  String[] lines=str.split("\r\n|\r|\n");

  return lines.length;

}

Location: CommandCollectionTest.java

Content: 

private void initCommandMap(){

  Method[] methods=CommandCollection.class.getMethods();

  for (  Method method : methods) {

    if (!method.isAnnotationPresent(Command.class)) {

      continue;

    }

    Command annotation=method.getAnnotation(Command.class);

    this.commandMap.put(annotation.command(),method);

    for (    String alias : annotation.aliases()) {

      if (alias.length() == 0) {

        break;

      }

      this.commandMap.put(alias,method);

    }

  }

}

Location: CommandCollectionTest.java

Content: 

@After public void tearDown(){

  System.setOut(stdout);

}

