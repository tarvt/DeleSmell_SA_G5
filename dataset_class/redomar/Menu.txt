Location: Menu.java

Content: 

public Color getDeSelected(){

  return deSelected;

}

Location: Menu.java

Content: 

public static int getHeight(){

  return HEIGHT;

}

Location: Menu.java

Content: 

public Color getSelected(){

  return selected;

}

Location: Menu.java

Content: 

public static int getWidth(){

  return WIDTH;

}

Location: Menu.java

Content: 

public static boolean isGameOver(){

  return gameOver;

}

Location: Menu.java

Content: 

public static boolean isRunning(){

  return running;

}

Location: Menu.java

Content: 

public static boolean isSelectedExit(){

  return selectedExit;

}

Location: Menu.java

Content: 

public static boolean isSelectedStart(){

  return selectedStart;

}

Location: Menu.java

Content: 

private void paintButtons(boolean start,boolean exit,Graphics g){

  if (!start) {

    g.setColor(new Color(0xFFBB4400));

    g.fillRect(35,40,(frame.getWidth() - 67),113);

    g.setColor(getDeSelected());

  }

 else {

    g.setColor(new Color(0xFFDD6600));

    g.fillRect(35,40,(frame.getWidth() - 67),113);

    g.setColor(getSelected());

  }

  g.fillRect(35,40,(frame.getWidth() - 70),110);

  g.setColor(Color.BLACK);

  g.drawString("Start",220,95);

  if (!exit) {

    g.setColor(new Color(0xFFBB4400));

    g.fillRect(35,170,(frame.getWidth() - 67),113);

    g.setColor(getDeSelected());

  }

 else {

    g.setColor(new Color(0xFFDD6600));

    g.fillRect(35,170,(frame.getWidth() - 67),113);

    g.setColor(getSelected());

  }

  g.fillRect(35,170,(frame.getWidth() - 70),110);

  g.setColor(Color.BLACK);

  g.drawString("Exit",220,220);

}

Location: Menu.java

Content: 

public static void play(){

  try {

    JSplash splash=new JSplash(Game.class.getResource("/splash/splash.png"),true,true,false,Game.getGameVersion(),null,Color.RED,Color.ORANGE);

    splash.toFront();

    splash.requestFocus();

    splash.splashOn();

    splash.setProgress(20,"Loading Music");

    Game.setBackgroundMusic(new AudioHandler("/music/Towards The End.mp3"));

    splash.setProgress(50,"Setting Volume");

    Game.getBackgroundMusic().setVolume(-20);

    splash.setProgress(60,"Acquiring data: Multiplayer");

    Thread.sleep(125);

    UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());

    String multiMsg="Sorry but multiplayer has been disabled on this version.\nIf you would like multiplayer checkout Alpha 1.6";

    dialog.setAlwaysOnTop(true);

    JOptionPane.showMessageDialog(dialog,multiMsg,"Multiplayer Warning",JOptionPane.WARNING_MESSAGE);

    Game.setJdata_Host(1);

    if (Game.getJdata_Host() != 1) {

      Game.setJdata_IP(JOptionPane.showInputDialog(dialog,"Enter the name \nleave blank for local"));

    }

    Thread.sleep(125);

    splash.setProgress(70,"Acquiring data: Username");

    String s=JOptionPane.showInputDialog(dialog,"Enter a name");

    if (s != null) {

      Game.setJdata_UserName(s);

    }

    Thread.sleep(125);

    splash.setProgress(90,"Collecting Player Data");

    Object[] options={"African","Caucasian"};

    int n=JOptionPane.showOptionDialog(dialog,"Choose a race for the character to be","Choose a race",JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE,null,options,options[0]);

    if (n == 0) {

      Game.setAlternateColsR(true);

    }

 else {

      Game.setAlternateColsR(false);

    }

    Thread.sleep(250);

    Object[] options1={"Orange","Black"};

    int n1=JOptionPane.showOptionDialog(dialog,"Which Colour do you want the shirt to be?","Choose a shirt Colour",JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE,null,options1,options1[0]);

    if (n1 == 0) {

      Game.setAlternateColsS(true);

    }

 else {

      Game.setAlternateColsS(false);

    }

    splash.setProgress(100,"Connecting as" + Game.getJdata_UserName());

    Thread.sleep(250);

    splash.splashOff();

    frame=new DedicatedJFrame(WIDTH,HEIGHT,SCALE,NAME);

    frame.getFrame();

    frame.getFrame().setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

    frame.requestFocus();

  }

 catch (  Exception e) {

    e.printStackTrace();

  }

}

Location: Menu.java

Content: 

public void setDeSelected(Color deSelected){

  this.deSelected=deSelected;

}

Location: Menu.java

Content: 

public static void setGameOver(boolean gameOver){

  Menu.gameOver=gameOver;

}

Location: Menu.java

Content: 

public static void setRunning(boolean running){

  Menu.running=running;

}

Location: Menu.java

Content: 

public static void setSelectedExit(boolean selectedExit){

  Menu.selectedExit=selectedExit;

}

Location: Menu.java

Content: 

public static void setSelectedStart(boolean selectedStart){

  Menu.selectedStart=selectedStart;

}

Location: Menu.java

Content: 

public void setSelected(Color selected){

  this.selected=selected;

}

