Location: Game.java

Content: 

/** 

 * @author Redomar

 * @version Alpha 1.8.4

 */

public Game(){

  context=InputContext.getInstance();

  setMinimumSize(new Dimension(WIDTH * SCALE,HEIGHT * SCALE));

  setMaximumSize(new Dimension(WIDTH * SCALE,HEIGHT * SCALE));

  setPreferredSize(new Dimension(WIDTH * SCALE,HEIGHT * SCALE));

  setFrame(new JFrame(NAME));

  getFrame().setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

  getFrame().setLayout(new BorderLayout());

  getFrame().add(this,BorderLayout.CENTER);

  getFrame().pack();

  getFrame().setResizable(false);

  getFrame().setLocationRelativeTo(null);

  getFrame().setVisible(true);

  requestFocus();

  setDevMode(false);

  setClosing(false);

}

Location: Game.java

Content: 

public static boolean[] getAlternateCols(){

  return alternateCols;

}

Location: Game.java

Content: 

public static AudioHandler getBackgroundMusic(){

  return Game.backgroundMusic;

}

Location: Game.java

Content: 

public static Dummy getDummy(){

  return game.dummy;

}

Location: Game.java

Content: 

public static int getFaceCol(){

  return faceCol;

}

Location: Game.java

Content: 

public static String getGameVersion(){

  return game_Version;

}

Location: Game.java

Content: 

public static InputHandler getInput(){

  return input;

}

Location: Game.java

Content: 

public static int getJdata_Host(){

  return Jdata_Host;

}

Location: Game.java

Content: 

public static String getJdata_IP(){

  return Jdata_IP;

}

Location: Game.java

Content: 

public static String getJdata_UserName(){

  return Jdata_UserName;

}

Location: Game.java

Content: 

public static LevelHandler getLevel(){

  return game.level;

}

Location: Game.java

Content: 

public static MouseHandler getMouse(){

  return mouse;

}

Location: Game.java

Content: 

public String getNowPlaying(){

  return nowPlaying;

}

Location: Game.java

Content: 

public static Player getPlayer(){

  return game.player;

}

Location: Game.java

Content: 

public static int getShirtCol(){

  return shirtCol;

}

Location: Game.java

Content: 

public int getTickCount(){

  return tickCount;

}

Location: Game.java

Content: 

public Vendor getVendor(){

  return vendor;

}

Location: Game.java

Content: 

public static boolean isChangeLevel(){

  return changeLevel;

}

Location: Game.java

Content: 

public static boolean isClosing(){

  return closingMode;

}

Location: Game.java

Content: 

public static boolean isDevMode(){

  return devMode;

}

Location: Game.java

Content: 

public static boolean isNpc(){

  return npc;

}

Location: Game.java

Content: 

/** 

 * This method will remove a dummy NPC from the level only if they are not allowed to be in it. 

 */

public static void npcKill(){

  if (isNpc() == false) {

    game.level.removeEntity(Game.getDummy());

  }

}

Location: Game.java

Content: 

/** 

 * This method will spawn a dummy NPC into the level only if they are allowed to be spawned in.  They will be spawned at position (100, 150)  with a red shirt and caucasian face.

 */

public static void npcSpawn(){

  if (isNpc() == true) {

    game.setDummy(new Dummy(game.level,"Dummy",100,150,500,543));

    game.level.addEntity(Game.getDummy());

  }

}

Location: Game.java

Content: 

public static void setAlternateColsR(boolean alternateCols){

  Game.alternateCols[1]=alternateCols;

}

Location: Game.java

Content: 

public static void setAlternateColsS(boolean alternateCols){

  Game.alternateCols[0]=alternateCols;

}

Location: Game.java

Content: 

public static void setAlternateCols(boolean[] alternateCols){

  Game.alternateCols=alternateCols;

}

Location: Game.java

Content: 

public static void setBackgroundMusic(AudioHandler backgroundMusic){

  Game.backgroundMusic=backgroundMusic;

}

Location: Game.java

Content: 

public static void setChangeLevel(boolean changeLevel){

  Game.changeLevel=changeLevel;

}

Location: Game.java

Content: 

public static void setClosing(boolean closing){

  Game.closingMode=closing;

}

Location: Game.java

Content: 

public static void setDevMode(boolean devMode){

  Game.devMode=devMode;

}

Location: Game.java

Content: 

public void setDummy(Dummy dummy){

  this.dummy=dummy;

}

Location: Game.java

Content: 

public static void setFaceCol(int faceCol){

  Game.faceCol=faceCol;

}

Location: Game.java

Content: 

public void setInput(InputHandler input){

  Game.input=input;

}

Location: Game.java

Content: 

public static void setJdata_Host(int jdata_Host){

  Jdata_Host=jdata_Host;

}

Location: Game.java

Content: 

public static void setJdata_IP(String jdata_IP){

  Jdata_IP=jdata_IP;

}

Location: Game.java

Content: 

public static void setJdata_UserName(String jdata_UserName){

  Jdata_UserName=jdata_UserName;

}

Location: Game.java

Content: 

public void setLevel(LevelHandler level){

  this.level=level;

}

Location: Game.java

Content: 

/** 

 * Sets the level to the map [.png] provided. Starts at x100 y100.

 * @param Map_str Also sets predefined character colours.

 */

public void setMap(String Map_str){

  setLevel(new LevelHandler(Map_str));

  if (alternateCols[0]) {

    Game.setShirtCol(240);

  }

  if (!alternateCols[0]) {

    Game.setShirtCol(111);

  }

  if (alternateCols[1]) {

    Game.setFaceCol(310);

  }

  if (!alternateCols[1]) {

    Game.setFaceCol(543);

  }

  setPlayer(new Player(level,100,100,input,getJdata_UserName(),shirtCol,faceCol));

  level.addEntity(player);

  spruce=new Spruce(level,70,170,2);

  level.addEntity(spruce);

}

Location: Game.java

Content: 

public static void setMouse(MouseHandler mouse){

  Game.mouse=mouse;

}

Location: Game.java

Content: 

public void setNowPlaying(String nowPlaying){

  this.nowPlaying=nowPlaying;

}

Location: Game.java

Content: 

public static void setNpc(boolean npc){

  Game.npc=npc;

}

Location: Game.java

Content: 

public void setPlayer(Player player){

  game.player=player;

}

Location: Game.java

Content: 

public static void setShirtCol(int shirtCol){

  Game.shirtCol=shirtCol;

}

Location: Game.java

Content: 

public void setTickCount(int tickCount){

  this.tickCount=tickCount;

}

Location: Game.java

Content: 

public void setTime(Time time){

  Game.time=time;

}

Location: Game.java

Content: 

public void setVendor(Vendor vendor){

  this.vendor=vendor;

}

Location: Game.java

Content: 

public void setWindow(WindowHandler window){

  this.window=window;

}

Location: Game.java

Content: 

private void status(Graphics g,boolean TerminalMode,boolean TerminalQuit){

  if (TerminalMode) {

    g.setColor(Color.CYAN);

    g.drawString("JavaGame Stats",0,10);

    g.drawString("FPS/TPS: " + fps + "/"+ tps,0,25);

    if ((player.getNumSteps() & 15) == 15) {

      steps+=1;

    }

    g.drawString("Foot Steps: " + steps,0,40);

    g.drawString("NPC: " + WordUtils.capitalize(String.valueOf(isNpc())),0,55);

    g.drawString("Mouse: " + getMouse().getX() + "x |"+ getMouse().getY()+ "y",0,70);

    if (getMouse().getButton() != -1)     g.drawString("Button: " + getMouse().getButton(),0,85);

    g.setColor(Color.CYAN);

    g.fillRect(getMouse().getX() - 12,getMouse().getY() - 12,24,24);

  }

  if (!TerminalQuit) {

    return;

  }

  g.setColor(Color.BLACK);

  g.fillRect(0,0,getWidth(),getHeight());

  g.setColor(Color.RED);

  g.drawString("Shutting down the Game",(getWidth() / 2) - 70,(getHeight() / 2) - 8);

  g.dispose();

}

