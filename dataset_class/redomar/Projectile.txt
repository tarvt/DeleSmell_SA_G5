Location: Projectile.java

Content: 

public boolean isRemoved(){

  return removed;

}

Location: Projectile.java

Content: 

private boolean isSolid(int xa,int ya,int x,int y,int nx,int ny){

  if (level == null) {

    return false;

  }

  Tile lastTile=level.getTile((nx + x) >> 3,(ny + y) >> 3);

  Tile newtTile=level.getTile((nx + x + xa) >> 3,(ny + y + ya) >> 3);

  return !lastTile.equals(newtTile) && newtTile.isSolid();

}

Location: Projectile.java

Content: 

public Projectile(LevelHandler level,int x,int y,double dir){

  super(level);

  xOrigin=x;

  yOrigin=y;

  angle=dir;

  this.x=x;

  this.y=y;

}

Location: Projectile.java

Content: 

public void remove(){

  setRemoved(true);

}

Location: Projectile.java

Content: 

public void setRemoved(boolean removed){

  this.removed=removed;

}

Location: Projectile.java

Content: 

public boolean tileCollision(double xa,double ya,int nx,int ny){

  int xMin=0;

  int xMax=7;

  int yMin=0;

  int yMax=7;

  for (int x=xMin; x < xMax; x++) {

    if (isSolid((int)xa,(int)ya,x,yMin,nx,ny)) {

      return true;

    }

  }

  for (int x=xMin; x < xMax; x++) {

    if (isSolid((int)xa,(int)ya,x,yMax,nx,ny)) {

      return true;

    }

  }

  for (int y=yMin; y < yMax; y++) {

    if (isSolid((int)xa,(int)ya,xMin,y,nx,ny)) {

      return true;

    }

  }

  for (int y=yMin; y < yMax; y++) {

    if (isSolid((int)xa,(int)ya,xMax,y,nx,ny)) {

      return true;

    }

  }

  return false;

}

