Location: TableGroupCompare.java

Content: 

TableGroupCompare(BufferedReader in,BufferedReader in_2,ReportProps props,ReportProps props_2,ReportProps titles) throws IllegalArgumentException {

  this.props=props;

  this.props_2=props_2;

  String line;

  String tableTitle="Untitled";

  try {

    while ((line=in.readLine()) != null) {

      in_2.readLine();

      if (line.startsWith("Title")) {

        tableTitle=line.substring(5).trim();

      }

 else       if (line.startsWith("Table")) {

        StringTokenizer token=new StringTokenizer(line.substring(5));

        int group=Integer.parseInt(token.nextToken());

        int column=Integer.parseInt(token.nextToken());

        boolean freeForm=(Integer.parseInt(token.nextToken()) == 1);

        if (group < 0 || group >= MAXGROUPS || column < 0 || column >= MAXCOLUMNS) {

          throw new IllegalArgumentException(tableTitle);

        }

        int row=rows[group][column]++;

        if (row < 0 || row >= MAXROWS) {

          throw new IllegalArgumentException(tableTitle);

        }

        if (props_2 != null) {

          tables[group][0][row]=new Table(tableTitle,in,props,titles,freeForm);

          tables[group][1][row]=new Table(tableTitle,in_2,props_2,titles,freeForm);

          anyEntry[group][0]=true;

          anyEntry[group][1]=true;

        }

 else {

          tables[group][column][row]=new Table(tableTitle,in,props,titles,freeForm);

          anyEntry[group][column]=true;

        }

      }

    }

  }

 catch (  IOException e) {

    JBButil.getLog().log(Level.WARNING,"Error: " + e,e);

  }

}

Location: TableGroupCompare.java

Content: 

public String toString(){

  StringBuffer buf=new StringBuffer(tableBegin);

  Table t;

  for (int ig=0; ig < MAXGROUPS; ig++) {

    if (!anyEntry[ig][0])     continue;

    buf.append(firstColumn);

    for (int ir=0; ir < MAXROWS; ir++) {

      t=tables[ig][0][ir];

      if (t != null)       buf.append(t.toString());

    }

    for (int ic=1; ic < MAXCOLUMNS; ic++) {

      if (!anyEntry[ig][ic])       continue;

      buf.append(otherColumn);

      for (int ir=0; ir < MAXROWS; ir++) {

        t=tables[ig][ic][ir];

        if (t != null)         buf.append(t.toString());

      }

    }

  }

  buf.append(tableEnd);

  return buf.toString();

}

