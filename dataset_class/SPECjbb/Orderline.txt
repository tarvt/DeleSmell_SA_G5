Location: Orderline.java

Content: 

public synchronized BigDecimal getAmount(){

  BigDecimal temp=amount;

  return temp;

}

Location: Orderline.java

Content: 

public synchronized char getBrandGeneric(){

  char temp=BrandGeneric;

  return temp;

}

Location: Orderline.java

Content: 

public synchronized Date getDeliveryDateTime(){

  Date temp=deliveryDateTime;

  return temp;

}

Location: Orderline.java

Content: 

public synchronized int getItemId(){

  int temp=itemId;

  return temp;

}

Location: Orderline.java

Content: 

public synchronized String getItemName(){

  String temp=itemName;

  return temp;

}

Location: Orderline.java

Content: 

public synchronized BigDecimal getItemPrice(){

  BigDecimal temp=itemPrice;

  return temp;

}

Location: Orderline.java

Content: 

public synchronized short getQuantity(){

  short temp=quantity;

  return temp;

}

Location: Orderline.java

Content: 

public Stock getStockPtr(){

  return stockPtr;

}

Location: Orderline.java

Content: 

public synchronized int getStockQuantity(){

  int temp=stockQuantity;

  return temp;

}

Location: Orderline.java

Content: 

public synchronized short getSupplyWarehouse(){

  short temp=supplyWarehouseId;

  return temp;

}

Location: Orderline.java

Content: 

public Orderline(Company inCompany,int inOrderId,byte inDistrictId,short inWarehouseId,short inLineNumber,short number_of_orderlines,boolean rollback){

  company=inCompany;

  orderId=inOrderId;

  districtId=inDistrictId;

  warehouseId=inWarehouseId;

  orderLineNumber=inLineNumber;

  itemId=JBButil.create_random_item_id(company.getMaxItems(),warehouseId);

  if ((inLineNumber == number_of_orderlines) && rollback) {

    itemId=0;

  }

  deliveryDateTime=null;

  quantity=5;

  amount=BigDecimal.valueOf(0,2);

  districtInfo=null;

}

Location: Orderline.java

Content: 

private void process(Item itemRef,Stock stockRef){

  itemName=itemRef.getName();

  itemPrice=itemRef.getPrice();

  String itemData=itemRef.getBrandInfo();

  stockQuantity=stockRef.getQuantity();

  String stock_districtInfo=stockRef.getDistrictInfo(districtId);

  String stockData=stockRef.getData();

  if (stockQuantity >= (quantity + 10))   stockRef.changeQuantity(-quantity);

 else   stockRef.changeQuantity(91 - quantity);

  stockRef.incrementYTD(quantity);

  stockRef.incrementOrderCount();

  if (warehouseId == supplyWarehouseId)   stockRef.incrementRemoteCount();

  amount=BigDecimal.valueOf(quantity).multiply(itemPrice).setScale(2,BigDecimal.ROUND_HALF_UP);

  if ((itemData.indexOf("ORIGINAL") > 0) && (stockData.indexOf("ORIGINAL") > 0))   BrandGeneric='B';

 else   BrandGeneric='G';

  districtInfo=new String(stock_districtInfo);

}

Location: Orderline.java

Content: 

public synchronized void setAmount(BigDecimal inAmount){

  amount=inAmount;

}

Location: Orderline.java

Content: 

public synchronized void setDeliveryTime(Date deliveryTime){

  deliveryDateTime=deliveryTime;

}

Location: Orderline.java

Content: 

public synchronized void setDistrictInfo(String inDistrictInfo){

  districtInfo=inDistrictInfo;

}

Location: Orderline.java

Content: 

public synchronized void setQuantity(short inQuantity){

  quantity=inQuantity;

}

Location: Orderline.java

Content: 

public synchronized void setSupplyWarehouse(short inSupplyWarehouseId){

  supplyWarehouseId=inSupplyWarehouseId;

}

Location: Orderline.java

Content: 

public synchronized boolean validateAndProcess(Warehouse inWarehousePtr){

  boolean temp;

  Item itemRef=null;

  Stock stockRef=null;

  if (inWarehousePtr != null) {

    itemRef=inWarehousePtr.retrieveItem(itemId);

    stockRef=inWarehousePtr.retrieveStock(itemId);

  }

  if ((inWarehousePtr != null) && (itemRef != null) && (stockRef != null)) {

    stockPtr=stockRef;

    process(itemRef,stockRef);

    temp=true;

  }

 else   temp=false;

  return temp;

}

