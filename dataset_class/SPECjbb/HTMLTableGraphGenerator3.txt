Location: HTMLTableGraphGenerator3.java

Content: 

public void addXYPair(double[] xypair){

  if (xypair == null || xypair.length != DIM)   return;

  String lmx=Integer.toString(getLinearMapX(xypair[X]));

  String lmy=Integer.toString(getLinearMapY(xypair[Y]));

  if (!xypairs.containsKey(lmx)) {

    xypairs.put(lmx,new Vector());

  }

  ((Vector)xypairs.get(lmx)).addElement(lmy);

}

Location: HTMLTableGraphGenerator3.java

Content: 

public void clearXYPairs(){

  xypairs.clear();

}

Location: HTMLTableGraphGenerator3.java

Content: 

public void generate(){

  generate(DEFAULT_HTMLFILE);

}

Location: HTMLTableGraphGenerator3.java

Content: 

public String generateString(){

  StringBuffer buf=new StringBuffer();

  buf.append("<TABLE BORDER=1 CELLSPACING=0 CELLPADDING=0><TR><TD>");

  buf.append("<TABLE BORDER=0 CELLSPACING=" + pad + " CELLPADDING="+ pad+ ((bgcolorEnabled) ? " BGCOLOR=" + bgcolor : "")+ " WIDTH="+ (size.width * pixelsize)+ ">\n");

  for (int y=0; y < size.height; y++) {

    buf.append("<TR>");

    if (y == 0) {

      buf.append("<TD ALIGN=center VALIGN=middle ROWSPAN=" + size.height + " BGCOLOR=#ffffff>"+ yaxis+ "</TD>");

    }

    if (y % 10 == 0) {

      double d=getInverseLinearMapY(y);

      String label=dfy.format(d).replace('-',' ').trim();

      String color=(d < 0) ? "COLOR=#ff0000" : "COLOR=#000000";

      buf.append("<TD BGCOLOR=white NOWRAP ROWSPAN=10 ALIGN=right VALIGN=top>" + "<FONT SIZE=1 " + color + ">"+ label+ "</FONT></TD>\n");

    }

    for (int x=0; x < size.width; x++) {

      String plot="";

      String sx=Integer.toString(x);

      String sy=Integer.toString(y);

      if (xypairs.containsKey(sx)) {

        Vector v=(Vector)xypairs.get(sx);

        Enumeration e=v.elements();

        while (e.hasMoreElements()) {

          String svy=e.nextElement().toString();

          if (svy.equals(sy)) {

            plot=pixel;

            break;

          }

        }

      }

      buf.append("<TD WIDTH=" + pixelsize + ((pixelcolorEnabled && !plot.equals("")) ? " BGCOLOR=" + pixelcolor : "")+ ">"+ plot+ "</TD>");

    }

    buf.append("</TR>\n");

  }

  buf.append("<TR><TD BGCOLOR=#ffffff COLSPAN=2 ROWSPAN=2>&nbsp;</TD>\n");

  for (int x=0; x < size.width; x++) {

    if (x % 10 == 0) {

      double d=getInverseLinearMapX(x);

      String label=dfx.format(d).replace('-',' ').trim();

      String color=(d < 0) ? "COLOR=#ff0000" : "COLOR=#000000";

      buf.append("<TD ALIGN=left BGCOLOR=white NOWRAP COLSPAN=10 VALIGN=top>" + "<FONT SIZE=1 " + color + ">"+ label+ "</FONT></TD>\n");

    }

  }

  buf.append("</TR><TR><TD COLSPAN=" + size.width + " ALIGN=center BGCOLOR=#ffffff>"+ xaxis+ "</TD></TR>");

  buf.append("</TABLE></TD></TR></TABLE>");

  return buf.toString();

}

Location: HTMLTableGraphGenerator3.java

Content: 

public void generate(String filename){

  if (filename == null)   return;

  try {

    FileWriter fw=new FileWriter(filename);

    fw.write(generateString());

    fw.flush();

    fw.close();

  }

 catch (  IOException ioe) {

    JBButil.getLog().log(Level.WARNING,"IOException: " + ioe.getMessage(),ioe);

  }

catch (  Exception e) {

    JBButil.getLog().log(Level.WARNING,"Exception: " + e.getMessage(),e);

    e.printStackTrace();

  }

}

Location: HTMLTableGraphGenerator3.java

Content: 

private double getInverseLinearMapX(int x){

  return (scale[MINX] + x * alphax);

}

Location: HTMLTableGraphGenerator3.java

Content: 

private double getInverseLinearMapY(int y){

  return (scale[MAXY] - y * alphay);

}

Location: HTMLTableGraphGenerator3.java

Content: 

public HTMLTableGraphGenerator3(){

  setTableSize(DEFAULT_SIZE);

  setPixelSize(DEFAULT_PIXELSIZE);

  setPixelPadSize(DEFAULT_PADSIZE);

  setForegroundColor(DEFAULT_FGCOLOR);

  setBackgroundColor(DEFAULT_BGCOLOR);

  setAxesLabels(DEFAULT_XAXIS,DEFAULT_YAXIS);

  setAxesLabelsPrecision(0,0);

}

Location: HTMLTableGraphGenerator3.java

Content: 

public boolean isBackgroundColorEnabled(){

  return bgcolorEnabled;

}

Location: HTMLTableGraphGenerator3.java

Content: 

public boolean isPixelBorderColorEnabled(){

  return pixelcolorEnabled;

}

Location: HTMLTableGraphGenerator3.java

Content: 

public void setAxesLabelsPrecision(int x,int y){

  dfx.setMinimumIntegerDigits(1);

  dfx.setMinimumFractionDigits(x);

  dfx.setMaximumFractionDigits(x);

  dfy.setMinimumIntegerDigits(1);

  dfy.setMinimumFractionDigits(y);

  dfy.setMaximumFractionDigits(y);

}

Location: HTMLTableGraphGenerator3.java

Content: 

public void setAxesLabels(String xaxis,String yaxis){

  this.xaxis=xaxis;

  if (yaxis.length() > 1) {

    char[] c=yaxis.toCharArray();

    yaxis="";

    for (int i=0; i < c.length; i++) {

      yaxis+="&nbsp;" + c[i] + "&nbsp;<BR>";

    }

  }

  this.yaxis=yaxis;

}

Location: HTMLTableGraphGenerator3.java

Content: 

public void setBackgroundColorEnabled(boolean bgcolorEnabled){

  this.bgcolorEnabled=bgcolorEnabled;

}

Location: HTMLTableGraphGenerator3.java

Content: 

public void setBackgroundColor(Color c){

  if (c == null)   return;

  bgcolor=toHexString(c);

  setBackgroundColorEnabled(true);

}

Location: HTMLTableGraphGenerator3.java

Content: 

public void setForegroundColor(Color c){

  if (c == null)   return;

  fgcolor=toHexString(c);

}

Location: HTMLTableGraphGenerator3.java

Content: 

public void setPixelBorderColorEnabled(boolean pixelcolorEnabled){

  this.pixelcolorEnabled=pixelcolorEnabled;

}

Location: HTMLTableGraphGenerator3.java

Content: 

public void setPixelBorderColor(Color c){

  if (c == null)   return;

  pixelcolor=toHexString(c);

  setPixelBorderColorEnabled(true);

}

Location: HTMLTableGraphGenerator3.java

Content: 

public void setPixelImage(String pixel){

  pixel="<IMG SRC=" + pixel + " WIDTH="+ pixelsize+ " HEIGHT="+ pixelsize+ ">";

  this.pixel=pixel;

}

Location: HTMLTableGraphGenerator3.java

Content: 

public void setPixelPadSize(int pad){

  this.pad=pad;

}

Location: HTMLTableGraphGenerator3.java

Content: 

public void setTableSize(Dimension size){

  if (size == null)   return;

  this.size=size;

  setScale(scale);

}

Location: HTMLTableGraphGenerator3.java

Content: 

public void setXYPairs(double[][] xypairs){

  if (xypairs == null)   return;

  for (int i=0; i < xypairs.length; i++) {

    addXYPair(xypairs[i]);

  }

}

Location: HTMLTableGraphGenerator3.java

Content: 

public void setXYPairs(Vector xypairs){

  if (xypairs == null)   return;

  Enumeration e=xypairs.elements();

  while (e.hasMoreElements()) {

    addXYPair((double[])e.nextElement());

  }

}

Location: HTMLTableGraphGenerator3.java

Content: 

private String toHexString(Color c){

  return "#" + toHexString(c.getRed()) + toHexString(c.getGreen())+ toHexString(c.getBlue());

}

Location: HTMLTableGraphGenerator3.java

Content: 

private String toHexString(int value){

  String s=Integer.toHexString(value);

  return (s.length() == 1) ? "0" + s : s;

}

