Location: NewOrderTransaction.java

Content: 

public NewOrderTransaction(Company inCompany,short inWarehouseId){

  company=inCompany;

  warehouseId=inWarehouseId;

  warehousePtr=company.getWarehousePtr(warehouseId,false);

  orderLog=new TransactionLogBuffer();

  setupOrderLog();

  xmlOrderLog=new XMLTransactionLog();

  initLog=new TransactionLogBuffer(orderLog);

  setupInitLog();

}

Location: NewOrderTransaction.java

Content: 

public synchronized void processPreloadedOrders(){

  orderId=districtPtr.nextOrderId();

  long uniqueCustomerId=company.buildUniqueCustomerKey(warehouseId,districtId,customerId);

  Customer customerPtr=company.getCustomer(uniqueCustomerId,false);

  BigDecimal temp=BigDecimal.valueOf(0,2);

  thisOrder=new Order(company,orderId,districtId,warehouseId,customerId,customerPtr,temp,temp,temp);

  districtPtr.addOrder(thisOrder);

  customerPtr.addOrder(thisOrder);

  Date orderdate=new Date();

  thisOrder.setEntryDateTime(orderdate);

  if (orderId <= (company.getInitialOrders() - company.getInitialNewOrders())) {

    byte carrierId=(byte)JBButil.random(1,10,warehouseId);

    thisOrder.setCarrierId(carrierId);

  }

  thisOrder.setAllLocal(true);

  thisOrder.processLines(warehousePtr,number_of_orderlines,false);

  orderline_count=thisOrder.getOrderlineCount();

  if (orderId > (company.getInitialOrders() - company.getInitialNewOrders())) {

    NewOrder theNewOrder=new NewOrder(thisOrder,orderId,districtId,warehouseId);

    districtPtr.addNewOrder(theNewOrder);

  }

}

Location: NewOrderTransaction.java

Content: 

public synchronized void setDistrictandCustomer(byte inDistrictId,short inCustomerId){

  districtId=inDistrictId;

  customerId=inCustomerId;

  districtPtr=warehousePtr.getDistrictPtr(districtId,false);

}

