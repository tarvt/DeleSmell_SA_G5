Location: GraphImage.java

Content: 

public void drawLegend(String legend,double XOffset,double YOffset,Color symbolColor,Color legendColor,String legendType){

  FontMetrics fm=graphics.getFontMetrics();

  int tx=getLinearMapX(scale[MINX] + XOffset);

  int ty=getLinearMapY(0) + (int)(YOffset * AXIS_TICK_RADIUS) + fm.getAscent();

  int p=pixelsize;

  int r=(int)Math.round(p / 2.0);

  graphics.setColor(symbolColor);

  if (legendType.equals("Line")) {

    graphics.drawLine(tx,ty - fm.getAscent() / 2,tx + 20,ty - fm.getAscent() / 2);

    graphics.setColor(legendColor);

    graphics.drawString(" - " + legend,tx + 22,ty);

  }

 else   if (legendType.equals("Dot")) {

    graphics.fillArc(tx - r,ty - r - fm.getAscent() / 2,p,p,0,360);

    graphics.setColor(legendColor);

    graphics.drawString(" - " + legend,tx,ty);

  }

}

Location: GraphImage.java

Content: 

private int getLinearMapX(double x){

  return (int)Math.round((x - scale[MINX]) / alphax);

}

Location: GraphImage.java

Content: 

private int getLinearMapY(double y){

  return (int)Math.round((scale[MAXY] - y) / alphay);

}

Location: GraphImage.java

Content: 

public synchronized double getSuggestedMinXScale(double maxx,double maxy){

  double[] scale=new double[this.scale.length];

  System.arraycopy(this.scale,0,scale,0,scale.length);

  setScale(new double[]{0,maxx,0,maxy});

  FontMetrics fm=graphics.getFontMetrics();

  int w=fm.stringWidth(dfy.format(maxy)) + AXIS_TICK_RADIUS + 20;

  double minx=-(this.scale[MINX] + w * alphax);

  setScale(scale);

  return minx;

}

Location: GraphImage.java

Content: 

public synchronized double getSuggestedMinYScale(double maxx,double maxy){

  double[] scale=new double[this.scale.length];

  System.arraycopy(this.scale,0,scale,0,scale.length);

  setScale(new double[]{0,maxx,0,maxy});

  FontMetrics fm=graphics.getFontMetrics();

  int h=AXIS_TICK_RADIUS + fm.getHeight() + 40;

  double miny=(this.scale[MAXY] - h * alphay) - this.scale[MAXY];

  setScale(scale);

  return miny;

}

Location: GraphImage.java

Content: 

public int getSuggestedYAxisTickInterval(int suggestedNumTicks,double maxy){

  double t=maxy / suggestedNumTicks;

  int ll=(int)(Math.log(t) / Math.log(10));

  int lu=ll + 1;

  int[] ti=new int[10];

  ti[0]=(int)Math.pow(10,ll);

  ti[9]=(int)Math.pow(10,lu);

  for (int i=0; i < ti.length - 1; i++) {

    ti[i + 1]=ti[i] + ti[0];

  }

  int index=9;

  int delta=Integer.MAX_VALUE;

  for (int i=ti.length - 1; i >= 0; i--) {

    double ddiff=(ti[i] - t);

    if (ddiff < 0.0)     break;

    int diff=(int)ddiff;

    if (diff <= delta || delta < 0) {

      delta=diff;

      index=i;

    }

  }

  return ti[index];

}

Location: GraphImage.java

Content: 

public GraphImage(){

  this(DEFAULT_WIDTH,DEFAULT_HEIGHT);

}

Location: GraphImage.java

Content: 

public GraphImage(int width,int height){

  super(width,height,TYPE_3BYTE_BGR);

  init();

}

Location: GraphImage.java

Content: 

private void init(){

  graphics=getGraphics();

  graphics.setFont(FONT);

  setScale(DEFAULT_SCALE);

  setPixelSize(DEFAULT_PIXEL_SIZE);

  setPixelType(DEFAULT_PIXEL_TYPE);

  setBackground(DEFAULT_BACKGROUND_COLOR);

  setForeground(DEFAULT_FOREGROUND_COLOR);

  setImageQuality(DEFAULT_JPEG_QUALITY);

  setConnectPointsEnabled(false);

  setXYAxesLabelsPrecision(2,2);

}

Location: GraphImage.java

Content: 

public void make(){

  make(DEFAULT_FILENAME);

}

Location: GraphImage.java

Content: 

public void make(String filename){

  if (filename == null)   return;

  try {

    File outfile=new File(filename);

    ImageIO.write(this,"jpeg",outfile);

  }

 catch (  Exception e) {

    JBButil.getLog().log(Level.WARNING,"Exception: " + e.getMessage(),e);

  }

}

Location: GraphImage.java

Content: 

public void plotFlatLine(double y,Color c){

  int w=getWidth();

  int py=getLinearMapY(y);

  int px=getLinearMapX(0.0);

  graphics.setColor(c);

  for (int x=px; x < w; x+=2 * DASH_LENGTH) {

    graphics.drawLine(x,py,x + DASH_LENGTH,py);

  }

}

Location: GraphImage.java

Content: 

public void plotFlatLine(double x1,double x2,double y,Color c){

  int py=getLinearMapY(y);

  int px=getLinearMapX(x1);

  int ex=getLinearMapX(x2);

  graphics.setColor(c);

  for (int x=px; x < ex; x+=2 * DASH_LENGTH) {

    graphics.drawLine(x,py,x + DASH_LENGTH,py);

  }

}

Location: GraphImage.java

Content: 

public void plotLine(double x1,double y1,double x2,double y2){

  graphics.setColor(pixelcolor);

  graphics.drawLine(getLinearMapX(x1),getLinearMapY(y1),getLinearMapX(x2),getLinearMapY(y2));

}

Location: GraphImage.java

Content: 

public void plotXAxisTicks(double step,Color c,String label){

  graphics.setColor(c);

  int py=getLinearMapY(0.0);

  FontMetrics fm=graphics.getFontMetrics();

  for (double x=0.0; x <= scale[MAXX]; x+=step) {

    int px=getLinearMapX(x);

    graphics.drawLine(px,py - AXIS_TICK_RADIUS * ((x == 0.0) ? 2 : 1),px,py + AXIS_TICK_RADIUS * ((x == 0.0) ? 2 : 1));

    if (x == 0.0)     continue;

    String sx=dfx.format(x);

    int sw=fm.stringWidth(sx) / 2;

    graphics.drawString(sx,px - sw,py + AXIS_TICK_RADIUS + fm.getAscent());

  }

  for (double x=0.0; x >= scale[MINX]; x-=step) {

    int px=getLinearMapX(x);

    graphics.drawLine(px,py - AXIS_TICK_RADIUS,px,py + AXIS_TICK_RADIUS);

  }

  graphics.drawString(label,getLinearMapX(scale[MAXX] - 2),py + 3 * AXIS_TICK_RADIUS + fm.getAscent());

}

Location: GraphImage.java

Content: 

public void plotXYAxes(Color c){

  graphics.setColor(c);

  int pixelOriginX=getLinearMapX(0.0);

  int pixelOriginY=getLinearMapY(0.0);

  graphics.drawLine(0,pixelOriginY,getWidth(),pixelOriginY);

  graphics.drawLine(pixelOriginX,0,pixelOriginX,getHeight());

}

Location: GraphImage.java

Content: 

public void plotYAxisTicks(double step,Color c,String label){

  graphics.setColor(c);

  int px=getLinearMapX(0.0);

  FontMetrics fm=graphics.getFontMetrics();

  for (double y=0.0; y <= scale[MAXY] - step; y+=step) {

    int py=getLinearMapY(y);

    graphics.drawLine(px - AXIS_TICK_RADIUS * ((y == 0.0) ? 2 : 1),py,px + AXIS_TICK_RADIUS * ((y == 0.0) ? 2 : 1),py);

    if (y == 0.0)     continue;

    String sy=dfy.format(y);

    graphics.drawString(sy,px - AXIS_TICK_RADIUS - fm.stringWidth(sy)- 2,py + fm.getDescent());

  }

  for (double y=0.0; y >= scale[MINY]; y-=step) {

    int py=getLinearMapY(y);

    graphics.drawLine(px - AXIS_TICK_RADIUS,py,px + AXIS_TICK_RADIUS,py);

  }

  graphics.drawString(label,px - AXIS_TICK_RADIUS - fm.stringWidth(label),getLinearMapY(scale[MAXY]) + 4 + fm.getDescent());

}

Location: GraphImage.java

Content: 

public void plot(double x,double y){

  plot(x,y,pixelsize,pixelcolor);

}

Location: GraphImage.java

Content: 

public void plot(double x,double y,Color c){

  plot(x,y,pixelsize,c);

}

Location: GraphImage.java

Content: 

public void plot(double x,double y,int p,Color c){

  if (connectPointsEnabled) {

    if (prevSet) {

      plotLine(prevx,prevy,x,y);

    }

    prevSet=true;

    prevx=x;

    prevy=y;

  }

 else {

    prevSet=false;

  }

  graphics.setColor(c);

  int px=getLinearMapX(x);

  int py=getLinearMapY(y);

  int r=(int)Math.round(p / 2.0);

switch (pixeltype) {

case PIXEL_TYPE_CIRCLE:

    graphics.fillArc(px - r,py - r,p,p,0,360);

  break;

case PIXEL_TYPE_SQUARE:

graphics.fillRect(px - r,py - r,p,p);

break;

}

}

Location: GraphImage.java

Content: 

public void resetConnectPoints(){

  prevSet=false;

}

Location: GraphImage.java

Content: 

private void setAxisLabelsPrecision(DecimalFormat df,int i,int f){

  df.setMinimumIntegerDigits(i);

  df.setMinimumFractionDigits(f);

  df.setMaximumFractionDigits(f);

}

Location: GraphImage.java

Content: 

public void setBackground(Color color){

  graphics.setColor(color);

  graphics.fillRect(0,0,getWidth(),getHeight());

}

Location: GraphImage.java

Content: 

public void setConnectPointsEnabled(boolean connectPointsEnabled){

  this.connectPointsEnabled=connectPointsEnabled;

}

Location: GraphImage.java

Content: 

public void setForeground(Color color){

  pixelcolor=color;

}

Location: GraphImage.java

Content: 

public void setImageQuality(float quality){

  if (quality < 0.0f || quality > 1.0f)   return;

  this.quality=quality;

}

Location: GraphImage.java

Content: 

public void setPixelSize(int pixelsize){

  this.pixelsize=pixelsize;

}

Location: GraphImage.java

Content: 

public void setPixelType(int pixeltype){

  this.pixeltype=pixeltype;

}

Location: GraphImage.java

Content: 

public void setScale(double[] scale){

  if (scale == null || scale.length < this.scale.length)   return;

  System.arraycopy(scale,0,this.scale,0,this.scale.length);

  alphax=(this.scale[MAXX] - this.scale[MINX]) / getWidth();

  alphay=(this.scale[MAXY] - this.scale[MINY]) / getHeight();

}

Location: GraphImage.java

Content: 

public void setXAxisLabelsPrecision(int i,int f){

  setAxisLabelsPrecision(dfx,i,f);

}

Location: GraphImage.java

Content: 

public void setXYAxesLabelsPrecision(int x,int y){

  setAxisLabelsPrecision(dfx,1,x);

  setAxisLabelsPrecision(dfy,1,y);

}

Location: GraphImage.java

Content: 

public void setYAxisLabelsPrecision(int i,int f){

  setAxisLabelsPrecision(dfy,i,f);

}

