Location: TextBlock.java

Content: 

public void addRight(String text){

  int len=text.length();

  int i=0;

  Outer:   while (len - i > width) {

    while (text.charAt(i) == ' ')     if (len - ++i > width)     break Outer;

    int j=text.lastIndexOf(' ');

    while (j > i + width)     j=text.lastIndexOf(' ',j - 1);

    if (j < i) {

      lines.addElement(text.substring(i,i + width));

      i+=width;

    }

 else {

      lines.addElement(justifyRight(text.substring(i,j)));

      i=j + 1;

    }

  }

  lines.addElement(justifyRight(text.substring(i)));

}

Location: TextBlock.java

Content: 

public void add(TextBlock block){

  for (Enumeration<String> e=block.lines.elements(); e.hasMoreElements(); )   lines.addElement(e.nextElement());

  width=Math.max(width,block.width);

}

Location: TextBlock.java

Content: 

public TextBlock join(TextBlock right){

  return join(right,columnSeparator);

}

Location: TextBlock.java

Content: 

public TextBlock join(TextBlock right,String columnSeparator){

  int nleft=size();

  int nright=right.size();

  int n=Math.min(nleft,nright);

  TextBlock combined=new TextBlock(width + columnSeparator.length() + right.width);

  for (int i=0; i < n; i++)   combined.lines.addElement((String)lines.elementAt(i) + columnSeparator + (String)right.lines.elementAt(i));

  if (nleft < nright) {

    for (int i=n; i < nright; i++)     combined.lines.addElement(spaces + columnSeparator + (String)right.lines.elementAt(i));

  }

 else {

    for (int i=n; i < nleft; i++)     combined.lines.addElement((String)lines.elementAt(i) + columnSeparator + spaces);

  }

  return combined;

}

Location: TextBlock.java

Content: 

private String justifyLeft(String s){

  s=s + spaces;

  return s.substring(0,width);

}

Location: TextBlock.java

Content: 

public static String justifyLeft(String s,int width){

  int slen=s.length();

  if (slen < width)   return s + rep(" ",width - slen);

 else   return s.substring(0,width);

}

Location: TextBlock.java

Content: 

private String justifyRight(String s){

  s=spaces + s;

  int slen=s.length();

  return s.substring(slen - width);

}

Location: TextBlock.java

Content: 

public static String justifyRight(String s,int width){

  int slen=s.length();

  if (slen < width)   return rep(" ",width - slen) + s;

 else   return s.substring(slen - width);

}

Location: TextBlock.java

Content: 

private static String rep(String s,int n){

  StringBuffer buf=new StringBuffer();

  for (int i=0; i < n; i++)   buf.append(s);

  return buf.toString();

}

Location: TextBlock.java

Content: 

public TextBlock(int width){

  this.width=width;

  spaces=rep(" ",width);

}

Location: TextBlock.java

Content: 

public TextBlock(int width,String text){

  this(width);

  add(text);

  spaces=rep(" ",width);

}

