Location: RunSequencer.java

Content: 

public int getSeq(){

  int i;

  String[] ls;

  FilenameFilter filter=new ResFilter(resultPrefix,resultSuffix);

  int foo=0;

  int max=0;

  String fooString;

  int fooLen;

  int j;

  boolean skip=false;

  for (ls=f1.list(filter), i=0; ls != null && i < ls.length; i++) {

    fooString=ls[i].substring(resultPrefixLen,resultPrefixLen + 3);

    fooLen=fooString.length();

    skip=false;

    for (j=0; j < fooLen; j++) {

      if (!Character.isDigit(fooString.charAt(j))) {

        skip=true;

      }

    }

    if (!skip) {

      foo=Integer.parseInt(fooString);

      if (foo > max)       max=foo;

    }

  }

  return (max + 1);

}

Location: RunSequencer.java

Content: 

public String getSeqString(){

  return padNumber(getSeq());

}

Location: RunSequencer.java

Content: 

public String padNumber(int n){

  String returnString="" + n;

  int returnStringLength=returnString.length();

  if (returnStringLength == 1) {

    returnString="00" + returnString;

  }

  if (returnStringLength == 2) {

    returnString="0" + returnString;

  }

  return returnString;

}

Location: RunSequencer.java

Content: 

public ResFilter(String prefix,String suffix){

  resultPrefix=prefix;

  resultPrefixLen=resultPrefix.length();

  String resultSuffix=suffix;

  resultSuffixStart=resultPrefixLen + 3;

}

Location: RunSequencer.java

Content: 

public RunSequencer(String dir,String prefix,String suffix){

  f1=new File(dir);

  resultPrefix=prefix;

  resultPrefixLen=resultPrefix.length();

  resultSuffix=suffix;

}

