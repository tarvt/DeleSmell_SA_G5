Location: Result.java

Content: 

private String detailRow(int n){

  StringBuffer buf=new StringBuffer();

  buf.append("  <TD ALIGN=RIGHT>" + Run.transaction[n] + "</TD>\n");

  buf.append("  <TD ALIGN=RIGHT>" + (run[n].count) + "</TD>\n");

  buf.append("  <TD ALIGN=RIGHT>" + Metrics.format(run[n].totaltime) + "</TD>\n");

  buf.append("  <TD ALIGN=RIGHT>" + Metrics.format(run[n].maximumtime) + "</TD>\n");

  return buf.toString();

}

Location: Result.java

Content: 

public double elapsed(){

  return elapsed;

}

Location: Result.java

Content: 

public long end_millis(){

  return end_time_milliseconds;

}

Location: Result.java

Content: 

public double expected_peak(){

  return expected_peak;

}

Location: Result.java

Content: 

public double meas_int(){

  return meas_int;

}

Location: Result.java

Content: 

public long rampdown_millis(){

  return end_rampdown_time_milliseconds;

}

Location: Result.java

Content: 

public long rampup_millis(){

  return start_rampup_time_milliseconds;

}

Location: Result.java

Content: 

public double ramp_up_int(){

  return ramp_up_int;

}

Location: Result.java

Content: 

public Result(String name,ReportProps props){

  this.name=name;

  weight=1;

  referenceTime=props.getDouble("config." + name + ".ref");

  if (maxBarWidth <= 0)   maxBarWidth=props.getDouble("config.report.maxBarWidth");

  Vector<Run> rv=new Vector<Run>(8);

  score=props.getDouble("result." + name + ".company.score");

  warehouses=props.getInt("result." + name + ".warehouses");

  elapsed=props.getDouble("result." + name + ".elapsed_milliseconds");

  meas_int=props.getDouble("input.measurement_seconds");

  jvm_instances=props.getInt("input.jvm_instances");

  expected_peak=props.getDouble("input.expected_peak_warehouse");

  ramp_up_int=props.getDouble("input.ramp_up_seconds");

  heapsize=props.getDouble("result." + name + ".company.heapsize");

  heapused=props.getDouble("result." + name + ".company.heapused");

  if (jvm_instances > 1) {

    start_rampup_time_milliseconds=props.getLong("result." + name + ".start_rampup_time_milliseconds");

    end_rampdown_time_milliseconds=props.getLong("result." + name + ".end_rampdown_time_milliseconds");

    start_time_milliseconds=props.getLong("result." + name + ".start_time_milliseconds");

    end_time_milliseconds=props.getLong("result." + name + ".end_time_milliseconds");

  }

  min_thread_transactions=props.getDouble("result." + name + ".company.min_thread_transactions");

  max_thread_transactions=props.getDouble("result." + name + ".company.max_thread_transactions");

  Run r;

  for (int i=0; i < 6; i++) {

    r=new Run(props,i,17.0,this);

    rv.addElement(r);

  }

  best=2;

  worst=1;

  run=new Run[rv.size()];

  if (run.length == 0) {

    valid=false;

    invalidReason.append(name + " was not run\n");

  }

 else {

    for (int i=0; i < run.length; i++)     run[i]=(Run)rv.elementAt(i);

  }

}

Location: Result.java

Content: 

public double score(){

  return score;

}

Location: Result.java

Content: 

public String shifted_toRow(int whAtPeak){

  StringBuffer buf=new StringBuffer("<TR>\n");

  buf.append("  <TD ALIGN=RIGHT>" + ((int)warehouses()) + "</TD>\n");

  buf.append("  <TD ALIGN=RIGHT>&nbsp</TD>\n");

  buf.append("  <TD ALIGN=RIGHT>&nbsp</TD>\n");

  buf.append("  <TD ALIGN=RIGHT>" + Metrics.format(score()) + "</TD>\n");

  if ((whAtPeak <= (int)warehouses()) && ((int)warehouses() <= 2 * whAtPeak)) {

    buf.append("  <TD ALIGN=RIGHT> *  </TD>\n");

  }

 else {

    buf.append("  <TD ALIGN=RIGHT>  &nbsp   </TD>\n");

  }

  buf.append("</TR>\n");

  return buf.toString();

}

Location: Result.java

Content: 

public long start_millis(){

  return start_time_milliseconds;

}

Location: Result.java

Content: 

public String toDetailRows(){

  StringBuffer buf=new StringBuffer("<TR>\n");

  if (run.length == 0) {

    buf.append("  <TD>" + name + "</TD>\n");

    buf.append("  <TD COLSPAN=8><I>not run</I></TD>\n");

    buf.append("</TABLE>");

  }

 else {

    buf.append("  <TD VALIGN=TOP ALIGN=RIGHT ROWSPAN=" + run.length + ">"+ ((int)warehouses)+ "</TD>\n");

    buf.append("  <TD VALIGN=TOP ALIGN=RIGHT ROWSPAN=" + run.length + ">"+ Metrics.format(score)+ "</TD>\n");

    buf.append("  <TD VALIGN=TOP ALIGN=RIGHT ROWSPAN=" + run.length + ">"+ Metrics.format(heapsize)+ "</TD>\n");

    buf.append("  <TD VALIGN=TOP ALIGN=RIGHT ROWSPAN=" + run.length + ">"+ Metrics.format(heapused)+ "</TD>\n");

    buf.append("  <TD VALIGN=TOP ALIGN=CENTER ROWSPAN=" + run.length + ">"+ Metrics.format((100 * (max_thread_transactions - min_thread_transactions) / max_thread_transactions))+ "% </TD>\n");

    buf.append("  <TD VALIGN=TOP ALIGN=RIGHT ROWSPAN=" + run.length + ">"+ Metrics.format(0.1 * ((elapsed - 1000 * meas_int) / meas_int))+ "</TD>\n");

    buf.append(detailRow(0));

    buf.append("</TR>\n");

    for (int i=1; i < run.length; i++) {

      buf.append("<TR>\n");

      buf.append(detailRow(i));

      buf.append("</TR>\n");

    }

  }

  return buf.toString();

}

Location: Result.java

Content: 

public String toFirstRow(int whAtPeak){

  StringBuffer buf=new StringBuffer("<TR>\n");

  buf.append("  <TD ALIGN=RIGHT>" + ((int)warehouses()) + "</TD>\n");

  buf.append("  <TD ALIGN=RIGHT>" + Metrics.format(score()) + "</TD>\n");

  if ((whAtPeak <= (int)warehouses()) && ((int)warehouses() <= 2 * whAtPeak)) {

    buf.append("  <TD ALIGN=RIGHT> *  </TD>\n");

  }

 else {

    buf.append("  <TD ALIGN=RIGHT>  &nbsp   </TD>\n");

  }

  buf.append("  <TD ALIGN=RIGHT>  &nbsp </TD>\n");

  buf.append("  <TD ALIGN=RIGHT>  &nbsp   </TD>\n");

  buf.append("</TR>\n");

  return buf.toString();

}

Location: Result.java

Content: 

public String toRow(int whAtPeak){

  StringBuffer buf=new StringBuffer("<TR>\n");

  buf.append("  <TD ALIGN=RIGHT>" + ((int)warehouses()) + "</TD>\n");

  buf.append("  <TD ALIGN=RIGHT>" + Metrics.format(score()) + "</TD>\n");

  if ((whAtPeak <= (int)warehouses()) && ((int)warehouses() <= 2 * whAtPeak)) {

    buf.append("  <TD ALIGN=RIGHT> *  </TD>\n");

  }

 else {

    buf.append("  <TD ALIGN=RIGHT>    </TD>\n");

  }

  buf.append("</TR>\n");

  return buf.toString();

}

Location: Result.java

Content: 

public String TwoRow(Result result_2,Metrics metrics_2,int whAtPeak,int whAtPeak2){

  StringBuffer buf=new StringBuffer("<TR>\n");

  buf.append("  <TD ALIGN=RIGHT>" + ((int)warehouses()) + "</TD>\n");

  buf.append("  <TD ALIGN=RIGHT>" + Metrics.format(score()) + "</TD>\n");

  if ((whAtPeak <= (int)warehouses()) && ((int)warehouses() <= 2 * whAtPeak)) {

    buf.append("  <TD ALIGN=RIGHT> *  </TD>\n");

  }

 else {

    buf.append("  <TD ALIGN=RIGHT>  &nbsp   </TD>\n");

  }

  buf.append("  <TD ALIGN=RIGHT>" + Metrics.format(metrics_2.score_at_wh((int)warehouses())) + "</TD>\n");

  if ((whAtPeak2 <= warehouses()) && (warehouses() <= 2 * whAtPeak2)) {

    buf.append("  <TD ALIGN=RIGHT> *  </TD>\n");

  }

 else {

    buf.append("  <TD ALIGN=RIGHT>   &nbsp  </TD>\n");

  }

  buf.append("</TR>\n");

  return buf.toString();

}

Location: Result.java

Content: 

public int warehouses(){

  return warehouses;

}

