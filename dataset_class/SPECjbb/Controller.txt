Location: Controller.java

Content: 

private static boolean initOutputDir(String dir){

  File output_directory_file=new File(dir);

  if (output_directory_file.exists()) {

    if (!output_directory_file.isDirectory()) {

      System.out.println("ERROR:  Specified input.output_directory is not a directory:  " + dir);

      return false;

    }

  }

 else {

    if (!output_directory_file.mkdirs()) {

      System.out.println("ERROR:  Cannot create input.output_directory:  " + dir);

      return false;

    }

  }

  return true;

}

Location: Controller.java

Content: 

private static void readProperties(){

  JBBProperties prop=new JBBProperties(propFile);

  if (!prop.getProps()) {

    System.out.println("ERROR:  Properties File error; please start again");

    return;

  }

  outputDir=prop.getOptionalProperty("input.output_directory");

  if (outputDir == null) {

    outputDir=defaultOutputDir;

  }

  int i=0;

  int seqLen;

  if (prop.sequenceOfWarehouses == null) {

    seqLen=(prop.endingNumberWarehouses - prop.startingNumberWarehouses) / prop.incrementNumberWarehouses + 1;

    sequenceOfWarehouses=new int[seqLen];

    for (int num_wh=prop.startingNumberWarehouses; num_wh <= prop.endingNumberWarehouses; num_wh+=prop.incrementNumberWarehouses) {

      sequenceOfWarehouses[i]=num_wh;

      i++;

    }

  }

 else {

    seqLen=prop.sequenceOfWarehouses.length;

    sequenceOfWarehouses=new int[seqLen];

    sequenceOfWarehouses=prop.sequenceOfWarehouses;

  }

  numInst=prop.jvm_instances;

}

Location: Controller.java

Content: 

private static void setOutputDirectory(){

  RunSequencer subdirRs=new RunSequencer(outputDir,"SPECjbbMultiJVM.",null);

  runOutputSubDir=outputDir + File.separator + "SPECjbbMultiJVM."+ subdirRs.getSeqString();

  if (!initOutputDir(runOutputSubDir)) {

    return;

  }

}

