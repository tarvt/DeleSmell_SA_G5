Location: District.java

Content: 

public synchronized void addNewOrder(NewOrder aNewOrder){

  newOrderTable.put(aNewOrder.getId(),aNewOrder);

}

Location: District.java

Content: 

public synchronized void addOrder(Order anOrder){

  orderTable.put(anOrder.getId(),anOrder);

}

Location: District.java

Content: 

public District(short inWarehouseId,byte inDistrictId){

  districtId=inDistrictId;

  warehouseId=inWarehouseId;

  address=new Address();

  nextOrder=1;

  orderTable=Infrastructure.createSortedStorage();

  newOrderTable=Infrastructure.createSortedStorage();

}

Location: District.java

Content: 

public Address getAddress(){

  return address;

}

Location: District.java

Content: 

public synchronized JBBDataStorage getOrderTable(){

  return orderTable;

}

Location: District.java

Content: 

public BigDecimal getTaxRate(){

  return taxRate;

}

Location: District.java

Content: 

public synchronized int lastOrderId(){

  int temp=nextOrder - 1;

  return temp;

}

Location: District.java

Content: 

public synchronized Iterator newOrderIter(){

  return (Iterator)newOrderTable.elements();

}

Location: District.java

Content: 

public synchronized int nextOrderId(){

  int temp=nextOrder++;

  return temp;

}

Location: District.java

Content: 

public synchronized void receivePayment(BigDecimal paymentAmount){

  ytd=ytd.add(paymentAmount);

}

Location: District.java

Content: 

public synchronized NewOrder removeFirstNewOrder(){

  NewOrder temp=null;

  temp=(NewOrder)newOrderTable.removeFirstElem();

  return temp;

}

Location: District.java

Content: 

public synchronized NewOrder removeNewOrder(Object key){

  NewOrder temp=(NewOrder)newOrderTable.get(key);

  return (NewOrder)newOrderTable.remove(key);

}

Location: District.java

Content: 

public synchronized void removeOldestOrder(){

  oldestOrder++;

  boolean removed=orderTable.deleteFirstEntities();

  if (!removed) {

    JBButil.getLog().warning("District.removeOldestOrder failed for orderId=" + oldestOrder + ", districtId="+ districtId+ ", warehouseId="+ warehouseId);

  }

}

Location: District.java

Content: 

public synchronized void removeOldNewOrders(int minNewOrders){

  int size=newOrderTable.size();

  boolean removed=newOrderTable.deleteFirstEntities(size - minNewOrders);

  if (!removed) {

    JBButil.getLog().warning("District.removeOldNewOrders failed for " + ", districtId=" + districtId + ", warehouseId="+ warehouseId+ ", size="+ newOrderTable.size());

  }

  if (JBButil.getLog().isLoggable(Level.FINEST)) {

    Logger log=JBButil.getLog();

    log.finest("SteadyState trimmed newOrderTable to " + newOrderTable.size() + " elements, from "+ size+ " elements");

    log.finest("  for districtId=" + districtId + ", warehouseId="+ warehouseId);

  }

}

Location: District.java

Content: 

public synchronized void removeOldOrders(int minOrders){

  int size=orderTable.size();

  boolean removed=orderTable.deleteFirstEntities(size - minOrders);

  if (removed) {

    oldestOrder+=size - minOrders;

  }

 else {

    JBButil.getLog().warning("District.removeOldOrders failed for " + ", districtId=" + districtId + ", warehouseId="+ warehouseId+ ", size="+ orderTable.size());

  }

  if (JBButil.getLog().isLoggable(Level.FINEST)) {

    Logger log=JBButil.getLog();

    log.finest("SteadyState trimmed orderTable to " + (orderTable.size()) + " elements, from "+ size+ " elements");

    log.finest("  for districtId=" + districtId + " warehouseId="+ warehouseId);

  }

}

Location: District.java

Content: 

public synchronized Order retrieveOrder(Order order){

  return (Order)orderTable.get(order.getId());

}

Location: District.java

Content: 

public synchronized void setUsingRandom(){

  name=new String(JBButil.create_random_a_string(6,10,warehouseId));

  address.setUsingRandom(warehouseId);

  float temp=JBButil.create_random_float_val_return(0.0f,0.2000f,0.0001f,warehouseId);

  taxRate=new BigDecimal(temp).setScale(4,BigDecimal.ROUND_HALF_UP);

  ytd=BigDecimal.valueOf(3000000L,2);

}

