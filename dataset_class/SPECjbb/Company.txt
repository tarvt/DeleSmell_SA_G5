Location: Company.java

Content: 

public synchronized void addWarehouseThread(TransactionManager tm){

  warehouseThreads.add(tm);

}

Location: Company.java

Content: 

public long buildUniqueCustomerKey(short warehouseId,byte districtId,short customerId){

  long key=warehouseId;

  key=key << 12;

  key+=districtId;

  key=key << 40;

  key+=customerId;

  return key;

}

Location: Company.java

Content: 

public Company(){

  JBButil.random_init(warehouseCapacity);

  System.out.println("Constructing the company now   Hang....on");

  System.out.println("");

  warehouseContainers=new Object[warehouseCapacity];

  warehouseTable=new Object[warehouseCapacity];

  customerTable=Infrastructure.createStorage();

  lastNameCustomerTable=Infrastructure.createSortedStorage();

  itemTable=Infrastructure.createStorage();

  timerdataTable=new Object[warehouseCapacity];

  companyTimerData=new TimerData();

  MaxWarehouses=0;

  initThreadsStateChange=new Object();

  initThreadsCountMonitor=new Object();

  initThreadsCount=0;

  threadsDoneCountMonitor=new Object();

  threadsDoneCount=0;

  stopThreadsCountMonitor=new Object();

  stopThreadsCount=0;

  warehouseThreads=new ArrayList(warehouseCapacity);

}

Location: Company.java

Content: 

public void displayResultTotals(boolean showWarehouseDetail){

  short warehouseId;

  TimerData warehouseTimerData;

synchronized (initThreadsStateChange) {

    while (initThreadsCount != MaxWarehouses) {

      try {

        initThreadsStateChange.wait();

      }

 catch (      InterruptedException e) {

      }

    }

  }

  if (JBBmain.multiJVMMode) {

    System.out.println(JBBmain.instanceId + ":READY");

    JBBmain.socOut.println(JBBmain.instanceId + ":READY");

    JBBmain.socOut.flush();

    String mesg="NULL";

    String needMsg=JBBmain.instanceId + ":START";

    try {

      while (!mesg.matches(needMsg))       mesg=JBBmain.socIn.readLine();

    }

 catch (    java.io.IOException excep) {

      JBButil.getLog().log(Level.WARNING,excep + ": Unable to read from socket",excep);

      System.exit(1);

    }

    String messageReceived=">>>>>>>> Got Message: " + mesg;

    JBButil.getLog().info(messageReceived);

    System.out.println(messageReceived);

  }

  setrunMode(runModes.RAMP_UP);

synchronized (initThreadsCountMonitor) {

    initThreadsCountMonitor.notifyAll();

  }

  String msg;

  long start_time=0;

  long end_time=0;

  long start_rampup_time=0;

  long end_rampdown_time=0;

  DecimalFormat df=new DecimalFormat("#####.##");

  long tmpTime=0;

  if (JBBmain.multiJVMMode) {

    setrunMode(runModes.MULTI_RAMP);

    start_rampup_time=System.currentTimeMillis();

    tmpTime=(long)per_jvm_warehouse_rampup;

    msg="User Thread Multi-JVM Rampup padding began " + new Date().toString() + " for "+ tmpTime+ " seconds";

    JBButil.getLog().info(msg);

    System.out.println(msg);

    JBButil.SecondsToSleep((int)tmpTime);

  }

  if (rampup_time > 0) {

    msg="User Thread Rampup began " + new Date().toString() + " for "+ df.format(rampup_time / 60.)+ " minutes";

    JBButil.getLog().info(msg);

    System.out.println(msg);

    JBButil.SecondsToSleep((int)rampup_time);

  }

  if (measurement_time > 0) {

    msg="Timing Measurement began " + new Date().toString() + " for "+ df.format(measurement_time / 60.)+ " minutes";

    setrunMode(runModes.RECORDING);

    start_time=System.currentTimeMillis();

    JBButil.getLog().info(msg);

    System.out.println(msg);

    JBButil.SecondsToSleep((int)measurement_time);

  }

  end_time=System.currentTimeMillis();

  msg="Timing Measurement ended " + new Date().toString();

  JBButil.getLog().info(msg);

  System.out.println(msg);

  if (JBBmain.multiJVMMode) {

    setrunMode(runModes.MULTI_RAMP);

    tmpTime=(long)per_jvm_warehouse_rampdown;

    msg="User Thread Multi-JVM Rampdown padding began " + new Date().toString() + " for "+ tmpTime+ " seconds";

    JBButil.getLog().info(msg);

    System.out.println(msg);

    JBButil.SecondsToSleep((int)tmpTime);

    end_rampdown_time=System.currentTimeMillis();

  }

  setrunMode(runModes.RAMP_DOWN);

  elapsed_time=end_time - start_time;

  System.out.println("");

synchronized (threadsDoneCountMonitor) {

    while (threadsDoneCount != MaxWarehouses) {

      try {

        threadsDoneCountMonitor.wait();

      }

 catch (      InterruptedException e) {

      }

    }

  }

  setrunMode(runModes.STOP);

synchronized (stopThreadsCountMonitor) {

    while (stopThreadsCount != MaxWarehouses) {

      try {

        stopThreadsCountMonitor.wait();

      }

 catch (      InterruptedException e) {

      }

    }

  }

  outPropFile.println(propPrefix + "warehouses=" + MaxWarehouses);

  if (JBBmain.multiJVMMode) {

    outPropFile.println(propPrefix + "start_rampup_time_milliseconds=" + start_rampup_time);

    outPropFile.println(propPrefix + "end_rampdown_time_milliseconds=" + end_rampdown_time);

  }

  outPropFile.println(propPrefix + "start_time_milliseconds=" + start_time);

  outPropFile.println(propPrefix + "end_time_milliseconds=" + end_time);

  outPropFile.println(propPrefix + "elapsed_milliseconds=" + elapsed_time);

  System.out.println("");

  int total_warehouse_trans=0;

  long min_transaction_count=Long.MAX_VALUE;

  long max_transaction_count=Long.MIN_VALUE;

  for (warehouseId=1; warehouseId <= MaxWarehouses; warehouseId++) {

    warehouseTimerData=getTimerDataPtr(warehouseId);

    warehouseTimerData.calculateResponseTimeStats();

    if (showWarehouseDetail)     warehouseTimerData.propResults(propPrefix + "warehouse_" + warehouseId+ ".",outPropFile);

    total_warehouse_trans=0;

    for (int txntype=0; txntype < Transaction.maxTxnTypes; txntype++) {

      total_warehouse_trans+=warehouseTimerData.getTransactionCount(txntype);

    }

    if (total_warehouse_trans < min_transaction_count) {

      min_transaction_count=total_warehouse_trans;

    }

    if (total_warehouse_trans > max_transaction_count) {

      max_transaction_count=total_warehouse_trans;

    }

  }

  System.out.println("Calculating results");

  companyTimerData.calculateResponseTimeStats();

  companyTimerData.displayThreadResults();

  long diff=max_transaction_count - min_transaction_count;

  float diff_pct=100 * (float)diff / (float)max_transaction_count;

  System.out.println("");

  System.out.println("Minimum transactions by a warehouse = " + min_transaction_count);

  System.out.println("Maximum transactions by a warehouse = " + max_transaction_count);

  System.out.println("Difference (thread spread) = " + diff + " ("+ df.format(diff_pct)+ "%)");

  System.out.println("");

  companyTimerData.displayResults(("COMPANY with " + MaxWarehouses + " warehouses "),JBButil.currentTotalMem(),JBButil.currentFreeMem());

  companyTimerData.propResults(propPrefix + "company.",outPropFile,JBButil.currentTotalMem(),JBButil.currentFreeMem());

  companyTimerData.propThreadResults(propPrefix + "company.",outPropFile);

  outPropFile.println(propPrefix + "company.min_warehouse_transactions=" + min_transaction_count);

  outPropFile.println(propPrefix + "company.max_warehouse_transactions=" + max_transaction_count);

  if (Transaction.steadyStateMem) {

    hongshuai();

    short warehouseId;

    Warehouse warehousePtr;

    int initialOrders=this.getInitialOrders();

    int initialNewOrders=this.getInitialNewOrders();

    for (warehouseId=1; warehouseId <= MaxWarehouses; warehouseId++) {

      warehousePtr=getWarehousePtr(warehouseId,false);

      warehousePtr.trimOrdersForSteadyState(initialOrders,initialNewOrders);

    }

  }

  setrunMode(runModes.DEFAULT_MODE);

}

Location: Company.java

Content: 

public synchronized void dumpCustomerTable(){

}

Location: Company.java

Content: 

public synchronized void dumpItemTable(){

}

Location: Company.java

Content: 

public synchronized void dumpWarehouseTable(){

}

Location: Company.java

Content: 

public Customer getCustomerByLastName(short warehouseId,byte districtId,String last_name){

  String custKey=Integer.toString((int)warehouseId) + "_" + Integer.toString((int)districtId)+ "_"+ last_name;

  String lastCustKey=custKey + "_~";

  Long custId=(Long)lastNameCustomerTable.getMedianValue(custKey,lastCustKey);

  return (Customer)customerTable.get(custId);

}

Location: Company.java

Content: 

public Customer getCustomer(long customerId,boolean lockflag){

  Customer result;

  result=(Customer)customerTable.get(customerId);

  if (JBButil.getLog().isLoggable(Level.FINEST)) {

    Logger log=JBButil.getLog();

    log.finest("Company::getCustomer");

    log.finest("  customerId=" + customerId);

    log.finest("  Customer=" + result);

  }

  ;

  return result;

}

Location: Company.java

Content: 

long getElapsedTime(){

  return elapsed_time;

}

Location: Company.java

Content: 

public int getInitialNewOrders(){

  return InitialNewOrders;

}

Location: Company.java

Content: 

public int getInitialOrders(){

  return InitialOrders;

}

Location: Company.java

Content: 

public int getMaxCustomersPerDistrict(){

  return MaxCustomersPerDistrict;

}

Location: Company.java

Content: 

public short getMaxDistrictsPerWarehouse(){

  return MaxDistrictsPerWarehouse;

}

Location: Company.java

Content: 

public int getMaxItems(){

  return MaxItems;

}

Location: Company.java

Content: 

public short getMaxWarehouses(){

  return MaxWarehouses;

}

Location: Company.java

Content: 

PrintStream getOutDeliveriesFile(){

  return outDeliveriesFile;

}

Location: Company.java

Content: 

public synchronized TimerData getTimerDataPtr(short warehouseId){

  TimerData temp;

  if (warehouseId == 0)   temp=companyTimerData;

 else   temp=(TimerData)timerdataTable[warehouseId];

  return temp;

}

Location: Company.java

Content: 

public Warehouse getWarehousePtr(short warehouseId,boolean lockFlag){

  Warehouse result;

  result=(Warehouse)warehouseTable[warehouseId];

  return result;

}

Location: Company.java

Content: 

public boolean isCustomer(long customerId){

  return customerTable.containsKey(customerId);

}

Location: Company.java

Content: 

public synchronized void loadCustomerTable(){

  short customerId;

  long customers_loaded=0;

  for (short warehouseId=(short)(PreviousMaxWarehouses + 1); warehouseId <= MaxWarehouses; ++warehouseId) {

    for (byte districtId=1; districtId <= MaxDistrictsPerWarehouse; ++districtId) {

      for (customerId=1; customerId <= MaxCustomersPerDistrict; ++customerId) {

        Customer newCustomer=new Customer();

        newCustomer.setUsingRandom(customerId,warehouseId,districtId);

        long uniqueCustomerNumber=buildUniqueCustomerKey(warehouseId,districtId,customerId);

        customerTable.put(uniqueCustomerNumber,newCustomer);

        String custNameKey=Integer.toString((int)warehouseId) + "_" + Integer.toString((int)districtId)+ "_"+ newCustomer.getLastName()+ "_"+ Integer.toString((int)customerId);

        lastNameCustomerTable.put(custNameKey,uniqueCustomerNumber);

        if (JBButil.getLog().isLoggable(Level.FINEST)) {

          Logger log=JBButil.getLog();

          log.finest("Company::loadCustomerTable");

          log.finest("  newCustomer=" + newCustomer);

          log.finest("  customerId=" + customerId);

          log.finest("  districtId=" + districtId);

          log.finest("  warehouseId=" + warehouseId);

          log.finest("  uniqueCustomerNumber=" + uniqueCustomerNumber);

          log.finest("  custNameKey=" + custNameKey);

        }

      }

      customers_loaded+=customerId - 1;

    }

  }

}

Location: Company.java

Content: 

public synchronized void loadInitialOrders(){

  for (short warehouseId=(short)(PreviousMaxWarehouses + 1); warehouseId <= MaxWarehouses; ++warehouseId) {

    NewOrderTransaction newOrderTransaction=new NewOrderTransaction(this,warehouseId);

    for (byte districtId=1; districtId <= MaxDistrictsPerWarehouse; ++districtId) {

      for (short customerId=1; customerId <= MaxCustomersPerDistrict; ++customerId) {

        newOrderTransaction.init();

        newOrderTransaction.setDistrictandCustomer(districtId,customerId);

        newOrderTransaction.processPreloadedOrders();

      }

    }

  }

}

Location: Company.java

Content: 

public synchronized void loadItemTable(){

  for (int i=1; i <= MaxItems; ++i) {

    Item anItem=new Item();

    anItem.setUsingRandom(i);

    itemTable.put(i,anItem);

  }

}

Location: Company.java

Content: 

public synchronized void loadWarehouseHistoryTable(){

  for (short i=(short)(PreviousMaxWarehouses + 1); i <= MaxWarehouses; ++i) {

    ((Warehouse)warehouseTable[i]).loadHistoryTable();

  }

}

Location: Company.java

Content: 

public synchronized void loadWarehouseTable(){

  for (short i=(short)(PreviousMaxWarehouses + 1); i <= MaxWarehouses; ++i) {

    Warehouse newWarehouse=new Warehouse();

    newWarehouse.initWarehouse(this,itemTable,i);

    newWarehouse.setUsingRandom(i);

    warehouseTable[i]=newWarehouse;

    TimerData newTimerData=new TimerData();

    timerdataTable[i]=newTimerData;

  }

}

Location: Company.java

Content: 

public synchronized void prepareForStart(){

  initThreadsCount=0;

  threadsDoneCount=0;

  stopThreadsCount=0;

  mode=runModes.DEFAULT_MODE;

  warehouseThreads.clear();

}

Location: Company.java

Content: 

public synchronized void primeWithDummyData(short number_of_warehouses,int choice){

switch (choice) {

case 0:

{

      PreviousMaxWarehouses=MaxWarehouses;

      if (PreviousMaxWarehouses == 0)       MaxWarehouses=number_of_warehouses;

 else       ++MaxWarehouses;

      String msg="Loading Warehouse " + MaxWarehouses + "...";

      System.out.println(msg);

      JBButil.getLog().info(msg);

      if (PreviousMaxWarehouses == 0) {

        loadItemTable();

      }

      loadWarehouseTable();

      loadCustomerTable();

      loadWarehouseHistoryTable();

      loadInitialOrders();

      System.out.println("");

      System.out.println("");

    }

  break;

case 1:

{

  PreviousMaxWarehouses=MaxWarehouses;

  if (PreviousMaxWarehouses == 0)   MaxWarehouses=number_of_warehouses;

 else   ++MaxWarehouses;

  String msg="Loading Warehouse " + MaxWarehouses + "...";

  System.out.println(msg);

  JBButil.getLog().info(msg);

  if (PreviousMaxWarehouses == 0) {

    loadItemTable();

  }

}

break;

case 2:

{

loadWarehouseTable();

}

break;

case 3:

{

hongshuai();

short customerId;

long customers_loaded=0;

for (short warehouseId=(short)(PreviousMaxWarehouses + 1); warehouseId <= MaxWarehouses; ++warehouseId) {

for (byte districtId=1; districtId <= MaxDistrictsPerWarehouse; ++districtId) {

for (customerId=1; customerId <= MaxCustomersPerDistrict; ++customerId) {

Customer newCustomer=new Customer();

newCustomer.setUsingRandom(customerId,warehouseId,districtId);

long uniqueCustomerNumber=buildUniqueCustomerKey(warehouseId,districtId,customerId);

customerTable.put(uniqueCustomerNumber,newCustomer);

String custNameKey=Integer.toString((int)warehouseId) + "_" + Integer.toString((int)districtId)+ "_"+ newCustomer.getLastName()+ "_"+ Integer.toString((int)customerId);

lastNameCustomerTable.put(custNameKey,uniqueCustomerNumber);

if (JBButil.getLog().isLoggable(Level.FINEST)) {

  Logger log=JBButil.getLog();

  log.finest("Company::loadCustomerTable");

  log.finest("  newCustomer=" + newCustomer);

  log.finest("  customerId=" + customerId);

  log.finest("  districtId=" + districtId);

  log.finest("  warehouseId=" + warehouseId);

  log.finest("  uniqueCustomerNumber=" + uniqueCustomerNumber);

  log.finest("  custNameKey=" + custNameKey);

}

}

customers_loaded+=customerId - 1;

}

}

}

break;

case 4:

{

}

break;

case 5:

{

loadInitialOrders();

System.out.println("");

System.out.println("");

}

break;

}

}

Location: Company.java

Content: 

public synchronized void setJVMInstanceValues(long instanceCount){

  this.jvm_instances=instanceCount;

}

Location: Company.java

Content: 

public synchronized void setMultiJVMRampingValues(float rampup,float rampdown){

  this.per_jvm_warehouse_rampup=rampup;

  this.per_jvm_warehouse_rampdown=rampdown;

}

Location: Company.java

Content: 

static void setOutputs(PrintStream oPropFile,PrintStream oDeliveriesFile){

  outPropFile=oPropFile;

  outDeliveriesFile=oDeliveriesFile;

}

Location: Company.java

Content: 

public synchronized void setPopulationValues(int population_base){

  if (population_base > 0) {

    MaxDistrictsPerWarehouse=10;

    MaxCustomersPerDistrict=population_base;

    if (JBBmain.overrideItemTableSize > 0) {

      MaxItems=JBBmain.overrideItemTableSize;

    }

 else {

      MaxItems=20000;

    }

  }

 else {

    MaxDistrictsPerWarehouse=5;

    MaxCustomersPerDistrict=30;

    MaxItems=100;

  }

  MaxStock=MaxItems;

  InitialOrders=MaxCustomersPerDistrict;

  InitialNewOrders=(short)(MaxCustomersPerDistrict * 0.30);

  InitialHistories=MaxCustomersPerDistrict;

}

Location: Company.java

Content: 

public synchronized void setPopulationValues(int population_base,int itemtable_size){

  if (population_base > 0) {

    MaxDistrictsPerWarehouse=10;

    MaxCustomersPerDistrict=population_base;

    MaxItems=itemtable_size;

  }

 else {

    MaxDistrictsPerWarehouse=5;

    MaxCustomersPerDistrict=30;

    MaxItems=100;

  }

  MaxStock=MaxItems;

  InitialOrders=MaxCustomersPerDistrict;

  InitialNewOrders=(short)(MaxCustomersPerDistrict * 0.30);

  InitialHistories=MaxCustomersPerDistrict;

}

Location: Company.java

Content: 

void setPropOutputPrefix(String s){

  propPrefix=s;

}

Location: Company.java

Content: 

public void setrunMode(runModes inmode){

  TransactionManager tm;

  for (int i=0; i < warehouseThreads.size(); i++) {

    tm=(TransactionManager)warehouseThreads.get(i);

    tm.setrunMode(inmode);

  }

  mode=inmode;

}

Location: Company.java

Content: 

public synchronized void startAutomated(short inWarehouseId,int rampup_time,int measurement_time){

  companyTimerData.zeroTimerData();

  this.rampup_time=rampup_time;

  this.measurement_time=measurement_time;

  TimerData warehouseTimerData=getTimerDataPtr(inWarehouseId);

  warehouseTimerData.zeroTimerData();

  warehouseTimerData.setRampUpTime(rampup_time);

  warehouseTimerData.setMeasurementTime(measurement_time);

}

Location: Company.java

Content: 

public synchronized void startValidation(short inWarehouseId){

  companyTimerData.zeroTimerData();

  TimerData warehouseTimerData=getTimerDataPtr(inWarehouseId);

  warehouseTimerData.zeroTimerData();

}

