Location: Order.java

Content: 

public synchronized void dateOrderlines(Date orderdate){

  int i;

  Orderline orderline;

  if (JBButil.getLog().isLoggable(Level.FINEST)) {

    JBButil.getLog().finest("Order::dateOrderlines  orderlineList=" + orderlineList + " orderlineCount="+ orderLineCount);

  }

  for (i=0; i < orderLineCount; i++) {

    orderline=orderlineList[i];

    if (JBButil.getLog().isLoggable(Level.FINEST)) {

      JBButil.getLog().finest(" orderline=" + orderline + " orderline#="+ i);

    }

    ;

    orderline.setDeliveryTime(orderdate);

  }

}

Location: Order.java

Content: 

public synchronized short getCarrierId(){

  short temp=carrierId;

  return temp;

}

Location: Order.java

Content: 

public synchronized Customer getCustomerPtr(){

  Customer temp=customerPtr;

  return temp;

}

Location: Order.java

Content: 

public synchronized Date getEntryTime(){

  Date temp=entryDateTime;

  return temp;

}

Location: Order.java

Content: 

public synchronized int getId(){

  int temp=orderId;

  return temp;

}

Location: Order.java

Content: 

public synchronized short getOrderlineCount(){

  short temp=orderLineCount;

  return temp;

}

Location: Order.java

Content: 

public synchronized Orderline[] getOrderlineList(){

  if (JBButil.getLog().isLoggable(Level.FINEST)) {

    JBButil.getLog().finest("Order::getOrderlineList  orderlineList=" + orderlineList);

  }

  return orderlineList;

}

Location: Order.java

Content: 

public synchronized BigDecimal getTotalAmount(){

  BigDecimal temp=totalAmount;

  return temp;

}

Location: Order.java

Content: 

public void initOrder(Company inCompany,int inOrderId,byte inDistrictId,short inWarehouseId,short inCustomerId,Customer inCustomerPtr,BigDecimal inDistrictTaxRate,BigDecimal inWarehouseTaxRate,BigDecimal inCustomerDiscountRate){

  company=inCompany;

  orderId=inOrderId;

  districtId=inDistrictId;

  warehouseId=inWarehouseId;

  customerId=inCustomerId;

  customerPtr=inCustomerPtr;

  orderLineCount=0;

  orderlineList=new Orderline[(Transaction.aveOrderlines + 10)];

  if (JBButil.getLog().isLoggable(Level.FINEST)) {

    JBButil.getLog().finest("Order::initOrder  orderlineList=" + orderlineList);

  }

  entryDateTime=new Date();

  carrierId=0;

  allLocal=true;

  districtTax=inDistrictTaxRate;

  warehouseTax=inWarehouseTaxRate;

  customerDiscountRate=inCustomerDiscountRate;

}

Location: Order.java

Content: 

public Order(Company inCompany,int inOrderId,byte inDistrictId,short inWarehouseId,short inCustomerId,Customer inCustomerPtr,BigDecimal inDistrictTaxRate,BigDecimal inWarehouseTaxRate,BigDecimal inCustomerDiscountRate){

  this.initOrder(inCompany,inOrderId,inDistrictId,inWarehouseId,inCustomerId,inCustomerPtr,inDistrictTaxRate,inWarehouseTaxRate,inCustomerDiscountRate);

}

Location: Order.java

Content: 

public synchronized boolean processLines(Warehouse inWarehousePtr,short number_of_orderlines,boolean rollback){

  short supplyWarehouseId;

  boolean processLinesResult=true;

  BigDecimal amount=BigDecimal.valueOf(0,2);

  for (short LineNumber=1; LineNumber <= number_of_orderlines; ++LineNumber) {

    Orderline newOrderline=new Orderline(company,orderId,districtId,warehouseId,LineNumber,number_of_orderlines,rollback);

    supplyWarehouseId=warehouseId;

    if ((JBButil.random(1,100,warehouseId) == 1) && (company.getMaxWarehouses() > 1)) {

      while (supplyWarehouseId == warehouseId) {

        supplyWarehouseId=(short)JBButil.random(1,company.getMaxWarehouses(),warehouseId);

      }

      allLocal=false;

    }

    newOrderline.setSupplyWarehouse(supplyWarehouseId);

    if (newOrderline.validateAndProcess(inWarehousePtr)) {

      amount=amount.add(newOrderline.getAmount());

      orderlineList[orderLineCount]=newOrderline;

      orderLineCount++;

    }

 else {

      processLinesResult=false;

    }

  }

  BigDecimal subtotal=amount.multiply((BigDecimal.valueOf(1,0)).subtract(customerDiscountRate)).setScale(2,BigDecimal.ROUND_HALF_UP);

  totalAmount=subtotal.multiply((BigDecimal.valueOf(1,0)).add(warehouseTax).add(districtTax)).setScale(2,BigDecimal.ROUND_HALF_UP);

  return processLinesResult;

}

Location: Order.java

Content: 

public synchronized void setAllLocal(boolean inAllLocal){

  allLocal=inAllLocal;

}

Location: Order.java

Content: 

public synchronized void setCarrierId(short inCarrierId){

  carrierId=inCarrierId;

}

Location: Order.java

Content: 

public synchronized void setEntryDateTime(Date inEntryDateTime){

  entryDateTime=inEntryDateTime;

}

