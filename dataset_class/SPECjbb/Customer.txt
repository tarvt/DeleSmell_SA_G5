Location: Customer.java

Content: 

public synchronized void adjustBalance(BigDecimal amount){

  balance=balance.add(amount);

}

Location: Customer.java

Content: 

public Customer(){

  address=new Address();

  since=new Date();

  creditLimit=BigDecimal.valueOf(0,2);

  balance=BigDecimal.valueOf(0,2);

  ytd=BigDecimal.valueOf(0,2);

  paymentCount=0;

  deliveryCount=0;

  lastOrder=null;

}

Location: Customer.java

Content: 

public synchronized BigDecimal getBalance(){

  BigDecimal temp=balance;

  return temp;

}

Location: Customer.java

Content: 

public synchronized BigDecimal getCreditLimit(){

  return creditLimit;

}

Location: Customer.java

Content: 

public String getCreditStatus(){

  String result;

  if (credit1 == 'G')   result=good_credit;

 else   result=bad_credit;

  return result;

}

Location: Customer.java

Content: 

public synchronized String getCustomerDataParts(){

  String temp=data;

  return temp;

}

Location: Customer.java

Content: 

public BigDecimal getDiscountRate(){

  return discount;

}

Location: Customer.java

Content: 

public byte getDistrictId(){

  return districtId;

}

Location: Customer.java

Content: 

public String getFirstName(){

  return firstName;

}

Location: Customer.java

Content: 

public String getLastName(){

  return lastName;

}

Location: Customer.java

Content: 

public synchronized Order getLatestOrder(){

  Order order=lastOrder;

  return order;

}

Location: Customer.java

Content: 

public String getMiddleName(){

  return middleName;

}

Location: Customer.java

Content: 

public String getPhone(){

  return phone;

}

Location: Customer.java

Content: 

public Date getSince(){

  return since;

}

Location: Customer.java

Content: 

public short getWarehouseId(){

  return warehouseId;

}

Location: Customer.java

Content: 

public synchronized void increaseYTD(BigDecimal amount){

  ytd=ytd.add(amount);

}

Location: Customer.java

Content: 

public synchronized void incrementDeliveryCount(){

  ++deliveryCount;

}

Location: Customer.java

Content: 

public synchronized void incrementPaymentCount(){

  ++paymentCount;

}

Location: Customer.java

Content: 

public synchronized void setUsingRandom(short inCustomerId,short inWarehouseId,byte inDistrictId){

  customerId=inCustomerId;

  districtId=inDistrictId;

  warehouseId=inWarehouseId;

  lastName=JBButil.create_random_last_name(inCustomerId,warehouseId);

  firstName=new String(JBButil.create_random_a_string(8,16,warehouseId));

  middleName=new String("OE");

  address.setUsingRandom(warehouseId);

  phone=new String(JBButil.create_random_n_string(16,16,warehouseId));

  if (JBButil.random(1,10,warehouseId) > 1) {

    credit1='G';

    credit2='C';

  }

 else {

    credit1='B';

    credit2='C';

  }

  ;

  creditLimit=BigDecimal.valueOf(5000000,2);

  float temp=JBButil.create_random_float_val_return(0.0f,0.5000f,0.0001f,warehouseId);

  discount=new BigDecimal(temp).setScale(4,BigDecimal.ROUND_HALF_UP);

  balance=BigDecimal.valueOf(-1000L,2);

  ytd=BigDecimal.valueOf(1000L,2);

  paymentCount=1;

  deliveryCount=0;

  data=new String(JBButil.create_random_a_string(300,500,warehouseId));

}

Location: Customer.java

Content: 

public synchronized void updateCustomerData(String newData){

  String oldData;

  oldData=data;

  if ((oldData.length() + newData.length()) <= 500) {

    data=new String((newData + data));

  }

 else {

    String shiftData=oldData.substring(0,(500 - newData.length()));

    data=new String((newData + shiftData));

  }

}

