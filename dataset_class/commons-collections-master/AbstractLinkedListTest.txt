Location: AbstractLinkedListTest.java

Content: 

public AbstractLinkedListTest(final String testName){

  super(testName);

}

Location: AbstractLinkedListTest.java

Content: 

protected void checkNodes(){

  final AbstractLinkedList<E> list=getCollection();

  for (int i=0; i < list.size; i++) {

    assertEquals(list.getNode(i,false).next,list.getNode(i + 1,true));

    if (i < list.size - 1) {

      assertEquals(list.getNode(i + 1,false).previous,list.getNode(i,false));

    }

  }

}

Location: AbstractLinkedListTest.java

Content: 

/** 

 * Returns the  {@link #confirmed} field cast to a {@link LinkedList}.

 * @return the confirmed field as a List

 */

protected LinkedList<T> getConfirmedLinkedList(){

  return (LinkedList<T>)getConfirmed();

}

Location: AbstractLinkedListTest.java

Content: 

@SuppressWarnings("unchecked") public void testAddNodeAfter(){

  resetEmpty();

  final AbstractLinkedList<E> list=getCollection();

  if (!isAddSupported()) {

    try {

      list.addFirst(null);

    }

 catch (    final UnsupportedOperationException ex) {

    }

  }

  list.addFirst((E)"value1");

  list.addNodeAfter(list.getNode(0,false),(E)"value2");

  assertEquals("value1",list.getFirst());

  assertEquals("value2",list.getLast());

  list.removeFirst();

  checkNodes();

  list.addNodeAfter(list.getNode(0,false),(E)"value3");

  checkNodes();

  assertEquals("value2",list.getFirst());

  assertEquals("value3",list.getLast());

  list.addNodeAfter(list.getNode(0,false),(E)"value4");

  checkNodes();

  assertEquals("value2",list.getFirst());

  assertEquals("value3",list.getLast());

  assertEquals("value4",list.get(1));

  list.addNodeAfter(list.getNode(2,false),(E)"value5");

  checkNodes();

  assertEquals("value2",list.getFirst());

  assertEquals("value4",list.get(1));

  assertEquals("value3",list.get(2));

  assertEquals("value5",list.getLast());

}

Location: AbstractLinkedListTest.java

Content: 

@SuppressWarnings("unchecked") public void testGetNode(){

  resetEmpty();

  final AbstractLinkedList<E> list=getCollection();

  assertEquals(list.getNode(0,true).previous,list.getNode(0,true).next);

  try {

    list.getNode(0,false);

    fail("Expecting IndexOutOfBoundsException.");

  }

 catch (  final IndexOutOfBoundsException ex) {

  }

  list.addAll(Arrays.asList((E[])new String[]{"value1","value2"}));

  checkNodes();

  list.addFirst((E)"value0");

  checkNodes();

  list.removeNode(list.getNode(1,false));

  checkNodes();

  try {

    list.getNode(2,false);

    fail("Expecting IndexOutOfBoundsException.");

  }

 catch (  final IndexOutOfBoundsException ex) {

  }

  try {

    list.getNode(-1,false);

    fail("Expecting IndexOutOfBoundsException.");

  }

 catch (  final IndexOutOfBoundsException ex) {

  }

  try {

    list.getNode(3,true);

    fail("Expecting IndexOutOfBoundsException.");

  }

 catch (  final IndexOutOfBoundsException ex) {

  }

}

Location: AbstractLinkedListTest.java

Content: 

/** 

 * Tests  {@link LinkedList#addFirst(Object)}.

 */

@SuppressWarnings("unchecked") public void testLinkedListAddFirst(){

  if (!isAddSupported()) {

    return;

  }

  final T o=(T)"hello";

  resetEmpty();

  getCollection().addFirst(o);

  getConfirmedLinkedList().addFirst(o);

  verify();

  resetFull();

  getCollection().addFirst(o);

  getConfirmedLinkedList().addFirst(o);

  verify();

}

Location: AbstractLinkedListTest.java

Content: 

/** 

 * Tests  {@link LinkedList#addLast(Object)}.

 */

@SuppressWarnings("unchecked") public void testLinkedListAddLast(){

  if (!isAddSupported()) {

    return;

  }

  final T o=(T)"hello";

  resetEmpty();

  getCollection().addLast(o);

  getConfirmedLinkedList().addLast(o);

  verify();

  resetFull();

  getCollection().addLast(o);

  getConfirmedLinkedList().addLast(o);

  verify();

}

Location: AbstractLinkedListTest.java

Content: 

/** 

 * Tests  {@link LinkedList#getFirst()}.

 */

public void testLinkedListGetFirst(){

  resetEmpty();

  try {

    getCollection().getFirst();

    fail("getFirst() should throw a NoSuchElementException for an " + "empty list.");

  }

 catch (  final NoSuchElementException e) {

  }

  verify();

  resetFull();

  final Object first=getCollection().getFirst();

  final Object confirmedFirst=getConfirmedLinkedList().getFirst();

  assertEquals("Result returned by getFirst() was wrong.",confirmedFirst,first);

  verify();

}

Location: AbstractLinkedListTest.java

Content: 

/** 

 * Tests  {@link LinkedList#getLast()}.

 */

public void testLinkedListGetLast(){

  resetEmpty();

  try {

    getCollection().getLast();

    fail("getLast() should throw a NoSuchElementException for an " + "empty list.");

  }

 catch (  final NoSuchElementException e) {

  }

  verify();

  resetFull();

  final Object last=getCollection().getLast();

  final Object confirmedLast=getConfirmedLinkedList().getLast();

  assertEquals("Result returned by getLast() was wrong.",confirmedLast,last);

  verify();

}

Location: AbstractLinkedListTest.java

Content: 

/** 

 * Tests  {@link LinkedList#removeFirst()}.

 */

public void testLinkedListRemoveFirst(){

  if (!isRemoveSupported()) {

    return;

  }

  resetEmpty();

  try {

    getCollection().removeFirst();

    fail("removeFirst() should throw a NoSuchElementException for " + "an empty list.");

  }

 catch (  final NoSuchElementException e) {

  }

  verify();

  resetFull();

  final Object first=getCollection().removeFirst();

  final Object confirmedFirst=getConfirmedLinkedList().removeFirst();

  assertEquals("Result returned by removeFirst() was wrong.",confirmedFirst,first);

  verify();

}

Location: AbstractLinkedListTest.java

Content: 

/** 

 * Tests  {@link LinkedList#removeLast()}.

 */

public void testLinkedListRemoveLast(){

  if (!isRemoveSupported()) {

    return;

  }

  resetEmpty();

  try {

    getCollection().removeLast();

    fail("removeLast() should throw a NoSuchElementException for " + "an empty list.");

  }

 catch (  final NoSuchElementException e) {

  }

  verify();

  resetFull();

  final Object last=getCollection().removeLast();

  final Object confirmedLast=getConfirmedLinkedList().removeLast();

  assertEquals("Result returned by removeLast() was wrong.",confirmedLast,last);

  verify();

}

Location: AbstractLinkedListTest.java

Content: 

@SuppressWarnings("unchecked") public void testRemoveFirst(){

  resetEmpty();

  final AbstractLinkedList<E> list=getCollection();

  if (!isRemoveSupported()) {

    try {

      list.removeFirst();

    }

 catch (    final UnsupportedOperationException ex) {

    }

  }

  list.addAll(Arrays.asList((E[])new String[]{"value1","value2"}));

  assertEquals("value1",list.removeFirst());

  checkNodes();

  list.addLast((E)"value3");

  checkNodes();

  assertEquals("value2",list.removeFirst());

  assertEquals("value3",list.removeFirst());

  checkNodes();

  list.addLast((E)"value4");

  checkNodes();

  assertEquals("value4",list.removeFirst());

  checkNodes();

}

Location: AbstractLinkedListTest.java

Content: 

@SuppressWarnings("unchecked") public void testRemoveLast(){

  resetEmpty();

  final AbstractLinkedList<E> list=getCollection();

  if (!isRemoveSupported()) {

    try {

      list.removeLast();

    }

 catch (    final UnsupportedOperationException ex) {

    }

  }

  list.addAll(Arrays.asList((E[])new String[]{"value1","value2"}));

  assertEquals("value2",list.removeLast());

  list.addFirst((E)"value3");

  checkNodes();

  assertEquals("value1",list.removeLast());

  assertEquals("value3",list.removeLast());

  list.addFirst((E)"value4");

  checkNodes();

  assertEquals("value4",list.removeFirst());

}

Location: AbstractLinkedListTest.java

Content: 

@SuppressWarnings("unchecked") public void testRemoveNode(){

  resetEmpty();

  if (!isAddSupported() || !isRemoveSupported()) {

    return;

  }

  final AbstractLinkedList<E> list=getCollection();

  list.addAll(Arrays.asList((E[])new String[]{"value1","value2"}));

  list.removeNode(list.getNode(0,false));

  checkNodes();

  assertEquals("value2",list.getFirst());

  assertEquals("value2",list.getLast());

  list.addFirst((E)"value1");

  list.addFirst((E)"value0");

  checkNodes();

  list.removeNode(list.getNode(1,false));

  assertEquals("value0",list.getFirst());

  assertEquals("value2",list.getLast());

  checkNodes();

  list.removeNode(list.getNode(1,false));

  assertEquals("value0",list.getFirst());

  assertEquals("value0",list.getLast());

  checkNodes();

}

Location: AbstractLinkedListTest.java

Content: 

public AbstractLinkedListTest(final String testName){

  super(testName);

}

Location: AbstractLinkedListTest.java

Content: 

protected void checkNodes(){

  final AbstractLinkedList<E> list=getCollection();

  for (int i=0; i < list.size; i++) {

    assertEquals(list.getNode(i,false).next,list.getNode(i + 1,true));

    if (i < list.size - 1) {

      assertEquals(list.getNode(i + 1,false).previous,list.getNode(i,false));

    }

  }

}

Location: AbstractLinkedListTest.java

Content: 

/** 

 * Returns the  {@link #confirmed} field cast to a {@link LinkedList}.

 * @return the confirmed field as a List

 */

protected LinkedList<T> getConfirmedLinkedList(){

  return (LinkedList<T>)getConfirmed();

}

Location: AbstractLinkedListTest.java

Content: 

@SuppressWarnings("unchecked") public void testAddNodeAfter(){

  resetEmpty();

  final AbstractLinkedList<E> list=getCollection();

  if (!isAddSupported()) {

    try {

      list.addFirst(null);

    }

 catch (    final UnsupportedOperationException ex) {

    }

  }

  list.addFirst((E)"value1");

  list.addNodeAfter(list.getNode(0,false),(E)"value2");

  assertEquals("value1",list.getFirst());

  assertEquals("value2",list.getLast());

  list.removeFirst();

  checkNodes();

  list.addNodeAfter(list.getNode(0,false),(E)"value3");

  checkNodes();

  assertEquals("value2",list.getFirst());

  assertEquals("value3",list.getLast());

  list.addNodeAfter(list.getNode(0,false),(E)"value4");

  checkNodes();

  assertEquals("value2",list.getFirst());

  assertEquals("value3",list.getLast());

  assertEquals("value4",list.get(1));

  list.addNodeAfter(list.getNode(2,false),(E)"value5");

  checkNodes();

  assertEquals("value2",list.getFirst());

  assertEquals("value4",list.get(1));

  assertEquals("value3",list.get(2));

  assertEquals("value5",list.getLast());

}

Location: AbstractLinkedListTest.java

Content: 

@SuppressWarnings("unchecked") public void testGetNode(){

  resetEmpty();

  final AbstractLinkedList<E> list=getCollection();

  assertEquals(list.getNode(0,true).previous,list.getNode(0,true).next);

  try {

    list.getNode(0,false);

    fail("Expecting IndexOutOfBoundsException.");

  }

 catch (  final IndexOutOfBoundsException ex) {

  }

  list.addAll(Arrays.asList((E[])new String[]{"value1","value2"}));

  checkNodes();

  list.addFirst((E)"value0");

  checkNodes();

  list.removeNode(list.getNode(1,false));

  checkNodes();

  try {

    list.getNode(2,false);

    fail("Expecting IndexOutOfBoundsException.");

  }

 catch (  final IndexOutOfBoundsException ex) {

  }

  try {

    list.getNode(-1,false);

    fail("Expecting IndexOutOfBoundsException.");

  }

 catch (  final IndexOutOfBoundsException ex) {

  }

  try {

    list.getNode(3,true);

    fail("Expecting IndexOutOfBoundsException.");

  }

 catch (  final IndexOutOfBoundsException ex) {

  }

}

Location: AbstractLinkedListTest.java

Content: 

/** 

 * Tests  {@link LinkedList#addFirst(Object)}.

 */

@SuppressWarnings("unchecked") public void testLinkedListAddFirst(){

  if (!isAddSupported()) {

    return;

  }

  final T o=(T)"hello";

  resetEmpty();

  getCollection().addFirst(o);

  getConfirmedLinkedList().addFirst(o);

  verify();

  resetFull();

  getCollection().addFirst(o);

  getConfirmedLinkedList().addFirst(o);

  verify();

}

Location: AbstractLinkedListTest.java

Content: 

/** 

 * Tests  {@link LinkedList#addLast(Object)}.

 */

@SuppressWarnings("unchecked") public void testLinkedListAddLast(){

  if (!isAddSupported()) {

    return;

  }

  final T o=(T)"hello";

  resetEmpty();

  getCollection().addLast(o);

  getConfirmedLinkedList().addLast(o);

  verify();

  resetFull();

  getCollection().addLast(o);

  getConfirmedLinkedList().addLast(o);

  verify();

}

Location: AbstractLinkedListTest.java

Content: 

/** 

 * Tests  {@link LinkedList#getFirst()}.

 */

public void testLinkedListGetFirst(){

  resetEmpty();

  try {

    getCollection().getFirst();

    fail("getFirst() should throw a NoSuchElementException for an " + "empty list.");

  }

 catch (  final NoSuchElementException e) {

  }

  verify();

  resetFull();

  final Object first=getCollection().getFirst();

  final Object confirmedFirst=getConfirmedLinkedList().getFirst();

  assertEquals("Result returned by getFirst() was wrong.",confirmedFirst,first);

  verify();

}

Location: AbstractLinkedListTest.java

Content: 

/** 

 * Tests  {@link LinkedList#getLast()}.

 */

public void testLinkedListGetLast(){

  resetEmpty();

  try {

    getCollection().getLast();

    fail("getLast() should throw a NoSuchElementException for an " + "empty list.");

  }

 catch (  final NoSuchElementException e) {

  }

  verify();

  resetFull();

  final Object last=getCollection().getLast();

  final Object confirmedLast=getConfirmedLinkedList().getLast();

  assertEquals("Result returned by getLast() was wrong.",confirmedLast,last);

  verify();

}

Location: AbstractLinkedListTest.java

Content: 

/** 

 * Tests  {@link LinkedList#removeFirst()}.

 */

public void testLinkedListRemoveFirst(){

  if (!isRemoveSupported()) {

    return;

  }

  resetEmpty();

  try {

    getCollection().removeFirst();

    fail("removeFirst() should throw a NoSuchElementException for " + "an empty list.");

  }

 catch (  final NoSuchElementException e) {

  }

  verify();

  resetFull();

  final Object first=getCollection().removeFirst();

  final Object confirmedFirst=getConfirmedLinkedList().removeFirst();

  assertEquals("Result returned by removeFirst() was wrong.",confirmedFirst,first);

  verify();

}

Location: AbstractLinkedListTest.java

Content: 

/** 

 * Tests  {@link LinkedList#removeLast()}.

 */

public void testLinkedListRemoveLast(){

  if (!isRemoveSupported()) {

    return;

  }

  resetEmpty();

  try {

    getCollection().removeLast();

    fail("removeLast() should throw a NoSuchElementException for " + "an empty list.");

  }

 catch (  final NoSuchElementException e) {

  }

  verify();

  resetFull();

  final Object last=getCollection().removeLast();

  final Object confirmedLast=getConfirmedLinkedList().removeLast();

  assertEquals("Result returned by removeLast() was wrong.",confirmedLast,last);

  verify();

}

Location: AbstractLinkedListTest.java

Content: 

@SuppressWarnings("unchecked") public void testRemoveFirst(){

  resetEmpty();

  final AbstractLinkedList<E> list=getCollection();

  if (!isRemoveSupported()) {

    try {

      list.removeFirst();

    }

 catch (    final UnsupportedOperationException ex) {

    }

  }

  list.addAll(Arrays.asList((E[])new String[]{"value1","value2"}));

  assertEquals("value1",list.removeFirst());

  checkNodes();

  list.addLast((E)"value3");

  checkNodes();

  assertEquals("value2",list.removeFirst());

  assertEquals("value3",list.removeFirst());

  checkNodes();

  list.addLast((E)"value4");

  checkNodes();

  assertEquals("value4",list.removeFirst());

  checkNodes();

}

Location: AbstractLinkedListTest.java

Content: 

@SuppressWarnings("unchecked") public void testRemoveLast(){

  resetEmpty();

  final AbstractLinkedList<E> list=getCollection();

  if (!isRemoveSupported()) {

    try {

      list.removeLast();

    }

 catch (    final UnsupportedOperationException ex) {

    }

  }

  list.addAll(Arrays.asList((E[])new String[]{"value1","value2"}));

  assertEquals("value2",list.removeLast());

  list.addFirst((E)"value3");

  checkNodes();

  assertEquals("value1",list.removeLast());

  assertEquals("value3",list.removeLast());

  list.addFirst((E)"value4");

  checkNodes();

  assertEquals("value4",list.removeFirst());

}

Location: AbstractLinkedListTest.java

Content: 

@SuppressWarnings("unchecked") public void testRemoveNode(){

  resetEmpty();

  if (!isAddSupported() || !isRemoveSupported()) {

    return;

  }

  final AbstractLinkedList<E> list=getCollection();

  list.addAll(Arrays.asList((E[])new String[]{"value1","value2"}));

  list.removeNode(list.getNode(0,false));

  checkNodes();

  assertEquals("value2",list.getFirst());

  assertEquals("value2",list.getLast());

  list.addFirst((E)"value1");

  list.addFirst((E)"value0");

  checkNodes();

  list.removeNode(list.getNode(1,false));

  assertEquals("value0",list.getFirst());

  assertEquals("value2",list.getLast());

  checkNodes();

  list.removeNode(list.getNode(1,false));

  assertEquals("value0",list.getFirst());

  assertEquals("value0",list.getLast());

  checkNodes();

}

