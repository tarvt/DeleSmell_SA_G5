Location: MultiSetUtilsTest.java

Content: 

/** 

 * Tests  {@link MultiSetUtils#emptyMultiSet()}.

 */

@Test public void testEmptyMultiSet(){

  final MultiSet<Integer> empty=MultiSetUtils.emptyMultiSet();

  assertEquals(0,empty.size());

  try {

    empty.add(55);

    fail("Empty multi set must be read-only");

  }

 catch (  final UnsupportedOperationException e) {

  }

}

Location: MultiSetUtilsTest.java

Content: 

/** 

 * Tests  {@link MultiSetUtils#predicatedMultiSet(org.apache.commons.collections4.MultiSet,org.apache.commons.collections4.Predicate)}.

 */

@Test public void testPredicatedMultiSet(){

  final Predicate<String> predicate=object -> object.length() == 1;

  final MultiSet<String> predicated=MultiSetUtils.predicatedMultiSet(multiSet,predicate);

  assertEquals(multiSet.size(),predicated.size());

  assertEquals(multiSet.getCount("a"),predicated.getCount("a"));

  try {

    MultiSetUtils.predicatedMultiSet(null,predicate);

    fail("Expecting NPE");

  }

 catch (  final NullPointerException e) {

  }

  try {

    MultiSetUtils.predicatedMultiSet(multiSet,null);

    fail("Expecting NPE");

  }

 catch (  final NullPointerException e) {

  }

  try {

    MultiSetUtils.predicatedMultiSet(multiSet,object -> object.equals("a"));

    fail("Predicate is violated for all elements not being 'a'");

  }

 catch (  final IllegalArgumentException iae) {

  }

}

Location: MultiSetUtilsTest.java

Content: 

/** 

 * Tests  {@link MultiSetUtils#unmodifiableMultiSet(org.apache.commons.collections4.MultiSet) ()}.

 */

@Test public void testSynchronizedMultiSet(){

  final MultiSet<String> synced=MultiSetUtils.synchronizedMultiSet(multiSet);

  assertEquals(multiSet,synced);

  synced.add("a");

}

Location: MultiSetUtilsTest.java

Content: 

/** 

 * Tests  {@link MultiSetUtils#unmodifiableMultiSet(org.apache.commons.collections4.MultiSet) ()}.

 */

@Test public void testUnmodifiableMultiSet(){

  final MultiSet<String> unmodifiable=MultiSetUtils.unmodifiableMultiSet(multiSet);

  assertEquals(multiSet,unmodifiable);

  try {

    unmodifiable.add("a");

    fail("Empty multi set must be read-only");

  }

 catch (  final UnsupportedOperationException e) {

  }

  try {

    MultiSetUtils.unmodifiableMultiSet(null);

    fail("Expecting NPE");

  }

 catch (  final NullPointerException e) {

  }

}

Location: MultiSetUtilsTest.java

Content: 

/** 

 * Tests  {@link MultiSetUtils#emptyMultiSet()}.

 */

@Test public void testEmptyMultiSet(){

  final MultiSet<Integer> empty=MultiSetUtils.emptyMultiSet();

  assertEquals(0,empty.size());

  try {

    empty.add(55);

    fail("Empty multi set must be read-only");

  }

 catch (  final UnsupportedOperationException e) {

  }

}

Location: MultiSetUtilsTest.java

Content: 

/** 

 * Tests  {@link MultiSetUtils#predicatedMultiSet(org.apache.commons.collections4.MultiSet,org.apache.commons.collections4.Predicate)}.

 */

@Test public void testPredicatedMultiSet(){

  final Predicate<String> predicate=object -> object.length() == 1;

  final MultiSet<String> predicated=MultiSetUtils.predicatedMultiSet(multiSet,predicate);

  assertEquals(multiSet.size(),predicated.size());

  assertEquals(multiSet.getCount("a"),predicated.getCount("a"));

  try {

    MultiSetUtils.predicatedMultiSet(null,predicate);

    fail("Expecting NPE");

  }

 catch (  final NullPointerException e) {

  }

  try {

    MultiSetUtils.predicatedMultiSet(multiSet,null);

    fail("Expecting NPE");

  }

 catch (  final NullPointerException e) {

  }

  try {

    MultiSetUtils.predicatedMultiSet(multiSet,object -> object.equals("a"));

    fail("Predicate is violated for all elements not being 'a'");

  }

 catch (  final IllegalArgumentException iae) {

  }

}

Location: MultiSetUtilsTest.java

Content: 

/** 

 * Tests  {@link MultiSetUtils#unmodifiableMultiSet(org.apache.commons.collections4.MultiSet) ()}.

 */

@Test public void testSynchronizedMultiSet(){

  final MultiSet<String> synced=MultiSetUtils.synchronizedMultiSet(multiSet);

  assertEquals(multiSet,synced);

  synced.add("a");

}

Location: MultiSetUtilsTest.java

Content: 

/** 

 * Tests  {@link MultiSetUtils#unmodifiableMultiSet(org.apache.commons.collections4.MultiSet) ()}.

 */

@Test public void testUnmodifiableMultiSet(){

  final MultiSet<String> unmodifiable=MultiSetUtils.unmodifiableMultiSet(multiSet);

  assertEquals(multiSet,unmodifiable);

  try {

    unmodifiable.add("a");

    fail("Empty multi set must be read-only");

  }

 catch (  final UnsupportedOperationException e) {

  }

  try {

    MultiSetUtils.unmodifiableMultiSet(null);

    fail("Expecting NPE");

  }

 catch (  final NullPointerException e) {

  }

}

