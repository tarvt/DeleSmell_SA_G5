Location: TransformedNavigableSet.java

Content: 

/** 

 * Constructor that wraps (not copies). <p> If there are any elements already in the set being decorated, they are NOT transformed.

 * @param set  the set to decorate, must not be null

 * @param transformer  the transformer to use for conversion, must not be null

 * @throws NullPointerException if set or transformer is null

 */

protected TransformedNavigableSet(final NavigableSet<E> set,final Transformer<? super E,? extends E> transformer){

  super(set,transformer);

}

Location: TransformedNavigableSet.java

Content: 

/** 

 * Factory method to create a transforming navigable set. <p> If there are any elements already in the set being decorated, they are NOT transformed. Contrast this with  {@link #transformedNavigableSet(NavigableSet,Transformer)}.

 * @param < E > the element type

 * @param set  the set to decorate, must not be null

 * @param transformer  the transformer to use for conversion, must not be null

 * @return a new transformed {@link NavigableSet}

 * @throws NullPointerException if set or transformer is null

 */

public static <E>TransformedNavigableSet<E> transformingNavigableSet(final NavigableSet<E> set,final Transformer<? super E,? extends E> transformer){

  return new TransformedNavigableSet<>(set,transformer);

}

Location: TransformedNavigableSet.java

Content: 

/** 

 * Constructor that wraps (not copies). <p> If there are any elements already in the set being decorated, they are NOT transformed.

 * @param set  the set to decorate, must not be null

 * @param transformer  the transformer to use for conversion, must not be null

 * @throws NullPointerException if set or transformer is null

 */

protected TransformedNavigableSet(final NavigableSet<E> set,final Transformer<? super E,? extends E> transformer){

  super(set,transformer);

}

Location: TransformedNavigableSet.java

Content: 

/** 

 * Factory method to create a transforming navigable set. <p> If there are any elements already in the set being decorated, they are NOT transformed. Contrast this with  {@link #transformedNavigableSet(NavigableSet,Transformer)}.

 * @param < E > the element type

 * @param set  the set to decorate, must not be null

 * @param transformer  the transformer to use for conversion, must not be null

 * @return a new transformed {@link NavigableSet}

 * @throws NullPointerException if set or transformer is null

 */

public static <E>TransformedNavigableSet<E> transformingNavigableSet(final NavigableSet<E> set,final Transformer<? super E,? extends E> transformer){

  return new TransformedNavigableSet<>(set,transformer);

}

