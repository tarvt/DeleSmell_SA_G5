Location: TransformedSortedMap.java

Content: 

/** 

 * Gets the map being decorated.

 * @return the decorated map

 */

protected SortedMap<K,V> getSortedMap(){

  return (SortedMap<K,V>)map;

}

Location: TransformedSortedMap.java

Content: 

/** 

 * Constructor that wraps (not copies). <p> If there are any elements already in the collection being decorated, they are NOT transformed.</p>

 * @param map  the map to decorate, must not be null

 * @param keyTransformer  the predicate to validate the keys, null means no transformation

 * @param valueTransformer  the predicate to validate to values, null means no transformation

 * @throws NullPointerException if the map is null

 */

protected TransformedSortedMap(final SortedMap<K,V> map,final Transformer<? super K,? extends K> keyTransformer,final Transformer<? super V,? extends V> valueTransformer){

  super(map,keyTransformer,valueTransformer);

}

Location: TransformedSortedMap.java

Content: 

/** 

 * Factory method to create a transforming sorted map. <p> If there are any elements already in the map being decorated, they are NOT transformed. Contrast this with  {@link #transformedSortedMap(SortedMap,Transformer,Transformer)}.

 * @param < K >  the key type

 * @param < V >  the value type

 * @param map  the map to decorate, must not be null

 * @param keyTransformer  the predicate to validate the keys, null means no transformation

 * @param valueTransformer  the predicate to validate to values, null means no transformation

 * @return a new transformed sorted map

 * @throws NullPointerException if the map is null

 * @since 4.0

 */

public static <K,V>TransformedSortedMap<K,V> transformingSortedMap(final SortedMap<K,V> map,final Transformer<? super K,? extends K> keyTransformer,final Transformer<? super V,? extends V> valueTransformer){

  return new TransformedSortedMap<>(map,keyTransformer,valueTransformer);

}

Location: TransformedSortedMap.java

Content: 

/** 

 * Gets the map being decorated.

 * @return the decorated map

 */

protected SortedMap<K,V> getSortedMap(){

  return (SortedMap<K,V>)map;

}

Location: TransformedSortedMap.java

Content: 

/** 

 * Constructor that wraps (not copies). <p> If there are any elements already in the collection being decorated, they are NOT transformed.</p>

 * @param map  the map to decorate, must not be null

 * @param keyTransformer  the predicate to validate the keys, null means no transformation

 * @param valueTransformer  the predicate to validate to values, null means no transformation

 * @throws NullPointerException if the map is null

 */

protected TransformedSortedMap(final SortedMap<K,V> map,final Transformer<? super K,? extends K> keyTransformer,final Transformer<? super V,? extends V> valueTransformer){

  super(map,keyTransformer,valueTransformer);

}

Location: TransformedSortedMap.java

Content: 

/** 

 * Factory method to create a transforming sorted map. <p> If there are any elements already in the map being decorated, they are NOT transformed. Contrast this with  {@link #transformedSortedMap(SortedMap,Transformer,Transformer)}.

 * @param < K >  the key type

 * @param < V >  the value type

 * @param map  the map to decorate, must not be null

 * @param keyTransformer  the predicate to validate the keys, null means no transformation

 * @param valueTransformer  the predicate to validate to values, null means no transformation

 * @return a new transformed sorted map

 * @throws NullPointerException if the map is null

 * @since 4.0

 */

public static <K,V>TransformedSortedMap<K,V> transformingSortedMap(final SortedMap<K,V> map,final Transformer<? super K,? extends K> keyTransformer,final Transformer<? super V,? extends V> valueTransformer){

  return new TransformedSortedMap<>(map,keyTransformer,valueTransformer);

}

