Location: CursorableLinkedListTest.java

Content: 

public CursorableLinkedListTest(final String testName){

  super(testName);

}

Location: CursorableLinkedListTest.java

Content: 

@SuppressWarnings("unchecked") public void testCursorAdd(){

  final CursorableLinkedList.Cursor<E> it=list.cursor();

  it.add((E)"1");

  assertEquals("[1]",list.toString());

  it.add((E)"3");

  assertEquals("[1, 3]",list.toString());

  it.add((E)"5");

  assertEquals("[1, 3, 5]",list.toString());

  assertEquals("5",it.previous());

  it.add((E)"4");

  assertEquals("[1, 3, 4, 5]",list.toString());

  assertEquals("4",it.previous());

  assertEquals("3",it.previous());

  it.add((E)"2");

  assertEquals("[1, 2, 3, 4, 5]",list.toString());

  it.close();

}

Location: CursorableLinkedListTest.java

Content: 

@SuppressWarnings("unchecked") public void testCursorConcurrentModification(){

  list.add((E)"1");

  list.add((E)"2");

  list.add((E)"3");

  list.add((E)"5");

  list.add((E)"7");

  list.add((E)"9");

  final CursorableLinkedList.Cursor<E> c1=list.cursor();

  final CursorableLinkedList.Cursor<E> c2=list.cursor();

  final Iterator<E> li=list.iterator();

  assertEquals("1",li.next());

  assertEquals("2",li.next());

  li.remove();

  assertEquals("3",li.next());

  assertEquals("1",c1.next());

  assertEquals("3",c1.next());

  assertEquals("1",c2.next());

  c1.remove();

  assertEquals("5",c2.next());

  c2.add((E)"6");

  assertEquals("5",c1.next());

  assertEquals("6",c1.next());

  assertEquals("7",c1.next());

  list.add(0,(E)"0");

  list.add(5,(E)"8");

  assertEquals("8",c1.next());

  assertEquals("9",c1.next());

  c1.add((E)"10");

  assertEquals("7",c2.next());

  assertEquals("8",c2.next());

  assertEquals("9",c2.next());

  assertEquals("10",c2.next());

  try {

    c2.next();

    fail();

  }

 catch (  final NoSuchElementException nse) {

  }

  try {

    li.next();

    fail();

  }

 catch (  final ConcurrentModificationException cme) {

  }

  c1.close();

  c2.close();

}

Location: CursorableLinkedListTest.java

Content: 

@SuppressWarnings("unchecked") public void testCursorNavigation(){

  list.add((E)"1");

  list.add((E)"2");

  list.add((E)"3");

  list.add((E)"4");

  list.add((E)"5");

  final CursorableLinkedList.Cursor<E> it=list.cursor();

  assertTrue(it.hasNext());

  assertFalse(it.hasPrevious());

  assertEquals("1",it.next());

  assertTrue(it.hasNext());

  assertTrue(it.hasPrevious());

  assertEquals("1",it.previous());

  assertTrue(it.hasNext());

  assertFalse(it.hasPrevious());

  assertEquals("1",it.next());

  assertTrue(it.hasNext());

  assertTrue(it.hasPrevious());

  assertEquals("2",it.next());

  assertTrue(it.hasNext());

  assertTrue(it.hasPrevious());

  assertEquals("2",it.previous());

  assertTrue(it.hasNext());

  assertTrue(it.hasPrevious());

  assertEquals("2",it.next());

  assertTrue(it.hasNext());

  assertTrue(it.hasPrevious());

  assertEquals("3",it.next());

  assertTrue(it.hasNext());

  assertTrue(it.hasPrevious());

  assertEquals("4",it.next());

  assertTrue(it.hasNext());

  assertTrue(it.hasPrevious());

  assertEquals("5",it.next());

  assertFalse(it.hasNext());

  assertTrue(it.hasPrevious());

  assertEquals("5",it.previous());

  assertTrue(it.hasNext());

  assertTrue(it.hasPrevious());

  assertEquals("4",it.previous());

  assertTrue(it.hasNext());

  assertTrue(it.hasPrevious());

  assertEquals("3",it.previous());

  assertTrue(it.hasNext());

  assertTrue(it.hasPrevious());

  assertEquals("2",it.previous());

  assertTrue(it.hasNext());

  assertTrue(it.hasPrevious());

  assertEquals("1",it.previous());

  assertTrue(it.hasNext());

  assertFalse(it.hasPrevious());

  it.close();

}

Location: CursorableLinkedListTest.java

Content: 

@SuppressWarnings("unchecked") public void testCursorNextIndexAddAfter(){

  list.add((E)"1");

  list.add((E)"2");

  list.add((E)"3");

  list.add((E)"5");

  final CursorableLinkedList.Cursor<E> c1=list.cursor();

  assertEquals(0,c1.nextIndex());

  list.add(1,(E)"0");

  assertEquals(0,c1.nextIndex());

  assertEquals("1",c1.next());

  assertEquals(1,c1.nextIndex());

  assertEquals("0",c1.next());

}

Location: CursorableLinkedListTest.java

Content: 

@SuppressWarnings("unchecked") public void testCursorNextIndexAddBefore(){

  list.add((E)"1");

  list.add((E)"2");

  list.add((E)"3");

  list.add((E)"5");

  final CursorableLinkedList.Cursor<E> c1=list.cursor();

  assertEquals(0,c1.nextIndex());

  assertEquals("1",c1.next());

  list.add(0,(E)"0");

  assertEquals(2,c1.nextIndex());

  assertEquals("2",c1.next());

}

Location: CursorableLinkedListTest.java

Content: 

@SuppressWarnings("unchecked") public void testCursorNextIndexAddNext(){

  list.add((E)"1");

  list.add((E)"2");

  list.add((E)"3");

  list.add((E)"5");

  final CursorableLinkedList.Cursor<E> c1=list.cursor();

  assertEquals(0,c1.nextIndex());

  list.add(0,(E)"0");

  assertEquals(0,c1.nextIndex());

  assertEquals("0",c1.next());

  assertEquals(1,c1.nextIndex());

  assertEquals("1",c1.next());

}

Location: CursorableLinkedListTest.java

Content: 

@SuppressWarnings("unchecked") public void testCursorNextIndexFirst(){

  list.add((E)"1");

  list.add((E)"2");

  list.add((E)"3");

  list.add((E)"5");

  final CursorableLinkedList.Cursor<E> c1=list.cursor();

  assertEquals(0,c1.nextIndex());

  list.remove(0);

  assertEquals(0,c1.nextIndex());

  assertEquals("2",c1.next());

  assertEquals(1,c1.nextIndex());

  assertEquals("3",c1.next());

}

Location: CursorableLinkedListTest.java

Content: 

@SuppressWarnings("unchecked") public void testCursorNextIndexMid(){

  list.add((E)"1");

  list.add((E)"2");

  list.add((E)"3");

  list.add((E)"5");

  final CursorableLinkedList.Cursor<E> c1=list.cursor();

  final Iterator<E> li=list.iterator();

  assertEquals("1",li.next());

  assertEquals("2",li.next());

  li.remove();

  assertEquals(0,c1.nextIndex());

  assertEquals("1",c1.next());

  assertEquals(1,c1.nextIndex());

  assertEquals("3",c1.next());

}

Location: CursorableLinkedListTest.java

Content: 

@SuppressWarnings("unchecked") public void testCursorRemove(){

  list.add((E)"1");

  list.add((E)"2");

  list.add((E)"3");

  list.add((E)"4");

  list.add((E)"5");

  final CursorableLinkedList.Cursor<E> it=list.cursor();

  try {

    it.remove();

    fail();

  }

 catch (  final IllegalStateException e) {

  }

  assertEquals("1",it.next());

  assertEquals("2",it.next());

  assertEquals("[1, 2, 3, 4, 5]",list.toString());

  it.remove();

  assertEquals("[1, 3, 4, 5]",list.toString());

  assertEquals("3",it.next());

  assertEquals("3",it.previous());

  assertEquals("1",it.previous());

  it.remove();

  assertEquals("[3, 4, 5]",list.toString());

  assertFalse(it.hasPrevious());

  assertEquals("3",it.next());

  it.remove();

  assertEquals("[4, 5]",list.toString());

  try {

    it.remove();

  }

 catch (  final IllegalStateException e) {

  }

  assertEquals("4",it.next());

  assertEquals("5",it.next());

  it.remove();

  assertEquals("[4]",list.toString());

  assertEquals("4",it.previous());

  it.remove();

  assertEquals("[]",list.toString());

  it.close();

}

Location: CursorableLinkedListTest.java

Content: 

@SuppressWarnings("unchecked") public void testCursorSet(){

  list.add((E)"1");

  list.add((E)"2");

  list.add((E)"3");

  list.add((E)"4");

  list.add((E)"5");

  final CursorableLinkedList.Cursor<E> it=list.cursor();

  assertEquals("1",it.next());

  it.set((E)"a");

  assertEquals("a",it.previous());

  it.set((E)"A");

  assertEquals("A",it.next());

  assertEquals("2",it.next());

  it.set((E)"B");

  assertEquals("3",it.next());

  assertEquals("4",it.next());

  it.set((E)"D");

  assertEquals("5",it.next());

  it.set((E)"E");

  assertEquals("[A, B, 3, D, E]",list.toString());

  it.close();

}

Location: CursorableLinkedListTest.java

Content: 

@SuppressWarnings("unchecked") public void testEqualsAndHashCode(){

  assertEquals(list,list);

  assertEquals(list.hashCode(),list.hashCode());

  list.add((E)"A");

  assertEquals(list,list);

  assertEquals(list.hashCode(),list.hashCode());

  final CursorableLinkedList<E> list2=new CursorableLinkedList<>();

  assertFalse(list.equals(list2));

  assertFalse(list2.equals(list));

  final java.util.List<E> list3=new java.util.LinkedList<>();

  assertFalse(list.equals(list3));

  assertFalse(list3.equals(list));

  assertEquals(list2,list3);

  assertEquals(list3,list2);

  assertEquals(list2.hashCode(),list3.hashCode());

  list2.add((E)"A");

  assertEquals(list,list2);

  assertEquals(list2,list);

  assertFalse(list2.equals(list3));

  assertFalse(list3.equals(list2));

  list3.add((E)"A");

  assertEquals(list2,list3);

  assertEquals(list3,list2);

  assertEquals(list2.hashCode(),list3.hashCode());

  list.add((E)"B");

  assertEquals(list,list);

  assertFalse(list.equals(list2));

  assertFalse(list2.equals(list));

  assertFalse(list.equals(list3));

  assertFalse(list3.equals(list));

  list2.add((E)"B");

  list3.add((E)"B");

  assertEquals(list,list);

  assertEquals(list,list2);

  assertEquals(list2,list);

  assertEquals(list2,list3);

  assertEquals(list3,list2);

  assertEquals(list2.hashCode(),list3.hashCode());

  list.add((E)"C");

  list2.add((E)"C");

  list3.add((E)"C");

  assertEquals(list,list);

  assertEquals(list,list2);

  assertEquals(list2,list);

  assertEquals(list2,list3);

  assertEquals(list3,list2);

  assertEquals(list.hashCode(),list2.hashCode());

  assertEquals(list2.hashCode(),list3.hashCode());

  list.add((E)"D");

  list2.addFirst((E)"D");

  assertEquals(list,list);

  assertFalse(list.equals(list2));

  assertFalse(list2.equals(list));

}

Location: CursorableLinkedListTest.java

Content: 

@SuppressWarnings("unchecked") public void testInternalState_CursorNextAddIndex1ByList(){

  list.add((E)"A");

  list.add((E)"B");

  list.add((E)"C");

  final CursorableLinkedList.Cursor<E> c1=list.cursor();

  assertEquals("A",c1.next());

  list.add(1,(E)"Z");

  assertTrue(c1.nextIndexValid);

  assertEquals(1,c1.nextIndex);

  assertEquals("A",c1.current.value);

  assertEquals("Z",c1.next.value);

  assertEquals("[A, Z, B, C]",list.toString());

  c1.remove();

  assertEquals("[Z, B, C]",list.toString());

  try {

    c1.remove();

    fail();

  }

 catch (  final IllegalStateException ex) {

  }

}

Location: CursorableLinkedListTest.java

Content: 

@SuppressWarnings("unchecked") public void testInternalState_CursorNextNextAddByIterator(){

  list.add((E)"A");

  list.add((E)"B");

  list.add((E)"C");

  final CursorableLinkedList.Cursor<E> c1=list.cursor();

  assertEquals("A",c1.next());

  assertEquals("B",c1.next());

  c1.add((E)"Z");

  assertTrue(c1.nextIndexValid);

  assertEquals(3,c1.nextIndex);

  assertFalse(c1.currentRemovedByAnother);

  assertNull(c1.current);

  assertEquals("C",c1.next.value);

  assertEquals("[A, B, Z, C]",list.toString());

  try {

    c1.remove();

    fail();

  }

 catch (  final IllegalStateException ex) {

  }

}

Location: CursorableLinkedListTest.java

Content: 

@SuppressWarnings("unchecked") public void testInternalState_CursorNextNextAddIndex1ByList(){

  list.add((E)"A");

  list.add((E)"B");

  list.add((E)"C");

  final CursorableLinkedList.Cursor<E> c1=list.cursor();

  assertEquals("A",c1.next());

  assertEquals("B",c1.next());

  list.add(1,(E)"Z");

  assertFalse(c1.nextIndexValid);

  assertEquals("B",c1.current.value);

  assertEquals("C",c1.next.value);

  assertEquals("[A, Z, B, C]",list.toString());

  c1.remove();

  assertEquals("[A, Z, C]",list.toString());

  try {

    c1.remove();

    fail();

  }

 catch (  final IllegalStateException ex) {

  }

}

Location: CursorableLinkedListTest.java

Content: 

@SuppressWarnings("unchecked") public void testInternalState_CursorNextNextNextRemoveIndex1ByList(){

  list.add((E)"A");

  list.add((E)"B");

  list.add((E)"C");

  list.add((E)"D");

  final CursorableLinkedList.Cursor<E> c1=list.cursor();

  assertEquals("A",c1.next());

  assertEquals("B",c1.next());

  assertEquals("C",c1.next());

  assertEquals("B",list.remove(1));

  assertFalse(c1.nextIndexValid);

  assertFalse(c1.currentRemovedByAnother);

  assertEquals("C",c1.current.value);

  assertEquals("D",c1.next.value);

  assertEquals("[A, C, D]",list.toString());

  c1.remove();

  assertEquals("[A, D]",list.toString());

  try {

    c1.remove();

    fail();

  }

 catch (  final IllegalStateException ex) {

  }

}

Location: CursorableLinkedListTest.java

Content: 

@SuppressWarnings("unchecked") public void testInternalState_CursorNextNextPreviousAddByIterator(){

  list.add((E)"A");

  list.add((E)"B");

  list.add((E)"C");

  final CursorableLinkedList.Cursor<E> c1=list.cursor();

  assertEquals("A",c1.next());

  assertEquals("B",c1.next());

  assertEquals("B",c1.previous());

  c1.add((E)"Z");

  assertTrue(c1.nextIndexValid);

  assertEquals(2,c1.nextIndex);

  assertNull(c1.current);

  assertEquals("B",c1.next.value);

  assertEquals("[A, Z, B, C]",list.toString());

  try {

    c1.remove();

    fail();

  }

 catch (  final IllegalStateException ex) {

  }

}

Location: CursorableLinkedListTest.java

Content: 

@SuppressWarnings("unchecked") public void testInternalState_CursorNextNextPreviousAddIndex1ByList(){

  list.add((E)"A");

  list.add((E)"B");

  list.add((E)"C");

  final CursorableLinkedList.Cursor<E> c1=list.cursor();

  assertEquals("A",c1.next());

  assertEquals("B",c1.next());

  assertEquals("B",c1.previous());

  list.add(1,(E)"Z");

  assertTrue(c1.nextIndexValid);

  assertEquals(1,c1.nextIndex);

  assertEquals("B",c1.current.value);

  assertEquals("Z",c1.next.value);

  assertEquals("[A, Z, B, C]",list.toString());

  c1.remove();

  assertEquals("[A, Z, C]",list.toString());

  try {

    c1.remove();

    fail();

  }

 catch (  final IllegalStateException ex) {

  }

}

Location: CursorableLinkedListTest.java

Content: 

@SuppressWarnings("unchecked") public void testInternalState_CursorNextNextPreviousRemoveByIterator(){

  list.add((E)"A");

  list.add((E)"B");

  list.add((E)"C");

  final CursorableLinkedList.Cursor<E> c1=list.cursor();

  assertEquals("A",c1.next());

  assertEquals("B",c1.next());

  assertEquals("B",c1.previous());

  c1.remove();

  assertTrue(c1.nextIndexValid);

  assertEquals(1,c1.nextIndex);

  assertFalse(c1.currentRemovedByAnother);

  assertNull(c1.current);

  assertEquals("C",c1.next.value);

  assertEquals("[A, C]",list.toString());

  try {

    c1.remove();

    fail();

  }

 catch (  final IllegalStateException ex) {

  }

}

Location: CursorableLinkedListTest.java

Content: 

@SuppressWarnings("unchecked") public void testInternalState_CursorNextNextPreviousRemoveIndex1ByList(){

  list.add((E)"A");

  list.add((E)"B");

  list.add((E)"C");

  final CursorableLinkedList.Cursor<E> c1=list.cursor();

  assertEquals("A",c1.next());

  assertEquals("B",c1.next());

  assertEquals("B",c1.previous());

  assertEquals("B",list.remove(1));

  assertTrue(c1.nextIndexValid);

  assertEquals(1,c1.nextIndex);

  assertTrue(c1.currentRemovedByAnother);

  assertNull(c1.current);

  assertEquals("C",c1.next.value);

  assertEquals("[A, C]",list.toString());

  c1.remove();

  assertEquals("[A, C]",list.toString());

  try {

    c1.remove();

    fail();

  }

 catch (  final IllegalStateException ex) {

  }

}

Location: CursorableLinkedListTest.java

Content: 

@SuppressWarnings("unchecked") public void testInternalState_CursorNextNextPreviousSetByIterator(){

  list.add((E)"A");

  list.add((E)"B");

  list.add((E)"C");

  final CursorableLinkedList.Cursor<E> c1=list.cursor();

  assertEquals("A",c1.next());

  assertEquals("B",c1.next());

  assertEquals("B",c1.previous());

  c1.set((E)"Z");

  assertTrue(c1.nextIndexValid);

  assertEquals(1,c1.nextIndex);

  assertEquals("Z",c1.current.value);

  assertEquals("Z",c1.next.value);

  assertEquals("[A, Z, C]",list.toString());

  c1.remove();

  assertEquals("[A, C]",list.toString());

  try {

    c1.remove();

    fail();

  }

 catch (  final IllegalStateException ex) {

  }

}

Location: CursorableLinkedListTest.java

Content: 

@SuppressWarnings("unchecked") public void testInternalState_CursorNextNextRemoveByIterator(){

  list.add((E)"A");

  list.add((E)"B");

  list.add((E)"C");

  final CursorableLinkedList.Cursor<E> c1=list.cursor();

  assertEquals("A",c1.next());

  assertEquals("B",c1.next());

  c1.remove();

  assertTrue(c1.nextIndexValid);

  assertEquals(1,c1.nextIndex);

  assertFalse(c1.currentRemovedByAnother);

  assertNull(c1.current);

  assertEquals("C",c1.next.value);

  assertEquals("[A, C]",list.toString());

  try {

    c1.remove();

    fail();

  }

 catch (  final IllegalStateException ex) {

  }

}

Location: CursorableLinkedListTest.java

Content: 

@SuppressWarnings("unchecked") public void testInternalState_CursorNextNextRemoveByListSetByIterator(){

  list.add((E)"A");

  list.add((E)"B");

  list.add((E)"C");

  final CursorableLinkedList.Cursor<E> c1=list.cursor();

  assertEquals("A",c1.next());

  assertEquals("B",c1.next());

  list.remove(1);

  assertTrue(c1.nextIndexValid);

  assertEquals(1,c1.nextIndex);

  assertNull(c1.current);

  assertEquals("C",c1.next.value);

  assertEquals("[A, C]",list.toString());

  try {

    c1.set((E)"Z");

    fail();

  }

 catch (  final IllegalStateException ex) {

  }

}

Location: CursorableLinkedListTest.java

Content: 

@SuppressWarnings("unchecked") public void testInternalState_CursorNextNextRemoveIndex1ByList(){

  list.add((E)"A");

  list.add((E)"B");

  list.add((E)"C");

  final CursorableLinkedList.Cursor<E> c1=list.cursor();

  assertEquals("A",c1.next());

  assertEquals("B",c1.next());

  assertEquals("B",list.remove(1));

  assertTrue(c1.nextIndexValid);

  assertEquals(1,c1.nextIndex);

  assertTrue(c1.currentRemovedByAnother);

  assertNull(c1.current);

  assertEquals("C",c1.next.value);

  assertEquals("[A, C]",list.toString());

  c1.remove();

  assertEquals("[A, C]",list.toString());

  try {

    c1.remove();

    fail();

  }

 catch (  final IllegalStateException ex) {

  }

}

Location: CursorableLinkedListTest.java

Content: 

@SuppressWarnings("unchecked") public void testInternalState_CursorNextNextSetByIterator(){

  list.add((E)"A");

  list.add((E)"B");

  list.add((E)"C");

  final CursorableLinkedList.Cursor<E> c1=list.cursor();

  assertEquals("A",c1.next());

  assertEquals("B",c1.next());

  c1.set((E)"Z");

  assertTrue(c1.nextIndexValid);

  assertEquals(2,c1.nextIndex);

  assertEquals("Z",c1.current.value);

  assertEquals("C",c1.next.value);

  assertEquals("[A, Z, C]",list.toString());

  c1.remove();

  assertEquals("[A, C]",list.toString());

  try {

    c1.remove();

    fail();

  }

 catch (  final IllegalStateException ex) {

  }

}

Location: CursorableLinkedListTest.java

Content: 

@SuppressWarnings("unchecked") public void testInternalState_CursorNextRemoveIndex1ByList(){

  list.add((E)"A");

  list.add((E)"B");

  list.add((E)"C");

  final CursorableLinkedList.Cursor<E> c1=list.cursor();

  assertEquals("A",c1.next());

  assertEquals("B",list.remove(1));

  assertTrue(c1.nextIndexValid);

  assertEquals(1,c1.nextIndex);

  assertFalse(c1.currentRemovedByAnother);

  assertEquals("A",c1.current.value);

  assertEquals("C",c1.next.value);

  assertEquals("[A, C]",list.toString());

  c1.remove();

  assertEquals("[C]",list.toString());

  try {

    c1.remove();

    fail();

  }

 catch (  final IllegalStateException ex) {

  }

}

Location: CursorableLinkedListTest.java

Content: 

@SuppressWarnings("unchecked") public void testListIteratorNavigation(){

  list.add((E)"1");

  list.add((E)"2");

  list.add((E)"3");

  list.add((E)"4");

  list.add((E)"5");

  final ListIterator<E> it=list.listIterator();

  assertTrue(it.hasNext());

  assertFalse(it.hasPrevious());

  assertEquals(-1,it.previousIndex());

  assertEquals(0,it.nextIndex());

  assertEquals("1",it.next());

  assertTrue(it.hasNext());

  assertTrue(it.hasPrevious());

  assertEquals(0,it.previousIndex());

  assertEquals(1,it.nextIndex());

  assertEquals("1",it.previous());

  assertTrue(it.hasNext());

  assertFalse(it.hasPrevious());

  assertEquals(-1,it.previousIndex());

  assertEquals(0,it.nextIndex());

  assertEquals("1",it.next());

  assertTrue(it.hasNext());

  assertTrue(it.hasPrevious());

  assertEquals(0,it.previousIndex());

  assertEquals(1,it.nextIndex());

  assertEquals("2",it.next());

  assertTrue(it.hasNext());

  assertTrue(it.hasPrevious());

  assertEquals(1,it.previousIndex());

  assertEquals(2,it.nextIndex());

  assertEquals("2",it.previous());

  assertTrue(it.hasNext());

  assertTrue(it.hasPrevious());

  assertEquals(0,it.previousIndex());

  assertEquals(1,it.nextIndex());

  assertEquals("2",it.next());

  assertTrue(it.hasNext());

  assertTrue(it.hasPrevious());

  assertEquals(1,it.previousIndex());

  assertEquals(2,it.nextIndex());

  assertEquals("3",it.next());

  assertTrue(it.hasNext());

  assertTrue(it.hasPrevious());

  assertEquals(2,it.previousIndex());

  assertEquals(3,it.nextIndex());

  assertEquals("4",it.next());

  assertTrue(it.hasNext());

  assertTrue(it.hasPrevious());

  assertEquals(3,it.previousIndex());

  assertEquals(4,it.nextIndex());

  assertEquals("5",it.next());

  assertFalse(it.hasNext());

  assertTrue(it.hasPrevious());

  assertEquals(4,it.previousIndex());

  assertEquals(5,it.nextIndex());

  assertEquals("5",it.previous());

  assertTrue(it.hasNext());

  assertTrue(it.hasPrevious());

  assertEquals(3,it.previousIndex());

  assertEquals(4,it.nextIndex());

  assertEquals("4",it.previous());

  assertTrue(it.hasNext());

  assertTrue(it.hasPrevious());

  assertEquals(2,it.previousIndex());

  assertEquals(3,it.nextIndex());

  assertEquals("3",it.previous());

  assertTrue(it.hasNext());

  assertTrue(it.hasPrevious());

  assertEquals(1,it.previousIndex());

  assertEquals(2,it.nextIndex());

  assertEquals("2",it.previous());

  assertTrue(it.hasNext());

  assertTrue(it.hasPrevious());

  assertEquals(0,it.previousIndex());

  assertEquals(1,it.nextIndex());

  assertEquals("1",it.previous());

  assertTrue(it.hasNext());

  assertFalse(it.hasPrevious());

  assertEquals(-1,it.previousIndex());

  assertEquals(0,it.nextIndex());

}

Location: CursorableLinkedListTest.java

Content: 

@SuppressWarnings("unchecked") public void testListIteratorRemove(){

  list.add((E)"1");

  list.add((E)"2");

  list.add((E)"3");

  list.add((E)"4");

  list.add((E)"5");

  final ListIterator<E> it=list.listIterator();

  try {

    it.remove();

  }

 catch (  final IllegalStateException e) {

  }

  assertEquals("1",it.next());

  assertEquals("2",it.next());

  assertEquals("[1, 2, 3, 4, 5]",list.toString());

  it.remove();

  assertEquals("[1, 3, 4, 5]",list.toString());

  assertEquals("3",it.next());

  assertEquals("3",it.previous());

  assertEquals("1",it.previous());

  it.remove();

  assertEquals("[3, 4, 5]",list.toString());

  assertFalse(it.hasPrevious());

  assertEquals("3",it.next());

  it.remove();

  assertEquals("[4, 5]",list.toString());

  try {

    it.remove();

  }

 catch (  final IllegalStateException e) {

  }

  assertEquals("4",it.next());

  assertEquals("5",it.next());

  it.remove();

  assertEquals("[4]",list.toString());

  assertEquals("4",it.previous());

  it.remove();

  assertEquals("[]",list.toString());

}

Location: CursorableLinkedListTest.java

Content: 

@SuppressWarnings("unchecked") public void testLongSerialization() throws Exception {

  for (int i=0; i < 10000; i++) {

    list.add((E)Integer.valueOf(i));

  }

  final java.io.ByteArrayOutputStream buf=new java.io.ByteArrayOutputStream();

  final java.io.ObjectOutputStream out=new java.io.ObjectOutputStream(buf);

  out.writeObject(list);

  out.flush();

  out.close();

  final java.io.ByteArrayInputStream bufin=new java.io.ByteArrayInputStream(buf.toByteArray());

  final java.io.ObjectInputStream in=new java.io.ObjectInputStream(bufin);

  final Object list2=in.readObject();

  assertNotSame(list,list2);

  assertEquals(list2,list);

  assertEquals(list,list2);

}

Location: CursorableLinkedListTest.java

Content: 

@SuppressWarnings("unchecked") public void testSerialization() throws Exception {

  list.add((E)"A");

  list.add((E)"B");

  list.add((E)"C");

  list.add((E)"D");

  list.add((E)"E");

  final java.io.ByteArrayOutputStream buf=new java.io.ByteArrayOutputStream();

  final java.io.ObjectOutputStream out=new java.io.ObjectOutputStream(buf);

  out.writeObject(list);

  out.flush();

  out.close();

  final java.io.ByteArrayInputStream bufin=new java.io.ByteArrayInputStream(buf.toByteArray());

  final java.io.ObjectInputStream in=new java.io.ObjectInputStream(bufin);

  final Object list2=in.readObject();

  assertNotSame(list,list2);

  assertEquals(list2,list);

  assertEquals(list,list2);

}

Location: CursorableLinkedListTest.java

Content: 

@SuppressWarnings("unchecked") public void testSerializationWithOpenCursor() throws Exception {

  list.add((E)"A");

  list.add((E)"B");

  list.add((E)"C");

  list.add((E)"D");

  list.add((E)"E");

  final java.io.ByteArrayOutputStream buf=new java.io.ByteArrayOutputStream();

  final java.io.ObjectOutputStream out=new java.io.ObjectOutputStream(buf);

  out.writeObject(list);

  out.flush();

  out.close();

  final java.io.ByteArrayInputStream bufin=new java.io.ByteArrayInputStream(buf.toByteArray());

  final java.io.ObjectInputStream in=new java.io.ObjectInputStream(bufin);

  final Object list2=in.readObject();

  assertNotSame(list,list2);

  assertEquals(list2,list);

  assertEquals(list,list2);

}

Location: CursorableLinkedListTest.java

Content: 

@SuppressWarnings("unchecked") public void testSet(){

  list.add((E)"1");

  list.add((E)"2");

  list.add((E)"3");

  list.add((E)"4");

  list.add((E)"5");

  assertEquals("[1, 2, 3, 4, 5]",list.toString());

  list.set(0,(E)"A");

  assertEquals("[A, 2, 3, 4, 5]",list.toString());

  list.set(1,(E)"B");

  assertEquals("[A, B, 3, 4, 5]",list.toString());

  list.set(2,(E)"C");

  assertEquals("[A, B, C, 4, 5]",list.toString());

  list.set(3,(E)"D");

  assertEquals("[A, B, C, D, 5]",list.toString());

  list.set(4,(E)"E");

  assertEquals("[A, B, C, D, E]",list.toString());

}

Location: CursorableLinkedListTest.java

Content: 

@SuppressWarnings("unchecked") public void testSubListAddBegin(){

  list.add((E)"A");

  list.add((E)"B");

  list.add((E)"C");

  list.add((E)"D");

  list.add((E)"E");

  final List<E> sublist=list.subList(0,0);

  sublist.add((E)"a");

  assertEquals("[a, A, B, C, D, E]",list.toString());

  assertEquals("[a]",sublist.toString());

  sublist.add((E)"b");

  assertEquals("[a, b, A, B, C, D, E]",list.toString());

  assertEquals("[a, b]",sublist.toString());

}

Location: CursorableLinkedListTest.java

Content: 

@SuppressWarnings("unchecked") public void testSubListAddEnd(){

  list.add((E)"A");

  list.add((E)"B");

  list.add((E)"C");

  list.add((E)"D");

  list.add((E)"E");

  final List<E> sublist=list.subList(5,5);

  sublist.add((E)"F");

  assertEquals("[A, B, C, D, E, F]",list.toString());

  assertEquals("[F]",sublist.toString());

  sublist.add((E)"G");

  assertEquals("[A, B, C, D, E, F, G]",list.toString());

  assertEquals("[F, G]",sublist.toString());

}

Location: CursorableLinkedListTest.java

Content: 

@SuppressWarnings("unchecked") public void testSubListAddMiddle(){

  list.add((E)"A");

  list.add((E)"B");

  list.add((E)"C");

  list.add((E)"D");

  list.add((E)"E");

  final List<E> sublist=list.subList(1,3);

  sublist.add((E)"a");

  assertEquals("[A, B, C, a, D, E]",list.toString());

  assertEquals("[B, C, a]",sublist.toString());

  sublist.add((E)"b");

  assertEquals("[A, B, C, a, b, D, E]",list.toString());

  assertEquals("[B, C, a, b]",sublist.toString());

}

Location: CursorableLinkedListTest.java

Content: 

@SuppressWarnings("unchecked") public void testSubListRemove(){

  list.add((E)"A");

  list.add((E)"B");

  list.add((E)"C");

  list.add((E)"D");

  list.add((E)"E");

  final List<E> sublist=list.subList(1,4);

  assertEquals("[B, C, D]",sublist.toString());

  assertEquals("[A, B, C, D, E]",list.toString());

  sublist.remove("C");

  assertEquals("[B, D]",sublist.toString());

  assertEquals("[A, B, D, E]",list.toString());

  sublist.remove(1);

  assertEquals("[B]",sublist.toString());

  assertEquals("[A, B, E]",list.toString());

  sublist.clear();

  assertEquals("[]",sublist.toString());

  assertEquals("[A, E]",list.toString());

}

Location: CursorableLinkedListTest.java

Content: 

@SuppressWarnings("unchecked") public void testToArray(){

  list.add((E)"1");

  list.add((E)"2");

  list.add((E)"3");

  list.add((E)"4");

  list.add((E)"5");

  final Object[] elts=list.toArray();

  assertEquals("1",elts[0]);

  assertEquals("2",elts[1]);

  assertEquals("3",elts[2]);

  assertEquals("4",elts[3]);

  assertEquals("5",elts[4]);

  assertEquals(5,elts.length);

  final String[] elts2=list.toArray(new String[0]);

  assertEquals("1",elts2[0]);

  assertEquals("2",elts2[1]);

  assertEquals("3",elts2[2]);

  assertEquals("4",elts2[3]);

  assertEquals("5",elts2[4]);

  assertEquals(5,elts2.length);

  final String[] elts3=new String[5];

  assertSame(elts3,list.toArray(elts3));

  assertEquals("1",elts3[0]);

  assertEquals("2",elts3[1]);

  assertEquals("3",elts3[2]);

  assertEquals("4",elts3[3]);

  assertEquals("5",elts3[4]);

  assertEquals(5,elts3.length);

  final String[] elts4=new String[3];

  final String[] elts4b=list.toArray(elts4);

  assertNotSame(elts4,elts4b);

  assertEquals("1",elts4b[0]);

  assertEquals("2",elts4b[1]);

  assertEquals("3",elts4b[2]);

  assertEquals("4",elts4b[3]);

  assertEquals("5",elts4b[4]);

  assertEquals(5,elts4b.length);

}

Location: CursorableLinkedListTest.java

Content: 

public CursorableLinkedListTest(final String testName){

  super(testName);

}

Location: CursorableLinkedListTest.java

Content: 

@SuppressWarnings("unchecked") public void testCursorAdd(){

  final CursorableLinkedList.Cursor<E> it=list.cursor();

  it.add((E)"1");

  assertEquals("[1]",list.toString());

  it.add((E)"3");

  assertEquals("[1, 3]",list.toString());

  it.add((E)"5");

  assertEquals("[1, 3, 5]",list.toString());

  assertEquals("5",it.previous());

  it.add((E)"4");

  assertEquals("[1, 3, 4, 5]",list.toString());

  assertEquals("4",it.previous());

  assertEquals("3",it.previous());

  it.add((E)"2");

  assertEquals("[1, 2, 3, 4, 5]",list.toString());

  it.close();

}

Location: CursorableLinkedListTest.java

Content: 

@SuppressWarnings("unchecked") public void testCursorConcurrentModification(){

  list.add((E)"1");

  list.add((E)"2");

  list.add((E)"3");

  list.add((E)"5");

  list.add((E)"7");

  list.add((E)"9");

  final CursorableLinkedList.Cursor<E> c1=list.cursor();

  final CursorableLinkedList.Cursor<E> c2=list.cursor();

  final Iterator<E> li=list.iterator();

  assertEquals("1",li.next());

  assertEquals("2",li.next());

  li.remove();

  assertEquals("3",li.next());

  assertEquals("1",c1.next());

  assertEquals("3",c1.next());

  assertEquals("1",c2.next());

  c1.remove();

  assertEquals("5",c2.next());

  c2.add((E)"6");

  assertEquals("5",c1.next());

  assertEquals("6",c1.next());

  assertEquals("7",c1.next());

  list.add(0,(E)"0");

  list.add(5,(E)"8");

  assertEquals("8",c1.next());

  assertEquals("9",c1.next());

  c1.add((E)"10");

  assertEquals("7",c2.next());

  assertEquals("8",c2.next());

  assertEquals("9",c2.next());

  assertEquals("10",c2.next());

  try {

    c2.next();

    fail();

  }

 catch (  final NoSuchElementException nse) {

  }

  try {

    li.next();

    fail();

  }

 catch (  final ConcurrentModificationException cme) {

  }

  c1.close();

  c2.close();

}

Location: CursorableLinkedListTest.java

Content: 

@SuppressWarnings("unchecked") public void testCursorNavigation(){

  list.add((E)"1");

  list.add((E)"2");

  list.add((E)"3");

  list.add((E)"4");

  list.add((E)"5");

  final CursorableLinkedList.Cursor<E> it=list.cursor();

  assertTrue(it.hasNext());

  assertFalse(it.hasPrevious());

  assertEquals("1",it.next());

  assertTrue(it.hasNext());

  assertTrue(it.hasPrevious());

  assertEquals("1",it.previous());

  assertTrue(it.hasNext());

  assertFalse(it.hasPrevious());

  assertEquals("1",it.next());

  assertTrue(it.hasNext());

  assertTrue(it.hasPrevious());

  assertEquals("2",it.next());

  assertTrue(it.hasNext());

  assertTrue(it.hasPrevious());

  assertEquals("2",it.previous());

  assertTrue(it.hasNext());

  assertTrue(it.hasPrevious());

  assertEquals("2",it.next());

  assertTrue(it.hasNext());

  assertTrue(it.hasPrevious());

  assertEquals("3",it.next());

  assertTrue(it.hasNext());

  assertTrue(it.hasPrevious());

  assertEquals("4",it.next());

  assertTrue(it.hasNext());

  assertTrue(it.hasPrevious());

  assertEquals("5",it.next());

  assertFalse(it.hasNext());

  assertTrue(it.hasPrevious());

  assertEquals("5",it.previous());

  assertTrue(it.hasNext());

  assertTrue(it.hasPrevious());

  assertEquals("4",it.previous());

  assertTrue(it.hasNext());

  assertTrue(it.hasPrevious());

  assertEquals("3",it.previous());

  assertTrue(it.hasNext());

  assertTrue(it.hasPrevious());

  assertEquals("2",it.previous());

  assertTrue(it.hasNext());

  assertTrue(it.hasPrevious());

  assertEquals("1",it.previous());

  assertTrue(it.hasNext());

  assertFalse(it.hasPrevious());

  it.close();

}

Location: CursorableLinkedListTest.java

Content: 

@SuppressWarnings("unchecked") public void testCursorNextIndexAddAfter(){

  list.add((E)"1");

  list.add((E)"2");

  list.add((E)"3");

  list.add((E)"5");

  final CursorableLinkedList.Cursor<E> c1=list.cursor();

  assertEquals(0,c1.nextIndex());

  list.add(1,(E)"0");

  assertEquals(0,c1.nextIndex());

  assertEquals("1",c1.next());

  assertEquals(1,c1.nextIndex());

  assertEquals("0",c1.next());

}

Location: CursorableLinkedListTest.java

Content: 

@SuppressWarnings("unchecked") public void testCursorNextIndexAddBefore(){

  list.add((E)"1");

  list.add((E)"2");

  list.add((E)"3");

  list.add((E)"5");

  final CursorableLinkedList.Cursor<E> c1=list.cursor();

  assertEquals(0,c1.nextIndex());

  assertEquals("1",c1.next());

  list.add(0,(E)"0");

  assertEquals(2,c1.nextIndex());

  assertEquals("2",c1.next());

}

Location: CursorableLinkedListTest.java

Content: 

@SuppressWarnings("unchecked") public void testCursorNextIndexAddNext(){

  list.add((E)"1");

  list.add((E)"2");

  list.add((E)"3");

  list.add((E)"5");

  final CursorableLinkedList.Cursor<E> c1=list.cursor();

  assertEquals(0,c1.nextIndex());

  list.add(0,(E)"0");

  assertEquals(0,c1.nextIndex());

  assertEquals("0",c1.next());

  assertEquals(1,c1.nextIndex());

  assertEquals("1",c1.next());

}

Location: CursorableLinkedListTest.java

Content: 

@SuppressWarnings("unchecked") public void testCursorNextIndexFirst(){

  list.add((E)"1");

  list.add((E)"2");

  list.add((E)"3");

  list.add((E)"5");

  final CursorableLinkedList.Cursor<E> c1=list.cursor();

  assertEquals(0,c1.nextIndex());

  list.remove(0);

  assertEquals(0,c1.nextIndex());

  assertEquals("2",c1.next());

  assertEquals(1,c1.nextIndex());

  assertEquals("3",c1.next());

}

Location: CursorableLinkedListTest.java

Content: 

@SuppressWarnings("unchecked") public void testCursorNextIndexMid(){

  list.add((E)"1");

  list.add((E)"2");

  list.add((E)"3");

  list.add((E)"5");

  final CursorableLinkedList.Cursor<E> c1=list.cursor();

  final Iterator<E> li=list.iterator();

  assertEquals("1",li.next());

  assertEquals("2",li.next());

  li.remove();

  assertEquals(0,c1.nextIndex());

  assertEquals("1",c1.next());

  assertEquals(1,c1.nextIndex());

  assertEquals("3",c1.next());

}

Location: CursorableLinkedListTest.java

Content: 

@SuppressWarnings("unchecked") public void testCursorRemove(){

  list.add((E)"1");

  list.add((E)"2");

  list.add((E)"3");

  list.add((E)"4");

  list.add((E)"5");

  final CursorableLinkedList.Cursor<E> it=list.cursor();

  try {

    it.remove();

    fail();

  }

 catch (  final IllegalStateException e) {

  }

  assertEquals("1",it.next());

  assertEquals("2",it.next());

  assertEquals("[1, 2, 3, 4, 5]",list.toString());

  it.remove();

  assertEquals("[1, 3, 4, 5]",list.toString());

  assertEquals("3",it.next());

  assertEquals("3",it.previous());

  assertEquals("1",it.previous());

  it.remove();

  assertEquals("[3, 4, 5]",list.toString());

  assertFalse(it.hasPrevious());

  assertEquals("3",it.next());

  it.remove();

  assertEquals("[4, 5]",list.toString());

  try {

    it.remove();

  }

 catch (  final IllegalStateException e) {

  }

  assertEquals("4",it.next());

  assertEquals("5",it.next());

  it.remove();

  assertEquals("[4]",list.toString());

  assertEquals("4",it.previous());

  it.remove();

  assertEquals("[]",list.toString());

  it.close();

}

Location: CursorableLinkedListTest.java

Content: 

@SuppressWarnings("unchecked") public void testCursorSet(){

  list.add((E)"1");

  list.add((E)"2");

  list.add((E)"3");

  list.add((E)"4");

  list.add((E)"5");

  final CursorableLinkedList.Cursor<E> it=list.cursor();

  assertEquals("1",it.next());

  it.set((E)"a");

  assertEquals("a",it.previous());

  it.set((E)"A");

  assertEquals("A",it.next());

  assertEquals("2",it.next());

  it.set((E)"B");

  assertEquals("3",it.next());

  assertEquals("4",it.next());

  it.set((E)"D");

  assertEquals("5",it.next());

  it.set((E)"E");

  assertEquals("[A, B, 3, D, E]",list.toString());

  it.close();

}

Location: CursorableLinkedListTest.java

Content: 

@SuppressWarnings("unchecked") public void testEqualsAndHashCode(){

  assertEquals(list,list);

  assertEquals(list.hashCode(),list.hashCode());

  list.add((E)"A");

  assertEquals(list,list);

  assertEquals(list.hashCode(),list.hashCode());

  final CursorableLinkedList<E> list2=new CursorableLinkedList<>();

  assertFalse(list.equals(list2));

  assertFalse(list2.equals(list));

  final java.util.List<E> list3=new java.util.LinkedList<>();

  assertFalse(list.equals(list3));

  assertFalse(list3.equals(list));

  assertEquals(list2,list3);

  assertEquals(list3,list2);

  assertEquals(list2.hashCode(),list3.hashCode());

  list2.add((E)"A");

  assertEquals(list,list2);

  assertEquals(list2,list);

  assertFalse(list2.equals(list3));

  assertFalse(list3.equals(list2));

  list3.add((E)"A");

  assertEquals(list2,list3);

  assertEquals(list3,list2);

  assertEquals(list2.hashCode(),list3.hashCode());

  list.add((E)"B");

  assertEquals(list,list);

  assertFalse(list.equals(list2));

  assertFalse(list2.equals(list));

  assertFalse(list.equals(list3));

  assertFalse(list3.equals(list));

  list2.add((E)"B");

  list3.add((E)"B");

  assertEquals(list,list);

  assertEquals(list,list2);

  assertEquals(list2,list);

  assertEquals(list2,list3);

  assertEquals(list3,list2);

  assertEquals(list2.hashCode(),list3.hashCode());

  list.add((E)"C");

  list2.add((E)"C");

  list3.add((E)"C");

  assertEquals(list,list);

  assertEquals(list,list2);

  assertEquals(list2,list);

  assertEquals(list2,list3);

  assertEquals(list3,list2);

  assertEquals(list.hashCode(),list2.hashCode());

  assertEquals(list2.hashCode(),list3.hashCode());

  list.add((E)"D");

  list2.addFirst((E)"D");

  assertEquals(list,list);

  assertFalse(list.equals(list2));

  assertFalse(list2.equals(list));

}

Location: CursorableLinkedListTest.java

Content: 

@SuppressWarnings("unchecked") public void testInternalState_CursorNextAddIndex1ByList(){

  list.add((E)"A");

  list.add((E)"B");

  list.add((E)"C");

  final CursorableLinkedList.Cursor<E> c1=list.cursor();

  assertEquals("A",c1.next());

  list.add(1,(E)"Z");

  assertTrue(c1.nextIndexValid);

  assertEquals(1,c1.nextIndex);

  assertEquals("A",c1.current.value);

  assertEquals("Z",c1.next.value);

  assertEquals("[A, Z, B, C]",list.toString());

  c1.remove();

  assertEquals("[Z, B, C]",list.toString());

  try {

    c1.remove();

    fail();

  }

 catch (  final IllegalStateException ex) {

  }

}

Location: CursorableLinkedListTest.java

Content: 

@SuppressWarnings("unchecked") public void testInternalState_CursorNextNextAddByIterator(){

  list.add((E)"A");

  list.add((E)"B");

  list.add((E)"C");

  final CursorableLinkedList.Cursor<E> c1=list.cursor();

  assertEquals("A",c1.next());

  assertEquals("B",c1.next());

  c1.add((E)"Z");

  assertTrue(c1.nextIndexValid);

  assertEquals(3,c1.nextIndex);

  assertFalse(c1.currentRemovedByAnother);

  assertNull(c1.current);

  assertEquals("C",c1.next.value);

  assertEquals("[A, B, Z, C]",list.toString());

  try {

    c1.remove();

    fail();

  }

 catch (  final IllegalStateException ex) {

  }

}

Location: CursorableLinkedListTest.java

Content: 

@SuppressWarnings("unchecked") public void testInternalState_CursorNextNextAddIndex1ByList(){

  list.add((E)"A");

  list.add((E)"B");

  list.add((E)"C");

  final CursorableLinkedList.Cursor<E> c1=list.cursor();

  assertEquals("A",c1.next());

  assertEquals("B",c1.next());

  list.add(1,(E)"Z");

  assertFalse(c1.nextIndexValid);

  assertEquals("B",c1.current.value);

  assertEquals("C",c1.next.value);

  assertEquals("[A, Z, B, C]",list.toString());

  c1.remove();

  assertEquals("[A, Z, C]",list.toString());

  try {

    c1.remove();

    fail();

  }

 catch (  final IllegalStateException ex) {

  }

}

Location: CursorableLinkedListTest.java

Content: 

@SuppressWarnings("unchecked") public void testInternalState_CursorNextNextNextRemoveIndex1ByList(){

  list.add((E)"A");

  list.add((E)"B");

  list.add((E)"C");

  list.add((E)"D");

  final CursorableLinkedList.Cursor<E> c1=list.cursor();

  assertEquals("A",c1.next());

  assertEquals("B",c1.next());

  assertEquals("C",c1.next());

  assertEquals("B",list.remove(1));

  assertFalse(c1.nextIndexValid);

  assertFalse(c1.currentRemovedByAnother);

  assertEquals("C",c1.current.value);

  assertEquals("D",c1.next.value);

  assertEquals("[A, C, D]",list.toString());

  c1.remove();

  assertEquals("[A, D]",list.toString());

  try {

    c1.remove();

    fail();

  }

 catch (  final IllegalStateException ex) {

  }

}

Location: CursorableLinkedListTest.java

Content: 

@SuppressWarnings("unchecked") public void testInternalState_CursorNextNextPreviousAddByIterator(){

  list.add((E)"A");

  list.add((E)"B");

  list.add((E)"C");

  final CursorableLinkedList.Cursor<E> c1=list.cursor();

  assertEquals("A",c1.next());

  assertEquals("B",c1.next());

  assertEquals("B",c1.previous());

  c1.add((E)"Z");

  assertTrue(c1.nextIndexValid);

  assertEquals(2,c1.nextIndex);

  assertNull(c1.current);

  assertEquals("B",c1.next.value);

  assertEquals("[A, Z, B, C]",list.toString());

  try {

    c1.remove();

    fail();

  }

 catch (  final IllegalStateException ex) {

  }

}

Location: CursorableLinkedListTest.java

Content: 

@SuppressWarnings("unchecked") public void testInternalState_CursorNextNextPreviousAddIndex1ByList(){

  list.add((E)"A");

  list.add((E)"B");

  list.add((E)"C");

  final CursorableLinkedList.Cursor<E> c1=list.cursor();

  assertEquals("A",c1.next());

  assertEquals("B",c1.next());

  assertEquals("B",c1.previous());

  list.add(1,(E)"Z");

  assertTrue(c1.nextIndexValid);

  assertEquals(1,c1.nextIndex);

  assertEquals("B",c1.current.value);

  assertEquals("Z",c1.next.value);

  assertEquals("[A, Z, B, C]",list.toString());

  c1.remove();

  assertEquals("[A, Z, C]",list.toString());

  try {

    c1.remove();

    fail();

  }

 catch (  final IllegalStateException ex) {

  }

}

Location: CursorableLinkedListTest.java

Content: 

@SuppressWarnings("unchecked") public void testInternalState_CursorNextNextPreviousRemoveByIterator(){

  list.add((E)"A");

  list.add((E)"B");

  list.add((E)"C");

  final CursorableLinkedList.Cursor<E> c1=list.cursor();

  assertEquals("A",c1.next());

  assertEquals("B",c1.next());

  assertEquals("B",c1.previous());

  c1.remove();

  assertTrue(c1.nextIndexValid);

  assertEquals(1,c1.nextIndex);

  assertFalse(c1.currentRemovedByAnother);

  assertNull(c1.current);

  assertEquals("C",c1.next.value);

  assertEquals("[A, C]",list.toString());

  try {

    c1.remove();

    fail();

  }

 catch (  final IllegalStateException ex) {

  }

}

Location: CursorableLinkedListTest.java

Content: 

@SuppressWarnings("unchecked") public void testInternalState_CursorNextNextPreviousRemoveIndex1ByList(){

  list.add((E)"A");

  list.add((E)"B");

  list.add((E)"C");

  final CursorableLinkedList.Cursor<E> c1=list.cursor();

  assertEquals("A",c1.next());

  assertEquals("B",c1.next());

  assertEquals("B",c1.previous());

  assertEquals("B",list.remove(1));

  assertTrue(c1.nextIndexValid);

  assertEquals(1,c1.nextIndex);

  assertTrue(c1.currentRemovedByAnother);

  assertNull(c1.current);

  assertEquals("C",c1.next.value);

  assertEquals("[A, C]",list.toString());

  c1.remove();

  assertEquals("[A, C]",list.toString());

  try {

    c1.remove();

    fail();

  }

 catch (  final IllegalStateException ex) {

  }

}

Location: CursorableLinkedListTest.java

Content: 

@SuppressWarnings("unchecked") public void testInternalState_CursorNextNextPreviousSetByIterator(){

  list.add((E)"A");

  list.add((E)"B");

  list.add((E)"C");

  final CursorableLinkedList.Cursor<E> c1=list.cursor();

  assertEquals("A",c1.next());

  assertEquals("B",c1.next());

  assertEquals("B",c1.previous());

  c1.set((E)"Z");

  assertTrue(c1.nextIndexValid);

  assertEquals(1,c1.nextIndex);

  assertEquals("Z",c1.current.value);

  assertEquals("Z",c1.next.value);

  assertEquals("[A, Z, C]",list.toString());

  c1.remove();

  assertEquals("[A, C]",list.toString());

  try {

    c1.remove();

    fail();

  }

 catch (  final IllegalStateException ex) {

  }

}

Location: CursorableLinkedListTest.java

Content: 

@SuppressWarnings("unchecked") public void testInternalState_CursorNextNextRemoveByIterator(){

  list.add((E)"A");

  list.add((E)"B");

  list.add((E)"C");

  final CursorableLinkedList.Cursor<E> c1=list.cursor();

  assertEquals("A",c1.next());

  assertEquals("B",c1.next());

  c1.remove();

  assertTrue(c1.nextIndexValid);

  assertEquals(1,c1.nextIndex);

  assertFalse(c1.currentRemovedByAnother);

  assertNull(c1.current);

  assertEquals("C",c1.next.value);

  assertEquals("[A, C]",list.toString());

  try {

    c1.remove();

    fail();

  }

 catch (  final IllegalStateException ex) {

  }

}

Location: CursorableLinkedListTest.java

Content: 

@SuppressWarnings("unchecked") public void testInternalState_CursorNextNextRemoveByListSetByIterator(){

  list.add((E)"A");

  list.add((E)"B");

  list.add((E)"C");

  final CursorableLinkedList.Cursor<E> c1=list.cursor();

  assertEquals("A",c1.next());

  assertEquals("B",c1.next());

  list.remove(1);

  assertTrue(c1.nextIndexValid);

  assertEquals(1,c1.nextIndex);

  assertNull(c1.current);

  assertEquals("C",c1.next.value);

  assertEquals("[A, C]",list.toString());

  try {

    c1.set((E)"Z");

    fail();

  }

 catch (  final IllegalStateException ex) {

  }

}

Location: CursorableLinkedListTest.java

Content: 

@SuppressWarnings("unchecked") public void testInternalState_CursorNextNextRemoveIndex1ByList(){

  list.add((E)"A");

  list.add((E)"B");

  list.add((E)"C");

  final CursorableLinkedList.Cursor<E> c1=list.cursor();

  assertEquals("A",c1.next());

  assertEquals("B",c1.next());

  assertEquals("B",list.remove(1));

  assertTrue(c1.nextIndexValid);

  assertEquals(1,c1.nextIndex);

  assertTrue(c1.currentRemovedByAnother);

  assertNull(c1.current);

  assertEquals("C",c1.next.value);

  assertEquals("[A, C]",list.toString());

  c1.remove();

  assertEquals("[A, C]",list.toString());

  try {

    c1.remove();

    fail();

  }

 catch (  final IllegalStateException ex) {

  }

}

Location: CursorableLinkedListTest.java

Content: 

@SuppressWarnings("unchecked") public void testInternalState_CursorNextNextSetByIterator(){

  list.add((E)"A");

  list.add((E)"B");

  list.add((E)"C");

  final CursorableLinkedList.Cursor<E> c1=list.cursor();

  assertEquals("A",c1.next());

  assertEquals("B",c1.next());

  c1.set((E)"Z");

  assertTrue(c1.nextIndexValid);

  assertEquals(2,c1.nextIndex);

  assertEquals("Z",c1.current.value);

  assertEquals("C",c1.next.value);

  assertEquals("[A, Z, C]",list.toString());

  c1.remove();

  assertEquals("[A, C]",list.toString());

  try {

    c1.remove();

    fail();

  }

 catch (  final IllegalStateException ex) {

  }

}

Location: CursorableLinkedListTest.java

Content: 

@SuppressWarnings("unchecked") public void testInternalState_CursorNextRemoveIndex1ByList(){

  list.add((E)"A");

  list.add((E)"B");

  list.add((E)"C");

  final CursorableLinkedList.Cursor<E> c1=list.cursor();

  assertEquals("A",c1.next());

  assertEquals("B",list.remove(1));

  assertTrue(c1.nextIndexValid);

  assertEquals(1,c1.nextIndex);

  assertFalse(c1.currentRemovedByAnother);

  assertEquals("A",c1.current.value);

  assertEquals("C",c1.next.value);

  assertEquals("[A, C]",list.toString());

  c1.remove();

  assertEquals("[C]",list.toString());

  try {

    c1.remove();

    fail();

  }

 catch (  final IllegalStateException ex) {

  }

}

Location: CursorableLinkedListTest.java

Content: 

@SuppressWarnings("unchecked") public void testListIteratorNavigation(){

  list.add((E)"1");

  list.add((E)"2");

  list.add((E)"3");

  list.add((E)"4");

  list.add((E)"5");

  final ListIterator<E> it=list.listIterator();

  assertTrue(it.hasNext());

  assertFalse(it.hasPrevious());

  assertEquals(-1,it.previousIndex());

  assertEquals(0,it.nextIndex());

  assertEquals("1",it.next());

  assertTrue(it.hasNext());

  assertTrue(it.hasPrevious());

  assertEquals(0,it.previousIndex());

  assertEquals(1,it.nextIndex());

  assertEquals("1",it.previous());

  assertTrue(it.hasNext());

  assertFalse(it.hasPrevious());

  assertEquals(-1,it.previousIndex());

  assertEquals(0,it.nextIndex());

  assertEquals("1",it.next());

  assertTrue(it.hasNext());

  assertTrue(it.hasPrevious());

  assertEquals(0,it.previousIndex());

  assertEquals(1,it.nextIndex());

  assertEquals("2",it.next());

  assertTrue(it.hasNext());

  assertTrue(it.hasPrevious());

  assertEquals(1,it.previousIndex());

  assertEquals(2,it.nextIndex());

  assertEquals("2",it.previous());

  assertTrue(it.hasNext());

  assertTrue(it.hasPrevious());

  assertEquals(0,it.previousIndex());

  assertEquals(1,it.nextIndex());

  assertEquals("2",it.next());

  assertTrue(it.hasNext());

  assertTrue(it.hasPrevious());

  assertEquals(1,it.previousIndex());

  assertEquals(2,it.nextIndex());

  assertEquals("3",it.next());

  assertTrue(it.hasNext());

  assertTrue(it.hasPrevious());

  assertEquals(2,it.previousIndex());

  assertEquals(3,it.nextIndex());

  assertEquals("4",it.next());

  assertTrue(it.hasNext());

  assertTrue(it.hasPrevious());

  assertEquals(3,it.previousIndex());

  assertEquals(4,it.nextIndex());

  assertEquals("5",it.next());

  assertFalse(it.hasNext());

  assertTrue(it.hasPrevious());

  assertEquals(4,it.previousIndex());

  assertEquals(5,it.nextIndex());

  assertEquals("5",it.previous());

  assertTrue(it.hasNext());

  assertTrue(it.hasPrevious());

  assertEquals(3,it.previousIndex());

  assertEquals(4,it.nextIndex());

  assertEquals("4",it.previous());

  assertTrue(it.hasNext());

  assertTrue(it.hasPrevious());

  assertEquals(2,it.previousIndex());

  assertEquals(3,it.nextIndex());

  assertEquals("3",it.previous());

  assertTrue(it.hasNext());

  assertTrue(it.hasPrevious());

  assertEquals(1,it.previousIndex());

  assertEquals(2,it.nextIndex());

  assertEquals("2",it.previous());

  assertTrue(it.hasNext());

  assertTrue(it.hasPrevious());

  assertEquals(0,it.previousIndex());

  assertEquals(1,it.nextIndex());

  assertEquals("1",it.previous());

  assertTrue(it.hasNext());

  assertFalse(it.hasPrevious());

  assertEquals(-1,it.previousIndex());

  assertEquals(0,it.nextIndex());

}

Location: CursorableLinkedListTest.java

Content: 

@SuppressWarnings("unchecked") public void testListIteratorRemove(){

  list.add((E)"1");

  list.add((E)"2");

  list.add((E)"3");

  list.add((E)"4");

  list.add((E)"5");

  final ListIterator<E> it=list.listIterator();

  try {

    it.remove();

  }

 catch (  final IllegalStateException e) {

  }

  assertEquals("1",it.next());

  assertEquals("2",it.next());

  assertEquals("[1, 2, 3, 4, 5]",list.toString());

  it.remove();

  assertEquals("[1, 3, 4, 5]",list.toString());

  assertEquals("3",it.next());

  assertEquals("3",it.previous());

  assertEquals("1",it.previous());

  it.remove();

  assertEquals("[3, 4, 5]",list.toString());

  assertFalse(it.hasPrevious());

  assertEquals("3",it.next());

  it.remove();

  assertEquals("[4, 5]",list.toString());

  try {

    it.remove();

  }

 catch (  final IllegalStateException e) {

  }

  assertEquals("4",it.next());

  assertEquals("5",it.next());

  it.remove();

  assertEquals("[4]",list.toString());

  assertEquals("4",it.previous());

  it.remove();

  assertEquals("[]",list.toString());

}

Location: CursorableLinkedListTest.java

Content: 

@SuppressWarnings("unchecked") public void testLongSerialization() throws Exception {

  for (int i=0; i < 10000; i++) {

    list.add((E)Integer.valueOf(i));

  }

  final java.io.ByteArrayOutputStream buf=new java.io.ByteArrayOutputStream();

  final java.io.ObjectOutputStream out=new java.io.ObjectOutputStream(buf);

  out.writeObject(list);

  out.flush();

  out.close();

  final java.io.ByteArrayInputStream bufin=new java.io.ByteArrayInputStream(buf.toByteArray());

  final java.io.ObjectInputStream in=new java.io.ObjectInputStream(bufin);

  final Object list2=in.readObject();

  assertNotSame(list,list2);

  assertEquals(list2,list);

  assertEquals(list,list2);

}

Location: CursorableLinkedListTest.java

Content: 

@SuppressWarnings("unchecked") public void testSerialization() throws Exception {

  list.add((E)"A");

  list.add((E)"B");

  list.add((E)"C");

  list.add((E)"D");

  list.add((E)"E");

  final java.io.ByteArrayOutputStream buf=new java.io.ByteArrayOutputStream();

  final java.io.ObjectOutputStream out=new java.io.ObjectOutputStream(buf);

  out.writeObject(list);

  out.flush();

  out.close();

  final java.io.ByteArrayInputStream bufin=new java.io.ByteArrayInputStream(buf.toByteArray());

  final java.io.ObjectInputStream in=new java.io.ObjectInputStream(bufin);

  final Object list2=in.readObject();

  assertNotSame(list,list2);

  assertEquals(list2,list);

  assertEquals(list,list2);

}

Location: CursorableLinkedListTest.java

Content: 

@SuppressWarnings("unchecked") public void testSerializationWithOpenCursor() throws Exception {

  list.add((E)"A");

  list.add((E)"B");

  list.add((E)"C");

  list.add((E)"D");

  list.add((E)"E");

  final java.io.ByteArrayOutputStream buf=new java.io.ByteArrayOutputStream();

  final java.io.ObjectOutputStream out=new java.io.ObjectOutputStream(buf);

  out.writeObject(list);

  out.flush();

  out.close();

  final java.io.ByteArrayInputStream bufin=new java.io.ByteArrayInputStream(buf.toByteArray());

  final java.io.ObjectInputStream in=new java.io.ObjectInputStream(bufin);

  final Object list2=in.readObject();

  assertNotSame(list,list2);

  assertEquals(list2,list);

  assertEquals(list,list2);

}

Location: CursorableLinkedListTest.java

Content: 

@SuppressWarnings("unchecked") public void testSet(){

  list.add((E)"1");

  list.add((E)"2");

  list.add((E)"3");

  list.add((E)"4");

  list.add((E)"5");

  assertEquals("[1, 2, 3, 4, 5]",list.toString());

  list.set(0,(E)"A");

  assertEquals("[A, 2, 3, 4, 5]",list.toString());

  list.set(1,(E)"B");

  assertEquals("[A, B, 3, 4, 5]",list.toString());

  list.set(2,(E)"C");

  assertEquals("[A, B, C, 4, 5]",list.toString());

  list.set(3,(E)"D");

  assertEquals("[A, B, C, D, 5]",list.toString());

  list.set(4,(E)"E");

  assertEquals("[A, B, C, D, E]",list.toString());

}

Location: CursorableLinkedListTest.java

Content: 

@SuppressWarnings("unchecked") public void testSubListAddBegin(){

  list.add((E)"A");

  list.add((E)"B");

  list.add((E)"C");

  list.add((E)"D");

  list.add((E)"E");

  final List<E> sublist=list.subList(0,0);

  sublist.add((E)"a");

  assertEquals("[a, A, B, C, D, E]",list.toString());

  assertEquals("[a]",sublist.toString());

  sublist.add((E)"b");

  assertEquals("[a, b, A, B, C, D, E]",list.toString());

  assertEquals("[a, b]",sublist.toString());

}

Location: CursorableLinkedListTest.java

Content: 

@SuppressWarnings("unchecked") public void testSubListAddEnd(){

  list.add((E)"A");

  list.add((E)"B");

  list.add((E)"C");

  list.add((E)"D");

  list.add((E)"E");

  final List<E> sublist=list.subList(5,5);

  sublist.add((E)"F");

  assertEquals("[A, B, C, D, E, F]",list.toString());

  assertEquals("[F]",sublist.toString());

  sublist.add((E)"G");

  assertEquals("[A, B, C, D, E, F, G]",list.toString());

  assertEquals("[F, G]",sublist.toString());

}

Location: CursorableLinkedListTest.java

Content: 

@SuppressWarnings("unchecked") public void testSubListAddMiddle(){

  list.add((E)"A");

  list.add((E)"B");

  list.add((E)"C");

  list.add((E)"D");

  list.add((E)"E");

  final List<E> sublist=list.subList(1,3);

  sublist.add((E)"a");

  assertEquals("[A, B, C, a, D, E]",list.toString());

  assertEquals("[B, C, a]",sublist.toString());

  sublist.add((E)"b");

  assertEquals("[A, B, C, a, b, D, E]",list.toString());

  assertEquals("[B, C, a, b]",sublist.toString());

}

Location: CursorableLinkedListTest.java

Content: 

@SuppressWarnings("unchecked") public void testSubListRemove(){

  list.add((E)"A");

  list.add((E)"B");

  list.add((E)"C");

  list.add((E)"D");

  list.add((E)"E");

  final List<E> sublist=list.subList(1,4);

  assertEquals("[B, C, D]",sublist.toString());

  assertEquals("[A, B, C, D, E]",list.toString());

  sublist.remove("C");

  assertEquals("[B, D]",sublist.toString());

  assertEquals("[A, B, D, E]",list.toString());

  sublist.remove(1);

  assertEquals("[B]",sublist.toString());

  assertEquals("[A, B, E]",list.toString());

  sublist.clear();

  assertEquals("[]",sublist.toString());

  assertEquals("[A, E]",list.toString());

}

Location: CursorableLinkedListTest.java

Content: 

@SuppressWarnings("unchecked") public void testToArray(){

  list.add((E)"1");

  list.add((E)"2");

  list.add((E)"3");

  list.add((E)"4");

  list.add((E)"5");

  final Object[] elts=list.toArray();

  assertEquals("1",elts[0]);

  assertEquals("2",elts[1]);

  assertEquals("3",elts[2]);

  assertEquals("4",elts[3]);

  assertEquals("5",elts[4]);

  assertEquals(5,elts.length);

  final String[] elts2=list.toArray(new String[0]);

  assertEquals("1",elts2[0]);

  assertEquals("2",elts2[1]);

  assertEquals("3",elts2[2]);

  assertEquals("4",elts2[3]);

  assertEquals("5",elts2[4]);

  assertEquals(5,elts2.length);

  final String[] elts3=new String[5];

  assertSame(elts3,list.toArray(elts3));

  assertEquals("1",elts3[0]);

  assertEquals("2",elts3[1]);

  assertEquals("3",elts3[2]);

  assertEquals("4",elts3[3]);

  assertEquals("5",elts3[4]);

  assertEquals(5,elts3.length);

  final String[] elts4=new String[3];

  final String[] elts4b=list.toArray(elts4);

  assertNotSame(elts4,elts4b);

  assertEquals("1",elts4b[0]);

  assertEquals("2",elts4b[1]);

  assertEquals("3",elts4b[2]);

  assertEquals("4",elts4b[3]);

  assertEquals("5",elts4b[4]);

  assertEquals(5,elts4b.length);

}

