Location: TreeList.java

Content: 

/** 

 * Checks whether the index is valid.

 * @param index  the index to check

 * @param startIndex  the first allowed index

 * @param endIndex  the last allowed index

 * @throws IndexOutOfBoundsException if the index is invalid

 */

private void checkInterval(final int index,final int startIndex,final int endIndex){

  if (index < startIndex || index > endIndex) {

    throw new IndexOutOfBoundsException("Invalid index:" + index + ", size="+ size());

  }

}

Location: TreeList.java

Content: 

/** 

 * Constructs a new empty list.

 */

public TreeList(){

}

Location: TreeList.java

Content: 

/** 

 * Constructs a new empty list that copies the specified collection.

 * @param coll  the collection to copy

 * @throws NullPointerException if the collection is null

 */

public TreeList(final Collection<? extends E> coll){

  if (!coll.isEmpty()) {

    root=new AVLNode<>(coll);

    size=coll.size();

  }

}

Location: TreeList.java

Content: 

/** 

 * Checks whether the index is valid.

 * @param index  the index to check

 * @param startIndex  the first allowed index

 * @param endIndex  the last allowed index

 * @throws IndexOutOfBoundsException if the index is invalid

 */

private void checkInterval(final int index,final int startIndex,final int endIndex){

  if (index < startIndex || index > endIndex) {

    throw new IndexOutOfBoundsException("Invalid index:" + index + ", size="+ size());

  }

}

Location: TreeList.java

Content: 

/** 

 * Constructs a new empty list.

 */

public TreeList(){

}

Location: TreeList.java

Content: 

/** 

 * Constructs a new empty list that copies the specified collection.

 * @param coll  the collection to copy

 * @throws NullPointerException if the collection is null

 */

public TreeList(final Collection<? extends E> coll){

  if (!coll.isEmpty()) {

    root=new AVLNode<>(coll);

    size=coll.size();

  }

}

