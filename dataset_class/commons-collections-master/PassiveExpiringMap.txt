Location: PassiveExpiringMap.java

Content: 

/** 

 * Determines if the given expiration time is less than  {@code now}.

 * @param now the time in milliseconds used to compare against theexpiration time.

 * @param expirationTimeObject the expiration time value retrieved from{@link #expirationMap}, can be null.

 * @return {@code true} if {@code expirationTimeObject} is &ge; 0and  {@code expirationTimeObject} &lt; {@code now}. {@code false} otherwise.

 */

private boolean isExpired(final long now,final Long expirationTimeObject){

  if (expirationTimeObject != null) {

    final long expirationTime=expirationTimeObject.longValue();

    return expirationTime >= 0 && now >= expirationTime;

  }

  return false;

}

Location: PassiveExpiringMap.java

Content: 

/** 

 * The current time in milliseconds.

 */

private long now(){

  return System.currentTimeMillis();

}

Location: PassiveExpiringMap.java

Content: 

/** 

 * Default constructor. Constructs a map decorator that results in entries NEVER expiring.

 */

public PassiveExpiringMap(){

  this(-1L);

}

Location: PassiveExpiringMap.java

Content: 

/** 

 * Construct a map decorator using the given expiration policy to determine expiration times.

 * @param expiringPolicy the policy used to determine expiration times ofentries as they are added.

 * @throws NullPointerException if expiringPolicy is null

 */

public PassiveExpiringMap(final ExpirationPolicy<K,V> expiringPolicy){

  this(expiringPolicy,new HashMap<K,V>());

}

Location: PassiveExpiringMap.java

Content: 

/** 

 * Construct a map decorator that decorates the given map and uses the given expiration policy to determine expiration times. If there are any elements already in the map being decorated, they will NEVER expire unless they are replaced.

 * @param expiringPolicy the policy used to determine expiration times ofentries as they are added.

 * @param map the map to decorate, must not be null.

 * @throws NullPointerException if the map or expiringPolicy is null.

 */

public PassiveExpiringMap(final ExpirationPolicy<K,V> expiringPolicy,final Map<K,V> map){

  super(map);

  this.expiringPolicy=Objects.requireNonNull(expiringPolicy,"expiringPolicy");

}

Location: PassiveExpiringMap.java

Content: 

/** 

 * Construct a map decorator that decorates the given map using the given time-to-live value measured in milliseconds to create and use a {@link ConstantTimeToLiveExpirationPolicy} expiration policy.

 * @param timeToLiveMillis the constant amount of time (in milliseconds) anentry is available before it expires. A negative value results in entries that NEVER expire. A zero value results in entries that ALWAYS expire.

 */

public PassiveExpiringMap(final long timeToLiveMillis){

  this(new ConstantTimeToLiveExpirationPolicy<K,V>(timeToLiveMillis),new HashMap<K,V>());

}

Location: PassiveExpiringMap.java

Content: 

/** 

 * Construct a map decorator using the given time-to-live value measured in milliseconds to create and use a {@link ConstantTimeToLiveExpirationPolicy} expiration policy. If thereare any elements already in the map being decorated, they will NEVER expire unless they are replaced.

 * @param timeToLiveMillis the constant amount of time (in milliseconds) anentry is available before it expires. A negative value results in entries that NEVER expire. A zero value results in entries that ALWAYS expire.

 * @param map the map to decorate, must not be null.

 * @throws NullPointerException if the map is null.

 */

public PassiveExpiringMap(final long timeToLiveMillis,final Map<K,V> map){

  this(new ConstantTimeToLiveExpirationPolicy<K,V>(timeToLiveMillis),map);

}

Location: PassiveExpiringMap.java

Content: 

/** 

 * Construct a map decorator using the given time-to-live value measured in the given time units of measure to create and use a {@link ConstantTimeToLiveExpirationPolicy} expiration policy.

 * @param timeToLive the constant amount of time an entry is availablebefore it expires. A negative value results in entries that NEVER expire. A zero value results in entries that ALWAYS expire.

 * @param timeUnit the unit of time for the {@code timeToLive}parameter, must not be null.

 * @throws NullPointerException if the time unit is null.

 */

public PassiveExpiringMap(final long timeToLive,final TimeUnit timeUnit){

  this(validateAndConvertToMillis(timeToLive,timeUnit));

}

Location: PassiveExpiringMap.java

Content: 

/** 

 * Construct a map decorator that decorates the given map using the given time-to-live value measured in the given time units of measure to create {@link ConstantTimeToLiveExpirationPolicy} expiration policy. This policyis used to determine expiration times. If there are any elements already in the map being decorated, they will NEVER expire unless they are replaced.

 * @param timeToLive the constant amount of time an entry is availablebefore it expires. A negative value results in entries that NEVER expire. A zero value results in entries that ALWAYS expire.

 * @param timeUnit the unit of time for the {@code timeToLive}parameter, must not be null.

 * @param map the map to decorate, must not be null.

 * @throws NullPointerException if the map or time unit is null.

 */

public PassiveExpiringMap(final long timeToLive,final TimeUnit timeUnit,final Map<K,V> map){

  this(validateAndConvertToMillis(timeToLive,timeUnit),map);

}

Location: PassiveExpiringMap.java

Content: 

/** 

 * Constructs a map decorator that decorates the given map and results in entries NEVER expiring. If there are any elements already in the map being decorated, they also will NEVER expire.

 * @param map the map to decorate, must not be null.

 * @throws NullPointerException if the map is null.

 */

public PassiveExpiringMap(final Map<K,V> map){

  this(-1L,map);

}

Location: PassiveExpiringMap.java

Content: 

/** 

 * Removes all entries in the map whose expiration time is less than {@code now}. The exceptions are entries with negative expiration times; those entries are never removed.

 * @see #isExpired(long,Long)

 */

private void removeAllExpired(final long nowMillis){

  final Iterator<Map.Entry<Object,Long>> iter=expirationMap.entrySet().iterator();

  while (iter.hasNext()) {

    final Map.Entry<Object,Long> expirationEntry=iter.next();

    if (isExpired(nowMillis,expirationEntry.getValue())) {

      super.remove(expirationEntry.getKey());

      iter.remove();

    }

  }

}

Location: PassiveExpiringMap.java

Content: 

/** 

 * Removes the entry with the given key if the entry's expiration time is less than  {@code now}. If the entry has a negative expiration time, the entry is never removed.

 */

private void removeIfExpired(final Object key,final long nowMillis){

  final Long expirationTimeObject=expirationMap.get(key);

  if (isExpired(nowMillis,expirationTimeObject)) {

    remove(key);

  }

}

Location: PassiveExpiringMap.java

Content: 

/** 

 * First validate the input parameters. If the parameters are valid, convert the given time measured in the given units to the same time measured in milliseconds.

 * @param timeToLive the constant amount of time an entry is availablebefore it expires. A negative value results in entries that NEVER expire. A zero value results in entries that ALWAYS expire.

 * @param timeUnit the unit of time for the {@code timeToLive}parameter, must not be null.

 * @throws NullPointerException if the time unit is null.

 */

private static long validateAndConvertToMillis(final long timeToLive,final TimeUnit timeUnit){

  Objects.requireNonNull(timeUnit,"timeUnit");

  return TimeUnit.MILLISECONDS.convert(timeToLive,timeUnit);

}

Location: PassiveExpiringMap.java

Content: 

/** 

 * Determines if the given expiration time is less than  {@code now}.

 * @param now the time in milliseconds used to compare against theexpiration time.

 * @param expirationTimeObject the expiration time value retrieved from{@link #expirationMap}, can be null.

 * @return {@code true} if {@code expirationTimeObject} is &ge; 0and  {@code expirationTimeObject} &lt; {@code now}. {@code false} otherwise.

 */

private boolean isExpired(final long now,final Long expirationTimeObject){

  if (expirationTimeObject != null) {

    final long expirationTime=expirationTimeObject.longValue();

    return expirationTime >= 0 && now >= expirationTime;

  }

  return false;

}

Location: PassiveExpiringMap.java

Content: 

/** 

 * The current time in milliseconds.

 */

private long now(){

  return System.currentTimeMillis();

}

Location: PassiveExpiringMap.java

Content: 

/** 

 * Default constructor. Constructs a map decorator that results in entries NEVER expiring.

 */

public PassiveExpiringMap(){

  this(-1L);

}

Location: PassiveExpiringMap.java

Content: 

/** 

 * Construct a map decorator using the given expiration policy to determine expiration times.

 * @param expiringPolicy the policy used to determine expiration times ofentries as they are added.

 * @throws NullPointerException if expiringPolicy is null

 */

public PassiveExpiringMap(final ExpirationPolicy<K,V> expiringPolicy){

  this(expiringPolicy,new HashMap<K,V>());

}

Location: PassiveExpiringMap.java

Content: 

/** 

 * Construct a map decorator that decorates the given map and uses the given expiration policy to determine expiration times. If there are any elements already in the map being decorated, they will NEVER expire unless they are replaced.

 * @param expiringPolicy the policy used to determine expiration times ofentries as they are added.

 * @param map the map to decorate, must not be null.

 * @throws NullPointerException if the map or expiringPolicy is null.

 */

public PassiveExpiringMap(final ExpirationPolicy<K,V> expiringPolicy,final Map<K,V> map){

  super(map);

  this.expiringPolicy=Objects.requireNonNull(expiringPolicy,"expiringPolicy");

}

Location: PassiveExpiringMap.java

Content: 

/** 

 * Construct a map decorator that decorates the given map using the given time-to-live value measured in milliseconds to create and use a {@link ConstantTimeToLiveExpirationPolicy} expiration policy.

 * @param timeToLiveMillis the constant amount of time (in milliseconds) anentry is available before it expires. A negative value results in entries that NEVER expire. A zero value results in entries that ALWAYS expire.

 */

public PassiveExpiringMap(final long timeToLiveMillis){

  this(new ConstantTimeToLiveExpirationPolicy<K,V>(timeToLiveMillis),new HashMap<K,V>());

}

Location: PassiveExpiringMap.java

Content: 

/** 

 * Construct a map decorator using the given time-to-live value measured in milliseconds to create and use a {@link ConstantTimeToLiveExpirationPolicy} expiration policy. If thereare any elements already in the map being decorated, they will NEVER expire unless they are replaced.

 * @param timeToLiveMillis the constant amount of time (in milliseconds) anentry is available before it expires. A negative value results in entries that NEVER expire. A zero value results in entries that ALWAYS expire.

 * @param map the map to decorate, must not be null.

 * @throws NullPointerException if the map is null.

 */

public PassiveExpiringMap(final long timeToLiveMillis,final Map<K,V> map){

  this(new ConstantTimeToLiveExpirationPolicy<K,V>(timeToLiveMillis),map);

}

Location: PassiveExpiringMap.java

Content: 

/** 

 * Construct a map decorator using the given time-to-live value measured in the given time units of measure to create and use a {@link ConstantTimeToLiveExpirationPolicy} expiration policy.

 * @param timeToLive the constant amount of time an entry is availablebefore it expires. A negative value results in entries that NEVER expire. A zero value results in entries that ALWAYS expire.

 * @param timeUnit the unit of time for the {@code timeToLive}parameter, must not be null.

 * @throws NullPointerException if the time unit is null.

 */

public PassiveExpiringMap(final long timeToLive,final TimeUnit timeUnit){

  this(validateAndConvertToMillis(timeToLive,timeUnit));

}

Location: PassiveExpiringMap.java

Content: 

/** 

 * Construct a map decorator that decorates the given map using the given time-to-live value measured in the given time units of measure to create {@link ConstantTimeToLiveExpirationPolicy} expiration policy. This policyis used to determine expiration times. If there are any elements already in the map being decorated, they will NEVER expire unless they are replaced.

 * @param timeToLive the constant amount of time an entry is availablebefore it expires. A negative value results in entries that NEVER expire. A zero value results in entries that ALWAYS expire.

 * @param timeUnit the unit of time for the {@code timeToLive}parameter, must not be null.

 * @param map the map to decorate, must not be null.

 * @throws NullPointerException if the map or time unit is null.

 */

public PassiveExpiringMap(final long timeToLive,final TimeUnit timeUnit,final Map<K,V> map){

  this(validateAndConvertToMillis(timeToLive,timeUnit),map);

}

Location: PassiveExpiringMap.java

Content: 

/** 

 * Constructs a map decorator that decorates the given map and results in entries NEVER expiring. If there are any elements already in the map being decorated, they also will NEVER expire.

 * @param map the map to decorate, must not be null.

 * @throws NullPointerException if the map is null.

 */

public PassiveExpiringMap(final Map<K,V> map){

  this(-1L,map);

}

Location: PassiveExpiringMap.java

Content: 

/** 

 * Removes all entries in the map whose expiration time is less than {@code now}. The exceptions are entries with negative expiration times; those entries are never removed.

 * @see #isExpired(long,Long)

 */

private void removeAllExpired(final long nowMillis){

  final Iterator<Map.Entry<Object,Long>> iter=expirationMap.entrySet().iterator();

  while (iter.hasNext()) {

    final Map.Entry<Object,Long> expirationEntry=iter.next();

    if (isExpired(nowMillis,expirationEntry.getValue())) {

      super.remove(expirationEntry.getKey());

      iter.remove();

    }

  }

}

Location: PassiveExpiringMap.java

Content: 

/** 

 * Removes the entry with the given key if the entry's expiration time is less than  {@code now}. If the entry has a negative expiration time, the entry is never removed.

 */

private void removeIfExpired(final Object key,final long nowMillis){

  final Long expirationTimeObject=expirationMap.get(key);

  if (isExpired(nowMillis,expirationTimeObject)) {

    remove(key);

  }

}

Location: PassiveExpiringMap.java

Content: 

/** 

 * First validate the input parameters. If the parameters are valid, convert the given time measured in the given units to the same time measured in milliseconds.

 * @param timeToLive the constant amount of time an entry is availablebefore it expires. A negative value results in entries that NEVER expire. A zero value results in entries that ALWAYS expire.

 * @param timeUnit the unit of time for the {@code timeToLive}parameter, must not be null.

 * @throws NullPointerException if the time unit is null.

 */

private static long validateAndConvertToMillis(final long timeToLive,final TimeUnit timeUnit){

  Objects.requireNonNull(timeUnit,"timeUnit");

  return TimeUnit.MILLISECONDS.convert(timeToLive,timeUnit);

}

