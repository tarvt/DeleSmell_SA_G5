Location: UnmodifiableTrieTest.java

Content: 

@Override public String getCompatibilityVersion(){

  return "4";

}

Location: UnmodifiableTrieTest.java

Content: 

/** 

 * Override to prevent infinite recursion of tests.

 */

@Override public String[] ignoredTests(){

  return null;

}

Location: UnmodifiableTrieTest.java

Content: 

@Override public boolean isPutAddSupported(){

  return false;

}

Location: UnmodifiableTrieTest.java

Content: 

@Override public boolean isPutChangeSupported(){

  return false;

}

Location: UnmodifiableTrieTest.java

Content: 

@Override public boolean isRemoveSupported(){

  return false;

}

Location: UnmodifiableTrieTest.java

Content: 

@Override public Trie<String,V> makeFullMap(){

  final Trie<String,V> m=new PatriciaTrie<>();

  addSampleMappings(m);

  return UnmodifiableTrie.unmodifiableTrie(m);

}

Location: UnmodifiableTrieTest.java

Content: 

@Override public Trie<String,V> makeObject(){

  return UnmodifiableTrie.unmodifiableTrie(new PatriciaTrie<V>());

}

Location: UnmodifiableTrieTest.java

Content: 

public static Test suite(){

  return BulkTest.makeSuite(UnmodifiableTrieTest.class);

}

Location: UnmodifiableTrieTest.java

Content: 

public void testDecorateFactory(){

  final Trie<String,V> trie=makeFullMap();

  assertSame(trie,UnmodifiableTrie.unmodifiableTrie(trie));

  try {

    UnmodifiableTrie.unmodifiableTrie(null);

    fail();

  }

 catch (  final NullPointerException ex) {

  }

}

Location: UnmodifiableTrieTest.java

Content: 

public void testUnmodifiable(){

  assertTrue(makeObject() instanceof Unmodifiable);

  assertTrue(makeFullMap() instanceof Unmodifiable);

}

Location: UnmodifiableTrieTest.java

Content: 

public UnmodifiableTrieTest(final String testName){

  super(testName);

}

Location: UnmodifiableTrieTest.java

Content: 

@Override public String getCompatibilityVersion(){

  return "4";

}

Location: UnmodifiableTrieTest.java

Content: 

/** 

 * Override to prevent infinite recursion of tests.

 */

@Override public String[] ignoredTests(){

  return null;

}

Location: UnmodifiableTrieTest.java

Content: 

@Override public boolean isPutAddSupported(){

  return false;

}

Location: UnmodifiableTrieTest.java

Content: 

@Override public boolean isPutChangeSupported(){

  return false;

}

Location: UnmodifiableTrieTest.java

Content: 

@Override public boolean isRemoveSupported(){

  return false;

}

Location: UnmodifiableTrieTest.java

Content: 

@Override public Trie<String,V> makeFullMap(){

  final Trie<String,V> m=new PatriciaTrie<>();

  addSampleMappings(m);

  return UnmodifiableTrie.unmodifiableTrie(m);

}

Location: UnmodifiableTrieTest.java

Content: 

@Override public Trie<String,V> makeObject(){

  return UnmodifiableTrie.unmodifiableTrie(new PatriciaTrie<V>());

}

Location: UnmodifiableTrieTest.java

Content: 

public static Test suite(){

  return BulkTest.makeSuite(UnmodifiableTrieTest.class);

}

Location: UnmodifiableTrieTest.java

Content: 

public void testDecorateFactory(){

  final Trie<String,V> trie=makeFullMap();

  assertSame(trie,UnmodifiableTrie.unmodifiableTrie(trie));

  try {

    UnmodifiableTrie.unmodifiableTrie(null);

    fail();

  }

 catch (  final NullPointerException ex) {

  }

}

Location: UnmodifiableTrieTest.java

Content: 

public void testUnmodifiable(){

  assertTrue(makeObject() instanceof Unmodifiable);

  assertTrue(makeFullMap() instanceof Unmodifiable);

}

Location: UnmodifiableTrieTest.java

Content: 

public UnmodifiableTrieTest(final String testName){

  super(testName);

}

