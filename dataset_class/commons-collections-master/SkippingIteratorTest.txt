Location: SkippingIteratorTest.java

Content: 

public SkippingIteratorTest(final String testName){

  super(testName);

}

Location: SkippingIteratorTest.java

Content: 

/** 

 * Test the case if a negative  {@code offset} is passed to theconstructor.  {@link IllegalArgumentException} is expected.

 */

@Test public void testNegativeOffset(){

  try {

    new SkippingIterator<>(testList.iterator(),-1);

    fail("Expected IllegalArgumentException.");

  }

 catch (  final IllegalArgumentException iae) {

  }

}

Location: SkippingIteratorTest.java

Content: 

/** 

 * Test the case if the  {@code offset} passed to the constructor isgreater than the decorated iterator's size. The SkippingIterator should behave as if there are no more elements to return.

 */

@Test public void testOffsetGreaterThanSize(){

  final Iterator<E> iter=new SkippingIterator<>(testList.iterator(),10);

  assertFalse(iter.hasNext());

  try {

    iter.next();

    fail("Expected NoSuchElementException.");

  }

 catch (  final NoSuchElementException nsee) {

  }

}

Location: SkippingIteratorTest.java

Content: 

/** 

 * Test the  {@code remove()} method being called twice without calling{@code next()} in between.

 */

@Test public void testRemoveCalledTwice(){

  final List<E> testListCopy=new ArrayList<>(testList);

  final Iterator<E> iter=new SkippingIterator<>(testListCopy.iterator(),1);

  assertTrue(iter.hasNext());

  assertEquals("b",iter.next());

  iter.remove();

  try {

    iter.remove();

    fail("Expected IllegalStateException.");

  }

 catch (  final IllegalStateException ise) {

  }

}

Location: SkippingIteratorTest.java

Content: 

/** 

 * Test removing an element in the middle of the iterator. Verify that the element is removed from the underlying collection.

 */

@Test public void testRemoveMiddle(){

  final List<E> testListCopy=new ArrayList<>(testList);

  final Iterator<E> iter=new SkippingIterator<>(testListCopy.iterator(),3);

  assertTrue(iter.hasNext());

  assertEquals("d",iter.next());

  iter.remove();

  assertFalse(testListCopy.contains("d"));

  assertTrue(iter.hasNext());

  assertEquals("e",iter.next());

  assertTrue(iter.hasNext());

  assertEquals("f",iter.next());

  assertTrue(iter.hasNext());

  assertEquals("g",iter.next());

  assertFalse(iter.hasNext());

  try {

    iter.next();

    fail("Expected NoSuchElementException.");

  }

 catch (  final NoSuchElementException nsee) {

  }

}

Location: SkippingIteratorTest.java

Content: 

/** 

 * Test the case if the decorated iterator does not support the {@code remove()} method and throws an {@link UnsupportedOperationException}.

 */

@Test public void testRemoveUnsupported(){

  final Iterator<E> mockIterator=new AbstractIteratorDecorator<E>(testList.iterator()){

    @Override public void remove(){

      throw new UnsupportedOperationException();

    }

  }

;

  final Iterator<E> iter=new SkippingIterator<>(mockIterator,1);

  assertTrue(iter.hasNext());

  assertEquals("b",iter.next());

  try {

    iter.remove();

    fail("Expected UnsupportedOperationException.");

  }

 catch (  final UnsupportedOperationException usoe) {

  }

}

Location: SkippingIteratorTest.java

Content: 

/** 

 * Test the  {@code remove()} method being called without{@code next()} being called first.

 */

@Test public void testRemoveWithoutCallingNext(){

  final List<E> testListCopy=new ArrayList<>(testList);

  final Iterator<E> iter=new SkippingIterator<>(testListCopy.iterator(),1);

  try {

    iter.remove();

    fail("Expected IllegalStateException.");

  }

 catch (  final IllegalStateException ise) {

  }

}

Location: SkippingIteratorTest.java

Content: 

/** 

 * Test a decorated iterator bounded such that the  {@code offset} iszero, in that the SkippingIterator should return all the same elements as its decorated iterator.

 */

@Test public void testSameAsDecorated(){

  final Iterator<E> iter=new SkippingIterator<>(testList.iterator(),0);

  assertTrue(iter.hasNext());

  assertEquals("a",iter.next());

  assertTrue(iter.hasNext());

  assertEquals("b",iter.next());

  assertTrue(iter.hasNext());

  assertEquals("c",iter.next());

  assertTrue(iter.hasNext());

  assertEquals("d",iter.next());

  assertTrue(iter.hasNext());

  assertEquals("e",iter.next());

  assertTrue(iter.hasNext());

  assertEquals("f",iter.next());

  assertTrue(iter.hasNext());

  assertEquals("g",iter.next());

  assertFalse(iter.hasNext());

  try {

    iter.next();

    fail("Expected NoSuchElementException.");

  }

 catch (  final NoSuchElementException nsee) {

  }

}

Location: SkippingIteratorTest.java

Content: 

/** 

 * Test a decorated iterator bounded such that the first element returned is at an index greater its first element, and the last element returned is at an index less than its last element.

 */

@Test public void testSkipping(){

  final Iterator<E> iter=new SkippingIterator<>(testList.iterator(),2);

  assertTrue(iter.hasNext());

  assertEquals("c",iter.next());

  assertTrue(iter.hasNext());

  assertEquals("d",iter.next());

  assertTrue(iter.hasNext());

  assertEquals("e",iter.next());

  assertTrue(iter.hasNext());

  assertEquals("f",iter.next());

  assertTrue(iter.hasNext());

  assertEquals("g",iter.next());

  assertFalse(iter.hasNext());

  try {

    iter.next();

    fail("Expected NoSuchElementException.");

  }

 catch (  final NoSuchElementException nsee) {

  }

}

Location: SkippingIteratorTest.java

Content: 

public SkippingIteratorTest(final String testName){

  super(testName);

}

Location: SkippingIteratorTest.java

Content: 

/** 

 * Test the case if a negative  {@code offset} is passed to theconstructor.  {@link IllegalArgumentException} is expected.

 */

@Test public void testNegativeOffset(){

  try {

    new SkippingIterator<>(testList.iterator(),-1);

    fail("Expected IllegalArgumentException.");

  }

 catch (  final IllegalArgumentException iae) {

  }

}

Location: SkippingIteratorTest.java

Content: 

/** 

 * Test the case if the  {@code offset} passed to the constructor isgreater than the decorated iterator's size. The SkippingIterator should behave as if there are no more elements to return.

 */

@Test public void testOffsetGreaterThanSize(){

  final Iterator<E> iter=new SkippingIterator<>(testList.iterator(),10);

  assertFalse(iter.hasNext());

  try {

    iter.next();

    fail("Expected NoSuchElementException.");

  }

 catch (  final NoSuchElementException nsee) {

  }

}

Location: SkippingIteratorTest.java

Content: 

/** 

 * Test the  {@code remove()} method being called twice without calling{@code next()} in between.

 */

@Test public void testRemoveCalledTwice(){

  final List<E> testListCopy=new ArrayList<>(testList);

  final Iterator<E> iter=new SkippingIterator<>(testListCopy.iterator(),1);

  assertTrue(iter.hasNext());

  assertEquals("b",iter.next());

  iter.remove();

  try {

    iter.remove();

    fail("Expected IllegalStateException.");

  }

 catch (  final IllegalStateException ise) {

  }

}

Location: SkippingIteratorTest.java

Content: 

/** 

 * Test removing an element in the middle of the iterator. Verify that the element is removed from the underlying collection.

 */

@Test public void testRemoveMiddle(){

  final List<E> testListCopy=new ArrayList<>(testList);

  final Iterator<E> iter=new SkippingIterator<>(testListCopy.iterator(),3);

  assertTrue(iter.hasNext());

  assertEquals("d",iter.next());

  iter.remove();

  assertFalse(testListCopy.contains("d"));

  assertTrue(iter.hasNext());

  assertEquals("e",iter.next());

  assertTrue(iter.hasNext());

  assertEquals("f",iter.next());

  assertTrue(iter.hasNext());

  assertEquals("g",iter.next());

  assertFalse(iter.hasNext());

  try {

    iter.next();

    fail("Expected NoSuchElementException.");

  }

 catch (  final NoSuchElementException nsee) {

  }

}

Location: SkippingIteratorTest.java

Content: 

/** 

 * Test the case if the decorated iterator does not support the {@code remove()} method and throws an {@link UnsupportedOperationException}.

 */

@Test public void testRemoveUnsupported(){

  final Iterator<E> mockIterator=new AbstractIteratorDecorator<E>(testList.iterator()){

    @Override public void remove(){

      throw new UnsupportedOperationException();

    }

  }

;

  final Iterator<E> iter=new SkippingIterator<>(mockIterator,1);

  assertTrue(iter.hasNext());

  assertEquals("b",iter.next());

  try {

    iter.remove();

    fail("Expected UnsupportedOperationException.");

  }

 catch (  final UnsupportedOperationException usoe) {

  }

}

Location: SkippingIteratorTest.java

Content: 

/** 

 * Test the  {@code remove()} method being called without{@code next()} being called first.

 */

@Test public void testRemoveWithoutCallingNext(){

  final List<E> testListCopy=new ArrayList<>(testList);

  final Iterator<E> iter=new SkippingIterator<>(testListCopy.iterator(),1);

  try {

    iter.remove();

    fail("Expected IllegalStateException.");

  }

 catch (  final IllegalStateException ise) {

  }

}

Location: SkippingIteratorTest.java

Content: 

/** 

 * Test a decorated iterator bounded such that the  {@code offset} iszero, in that the SkippingIterator should return all the same elements as its decorated iterator.

 */

@Test public void testSameAsDecorated(){

  final Iterator<E> iter=new SkippingIterator<>(testList.iterator(),0);

  assertTrue(iter.hasNext());

  assertEquals("a",iter.next());

  assertTrue(iter.hasNext());

  assertEquals("b",iter.next());

  assertTrue(iter.hasNext());

  assertEquals("c",iter.next());

  assertTrue(iter.hasNext());

  assertEquals("d",iter.next());

  assertTrue(iter.hasNext());

  assertEquals("e",iter.next());

  assertTrue(iter.hasNext());

  assertEquals("f",iter.next());

  assertTrue(iter.hasNext());

  assertEquals("g",iter.next());

  assertFalse(iter.hasNext());

  try {

    iter.next();

    fail("Expected NoSuchElementException.");

  }

 catch (  final NoSuchElementException nsee) {

  }

}

Location: SkippingIteratorTest.java

Content: 

/** 

 * Test a decorated iterator bounded such that the first element returned is at an index greater its first element, and the last element returned is at an index less than its last element.

 */

@Test public void testSkipping(){

  final Iterator<E> iter=new SkippingIterator<>(testList.iterator(),2);

  assertTrue(iter.hasNext());

  assertEquals("c",iter.next());

  assertTrue(iter.hasNext());

  assertEquals("d",iter.next());

  assertTrue(iter.hasNext());

  assertEquals("e",iter.next());

  assertTrue(iter.hasNext());

  assertEquals("f",iter.next());

  assertTrue(iter.hasNext());

  assertEquals("g",iter.next());

  assertFalse(iter.hasNext());

  try {

    iter.next();

    fail("Expected NoSuchElementException.");

  }

 catch (  final NoSuchElementException nsee) {

  }

}

