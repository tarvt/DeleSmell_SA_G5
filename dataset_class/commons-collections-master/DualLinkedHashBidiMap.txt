Location: DualLinkedHashBidiMap.java

Content: 

/** 

 * Creates a new instance of this object.

 * @param normalMap      the normal direction map

 * @param reverseMap     the reverse direction map

 * @param inverseBidiMap the inverse BidiMap

 * @return new bidi map

 */

@Override protected BidiMap<V,K> createBidiMap(final Map<V,K> normalMap,final Map<K,V> reverseMap,final BidiMap<K,V> inverseBidiMap){

  return new DualLinkedHashBidiMap<>(normalMap,reverseMap,inverseBidiMap);

}

Location: DualLinkedHashBidiMap.java

Content: 

/** 

 * Creates an empty  {@code HashBidiMap}.

 */

public DualLinkedHashBidiMap(){

  super(new LinkedHashMap<K,V>(),new LinkedHashMap<V,K>());

}

Location: DualLinkedHashBidiMap.java

Content: 

/** 

 * Constructs a  {@code LinkedHashBidiMap} and copies the mappings fromspecified  {@link Map}.

 * @param map the map whose mappings are to be placed in this map

 */

public DualLinkedHashBidiMap(final Map<? extends K,? extends V> map){

  super(new LinkedHashMap<K,V>(),new LinkedHashMap<V,K>());

  putAll(map);

}

Location: DualLinkedHashBidiMap.java

Content: 

/** 

 * Constructs a  {@code LinkedHashBidiMap} that decorates the specified maps.

 * @param normalMap      the normal direction map

 * @param reverseMap     the reverse direction map

 * @param inverseBidiMap the inverse BidiMap

 */

protected DualLinkedHashBidiMap(final Map<K,V> normalMap,final Map<V,K> reverseMap,final BidiMap<V,K> inverseBidiMap){

  super(normalMap,reverseMap,inverseBidiMap);

}

Location: DualLinkedHashBidiMap.java

Content: 

/** 

 * Creates a new instance of this object.

 * @param normalMap      the normal direction map

 * @param reverseMap     the reverse direction map

 * @param inverseBidiMap the inverse BidiMap

 * @return new bidi map

 */

@Override protected BidiMap<V,K> createBidiMap(final Map<V,K> normalMap,final Map<K,V> reverseMap,final BidiMap<K,V> inverseBidiMap){

  return new DualLinkedHashBidiMap<>(normalMap,reverseMap,inverseBidiMap);

}

Location: DualLinkedHashBidiMap.java

Content: 

/** 

 * Creates an empty  {@code HashBidiMap}.

 */

public DualLinkedHashBidiMap(){

  super(new LinkedHashMap<K,V>(),new LinkedHashMap<V,K>());

}

Location: DualLinkedHashBidiMap.java

Content: 

/** 

 * Constructs a  {@code LinkedHashBidiMap} and copies the mappings fromspecified  {@link Map}.

 * @param map the map whose mappings are to be placed in this map

 */

public DualLinkedHashBidiMap(final Map<? extends K,? extends V> map){

  super(new LinkedHashMap<K,V>(),new LinkedHashMap<V,K>());

  putAll(map);

}

Location: DualLinkedHashBidiMap.java

Content: 

/** 

 * Constructs a  {@code LinkedHashBidiMap} that decorates the specified maps.

 * @param normalMap      the normal direction map

 * @param reverseMap     the reverse direction map

 * @param inverseBidiMap the inverse BidiMap

 */

protected DualLinkedHashBidiMap(final Map<K,V> normalMap,final Map<V,K> reverseMap,final BidiMap<V,K> inverseBidiMap){

  super(normalMap,reverseMap,inverseBidiMap);

}

