Location: DynamicHasherBuilderTest.java

Content: 

/** 

 * Tests that build resets the builder.

 */

@Test public void buildResetTest(){

  builder.with(new byte[]{123});

  final OfInt iter=builder.build().iterator(shape);

  assertTrue(iter.hasNext());

  iter.next();

  assertFalse(iter.hasNext());

  final OfInt iter2=builder.build().iterator(shape);

  assertFalse(iter2.hasNext());

}

Location: DynamicHasherBuilderTest.java

Content: 

/** 

 * Tests that hashing a byte array works as expected.

 */

@Test public void buildTest_byteArray(){

  final byte[] bytes=testString.getBytes();

  final DynamicHasher hasher=builder.with(bytes).build();

  final int expected=(int)Math.floorMod((long)hf.apply(bytes,0),(long)shape.getNumberOfBits());

  final OfInt iter=hasher.iterator(shape);

  assertTrue(iter.hasNext());

  assertEquals(expected,iter.nextInt());

  assertFalse(iter.hasNext());

}

Location: DynamicHasherBuilderTest.java

Content: 

/** 

 * Tests that an empty hasher works as expected.

 */

@Test public void buildTest_Empty(){

  final DynamicHasher hasher=builder.build();

  final OfInt iter=hasher.iterator(shape);

  assertFalse(iter.hasNext());

  try {

    iter.nextInt();

    fail("Should have thrown NoSuchElementException");

  }

 catch (  final NoSuchElementException ignore) {

  }

}

Location: DynamicHasherBuilderTest.java

Content: 

/** 

 * Tests that hashing a string works as expected.

 */

@Test public void buildTest_String(){

  final byte[] bytes=testString.getBytes(StandardCharsets.UTF_8);

  final DynamicHasher hasher=builder.with(testString,StandardCharsets.UTF_8).build();

  final int expected=(int)Math.floorMod((long)hf.apply(bytes,0),(long)shape.getNumberOfBits());

  final OfInt iter=hasher.iterator(shape);

  assertTrue(iter.hasNext());

  assertEquals(expected,iter.nextInt());

  assertFalse(iter.hasNext());

}

Location: DynamicHasherBuilderTest.java

Content: 

/** 

 * Tests that hashing a string works as expected.

 */

@Test public void buildTest_UnencodedString(){

  final byte[] bytes=testString.getBytes(StandardCharsets.UTF_16LE);

  final DynamicHasher hasher=builder.withUnencoded(testString).build();

  final int expected=(int)Math.floorMod((long)hf.apply(bytes,0),(long)shape.getNumberOfBits());

  final OfInt iter=hasher.iterator(shape);

  assertTrue(iter.hasNext());

  assertEquals(expected,iter.nextInt());

  assertFalse(iter.hasNext());

}

Location: DynamicHasherBuilderTest.java

Content: 

/** 

 * Tests that build resets the builder.

 */

@Test public void buildResetTest(){

  builder.with(new byte[]{123});

  final OfInt iter=builder.build().iterator(shape);

  assertTrue(iter.hasNext());

  iter.next();

  assertFalse(iter.hasNext());

  final OfInt iter2=builder.build().iterator(shape);

  assertFalse(iter2.hasNext());

}

Location: DynamicHasherBuilderTest.java

Content: 

/** 

 * Tests that hashing a byte array works as expected.

 */

@Test public void buildTest_byteArray(){

  final byte[] bytes=testString.getBytes();

  final DynamicHasher hasher=builder.with(bytes).build();

  final int expected=(int)Math.floorMod((long)hf.apply(bytes,0),(long)shape.getNumberOfBits());

  final OfInt iter=hasher.iterator(shape);

  assertTrue(iter.hasNext());

  assertEquals(expected,iter.nextInt());

  assertFalse(iter.hasNext());

}

Location: DynamicHasherBuilderTest.java

Content: 

/** 

 * Tests that an empty hasher works as expected.

 */

@Test public void buildTest_Empty(){

  final DynamicHasher hasher=builder.build();

  final OfInt iter=hasher.iterator(shape);

  assertFalse(iter.hasNext());

  try {

    iter.nextInt();

    fail("Should have thrown NoSuchElementException");

  }

 catch (  final NoSuchElementException ignore) {

  }

}

Location: DynamicHasherBuilderTest.java

Content: 

/** 

 * Tests that hashing a string works as expected.

 */

@Test public void buildTest_String(){

  final byte[] bytes=testString.getBytes(StandardCharsets.UTF_8);

  final DynamicHasher hasher=builder.with(testString,StandardCharsets.UTF_8).build();

  final int expected=(int)Math.floorMod((long)hf.apply(bytes,0),(long)shape.getNumberOfBits());

  final OfInt iter=hasher.iterator(shape);

  assertTrue(iter.hasNext());

  assertEquals(expected,iter.nextInt());

  assertFalse(iter.hasNext());

}

Location: DynamicHasherBuilderTest.java

Content: 

/** 

 * Tests that hashing a string works as expected.

 */

@Test public void buildTest_UnencodedString(){

  final byte[] bytes=testString.getBytes(StandardCharsets.UTF_16LE);

  final DynamicHasher hasher=builder.withUnencoded(testString).build();

  final int expected=(int)Math.floorMod((long)hf.apply(bytes,0),(long)shape.getNumberOfBits());

  final OfInt iter=hasher.iterator(shape);

  assertTrue(iter.hasNext());

  assertEquals(expected,iter.nextInt());

  assertFalse(iter.hasNext());

}

