Location: IndexedCollection.java

Content: 

/** 

 * Provides checking for adding the index.

 * @param object the object to index

 * @throws IllegalArgumentException if the object maps to an existing key and the indexenforces a uniqueness constraint

 */

private void addToIndex(final C object){

  final K key=keyTransformer.transform(object);

  if (uniqueIndex && index.containsKey(key)) {

    throw new IllegalArgumentException("Duplicate key in uniquely indexed collection.");

  }

  index.put(key,object);

}

Location: IndexedCollection.java

Content: 

/** 

 * {@inheritDoc}

 * @throws IllegalArgumentException if the object maps to an existing key and the indexenforces a uniqueness constraint

 */

@Override public boolean add(final C object){

  final boolean added=super.add(object);

  if (added) {

    addToIndex(object);

  }

  return added;

}

Location: IndexedCollection.java

Content: 

/** 

 * Create a  {@link IndexedCollection}.

 * @param coll  decorated {@link Collection}

 * @param keyTransformer  {@link Transformer} for generating index keys

 * @param map  map to use as index

 * @param uniqueIndex  if the index shall enforce uniqueness of index keys

 */

public IndexedCollection(final Collection<C> coll,final Transformer<C,K> keyTransformer,final MultiMap<K,C> map,final boolean uniqueIndex){

  super(coll);

  this.keyTransformer=keyTransformer;

  this.index=map;

  this.uniqueIndex=uniqueIndex;

  reindex();

}

Location: IndexedCollection.java

Content: 

/** 

 * Create an  {@link IndexedCollection} for a non-unique index.

 * @param < K > the index object type.

 * @param < C > the collection type.

 * @param coll the decorated {@link Collection}.

 * @param keyTransformer the {@link Transformer} for generating index keys.

 * @return the created {@link IndexedCollection}.

 */

public static <K,C>IndexedCollection<K,C> nonUniqueIndexedCollection(final Collection<C> coll,final Transformer<C,K> keyTransformer){

  return new IndexedCollection<>(coll,keyTransformer,MultiValueMap.<K,C>multiValueMap(new HashMap<K,Collection<C>>()),false);

}

Location: IndexedCollection.java

Content: 

/** 

 * Clears the index and re-indexes the entire decorated  {@link Collection}.

 */

public void reindex(){

  index.clear();

  for (  final C c : decorated()) {

    addToIndex(c);

  }

}

Location: IndexedCollection.java

Content: 

/** 

 * Removes an object from the index.

 * @param object the object to remove

 */

private void removeFromIndex(final C object){

  index.remove(keyTransformer.transform(object));

}

Location: IndexedCollection.java

Content: 

/** 

 * Create an  {@link IndexedCollection} for a unique index.<p> If an element is added, which maps to an existing key, an  {@link IllegalArgumentException}will be thrown.

 * @param < K > the index object type.

 * @param < C > the collection type.

 * @param coll the decorated {@link Collection}.

 * @param keyTransformer the {@link Transformer} for generating index keys.

 * @return the created {@link IndexedCollection}.

 */

public static <K,C>IndexedCollection<K,C> uniqueIndexedCollection(final Collection<C> coll,final Transformer<C,K> keyTransformer){

  return new IndexedCollection<>(coll,keyTransformer,MultiValueMap.<K,C>multiValueMap(new HashMap<K,Collection<C>>()),true);

}

Location: IndexedCollection.java

Content: 

/** 

 * Get all elements associated with the given key.

 * @param key  key to look up

 * @return a collection of elements found, or null if {@code contains(key) == false}

 */

@SuppressWarnings("unchecked") public Collection<C> values(final K key){

  return (Collection<C>)index.get(key);

}

Location: IndexedCollection.java

Content: 

/** 

 * Provides checking for adding the index.

 * @param object the object to index

 * @throws IllegalArgumentException if the object maps to an existing key and the indexenforces a uniqueness constraint

 */

private void addToIndex(final C object){

  final K key=keyTransformer.transform(object);

  if (uniqueIndex && index.containsKey(key)) {

    throw new IllegalArgumentException("Duplicate key in uniquely indexed collection.");

  }

  index.put(key,object);

}

Location: IndexedCollection.java

Content: 

/** 

 * {@inheritDoc}

 * @throws IllegalArgumentException if the object maps to an existing key and the indexenforces a uniqueness constraint

 */

@Override public boolean add(final C object){

  final boolean added=super.add(object);

  if (added) {

    addToIndex(object);

  }

  return added;

}

Location: IndexedCollection.java

Content: 

/** 

 * Create a  {@link IndexedCollection}.

 * @param coll  decorated {@link Collection}

 * @param keyTransformer  {@link Transformer} for generating index keys

 * @param map  map to use as index

 * @param uniqueIndex  if the index shall enforce uniqueness of index keys

 */

public IndexedCollection(final Collection<C> coll,final Transformer<C,K> keyTransformer,final MultiMap<K,C> map,final boolean uniqueIndex){

  super(coll);

  this.keyTransformer=keyTransformer;

  this.index=map;

  this.uniqueIndex=uniqueIndex;

  reindex();

}

Location: IndexedCollection.java

Content: 

/** 

 * Create an  {@link IndexedCollection} for a non-unique index.

 * @param < K > the index object type.

 * @param < C > the collection type.

 * @param coll the decorated {@link Collection}.

 * @param keyTransformer the {@link Transformer} for generating index keys.

 * @return the created {@link IndexedCollection}.

 */

public static <K,C>IndexedCollection<K,C> nonUniqueIndexedCollection(final Collection<C> coll,final Transformer<C,K> keyTransformer){

  return new IndexedCollection<>(coll,keyTransformer,MultiValueMap.<K,C>multiValueMap(new HashMap<K,Collection<C>>()),false);

}

Location: IndexedCollection.java

Content: 

/** 

 * Clears the index and re-indexes the entire decorated  {@link Collection}.

 */

public void reindex(){

  index.clear();

  for (  final C c : decorated()) {

    addToIndex(c);

  }

}

Location: IndexedCollection.java

Content: 

/** 

 * Removes an object from the index.

 * @param object the object to remove

 */

private void removeFromIndex(final C object){

  index.remove(keyTransformer.transform(object));

}

Location: IndexedCollection.java

Content: 

/** 

 * Create an  {@link IndexedCollection} for a unique index.<p> If an element is added, which maps to an existing key, an  {@link IllegalArgumentException}will be thrown.

 * @param < K > the index object type.

 * @param < C > the collection type.

 * @param coll the decorated {@link Collection}.

 * @param keyTransformer the {@link Transformer} for generating index keys.

 * @return the created {@link IndexedCollection}.

 */

public static <K,C>IndexedCollection<K,C> uniqueIndexedCollection(final Collection<C> coll,final Transformer<C,K> keyTransformer){

  return new IndexedCollection<>(coll,keyTransformer,MultiValueMap.<K,C>multiValueMap(new HashMap<K,Collection<C>>()),true);

}

Location: IndexedCollection.java

Content: 

/** 

 * Get all elements associated with the given key.

 * @param key  key to look up

 * @return a collection of elements found, or null if {@code contains(key) == false}

 */

@SuppressWarnings("unchecked") public Collection<C> values(final K key){

  return (Collection<C>)index.get(key);

}

