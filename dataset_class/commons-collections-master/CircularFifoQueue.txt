Location: CircularFifoQueue.java

Content: 

/** 

 * Constructor that creates a queue with the default size of 32.

 */

public CircularFifoQueue(){

  this(32);

}

Location: CircularFifoQueue.java

Content: 

/** 

 * Constructor that creates a queue from the specified collection. The collection size also sets the queue size.

 * @param coll  the collection to copy into the queue, may not be null

 * @throws NullPointerException if the collection is null

 */

public CircularFifoQueue(final Collection<? extends E> coll){

  this(coll.size());

  addAll(coll);

}

Location: CircularFifoQueue.java

Content: 

/** 

 * Constructor that creates a queue with the specified size.

 * @param size  the size of the queue (cannot be changed)

 * @throws IllegalArgumentException  if the size is &lt; 1

 */

@SuppressWarnings("unchecked") public CircularFifoQueue(final int size){

  if (size <= 0) {

    throw new IllegalArgumentException("The size must be greater than 0");

  }

  elements=(E[])new Object[size];

  maxElements=elements.length;

}

Location: CircularFifoQueue.java

Content: 

/** 

 * Decrements the internal index.

 * @param index  the index to decrement

 * @return the updated index

 */

private int decrement(int index){

  index--;

  if (index < 0) {

    index=maxElements - 1;

  }

  return index;

}

Location: CircularFifoQueue.java

Content: 

/** 

 * Increments the internal index.

 * @param index  the index to increment

 * @return the updated index

 */

private int increment(int index){

  index++;

  if (index >= maxElements) {

    index=0;

  }

  return index;

}

Location: CircularFifoQueue.java

Content: 

/** 

 * Returns  {@code true} if the capacity limit of this queue has been reached,i.e. the number of elements stored in the queue equals its maximum size.

 * @return {@code true} if the capacity limit has been reached, {@code false} otherwise

 * @since 4.1

 */

public boolean isAtFullCapacity(){

  return size() == maxElements;

}

Location: CircularFifoQueue.java

Content: 

/** 

 * Constructor that creates a queue with the default size of 32.

 */

public CircularFifoQueue(){

  this(32);

}

Location: CircularFifoQueue.java

Content: 

/** 

 * Constructor that creates a queue from the specified collection. The collection size also sets the queue size.

 * @param coll  the collection to copy into the queue, may not be null

 * @throws NullPointerException if the collection is null

 */

public CircularFifoQueue(final Collection<? extends E> coll){

  this(coll.size());

  addAll(coll);

}

Location: CircularFifoQueue.java

Content: 

/** 

 * Constructor that creates a queue with the specified size.

 * @param size  the size of the queue (cannot be changed)

 * @throws IllegalArgumentException  if the size is &lt; 1

 */

@SuppressWarnings("unchecked") public CircularFifoQueue(final int size){

  if (size <= 0) {

    throw new IllegalArgumentException("The size must be greater than 0");

  }

  elements=(E[])new Object[size];

  maxElements=elements.length;

}

Location: CircularFifoQueue.java

Content: 

/** 

 * Decrements the internal index.

 * @param index  the index to decrement

 * @return the updated index

 */

private int decrement(int index){

  index--;

  if (index < 0) {

    index=maxElements - 1;

  }

  return index;

}

Location: CircularFifoQueue.java

Content: 

/** 

 * Increments the internal index.

 * @param index  the index to increment

 * @return the updated index

 */

private int increment(int index){

  index++;

  if (index >= maxElements) {

    index=0;

  }

  return index;

}

Location: CircularFifoQueue.java

Content: 

/** 

 * Returns  {@code true} if the capacity limit of this queue has been reached,i.e. the number of elements stored in the queue equals its maximum size.

 * @return {@code true} if the capacity limit has been reached, {@code false} otherwise

 * @since 4.1

 */

public boolean isAtFullCapacity(){

  return size() == maxElements;

}

