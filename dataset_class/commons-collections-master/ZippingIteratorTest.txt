Location: ZippingIteratorTest.java

Content: 

public void testIterateEven(){

  @SuppressWarnings("unchecked") final ZippingIterator<Integer> iter=new ZippingIterator<>(evens.iterator());

  for (  final Integer even : evens) {

    assertTrue(iter.hasNext());

    assertEquals(even,iter.next());

  }

  assertFalse(iter.hasNext());

}

Location: ZippingIteratorTest.java

Content: 

public void testIterateEvenEven(){

  final ZippingIterator<Integer> iter=new ZippingIterator<>(evens.iterator(),evens.iterator());

  for (  final Integer even : evens) {

    assertTrue(iter.hasNext());

    assertEquals(even,iter.next());

    assertTrue(iter.hasNext());

    assertEquals(even,iter.next());

  }

  assertFalse(iter.hasNext());

}

Location: ZippingIteratorTest.java

Content: 

public void testIterateEvenOdd(){

  final ZippingIterator<Integer> iter=new ZippingIterator<>(evens.iterator(),odds.iterator());

  for (int i=0; i < 20; i++) {

    assertTrue(iter.hasNext());

    assertEquals(Integer.valueOf(i),iter.next());

  }

  assertFalse(iter.hasNext());

}

Location: ZippingIteratorTest.java

Content: 

public void testIterateFibEvenOdd(){

  final ZippingIterator<Integer> iter=new ZippingIterator<>(fib.iterator(),evens.iterator(),odds.iterator());

  assertEquals(Integer.valueOf(1),iter.next());

  assertEquals(Integer.valueOf(0),iter.next());

  assertEquals(Integer.valueOf(1),iter.next());

  assertEquals(Integer.valueOf(1),iter.next());

  assertEquals(Integer.valueOf(2),iter.next());

  assertEquals(Integer.valueOf(3),iter.next());

  assertEquals(Integer.valueOf(2),iter.next());

  assertEquals(Integer.valueOf(4),iter.next());

  assertEquals(Integer.valueOf(5),iter.next());

  assertEquals(Integer.valueOf(3),iter.next());

  assertEquals(Integer.valueOf(6),iter.next());

  assertEquals(Integer.valueOf(7),iter.next());

  assertEquals(Integer.valueOf(5),iter.next());

  assertEquals(Integer.valueOf(8),iter.next());

  assertEquals(Integer.valueOf(9),iter.next());

  assertEquals(Integer.valueOf(8),iter.next());

  assertEquals(Integer.valueOf(10),iter.next());

  assertEquals(Integer.valueOf(11),iter.next());

  assertEquals(Integer.valueOf(13),iter.next());

  assertEquals(Integer.valueOf(12),iter.next());

  assertEquals(Integer.valueOf(13),iter.next());

  assertEquals(Integer.valueOf(21),iter.next());

  assertEquals(Integer.valueOf(14),iter.next());

  assertEquals(Integer.valueOf(15),iter.next());

  assertEquals(Integer.valueOf(16),iter.next());

  assertEquals(Integer.valueOf(17),iter.next());

  assertEquals(Integer.valueOf(18),iter.next());

  assertEquals(Integer.valueOf(19),iter.next());

  assertFalse(iter.hasNext());

}

Location: ZippingIteratorTest.java

Content: 

public void testIterateOddEven(){

  final ZippingIterator<Integer> iter=new ZippingIterator<>(odds.iterator(),evens.iterator());

  for (int i=0, j=0; i < 20; i++) {

    assertTrue(iter.hasNext());

    final int val=iter.next();

    if (i % 2 == 0) {

      assertEquals(odds.get(j).intValue(),val);

    }

 else {

      assertEquals(evens.get(j).intValue(),val);

      j++;

    }

  }

  assertFalse(iter.hasNext());

}

Location: ZippingIteratorTest.java

Content: 

public void testRemoveFromDouble(){

  final ZippingIterator<Integer> iter=new ZippingIterator<>(evens.iterator(),odds.iterator());

  int expectedSize=evens.size() + odds.size();

  while (iter.hasNext()) {

    final Object o=iter.next();

    final Integer val=(Integer)o;

    if (val.intValue() % 4 == 0 || val.intValue() % 3 == 0) {

      expectedSize--;

      iter.remove();

    }

  }

  assertEquals(expectedSize,evens.size() + odds.size());

}

Location: ZippingIteratorTest.java

Content: 

public void testRemoveFromSingle(){

  @SuppressWarnings("unchecked") final ZippingIterator<Integer> iter=new ZippingIterator<>(evens.iterator());

  int expectedSize=evens.size();

  while (iter.hasNext()) {

    final Object o=iter.next();

    final Integer val=(Integer)o;

    if (val.intValue() % 4 == 0) {

      expectedSize--;

      iter.remove();

    }

  }

  assertEquals(expectedSize,evens.size());

}

Location: ZippingIteratorTest.java

Content: 

public ZippingIteratorTest(final String testName){

  super(testName);

}

Location: ZippingIteratorTest.java

Content: 

public void testIterateEven(){

  @SuppressWarnings("unchecked") final ZippingIterator<Integer> iter=new ZippingIterator<>(evens.iterator());

  for (  final Integer even : evens) {

    assertTrue(iter.hasNext());

    assertEquals(even,iter.next());

  }

  assertFalse(iter.hasNext());

}

Location: ZippingIteratorTest.java

Content: 

public void testIterateEvenEven(){

  final ZippingIterator<Integer> iter=new ZippingIterator<>(evens.iterator(),evens.iterator());

  for (  final Integer even : evens) {

    assertTrue(iter.hasNext());

    assertEquals(even,iter.next());

    assertTrue(iter.hasNext());

    assertEquals(even,iter.next());

  }

  assertFalse(iter.hasNext());

}

Location: ZippingIteratorTest.java

Content: 

public void testIterateEvenOdd(){

  final ZippingIterator<Integer> iter=new ZippingIterator<>(evens.iterator(),odds.iterator());

  for (int i=0; i < 20; i++) {

    assertTrue(iter.hasNext());

    assertEquals(Integer.valueOf(i),iter.next());

  }

  assertFalse(iter.hasNext());

}

Location: ZippingIteratorTest.java

Content: 

public void testIterateFibEvenOdd(){

  final ZippingIterator<Integer> iter=new ZippingIterator<>(fib.iterator(),evens.iterator(),odds.iterator());

  assertEquals(Integer.valueOf(1),iter.next());

  assertEquals(Integer.valueOf(0),iter.next());

  assertEquals(Integer.valueOf(1),iter.next());

  assertEquals(Integer.valueOf(1),iter.next());

  assertEquals(Integer.valueOf(2),iter.next());

  assertEquals(Integer.valueOf(3),iter.next());

  assertEquals(Integer.valueOf(2),iter.next());

  assertEquals(Integer.valueOf(4),iter.next());

  assertEquals(Integer.valueOf(5),iter.next());

  assertEquals(Integer.valueOf(3),iter.next());

  assertEquals(Integer.valueOf(6),iter.next());

  assertEquals(Integer.valueOf(7),iter.next());

  assertEquals(Integer.valueOf(5),iter.next());

  assertEquals(Integer.valueOf(8),iter.next());

  assertEquals(Integer.valueOf(9),iter.next());

  assertEquals(Integer.valueOf(8),iter.next());

  assertEquals(Integer.valueOf(10),iter.next());

  assertEquals(Integer.valueOf(11),iter.next());

  assertEquals(Integer.valueOf(13),iter.next());

  assertEquals(Integer.valueOf(12),iter.next());

  assertEquals(Integer.valueOf(13),iter.next());

  assertEquals(Integer.valueOf(21),iter.next());

  assertEquals(Integer.valueOf(14),iter.next());

  assertEquals(Integer.valueOf(15),iter.next());

  assertEquals(Integer.valueOf(16),iter.next());

  assertEquals(Integer.valueOf(17),iter.next());

  assertEquals(Integer.valueOf(18),iter.next());

  assertEquals(Integer.valueOf(19),iter.next());

  assertFalse(iter.hasNext());

}

Location: ZippingIteratorTest.java

Content: 

public void testIterateOddEven(){

  final ZippingIterator<Integer> iter=new ZippingIterator<>(odds.iterator(),evens.iterator());

  for (int i=0, j=0; i < 20; i++) {

    assertTrue(iter.hasNext());

    final int val=iter.next();

    if (i % 2 == 0) {

      assertEquals(odds.get(j).intValue(),val);

    }

 else {

      assertEquals(evens.get(j).intValue(),val);

      j++;

    }

  }

  assertFalse(iter.hasNext());

}

Location: ZippingIteratorTest.java

Content: 

public void testRemoveFromDouble(){

  final ZippingIterator<Integer> iter=new ZippingIterator<>(evens.iterator(),odds.iterator());

  int expectedSize=evens.size() + odds.size();

  while (iter.hasNext()) {

    final Object o=iter.next();

    final Integer val=(Integer)o;

    if (val.intValue() % 4 == 0 || val.intValue() % 3 == 0) {

      expectedSize--;

      iter.remove();

    }

  }

  assertEquals(expectedSize,evens.size() + odds.size());

}

Location: ZippingIteratorTest.java

Content: 

public void testRemoveFromSingle(){

  @SuppressWarnings("unchecked") final ZippingIterator<Integer> iter=new ZippingIterator<>(evens.iterator());

  int expectedSize=evens.size();

  while (iter.hasNext()) {

    final Object o=iter.next();

    final Integer val=(Integer)o;

    if (val.intValue() % 4 == 0) {

      expectedSize--;

      iter.remove();

    }

  }

  assertEquals(expectedSize,evens.size());

}

Location: ZippingIteratorTest.java

Content: 

public ZippingIteratorTest(final String testName){

  super(testName);

}

