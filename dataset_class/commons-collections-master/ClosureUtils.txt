Location: ClosureUtils.java

Content: 

/** 

 * Creates a Closure that calls a Transformer each time it is called. The transformer will be called using the closure's input object. The transformer's result will be ignored.

 * @see org.apache.commons.collections4.functors.TransformerClosure

 * @param < E >  the type that the closure acts on

 * @param transformer  the transformer to run each time in the closure, null means nop

 * @return the closure

 */

public static <E>Closure<E> asClosure(final Transformer<? super E,?> transformer){

  return TransformerClosure.transformerClosure(transformer);

}

Location: ClosureUtils.java

Content: 

/** 

 * Don't allow instances.

 */

private ClosureUtils(){

}

Location: ClosureUtils.java

Content: 

/** 

 * Creates a Closure that will call the closure once and then repeatedly until the predicate returns false.

 * @see org.apache.commons.collections4.functors.WhileClosure

 * @param < E >  the type that the closure acts on

 * @param closure  the closure to call repeatedly, not null

 * @param predicate  the predicate to use as an end of loop test, not null

 * @return the {@code do-while} closure

 * @throws NullPointerException if either argument is null

 */

public static <E>Closure<E> doWhileClosure(final Closure<? super E> closure,final Predicate<? super E> predicate){

  return WhileClosure.<E>whileClosure(predicate,closure,true);

}

Location: ClosureUtils.java

Content: 

/** 

 * Creates a Closure that will invoke a specific method on the closure's input object by reflection.

 * @see org.apache.commons.collections4.functors.InvokerTransformer

 * @see org.apache.commons.collections4.functors.TransformerClosure

 * @param < E >  the type that the closure acts on

 * @param methodName  the name of the method

 * @return the {@code invoker} closure

 * @throws NullPointerException if the method name is null

 */

public static <E>Closure<E> invokerClosure(final String methodName){

  return asClosure(InvokerTransformer.<E,Object>invokerTransformer(methodName));

}

Location: ClosureUtils.java

Content: 

/** 

 * Creates a Closure that will invoke a specific method on the closure's input object by reflection.

 * @see org.apache.commons.collections4.functors.InvokerTransformer

 * @see org.apache.commons.collections4.functors.TransformerClosure

 * @param < E >  the type that the closure acts on

 * @param methodName  the name of the method

 * @param paramTypes  the parameter types

 * @param args  the arguments

 * @return the {@code invoker} closure

 * @throws NullPointerException if the method name is null

 * @throws IllegalArgumentException if the paramTypes and args don't match

 */

public static <E>Closure<E> invokerClosure(final String methodName,final Class<?>[] paramTypes,final Object[] args){

  return asClosure(InvokerTransformer.<E,Object>invokerTransformer(methodName,paramTypes,args));

}

Location: ClosureUtils.java

Content: 

/** 

 * Create a new Closure that calls one of the closures depending on the predicates. <p> The closure at array location 0 is called if the predicate at array location 0 returned true. Each predicate is evaluated until one returns true.

 * @see org.apache.commons.collections4.functors.SwitchClosure

 * @param < E >  the type that the closure acts on

 * @param predicates  an array of predicates to check, not null

 * @param closures  an array of closures to call, not null

 * @return the {@code switch} closure

 * @throws NullPointerException if the either array is null

 * @throws NullPointerException if any element in the arrays is null

 * @throws IllegalArgumentException if the arrays have different sizes

 */

public static <E>Closure<E> switchClosure(final Predicate<? super E>[] predicates,final Closure<? super E>[] closures){

  return SwitchClosure.<E>switchClosure(predicates,closures,null);

}

Location: ClosureUtils.java

Content: 

/** 

 * Create a new Closure that uses the input object as a key to find the closure to call. <p> The Map consists of object keys and Closure values. A closure is called if the input object equals the key. If there is no match, the default closure is called. The default closure is set in the map using a null key.

 * @see org.apache.commons.collections4.functors.SwitchClosure

 * @param < E >  the type that the closure acts on

 * @param objectsAndClosures  a map of objects to closures

 * @return the closure

 * @throws NullPointerException if the map is null

 * @throws NullPointerException if any closure in the map is null

 * @throws IllegalArgumentException if the map is empty

 */

@SuppressWarnings("unchecked") public static <E>Closure<E> switchMapClosure(final Map<? extends E,Closure<E>> objectsAndClosures){

  Objects.requireNonNull(objectsAndClosures,"objectsAndClosures");

  final Closure<? super E> def=objectsAndClosures.remove(null);

  final int size=objectsAndClosures.size();

  final Closure<? super E>[] trs=new Closure[size];

  final Predicate<E>[] preds=new Predicate[size];

  int i=0;

  for (  final Map.Entry<? extends E,Closure<E>> entry : objectsAndClosures.entrySet()) {

    preds[i]=EqualPredicate.<E>equalPredicate(entry.getKey());

    trs[i]=entry.getValue();

    i++;

  }

  return ClosureUtils.<E>switchClosure(preds,trs,def);

}

Location: ClosureUtils.java

Content: 

/** 

 * Creates a Closure that will call the closure repeatedly until the predicate returns false.

 * @see org.apache.commons.collections4.functors.WhileClosure

 * @param < E >  the type that the closure acts on

 * @param predicate  the predicate to use as an end of loop test, not null

 * @param closure  the closure to call repeatedly, not null

 * @return the {@code while} closure

 * @throws NullPointerException if either argument is null

 */

public static <E>Closure<E> whileClosure(final Predicate<? super E> predicate,final Closure<? super E> closure){

  return WhileClosure.<E>whileClosure(predicate,closure,false);

}

Location: ClosureUtils.java

Content: 

/** 

 * Creates a Closure that calls a Transformer each time it is called. The transformer will be called using the closure's input object. The transformer's result will be ignored.

 * @see org.apache.commons.collections4.functors.TransformerClosure

 * @param < E >  the type that the closure acts on

 * @param transformer  the transformer to run each time in the closure, null means nop

 * @return the closure

 */

public static <E>Closure<E> asClosure(final Transformer<? super E,?> transformer){

  return TransformerClosure.transformerClosure(transformer);

}

Location: ClosureUtils.java

Content: 

/** 

 * Don't allow instances.

 */

private ClosureUtils(){

}

Location: ClosureUtils.java

Content: 

/** 

 * Creates a Closure that will call the closure once and then repeatedly until the predicate returns false.

 * @see org.apache.commons.collections4.functors.WhileClosure

 * @param < E >  the type that the closure acts on

 * @param closure  the closure to call repeatedly, not null

 * @param predicate  the predicate to use as an end of loop test, not null

 * @return the {@code do-while} closure

 * @throws NullPointerException if either argument is null

 */

public static <E>Closure<E> doWhileClosure(final Closure<? super E> closure,final Predicate<? super E> predicate){

  return WhileClosure.<E>whileClosure(predicate,closure,true);

}

Location: ClosureUtils.java

Content: 

/** 

 * Creates a Closure that will invoke a specific method on the closure's input object by reflection.

 * @see org.apache.commons.collections4.functors.InvokerTransformer

 * @see org.apache.commons.collections4.functors.TransformerClosure

 * @param < E >  the type that the closure acts on

 * @param methodName  the name of the method

 * @return the {@code invoker} closure

 * @throws NullPointerException if the method name is null

 */

public static <E>Closure<E> invokerClosure(final String methodName){

  return asClosure(InvokerTransformer.<E,Object>invokerTransformer(methodName));

}

Location: ClosureUtils.java

Content: 

/** 

 * Creates a Closure that will invoke a specific method on the closure's input object by reflection.

 * @see org.apache.commons.collections4.functors.InvokerTransformer

 * @see org.apache.commons.collections4.functors.TransformerClosure

 * @param < E >  the type that the closure acts on

 * @param methodName  the name of the method

 * @param paramTypes  the parameter types

 * @param args  the arguments

 * @return the {@code invoker} closure

 * @throws NullPointerException if the method name is null

 * @throws IllegalArgumentException if the paramTypes and args don't match

 */

public static <E>Closure<E> invokerClosure(final String methodName,final Class<?>[] paramTypes,final Object[] args){

  return asClosure(InvokerTransformer.<E,Object>invokerTransformer(methodName,paramTypes,args));

}

Location: ClosureUtils.java

Content: 

/** 

 * Create a new Closure that calls one of the closures depending on the predicates. <p> The closure at array location 0 is called if the predicate at array location 0 returned true. Each predicate is evaluated until one returns true.

 * @see org.apache.commons.collections4.functors.SwitchClosure

 * @param < E >  the type that the closure acts on

 * @param predicates  an array of predicates to check, not null

 * @param closures  an array of closures to call, not null

 * @return the {@code switch} closure

 * @throws NullPointerException if the either array is null

 * @throws NullPointerException if any element in the arrays is null

 * @throws IllegalArgumentException if the arrays have different sizes

 */

public static <E>Closure<E> switchClosure(final Predicate<? super E>[] predicates,final Closure<? super E>[] closures){

  return SwitchClosure.<E>switchClosure(predicates,closures,null);

}

Location: ClosureUtils.java

Content: 

/** 

 * Create a new Closure that uses the input object as a key to find the closure to call. <p> The Map consists of object keys and Closure values. A closure is called if the input object equals the key. If there is no match, the default closure is called. The default closure is set in the map using a null key.

 * @see org.apache.commons.collections4.functors.SwitchClosure

 * @param < E >  the type that the closure acts on

 * @param objectsAndClosures  a map of objects to closures

 * @return the closure

 * @throws NullPointerException if the map is null

 * @throws NullPointerException if any closure in the map is null

 * @throws IllegalArgumentException if the map is empty

 */

@SuppressWarnings("unchecked") public static <E>Closure<E> switchMapClosure(final Map<? extends E,Closure<E>> objectsAndClosures){

  Objects.requireNonNull(objectsAndClosures,"objectsAndClosures");

  final Closure<? super E> def=objectsAndClosures.remove(null);

  final int size=objectsAndClosures.size();

  final Closure<? super E>[] trs=new Closure[size];

  final Predicate<E>[] preds=new Predicate[size];

  int i=0;

  for (  final Map.Entry<? extends E,Closure<E>> entry : objectsAndClosures.entrySet()) {

    preds[i]=EqualPredicate.<E>equalPredicate(entry.getKey());

    trs[i]=entry.getValue();

    i++;

  }

  return ClosureUtils.<E>switchClosure(preds,trs,def);

}

Location: ClosureUtils.java

Content: 

/** 

 * Creates a Closure that will call the closure repeatedly until the predicate returns false.

 * @see org.apache.commons.collections4.functors.WhileClosure

 * @param < E >  the type that the closure acts on

 * @param predicate  the predicate to use as an end of loop test, not null

 * @param closure  the closure to call repeatedly, not null

 * @return the {@code while} closure

 * @throws NullPointerException if either argument is null

 */

public static <E>Closure<E> whileClosure(final Predicate<? super E> predicate,final Closure<? super E> closure){

  return WhileClosure.<E>whileClosure(predicate,closure,false);

}

