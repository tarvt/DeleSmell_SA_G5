Location: PassiveExpiringMapTest.java

Content: 

private Map<Integer,String> makeDecoratedTestMap(){

  final Map<Integer,String> m=new HashMap<>();

  m.put(Integer.valueOf(1),"one");

  m.put(Integer.valueOf(2),"two");

  m.put(Integer.valueOf(3),"three");

  m.put(Integer.valueOf(4),"four");

  m.put(Integer.valueOf(5),"five");

  m.put(Integer.valueOf(6),"six");

  return new PassiveExpiringMap<>(new TestExpirationPolicy(),m);

}

Location: PassiveExpiringMapTest.java

Content: 

public PassiveExpiringMapTest(final String testName){

  super(testName);

}

Location: PassiveExpiringMapTest.java

Content: 

public void testConstructors(){

  try {

    final Map<String,String> map=null;

    new PassiveExpiringMap<>(map);

    fail("constructor - exception should have been thrown.");

  }

 catch (  final NullPointerException ex) {

  }

  try {

    final ExpirationPolicy<String,String> policy=null;

    new PassiveExpiringMap<>(policy);

    fail("constructor - exception should have been thrown.");

  }

 catch (  final NullPointerException ex) {

  }

  try {

    final TimeUnit unit=null;

    new PassiveExpiringMap<String,String>(10L,unit);

    fail("constructor - exception should have been thrown.");

  }

 catch (  final NullPointerException ex) {

  }

}

Location: PassiveExpiringMapTest.java

Content: 

public void testDecoratedMap(){

  final Map<Integer,String> m=makeDecoratedTestMap();

  assertEquals(6,m.size());

  assertEquals("one",m.get(Integer.valueOf(1)));

  assertEquals("two",m.get(Integer.valueOf(2)));

  m.remove(Integer.valueOf(2));

  assertEquals(5,m.size());

  assertEquals("one",m.get(Integer.valueOf(1)));

  assertNull(m.get(Integer.valueOf(2)));

  assertNull(m.get(Integer.valueOf(2)));

  m.put(Integer.valueOf(2),"two");

  assertEquals(6,m.size());

  assertEquals("one",m.get(Integer.valueOf(1)));

  assertEquals("two",m.get(Integer.valueOf(2)));

  m.put(Integer.valueOf(1),"one-one");

  assertEquals(5,m.size());

  assertNull(m.get(Integer.valueOf(1)));

  assertEquals("two",m.get(Integer.valueOf(2)));

}

Location: PassiveExpiringMapTest.java

Content: 

public void testExpiration(){

  validateExpiration(new PassiveExpiringMap<String,String>(500),500);

  validateExpiration(new PassiveExpiringMap<String,String>(1000),1000);

  validateExpiration(new PassiveExpiringMap<>(new PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<String,String>(500)),500);

  validateExpiration(new PassiveExpiringMap<>(new PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<String,String>(1,TimeUnit.SECONDS)),1000);

}

Location: PassiveExpiringMapTest.java

Content: 

public void testZeroTimeToLive(){

  final PassiveExpiringMap<String,String> m=new PassiveExpiringMap<>(0L);

  m.put("a","b");

  assertNull(m.get("a"));

}

Location: PassiveExpiringMapTest.java

Content: 

private void validateExpiration(final Map<String,String> map,final long timeout){

  map.put("a","b");

  assertNotNull(map.get("a"));

  try {

    Thread.sleep(2 * timeout);

  }

 catch (  final InterruptedException e) {

    fail();

  }

  assertNull(map.get("a"));

}

Location: PassiveExpiringMapTest.java

Content: 

private Map<Integer,String> makeDecoratedTestMap(){

  final Map<Integer,String> m=new HashMap<>();

  m.put(Integer.valueOf(1),"one");

  m.put(Integer.valueOf(2),"two");

  m.put(Integer.valueOf(3),"three");

  m.put(Integer.valueOf(4),"four");

  m.put(Integer.valueOf(5),"five");

  m.put(Integer.valueOf(6),"six");

  return new PassiveExpiringMap<>(new TestExpirationPolicy(),m);

}

Location: PassiveExpiringMapTest.java

Content: 

public PassiveExpiringMapTest(final String testName){

  super(testName);

}

Location: PassiveExpiringMapTest.java

Content: 

public void testConstructors(){

  try {

    final Map<String,String> map=null;

    new PassiveExpiringMap<>(map);

    fail("constructor - exception should have been thrown.");

  }

 catch (  final NullPointerException ex) {

  }

  try {

    final ExpirationPolicy<String,String> policy=null;

    new PassiveExpiringMap<>(policy);

    fail("constructor - exception should have been thrown.");

  }

 catch (  final NullPointerException ex) {

  }

  try {

    final TimeUnit unit=null;

    new PassiveExpiringMap<String,String>(10L,unit);

    fail("constructor - exception should have been thrown.");

  }

 catch (  final NullPointerException ex) {

  }

}

Location: PassiveExpiringMapTest.java

Content: 

public void testDecoratedMap(){

  final Map<Integer,String> m=makeDecoratedTestMap();

  assertEquals(6,m.size());

  assertEquals("one",m.get(Integer.valueOf(1)));

  assertEquals("two",m.get(Integer.valueOf(2)));

  m.remove(Integer.valueOf(2));

  assertEquals(5,m.size());

  assertEquals("one",m.get(Integer.valueOf(1)));

  assertNull(m.get(Integer.valueOf(2)));

  assertNull(m.get(Integer.valueOf(2)));

  m.put(Integer.valueOf(2),"two");

  assertEquals(6,m.size());

  assertEquals("one",m.get(Integer.valueOf(1)));

  assertEquals("two",m.get(Integer.valueOf(2)));

  m.put(Integer.valueOf(1),"one-one");

  assertEquals(5,m.size());

  assertNull(m.get(Integer.valueOf(1)));

  assertEquals("two",m.get(Integer.valueOf(2)));

}

Location: PassiveExpiringMapTest.java

Content: 

public void testExpiration(){

  validateExpiration(new PassiveExpiringMap<String,String>(500),500);

  validateExpiration(new PassiveExpiringMap<String,String>(1000),1000);

  validateExpiration(new PassiveExpiringMap<>(new PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<String,String>(500)),500);

  validateExpiration(new PassiveExpiringMap<>(new PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<String,String>(1,TimeUnit.SECONDS)),1000);

}

Location: PassiveExpiringMapTest.java

Content: 

public void testZeroTimeToLive(){

  final PassiveExpiringMap<String,String> m=new PassiveExpiringMap<>(0L);

  m.put("a","b");

  assertNull(m.get("a"));

}

Location: PassiveExpiringMapTest.java

Content: 

private void validateExpiration(final Map<String,String> map,final long timeout){

  map.put("a","b");

  assertNotNull(map.get("a"));

  try {

    Thread.sleep(2 * timeout);

  }

 catch (  final InterruptedException e) {

    fail();

  }

  assertNull(map.get("a"));

}

