Location: CatchAndRethrowClosureTest.java

Content: 

@Override protected <T>Closure<T> generateClosure(){

  return generateNoExceptionClosure();

}

Location: CatchAndRethrowClosureTest.java

Content: 

private static <T>Closure<T> generateIOExceptionClosure(){

  return new CatchAndRethrowClosure<T>(){

    @Override protected void executeAndThrow(    final T input) throws IOException {

      throw new IOException();

    }

  }

;

}

Location: CatchAndRethrowClosureTest.java

Content: 

private static <T>Closure<T> generateNoExceptionClosure(){

  return new CatchAndRethrowClosure<T>(){

    @Override protected void executeAndThrow(    final T input){

    }

  }

;

}

Location: CatchAndRethrowClosureTest.java

Content: 

private static <T>Closure<T> generateNullPointerExceptionClosure(){

  return new CatchAndRethrowClosure<T>(){

    @Override protected void executeAndThrow(    final T input){

      throw new NullPointerException();

    }

  }

;

}

Location: CatchAndRethrowClosureTest.java

Content: 

@Test public void testThrowingClosure(){

  Closure<Integer> closure=generateNoExceptionClosure();

  try {

    closure.execute(Integer.valueOf(0));

  }

 catch (  final RuntimeException ex) {

    fail();

  }

  closure=generateIOExceptionClosure();

  try {

    closure.execute(Integer.valueOf(0));

    fail();

  }

 catch (  final FunctorException ex) {

    assertTrue(ex.getCause() instanceof IOException);

  }

catch (  final RuntimeException ex) {

    fail();

  }

  closure=generateNullPointerExceptionClosure();

  try {

    closure.execute(Integer.valueOf(0));

    fail();

  }

 catch (  final FunctorException ex) {

    fail();

  }

catch (  final RuntimeException ex) {

    assertTrue(ex instanceof NullPointerException);

  }

}

Location: CatchAndRethrowClosureTest.java

Content: 

@Override protected <T>Closure<T> generateClosure(){

  return generateNoExceptionClosure();

}

Location: CatchAndRethrowClosureTest.java

Content: 

private static <T>Closure<T> generateIOExceptionClosure(){

  return new CatchAndRethrowClosure<T>(){

    @Override protected void executeAndThrow(    final T input) throws IOException {

      throw new IOException();

    }

  }

;

}

Location: CatchAndRethrowClosureTest.java

Content: 

private static <T>Closure<T> generateNoExceptionClosure(){

  return new CatchAndRethrowClosure<T>(){

    @Override protected void executeAndThrow(    final T input){

    }

  }

;

}

Location: CatchAndRethrowClosureTest.java

Content: 

private static <T>Closure<T> generateNullPointerExceptionClosure(){

  return new CatchAndRethrowClosure<T>(){

    @Override protected void executeAndThrow(    final T input){

      throw new NullPointerException();

    }

  }

;

}

Location: CatchAndRethrowClosureTest.java

Content: 

@Test public void testThrowingClosure(){

  Closure<Integer> closure=generateNoExceptionClosure();

  try {

    closure.execute(Integer.valueOf(0));

  }

 catch (  final RuntimeException ex) {

    fail();

  }

  closure=generateIOExceptionClosure();

  try {

    closure.execute(Integer.valueOf(0));

    fail();

  }

 catch (  final FunctorException ex) {

    assertTrue(ex.getCause() instanceof IOException);

  }

catch (  final RuntimeException ex) {

    fail();

  }

  closure=generateNullPointerExceptionClosure();

  try {

    closure.execute(Integer.valueOf(0));

    fail();

  }

 catch (  final FunctorException ex) {

    fail();

  }

catch (  final RuntimeException ex) {

    assertTrue(ex instanceof NullPointerException);

  }

}

