Location: BulkTest.java

Content: 

/** 

 * Adds a whole new suite of tests that are defined by the result of the given bulk test method.  In other words, the given bulk test method is invoked, and the resulting BulkTest instance is examined for yet more simple and bulk tests.

 * @param bulk  The instance of the class that defined the method

 * @param m  The bulk test method

 */

void addBulk(final BulkTest bulk,final Method m){

  final String verboseName=prefix + "." + m.getName();

  if (ignored.contains(verboseName)) {

    return;

  }

  final BulkTest bulk2;

  try {

    bulk2=(BulkTest)m.invoke(bulk,(Object[])null);

    if (bulk2 == null) {

      return;

    }

  }

 catch (  final InvocationTargetException ex) {

    ex.getTargetException().printStackTrace();

    throw new Error();

  }

catch (  final IllegalAccessException ex) {

    ex.printStackTrace();

    throw new Error();

  }

  final String oldPrefix=prefix;

  final TestSuite oldResult=result;

  prefix=prefix + "." + m.getName();

  result=new TestSuite();

  result.setName(m.getName());

  make(bulk2);

  oldResult.addTest(result);

  prefix=oldPrefix;

  result=oldResult;

}

Location: BulkTest.java

Content: 

/** 

 * Adds the simple test defined by the given method to the TestSuite.

 * @param bulk  The instance of the class that defined the method(I know it's weird.  But the point is, we can clone the instance and not have to worry about constructors.)

 * @param m  The simple test method

 */

void addTest(final BulkTest bulk,final Method m){

  final BulkTest bulk2=(BulkTest)bulk.clone();

  bulk2.setName(m.getName());

  bulk2.verboseName=prefix + "." + m.getName();

  if (ignored.contains(bulk2.verboseName)) {

    return;

  }

  result.addTest(bulk2);

}

Location: BulkTest.java

Content: 

/** 

 * Constructor.

 * @param startingClass  the starting class

 */

BulkTestSuiteMaker(final Class<? extends BulkTest> startingClass){

  this.startingClass=startingClass;

}

Location: BulkTest.java

Content: 

/** 

 * Constructs a new  {@code BulkTest} instance that will run thespecified simple test.

 * @param name  the name of the simple test method to run

 */

public BulkTest(final String name){

  super(name);

  this.verboseName=getClass().getName();

}

Location: BulkTest.java

Content: 

/** 

 * Returns the base name of the given class.

 * @param c  the class

 * @return the name of that class, minus any package names

 */

private static String getBaseName(final Class<?> c){

  String name=c.getName();

  final int p=name.lastIndexOf('.');

  if (p > 0) {

    name=name.substring(p + 1);

  }

  return name;

}

Location: BulkTest.java

Content: 

private static <T>Constructor<T> getTestCaseConstructor(final Class<T> c){

  try {

    return c.getConstructor(String.class);

  }

 catch (  final NoSuchMethodException e) {

    throw new IllegalArgumentException(c + " must provide a (String) constructor");

  }

}

Location: BulkTest.java

Content: 

/** 

 * Returns true if the given method is a bulk test method.

 */

private static boolean isBulk(final Method m){

  if (!m.getName().startsWith("bulkTest")) {

    return false;

  }

  if (m.getReturnType() != BulkTest.class) {

    return false;

  }

  if (m.getParameterTypes().length != 0) {

    return false;

  }

  final int mods=m.getModifiers();

  if (Modifier.isStatic(mods)) {

    return false;

  }

  if (Modifier.isAbstract(mods)) {

    return false;

  }

  return true;

}

Location: BulkTest.java

Content: 

/** 

 * Returns true if the given method is a simple test method.

 */

private static boolean isTest(final Method m){

  if (!m.getName().startsWith("test")) {

    return false;

  }

  if (m.getReturnType() != Void.TYPE) {

    return false;

  }

  if (m.getParameterTypes().length != 0) {

    return false;

  }

  final int mods=m.getModifiers();

  if (Modifier.isStatic(mods)) {

    return false;

  }

  if (Modifier.isAbstract(mods)) {

    return false;

  }

  return true;

}

Location: BulkTest.java

Content: 

/** 

 * Makes a hierarchical TestSuite based on the starting class.

 * @return the hierarchical TestSuite for startingClass

 */

public TestSuite make(){

  this.result=new TestSuite();

  this.prefix=getBaseName(startingClass);

  result.setName(prefix);

  final BulkTest bulk=makeFirstTestCase(startingClass);

  ignored=new ArrayList<>();

  final String[] s=bulk.ignoredTests();

  if (s != null) {

    ignored.addAll(Arrays.asList(s));

  }

  make(bulk);

  return result;

}

Location: BulkTest.java

Content: 

private static <T extends BulkTest>BulkTest makeFirstTestCase(final Class<T> c){

  final Method[] all=c.getMethods();

  for (  final Method element : all) {

    if (isTest(element)) {

      return makeTestCase(c,element);

    }

  }

  throw new IllegalArgumentException(c.getName() + " must provide at least one test method.");

}

Location: BulkTest.java

Content: 

/** 

 * Returns a  {@link TestSuite} for testing all of the simple tests<I>and</I> all the bulk tests defined by the given class.<P> The class is examined for simple and bulk test methods; any child bulk tests are also examined recursively; and the results are stored in a hierarchical  {@link TestSuite}.<P> The given class must be a subclass of  {@code BulkTest} and mustnot be abstract.<P>

 * @param c  the class to examine for simple and bulk tests

 * @return  a {@link TestSuite} containing all the simple and bulk testsdefined by that class

 */

public static TestSuite makeSuite(final Class<? extends BulkTest> c){

  if (Modifier.isAbstract(c.getModifiers())) {

    throw new IllegalArgumentException("Class must not be abstract.");

  }

  if (!BulkTest.class.isAssignableFrom(c)) {

    throw new IllegalArgumentException("Class must extend BulkTest.");

  }

  return new BulkTestSuiteMaker(c).make();

}

Location: BulkTest.java

Content: 

private static <T extends BulkTest>BulkTest makeTestCase(final Class<T> c,final Method m){

  final Constructor<T> con=getTestCaseConstructor(c);

  try {

    return con.newInstance(m.getName());

  }

 catch (  final InvocationTargetException e) {

    e.printStackTrace();

    throw new RuntimeException();

  }

catch (  final IllegalAccessException e) {

    throw new Error();

  }

catch (  final InstantiationException e) {

    throw new RuntimeException();

  }

}

Location: BulkTest.java

Content: 

/** 

 * Appends all the simple tests and bulk tests defined by the given instance's class to the current TestSuite.

 * @param bulk  An instance of the class that defines simple and bulktests for us to append

 */

void make(final BulkTest bulk){

  final Class<? extends BulkTest> c=bulk.getClass();

  final Method[] all=c.getMethods();

  for (  final Method element : all) {

    if (isTest(element)) {

      addTest(bulk,element);

    }

    if (isBulk(element)) {

      addBulk(bulk,element);

    }

  }

}

Location: BulkTest.java

Content: 

/** 

 * Returns the display name of this  {@code BulkTest}.

 * @return the display name of this {@code BulkTest}

 */

@Override public String toString(){

  return getName() + "(" + verboseName+ ") ";

}

Location: BulkTest.java

Content: 

/** 

 * Adds a whole new suite of tests that are defined by the result of the given bulk test method.  In other words, the given bulk test method is invoked, and the resulting BulkTest instance is examined for yet more simple and bulk tests.

 * @param bulk  The instance of the class that defined the method

 * @param m  The bulk test method

 */

void addBulk(final BulkTest bulk,final Method m){

  final String verboseName=prefix + "." + m.getName();

  if (ignored.contains(verboseName)) {

    return;

  }

  final BulkTest bulk2;

  try {

    bulk2=(BulkTest)m.invoke(bulk,(Object[])null);

    if (bulk2 == null) {

      return;

    }

  }

 catch (  final InvocationTargetException ex) {

    ex.getTargetException().printStackTrace();

    throw new Error();

  }

catch (  final IllegalAccessException ex) {

    ex.printStackTrace();

    throw new Error();

  }

  final String oldPrefix=prefix;

  final TestSuite oldResult=result;

  prefix=prefix + "." + m.getName();

  result=new TestSuite();

  result.setName(m.getName());

  make(bulk2);

  oldResult.addTest(result);

  prefix=oldPrefix;

  result=oldResult;

}

Location: BulkTest.java

Content: 

/** 

 * Adds the simple test defined by the given method to the TestSuite.

 * @param bulk  The instance of the class that defined the method(I know it's weird.  But the point is, we can clone the instance and not have to worry about constructors.)

 * @param m  The simple test method

 */

void addTest(final BulkTest bulk,final Method m){

  final BulkTest bulk2=(BulkTest)bulk.clone();

  bulk2.setName(m.getName());

  bulk2.verboseName=prefix + "." + m.getName();

  if (ignored.contains(bulk2.verboseName)) {

    return;

  }

  result.addTest(bulk2);

}

Location: BulkTest.java

Content: 

/** 

 * Constructor.

 * @param startingClass  the starting class

 */

BulkTestSuiteMaker(final Class<? extends BulkTest> startingClass){

  this.startingClass=startingClass;

}

Location: BulkTest.java

Content: 

/** 

 * Constructs a new  {@code BulkTest} instance that will run thespecified simple test.

 * @param name  the name of the simple test method to run

 */

public BulkTest(final String name){

  super(name);

  this.verboseName=getClass().getName();

}

Location: BulkTest.java

Content: 

/** 

 * Returns the base name of the given class.

 * @param c  the class

 * @return the name of that class, minus any package names

 */

private static String getBaseName(final Class<?> c){

  String name=c.getName();

  final int p=name.lastIndexOf('.');

  if (p > 0) {

    name=name.substring(p + 1);

  }

  return name;

}

Location: BulkTest.java

Content: 

private static <T>Constructor<T> getTestCaseConstructor(final Class<T> c){

  try {

    return c.getConstructor(String.class);

  }

 catch (  final NoSuchMethodException e) {

    throw new IllegalArgumentException(c + " must provide a (String) constructor");

  }

}

Location: BulkTest.java

Content: 

/** 

 * Returns true if the given method is a bulk test method.

 */

private static boolean isBulk(final Method m){

  if (!m.getName().startsWith("bulkTest")) {

    return false;

  }

  if (m.getReturnType() != BulkTest.class) {

    return false;

  }

  if (m.getParameterTypes().length != 0) {

    return false;

  }

  final int mods=m.getModifiers();

  if (Modifier.isStatic(mods)) {

    return false;

  }

  if (Modifier.isAbstract(mods)) {

    return false;

  }

  return true;

}

Location: BulkTest.java

Content: 

/** 

 * Returns true if the given method is a simple test method.

 */

private static boolean isTest(final Method m){

  if (!m.getName().startsWith("test")) {

    return false;

  }

  if (m.getReturnType() != Void.TYPE) {

    return false;

  }

  if (m.getParameterTypes().length != 0) {

    return false;

  }

  final int mods=m.getModifiers();

  if (Modifier.isStatic(mods)) {

    return false;

  }

  if (Modifier.isAbstract(mods)) {

    return false;

  }

  return true;

}

Location: BulkTest.java

Content: 

/** 

 * Makes a hierarchical TestSuite based on the starting class.

 * @return the hierarchical TestSuite for startingClass

 */

public TestSuite make(){

  this.result=new TestSuite();

  this.prefix=getBaseName(startingClass);

  result.setName(prefix);

  final BulkTest bulk=makeFirstTestCase(startingClass);

  ignored=new ArrayList<>();

  final String[] s=bulk.ignoredTests();

  if (s != null) {

    ignored.addAll(Arrays.asList(s));

  }

  make(bulk);

  return result;

}

Location: BulkTest.java

Content: 

private static <T extends BulkTest>BulkTest makeFirstTestCase(final Class<T> c){

  final Method[] all=c.getMethods();

  for (  final Method element : all) {

    if (isTest(element)) {

      return makeTestCase(c,element);

    }

  }

  throw new IllegalArgumentException(c.getName() + " must provide at least one test method.");

}

Location: BulkTest.java

Content: 

/** 

 * Returns a  {@link TestSuite} for testing all of the simple tests<I>and</I> all the bulk tests defined by the given class.<P> The class is examined for simple and bulk test methods; any child bulk tests are also examined recursively; and the results are stored in a hierarchical  {@link TestSuite}.<P> The given class must be a subclass of  {@code BulkTest} and mustnot be abstract.<P>

 * @param c  the class to examine for simple and bulk tests

 * @return  a {@link TestSuite} containing all the simple and bulk testsdefined by that class

 */

public static TestSuite makeSuite(final Class<? extends BulkTest> c){

  if (Modifier.isAbstract(c.getModifiers())) {

    throw new IllegalArgumentException("Class must not be abstract.");

  }

  if (!BulkTest.class.isAssignableFrom(c)) {

    throw new IllegalArgumentException("Class must extend BulkTest.");

  }

  return new BulkTestSuiteMaker(c).make();

}

Location: BulkTest.java

Content: 

private static <T extends BulkTest>BulkTest makeTestCase(final Class<T> c,final Method m){

  final Constructor<T> con=getTestCaseConstructor(c);

  try {

    return con.newInstance(m.getName());

  }

 catch (  final InvocationTargetException e) {

    e.printStackTrace();

    throw new RuntimeException();

  }

catch (  final IllegalAccessException e) {

    throw new Error();

  }

catch (  final InstantiationException e) {

    throw new RuntimeException();

  }

}

Location: BulkTest.java

Content: 

/** 

 * Appends all the simple tests and bulk tests defined by the given instance's class to the current TestSuite.

 * @param bulk  An instance of the class that defines simple and bulktests for us to append

 */

void make(final BulkTest bulk){

  final Class<? extends BulkTest> c=bulk.getClass();

  final Method[] all=c.getMethods();

  for (  final Method element : all) {

    if (isTest(element)) {

      addTest(bulk,element);

    }

    if (isBulk(element)) {

      addBulk(bulk,element);

    }

  }

}

Location: BulkTest.java

Content: 

/** 

 * Returns the display name of this  {@code BulkTest}.

 * @return the display name of this {@code BulkTest}

 */

@Override public String toString(){

  return getName() + "(" + verboseName+ ") ";

}

