Location: AbstractOrderedMapTest.java

Content: 

/** 

 * JUnit constructor.

 * @param testName  the test name

 */

public AbstractOrderedMapTest(final String testName){

  super(testName);

}

Location: AbstractOrderedMapTest.java

Content: 

public BulkTest bulkTestOrderedMapIterator(){

  return new InnerTestOrderedMapIterator();

}

Location: AbstractOrderedMapTest.java

Content: 

public void testNextKey(){

  resetEmpty();

  OrderedMap<K,V> ordered=getMap();

  assertNull(ordered.nextKey(getOtherKeys()[0]));

  if (!isAllowNullKey()) {

    try {

      assertNull(ordered.nextKey(null));

    }

 catch (    final NullPointerException ex) {

    }

  }

 else {

    assertNull(ordered.nextKey(null));

  }

  resetFull();

  ordered=getMap();

  final Iterator<K> it=confirmed.keySet().iterator();

  K confirmedLast=it.next();

  while (it.hasNext()) {

    final K confirmedObject=it.next();

    assertEquals(confirmedObject,ordered.nextKey(confirmedLast));

    confirmedLast=confirmedObject;

  }

  assertNull(ordered.nextKey(confirmedLast));

  if (!isAllowNullKey()) {

    try {

      ordered.nextKey(null);

      fail();

    }

 catch (    final NullPointerException ex) {

    }

  }

 else {

    assertNull(ordered.nextKey(null));

  }

}

Location: AbstractOrderedMapTest.java

Content: 

public void testPreviousKey(){

  resetEmpty();

  OrderedMap<K,V> ordered=getMap();

  assertNull(ordered.previousKey(getOtherKeys()[0]));

  if (!isAllowNullKey()) {

    try {

      assertNull(ordered.previousKey(null));

    }

 catch (    final NullPointerException ex) {

    }

  }

 else {

    assertNull(ordered.previousKey(null));

  }

  resetFull();

  ordered=getMap();

  final List<K> list=new ArrayList<>(confirmed.keySet());

  Collections.reverse(list);

  final Iterator<K> it=list.iterator();

  K confirmedLast=it.next();

  while (it.hasNext()) {

    final K confirmedObject=it.next();

    assertEquals(confirmedObject,ordered.previousKey(confirmedLast));

    confirmedLast=confirmedObject;

  }

  assertNull(ordered.previousKey(confirmedLast));

  if (!isAllowNullKey()) {

    try {

      ordered.previousKey(null);

      fail();

    }

 catch (    final NullPointerException ex) {

    }

  }

 else {

    if (!isAllowNullKey()) {

      assertNull(ordered.previousKey(null));

    }

  }

}

Location: AbstractOrderedMapTest.java

Content: 

/** 

 * JUnit constructor.

 * @param testName  the test name

 */

public AbstractOrderedMapTest(final String testName){

  super(testName);

}

Location: AbstractOrderedMapTest.java

Content: 

public BulkTest bulkTestOrderedMapIterator(){

  return new InnerTestOrderedMapIterator();

}

Location: AbstractOrderedMapTest.java

Content: 

public void testNextKey(){

  resetEmpty();

  OrderedMap<K,V> ordered=getMap();

  assertNull(ordered.nextKey(getOtherKeys()[0]));

  if (!isAllowNullKey()) {

    try {

      assertNull(ordered.nextKey(null));

    }

 catch (    final NullPointerException ex) {

    }

  }

 else {

    assertNull(ordered.nextKey(null));

  }

  resetFull();

  ordered=getMap();

  final Iterator<K> it=confirmed.keySet().iterator();

  K confirmedLast=it.next();

  while (it.hasNext()) {

    final K confirmedObject=it.next();

    assertEquals(confirmedObject,ordered.nextKey(confirmedLast));

    confirmedLast=confirmedObject;

  }

  assertNull(ordered.nextKey(confirmedLast));

  if (!isAllowNullKey()) {

    try {

      ordered.nextKey(null);

      fail();

    }

 catch (    final NullPointerException ex) {

    }

  }

 else {

    assertNull(ordered.nextKey(null));

  }

}

Location: AbstractOrderedMapTest.java

Content: 

public void testPreviousKey(){

  resetEmpty();

  OrderedMap<K,V> ordered=getMap();

  assertNull(ordered.previousKey(getOtherKeys()[0]));

  if (!isAllowNullKey()) {

    try {

      assertNull(ordered.previousKey(null));

    }

 catch (    final NullPointerException ex) {

    }

  }

 else {

    assertNull(ordered.previousKey(null));

  }

  resetFull();

  ordered=getMap();

  final List<K> list=new ArrayList<>(confirmed.keySet());

  Collections.reverse(list);

  final Iterator<K> it=list.iterator();

  K confirmedLast=it.next();

  while (it.hasNext()) {

    final K confirmedObject=it.next();

    assertEquals(confirmedObject,ordered.previousKey(confirmedLast));

    confirmedLast=confirmedObject;

  }

  assertNull(ordered.previousKey(confirmedLast));

  if (!isAllowNullKey()) {

    try {

      ordered.previousKey(null);

      fail();

    }

 catch (    final NullPointerException ex) {

    }

  }

 else {

    if (!isAllowNullKey()) {

      assertNull(ordered.previousKey(null));

    }

  }

}

