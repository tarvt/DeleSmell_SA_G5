Location: PredicateUtils.java

Content: 

/** 

 * Create a new Predicate that wraps a Transformer. The Transformer must return either Boolean.TRUE or Boolean.FALSE otherwise a PredicateException will be thrown.

 * @param < T >  the type that the predicate queries

 * @param transformer  the transformer to wrap, may not be null

 * @return the transformer wrapping predicate

 * @throws NullPointerException if the transformer is null

 * @see TransformerPredicate

 */

public static <T>Predicate<T> asPredicate(final Transformer<? super T,Boolean> transformer){

  return TransformerPredicate.transformerPredicate(transformer);

}

Location: PredicateUtils.java

Content: 

/** 

 * Create a new Predicate that returns true if one, but not both, of the specified predicates are true. XOR

 * @param < T >  the type that the predicate queries

 * @param predicate1  the first predicate, may not be null

 * @param predicate2  the second predicate, may not be null

 * @return the {@code either} predicate

 * @throws NullPointerException if either predicate is null

 * @see OnePredicate

 */

public static <T>Predicate<T> eitherPredicate(final Predicate<? super T> predicate1,final Predicate<? super T> predicate2){

  @SuppressWarnings("unchecked") final Predicate<T> onePredicate=PredicateUtils.onePredicate(predicate1,predicate2);

  return onePredicate;

}

Location: PredicateUtils.java

Content: 

/** 

 * Creates a Predicate that invokes a method on the input object. The method must return either a boolean or a non-null Boolean, and have no parameters. If the input object is null, a PredicateException is thrown. <p> For example,  {@code PredicateUtils.invokerPredicate("isEmpty");}will call the  {@code isEmpty} method on the input object todetermine the predicate result.

 * @param < T >  the type that the predicate queries

 * @param methodName  the method name to call on the input object, may not be null

 * @return the predicate

 * @throws NullPointerException if the methodName is null.

 * @see InvokerTransformer

 * @see TransformerPredicate

 */

public static <T>Predicate<T> invokerPredicate(final String methodName){

  return asPredicate(InvokerTransformer.<Object,Boolean>invokerTransformer(methodName));

}

Location: PredicateUtils.java

Content: 

/** 

 * Creates a Predicate that invokes a method on the input object. The method must return either a boolean or a non-null Boolean, and have no parameters. If the input object is null, a PredicateException is thrown. <p> For example,  {@code PredicateUtils.invokerPredicate("isEmpty");}will call the  {@code isEmpty} method on the input object todetermine the predicate result.

 * @param < T >  the type that the predicate queries

 * @param methodName  the method name to call on the input object, may not be null

 * @param paramTypes  the parameter types

 * @param args  the arguments

 * @return the predicate

 * @throws NullPointerException if the method name is null

 * @throws IllegalArgumentException if the paramTypes and args don't match

 * @see InvokerTransformer

 * @see TransformerPredicate

 */

public static <T>Predicate<T> invokerPredicate(final String methodName,final Class<?>[] paramTypes,final Object[] args){

  return asPredicate(InvokerTransformer.<Object,Boolean>invokerTransformer(methodName,paramTypes,args));

}

Location: PredicateUtils.java

Content: 

/** 

 * Create a new Predicate that returns true if neither of the specified predicates are true.

 * @param < T >  the type that the predicate queries

 * @param predicate1  the first predicate, may not be null

 * @param predicate2  the second predicate, may not be null

 * @return the {@code neither} predicate

 * @throws NullPointerException if either predicate is null

 * @see NonePredicate

 */

public static <T>Predicate<T> neitherPredicate(final Predicate<? super T> predicate1,final Predicate<? super T> predicate2){

  @SuppressWarnings("unchecked") final Predicate<T> nonePredicate=PredicateUtils.nonePredicate(predicate1,predicate2);

  return nonePredicate;

}

Location: PredicateUtils.java

Content: 

/** 

 * Don't allow instances.

 */

private PredicateUtils(){

}

Location: PredicateUtils.java

Content: 

/** 

 * Create a new Predicate that wraps a Transformer. The Transformer must return either Boolean.TRUE or Boolean.FALSE otherwise a PredicateException will be thrown.

 * @param < T >  the type that the predicate queries

 * @param transformer  the transformer to wrap, may not be null

 * @return the transformer wrapping predicate

 * @throws NullPointerException if the transformer is null

 * @see TransformerPredicate

 */

public static <T>Predicate<T> asPredicate(final Transformer<? super T,Boolean> transformer){

  return TransformerPredicate.transformerPredicate(transformer);

}

Location: PredicateUtils.java

Content: 

/** 

 * Create a new Predicate that returns true if one, but not both, of the specified predicates are true. XOR

 * @param < T >  the type that the predicate queries

 * @param predicate1  the first predicate, may not be null

 * @param predicate2  the second predicate, may not be null

 * @return the {@code either} predicate

 * @throws NullPointerException if either predicate is null

 * @see OnePredicate

 */

public static <T>Predicate<T> eitherPredicate(final Predicate<? super T> predicate1,final Predicate<? super T> predicate2){

  @SuppressWarnings("unchecked") final Predicate<T> onePredicate=PredicateUtils.onePredicate(predicate1,predicate2);

  return onePredicate;

}

Location: PredicateUtils.java

Content: 

/** 

 * Creates a Predicate that invokes a method on the input object. The method must return either a boolean or a non-null Boolean, and have no parameters. If the input object is null, a PredicateException is thrown. <p> For example,  {@code PredicateUtils.invokerPredicate("isEmpty");}will call the  {@code isEmpty} method on the input object todetermine the predicate result.

 * @param < T >  the type that the predicate queries

 * @param methodName  the method name to call on the input object, may not be null

 * @return the predicate

 * @throws NullPointerException if the methodName is null.

 * @see InvokerTransformer

 * @see TransformerPredicate

 */

public static <T>Predicate<T> invokerPredicate(final String methodName){

  return asPredicate(InvokerTransformer.<Object,Boolean>invokerTransformer(methodName));

}

Location: PredicateUtils.java

Content: 

/** 

 * Creates a Predicate that invokes a method on the input object. The method must return either a boolean or a non-null Boolean, and have no parameters. If the input object is null, a PredicateException is thrown. <p> For example,  {@code PredicateUtils.invokerPredicate("isEmpty");}will call the  {@code isEmpty} method on the input object todetermine the predicate result.

 * @param < T >  the type that the predicate queries

 * @param methodName  the method name to call on the input object, may not be null

 * @param paramTypes  the parameter types

 * @param args  the arguments

 * @return the predicate

 * @throws NullPointerException if the method name is null

 * @throws IllegalArgumentException if the paramTypes and args don't match

 * @see InvokerTransformer

 * @see TransformerPredicate

 */

public static <T>Predicate<T> invokerPredicate(final String methodName,final Class<?>[] paramTypes,final Object[] args){

  return asPredicate(InvokerTransformer.<Object,Boolean>invokerTransformer(methodName,paramTypes,args));

}

Location: PredicateUtils.java

Content: 

/** 

 * Create a new Predicate that returns true if neither of the specified predicates are true.

 * @param < T >  the type that the predicate queries

 * @param predicate1  the first predicate, may not be null

 * @param predicate2  the second predicate, may not be null

 * @return the {@code neither} predicate

 * @throws NullPointerException if either predicate is null

 * @see NonePredicate

 */

public static <T>Predicate<T> neitherPredicate(final Predicate<? super T> predicate1,final Predicate<? super T> predicate2){

  @SuppressWarnings("unchecked") final Predicate<T> nonePredicate=PredicateUtils.nonePredicate(predicate1,predicate2);

  return nonePredicate;

}

Location: PredicateUtils.java

Content: 

/** 

 * Don't allow instances.

 */

private PredicateUtils(){

}

