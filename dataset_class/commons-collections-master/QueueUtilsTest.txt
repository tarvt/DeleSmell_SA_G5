Location: QueueUtilsTest.java

Content: 

@Test public void testEmptyQueue(){

  final Queue<Object> queue=QueueUtils.emptyQueue();

  assertTrue(queue instanceof UnmodifiableQueue,"Returned object should be an UnmodifiableQueue.");

  assertTrue(queue.isEmpty(),"Returned queue is not empty.");

  try {

    queue.add(new Object());

    fail("Expecting UnsupportedOperationException for empty queue.");

  }

 catch (  final UnsupportedOperationException ex) {

  }

}

Location: QueueUtilsTest.java

Content: 

@Test public void testPredicatedQueue(){

  final Queue<Object> queue=QueueUtils.predicatedQueue(new LinkedList<>(),truePredicate);

  assertTrue(queue instanceof PredicatedQueue,"Returned object should be a PredicatedQueue.");

  try {

    QueueUtils.predicatedQueue(null,truePredicate);

    fail("Expecting NullPointerException for null queue.");

  }

 catch (  final NullPointerException ex) {

  }

  try {

    QueueUtils.predicatedQueue(new LinkedList<>(),null);

    fail("Expecting NullPointerException for null predicate.");

  }

 catch (  final NullPointerException ex) {

  }

}

Location: QueueUtilsTest.java

Content: 

@Test public void testSynchronizedQueue(){

  final Queue<Object> queue=QueueUtils.synchronizedQueue(new LinkedList<>());

  assertTrue(queue instanceof SynchronizedQueue,"Returned object should be a SynchronizedQueue.");

  try {

    QueueUtils.synchronizedQueue(null);

    fail("Expecting NullPointerException for null queue.");

  }

 catch (  final NullPointerException ex) {

  }

}

Location: QueueUtilsTest.java

Content: 

@Test public void testUnmodifiableQueue(){

  final Queue<Object> queue=QueueUtils.unmodifiableQueue(new LinkedList<>());

  assertTrue(queue instanceof UnmodifiableQueue,"Returned object should be an UnmodifiableQueue.");

  try {

    QueueUtils.unmodifiableQueue(null);

    fail("Expecting NullPointerException for null queue.");

  }

 catch (  final NullPointerException ex) {

  }

  assertSame(queue,QueueUtils.unmodifiableQueue(queue),"UnmodifiableQueue shall not be decorated");

}

Location: QueueUtilsTest.java

Content: 

@Test public void testEmptyQueue(){

  final Queue<Object> queue=QueueUtils.emptyQueue();

  assertTrue(queue instanceof UnmodifiableQueue,"Returned object should be an UnmodifiableQueue.");

  assertTrue(queue.isEmpty(),"Returned queue is not empty.");

  try {

    queue.add(new Object());

    fail("Expecting UnsupportedOperationException for empty queue.");

  }

 catch (  final UnsupportedOperationException ex) {

  }

}

Location: QueueUtilsTest.java

Content: 

@Test public void testPredicatedQueue(){

  final Queue<Object> queue=QueueUtils.predicatedQueue(new LinkedList<>(),truePredicate);

  assertTrue(queue instanceof PredicatedQueue,"Returned object should be a PredicatedQueue.");

  try {

    QueueUtils.predicatedQueue(null,truePredicate);

    fail("Expecting NullPointerException for null queue.");

  }

 catch (  final NullPointerException ex) {

  }

  try {

    QueueUtils.predicatedQueue(new LinkedList<>(),null);

    fail("Expecting NullPointerException for null predicate.");

  }

 catch (  final NullPointerException ex) {

  }

}

Location: QueueUtilsTest.java

Content: 

@Test public void testSynchronizedQueue(){

  final Queue<Object> queue=QueueUtils.synchronizedQueue(new LinkedList<>());

  assertTrue(queue instanceof SynchronizedQueue,"Returned object should be a SynchronizedQueue.");

  try {

    QueueUtils.synchronizedQueue(null);

    fail("Expecting NullPointerException for null queue.");

  }

 catch (  final NullPointerException ex) {

  }

}

Location: QueueUtilsTest.java

Content: 

@Test public void testUnmodifiableQueue(){

  final Queue<Object> queue=QueueUtils.unmodifiableQueue(new LinkedList<>());

  assertTrue(queue instanceof UnmodifiableQueue,"Returned object should be an UnmodifiableQueue.");

  try {

    QueueUtils.unmodifiableQueue(null);

    fail("Expecting NullPointerException for null queue.");

  }

 catch (  final NullPointerException ex) {

  }

  assertSame(queue,QueueUtils.unmodifiableQueue(queue),"UnmodifiableQueue shall not be decorated");

}

