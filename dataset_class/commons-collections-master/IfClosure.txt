Location: IfClosure.java

Content: 

/** 

 * Gets the closure called when false.

 * @return the closure

 * @since 3.1

 */

public Closure<? super E> getFalseClosure(){

  return iFalseClosure;

}

Location: IfClosure.java

Content: 

/** 

 * Gets the closure called when true.

 * @return the closure

 * @since 3.1

 */

public Closure<? super E> getTrueClosure(){

  return iTrueClosure;

}

Location: IfClosure.java

Content: 

/** 

 * Constructor that performs no validation. Use  {@code ifClosure} if you want that.<p> This constructor creates a closure that performs no action when the predicate is false.

 * @param predicate  predicate to switch on, not null

 * @param trueClosure  closure used if true, not null

 * @since 3.2

 */

public IfClosure(final Predicate<? super E> predicate,final Closure<? super E> trueClosure){

  this(predicate,trueClosure,NOPClosure.nopClosure());

}

Location: IfClosure.java

Content: 

/** 

 * Constructor that performs no validation. Use  {@code ifClosure} if you want that.

 * @param predicate  predicate to switch on, not null

 * @param trueClosure  closure used if true, not null

 * @param falseClosure  closure used if false, not null

 */

public IfClosure(final Predicate<? super E> predicate,final Closure<? super E> trueClosure,final Closure<? super E> falseClosure){

  iPredicate=predicate;

  iTrueClosure=trueClosure;

  iFalseClosure=falseClosure;

}

Location: IfClosure.java

Content: 

/** 

 * Gets the closure called when false.

 * @return the closure

 * @since 3.1

 */

public Closure<? super E> getFalseClosure(){

  return iFalseClosure;

}

Location: IfClosure.java

Content: 

/** 

 * Gets the closure called when true.

 * @return the closure

 * @since 3.1

 */

public Closure<? super E> getTrueClosure(){

  return iTrueClosure;

}

Location: IfClosure.java

Content: 

/** 

 * Constructor that performs no validation. Use  {@code ifClosure} if you want that.<p> This constructor creates a closure that performs no action when the predicate is false.

 * @param predicate  predicate to switch on, not null

 * @param trueClosure  closure used if true, not null

 * @since 3.2

 */

public IfClosure(final Predicate<? super E> predicate,final Closure<? super E> trueClosure){

  this(predicate,trueClosure,NOPClosure.nopClosure());

}

Location: IfClosure.java

Content: 

/** 

 * Constructor that performs no validation. Use  {@code ifClosure} if you want that.

 * @param predicate  predicate to switch on, not null

 * @param trueClosure  closure used if true, not null

 * @param falseClosure  closure used if false, not null

 */

public IfClosure(final Predicate<? super E> predicate,final Closure<? super E> trueClosure,final Closure<? super E> falseClosure){

  iPredicate=predicate;

  iTrueClosure=trueClosure;

  iFalseClosure=falseClosure;

}

