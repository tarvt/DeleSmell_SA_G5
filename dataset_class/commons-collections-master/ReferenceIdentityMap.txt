Location: ReferenceIdentityMap.java

Content: 

/** 

 * Gets the hash code for a MapEntry. <p> This implementation uses the identity hash code.

 * @param key  the key to get a hash code for, may be null

 * @param value  the value to get a hash code for, may be null

 * @return the hash code, as per the MapEntry specification

 */

@Override protected int hashEntry(final Object key,final Object value){

  return System.identityHashCode(key) ^ System.identityHashCode(value);

}

Location: ReferenceIdentityMap.java

Content: 

/** 

 * Constructs a new  {@code ReferenceIdentityMap} that willuse hard references to keys and soft references to values.

 */

public ReferenceIdentityMap(){

  super(ReferenceStrength.HARD,ReferenceStrength.SOFT,DEFAULT_CAPACITY,DEFAULT_LOAD_FACTOR,false);

}

Location: ReferenceIdentityMap.java

Content: 

/** 

 * Constructs a new  {@code ReferenceIdentityMap} that willuse the specified types of references.

 * @param keyType  the type of reference to use for keys;must be  {@link AbstractReferenceMap.ReferenceStrength#HARD HARD}, {@link AbstractReferenceMap.ReferenceStrength#SOFT SOFT}, {@link AbstractReferenceMap.ReferenceStrength#WEAK WEAK}

 * @param valueType  the type of reference to use for values;must be  {@link AbstractReferenceMap.ReferenceStrength#HARD HARD}, {@link AbstractReferenceMap.ReferenceStrength#SOFT SOFT}, {@link AbstractReferenceMap.ReferenceStrength#WEAK WEAK}

 */

public ReferenceIdentityMap(final ReferenceStrength keyType,final ReferenceStrength valueType){

  super(keyType,valueType,DEFAULT_CAPACITY,DEFAULT_LOAD_FACTOR,false);

}

Location: ReferenceIdentityMap.java

Content: 

/** 

 * Constructs a new  {@code ReferenceIdentityMap} that willuse the specified types of references.

 * @param keyType  the type of reference to use for keys;must be  {@link AbstractReferenceMap.ReferenceStrength#HARD HARD}, {@link AbstractReferenceMap.ReferenceStrength#SOFT SOFT}, {@link AbstractReferenceMap.ReferenceStrength#WEAK WEAK}

 * @param valueType  the type of reference to use for values;must be  {@link AbstractReferenceMap.ReferenceStrength#HARD HARD}, {@link AbstractReferenceMap.ReferenceStrength#SOFT SOFT}, {@link AbstractReferenceMap.ReferenceStrength#WEAK WEAK}

 * @param purgeValues should the value be automatically purged when thekey is garbage collected

 */

public ReferenceIdentityMap(final ReferenceStrength keyType,final ReferenceStrength valueType,final boolean purgeValues){

  super(keyType,valueType,DEFAULT_CAPACITY,DEFAULT_LOAD_FACTOR,purgeValues);

}

Location: ReferenceIdentityMap.java

Content: 

/** 

 * Constructs a new  {@code ReferenceIdentityMap} with thespecified reference types, load factor and initial capacity.

 * @param keyType  the type of reference to use for keys;must be  {@link AbstractReferenceMap.ReferenceStrength#HARD HARD}, {@link AbstractReferenceMap.ReferenceStrength#SOFT SOFT}, {@link AbstractReferenceMap.ReferenceStrength#WEAK WEAK}

 * @param valueType  the type of reference to use for values;must be  {@link AbstractReferenceMap.ReferenceStrength#HARD HARD}, {@link AbstractReferenceMap.ReferenceStrength#SOFT SOFT}, {@link AbstractReferenceMap.ReferenceStrength#WEAK WEAK}

 * @param capacity  the initial capacity for the map

 * @param loadFactor  the load factor for the map

 */

public ReferenceIdentityMap(final ReferenceStrength keyType,final ReferenceStrength valueType,final int capacity,final float loadFactor){

  super(keyType,valueType,capacity,loadFactor,false);

}

Location: ReferenceIdentityMap.java

Content: 

/** 

 * Constructs a new  {@code ReferenceIdentityMap} with thespecified reference types, load factor and initial capacity.

 * @param keyType  the type of reference to use for keys;must be  {@link AbstractReferenceMap.ReferenceStrength#HARD HARD}, {@link AbstractReferenceMap.ReferenceStrength#SOFT SOFT}, {@link AbstractReferenceMap.ReferenceStrength#WEAK WEAK}

 * @param valueType  the type of reference to use for values;must be  {@link AbstractReferenceMap.ReferenceStrength#HARD HARD}, {@link AbstractReferenceMap.ReferenceStrength#SOFT SOFT}, {@link AbstractReferenceMap.ReferenceStrength#WEAK WEAK}

 * @param capacity  the initial capacity for the map

 * @param loadFactor  the load factor for the map

 * @param purgeValues  should the value be automatically purged when thekey is garbage collected

 */

public ReferenceIdentityMap(final ReferenceStrength keyType,final ReferenceStrength valueType,final int capacity,final float loadFactor,final boolean purgeValues){

  super(keyType,valueType,capacity,loadFactor,purgeValues);

}

Location: ReferenceIdentityMap.java

Content: 

/** 

 * Gets the hash code for a MapEntry. <p> This implementation uses the identity hash code.

 * @param key  the key to get a hash code for, may be null

 * @param value  the value to get a hash code for, may be null

 * @return the hash code, as per the MapEntry specification

 */

@Override protected int hashEntry(final Object key,final Object value){

  return System.identityHashCode(key) ^ System.identityHashCode(value);

}

Location: ReferenceIdentityMap.java

Content: 

/** 

 * Constructs a new  {@code ReferenceIdentityMap} that willuse hard references to keys and soft references to values.

 */

public ReferenceIdentityMap(){

  super(ReferenceStrength.HARD,ReferenceStrength.SOFT,DEFAULT_CAPACITY,DEFAULT_LOAD_FACTOR,false);

}

Location: ReferenceIdentityMap.java

Content: 

/** 

 * Constructs a new  {@code ReferenceIdentityMap} that willuse the specified types of references.

 * @param keyType  the type of reference to use for keys;must be  {@link AbstractReferenceMap.ReferenceStrength#HARD HARD}, {@link AbstractReferenceMap.ReferenceStrength#SOFT SOFT}, {@link AbstractReferenceMap.ReferenceStrength#WEAK WEAK}

 * @param valueType  the type of reference to use for values;must be  {@link AbstractReferenceMap.ReferenceStrength#HARD HARD}, {@link AbstractReferenceMap.ReferenceStrength#SOFT SOFT}, {@link AbstractReferenceMap.ReferenceStrength#WEAK WEAK}

 */

public ReferenceIdentityMap(final ReferenceStrength keyType,final ReferenceStrength valueType){

  super(keyType,valueType,DEFAULT_CAPACITY,DEFAULT_LOAD_FACTOR,false);

}

Location: ReferenceIdentityMap.java

Content: 

/** 

 * Constructs a new  {@code ReferenceIdentityMap} that willuse the specified types of references.

 * @param keyType  the type of reference to use for keys;must be  {@link AbstractReferenceMap.ReferenceStrength#HARD HARD}, {@link AbstractReferenceMap.ReferenceStrength#SOFT SOFT}, {@link AbstractReferenceMap.ReferenceStrength#WEAK WEAK}

 * @param valueType  the type of reference to use for values;must be  {@link AbstractReferenceMap.ReferenceStrength#HARD HARD}, {@link AbstractReferenceMap.ReferenceStrength#SOFT SOFT}, {@link AbstractReferenceMap.ReferenceStrength#WEAK WEAK}

 * @param purgeValues should the value be automatically purged when thekey is garbage collected

 */

public ReferenceIdentityMap(final ReferenceStrength keyType,final ReferenceStrength valueType,final boolean purgeValues){

  super(keyType,valueType,DEFAULT_CAPACITY,DEFAULT_LOAD_FACTOR,purgeValues);

}

Location: ReferenceIdentityMap.java

Content: 

/** 

 * Constructs a new  {@code ReferenceIdentityMap} with thespecified reference types, load factor and initial capacity.

 * @param keyType  the type of reference to use for keys;must be  {@link AbstractReferenceMap.ReferenceStrength#HARD HARD}, {@link AbstractReferenceMap.ReferenceStrength#SOFT SOFT}, {@link AbstractReferenceMap.ReferenceStrength#WEAK WEAK}

 * @param valueType  the type of reference to use for values;must be  {@link AbstractReferenceMap.ReferenceStrength#HARD HARD}, {@link AbstractReferenceMap.ReferenceStrength#SOFT SOFT}, {@link AbstractReferenceMap.ReferenceStrength#WEAK WEAK}

 * @param capacity  the initial capacity for the map

 * @param loadFactor  the load factor for the map

 */

public ReferenceIdentityMap(final ReferenceStrength keyType,final ReferenceStrength valueType,final int capacity,final float loadFactor){

  super(keyType,valueType,capacity,loadFactor,false);

}

Location: ReferenceIdentityMap.java

Content: 

/** 

 * Constructs a new  {@code ReferenceIdentityMap} with thespecified reference types, load factor and initial capacity.

 * @param keyType  the type of reference to use for keys;must be  {@link AbstractReferenceMap.ReferenceStrength#HARD HARD}, {@link AbstractReferenceMap.ReferenceStrength#SOFT SOFT}, {@link AbstractReferenceMap.ReferenceStrength#WEAK WEAK}

 * @param valueType  the type of reference to use for values;must be  {@link AbstractReferenceMap.ReferenceStrength#HARD HARD}, {@link AbstractReferenceMap.ReferenceStrength#SOFT SOFT}, {@link AbstractReferenceMap.ReferenceStrength#WEAK WEAK}

 * @param capacity  the initial capacity for the map

 * @param loadFactor  the load factor for the map

 * @param purgeValues  should the value be automatically purged when thekey is garbage collected

 */

public ReferenceIdentityMap(final ReferenceStrength keyType,final ReferenceStrength valueType,final int capacity,final float loadFactor,final boolean purgeValues){

  super(keyType,valueType,capacity,loadFactor,purgeValues);

}

