Location: ListOrderedSet.java

Content: 

/** 

 * Inserts all elements in the specified collection not yet contained in the ordered set at the specified position (optional operation). Shifts the element currently at the position and all subsequent elements to the right.

 * @param index the position to insert the elements

 * @param coll the collection containing the elements to be inserted

 * @return {@code true} if this ordered set changed as a result of the call

 * @see List#addAll(int,Collection)

 */

public boolean addAll(final int index,final Collection<? extends E> coll){

  boolean changed=false;

  final List<E> toAdd=new ArrayList<>();

  for (  final E e : coll) {

    if (contains(e)) {

      continue;

    }

    decorated().add(e);

    toAdd.add(e);

    changed=true;

  }

  if (changed) {

    setOrder.addAll(index,toAdd);

  }

  return changed;

}

Location: ListOrderedSet.java

Content: 

/** 

 * Inserts the specified element at the specified position if it is not yet contained in this ordered set (optional operation). Shifts the element currently at this position and any subsequent elements to the right.

 * @param index the index at which the element is to be inserted

 * @param object the element to be inserted

 * @see List#add(int,Object)

 */

public void add(final int index,final E object){

  if (!contains(object)) {

    decorated().add(object);

    setOrder.add(index,object);

  }

}

Location: ListOrderedSet.java

Content: 

/** 

 * Gets an unmodifiable view of the order of the Set.

 * @return an unmodifiable list view

 */

public List<E> asList(){

  return UnmodifiableList.unmodifiableList(setOrder);

}

Location: ListOrderedSet.java

Content: 

/** 

 * Returns the element at the specified position in this ordered set.

 * @param index the position of the element in the ordered {@link Set}.

 * @return the element at position {@code index}

 * @see List#get(int)

 */

public E get(final int index){

  return setOrder.get(index);

}

Location: ListOrderedSet.java

Content: 

/** 

 * Returns the index of the first occurrence of the specified element in ordered set.

 * @param object the element to search for

 * @return the index of the first occurrence of the object, or {@code -1} ifthis ordered set does not contain this object

 * @see List#indexOf(Object)

 */

public int indexOf(final Object object){

  return setOrder.indexOf(object);

}

Location: ListOrderedSet.java

Content: 

/** 

 * Constructs a new empty  {@code ListOrderedSet} using a{@code HashSet} and an {@code ArrayList} internally.

 * @since 3.1

 */

public ListOrderedSet(){

  super(new HashSet<E>());

  setOrder=new ArrayList<>();

}

Location: ListOrderedSet.java

Content: 

/** 

 * Factory method to create an ordered set using the supplied list to retain order. <p> A  {@code HashSet} is used for the set behavior.<p> NOTE: If the list contains duplicates, the duplicates are removed, altering the specified list.

 * @param < E > the element type

 * @param list the list to decorate, must not be null

 * @return a new ordered set

 * @throws NullPointerException if list is null

 * @since 4.0

 */

public static <E>ListOrderedSet<E> listOrderedSet(final List<E> list){

  Objects.requireNonNull(list,"list");

  CollectionUtils.filter(list,UniquePredicate.uniquePredicate());

  final Set<E> set=new HashSet<>(list);

  return new ListOrderedSet<>(set,list);

}

Location: ListOrderedSet.java

Content: 

/** 

 * Constructor that wraps (not copies).

 * @param set the set to decorate, must not be null

 * @throws NullPointerException if set is null

 */

protected ListOrderedSet(final Set<E> set){

  super(set);

  setOrder=new ArrayList<>(set);

}

Location: ListOrderedSet.java

Content: 

/** 

 * Constructor that wraps (not copies) the Set and specifies the list to use. <p> The set and list must both be correctly initialized to the same elements.

 * @param set the set to decorate, must not be null

 * @param list the list to decorate, must not be null

 * @throws NullPointerException if set or list is null

 */

protected ListOrderedSet(final Set<E> set,final List<E> list){

  super(set);

  setOrder=Objects.requireNonNull(list,"list");

}

Location: ListOrderedSet.java

Content: 

/** 

 * Removes the element at the specified position from the ordered set. Shifts any subsequent elements to the left.

 * @param index the index of the element to be removed

 * @return the element that has been remove from the ordered set

 * @see List#remove(int)

 */

public E remove(final int index){

  final E obj=setOrder.remove(index);

  remove(obj);

  return obj;

}

Location: ListOrderedSet.java

Content: 

@Override public <T>T[] toArray(final T a[]){

  return setOrder.toArray(a);

}

Location: ListOrderedSet.java

Content: 

/** 

 * Inserts all elements in the specified collection not yet contained in the ordered set at the specified position (optional operation). Shifts the element currently at the position and all subsequent elements to the right.

 * @param index the position to insert the elements

 * @param coll the collection containing the elements to be inserted

 * @return {@code true} if this ordered set changed as a result of the call

 * @see List#addAll(int,Collection)

 */

public boolean addAll(final int index,final Collection<? extends E> coll){

  boolean changed=false;

  final List<E> toAdd=new ArrayList<>();

  for (  final E e : coll) {

    if (contains(e)) {

      continue;

    }

    decorated().add(e);

    toAdd.add(e);

    changed=true;

  }

  if (changed) {

    setOrder.addAll(index,toAdd);

  }

  return changed;

}

Location: ListOrderedSet.java

Content: 

/** 

 * Inserts the specified element at the specified position if it is not yet contained in this ordered set (optional operation). Shifts the element currently at this position and any subsequent elements to the right.

 * @param index the index at which the element is to be inserted

 * @param object the element to be inserted

 * @see List#add(int,Object)

 */

public void add(final int index,final E object){

  if (!contains(object)) {

    decorated().add(object);

    setOrder.add(index,object);

  }

}

Location: ListOrderedSet.java

Content: 

/** 

 * Gets an unmodifiable view of the order of the Set.

 * @return an unmodifiable list view

 */

public List<E> asList(){

  return UnmodifiableList.unmodifiableList(setOrder);

}

Location: ListOrderedSet.java

Content: 

/** 

 * Returns the element at the specified position in this ordered set.

 * @param index the position of the element in the ordered {@link Set}.

 * @return the element at position {@code index}

 * @see List#get(int)

 */

public E get(final int index){

  return setOrder.get(index);

}

Location: ListOrderedSet.java

Content: 

/** 

 * Returns the index of the first occurrence of the specified element in ordered set.

 * @param object the element to search for

 * @return the index of the first occurrence of the object, or {@code -1} ifthis ordered set does not contain this object

 * @see List#indexOf(Object)

 */

public int indexOf(final Object object){

  return setOrder.indexOf(object);

}

Location: ListOrderedSet.java

Content: 

/** 

 * Constructs a new empty  {@code ListOrderedSet} using a{@code HashSet} and an {@code ArrayList} internally.

 * @since 3.1

 */

public ListOrderedSet(){

  super(new HashSet<E>());

  setOrder=new ArrayList<>();

}

Location: ListOrderedSet.java

Content: 

/** 

 * Factory method to create an ordered set using the supplied list to retain order. <p> A  {@code HashSet} is used for the set behavior.<p> NOTE: If the list contains duplicates, the duplicates are removed, altering the specified list.

 * @param < E > the element type

 * @param list the list to decorate, must not be null

 * @return a new ordered set

 * @throws NullPointerException if list is null

 * @since 4.0

 */

public static <E>ListOrderedSet<E> listOrderedSet(final List<E> list){

  Objects.requireNonNull(list,"list");

  CollectionUtils.filter(list,UniquePredicate.uniquePredicate());

  final Set<E> set=new HashSet<>(list);

  return new ListOrderedSet<>(set,list);

}

Location: ListOrderedSet.java

Content: 

/** 

 * Constructor that wraps (not copies).

 * @param set the set to decorate, must not be null

 * @throws NullPointerException if set is null

 */

protected ListOrderedSet(final Set<E> set){

  super(set);

  setOrder=new ArrayList<>(set);

}

Location: ListOrderedSet.java

Content: 

/** 

 * Constructor that wraps (not copies) the Set and specifies the list to use. <p> The set and list must both be correctly initialized to the same elements.

 * @param set the set to decorate, must not be null

 * @param list the list to decorate, must not be null

 * @throws NullPointerException if set or list is null

 */

protected ListOrderedSet(final Set<E> set,final List<E> list){

  super(set);

  setOrder=Objects.requireNonNull(list,"list");

}

Location: ListOrderedSet.java

Content: 

/** 

 * Removes the element at the specified position from the ordered set. Shifts any subsequent elements to the left.

 * @param index the index of the element to be removed

 * @return the element that has been remove from the ordered set

 * @see List#remove(int)

 */

public E remove(final int index){

  final E obj=setOrder.remove(index);

  remove(obj);

  return obj;

}

Location: ListOrderedSet.java

Content: 

@Override public <T>T[] toArray(final T a[]){

  return setOrder.toArray(a);

}

