Location: ReferenceMapTest.java

Content: 

public ReferenceMapTest(final String testName){

  super(testName);

}

Location: ReferenceMapTest.java

Content: 

public void testCustomPurge(){

  final List<Integer> expiredValues=new ArrayList<>();

  @SuppressWarnings("unchecked") final Consumer<Integer> consumer=(Consumer<Integer> & Serializable)v -> expiredValues.add(v);

  final Map<Integer,Integer> map=new ReferenceMap<Integer,Integer>(ReferenceStrength.WEAK,ReferenceStrength.HARD,false){

    private static final long serialVersionUID=1L;

    @Override protected ReferenceEntry<Integer,Integer> createEntry(    final HashEntry<Integer,Integer> next,    final int hashCode,    final Integer key,    final Integer value){

      return new AccessibleEntry<>(this,next,hashCode,key,value,consumer);

    }

  }

;

  for (int i=100000; i < 100010; i++) {

    map.put(Integer.valueOf(i),Integer.valueOf(i));

  }

  int iterations=0;

  int bytz=2;

  while (true) {

    System.gc();

    if (iterations++ > 50 || bytz < 0) {

      fail("Max iterations reached before resource released.");

    }

    map.isEmpty();

    if (!expiredValues.isEmpty()) {

      break;

    }

    @SuppressWarnings("unused") final byte[] b=new byte[bytz];

    bytz=bytz * 2;

  }

  assertFalse("Value should be stored",expiredValues.isEmpty());

}

Location: ReferenceMapTest.java

Content: 

/** 

 * Test whether after serialization the "data" HashEntry array is the same size as the original.<p> See <a href="https://issues.apache.org/jira/browse/COLLECTIONS-599">COLLECTIONS-599: HashEntry array object naming data initialized with double the size during deserialization</a>

 */

public void testDataSizeAfterSerialization() throws IOException, ClassNotFoundException {

  final ReferenceMap<String,String> serializeMap=new ReferenceMap<>(ReferenceStrength.WEAK,ReferenceStrength.WEAK,true);

  serializeMap.put("KEY","VALUE");

  final ByteArrayOutputStream baos=new ByteArrayOutputStream();

  try (ObjectOutputStream out=new ObjectOutputStream(baos)){

    out.writeObject(serializeMap);

  }

   final ByteArrayInputStream bais=new ByteArrayInputStream(baos.toByteArray());

  try (ObjectInputStream in=new ObjectInputStream(bais)){

    @SuppressWarnings("unchecked") final ReferenceMap<String,String> deserializedMap=(ReferenceMap<String,String>)in.readObject();

    assertEquals(1,deserializedMap.size());

    assertEquals(serializeMap.data.length,deserializedMap.data.length);

  }

 }

Location: ReferenceMapTest.java

Content: 

public ReferenceMapTest(final String testName){

  super(testName);

}

Location: ReferenceMapTest.java

Content: 

public void testCustomPurge(){

  final List<Integer> expiredValues=new ArrayList<>();

  @SuppressWarnings("unchecked") final Consumer<Integer> consumer=(Consumer<Integer> & Serializable)v -> expiredValues.add(v);

  final Map<Integer,Integer> map=new ReferenceMap<Integer,Integer>(ReferenceStrength.WEAK,ReferenceStrength.HARD,false){

    private static final long serialVersionUID=1L;

    @Override protected ReferenceEntry<Integer,Integer> createEntry(    final HashEntry<Integer,Integer> next,    final int hashCode,    final Integer key,    final Integer value){

      return new AccessibleEntry<>(this,next,hashCode,key,value,consumer);

    }

  }

;

  for (int i=100000; i < 100010; i++) {

    map.put(Integer.valueOf(i),Integer.valueOf(i));

  }

  int iterations=0;

  int bytz=2;

  while (true) {

    System.gc();

    if (iterations++ > 50 || bytz < 0) {

      fail("Max iterations reached before resource released.");

    }

    map.isEmpty();

    if (!expiredValues.isEmpty()) {

      break;

    }

    @SuppressWarnings("unused") final byte[] b=new byte[bytz];

    bytz=bytz * 2;

  }

  assertFalse("Value should be stored",expiredValues.isEmpty());

}

Location: ReferenceMapTest.java

Content: 

/** 

 * Test whether after serialization the "data" HashEntry array is the same size as the original.<p> See <a href="https://issues.apache.org/jira/browse/COLLECTIONS-599">COLLECTIONS-599: HashEntry array object naming data initialized with double the size during deserialization</a>

 */

public void testDataSizeAfterSerialization() throws IOException, ClassNotFoundException {

  final ReferenceMap<String,String> serializeMap=new ReferenceMap<>(ReferenceStrength.WEAK,ReferenceStrength.WEAK,true);

  serializeMap.put("KEY","VALUE");

  final ByteArrayOutputStream baos=new ByteArrayOutputStream();

  try (ObjectOutputStream out=new ObjectOutputStream(baos)){

    out.writeObject(serializeMap);

  }

   final ByteArrayInputStream bais=new ByteArrayInputStream(baos.toByteArray());

  try (ObjectInputStream in=new ObjectInputStream(bais)){

    @SuppressWarnings("unchecked") final ReferenceMap<String,String> deserializedMap=(ReferenceMap<String,String>)in.readObject();

    assertEquals(1,deserializedMap.size());

    assertEquals(serializeMap.data.length,deserializedMap.data.length);

  }

 }

