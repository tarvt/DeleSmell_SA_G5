Location: IterableUtilsTest.java

Content: 

@Test public void containsWithEquator(){

  final List<String> base=new ArrayList<>();

  base.add("AC");

  base.add("BB");

  base.add("CA");

  final Equator<String> secondLetterEquator=new Equator<String>(){

    @Override public boolean equate(    final String o1,    final String o2){

      return o1.charAt(1) == o2.charAt(1);

    }

    @Override public int hash(    final String o){

      return o.charAt(1);

    }

  }

;

  assertFalse(base.contains("CC"));

  assertTrue(IterableUtils.contains(base,"AC",secondLetterEquator));

  assertTrue(IterableUtils.contains(base,"CC",secondLetterEquator));

  assertFalse(IterableUtils.contains(base,"CX",secondLetterEquator));

  assertFalse(IterableUtils.contains(null,null,secondLetterEquator));

  try {

    IterableUtils.contains(base,"AC",null);

    fail("expecting NullPointerException");

  }

 catch (  final NullPointerException npe) {

  }

}

Location: IterableUtilsTest.java

Content: 

public void firstFromIterable() throws Exception {

  final Bag<String> bag=new HashBag<>();

  bag.add("element",1);

  assertEquals("element",IterableUtils.first(bag));

}

Location: IterableUtilsTest.java

Content: 

@Test public void firstFromIterableIndexOutOfBoundsException() throws Exception {

  final Bag<String> bag=new HashBag<>();

  assertThrows(IndexOutOfBoundsException.class,() -> IterableUtils.first(bag));

}

Location: IterableUtilsTest.java

Content: 

@Test public void forEachButLast(){

  final List<Integer> listA=new ArrayList<>();

  listA.add(1);

  final List<Integer> listB=new ArrayList<>();

  listB.add(2);

  final Closure<List<Integer>> testClosure=ClosureUtils.invokerClosure("clear");

  final Collection<List<Integer>> col=new ArrayList<>();

  col.add(listA);

  col.add(listB);

  List<Integer> last=IterableUtils.forEachButLast(col,testClosure);

  assertTrue(listA.isEmpty() && !listB.isEmpty());

  assertSame(listB,last);

  try {

    IterableUtils.forEachButLast(col,null);

    fail("expecting NullPointerException");

  }

 catch (  final NullPointerException npe) {

  }

  IterableUtils.forEachButLast(null,testClosure);

  col.add(null);

  col.add(null);

  last=IterableUtils.forEachButLast(col,testClosure);

  assertNull(last);

}

Location: IterableUtilsTest.java

Content: 

@Test public void forEachFailure(){

  final Closure<String> testClosure=ClosureUtils.invokerClosure("clear");

  final Collection<String> col=new ArrayList<>();

  col.add("x");

  assertThrows(FunctorException.class,() -> IterableUtils.forEach(col,testClosure));

}

Location: IterableUtilsTest.java

Content: 

@Test public void frequency(){

  assertEquals(0,IterableUtils.frequency(null,1));

  assertEquals(1,IterableUtils.frequency(iterableA,1));

  assertEquals(2,IterableUtils.frequency(iterableA,2));

  assertEquals(3,IterableUtils.frequency(iterableA,3));

  assertEquals(4,IterableUtils.frequency(iterableA,4));

  assertEquals(0,IterableUtils.frequency(iterableA,5));

  assertEquals(0,IterableUtils.frequency(iterableB,1L));

  assertEquals(4,IterableUtils.frequency(iterableB,2L));

  assertEquals(3,IterableUtils.frequency(iterableB,3L));

  assertEquals(2,IterableUtils.frequency(iterableB,4L));

  assertEquals(1,IterableUtils.frequency(iterableB,5L));

  final Iterable<Number> iterableIntAsNumber=Arrays.<Number>asList(1,2,3,4,5);

  final Iterable<Number> iterableLongAsNumber=Arrays.<Number>asList(1L,2L,3L,4L,5L);

  assertEquals(0,IterableUtils.frequency(iterableIntAsNumber,2L));

  assertEquals(0,IterableUtils.frequency(iterableLongAsNumber,2));

  final Set<String> set=new HashSet<>();

  set.add("A");

  set.add("C");

  set.add("E");

  set.add("E");

  assertEquals(1,IterableUtils.frequency(set,"A"));

  assertEquals(0,IterableUtils.frequency(set,"B"));

  assertEquals(1,IterableUtils.frequency(set,"C"));

  assertEquals(0,IterableUtils.frequency(set,"D"));

  assertEquals(1,IterableUtils.frequency(set,"E"));

  final Bag<String> bag=new HashBag<>();

  bag.add("A",3);

  bag.add("C");

  bag.add("E");

  bag.add("E");

  assertEquals(3,IterableUtils.frequency(bag,"A"));

  assertEquals(0,IterableUtils.frequency(bag,"B"));

  assertEquals(1,IterableUtils.frequency(bag,"C"));

  assertEquals(0,IterableUtils.frequency(bag,"D"));

  assertEquals(2,IterableUtils.frequency(bag,"E"));

}

Location: IterableUtilsTest.java

Content: 

@Test public void frequencyOfNull(){

  final List<String> list=new ArrayList<>();

  assertEquals(0,IterableUtils.frequency(list,null));

  list.add("A");

  assertEquals(0,IterableUtils.frequency(list,null));

  list.add(null);

  assertEquals(1,IterableUtils.frequency(list,null));

  list.add("B");

  assertEquals(1,IterableUtils.frequency(list,null));

  list.add(null);

  assertEquals(2,IterableUtils.frequency(list,null));

  list.add("B");

  assertEquals(2,IterableUtils.frequency(list,null));

  list.add(null);

  assertEquals(3,IterableUtils.frequency(list,null));

}

Location: IterableUtilsTest.java

Content: 

@Test public void getFromIterableIndexOutOfBoundsException() throws Exception {

  final Bag<String> bag=new HashBag<>();

  bag.add("element",1);

  assertThrows(IndexOutOfBoundsException.class,() -> IterableUtils.get(bag,1));

}

Location: IterableUtilsTest.java

Content: 

@Test public void indexOf(){

  Predicate<Number> testPredicate=equalPredicate((Number)4);

  int index=IterableUtils.indexOf(iterableA,testPredicate);

  assertEquals(6,index);

  testPredicate=equalPredicate((Number)45);

  index=IterableUtils.indexOf(iterableA,testPredicate);

  assertEquals(-1,index);

  assertEquals(-1,IterableUtils.indexOf(null,testPredicate));

  try {

    IterableUtils.indexOf(iterableA,null);

    fail("expecting NullPointerException");

  }

 catch (  final NullPointerException npe) {

  }

}

Location: IterableUtilsTest.java

Content: 

@Test public void matchesAll(){

  try {

    assertFalse(IterableUtils.matchesAll(null,null));

    fail("predicate must not be null");

  }

 catch (  final NullPointerException ex) {

  }

  try {

    assertFalse(IterableUtils.matchesAll(iterableA,null));

    fail("predicate must not be null");

  }

 catch (  final NullPointerException ex) {

  }

  final Predicate<Integer> lessThanFive=object -> object < 5;

  assertTrue(IterableUtils.matchesAll(iterableA,lessThanFive));

  final Predicate<Integer> lessThanFour=object -> object < 4;

  assertFalse(IterableUtils.matchesAll(iterableA,lessThanFour));

  assertTrue(IterableUtils.matchesAll(null,lessThanFour));

  assertTrue(IterableUtils.matchesAll(emptyIterable,lessThanFour));

}

Location: IterableUtilsTest.java

Content: 

@Test public void matchesAny(){

  final List<Integer> list=new ArrayList<>();

  try {

    assertFalse(IterableUtils.matchesAny(null,null));

    fail("predicate must not be null");

  }

 catch (  final NullPointerException ex) {

  }

  try {

    assertFalse(IterableUtils.matchesAny(list,null));

    fail("predicate must not be null");

  }

 catch (  final NullPointerException ex) {

  }

  assertFalse(IterableUtils.matchesAny(null,EQUALS_TWO));

  assertFalse(IterableUtils.matchesAny(list,EQUALS_TWO));

  list.add(1);

  list.add(3);

  list.add(4);

  assertFalse(IterableUtils.matchesAny(list,EQUALS_TWO));

  list.add(2);

  assertTrue(IterableUtils.matchesAny(list,EQUALS_TWO));

}

Location: IterableUtilsTest.java

Content: 

@SuppressWarnings("unchecked") @Test public void partition(){

  final List<Integer> input=new ArrayList<>();

  input.add(1);

  input.add(2);

  input.add(3);

  input.add(4);

  List<List<Integer>> partitions=IterableUtils.partition(input,EQUALS_TWO);

  assertEquals(2,partitions.size());

  Collection<Integer> partition=partitions.get(0);

  assertEquals(1,partition.size());

  assertEquals(2,CollectionUtils.extractSingleton(partition).intValue());

  final Integer[] expected={1,3,4};

  partition=partitions.get(1);

  assertArrayEquals(expected,partition.toArray());

  partitions=IterableUtils.partition((List<Integer>)null,EQUALS_TWO);

  assertEquals(2,partitions.size());

  assertTrue(partitions.get(0).isEmpty());

  assertTrue(partitions.get(1).isEmpty());

  partitions=IterableUtils.partition(input);

  assertEquals(1,partitions.size());

  assertEquals(input,partitions.get(0));

  try {

    IterableUtils.partition(input,(Predicate<Integer>)null);

    fail("expecting NullPointerException");

  }

 catch (  final NullPointerException npe) {

  }

}

Location: IterableUtilsTest.java

Content: 

@SuppressWarnings("unchecked") @Test public void partitionMultiplePredicates(){

  final List<Integer> input=new ArrayList<>();

  input.add(1);

  input.add(2);

  input.add(3);

  input.add(4);

  final List<List<Integer>> partitions=IterableUtils.partition(input,EQUALS_TWO,EVEN);

  Collection<Integer> partition=partitions.get(0);

  assertEquals(1,partition.size());

  assertEquals(2,partition.iterator().next().intValue());

  partition=partitions.get(1);

  assertEquals(1,partition.size());

  assertEquals(4,partition.iterator().next().intValue());

  final Integer[] expected={1,3};

  partition=partitions.get(2);

  assertArrayEquals(expected,partition.toArray());

  try {

    IterableUtils.partition(input,EQUALS_TWO,null);

  }

 catch (  final NullPointerException npe) {

  }

}

Location: IterableUtilsTest.java

Content: 

@Test public void testToStringDelimiter(){

  final Transformer<Integer,String> transformer=input -> Integer.toString(input * 2);

  String result=IterableUtils.toString(iterableA,transformer,"","","");

  assertEquals("2446668888",result);

  result=IterableUtils.toString(iterableA,transformer,",","","");

  assertEquals("2,4,4,6,6,6,8,8,8,8",result);

  result=IterableUtils.toString(iterableA,transformer,"","[","]");

  assertEquals("[2446668888]",result);

  result=IterableUtils.toString(iterableA,transformer,",","[","]");

  assertEquals("[2,4,4,6,6,6,8,8,8,8]",result);

  result=IterableUtils.toString(iterableA,transformer,",","[[","]]");

  assertEquals("[[2,4,4,6,6,6,8,8,8,8]]",result);

  result=IterableUtils.toString(iterableA,transformer,",,","[","]");

  assertEquals("[2,,4,,4,,6,,6,,6,,8,,8,,8,,8]",result);

  result=IterableUtils.toString(iterableA,transformer,",,","((","))");

  assertEquals("((2,,4,,4,,6,,6,,6,,8,,8,,8,,8))",result);

  result=IterableUtils.toString(new ArrayList<Integer>(),transformer,"","(",")");

  assertEquals("()",result);

  result=IterableUtils.toString(new ArrayList<Integer>(),transformer,"","","");

  assertEquals("",result);

}

Location: IterableUtilsTest.java

Content: 

@Test public void testToStringWithNullArguments(){

  final String result=IterableUtils.toString(null,input -> {

    fail("not supposed to reach here");

    return "";

  }

,"","(",")");

  assertEquals("()",result);

  try {

    IterableUtils.toString(new ArrayList<Integer>(),null,"","(",")");

    fail("expecting NullPointerException");

  }

 catch (  final NullPointerException ex) {

  }

  try {

    IterableUtils.toString(new ArrayList<Integer>(),input -> {

      fail("not supposed to reach here");

      return "";

    }

,null,"(",")");

    fail("expecting NullPointerException");

  }

 catch (  final NullPointerException ex) {

  }

  try {

    IterableUtils.toString(new ArrayList<Integer>(),input -> {

      fail("not supposed to reach here");

      return "";

    }

,"",null,")");

    fail("expecting NullPointerException");

  }

 catch (  final NullPointerException ex) {

  }

  try {

    IterableUtils.toString(new ArrayList<Integer>(),input -> {

      fail("not supposed to reach here");

      return "";

    }

,"","(",null);

    fail("expecting NullPointerException");

  }

 catch (  final NullPointerException ex) {

  }

}

Location: IterableUtilsTest.java

Content: 

@Test public void containsWithEquator(){

  final List<String> base=new ArrayList<>();

  base.add("AC");

  base.add("BB");

  base.add("CA");

  final Equator<String> secondLetterEquator=new Equator<String>(){

    @Override public boolean equate(    final String o1,    final String o2){

      return o1.charAt(1) == o2.charAt(1);

    }

    @Override public int hash(    final String o){

      return o.charAt(1);

    }

  }

;

  assertFalse(base.contains("CC"));

  assertTrue(IterableUtils.contains(base,"AC",secondLetterEquator));

  assertTrue(IterableUtils.contains(base,"CC",secondLetterEquator));

  assertFalse(IterableUtils.contains(base,"CX",secondLetterEquator));

  assertFalse(IterableUtils.contains(null,null,secondLetterEquator));

  try {

    IterableUtils.contains(base,"AC",null);

    fail("expecting NullPointerException");

  }

 catch (  final NullPointerException npe) {

  }

}

Location: IterableUtilsTest.java

Content: 

public void firstFromIterable() throws Exception {

  final Bag<String> bag=new HashBag<>();

  bag.add("element",1);

  assertEquals("element",IterableUtils.first(bag));

}

Location: IterableUtilsTest.java

Content: 

@Test public void firstFromIterableIndexOutOfBoundsException() throws Exception {

  final Bag<String> bag=new HashBag<>();

  assertThrows(IndexOutOfBoundsException.class,() -> IterableUtils.first(bag));

}

Location: IterableUtilsTest.java

Content: 

@Test public void forEachButLast(){

  final List<Integer> listA=new ArrayList<>();

  listA.add(1);

  final List<Integer> listB=new ArrayList<>();

  listB.add(2);

  final Closure<List<Integer>> testClosure=ClosureUtils.invokerClosure("clear");

  final Collection<List<Integer>> col=new ArrayList<>();

  col.add(listA);

  col.add(listB);

  List<Integer> last=IterableUtils.forEachButLast(col,testClosure);

  assertTrue(listA.isEmpty() && !listB.isEmpty());

  assertSame(listB,last);

  try {

    IterableUtils.forEachButLast(col,null);

    fail("expecting NullPointerException");

  }

 catch (  final NullPointerException npe) {

  }

  IterableUtils.forEachButLast(null,testClosure);

  col.add(null);

  col.add(null);

  last=IterableUtils.forEachButLast(col,testClosure);

  assertNull(last);

}

Location: IterableUtilsTest.java

Content: 

@Test public void forEachFailure(){

  final Closure<String> testClosure=ClosureUtils.invokerClosure("clear");

  final Collection<String> col=new ArrayList<>();

  col.add("x");

  assertThrows(FunctorException.class,() -> IterableUtils.forEach(col,testClosure));

}

Location: IterableUtilsTest.java

Content: 

@Test public void frequency(){

  assertEquals(0,IterableUtils.frequency(null,1));

  assertEquals(1,IterableUtils.frequency(iterableA,1));

  assertEquals(2,IterableUtils.frequency(iterableA,2));

  assertEquals(3,IterableUtils.frequency(iterableA,3));

  assertEquals(4,IterableUtils.frequency(iterableA,4));

  assertEquals(0,IterableUtils.frequency(iterableA,5));

  assertEquals(0,IterableUtils.frequency(iterableB,1L));

  assertEquals(4,IterableUtils.frequency(iterableB,2L));

  assertEquals(3,IterableUtils.frequency(iterableB,3L));

  assertEquals(2,IterableUtils.frequency(iterableB,4L));

  assertEquals(1,IterableUtils.frequency(iterableB,5L));

  final Iterable<Number> iterableIntAsNumber=Arrays.<Number>asList(1,2,3,4,5);

  final Iterable<Number> iterableLongAsNumber=Arrays.<Number>asList(1L,2L,3L,4L,5L);

  assertEquals(0,IterableUtils.frequency(iterableIntAsNumber,2L));

  assertEquals(0,IterableUtils.frequency(iterableLongAsNumber,2));

  final Set<String> set=new HashSet<>();

  set.add("A");

  set.add("C");

  set.add("E");

  set.add("E");

  assertEquals(1,IterableUtils.frequency(set,"A"));

  assertEquals(0,IterableUtils.frequency(set,"B"));

  assertEquals(1,IterableUtils.frequency(set,"C"));

  assertEquals(0,IterableUtils.frequency(set,"D"));

  assertEquals(1,IterableUtils.frequency(set,"E"));

  final Bag<String> bag=new HashBag<>();

  bag.add("A",3);

  bag.add("C");

  bag.add("E");

  bag.add("E");

  assertEquals(3,IterableUtils.frequency(bag,"A"));

  assertEquals(0,IterableUtils.frequency(bag,"B"));

  assertEquals(1,IterableUtils.frequency(bag,"C"));

  assertEquals(0,IterableUtils.frequency(bag,"D"));

  assertEquals(2,IterableUtils.frequency(bag,"E"));

}

Location: IterableUtilsTest.java

Content: 

@Test public void frequencyOfNull(){

  final List<String> list=new ArrayList<>();

  assertEquals(0,IterableUtils.frequency(list,null));

  list.add("A");

  assertEquals(0,IterableUtils.frequency(list,null));

  list.add(null);

  assertEquals(1,IterableUtils.frequency(list,null));

  list.add("B");

  assertEquals(1,IterableUtils.frequency(list,null));

  list.add(null);

  assertEquals(2,IterableUtils.frequency(list,null));

  list.add("B");

  assertEquals(2,IterableUtils.frequency(list,null));

  list.add(null);

  assertEquals(3,IterableUtils.frequency(list,null));

}

Location: IterableUtilsTest.java

Content: 

@Test public void getFromIterableIndexOutOfBoundsException() throws Exception {

  final Bag<String> bag=new HashBag<>();

  bag.add("element",1);

  assertThrows(IndexOutOfBoundsException.class,() -> IterableUtils.get(bag,1));

}

Location: IterableUtilsTest.java

Content: 

@Test public void indexOf(){

  Predicate<Number> testPredicate=equalPredicate((Number)4);

  int index=IterableUtils.indexOf(iterableA,testPredicate);

  assertEquals(6,index);

  testPredicate=equalPredicate((Number)45);

  index=IterableUtils.indexOf(iterableA,testPredicate);

  assertEquals(-1,index);

  assertEquals(-1,IterableUtils.indexOf(null,testPredicate));

  try {

    IterableUtils.indexOf(iterableA,null);

    fail("expecting NullPointerException");

  }

 catch (  final NullPointerException npe) {

  }

}

Location: IterableUtilsTest.java

Content: 

@Test public void matchesAll(){

  try {

    assertFalse(IterableUtils.matchesAll(null,null));

    fail("predicate must not be null");

  }

 catch (  final NullPointerException ex) {

  }

  try {

    assertFalse(IterableUtils.matchesAll(iterableA,null));

    fail("predicate must not be null");

  }

 catch (  final NullPointerException ex) {

  }

  final Predicate<Integer> lessThanFive=object -> object < 5;

  assertTrue(IterableUtils.matchesAll(iterableA,lessThanFive));

  final Predicate<Integer> lessThanFour=object -> object < 4;

  assertFalse(IterableUtils.matchesAll(iterableA,lessThanFour));

  assertTrue(IterableUtils.matchesAll(null,lessThanFour));

  assertTrue(IterableUtils.matchesAll(emptyIterable,lessThanFour));

}

Location: IterableUtilsTest.java

Content: 

@Test public void matchesAny(){

  final List<Integer> list=new ArrayList<>();

  try {

    assertFalse(IterableUtils.matchesAny(null,null));

    fail("predicate must not be null");

  }

 catch (  final NullPointerException ex) {

  }

  try {

    assertFalse(IterableUtils.matchesAny(list,null));

    fail("predicate must not be null");

  }

 catch (  final NullPointerException ex) {

  }

  assertFalse(IterableUtils.matchesAny(null,EQUALS_TWO));

  assertFalse(IterableUtils.matchesAny(list,EQUALS_TWO));

  list.add(1);

  list.add(3);

  list.add(4);

  assertFalse(IterableUtils.matchesAny(list,EQUALS_TWO));

  list.add(2);

  assertTrue(IterableUtils.matchesAny(list,EQUALS_TWO));

}

Location: IterableUtilsTest.java

Content: 

@SuppressWarnings("unchecked") @Test public void partition(){

  final List<Integer> input=new ArrayList<>();

  input.add(1);

  input.add(2);

  input.add(3);

  input.add(4);

  List<List<Integer>> partitions=IterableUtils.partition(input,EQUALS_TWO);

  assertEquals(2,partitions.size());

  Collection<Integer> partition=partitions.get(0);

  assertEquals(1,partition.size());

  assertEquals(2,CollectionUtils.extractSingleton(partition).intValue());

  final Integer[] expected={1,3,4};

  partition=partitions.get(1);

  assertArrayEquals(expected,partition.toArray());

  partitions=IterableUtils.partition((List<Integer>)null,EQUALS_TWO);

  assertEquals(2,partitions.size());

  assertTrue(partitions.get(0).isEmpty());

  assertTrue(partitions.get(1).isEmpty());

  partitions=IterableUtils.partition(input);

  assertEquals(1,partitions.size());

  assertEquals(input,partitions.get(0));

  try {

    IterableUtils.partition(input,(Predicate<Integer>)null);

    fail("expecting NullPointerException");

  }

 catch (  final NullPointerException npe) {

  }

}

Location: IterableUtilsTest.java

Content: 

@SuppressWarnings("unchecked") @Test public void partitionMultiplePredicates(){

  final List<Integer> input=new ArrayList<>();

  input.add(1);

  input.add(2);

  input.add(3);

  input.add(4);

  final List<List<Integer>> partitions=IterableUtils.partition(input,EQUALS_TWO,EVEN);

  Collection<Integer> partition=partitions.get(0);

  assertEquals(1,partition.size());

  assertEquals(2,partition.iterator().next().intValue());

  partition=partitions.get(1);

  assertEquals(1,partition.size());

  assertEquals(4,partition.iterator().next().intValue());

  final Integer[] expected={1,3};

  partition=partitions.get(2);

  assertArrayEquals(expected,partition.toArray());

  try {

    IterableUtils.partition(input,EQUALS_TWO,null);

  }

 catch (  final NullPointerException npe) {

  }

}

Location: IterableUtilsTest.java

Content: 

@Test public void testToStringDelimiter(){

  final Transformer<Integer,String> transformer=input -> Integer.toString(input * 2);

  String result=IterableUtils.toString(iterableA,transformer,"","","");

  assertEquals("2446668888",result);

  result=IterableUtils.toString(iterableA,transformer,",","","");

  assertEquals("2,4,4,6,6,6,8,8,8,8",result);

  result=IterableUtils.toString(iterableA,transformer,"","[","]");

  assertEquals("[2446668888]",result);

  result=IterableUtils.toString(iterableA,transformer,",","[","]");

  assertEquals("[2,4,4,6,6,6,8,8,8,8]",result);

  result=IterableUtils.toString(iterableA,transformer,",","[[","]]");

  assertEquals("[[2,4,4,6,6,6,8,8,8,8]]",result);

  result=IterableUtils.toString(iterableA,transformer,",,","[","]");

  assertEquals("[2,,4,,4,,6,,6,,6,,8,,8,,8,,8]",result);

  result=IterableUtils.toString(iterableA,transformer,",,","((","))");

  assertEquals("((2,,4,,4,,6,,6,,6,,8,,8,,8,,8))",result);

  result=IterableUtils.toString(new ArrayList<Integer>(),transformer,"","(",")");

  assertEquals("()",result);

  result=IterableUtils.toString(new ArrayList<Integer>(),transformer,"","","");

  assertEquals("",result);

}

Location: IterableUtilsTest.java

Content: 

@Test public void testToStringWithNullArguments(){

  final String result=IterableUtils.toString(null,input -> {

    fail("not supposed to reach here");

    return "";

  }

,"","(",")");

  assertEquals("()",result);

  try {

    IterableUtils.toString(new ArrayList<Integer>(),null,"","(",")");

    fail("expecting NullPointerException");

  }

 catch (  final NullPointerException ex) {

  }

  try {

    IterableUtils.toString(new ArrayList<Integer>(),input -> {

      fail("not supposed to reach here");

      return "";

    }

,null,"(",")");

    fail("expecting NullPointerException");

  }

 catch (  final NullPointerException ex) {

  }

  try {

    IterableUtils.toString(new ArrayList<Integer>(),input -> {

      fail("not supposed to reach here");

      return "";

    }

,"",null,")");

    fail("expecting NullPointerException");

  }

 catch (  final NullPointerException ex) {

  }

  try {

    IterableUtils.toString(new ArrayList<Integer>(),input -> {

      fail("not supposed to reach here");

      return "";

    }

,"","(",null);

    fail("expecting NullPointerException");

  }

 catch (  final NullPointerException ex) {

  }

}

