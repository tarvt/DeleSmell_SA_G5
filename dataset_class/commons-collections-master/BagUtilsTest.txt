Location: BagUtilsTest.java

Content: 

@Test public void testPredicatedBag(){

  final Bag<Object> bag=BagUtils.predicatedBag(new HashBag<>(),truePredicate);

  assertTrue(bag instanceof PredicatedBag,"Returned object should be a PredicatedBag.");

  try {

    BagUtils.predicatedBag(null,truePredicate);

    fail("Expecting NullPointerException for null bag.");

  }

 catch (  final NullPointerException ex) {

  }

  try {

    BagUtils.predicatedBag(new HashBag<>(),null);

    fail("Expecting NullPointerException for null predicate.");

  }

 catch (  final NullPointerException ex) {

  }

}

Location: BagUtilsTest.java

Content: 

@Test public void testPredicatedSortedBag(){

  final Bag<Object> bag=BagUtils.predicatedSortedBag(new TreeBag<>(),truePredicate);

  assertTrue(bag instanceof PredicatedSortedBag,"Returned object should be a PredicatedSortedBag.");

  try {

    BagUtils.predicatedSortedBag(null,truePredicate);

    fail("Expecting NullPointerException for null bag.");

  }

 catch (  final NullPointerException ex) {

  }

  try {

    BagUtils.predicatedSortedBag(new TreeBag<>(),null);

    fail("Expecting NullPointerException for null predicate.");

  }

 catch (  final NullPointerException ex) {

  }

}

Location: BagUtilsTest.java

Content: 

@Test public void testSynchronizedBag(){

  final Bag<Object> bag=BagUtils.synchronizedBag(new HashBag<>());

  assertTrue(bag instanceof SynchronizedBag,"Returned object should be a SynchronizedBag.");

  try {

    BagUtils.synchronizedBag(null);

    fail("Expecting NullPointerException for null bag.");

  }

 catch (  final NullPointerException ex) {

  }

}

Location: BagUtilsTest.java

Content: 

@Test public void testSynchronizedSortedBag(){

  final Bag<Object> bag=BagUtils.synchronizedSortedBag(new TreeBag<>());

  assertTrue(bag instanceof SynchronizedSortedBag,"Returned object should be a SynchronizedSortedBag.");

  try {

    BagUtils.synchronizedSortedBag(null);

    fail("Expecting NullPointerException for null bag.");

  }

 catch (  final NullPointerException ex) {

  }

}

Location: BagUtilsTest.java

Content: 

@Test public void testTransformedSortedBag(){

  final Bag<Object> bag=BagUtils.transformingSortedBag(new TreeBag<>(),nopTransformer);

  assertTrue(bag instanceof TransformedSortedBag,"Returned object should be an TransformedSortedBag");

  try {

    BagUtils.transformingSortedBag(null,nopTransformer);

    fail("Expecting NullPointerException for null bag.");

  }

 catch (  final NullPointerException ex) {

  }

  try {

    BagUtils.transformingSortedBag(new TreeBag<>(),null);

    fail("Expecting NullPointerException for null transformer.");

  }

 catch (  final NullPointerException ex) {

  }

}

Location: BagUtilsTest.java

Content: 

@Test public void testUnmodifiableBag(){

  final Bag<Object> bag=BagUtils.unmodifiableBag(new HashBag<>());

  assertTrue(bag instanceof UnmodifiableBag,"Returned object should be an UnmodifiableBag.");

  try {

    BagUtils.unmodifiableBag(null);

    fail("Expecting NullPointerException for null bag.");

  }

 catch (  final NullPointerException ex) {

  }

  assertSame(bag,BagUtils.unmodifiableBag(bag),"UnmodifiableBag shall not be decorated");

}

Location: BagUtilsTest.java

Content: 

@Test public void testUnmodifiableSortedBag(){

  final SortedBag<Object> bag=BagUtils.unmodifiableSortedBag(new TreeBag<>());

  assertTrue(bag instanceof UnmodifiableSortedBag,"Returned object should be an UnmodifiableSortedBag.");

  try {

    BagUtils.unmodifiableSortedBag(null);

    fail("Expecting NullPointerException for null bag.");

  }

 catch (  final NullPointerException ex) {

  }

  assertSame(bag,BagUtils.unmodifiableSortedBag(bag),"UnmodifiableSortedBag shall not be decorated");

}

Location: BagUtilsTest.java

Content: 

@Test public void testPredicatedBag(){

  final Bag<Object> bag=BagUtils.predicatedBag(new HashBag<>(),truePredicate);

  assertTrue(bag instanceof PredicatedBag,"Returned object should be a PredicatedBag.");

  try {

    BagUtils.predicatedBag(null,truePredicate);

    fail("Expecting NullPointerException for null bag.");

  }

 catch (  final NullPointerException ex) {

  }

  try {

    BagUtils.predicatedBag(new HashBag<>(),null);

    fail("Expecting NullPointerException for null predicate.");

  }

 catch (  final NullPointerException ex) {

  }

}

Location: BagUtilsTest.java

Content: 

@Test public void testPredicatedSortedBag(){

  final Bag<Object> bag=BagUtils.predicatedSortedBag(new TreeBag<>(),truePredicate);

  assertTrue(bag instanceof PredicatedSortedBag,"Returned object should be a PredicatedSortedBag.");

  try {

    BagUtils.predicatedSortedBag(null,truePredicate);

    fail("Expecting NullPointerException for null bag.");

  }

 catch (  final NullPointerException ex) {

  }

  try {

    BagUtils.predicatedSortedBag(new TreeBag<>(),null);

    fail("Expecting NullPointerException for null predicate.");

  }

 catch (  final NullPointerException ex) {

  }

}

Location: BagUtilsTest.java

Content: 

@Test public void testSynchronizedBag(){

  final Bag<Object> bag=BagUtils.synchronizedBag(new HashBag<>());

  assertTrue(bag instanceof SynchronizedBag,"Returned object should be a SynchronizedBag.");

  try {

    BagUtils.synchronizedBag(null);

    fail("Expecting NullPointerException for null bag.");

  }

 catch (  final NullPointerException ex) {

  }

}

Location: BagUtilsTest.java

Content: 

@Test public void testSynchronizedSortedBag(){

  final Bag<Object> bag=BagUtils.synchronizedSortedBag(new TreeBag<>());

  assertTrue(bag instanceof SynchronizedSortedBag,"Returned object should be a SynchronizedSortedBag.");

  try {

    BagUtils.synchronizedSortedBag(null);

    fail("Expecting NullPointerException for null bag.");

  }

 catch (  final NullPointerException ex) {

  }

}

Location: BagUtilsTest.java

Content: 

@Test public void testTransformedSortedBag(){

  final Bag<Object> bag=BagUtils.transformingSortedBag(new TreeBag<>(),nopTransformer);

  assertTrue(bag instanceof TransformedSortedBag,"Returned object should be an TransformedSortedBag");

  try {

    BagUtils.transformingSortedBag(null,nopTransformer);

    fail("Expecting NullPointerException for null bag.");

  }

 catch (  final NullPointerException ex) {

  }

  try {

    BagUtils.transformingSortedBag(new TreeBag<>(),null);

    fail("Expecting NullPointerException for null transformer.");

  }

 catch (  final NullPointerException ex) {

  }

}

Location: BagUtilsTest.java

Content: 

@Test public void testUnmodifiableBag(){

  final Bag<Object> bag=BagUtils.unmodifiableBag(new HashBag<>());

  assertTrue(bag instanceof UnmodifiableBag,"Returned object should be an UnmodifiableBag.");

  try {

    BagUtils.unmodifiableBag(null);

    fail("Expecting NullPointerException for null bag.");

  }

 catch (  final NullPointerException ex) {

  }

  assertSame(bag,BagUtils.unmodifiableBag(bag),"UnmodifiableBag shall not be decorated");

}

Location: BagUtilsTest.java

Content: 

@Test public void testUnmodifiableSortedBag(){

  final SortedBag<Object> bag=BagUtils.unmodifiableSortedBag(new TreeBag<>());

  assertTrue(bag instanceof UnmodifiableSortedBag,"Returned object should be an UnmodifiableSortedBag.");

  try {

    BagUtils.unmodifiableSortedBag(null);

    fail("Expecting NullPointerException for null bag.");

  }

 catch (  final NullPointerException ex) {

  }

  assertSame(bag,BagUtils.unmodifiableSortedBag(bag),"UnmodifiableSortedBag shall not be decorated");

}

