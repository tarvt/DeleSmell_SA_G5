Location: ComparatorPredicateTest.java

Content: 

@Test public void compareEquals(){

  final Integer value=Integer.valueOf(10);

  final Predicate<Integer> p=comparatorPredicate(value,new TestComparator<Integer>());

  assertPredicateFalse(p,Integer.valueOf(value.intValue() - 1));

  assertPredicateTrue(p,Integer.valueOf(value.intValue()));

  assertPredicateFalse(p,Integer.valueOf(value.intValue() + 1));

}

Location: ComparatorPredicateTest.java

Content: 

@Test public void compareGreater(){

  final Integer value=Integer.valueOf(10);

  final Predicate<Integer> p=comparatorPredicate(value,new TestComparator<Integer>(),Criterion.GREATER);

  assertPredicateTrue(p,Integer.valueOf(value.intValue() - 1));

  assertPredicateFalse(p,Integer.valueOf(value.intValue()));

  assertPredicateFalse(p,Integer.valueOf(value.intValue() + 1));

}

Location: ComparatorPredicateTest.java

Content: 

@Test public void compareGreaterOrEqual(){

  final Integer value=Integer.valueOf(10);

  final Predicate<Integer> p=comparatorPredicate(value,new TestComparator<Integer>(),Criterion.GREATER_OR_EQUAL);

  assertPredicateTrue(p,Integer.valueOf(value.intValue() - 1));

  assertPredicateTrue(p,Integer.valueOf(value.intValue()));

  assertPredicateFalse(p,Integer.valueOf(value.intValue() + 1));

}

Location: ComparatorPredicateTest.java

Content: 

@Test public void compareLess(){

  final Integer value=Integer.valueOf(10);

  final Predicate<Integer> p=comparatorPredicate(value,new TestComparator<Integer>(),Criterion.LESS);

  assertPredicateFalse(p,Integer.valueOf(value.intValue() - 1));

  assertPredicateFalse(p,Integer.valueOf(value.intValue()));

  assertPredicateTrue(p,Integer.valueOf(value.intValue() + 1));

}

Location: ComparatorPredicateTest.java

Content: 

@Test public void compareLessOrEqual(){

  final Integer value=Integer.valueOf(10);

  final Predicate<Integer> p=comparatorPredicate(value,new TestComparator<Integer>(),Criterion.LESS_OR_EQUAL);

  assertPredicateFalse(p,Integer.valueOf(value.intValue() - 1));

  assertPredicateTrue(p,Integer.valueOf(value.intValue()));

  assertPredicateTrue(p,Integer.valueOf(value.intValue() + 1));

}

Location: ComparatorPredicateTest.java

Content: 

@Test public void compareEquals(){

  final Integer value=Integer.valueOf(10);

  final Predicate<Integer> p=comparatorPredicate(value,new TestComparator<Integer>());

  assertPredicateFalse(p,Integer.valueOf(value.intValue() - 1));

  assertPredicateTrue(p,Integer.valueOf(value.intValue()));

  assertPredicateFalse(p,Integer.valueOf(value.intValue() + 1));

}

Location: ComparatorPredicateTest.java

Content: 

@Test public void compareGreater(){

  final Integer value=Integer.valueOf(10);

  final Predicate<Integer> p=comparatorPredicate(value,new TestComparator<Integer>(),Criterion.GREATER);

  assertPredicateTrue(p,Integer.valueOf(value.intValue() - 1));

  assertPredicateFalse(p,Integer.valueOf(value.intValue()));

  assertPredicateFalse(p,Integer.valueOf(value.intValue() + 1));

}

Location: ComparatorPredicateTest.java

Content: 

@Test public void compareGreaterOrEqual(){

  final Integer value=Integer.valueOf(10);

  final Predicate<Integer> p=comparatorPredicate(value,new TestComparator<Integer>(),Criterion.GREATER_OR_EQUAL);

  assertPredicateTrue(p,Integer.valueOf(value.intValue() - 1));

  assertPredicateTrue(p,Integer.valueOf(value.intValue()));

  assertPredicateFalse(p,Integer.valueOf(value.intValue() + 1));

}

Location: ComparatorPredicateTest.java

Content: 

@Test public void compareLess(){

  final Integer value=Integer.valueOf(10);

  final Predicate<Integer> p=comparatorPredicate(value,new TestComparator<Integer>(),Criterion.LESS);

  assertPredicateFalse(p,Integer.valueOf(value.intValue() - 1));

  assertPredicateFalse(p,Integer.valueOf(value.intValue()));

  assertPredicateTrue(p,Integer.valueOf(value.intValue() + 1));

}

Location: ComparatorPredicateTest.java

Content: 

@Test public void compareLessOrEqual(){

  final Integer value=Integer.valueOf(10);

  final Predicate<Integer> p=comparatorPredicate(value,new TestComparator<Integer>(),Criterion.LESS_OR_EQUAL);

  assertPredicateFalse(p,Integer.valueOf(value.intValue() - 1));

  assertPredicateTrue(p,Integer.valueOf(value.intValue()));

  assertPredicateTrue(p,Integer.valueOf(value.intValue() + 1));

}

