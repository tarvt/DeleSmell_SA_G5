Location: UnmodifiableTrie.java

Content: 

@Override public boolean containsValue(final Object value){

  return delegate.containsValue(value);

}

Location: UnmodifiableTrie.java

Content: 

@Override public boolean equals(final Object obj){

  return delegate.equals(obj);

}

Location: UnmodifiableTrie.java

Content: 

@Override public int hashCode(){

  return delegate.hashCode();

}

Location: UnmodifiableTrie.java

Content: 

@Override public void putAll(final Map<? extends K,? extends V> m){

  throw new UnsupportedOperationException();

}

Location: UnmodifiableTrie.java

Content: 

/** 

 * Constructor that wraps (not copies).

 * @param trie  the trie to decorate, must not be null

 * @throws NullPointerException if trie is null

 */

public UnmodifiableTrie(final Trie<K,? extends V> trie){

  @SuppressWarnings("unchecked") final Trie<K,V> tmpTrie=(Trie<K,V>)Objects.requireNonNull(trie,"trie");

  this.delegate=tmpTrie;

}

Location: UnmodifiableTrie.java

Content: 

@Override public boolean containsValue(final Object value){

  return delegate.containsValue(value);

}

Location: UnmodifiableTrie.java

Content: 

@Override public boolean equals(final Object obj){

  return delegate.equals(obj);

}

Location: UnmodifiableTrie.java

Content: 

@Override public int hashCode(){

  return delegate.hashCode();

}

Location: UnmodifiableTrie.java

Content: 

@Override public void putAll(final Map<? extends K,? extends V> m){

  throw new UnsupportedOperationException();

}

Location: UnmodifiableTrie.java

Content: 

/** 

 * Constructor that wraps (not copies).

 * @param trie  the trie to decorate, must not be null

 * @throws NullPointerException if trie is null

 */

public UnmodifiableTrie(final Trie<K,? extends V> trie){

  @SuppressWarnings("unchecked") final Trie<K,V> tmpTrie=(Trie<K,V>)Objects.requireNonNull(trie,"trie");

  this.delegate=tmpTrie;

}

