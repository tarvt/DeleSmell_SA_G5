Location: BoundedIteratorTest.java

Content: 

public BoundedIteratorTest(final String testName){

  super(testName);

}

Location: BoundedIteratorTest.java

Content: 

/** 

 * Test a decorated iterator bounded such that the first element returned is at an index greater its first element, and the last element returned is at an index less than its last element.

 */

@Test public void testBounded(){

  final Iterator<E> iter=new BoundedIterator<>(testList.iterator(),2,4);

  assertTrue(iter.hasNext());

  assertEquals("c",iter.next());

  assertTrue(iter.hasNext());

  assertEquals("d",iter.next());

  assertTrue(iter.hasNext());

  assertEquals("e",iter.next());

  assertTrue(iter.hasNext());

  assertEquals("f",iter.next());

  assertFalse(iter.hasNext());

  try {

    iter.next();

    fail("Expected NoSuchElementException.");

  }

 catch (  final NoSuchElementException nsee) {

  }

}

Location: BoundedIteratorTest.java

Content: 

/** 

 * Test a decorated iterator bounded to a  {@code max} of 0. TheBoundedIterator should behave as if there are no more elements to return, since it is technically an empty iterator.

 */

@Test public void testEmptyBounded(){

  final Iterator<E> iter=new BoundedIterator<>(testList.iterator(),3,0);

  assertFalse(iter.hasNext());

  try {

    iter.next();

    fail("Expected NoSuchElementException.");

  }

 catch (  final NoSuchElementException nsee) {

  }

}

Location: BoundedIteratorTest.java

Content: 

/** 

 * Test the case if the  {@code max} passed to the constructor isgreater than the size of the decorated iterator. The last element returned should be the same as the last element of the decorated iterator.

 */

@Test public void testMaxGreaterThanSize(){

  final Iterator<E> iter=new BoundedIterator<>(testList.iterator(),1,10);

  assertTrue(iter.hasNext());

  assertEquals("b",iter.next());

  assertTrue(iter.hasNext());

  assertEquals("c",iter.next());

  assertTrue(iter.hasNext());

  assertEquals("d",iter.next());

  assertTrue(iter.hasNext());

  assertEquals("e",iter.next());

  assertTrue(iter.hasNext());

  assertEquals("f",iter.next());

  assertTrue(iter.hasNext());

  assertEquals("g",iter.next());

  assertFalse(iter.hasNext());

  try {

    iter.next();

    fail("Expected NoSuchElementException.");

  }

 catch (  final NoSuchElementException nsee) {

  }

}

Location: BoundedIteratorTest.java

Content: 

/** 

 * Test the case if a negative  {@code max} is passed to theconstructor.  {@link IllegalArgumentException} is expected.

 */

@Test public void testNegativeMax(){

  try {

    new BoundedIterator<>(testList.iterator(),3,-1);

    fail("Expected IllegalArgumentException.");

  }

 catch (  final IllegalArgumentException iae) {

  }

}

Location: BoundedIteratorTest.java

Content: 

public BoundedIteratorTest(final String testName){

  super(testName);

}

Location: BoundedIteratorTest.java

Content: 

/** 

 * Test a decorated iterator bounded such that the first element returned is at an index greater its first element, and the last element returned is at an index less than its last element.

 */

@Test public void testBounded(){

  final Iterator<E> iter=new BoundedIterator<>(testList.iterator(),2,4);

  assertTrue(iter.hasNext());

  assertEquals("c",iter.next());

  assertTrue(iter.hasNext());

  assertEquals("d",iter.next());

  assertTrue(iter.hasNext());

  assertEquals("e",iter.next());

  assertTrue(iter.hasNext());

  assertEquals("f",iter.next());

  assertFalse(iter.hasNext());

  try {

    iter.next();

    fail("Expected NoSuchElementException.");

  }

 catch (  final NoSuchElementException nsee) {

  }

}

Location: BoundedIteratorTest.java

Content: 

/** 

 * Test a decorated iterator bounded to a  {@code max} of 0. TheBoundedIterator should behave as if there are no more elements to return, since it is technically an empty iterator.

 */

@Test public void testEmptyBounded(){

  final Iterator<E> iter=new BoundedIterator<>(testList.iterator(),3,0);

  assertFalse(iter.hasNext());

  try {

    iter.next();

    fail("Expected NoSuchElementException.");

  }

 catch (  final NoSuchElementException nsee) {

  }

}

Location: BoundedIteratorTest.java

Content: 

/** 

 * Test the case if the  {@code max} passed to the constructor isgreater than the size of the decorated iterator. The last element returned should be the same as the last element of the decorated iterator.

 */

@Test public void testMaxGreaterThanSize(){

  final Iterator<E> iter=new BoundedIterator<>(testList.iterator(),1,10);

  assertTrue(iter.hasNext());

  assertEquals("b",iter.next());

  assertTrue(iter.hasNext());

  assertEquals("c",iter.next());

  assertTrue(iter.hasNext());

  assertEquals("d",iter.next());

  assertTrue(iter.hasNext());

  assertEquals("e",iter.next());

  assertTrue(iter.hasNext());

  assertEquals("f",iter.next());

  assertTrue(iter.hasNext());

  assertEquals("g",iter.next());

  assertFalse(iter.hasNext());

  try {

    iter.next();

    fail("Expected NoSuchElementException.");

  }

 catch (  final NoSuchElementException nsee) {

  }

}

Location: BoundedIteratorTest.java

Content: 

/** 

 * Test the case if a negative  {@code max} is passed to theconstructor.  {@link IllegalArgumentException} is expected.

 */

@Test public void testNegativeMax(){

  try {

    new BoundedIterator<>(testList.iterator(),3,-1);

    fail("Expected IllegalArgumentException.");

  }

 catch (  final IllegalArgumentException iae) {

  }

}

