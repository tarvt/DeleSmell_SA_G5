Location: HashedMap.java

Content: 

/** 

 * Constructs a new empty map with default size and load factor.

 */

public HashedMap(){

  super(DEFAULT_CAPACITY,DEFAULT_LOAD_FACTOR,DEFAULT_THRESHOLD);

}

Location: HashedMap.java

Content: 

/** 

 * Constructs a new, empty map with the specified initial capacity.

 * @param initialCapacity  the initial capacity

 * @throws IllegalArgumentException if the initial capacity is negative

 */

public HashedMap(final int initialCapacity){

  super(initialCapacity);

}

Location: HashedMap.java

Content: 

/** 

 * Constructs a new, empty map with the specified initial capacity and load factor.

 * @param initialCapacity  the initial capacity

 * @param loadFactor  the load factor

 * @throws IllegalArgumentException if the initial capacity is negative

 * @throws IllegalArgumentException if the load factor is less than zero

 */

public HashedMap(final int initialCapacity,final float loadFactor){

  super(initialCapacity,loadFactor);

}

Location: HashedMap.java

Content: 

/** 

 * Constructor copying elements from another map.

 * @param map  the map to copy

 * @throws NullPointerException if the map is null

 */

public HashedMap(final Map<? extends K,? extends V> map){

  super(map);

}

Location: HashedMap.java

Content: 

/** 

 * Constructs a new empty map with default size and load factor.

 */

public HashedMap(){

  super(DEFAULT_CAPACITY,DEFAULT_LOAD_FACTOR,DEFAULT_THRESHOLD);

}

Location: HashedMap.java

Content: 

/** 

 * Constructs a new, empty map with the specified initial capacity.

 * @param initialCapacity  the initial capacity

 * @throws IllegalArgumentException if the initial capacity is negative

 */

public HashedMap(final int initialCapacity){

  super(initialCapacity);

}

Location: HashedMap.java

Content: 

/** 

 * Constructs a new, empty map with the specified initial capacity and load factor.

 * @param initialCapacity  the initial capacity

 * @param loadFactor  the load factor

 * @throws IllegalArgumentException if the initial capacity is negative

 * @throws IllegalArgumentException if the load factor is less than zero

 */

public HashedMap(final int initialCapacity,final float loadFactor){

  super(initialCapacity,loadFactor);

}

Location: HashedMap.java

Content: 

/** 

 * Constructor copying elements from another map.

 * @param map  the map to copy

 * @throws NullPointerException if the map is null

 */

public HashedMap(final Map<? extends K,? extends V> map){

  super(map);

}

