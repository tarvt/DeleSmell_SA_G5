Location: ObjectGraphIteratorTest.java

Content: 

public ObjectGraphIteratorTest(final String testName){

  super(testName);

}

Location: ObjectGraphIteratorTest.java

Content: 

public void testIteration_IteratorOfIterators(){

  final List<Iterator<String>> iteratorList=new ArrayList<>();

  iteratorList.add(list1.iterator());

  iteratorList.add(list2.iterator());

  iteratorList.add(list3.iterator());

  final Iterator<Object> it=new ObjectGraphIterator<>(iteratorList.iterator(),null);

  for (int i=0; i < 6; i++) {

    assertTrue(it.hasNext());

    assertEquals(testArray[i],it.next());

  }

  assertFalse(it.hasNext());

}

Location: ObjectGraphIteratorTest.java

Content: 

public void testIteration_IteratorOfIteratorsWithEmptyIterators(){

  final List<Iterator<String>> iteratorList=new ArrayList<>();

  iteratorList.add(IteratorUtils.<String>emptyIterator());

  iteratorList.add(list1.iterator());

  iteratorList.add(IteratorUtils.<String>emptyIterator());

  iteratorList.add(list2.iterator());

  iteratorList.add(IteratorUtils.<String>emptyIterator());

  iteratorList.add(list3.iterator());

  iteratorList.add(IteratorUtils.<String>emptyIterator());

  final Iterator<Object> it=new ObjectGraphIterator<>(iteratorList.iterator(),null);

  for (int i=0; i < 6; i++) {

    assertTrue(it.hasNext());

    assertEquals(testArray[i],it.next());

  }

  assertFalse(it.hasNext());

}

Location: ObjectGraphIteratorTest.java

Content: 

public void testIteration_RootNoTransformer(){

  final Forest forest=new Forest();

  final Iterator<Object> it=new ObjectGraphIterator<>(forest,null);

  assertTrue(it.hasNext());

  assertSame(forest,it.next());

  assertFalse(it.hasNext());

  try {

    it.next();

    fail();

  }

 catch (  final NoSuchElementException ex) {

  }

}

Location: ObjectGraphIteratorTest.java

Content: 

public void testIteration_RootNull(){

  final Iterator<Object> it=new ObjectGraphIterator<>(null,null);

  assertFalse(it.hasNext());

  try {

    it.next();

    fail();

  }

 catch (  final NoSuchElementException ex) {

  }

  try {

    it.remove();

    fail();

  }

 catch (  final IllegalStateException ex) {

  }

}

Location: ObjectGraphIteratorTest.java

Content: 

public void testIteration_Transformed1(){

  final Forest forest=new Forest();

  final Leaf l1=forest.addTree().addBranch().addLeaf();

  final Iterator<Object> it=new ObjectGraphIterator<>(forest,new LeafFinder());

  assertTrue(it.hasNext());

  assertSame(l1,it.next());

  assertFalse(it.hasNext());

  try {

    it.next();

    fail();

  }

 catch (  final NoSuchElementException ex) {

  }

}

Location: ObjectGraphIteratorTest.java

Content: 

public void testIteration_Transformed2(){

  final Forest forest=new Forest();

  forest.addTree();

  forest.addTree();

  forest.addTree();

  final Branch b1=forest.getTree(0).addBranch();

  final Branch b2=forest.getTree(0).addBranch();

  final Branch b3=forest.getTree(2).addBranch();

  forest.getTree(2).addBranch();

  final Branch b5=forest.getTree(2).addBranch();

  final Leaf l1=b1.addLeaf();

  final Leaf l2=b1.addLeaf();

  final Leaf l3=b2.addLeaf();

  final Leaf l4=b3.addLeaf();

  final Leaf l5=b5.addLeaf();

  final Iterator<Object> it=new ObjectGraphIterator<>(forest,new LeafFinder());

  assertTrue(it.hasNext());

  assertSame(l1,it.next());

  assertTrue(it.hasNext());

  assertSame(l2,it.next());

  assertTrue(it.hasNext());

  assertSame(l3,it.next());

  assertTrue(it.hasNext());

  assertSame(l4,it.next());

  assertTrue(it.hasNext());

  assertSame(l5,it.next());

  assertFalse(it.hasNext());

  try {

    it.next();

    fail();

  }

 catch (  final NoSuchElementException ex) {

  }

}

Location: ObjectGraphIteratorTest.java

Content: 

public void testIteration_Transformed3(){

  final Forest forest=new Forest();

  forest.addTree();

  forest.addTree();

  forest.addTree();

  final Branch b1=forest.getTree(1).addBranch();

  final Branch b2=forest.getTree(1).addBranch();

  final Branch b3=forest.getTree(2).addBranch();

  final Branch b4=forest.getTree(2).addBranch();

  forest.getTree(2).addBranch();

  final Leaf l1=b1.addLeaf();

  final Leaf l2=b1.addLeaf();

  final Leaf l3=b2.addLeaf();

  final Leaf l4=b3.addLeaf();

  final Leaf l5=b4.addLeaf();

  final Iterator<Object> it=new ObjectGraphIterator<>(forest,new LeafFinder());

  assertTrue(it.hasNext());

  assertSame(l1,it.next());

  assertTrue(it.hasNext());

  assertSame(l2,it.next());

  assertTrue(it.hasNext());

  assertSame(l3,it.next());

  assertTrue(it.hasNext());

  assertSame(l4,it.next());

  assertTrue(it.hasNext());

  assertSame(l5,it.next());

  assertFalse(it.hasNext());

  try {

    it.next();

    fail();

  }

 catch (  final NoSuchElementException ex) {

  }

}

Location: ObjectGraphIteratorTest.java

Content: 

public void testIteratorConstructorIteration_Empty(){

  final List<Iterator<Object>> iteratorList=new ArrayList<>();

  final Iterator<Object> it=new ObjectGraphIterator<>(iteratorList.iterator());

  assertFalse(it.hasNext());

  try {

    it.next();

    fail();

  }

 catch (  final NoSuchElementException ex) {

  }

  try {

    it.remove();

    fail();

  }

 catch (  final IllegalStateException ex) {

  }

}

Location: ObjectGraphIteratorTest.java

Content: 

public void testIteratorConstructorIteration_Simple(){

  final List<Iterator<String>> iteratorList=new ArrayList<>();

  iteratorList.add(list1.iterator());

  iteratorList.add(list2.iterator());

  iteratorList.add(list3.iterator());

  final Iterator<Object> it=new ObjectGraphIterator<>(iteratorList.iterator());

  for (int i=0; i < 6; i++) {

    assertTrue(it.hasNext());

    assertEquals(testArray[i],it.next());

  }

  assertFalse(it.hasNext());

  try {

    it.next();

    fail();

  }

 catch (  final NoSuchElementException ex) {

  }

}

Location: ObjectGraphIteratorTest.java

Content: 

public void testIteratorConstructorIteration_SimpleNoHasNext(){

  final List<Iterator<String>> iteratorList=new ArrayList<>();

  iteratorList.add(list1.iterator());

  iteratorList.add(list2.iterator());

  iteratorList.add(list3.iterator());

  final Iterator<Object> it=new ObjectGraphIterator<>(iteratorList.iterator());

  for (int i=0; i < 6; i++) {

    assertEquals(testArray[i],it.next());

  }

  try {

    it.next();

    fail();

  }

 catch (  final NoSuchElementException ex) {

  }

}

Location: ObjectGraphIteratorTest.java

Content: 

public void testIteratorConstructorIteration_WithEmptyIterators(){

  final List<Iterator<String>> iteratorList=new ArrayList<>();

  iteratorList.add(IteratorUtils.<String>emptyIterator());

  iteratorList.add(list1.iterator());

  iteratorList.add(IteratorUtils.<String>emptyIterator());

  iteratorList.add(list2.iterator());

  iteratorList.add(IteratorUtils.<String>emptyIterator());

  iteratorList.add(list3.iterator());

  iteratorList.add(IteratorUtils.<String>emptyIterator());

  final Iterator<Object> it=new ObjectGraphIterator<>(iteratorList.iterator());

  for (int i=0; i < 6; i++) {

    assertTrue(it.hasNext());

    assertEquals(testArray[i],it.next());

  }

  assertFalse(it.hasNext());

  try {

    it.next();

    fail();

  }

 catch (  final NoSuchElementException ex) {

  }

}

Location: ObjectGraphIteratorTest.java

Content: 

public void testIteratorConstructorRemove(){

  final List<Iterator<String>> iteratorList=new ArrayList<>();

  iteratorList.add(list1.iterator());

  iteratorList.add(list2.iterator());

  iteratorList.add(list3.iterator());

  final Iterator<Object> it=new ObjectGraphIterator<>(iteratorList.iterator());

  for (int i=0; i < 6; i++) {

    assertEquals(testArray[i],it.next());

    it.remove();

  }

  assertFalse(it.hasNext());

  assertEquals(0,list1.size());

  assertEquals(0,list2.size());

  assertEquals(0,list3.size());

}

Location: ObjectGraphIteratorTest.java

Content: 

public void testIteratorConstructor_null1(){

  final Iterator<Object> it=new ObjectGraphIterator<>(null);

  assertFalse(it.hasNext());

  try {

    it.next();

    fail();

  }

 catch (  final NoSuchElementException ex) {

  }

  try {

    it.remove();

    fail();

  }

 catch (  final IllegalStateException ex) {

  }

}

Location: ObjectGraphIteratorTest.java

Content: 

public void testIteratorConstructor_null_next(){

  final Iterator<Object> it=new ObjectGraphIterator<>(null);

  try {

    it.next();

    fail();

  }

 catch (  final NoSuchElementException ex) {

  }

}

Location: ObjectGraphIteratorTest.java

Content: 

public void testIteratorConstructor_null_remove(){

  final Iterator<Object> it=new ObjectGraphIterator<>(null);

  try {

    it.remove();

    fail();

  }

 catch (  final IllegalStateException ex) {

  }

}

Location: ObjectGraphIteratorTest.java

Content: 

public ObjectGraphIteratorTest(final String testName){

  super(testName);

}

Location: ObjectGraphIteratorTest.java

Content: 

public void testIteration_IteratorOfIterators(){

  final List<Iterator<String>> iteratorList=new ArrayList<>();

  iteratorList.add(list1.iterator());

  iteratorList.add(list2.iterator());

  iteratorList.add(list3.iterator());

  final Iterator<Object> it=new ObjectGraphIterator<>(iteratorList.iterator(),null);

  for (int i=0; i < 6; i++) {

    assertTrue(it.hasNext());

    assertEquals(testArray[i],it.next());

  }

  assertFalse(it.hasNext());

}

Location: ObjectGraphIteratorTest.java

Content: 

public void testIteration_IteratorOfIteratorsWithEmptyIterators(){

  final List<Iterator<String>> iteratorList=new ArrayList<>();

  iteratorList.add(IteratorUtils.<String>emptyIterator());

  iteratorList.add(list1.iterator());

  iteratorList.add(IteratorUtils.<String>emptyIterator());

  iteratorList.add(list2.iterator());

  iteratorList.add(IteratorUtils.<String>emptyIterator());

  iteratorList.add(list3.iterator());

  iteratorList.add(IteratorUtils.<String>emptyIterator());

  final Iterator<Object> it=new ObjectGraphIterator<>(iteratorList.iterator(),null);

  for (int i=0; i < 6; i++) {

    assertTrue(it.hasNext());

    assertEquals(testArray[i],it.next());

  }

  assertFalse(it.hasNext());

}

Location: ObjectGraphIteratorTest.java

Content: 

public void testIteration_RootNoTransformer(){

  final Forest forest=new Forest();

  final Iterator<Object> it=new ObjectGraphIterator<>(forest,null);

  assertTrue(it.hasNext());

  assertSame(forest,it.next());

  assertFalse(it.hasNext());

  try {

    it.next();

    fail();

  }

 catch (  final NoSuchElementException ex) {

  }

}

Location: ObjectGraphIteratorTest.java

Content: 

public void testIteration_RootNull(){

  final Iterator<Object> it=new ObjectGraphIterator<>(null,null);

  assertFalse(it.hasNext());

  try {

    it.next();

    fail();

  }

 catch (  final NoSuchElementException ex) {

  }

  try {

    it.remove();

    fail();

  }

 catch (  final IllegalStateException ex) {

  }

}

Location: ObjectGraphIteratorTest.java

Content: 

public void testIteration_Transformed1(){

  final Forest forest=new Forest();

  final Leaf l1=forest.addTree().addBranch().addLeaf();

  final Iterator<Object> it=new ObjectGraphIterator<>(forest,new LeafFinder());

  assertTrue(it.hasNext());

  assertSame(l1,it.next());

  assertFalse(it.hasNext());

  try {

    it.next();

    fail();

  }

 catch (  final NoSuchElementException ex) {

  }

}

Location: ObjectGraphIteratorTest.java

Content: 

public void testIteration_Transformed2(){

  final Forest forest=new Forest();

  forest.addTree();

  forest.addTree();

  forest.addTree();

  final Branch b1=forest.getTree(0).addBranch();

  final Branch b2=forest.getTree(0).addBranch();

  final Branch b3=forest.getTree(2).addBranch();

  forest.getTree(2).addBranch();

  final Branch b5=forest.getTree(2).addBranch();

  final Leaf l1=b1.addLeaf();

  final Leaf l2=b1.addLeaf();

  final Leaf l3=b2.addLeaf();

  final Leaf l4=b3.addLeaf();

  final Leaf l5=b5.addLeaf();

  final Iterator<Object> it=new ObjectGraphIterator<>(forest,new LeafFinder());

  assertTrue(it.hasNext());

  assertSame(l1,it.next());

  assertTrue(it.hasNext());

  assertSame(l2,it.next());

  assertTrue(it.hasNext());

  assertSame(l3,it.next());

  assertTrue(it.hasNext());

  assertSame(l4,it.next());

  assertTrue(it.hasNext());

  assertSame(l5,it.next());

  assertFalse(it.hasNext());

  try {

    it.next();

    fail();

  }

 catch (  final NoSuchElementException ex) {

  }

}

Location: ObjectGraphIteratorTest.java

Content: 

public void testIteration_Transformed3(){

  final Forest forest=new Forest();

  forest.addTree();

  forest.addTree();

  forest.addTree();

  final Branch b1=forest.getTree(1).addBranch();

  final Branch b2=forest.getTree(1).addBranch();

  final Branch b3=forest.getTree(2).addBranch();

  final Branch b4=forest.getTree(2).addBranch();

  forest.getTree(2).addBranch();

  final Leaf l1=b1.addLeaf();

  final Leaf l2=b1.addLeaf();

  final Leaf l3=b2.addLeaf();

  final Leaf l4=b3.addLeaf();

  final Leaf l5=b4.addLeaf();

  final Iterator<Object> it=new ObjectGraphIterator<>(forest,new LeafFinder());

  assertTrue(it.hasNext());

  assertSame(l1,it.next());

  assertTrue(it.hasNext());

  assertSame(l2,it.next());

  assertTrue(it.hasNext());

  assertSame(l3,it.next());

  assertTrue(it.hasNext());

  assertSame(l4,it.next());

  assertTrue(it.hasNext());

  assertSame(l5,it.next());

  assertFalse(it.hasNext());

  try {

    it.next();

    fail();

  }

 catch (  final NoSuchElementException ex) {

  }

}

Location: ObjectGraphIteratorTest.java

Content: 

public void testIteratorConstructorIteration_Empty(){

  final List<Iterator<Object>> iteratorList=new ArrayList<>();

  final Iterator<Object> it=new ObjectGraphIterator<>(iteratorList.iterator());

  assertFalse(it.hasNext());

  try {

    it.next();

    fail();

  }

 catch (  final NoSuchElementException ex) {

  }

  try {

    it.remove();

    fail();

  }

 catch (  final IllegalStateException ex) {

  }

}

Location: ObjectGraphIteratorTest.java

Content: 

public void testIteratorConstructorIteration_Simple(){

  final List<Iterator<String>> iteratorList=new ArrayList<>();

  iteratorList.add(list1.iterator());

  iteratorList.add(list2.iterator());

  iteratorList.add(list3.iterator());

  final Iterator<Object> it=new ObjectGraphIterator<>(iteratorList.iterator());

  for (int i=0; i < 6; i++) {

    assertTrue(it.hasNext());

    assertEquals(testArray[i],it.next());

  }

  assertFalse(it.hasNext());

  try {

    it.next();

    fail();

  }

 catch (  final NoSuchElementException ex) {

  }

}

Location: ObjectGraphIteratorTest.java

Content: 

public void testIteratorConstructorIteration_SimpleNoHasNext(){

  final List<Iterator<String>> iteratorList=new ArrayList<>();

  iteratorList.add(list1.iterator());

  iteratorList.add(list2.iterator());

  iteratorList.add(list3.iterator());

  final Iterator<Object> it=new ObjectGraphIterator<>(iteratorList.iterator());

  for (int i=0; i < 6; i++) {

    assertEquals(testArray[i],it.next());

  }

  try {

    it.next();

    fail();

  }

 catch (  final NoSuchElementException ex) {

  }

}

Location: ObjectGraphIteratorTest.java

Content: 

public void testIteratorConstructorIteration_WithEmptyIterators(){

  final List<Iterator<String>> iteratorList=new ArrayList<>();

  iteratorList.add(IteratorUtils.<String>emptyIterator());

  iteratorList.add(list1.iterator());

  iteratorList.add(IteratorUtils.<String>emptyIterator());

  iteratorList.add(list2.iterator());

  iteratorList.add(IteratorUtils.<String>emptyIterator());

  iteratorList.add(list3.iterator());

  iteratorList.add(IteratorUtils.<String>emptyIterator());

  final Iterator<Object> it=new ObjectGraphIterator<>(iteratorList.iterator());

  for (int i=0; i < 6; i++) {

    assertTrue(it.hasNext());

    assertEquals(testArray[i],it.next());

  }

  assertFalse(it.hasNext());

  try {

    it.next();

    fail();

  }

 catch (  final NoSuchElementException ex) {

  }

}

Location: ObjectGraphIteratorTest.java

Content: 

public void testIteratorConstructorRemove(){

  final List<Iterator<String>> iteratorList=new ArrayList<>();

  iteratorList.add(list1.iterator());

  iteratorList.add(list2.iterator());

  iteratorList.add(list3.iterator());

  final Iterator<Object> it=new ObjectGraphIterator<>(iteratorList.iterator());

  for (int i=0; i < 6; i++) {

    assertEquals(testArray[i],it.next());

    it.remove();

  }

  assertFalse(it.hasNext());

  assertEquals(0,list1.size());

  assertEquals(0,list2.size());

  assertEquals(0,list3.size());

}

Location: ObjectGraphIteratorTest.java

Content: 

public void testIteratorConstructor_null1(){

  final Iterator<Object> it=new ObjectGraphIterator<>(null);

  assertFalse(it.hasNext());

  try {

    it.next();

    fail();

  }

 catch (  final NoSuchElementException ex) {

  }

  try {

    it.remove();

    fail();

  }

 catch (  final IllegalStateException ex) {

  }

}

Location: ObjectGraphIteratorTest.java

Content: 

public void testIteratorConstructor_null_next(){

  final Iterator<Object> it=new ObjectGraphIterator<>(null);

  try {

    it.next();

    fail();

  }

 catch (  final NoSuchElementException ex) {

  }

}

Location: ObjectGraphIteratorTest.java

Content: 

public void testIteratorConstructor_null_remove(){

  final Iterator<Object> it=new ObjectGraphIterator<>(null);

  try {

    it.remove();

    fail();

  }

 catch (  final IllegalStateException ex) {

  }

}

