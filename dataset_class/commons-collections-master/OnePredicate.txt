Location: OnePredicate.java

Content: 

/** 

 * Factory to create the predicate.

 * @param < T > the type that the predicate queries

 * @param predicates  the predicates to check, cloned, not null

 * @return the {@code one} predicate

 * @throws NullPointerException if the predicates array is null

 * @throws NullPointerException if any predicate in the array is null

 */

public static <T>Predicate<T> onePredicate(final Collection<? extends Predicate<? super T>> predicates){

  final Predicate<? super T>[] preds=FunctorUtils.validate(predicates);

  return new OnePredicate<>(preds);

}

Location: OnePredicate.java

Content: 

/** 

 * Constructor that performs no validation. Use  {@code onePredicate} if you want that.

 * @param predicates  the predicates to check, not cloned, not null

 */

public OnePredicate(final Predicate<? super T>... predicates){

  super(predicates);

}

Location: OnePredicate.java

Content: 

/** 

 * Factory to create the predicate.

 * @param < T > the type that the predicate queries

 * @param predicates  the predicates to check, cloned, not null

 * @return the {@code one} predicate

 * @throws NullPointerException if the predicates array is null

 * @throws NullPointerException if any predicate in the array is null

 */

public static <T>Predicate<T> onePredicate(final Collection<? extends Predicate<? super T>> predicates){

  final Predicate<? super T>[] preds=FunctorUtils.validate(predicates);

  return new OnePredicate<>(preds);

}

Location: OnePredicate.java

Content: 

/** 

 * Constructor that performs no validation. Use  {@code onePredicate} if you want that.

 * @param predicates  the predicates to check, not cloned, not null

 */

public OnePredicate(final Predicate<? super T>... predicates){

  super(predicates);

}

