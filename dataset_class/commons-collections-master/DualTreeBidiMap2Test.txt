Location: DualTreeBidiMap2Test.java

Content: 

public DualTreeBidiMap2Test(final String testName){

  super(testName);

}

Location: DualTreeBidiMap2Test.java

Content: 

public void testCollections364() throws Exception {

  final DualTreeBidiMap<String,Integer> original=new DualTreeBidiMap<>(String.CASE_INSENSITIVE_ORDER,new IntegerComparator());

  final ByteArrayOutputStream buffer=new ByteArrayOutputStream();

  final ObjectOutputStream out=new ObjectOutputStream(buffer);

  out.writeObject(original);

  out.close();

  final ObjectInputStream in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));

  @SuppressWarnings("unchecked") final DualTreeBidiMap<String,Integer> deserialized=(DualTreeBidiMap<String,Integer>)in.readObject();

  in.close();

  assertNotNull(original.comparator());

  assertNotNull(deserialized.comparator());

  assertEquals(original.comparator().getClass(),deserialized.comparator().getClass());

  assertEquals(original.valueComparator().getClass(),deserialized.valueComparator().getClass());

}

Location: DualTreeBidiMap2Test.java

Content: 

public void testComparator2(){

  final DualTreeBidiMap<String,Integer> dtbm=new DualTreeBidiMap<>(String.CASE_INSENSITIVE_ORDER,null);

  dtbm.put("two",0);

  dtbm.put("one",1);

  assertEquals("one",dtbm.firstKey());

  assertEquals("two",dtbm.lastKey());

}

Location: DualTreeBidiMap2Test.java

Content: 

public void testSerializeDeserializeCheckComparator() throws Exception {

  final SortedBidiMap<?,?> obj=makeObject();

  if (obj instanceof Serializable && isTestSerialization()) {

    final ByteArrayOutputStream buffer=new ByteArrayOutputStream();

    final ObjectOutputStream out=new ObjectOutputStream(buffer);

    out.writeObject(obj);

    out.close();

    final ObjectInputStream in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));

    final Object dest=in.readObject();

    in.close();

    final SortedBidiMap<?,?> bidi=(SortedBidiMap<?,?>)dest;

    assertNotNull(obj.comparator());

    assertNotNull(bidi.comparator());

    assertTrue(bidi.comparator() instanceof ReverseComparator);

  }

}

Location: DualTreeBidiMap2Test.java

Content: 

public DualTreeBidiMap2Test(final String testName){

  super(testName);

}

Location: DualTreeBidiMap2Test.java

Content: 

public void testCollections364() throws Exception {

  final DualTreeBidiMap<String,Integer> original=new DualTreeBidiMap<>(String.CASE_INSENSITIVE_ORDER,new IntegerComparator());

  final ByteArrayOutputStream buffer=new ByteArrayOutputStream();

  final ObjectOutputStream out=new ObjectOutputStream(buffer);

  out.writeObject(original);

  out.close();

  final ObjectInputStream in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));

  @SuppressWarnings("unchecked") final DualTreeBidiMap<String,Integer> deserialized=(DualTreeBidiMap<String,Integer>)in.readObject();

  in.close();

  assertNotNull(original.comparator());

  assertNotNull(deserialized.comparator());

  assertEquals(original.comparator().getClass(),deserialized.comparator().getClass());

  assertEquals(original.valueComparator().getClass(),deserialized.valueComparator().getClass());

}

Location: DualTreeBidiMap2Test.java

Content: 

public void testComparator2(){

  final DualTreeBidiMap<String,Integer> dtbm=new DualTreeBidiMap<>(String.CASE_INSENSITIVE_ORDER,null);

  dtbm.put("two",0);

  dtbm.put("one",1);

  assertEquals("one",dtbm.firstKey());

  assertEquals("two",dtbm.lastKey());

}

Location: DualTreeBidiMap2Test.java

Content: 

public void testSerializeDeserializeCheckComparator() throws Exception {

  final SortedBidiMap<?,?> obj=makeObject();

  if (obj instanceof Serializable && isTestSerialization()) {

    final ByteArrayOutputStream buffer=new ByteArrayOutputStream();

    final ObjectOutputStream out=new ObjectOutputStream(buffer);

    out.writeObject(obj);

    out.close();

    final ObjectInputStream in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));

    final Object dest=in.readObject();

    in.close();

    final SortedBidiMap<?,?> bidi=(SortedBidiMap<?,?>)dest;

    assertNotNull(obj.comparator());

    assertNotNull(bidi.comparator());

    assertTrue(bidi.comparator() instanceof ReverseComparator);

  }

}

