Location: TransformedSplitMap.java

Content: 

/** 

 * Override to transform the value when using  {@code setValue}.

 * @param value the value to transform

 * @return the transformed value

 */

protected V checkSetValue(final U value){

  return valueTransformer.transform(value);

}

Location: TransformedSplitMap.java

Content: 

@Override public V put(final J key,final U value){

  return decorated().put(transformKey(key),transformValue(value));

}

Location: TransformedSplitMap.java

Content: 

/** 

 * Constructor that wraps (not copies). <p> If there are any elements already in the collection being decorated, they are NOT transformed.

 * @param map the map to decorate, must not be null

 * @param keyTransformer the transformer to use for key conversion, must not be null

 * @param valueTransformer the transformer to use for value conversion, must not be null

 * @throws NullPointerException if map or either of the transformers is null

 */

protected TransformedSplitMap(final Map<K,V> map,final Transformer<? super J,? extends K> keyTransformer,final Transformer<? super U,? extends V> valueTransformer){

  super(map);

  this.keyTransformer=Objects.requireNonNull(keyTransformer,"keyTransformer");

  this.valueTransformer=Objects.requireNonNull(valueTransformer,"valueTransformer");

}

Location: TransformedSplitMap.java

Content: 

/** 

 * Factory method to create a transforming map. <p> If there are any elements already in the map being decorated, they are NOT transformed.

 * @param < J >  the input key type

 * @param < K >  the output key type

 * @param < U >  the input value type

 * @param < V >  the output value type

 * @param map the map to decorate, must not be null

 * @param keyTransformer the transformer to use for key conversion, must not be null

 * @param valueTransformer the transformer to use for value conversion, must not be null

 * @return a new transformed map

 * @throws NullPointerException if map or either of the transformers is null

 */

public static <J,K,U,V>TransformedSplitMap<J,K,U,V> transformingMap(final Map<K,V> map,final Transformer<? super J,? extends K> keyTransformer,final Transformer<? super U,? extends V> valueTransformer){

  return new TransformedSplitMap<>(map,keyTransformer,valueTransformer);

}

Location: TransformedSplitMap.java

Content: 

/** 

 * Transforms a key. <p> The transformer itself may throw an exception if necessary.

 * @param object the object to transform

 * @return the transformed object

 */

protected K transformKey(final J object){

  return keyTransformer.transform(object);

}

Location: TransformedSplitMap.java

Content: 

/** 

 * Transforms a map. <p> The transformer itself may throw an exception if necessary.

 * @param map the map to transform

 * @return the transformed object

 */

@SuppressWarnings("unchecked") protected Map<K,V> transformMap(final Map<? extends J,? extends U> map){

  if (map.isEmpty()) {

    return (Map<K,V>)map;

  }

  final Map<K,V> result=new LinkedMap<>(map.size());

  for (  final Map.Entry<? extends J,? extends U> entry : map.entrySet()) {

    result.put(transformKey(entry.getKey()),transformValue(entry.getValue()));

  }

  return result;

}

Location: TransformedSplitMap.java

Content: 

/** 

 * Transforms a value. <p> The transformer itself may throw an exception if necessary.

 * @param object the object to transform

 * @return the transformed object

 */

protected V transformValue(final U object){

  return valueTransformer.transform(object);

}

Location: TransformedSplitMap.java

Content: 

/** 

 * Override to transform the value when using  {@code setValue}.

 * @param value the value to transform

 * @return the transformed value

 */

protected V checkSetValue(final U value){

  return valueTransformer.transform(value);

}

Location: TransformedSplitMap.java

Content: 

@Override public V put(final J key,final U value){

  return decorated().put(transformKey(key),transformValue(value));

}

Location: TransformedSplitMap.java

Content: 

/** 

 * Constructor that wraps (not copies). <p> If there are any elements already in the collection being decorated, they are NOT transformed.

 * @param map the map to decorate, must not be null

 * @param keyTransformer the transformer to use for key conversion, must not be null

 * @param valueTransformer the transformer to use for value conversion, must not be null

 * @throws NullPointerException if map or either of the transformers is null

 */

protected TransformedSplitMap(final Map<K,V> map,final Transformer<? super J,? extends K> keyTransformer,final Transformer<? super U,? extends V> valueTransformer){

  super(map);

  this.keyTransformer=Objects.requireNonNull(keyTransformer,"keyTransformer");

  this.valueTransformer=Objects.requireNonNull(valueTransformer,"valueTransformer");

}

Location: TransformedSplitMap.java

Content: 

/** 

 * Factory method to create a transforming map. <p> If there are any elements already in the map being decorated, they are NOT transformed.

 * @param < J >  the input key type

 * @param < K >  the output key type

 * @param < U >  the input value type

 * @param < V >  the output value type

 * @param map the map to decorate, must not be null

 * @param keyTransformer the transformer to use for key conversion, must not be null

 * @param valueTransformer the transformer to use for value conversion, must not be null

 * @return a new transformed map

 * @throws NullPointerException if map or either of the transformers is null

 */

public static <J,K,U,V>TransformedSplitMap<J,K,U,V> transformingMap(final Map<K,V> map,final Transformer<? super J,? extends K> keyTransformer,final Transformer<? super U,? extends V> valueTransformer){

  return new TransformedSplitMap<>(map,keyTransformer,valueTransformer);

}

Location: TransformedSplitMap.java

Content: 

/** 

 * Transforms a key. <p> The transformer itself may throw an exception if necessary.

 * @param object the object to transform

 * @return the transformed object

 */

protected K transformKey(final J object){

  return keyTransformer.transform(object);

}

Location: TransformedSplitMap.java

Content: 

/** 

 * Transforms a map. <p> The transformer itself may throw an exception if necessary.

 * @param map the map to transform

 * @return the transformed object

 */

@SuppressWarnings("unchecked") protected Map<K,V> transformMap(final Map<? extends J,? extends U> map){

  if (map.isEmpty()) {

    return (Map<K,V>)map;

  }

  final Map<K,V> result=new LinkedMap<>(map.size());

  for (  final Map.Entry<? extends J,? extends U> entry : map.entrySet()) {

    result.put(transformKey(entry.getKey()),transformValue(entry.getValue()));

  }

  return result;

}

Location: TransformedSplitMap.java

Content: 

/** 

 * Transforms a value. <p> The transformer itself may throw an exception if necessary.

 * @param object the object to transform

 * @return the transformed object

 */

protected V transformValue(final U object){

  return valueTransformer.transform(object);

}

