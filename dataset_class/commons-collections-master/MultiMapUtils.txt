Location: MultiMapUtils.java

Content: 

/** 

 * Returns an immutable empty  {@code MultiValuedMap} if the argument is{@code null}, or the argument itself otherwise.

 * @param < K > the type of key in the map

 * @param < V > the type of value in the map

 * @param map  the map, may be null

 * @return an empty {@link MultiValuedMap} if the argument is null

 */

@SuppressWarnings("unchecked") public static <K,V>MultiValuedMap<K,V> emptyIfNull(final MultiValuedMap<K,V> map){

  return map == null ? EMPTY_MULTI_VALUED_MAP : map;

}

Location: MultiMapUtils.java

Content: 

/** 

 * Returns immutable EMPTY_MULTI_VALUED_MAP with generic type safety.

 * @param < K > the type of key in the map

 * @param < V > the type of value in the map

 * @return immutable and empty {@code MultiValuedMap}

 */

@SuppressWarnings("unchecked") public static <K,V>MultiValuedMap<K,V> emptyMultiValuedMap(){

  return EMPTY_MULTI_VALUED_MAP;

}

Location: MultiMapUtils.java

Content: 

/** 

 * Gets a Collection from  {@code MultiValuedMap} in a null-safe manner.

 * @param < K > the key type

 * @param < V > the value type

 * @param map  the {@link MultiValuedMap} to use

 * @param key  the key to look up

 * @return the Collection in the {@link MultiValuedMap}, or null if input map is null

 */

public static <K,V>Collection<V> getCollection(final MultiValuedMap<K,V> map,final K key){

  if (map != null) {

    return map.get(key);

  }

  return null;

}

Location: MultiMapUtils.java

Content: 

/** 

 * Gets a Bag from  {@code MultiValuedMap} in a null-safe manner.

 * @param < K > the key type

 * @param < V > the value type

 * @param map  the {@link MultiValuedMap} to use

 * @param key  the key to look up

 * @return the Collection in the {@link MultiValuedMap} as Bag, or null if input map is null

 */

public static <K,V>Bag<V> getValuesAsBag(final MultiValuedMap<K,V> map,final K key){

  if (map != null) {

    final Collection<V> col=map.get(key);

    if (col instanceof Bag) {

      return (Bag<V>)col;

    }

    return new HashBag<>(col);

  }

  return null;

}

Location: MultiMapUtils.java

Content: 

/** 

 * Gets a List from  {@code MultiValuedMap} in a null-safe manner.

 * @param < K > the key type

 * @param < V > the value type

 * @param map  the {@link MultiValuedMap} to use

 * @param key  the key to look up

 * @return the Collection in the {@link MultiValuedMap} as List, or null if input map is null

 */

public static <K,V>List<V> getValuesAsList(final MultiValuedMap<K,V> map,final K key){

  if (map != null) {

    final Collection<V> col=map.get(key);

    if (col instanceof List) {

      return (List<V>)col;

    }

    return new ArrayList<>(col);

  }

  return null;

}

Location: MultiMapUtils.java

Content: 

/** 

 * Gets a Set from  {@code MultiValuedMap} in a null-safe manner.

 * @param < K > the key type

 * @param < V > the value type

 * @param map  the {@link MultiValuedMap} to use

 * @param key  the key to look up

 * @return the Collection in the {@link MultiValuedMap} as Set, or null if input map is null

 */

public static <K,V>Set<V> getValuesAsSet(final MultiValuedMap<K,V> map,final K key){

  if (map != null) {

    final Collection<V> col=map.get(key);

    if (col instanceof Set) {

      return (Set<V>)col;

    }

    return new HashSet<>(col);

  }

  return null;

}

Location: MultiMapUtils.java

Content: 

/** 

 * Null-safe check if the specified  {@code MultiValuedMap} is empty.<p> If the provided map is null, returns true.

 * @param map  the map to check, may be null

 * @return true if the map is empty or null

 */

public static boolean isEmpty(final MultiValuedMap<?,?> map){

  return map == null || map.isEmpty();

}

Location: MultiMapUtils.java

Content: 

/** 

 * Don't allow instances.

 */

private MultiMapUtils(){

}

Location: MultiMapUtils.java

Content: 

/** 

 * Creates a  {@link ListValuedMap} with an {@link java.util.ArrayList ArrayList} ascollection class to store the values mapped to a key.

 * @param < K > the key type

 * @param < V > the value type

 * @return a new {@code ListValuedMap}

 */

public static <K,V>ListValuedMap<K,V> newListValuedHashMap(){

  return new ArrayListValuedHashMap<>();

}

Location: MultiMapUtils.java

Content: 

/** 

 * Creates a  {@link SetValuedMap} with an {@link java.util.HashSet HashSet} ascollection class to store the values mapped to a key.

 * @param < K > the key type

 * @param < V > the value type

 * @return a new {@link SetValuedMap}

 */

public static <K,V>SetValuedMap<K,V> newSetValuedHashMap(){

  return new HashSetValuedHashMap<>();

}

Location: MultiMapUtils.java

Content: 

/** 

 * Returns an immutable empty  {@code MultiValuedMap} if the argument is{@code null}, or the argument itself otherwise.

 * @param < K > the type of key in the map

 * @param < V > the type of value in the map

 * @param map  the map, may be null

 * @return an empty {@link MultiValuedMap} if the argument is null

 */

@SuppressWarnings("unchecked") public static <K,V>MultiValuedMap<K,V> emptyIfNull(final MultiValuedMap<K,V> map){

  return map == null ? EMPTY_MULTI_VALUED_MAP : map;

}

Location: MultiMapUtils.java

Content: 

/** 

 * Returns immutable EMPTY_MULTI_VALUED_MAP with generic type safety.

 * @param < K > the type of key in the map

 * @param < V > the type of value in the map

 * @return immutable and empty {@code MultiValuedMap}

 */

@SuppressWarnings("unchecked") public static <K,V>MultiValuedMap<K,V> emptyMultiValuedMap(){

  return EMPTY_MULTI_VALUED_MAP;

}

Location: MultiMapUtils.java

Content: 

/** 

 * Gets a Collection from  {@code MultiValuedMap} in a null-safe manner.

 * @param < K > the key type

 * @param < V > the value type

 * @param map  the {@link MultiValuedMap} to use

 * @param key  the key to look up

 * @return the Collection in the {@link MultiValuedMap}, or null if input map is null

 */

public static <K,V>Collection<V> getCollection(final MultiValuedMap<K,V> map,final K key){

  if (map != null) {

    return map.get(key);

  }

  return null;

}

Location: MultiMapUtils.java

Content: 

/** 

 * Gets a Bag from  {@code MultiValuedMap} in a null-safe manner.

 * @param < K > the key type

 * @param < V > the value type

 * @param map  the {@link MultiValuedMap} to use

 * @param key  the key to look up

 * @return the Collection in the {@link MultiValuedMap} as Bag, or null if input map is null

 */

public static <K,V>Bag<V> getValuesAsBag(final MultiValuedMap<K,V> map,final K key){

  if (map != null) {

    final Collection<V> col=map.get(key);

    if (col instanceof Bag) {

      return (Bag<V>)col;

    }

    return new HashBag<>(col);

  }

  return null;

}

Location: MultiMapUtils.java

Content: 

/** 

 * Gets a List from  {@code MultiValuedMap} in a null-safe manner.

 * @param < K > the key type

 * @param < V > the value type

 * @param map  the {@link MultiValuedMap} to use

 * @param key  the key to look up

 * @return the Collection in the {@link MultiValuedMap} as List, or null if input map is null

 */

public static <K,V>List<V> getValuesAsList(final MultiValuedMap<K,V> map,final K key){

  if (map != null) {

    final Collection<V> col=map.get(key);

    if (col instanceof List) {

      return (List<V>)col;

    }

    return new ArrayList<>(col);

  }

  return null;

}

Location: MultiMapUtils.java

Content: 

/** 

 * Gets a Set from  {@code MultiValuedMap} in a null-safe manner.

 * @param < K > the key type

 * @param < V > the value type

 * @param map  the {@link MultiValuedMap} to use

 * @param key  the key to look up

 * @return the Collection in the {@link MultiValuedMap} as Set, or null if input map is null

 */

public static <K,V>Set<V> getValuesAsSet(final MultiValuedMap<K,V> map,final K key){

  if (map != null) {

    final Collection<V> col=map.get(key);

    if (col instanceof Set) {

      return (Set<V>)col;

    }

    return new HashSet<>(col);

  }

  return null;

}

Location: MultiMapUtils.java

Content: 

/** 

 * Null-safe check if the specified  {@code MultiValuedMap} is empty.<p> If the provided map is null, returns true.

 * @param map  the map to check, may be null

 * @return true if the map is empty or null

 */

public static boolean isEmpty(final MultiValuedMap<?,?> map){

  return map == null || map.isEmpty();

}

Location: MultiMapUtils.java

Content: 

/** 

 * Don't allow instances.

 */

private MultiMapUtils(){

}

Location: MultiMapUtils.java

Content: 

/** 

 * Creates a  {@link ListValuedMap} with an {@link java.util.ArrayList ArrayList} ascollection class to store the values mapped to a key.

 * @param < K > the key type

 * @param < V > the value type

 * @return a new {@code ListValuedMap}

 */

public static <K,V>ListValuedMap<K,V> newListValuedHashMap(){

  return new ArrayListValuedHashMap<>();

}

Location: MultiMapUtils.java

Content: 

/** 

 * Creates a  {@link SetValuedMap} with an {@link java.util.HashSet HashSet} ascollection class to store the values mapped to a key.

 * @param < K > the key type

 * @param < V > the value type

 * @return a new {@link SetValuedMap}

 */

public static <K,V>SetValuedMap<K,V> newSetValuedHashMap(){

  return new HashSetValuedHashMap<>();

}

