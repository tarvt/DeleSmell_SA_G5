Location: TestUtils.java

Content: 

/** 

 * Asserts that deserialization of the object returns the same object as the one that was serialized. <p> Effect of method call is the same as: {@code assertSameAfterSerialization(null, o)}.

 * @param o object that will be tested.

 * @see #assertSameAfterSerialization(String,Object)

 */

public static void assertSameAfterSerialization(final Object o){

  assertSameAfterSerialization(null,o);

}

Location: TestUtils.java

Content: 

/** 

 * Asserts that deserialization of the object returns the same object as the one that was serialized. Object is first serialized, then deserialized and finally check is performed to see if original and deserialized object references are the same. <p> This method is especially good for testing singleton pattern on classes that support serialization.

 * @param msg the identifying message for the {@code AssertionError}.

 * @param o object that will be tested.

 * @see #assertSameAfterSerialization(Object)

 */

public static void assertSameAfterSerialization(final String msg,final Object o){

  try {

    final ByteArrayOutputStream baos=new ByteArrayOutputStream();

    final ObjectOutputStream oos=new ObjectOutputStream(baos);

    oos.writeObject(o);

    oos.close();

    final InputStream is=new ByteArrayInputStream(baos.toByteArray());

    final ObjectInputStream ois=new ObjectInputStream(is);

    final Object object=ois.readObject();

    ois.close();

    assertSame(o,object,msg);

  }

 catch (  final IOException|ClassNotFoundException e) {

    throw new RuntimeException(e);

  }

}

Location: TestUtils.java

Content: 

private TestUtils(){

}

Location: TestUtils.java

Content: 

/** 

 * Asserts that deserialization of the object returns the same object as the one that was serialized. <p> Effect of method call is the same as: {@code assertSameAfterSerialization(null, o)}.

 * @param o object that will be tested.

 * @see #assertSameAfterSerialization(String,Object)

 */

public static void assertSameAfterSerialization(final Object o){

  assertSameAfterSerialization(null,o);

}

Location: TestUtils.java

Content: 

/** 

 * Asserts that deserialization of the object returns the same object as the one that was serialized. Object is first serialized, then deserialized and finally check is performed to see if original and deserialized object references are the same. <p> This method is especially good for testing singleton pattern on classes that support serialization.

 * @param msg the identifying message for the {@code AssertionError}.

 * @param o object that will be tested.

 * @see #assertSameAfterSerialization(Object)

 */

public static void assertSameAfterSerialization(final String msg,final Object o){

  try {

    final ByteArrayOutputStream baos=new ByteArrayOutputStream();

    final ObjectOutputStream oos=new ObjectOutputStream(baos);

    oos.writeObject(o);

    oos.close();

    final InputStream is=new ByteArrayInputStream(baos.toByteArray());

    final ObjectInputStream ois=new ObjectInputStream(is);

    final Object object=ois.readObject();

    ois.close();

    assertSame(o,object,msg);

  }

 catch (  final IOException|ClassNotFoundException e) {

    throw new RuntimeException(e);

  }

}

Location: TestUtils.java

Content: 

private TestUtils(){

}

