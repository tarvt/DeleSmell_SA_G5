Location: IteratorChain.java

Content: 

/** 

 * Add an Iterator to the end of the chain

 * @param iterator Iterator to add

 * @throws IllegalStateException if I've already started iterating

 * @throws NullPointerException if the iterator is null

 */

public void addIterator(final Iterator<? extends E> iterator){

  checkLocked();

  iteratorChain.add(Objects.requireNonNull(iterator,"iterator"));

}

Location: IteratorChain.java

Content: 

/** 

 * Checks whether the iterator chain is now locked and in use.

 */

private void checkLocked(){

  if (isLocked) {

    throw new UnsupportedOperationException("IteratorChain cannot be changed after the first use of a method from the Iterator interface");

  }

}

Location: IteratorChain.java

Content: 

/** 

 * Determine if modifications can still be made to the IteratorChain. IteratorChains cannot be modified once they have executed a method from the Iterator interface.

 * @return true if IteratorChain cannot be modified, false if it can

 */

public boolean isLocked(){

  return isLocked;

}

Location: IteratorChain.java

Content: 

/** 

 * Construct an IteratorChain with no Iterators. <p> You will normally use  {@link #addIterator(Iterator)} to add someiterators after using this constructor.

 */

public IteratorChain(){

}

Location: IteratorChain.java

Content: 

/** 

 * Constructs a new  {@code IteratorChain} over the collection ofiterators. <p> This method takes a collection of iterators. The newly constructed iterator will iterate through each one of the input iterators in turn.

 * @param iteratorChain the collection of iterators, not null

 * @throws NullPointerException if iterators collection is or contains null

 * @throws ClassCastException if iterators collection doesn't contain aniterator

 */

public IteratorChain(final Collection<Iterator<? extends E>> iteratorChain){

  for (  final Iterator<? extends E> iterator : iteratorChain) {

    addIterator(iterator);

  }

}

Location: IteratorChain.java

Content: 

/** 

 * Constructs a new  {@code IteratorChain} over the array of iterators.<p> This method takes an array of iterators. The newly constructed iterator will iterate through each one of the input iterators in turn.

 * @param iteratorChain the array of iterators, not null

 * @throws NullPointerException if iterators array is or contains null

 */

public IteratorChain(final Iterator<? extends E>... iteratorChain){

  for (  final Iterator<? extends E> element : iteratorChain) {

    addIterator(element);

  }

}

Location: IteratorChain.java

Content: 

/** 

 * Constructs a new  {@code IteratorChain} over the two given iterators.<p> This method takes two iterators. The newly constructed iterator will iterate through each one of the input iterators in turn.

 * @param first the first child iterator in the IteratorChain, not null

 * @param second the second child iterator in the IteratorChain, not null

 * @throws NullPointerException if either iterator is null

 */

public IteratorChain(final Iterator<? extends E> first,final Iterator<? extends E> second){

  addIterator(first);

  addIterator(second);

}

Location: IteratorChain.java

Content: 

/** 

 * Lock the chain so no more iterators can be added. This must be called from all Iterator interface methods.

 */

private void lockChain(){

  if (!isLocked) {

    isLocked=true;

  }

}

Location: IteratorChain.java

Content: 

/** 

 * Add an Iterator to the end of the chain

 * @param iterator Iterator to add

 * @throws IllegalStateException if I've already started iterating

 * @throws NullPointerException if the iterator is null

 */

public void addIterator(final Iterator<? extends E> iterator){

  checkLocked();

  iteratorChain.add(Objects.requireNonNull(iterator,"iterator"));

}

Location: IteratorChain.java

Content: 

/** 

 * Checks whether the iterator chain is now locked and in use.

 */

private void checkLocked(){

  if (isLocked) {

    throw new UnsupportedOperationException("IteratorChain cannot be changed after the first use of a method from the Iterator interface");

  }

}

Location: IteratorChain.java

Content: 

/** 

 * Determine if modifications can still be made to the IteratorChain. IteratorChains cannot be modified once they have executed a method from the Iterator interface.

 * @return true if IteratorChain cannot be modified, false if it can

 */

public boolean isLocked(){

  return isLocked;

}

Location: IteratorChain.java

Content: 

/** 

 * Construct an IteratorChain with no Iterators. <p> You will normally use  {@link #addIterator(Iterator)} to add someiterators after using this constructor.

 */

public IteratorChain(){

}

Location: IteratorChain.java

Content: 

/** 

 * Constructs a new  {@code IteratorChain} over the collection ofiterators. <p> This method takes a collection of iterators. The newly constructed iterator will iterate through each one of the input iterators in turn.

 * @param iteratorChain the collection of iterators, not null

 * @throws NullPointerException if iterators collection is or contains null

 * @throws ClassCastException if iterators collection doesn't contain aniterator

 */

public IteratorChain(final Collection<Iterator<? extends E>> iteratorChain){

  for (  final Iterator<? extends E> iterator : iteratorChain) {

    addIterator(iterator);

  }

}

Location: IteratorChain.java

Content: 

/** 

 * Constructs a new  {@code IteratorChain} over the array of iterators.<p> This method takes an array of iterators. The newly constructed iterator will iterate through each one of the input iterators in turn.

 * @param iteratorChain the array of iterators, not null

 * @throws NullPointerException if iterators array is or contains null

 */

public IteratorChain(final Iterator<? extends E>... iteratorChain){

  for (  final Iterator<? extends E> element : iteratorChain) {

    addIterator(element);

  }

}

Location: IteratorChain.java

Content: 

/** 

 * Constructs a new  {@code IteratorChain} over the two given iterators.<p> This method takes two iterators. The newly constructed iterator will iterate through each one of the input iterators in turn.

 * @param first the first child iterator in the IteratorChain, not null

 * @param second the second child iterator in the IteratorChain, not null

 * @throws NullPointerException if either iterator is null

 */

public IteratorChain(final Iterator<? extends E> first,final Iterator<? extends E> second){

  addIterator(first);

  addIterator(second);

}

Location: IteratorChain.java

Content: 

/** 

 * Lock the chain so no more iterators can be added. This must be called from all Iterator interface methods.

 */

private void lockChain(){

  if (!isLocked) {

    isLocked=true;

  }

}

