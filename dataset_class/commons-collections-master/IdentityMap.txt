Location: IdentityMap.java

Content: 

/** 

 * Clones the map without cloning the keys or values.

 * @return a shallow clone

 */

@Override public IdentityMap<K,V> clone(){

  return (IdentityMap<K,V>)super.clone();

}

Location: IdentityMap.java

Content: 

/** 

 * Creates an entry to store the data. This implementation creates an IdentityEntry instance.

 * @param next  the next entry in sequence

 * @param hashCode  the hash code to use

 * @param key  the key to store

 * @param value  the value to store

 * @return the newly created entry

 */

@Override protected IdentityEntry<K,V> createEntry(final HashEntry<K,V> next,final int hashCode,final K key,final V value){

  return new IdentityEntry<>(next,hashCode,key,value);

}

Location: IdentityMap.java

Content: 

/** 

 * Gets the hash code for the key specified. This implementation uses the identity hash code.

 * @param key  the key to get a hash code for

 * @return the hash code

 */

@Override protected int hash(final Object key){

  return System.identityHashCode(key);

}

Location: IdentityMap.java

Content: 

/** 

 * Constructs a new empty map with default size and load factor.

 */

public IdentityMap(){

  super(DEFAULT_CAPACITY,DEFAULT_LOAD_FACTOR,DEFAULT_THRESHOLD);

}

Location: IdentityMap.java

Content: 

/** 

 * Constructs a new, empty map with the specified initial capacity.

 * @param initialCapacity  the initial capacity

 * @throws IllegalArgumentException if the initial capacity is negative

 */

public IdentityMap(final int initialCapacity){

  super(initialCapacity);

}

Location: IdentityMap.java

Content: 

/** 

 * Constructs a new, empty map with the specified initial capacity and load factor.

 * @param initialCapacity  the initial capacity

 * @param loadFactor  the load factor

 * @throws IllegalArgumentException if the initial capacity is negative

 * @throws IllegalArgumentException if the load factor is less than zero

 */

public IdentityMap(final int initialCapacity,final float loadFactor){

  super(initialCapacity,loadFactor);

}

Location: IdentityMap.java

Content: 

/** 

 * Constructor copying elements from another map.

 * @param map  the map to copy

 * @throws NullPointerException if the map is null

 */

public IdentityMap(final Map<K,V> map){

  super(map);

}

Location: IdentityMap.java

Content: 

/** 

 * Compares two keys for equals. This implementation uses  {@code ==}.

 * @param key1  the first key to compare

 * @param key2  the second key to compare

 * @return true if equal by identity

 */

@Override protected boolean isEqualKey(final Object key1,final Object key2){

  return key1 == key2;

}

Location: IdentityMap.java

Content: 

/** 

 * Compares two values for equals. This implementation uses  {@code ==}.

 * @param value1  the first value to compare

 * @param value2  the second value to compare

 * @return true if equal by identity

 */

@Override protected boolean isEqualValue(final Object value1,final Object value2){

  return value1 == value2;

}

Location: IdentityMap.java

Content: 

/** 

 * Read the map in using a custom routine.

 */

private void readObject(final ObjectInputStream in) throws IOException, ClassNotFoundException {

  in.defaultReadObject();

  doReadObject(in);

}

Location: IdentityMap.java

Content: 

/** 

 * Write the map out using a custom routine.

 */

private void writeObject(final ObjectOutputStream out) throws IOException {

  out.defaultWriteObject();

  doWriteObject(out);

}

Location: IdentityMap.java

Content: 

/** 

 * Clones the map without cloning the keys or values.

 * @return a shallow clone

 */

@Override public IdentityMap<K,V> clone(){

  return (IdentityMap<K,V>)super.clone();

}

Location: IdentityMap.java

Content: 

/** 

 * Creates an entry to store the data. This implementation creates an IdentityEntry instance.

 * @param next  the next entry in sequence

 * @param hashCode  the hash code to use

 * @param key  the key to store

 * @param value  the value to store

 * @return the newly created entry

 */

@Override protected IdentityEntry<K,V> createEntry(final HashEntry<K,V> next,final int hashCode,final K key,final V value){

  return new IdentityEntry<>(next,hashCode,key,value);

}

Location: IdentityMap.java

Content: 

/** 

 * Gets the hash code for the key specified. This implementation uses the identity hash code.

 * @param key  the key to get a hash code for

 * @return the hash code

 */

@Override protected int hash(final Object key){

  return System.identityHashCode(key);

}

Location: IdentityMap.java

Content: 

/** 

 * Constructs a new empty map with default size and load factor.

 */

public IdentityMap(){

  super(DEFAULT_CAPACITY,DEFAULT_LOAD_FACTOR,DEFAULT_THRESHOLD);

}

Location: IdentityMap.java

Content: 

/** 

 * Constructs a new, empty map with the specified initial capacity.

 * @param initialCapacity  the initial capacity

 * @throws IllegalArgumentException if the initial capacity is negative

 */

public IdentityMap(final int initialCapacity){

  super(initialCapacity);

}

Location: IdentityMap.java

Content: 

/** 

 * Constructs a new, empty map with the specified initial capacity and load factor.

 * @param initialCapacity  the initial capacity

 * @param loadFactor  the load factor

 * @throws IllegalArgumentException if the initial capacity is negative

 * @throws IllegalArgumentException if the load factor is less than zero

 */

public IdentityMap(final int initialCapacity,final float loadFactor){

  super(initialCapacity,loadFactor);

}

Location: IdentityMap.java

Content: 

/** 

 * Constructor copying elements from another map.

 * @param map  the map to copy

 * @throws NullPointerException if the map is null

 */

public IdentityMap(final Map<K,V> map){

  super(map);

}

Location: IdentityMap.java

Content: 

/** 

 * Compares two keys for equals. This implementation uses  {@code ==}.

 * @param key1  the first key to compare

 * @param key2  the second key to compare

 * @return true if equal by identity

 */

@Override protected boolean isEqualKey(final Object key1,final Object key2){

  return key1 == key2;

}

Location: IdentityMap.java

Content: 

/** 

 * Compares two values for equals. This implementation uses  {@code ==}.

 * @param value1  the first value to compare

 * @param value2  the second value to compare

 * @return true if equal by identity

 */

@Override protected boolean isEqualValue(final Object value1,final Object value2){

  return value1 == value2;

}

Location: IdentityMap.java

Content: 

/** 

 * Read the map in using a custom routine.

 */

private void readObject(final ObjectInputStream in) throws IOException, ClassNotFoundException {

  in.defaultReadObject();

  doReadObject(in);

}

Location: IdentityMap.java

Content: 

/** 

 * Write the map out using a custom routine.

 */

private void writeObject(final ObjectOutputStream out) throws IOException {

  out.defaultWriteObject();

  doWriteObject(out);

}

