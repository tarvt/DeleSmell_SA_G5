Location: AbstractBidiMapTest.java

Content: 

public AbstractBidiMapTest(){

  super("Inverse");

}

Location: AbstractBidiMapTest.java

Content: 

public AbstractBidiMapTest(final String testName){

  super(testName);

}

Location: AbstractBidiMapTest.java

Content: 

public BulkTest bulkTestBidiMapIterator(){

  return new TestBidiMapIterator();

}

Location: AbstractBidiMapTest.java

Content: 

public BulkTest bulkTestInverseMap(){

  return new TestInverseBidiMap(this);

}

Location: AbstractBidiMapTest.java

Content: 

private void doTestGetKey(final BidiMap<?,?> map,final Object key,final Object value){

  assertEquals("Value not found for key.",value,map.get(key));

  assertEquals("Key not found for value.",key,map.getKey(value));

}

Location: AbstractBidiMapTest.java

Content: 

@SuppressWarnings("unchecked") private <T>void modifyEntrySet(final BidiMap<?,T> map){

  final Map.Entry<?,T> entry=map.entrySet().iterator().next();

  final Object key=entry.getKey();

  final Object oldValue=entry.getValue();

  final Object newValue="newValue";

  entry.setValue((T)newValue);

  assertEquals("Modifying entrySet did not affect underlying Map.",newValue,map.get(key));

  assertNull("Modifying entrySet did not affect inverse Map.",map.getKey(oldValue));

}

Location: AbstractBidiMapTest.java

Content: 

private void removeByEntrySet(final BidiMap<?,?> map,final Object key,final Object value){

  final Map<Object,Object> temp=new HashMap<>();

  temp.put(key,value);

  map.entrySet().remove(temp.entrySet().iterator().next());

  assertFalse("Key was not removed.",map.containsKey(key));

  assertFalse("Value was not removed.",map.containsValue(value));

  assertFalse("Key was not removed from inverse map.",map.inverseBidiMap().containsValue(key));

  assertFalse("Value was not removed from inverse map.",map.inverseBidiMap().containsKey(value));

}

Location: AbstractBidiMapTest.java

Content: 

private void removeByKeySet(final BidiMap<?,?> map,final Object key,final Object value){

  map.keySet().remove(key);

  assertFalse("Key was not removed.",map.containsKey(key));

  assertFalse("Value was not removed.",map.containsValue(value));

  assertFalse("Key was not removed from inverse map.",map.inverseBidiMap().containsValue(key));

  assertFalse("Value was not removed from inverse map.",map.inverseBidiMap().containsKey(value));

}

Location: AbstractBidiMapTest.java

Content: 

private void removeValue(final BidiMap<?,?> map,final Object value){

  final Object key=map.removeValue(value);

  assertFalse("Key was not removed.",map.containsKey(key));

  assertNull("Value was not removed.",map.getKey(value));

}

Location: AbstractBidiMapTest.java

Content: 

private void remove(final BidiMap<?,?> map,final Object key){

  final Object value=map.remove(key);

  assertFalse("Key was not removed.",map.containsKey(key));

  assertNull("Value was not removed.",map.getKey(value));

}

Location: AbstractBidiMapTest.java

Content: 

public void testBidiClear(){

  if (!isRemoveSupported()) {

    try {

      makeFullMap().clear();

      fail();

    }

 catch (    final UnsupportedOperationException ex) {

    }

    return;

  }

  BidiMap<?,?> map=makeFullMap();

  map.clear();

  assertTrue("Map was not cleared.",map.isEmpty());

  assertTrue("Inverse map was not cleared.",map.inverseBidiMap().isEmpty());

  map=makeFullMap().inverseBidiMap();

  map.clear();

  assertTrue("Map was not cleared.",map.isEmpty());

  assertTrue("Inverse map was not cleared.",map.inverseBidiMap().isEmpty());

}

Location: AbstractBidiMapTest.java

Content: 

public void testBidiGetKey(){

  doTestGetKey(makeFullMap(),getSampleKeys()[0],getSampleValues()[0]);

}

Location: AbstractBidiMapTest.java

Content: 

public void testBidiGetKeyInverse(){

  doTestGetKey(makeFullMap().inverseBidiMap(),getSampleValues()[0],getSampleKeys()[0]);

}

Location: AbstractBidiMapTest.java

Content: 

public void testBidiInverse(){

  final BidiMap<K,V> map=makeFullMap();

  final BidiMap<V,K> inverseMap=map.inverseBidiMap();

  assertSame("Inverse of inverse is not equal to original.",map,inverseMap.inverseBidiMap());

  assertEquals("Value not found for key.",getSampleKeys()[0],inverseMap.get(getSampleValues()[0]));

  assertEquals("Key not found for value.",getSampleValues()[0],inverseMap.getKey(getSampleKeys()[0]));

}

Location: AbstractBidiMapTest.java

Content: 

public void testBidiKeySetValuesOrder(){

  resetFull();

  final Iterator<K> keys=map.keySet().iterator();

  final Iterator<V> values=map.values().iterator();

  while (keys.hasNext() && values.hasNext()) {

    final K key=keys.next();

    final V value=values.next();

    assertSame(map.get(key),value);

  }

  assertFalse(keys.hasNext());

  assertFalse(values.hasNext());

}

Location: AbstractBidiMapTest.java

Content: 

public void testBidiMapIteratorSet(){

  final V newValue1=getOtherValues()[0];

  final V newValue2=getOtherValues()[1];

  resetFull();

  final BidiMap<K,V> bidi=getMap();

  final MapIterator<K,V> it=bidi.mapIterator();

  assertTrue(it.hasNext());

  final K key1=it.next();

  if (!isSetValueSupported()) {

    try {

      it.setValue(newValue1);

      fail();

    }

 catch (    final UnsupportedOperationException ex) {

    }

    return;

  }

  it.setValue(newValue1);

  confirmed.put(key1,newValue1);

  assertSame(key1,it.getKey());

  assertSame(newValue1,it.getValue());

  assertTrue(bidi.containsKey(key1));

  assertTrue(bidi.containsValue(newValue1));

  assertEquals(newValue1,bidi.get(key1));

  verify();

  it.setValue(newValue1);

  confirmed.put(key1,newValue1);

  assertSame(key1,it.getKey());

  assertSame(newValue1,it.getValue());

  assertTrue(bidi.containsKey(key1));

  assertTrue(bidi.containsValue(newValue1));

  assertEquals(newValue1,bidi.get(key1));

  verify();

  final K key2=it.next();

  it.setValue(newValue2);

  confirmed.put(key2,newValue2);

  assertSame(key2,it.getKey());

  assertSame(newValue2,it.getValue());

  assertTrue(bidi.containsKey(key2));

  assertTrue(bidi.containsValue(newValue2));

  assertEquals(newValue2,bidi.get(key2));

  verify();

  try {

    it.setValue(newValue1);

    fail();

  }

 catch (  final IllegalArgumentException ex) {

    return;

  }

  confirmed.put(key2,newValue1);

  AbstractBidiMapTest.this.getConfirmed().remove(key1);

  assertEquals(newValue1,it.getValue());

  assertTrue(bidi.containsKey(it.getKey()));

  assertTrue(bidi.containsValue(newValue1));

  assertEquals(newValue1,bidi.get(it.getKey()));

  assertFalse(bidi.containsKey(key1));

  assertFalse(bidi.containsValue(newValue2));

  verify();

  it.next();

  if (isRemoveSupported()) {

    it.remove();

  }

}

Location: AbstractBidiMapTest.java

Content: 

public void testBidiModifyEntrySet(){

  if (!isSetValueSupported()) {

    return;

  }

  modifyEntrySet(makeFullMap());

  modifyEntrySet(makeFullMap().inverseBidiMap());

}

Location: AbstractBidiMapTest.java

Content: 

@SuppressWarnings("unchecked") public void testBidiPut(){

  if (!isPutAddSupported() || !isPutChangeSupported()) {

    return;

  }

  final BidiMap<K,V> map=makeObject();

  final BidiMap<V,K> inverse=map.inverseBidiMap();

  assertEquals(0,map.size());

  assertEquals(map.size(),inverse.size());

  map.put((K)"A",(V)"B");

  assertEquals(1,map.size());

  assertEquals(map.size(),inverse.size());

  assertEquals("B",map.get("A"));

  assertEquals("A",inverse.get("B"));

  map.put((K)"A",(V)"C");

  assertEquals(1,map.size());

  assertEquals(map.size(),inverse.size());

  assertEquals("C",map.get("A"));

  assertEquals("A",inverse.get("C"));

  map.put((K)"B",(V)"C");

  assertEquals(1,map.size());

  assertEquals(map.size(),inverse.size());

  assertEquals("C",map.get("B"));

  assertEquals("B",inverse.get("C"));

  map.put((K)"E",(V)"F");

  assertEquals(2,map.size());

  assertEquals(map.size(),inverse.size());

  assertEquals("F",map.get("E"));

  assertEquals("E",inverse.get("F"));

}

Location: AbstractBidiMapTest.java

Content: 

public void testBidiRemove(){

  if (!isRemoveSupported()) {

    try {

      makeFullMap().remove(getSampleKeys()[0]);

      fail();

    }

 catch (    final UnsupportedOperationException ex) {

    }

    try {

      makeFullMap().removeValue(getSampleValues()[0]);

      fail();

    }

 catch (    final UnsupportedOperationException ex) {

    }

    return;

  }

  remove(makeFullMap(),getSampleKeys()[0]);

  remove(makeFullMap().inverseBidiMap(),getSampleValues()[0]);

  removeValue(makeFullMap(),getSampleValues()[0]);

  removeValue(makeFullMap().inverseBidiMap(),getSampleKeys()[0]);

  assertNull(makeFullMap().removeValue("NotPresent"));

}

Location: AbstractBidiMapTest.java

Content: 

public void testBidiRemoveByEntrySet(){

  if (!isRemoveSupported()) {

    return;

  }

  removeByEntrySet(makeFullMap(),getSampleKeys()[0],getSampleValues()[0]);

  removeByEntrySet(makeFullMap().inverseBidiMap(),getSampleValues()[0],getSampleKeys()[0]);

}

Location: AbstractBidiMapTest.java

Content: 

public void testBidiRemoveByKeySet(){

  if (!isRemoveSupported()) {

    return;

  }

  removeByKeySet(makeFullMap(),getSampleKeys()[0],getSampleValues()[0]);

  removeByKeySet(makeFullMap().inverseBidiMap(),getSampleValues()[0],getSampleKeys()[0]);

}

Location: AbstractBidiMapTest.java

Content: 

public void verifyInverse(){

  assertEquals(map.size(),((BidiMap<K,V>)map).inverseBidiMap().size());

  final Map<K,V> map1=new HashMap<>(map);

  final Map<V,K> map2=new HashMap<>(((BidiMap<K,V>)map).inverseBidiMap());

  final Set<K> keys1=map1.keySet();

  final Set<V> keys2=map2.keySet();

  final Collection<V> values1=map1.values();

  final Collection<K> values2=map2.values();

  assertTrue(keys1.containsAll(values2));

  assertTrue(values2.containsAll(keys1));

  assertTrue(values1.containsAll(keys2));

  assertTrue(keys2.containsAll(values1));

}

Location: AbstractBidiMapTest.java

Content: 

public AbstractBidiMapTest(){

  super("Inverse");

}

Location: AbstractBidiMapTest.java

Content: 

public AbstractBidiMapTest(final String testName){

  super(testName);

}

Location: AbstractBidiMapTest.java

Content: 

public BulkTest bulkTestBidiMapIterator(){

  return new TestBidiMapIterator();

}

Location: AbstractBidiMapTest.java

Content: 

public BulkTest bulkTestInverseMap(){

  return new TestInverseBidiMap(this);

}

Location: AbstractBidiMapTest.java

Content: 

private void doTestGetKey(final BidiMap<?,?> map,final Object key,final Object value){

  assertEquals("Value not found for key.",value,map.get(key));

  assertEquals("Key not found for value.",key,map.getKey(value));

}

Location: AbstractBidiMapTest.java

Content: 

@SuppressWarnings("unchecked") private <T>void modifyEntrySet(final BidiMap<?,T> map){

  final Map.Entry<?,T> entry=map.entrySet().iterator().next();

  final Object key=entry.getKey();

  final Object oldValue=entry.getValue();

  final Object newValue="newValue";

  entry.setValue((T)newValue);

  assertEquals("Modifying entrySet did not affect underlying Map.",newValue,map.get(key));

  assertNull("Modifying entrySet did not affect inverse Map.",map.getKey(oldValue));

}

Location: AbstractBidiMapTest.java

Content: 

private void removeByEntrySet(final BidiMap<?,?> map,final Object key,final Object value){

  final Map<Object,Object> temp=new HashMap<>();

  temp.put(key,value);

  map.entrySet().remove(temp.entrySet().iterator().next());

  assertFalse("Key was not removed.",map.containsKey(key));

  assertFalse("Value was not removed.",map.containsValue(value));

  assertFalse("Key was not removed from inverse map.",map.inverseBidiMap().containsValue(key));

  assertFalse("Value was not removed from inverse map.",map.inverseBidiMap().containsKey(value));

}

Location: AbstractBidiMapTest.java

Content: 

private void removeByKeySet(final BidiMap<?,?> map,final Object key,final Object value){

  map.keySet().remove(key);

  assertFalse("Key was not removed.",map.containsKey(key));

  assertFalse("Value was not removed.",map.containsValue(value));

  assertFalse("Key was not removed from inverse map.",map.inverseBidiMap().containsValue(key));

  assertFalse("Value was not removed from inverse map.",map.inverseBidiMap().containsKey(value));

}

Location: AbstractBidiMapTest.java

Content: 

private void removeValue(final BidiMap<?,?> map,final Object value){

  final Object key=map.removeValue(value);

  assertFalse("Key was not removed.",map.containsKey(key));

  assertNull("Value was not removed.",map.getKey(value));

}

Location: AbstractBidiMapTest.java

Content: 

private void remove(final BidiMap<?,?> map,final Object key){

  final Object value=map.remove(key);

  assertFalse("Key was not removed.",map.containsKey(key));

  assertNull("Value was not removed.",map.getKey(value));

}

Location: AbstractBidiMapTest.java

Content: 

public void testBidiClear(){

  if (!isRemoveSupported()) {

    try {

      makeFullMap().clear();

      fail();

    }

 catch (    final UnsupportedOperationException ex) {

    }

    return;

  }

  BidiMap<?,?> map=makeFullMap();

  map.clear();

  assertTrue("Map was not cleared.",map.isEmpty());

  assertTrue("Inverse map was not cleared.",map.inverseBidiMap().isEmpty());

  map=makeFullMap().inverseBidiMap();

  map.clear();

  assertTrue("Map was not cleared.",map.isEmpty());

  assertTrue("Inverse map was not cleared.",map.inverseBidiMap().isEmpty());

}

Location: AbstractBidiMapTest.java

Content: 

public void testBidiGetKey(){

  doTestGetKey(makeFullMap(),getSampleKeys()[0],getSampleValues()[0]);

}

Location: AbstractBidiMapTest.java

Content: 

public void testBidiGetKeyInverse(){

  doTestGetKey(makeFullMap().inverseBidiMap(),getSampleValues()[0],getSampleKeys()[0]);

}

Location: AbstractBidiMapTest.java

Content: 

public void testBidiInverse(){

  final BidiMap<K,V> map=makeFullMap();

  final BidiMap<V,K> inverseMap=map.inverseBidiMap();

  assertSame("Inverse of inverse is not equal to original.",map,inverseMap.inverseBidiMap());

  assertEquals("Value not found for key.",getSampleKeys()[0],inverseMap.get(getSampleValues()[0]));

  assertEquals("Key not found for value.",getSampleValues()[0],inverseMap.getKey(getSampleKeys()[0]));

}

Location: AbstractBidiMapTest.java

Content: 

public void testBidiKeySetValuesOrder(){

  resetFull();

  final Iterator<K> keys=map.keySet().iterator();

  final Iterator<V> values=map.values().iterator();

  while (keys.hasNext() && values.hasNext()) {

    final K key=keys.next();

    final V value=values.next();

    assertSame(map.get(key),value);

  }

  assertFalse(keys.hasNext());

  assertFalse(values.hasNext());

}

Location: AbstractBidiMapTest.java

Content: 

public void testBidiMapIteratorSet(){

  final V newValue1=getOtherValues()[0];

  final V newValue2=getOtherValues()[1];

  resetFull();

  final BidiMap<K,V> bidi=getMap();

  final MapIterator<K,V> it=bidi.mapIterator();

  assertTrue(it.hasNext());

  final K key1=it.next();

  if (!isSetValueSupported()) {

    try {

      it.setValue(newValue1);

      fail();

    }

 catch (    final UnsupportedOperationException ex) {

    }

    return;

  }

  it.setValue(newValue1);

  confirmed.put(key1,newValue1);

  assertSame(key1,it.getKey());

  assertSame(newValue1,it.getValue());

  assertTrue(bidi.containsKey(key1));

  assertTrue(bidi.containsValue(newValue1));

  assertEquals(newValue1,bidi.get(key1));

  verify();

  it.setValue(newValue1);

  confirmed.put(key1,newValue1);

  assertSame(key1,it.getKey());

  assertSame(newValue1,it.getValue());

  assertTrue(bidi.containsKey(key1));

  assertTrue(bidi.containsValue(newValue1));

  assertEquals(newValue1,bidi.get(key1));

  verify();

  final K key2=it.next();

  it.setValue(newValue2);

  confirmed.put(key2,newValue2);

  assertSame(key2,it.getKey());

  assertSame(newValue2,it.getValue());

  assertTrue(bidi.containsKey(key2));

  assertTrue(bidi.containsValue(newValue2));

  assertEquals(newValue2,bidi.get(key2));

  verify();

  try {

    it.setValue(newValue1);

    fail();

  }

 catch (  final IllegalArgumentException ex) {

    return;

  }

  confirmed.put(key2,newValue1);

  AbstractBidiMapTest.this.getConfirmed().remove(key1);

  assertEquals(newValue1,it.getValue());

  assertTrue(bidi.containsKey(it.getKey()));

  assertTrue(bidi.containsValue(newValue1));

  assertEquals(newValue1,bidi.get(it.getKey()));

  assertFalse(bidi.containsKey(key1));

  assertFalse(bidi.containsValue(newValue2));

  verify();

  it.next();

  if (isRemoveSupported()) {

    it.remove();

  }

}

Location: AbstractBidiMapTest.java

Content: 

public void testBidiModifyEntrySet(){

  if (!isSetValueSupported()) {

    return;

  }

  modifyEntrySet(makeFullMap());

  modifyEntrySet(makeFullMap().inverseBidiMap());

}

Location: AbstractBidiMapTest.java

Content: 

@SuppressWarnings("unchecked") public void testBidiPut(){

  if (!isPutAddSupported() || !isPutChangeSupported()) {

    return;

  }

  final BidiMap<K,V> map=makeObject();

  final BidiMap<V,K> inverse=map.inverseBidiMap();

  assertEquals(0,map.size());

  assertEquals(map.size(),inverse.size());

  map.put((K)"A",(V)"B");

  assertEquals(1,map.size());

  assertEquals(map.size(),inverse.size());

  assertEquals("B",map.get("A"));

  assertEquals("A",inverse.get("B"));

  map.put((K)"A",(V)"C");

  assertEquals(1,map.size());

  assertEquals(map.size(),inverse.size());

  assertEquals("C",map.get("A"));

  assertEquals("A",inverse.get("C"));

  map.put((K)"B",(V)"C");

  assertEquals(1,map.size());

  assertEquals(map.size(),inverse.size());

  assertEquals("C",map.get("B"));

  assertEquals("B",inverse.get("C"));

  map.put((K)"E",(V)"F");

  assertEquals(2,map.size());

  assertEquals(map.size(),inverse.size());

  assertEquals("F",map.get("E"));

  assertEquals("E",inverse.get("F"));

}

Location: AbstractBidiMapTest.java

Content: 

public void testBidiRemove(){

  if (!isRemoveSupported()) {

    try {

      makeFullMap().remove(getSampleKeys()[0]);

      fail();

    }

 catch (    final UnsupportedOperationException ex) {

    }

    try {

      makeFullMap().removeValue(getSampleValues()[0]);

      fail();

    }

 catch (    final UnsupportedOperationException ex) {

    }

    return;

  }

  remove(makeFullMap(),getSampleKeys()[0]);

  remove(makeFullMap().inverseBidiMap(),getSampleValues()[0]);

  removeValue(makeFullMap(),getSampleValues()[0]);

  removeValue(makeFullMap().inverseBidiMap(),getSampleKeys()[0]);

  assertNull(makeFullMap().removeValue("NotPresent"));

}

Location: AbstractBidiMapTest.java

Content: 

public void testBidiRemoveByEntrySet(){

  if (!isRemoveSupported()) {

    return;

  }

  removeByEntrySet(makeFullMap(),getSampleKeys()[0],getSampleValues()[0]);

  removeByEntrySet(makeFullMap().inverseBidiMap(),getSampleValues()[0],getSampleKeys()[0]);

}

Location: AbstractBidiMapTest.java

Content: 

public void testBidiRemoveByKeySet(){

  if (!isRemoveSupported()) {

    return;

  }

  removeByKeySet(makeFullMap(),getSampleKeys()[0],getSampleValues()[0]);

  removeByKeySet(makeFullMap().inverseBidiMap(),getSampleValues()[0],getSampleKeys()[0]);

}

Location: AbstractBidiMapTest.java

Content: 

public void verifyInverse(){

  assertEquals(map.size(),((BidiMap<K,V>)map).inverseBidiMap().size());

  final Map<K,V> map1=new HashMap<>(map);

  final Map<V,K> map2=new HashMap<>(((BidiMap<K,V>)map).inverseBidiMap());

  final Set<K> keys1=map1.keySet();

  final Set<V> keys2=map2.keySet();

  final Collection<V> values1=map1.values();

  final Collection<K> values2=map2.values();

  assertTrue(keys1.containsAll(values2));

  assertTrue(values2.containsAll(keys1));

  assertTrue(values1.containsAll(keys2));

  assertTrue(keys2.containsAll(values1));

}

