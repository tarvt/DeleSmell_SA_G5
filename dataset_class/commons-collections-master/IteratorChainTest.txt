Location: IteratorChainTest.java

Content: 

public IteratorChainTest(final String testName){

  super(testName);

}

Location: IteratorChainTest.java

Content: 

public void testEmptyChain(){

  final IteratorChain<Object> chain=new IteratorChain<>();

  assertFalse(chain.hasNext());

  try {

    chain.next();

    fail();

  }

 catch (  final NoSuchElementException ex) {

  }

  try {

    chain.remove();

    fail();

  }

 catch (  final IllegalStateException ex) {

  }

}

Location: IteratorChainTest.java

Content: 

public void testFirstIteratorIsEmptyBug(){

  final List<String> empty=new ArrayList<>();

  final List<String> notEmpty=new ArrayList<>();

  notEmpty.add("A");

  notEmpty.add("B");

  notEmpty.add("C");

  final IteratorChain<String> chain=new IteratorChain<>();

  chain.addIterator(empty.iterator());

  chain.addIterator(notEmpty.iterator());

  assertTrue("should have next",chain.hasNext());

  assertEquals("A",chain.next());

  assertTrue("should have next",chain.hasNext());

  assertEquals("B",chain.next());

  assertTrue("should have next",chain.hasNext());

  assertEquals("C",chain.next());

  assertFalse("should not have next",chain.hasNext());

}

Location: IteratorChainTest.java

Content: 

public void testRemoveFromFilteredIterator(){

  final Predicate<Integer> myPredicate=i -> i.compareTo(Integer.valueOf(4)) < 0;

  final List<Integer> list1=new ArrayList<>();

  final List<Integer> list2=new ArrayList<>();

  list1.add(Integer.valueOf(1));

  list1.add(Integer.valueOf(2));

  list2.add(Integer.valueOf(3));

  list2.add(Integer.valueOf(4));

  final Iterator<Integer> it1=IteratorUtils.filteredIterator(list1.iterator(),myPredicate);

  final Iterator<Integer> it2=IteratorUtils.filteredIterator(list2.iterator(),myPredicate);

  final Iterator<Integer> it=IteratorUtils.chainedIterator(it1,it2);

  while (it.hasNext()) {

    it.next();

    it.remove();

  }

  assertEquals(0,list1.size());

  assertEquals(1,list2.size());

}

Location: IteratorChainTest.java

Content: 

public IteratorChainTest(final String testName){

  super(testName);

}

Location: IteratorChainTest.java

Content: 

public void testEmptyChain(){

  final IteratorChain<Object> chain=new IteratorChain<>();

  assertFalse(chain.hasNext());

  try {

    chain.next();

    fail();

  }

 catch (  final NoSuchElementException ex) {

  }

  try {

    chain.remove();

    fail();

  }

 catch (  final IllegalStateException ex) {

  }

}

Location: IteratorChainTest.java

Content: 

public void testFirstIteratorIsEmptyBug(){

  final List<String> empty=new ArrayList<>();

  final List<String> notEmpty=new ArrayList<>();

  notEmpty.add("A");

  notEmpty.add("B");

  notEmpty.add("C");

  final IteratorChain<String> chain=new IteratorChain<>();

  chain.addIterator(empty.iterator());

  chain.addIterator(notEmpty.iterator());

  assertTrue("should have next",chain.hasNext());

  assertEquals("A",chain.next());

  assertTrue("should have next",chain.hasNext());

  assertEquals("B",chain.next());

  assertTrue("should have next",chain.hasNext());

  assertEquals("C",chain.next());

  assertFalse("should not have next",chain.hasNext());

}

Location: IteratorChainTest.java

Content: 

public void testRemoveFromFilteredIterator(){

  final Predicate<Integer> myPredicate=i -> i.compareTo(Integer.valueOf(4)) < 0;

  final List<Integer> list1=new ArrayList<>();

  final List<Integer> list2=new ArrayList<>();

  list1.add(Integer.valueOf(1));

  list1.add(Integer.valueOf(2));

  list2.add(Integer.valueOf(3));

  list2.add(Integer.valueOf(4));

  final Iterator<Integer> it1=IteratorUtils.filteredIterator(list1.iterator(),myPredicate);

  final Iterator<Integer> it2=IteratorUtils.filteredIterator(list2.iterator(),myPredicate);

  final Iterator<Integer> it=IteratorUtils.chainedIterator(it1,it2);

  while (it.hasNext()) {

    it.next();

    it.remove();

  }

  assertEquals(0,list1.size());

  assertEquals(1,list2.size());

}

