Location: HashFunctionIdentity.java

Content: 

/** 

 * Gets a common formatted string for general display.

 * @param identity the identity to format.

 * @return the String representing the identity.

 */

static String asCommonString(final HashFunctionIdentity identity){

  return String.format("%s-%s-%s",identity.getName(),identity.getSignedness(),identity.getProcessType());

}

Location: HashFunctionIdentity.java

Content: 

/** 

 * Gets a  {@code byte[]} buffer for a HashFunctionIdentity to create a signature. The{@code byte[]} is composed using properties of the hash function as:<pre><code> String.format("%s-%s-%s", getName().toUpperCase(Locale.ROOT), getSignedness(), getProcess()) .getBytes("UTF-8"); </code></pre>

 * @param identity The HashFunctionIdentity to create the buffer for.

 * @return the signature buffer for the identity

 * @see #getSignature()

 */

static byte[] prepareSignatureBuffer(final HashFunctionIdentity identity){

  return String.format("%s-%s-%s",identity.getName().toUpperCase(Locale.ROOT),identity.getSignedness(),identity.getProcessType()).getBytes(StandardCharsets.UTF_8);

}

Location: HashFunctionIdentity.java

Content: 

/** 

 * Gets a common formatted string for general display.

 * @param identity the identity to format.

 * @return the String representing the identity.

 */

static String asCommonString(final HashFunctionIdentity identity){

  return String.format("%s-%s-%s",identity.getName(),identity.getSignedness(),identity.getProcessType());

}

Location: HashFunctionIdentity.java

Content: 

/** 

 * Gets a  {@code byte[]} buffer for a HashFunctionIdentity to create a signature. The{@code byte[]} is composed using properties of the hash function as:<pre><code> String.format("%s-%s-%s", getName().toUpperCase(Locale.ROOT), getSignedness(), getProcess()) .getBytes("UTF-8"); </code></pre>

 * @param identity The HashFunctionIdentity to create the buffer for.

 * @return the signature buffer for the identity

 * @see #getSignature()

 */

static byte[] prepareSignatureBuffer(final HashFunctionIdentity identity){

  return String.format("%s-%s-%s",identity.getName().toUpperCase(Locale.ROOT),identity.getSignedness(),identity.getProcessType()).getBytes(StandardCharsets.UTF_8);

}

