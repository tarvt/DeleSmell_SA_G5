Location: TransformedSetTest.java

Content: 

@Override public Set<E> makeConfirmedFullCollection(){

  return new HashSet<>(Arrays.asList(getFullElements()));

}

Location: TransformedSetTest.java

Content: 

@SuppressWarnings("unchecked") public void testTransformedSet(){

  final Set<E> set=TransformedSet.transformingSet(new HashSet<E>(),(Transformer<E,E>)TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER);

  assertEquals(0,set.size());

  final E[] els=(E[])new Object[]{"1","3","5","7","2","4","6"};

  for (int i=0; i < els.length; i++) {

    set.add(els[i]);

    assertEquals(i + 1,set.size());

    assertTrue(set.contains(Integer.valueOf((String)els[i])));

    assertFalse(set.contains(els[i]));

  }

  assertFalse(set.remove(els[0]));

  assertTrue(set.remove(Integer.valueOf((String)els[0])));

}

Location: TransformedSetTest.java

Content: 

public void testTransformedSet_decorateTransform(){

  final Set<Object> originalSet=new HashSet<>();

  final Object[] els=new Object[]{"1","3","5","7","2","4","6"};

  Collections.addAll(originalSet,els);

  final Set<?> set=TransformedSet.transformedSet(originalSet,TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER);

  assertEquals(els.length,set.size());

  for (  final Object el : els) {

    assertTrue(set.contains(Integer.valueOf((String)el)));

    assertFalse(set.contains(el));

  }

  assertFalse(set.remove(els[0]));

  assertTrue(set.remove(Integer.valueOf((String)els[0])));

}

Location: TransformedSetTest.java

Content: 

public TransformedSetTest(final String testName){

  super(testName);

}

Location: TransformedSetTest.java

Content: 

@Override public Set<E> makeConfirmedFullCollection(){

  return new HashSet<>(Arrays.asList(getFullElements()));

}

Location: TransformedSetTest.java

Content: 

@SuppressWarnings("unchecked") public void testTransformedSet(){

  final Set<E> set=TransformedSet.transformingSet(new HashSet<E>(),(Transformer<E,E>)TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER);

  assertEquals(0,set.size());

  final E[] els=(E[])new Object[]{"1","3","5","7","2","4","6"};

  for (int i=0; i < els.length; i++) {

    set.add(els[i]);

    assertEquals(i + 1,set.size());

    assertTrue(set.contains(Integer.valueOf((String)els[i])));

    assertFalse(set.contains(els[i]));

  }

  assertFalse(set.remove(els[0]));

  assertTrue(set.remove(Integer.valueOf((String)els[0])));

}

Location: TransformedSetTest.java

Content: 

public void testTransformedSet_decorateTransform(){

  final Set<Object> originalSet=new HashSet<>();

  final Object[] els=new Object[]{"1","3","5","7","2","4","6"};

  Collections.addAll(originalSet,els);

  final Set<?> set=TransformedSet.transformedSet(originalSet,TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER);

  assertEquals(els.length,set.size());

  for (  final Object el : els) {

    assertTrue(set.contains(Integer.valueOf((String)el)));

    assertFalse(set.contains(el));

  }

  assertFalse(set.remove(els[0]));

  assertTrue(set.remove(Integer.valueOf((String)els[0])));

}

Location: TransformedSetTest.java

Content: 

public TransformedSetTest(final String testName){

  super(testName);

}

