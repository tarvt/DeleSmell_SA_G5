Location: BooleanComparator.java

Content: 

/** 

 * Creates a  {@code BooleanComparator} that sorts{@code <i>trueFirst</i>} values before{@code &#x21;<i>trueFirst</i>} values.<p> Please use the static factories instead whenever possible.

 * @param trueFirst when {@code true}, sort {@code true} boolean values before {@code false}

 */

public BooleanComparator(final boolean trueFirst){

  this.trueFirst=trueFirst;

}

Location: BooleanComparator.java

Content: 

/** 

 * Compares two non- {@code null} {@code Boolean} objectsaccording to the value of  {@link #sortsTrueFirst()}.

 * @param b1  the first boolean to compare

 * @param b2  the second boolean to compare

 * @return negative if obj1 is less, positive if greater, zero if equal

 * @throws NullPointerException when either argument {@code null}

 */

@Override public int compare(final Boolean b1,final Boolean b2){

  final boolean v1=b1.booleanValue();

  final boolean v2=b2.booleanValue();

  return (v1 ^ v2) ? ((v1 ^ trueFirst) ? 1 : -1) : 0;

}

Location: BooleanComparator.java

Content: 

/** 

 * Returns a BooleanComparator instance that sorts {@code false} values before {@code true} values.<p> Clients are encouraged to use the value returned from this method instead of constructing a new instance to reduce allocation and garbage collection overhead when multiple BooleanComparators may be used in the same virtual machine. </p>

 * @return the false first singleton BooleanComparator

 */

public static BooleanComparator getFalseFirstComparator(){

  return FALSE_FIRST;

}

Location: BooleanComparator.java

Content: 

/** 

 * Returns a BooleanComparator instance that sorts {@code true} values before {@code false} values.<p> Clients are encouraged to use the value returned from this method instead of constructing a new instance to reduce allocation and garbage collection overhead when multiple BooleanComparators may be used in the same virtual machine. </p>

 * @return the true first singleton BooleanComparator

 */

public static BooleanComparator getTrueFirstComparator(){

  return TRUE_FIRST;

}

Location: BooleanComparator.java

Content: 

/** 

 * Returns  {@code true} iffI sort  {@code true} values before{@code false} values.  In other words,returns  {@code true} iff{@link #compare(Boolean,Boolean) compare(Boolean.FALSE,Boolean.TRUE)}returns a positive value.

 * @return the trueFirst flag

 */

public boolean sortsTrueFirst(){

  return trueFirst;

}

Location: BooleanComparator.java

Content: 

/** 

 * Creates a  {@code BooleanComparator} that sorts{@code <i>trueFirst</i>} values before{@code &#x21;<i>trueFirst</i>} values.<p> Please use the static factories instead whenever possible.

 * @param trueFirst when {@code true}, sort {@code true} boolean values before {@code false}

 */

public BooleanComparator(final boolean trueFirst){

  this.trueFirst=trueFirst;

}

Location: BooleanComparator.java

Content: 

/** 

 * Compares two non- {@code null} {@code Boolean} objectsaccording to the value of  {@link #sortsTrueFirst()}.

 * @param b1  the first boolean to compare

 * @param b2  the second boolean to compare

 * @return negative if obj1 is less, positive if greater, zero if equal

 * @throws NullPointerException when either argument {@code null}

 */

@Override public int compare(final Boolean b1,final Boolean b2){

  final boolean v1=b1.booleanValue();

  final boolean v2=b2.booleanValue();

  return (v1 ^ v2) ? ((v1 ^ trueFirst) ? 1 : -1) : 0;

}

Location: BooleanComparator.java

Content: 

/** 

 * Returns a BooleanComparator instance that sorts {@code false} values before {@code true} values.<p> Clients are encouraged to use the value returned from this method instead of constructing a new instance to reduce allocation and garbage collection overhead when multiple BooleanComparators may be used in the same virtual machine. </p>

 * @return the false first singleton BooleanComparator

 */

public static BooleanComparator getFalseFirstComparator(){

  return FALSE_FIRST;

}

Location: BooleanComparator.java

Content: 

/** 

 * Returns a BooleanComparator instance that sorts {@code true} values before {@code false} values.<p> Clients are encouraged to use the value returned from this method instead of constructing a new instance to reduce allocation and garbage collection overhead when multiple BooleanComparators may be used in the same virtual machine. </p>

 * @return the true first singleton BooleanComparator

 */

public static BooleanComparator getTrueFirstComparator(){

  return TRUE_FIRST;

}

Location: BooleanComparator.java

Content: 

/** 

 * Returns  {@code true} iffI sort  {@code true} values before{@code false} values.  In other words,returns  {@code true} iff{@link #compare(Boolean,Boolean) compare(Boolean.FALSE,Boolean.TRUE)}returns a positive value.

 * @return the trueFirst flag

 */

public boolean sortsTrueFirst(){

  return trueFirst;

}

