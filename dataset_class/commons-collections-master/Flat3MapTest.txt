Location: Flat3MapTest.java

Content: 

@Override public BulkTest bulkTestMapIterator(){

  return new TestFlatMapIterator();

}

Location: Flat3MapTest.java

Content: 

public Flat3MapTest(final String testName){

  super(testName);

}

Location: Flat3MapTest.java

Content: 

private void putAndRemove(final Map<K,V> map){

  map.put((K)"A",(V)"one");

  map.put((K)"B",(V)"two");

  map.put((K)"C",(V)"three");

  final Iterator<Map.Entry<K,V>> it=map.entrySet().iterator();

  final Map.Entry<K,V> mapEntry1=it.next();

  final Map.Entry<K,V> mapEntry2=it.next();

  final Map.Entry<K,V> mapEntry3=it.next();

  it.remove();

  assertEquals(2,map.size());

  assertEquals("one",map.get("A"));

  assertEquals("two",map.get("B"));

  assertNull(map.get("C"));

}

Location: Flat3MapTest.java

Content: 

@SuppressWarnings("unchecked") public void testClone2(){

  final Flat3Map<K,V> map=makeObject();

  assertEquals(0,map.size());

  map.put((K)ONE,(V)TEN);

  map.put((K)TWO,(V)TWENTY);

  assertEquals(2,map.size());

  assertTrue(map.containsKey(ONE));

  assertTrue(map.containsKey(TWO));

  assertSame(TEN,map.get(ONE));

  assertSame(TWENTY,map.get(TWO));

  final Flat3Map<K,V> cloned=map.clone();

  assertEquals(2,cloned.size());

  assertTrue(cloned.containsKey(ONE));

  assertTrue(cloned.containsKey(TWO));

  assertSame(TEN,cloned.get(ONE));

  assertSame(TWENTY,cloned.get(TWO));

  map.put((K)TEN,(V)ONE);

  map.put((K)TWENTY,(V)TWO);

  assertEquals(4,map.size());

  assertEquals(2,cloned.size());

  assertTrue(cloned.containsKey(ONE));

  assertTrue(cloned.containsKey(TWO));

  assertSame(TEN,cloned.get(ONE));

  assertSame(TWENTY,cloned.get(TWO));

}

Location: Flat3MapTest.java

Content: 

@SuppressWarnings("unchecked") public void testClone4(){

  final Flat3Map<K,V> map=makeObject();

  assertEquals(0,map.size());

  map.put((K)ONE,(V)TEN);

  map.put((K)TWO,(V)TWENTY);

  map.put((K)TEN,(V)ONE);

  map.put((K)TWENTY,(V)TWO);

  final Flat3Map<K,V> cloned=map.clone();

  assertEquals(4,map.size());

  assertEquals(4,cloned.size());

  assertTrue(cloned.containsKey(ONE));

  assertTrue(cloned.containsKey(TWO));

  assertTrue(cloned.containsKey(TEN));

  assertTrue(cloned.containsKey(TWENTY));

  assertSame(TEN,cloned.get(ONE));

  assertSame(TWENTY,cloned.get(TWO));

  assertSame(ONE,cloned.get(TEN));

  assertSame(TWO,cloned.get(TWENTY));

  map.clear();

  assertEquals(0,map.size());

  assertEquals(4,cloned.size());

  assertTrue(cloned.containsKey(ONE));

  assertTrue(cloned.containsKey(TWO));

  assertTrue(cloned.containsKey(TEN));

  assertTrue(cloned.containsKey(TWENTY));

  assertSame(TEN,cloned.get(ONE));

  assertSame(TWENTY,cloned.get(TWO));

  assertSame(ONE,cloned.get(TEN));

  assertSame(TWO,cloned.get(TWENTY));

}

Location: Flat3MapTest.java

Content: 

public void testCollections261(){

  final Flat3Map<Integer,Integer> m=new Flat3Map<>();

  m.put(Integer.valueOf(1),Integer.valueOf(1));

  m.put(Integer.valueOf(0),Integer.valueOf(0));

  assertEquals(Integer.valueOf(1),m.remove(Integer.valueOf(1)));

  assertEquals(Integer.valueOf(0),m.remove(Integer.valueOf(0)));

  m.put(Integer.valueOf(2),Integer.valueOf(2));

  m.put(Integer.valueOf(1),Integer.valueOf(1));

  m.put(Integer.valueOf(0),Integer.valueOf(0));

  assertEquals(Integer.valueOf(2),m.remove(Integer.valueOf(2)));

  assertEquals(Integer.valueOf(1),m.remove(Integer.valueOf(1)));

  assertEquals(Integer.valueOf(0),m.remove(Integer.valueOf(0)));

}

Location: Flat3MapTest.java

Content: 

public void testContainsKey1(){

  final Flat3Map<Integer,Integer> m=new Flat3Map<>();

  m.put(ONE,ONE);

  m.put(TWO,TWO);

  m.put(null,THREE);

  final boolean contains=m.containsKey(null);

  assertTrue(contains);

}

Location: Flat3MapTest.java

Content: 

public void testContainsKey2(){

  final Flat3Map<Integer,Integer> m=new Flat3Map<>();

  m.put(ONE,ONE);

  m.put(null,TWO);

  final boolean contains=m.containsKey(null);

  assertTrue(contains);

}

Location: Flat3MapTest.java

Content: 

public void testContainsKey3(){

  final Flat3Map<Integer,Integer> m=new Flat3Map<>();

  m.put(null,ONE);

  final boolean contains=m.containsKey(null);

  assertTrue(contains);

}

Location: Flat3MapTest.java

Content: 

public void testContainsValue1(){

  final Flat3Map<Integer,Integer> m=new Flat3Map<>();

  m.put(ONE,ONE);

  m.put(TWO,TWO);

  m.put(THREE,null);

  final boolean contains=m.containsValue(null);

  assertTrue(contains);

}

Location: Flat3MapTest.java

Content: 

public void testContainsValue2(){

  final Flat3Map<Integer,Integer> m=new Flat3Map<>();

  m.put(ONE,ONE);

  m.put(TWO,null);

  final boolean contains=m.containsValue(null);

  assertTrue(contains);

}

Location: Flat3MapTest.java

Content: 

public void testContainsValue3(){

  final Flat3Map<Integer,Integer> m=new Flat3Map<>();

  m.put(ONE,null);

  final boolean contains=m.containsValue(null);

  assertTrue(contains);

}

Location: Flat3MapTest.java

Content: 

@SuppressWarnings("unchecked") public void testEntryIteratorSetValue1() throws Exception {

  final Flat3Map<K,V> map=makeObject();

  map.put((K)ONE,(V)TEN);

  map.put((K)TWO,(V)TWENTY);

  map.put((K)THREE,(V)THIRTY);

  final Iterator<Map.Entry<K,V>> it=map.entrySet().iterator();

  final Map.Entry<K,V> entry=it.next();

  entry.setValue((V)"NewValue");

  assertEquals(3,map.size());

  assertTrue(map.containsKey(ONE));

  assertTrue(map.containsKey(TWO));

  assertTrue(map.containsKey(THREE));

  assertEquals("NewValue",map.get(ONE));

  assertEquals(TWENTY,map.get(TWO));

  assertEquals(THIRTY,map.get(THREE));

}

Location: Flat3MapTest.java

Content: 

@SuppressWarnings("unchecked") public void testEntryIteratorSetValue2() throws Exception {

  final Flat3Map<K,V> map=makeObject();

  map.put((K)ONE,(V)TEN);

  map.put((K)TWO,(V)TWENTY);

  map.put((K)THREE,(V)THIRTY);

  final Iterator<Map.Entry<K,V>> it=map.entrySet().iterator();

  it.next();

  final Map.Entry<K,V> entry=it.next();

  entry.setValue((V)"NewValue");

  assertEquals(3,map.size());

  assertTrue(map.containsKey(ONE));

  assertTrue(map.containsKey(TWO));

  assertTrue(map.containsKey(THREE));

  assertEquals(TEN,map.get(ONE));

  assertEquals("NewValue",map.get(TWO));

  assertEquals(THIRTY,map.get(THREE));

}

Location: Flat3MapTest.java

Content: 

@SuppressWarnings("unchecked") public void testEntryIteratorSetValue3() throws Exception {

  final Flat3Map<K,V> map=makeObject();

  map.put((K)ONE,(V)TEN);

  map.put((K)TWO,(V)TWENTY);

  map.put((K)THREE,(V)THIRTY);

  final Iterator<Map.Entry<K,V>> it=map.entrySet().iterator();

  it.next();

  it.next();

  final Map.Entry<K,V> entry=it.next();

  entry.setValue((V)"NewValue");

  assertEquals(3,map.size());

  assertTrue(map.containsKey(ONE));

  assertTrue(map.containsKey(TWO));

  assertTrue(map.containsKey(THREE));

  assertEquals(TEN,map.get(ONE));

  assertEquals(TWENTY,map.get(TWO));

  assertEquals("NewValue",map.get(THREE));

}

Location: Flat3MapTest.java

Content: 

@SuppressWarnings("unchecked") public void testEquals1(){

  final Flat3Map<K,V> map1=makeObject();

  map1.put((K)"a",(V)"testA");

  map1.put((K)"b",(V)"testB");

  final Flat3Map<K,V> map2=makeObject();

  map2.put((K)"a",(V)"testB");

  map2.put((K)"b",(V)"testA");

  assertFalse(map1.equals(map2));

}

Location: Flat3MapTest.java

Content: 

@SuppressWarnings("unchecked") public void testEquals2(){

  final Flat3Map<K,V> map1=makeObject();

  map1.put((K)"a",(V)"testA");

  map1.put((K)"b",(V)"testB");

  final Flat3Map<K,V> map2=makeObject();

  map2.put((K)"a",(V)"testB");

  map2.put((K)"c",(V)"testA");

  assertFalse(map1.equals(map2));

}

Location: Flat3MapTest.java

Content: 

public void testGet1(){

  final Flat3Map<Integer,Integer> m=new Flat3Map<>();

  final Object obj;

  m.put(null,ONE);

  obj=m.get(null);

  assertSame(ONE,obj);

}

Location: Flat3MapTest.java

Content: 

public void testGet2(){

  final Flat3Map<Integer,Integer> m=new Flat3Map<>();

  final Object obj;

  m.put(ONE,ONE);

  m.put(null,TWO);

  obj=m.get(null);

  assertSame(TWO,obj);

}

Location: Flat3MapTest.java

Content: 

public void testGet3(){

  final Flat3Map<Integer,Integer> m=new Flat3Map<>();

  final Object obj;

  m.put(ONE,ONE);

  m.put(TWO,TWO);

  m.put(null,THREE);

  obj=m.get(null);

  assertSame(THREE,obj);

}

Location: Flat3MapTest.java

Content: 

@SuppressWarnings("unchecked") public void testMapIteratorSetValue1() throws Exception {

  final Flat3Map<K,V> map=makeObject();

  map.put((K)ONE,(V)TEN);

  map.put((K)TWO,(V)TWENTY);

  map.put((K)THREE,(V)THIRTY);

  final MapIterator<K,V> it=map.mapIterator();

  it.next();

  it.setValue((V)"NewValue");

  assertEquals(3,map.size());

  assertTrue(map.containsKey(ONE));

  assertTrue(map.containsKey(TWO));

  assertTrue(map.containsKey(THREE));

  assertEquals("NewValue",map.get(ONE));

  assertEquals(TWENTY,map.get(TWO));

  assertEquals(THIRTY,map.get(THREE));

}

Location: Flat3MapTest.java

Content: 

@SuppressWarnings("unchecked") public void testMapIteratorSetValue2() throws Exception {

  final Flat3Map<K,V> map=makeObject();

  map.put((K)ONE,(V)TEN);

  map.put((K)TWO,(V)TWENTY);

  map.put((K)THREE,(V)THIRTY);

  final MapIterator<K,V> it=map.mapIterator();

  it.next();

  it.next();

  it.setValue((V)"NewValue");

  assertEquals(3,map.size());

  assertTrue(map.containsKey(ONE));

  assertTrue(map.containsKey(TWO));

  assertTrue(map.containsKey(THREE));

  assertEquals(TEN,map.get(ONE));

  assertEquals("NewValue",map.get(TWO));

  assertEquals(THIRTY,map.get(THREE));

}

Location: Flat3MapTest.java

Content: 

@SuppressWarnings("unchecked") public void testMapIteratorSetValue3() throws Exception {

  final Flat3Map<K,V> map=makeObject();

  map.put((K)ONE,(V)TEN);

  map.put((K)TWO,(V)TWENTY);

  map.put((K)THREE,(V)THIRTY);

  final MapIterator<K,V> it=map.mapIterator();

  it.next();

  it.next();

  it.next();

  it.setValue((V)"NewValue");

  assertEquals(3,map.size());

  assertTrue(map.containsKey(ONE));

  assertTrue(map.containsKey(TWO));

  assertTrue(map.containsKey(THREE));

  assertEquals(TEN,map.get(ONE));

  assertEquals(TWENTY,map.get(TWO));

  assertEquals("NewValue",map.get(THREE));

}

Location: Flat3MapTest.java

Content: 

public void testNewInstance1(){

  final Map<Integer,Integer> orig=new HashMap<>();

  orig.put(ONE,ONE);

  orig.put(TWO,TWO);

  final Flat3Map<Integer,Integer> m=new Flat3Map<>(orig);

  assertEquals(orig,m);

  assertEquals(2,m.size());

}

Location: Flat3MapTest.java

Content: 

public void testPut1(){

  final Flat3Map<Integer,Integer> m=new Flat3Map<>();

  m.put(ONE,ONE);

  m.put(TWO,TWO);

  m.put(null,THREE);

  final Object old=m.put(null,ONE);

  assertEquals(THREE,old);

  assertEquals(ONE,m.get(null));

}

Location: Flat3MapTest.java

Content: 

public void testPut2(){

  final Flat3Map<Integer,Integer> m=new Flat3Map<>();

  m.put(ONE,ONE);

  m.put(null,THREE);

  final Object old=m.put(null,ONE);

  assertEquals(THREE,old);

  assertEquals(ONE,m.get(null));

}

Location: Flat3MapTest.java

Content: 

public void testPut3(){

  final Flat3Map<Integer,Integer> m=new Flat3Map<>();

  m.put(null,THREE);

  final Object old=m.put(null,ONE);

  assertEquals(THREE,old);

  assertNull(m.get(ONE));

}

Location: Flat3MapTest.java

Content: 

public void testPut4(){

  final Flat3Map<Integer,Integer> m=new Flat3Map<>();

  m.put(ONE,ONE);

  m.put(TWO,TWO);

  m.put(THREE,THREE);

  final Object old=m.put(THREE,ONE);

  assertEquals(THREE,old);

  assertEquals(ONE,m.get(THREE));

}

Location: Flat3MapTest.java

Content: 

public void testPut5(){

  final Flat3Map<Integer,Integer> m=new Flat3Map<>();

  m.put(ONE,ONE);

  m.put(TWO,THREE);

  final Object old=m.put(TWO,ONE);

  assertEquals(THREE,old);

  assertEquals(ONE,m.get(TWO));

}

Location: Flat3MapTest.java

Content: 

public void testPut6(){

  final Flat3Map<Integer,Integer> m=new Flat3Map<>();

  m.put(ONE,THREE);

  final Object old=m.put(ONE,ONE);

  assertEquals(THREE,old);

  assertEquals(ONE,m.get(ONE));

}

Location: Flat3MapTest.java

Content: 

public void testRemove1(){

  final Flat3Map<Integer,Integer> m=new Flat3Map<>();

  Object obj=m.remove(44);

  assertNull(obj);

  m.put(ONE,ONE);

  obj=m.remove(ONE);

  assertSame(ONE,obj);

  assertEquals(0,m.size());

  obj=m.get(ONE);

  assertNull(obj);

  m.put(ONE,ONE);

  m.put(TWO,TWO);

  m.put(THREE,THREE);

  obj=m.remove(ONE);

  assertSame(ONE,obj);

  obj=m.get(ONE);

  assertNull(obj);

  obj=m.get(TWO);

  assertSame(TWO,obj);

}

Location: Flat3MapTest.java

Content: 

public void testRemove10(){

  final Flat3Map<Integer,Integer> m=new Flat3Map<>();

  final Object obj;

  m.put(ONE,ONE);

  m.put(TWO,TWO);

  obj=m.remove(null);

  assertNull(obj);

}

Location: Flat3MapTest.java

Content: 

public void testRemove11(){

  final Flat3Map<Integer,Integer> m=new Flat3Map<>();

  final Object obj;

  m.put(ONE,ONE);

  m.put(TWO,TWO);

  m.put(THREE,THREE);

  obj=m.remove(null);

  assertNull(obj);

}

Location: Flat3MapTest.java

Content: 

public void testRemove12(){

  final Flat3Map<Integer,Integer> m=new Flat3Map<>();

  final Object obj;

  m.put(ONE,ONE);

  m.put(TWO,TWO);

  m.put(THREE,THREE);

  obj=m.remove(42);

  assertNull(obj);

}

Location: Flat3MapTest.java

Content: 

public void testRemove13(){

  final Flat3Map<Integer,Integer> m=new Flat3Map<>();

  final Object obj;

  m.put(ONE,ONE);

  m.put(TWO,TWO);

  obj=m.remove(42);

  assertNull(obj);

}

Location: Flat3MapTest.java

Content: 

public void testRemove2(){

  final Flat3Map<Integer,Integer> m=new Flat3Map<>();

  Object obj;

  m.put(ONE,ONE);

  m.put(TWO,TWO);

  m.put(THREE,THREE);

  obj=m.remove(ONE);

  assertSame(ONE,obj);

  obj=m.get(ONE);

  assertNull(obj);

  obj=m.get(TWO);

  assertSame(TWO,obj);

  obj=m.get(THREE);

  assertSame(THREE,obj);

}

Location: Flat3MapTest.java

Content: 

public void testRemove3(){

  final Flat3Map<Integer,Integer> m=new Flat3Map<>();

  Object obj;

  m.put(ONE,ONE);

  m.put(TWO,TWO);

  m.put(THREE,THREE);

  obj=m.remove(TWO);

  assertSame(TWO,obj);

  obj=m.get(ONE);

  assertSame(ONE,obj);

  obj=m.get(TWO);

  assertNull(obj);

  obj=m.get(THREE);

  assertSame(THREE,obj);

}

Location: Flat3MapTest.java

Content: 

public void testRemove4(){

  final Flat3Map<Integer,Integer> m=new Flat3Map<>();

  Object obj;

  m.put(ONE,ONE);

  m.put(TWO,TWO);

  m.put(THREE,THREE);

  obj=m.remove(THREE);

  assertSame(THREE,obj);

  obj=m.get(ONE);

  assertSame(ONE,obj);

  obj=m.get(TWO);

  assertSame(TWO,obj);

  obj=m.get(THREE);

  assertNull(obj);

}

Location: Flat3MapTest.java

Content: 

public void testRemove5(){

  final Flat3Map<Integer,Integer> m=new Flat3Map<>();

  Object obj;

  m.put(null,ONE);

  obj=m.remove(null);

  assertSame(ONE,obj);

  obj=m.get(null);

  assertNull(obj);

}

Location: Flat3MapTest.java

Content: 

public void testRemove6(){

  final Flat3Map<Integer,Integer> m=new Flat3Map<>();

  Object obj;

  m.put(ONE,ONE);

  m.put(null,TWO);

  obj=m.remove(null);

  assertSame(TWO,obj);

  obj=m.get(ONE);

  assertSame(ONE,obj);

  obj=m.get(null);

  assertNull(obj);

}

Location: Flat3MapTest.java

Content: 

public void testRemove7(){

  final Flat3Map<Integer,Integer> m=new Flat3Map<>();

  Object obj;

  m.put(null,ONE);

  m.put(TWO,TWO);

  obj=m.remove(null);

  assertSame(ONE,obj);

  obj=m.get(null);

  assertNull(obj);

  obj=m.get(TWO);

  assertSame(TWO,obj);

}

Location: Flat3MapTest.java

Content: 

public void testRemove8(){

  final Flat3Map<Integer,Integer> m=new Flat3Map<>();

  Object obj;

  m.put(ONE,ONE);

  m.put(TWO,TWO);

  m.put(null,THREE);

  obj=m.remove(null);

  assertSame(THREE,obj);

  obj=m.get(ONE);

  assertSame(ONE,obj);

  obj=m.get(TWO);

  assertSame(TWO,obj);

  obj=m.get(null);

  assertNull(obj);

}

Location: Flat3MapTest.java

Content: 

public void testRemove9(){

  final Flat3Map<Integer,Integer> m=new Flat3Map<>();

  final Object obj;

  m.put(ONE,ONE);

  obj=m.remove(null);

  assertNull(obj);

}

Location: Flat3MapTest.java

Content: 

public void testSerialisation0() throws Exception {

  final Flat3Map<K,V> map=makeObject();

  final ByteArrayOutputStream bout=new ByteArrayOutputStream();

  final ObjectOutputStream out=new ObjectOutputStream(bout);

  out.writeObject(map);

  final byte[] bytes=bout.toByteArray();

  out.close();

  final ByteArrayInputStream bin=new ByteArrayInputStream(bytes);

  final ObjectInputStream in=new ObjectInputStream(bin);

  final Flat3Map<?,?> ser=(Flat3Map<?,?>)in.readObject();

  in.close();

  assertEquals(0,map.size());

  assertEquals(0,ser.size());

}

Location: Flat3MapTest.java

Content: 

@SuppressWarnings("unchecked") public void testSerialisation2() throws Exception {

  final Flat3Map<K,V> map=makeObject();

  map.put((K)ONE,(V)TEN);

  map.put((K)TWO,(V)TWENTY);

  final ByteArrayOutputStream bout=new ByteArrayOutputStream();

  final ObjectOutputStream out=new ObjectOutputStream(bout);

  out.writeObject(map);

  final byte[] bytes=bout.toByteArray();

  out.close();

  final ByteArrayInputStream bin=new ByteArrayInputStream(bytes);

  final ObjectInputStream in=new ObjectInputStream(bin);

  final Flat3Map<?,?> ser=(Flat3Map<?,?>)in.readObject();

  in.close();

  assertEquals(2,map.size());

  assertEquals(2,ser.size());

  assertTrue(ser.containsKey(ONE));

  assertTrue(ser.containsKey(TWO));

  assertEquals(TEN,ser.get(ONE));

  assertEquals(TWENTY,ser.get(TWO));

}

Location: Flat3MapTest.java

Content: 

@SuppressWarnings("unchecked") public void testSerialisation4() throws Exception {

  final Flat3Map<K,V> map=makeObject();

  map.put((K)ONE,(V)TEN);

  map.put((K)TWO,(V)TWENTY);

  map.put((K)TEN,(V)ONE);

  map.put((K)TWENTY,(V)TWO);

  final ByteArrayOutputStream bout=new ByteArrayOutputStream();

  final ObjectOutputStream out=new ObjectOutputStream(bout);

  out.writeObject(map);

  final byte[] bytes=bout.toByteArray();

  out.close();

  final ByteArrayInputStream bin=new ByteArrayInputStream(bytes);

  final ObjectInputStream in=new ObjectInputStream(bin);

  final Flat3Map<?,?> ser=(Flat3Map<?,?>)in.readObject();

  in.close();

  assertEquals(4,map.size());

  assertEquals(4,ser.size());

  assertTrue(ser.containsKey(ONE));

  assertTrue(ser.containsKey(TWO));

  assertTrue(ser.containsKey(TEN));

  assertTrue(ser.containsKey(TWENTY));

  assertEquals(TEN,ser.get(ONE));

  assertEquals(TWENTY,ser.get(TWO));

  assertEquals(ONE,ser.get(TEN));

  assertEquals(TWO,ser.get(TWENTY));

}

Location: Flat3MapTest.java

Content: 

@Override public BulkTest bulkTestMapIterator(){

  return new TestFlatMapIterator();

}

Location: Flat3MapTest.java

Content: 

public Flat3MapTest(final String testName){

  super(testName);

}

Location: Flat3MapTest.java

Content: 

private void putAndRemove(final Map<K,V> map){

  map.put((K)"A",(V)"one");

  map.put((K)"B",(V)"two");

  map.put((K)"C",(V)"three");

  final Iterator<Map.Entry<K,V>> it=map.entrySet().iterator();

  final Map.Entry<K,V> mapEntry1=it.next();

  final Map.Entry<K,V> mapEntry2=it.next();

  final Map.Entry<K,V> mapEntry3=it.next();

  it.remove();

  assertEquals(2,map.size());

  assertEquals("one",map.get("A"));

  assertEquals("two",map.get("B"));

  assertNull(map.get("C"));

}

Location: Flat3MapTest.java

Content: 

@SuppressWarnings("unchecked") public void testClone2(){

  final Flat3Map<K,V> map=makeObject();

  assertEquals(0,map.size());

  map.put((K)ONE,(V)TEN);

  map.put((K)TWO,(V)TWENTY);

  assertEquals(2,map.size());

  assertTrue(map.containsKey(ONE));

  assertTrue(map.containsKey(TWO));

  assertSame(TEN,map.get(ONE));

  assertSame(TWENTY,map.get(TWO));

  final Flat3Map<K,V> cloned=map.clone();

  assertEquals(2,cloned.size());

  assertTrue(cloned.containsKey(ONE));

  assertTrue(cloned.containsKey(TWO));

  assertSame(TEN,cloned.get(ONE));

  assertSame(TWENTY,cloned.get(TWO));

  map.put((K)TEN,(V)ONE);

  map.put((K)TWENTY,(V)TWO);

  assertEquals(4,map.size());

  assertEquals(2,cloned.size());

  assertTrue(cloned.containsKey(ONE));

  assertTrue(cloned.containsKey(TWO));

  assertSame(TEN,cloned.get(ONE));

  assertSame(TWENTY,cloned.get(TWO));

}

Location: Flat3MapTest.java

Content: 

@SuppressWarnings("unchecked") public void testClone4(){

  final Flat3Map<K,V> map=makeObject();

  assertEquals(0,map.size());

  map.put((K)ONE,(V)TEN);

  map.put((K)TWO,(V)TWENTY);

  map.put((K)TEN,(V)ONE);

  map.put((K)TWENTY,(V)TWO);

  final Flat3Map<K,V> cloned=map.clone();

  assertEquals(4,map.size());

  assertEquals(4,cloned.size());

  assertTrue(cloned.containsKey(ONE));

  assertTrue(cloned.containsKey(TWO));

  assertTrue(cloned.containsKey(TEN));

  assertTrue(cloned.containsKey(TWENTY));

  assertSame(TEN,cloned.get(ONE));

  assertSame(TWENTY,cloned.get(TWO));

  assertSame(ONE,cloned.get(TEN));

  assertSame(TWO,cloned.get(TWENTY));

  map.clear();

  assertEquals(0,map.size());

  assertEquals(4,cloned.size());

  assertTrue(cloned.containsKey(ONE));

  assertTrue(cloned.containsKey(TWO));

  assertTrue(cloned.containsKey(TEN));

  assertTrue(cloned.containsKey(TWENTY));

  assertSame(TEN,cloned.get(ONE));

  assertSame(TWENTY,cloned.get(TWO));

  assertSame(ONE,cloned.get(TEN));

  assertSame(TWO,cloned.get(TWENTY));

}

Location: Flat3MapTest.java

Content: 

public void testCollections261(){

  final Flat3Map<Integer,Integer> m=new Flat3Map<>();

  m.put(Integer.valueOf(1),Integer.valueOf(1));

  m.put(Integer.valueOf(0),Integer.valueOf(0));

  assertEquals(Integer.valueOf(1),m.remove(Integer.valueOf(1)));

  assertEquals(Integer.valueOf(0),m.remove(Integer.valueOf(0)));

  m.put(Integer.valueOf(2),Integer.valueOf(2));

  m.put(Integer.valueOf(1),Integer.valueOf(1));

  m.put(Integer.valueOf(0),Integer.valueOf(0));

  assertEquals(Integer.valueOf(2),m.remove(Integer.valueOf(2)));

  assertEquals(Integer.valueOf(1),m.remove(Integer.valueOf(1)));

  assertEquals(Integer.valueOf(0),m.remove(Integer.valueOf(0)));

}

Location: Flat3MapTest.java

Content: 

public void testContainsKey1(){

  final Flat3Map<Integer,Integer> m=new Flat3Map<>();

  m.put(ONE,ONE);

  m.put(TWO,TWO);

  m.put(null,THREE);

  final boolean contains=m.containsKey(null);

  assertTrue(contains);

}

Location: Flat3MapTest.java

Content: 

public void testContainsKey2(){

  final Flat3Map<Integer,Integer> m=new Flat3Map<>();

  m.put(ONE,ONE);

  m.put(null,TWO);

  final boolean contains=m.containsKey(null);

  assertTrue(contains);

}

Location: Flat3MapTest.java

Content: 

public void testContainsKey3(){

  final Flat3Map<Integer,Integer> m=new Flat3Map<>();

  m.put(null,ONE);

  final boolean contains=m.containsKey(null);

  assertTrue(contains);

}

Location: Flat3MapTest.java

Content: 

public void testContainsValue1(){

  final Flat3Map<Integer,Integer> m=new Flat3Map<>();

  m.put(ONE,ONE);

  m.put(TWO,TWO);

  m.put(THREE,null);

  final boolean contains=m.containsValue(null);

  assertTrue(contains);

}

Location: Flat3MapTest.java

Content: 

public void testContainsValue2(){

  final Flat3Map<Integer,Integer> m=new Flat3Map<>();

  m.put(ONE,ONE);

  m.put(TWO,null);

  final boolean contains=m.containsValue(null);

  assertTrue(contains);

}

Location: Flat3MapTest.java

Content: 

public void testContainsValue3(){

  final Flat3Map<Integer,Integer> m=new Flat3Map<>();

  m.put(ONE,null);

  final boolean contains=m.containsValue(null);

  assertTrue(contains);

}

Location: Flat3MapTest.java

Content: 

@SuppressWarnings("unchecked") public void testEntryIteratorSetValue1() throws Exception {

  final Flat3Map<K,V> map=makeObject();

  map.put((K)ONE,(V)TEN);

  map.put((K)TWO,(V)TWENTY);

  map.put((K)THREE,(V)THIRTY);

  final Iterator<Map.Entry<K,V>> it=map.entrySet().iterator();

  final Map.Entry<K,V> entry=it.next();

  entry.setValue((V)"NewValue");

  assertEquals(3,map.size());

  assertTrue(map.containsKey(ONE));

  assertTrue(map.containsKey(TWO));

  assertTrue(map.containsKey(THREE));

  assertEquals("NewValue",map.get(ONE));

  assertEquals(TWENTY,map.get(TWO));

  assertEquals(THIRTY,map.get(THREE));

}

Location: Flat3MapTest.java

Content: 

@SuppressWarnings("unchecked") public void testEntryIteratorSetValue2() throws Exception {

  final Flat3Map<K,V> map=makeObject();

  map.put((K)ONE,(V)TEN);

  map.put((K)TWO,(V)TWENTY);

  map.put((K)THREE,(V)THIRTY);

  final Iterator<Map.Entry<K,V>> it=map.entrySet().iterator();

  it.next();

  final Map.Entry<K,V> entry=it.next();

  entry.setValue((V)"NewValue");

  assertEquals(3,map.size());

  assertTrue(map.containsKey(ONE));

  assertTrue(map.containsKey(TWO));

  assertTrue(map.containsKey(THREE));

  assertEquals(TEN,map.get(ONE));

  assertEquals("NewValue",map.get(TWO));

  assertEquals(THIRTY,map.get(THREE));

}

Location: Flat3MapTest.java

Content: 

@SuppressWarnings("unchecked") public void testEntryIteratorSetValue3() throws Exception {

  final Flat3Map<K,V> map=makeObject();

  map.put((K)ONE,(V)TEN);

  map.put((K)TWO,(V)TWENTY);

  map.put((K)THREE,(V)THIRTY);

  final Iterator<Map.Entry<K,V>> it=map.entrySet().iterator();

  it.next();

  it.next();

  final Map.Entry<K,V> entry=it.next();

  entry.setValue((V)"NewValue");

  assertEquals(3,map.size());

  assertTrue(map.containsKey(ONE));

  assertTrue(map.containsKey(TWO));

  assertTrue(map.containsKey(THREE));

  assertEquals(TEN,map.get(ONE));

  assertEquals(TWENTY,map.get(TWO));

  assertEquals("NewValue",map.get(THREE));

}

Location: Flat3MapTest.java

Content: 

@SuppressWarnings("unchecked") public void testEquals1(){

  final Flat3Map<K,V> map1=makeObject();

  map1.put((K)"a",(V)"testA");

  map1.put((K)"b",(V)"testB");

  final Flat3Map<K,V> map2=makeObject();

  map2.put((K)"a",(V)"testB");

  map2.put((K)"b",(V)"testA");

  assertFalse(map1.equals(map2));

}

Location: Flat3MapTest.java

Content: 

@SuppressWarnings("unchecked") public void testEquals2(){

  final Flat3Map<K,V> map1=makeObject();

  map1.put((K)"a",(V)"testA");

  map1.put((K)"b",(V)"testB");

  final Flat3Map<K,V> map2=makeObject();

  map2.put((K)"a",(V)"testB");

  map2.put((K)"c",(V)"testA");

  assertFalse(map1.equals(map2));

}

Location: Flat3MapTest.java

Content: 

public void testGet1(){

  final Flat3Map<Integer,Integer> m=new Flat3Map<>();

  final Object obj;

  m.put(null,ONE);

  obj=m.get(null);

  assertSame(ONE,obj);

}

Location: Flat3MapTest.java

Content: 

public void testGet2(){

  final Flat3Map<Integer,Integer> m=new Flat3Map<>();

  final Object obj;

  m.put(ONE,ONE);

  m.put(null,TWO);

  obj=m.get(null);

  assertSame(TWO,obj);

}

Location: Flat3MapTest.java

Content: 

public void testGet3(){

  final Flat3Map<Integer,Integer> m=new Flat3Map<>();

  final Object obj;

  m.put(ONE,ONE);

  m.put(TWO,TWO);

  m.put(null,THREE);

  obj=m.get(null);

  assertSame(THREE,obj);

}

Location: Flat3MapTest.java

Content: 

@SuppressWarnings("unchecked") public void testMapIteratorSetValue1() throws Exception {

  final Flat3Map<K,V> map=makeObject();

  map.put((K)ONE,(V)TEN);

  map.put((K)TWO,(V)TWENTY);

  map.put((K)THREE,(V)THIRTY);

  final MapIterator<K,V> it=map.mapIterator();

  it.next();

  it.setValue((V)"NewValue");

  assertEquals(3,map.size());

  assertTrue(map.containsKey(ONE));

  assertTrue(map.containsKey(TWO));

  assertTrue(map.containsKey(THREE));

  assertEquals("NewValue",map.get(ONE));

  assertEquals(TWENTY,map.get(TWO));

  assertEquals(THIRTY,map.get(THREE));

}

Location: Flat3MapTest.java

Content: 

@SuppressWarnings("unchecked") public void testMapIteratorSetValue2() throws Exception {

  final Flat3Map<K,V> map=makeObject();

  map.put((K)ONE,(V)TEN);

  map.put((K)TWO,(V)TWENTY);

  map.put((K)THREE,(V)THIRTY);

  final MapIterator<K,V> it=map.mapIterator();

  it.next();

  it.next();

  it.setValue((V)"NewValue");

  assertEquals(3,map.size());

  assertTrue(map.containsKey(ONE));

  assertTrue(map.containsKey(TWO));

  assertTrue(map.containsKey(THREE));

  assertEquals(TEN,map.get(ONE));

  assertEquals("NewValue",map.get(TWO));

  assertEquals(THIRTY,map.get(THREE));

}

Location: Flat3MapTest.java

Content: 

@SuppressWarnings("unchecked") public void testMapIteratorSetValue3() throws Exception {

  final Flat3Map<K,V> map=makeObject();

  map.put((K)ONE,(V)TEN);

  map.put((K)TWO,(V)TWENTY);

  map.put((K)THREE,(V)THIRTY);

  final MapIterator<K,V> it=map.mapIterator();

  it.next();

  it.next();

  it.next();

  it.setValue((V)"NewValue");

  assertEquals(3,map.size());

  assertTrue(map.containsKey(ONE));

  assertTrue(map.containsKey(TWO));

  assertTrue(map.containsKey(THREE));

  assertEquals(TEN,map.get(ONE));

  assertEquals(TWENTY,map.get(TWO));

  assertEquals("NewValue",map.get(THREE));

}

Location: Flat3MapTest.java

Content: 

public void testNewInstance1(){

  final Map<Integer,Integer> orig=new HashMap<>();

  orig.put(ONE,ONE);

  orig.put(TWO,TWO);

  final Flat3Map<Integer,Integer> m=new Flat3Map<>(orig);

  assertEquals(orig,m);

  assertEquals(2,m.size());

}

Location: Flat3MapTest.java

Content: 

public void testPut1(){

  final Flat3Map<Integer,Integer> m=new Flat3Map<>();

  m.put(ONE,ONE);

  m.put(TWO,TWO);

  m.put(null,THREE);

  final Object old=m.put(null,ONE);

  assertEquals(THREE,old);

  assertEquals(ONE,m.get(null));

}

Location: Flat3MapTest.java

Content: 

public void testPut2(){

  final Flat3Map<Integer,Integer> m=new Flat3Map<>();

  m.put(ONE,ONE);

  m.put(null,THREE);

  final Object old=m.put(null,ONE);

  assertEquals(THREE,old);

  assertEquals(ONE,m.get(null));

}

Location: Flat3MapTest.java

Content: 

public void testPut3(){

  final Flat3Map<Integer,Integer> m=new Flat3Map<>();

  m.put(null,THREE);

  final Object old=m.put(null,ONE);

  assertEquals(THREE,old);

  assertNull(m.get(ONE));

}

Location: Flat3MapTest.java

Content: 

public void testPut4(){

  final Flat3Map<Integer,Integer> m=new Flat3Map<>();

  m.put(ONE,ONE);

  m.put(TWO,TWO);

  m.put(THREE,THREE);

  final Object old=m.put(THREE,ONE);

  assertEquals(THREE,old);

  assertEquals(ONE,m.get(THREE));

}

Location: Flat3MapTest.java

Content: 

public void testPut5(){

  final Flat3Map<Integer,Integer> m=new Flat3Map<>();

  m.put(ONE,ONE);

  m.put(TWO,THREE);

  final Object old=m.put(TWO,ONE);

  assertEquals(THREE,old);

  assertEquals(ONE,m.get(TWO));

}

Location: Flat3MapTest.java

Content: 

public void testPut6(){

  final Flat3Map<Integer,Integer> m=new Flat3Map<>();

  m.put(ONE,THREE);

  final Object old=m.put(ONE,ONE);

  assertEquals(THREE,old);

  assertEquals(ONE,m.get(ONE));

}

Location: Flat3MapTest.java

Content: 

public void testRemove1(){

  final Flat3Map<Integer,Integer> m=new Flat3Map<>();

  Object obj=m.remove(44);

  assertNull(obj);

  m.put(ONE,ONE);

  obj=m.remove(ONE);

  assertSame(ONE,obj);

  assertEquals(0,m.size());

  obj=m.get(ONE);

  assertNull(obj);

  m.put(ONE,ONE);

  m.put(TWO,TWO);

  m.put(THREE,THREE);

  obj=m.remove(ONE);

  assertSame(ONE,obj);

  obj=m.get(ONE);

  assertNull(obj);

  obj=m.get(TWO);

  assertSame(TWO,obj);

}

Location: Flat3MapTest.java

Content: 

public void testRemove10(){

  final Flat3Map<Integer,Integer> m=new Flat3Map<>();

  final Object obj;

  m.put(ONE,ONE);

  m.put(TWO,TWO);

  obj=m.remove(null);

  assertNull(obj);

}

Location: Flat3MapTest.java

Content: 

public void testRemove11(){

  final Flat3Map<Integer,Integer> m=new Flat3Map<>();

  final Object obj;

  m.put(ONE,ONE);

  m.put(TWO,TWO);

  m.put(THREE,THREE);

  obj=m.remove(null);

  assertNull(obj);

}

Location: Flat3MapTest.java

Content: 

public void testRemove12(){

  final Flat3Map<Integer,Integer> m=new Flat3Map<>();

  final Object obj;

  m.put(ONE,ONE);

  m.put(TWO,TWO);

  m.put(THREE,THREE);

  obj=m.remove(42);

  assertNull(obj);

}

Location: Flat3MapTest.java

Content: 

public void testRemove13(){

  final Flat3Map<Integer,Integer> m=new Flat3Map<>();

  final Object obj;

  m.put(ONE,ONE);

  m.put(TWO,TWO);

  obj=m.remove(42);

  assertNull(obj);

}

Location: Flat3MapTest.java

Content: 

public void testRemove2(){

  final Flat3Map<Integer,Integer> m=new Flat3Map<>();

  Object obj;

  m.put(ONE,ONE);

  m.put(TWO,TWO);

  m.put(THREE,THREE);

  obj=m.remove(ONE);

  assertSame(ONE,obj);

  obj=m.get(ONE);

  assertNull(obj);

  obj=m.get(TWO);

  assertSame(TWO,obj);

  obj=m.get(THREE);

  assertSame(THREE,obj);

}

Location: Flat3MapTest.java

Content: 

public void testRemove3(){

  final Flat3Map<Integer,Integer> m=new Flat3Map<>();

  Object obj;

  m.put(ONE,ONE);

  m.put(TWO,TWO);

  m.put(THREE,THREE);

  obj=m.remove(TWO);

  assertSame(TWO,obj);

  obj=m.get(ONE);

  assertSame(ONE,obj);

  obj=m.get(TWO);

  assertNull(obj);

  obj=m.get(THREE);

  assertSame(THREE,obj);

}

Location: Flat3MapTest.java

Content: 

public void testRemove4(){

  final Flat3Map<Integer,Integer> m=new Flat3Map<>();

  Object obj;

  m.put(ONE,ONE);

  m.put(TWO,TWO);

  m.put(THREE,THREE);

  obj=m.remove(THREE);

  assertSame(THREE,obj);

  obj=m.get(ONE);

  assertSame(ONE,obj);

  obj=m.get(TWO);

  assertSame(TWO,obj);

  obj=m.get(THREE);

  assertNull(obj);

}

Location: Flat3MapTest.java

Content: 

public void testRemove5(){

  final Flat3Map<Integer,Integer> m=new Flat3Map<>();

  Object obj;

  m.put(null,ONE);

  obj=m.remove(null);

  assertSame(ONE,obj);

  obj=m.get(null);

  assertNull(obj);

}

Location: Flat3MapTest.java

Content: 

public void testRemove6(){

  final Flat3Map<Integer,Integer> m=new Flat3Map<>();

  Object obj;

  m.put(ONE,ONE);

  m.put(null,TWO);

  obj=m.remove(null);

  assertSame(TWO,obj);

  obj=m.get(ONE);

  assertSame(ONE,obj);

  obj=m.get(null);

  assertNull(obj);

}

Location: Flat3MapTest.java

Content: 

public void testRemove7(){

  final Flat3Map<Integer,Integer> m=new Flat3Map<>();

  Object obj;

  m.put(null,ONE);

  m.put(TWO,TWO);

  obj=m.remove(null);

  assertSame(ONE,obj);

  obj=m.get(null);

  assertNull(obj);

  obj=m.get(TWO);

  assertSame(TWO,obj);

}

Location: Flat3MapTest.java

Content: 

public void testRemove8(){

  final Flat3Map<Integer,Integer> m=new Flat3Map<>();

  Object obj;

  m.put(ONE,ONE);

  m.put(TWO,TWO);

  m.put(null,THREE);

  obj=m.remove(null);

  assertSame(THREE,obj);

  obj=m.get(ONE);

  assertSame(ONE,obj);

  obj=m.get(TWO);

  assertSame(TWO,obj);

  obj=m.get(null);

  assertNull(obj);

}

Location: Flat3MapTest.java

Content: 

public void testRemove9(){

  final Flat3Map<Integer,Integer> m=new Flat3Map<>();

  final Object obj;

  m.put(ONE,ONE);

  obj=m.remove(null);

  assertNull(obj);

}

Location: Flat3MapTest.java

Content: 

public void testSerialisation0() throws Exception {

  final Flat3Map<K,V> map=makeObject();

  final ByteArrayOutputStream bout=new ByteArrayOutputStream();

  final ObjectOutputStream out=new ObjectOutputStream(bout);

  out.writeObject(map);

  final byte[] bytes=bout.toByteArray();

  out.close();

  final ByteArrayInputStream bin=new ByteArrayInputStream(bytes);

  final ObjectInputStream in=new ObjectInputStream(bin);

  final Flat3Map<?,?> ser=(Flat3Map<?,?>)in.readObject();

  in.close();

  assertEquals(0,map.size());

  assertEquals(0,ser.size());

}

Location: Flat3MapTest.java

Content: 

@SuppressWarnings("unchecked") public void testSerialisation2() throws Exception {

  final Flat3Map<K,V> map=makeObject();

  map.put((K)ONE,(V)TEN);

  map.put((K)TWO,(V)TWENTY);

  final ByteArrayOutputStream bout=new ByteArrayOutputStream();

  final ObjectOutputStream out=new ObjectOutputStream(bout);

  out.writeObject(map);

  final byte[] bytes=bout.toByteArray();

  out.close();

  final ByteArrayInputStream bin=new ByteArrayInputStream(bytes);

  final ObjectInputStream in=new ObjectInputStream(bin);

  final Flat3Map<?,?> ser=(Flat3Map<?,?>)in.readObject();

  in.close();

  assertEquals(2,map.size());

  assertEquals(2,ser.size());

  assertTrue(ser.containsKey(ONE));

  assertTrue(ser.containsKey(TWO));

  assertEquals(TEN,ser.get(ONE));

  assertEquals(TWENTY,ser.get(TWO));

}

Location: Flat3MapTest.java

Content: 

@SuppressWarnings("unchecked") public void testSerialisation4() throws Exception {

  final Flat3Map<K,V> map=makeObject();

  map.put((K)ONE,(V)TEN);

  map.put((K)TWO,(V)TWENTY);

  map.put((K)TEN,(V)ONE);

  map.put((K)TWENTY,(V)TWO);

  final ByteArrayOutputStream bout=new ByteArrayOutputStream();

  final ObjectOutputStream out=new ObjectOutputStream(bout);

  out.writeObject(map);

  final byte[] bytes=bout.toByteArray();

  out.close();

  final ByteArrayInputStream bin=new ByteArrayInputStream(bytes);

  final ObjectInputStream in=new ObjectInputStream(bin);

  final Flat3Map<?,?> ser=(Flat3Map<?,?>)in.readObject();

  in.close();

  assertEquals(4,map.size());

  assertEquals(4,ser.size());

  assertTrue(ser.containsKey(ONE));

  assertTrue(ser.containsKey(TWO));

  assertTrue(ser.containsKey(TEN));

  assertTrue(ser.containsKey(TWENTY));

  assertEquals(TEN,ser.get(ONE));

  assertEquals(TWENTY,ser.get(TWO));

  assertEquals(ONE,ser.get(TEN));

  assertEquals(TWO,ser.get(TWENTY));

}

