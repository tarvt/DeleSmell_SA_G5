Location: MultiMapUtilsTest.java

Content: 

@Test public void testEmptyIfNull(){

  assertTrue(MultiMapUtils.emptyIfNull(null).isEmpty());

  final MultiValuedMap<String,String> map=new ArrayListValuedHashMap<>();

  map.put("item","value");

  assertFalse(MultiMapUtils.emptyIfNull(map).isEmpty());

}

Location: MultiMapUtilsTest.java

Content: 

@Test @SuppressWarnings({"unchecked","rawtypes"}) public void testEmptyUnmodifiableMultiValuedMap(){

  final MultiValuedMap map=MultiMapUtils.EMPTY_MULTI_VALUED_MAP;

  assertTrue(map.isEmpty());

  try {

    map.put("key","value");

    fail("Should throw UnsupportedOperationException");

  }

 catch (  final UnsupportedOperationException e) {

  }

}

Location: MultiMapUtilsTest.java

Content: 

@Test public void testGetValuesAsBag(){

  assertNull(MultiMapUtils.getValuesAsBag(null,"key1"));

  final String values[]={"v1","v2","v3"};

  final MultiValuedMap<String,String> map=new ArrayListValuedHashMap<>();

  for (  final String val : values) {

    map.put("key1",val);

    map.put("key1",val);

  }

  final Bag<String> bag=MultiMapUtils.getValuesAsBag(map,"key1");

  assertEquals(6,bag.size());

  for (  final String val : values) {

    assertTrue(bag.contains(val));

    assertEquals(2,bag.getCount(val));

  }

}

Location: MultiMapUtilsTest.java

Content: 

@Test public void testGetValuesAsList(){

  assertNull(MultiMapUtils.getValuesAsList(null,"key1"));

  final String[] values={"v1","v2","v3"};

  final MultiValuedMap<String,String> map=new ArrayListValuedHashMap<>();

  for (  final String val : values) {

    map.put("key1",val);

  }

  final List<String> list=MultiMapUtils.getValuesAsList(map,"key1");

  assertEquals(Arrays.asList(values),list);

}

Location: MultiMapUtilsTest.java

Content: 

@Test public void testGetValuesAsSet(){

  assertNull(MultiMapUtils.getValuesAsList(null,"key1"));

  final String[] values={"v1","v2","v3"};

  final MultiValuedMap<String,String> map=new ArrayListValuedHashMap<>();

  for (  final String val : values) {

    map.put("key1",val);

    map.put("key1",val);

  }

  final Set<String> set=MultiMapUtils.getValuesAsSet(map,"key1");

  assertEquals(new HashSet<>(Arrays.asList(values)),set);

}

Location: MultiMapUtilsTest.java

Content: 

@Test public void testIsEmptyWithEmptyMap(){

  assertTrue(MultiMapUtils.isEmpty(new ArrayListValuedHashMap<>()));

}

Location: MultiMapUtilsTest.java

Content: 

@Test public void testIsEmptyWithNonEmptyMap(){

  final MultiValuedMap<String,String> map=new ArrayListValuedHashMap<>();

  map.put("item","value");

  assertFalse(MultiMapUtils.isEmpty(map));

}

Location: MultiMapUtilsTest.java

Content: 

@Test public void testIsEmptyWithNull(){

  assertTrue(MultiMapUtils.isEmpty(null));

}

Location: MultiMapUtilsTest.java

Content: 

@Test public void testTypeSafeEmptyMultiValuedMap(){

  final MultiValuedMap<String,String> map=MultiMapUtils.<String,String>emptyMultiValuedMap();

  assertTrue(map.isEmpty());

  try {

    map.put("key","value");

    fail("Should throw UnsupportedOperationException");

  }

 catch (  final UnsupportedOperationException e) {

  }

}

Location: MultiMapUtilsTest.java

Content: 

@Test public void testEmptyIfNull(){

  assertTrue(MultiMapUtils.emptyIfNull(null).isEmpty());

  final MultiValuedMap<String,String> map=new ArrayListValuedHashMap<>();

  map.put("item","value");

  assertFalse(MultiMapUtils.emptyIfNull(map).isEmpty());

}

Location: MultiMapUtilsTest.java

Content: 

@Test @SuppressWarnings({"unchecked","rawtypes"}) public void testEmptyUnmodifiableMultiValuedMap(){

  final MultiValuedMap map=MultiMapUtils.EMPTY_MULTI_VALUED_MAP;

  assertTrue(map.isEmpty());

  try {

    map.put("key","value");

    fail("Should throw UnsupportedOperationException");

  }

 catch (  final UnsupportedOperationException e) {

  }

}

Location: MultiMapUtilsTest.java

Content: 

@Test public void testGetValuesAsBag(){

  assertNull(MultiMapUtils.getValuesAsBag(null,"key1"));

  final String values[]={"v1","v2","v3"};

  final MultiValuedMap<String,String> map=new ArrayListValuedHashMap<>();

  for (  final String val : values) {

    map.put("key1",val);

    map.put("key1",val);

  }

  final Bag<String> bag=MultiMapUtils.getValuesAsBag(map,"key1");

  assertEquals(6,bag.size());

  for (  final String val : values) {

    assertTrue(bag.contains(val));

    assertEquals(2,bag.getCount(val));

  }

}

Location: MultiMapUtilsTest.java

Content: 

@Test public void testGetValuesAsList(){

  assertNull(MultiMapUtils.getValuesAsList(null,"key1"));

  final String[] values={"v1","v2","v3"};

  final MultiValuedMap<String,String> map=new ArrayListValuedHashMap<>();

  for (  final String val : values) {

    map.put("key1",val);

  }

  final List<String> list=MultiMapUtils.getValuesAsList(map,"key1");

  assertEquals(Arrays.asList(values),list);

}

Location: MultiMapUtilsTest.java

Content: 

@Test public void testGetValuesAsSet(){

  assertNull(MultiMapUtils.getValuesAsList(null,"key1"));

  final String[] values={"v1","v2","v3"};

  final MultiValuedMap<String,String> map=new ArrayListValuedHashMap<>();

  for (  final String val : values) {

    map.put("key1",val);

    map.put("key1",val);

  }

  final Set<String> set=MultiMapUtils.getValuesAsSet(map,"key1");

  assertEquals(new HashSet<>(Arrays.asList(values)),set);

}

Location: MultiMapUtilsTest.java

Content: 

@Test public void testIsEmptyWithEmptyMap(){

  assertTrue(MultiMapUtils.isEmpty(new ArrayListValuedHashMap<>()));

}

Location: MultiMapUtilsTest.java

Content: 

@Test public void testIsEmptyWithNonEmptyMap(){

  final MultiValuedMap<String,String> map=new ArrayListValuedHashMap<>();

  map.put("item","value");

  assertFalse(MultiMapUtils.isEmpty(map));

}

Location: MultiMapUtilsTest.java

Content: 

@Test public void testIsEmptyWithNull(){

  assertTrue(MultiMapUtils.isEmpty(null));

}

Location: MultiMapUtilsTest.java

Content: 

@Test public void testTypeSafeEmptyMultiValuedMap(){

  final MultiValuedMap<String,String> map=MultiMapUtils.<String,String>emptyMultiValuedMap();

  assertTrue(map.isEmpty());

  try {

    map.put("key","value");

    fail("Should throw UnsupportedOperationException");

  }

 catch (  final UnsupportedOperationException e) {

  }

}

