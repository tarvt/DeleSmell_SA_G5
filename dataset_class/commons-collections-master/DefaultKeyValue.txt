Location: DefaultKeyValue.java

Content: 

/** 

 * Constructs a new pair with a null key and null value.

 */

public DefaultKeyValue(){

  super(null,null);

}

Location: DefaultKeyValue.java

Content: 

/** 

 * Constructs a new pair from the specified  {@code KeyValue}.

 * @param pair  the pair to copy, must not be null

 * @throws NullPointerException if the entry is null

 */

public DefaultKeyValue(final KeyValue<? extends K,? extends V> pair){

  super(pair.getKey(),pair.getValue());

}

Location: DefaultKeyValue.java

Content: 

/** 

 * Constructs a new pair with the specified key and given value.

 * @param key  the key for the entry, may be null

 * @param value  the value for the entry, may be null

 */

public DefaultKeyValue(final K key,final V value){

  super(key,value);

}

Location: DefaultKeyValue.java

Content: 

/** 

 * Constructs a new pair from the specified  {@code Map.Entry}.

 * @param entry  the entry to copy, must not be null

 * @throws NullPointerException if the entry is null

 */

public DefaultKeyValue(final Map.Entry<? extends K,? extends V> entry){

  super(entry.getKey(),entry.getValue());

}

Location: DefaultKeyValue.java

Content: 

/** 

 * Returns a new  {@code Map.Entry} object with key and value from this pair.

 * @return a MapEntry instance

 */

public Map.Entry<K,V> toMapEntry(){

  return new DefaultMapEntry<>(this);

}

Location: DefaultKeyValue.java

Content: 

/** 

 * Constructs a new pair with a null key and null value.

 */

public DefaultKeyValue(){

  super(null,null);

}

Location: DefaultKeyValue.java

Content: 

/** 

 * Constructs a new pair from the specified  {@code KeyValue}.

 * @param pair  the pair to copy, must not be null

 * @throws NullPointerException if the entry is null

 */

public DefaultKeyValue(final KeyValue<? extends K,? extends V> pair){

  super(pair.getKey(),pair.getValue());

}

Location: DefaultKeyValue.java

Content: 

/** 

 * Constructs a new pair with the specified key and given value.

 * @param key  the key for the entry, may be null

 * @param value  the value for the entry, may be null

 */

public DefaultKeyValue(final K key,final V value){

  super(key,value);

}

Location: DefaultKeyValue.java

Content: 

/** 

 * Constructs a new pair from the specified  {@code Map.Entry}.

 * @param entry  the entry to copy, must not be null

 * @throws NullPointerException if the entry is null

 */

public DefaultKeyValue(final Map.Entry<? extends K,? extends V> entry){

  super(entry.getKey(),entry.getValue());

}

Location: DefaultKeyValue.java

Content: 

/** 

 * Returns a new  {@code Map.Entry} object with key and value from this pair.

 * @return a MapEntry instance

 */

public Map.Entry<K,V> toMapEntry(){

  return new DefaultMapEntry<>(this);

}

