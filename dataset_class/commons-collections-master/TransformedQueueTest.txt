Location: TransformedQueueTest.java

Content: 

public void testTransformedQueue(){

  final Queue<Object> queue=TransformedQueue.transformingQueue(new LinkedList<>(),TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER);

  assertEquals(0,queue.size());

  final Object[] elements=new Object[]{"1","3","5","7","2","4","6"};

  for (int i=0; i < elements.length; i++) {

    queue.add(elements[i]);

    assertEquals(i + 1,queue.size());

    assertTrue(queue.contains(Integer.valueOf((String)elements[i])));

    assertFalse(queue.contains(elements[i]));

  }

  assertFalse(queue.remove(elements[0]));

  assertTrue(queue.remove(Integer.valueOf((String)elements[0])));

}

Location: TransformedQueueTest.java

Content: 

@SuppressWarnings({"rawtypes","unchecked"}) public void testTransformedQueue_decorateTransform(){

  final Queue originalQueue=new LinkedList();

  final Object[] elements=new Object[]{"1","3","5","7","2","4","6"};

  Collections.addAll(originalQueue,elements);

  final Queue<?> queue=TransformedQueue.transformedQueue(originalQueue,TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER);

  assertEquals(elements.length,queue.size());

  for (  final Object el : elements) {

    assertTrue(queue.contains(Integer.valueOf((String)el)));

    assertFalse(queue.contains(el));

  }

  assertFalse(queue.remove(elements[0]));

  assertTrue(queue.remove(Integer.valueOf((String)elements[0])));

}

Location: TransformedQueueTest.java

Content: 

public TransformedQueueTest(final String testName){

  super(testName);

}

Location: TransformedQueueTest.java

Content: 

public void testTransformedQueue(){

  final Queue<Object> queue=TransformedQueue.transformingQueue(new LinkedList<>(),TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER);

  assertEquals(0,queue.size());

  final Object[] elements=new Object[]{"1","3","5","7","2","4","6"};

  for (int i=0; i < elements.length; i++) {

    queue.add(elements[i]);

    assertEquals(i + 1,queue.size());

    assertTrue(queue.contains(Integer.valueOf((String)elements[i])));

    assertFalse(queue.contains(elements[i]));

  }

  assertFalse(queue.remove(elements[0]));

  assertTrue(queue.remove(Integer.valueOf((String)elements[0])));

}

Location: TransformedQueueTest.java

Content: 

@SuppressWarnings({"rawtypes","unchecked"}) public void testTransformedQueue_decorateTransform(){

  final Queue originalQueue=new LinkedList();

  final Object[] elements=new Object[]{"1","3","5","7","2","4","6"};

  Collections.addAll(originalQueue,elements);

  final Queue<?> queue=TransformedQueue.transformedQueue(originalQueue,TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER);

  assertEquals(elements.length,queue.size());

  for (  final Object el : elements) {

    assertTrue(queue.contains(Integer.valueOf((String)el)));

    assertFalse(queue.contains(el));

  }

  assertFalse(queue.remove(elements[0]));

  assertTrue(queue.remove(Integer.valueOf((String)elements[0])));

}

Location: TransformedQueueTest.java

Content: 

public TransformedQueueTest(final String testName){

  super(testName);

}

