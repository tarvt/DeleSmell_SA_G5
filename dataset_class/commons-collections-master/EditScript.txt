Location: EditScript.java

Content: 

/** 

 * Add a delete command to the script.

 * @param command  command to add

 */

public void append(final DeleteCommand<T> command){

  commands.add(command);

  ++modifications;

}

Location: EditScript.java

Content: 

/** 

 * Add an insert command to the script.

 * @param command  command to add

 */

public void append(final InsertCommand<T> command){

  commands.add(command);

  ++modifications;

}

Location: EditScript.java

Content: 

/** 

 * Add a keep command to the script.

 * @param command  command to add

 */

public void append(final KeepCommand<T> command){

  commands.add(command);

  ++lcsLength;

}

Location: EditScript.java

Content: 

/** 

 * Simple constructor. Creates a new empty script.

 */

public EditScript(){

  commands=new ArrayList<>();

  lcsLength=0;

  modifications=0;

}

Location: EditScript.java

Content: 

/** 

 * Get the length of the Longest Common Subsequence (LCS). The length of the longest common subsequence is the number of  {@link KeepCommand keepcommands} in the script.

 * @return length of the Longest Common Subsequence

 */

public int getLCSLength(){

  return lcsLength;

}

Location: EditScript.java

Content: 

/** 

 * Get the number of effective modifications. The number of effective modification is the number of  {@link DeleteCommand delete} and{@link InsertCommand insert} commands in the script.

 * @return number of effective modifications

 */

public int getModifications(){

  return modifications;

}

Location: EditScript.java

Content: 

/** 

 * Visit the script. The script implements the <em>visitor</em> design pattern, this method is the entry point to which the user supplies its own visitor, the script will be responsible to drive it through the commands in order and call the appropriate method as each command is encountered.

 * @param visitor  the visitor that will visit all commands in turn

 */

public void visit(final CommandVisitor<T> visitor){

  for (  final EditCommand<T> command : commands) {

    command.accept(visitor);

  }

}

Location: EditScript.java

Content: 

/** 

 * Add a delete command to the script.

 * @param command  command to add

 */

public void append(final DeleteCommand<T> command){

  commands.add(command);

  ++modifications;

}

Location: EditScript.java

Content: 

/** 

 * Add an insert command to the script.

 * @param command  command to add

 */

public void append(final InsertCommand<T> command){

  commands.add(command);

  ++modifications;

}

Location: EditScript.java

Content: 

/** 

 * Add a keep command to the script.

 * @param command  command to add

 */

public void append(final KeepCommand<T> command){

  commands.add(command);

  ++lcsLength;

}

Location: EditScript.java

Content: 

/** 

 * Simple constructor. Creates a new empty script.

 */

public EditScript(){

  commands=new ArrayList<>();

  lcsLength=0;

  modifications=0;

}

Location: EditScript.java

Content: 

/** 

 * Get the length of the Longest Common Subsequence (LCS). The length of the longest common subsequence is the number of  {@link KeepCommand keepcommands} in the script.

 * @return length of the Longest Common Subsequence

 */

public int getLCSLength(){

  return lcsLength;

}

Location: EditScript.java

Content: 

/** 

 * Get the number of effective modifications. The number of effective modification is the number of  {@link DeleteCommand delete} and{@link InsertCommand insert} commands in the script.

 * @return number of effective modifications

 */

public int getModifications(){

  return modifications;

}

Location: EditScript.java

Content: 

/** 

 * Visit the script. The script implements the <em>visitor</em> design pattern, this method is the entry point to which the user supplies its own visitor, the script will be responsible to drive it through the commands in order and call the appropriate method as each command is encountered.

 * @param visitor  the visitor that will visit all commands in turn

 */

public void visit(final CommandVisitor<T> visitor){

  for (  final EditCommand<T> command : commands) {

    command.accept(visitor);

  }

}

