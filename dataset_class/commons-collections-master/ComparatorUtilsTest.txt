Location: ComparatorUtilsTest.java

Content: 

@Test public void booleanComparator(){

  Comparator<Boolean> comp=ComparatorUtils.booleanComparator(true);

  assertTrue(comp.compare(Boolean.TRUE,Boolean.FALSE) < 0);

  assertEquals(0,comp.compare(Boolean.TRUE,Boolean.TRUE));

  assertTrue(comp.compare(Boolean.FALSE,Boolean.TRUE) > 0);

  comp=ComparatorUtils.booleanComparator(false);

  assertTrue(comp.compare(Boolean.TRUE,Boolean.FALSE) > 0);

  assertEquals(0,comp.compare(Boolean.TRUE,Boolean.TRUE));

  assertTrue(comp.compare(Boolean.FALSE,Boolean.TRUE) < 0);

}

Location: ComparatorUtilsTest.java

Content: 

@Test public void chainedComparator(){

  final Comparator<Integer> comp=ComparatorUtils.chainedComparator(ComparatorUtils.<Integer>naturalComparator(),ComparatorUtils.naturalComparator());

  assertTrue(comp.compare(1,2) < 0);

  assertEquals(0,comp.compare(1,1));

  assertTrue(comp.compare(2,1) > 0);

}

Location: ComparatorUtilsTest.java

Content: 

@Test public void max(){

  final Comparator<Integer> reversed=ComparatorUtils.reversedComparator(ComparatorUtils.<Integer>naturalComparator());

  assertEquals(Integer.valueOf(10),ComparatorUtils.max(1,10,null));

  assertEquals(Integer.valueOf(10),ComparatorUtils.max(10,-10,null));

  assertEquals(Integer.valueOf(1),ComparatorUtils.max(1,10,reversed));

  assertEquals(Integer.valueOf(-10),ComparatorUtils.max(10,-10,reversed));

  try {

    ComparatorUtils.max(1,null,null);

    fail("expecting NullPointerException");

  }

 catch (  final NullPointerException npe) {

  }

  try {

    ComparatorUtils.max(null,10,null);

    fail("expecting NullPointerException");

  }

 catch (  final NullPointerException npe) {

  }

}

Location: ComparatorUtilsTest.java

Content: 

@Test public void min(){

  final Comparator<Integer> reversed=ComparatorUtils.reversedComparator(ComparatorUtils.<Integer>naturalComparator());

  assertEquals(Integer.valueOf(1),ComparatorUtils.min(1,10,null));

  assertEquals(Integer.valueOf(-10),ComparatorUtils.min(10,-10,null));

  assertEquals(Integer.valueOf(10),ComparatorUtils.min(1,10,reversed));

  assertEquals(Integer.valueOf(10),ComparatorUtils.min(10,-10,reversed));

  try {

    ComparatorUtils.min(1,null,null);

    fail("expecting NullPointerException");

  }

 catch (  final NullPointerException npe) {

  }

  try {

    ComparatorUtils.min(null,10,null);

    fail("expecting NullPointerException");

  }

 catch (  final NullPointerException npe) {

  }

}

Location: ComparatorUtilsTest.java

Content: 

@Test public void nullHighComparator(){

  final Comparator<Integer> comp=ComparatorUtils.nullHighComparator(null);

  assertTrue(comp.compare(null,10) > 0);

  assertEquals(0,comp.compare(null,null));

  assertTrue(comp.compare(10,null) < 0);

}

Location: ComparatorUtilsTest.java

Content: 

@Test public void nullLowComparator(){

  final Comparator<Integer> comp=ComparatorUtils.nullLowComparator(null);

  assertTrue(comp.compare(null,10) < 0);

  assertEquals(0,comp.compare(null,null));

  assertTrue(comp.compare(10,null) > 0);

}

Location: ComparatorUtilsTest.java

Content: 

@Test public void booleanComparator(){

  Comparator<Boolean> comp=ComparatorUtils.booleanComparator(true);

  assertTrue(comp.compare(Boolean.TRUE,Boolean.FALSE) < 0);

  assertEquals(0,comp.compare(Boolean.TRUE,Boolean.TRUE));

  assertTrue(comp.compare(Boolean.FALSE,Boolean.TRUE) > 0);

  comp=ComparatorUtils.booleanComparator(false);

  assertTrue(comp.compare(Boolean.TRUE,Boolean.FALSE) > 0);

  assertEquals(0,comp.compare(Boolean.TRUE,Boolean.TRUE));

  assertTrue(comp.compare(Boolean.FALSE,Boolean.TRUE) < 0);

}

Location: ComparatorUtilsTest.java

Content: 

@Test public void chainedComparator(){

  final Comparator<Integer> comp=ComparatorUtils.chainedComparator(ComparatorUtils.<Integer>naturalComparator(),ComparatorUtils.naturalComparator());

  assertTrue(comp.compare(1,2) < 0);

  assertEquals(0,comp.compare(1,1));

  assertTrue(comp.compare(2,1) > 0);

}

Location: ComparatorUtilsTest.java

Content: 

@Test public void max(){

  final Comparator<Integer> reversed=ComparatorUtils.reversedComparator(ComparatorUtils.<Integer>naturalComparator());

  assertEquals(Integer.valueOf(10),ComparatorUtils.max(1,10,null));

  assertEquals(Integer.valueOf(10),ComparatorUtils.max(10,-10,null));

  assertEquals(Integer.valueOf(1),ComparatorUtils.max(1,10,reversed));

  assertEquals(Integer.valueOf(-10),ComparatorUtils.max(10,-10,reversed));

  try {

    ComparatorUtils.max(1,null,null);

    fail("expecting NullPointerException");

  }

 catch (  final NullPointerException npe) {

  }

  try {

    ComparatorUtils.max(null,10,null);

    fail("expecting NullPointerException");

  }

 catch (  final NullPointerException npe) {

  }

}

Location: ComparatorUtilsTest.java

Content: 

@Test public void min(){

  final Comparator<Integer> reversed=ComparatorUtils.reversedComparator(ComparatorUtils.<Integer>naturalComparator());

  assertEquals(Integer.valueOf(1),ComparatorUtils.min(1,10,null));

  assertEquals(Integer.valueOf(-10),ComparatorUtils.min(10,-10,null));

  assertEquals(Integer.valueOf(10),ComparatorUtils.min(1,10,reversed));

  assertEquals(Integer.valueOf(10),ComparatorUtils.min(10,-10,reversed));

  try {

    ComparatorUtils.min(1,null,null);

    fail("expecting NullPointerException");

  }

 catch (  final NullPointerException npe) {

  }

  try {

    ComparatorUtils.min(null,10,null);

    fail("expecting NullPointerException");

  }

 catch (  final NullPointerException npe) {

  }

}

Location: ComparatorUtilsTest.java

Content: 

@Test public void nullHighComparator(){

  final Comparator<Integer> comp=ComparatorUtils.nullHighComparator(null);

  assertTrue(comp.compare(null,10) > 0);

  assertEquals(0,comp.compare(null,null));

  assertTrue(comp.compare(10,null) < 0);

}

Location: ComparatorUtilsTest.java

Content: 

@Test public void nullLowComparator(){

  final Comparator<Integer> comp=ComparatorUtils.nullLowComparator(null);

  assertTrue(comp.compare(null,10) < 0);

  assertEquals(0,comp.compare(null,null));

  assertTrue(comp.compare(10,null) > 0);

}

