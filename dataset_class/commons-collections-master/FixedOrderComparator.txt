Location: FixedOrderComparator.java

Content: 

/** 

 * Adds a new item, which compares as equal to the given existing item.

 * @param existingObj  an item already in the Comparator's set ofknown objects

 * @param newObj  an item to be added to the Comparator's set ofknown objects

 * @return true if newObj has been added for the first time, false ifit was already known to the Comparator.

 * @throws IllegalArgumentException if existingObject is not in theComparator's set of known objects.

 * @throws UnsupportedOperationException if a comparison has already been made

 */

public boolean addAsEqual(final T existingObj,final T newObj){

  checkLocked();

  final Integer position=map.get(existingObj);

  if (position == null) {

    throw new IllegalArgumentException(existingObj + " not known to " + this);

  }

  final Integer result=map.put(newObj,position);

  return result == null;

}

Location: FixedOrderComparator.java

Content: 

/** 

 * Adds an item, which compares as after all items known to the Comparator. If the item is already known to the Comparator, its old position is replaced with the new position.

 * @param obj  the item to be added to the Comparator.

 * @return true if obj has been added for the first time, false ifit was already known to the Comparator.

 * @throws UnsupportedOperationException if a comparison has already been made

 */

public boolean add(final T obj){

  checkLocked();

  final Integer position=map.put(obj,Integer.valueOf(counter++));

  return position == null;

}

Location: FixedOrderComparator.java

Content: 

/** 

 * Compares two objects according to the order of this Comparator. <p> It is important to note that this class will throw an IllegalArgumentException in the case of an unrecognized object. This is not specified in the Comparator interface, but is the most appropriate exception.

 * @param obj1  the first object to compare

 * @param obj2  the second object to compare

 * @return negative if obj1 is less, positive if greater, zero if equal

 * @throws IllegalArgumentException if obj1 or obj2 are not knownto this Comparator and an alternative behavior has not been set via  {@link #setUnknownObjectBehavior(UnknownObjectBehavior)}.

 */

@Override public int compare(final T obj1,final T obj2){

  isLocked=true;

  final Integer position1=map.get(obj1);

  final Integer position2=map.get(obj2);

  if (position1 == null || position2 == null) {

switch (unknownObjectBehavior) {

case BEFORE:

      return position1 == null ? position2 == null ? 0 : -1 : 1;

case AFTER:

    return position1 == null ? position2 == null ? 0 : 1 : -1;

case EXCEPTION:

  final Object unknownObj=position1 == null ? obj1 : obj2;

throw new IllegalArgumentException("Attempting to compare unknown object " + unknownObj);

default :

throw new UnsupportedOperationException("Unknown unknownObjectBehavior: " + unknownObjectBehavior);

}

}

return position1.compareTo(position2);

}

Location: FixedOrderComparator.java

Content: 

/** 

 * Constructs an empty FixedOrderComparator.

 */

public FixedOrderComparator(){

}

Location: FixedOrderComparator.java

Content: 

/** 

 * Constructs a FixedOrderComparator which uses the order of the given list to compare the objects. <p> The list is copied, so later changes will not affect the comparator.

 * @param items  the items that the comparator can compare in order

 * @throws NullPointerException if the list is null

 */

public FixedOrderComparator(final List<T> items){

  for (  final T t : Objects.requireNonNull(items,"items")) {

    add(t);

  }

}

Location: FixedOrderComparator.java

Content: 

/** 

 * Constructs a FixedOrderComparator which uses the order of the given array to compare the objects. <p> The array is copied, so later changes will not affect the comparator.

 * @param items  the items that the comparator can compare in order

 * @throws NullPointerException if the array is null

 */

public FixedOrderComparator(final T... items){

  for (  final T item : Objects.requireNonNull(items,"items")) {

    add(item);

  }

}

Location: FixedOrderComparator.java

Content: 

/** 

 * Gets the behavior for comparing unknown objects.

 * @return {@link UnknownObjectBehavior}

 */

public UnknownObjectBehavior getUnknownObjectBehavior(){

  return unknownObjectBehavior;

}

Location: FixedOrderComparator.java

Content: 

/** 

 * Sets the behavior for comparing unknown objects.

 * @param unknownObjectBehavior  the flag for unknown behavior -UNKNOWN_AFTER, UNKNOWN_BEFORE or UNKNOWN_THROW_EXCEPTION

 * @throws UnsupportedOperationException if a comparison has been performed

 * @throws NullPointerException if unknownObjectBehavior is null

 */

public void setUnknownObjectBehavior(final UnknownObjectBehavior unknownObjectBehavior){

  checkLocked();

  this.unknownObjectBehavior=Objects.requireNonNull(unknownObjectBehavior,"unknownObjectBehavior");

}

Location: FixedOrderComparator.java

Content: 

/** 

 * Adds a new item, which compares as equal to the given existing item.

 * @param existingObj  an item already in the Comparator's set ofknown objects

 * @param newObj  an item to be added to the Comparator's set ofknown objects

 * @return true if newObj has been added for the first time, false ifit was already known to the Comparator.

 * @throws IllegalArgumentException if existingObject is not in theComparator's set of known objects.

 * @throws UnsupportedOperationException if a comparison has already been made

 */

public boolean addAsEqual(final T existingObj,final T newObj){

  checkLocked();

  final Integer position=map.get(existingObj);

  if (position == null) {

    throw new IllegalArgumentException(existingObj + " not known to " + this);

  }

  final Integer result=map.put(newObj,position);

  return result == null;

}

Location: FixedOrderComparator.java

Content: 

/** 

 * Adds an item, which compares as after all items known to the Comparator. If the item is already known to the Comparator, its old position is replaced with the new position.

 * @param obj  the item to be added to the Comparator.

 * @return true if obj has been added for the first time, false ifit was already known to the Comparator.

 * @throws UnsupportedOperationException if a comparison has already been made

 */

public boolean add(final T obj){

  checkLocked();

  final Integer position=map.put(obj,Integer.valueOf(counter++));

  return position == null;

}

Location: FixedOrderComparator.java

Content: 

/** 

 * Compares two objects according to the order of this Comparator. <p> It is important to note that this class will throw an IllegalArgumentException in the case of an unrecognized object. This is not specified in the Comparator interface, but is the most appropriate exception.

 * @param obj1  the first object to compare

 * @param obj2  the second object to compare

 * @return negative if obj1 is less, positive if greater, zero if equal

 * @throws IllegalArgumentException if obj1 or obj2 are not knownto this Comparator and an alternative behavior has not been set via  {@link #setUnknownObjectBehavior(UnknownObjectBehavior)}.

 */

@Override public int compare(final T obj1,final T obj2){

  isLocked=true;

  final Integer position1=map.get(obj1);

  final Integer position2=map.get(obj2);

  if (position1 == null || position2 == null) {

switch (unknownObjectBehavior) {

case BEFORE:

      return position1 == null ? position2 == null ? 0 : -1 : 1;

case AFTER:

    return position1 == null ? position2 == null ? 0 : 1 : -1;

case EXCEPTION:

  final Object unknownObj=position1 == null ? obj1 : obj2;

throw new IllegalArgumentException("Attempting to compare unknown object " + unknownObj);

default :

throw new UnsupportedOperationException("Unknown unknownObjectBehavior: " + unknownObjectBehavior);

}

}

return position1.compareTo(position2);

}

Location: FixedOrderComparator.java

Content: 

/** 

 * Constructs an empty FixedOrderComparator.

 */

public FixedOrderComparator(){

}

Location: FixedOrderComparator.java

Content: 

/** 

 * Constructs a FixedOrderComparator which uses the order of the given list to compare the objects. <p> The list is copied, so later changes will not affect the comparator.

 * @param items  the items that the comparator can compare in order

 * @throws NullPointerException if the list is null

 */

public FixedOrderComparator(final List<T> items){

  for (  final T t : Objects.requireNonNull(items,"items")) {

    add(t);

  }

}

Location: FixedOrderComparator.java

Content: 

/** 

 * Constructs a FixedOrderComparator which uses the order of the given array to compare the objects. <p> The array is copied, so later changes will not affect the comparator.

 * @param items  the items that the comparator can compare in order

 * @throws NullPointerException if the array is null

 */

public FixedOrderComparator(final T... items){

  for (  final T item : Objects.requireNonNull(items,"items")) {

    add(item);

  }

}

Location: FixedOrderComparator.java

Content: 

/** 

 * Gets the behavior for comparing unknown objects.

 * @return {@link UnknownObjectBehavior}

 */

public UnknownObjectBehavior getUnknownObjectBehavior(){

  return unknownObjectBehavior;

}

Location: FixedOrderComparator.java

Content: 

/** 

 * Sets the behavior for comparing unknown objects.

 * @param unknownObjectBehavior  the flag for unknown behavior -UNKNOWN_AFTER, UNKNOWN_BEFORE or UNKNOWN_THROW_EXCEPTION

 * @throws UnsupportedOperationException if a comparison has been performed

 * @throws NullPointerException if unknownObjectBehavior is null

 */

public void setUnknownObjectBehavior(final UnknownObjectBehavior unknownObjectBehavior){

  checkLocked();

  this.unknownObjectBehavior=Objects.requireNonNull(unknownObjectBehavior,"unknownObjectBehavior");

}

