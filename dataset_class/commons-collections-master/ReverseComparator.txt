Location: ReverseComparator.java

Content: 

/** 

 * Creates a comparator that compares objects based on the inverse of their natural ordering.  Using this Constructor will create a ReverseComparator that is functionally identical to the Comparator returned by java.util.Collections.<b>reverseOrder()</b>.

 * @see java.util.Collections#reverseOrder()

 */

public ReverseComparator(){

  this(null);

}

Location: ReverseComparator.java

Content: 

/** 

 * Creates a comparator that inverts the comparison of the given comparator.  If you pass in  {@code null}, the ReverseComparator defaults to reversing the natural order, as per  {@link java.util.Collections#reverseOrder()}.

 * @param comparator Comparator to reverse

 */

public ReverseComparator(final Comparator<? super E> comparator){

  this.comparator=comparator == null ? ComparatorUtils.NATURAL_COMPARATOR : comparator;

}

Location: ReverseComparator.java

Content: 

/** 

 * Creates a comparator that compares objects based on the inverse of their natural ordering.  Using this Constructor will create a ReverseComparator that is functionally identical to the Comparator returned by java.util.Collections.<b>reverseOrder()</b>.

 * @see java.util.Collections#reverseOrder()

 */

public ReverseComparator(){

  this(null);

}

Location: ReverseComparator.java

Content: 

/** 

 * Creates a comparator that inverts the comparison of the given comparator.  If you pass in  {@code null}, the ReverseComparator defaults to reversing the natural order, as per  {@link java.util.Collections#reverseOrder()}.

 * @param comparator Comparator to reverse

 */

public ReverseComparator(final Comparator<? super E> comparator){

  this.comparator=comparator == null ? ComparatorUtils.NATURAL_COMPARATOR : comparator;

}

