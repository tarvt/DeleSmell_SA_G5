Location: ZippingIterator.java

Content: 

/** 

 * Constructs a new  {@code ZippingIterator} that will provideinterleaved iteration of the specified iterators.

 * @param iterators  the array of iterators

 * @throws NullPointerException if any iterator is null

 */

public ZippingIterator(final Iterator<? extends E>... iterators){

  final List<Iterator<? extends E>> list=new ArrayList<>();

  for (  final Iterator<? extends E> iterator : iterators) {

    Objects.requireNonNull(iterator,"iterator");

    list.add(iterator);

  }

  this.iterators=FluentIterable.of(list).loop().iterator();

}

Location: ZippingIterator.java

Content: 

/** 

 * Constructs a new  {@code ZippingIterator} that will provideinterleaved iteration over the two given iterators.

 * @param a  the first child iterator

 * @param b  the second child iterator

 * @throws NullPointerException if either iterator is null

 */

@SuppressWarnings("unchecked") public ZippingIterator(final Iterator<? extends E> a,final Iterator<? extends E> b){

  this(new Iterator[]{a,b});

}

Location: ZippingIterator.java

Content: 

/** 

 * Constructs a new  {@code ZippingIterator} that will provideinterleaved iteration over the three given iterators.

 * @param a  the first child iterator

 * @param b  the second child iterator

 * @param c  the third child iterator

 * @throws NullPointerException if either iterator is null

 */

@SuppressWarnings("unchecked") public ZippingIterator(final Iterator<? extends E> a,final Iterator<? extends E> b,final Iterator<? extends E> c){

  this(new Iterator[]{a,b,c});

}

Location: ZippingIterator.java

Content: 

/** 

 * Constructs a new  {@code ZippingIterator} that will provideinterleaved iteration of the specified iterators.

 * @param iterators  the array of iterators

 * @throws NullPointerException if any iterator is null

 */

public ZippingIterator(final Iterator<? extends E>... iterators){

  final List<Iterator<? extends E>> list=new ArrayList<>();

  for (  final Iterator<? extends E> iterator : iterators) {

    Objects.requireNonNull(iterator,"iterator");

    list.add(iterator);

  }

  this.iterators=FluentIterable.of(list).loop().iterator();

}

Location: ZippingIterator.java

Content: 

/** 

 * Constructs a new  {@code ZippingIterator} that will provideinterleaved iteration over the two given iterators.

 * @param a  the first child iterator

 * @param b  the second child iterator

 * @throws NullPointerException if either iterator is null

 */

@SuppressWarnings("unchecked") public ZippingIterator(final Iterator<? extends E> a,final Iterator<? extends E> b){

  this(new Iterator[]{a,b});

}

Location: ZippingIterator.java

Content: 

/** 

 * Constructs a new  {@code ZippingIterator} that will provideinterleaved iteration over the three given iterators.

 * @param a  the first child iterator

 * @param b  the second child iterator

 * @param c  the third child iterator

 * @throws NullPointerException if either iterator is null

 */

@SuppressWarnings("unchecked") public ZippingIterator(final Iterator<? extends E> a,final Iterator<? extends E> b,final Iterator<? extends E> c){

  this(new Iterator[]{a,b,c});

}

