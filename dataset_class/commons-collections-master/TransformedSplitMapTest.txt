Location: TransformedSplitMapTest.java

Content: 

public void testEmptyMap() throws IOException, ClassNotFoundException {

  final TransformedSplitMap<String,String,String,String> map=TransformedSplitMap.transformingMap(new HashMap<String,String>(),NOPTransformer.<String>nopTransformer(),NOPTransformer.<String>nopTransformer());

  final ObjectInputStream in=new ObjectInputStream(new FileInputStream(TEST_DATA_PATH + "/TransformedSplitMap.emptyCollection.version4.obj"));

  final Object readObject=in.readObject();

  in.close();

  final TransformedSplitMap<?,?,?,?> readMap=(TransformedSplitMap<?,?,?,?>)readObject;

  assertTrue("Map should be empty",readMap.isEmpty());

  assertEquals(map.entrySet(),readMap.entrySet());

}

Location: TransformedSplitMapTest.java

Content: 

public void testFullMap() throws IOException, ClassNotFoundException {

  final TransformedSplitMap<String,String,String,String> map=TransformedSplitMap.transformingMap(new HashMap<String,String>(),NOPTransformer.<String>nopTransformer(),NOPTransformer.<String>nopTransformer());

  map.put("a","b");

  map.put("c","d");

  map.put("e","f");

  map.put("g","h");

  final ObjectInputStream in=new ObjectInputStream(new FileInputStream(TEST_DATA_PATH + "TransformedSplitMap.fullCollection.version4.obj"));

  final Object readObject=in.readObject();

  in.close();

  final TransformedSplitMap<?,?,?,?> readMap=(TransformedSplitMap<?,?,?,?>)readObject;

  assertFalse("Map should not be empty",readMap.isEmpty());

  assertEquals(map.entrySet(),readMap.entrySet());

}

Location: TransformedSplitMapTest.java

Content: 

public void testMapIterator(){

  final TransformedSplitMap<String,String,String,Integer> map=TransformedSplitMap.transformingMap(new HashMap<String,Integer>(),NOPTransformer.<String>nopTransformer(),stringToInt);

  assertEquals(0,map.size());

  for (int i=0; i < 6; i++) {

    map.put(String.valueOf(i),String.valueOf(i));

  }

  for (final MapIterator<String,Integer> it=map.mapIterator(); it.hasNext(); ) {

    final String k=it.next();

    assertEquals(k,it.getKey());

    assertEquals(map.get(k),it.getValue());

  }

}

Location: TransformedSplitMapTest.java

Content: 

public void testTransformedMap(){

  final TransformedSplitMap<Integer,String,Object,Class<?>> map=TransformedSplitMap.transformingMap(new HashMap<String,Class<?>>(),intToString,objectToClass);

  final Integer[] k=new Integer[]{0,1,2,3,4,5,6};

  final Object[] v=new Object[]{"",new Object(),new HashMap<>(),0,BigInteger.TEN,null,new Object[0]};

  assertEquals(0,map.size());

  for (int i=0; i < k.length; i++) {

    map.put(k[i],v[i]);

    assertEquals(i + 1,map.size());

    assertTrue(map.containsKey(intToString.transform(k[i])));

    assertFalse(map.containsKey(k[i]));

    assertTrue(map.containsValue(objectToClass.transform(v[i])));

    assertTrue(objectToClass.transform(v[i]) != v[i] ^ map.containsValue(v[i]));

    assertEquals(objectToClass.transform(v[i]),map.get(intToString.transform(k[i])));

  }

  int sz=map.size();

  assertNull(map.remove(k[0]));

  assertEquals(sz,map.size());

  assertEquals(objectToClass.transform(v[0]),map.remove(intToString.transform(k[0])));

  assertEquals(--sz,map.size());

  final TransformedSplitMap<String,String,String,Integer> map2=TransformedSplitMap.transformingMap(new HashMap<String,Integer>(),NOPTransformer.<String>nopTransformer(),stringToInt);

  assertEquals(0,map2.size());

  for (int i=0; i < 6; i++) {

    map2.put(String.valueOf(i),String.valueOf(i));

    assertEquals(i + 1,map2.size());

    assertTrue(map2.containsValue(i));

    assertFalse(map2.containsValue(String.valueOf(i)));

    assertTrue(map2.containsKey(String.valueOf(i)));

    assertEquals(i,map2.get(String.valueOf(i)).intValue());

  }

  int sz2=map2.size();

  assertEquals(Integer.valueOf(0),map2.remove("0"));

  assertEquals(--sz2,map2.size());

}

Location: TransformedSplitMapTest.java

Content: 

public TransformedSplitMapTest(final String testName){

  super(testName);

}

Location: TransformedSplitMapTest.java

Content: 

public void testEmptyMap() throws IOException, ClassNotFoundException {

  final TransformedSplitMap<String,String,String,String> map=TransformedSplitMap.transformingMap(new HashMap<String,String>(),NOPTransformer.<String>nopTransformer(),NOPTransformer.<String>nopTransformer());

  final ObjectInputStream in=new ObjectInputStream(new FileInputStream(TEST_DATA_PATH + "/TransformedSplitMap.emptyCollection.version4.obj"));

  final Object readObject=in.readObject();

  in.close();

  final TransformedSplitMap<?,?,?,?> readMap=(TransformedSplitMap<?,?,?,?>)readObject;

  assertTrue("Map should be empty",readMap.isEmpty());

  assertEquals(map.entrySet(),readMap.entrySet());

}

Location: TransformedSplitMapTest.java

Content: 

public void testFullMap() throws IOException, ClassNotFoundException {

  final TransformedSplitMap<String,String,String,String> map=TransformedSplitMap.transformingMap(new HashMap<String,String>(),NOPTransformer.<String>nopTransformer(),NOPTransformer.<String>nopTransformer());

  map.put("a","b");

  map.put("c","d");

  map.put("e","f");

  map.put("g","h");

  final ObjectInputStream in=new ObjectInputStream(new FileInputStream(TEST_DATA_PATH + "TransformedSplitMap.fullCollection.version4.obj"));

  final Object readObject=in.readObject();

  in.close();

  final TransformedSplitMap<?,?,?,?> readMap=(TransformedSplitMap<?,?,?,?>)readObject;

  assertFalse("Map should not be empty",readMap.isEmpty());

  assertEquals(map.entrySet(),readMap.entrySet());

}

Location: TransformedSplitMapTest.java

Content: 

public void testMapIterator(){

  final TransformedSplitMap<String,String,String,Integer> map=TransformedSplitMap.transformingMap(new HashMap<String,Integer>(),NOPTransformer.<String>nopTransformer(),stringToInt);

  assertEquals(0,map.size());

  for (int i=0; i < 6; i++) {

    map.put(String.valueOf(i),String.valueOf(i));

  }

  for (final MapIterator<String,Integer> it=map.mapIterator(); it.hasNext(); ) {

    final String k=it.next();

    assertEquals(k,it.getKey());

    assertEquals(map.get(k),it.getValue());

  }

}

Location: TransformedSplitMapTest.java

Content: 

public void testTransformedMap(){

  final TransformedSplitMap<Integer,String,Object,Class<?>> map=TransformedSplitMap.transformingMap(new HashMap<String,Class<?>>(),intToString,objectToClass);

  final Integer[] k=new Integer[]{0,1,2,3,4,5,6};

  final Object[] v=new Object[]{"",new Object(),new HashMap<>(),0,BigInteger.TEN,null,new Object[0]};

  assertEquals(0,map.size());

  for (int i=0; i < k.length; i++) {

    map.put(k[i],v[i]);

    assertEquals(i + 1,map.size());

    assertTrue(map.containsKey(intToString.transform(k[i])));

    assertFalse(map.containsKey(k[i]));

    assertTrue(map.containsValue(objectToClass.transform(v[i])));

    assertTrue(objectToClass.transform(v[i]) != v[i] ^ map.containsValue(v[i]));

    assertEquals(objectToClass.transform(v[i]),map.get(intToString.transform(k[i])));

  }

  int sz=map.size();

  assertNull(map.remove(k[0]));

  assertEquals(sz,map.size());

  assertEquals(objectToClass.transform(v[0]),map.remove(intToString.transform(k[0])));

  assertEquals(--sz,map.size());

  final TransformedSplitMap<String,String,String,Integer> map2=TransformedSplitMap.transformingMap(new HashMap<String,Integer>(),NOPTransformer.<String>nopTransformer(),stringToInt);

  assertEquals(0,map2.size());

  for (int i=0; i < 6; i++) {

    map2.put(String.valueOf(i),String.valueOf(i));

    assertEquals(i + 1,map2.size());

    assertTrue(map2.containsValue(i));

    assertFalse(map2.containsValue(String.valueOf(i)));

    assertTrue(map2.containsKey(String.valueOf(i)));

    assertEquals(i,map2.get(String.valueOf(i)).intValue());

  }

  int sz2=map2.size();

  assertEquals(Integer.valueOf(0),map2.remove("0"));

  assertEquals(--sz2,map2.size());

}

Location: TransformedSplitMapTest.java

Content: 

public TransformedSplitMapTest(final String testName){

  super(testName);

}

