Location: ArrayListIterator.java

Content: 

/** 

 * Constructs an ArrayListIterator that will iterate over the values in the specified array.

 * @param array the array to iterate over

 * @throws IllegalArgumentException if {@code array} is not an array.

 * @throws NullPointerException if {@code array} is {@code null}

 */

public ArrayListIterator(final Object array){

  super(array);

}

Location: ArrayListIterator.java

Content: 

/** 

 * Constructs an ArrayListIterator that will iterate over the values in the specified array from a specific start index.

 * @param array  the array to iterate over

 * @param startIndex  the index to start iterating at

 * @throws IllegalArgumentException if {@code array} is not an array.

 * @throws NullPointerException if {@code array} is {@code null}

 * @throws IndexOutOfBoundsException if the start index is out of bounds

 */

public ArrayListIterator(final Object array,final int startIndex){

  super(array,startIndex);

}

Location: ArrayListIterator.java

Content: 

/** 

 * Construct an ArrayListIterator that will iterate over a range of values in the specified array.

 * @param array  the array to iterate over

 * @param startIndex  the index to start iterating at

 * @param endIndex  the index (exclusive) to finish iterating at

 * @throws IllegalArgumentException if {@code array} is not an array.

 * @throws IndexOutOfBoundsException if the start or end index is out of bounds

 * @throws IllegalArgumentException if end index is before the start

 * @throws NullPointerException if {@code array} is {@code null}

 */

public ArrayListIterator(final Object array,final int startIndex,final int endIndex){

  super(array,startIndex,endIndex);

}

Location: ArrayListIterator.java

Content: 

/** 

 * Sets the element under the cursor. <p> This method sets the element that was returned by the last call to  {@link #next()} of {@link #previous()}. <p> <b>Note:</b>  {@link java.util.ListIterator} implementations that support{@code add()} and {@code remove()} only allow {@code set()} to be calledonce per call to  {@code next()} or {@code previous} (see the {@link java.util.ListIterator}javadoc for more details). Since this implementation does not support  {@code add()} or {@code remove()},  {@code set()} may becalled as often as desired.

 * @param o  the element to set

 * @throws IllegalStateException if {@link #next()} or {@link #previous()} has not been calledbefore  {@link #set(Object)}

 * @see java.util.ListIterator#set

 */

@Override public void set(final Object o){

  if (this.lastItemIndex == -1) {

    throw new IllegalStateException("must call next() or previous() before a call to set()");

  }

  Array.set(this.array,this.lastItemIndex,o);

}

Location: ArrayListIterator.java

Content: 

/** 

 * Constructs an ArrayListIterator that will iterate over the values in the specified array.

 * @param array the array to iterate over

 * @throws IllegalArgumentException if {@code array} is not an array.

 * @throws NullPointerException if {@code array} is {@code null}

 */

public ArrayListIterator(final Object array){

  super(array);

}

Location: ArrayListIterator.java

Content: 

/** 

 * Constructs an ArrayListIterator that will iterate over the values in the specified array from a specific start index.

 * @param array  the array to iterate over

 * @param startIndex  the index to start iterating at

 * @throws IllegalArgumentException if {@code array} is not an array.

 * @throws NullPointerException if {@code array} is {@code null}

 * @throws IndexOutOfBoundsException if the start index is out of bounds

 */

public ArrayListIterator(final Object array,final int startIndex){

  super(array,startIndex);

}

Location: ArrayListIterator.java

Content: 

/** 

 * Construct an ArrayListIterator that will iterate over a range of values in the specified array.

 * @param array  the array to iterate over

 * @param startIndex  the index to start iterating at

 * @param endIndex  the index (exclusive) to finish iterating at

 * @throws IllegalArgumentException if {@code array} is not an array.

 * @throws IndexOutOfBoundsException if the start or end index is out of bounds

 * @throws IllegalArgumentException if end index is before the start

 * @throws NullPointerException if {@code array} is {@code null}

 */

public ArrayListIterator(final Object array,final int startIndex,final int endIndex){

  super(array,startIndex,endIndex);

}

Location: ArrayListIterator.java

Content: 

/** 

 * Sets the element under the cursor. <p> This method sets the element that was returned by the last call to  {@link #next()} of {@link #previous()}. <p> <b>Note:</b>  {@link java.util.ListIterator} implementations that support{@code add()} and {@code remove()} only allow {@code set()} to be calledonce per call to  {@code next()} or {@code previous} (see the {@link java.util.ListIterator}javadoc for more details). Since this implementation does not support  {@code add()} or {@code remove()},  {@code set()} may becalled as often as desired.

 * @param o  the element to set

 * @throws IllegalStateException if {@link #next()} or {@link #previous()} has not been calledbefore  {@link #set(Object)}

 * @see java.util.ListIterator#set

 */

@Override public void set(final Object o){

  if (this.lastItemIndex == -1) {

    throw new IllegalStateException("must call next() or previous() before a call to set()");

  }

  Array.set(this.array,this.lastItemIndex,o);

}

