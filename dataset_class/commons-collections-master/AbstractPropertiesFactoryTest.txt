Location: AbstractPropertiesFactoryTest.java

Content: 

protected AbstractPropertiesFactoryTest(final AbstractPropertiesFactory<T> factory,final String fileExtension){

  this.factory=factory;

  this.fileExtension=fileExtension;

  this.pathString=BulkTest.TEST_PROPERTIES_PATH + "test" + fileExtension;

}

Location: AbstractPropertiesFactoryTest.java

Content: 

private void assertContents(final T properties){

  Assert.assertEquals("value1",properties.getProperty("key1"));

  Assert.assertEquals("value2",properties.getProperty("key2"));

  Assert.assertEquals("value3",properties.getProperty("key3"));

  Assert.assertEquals("value4",properties.getProperty("key4"));

  Assert.assertEquals("value5",properties.getProperty("key5"));

  Assert.assertEquals("value6",properties.getProperty("key6"));

  Assert.assertEquals("value7",properties.getProperty("key7"));

  Assert.assertEquals("value8",properties.getProperty("key8"));

  Assert.assertEquals("value9",properties.getProperty("key9"));

  Assert.assertEquals("value10",properties.getProperty("key10"));

  Assert.assertEquals("value11",properties.getProperty("key11"));

}

Location: AbstractPropertiesFactoryTest.java

Content: 

@Parameters(name="{0}") public static Object[][] getParameters(){

  return new Object[][]{{".properties"},{".xml"}};

}

Location: AbstractPropertiesFactoryTest.java

Content: 

private boolean isXmlTest(){

  return ".xml".equals(fileExtension);

}

Location: AbstractPropertiesFactoryTest.java

Content: 

@Test public void testLoadClassLoaderMissingResource() throws Exception {

  Assert.assertNull(factory.load(ClassLoader.getSystemClassLoader(),"missing/test" + fileExtension));

}

Location: AbstractPropertiesFactoryTest.java

Content: 

@Test public void testLoadClassLoaderResource() throws Exception {

  assertContents(factory.load(ClassLoader.getSystemClassLoader(),"org/apache/commons/collections4/properties/test" + fileExtension));

}

Location: AbstractPropertiesFactoryTest.java

Content: 

@Test public void testLoadFile() throws Exception {

  assertContents(factory.load(Paths.get(pathString).toFile()));

}

Location: AbstractPropertiesFactoryTest.java

Content: 

@Test public void testLoadFileName() throws Exception {

  assertContents(factory.load(pathString));

}

Location: AbstractPropertiesFactoryTest.java

Content: 

@Test public void testLoadPath() throws Exception {

  assertContents(factory.load(Paths.get(pathString)));

}

Location: AbstractPropertiesFactoryTest.java

Content: 

@Test public void testLoadUri() throws Exception {

  assertContents(factory.load(Paths.get(pathString).toUri()));

}

Location: AbstractPropertiesFactoryTest.java

Content: 

@Test public void testLoadUrl() throws Exception {

  assertContents(factory.load(Paths.get(pathString).toUri().toURL()));

}

Location: AbstractPropertiesFactoryTest.java

Content: 

protected AbstractPropertiesFactoryTest(final AbstractPropertiesFactory<T> factory,final String fileExtension){

  this.factory=factory;

  this.fileExtension=fileExtension;

  this.pathString=BulkTest.TEST_PROPERTIES_PATH + "test" + fileExtension;

}

Location: AbstractPropertiesFactoryTest.java

Content: 

private void assertContents(final T properties){

  Assert.assertEquals("value1",properties.getProperty("key1"));

  Assert.assertEquals("value2",properties.getProperty("key2"));

  Assert.assertEquals("value3",properties.getProperty("key3"));

  Assert.assertEquals("value4",properties.getProperty("key4"));

  Assert.assertEquals("value5",properties.getProperty("key5"));

  Assert.assertEquals("value6",properties.getProperty("key6"));

  Assert.assertEquals("value7",properties.getProperty("key7"));

  Assert.assertEquals("value8",properties.getProperty("key8"));

  Assert.assertEquals("value9",properties.getProperty("key9"));

  Assert.assertEquals("value10",properties.getProperty("key10"));

  Assert.assertEquals("value11",properties.getProperty("key11"));

}

Location: AbstractPropertiesFactoryTest.java

Content: 

@Parameters(name="{0}") public static Object[][] getParameters(){

  return new Object[][]{{".properties"},{".xml"}};

}

Location: AbstractPropertiesFactoryTest.java

Content: 

private boolean isXmlTest(){

  return ".xml".equals(fileExtension);

}

Location: AbstractPropertiesFactoryTest.java

Content: 

@Test public void testLoadClassLoaderMissingResource() throws Exception {

  Assert.assertNull(factory.load(ClassLoader.getSystemClassLoader(),"missing/test" + fileExtension));

}

Location: AbstractPropertiesFactoryTest.java

Content: 

@Test public void testLoadClassLoaderResource() throws Exception {

  assertContents(factory.load(ClassLoader.getSystemClassLoader(),"org/apache/commons/collections4/properties/test" + fileExtension));

}

Location: AbstractPropertiesFactoryTest.java

Content: 

@Test public void testLoadFile() throws Exception {

  assertContents(factory.load(Paths.get(pathString).toFile()));

}

Location: AbstractPropertiesFactoryTest.java

Content: 

@Test public void testLoadFileName() throws Exception {

  assertContents(factory.load(pathString));

}

Location: AbstractPropertiesFactoryTest.java

Content: 

@Test public void testLoadPath() throws Exception {

  assertContents(factory.load(Paths.get(pathString)));

}

Location: AbstractPropertiesFactoryTest.java

Content: 

@Test public void testLoadUri() throws Exception {

  assertContents(factory.load(Paths.get(pathString).toUri()));

}

Location: AbstractPropertiesFactoryTest.java

Content: 

@Test public void testLoadUrl() throws Exception {

  assertContents(factory.load(Paths.get(pathString).toUri().toURL()));

}

