Location: DualTreeBidiMap.java

Content: 

/** 

 * Creates an empty  {@link DualTreeBidiMap}.

 */

public DualTreeBidiMap(){

  super(new TreeMap<K,V>(),new TreeMap<V,K>());

  this.comparator=null;

  this.valueComparator=null;

}

Location: DualTreeBidiMap.java

Content: 

/** 

 * Constructs a  {@link DualTreeBidiMap} using the specified {@link Comparator}.

 * @param keyComparator  the comparator

 * @param valueComparator  the values comparator to use

 */

public DualTreeBidiMap(final Comparator<? super K> keyComparator,final Comparator<? super V> valueComparator){

  super(new TreeMap<K,V>(keyComparator),new TreeMap<V,K>(valueComparator));

  this.comparator=keyComparator;

  this.valueComparator=valueComparator;

}

Location: DualTreeBidiMap.java

Content: 

/** 

 * Constructs a  {@link DualTreeBidiMap} and copies the mappings fromspecified  {@link Map}.

 * @param map  the map whose mappings are to be placed in this map

 */

public DualTreeBidiMap(final Map<? extends K,? extends V> map){

  super(new TreeMap<K,V>(),new TreeMap<V,K>());

  putAll(map);

  this.comparator=null;

  this.valueComparator=null;

}

Location: DualTreeBidiMap.java

Content: 

/** 

 * Constructs a  {@link DualTreeBidiMap} that decorates the specified maps.

 * @param normalMap  the normal direction map

 * @param reverseMap  the reverse direction map

 * @param inverseBidiMap  the inverse BidiMap

 */

protected DualTreeBidiMap(final Map<K,V> normalMap,final Map<V,K> reverseMap,final BidiMap<V,K> inverseBidiMap){

  super(normalMap,reverseMap,inverseBidiMap);

  this.comparator=((SortedMap<K,V>)normalMap).comparator();

  this.valueComparator=((SortedMap<V,K>)reverseMap).comparator();

}

Location: DualTreeBidiMap.java

Content: 

public SortedBidiMap<V,K> inverseSortedBidiMap(){

  return inverseBidiMap();

}

Location: DualTreeBidiMap.java

Content: 

@Override public Comparator<? super V> valueComparator(){

  return ((SortedMap<V,K>)reverseMap).comparator();

}

Location: DualTreeBidiMap.java

Content: 

/** 

 * Creates an empty  {@link DualTreeBidiMap}.

 */

public DualTreeBidiMap(){

  super(new TreeMap<K,V>(),new TreeMap<V,K>());

  this.comparator=null;

  this.valueComparator=null;

}

Location: DualTreeBidiMap.java

Content: 

/** 

 * Constructs a  {@link DualTreeBidiMap} using the specified {@link Comparator}.

 * @param keyComparator  the comparator

 * @param valueComparator  the values comparator to use

 */

public DualTreeBidiMap(final Comparator<? super K> keyComparator,final Comparator<? super V> valueComparator){

  super(new TreeMap<K,V>(keyComparator),new TreeMap<V,K>(valueComparator));

  this.comparator=keyComparator;

  this.valueComparator=valueComparator;

}

Location: DualTreeBidiMap.java

Content: 

/** 

 * Constructs a  {@link DualTreeBidiMap} and copies the mappings fromspecified  {@link Map}.

 * @param map  the map whose mappings are to be placed in this map

 */

public DualTreeBidiMap(final Map<? extends K,? extends V> map){

  super(new TreeMap<K,V>(),new TreeMap<V,K>());

  putAll(map);

  this.comparator=null;

  this.valueComparator=null;

}

Location: DualTreeBidiMap.java

Content: 

/** 

 * Constructs a  {@link DualTreeBidiMap} that decorates the specified maps.

 * @param normalMap  the normal direction map

 * @param reverseMap  the reverse direction map

 * @param inverseBidiMap  the inverse BidiMap

 */

protected DualTreeBidiMap(final Map<K,V> normalMap,final Map<V,K> reverseMap,final BidiMap<V,K> inverseBidiMap){

  super(normalMap,reverseMap,inverseBidiMap);

  this.comparator=((SortedMap<K,V>)normalMap).comparator();

  this.valueComparator=((SortedMap<V,K>)reverseMap).comparator();

}

Location: DualTreeBidiMap.java

Content: 

public SortedBidiMap<V,K> inverseSortedBidiMap(){

  return inverseBidiMap();

}

Location: DualTreeBidiMap.java

Content: 

@Override public Comparator<? super V> valueComparator(){

  return ((SortedMap<V,K>)reverseMap).comparator();

}

