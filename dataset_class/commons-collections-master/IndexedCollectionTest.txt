Location: IndexedCollectionTest.java

Content: 

protected Collection<String> decorateCollection(final Collection<String> collection){

  return IndexedCollection.nonUniqueIndexedCollection(collection,new IntegerTransformer());

}

Location: IndexedCollectionTest.java

Content: 

protected IndexedCollection<Integer,String> decorateUniqueCollection(final Collection<String> collection){

  return IndexedCollection.uniqueIndexedCollection(collection,new IntegerTransformer());

}

Location: IndexedCollectionTest.java

Content: 

public IndexedCollectionTest(final String name){

  super(name);

}

Location: IndexedCollectionTest.java

Content: 

public Collection<String> makeUniqueTestCollection(){

  return decorateUniqueCollection(new ArrayList<String>());

}

Location: IndexedCollectionTest.java

Content: 

@Override protected boolean skipSerializedCanonicalTests(){

  return true;

}

Location: IndexedCollectionTest.java

Content: 

public void testAddedObjectsCanBeRetrievedByKey() throws Exception {

  final Collection<String> coll=makeTestCollection();

  coll.add("12");

  coll.add("16");

  coll.add("1");

  coll.addAll(asList("2","3","4"));

  @SuppressWarnings("unchecked") final IndexedCollection<Integer,String> indexed=(IndexedCollection<Integer,String>)coll;

  assertEquals("12",indexed.get(12));

  assertEquals("16",indexed.get(16));

  assertEquals("1",indexed.get(1));

  assertEquals("2",indexed.get(2));

  assertEquals("3",indexed.get(3));

  assertEquals("4",indexed.get(4));

}

Location: IndexedCollectionTest.java

Content: 

public void testDecoratedCollectionIsIndexedOnCreation() throws Exception {

  final Collection<String> original=makeFullCollection();

  final IndexedCollection<Integer,String> indexed=decorateUniqueCollection(original);

  assertEquals("1",indexed.get(1));

  assertEquals("2",indexed.get(2));

  assertEquals("3",indexed.get(3));

}

Location: IndexedCollectionTest.java

Content: 

public void testEnsureDuplicateObjectsCauseException() throws Exception {

  final Collection<String> coll=makeUniqueTestCollection();

  coll.add("1");

  try {

    coll.add("1");

    fail();

  }

 catch (  final IllegalArgumentException e) {

  }

}

Location: IndexedCollectionTest.java

Content: 

public void testReindexUpdatesIndexWhenDecoratedCollectionIsModifiedSeparately() throws Exception {

  final Collection<String> original=new ArrayList<>();

  final IndexedCollection<Integer,String> indexed=decorateUniqueCollection(original);

  original.add("1");

  original.add("2");

  original.add("3");

  assertNull(indexed.get(1));

  assertNull(indexed.get(2));

  assertNull(indexed.get(3));

  indexed.reindex();

  assertEquals("1",indexed.get(1));

  assertEquals("2",indexed.get(2));

  assertEquals("3",indexed.get(3));

}

Location: IndexedCollectionTest.java

Content: 

protected Collection<String> decorateCollection(final Collection<String> collection){

  return IndexedCollection.nonUniqueIndexedCollection(collection,new IntegerTransformer());

}

Location: IndexedCollectionTest.java

Content: 

protected IndexedCollection<Integer,String> decorateUniqueCollection(final Collection<String> collection){

  return IndexedCollection.uniqueIndexedCollection(collection,new IntegerTransformer());

}

Location: IndexedCollectionTest.java

Content: 

public IndexedCollectionTest(final String name){

  super(name);

}

Location: IndexedCollectionTest.java

Content: 

public Collection<String> makeUniqueTestCollection(){

  return decorateUniqueCollection(new ArrayList<String>());

}

Location: IndexedCollectionTest.java

Content: 

@Override protected boolean skipSerializedCanonicalTests(){

  return true;

}

Location: IndexedCollectionTest.java

Content: 

public void testAddedObjectsCanBeRetrievedByKey() throws Exception {

  final Collection<String> coll=makeTestCollection();

  coll.add("12");

  coll.add("16");

  coll.add("1");

  coll.addAll(asList("2","3","4"));

  @SuppressWarnings("unchecked") final IndexedCollection<Integer,String> indexed=(IndexedCollection<Integer,String>)coll;

  assertEquals("12",indexed.get(12));

  assertEquals("16",indexed.get(16));

  assertEquals("1",indexed.get(1));

  assertEquals("2",indexed.get(2));

  assertEquals("3",indexed.get(3));

  assertEquals("4",indexed.get(4));

}

Location: IndexedCollectionTest.java

Content: 

public void testDecoratedCollectionIsIndexedOnCreation() throws Exception {

  final Collection<String> original=makeFullCollection();

  final IndexedCollection<Integer,String> indexed=decorateUniqueCollection(original);

  assertEquals("1",indexed.get(1));

  assertEquals("2",indexed.get(2));

  assertEquals("3",indexed.get(3));

}

Location: IndexedCollectionTest.java

Content: 

public void testEnsureDuplicateObjectsCauseException() throws Exception {

  final Collection<String> coll=makeUniqueTestCollection();

  coll.add("1");

  try {

    coll.add("1");

    fail();

  }

 catch (  final IllegalArgumentException e) {

  }

}

Location: IndexedCollectionTest.java

Content: 

public void testReindexUpdatesIndexWhenDecoratedCollectionIsModifiedSeparately() throws Exception {

  final Collection<String> original=new ArrayList<>();

  final IndexedCollection<Integer,String> indexed=decorateUniqueCollection(original);

  original.add("1");

  original.add("2");

  original.add("3");

  assertNull(indexed.get(1));

  assertNull(indexed.get(2));

  assertNull(indexed.get(3));

  indexed.reindex();

  assertEquals("1",indexed.get(1));

  assertEquals("2",indexed.get(2));

  assertEquals("3",indexed.get(3));

}

