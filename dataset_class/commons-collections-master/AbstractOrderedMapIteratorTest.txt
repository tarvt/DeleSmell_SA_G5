Location: AbstractOrderedMapIteratorTest.java

Content: 

/** 

 * JUnit constructor.

 * @param testName  the test class name

 */

public AbstractOrderedMapIteratorTest(final String testName){

  super(testName);

}

Location: AbstractOrderedMapIteratorTest.java

Content: 

/** 

 * Test that the iterator order matches the keySet order.

 */

public void testMapIteratorOrder(){

  if (!supportsFullIterator()) {

    return;

  }

  final OrderedMapIterator<K,V> it=makeObject();

  final Map<K,V> map=getMap();

  assertEquals("keySet() not consistent",new ArrayList<>(map.keySet()),new ArrayList<>(map.keySet()));

  final Iterator<K> it2=map.keySet().iterator();

  assertTrue(it.hasNext());

  assertTrue(it2.hasNext());

  final List<K> list=new ArrayList<>();

  while (it.hasNext()) {

    final K key=it.next();

    assertEquals(it2.next(),key);

    list.add(key);

  }

  assertEquals(map.size(),list.size());

  while (it.hasPrevious()) {

    final K key=it.previous();

    assertEquals(list.get(list.size() - 1),key);

    list.remove(list.size() - 1);

  }

  assertEquals(0,list.size());

}

Location: AbstractOrderedMapIteratorTest.java

Content: 

/** 

 * JUnit constructor.

 * @param testName  the test class name

 */

public AbstractOrderedMapIteratorTest(final String testName){

  super(testName);

}

Location: AbstractOrderedMapIteratorTest.java

Content: 

/** 

 * Test that the iterator order matches the keySet order.

 */

public void testMapIteratorOrder(){

  if (!supportsFullIterator()) {

    return;

  }

  final OrderedMapIterator<K,V> it=makeObject();

  final Map<K,V> map=getMap();

  assertEquals("keySet() not consistent",new ArrayList<>(map.keySet()),new ArrayList<>(map.keySet()));

  final Iterator<K> it2=map.keySet().iterator();

  assertTrue(it.hasNext());

  assertTrue(it2.hasNext());

  final List<K> list=new ArrayList<>();

  while (it.hasNext()) {

    final K key=it.next();

    assertEquals(it2.next(),key);

    list.add(key);

  }

  assertEquals(map.size(),list.size());

  while (it.hasPrevious()) {

    final K key=it.previous();

    assertEquals(list.get(list.size() - 1),key);

    list.remove(list.size() - 1);

  }

  assertEquals(0,list.size());

}

