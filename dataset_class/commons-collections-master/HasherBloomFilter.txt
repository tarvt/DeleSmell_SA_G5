Location: HasherBloomFilter.java

Content: 

@Override public boolean contains(final Hasher hasher){

  verifyHasher(hasher);

  final Set<Integer> set=new TreeSet<>();

  hasher.iterator(getShape()).forEachRemaining((IntConsumer)idx -> {

    set.add(idx);

  }

);

  final OfInt iter=this.hasher.iterator(getShape());

  while (iter.hasNext()) {

    final int idx=iter.nextInt();

    set.remove(idx);

    if (set.isEmpty()) {

      return true;

    }

  }

  return false;

}

Location: HasherBloomFilter.java

Content: 

@Override public long[] getBits(){

  if (hasher.isEmpty()) {

    return EMPTY;

  }

  final int n=(int)Math.ceil(hasher.getShape().getNumberOfBits() * (1.0 / Long.SIZE));

  final long[] result=new long[n];

  final OfInt iter=hasher.iterator(hasher.getShape());

  iter.forEachRemaining((IntConsumer)idx -> {

    BloomFilterIndexer.checkPositive(idx);

    final int buffIdx=BloomFilterIndexer.getLongIndex(idx);

    final long buffOffset=BloomFilterIndexer.getLongBit(idx);

    result[buffIdx]|=buffOffset;

  }

);

  int limit=result.length;

  assert limit > 0 : "Number of bits in Shape is 0";

  while (result[limit - 1] == 0) {

    limit--;

    assert limit > 0 : "Hasher reported a non-zero size but has no indices";

  }

  if (limit < result.length) {

    return Arrays.copyOf(result,limit);

  }

  return result;

}

Location: HasherBloomFilter.java

Content: 

@Override public StaticHasher getHasher(){

  return hasher;

}

Location: HasherBloomFilter.java

Content: 

/** 

 * Constructs a HasherBloomFilter from a hasher and a shape.

 * @param hasher the hasher to use.

 * @param shape the shape of the Bloom filter.

 */

public HasherBloomFilter(final Hasher hasher,final Shape shape){

  super(shape);

  verifyHasher(hasher);

  if (hasher instanceof StaticHasher) {

    this.hasher=(StaticHasher)hasher;

    verifyShape(this.hasher.getShape());

  }

 else {

    this.hasher=new StaticHasher(hasher,shape);

  }

}

Location: HasherBloomFilter.java

Content: 

/** 

 * Constructs an empty HasherBloomFilter from a shape.

 * @param shape the shape of the Bloom filter.

 */

public HasherBloomFilter(final Shape shape){

  super(shape);

  this.hasher=new StaticHasher(EmptyIterator.emptyIterator(),shape);

}

Location: HasherBloomFilter.java

Content: 

@Override public boolean merge(final BloomFilter other){

  return merge(other.getHasher());

}

Location: HasherBloomFilter.java

Content: 

@Override public boolean merge(final Hasher hasher){

  verifyHasher(hasher);

  final IteratorChain<Integer> iter=new IteratorChain<>(this.hasher.iterator(getShape()),hasher.iterator(getShape()));

  this.hasher=new StaticHasher(iter,getShape());

  return true;

}

Location: HasherBloomFilter.java

Content: 

@Override public boolean contains(final Hasher hasher){

  verifyHasher(hasher);

  final Set<Integer> set=new TreeSet<>();

  hasher.iterator(getShape()).forEachRemaining((IntConsumer)idx -> {

    set.add(idx);

  }

);

  final OfInt iter=this.hasher.iterator(getShape());

  while (iter.hasNext()) {

    final int idx=iter.nextInt();

    set.remove(idx);

    if (set.isEmpty()) {

      return true;

    }

  }

  return false;

}

Location: HasherBloomFilter.java

Content: 

@Override public long[] getBits(){

  if (hasher.isEmpty()) {

    return EMPTY;

  }

  final int n=(int)Math.ceil(hasher.getShape().getNumberOfBits() * (1.0 / Long.SIZE));

  final long[] result=new long[n];

  final OfInt iter=hasher.iterator(hasher.getShape());

  iter.forEachRemaining((IntConsumer)idx -> {

    BloomFilterIndexer.checkPositive(idx);

    final int buffIdx=BloomFilterIndexer.getLongIndex(idx);

    final long buffOffset=BloomFilterIndexer.getLongBit(idx);

    result[buffIdx]|=buffOffset;

  }

);

  int limit=result.length;

  assert limit > 0 : "Number of bits in Shape is 0";

  while (result[limit - 1] == 0) {

    limit--;

    assert limit > 0 : "Hasher reported a non-zero size but has no indices";

  }

  if (limit < result.length) {

    return Arrays.copyOf(result,limit);

  }

  return result;

}

Location: HasherBloomFilter.java

Content: 

@Override public StaticHasher getHasher(){

  return hasher;

}

Location: HasherBloomFilter.java

Content: 

/** 

 * Constructs a HasherBloomFilter from a hasher and a shape.

 * @param hasher the hasher to use.

 * @param shape the shape of the Bloom filter.

 */

public HasherBloomFilter(final Hasher hasher,final Shape shape){

  super(shape);

  verifyHasher(hasher);

  if (hasher instanceof StaticHasher) {

    this.hasher=(StaticHasher)hasher;

    verifyShape(this.hasher.getShape());

  }

 else {

    this.hasher=new StaticHasher(hasher,shape);

  }

}

Location: HasherBloomFilter.java

Content: 

/** 

 * Constructs an empty HasherBloomFilter from a shape.

 * @param shape the shape of the Bloom filter.

 */

public HasherBloomFilter(final Shape shape){

  super(shape);

  this.hasher=new StaticHasher(EmptyIterator.emptyIterator(),shape);

}

Location: HasherBloomFilter.java

Content: 

@Override public boolean merge(final BloomFilter other){

  return merge(other.getHasher());

}

Location: HasherBloomFilter.java

Content: 

@Override public boolean merge(final Hasher hasher){

  verifyHasher(hasher);

  final IteratorChain<Integer> iter=new IteratorChain<>(this.hasher.iterator(getShape()),hasher.iterator(getShape()));

  this.hasher=new StaticHasher(iter,getShape());

  return true;

}

