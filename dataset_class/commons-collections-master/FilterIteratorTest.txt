Location: FilterIteratorTest.java

Content: 

/** 

 * Creates new TestFilterIterator 

 */

public FilterIteratorTest(final String name){

  super(name);

}

Location: FilterIteratorTest.java

Content: 

private void initIterator(){

  iterator=makeObject();

}

Location: FilterIteratorTest.java

Content: 

/** 

 * Returns a FilterIterator that blocks all of its elements

 * @param i      the Iterator to "filter"

 * @return "filtered" iterator

 */

protected FilterIterator<E> makeBlockAllFilter(final Iterator<E> i){

  final Predicate<E> pred=x -> false;

  return new FilterIterator<>(i,pred);

}

Location: FilterIteratorTest.java

Content: 

/** 

 * Returns a FilterIterator that does not filter any of its elements

 * @param i      the Iterator to "filter"

 * @return "filtered" iterator

 */

protected FilterIterator<E> makePassThroughFilter(final Iterator<E> i){

  final Predicate<E> pred=x -> true;

  return new FilterIterator<>(i,pred);

}

Location: FilterIteratorTest.java

Content: 

public void testRepeatedHasNext(){

  for (int i=0; i <= array.length; i++) {

    assertTrue(iterator.hasNext());

  }

}

Location: FilterIteratorTest.java

Content: 

@SuppressWarnings("unused") public void testRepeatedNext(){

  for (  final String element : array) {

    iterator.next();

  }

  verifyNoMoreElements();

}

Location: FilterIteratorTest.java

Content: 

public void testReturnValues(){

  verifyElementsInPredicate(new String[0]);

  verifyElementsInPredicate(new String[]{"a"});

  verifyElementsInPredicate(new String[]{"b"});

  verifyElementsInPredicate(new String[]{"c"});

  verifyElementsInPredicate(new String[]{"a","b"});

  verifyElementsInPredicate(new String[]{"a","c"});

  verifyElementsInPredicate(new String[]{"b","c"});

  verifyElementsInPredicate(new String[]{"a","b","c"});

}

Location: FilterIteratorTest.java

Content: 

/** 

 * Test that when the iterator is changed, the hasNext method returns the correct response for the new iterator.

 */

@SuppressWarnings("unchecked") public void testSetIterator(){

  final Iterator<E> iter1=Collections.singleton((E)new Object()).iterator();

  final Iterator<E> iter2=Collections.<E>emptyList().iterator();

  final FilterIterator<E> filterIterator=new FilterIterator<>(iter1);

  filterIterator.setPredicate(truePredicate());

  assertTrue(filterIterator.hasNext());

  filterIterator.setIterator(iter2);

  assertFalse(filterIterator.hasNext());

}

Location: FilterIteratorTest.java

Content: 

/** 

 * Test that when the predicate is changed, the hasNext method returns the correct response for the new predicate.

 */

public void testSetPredicate(){

  final Iterator<E> iter=Collections.singleton((E)null).iterator();

  final FilterIterator<E> filterIterator=new FilterIterator<>(iter);

  filterIterator.setPredicate(truePredicate());

  assertTrue(filterIterator.hasNext());

  filterIterator.setPredicate(NotNullPredicate.notNullPredicate());

  assertFalse(filterIterator.hasNext());

}

Location: FilterIteratorTest.java

Content: 

private void verifyElementsInPredicate(final String[] elements){

  final Predicate<E> pred=x -> {

    for (    final String element : elements) {

      if (element.equals(x)) {

        return true;

      }

    }

    return false;

  }

;

  initIterator();

  iterator.setPredicate(pred);

  for (int i=0; i < elements.length; i++) {

    final String s=(String)iterator.next();

    assertEquals(elements[i],s);

    assertTrue(i == elements.length - 1 ? !iterator.hasNext() : iterator.hasNext());

  }

  verifyNoMoreElements();

  initIterator();

  iterator.setPredicate(pred);

  if (iterator.hasNext()) {

    final Object last=iterator.next();

    iterator.remove();

    assertFalse("Base of FilterIterator still contains removed element.",list.contains(last));

  }

}

Location: FilterIteratorTest.java

Content: 

private void verifyNoMoreElements(){

  assertFalse(iterator.hasNext());

  try {

    iterator.next();

    fail("NoSuchElementException expected");

  }

 catch (  final NoSuchElementException e) {

  }

}

Location: FilterIteratorTest.java

Content: 

/** 

 * Creates new TestFilterIterator 

 */

public FilterIteratorTest(final String name){

  super(name);

}

Location: FilterIteratorTest.java

Content: 

private void initIterator(){

  iterator=makeObject();

}

Location: FilterIteratorTest.java

Content: 

/** 

 * Returns a FilterIterator that blocks all of its elements

 * @param i      the Iterator to "filter"

 * @return "filtered" iterator

 */

protected FilterIterator<E> makeBlockAllFilter(final Iterator<E> i){

  final Predicate<E> pred=x -> false;

  return new FilterIterator<>(i,pred);

}

Location: FilterIteratorTest.java

Content: 

/** 

 * Returns a FilterIterator that does not filter any of its elements

 * @param i      the Iterator to "filter"

 * @return "filtered" iterator

 */

protected FilterIterator<E> makePassThroughFilter(final Iterator<E> i){

  final Predicate<E> pred=x -> true;

  return new FilterIterator<>(i,pred);

}

Location: FilterIteratorTest.java

Content: 

public void testRepeatedHasNext(){

  for (int i=0; i <= array.length; i++) {

    assertTrue(iterator.hasNext());

  }

}

Location: FilterIteratorTest.java

Content: 

@SuppressWarnings("unused") public void testRepeatedNext(){

  for (  final String element : array) {

    iterator.next();

  }

  verifyNoMoreElements();

}

Location: FilterIteratorTest.java

Content: 

public void testReturnValues(){

  verifyElementsInPredicate(new String[0]);

  verifyElementsInPredicate(new String[]{"a"});

  verifyElementsInPredicate(new String[]{"b"});

  verifyElementsInPredicate(new String[]{"c"});

  verifyElementsInPredicate(new String[]{"a","b"});

  verifyElementsInPredicate(new String[]{"a","c"});

  verifyElementsInPredicate(new String[]{"b","c"});

  verifyElementsInPredicate(new String[]{"a","b","c"});

}

Location: FilterIteratorTest.java

Content: 

/** 

 * Test that when the iterator is changed, the hasNext method returns the correct response for the new iterator.

 */

@SuppressWarnings("unchecked") public void testSetIterator(){

  final Iterator<E> iter1=Collections.singleton((E)new Object()).iterator();

  final Iterator<E> iter2=Collections.<E>emptyList().iterator();

  final FilterIterator<E> filterIterator=new FilterIterator<>(iter1);

  filterIterator.setPredicate(truePredicate());

  assertTrue(filterIterator.hasNext());

  filterIterator.setIterator(iter2);

  assertFalse(filterIterator.hasNext());

}

Location: FilterIteratorTest.java

Content: 

/** 

 * Test that when the predicate is changed, the hasNext method returns the correct response for the new predicate.

 */

public void testSetPredicate(){

  final Iterator<E> iter=Collections.singleton((E)null).iterator();

  final FilterIterator<E> filterIterator=new FilterIterator<>(iter);

  filterIterator.setPredicate(truePredicate());

  assertTrue(filterIterator.hasNext());

  filterIterator.setPredicate(NotNullPredicate.notNullPredicate());

  assertFalse(filterIterator.hasNext());

}

Location: FilterIteratorTest.java

Content: 

private void verifyElementsInPredicate(final String[] elements){

  final Predicate<E> pred=x -> {

    for (    final String element : elements) {

      if (element.equals(x)) {

        return true;

      }

    }

    return false;

  }

;

  initIterator();

  iterator.setPredicate(pred);

  for (int i=0; i < elements.length; i++) {

    final String s=(String)iterator.next();

    assertEquals(elements[i],s);

    assertTrue(i == elements.length - 1 ? !iterator.hasNext() : iterator.hasNext());

  }

  verifyNoMoreElements();

  initIterator();

  iterator.setPredicate(pred);

  if (iterator.hasNext()) {

    final Object last=iterator.next();

    iterator.remove();

    assertFalse("Base of FilterIterator still contains removed element.",list.contains(last));

  }

}

Location: FilterIteratorTest.java

Content: 

private void verifyNoMoreElements(){

  assertFalse(iterator.hasNext());

  try {

    iterator.next();

    fail("NoSuchElementException expected");

  }

 catch (  final NoSuchElementException e) {

  }

}

