Location: DualHashBidiMap.java

Content: 

/** 

 * Creates an empty  {@code HashBidiMap}.

 */

public DualHashBidiMap(){

  super(new HashMap<K,V>(),new HashMap<V,K>());

}

Location: DualHashBidiMap.java

Content: 

/** 

 * Constructs a  {@code HashBidiMap} and copies the mappings fromspecified  {@code Map}.

 * @param map  the map whose mappings are to be placed in this map

 */

public DualHashBidiMap(final Map<? extends K,? extends V> map){

  super(new HashMap<K,V>(),new HashMap<V,K>());

  putAll(map);

}

Location: DualHashBidiMap.java

Content: 

/** 

 * Constructs a  {@code HashBidiMap} that decorates the specified maps.

 * @param normalMap  the normal direction map

 * @param reverseMap  the reverse direction map

 * @param inverseBidiMap  the inverse BidiMap

 */

protected DualHashBidiMap(final Map<K,V> normalMap,final Map<V,K> reverseMap,final BidiMap<V,K> inverseBidiMap){

  super(normalMap,reverseMap,inverseBidiMap);

}

Location: DualHashBidiMap.java

Content: 

/** 

 * Creates an empty  {@code HashBidiMap}.

 */

public DualHashBidiMap(){

  super(new HashMap<K,V>(),new HashMap<V,K>());

}

Location: DualHashBidiMap.java

Content: 

/** 

 * Constructs a  {@code HashBidiMap} and copies the mappings fromspecified  {@code Map}.

 * @param map  the map whose mappings are to be placed in this map

 */

public DualHashBidiMap(final Map<? extends K,? extends V> map){

  super(new HashMap<K,V>(),new HashMap<V,K>());

  putAll(map);

}

Location: DualHashBidiMap.java

Content: 

/** 

 * Constructs a  {@code HashBidiMap} that decorates the specified maps.

 * @param normalMap  the normal direction map

 * @param reverseMap  the reverse direction map

 * @param inverseBidiMap  the inverse BidiMap

 */

protected DualHashBidiMap(final Map<K,V> normalMap,final Map<V,K> reverseMap,final BidiMap<V,K> inverseBidiMap){

  super(normalMap,reverseMap,inverseBidiMap);

}

