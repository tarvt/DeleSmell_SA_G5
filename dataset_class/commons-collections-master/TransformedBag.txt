Location: TransformedBag.java

Content: 

/** 

 * Constructor that wraps (not copies). <p> If there are any elements already in the bag being decorated, they are NOT transformed.

 * @param bag  the bag to decorate, must not be null

 * @param transformer  the transformer to use for conversion, must not be null

 * @throws NullPointerException if bag or transformer is null

 */

protected TransformedBag(final Bag<E> bag,final Transformer<? super E,? extends E> transformer){

  super(bag,transformer);

}

Location: TransformedBag.java

Content: 

/** 

 * Factory method to create a transforming bag. <p> If there are any elements already in the bag being decorated, they are NOT transformed. Contrast this with  {@link #transformedBag(Bag,Transformer)}.

 * @param < E > the type of the elements in the bag

 * @param bag  the bag to decorate, must not be null

 * @param transformer  the transformer to use for conversion, must not be null

 * @return a new transformed Bag

 * @throws NullPointerException if bag or transformer is null

 * @since 4.0

 */

public static <E>Bag<E> transformingBag(final Bag<E> bag,final Transformer<? super E,? extends E> transformer){

  return new TransformedBag<>(bag,transformer);

}

Location: TransformedBag.java

Content: 

/** 

 * Constructor that wraps (not copies). <p> If there are any elements already in the bag being decorated, they are NOT transformed.

 * @param bag  the bag to decorate, must not be null

 * @param transformer  the transformer to use for conversion, must not be null

 * @throws NullPointerException if bag or transformer is null

 */

protected TransformedBag(final Bag<E> bag,final Transformer<? super E,? extends E> transformer){

  super(bag,transformer);

}

Location: TransformedBag.java

Content: 

/** 

 * Factory method to create a transforming bag. <p> If there are any elements already in the bag being decorated, they are NOT transformed. Contrast this with  {@link #transformedBag(Bag,Transformer)}.

 * @param < E > the type of the elements in the bag

 * @param bag  the bag to decorate, must not be null

 * @param transformer  the transformer to use for conversion, must not be null

 * @return a new transformed Bag

 * @throws NullPointerException if bag or transformer is null

 * @since 4.0

 */

public static <E>Bag<E> transformingBag(final Bag<E> bag,final Transformer<? super E,? extends E> transformer){

  return new TransformedBag<>(bag,transformer);

}

