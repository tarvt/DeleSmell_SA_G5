Location: ReplacementsFinder.java

Content: 

/** 

 * Simple constructor. Creates a new instance of  {@link ReplacementsFinder}.

 * @param handler  handler to call when synchronized sequences are found

 */

public ReplacementsFinder(final ReplacementsHandler<T> handler){

  pendingInsertions=new ArrayList<>();

  pendingDeletions=new ArrayList<>();

  skipped=0;

  this.handler=handler;

}

Location: ReplacementsFinder.java

Content: 

/** 

 * Add an object to the pending deletions set.

 * @param object  object to delete

 */

@Override public void visitDeleteCommand(final T object){

  pendingDeletions.add(object);

}

Location: ReplacementsFinder.java

Content: 

/** 

 * Add an object to the pending insertions set.

 * @param object  object to insert

 */

@Override public void visitInsertCommand(final T object){

  pendingInsertions.add(object);

}

Location: ReplacementsFinder.java

Content: 

/** 

 * Handle a synchronization object. <p> When a synchronization object is identified, the pending insertions and pending deletions sets are provided to the user handler as subsequences.

 * @param object  synchronization object detected

 */

@Override public void visitKeepCommand(final T object){

  if (pendingDeletions.isEmpty() && pendingInsertions.isEmpty()) {

    ++skipped;

  }

 else {

    handler.handleReplacement(skipped,pendingDeletions,pendingInsertions);

    pendingDeletions.clear();

    pendingInsertions.clear();

    skipped=1;

  }

}

Location: ReplacementsFinder.java

Content: 

/** 

 * Simple constructor. Creates a new instance of  {@link ReplacementsFinder}.

 * @param handler  handler to call when synchronized sequences are found

 */

public ReplacementsFinder(final ReplacementsHandler<T> handler){

  pendingInsertions=new ArrayList<>();

  pendingDeletions=new ArrayList<>();

  skipped=0;

  this.handler=handler;

}

Location: ReplacementsFinder.java

Content: 

/** 

 * Add an object to the pending deletions set.

 * @param object  object to delete

 */

@Override public void visitDeleteCommand(final T object){

  pendingDeletions.add(object);

}

Location: ReplacementsFinder.java

Content: 

/** 

 * Add an object to the pending insertions set.

 * @param object  object to insert

 */

@Override public void visitInsertCommand(final T object){

  pendingInsertions.add(object);

}

Location: ReplacementsFinder.java

Content: 

/** 

 * Handle a synchronization object. <p> When a synchronization object is identified, the pending insertions and pending deletions sets are provided to the user handler as subsequences.

 * @param object  synchronization object detected

 */

@Override public void visitKeepCommand(final T object){

  if (pendingDeletions.isEmpty() && pendingInsertions.isEmpty()) {

    ++skipped;

  }

 else {

    handler.handleReplacement(skipped,pendingDeletions,pendingInsertions);

    pendingDeletions.clear();

    pendingInsertions.clear();

    skipped=1;

  }

}

