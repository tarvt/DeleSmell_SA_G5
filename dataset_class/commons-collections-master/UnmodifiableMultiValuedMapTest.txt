Location: UnmodifiableMultiValuedMapTest.java

Content: 

/** 

 * Assert the given map contains all added values after it was initialized with makeFullMap(). See COLLECTIONS-769.

 * @param map the MultiValuedMap<K, V> to check

 */

private void assertMapContainsAllValues(final MultiValuedMap<K,V> map){

  assertEquals("[uno, un]",map.get((K)"one").toString());

  assertEquals("[dos, deux]",map.get((K)"two").toString());

  assertEquals("[tres, trois]",map.get((K)"three").toString());

}

Location: UnmodifiableMultiValuedMapTest.java

Content: 

@SuppressWarnings("unchecked") public void testAddException(){

  final MultiValuedMap<K,V> map=makeObject();

  try {

    map.put((K)"one",(V)"uno");

    fail();

  }

 catch (  final UnsupportedOperationException e) {

  }

}

Location: UnmodifiableMultiValuedMapTest.java

Content: 

public void testClearException(){

  final MultiValuedMap<K,V> map=makeFullMap();

  try {

    map.clear();

    fail();

  }

 catch (  final UnsupportedOperationException e) {

  }

  this.assertMapContainsAllValues(map);

}

Location: UnmodifiableMultiValuedMapTest.java

Content: 

public void testDecoratorFactoryNullMap(){

  try {

    UnmodifiableMultiValuedMap.unmodifiableMultiValuedMap(null);

    fail("map must not be null");

  }

 catch (  final NullPointerException e) {

  }

}

Location: UnmodifiableMultiValuedMapTest.java

Content: 

public void testPutAllException(){

  final MultiValuedMap<K,V> map=makeObject();

  final MultiValuedMap<K,V> original=new ArrayListValuedHashMap<>();

  final Map<K,V> originalMap=new HashMap<>();

  final Collection<V> coll=(Collection<V>)Arrays.asList("X","Y","Z");

  original.put((K)"key",(V)"object1");

  original.put((K)"key",(V)"object2");

  originalMap.put((K)"keyX",(V)"object1");

  originalMap.put((K)"keyY",(V)"object2");

  try {

    map.putAll(original);

    fail();

  }

 catch (  final UnsupportedOperationException e) {

  }

  assertEquals("{}",map.toString());

  try {

    map.putAll(originalMap);

    fail();

  }

 catch (  final UnsupportedOperationException e) {

  }

  assertEquals("{}",map.toString());

  try {

    map.putAll((K)"A",coll);

    fail();

  }

 catch (  final UnsupportedOperationException e) {

  }

  assertEquals("{}",map.toString());

}

Location: UnmodifiableMultiValuedMapTest.java

Content: 

public void testRemoveException(){

  final MultiValuedMap<K,V> map=makeFullMap();

  try {

    map.remove("one");

    fail();

  }

 catch (  final UnsupportedOperationException e) {

  }

  this.assertMapContainsAllValues(map);

}

Location: UnmodifiableMultiValuedMapTest.java

Content: 

public void testRemoveMappingException(){

  final MultiValuedMap<K,V> map=makeFullMap();

  try {

    map.removeMapping("one","uno");

    fail();

  }

 catch (  final UnsupportedOperationException e) {

  }

  this.assertMapContainsAllValues(map);

}

Location: UnmodifiableMultiValuedMapTest.java

Content: 

@SuppressWarnings("unchecked") public void testUnmodifiableAsMap(){

  resetFull();

  final Map<K,Collection<V>> mapCol=getMap().asMap();

  try {

    mapCol.put((K)"four",(Collection<V>)Arrays.asList("four"));

    fail();

  }

 catch (  final UnsupportedOperationException e) {

  }

  try {

    mapCol.remove("four");

    fail();

  }

 catch (  final UnsupportedOperationException e) {

  }

  try {

    mapCol.clear();

    fail();

  }

 catch (  final UnsupportedOperationException e) {

  }

  try {

    mapCol.clear();

    fail();

  }

 catch (  final UnsupportedOperationException e) {

  }

}

Location: UnmodifiableMultiValuedMapTest.java

Content: 

@SuppressWarnings("unchecked") public void testUnmodifiableEntries(){

  resetFull();

  final Collection<Entry<K,V>> entries=getMap().entries();

  try {

    entries.clear();

    fail();

  }

 catch (  final UnsupportedOperationException e) {

  }

  final Iterator<Entry<K,V>> it=entries.iterator();

  final Entry<K,V> entry=it.next();

  try {

    it.remove();

    fail();

  }

 catch (  final UnsupportedOperationException e) {

  }

  try {

    entry.setValue((V)"three");

    fail();

  }

 catch (  final UnsupportedOperationException e) {

  }

}

Location: UnmodifiableMultiValuedMapTest.java

Content: 

@SuppressWarnings("unchecked") public void testUnmodifiableKeys(){

  resetFull();

  final MultiSet<K> keys=getMap().keys();

  try {

    keys.add((K)"four");

    fail();

  }

 catch (  final UnsupportedOperationException e) {

  }

  try {

    keys.remove("four");

    fail();

  }

 catch (  final UnsupportedOperationException e) {

  }

  try {

    keys.clear();

    fail();

  }

 catch (  final UnsupportedOperationException e) {

  }

  final Iterator<K> it=keys.iterator();

  try {

    it.remove();

    fail();

  }

 catch (  final UnsupportedOperationException e) {

  }

}

Location: UnmodifiableMultiValuedMapTest.java

Content: 

@SuppressWarnings("unchecked") public void testUnmodifiableKeySet(){

  resetFull();

  final Set<K> keySet=getMap().keySet();

  try {

    keySet.add((K)"four");

    fail();

  }

 catch (  final UnsupportedOperationException e) {

  }

  try {

    keySet.remove("four");

    fail();

  }

 catch (  final UnsupportedOperationException e) {

  }

  try {

    keySet.clear();

    fail();

  }

 catch (  final UnsupportedOperationException e) {

  }

  final Iterator<K> it=keySet.iterator();

  try {

    it.remove();

    fail();

  }

 catch (  final UnsupportedOperationException e) {

  }

}

Location: UnmodifiableMultiValuedMapTest.java

Content: 

@SuppressWarnings("unchecked") public void testUnmodifiableMapIterator(){

  resetFull();

  final MapIterator<K,V> mapIt=getMap().mapIterator();

  try {

    mapIt.remove();

    fail();

  }

 catch (  final UnsupportedOperationException e) {

  }

  try {

    mapIt.setValue((V)"three");

    fail();

  }

 catch (  final UnsupportedOperationException e) {

  }

}

Location: UnmodifiableMultiValuedMapTest.java

Content: 

@SuppressWarnings("unchecked") public void testUnmodifiableValues(){

  resetFull();

  final Collection<V> values=getMap().values();

  try {

    values.add((V)"four");

    fail();

  }

 catch (  final UnsupportedOperationException e) {

  }

  try {

    values.remove("four");

    fail();

  }

 catch (  final UnsupportedOperationException e) {

  }

  try {

    values.clear();

    fail();

  }

 catch (  final UnsupportedOperationException e) {

  }

  final Iterator<V> it=values.iterator();

  try {

    it.remove();

    fail();

  }

 catch (  final UnsupportedOperationException e) {

  }

}

Location: UnmodifiableMultiValuedMapTest.java

Content: 

public UnmodifiableMultiValuedMapTest(final String testName){

  super(testName);

}

Location: UnmodifiableMultiValuedMapTest.java

Content: 

/** 

 * Assert the given map contains all added values after it was initialized with makeFullMap(). See COLLECTIONS-769.

 * @param map the MultiValuedMap<K, V> to check

 */

private void assertMapContainsAllValues(final MultiValuedMap<K,V> map){

  assertEquals("[uno, un]",map.get((K)"one").toString());

  assertEquals("[dos, deux]",map.get((K)"two").toString());

  assertEquals("[tres, trois]",map.get((K)"three").toString());

}

Location: UnmodifiableMultiValuedMapTest.java

Content: 

@SuppressWarnings("unchecked") public void testAddException(){

  final MultiValuedMap<K,V> map=makeObject();

  try {

    map.put((K)"one",(V)"uno");

    fail();

  }

 catch (  final UnsupportedOperationException e) {

  }

}

Location: UnmodifiableMultiValuedMapTest.java

Content: 

public void testClearException(){

  final MultiValuedMap<K,V> map=makeFullMap();

  try {

    map.clear();

    fail();

  }

 catch (  final UnsupportedOperationException e) {

  }

  this.assertMapContainsAllValues(map);

}

Location: UnmodifiableMultiValuedMapTest.java

Content: 

public void testDecoratorFactoryNullMap(){

  try {

    UnmodifiableMultiValuedMap.unmodifiableMultiValuedMap(null);

    fail("map must not be null");

  }

 catch (  final NullPointerException e) {

  }

}

Location: UnmodifiableMultiValuedMapTest.java

Content: 

public void testPutAllException(){

  final MultiValuedMap<K,V> map=makeObject();

  final MultiValuedMap<K,V> original=new ArrayListValuedHashMap<>();

  final Map<K,V> originalMap=new HashMap<>();

  final Collection<V> coll=(Collection<V>)Arrays.asList("X","Y","Z");

  original.put((K)"key",(V)"object1");

  original.put((K)"key",(V)"object2");

  originalMap.put((K)"keyX",(V)"object1");

  originalMap.put((K)"keyY",(V)"object2");

  try {

    map.putAll(original);

    fail();

  }

 catch (  final UnsupportedOperationException e) {

  }

  assertEquals("{}",map.toString());

  try {

    map.putAll(originalMap);

    fail();

  }

 catch (  final UnsupportedOperationException e) {

  }

  assertEquals("{}",map.toString());

  try {

    map.putAll((K)"A",coll);

    fail();

  }

 catch (  final UnsupportedOperationException e) {

  }

  assertEquals("{}",map.toString());

}

Location: UnmodifiableMultiValuedMapTest.java

Content: 

public void testRemoveException(){

  final MultiValuedMap<K,V> map=makeFullMap();

  try {

    map.remove("one");

    fail();

  }

 catch (  final UnsupportedOperationException e) {

  }

  this.assertMapContainsAllValues(map);

}

Location: UnmodifiableMultiValuedMapTest.java

Content: 

public void testRemoveMappingException(){

  final MultiValuedMap<K,V> map=makeFullMap();

  try {

    map.removeMapping("one","uno");

    fail();

  }

 catch (  final UnsupportedOperationException e) {

  }

  this.assertMapContainsAllValues(map);

}

Location: UnmodifiableMultiValuedMapTest.java

Content: 

@SuppressWarnings("unchecked") public void testUnmodifiableAsMap(){

  resetFull();

  final Map<K,Collection<V>> mapCol=getMap().asMap();

  try {

    mapCol.put((K)"four",(Collection<V>)Arrays.asList("four"));

    fail();

  }

 catch (  final UnsupportedOperationException e) {

  }

  try {

    mapCol.remove("four");

    fail();

  }

 catch (  final UnsupportedOperationException e) {

  }

  try {

    mapCol.clear();

    fail();

  }

 catch (  final UnsupportedOperationException e) {

  }

  try {

    mapCol.clear();

    fail();

  }

 catch (  final UnsupportedOperationException e) {

  }

}

Location: UnmodifiableMultiValuedMapTest.java

Content: 

@SuppressWarnings("unchecked") public void testUnmodifiableEntries(){

  resetFull();

  final Collection<Entry<K,V>> entries=getMap().entries();

  try {

    entries.clear();

    fail();

  }

 catch (  final UnsupportedOperationException e) {

  }

  final Iterator<Entry<K,V>> it=entries.iterator();

  final Entry<K,V> entry=it.next();

  try {

    it.remove();

    fail();

  }

 catch (  final UnsupportedOperationException e) {

  }

  try {

    entry.setValue((V)"three");

    fail();

  }

 catch (  final UnsupportedOperationException e) {

  }

}

Location: UnmodifiableMultiValuedMapTest.java

Content: 

@SuppressWarnings("unchecked") public void testUnmodifiableKeys(){

  resetFull();

  final MultiSet<K> keys=getMap().keys();

  try {

    keys.add((K)"four");

    fail();

  }

 catch (  final UnsupportedOperationException e) {

  }

  try {

    keys.remove("four");

    fail();

  }

 catch (  final UnsupportedOperationException e) {

  }

  try {

    keys.clear();

    fail();

  }

 catch (  final UnsupportedOperationException e) {

  }

  final Iterator<K> it=keys.iterator();

  try {

    it.remove();

    fail();

  }

 catch (  final UnsupportedOperationException e) {

  }

}

Location: UnmodifiableMultiValuedMapTest.java

Content: 

@SuppressWarnings("unchecked") public void testUnmodifiableKeySet(){

  resetFull();

  final Set<K> keySet=getMap().keySet();

  try {

    keySet.add((K)"four");

    fail();

  }

 catch (  final UnsupportedOperationException e) {

  }

  try {

    keySet.remove("four");

    fail();

  }

 catch (  final UnsupportedOperationException e) {

  }

  try {

    keySet.clear();

    fail();

  }

 catch (  final UnsupportedOperationException e) {

  }

  final Iterator<K> it=keySet.iterator();

  try {

    it.remove();

    fail();

  }

 catch (  final UnsupportedOperationException e) {

  }

}

Location: UnmodifiableMultiValuedMapTest.java

Content: 

@SuppressWarnings("unchecked") public void testUnmodifiableMapIterator(){

  resetFull();

  final MapIterator<K,V> mapIt=getMap().mapIterator();

  try {

    mapIt.remove();

    fail();

  }

 catch (  final UnsupportedOperationException e) {

  }

  try {

    mapIt.setValue((V)"three");

    fail();

  }

 catch (  final UnsupportedOperationException e) {

  }

}

Location: UnmodifiableMultiValuedMapTest.java

Content: 

@SuppressWarnings("unchecked") public void testUnmodifiableValues(){

  resetFull();

  final Collection<V> values=getMap().values();

  try {

    values.add((V)"four");

    fail();

  }

 catch (  final UnsupportedOperationException e) {

  }

  try {

    values.remove("four");

    fail();

  }

 catch (  final UnsupportedOperationException e) {

  }

  try {

    values.clear();

    fail();

  }

 catch (  final UnsupportedOperationException e) {

  }

  final Iterator<V> it=values.iterator();

  try {

    it.remove();

    fail();

  }

 catch (  final UnsupportedOperationException e) {

  }

}

Location: UnmodifiableMultiValuedMapTest.java

Content: 

public UnmodifiableMultiValuedMapTest(final String testName){

  super(testName);

}

