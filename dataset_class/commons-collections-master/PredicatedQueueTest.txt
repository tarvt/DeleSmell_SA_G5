Location: PredicatedQueueTest.java

Content: 

protected Queue<E> decorateCollection(final Queue<E> queue,final Predicate<E> predicate){

  return PredicatedQueue.predicatedQueue(queue,predicate);

}

Location: PredicatedQueueTest.java

Content: 

public Queue<E> makeTestQueue(){

  return decorateCollection(new LinkedList<E>(),testPredicate);

}

Location: PredicatedQueueTest.java

Content: 

public PredicatedQueueTest(final String testName){

  super(testName);

}

Location: PredicatedQueueTest.java

Content: 

@SuppressWarnings("unchecked") public void testGet(){

  final Queue<E> queue=makeTestQueue();

  assertNull(queue.peek());

  queue.add((E)"one");

  queue.add((E)"two");

  queue.add((E)"three");

  assertEquals("Queue get","one",queue.peek());

}

Location: PredicatedQueueTest.java

Content: 

@SuppressWarnings("unchecked") public void testRemove(){

  final Queue<E> queue=makeTestQueue();

  queue.add((E)"one");

  assertEquals("Queue get","one",queue.poll());

  assertNull(queue.peek());

}

Location: PredicatedQueueTest.java

Content: 

protected Queue<E> decorateCollection(final Queue<E> queue,final Predicate<E> predicate){

  return PredicatedQueue.predicatedQueue(queue,predicate);

}

Location: PredicatedQueueTest.java

Content: 

public Queue<E> makeTestQueue(){

  return decorateCollection(new LinkedList<E>(),testPredicate);

}

Location: PredicatedQueueTest.java

Content: 

public PredicatedQueueTest(final String testName){

  super(testName);

}

Location: PredicatedQueueTest.java

Content: 

@SuppressWarnings("unchecked") public void testGet(){

  final Queue<E> queue=makeTestQueue();

  assertNull(queue.peek());

  queue.add((E)"one");

  queue.add((E)"two");

  queue.add((E)"three");

  assertEquals("Queue get","one",queue.peek());

}

Location: PredicatedQueueTest.java

Content: 

@SuppressWarnings("unchecked") public void testRemove(){

  final Queue<E> queue=makeTestQueue();

  queue.add((E)"one");

  assertEquals("Queue get","one",queue.poll());

  assertNull(queue.peek());

}

