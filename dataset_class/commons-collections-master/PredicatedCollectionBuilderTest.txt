Location: PredicatedCollectionBuilderTest.java

Content: 

/** 

 * Verify that only items that pass the Predicate end up in the buffer.

 */

@Test public void addAllPass(){

  final PredicatedCollection.Builder<String> builder=PredicatedCollection.notNullBuilder();

  builder.addAll(Arrays.asList("test1",null,"test2"));

  assertEquals(builder.createPredicatedList().size(),2);

}

Location: PredicatedCollectionBuilderTest.java

Content: 

/** 

 * Verify that failing the Predicate means NOT ending up in the buffer.

 */

@Test public void addFail(){

  final PredicatedCollection.Builder<String> builder=PredicatedCollection.notNullBuilder();

  builder.add((String)null);

  assertTrue(builder.createPredicatedList().isEmpty());

  assertEquals(1,builder.rejectedElements().size());

}

Location: PredicatedCollectionBuilderTest.java

Content: 

/** 

 * Verify that passing the Predicate means ending up in the buffer.

 */

@Test public void addPass(){

  final PredicatedCollection.Builder<String> builder=PredicatedCollection.notNullBuilder();

  builder.add("test");

  assertEquals(builder.createPredicatedList().size(),1);

}

Location: PredicatedCollectionBuilderTest.java

Content: 

private void checkPredicatedCollection1(final Collection<String> collection){

  assertEquals(1,collection.size());

  collection.add("test2");

  assertEquals(2,collection.size());

  assertThrows(IllegalArgumentException.class,() -> collection.add(null),"Expecting IllegalArgumentException for failing predicate!");

}

Location: PredicatedCollectionBuilderTest.java

Content: 

private void checkPredicatedCollection2(final Collection<Integer> collection){

  assertEquals(2,collection.size());

  assertThrows(IllegalArgumentException.class,() -> collection.add(4),"Expecting IllegalArgumentException for failing predicate!");

  assertEquals(2,collection.size());

  collection.add(5);

  assertEquals(3,collection.size());

}

Location: PredicatedCollectionBuilderTest.java

Content: 

@Test public void createPredicatedCollectionWithNotNullPredicate(){

  final PredicatedCollection.Builder<String> builder=PredicatedCollection.notNullBuilder();

  builder.add("test1");

  builder.add((String)null);

  final List<String> predicatedList=builder.createPredicatedList();

  checkPredicatedCollection1(predicatedList);

  final Set<String> predicatedSet=builder.createPredicatedSet();

  checkPredicatedCollection1(predicatedSet);

  final Bag<String> predicatedBag=builder.createPredicatedBag();

  checkPredicatedCollection1(predicatedBag);

  final Queue<String> predicatedQueue=builder.createPredicatedQueue();

  checkPredicatedCollection1(predicatedQueue);

}

Location: PredicatedCollectionBuilderTest.java

Content: 

@Test public void createPredicatedCollectionWithPredicate(){

  final OddPredicate p=new OddPredicate();

  final PredicatedCollection.Builder<Integer> builder=PredicatedCollection.builder(p);

  builder.add(1);

  builder.add(2);

  builder.add(3);

  final List<Integer> predicatedList=builder.createPredicatedList();

  checkPredicatedCollection2(predicatedList);

  final Set<Integer> predicatedSet=builder.createPredicatedSet();

  checkPredicatedCollection2(predicatedSet);

  final Bag<Integer> predicatedBag=builder.createPredicatedBag();

  checkPredicatedCollection2(predicatedBag);

  final Queue<Integer> predicatedQueue=builder.createPredicatedQueue();

  checkPredicatedCollection2(predicatedQueue);

}

Location: PredicatedCollectionBuilderTest.java

Content: 

/** 

 * Verify that only items that pass the Predicate end up in the buffer.

 */

@Test public void addAllPass(){

  final PredicatedCollection.Builder<String> builder=PredicatedCollection.notNullBuilder();

  builder.addAll(Arrays.asList("test1",null,"test2"));

  assertEquals(builder.createPredicatedList().size(),2);

}

Location: PredicatedCollectionBuilderTest.java

Content: 

/** 

 * Verify that failing the Predicate means NOT ending up in the buffer.

 */

@Test public void addFail(){

  final PredicatedCollection.Builder<String> builder=PredicatedCollection.notNullBuilder();

  builder.add((String)null);

  assertTrue(builder.createPredicatedList().isEmpty());

  assertEquals(1,builder.rejectedElements().size());

}

Location: PredicatedCollectionBuilderTest.java

Content: 

/** 

 * Verify that passing the Predicate means ending up in the buffer.

 */

@Test public void addPass(){

  final PredicatedCollection.Builder<String> builder=PredicatedCollection.notNullBuilder();

  builder.add("test");

  assertEquals(builder.createPredicatedList().size(),1);

}

Location: PredicatedCollectionBuilderTest.java

Content: 

private void checkPredicatedCollection1(final Collection<String> collection){

  assertEquals(1,collection.size());

  collection.add("test2");

  assertEquals(2,collection.size());

  assertThrows(IllegalArgumentException.class,() -> collection.add(null),"Expecting IllegalArgumentException for failing predicate!");

}

Location: PredicatedCollectionBuilderTest.java

Content: 

private void checkPredicatedCollection2(final Collection<Integer> collection){

  assertEquals(2,collection.size());

  assertThrows(IllegalArgumentException.class,() -> collection.add(4),"Expecting IllegalArgumentException for failing predicate!");

  assertEquals(2,collection.size());

  collection.add(5);

  assertEquals(3,collection.size());

}

Location: PredicatedCollectionBuilderTest.java

Content: 

@Test public void createPredicatedCollectionWithNotNullPredicate(){

  final PredicatedCollection.Builder<String> builder=PredicatedCollection.notNullBuilder();

  builder.add("test1");

  builder.add((String)null);

  final List<String> predicatedList=builder.createPredicatedList();

  checkPredicatedCollection1(predicatedList);

  final Set<String> predicatedSet=builder.createPredicatedSet();

  checkPredicatedCollection1(predicatedSet);

  final Bag<String> predicatedBag=builder.createPredicatedBag();

  checkPredicatedCollection1(predicatedBag);

  final Queue<String> predicatedQueue=builder.createPredicatedQueue();

  checkPredicatedCollection1(predicatedQueue);

}

Location: PredicatedCollectionBuilderTest.java

Content: 

@Test public void createPredicatedCollectionWithPredicate(){

  final OddPredicate p=new OddPredicate();

  final PredicatedCollection.Builder<Integer> builder=PredicatedCollection.builder(p);

  builder.add(1);

  builder.add(2);

  builder.add(3);

  final List<Integer> predicatedList=builder.createPredicatedList();

  checkPredicatedCollection2(predicatedList);

  final Set<Integer> predicatedSet=builder.createPredicatedSet();

  checkPredicatedCollection2(predicatedSet);

  final Bag<Integer> predicatedBag=builder.createPredicatedBag();

  checkPredicatedCollection2(predicatedBag);

  final Queue<Integer> predicatedQueue=builder.createPredicatedQueue();

  checkPredicatedCollection2(predicatedQueue);

}

