Location: AbstractIteratorTest.java

Content: 

/** 

 * JUnit constructor.

 * @param testName  the test class name

 */

public AbstractIteratorTest(final String testName){

  super(testName);

}

Location: AbstractIteratorTest.java

Content: 

/** 

 * Whether or not we are testing an iterator that can contain elements. Default is true.

 * @return true if Iterator can be full

 */

public boolean supportsFullIterator(){

  return true;

}

Location: AbstractIteratorTest.java

Content: 

/** 

 * Test the empty iterator.

 */

public void testEmptyIterator(){

  if (!supportsEmptyIterator()) {

    return;

  }

  final Iterator<E> it=makeEmptyIterator();

  assertFalse("hasNext() should return false for empty iterators",it.hasNext());

  try {

    it.next();

    fail("NoSuchElementException must be thrown when Iterator is exhausted");

  }

 catch (  final NoSuchElementException e) {

  }

  verify();

  assertNotNull(it.toString());

}

Location: AbstractIteratorTest.java

Content: 

/** 

 * Test normal iteration behavior.

 */

public void testFullIterator(){

  if (!supportsFullIterator()) {

    return;

  }

  final Iterator<E> it=makeObject();

  assertTrue("hasNext() should return true for at least one element",it.hasNext());

  try {

    it.next();

  }

 catch (  final NoSuchElementException e) {

    fail("Full iterators must have at least one element");

  }

  while (it.hasNext()) {

    it.next();

    verify();

  }

  try {

    it.next();

    fail("NoSuchElementException must be thrown when Iterator is exhausted");

  }

 catch (  final NoSuchElementException e) {

  }

  assertNotNull(it.toString());

}

Location: AbstractIteratorTest.java

Content: 

/** 

 * JUnit constructor.

 * @param testName  the test class name

 */

public AbstractIteratorTest(final String testName){

  super(testName);

}

Location: AbstractIteratorTest.java

Content: 

/** 

 * Whether or not we are testing an iterator that can contain elements. Default is true.

 * @return true if Iterator can be full

 */

public boolean supportsFullIterator(){

  return true;

}

Location: AbstractIteratorTest.java

Content: 

/** 

 * Test the empty iterator.

 */

public void testEmptyIterator(){

  if (!supportsEmptyIterator()) {

    return;

  }

  final Iterator<E> it=makeEmptyIterator();

  assertFalse("hasNext() should return false for empty iterators",it.hasNext());

  try {

    it.next();

    fail("NoSuchElementException must be thrown when Iterator is exhausted");

  }

 catch (  final NoSuchElementException e) {

  }

  verify();

  assertNotNull(it.toString());

}

Location: AbstractIteratorTest.java

Content: 

/** 

 * Test normal iteration behavior.

 */

public void testFullIterator(){

  if (!supportsFullIterator()) {

    return;

  }

  final Iterator<E> it=makeObject();

  assertTrue("hasNext() should return true for at least one element",it.hasNext());

  try {

    it.next();

  }

 catch (  final NoSuchElementException e) {

    fail("Full iterators must have at least one element");

  }

  while (it.hasNext()) {

    it.next();

    verify();

  }

  try {

    it.next();

    fail("NoSuchElementException must be thrown when Iterator is exhausted");

  }

 catch (  final NoSuchElementException e) {

  }

  assertNotNull(it.toString());

}

