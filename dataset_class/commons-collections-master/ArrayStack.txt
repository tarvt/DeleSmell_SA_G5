Location: ArrayStack.java

Content: 

/** 

 * Constructs a new empty  {@code ArrayStack}. The initial size is controlled by  {@code ArrayList} and is currently 10.

 */

public ArrayStack(){

}

Location: ArrayStack.java

Content: 

/** 

 * Constructs a new empty  {@code ArrayStack} with an initial size.

 * @param initialSize  the initial size to use

 * @throws IllegalArgumentException  if the specified initial sizeis negative

 */

public ArrayStack(final int initialSize){

  super(initialSize);

}

Location: ArrayStack.java

Content: 

/** 

 * Return  {@code true} if this stack is currently empty.<p> This method exists for compatibility with  {@code java.util.Stack}. New users of this class should use  {@code isEmpty} instead.

 * @return true if the stack is currently empty

 */

public boolean empty(){

  return isEmpty();

}

Location: ArrayStack.java

Content: 

/** 

 * Returns the n'th item down (zero-relative) from the top of this stack without removing it.

 * @param n  the number of items down to go

 * @return the n'th item on the stack, zero relative

 * @throws EmptyStackException  if there are not enough items on thestack to satisfy this request

 */

public E peek(final int n) throws EmptyStackException {

  final int m=(size() - n) - 1;

  if (m < 0) {

    throw new EmptyStackException();

  }

  return get(m);

}

Location: ArrayStack.java

Content: 

/** 

 * Pops the top item off of this stack and return it.

 * @return the top item on the stack

 * @throws EmptyStackException  if the stack is empty

 */

public E pop() throws EmptyStackException {

  final int n=size();

  if (n <= 0) {

    throw new EmptyStackException();

  }

  return remove(n - 1);

}

Location: ArrayStack.java

Content: 

/** 

 * Pushes a new item onto the top of this stack. The pushed item is also returned. This is equivalent to calling  {@code add}.

 * @param item  the item to be added

 * @return the item just pushed

 */

public E push(final E item){

  add(item);

  return item;

}

Location: ArrayStack.java

Content: 

/** 

 * Returns the one-based position of the distance from the top that the specified object exists on this stack, where the top-most element is considered to be at distance  {@code 1}.  If the object is not present on the stack, return  {@code -1} instead.  The{@code equals()} method is used to compare to the itemsin this stack.

 * @param object  the object to be searched for

 * @return the 1-based depth into the stack of the object, or -1 if not found

 */

public int search(final Object object){

  int i=size() - 1;

  int n=1;

  while (i >= 0) {

    final Object current=get(i);

    if ((object == null && current == null) || (object != null && object.equals(current))) {

      return n;

    }

    i--;

    n++;

  }

  return -1;

}

Location: ArrayStack.java

Content: 

/** 

 * Constructs a new empty  {@code ArrayStack}. The initial size is controlled by  {@code ArrayList} and is currently 10.

 */

public ArrayStack(){

}

Location: ArrayStack.java

Content: 

/** 

 * Constructs a new empty  {@code ArrayStack} with an initial size.

 * @param initialSize  the initial size to use

 * @throws IllegalArgumentException  if the specified initial sizeis negative

 */

public ArrayStack(final int initialSize){

  super(initialSize);

}

Location: ArrayStack.java

Content: 

/** 

 * Return  {@code true} if this stack is currently empty.<p> This method exists for compatibility with  {@code java.util.Stack}. New users of this class should use  {@code isEmpty} instead.

 * @return true if the stack is currently empty

 */

public boolean empty(){

  return isEmpty();

}

Location: ArrayStack.java

Content: 

/** 

 * Returns the n'th item down (zero-relative) from the top of this stack without removing it.

 * @param n  the number of items down to go

 * @return the n'th item on the stack, zero relative

 * @throws EmptyStackException  if there are not enough items on thestack to satisfy this request

 */

public E peek(final int n) throws EmptyStackException {

  final int m=(size() - n) - 1;

  if (m < 0) {

    throw new EmptyStackException();

  }

  return get(m);

}

Location: ArrayStack.java

Content: 

/** 

 * Pops the top item off of this stack and return it.

 * @return the top item on the stack

 * @throws EmptyStackException  if the stack is empty

 */

public E pop() throws EmptyStackException {

  final int n=size();

  if (n <= 0) {

    throw new EmptyStackException();

  }

  return remove(n - 1);

}

Location: ArrayStack.java

Content: 

/** 

 * Pushes a new item onto the top of this stack. The pushed item is also returned. This is equivalent to calling  {@code add}.

 * @param item  the item to be added

 * @return the item just pushed

 */

public E push(final E item){

  add(item);

  return item;

}

Location: ArrayStack.java

Content: 

/** 

 * Returns the one-based position of the distance from the top that the specified object exists on this stack, where the top-most element is considered to be at distance  {@code 1}.  If the object is not present on the stack, return  {@code -1} instead.  The{@code equals()} method is used to compare to the itemsin this stack.

 * @param object  the object to be searched for

 * @return the 1-based depth into the stack of the object, or -1 if not found

 */

public int search(final Object object){

  int i=size() - 1;

  int n=1;

  while (i >= 0) {

    final Object current=get(i);

    if ((object == null && current == null) || (object != null && object.equals(current))) {

      return n;

    }

    i--;

    n++;

  }

  return -1;

}

