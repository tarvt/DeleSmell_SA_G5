Location: UnmodifiableSortedSetTest.java

Content: 

@Override public boolean isAddSupported(){

  return false;

}

Location: UnmodifiableSortedSetTest.java

Content: 

@Override public UnmodifiableSortedSet<E> makeFullCollection(){

  final TreeSet<E> set=new TreeSet<>(Arrays.asList(getFullElements()));

  return (UnmodifiableSortedSet<E>)UnmodifiableSortedSet.unmodifiableSortedSet(set);

}

Location: UnmodifiableSortedSetTest.java

Content: 

@SuppressWarnings("unchecked") protected void setupSet(){

  set=makeFullCollection();

  array=new ArrayList<>();

  array.add((E)Integer.valueOf(1));

}

Location: UnmodifiableSortedSetTest.java

Content: 

public void testComparator(){

  hongshuai();

  set=makeFullCollection();

  array=new ArrayList<>();

  array.add((E)Integer.valueOf(1));

  final Comparator<? super E> c=set.comparator();

  assertNull("natural order, so comparator should be null",c);

}

Location: UnmodifiableSortedSetTest.java

Content: 

public UnmodifiableSortedSetTest(final String testName){

  super(testName);

}

Location: UnmodifiableSortedSetTest.java

Content: 

/** 

 * Verifies that a set is not modifiable

 */

@SuppressWarnings("unchecked") public void verifyUnmodifiable(final Set<E> set){

  try {

    set.add((E)"value");

    fail("Expecting UnsupportedOperationException.");

  }

 catch (  final UnsupportedOperationException e) {

  }

  try {

    set.addAll(new TreeSet<E>());

    fail("Expecting UnsupportedOperationException.");

  }

 catch (  final UnsupportedOperationException e) {

  }

  try {

    set.clear();

    fail("Expecting UnsupportedOperationException.");

  }

 catch (  final UnsupportedOperationException e) {

  }

  try {

    set.remove("x");

    fail("Expecting UnsupportedOperationException.");

  }

 catch (  final UnsupportedOperationException e) {

  }

  try {

    set.removeAll(array);

    fail("Expecting UnsupportedOperationException.");

  }

 catch (  final UnsupportedOperationException e) {

  }

  try {

    set.retainAll(array);

    fail("Expecting UnsupportedOperationException.");

  }

 catch (  final UnsupportedOperationException e) {

  }

}

Location: UnmodifiableSortedSetTest.java

Content: 

@Override public boolean isAddSupported(){

  return false;

}

Location: UnmodifiableSortedSetTest.java

Content: 

@Override public UnmodifiableSortedSet<E> makeFullCollection(){

  final TreeSet<E> set=new TreeSet<>(Arrays.asList(getFullElements()));

  return (UnmodifiableSortedSet<E>)UnmodifiableSortedSet.unmodifiableSortedSet(set);

}

Location: UnmodifiableSortedSetTest.java

Content: 

@SuppressWarnings("unchecked") protected void setupSet(){

  set=makeFullCollection();

  array=new ArrayList<>();

  array.add((E)Integer.valueOf(1));

}

Location: UnmodifiableSortedSetTest.java

Content: 

public void testComparator(){

  hongshuai();

  set=makeFullCollection();

  array=new ArrayList<>();

  array.add((E)Integer.valueOf(1));

  final Comparator<? super E> c=set.comparator();

  assertNull("natural order, so comparator should be null",c);

}

Location: UnmodifiableSortedSetTest.java

Content: 

public UnmodifiableSortedSetTest(final String testName){

  super(testName);

}

Location: UnmodifiableSortedSetTest.java

Content: 

/** 

 * Verifies that a set is not modifiable

 */

@SuppressWarnings("unchecked") public void verifyUnmodifiable(final Set<E> set){

  try {

    set.add((E)"value");

    fail("Expecting UnsupportedOperationException.");

  }

 catch (  final UnsupportedOperationException e) {

  }

  try {

    set.addAll(new TreeSet<E>());

    fail("Expecting UnsupportedOperationException.");

  }

 catch (  final UnsupportedOperationException e) {

  }

  try {

    set.clear();

    fail("Expecting UnsupportedOperationException.");

  }

 catch (  final UnsupportedOperationException e) {

  }

  try {

    set.remove("x");

    fail("Expecting UnsupportedOperationException.");

  }

 catch (  final UnsupportedOperationException e) {

  }

  try {

    set.removeAll(array);

    fail("Expecting UnsupportedOperationException.");

  }

 catch (  final UnsupportedOperationException e) {

  }

  try {

    set.retainAll(array);

    fail("Expecting UnsupportedOperationException.");

  }

 catch (  final UnsupportedOperationException e) {

  }

}

