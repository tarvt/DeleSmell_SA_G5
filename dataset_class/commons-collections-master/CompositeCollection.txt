Location: CompositeCollection.java

Content: 

/** 

 * Add these Collections to the list of collections in this composite

 * @param compositeCollections  the Collections to be appended to the composite

 */

public void addComposited(final Collection<E>... compositeCollections){

  for (  final Collection<E> compositeCollection : compositeCollections) {

    if (compositeCollection != null) {

      all.add(compositeCollection);

    }

  }

}

Location: CompositeCollection.java

Content: 

/** 

 * Add these Collections to the list of collections in this composite

 * @param compositeCollection1  the Collection to be appended to the composite

 * @param compositeCollection2  the Collection to be appended to the composite

 */

public void addComposited(final Collection<E> compositeCollection1,final Collection<E> compositeCollection2){

  if (compositeCollection1 != null) {

    all.add(compositeCollection1);

  }

  if (compositeCollection2 != null) {

    all.add(compositeCollection2);

  }

}

Location: CompositeCollection.java

Content: 

/** 

 * Create an empty CompositeCollection.

 */

public CompositeCollection(){

}

Location: CompositeCollection.java

Content: 

/** 

 * Create a Composite Collection with an array of collections.

 * @param compositeCollections  the collections to composite

 */

public CompositeCollection(final Collection<E>... compositeCollections){

  addComposited(compositeCollections);

}

Location: CompositeCollection.java

Content: 

/** 

 * Create a Composite Collection with two collections.

 * @param compositeCollection1  the Collection to be appended to the composite

 * @param compositeCollection2  the Collection to be appended to the composite

 */

public CompositeCollection(final Collection<E> compositeCollection1,final Collection<E> compositeCollection2){

  addComposited(compositeCollection1,compositeCollection2);

}

Location: CompositeCollection.java

Content: 

/** 

 * Gets the collections being decorated.

 * @return Unmodifiable list of all collections in this composite.

 */

public List<Collection<E>> getCollections(){

  return UnmodifiableList.unmodifiableList(all);

}

Location: CompositeCollection.java

Content: 

/** 

 * Removes a collection from the those being decorated in this composite.

 * @param coll  collection to be removed

 */

public void removeComposited(final Collection<E> coll){

  all.remove(coll);

}

Location: CompositeCollection.java

Content: 

/** 

 * Specify a CollectionMutator strategy instance to handle changes.

 * @param mutator  the mutator to use

 */

public void setMutator(final CollectionMutator<E> mutator){

  this.mutator=mutator;

}

Location: CompositeCollection.java

Content: 

/** 

 * Returns a new collection containing all of the elements

 * @return A new ArrayList containing all of the elements in this composite.The new collection is <i>not</i> backed by this composite.

 */

public Collection<E> toCollection(){

  return new ArrayList<>(this);

}

Location: CompositeCollection.java

Content: 

/** 

 * Add these Collections to the list of collections in this composite

 * @param compositeCollections  the Collections to be appended to the composite

 */

public void addComposited(final Collection<E>... compositeCollections){

  for (  final Collection<E> compositeCollection : compositeCollections) {

    if (compositeCollection != null) {

      all.add(compositeCollection);

    }

  }

}

Location: CompositeCollection.java

Content: 

/** 

 * Add these Collections to the list of collections in this composite

 * @param compositeCollection1  the Collection to be appended to the composite

 * @param compositeCollection2  the Collection to be appended to the composite

 */

public void addComposited(final Collection<E> compositeCollection1,final Collection<E> compositeCollection2){

  if (compositeCollection1 != null) {

    all.add(compositeCollection1);

  }

  if (compositeCollection2 != null) {

    all.add(compositeCollection2);

  }

}

Location: CompositeCollection.java

Content: 

/** 

 * Create an empty CompositeCollection.

 */

public CompositeCollection(){

}

Location: CompositeCollection.java

Content: 

/** 

 * Create a Composite Collection with an array of collections.

 * @param compositeCollections  the collections to composite

 */

public CompositeCollection(final Collection<E>... compositeCollections){

  addComposited(compositeCollections);

}

Location: CompositeCollection.java

Content: 

/** 

 * Create a Composite Collection with two collections.

 * @param compositeCollection1  the Collection to be appended to the composite

 * @param compositeCollection2  the Collection to be appended to the composite

 */

public CompositeCollection(final Collection<E> compositeCollection1,final Collection<E> compositeCollection2){

  addComposited(compositeCollection1,compositeCollection2);

}

Location: CompositeCollection.java

Content: 

/** 

 * Gets the collections being decorated.

 * @return Unmodifiable list of all collections in this composite.

 */

public List<Collection<E>> getCollections(){

  return UnmodifiableList.unmodifiableList(all);

}

Location: CompositeCollection.java

Content: 

/** 

 * Removes a collection from the those being decorated in this composite.

 * @param coll  collection to be removed

 */

public void removeComposited(final Collection<E> coll){

  all.remove(coll);

}

Location: CompositeCollection.java

Content: 

/** 

 * Specify a CollectionMutator strategy instance to handle changes.

 * @param mutator  the mutator to use

 */

public void setMutator(final CollectionMutator<E> mutator){

  this.mutator=mutator;

}

Location: CompositeCollection.java

Content: 

/** 

 * Returns a new collection containing all of the elements

 * @return A new ArrayList containing all of the elements in this composite.The new collection is <i>not</i> backed by this composite.

 */

public Collection<E> toCollection(){

  return new ArrayList<>(this);

}

