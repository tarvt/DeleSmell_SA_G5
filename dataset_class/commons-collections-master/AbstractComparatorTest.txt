Location: AbstractComparatorTest.java

Content: 

/** 

 * JUnit constructor.

 * @param testName  the test class name

 */

public AbstractComparatorTest(final String testName){

  super(testName);

}

Location: AbstractComparatorTest.java

Content: 

public String getCanonicalComparatorName(final Object object){

  final StringBuilder retval=new StringBuilder();

  retval.append(TEST_DATA_PATH);

  String colName=object.getClass().getName();

  colName=colName.substring(colName.lastIndexOf(".") + 1);

  retval.append(colName);

  retval.append(".version");

  retval.append(getCompatibilityVersion());

  retval.append(".obj");

  return retval.toString();

}

Location: AbstractComparatorTest.java

Content: 

/** 

 * Randomize the list.

 */

protected void randomizeObjects(final List<?> list){

  Collections.shuffle(list);

}

Location: AbstractComparatorTest.java

Content: 

/** 

 * Reverse the list.

 */

protected void reverseObjects(final List<?> list){

  Collections.reverse(list);

}

Location: AbstractComparatorTest.java

Content: 

/** 

 * Sort the list.

 */

protected void sortObjects(final List<T> list,final Comparator<? super T> comparator){

  list.sort(comparator);

}

Location: AbstractComparatorTest.java

Content: 

/** 

 * Overrides superclass to block tests.

 */

@Override public boolean supportsEmptyCollections(){

  return false;

}

Location: AbstractComparatorTest.java

Content: 

/** 

 * Overrides superclass to block tests.

 */

@Override public boolean supportsFullCollections(){

  return false;

}

Location: AbstractComparatorTest.java

Content: 

/** 

 * Compare the current serialized form of the Comparator against the canonical version in SCM.

 */

@SuppressWarnings("unchecked") @Test public void testComparatorCompatibility() throws IOException, ClassNotFoundException {

  if (!skipSerializedCanonicalTests()) {

    Comparator<T> comparator=null;

    try {

      comparator=(Comparator<T>)readExternalFormFromDisk(getCanonicalComparatorName(makeObject()));

    }

 catch (    final FileNotFoundException exception) {

      final boolean autoCreateSerialized=false;

      if (autoCreateSerialized) {

        comparator=makeObject();

        final String fileName=getCanonicalComparatorName(comparator);

        writeExternalFormToDisk((Serializable)comparator,fileName);

        fail("Serialized form could not be found.  A serialized version " + "has now been written (and should be added to CVS): " + fileName);

      }

 else {

        fail("The Serialized form could be located to test serialization " + "compatibility: " + exception.getMessage());

      }

    }

    final List<T> randomList=getComparableObjectsOrdered();

    reverseObjects(randomList);

    sortObjects(randomList,comparator);

    final List<T> orderedList=getComparableObjectsOrdered();

    assertEquals("Comparator did not reorder the List correctly",orderedList,randomList);

  }

}

Location: AbstractComparatorTest.java

Content: 

/** 

 * Nearly all Comparators should be Serializable.

 */

@Test public void testComparatorIsSerializable(){

  final Comparator<T> comparator=makeObject();

  assertTrue("This comparator should be Serializable.",comparator instanceof Serializable);

}

Location: AbstractComparatorTest.java

Content: 

/** 

 * Test sorting an empty list

 */

@Test public void testEmptyListSort(){

  final List<T> list=new LinkedList<>();

  sortObjects(list,makeObject());

  final List<T> list2=new LinkedList<>();

  assertEquals("Comparator cannot sort empty lists",list2,list);

}

Location: AbstractComparatorTest.java

Content: 

/** 

 * Test sorting a random list.

 */

@Test public void testRandomListSort(){

  final Comparator<T> comparator=makeObject();

  final List<T> randomList=getComparableObjectsOrdered();

  randomizeObjects(randomList);

  sortObjects(randomList,comparator);

  final List<T> orderedList=getComparableObjectsOrdered();

  assertEquals("Comparator did not reorder the List correctly",orderedList,randomList);

}

Location: AbstractComparatorTest.java

Content: 

/** 

 * Test sorting a reversed list.

 */

@Test public void testReverseListSort(){

  final Comparator<T> comparator=makeObject();

  final List<T> randomList=getComparableObjectsOrdered();

  reverseObjects(randomList);

  sortObjects(randomList,comparator);

  final List<T> orderedList=getComparableObjectsOrdered();

  assertEquals("Comparator did not reorder the List correctly",orderedList,randomList);

}

Location: AbstractComparatorTest.java

Content: 

/** 

 * JUnit constructor.

 * @param testName  the test class name

 */

public AbstractComparatorTest(final String testName){

  super(testName);

}

Location: AbstractComparatorTest.java

Content: 

public String getCanonicalComparatorName(final Object object){

  final StringBuilder retval=new StringBuilder();

  retval.append(TEST_DATA_PATH);

  String colName=object.getClass().getName();

  colName=colName.substring(colName.lastIndexOf(".") + 1);

  retval.append(colName);

  retval.append(".version");

  retval.append(getCompatibilityVersion());

  retval.append(".obj");

  return retval.toString();

}

Location: AbstractComparatorTest.java

Content: 

/** 

 * Randomize the list.

 */

protected void randomizeObjects(final List<?> list){

  Collections.shuffle(list);

}

Location: AbstractComparatorTest.java

Content: 

/** 

 * Reverse the list.

 */

protected void reverseObjects(final List<?> list){

  Collections.reverse(list);

}

Location: AbstractComparatorTest.java

Content: 

/** 

 * Sort the list.

 */

protected void sortObjects(final List<T> list,final Comparator<? super T> comparator){

  list.sort(comparator);

}

Location: AbstractComparatorTest.java

Content: 

/** 

 * Overrides superclass to block tests.

 */

@Override public boolean supportsEmptyCollections(){

  return false;

}

Location: AbstractComparatorTest.java

Content: 

/** 

 * Overrides superclass to block tests.

 */

@Override public boolean supportsFullCollections(){

  return false;

}

Location: AbstractComparatorTest.java

Content: 

/** 

 * Compare the current serialized form of the Comparator against the canonical version in SCM.

 */

@SuppressWarnings("unchecked") @Test public void testComparatorCompatibility() throws IOException, ClassNotFoundException {

  if (!skipSerializedCanonicalTests()) {

    Comparator<T> comparator=null;

    try {

      comparator=(Comparator<T>)readExternalFormFromDisk(getCanonicalComparatorName(makeObject()));

    }

 catch (    final FileNotFoundException exception) {

      final boolean autoCreateSerialized=false;

      if (autoCreateSerialized) {

        comparator=makeObject();

        final String fileName=getCanonicalComparatorName(comparator);

        writeExternalFormToDisk((Serializable)comparator,fileName);

        fail("Serialized form could not be found.  A serialized version " + "has now been written (and should be added to CVS): " + fileName);

      }

 else {

        fail("The Serialized form could be located to test serialization " + "compatibility: " + exception.getMessage());

      }

    }

    final List<T> randomList=getComparableObjectsOrdered();

    reverseObjects(randomList);

    sortObjects(randomList,comparator);

    final List<T> orderedList=getComparableObjectsOrdered();

    assertEquals("Comparator did not reorder the List correctly",orderedList,randomList);

  }

}

Location: AbstractComparatorTest.java

Content: 

/** 

 * Nearly all Comparators should be Serializable.

 */

@Test public void testComparatorIsSerializable(){

  final Comparator<T> comparator=makeObject();

  assertTrue("This comparator should be Serializable.",comparator instanceof Serializable);

}

Location: AbstractComparatorTest.java

Content: 

/** 

 * Test sorting an empty list

 */

@Test public void testEmptyListSort(){

  final List<T> list=new LinkedList<>();

  sortObjects(list,makeObject());

  final List<T> list2=new LinkedList<>();

  assertEquals("Comparator cannot sort empty lists",list2,list);

}

Location: AbstractComparatorTest.java

Content: 

/** 

 * Test sorting a random list.

 */

@Test public void testRandomListSort(){

  final Comparator<T> comparator=makeObject();

  final List<T> randomList=getComparableObjectsOrdered();

  randomizeObjects(randomList);

  sortObjects(randomList,comparator);

  final List<T> orderedList=getComparableObjectsOrdered();

  assertEquals("Comparator did not reorder the List correctly",orderedList,randomList);

}

Location: AbstractComparatorTest.java

Content: 

/** 

 * Test sorting a reversed list.

 */

@Test public void testReverseListSort(){

  final Comparator<T> comparator=makeObject();

  final List<T> randomList=getComparableObjectsOrdered();

  reverseObjects(randomList);

  sortObjects(randomList,comparator);

  final List<T> orderedList=getComparableObjectsOrdered();

  assertEquals("Comparator did not reorder the List correctly",orderedList,randomList);

}

