Location: Shape.java

Content: 

/** 

 * Calculates the number of hash functions given numberOfItems and numberofBits. This is a method so that the calculation is consistent across all constructors.

 * @param numberOfItems the number of items in the filter.

 * @param numberOfBits the number of bits in the filter.

 * @return the optimal number of hash functions.

 * @throws IllegalArgumentException if the calculated number of hash function is {@code < 1}

 */

private static int calculateNumberOfHashFunctions(final int numberOfItems,final int numberOfBits){

  final long k=Math.round(LN_2 * numberOfBits / numberOfItems);

  if (k < 1) {

    throw new IllegalArgumentException(String.format("Filter too small: Calculated number of hash functions (%s) was less than 1",k));

  }

  return (int)k;

}

Location: Shape.java

Content: 

/** 

 * Check the calculated probability is  {@code < 1.0}. <p>This function is used to verify that the dynamically calculated probability for the Shape is in the valid range 0 to 1 exclusive. This need only be performed once upon construction.

 * @param probability the probability

 * @throws IllegalArgumentException if the probability is {@code >= 1.0}

 */

private static void checkCalculatedProbability(final double probability){

  if (probability >= 1.0) {

    throw new IllegalArgumentException(String.format("Calculated probability is greater than or equal to 1: " + probability));

  }

}

Location: Shape.java

Content: 

/** 

 * Check number of bits is strictly positive.

 * @param numberOfBits the number of bits

 * @return the number of bits

 * @throws IllegalArgumentException if the number of bits is {@code < 1}

 */

private static int checkNumberOfBits(final int numberOfBits){

  if (numberOfBits < 1) {

    throw new IllegalArgumentException("Number of bits must be greater than 0: " + numberOfBits);

  }

  return numberOfBits;

}

Location: Shape.java

Content: 

/** 

 * Check number of hash functions is strictly positive

 * @param numberOfHashFunctions the number of hash functions

 * @return the number of hash functions

 * @throws IllegalArgumentException if the number of hash functions is {@code < 1}

 */

private static int checkNumberOfHashFunctions(final int numberOfHashFunctions){

  if (numberOfHashFunctions < 1) {

    throw new IllegalArgumentException("Number of hash functions must be greater than 0: " + numberOfHashFunctions);

  }

  return numberOfHashFunctions;

}

Location: Shape.java

Content: 

/** 

 * Check number of items is strictly positive.

 * @param numberOfItems the number of items

 * @return the number of items

 * @throws IllegalArgumentException if the number of items is {@code < 1}

 */

private static int checkNumberOfItems(final int numberOfItems){

  if (numberOfItems < 1) {

    throw new IllegalArgumentException("Number of items must be greater than 0: " + numberOfItems);

  }

  return numberOfItems;

}

Location: Shape.java

Content: 

/** 

 * Check the probability is in the range 0.0, exclusive, to 1.0, exclusive.

 * @param probability the probability

 * @throws IllegalArgumentException if the probability is not in the range {@code (0, 1)}

 */

private static void checkProbability(final double probability){

  if (!(probability > 0.0 && probability < 1.0)) {

    throw new IllegalArgumentException("Probability must be greater than 0 and less than 1: " + probability);

  }

}

Location: Shape.java

Content: 

private int generateHashCode(){

  return Objects.hash(numberOfBits,numberOfHashFunctions,HashFunctionValidator.hash(hashFunctionIdentity));

}

Location: Shape.java

Content: 

/** 

 * Gets the number of bits in the Bloom filter. This is also known as  {@code m}.

 * @return the number of bits in the Bloom filter ({@code m}).

 */

public int getNumberOfBits(){

  return numberOfBits;

}

Location: Shape.java

Content: 

/** 

 * Gets the number of hash functions used to construct the filter. This is also known as  {@code k}.

 * @return the number of hash functions used to construct the filter ({@code k}).

 */

public int getNumberOfHashFunctions(){

  return numberOfHashFunctions;

}

Location: Shape.java

Content: 

/** 

 * Gets the number of items that are expected in the filter. This is also known as  {@code n}.

 * @return the number of items ({@code n}).

 */

public int getNumberOfItems(){

  return numberOfItems;

}

Location: Shape.java

Content: 

/** 

 * Calculates the probability of false positives ( {@code p}) given numberOfItems ( {@code n}), numberOfBits ( {@code m}) and numberOfHashFunctions ( {@code k}). <pre>p = pow(1 - exp(-k / (m / n)), k)</pre> <p>This is the probability that a Bloom filter will return true for the presence of an item when it does not contain the item. <p>The probability assumes that the Bloom filter is filled with the expected number of items. If the filter contains fewer items then the actual probability will be lower. Thus this returns the worst-case false positive probability for a filter that has not exceeded its expected number of items.

 * @return the probability of false positives.

 * @see #getNumberOfItems()

 */

public double getProbability(){

  return Math.pow(1.0 - Math.exp(-1.0 * numberOfHashFunctions * numberOfItems / numberOfBits),numberOfHashFunctions);

}

Location: Shape.java

Content: 

/** 

 * Constructs a filter configuration with a desired false-positive probability ( {@code p}) and the specified number of bits ( {@code m}) and hash functions ( {@code k}). <p>The number of items ( {@code n}) to be stored in the filter is computed. <pre>n = ceil(m / (-k / ln(1 - exp(ln(p) / k))))</pre> <p>The actual probability will be approximately equal to the desired probability but will be dependent upon the calculated Bloom filter capacity (number of items). An exception is raised if this is greater than or equal to 1 (i.e. the shape is invalid for use as a Bloom filter).

 * @param hashFunctionIdentity The identity of the hash function this shape uses

 * @param probability The desired false-positive probability in the range {@code (0, 1)}

 * @param numberOfBits The number of bits in the filter

 * @param numberOfHashFunctions The number of hash functions in the filter

 * @throws NullPointerException if the hash function identity is null

 * @throws IllegalArgumentException if the desired probability is not in the range {@code (0, 1)}; if  {@code numberOfBits < 1}; if  {@code numberOfHashFunctions < 1}; or if the actual probability is  {@code >= 1.0}

 * @see #getProbability()

 */

public Shape(final HashFunctionIdentity hashFunctionIdentity,final double probability,final int numberOfBits,final int numberOfHashFunctions){

  this.hashFunctionIdentity=Objects.requireNonNull(hashFunctionIdentity,"hashFunctionIdentity");

  checkProbability(probability);

  this.numberOfBits=checkNumberOfBits(numberOfBits);

  this.numberOfHashFunctions=checkNumberOfHashFunctions(numberOfHashFunctions);

  final double n=Math.ceil(numberOfBits / (-numberOfHashFunctions / Math.log(1 - Math.exp(Math.log(probability) / numberOfHashFunctions))));

  this.numberOfItems=(int)n;

  checkCalculatedProbability(getProbability());

  this.hashCode=generateHashCode();

}

Location: Shape.java

Content: 

/** 

 * Constructs a filter configuration with the specified number of items ( {@code n}) and desired false-positive probability ( {@code p}). <p>The number of bits ( {@code m}) for the filter is computed. <pre>m = ceil(n * ln(p) / ln(1 / 2^ln(2)))</pre> <p>The optimal number of hash functions ( {@code k}) is computed. <pre>k = round((m / n) * ln(2))</pre> <p>The actual probability will be approximately equal to the desired probability but will be dependent upon the calculated number of bits and hash functions. An exception is raised if this is greater than or equal to 1 (i.e. the shape is invalid for use as a Bloom filter).

 * @param hashFunctionIdentity The identity of the hash function this shape uses

 * @param numberOfItems Number of items to be placed in the filter

 * @param probability The desired false-positive probability in the range {@code (0, 1)}

 * @throws NullPointerException if the hash function identity is null

 * @throws IllegalArgumentException if {@code numberOfItems < 1}; if the desired probability is not in the range  {@code (0, 1)}; or if the actual probability is  {@code >= 1.0}

 * @see #getProbability()

 */

public Shape(final HashFunctionIdentity hashFunctionIdentity,final int numberOfItems,final double probability){

  this.hashFunctionIdentity=Objects.requireNonNull(hashFunctionIdentity,"hashFunctionIdentity");

  this.numberOfItems=checkNumberOfItems(numberOfItems);

  checkProbability(probability);

  final double m=Math.ceil(numberOfItems * Math.log(probability) / DENOMINATOR);

  if (m > Integer.MAX_VALUE) {

    throw new IllegalArgumentException("Resulting filter has more than " + Integer.MAX_VALUE + " bits: "+ m);

  }

  this.numberOfBits=(int)m;

  this.numberOfHashFunctions=calculateNumberOfHashFunctions(numberOfItems,numberOfBits);

  checkCalculatedProbability(getProbability());

  this.hashCode=generateHashCode();

}

Location: Shape.java

Content: 

/** 

 * Constructs a filter configuration with the specified number of items ( {@code n}) and bits ( {@code m}). <p>The optimal number of hash functions ( {@code k}) is computed. <pre>k = round((m / n) * ln(2))</pre> <p>The false-positive probability is computed using the number of items, bits and hash functions. An exception is raised if this is greater than or equal to 1 (i.e. the shape is invalid for use as a Bloom filter).

 * @param hashFunctionIdentity The identity of the hash function this shape uses

 * @param numberOfItems Number of items to be placed in the filter

 * @param numberOfBits The number of bits in the filter

 * @throws NullPointerException if the hash function identity is null

 * @throws IllegalArgumentException if {@code numberOfItems < 1}; if  {@code numberOfBits < 1}; if the calculated number of hash function is  {@code < 1}; or if the actual probability is  {@code >= 1.0}

 * @see #getProbability()

 */

public Shape(final HashFunctionIdentity hashFunctionIdentity,final int numberOfItems,final int numberOfBits){

  this.hashFunctionIdentity=Objects.requireNonNull(hashFunctionIdentity,"hashFunctionIdentity");

  this.numberOfItems=checkNumberOfItems(numberOfItems);

  this.numberOfBits=checkNumberOfBits(numberOfBits);

  this.numberOfHashFunctions=calculateNumberOfHashFunctions(numberOfItems,numberOfBits);

  checkCalculatedProbability(getProbability());

  this.hashCode=generateHashCode();

}

Location: Shape.java

Content: 

/** 

 * Constructs a filter configuration with the specified number of items, bits and hash functions. <p>The false-positive probability is computed using the number of items, bits and hash functions. An exception is raised if this is greater than or equal to 1 (i.e. the shape is invalid for use as a Bloom filter).

 * @param hashFunctionIdentity The identity of the hash function this shape uses

 * @param numberOfItems Number of items to be placed in the filter

 * @param numberOfBits The number of bits in the filter.

 * @param numberOfHashFunctions The number of hash functions in the filter

 * @throws NullPointerException if the hash function identity is null

 * @throws IllegalArgumentException if {@code numberOfItems < 1}; if  {@code numberOfBits < 1}; if  {@code numberOfHashFunctions < 1}; or if the actual probability is  {@code >= 1.0}

 * @see #getProbability()

 */

public Shape(final HashFunctionIdentity hashFunctionIdentity,final int numberOfItems,final int numberOfBits,final int numberOfHashFunctions){

  this.hashFunctionIdentity=Objects.requireNonNull(hashFunctionIdentity,"hashFunctionIdentity");

  this.numberOfItems=checkNumberOfItems(numberOfItems);

  this.numberOfBits=checkNumberOfBits(numberOfBits);

  this.numberOfHashFunctions=checkNumberOfHashFunctions(numberOfHashFunctions);

  checkCalculatedProbability(getProbability());

  this.hashCode=generateHashCode();

}

Location: Shape.java

Content: 

/** 

 * Calculates the number of hash functions given numberOfItems and numberofBits. This is a method so that the calculation is consistent across all constructors.

 * @param numberOfItems the number of items in the filter.

 * @param numberOfBits the number of bits in the filter.

 * @return the optimal number of hash functions.

 * @throws IllegalArgumentException if the calculated number of hash function is {@code < 1}

 */

private static int calculateNumberOfHashFunctions(final int numberOfItems,final int numberOfBits){

  final long k=Math.round(LN_2 * numberOfBits / numberOfItems);

  if (k < 1) {

    throw new IllegalArgumentException(String.format("Filter too small: Calculated number of hash functions (%s) was less than 1",k));

  }

  return (int)k;

}

Location: Shape.java

Content: 

/** 

 * Check the calculated probability is  {@code < 1.0}. <p>This function is used to verify that the dynamically calculated probability for the Shape is in the valid range 0 to 1 exclusive. This need only be performed once upon construction.

 * @param probability the probability

 * @throws IllegalArgumentException if the probability is {@code >= 1.0}

 */

private static void checkCalculatedProbability(final double probability){

  if (probability >= 1.0) {

    throw new IllegalArgumentException(String.format("Calculated probability is greater than or equal to 1: " + probability));

  }

}

Location: Shape.java

Content: 

/** 

 * Check number of bits is strictly positive.

 * @param numberOfBits the number of bits

 * @return the number of bits

 * @throws IllegalArgumentException if the number of bits is {@code < 1}

 */

private static int checkNumberOfBits(final int numberOfBits){

  if (numberOfBits < 1) {

    throw new IllegalArgumentException("Number of bits must be greater than 0: " + numberOfBits);

  }

  return numberOfBits;

}

Location: Shape.java

Content: 

/** 

 * Check number of hash functions is strictly positive

 * @param numberOfHashFunctions the number of hash functions

 * @return the number of hash functions

 * @throws IllegalArgumentException if the number of hash functions is {@code < 1}

 */

private static int checkNumberOfHashFunctions(final int numberOfHashFunctions){

  if (numberOfHashFunctions < 1) {

    throw new IllegalArgumentException("Number of hash functions must be greater than 0: " + numberOfHashFunctions);

  }

  return numberOfHashFunctions;

}

Location: Shape.java

Content: 

/** 

 * Check number of items is strictly positive.

 * @param numberOfItems the number of items

 * @return the number of items

 * @throws IllegalArgumentException if the number of items is {@code < 1}

 */

private static int checkNumberOfItems(final int numberOfItems){

  if (numberOfItems < 1) {

    throw new IllegalArgumentException("Number of items must be greater than 0: " + numberOfItems);

  }

  return numberOfItems;

}

Location: Shape.java

Content: 

/** 

 * Check the probability is in the range 0.0, exclusive, to 1.0, exclusive.

 * @param probability the probability

 * @throws IllegalArgumentException if the probability is not in the range {@code (0, 1)}

 */

private static void checkProbability(final double probability){

  if (!(probability > 0.0 && probability < 1.0)) {

    throw new IllegalArgumentException("Probability must be greater than 0 and less than 1: " + probability);

  }

}

Location: Shape.java

Content: 

private int generateHashCode(){

  return Objects.hash(numberOfBits,numberOfHashFunctions,HashFunctionValidator.hash(hashFunctionIdentity));

}

Location: Shape.java

Content: 

/** 

 * Gets the number of bits in the Bloom filter. This is also known as  {@code m}.

 * @return the number of bits in the Bloom filter ({@code m}).

 */

public int getNumberOfBits(){

  return numberOfBits;

}

Location: Shape.java

Content: 

/** 

 * Gets the number of hash functions used to construct the filter. This is also known as  {@code k}.

 * @return the number of hash functions used to construct the filter ({@code k}).

 */

public int getNumberOfHashFunctions(){

  return numberOfHashFunctions;

}

Location: Shape.java

Content: 

/** 

 * Gets the number of items that are expected in the filter. This is also known as  {@code n}.

 * @return the number of items ({@code n}).

 */

public int getNumberOfItems(){

  return numberOfItems;

}

Location: Shape.java

Content: 

/** 

 * Calculates the probability of false positives ( {@code p}) given numberOfItems ( {@code n}), numberOfBits ( {@code m}) and numberOfHashFunctions ( {@code k}). <pre>p = pow(1 - exp(-k / (m / n)), k)</pre> <p>This is the probability that a Bloom filter will return true for the presence of an item when it does not contain the item. <p>The probability assumes that the Bloom filter is filled with the expected number of items. If the filter contains fewer items then the actual probability will be lower. Thus this returns the worst-case false positive probability for a filter that has not exceeded its expected number of items.

 * @return the probability of false positives.

 * @see #getNumberOfItems()

 */

public double getProbability(){

  return Math.pow(1.0 - Math.exp(-1.0 * numberOfHashFunctions * numberOfItems / numberOfBits),numberOfHashFunctions);

}

Location: Shape.java

Content: 

/** 

 * Constructs a filter configuration with a desired false-positive probability ( {@code p}) and the specified number of bits ( {@code m}) and hash functions ( {@code k}). <p>The number of items ( {@code n}) to be stored in the filter is computed. <pre>n = ceil(m / (-k / ln(1 - exp(ln(p) / k))))</pre> <p>The actual probability will be approximately equal to the desired probability but will be dependent upon the calculated Bloom filter capacity (number of items). An exception is raised if this is greater than or equal to 1 (i.e. the shape is invalid for use as a Bloom filter).

 * @param hashFunctionIdentity The identity of the hash function this shape uses

 * @param probability The desired false-positive probability in the range {@code (0, 1)}

 * @param numberOfBits The number of bits in the filter

 * @param numberOfHashFunctions The number of hash functions in the filter

 * @throws NullPointerException if the hash function identity is null

 * @throws IllegalArgumentException if the desired probability is not in the range {@code (0, 1)}; if  {@code numberOfBits < 1}; if  {@code numberOfHashFunctions < 1}; or if the actual probability is  {@code >= 1.0}

 * @see #getProbability()

 */

public Shape(final HashFunctionIdentity hashFunctionIdentity,final double probability,final int numberOfBits,final int numberOfHashFunctions){

  this.hashFunctionIdentity=Objects.requireNonNull(hashFunctionIdentity,"hashFunctionIdentity");

  checkProbability(probability);

  this.numberOfBits=checkNumberOfBits(numberOfBits);

  this.numberOfHashFunctions=checkNumberOfHashFunctions(numberOfHashFunctions);

  final double n=Math.ceil(numberOfBits / (-numberOfHashFunctions / Math.log(1 - Math.exp(Math.log(probability) / numberOfHashFunctions))));

  this.numberOfItems=(int)n;

  checkCalculatedProbability(getProbability());

  this.hashCode=generateHashCode();

}

Location: Shape.java

Content: 

/** 

 * Constructs a filter configuration with the specified number of items ( {@code n}) and desired false-positive probability ( {@code p}). <p>The number of bits ( {@code m}) for the filter is computed. <pre>m = ceil(n * ln(p) / ln(1 / 2^ln(2)))</pre> <p>The optimal number of hash functions ( {@code k}) is computed. <pre>k = round((m / n) * ln(2))</pre> <p>The actual probability will be approximately equal to the desired probability but will be dependent upon the calculated number of bits and hash functions. An exception is raised if this is greater than or equal to 1 (i.e. the shape is invalid for use as a Bloom filter).

 * @param hashFunctionIdentity The identity of the hash function this shape uses

 * @param numberOfItems Number of items to be placed in the filter

 * @param probability The desired false-positive probability in the range {@code (0, 1)}

 * @throws NullPointerException if the hash function identity is null

 * @throws IllegalArgumentException if {@code numberOfItems < 1}; if the desired probability is not in the range  {@code (0, 1)}; or if the actual probability is  {@code >= 1.0}

 * @see #getProbability()

 */

public Shape(final HashFunctionIdentity hashFunctionIdentity,final int numberOfItems,final double probability){

  this.hashFunctionIdentity=Objects.requireNonNull(hashFunctionIdentity,"hashFunctionIdentity");

  this.numberOfItems=checkNumberOfItems(numberOfItems);

  checkProbability(probability);

  final double m=Math.ceil(numberOfItems * Math.log(probability) / DENOMINATOR);

  if (m > Integer.MAX_VALUE) {

    throw new IllegalArgumentException("Resulting filter has more than " + Integer.MAX_VALUE + " bits: "+ m);

  }

  this.numberOfBits=(int)m;

  this.numberOfHashFunctions=calculateNumberOfHashFunctions(numberOfItems,numberOfBits);

  checkCalculatedProbability(getProbability());

  this.hashCode=generateHashCode();

}

Location: Shape.java

Content: 

/** 

 * Constructs a filter configuration with the specified number of items ( {@code n}) and bits ( {@code m}). <p>The optimal number of hash functions ( {@code k}) is computed. <pre>k = round((m / n) * ln(2))</pre> <p>The false-positive probability is computed using the number of items, bits and hash functions. An exception is raised if this is greater than or equal to 1 (i.e. the shape is invalid for use as a Bloom filter).

 * @param hashFunctionIdentity The identity of the hash function this shape uses

 * @param numberOfItems Number of items to be placed in the filter

 * @param numberOfBits The number of bits in the filter

 * @throws NullPointerException if the hash function identity is null

 * @throws IllegalArgumentException if {@code numberOfItems < 1}; if  {@code numberOfBits < 1}; if the calculated number of hash function is  {@code < 1}; or if the actual probability is  {@code >= 1.0}

 * @see #getProbability()

 */

public Shape(final HashFunctionIdentity hashFunctionIdentity,final int numberOfItems,final int numberOfBits){

  this.hashFunctionIdentity=Objects.requireNonNull(hashFunctionIdentity,"hashFunctionIdentity");

  this.numberOfItems=checkNumberOfItems(numberOfItems);

  this.numberOfBits=checkNumberOfBits(numberOfBits);

  this.numberOfHashFunctions=calculateNumberOfHashFunctions(numberOfItems,numberOfBits);

  checkCalculatedProbability(getProbability());

  this.hashCode=generateHashCode();

}

Location: Shape.java

Content: 

/** 

 * Constructs a filter configuration with the specified number of items, bits and hash functions. <p>The false-positive probability is computed using the number of items, bits and hash functions. An exception is raised if this is greater than or equal to 1 (i.e. the shape is invalid for use as a Bloom filter).

 * @param hashFunctionIdentity The identity of the hash function this shape uses

 * @param numberOfItems Number of items to be placed in the filter

 * @param numberOfBits The number of bits in the filter.

 * @param numberOfHashFunctions The number of hash functions in the filter

 * @throws NullPointerException if the hash function identity is null

 * @throws IllegalArgumentException if {@code numberOfItems < 1}; if  {@code numberOfBits < 1}; if  {@code numberOfHashFunctions < 1}; or if the actual probability is  {@code >= 1.0}

 * @see #getProbability()

 */

public Shape(final HashFunctionIdentity hashFunctionIdentity,final int numberOfItems,final int numberOfBits,final int numberOfHashFunctions){

  this.hashFunctionIdentity=Objects.requireNonNull(hashFunctionIdentity,"hashFunctionIdentity");

  this.numberOfItems=checkNumberOfItems(numberOfItems);

  this.numberOfBits=checkNumberOfBits(numberOfBits);

  this.numberOfHashFunctions=checkNumberOfHashFunctions(numberOfHashFunctions);

  checkCalculatedProbability(getProbability());

  this.hashCode=generateHashCode();

}

