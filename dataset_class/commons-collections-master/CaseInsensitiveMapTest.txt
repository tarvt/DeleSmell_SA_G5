Location: CaseInsensitiveMapTest.java

Content: 

public CaseInsensitiveMapTest(final String testName){

  super(testName);

}

Location: CaseInsensitiveMapTest.java

Content: 

@SuppressWarnings("unchecked") public void testCaseInsensitive(){

  final Map<K,V> map=makeObject();

  map.put((K)"One",(V)"One");

  map.put((K)"Two",(V)"Two");

  assertEquals("One",map.get("one"));

  assertEquals("One",map.get("oNe"));

  map.put((K)"two",(V)"Three");

  assertEquals("Three",map.get("Two"));

}

Location: CaseInsensitiveMapTest.java

Content: 

/** 

 * Test for <a href="https://issues.apache.org/jira/browse/COLLECTIONS-323">COLLECTIONS-323</a>.

 */

public void testInitialCapacityZero(){

  final CaseInsensitiveMap<String,String> map=new CaseInsensitiveMap<>(0);

  assertEquals(1,map.data.length);

}

Location: CaseInsensitiveMapTest.java

Content: 

public void testLocaleIndependence(){

  final Locale orig=Locale.getDefault();

  final Locale[] locales={Locale.ENGLISH,new Locale("tr","",""),Locale.getDefault()};

  final String[][] data={{"i","I"},{"\u03C2","\u03C3"},{"\u03A3","\u03C2"},{"\u03A3","\u03C3"}};

  try {

    for (    final Locale locale : locales) {

      Locale.setDefault(locale);

      for (int j=0; j < data.length; j++) {

        assertTrue("Test data corrupt: " + j,data[j][0].equalsIgnoreCase(data[j][1]));

        final CaseInsensitiveMap<String,String> map=new CaseInsensitiveMap<>();

        map.put(data[j][0],"value");

        assertEquals(Locale.getDefault() + ": " + j,"value",map.get(data[j][1]));

      }

    }

  }

  finally {

    Locale.setDefault(orig);

  }

}

Location: CaseInsensitiveMapTest.java

Content: 

@SuppressWarnings("unchecked") public void testNullHandling(){

  final Map<K,V> map=makeObject();

  map.put((K)"One",(V)"One");

  map.put((K)"Two",(V)"Two");

  map.put(null,(V)"Three");

  assertEquals("Three",map.get(null));

  map.put(null,(V)"Four");

  assertEquals("Four",map.get(null));

  final Set<K> keys=map.keySet();

  assertTrue(keys.contains("one"));

  assertTrue(keys.contains("two"));

  assertTrue(keys.contains(null));

  assertEquals(3,keys.size());

}

Location: CaseInsensitiveMapTest.java

Content: 

public CaseInsensitiveMapTest(final String testName){

  super(testName);

}

Location: CaseInsensitiveMapTest.java

Content: 

@SuppressWarnings("unchecked") public void testCaseInsensitive(){

  final Map<K,V> map=makeObject();

  map.put((K)"One",(V)"One");

  map.put((K)"Two",(V)"Two");

  assertEquals("One",map.get("one"));

  assertEquals("One",map.get("oNe"));

  map.put((K)"two",(V)"Three");

  assertEquals("Three",map.get("Two"));

}

Location: CaseInsensitiveMapTest.java

Content: 

/** 

 * Test for <a href="https://issues.apache.org/jira/browse/COLLECTIONS-323">COLLECTIONS-323</a>.

 */

public void testInitialCapacityZero(){

  final CaseInsensitiveMap<String,String> map=new CaseInsensitiveMap<>(0);

  assertEquals(1,map.data.length);

}

Location: CaseInsensitiveMapTest.java

Content: 

public void testLocaleIndependence(){

  final Locale orig=Locale.getDefault();

  final Locale[] locales={Locale.ENGLISH,new Locale("tr","",""),Locale.getDefault()};

  final String[][] data={{"i","I"},{"\u03C2","\u03C3"},{"\u03A3","\u03C2"},{"\u03A3","\u03C3"}};

  try {

    for (    final Locale locale : locales) {

      Locale.setDefault(locale);

      for (int j=0; j < data.length; j++) {

        assertTrue("Test data corrupt: " + j,data[j][0].equalsIgnoreCase(data[j][1]));

        final CaseInsensitiveMap<String,String> map=new CaseInsensitiveMap<>();

        map.put(data[j][0],"value");

        assertEquals(Locale.getDefault() + ": " + j,"value",map.get(data[j][1]));

      }

    }

  }

  finally {

    Locale.setDefault(orig);

  }

}

Location: CaseInsensitiveMapTest.java

Content: 

@SuppressWarnings("unchecked") public void testNullHandling(){

  final Map<K,V> map=makeObject();

  map.put((K)"One",(V)"One");

  map.put((K)"Two",(V)"Two");

  map.put(null,(V)"Three");

  assertEquals("Three",map.get(null));

  map.put(null,(V)"Four");

  assertEquals("Four",map.get(null));

  final Set<K> keys=map.keySet();

  assertTrue(keys.contains("one"));

  assertTrue(keys.contains("two"));

  assertTrue(keys.contains(null));

  assertEquals(3,keys.size());

}

