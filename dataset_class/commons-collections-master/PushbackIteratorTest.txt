Location: PushbackIteratorTest.java

Content: 

public PushbackIteratorTest(final String testName){

  super(testName);

}

Location: PushbackIteratorTest.java

Content: 

@Test @SuppressWarnings("unchecked") public void testDelayedPushback(){

  final PushbackIterator<E> iter=makeObject();

  assertEquals("a",iter.next());

  iter.pushback((E)"x");

  assertEquals("x",iter.next());

  assertEquals("b",iter.next());

  validate(iter,"c");

}

Location: PushbackIteratorTest.java

Content: 

@Test @SuppressWarnings("unchecked") public void testImmediatePushback(){

  final PushbackIterator<E> iter=makeObject();

  iter.pushback((E)"x");

  assertEquals("x",iter.next());

  assertEquals("a",iter.next());

  validate(iter,"b","c");

}

Location: PushbackIteratorTest.java

Content: 

@Test @SuppressWarnings("unchecked") public void testMultiplePushback(){

  final PushbackIterator<E> iter=makeObject();

  assertEquals("a",iter.next());

  iter.pushback((E)"x");

  iter.pushback((E)"y");

  assertEquals("y",iter.next());

  assertEquals("x",iter.next());

  assertEquals("b",iter.next());

  validate(iter,"c");

}

Location: PushbackIteratorTest.java

Content: 

@Test public void testNormalIteration(){

  final PushbackIterator<E> iter=makeObject();

  assertEquals("a",iter.next());

  assertEquals("b",iter.next());

  assertEquals("c",iter.next());

  assertFalse(iter.hasNext());

}

Location: PushbackIteratorTest.java

Content: 

private void validate(final Iterator<E> iter,final Object... items){

  for (  final Object x : items) {

    assertTrue(iter.hasNext());

    assertEquals(x,iter.next());

  }

  assertFalse(iter.hasNext());

}

Location: PushbackIteratorTest.java

Content: 

public PushbackIteratorTest(final String testName){

  super(testName);

}

Location: PushbackIteratorTest.java

Content: 

@Test @SuppressWarnings("unchecked") public void testDelayedPushback(){

  final PushbackIterator<E> iter=makeObject();

  assertEquals("a",iter.next());

  iter.pushback((E)"x");

  assertEquals("x",iter.next());

  assertEquals("b",iter.next());

  validate(iter,"c");

}

Location: PushbackIteratorTest.java

Content: 

@Test @SuppressWarnings("unchecked") public void testImmediatePushback(){

  final PushbackIterator<E> iter=makeObject();

  iter.pushback((E)"x");

  assertEquals("x",iter.next());

  assertEquals("a",iter.next());

  validate(iter,"b","c");

}

Location: PushbackIteratorTest.java

Content: 

@Test @SuppressWarnings("unchecked") public void testMultiplePushback(){

  final PushbackIterator<E> iter=makeObject();

  assertEquals("a",iter.next());

  iter.pushback((E)"x");

  iter.pushback((E)"y");

  assertEquals("y",iter.next());

  assertEquals("x",iter.next());

  assertEquals("b",iter.next());

  validate(iter,"c");

}

Location: PushbackIteratorTest.java

Content: 

@Test public void testNormalIteration(){

  final PushbackIterator<E> iter=makeObject();

  assertEquals("a",iter.next());

  assertEquals("b",iter.next());

  assertEquals("c",iter.next());

  assertFalse(iter.hasNext());

}

Location: PushbackIteratorTest.java

Content: 

private void validate(final Iterator<E> iter,final Object... items){

  for (  final Object x : items) {

    assertTrue(iter.hasNext());

    assertEquals(x,iter.next());

  }

  assertFalse(iter.hasNext());

}

