Location: CircularFifoQueueTest.java

Content: 

public CircularFifoQueueTest(final String testName){

  super(testName);

}

Location: CircularFifoQueueTest.java

Content: 

/** 

 * Overridden because CircularFifoQueue isn't fail fast.

 * @return false

 */

@Override public boolean isFailFastSupported(){

  return false;

}

Location: CircularFifoQueueTest.java

Content: 

public void testAddNull(){

  final CircularFifoQueue<E> b=new CircularFifoQueue<>(2);

  try {

    b.add(null);

    fail();

  }

 catch (  final NullPointerException ex) {

    return;

  }

  fail();

}

Location: CircularFifoQueueTest.java

Content: 

/** 

 * Tests that the removal operation actually removes the first element.

 */

@SuppressWarnings("unchecked") public void testCircularFifoQueueCircular(){

  final List<E> list=new ArrayList<>();

  list.add((E)"A");

  list.add((E)"B");

  list.add((E)"C");

  final Queue<E> queue=new CircularFifoQueue<>(list);

  assertTrue(queue.contains("A"));

  assertTrue(queue.contains("B"));

  assertTrue(queue.contains("C"));

  queue.add((E)"D");

  assertFalse(queue.contains("A"));

  assertTrue(queue.contains("B"));

  assertTrue(queue.contains("C"));

  assertTrue(queue.contains("D"));

  assertEquals("B",queue.peek());

  assertEquals("B",queue.remove());

  assertEquals("C",queue.remove());

  assertEquals("D",queue.remove());

}

Location: CircularFifoQueueTest.java

Content: 

/** 

 * Tests that the removal operation actually removes the first element.

 */

public void testCircularFifoQueueRemove(){

  resetFull();

  final int size=getConfirmed().size();

  for (int i=0; i < size; i++) {

    final Object o1=getCollection().remove();

    final Object o2=((List<?>)getConfirmed()).remove(0);

    assertEquals("Removed objects should be equal",o1,o2);

    verify();

  }

  try {

    getCollection().remove();

    fail("Empty queue should raise Underflow.");

  }

 catch (  final NoSuchElementException e) {

  }

}

Location: CircularFifoQueueTest.java

Content: 

/** 

 * Tests that the constructor correctly throws an exception.

 */

public void testConstructorException1(){

  try {

    new CircularFifoQueue<E>(0);

  }

 catch (  final IllegalArgumentException ex) {

    return;

  }

  fail();

}

Location: CircularFifoQueueTest.java

Content: 

/** 

 * Tests that the constructor correctly throws an exception.

 */

public void testConstructorException2(){

  try {

    new CircularFifoQueue<E>(-20);

  }

 catch (  final IllegalArgumentException ex) {

    return;

  }

  fail();

}

Location: CircularFifoQueueTest.java

Content: 

/** 

 * Tests that the constructor correctly throws an exception.

 */

public void testConstructorException3(){

  try {

    new CircularFifoQueue<E>(null);

  }

 catch (  final NullPointerException ex) {

    return;

  }

  fail();

}

Location: CircularFifoQueueTest.java

Content: 

public void testDefaultSizeAndGetError1(){

  final CircularFifoQueue<E> fifo=new CircularFifoQueue<>();

  assertEquals(32,fifo.maxSize());

  fifo.add((E)"1");

  fifo.add((E)"2");

  fifo.add((E)"3");

  fifo.add((E)"4");

  fifo.add((E)"5");

  assertEquals(5,fifo.size());

  try {

    fifo.get(5);

  }

 catch (  final NoSuchElementException ex) {

    return;

  }

  fail();

}

Location: CircularFifoQueueTest.java

Content: 

public void testDefaultSizeAndGetError2(){

  final CircularFifoQueue<E> fifo=new CircularFifoQueue<>();

  assertEquals(32,fifo.maxSize());

  fifo.add((E)"1");

  fifo.add((E)"2");

  fifo.add((E)"3");

  fifo.add((E)"4");

  fifo.add((E)"5");

  assertEquals(5,fifo.size());

  try {

    fifo.get(-2);

  }

 catch (  final NoSuchElementException ex) {

    return;

  }

  fail();

}

Location: CircularFifoQueueTest.java

Content: 

public void testGetIndex(){

  resetFull();

  final CircularFifoQueue<E> queue=getCollection();

  final List<E> confirmed=(List<E>)getConfirmed();

  for (int i=0; i < confirmed.size(); i++) {

    assertEquals(confirmed.get(i),queue.get(i));

  }

  queue.remove();

  queue.remove();

  for (int i=0; i < queue.size(); i++) {

    assertEquals(confirmed.get(i + 2),queue.get(i));

  }

}

Location: CircularFifoQueueTest.java

Content: 

@SuppressWarnings("unchecked") public void testRemoveError1() throws Exception {

  final CircularFifoQueue<E> fifo=new CircularFifoQueue<>(5);

  fifo.add((E)"1");

  fifo.add((E)"2");

  fifo.add((E)"3");

  fifo.add((E)"4");

  fifo.add((E)"5");

  assertEquals("[1, 2, 3, 4, 5]",fifo.toString());

  fifo.remove("3");

  assertEquals("[1, 2, 4, 5]",fifo.toString());

  fifo.remove("4");

  assertEquals("[1, 2, 5]",fifo.toString());

}

Location: CircularFifoQueueTest.java

Content: 

@SuppressWarnings("unchecked") public void testRemoveError2() throws Exception {

  final CircularFifoQueue<E> fifo=new CircularFifoQueue<>(5);

  fifo.add((E)"1");

  fifo.add((E)"2");

  fifo.add((E)"3");

  fifo.add((E)"4");

  fifo.add((E)"5");

  fifo.add((E)"6");

  assertEquals(5,fifo.size());

  assertEquals("[2, 3, 4, 5, 6]",fifo.toString());

  fifo.remove("3");

  assertEquals("[2, 4, 5, 6]",fifo.toString());

  fifo.remove("4");

  assertEquals("[2, 5, 6]",fifo.toString());

}

Location: CircularFifoQueueTest.java

Content: 

@SuppressWarnings("unchecked") public void testRemoveError3() throws Exception {

  final CircularFifoQueue<E> fifo=new CircularFifoQueue<>(5);

  fifo.add((E)"1");

  fifo.add((E)"2");

  fifo.add((E)"3");

  fifo.add((E)"4");

  fifo.add((E)"5");

  assertEquals("[1, 2, 3, 4, 5]",fifo.toString());

  fifo.remove("3");

  assertEquals("[1, 2, 4, 5]",fifo.toString());

  fifo.add((E)"6");

  fifo.add((E)"7");

  assertEquals("[2, 4, 5, 6, 7]",fifo.toString());

  fifo.remove("4");

  assertEquals("[2, 5, 6, 7]",fifo.toString());

}

Location: CircularFifoQueueTest.java

Content: 

@SuppressWarnings("unchecked") public void testRemoveError4() throws Exception {

  final CircularFifoQueue<E> fifo=new CircularFifoQueue<>(5);

  fifo.add((E)"1");

  fifo.add((E)"2");

  fifo.add((E)"3");

  fifo.add((E)"4");

  fifo.add((E)"5");

  fifo.add((E)"6");

  fifo.add((E)"7");

  assertEquals("[3, 4, 5, 6, 7]",fifo.toString());

  fifo.remove("4");

  assertEquals("[3, 5, 6, 7]",fifo.toString());

}

Location: CircularFifoQueueTest.java

Content: 

@SuppressWarnings("unchecked") public void testRemoveError5() throws Exception {

  final CircularFifoQueue<E> fifo=new CircularFifoQueue<>(5);

  fifo.add((E)"1");

  fifo.add((E)"2");

  fifo.add((E)"3");

  fifo.add((E)"4");

  fifo.add((E)"5");

  fifo.add((E)"6");

  fifo.add((E)"7");

  assertEquals("[3, 4, 5, 6, 7]",fifo.toString());

  fifo.remove("5");

  assertEquals("[3, 4, 6, 7]",fifo.toString());

}

Location: CircularFifoQueueTest.java

Content: 

@SuppressWarnings("unchecked") public void testRemoveError6() throws Exception {

  final CircularFifoQueue<E> fifo=new CircularFifoQueue<>(5);

  fifo.add((E)"1");

  fifo.add((E)"2");

  fifo.add((E)"3");

  fifo.add((E)"4");

  fifo.add((E)"5");

  fifo.add((E)"6");

  fifo.add((E)"7");

  assertEquals("[3, 4, 5, 6, 7]",fifo.toString());

  fifo.remove("6");

  assertEquals("[3, 4, 5, 7]",fifo.toString());

}

Location: CircularFifoQueueTest.java

Content: 

@SuppressWarnings("unchecked") public void testRemoveError7() throws Exception {

  final CircularFifoQueue<E> fifo=new CircularFifoQueue<>(5);

  fifo.add((E)"1");

  fifo.add((E)"2");

  fifo.add((E)"3");

  fifo.add((E)"4");

  fifo.add((E)"5");

  fifo.add((E)"6");

  fifo.add((E)"7");

  assertEquals("[3, 4, 5, 6, 7]",fifo.toString());

  fifo.remove("7");

  assertEquals("[3, 4, 5, 6]",fifo.toString());

}

Location: CircularFifoQueueTest.java

Content: 

@SuppressWarnings("unchecked") public void testRemoveError8() throws Exception {

  final CircularFifoQueue<E> fifo=new CircularFifoQueue<>(5);

  fifo.add((E)"1");

  fifo.add((E)"2");

  fifo.add((E)"3");

  fifo.add((E)"4");

  fifo.add((E)"5");

  fifo.add((E)"6");

  fifo.add((E)"7");

  fifo.add((E)"8");

  assertEquals("[4, 5, 6, 7, 8]",fifo.toString());

  fifo.remove("7");

  assertEquals("[4, 5, 6, 8]",fifo.toString());

}

Location: CircularFifoQueueTest.java

Content: 

@SuppressWarnings("unchecked") public void testRemoveError9() throws Exception {

  final CircularFifoQueue<E> fifo=new CircularFifoQueue<>(5);

  fifo.add((E)"1");

  fifo.add((E)"2");

  fifo.add((E)"3");

  fifo.add((E)"4");

  fifo.add((E)"5");

  fifo.add((E)"6");

  fifo.add((E)"7");

  fifo.add((E)"8");

  assertEquals("[4, 5, 6, 7, 8]",fifo.toString());

  fifo.remove("8");

  assertEquals("[4, 5, 6, 7]",fifo.toString());

}

Location: CircularFifoQueueTest.java

Content: 

@SuppressWarnings("unchecked") public void testRepeatedSerialization() throws Exception {

  final CircularFifoQueue<E> b=new CircularFifoQueue<>(2);

  b.add((E)"a");

  assertEquals(1,b.size());

  assertTrue(b.contains("a"));

  ByteArrayOutputStream bos=new ByteArrayOutputStream();

  new ObjectOutputStream(bos).writeObject(b);

  final CircularFifoQueue<E> b2=(CircularFifoQueue<E>)new ObjectInputStream(new ByteArrayInputStream(bos.toByteArray())).readObject();

  assertEquals(1,b2.size());

  assertTrue(b2.contains("a"));

  b2.add((E)"b");

  assertEquals(2,b2.size());

  assertTrue(b2.contains("a"));

  assertTrue(b2.contains("b"));

  bos=new ByteArrayOutputStream();

  new ObjectOutputStream(bos).writeObject(b2);

  final CircularFifoQueue<E> b3=(CircularFifoQueue<E>)new ObjectInputStream(new ByteArrayInputStream(bos.toByteArray())).readObject();

  assertEquals(2,b3.size());

  assertTrue(b3.contains("a"));

  assertTrue(b3.contains("b"));

  b3.add((E)"c");

  assertEquals(2,b3.size());

  assertTrue(b3.contains("b"));

  assertTrue(b3.contains("c"));

}

Location: CircularFifoQueueTest.java

Content: 

public CircularFifoQueueTest(final String testName){

  super(testName);

}

Location: CircularFifoQueueTest.java

Content: 

/** 

 * Overridden because CircularFifoQueue isn't fail fast.

 * @return false

 */

@Override public boolean isFailFastSupported(){

  return false;

}

Location: CircularFifoQueueTest.java

Content: 

public void testAddNull(){

  final CircularFifoQueue<E> b=new CircularFifoQueue<>(2);

  try {

    b.add(null);

    fail();

  }

 catch (  final NullPointerException ex) {

    return;

  }

  fail();

}

Location: CircularFifoQueueTest.java

Content: 

/** 

 * Tests that the removal operation actually removes the first element.

 */

@SuppressWarnings("unchecked") public void testCircularFifoQueueCircular(){

  final List<E> list=new ArrayList<>();

  list.add((E)"A");

  list.add((E)"B");

  list.add((E)"C");

  final Queue<E> queue=new CircularFifoQueue<>(list);

  assertTrue(queue.contains("A"));

  assertTrue(queue.contains("B"));

  assertTrue(queue.contains("C"));

  queue.add((E)"D");

  assertFalse(queue.contains("A"));

  assertTrue(queue.contains("B"));

  assertTrue(queue.contains("C"));

  assertTrue(queue.contains("D"));

  assertEquals("B",queue.peek());

  assertEquals("B",queue.remove());

  assertEquals("C",queue.remove());

  assertEquals("D",queue.remove());

}

Location: CircularFifoQueueTest.java

Content: 

/** 

 * Tests that the removal operation actually removes the first element.

 */

public void testCircularFifoQueueRemove(){

  resetFull();

  final int size=getConfirmed().size();

  for (int i=0; i < size; i++) {

    final Object o1=getCollection().remove();

    final Object o2=((List<?>)getConfirmed()).remove(0);

    assertEquals("Removed objects should be equal",o1,o2);

    verify();

  }

  try {

    getCollection().remove();

    fail("Empty queue should raise Underflow.");

  }

 catch (  final NoSuchElementException e) {

  }

}

Location: CircularFifoQueueTest.java

Content: 

/** 

 * Tests that the constructor correctly throws an exception.

 */

public void testConstructorException1(){

  try {

    new CircularFifoQueue<E>(0);

  }

 catch (  final IllegalArgumentException ex) {

    return;

  }

  fail();

}

Location: CircularFifoQueueTest.java

Content: 

/** 

 * Tests that the constructor correctly throws an exception.

 */

public void testConstructorException2(){

  try {

    new CircularFifoQueue<E>(-20);

  }

 catch (  final IllegalArgumentException ex) {

    return;

  }

  fail();

}

Location: CircularFifoQueueTest.java

Content: 

/** 

 * Tests that the constructor correctly throws an exception.

 */

public void testConstructorException3(){

  try {

    new CircularFifoQueue<E>(null);

  }

 catch (  final NullPointerException ex) {

    return;

  }

  fail();

}

Location: CircularFifoQueueTest.java

Content: 

public void testDefaultSizeAndGetError1(){

  final CircularFifoQueue<E> fifo=new CircularFifoQueue<>();

  assertEquals(32,fifo.maxSize());

  fifo.add((E)"1");

  fifo.add((E)"2");

  fifo.add((E)"3");

  fifo.add((E)"4");

  fifo.add((E)"5");

  assertEquals(5,fifo.size());

  try {

    fifo.get(5);

  }

 catch (  final NoSuchElementException ex) {

    return;

  }

  fail();

}

Location: CircularFifoQueueTest.java

Content: 

public void testDefaultSizeAndGetError2(){

  final CircularFifoQueue<E> fifo=new CircularFifoQueue<>();

  assertEquals(32,fifo.maxSize());

  fifo.add((E)"1");

  fifo.add((E)"2");

  fifo.add((E)"3");

  fifo.add((E)"4");

  fifo.add((E)"5");

  assertEquals(5,fifo.size());

  try {

    fifo.get(-2);

  }

 catch (  final NoSuchElementException ex) {

    return;

  }

  fail();

}

Location: CircularFifoQueueTest.java

Content: 

public void testGetIndex(){

  resetFull();

  final CircularFifoQueue<E> queue=getCollection();

  final List<E> confirmed=(List<E>)getConfirmed();

  for (int i=0; i < confirmed.size(); i++) {

    assertEquals(confirmed.get(i),queue.get(i));

  }

  queue.remove();

  queue.remove();

  for (int i=0; i < queue.size(); i++) {

    assertEquals(confirmed.get(i + 2),queue.get(i));

  }

}

Location: CircularFifoQueueTest.java

Content: 

@SuppressWarnings("unchecked") public void testRemoveError1() throws Exception {

  final CircularFifoQueue<E> fifo=new CircularFifoQueue<>(5);

  fifo.add((E)"1");

  fifo.add((E)"2");

  fifo.add((E)"3");

  fifo.add((E)"4");

  fifo.add((E)"5");

  assertEquals("[1, 2, 3, 4, 5]",fifo.toString());

  fifo.remove("3");

  assertEquals("[1, 2, 4, 5]",fifo.toString());

  fifo.remove("4");

  assertEquals("[1, 2, 5]",fifo.toString());

}

Location: CircularFifoQueueTest.java

Content: 

@SuppressWarnings("unchecked") public void testRemoveError2() throws Exception {

  final CircularFifoQueue<E> fifo=new CircularFifoQueue<>(5);

  fifo.add((E)"1");

  fifo.add((E)"2");

  fifo.add((E)"3");

  fifo.add((E)"4");

  fifo.add((E)"5");

  fifo.add((E)"6");

  assertEquals(5,fifo.size());

  assertEquals("[2, 3, 4, 5, 6]",fifo.toString());

  fifo.remove("3");

  assertEquals("[2, 4, 5, 6]",fifo.toString());

  fifo.remove("4");

  assertEquals("[2, 5, 6]",fifo.toString());

}

Location: CircularFifoQueueTest.java

Content: 

@SuppressWarnings("unchecked") public void testRemoveError3() throws Exception {

  final CircularFifoQueue<E> fifo=new CircularFifoQueue<>(5);

  fifo.add((E)"1");

  fifo.add((E)"2");

  fifo.add((E)"3");

  fifo.add((E)"4");

  fifo.add((E)"5");

  assertEquals("[1, 2, 3, 4, 5]",fifo.toString());

  fifo.remove("3");

  assertEquals("[1, 2, 4, 5]",fifo.toString());

  fifo.add((E)"6");

  fifo.add((E)"7");

  assertEquals("[2, 4, 5, 6, 7]",fifo.toString());

  fifo.remove("4");

  assertEquals("[2, 5, 6, 7]",fifo.toString());

}

Location: CircularFifoQueueTest.java

Content: 

@SuppressWarnings("unchecked") public void testRemoveError4() throws Exception {

  final CircularFifoQueue<E> fifo=new CircularFifoQueue<>(5);

  fifo.add((E)"1");

  fifo.add((E)"2");

  fifo.add((E)"3");

  fifo.add((E)"4");

  fifo.add((E)"5");

  fifo.add((E)"6");

  fifo.add((E)"7");

  assertEquals("[3, 4, 5, 6, 7]",fifo.toString());

  fifo.remove("4");

  assertEquals("[3, 5, 6, 7]",fifo.toString());

}

Location: CircularFifoQueueTest.java

Content: 

@SuppressWarnings("unchecked") public void testRemoveError5() throws Exception {

  final CircularFifoQueue<E> fifo=new CircularFifoQueue<>(5);

  fifo.add((E)"1");

  fifo.add((E)"2");

  fifo.add((E)"3");

  fifo.add((E)"4");

  fifo.add((E)"5");

  fifo.add((E)"6");

  fifo.add((E)"7");

  assertEquals("[3, 4, 5, 6, 7]",fifo.toString());

  fifo.remove("5");

  assertEquals("[3, 4, 6, 7]",fifo.toString());

}

Location: CircularFifoQueueTest.java

Content: 

@SuppressWarnings("unchecked") public void testRemoveError6() throws Exception {

  final CircularFifoQueue<E> fifo=new CircularFifoQueue<>(5);

  fifo.add((E)"1");

  fifo.add((E)"2");

  fifo.add((E)"3");

  fifo.add((E)"4");

  fifo.add((E)"5");

  fifo.add((E)"6");

  fifo.add((E)"7");

  assertEquals("[3, 4, 5, 6, 7]",fifo.toString());

  fifo.remove("6");

  assertEquals("[3, 4, 5, 7]",fifo.toString());

}

Location: CircularFifoQueueTest.java

Content: 

@SuppressWarnings("unchecked") public void testRemoveError7() throws Exception {

  final CircularFifoQueue<E> fifo=new CircularFifoQueue<>(5);

  fifo.add((E)"1");

  fifo.add((E)"2");

  fifo.add((E)"3");

  fifo.add((E)"4");

  fifo.add((E)"5");

  fifo.add((E)"6");

  fifo.add((E)"7");

  assertEquals("[3, 4, 5, 6, 7]",fifo.toString());

  fifo.remove("7");

  assertEquals("[3, 4, 5, 6]",fifo.toString());

}

Location: CircularFifoQueueTest.java

Content: 

@SuppressWarnings("unchecked") public void testRemoveError8() throws Exception {

  final CircularFifoQueue<E> fifo=new CircularFifoQueue<>(5);

  fifo.add((E)"1");

  fifo.add((E)"2");

  fifo.add((E)"3");

  fifo.add((E)"4");

  fifo.add((E)"5");

  fifo.add((E)"6");

  fifo.add((E)"7");

  fifo.add((E)"8");

  assertEquals("[4, 5, 6, 7, 8]",fifo.toString());

  fifo.remove("7");

  assertEquals("[4, 5, 6, 8]",fifo.toString());

}

Location: CircularFifoQueueTest.java

Content: 

@SuppressWarnings("unchecked") public void testRemoveError9() throws Exception {

  final CircularFifoQueue<E> fifo=new CircularFifoQueue<>(5);

  fifo.add((E)"1");

  fifo.add((E)"2");

  fifo.add((E)"3");

  fifo.add((E)"4");

  fifo.add((E)"5");

  fifo.add((E)"6");

  fifo.add((E)"7");

  fifo.add((E)"8");

  assertEquals("[4, 5, 6, 7, 8]",fifo.toString());

  fifo.remove("8");

  assertEquals("[4, 5, 6, 7]",fifo.toString());

}

Location: CircularFifoQueueTest.java

Content: 

@SuppressWarnings("unchecked") public void testRepeatedSerialization() throws Exception {

  final CircularFifoQueue<E> b=new CircularFifoQueue<>(2);

  b.add((E)"a");

  assertEquals(1,b.size());

  assertTrue(b.contains("a"));

  ByteArrayOutputStream bos=new ByteArrayOutputStream();

  new ObjectOutputStream(bos).writeObject(b);

  final CircularFifoQueue<E> b2=(CircularFifoQueue<E>)new ObjectInputStream(new ByteArrayInputStream(bos.toByteArray())).readObject();

  assertEquals(1,b2.size());

  assertTrue(b2.contains("a"));

  b2.add((E)"b");

  assertEquals(2,b2.size());

  assertTrue(b2.contains("a"));

  assertTrue(b2.contains("b"));

  bos=new ByteArrayOutputStream();

  new ObjectOutputStream(bos).writeObject(b2);

  final CircularFifoQueue<E> b3=(CircularFifoQueue<E>)new ObjectInputStream(new ByteArrayInputStream(bos.toByteArray())).readObject();

  assertEquals(2,b3.size());

  assertTrue(b3.contains("a"));

  assertTrue(b3.contains("b"));

  b3.add((E)"c");

  assertEquals(2,b3.size());

  assertTrue(b3.contains("b"));

  assertTrue(b3.contains("c"));

}

