Location: TransformerUtils.java

Content: 

/** 

 * Creates a Transformer that calls a Closure each time the transformer is used. The transformer returns the input object.

 * @param < T >  the input/output type

 * @param closure  the closure to run each time in the transformer, not null

 * @return the transformer

 * @throws NullPointerException if the closure is null

 * @see ClosureTransformer

 */

public static <T>Transformer<T,T> asTransformer(final Closure<? super T> closure){

  return ClosureTransformer.closureTransformer(closure);

}

Location: TransformerUtils.java

Content: 

/** 

 * Creates a Transformer that calls a Factory each time the transformer is used. The transformer will return the value returned by the factory.

 * @param < I >  the input type

 * @param < O >  the output type

 * @param factory  the factory to run each time in the transformer, not null

 * @return the transformer

 * @throws NullPointerException if the factory is null

 * @see FactoryTransformer

 */

public static <I,O>Transformer<I,O> asTransformer(final Factory<? extends O> factory){

  return FactoryTransformer.factoryTransformer(factory);

}

Location: TransformerUtils.java

Content: 

/** 

 * Creates a Transformer that calls a Predicate each time the transformer is used. The transformer will return either Boolean.TRUE or Boolean.FALSE.

 * @param < T >  the input type

 * @param predicate  the predicate to run each time in the transformer, not null

 * @return the transformer

 * @throws NullPointerException if the predicate is null

 * @see PredicateTransformer

 */

public static <T>Transformer<T,Boolean> asTransformer(final Predicate<? super T> predicate){

  return PredicateTransformer.predicateTransformer(predicate);

}

Location: TransformerUtils.java

Content: 

/** 

 * Create a new Transformer that uses the input object as a key to find the transformer to call. <p> The Map consists of object keys and Transformer values. A transformer is called if the input object equals the key. If there is no match, the default transformer is called. The default transformer is set in the map using a null key. If no default is set, null will be returned in a default case.

 * @param < I >  the input type

 * @param < O >  the output type

 * @param objectsAndTransformers  a map of objects to transformers

 * @return the transformer

 * @throws NullPointerException if the map is null

 * @throws NullPointerException if any transformer in the map is null

 * @see SwitchTransformer

 */

@SuppressWarnings("unchecked") public static <I,O>Transformer<I,O> switchMapTransformer(final Map<I,Transformer<I,O>> objectsAndTransformers){

  Objects.requireNonNull(objectsAndTransformers,"objectsAndTransformers");

  final Transformer<? super I,? extends O> def=objectsAndTransformers.remove(null);

  final int size=objectsAndTransformers.size();

  final Transformer<? super I,? extends O>[] trs=new Transformer[size];

  final Predicate<I>[] preds=new Predicate[size];

  int i=0;

  for (  final Map.Entry<I,Transformer<I,O>> entry : objectsAndTransformers.entrySet()) {

    preds[i]=EqualPredicate.<I>equalPredicate(entry.getKey());

    trs[i++]=entry.getValue();

  }

  return TransformerUtils.switchTransformer(preds,trs,def);

}

Location: TransformerUtils.java

Content: 

/** 

 * Create a new Transformer that calls one of the transformers depending on the predicates. The transformer at array location 0 is called if the predicate at array location 0 returned true. Each predicate is evaluated until one returns true. If no predicates evaluate to true, null is returned.

 * @param < I >  the input type

 * @param < O >  the output type

 * @param predicates  an array of predicates to check

 * @param transformers  an array of transformers to call

 * @return the transformer

 * @throws NullPointerException if either array is null

 * @throws NullPointerException if any element in the arrays is null

 * @throws IllegalArgumentException if the arrays have different sizes

 * @see SwitchTransformer

 */

public static <I,O>Transformer<I,O> switchTransformer(final Predicate<? super I>[] predicates,final Transformer<? super I,? extends O>[] transformers){

  return SwitchTransformer.switchTransformer(predicates,transformers,null);

}

Location: TransformerUtils.java

Content: 

/** 

 * This class is not normally instantiated.

 */

private TransformerUtils(){

}

Location: TransformerUtils.java

Content: 

/** 

 * Creates a Transformer that calls a Closure each time the transformer is used. The transformer returns the input object.

 * @param < T >  the input/output type

 * @param closure  the closure to run each time in the transformer, not null

 * @return the transformer

 * @throws NullPointerException if the closure is null

 * @see ClosureTransformer

 */

public static <T>Transformer<T,T> asTransformer(final Closure<? super T> closure){

  return ClosureTransformer.closureTransformer(closure);

}

Location: TransformerUtils.java

Content: 

/** 

 * Creates a Transformer that calls a Factory each time the transformer is used. The transformer will return the value returned by the factory.

 * @param < I >  the input type

 * @param < O >  the output type

 * @param factory  the factory to run each time in the transformer, not null

 * @return the transformer

 * @throws NullPointerException if the factory is null

 * @see FactoryTransformer

 */

public static <I,O>Transformer<I,O> asTransformer(final Factory<? extends O> factory){

  return FactoryTransformer.factoryTransformer(factory);

}

Location: TransformerUtils.java

Content: 

/** 

 * Creates a Transformer that calls a Predicate each time the transformer is used. The transformer will return either Boolean.TRUE or Boolean.FALSE.

 * @param < T >  the input type

 * @param predicate  the predicate to run each time in the transformer, not null

 * @return the transformer

 * @throws NullPointerException if the predicate is null

 * @see PredicateTransformer

 */

public static <T>Transformer<T,Boolean> asTransformer(final Predicate<? super T> predicate){

  return PredicateTransformer.predicateTransformer(predicate);

}

Location: TransformerUtils.java

Content: 

/** 

 * Create a new Transformer that uses the input object as a key to find the transformer to call. <p> The Map consists of object keys and Transformer values. A transformer is called if the input object equals the key. If there is no match, the default transformer is called. The default transformer is set in the map using a null key. If no default is set, null will be returned in a default case.

 * @param < I >  the input type

 * @param < O >  the output type

 * @param objectsAndTransformers  a map of objects to transformers

 * @return the transformer

 * @throws NullPointerException if the map is null

 * @throws NullPointerException if any transformer in the map is null

 * @see SwitchTransformer

 */

@SuppressWarnings("unchecked") public static <I,O>Transformer<I,O> switchMapTransformer(final Map<I,Transformer<I,O>> objectsAndTransformers){

  Objects.requireNonNull(objectsAndTransformers,"objectsAndTransformers");

  final Transformer<? super I,? extends O> def=objectsAndTransformers.remove(null);

  final int size=objectsAndTransformers.size();

  final Transformer<? super I,? extends O>[] trs=new Transformer[size];

  final Predicate<I>[] preds=new Predicate[size];

  int i=0;

  for (  final Map.Entry<I,Transformer<I,O>> entry : objectsAndTransformers.entrySet()) {

    preds[i]=EqualPredicate.<I>equalPredicate(entry.getKey());

    trs[i++]=entry.getValue();

  }

  return TransformerUtils.switchTransformer(preds,trs,def);

}

Location: TransformerUtils.java

Content: 

/** 

 * Create a new Transformer that calls one of the transformers depending on the predicates. The transformer at array location 0 is called if the predicate at array location 0 returned true. Each predicate is evaluated until one returns true. If no predicates evaluate to true, null is returned.

 * @param < I >  the input type

 * @param < O >  the output type

 * @param predicates  an array of predicates to check

 * @param transformers  an array of transformers to call

 * @return the transformer

 * @throws NullPointerException if either array is null

 * @throws NullPointerException if any element in the arrays is null

 * @throws IllegalArgumentException if the arrays have different sizes

 * @see SwitchTransformer

 */

public static <I,O>Transformer<I,O> switchTransformer(final Predicate<? super I>[] predicates,final Transformer<? super I,? extends O>[] transformers){

  return SwitchTransformer.switchTransformer(predicates,transformers,null);

}

Location: TransformerUtils.java

Content: 

/** 

 * This class is not normally instantiated.

 */

private TransformerUtils(){

}

