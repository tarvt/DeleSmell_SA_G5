Location: ListOrderedMap.java

Content: 

/** 

 * Gets a view over the keys in the map as a List. <p> The List will be ordered by object insertion into the map. The List is unmodifiable.

 * @see #keySet()

 * @return the unmodifiable list view over the keys

 * @since 3.2

 */

public List<K> keyList(){

  return UnmodifiableList.unmodifiableList(insertOrder);

}

Location: ListOrderedMap.java

Content: 

/** 

 * Constructs a new empty  {@code ListOrderedMap} that decoratesa  {@code HashMap}.

 * @since 3.1

 */

public ListOrderedMap(){

  this(new HashMap<K,V>());

}

Location: ListOrderedMap.java

Content: 

/** 

 * Constructor that wraps (not copies).

 * @param map  the map to decorate, must not be null

 * @throws NullPointerException if map is null

 */

protected ListOrderedMap(final Map<K,V> map){

  super(map);

  insertOrder.addAll(decorated().keySet());

}

Location: ListOrderedMap.java

Content: 

/** 

 * Gets the next key to the one specified using insert order. This method performs a list search to find the key and is O(n).

 * @param key  the key to find previous for

 * @return the next key, null if no match or at start

 */

@Override public K nextKey(final Object key){

  final int index=insertOrder.indexOf(key);

  if (index >= 0 && index < size() - 1) {

    return insertOrder.get(index + 1);

  }

  return null;

}

Location: ListOrderedMap.java

Content: 

/** 

 * Gets the previous key to the one specified using insert order. This method performs a list search to find the key and is O(n).

 * @param key  the key to find previous for

 * @return the previous key, null if no match or at start

 */

@Override public K previousKey(final Object key){

  final int index=insertOrder.indexOf(key);

  if (index > 0) {

    return insertOrder.get(index - 1);

  }

  return null;

}

Location: ListOrderedMap.java

Content: 

/** 

 * Puts the values contained in a supplied Map into the Map starting at the specified index.

 * @param index the index in the Map to start at.

 * @param map the Map containing the entries to be added.

 * @throws IndexOutOfBoundsException if the index is out of range [0, size]

 */

public void putAll(int index,final Map<? extends K,? extends V> map){

  if (index < 0 || index > insertOrder.size()) {

    throw new IndexOutOfBoundsException("Index: " + index + ", Size: "+ insertOrder.size());

  }

  for (  final Map.Entry<? extends K,? extends V> entry : map.entrySet()) {

    final K key=entry.getKey();

    final boolean contains=containsKey(key);

    put(index,entry.getKey(),entry.getValue());

    if (!contains) {

      index++;

    }

 else {

      index=indexOf(entry.getKey()) + 1;

    }

  }

}

Location: ListOrderedMap.java

Content: 

/** 

 * Puts a key-value mapping into the map at the specified index. <p> If the map already contains the key, then the original mapping is removed and the new mapping added at the specified index. The remove may change the effect of the index. The index is always calculated relative to the original state of the map. <p> Thus the steps are: (1) remove the existing key-value mapping, then (2) insert the new key-value mapping at the position it would have been inserted had the remove not occurred.

 * @param index  the index at which the mapping should be inserted

 * @param key  the key

 * @param value  the value

 * @return the value previously mapped to the key

 * @throws IndexOutOfBoundsException if the index is out of range [0, size]

 * @since 3.2

 */

public V put(int index,final K key,final V value){

  if (index < 0 || index > insertOrder.size()) {

    throw new IndexOutOfBoundsException("Index: " + index + ", Size: "+ insertOrder.size());

  }

  final Map<K,V> m=decorated();

  if (m.containsKey(key)) {

    final V result=m.remove(key);

    final int pos=insertOrder.indexOf(key);

    insertOrder.remove(pos);

    if (pos < index) {

      index--;

    }

    insertOrder.add(index,key);

    m.put(key,value);

    return result;

  }

  insertOrder.add(index,key);

  m.put(key,value);

  return null;

}

Location: ListOrderedMap.java

Content: 

/** 

 * Sets the value at the specified index.

 * @param index  the index of the value to set

 * @param value  the new value to set

 * @return the previous value at that index

 * @throws IndexOutOfBoundsException if the index is invalid

 * @since 3.2

 */

public V setValue(final int index,final V value){

  final K key=insertOrder.get(index);

  return put(key,value);

}

Location: ListOrderedMap.java

Content: 

/** 

 * Gets a view over the values in the map as a List. <p> The List will be ordered by object insertion into the map. The List supports remove and set, but does not support add.

 * @see #values()

 * @return the partially modifiable list view over the values

 * @since 3.2

 */

public List<V> valueList(){

  return new ValuesView<>(this);

}

Location: ListOrderedMap.java

Content: 

/** 

 * Gets a view over the keys in the map as a List. <p> The List will be ordered by object insertion into the map. The List is unmodifiable.

 * @see #keySet()

 * @return the unmodifiable list view over the keys

 * @since 3.2

 */

public List<K> keyList(){

  return UnmodifiableList.unmodifiableList(insertOrder);

}

Location: ListOrderedMap.java

Content: 

/** 

 * Constructs a new empty  {@code ListOrderedMap} that decoratesa  {@code HashMap}.

 * @since 3.1

 */

public ListOrderedMap(){

  this(new HashMap<K,V>());

}

Location: ListOrderedMap.java

Content: 

/** 

 * Constructor that wraps (not copies).

 * @param map  the map to decorate, must not be null

 * @throws NullPointerException if map is null

 */

protected ListOrderedMap(final Map<K,V> map){

  super(map);

  insertOrder.addAll(decorated().keySet());

}

Location: ListOrderedMap.java

Content: 

/** 

 * Gets the next key to the one specified using insert order. This method performs a list search to find the key and is O(n).

 * @param key  the key to find previous for

 * @return the next key, null if no match or at start

 */

@Override public K nextKey(final Object key){

  final int index=insertOrder.indexOf(key);

  if (index >= 0 && index < size() - 1) {

    return insertOrder.get(index + 1);

  }

  return null;

}

Location: ListOrderedMap.java

Content: 

/** 

 * Gets the previous key to the one specified using insert order. This method performs a list search to find the key and is O(n).

 * @param key  the key to find previous for

 * @return the previous key, null if no match or at start

 */

@Override public K previousKey(final Object key){

  final int index=insertOrder.indexOf(key);

  if (index > 0) {

    return insertOrder.get(index - 1);

  }

  return null;

}

Location: ListOrderedMap.java

Content: 

/** 

 * Puts the values contained in a supplied Map into the Map starting at the specified index.

 * @param index the index in the Map to start at.

 * @param map the Map containing the entries to be added.

 * @throws IndexOutOfBoundsException if the index is out of range [0, size]

 */

public void putAll(int index,final Map<? extends K,? extends V> map){

  if (index < 0 || index > insertOrder.size()) {

    throw new IndexOutOfBoundsException("Index: " + index + ", Size: "+ insertOrder.size());

  }

  for (  final Map.Entry<? extends K,? extends V> entry : map.entrySet()) {

    final K key=entry.getKey();

    final boolean contains=containsKey(key);

    put(index,entry.getKey(),entry.getValue());

    if (!contains) {

      index++;

    }

 else {

      index=indexOf(entry.getKey()) + 1;

    }

  }

}

Location: ListOrderedMap.java

Content: 

/** 

 * Puts a key-value mapping into the map at the specified index. <p> If the map already contains the key, then the original mapping is removed and the new mapping added at the specified index. The remove may change the effect of the index. The index is always calculated relative to the original state of the map. <p> Thus the steps are: (1) remove the existing key-value mapping, then (2) insert the new key-value mapping at the position it would have been inserted had the remove not occurred.

 * @param index  the index at which the mapping should be inserted

 * @param key  the key

 * @param value  the value

 * @return the value previously mapped to the key

 * @throws IndexOutOfBoundsException if the index is out of range [0, size]

 * @since 3.2

 */

public V put(int index,final K key,final V value){

  if (index < 0 || index > insertOrder.size()) {

    throw new IndexOutOfBoundsException("Index: " + index + ", Size: "+ insertOrder.size());

  }

  final Map<K,V> m=decorated();

  if (m.containsKey(key)) {

    final V result=m.remove(key);

    final int pos=insertOrder.indexOf(key);

    insertOrder.remove(pos);

    if (pos < index) {

      index--;

    }

    insertOrder.add(index,key);

    m.put(key,value);

    return result;

  }

  insertOrder.add(index,key);

  m.put(key,value);

  return null;

}

Location: ListOrderedMap.java

Content: 

/** 

 * Sets the value at the specified index.

 * @param index  the index of the value to set

 * @param value  the new value to set

 * @return the previous value at that index

 * @throws IndexOutOfBoundsException if the index is invalid

 * @since 3.2

 */

public V setValue(final int index,final V value){

  final K key=insertOrder.get(index);

  return put(key,value);

}

Location: ListOrderedMap.java

Content: 

/** 

 * Gets a view over the values in the map as a List. <p> The List will be ordered by object insertion into the map. The List supports remove and set, but does not support add.

 * @see #values()

 * @return the partially modifiable list view over the values

 * @since 3.2

 */

public List<V> valueList(){

  return new ValuesView<>(this);

}

