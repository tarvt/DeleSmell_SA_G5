Location: AbstractMultiValuedMapTest.java

Content: 

public AbstractMultiValuedMapTest(final String testName){

  super(testName);

}

Location: AbstractMultiValuedMapTest.java

Content: 

protected void addSampleMappings(final MultiValuedMap<? super K,? super V> map){

  final K[] keys=getSampleKeys();

  final V[] values=getSampleValues();

  for (int i=0; i < keys.length; i++) {

    map.put(keys[i],values[i]);

  }

}

Location: AbstractMultiValuedMapTest.java

Content: 

public BulkTest bulkTestAsMap(){

  return new TestMultiValuedMapAsMap();

}

Location: AbstractMultiValuedMapTest.java

Content: 

/** 

 * Bulk test  {@link MultiValuedMap#entries()}. This method runs through all of the tests in  {@link AbstractCollectionTest}. After modification operations,  {@link #verify()} is invoked to ensure that the map and theother collection views are still valid.

 * @return a {@link AbstractCollectionTest} instance for testing the map'svalues collection

 */

public BulkTest bulkTestMultiValuedMapEntries(){

  return new TestMultiValuedMapEntries();

}

Location: AbstractMultiValuedMapTest.java

Content: 

/** 

 * Bulk test  {@link MultiValuedMap#keys()}. This method runs through all of the tests in  {@link AbstractBagTest}. After modification operations, {@link #verify()} is invoked to ensure that the map and the othercollection views are still valid.

 * @return a {@link AbstractBagTest} instance for testing the map's valuescollection

 */

public BulkTest bulkTestMultiValuedMapKeys(){

  return new TestMultiValuedMapKeys();

}

Location: AbstractMultiValuedMapTest.java

Content: 

/** 

 * Bulk test  {@link MultiValuedMap#keySet()}. This method runs through all of the tests in  {@link AbstractSetTest}. After modification operations, {@link #verify()} is invoked to ensure that the map and the othercollection views are still valid.

 * @return a {@link AbstractSetTest} instance for testing the map's key set

 */

public BulkTest bulkTestMultiValuedMapKeySet(){

  return new TestMultiValuedMapKeySet();

}

Location: AbstractMultiValuedMapTest.java

Content: 

/** 

 * Bulk test  {@link MultiValuedMap#values()}. This method runs through all of the tests in  {@link AbstractCollectionTest}. After modification operations,  {@link #verify()} is invoked to ensure that the map and theother collection views are still valid.

 * @return a {@link AbstractCollectionTest} instance for testing the map'svalues collection

 */

public BulkTest bulkTestMultiValuedMapValues(){

  return new TestMultiValuedMapValues();

}

Location: AbstractMultiValuedMapTest.java

Content: 

public MultiValuedMap<K,V> getMap(){

  return this.map;

}

Location: AbstractMultiValuedMapTest.java

Content: 

/** 

 * Returns the set of keys in the mappings used to test the map. This method must return an array with the same length as  {@link #getSampleValues()}and all array elements must be different. The default implementation constructs a set of String keys, and includes a single null key if {@link #isAllowNullKey()} returns {@code true}.

 */

@SuppressWarnings("unchecked") public K[] getSampleKeys(){

  final Object[] result=new Object[]{"one","one","two","two","three","three"};

  return (K[])result;

}

Location: AbstractMultiValuedMapTest.java

Content: 

/** 

 * Returns the set of values in the mappings used to test the map. This method must return an array with the same length as {@link #getSampleKeys()}. The default implementation constructs a set of String values

 */

@SuppressWarnings("unchecked") public V[] getSampleValues(){

  final Object[] result=new Object[]{"uno","un","dos","deux","tres","trois"};

  return (V[])result;

}

Location: AbstractMultiValuedMapTest.java

Content: 

@Override public boolean isTestSerialization(){

  return true;

}

Location: AbstractMultiValuedMapTest.java

Content: 

public void setConfirmed(final MultiValuedMap<K,V> map){

  this.confirmed=map;

}

Location: AbstractMultiValuedMapTest.java

Content: 

@SuppressWarnings("unchecked") public void testAddMappingThroughGet(){

  if (!isAddSupported()) {

    return;

  }

  resetEmpty();

  final MultiValuedMap<K,V> map=getMap();

  final Collection<V> col1=map.get((K)"one");

  final Collection<V> col2=map.get((K)"one");

  assertTrue(col1.isEmpty());

  assertTrue(col2.isEmpty());

  assertEquals(0,map.size());

  col1.add((V)"uno");

  col2.add((V)"un");

  assertTrue(map.containsKey("one"));

  assertTrue(map.containsMapping("one","uno"));

  assertTrue(map.containsMapping("one","un"));

  assertTrue(map.containsValue("uno"));

  assertTrue(map.containsValue("un"));

  assertTrue(col1.contains("un"));

  assertTrue(col2.contains("uno"));

}

Location: AbstractMultiValuedMapTest.java

Content: 

public void testAsMapGet(){

  resetEmpty();

  Map<K,Collection<V>> mapCol=getMap().asMap();

  assertNull(mapCol.get("one"));

  assertEquals(0,mapCol.size());

  resetFull();

  mapCol=getMap().asMap();

  final Collection<V> col=mapCol.get("one");

  assertNotNull(col);

  assertTrue(col.contains("un"));

  assertTrue(col.contains("uno"));

}

Location: AbstractMultiValuedMapTest.java

Content: 

public void testAsMapRemove(){

  if (!isRemoveSupported()) {

    return;

  }

  resetFull();

  final Map<K,Collection<V>> mapCol=getMap().asMap();

  mapCol.remove("one");

  assertFalse(getMap().containsKey("one"));

  assertEquals(4,getMap().size());

}

Location: AbstractMultiValuedMapTest.java

Content: 

@SuppressWarnings("unchecked") public void testContainsValue_Key(){

  final MultiValuedMap<K,V> map=makeFullMap();

  assertTrue(map.containsMapping("one","uno"));

  assertFalse(map.containsMapping("two","2"));

  if (!isAddSupported()) {

    return;

  }

  map.put((K)"A",(V)"AA");

  assertTrue(map.containsMapping("A","AA"));

  assertFalse(map.containsMapping("A","AB"));

}

Location: AbstractMultiValuedMapTest.java

Content: 

public void testEmptyMapCompatibility() throws Exception {

  final MultiValuedMap<?,?> map=makeObject();

  final MultiValuedMap<?,?> map2=(MultiValuedMap<?,?>)readExternalFormFromDisk(getCanonicalEmptyCollectionName(map));

  assertEquals("Map is empty",0,map2.size());

}

Location: AbstractMultiValuedMapTest.java

Content: 

public void testEntriesCollectionIterator(){

  final MultiValuedMap<K,V> map=makeFullMap();

  final Collection<V> values=new ArrayList<>(map.values());

  final Iterator<Map.Entry<K,V>> iterator=map.entries().iterator();

  while (iterator.hasNext()) {

    final Map.Entry<K,V> entry=iterator.next();

    assertTrue(map.containsMapping(entry.getKey(),entry.getValue()));

    assertTrue(values.contains(entry.getValue()));

    if (isRemoveSupported()) {

      assertTrue(values.remove(entry.getValue()));

    }

  }

  if (isRemoveSupported()) {

    assertTrue(values.isEmpty());

  }

}

Location: AbstractMultiValuedMapTest.java

Content: 

@SuppressWarnings({"rawtypes","unchecked"}) public void testFullMapCompatibility() throws Exception {

  final MultiValuedMap map=makeFullMap();

  final MultiValuedMap map2=(MultiValuedMap)readExternalFormFromDisk(getCanonicalFullCollectionName(map));

  assertEquals("Map is the right size",map.size(),map2.size());

  for (  final Object key : map.keySet()) {

    assertTrue("Map had inequal elements",CollectionUtils.isEqualCollection(map.get(key),map2.get(key)));

    if (isRemoveSupported()) {

      map2.remove(key);

    }

  }

  if (isRemoveSupported()) {

    assertEquals("Map had extra values",0,map2.size());

  }

}

Location: AbstractMultiValuedMapTest.java

Content: 

public void testKeyContainsValue(){

  final MultiValuedMap<K,V> map=makeFullMap();

  assertTrue(map.containsMapping("one","uno"));

  assertTrue(map.containsMapping("one","un"));

  assertTrue(map.containsMapping("two","dos"));

  assertTrue(map.containsMapping("two","deux"));

  assertTrue(map.containsMapping("three","tres"));

  assertTrue(map.containsMapping("three","trois"));

  assertFalse(map.containsMapping("four","quatro"));

}

Location: AbstractMultiValuedMapTest.java

Content: 

@SuppressWarnings("unchecked") public void testKeysBagContainsAll(){

  final MultiValuedMap<K,V> map=makeFullMap();

  final MultiSet<K> keyMultiSet=map.keys();

  final Collection<K> col=(Collection<K>)Arrays.asList("one","two","three","one","two","three");

  assertTrue(keyMultiSet.containsAll(col));

}

Location: AbstractMultiValuedMapTest.java

Content: 

public void testKeysBagIterator(){

  final MultiValuedMap<K,V> map=makeFullMap();

  final Collection<K> col=new ArrayList<>();

  final Iterator<K> it=map.keys().iterator();

  while (it.hasNext()) {

    col.add(it.next());

  }

  final Bag<K> bag=new HashBag<>(col);

  assertEquals(2,bag.getCount("one"));

  assertEquals(2,bag.getCount("two"));

  assertEquals(2,bag.getCount("three"));

  assertEquals(6,bag.size());

}

Location: AbstractMultiValuedMapTest.java

Content: 

public void testKeySetSize(){

  final MultiValuedMap<K,V> map=makeFullMap();

  assertEquals(3,map.keySet().size());

}

Location: AbstractMultiValuedMapTest.java

Content: 

public void testKeysMultiSet(){

  final MultiValuedMap<K,V> map=makeFullMap();

  final MultiSet<K> keyMultiSet=map.keys();

  assertEquals(2,keyMultiSet.getCount("one"));

  assertEquals(2,keyMultiSet.getCount("two"));

  assertEquals(2,keyMultiSet.getCount("three"));

  assertEquals(0,keyMultiSet.getCount("conut"));

  assertEquals(6,keyMultiSet.size());

}

Location: AbstractMultiValuedMapTest.java

Content: 

@SuppressWarnings("unchecked") public void testMapEquals(){

  if (!isAddSupported()) {

    return;

  }

  final MultiValuedMap<K,V> one=makeObject();

  final Integer value=Integer.valueOf(1);

  one.put((K)"One",(V)value);

  one.removeMapping("One",value);

  final MultiValuedMap<K,V> two=makeObject();

  assertEquals(two,one);

}

Location: AbstractMultiValuedMapTest.java

Content: 

public void testMapIteratorRemove(){

  if (!isRemoveSupported()) {

    return;

  }

  resetFull();

  final MapIterator<K,V> mapIt=getMap().mapIterator();

  while (mapIt.hasNext()) {

    mapIt.next();

    mapIt.remove();

  }

  assertTrue(getMap().isEmpty());

}

Location: AbstractMultiValuedMapTest.java

Content: 

@SuppressWarnings("unchecked") public void testMapIteratorUnsupportedSet(){

  hongshuai();

  this.map=makeFullMap();

  this.confirmed=makeConfirmedMap();

  final K[] k=getSampleKeys();

  final V[] v=getSampleValues();

  for (int i=0; i < k.length; i++) {

    confirmed.put(k[i],v[i]);

  }

  final MapIterator<K,V> mapIt=getMap().mapIterator();

  mapIt.next();

  try {

    mapIt.setValue((V)"some value");

    fail();

  }

 catch (  final UnsupportedOperationException e) {

  }

}

Location: AbstractMultiValuedMapTest.java

Content: 

public void testMultipleValues(){

  final MultiValuedMap<K,V> map=makeFullMap();

  @SuppressWarnings("unchecked") final Collection<V> col=map.get((K)"one");

  assertTrue(col.contains("uno"));

  assertTrue(col.contains("un"));

}

Location: AbstractMultiValuedMapTest.java

Content: 

public void testMultiValuedMapIterator(){

  final MultiValuedMap<K,V> map=makeFullMap();

  final MapIterator<K,V> it=map.mapIterator();

  try {

    it.getKey();

    fail();

  }

 catch (  final IllegalStateException ise) {

  }

  try {

    it.getValue();

    fail();

  }

 catch (  final IllegalStateException ise) {

  }

  if (isAddSupported()) {

    try {

      it.setValue((V)"V");

      fail();

    }

 catch (    final IllegalStateException ise) {

    }

  }

  if (!isHashSetValue() && isAddSupported()) {

    assertTrue(it.hasNext());

    assertEquals("one",it.next());

    assertEquals("one",it.getKey());

    assertEquals("uno",it.getValue());

    assertEquals("one",it.next());

    assertEquals("one",it.getKey());

    assertEquals("un",it.getValue());

    assertEquals("two",it.next());

    assertEquals("two",it.getKey());

    assertEquals("dos",it.getValue());

    assertEquals("two",it.next());

    assertEquals("two",it.getKey());

    assertEquals("deux",it.getValue());

    assertEquals("three",it.next());

    assertEquals("three",it.getKey());

    assertEquals("tres",it.getValue());

    assertEquals("three",it.next());

    assertEquals("three",it.getKey());

    assertEquals("trois",it.getValue());

    try {

      it.setValue((V)"threetrois");

      fail();

    }

 catch (    final UnsupportedOperationException e) {

    }

  }

}

Location: AbstractMultiValuedMapTest.java

Content: 

@SuppressWarnings("unchecked") public void testNoMappingReturnsEmptyCol(){

  final MultiValuedMap<K,V> map=makeFullMap();

  assertTrue(map.get((K)"whatever").isEmpty());

}

Location: AbstractMultiValuedMapTest.java

Content: 

@SuppressWarnings("unchecked") public void testPutAll_KeyIterable(){

  if (!isAddSupported()) {

    return;

  }

  final MultiValuedMap<K,V> map=makeObject();

  Collection<V> coll=(Collection<V>)Arrays.asList("X","Y","Z");

  assertTrue(map.putAll((K)"A",coll));

  assertEquals(3,map.get((K)"A").size());

  assertTrue(map.containsMapping("A","X"));

  assertTrue(map.containsMapping("A","Y"));

  assertTrue(map.containsMapping("A","Z"));

  try {

    map.putAll((K)"A",null);

    fail("expecting NullPointerException");

  }

 catch (  final NullPointerException npe) {

  }

  assertEquals(3,map.get((K)"A").size());

  assertTrue(map.containsMapping("A","X"));

  assertTrue(map.containsMapping("A","Y"));

  assertTrue(map.containsMapping("A","Z"));

  assertFalse(map.putAll((K)"A",new ArrayList<V>()));

  assertEquals(3,map.get((K)"A").size());

  assertTrue(map.containsMapping("A","X"));

  assertTrue(map.containsMapping("A","Y"));

  assertTrue(map.containsMapping("A","Z"));

  coll=(Collection<V>)Arrays.asList("M");

  assertTrue(map.putAll((K)"A",coll));

  assertEquals(4,map.get((K)"A").size());

  assertTrue(map.containsMapping("A","X"));

  assertTrue(map.containsMapping("A","Y"));

  assertTrue(map.containsMapping("A","Z"));

  assertTrue(map.containsMapping("A","M"));

}

Location: AbstractMultiValuedMapTest.java

Content: 

@SuppressWarnings("unchecked") public void testPutAll_Map1(){

  if (!isAddSupported()) {

    return;

  }

  final MultiValuedMap<K,V> original=makeObject();

  original.put((K)"key",(V)"object1");

  original.put((K)"key",(V)"object2");

  final MultiValuedMap<K,V> test=makeObject();

  test.put((K)"keyA",(V)"objectA");

  test.put((K)"key",(V)"object0");

  test.putAll(original);

  try {

    final MultiValuedMap<K,V> originalNull=null;

    test.putAll(originalNull);

    fail("expecting NullPointerException");

  }

 catch (  final NullPointerException npe) {

  }

  assertEquals(2,test.keySet().size());

  assertEquals(4,test.size());

  assertEquals(1,test.get((K)"keyA").size());

  assertEquals(3,test.get((K)"key").size());

  assertTrue(test.containsValue("objectA"));

  assertTrue(test.containsValue("object0"));

  assertTrue(test.containsValue("object1"));

  assertTrue(test.containsValue("object2"));

}

Location: AbstractMultiValuedMapTest.java

Content: 

@SuppressWarnings("unchecked") public void testPutAll_Map2(){

  if (!isAddSupported()) {

    return;

  }

  final Map<K,V> original=new HashMap<>();

  original.put((K)"keyX",(V)"object1");

  original.put((K)"keyY",(V)"object2");

  final MultiValuedMap<K,V> test=makeObject();

  test.put((K)"keyA",(V)"objectA");

  test.put((K)"keyX",(V)"object0");

  test.putAll(original);

  try {

    final Map<K,V> originalNull=null;

    test.putAll(originalNull);

    fail("expecting NullPointerException");

  }

 catch (  final NullPointerException npe) {

  }

  assertEquals(3,test.keySet().size());

  assertEquals(4,test.size());

  assertEquals(1,test.get((K)"keyA").size());

  assertEquals(2,test.get((K)"keyX").size());

  assertEquals(1,test.get((K)"keyY").size());

  assertTrue(test.containsValue("objectA"));

  assertTrue(test.containsValue("object0"));

  assertTrue(test.containsValue("object1"));

  assertTrue(test.containsValue("object2"));

}

Location: AbstractMultiValuedMapTest.java

Content: 

@SuppressWarnings("unchecked") public void testRemoveAllViaEntriesIterator(){

  if (!isRemoveSupported()) {

    return;

  }

  final MultiValuedMap<K,V> map=makeFullMap();

  for (final Iterator<?> i=map.entries().iterator(); i.hasNext(); ) {

    i.next();

    i.remove();

  }

  assertTrue(map.get((K)"one").isEmpty());

  assertEquals(0,map.size());

}

Location: AbstractMultiValuedMapTest.java

Content: 

@SuppressWarnings("unchecked") public void testRemoveAllViaValuesIterator(){

  if (!isRemoveSupported()) {

    return;

  }

  final MultiValuedMap<K,V> map=makeFullMap();

  for (final Iterator<?> i=map.values().iterator(); i.hasNext(); ) {

    i.next();

    i.remove();

  }

  assertTrue(map.get((K)"one").isEmpty());

  assertTrue(map.isEmpty());

}

Location: AbstractMultiValuedMapTest.java

Content: 

public void testRemoveMappingThroughGet(){

  if (!isRemoveSupported()) {

    return;

  }

  resetFull();

  final MultiValuedMap<K,V> map=getMap();

  @SuppressWarnings("unchecked") Collection<V> col=map.get((K)"one");

  assertEquals(2,col.size());

  assertEquals(6,map.size());

  col.remove("uno");

  col.remove("un");

  assertFalse(map.containsKey("one"));

  assertFalse(map.containsMapping("one","uno"));

  assertFalse(map.containsMapping("one","un"));

  assertFalse(map.containsValue("uno"));

  assertFalse(map.containsValue("un"));

  assertEquals(4,map.size());

  col=map.remove("one");

  assertNotNull(col);

  assertEquals(0,col.size());

}

Location: AbstractMultiValuedMapTest.java

Content: 

public void testRemoveMappingThroughGetIterator(){

  if (!isRemoveSupported()) {

    return;

  }

  resetFull();

  final MultiValuedMap<K,V> map=getMap();

  @SuppressWarnings("unchecked") final Iterator<V> it=map.get((K)"one").iterator();

  while (it.hasNext()) {

    it.next();

    it.remove();

  }

  assertFalse(map.containsKey("one"));

  assertFalse(map.containsMapping("one","uno"));

  assertFalse(map.containsMapping("one","un"));

  assertFalse(map.containsValue("uno"));

  assertFalse(map.containsValue("un"));

  assertEquals(4,map.size());

  final Collection<V> coll=map.remove("one");

  assertNotNull(coll);

  assertEquals(0,coll.size());

}

Location: AbstractMultiValuedMapTest.java

Content: 

public void testRemoveViaValuesRemove(){

  if (!isRemoveSupported()) {

    return;

  }

  final MultiValuedMap<K,V> map=makeFullMap();

  final Collection<V> values=map.values();

  values.remove("uno");

  values.remove("un");

  assertFalse(map.containsKey("one"));

  assertEquals(4,map.size());

}

Location: AbstractMultiValuedMapTest.java

Content: 

@SuppressWarnings("unchecked") public void testRemove_KeyItem(){

  if (!isRemoveSupported() || !isAddSupported()) {

    return;

  }

  final MultiValuedMap<K,V> map=makeObject();

  map.put((K)"A",(V)"AA");

  map.put((K)"A",(V)"AB");

  map.put((K)"A",(V)"AC");

  assertFalse(map.removeMapping("C","CA"));

  assertFalse(map.removeMapping("A","AD"));

  assertTrue(map.removeMapping("A","AC"));

  assertTrue(map.removeMapping("A","AB"));

  assertTrue(map.removeMapping("A","AA"));

}

Location: AbstractMultiValuedMapTest.java

Content: 

@SuppressWarnings("unchecked") public void testSizeWithPutRemove(){

  if (!isRemoveSupported() || !isAddSupported()) {

    return;

  }

  final MultiValuedMap<K,V> map=makeObject();

  assertEquals(0,map.size());

  map.put((K)"A",(V)"AA");

  assertEquals(1,map.size());

  map.put((K)"B",(V)"BA");

  assertEquals(2,map.size());

  map.put((K)"B",(V)"BB");

  assertEquals(3,map.size());

  map.put((K)"B",(V)"BC");

  assertEquals(4,map.size());

  map.remove("A");

  assertEquals(3,map.size());

  map.removeMapping("B","BC");

  assertEquals(2,map.size());

}

Location: AbstractMultiValuedMapTest.java

Content: 

@SuppressWarnings("unchecked") public void testSize_Key(){

  final MultiValuedMap<K,V> map=makeFullMap();

  assertEquals(2,map.get((K)"one").size());

  assertEquals(2,map.get((K)"two").size());

  assertEquals(2,map.get((K)"three").size());

  if (!isAddSupported()) {

    return;

  }

  map.put((K)"A",(V)"AA");

  assertEquals(1,map.get((K)"A").size());

  map.put((K)"B",(V)"BA");

  assertEquals(1,map.get((K)"A").size());

  assertEquals(1,map.get((K)"B").size());

  map.put((K)"B",(V)"BB");

  assertEquals(1,map.get((K)"A").size());

  assertEquals(2,map.get((K)"B").size());

  map.put((K)"B",(V)"BC");

  assertEquals(1,map.get((K)"A").size());

  assertEquals(3,map.get((K)"B").size());

  if (!isRemoveSupported()) {

    return;

  }

  map.remove("A");

  assertEquals(3,map.get((K)"B").size());

  map.removeMapping("B","BC");

  assertEquals(2,map.get((K)"B").size());

}

Location: AbstractMultiValuedMapTest.java

Content: 

public AbstractMultiValuedMapTest(final String testName){

  super(testName);

}

Location: AbstractMultiValuedMapTest.java

Content: 

protected void addSampleMappings(final MultiValuedMap<? super K,? super V> map){

  final K[] keys=getSampleKeys();

  final V[] values=getSampleValues();

  for (int i=0; i < keys.length; i++) {

    map.put(keys[i],values[i]);

  }

}

Location: AbstractMultiValuedMapTest.java

Content: 

public BulkTest bulkTestAsMap(){

  return new TestMultiValuedMapAsMap();

}

Location: AbstractMultiValuedMapTest.java

Content: 

/** 

 * Bulk test  {@link MultiValuedMap#entries()}. This method runs through all of the tests in  {@link AbstractCollectionTest}. After modification operations,  {@link #verify()} is invoked to ensure that the map and theother collection views are still valid.

 * @return a {@link AbstractCollectionTest} instance for testing the map'svalues collection

 */

public BulkTest bulkTestMultiValuedMapEntries(){

  return new TestMultiValuedMapEntries();

}

Location: AbstractMultiValuedMapTest.java

Content: 

/** 

 * Bulk test  {@link MultiValuedMap#keys()}. This method runs through all of the tests in  {@link AbstractBagTest}. After modification operations, {@link #verify()} is invoked to ensure that the map and the othercollection views are still valid.

 * @return a {@link AbstractBagTest} instance for testing the map's valuescollection

 */

public BulkTest bulkTestMultiValuedMapKeys(){

  return new TestMultiValuedMapKeys();

}

Location: AbstractMultiValuedMapTest.java

Content: 

/** 

 * Bulk test  {@link MultiValuedMap#keySet()}. This method runs through all of the tests in  {@link AbstractSetTest}. After modification operations, {@link #verify()} is invoked to ensure that the map and the othercollection views are still valid.

 * @return a {@link AbstractSetTest} instance for testing the map's key set

 */

public BulkTest bulkTestMultiValuedMapKeySet(){

  return new TestMultiValuedMapKeySet();

}

Location: AbstractMultiValuedMapTest.java

Content: 

/** 

 * Bulk test  {@link MultiValuedMap#values()}. This method runs through all of the tests in  {@link AbstractCollectionTest}. After modification operations,  {@link #verify()} is invoked to ensure that the map and theother collection views are still valid.

 * @return a {@link AbstractCollectionTest} instance for testing the map'svalues collection

 */

public BulkTest bulkTestMultiValuedMapValues(){

  return new TestMultiValuedMapValues();

}

Location: AbstractMultiValuedMapTest.java

Content: 

public MultiValuedMap<K,V> getMap(){

  return this.map;

}

Location: AbstractMultiValuedMapTest.java

Content: 

/** 

 * Returns the set of keys in the mappings used to test the map. This method must return an array with the same length as  {@link #getSampleValues()}and all array elements must be different. The default implementation constructs a set of String keys, and includes a single null key if {@link #isAllowNullKey()} returns {@code true}.

 */

@SuppressWarnings("unchecked") public K[] getSampleKeys(){

  final Object[] result=new Object[]{"one","one","two","two","three","three"};

  return (K[])result;

}

Location: AbstractMultiValuedMapTest.java

Content: 

/** 

 * Returns the set of values in the mappings used to test the map. This method must return an array with the same length as {@link #getSampleKeys()}. The default implementation constructs a set of String values

 */

@SuppressWarnings("unchecked") public V[] getSampleValues(){

  final Object[] result=new Object[]{"uno","un","dos","deux","tres","trois"};

  return (V[])result;

}

Location: AbstractMultiValuedMapTest.java

Content: 

@Override public boolean isTestSerialization(){

  return true;

}

Location: AbstractMultiValuedMapTest.java

Content: 

public void setConfirmed(final MultiValuedMap<K,V> map){

  this.confirmed=map;

}

Location: AbstractMultiValuedMapTest.java

Content: 

@SuppressWarnings("unchecked") public void testAddMappingThroughGet(){

  if (!isAddSupported()) {

    return;

  }

  resetEmpty();

  final MultiValuedMap<K,V> map=getMap();

  final Collection<V> col1=map.get((K)"one");

  final Collection<V> col2=map.get((K)"one");

  assertTrue(col1.isEmpty());

  assertTrue(col2.isEmpty());

  assertEquals(0,map.size());

  col1.add((V)"uno");

  col2.add((V)"un");

  assertTrue(map.containsKey("one"));

  assertTrue(map.containsMapping("one","uno"));

  assertTrue(map.containsMapping("one","un"));

  assertTrue(map.containsValue("uno"));

  assertTrue(map.containsValue("un"));

  assertTrue(col1.contains("un"));

  assertTrue(col2.contains("uno"));

}

Location: AbstractMultiValuedMapTest.java

Content: 

public void testAsMapGet(){

  resetEmpty();

  Map<K,Collection<V>> mapCol=getMap().asMap();

  assertNull(mapCol.get("one"));

  assertEquals(0,mapCol.size());

  resetFull();

  mapCol=getMap().asMap();

  final Collection<V> col=mapCol.get("one");

  assertNotNull(col);

  assertTrue(col.contains("un"));

  assertTrue(col.contains("uno"));

}

Location: AbstractMultiValuedMapTest.java

Content: 

public void testAsMapRemove(){

  if (!isRemoveSupported()) {

    return;

  }

  resetFull();

  final Map<K,Collection<V>> mapCol=getMap().asMap();

  mapCol.remove("one");

  assertFalse(getMap().containsKey("one"));

  assertEquals(4,getMap().size());

}

Location: AbstractMultiValuedMapTest.java

Content: 

@SuppressWarnings("unchecked") public void testContainsValue_Key(){

  final MultiValuedMap<K,V> map=makeFullMap();

  assertTrue(map.containsMapping("one","uno"));

  assertFalse(map.containsMapping("two","2"));

  if (!isAddSupported()) {

    return;

  }

  map.put((K)"A",(V)"AA");

  assertTrue(map.containsMapping("A","AA"));

  assertFalse(map.containsMapping("A","AB"));

}

Location: AbstractMultiValuedMapTest.java

Content: 

public void testEmptyMapCompatibility() throws Exception {

  final MultiValuedMap<?,?> map=makeObject();

  final MultiValuedMap<?,?> map2=(MultiValuedMap<?,?>)readExternalFormFromDisk(getCanonicalEmptyCollectionName(map));

  assertEquals("Map is empty",0,map2.size());

}

Location: AbstractMultiValuedMapTest.java

Content: 

public void testEntriesCollectionIterator(){

  final MultiValuedMap<K,V> map=makeFullMap();

  final Collection<V> values=new ArrayList<>(map.values());

  final Iterator<Map.Entry<K,V>> iterator=map.entries().iterator();

  while (iterator.hasNext()) {

    final Map.Entry<K,V> entry=iterator.next();

    assertTrue(map.containsMapping(entry.getKey(),entry.getValue()));

    assertTrue(values.contains(entry.getValue()));

    if (isRemoveSupported()) {

      assertTrue(values.remove(entry.getValue()));

    }

  }

  if (isRemoveSupported()) {

    assertTrue(values.isEmpty());

  }

}

Location: AbstractMultiValuedMapTest.java

Content: 

@SuppressWarnings({"rawtypes","unchecked"}) public void testFullMapCompatibility() throws Exception {

  final MultiValuedMap map=makeFullMap();

  final MultiValuedMap map2=(MultiValuedMap)readExternalFormFromDisk(getCanonicalFullCollectionName(map));

  assertEquals("Map is the right size",map.size(),map2.size());

  for (  final Object key : map.keySet()) {

    assertTrue("Map had inequal elements",CollectionUtils.isEqualCollection(map.get(key),map2.get(key)));

    if (isRemoveSupported()) {

      map2.remove(key);

    }

  }

  if (isRemoveSupported()) {

    assertEquals("Map had extra values",0,map2.size());

  }

}

Location: AbstractMultiValuedMapTest.java

Content: 

public void testKeyContainsValue(){

  final MultiValuedMap<K,V> map=makeFullMap();

  assertTrue(map.containsMapping("one","uno"));

  assertTrue(map.containsMapping("one","un"));

  assertTrue(map.containsMapping("two","dos"));

  assertTrue(map.containsMapping("two","deux"));

  assertTrue(map.containsMapping("three","tres"));

  assertTrue(map.containsMapping("three","trois"));

  assertFalse(map.containsMapping("four","quatro"));

}

Location: AbstractMultiValuedMapTest.java

Content: 

@SuppressWarnings("unchecked") public void testKeysBagContainsAll(){

  final MultiValuedMap<K,V> map=makeFullMap();

  final MultiSet<K> keyMultiSet=map.keys();

  final Collection<K> col=(Collection<K>)Arrays.asList("one","two","three","one","two","three");

  assertTrue(keyMultiSet.containsAll(col));

}

Location: AbstractMultiValuedMapTest.java

Content: 

public void testKeysBagIterator(){

  final MultiValuedMap<K,V> map=makeFullMap();

  final Collection<K> col=new ArrayList<>();

  final Iterator<K> it=map.keys().iterator();

  while (it.hasNext()) {

    col.add(it.next());

  }

  final Bag<K> bag=new HashBag<>(col);

  assertEquals(2,bag.getCount("one"));

  assertEquals(2,bag.getCount("two"));

  assertEquals(2,bag.getCount("three"));

  assertEquals(6,bag.size());

}

Location: AbstractMultiValuedMapTest.java

Content: 

public void testKeySetSize(){

  final MultiValuedMap<K,V> map=makeFullMap();

  assertEquals(3,map.keySet().size());

}

Location: AbstractMultiValuedMapTest.java

Content: 

public void testKeysMultiSet(){

  final MultiValuedMap<K,V> map=makeFullMap();

  final MultiSet<K> keyMultiSet=map.keys();

  assertEquals(2,keyMultiSet.getCount("one"));

  assertEquals(2,keyMultiSet.getCount("two"));

  assertEquals(2,keyMultiSet.getCount("three"));

  assertEquals(0,keyMultiSet.getCount("conut"));

  assertEquals(6,keyMultiSet.size());

}

Location: AbstractMultiValuedMapTest.java

Content: 

@SuppressWarnings("unchecked") public void testMapEquals(){

  if (!isAddSupported()) {

    return;

  }

  final MultiValuedMap<K,V> one=makeObject();

  final Integer value=Integer.valueOf(1);

  one.put((K)"One",(V)value);

  one.removeMapping("One",value);

  final MultiValuedMap<K,V> two=makeObject();

  assertEquals(two,one);

}

Location: AbstractMultiValuedMapTest.java

Content: 

public void testMapIteratorRemove(){

  if (!isRemoveSupported()) {

    return;

  }

  resetFull();

  final MapIterator<K,V> mapIt=getMap().mapIterator();

  while (mapIt.hasNext()) {

    mapIt.next();

    mapIt.remove();

  }

  assertTrue(getMap().isEmpty());

}

Location: AbstractMultiValuedMapTest.java

Content: 

@SuppressWarnings("unchecked") public void testMapIteratorUnsupportedSet(){

  hongshuai();

  this.map=makeFullMap();

  this.confirmed=makeConfirmedMap();

  final K[] k=getSampleKeys();

  final V[] v=getSampleValues();

  for (int i=0; i < k.length; i++) {

    confirmed.put(k[i],v[i]);

  }

  final MapIterator<K,V> mapIt=getMap().mapIterator();

  mapIt.next();

  try {

    mapIt.setValue((V)"some value");

    fail();

  }

 catch (  final UnsupportedOperationException e) {

  }

}

Location: AbstractMultiValuedMapTest.java

Content: 

public void testMultipleValues(){

  final MultiValuedMap<K,V> map=makeFullMap();

  @SuppressWarnings("unchecked") final Collection<V> col=map.get((K)"one");

  assertTrue(col.contains("uno"));

  assertTrue(col.contains("un"));

}

Location: AbstractMultiValuedMapTest.java

Content: 

public void testMultiValuedMapIterator(){

  final MultiValuedMap<K,V> map=makeFullMap();

  final MapIterator<K,V> it=map.mapIterator();

  try {

    it.getKey();

    fail();

  }

 catch (  final IllegalStateException ise) {

  }

  try {

    it.getValue();

    fail();

  }

 catch (  final IllegalStateException ise) {

  }

  if (isAddSupported()) {

    try {

      it.setValue((V)"V");

      fail();

    }

 catch (    final IllegalStateException ise) {

    }

  }

  if (!isHashSetValue() && isAddSupported()) {

    assertTrue(it.hasNext());

    assertEquals("one",it.next());

    assertEquals("one",it.getKey());

    assertEquals("uno",it.getValue());

    assertEquals("one",it.next());

    assertEquals("one",it.getKey());

    assertEquals("un",it.getValue());

    assertEquals("two",it.next());

    assertEquals("two",it.getKey());

    assertEquals("dos",it.getValue());

    assertEquals("two",it.next());

    assertEquals("two",it.getKey());

    assertEquals("deux",it.getValue());

    assertEquals("three",it.next());

    assertEquals("three",it.getKey());

    assertEquals("tres",it.getValue());

    assertEquals("three",it.next());

    assertEquals("three",it.getKey());

    assertEquals("trois",it.getValue());

    try {

      it.setValue((V)"threetrois");

      fail();

    }

 catch (    final UnsupportedOperationException e) {

    }

  }

}

Location: AbstractMultiValuedMapTest.java

Content: 

@SuppressWarnings("unchecked") public void testNoMappingReturnsEmptyCol(){

  final MultiValuedMap<K,V> map=makeFullMap();

  assertTrue(map.get((K)"whatever").isEmpty());

}

Location: AbstractMultiValuedMapTest.java

Content: 

@SuppressWarnings("unchecked") public void testPutAll_KeyIterable(){

  if (!isAddSupported()) {

    return;

  }

  final MultiValuedMap<K,V> map=makeObject();

  Collection<V> coll=(Collection<V>)Arrays.asList("X","Y","Z");

  assertTrue(map.putAll((K)"A",coll));

  assertEquals(3,map.get((K)"A").size());

  assertTrue(map.containsMapping("A","X"));

  assertTrue(map.containsMapping("A","Y"));

  assertTrue(map.containsMapping("A","Z"));

  try {

    map.putAll((K)"A",null);

    fail("expecting NullPointerException");

  }

 catch (  final NullPointerException npe) {

  }

  assertEquals(3,map.get((K)"A").size());

  assertTrue(map.containsMapping("A","X"));

  assertTrue(map.containsMapping("A","Y"));

  assertTrue(map.containsMapping("A","Z"));

  assertFalse(map.putAll((K)"A",new ArrayList<V>()));

  assertEquals(3,map.get((K)"A").size());

  assertTrue(map.containsMapping("A","X"));

  assertTrue(map.containsMapping("A","Y"));

  assertTrue(map.containsMapping("A","Z"));

  coll=(Collection<V>)Arrays.asList("M");

  assertTrue(map.putAll((K)"A",coll));

  assertEquals(4,map.get((K)"A").size());

  assertTrue(map.containsMapping("A","X"));

  assertTrue(map.containsMapping("A","Y"));

  assertTrue(map.containsMapping("A","Z"));

  assertTrue(map.containsMapping("A","M"));

}

Location: AbstractMultiValuedMapTest.java

Content: 

@SuppressWarnings("unchecked") public void testPutAll_Map1(){

  if (!isAddSupported()) {

    return;

  }

  final MultiValuedMap<K,V> original=makeObject();

  original.put((K)"key",(V)"object1");

  original.put((K)"key",(V)"object2");

  final MultiValuedMap<K,V> test=makeObject();

  test.put((K)"keyA",(V)"objectA");

  test.put((K)"key",(V)"object0");

  test.putAll(original);

  try {

    final MultiValuedMap<K,V> originalNull=null;

    test.putAll(originalNull);

    fail("expecting NullPointerException");

  }

 catch (  final NullPointerException npe) {

  }

  assertEquals(2,test.keySet().size());

  assertEquals(4,test.size());

  assertEquals(1,test.get((K)"keyA").size());

  assertEquals(3,test.get((K)"key").size());

  assertTrue(test.containsValue("objectA"));

  assertTrue(test.containsValue("object0"));

  assertTrue(test.containsValue("object1"));

  assertTrue(test.containsValue("object2"));

}

Location: AbstractMultiValuedMapTest.java

Content: 

@SuppressWarnings("unchecked") public void testPutAll_Map2(){

  if (!isAddSupported()) {

    return;

  }

  final Map<K,V> original=new HashMap<>();

  original.put((K)"keyX",(V)"object1");

  original.put((K)"keyY",(V)"object2");

  final MultiValuedMap<K,V> test=makeObject();

  test.put((K)"keyA",(V)"objectA");

  test.put((K)"keyX",(V)"object0");

  test.putAll(original);

  try {

    final Map<K,V> originalNull=null;

    test.putAll(originalNull);

    fail("expecting NullPointerException");

  }

 catch (  final NullPointerException npe) {

  }

  assertEquals(3,test.keySet().size());

  assertEquals(4,test.size());

  assertEquals(1,test.get((K)"keyA").size());

  assertEquals(2,test.get((K)"keyX").size());

  assertEquals(1,test.get((K)"keyY").size());

  assertTrue(test.containsValue("objectA"));

  assertTrue(test.containsValue("object0"));

  assertTrue(test.containsValue("object1"));

  assertTrue(test.containsValue("object2"));

}

Location: AbstractMultiValuedMapTest.java

Content: 

@SuppressWarnings("unchecked") public void testRemoveAllViaEntriesIterator(){

  if (!isRemoveSupported()) {

    return;

  }

  final MultiValuedMap<K,V> map=makeFullMap();

  for (final Iterator<?> i=map.entries().iterator(); i.hasNext(); ) {

    i.next();

    i.remove();

  }

  assertTrue(map.get((K)"one").isEmpty());

  assertEquals(0,map.size());

}

Location: AbstractMultiValuedMapTest.java

Content: 

@SuppressWarnings("unchecked") public void testRemoveAllViaValuesIterator(){

  if (!isRemoveSupported()) {

    return;

  }

  final MultiValuedMap<K,V> map=makeFullMap();

  for (final Iterator<?> i=map.values().iterator(); i.hasNext(); ) {

    i.next();

    i.remove();

  }

  assertTrue(map.get((K)"one").isEmpty());

  assertTrue(map.isEmpty());

}

Location: AbstractMultiValuedMapTest.java

Content: 

public void testRemoveMappingThroughGet(){

  if (!isRemoveSupported()) {

    return;

  }

  resetFull();

  final MultiValuedMap<K,V> map=getMap();

  @SuppressWarnings("unchecked") Collection<V> col=map.get((K)"one");

  assertEquals(2,col.size());

  assertEquals(6,map.size());

  col.remove("uno");

  col.remove("un");

  assertFalse(map.containsKey("one"));

  assertFalse(map.containsMapping("one","uno"));

  assertFalse(map.containsMapping("one","un"));

  assertFalse(map.containsValue("uno"));

  assertFalse(map.containsValue("un"));

  assertEquals(4,map.size());

  col=map.remove("one");

  assertNotNull(col);

  assertEquals(0,col.size());

}

Location: AbstractMultiValuedMapTest.java

Content: 

public void testRemoveMappingThroughGetIterator(){

  if (!isRemoveSupported()) {

    return;

  }

  resetFull();

  final MultiValuedMap<K,V> map=getMap();

  @SuppressWarnings("unchecked") final Iterator<V> it=map.get((K)"one").iterator();

  while (it.hasNext()) {

    it.next();

    it.remove();

  }

  assertFalse(map.containsKey("one"));

  assertFalse(map.containsMapping("one","uno"));

  assertFalse(map.containsMapping("one","un"));

  assertFalse(map.containsValue("uno"));

  assertFalse(map.containsValue("un"));

  assertEquals(4,map.size());

  final Collection<V> coll=map.remove("one");

  assertNotNull(coll);

  assertEquals(0,coll.size());

}

Location: AbstractMultiValuedMapTest.java

Content: 

public void testRemoveViaValuesRemove(){

  if (!isRemoveSupported()) {

    return;

  }

  final MultiValuedMap<K,V> map=makeFullMap();

  final Collection<V> values=map.values();

  values.remove("uno");

  values.remove("un");

  assertFalse(map.containsKey("one"));

  assertEquals(4,map.size());

}

Location: AbstractMultiValuedMapTest.java

Content: 

@SuppressWarnings("unchecked") public void testRemove_KeyItem(){

  if (!isRemoveSupported() || !isAddSupported()) {

    return;

  }

  final MultiValuedMap<K,V> map=makeObject();

  map.put((K)"A",(V)"AA");

  map.put((K)"A",(V)"AB");

  map.put((K)"A",(V)"AC");

  assertFalse(map.removeMapping("C","CA"));

  assertFalse(map.removeMapping("A","AD"));

  assertTrue(map.removeMapping("A","AC"));

  assertTrue(map.removeMapping("A","AB"));

  assertTrue(map.removeMapping("A","AA"));

}

Location: AbstractMultiValuedMapTest.java

Content: 

@SuppressWarnings("unchecked") public void testSizeWithPutRemove(){

  if (!isRemoveSupported() || !isAddSupported()) {

    return;

  }

  final MultiValuedMap<K,V> map=makeObject();

  assertEquals(0,map.size());

  map.put((K)"A",(V)"AA");

  assertEquals(1,map.size());

  map.put((K)"B",(V)"BA");

  assertEquals(2,map.size());

  map.put((K)"B",(V)"BB");

  assertEquals(3,map.size());

  map.put((K)"B",(V)"BC");

  assertEquals(4,map.size());

  map.remove("A");

  assertEquals(3,map.size());

  map.removeMapping("B","BC");

  assertEquals(2,map.size());

}

Location: AbstractMultiValuedMapTest.java

Content: 

@SuppressWarnings("unchecked") public void testSize_Key(){

  final MultiValuedMap<K,V> map=makeFullMap();

  assertEquals(2,map.get((K)"one").size());

  assertEquals(2,map.get((K)"two").size());

  assertEquals(2,map.get((K)"three").size());

  if (!isAddSupported()) {

    return;

  }

  map.put((K)"A",(V)"AA");

  assertEquals(1,map.get((K)"A").size());

  map.put((K)"B",(V)"BA");

  assertEquals(1,map.get((K)"A").size());

  assertEquals(1,map.get((K)"B").size());

  map.put((K)"B",(V)"BB");

  assertEquals(1,map.get((K)"A").size());

  assertEquals(2,map.get((K)"B").size());

  map.put((K)"B",(V)"BC");

  assertEquals(1,map.get((K)"A").size());

  assertEquals(3,map.get((K)"B").size());

  if (!isRemoveSupported()) {

    return;

  }

  map.remove("A");

  assertEquals(3,map.get((K)"B").size());

  map.removeMapping("B","BC");

  assertEquals(2,map.get((K)"B").size());

}

