Location: TransformedSortedBagTest.java

Content: 

@SuppressWarnings("unchecked") public void testTransformedBag(){

  final SortedBag<T> bag=TransformedSortedBag.transformingSortedBag(new TreeBag<T>(),(Transformer<T,T>)TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER);

  assertEquals(0,bag.size());

  final Object[] els=new Object[]{"1","3","5","7","2","4","6"};

  for (int i=0; i < els.length; i++) {

    bag.add((T)els[i]);

    assertEquals(i + 1,bag.size());

    assertTrue(bag.contains(Integer.valueOf((String)els[i])));

  }

  assertTrue(bag.remove(Integer.valueOf((String)els[0])));

}

Location: TransformedSortedBagTest.java

Content: 

public void testTransformedBag_decorateTransform(){

  final TreeBag<T> originalBag=new TreeBag<>();

  final Object[] els=new Object[]{"1","3","5","7","2","4","6"};

  for (  final Object el : els) {

    originalBag.add((T)el);

  }

  final SortedBag<T> bag=TransformedSortedBag.transformedSortedBag(originalBag,(Transformer<T,T>)TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER);

  assertEquals(els.length,bag.size());

  for (  final Object el : els) {

    assertTrue(bag.contains(Integer.valueOf((String)el)));

  }

  assertTrue(bag.remove(Integer.valueOf((String)els[0])));

}

Location: TransformedSortedBagTest.java

Content: 

public TransformedSortedBagTest(final String testName){

  super(testName);

}

Location: TransformedSortedBagTest.java

Content: 

@SuppressWarnings("unchecked") public void testTransformedBag(){

  final SortedBag<T> bag=TransformedSortedBag.transformingSortedBag(new TreeBag<T>(),(Transformer<T,T>)TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER);

  assertEquals(0,bag.size());

  final Object[] els=new Object[]{"1","3","5","7","2","4","6"};

  for (int i=0; i < els.length; i++) {

    bag.add((T)els[i]);

    assertEquals(i + 1,bag.size());

    assertTrue(bag.contains(Integer.valueOf((String)els[i])));

  }

  assertTrue(bag.remove(Integer.valueOf((String)els[0])));

}

Location: TransformedSortedBagTest.java

Content: 

public void testTransformedBag_decorateTransform(){

  final TreeBag<T> originalBag=new TreeBag<>();

  final Object[] els=new Object[]{"1","3","5","7","2","4","6"};

  for (  final Object el : els) {

    originalBag.add((T)el);

  }

  final SortedBag<T> bag=TransformedSortedBag.transformedSortedBag(originalBag,(Transformer<T,T>)TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER);

  assertEquals(els.length,bag.size());

  for (  final Object el : els) {

    assertTrue(bag.contains(Integer.valueOf((String)el)));

  }

  assertTrue(bag.remove(Integer.valueOf((String)els[0])));

}

Location: TransformedSortedBagTest.java

Content: 

public TransformedSortedBagTest(final String testName){

  super(testName);

}

