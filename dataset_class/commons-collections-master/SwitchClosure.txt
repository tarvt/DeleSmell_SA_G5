Location: SwitchClosure.java

Content: 

/** 

 * Gets the closures.

 * @return a copy of the closures

 * @since 3.1

 */

public Closure<? super E>[] getClosures(){

  return FunctorUtils.<E>copy(iClosures);

}

Location: SwitchClosure.java

Content: 

/** 

 * Gets the default closure.

 * @return the default closure

 * @since 3.1

 */

public Closure<? super E> getDefaultClosure(){

  return iDefault;

}

Location: SwitchClosure.java

Content: 

/** 

 * Hidden constructor for the use by the static factory methods.

 * @param clone  if {@code true} the input arguments will be cloned

 * @param predicates  array of predicates, no nulls

 * @param closures  matching array of closures, no nulls

 * @param defaultClosure  the closure to use if no match, null means nop

 */

@SuppressWarnings("unchecked") private SwitchClosure(final boolean clone,final Predicate<? super E>[] predicates,final Closure<? super E>[] closures,final Closure<? super E> defaultClosure){

  iPredicates=clone ? FunctorUtils.copy(predicates) : predicates;

  iClosures=clone ? FunctorUtils.copy(closures) : closures;

  iDefault=defaultClosure == null ? NOPClosure.<E>nopClosure() : defaultClosure;

}

Location: SwitchClosure.java

Content: 

/** 

 * Create a new Closure that calls one of the closures depending on the predicates. <p> The Map consists of Predicate keys and Closure values. A closure is called if its matching predicate returns true. Each predicate is evaluated until one returns true. If no predicates evaluate to true, the default closure is called. The default closure is set in the map with a null key. The ordering is that of the iterator() method on the entryset collection of the map.

 * @param < E > the type that the closure acts on

 * @param predicatesAndClosures  a map of predicates to closures

 * @return the {@code switch} closure

 * @throws NullPointerException if the map is null

 * @throws NullPointerException if any closure in the map is null

 * @throws ClassCastException  if the map elements are of the wrong type

 */

@SuppressWarnings("unchecked") public static <E>Closure<E> switchClosure(final Map<Predicate<E>,Closure<E>> predicatesAndClosures){

  Objects.requireNonNull(predicatesAndClosures,"predicatesAndClosures");

  final Closure<? super E> defaultClosure=predicatesAndClosures.remove(null);

  final int size=predicatesAndClosures.size();

  if (size == 0) {

    return (Closure<E>)(defaultClosure == null ? NOPClosure.<E>nopClosure() : defaultClosure);

  }

  final Closure<E>[] closures=new Closure[size];

  final Predicate<E>[] preds=new Predicate[size];

  int i=0;

  for (  final Map.Entry<Predicate<E>,Closure<E>> entry : predicatesAndClosures.entrySet()) {

    preds[i]=entry.getKey();

    closures[i]=entry.getValue();

    i++;

  }

  return new SwitchClosure<>(false,preds,closures,defaultClosure);

}

Location: SwitchClosure.java

Content: 

/** 

 * Constructor that performs no validation. Use  {@code switchClosure} if you want that.

 * @param predicates  array of predicates, cloned, no nulls

 * @param closures  matching array of closures, cloned, no nulls

 * @param defaultClosure  the closure to use if no match, null means nop

 */

public SwitchClosure(final Predicate<? super E>[] predicates,final Closure<? super E>[] closures,final Closure<? super E> defaultClosure){

  this(true,predicates,closures,defaultClosure);

}

Location: SwitchClosure.java

Content: 

/** 

 * Gets the closures.

 * @return a copy of the closures

 * @since 3.1

 */

public Closure<? super E>[] getClosures(){

  return FunctorUtils.<E>copy(iClosures);

}

Location: SwitchClosure.java

Content: 

/** 

 * Gets the default closure.

 * @return the default closure

 * @since 3.1

 */

public Closure<? super E> getDefaultClosure(){

  return iDefault;

}

Location: SwitchClosure.java

Content: 

/** 

 * Hidden constructor for the use by the static factory methods.

 * @param clone  if {@code true} the input arguments will be cloned

 * @param predicates  array of predicates, no nulls

 * @param closures  matching array of closures, no nulls

 * @param defaultClosure  the closure to use if no match, null means nop

 */

@SuppressWarnings("unchecked") private SwitchClosure(final boolean clone,final Predicate<? super E>[] predicates,final Closure<? super E>[] closures,final Closure<? super E> defaultClosure){

  iPredicates=clone ? FunctorUtils.copy(predicates) : predicates;

  iClosures=clone ? FunctorUtils.copy(closures) : closures;

  iDefault=defaultClosure == null ? NOPClosure.<E>nopClosure() : defaultClosure;

}

Location: SwitchClosure.java

Content: 

/** 

 * Create a new Closure that calls one of the closures depending on the predicates. <p> The Map consists of Predicate keys and Closure values. A closure is called if its matching predicate returns true. Each predicate is evaluated until one returns true. If no predicates evaluate to true, the default closure is called. The default closure is set in the map with a null key. The ordering is that of the iterator() method on the entryset collection of the map.

 * @param < E > the type that the closure acts on

 * @param predicatesAndClosures  a map of predicates to closures

 * @return the {@code switch} closure

 * @throws NullPointerException if the map is null

 * @throws NullPointerException if any closure in the map is null

 * @throws ClassCastException  if the map elements are of the wrong type

 */

@SuppressWarnings("unchecked") public static <E>Closure<E> switchClosure(final Map<Predicate<E>,Closure<E>> predicatesAndClosures){

  Objects.requireNonNull(predicatesAndClosures,"predicatesAndClosures");

  final Closure<? super E> defaultClosure=predicatesAndClosures.remove(null);

  final int size=predicatesAndClosures.size();

  if (size == 0) {

    return (Closure<E>)(defaultClosure == null ? NOPClosure.<E>nopClosure() : defaultClosure);

  }

  final Closure<E>[] closures=new Closure[size];

  final Predicate<E>[] preds=new Predicate[size];

  int i=0;

  for (  final Map.Entry<Predicate<E>,Closure<E>> entry : predicatesAndClosures.entrySet()) {

    preds[i]=entry.getKey();

    closures[i]=entry.getValue();

    i++;

  }

  return new SwitchClosure<>(false,preds,closures,defaultClosure);

}

Location: SwitchClosure.java

Content: 

/** 

 * Constructor that performs no validation. Use  {@code switchClosure} if you want that.

 * @param predicates  array of predicates, cloned, no nulls

 * @param closures  matching array of closures, cloned, no nulls

 * @param defaultClosure  the closure to use if no match, null means nop

 */

public SwitchClosure(final Predicate<? super E>[] predicates,final Closure<? super E>[] closures,final Closure<? super E> defaultClosure){

  this(true,predicates,closures,defaultClosure);

}

