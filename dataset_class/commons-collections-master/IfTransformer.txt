Location: IfTransformer.java

Content: 

/** 

 * Gets the transformer used when false.

 * @return the transformer

 */

public Transformer<? super I,? extends O> getFalseTransformer(){

  return iFalseTransformer;

}

Location: IfTransformer.java

Content: 

/** 

 * Gets the transformer used when true.

 * @return the transformer

 */

public Transformer<? super I,? extends O> getTrueTransformer(){

  return iTrueTransformer;

}

Location: IfTransformer.java

Content: 

/** 

 * Factory method that performs validation. <p> This factory creates a transformer that just returns the input object when the predicate is false.

 * @param < T >  input and output type for the transformer

 * @param predicate  predicate to switch on

 * @param trueTransformer  transformer used if true

 * @return the {@code if} transformer

 * @throws NullPointerException if either argument is null

 */

public static <T>Transformer<T,T> ifTransformer(final Predicate<? super T> predicate,final Transformer<? super T,? extends T> trueTransformer){

  return new IfTransformer<>(Objects.requireNonNull(predicate,"predicate"),Objects.requireNonNull(trueTransformer,"trueTransformer"),NOPTransformer.<T>nopTransformer());

}

Location: IfTransformer.java

Content: 

/** 

 * Constructor that performs no validation. Use the static factory method  {@code ifTransformer} if you want that.

 * @param predicate  predicate to switch on, not null

 * @param trueTransformer  transformer used if true, not null

 * @param falseTransformer  transformer used if false, not null

 */

public IfTransformer(final Predicate<? super I> predicate,final Transformer<? super I,? extends O> trueTransformer,final Transformer<? super I,? extends O> falseTransformer){

  iPredicate=predicate;

  iTrueTransformer=trueTransformer;

  iFalseTransformer=falseTransformer;

}

Location: IfTransformer.java

Content: 

/** 

 * Gets the transformer used when false.

 * @return the transformer

 */

public Transformer<? super I,? extends O> getFalseTransformer(){

  return iFalseTransformer;

}

Location: IfTransformer.java

Content: 

/** 

 * Gets the transformer used when true.

 * @return the transformer

 */

public Transformer<? super I,? extends O> getTrueTransformer(){

  return iTrueTransformer;

}

Location: IfTransformer.java

Content: 

/** 

 * Factory method that performs validation. <p> This factory creates a transformer that just returns the input object when the predicate is false.

 * @param < T >  input and output type for the transformer

 * @param predicate  predicate to switch on

 * @param trueTransformer  transformer used if true

 * @return the {@code if} transformer

 * @throws NullPointerException if either argument is null

 */

public static <T>Transformer<T,T> ifTransformer(final Predicate<? super T> predicate,final Transformer<? super T,? extends T> trueTransformer){

  return new IfTransformer<>(Objects.requireNonNull(predicate,"predicate"),Objects.requireNonNull(trueTransformer,"trueTransformer"),NOPTransformer.<T>nopTransformer());

}

Location: IfTransformer.java

Content: 

/** 

 * Constructor that performs no validation. Use the static factory method  {@code ifTransformer} if you want that.

 * @param predicate  predicate to switch on, not null

 * @param trueTransformer  transformer used if true, not null

 * @param falseTransformer  transformer used if false, not null

 */

public IfTransformer(final Predicate<? super I> predicate,final Transformer<? super I,? extends O> trueTransformer,final Transformer<? super I,? extends O> falseTransformer){

  iPredicate=predicate;

  iTrueTransformer=trueTransformer;

  iFalseTransformer=falseTransformer;

}

