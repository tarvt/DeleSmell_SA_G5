Location: TreeListTest.java

Content: 

public static void benchmark(final List<? super Integer> l){

  long startMillis=System.currentTimeMillis();

  for (int i=0; i < 100000; i++) {

    l.add(Integer.valueOf(i));

  }

  System.out.print(System.currentTimeMillis() - startMillis + ";");

  startMillis=System.currentTimeMillis();

  for (int i=0; i < 200; i++) {

    l.toArray();

  }

  System.out.print(System.currentTimeMillis() - startMillis + ";");

  startMillis=System.currentTimeMillis();

  for (int i=0; i < 100; i++) {

    final java.util.Iterator<? super Integer> it=l.iterator();

    while (it.hasNext()) {

      it.next();

    }

  }

  System.out.print(System.currentTimeMillis() - startMillis + ";");

  startMillis=System.currentTimeMillis();

  for (int i=0; i < 10000; i++) {

    final int j=(int)(Math.random() * 100000);

    l.add(j,Integer.valueOf(-j));

  }

  System.out.print(System.currentTimeMillis() - startMillis + ";");

  startMillis=System.currentTimeMillis();

  for (int i=0; i < 50000; i++) {

    final int j=(int)(Math.random() * 110000);

    l.get(j);

  }

  System.out.print(System.currentTimeMillis() - startMillis + ";");

  startMillis=System.currentTimeMillis();

  for (int i=0; i < 200; i++) {

    final int j=(int)(Math.random() * 100000);

    l.indexOf(Integer.valueOf(j));

  }

  System.out.print(System.currentTimeMillis() - startMillis + ";");

  startMillis=System.currentTimeMillis();

  for (int i=0; i < 10000; i++) {

    final int j=(int)(Math.random() * 100000);

    l.remove(j);

  }

  System.out.print(System.currentTimeMillis() - startMillis + ";");

}

Location: TreeListTest.java

Content: 

@SuppressWarnings("unchecked") public void testAddMultiple(){

  final List<E> l=makeObject();

  l.add((E)"hugo");

  l.add((E)"erna");

  l.add((E)"daniel");

  l.add((E)"andres");

  l.add((E)"harald");

  l.add(0,null);

  assertNull(l.get(0));

  assertEquals("hugo",l.get(1));

  assertEquals("erna",l.get(2));

  assertEquals("daniel",l.get(3));

  assertEquals("andres",l.get(4));

  assertEquals("harald",l.get(5));

}

Location: TreeListTest.java

Content: 

public void testBug35258(){

  final Object objectToRemove=Integer.valueOf(3);

  final List<Integer> treelist=new TreeList<>();

  treelist.add(Integer.valueOf(0));

  treelist.add(Integer.valueOf(1));

  treelist.add(Integer.valueOf(2));

  treelist.add(Integer.valueOf(3));

  treelist.add(Integer.valueOf(4));

  treelist.remove(objectToRemove);

  final ListIterator<Integer> li=treelist.listIterator();

  assertEquals(Integer.valueOf(0),li.next());

  assertEquals(Integer.valueOf(0),li.previous());

  assertEquals(Integer.valueOf(0),li.next());

  assertEquals(Integer.valueOf(1),li.next());

  assertEquals(Integer.valueOf(1),li.previous());

  assertEquals(Integer.valueOf(1),li.next());

  assertEquals(Integer.valueOf(2),li.next());

  assertEquals(Integer.valueOf(2),li.previous());

  assertEquals(Integer.valueOf(2),li.next());

  assertEquals(Integer.valueOf(4),li.next());

  assertEquals(Integer.valueOf(4),li.previous());

  assertEquals(Integer.valueOf(4),li.next());

  assertFalse(li.hasNext());

}

Location: TreeListTest.java

Content: 

public void testBugCollections447(){

  final List<String> treeList=new TreeList<>();

  treeList.add("A");

  treeList.add("B");

  treeList.add("C");

  treeList.add("D");

  final ListIterator<String> li=treeList.listIterator();

  assertEquals("A",li.next());

  assertEquals("B",li.next());

  assertEquals("B",li.previous());

  li.remove();

  assertEquals("A",li.previous());

}

Location: TreeListTest.java

Content: 

@SuppressWarnings("unchecked") public void testInsertBefore(){

  final List<E> l=makeObject();

  l.add((E)"erna");

  l.add(0,(E)"hugo");

  assertEquals("hugo",l.get(0));

  assertEquals("erna",l.get(1));

}

Location: TreeListTest.java

Content: 

@SuppressWarnings("boxing") public void testIterationOrder(){

  for (int size=1; size < 1000; size++) {

    final List<Integer> other=new ArrayList<>(size);

    for (int i=0; i < size; i++) {

      other.add(i);

    }

    final TreeList<Integer> l=new TreeList<>(other);

    final ListIterator<Integer> it=l.listIterator();

    int i=0;

    while (it.hasNext()) {

      final Integer val=it.next();

      assertEquals(i++,val.intValue());

    }

    while (it.hasPrevious()) {

      final Integer val=it.previous();

      assertEquals(--i,val.intValue());

    }

  }

}

Location: TreeListTest.java

Content: 

@SuppressWarnings("boxing") public void testIterationOrderAfterAddAll(){

  final int size=1000;

  for (int i=0; i < 100; i++) {

    final List<Integer> other=new ArrayList<>(size);

    for (int j=i; j < size; j++) {

      other.add(j);

    }

    final TreeList<Integer> l=new TreeList<>();

    for (int j=0; j < i; j++) {

      l.add(j);

    }

    l.addAll(other);

    final ListIterator<Integer> it=l.listIterator();

    int cnt=0;

    while (it.hasNext()) {

      final Integer val=it.next();

      assertEquals(cnt++,val.intValue());

    }

    while (it.hasPrevious()) {

      final Integer val=it.previous();

      assertEquals(--cnt,val.intValue());

    }

  }

}

Location: TreeListTest.java

Content: 

public TreeListTest(final String name){

  super(name);

}

Location: TreeListTest.java

Content: 

public static void benchmark(final List<? super Integer> l){

  long startMillis=System.currentTimeMillis();

  for (int i=0; i < 100000; i++) {

    l.add(Integer.valueOf(i));

  }

  System.out.print(System.currentTimeMillis() - startMillis + ";");

  startMillis=System.currentTimeMillis();

  for (int i=0; i < 200; i++) {

    l.toArray();

  }

  System.out.print(System.currentTimeMillis() - startMillis + ";");

  startMillis=System.currentTimeMillis();

  for (int i=0; i < 100; i++) {

    final java.util.Iterator<? super Integer> it=l.iterator();

    while (it.hasNext()) {

      it.next();

    }

  }

  System.out.print(System.currentTimeMillis() - startMillis + ";");

  startMillis=System.currentTimeMillis();

  for (int i=0; i < 10000; i++) {

    final int j=(int)(Math.random() * 100000);

    l.add(j,Integer.valueOf(-j));

  }

  System.out.print(System.currentTimeMillis() - startMillis + ";");

  startMillis=System.currentTimeMillis();

  for (int i=0; i < 50000; i++) {

    final int j=(int)(Math.random() * 110000);

    l.get(j);

  }

  System.out.print(System.currentTimeMillis() - startMillis + ";");

  startMillis=System.currentTimeMillis();

  for (int i=0; i < 200; i++) {

    final int j=(int)(Math.random() * 100000);

    l.indexOf(Integer.valueOf(j));

  }

  System.out.print(System.currentTimeMillis() - startMillis + ";");

  startMillis=System.currentTimeMillis();

  for (int i=0; i < 10000; i++) {

    final int j=(int)(Math.random() * 100000);

    l.remove(j);

  }

  System.out.print(System.currentTimeMillis() - startMillis + ";");

}

Location: TreeListTest.java

Content: 

@SuppressWarnings("unchecked") public void testAddMultiple(){

  final List<E> l=makeObject();

  l.add((E)"hugo");

  l.add((E)"erna");

  l.add((E)"daniel");

  l.add((E)"andres");

  l.add((E)"harald");

  l.add(0,null);

  assertNull(l.get(0));

  assertEquals("hugo",l.get(1));

  assertEquals("erna",l.get(2));

  assertEquals("daniel",l.get(3));

  assertEquals("andres",l.get(4));

  assertEquals("harald",l.get(5));

}

Location: TreeListTest.java

Content: 

public void testBug35258(){

  final Object objectToRemove=Integer.valueOf(3);

  final List<Integer> treelist=new TreeList<>();

  treelist.add(Integer.valueOf(0));

  treelist.add(Integer.valueOf(1));

  treelist.add(Integer.valueOf(2));

  treelist.add(Integer.valueOf(3));

  treelist.add(Integer.valueOf(4));

  treelist.remove(objectToRemove);

  final ListIterator<Integer> li=treelist.listIterator();

  assertEquals(Integer.valueOf(0),li.next());

  assertEquals(Integer.valueOf(0),li.previous());

  assertEquals(Integer.valueOf(0),li.next());

  assertEquals(Integer.valueOf(1),li.next());

  assertEquals(Integer.valueOf(1),li.previous());

  assertEquals(Integer.valueOf(1),li.next());

  assertEquals(Integer.valueOf(2),li.next());

  assertEquals(Integer.valueOf(2),li.previous());

  assertEquals(Integer.valueOf(2),li.next());

  assertEquals(Integer.valueOf(4),li.next());

  assertEquals(Integer.valueOf(4),li.previous());

  assertEquals(Integer.valueOf(4),li.next());

  assertFalse(li.hasNext());

}

Location: TreeListTest.java

Content: 

public void testBugCollections447(){

  final List<String> treeList=new TreeList<>();

  treeList.add("A");

  treeList.add("B");

  treeList.add("C");

  treeList.add("D");

  final ListIterator<String> li=treeList.listIterator();

  assertEquals("A",li.next());

  assertEquals("B",li.next());

  assertEquals("B",li.previous());

  li.remove();

  assertEquals("A",li.previous());

}

Location: TreeListTest.java

Content: 

@SuppressWarnings("unchecked") public void testInsertBefore(){

  final List<E> l=makeObject();

  l.add((E)"erna");

  l.add(0,(E)"hugo");

  assertEquals("hugo",l.get(0));

  assertEquals("erna",l.get(1));

}

Location: TreeListTest.java

Content: 

@SuppressWarnings("boxing") public void testIterationOrder(){

  for (int size=1; size < 1000; size++) {

    final List<Integer> other=new ArrayList<>(size);

    for (int i=0; i < size; i++) {

      other.add(i);

    }

    final TreeList<Integer> l=new TreeList<>(other);

    final ListIterator<Integer> it=l.listIterator();

    int i=0;

    while (it.hasNext()) {

      final Integer val=it.next();

      assertEquals(i++,val.intValue());

    }

    while (it.hasPrevious()) {

      final Integer val=it.previous();

      assertEquals(--i,val.intValue());

    }

  }

}

Location: TreeListTest.java

Content: 

@SuppressWarnings("boxing") public void testIterationOrderAfterAddAll(){

  final int size=1000;

  for (int i=0; i < 100; i++) {

    final List<Integer> other=new ArrayList<>(size);

    for (int j=i; j < size; j++) {

      other.add(j);

    }

    final TreeList<Integer> l=new TreeList<>();

    for (int j=0; j < i; j++) {

      l.add(j);

    }

    l.addAll(other);

    final ListIterator<Integer> it=l.listIterator();

    int cnt=0;

    while (it.hasNext()) {

      final Integer val=it.next();

      assertEquals(cnt++,val.intValue());

    }

    while (it.hasPrevious()) {

      final Integer val=it.previous();

      assertEquals(--cnt,val.intValue());

    }

  }

}

Location: TreeListTest.java

Content: 

public TreeListTest(final String name){

  super(name);

}

