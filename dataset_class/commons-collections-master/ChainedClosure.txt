Location: ChainedClosure.java

Content: 

/** 

 * Hidden constructor for the use by the static factory methods.

 * @param clone  if {@code true} the input argument will be cloned

 * @param closures  the closures to chain, no nulls

 */

private ChainedClosure(final boolean clone,final Closure<? super E>... closures){

  iClosures=clone ? FunctorUtils.copy(closures) : closures;

}

Location: ChainedClosure.java

Content: 

/** 

 * Constructor that performs no validation. Use  {@code chainedClosure} if you want that.

 * @param closures  the closures to chain, copied, no nulls

 */

public ChainedClosure(final Closure<? super E>... closures){

  this(true,closures);

}

Location: ChainedClosure.java

Content: 

/** 

 * Create a new Closure that calls each closure in turn, passing the result into the next closure. The ordering is that of the iterator() method on the collection.

 * @param < E > the type that the closure acts on

 * @param closures  a collection of closures to chain

 * @return the {@code chained} closure

 * @throws NullPointerException if the closures collection is null

 * @throws NullPointerException if any closure in the collection is null

 */

@SuppressWarnings("unchecked") public static <E>Closure<E> chainedClosure(final Collection<? extends Closure<? super E>> closures){

  Objects.requireNonNull(closures,"closures");

  if (closures.isEmpty()) {

    return NOPClosure.<E>nopClosure();

  }

  final Closure<? super E>[] cmds=new Closure[closures.size()];

  int i=0;

  for (  final Closure<? super E> closure : closures) {

    cmds[i++]=closure;

  }

  FunctorUtils.validate(cmds);

  return new ChainedClosure<>(false,cmds);

}

Location: ChainedClosure.java

Content: 

/** 

 * Hidden constructor for the use by the static factory methods.

 * @param clone  if {@code true} the input argument will be cloned

 * @param closures  the closures to chain, no nulls

 */

private ChainedClosure(final boolean clone,final Closure<? super E>... closures){

  iClosures=clone ? FunctorUtils.copy(closures) : closures;

}

Location: ChainedClosure.java

Content: 

/** 

 * Constructor that performs no validation. Use  {@code chainedClosure} if you want that.

 * @param closures  the closures to chain, copied, no nulls

 */

public ChainedClosure(final Closure<? super E>... closures){

  this(true,closures);

}

Location: ChainedClosure.java

Content: 

/** 

 * Create a new Closure that calls each closure in turn, passing the result into the next closure. The ordering is that of the iterator() method on the collection.

 * @param < E > the type that the closure acts on

 * @param closures  a collection of closures to chain

 * @return the {@code chained} closure

 * @throws NullPointerException if the closures collection is null

 * @throws NullPointerException if any closure in the collection is null

 */

@SuppressWarnings("unchecked") public static <E>Closure<E> chainedClosure(final Collection<? extends Closure<? super E>> closures){

  Objects.requireNonNull(closures,"closures");

  if (closures.isEmpty()) {

    return NOPClosure.<E>nopClosure();

  }

  final Closure<? super E>[] cmds=new Closure[closures.size()];

  int i=0;

  for (  final Closure<? super E> closure : closures) {

    cmds[i++]=closure;

  }

  FunctorUtils.validate(cmds);

  return new ChainedClosure<>(false,cmds);

}

