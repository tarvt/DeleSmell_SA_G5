Location: SplitMapUtilsTest.java

Content: 

private void attemptGetOperation(final Runnable r){

  attemptMapOperation("Put exposed as writable Map must not allow Get operations",r);

}

Location: SplitMapUtilsTest.java

Content: 

private void attemptMapOperation(final String s,final Runnable r){

  try {

    r.run();

    fail(s);

  }

 catch (  final UnsupportedOperationException e) {

  }

}

Location: SplitMapUtilsTest.java

Content: 

private void attemptPutOperation(final Runnable r){

  attemptMapOperation("Get exposed as writable Map must not allow Put operations",r);

}

Location: SplitMapUtilsTest.java

Content: 

@Test public void testAlreadyReadableMap(){

  final HashedMap<String,Integer> hashedMap=new HashedMap<>();

  assertSame(hashedMap,SplitMapUtils.readableMap(hashedMap));

}

Location: SplitMapUtilsTest.java

Content: 

@Test public void testAlreadyWritableMap(){

  final HashedMap<String,String> hashedMap=new HashedMap<>();

  assertSame(hashedMap,SplitMapUtils.writableMap(hashedMap));

}

Location: SplitMapUtilsTest.java

Content: 

@Test public void testReadableMap(){

  final IterableMap<String,Integer> map=SplitMapUtils.readableMap(transformedMap);

  for (int i=0; i < 10; i++) {

    assertFalse(map.containsValue(String.valueOf(i)));

    assertEquals(i,map.get(String.valueOf(i)).intValue());

  }

  final MapIterator<String,Integer> it=map.mapIterator();

  while (it.hasNext()) {

    final String k=it.next();

    assertEquals(k,it.getKey());

    assertEquals(Integer.valueOf(k),it.getValue());

  }

  assertTrue(map instanceof Unmodifiable);

  int sz=map.size();

  attemptPutOperation(() -> map.clear());

  assertEquals(sz,map.size());

  attemptPutOperation(() -> map.put("foo",100));

  final HashMap<String,Integer> m=new HashMap<>();

  m.put("foo",100);

  m.put("bar",200);

  m.put("baz",300);

  attemptPutOperation(() -> map.putAll(m));

  final IterableMap<String,Integer> other=SplitMapUtils.readableMap(transformedMap);

  assertEquals(other,map);

  assertEquals(other.hashCode(),map.hashCode());

  for (int i=0; i < 10; i++) {

    assertEquals(i,map.remove(String.valueOf(i)).intValue());

    assertEquals(--sz,map.size());

  }

  assertTrue(map.isEmpty());

  assertSame(map,SplitMapUtils.readableMap(map));

}

Location: SplitMapUtilsTest.java

Content: 

@Test @SuppressWarnings("unchecked") public void testWritableMap(){

  final Map<String,String> map=SplitMapUtils.writableMap(transformedMap);

  attemptGetOperation(() -> map.get(null));

  attemptGetOperation(() -> map.entrySet());

  attemptGetOperation(() -> map.keySet());

  attemptGetOperation(() -> map.values());

  attemptGetOperation(() -> map.size());

  attemptGetOperation(() -> map.isEmpty());

  attemptGetOperation(() -> map.containsKey(null));

  attemptGetOperation(() -> map.containsValue(null));

  attemptGetOperation(() -> map.remove(null));

  final Map<String,String> other=SplitMapUtils.writableMap(transformedMap);

  assertEquals(other,map);

  assertEquals(other.hashCode(),map.hashCode());

  int sz=backingMap.size();

  assertFalse(backingMap.containsKey("foo"));

  map.put("new","66");

  assertEquals(++sz,backingMap.size());

  final Map<String,String> more=new HashMap<>();

  more.put("foo","77");

  more.put("bar","88");

  more.put("baz","99");

  map.putAll(more);

  assertEquals(sz + more.size(),backingMap.size());

  map.clear();

  assertTrue(backingMap.isEmpty());

  assertSame(map,SplitMapUtils.writableMap((Put<String,String>)map));

}

Location: SplitMapUtilsTest.java

Content: 

private void attemptGetOperation(final Runnable r){

  attemptMapOperation("Put exposed as writable Map must not allow Get operations",r);

}

Location: SplitMapUtilsTest.java

Content: 

private void attemptMapOperation(final String s,final Runnable r){

  try {

    r.run();

    fail(s);

  }

 catch (  final UnsupportedOperationException e) {

  }

}

Location: SplitMapUtilsTest.java

Content: 

private void attemptPutOperation(final Runnable r){

  attemptMapOperation("Get exposed as writable Map must not allow Put operations",r);

}

Location: SplitMapUtilsTest.java

Content: 

@Test public void testAlreadyReadableMap(){

  final HashedMap<String,Integer> hashedMap=new HashedMap<>();

  assertSame(hashedMap,SplitMapUtils.readableMap(hashedMap));

}

Location: SplitMapUtilsTest.java

Content: 

@Test public void testAlreadyWritableMap(){

  final HashedMap<String,String> hashedMap=new HashedMap<>();

  assertSame(hashedMap,SplitMapUtils.writableMap(hashedMap));

}

Location: SplitMapUtilsTest.java

Content: 

@Test public void testReadableMap(){

  final IterableMap<String,Integer> map=SplitMapUtils.readableMap(transformedMap);

  for (int i=0; i < 10; i++) {

    assertFalse(map.containsValue(String.valueOf(i)));

    assertEquals(i,map.get(String.valueOf(i)).intValue());

  }

  final MapIterator<String,Integer> it=map.mapIterator();

  while (it.hasNext()) {

    final String k=it.next();

    assertEquals(k,it.getKey());

    assertEquals(Integer.valueOf(k),it.getValue());

  }

  assertTrue(map instanceof Unmodifiable);

  int sz=map.size();

  attemptPutOperation(() -> map.clear());

  assertEquals(sz,map.size());

  attemptPutOperation(() -> map.put("foo",100));

  final HashMap<String,Integer> m=new HashMap<>();

  m.put("foo",100);

  m.put("bar",200);

  m.put("baz",300);

  attemptPutOperation(() -> map.putAll(m));

  final IterableMap<String,Integer> other=SplitMapUtils.readableMap(transformedMap);

  assertEquals(other,map);

  assertEquals(other.hashCode(),map.hashCode());

  for (int i=0; i < 10; i++) {

    assertEquals(i,map.remove(String.valueOf(i)).intValue());

    assertEquals(--sz,map.size());

  }

  assertTrue(map.isEmpty());

  assertSame(map,SplitMapUtils.readableMap(map));

}

Location: SplitMapUtilsTest.java

Content: 

@Test @SuppressWarnings("unchecked") public void testWritableMap(){

  final Map<String,String> map=SplitMapUtils.writableMap(transformedMap);

  attemptGetOperation(() -> map.get(null));

  attemptGetOperation(() -> map.entrySet());

  attemptGetOperation(() -> map.keySet());

  attemptGetOperation(() -> map.values());

  attemptGetOperation(() -> map.size());

  attemptGetOperation(() -> map.isEmpty());

  attemptGetOperation(() -> map.containsKey(null));

  attemptGetOperation(() -> map.containsValue(null));

  attemptGetOperation(() -> map.remove(null));

  final Map<String,String> other=SplitMapUtils.writableMap(transformedMap);

  assertEquals(other,map);

  assertEquals(other.hashCode(),map.hashCode());

  int sz=backingMap.size();

  assertFalse(backingMap.containsKey("foo"));

  map.put("new","66");

  assertEquals(++sz,backingMap.size());

  final Map<String,String> more=new HashMap<>();

  more.put("foo","77");

  more.put("bar","88");

  more.put("baz","99");

  map.putAll(more);

  assertEquals(sz + more.size(),backingMap.size());

  map.clear();

  assertTrue(backingMap.isEmpty());

  assertSame(map,SplitMapUtils.writableMap((Put<String,String>)map));

}

