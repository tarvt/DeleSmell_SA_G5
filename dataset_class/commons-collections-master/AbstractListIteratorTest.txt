Location: AbstractListIteratorTest.java

Content: 

/** 

 * JUnit constructor.

 * @param testName  the test class name

 */

public AbstractListIteratorTest(final String testName){

  super(testName);

}

Location: AbstractListIteratorTest.java

Content: 

/** 

 * The value to be used in the add and set tests. Default is null.

 */

public E addSetValue(){

  return null;

}

Location: AbstractListIteratorTest.java

Content: 

/** 

 * Whether or not we are testing an iterator that supports set(). Default is true.

 * @return true if Iterator supports set

 */

public boolean supportsSet(){

  return true;

}

Location: AbstractListIteratorTest.java

Content: 

/** 

 * Test remove after add behavior.

 */

public void testAddThenRemove(){

  final ListIterator<E> it=makeObject();

  if (supportsAdd() && supportsRemove()) {

    it.next();

    it.add(addSetValue());

    try {

      it.remove();

      fail("IllegalStateException must be thrown from remove after add");

    }

 catch (    final IllegalStateException e) {

    }

  }

}

Location: AbstractListIteratorTest.java

Content: 

public void testAddThenSet(){

  final ListIterator<E> it=makeObject();

  if (supportsAdd() && supportsSet()) {

    it.next();

    it.add(addSetValue());

    try {

      it.set(addSetValue());

      fail("IllegalStateException must be thrown from set after add");

    }

 catch (    final IllegalStateException e) {

    }

  }

}

Location: AbstractListIteratorTest.java

Content: 

public void testRemoveThenSet(){

  final ListIterator<E> it=makeObject();

  if (supportsRemove() && supportsSet()) {

    it.next();

    it.remove();

    try {

      it.set(addSetValue());

      fail("IllegalStateException must be thrown from set after remove");

    }

 catch (    final IllegalStateException e) {

    }

  }

}

Location: AbstractListIteratorTest.java

Content: 

/** 

 * JUnit constructor.

 * @param testName  the test class name

 */

public AbstractListIteratorTest(final String testName){

  super(testName);

}

Location: AbstractListIteratorTest.java

Content: 

/** 

 * The value to be used in the add and set tests. Default is null.

 */

public E addSetValue(){

  return null;

}

Location: AbstractListIteratorTest.java

Content: 

/** 

 * Whether or not we are testing an iterator that supports set(). Default is true.

 * @return true if Iterator supports set

 */

public boolean supportsSet(){

  return true;

}

Location: AbstractListIteratorTest.java

Content: 

/** 

 * Test remove after add behavior.

 */

public void testAddThenRemove(){

  final ListIterator<E> it=makeObject();

  if (supportsAdd() && supportsRemove()) {

    it.next();

    it.add(addSetValue());

    try {

      it.remove();

      fail("IllegalStateException must be thrown from remove after add");

    }

 catch (    final IllegalStateException e) {

    }

  }

}

Location: AbstractListIteratorTest.java

Content: 

public void testAddThenSet(){

  final ListIterator<E> it=makeObject();

  if (supportsAdd() && supportsSet()) {

    it.next();

    it.add(addSetValue());

    try {

      it.set(addSetValue());

      fail("IllegalStateException must be thrown from set after add");

    }

 catch (    final IllegalStateException e) {

    }

  }

}

Location: AbstractListIteratorTest.java

Content: 

public void testRemoveThenSet(){

  final ListIterator<E> it=makeObject();

  if (supportsRemove() && supportsSet()) {

    it.next();

    it.remove();

    try {

      it.set(addSetValue());

      fail("IllegalStateException must be thrown from set after remove");

    }

 catch (    final IllegalStateException e) {

    }

  }

}

