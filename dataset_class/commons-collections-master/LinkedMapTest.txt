Location: LinkedMapTest.java

Content: 

public LinkedMapTest(final String testName){

  super(testName);

}

Location: LinkedMapTest.java

Content: 

public void testInsertionOrder(){

  if (!isPutAddSupported() || !isPutChangeSupported()) {

    return;

  }

  final K[] keys=getSampleKeys();

  final V[] values=getSampleValues();

  Iterator<K> keyIter;

  Iterator<V> valueIter;

  resetEmpty();

  map.put(keys[0],values[0]);

  map.put(keys[1],values[1]);

  keyIter=map.keySet().iterator();

  assertSame(keys[0],keyIter.next());

  assertSame(keys[1],keyIter.next());

  valueIter=map.values().iterator();

  assertSame(values[0],valueIter.next());

  assertSame(values[1],valueIter.next());

  map.put(keys[1],values[1]);

  keyIter=map.keySet().iterator();

  assertSame(keys[0],keyIter.next());

  assertSame(keys[1],keyIter.next());

  valueIter=map.values().iterator();

  assertSame(values[0],valueIter.next());

  assertSame(values[1],valueIter.next());

  map.put(keys[1],values[2]);

  keyIter=map.keySet().iterator();

  assertSame(keys[0],keyIter.next());

  assertSame(keys[1],keyIter.next());

  valueIter=map.values().iterator();

  assertSame(values[0],valueIter.next());

  assertSame(values[2],valueIter.next());

  map.put(keys[0],values[3]);

  keyIter=map.keySet().iterator();

  assertSame(keys[0],keyIter.next());

  assertSame(keys[1],keyIter.next());

  valueIter=map.values().iterator();

  assertSame(values[3],valueIter.next());

  assertSame(values[2],valueIter.next());

}

Location: LinkedMapTest.java

Content: 

@SuppressWarnings("unchecked") public void testReset(){

  resetEmpty();

  OrderedMap<K,V> ordered=getMap();

  ((ResettableIterator<K>)ordered.mapIterator()).reset();

  resetFull();

  ordered=getMap();

  final List<K> list=new ArrayList<>(ordered.keySet());

  final ResettableIterator<K> it=(ResettableIterator<K>)ordered.mapIterator();

  assertSame(list.get(0),it.next());

  assertSame(list.get(1),it.next());

  it.reset();

  assertSame(list.get(0),it.next());

}

Location: LinkedMapTest.java

Content: 

public LinkedMapTest(final String testName){

  super(testName);

}

Location: LinkedMapTest.java

Content: 

public void testInsertionOrder(){

  if (!isPutAddSupported() || !isPutChangeSupported()) {

    return;

  }

  final K[] keys=getSampleKeys();

  final V[] values=getSampleValues();

  Iterator<K> keyIter;

  Iterator<V> valueIter;

  resetEmpty();

  map.put(keys[0],values[0]);

  map.put(keys[1],values[1]);

  keyIter=map.keySet().iterator();

  assertSame(keys[0],keyIter.next());

  assertSame(keys[1],keyIter.next());

  valueIter=map.values().iterator();

  assertSame(values[0],valueIter.next());

  assertSame(values[1],valueIter.next());

  map.put(keys[1],values[1]);

  keyIter=map.keySet().iterator();

  assertSame(keys[0],keyIter.next());

  assertSame(keys[1],keyIter.next());

  valueIter=map.values().iterator();

  assertSame(values[0],valueIter.next());

  assertSame(values[1],valueIter.next());

  map.put(keys[1],values[2]);

  keyIter=map.keySet().iterator();

  assertSame(keys[0],keyIter.next());

  assertSame(keys[1],keyIter.next());

  valueIter=map.values().iterator();

  assertSame(values[0],valueIter.next());

  assertSame(values[2],valueIter.next());

  map.put(keys[0],values[3]);

  keyIter=map.keySet().iterator();

  assertSame(keys[0],keyIter.next());

  assertSame(keys[1],keyIter.next());

  valueIter=map.values().iterator();

  assertSame(values[3],valueIter.next());

  assertSame(values[2],valueIter.next());

}

Location: LinkedMapTest.java

Content: 

@SuppressWarnings("unchecked") public void testReset(){

  resetEmpty();

  OrderedMap<K,V> ordered=getMap();

  ((ResettableIterator<K>)ordered.mapIterator()).reset();

  resetFull();

  ordered=getMap();

  final List<K> list=new ArrayList<>(ordered.keySet());

  final ResettableIterator<K> it=(ResettableIterator<K>)ordered.mapIterator();

  assertSame(list.get(0),it.next());

  assertSame(list.get(1),it.next());

  it.reset();

  assertSame(list.get(0),it.next());

}

