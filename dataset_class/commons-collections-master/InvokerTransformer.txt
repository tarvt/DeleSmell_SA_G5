Location: InvokerTransformer.java

Content: 

/** 

 * Constructor for no arg instance.

 * @param methodName  the method to call

 */

private InvokerTransformer(final String methodName){

  iMethodName=methodName;

  iParamTypes=null;

  iArgs=null;

}

Location: InvokerTransformer.java

Content: 

/** 

 * Constructor that performs no validation. Use  {@code invokerTransformer} if you want that.<p> Note: from 4.0, the input parameters will be cloned

 * @param methodName  the method to call

 * @param paramTypes  the constructor parameter types

 * @param args  the constructor arguments

 */

public InvokerTransformer(final String methodName,final Class<?>[] paramTypes,final Object[] args){

  iMethodName=methodName;

  iParamTypes=paramTypes != null ? paramTypes.clone() : null;

  iArgs=args != null ? args.clone() : null;

}

Location: InvokerTransformer.java

Content: 

/** 

 * Transforms the input to result by invoking a method on the input.

 * @param input  the input object to transform

 * @return the transformed result, null if null input

 */

@Override @SuppressWarnings("unchecked") public O transform(final Object input){

  if (input == null) {

    return null;

  }

  try {

    final Class<?> cls=input.getClass();

    final Method method=cls.getMethod(iMethodName,iParamTypes);

    return (O)method.invoke(input,iArgs);

  }

 catch (  final NoSuchMethodException ex) {

    throw new FunctorException("InvokerTransformer: The method '" + iMethodName + "' on '"+ input.getClass()+ "' does not exist");

  }

catch (  final IllegalAccessException ex) {

    throw new FunctorException("InvokerTransformer: The method '" + iMethodName + "' on '"+ input.getClass()+ "' cannot be accessed");

  }

catch (  final InvocationTargetException ex) {

    throw new FunctorException("InvokerTransformer: The method '" + iMethodName + "' on '"+ input.getClass()+ "' threw an exception",ex);

  }

}

Location: InvokerTransformer.java

Content: 

/** 

 * Constructor for no arg instance.

 * @param methodName  the method to call

 */

private InvokerTransformer(final String methodName){

  iMethodName=methodName;

  iParamTypes=null;

  iArgs=null;

}

Location: InvokerTransformer.java

Content: 

/** 

 * Constructor that performs no validation. Use  {@code invokerTransformer} if you want that.<p> Note: from 4.0, the input parameters will be cloned

 * @param methodName  the method to call

 * @param paramTypes  the constructor parameter types

 * @param args  the constructor arguments

 */

public InvokerTransformer(final String methodName,final Class<?>[] paramTypes,final Object[] args){

  iMethodName=methodName;

  iParamTypes=paramTypes != null ? paramTypes.clone() : null;

  iArgs=args != null ? args.clone() : null;

}

Location: InvokerTransformer.java

Content: 

/** 

 * Transforms the input to result by invoking a method on the input.

 * @param input  the input object to transform

 * @return the transformed result, null if null input

 */

@Override @SuppressWarnings("unchecked") public O transform(final Object input){

  if (input == null) {

    return null;

  }

  try {

    final Class<?> cls=input.getClass();

    final Method method=cls.getMethod(iMethodName,iParamTypes);

    return (O)method.invoke(input,iArgs);

  }

 catch (  final NoSuchMethodException ex) {

    throw new FunctorException("InvokerTransformer: The method '" + iMethodName + "' on '"+ input.getClass()+ "' does not exist");

  }

catch (  final IllegalAccessException ex) {

    throw new FunctorException("InvokerTransformer: The method '" + iMethodName + "' on '"+ input.getClass()+ "' cannot be accessed");

  }

catch (  final InvocationTargetException ex) {

    throw new FunctorException("InvokerTransformer: The method '" + iMethodName + "' on '"+ input.getClass()+ "' threw an exception",ex);

  }

}

