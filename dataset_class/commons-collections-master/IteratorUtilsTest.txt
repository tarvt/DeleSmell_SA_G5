Location: IteratorUtilsTest.java

Content: 

/** 

 * Creates a NodeList containing the specified nodes.

 */

private NodeList createNodeList(final Node[] nodes){

  return new NodeList(){

    @Override public int getLength(){

      return nodes.length;

    }

    @Override public Node item(    final int index){

      return nodes[index];

    }

  }

;

}

Location: IteratorUtilsTest.java

Content: 

/** 

 * creates an array of four Node instances, mocked by EasyMock.

 */

private Node[] createNodes(){

  final Node node1=createMock(Node.class);

  final Node node2=createMock(Node.class);

  final Node node3=createMock(Node.class);

  final Node node4=createMock(Node.class);

  replay(node1);

  replay(node2);

  replay(node3);

  replay(node4);

  return new Node[]{node1,node2,node3,node4};

}

Location: IteratorUtilsTest.java

Content: 

/** 

 * Gets an immutable Iterator operating on the elements ["a", "b", "c", "d"].

 */

private Iterator<String> getImmutableIterator(){

  final List<String> list=new ArrayList<>();

  list.add("a");

  list.add("b");

  list.add("c");

  list.add("d");

  return IteratorUtils.unmodifiableIterator(list.iterator());

}

Location: IteratorUtilsTest.java

Content: 

/** 

 * Gets an immutable ListIterator operating on the elements ["a", "b", "c", "d"].

 */

private ListIterator<String> getImmutableListIterator(){

  final List<String> list=new ArrayList<>();

  list.add("a");

  list.add("b");

  list.add("c");

  list.add("d");

  return IteratorUtils.unmodifiableListIterator(list.listIterator());

}

Location: IteratorUtilsTest.java

Content: 

@Test public void testArrayIterator(){

  final Object[] objArray={"a","b","c"};

  ResettableIterator<Object> iterator=IteratorUtils.arrayIterator(objArray);

  assertEquals("a",iterator.next());

  assertEquals("b",iterator.next());

  iterator.reset();

  assertEquals("a",iterator.next());

  try {

    iterator=IteratorUtils.arrayIterator(Integer.valueOf(0));

    fail("Expecting IllegalArgumentException");

  }

 catch (  final IllegalArgumentException ex) {

  }

  try {

    iterator=IteratorUtils.arrayIterator((Object[])null);

    fail("Expecting NullPointerException");

  }

 catch (  final NullPointerException ex) {

  }

  iterator=IteratorUtils.arrayIterator(objArray,1);

  assertEquals("b",iterator.next());

  try {

    iterator=IteratorUtils.arrayIterator(objArray,-1);

    fail("Expecting IndexOutOfBoundsException");

  }

 catch (  final IndexOutOfBoundsException ex) {

  }

  iterator=IteratorUtils.arrayIterator(objArray,3);

  assertFalse(iterator.hasNext());

  iterator.reset();

  try {

    iterator=IteratorUtils.arrayIterator(objArray,4);

    fail("Expecting IndexOutOfBoundsException");

  }

 catch (  final IndexOutOfBoundsException ex) {

  }

  iterator=IteratorUtils.arrayIterator(objArray,2,3);

  assertEquals("c",iterator.next());

  try {

    iterator=IteratorUtils.arrayIterator(objArray,2,4);

    fail("Expecting IndexOutOfBoundsException");

  }

 catch (  final IndexOutOfBoundsException ex) {

  }

  try {

    iterator=IteratorUtils.arrayIterator(objArray,-1,1);

    fail("Expecting IndexOutOfBoundsException");

  }

 catch (  final IndexOutOfBoundsException ex) {

  }

  try {

    iterator=IteratorUtils.arrayIterator(objArray,2,1);

    fail("Expecting IllegalArgumentException");

  }

 catch (  final IllegalArgumentException ex) {

  }

  final int[] intArray={0,1,2};

  iterator=IteratorUtils.arrayIterator(intArray);

  assertEquals(0,iterator.next());

  assertEquals(1,iterator.next());

  iterator.reset();

  assertEquals(0,iterator.next());

  iterator=IteratorUtils.arrayIterator(intArray,1);

  assertEquals(1,iterator.next());

  try {

    iterator=IteratorUtils.arrayIterator(intArray,-1);

    fail("Expecting IndexOutOfBoundsException");

  }

 catch (  final IndexOutOfBoundsException ex) {

  }

  iterator=IteratorUtils.arrayIterator(intArray,3);

  assertFalse(iterator.hasNext());

  iterator.reset();

  try {

    iterator=IteratorUtils.arrayIterator(intArray,4);

    fail("Expecting IndexOutOfBoundsException");

  }

 catch (  final IndexOutOfBoundsException ex) {

  }

  iterator=IteratorUtils.arrayIterator(intArray,2,3);

  assertEquals(2,iterator.next());

  try {

    iterator=IteratorUtils.arrayIterator(intArray,2,4);

    fail("Expecting IndexOutOfBoundsException");

  }

 catch (  final IndexOutOfBoundsException ex) {

  }

  try {

    iterator=IteratorUtils.arrayIterator(intArray,-1,1);

    fail("Expecting IndexOutOfBoundsException");

  }

 catch (  final IndexOutOfBoundsException ex) {

  }

  try {

    iterator=IteratorUtils.arrayIterator(intArray,2,1);

    fail("Expecting IllegalArgumentException");

  }

 catch (  final IllegalArgumentException ex) {

  }

}

Location: IteratorUtilsTest.java

Content: 

@Test public void testArrayListIterator(){

  final Object[] objArray={"a","b","c","d"};

  ResettableListIterator<Object> iterator=IteratorUtils.arrayListIterator(objArray);

  assertFalse(iterator.hasPrevious());

  assertEquals(-1,iterator.previousIndex());

  assertEquals(0,iterator.nextIndex());

  assertEquals("a",iterator.next());

  assertEquals("a",iterator.previous());

  assertEquals("a",iterator.next());

  assertEquals(0,iterator.previousIndex());

  assertEquals(1,iterator.nextIndex());

  assertEquals("b",iterator.next());

  assertEquals("c",iterator.next());

  assertEquals("d",iterator.next());

  assertEquals(4,iterator.nextIndex());

  assertEquals(3,iterator.previousIndex());

  try {

    iterator=IteratorUtils.arrayListIterator(Integer.valueOf(0));

    fail("Expecting IllegalArgumentException");

  }

 catch (  final IllegalArgumentException ex) {

  }

  try {

    iterator=IteratorUtils.arrayListIterator((Object[])null);

    fail("Expecting NullPointerException");

  }

 catch (  final NullPointerException ex) {

  }

  iterator=IteratorUtils.arrayListIterator(objArray,1);

  assertEquals(-1,iterator.previousIndex());

  assertFalse(iterator.hasPrevious());

  assertEquals(0,iterator.nextIndex());

  assertEquals("b",iterator.next());

  assertEquals(0,iterator.previousIndex());

  try {

    iterator=IteratorUtils.arrayListIterator(objArray,-1);

    fail("Expecting IndexOutOfBoundsException.");

  }

 catch (  final IndexOutOfBoundsException ex) {

  }

  iterator=IteratorUtils.arrayListIterator(objArray,3);

  assertTrue(iterator.hasNext());

  try {

    iterator.previous();

    fail("Expecting NoSuchElementException.");

  }

 catch (  final NoSuchElementException ex) {

  }

  try {

    iterator=IteratorUtils.arrayListIterator(objArray,5);

    fail("Expecting IndexOutOfBoundsException.");

  }

 catch (  final IndexOutOfBoundsException ex) {

  }

  iterator=IteratorUtils.arrayListIterator(objArray,2,3);

  assertEquals("c",iterator.next());

  try {

    iterator=IteratorUtils.arrayListIterator(objArray,2,5);

    fail("Expecting IndexOutOfBoundsException");

  }

 catch (  final IndexOutOfBoundsException ex) {

  }

  try {

    iterator=IteratorUtils.arrayListIterator(objArray,-1,1);

    fail("Expecting IndexOutOfBoundsException");

  }

 catch (  final IndexOutOfBoundsException ex) {

  }

  try {

    iterator=IteratorUtils.arrayListIterator(objArray,2,1);

    fail("Expecting IllegalArgumentException");

  }

 catch (  final IllegalArgumentException ex) {

  }

  final int[] intArray={0,1,2};

  iterator=IteratorUtils.arrayListIterator(intArray);

  assertEquals(iterator.previousIndex(),-1);

  assertFalse(iterator.hasPrevious());

  assertEquals(0,iterator.nextIndex());

  assertEquals(0,iterator.next());

  assertEquals(0,iterator.previousIndex());

  assertEquals(1,iterator.nextIndex());

  assertEquals(1,iterator.next());

  assertEquals(1,iterator.previousIndex());

  assertEquals(2,iterator.nextIndex());

  assertEquals(1,iterator.previous());

  assertEquals(1,iterator.next());

  iterator=IteratorUtils.arrayListIterator(intArray,1);

  assertEquals(-1,iterator.previousIndex());

  assertFalse(iterator.hasPrevious());

  assertEquals(0,iterator.nextIndex());

  assertEquals(1,iterator.next());

  assertEquals(1,iterator.previous());

  assertEquals(1,iterator.next());

  assertEquals(0,iterator.previousIndex());

  assertEquals(1,iterator.nextIndex());

  assertEquals(2,iterator.next());

  assertEquals(1,iterator.previousIndex());

  assertEquals(2,iterator.nextIndex());

  assertEquals(2,iterator.previous());

  assertEquals(0,iterator.previousIndex());

  assertEquals(1,iterator.nextIndex());

  try {

    iterator=IteratorUtils.arrayListIterator(intArray,-1);

    fail("Expecting IndexOutOfBoundsException");

  }

 catch (  final IndexOutOfBoundsException ex) {

  }

  iterator=IteratorUtils.arrayListIterator(intArray,3);

  assertFalse(iterator.hasNext());

  try {

    iterator=IteratorUtils.arrayListIterator(intArray,4);

    fail("Expecting IndexOutOfBoundsException");

  }

 catch (  final IndexOutOfBoundsException ex) {

  }

  iterator=IteratorUtils.arrayListIterator(intArray,2,3);

  assertFalse(iterator.hasPrevious());

  assertEquals(-1,iterator.previousIndex());

  assertEquals(2,iterator.next());

  assertTrue(iterator.hasPrevious());

  assertFalse(iterator.hasNext());

  try {

    iterator=IteratorUtils.arrayListIterator(intArray,2,4);

    fail("Expecting IndexOutOfBoundsException");

  }

 catch (  final IndexOutOfBoundsException ex) {

  }

  try {

    iterator=IteratorUtils.arrayListIterator(intArray,-1,1);

    fail("Expecting IndexOutOfBoundsException");

  }

 catch (  final IndexOutOfBoundsException ex) {

  }

  try {

    iterator=IteratorUtils.arrayListIterator(intArray,2,1);

    fail("Expecting IllegalArgumentException");

  }

 catch (  final IllegalArgumentException ex) {

  }

}

Location: IteratorUtilsTest.java

Content: 

@Test public void testAsEnumerationNull(){

  assertThrows(NullPointerException.class,() -> IteratorUtils.asEnumeration(null));

}

Location: IteratorUtilsTest.java

Content: 

@Test public void testAsIterable(){

  final List<Integer> list=new ArrayList<>();

  list.add(Integer.valueOf(0));

  list.add(Integer.valueOf(1));

  list.add(Integer.valueOf(2));

  final Iterator<Integer> iterator=list.iterator();

  final Iterable<Integer> iterable=IteratorUtils.asIterable(iterator);

  int expected=0;

  for (  final Integer actual : iterable) {

    assertEquals(expected,actual.intValue());

    ++expected;

  }

  assertTrue(expected > 0);

  assertFalse(IteratorUtils.asIterable(iterator).iterator().hasNext(),"should not be able to iterate twice");

}

Location: IteratorUtilsTest.java

Content: 

@Test public void testAsIterableNull(){

  try {

    IteratorUtils.asIterable(null);

    fail("Expecting NullPointerException");

  }

 catch (  final NullPointerException ex) {

  }

}

Location: IteratorUtilsTest.java

Content: 

@Test public void testAsIterator(){

  final Vector<String> vector=new Vector<>();

  vector.addElement("zero");

  vector.addElement("one");

  final Enumeration<String> en=vector.elements();

  assertTrue(IteratorUtils.asIterator(en) instanceof Iterator,"create instance fail");

  assertThrows(NullPointerException.class,() -> IteratorUtils.asIterator(null));

}

Location: IteratorUtilsTest.java

Content: 

@Test public void testAsIteratorNull(){

  final Collection coll=new ArrayList();

  coll.add("test");

  final Vector<String> vector=new Vector<>();

  vector.addElement("test");

  vector.addElement("one");

  final Enumeration<String> en=vector.elements();

  assertTrue(IteratorUtils.asIterator(en,coll) instanceof Iterator,"create instance fail");

  try {

    IteratorUtils.asIterator(null,coll);

  }

 catch (  final NullPointerException npe) {

  }

  try {

    IteratorUtils.asIterator(en,null);

  }

 catch (  final NullPointerException npe) {

  }

}

Location: IteratorUtilsTest.java

Content: 

@Test public void testAsMultipleIterable(){

  final List<Integer> list=new ArrayList<>();

  list.add(Integer.valueOf(0));

  list.add(Integer.valueOf(1));

  list.add(Integer.valueOf(2));

  final Iterator<Integer> iterator=list.iterator();

  final Iterable<Integer> iterable=IteratorUtils.asMultipleUseIterable(iterator);

  int expected=0;

  for (  final Integer actual : iterable) {

    assertEquals(expected,actual.intValue());

    ++expected;

  }

  assertTrue(expected > 0);

  expected=0;

  for (  final Integer actual : iterable) {

    assertEquals(expected,actual.intValue());

    ++expected;

  }

  assertTrue(expected > 0);

}

Location: IteratorUtilsTest.java

Content: 

@Test public void testAsMultipleIterableNull(){

  try {

    IteratorUtils.asMultipleUseIterable(null);

    fail("Expecting NullPointerException");

  }

 catch (  final NullPointerException ex) {

  }

}

Location: IteratorUtilsTest.java

Content: 

@Test public void testChainedIterator(){

  final ArrayList arrayList=new ArrayList();

  final Iterator ie=arrayList.iterator();

  assertTrue(IteratorUtils.chainedIterator(ie) instanceof Iterator,"create instance fail");

  final Collection<Iterator<?>> coll=new ArrayList();

  assertTrue(IteratorUtils.chainedIterator(coll) instanceof Iterator,"create instance fail");

}

Location: IteratorUtilsTest.java

Content: 

/** 

 * Tests methods collatedIterator(...)

 */

@Test public void testCollatedIterator(){

  try {

    IteratorUtils.collatedIterator(null,collectionOdd.iterator(),null);

    fail("expecting NullPointerException");

  }

 catch (  final NullPointerException npe) {

  }

  try {

    IteratorUtils.collatedIterator(null,null,collectionEven.iterator());

    fail("expecting NullPointerException");

  }

 catch (  final NullPointerException npe) {

  }

  Iterator<Integer> it=IteratorUtils.collatedIterator(null,collectionOdd.iterator(),collectionEven.iterator());

  List<Integer> result=IteratorUtils.toList(it);

  assertEquals(12,result.size());

  final List<Integer> combinedList=new ArrayList<>(collectionOdd);

  combinedList.addAll(collectionEven);

  Collections.sort(combinedList);

  assertEquals(combinedList,result);

  it=IteratorUtils.collatedIterator(null,collectionOdd.iterator(),emptyCollection.iterator());

  result=IteratorUtils.toList(it);

  assertEquals(collectionOdd,result);

  final Comparator<Integer> reverseComparator=ComparatorUtils.reversedComparator(ComparatorUtils.<Integer>naturalComparator());

  Collections.reverse(collectionOdd);

  Collections.reverse(collectionEven);

  Collections.reverse(combinedList);

  it=IteratorUtils.collatedIterator(reverseComparator,collectionOdd.iterator(),collectionEven.iterator());

  result=IteratorUtils.toList(it);

  assertEquals(combinedList,result);

}

Location: IteratorUtilsTest.java

Content: 

@Test public void testCollatedIteratorCollectionNull(){

  final Collection<Iterator<?>> coll=new ArrayList<>();

  coll.add(collectionOdd.iterator());

  final Iterator<?> it=IteratorUtils.collatedIterator(null,coll);

  final List<?> result=IteratorUtils.toList(it);

  assertEquals(6,result.size());

  assertThrows(NullPointerException.class,() -> IteratorUtils.collatedIterator(null,(Collection<Iterator<?>>)null));

}

Location: IteratorUtilsTest.java

Content: 

@Test public void testCollatedIteratorNull(){

  final ArrayList arrayList=new ArrayList();

  Iterator<Integer> it=IteratorUtils.collatedIterator(null,collectionOdd.iterator(),collectionOdd.iterator(),collectionOdd.iterator());

  List<Integer> result=IteratorUtils.toList(it);

  assertEquals(18,result.size());

  it=IteratorUtils.collatedIterator(null,collectionOdd.iterator());

  result=IteratorUtils.toList(it);

  assertEquals(collectionOdd,result);

  final Comparator<Integer> reverseComparator=ComparatorUtils.reversedComparator(ComparatorUtils.<Integer>naturalComparator());

  Collections.reverse(collectionOdd);

  it=IteratorUtils.collatedIterator(reverseComparator,collectionOdd.iterator());

  result=IteratorUtils.toList(it);

  assertEquals(collectionOdd,result);

  assertThrows(NullPointerException.class,() -> IteratorUtils.collatedIterator(null,arrayList.iterator(),arrayList.listIterator(),null));

}

Location: IteratorUtilsTest.java

Content: 

/** 

 * Test empty list iterator

 */

@Test public void testEmptyListIterator(){

  assertSame(EmptyListIterator.INSTANCE,IteratorUtils.EMPTY_LIST_ITERATOR);

  assertSame(EmptyListIterator.RESETTABLE_INSTANCE,IteratorUtils.EMPTY_LIST_ITERATOR);

  assertTrue(IteratorUtils.EMPTY_LIST_ITERATOR instanceof Iterator);

  assertTrue(IteratorUtils.EMPTY_LIST_ITERATOR instanceof ListIterator);

  assertTrue(IteratorUtils.EMPTY_LIST_ITERATOR instanceof ResettableIterator);

  assertTrue(IteratorUtils.EMPTY_LIST_ITERATOR instanceof ResettableListIterator);

  assertFalse(IteratorUtils.EMPTY_LIST_ITERATOR instanceof MapIterator);

  assertFalse(IteratorUtils.EMPTY_LIST_ITERATOR.hasNext());

  assertEquals(0,IteratorUtils.EMPTY_LIST_ITERATOR.nextIndex());

  assertEquals(-1,IteratorUtils.EMPTY_LIST_ITERATOR.previousIndex());

  IteratorUtils.EMPTY_LIST_ITERATOR.reset();

  assertSame(IteratorUtils.EMPTY_LIST_ITERATOR,IteratorUtils.EMPTY_LIST_ITERATOR);

  assertSame(IteratorUtils.EMPTY_LIST_ITERATOR,IteratorUtils.emptyListIterator());

  try {

    IteratorUtils.EMPTY_LIST_ITERATOR.next();

    fail();

  }

 catch (  final NoSuchElementException ex) {

  }

  try {

    IteratorUtils.EMPTY_LIST_ITERATOR.previous();

    fail();

  }

 catch (  final NoSuchElementException ex) {

  }

  try {

    IteratorUtils.EMPTY_LIST_ITERATOR.remove();

    fail();

  }

 catch (  final IllegalStateException ex) {

  }

  try {

    IteratorUtils.emptyListIterator().set(null);

    fail();

  }

 catch (  final IllegalStateException ex) {

  }

  try {

    IteratorUtils.emptyListIterator().add(null);

    fail();

  }

 catch (  final UnsupportedOperationException ex) {

  }

}

Location: IteratorUtilsTest.java

Content: 

/** 

 * Test empty map iterator

 */

@Test @SuppressWarnings("unchecked") public void testEmptyOrderedIterator(){

  assertSame(EmptyOrderedIterator.INSTANCE,IteratorUtils.EMPTY_ORDERED_ITERATOR);

  assertTrue(IteratorUtils.EMPTY_ORDERED_ITERATOR instanceof Iterator);

  assertTrue(IteratorUtils.EMPTY_ORDERED_ITERATOR instanceof OrderedIterator);

  assertTrue(IteratorUtils.EMPTY_ORDERED_ITERATOR instanceof ResettableIterator);

  assertFalse(IteratorUtils.EMPTY_ORDERED_ITERATOR instanceof ListIterator);

  assertFalse(IteratorUtils.EMPTY_ORDERED_ITERATOR instanceof MapIterator);

  assertFalse(IteratorUtils.EMPTY_ORDERED_ITERATOR.hasNext());

  assertFalse(IteratorUtils.EMPTY_ORDERED_ITERATOR.hasPrevious());

  ((ResettableIterator<Object>)IteratorUtils.EMPTY_ORDERED_ITERATOR).reset();

  assertSame(IteratorUtils.EMPTY_ORDERED_ITERATOR,IteratorUtils.EMPTY_ORDERED_ITERATOR);

  assertSame(IteratorUtils.EMPTY_ORDERED_ITERATOR,IteratorUtils.emptyOrderedIterator());

  try {

    IteratorUtils.EMPTY_ORDERED_ITERATOR.next();

    fail();

  }

 catch (  final NoSuchElementException ex) {

  }

  try {

    IteratorUtils.EMPTY_ORDERED_ITERATOR.previous();

    fail();

  }

 catch (  final NoSuchElementException ex) {

  }

  try {

    IteratorUtils.EMPTY_ORDERED_ITERATOR.remove();

    fail();

  }

 catch (  final IllegalStateException ex) {

  }

}

Location: IteratorUtilsTest.java

Content: 

/** 

 * Test empty map iterator

 */

@Test @SuppressWarnings("unchecked") public void testEmptyOrderedMapIterator(){

  assertSame(EmptyOrderedMapIterator.INSTANCE,IteratorUtils.EMPTY_ORDERED_MAP_ITERATOR);

  assertTrue(IteratorUtils.EMPTY_ORDERED_MAP_ITERATOR instanceof Iterator);

  assertTrue(IteratorUtils.EMPTY_ORDERED_MAP_ITERATOR instanceof MapIterator);

  assertTrue(IteratorUtils.EMPTY_ORDERED_MAP_ITERATOR instanceof OrderedMapIterator);

  assertTrue(IteratorUtils.EMPTY_ORDERED_MAP_ITERATOR instanceof ResettableIterator);

  assertFalse(IteratorUtils.EMPTY_ORDERED_MAP_ITERATOR instanceof ListIterator);

  assertFalse(IteratorUtils.EMPTY_ORDERED_MAP_ITERATOR.hasNext());

  assertFalse(IteratorUtils.EMPTY_ORDERED_MAP_ITERATOR.hasPrevious());

  ((ResettableIterator<Object>)IteratorUtils.EMPTY_ORDERED_MAP_ITERATOR).reset();

  assertSame(IteratorUtils.EMPTY_ORDERED_MAP_ITERATOR,IteratorUtils.EMPTY_ORDERED_MAP_ITERATOR);

  assertSame(IteratorUtils.EMPTY_ORDERED_MAP_ITERATOR,IteratorUtils.emptyOrderedMapIterator());

  try {

    IteratorUtils.EMPTY_ORDERED_MAP_ITERATOR.next();

    fail();

  }

 catch (  final NoSuchElementException ex) {

  }

  try {

    IteratorUtils.EMPTY_ORDERED_MAP_ITERATOR.previous();

    fail();

  }

 catch (  final NoSuchElementException ex) {

  }

  try {

    IteratorUtils.EMPTY_ORDERED_MAP_ITERATOR.remove();

    fail();

  }

 catch (  final IllegalStateException ex) {

  }

  try {

    IteratorUtils.EMPTY_ORDERED_MAP_ITERATOR.getKey();

    fail();

  }

 catch (  final IllegalStateException ex) {

  }

  try {

    IteratorUtils.EMPTY_ORDERED_MAP_ITERATOR.getValue();

    fail();

  }

 catch (  final IllegalStateException ex) {

  }

  try {

    IteratorUtils.EMPTY_ORDERED_MAP_ITERATOR.setValue(null);

    fail();

  }

 catch (  final IllegalStateException ex) {

  }

}

Location: IteratorUtilsTest.java

Content: 

@Test public void testFilteredIterator(){

  final ArrayList arrayList=new ArrayList();

  final Iterator ie=arrayList.iterator();

  try {

    IteratorUtils.filteredIterator(ie,null);

  }

 catch (  final NullPointerException npe) {

  }

  try {

    IteratorUtils.filteredIterator(null,null);

  }

 catch (  final NullPointerException npe) {

  }

}

Location: IteratorUtilsTest.java

Content: 

@Test public void testFilteredListIterator(){

  final List arrayList=new ArrayList();

  arrayList.add("test");

  final Predicate predicate=INSTANCE;

  assertTrue(IteratorUtils.filteredListIterator(arrayList.listIterator(),predicate) instanceof ListIterator,"create instance fail");

  try {

    IteratorUtils.filteredListIterator(null,predicate);

  }

 catch (  final NullPointerException npe) {

  }

  try {

    IteratorUtils.filteredListIterator(arrayList.listIterator(),null);

  }

 catch (  final NullPointerException npe) {

  }

}

Location: IteratorUtilsTest.java

Content: 

@Test public void testFind(){

  Predicate<Number> testPredicate=equalPredicate((Number)4);

  Integer test=IteratorUtils.find(iterableA.iterator(),testPredicate);

  assertEquals(4,(int)test);

  testPredicate=equalPredicate((Number)45);

  test=IteratorUtils.find(iterableA.iterator(),testPredicate);

  assertNull(test);

  assertNull(IteratorUtils.find(null,testPredicate));

  try {

    assertNull(IteratorUtils.find(iterableA.iterator(),null));

    fail("expecting NullPointerException");

  }

 catch (  final NullPointerException npe) {

  }

}

Location: IteratorUtilsTest.java

Content: 

@Test public void testFirstFromIterator() throws Exception {

  final Iterator<Integer> iterator=iterableA.iterator();

  assertEquals(1,(int)IteratorUtils.first(iterator));

}

Location: IteratorUtilsTest.java

Content: 

@Test public void testForEachButLast(){

  final List<Integer> listA=new ArrayList<>();

  listA.add(1);

  final List<Integer> listB=new ArrayList<>();

  listB.add(2);

  final Closure<List<Integer>> testClosure=ClosureUtils.invokerClosure("clear");

  final Collection<List<Integer>> col=new ArrayList<>();

  col.add(listA);

  col.add(listB);

  List<Integer> last=IteratorUtils.forEachButLast(col.iterator(),testClosure);

  assertTrue(listA.isEmpty() && !listB.isEmpty());

  assertSame(listB,last);

  try {

    IteratorUtils.forEachButLast(col.iterator(),null);

    fail("expecting NullPointerException");

  }

 catch (  final NullPointerException npe) {

  }

  IteratorUtils.forEachButLast(null,testClosure);

  col.add(null);

  col.add(null);

  last=IteratorUtils.forEachButLast(col.iterator(),testClosure);

  assertNull(last);

}

Location: IteratorUtilsTest.java

Content: 

@Test public void testGetAtIndexFromIterator() throws Exception {

  Iterator<Integer> iterator=iterableA.iterator();

  assertEquals(1,(int)IteratorUtils.get(iterator,0));

  iterator=iterableA.iterator();

  assertEquals(2,(int)IteratorUtils.get(iterator,1));

  try {

    IteratorUtils.get(iterator,10);

    fail("Expecting IndexOutOfBoundsException.");

  }

 catch (  final IndexOutOfBoundsException e) {

  }

  assertFalse(iterator.hasNext());

}

Location: IteratorUtilsTest.java

Content: 

@Test public void testGetIterator(){

  final Object[] objArray={"a","b","c"};

  final Map<String,String> inMap=new HashMap<>();

  final Node[] nodes=createNodes();

  final NodeList nodeList=createNodeList(nodes);

  assertTrue(IteratorUtils.getIterator(null) instanceof EmptyIterator,"returns empty iterator when null passed");

  assertTrue(IteratorUtils.getIterator(iterableA.iterator()) instanceof Iterator,"returns Iterator when Iterator directly ");

  assertTrue(IteratorUtils.getIterator(iterableA) instanceof Iterator,"returns Iterator when iterable passed");

  assertTrue(IteratorUtils.getIterator(objArray) instanceof ObjectArrayIterator,"returns ObjectArrayIterator when Object array passed");

  assertTrue(IteratorUtils.getIterator(inMap) instanceof Iterator,"returns Iterator when Map passed");

  assertTrue(IteratorUtils.getIterator(nodeList) instanceof NodeListIterator,"returns NodeListIterator when nodeList passed");

  assertTrue(IteratorUtils.getIterator(new Vector().elements()) instanceof EnumerationIterator,"returns EnumerationIterator when Enumeration passed");

  final Node node1=createMock(Node.class);

  assertTrue(IteratorUtils.getIterator(node1) instanceof NodeListIterator,"returns NodeListIterator when nodeList passed");

  final Dictionary dic=createMock(Dictionary.class);

  assertTrue(IteratorUtils.getIterator(dic) instanceof EnumerationIterator,"returns EnumerationIterator when Dictionary passed");

  final int[] arr=new int[8];

  assertTrue(IteratorUtils.getIterator(arr) instanceof ArrayIterator,"returns ArrayIterator when array passed");

}

Location: IteratorUtilsTest.java

Content: 

@Test public void testLoopingIterator(){

  final ArrayList arrayList=new ArrayList();

  arrayList.add("test");

  final Collection coll=new ArrayList();

  coll.add("test");

  final Iterator ie=arrayList.iterator();

  assertTrue(IteratorUtils.loopingIterator(coll) instanceof ResettableIterator,"create instance fail");

  assertThrows(NullPointerException.class,() -> IteratorUtils.loopingIterator(null));

}

Location: IteratorUtilsTest.java

Content: 

@Test public void testLoopingListIterator(){

  final ArrayList arrayList=new ArrayList();

  arrayList.add("test");

  final Iterator ie=arrayList.iterator();

  assertTrue(IteratorUtils.loopingListIterator(arrayList) instanceof ResettableIterator,"create instance fail");

  assertThrows(NullPointerException.class,() -> IteratorUtils.loopingListIterator(null));

}

Location: IteratorUtilsTest.java

Content: 

/** 

 * Tests method nodeListIterator(Node)

 */

@Test public void testNodeIterator(){

  final Node[] nodes=createNodes();

  final NodeList nodeList=createNodeList(nodes);

  final Node parentNode=createMock(Node.class);

  expect(parentNode.getChildNodes()).andStubReturn(nodeList);

  replay(parentNode);

  final Iterator<Node> iterator=IteratorUtils.nodeListIterator(parentNode);

  int expectedNodeIndex=0;

  for (  final Node actual : IteratorUtils.asIterable(iterator)) {

    assertEquals(nodes[expectedNodeIndex],actual);

    ++expectedNodeIndex;

  }

  assertTrue(expectedNodeIndex > 0);

  assertFalse(IteratorUtils.asIterable(iterator).iterator().hasNext(),"should not be able to iterate twice");

  try {

    IteratorUtils.nodeListIterator((Node)null);

    fail("Expecting NullPointerException");

  }

 catch (  final NullPointerException ex) {

  }

}

Location: IteratorUtilsTest.java

Content: 

/** 

 * Tests method nodeListIterator(NodeList)

 */

@Test public void testNodeListIterator(){

  final Node[] nodes=createNodes();

  final NodeList nodeList=createNodeList(nodes);

  final Iterator<Node> iterator=IteratorUtils.nodeListIterator(nodeList);

  int expectedNodeIndex=0;

  for (  final Node actual : IteratorUtils.asIterable(iterator)) {

    assertEquals(nodes[expectedNodeIndex],actual);

    ++expectedNodeIndex;

  }

  assertTrue(expectedNodeIndex > 0);

  assertFalse(IteratorUtils.asIterable(iterator).iterator().hasNext(),"should not be able to iterate twice");

  try {

    IteratorUtils.nodeListIterator((NodeList)null);

    fail("Expecting NullPointerException");

  }

 catch (  final NullPointerException ex) {

  }

}

Location: IteratorUtilsTest.java

Content: 

@Test public void testObjectGraphIterator(){

  assertTrue(IteratorUtils.objectGraphIterator(null,null) instanceof Iterator,"create instance fail");

}

Location: IteratorUtilsTest.java

Content: 

@Test public void testPeekingIterator(){

  final ArrayList arrayList=new ArrayList();

  final Iterator ie=arrayList.iterator();

  assertTrue(IteratorUtils.peekingIterator(ie) instanceof Iterator,"create instance fail");

  assertThrows(NullPointerException.class,() -> IteratorUtils.peekingIterator(null));

}

Location: IteratorUtilsTest.java

Content: 

@Test public void testPushBackIterator(){

  final ArrayList arrayList=new ArrayList();

  final Iterator ie=arrayList.iterator();

  assertTrue(IteratorUtils.pushbackIterator(ie) instanceof Iterator,"create instance fail");

  assertThrows(NullPointerException.class,() -> IteratorUtils.pushbackIterator(null));

}

Location: IteratorUtilsTest.java

Content: 

@Test public void testSingletonIterator(){

  assertTrue(IteratorUtils.singletonIterator(new Object()) instanceof ResettableIterator,"create instance fail");

}

Location: IteratorUtilsTest.java

Content: 

@Test public void testSingletonListIterator(){

  assertTrue(IteratorUtils.singletonListIterator(new Object()) instanceof Iterator,"create instance fail");

}

Location: IteratorUtilsTest.java

Content: 

@Test public void testToArray2(){

  final List<String> list=new ArrayList<>();

  list.add("One");

  list.add("Two");

  list.add(null);

  final String[] result=IteratorUtils.toArray(list.iterator(),String.class);

  assertEquals(list,Arrays.asList(result));

  try {

    IteratorUtils.toArray(list.iterator(),null);

    fail("Expecting NullPointerException");

  }

 catch (  final NullPointerException ex) {

  }

  try {

    IteratorUtils.toArray(null,String.class);

    fail("Expecting NullPointerException");

  }

 catch (  final NullPointerException ex) {

  }

}

Location: IteratorUtilsTest.java

Content: 

@Test public void testToList(){

  final List<Object> list=new ArrayList<>();

  list.add(Integer.valueOf(1));

  list.add("Two");

  list.add(null);

  final List<Object> result=IteratorUtils.toList(list.iterator());

  assertEquals(list,result);

  try {

    IteratorUtils.toList(null,10);

    fail("Expecting NullPointerException");

  }

 catch (  final NullPointerException ex) {

  }

  try {

    IteratorUtils.toList(list.iterator(),-1);

    fail("Expecting IllegalArgumentException");

  }

 catch (  final IllegalArgumentException ex) {

  }

}

Location: IteratorUtilsTest.java

Content: 

@Test public void testToListIterator(){

  final List<Integer> list=new ArrayList<>();

  list.add(Integer.valueOf(0));

  list.add(Integer.valueOf(1));

  list.add(Integer.valueOf(2));

  final Iterator<Integer> iterator=list.iterator();

  final ListIterator<Integer> liItr=IteratorUtils.toListIterator(iterator);

  int expected=0;

  while (liItr.hasNext()) {

    assertEquals(expected,liItr.next().intValue());

    ++expected;

  }

}

Location: IteratorUtilsTest.java

Content: 

@Test public void testToListIteratorNull(){

  try {

    IteratorUtils.toListIterator(null);

    fail("Expecting NullPointerException");

  }

 catch (  final NullPointerException ex) {

  }

}

Location: IteratorUtilsTest.java

Content: 

@Test public void testTransformedIterator(){

  final ArrayList arrayList=new ArrayList();

  final Iterator ie=arrayList.iterator();

  try {

    IteratorUtils.transformedIterator(ie,null);

  }

 catch (  final NullPointerException npe) {

  }

  try {

    IteratorUtils.transformedIterator(null,null);

  }

 catch (  final NullPointerException npe) {

  }

}

Location: IteratorUtilsTest.java

Content: 

/** 

 * Test remove() for an immutable Iterator.

 */

@Test public void testUnmodifiableIteratorImmutability(){

  final Iterator<String> iterator=getImmutableIterator();

  try {

    iterator.remove();

    fail("remove() should throw an UnsupportedOperationException");

  }

 catch (  final UnsupportedOperationException e) {

  }

  iterator.next();

  try {

    iterator.remove();

    fail("remove() should throw an UnsupportedOperationException");

  }

 catch (  final UnsupportedOperationException e) {

  }

}

Location: IteratorUtilsTest.java

Content: 

/** 

 * Test next() and hasNext() for an immutable Iterator.

 */

@Test public void testUnmodifiableIteratorIteration(){

  final Iterator<String> iterator=getImmutableIterator();

  assertTrue(iterator.hasNext());

  assertEquals("a",iterator.next());

  assertTrue(iterator.hasNext());

  assertEquals("b",iterator.next());

  assertTrue(iterator.hasNext());

  assertEquals("c",iterator.next());

  assertTrue(iterator.hasNext());

  assertEquals("d",iterator.next());

  assertFalse(iterator.hasNext());

}

Location: IteratorUtilsTest.java

Content: 

/** 

 * Test remove() for an immutable ListIterator.

 */

@Test public void testUnmodifiableListIteratorImmutability(){

  final ListIterator<String> listIterator=getImmutableListIterator();

  try {

    listIterator.remove();

    fail("remove() should throw an UnsupportedOperationException");

  }

 catch (  final UnsupportedOperationException e) {

  }

  try {

    listIterator.set("a");

    fail("set(Object) should throw an UnsupportedOperationException");

  }

 catch (  final UnsupportedOperationException e) {

  }

  try {

    listIterator.add("a");

    fail("add(Object) should throw an UnsupportedOperationException");

  }

 catch (  final UnsupportedOperationException e) {

  }

  listIterator.next();

  try {

    listIterator.remove();

    fail("remove() should throw an UnsupportedOperationException");

  }

 catch (  final UnsupportedOperationException e) {

  }

  try {

    listIterator.set("a");

    fail("set(Object) should throw an UnsupportedOperationException");

  }

 catch (  final UnsupportedOperationException e) {

  }

  try {

    listIterator.add("a");

    fail("add(Object) should throw an UnsupportedOperationException");

  }

 catch (  final UnsupportedOperationException e) {

  }

}

Location: IteratorUtilsTest.java

Content: 

/** 

 * Test next(), hasNext(), previous() and hasPrevious() for an immutable ListIterator.

 */

@Test public void testUnmodifiableListIteratorIteration(){

  final ListIterator<String> listIterator=getImmutableListIterator();

  assertFalse(listIterator.hasPrevious());

  assertTrue(listIterator.hasNext());

  assertEquals("a",listIterator.next());

  assertTrue(listIterator.hasPrevious());

  assertTrue(listIterator.hasNext());

  assertEquals("b",listIterator.next());

  assertTrue(listIterator.hasPrevious());

  assertTrue(listIterator.hasNext());

  assertEquals("c",listIterator.next());

  assertTrue(listIterator.hasPrevious());

  assertTrue(listIterator.hasNext());

  assertEquals("d",listIterator.next());

  assertTrue(listIterator.hasPrevious());

  assertFalse(listIterator.hasNext());

  assertEquals("d",listIterator.previous());

  assertTrue(listIterator.hasPrevious());

  assertTrue(listIterator.hasNext());

  assertEquals("c",listIterator.previous());

  assertTrue(listIterator.hasPrevious());

  assertTrue(listIterator.hasNext());

  assertEquals("b",listIterator.previous());

  assertTrue(listIterator.hasPrevious());

  assertTrue(listIterator.hasNext());

  assertEquals("a",listIterator.previous());

  assertFalse(listIterator.hasPrevious());

  assertTrue(listIterator.hasNext());

}

Location: IteratorUtilsTest.java

Content: 

@Test public void testZippingIterator(){

  final ArrayList arrayList=new ArrayList();

  final Iterator ie=arrayList.iterator();

  assertTrue(IteratorUtils.zippingIterator(ie,ie,ie) instanceof ZippingIterator,"create instance fail");

  assertTrue(IteratorUtils.zippingIterator(ie,ie) instanceof ZippingIterator,"create instance fail");

}

Location: IteratorUtilsTest.java

Content: 

/** 

 * Creates a NodeList containing the specified nodes.

 */

private NodeList createNodeList(final Node[] nodes){

  return new NodeList(){

    @Override public int getLength(){

      return nodes.length;

    }

    @Override public Node item(    final int index){

      return nodes[index];

    }

  }

;

}

Location: IteratorUtilsTest.java

Content: 

/** 

 * creates an array of four Node instances, mocked by EasyMock.

 */

private Node[] createNodes(){

  final Node node1=createMock(Node.class);

  final Node node2=createMock(Node.class);

  final Node node3=createMock(Node.class);

  final Node node4=createMock(Node.class);

  replay(node1);

  replay(node2);

  replay(node3);

  replay(node4);

  return new Node[]{node1,node2,node3,node4};

}

Location: IteratorUtilsTest.java

Content: 

/** 

 * Gets an immutable Iterator operating on the elements ["a", "b", "c", "d"].

 */

private Iterator<String> getImmutableIterator(){

  final List<String> list=new ArrayList<>();

  list.add("a");

  list.add("b");

  list.add("c");

  list.add("d");

  return IteratorUtils.unmodifiableIterator(list.iterator());

}

Location: IteratorUtilsTest.java

Content: 

/** 

 * Gets an immutable ListIterator operating on the elements ["a", "b", "c", "d"].

 */

private ListIterator<String> getImmutableListIterator(){

  final List<String> list=new ArrayList<>();

  list.add("a");

  list.add("b");

  list.add("c");

  list.add("d");

  return IteratorUtils.unmodifiableListIterator(list.listIterator());

}

Location: IteratorUtilsTest.java

Content: 

@Test public void testArrayIterator(){

  final Object[] objArray={"a","b","c"};

  ResettableIterator<Object> iterator=IteratorUtils.arrayIterator(objArray);

  assertEquals("a",iterator.next());

  assertEquals("b",iterator.next());

  iterator.reset();

  assertEquals("a",iterator.next());

  try {

    iterator=IteratorUtils.arrayIterator(Integer.valueOf(0));

    fail("Expecting IllegalArgumentException");

  }

 catch (  final IllegalArgumentException ex) {

  }

  try {

    iterator=IteratorUtils.arrayIterator((Object[])null);

    fail("Expecting NullPointerException");

  }

 catch (  final NullPointerException ex) {

  }

  iterator=IteratorUtils.arrayIterator(objArray,1);

  assertEquals("b",iterator.next());

  try {

    iterator=IteratorUtils.arrayIterator(objArray,-1);

    fail("Expecting IndexOutOfBoundsException");

  }

 catch (  final IndexOutOfBoundsException ex) {

  }

  iterator=IteratorUtils.arrayIterator(objArray,3);

  assertFalse(iterator.hasNext());

  iterator.reset();

  try {

    iterator=IteratorUtils.arrayIterator(objArray,4);

    fail("Expecting IndexOutOfBoundsException");

  }

 catch (  final IndexOutOfBoundsException ex) {

  }

  iterator=IteratorUtils.arrayIterator(objArray,2,3);

  assertEquals("c",iterator.next());

  try {

    iterator=IteratorUtils.arrayIterator(objArray,2,4);

    fail("Expecting IndexOutOfBoundsException");

  }

 catch (  final IndexOutOfBoundsException ex) {

  }

  try {

    iterator=IteratorUtils.arrayIterator(objArray,-1,1);

    fail("Expecting IndexOutOfBoundsException");

  }

 catch (  final IndexOutOfBoundsException ex) {

  }

  try {

    iterator=IteratorUtils.arrayIterator(objArray,2,1);

    fail("Expecting IllegalArgumentException");

  }

 catch (  final IllegalArgumentException ex) {

  }

  final int[] intArray={0,1,2};

  iterator=IteratorUtils.arrayIterator(intArray);

  assertEquals(0,iterator.next());

  assertEquals(1,iterator.next());

  iterator.reset();

  assertEquals(0,iterator.next());

  iterator=IteratorUtils.arrayIterator(intArray,1);

  assertEquals(1,iterator.next());

  try {

    iterator=IteratorUtils.arrayIterator(intArray,-1);

    fail("Expecting IndexOutOfBoundsException");

  }

 catch (  final IndexOutOfBoundsException ex) {

  }

  iterator=IteratorUtils.arrayIterator(intArray,3);

  assertFalse(iterator.hasNext());

  iterator.reset();

  try {

    iterator=IteratorUtils.arrayIterator(intArray,4);

    fail("Expecting IndexOutOfBoundsException");

  }

 catch (  final IndexOutOfBoundsException ex) {

  }

  iterator=IteratorUtils.arrayIterator(intArray,2,3);

  assertEquals(2,iterator.next());

  try {

    iterator=IteratorUtils.arrayIterator(intArray,2,4);

    fail("Expecting IndexOutOfBoundsException");

  }

 catch (  final IndexOutOfBoundsException ex) {

  }

  try {

    iterator=IteratorUtils.arrayIterator(intArray,-1,1);

    fail("Expecting IndexOutOfBoundsException");

  }

 catch (  final IndexOutOfBoundsException ex) {

  }

  try {

    iterator=IteratorUtils.arrayIterator(intArray,2,1);

    fail("Expecting IllegalArgumentException");

  }

 catch (  final IllegalArgumentException ex) {

  }

}

Location: IteratorUtilsTest.java

Content: 

@Test public void testArrayListIterator(){

  final Object[] objArray={"a","b","c","d"};

  ResettableListIterator<Object> iterator=IteratorUtils.arrayListIterator(objArray);

  assertFalse(iterator.hasPrevious());

  assertEquals(-1,iterator.previousIndex());

  assertEquals(0,iterator.nextIndex());

  assertEquals("a",iterator.next());

  assertEquals("a",iterator.previous());

  assertEquals("a",iterator.next());

  assertEquals(0,iterator.previousIndex());

  assertEquals(1,iterator.nextIndex());

  assertEquals("b",iterator.next());

  assertEquals("c",iterator.next());

  assertEquals("d",iterator.next());

  assertEquals(4,iterator.nextIndex());

  assertEquals(3,iterator.previousIndex());

  try {

    iterator=IteratorUtils.arrayListIterator(Integer.valueOf(0));

    fail("Expecting IllegalArgumentException");

  }

 catch (  final IllegalArgumentException ex) {

  }

  try {

    iterator=IteratorUtils.arrayListIterator((Object[])null);

    fail("Expecting NullPointerException");

  }

 catch (  final NullPointerException ex) {

  }

  iterator=IteratorUtils.arrayListIterator(objArray,1);

  assertEquals(-1,iterator.previousIndex());

  assertFalse(iterator.hasPrevious());

  assertEquals(0,iterator.nextIndex());

  assertEquals("b",iterator.next());

  assertEquals(0,iterator.previousIndex());

  try {

    iterator=IteratorUtils.arrayListIterator(objArray,-1);

    fail("Expecting IndexOutOfBoundsException.");

  }

 catch (  final IndexOutOfBoundsException ex) {

  }

  iterator=IteratorUtils.arrayListIterator(objArray,3);

  assertTrue(iterator.hasNext());

  try {

    iterator.previous();

    fail("Expecting NoSuchElementException.");

  }

 catch (  final NoSuchElementException ex) {

  }

  try {

    iterator=IteratorUtils.arrayListIterator(objArray,5);

    fail("Expecting IndexOutOfBoundsException.");

  }

 catch (  final IndexOutOfBoundsException ex) {

  }

  iterator=IteratorUtils.arrayListIterator(objArray,2,3);

  assertEquals("c",iterator.next());

  try {

    iterator=IteratorUtils.arrayListIterator(objArray,2,5);

    fail("Expecting IndexOutOfBoundsException");

  }

 catch (  final IndexOutOfBoundsException ex) {

  }

  try {

    iterator=IteratorUtils.arrayListIterator(objArray,-1,1);

    fail("Expecting IndexOutOfBoundsException");

  }

 catch (  final IndexOutOfBoundsException ex) {

  }

  try {

    iterator=IteratorUtils.arrayListIterator(objArray,2,1);

    fail("Expecting IllegalArgumentException");

  }

 catch (  final IllegalArgumentException ex) {

  }

  final int[] intArray={0,1,2};

  iterator=IteratorUtils.arrayListIterator(intArray);

  assertEquals(iterator.previousIndex(),-1);

  assertFalse(iterator.hasPrevious());

  assertEquals(0,iterator.nextIndex());

  assertEquals(0,iterator.next());

  assertEquals(0,iterator.previousIndex());

  assertEquals(1,iterator.nextIndex());

  assertEquals(1,iterator.next());

  assertEquals(1,iterator.previousIndex());

  assertEquals(2,iterator.nextIndex());

  assertEquals(1,iterator.previous());

  assertEquals(1,iterator.next());

  iterator=IteratorUtils.arrayListIterator(intArray,1);

  assertEquals(-1,iterator.previousIndex());

  assertFalse(iterator.hasPrevious());

  assertEquals(0,iterator.nextIndex());

  assertEquals(1,iterator.next());

  assertEquals(1,iterator.previous());

  assertEquals(1,iterator.next());

  assertEquals(0,iterator.previousIndex());

  assertEquals(1,iterator.nextIndex());

  assertEquals(2,iterator.next());

  assertEquals(1,iterator.previousIndex());

  assertEquals(2,iterator.nextIndex());

  assertEquals(2,iterator.previous());

  assertEquals(0,iterator.previousIndex());

  assertEquals(1,iterator.nextIndex());

  try {

    iterator=IteratorUtils.arrayListIterator(intArray,-1);

    fail("Expecting IndexOutOfBoundsException");

  }

 catch (  final IndexOutOfBoundsException ex) {

  }

  iterator=IteratorUtils.arrayListIterator(intArray,3);

  assertFalse(iterator.hasNext());

  try {

    iterator=IteratorUtils.arrayListIterator(intArray,4);

    fail("Expecting IndexOutOfBoundsException");

  }

 catch (  final IndexOutOfBoundsException ex) {

  }

  iterator=IteratorUtils.arrayListIterator(intArray,2,3);

  assertFalse(iterator.hasPrevious());

  assertEquals(-1,iterator.previousIndex());

  assertEquals(2,iterator.next());

  assertTrue(iterator.hasPrevious());

  assertFalse(iterator.hasNext());

  try {

    iterator=IteratorUtils.arrayListIterator(intArray,2,4);

    fail("Expecting IndexOutOfBoundsException");

  }

 catch (  final IndexOutOfBoundsException ex) {

  }

  try {

    iterator=IteratorUtils.arrayListIterator(intArray,-1,1);

    fail("Expecting IndexOutOfBoundsException");

  }

 catch (  final IndexOutOfBoundsException ex) {

  }

  try {

    iterator=IteratorUtils.arrayListIterator(intArray,2,1);

    fail("Expecting IllegalArgumentException");

  }

 catch (  final IllegalArgumentException ex) {

  }

}

Location: IteratorUtilsTest.java

Content: 

@Test public void testAsEnumerationNull(){

  assertThrows(NullPointerException.class,() -> IteratorUtils.asEnumeration(null));

}

Location: IteratorUtilsTest.java

Content: 

@Test public void testAsIterable(){

  final List<Integer> list=new ArrayList<>();

  list.add(Integer.valueOf(0));

  list.add(Integer.valueOf(1));

  list.add(Integer.valueOf(2));

  final Iterator<Integer> iterator=list.iterator();

  final Iterable<Integer> iterable=IteratorUtils.asIterable(iterator);

  int expected=0;

  for (  final Integer actual : iterable) {

    assertEquals(expected,actual.intValue());

    ++expected;

  }

  assertTrue(expected > 0);

  assertFalse(IteratorUtils.asIterable(iterator).iterator().hasNext(),"should not be able to iterate twice");

}

Location: IteratorUtilsTest.java

Content: 

@Test public void testAsIterableNull(){

  try {

    IteratorUtils.asIterable(null);

    fail("Expecting NullPointerException");

  }

 catch (  final NullPointerException ex) {

  }

}

Location: IteratorUtilsTest.java

Content: 

@Test public void testAsIterator(){

  final Vector<String> vector=new Vector<>();

  vector.addElement("zero");

  vector.addElement("one");

  final Enumeration<String> en=vector.elements();

  assertTrue(IteratorUtils.asIterator(en) instanceof Iterator,"create instance fail");

  assertThrows(NullPointerException.class,() -> IteratorUtils.asIterator(null));

}

Location: IteratorUtilsTest.java

Content: 

@Test public void testAsIteratorNull(){

  final Collection coll=new ArrayList();

  coll.add("test");

  final Vector<String> vector=new Vector<>();

  vector.addElement("test");

  vector.addElement("one");

  final Enumeration<String> en=vector.elements();

  assertTrue(IteratorUtils.asIterator(en,coll) instanceof Iterator,"create instance fail");

  try {

    IteratorUtils.asIterator(null,coll);

  }

 catch (  final NullPointerException npe) {

  }

  try {

    IteratorUtils.asIterator(en,null);

  }

 catch (  final NullPointerException npe) {

  }

}

Location: IteratorUtilsTest.java

Content: 

@Test public void testAsMultipleIterable(){

  final List<Integer> list=new ArrayList<>();

  list.add(Integer.valueOf(0));

  list.add(Integer.valueOf(1));

  list.add(Integer.valueOf(2));

  final Iterator<Integer> iterator=list.iterator();

  final Iterable<Integer> iterable=IteratorUtils.asMultipleUseIterable(iterator);

  int expected=0;

  for (  final Integer actual : iterable) {

    assertEquals(expected,actual.intValue());

    ++expected;

  }

  assertTrue(expected > 0);

  expected=0;

  for (  final Integer actual : iterable) {

    assertEquals(expected,actual.intValue());

    ++expected;

  }

  assertTrue(expected > 0);

}

Location: IteratorUtilsTest.java

Content: 

@Test public void testAsMultipleIterableNull(){

  try {

    IteratorUtils.asMultipleUseIterable(null);

    fail("Expecting NullPointerException");

  }

 catch (  final NullPointerException ex) {

  }

}

Location: IteratorUtilsTest.java

Content: 

@Test public void testChainedIterator(){

  final ArrayList arrayList=new ArrayList();

  final Iterator ie=arrayList.iterator();

  assertTrue(IteratorUtils.chainedIterator(ie) instanceof Iterator,"create instance fail");

  final Collection<Iterator<?>> coll=new ArrayList();

  assertTrue(IteratorUtils.chainedIterator(coll) instanceof Iterator,"create instance fail");

}

Location: IteratorUtilsTest.java

Content: 

/** 

 * Tests methods collatedIterator(...)

 */

@Test public void testCollatedIterator(){

  try {

    IteratorUtils.collatedIterator(null,collectionOdd.iterator(),null);

    fail("expecting NullPointerException");

  }

 catch (  final NullPointerException npe) {

  }

  try {

    IteratorUtils.collatedIterator(null,null,collectionEven.iterator());

    fail("expecting NullPointerException");

  }

 catch (  final NullPointerException npe) {

  }

  Iterator<Integer> it=IteratorUtils.collatedIterator(null,collectionOdd.iterator(),collectionEven.iterator());

  List<Integer> result=IteratorUtils.toList(it);

  assertEquals(12,result.size());

  final List<Integer> combinedList=new ArrayList<>(collectionOdd);

  combinedList.addAll(collectionEven);

  Collections.sort(combinedList);

  assertEquals(combinedList,result);

  it=IteratorUtils.collatedIterator(null,collectionOdd.iterator(),emptyCollection.iterator());

  result=IteratorUtils.toList(it);

  assertEquals(collectionOdd,result);

  final Comparator<Integer> reverseComparator=ComparatorUtils.reversedComparator(ComparatorUtils.<Integer>naturalComparator());

  Collections.reverse(collectionOdd);

  Collections.reverse(collectionEven);

  Collections.reverse(combinedList);

  it=IteratorUtils.collatedIterator(reverseComparator,collectionOdd.iterator(),collectionEven.iterator());

  result=IteratorUtils.toList(it);

  assertEquals(combinedList,result);

}

Location: IteratorUtilsTest.java

Content: 

@Test public void testCollatedIteratorCollectionNull(){

  final Collection<Iterator<?>> coll=new ArrayList<>();

  coll.add(collectionOdd.iterator());

  final Iterator<?> it=IteratorUtils.collatedIterator(null,coll);

  final List<?> result=IteratorUtils.toList(it);

  assertEquals(6,result.size());

  assertThrows(NullPointerException.class,() -> IteratorUtils.collatedIterator(null,(Collection<Iterator<?>>)null));

}

Location: IteratorUtilsTest.java

Content: 

@Test public void testCollatedIteratorNull(){

  final ArrayList arrayList=new ArrayList();

  Iterator<Integer> it=IteratorUtils.collatedIterator(null,collectionOdd.iterator(),collectionOdd.iterator(),collectionOdd.iterator());

  List<Integer> result=IteratorUtils.toList(it);

  assertEquals(18,result.size());

  it=IteratorUtils.collatedIterator(null,collectionOdd.iterator());

  result=IteratorUtils.toList(it);

  assertEquals(collectionOdd,result);

  final Comparator<Integer> reverseComparator=ComparatorUtils.reversedComparator(ComparatorUtils.<Integer>naturalComparator());

  Collections.reverse(collectionOdd);

  it=IteratorUtils.collatedIterator(reverseComparator,collectionOdd.iterator());

  result=IteratorUtils.toList(it);

  assertEquals(collectionOdd,result);

  assertThrows(NullPointerException.class,() -> IteratorUtils.collatedIterator(null,arrayList.iterator(),arrayList.listIterator(),null));

}

Location: IteratorUtilsTest.java

Content: 

/** 

 * Test empty list iterator

 */

@Test public void testEmptyListIterator(){

  assertSame(EmptyListIterator.INSTANCE,IteratorUtils.EMPTY_LIST_ITERATOR);

  assertSame(EmptyListIterator.RESETTABLE_INSTANCE,IteratorUtils.EMPTY_LIST_ITERATOR);

  assertTrue(IteratorUtils.EMPTY_LIST_ITERATOR instanceof Iterator);

  assertTrue(IteratorUtils.EMPTY_LIST_ITERATOR instanceof ListIterator);

  assertTrue(IteratorUtils.EMPTY_LIST_ITERATOR instanceof ResettableIterator);

  assertTrue(IteratorUtils.EMPTY_LIST_ITERATOR instanceof ResettableListIterator);

  assertFalse(IteratorUtils.EMPTY_LIST_ITERATOR instanceof MapIterator);

  assertFalse(IteratorUtils.EMPTY_LIST_ITERATOR.hasNext());

  assertEquals(0,IteratorUtils.EMPTY_LIST_ITERATOR.nextIndex());

  assertEquals(-1,IteratorUtils.EMPTY_LIST_ITERATOR.previousIndex());

  IteratorUtils.EMPTY_LIST_ITERATOR.reset();

  assertSame(IteratorUtils.EMPTY_LIST_ITERATOR,IteratorUtils.EMPTY_LIST_ITERATOR);

  assertSame(IteratorUtils.EMPTY_LIST_ITERATOR,IteratorUtils.emptyListIterator());

  try {

    IteratorUtils.EMPTY_LIST_ITERATOR.next();

    fail();

  }

 catch (  final NoSuchElementException ex) {

  }

  try {

    IteratorUtils.EMPTY_LIST_ITERATOR.previous();

    fail();

  }

 catch (  final NoSuchElementException ex) {

  }

  try {

    IteratorUtils.EMPTY_LIST_ITERATOR.remove();

    fail();

  }

 catch (  final IllegalStateException ex) {

  }

  try {

    IteratorUtils.emptyListIterator().set(null);

    fail();

  }

 catch (  final IllegalStateException ex) {

  }

  try {

    IteratorUtils.emptyListIterator().add(null);

    fail();

  }

 catch (  final UnsupportedOperationException ex) {

  }

}

Location: IteratorUtilsTest.java

Content: 

/** 

 * Test empty map iterator

 */

@Test @SuppressWarnings("unchecked") public void testEmptyOrderedIterator(){

  assertSame(EmptyOrderedIterator.INSTANCE,IteratorUtils.EMPTY_ORDERED_ITERATOR);

  assertTrue(IteratorUtils.EMPTY_ORDERED_ITERATOR instanceof Iterator);

  assertTrue(IteratorUtils.EMPTY_ORDERED_ITERATOR instanceof OrderedIterator);

  assertTrue(IteratorUtils.EMPTY_ORDERED_ITERATOR instanceof ResettableIterator);

  assertFalse(IteratorUtils.EMPTY_ORDERED_ITERATOR instanceof ListIterator);

  assertFalse(IteratorUtils.EMPTY_ORDERED_ITERATOR instanceof MapIterator);

  assertFalse(IteratorUtils.EMPTY_ORDERED_ITERATOR.hasNext());

  assertFalse(IteratorUtils.EMPTY_ORDERED_ITERATOR.hasPrevious());

  ((ResettableIterator<Object>)IteratorUtils.EMPTY_ORDERED_ITERATOR).reset();

  assertSame(IteratorUtils.EMPTY_ORDERED_ITERATOR,IteratorUtils.EMPTY_ORDERED_ITERATOR);

  assertSame(IteratorUtils.EMPTY_ORDERED_ITERATOR,IteratorUtils.emptyOrderedIterator());

  try {

    IteratorUtils.EMPTY_ORDERED_ITERATOR.next();

    fail();

  }

 catch (  final NoSuchElementException ex) {

  }

  try {

    IteratorUtils.EMPTY_ORDERED_ITERATOR.previous();

    fail();

  }

 catch (  final NoSuchElementException ex) {

  }

  try {

    IteratorUtils.EMPTY_ORDERED_ITERATOR.remove();

    fail();

  }

 catch (  final IllegalStateException ex) {

  }

}

Location: IteratorUtilsTest.java

Content: 

/** 

 * Test empty map iterator

 */

@Test @SuppressWarnings("unchecked") public void testEmptyOrderedMapIterator(){

  assertSame(EmptyOrderedMapIterator.INSTANCE,IteratorUtils.EMPTY_ORDERED_MAP_ITERATOR);

  assertTrue(IteratorUtils.EMPTY_ORDERED_MAP_ITERATOR instanceof Iterator);

  assertTrue(IteratorUtils.EMPTY_ORDERED_MAP_ITERATOR instanceof MapIterator);

  assertTrue(IteratorUtils.EMPTY_ORDERED_MAP_ITERATOR instanceof OrderedMapIterator);

  assertTrue(IteratorUtils.EMPTY_ORDERED_MAP_ITERATOR instanceof ResettableIterator);

  assertFalse(IteratorUtils.EMPTY_ORDERED_MAP_ITERATOR instanceof ListIterator);

  assertFalse(IteratorUtils.EMPTY_ORDERED_MAP_ITERATOR.hasNext());

  assertFalse(IteratorUtils.EMPTY_ORDERED_MAP_ITERATOR.hasPrevious());

  ((ResettableIterator<Object>)IteratorUtils.EMPTY_ORDERED_MAP_ITERATOR).reset();

  assertSame(IteratorUtils.EMPTY_ORDERED_MAP_ITERATOR,IteratorUtils.EMPTY_ORDERED_MAP_ITERATOR);

  assertSame(IteratorUtils.EMPTY_ORDERED_MAP_ITERATOR,IteratorUtils.emptyOrderedMapIterator());

  try {

    IteratorUtils.EMPTY_ORDERED_MAP_ITERATOR.next();

    fail();

  }

 catch (  final NoSuchElementException ex) {

  }

  try {

    IteratorUtils.EMPTY_ORDERED_MAP_ITERATOR.previous();

    fail();

  }

 catch (  final NoSuchElementException ex) {

  }

  try {

    IteratorUtils.EMPTY_ORDERED_MAP_ITERATOR.remove();

    fail();

  }

 catch (  final IllegalStateException ex) {

  }

  try {

    IteratorUtils.EMPTY_ORDERED_MAP_ITERATOR.getKey();

    fail();

  }

 catch (  final IllegalStateException ex) {

  }

  try {

    IteratorUtils.EMPTY_ORDERED_MAP_ITERATOR.getValue();

    fail();

  }

 catch (  final IllegalStateException ex) {

  }

  try {

    IteratorUtils.EMPTY_ORDERED_MAP_ITERATOR.setValue(null);

    fail();

  }

 catch (  final IllegalStateException ex) {

  }

}

Location: IteratorUtilsTest.java

Content: 

@Test public void testFilteredIterator(){

  final ArrayList arrayList=new ArrayList();

  final Iterator ie=arrayList.iterator();

  try {

    IteratorUtils.filteredIterator(ie,null);

  }

 catch (  final NullPointerException npe) {

  }

  try {

    IteratorUtils.filteredIterator(null,null);

  }

 catch (  final NullPointerException npe) {

  }

}

Location: IteratorUtilsTest.java

Content: 

@Test public void testFilteredListIterator(){

  final List arrayList=new ArrayList();

  arrayList.add("test");

  final Predicate predicate=INSTANCE;

  assertTrue(IteratorUtils.filteredListIterator(arrayList.listIterator(),predicate) instanceof ListIterator,"create instance fail");

  try {

    IteratorUtils.filteredListIterator(null,predicate);

  }

 catch (  final NullPointerException npe) {

  }

  try {

    IteratorUtils.filteredListIterator(arrayList.listIterator(),null);

  }

 catch (  final NullPointerException npe) {

  }

}

Location: IteratorUtilsTest.java

Content: 

@Test public void testFind(){

  Predicate<Number> testPredicate=equalPredicate((Number)4);

  Integer test=IteratorUtils.find(iterableA.iterator(),testPredicate);

  assertEquals(4,(int)test);

  testPredicate=equalPredicate((Number)45);

  test=IteratorUtils.find(iterableA.iterator(),testPredicate);

  assertNull(test);

  assertNull(IteratorUtils.find(null,testPredicate));

  try {

    assertNull(IteratorUtils.find(iterableA.iterator(),null));

    fail("expecting NullPointerException");

  }

 catch (  final NullPointerException npe) {

  }

}

Location: IteratorUtilsTest.java

Content: 

@Test public void testFirstFromIterator() throws Exception {

  final Iterator<Integer> iterator=iterableA.iterator();

  assertEquals(1,(int)IteratorUtils.first(iterator));

}

Location: IteratorUtilsTest.java

Content: 

@Test public void testForEachButLast(){

  final List<Integer> listA=new ArrayList<>();

  listA.add(1);

  final List<Integer> listB=new ArrayList<>();

  listB.add(2);

  final Closure<List<Integer>> testClosure=ClosureUtils.invokerClosure("clear");

  final Collection<List<Integer>> col=new ArrayList<>();

  col.add(listA);

  col.add(listB);

  List<Integer> last=IteratorUtils.forEachButLast(col.iterator(),testClosure);

  assertTrue(listA.isEmpty() && !listB.isEmpty());

  assertSame(listB,last);

  try {

    IteratorUtils.forEachButLast(col.iterator(),null);

    fail("expecting NullPointerException");

  }

 catch (  final NullPointerException npe) {

  }

  IteratorUtils.forEachButLast(null,testClosure);

  col.add(null);

  col.add(null);

  last=IteratorUtils.forEachButLast(col.iterator(),testClosure);

  assertNull(last);

}

Location: IteratorUtilsTest.java

Content: 

@Test public void testGetAtIndexFromIterator() throws Exception {

  Iterator<Integer> iterator=iterableA.iterator();

  assertEquals(1,(int)IteratorUtils.get(iterator,0));

  iterator=iterableA.iterator();

  assertEquals(2,(int)IteratorUtils.get(iterator,1));

  try {

    IteratorUtils.get(iterator,10);

    fail("Expecting IndexOutOfBoundsException.");

  }

 catch (  final IndexOutOfBoundsException e) {

  }

  assertFalse(iterator.hasNext());

}

Location: IteratorUtilsTest.java

Content: 

@Test public void testGetIterator(){

  final Object[] objArray={"a","b","c"};

  final Map<String,String> inMap=new HashMap<>();

  final Node[] nodes=createNodes();

  final NodeList nodeList=createNodeList(nodes);

  assertTrue(IteratorUtils.getIterator(null) instanceof EmptyIterator,"returns empty iterator when null passed");

  assertTrue(IteratorUtils.getIterator(iterableA.iterator()) instanceof Iterator,"returns Iterator when Iterator directly ");

  assertTrue(IteratorUtils.getIterator(iterableA) instanceof Iterator,"returns Iterator when iterable passed");

  assertTrue(IteratorUtils.getIterator(objArray) instanceof ObjectArrayIterator,"returns ObjectArrayIterator when Object array passed");

  assertTrue(IteratorUtils.getIterator(inMap) instanceof Iterator,"returns Iterator when Map passed");

  assertTrue(IteratorUtils.getIterator(nodeList) instanceof NodeListIterator,"returns NodeListIterator when nodeList passed");

  assertTrue(IteratorUtils.getIterator(new Vector().elements()) instanceof EnumerationIterator,"returns EnumerationIterator when Enumeration passed");

  final Node node1=createMock(Node.class);

  assertTrue(IteratorUtils.getIterator(node1) instanceof NodeListIterator,"returns NodeListIterator when nodeList passed");

  final Dictionary dic=createMock(Dictionary.class);

  assertTrue(IteratorUtils.getIterator(dic) instanceof EnumerationIterator,"returns EnumerationIterator when Dictionary passed");

  final int[] arr=new int[8];

  assertTrue(IteratorUtils.getIterator(arr) instanceof ArrayIterator,"returns ArrayIterator when array passed");

}

Location: IteratorUtilsTest.java

Content: 

@Test public void testLoopingIterator(){

  final ArrayList arrayList=new ArrayList();

  arrayList.add("test");

  final Collection coll=new ArrayList();

  coll.add("test");

  final Iterator ie=arrayList.iterator();

  assertTrue(IteratorUtils.loopingIterator(coll) instanceof ResettableIterator,"create instance fail");

  assertThrows(NullPointerException.class,() -> IteratorUtils.loopingIterator(null));

}

Location: IteratorUtilsTest.java

Content: 

@Test public void testLoopingListIterator(){

  final ArrayList arrayList=new ArrayList();

  arrayList.add("test");

  final Iterator ie=arrayList.iterator();

  assertTrue(IteratorUtils.loopingListIterator(arrayList) instanceof ResettableIterator,"create instance fail");

  assertThrows(NullPointerException.class,() -> IteratorUtils.loopingListIterator(null));

}

Location: IteratorUtilsTest.java

Content: 

/** 

 * Tests method nodeListIterator(Node)

 */

@Test public void testNodeIterator(){

  final Node[] nodes=createNodes();

  final NodeList nodeList=createNodeList(nodes);

  final Node parentNode=createMock(Node.class);

  expect(parentNode.getChildNodes()).andStubReturn(nodeList);

  replay(parentNode);

  final Iterator<Node> iterator=IteratorUtils.nodeListIterator(parentNode);

  int expectedNodeIndex=0;

  for (  final Node actual : IteratorUtils.asIterable(iterator)) {

    assertEquals(nodes[expectedNodeIndex],actual);

    ++expectedNodeIndex;

  }

  assertTrue(expectedNodeIndex > 0);

  assertFalse(IteratorUtils.asIterable(iterator).iterator().hasNext(),"should not be able to iterate twice");

  try {

    IteratorUtils.nodeListIterator((Node)null);

    fail("Expecting NullPointerException");

  }

 catch (  final NullPointerException ex) {

  }

}

Location: IteratorUtilsTest.java

Content: 

/** 

 * Tests method nodeListIterator(NodeList)

 */

@Test public void testNodeListIterator(){

  final Node[] nodes=createNodes();

  final NodeList nodeList=createNodeList(nodes);

  final Iterator<Node> iterator=IteratorUtils.nodeListIterator(nodeList);

  int expectedNodeIndex=0;

  for (  final Node actual : IteratorUtils.asIterable(iterator)) {

    assertEquals(nodes[expectedNodeIndex],actual);

    ++expectedNodeIndex;

  }

  assertTrue(expectedNodeIndex > 0);

  assertFalse(IteratorUtils.asIterable(iterator).iterator().hasNext(),"should not be able to iterate twice");

  try {

    IteratorUtils.nodeListIterator((NodeList)null);

    fail("Expecting NullPointerException");

  }

 catch (  final NullPointerException ex) {

  }

}

Location: IteratorUtilsTest.java

Content: 

@Test public void testObjectGraphIterator(){

  assertTrue(IteratorUtils.objectGraphIterator(null,null) instanceof Iterator,"create instance fail");

}

Location: IteratorUtilsTest.java

Content: 

@Test public void testPeekingIterator(){

  final ArrayList arrayList=new ArrayList();

  final Iterator ie=arrayList.iterator();

  assertTrue(IteratorUtils.peekingIterator(ie) instanceof Iterator,"create instance fail");

  assertThrows(NullPointerException.class,() -> IteratorUtils.peekingIterator(null));

}

Location: IteratorUtilsTest.java

Content: 

@Test public void testPushBackIterator(){

  final ArrayList arrayList=new ArrayList();

  final Iterator ie=arrayList.iterator();

  assertTrue(IteratorUtils.pushbackIterator(ie) instanceof Iterator,"create instance fail");

  assertThrows(NullPointerException.class,() -> IteratorUtils.pushbackIterator(null));

}

Location: IteratorUtilsTest.java

Content: 

@Test public void testSingletonIterator(){

  assertTrue(IteratorUtils.singletonIterator(new Object()) instanceof ResettableIterator,"create instance fail");

}

Location: IteratorUtilsTest.java

Content: 

@Test public void testSingletonListIterator(){

  assertTrue(IteratorUtils.singletonListIterator(new Object()) instanceof Iterator,"create instance fail");

}

Location: IteratorUtilsTest.java

Content: 

@Test public void testToArray2(){

  final List<String> list=new ArrayList<>();

  list.add("One");

  list.add("Two");

  list.add(null);

  final String[] result=IteratorUtils.toArray(list.iterator(),String.class);

  assertEquals(list,Arrays.asList(result));

  try {

    IteratorUtils.toArray(list.iterator(),null);

    fail("Expecting NullPointerException");

  }

 catch (  final NullPointerException ex) {

  }

  try {

    IteratorUtils.toArray(null,String.class);

    fail("Expecting NullPointerException");

  }

 catch (  final NullPointerException ex) {

  }

}

Location: IteratorUtilsTest.java

Content: 

@Test public void testToList(){

  final List<Object> list=new ArrayList<>();

  list.add(Integer.valueOf(1));

  list.add("Two");

  list.add(null);

  final List<Object> result=IteratorUtils.toList(list.iterator());

  assertEquals(list,result);

  try {

    IteratorUtils.toList(null,10);

    fail("Expecting NullPointerException");

  }

 catch (  final NullPointerException ex) {

  }

  try {

    IteratorUtils.toList(list.iterator(),-1);

    fail("Expecting IllegalArgumentException");

  }

 catch (  final IllegalArgumentException ex) {

  }

}

Location: IteratorUtilsTest.java

Content: 

@Test public void testToListIterator(){

  final List<Integer> list=new ArrayList<>();

  list.add(Integer.valueOf(0));

  list.add(Integer.valueOf(1));

  list.add(Integer.valueOf(2));

  final Iterator<Integer> iterator=list.iterator();

  final ListIterator<Integer> liItr=IteratorUtils.toListIterator(iterator);

  int expected=0;

  while (liItr.hasNext()) {

    assertEquals(expected,liItr.next().intValue());

    ++expected;

  }

}

Location: IteratorUtilsTest.java

Content: 

@Test public void testToListIteratorNull(){

  try {

    IteratorUtils.toListIterator(null);

    fail("Expecting NullPointerException");

  }

 catch (  final NullPointerException ex) {

  }

}

Location: IteratorUtilsTest.java

Content: 

@Test public void testTransformedIterator(){

  final ArrayList arrayList=new ArrayList();

  final Iterator ie=arrayList.iterator();

  try {

    IteratorUtils.transformedIterator(ie,null);

  }

 catch (  final NullPointerException npe) {

  }

  try {

    IteratorUtils.transformedIterator(null,null);

  }

 catch (  final NullPointerException npe) {

  }

}

Location: IteratorUtilsTest.java

Content: 

/** 

 * Test remove() for an immutable Iterator.

 */

@Test public void testUnmodifiableIteratorImmutability(){

  final Iterator<String> iterator=getImmutableIterator();

  try {

    iterator.remove();

    fail("remove() should throw an UnsupportedOperationException");

  }

 catch (  final UnsupportedOperationException e) {

  }

  iterator.next();

  try {

    iterator.remove();

    fail("remove() should throw an UnsupportedOperationException");

  }

 catch (  final UnsupportedOperationException e) {

  }

}

Location: IteratorUtilsTest.java

Content: 

/** 

 * Test next() and hasNext() for an immutable Iterator.

 */

@Test public void testUnmodifiableIteratorIteration(){

  final Iterator<String> iterator=getImmutableIterator();

  assertTrue(iterator.hasNext());

  assertEquals("a",iterator.next());

  assertTrue(iterator.hasNext());

  assertEquals("b",iterator.next());

  assertTrue(iterator.hasNext());

  assertEquals("c",iterator.next());

  assertTrue(iterator.hasNext());

  assertEquals("d",iterator.next());

  assertFalse(iterator.hasNext());

}

Location: IteratorUtilsTest.java

Content: 

/** 

 * Test remove() for an immutable ListIterator.

 */

@Test public void testUnmodifiableListIteratorImmutability(){

  final ListIterator<String> listIterator=getImmutableListIterator();

  try {

    listIterator.remove();

    fail("remove() should throw an UnsupportedOperationException");

  }

 catch (  final UnsupportedOperationException e) {

  }

  try {

    listIterator.set("a");

    fail("set(Object) should throw an UnsupportedOperationException");

  }

 catch (  final UnsupportedOperationException e) {

  }

  try {

    listIterator.add("a");

    fail("add(Object) should throw an UnsupportedOperationException");

  }

 catch (  final UnsupportedOperationException e) {

  }

  listIterator.next();

  try {

    listIterator.remove();

    fail("remove() should throw an UnsupportedOperationException");

  }

 catch (  final UnsupportedOperationException e) {

  }

  try {

    listIterator.set("a");

    fail("set(Object) should throw an UnsupportedOperationException");

  }

 catch (  final UnsupportedOperationException e) {

  }

  try {

    listIterator.add("a");

    fail("add(Object) should throw an UnsupportedOperationException");

  }

 catch (  final UnsupportedOperationException e) {

  }

}

Location: IteratorUtilsTest.java

Content: 

/** 

 * Test next(), hasNext(), previous() and hasPrevious() for an immutable ListIterator.

 */

@Test public void testUnmodifiableListIteratorIteration(){

  final ListIterator<String> listIterator=getImmutableListIterator();

  assertFalse(listIterator.hasPrevious());

  assertTrue(listIterator.hasNext());

  assertEquals("a",listIterator.next());

  assertTrue(listIterator.hasPrevious());

  assertTrue(listIterator.hasNext());

  assertEquals("b",listIterator.next());

  assertTrue(listIterator.hasPrevious());

  assertTrue(listIterator.hasNext());

  assertEquals("c",listIterator.next());

  assertTrue(listIterator.hasPrevious());

  assertTrue(listIterator.hasNext());

  assertEquals("d",listIterator.next());

  assertTrue(listIterator.hasPrevious());

  assertFalse(listIterator.hasNext());

  assertEquals("d",listIterator.previous());

  assertTrue(listIterator.hasPrevious());

  assertTrue(listIterator.hasNext());

  assertEquals("c",listIterator.previous());

  assertTrue(listIterator.hasPrevious());

  assertTrue(listIterator.hasNext());

  assertEquals("b",listIterator.previous());

  assertTrue(listIterator.hasPrevious());

  assertTrue(listIterator.hasNext());

  assertEquals("a",listIterator.previous());

  assertFalse(listIterator.hasPrevious());

  assertTrue(listIterator.hasNext());

}

Location: IteratorUtilsTest.java

Content: 

@Test public void testZippingIterator(){

  final ArrayList arrayList=new ArrayList();

  final Iterator ie=arrayList.iterator();

  assertTrue(IteratorUtils.zippingIterator(ie,ie,ie) instanceof ZippingIterator,"create instance fail");

  assertTrue(IteratorUtils.zippingIterator(ie,ie) instanceof ZippingIterator,"create instance fail");

}

