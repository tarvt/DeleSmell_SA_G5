Location: IteratorIterableTest.java

Content: 

private Iterator<Integer> createIterator(){

  final List<Integer> list=new ArrayList<>();

  list.add(Integer.valueOf(0));

  list.add(Integer.valueOf(1));

  list.add(Integer.valueOf(2));

  final Iterator<Integer> iter=list.iterator();

  return iter;

}

Location: IteratorIterableTest.java

Content: 

public IteratorIterableTest(final String name){

  super(name);

}

Location: IteratorIterableTest.java

Content: 

public void testMultipleUserIterator(){

  final Iterator<Integer> iter=createIterator();

  final Iterable<Number> iterable=new IteratorIterable<>(iter,true);

  verifyIteration(iterable);

  verifyIteration(iterable);

}

Location: IteratorIterableTest.java

Content: 

private void verifyIteration(final Iterable<Number> iterable){

  int expected=0;

  for (  final Number actual : iterable) {

    assertEquals(expected,actual.intValue());

    ++expected;

  }

  assertTrue(expected > 0);

}

Location: IteratorIterableTest.java

Content: 

private Iterator<Integer> createIterator(){

  final List<Integer> list=new ArrayList<>();

  list.add(Integer.valueOf(0));

  list.add(Integer.valueOf(1));

  list.add(Integer.valueOf(2));

  final Iterator<Integer> iter=list.iterator();

  return iter;

}

Location: IteratorIterableTest.java

Content: 

public IteratorIterableTest(final String name){

  super(name);

}

Location: IteratorIterableTest.java

Content: 

public void testMultipleUserIterator(){

  final Iterator<Integer> iter=createIterator();

  final Iterable<Number> iterable=new IteratorIterable<>(iter,true);

  verifyIteration(iterable);

  verifyIteration(iterable);

}

Location: IteratorIterableTest.java

Content: 

private void verifyIteration(final Iterable<Number> iterable){

  int expected=0;

  for (  final Number actual : iterable) {

    assertEquals(expected,actual.intValue());

    ++expected;

  }

  assertTrue(expected > 0);

}

