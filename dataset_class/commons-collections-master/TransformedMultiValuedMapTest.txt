Location: TransformedMultiValuedMapTest.java

Content: 

@SuppressWarnings("unchecked") public void testFactory_Decorate(){

  final MultiValuedMap<K,V> base=new ArrayListValuedHashMap<>();

  base.put((K)"A",(V)"1");

  base.put((K)"B",(V)"2");

  base.put((K)"C",(V)"3");

  final MultiValuedMap<K,V> trans=TransformedMultiValuedMap.transformingMap(base,null,(Transformer<? super V,? extends V>)TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER);

  assertEquals(3,trans.size());

  assertTrue(trans.get((K)"A").contains("1"));

  assertTrue(trans.get((K)"B").contains("2"));

  assertTrue(trans.get((K)"C").contains("3"));

  trans.put((K)"D",(V)"4");

  assertTrue(trans.get((K)"D").contains(Integer.valueOf(4)));

}

Location: TransformedMultiValuedMapTest.java

Content: 

@SuppressWarnings("unchecked") public void testFactory_decorateTransform(){

  final MultiValuedMap<K,V> base=new ArrayListValuedHashMap<>();

  base.put((K)"A",(V)"1");

  base.put((K)"B",(V)"2");

  base.put((K)"C",(V)"3");

  final MultiValuedMap<K,V> trans=TransformedMultiValuedMap.transformedMap(base,null,(Transformer<? super V,? extends V>)TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER);

  assertEquals(3,trans.size());

  assertTrue(trans.get((K)"A").contains(Integer.valueOf(1)));

  assertTrue(trans.get((K)"B").contains(Integer.valueOf(2)));

  assertTrue(trans.get((K)"C").contains(Integer.valueOf(3)));

  trans.put((K)"D",(V)"4");

  assertTrue(trans.get((K)"D").contains(Integer.valueOf(4)));

  final MultiValuedMap<K,V> baseMap=new ArrayListValuedHashMap<>();

  final MultiValuedMap<K,V> transMap=TransformedMultiValuedMap.transformedMap(baseMap,null,(Transformer<? super V,? extends V>)TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER);

  assertEquals(0,transMap.size());

  transMap.put((K)"D",(V)"4");

  assertEquals(1,transMap.size());

  assertTrue(transMap.get((K)"D").contains(Integer.valueOf(4)));

}

Location: TransformedMultiValuedMapTest.java

Content: 

@SuppressWarnings("unchecked") public void testKeyTransformedMap(){

  final Object[] els=new Object[]{"1","3","5","7","2","4","6"};

  final MultiValuedMap<K,V> map=TransformedMultiValuedMap.transformingMap(new ArrayListValuedHashMap<K,V>(),(Transformer<? super K,? extends K>)TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER,null);

  assertEquals(0,map.size());

  for (int i=0; i < els.length; i++) {

    map.put((K)els[i],(V)els[i]);

    assertEquals(i + 1,map.size());

    assertTrue(map.containsKey(Integer.valueOf((String)els[i])));

    assertFalse(map.containsKey(els[i]));

    assertTrue(map.containsValue(els[i]));

    assertTrue(map.get((K)Integer.valueOf((String)els[i])).contains(els[i]));

  }

  final Collection<V> coll=map.remove(els[0]);

  assertNotNull(coll);

  assertEquals(0,coll.size());

  assertTrue(map.remove(Integer.valueOf((String)els[0])).contains(els[0]));

}

Location: TransformedMultiValuedMapTest.java

Content: 

@SuppressWarnings("unchecked") public void testValueTransformedMap(){

  final Object[] els=new Object[]{"1","3","5","7","2","4","6"};

  final MultiValuedMap<K,V> map=TransformedMultiValuedMap.transformingMap(new ArrayListValuedHashMap<K,V>(),null,(Transformer<? super V,? extends V>)TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER);

  assertEquals(0,map.size());

  for (int i=0; i < els.length; i++) {

    map.put((K)els[i],(V)els[i]);

    assertEquals(i + 1,map.size());

    assertTrue(map.containsValue(Integer.valueOf((String)els[i])));

    assertFalse(map.containsValue(els[i]));

    assertTrue(map.containsKey(els[i]));

    assertTrue(map.get((K)els[i]).contains(Integer.valueOf((String)els[i])));

  }

  assertTrue(map.remove(els[0]).contains(Integer.valueOf((String)els[0])));

}

Location: TransformedMultiValuedMapTest.java

Content: 

public TransformedMultiValuedMapTest(final String testName){

  super(testName);

}

Location: TransformedMultiValuedMapTest.java

Content: 

@SuppressWarnings("unchecked") public void testFactory_Decorate(){

  final MultiValuedMap<K,V> base=new ArrayListValuedHashMap<>();

  base.put((K)"A",(V)"1");

  base.put((K)"B",(V)"2");

  base.put((K)"C",(V)"3");

  final MultiValuedMap<K,V> trans=TransformedMultiValuedMap.transformingMap(base,null,(Transformer<? super V,? extends V>)TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER);

  assertEquals(3,trans.size());

  assertTrue(trans.get((K)"A").contains("1"));

  assertTrue(trans.get((K)"B").contains("2"));

  assertTrue(trans.get((K)"C").contains("3"));

  trans.put((K)"D",(V)"4");

  assertTrue(trans.get((K)"D").contains(Integer.valueOf(4)));

}

Location: TransformedMultiValuedMapTest.java

Content: 

@SuppressWarnings("unchecked") public void testFactory_decorateTransform(){

  final MultiValuedMap<K,V> base=new ArrayListValuedHashMap<>();

  base.put((K)"A",(V)"1");

  base.put((K)"B",(V)"2");

  base.put((K)"C",(V)"3");

  final MultiValuedMap<K,V> trans=TransformedMultiValuedMap.transformedMap(base,null,(Transformer<? super V,? extends V>)TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER);

  assertEquals(3,trans.size());

  assertTrue(trans.get((K)"A").contains(Integer.valueOf(1)));

  assertTrue(trans.get((K)"B").contains(Integer.valueOf(2)));

  assertTrue(trans.get((K)"C").contains(Integer.valueOf(3)));

  trans.put((K)"D",(V)"4");

  assertTrue(trans.get((K)"D").contains(Integer.valueOf(4)));

  final MultiValuedMap<K,V> baseMap=new ArrayListValuedHashMap<>();

  final MultiValuedMap<K,V> transMap=TransformedMultiValuedMap.transformedMap(baseMap,null,(Transformer<? super V,? extends V>)TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER);

  assertEquals(0,transMap.size());

  transMap.put((K)"D",(V)"4");

  assertEquals(1,transMap.size());

  assertTrue(transMap.get((K)"D").contains(Integer.valueOf(4)));

}

Location: TransformedMultiValuedMapTest.java

Content: 

@SuppressWarnings("unchecked") public void testKeyTransformedMap(){

  final Object[] els=new Object[]{"1","3","5","7","2","4","6"};

  final MultiValuedMap<K,V> map=TransformedMultiValuedMap.transformingMap(new ArrayListValuedHashMap<K,V>(),(Transformer<? super K,? extends K>)TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER,null);

  assertEquals(0,map.size());

  for (int i=0; i < els.length; i++) {

    map.put((K)els[i],(V)els[i]);

    assertEquals(i + 1,map.size());

    assertTrue(map.containsKey(Integer.valueOf((String)els[i])));

    assertFalse(map.containsKey(els[i]));

    assertTrue(map.containsValue(els[i]));

    assertTrue(map.get((K)Integer.valueOf((String)els[i])).contains(els[i]));

  }

  final Collection<V> coll=map.remove(els[0]);

  assertNotNull(coll);

  assertEquals(0,coll.size());

  assertTrue(map.remove(Integer.valueOf((String)els[0])).contains(els[0]));

}

Location: TransformedMultiValuedMapTest.java

Content: 

@SuppressWarnings("unchecked") public void testValueTransformedMap(){

  final Object[] els=new Object[]{"1","3","5","7","2","4","6"};

  final MultiValuedMap<K,V> map=TransformedMultiValuedMap.transformingMap(new ArrayListValuedHashMap<K,V>(),null,(Transformer<? super V,? extends V>)TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER);

  assertEquals(0,map.size());

  for (int i=0; i < els.length; i++) {

    map.put((K)els[i],(V)els[i]);

    assertEquals(i + 1,map.size());

    assertTrue(map.containsValue(Integer.valueOf((String)els[i])));

    assertFalse(map.containsValue(els[i]));

    assertTrue(map.containsKey(els[i]));

    assertTrue(map.get((K)els[i]).contains(Integer.valueOf((String)els[i])));

  }

  assertTrue(map.remove(els[0]).contains(Integer.valueOf((String)els[0])));

}

Location: TransformedMultiValuedMapTest.java

Content: 

public TransformedMultiValuedMapTest(final String testName){

  super(testName);

}

