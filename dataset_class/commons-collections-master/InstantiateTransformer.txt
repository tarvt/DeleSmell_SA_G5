Location: InstantiateTransformer.java

Content: 

/** 

 * Constructor for no arg instance.

 */

private InstantiateTransformer(){

  iParamTypes=null;

  iArgs=null;

}

Location: InstantiateTransformer.java

Content: 

/** 

 * Constructor that performs no validation. Use  {@code instantiateTransformer} if you want that.<p> Note: from 4.0, the input parameters will be cloned

 * @param paramTypes  the constructor parameter types

 * @param args  the constructor arguments

 */

public InstantiateTransformer(final Class<?>[] paramTypes,final Object[] args){

  iParamTypes=paramTypes != null ? paramTypes.clone() : null;

  iArgs=args != null ? args.clone() : null;

}

Location: InstantiateTransformer.java

Content: 

/** 

 * Transforms the input Class object to a result by instantiation.

 * @param input  the input object to transform

 * @return the transformed result

 */

@Override public T transform(final Class<? extends T> input){

  try {

    if (input == null) {

      throw new FunctorException("InstantiateTransformer: Input object was not an instanceof Class, it was a null object");

    }

    final Constructor<? extends T> con=input.getConstructor(iParamTypes);

    return con.newInstance(iArgs);

  }

 catch (  final NoSuchMethodException ex) {

    throw new FunctorException("InstantiateTransformer: The constructor must exist and be public ");

  }

catch (  final InstantiationException ex) {

    throw new FunctorException("InstantiateTransformer: InstantiationException",ex);

  }

catch (  final IllegalAccessException ex) {

    throw new FunctorException("InstantiateTransformer: Constructor must be public",ex);

  }

catch (  final InvocationTargetException ex) {

    throw new FunctorException("InstantiateTransformer: Constructor threw an exception",ex);

  }

}

Location: InstantiateTransformer.java

Content: 

/** 

 * Constructor for no arg instance.

 */

private InstantiateTransformer(){

  iParamTypes=null;

  iArgs=null;

}

Location: InstantiateTransformer.java

Content: 

/** 

 * Constructor that performs no validation. Use  {@code instantiateTransformer} if you want that.<p> Note: from 4.0, the input parameters will be cloned

 * @param paramTypes  the constructor parameter types

 * @param args  the constructor arguments

 */

public InstantiateTransformer(final Class<?>[] paramTypes,final Object[] args){

  iParamTypes=paramTypes != null ? paramTypes.clone() : null;

  iArgs=args != null ? args.clone() : null;

}

Location: InstantiateTransformer.java

Content: 

/** 

 * Transforms the input Class object to a result by instantiation.

 * @param input  the input object to transform

 * @return the transformed result

 */

@Override public T transform(final Class<? extends T> input){

  try {

    if (input == null) {

      throw new FunctorException("InstantiateTransformer: Input object was not an instanceof Class, it was a null object");

    }

    final Constructor<? extends T> con=input.getConstructor(iParamTypes);

    return con.newInstance(iArgs);

  }

 catch (  final NoSuchMethodException ex) {

    throw new FunctorException("InstantiateTransformer: The constructor must exist and be public ");

  }

catch (  final InstantiationException ex) {

    throw new FunctorException("InstantiateTransformer: InstantiationException",ex);

  }

catch (  final IllegalAccessException ex) {

    throw new FunctorException("InstantiateTransformer: Constructor must be public",ex);

  }

catch (  final InvocationTargetException ex) {

    throw new FunctorException("InstantiateTransformer: Constructor threw an exception",ex);

  }

}

