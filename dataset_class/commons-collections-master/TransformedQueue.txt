Location: TransformedQueue.java

Content: 

@Override public E element(){

  return getQueue().element();

}

Location: TransformedQueue.java

Content: 

/** 

 * Gets the decorated queue.

 * @return the decorated queue

 */

protected Queue<E> getQueue(){

  return (Queue<E>)decorated();

}

Location: TransformedQueue.java

Content: 

@Override public boolean offer(final E obj){

  return getQueue().offer(transform(obj));

}

Location: TransformedQueue.java

Content: 

@Override public E peek(){

  return getQueue().peek();

}

Location: TransformedQueue.java

Content: 

@Override public E poll(){

  return getQueue().poll();

}

Location: TransformedQueue.java

Content: 

@Override public E remove(){

  return getQueue().remove();

}

Location: TransformedQueue.java

Content: 

/** 

 * Constructor that wraps (not copies). <p> If there are any elements already in the queue being decorated, they are NOT transformed.

 * @param queue  the queue to decorate, must not be null

 * @param transformer  the transformer to use for conversion, must not be null

 * @throws NullPointerException if queue or transformer is null

 */

protected TransformedQueue(final Queue<E> queue,final Transformer<? super E,? extends E> transformer){

  super(queue,transformer);

}

Location: TransformedQueue.java

Content: 

/** 

 * Factory method to create a transforming queue. <p> If there are any elements already in the queue being decorated, they are NOT transformed. Contrast this with  {@link #transformedQueue(Queue,Transformer)}.

 * @param < E > the type of the elements in the queue

 * @param queue  the queue to decorate, must not be null

 * @param transformer  the transformer to use for conversion, must not be null

 * @return a new transformed Queue

 * @throws NullPointerException if queue or transformer is null

 */

public static <E>TransformedQueue<E> transformingQueue(final Queue<E> queue,final Transformer<? super E,? extends E> transformer){

  return new TransformedQueue<>(queue,transformer);

}

Location: TransformedQueue.java

Content: 

@Override public E element(){

  return getQueue().element();

}

Location: TransformedQueue.java

Content: 

/** 

 * Gets the decorated queue.

 * @return the decorated queue

 */

protected Queue<E> getQueue(){

  return (Queue<E>)decorated();

}

Location: TransformedQueue.java

Content: 

@Override public boolean offer(final E obj){

  return getQueue().offer(transform(obj));

}

Location: TransformedQueue.java

Content: 

@Override public E peek(){

  return getQueue().peek();

}

Location: TransformedQueue.java

Content: 

@Override public E poll(){

  return getQueue().poll();

}

Location: TransformedQueue.java

Content: 

@Override public E remove(){

  return getQueue().remove();

}

Location: TransformedQueue.java

Content: 

/** 

 * Constructor that wraps (not copies). <p> If there are any elements already in the queue being decorated, they are NOT transformed.

 * @param queue  the queue to decorate, must not be null

 * @param transformer  the transformer to use for conversion, must not be null

 * @throws NullPointerException if queue or transformer is null

 */

protected TransformedQueue(final Queue<E> queue,final Transformer<? super E,? extends E> transformer){

  super(queue,transformer);

}

Location: TransformedQueue.java

Content: 

/** 

 * Factory method to create a transforming queue. <p> If there are any elements already in the queue being decorated, they are NOT transformed. Contrast this with  {@link #transformedQueue(Queue,Transformer)}.

 * @param < E > the type of the elements in the queue

 * @param queue  the queue to decorate, must not be null

 * @param transformer  the transformer to use for conversion, must not be null

 * @return a new transformed Queue

 * @throws NullPointerException if queue or transformer is null

 */

public static <E>TransformedQueue<E> transformingQueue(final Queue<E> queue,final Transformer<? super E,? extends E> transformer){

  return new TransformedQueue<>(queue,transformer);

}

