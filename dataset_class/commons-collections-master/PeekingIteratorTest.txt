Location: PeekingIteratorTest.java

Content: 

public PeekingIteratorTest(final String testName){

  super(testName);

}

Location: PeekingIteratorTest.java

Content: 

@Test public void testEmpty(){

  final Iterator<E> it=makeEmptyIterator();

  assertFalse(it.hasNext());

}

Location: PeekingIteratorTest.java

Content: 

@Test public void testIllegalRemove(){

  final PeekingIterator<E> it=makeObject();

  it.next();

  it.remove();

  assertTrue(it.hasNext());

  assertEquals("b",it.peek());

  try {

    it.remove();

    fail();

  }

 catch (  final IllegalStateException e) {

  }

}

Location: PeekingIteratorTest.java

Content: 

@Test public void testIteratorExhausted(){

  final PeekingIterator<E> it=makeObject();

  it.next();

  it.next();

  it.next();

  assertFalse(it.hasNext());

  assertNull(it.peek());

  try {

    it.element();

    fail();

  }

 catch (  final NoSuchElementException e) {

  }

}

Location: PeekingIteratorTest.java

Content: 

@Test public void testMultiplePeek(){

  final PeekingIterator<E> it=makeObject();

  assertEquals("a",it.peek());

  assertEquals("a",it.peek());

  assertEquals("a",it.next());

  assertTrue(it.hasNext());

  assertEquals("b",it.peek());

  assertEquals("b",it.peek());

  assertEquals("b",it.next());

  assertTrue(it.hasNext());

  assertEquals("c",it.peek());

  assertEquals("c",it.peek());

  assertEquals("c",it.next());

  assertFalse(it.hasNext());

}

Location: PeekingIteratorTest.java

Content: 

@Test @SuppressWarnings("unchecked") public void testSinglePeek(){

  final PeekingIterator<E> it=makeObject();

  assertEquals("a",it.peek());

  assertEquals("a",it.element());

  validate(it,(E[])testArray);

}

Location: PeekingIteratorTest.java

Content: 

private void validate(final Iterator<E> iter,final E... items){

  for (  final E x : items) {

    assertTrue(iter.hasNext());

    assertEquals(x,iter.next());

  }

  assertFalse(iter.hasNext());

}

Location: PeekingIteratorTest.java

Content: 

public PeekingIteratorTest(final String testName){

  super(testName);

}

Location: PeekingIteratorTest.java

Content: 

@Test public void testEmpty(){

  final Iterator<E> it=makeEmptyIterator();

  assertFalse(it.hasNext());

}

Location: PeekingIteratorTest.java

Content: 

@Test public void testIllegalRemove(){

  final PeekingIterator<E> it=makeObject();

  it.next();

  it.remove();

  assertTrue(it.hasNext());

  assertEquals("b",it.peek());

  try {

    it.remove();

    fail();

  }

 catch (  final IllegalStateException e) {

  }

}

Location: PeekingIteratorTest.java

Content: 

@Test public void testIteratorExhausted(){

  final PeekingIterator<E> it=makeObject();

  it.next();

  it.next();

  it.next();

  assertFalse(it.hasNext());

  assertNull(it.peek());

  try {

    it.element();

    fail();

  }

 catch (  final NoSuchElementException e) {

  }

}

Location: PeekingIteratorTest.java

Content: 

@Test public void testMultiplePeek(){

  final PeekingIterator<E> it=makeObject();

  assertEquals("a",it.peek());

  assertEquals("a",it.peek());

  assertEquals("a",it.next());

  assertTrue(it.hasNext());

  assertEquals("b",it.peek());

  assertEquals("b",it.peek());

  assertEquals("b",it.next());

  assertTrue(it.hasNext());

  assertEquals("c",it.peek());

  assertEquals("c",it.peek());

  assertEquals("c",it.next());

  assertFalse(it.hasNext());

}

Location: PeekingIteratorTest.java

Content: 

@Test @SuppressWarnings("unchecked") public void testSinglePeek(){

  final PeekingIterator<E> it=makeObject();

  assertEquals("a",it.peek());

  assertEquals("a",it.element());

  validate(it,(E[])testArray);

}

Location: PeekingIteratorTest.java

Content: 

private void validate(final Iterator<E> iter,final E... items){

  for (  final E x : items) {

    assertTrue(iter.hasNext());

    assertEquals(x,iter.next());

  }

  assertFalse(iter.hasNext());

}

