Location: FilterIterator.java

Content: 

/** 

 * Constructs a new  {@code FilterIterator} that will not functionuntil  {@link #setIterator(Iterator) setIterator} is invoked.

 */

public FilterIterator(){

}

Location: FilterIterator.java

Content: 

/** 

 * Constructs a new  {@code FilterIterator} that will not functionuntil  {@link #setPredicate(Predicate) setPredicate} is invoked.

 * @param iterator  the iterator to use

 */

public FilterIterator(final Iterator<? extends E> iterator){

  this.iterator=iterator;

}

Location: FilterIterator.java

Content: 

/** 

 * Constructs a new  {@code FilterIterator} that will use thegiven iterator and predicate.

 * @param iterator  the iterator to use

 * @param predicate  the predicate to use

 */

public FilterIterator(final Iterator<? extends E> iterator,final Predicate<? super E> predicate){

  this.iterator=iterator;

  this.predicate=predicate;

}

Location: FilterIterator.java

Content: 

/** 

 * Sets the iterator for this iterator to use. If iteration has started, this effectively resets the iterator.

 * @param iterator  the iterator to use

 */

public void setIterator(final Iterator<? extends E> iterator){

  this.iterator=iterator;

  nextObject=null;

  nextObjectSet=false;

}

Location: FilterIterator.java

Content: 

/** 

 * Set nextObject to the next object. If there are no more objects then return false. Otherwise, return true.

 */

private boolean setNextObject(){

  while (iterator.hasNext()) {

    final E object=iterator.next();

    if (predicate.evaluate(object)) {

      nextObject=object;

      nextObjectSet=true;

      return true;

    }

  }

  return false;

}

Location: FilterIterator.java

Content: 

/** 

 * Sets the predicate this the iterator to use.

 * @param predicate  the predicate to use

 */

public void setPredicate(final Predicate<? super E> predicate){

  this.predicate=predicate;

  nextObject=null;

  nextObjectSet=false;

}

Location: FilterIterator.java

Content: 

/** 

 * Constructs a new  {@code FilterIterator} that will not functionuntil  {@link #setIterator(Iterator) setIterator} is invoked.

 */

public FilterIterator(){

}

Location: FilterIterator.java

Content: 

/** 

 * Constructs a new  {@code FilterIterator} that will not functionuntil  {@link #setPredicate(Predicate) setPredicate} is invoked.

 * @param iterator  the iterator to use

 */

public FilterIterator(final Iterator<? extends E> iterator){

  this.iterator=iterator;

}

Location: FilterIterator.java

Content: 

/** 

 * Constructs a new  {@code FilterIterator} that will use thegiven iterator and predicate.

 * @param iterator  the iterator to use

 * @param predicate  the predicate to use

 */

public FilterIterator(final Iterator<? extends E> iterator,final Predicate<? super E> predicate){

  this.iterator=iterator;

  this.predicate=predicate;

}

Location: FilterIterator.java

Content: 

/** 

 * Sets the iterator for this iterator to use. If iteration has started, this effectively resets the iterator.

 * @param iterator  the iterator to use

 */

public void setIterator(final Iterator<? extends E> iterator){

  this.iterator=iterator;

  nextObject=null;

  nextObjectSet=false;

}

Location: FilterIterator.java

Content: 

/** 

 * Set nextObject to the next object. If there are no more objects then return false. Otherwise, return true.

 */

private boolean setNextObject(){

  while (iterator.hasNext()) {

    final E object=iterator.next();

    if (predicate.evaluate(object)) {

      nextObject=object;

      nextObjectSet=true;

      return true;

    }

  }

  return false;

}

Location: FilterIterator.java

Content: 

/** 

 * Sets the predicate this the iterator to use.

 * @param predicate  the predicate to use

 */

public void setPredicate(final Predicate<? super E> predicate){

  this.predicate=predicate;

  nextObject=null;

  nextObjectSet=false;

}

