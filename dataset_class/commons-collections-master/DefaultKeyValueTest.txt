Location: DefaultKeyValueTest.java

Content: 

/** 

 * Make an instance of DefaultKeyValue with the default (null) key and value. Subclasses should override this method to return a DefaultKeyValue of the type being tested.

 */

protected DefaultKeyValue<K,V> makeDefaultKeyValue(){

  return new DefaultKeyValue<>(null,null);

}

Location: DefaultKeyValueTest.java

Content: 

/** 

 * Make an instance of DefaultKeyValue with the specified key and value. Subclasses should override this method to return a DefaultKeyValue of the type being tested.

 */

protected DefaultKeyValue<K,V> makeDefaultKeyValue(final K key,final V value){

  return new DefaultKeyValue<>(key,value);

}

Location: DefaultKeyValueTest.java

Content: 

@SuppressWarnings("unchecked") @Test public void testToMapEntry(){

  final DefaultKeyValue<K,V> kv=makeDefaultKeyValue((K)key,(V)value);

  final Map<K,V> map=new HashMap<>();

  map.put(kv.getKey(),kv.getValue());

  final Map.Entry<K,V> entry=map.entrySet().iterator().next();

  assertEquals(entry,kv.toMapEntry());

  assertEquals(entry.hashCode(),kv.hashCode());

}

Location: DefaultKeyValueTest.java

Content: 

/** 

 * Make an instance of DefaultKeyValue with the default (null) key and value. Subclasses should override this method to return a DefaultKeyValue of the type being tested.

 */

protected DefaultKeyValue<K,V> makeDefaultKeyValue(){

  return new DefaultKeyValue<>(null,null);

}

Location: DefaultKeyValueTest.java

Content: 

/** 

 * Make an instance of DefaultKeyValue with the specified key and value. Subclasses should override this method to return a DefaultKeyValue of the type being tested.

 */

protected DefaultKeyValue<K,V> makeDefaultKeyValue(final K key,final V value){

  return new DefaultKeyValue<>(key,value);

}

Location: DefaultKeyValueTest.java

Content: 

@SuppressWarnings("unchecked") @Test public void testToMapEntry(){

  final DefaultKeyValue<K,V> kv=makeDefaultKeyValue((K)key,(V)value);

  final Map<K,V> map=new HashMap<>();

  map.put(kv.getKey(),kv.getValue());

  final Map.Entry<K,V> entry=map.entrySet().iterator().next();

  assertEquals(entry,kv.toMapEntry());

  assertEquals(entry.hashCode(),kv.hashCode());

}

