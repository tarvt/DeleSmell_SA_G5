Location: ObjectArrayIterator.java

Content: 

/** 

 * Gets the array that this iterator is iterating over.

 * @return the array this iterator iterates over

 */

public E[] getArray(){

  return this.array;

}

Location: ObjectArrayIterator.java

Content: 

/** 

 * Gets the end index to loop to.

 * @return the end index

 */

public int getEndIndex(){

  return this.endIndex;

}

Location: ObjectArrayIterator.java

Content: 

/** 

 * Gets the start index to loop from.

 * @return the start index

 */

public int getStartIndex(){

  return this.startIndex;

}

Location: ObjectArrayIterator.java

Content: 

/** 

 * Constructs an ObjectArrayIterator that will iterate over the values in the specified array.

 * @param array the array to iterate over

 * @throws NullPointerException if {@code array} is {@code null}

 */

public ObjectArrayIterator(final E... array){

  this(array,0,array.length);

}

Location: ObjectArrayIterator.java

Content: 

/** 

 * Constructs an ObjectArrayIterator that will iterate over the values in the specified array from a specific start index.

 * @param array  the array to iterate over

 * @param start  the index to start iterating at

 * @throws NullPointerException if {@code array} is {@code null}

 * @throws IndexOutOfBoundsException if the start index is out of bounds

 */

public ObjectArrayIterator(final E array[],final int start){

  this(array,start,array.length);

}

Location: ObjectArrayIterator.java

Content: 

/** 

 * Construct an ObjectArrayIterator that will iterate over a range of values in the specified array.

 * @param array  the array to iterate over

 * @param start  the index to start iterating at

 * @param end  the index (exclusive) to finish iterating at

 * @throws IndexOutOfBoundsException if the start or end index is out of bounds

 * @throws IllegalArgumentException if end index is before the start

 * @throws NullPointerException if {@code array} is {@code null}

 */

public ObjectArrayIterator(final E array[],final int start,final int end){

  if (start < 0) {

    throw new ArrayIndexOutOfBoundsException("Start index must not be less than zero");

  }

  if (end > array.length) {

    throw new ArrayIndexOutOfBoundsException("End index must not be greater than the array length");

  }

  if (start > array.length) {

    throw new ArrayIndexOutOfBoundsException("Start index must not be greater than the array length");

  }

  if (end < start) {

    throw new IllegalArgumentException("End index must not be less than start index");

  }

  this.array=array;

  this.startIndex=start;

  this.endIndex=end;

  this.index=start;

}

Location: ObjectArrayIterator.java

Content: 

/** 

 * Gets the array that this iterator is iterating over.

 * @return the array this iterator iterates over

 */

public E[] getArray(){

  return this.array;

}

Location: ObjectArrayIterator.java

Content: 

/** 

 * Gets the end index to loop to.

 * @return the end index

 */

public int getEndIndex(){

  return this.endIndex;

}

Location: ObjectArrayIterator.java

Content: 

/** 

 * Gets the start index to loop from.

 * @return the start index

 */

public int getStartIndex(){

  return this.startIndex;

}

Location: ObjectArrayIterator.java

Content: 

/** 

 * Constructs an ObjectArrayIterator that will iterate over the values in the specified array.

 * @param array the array to iterate over

 * @throws NullPointerException if {@code array} is {@code null}

 */

public ObjectArrayIterator(final E... array){

  this(array,0,array.length);

}

Location: ObjectArrayIterator.java

Content: 

/** 

 * Constructs an ObjectArrayIterator that will iterate over the values in the specified array from a specific start index.

 * @param array  the array to iterate over

 * @param start  the index to start iterating at

 * @throws NullPointerException if {@code array} is {@code null}

 * @throws IndexOutOfBoundsException if the start index is out of bounds

 */

public ObjectArrayIterator(final E array[],final int start){

  this(array,start,array.length);

}

Location: ObjectArrayIterator.java

Content: 

/** 

 * Construct an ObjectArrayIterator that will iterate over a range of values in the specified array.

 * @param array  the array to iterate over

 * @param start  the index to start iterating at

 * @param end  the index (exclusive) to finish iterating at

 * @throws IndexOutOfBoundsException if the start or end index is out of bounds

 * @throws IllegalArgumentException if end index is before the start

 * @throws NullPointerException if {@code array} is {@code null}

 */

public ObjectArrayIterator(final E array[],final int start,final int end){

  if (start < 0) {

    throw new ArrayIndexOutOfBoundsException("Start index must not be less than zero");

  }

  if (end > array.length) {

    throw new ArrayIndexOutOfBoundsException("End index must not be greater than the array length");

  }

  if (start > array.length) {

    throw new ArrayIndexOutOfBoundsException("Start index must not be greater than the array length");

  }

  if (end < start) {

    throw new IllegalArgumentException("End index must not be less than start index");

  }

  this.array=array;

  this.startIndex=start;

  this.endIndex=end;

  this.index=start;

}

