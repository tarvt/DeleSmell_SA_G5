Location: SingletonIterator.java

Content: 

/** 

 * Constructs a new  {@code SingletonIterator} where {@code remove}is a permitted operation.

 * @param object  the single object to return from the iterator

 */

public SingletonIterator(final E object){

  this(object,true);

}

Location: SingletonIterator.java

Content: 

/** 

 * Constructs a new  {@code SingletonIterator} optionally choosing if{@code remove} is a permitted operation.

 * @param object  the single object to return from the iterator

 * @param removeAllowed  true if remove is allowed

 * @since 3.1

 */

public SingletonIterator(final E object,final boolean removeAllowed){

  this.object=object;

  this.removeAllowed=removeAllowed;

}

Location: SingletonIterator.java

Content: 

/** 

 * Constructs a new  {@code SingletonIterator} where {@code remove}is a permitted operation.

 * @param object  the single object to return from the iterator

 */

public SingletonIterator(final E object){

  this(object,true);

}

Location: SingletonIterator.java

Content: 

/** 

 * Constructs a new  {@code SingletonIterator} optionally choosing if{@code remove} is a permitted operation.

 * @param object  the single object to return from the iterator

 * @param removeAllowed  true if remove is allowed

 * @since 3.1

 */

public SingletonIterator(final E object,final boolean removeAllowed){

  this.object=object;

  this.removeAllowed=removeAllowed;

}

