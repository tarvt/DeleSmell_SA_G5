Location: EntrySetToMapIteratorAdapter.java

Content: 

/** 

 * Get the currently active entry.

 * @return Map.Entry&lt;K, V&gt;

 */

protected synchronized Map.Entry<K,V> current(){

  if (entry == null) {

    throw new IllegalStateException();

  }

  return entry;

}

Location: EntrySetToMapIteratorAdapter.java

Content: 

/** 

 * Create a new EntrySetToMapIteratorAdapter.

 * @param entrySet  the entrySet to adapt

 */

public EntrySetToMapIteratorAdapter(final Set<Map.Entry<K,V>> entrySet){

  this.entrySet=entrySet;

  reset();

}

Location: EntrySetToMapIteratorAdapter.java

Content: 

/** 

 * {@inheritDoc}

 */

@Override public boolean hasNext(){

  return iterator.hasNext();

}

Location: EntrySetToMapIteratorAdapter.java

Content: 

/** 

 * {@inheritDoc}

 */

@Override public K next(){

  entry=iterator.next();

  return getKey();

}

Location: EntrySetToMapIteratorAdapter.java

Content: 

/** 

 * {@inheritDoc}

 */

@Override public synchronized void reset(){

  iterator=entrySet.iterator();

}

Location: EntrySetToMapIteratorAdapter.java

Content: 

/** 

 * Get the currently active entry.

 * @return Map.Entry&lt;K, V&gt;

 */

protected synchronized Map.Entry<K,V> current(){

  if (entry == null) {

    throw new IllegalStateException();

  }

  return entry;

}

Location: EntrySetToMapIteratorAdapter.java

Content: 

/** 

 * Create a new EntrySetToMapIteratorAdapter.

 * @param entrySet  the entrySet to adapt

 */

public EntrySetToMapIteratorAdapter(final Set<Map.Entry<K,V>> entrySet){

  this.entrySet=entrySet;

  reset();

}

Location: EntrySetToMapIteratorAdapter.java

Content: 

/** 

 * {@inheritDoc}

 */

@Override public boolean hasNext(){

  return iterator.hasNext();

}

Location: EntrySetToMapIteratorAdapter.java

Content: 

/** 

 * {@inheritDoc}

 */

@Override public K next(){

  entry=iterator.next();

  return getKey();

}

Location: EntrySetToMapIteratorAdapter.java

Content: 

/** 

 * {@inheritDoc}

 */

@Override public synchronized void reset(){

  iterator=entrySet.iterator();

}

