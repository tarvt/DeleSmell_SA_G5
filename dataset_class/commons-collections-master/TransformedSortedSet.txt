Location: TransformedSortedSet.java

Content: 

@Override public E first(){

  return getSortedSet().first();

}

Location: TransformedSortedSet.java

Content: 

/** 

 * Gets the decorated set.

 * @return the decorated set

 */

protected SortedSet<E> getSortedSet(){

  return (SortedSet<E>)decorated();

}

Location: TransformedSortedSet.java

Content: 

@Override public E last(){

  return getSortedSet().last();

}

Location: TransformedSortedSet.java

Content: 

/** 

 * Constructor that wraps (not copies). <p> If there are any elements already in the set being decorated, they are NOT transformed.

 * @param set  the set to decorate, must not be null

 * @param transformer  the transformer to use for conversion, must not be null

 * @throws NullPointerException if set or transformer is null

 */

protected TransformedSortedSet(final SortedSet<E> set,final Transformer<? super E,? extends E> transformer){

  super(set,transformer);

}

Location: TransformedSortedSet.java

Content: 

/** 

 * Factory method to create a transforming sorted set. <p> If there are any elements already in the set being decorated, they are NOT transformed. Contrast this with  {@link #transformedSortedSet(SortedSet,Transformer)}.

 * @param < E > the element type

 * @param set  the set to decorate, must not be null

 * @param transformer  the transformer to use for conversion, must not be null

 * @return a new transformed {@link SortedSet}

 * @throws NullPointerException if set or transformer is null

 * @since 4.0

 */

public static <E>TransformedSortedSet<E> transformingSortedSet(final SortedSet<E> set,final Transformer<? super E,? extends E> transformer){

  return new TransformedSortedSet<>(set,transformer);

}

Location: TransformedSortedSet.java

Content: 

@Override public E first(){

  return getSortedSet().first();

}

Location: TransformedSortedSet.java

Content: 

/** 

 * Gets the decorated set.

 * @return the decorated set

 */

protected SortedSet<E> getSortedSet(){

  return (SortedSet<E>)decorated();

}

Location: TransformedSortedSet.java

Content: 

@Override public E last(){

  return getSortedSet().last();

}

Location: TransformedSortedSet.java

Content: 

/** 

 * Constructor that wraps (not copies). <p> If there are any elements already in the set being decorated, they are NOT transformed.

 * @param set  the set to decorate, must not be null

 * @param transformer  the transformer to use for conversion, must not be null

 * @throws NullPointerException if set or transformer is null

 */

protected TransformedSortedSet(final SortedSet<E> set,final Transformer<? super E,? extends E> transformer){

  super(set,transformer);

}

Location: TransformedSortedSet.java

Content: 

/** 

 * Factory method to create a transforming sorted set. <p> If there are any elements already in the set being decorated, they are NOT transformed. Contrast this with  {@link #transformedSortedSet(SortedSet,Transformer)}.

 * @param < E > the element type

 * @param set  the set to decorate, must not be null

 * @param transformer  the transformer to use for conversion, must not be null

 * @return a new transformed {@link SortedSet}

 * @throws NullPointerException if set or transformer is null

 * @since 4.0

 */

public static <E>TransformedSortedSet<E> transformingSortedSet(final SortedSet<E> set,final Transformer<? super E,? extends E> transformer){

  return new TransformedSortedSet<>(set,transformer);

}

