Location: CompositeMapTest.java

Content: 

public CompositeMapTest(final String testName){

  super(testName);

}

Location: CompositeMapTest.java

Content: 

@SuppressWarnings("unchecked") public void testRemoveFromComposited(){

  final CompositeMap<K,V> map=new CompositeMap<>(buildOne(),buildTwo());

  final HashMap<K,V> three=new HashMap<>();

  three.put((K)"5",(V)"five");

  map.addComposited(null);

  map.addComposited(three);

  assertTrue(map.containsKey("5"));

  map.remove("5");

  assertFalse(three.containsKey("5"));

}

Location: CompositeMapTest.java

Content: 

@SuppressWarnings("unchecked") public void testRemoveFromUnderlying(){

  final CompositeMap<K,V> map=new CompositeMap<>(buildOne(),buildTwo());

  final HashMap<K,V> three=new HashMap<>();

  three.put((K)"5",(V)"five");

  map.addComposited(null);

  map.addComposited(three);

  assertTrue(map.containsKey("5"));

  three.remove("5");

  assertFalse(map.containsKey("5"));

}

Location: CompositeMapTest.java

Content: 

public void testResolveCollision(){

  final CompositeMap<K,V> map=new CompositeMap<>(buildOne(),buildTwo(),new CompositeMap.MapMutator<K,V>(){

    private static final long serialVersionUID=1L;

    @Override public void resolveCollision(    final CompositeMap<K,V> composite,    final Map<K,V> existing,    final Map<K,V> added,    final Collection<K> intersect){

      pass=true;

    }

    @Override public V put(    final CompositeMap<K,V> map,    final Map<K,V>[] composited,    final K key,    final V value){

      throw new UnsupportedOperationException();

    }

    @Override public void putAll(    final CompositeMap<K,V> map,    final Map<K,V>[] composited,    final Map<? extends K,? extends V> t){

      throw new UnsupportedOperationException();

    }

  }

);

  map.addComposited(buildOne());

  assertTrue(pass);

}

Location: CompositeMapTest.java

Content: 

public CompositeMapTest(final String testName){

  super(testName);

}

Location: CompositeMapTest.java

Content: 

@SuppressWarnings("unchecked") public void testRemoveFromComposited(){

  final CompositeMap<K,V> map=new CompositeMap<>(buildOne(),buildTwo());

  final HashMap<K,V> three=new HashMap<>();

  three.put((K)"5",(V)"five");

  map.addComposited(null);

  map.addComposited(three);

  assertTrue(map.containsKey("5"));

  map.remove("5");

  assertFalse(three.containsKey("5"));

}

Location: CompositeMapTest.java

Content: 

@SuppressWarnings("unchecked") public void testRemoveFromUnderlying(){

  final CompositeMap<K,V> map=new CompositeMap<>(buildOne(),buildTwo());

  final HashMap<K,V> three=new HashMap<>();

  three.put((K)"5",(V)"five");

  map.addComposited(null);

  map.addComposited(three);

  assertTrue(map.containsKey("5"));

  three.remove("5");

  assertFalse(map.containsKey("5"));

}

Location: CompositeMapTest.java

Content: 

public void testResolveCollision(){

  final CompositeMap<K,V> map=new CompositeMap<>(buildOne(),buildTwo(),new CompositeMap.MapMutator<K,V>(){

    private static final long serialVersionUID=1L;

    @Override public void resolveCollision(    final CompositeMap<K,V> composite,    final Map<K,V> existing,    final Map<K,V> added,    final Collection<K> intersect){

      pass=true;

    }

    @Override public V put(    final CompositeMap<K,V> map,    final Map<K,V>[] composited,    final K key,    final V value){

      throw new UnsupportedOperationException();

    }

    @Override public void putAll(    final CompositeMap<K,V> map,    final Map<K,V>[] composited,    final Map<? extends K,? extends V> t){

      throw new UnsupportedOperationException();

    }

  }

);

  map.addComposited(buildOne());

  assertTrue(pass);

}

