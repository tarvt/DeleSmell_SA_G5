Location: AbstractAvailableLocalesTest.java

Content: 

public AbstractAvailableLocalesTest(final Locale locale){

  this.locale=locale;

  this.rule=new SetDefaultLocaleTestRule(locale);

}

Location: AbstractAvailableLocalesTest.java

Content: 

public Locale getLocale(){

  return locale;

}

Location: AbstractAvailableLocalesTest.java

Content: 

@Parameters(name="{0}") public static Locale[] getSortedAvailableLocales(){

  final Locale[] availableLocales=Locale.getAvailableLocales();

  Arrays.sort(availableLocales,new ObjectToStringComparator());

  return availableLocales;

}

Location: AbstractAvailableLocalesTest.java

Content: 

public static List<Locale> getSortedDeclaredLocales(){

  final Field[] allFields=FieldUtils.getAllFields(Locale.class);

  final List<Locale> availableLocales=new ArrayList<>(allFields.length);

  for (  final Field field : allFields) {

    final int modifiers=field.getModifiers();

    if (field.getType() == Locale.class && Modifier.isStatic(modifiers) && Modifier.isPublic(modifiers)) {

      try {

        availableLocales.add((Locale)field.get(Locale.class));

      }

 catch (      final IllegalArgumentException|IllegalAccessException e) {

        throw new IllegalStateException("Field " + field,e);

      }

    }

  }

  Collections.sort(availableLocales,new ObjectToStringComparator());

  return availableLocales;

}

Location: AbstractAvailableLocalesTest.java

Content: 

public AbstractAvailableLocalesTest(final Locale locale){

  this.locale=locale;

  this.rule=new SetDefaultLocaleTestRule(locale);

}

Location: AbstractAvailableLocalesTest.java

Content: 

public Locale getLocale(){

  return locale;

}

Location: AbstractAvailableLocalesTest.java

Content: 

@Parameters(name="{0}") public static Locale[] getSortedAvailableLocales(){

  final Locale[] availableLocales=Locale.getAvailableLocales();

  Arrays.sort(availableLocales,new ObjectToStringComparator());

  return availableLocales;

}

Location: AbstractAvailableLocalesTest.java

Content: 

public static List<Locale> getSortedDeclaredLocales(){

  final Field[] allFields=FieldUtils.getAllFields(Locale.class);

  final List<Locale> availableLocales=new ArrayList<>(allFields.length);

  for (  final Field field : allFields) {

    final int modifiers=field.getModifiers();

    if (field.getType() == Locale.class && Modifier.isStatic(modifiers) && Modifier.isPublic(modifiers)) {

      try {

        availableLocales.add((Locale)field.get(Locale.class));

      }

 catch (      final IllegalArgumentException|IllegalAccessException e) {

        throw new IllegalStateException("Field " + field,e);

      }

    }

  }

  Collections.sort(availableLocales,new ObjectToStringComparator());

  return availableLocales;

}

