Location: DefaultedMapTest.java

Content: 

public DefaultedMapTest(final String testName){

  super(testName);

}

Location: DefaultedMapTest.java

Content: 

public void testFactoryMethods(){

  final HashMap<K,V> base=new HashMap<>();

  try {

    DefaultedMap.defaultedMap(null,(V)"DEFAULT_VALUE");

    fail("Expecting NullPointerException");

  }

 catch (  final NullPointerException e) {

  }

  try {

    DefaultedMap.defaultedMap((Map<K,V>)null,nullFactory);

    fail("Expecting NullPointerException");

  }

 catch (  final NullPointerException e) {

  }

  try {

    DefaultedMap.defaultedMap(base,(Factory<V>)null);

    fail("Expecting NullPointerException");

  }

 catch (  final NullPointerException e) {

  }

  try {

    DefaultedMap.defaultedMap((Map<K,V>)null,nullTransformer);

    fail("Expecting NullPointerException");

  }

 catch (  final NullPointerException e) {

  }

  try {

    DefaultedMap.defaultedMap(base,(Transformer<K,V>)null);

    fail("Expecting NullPointerException");

  }

 catch (  final NullPointerException e) {

  }

}

Location: DefaultedMapTest.java

Content: 

@SuppressWarnings("unchecked") public void testMapGet2(){

  final HashMap<K,V> base=new HashMap<>();

  final Map<K,V> map=DefaultedMap.defaultedMap(base,(V)"NULL");

  assertEquals(0,map.size());

  assertEquals(0,base.size());

  assertFalse(map.containsKey("NotInMap"));

  assertEquals("NULL",map.get("NotInMap"));

  map.put((K)"Key",(V)"Value");

  assertEquals(1,map.size());

  assertEquals(1,base.size());

  assertTrue(map.containsKey("Key"));

  assertEquals("Value",map.get("Key"));

  assertFalse(map.containsKey("NotInMap"));

  assertEquals("NULL",map.get("NotInMap"));

}

Location: DefaultedMapTest.java

Content: 

@SuppressWarnings("unchecked") public void testMapGet3(){

  final HashMap<K,V> base=new HashMap<>();

  final Map<K,V> map=DefaultedMap.defaultedMap(base,ConstantFactory.constantFactory((V)"NULL"));

  assertEquals(0,map.size());

  assertEquals(0,base.size());

  assertFalse(map.containsKey("NotInMap"));

  assertEquals("NULL",map.get("NotInMap"));

  map.put((K)"Key",(V)"Value");

  assertEquals(1,map.size());

  assertEquals(1,base.size());

  assertTrue(map.containsKey("Key"));

  assertEquals("Value",map.get("Key"));

  assertFalse(map.containsKey("NotInMap"));

  assertEquals("NULL",map.get("NotInMap"));

}

Location: DefaultedMapTest.java

Content: 

@SuppressWarnings("unchecked") public void testMapGet4(){

  final HashMap<K,V> base=new HashMap<>();

  final Map<K,V> map=DefaultedMap.defaultedMap(base,(Transformer<K,V>)input -> {

    if (input instanceof String) {

      return (V)"NULL";

    }

    return (V)"NULL_OBJECT";

  }

);

  assertEquals(0,map.size());

  assertEquals(0,base.size());

  assertFalse(map.containsKey("NotInMap"));

  assertEquals("NULL",map.get("NotInMap"));

  assertEquals("NULL_OBJECT",map.get(Integer.valueOf(0)));

  map.put((K)"Key",(V)"Value");

  assertEquals(1,map.size());

  assertEquals(1,base.size());

  assertTrue(map.containsKey("Key"));

  assertEquals("Value",map.get("Key"));

  assertFalse(map.containsKey("NotInMap"));

  assertEquals("NULL",map.get("NotInMap"));

  assertEquals("NULL_OBJECT",map.get(Integer.valueOf(0)));

}

Location: DefaultedMapTest.java

Content: 

public DefaultedMapTest(final String testName){

  super(testName);

}

Location: DefaultedMapTest.java

Content: 

public void testFactoryMethods(){

  final HashMap<K,V> base=new HashMap<>();

  try {

    DefaultedMap.defaultedMap(null,(V)"DEFAULT_VALUE");

    fail("Expecting NullPointerException");

  }

 catch (  final NullPointerException e) {

  }

  try {

    DefaultedMap.defaultedMap((Map<K,V>)null,nullFactory);

    fail("Expecting NullPointerException");

  }

 catch (  final NullPointerException e) {

  }

  try {

    DefaultedMap.defaultedMap(base,(Factory<V>)null);

    fail("Expecting NullPointerException");

  }

 catch (  final NullPointerException e) {

  }

  try {

    DefaultedMap.defaultedMap((Map<K,V>)null,nullTransformer);

    fail("Expecting NullPointerException");

  }

 catch (  final NullPointerException e) {

  }

  try {

    DefaultedMap.defaultedMap(base,(Transformer<K,V>)null);

    fail("Expecting NullPointerException");

  }

 catch (  final NullPointerException e) {

  }

}

Location: DefaultedMapTest.java

Content: 

@SuppressWarnings("unchecked") public void testMapGet2(){

  final HashMap<K,V> base=new HashMap<>();

  final Map<K,V> map=DefaultedMap.defaultedMap(base,(V)"NULL");

  assertEquals(0,map.size());

  assertEquals(0,base.size());

  assertFalse(map.containsKey("NotInMap"));

  assertEquals("NULL",map.get("NotInMap"));

  map.put((K)"Key",(V)"Value");

  assertEquals(1,map.size());

  assertEquals(1,base.size());

  assertTrue(map.containsKey("Key"));

  assertEquals("Value",map.get("Key"));

  assertFalse(map.containsKey("NotInMap"));

  assertEquals("NULL",map.get("NotInMap"));

}

Location: DefaultedMapTest.java

Content: 

@SuppressWarnings("unchecked") public void testMapGet3(){

  final HashMap<K,V> base=new HashMap<>();

  final Map<K,V> map=DefaultedMap.defaultedMap(base,ConstantFactory.constantFactory((V)"NULL"));

  assertEquals(0,map.size());

  assertEquals(0,base.size());

  assertFalse(map.containsKey("NotInMap"));

  assertEquals("NULL",map.get("NotInMap"));

  map.put((K)"Key",(V)"Value");

  assertEquals(1,map.size());

  assertEquals(1,base.size());

  assertTrue(map.containsKey("Key"));

  assertEquals("Value",map.get("Key"));

  assertFalse(map.containsKey("NotInMap"));

  assertEquals("NULL",map.get("NotInMap"));

}

Location: DefaultedMapTest.java

Content: 

@SuppressWarnings("unchecked") public void testMapGet4(){

  final HashMap<K,V> base=new HashMap<>();

  final Map<K,V> map=DefaultedMap.defaultedMap(base,(Transformer<K,V>)input -> {

    if (input instanceof String) {

      return (V)"NULL";

    }

    return (V)"NULL_OBJECT";

  }

);

  assertEquals(0,map.size());

  assertEquals(0,base.size());

  assertFalse(map.containsKey("NotInMap"));

  assertEquals("NULL",map.get("NotInMap"));

  assertEquals("NULL_OBJECT",map.get(Integer.valueOf(0)));

  map.put((K)"Key",(V)"Value");

  assertEquals(1,map.size());

  assertEquals(1,base.size());

  assertTrue(map.containsKey("Key"));

  assertEquals("Value",map.get("Key"));

  assertFalse(map.containsKey("NotInMap"));

  assertEquals("NULL",map.get("NotInMap"));

  assertEquals("NULL_OBJECT",map.get(Integer.valueOf(0)));

}

