Location: TransformedListTest.java

Content: 

public void testSubList(){

  final List<E> list=makeObject();

  List<E> subList=list.subList(0,0);

  assertNotNull(subList);

  list.add((E)"zero");

  subList=list.subList(0,0);

  assertNotNull(subList);

  assertEquals(0,subList.size());

  subList=list.subList(0,1);

  assertEquals(1,subList.size());

  final List<E> elements=new ArrayList<>();

  elements.add((E)"one");

  elements.add((E)"two");

  elements.add((E)"three");

  list.addAll(1,elements);

  subList=list.subList(0,list.size());

  assertEquals(list.size(),subList.size());

}

Location: TransformedListTest.java

Content: 

@SuppressWarnings("unchecked") public void testTransformedList(){

  final List<E> list=TransformedList.transformingList(new ArrayList<E>(),(Transformer<E,E>)TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER);

  assertEquals(0,list.size());

  final E[] els=(E[])new Object[]{"1","3","5","7","2","4","6"};

  for (int i=0; i < els.length; i++) {

    list.add(els[i]);

    assertEquals(i + 1,list.size());

    assertTrue(list.contains(Integer.valueOf((String)els[i])));

    assertFalse(list.contains(els[i]));

  }

  assertFalse(list.remove(els[0]));

  assertTrue(list.remove(Integer.valueOf((String)els[0])));

  list.clear();

  for (int i=0; i < els.length; i++) {

    list.add(0,els[i]);

    assertEquals(i + 1,list.size());

    assertEquals(Integer.valueOf((String)els[i]),list.get(0));

  }

  list.set(0,(E)"22");

  assertEquals(Integer.valueOf(22),list.get(0));

  final ListIterator<E> it=list.listIterator();

  it.next();

  it.set((E)"33");

  assertEquals(Integer.valueOf(33),list.get(0));

  it.add((E)"44");

  assertEquals(Integer.valueOf(44),list.get(1));

  final List<E> adds=new ArrayList<>();

  adds.add((E)"1");

  adds.add((E)"2");

  list.clear();

  list.addAll(adds);

  assertEquals(Integer.valueOf(1),list.get(0));

  assertEquals(Integer.valueOf(2),list.get(1));

  adds.clear();

  adds.add((E)"3");

  list.addAll(1,adds);

  assertEquals(Integer.valueOf(1),list.get(0));

  assertEquals(Integer.valueOf(3),list.get(1));

  assertEquals(Integer.valueOf(2),list.get(2));

}

Location: TransformedListTest.java

Content: 

public void testTransformedList_decorateTransform(){

  final List<Object> originalList=new ArrayList<>();

  final Object[] els=new Object[]{"1","3","5","7","2","4","6"};

  for (  final Object el : els) {

    originalList.add(el);

  }

  final List<?> list=TransformedList.transformedList(originalList,TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER);

  assertEquals(els.length,list.size());

  for (  final Object el : els) {

    assertTrue(list.contains(Integer.valueOf((String)el)));

    assertFalse(list.contains(el));

  }

  assertFalse(list.remove(els[0]));

  assertTrue(list.remove(Integer.valueOf((String)els[0])));

}

Location: TransformedListTest.java

Content: 

public TransformedListTest(final String testName){

  super(testName);

}

Location: TransformedListTest.java

Content: 

public void testSubList(){

  final List<E> list=makeObject();

  List<E> subList=list.subList(0,0);

  assertNotNull(subList);

  list.add((E)"zero");

  subList=list.subList(0,0);

  assertNotNull(subList);

  assertEquals(0,subList.size());

  subList=list.subList(0,1);

  assertEquals(1,subList.size());

  final List<E> elements=new ArrayList<>();

  elements.add((E)"one");

  elements.add((E)"two");

  elements.add((E)"three");

  list.addAll(1,elements);

  subList=list.subList(0,list.size());

  assertEquals(list.size(),subList.size());

}

Location: TransformedListTest.java

Content: 

@SuppressWarnings("unchecked") public void testTransformedList(){

  final List<E> list=TransformedList.transformingList(new ArrayList<E>(),(Transformer<E,E>)TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER);

  assertEquals(0,list.size());

  final E[] els=(E[])new Object[]{"1","3","5","7","2","4","6"};

  for (int i=0; i < els.length; i++) {

    list.add(els[i]);

    assertEquals(i + 1,list.size());

    assertTrue(list.contains(Integer.valueOf((String)els[i])));

    assertFalse(list.contains(els[i]));

  }

  assertFalse(list.remove(els[0]));

  assertTrue(list.remove(Integer.valueOf((String)els[0])));

  list.clear();

  for (int i=0; i < els.length; i++) {

    list.add(0,els[i]);

    assertEquals(i + 1,list.size());

    assertEquals(Integer.valueOf((String)els[i]),list.get(0));

  }

  list.set(0,(E)"22");

  assertEquals(Integer.valueOf(22),list.get(0));

  final ListIterator<E> it=list.listIterator();

  it.next();

  it.set((E)"33");

  assertEquals(Integer.valueOf(33),list.get(0));

  it.add((E)"44");

  assertEquals(Integer.valueOf(44),list.get(1));

  final List<E> adds=new ArrayList<>();

  adds.add((E)"1");

  adds.add((E)"2");

  list.clear();

  list.addAll(adds);

  assertEquals(Integer.valueOf(1),list.get(0));

  assertEquals(Integer.valueOf(2),list.get(1));

  adds.clear();

  adds.add((E)"3");

  list.addAll(1,adds);

  assertEquals(Integer.valueOf(1),list.get(0));

  assertEquals(Integer.valueOf(3),list.get(1));

  assertEquals(Integer.valueOf(2),list.get(2));

}

Location: TransformedListTest.java

Content: 

public void testTransformedList_decorateTransform(){

  final List<Object> originalList=new ArrayList<>();

  final Object[] els=new Object[]{"1","3","5","7","2","4","6"};

  for (  final Object el : els) {

    originalList.add(el);

  }

  final List<?> list=TransformedList.transformedList(originalList,TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER);

  assertEquals(els.length,list.size());

  for (  final Object el : els) {

    assertTrue(list.contains(Integer.valueOf((String)el)));

    assertFalse(list.contains(el));

  }

  assertFalse(list.remove(els[0]));

  assertTrue(list.remove(Integer.valueOf((String)els[0])));

}

Location: TransformedListTest.java

Content: 

public TransformedListTest(final String testName){

  super(testName);

}

