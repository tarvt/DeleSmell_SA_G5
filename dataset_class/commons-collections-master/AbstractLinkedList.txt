Location: AbstractLinkedList.java

Content: 

/** 

 * Constructor that does nothing intended for deserialization. <p> If this constructor is used by a serializable subclass then the init() method must be called.

 */

protected AbstractLinkedList(){

}

Location: AbstractLinkedList.java

Content: 

/** 

 * Constructs a list copying data from the specified collection.

 * @param coll  the collection to copy

 */

protected AbstractLinkedList(final Collection<? extends E> coll){

  init();

  addAll(coll);

}

Location: AbstractLinkedList.java

Content: 

public boolean addFirst(final E o){

  addNodeAfter(header,o);

  return true;

}

Location: AbstractLinkedList.java

Content: 

public boolean addLast(final E o){

  addNodeBefore(header,o);

  return true;

}

Location: AbstractLinkedList.java

Content: 

/** 

 * Creates a new node with the specified object as its {@code value} and inserts it after {@code node}. <p> This implementation uses  {@link #createNode(Object)} and{@link #addNode(AbstractLinkedList.Node,AbstractLinkedList.Node)}.

 * @param node  node to insert after

 * @param value  value of the newly added node

 * @throws NullPointerException if {@code node} is null

 */

protected void addNodeAfter(final Node<E> node,final E value){

  final Node<E> newNode=createNode(value);

  addNode(newNode,node.next);

}

Location: AbstractLinkedList.java

Content: 

/** 

 * Creates a new node with the specified object as its {@code value} and inserts it before {@code node}. <p> This implementation uses  {@link #createNode(Object)} and{@link #addNode(AbstractLinkedList.Node,AbstractLinkedList.Node)}.

 * @param node  node to insert before

 * @param value  value of the newly added node

 * @throws NullPointerException if {@code node} is null

 */

protected void addNodeBefore(final Node<E> node,final E value){

  final Node<E> newNode=createNode(value);

  addNode(newNode,node);

}

Location: AbstractLinkedList.java

Content: 

/** 

 * Creates a new node with previous, next and element all set to null. This implementation creates a new empty Node. Subclasses can override this to create a different class.

 * @return  newly created node

 */

protected Node<E> createHeaderNode(){

  return new Node<>();

}

Location: AbstractLinkedList.java

Content: 

/** 

 * Creates an iterator for the sublist.

 * @param subList  the sublist to get an iterator for

 * @return a new iterator on the given sublist

 */

protected Iterator<E> createSubListIterator(final LinkedSubList<E> subList){

  return createSubListListIterator(subList,0);

}

Location: AbstractLinkedList.java

Content: 

public E getFirst(){

  final Node<E> node=header.next;

  if (node == header) {

    throw new NoSuchElementException();

  }

  return node.getValue();

}

Location: AbstractLinkedList.java

Content: 

public E getLast(){

  final Node<E> node=header.previous;

  if (node == header) {

    throw new NoSuchElementException();

  }

  return node.getValue();

}

Location: AbstractLinkedList.java

Content: 

/** 

 * Gets the node at a particular index.

 * @param index  the index, starting from 0

 * @param endMarkerAllowed  whether or not the end marker can be returned ifstartIndex is set to the list's size

 * @return the node at the given index

 * @throws IndexOutOfBoundsException if the index is less than 0; equal tothe size of the list and endMakerAllowed is false; or greater than the size of the list

 */

protected Node<E> getNode(final int index,final boolean endMarkerAllowed) throws IndexOutOfBoundsException {

  if (index < 0) {

    throw new IndexOutOfBoundsException("Couldn't get the node: " + "index (" + index + ") less than zero.");

  }

  if (!endMarkerAllowed && index == size) {

    throw new IndexOutOfBoundsException("Couldn't get the node: " + "index (" + index + ") is the size of the list.");

  }

  if (index > size) {

    throw new IndexOutOfBoundsException("Couldn't get the node: " + "index (" + index + ") greater than the size of the "+ "list ("+ size+ ").");

  }

  Node<E> node;

  if (index < size / 2) {

    node=header.next;

    for (int currentIndex=0; currentIndex < index; currentIndex++) {

      node=node.next;

    }

  }

 else {

    node=header;

    for (int currentIndex=size; currentIndex > index; currentIndex--) {

      node=node.previous;

    }

  }

  return node;

}

Location: AbstractLinkedList.java

Content: 

public E removeFirst(){

  final Node<E> node=header.next;

  if (node == header) {

    throw new NoSuchElementException();

  }

  final E oldValue=node.getValue();

  removeNode(node);

  return oldValue;

}

Location: AbstractLinkedList.java

Content: 

public E removeLast(){

  final Node<E> node=header.previous;

  if (node == header) {

    throw new NoSuchElementException();

  }

  final E oldValue=node.getValue();

  removeNode(node);

  return oldValue;

}

Location: AbstractLinkedList.java

Content: 

/** 

 * Constructor that does nothing intended for deserialization. <p> If this constructor is used by a serializable subclass then the init() method must be called.

 */

protected AbstractLinkedList(){

}

Location: AbstractLinkedList.java

Content: 

/** 

 * Constructs a list copying data from the specified collection.

 * @param coll  the collection to copy

 */

protected AbstractLinkedList(final Collection<? extends E> coll){

  init();

  addAll(coll);

}

Location: AbstractLinkedList.java

Content: 

public boolean addFirst(final E o){

  addNodeAfter(header,o);

  return true;

}

Location: AbstractLinkedList.java

Content: 

public boolean addLast(final E o){

  addNodeBefore(header,o);

  return true;

}

Location: AbstractLinkedList.java

Content: 

/** 

 * Creates a new node with the specified object as its {@code value} and inserts it after {@code node}. <p> This implementation uses  {@link #createNode(Object)} and{@link #addNode(AbstractLinkedList.Node,AbstractLinkedList.Node)}.

 * @param node  node to insert after

 * @param value  value of the newly added node

 * @throws NullPointerException if {@code node} is null

 */

protected void addNodeAfter(final Node<E> node,final E value){

  final Node<E> newNode=createNode(value);

  addNode(newNode,node.next);

}

Location: AbstractLinkedList.java

Content: 

/** 

 * Creates a new node with the specified object as its {@code value} and inserts it before {@code node}. <p> This implementation uses  {@link #createNode(Object)} and{@link #addNode(AbstractLinkedList.Node,AbstractLinkedList.Node)}.

 * @param node  node to insert before

 * @param value  value of the newly added node

 * @throws NullPointerException if {@code node} is null

 */

protected void addNodeBefore(final Node<E> node,final E value){

  final Node<E> newNode=createNode(value);

  addNode(newNode,node);

}

Location: AbstractLinkedList.java

Content: 

/** 

 * Creates a new node with previous, next and element all set to null. This implementation creates a new empty Node. Subclasses can override this to create a different class.

 * @return  newly created node

 */

protected Node<E> createHeaderNode(){

  return new Node<>();

}

Location: AbstractLinkedList.java

Content: 

/** 

 * Creates an iterator for the sublist.

 * @param subList  the sublist to get an iterator for

 * @return a new iterator on the given sublist

 */

protected Iterator<E> createSubListIterator(final LinkedSubList<E> subList){

  return createSubListListIterator(subList,0);

}

Location: AbstractLinkedList.java

Content: 

public E getFirst(){

  final Node<E> node=header.next;

  if (node == header) {

    throw new NoSuchElementException();

  }

  return node.getValue();

}

Location: AbstractLinkedList.java

Content: 

public E getLast(){

  final Node<E> node=header.previous;

  if (node == header) {

    throw new NoSuchElementException();

  }

  return node.getValue();

}

Location: AbstractLinkedList.java

Content: 

/** 

 * Gets the node at a particular index.

 * @param index  the index, starting from 0

 * @param endMarkerAllowed  whether or not the end marker can be returned ifstartIndex is set to the list's size

 * @return the node at the given index

 * @throws IndexOutOfBoundsException if the index is less than 0; equal tothe size of the list and endMakerAllowed is false; or greater than the size of the list

 */

protected Node<E> getNode(final int index,final boolean endMarkerAllowed) throws IndexOutOfBoundsException {

  if (index < 0) {

    throw new IndexOutOfBoundsException("Couldn't get the node: " + "index (" + index + ") less than zero.");

  }

  if (!endMarkerAllowed && index == size) {

    throw new IndexOutOfBoundsException("Couldn't get the node: " + "index (" + index + ") is the size of the list.");

  }

  if (index > size) {

    throw new IndexOutOfBoundsException("Couldn't get the node: " + "index (" + index + ") greater than the size of the "+ "list ("+ size+ ").");

  }

  Node<E> node;

  if (index < size / 2) {

    node=header.next;

    for (int currentIndex=0; currentIndex < index; currentIndex++) {

      node=node.next;

    }

  }

 else {

    node=header;

    for (int currentIndex=size; currentIndex > index; currentIndex--) {

      node=node.previous;

    }

  }

  return node;

}

Location: AbstractLinkedList.java

Content: 

public E removeFirst(){

  final Node<E> node=header.next;

  if (node == header) {

    throw new NoSuchElementException();

  }

  final E oldValue=node.getValue();

  removeNode(node);

  return oldValue;

}

Location: AbstractLinkedList.java

Content: 

public E removeLast(){

  final Node<E> node=header.previous;

  if (node == header) {

    throw new NoSuchElementException();

  }

  final E oldValue=node.getValue();

  removeNode(node);

  return oldValue;

}

