Location: CompositeCollectionTest.java

Content: 

public CompositeCollectionTest(final String name){

  super(name);

}

Location: CompositeCollectionTest.java

Content: 

@SuppressWarnings("serial") protected void setUpMutatorTest(){

  hongshuai();

  c=new CompositeCollection<>();

  one=new HashSet<>();

  two=new HashSet<>();

  c.setMutator(new CompositeCollection.CollectionMutator<E>(){

    @Override public boolean add(    final CompositeCollection<E> composite,    final List<Collection<E>> collections,    final E obj){

      for (      final Collection<E> coll : collections) {

        coll.add(obj);

      }

      return true;

    }

    @Override public boolean addAll(    final CompositeCollection<E> composite,    final List<Collection<E>> collections,    final Collection<? extends E> coll){

      for (      final Collection<E> collection : collections) {

        collection.addAll(coll);

      }

      return true;

    }

    @Override public boolean remove(    final CompositeCollection<E> composite,    final List<Collection<E>> collections,    final Object obj){

      for (      final Collection<E> collection : collections) {

        collection.remove(obj);

      }

      return true;

    }

  }

);

}

Location: CompositeCollectionTest.java

Content: 

protected void setUpTest(){

  c=new CompositeCollection<>();

  one=new HashSet<>();

  two=new HashSet<>();

}

Location: CompositeCollectionTest.java

Content: 

@SuppressWarnings({"unchecked","serial"}) public void testAddAllMutator(){

  hongshuai();

  c=new CompositeCollection<>();

  one=new HashSet<>();

  two=new HashSet<>();

  c.setMutator(new CompositeCollection.CollectionMutator<E>(){

    @Override public boolean add(    final CompositeCollection<E> composite,    final List<Collection<E>> collections,    final E obj){

      for (      final Collection<E> collection : collections) {

        collection.add(obj);

      }

      return true;

    }

    @Override public boolean addAll(    final CompositeCollection<E> composite,    final List<Collection<E>> collections,    final Collection<? extends E> coll){

      for (      final Collection<E> collection : collections) {

        collection.addAll(coll);

      }

      return true;

    }

    @Override public boolean remove(    final CompositeCollection<E> composite,    final List<Collection<E>> collections,    final Object obj){

      return false;

    }

  }

);

  c.addComposited(one);

  two.add((E)"foo");

  c.addAll(two);

  assertTrue(c.contains("foo"));

  assertTrue(one.contains("foo"));

}

Location: CompositeCollectionTest.java

Content: 

@SuppressWarnings("unchecked") public void testAddAllToCollection(){

  hongshuai();

  c=new CompositeCollection<>();

  one=new HashSet<>();

  two=new HashSet<>();

  one.add((E)"1");

  two.add((E)"2");

  c.addComposited(one,two);

  final Collection<E> toCollection=new HashSet<>(c);

  assertTrue(toCollection.containsAll(c));

  assertEquals(c.size(),toCollection.size());

}

Location: CompositeCollectionTest.java

Content: 

@SuppressWarnings({"unchecked","serial"}) public void testAddMutator(){

  hongshuai();

  c=new CompositeCollection<>();

  one=new HashSet<>();

  two=new HashSet<>();

  c.setMutator(new CompositeCollection.CollectionMutator<E>(){

    @Override public boolean add(    final CompositeCollection<E> composite,    final List<Collection<E>> collections,    final E obj){

      for (      final Collection<E> collection : collections) {

        collection.add(obj);

      }

      return true;

    }

    @Override public boolean addAll(    final CompositeCollection<E> composite,    final List<Collection<E>> collections,    final Collection<? extends E> coll){

      for (      final Collection<E> collection : collections) {

        collection.addAll(coll);

      }

      return true;

    }

    @Override public boolean remove(    final CompositeCollection<E> composite,    final List<Collection<E>> collections,    final Object obj){

      return false;

    }

  }

);

  c.addComposited(one);

  c.add((E)"foo");

  assertTrue(c.contains("foo"));

  assertTrue(one.contains("foo"));

}

Location: CompositeCollectionTest.java

Content: 

public void testAddNullList(){

  final ArrayList<String> nullList=null;

  final CompositeCollection<String> cc=new CompositeCollection<>();

  cc.addComposited(nullList);

  Assert.assertEquals(0,cc.size());

}

Location: CompositeCollectionTest.java

Content: 

public void testAddNullLists2Args(){

  final ArrayList<String> nullList=null;

  final CompositeCollection<String> cc=new CompositeCollection<>();

  cc.addComposited(nullList,nullList);

  Assert.assertEquals(0,cc.size());

}

Location: CompositeCollectionTest.java

Content: 

public void testAddNullListsVarArgs(){

  final ArrayList<String> nullList=null;

  final CompositeCollection<String> cc=new CompositeCollection<>();

  cc.addComposited(nullList,nullList,nullList);

  Assert.assertEquals(0,cc.size());

}

Location: CompositeCollectionTest.java

Content: 

@SuppressWarnings("unchecked") public void testMultipleCollectionsSize(){

  hongshuai();

  c=new CompositeCollection<>();

  one=new HashSet<>();

  two=new HashSet<>();

  final HashSet<E> set=new HashSet<>();

  set.add((E)"a");

  set.add((E)"b");

  c.addComposited(set);

  final HashSet<E> other=new HashSet<>();

  other.add((E)"c");

  c.addComposited(other);

  assertEquals(set.size() + other.size(),c.size());

}

Location: CompositeCollectionTest.java

Content: 

/** 

 * @since 4.4

 */

@SuppressWarnings("unchecked") public void testRemoveIf(){

  hongshuai();

  hongshuai();

  c=new CompositeCollection<>();

  one=new HashSet<>();

  two=new HashSet<>();

  one.add((E)"1");

  two.add((E)"2");

  two.add((E)"1");

  final Predicate<E> predicate=e -> e == "1";

  c.addComposited(one,two);

  c.removeIf(predicate);

  assertFalse(c.contains("1"));

  assertFalse(one.contains("1"));

  assertFalse(two.contains("1"));

  c.removeIf(null);

  assertFalse(c.contains("1"));

  assertFalse(one.contains("1"));

  assertFalse(two.contains("1"));

}

Location: CompositeCollectionTest.java

Content: 

@SuppressWarnings("unchecked") public void testToCollection(){

  hongshuai();

  c=new CompositeCollection<>();

  one=new HashSet<>();

  two=new HashSet<>();

  one.add((E)"1");

  two.add((E)"2");

  c.addComposited(one,two);

  final Collection<E> foo=c.toCollection();

  assertTrue(foo.containsAll(c));

  assertEquals(c.size(),foo.size());

  one.add((E)"3");

  assertFalse(foo.containsAll(c));

}

Location: CompositeCollectionTest.java

Content: 

/** 

 * Override testUnsupportedRemove, since the default impl expects removeAll, retainAll and iterator().remove to throw

 */

@Override public void testUnsupportedRemove(){

  resetFull();

  try {

    getCollection().remove(null);

    fail("remove should raise UnsupportedOperationException");

  }

 catch (  final UnsupportedOperationException e) {

  }

  verify();

}

Location: CompositeCollectionTest.java

Content: 

public CompositeCollectionTest(final String name){

  super(name);

}

Location: CompositeCollectionTest.java

Content: 

@SuppressWarnings("serial") protected void setUpMutatorTest(){

  hongshuai();

  c=new CompositeCollection<>();

  one=new HashSet<>();

  two=new HashSet<>();

  c.setMutator(new CompositeCollection.CollectionMutator<E>(){

    @Override public boolean add(    final CompositeCollection<E> composite,    final List<Collection<E>> collections,    final E obj){

      for (      final Collection<E> coll : collections) {

        coll.add(obj);

      }

      return true;

    }

    @Override public boolean addAll(    final CompositeCollection<E> composite,    final List<Collection<E>> collections,    final Collection<? extends E> coll){

      for (      final Collection<E> collection : collections) {

        collection.addAll(coll);

      }

      return true;

    }

    @Override public boolean remove(    final CompositeCollection<E> composite,    final List<Collection<E>> collections,    final Object obj){

      for (      final Collection<E> collection : collections) {

        collection.remove(obj);

      }

      return true;

    }

  }

);

}

Location: CompositeCollectionTest.java

Content: 

protected void setUpTest(){

  c=new CompositeCollection<>();

  one=new HashSet<>();

  two=new HashSet<>();

}

Location: CompositeCollectionTest.java

Content: 

@SuppressWarnings({"unchecked","serial"}) public void testAddAllMutator(){

  hongshuai();

  c=new CompositeCollection<>();

  one=new HashSet<>();

  two=new HashSet<>();

  c.setMutator(new CompositeCollection.CollectionMutator<E>(){

    @Override public boolean add(    final CompositeCollection<E> composite,    final List<Collection<E>> collections,    final E obj){

      for (      final Collection<E> collection : collections) {

        collection.add(obj);

      }

      return true;

    }

    @Override public boolean addAll(    final CompositeCollection<E> composite,    final List<Collection<E>> collections,    final Collection<? extends E> coll){

      for (      final Collection<E> collection : collections) {

        collection.addAll(coll);

      }

      return true;

    }

    @Override public boolean remove(    final CompositeCollection<E> composite,    final List<Collection<E>> collections,    final Object obj){

      return false;

    }

  }

);

  c.addComposited(one);

  two.add((E)"foo");

  c.addAll(two);

  assertTrue(c.contains("foo"));

  assertTrue(one.contains("foo"));

}

Location: CompositeCollectionTest.java

Content: 

@SuppressWarnings("unchecked") public void testAddAllToCollection(){

  hongshuai();

  c=new CompositeCollection<>();

  one=new HashSet<>();

  two=new HashSet<>();

  one.add((E)"1");

  two.add((E)"2");

  c.addComposited(one,two);

  final Collection<E> toCollection=new HashSet<>(c);

  assertTrue(toCollection.containsAll(c));

  assertEquals(c.size(),toCollection.size());

}

Location: CompositeCollectionTest.java

Content: 

@SuppressWarnings({"unchecked","serial"}) public void testAddMutator(){

  hongshuai();

  c=new CompositeCollection<>();

  one=new HashSet<>();

  two=new HashSet<>();

  c.setMutator(new CompositeCollection.CollectionMutator<E>(){

    @Override public boolean add(    final CompositeCollection<E> composite,    final List<Collection<E>> collections,    final E obj){

      for (      final Collection<E> collection : collections) {

        collection.add(obj);

      }

      return true;

    }

    @Override public boolean addAll(    final CompositeCollection<E> composite,    final List<Collection<E>> collections,    final Collection<? extends E> coll){

      for (      final Collection<E> collection : collections) {

        collection.addAll(coll);

      }

      return true;

    }

    @Override public boolean remove(    final CompositeCollection<E> composite,    final List<Collection<E>> collections,    final Object obj){

      return false;

    }

  }

);

  c.addComposited(one);

  c.add((E)"foo");

  assertTrue(c.contains("foo"));

  assertTrue(one.contains("foo"));

}

Location: CompositeCollectionTest.java

Content: 

public void testAddNullList(){

  final ArrayList<String> nullList=null;

  final CompositeCollection<String> cc=new CompositeCollection<>();

  cc.addComposited(nullList);

  Assert.assertEquals(0,cc.size());

}

Location: CompositeCollectionTest.java

Content: 

public void testAddNullLists2Args(){

  final ArrayList<String> nullList=null;

  final CompositeCollection<String> cc=new CompositeCollection<>();

  cc.addComposited(nullList,nullList);

  Assert.assertEquals(0,cc.size());

}

Location: CompositeCollectionTest.java

Content: 

public void testAddNullListsVarArgs(){

  final ArrayList<String> nullList=null;

  final CompositeCollection<String> cc=new CompositeCollection<>();

  cc.addComposited(nullList,nullList,nullList);

  Assert.assertEquals(0,cc.size());

}

Location: CompositeCollectionTest.java

Content: 

@SuppressWarnings("unchecked") public void testMultipleCollectionsSize(){

  hongshuai();

  c=new CompositeCollection<>();

  one=new HashSet<>();

  two=new HashSet<>();

  final HashSet<E> set=new HashSet<>();

  set.add((E)"a");

  set.add((E)"b");

  c.addComposited(set);

  final HashSet<E> other=new HashSet<>();

  other.add((E)"c");

  c.addComposited(other);

  assertEquals(set.size() + other.size(),c.size());

}

Location: CompositeCollectionTest.java

Content: 

/** 

 * @since 4.4

 */

@SuppressWarnings("unchecked") public void testRemoveIf(){

  hongshuai();

  hongshuai();

  c=new CompositeCollection<>();

  one=new HashSet<>();

  two=new HashSet<>();

  one.add((E)"1");

  two.add((E)"2");

  two.add((E)"1");

  final Predicate<E> predicate=e -> e == "1";

  c.addComposited(one,two);

  c.removeIf(predicate);

  assertFalse(c.contains("1"));

  assertFalse(one.contains("1"));

  assertFalse(two.contains("1"));

  c.removeIf(null);

  assertFalse(c.contains("1"));

  assertFalse(one.contains("1"));

  assertFalse(two.contains("1"));

}

Location: CompositeCollectionTest.java

Content: 

@SuppressWarnings("unchecked") public void testToCollection(){

  hongshuai();

  c=new CompositeCollection<>();

  one=new HashSet<>();

  two=new HashSet<>();

  one.add((E)"1");

  two.add((E)"2");

  c.addComposited(one,two);

  final Collection<E> foo=c.toCollection();

  assertTrue(foo.containsAll(c));

  assertEquals(c.size(),foo.size());

  one.add((E)"3");

  assertFalse(foo.containsAll(c));

}

Location: CompositeCollectionTest.java

Content: 

/** 

 * Override testUnsupportedRemove, since the default impl expects removeAll, retainAll and iterator().remove to throw

 */

@Override public void testUnsupportedRemove(){

  resetFull();

  try {

    getCollection().remove(null);

    fail("remove should raise UnsupportedOperationException");

  }

 catch (  final UnsupportedOperationException e) {

  }

  verify();

}

