Location: AbstractLinkedMap.java

Content: 

/** 

 * Constructor only used in deserialization, do not use otherwise.

 */

protected AbstractLinkedMap(){

}

Location: AbstractLinkedMap.java

Content: 

/** 

 * Constructs a new, empty map with the specified initial capacity.

 * @param initialCapacity  the initial capacity

 * @throws IllegalArgumentException if the initial capacity is negative

 */

protected AbstractLinkedMap(final int initialCapacity){

  super(initialCapacity);

}

Location: AbstractLinkedMap.java

Content: 

/** 

 * Constructs a new, empty map with the specified initial capacity and load factor.

 * @param initialCapacity  the initial capacity

 * @param loadFactor  the load factor

 * @throws IllegalArgumentException if the initial capacity is negative

 * @throws IllegalArgumentException if the load factor is less than zero

 */

protected AbstractLinkedMap(final int initialCapacity,final float loadFactor){

  super(initialCapacity,loadFactor);

}

Location: AbstractLinkedMap.java

Content: 

/** 

 * Constructor which performs no validation on the passed in parameters.

 * @param initialCapacity  the initial capacity, must be a power of two

 * @param loadFactor  the load factor, must be &gt; 0.0f and generally &lt; 1.0f

 * @param threshold  the threshold, must be sensible

 */

protected AbstractLinkedMap(final int initialCapacity,final float loadFactor,final int threshold){

  super(initialCapacity,loadFactor,threshold);

}

Location: AbstractLinkedMap.java

Content: 

/** 

 * Constructor copying elements from another map.

 * @param map  the map to copy

 * @throws NullPointerException if the map is null

 */

protected AbstractLinkedMap(final Map<? extends K,? extends V> map){

  super(map);

}

Location: AbstractLinkedMap.java

Content: 

/** 

 * Gets the  {@code after} field from a {@code LinkEntry}. Used in subclasses that have no visibility of the field.

 * @param entry  the entry to query, must not be null

 * @return the {@code after} field of the entry

 * @throws NullPointerException if the entry is null

 * @since 3.1

 */

protected LinkEntry<K,V> entryAfter(final LinkEntry<K,V> entry){

  return entry.after;

}

Location: AbstractLinkedMap.java

Content: 

/** 

 * Gets the  {@code before} field from a {@code LinkEntry}. Used in subclasses that have no visibility of the field.

 * @param entry  the entry to query, must not be null

 * @return the {@code before} field of the entry

 * @throws NullPointerException if the entry is null

 * @since 3.1

 */

protected LinkEntry<K,V> entryBefore(final LinkEntry<K,V> entry){

  return entry.before;

}

Location: AbstractLinkedMap.java

Content: 

/** 

 * Gets the key at the specified index.

 * @param index  the index to retrieve

 * @return the key at the specified index

 * @throws IndexOutOfBoundsException if the index is invalid

 */

protected LinkEntry<K,V> getEntry(final int index){

  if (index < 0) {

    throw new IndexOutOfBoundsException("Index " + index + " is less than zero");

  }

  if (index >= size) {

    throw new IndexOutOfBoundsException("Index " + index + " is invalid for size "+ size);

  }

  LinkEntry<K,V> entry;

  if (index < size / 2) {

    entry=header.after;

    for (int currentIndex=0; currentIndex < index; currentIndex++) {

      entry=entry.after;

    }

  }

 else {

    entry=header;

    for (int currentIndex=size; currentIndex > index; currentIndex--) {

      entry=entry.before;

    }

  }

  return entry;

}

Location: AbstractLinkedMap.java

Content: 

/** 

 * Constructor only used in deserialization, do not use otherwise.

 */

protected AbstractLinkedMap(){

}

Location: AbstractLinkedMap.java

Content: 

/** 

 * Constructs a new, empty map with the specified initial capacity.

 * @param initialCapacity  the initial capacity

 * @throws IllegalArgumentException if the initial capacity is negative

 */

protected AbstractLinkedMap(final int initialCapacity){

  super(initialCapacity);

}

Location: AbstractLinkedMap.java

Content: 

/** 

 * Constructs a new, empty map with the specified initial capacity and load factor.

 * @param initialCapacity  the initial capacity

 * @param loadFactor  the load factor

 * @throws IllegalArgumentException if the initial capacity is negative

 * @throws IllegalArgumentException if the load factor is less than zero

 */

protected AbstractLinkedMap(final int initialCapacity,final float loadFactor){

  super(initialCapacity,loadFactor);

}

Location: AbstractLinkedMap.java

Content: 

/** 

 * Constructor which performs no validation on the passed in parameters.

 * @param initialCapacity  the initial capacity, must be a power of two

 * @param loadFactor  the load factor, must be &gt; 0.0f and generally &lt; 1.0f

 * @param threshold  the threshold, must be sensible

 */

protected AbstractLinkedMap(final int initialCapacity,final float loadFactor,final int threshold){

  super(initialCapacity,loadFactor,threshold);

}

Location: AbstractLinkedMap.java

Content: 

/** 

 * Constructor copying elements from another map.

 * @param map  the map to copy

 * @throws NullPointerException if the map is null

 */

protected AbstractLinkedMap(final Map<? extends K,? extends V> map){

  super(map);

}

Location: AbstractLinkedMap.java

Content: 

/** 

 * Gets the  {@code after} field from a {@code LinkEntry}. Used in subclasses that have no visibility of the field.

 * @param entry  the entry to query, must not be null

 * @return the {@code after} field of the entry

 * @throws NullPointerException if the entry is null

 * @since 3.1

 */

protected LinkEntry<K,V> entryAfter(final LinkEntry<K,V> entry){

  return entry.after;

}

Location: AbstractLinkedMap.java

Content: 

/** 

 * Gets the  {@code before} field from a {@code LinkEntry}. Used in subclasses that have no visibility of the field.

 * @param entry  the entry to query, must not be null

 * @return the {@code before} field of the entry

 * @throws NullPointerException if the entry is null

 * @since 3.1

 */

protected LinkEntry<K,V> entryBefore(final LinkEntry<K,V> entry){

  return entry.before;

}

Location: AbstractLinkedMap.java

Content: 

/** 

 * Gets the key at the specified index.

 * @param index  the index to retrieve

 * @return the key at the specified index

 * @throws IndexOutOfBoundsException if the index is invalid

 */

protected LinkEntry<K,V> getEntry(final int index){

  if (index < 0) {

    throw new IndexOutOfBoundsException("Index " + index + " is less than zero");

  }

  if (index >= size) {

    throw new IndexOutOfBoundsException("Index " + index + " is invalid for size "+ size);

  }

  LinkEntry<K,V> entry;

  if (index < size / 2) {

    entry=header.after;

    for (int currentIndex=0; currentIndex < index; currentIndex++) {

      entry=entry.after;

    }

  }

 else {

    entry=header;

    for (int currentIndex=size; currentIndex > index; currentIndex--) {

      entry=entry.before;

    }

  }

  return entry;

}

