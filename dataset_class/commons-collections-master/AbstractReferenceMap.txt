Location: AbstractReferenceMap.java

Content: 

/** 

 * Constructor used during deserialization.

 */

protected AbstractReferenceMap(){

}

Location: AbstractReferenceMap.java

Content: 

/** 

 * Constructs a new empty map with the specified reference types, load factor and initial capacity.

 * @param keyType  the type of reference to use for keys;must be  {@link ReferenceStrength#HARD HARD}, {@link ReferenceStrength#SOFT SOFT}, {@link ReferenceStrength#WEAK WEAK}

 * @param valueType  the type of reference to use for values;must be  {@link ReferenceStrength#HARD}, {@link ReferenceStrength#SOFT SOFT}, {@link ReferenceStrength#WEAK WEAK}

 * @param capacity  the initial capacity for the map

 * @param loadFactor  the load factor for the map

 * @param purgeValues  should the value be automatically purged when thekey is garbage collected

 */

protected AbstractReferenceMap(final ReferenceStrength keyType,final ReferenceStrength valueType,final int capacity,final float loadFactor,final boolean purgeValues){

  super(capacity,loadFactor);

  this.keyType=keyType;

  this.valueType=valueType;

  this.purgeValues=purgeValues;

}

Location: AbstractReferenceMap.java

Content: 

/** 

 * Provided protected read-only access to the key type.

 * @param type the type to check against.

 * @return true if keyType has the specified type

 */

protected boolean isKeyType(final ReferenceStrength type){

  return this.keyType == type;

}

Location: AbstractReferenceMap.java

Content: 

/** 

 * Provided protected read-only access to the value type.

 * @param type the type to check against.

 * @return true if valueType has the specified type

 */

protected boolean isValueType(final ReferenceStrength type){

  return this.valueType == type;

}

Location: AbstractReferenceMap.java

Content: 

/** 

 * Purges stale mappings from this map. <p> Note that this method is not synchronized!  Special care must be taken if, for instance, you want stale mappings to be removed on a periodic basis by some background thread.

 */

protected void purge(){

  Reference<?> ref=queue.poll();

  while (ref != null) {

    purge(ref);

    ref=queue.poll();

  }

}

Location: AbstractReferenceMap.java

Content: 

/** 

 * Purges stale mappings from this map before read operations. <p> This implementation calls  {@link #purge()} to maintain a consistent state.

 */

protected void purgeBeforeRead(){

  purge();

}

Location: AbstractReferenceMap.java

Content: 

/** 

 * Purges stale mappings from this map before write operations. <p> This implementation calls  {@link #purge()} to maintain a consistent state.

 */

protected void purgeBeforeWrite(){

  purge();

}

Location: AbstractReferenceMap.java

Content: 

/** 

 * Purges the specified reference.

 * @param ref  the reference to purge

 */

protected void purge(final Reference<?> ref){

  final int hash=ref.hashCode();

  final int index=hashIndex(hash,data.length);

  HashEntry<K,V> previous=null;

  HashEntry<K,V> entry=data[index];

  while (entry != null) {

    final ReferenceEntry<K,V> refEntry=(ReferenceEntry<K,V>)entry;

    if (refEntry.purge(ref)) {

      if (previous == null) {

        data[index]=entry.next;

      }

 else {

        previous.next=entry.next;

      }

      this.size--;

      refEntry.onPurge();

      return;

    }

    previous=entry;

    entry=entry.next;

  }

}

Location: AbstractReferenceMap.java

Content: 

/** 

 * Constructor used during deserialization.

 */

protected AbstractReferenceMap(){

}

Location: AbstractReferenceMap.java

Content: 

/** 

 * Constructs a new empty map with the specified reference types, load factor and initial capacity.

 * @param keyType  the type of reference to use for keys;must be  {@link ReferenceStrength#HARD HARD}, {@link ReferenceStrength#SOFT SOFT}, {@link ReferenceStrength#WEAK WEAK}

 * @param valueType  the type of reference to use for values;must be  {@link ReferenceStrength#HARD}, {@link ReferenceStrength#SOFT SOFT}, {@link ReferenceStrength#WEAK WEAK}

 * @param capacity  the initial capacity for the map

 * @param loadFactor  the load factor for the map

 * @param purgeValues  should the value be automatically purged when thekey is garbage collected

 */

protected AbstractReferenceMap(final ReferenceStrength keyType,final ReferenceStrength valueType,final int capacity,final float loadFactor,final boolean purgeValues){

  super(capacity,loadFactor);

  this.keyType=keyType;

  this.valueType=valueType;

  this.purgeValues=purgeValues;

}

Location: AbstractReferenceMap.java

Content: 

/** 

 * Provided protected read-only access to the key type.

 * @param type the type to check against.

 * @return true if keyType has the specified type

 */

protected boolean isKeyType(final ReferenceStrength type){

  return this.keyType == type;

}

Location: AbstractReferenceMap.java

Content: 

/** 

 * Provided protected read-only access to the value type.

 * @param type the type to check against.

 * @return true if valueType has the specified type

 */

protected boolean isValueType(final ReferenceStrength type){

  return this.valueType == type;

}

Location: AbstractReferenceMap.java

Content: 

/** 

 * Purges stale mappings from this map. <p> Note that this method is not synchronized!  Special care must be taken if, for instance, you want stale mappings to be removed on a periodic basis by some background thread.

 */

protected void purge(){

  Reference<?> ref=queue.poll();

  while (ref != null) {

    purge(ref);

    ref=queue.poll();

  }

}

Location: AbstractReferenceMap.java

Content: 

/** 

 * Purges stale mappings from this map before read operations. <p> This implementation calls  {@link #purge()} to maintain a consistent state.

 */

protected void purgeBeforeRead(){

  purge();

}

Location: AbstractReferenceMap.java

Content: 

/** 

 * Purges stale mappings from this map before write operations. <p> This implementation calls  {@link #purge()} to maintain a consistent state.

 */

protected void purgeBeforeWrite(){

  purge();

}

Location: AbstractReferenceMap.java

Content: 

/** 

 * Purges the specified reference.

 * @param ref  the reference to purge

 */

protected void purge(final Reference<?> ref){

  final int hash=ref.hashCode();

  final int index=hashIndex(hash,data.length);

  HashEntry<K,V> previous=null;

  HashEntry<K,V> entry=data[index];

  while (entry != null) {

    final ReferenceEntry<K,V> refEntry=(ReferenceEntry<K,V>)entry;

    if (refEntry.purge(ref)) {

      if (previous == null) {

        data[index]=entry.next;

      }

 else {

        previous.next=entry.next;

      }

      this.size--;

      refEntry.onPurge();

      return;

    }

    previous=entry;

    entry=entry.next;

  }

}

