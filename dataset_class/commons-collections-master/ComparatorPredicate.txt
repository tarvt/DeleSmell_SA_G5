Location: ComparatorPredicate.java

Content: 

/** 

 * Factory to create the comparator predicate

 * @param < T > the type that the predicate queries

 * @param object  the object to compare to

 * @param comparator  the comparator to use for comparison

 * @return the predicate

 * @throws NullPointerException if comparator is null

 */

public static <T>Predicate<T> comparatorPredicate(final T object,final Comparator<T> comparator){

  return comparatorPredicate(object,comparator,Criterion.EQUAL);

}

Location: ComparatorPredicate.java

Content: 

/** 

 * Constructor that performs no validation. Use  {@code comparatorPredicate} if you want that.

 * @param object  the object to compare to

 * @param comparator  the comparator to use for comparison

 * @param criterion  the criterion to use to evaluate comparison

 */

public ComparatorPredicate(final T object,final Comparator<T> comparator,final Criterion criterion){

  this.object=object;

  this.comparator=comparator;

  this.criterion=criterion;

}

Location: ComparatorPredicate.java

Content: 

/** 

 * Factory to create the comparator predicate

 * @param < T > the type that the predicate queries

 * @param object  the object to compare to

 * @param comparator  the comparator to use for comparison

 * @return the predicate

 * @throws NullPointerException if comparator is null

 */

public static <T>Predicate<T> comparatorPredicate(final T object,final Comparator<T> comparator){

  return comparatorPredicate(object,comparator,Criterion.EQUAL);

}

Location: ComparatorPredicate.java

Content: 

/** 

 * Constructor that performs no validation. Use  {@code comparatorPredicate} if you want that.

 * @param object  the object to compare to

 * @param comparator  the comparator to use for comparison

 * @param criterion  the criterion to use to evaluate comparison

 */

public ComparatorPredicate(final T object,final Comparator<T> comparator,final Criterion criterion){

  this.object=object;

  this.comparator=comparator;

  this.criterion=criterion;

}

