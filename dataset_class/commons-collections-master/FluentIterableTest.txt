Location: FluentIterableTest.java

Content: 

@Test public void allMatch(){

  assertTrue(FluentIterable.of(iterableEven).allMatch(EVEN));

  assertFalse(FluentIterable.of(iterableOdd).allMatch(EVEN));

  assertFalse(FluentIterable.of(iterableA).allMatch(EVEN));

  try {

    FluentIterable.of(iterableEven).allMatch(null);

    fail("expecting NullPointerException");

  }

 catch (  final NullPointerException npe) {

  }

}

Location: FluentIterableTest.java

Content: 

@Test public void anyMatch(){

  assertTrue(FluentIterable.of(iterableEven).anyMatch(EVEN));

  assertFalse(FluentIterable.of(iterableOdd).anyMatch(EVEN));

  assertTrue(FluentIterable.of(iterableA).anyMatch(EVEN));

  try {

    FluentIterable.of(iterableEven).anyMatch(null);

    fail("expecting NullPointerException");

  }

 catch (  final NullPointerException npe) {

  }

}

Location: FluentIterableTest.java

Content: 

@Test public void appendElements(){

  final FluentIterable<Integer> it=FluentIterable.of(iterableA).append(10,20,30);

  assertEquals(IterableUtils.size(iterableA) + 3,IterableUtils.size(it));

  assertTrue(IterableUtils.contains(it,1));

  assertTrue(IterableUtils.contains(it,10));

  assertTrue(IterableUtils.contains(it,20));

  assertTrue(IterableUtils.contains(it,30));

  assertFalse(IterableUtils.contains(it,40));

  final FluentIterable<Integer> empty=FluentIterable.of(emptyIterable).append();

  assertTrue(IterableUtils.isEmpty(empty));

}

Location: FluentIterableTest.java

Content: 

@Test public void appendIterable(){

  final List<Integer> listB=Arrays.asList(10,20,30);

  final FluentIterable<Integer> it=FluentIterable.of(iterableA).append(listB);

  assertEquals(IterableUtils.size(iterableA) + listB.size(),IterableUtils.size(it));

  assertTrue(IterableUtils.contains(it,1));

  assertTrue(IterableUtils.contains(it,10));

  assertTrue(IterableUtils.contains(it,20));

  assertTrue(IterableUtils.contains(it,30));

  assertFalse(IterableUtils.contains(it,40));

}

Location: FluentIterableTest.java

Content: 

@Test public void asEnumeration(){

  Enumeration<Long> enumeration=FluentIterable.of(iterableB).asEnumeration();

  final List<Long> result=EnumerationUtils.toList(enumeration);

  assertEquals(iterableB,result);

  enumeration=FluentIterable.<Long>empty().asEnumeration();

  assertFalse(enumeration.hasMoreElements());

}

Location: FluentIterableTest.java

Content: 

@Test public void collate(){

  final List<Integer> result=FluentIterable.of(iterableOdd).collate(iterableEven).toList();

  final List<Integer> combinedList=new ArrayList<>();

  CollectionUtils.addAll(combinedList,iterableOdd);

  CollectionUtils.addAll(combinedList,iterableEven);

  Collections.sort(combinedList);

  assertEquals(combinedList,result);

  try {

    FluentIterable.of(iterableOdd).collate(null).toList();

    fail("expecting NullPointerException");

  }

 catch (  final NullPointerException npe) {

  }

}

Location: FluentIterableTest.java

Content: 

@Test public void collateWithComparator(){

  List<Integer> result=FluentIterable.of(iterableOdd).collate(iterableEven,ComparatorUtils.<Integer>naturalComparator()).toList();

  final List<Integer> combinedList=new ArrayList<>();

  CollectionUtils.addAll(combinedList,iterableOdd);

  CollectionUtils.addAll(combinedList,iterableEven);

  Collections.sort(combinedList);

  assertEquals(combinedList,result);

  result=FluentIterable.of(iterableOdd).collate(iterableEven,null).toList();

  assertEquals(combinedList,result);

}

Location: FluentIterableTest.java

Content: 

@Test public void contains(){

  assertTrue(FluentIterable.of(iterableEven).contains(2));

  assertFalse(FluentIterable.of(iterableEven).contains(1));

  assertFalse(FluentIterable.of(iterableEven).contains(null));

  assertTrue(FluentIterable.of(iterableEven).append((Integer)null).contains(null));

}

Location: FluentIterableTest.java

Content: 

@Test public void copyInto(){

  List<Integer> result=new ArrayList<>();

  FluentIterable.of(iterableA).copyInto(result);

  List<Integer> expected=IterableUtils.toList(iterableA);

  assertEquals(expected.size(),result.size());

  assertEquals(expected,result);

  result=new ArrayList<>();

  result.add(10);

  result.add(9);

  result.add(8);

  FluentIterable.of(iterableA).copyInto(result);

  expected=new ArrayList<>(Arrays.asList(10,9,8));

  expected.addAll(IterableUtils.toList(iterableA));

  assertEquals(expected.size(),result.size());

  assertEquals(expected,result);

  try {

    FluentIterable.of(iterableA).copyInto(null);

    fail("expecting NullPointerException");

  }

 catch (  final NullPointerException npe) {

  }

}

Location: FluentIterableTest.java

Content: 

@Test public void eval(){

  final List<Integer> listNumbers=new ArrayList<>(Arrays.asList(1,2,3,4,5,6,7,8,9,10));

  final FluentIterable<Integer> iterable=FluentIterable.of(listNumbers).filter(EVEN);

  final FluentIterable<Integer> materialized=iterable.eval();

  listNumbers.addAll(Arrays.asList(11,12,13,14,15,16,17,18,19,20));

  assertEquals(5,materialized.size());

  assertEquals(10,iterable.size());

  assertEquals(Arrays.asList(2,4,6,8,10),materialized.toList());

  assertEquals(Arrays.asList(2,4,6,8,10,12,14,16,18,20),iterable.toList());

}

Location: FluentIterableTest.java

Content: 

@Test public void factoryMethodOf(){

  FluentIterable<Integer> iterable=FluentIterable.of(1,2,3,4,5);

  List<Integer> result=iterable.toList();

  assertEquals(Arrays.asList(1,2,3,4,5),result);

  iterable=FluentIterable.of(1);

  assertEquals(1,iterable.size());

  assertFalse(iterable.isEmpty());

  assertEquals(Arrays.asList(1),iterable.toList());

  result=FluentIterable.of(new Integer[0]).toList();

  assertTrue(result.isEmpty());

  final Iterable<Integer> it=null;

  try {

    FluentIterable.of(it).toList();

    fail("expecting NullPointerException");

  }

 catch (  final NullPointerException npe) {

  }

}

Location: FluentIterableTest.java

Content: 

@Test public void filter(){

  final Predicate<Integer> smallerThan3=object -> object.intValue() < 3;

  List<Integer> result=FluentIterable.of(iterableA).filter(smallerThan3).toList();

  assertEquals(3,result.size());

  assertEquals(Arrays.asList(1,2,2),result);

  result=FluentIterable.of(emptyIterable).filter(smallerThan3).toList();

  assertEquals(0,result.size());

  try {

    FluentIterable.of(iterableA).filter(null).toList();

    fail("expecting NullPointerException");

  }

 catch (  final NullPointerException npe) {

  }

}

Location: FluentIterableTest.java

Content: 

@Test public void forEach(){

  final AtomicInteger sum=new AtomicInteger(0);

  final Closure<Integer> closure=input -> sum.addAndGet(input);

  FluentIterable.of(iterableA).forEach(closure);

  int expectedSum=0;

  for (  final Integer i : iterableA) {

    expectedSum+=i;

  }

  assertEquals(expectedSum,sum.get());

  try {

    FluentIterable.of(iterableA).forEach((Closure<Integer>)null);

    fail("expecting NullPointerException");

  }

 catch (  final NullPointerException npe) {

  }

}

Location: FluentIterableTest.java

Content: 

@Test public void get(){

  assertEquals(2,FluentIterable.of(iterableEven).get(0).intValue());

  try {

    FluentIterable.of(iterableEven).get(-1);

    fail("expecting IndexOutOfBoundsException");

  }

 catch (  final IndexOutOfBoundsException ioe) {

  }

  try {

    FluentIterable.of(iterableEven).get(IterableUtils.size(iterableEven));

    fail("expecting IndexOutOfBoundsException");

  }

 catch (  final IndexOutOfBoundsException ioe) {

  }

}

Location: FluentIterableTest.java

Content: 

@Test public void isEmpty(){

  assertTrue(FluentIterable.of(emptyIterable).isEmpty());

  assertFalse(FluentIterable.of(iterableOdd).isEmpty());

}

Location: FluentIterableTest.java

Content: 

@Test public void iterator(){

  Iterator<Integer> iterator=FluentIterable.of(iterableA).iterator();

  assertTrue(iterator.hasNext());

  iterator=FluentIterable.<Integer>empty().iterator();

  assertFalse(iterator.hasNext());

}

Location: FluentIterableTest.java

Content: 

@Test public void limit(){

  List<Integer> result=FluentIterable.of(iterableA).limit(3).toList();

  assertEquals(3,result.size());

  assertEquals(Arrays.asList(1,2,2),result);

  result=FluentIterable.of(iterableA).limit(100).toList();

  final List<Integer> expected=IterableUtils.toList(iterableA);

  assertEquals(expected.size(),result.size());

  assertEquals(expected,result);

  result=FluentIterable.of(iterableA).limit(0).toList();

  assertEquals(0,result.size());

  result=FluentIterable.of(emptyIterable).limit(3).toList();

  assertEquals(0,result.size());

  try {

    FluentIterable.of(iterableA).limit(-2).toList();

    fail("expecting IllegalArgumentException");

  }

 catch (  final IllegalArgumentException iae) {

  }

}

Location: FluentIterableTest.java

Content: 

@Test public void reverse(){

  List<Integer> result=FluentIterable.of(iterableA).reverse().toList();

  final List<Integer> expected=IterableUtils.toList(iterableA);

  Collections.reverse(expected);

  assertEquals(expected,result);

  result=FluentIterable.of(emptyIterable).reverse().toList();

  assertEquals(0,result.size());

}

Location: FluentIterableTest.java

Content: 

@Test public void size(){

  assertEquals(0,FluentIterable.of(emptyIterable).size());

  assertEquals(IterableUtils.toList(iterableOdd).size(),FluentIterable.of(iterableOdd).size());

}

Location: FluentIterableTest.java

Content: 

@Test public void skip(){

  List<Integer> result=FluentIterable.of(iterableA).skip(4).toList();

  assertEquals(6,result.size());

  assertEquals(Arrays.asList(3,3,4,4,4,4),result);

  result=FluentIterable.of(iterableA).skip(100).toList();

  assertEquals(0,result.size());

  result=FluentIterable.of(iterableA).skip(0).toList();

  final List<Integer> expected=IterableUtils.toList(iterableA);

  assertEquals(expected.size(),result.size());

  assertEquals(expected,result);

  result=FluentIterable.of(emptyIterable).skip(3).toList();

  assertEquals(0,result.size());

  try {

    FluentIterable.of(iterableA).skip(-4).toList();

    fail("expecting IllegalArgumentException");

  }

 catch (  final IllegalArgumentException iae) {

  }

}

Location: FluentIterableTest.java

Content: 

@SuppressWarnings({"rawtypes","unchecked"}) @Test public void toArray(){

  final Long[] arr=new Long[]{1L,2L,3L,4L,5L};

  final Long[] result=FluentIterable.of(arr).toArray(Long.class);

  assertNotNull(result);

  assertArrayEquals(arr,result);

  try {

    FluentIterable.of(arr).toArray((Class)String.class);

  }

 catch (  final ArrayStoreException ase) {

  }

}

Location: FluentIterableTest.java

Content: 

@Test public void transform(){

  final Transformer<Integer,Integer> squared=object -> object * object;

  List<Integer> result=FluentIterable.of(iterableA).transform(squared).toList();

  assertEquals(10,result.size());

  assertEquals(Arrays.asList(1,4,4,9,9,9,16,16,16,16),result);

  result=FluentIterable.of(emptyIterable).transform(squared).toList();

  assertEquals(0,result.size());

  try {

    FluentIterable.of(iterableA).transform(null).toList();

    fail("expecting NullPointerException");

  }

 catch (  final NullPointerException npe) {

  }

}

Location: FluentIterableTest.java

Content: 

@Test public void unique(){

  List<Integer> result=FluentIterable.of(iterableA).unique().toList();

  assertEquals(4,result.size());

  assertEquals(Arrays.asList(1,2,3,4),result);

  result=FluentIterable.of(emptyIterable).unique().toList();

  assertEquals(0,result.size());

}

Location: FluentIterableTest.java

Content: 

@Test public void unmodifiable(){

  final FluentIterable<Integer> iterable1=FluentIterable.of(iterableA).unmodifiable();

  final Iterator<Integer> it=iterable1.iterator();

  assertEquals(1,it.next().intValue());

  try {

    it.remove();

    fail("expecting UnsupportedOperationException");

  }

 catch (  final UnsupportedOperationException ise) {

  }

  final FluentIterable<Integer> iterable2=iterable1.unmodifiable();

  assertSame(iterable1,iterable2);

}

Location: FluentIterableTest.java

Content: 

@SuppressWarnings("unchecked") @Test public void zip(){

  List<Integer> result=FluentIterable.of(iterableOdd).zip(iterableEven).toList();

  List<Integer> combinedList=new ArrayList<>();

  CollectionUtils.addAll(combinedList,iterableOdd);

  CollectionUtils.addAll(combinedList,iterableEven);

  Collections.sort(combinedList);

  assertEquals(combinedList,result);

  try {

    FluentIterable.of(iterableOdd).zip((Iterable<Integer>)null).toList();

    fail("expecting NullPointerException");

  }

 catch (  final NullPointerException npe) {

  }

  result=FluentIterable.of(Arrays.asList(1,4,7)).zip(Arrays.asList(2,5,8),Arrays.asList(3,6,9)).toList();

  combinedList=Arrays.asList(1,2,3,4,5,6,7,8,9);

  assertEquals(combinedList,result);

}

Location: FluentIterableTest.java

Content: 

@Test public void allMatch(){

  assertTrue(FluentIterable.of(iterableEven).allMatch(EVEN));

  assertFalse(FluentIterable.of(iterableOdd).allMatch(EVEN));

  assertFalse(FluentIterable.of(iterableA).allMatch(EVEN));

  try {

    FluentIterable.of(iterableEven).allMatch(null);

    fail("expecting NullPointerException");

  }

 catch (  final NullPointerException npe) {

  }

}

Location: FluentIterableTest.java

Content: 

@Test public void anyMatch(){

  assertTrue(FluentIterable.of(iterableEven).anyMatch(EVEN));

  assertFalse(FluentIterable.of(iterableOdd).anyMatch(EVEN));

  assertTrue(FluentIterable.of(iterableA).anyMatch(EVEN));

  try {

    FluentIterable.of(iterableEven).anyMatch(null);

    fail("expecting NullPointerException");

  }

 catch (  final NullPointerException npe) {

  }

}

Location: FluentIterableTest.java

Content: 

@Test public void appendElements(){

  final FluentIterable<Integer> it=FluentIterable.of(iterableA).append(10,20,30);

  assertEquals(IterableUtils.size(iterableA) + 3,IterableUtils.size(it));

  assertTrue(IterableUtils.contains(it,1));

  assertTrue(IterableUtils.contains(it,10));

  assertTrue(IterableUtils.contains(it,20));

  assertTrue(IterableUtils.contains(it,30));

  assertFalse(IterableUtils.contains(it,40));

  final FluentIterable<Integer> empty=FluentIterable.of(emptyIterable).append();

  assertTrue(IterableUtils.isEmpty(empty));

}

Location: FluentIterableTest.java

Content: 

@Test public void appendIterable(){

  final List<Integer> listB=Arrays.asList(10,20,30);

  final FluentIterable<Integer> it=FluentIterable.of(iterableA).append(listB);

  assertEquals(IterableUtils.size(iterableA) + listB.size(),IterableUtils.size(it));

  assertTrue(IterableUtils.contains(it,1));

  assertTrue(IterableUtils.contains(it,10));

  assertTrue(IterableUtils.contains(it,20));

  assertTrue(IterableUtils.contains(it,30));

  assertFalse(IterableUtils.contains(it,40));

}

Location: FluentIterableTest.java

Content: 

@Test public void asEnumeration(){

  Enumeration<Long> enumeration=FluentIterable.of(iterableB).asEnumeration();

  final List<Long> result=EnumerationUtils.toList(enumeration);

  assertEquals(iterableB,result);

  enumeration=FluentIterable.<Long>empty().asEnumeration();

  assertFalse(enumeration.hasMoreElements());

}

Location: FluentIterableTest.java

Content: 

@Test public void collate(){

  final List<Integer> result=FluentIterable.of(iterableOdd).collate(iterableEven).toList();

  final List<Integer> combinedList=new ArrayList<>();

  CollectionUtils.addAll(combinedList,iterableOdd);

  CollectionUtils.addAll(combinedList,iterableEven);

  Collections.sort(combinedList);

  assertEquals(combinedList,result);

  try {

    FluentIterable.of(iterableOdd).collate(null).toList();

    fail("expecting NullPointerException");

  }

 catch (  final NullPointerException npe) {

  }

}

Location: FluentIterableTest.java

Content: 

@Test public void collateWithComparator(){

  List<Integer> result=FluentIterable.of(iterableOdd).collate(iterableEven,ComparatorUtils.<Integer>naturalComparator()).toList();

  final List<Integer> combinedList=new ArrayList<>();

  CollectionUtils.addAll(combinedList,iterableOdd);

  CollectionUtils.addAll(combinedList,iterableEven);

  Collections.sort(combinedList);

  assertEquals(combinedList,result);

  result=FluentIterable.of(iterableOdd).collate(iterableEven,null).toList();

  assertEquals(combinedList,result);

}

Location: FluentIterableTest.java

Content: 

@Test public void contains(){

  assertTrue(FluentIterable.of(iterableEven).contains(2));

  assertFalse(FluentIterable.of(iterableEven).contains(1));

  assertFalse(FluentIterable.of(iterableEven).contains(null));

  assertTrue(FluentIterable.of(iterableEven).append((Integer)null).contains(null));

}

Location: FluentIterableTest.java

Content: 

@Test public void copyInto(){

  List<Integer> result=new ArrayList<>();

  FluentIterable.of(iterableA).copyInto(result);

  List<Integer> expected=IterableUtils.toList(iterableA);

  assertEquals(expected.size(),result.size());

  assertEquals(expected,result);

  result=new ArrayList<>();

  result.add(10);

  result.add(9);

  result.add(8);

  FluentIterable.of(iterableA).copyInto(result);

  expected=new ArrayList<>(Arrays.asList(10,9,8));

  expected.addAll(IterableUtils.toList(iterableA));

  assertEquals(expected.size(),result.size());

  assertEquals(expected,result);

  try {

    FluentIterable.of(iterableA).copyInto(null);

    fail("expecting NullPointerException");

  }

 catch (  final NullPointerException npe) {

  }

}

Location: FluentIterableTest.java

Content: 

@Test public void eval(){

  final List<Integer> listNumbers=new ArrayList<>(Arrays.asList(1,2,3,4,5,6,7,8,9,10));

  final FluentIterable<Integer> iterable=FluentIterable.of(listNumbers).filter(EVEN);

  final FluentIterable<Integer> materialized=iterable.eval();

  listNumbers.addAll(Arrays.asList(11,12,13,14,15,16,17,18,19,20));

  assertEquals(5,materialized.size());

  assertEquals(10,iterable.size());

  assertEquals(Arrays.asList(2,4,6,8,10),materialized.toList());

  assertEquals(Arrays.asList(2,4,6,8,10,12,14,16,18,20),iterable.toList());

}

Location: FluentIterableTest.java

Content: 

@Test public void factoryMethodOf(){

  FluentIterable<Integer> iterable=FluentIterable.of(1,2,3,4,5);

  List<Integer> result=iterable.toList();

  assertEquals(Arrays.asList(1,2,3,4,5),result);

  iterable=FluentIterable.of(1);

  assertEquals(1,iterable.size());

  assertFalse(iterable.isEmpty());

  assertEquals(Arrays.asList(1),iterable.toList());

  result=FluentIterable.of(new Integer[0]).toList();

  assertTrue(result.isEmpty());

  final Iterable<Integer> it=null;

  try {

    FluentIterable.of(it).toList();

    fail("expecting NullPointerException");

  }

 catch (  final NullPointerException npe) {

  }

}

Location: FluentIterableTest.java

Content: 

@Test public void filter(){

  final Predicate<Integer> smallerThan3=object -> object.intValue() < 3;

  List<Integer> result=FluentIterable.of(iterableA).filter(smallerThan3).toList();

  assertEquals(3,result.size());

  assertEquals(Arrays.asList(1,2,2),result);

  result=FluentIterable.of(emptyIterable).filter(smallerThan3).toList();

  assertEquals(0,result.size());

  try {

    FluentIterable.of(iterableA).filter(null).toList();

    fail("expecting NullPointerException");

  }

 catch (  final NullPointerException npe) {

  }

}

Location: FluentIterableTest.java

Content: 

@Test public void forEach(){

  final AtomicInteger sum=new AtomicInteger(0);

  final Closure<Integer> closure=input -> sum.addAndGet(input);

  FluentIterable.of(iterableA).forEach(closure);

  int expectedSum=0;

  for (  final Integer i : iterableA) {

    expectedSum+=i;

  }

  assertEquals(expectedSum,sum.get());

  try {

    FluentIterable.of(iterableA).forEach((Closure<Integer>)null);

    fail("expecting NullPointerException");

  }

 catch (  final NullPointerException npe) {

  }

}

Location: FluentIterableTest.java

Content: 

@Test public void get(){

  assertEquals(2,FluentIterable.of(iterableEven).get(0).intValue());

  try {

    FluentIterable.of(iterableEven).get(-1);

    fail("expecting IndexOutOfBoundsException");

  }

 catch (  final IndexOutOfBoundsException ioe) {

  }

  try {

    FluentIterable.of(iterableEven).get(IterableUtils.size(iterableEven));

    fail("expecting IndexOutOfBoundsException");

  }

 catch (  final IndexOutOfBoundsException ioe) {

  }

}

Location: FluentIterableTest.java

Content: 

@Test public void isEmpty(){

  assertTrue(FluentIterable.of(emptyIterable).isEmpty());

  assertFalse(FluentIterable.of(iterableOdd).isEmpty());

}

Location: FluentIterableTest.java

Content: 

@Test public void iterator(){

  Iterator<Integer> iterator=FluentIterable.of(iterableA).iterator();

  assertTrue(iterator.hasNext());

  iterator=FluentIterable.<Integer>empty().iterator();

  assertFalse(iterator.hasNext());

}

Location: FluentIterableTest.java

Content: 

@Test public void limit(){

  List<Integer> result=FluentIterable.of(iterableA).limit(3).toList();

  assertEquals(3,result.size());

  assertEquals(Arrays.asList(1,2,2),result);

  result=FluentIterable.of(iterableA).limit(100).toList();

  final List<Integer> expected=IterableUtils.toList(iterableA);

  assertEquals(expected.size(),result.size());

  assertEquals(expected,result);

  result=FluentIterable.of(iterableA).limit(0).toList();

  assertEquals(0,result.size());

  result=FluentIterable.of(emptyIterable).limit(3).toList();

  assertEquals(0,result.size());

  try {

    FluentIterable.of(iterableA).limit(-2).toList();

    fail("expecting IllegalArgumentException");

  }

 catch (  final IllegalArgumentException iae) {

  }

}

Location: FluentIterableTest.java

Content: 

@Test public void reverse(){

  List<Integer> result=FluentIterable.of(iterableA).reverse().toList();

  final List<Integer> expected=IterableUtils.toList(iterableA);

  Collections.reverse(expected);

  assertEquals(expected,result);

  result=FluentIterable.of(emptyIterable).reverse().toList();

  assertEquals(0,result.size());

}

Location: FluentIterableTest.java

Content: 

@Test public void size(){

  assertEquals(0,FluentIterable.of(emptyIterable).size());

  assertEquals(IterableUtils.toList(iterableOdd).size(),FluentIterable.of(iterableOdd).size());

}

Location: FluentIterableTest.java

Content: 

@Test public void skip(){

  List<Integer> result=FluentIterable.of(iterableA).skip(4).toList();

  assertEquals(6,result.size());

  assertEquals(Arrays.asList(3,3,4,4,4,4),result);

  result=FluentIterable.of(iterableA).skip(100).toList();

  assertEquals(0,result.size());

  result=FluentIterable.of(iterableA).skip(0).toList();

  final List<Integer> expected=IterableUtils.toList(iterableA);

  assertEquals(expected.size(),result.size());

  assertEquals(expected,result);

  result=FluentIterable.of(emptyIterable).skip(3).toList();

  assertEquals(0,result.size());

  try {

    FluentIterable.of(iterableA).skip(-4).toList();

    fail("expecting IllegalArgumentException");

  }

 catch (  final IllegalArgumentException iae) {

  }

}

Location: FluentIterableTest.java

Content: 

@SuppressWarnings({"rawtypes","unchecked"}) @Test public void toArray(){

  final Long[] arr=new Long[]{1L,2L,3L,4L,5L};

  final Long[] result=FluentIterable.of(arr).toArray(Long.class);

  assertNotNull(result);

  assertArrayEquals(arr,result);

  try {

    FluentIterable.of(arr).toArray((Class)String.class);

  }

 catch (  final ArrayStoreException ase) {

  }

}

Location: FluentIterableTest.java

Content: 

@Test public void transform(){

  final Transformer<Integer,Integer> squared=object -> object * object;

  List<Integer> result=FluentIterable.of(iterableA).transform(squared).toList();

  assertEquals(10,result.size());

  assertEquals(Arrays.asList(1,4,4,9,9,9,16,16,16,16),result);

  result=FluentIterable.of(emptyIterable).transform(squared).toList();

  assertEquals(0,result.size());

  try {

    FluentIterable.of(iterableA).transform(null).toList();

    fail("expecting NullPointerException");

  }

 catch (  final NullPointerException npe) {

  }

}

Location: FluentIterableTest.java

Content: 

@Test public void unique(){

  List<Integer> result=FluentIterable.of(iterableA).unique().toList();

  assertEquals(4,result.size());

  assertEquals(Arrays.asList(1,2,3,4),result);

  result=FluentIterable.of(emptyIterable).unique().toList();

  assertEquals(0,result.size());

}

Location: FluentIterableTest.java

Content: 

@Test public void unmodifiable(){

  final FluentIterable<Integer> iterable1=FluentIterable.of(iterableA).unmodifiable();

  final Iterator<Integer> it=iterable1.iterator();

  assertEquals(1,it.next().intValue());

  try {

    it.remove();

    fail("expecting UnsupportedOperationException");

  }

 catch (  final UnsupportedOperationException ise) {

  }

  final FluentIterable<Integer> iterable2=iterable1.unmodifiable();

  assertSame(iterable1,iterable2);

}

Location: FluentIterableTest.java

Content: 

@SuppressWarnings("unchecked") @Test public void zip(){

  List<Integer> result=FluentIterable.of(iterableOdd).zip(iterableEven).toList();

  List<Integer> combinedList=new ArrayList<>();

  CollectionUtils.addAll(combinedList,iterableOdd);

  CollectionUtils.addAll(combinedList,iterableEven);

  Collections.sort(combinedList);

  assertEquals(combinedList,result);

  try {

    FluentIterable.of(iterableOdd).zip((Iterable<Integer>)null).toList();

    fail("expecting NullPointerException");

  }

 catch (  final NullPointerException npe) {

  }

  result=FluentIterable.of(Arrays.asList(1,4,7)).zip(Arrays.asList(2,5,8),Arrays.asList(3,6,9)).toList();

  combinedList=Arrays.asList(1,2,3,4,5,6,7,8,9);

  assertEquals(combinedList,result);

}

