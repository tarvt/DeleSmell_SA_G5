Location: ReferenceMap.java

Content: 

/** 

 * Constructs a new  {@code ReferenceMap} that willuse hard references to keys and soft references to values.

 */

public ReferenceMap(){

  super(ReferenceStrength.HARD,ReferenceStrength.SOFT,DEFAULT_CAPACITY,DEFAULT_LOAD_FACTOR,false);

}

Location: ReferenceMap.java

Content: 

/** 

 * Constructs a new  {@code ReferenceMap} that willuse the specified types of references.

 * @param keyType  the type of reference to use for keys;must be  {@link AbstractReferenceMap.ReferenceStrength#HARD HARD}, {@link AbstractReferenceMap.ReferenceStrength#SOFT SOFT}, {@link AbstractReferenceMap.ReferenceStrength#WEAK WEAK}

 * @param valueType  the type of reference to use for values;must be  {@link AbstractReferenceMap.ReferenceStrength#HARD HARD}, {@link AbstractReferenceMap.ReferenceStrength#SOFT SOFT}, {@link AbstractReferenceMap.ReferenceStrength#WEAK WEAK}

 */

public ReferenceMap(final ReferenceStrength keyType,final ReferenceStrength valueType){

  super(keyType,valueType,DEFAULT_CAPACITY,DEFAULT_LOAD_FACTOR,false);

}

Location: ReferenceMap.java

Content: 

/** 

 * Constructs a new  {@code ReferenceMap} that willuse the specified types of references.

 * @param keyType  the type of reference to use for keys;must be  {@link AbstractReferenceMap.ReferenceStrength#HARD HARD}, {@link AbstractReferenceMap.ReferenceStrength#SOFT SOFT}, {@link AbstractReferenceMap.ReferenceStrength#WEAK WEAK}

 * @param valueType  the type of reference to use for values;must be  {@link AbstractReferenceMap.ReferenceStrength#HARD HARD}, {@link AbstractReferenceMap.ReferenceStrength#SOFT SOFT}, {@link AbstractReferenceMap.ReferenceStrength#WEAK WEAK}

 * @param purgeValues should the value be automatically purged when thekey is garbage collected

 */

public ReferenceMap(final ReferenceStrength keyType,final ReferenceStrength valueType,final boolean purgeValues){

  super(keyType,valueType,DEFAULT_CAPACITY,DEFAULT_LOAD_FACTOR,purgeValues);

}

Location: ReferenceMap.java

Content: 

/** 

 * Constructs a new  {@code ReferenceMap} with thespecified reference types, load factor and initial capacity.

 * @param keyType  the type of reference to use for keys;must be  {@link AbstractReferenceMap.ReferenceStrength#HARD HARD}, {@link AbstractReferenceMap.ReferenceStrength#SOFT SOFT}, {@link AbstractReferenceMap.ReferenceStrength#WEAK WEAK}

 * @param valueType  the type of reference to use for values;must be  {@link AbstractReferenceMap.ReferenceStrength#HARD HARD}, {@link AbstractReferenceMap.ReferenceStrength#SOFT SOFT}, {@link AbstractReferenceMap.ReferenceStrength#WEAK WEAK}

 * @param capacity  the initial capacity for the map

 * @param loadFactor  the load factor for the map

 */

public ReferenceMap(final ReferenceStrength keyType,final ReferenceStrength valueType,final int capacity,final float loadFactor){

  super(keyType,valueType,capacity,loadFactor,false);

}

Location: ReferenceMap.java

Content: 

/** 

 * Constructs a new  {@code ReferenceMap} with thespecified reference types, load factor and initial capacity.

 * @param keyType  the type of reference to use for keys;must be  {@link AbstractReferenceMap.ReferenceStrength#HARD HARD}, {@link AbstractReferenceMap.ReferenceStrength#SOFT SOFT}, {@link AbstractReferenceMap.ReferenceStrength#WEAK WEAK}

 * @param valueType  the type of reference to use for values;must be  {@link AbstractReferenceMap.ReferenceStrength#HARD HARD}, {@link AbstractReferenceMap.ReferenceStrength#SOFT SOFT}, {@link AbstractReferenceMap.ReferenceStrength#WEAK WEAK}

 * @param capacity  the initial capacity for the map

 * @param loadFactor  the load factor for the map

 * @param purgeValues  should the value be automatically purged when thekey is garbage collected

 */

public ReferenceMap(final ReferenceStrength keyType,final ReferenceStrength valueType,final int capacity,final float loadFactor,final boolean purgeValues){

  super(keyType,valueType,capacity,loadFactor,purgeValues);

}

Location: ReferenceMap.java

Content: 

/** 

 * Constructs a new  {@code ReferenceMap} that willuse hard references to keys and soft references to values.

 */

public ReferenceMap(){

  super(ReferenceStrength.HARD,ReferenceStrength.SOFT,DEFAULT_CAPACITY,DEFAULT_LOAD_FACTOR,false);

}

Location: ReferenceMap.java

Content: 

/** 

 * Constructs a new  {@code ReferenceMap} that willuse the specified types of references.

 * @param keyType  the type of reference to use for keys;must be  {@link AbstractReferenceMap.ReferenceStrength#HARD HARD}, {@link AbstractReferenceMap.ReferenceStrength#SOFT SOFT}, {@link AbstractReferenceMap.ReferenceStrength#WEAK WEAK}

 * @param valueType  the type of reference to use for values;must be  {@link AbstractReferenceMap.ReferenceStrength#HARD HARD}, {@link AbstractReferenceMap.ReferenceStrength#SOFT SOFT}, {@link AbstractReferenceMap.ReferenceStrength#WEAK WEAK}

 */

public ReferenceMap(final ReferenceStrength keyType,final ReferenceStrength valueType){

  super(keyType,valueType,DEFAULT_CAPACITY,DEFAULT_LOAD_FACTOR,false);

}

Location: ReferenceMap.java

Content: 

/** 

 * Constructs a new  {@code ReferenceMap} that willuse the specified types of references.

 * @param keyType  the type of reference to use for keys;must be  {@link AbstractReferenceMap.ReferenceStrength#HARD HARD}, {@link AbstractReferenceMap.ReferenceStrength#SOFT SOFT}, {@link AbstractReferenceMap.ReferenceStrength#WEAK WEAK}

 * @param valueType  the type of reference to use for values;must be  {@link AbstractReferenceMap.ReferenceStrength#HARD HARD}, {@link AbstractReferenceMap.ReferenceStrength#SOFT SOFT}, {@link AbstractReferenceMap.ReferenceStrength#WEAK WEAK}

 * @param purgeValues should the value be automatically purged when thekey is garbage collected

 */

public ReferenceMap(final ReferenceStrength keyType,final ReferenceStrength valueType,final boolean purgeValues){

  super(keyType,valueType,DEFAULT_CAPACITY,DEFAULT_LOAD_FACTOR,purgeValues);

}

Location: ReferenceMap.java

Content: 

/** 

 * Constructs a new  {@code ReferenceMap} with thespecified reference types, load factor and initial capacity.

 * @param keyType  the type of reference to use for keys;must be  {@link AbstractReferenceMap.ReferenceStrength#HARD HARD}, {@link AbstractReferenceMap.ReferenceStrength#SOFT SOFT}, {@link AbstractReferenceMap.ReferenceStrength#WEAK WEAK}

 * @param valueType  the type of reference to use for values;must be  {@link AbstractReferenceMap.ReferenceStrength#HARD HARD}, {@link AbstractReferenceMap.ReferenceStrength#SOFT SOFT}, {@link AbstractReferenceMap.ReferenceStrength#WEAK WEAK}

 * @param capacity  the initial capacity for the map

 * @param loadFactor  the load factor for the map

 */

public ReferenceMap(final ReferenceStrength keyType,final ReferenceStrength valueType,final int capacity,final float loadFactor){

  super(keyType,valueType,capacity,loadFactor,false);

}

Location: ReferenceMap.java

Content: 

/** 

 * Constructs a new  {@code ReferenceMap} with thespecified reference types, load factor and initial capacity.

 * @param keyType  the type of reference to use for keys;must be  {@link AbstractReferenceMap.ReferenceStrength#HARD HARD}, {@link AbstractReferenceMap.ReferenceStrength#SOFT SOFT}, {@link AbstractReferenceMap.ReferenceStrength#WEAK WEAK}

 * @param valueType  the type of reference to use for values;must be  {@link AbstractReferenceMap.ReferenceStrength#HARD HARD}, {@link AbstractReferenceMap.ReferenceStrength#SOFT SOFT}, {@link AbstractReferenceMap.ReferenceStrength#WEAK WEAK}

 * @param capacity  the initial capacity for the map

 * @param loadFactor  the load factor for the map

 * @param purgeValues  should the value be automatically purged when thekey is garbage collected

 */

public ReferenceMap(final ReferenceStrength keyType,final ReferenceStrength valueType,final int capacity,final float loadFactor,final boolean purgeValues){

  super(keyType,valueType,capacity,loadFactor,purgeValues);

}

