Location: EnumerationUtilsTest.java

Content: 

@Test public void getFromEnumeration() throws Exception {

  final Vector<String> vector=new Vector<>();

  vector.addElement("zero");

  vector.addElement("one");

  Enumeration<String> en=vector.elements();

  assertEquals("zero",EnumerationUtils.get(en,0));

  en=vector.elements();

  assertEquals("one",EnumerationUtils.get(en,1));

  try {

    EnumerationUtils.get(en,3);

    fail("Expecting IndexOutOfBoundsException.");

  }

 catch (  final IndexOutOfBoundsException e) {

  }

  assertFalse(en.hasMoreElements());

}

Location: EnumerationUtilsTest.java

Content: 

@Test public void testAsIterableFor(){

  final Vector<String> vector=new Vector<>();

  vector.addElement("zero");

  vector.addElement("one");

  final Enumeration<String> en=vector.elements();

  final Iterator<String> iterator=EnumerationUtils.asIterable(en).iterator();

  assertTrue(iterator.hasNext());

  assertEquals("zero",iterator.next());

  assertTrue(iterator.hasNext());

  assertEquals("one",iterator.next());

  assertFalse(iterator.hasNext());

}

Location: EnumerationUtilsTest.java

Content: 

@Test public void testAsIterableForNull(){

  try {

    EnumerationUtils.asIterable((Enumeration)null).iterator().next();

    fail("Expecting NullPointerException");

  }

 catch (  final NullPointerException ex) {

  }

}

Location: EnumerationUtilsTest.java

Content: 

@Test public void testToListWithHashtable(){

  final Hashtable<String,Integer> expected=new Hashtable<>();

  expected.put("one",Integer.valueOf(1));

  expected.put("two",Integer.valueOf(2));

  expected.put("three",Integer.valueOf(3));

  final List<Integer> actualEltList=EnumerationUtils.toList(expected.elements());

  assertEquals(expected.size(),actualEltList.size());

  assertTrue(actualEltList.contains(Integer.valueOf(1)));

  assertTrue(actualEltList.contains(Integer.valueOf(2)));

  assertTrue(actualEltList.contains(Integer.valueOf(3)));

  final List<Integer> expectedEltList=new ArrayList<>();

  expectedEltList.add(Integer.valueOf(1));

  expectedEltList.add(Integer.valueOf(2));

  expectedEltList.add(Integer.valueOf(3));

  assertTrue(actualEltList.containsAll(expectedEltList));

  final List<String> actualKeyList=EnumerationUtils.toList(expected.keys());

  assertEquals(expected.size(),actualEltList.size());

  assertTrue(actualKeyList.contains("one"));

  assertTrue(actualKeyList.contains("two"));

  assertTrue(actualKeyList.contains("three"));

  final List<String> expectedKeyList=new ArrayList<>();

  expectedKeyList.add("one");

  expectedKeyList.add("two");

  expectedKeyList.add("three");

  assertTrue(actualKeyList.containsAll(expectedKeyList));

}

Location: EnumerationUtilsTest.java

Content: 

@Test public void testToListWithStringTokenizer(){

  final List<String> expectedList1=new ArrayList<>();

  final StringTokenizer st=new StringTokenizer(TO_LIST_FIXTURE);

  while (st.hasMoreTokens()) {

    expectedList1.add(st.nextToken());

  }

  final List<String> expectedList2=new ArrayList<>();

  expectedList2.add("this");

  expectedList2.add("is");

  expectedList2.add("a");

  expectedList2.add("test");

  final List<String> actualList=EnumerationUtils.toList(new StringTokenizer(TO_LIST_FIXTURE));

  assertEquals(expectedList1,expectedList2);

  assertEquals(expectedList1,actualList);

  assertEquals(expectedList2,actualList);

}

Location: EnumerationUtilsTest.java

Content: 

@Test public void getFromEnumeration() throws Exception {

  final Vector<String> vector=new Vector<>();

  vector.addElement("zero");

  vector.addElement("one");

  Enumeration<String> en=vector.elements();

  assertEquals("zero",EnumerationUtils.get(en,0));

  en=vector.elements();

  assertEquals("one",EnumerationUtils.get(en,1));

  try {

    EnumerationUtils.get(en,3);

    fail("Expecting IndexOutOfBoundsException.");

  }

 catch (  final IndexOutOfBoundsException e) {

  }

  assertFalse(en.hasMoreElements());

}

Location: EnumerationUtilsTest.java

Content: 

@Test public void testAsIterableFor(){

  final Vector<String> vector=new Vector<>();

  vector.addElement("zero");

  vector.addElement("one");

  final Enumeration<String> en=vector.elements();

  final Iterator<String> iterator=EnumerationUtils.asIterable(en).iterator();

  assertTrue(iterator.hasNext());

  assertEquals("zero",iterator.next());

  assertTrue(iterator.hasNext());

  assertEquals("one",iterator.next());

  assertFalse(iterator.hasNext());

}

Location: EnumerationUtilsTest.java

Content: 

@Test public void testAsIterableForNull(){

  try {

    EnumerationUtils.asIterable((Enumeration)null).iterator().next();

    fail("Expecting NullPointerException");

  }

 catch (  final NullPointerException ex) {

  }

}

Location: EnumerationUtilsTest.java

Content: 

@Test public void testToListWithHashtable(){

  final Hashtable<String,Integer> expected=new Hashtable<>();

  expected.put("one",Integer.valueOf(1));

  expected.put("two",Integer.valueOf(2));

  expected.put("three",Integer.valueOf(3));

  final List<Integer> actualEltList=EnumerationUtils.toList(expected.elements());

  assertEquals(expected.size(),actualEltList.size());

  assertTrue(actualEltList.contains(Integer.valueOf(1)));

  assertTrue(actualEltList.contains(Integer.valueOf(2)));

  assertTrue(actualEltList.contains(Integer.valueOf(3)));

  final List<Integer> expectedEltList=new ArrayList<>();

  expectedEltList.add(Integer.valueOf(1));

  expectedEltList.add(Integer.valueOf(2));

  expectedEltList.add(Integer.valueOf(3));

  assertTrue(actualEltList.containsAll(expectedEltList));

  final List<String> actualKeyList=EnumerationUtils.toList(expected.keys());

  assertEquals(expected.size(),actualEltList.size());

  assertTrue(actualKeyList.contains("one"));

  assertTrue(actualKeyList.contains("two"));

  assertTrue(actualKeyList.contains("three"));

  final List<String> expectedKeyList=new ArrayList<>();

  expectedKeyList.add("one");

  expectedKeyList.add("two");

  expectedKeyList.add("three");

  assertTrue(actualKeyList.containsAll(expectedKeyList));

}

Location: EnumerationUtilsTest.java

Content: 

@Test public void testToListWithStringTokenizer(){

  final List<String> expectedList1=new ArrayList<>();

  final StringTokenizer st=new StringTokenizer(TO_LIST_FIXTURE);

  while (st.hasMoreTokens()) {

    expectedList1.add(st.nextToken());

  }

  final List<String> expectedList2=new ArrayList<>();

  expectedList2.add("this");

  expectedList2.add("is");

  expectedList2.add("a");

  expectedList2.add("test");

  final List<String> actualList=EnumerationUtils.toList(new StringTokenizer(TO_LIST_FIXTURE));

  assertEquals(expectedList1,expectedList2);

  assertEquals(expectedList1,actualList);

  assertEquals(expectedList2,actualList);

}

