Location: AbstractDualBidiMap.java

Content: 

/** 

 * Creates an empty map, initialized by  {@code createMap}. <p> This constructor remains in place for deserialization. All other usage is deprecated in favour of {@link #AbstractDualBidiMap(Map,Map)}.

 */

protected AbstractDualBidiMap(){

}

Location: AbstractDualBidiMap.java

Content: 

/** 

 * Creates an empty map using the two maps specified as storage. <p> The two maps must be a matching pair, normal and reverse. They will typically both be empty. <p> Neither map is validated, so nulls may be passed in. If you choose to do this then the subclass constructor must populate the  {@code maps[]} instance variable itself.

 * @param normalMap  the normal direction map

 * @param reverseMap  the reverse direction map

 * @since 3.1

 */

protected AbstractDualBidiMap(final Map<K,V> normalMap,final Map<V,K> reverseMap){

  this.normalMap=normalMap;

  this.reverseMap=reverseMap;

}

Location: AbstractDualBidiMap.java

Content: 

/** 

 * Constructs a map that decorates the specified maps, used by the subclass  {@code createBidiMap} implementation.

 * @param normalMap  the normal direction map

 * @param reverseMap  the reverse direction map

 * @param inverseBidiMap  the inverse BidiMap

 */

protected AbstractDualBidiMap(final Map<K,V> normalMap,final Map<V,K> reverseMap,final BidiMap<V,K> inverseBidiMap){

  this.normalMap=normalMap;

  this.reverseMap=reverseMap;

  this.inverseBidiMap=inverseBidiMap;

}

Location: AbstractDualBidiMap.java

Content: 

/** 

 * Creates an entry set iterator. Subclasses can override this to return iterators with different properties.

 * @param iterator  the iterator to decorate

 * @return the entrySet iterator

 */

protected Iterator<Map.Entry<K,V>> createEntrySetIterator(final Iterator<Map.Entry<K,V>> iterator){

  return new EntrySetIterator<>(iterator,this);

}

Location: AbstractDualBidiMap.java

Content: 

/** 

 * Creates a key set iterator. Subclasses can override this to return iterators with different properties.

 * @param iterator  the iterator to decorate

 * @return the keySet iterator

 */

protected Iterator<K> createKeySetIterator(final Iterator<K> iterator){

  return new KeySetIterator<>(iterator,this);

}

Location: AbstractDualBidiMap.java

Content: 

/** 

 * Creates a values iterator. Subclasses can override this to return iterators with different properties.

 * @param iterator  the iterator to decorate

 * @return the values iterator

 */

protected Iterator<V> createValuesIterator(final Iterator<V> iterator){

  return new ValuesIterator<>(iterator,this);

}

Location: AbstractDualBidiMap.java

Content: 

/** 

 * Creates an empty map, initialized by  {@code createMap}. <p> This constructor remains in place for deserialization. All other usage is deprecated in favour of {@link #AbstractDualBidiMap(Map,Map)}.

 */

protected AbstractDualBidiMap(){

}

Location: AbstractDualBidiMap.java

Content: 

/** 

 * Creates an empty map using the two maps specified as storage. <p> The two maps must be a matching pair, normal and reverse. They will typically both be empty. <p> Neither map is validated, so nulls may be passed in. If you choose to do this then the subclass constructor must populate the  {@code maps[]} instance variable itself.

 * @param normalMap  the normal direction map

 * @param reverseMap  the reverse direction map

 * @since 3.1

 */

protected AbstractDualBidiMap(final Map<K,V> normalMap,final Map<V,K> reverseMap){

  this.normalMap=normalMap;

  this.reverseMap=reverseMap;

}

Location: AbstractDualBidiMap.java

Content: 

/** 

 * Constructs a map that decorates the specified maps, used by the subclass  {@code createBidiMap} implementation.

 * @param normalMap  the normal direction map

 * @param reverseMap  the reverse direction map

 * @param inverseBidiMap  the inverse BidiMap

 */

protected AbstractDualBidiMap(final Map<K,V> normalMap,final Map<V,K> reverseMap,final BidiMap<V,K> inverseBidiMap){

  this.normalMap=normalMap;

  this.reverseMap=reverseMap;

  this.inverseBidiMap=inverseBidiMap;

}

Location: AbstractDualBidiMap.java

Content: 

/** 

 * Creates an entry set iterator. Subclasses can override this to return iterators with different properties.

 * @param iterator  the iterator to decorate

 * @return the entrySet iterator

 */

protected Iterator<Map.Entry<K,V>> createEntrySetIterator(final Iterator<Map.Entry<K,V>> iterator){

  return new EntrySetIterator<>(iterator,this);

}

Location: AbstractDualBidiMap.java

Content: 

/** 

 * Creates a key set iterator. Subclasses can override this to return iterators with different properties.

 * @param iterator  the iterator to decorate

 * @return the keySet iterator

 */

protected Iterator<K> createKeySetIterator(final Iterator<K> iterator){

  return new KeySetIterator<>(iterator,this);

}

Location: AbstractDualBidiMap.java

Content: 

/** 

 * Creates a values iterator. Subclasses can override this to return iterators with different properties.

 * @param iterator  the iterator to decorate

 * @return the values iterator

 */

protected Iterator<V> createValuesIterator(final Iterator<V> iterator){

  return new ValuesIterator<>(iterator,this);

}

