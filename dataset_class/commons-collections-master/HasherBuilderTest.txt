Location: HasherBuilderTest.java

Content: 

/** 

 * Gets a string with non-standard characters.

 * @return the extended string

 */

static String getExtendedString(){

  final char[] data={'e','x','t','e','n','d','e','d',' ',0xCA98,0xD803,0xDE6D};

  return String.valueOf(data);

}

Location: HasherBuilderTest.java

Content: 

/** 

 * Tests that adding CharSequence items works correctly.

 */

@Test public void withCharSequenceTest(){

  final String ascii="plain";

  final String extended=getExtendedString();

  for (  final String s : new String[]{ascii,extended}) {

    for (    final Charset cs : new Charset[]{StandardCharsets.ISO_8859_1,StandardCharsets.UTF_8,StandardCharsets.UTF_16}) {

      final TestBuilder builder=new TestBuilder();

      builder.with(s,cs);

      assertArrayEquals(s.getBytes(cs),builder.items.get(0));

    }

  }

}

Location: HasherBuilderTest.java

Content: 

/** 

 * Tests that adding unencoded CharSequence items works correctly.

 */

@Test public void withUnencodedCharSequenceTest(){

  final String ascii="plain";

  final String extended=getExtendedString();

  for (  final String s : new String[]{ascii,extended}) {

    final TestBuilder builder=new TestBuilder();

    builder.withUnencoded(s);

    final byte[] encoded=builder.items.get(0);

    final char[] original=s.toCharArray();

    assertEquals(original.length * 2,encoded.length);

    final CharBuffer buffer=ByteBuffer.wrap(encoded).order(ByteOrder.LITTLE_ENDIAN).asCharBuffer();

    for (int i=0; i < original.length; i++) {

      assertEquals(original[i],buffer.get(i));

    }

  }

}

Location: HasherBuilderTest.java

Content: 

/** 

 * Gets a string with non-standard characters.

 * @return the extended string

 */

static String getExtendedString(){

  final char[] data={'e','x','t','e','n','d','e','d',' ',0xCA98,0xD803,0xDE6D};

  return String.valueOf(data);

}

Location: HasherBuilderTest.java

Content: 

/** 

 * Tests that adding CharSequence items works correctly.

 */

@Test public void withCharSequenceTest(){

  final String ascii="plain";

  final String extended=getExtendedString();

  for (  final String s : new String[]{ascii,extended}) {

    for (    final Charset cs : new Charset[]{StandardCharsets.ISO_8859_1,StandardCharsets.UTF_8,StandardCharsets.UTF_16}) {

      final TestBuilder builder=new TestBuilder();

      builder.with(s,cs);

      assertArrayEquals(s.getBytes(cs),builder.items.get(0));

    }

  }

}

Location: HasherBuilderTest.java

Content: 

/** 

 * Tests that adding unencoded CharSequence items works correctly.

 */

@Test public void withUnencodedCharSequenceTest(){

  final String ascii="plain";

  final String extended=getExtendedString();

  for (  final String s : new String[]{ascii,extended}) {

    final TestBuilder builder=new TestBuilder();

    builder.withUnencoded(s);

    final byte[] encoded=builder.items.get(0);

    final char[] original=s.toCharArray();

    assertEquals(original.length * 2,encoded.length);

    final CharBuffer buffer=ByteBuffer.wrap(encoded).order(ByteOrder.LITTLE_ENDIAN).asCharBuffer();

    for (int i=0; i < original.length; i++) {

      assertEquals(original[i],buffer.get(i));

    }

  }

}

