Location: LazyMapTest.java

Content: 

public LazyMapTest(final String testName){

  super(testName);

}

Location: LazyMapTest.java

Content: 

@Test public void mapGetWithFactory(){

  Map<Integer,Number> map=lazyMap(new HashMap<Integer,Number>(),oneFactory);

  assertEquals(0,map.size());

  final Number i1=map.get("Five");

  assertEquals(1,i1);

  assertEquals(1,map.size());

  final Number i2=map.get(new String(new char[]{'F','i','v','e'}));

  assertEquals(1,i2);

  assertEquals(1,map.size());

  assertSame(i1,i2);

  map=lazyMap(new HashMap<Integer,Number>(),FactoryUtils.<Long>nullFactory());

  final Object o=map.get("Five");

  assertNull(o);

  assertEquals(1,map.size());

}

Location: LazyMapTest.java

Content: 

@Test public void mapGetWithTransformer(){

  final Transformer<Number,Integer> intConverter=Number::intValue;

  final Map<Long,Number> map=lazyMap(new HashMap<Long,Number>(),intConverter);

  assertEquals(0,map.size());

  final Number i1=map.get(123L);

  assertEquals(123,i1);

  assertEquals(1,map.size());

}

Location: LazyMapTest.java

Content: 

public LazyMapTest(final String testName){

  super(testName);

}

Location: LazyMapTest.java

Content: 

@Test public void mapGetWithFactory(){

  Map<Integer,Number> map=lazyMap(new HashMap<Integer,Number>(),oneFactory);

  assertEquals(0,map.size());

  final Number i1=map.get("Five");

  assertEquals(1,i1);

  assertEquals(1,map.size());

  final Number i2=map.get(new String(new char[]{'F','i','v','e'}));

  assertEquals(1,i2);

  assertEquals(1,map.size());

  assertSame(i1,i2);

  map=lazyMap(new HashMap<Integer,Number>(),FactoryUtils.<Long>nullFactory());

  final Object o=map.get("Five");

  assertNull(o);

  assertEquals(1,map.size());

}

Location: LazyMapTest.java

Content: 

@Test public void mapGetWithTransformer(){

  final Transformer<Number,Integer> intConverter=Number::intValue;

  final Map<Long,Number> map=lazyMap(new HashMap<Long,Number>(),intConverter);

  assertEquals(0,map.size());

  final Number i1=map.get(123L);

  assertEquals(123,i1);

  assertEquals(1,map.size());

}

