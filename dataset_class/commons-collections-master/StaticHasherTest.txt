Location: StaticHasherTest.java

Content: 

/** 

 * Compare 2 static hashers to verify they have the same bits enabled.

 * @param hasher1 the first static hasher.

 * @param hasher2 the second static hasher.

 */

private void assertSameBits(final StaticHasher hasher1,final StaticHasher hasher2){

  final OfInt iter1=hasher1.iterator(shape);

  final OfInt iter2=hasher2.iterator(shape);

  while (iter1.hasNext()) {

    assertTrue(iter2.hasNext(),"Not enough data in second hasher");

    assertEquals(iter1.nextInt(),iter2.nextInt());

  }

  assertFalse(iter2.hasNext(),"Too much data in second hasher");

}

Location: StaticHasherTest.java

Content: 

/** 

 * Tests that passing a hasher other than a StaticHasher to the constructor works as expected.

 */

@Test public void testConstructor_Hasher(){

  final int[] expected={1,3,5,7,9};

  final Hasher testHasher=new Hasher(){

    @Override public OfInt iterator(    final Shape shape){

      final int[] values={1,3,5,7,9,3,5,1};

      return Arrays.stream(values).iterator();

    }

    @Override public HashFunctionIdentity getHashFunctionIdentity(){

      return testFunction;

    }

  }

;

  final StaticHasher hasher=new StaticHasher(testHasher,shape);

  final OfInt iter=hasher.iterator(shape);

  for (  final int element : expected) {

    assertTrue(iter.hasNext());

    assertEquals(element,iter.nextInt());

  }

  assertFalse(iter.hasNext());

}

Location: StaticHasherTest.java

Content: 

/** 

 * Tests that passing a hasher other than a StaticHasher and the wrong Shape to the constructor throws an IllegalArgumentException.

 */

@Test public void testConstructor_Hasher_WrongShape(){

  final Hasher testHasher=new Hasher(){

    @Override public OfInt iterator(    final Shape shape){

      final int[] values={1,3,5,7,9,3,5,1};

      return Arrays.stream(values).iterator();

    }

    @Override public HashFunctionIdentity getHashFunctionIdentity(){

      return testFunctionX;

    }

  }

;

  try {

    new StaticHasher(testHasher,shape);

    fail("Should have thrown IllegalArgumentException");

  }

 catch (  final IllegalArgumentException expected) {

  }

}

Location: StaticHasherTest.java

Content: 

/** 

 * Test that the iterator based constructor works correctly and removes duplicates.

 */

@Test public void testConstructor_Iterator(){

  final int[] values={1,3,5,7,9,3,5,1};

  Iterator<Integer> iter=Arrays.stream(values).iterator();

  final StaticHasher hasher=new StaticHasher(iter,shape);

  assertEquals(5,hasher.size());

  assertEquals(shape,hasher.getShape());

  assertEquals(testFunction.getName(),hasher.getHashFunctionIdentity().getName());

  assertEquals(testFunction.getProcessType(),hasher.getHashFunctionIdentity().getProcessType());

  assertEquals(testFunction.getProvider(),hasher.getHashFunctionIdentity().getProvider());

  assertEquals(testFunction.getSignedness(),hasher.getHashFunctionIdentity().getSignedness());

  iter=hasher.iterator(shape);

  int idx=0;

  while (iter.hasNext()) {

    assertEquals(Integer.valueOf(values[idx]),iter.next(),"Error at idx " + idx);

    idx++;

  }

  assertEquals(5,idx);

}

Location: StaticHasherTest.java

Content: 

/** 

 * Tests that if the iterator passed to the constructor contains a value greater than or equal to Shape.numberOfBits() an exception is thrown.

 */

@Test public void testConstructor_Iterator_ValueTooBig(){

  final int[] values={shape.getNumberOfBits(),3,5,7,9,3,5,1};

  final Iterator<Integer> iter=Arrays.stream(values).iterator();

  try {

    new StaticHasher(iter,shape);

    fail("Should have thrown IllegalArgumentException");

  }

 catch (  final IllegalArgumentException expected) {

  }

}

Location: StaticHasherTest.java

Content: 

/** 

 * Tests that if the iterator passed to the constructor contains a value less than 0 (zero) an exception is thrown.

 */

@Test public void testConstructor_Iterator_ValueTooSmall(){

  final int[] values={-1,3,5,7,9,3,5,1};

  final Iterator<Integer> iter=Arrays.stream(values).iterator();

  try {

    new StaticHasher(iter,shape);

    fail("Should have thrown IllegalArgumentException");

  }

 catch (  final IllegalArgumentException expected) {

  }

}

Location: StaticHasherTest.java

Content: 

/** 

 * Tests that the constructor that accepts a static hasher properly builds the hasher.

 */

@Test public void testConstructor_StaticHasher(){

  final int[] values={1,3,5,7,9,3,5,1};

  final Iterator<Integer> iter=Arrays.stream(values).iterator();

  final StaticHasher hasher=new StaticHasher(iter,shape);

  final StaticHasher hasher2=new StaticHasher(hasher,shape);

  assertEquals(shape,hasher2.getShape());

  assertSameBits(hasher,hasher2);

}

Location: StaticHasherTest.java

Content: 

/** 

 * Tests that calling the constructor with a hasher and the wrong shape throws an IllegalArgumentException.

 */

@Test public void testConstructor_StaticHasher_WrongShape(){

  final int[] values={1,3,5,7,9,3,5,1};

  final Iterator<Integer> iter=Arrays.stream(values).iterator();

  final StaticHasher hasher=new StaticHasher(iter,new Shape(testFunctionX,3,72,17));

  try {

    new StaticHasher(hasher,shape);

    fail("Should have thrown IllegalArgumentException");

  }

 catch (  final IllegalArgumentException expected) {

  }

}

Location: StaticHasherTest.java

Content: 

/** 

 * Tests that iterator returns the proper values.

 */

@Test public void testGetBits(){

  final List<Integer> lst=Arrays.asList(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16);

  final StaticHasher hasher=new StaticHasher(lst.iterator(),shape);

  assertEquals(17,hasher.size());

  final OfInt iter=hasher.iterator(shape);

  for (int i=0; i < 17; i++) {

    assertTrue(iter.hasNext());

    assertEquals(i,iter.nextInt());

  }

  assertFalse(iter.hasNext());

}

Location: StaticHasherTest.java

Content: 

/** 

 * Tests that iterator does not return duplicates and orders the indices.

 */

@Test public void testGetBits_DuplicateValues(){

  final int[] input={6,69,44,19,10,57,48,23,70,61,36,11,2,49,24,15,62,1,63,53,43,17,7,69,59,49,39,13,3,65,55,45,35,25};

  final int[] expected={1,2,3,6,7,10,11,13,15,17,19,23,24,25,35,36,39,43,44,45,48,49,53,55,57,59,61,62,63,65,69,70};

  final StaticHasher hasher=new StaticHasher(Arrays.stream(input).iterator(),shape);

  final OfInt iter=hasher.iterator(shape);

  for (  final int element : expected) {

    assertTrue(iter.hasNext());

    assertEquals(element,iter.nextInt());

  }

  assertFalse(iter.hasNext());

}

Location: StaticHasherTest.java

Content: 

/** 

 * Tests that gitBits is called with the wrong shape an exception is thrown.

 */

@Test public void testGetBits_WrongShape(){

  final List<Integer> lst=Arrays.asList(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16);

  final StaticHasher hasher=new StaticHasher(lst.iterator(),shape);

  try {

    hasher.iterator(new Shape(testFunctionX,3,72,17));

    fail("Should have thrown IllegalArgumentException");

  }

 catch (  final IllegalArgumentException expected) {

  }

}

Location: StaticHasherTest.java

Content: 

/** 

 * Compare 2 static hashers to verify they have the same bits enabled.

 * @param hasher1 the first static hasher.

 * @param hasher2 the second static hasher.

 */

private void assertSameBits(final StaticHasher hasher1,final StaticHasher hasher2){

  final OfInt iter1=hasher1.iterator(shape);

  final OfInt iter2=hasher2.iterator(shape);

  while (iter1.hasNext()) {

    assertTrue(iter2.hasNext(),"Not enough data in second hasher");

    assertEquals(iter1.nextInt(),iter2.nextInt());

  }

  assertFalse(iter2.hasNext(),"Too much data in second hasher");

}

Location: StaticHasherTest.java

Content: 

/** 

 * Tests that passing a hasher other than a StaticHasher to the constructor works as expected.

 */

@Test public void testConstructor_Hasher(){

  final int[] expected={1,3,5,7,9};

  final Hasher testHasher=new Hasher(){

    @Override public OfInt iterator(    final Shape shape){

      final int[] values={1,3,5,7,9,3,5,1};

      return Arrays.stream(values).iterator();

    }

    @Override public HashFunctionIdentity getHashFunctionIdentity(){

      return testFunction;

    }

  }

;

  final StaticHasher hasher=new StaticHasher(testHasher,shape);

  final OfInt iter=hasher.iterator(shape);

  for (  final int element : expected) {

    assertTrue(iter.hasNext());

    assertEquals(element,iter.nextInt());

  }

  assertFalse(iter.hasNext());

}

Location: StaticHasherTest.java

Content: 

/** 

 * Tests that passing a hasher other than a StaticHasher and the wrong Shape to the constructor throws an IllegalArgumentException.

 */

@Test public void testConstructor_Hasher_WrongShape(){

  final Hasher testHasher=new Hasher(){

    @Override public OfInt iterator(    final Shape shape){

      final int[] values={1,3,5,7,9,3,5,1};

      return Arrays.stream(values).iterator();

    }

    @Override public HashFunctionIdentity getHashFunctionIdentity(){

      return testFunctionX;

    }

  }

;

  try {

    new StaticHasher(testHasher,shape);

    fail("Should have thrown IllegalArgumentException");

  }

 catch (  final IllegalArgumentException expected) {

  }

}

Location: StaticHasherTest.java

Content: 

/** 

 * Test that the iterator based constructor works correctly and removes duplicates.

 */

@Test public void testConstructor_Iterator(){

  final int[] values={1,3,5,7,9,3,5,1};

  Iterator<Integer> iter=Arrays.stream(values).iterator();

  final StaticHasher hasher=new StaticHasher(iter,shape);

  assertEquals(5,hasher.size());

  assertEquals(shape,hasher.getShape());

  assertEquals(testFunction.getName(),hasher.getHashFunctionIdentity().getName());

  assertEquals(testFunction.getProcessType(),hasher.getHashFunctionIdentity().getProcessType());

  assertEquals(testFunction.getProvider(),hasher.getHashFunctionIdentity().getProvider());

  assertEquals(testFunction.getSignedness(),hasher.getHashFunctionIdentity().getSignedness());

  iter=hasher.iterator(shape);

  int idx=0;

  while (iter.hasNext()) {

    assertEquals(Integer.valueOf(values[idx]),iter.next(),"Error at idx " + idx);

    idx++;

  }

  assertEquals(5,idx);

}

Location: StaticHasherTest.java

Content: 

/** 

 * Tests that if the iterator passed to the constructor contains a value greater than or equal to Shape.numberOfBits() an exception is thrown.

 */

@Test public void testConstructor_Iterator_ValueTooBig(){

  final int[] values={shape.getNumberOfBits(),3,5,7,9,3,5,1};

  final Iterator<Integer> iter=Arrays.stream(values).iterator();

  try {

    new StaticHasher(iter,shape);

    fail("Should have thrown IllegalArgumentException");

  }

 catch (  final IllegalArgumentException expected) {

  }

}

Location: StaticHasherTest.java

Content: 

/** 

 * Tests that if the iterator passed to the constructor contains a value less than 0 (zero) an exception is thrown.

 */

@Test public void testConstructor_Iterator_ValueTooSmall(){

  final int[] values={-1,3,5,7,9,3,5,1};

  final Iterator<Integer> iter=Arrays.stream(values).iterator();

  try {

    new StaticHasher(iter,shape);

    fail("Should have thrown IllegalArgumentException");

  }

 catch (  final IllegalArgumentException expected) {

  }

}

Location: StaticHasherTest.java

Content: 

/** 

 * Tests that the constructor that accepts a static hasher properly builds the hasher.

 */

@Test public void testConstructor_StaticHasher(){

  final int[] values={1,3,5,7,9,3,5,1};

  final Iterator<Integer> iter=Arrays.stream(values).iterator();

  final StaticHasher hasher=new StaticHasher(iter,shape);

  final StaticHasher hasher2=new StaticHasher(hasher,shape);

  assertEquals(shape,hasher2.getShape());

  assertSameBits(hasher,hasher2);

}

Location: StaticHasherTest.java

Content: 

/** 

 * Tests that calling the constructor with a hasher and the wrong shape throws an IllegalArgumentException.

 */

@Test public void testConstructor_StaticHasher_WrongShape(){

  final int[] values={1,3,5,7,9,3,5,1};

  final Iterator<Integer> iter=Arrays.stream(values).iterator();

  final StaticHasher hasher=new StaticHasher(iter,new Shape(testFunctionX,3,72,17));

  try {

    new StaticHasher(hasher,shape);

    fail("Should have thrown IllegalArgumentException");

  }

 catch (  final IllegalArgumentException expected) {

  }

}

Location: StaticHasherTest.java

Content: 

/** 

 * Tests that iterator returns the proper values.

 */

@Test public void testGetBits(){

  final List<Integer> lst=Arrays.asList(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16);

  final StaticHasher hasher=new StaticHasher(lst.iterator(),shape);

  assertEquals(17,hasher.size());

  final OfInt iter=hasher.iterator(shape);

  for (int i=0; i < 17; i++) {

    assertTrue(iter.hasNext());

    assertEquals(i,iter.nextInt());

  }

  assertFalse(iter.hasNext());

}

Location: StaticHasherTest.java

Content: 

/** 

 * Tests that iterator does not return duplicates and orders the indices.

 */

@Test public void testGetBits_DuplicateValues(){

  final int[] input={6,69,44,19,10,57,48,23,70,61,36,11,2,49,24,15,62,1,63,53,43,17,7,69,59,49,39,13,3,65,55,45,35,25};

  final int[] expected={1,2,3,6,7,10,11,13,15,17,19,23,24,25,35,36,39,43,44,45,48,49,53,55,57,59,61,62,63,65,69,70};

  final StaticHasher hasher=new StaticHasher(Arrays.stream(input).iterator(),shape);

  final OfInt iter=hasher.iterator(shape);

  for (  final int element : expected) {

    assertTrue(iter.hasNext());

    assertEquals(element,iter.nextInt());

  }

  assertFalse(iter.hasNext());

}

Location: StaticHasherTest.java

Content: 

/** 

 * Tests that gitBits is called with the wrong shape an exception is thrown.

 */

@Test public void testGetBits_WrongShape(){

  final List<Integer> lst=Arrays.asList(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16);

  final StaticHasher hasher=new StaticHasher(lst.iterator(),shape);

  try {

    hasher.iterator(new Shape(testFunctionX,3,72,17));

    fail("Should have thrown IllegalArgumentException");

  }

 catch (  final IllegalArgumentException expected) {

  }

}

