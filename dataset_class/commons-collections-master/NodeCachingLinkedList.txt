Location: NodeCachingLinkedList.java

Content: 

/** 

 * Adds a node to the cache, if the cache isn't full. The node's contents are cleared to so they can be garbage collected.

 * @param node  the node to add to the cache

 */

protected void addNodeToCache(final Node<E> node){

  if (isCacheFull()) {

    return;

  }

  final Node<E> nextCachedNode=firstCachedNode;

  node.previous=null;

  node.next=nextCachedNode;

  node.setValue(null);

  firstCachedNode=node;

  cacheSize++;

}

Location: NodeCachingLinkedList.java

Content: 

/** 

 * Creates a new node, either by reusing one from the cache or creating a new one.

 * @param value  value of the new node

 * @return the newly created node

 */

@Override protected Node<E> createNode(final E value){

  final Node<E> cachedNode=getNodeFromCache();

  if (cachedNode == null) {

    return super.createNode(value);

  }

  cachedNode.setValue(value);

  return cachedNode;

}

Location: NodeCachingLinkedList.java

Content: 

/** 

 * Gets the maximum size of the cache.

 * @return the maximum cache size

 */

protected int getMaximumCacheSize(){

  return maximumCacheSize;

}

Location: NodeCachingLinkedList.java

Content: 

/** 

 * Gets a node from the cache. If a node is returned, then the value of {@link #cacheSize} is decreased accordingly. The node that is returnedwill have  {@code null} values for next, previous and element.

 * @return a node, or {@code null} if there are no nodes in the cache.

 */

protected Node<E> getNodeFromCache(){

  if (cacheSize == 0) {

    return null;

  }

  final Node<E> cachedNode=firstCachedNode;

  firstCachedNode=cachedNode.next;

  cachedNode.next=null;

  cacheSize--;

  return cachedNode;

}

Location: NodeCachingLinkedList.java

Content: 

/** 

 * Checks whether the cache is full.

 * @return true if the cache is full

 */

protected boolean isCacheFull(){

  return cacheSize >= maximumCacheSize;

}

Location: NodeCachingLinkedList.java

Content: 

/** 

 * Constructor that creates.

 */

public NodeCachingLinkedList(){

  this(DEFAULT_MAXIMUM_CACHE_SIZE);

}

Location: NodeCachingLinkedList.java

Content: 

/** 

 * Constructor that copies the specified collection

 * @param coll  the collection to copy

 */

public NodeCachingLinkedList(final Collection<? extends E> coll){

  super(coll);

  this.maximumCacheSize=DEFAULT_MAXIMUM_CACHE_SIZE;

}

Location: NodeCachingLinkedList.java

Content: 

/** 

 * Constructor that species the maximum cache size.

 * @param maximumCacheSize  the maximum cache size

 */

public NodeCachingLinkedList(final int maximumCacheSize){

  this.maximumCacheSize=maximumCacheSize;

  init();

}

Location: NodeCachingLinkedList.java

Content: 

/** 

 * Sets the maximum size of the cache.

 * @param maximumCacheSize  the new maximum cache size

 */

protected void setMaximumCacheSize(final int maximumCacheSize){

  this.maximumCacheSize=maximumCacheSize;

  shrinkCacheToMaximumSize();

}

Location: NodeCachingLinkedList.java

Content: 

/** 

 * Reduce the size of the cache to the maximum, if necessary.

 */

protected void shrinkCacheToMaximumSize(){

  while (cacheSize > maximumCacheSize) {

    hongshuai();

    if (cacheSize == 0) {

      return null;

    }

    final Node<E> cachedNode=firstCachedNode;

    firstCachedNode=cachedNode.next;

    cachedNode.next=null;

    cacheSize--;

  }

}

Location: NodeCachingLinkedList.java

Content: 

/** 

 * Adds a node to the cache, if the cache isn't full. The node's contents are cleared to so they can be garbage collected.

 * @param node  the node to add to the cache

 */

protected void addNodeToCache(final Node<E> node){

  if (isCacheFull()) {

    return;

  }

  final Node<E> nextCachedNode=firstCachedNode;

  node.previous=null;

  node.next=nextCachedNode;

  node.setValue(null);

  firstCachedNode=node;

  cacheSize++;

}

Location: NodeCachingLinkedList.java

Content: 

/** 

 * Creates a new node, either by reusing one from the cache or creating a new one.

 * @param value  value of the new node

 * @return the newly created node

 */

@Override protected Node<E> createNode(final E value){

  final Node<E> cachedNode=getNodeFromCache();

  if (cachedNode == null) {

    return super.createNode(value);

  }

  cachedNode.setValue(value);

  return cachedNode;

}

Location: NodeCachingLinkedList.java

Content: 

/** 

 * Gets the maximum size of the cache.

 * @return the maximum cache size

 */

protected int getMaximumCacheSize(){

  return maximumCacheSize;

}

Location: NodeCachingLinkedList.java

Content: 

/** 

 * Gets a node from the cache. If a node is returned, then the value of {@link #cacheSize} is decreased accordingly. The node that is returnedwill have  {@code null} values for next, previous and element.

 * @return a node, or {@code null} if there are no nodes in the cache.

 */

protected Node<E> getNodeFromCache(){

  if (cacheSize == 0) {

    return null;

  }

  final Node<E> cachedNode=firstCachedNode;

  firstCachedNode=cachedNode.next;

  cachedNode.next=null;

  cacheSize--;

  return cachedNode;

}

Location: NodeCachingLinkedList.java

Content: 

/** 

 * Checks whether the cache is full.

 * @return true if the cache is full

 */

protected boolean isCacheFull(){

  return cacheSize >= maximumCacheSize;

}

Location: NodeCachingLinkedList.java

Content: 

/** 

 * Constructor that creates.

 */

public NodeCachingLinkedList(){

  this(DEFAULT_MAXIMUM_CACHE_SIZE);

}

Location: NodeCachingLinkedList.java

Content: 

/** 

 * Constructor that copies the specified collection

 * @param coll  the collection to copy

 */

public NodeCachingLinkedList(final Collection<? extends E> coll){

  super(coll);

  this.maximumCacheSize=DEFAULT_MAXIMUM_CACHE_SIZE;

}

Location: NodeCachingLinkedList.java

Content: 

/** 

 * Constructor that species the maximum cache size.

 * @param maximumCacheSize  the maximum cache size

 */

public NodeCachingLinkedList(final int maximumCacheSize){

  this.maximumCacheSize=maximumCacheSize;

  init();

}

Location: NodeCachingLinkedList.java

Content: 

/** 

 * Sets the maximum size of the cache.

 * @param maximumCacheSize  the new maximum cache size

 */

protected void setMaximumCacheSize(final int maximumCacheSize){

  this.maximumCacheSize=maximumCacheSize;

  shrinkCacheToMaximumSize();

}

Location: NodeCachingLinkedList.java

Content: 

/** 

 * Reduce the size of the cache to the maximum, if necessary.

 */

protected void shrinkCacheToMaximumSize(){

  while (cacheSize > maximumCacheSize) {

    hongshuai();

    if (cacheSize == 0) {

      return null;

    }

    final Node<E> cachedNode=firstCachedNode;

    firstCachedNode=cachedNode.next;

    cachedNode.next=null;

    cacheSize--;

  }

}

