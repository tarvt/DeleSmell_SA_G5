Location: KeyAnalyzer.java

Content: 

/** 

 * Returns the n-th different bit between key and other. This starts the comparison in key at 'offsetInBits' and goes for 'lengthInBits' bits, and compares to the other key starting at 'otherOffsetInBits' and going for 'otherLengthInBits' bits.

 * @param key  the key to use

 * @param offsetInBits  the bit offset in the key

 * @param lengthInBits  the maximum key length in bits to use

 * @param other  the other key to use

 * @param otherOffsetInBits  the bit offset in the other key

 * @param otherLengthInBits  the maximum key length in bits for the other key

 * @return the bit index where the key and other first differ

 */

public abstract int bitIndex(K key,int offsetInBits,int lengthInBits,K other,int otherOffsetInBits,int otherLengthInBits);

Location: KeyAnalyzer.java

Content: 

@Override @SuppressWarnings("unchecked") public int compare(final K o1,final K o2){

  if (o1 == null) {

    return o2 == null ? 0 : -1;

  }

  if (o2 == null) {

    return 1;

  }

  return ((Comparable<K>)o1).compareTo(o2);

}

Location: KeyAnalyzer.java

Content: 

/** 

 * Returns true if bitIndex is a  {@link KeyAnalyzer#EQUAL_BIT_KEY}.

 */

static boolean isEqualBitKey(final int bitIndex){

  return bitIndex == EQUAL_BIT_KEY;

}

Location: KeyAnalyzer.java

Content: 

/** 

 * Returns true if bitIndex is a  {@link KeyAnalyzer#NULL_BIT_KEY}.

 */

static boolean isNullBitKey(final int bitIndex){

  return bitIndex == NULL_BIT_KEY;

}

Location: KeyAnalyzer.java

Content: 

/** 

 * Returns true if bitIndex is a  {@link KeyAnalyzer#OUT_OF_BOUNDS_BIT_KEY}.

 */

static boolean isOutOfBoundsIndex(final int bitIndex){

  return bitIndex == OUT_OF_BOUNDS_BIT_KEY;

}

Location: KeyAnalyzer.java

Content: 

/** 

 * Determines whether or not the given prefix (from offset to length) is a prefix of the given key.

 * @param prefix  the prefix to check

 * @param offsetInBits  the bit offset in the key

 * @param lengthInBits  the maximum key length in bits to use

 * @param key  the key to check

 * @return {@code true} if this is a valid prefix for the given key

 */

public abstract boolean isPrefix(K prefix,int offsetInBits,int lengthInBits,K key);

Location: KeyAnalyzer.java

Content: 

/** 

 * Returns true if the given bitIndex is valid. Indices are considered valid if they're between 0 and  {@link Integer#MAX_VALUE}

 */

static boolean isValidBitIndex(final int bitIndex){

  return bitIndex >= 0;

}

Location: KeyAnalyzer.java

Content: 

/** 

 * Returns the n-th different bit between key and other. This starts the comparison in key at 'offsetInBits' and goes for 'lengthInBits' bits, and compares to the other key starting at 'otherOffsetInBits' and going for 'otherLengthInBits' bits.

 * @param key  the key to use

 * @param offsetInBits  the bit offset in the key

 * @param lengthInBits  the maximum key length in bits to use

 * @param other  the other key to use

 * @param otherOffsetInBits  the bit offset in the other key

 * @param otherLengthInBits  the maximum key length in bits for the other key

 * @return the bit index where the key and other first differ

 */

public abstract int bitIndex(K key,int offsetInBits,int lengthInBits,K other,int otherOffsetInBits,int otherLengthInBits);

Location: KeyAnalyzer.java

Content: 

@Override @SuppressWarnings("unchecked") public int compare(final K o1,final K o2){

  if (o1 == null) {

    return o2 == null ? 0 : -1;

  }

  if (o2 == null) {

    return 1;

  }

  return ((Comparable<K>)o1).compareTo(o2);

}

Location: KeyAnalyzer.java

Content: 

/** 

 * Returns true if bitIndex is a  {@link KeyAnalyzer#EQUAL_BIT_KEY}.

 */

static boolean isEqualBitKey(final int bitIndex){

  return bitIndex == EQUAL_BIT_KEY;

}

Location: KeyAnalyzer.java

Content: 

/** 

 * Returns true if bitIndex is a  {@link KeyAnalyzer#NULL_BIT_KEY}.

 */

static boolean isNullBitKey(final int bitIndex){

  return bitIndex == NULL_BIT_KEY;

}

Location: KeyAnalyzer.java

Content: 

/** 

 * Returns true if bitIndex is a  {@link KeyAnalyzer#OUT_OF_BOUNDS_BIT_KEY}.

 */

static boolean isOutOfBoundsIndex(final int bitIndex){

  return bitIndex == OUT_OF_BOUNDS_BIT_KEY;

}

Location: KeyAnalyzer.java

Content: 

/** 

 * Determines whether or not the given prefix (from offset to length) is a prefix of the given key.

 * @param prefix  the prefix to check

 * @param offsetInBits  the bit offset in the key

 * @param lengthInBits  the maximum key length in bits to use

 * @param key  the key to check

 * @return {@code true} if this is a valid prefix for the given key

 */

public abstract boolean isPrefix(K prefix,int offsetInBits,int lengthInBits,K key);

Location: KeyAnalyzer.java

Content: 

/** 

 * Returns true if the given bitIndex is valid. Indices are considered valid if they're between 0 and  {@link Integer#MAX_VALUE}

 */

static boolean isValidBitIndex(final int bitIndex){

  return bitIndex >= 0;

}

