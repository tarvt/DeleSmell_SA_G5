Location: HashSetValuedHashMapTest.java

Content: 

public HashSetValuedHashMapTest(final String testName){

  super(testName);

}

Location: HashSetValuedHashMapTest.java

Content: 

@Override public boolean isHashSetValue(){

  return true;

}

Location: HashSetValuedHashMapTest.java

Content: 

@Override public MultiValuedMap<K,V> makeConfirmedMap(){

  return new HashSetValuedHashMap<>();

}

Location: HashSetValuedHashMapTest.java

Content: 

public void testHashSetValuedHashMap_2(){

  final Map<K,V> map=new HashMap<>();

  final SetValuedMap<K,V> map1;

  final SetValuedMap<K,V> map2;

  map.put((K)"A",(V)"W");

  map.put((K)"B",(V)"X");

  map.put((K)"C",(V)"F");

  map1=new HashSetValuedHashMap<>(map);

  assertEquals(1,map1.get((K)"A").size());

  map.remove("A");

  map.remove("B");

  map.remove("C");

  map2=new HashSetValuedHashMap<>(map);

  assertEquals("{}",map2.toString());

}

Location: HashSetValuedHashMapTest.java

Content: 

public void testHashSetValueHashMap(){

  final SetValuedMap<K,V> setMap=new HashSetValuedHashMap<>(4);

  assertEquals(0,setMap.get((K)"whatever").size());

  final Set<V> set=setMap.get((K)"A");

  set.add((V)"W");

  set.add((V)"X");

  set.add((V)"F");

  assertEquals(3,setMap.get((K)"A").size());

}

Location: HashSetValuedHashMapTest.java

Content: 

public void testHashSetValueHashMap_1(){

  final MultiValuedMap<K,V> map=new ArrayListValuedHashMap<>();

  final SetValuedMap<K,V> map1;

  final SetValuedMap<K,V> map2=makeObject();

  final SetValuedMap<K,V> map3;

  map.put((K)"A",(V)"W");

  map.put((K)"A",(V)"X");

  map.put((K)"A",(V)"F");

  map1=new HashSetValuedHashMap<>(map);

  assertEquals(3,map1.get((K)"A").size());

  map2.put((K)"A",(V)"X");

  map2.put((K)"A",(V)"F");

  map2.put((K)"A",(V)"W");

  assertEquals(map1,map2);

  assertEquals(map1.hashCode(),map2.hashCode());

  map.remove("A");

  map3=new HashSetValuedHashMap<>(map);

  assertEquals("{}",map3.toString());

}

Location: HashSetValuedHashMapTest.java

Content: 

@SuppressWarnings("unchecked") public void testSetValuedMapAdd(){

  final SetValuedMap<K,V> setMap=makeObject();

  assertTrue(setMap.get((K)"whatever") instanceof Set);

  final Set<V> set=setMap.get((K)"A");

  assertTrue(set.add((V)"a1"));

  assertTrue(set.add((V)"a2"));

  assertFalse(set.add((V)"a1"));

  assertEquals(2,setMap.size());

  assertTrue(setMap.containsKey("A"));

}

Location: HashSetValuedHashMapTest.java

Content: 

@SuppressWarnings({"unchecked","rawtypes"}) public void testSetValuedMapEqualsHashCodeContract(){

  final SetValuedMap map1=makeObject();

  final SetValuedMap map2=makeObject();

  map1.put("a","a1");

  map1.put("a","a2");

  map2.put("a","a2");

  map2.put("a","a1");

  assertEquals(map1,map2);

  assertEquals(map1.hashCode(),map2.hashCode());

  map2.put("a","a2");

  assertEquals(map1,map2);

  assertEquals(map1.hashCode(),map2.hashCode());

  map2.put("a","a3");

  assertNotSame(map1,map2);

  assertNotSame(map1.hashCode(),map2.hashCode());

}

Location: HashSetValuedHashMapTest.java

Content: 

@SuppressWarnings("unchecked") public void testSetValuedMapRemove(){

  final SetValuedMap<K,V> setMap=makeObject();

  assertTrue(setMap.get((K)"whatever") instanceof Set);

  final Set<V> set=setMap.get((K)"A");

  assertTrue(set.add((V)"a1"));

  assertTrue(set.add((V)"a2"));

  assertFalse(set.add((V)"a1"));

  assertEquals(2,setMap.size());

  assertTrue(setMap.containsKey("A"));

  assertTrue(set.remove("a1"));

  assertTrue(set.remove("a2"));

  assertFalse(set.remove("a1"));

  assertEquals(0,setMap.size());

  assertFalse(setMap.containsKey("A"));

}

Location: HashSetValuedHashMapTest.java

Content: 

@SuppressWarnings("unchecked") public void testSetValuedMapRemoveViaIterator(){

  final SetValuedMap<K,V> setMap=makeObject();

  assertTrue(setMap.get((K)"whatever") instanceof Set);

  final Set<V> set=setMap.get((K)"A");

  set.add((V)"a1");

  set.add((V)"a2");

  set.add((V)"a1");

  final Iterator<V> it=set.iterator();

  while (it.hasNext()) {

    it.next();

    it.remove();

  }

  assertEquals(0,setMap.size());

  assertFalse(setMap.containsKey("A"));

}

Location: HashSetValuedHashMapTest.java

Content: 

public HashSetValuedHashMapTest(final String testName){

  super(testName);

}

Location: HashSetValuedHashMapTest.java

Content: 

@Override public boolean isHashSetValue(){

  return true;

}

Location: HashSetValuedHashMapTest.java

Content: 

@Override public MultiValuedMap<K,V> makeConfirmedMap(){

  return new HashSetValuedHashMap<>();

}

Location: HashSetValuedHashMapTest.java

Content: 

public void testHashSetValuedHashMap_2(){

  final Map<K,V> map=new HashMap<>();

  final SetValuedMap<K,V> map1;

  final SetValuedMap<K,V> map2;

  map.put((K)"A",(V)"W");

  map.put((K)"B",(V)"X");

  map.put((K)"C",(V)"F");

  map1=new HashSetValuedHashMap<>(map);

  assertEquals(1,map1.get((K)"A").size());

  map.remove("A");

  map.remove("B");

  map.remove("C");

  map2=new HashSetValuedHashMap<>(map);

  assertEquals("{}",map2.toString());

}

Location: HashSetValuedHashMapTest.java

Content: 

public void testHashSetValueHashMap(){

  final SetValuedMap<K,V> setMap=new HashSetValuedHashMap<>(4);

  assertEquals(0,setMap.get((K)"whatever").size());

  final Set<V> set=setMap.get((K)"A");

  set.add((V)"W");

  set.add((V)"X");

  set.add((V)"F");

  assertEquals(3,setMap.get((K)"A").size());

}

Location: HashSetValuedHashMapTest.java

Content: 

public void testHashSetValueHashMap_1(){

  final MultiValuedMap<K,V> map=new ArrayListValuedHashMap<>();

  final SetValuedMap<K,V> map1;

  final SetValuedMap<K,V> map2=makeObject();

  final SetValuedMap<K,V> map3;

  map.put((K)"A",(V)"W");

  map.put((K)"A",(V)"X");

  map.put((K)"A",(V)"F");

  map1=new HashSetValuedHashMap<>(map);

  assertEquals(3,map1.get((K)"A").size());

  map2.put((K)"A",(V)"X");

  map2.put((K)"A",(V)"F");

  map2.put((K)"A",(V)"W");

  assertEquals(map1,map2);

  assertEquals(map1.hashCode(),map2.hashCode());

  map.remove("A");

  map3=new HashSetValuedHashMap<>(map);

  assertEquals("{}",map3.toString());

}

Location: HashSetValuedHashMapTest.java

Content: 

@SuppressWarnings("unchecked") public void testSetValuedMapAdd(){

  final SetValuedMap<K,V> setMap=makeObject();

  assertTrue(setMap.get((K)"whatever") instanceof Set);

  final Set<V> set=setMap.get((K)"A");

  assertTrue(set.add((V)"a1"));

  assertTrue(set.add((V)"a2"));

  assertFalse(set.add((V)"a1"));

  assertEquals(2,setMap.size());

  assertTrue(setMap.containsKey("A"));

}

Location: HashSetValuedHashMapTest.java

Content: 

@SuppressWarnings({"unchecked","rawtypes"}) public void testSetValuedMapEqualsHashCodeContract(){

  final SetValuedMap map1=makeObject();

  final SetValuedMap map2=makeObject();

  map1.put("a","a1");

  map1.put("a","a2");

  map2.put("a","a2");

  map2.put("a","a1");

  assertEquals(map1,map2);

  assertEquals(map1.hashCode(),map2.hashCode());

  map2.put("a","a2");

  assertEquals(map1,map2);

  assertEquals(map1.hashCode(),map2.hashCode());

  map2.put("a","a3");

  assertNotSame(map1,map2);

  assertNotSame(map1.hashCode(),map2.hashCode());

}

Location: HashSetValuedHashMapTest.java

Content: 

@SuppressWarnings("unchecked") public void testSetValuedMapRemove(){

  final SetValuedMap<K,V> setMap=makeObject();

  assertTrue(setMap.get((K)"whatever") instanceof Set);

  final Set<V> set=setMap.get((K)"A");

  assertTrue(set.add((V)"a1"));

  assertTrue(set.add((V)"a2"));

  assertFalse(set.add((V)"a1"));

  assertEquals(2,setMap.size());

  assertTrue(setMap.containsKey("A"));

  assertTrue(set.remove("a1"));

  assertTrue(set.remove("a2"));

  assertFalse(set.remove("a1"));

  assertEquals(0,setMap.size());

  assertFalse(setMap.containsKey("A"));

}

Location: HashSetValuedHashMapTest.java

Content: 

@SuppressWarnings("unchecked") public void testSetValuedMapRemoveViaIterator(){

  final SetValuedMap<K,V> setMap=makeObject();

  assertTrue(setMap.get((K)"whatever") instanceof Set);

  final Set<V> set=setMap.get((K)"A");

  set.add((V)"a1");

  set.add((V)"a2");

  set.add((V)"a1");

  final Iterator<V> it=set.iterator();

  while (it.hasNext()) {

    it.next();

    it.remove();

  }

  assertEquals(0,setMap.size());

  assertFalse(setMap.containsKey("A"));

}

