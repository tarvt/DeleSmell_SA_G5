Location: AbstractMapMultiSet.java

Content: 

/** 

 * Constructor needed for subclass serialisation.

 */

protected AbstractMapMultiSet(){

}

Location: AbstractMapMultiSet.java

Content: 

/** 

 * Constructor that assigns the specified Map as the backing store. The map must be empty and non-null.

 * @param map the map to assign

 */

protected AbstractMapMultiSet(final Map<E,MutableInteger> map){

  this.map=map;

}

Location: AbstractMapMultiSet.java

Content: 

@Override public int add(final E object,final int occurrences){

  if (occurrences < 0) {

    throw new IllegalArgumentException("Occurrences must not be negative.");

  }

  final MutableInteger mut=map.get(object);

  final int oldCount=mut != null ? mut.value : 0;

  if (occurrences > 0) {

    modCount++;

    size+=occurrences;

    if (mut == null) {

      map.put(object,new MutableInteger(occurrences));

    }

 else {

      mut.value+=occurrences;

    }

  }

  return oldCount;

}

Location: AbstractMapMultiSet.java

Content: 

@Override protected Iterator<Entry<E>> createEntrySetIterator(){

  return new EntrySetIterator<>(map.entrySet().iterator(),this);

}

Location: AbstractMapMultiSet.java

Content: 

@Override protected Iterator<E> createUniqueSetIterator(){

  return new UniqueSetIterator<>(getMap().keySet().iterator(),this);

}

Location: AbstractMapMultiSet.java

Content: 

/** 

 * Read the multiset in using a custom routine.

 * @param in the input stream

 * @throws IOException any of the usual I/O related exceptions

 * @throws ClassNotFoundException if the stream contains an object which class can not be loaded

 * @throws ClassCastException if the stream does not contain the correct objects

 */

@Override protected void doReadObject(final ObjectInputStream in) throws IOException, ClassNotFoundException {

  final int entrySize=in.readInt();

  for (int i=0; i < entrySize; i++) {

    @SuppressWarnings("unchecked") final E obj=(E)in.readObject();

    final int count=in.readInt();

    map.put(obj,new MutableInteger(count));

    size+=count;

  }

}

Location: AbstractMapMultiSet.java

Content: 

/** 

 * Write the multiset out using a custom routine.

 * @param out the output stream

 * @throws IOException any of the usual I/O related exceptions

 */

@Override protected void doWriteObject(final ObjectOutputStream out) throws IOException {

  out.writeInt(map.size());

  for (  final Map.Entry<E,MutableInteger> entry : map.entrySet()) {

    out.writeObject(entry.getKey());

    out.writeInt(entry.getValue().value);

  }

}

Location: AbstractMapMultiSet.java

Content: 

/** 

 * Returns the number of occurrence of the given element in this multiset by looking up its count in the underlying map.

 * @param object the object to search for

 * @return the number of occurrences of the object, zero if not found

 */

@Override public int getCount(final Object object){

  final MutableInteger count=map.get(object);

  if (count != null) {

    return count.value;

  }

  return 0;

}

Location: AbstractMapMultiSet.java

Content: 

@Override public int remove(final Object object,final int occurrences){

  if (occurrences < 0) {

    throw new IllegalArgumentException("Occurrences must not be negative.");

  }

  final MutableInteger mut=map.get(object);

  if (mut == null) {

    return 0;

  }

  final int oldCount=mut.value;

  if (occurrences > 0) {

    modCount++;

    if (occurrences < mut.value) {

      mut.value-=occurrences;

      size-=occurrences;

    }

 else {

      map.remove(object);

      size-=mut.value;

      mut.value=0;

    }

  }

  return oldCount;

}

Location: AbstractMapMultiSet.java

Content: 

/** 

 * Sets the map being wrapped. <p> <b>NOTE:</b> this method should only be used during deserialization

 * @param map the map to wrap

 */

protected void setMap(final Map<E,MutableInteger> map){

  this.map=map;

}

Location: AbstractMapMultiSet.java

Content: 

@Override protected int uniqueElements(){

  return map.size();

}

Location: AbstractMapMultiSet.java

Content: 

/** 

 * Constructor needed for subclass serialisation.

 */

protected AbstractMapMultiSet(){

}

Location: AbstractMapMultiSet.java

Content: 

/** 

 * Constructor that assigns the specified Map as the backing store. The map must be empty and non-null.

 * @param map the map to assign

 */

protected AbstractMapMultiSet(final Map<E,MutableInteger> map){

  this.map=map;

}

Location: AbstractMapMultiSet.java

Content: 

@Override public int add(final E object,final int occurrences){

  if (occurrences < 0) {

    throw new IllegalArgumentException("Occurrences must not be negative.");

  }

  final MutableInteger mut=map.get(object);

  final int oldCount=mut != null ? mut.value : 0;

  if (occurrences > 0) {

    modCount++;

    size+=occurrences;

    if (mut == null) {

      map.put(object,new MutableInteger(occurrences));

    }

 else {

      mut.value+=occurrences;

    }

  }

  return oldCount;

}

Location: AbstractMapMultiSet.java

Content: 

@Override protected Iterator<Entry<E>> createEntrySetIterator(){

  return new EntrySetIterator<>(map.entrySet().iterator(),this);

}

Location: AbstractMapMultiSet.java

Content: 

@Override protected Iterator<E> createUniqueSetIterator(){

  return new UniqueSetIterator<>(getMap().keySet().iterator(),this);

}

Location: AbstractMapMultiSet.java

Content: 

/** 

 * Read the multiset in using a custom routine.

 * @param in the input stream

 * @throws IOException any of the usual I/O related exceptions

 * @throws ClassNotFoundException if the stream contains an object which class can not be loaded

 * @throws ClassCastException if the stream does not contain the correct objects

 */

@Override protected void doReadObject(final ObjectInputStream in) throws IOException, ClassNotFoundException {

  final int entrySize=in.readInt();

  for (int i=0; i < entrySize; i++) {

    @SuppressWarnings("unchecked") final E obj=(E)in.readObject();

    final int count=in.readInt();

    map.put(obj,new MutableInteger(count));

    size+=count;

  }

}

Location: AbstractMapMultiSet.java

Content: 

/** 

 * Write the multiset out using a custom routine.

 * @param out the output stream

 * @throws IOException any of the usual I/O related exceptions

 */

@Override protected void doWriteObject(final ObjectOutputStream out) throws IOException {

  out.writeInt(map.size());

  for (  final Map.Entry<E,MutableInteger> entry : map.entrySet()) {

    out.writeObject(entry.getKey());

    out.writeInt(entry.getValue().value);

  }

}

Location: AbstractMapMultiSet.java

Content: 

/** 

 * Returns the number of occurrence of the given element in this multiset by looking up its count in the underlying map.

 * @param object the object to search for

 * @return the number of occurrences of the object, zero if not found

 */

@Override public int getCount(final Object object){

  final MutableInteger count=map.get(object);

  if (count != null) {

    return count.value;

  }

  return 0;

}

Location: AbstractMapMultiSet.java

Content: 

@Override public int remove(final Object object,final int occurrences){

  if (occurrences < 0) {

    throw new IllegalArgumentException("Occurrences must not be negative.");

  }

  final MutableInteger mut=map.get(object);

  if (mut == null) {

    return 0;

  }

  final int oldCount=mut.value;

  if (occurrences > 0) {

    modCount++;

    if (occurrences < mut.value) {

      mut.value-=occurrences;

      size-=occurrences;

    }

 else {

      map.remove(object);

      size-=mut.value;

      mut.value=0;

    }

  }

  return oldCount;

}

Location: AbstractMapMultiSet.java

Content: 

/** 

 * Sets the map being wrapped. <p> <b>NOTE:</b> this method should only be used during deserialization

 * @param map the map to wrap

 */

protected void setMap(final Map<E,MutableInteger> map){

  this.map=map;

}

Location: AbstractMapMultiSet.java

Content: 

@Override protected int uniqueElements(){

  return map.size();

}

