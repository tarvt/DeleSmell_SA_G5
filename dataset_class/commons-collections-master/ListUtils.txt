Location: ListUtils.java

Content: 

/** 

 * Returns either the passed in list, or if the list is  {@code null}, the value of  {@code defaultList}.

 * @param < T > the element type

 * @param list  the list, possibly {@code null}

 * @param defaultList  the returned values if list is {@code null}

 * @return an empty list if the argument is {@code null}

 * @since 4.0

 */

public static <T>List<T> defaultIfNull(final List<T> list,final List<T> defaultList){

  return list == null ? defaultList : list;

}

Location: ListUtils.java

Content: 

/** 

 * Returns an immutable empty list if the argument is  {@code null}, or the argument itself otherwise.

 * @param < T > the element type

 * @param list the list, possibly {@code null}

 * @return an empty list if the argument is {@code null}

 */

public static <T>List<T> emptyIfNull(final List<T> list){

  return list == null ? Collections.<T>emptyList() : list;

}

Location: ListUtils.java

Content: 

/** 

 * Gets the first element of a list. <p> Shorthand for  {@code list.get(0)}</p>

 * @param < T > The list type.

 * @param list The list.

 * @return the first element of a list.

 * @see List#get(int)

 * @since 4.5

 */

public static <T>T getFirst(List<T> list){

  return Objects.requireNonNull(list,"list").get(0);

}

Location: ListUtils.java

Content: 

/** 

 * Gets the last element of a list. <p> Shorthand for  {@code list.get(list.size() - 1)}</p>

 * @param < T > The list type.

 * @param list The list.

 * @return the last element of a list.

 * @see List#get(int)

 * @since 4.5

 */

public static <T>T getLast(List<T> list){

  return Objects.requireNonNull(list,"list").get(list.size() - 1);

}

Location: ListUtils.java

Content: 

/** 

 * Generates a hash code using the algorithm specified in {@link java.util.List#hashCode()}. <p> This method is useful for implementing  {@code List} when you cannotextend AbstractList. The method takes Collection instances to enable other collection types to use the List implementation algorithm.

 * @see java.util.List#hashCode()

 * @param list  the list to generate the hashCode for, may be null

 * @return the hash code

 */

public static int hashCodeForList(final Collection<?> list){

  if (list == null) {

    return 0;

  }

  int hashCode=1;

  final Iterator<?> it=list.iterator();

  while (it.hasNext()) {

    final Object obj=it.next();

    hashCode=31 * hashCode + (obj == null ? 0 : obj.hashCode());

  }

  return hashCode;

}

Location: ListUtils.java

Content: 

/** 

 * Finds the first index in the given List which matches the given predicate. <p> If the input List or predicate is null, or no element of the List matches the predicate, -1 is returned.

 * @param < E >  the element type

 * @param list the List to search, may be null

 * @param predicate  the predicate to use, may be null

 * @return the first index of an Object in the List which matches the predicate or -1 if none could be found

 */

public static <E>int indexOf(final List<E> list,final Predicate<E> predicate){

  if (list != null && predicate != null) {

    for (int i=0; i < list.size(); i++) {

      final E item=list.get(i);

      if (predicate.evaluate(item)) {

        return i;

      }

    }

  }

  return CollectionUtils.INDEX_NOT_FOUND;

}

Location: ListUtils.java

Content: 

/** 

 * Returns a new list containing all elements that are contained in both given lists.

 * @param < E > the element type

 * @param list1  the first list

 * @param list2  the second list

 * @return  the intersection of those two lists

 * @throws NullPointerException if either list is null

 */

public static <E>List<E> intersection(final List<? extends E> list1,final List<? extends E> list2){

  final List<E> result=new ArrayList<>();

  List<? extends E> smaller=list1;

  List<? extends E> larger=list2;

  if (list1.size() > list2.size()) {

    smaller=list2;

    larger=list1;

  }

  final HashSet<E> hashSet=new HashSet<>(smaller);

  for (  final E e : larger) {

    if (hashSet.contains(e)) {

      result.add(e);

      hashSet.remove(e);

    }

  }

  return result;

}

Location: ListUtils.java

Content: 

/** 

 * Tests two lists for value-equality as per the equality contract in {@link java.util.List#equals(java.lang.Object)}. <p> This method is useful for implementing  {@code List} when you cannotextend AbstractList. The method takes Collection instances to enable other collection types to use the List implementation algorithm. <p> The relevant text (slightly paraphrased as this is a static method) is: <blockquote> Compares the two list objects for equality.  Returns {@code true} if and only if bothlists have the same size, and all corresponding pairs of elements in the two lists are <i>equal</i>.  (Two elements  {@code e1} and{@code e2} are <i>equal</i> if <code>(e1==null ? e2==null :e1.equals(e2))</code>.)  In other words, two lists are defined to be equal if they contain the same elements in the same order.  This definition ensures that the equals method works properly across different implementations of the  {@code List} interface.</blockquote> <b>Note:</b> The behavior of this method is undefined if the lists are modified during the equals comparison.

 * @see java.util.List

 * @param list1  the first list, may be null

 * @param list2  the second list, may be null

 * @return whether the lists are equal by value comparison

 */

public static boolean isEqualList(final Collection<?> list1,final Collection<?> list2){

  if (list1 == list2) {

    return true;

  }

  if (list1 == null || list2 == null || list1.size() != list2.size()) {

    return false;

  }

  final Iterator<?> it1=list1.iterator();

  final Iterator<?> it2=list2.iterator();

  Object obj1=null;

  Object obj2=null;

  while (it1.hasNext() && it2.hasNext()) {

    obj1=it1.next();

    obj2=it2.next();

    if (!(obj1 == null ? obj2 == null : obj1.equals(obj2))) {

      return false;

    }

  }

  return !(it1.hasNext() || it2.hasNext());

}

Location: ListUtils.java

Content: 

/** 

 * Don't allow instances.

 */

private ListUtils(){

}

Location: ListUtils.java

Content: 

/** 

 * Returns the longest common subsequence (LCS) of two  {@link CharSequence} objects.<p> This is a convenience method for using  {@link #longestCommonSubsequence(List,List)}with  {@link CharSequence} instances.

 * @param charSequenceA  the first sequence

 * @param charSequenceB  the second sequence

 * @return the longest common subsequence as {@link String}

 * @throws NullPointerException if either sequence is {@code null}

 * @since 4.0

 */

public static String longestCommonSubsequence(final CharSequence charSequenceA,final CharSequence charSequenceB){

  Objects.requireNonNull(charSequenceA,"charSequenceA");

  Objects.requireNonNull(charSequenceB,"charSequenceB");

  final List<Character> lcs=longestCommonSubsequence(new CharSequenceAsList(charSequenceA),new CharSequenceAsList(charSequenceB));

  final StringBuilder sb=new StringBuilder();

  for (  final Character ch : lcs) {

    sb.append(ch);

  }

  return sb.toString();

}

Location: ListUtils.java

Content: 

/** 

 * Returns the longest common subsequence (LCS) of two sequences (lists).

 * @param < E >  the element type

 * @param a  the first list

 * @param b  the second list

 * @return the longest common subsequence

 * @throws NullPointerException if either list is {@code null}

 * @since 4.0

 */

public static <E>List<E> longestCommonSubsequence(final List<E> a,final List<E> b){

  return longestCommonSubsequence(a,b,DefaultEquator.defaultEquator());

}

Location: ListUtils.java

Content: 

/** 

 * Returns the longest common subsequence (LCS) of two sequences (lists).

 * @param < E >  the element type

 * @param listA  the first list

 * @param listB  the second list

 * @param equator  the equator used to test object equality

 * @return the longest common subsequence

 * @throws NullPointerException if either list or the equator is {@code null}

 * @since 4.0

 */

public static <E>List<E> longestCommonSubsequence(final List<E> listA,final List<E> listB,final Equator<? super E> equator){

  Objects.requireNonNull(listA,"listA");

  Objects.requireNonNull(listB,"listB");

  Objects.requireNonNull(equator,"equator");

  final SequencesComparator<E> comparator=new SequencesComparator<>(listA,listB,equator);

  final EditScript<E> script=comparator.getScript();

  final LcsVisitor<E> visitor=new LcsVisitor<>();

  script.visit(visitor);

  return visitor.getSubSequence();

}

Location: ListUtils.java

Content: 

/** 

 * Returns consecutive  {@link List#subList(int,int) sublists} of alist, each of the same size (the final list may be smaller). For example, partitioning a list containing  {@code [a, b, c, d, e]} with a partitionsize of 3 yields  {@code [[a, b, c], [d, e]]} -- an outer list containingtwo inner lists of three and two elements, all in the original order. <p> The outer list is unmodifiable, but reflects the latest state of the source list. The inner lists are sublist views of the original list, produced on demand using  {@link List#subList(int,int)}, and are subject to all the usual caveats about modification as explained in that API. <p> Adapted from http://code.google.com/p/guava-libraries/

 * @param < T > the element type

 * @param list  the list to return consecutive sublists of

 * @param size  the desired size of each sublist (the last may be smaller)

 * @return a list of consecutive sublists

 * @throws NullPointerException if list is null

 * @throws IllegalArgumentException if size is not strictly positive

 * @since 4.0

 */

public static <T>List<List<T>> partition(final List<T> list,final int size){

  Objects.requireNonNull(list,"list");

  if (size <= 0) {

    throw new IllegalArgumentException("Size must be greater than 0");

  }

  return new Partition<>(list,size);

}

Location: ListUtils.java

Content: 

/** 

 * Selects all elements from inputCollection which don't match the given predicate into an output collection. <p> If the input predicate is  {@code null}, the result is an empty list.

 * @param < E > the element type

 * @param inputCollection the collection to get the input from, may not be null

 * @param predicate the predicate to use, may be null

 * @return the elements <b>not</b> matching the predicate (new list)

 * @throws NullPointerException if the input collection is null

 * @since 4.0

 * @see CollectionUtils#selectRejected(Iterable,Predicate)

 */

public static <E>List<E> selectRejected(final Collection<? extends E> inputCollection,final Predicate<? super E> predicate){

  return CollectionUtils.selectRejected(inputCollection,predicate,new ArrayList<E>(inputCollection.size()));

}

Location: ListUtils.java

Content: 

/** 

 * Selects all elements from input collection which match the given predicate into an output list. <p> A  {@code null} predicate matches no elements.

 * @param < E > the element type

 * @param inputCollection  the collection to get the input from, may not be null

 * @param predicate  the predicate to use, may be null

 * @return the elements matching the predicate (new list)

 * @throws NullPointerException if the input list is null

 * @since 4.0

 * @see CollectionUtils#select(Iterable,Predicate)

 */

public static <E>List<E> select(final Collection<? extends E> inputCollection,final Predicate<? super E> predicate){

  return CollectionUtils.select(inputCollection,predicate,new ArrayList<E>(inputCollection.size()));

}

Location: ListUtils.java

Content: 

/** 

 * Subtracts all elements in the second list from the first list, placing the results in a new list. <p> This differs from  {@link List#removeAll(Collection)} in thatcardinality is respected; if <Code>list1</Code> contains two occurrences of <Code>null</Code> and <Code>list2</Code> only contains one occurrence, then the returned list will still contain one occurrence.

 * @param < E > the element type

 * @param list1  the list to subtract from

 * @param list2  the list to subtract

 * @return a new list containing the results

 * @throws NullPointerException if either list is null

 */

public static <E>List<E> subtract(final List<E> list1,final List<? extends E> list2){

  final ArrayList<E> result=new ArrayList<>();

  final HashBag<E> bag=new HashBag<>(list2);

  for (  final E e : list1) {

    if (!bag.remove(e,1)) {

      result.add(e);

    }

  }

  return result;

}

Location: ListUtils.java

Content: 

/** 

 * Returns the sum of the given lists.  This is their intersection subtracted from their union.

 * @param < E > the element type

 * @param list1  the first list

 * @param list2  the second list

 * @return  a new list containing the sum of those lists

 * @throws NullPointerException if either list is null

 */

public static <E>List<E> sum(final List<? extends E> list1,final List<? extends E> list2){

  return subtract(union(list1,list2),intersection(list1,list2));

}

Location: ListUtils.java

Content: 

/** 

 * Returns a synchronized list backed by the given list. <p> You must manually synchronize on the returned list's iterator to avoid non-deterministic behavior: <pre> List list = ListUtils.synchronizedList(myList); synchronized (list) { Iterator i = list.iterator(); while (i.hasNext()) { process (i.next()); } } </pre> This method is just a wrapper for  {@link Collections#synchronizedList(List)}.

 * @param < E > the element type

 * @param list  the list to synchronize, must not be null

 * @return a synchronized list backed by the given list

 * @throws NullPointerException if the list is null

 */

public static <E>List<E> synchronizedList(final List<E> list){

  return Collections.synchronizedList(list);

}

Location: ListUtils.java

Content: 

/** 

 * Returns a new list containing the second list appended to the first list.  The  {@link List#addAll(Collection)} operation isused to append the two given lists into a new list.

 * @param < E > the element type

 * @param list1  the first list

 * @param list2  the second list

 * @return a new list containing the union of those lists

 * @throws NullPointerException if either list is null

 */

public static <E>List<E> union(final List<? extends E> list1,final List<? extends E> list2){

  final ArrayList<E> result=new ArrayList<>(list1.size() + list2.size());

  result.addAll(list1);

  result.addAll(list2);

  return result;

}

Location: ListUtils.java

Content: 

/** 

 * Returns either the passed in list, or if the list is  {@code null}, the value of  {@code defaultList}.

 * @param < T > the element type

 * @param list  the list, possibly {@code null}

 * @param defaultList  the returned values if list is {@code null}

 * @return an empty list if the argument is {@code null}

 * @since 4.0

 */

public static <T>List<T> defaultIfNull(final List<T> list,final List<T> defaultList){

  return list == null ? defaultList : list;

}

Location: ListUtils.java

Content: 

/** 

 * Returns an immutable empty list if the argument is  {@code null}, or the argument itself otherwise.

 * @param < T > the element type

 * @param list the list, possibly {@code null}

 * @return an empty list if the argument is {@code null}

 */

public static <T>List<T> emptyIfNull(final List<T> list){

  return list == null ? Collections.<T>emptyList() : list;

}

Location: ListUtils.java

Content: 

/** 

 * Gets the first element of a list. <p> Shorthand for  {@code list.get(0)}</p>

 * @param < T > The list type.

 * @param list The list.

 * @return the first element of a list.

 * @see List#get(int)

 * @since 4.5

 */

public static <T>T getFirst(List<T> list){

  return Objects.requireNonNull(list,"list").get(0);

}

Location: ListUtils.java

Content: 

/** 

 * Gets the last element of a list. <p> Shorthand for  {@code list.get(list.size() - 1)}</p>

 * @param < T > The list type.

 * @param list The list.

 * @return the last element of a list.

 * @see List#get(int)

 * @since 4.5

 */

public static <T>T getLast(List<T> list){

  return Objects.requireNonNull(list,"list").get(list.size() - 1);

}

Location: ListUtils.java

Content: 

/** 

 * Generates a hash code using the algorithm specified in {@link java.util.List#hashCode()}. <p> This method is useful for implementing  {@code List} when you cannotextend AbstractList. The method takes Collection instances to enable other collection types to use the List implementation algorithm.

 * @see java.util.List#hashCode()

 * @param list  the list to generate the hashCode for, may be null

 * @return the hash code

 */

public static int hashCodeForList(final Collection<?> list){

  if (list == null) {

    return 0;

  }

  int hashCode=1;

  final Iterator<?> it=list.iterator();

  while (it.hasNext()) {

    final Object obj=it.next();

    hashCode=31 * hashCode + (obj == null ? 0 : obj.hashCode());

  }

  return hashCode;

}

Location: ListUtils.java

Content: 

/** 

 * Finds the first index in the given List which matches the given predicate. <p> If the input List or predicate is null, or no element of the List matches the predicate, -1 is returned.

 * @param < E >  the element type

 * @param list the List to search, may be null

 * @param predicate  the predicate to use, may be null

 * @return the first index of an Object in the List which matches the predicate or -1 if none could be found

 */

public static <E>int indexOf(final List<E> list,final Predicate<E> predicate){

  if (list != null && predicate != null) {

    for (int i=0; i < list.size(); i++) {

      final E item=list.get(i);

      if (predicate.evaluate(item)) {

        return i;

      }

    }

  }

  return CollectionUtils.INDEX_NOT_FOUND;

}

Location: ListUtils.java

Content: 

/** 

 * Returns a new list containing all elements that are contained in both given lists.

 * @param < E > the element type

 * @param list1  the first list

 * @param list2  the second list

 * @return  the intersection of those two lists

 * @throws NullPointerException if either list is null

 */

public static <E>List<E> intersection(final List<? extends E> list1,final List<? extends E> list2){

  final List<E> result=new ArrayList<>();

  List<? extends E> smaller=list1;

  List<? extends E> larger=list2;

  if (list1.size() > list2.size()) {

    smaller=list2;

    larger=list1;

  }

  final HashSet<E> hashSet=new HashSet<>(smaller);

  for (  final E e : larger) {

    if (hashSet.contains(e)) {

      result.add(e);

      hashSet.remove(e);

    }

  }

  return result;

}

Location: ListUtils.java

Content: 

/** 

 * Tests two lists for value-equality as per the equality contract in {@link java.util.List#equals(java.lang.Object)}. <p> This method is useful for implementing  {@code List} when you cannotextend AbstractList. The method takes Collection instances to enable other collection types to use the List implementation algorithm. <p> The relevant text (slightly paraphrased as this is a static method) is: <blockquote> Compares the two list objects for equality.  Returns {@code true} if and only if bothlists have the same size, and all corresponding pairs of elements in the two lists are <i>equal</i>.  (Two elements  {@code e1} and{@code e2} are <i>equal</i> if <code>(e1==null ? e2==null :e1.equals(e2))</code>.)  In other words, two lists are defined to be equal if they contain the same elements in the same order.  This definition ensures that the equals method works properly across different implementations of the  {@code List} interface.</blockquote> <b>Note:</b> The behavior of this method is undefined if the lists are modified during the equals comparison.

 * @see java.util.List

 * @param list1  the first list, may be null

 * @param list2  the second list, may be null

 * @return whether the lists are equal by value comparison

 */

public static boolean isEqualList(final Collection<?> list1,final Collection<?> list2){

  if (list1 == list2) {

    return true;

  }

  if (list1 == null || list2 == null || list1.size() != list2.size()) {

    return false;

  }

  final Iterator<?> it1=list1.iterator();

  final Iterator<?> it2=list2.iterator();

  Object obj1=null;

  Object obj2=null;

  while (it1.hasNext() && it2.hasNext()) {

    obj1=it1.next();

    obj2=it2.next();

    if (!(obj1 == null ? obj2 == null : obj1.equals(obj2))) {

      return false;

    }

  }

  return !(it1.hasNext() || it2.hasNext());

}

Location: ListUtils.java

Content: 

/** 

 * Don't allow instances.

 */

private ListUtils(){

}

Location: ListUtils.java

Content: 

/** 

 * Returns the longest common subsequence (LCS) of two  {@link CharSequence} objects.<p> This is a convenience method for using  {@link #longestCommonSubsequence(List,List)}with  {@link CharSequence} instances.

 * @param charSequenceA  the first sequence

 * @param charSequenceB  the second sequence

 * @return the longest common subsequence as {@link String}

 * @throws NullPointerException if either sequence is {@code null}

 * @since 4.0

 */

public static String longestCommonSubsequence(final CharSequence charSequenceA,final CharSequence charSequenceB){

  Objects.requireNonNull(charSequenceA,"charSequenceA");

  Objects.requireNonNull(charSequenceB,"charSequenceB");

  final List<Character> lcs=longestCommonSubsequence(new CharSequenceAsList(charSequenceA),new CharSequenceAsList(charSequenceB));

  final StringBuilder sb=new StringBuilder();

  for (  final Character ch : lcs) {

    sb.append(ch);

  }

  return sb.toString();

}

Location: ListUtils.java

Content: 

/** 

 * Returns the longest common subsequence (LCS) of two sequences (lists).

 * @param < E >  the element type

 * @param a  the first list

 * @param b  the second list

 * @return the longest common subsequence

 * @throws NullPointerException if either list is {@code null}

 * @since 4.0

 */

public static <E>List<E> longestCommonSubsequence(final List<E> a,final List<E> b){

  return longestCommonSubsequence(a,b,DefaultEquator.defaultEquator());

}

Location: ListUtils.java

Content: 

/** 

 * Returns the longest common subsequence (LCS) of two sequences (lists).

 * @param < E >  the element type

 * @param listA  the first list

 * @param listB  the second list

 * @param equator  the equator used to test object equality

 * @return the longest common subsequence

 * @throws NullPointerException if either list or the equator is {@code null}

 * @since 4.0

 */

public static <E>List<E> longestCommonSubsequence(final List<E> listA,final List<E> listB,final Equator<? super E> equator){

  Objects.requireNonNull(listA,"listA");

  Objects.requireNonNull(listB,"listB");

  Objects.requireNonNull(equator,"equator");

  final SequencesComparator<E> comparator=new SequencesComparator<>(listA,listB,equator);

  final EditScript<E> script=comparator.getScript();

  final LcsVisitor<E> visitor=new LcsVisitor<>();

  script.visit(visitor);

  return visitor.getSubSequence();

}

Location: ListUtils.java

Content: 

/** 

 * Returns consecutive  {@link List#subList(int,int) sublists} of alist, each of the same size (the final list may be smaller). For example, partitioning a list containing  {@code [a, b, c, d, e]} with a partitionsize of 3 yields  {@code [[a, b, c], [d, e]]} -- an outer list containingtwo inner lists of three and two elements, all in the original order. <p> The outer list is unmodifiable, but reflects the latest state of the source list. The inner lists are sublist views of the original list, produced on demand using  {@link List#subList(int,int)}, and are subject to all the usual caveats about modification as explained in that API. <p> Adapted from http://code.google.com/p/guava-libraries/

 * @param < T > the element type

 * @param list  the list to return consecutive sublists of

 * @param size  the desired size of each sublist (the last may be smaller)

 * @return a list of consecutive sublists

 * @throws NullPointerException if list is null

 * @throws IllegalArgumentException if size is not strictly positive

 * @since 4.0

 */

public static <T>List<List<T>> partition(final List<T> list,final int size){

  Objects.requireNonNull(list,"list");

  if (size <= 0) {

    throw new IllegalArgumentException("Size must be greater than 0");

  }

  return new Partition<>(list,size);

}

Location: ListUtils.java

Content: 

/** 

 * Selects all elements from inputCollection which don't match the given predicate into an output collection. <p> If the input predicate is  {@code null}, the result is an empty list.

 * @param < E > the element type

 * @param inputCollection the collection to get the input from, may not be null

 * @param predicate the predicate to use, may be null

 * @return the elements <b>not</b> matching the predicate (new list)

 * @throws NullPointerException if the input collection is null

 * @since 4.0

 * @see CollectionUtils#selectRejected(Iterable,Predicate)

 */

public static <E>List<E> selectRejected(final Collection<? extends E> inputCollection,final Predicate<? super E> predicate){

  return CollectionUtils.selectRejected(inputCollection,predicate,new ArrayList<E>(inputCollection.size()));

}

Location: ListUtils.java

Content: 

/** 

 * Selects all elements from input collection which match the given predicate into an output list. <p> A  {@code null} predicate matches no elements.

 * @param < E > the element type

 * @param inputCollection  the collection to get the input from, may not be null

 * @param predicate  the predicate to use, may be null

 * @return the elements matching the predicate (new list)

 * @throws NullPointerException if the input list is null

 * @since 4.0

 * @see CollectionUtils#select(Iterable,Predicate)

 */

public static <E>List<E> select(final Collection<? extends E> inputCollection,final Predicate<? super E> predicate){

  return CollectionUtils.select(inputCollection,predicate,new ArrayList<E>(inputCollection.size()));

}

Location: ListUtils.java

Content: 

/** 

 * Subtracts all elements in the second list from the first list, placing the results in a new list. <p> This differs from  {@link List#removeAll(Collection)} in thatcardinality is respected; if <Code>list1</Code> contains two occurrences of <Code>null</Code> and <Code>list2</Code> only contains one occurrence, then the returned list will still contain one occurrence.

 * @param < E > the element type

 * @param list1  the list to subtract from

 * @param list2  the list to subtract

 * @return a new list containing the results

 * @throws NullPointerException if either list is null

 */

public static <E>List<E> subtract(final List<E> list1,final List<? extends E> list2){

  final ArrayList<E> result=new ArrayList<>();

  final HashBag<E> bag=new HashBag<>(list2);

  for (  final E e : list1) {

    if (!bag.remove(e,1)) {

      result.add(e);

    }

  }

  return result;

}

Location: ListUtils.java

Content: 

/** 

 * Returns the sum of the given lists.  This is their intersection subtracted from their union.

 * @param < E > the element type

 * @param list1  the first list

 * @param list2  the second list

 * @return  a new list containing the sum of those lists

 * @throws NullPointerException if either list is null

 */

public static <E>List<E> sum(final List<? extends E> list1,final List<? extends E> list2){

  return subtract(union(list1,list2),intersection(list1,list2));

}

Location: ListUtils.java

Content: 

/** 

 * Returns a synchronized list backed by the given list. <p> You must manually synchronize on the returned list's iterator to avoid non-deterministic behavior: <pre> List list = ListUtils.synchronizedList(myList); synchronized (list) { Iterator i = list.iterator(); while (i.hasNext()) { process (i.next()); } } </pre> This method is just a wrapper for  {@link Collections#synchronizedList(List)}.

 * @param < E > the element type

 * @param list  the list to synchronize, must not be null

 * @return a synchronized list backed by the given list

 * @throws NullPointerException if the list is null

 */

public static <E>List<E> synchronizedList(final List<E> list){

  return Collections.synchronizedList(list);

}

Location: ListUtils.java

Content: 

/** 

 * Returns a new list containing the second list appended to the first list.  The  {@link List#addAll(Collection)} operation isused to append the two given lists into a new list.

 * @param < E > the element type

 * @param list1  the first list

 * @param list2  the second list

 * @return a new list containing the union of those lists

 * @throws NullPointerException if either list is null

 */

public static <E>List<E> union(final List<? extends E> list1,final List<? extends E> list2){

  final ArrayList<E> result=new ArrayList<>(list1.size() + list2.size());

  result.addAll(list1);

  result.addAll(list2);

  return result;

}

