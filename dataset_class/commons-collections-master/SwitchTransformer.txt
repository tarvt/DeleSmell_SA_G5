Location: SwitchTransformer.java

Content: 

/** 

 * Gets the default transformer.

 * @return the default transformer

 * @since 3.1

 */

public Transformer<? super I,? extends O> getDefaultTransformer(){

  return iDefault;

}

Location: SwitchTransformer.java

Content: 

/** 

 * Gets the transformers.

 * @return a copy of the transformers

 * @since 3.1

 */

public Transformer<? super I,? extends O>[] getTransformers(){

  return FunctorUtils.<I,O>copy(iTransformers);

}

Location: SwitchTransformer.java

Content: 

/** 

 * Hidden constructor for the use by the static factory methods.

 * @param clone  if {@code true} the input arguments will be cloned

 * @param predicates  array of predicates, no nulls

 * @param transformers  matching array of transformers, no nulls

 * @param defaultTransformer  the transformer to use if no match, null means return null

 */

@SuppressWarnings("unchecked") private SwitchTransformer(final boolean clone,final Predicate<? super I>[] predicates,final Transformer<? super I,? extends O>[] transformers,final Transformer<? super I,? extends O> defaultTransformer){

  iPredicates=clone ? FunctorUtils.copy(predicates) : predicates;

  iTransformers=clone ? FunctorUtils.copy(transformers) : transformers;

  iDefault=defaultTransformer == null ? ConstantTransformer.<I,O>nullTransformer() : defaultTransformer;

}

Location: SwitchTransformer.java

Content: 

/** 

 * Create a new Transformer that calls one of the transformers depending on the predicates. <p> The Map consists of Predicate keys and Transformer values. A transformer is called if its matching predicate returns true. Each predicate is evaluated until one returns true. If no predicates evaluate to true, the default transformer is called. The default transformer is set in the map with a null key. The ordering is that of the iterator() method on the entryset collection of the map.

 * @param < I >  the input type

 * @param < O >  the output type

 * @param map  a map of predicates to transformers

 * @return the {@code switch} transformer

 * @throws NullPointerException if the map is null

 * @throws NullPointerException if any transformer in the map is null

 * @throws ClassCastException  if the map elements are of the wrong type

 */

@SuppressWarnings("unchecked") public static <I,O>Transformer<I,O> switchTransformer(final Map<? extends Predicate<? super I>,? extends Transformer<? super I,? extends O>> map){

  Objects.requireNonNull(map,"map");

  if (map.isEmpty()) {

    return ConstantTransformer.<I,O>nullTransformer();

  }

  final Transformer<? super I,? extends O> defaultTransformer=map.remove(null);

  final int size=map.size();

  if (size == 0) {

    return (Transformer<I,O>)(defaultTransformer == null ? ConstantTransformer.<I,O>nullTransformer() : defaultTransformer);

  }

  final Transformer<? super I,? extends O>[] transformers=new Transformer[size];

  final Predicate<? super I>[] preds=new Predicate[size];

  int i=0;

  for (  final Map.Entry<? extends Predicate<? super I>,? extends Transformer<? super I,? extends O>> entry : map.entrySet()) {

    preds[i]=entry.getKey();

    transformers[i]=entry.getValue();

    i++;

  }

  return new SwitchTransformer<>(false,preds,transformers,defaultTransformer);

}

Location: SwitchTransformer.java

Content: 

/** 

 * Constructor that performs no validation. Use  {@code switchTransformer} if you want that.

 * @param predicates  array of predicates, cloned, no nulls

 * @param transformers  matching array of transformers, cloned, no nulls

 * @param defaultTransformer  the transformer to use if no match, null means return null

 */

public SwitchTransformer(final Predicate<? super I>[] predicates,final Transformer<? super I,? extends O>[] transformers,final Transformer<? super I,? extends O> defaultTransformer){

  this(true,predicates,transformers,defaultTransformer);

}

Location: SwitchTransformer.java

Content: 

/** 

 * Gets the default transformer.

 * @return the default transformer

 * @since 3.1

 */

public Transformer<? super I,? extends O> getDefaultTransformer(){

  return iDefault;

}

Location: SwitchTransformer.java

Content: 

/** 

 * Gets the transformers.

 * @return a copy of the transformers

 * @since 3.1

 */

public Transformer<? super I,? extends O>[] getTransformers(){

  return FunctorUtils.<I,O>copy(iTransformers);

}

Location: SwitchTransformer.java

Content: 

/** 

 * Hidden constructor for the use by the static factory methods.

 * @param clone  if {@code true} the input arguments will be cloned

 * @param predicates  array of predicates, no nulls

 * @param transformers  matching array of transformers, no nulls

 * @param defaultTransformer  the transformer to use if no match, null means return null

 */

@SuppressWarnings("unchecked") private SwitchTransformer(final boolean clone,final Predicate<? super I>[] predicates,final Transformer<? super I,? extends O>[] transformers,final Transformer<? super I,? extends O> defaultTransformer){

  iPredicates=clone ? FunctorUtils.copy(predicates) : predicates;

  iTransformers=clone ? FunctorUtils.copy(transformers) : transformers;

  iDefault=defaultTransformer == null ? ConstantTransformer.<I,O>nullTransformer() : defaultTransformer;

}

Location: SwitchTransformer.java

Content: 

/** 

 * Create a new Transformer that calls one of the transformers depending on the predicates. <p> The Map consists of Predicate keys and Transformer values. A transformer is called if its matching predicate returns true. Each predicate is evaluated until one returns true. If no predicates evaluate to true, the default transformer is called. The default transformer is set in the map with a null key. The ordering is that of the iterator() method on the entryset collection of the map.

 * @param < I >  the input type

 * @param < O >  the output type

 * @param map  a map of predicates to transformers

 * @return the {@code switch} transformer

 * @throws NullPointerException if the map is null

 * @throws NullPointerException if any transformer in the map is null

 * @throws ClassCastException  if the map elements are of the wrong type

 */

@SuppressWarnings("unchecked") public static <I,O>Transformer<I,O> switchTransformer(final Map<? extends Predicate<? super I>,? extends Transformer<? super I,? extends O>> map){

  Objects.requireNonNull(map,"map");

  if (map.isEmpty()) {

    return ConstantTransformer.<I,O>nullTransformer();

  }

  final Transformer<? super I,? extends O> defaultTransformer=map.remove(null);

  final int size=map.size();

  if (size == 0) {

    return (Transformer<I,O>)(defaultTransformer == null ? ConstantTransformer.<I,O>nullTransformer() : defaultTransformer);

  }

  final Transformer<? super I,? extends O>[] transformers=new Transformer[size];

  final Predicate<? super I>[] preds=new Predicate[size];

  int i=0;

  for (  final Map.Entry<? extends Predicate<? super I>,? extends Transformer<? super I,? extends O>> entry : map.entrySet()) {

    preds[i]=entry.getKey();

    transformers[i]=entry.getValue();

    i++;

  }

  return new SwitchTransformer<>(false,preds,transformers,defaultTransformer);

}

Location: SwitchTransformer.java

Content: 

/** 

 * Constructor that performs no validation. Use  {@code switchTransformer} if you want that.

 * @param predicates  array of predicates, cloned, no nulls

 * @param transformers  matching array of transformers, cloned, no nulls

 * @param defaultTransformer  the transformer to use if no match, null means return null

 */

public SwitchTransformer(final Predicate<? super I>[] predicates,final Transformer<? super I,? extends O>[] transformers,final Transformer<? super I,? extends O> defaultTransformer){

  this(true,predicates,transformers,defaultTransformer);

}

