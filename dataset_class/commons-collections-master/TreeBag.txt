Location: TreeBag.java

Content: 

/** 

 * Constructs an empty  {@link TreeBag}.

 */

public TreeBag(){

  super(new TreeMap<E,MutableInteger>());

}

Location: TreeBag.java

Content: 

/** 

 * Constructs a  {@link TreeBag} containing all the members of thespecified collection.

 * @param coll the collection to copy into the bag

 */

public TreeBag(final Collection<? extends E> coll){

  this();

  addAll(coll);

}

Location: TreeBag.java

Content: 

/** 

 * Constructs an empty bag that maintains order on its unique representative members according to the given  {@link Comparator}.

 * @param comparator the comparator to use

 */

public TreeBag(final Comparator<? super E> comparator){

  super(new TreeMap<E,MutableInteger>(comparator));

}

Location: TreeBag.java

Content: 

/** 

 * Constructs an empty  {@link TreeBag}.

 */

public TreeBag(){

  super(new TreeMap<E,MutableInteger>());

}

Location: TreeBag.java

Content: 

/** 

 * Constructs a  {@link TreeBag} containing all the members of thespecified collection.

 * @param coll the collection to copy into the bag

 */

public TreeBag(final Collection<? extends E> coll){

  this();

  addAll(coll);

}

Location: TreeBag.java

Content: 

/** 

 * Constructs an empty bag that maintains order on its unique representative members according to the given  {@link Comparator}.

 * @param comparator the comparator to use

 */

public TreeBag(final Comparator<? super E> comparator){

  super(new TreeMap<E,MutableInteger>(comparator));

}

