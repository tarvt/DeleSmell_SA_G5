Location: EmptyPropertiesTest.java

Content: 

@Test public void testClear(){

  PropertiesFactory.EMPTY_PROPERTIES.clear();

  assertEquals(0,PropertiesFactory.EMPTY_PROPERTIES.size());

}

Location: EmptyPropertiesTest.java

Content: 

@Test public void testClone(){

  PropertiesFactory.EMPTY_PROPERTIES.clone();

  assertEquals(0,PropertiesFactory.EMPTY_PROPERTIES.size());

}

Location: EmptyPropertiesTest.java

Content: 

@Test public void testCompute(){

  assertThrows(UnsupportedOperationException.class,() -> PropertiesFactory.EMPTY_PROPERTIES.compute("key",(k,v) -> "foo"));

}

Location: EmptyPropertiesTest.java

Content: 

@Test public void testComputeIfAbsent(){

  assertThrows(UnsupportedOperationException.class,() -> PropertiesFactory.EMPTY_PROPERTIES.computeIfAbsent("key",k -> "foo"));

}

Location: EmptyPropertiesTest.java

Content: 

@Test public void testComputeIfPresent(){

  assertThrows(UnsupportedOperationException.class,() -> PropertiesFactory.EMPTY_PROPERTIES.computeIfPresent("key",(k,v) -> "foo"));

}

Location: EmptyPropertiesTest.java

Content: 

@Test public void testContainsKey(){

  assertFalse(PropertiesFactory.EMPTY_PROPERTIES.containsKey("foo"));

}

Location: EmptyPropertiesTest.java

Content: 

@Test public void testContainsValue(){

  assertFalse(PropertiesFactory.EMPTY_PROPERTIES.containsValue("foo"));

}

Location: EmptyPropertiesTest.java

Content: 

@Test public void testElements(){

  assertFalse(PropertiesFactory.EMPTY_PROPERTIES.elements().hasMoreElements());

}

Location: EmptyPropertiesTest.java

Content: 

@Test public void testEntrySet(){

  assertTrue(PropertiesFactory.EMPTY_PROPERTIES.entrySet().isEmpty());

}

Location: EmptyPropertiesTest.java

Content: 

@Test public void testEquals(){

  assertEquals(PropertiesFactory.EMPTY_PROPERTIES,PropertiesFactory.EMPTY_PROPERTIES);

  assertEquals(PropertiesFactory.EMPTY_PROPERTIES,new Properties());

  assertEquals(new Properties(),PropertiesFactory.EMPTY_PROPERTIES);

  assertNotEquals(null,PropertiesFactory.EMPTY_PROPERTIES);

  final Properties p=new Properties();

  p.put("Key","Value");

  assertNotEquals(PropertiesFactory.EMPTY_PROPERTIES,p);

  assertNotEquals(p,PropertiesFactory.EMPTY_PROPERTIES);

}

Location: EmptyPropertiesTest.java

Content: 

public void testForEach(){

  PropertiesFactory.EMPTY_PROPERTIES.forEach((k,v) -> fail());

}

Location: EmptyPropertiesTest.java

Content: 

@Test public void testGetOrDefault(){

  assertEquals("bar",PropertiesFactory.EMPTY_PROPERTIES.getOrDefault("foo","bar"));

}

Location: EmptyPropertiesTest.java

Content: 

@Test public void testGetProperty(){

  assertNull(PropertiesFactory.EMPTY_PROPERTIES.getProperty("foo"));

}

Location: EmptyPropertiesTest.java

Content: 

@Test public void testGetPropertyDefault(){

  assertEquals("bar",PropertiesFactory.EMPTY_PROPERTIES.getProperty("foo","bar"));

}

Location: EmptyPropertiesTest.java

Content: 

@Test public void testHashCode(){

  assertEquals(PropertiesFactory.EMPTY_PROPERTIES.hashCode(),PropertiesFactory.EMPTY_PROPERTIES.hashCode());

}

Location: EmptyPropertiesTest.java

Content: 

@Test public void testIsEmpty(){

  assertTrue(PropertiesFactory.EMPTY_PROPERTIES.isEmpty());

}

Location: EmptyPropertiesTest.java

Content: 

@Test public void testKeys(){

  assertFalse(PropertiesFactory.EMPTY_PROPERTIES.keys().hasMoreElements());

}

Location: EmptyPropertiesTest.java

Content: 

@Test public void testKeySet(){

  assertTrue(PropertiesFactory.EMPTY_PROPERTIES.keySet().isEmpty());

}

Location: EmptyPropertiesTest.java

Content: 

@Test public void testListToPrintStream(){

  final ByteArrayOutputStream actual=new ByteArrayOutputStream();

  PropertiesFactory.EMPTY_PROPERTIES.list(new PrintStream(actual));

  final ByteArrayOutputStream expected=new ByteArrayOutputStream();

  PropertiesFactory.INSTANCE.createProperties().list(new PrintStream(expected));

  assertArrayEquals(expected.toByteArray(),actual.toByteArray());

  expected.reset();

  new Properties().list(new PrintStream(expected));

  assertArrayEquals(expected.toByteArray(),actual.toByteArray());

}

Location: EmptyPropertiesTest.java

Content: 

@Test public void testListToPrintWriter(){

  final ByteArrayOutputStream actual=new ByteArrayOutputStream();

  PropertiesFactory.EMPTY_PROPERTIES.list(new PrintWriter(actual));

  final ByteArrayOutputStream expected=new ByteArrayOutputStream();

  PropertiesFactory.INSTANCE.createProperties().list(new PrintWriter(expected));

  assertArrayEquals(expected.toByteArray(),actual.toByteArray());

  expected.reset();

  new Properties().list(new PrintWriter(expected));

  assertArrayEquals(expected.toByteArray(),actual.toByteArray());

}

Location: EmptyPropertiesTest.java

Content: 

@Test public void testLoadFromXML() throws IOException {

  assertThrows(UnsupportedOperationException.class,() -> PropertiesFactory.EMPTY_PROPERTIES.loadFromXML(new ByteArrayInputStream(ArrayUtils.EMPTY_BYTE_ARRAY)));

}

Location: EmptyPropertiesTest.java

Content: 

@Test public void testLoadInputStream() throws IOException {

  assertThrows(UnsupportedOperationException.class,() -> PropertiesFactory.EMPTY_PROPERTIES.load(new ByteArrayInputStream(ArrayUtils.EMPTY_BYTE_ARRAY)));

}

Location: EmptyPropertiesTest.java

Content: 

@Test public void testLoadReader() throws IOException {

  try (NullReader reader=new NullReader(0)){

    assertThrows(UnsupportedOperationException.class,() -> PropertiesFactory.EMPTY_PROPERTIES.load(reader));

  }

 }

Location: EmptyPropertiesTest.java

Content: 

@Test public void testMerge(){

  assertThrows(UnsupportedOperationException.class,() -> PropertiesFactory.EMPTY_PROPERTIES.merge("key","value",(k,v) -> "foo"));

}

Location: EmptyPropertiesTest.java

Content: 

@Test public void testPropertyName(){

  assertFalse(PropertiesFactory.EMPTY_PROPERTIES.propertyNames().hasMoreElements());

}

Location: EmptyPropertiesTest.java

Content: 

@Test public void testPut(){

  assertThrows(UnsupportedOperationException.class,() -> PropertiesFactory.EMPTY_PROPERTIES.put("Key","Value"));

}

Location: EmptyPropertiesTest.java

Content: 

@Test public void testPutAll(){

  assertThrows(UnsupportedOperationException.class,() -> PropertiesFactory.EMPTY_PROPERTIES.putAll(new HashMap<>()));

}

Location: EmptyPropertiesTest.java

Content: 

@Test public void testPutIfAbsent(){

  assertThrows(UnsupportedOperationException.class,() -> PropertiesFactory.EMPTY_PROPERTIES.putIfAbsent("Key","Value"));

}

Location: EmptyPropertiesTest.java

Content: 

@Test public void testRehash(){

}

Location: EmptyPropertiesTest.java

Content: 

@Test public void testRemoveKey(){

  assertThrows(UnsupportedOperationException.class,() -> PropertiesFactory.EMPTY_PROPERTIES.remove("key"));

}

Location: EmptyPropertiesTest.java

Content: 

@Test public void testReplace(){

  assertThrows(UnsupportedOperationException.class,() -> PropertiesFactory.EMPTY_PROPERTIES.replace("key","value1"));

}

Location: EmptyPropertiesTest.java

Content: 

@Test public void testReplaceAll(){

  assertThrows(UnsupportedOperationException.class,() -> PropertiesFactory.EMPTY_PROPERTIES.replaceAll((k,v) -> "value1"));

}

Location: EmptyPropertiesTest.java

Content: 

@Test public void testReplaceOldValue(){

  assertThrows(UnsupportedOperationException.class,() -> PropertiesFactory.EMPTY_PROPERTIES.replace("key","value1","value2"));

}

Location: EmptyPropertiesTest.java

Content: 

@Test public void testSave() throws IOException {

  final String comments="Hello world!";

  try (ByteArrayOutputStream actual=new ByteArrayOutputStream()){

    try (PrintStream out=new PrintStream(actual)){

      PropertiesFactory.EMPTY_PROPERTIES.save(out,comments);

    }

     try (ByteArrayOutputStream expected=new ByteArrayOutputStream()){

      try (PrintStream out=new PrintStream(expected)){

        PropertiesFactory.INSTANCE.createProperties().save(out,comments);

      }

       assertArrayEquals(expected.toByteArray(),actual.toByteArray(),() -> new String(expected.toByteArray()));

      expected.reset();

      try (PrintStream out=new PrintStream(expected)){

        new Properties().save(out,comments);

      }

       assertArrayEquals(expected.toByteArray(),actual.toByteArray(),() -> new String(expected.toByteArray()));

    }

   }

 }

Location: EmptyPropertiesTest.java

Content: 

@Test public void testSetProperty(){

  assertThrows(UnsupportedOperationException.class,() -> PropertiesFactory.EMPTY_PROPERTIES.setProperty("Key","Value"));

}

Location: EmptyPropertiesTest.java

Content: 

@Test public void testSize(){

  assertEquals(0,PropertiesFactory.EMPTY_PROPERTIES.size());

}

Location: EmptyPropertiesTest.java

Content: 

@Test public void testStoreToOutputStream() throws IOException {

  final String comments="Hello world!";

  final ByteArrayOutputStream actual=new ByteArrayOutputStream();

  PropertiesFactory.EMPTY_PROPERTIES.store(new PrintStream(actual),comments);

  final ByteArrayOutputStream expected=new ByteArrayOutputStream();

  PropertiesFactory.INSTANCE.createProperties().store(new PrintStream(expected),comments);

  assertArrayEquals(expected.toByteArray(),actual.toByteArray());

  expected.reset();

  new Properties().store(new PrintStream(expected),comments);

  assertArrayEquals(expected.toByteArray(),actual.toByteArray());

}

Location: EmptyPropertiesTest.java

Content: 

@Test public void testStoreToPrintWriter() throws IOException {

  final String comments="Hello world!";

  final ByteArrayOutputStream actual=new ByteArrayOutputStream();

  PropertiesFactory.EMPTY_PROPERTIES.store(new PrintWriter(actual),comments);

  final ByteArrayOutputStream expected=new ByteArrayOutputStream();

  PropertiesFactory.INSTANCE.createProperties().store(new PrintWriter(expected),comments);

  assertArrayEquals(expected.toByteArray(),actual.toByteArray());

  expected.reset();

  new Properties().store(new PrintWriter(expected),comments);

  assertArrayEquals(expected.toByteArray(),actual.toByteArray());

}

Location: EmptyPropertiesTest.java

Content: 

@Test public void testStoreToXMLOutputStream() throws IOException {

  final String comments="Hello world!";

  final ByteArrayOutputStream actual=new ByteArrayOutputStream();

  PropertiesFactory.EMPTY_PROPERTIES.storeToXML(new PrintStream(actual),comments);

  final ByteArrayOutputStream expected=new ByteArrayOutputStream();

  PropertiesFactory.INSTANCE.createProperties().storeToXML(new PrintStream(expected),comments);

  assertArrayEquals(expected.toByteArray(),actual.toByteArray());

  expected.reset();

  new Properties().storeToXML(new PrintStream(expected),comments);

  assertArrayEquals(expected.toByteArray(),actual.toByteArray());

}

Location: EmptyPropertiesTest.java

Content: 

@Test public void testStoreToXMLOutputStreamWithEncoding() throws IOException {

  final String comments="Hello world!";

  final String encoding=StandardCharsets.UTF_8.name();

  final ByteArrayOutputStream actual=new ByteArrayOutputStream();

  PropertiesFactory.EMPTY_PROPERTIES.storeToXML(new PrintStream(actual),comments,encoding);

  final ByteArrayOutputStream expected=new ByteArrayOutputStream();

  PropertiesFactory.INSTANCE.createProperties().storeToXML(new PrintStream(expected),comments,encoding);

  assertArrayEquals(expected.toByteArray(),actual.toByteArray());

  expected.reset();

  new Properties().storeToXML(new PrintStream(expected),comments,encoding);

  assertArrayEquals(expected.toByteArray(),actual.toByteArray());

}

Location: EmptyPropertiesTest.java

Content: 

@Test public void testStringPropertyName(){

  assertTrue(PropertiesFactory.EMPTY_PROPERTIES.stringPropertyNames().isEmpty());

}

Location: EmptyPropertiesTest.java

Content: 

@Test public void testToString(){

  assertEquals(new Properties().toString(),PropertiesFactory.EMPTY_PROPERTIES.toString());

}

Location: EmptyPropertiesTest.java

Content: 

@Test public void testValues(){

  assertTrue(PropertiesFactory.EMPTY_PROPERTIES.values().isEmpty());

}

Location: EmptyPropertiesTest.java

Content: 

@Test public void testClear(){

  PropertiesFactory.EMPTY_PROPERTIES.clear();

  assertEquals(0,PropertiesFactory.EMPTY_PROPERTIES.size());

}

Location: EmptyPropertiesTest.java

Content: 

@Test public void testClone(){

  PropertiesFactory.EMPTY_PROPERTIES.clone();

  assertEquals(0,PropertiesFactory.EMPTY_PROPERTIES.size());

}

Location: EmptyPropertiesTest.java

Content: 

@Test public void testCompute(){

  assertThrows(UnsupportedOperationException.class,() -> PropertiesFactory.EMPTY_PROPERTIES.compute("key",(k,v) -> "foo"));

}

Location: EmptyPropertiesTest.java

Content: 

@Test public void testComputeIfAbsent(){

  assertThrows(UnsupportedOperationException.class,() -> PropertiesFactory.EMPTY_PROPERTIES.computeIfAbsent("key",k -> "foo"));

}

Location: EmptyPropertiesTest.java

Content: 

@Test public void testComputeIfPresent(){

  assertThrows(UnsupportedOperationException.class,() -> PropertiesFactory.EMPTY_PROPERTIES.computeIfPresent("key",(k,v) -> "foo"));

}

Location: EmptyPropertiesTest.java

Content: 

@Test public void testContainsKey(){

  assertFalse(PropertiesFactory.EMPTY_PROPERTIES.containsKey("foo"));

}

Location: EmptyPropertiesTest.java

Content: 

@Test public void testContainsValue(){

  assertFalse(PropertiesFactory.EMPTY_PROPERTIES.containsValue("foo"));

}

Location: EmptyPropertiesTest.java

Content: 

@Test public void testElements(){

  assertFalse(PropertiesFactory.EMPTY_PROPERTIES.elements().hasMoreElements());

}

Location: EmptyPropertiesTest.java

Content: 

@Test public void testEntrySet(){

  assertTrue(PropertiesFactory.EMPTY_PROPERTIES.entrySet().isEmpty());

}

Location: EmptyPropertiesTest.java

Content: 

@Test public void testEquals(){

  assertEquals(PropertiesFactory.EMPTY_PROPERTIES,PropertiesFactory.EMPTY_PROPERTIES);

  assertEquals(PropertiesFactory.EMPTY_PROPERTIES,new Properties());

  assertEquals(new Properties(),PropertiesFactory.EMPTY_PROPERTIES);

  assertNotEquals(null,PropertiesFactory.EMPTY_PROPERTIES);

  final Properties p=new Properties();

  p.put("Key","Value");

  assertNotEquals(PropertiesFactory.EMPTY_PROPERTIES,p);

  assertNotEquals(p,PropertiesFactory.EMPTY_PROPERTIES);

}

Location: EmptyPropertiesTest.java

Content: 

public void testForEach(){

  PropertiesFactory.EMPTY_PROPERTIES.forEach((k,v) -> fail());

}

Location: EmptyPropertiesTest.java

Content: 

@Test public void testGetOrDefault(){

  assertEquals("bar",PropertiesFactory.EMPTY_PROPERTIES.getOrDefault("foo","bar"));

}

Location: EmptyPropertiesTest.java

Content: 

@Test public void testGetProperty(){

  assertNull(PropertiesFactory.EMPTY_PROPERTIES.getProperty("foo"));

}

Location: EmptyPropertiesTest.java

Content: 

@Test public void testGetPropertyDefault(){

  assertEquals("bar",PropertiesFactory.EMPTY_PROPERTIES.getProperty("foo","bar"));

}

Location: EmptyPropertiesTest.java

Content: 

@Test public void testHashCode(){

  assertEquals(PropertiesFactory.EMPTY_PROPERTIES.hashCode(),PropertiesFactory.EMPTY_PROPERTIES.hashCode());

}

Location: EmptyPropertiesTest.java

Content: 

@Test public void testIsEmpty(){

  assertTrue(PropertiesFactory.EMPTY_PROPERTIES.isEmpty());

}

Location: EmptyPropertiesTest.java

Content: 

@Test public void testKeys(){

  assertFalse(PropertiesFactory.EMPTY_PROPERTIES.keys().hasMoreElements());

}

Location: EmptyPropertiesTest.java

Content: 

@Test public void testKeySet(){

  assertTrue(PropertiesFactory.EMPTY_PROPERTIES.keySet().isEmpty());

}

Location: EmptyPropertiesTest.java

Content: 

@Test public void testListToPrintStream(){

  final ByteArrayOutputStream actual=new ByteArrayOutputStream();

  PropertiesFactory.EMPTY_PROPERTIES.list(new PrintStream(actual));

  final ByteArrayOutputStream expected=new ByteArrayOutputStream();

  PropertiesFactory.INSTANCE.createProperties().list(new PrintStream(expected));

  assertArrayEquals(expected.toByteArray(),actual.toByteArray());

  expected.reset();

  new Properties().list(new PrintStream(expected));

  assertArrayEquals(expected.toByteArray(),actual.toByteArray());

}

Location: EmptyPropertiesTest.java

Content: 

@Test public void testListToPrintWriter(){

  final ByteArrayOutputStream actual=new ByteArrayOutputStream();

  PropertiesFactory.EMPTY_PROPERTIES.list(new PrintWriter(actual));

  final ByteArrayOutputStream expected=new ByteArrayOutputStream();

  PropertiesFactory.INSTANCE.createProperties().list(new PrintWriter(expected));

  assertArrayEquals(expected.toByteArray(),actual.toByteArray());

  expected.reset();

  new Properties().list(new PrintWriter(expected));

  assertArrayEquals(expected.toByteArray(),actual.toByteArray());

}

Location: EmptyPropertiesTest.java

Content: 

@Test public void testLoadFromXML() throws IOException {

  assertThrows(UnsupportedOperationException.class,() -> PropertiesFactory.EMPTY_PROPERTIES.loadFromXML(new ByteArrayInputStream(ArrayUtils.EMPTY_BYTE_ARRAY)));

}

Location: EmptyPropertiesTest.java

Content: 

@Test public void testLoadInputStream() throws IOException {

  assertThrows(UnsupportedOperationException.class,() -> PropertiesFactory.EMPTY_PROPERTIES.load(new ByteArrayInputStream(ArrayUtils.EMPTY_BYTE_ARRAY)));

}

Location: EmptyPropertiesTest.java

Content: 

@Test public void testLoadReader() throws IOException {

  try (NullReader reader=new NullReader(0)){

    assertThrows(UnsupportedOperationException.class,() -> PropertiesFactory.EMPTY_PROPERTIES.load(reader));

  }

 }

Location: EmptyPropertiesTest.java

Content: 

@Test public void testMerge(){

  assertThrows(UnsupportedOperationException.class,() -> PropertiesFactory.EMPTY_PROPERTIES.merge("key","value",(k,v) -> "foo"));

}

Location: EmptyPropertiesTest.java

Content: 

@Test public void testPropertyName(){

  assertFalse(PropertiesFactory.EMPTY_PROPERTIES.propertyNames().hasMoreElements());

}

Location: EmptyPropertiesTest.java

Content: 

@Test public void testPut(){

  assertThrows(UnsupportedOperationException.class,() -> PropertiesFactory.EMPTY_PROPERTIES.put("Key","Value"));

}

Location: EmptyPropertiesTest.java

Content: 

@Test public void testPutAll(){

  assertThrows(UnsupportedOperationException.class,() -> PropertiesFactory.EMPTY_PROPERTIES.putAll(new HashMap<>()));

}

Location: EmptyPropertiesTest.java

Content: 

@Test public void testPutIfAbsent(){

  assertThrows(UnsupportedOperationException.class,() -> PropertiesFactory.EMPTY_PROPERTIES.putIfAbsent("Key","Value"));

}

Location: EmptyPropertiesTest.java

Content: 

@Test public void testRehash(){

}

Location: EmptyPropertiesTest.java

Content: 

@Test public void testRemoveKey(){

  assertThrows(UnsupportedOperationException.class,() -> PropertiesFactory.EMPTY_PROPERTIES.remove("key"));

}

Location: EmptyPropertiesTest.java

Content: 

@Test public void testReplace(){

  assertThrows(UnsupportedOperationException.class,() -> PropertiesFactory.EMPTY_PROPERTIES.replace("key","value1"));

}

Location: EmptyPropertiesTest.java

Content: 

@Test public void testReplaceAll(){

  assertThrows(UnsupportedOperationException.class,() -> PropertiesFactory.EMPTY_PROPERTIES.replaceAll((k,v) -> "value1"));

}

Location: EmptyPropertiesTest.java

Content: 

@Test public void testReplaceOldValue(){

  assertThrows(UnsupportedOperationException.class,() -> PropertiesFactory.EMPTY_PROPERTIES.replace("key","value1","value2"));

}

Location: EmptyPropertiesTest.java

Content: 

@Test public void testSave() throws IOException {

  final String comments="Hello world!";

  try (ByteArrayOutputStream actual=new ByteArrayOutputStream()){

    try (PrintStream out=new PrintStream(actual)){

      PropertiesFactory.EMPTY_PROPERTIES.save(out,comments);

    }

     try (ByteArrayOutputStream expected=new ByteArrayOutputStream()){

      try (PrintStream out=new PrintStream(expected)){

        PropertiesFactory.INSTANCE.createProperties().save(out,comments);

      }

       assertArrayEquals(expected.toByteArray(),actual.toByteArray(),() -> new String(expected.toByteArray()));

      expected.reset();

      try (PrintStream out=new PrintStream(expected)){

        new Properties().save(out,comments);

      }

       assertArrayEquals(expected.toByteArray(),actual.toByteArray(),() -> new String(expected.toByteArray()));

    }

   }

 }

Location: EmptyPropertiesTest.java

Content: 

@Test public void testSetProperty(){

  assertThrows(UnsupportedOperationException.class,() -> PropertiesFactory.EMPTY_PROPERTIES.setProperty("Key","Value"));

}

Location: EmptyPropertiesTest.java

Content: 

@Test public void testSize(){

  assertEquals(0,PropertiesFactory.EMPTY_PROPERTIES.size());

}

Location: EmptyPropertiesTest.java

Content: 

@Test public void testStoreToOutputStream() throws IOException {

  final String comments="Hello world!";

  final ByteArrayOutputStream actual=new ByteArrayOutputStream();

  PropertiesFactory.EMPTY_PROPERTIES.store(new PrintStream(actual),comments);

  final ByteArrayOutputStream expected=new ByteArrayOutputStream();

  PropertiesFactory.INSTANCE.createProperties().store(new PrintStream(expected),comments);

  assertArrayEquals(expected.toByteArray(),actual.toByteArray());

  expected.reset();

  new Properties().store(new PrintStream(expected),comments);

  assertArrayEquals(expected.toByteArray(),actual.toByteArray());

}

Location: EmptyPropertiesTest.java

Content: 

@Test public void testStoreToPrintWriter() throws IOException {

  final String comments="Hello world!";

  final ByteArrayOutputStream actual=new ByteArrayOutputStream();

  PropertiesFactory.EMPTY_PROPERTIES.store(new PrintWriter(actual),comments);

  final ByteArrayOutputStream expected=new ByteArrayOutputStream();

  PropertiesFactory.INSTANCE.createProperties().store(new PrintWriter(expected),comments);

  assertArrayEquals(expected.toByteArray(),actual.toByteArray());

  expected.reset();

  new Properties().store(new PrintWriter(expected),comments);

  assertArrayEquals(expected.toByteArray(),actual.toByteArray());

}

Location: EmptyPropertiesTest.java

Content: 

@Test public void testStoreToXMLOutputStream() throws IOException {

  final String comments="Hello world!";

  final ByteArrayOutputStream actual=new ByteArrayOutputStream();

  PropertiesFactory.EMPTY_PROPERTIES.storeToXML(new PrintStream(actual),comments);

  final ByteArrayOutputStream expected=new ByteArrayOutputStream();

  PropertiesFactory.INSTANCE.createProperties().storeToXML(new PrintStream(expected),comments);

  assertArrayEquals(expected.toByteArray(),actual.toByteArray());

  expected.reset();

  new Properties().storeToXML(new PrintStream(expected),comments);

  assertArrayEquals(expected.toByteArray(),actual.toByteArray());

}

Location: EmptyPropertiesTest.java

Content: 

@Test public void testStoreToXMLOutputStreamWithEncoding() throws IOException {

  final String comments="Hello world!";

  final String encoding=StandardCharsets.UTF_8.name();

  final ByteArrayOutputStream actual=new ByteArrayOutputStream();

  PropertiesFactory.EMPTY_PROPERTIES.storeToXML(new PrintStream(actual),comments,encoding);

  final ByteArrayOutputStream expected=new ByteArrayOutputStream();

  PropertiesFactory.INSTANCE.createProperties().storeToXML(new PrintStream(expected),comments,encoding);

  assertArrayEquals(expected.toByteArray(),actual.toByteArray());

  expected.reset();

  new Properties().storeToXML(new PrintStream(expected),comments,encoding);

  assertArrayEquals(expected.toByteArray(),actual.toByteArray());

}

Location: EmptyPropertiesTest.java

Content: 

@Test public void testStringPropertyName(){

  assertTrue(PropertiesFactory.EMPTY_PROPERTIES.stringPropertyNames().isEmpty());

}

Location: EmptyPropertiesTest.java

Content: 

@Test public void testToString(){

  assertEquals(new Properties().toString(),PropertiesFactory.EMPTY_PROPERTIES.toString());

}

Location: EmptyPropertiesTest.java

Content: 

@Test public void testValues(){

  assertTrue(PropertiesFactory.EMPTY_PROPERTIES.values().isEmpty());

}

