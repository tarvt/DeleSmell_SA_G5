Location: LazyListTest.java

Content: 

public LazyListTest(final String testName){

  super(testName);

}

Location: LazyListTest.java

Content: 

public void testCreateNullGapsWithFactory(){

  final Factory<LocalDateTime> dateFactory=LocalDateTime::now;

  final List<LocalDateTime> list=new LazyList<>(new ArrayList<>(),dateFactory);

  final LocalDateTime fourthElement=list.get(3);

  assertFalse(list.isEmpty());

  assertNotNull(fourthElement);

}

Location: LazyListTest.java

Content: 

public void testCreateNullGapsWithTransformer(){

  final List<Integer> hours=Arrays.asList(7,5,8,2);

  final Transformer<Integer,LocalDateTime> dateFactory=input -> LocalDateTime.now().withHour(hours.get(input));

  final List<LocalDateTime> list=new LazyList<>(new ArrayList<>(),dateFactory);

  final LocalDateTime fourthElement=list.get(3);

  assertFalse(list.isEmpty());

  assertNotNull(fourthElement);

}

Location: LazyListTest.java

Content: 

public void testElementCreationWithFactory(){

  final Factory<LocalDateTime> dateFactory=LocalDateTime::now;

  final List<LocalDateTime> list=new LazyList<>(new ArrayList<>(),dateFactory);

  assertTrue(list.isEmpty());

  final LocalDateTime firstElement=list.get(0);

  assertNotNull(firstElement);

  assertFalse(list.isEmpty());

}

Location: LazyListTest.java

Content: 

public void testElementCreationWithTransformer(){

  final Factory<LocalDateTime> dateFactory=LocalDateTime::now;

  final List<LocalDateTime> list=new LazyList<>(new ArrayList<>(),dateFactory);

  assertTrue(list.isEmpty());

  final LocalDateTime firstElement=list.get(0);

  assertNotNull(firstElement);

  assertFalse(list.isEmpty());

}

Location: LazyListTest.java

Content: 

public void testGetWithNull(){

  final List<Integer> hours=Arrays.asList(7,5,8,2);

  final Transformer<Integer,LocalDateTime> transformer=input -> LocalDateTime.now().withHour(hours.get(input));

  final List<LocalDateTime> list=new LazyList<>(new ArrayList<>(),transformer);

  LocalDateTime fourthElement=list.get(3);

  assertFalse(list.isEmpty());

  assertNotNull(fourthElement);

  list.remove(3);

  list.add(3,null);

  fourthElement=list.get(3);

  assertNotNull(fourthElement);

}

Location: LazyListTest.java

Content: 

@Override public void testSerializeDeserializeThenCompare(){

}

Location: LazyListTest.java

Content: 

@Override public void testSimpleSerialization(){

}

Location: LazyListTest.java

Content: 

public void testSubListWitheFactory(){

  final Factory<LocalDateTime> dateFactory=LocalDateTime::now;

  final List<LocalDateTime> list=new LazyList<>(new ArrayList<>(),dateFactory);

  final LocalDateTime fourthElement=list.get(3);

  assertFalse(list.isEmpty());

  assertNotNull(fourthElement);

  testSubList(list);

}

Location: LazyListTest.java

Content: 

public void testSubListWithTransformer(){

  final List<Integer> hours=Arrays.asList(7,5,8,2);

  final Transformer<Integer,LocalDateTime> transformer=input -> LocalDateTime.now().withHour(hours.get(input));

  final List<LocalDateTime> list=new LazyList<>(new ArrayList<>(),transformer);

  final LocalDateTime fourthElement=list.get(3);

  assertFalse(list.isEmpty());

  assertNotNull(fourthElement);

  testSubList(list);

}

Location: LazyListTest.java

Content: 

private void testSubList(final List<LocalDateTime> list){

  List<LocalDateTime> subList=list.subList(1,3);

  assertFalse(subList.isEmpty());

  assertNotNull(subList);

  assertEquals(2,subList.size());

  subList=list.subList(0,1);

  assertFalse(subList.isEmpty());

  assertEquals(1,subList.size());

  subList=list.subList(1,1);

  assertTrue(subList.isEmpty());

  subList=list.subList(0,list.size());

  assertFalse(subList.isEmpty());

  assertEquals(list.size(),subList.size());

}

Location: LazyListTest.java

Content: 

public LazyListTest(final String testName){

  super(testName);

}

Location: LazyListTest.java

Content: 

public void testCreateNullGapsWithFactory(){

  final Factory<LocalDateTime> dateFactory=LocalDateTime::now;

  final List<LocalDateTime> list=new LazyList<>(new ArrayList<>(),dateFactory);

  final LocalDateTime fourthElement=list.get(3);

  assertFalse(list.isEmpty());

  assertNotNull(fourthElement);

}

Location: LazyListTest.java

Content: 

public void testCreateNullGapsWithTransformer(){

  final List<Integer> hours=Arrays.asList(7,5,8,2);

  final Transformer<Integer,LocalDateTime> dateFactory=input -> LocalDateTime.now().withHour(hours.get(input));

  final List<LocalDateTime> list=new LazyList<>(new ArrayList<>(),dateFactory);

  final LocalDateTime fourthElement=list.get(3);

  assertFalse(list.isEmpty());

  assertNotNull(fourthElement);

}

Location: LazyListTest.java

Content: 

public void testElementCreationWithFactory(){

  final Factory<LocalDateTime> dateFactory=LocalDateTime::now;

  final List<LocalDateTime> list=new LazyList<>(new ArrayList<>(),dateFactory);

  assertTrue(list.isEmpty());

  final LocalDateTime firstElement=list.get(0);

  assertNotNull(firstElement);

  assertFalse(list.isEmpty());

}

Location: LazyListTest.java

Content: 

public void testElementCreationWithTransformer(){

  final Factory<LocalDateTime> dateFactory=LocalDateTime::now;

  final List<LocalDateTime> list=new LazyList<>(new ArrayList<>(),dateFactory);

  assertTrue(list.isEmpty());

  final LocalDateTime firstElement=list.get(0);

  assertNotNull(firstElement);

  assertFalse(list.isEmpty());

}

Location: LazyListTest.java

Content: 

public void testGetWithNull(){

  final List<Integer> hours=Arrays.asList(7,5,8,2);

  final Transformer<Integer,LocalDateTime> transformer=input -> LocalDateTime.now().withHour(hours.get(input));

  final List<LocalDateTime> list=new LazyList<>(new ArrayList<>(),transformer);

  LocalDateTime fourthElement=list.get(3);

  assertFalse(list.isEmpty());

  assertNotNull(fourthElement);

  list.remove(3);

  list.add(3,null);

  fourthElement=list.get(3);

  assertNotNull(fourthElement);

}

Location: LazyListTest.java

Content: 

@Override public void testSerializeDeserializeThenCompare(){

}

Location: LazyListTest.java

Content: 

@Override public void testSimpleSerialization(){

}

Location: LazyListTest.java

Content: 

public void testSubListWitheFactory(){

  final Factory<LocalDateTime> dateFactory=LocalDateTime::now;

  final List<LocalDateTime> list=new LazyList<>(new ArrayList<>(),dateFactory);

  final LocalDateTime fourthElement=list.get(3);

  assertFalse(list.isEmpty());

  assertNotNull(fourthElement);

  testSubList(list);

}

Location: LazyListTest.java

Content: 

public void testSubListWithTransformer(){

  final List<Integer> hours=Arrays.asList(7,5,8,2);

  final Transformer<Integer,LocalDateTime> transformer=input -> LocalDateTime.now().withHour(hours.get(input));

  final List<LocalDateTime> list=new LazyList<>(new ArrayList<>(),transformer);

  final LocalDateTime fourthElement=list.get(3);

  assertFalse(list.isEmpty());

  assertNotNull(fourthElement);

  testSubList(list);

}

Location: LazyListTest.java

Content: 

private void testSubList(final List<LocalDateTime> list){

  List<LocalDateTime> subList=list.subList(1,3);

  assertFalse(subList.isEmpty());

  assertNotNull(subList);

  assertEquals(2,subList.size());

  subList=list.subList(0,1);

  assertFalse(subList.isEmpty());

  assertEquals(1,subList.size());

  subList=list.subList(1,1);

  assertTrue(subList.isEmpty());

  subList=list.subList(0,list.size());

  assertFalse(subList.isEmpty());

  assertEquals(list.size(),subList.size());

}

