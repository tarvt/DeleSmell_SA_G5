Location: SynchronizedCollection.java

Content: 

/** 

 * Constructor that wraps (not copies).

 * @param collection  the collection to decorate, must not be null

 * @throws NullPointerException if the collection is null

 */

protected SynchronizedCollection(final Collection<E> collection){

  this.collection=Objects.requireNonNull(collection,"collection");

  this.lock=this;

}

Location: SynchronizedCollection.java

Content: 

/** 

 * Constructor that wraps (not copies).

 * @param collection  the collection to decorate, must not be null

 * @param lock  the lock object to use, must not be null

 * @throws NullPointerException if the collection or lock is null

 */

protected SynchronizedCollection(final Collection<E> collection,final Object lock){

  this.collection=Objects.requireNonNull(collection,"collection");

  this.lock=Objects.requireNonNull(lock,"lock");

}

Location: SynchronizedCollection.java

Content: 

/** 

 * Constructor that wraps (not copies).

 * @param collection  the collection to decorate, must not be null

 * @throws NullPointerException if the collection is null

 */

protected SynchronizedCollection(final Collection<E> collection){

  this.collection=Objects.requireNonNull(collection,"collection");

  this.lock=this;

}

Location: SynchronizedCollection.java

Content: 

/** 

 * Constructor that wraps (not copies).

 * @param collection  the collection to decorate, must not be null

 * @param lock  the lock object to use, must not be null

 * @throws NullPointerException if the collection or lock is null

 */

protected SynchronizedCollection(final Collection<E> collection,final Object lock){

  this.collection=Objects.requireNonNull(collection,"collection");

  this.lock=Objects.requireNonNull(lock,"lock");

}

