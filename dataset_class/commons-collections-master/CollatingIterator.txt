Location: CollatingIterator.java

Content: 

/** 

 * Returns  {@code true} iff any {@link Iterator} in the given list hasa next value.

 */

private boolean anyHasNext(final List<Iterator<? extends E>> iterators){

  for (  final Iterator<? extends E> iterator : iterators) {

    if (iterator.hasNext()) {

      return true;

    }

  }

  return false;

}

Location: CollatingIterator.java

Content: 

/** 

 * Returns  {@code true} iff any bit in the given set is{@code true}.

 */

private boolean anyValueSet(final BitSet set){

  for (int i=0; i < set.size(); i++) {

    if (set.get(i)) {

      return true;

    }

  }

  return false;

}

Location: CollatingIterator.java

Content: 

/** 

 * Throws  {@link IllegalStateException} if iteration has started via{@link #start}.

 * @throws IllegalStateException if iteration started

 */

private void checkNotStarted() throws IllegalStateException {

  if (values != null) {

    throw new IllegalStateException("Can't do that after next or hasNext has been called.");

  }

}

Location: CollatingIterator.java

Content: 

/** 

 * Clears the  {@link #values} and {@link #valueSet} attributes at position<i>i</i>.

 */

private void clear(final int i){

  values.set(i,null);

  valueSet.clear(i);

}

Location: CollatingIterator.java

Content: 

/** 

 * Constructs a new  {@code CollatingIterator}. A comparator must be set by calling  {@link #setComparator(Comparator)} before invoking{@link #hasNext()}, or  {@link #next()} for the first time. Childiterators will have to be manually added using the {@link #addIterator(Iterator)} method.

 */

public CollatingIterator(){

  this(null,2);

}

Location: CollatingIterator.java

Content: 

/** 

 * Constructs a new  {@code CollatingIterator} that will used thespecified comparator for ordering. Child iterators will have to be manually added using the  {@link #addIterator(Iterator)} method.

 * @param comp the comparator to use to sort; must not be null,unless you'll be invoking  {@link #setComparator(Comparator)} later on.

 */

public CollatingIterator(final Comparator<? super E> comp){

  this(comp,2);

}

Location: CollatingIterator.java

Content: 

/** 

 * Constructs a new  {@code CollatingIterator} that will use thespecified comparator to provide ordered iteration over the collection of iterators.

 * @param comp the comparator to use to sort; must not be null,unless you'll be invoking  {@link #setComparator(Comparator)} later on.

 * @param iterators the collection of iterators

 * @throws NullPointerException if the iterators collection is or contains null

 * @throws ClassCastException if the iterators collection contains anelement that's not an  {@link Iterator}

 */

public CollatingIterator(final Comparator<? super E> comp,final Collection<Iterator<? extends E>> iterators){

  this(comp,iterators.size());

  for (  final Iterator<? extends E> iterator : iterators) {

    addIterator(iterator);

  }

}

Location: CollatingIterator.java

Content: 

/** 

 * Constructs a new  {@code CollatingIterator} that will used thespecified comparator for ordering and have the specified initial capacity. Child iterators will have to be manually added using the {@link #addIterator(Iterator)} method.

 * @param comp the comparator to use to sort; must not be null,unless you'll be invoking  {@link #setComparator(Comparator)} later on.

 * @param initIterCapacity the initial capacity for the internal list ofchild iterators

 */

public CollatingIterator(final Comparator<? super E> comp,final int initIterCapacity){

  iterators=new ArrayList<>(initIterCapacity);

  setComparator(comp);

}

Location: CollatingIterator.java

Content: 

/** 

 * Constructs a new  {@code CollatingIterator} that will use thespecified comparator to provide ordered iteration over the array of iterators.

 * @param comp the comparator to use to sort; must not be null,unless you'll be invoking  {@link #setComparator(Comparator)} later on.

 * @param iterators the array of iterators

 * @throws NullPointerException if iterators array is or contains null

 */

public CollatingIterator(final Comparator<? super E> comp,final Iterator<? extends E>[] iterators){

  this(comp,iterators.length);

  for (  final Iterator<? extends E> iterator : iterators) {

    addIterator(iterator);

  }

}

Location: CollatingIterator.java

Content: 

/** 

 * Constructs a new  {@code CollatingIterator} that will use thespecified comparator to provide ordered iteration over the two given iterators.

 * @param comp the comparator to use to sort; must not be null,unless you'll be invoking  {@link #setComparator(Comparator)} later on.

 * @param a the first child ordered iterator

 * @param b the second child ordered iterator

 * @throws NullPointerException if either iterator is null

 */

public CollatingIterator(final Comparator<? super E> comp,final Iterator<? extends E> a,final Iterator<? extends E> b){

  this(comp,2);

  addIterator(a);

  addIterator(b);

}

Location: CollatingIterator.java

Content: 

/** 

 * Gets the  {@link Comparator} by which collation occurs.

 * @return the {@link Comparator}

 */

public Comparator<? super E> getComparator(){

  return comparator;

}

Location: CollatingIterator.java

Content: 

/** 

 * Returns the index of the iterator that returned the last element.

 * @return the index of the iterator that returned the last element

 * @throws IllegalStateException if there is no last returned element

 */

public int getIteratorIndex(){

  if (lastReturned == -1) {

    throw new IllegalStateException("No value has been returned yet");

  }

  return lastReturned;

}

Location: CollatingIterator.java

Content: 

/** 

 * Gets the list of Iterators (unmodifiable).

 * @return the unmodifiable list of iterators added

 */

public List<Iterator<? extends E>> getIterators(){

  return UnmodifiableList.unmodifiableList(iterators);

}

Location: CollatingIterator.java

Content: 

/** 

 * Returns the index of the least element in  {@link #values}, {@link #set(int) setting} any uninitialized values.

 * @throws NullPointerException if no comparator is set

 */

private int least(){

  int leastIndex=-1;

  E leastObject=null;

  for (int i=0; i < values.size(); i++) {

    if (!valueSet.get(i)) {

      set(i);

    }

    if (valueSet.get(i)) {

      if (leastIndex == -1) {

        leastIndex=i;

        leastObject=values.get(i);

      }

 else {

        final E curObject=values.get(i);

        Objects.requireNonNull(comparator,"You must invoke setComparator() to set a comparator first.");

        if (comparator.compare(curObject,leastObject) < 0) {

          leastObject=curObject;

          leastIndex=i;

        }

      }

    }

  }

  return leastIndex;

}

Location: CollatingIterator.java

Content: 

/** 

 * Sets the  {@link Comparator} by which collation occurs. If youwould like to use the natural sort order (or, in other words, if the elements in the iterators are implementing the {@link java.lang.Comparable} interface), then use the{@link org.apache.commons.collections4.comparators.ComparableComparator}.

 * @param comp the {@link Comparator} to set

 * @throws IllegalStateException if iteration has started

 */

public void setComparator(final Comparator<? super E> comp){

  checkNotStarted();

  comparator=comp;

}

Location: CollatingIterator.java

Content: 

/** 

 * Sets the iterator at the given index.

 * @param index index of the Iterator to replace

 * @param iterator Iterator to place at the given index

 * @throws IndexOutOfBoundsException if index &lt; 0 or index &gt;= size()

 * @throws IllegalStateException if iteration has started

 * @throws NullPointerException if the iterator is null

 */

public void setIterator(final int index,final Iterator<? extends E> iterator){

  checkNotStarted();

  Objects.requireNonNull(iterator,"iterator");

  iterators.set(index,iterator);

}

Location: CollatingIterator.java

Content: 

/** 

 * Sets the  {@link #values} and {@link #valueSet} attributes at position<i>i</i> to the next value of the  {@link #iterators iterator} at position<i>i</i>, or clear them if the <i>i</i><sup>th</sup> iterator has no next value.

 * @return {@code false} iff there was no value to set

 */

private boolean set(final int i){

  final Iterator<? extends E> it=iterators.get(i);

  if (it.hasNext()) {

    values.set(i,it.next());

    valueSet.set(i);

    return true;

  }

  values.set(i,null);

  valueSet.clear(i);

  return false;

}

Location: CollatingIterator.java

Content: 

/** 

 * Initializes the collating state if it hasn't been already.

 */

private void start(){

  if (values == null) {

    values=new ArrayList<>(iterators.size());

    valueSet=new BitSet(iterators.size());

    for (int i=0; i < iterators.size(); i++) {

      values.add(null);

      valueSet.clear(i);

    }

  }

}

Location: CollatingIterator.java

Content: 

/** 

 * Returns  {@code true} iff any {@link Iterator} in the given list hasa next value.

 */

private boolean anyHasNext(final List<Iterator<? extends E>> iterators){

  for (  final Iterator<? extends E> iterator : iterators) {

    if (iterator.hasNext()) {

      return true;

    }

  }

  return false;

}

Location: CollatingIterator.java

Content: 

/** 

 * Returns  {@code true} iff any bit in the given set is{@code true}.

 */

private boolean anyValueSet(final BitSet set){

  for (int i=0; i < set.size(); i++) {

    if (set.get(i)) {

      return true;

    }

  }

  return false;

}

Location: CollatingIterator.java

Content: 

/** 

 * Throws  {@link IllegalStateException} if iteration has started via{@link #start}.

 * @throws IllegalStateException if iteration started

 */

private void checkNotStarted() throws IllegalStateException {

  if (values != null) {

    throw new IllegalStateException("Can't do that after next or hasNext has been called.");

  }

}

Location: CollatingIterator.java

Content: 

/** 

 * Clears the  {@link #values} and {@link #valueSet} attributes at position<i>i</i>.

 */

private void clear(final int i){

  values.set(i,null);

  valueSet.clear(i);

}

Location: CollatingIterator.java

Content: 

/** 

 * Constructs a new  {@code CollatingIterator}. A comparator must be set by calling  {@link #setComparator(Comparator)} before invoking{@link #hasNext()}, or  {@link #next()} for the first time. Childiterators will have to be manually added using the {@link #addIterator(Iterator)} method.

 */

public CollatingIterator(){

  this(null,2);

}

Location: CollatingIterator.java

Content: 

/** 

 * Constructs a new  {@code CollatingIterator} that will used thespecified comparator for ordering. Child iterators will have to be manually added using the  {@link #addIterator(Iterator)} method.

 * @param comp the comparator to use to sort; must not be null,unless you'll be invoking  {@link #setComparator(Comparator)} later on.

 */

public CollatingIterator(final Comparator<? super E> comp){

  this(comp,2);

}

Location: CollatingIterator.java

Content: 

/** 

 * Constructs a new  {@code CollatingIterator} that will use thespecified comparator to provide ordered iteration over the collection of iterators.

 * @param comp the comparator to use to sort; must not be null,unless you'll be invoking  {@link #setComparator(Comparator)} later on.

 * @param iterators the collection of iterators

 * @throws NullPointerException if the iterators collection is or contains null

 * @throws ClassCastException if the iterators collection contains anelement that's not an  {@link Iterator}

 */

public CollatingIterator(final Comparator<? super E> comp,final Collection<Iterator<? extends E>> iterators){

  this(comp,iterators.size());

  for (  final Iterator<? extends E> iterator : iterators) {

    addIterator(iterator);

  }

}

Location: CollatingIterator.java

Content: 

/** 

 * Constructs a new  {@code CollatingIterator} that will used thespecified comparator for ordering and have the specified initial capacity. Child iterators will have to be manually added using the {@link #addIterator(Iterator)} method.

 * @param comp the comparator to use to sort; must not be null,unless you'll be invoking  {@link #setComparator(Comparator)} later on.

 * @param initIterCapacity the initial capacity for the internal list ofchild iterators

 */

public CollatingIterator(final Comparator<? super E> comp,final int initIterCapacity){

  iterators=new ArrayList<>(initIterCapacity);

  setComparator(comp);

}

Location: CollatingIterator.java

Content: 

/** 

 * Constructs a new  {@code CollatingIterator} that will use thespecified comparator to provide ordered iteration over the array of iterators.

 * @param comp the comparator to use to sort; must not be null,unless you'll be invoking  {@link #setComparator(Comparator)} later on.

 * @param iterators the array of iterators

 * @throws NullPointerException if iterators array is or contains null

 */

public CollatingIterator(final Comparator<? super E> comp,final Iterator<? extends E>[] iterators){

  this(comp,iterators.length);

  for (  final Iterator<? extends E> iterator : iterators) {

    addIterator(iterator);

  }

}

Location: CollatingIterator.java

Content: 

/** 

 * Constructs a new  {@code CollatingIterator} that will use thespecified comparator to provide ordered iteration over the two given iterators.

 * @param comp the comparator to use to sort; must not be null,unless you'll be invoking  {@link #setComparator(Comparator)} later on.

 * @param a the first child ordered iterator

 * @param b the second child ordered iterator

 * @throws NullPointerException if either iterator is null

 */

public CollatingIterator(final Comparator<? super E> comp,final Iterator<? extends E> a,final Iterator<? extends E> b){

  this(comp,2);

  addIterator(a);

  addIterator(b);

}

Location: CollatingIterator.java

Content: 

/** 

 * Gets the  {@link Comparator} by which collation occurs.

 * @return the {@link Comparator}

 */

public Comparator<? super E> getComparator(){

  return comparator;

}

Location: CollatingIterator.java

Content: 

/** 

 * Returns the index of the iterator that returned the last element.

 * @return the index of the iterator that returned the last element

 * @throws IllegalStateException if there is no last returned element

 */

public int getIteratorIndex(){

  if (lastReturned == -1) {

    throw new IllegalStateException("No value has been returned yet");

  }

  return lastReturned;

}

Location: CollatingIterator.java

Content: 

/** 

 * Gets the list of Iterators (unmodifiable).

 * @return the unmodifiable list of iterators added

 */

public List<Iterator<? extends E>> getIterators(){

  return UnmodifiableList.unmodifiableList(iterators);

}

Location: CollatingIterator.java

Content: 

/** 

 * Returns the index of the least element in  {@link #values}, {@link #set(int) setting} any uninitialized values.

 * @throws NullPointerException if no comparator is set

 */

private int least(){

  int leastIndex=-1;

  E leastObject=null;

  for (int i=0; i < values.size(); i++) {

    if (!valueSet.get(i)) {

      set(i);

    }

    if (valueSet.get(i)) {

      if (leastIndex == -1) {

        leastIndex=i;

        leastObject=values.get(i);

      }

 else {

        final E curObject=values.get(i);

        Objects.requireNonNull(comparator,"You must invoke setComparator() to set a comparator first.");

        if (comparator.compare(curObject,leastObject) < 0) {

          leastObject=curObject;

          leastIndex=i;

        }

      }

    }

  }

  return leastIndex;

}

Location: CollatingIterator.java

Content: 

/** 

 * Sets the  {@link Comparator} by which collation occurs. If youwould like to use the natural sort order (or, in other words, if the elements in the iterators are implementing the {@link java.lang.Comparable} interface), then use the{@link org.apache.commons.collections4.comparators.ComparableComparator}.

 * @param comp the {@link Comparator} to set

 * @throws IllegalStateException if iteration has started

 */

public void setComparator(final Comparator<? super E> comp){

  checkNotStarted();

  comparator=comp;

}

Location: CollatingIterator.java

Content: 

/** 

 * Sets the iterator at the given index.

 * @param index index of the Iterator to replace

 * @param iterator Iterator to place at the given index

 * @throws IndexOutOfBoundsException if index &lt; 0 or index &gt;= size()

 * @throws IllegalStateException if iteration has started

 * @throws NullPointerException if the iterator is null

 */

public void setIterator(final int index,final Iterator<? extends E> iterator){

  checkNotStarted();

  Objects.requireNonNull(iterator,"iterator");

  iterators.set(index,iterator);

}

Location: CollatingIterator.java

Content: 

/** 

 * Sets the  {@link #values} and {@link #valueSet} attributes at position<i>i</i> to the next value of the  {@link #iterators iterator} at position<i>i</i>, or clear them if the <i>i</i><sup>th</sup> iterator has no next value.

 * @return {@code false} iff there was no value to set

 */

private boolean set(final int i){

  final Iterator<? extends E> it=iterators.get(i);

  if (it.hasNext()) {

    values.set(i,it.next());

    valueSet.set(i);

    return true;

  }

  values.set(i,null);

  valueSet.clear(i);

  return false;

}

Location: CollatingIterator.java

Content: 

/** 

 * Initializes the collating state if it hasn't been already.

 */

private void start(){

  if (values == null) {

    values=new ArrayList<>(iterators.size());

    valueSet=new BitSet(iterators.size());

    for (int i=0; i < iterators.size(); i++) {

      values.add(null);

      valueSet.clear(i);

    }

  }

}

