Location: NullComparator.java

Content: 

/** 

 * Perform a comparison between two objects.  If both objects are {@code null}, a  {@code 0} value is returned.  If one objectis  {@code null} and the other is not, the result is determined onwhether the Comparator was constructed to have nulls as higher or lower than other objects.  If neither object is  {@code null}, an underlying comparator specified in the constructor (or the default) is used to compare the non- {@code null} objects.

 * @param o1  the first object to compare

 * @param o2  the object to compare it to.

 * @return {@code -1} if {@code o1} is "lower" than (less than,before, etc.)  {@code o2};  {@code 1} if {@code o1} is"higher" than (greater than, after, etc.)  {@code o2}; or {@code 0} if {@code o1} and {@code o2} are equal.

 */

@Override public int compare(final E o1,final E o2){

  if (o1 == o2) {

    return 0;

  }

  if (o1 == null) {

    return this.nullsAreHigh ? 1 : -1;

  }

  if (o2 == null) {

    return this.nullsAreHigh ? -1 : 1;

  }

  return this.nonNullComparator.compare(o1,o2);

}

Location: NullComparator.java

Content: 

/** 

 * Construct an instance that sorts  {@code null} higher than anynon- {@code null} object it is compared with. When comparing twonon- {@code null} objects, the {@link ComparableComparator} isused.

 */

public NullComparator(){

  this(ComparatorUtils.NATURAL_COMPARATOR,true);

}

Location: NullComparator.java

Content: 

/** 

 * Construct an instance that sorts  {@code null} higher or lower thanany non- {@code null} object it is compared with.  When comparingtwo non- {@code null} objects, the {@link ComparableComparator} isused.

 * @param nullsAreHigh a {@code true} value indicates that{@code null} should be compared as higher than anon- {@code null} object.  A {@code false} value indicatesthat  {@code null} should be compared as lower than anon- {@code null} object.

 */

public NullComparator(final boolean nullsAreHigh){

  this(ComparatorUtils.NATURAL_COMPARATOR,nullsAreHigh);

}

Location: NullComparator.java

Content: 

/** 

 * Construct an instance that sorts  {@code null} higher than anynon- {@code null} object it is compared with.  When comparing twonon- {@code null} objects, the specified {@link Comparator} isused.

 * @param nonNullComparator the comparator to use when comparing twonon- {@code null} objects.  This argument cannot be{@code null}

 * @throws NullPointerException if {@code nonNullComparator} is{@code null}

 */

public NullComparator(final Comparator<? super E> nonNullComparator){

  this(nonNullComparator,true);

}

Location: NullComparator.java

Content: 

/** 

 * Construct an instance that sorts  {@code null} higher or lower thanany non- {@code null} object it is compared with.  When comparingtwo non- {@code null} objects, the specified {@link Comparator} isused.

 * @param nonNullComparator the comparator to use when comparing twonon- {@code null} objects. This argument cannot be{@code null}

 * @param nullsAreHigh a {@code true} value indicates that{@code null} should be compared as higher than anon- {@code null} object.  A {@code false} value indicatesthat  {@code null} should be compared as lower than anon- {@code null} object.

 * @throws NullPointerException if {@code nonNullComparator} is{@code null}

 */

public NullComparator(final Comparator<? super E> nonNullComparator,final boolean nullsAreHigh){

  this.nonNullComparator=Objects.requireNonNull(nonNullComparator,"nonNullComparator");

  this.nullsAreHigh=nullsAreHigh;

}

Location: NullComparator.java

Content: 

/** 

 * Perform a comparison between two objects.  If both objects are {@code null}, a  {@code 0} value is returned.  If one objectis  {@code null} and the other is not, the result is determined onwhether the Comparator was constructed to have nulls as higher or lower than other objects.  If neither object is  {@code null}, an underlying comparator specified in the constructor (or the default) is used to compare the non- {@code null} objects.

 * @param o1  the first object to compare

 * @param o2  the object to compare it to.

 * @return {@code -1} if {@code o1} is "lower" than (less than,before, etc.)  {@code o2};  {@code 1} if {@code o1} is"higher" than (greater than, after, etc.)  {@code o2}; or {@code 0} if {@code o1} and {@code o2} are equal.

 */

@Override public int compare(final E o1,final E o2){

  if (o1 == o2) {

    return 0;

  }

  if (o1 == null) {

    return this.nullsAreHigh ? 1 : -1;

  }

  if (o2 == null) {

    return this.nullsAreHigh ? -1 : 1;

  }

  return this.nonNullComparator.compare(o1,o2);

}

Location: NullComparator.java

Content: 

/** 

 * Construct an instance that sorts  {@code null} higher than anynon- {@code null} object it is compared with. When comparing twonon- {@code null} objects, the {@link ComparableComparator} isused.

 */

public NullComparator(){

  this(ComparatorUtils.NATURAL_COMPARATOR,true);

}

Location: NullComparator.java

Content: 

/** 

 * Construct an instance that sorts  {@code null} higher or lower thanany non- {@code null} object it is compared with.  When comparingtwo non- {@code null} objects, the {@link ComparableComparator} isused.

 * @param nullsAreHigh a {@code true} value indicates that{@code null} should be compared as higher than anon- {@code null} object.  A {@code false} value indicatesthat  {@code null} should be compared as lower than anon- {@code null} object.

 */

public NullComparator(final boolean nullsAreHigh){

  this(ComparatorUtils.NATURAL_COMPARATOR,nullsAreHigh);

}

Location: NullComparator.java

Content: 

/** 

 * Construct an instance that sorts  {@code null} higher than anynon- {@code null} object it is compared with.  When comparing twonon- {@code null} objects, the specified {@link Comparator} isused.

 * @param nonNullComparator the comparator to use when comparing twonon- {@code null} objects.  This argument cannot be{@code null}

 * @throws NullPointerException if {@code nonNullComparator} is{@code null}

 */

public NullComparator(final Comparator<? super E> nonNullComparator){

  this(nonNullComparator,true);

}

Location: NullComparator.java

Content: 

/** 

 * Construct an instance that sorts  {@code null} higher or lower thanany non- {@code null} object it is compared with.  When comparingtwo non- {@code null} objects, the specified {@link Comparator} isused.

 * @param nonNullComparator the comparator to use when comparing twonon- {@code null} objects. This argument cannot be{@code null}

 * @param nullsAreHigh a {@code true} value indicates that{@code null} should be compared as higher than anon- {@code null} object.  A {@code false} value indicatesthat  {@code null} should be compared as lower than anon- {@code null} object.

 * @throws NullPointerException if {@code nonNullComparator} is{@code null}

 */

public NullComparator(final Comparator<? super E> nonNullComparator,final boolean nullsAreHigh){

  this.nonNullComparator=Objects.requireNonNull(nonNullComparator,"nonNullComparator");

  this.nullsAreHigh=nullsAreHigh;

}

