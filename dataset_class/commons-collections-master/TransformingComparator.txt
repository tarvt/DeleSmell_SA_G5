Location: TransformingComparator.java

Content: 

/** 

 * Returns the result of comparing the values from the transform operation.

 * @param obj1  the first object to transform then compare

 * @param obj2  the second object to transform then compare

 * @return negative if obj1 is less, positive if greater, zero if equal

 */

@Override public int compare(final I obj1,final I obj2){

  final O value1=this.transformer.transform(obj1);

  final O value2=this.transformer.transform(obj2);

  return this.decorated.compare(value1,value2);

}

Location: TransformingComparator.java

Content: 

/** 

 * Constructs an instance with the given Transformer and a {@link ComparableComparator ComparableComparator}.

 * @param transformer what will transform the arguments to {@code compare}

 */

public TransformingComparator(final Transformer<? super I,? extends O> transformer){

  this(transformer,ComparatorUtils.NATURAL_COMPARATOR);

}

Location: TransformingComparator.java

Content: 

/** 

 * Constructs an instance with the given Transformer and Comparator.

 * @param transformer  what will transform the arguments to {@code compare}

 * @param decorated  the decorated Comparator

 */

public TransformingComparator(final Transformer<? super I,? extends O> transformer,final Comparator<O> decorated){

  this.decorated=decorated;

  this.transformer=transformer;

}

Location: TransformingComparator.java

Content: 

/** 

 * Returns the result of comparing the values from the transform operation.

 * @param obj1  the first object to transform then compare

 * @param obj2  the second object to transform then compare

 * @return negative if obj1 is less, positive if greater, zero if equal

 */

@Override public int compare(final I obj1,final I obj2){

  final O value1=this.transformer.transform(obj1);

  final O value2=this.transformer.transform(obj2);

  return this.decorated.compare(value1,value2);

}

Location: TransformingComparator.java

Content: 

/** 

 * Constructs an instance with the given Transformer and a {@link ComparableComparator ComparableComparator}.

 * @param transformer what will transform the arguments to {@code compare}

 */

public TransformingComparator(final Transformer<? super I,? extends O> transformer){

  this(transformer,ComparatorUtils.NATURAL_COMPARATOR);

}

Location: TransformingComparator.java

Content: 

/** 

 * Constructs an instance with the given Transformer and Comparator.

 * @param transformer  what will transform the arguments to {@code compare}

 * @param decorated  the decorated Comparator

 */

public TransformingComparator(final Transformer<? super I,? extends O> transformer,final Comparator<O> decorated){

  this.decorated=decorated;

  this.transformer=transformer;

}

