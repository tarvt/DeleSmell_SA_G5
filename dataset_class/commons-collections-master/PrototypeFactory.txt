Location: PrototypeFactory.java

Content: 

/** 

 * Restricted constructor.

 */

private PrototypeFactory(){

}

Location: PrototypeFactory.java

Content: 

/** 

 * Factory method that performs validation. <p> Creates a Factory that will return a clone of the same prototype object each time the factory is used. The prototype will be cloned using one of these techniques (in order): </p> <ul> <li>public clone method</li> <li>public copy constructor</li> <li>serialization clone</li> </ul>

 * @param < T >  the type the factory creates

 * @param prototype  the object to clone each time in the factory

 * @return the {@code prototype} factory, or a {@link ConstantFactory#NULL_INSTANCE} ifthe  {@code prototype} is {@code null}

 * @throws IllegalArgumentException if the prototype cannot be cloned

 */

@SuppressWarnings("unchecked") public static <T>Factory<T> prototypeFactory(final T prototype){

  if (prototype == null) {

    return ConstantFactory.<T>constantFactory(null);

  }

  try {

    final Method method=prototype.getClass().getMethod("clone",(Class[])null);

    return new PrototypeCloneFactory<>(prototype,method);

  }

 catch (  final NoSuchMethodException ex) {

    try {

      prototype.getClass().getConstructor(prototype.getClass());

      return new InstantiateFactory<>((Class<T>)prototype.getClass(),new Class<?>[]{prototype.getClass()},new Object[]{prototype});

    }

 catch (    final NoSuchMethodException ex2) {

      if (prototype instanceof Serializable) {

        return (Factory<T>)new PrototypeSerializationFactory<>((Serializable)prototype);

      }

    }

  }

  throw new IllegalArgumentException("The prototype must be cloneable via a public clone method");

}

Location: PrototypeFactory.java

Content: 

/** 

 * Restricted constructor.

 */

private PrototypeFactory(){

}

Location: PrototypeFactory.java

Content: 

/** 

 * Factory method that performs validation. <p> Creates a Factory that will return a clone of the same prototype object each time the factory is used. The prototype will be cloned using one of these techniques (in order): </p> <ul> <li>public clone method</li> <li>public copy constructor</li> <li>serialization clone</li> </ul>

 * @param < T >  the type the factory creates

 * @param prototype  the object to clone each time in the factory

 * @return the {@code prototype} factory, or a {@link ConstantFactory#NULL_INSTANCE} ifthe  {@code prototype} is {@code null}

 * @throws IllegalArgumentException if the prototype cannot be cloned

 */

@SuppressWarnings("unchecked") public static <T>Factory<T> prototypeFactory(final T prototype){

  if (prototype == null) {

    return ConstantFactory.<T>constantFactory(null);

  }

  try {

    final Method method=prototype.getClass().getMethod("clone",(Class[])null);

    return new PrototypeCloneFactory<>(prototype,method);

  }

 catch (  final NoSuchMethodException ex) {

    try {

      prototype.getClass().getConstructor(prototype.getClass());

      return new InstantiateFactory<>((Class<T>)prototype.getClass(),new Class<?>[]{prototype.getClass()},new Object[]{prototype});

    }

 catch (    final NoSuchMethodException ex2) {

      if (prototype instanceof Serializable) {

        return (Factory<T>)new PrototypeSerializationFactory<>((Serializable)prototype);

      }

    }

  }

  throw new IllegalArgumentException("The prototype must be cloneable via a public clone method");

}

