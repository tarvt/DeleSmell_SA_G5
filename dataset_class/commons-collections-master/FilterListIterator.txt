Location: FilterListIterator.java

Content: 

private void clearNextObject(){

  nextObject=null;

  nextObjectSet=false;

}

Location: FilterListIterator.java

Content: 

private void clearPreviousObject(){

  previousObject=null;

  previousObjectSet=false;

}

Location: FilterListIterator.java

Content: 

/** 

 * Constructs a new  {@code FilterListIterator} that will not functionuntil  {@link #setListIterator(ListIterator) setListIterator}and  {@link #setPredicate(Predicate) setPredicate} are invoked.

 */

public FilterListIterator(){

}

Location: FilterListIterator.java

Content: 

/** 

 * Constructs a new  {@code FilterListIterator} that will notfunction until  {@link #setPredicate(Predicate) setPredicate} is invoked.

 * @param iterator  the iterator to use

 */

public FilterListIterator(final ListIterator<? extends E> iterator){

  this.iterator=iterator;

}

Location: FilterListIterator.java

Content: 

/** 

 * Constructs a new  {@code FilterListIterator}.

 * @param iterator  the iterator to use

 * @param predicate  the predicate to use

 */

public FilterListIterator(final ListIterator<? extends E> iterator,final Predicate<? super E> predicate){

  this.iterator=iterator;

  this.predicate=predicate;

}

Location: FilterListIterator.java

Content: 

/** 

 * Constructs a new  {@code FilterListIterator} that will not functionuntil  {@link #setListIterator(ListIterator) setListIterator} is invoked.

 * @param predicate  the predicate to use.

 */

public FilterListIterator(final Predicate<? super E> predicate){

  this.predicate=predicate;

}

Location: FilterListIterator.java

Content: 

/** 

 * Gets the iterator this iterator is using.

 * @return the iterator.

 */

public ListIterator<? extends E> getListIterator(){

  return iterator;

}

Location: FilterListIterator.java

Content: 

/** 

 * Sets the iterator for this iterator to use. If iteration has started, this effectively resets the iterator.

 * @param iterator  the iterator to use

 */

public void setListIterator(final ListIterator<? extends E> iterator){

  this.iterator=iterator;

}

Location: FilterListIterator.java

Content: 

private boolean setPreviousObject(){

  if (nextObjectSet) {

    clearNextObject();

    if (!setPreviousObject()) {

      return false;

    }

    clearPreviousObject();

  }

  if (iterator == null) {

    return false;

  }

  while (iterator.hasPrevious()) {

    final E object=iterator.previous();

    if (predicate.evaluate(object)) {

      previousObject=object;

      previousObjectSet=true;

      return true;

    }

  }

  return false;

}

Location: FilterListIterator.java

Content: 

private void clearNextObject(){

  nextObject=null;

  nextObjectSet=false;

}

Location: FilterListIterator.java

Content: 

private void clearPreviousObject(){

  previousObject=null;

  previousObjectSet=false;

}

Location: FilterListIterator.java

Content: 

/** 

 * Constructs a new  {@code FilterListIterator} that will not functionuntil  {@link #setListIterator(ListIterator) setListIterator}and  {@link #setPredicate(Predicate) setPredicate} are invoked.

 */

public FilterListIterator(){

}

Location: FilterListIterator.java

Content: 

/** 

 * Constructs a new  {@code FilterListIterator} that will notfunction until  {@link #setPredicate(Predicate) setPredicate} is invoked.

 * @param iterator  the iterator to use

 */

public FilterListIterator(final ListIterator<? extends E> iterator){

  this.iterator=iterator;

}

Location: FilterListIterator.java

Content: 

/** 

 * Constructs a new  {@code FilterListIterator}.

 * @param iterator  the iterator to use

 * @param predicate  the predicate to use

 */

public FilterListIterator(final ListIterator<? extends E> iterator,final Predicate<? super E> predicate){

  this.iterator=iterator;

  this.predicate=predicate;

}

Location: FilterListIterator.java

Content: 

/** 

 * Constructs a new  {@code FilterListIterator} that will not functionuntil  {@link #setListIterator(ListIterator) setListIterator} is invoked.

 * @param predicate  the predicate to use.

 */

public FilterListIterator(final Predicate<? super E> predicate){

  this.predicate=predicate;

}

Location: FilterListIterator.java

Content: 

/** 

 * Gets the iterator this iterator is using.

 * @return the iterator.

 */

public ListIterator<? extends E> getListIterator(){

  return iterator;

}

Location: FilterListIterator.java

Content: 

/** 

 * Sets the iterator for this iterator to use. If iteration has started, this effectively resets the iterator.

 * @param iterator  the iterator to use

 */

public void setListIterator(final ListIterator<? extends E> iterator){

  this.iterator=iterator;

}

Location: FilterListIterator.java

Content: 

private boolean setPreviousObject(){

  if (nextObjectSet) {

    clearNextObject();

    if (!setPreviousObject()) {

      return false;

    }

    clearPreviousObject();

  }

  if (iterator == null) {

    return false;

  }

  while (iterator.hasPrevious()) {

    final E object=iterator.previous();

    if (predicate.evaluate(object)) {

      previousObject=object;

      previousObjectSet=true;

      return true;

    }

  }

  return false;

}

