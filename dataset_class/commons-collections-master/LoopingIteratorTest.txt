Location: LoopingIteratorTest.java

Content: 

/** 

 * Tests whether a populated looping iterator works as designed.

 * @throws Exception  If something unexpected occurs.

 */

@Test public void testLooping3() throws Exception {

  final List<String> list=Arrays.asList("a","b","c");

  final LoopingIterator<String> loop=new LoopingIterator<>(list);

  assertTrue(loop.hasNext(),"1st hasNext should return true");

  assertEquals("a",loop.next());

  assertTrue(loop.hasNext(),"2nd hasNext should return true");

  assertEquals("b",loop.next());

  assertTrue(loop.hasNext(),"3rd hasNext should return true");

  assertEquals("c",loop.next());

  assertTrue(loop.hasNext(),"4th hasNext should return true");

  assertEquals("a",loop.next());

}

Location: LoopingIteratorTest.java

Content: 

/** 

 * Tests the remove() method on a LoopingIterator wrapped ArrayList.

 * @throws Exception  If something unexpected occurs.

 */

@Test public void testRemoving1() throws Exception {

  final List<String> list=new ArrayList<>(Arrays.asList("a","b","c"));

  final LoopingIterator<String> loop=new LoopingIterator<>(list);

  assertEquals(3,list.size(),"list should have 3 elements.");

  assertTrue(loop.hasNext(),"1st hasNext should return true");

  assertEquals("a",loop.next());

  loop.remove();

  assertEquals(2,list.size(),"list should have 2 elements.");

  assertTrue(loop.hasNext(),"2nd hasNext should return true");

  assertEquals("b",loop.next());

  loop.remove();

  assertEquals(1,list.size(),"list should have 1 elements.");

  assertTrue(loop.hasNext(),"3rd hasNext should return true");

  assertEquals("c",loop.next());

  loop.remove();

  assertEquals(0,list.size(),"list should have 0 elements.");

  assertFalse(loop.hasNext(),"4th hasNext should return false");

  try {

    loop.next();

    fail("Expected NoSuchElementException to be thrown.");

  }

 catch (  final NoSuchElementException ex) {

  }

}

Location: LoopingIteratorTest.java

Content: 

/** 

 * Tests whether a populated looping iterator works as designed.

 * @throws Exception  If something unexpected occurs.

 */

@Test public void testLooping3() throws Exception {

  final List<String> list=Arrays.asList("a","b","c");

  final LoopingIterator<String> loop=new LoopingIterator<>(list);

  assertTrue(loop.hasNext(),"1st hasNext should return true");

  assertEquals("a",loop.next());

  assertTrue(loop.hasNext(),"2nd hasNext should return true");

  assertEquals("b",loop.next());

  assertTrue(loop.hasNext(),"3rd hasNext should return true");

  assertEquals("c",loop.next());

  assertTrue(loop.hasNext(),"4th hasNext should return true");

  assertEquals("a",loop.next());

}

Location: LoopingIteratorTest.java

Content: 

/** 

 * Tests the remove() method on a LoopingIterator wrapped ArrayList.

 * @throws Exception  If something unexpected occurs.

 */

@Test public void testRemoving1() throws Exception {

  final List<String> list=new ArrayList<>(Arrays.asList("a","b","c"));

  final LoopingIterator<String> loop=new LoopingIterator<>(list);

  assertEquals(3,list.size(),"list should have 3 elements.");

  assertTrue(loop.hasNext(),"1st hasNext should return true");

  assertEquals("a",loop.next());

  loop.remove();

  assertEquals(2,list.size(),"list should have 2 elements.");

  assertTrue(loop.hasNext(),"2nd hasNext should return true");

  assertEquals("b",loop.next());

  loop.remove();

  assertEquals(1,list.size(),"list should have 1 elements.");

  assertTrue(loop.hasNext(),"3rd hasNext should return true");

  assertEquals("c",loop.next());

  loop.remove();

  assertEquals(0,list.size(),"list should have 0 elements.");

  assertFalse(loop.hasNext(),"4th hasNext should return false");

  try {

    loop.next();

    fail("Expected NoSuchElementException to be thrown.");

  }

 catch (  final NoSuchElementException ex) {

  }

}

