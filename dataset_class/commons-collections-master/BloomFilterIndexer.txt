Location: BloomFilterIndexer.java

Content: 

/** 

 * Do not instantiate. 

 */

private BloomFilterIndexer(){

}

Location: BloomFilterIndexer.java

Content: 

/** 

 * Check the index is positive.

 * @param bitIndex the bit index

 * @throws IndexOutOfBoundsException if the index is not positive

 */

public static void checkPositive(final int bitIndex){

  if (bitIndex < 0) {

    throw new IndexOutOfBoundsException("Negative bitIndex: " + bitIndex);

  }

}

Location: BloomFilterIndexer.java

Content: 

/** 

 * Gets the filter bit mask for the specified bit index assuming the filter is using 64-bit longs to store bits starting at index 0. The returned value is a  {@code long} with only1 bit set. <p>The index is assumed to be positive. For a positive index the result will match {@code 1L << (bitIndex % 64)}. <p>If the input is negative the behavior is not defined.

 * @param bitIndex the bit index (assumed to be positive)

 * @return the filter bit

 * @see #checkPositive(int)

 */

public static long getLongBit(final int bitIndex){

  return 1L << bitIndex;

}

Location: BloomFilterIndexer.java

Content: 

/** 

 * Gets the filter index for the specified bit index assuming the filter is using 64-bit longs to store bits starting at index 0. <p>The index is assumed to be positive. For a positive index the result will match {@code bitIndex / 64}. <p>The divide is performed using bit shifts. If the input is negative the behavior is not defined.

 * @param bitIndex the bit index (assumed to be positive)

 * @return the filter index

 * @see #checkPositive(int)

 */

public static int getLongIndex(final int bitIndex){

  return bitIndex >> DIVIDE_BY_64;

}

Location: BloomFilterIndexer.java

Content: 

/** 

 * Do not instantiate. 

 */

private BloomFilterIndexer(){

}

Location: BloomFilterIndexer.java

Content: 

/** 

 * Check the index is positive.

 * @param bitIndex the bit index

 * @throws IndexOutOfBoundsException if the index is not positive

 */

public static void checkPositive(final int bitIndex){

  if (bitIndex < 0) {

    throw new IndexOutOfBoundsException("Negative bitIndex: " + bitIndex);

  }

}

Location: BloomFilterIndexer.java

Content: 

/** 

 * Gets the filter bit mask for the specified bit index assuming the filter is using 64-bit longs to store bits starting at index 0. The returned value is a  {@code long} with only1 bit set. <p>The index is assumed to be positive. For a positive index the result will match {@code 1L << (bitIndex % 64)}. <p>If the input is negative the behavior is not defined.

 * @param bitIndex the bit index (assumed to be positive)

 * @return the filter bit

 * @see #checkPositive(int)

 */

public static long getLongBit(final int bitIndex){

  return 1L << bitIndex;

}

Location: BloomFilterIndexer.java

Content: 

/** 

 * Gets the filter index for the specified bit index assuming the filter is using 64-bit longs to store bits starting at index 0. <p>The index is assumed to be positive. For a positive index the result will match {@code bitIndex / 64}. <p>The divide is performed using bit shifts. If the input is negative the behavior is not defined.

 * @param bitIndex the bit index (assumed to be positive)

 * @return the filter index

 * @see #checkPositive(int)

 */

public static int getLongIndex(final int bitIndex){

  return bitIndex >> DIVIDE_BY_64;

}

