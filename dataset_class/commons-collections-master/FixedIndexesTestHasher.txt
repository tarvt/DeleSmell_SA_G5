Location: FixedIndexesTestHasher.java

Content: 

/** 

 * Create an instance.

 * @param shape the shape

 * @param indexes the indexes

 */

FixedIndexesTestHasher(final Shape shape,final int... indexes){

  this.shape=shape;

  this.indexes=indexes;

}

Location: FixedIndexesTestHasher.java

Content: 

@Override public HashFunctionIdentity getHashFunctionIdentity(){

  return shape.getHashFunctionIdentity();

}

Location: FixedIndexesTestHasher.java

Content: 

@Override public OfInt iterator(final Shape shape){

  if (!this.shape.equals(shape)) {

    throw new IllegalArgumentException(String.format("shape (%s) does not match internal shape (%s)",shape,this.shape));

  }

  return Arrays.stream(indexes).iterator();

}

Location: FixedIndexesTestHasher.java

Content: 

/** 

 * Create an instance.

 * @param shape the shape

 * @param indexes the indexes

 */

FixedIndexesTestHasher(final Shape shape,final int... indexes){

  this.shape=shape;

  this.indexes=indexes;

}

Location: FixedIndexesTestHasher.java

Content: 

@Override public HashFunctionIdentity getHashFunctionIdentity(){

  return shape.getHashFunctionIdentity();

}

Location: FixedIndexesTestHasher.java

Content: 

@Override public OfInt iterator(final Shape shape){

  if (!this.shape.equals(shape)) {

    throw new IllegalArgumentException(String.format("shape (%s) does not match internal shape (%s)",shape,this.shape));

  }

  return Arrays.stream(indexes).iterator();

}

