Location: WhileClosure.java

Content: 

/** 

 * Is the loop a do-while loop.

 * @return true is do-while, false if while

 * @since 3.1

 */

public boolean isDoLoop(){

  return iDoLoop;

}

Location: WhileClosure.java

Content: 

/** 

 * Constructor that performs no validation. Use  {@code whileClosure} if you want that.

 * @param predicate  the predicate used to evaluate when the loop terminates, not null

 * @param closure  the closure the execute, not null

 * @param doLoop  true to act as a do-while loop, always executing the closure once

 */

public WhileClosure(final Predicate<? super E> predicate,final Closure<? super E> closure,final boolean doLoop){

  iPredicate=predicate;

  iClosure=closure;

  iDoLoop=doLoop;

}

Location: WhileClosure.java

Content: 

/** 

 * Is the loop a do-while loop.

 * @return true is do-while, false if while

 * @since 3.1

 */

public boolean isDoLoop(){

  return iDoLoop;

}

Location: WhileClosure.java

Content: 

/** 

 * Constructor that performs no validation. Use  {@code whileClosure} if you want that.

 * @param predicate  the predicate used to evaluate when the loop terminates, not null

 * @param closure  the closure the execute, not null

 * @param doLoop  true to act as a do-while loop, always executing the closure once

 */

public WhileClosure(final Predicate<? super E> predicate,final Closure<? super E> closure,final boolean doLoop){

  iPredicate=predicate;

  iClosure=closure;

  iDoLoop=doLoop;

}

