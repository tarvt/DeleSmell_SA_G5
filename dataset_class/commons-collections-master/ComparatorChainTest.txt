Location: ComparatorChainTest.java

Content: 

public ComparatorChainTest(final String testName){

  super(testName);

}

Location: ComparatorChainTest.java

Content: 

@Test public void testBadListComparatorChain(){

  final List<Comparator<Integer>> list=new LinkedList<>();

  final ComparatorChain<Integer> chain=new ComparatorChain<>(list);

  final Integer i1=4;

  final Integer i2=6;

  try {

    chain.compare(i1,i2);

    fail("An exception should be thrown when a chain contains zero comparators.");

  }

 catch (  final UnsupportedOperationException e) {

  }

}

Location: ComparatorChainTest.java

Content: 

@Test public void testBadNoopComparatorChain(){

  final ComparatorChain<Integer> chain=new ComparatorChain<>();

  final Integer i1=4;

  final Integer i2=6;

  try {

    chain.compare(i1,i2);

    fail("An exception should be thrown when a chain contains zero comparators.");

  }

 catch (  final UnsupportedOperationException e) {

  }

}

Location: ComparatorChainTest.java

Content: 

@Test public void testComparatorChainOnMinvaluedCompatator(){

  final ComparatorChain<Integer> chain=new ComparatorChain<>();

  chain.addComparator((a,b) -> {

    final int result=a.compareTo(b);

    if (result < 0) {

      return Integer.MIN_VALUE;

    }

    if (result > 0) {

      return Integer.MAX_VALUE;

    }

    return 0;

  }

,true);

  assertTrue(chain.compare(4,5) > 0);

  assertTrue(chain.compare(5,4) < 0);

  assertEquals(0,chain.compare(4,4));

}

Location: ComparatorChainTest.java

Content: 

@Test public void testListComparatorChain(){

  final List<Comparator<Integer>> list=new LinkedList<>();

  list.add(new ComparableComparator<>());

  final ComparatorChain<Integer> chain=new ComparatorChain<>(list);

  final Integer i1=4;

  final Integer i2=6;

  final int correctValue=i1.compareTo(i2);

  assertEquals("Comparison returns the right order",chain.compare(i1,i2),correctValue);

}

Location: ComparatorChainTest.java

Content: 

@Test public void testNoopComparatorChain(){

  final ComparatorChain<Integer> chain=new ComparatorChain<>();

  final Integer i1=4;

  final Integer i2=6;

  chain.addComparator(new ComparableComparator<>());

  final int correctValue=i1.compareTo(i2);

  assertEquals("Comparison returns the right order",chain.compare(i1,i2),correctValue);

}

Location: ComparatorChainTest.java

Content: 

public ComparatorChainTest(final String testName){

  super(testName);

}

Location: ComparatorChainTest.java

Content: 

@Test public void testBadListComparatorChain(){

  final List<Comparator<Integer>> list=new LinkedList<>();

  final ComparatorChain<Integer> chain=new ComparatorChain<>(list);

  final Integer i1=4;

  final Integer i2=6;

  try {

    chain.compare(i1,i2);

    fail("An exception should be thrown when a chain contains zero comparators.");

  }

 catch (  final UnsupportedOperationException e) {

  }

}

Location: ComparatorChainTest.java

Content: 

@Test public void testBadNoopComparatorChain(){

  final ComparatorChain<Integer> chain=new ComparatorChain<>();

  final Integer i1=4;

  final Integer i2=6;

  try {

    chain.compare(i1,i2);

    fail("An exception should be thrown when a chain contains zero comparators.");

  }

 catch (  final UnsupportedOperationException e) {

  }

}

Location: ComparatorChainTest.java

Content: 

@Test public void testComparatorChainOnMinvaluedCompatator(){

  final ComparatorChain<Integer> chain=new ComparatorChain<>();

  chain.addComparator((a,b) -> {

    final int result=a.compareTo(b);

    if (result < 0) {

      return Integer.MIN_VALUE;

    }

    if (result > 0) {

      return Integer.MAX_VALUE;

    }

    return 0;

  }

,true);

  assertTrue(chain.compare(4,5) > 0);

  assertTrue(chain.compare(5,4) < 0);

  assertEquals(0,chain.compare(4,4));

}

Location: ComparatorChainTest.java

Content: 

@Test public void testListComparatorChain(){

  final List<Comparator<Integer>> list=new LinkedList<>();

  list.add(new ComparableComparator<>());

  final ComparatorChain<Integer> chain=new ComparatorChain<>(list);

  final Integer i1=4;

  final Integer i2=6;

  final int correctValue=i1.compareTo(i2);

  assertEquals("Comparison returns the right order",chain.compare(i1,i2),correctValue);

}

Location: ComparatorChainTest.java

Content: 

@Test public void testNoopComparatorChain(){

  final ComparatorChain<Integer> chain=new ComparatorChain<>();

  final Integer i1=4;

  final Integer i2=6;

  chain.addComparator(new ComparableComparator<>());

  final int correctValue=i1.compareTo(i2);

  assertEquals("Comparison returns the right order",chain.compare(i1,i2),correctValue);

}

