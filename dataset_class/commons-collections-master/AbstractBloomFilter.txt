Location: AbstractBloomFilter.java

Content: 

/** 

 * Construct a Bloom filter with the specified shape.

 * @param shape The shape.

 */

protected AbstractBloomFilter(final Shape shape){

  this.shape=shape;

}

Location: AbstractBloomFilter.java

Content: 

/** 

 * Perform the operation on the matched longs from this filter and the other filter and count the cardinality. <p>The remaining unmatched longs from the larger filter are always counted. This method is suitable for OR and XOR cardinality.

 * @param other the other Bloom filter.

 * @param operation the operation (e.g. OR, XOR)

 * @return the cardinality

 */

private int opCardinality(final BloomFilter other,final LongBinaryOperator operation){

  verifyShape(other);

  final long[] mine=getBits();

  final long[] theirs=other.getBits();

  final long[] small;

  final long[] big;

  if (mine.length > theirs.length) {

    big=mine;

    small=theirs;

  }

 else {

    small=mine;

    big=theirs;

  }

  int count=0;

  for (int i=0; i < small.length; i++) {

    count+=Long.bitCount(operation.applyAsLong(small[i],big[i]));

  }

  for (int i=small.length; i < big.length; i++) {

    count+=Long.bitCount(big[i]);

  }

  return count;

}

Location: AbstractBloomFilter.java

Content: 

/** 

 * Verifies that the hasher has the same name as the shape.

 * @param hasher the Hasher to check

 */

protected void verifyHasher(final Hasher hasher){

  if (shape.getHashFunctionIdentity().getSignature() != hasher.getHashFunctionIdentity().getSignature()) {

    throw new IllegalArgumentException(String.format("Hasher (%s) is not the hasher for shape (%s)",HashFunctionIdentity.asCommonString(hasher.getHashFunctionIdentity()),shape.toString()));

  }

}

Location: AbstractBloomFilter.java

Content: 

/** 

 * Verify the other Bloom filter has the same shape as this Bloom filter.

 * @param other the other filter to check.

 * @throws IllegalArgumentException if the shapes are not the same.

 */

protected void verifyShape(final BloomFilter other){

  verifyShape(other.getShape());

}

Location: AbstractBloomFilter.java

Content: 

/** 

 * Verify the specified shape has the same shape as this Bloom filter.

 * @param shape the other shape to check.

 * @throws IllegalArgumentException if the shapes are not the same.

 */

protected void verifyShape(final Shape shape){

  if (!this.shape.equals(shape)) {

    throw new IllegalArgumentException(String.format("Shape %s is not the same as %s",shape,this.shape));

  }

}

Location: AbstractBloomFilter.java

Content: 

/** 

 * Construct a Bloom filter with the specified shape.

 * @param shape The shape.

 */

protected AbstractBloomFilter(final Shape shape){

  this.shape=shape;

}

Location: AbstractBloomFilter.java

Content: 

/** 

 * Perform the operation on the matched longs from this filter and the other filter and count the cardinality. <p>The remaining unmatched longs from the larger filter are always counted. This method is suitable for OR and XOR cardinality.

 * @param other the other Bloom filter.

 * @param operation the operation (e.g. OR, XOR)

 * @return the cardinality

 */

private int opCardinality(final BloomFilter other,final LongBinaryOperator operation){

  verifyShape(other);

  final long[] mine=getBits();

  final long[] theirs=other.getBits();

  final long[] small;

  final long[] big;

  if (mine.length > theirs.length) {

    big=mine;

    small=theirs;

  }

 else {

    small=mine;

    big=theirs;

  }

  int count=0;

  for (int i=0; i < small.length; i++) {

    count+=Long.bitCount(operation.applyAsLong(small[i],big[i]));

  }

  for (int i=small.length; i < big.length; i++) {

    count+=Long.bitCount(big[i]);

  }

  return count;

}

Location: AbstractBloomFilter.java

Content: 

/** 

 * Verifies that the hasher has the same name as the shape.

 * @param hasher the Hasher to check

 */

protected void verifyHasher(final Hasher hasher){

  if (shape.getHashFunctionIdentity().getSignature() != hasher.getHashFunctionIdentity().getSignature()) {

    throw new IllegalArgumentException(String.format("Hasher (%s) is not the hasher for shape (%s)",HashFunctionIdentity.asCommonString(hasher.getHashFunctionIdentity()),shape.toString()));

  }

}

Location: AbstractBloomFilter.java

Content: 

/** 

 * Verify the other Bloom filter has the same shape as this Bloom filter.

 * @param other the other filter to check.

 * @throws IllegalArgumentException if the shapes are not the same.

 */

protected void verifyShape(final BloomFilter other){

  verifyShape(other.getShape());

}

Location: AbstractBloomFilter.java

Content: 

/** 

 * Verify the specified shape has the same shape as this Bloom filter.

 * @param shape the other shape to check.

 * @throws IllegalArgumentException if the shapes are not the same.

 */

protected void verifyShape(final Shape shape){

  if (!this.shape.equals(shape)) {

    throw new IllegalArgumentException(String.format("Shape %s is not the same as %s",shape,this.shape));

  }

}

