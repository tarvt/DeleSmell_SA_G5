Location: IndexFilterTest.java

Content: 

private void assertFilter(final int... indexes){

  final FixedIndexesTestHasher hasher=new FixedIndexesTestHasher(shape,indexes);

  final Set<Integer> expected=Arrays.stream(indexes).boxed().collect(Collectors.toSet());

  final ArrayList<Integer> actual=new ArrayList<>();

  IndexFilters.distinctIndexes(hasher,shape,actual::add);

  assertEquals(expected.size(),actual.size());

  for (  final Integer index : actual) {

    assertTrue(expected.contains(index));

  }

}

Location: IndexFilterTest.java

Content: 

@Test public void testApply(){

  assertFilter(1,4,6,7,9);

}

Location: IndexFilterTest.java

Content: 

@Test public void testApplyThrowsWithNullArguments(){

  final FixedIndexesTestHasher hasher=new FixedIndexesTestHasher(shape,1,2,3);

  final Shape shape=this.shape;

  final ArrayList<Integer> actual=new ArrayList<>();

  final IntConsumer consumer=actual::add;

  try {

    IndexFilters.distinctIndexes(null,shape,consumer);

    fail("null hasher");

  }

 catch (  final NullPointerException expected) {

  }

  try {

    IndexFilters.distinctIndexes(hasher,null,consumer);

    fail("null shape");

  }

 catch (  final NullPointerException expected) {

  }

  try {

    IndexFilters.distinctIndexes(hasher,shape,null);

    fail("null consumer");

  }

 catch (  final NullPointerException expected) {

  }

  IndexFilters.distinctIndexes(hasher,shape,consumer);

}

Location: IndexFilterTest.java

Content: 

@Test public void testApplyWithDuplicates(){

  assertFilter(1,4,4,6,7,7,7,7,7,9);

}

Location: IndexFilterTest.java

Content: 

private void assertFilter(final int... indexes){

  final FixedIndexesTestHasher hasher=new FixedIndexesTestHasher(shape,indexes);

  final Set<Integer> expected=Arrays.stream(indexes).boxed().collect(Collectors.toSet());

  final ArrayList<Integer> actual=new ArrayList<>();

  IndexFilters.distinctIndexes(hasher,shape,actual::add);

  assertEquals(expected.size(),actual.size());

  for (  final Integer index : actual) {

    assertTrue(expected.contains(index));

  }

}

Location: IndexFilterTest.java

Content: 

@Test public void testApply(){

  assertFilter(1,4,6,7,9);

}

Location: IndexFilterTest.java

Content: 

@Test public void testApplyThrowsWithNullArguments(){

  final FixedIndexesTestHasher hasher=new FixedIndexesTestHasher(shape,1,2,3);

  final Shape shape=this.shape;

  final ArrayList<Integer> actual=new ArrayList<>();

  final IntConsumer consumer=actual::add;

  try {

    IndexFilters.distinctIndexes(null,shape,consumer);

    fail("null hasher");

  }

 catch (  final NullPointerException expected) {

  }

  try {

    IndexFilters.distinctIndexes(hasher,null,consumer);

    fail("null shape");

  }

 catch (  final NullPointerException expected) {

  }

  try {

    IndexFilters.distinctIndexes(hasher,shape,null);

    fail("null consumer");

  }

 catch (  final NullPointerException expected) {

  }

  IndexFilters.distinctIndexes(hasher,shape,consumer);

}

Location: IndexFilterTest.java

Content: 

@Test public void testApplyWithDuplicates(){

  assertFilter(1,4,4,6,7,7,7,7,7,9);

}

