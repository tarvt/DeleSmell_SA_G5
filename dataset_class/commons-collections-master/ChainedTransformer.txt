Location: ChainedTransformer.java

Content: 

/** 

 * Hidden constructor for the use by the static factory methods.

 * @param clone  if {@code true} the input argument will be cloned

 * @param transformers  the transformers to chain, no nulls

 */

private ChainedTransformer(final boolean clone,final Transformer<? super T,? extends T>[] transformers){

  iTransformers=clone ? FunctorUtils.copy(transformers) : transformers;

}

Location: ChainedTransformer.java

Content: 

/** 

 * Create a new Transformer that calls each transformer in turn, passing the result into the next transformer. The ordering is that of the iterator() method on the collection.

 * @param < T >  the object type

 * @param transformers  a collection of transformers to chain

 * @return the {@code chained} transformer

 * @throws NullPointerException if the transformers collection is null

 * @throws NullPointerException if any transformer in the collection is null

 */

public static <T>Transformer<T,T> chainedTransformer(final Collection<? extends Transformer<? super T,? extends T>> transformers){

  Objects.requireNonNull(transformers,"transformers");

  if (transformers.isEmpty()) {

    return NOPTransformer.<T>nopTransformer();

  }

  final Transformer<T,T>[] cmds=transformers.toArray(EMPTY_TRANSFORMER_ARRAY);

  FunctorUtils.validate(cmds);

  return new ChainedTransformer<>(false,cmds);

}

Location: ChainedTransformer.java

Content: 

/** 

 * Constructor that performs no validation. Use  {@code chainedTransformer} if you want that.

 * @param transformers  the transformers to chain, copied, no nulls

 */

public ChainedTransformer(final Transformer<? super T,? extends T>... transformers){

  this(true,transformers);

}

Location: ChainedTransformer.java

Content: 

/** 

 * Hidden constructor for the use by the static factory methods.

 * @param clone  if {@code true} the input argument will be cloned

 * @param transformers  the transformers to chain, no nulls

 */

private ChainedTransformer(final boolean clone,final Transformer<? super T,? extends T>[] transformers){

  iTransformers=clone ? FunctorUtils.copy(transformers) : transformers;

}

Location: ChainedTransformer.java

Content: 

/** 

 * Create a new Transformer that calls each transformer in turn, passing the result into the next transformer. The ordering is that of the iterator() method on the collection.

 * @param < T >  the object type

 * @param transformers  a collection of transformers to chain

 * @return the {@code chained} transformer

 * @throws NullPointerException if the transformers collection is null

 * @throws NullPointerException if any transformer in the collection is null

 */

public static <T>Transformer<T,T> chainedTransformer(final Collection<? extends Transformer<? super T,? extends T>> transformers){

  Objects.requireNonNull(transformers,"transformers");

  if (transformers.isEmpty()) {

    return NOPTransformer.<T>nopTransformer();

  }

  final Transformer<T,T>[] cmds=transformers.toArray(EMPTY_TRANSFORMER_ARRAY);

  FunctorUtils.validate(cmds);

  return new ChainedTransformer<>(false,cmds);

}

Location: ChainedTransformer.java

Content: 

/** 

 * Constructor that performs no validation. Use  {@code chainedTransformer} if you want that.

 * @param transformers  the transformers to chain, copied, no nulls

 */

public ChainedTransformer(final Transformer<? super T,? extends T>... transformers){

  this(true,transformers);

}

