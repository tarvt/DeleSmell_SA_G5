Location: IteratorIterable.java

Content: 

/** 

 * Factory method to create an  {@link Iterator Iterator} from anotheriterator over objects of a different subtype.

 */

private static <E>Iterator<E> createTypesafeIterator(final Iterator<? extends E> iterator){

  return new Iterator<E>(){

    @Override public boolean hasNext(){

      return iterator.hasNext();

    }

    @Override public E next(){

      return iterator.next();

    }

    @Override public void remove(){

      iterator.remove();

    }

  }

;

}

Location: IteratorIterable.java

Content: 

/** 

 * Constructs a new  {@code IteratorIterable} that will use the giveniterator.

 * @param iterator the iterator to use.

 */

public IteratorIterable(final Iterator<? extends E> iterator){

  this(iterator,false);

}

Location: IteratorIterable.java

Content: 

/** 

 * Constructs a new  {@code IteratorIterable} that will use the giveniterator.

 * @param iterator the iterator to use.

 * @param multipleUse {@code true} if the new iterable can be used in multiple iterations

 */

public IteratorIterable(final Iterator<? extends E> iterator,final boolean multipleUse){

  if (multipleUse && !(iterator instanceof ResettableIterator)) {

    this.iterator=new ListIteratorWrapper<>(iterator);

  }

 else {

    this.iterator=iterator;

  }

  this.typeSafeIterator=createTypesafeIterator(this.iterator);

}

Location: IteratorIterable.java

Content: 

/** 

 * Factory method to create an  {@link Iterator Iterator} from anotheriterator over objects of a different subtype.

 */

private static <E>Iterator<E> createTypesafeIterator(final Iterator<? extends E> iterator){

  return new Iterator<E>(){

    @Override public boolean hasNext(){

      return iterator.hasNext();

    }

    @Override public E next(){

      return iterator.next();

    }

    @Override public void remove(){

      iterator.remove();

    }

  }

;

}

Location: IteratorIterable.java

Content: 

/** 

 * Constructs a new  {@code IteratorIterable} that will use the giveniterator.

 * @param iterator the iterator to use.

 */

public IteratorIterable(final Iterator<? extends E> iterator){

  this(iterator,false);

}

Location: IteratorIterable.java

Content: 

/** 

 * Constructs a new  {@code IteratorIterable} that will use the giveniterator.

 * @param iterator the iterator to use.

 * @param multipleUse {@code true} if the new iterable can be used in multiple iterations

 */

public IteratorIterable(final Iterator<? extends E> iterator,final boolean multipleUse){

  if (multipleUse && !(iterator instanceof ResettableIterator)) {

    this.iterator=new ListIteratorWrapper<>(iterator);

  }

 else {

    this.iterator=iterator;

  }

  this.typeSafeIterator=createTypesafeIterator(this.iterator);

}

