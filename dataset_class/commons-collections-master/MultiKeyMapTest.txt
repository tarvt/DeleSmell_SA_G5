Location: MultiKeyMapTest.java

Content: 

@SuppressWarnings("unchecked") private MultiKey<K>[] getMultiKeyKeys(){

  return new MultiKey[]{new MultiKey<>(I1,I2),new MultiKey<>(I2,I3),new MultiKey<>(I3,I4),new MultiKey<>(I1,I1,I2),new MultiKey<>(I2,I3,I4),new MultiKey<>(I3,I7,I6),new MultiKey<>(I1,I1,I2,I3),new MultiKey<>(I2,I4,I5,I6),new MultiKey<>(I3,I6,I7,I8),new MultiKey<>(I1,I1,I2,I3,I4),new MultiKey<>(I2,I3,I4,I5,I6),new MultiKey<>(I3,I5,I6,I7,I8)};

}

Location: MultiKeyMapTest.java

Content: 

public MultiKeyMapTest(final String testName){

  super(testName);

}

Location: MultiKeyMapTest.java

Content: 

@SuppressWarnings("unchecked") public void testLRUMultiKeyMap(){

  final MultiKeyMap<K,V> map=MultiKeyMap.multiKeyMap(new LRUMap<MultiKey<? extends K>,V>(2));

  map.put((K)I1,(K)I2,(V)"1-2");

  map.put((K)I1,(K)I3,(V)"1-1");

  assertEquals(2,map.size());

  map.put((K)I1,(K)I4,(V)"1-4");

  assertEquals(2,map.size());

  assertTrue(map.containsKey(I1,I3));

  assertTrue(map.containsKey(I1,I4));

  assertFalse(map.containsKey(I1,I2));

  final MultiKeyMap<K,V> cloned=map.clone();

  assertEquals(2,map.size());

  assertTrue(cloned.containsKey(I1,I3));

  assertTrue(cloned.containsKey(I1,I4));

  assertFalse(cloned.containsKey(I1,I2));

  cloned.put((K)I1,(K)I5,(V)"1-5");

  assertEquals(2,cloned.size());

  assertTrue(cloned.containsKey(I1,I4));

  assertTrue(cloned.containsKey(I1,I5));

}

Location: MultiKeyMapTest.java

Content: 

public void testMultiKeyContainsKey(){

  resetFull();

  final MultiKeyMap<K,V> multimap=getMap();

  final MultiKey<K>[] keys=getMultiKeyKeys();

  for (  final MultiKey<K> key : keys) {

switch (key.size()) {

case 2:

      assertTrue(multimap.containsKey(key.getKey(0),key.getKey(1)));

    assertFalse(multimap.containsKey(null,key.getKey(1)));

  assertFalse(multimap.containsKey(key.getKey(0),null));

assertFalse(multimap.containsKey(null,null));

assertFalse(multimap.containsKey(key.getKey(0),key.getKey(1),null));

assertFalse(multimap.containsKey(key.getKey(0),key.getKey(1),null,null));

assertFalse(multimap.containsKey(key.getKey(0),key.getKey(1),null,null,null));

break;

case 3:

assertTrue(multimap.containsKey(key.getKey(0),key.getKey(1),key.getKey(2)));

assertFalse(multimap.containsKey(null,key.getKey(1),key.getKey(2)));

assertFalse(multimap.containsKey(key.getKey(0),null,key.getKey(2)));

assertFalse(multimap.containsKey(key.getKey(0),key.getKey(1),null));

assertFalse(multimap.containsKey(null,null,null));

assertFalse(multimap.containsKey(key.getKey(0),key.getKey(1),key.getKey(2),null));

assertFalse(multimap.containsKey(key.getKey(0),key.getKey(1),key.getKey(2),null,null));

break;

case 4:

assertTrue(multimap.containsKey(key.getKey(0),key.getKey(1),key.getKey(2),key.getKey(3)));

assertFalse(multimap.containsKey(null,key.getKey(1),key.getKey(2),key.getKey(3)));

assertFalse(multimap.containsKey(key.getKey(0),null,key.getKey(2),key.getKey(3)));

assertFalse(multimap.containsKey(key.getKey(0),key.getKey(1),null,key.getKey(3)));

assertFalse(multimap.containsKey(key.getKey(0),key.getKey(1),key.getKey(2),null));

assertFalse(multimap.containsKey(null,null,null,null));

assertFalse(multimap.containsKey(key.getKey(0),key.getKey(1),key.getKey(2),key.getKey(3),null));

break;

case 5:

assertTrue(multimap.containsKey(key.getKey(0),key.getKey(1),key.getKey(2),key.getKey(3),key.getKey(4)));

assertFalse(multimap.containsKey(null,key.getKey(1),key.getKey(2),key.getKey(3),key.getKey(4)));

assertFalse(multimap.containsKey(key.getKey(0),null,key.getKey(2),key.getKey(3),key.getKey(4)));

assertFalse(multimap.containsKey(key.getKey(0),key.getKey(1),null,key.getKey(3),key.getKey(4)));

assertFalse(multimap.containsKey(key.getKey(0),key.getKey(1),key.getKey(2),null,key.getKey(4)));

assertFalse(multimap.containsKey(key.getKey(0),key.getKey(1),key.getKey(2),key.getKey(3),null));

assertFalse(multimap.containsKey(null,null,null,null,null));

break;

default :

fail("Invalid key size");

}

}

}

Location: MultiKeyMapTest.java

Content: 

public void testMultiKeyGet(){

  resetFull();

  final MultiKeyMap<K,V> multimap=getMap();

  final MultiKey<K>[] keys=getMultiKeyKeys();

  final V[] values=getSampleValues();

  for (int i=0; i < keys.length; i++) {

    final MultiKey<K> key=keys[i];

    final V value=values[i];

switch (key.size()) {

case 2:

      assertEquals(value,multimap.get(key.getKey(0),key.getKey(1)));

    assertNull(multimap.get(null,key.getKey(1)));

  assertNull(multimap.get(key.getKey(0),null));

assertNull(multimap.get(null,null));

assertNull(multimap.get(key.getKey(0),key.getKey(1),null));

assertNull(multimap.get(key.getKey(0),key.getKey(1),null,null));

assertNull(multimap.get(key.getKey(0),key.getKey(1),null,null,null));

break;

case 3:

assertEquals(value,multimap.get(key.getKey(0),key.getKey(1),key.getKey(2)));

assertNull(multimap.get(null,key.getKey(1),key.getKey(2)));

assertNull(multimap.get(key.getKey(0),null,key.getKey(2)));

assertNull(multimap.get(key.getKey(0),key.getKey(1),null));

assertNull(multimap.get(null,null,null));

assertNull(multimap.get(key.getKey(0),key.getKey(1),key.getKey(2),null));

assertNull(multimap.get(key.getKey(0),key.getKey(1),key.getKey(2),null,null));

break;

case 4:

assertEquals(value,multimap.get(key.getKey(0),key.getKey(1),key.getKey(2),key.getKey(3)));

assertNull(multimap.get(null,key.getKey(1),key.getKey(2),key.getKey(3)));

assertNull(multimap.get(key.getKey(0),null,key.getKey(2),key.getKey(3)));

assertNull(multimap.get(key.getKey(0),key.getKey(1),null,key.getKey(3)));

assertNull(multimap.get(key.getKey(0),key.getKey(1),key.getKey(2),null));

assertNull(multimap.get(null,null,null,null));

assertNull(multimap.get(key.getKey(0),key.getKey(1),key.getKey(2),key.getKey(3),null));

break;

case 5:

assertEquals(value,multimap.get(key.getKey(0),key.getKey(1),key.getKey(2),key.getKey(3),key.getKey(4)));

assertNull(multimap.get(null,key.getKey(1),key.getKey(2),key.getKey(3),key.getKey(4)));

assertNull(multimap.get(key.getKey(0),null,key.getKey(2),key.getKey(3),key.getKey(4)));

assertNull(multimap.get(key.getKey(0),key.getKey(1),null,key.getKey(3),key.getKey(4)));

assertNull(multimap.get(key.getKey(0),key.getKey(1),key.getKey(2),null,key.getKey(4)));

assertNull(multimap.get(key.getKey(0),key.getKey(1),key.getKey(2),key.getKey(3),null));

assertNull(multimap.get(null,null,null,null,null));

break;

default :

fail("Invalid key size");

}

}

}

Location: MultiKeyMapTest.java

Content: 

public void testMultiKeyPut(){

  final MultiKey<K>[] keys=getMultiKeyKeys();

  final V[] values=getSampleValues();

  for (int i=0; i < keys.length; i++) {

    final MultiKeyMap<K,V> multimap=new MultiKeyMap<>();

    final MultiKey<K> key=keys[i];

    final V value=values[i];

switch (key.size()) {

case 2:

      assertNull(multimap.put(key.getKey(0),key.getKey(1),value));

    assertEquals(1,multimap.size());

  assertEquals(value,multimap.get(key.getKey(0),key.getKey(1)));

assertTrue(multimap.containsKey(key.getKey(0),key.getKey(1)));

assertTrue(multimap.containsKey(new MultiKey<>(key.getKey(0),key.getKey(1))));

assertEquals(value,multimap.put(key.getKey(0),key.getKey(1),null));

assertEquals(1,multimap.size());

assertNull(multimap.get(key.getKey(0),key.getKey(1)));

assertTrue(multimap.containsKey(key.getKey(0),key.getKey(1)));

break;

case 3:

assertNull(multimap.put(key.getKey(0),key.getKey(1),key.getKey(2),value));

assertEquals(1,multimap.size());

assertEquals(value,multimap.get(key.getKey(0),key.getKey(1),key.getKey(2)));

assertTrue(multimap.containsKey(key.getKey(0),key.getKey(1),key.getKey(2)));

assertTrue(multimap.containsKey(new MultiKey<>(key.getKey(0),key.getKey(1),key.getKey(2))));

assertEquals(value,multimap.put(key.getKey(0),key.getKey(1),key.getKey(2),null));

assertEquals(1,multimap.size());

assertNull(multimap.get(key.getKey(0),key.getKey(1),key.getKey(2)));

assertTrue(multimap.containsKey(key.getKey(0),key.getKey(1),key.getKey(2)));

break;

case 4:

assertNull(multimap.put(key.getKey(0),key.getKey(1),key.getKey(2),key.getKey(3),value));

assertEquals(1,multimap.size());

assertEquals(value,multimap.get(key.getKey(0),key.getKey(1),key.getKey(2),key.getKey(3)));

assertTrue(multimap.containsKey(key.getKey(0),key.getKey(1),key.getKey(2),key.getKey(3)));

assertTrue(multimap.containsKey(new MultiKey<>(key.getKey(0),key.getKey(1),key.getKey(2),key.getKey(3))));

assertEquals(value,multimap.put(key.getKey(0),key.getKey(1),key.getKey(2),key.getKey(3),null));

assertEquals(1,multimap.size());

assertNull(multimap.get(key.getKey(0),key.getKey(1),key.getKey(2),key.getKey(3)));

assertTrue(multimap.containsKey(key.getKey(0),key.getKey(1),key.getKey(2),key.getKey(3)));

break;

case 5:

assertNull(multimap.put(key.getKey(0),key.getKey(1),key.getKey(2),key.getKey(3),key.getKey(4),value));

assertEquals(1,multimap.size());

assertEquals(value,multimap.get(key.getKey(0),key.getKey(1),key.getKey(2),key.getKey(3),key.getKey(4)));

assertTrue(multimap.containsKey(key.getKey(0),key.getKey(1),key.getKey(2),key.getKey(3),key.getKey(4)));

assertTrue(multimap.containsKey(new MultiKey<>(key.getKey(0),key.getKey(1),key.getKey(2),key.getKey(3),key.getKey(4))));

assertEquals(value,multimap.put(key.getKey(0),key.getKey(1),key.getKey(2),key.getKey(3),key.getKey(4),null));

assertEquals(1,multimap.size());

assertNull(multimap.get(key.getKey(0),key.getKey(1),key.getKey(2),key.getKey(3),key.getKey(4)));

assertTrue(multimap.containsKey(key.getKey(0),key.getKey(1),key.getKey(2),key.getKey(3),key.getKey(4)));

break;

default :

fail("Invalid key size");

}

}

}

Location: MultiKeyMapTest.java

Content: 

public void testMultiKeyPutWithNullKey(){

  final MultiKeyMap<String,String> map=new MultiKeyMap<>();

  map.put("a",null,"value1");

  map.put("b",null,"value2");

  map.put("c",null,"value3");

  map.put("a","z","value4");

  map.put("a",null,"value5");

  map.put(null,"a","value6");

  map.put(null,null,"value7");

  assertEquals(6,map.size());

  assertEquals("value5",map.get("a",null));

  assertEquals("value4",map.get("a","z"));

  assertEquals("value6",map.get(null,"a"));

}

Location: MultiKeyMapTest.java

Content: 

public void testMultiKeyRemove(){

  final MultiKey<K>[] keys=getMultiKeyKeys();

  final V[] values=getSampleValues();

  for (int i=0; i < keys.length; i++) {

    resetFull();

    final MultiKeyMap<K,V> multimap=getMap();

    final int size=multimap.size();

    final MultiKey<K> key=keys[i];

    final V value=values[i];

switch (key.size()) {

case 2:

      assertTrue(multimap.containsKey(key.getKey(0),key.getKey(1)));

    assertEquals(value,multimap.removeMultiKey(key.getKey(0),key.getKey(1)));

  assertFalse(multimap.containsKey(key.getKey(0),key.getKey(1)));

assertEquals(size - 1,multimap.size());

assertNull(multimap.removeMultiKey(key.getKey(0),key.getKey(1)));

assertFalse(multimap.containsKey(key.getKey(0),key.getKey(1)));

break;

case 3:

assertTrue(multimap.containsKey(key.getKey(0),key.getKey(1),key.getKey(2)));

assertEquals(value,multimap.removeMultiKey(key.getKey(0),key.getKey(1),key.getKey(2)));

assertFalse(multimap.containsKey(key.getKey(0),key.getKey(1),key.getKey(2)));

assertEquals(size - 1,multimap.size());

assertNull(multimap.removeMultiKey(key.getKey(0),key.getKey(1),key.getKey(2)));

assertFalse(multimap.containsKey(key.getKey(0),key.getKey(1),key.getKey(2)));

break;

case 4:

assertTrue(multimap.containsKey(key.getKey(0),key.getKey(1),key.getKey(2),key.getKey(3)));

assertEquals(value,multimap.removeMultiKey(key.getKey(0),key.getKey(1),key.getKey(2),key.getKey(3)));

assertFalse(multimap.containsKey(key.getKey(0),key.getKey(1),key.getKey(2),key.getKey(3)));

assertEquals(size - 1,multimap.size());

assertNull(multimap.removeMultiKey(key.getKey(0),key.getKey(1),key.getKey(2),key.getKey(3)));

assertFalse(multimap.containsKey(key.getKey(0),key.getKey(1),key.getKey(2),key.getKey(3)));

break;

case 5:

assertTrue(multimap.containsKey(key.getKey(0),key.getKey(1),key.getKey(2),key.getKey(3),key.getKey(4)));

assertEquals(value,multimap.removeMultiKey(key.getKey(0),key.getKey(1),key.getKey(2),key.getKey(3),key.getKey(4)));

assertFalse(multimap.containsKey(key.getKey(0),key.getKey(1),key.getKey(2),key.getKey(3),key.getKey(4)));

assertEquals(size - 1,multimap.size());

assertNull(multimap.removeMultiKey(key.getKey(0),key.getKey(1),key.getKey(2),key.getKey(3),key.getKey(4)));

assertFalse(multimap.containsKey(key.getKey(0),key.getKey(1),key.getKey(2),key.getKey(3),key.getKey(4)));

break;

default :

fail("Invalid key size");

}

}

}

Location: MultiKeyMapTest.java

Content: 

public void testMultiKeyRemoveAll1(){

  resetFull();

  final MultiKeyMap<K,V> multimap=getMap();

  assertEquals(12,multimap.size());

  multimap.removeAll(I1);

  assertEquals(8,multimap.size());

  for (final MapIterator<MultiKey<? extends K>,V> it=multimap.mapIterator(); it.hasNext(); ) {

    final MultiKey<? extends K> key=it.next();

    assertFalse(I1.equals(key.getKey(0)));

  }

}

Location: MultiKeyMapTest.java

Content: 

public void testMultiKeyRemoveAll2(){

  resetFull();

  final MultiKeyMap<K,V> multimap=getMap();

  assertEquals(12,multimap.size());

  multimap.removeAll(I2,I3);

  assertEquals(9,multimap.size());

  for (final MapIterator<MultiKey<? extends K>,V> it=multimap.mapIterator(); it.hasNext(); ) {

    final MultiKey<? extends K> key=it.next();

    assertFalse(I2.equals(key.getKey(0)) && I3.equals(key.getKey(1)));

  }

}

Location: MultiKeyMapTest.java

Content: 

public void testMultiKeyRemoveAll3(){

  resetFull();

  final MultiKeyMap<K,V> multimap=getMap();

  assertEquals(12,multimap.size());

  multimap.removeAll(I1,I1,I2);

  assertEquals(9,multimap.size());

  for (final MapIterator<MultiKey<? extends K>,V> it=multimap.mapIterator(); it.hasNext(); ) {

    final MultiKey<? extends K> key=it.next();

    assertFalse(I1.equals(key.getKey(0)) && I1.equals(key.getKey(1)) && I2.equals(key.getKey(2)));

  }

}

Location: MultiKeyMapTest.java

Content: 

public void testMultiKeyRemoveAll4(){

  resetFull();

  final MultiKeyMap<K,V> multimap=getMap();

  assertEquals(12,multimap.size());

  multimap.removeAll(I1,I1,I2,I3);

  assertEquals(10,multimap.size());

  for (final MapIterator<MultiKey<? extends K>,V> it=multimap.mapIterator(); it.hasNext(); ) {

    final MultiKey<? extends K> key=it.next();

    assertFalse(I1.equals(key.getKey(0)) && I1.equals(key.getKey(1)) && I2.equals(key.getKey(2))&& key.size() >= 4 && I3.equals(key.getKey(3)));

  }

}

Location: MultiKeyMapTest.java

Content: 

@SuppressWarnings("unchecked") private MultiKey<K>[] getMultiKeyKeys(){

  return new MultiKey[]{new MultiKey<>(I1,I2),new MultiKey<>(I2,I3),new MultiKey<>(I3,I4),new MultiKey<>(I1,I1,I2),new MultiKey<>(I2,I3,I4),new MultiKey<>(I3,I7,I6),new MultiKey<>(I1,I1,I2,I3),new MultiKey<>(I2,I4,I5,I6),new MultiKey<>(I3,I6,I7,I8),new MultiKey<>(I1,I1,I2,I3,I4),new MultiKey<>(I2,I3,I4,I5,I6),new MultiKey<>(I3,I5,I6,I7,I8)};

}

Location: MultiKeyMapTest.java

Content: 

public MultiKeyMapTest(final String testName){

  super(testName);

}

Location: MultiKeyMapTest.java

Content: 

@SuppressWarnings("unchecked") public void testLRUMultiKeyMap(){

  final MultiKeyMap<K,V> map=MultiKeyMap.multiKeyMap(new LRUMap<MultiKey<? extends K>,V>(2));

  map.put((K)I1,(K)I2,(V)"1-2");

  map.put((K)I1,(K)I3,(V)"1-1");

  assertEquals(2,map.size());

  map.put((K)I1,(K)I4,(V)"1-4");

  assertEquals(2,map.size());

  assertTrue(map.containsKey(I1,I3));

  assertTrue(map.containsKey(I1,I4));

  assertFalse(map.containsKey(I1,I2));

  final MultiKeyMap<K,V> cloned=map.clone();

  assertEquals(2,map.size());

  assertTrue(cloned.containsKey(I1,I3));

  assertTrue(cloned.containsKey(I1,I4));

  assertFalse(cloned.containsKey(I1,I2));

  cloned.put((K)I1,(K)I5,(V)"1-5");

  assertEquals(2,cloned.size());

  assertTrue(cloned.containsKey(I1,I4));

  assertTrue(cloned.containsKey(I1,I5));

}

Location: MultiKeyMapTest.java

Content: 

public void testMultiKeyContainsKey(){

  resetFull();

  final MultiKeyMap<K,V> multimap=getMap();

  final MultiKey<K>[] keys=getMultiKeyKeys();

  for (  final MultiKey<K> key : keys) {

switch (key.size()) {

case 2:

      assertTrue(multimap.containsKey(key.getKey(0),key.getKey(1)));

    assertFalse(multimap.containsKey(null,key.getKey(1)));

  assertFalse(multimap.containsKey(key.getKey(0),null));

assertFalse(multimap.containsKey(null,null));

assertFalse(multimap.containsKey(key.getKey(0),key.getKey(1),null));

assertFalse(multimap.containsKey(key.getKey(0),key.getKey(1),null,null));

assertFalse(multimap.containsKey(key.getKey(0),key.getKey(1),null,null,null));

break;

case 3:

assertTrue(multimap.containsKey(key.getKey(0),key.getKey(1),key.getKey(2)));

assertFalse(multimap.containsKey(null,key.getKey(1),key.getKey(2)));

assertFalse(multimap.containsKey(key.getKey(0),null,key.getKey(2)));

assertFalse(multimap.containsKey(key.getKey(0),key.getKey(1),null));

assertFalse(multimap.containsKey(null,null,null));

assertFalse(multimap.containsKey(key.getKey(0),key.getKey(1),key.getKey(2),null));

assertFalse(multimap.containsKey(key.getKey(0),key.getKey(1),key.getKey(2),null,null));

break;

case 4:

assertTrue(multimap.containsKey(key.getKey(0),key.getKey(1),key.getKey(2),key.getKey(3)));

assertFalse(multimap.containsKey(null,key.getKey(1),key.getKey(2),key.getKey(3)));

assertFalse(multimap.containsKey(key.getKey(0),null,key.getKey(2),key.getKey(3)));

assertFalse(multimap.containsKey(key.getKey(0),key.getKey(1),null,key.getKey(3)));

assertFalse(multimap.containsKey(key.getKey(0),key.getKey(1),key.getKey(2),null));

assertFalse(multimap.containsKey(null,null,null,null));

assertFalse(multimap.containsKey(key.getKey(0),key.getKey(1),key.getKey(2),key.getKey(3),null));

break;

case 5:

assertTrue(multimap.containsKey(key.getKey(0),key.getKey(1),key.getKey(2),key.getKey(3),key.getKey(4)));

assertFalse(multimap.containsKey(null,key.getKey(1),key.getKey(2),key.getKey(3),key.getKey(4)));

assertFalse(multimap.containsKey(key.getKey(0),null,key.getKey(2),key.getKey(3),key.getKey(4)));

assertFalse(multimap.containsKey(key.getKey(0),key.getKey(1),null,key.getKey(3),key.getKey(4)));

assertFalse(multimap.containsKey(key.getKey(0),key.getKey(1),key.getKey(2),null,key.getKey(4)));

assertFalse(multimap.containsKey(key.getKey(0),key.getKey(1),key.getKey(2),key.getKey(3),null));

assertFalse(multimap.containsKey(null,null,null,null,null));

break;

default :

fail("Invalid key size");

}

}

}

Location: MultiKeyMapTest.java

Content: 

public void testMultiKeyGet(){

  resetFull();

  final MultiKeyMap<K,V> multimap=getMap();

  final MultiKey<K>[] keys=getMultiKeyKeys();

  final V[] values=getSampleValues();

  for (int i=0; i < keys.length; i++) {

    final MultiKey<K> key=keys[i];

    final V value=values[i];

switch (key.size()) {

case 2:

      assertEquals(value,multimap.get(key.getKey(0),key.getKey(1)));

    assertNull(multimap.get(null,key.getKey(1)));

  assertNull(multimap.get(key.getKey(0),null));

assertNull(multimap.get(null,null));

assertNull(multimap.get(key.getKey(0),key.getKey(1),null));

assertNull(multimap.get(key.getKey(0),key.getKey(1),null,null));

assertNull(multimap.get(key.getKey(0),key.getKey(1),null,null,null));

break;

case 3:

assertEquals(value,multimap.get(key.getKey(0),key.getKey(1),key.getKey(2)));

assertNull(multimap.get(null,key.getKey(1),key.getKey(2)));

assertNull(multimap.get(key.getKey(0),null,key.getKey(2)));

assertNull(multimap.get(key.getKey(0),key.getKey(1),null));

assertNull(multimap.get(null,null,null));

assertNull(multimap.get(key.getKey(0),key.getKey(1),key.getKey(2),null));

assertNull(multimap.get(key.getKey(0),key.getKey(1),key.getKey(2),null,null));

break;

case 4:

assertEquals(value,multimap.get(key.getKey(0),key.getKey(1),key.getKey(2),key.getKey(3)));

assertNull(multimap.get(null,key.getKey(1),key.getKey(2),key.getKey(3)));

assertNull(multimap.get(key.getKey(0),null,key.getKey(2),key.getKey(3)));

assertNull(multimap.get(key.getKey(0),key.getKey(1),null,key.getKey(3)));

assertNull(multimap.get(key.getKey(0),key.getKey(1),key.getKey(2),null));

assertNull(multimap.get(null,null,null,null));

assertNull(multimap.get(key.getKey(0),key.getKey(1),key.getKey(2),key.getKey(3),null));

break;

case 5:

assertEquals(value,multimap.get(key.getKey(0),key.getKey(1),key.getKey(2),key.getKey(3),key.getKey(4)));

assertNull(multimap.get(null,key.getKey(1),key.getKey(2),key.getKey(3),key.getKey(4)));

assertNull(multimap.get(key.getKey(0),null,key.getKey(2),key.getKey(3),key.getKey(4)));

assertNull(multimap.get(key.getKey(0),key.getKey(1),null,key.getKey(3),key.getKey(4)));

assertNull(multimap.get(key.getKey(0),key.getKey(1),key.getKey(2),null,key.getKey(4)));

assertNull(multimap.get(key.getKey(0),key.getKey(1),key.getKey(2),key.getKey(3),null));

assertNull(multimap.get(null,null,null,null,null));

break;

default :

fail("Invalid key size");

}

}

}

Location: MultiKeyMapTest.java

Content: 

public void testMultiKeyPut(){

  final MultiKey<K>[] keys=getMultiKeyKeys();

  final V[] values=getSampleValues();

  for (int i=0; i < keys.length; i++) {

    final MultiKeyMap<K,V> multimap=new MultiKeyMap<>();

    final MultiKey<K> key=keys[i];

    final V value=values[i];

switch (key.size()) {

case 2:

      assertNull(multimap.put(key.getKey(0),key.getKey(1),value));

    assertEquals(1,multimap.size());

  assertEquals(value,multimap.get(key.getKey(0),key.getKey(1)));

assertTrue(multimap.containsKey(key.getKey(0),key.getKey(1)));

assertTrue(multimap.containsKey(new MultiKey<>(key.getKey(0),key.getKey(1))));

assertEquals(value,multimap.put(key.getKey(0),key.getKey(1),null));

assertEquals(1,multimap.size());

assertNull(multimap.get(key.getKey(0),key.getKey(1)));

assertTrue(multimap.containsKey(key.getKey(0),key.getKey(1)));

break;

case 3:

assertNull(multimap.put(key.getKey(0),key.getKey(1),key.getKey(2),value));

assertEquals(1,multimap.size());

assertEquals(value,multimap.get(key.getKey(0),key.getKey(1),key.getKey(2)));

assertTrue(multimap.containsKey(key.getKey(0),key.getKey(1),key.getKey(2)));

assertTrue(multimap.containsKey(new MultiKey<>(key.getKey(0),key.getKey(1),key.getKey(2))));

assertEquals(value,multimap.put(key.getKey(0),key.getKey(1),key.getKey(2),null));

assertEquals(1,multimap.size());

assertNull(multimap.get(key.getKey(0),key.getKey(1),key.getKey(2)));

assertTrue(multimap.containsKey(key.getKey(0),key.getKey(1),key.getKey(2)));

break;

case 4:

assertNull(multimap.put(key.getKey(0),key.getKey(1),key.getKey(2),key.getKey(3),value));

assertEquals(1,multimap.size());

assertEquals(value,multimap.get(key.getKey(0),key.getKey(1),key.getKey(2),key.getKey(3)));

assertTrue(multimap.containsKey(key.getKey(0),key.getKey(1),key.getKey(2),key.getKey(3)));

assertTrue(multimap.containsKey(new MultiKey<>(key.getKey(0),key.getKey(1),key.getKey(2),key.getKey(3))));

assertEquals(value,multimap.put(key.getKey(0),key.getKey(1),key.getKey(2),key.getKey(3),null));

assertEquals(1,multimap.size());

assertNull(multimap.get(key.getKey(0),key.getKey(1),key.getKey(2),key.getKey(3)));

assertTrue(multimap.containsKey(key.getKey(0),key.getKey(1),key.getKey(2),key.getKey(3)));

break;

case 5:

assertNull(multimap.put(key.getKey(0),key.getKey(1),key.getKey(2),key.getKey(3),key.getKey(4),value));

assertEquals(1,multimap.size());

assertEquals(value,multimap.get(key.getKey(0),key.getKey(1),key.getKey(2),key.getKey(3),key.getKey(4)));

assertTrue(multimap.containsKey(key.getKey(0),key.getKey(1),key.getKey(2),key.getKey(3),key.getKey(4)));

assertTrue(multimap.containsKey(new MultiKey<>(key.getKey(0),key.getKey(1),key.getKey(2),key.getKey(3),key.getKey(4))));

assertEquals(value,multimap.put(key.getKey(0),key.getKey(1),key.getKey(2),key.getKey(3),key.getKey(4),null));

assertEquals(1,multimap.size());

assertNull(multimap.get(key.getKey(0),key.getKey(1),key.getKey(2),key.getKey(3),key.getKey(4)));

assertTrue(multimap.containsKey(key.getKey(0),key.getKey(1),key.getKey(2),key.getKey(3),key.getKey(4)));

break;

default :

fail("Invalid key size");

}

}

}

Location: MultiKeyMapTest.java

Content: 

public void testMultiKeyPutWithNullKey(){

  final MultiKeyMap<String,String> map=new MultiKeyMap<>();

  map.put("a",null,"value1");

  map.put("b",null,"value2");

  map.put("c",null,"value3");

  map.put("a","z","value4");

  map.put("a",null,"value5");

  map.put(null,"a","value6");

  map.put(null,null,"value7");

  assertEquals(6,map.size());

  assertEquals("value5",map.get("a",null));

  assertEquals("value4",map.get("a","z"));

  assertEquals("value6",map.get(null,"a"));

}

Location: MultiKeyMapTest.java

Content: 

public void testMultiKeyRemove(){

  final MultiKey<K>[] keys=getMultiKeyKeys();

  final V[] values=getSampleValues();

  for (int i=0; i < keys.length; i++) {

    resetFull();

    final MultiKeyMap<K,V> multimap=getMap();

    final int size=multimap.size();

    final MultiKey<K> key=keys[i];

    final V value=values[i];

switch (key.size()) {

case 2:

      assertTrue(multimap.containsKey(key.getKey(0),key.getKey(1)));

    assertEquals(value,multimap.removeMultiKey(key.getKey(0),key.getKey(1)));

  assertFalse(multimap.containsKey(key.getKey(0),key.getKey(1)));

assertEquals(size - 1,multimap.size());

assertNull(multimap.removeMultiKey(key.getKey(0),key.getKey(1)));

assertFalse(multimap.containsKey(key.getKey(0),key.getKey(1)));

break;

case 3:

assertTrue(multimap.containsKey(key.getKey(0),key.getKey(1),key.getKey(2)));

assertEquals(value,multimap.removeMultiKey(key.getKey(0),key.getKey(1),key.getKey(2)));

assertFalse(multimap.containsKey(key.getKey(0),key.getKey(1),key.getKey(2)));

assertEquals(size - 1,multimap.size());

assertNull(multimap.removeMultiKey(key.getKey(0),key.getKey(1),key.getKey(2)));

assertFalse(multimap.containsKey(key.getKey(0),key.getKey(1),key.getKey(2)));

break;

case 4:

assertTrue(multimap.containsKey(key.getKey(0),key.getKey(1),key.getKey(2),key.getKey(3)));

assertEquals(value,multimap.removeMultiKey(key.getKey(0),key.getKey(1),key.getKey(2),key.getKey(3)));

assertFalse(multimap.containsKey(key.getKey(0),key.getKey(1),key.getKey(2),key.getKey(3)));

assertEquals(size - 1,multimap.size());

assertNull(multimap.removeMultiKey(key.getKey(0),key.getKey(1),key.getKey(2),key.getKey(3)));

assertFalse(multimap.containsKey(key.getKey(0),key.getKey(1),key.getKey(2),key.getKey(3)));

break;

case 5:

assertTrue(multimap.containsKey(key.getKey(0),key.getKey(1),key.getKey(2),key.getKey(3),key.getKey(4)));

assertEquals(value,multimap.removeMultiKey(key.getKey(0),key.getKey(1),key.getKey(2),key.getKey(3),key.getKey(4)));

assertFalse(multimap.containsKey(key.getKey(0),key.getKey(1),key.getKey(2),key.getKey(3),key.getKey(4)));

assertEquals(size - 1,multimap.size());

assertNull(multimap.removeMultiKey(key.getKey(0),key.getKey(1),key.getKey(2),key.getKey(3),key.getKey(4)));

assertFalse(multimap.containsKey(key.getKey(0),key.getKey(1),key.getKey(2),key.getKey(3),key.getKey(4)));

break;

default :

fail("Invalid key size");

}

}

}

Location: MultiKeyMapTest.java

Content: 

public void testMultiKeyRemoveAll1(){

  resetFull();

  final MultiKeyMap<K,V> multimap=getMap();

  assertEquals(12,multimap.size());

  multimap.removeAll(I1);

  assertEquals(8,multimap.size());

  for (final MapIterator<MultiKey<? extends K>,V> it=multimap.mapIterator(); it.hasNext(); ) {

    final MultiKey<? extends K> key=it.next();

    assertFalse(I1.equals(key.getKey(0)));

  }

}

Location: MultiKeyMapTest.java

Content: 

public void testMultiKeyRemoveAll2(){

  resetFull();

  final MultiKeyMap<K,V> multimap=getMap();

  assertEquals(12,multimap.size());

  multimap.removeAll(I2,I3);

  assertEquals(9,multimap.size());

  for (final MapIterator<MultiKey<? extends K>,V> it=multimap.mapIterator(); it.hasNext(); ) {

    final MultiKey<? extends K> key=it.next();

    assertFalse(I2.equals(key.getKey(0)) && I3.equals(key.getKey(1)));

  }

}

Location: MultiKeyMapTest.java

Content: 

public void testMultiKeyRemoveAll3(){

  resetFull();

  final MultiKeyMap<K,V> multimap=getMap();

  assertEquals(12,multimap.size());

  multimap.removeAll(I1,I1,I2);

  assertEquals(9,multimap.size());

  for (final MapIterator<MultiKey<? extends K>,V> it=multimap.mapIterator(); it.hasNext(); ) {

    final MultiKey<? extends K> key=it.next();

    assertFalse(I1.equals(key.getKey(0)) && I1.equals(key.getKey(1)) && I2.equals(key.getKey(2)));

  }

}

Location: MultiKeyMapTest.java

Content: 

public void testMultiKeyRemoveAll4(){

  resetFull();

  final MultiKeyMap<K,V> multimap=getMap();

  assertEquals(12,multimap.size());

  multimap.removeAll(I1,I1,I2,I3);

  assertEquals(10,multimap.size());

  for (final MapIterator<MultiKey<? extends K>,V> it=multimap.mapIterator(); it.hasNext(); ) {

    final MultiKey<? extends K> key=it.next();

    assertFalse(I1.equals(key.getKey(0)) && I1.equals(key.getKey(1)) && I2.equals(key.getKey(2))&& key.size() >= 4 && I3.equals(key.getKey(3)));

  }

}

