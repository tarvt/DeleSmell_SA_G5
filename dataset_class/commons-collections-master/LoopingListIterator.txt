Location: LoopingListIterator.java

Content: 

/** 

 * Constructor that wraps a list. <p> There is no way to reset a ListIterator instance without recreating it from the original source, so the List must be passed in and a reference to it held.

 * @param list the list to wrap

 * @throws NullPointerException if the list it null

 */

public LoopingListIterator(final List<E> list){

  this.list=Objects.requireNonNull(list,"collection");

  _reset();

}

Location: LoopingListIterator.java

Content: 

private void _reset(){

  iterator=list.listIterator();

}

Location: LoopingListIterator.java

Content: 

/** 

 * Constructor that wraps a list. <p> There is no way to reset a ListIterator instance without recreating it from the original source, so the List must be passed in and a reference to it held.

 * @param list the list to wrap

 * @throws NullPointerException if the list it null

 */

public LoopingListIterator(final List<E> list){

  this.list=Objects.requireNonNull(list,"collection");

  _reset();

}

Location: LoopingListIterator.java

Content: 

private void _reset(){

  iterator=list.listIterator();

}

