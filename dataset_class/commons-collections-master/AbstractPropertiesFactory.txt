Location: AbstractPropertiesFactory.java

Content: 

/** 

 * Constructs an instance.

 */

protected AbstractPropertiesFactory(){

}

Location: AbstractPropertiesFactory.java

Content: 

/** 

 * Creates and loads properties from the given file.

 * @param classLoader the class loader to use to get the named resource.

 * @param name        the location of the properties file.

 * @return a new properties object.

 * @throws IOException              Thrown if an error occurred reading the input stream.

 * @throws IllegalArgumentException Thrown if the input contains a malformed Unicode escape sequence.

 */

public T load(final ClassLoader classLoader,final String name) throws IOException {

  try (InputStream inputStream=classLoader.getResourceAsStream(name)){

    return load(inputStream,PropertyFormat.toPropertyFormat(name));

  }

 }

Location: AbstractPropertiesFactory.java

Content: 

/** 

 * Creates and loads properties from the given file.

 * @param file the location of the properties file.

 * @return a new properties object.

 * @throws IOException              Thrown if an error occurred reading the input stream.

 * @throws IllegalArgumentException Thrown if the input contains a malformed Unicode escape sequence.

 * @throws FileNotFoundException    Thrown if the file does not exist, is a directory, or cannot be opened forreading.

 * @throws SecurityException        Thrown if a security manager's {@code checkRead} method denies read access tothe file.

 */

public T load(final File file) throws FileNotFoundException, IOException {

  try (FileInputStream inputStream=new FileInputStream(file)){

    return load(inputStream,PropertyFormat.toPropertyFormat(file.getName()));

  }

 }

Location: AbstractPropertiesFactory.java

Content: 

/** 

 * Creates and loads properties from the given input stream.

 * @param inputStream the location of the properties file.

 * @return a new properties object.

 * @throws IOException              Thrown if an error occurred reading the input stream.

 * @throws IllegalArgumentException Thrown if the input contains a malformed Unicode escape sequence.

 */

public T load(final InputStream inputStream) throws IOException {

  if (inputStream == null) {

    return null;

  }

  final T properties=createProperties();

  properties.load(inputStream);

  return properties;

}

Location: AbstractPropertiesFactory.java

Content: 

/** 

 * Creates and loads properties from the given input stream.

 * @param inputStream the location of the properties file.

 * @param propertyFormat The format of the given file.

 * @return a new properties object.

 * @throws IOException              Thrown if an error occurred reading the input stream.

 * @throws IllegalArgumentException Thrown if the input contains a malformed Unicode escape sequence.

 * @since 4.5

 */

public T load(final InputStream inputStream,final PropertyFormat propertyFormat) throws IOException {

  if (inputStream == null) {

    return null;

  }

  final T properties=createProperties();

  if (propertyFormat == PropertyFormat.XML) {

    properties.loadFromXML(inputStream);

  }

 else {

    properties.load(inputStream);

  }

  return properties;

}

Location: AbstractPropertiesFactory.java

Content: 

/** 

 * Creates and loads properties from the given path.

 * @param path the location of the properties file.

 * @return a new properties object.

 * @throws IOException              Thrown if an error occurred reading the input stream.

 * @throws IllegalArgumentException Thrown if the input contains a malformed Unicode escape sequence.

 */

public T load(final Path path) throws IOException {

  try (InputStream inputStream=Files.newInputStream(path)){

    return load(inputStream,PropertyFormat.toPropertyFormat(Objects.toString(path.getFileName(),null)));

  }

 }

Location: AbstractPropertiesFactory.java

Content: 

/** 

 * Creates and loads properties from the given reader.

 * @param reader the location of the properties file.

 * @return a new properties object.

 * @throws IOException              Thrown if an error occurred reading the input stream.

 * @throws IllegalArgumentException Thrown if the input contains a malformed Unicode escape sequence.

 */

public T load(final Reader reader) throws IOException {

  final T properties=createProperties();

  properties.load(reader);

  return properties;

}

Location: AbstractPropertiesFactory.java

Content: 

/** 

 * Creates and loads properties from the given file name.

 * @param name the location of the properties file.

 * @return a new properties object.

 * @throws IOException              Thrown if an error occurred reading the input stream.

 * @throws IllegalArgumentException Thrown if the input contains a malformed Unicode escape sequence.

 */

public T load(final String name) throws IOException {

  try (FileInputStream inputStream=new FileInputStream(name)){

    return load(inputStream,PropertyFormat.toPropertyFormat(name));

  }

 }

Location: AbstractPropertiesFactory.java

Content: 

/** 

 * Creates and loads properties from the given URI.

 * @param uri the location of the properties file.

 * @return a new properties object.

 * @throws IOException              Thrown if an error occurred reading the input stream.

 * @throws IllegalArgumentException Thrown if the input contains a malformed Unicode escape sequence.

 */

public T load(final URI uri) throws IOException {

  return load(Paths.get(uri));

}

Location: AbstractPropertiesFactory.java

Content: 

/** 

 * Creates and loads properties from the given URL.

 * @param url the location of the properties file.

 * @return a new properties object.

 * @throws IOException              Thrown if an error occurred reading the input stream.

 * @throws IllegalArgumentException Thrown if the input contains a malformed Unicode escape sequence.

 */

public T load(final URL url) throws IOException {

  try (InputStream inputStream=url.openStream()){

    return load(inputStream,PropertyFormat.toPropertyFormat(url.getFile()));

  }

 }

Location: AbstractPropertiesFactory.java

Content: 

/** 

 * Constructs an instance.

 */

protected AbstractPropertiesFactory(){

}

Location: AbstractPropertiesFactory.java

Content: 

/** 

 * Creates and loads properties from the given file.

 * @param classLoader the class loader to use to get the named resource.

 * @param name        the location of the properties file.

 * @return a new properties object.

 * @throws IOException              Thrown if an error occurred reading the input stream.

 * @throws IllegalArgumentException Thrown if the input contains a malformed Unicode escape sequence.

 */

public T load(final ClassLoader classLoader,final String name) throws IOException {

  try (InputStream inputStream=classLoader.getResourceAsStream(name)){

    return load(inputStream,PropertyFormat.toPropertyFormat(name));

  }

 }

Location: AbstractPropertiesFactory.java

Content: 

/** 

 * Creates and loads properties from the given file.

 * @param file the location of the properties file.

 * @return a new properties object.

 * @throws IOException              Thrown if an error occurred reading the input stream.

 * @throws IllegalArgumentException Thrown if the input contains a malformed Unicode escape sequence.

 * @throws FileNotFoundException    Thrown if the file does not exist, is a directory, or cannot be opened forreading.

 * @throws SecurityException        Thrown if a security manager's {@code checkRead} method denies read access tothe file.

 */

public T load(final File file) throws FileNotFoundException, IOException {

  try (FileInputStream inputStream=new FileInputStream(file)){

    return load(inputStream,PropertyFormat.toPropertyFormat(file.getName()));

  }

 }

Location: AbstractPropertiesFactory.java

Content: 

/** 

 * Creates and loads properties from the given input stream.

 * @param inputStream the location of the properties file.

 * @return a new properties object.

 * @throws IOException              Thrown if an error occurred reading the input stream.

 * @throws IllegalArgumentException Thrown if the input contains a malformed Unicode escape sequence.

 */

public T load(final InputStream inputStream) throws IOException {

  if (inputStream == null) {

    return null;

  }

  final T properties=createProperties();

  properties.load(inputStream);

  return properties;

}

Location: AbstractPropertiesFactory.java

Content: 

/** 

 * Creates and loads properties from the given input stream.

 * @param inputStream the location of the properties file.

 * @param propertyFormat The format of the given file.

 * @return a new properties object.

 * @throws IOException              Thrown if an error occurred reading the input stream.

 * @throws IllegalArgumentException Thrown if the input contains a malformed Unicode escape sequence.

 * @since 4.5

 */

public T load(final InputStream inputStream,final PropertyFormat propertyFormat) throws IOException {

  if (inputStream == null) {

    return null;

  }

  final T properties=createProperties();

  if (propertyFormat == PropertyFormat.XML) {

    properties.loadFromXML(inputStream);

  }

 else {

    properties.load(inputStream);

  }

  return properties;

}

Location: AbstractPropertiesFactory.java

Content: 

/** 

 * Creates and loads properties from the given path.

 * @param path the location of the properties file.

 * @return a new properties object.

 * @throws IOException              Thrown if an error occurred reading the input stream.

 * @throws IllegalArgumentException Thrown if the input contains a malformed Unicode escape sequence.

 */

public T load(final Path path) throws IOException {

  try (InputStream inputStream=Files.newInputStream(path)){

    return load(inputStream,PropertyFormat.toPropertyFormat(Objects.toString(path.getFileName(),null)));

  }

 }

Location: AbstractPropertiesFactory.java

Content: 

/** 

 * Creates and loads properties from the given reader.

 * @param reader the location of the properties file.

 * @return a new properties object.

 * @throws IOException              Thrown if an error occurred reading the input stream.

 * @throws IllegalArgumentException Thrown if the input contains a malformed Unicode escape sequence.

 */

public T load(final Reader reader) throws IOException {

  final T properties=createProperties();

  properties.load(reader);

  return properties;

}

Location: AbstractPropertiesFactory.java

Content: 

/** 

 * Creates and loads properties from the given file name.

 * @param name the location of the properties file.

 * @return a new properties object.

 * @throws IOException              Thrown if an error occurred reading the input stream.

 * @throws IllegalArgumentException Thrown if the input contains a malformed Unicode escape sequence.

 */

public T load(final String name) throws IOException {

  try (FileInputStream inputStream=new FileInputStream(name)){

    return load(inputStream,PropertyFormat.toPropertyFormat(name));

  }

 }

Location: AbstractPropertiesFactory.java

Content: 

/** 

 * Creates and loads properties from the given URI.

 * @param uri the location of the properties file.

 * @return a new properties object.

 * @throws IOException              Thrown if an error occurred reading the input stream.

 * @throws IllegalArgumentException Thrown if the input contains a malformed Unicode escape sequence.

 */

public T load(final URI uri) throws IOException {

  return load(Paths.get(uri));

}

Location: AbstractPropertiesFactory.java

Content: 

/** 

 * Creates and loads properties from the given URL.

 * @param url the location of the properties file.

 * @return a new properties object.

 * @throws IOException              Thrown if an error occurred reading the input stream.

 * @throws IllegalArgumentException Thrown if the input contains a malformed Unicode escape sequence.

 */

public T load(final URL url) throws IOException {

  try (InputStream inputStream=url.openStream()){

    return load(inputStream,PropertyFormat.toPropertyFormat(url.getFile()));

  }

 }

