Location: UnmodifiableBoundedCollection.java

Content: 

/** 

 * Constructor that wraps (not copies).

 * @param coll  the collection to decorate, must not be null

 * @throws NullPointerException if coll is null

 */

@SuppressWarnings("unchecked") private UnmodifiableBoundedCollection(final BoundedCollection<? extends E> coll){

  super((BoundedCollection<E>)coll);

}

Location: UnmodifiableBoundedCollection.java

Content: 

/** 

 * Factory method to create an unmodifiable bounded collection. <p> This method is capable of drilling down through up to 1000 other decorators to find a suitable BoundedCollection.

 * @param < E > the type of the elements in the collection

 * @param collection  the {@code BoundedCollection} to decorate, must not be null

 * @return a new unmodifiable bounded collection

 * @throws NullPointerException if coll is null

 * @throws IllegalArgumentException if coll is not a {@code BoundedCollection}

 * @since 4.0

 */

@SuppressWarnings("unchecked") public static <E>BoundedCollection<E> unmodifiableBoundedCollection(Collection<? extends E> collection){

  Objects.requireNonNull(collection,"collection");

  for (int i=0; i < 1000; i++) {

    if (collection instanceof BoundedCollection) {

      break;

    }

    if (collection instanceof AbstractCollectionDecorator) {

      collection=((AbstractCollectionDecorator<E>)collection).decorated();

    }

 else     if (collection instanceof SynchronizedCollection) {

      collection=((SynchronizedCollection<E>)collection).decorated();

    }

  }

  if (!(collection instanceof BoundedCollection)) {

    throw new IllegalArgumentException("Collection is not a bounded collection.");

  }

  return new UnmodifiableBoundedCollection<>((BoundedCollection<E>)collection);

}

Location: UnmodifiableBoundedCollection.java

Content: 

/** 

 * Constructor that wraps (not copies).

 * @param coll  the collection to decorate, must not be null

 * @throws NullPointerException if coll is null

 */

@SuppressWarnings("unchecked") private UnmodifiableBoundedCollection(final BoundedCollection<? extends E> coll){

  super((BoundedCollection<E>)coll);

}

Location: UnmodifiableBoundedCollection.java

Content: 

/** 

 * Factory method to create an unmodifiable bounded collection. <p> This method is capable of drilling down through up to 1000 other decorators to find a suitable BoundedCollection.

 * @param < E > the type of the elements in the collection

 * @param collection  the {@code BoundedCollection} to decorate, must not be null

 * @return a new unmodifiable bounded collection

 * @throws NullPointerException if coll is null

 * @throws IllegalArgumentException if coll is not a {@code BoundedCollection}

 * @since 4.0

 */

@SuppressWarnings("unchecked") public static <E>BoundedCollection<E> unmodifiableBoundedCollection(Collection<? extends E> collection){

  Objects.requireNonNull(collection,"collection");

  for (int i=0; i < 1000; i++) {

    if (collection instanceof BoundedCollection) {

      break;

    }

    if (collection instanceof AbstractCollectionDecorator) {

      collection=((AbstractCollectionDecorator<E>)collection).decorated();

    }

 else     if (collection instanceof SynchronizedCollection) {

      collection=((SynchronizedCollection<E>)collection).decorated();

    }

  }

  if (!(collection instanceof BoundedCollection)) {

    throw new IllegalArgumentException("Collection is not a bounded collection.");

  }

  return new UnmodifiableBoundedCollection<>((BoundedCollection<E>)collection);

}

