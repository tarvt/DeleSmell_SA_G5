Location: AbstractSortedSetTest.java

Content: 

/** 

 * JUnit constructor.

 * @param name  name for test

 */

public AbstractSortedSetTest(final String name){

  super(name);

}

Location: AbstractSortedSetTest.java

Content: 

/** 

 * Bulk test  {@link SortedSet#headSet(Object)}.  This method runs through all of the tests in  {@link AbstractSortedSetTest}. After modification operations,  {@link #verify()} is invoked to ensurethat the set and the other collection views are still valid.

 * @return a {@link AbstractSetTest} instance for testing a headset.

 */

public BulkTest bulkTestSortedSetHeadSet(){

  final int length=getFullElements().length;

  final int lobound=length / 3;

  final int hibound=lobound * 2;

  return new TestSortedSetSubSet(hibound,true);

}

Location: AbstractSortedSetTest.java

Content: 

/** 

 * Bulk test  {@link SortedSet#subSet(Object,Object)}.  This method runs through all of the tests in  {@link AbstractSortedSetTest}. After modification operations,  {@link #verify()} is invoked to ensurethat the set and the other collection views are still valid.

 * @return a {@link AbstractSetTest} instance for testing a subset.

 */

public BulkTest bulkTestSortedSetSubSet(){

  final int length=getFullElements().length;

  final int lobound=length / 3;

  final int hibound=lobound * 2;

  return new TestSortedSetSubSet(lobound,hibound);

}

Location: AbstractSortedSetTest.java

Content: 

/** 

 * Bulk test  {@link SortedSet#tailSet(Object)}.  This method runs through all of the tests in  {@link AbstractSortedSetTest}. After modification operations,  {@link #verify()} is invoked to ensurethat the set and the other collection views are still valid.

 * @return a {@link AbstractSetTest} instance for testing a tailset.

 */

public BulkTest bulkTestSortedSetTailSet(){

  final int length=getFullElements().length;

  final int lobound=length / 3;

  return new TestSortedSetSubSet(lobound,false);

}

Location: AbstractSortedSetTest.java

Content: 

/** 

 * {@inheritDoc}

 */

@Override public SortedSet<E> getCollection(){

  return (SortedSet<E>)super.getCollection();

}

Location: AbstractSortedSetTest.java

Content: 

/** 

 * {@inheritDoc}

 */

@Override public SortedSet<E> getConfirmed(){

  return (SortedSet<E>)super.getConfirmed();

}

Location: AbstractSortedSetTest.java

Content: 

/** 

 * Override to return comparable objects.

 */

@Override @SuppressWarnings("unchecked") public E[] getFullNonNullElements(){

  final Object[] elements=new Object[30];

  for (int i=0; i < 30; i++) {

    elements[i]=Integer.valueOf(i + i + 1);

  }

  return (E[])elements;

}

Location: AbstractSortedSetTest.java

Content: 

/** 

 * Override to return comparable objects.

 */

@Override @SuppressWarnings("unchecked") public E[] getOtherNonNullElements(){

  final Object[] elements=new Object[30];

  for (int i=0; i < 30; i++) {

    elements[i]=Integer.valueOf(i + i + 2);

  }

  return (E[])elements;

}

Location: AbstractSortedSetTest.java

Content: 

/** 

 * Overridden because SortedSets don't allow null elements (normally).

 * @return false

 */

@Override public boolean isNullSupported(){

  return false;

}

Location: AbstractSortedSetTest.java

Content: 

/** 

 * Returns an empty  {@link TreeSet} for use in modification testing.

 * @return a confirmed empty collection

 */

@Override public SortedSet<E> makeConfirmedCollection(){

  return new TreeSet<>();

}

Location: AbstractSortedSetTest.java

Content: 

/** 

 * Verification extension, will check the order of elements, the sets should already be verified equal.

 */

@Override public void verify(){

  super.verify();

  final Iterator<E> colliter=getCollection().iterator();

  final Iterator<E> confiter=getConfirmed().iterator();

  E first=null;

  E last=null;

  while (colliter.hasNext()) {

    if (first == null) {

      first=colliter.next();

      last=first;

    }

 else {

      last=colliter.next();

    }

    assertEquals("Element appears to be out of order.",last,confiter.next());

  }

  if (!getCollection().isEmpty()) {

    assertEquals("Incorrect element returned by first().",first,getCollection().first());

    assertEquals("Incorrect element returned by last().",last,getCollection().last());

  }

}

Location: AbstractSortedSetTest.java

Content: 

/** 

 * JUnit constructor.

 * @param name  name for test

 */

public AbstractSortedSetTest(final String name){

  super(name);

}

Location: AbstractSortedSetTest.java

Content: 

/** 

 * Bulk test  {@link SortedSet#headSet(Object)}.  This method runs through all of the tests in  {@link AbstractSortedSetTest}. After modification operations,  {@link #verify()} is invoked to ensurethat the set and the other collection views are still valid.

 * @return a {@link AbstractSetTest} instance for testing a headset.

 */

public BulkTest bulkTestSortedSetHeadSet(){

  final int length=getFullElements().length;

  final int lobound=length / 3;

  final int hibound=lobound * 2;

  return new TestSortedSetSubSet(hibound,true);

}

Location: AbstractSortedSetTest.java

Content: 

/** 

 * Bulk test  {@link SortedSet#subSet(Object,Object)}.  This method runs through all of the tests in  {@link AbstractSortedSetTest}. After modification operations,  {@link #verify()} is invoked to ensurethat the set and the other collection views are still valid.

 * @return a {@link AbstractSetTest} instance for testing a subset.

 */

public BulkTest bulkTestSortedSetSubSet(){

  final int length=getFullElements().length;

  final int lobound=length / 3;

  final int hibound=lobound * 2;

  return new TestSortedSetSubSet(lobound,hibound);

}

Location: AbstractSortedSetTest.java

Content: 

/** 

 * Bulk test  {@link SortedSet#tailSet(Object)}.  This method runs through all of the tests in  {@link AbstractSortedSetTest}. After modification operations,  {@link #verify()} is invoked to ensurethat the set and the other collection views are still valid.

 * @return a {@link AbstractSetTest} instance for testing a tailset.

 */

public BulkTest bulkTestSortedSetTailSet(){

  final int length=getFullElements().length;

  final int lobound=length / 3;

  return new TestSortedSetSubSet(lobound,false);

}

Location: AbstractSortedSetTest.java

Content: 

/** 

 * {@inheritDoc}

 */

@Override public SortedSet<E> getCollection(){

  return (SortedSet<E>)super.getCollection();

}

Location: AbstractSortedSetTest.java

Content: 

/** 

 * {@inheritDoc}

 */

@Override public SortedSet<E> getConfirmed(){

  return (SortedSet<E>)super.getConfirmed();

}

Location: AbstractSortedSetTest.java

Content: 

/** 

 * Override to return comparable objects.

 */

@Override @SuppressWarnings("unchecked") public E[] getFullNonNullElements(){

  final Object[] elements=new Object[30];

  for (int i=0; i < 30; i++) {

    elements[i]=Integer.valueOf(i + i + 1);

  }

  return (E[])elements;

}

Location: AbstractSortedSetTest.java

Content: 

/** 

 * Override to return comparable objects.

 */

@Override @SuppressWarnings("unchecked") public E[] getOtherNonNullElements(){

  final Object[] elements=new Object[30];

  for (int i=0; i < 30; i++) {

    elements[i]=Integer.valueOf(i + i + 2);

  }

  return (E[])elements;

}

Location: AbstractSortedSetTest.java

Content: 

/** 

 * Overridden because SortedSets don't allow null elements (normally).

 * @return false

 */

@Override public boolean isNullSupported(){

  return false;

}

Location: AbstractSortedSetTest.java

Content: 

/** 

 * Returns an empty  {@link TreeSet} for use in modification testing.

 * @return a confirmed empty collection

 */

@Override public SortedSet<E> makeConfirmedCollection(){

  return new TreeSet<>();

}

Location: AbstractSortedSetTest.java

Content: 

/** 

 * Verification extension, will check the order of elements, the sets should already be verified equal.

 */

@Override public void verify(){

  super.verify();

  final Iterator<E> colliter=getCollection().iterator();

  final Iterator<E> confiter=getConfirmed().iterator();

  E first=null;

  E last=null;

  while (colliter.hasNext()) {

    if (first == null) {

      first=colliter.next();

      last=first;

    }

 else {

      last=colliter.next();

    }

    assertEquals("Element appears to be out of order.",last,confiter.next());

  }

  if (!getCollection().isEmpty()) {

    assertEquals("Incorrect element returned by first().",first,getCollection().first());

    assertEquals("Incorrect element returned by last().",last,getCollection().last());

  }

}

