Location: FluentIterable.java

Content: 

/** 

 * Checks if all elements contained in this iterable are matching the provided predicate. <p> A  {@code null} or empty iterable returns true.

 * @param predicate  the predicate to use, may not be null

 * @return true if all elements contained in this iterable match the predicate,false otherwise

 * @throws NullPointerException if predicate is null

 */

public boolean allMatch(final Predicate<? super E> predicate){

  return IterableUtils.matchesAll(iterable,predicate);

}

Location: FluentIterable.java

Content: 

/** 

 * Checks if this iterable contains any element matching the provided predicate. <p> A  {@code null} or empty iterable returns false.

 * @param predicate  the predicate to use, may not be null

 * @return true if at least one element contained in this iterable matches the predicate,false otherwise

 * @throws NullPointerException if predicate is null

 */

public boolean anyMatch(final Predicate<? super E> predicate){

  return IterableUtils.matchesAny(iterable,predicate);

}

Location: FluentIterable.java

Content: 

/** 

 * Returns a new FluentIterable whose iterator will first traverse the elements of the current iterable, followed by the provided elements.

 * @param elements  the elements to append to the iterable

 * @return a new iterable, combining this iterable with the elements

 */

public FluentIterable<E> append(final E... elements){

  return append(Arrays.asList(elements));

}

Location: FluentIterable.java

Content: 

/** 

 * Returns a new FluentIterable whose iterator will first traverse the elements of the current iterable, followed by the elements of the provided iterable.

 * @param other  the other iterable to combine, may not be null

 * @return a new iterable, combining this iterable with other

 * @throws NullPointerException if other is null

 */

public FluentIterable<E> append(final Iterable<? extends E> other){

  return of(IterableUtils.chainedIterable(iterable,other));

}

Location: FluentIterable.java

Content: 

/** 

 * Returns a new FluentIterable whose iterator will traverse the elements of the current and provided iterable in natural order. <p> Example: natural ordering <ul> <li>this contains elements [1, 3, 5, 7] <li>other contains elements [2, 4, 6, 8] </ul> <p> The returned iterable will traverse the elements in the following order: [1, 2, 3, 4, 5, 6, 7, 8]

 * @param other  the other iterable to collate, may not be null

 * @return a new iterable, collating this iterable with the other in natural order

 * @throws NullPointerException if other is null

 * @see org.apache.commons.collections4.iterators.CollatingIterator

 */

public FluentIterable<E> collate(final Iterable<? extends E> other){

  return of(IterableUtils.collatedIterable(iterable,other));

}

Location: FluentIterable.java

Content: 

/** 

 * Returns a new FluentIterable whose iterator will traverse the elements of the current and provided iterable according to the ordering defined by an comparator. <p> Example: descending order <ul> <li>this contains elements [7, 5, 3, 1] <li>other contains elements [8, 6, 4, 2] </ul> <p> The returned iterable will traverse the elements in the following order: [8, 7, 6, 5, 4, 3, 2, 1]

 * @param comparator  the comparator to define an ordering, may be null,in which case natural ordering will be used

 * @param other  the other iterable to collate, may not be null

 * @return a new iterable, collating this iterable with the other in natural order

 * @throws NullPointerException if other is null

 * @see org.apache.commons.collections4.iterators.CollatingIterator

 */

public FluentIterable<E> collate(final Iterable<? extends E> other,final Comparator<? super E> comparator){

  return of(IterableUtils.collatedIterable(comparator,iterable,other));

}

Location: FluentIterable.java

Content: 

/** 

 * Traverses an iterator of this iterable and adds all elements to the provided collection.

 * @param collection  the collection to add the elements

 * @throws NullPointerException if collection is null

 */

public void copyInto(final Collection<? super E> collection){

  Objects.requireNonNull(collection,"collection");

  CollectionUtils.addAll(collection,iterable);

}

Location: FluentIterable.java

Content: 

/** 

 * Returns a new FluentIterable whose iterator will only return elements from this iterable matching the provided predicate.

 * @param predicate  the predicate used to filter elements

 * @return a new iterable, providing a filtered view of this iterable

 * @throws NullPointerException if predicate is null

 */

public FluentIterable<E> filter(final Predicate<? super E> predicate){

  return of(IterableUtils.filteredIterable(iterable,predicate));

}

Location: FluentIterable.java

Content: 

/** 

 * Don't allow instances.

 */

FluentIterable(){

  this.iterable=this;

}

Location: FluentIterable.java

Content: 

/** 

 * Create a new FluentIterable by wrapping the provided iterable.

 * @param iterable  the iterable to wrap

 */

private FluentIterable(final Iterable<E> iterable){

  this.iterable=iterable;

}

Location: FluentIterable.java

Content: 

/** 

 * Applies the closure to all elements contained in this iterable.

 * @param closure  the closure to apply to each element, may not be null

 * @throws NullPointerException if closure is null

 */

public void forEach(final Closure<? super E> closure){

  IterableUtils.forEach(iterable,closure);

}

Location: FluentIterable.java

Content: 

/** 

 * Returns a new FluentIterable whose iterator will return at most the provided maximum number of elements from this iterable.

 * @param maxSize  the maximum number of elements

 * @return a new iterable, providing a bounded view of this iterable

 * @throws IllegalArgumentException if maxSize is negative

 */

public FluentIterable<E> limit(final long maxSize){

  return of(IterableUtils.boundedIterable(iterable,maxSize));

}

Location: FluentIterable.java

Content: 

/** 

 * Returns a new FluentIterable whose iterator will loop infinitely over the elements from this iterable.

 * @return a new iterable, providing a looping view of this iterable

 */

public FluentIterable<E> loop(){

  return of(IterableUtils.loopingIterable(iterable));

}

Location: FluentIterable.java

Content: 

/** 

 * Construct a new FluentIterable from the provided iterable. If the iterable is already an instance of FluentIterable, the instance will be returned instead. <p> The returned iterable's iterator supports  {@code remove()} when thecorresponding input iterator supports it.

 * @param < T >  the element type

 * @param iterable  the iterable to wrap into a FluentIterable, may not be null

 * @return a new FluentIterable wrapping the provided iterable

 * @throws NullPointerException if iterable is null

 */

public static <T>FluentIterable<T> of(final Iterable<T> iterable){

  IterableUtils.checkNotNull(iterable);

  if (iterable instanceof FluentIterable<?>) {

    return (FluentIterable<T>)iterable;

  }

  return new FluentIterable<>(iterable);

}

Location: FluentIterable.java

Content: 

/** 

 * Creates a new FluentIterable from the provided elements. <p> The returned iterable's iterator does not support  {@code remove()}.

 * @param < T >  the element type

 * @param elements  the elements to be contained in the FluentIterable

 * @return a new FluentIterable containing the provided elements

 */

public static <T>FluentIterable<T> of(final T... elements){

  return of(Arrays.asList(elements));

}

Location: FluentIterable.java

Content: 

/** 

 * Returns a new FluentIterable whose iterator will skip the first N elements from this iterable.

 * @param elementsToSkip  the number of elements to skip

 * @return a new iterable, providing a view of this iterable by skippingthe first N elements

 * @throws IllegalArgumentException if elementsToSkip is negative

 */

public FluentIterable<E> skip(final long elementsToSkip){

  return of(IterableUtils.skippingIterable(iterable,elementsToSkip));

}

Location: FluentIterable.java

Content: 

/** 

 * Returns an array containing all elements of this iterable by traversing its iterator.

 * @param arrayClass  the class of array to create

 * @return an array of the iterable contents

 * @throws ArrayStoreException if arrayClass is invalid

 */

public E[] toArray(final Class<E> arrayClass){

  return IteratorUtils.toArray(iterator(),arrayClass);

}

Location: FluentIterable.java

Content: 

/** 

 * Returns a mutable list containing all elements of this iterable by traversing its iterator. <p> The returned list is guaranteed to be mutable.

 * @return a list of the iterable contents

 */

public List<E> toList(){

  return IterableUtils.toList(iterable);

}

Location: FluentIterable.java

Content: 

/** 

 * Returns a new FluentIterable whose iterator will return all elements of this iterable transformed by the provided transformer.

 * @param < O >  the output element type

 * @param transformer  the transformer applied to each element

 * @return a new iterable, providing a transformed view of this iterable

 * @throws NullPointerException if transformer is null

 */

public <O>FluentIterable<O> transform(final Transformer<? super E,? extends O> transformer){

  return of(IterableUtils.transformedIterable(iterable,transformer));

}

Location: FluentIterable.java

Content: 

/** 

 * Returns a new FluentIterable whose iterator will traverse the elements of this iterable and the other iterables in alternating order.

 * @param others  the iterables to interleave, may not be null

 * @return a new iterable, interleaving this iterable with others

 * @throws NullPointerException if either of the provided iterables is null

 */

public FluentIterable<E> zip(final Iterable<? extends E>... others){

  return of(IterableUtils.zippingIterable(iterable,others));

}

Location: FluentIterable.java

Content: 

/** 

 * Checks if all elements contained in this iterable are matching the provided predicate. <p> A  {@code null} or empty iterable returns true.

 * @param predicate  the predicate to use, may not be null

 * @return true if all elements contained in this iterable match the predicate,false otherwise

 * @throws NullPointerException if predicate is null

 */

public boolean allMatch(final Predicate<? super E> predicate){

  return IterableUtils.matchesAll(iterable,predicate);

}

Location: FluentIterable.java

Content: 

/** 

 * Checks if this iterable contains any element matching the provided predicate. <p> A  {@code null} or empty iterable returns false.

 * @param predicate  the predicate to use, may not be null

 * @return true if at least one element contained in this iterable matches the predicate,false otherwise

 * @throws NullPointerException if predicate is null

 */

public boolean anyMatch(final Predicate<? super E> predicate){

  return IterableUtils.matchesAny(iterable,predicate);

}

Location: FluentIterable.java

Content: 

/** 

 * Returns a new FluentIterable whose iterator will first traverse the elements of the current iterable, followed by the provided elements.

 * @param elements  the elements to append to the iterable

 * @return a new iterable, combining this iterable with the elements

 */

public FluentIterable<E> append(final E... elements){

  return append(Arrays.asList(elements));

}

Location: FluentIterable.java

Content: 

/** 

 * Returns a new FluentIterable whose iterator will first traverse the elements of the current iterable, followed by the elements of the provided iterable.

 * @param other  the other iterable to combine, may not be null

 * @return a new iterable, combining this iterable with other

 * @throws NullPointerException if other is null

 */

public FluentIterable<E> append(final Iterable<? extends E> other){

  return of(IterableUtils.chainedIterable(iterable,other));

}

Location: FluentIterable.java

Content: 

/** 

 * Returns a new FluentIterable whose iterator will traverse the elements of the current and provided iterable in natural order. <p> Example: natural ordering <ul> <li>this contains elements [1, 3, 5, 7] <li>other contains elements [2, 4, 6, 8] </ul> <p> The returned iterable will traverse the elements in the following order: [1, 2, 3, 4, 5, 6, 7, 8]

 * @param other  the other iterable to collate, may not be null

 * @return a new iterable, collating this iterable with the other in natural order

 * @throws NullPointerException if other is null

 * @see org.apache.commons.collections4.iterators.CollatingIterator

 */

public FluentIterable<E> collate(final Iterable<? extends E> other){

  return of(IterableUtils.collatedIterable(iterable,other));

}

Location: FluentIterable.java

Content: 

/** 

 * Returns a new FluentIterable whose iterator will traverse the elements of the current and provided iterable according to the ordering defined by an comparator. <p> Example: descending order <ul> <li>this contains elements [7, 5, 3, 1] <li>other contains elements [8, 6, 4, 2] </ul> <p> The returned iterable will traverse the elements in the following order: [8, 7, 6, 5, 4, 3, 2, 1]

 * @param comparator  the comparator to define an ordering, may be null,in which case natural ordering will be used

 * @param other  the other iterable to collate, may not be null

 * @return a new iterable, collating this iterable with the other in natural order

 * @throws NullPointerException if other is null

 * @see org.apache.commons.collections4.iterators.CollatingIterator

 */

public FluentIterable<E> collate(final Iterable<? extends E> other,final Comparator<? super E> comparator){

  return of(IterableUtils.collatedIterable(comparator,iterable,other));

}

Location: FluentIterable.java

Content: 

/** 

 * Traverses an iterator of this iterable and adds all elements to the provided collection.

 * @param collection  the collection to add the elements

 * @throws NullPointerException if collection is null

 */

public void copyInto(final Collection<? super E> collection){

  Objects.requireNonNull(collection,"collection");

  CollectionUtils.addAll(collection,iterable);

}

Location: FluentIterable.java

Content: 

/** 

 * Returns a new FluentIterable whose iterator will only return elements from this iterable matching the provided predicate.

 * @param predicate  the predicate used to filter elements

 * @return a new iterable, providing a filtered view of this iterable

 * @throws NullPointerException if predicate is null

 */

public FluentIterable<E> filter(final Predicate<? super E> predicate){

  return of(IterableUtils.filteredIterable(iterable,predicate));

}

Location: FluentIterable.java

Content: 

/** 

 * Don't allow instances.

 */

FluentIterable(){

  this.iterable=this;

}

Location: FluentIterable.java

Content: 

/** 

 * Create a new FluentIterable by wrapping the provided iterable.

 * @param iterable  the iterable to wrap

 */

private FluentIterable(final Iterable<E> iterable){

  this.iterable=iterable;

}

Location: FluentIterable.java

Content: 

/** 

 * Applies the closure to all elements contained in this iterable.

 * @param closure  the closure to apply to each element, may not be null

 * @throws NullPointerException if closure is null

 */

public void forEach(final Closure<? super E> closure){

  IterableUtils.forEach(iterable,closure);

}

Location: FluentIterable.java

Content: 

/** 

 * Returns a new FluentIterable whose iterator will return at most the provided maximum number of elements from this iterable.

 * @param maxSize  the maximum number of elements

 * @return a new iterable, providing a bounded view of this iterable

 * @throws IllegalArgumentException if maxSize is negative

 */

public FluentIterable<E> limit(final long maxSize){

  return of(IterableUtils.boundedIterable(iterable,maxSize));

}

Location: FluentIterable.java

Content: 

/** 

 * Returns a new FluentIterable whose iterator will loop infinitely over the elements from this iterable.

 * @return a new iterable, providing a looping view of this iterable

 */

public FluentIterable<E> loop(){

  return of(IterableUtils.loopingIterable(iterable));

}

Location: FluentIterable.java

Content: 

/** 

 * Construct a new FluentIterable from the provided iterable. If the iterable is already an instance of FluentIterable, the instance will be returned instead. <p> The returned iterable's iterator supports  {@code remove()} when thecorresponding input iterator supports it.

 * @param < T >  the element type

 * @param iterable  the iterable to wrap into a FluentIterable, may not be null

 * @return a new FluentIterable wrapping the provided iterable

 * @throws NullPointerException if iterable is null

 */

public static <T>FluentIterable<T> of(final Iterable<T> iterable){

  IterableUtils.checkNotNull(iterable);

  if (iterable instanceof FluentIterable<?>) {

    return (FluentIterable<T>)iterable;

  }

  return new FluentIterable<>(iterable);

}

Location: FluentIterable.java

Content: 

/** 

 * Creates a new FluentIterable from the provided elements. <p> The returned iterable's iterator does not support  {@code remove()}.

 * @param < T >  the element type

 * @param elements  the elements to be contained in the FluentIterable

 * @return a new FluentIterable containing the provided elements

 */

public static <T>FluentIterable<T> of(final T... elements){

  return of(Arrays.asList(elements));

}

Location: FluentIterable.java

Content: 

/** 

 * Returns a new FluentIterable whose iterator will skip the first N elements from this iterable.

 * @param elementsToSkip  the number of elements to skip

 * @return a new iterable, providing a view of this iterable by skippingthe first N elements

 * @throws IllegalArgumentException if elementsToSkip is negative

 */

public FluentIterable<E> skip(final long elementsToSkip){

  return of(IterableUtils.skippingIterable(iterable,elementsToSkip));

}

Location: FluentIterable.java

Content: 

/** 

 * Returns an array containing all elements of this iterable by traversing its iterator.

 * @param arrayClass  the class of array to create

 * @return an array of the iterable contents

 * @throws ArrayStoreException if arrayClass is invalid

 */

public E[] toArray(final Class<E> arrayClass){

  return IteratorUtils.toArray(iterator(),arrayClass);

}

Location: FluentIterable.java

Content: 

/** 

 * Returns a mutable list containing all elements of this iterable by traversing its iterator. <p> The returned list is guaranteed to be mutable.

 * @return a list of the iterable contents

 */

public List<E> toList(){

  return IterableUtils.toList(iterable);

}

Location: FluentIterable.java

Content: 

/** 

 * Returns a new FluentIterable whose iterator will return all elements of this iterable transformed by the provided transformer.

 * @param < O >  the output element type

 * @param transformer  the transformer applied to each element

 * @return a new iterable, providing a transformed view of this iterable

 * @throws NullPointerException if transformer is null

 */

public <O>FluentIterable<O> transform(final Transformer<? super E,? extends O> transformer){

  return of(IterableUtils.transformedIterable(iterable,transformer));

}

Location: FluentIterable.java

Content: 

/** 

 * Returns a new FluentIterable whose iterator will traverse the elements of this iterable and the other iterables in alternating order.

 * @param others  the iterables to interleave, may not be null

 * @return a new iterable, interleaving this iterable with others

 * @throws NullPointerException if either of the provided iterables is null

 */

public FluentIterable<E> zip(final Iterable<? extends E>... others){

  return of(IterableUtils.zippingIterable(iterable,others));

}

