Location: MapBackedSet.java

Content: 

/** 

 * Factory method to create a set from a map.

 * @param < E > the element type

 * @param < V > the dummy value type in the map

 * @param map  the map to decorate, must not be null

 * @return a new map backed set

 * @throws NullPointerException if map is null

 * @since 4.0

 */

public static <E,V>MapBackedSet<E,V> mapBackedSet(final Map<E,? super V> map){

  return mapBackedSet(map,null);

}

Location: MapBackedSet.java

Content: 

/** 

 * Constructor that wraps (not copies).

 * @param map  the map to decorate, must not be null

 * @param dummyValue  the dummy value to use

 * @throws NullPointerException if map is null

 */

private MapBackedSet(final Map<E,? super V> map,final V dummyValue){

  this.map=Objects.requireNonNull(map,"map");

  this.dummyValue=dummyValue;

}

Location: MapBackedSet.java

Content: 

/** 

 * Factory method to create a set from a map.

 * @param < E > the element type

 * @param < V > the dummy value type in the map

 * @param map  the map to decorate, must not be null

 * @return a new map backed set

 * @throws NullPointerException if map is null

 * @since 4.0

 */

public static <E,V>MapBackedSet<E,V> mapBackedSet(final Map<E,? super V> map){

  return mapBackedSet(map,null);

}

Location: MapBackedSet.java

Content: 

/** 

 * Constructor that wraps (not copies).

 * @param map  the map to decorate, must not be null

 * @param dummyValue  the dummy value to use

 * @throws NullPointerException if map is null

 */

private MapBackedSet(final Map<E,? super V> map,final V dummyValue){

  this.map=Objects.requireNonNull(map,"map");

  this.dummyValue=dummyValue;

}

