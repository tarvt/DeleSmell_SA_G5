Location: ReverseListIterator.java

Content: 

/** 

 * Checks whether there is a previous element.

 * @return true if there is a previous element

 */

@Override public boolean hasPrevious(){

  return iterator.hasNext();

}

Location: ReverseListIterator.java

Content: 

/** 

 * Gets the index of the next element.

 * @return the index of the next element in the iterator

 */

@Override public int nextIndex(){

  return iterator.previousIndex();

}

Location: ReverseListIterator.java

Content: 

/** 

 * Gets the previous element. The next element is the previous in the list.

 * @return the previous element in the iterator

 */

@Override public E previous(){

  final E obj=iterator.next();

  validForUpdate=true;

  return obj;

}

Location: ReverseListIterator.java

Content: 

/** 

 * Gets the index of the previous element.

 * @return the index of the previous element in the iterator

 */

@Override public int previousIndex(){

  return iterator.nextIndex();

}

Location: ReverseListIterator.java

Content: 

/** 

 * Constructor that wraps a list.

 * @param list  the list to create a reversed iterator for

 * @throws NullPointerException if the list is null

 */

public ReverseListIterator(final List<E> list){

  this.list=Objects.requireNonNull(list,"list");

  iterator=list.listIterator(list.size());

}

Location: ReverseListIterator.java

Content: 

/** 

 * Replaces the last returned element.

 * @param obj  the object to set

 * @throws UnsupportedOperationException if the list is unmodifiable

 * @throws IllegalStateException if the iterator is not in a valid state for set

 */

@Override public void set(final E obj){

  if (!validForUpdate) {

    throw new IllegalStateException("Cannot set to list until next() or previous() called");

  }

  iterator.set(obj);

}

Location: ReverseListIterator.java

Content: 

/** 

 * Checks whether there is a previous element.

 * @return true if there is a previous element

 */

@Override public boolean hasPrevious(){

  return iterator.hasNext();

}

Location: ReverseListIterator.java

Content: 

/** 

 * Gets the index of the next element.

 * @return the index of the next element in the iterator

 */

@Override public int nextIndex(){

  return iterator.previousIndex();

}

Location: ReverseListIterator.java

Content: 

/** 

 * Gets the previous element. The next element is the previous in the list.

 * @return the previous element in the iterator

 */

@Override public E previous(){

  final E obj=iterator.next();

  validForUpdate=true;

  return obj;

}

Location: ReverseListIterator.java

Content: 

/** 

 * Gets the index of the previous element.

 * @return the index of the previous element in the iterator

 */

@Override public int previousIndex(){

  return iterator.nextIndex();

}

Location: ReverseListIterator.java

Content: 

/** 

 * Constructor that wraps a list.

 * @param list  the list to create a reversed iterator for

 * @throws NullPointerException if the list is null

 */

public ReverseListIterator(final List<E> list){

  this.list=Objects.requireNonNull(list,"list");

  iterator=list.listIterator(list.size());

}

Location: ReverseListIterator.java

Content: 

/** 

 * Replaces the last returned element.

 * @param obj  the object to set

 * @throws UnsupportedOperationException if the list is unmodifiable

 * @throws IllegalStateException if the iterator is not in a valid state for set

 */

@Override public void set(final E obj){

  if (!validForUpdate) {

    throw new IllegalStateException("Cannot set to list until next() or previous() called");

  }

  iterator.set(obj);

}

