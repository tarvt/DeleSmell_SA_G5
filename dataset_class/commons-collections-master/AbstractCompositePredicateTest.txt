Location: AbstractCompositePredicateTest.java

Content: 

/** 

 * Creates a new  {@code TestCompositePredicate}.

 * @param testValue the value which the mock predicates should expect to see (may be null).

 */

protected AbstractCompositePredicateTest(final T testValue){

  super(testValue);

}

Location: AbstractCompositePredicateTest.java

Content: 

/** 

 * Creates an instance of the predicate to test.

 * @param mockReturnValues the return values for the mock predicates, or null if that mock is not expectedto be called

 * @return a predicate to test.

 */

protected final Predicate<T> getPredicateInstance(final Boolean... mockReturnValues){

  final List<Predicate<T>> predicates=new ArrayList<>();

  for (  final Boolean returnValue : mockReturnValues) {

    predicates.add(createMockPredicate(returnValue));

  }

  return getPredicateInstance(predicates);

}

Location: AbstractCompositePredicateTest.java

Content: 

/** 

 * Tests  {@code getInstance} with a null predicate array.

 */

@Test public final void nullArrayToGetInstance(){

  assertThrows(NullPointerException.class,() -> getPredicateInstance((Predicate<T>[])null));

}

Location: AbstractCompositePredicateTest.java

Content: 

/** 

 * Tests  {@code getInstance} with a null predicate collection

 */

@Test public final void nullCollectionToGetInstance(){

  assertThrows(NullPointerException.class,() -> getPredicateInstance((Collection<Predicate<T>>)null));

}

Location: AbstractCompositePredicateTest.java

Content: 

/** 

 * Tests  {@code getInstance} with a single null element in the predicate array.

 */

@SuppressWarnings({"unchecked"}) @Test public final void nullElementInArrayToGetInstance(){

  assertThrows(NullPointerException.class,() -> getPredicateInstance(new Predicate[]{null}));

}

Location: AbstractCompositePredicateTest.java

Content: 

/** 

 * Tests  {@code getInstance} with two null elements in the predicate array.

 */

@SuppressWarnings({"unchecked"}) @Test public final void nullElementsInArrayToGetInstance(){

  assertThrows(NullPointerException.class,() -> getPredicateInstance(new Predicate[]{null,null}));

}

Location: AbstractCompositePredicateTest.java

Content: 

/** 

 * Tests  {@code getInstance} with a predicate collection that contains null elements

 */

@Test public final void nullElementsInCollectionToGetInstance(){

  final Collection<Predicate<T>> coll=new ArrayList<>();

  coll.add(null);

  coll.add(null);

  assertThrows(NullPointerException.class,() -> getPredicateInstance(coll));

}

Location: AbstractCompositePredicateTest.java

Content: 

/** 

 * Tests whether  {@code getInstance} with a one element array returns the first element in the array.

 */

@SuppressWarnings("unchecked") public void singleElementArrayToGetInstance(){

  final Predicate<T> predicate=createMockPredicate(null);

  final Predicate<T> allPredicate=getPredicateInstance(predicate);

  Assert.assertSame("expected argument to be returned by getInstance()",predicate,allPredicate);

}

Location: AbstractCompositePredicateTest.java

Content: 

/** 

 * Tests that passing a singleton collection to  {@code getInstance} returns the single element in thecollection.

 */

public void singletonCollectionToGetInstance(){

  final Predicate<T> predicate=createMockPredicate(null);

  final Predicate<T> allPredicate=getPredicateInstance(Collections.<Predicate<T>>singleton(predicate));

  Assert.assertSame("expected argument to be returned by getInstance()",predicate,allPredicate);

}

Location: AbstractCompositePredicateTest.java

Content: 

/** 

 * Creates a new  {@code TestCompositePredicate}.

 * @param testValue the value which the mock predicates should expect to see (may be null).

 */

protected AbstractCompositePredicateTest(final T testValue){

  super(testValue);

}

Location: AbstractCompositePredicateTest.java

Content: 

/** 

 * Creates an instance of the predicate to test.

 * @param mockReturnValues the return values for the mock predicates, or null if that mock is not expectedto be called

 * @return a predicate to test.

 */

protected final Predicate<T> getPredicateInstance(final Boolean... mockReturnValues){

  final List<Predicate<T>> predicates=new ArrayList<>();

  for (  final Boolean returnValue : mockReturnValues) {

    predicates.add(createMockPredicate(returnValue));

  }

  return getPredicateInstance(predicates);

}

Location: AbstractCompositePredicateTest.java

Content: 

/** 

 * Tests  {@code getInstance} with a null predicate array.

 */

@Test public final void nullArrayToGetInstance(){

  assertThrows(NullPointerException.class,() -> getPredicateInstance((Predicate<T>[])null));

}

Location: AbstractCompositePredicateTest.java

Content: 

/** 

 * Tests  {@code getInstance} with a null predicate collection

 */

@Test public final void nullCollectionToGetInstance(){

  assertThrows(NullPointerException.class,() -> getPredicateInstance((Collection<Predicate<T>>)null));

}

Location: AbstractCompositePredicateTest.java

Content: 

/** 

 * Tests  {@code getInstance} with a single null element in the predicate array.

 */

@SuppressWarnings({"unchecked"}) @Test public final void nullElementInArrayToGetInstance(){

  assertThrows(NullPointerException.class,() -> getPredicateInstance(new Predicate[]{null}));

}

Location: AbstractCompositePredicateTest.java

Content: 

/** 

 * Tests  {@code getInstance} with two null elements in the predicate array.

 */

@SuppressWarnings({"unchecked"}) @Test public final void nullElementsInArrayToGetInstance(){

  assertThrows(NullPointerException.class,() -> getPredicateInstance(new Predicate[]{null,null}));

}

Location: AbstractCompositePredicateTest.java

Content: 

/** 

 * Tests  {@code getInstance} with a predicate collection that contains null elements

 */

@Test public final void nullElementsInCollectionToGetInstance(){

  final Collection<Predicate<T>> coll=new ArrayList<>();

  coll.add(null);

  coll.add(null);

  assertThrows(NullPointerException.class,() -> getPredicateInstance(coll));

}

Location: AbstractCompositePredicateTest.java

Content: 

/** 

 * Tests whether  {@code getInstance} with a one element array returns the first element in the array.

 */

@SuppressWarnings("unchecked") public void singleElementArrayToGetInstance(){

  final Predicate<T> predicate=createMockPredicate(null);

  final Predicate<T> allPredicate=getPredicateInstance(predicate);

  Assert.assertSame("expected argument to be returned by getInstance()",predicate,allPredicate);

}

Location: AbstractCompositePredicateTest.java

Content: 

/** 

 * Tests that passing a singleton collection to  {@code getInstance} returns the single element in thecollection.

 */

public void singletonCollectionToGetInstance(){

  final Predicate<T> predicate=createMockPredicate(null);

  final Predicate<T> allPredicate=getPredicateInstance(Collections.<Predicate<T>>singleton(predicate));

  Assert.assertSame("expected argument to be returned by getInstance()",predicate,allPredicate);

}

