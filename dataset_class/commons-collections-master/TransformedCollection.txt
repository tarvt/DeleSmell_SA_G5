Location: TransformedCollection.java

Content: 

/** 

 * Constructor that wraps (not copies). <p> If there are any elements already in the collection being decorated, they are NOT transformed.

 * @param collection  the collection to decorate, must not be null

 * @param transformer  the transformer to use for conversion, must not be null

 * @throws NullPointerException if collection or transformer is null

 */

protected TransformedCollection(final Collection<E> collection,final Transformer<? super E,? extends E> transformer){

  super(collection);

  this.transformer=Objects.requireNonNull(transformer,"transformer");

}

Location: TransformedCollection.java

Content: 

/** 

 * Factory method to create a transforming collection. <p> If there are any elements already in the collection being decorated, they are NOT transformed. Contrast this with  {@link #transformedCollection(Collection,Transformer)}.

 * @param < E > the type of the elements in the collection

 * @param coll  the collection to decorate, must not be null

 * @param transformer  the transformer to use for conversion, must not be null

 * @return a new transformed collection

 * @throws NullPointerException if collection or transformer is null

 * @since 4.0

 */

public static <E>TransformedCollection<E> transformingCollection(final Collection<E> coll,final Transformer<? super E,? extends E> transformer){

  return new TransformedCollection<>(coll,transformer);

}

Location: TransformedCollection.java

Content: 

/** 

 * Transforms a collection. <p> The transformer itself may throw an exception if necessary.

 * @param coll  the collection to transform

 * @return a transformed object

 */

protected Collection<E> transform(final Collection<? extends E> coll){

  final List<E> list=new ArrayList<>(coll.size());

  for (  final E item : coll) {

    list.add(transform(item));

  }

  return list;

}

Location: TransformedCollection.java

Content: 

/** 

 * Transforms an object. <p> The transformer itself may throw an exception if necessary.

 * @param object  the object to transform

 * @return a transformed object

 */

protected E transform(final E object){

  return transformer.transform(object);

}

Location: TransformedCollection.java

Content: 

/** 

 * Constructor that wraps (not copies). <p> If there are any elements already in the collection being decorated, they are NOT transformed.

 * @param collection  the collection to decorate, must not be null

 * @param transformer  the transformer to use for conversion, must not be null

 * @throws NullPointerException if collection or transformer is null

 */

protected TransformedCollection(final Collection<E> collection,final Transformer<? super E,? extends E> transformer){

  super(collection);

  this.transformer=Objects.requireNonNull(transformer,"transformer");

}

Location: TransformedCollection.java

Content: 

/** 

 * Factory method to create a transforming collection. <p> If there are any elements already in the collection being decorated, they are NOT transformed. Contrast this with  {@link #transformedCollection(Collection,Transformer)}.

 * @param < E > the type of the elements in the collection

 * @param coll  the collection to decorate, must not be null

 * @param transformer  the transformer to use for conversion, must not be null

 * @return a new transformed collection

 * @throws NullPointerException if collection or transformer is null

 * @since 4.0

 */

public static <E>TransformedCollection<E> transformingCollection(final Collection<E> coll,final Transformer<? super E,? extends E> transformer){

  return new TransformedCollection<>(coll,transformer);

}

Location: TransformedCollection.java

Content: 

/** 

 * Transforms a collection. <p> The transformer itself may throw an exception if necessary.

 * @param coll  the collection to transform

 * @return a transformed object

 */

protected Collection<E> transform(final Collection<? extends E> coll){

  final List<E> list=new ArrayList<>(coll.size());

  for (  final E item : coll) {

    list.add(transform(item));

  }

  return list;

}

Location: TransformedCollection.java

Content: 

/** 

 * Transforms an object. <p> The transformer itself may throw an exception if necessary.

 * @param object  the object to transform

 * @return a transformed object

 */

protected E transform(final E object){

  return transformer.transform(object);

}

