Location: AbstractMockPredicateTest.java

Content: 

/** 

 * Creates a new  {@code PredicateTestBase}.

 * @param testValue the value to pass to mock predicates.

 */

protected AbstractMockPredicateTest(final T testValue){

  this.testValue=testValue;

}

Location: AbstractMockPredicateTest.java

Content: 

/** 

 * Creates a single mock predicate.

 * @param returnValue the return value for the mock predicate, or null if the mock is not expected to be called.

 * @return a single mock predicate.

 */

@SuppressWarnings({"boxing"}) protected final Predicate<T> createMockPredicate(final Boolean returnValue){

  final Predicate<T> mockPredicate=EasyMock.createMock(Predicate.class);

  if (returnValue != null) {

    EasyMock.expect(mockPredicate.evaluate(testValue)).andReturn(returnValue);

  }

  replay(mockPredicate);

  mockPredicatesToVerify.add(mockPredicate);

  return mockPredicate;

}

Location: AbstractMockPredicateTest.java

Content: 

/** 

 * Creates the list of predicates to verify.

 */

@BeforeEach public final void createVerifyList(){

  mockPredicatesToVerify=new ArrayList<>();

}

Location: AbstractMockPredicateTest.java

Content: 

/** 

 * Gets the value which will be passed to the mock predicates.

 * @return the test value.

 */

protected final T getTestValue(){

  return testValue;

}

Location: AbstractMockPredicateTest.java

Content: 

/** 

 * Verifies all the mock predicates created for the test.

 */

@AfterEach public final void verifyPredicates(){

  for (  final Predicate<? super T> predicate : mockPredicatesToVerify) {

    verify(predicate);

  }

}

Location: AbstractMockPredicateTest.java

Content: 

/** 

 * Creates a new  {@code PredicateTestBase}.

 * @param testValue the value to pass to mock predicates.

 */

protected AbstractMockPredicateTest(final T testValue){

  this.testValue=testValue;

}

Location: AbstractMockPredicateTest.java

Content: 

/** 

 * Creates a single mock predicate.

 * @param returnValue the return value for the mock predicate, or null if the mock is not expected to be called.

 * @return a single mock predicate.

 */

@SuppressWarnings({"boxing"}) protected final Predicate<T> createMockPredicate(final Boolean returnValue){

  final Predicate<T> mockPredicate=EasyMock.createMock(Predicate.class);

  if (returnValue != null) {

    EasyMock.expect(mockPredicate.evaluate(testValue)).andReturn(returnValue);

  }

  replay(mockPredicate);

  mockPredicatesToVerify.add(mockPredicate);

  return mockPredicate;

}

Location: AbstractMockPredicateTest.java

Content: 

/** 

 * Creates the list of predicates to verify.

 */

@BeforeEach public final void createVerifyList(){

  mockPredicatesToVerify=new ArrayList<>();

}

Location: AbstractMockPredicateTest.java

Content: 

/** 

 * Gets the value which will be passed to the mock predicates.

 * @return the test value.

 */

protected final T getTestValue(){

  return testValue;

}

Location: AbstractMockPredicateTest.java

Content: 

/** 

 * Verifies all the mock predicates created for the test.

 */

@AfterEach public final void verifyPredicates(){

  for (  final Predicate<? super T> predicate : mockPredicatesToVerify) {

    verify(predicate);

  }

}

