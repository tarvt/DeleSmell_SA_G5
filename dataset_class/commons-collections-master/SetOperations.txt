Location: SetOperations.java

Content: 

/** 

 * Calculates the Cosine distance between two Bloom filters. <p>Cosine distance is defined as  {@code 1 - Cosine similarity}</p>

 * @param first the first Bloom filter.

 * @param second the second Bloom filter.

 * @return the jaccard distance.

 */

public static double cosineDistance(final BloomFilter first,final BloomFilter second){

  return 1.0 - cosineSimilarity(first,second);

}

Location: SetOperations.java

Content: 

/** 

 * Calculates the Cosine similarity between two Bloom filters. <p> Also known as Orchini similarity and the Tucker coefficient of congruence or Ochiai similarity.</p> <p>If either filter is empty (no enabled bits) the result is 0 (zero)</p>

 * @param first the first Bloom filter.

 * @param second the second Bloom filter.

 * @return the Cosine similarity.

 */

public static double cosineSimilarity(final BloomFilter first,final BloomFilter second){

  verifyShape(first,second);

  final int numerator=first.andCardinality(second);

  return numerator == 0 ? 0 : numerator / (Math.sqrt(first.cardinality()) * Math.sqrt(second.cardinality()));

}

Location: SetOperations.java

Content: 

/** 

 * Estimates the number of items in the intersection of the sets represented by two Bloom filters.

 * @param first the first Bloom filter.

 * @param second the second Bloom filter.

 * @return an estimate of the size of the intersection between the two filters.

 */

public static long estimateIntersectionSize(final BloomFilter first,final BloomFilter second){

  verifyShape(first,second);

  return estimateSize(first) - estimateUnionSize(first,second) + estimateSize(second);

}

Location: SetOperations.java

Content: 

/** 

 * Estimates the number of items in the Bloom filter based on the shape and the number of bits that are enabled.

 * @param filter the Bloom filter to estimate size for.

 * @return an estimate of the number of items that were placed in the Bloom filter.

 */

public static long estimateSize(final BloomFilter filter){

  final Shape shape=filter.getShape();

  final double estimate=-(shape.getNumberOfBits() * Math.log(1.0 - filter.cardinality() * 1.0 / shape.getNumberOfBits())) / shape.getNumberOfHashFunctions();

  return Math.round(estimate);

}

Location: SetOperations.java

Content: 

/** 

 * Estimates the number of items in the union of the sets represented by two Bloom filters.

 * @param first the first Bloom filter.

 * @param second the second Bloom filter.

 * @return an estimate of the size of the union between the two filters.

 */

public static long estimateUnionSize(final BloomFilter first,final BloomFilter second){

  verifyShape(first,second);

  final Shape shape=first.getShape();

  final double estimate=-(shape.getNumberOfBits() * Math.log(1.0 - first.orCardinality(second) * 1.0 / shape.getNumberOfBits())) / shape.getNumberOfHashFunctions();

  return Math.round(estimate);

}

Location: SetOperations.java

Content: 

/** 

 * Calculates the Hamming distance between two Bloom filters.

 * @param first the first Bloom filter.

 * @param second the second Bloom filter.

 * @return the Hamming distance.

 */

public static int hammingDistance(final BloomFilter first,final BloomFilter second){

  verifyShape(first,second);

  return first.xorCardinality(second);

}

Location: SetOperations.java

Content: 

/** 

 * Calculates the Jaccard distance between two Bloom filters. <p>Jaccard distance is defined as  {@code 1 - Jaccard similarity}</p>

 * @param first the first Bloom filter.

 * @param second the second Bloom filter.

 * @return the Jaccard distance.

 */

public static double jaccardDistance(final BloomFilter first,final BloomFilter second){

  return 1.0 - jaccardSimilarity(first,second);

}

Location: SetOperations.java

Content: 

/** 

 * Calculates the Jaccard similarity between two Bloom filters. <p>Also known as Jaccard index, Intersection over Union, and Jaccard similarity coefficient</p>

 * @param first the first Bloom filter.

 * @param second the second Bloom filter.

 * @return the Jaccard similarity.

 */

public static double jaccardSimilarity(final BloomFilter first,final BloomFilter second){

  verifyShape(first,second);

  final int orCard=first.orCardinality(second);

  return orCard == 0 ? 0 : hammingDistance(first,second) / (double)orCard;

}

Location: SetOperations.java

Content: 

/** 

 * Do not instantiate.

 */

private SetOperations(){

}

Location: SetOperations.java

Content: 

/** 

 * Verifies the Bloom filters have the same shape.

 * @param first the first filter to check.

 * @param second the second filter to check.

 * @throws IllegalArgumentException if the shapes are not the same.

 */

private static void verifyShape(final BloomFilter first,final BloomFilter second){

  if (!first.getShape().equals(second.getShape())) {

    throw new IllegalArgumentException(String.format("Shape %s is not the same as %s",first.getShape(),second.getShape()));

  }

}

Location: SetOperations.java

Content: 

/** 

 * Calculates the Cosine distance between two Bloom filters. <p>Cosine distance is defined as  {@code 1 - Cosine similarity}</p>

 * @param first the first Bloom filter.

 * @param second the second Bloom filter.

 * @return the jaccard distance.

 */

public static double cosineDistance(final BloomFilter first,final BloomFilter second){

  return 1.0 - cosineSimilarity(first,second);

}

Location: SetOperations.java

Content: 

/** 

 * Calculates the Cosine similarity between two Bloom filters. <p> Also known as Orchini similarity and the Tucker coefficient of congruence or Ochiai similarity.</p> <p>If either filter is empty (no enabled bits) the result is 0 (zero)</p>

 * @param first the first Bloom filter.

 * @param second the second Bloom filter.

 * @return the Cosine similarity.

 */

public static double cosineSimilarity(final BloomFilter first,final BloomFilter second){

  verifyShape(first,second);

  final int numerator=first.andCardinality(second);

  return numerator == 0 ? 0 : numerator / (Math.sqrt(first.cardinality()) * Math.sqrt(second.cardinality()));

}

Location: SetOperations.java

Content: 

/** 

 * Estimates the number of items in the intersection of the sets represented by two Bloom filters.

 * @param first the first Bloom filter.

 * @param second the second Bloom filter.

 * @return an estimate of the size of the intersection between the two filters.

 */

public static long estimateIntersectionSize(final BloomFilter first,final BloomFilter second){

  verifyShape(first,second);

  return estimateSize(first) - estimateUnionSize(first,second) + estimateSize(second);

}

Location: SetOperations.java

Content: 

/** 

 * Estimates the number of items in the Bloom filter based on the shape and the number of bits that are enabled.

 * @param filter the Bloom filter to estimate size for.

 * @return an estimate of the number of items that were placed in the Bloom filter.

 */

public static long estimateSize(final BloomFilter filter){

  final Shape shape=filter.getShape();

  final double estimate=-(shape.getNumberOfBits() * Math.log(1.0 - filter.cardinality() * 1.0 / shape.getNumberOfBits())) / shape.getNumberOfHashFunctions();

  return Math.round(estimate);

}

Location: SetOperations.java

Content: 

/** 

 * Estimates the number of items in the union of the sets represented by two Bloom filters.

 * @param first the first Bloom filter.

 * @param second the second Bloom filter.

 * @return an estimate of the size of the union between the two filters.

 */

public static long estimateUnionSize(final BloomFilter first,final BloomFilter second){

  verifyShape(first,second);

  final Shape shape=first.getShape();

  final double estimate=-(shape.getNumberOfBits() * Math.log(1.0 - first.orCardinality(second) * 1.0 / shape.getNumberOfBits())) / shape.getNumberOfHashFunctions();

  return Math.round(estimate);

}

Location: SetOperations.java

Content: 

/** 

 * Calculates the Hamming distance between two Bloom filters.

 * @param first the first Bloom filter.

 * @param second the second Bloom filter.

 * @return the Hamming distance.

 */

public static int hammingDistance(final BloomFilter first,final BloomFilter second){

  verifyShape(first,second);

  return first.xorCardinality(second);

}

Location: SetOperations.java

Content: 

/** 

 * Calculates the Jaccard distance between two Bloom filters. <p>Jaccard distance is defined as  {@code 1 - Jaccard similarity}</p>

 * @param first the first Bloom filter.

 * @param second the second Bloom filter.

 * @return the Jaccard distance.

 */

public static double jaccardDistance(final BloomFilter first,final BloomFilter second){

  return 1.0 - jaccardSimilarity(first,second);

}

Location: SetOperations.java

Content: 

/** 

 * Calculates the Jaccard similarity between two Bloom filters. <p>Also known as Jaccard index, Intersection over Union, and Jaccard similarity coefficient</p>

 * @param first the first Bloom filter.

 * @param second the second Bloom filter.

 * @return the Jaccard similarity.

 */

public static double jaccardSimilarity(final BloomFilter first,final BloomFilter second){

  verifyShape(first,second);

  final int orCard=first.orCardinality(second);

  return orCard == 0 ? 0 : hammingDistance(first,second) / (double)orCard;

}

Location: SetOperations.java

Content: 

/** 

 * Do not instantiate.

 */

private SetOperations(){

}

Location: SetOperations.java

Content: 

/** 

 * Verifies the Bloom filters have the same shape.

 * @param first the first filter to check.

 * @param second the second filter to check.

 * @throws IllegalArgumentException if the shapes are not the same.

 */

private static void verifyShape(final BloomFilter first,final BloomFilter second){

  if (!first.getShape().equals(second.getShape())) {

    throw new IllegalArgumentException(String.format("Shape %s is not the same as %s",first.getShape(),second.getShape()));

  }

}

