Location: StaticHasher.java

Content: 

/** 

 * Gets the shape this static hasher was created with.

 * @return the Shape of this hasher.

 */

public Shape getShape(){

  return shape;

}

Location: StaticHasher.java

Content: 

/** 

 * Constructs the StaticHasher from a Hasher and a Shape.

 * @param hasher the Hasher to read.

 * @param shape the Shape for the resulting values.

 * @throws IllegalArgumentException if the hasher function and the shape function are not the same.

 */

public StaticHasher(final Hasher hasher,final Shape shape){

  this(hasher.iterator(shape),shape);

  HashFunctionValidator.checkAreEqual(hasher.getHashFunctionIdentity(),shape.getHashFunctionIdentity());

}

Location: StaticHasher.java

Content: 

/** 

 * Constructs a StaticHasher from an Iterator of Integers and a Shape.

 * @param iter the Iterator of Integers.

 * @param shape the Shape that the integers were generated for.

 * @throws IllegalArgumentException if any Integer is outside the range [0,shape.getNumberOfBits())

 */

public StaticHasher(final Iterator<Integer> iter,final Shape shape){

  this.shape=shape;

  final Set<Integer> workingValues=new TreeSet<>();

  iter.forEachRemaining(idx -> {

    if (idx >= this.shape.getNumberOfBits()) {

      throw new IllegalArgumentException(String.format("Bit index (%s) is too big for %s",idx,shape));

    }

    if (idx < 0) {

      throw new IllegalArgumentException(String.format("Bit index (%s) may not be less than zero",idx));

    }

    workingValues.add(idx);

  }

);

  this.values=new int[workingValues.size()];

  int i=0;

  for (  final Integer value : workingValues) {

    values[i++]=value.intValue();

  }

}

Location: StaticHasher.java

Content: 

/** 

 * Constructs the StaticHasher from a StaticHasher and a Shape.

 * @param hasher the StaticHasher to read.

 * @param shape the Shape for the resulting values.

 * @throws IllegalArgumentException if the shape of the hasher and the shape parameter are not the same.

 */

public StaticHasher(final StaticHasher hasher,final Shape shape){

  if (!hasher.shape.equals(shape)) {

    throw new IllegalArgumentException(String.format("Hasher shape (%s) is not the same as shape (%s)",hasher.getShape().toString(),shape.toString()));

  }

  this.shape=shape;

  this.values=hasher.values;

}

Location: StaticHasher.java

Content: 

/** 

 * Gets the shape this static hasher was created with.

 * @return the Shape of this hasher.

 */

public Shape getShape(){

  return shape;

}

Location: StaticHasher.java

Content: 

/** 

 * Constructs the StaticHasher from a Hasher and a Shape.

 * @param hasher the Hasher to read.

 * @param shape the Shape for the resulting values.

 * @throws IllegalArgumentException if the hasher function and the shape function are not the same.

 */

public StaticHasher(final Hasher hasher,final Shape shape){

  this(hasher.iterator(shape),shape);

  HashFunctionValidator.checkAreEqual(hasher.getHashFunctionIdentity(),shape.getHashFunctionIdentity());

}

Location: StaticHasher.java

Content: 

/** 

 * Constructs a StaticHasher from an Iterator of Integers and a Shape.

 * @param iter the Iterator of Integers.

 * @param shape the Shape that the integers were generated for.

 * @throws IllegalArgumentException if any Integer is outside the range [0,shape.getNumberOfBits())

 */

public StaticHasher(final Iterator<Integer> iter,final Shape shape){

  this.shape=shape;

  final Set<Integer> workingValues=new TreeSet<>();

  iter.forEachRemaining(idx -> {

    if (idx >= this.shape.getNumberOfBits()) {

      throw new IllegalArgumentException(String.format("Bit index (%s) is too big for %s",idx,shape));

    }

    if (idx < 0) {

      throw new IllegalArgumentException(String.format("Bit index (%s) may not be less than zero",idx));

    }

    workingValues.add(idx);

  }

);

  this.values=new int[workingValues.size()];

  int i=0;

  for (  final Integer value : workingValues) {

    values[i++]=value.intValue();

  }

}

Location: StaticHasher.java

Content: 

/** 

 * Constructs the StaticHasher from a StaticHasher and a Shape.

 * @param hasher the StaticHasher to read.

 * @param shape the Shape for the resulting values.

 * @throws IllegalArgumentException if the shape of the hasher and the shape parameter are not the same.

 */

public StaticHasher(final StaticHasher hasher,final Shape shape){

  if (!hasher.shape.equals(shape)) {

    throw new IllegalArgumentException(String.format("Hasher shape (%s) is not the same as shape (%s)",hasher.getShape().toString(),shape.toString()));

  }

  this.shape=shape;

  this.values=hasher.values;

}

