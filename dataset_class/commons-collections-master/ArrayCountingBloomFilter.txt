Location: ArrayCountingBloomFilter.java

Content: 

@Override public boolean add(final CountingBloomFilter other){

  applyAsCountingBloomFilter(other,this::add);

  return isValid();

}

Location: ArrayCountingBloomFilter.java

Content: 

/** 

 * Add to the count for the bit index.

 * @param idx the index

 * @param addend the amount to add

 */

private void add(final int idx,final int addend){

  final int updated=counts[idx] + addend;

  state|=updated;

  counts[idx]=updated;

}

Location: ArrayCountingBloomFilter.java

Content: 

/** 

 * Apply the action for each index in the Bloom filter.

 */

private void applyAsBloomFilter(final BloomFilter other,final IntConsumer action){

  verifyShape(other);

  if (other instanceof ArrayCountingBloomFilter) {

    final int[] counts2=((ArrayCountingBloomFilter)other).counts;

    for (int i=0; i < counts2.length; i++) {

      if (counts2[i] != 0) {

        action.accept(i);

      }

    }

  }

 else {

    BitSet.valueOf(other.getBits()).stream().forEach(action);

  }

}

Location: ArrayCountingBloomFilter.java

Content: 

/** 

 * Apply the action for each index in the Bloom filter.

 */

private void applyAsCountingBloomFilter(final CountingBloomFilter other,final BitCountConsumer action){

  verifyShape(other);

  other.forEachCount(action);

}

Location: ArrayCountingBloomFilter.java

Content: 

/** 

 * Apply the action for each index in the hasher.

 */

private void applyAsHasher(final Hasher hasher,final IntConsumer action){

  verifyHasher(hasher);

  IndexFilters.distinctIndexes(hasher,getShape(),action);

}

Location: ArrayCountingBloomFilter.java

Content: 

/** 

 * Constructs an empty counting Bloom filter with the specified shape.

 * @param shape the shape of the filter

 */

public ArrayCountingBloomFilter(final Shape shape){

  super(shape);

  counts=new int[shape.getNumberOfBits()];

}

Location: ArrayCountingBloomFilter.java

Content: 

/** 

 * Return true if this filter is has non-zero counts for each index in the iterator.

 * @param iter the iterator

 * @return true if this filter contains all the indexes

 */

private boolean contains(final OfInt iter){

  while (iter.hasNext()) {

    if (counts[iter.nextInt()] == 0) {

      return false;

    }

  }

  return true;

}

Location: ArrayCountingBloomFilter.java

Content: 

@Override public void forEachCount(final BitCountConsumer action){

  for (int i=0; i < counts.length; i++) {

    if (counts[i] != 0) {

      action.accept(i,counts[i]);

    }

  }

}

Location: ArrayCountingBloomFilter.java

Content: 

/** 

 * {@inheritDoc}<p><em>Implementation note</em> <p>The state transition to invalid is permanent. <p>This implementation does not correct negative counts to zero or integer overflow counts to  {@link Integer#MAX_VALUE}. Thus the operation that generated invalid counts can be reversed by using the complement of the original operation with the same Bloom filter. This will restore the counts to the state prior to the invalid operation. Counts can then be extracted using  {@link #forEachCount(BitCountConsumer)}.

 */

@Override public boolean isValid(){

  return state >= 0;

}

Location: ArrayCountingBloomFilter.java

Content: 

@Override public boolean remove(final BloomFilter other){

  applyAsBloomFilter(other,this::decrement);

  return isValid();

}

Location: ArrayCountingBloomFilter.java

Content: 

@Override public boolean remove(final Hasher hasher){

  applyAsHasher(hasher,this::decrement);

  return isValid();

}

Location: ArrayCountingBloomFilter.java

Content: 

@Override public boolean subtract(final CountingBloomFilter other){

  applyAsCountingBloomFilter(other,this::subtract);

  return isValid();

}

Location: ArrayCountingBloomFilter.java

Content: 

/** 

 * Subtract from the count for the bit index.

 * @param idx the index

 * @param subtrahend the amount to subtract

 */

private void subtract(final int idx,final int subtrahend){

  final int updated=counts[idx] - subtrahend;

  state|=updated;

  counts[idx]=updated;

}

Location: ArrayCountingBloomFilter.java

Content: 

@Override public boolean add(final CountingBloomFilter other){

  applyAsCountingBloomFilter(other,this::add);

  return isValid();

}

Location: ArrayCountingBloomFilter.java

Content: 

/** 

 * Add to the count for the bit index.

 * @param idx the index

 * @param addend the amount to add

 */

private void add(final int idx,final int addend){

  final int updated=counts[idx] + addend;

  state|=updated;

  counts[idx]=updated;

}

Location: ArrayCountingBloomFilter.java

Content: 

/** 

 * Apply the action for each index in the Bloom filter.

 */

private void applyAsBloomFilter(final BloomFilter other,final IntConsumer action){

  verifyShape(other);

  if (other instanceof ArrayCountingBloomFilter) {

    final int[] counts2=((ArrayCountingBloomFilter)other).counts;

    for (int i=0; i < counts2.length; i++) {

      if (counts2[i] != 0) {

        action.accept(i);

      }

    }

  }

 else {

    BitSet.valueOf(other.getBits()).stream().forEach(action);

  }

}

Location: ArrayCountingBloomFilter.java

Content: 

/** 

 * Apply the action for each index in the Bloom filter.

 */

private void applyAsCountingBloomFilter(final CountingBloomFilter other,final BitCountConsumer action){

  verifyShape(other);

  other.forEachCount(action);

}

Location: ArrayCountingBloomFilter.java

Content: 

/** 

 * Apply the action for each index in the hasher.

 */

private void applyAsHasher(final Hasher hasher,final IntConsumer action){

  verifyHasher(hasher);

  IndexFilters.distinctIndexes(hasher,getShape(),action);

}

Location: ArrayCountingBloomFilter.java

Content: 

/** 

 * Constructs an empty counting Bloom filter with the specified shape.

 * @param shape the shape of the filter

 */

public ArrayCountingBloomFilter(final Shape shape){

  super(shape);

  counts=new int[shape.getNumberOfBits()];

}

Location: ArrayCountingBloomFilter.java

Content: 

/** 

 * Return true if this filter is has non-zero counts for each index in the iterator.

 * @param iter the iterator

 * @return true if this filter contains all the indexes

 */

private boolean contains(final OfInt iter){

  while (iter.hasNext()) {

    if (counts[iter.nextInt()] == 0) {

      return false;

    }

  }

  return true;

}

Location: ArrayCountingBloomFilter.java

Content: 

@Override public void forEachCount(final BitCountConsumer action){

  for (int i=0; i < counts.length; i++) {

    if (counts[i] != 0) {

      action.accept(i,counts[i]);

    }

  }

}

Location: ArrayCountingBloomFilter.java

Content: 

/** 

 * {@inheritDoc}<p><em>Implementation note</em> <p>The state transition to invalid is permanent. <p>This implementation does not correct negative counts to zero or integer overflow counts to  {@link Integer#MAX_VALUE}. Thus the operation that generated invalid counts can be reversed by using the complement of the original operation with the same Bloom filter. This will restore the counts to the state prior to the invalid operation. Counts can then be extracted using  {@link #forEachCount(BitCountConsumer)}.

 */

@Override public boolean isValid(){

  return state >= 0;

}

Location: ArrayCountingBloomFilter.java

Content: 

@Override public boolean remove(final BloomFilter other){

  applyAsBloomFilter(other,this::decrement);

  return isValid();

}

Location: ArrayCountingBloomFilter.java

Content: 

@Override public boolean remove(final Hasher hasher){

  applyAsHasher(hasher,this::decrement);

  return isValid();

}

Location: ArrayCountingBloomFilter.java

Content: 

@Override public boolean subtract(final CountingBloomFilter other){

  applyAsCountingBloomFilter(other,this::subtract);

  return isValid();

}

Location: ArrayCountingBloomFilter.java

Content: 

/** 

 * Subtract from the count for the bit index.

 * @param idx the index

 * @param subtrahend the amount to subtract

 */

private void subtract(final int idx,final int subtrahend){

  final int updated=counts[idx] - subtrahend;

  state|=updated;

  counts[idx]=updated;

}

