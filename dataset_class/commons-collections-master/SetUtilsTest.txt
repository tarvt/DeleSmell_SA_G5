Location: SetUtilsTest.java

Content: 

@Test public void difference(){

  final SetView<Integer> set=SetUtils.difference(setA,setB);

  assertEquals(2,set.size());

  assertTrue(set.contains(1));

  assertTrue(set.contains(2));

  for (  final Integer i : setB) {

    assertFalse(set.contains(i));

  }

  final Set<Integer> set2=SetUtils.difference(setA,SetUtils.<Integer>emptySet());

  assertEquals(setA,set2);

  try {

    SetUtils.difference(setA,null);

    fail("Expecting NullPointerException");

  }

 catch (  final NullPointerException npe) {

  }

  try {

    SetUtils.difference(null,setA);

    fail("Expecting NullPointerException");

  }

 catch (  final NullPointerException npe) {

  }

}

Location: SetUtilsTest.java

Content: 

@Test public void disjunction(){

  final SetView<Integer> set=SetUtils.disjunction(setA,setB);

  assertEquals(4,set.size());

  assertTrue(set.contains(1));

  assertTrue(set.contains(2));

  assertTrue(set.contains(6));

  assertTrue(set.contains(7));

  assertFalse(set.contains(3));

  assertFalse(set.contains(4));

  assertFalse(set.contains(5));

  final Set<Integer> set2=SetUtils.disjunction(setA,SetUtils.<Integer>emptySet());

  assertEquals(setA,set2);

  try {

    SetUtils.disjunction(setA,null);

    fail("Expecting NullPointerException");

  }

 catch (  final NullPointerException npe) {

  }

  try {

    SetUtils.disjunction(null,setA);

    fail("Expecting NullPointerException");

  }

 catch (  final NullPointerException npe) {

  }

}

Location: SetUtilsTest.java

Content: 

@Test public void intersection(){

  final SetView<Integer> set=SetUtils.intersection(setA,setB);

  assertEquals(3,set.size());

  assertTrue(set.contains(3));

  assertTrue(set.contains(4));

  assertTrue(set.contains(5));

  assertFalse(set.contains(1));

  assertFalse(set.contains(2));

  assertFalse(set.contains(6));

  assertFalse(set.contains(7));

  final Set<Integer> set2=SetUtils.intersection(setA,SetUtils.<Integer>emptySet());

  assertEquals(SetUtils.<Integer>emptySet(),set2);

  try {

    SetUtils.intersection(setA,null);

    fail("Expecting NullPointerException");

  }

 catch (  final NullPointerException npe) {

  }

  try {

    SetUtils.intersection(null,setA);

    fail("Expecting NullPointerException");

  }

 catch (  final NullPointerException npe) {

  }

}

Location: SetUtilsTest.java

Content: 

@Test public void testNewIdentityHashSet(){

  final Set<String> set=SetUtils.newIdentityHashSet();

  final String a=new String("a");

  set.add(a);

  set.add(new String("b"));

  set.add(a);

  assertEquals(2,set.size());

  set.add(new String("a"));

  assertEquals(3,set.size());

  set.remove(a);

  assertEquals(2,set.size());

}

Location: SetUtilsTest.java

Content: 

@Test public void testpredicatedSet(){

  final Predicate<Object> predicate=o -> o instanceof String;

  final Set<Object> set=SetUtils.predicatedSet(new HashSet<>(),predicate);

  assertTrue(set instanceof PredicatedSet,"returned object should be a PredicatedSet");

  try {

    SetUtils.predicatedSet(new HashSet<>(),null);

    fail("Expecting NullPointerException for null predicate.");

  }

 catch (  final NullPointerException ex) {

  }

  try {

    SetUtils.predicatedSet(null,predicate);

    fail("Expecting NullPointerException for null set.");

  }

 catch (  final NullPointerException ex) {

  }

}

Location: SetUtilsTest.java

Content: 

@Test public void testUnmodifiableSet(){

  final Set<?> set1=SetUtils.unmodifiableSet();

  assertTrue(set1.isEmpty(),"set is empty");

  final Set<Integer> set2=SetUtils.unmodifiableSet(1,2,2,3);

  assertEquals(3,set2.size(),"set has 3 elements");

  assertTrue(set2.contains(1),"set contains 1");

  assertTrue(set2.contains(2),"set contains 2");

  assertTrue(set2.contains(3),"set contains 3");

  final Set<String> set3=SetUtils.unmodifiableSet("1","2","2","3");

  assertEquals(3,set3.size(),"set has 3 elements");

  assertTrue(set3.contains("1"),"set contains 1");

  assertTrue(set3.contains("2"),"set contains 2");

  assertTrue(set3.contains("3"),"set contains 3");

  final Set<?> set4=SetUtils.unmodifiableSet(null,null);

  assertEquals(1,set4.size(),"set has 1 element");

  assertTrue(set4.contains(null),"set contains null");

  final Set<?> set5=SetUtils.unmodifiableSet((Object[])null);

  assertNull(set5,"set is null");

}

Location: SetUtilsTest.java

Content: 

@Test public void testUnmodifiableSetWrap(){

  final Set<Integer> set1=SetUtils.unmodifiableSet(1,2,2,3);

  final Set<Integer> set2=SetUtils.unmodifiableSet(set1);

  assertSame(set1,set2);

}

Location: SetUtilsTest.java

Content: 

@Test public void union(){

  final SetView<Integer> set=SetUtils.union(setA,setB);

  assertEquals(7,set.size());

  assertTrue(set.containsAll(setA));

  assertTrue(set.containsAll(setB));

  final Set<Integer> set2=SetUtils.union(setA,SetUtils.<Integer>emptySet());

  assertEquals(setA,set2);

  try {

    SetUtils.union(setA,null);

    fail("Expecting NullPointerException");

  }

 catch (  final NullPointerException npe) {

  }

  try {

    SetUtils.union(null,setA);

    fail("Expecting NullPointerException");

  }

 catch (  final NullPointerException npe) {

  }

}

Location: SetUtilsTest.java

Content: 

@Test public void difference(){

  final SetView<Integer> set=SetUtils.difference(setA,setB);

  assertEquals(2,set.size());

  assertTrue(set.contains(1));

  assertTrue(set.contains(2));

  for (  final Integer i : setB) {

    assertFalse(set.contains(i));

  }

  final Set<Integer> set2=SetUtils.difference(setA,SetUtils.<Integer>emptySet());

  assertEquals(setA,set2);

  try {

    SetUtils.difference(setA,null);

    fail("Expecting NullPointerException");

  }

 catch (  final NullPointerException npe) {

  }

  try {

    SetUtils.difference(null,setA);

    fail("Expecting NullPointerException");

  }

 catch (  final NullPointerException npe) {

  }

}

Location: SetUtilsTest.java

Content: 

@Test public void disjunction(){

  final SetView<Integer> set=SetUtils.disjunction(setA,setB);

  assertEquals(4,set.size());

  assertTrue(set.contains(1));

  assertTrue(set.contains(2));

  assertTrue(set.contains(6));

  assertTrue(set.contains(7));

  assertFalse(set.contains(3));

  assertFalse(set.contains(4));

  assertFalse(set.contains(5));

  final Set<Integer> set2=SetUtils.disjunction(setA,SetUtils.<Integer>emptySet());

  assertEquals(setA,set2);

  try {

    SetUtils.disjunction(setA,null);

    fail("Expecting NullPointerException");

  }

 catch (  final NullPointerException npe) {

  }

  try {

    SetUtils.disjunction(null,setA);

    fail("Expecting NullPointerException");

  }

 catch (  final NullPointerException npe) {

  }

}

Location: SetUtilsTest.java

Content: 

@Test public void intersection(){

  final SetView<Integer> set=SetUtils.intersection(setA,setB);

  assertEquals(3,set.size());

  assertTrue(set.contains(3));

  assertTrue(set.contains(4));

  assertTrue(set.contains(5));

  assertFalse(set.contains(1));

  assertFalse(set.contains(2));

  assertFalse(set.contains(6));

  assertFalse(set.contains(7));

  final Set<Integer> set2=SetUtils.intersection(setA,SetUtils.<Integer>emptySet());

  assertEquals(SetUtils.<Integer>emptySet(),set2);

  try {

    SetUtils.intersection(setA,null);

    fail("Expecting NullPointerException");

  }

 catch (  final NullPointerException npe) {

  }

  try {

    SetUtils.intersection(null,setA);

    fail("Expecting NullPointerException");

  }

 catch (  final NullPointerException npe) {

  }

}

Location: SetUtilsTest.java

Content: 

@Test public void testNewIdentityHashSet(){

  final Set<String> set=SetUtils.newIdentityHashSet();

  final String a=new String("a");

  set.add(a);

  set.add(new String("b"));

  set.add(a);

  assertEquals(2,set.size());

  set.add(new String("a"));

  assertEquals(3,set.size());

  set.remove(a);

  assertEquals(2,set.size());

}

Location: SetUtilsTest.java

Content: 

@Test public void testpredicatedSet(){

  final Predicate<Object> predicate=o -> o instanceof String;

  final Set<Object> set=SetUtils.predicatedSet(new HashSet<>(),predicate);

  assertTrue(set instanceof PredicatedSet,"returned object should be a PredicatedSet");

  try {

    SetUtils.predicatedSet(new HashSet<>(),null);

    fail("Expecting NullPointerException for null predicate.");

  }

 catch (  final NullPointerException ex) {

  }

  try {

    SetUtils.predicatedSet(null,predicate);

    fail("Expecting NullPointerException for null set.");

  }

 catch (  final NullPointerException ex) {

  }

}

Location: SetUtilsTest.java

Content: 

@Test public void testUnmodifiableSet(){

  final Set<?> set1=SetUtils.unmodifiableSet();

  assertTrue(set1.isEmpty(),"set is empty");

  final Set<Integer> set2=SetUtils.unmodifiableSet(1,2,2,3);

  assertEquals(3,set2.size(),"set has 3 elements");

  assertTrue(set2.contains(1),"set contains 1");

  assertTrue(set2.contains(2),"set contains 2");

  assertTrue(set2.contains(3),"set contains 3");

  final Set<String> set3=SetUtils.unmodifiableSet("1","2","2","3");

  assertEquals(3,set3.size(),"set has 3 elements");

  assertTrue(set3.contains("1"),"set contains 1");

  assertTrue(set3.contains("2"),"set contains 2");

  assertTrue(set3.contains("3"),"set contains 3");

  final Set<?> set4=SetUtils.unmodifiableSet(null,null);

  assertEquals(1,set4.size(),"set has 1 element");

  assertTrue(set4.contains(null),"set contains null");

  final Set<?> set5=SetUtils.unmodifiableSet((Object[])null);

  assertNull(set5,"set is null");

}

Location: SetUtilsTest.java

Content: 

@Test public void testUnmodifiableSetWrap(){

  final Set<Integer> set1=SetUtils.unmodifiableSet(1,2,2,3);

  final Set<Integer> set2=SetUtils.unmodifiableSet(set1);

  assertSame(set1,set2);

}

Location: SetUtilsTest.java

Content: 

@Test public void union(){

  final SetView<Integer> set=SetUtils.union(setA,setB);

  assertEquals(7,set.size());

  assertTrue(set.containsAll(setA));

  assertTrue(set.containsAll(setB));

  final Set<Integer> set2=SetUtils.union(setA,SetUtils.<Integer>emptySet());

  assertEquals(setA,set2);

  try {

    SetUtils.union(setA,null);

    fail("Expecting NullPointerException");

  }

 catch (  final NullPointerException npe) {

  }

  try {

    SetUtils.union(null,setA);

    fail("Expecting NullPointerException");

  }

 catch (  final NullPointerException npe) {

  }

}

