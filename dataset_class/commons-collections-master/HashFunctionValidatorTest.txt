Location: HashFunctionValidatorTest.java

Content: 

/** 

 * Test the check method throws when the two hash functions are not equal.

 */

@Test public void testCheckThrows(){

  final HashFunctionIdentityImpl impl1=new HashFunctionIdentityImpl("Testing Suite","impl1",Signedness.SIGNED,ProcessType.CYCLIC,300L);

  final HashFunctionIdentityImpl impl2=new HashFunctionIdentityImpl("Testing Suite","impl1",Signedness.UNSIGNED,ProcessType.CYCLIC,300L);

  assertThrows(IllegalArgumentException.class,() -> HashFunctionValidator.checkAreEqual(impl1,impl2));

}

Location: HashFunctionValidatorTest.java

Content: 

/** 

 * Tests that name is used in the equality check.

 */

@Test public void testName(){

  final HashFunctionIdentityImpl impl1=new HashFunctionIdentityImpl("Testing Suite","impl1",Signedness.SIGNED,ProcessType.CYCLIC,300L);

  final HashFunctionIdentityImpl impl2=new HashFunctionIdentityImpl("Testing Suite","impl2",Signedness.SIGNED,ProcessType.CYCLIC,300L);

  assertTrue(HashFunctionValidator.areEqual(impl1,impl1));

  assertTrue(HashFunctionValidator.areEqual(impl2,impl2));

  assertFalse(HashFunctionValidator.areEqual(impl1,impl2));

  assertFalse(HashFunctionValidator.areEqual(impl2,impl1));

}

Location: HashFunctionValidatorTest.java

Content: 

/** 

 * Tests that name is not affected by case.

 */

@Test public void testNameIsCaseInsensitive(){

  final HashFunctionIdentityImpl impl1=new HashFunctionIdentityImpl("Testing Suite","impl1",Signedness.SIGNED,ProcessType.CYCLIC,300L);

  final HashFunctionIdentityImpl impl2=new HashFunctionIdentityImpl("Testing Suite","IMPL1",Signedness.SIGNED,ProcessType.CYCLIC,300L);

  assertTrue(HashFunctionValidator.areEqual(impl1,impl2));

}

Location: HashFunctionValidatorTest.java

Content: 

/** 

 * Tests that process type is used in the equality check.

 */

@Test public void testProcessType(){

  final HashFunctionIdentityImpl impl1=new HashFunctionIdentityImpl("Testing Suite","impl1",Signedness.SIGNED,ProcessType.CYCLIC,300L);

  final HashFunctionIdentityImpl impl2=new HashFunctionIdentityImpl("Testing Suite","impl1",Signedness.SIGNED,ProcessType.ITERATIVE,300L);

  assertTrue(HashFunctionValidator.areEqual(impl1,impl1));

  assertTrue(HashFunctionValidator.areEqual(impl2,impl2));

  assertFalse(HashFunctionValidator.areEqual(impl1,impl2));

  assertFalse(HashFunctionValidator.areEqual(impl2,impl1));

}

Location: HashFunctionValidatorTest.java

Content: 

/** 

 * Tests that provider is <strong>not</strong> used in the equality check.

 */

@Test public void testProviderIsNotUsedInEqualityCheck(){

  final HashFunctionIdentityImpl impl1=new HashFunctionIdentityImpl("Testing Suite","impl1",Signedness.SIGNED,ProcessType.CYCLIC,300L);

  final HashFunctionIdentityImpl impl2=new HashFunctionIdentityImpl("Testing Suite2","impl1",Signedness.SIGNED,ProcessType.CYCLIC,300L);

  assertTrue(HashFunctionValidator.areEqual(impl1,impl1));

  assertTrue(HashFunctionValidator.areEqual(impl2,impl2));

  assertTrue(HashFunctionValidator.areEqual(impl1,impl2));

  assertTrue(HashFunctionValidator.areEqual(impl2,impl1));

}

Location: HashFunctionValidatorTest.java

Content: 

/** 

 * Tests that signedness is used in the equality check.

 */

@Test public void testSignedness(){

  final HashFunctionIdentityImpl impl1=new HashFunctionIdentityImpl("Testing Suite","impl1",Signedness.SIGNED,ProcessType.CYCLIC,300L);

  final HashFunctionIdentityImpl impl2=new HashFunctionIdentityImpl("Testing Suite","impl1",Signedness.UNSIGNED,ProcessType.CYCLIC,300L);

  assertTrue(HashFunctionValidator.areEqual(impl1,impl1));

  assertTrue(HashFunctionValidator.areEqual(impl2,impl2));

  assertFalse(HashFunctionValidator.areEqual(impl1,impl2));

  assertFalse(HashFunctionValidator.areEqual(impl2,impl1));

}

Location: HashFunctionValidatorTest.java

Content: 

/** 

 * Test the check method throws when the two hash functions are not equal.

 */

@Test public void testCheckThrows(){

  final HashFunctionIdentityImpl impl1=new HashFunctionIdentityImpl("Testing Suite","impl1",Signedness.SIGNED,ProcessType.CYCLIC,300L);

  final HashFunctionIdentityImpl impl2=new HashFunctionIdentityImpl("Testing Suite","impl1",Signedness.UNSIGNED,ProcessType.CYCLIC,300L);

  assertThrows(IllegalArgumentException.class,() -> HashFunctionValidator.checkAreEqual(impl1,impl2));

}

Location: HashFunctionValidatorTest.java

Content: 

/** 

 * Tests that name is used in the equality check.

 */

@Test public void testName(){

  final HashFunctionIdentityImpl impl1=new HashFunctionIdentityImpl("Testing Suite","impl1",Signedness.SIGNED,ProcessType.CYCLIC,300L);

  final HashFunctionIdentityImpl impl2=new HashFunctionIdentityImpl("Testing Suite","impl2",Signedness.SIGNED,ProcessType.CYCLIC,300L);

  assertTrue(HashFunctionValidator.areEqual(impl1,impl1));

  assertTrue(HashFunctionValidator.areEqual(impl2,impl2));

  assertFalse(HashFunctionValidator.areEqual(impl1,impl2));

  assertFalse(HashFunctionValidator.areEqual(impl2,impl1));

}

Location: HashFunctionValidatorTest.java

Content: 

/** 

 * Tests that name is not affected by case.

 */

@Test public void testNameIsCaseInsensitive(){

  final HashFunctionIdentityImpl impl1=new HashFunctionIdentityImpl("Testing Suite","impl1",Signedness.SIGNED,ProcessType.CYCLIC,300L);

  final HashFunctionIdentityImpl impl2=new HashFunctionIdentityImpl("Testing Suite","IMPL1",Signedness.SIGNED,ProcessType.CYCLIC,300L);

  assertTrue(HashFunctionValidator.areEqual(impl1,impl2));

}

Location: HashFunctionValidatorTest.java

Content: 

/** 

 * Tests that process type is used in the equality check.

 */

@Test public void testProcessType(){

  final HashFunctionIdentityImpl impl1=new HashFunctionIdentityImpl("Testing Suite","impl1",Signedness.SIGNED,ProcessType.CYCLIC,300L);

  final HashFunctionIdentityImpl impl2=new HashFunctionIdentityImpl("Testing Suite","impl1",Signedness.SIGNED,ProcessType.ITERATIVE,300L);

  assertTrue(HashFunctionValidator.areEqual(impl1,impl1));

  assertTrue(HashFunctionValidator.areEqual(impl2,impl2));

  assertFalse(HashFunctionValidator.areEqual(impl1,impl2));

  assertFalse(HashFunctionValidator.areEqual(impl2,impl1));

}

Location: HashFunctionValidatorTest.java

Content: 

/** 

 * Tests that provider is <strong>not</strong> used in the equality check.

 */

@Test public void testProviderIsNotUsedInEqualityCheck(){

  final HashFunctionIdentityImpl impl1=new HashFunctionIdentityImpl("Testing Suite","impl1",Signedness.SIGNED,ProcessType.CYCLIC,300L);

  final HashFunctionIdentityImpl impl2=new HashFunctionIdentityImpl("Testing Suite2","impl1",Signedness.SIGNED,ProcessType.CYCLIC,300L);

  assertTrue(HashFunctionValidator.areEqual(impl1,impl1));

  assertTrue(HashFunctionValidator.areEqual(impl2,impl2));

  assertTrue(HashFunctionValidator.areEqual(impl1,impl2));

  assertTrue(HashFunctionValidator.areEqual(impl2,impl1));

}

Location: HashFunctionValidatorTest.java

Content: 

/** 

 * Tests that signedness is used in the equality check.

 */

@Test public void testSignedness(){

  final HashFunctionIdentityImpl impl1=new HashFunctionIdentityImpl("Testing Suite","impl1",Signedness.SIGNED,ProcessType.CYCLIC,300L);

  final HashFunctionIdentityImpl impl2=new HashFunctionIdentityImpl("Testing Suite","impl1",Signedness.UNSIGNED,ProcessType.CYCLIC,300L);

  assertTrue(HashFunctionValidator.areEqual(impl1,impl1));

  assertTrue(HashFunctionValidator.areEqual(impl2,impl2));

  assertFalse(HashFunctionValidator.areEqual(impl1,impl2));

  assertFalse(HashFunctionValidator.areEqual(impl2,impl1));

}

