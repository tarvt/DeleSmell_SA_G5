Location: IndexFilters.java

Content: 

/** 

 * Transfer all distinct indexes in the specified  {@code hasher} generated for thespecified  {@code shape} to the specified {@code consumer}. For example this can be used to merge a  {@link Hasher} representation of a Bloom filter into a{@link BloomFilter} instance that does not naturally handle duplicate indexes.<p>This method is functionally equivalent to: <pre> final Set&lt;Integer&gt; distinct = new TreeSet&lt;&gt;(); hasher.iterator(shape).forEachRemaining((Consumer&lt;Integer&gt;) i -&gt; { if (distinct.add(i)) { consumer.accept(i); } }); </pre>

 * @param hasher the hasher

 * @param shape the shape

 * @param consumer the consumer to receive distinct indexes

 * @throws NullPointerException if the hasher, shape or action are null

 * @see Hasher#iterator(Shape)

 */

static void distinctIndexes(final Hasher hasher,final Shape shape,final IntConsumer consumer){

  Objects.requireNonNull(hasher,"hasher");

  Objects.requireNonNull(shape,"shape");

  Objects.requireNonNull(consumer,"consumer");

  final Set<Integer> distinct=new TreeSet<>();

  hasher.iterator(shape).forEachRemaining((Consumer<Integer>)i -> {

    if (distinct.add(i)) {

      consumer.accept(i);

    }

  }

);

}

Location: IndexFilters.java

Content: 

/** 

 * Do not instantiate. 

 */

private IndexFilters(){

}

Location: IndexFilters.java

Content: 

/** 

 * Transfer all distinct indexes in the specified  {@code hasher} generated for thespecified  {@code shape} to the specified {@code consumer}. For example this can be used to merge a  {@link Hasher} representation of a Bloom filter into a{@link BloomFilter} instance that does not naturally handle duplicate indexes.<p>This method is functionally equivalent to: <pre> final Set&lt;Integer&gt; distinct = new TreeSet&lt;&gt;(); hasher.iterator(shape).forEachRemaining((Consumer&lt;Integer&gt;) i -&gt; { if (distinct.add(i)) { consumer.accept(i); } }); </pre>

 * @param hasher the hasher

 * @param shape the shape

 * @param consumer the consumer to receive distinct indexes

 * @throws NullPointerException if the hasher, shape or action are null

 * @see Hasher#iterator(Shape)

 */

static void distinctIndexes(final Hasher hasher,final Shape shape,final IntConsumer consumer){

  Objects.requireNonNull(hasher,"hasher");

  Objects.requireNonNull(shape,"shape");

  Objects.requireNonNull(consumer,"consumer");

  final Set<Integer> distinct=new TreeSet<>();

  hasher.iterator(shape).forEachRemaining((Consumer<Integer>)i -> {

    if (distinct.add(i)) {

      consumer.accept(i);

    }

  }

);

}

Location: IndexFilters.java

Content: 

/** 

 * Do not instantiate. 

 */

private IndexFilters(){

}

