Location: AbstractObjectTest.java

Content: 

/** 

 * JUnit constructor.

 * @param testName  the test class name

 */

public AbstractObjectTest(final String testName){

  super(testName);

}

Location: AbstractObjectTest.java

Content: 

protected String getCanonicalEmptyCollectionName(final Object object){

  final StringBuilder retval=new StringBuilder();

  retval.append(TEST_DATA_PATH);

  String colName=object.getClass().getName();

  colName=colName.substring(colName.lastIndexOf(".") + 1);

  retval.append(colName);

  retval.append(".emptyCollection.version");

  retval.append(getCompatibilityVersion());

  retval.append(".obj");

  return retval.toString();

}

Location: AbstractObjectTest.java

Content: 

protected String getCanonicalFullCollectionName(final Object object){

  final StringBuilder retval=new StringBuilder();

  retval.append(TEST_DATA_PATH);

  String colName=object.getClass().getName();

  colName=colName.substring(colName.lastIndexOf(".") + 1);

  retval.append(colName);

  retval.append(".fullCollection.version");

  retval.append(getCompatibilityVersion());

  retval.append(".obj");

  return retval.toString();

}

Location: AbstractObjectTest.java

Content: 

/** 

 * Read a Serialized or Externalized Object from bytes. Useful for verifying serialization in memory.

 * @param b byte array containing a serialized Object

 * @return Object contained in the bytes

 * @throws IOException

 * @throws ClassNotFoundException

 */

protected Object readExternalFormFromBytes(final byte[] b) throws IOException, ClassNotFoundException {

  final ByteArrayInputStream stream=new ByteArrayInputStream(b);

  return readExternalFormFromStream(stream);

}

Location: AbstractObjectTest.java

Content: 

/** 

 * Reads a Serialized or Externalized Object from disk. Useful for creating compatibility tests between different SCM versions of the same class

 * @param path path to the serialized Object

 * @return the Object at the given path

 * @throws IOException

 * @throws ClassNotFoundException

 */

protected Object readExternalFormFromDisk(final String path) throws IOException, ClassNotFoundException {

  try (FileInputStream stream=new FileInputStream(path)){

    return readExternalFormFromStream(stream);

  }

 }

Location: AbstractObjectTest.java

Content: 

private Object readExternalFormFromStream(final InputStream stream) throws IOException, ClassNotFoundException {

  final ObjectInputStream oStream=new ObjectInputStream(stream);

  return oStream.readObject();

}

Location: AbstractObjectTest.java

Content: 

protected Object serializeDeserialize(final Object obj) throws Exception {

  final ByteArrayOutputStream buffer=new ByteArrayOutputStream();

  final ObjectOutputStream out=new ObjectOutputStream(buffer);

  out.writeObject(obj);

  out.close();

  final ObjectInputStream in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));

  final Object dest=in.readObject();

  in.close();

  return dest;

}

Location: AbstractObjectTest.java

Content: 

public void testEqualsNull(){

  final Object obj=makeObject();

  assertFalse(obj.equals(null));

}

Location: AbstractObjectTest.java

Content: 

public void testObjectEqualsSelf(){

  final Object obj=makeObject();

  assertEquals("A Object should equal itself",obj,obj);

}

Location: AbstractObjectTest.java

Content: 

public void testObjectHashCodeEqualsContract(){

  final Object obj1=makeObject();

  if (obj1.equals(obj1)) {

    assertEquals("[1] When two objects are equal, their hashCodes should be also.",obj1.hashCode(),obj1.hashCode());

  }

  final Object obj2=makeObject();

  if (obj1.equals(obj2)) {

    assertEquals("[2] When two objects are equal, their hashCodes should be also.",obj1.hashCode(),obj2.hashCode());

    assertEquals("When obj1.equals(obj2) is true, then obj2.equals(obj1) should also be true",obj2,obj1);

  }

}

Location: AbstractObjectTest.java

Content: 

public void testObjectHashCodeEqualsSelfHashCode(){

  final Object obj=makeObject();

  assertEquals("hashCode should be repeatable",obj.hashCode(),obj.hashCode());

}

Location: AbstractObjectTest.java

Content: 

/** 

 * Converts a Serializable or Externalizable object to bytes.  Useful for in-memory tests of serialization

 * @param o Object to convert to bytes

 * @return serialized form of the Object

 * @throws IOException

 */

protected byte[] writeExternalFormToBytes(final Serializable o) throws IOException {

  final ByteArrayOutputStream byteStream=new ByteArrayOutputStream();

  writeExternalFormToStream(o,byteStream);

  return byteStream.toByteArray();

}

Location: AbstractObjectTest.java

Content: 

/** 

 * Writes a Serializable or Externalizable object as a file at the given path.  NOT USEFUL as part of a unit test; this is just a utility method for creating disk-based objects in SCM that can become the basis for compatibility tests using readExternalFormFromDisk(String path)

 * @param o Object to serialize

 * @param path path to write the serialized Object

 * @throws IOException

 */

protected void writeExternalFormToDisk(final Serializable o,final String path) throws IOException {

  try (FileOutputStream fileStream=new FileOutputStream(path)){

    writeExternalFormToStream(o,fileStream);

  }

 }

Location: AbstractObjectTest.java

Content: 

private void writeExternalFormToStream(final Serializable o,final OutputStream stream) throws IOException {

  final ObjectOutputStream oStream=new ObjectOutputStream(stream);

  oStream.writeObject(o);

}

Location: AbstractObjectTest.java

Content: 

/** 

 * JUnit constructor.

 * @param testName  the test class name

 */

public AbstractObjectTest(final String testName){

  super(testName);

}

Location: AbstractObjectTest.java

Content: 

protected String getCanonicalEmptyCollectionName(final Object object){

  final StringBuilder retval=new StringBuilder();

  retval.append(TEST_DATA_PATH);

  String colName=object.getClass().getName();

  colName=colName.substring(colName.lastIndexOf(".") + 1);

  retval.append(colName);

  retval.append(".emptyCollection.version");

  retval.append(getCompatibilityVersion());

  retval.append(".obj");

  return retval.toString();

}

Location: AbstractObjectTest.java

Content: 

protected String getCanonicalFullCollectionName(final Object object){

  final StringBuilder retval=new StringBuilder();

  retval.append(TEST_DATA_PATH);

  String colName=object.getClass().getName();

  colName=colName.substring(colName.lastIndexOf(".") + 1);

  retval.append(colName);

  retval.append(".fullCollection.version");

  retval.append(getCompatibilityVersion());

  retval.append(".obj");

  return retval.toString();

}

Location: AbstractObjectTest.java

Content: 

/** 

 * Read a Serialized or Externalized Object from bytes. Useful for verifying serialization in memory.

 * @param b byte array containing a serialized Object

 * @return Object contained in the bytes

 * @throws IOException

 * @throws ClassNotFoundException

 */

protected Object readExternalFormFromBytes(final byte[] b) throws IOException, ClassNotFoundException {

  final ByteArrayInputStream stream=new ByteArrayInputStream(b);

  return readExternalFormFromStream(stream);

}

Location: AbstractObjectTest.java

Content: 

/** 

 * Reads a Serialized or Externalized Object from disk. Useful for creating compatibility tests between different SCM versions of the same class

 * @param path path to the serialized Object

 * @return the Object at the given path

 * @throws IOException

 * @throws ClassNotFoundException

 */

protected Object readExternalFormFromDisk(final String path) throws IOException, ClassNotFoundException {

  try (FileInputStream stream=new FileInputStream(path)){

    return readExternalFormFromStream(stream);

  }

 }

Location: AbstractObjectTest.java

Content: 

private Object readExternalFormFromStream(final InputStream stream) throws IOException, ClassNotFoundException {

  final ObjectInputStream oStream=new ObjectInputStream(stream);

  return oStream.readObject();

}

Location: AbstractObjectTest.java

Content: 

protected Object serializeDeserialize(final Object obj) throws Exception {

  final ByteArrayOutputStream buffer=new ByteArrayOutputStream();

  final ObjectOutputStream out=new ObjectOutputStream(buffer);

  out.writeObject(obj);

  out.close();

  final ObjectInputStream in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));

  final Object dest=in.readObject();

  in.close();

  return dest;

}

Location: AbstractObjectTest.java

Content: 

public void testEqualsNull(){

  final Object obj=makeObject();

  assertFalse(obj.equals(null));

}

Location: AbstractObjectTest.java

Content: 

public void testObjectEqualsSelf(){

  final Object obj=makeObject();

  assertEquals("A Object should equal itself",obj,obj);

}

Location: AbstractObjectTest.java

Content: 

public void testObjectHashCodeEqualsContract(){

  final Object obj1=makeObject();

  if (obj1.equals(obj1)) {

    assertEquals("[1] When two objects are equal, their hashCodes should be also.",obj1.hashCode(),obj1.hashCode());

  }

  final Object obj2=makeObject();

  if (obj1.equals(obj2)) {

    assertEquals("[2] When two objects are equal, their hashCodes should be also.",obj1.hashCode(),obj2.hashCode());

    assertEquals("When obj1.equals(obj2) is true, then obj2.equals(obj1) should also be true",obj2,obj1);

  }

}

Location: AbstractObjectTest.java

Content: 

public void testObjectHashCodeEqualsSelfHashCode(){

  final Object obj=makeObject();

  assertEquals("hashCode should be repeatable",obj.hashCode(),obj.hashCode());

}

Location: AbstractObjectTest.java

Content: 

/** 

 * Converts a Serializable or Externalizable object to bytes.  Useful for in-memory tests of serialization

 * @param o Object to convert to bytes

 * @return serialized form of the Object

 * @throws IOException

 */

protected byte[] writeExternalFormToBytes(final Serializable o) throws IOException {

  final ByteArrayOutputStream byteStream=new ByteArrayOutputStream();

  writeExternalFormToStream(o,byteStream);

  return byteStream.toByteArray();

}

Location: AbstractObjectTest.java

Content: 

/** 

 * Writes a Serializable or Externalizable object as a file at the given path.  NOT USEFUL as part of a unit test; this is just a utility method for creating disk-based objects in SCM that can become the basis for compatibility tests using readExternalFormFromDisk(String path)

 * @param o Object to serialize

 * @param path path to write the serialized Object

 * @throws IOException

 */

protected void writeExternalFormToDisk(final Serializable o,final String path) throws IOException {

  try (FileOutputStream fileStream=new FileOutputStream(path)){

    writeExternalFormToStream(o,fileStream);

  }

 }

Location: AbstractObjectTest.java

Content: 

private void writeExternalFormToStream(final Serializable o,final OutputStream stream) throws IOException {

  final ObjectOutputStream oStream=new ObjectOutputStream(stream);

  oStream.writeObject(o);

}

