Location: AbstractIterableMapTest.java

Content: 

/** 

 * JUnit constructor.

 * @param testName  the test name

 */

public AbstractIterableMapTest(final String testName){

  super(testName);

}

Location: AbstractIterableMapTest.java

Content: 

public void testFailFastEntrySet(){

  if (!isRemoveSupported()) {

    return;

  }

  if (!isFailFastExpected()) {

    return;

  }

  resetFull();

  Iterator<Map.Entry<K,V>> it=getMap().entrySet().iterator();

  final Map.Entry<K,V> val=it.next();

  getMap().remove(val.getKey());

  try {

    it.next();

    fail();

  }

 catch (  final ConcurrentModificationException ex) {

  }

  resetFull();

  it=getMap().entrySet().iterator();

  it.next();

  getMap().clear();

  try {

    it.next();

    fail();

  }

 catch (  final ConcurrentModificationException ex) {

  }

}

Location: AbstractIterableMapTest.java

Content: 

public void testFailFastKeySet(){

  if (!isRemoveSupported()) {

    return;

  }

  if (!isFailFastExpected()) {

    return;

  }

  resetFull();

  Iterator<K> it=getMap().keySet().iterator();

  final K val=it.next();

  getMap().remove(val);

  try {

    it.next();

    fail();

  }

 catch (  final ConcurrentModificationException ex) {

  }

  resetFull();

  it=getMap().keySet().iterator();

  it.next();

  getMap().clear();

  try {

    it.next();

    fail();

  }

 catch (  final ConcurrentModificationException ex) {

  }

}

Location: AbstractIterableMapTest.java

Content: 

public void testFailFastValues(){

  if (!isRemoveSupported()) {

    return;

  }

  if (!isFailFastExpected()) {

    return;

  }

  resetFull();

  Iterator<V> it=getMap().values().iterator();

  it.next();

  getMap().remove(getMap().keySet().iterator().next());

  try {

    it.next();

    fail();

  }

 catch (  final ConcurrentModificationException ex) {

  }

  resetFull();

  it=getMap().values().iterator();

  it.next();

  getMap().clear();

  try {

    it.next();

    fail();

  }

 catch (  final ConcurrentModificationException ex) {

  }

}

Location: AbstractIterableMapTest.java

Content: 

/** 

 * JUnit constructor.

 * @param testName  the test name

 */

public AbstractIterableMapTest(final String testName){

  super(testName);

}

Location: AbstractIterableMapTest.java

Content: 

public void testFailFastEntrySet(){

  if (!isRemoveSupported()) {

    return;

  }

  if (!isFailFastExpected()) {

    return;

  }

  resetFull();

  Iterator<Map.Entry<K,V>> it=getMap().entrySet().iterator();

  final Map.Entry<K,V> val=it.next();

  getMap().remove(val.getKey());

  try {

    it.next();

    fail();

  }

 catch (  final ConcurrentModificationException ex) {

  }

  resetFull();

  it=getMap().entrySet().iterator();

  it.next();

  getMap().clear();

  try {

    it.next();

    fail();

  }

 catch (  final ConcurrentModificationException ex) {

  }

}

Location: AbstractIterableMapTest.java

Content: 

public void testFailFastKeySet(){

  if (!isRemoveSupported()) {

    return;

  }

  if (!isFailFastExpected()) {

    return;

  }

  resetFull();

  Iterator<K> it=getMap().keySet().iterator();

  final K val=it.next();

  getMap().remove(val);

  try {

    it.next();

    fail();

  }

 catch (  final ConcurrentModificationException ex) {

  }

  resetFull();

  it=getMap().keySet().iterator();

  it.next();

  getMap().clear();

  try {

    it.next();

    fail();

  }

 catch (  final ConcurrentModificationException ex) {

  }

}

Location: AbstractIterableMapTest.java

Content: 

public void testFailFastValues(){

  if (!isRemoveSupported()) {

    return;

  }

  if (!isFailFastExpected()) {

    return;

  }

  resetFull();

  Iterator<V> it=getMap().values().iterator();

  it.next();

  getMap().remove(getMap().keySet().iterator().next());

  try {

    it.next();

    fail();

  }

 catch (  final ConcurrentModificationException ex) {

  }

  resetFull();

  it=getMap().values().iterator();

  it.next();

  getMap().clear();

  try {

    it.next();

    fail();

  }

 catch (  final ConcurrentModificationException ex) {

  }

}

