Location: PredicatedSetTest.java

Content: 

protected PredicatedSet<E> decorateSet(final Set<E> set,final Predicate<? super E> predicate){

  return PredicatedSet.predicatedSet(set,predicate);

}

Location: PredicatedSetTest.java

Content: 

@Override @SuppressWarnings("unchecked") public E[] getFullElements(){

  return (E[])new Object[]{"1","3","5","7","2","4","6"};

}

Location: PredicatedSetTest.java

Content: 

protected PredicatedSet<E> makeTestSet(){

  return decorateSet(new HashSet<E>(),testPredicate);

}

Location: PredicatedSetTest.java

Content: 

public PredicatedSetTest(final String testName){

  super(testName);

}

Location: PredicatedSetTest.java

Content: 

public void testGetSet(){

  final PredicatedSet<E> set=makeTestSet();

  assertNotNull("returned set should not be null",set.decorated());

}

Location: PredicatedSetTest.java

Content: 

@SuppressWarnings("unchecked") public void testIllegalAdd(){

  final Set<E> set=makeTestSet();

  final Integer i=Integer.valueOf(3);

  try {

    set.add((E)i);

    fail("Integer should fail string predicate.");

  }

 catch (  final IllegalArgumentException e) {

  }

  assertFalse("Collection shouldn't contain illegal element",set.contains(i));

}

Location: PredicatedSetTest.java

Content: 

@SuppressWarnings("unchecked") public void testIllegalAddAll(){

  final Set<E> set=makeTestSet();

  final Set<E> elements=new HashSet<>();

  elements.add((E)"one");

  elements.add((E)"two");

  elements.add((E)Integer.valueOf(3));

  elements.add((E)"four");

  try {

    set.addAll(elements);

    fail("Integer should fail string predicate.");

  }

 catch (  final IllegalArgumentException e) {

  }

  assertFalse("Set shouldn't contain illegal element",set.contains("one"));

  assertFalse("Set shouldn't contain illegal element",set.contains("two"));

  assertFalse("Set shouldn't contain illegal element",set.contains(Integer.valueOf(3)));

  assertFalse("Set shouldn't contain illegal element",set.contains("four"));

}

Location: PredicatedSetTest.java

Content: 

protected PredicatedSet<E> decorateSet(final Set<E> set,final Predicate<? super E> predicate){

  return PredicatedSet.predicatedSet(set,predicate);

}

Location: PredicatedSetTest.java

Content: 

@Override @SuppressWarnings("unchecked") public E[] getFullElements(){

  return (E[])new Object[]{"1","3","5","7","2","4","6"};

}

Location: PredicatedSetTest.java

Content: 

protected PredicatedSet<E> makeTestSet(){

  return decorateSet(new HashSet<E>(),testPredicate);

}

Location: PredicatedSetTest.java

Content: 

public PredicatedSetTest(final String testName){

  super(testName);

}

Location: PredicatedSetTest.java

Content: 

public void testGetSet(){

  final PredicatedSet<E> set=makeTestSet();

  assertNotNull("returned set should not be null",set.decorated());

}

Location: PredicatedSetTest.java

Content: 

@SuppressWarnings("unchecked") public void testIllegalAdd(){

  final Set<E> set=makeTestSet();

  final Integer i=Integer.valueOf(3);

  try {

    set.add((E)i);

    fail("Integer should fail string predicate.");

  }

 catch (  final IllegalArgumentException e) {

  }

  assertFalse("Collection shouldn't contain illegal element",set.contains(i));

}

Location: PredicatedSetTest.java

Content: 

@SuppressWarnings("unchecked") public void testIllegalAddAll(){

  final Set<E> set=makeTestSet();

  final Set<E> elements=new HashSet<>();

  elements.add((E)"one");

  elements.add((E)"two");

  elements.add((E)Integer.valueOf(3));

  elements.add((E)"four");

  try {

    set.addAll(elements);

    fail("Integer should fail string predicate.");

  }

 catch (  final IllegalArgumentException e) {

  }

  assertFalse("Set shouldn't contain illegal element",set.contains("one"));

  assertFalse("Set shouldn't contain illegal element",set.contains("two"));

  assertFalse("Set shouldn't contain illegal element",set.contains(Integer.valueOf(3)));

  assertFalse("Set shouldn't contain illegal element",set.contains("four"));

}

