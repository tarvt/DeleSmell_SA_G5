Location: UnmodifiableSortedSet.java

Content: 

@Override public boolean addAll(final Collection<? extends E> coll){

  throw new UnsupportedOperationException();

}

Location: UnmodifiableSortedSet.java

Content: 

@Override public boolean add(final E object){

  throw new UnsupportedOperationException();

}

Location: UnmodifiableSortedSet.java

Content: 

@Override public SortedSet<E> headSet(final E toElement){

  final SortedSet<E> head=decorated().headSet(toElement);

  return unmodifiableSortedSet(head);

}

Location: UnmodifiableSortedSet.java

Content: 

@Override public boolean removeAll(final Collection<?> coll){

  throw new UnsupportedOperationException();

}

Location: UnmodifiableSortedSet.java

Content: 

/** 

 * @since 4.4

 */

@Override public boolean removeIf(final Predicate<? super E> filter){

  throw new UnsupportedOperationException();

}

Location: UnmodifiableSortedSet.java

Content: 

@Override public boolean retainAll(final Collection<?> coll){

  throw new UnsupportedOperationException();

}

Location: UnmodifiableSortedSet.java

Content: 

@Override public SortedSet<E> subSet(final E fromElement,final E toElement){

  final SortedSet<E> sub=decorated().subSet(fromElement,toElement);

  return unmodifiableSortedSet(sub);

}

Location: UnmodifiableSortedSet.java

Content: 

@Override public SortedSet<E> tailSet(final E fromElement){

  final SortedSet<E> tail=decorated().tailSet(fromElement);

  return unmodifiableSortedSet(tail);

}

Location: UnmodifiableSortedSet.java

Content: 

/** 

 * Constructor that wraps (not copies).

 * @param set  the set to decorate, must not be null

 * @throws NullPointerException if set is null

 */

private UnmodifiableSortedSet(final SortedSet<E> set){

  super(set);

}

Location: UnmodifiableSortedSet.java

Content: 

@Override public boolean addAll(final Collection<? extends E> coll){

  throw new UnsupportedOperationException();

}

Location: UnmodifiableSortedSet.java

Content: 

@Override public boolean add(final E object){

  throw new UnsupportedOperationException();

}

Location: UnmodifiableSortedSet.java

Content: 

@Override public SortedSet<E> headSet(final E toElement){

  final SortedSet<E> head=decorated().headSet(toElement);

  return unmodifiableSortedSet(head);

}

Location: UnmodifiableSortedSet.java

Content: 

@Override public boolean removeAll(final Collection<?> coll){

  throw new UnsupportedOperationException();

}

Location: UnmodifiableSortedSet.java

Content: 

/** 

 * @since 4.4

 */

@Override public boolean removeIf(final Predicate<? super E> filter){

  throw new UnsupportedOperationException();

}

Location: UnmodifiableSortedSet.java

Content: 

@Override public boolean retainAll(final Collection<?> coll){

  throw new UnsupportedOperationException();

}

Location: UnmodifiableSortedSet.java

Content: 

@Override public SortedSet<E> subSet(final E fromElement,final E toElement){

  final SortedSet<E> sub=decorated().subSet(fromElement,toElement);

  return unmodifiableSortedSet(sub);

}

Location: UnmodifiableSortedSet.java

Content: 

@Override public SortedSet<E> tailSet(final E fromElement){

  final SortedSet<E> tail=decorated().tailSet(fromElement);

  return unmodifiableSortedSet(tail);

}

Location: UnmodifiableSortedSet.java

Content: 

/** 

 * Constructor that wraps (not copies).

 * @param set  the set to decorate, must not be null

 * @throws NullPointerException if set is null

 */

private UnmodifiableSortedSet(final SortedSet<E> set){

  super(set);

}

