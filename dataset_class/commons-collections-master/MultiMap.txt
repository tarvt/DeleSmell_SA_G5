Location: MultiMap.java

Content: 

/** 

 * Removes a specific value from map. <p> The item is removed from the collection mapped to the specified key. Other values attached to that key are unaffected. <p> If the last value for a key is removed, implementations typically return  {@code null} from a subsequent {@code get(Object)}, however they may choose to return an empty collection.

 * @param key  the key to remove from

 * @param item  the item to remove

 * @return {@code true} if the mapping was removed, {@code false} otherwise

 * @throws UnsupportedOperationException if the map is unmodifiable

 * @throws ClassCastException if the key or value is of an invalid type

 * @throws NullPointerException if the key or value is null and null is invalid

 * @since 4.0 (signature in previous releases: V remove(K, V))

 */

boolean removeMapping(K key,V item);

Location: MultiMap.java

Content: 

/** 

 * Removes a specific value from map. <p> The item is removed from the collection mapped to the specified key. Other values attached to that key are unaffected. <p> If the last value for a key is removed, implementations typically return  {@code null} from a subsequent {@code get(Object)}, however they may choose to return an empty collection.

 * @param key  the key to remove from

 * @param item  the item to remove

 * @return {@code true} if the mapping was removed, {@code false} otherwise

 * @throws UnsupportedOperationException if the map is unmodifiable

 * @throws ClassCastException if the key or value is of an invalid type

 * @throws NullPointerException if the key or value is null and null is invalid

 * @since 4.0 (signature in previous releases: V remove(K, V))

 */

boolean removeMapping(K key,V item);

