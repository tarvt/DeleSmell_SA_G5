Location: ComparatorChain.java

Content: 

/** 

 * Add a Comparator to the end of the chain using the forward sort order

 * @param comparator Comparator with the forward sort order

 */

public void addComparator(final Comparator<E> comparator){

  addComparator(comparator,false);

}

Location: ComparatorChain.java

Content: 

/** 

 * Add a Comparator to the end of the chain using the given sort order

 * @param comparator Comparator to add to the end of the chain

 * @param reverse    false = forward sort order; true = reverse sort order

 */

public void addComparator(final Comparator<E> comparator,final boolean reverse){

  checkLocked();

  comparatorChain.add(comparator);

  if (reverse) {

    orderingBits.set(comparatorChain.size() - 1);

  }

}

Location: ComparatorChain.java

Content: 

/** 

 * Throws an exception if the  {@link ComparatorChain} is empty.

 * @throws UnsupportedOperationException if the {@link ComparatorChain} is empty

 */

private void checkChainIntegrity(){

  if (comparatorChain.isEmpty()) {

    throw new UnsupportedOperationException("ComparatorChains must contain at least one Comparator");

  }

}

Location: ComparatorChain.java

Content: 

/** 

 * Construct a ComparatorChain with no Comparators. You must add at least one Comparator before calling the compare(Object,Object) method, or an UnsupportedOperationException is thrown

 */

public ComparatorChain(){

  this(new ArrayList<Comparator<E>>(),new BitSet());

}

Location: ComparatorChain.java

Content: 

/** 

 * Construct a ComparatorChain with a single Comparator, sorting in the forward order

 * @param comparator First comparator in the Comparator chain

 */

public ComparatorChain(final Comparator<E> comparator){

  this(comparator,false);

}

Location: ComparatorChain.java

Content: 

/** 

 * Construct a Comparator chain with a single Comparator, sorting in the given order

 * @param comparator First Comparator in the ComparatorChain

 * @param reverse    false = forward sort; true = reverse sort

 */

public ComparatorChain(final Comparator<E> comparator,final boolean reverse){

  comparatorChain=new ArrayList<>(1);

  comparatorChain.add(comparator);

  orderingBits=new BitSet(1);

  if (reverse) {

    orderingBits.set(0);

  }

}

Location: ComparatorChain.java

Content: 

/** 

 * Construct a ComparatorChain from the Comparators in the List.  All Comparators will default to the forward sort order.

 * @param list   List of Comparators

 * @see #ComparatorChain(List,BitSet)

 */

public ComparatorChain(final List<Comparator<E>> list){

  this(list,new BitSet(list.size()));

}

Location: ComparatorChain.java

Content: 

/** 

 * Construct a ComparatorChain from the Comparators in the given List.  The sort order of each column will be drawn from the given BitSet.  When determining the sort order for Comparator at index <i>i</i> in the List, the ComparatorChain will call BitSet.get(<i>i</i>). If that method returns <i>false</i>, the forward sort order is used; a return value of <i>true</i> indicates reverse sort order.

 * @param list   List of Comparators.  NOTE: This constructor does not perform adefensive copy of the list

 * @param bits   Sort order for each Comparator.  Extra bits are ignored,unless extra Comparators are added by another method.

 */

public ComparatorChain(final List<Comparator<E>> list,final BitSet bits){

  comparatorChain=list;

  orderingBits=bits;

}

Location: ComparatorChain.java

Content: 

/** 

 * Replace the Comparator at the given index, maintaining the existing sort order.

 * @param index      index of the Comparator to replace

 * @param comparator Comparator to place at the given index

 * @throws IndexOutOfBoundsException if index &lt; 0 or index &gt;= size()

 */

public void setComparator(final int index,final Comparator<E> comparator) throws IndexOutOfBoundsException {

  setComparator(index,comparator,false);

}

Location: ComparatorChain.java

Content: 

/** 

 * Replace the Comparator at the given index in the ComparatorChain, using the given sort order

 * @param index      index of the Comparator to replace

 * @param comparator Comparator to set

 * @param reverse    false = forward sort order; true = reverse sort order

 */

public void setComparator(final int index,final Comparator<E> comparator,final boolean reverse){

  checkLocked();

  comparatorChain.set(index,comparator);

  if (reverse) {

    orderingBits.set(index);

  }

 else {

    orderingBits.clear(index);

  }

}

Location: ComparatorChain.java

Content: 

/** 

 * Change the sort order at the given index in the ComparatorChain to a forward sort.

 * @param index  Index of the ComparatorChain

 */

public void setForwardSort(final int index){

  checkLocked();

  orderingBits.clear(index);

}

Location: ComparatorChain.java

Content: 

/** 

 * Change the sort order at the given index in the ComparatorChain to a reverse sort.

 * @param index  Index of the ComparatorChain

 */

public void setReverseSort(final int index){

  checkLocked();

  orderingBits.set(index);

}

Location: ComparatorChain.java

Content: 

/** 

 * Add a Comparator to the end of the chain using the forward sort order

 * @param comparator Comparator with the forward sort order

 */

public void addComparator(final Comparator<E> comparator){

  addComparator(comparator,false);

}

Location: ComparatorChain.java

Content: 

/** 

 * Add a Comparator to the end of the chain using the given sort order

 * @param comparator Comparator to add to the end of the chain

 * @param reverse    false = forward sort order; true = reverse sort order

 */

public void addComparator(final Comparator<E> comparator,final boolean reverse){

  checkLocked();

  comparatorChain.add(comparator);

  if (reverse) {

    orderingBits.set(comparatorChain.size() - 1);

  }

}

Location: ComparatorChain.java

Content: 

/** 

 * Throws an exception if the  {@link ComparatorChain} is empty.

 * @throws UnsupportedOperationException if the {@link ComparatorChain} is empty

 */

private void checkChainIntegrity(){

  if (comparatorChain.isEmpty()) {

    throw new UnsupportedOperationException("ComparatorChains must contain at least one Comparator");

  }

}

Location: ComparatorChain.java

Content: 

/** 

 * Construct a ComparatorChain with no Comparators. You must add at least one Comparator before calling the compare(Object,Object) method, or an UnsupportedOperationException is thrown

 */

public ComparatorChain(){

  this(new ArrayList<Comparator<E>>(),new BitSet());

}

Location: ComparatorChain.java

Content: 

/** 

 * Construct a ComparatorChain with a single Comparator, sorting in the forward order

 * @param comparator First comparator in the Comparator chain

 */

public ComparatorChain(final Comparator<E> comparator){

  this(comparator,false);

}

Location: ComparatorChain.java

Content: 

/** 

 * Construct a Comparator chain with a single Comparator, sorting in the given order

 * @param comparator First Comparator in the ComparatorChain

 * @param reverse    false = forward sort; true = reverse sort

 */

public ComparatorChain(final Comparator<E> comparator,final boolean reverse){

  comparatorChain=new ArrayList<>(1);

  comparatorChain.add(comparator);

  orderingBits=new BitSet(1);

  if (reverse) {

    orderingBits.set(0);

  }

}

Location: ComparatorChain.java

Content: 

/** 

 * Construct a ComparatorChain from the Comparators in the List.  All Comparators will default to the forward sort order.

 * @param list   List of Comparators

 * @see #ComparatorChain(List,BitSet)

 */

public ComparatorChain(final List<Comparator<E>> list){

  this(list,new BitSet(list.size()));

}

Location: ComparatorChain.java

Content: 

/** 

 * Construct a ComparatorChain from the Comparators in the given List.  The sort order of each column will be drawn from the given BitSet.  When determining the sort order for Comparator at index <i>i</i> in the List, the ComparatorChain will call BitSet.get(<i>i</i>). If that method returns <i>false</i>, the forward sort order is used; a return value of <i>true</i> indicates reverse sort order.

 * @param list   List of Comparators.  NOTE: This constructor does not perform adefensive copy of the list

 * @param bits   Sort order for each Comparator.  Extra bits are ignored,unless extra Comparators are added by another method.

 */

public ComparatorChain(final List<Comparator<E>> list,final BitSet bits){

  comparatorChain=list;

  orderingBits=bits;

}

Location: ComparatorChain.java

Content: 

/** 

 * Replace the Comparator at the given index, maintaining the existing sort order.

 * @param index      index of the Comparator to replace

 * @param comparator Comparator to place at the given index

 * @throws IndexOutOfBoundsException if index &lt; 0 or index &gt;= size()

 */

public void setComparator(final int index,final Comparator<E> comparator) throws IndexOutOfBoundsException {

  setComparator(index,comparator,false);

}

Location: ComparatorChain.java

Content: 

/** 

 * Replace the Comparator at the given index in the ComparatorChain, using the given sort order

 * @param index      index of the Comparator to replace

 * @param comparator Comparator to set

 * @param reverse    false = forward sort order; true = reverse sort order

 */

public void setComparator(final int index,final Comparator<E> comparator,final boolean reverse){

  checkLocked();

  comparatorChain.set(index,comparator);

  if (reverse) {

    orderingBits.set(index);

  }

 else {

    orderingBits.clear(index);

  }

}

Location: ComparatorChain.java

Content: 

/** 

 * Change the sort order at the given index in the ComparatorChain to a forward sort.

 * @param index  Index of the ComparatorChain

 */

public void setForwardSort(final int index){

  checkLocked();

  orderingBits.clear(index);

}

Location: ComparatorChain.java

Content: 

/** 

 * Change the sort order at the given index in the ComparatorChain to a reverse sort.

 * @param index  Index of the ComparatorChain

 */

public void setReverseSort(final int index){

  checkLocked();

  orderingBits.set(index);

}

