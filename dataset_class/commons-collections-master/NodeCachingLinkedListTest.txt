Location: NodeCachingLinkedListTest.java

Content: 

public static void compareSpeed(){

  final NodeCachingLinkedList<Object> ncll=new NodeCachingLinkedList<>();

  final LinkedList<Object> ll=new LinkedList<>();

  final Object o1=new Object();

  final Object o2=new Object();

  final int loopCount=4000000;

  long startTime, endTime;

  System.out.println("Testing relative execution time of commonly-used methods...");

  startTime=System.currentTimeMillis();

  for (int x=loopCount; x > 0; x--) {

    ll.addFirst(o1);

    ll.addLast(o2);

    ll.removeFirst();

    ll.removeLast();

    ll.add(o1);

    ll.remove(0);

    ll.addFirst(o1);

    ll.addLast(o2);

    ll.removeFirst();

    ll.removeLast();

    ll.add(o1);

    ll.remove(0);

    ll.addFirst(o1);

    ll.addLast(o2);

    ll.removeFirst();

    ll.removeLast();

    ll.add(o1);

    ll.remove(0);

  }

  endTime=System.currentTimeMillis();

  System.out.println("Time with LinkedList: " + (endTime - startTime) + " ms");

  startTime=System.currentTimeMillis();

  for (int x=loopCount; x > 0; x--) {

    ncll.addFirst(o1);

    ncll.addLast(o2);

    ncll.removeFirst();

    ncll.removeLast();

    ncll.add(o1);

    ncll.remove(0);

    ncll.addFirst(o1);

    ncll.addLast(o2);

    ncll.removeFirst();

    ncll.removeLast();

    ncll.add(o1);

    ncll.remove(0);

    ncll.addFirst(o1);

    ncll.addLast(o2);

    ncll.removeFirst();

    ncll.removeLast();

    ncll.add(o1);

    ncll.remove(0);

  }

  endTime=System.currentTimeMillis();

  System.out.println("Time with NodeCachingLinkedList: " + (endTime - startTime) + " ms");

}

Location: NodeCachingLinkedListTest.java

Content: 

public NodeCachingLinkedListTest(final String testName){

  super(testName);

}

Location: NodeCachingLinkedListTest.java

Content: 

@SuppressWarnings("unchecked") public void testShrinkCache(){

  if (!isRemoveSupported() || !isAddSupported()) {

    return;

  }

  resetEmpty();

  final NodeCachingLinkedList<E> list=getCollection();

  list.addAll(Arrays.asList((E[])new String[]{"1","2","3","4"}));

  list.removeAllNodes();

  list.setMaximumCacheSize(2);

  list.addAll(Arrays.asList((E[])new String[]{"1","2","3","4"}));

  checkNodes();

  list.removeNode(list.getNode(0,false));

  list.removeNode(list.getNode(0,false));

  list.removeNode(list.getNode(0,false));

  checkNodes();

  list.addAll(Arrays.asList((E[])new String[]{"1","2","3","4"}));

  checkNodes();

}

Location: NodeCachingLinkedListTest.java

Content: 

public static void compareSpeed(){

  final NodeCachingLinkedList<Object> ncll=new NodeCachingLinkedList<>();

  final LinkedList<Object> ll=new LinkedList<>();

  final Object o1=new Object();

  final Object o2=new Object();

  final int loopCount=4000000;

  long startTime, endTime;

  System.out.println("Testing relative execution time of commonly-used methods...");

  startTime=System.currentTimeMillis();

  for (int x=loopCount; x > 0; x--) {

    ll.addFirst(o1);

    ll.addLast(o2);

    ll.removeFirst();

    ll.removeLast();

    ll.add(o1);

    ll.remove(0);

    ll.addFirst(o1);

    ll.addLast(o2);

    ll.removeFirst();

    ll.removeLast();

    ll.add(o1);

    ll.remove(0);

    ll.addFirst(o1);

    ll.addLast(o2);

    ll.removeFirst();

    ll.removeLast();

    ll.add(o1);

    ll.remove(0);

  }

  endTime=System.currentTimeMillis();

  System.out.println("Time with LinkedList: " + (endTime - startTime) + " ms");

  startTime=System.currentTimeMillis();

  for (int x=loopCount; x > 0; x--) {

    ncll.addFirst(o1);

    ncll.addLast(o2);

    ncll.removeFirst();

    ncll.removeLast();

    ncll.add(o1);

    ncll.remove(0);

    ncll.addFirst(o1);

    ncll.addLast(o2);

    ncll.removeFirst();

    ncll.removeLast();

    ncll.add(o1);

    ncll.remove(0);

    ncll.addFirst(o1);

    ncll.addLast(o2);

    ncll.removeFirst();

    ncll.removeLast();

    ncll.add(o1);

    ncll.remove(0);

  }

  endTime=System.currentTimeMillis();

  System.out.println("Time with NodeCachingLinkedList: " + (endTime - startTime) + " ms");

}

Location: NodeCachingLinkedListTest.java

Content: 

public NodeCachingLinkedListTest(final String testName){

  super(testName);

}

Location: NodeCachingLinkedListTest.java

Content: 

@SuppressWarnings("unchecked") public void testShrinkCache(){

  if (!isRemoveSupported() || !isAddSupported()) {

    return;

  }

  resetEmpty();

  final NodeCachingLinkedList<E> list=getCollection();

  list.addAll(Arrays.asList((E[])new String[]{"1","2","3","4"}));

  list.removeAllNodes();

  list.setMaximumCacheSize(2);

  list.addAll(Arrays.asList((E[])new String[]{"1","2","3","4"}));

  checkNodes();

  list.removeNode(list.getNode(0,false));

  list.removeNode(list.getNode(0,false));

  list.removeNode(list.getNode(0,false));

  checkNodes();

  list.addAll(Arrays.asList((E[])new String[]{"1","2","3","4"}));

  checkNodes();

}

