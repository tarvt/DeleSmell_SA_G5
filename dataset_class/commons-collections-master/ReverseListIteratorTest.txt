Location: ReverseListIteratorTest.java

Content: 

public ReverseListIteratorTest(final String testName){

  super(testName);

}

Location: ReverseListIteratorTest.java

Content: 

@Override public void testEmptyListIteratorIsIndeedEmpty(){

  final ListIterator<E> it=makeEmptyIterator();

  assertFalse(it.hasNext());

  assertEquals(-1,it.nextIndex());

  assertFalse(it.hasPrevious());

  assertEquals(0,it.previousIndex());

  try {

    it.next();

    fail("NoSuchElementException must be thrown from empty ListIterator");

  }

 catch (  final NoSuchElementException e) {

  }

  try {

    it.previous();

    fail("NoSuchElementException must be thrown from empty ListIterator");

  }

 catch (  final NoSuchElementException e) {

  }

}

Location: ReverseListIteratorTest.java

Content: 

public void testReverse(){

  final ListIterator<E> it=makeObject();

  assertTrue(it.hasNext());

  assertEquals(3,it.nextIndex());

  assertFalse(it.hasPrevious());

  assertEquals(4,it.previousIndex());

  assertEquals("Four",it.next());

  assertEquals(2,it.nextIndex());

  assertTrue(it.hasNext());

  assertEquals(3,it.previousIndex());

  assertTrue(it.hasPrevious());

  assertEquals("Three",it.next());

  assertTrue(it.hasNext());

  assertEquals(1,it.nextIndex());

  assertTrue(it.hasPrevious());

  assertEquals(2,it.previousIndex());

  assertEquals("Two",it.next());

  assertTrue(it.hasNext());

  assertEquals(0,it.nextIndex());

  assertTrue(it.hasPrevious());

  assertEquals(1,it.previousIndex());

  assertEquals("One",it.next());

  assertFalse(it.hasNext());

  assertEquals(-1,it.nextIndex());

  assertTrue(it.hasPrevious());

  assertEquals(0,it.previousIndex());

  assertEquals("One",it.previous());

  assertEquals("Two",it.previous());

  assertEquals("Three",it.previous());

  assertEquals("Four",it.previous());

}

Location: ReverseListIteratorTest.java

Content: 

@Override public void testWalkForwardAndBack(){

  final ArrayList<E> list=new ArrayList<>();

  final ListIterator<E> it=makeObject();

  while (it.hasNext()) {

    list.add(it.next());

  }

  assertFalse(it.hasNext());

  assertTrue(it.hasPrevious());

  for (int i=list.size() - 1; i >= 0; i--) {

    assertEquals("" + i,list.size() - i - 2,it.nextIndex());

    assertEquals(list.size() - i - 1,it.previousIndex());

    final Object obj=list.get(i);

    assertEquals(obj,it.previous());

  }

  assertTrue(it.hasNext());

  assertFalse(it.hasPrevious());

  try {

    it.previous();

    fail("NoSuchElementException must be thrown from previous at start of ListIterator");

  }

 catch (  final NoSuchElementException e) {

  }

}

Location: ReverseListIteratorTest.java

Content: 

public ReverseListIteratorTest(final String testName){

  super(testName);

}

Location: ReverseListIteratorTest.java

Content: 

@Override public void testEmptyListIteratorIsIndeedEmpty(){

  final ListIterator<E> it=makeEmptyIterator();

  assertFalse(it.hasNext());

  assertEquals(-1,it.nextIndex());

  assertFalse(it.hasPrevious());

  assertEquals(0,it.previousIndex());

  try {

    it.next();

    fail("NoSuchElementException must be thrown from empty ListIterator");

  }

 catch (  final NoSuchElementException e) {

  }

  try {

    it.previous();

    fail("NoSuchElementException must be thrown from empty ListIterator");

  }

 catch (  final NoSuchElementException e) {

  }

}

Location: ReverseListIteratorTest.java

Content: 

public void testReverse(){

  final ListIterator<E> it=makeObject();

  assertTrue(it.hasNext());

  assertEquals(3,it.nextIndex());

  assertFalse(it.hasPrevious());

  assertEquals(4,it.previousIndex());

  assertEquals("Four",it.next());

  assertEquals(2,it.nextIndex());

  assertTrue(it.hasNext());

  assertEquals(3,it.previousIndex());

  assertTrue(it.hasPrevious());

  assertEquals("Three",it.next());

  assertTrue(it.hasNext());

  assertEquals(1,it.nextIndex());

  assertTrue(it.hasPrevious());

  assertEquals(2,it.previousIndex());

  assertEquals("Two",it.next());

  assertTrue(it.hasNext());

  assertEquals(0,it.nextIndex());

  assertTrue(it.hasPrevious());

  assertEquals(1,it.previousIndex());

  assertEquals("One",it.next());

  assertFalse(it.hasNext());

  assertEquals(-1,it.nextIndex());

  assertTrue(it.hasPrevious());

  assertEquals(0,it.previousIndex());

  assertEquals("One",it.previous());

  assertEquals("Two",it.previous());

  assertEquals("Three",it.previous());

  assertEquals("Four",it.previous());

}

Location: ReverseListIteratorTest.java

Content: 

@Override public void testWalkForwardAndBack(){

  final ArrayList<E> list=new ArrayList<>();

  final ListIterator<E> it=makeObject();

  while (it.hasNext()) {

    list.add(it.next());

  }

  assertFalse(it.hasNext());

  assertTrue(it.hasPrevious());

  for (int i=list.size() - 1; i >= 0; i--) {

    assertEquals("" + i,list.size() - i - 2,it.nextIndex());

    assertEquals(list.size() - i - 1,it.previousIndex());

    final Object obj=list.get(i);

    assertEquals(obj,it.previous());

  }

  assertTrue(it.hasNext());

  assertFalse(it.hasPrevious());

  try {

    it.previous();

    fail("NoSuchElementException must be thrown from previous at start of ListIterator");

  }

 catch (  final NoSuchElementException e) {

  }

}

