Location: AbstractMapIteratorTest.java

Content: 

/** 

 * JUnit constructor.

 * @param testName  the test class name

 */

public AbstractMapIteratorTest(final String testName){

  super(testName);

}

Location: AbstractMapIteratorTest.java

Content: 

/** 

 * The values to be used in the add and set tests. Default is two strings.

 */

@SuppressWarnings("unchecked") public V[] addSetValues(){

  return (V[])new Object[]{"A","B"};

}

Location: AbstractMapIteratorTest.java

Content: 

/** 

 * Implement this method to return the confirmed map which contains the same data as the iterator.

 * @return a full map which can be updated

 */

public abstract Map<K,V> getConfirmedMap();

Location: AbstractMapIteratorTest.java

Content: 

/** 

 * Whether or not we are testing an iterator that supports setValue(). Default is true.

 * @return true if Iterator supports set

 */

public boolean supportsSetValue(){

  return true;

}

Location: AbstractMapIteratorTest.java

Content: 

/** 

 * Test that the empty list iterator contract is correct.

 */

public void testEmptyMapIterator(){

  if (!supportsEmptyIterator()) {

    return;

  }

  final MapIterator<K,V> it=makeEmptyIterator();

  assertFalse(it.hasNext());

  try {

    it.next();

    fail();

  }

 catch (  final NoSuchElementException ex) {

  }

  try {

    it.getKey();

    fail();

  }

 catch (  final IllegalStateException ex) {

  }

  try {

    it.getValue();

    fail();

  }

 catch (  final IllegalStateException ex) {

  }

  if (!supportsSetValue()) {

    try {

      it.setValue(addSetValues()[0]);

      fail();

    }

 catch (    final UnsupportedOperationException|IllegalStateException ex) {

    }

  }

 else {

    try {

      it.setValue(addSetValues()[0]);

      fail();

    }

 catch (    final IllegalStateException ex) {

    }

  }

}

Location: AbstractMapIteratorTest.java

Content: 

/** 

 * Test that the full list iterator contract is correct.

 */

public void testFullMapIterator(){

  if (!supportsFullIterator()) {

    return;

  }

  final MapIterator<K,V> it=makeObject();

  final Map<K,V> map=getMap();

  assertTrue(it.hasNext());

  assertTrue(it.hasNext());

  final Set<K> set=new HashSet<>();

  while (it.hasNext()) {

    final K key=it.next();

    assertSame("it.next() should equals getKey()",key,it.getKey());

    assertTrue("Key must be in map",map.containsKey(key));

    assertTrue("Key must be unique",set.add(key));

    final V value=it.getValue();

    if (!isGetStructuralModify()) {

      assertSame("Value must be mapped to key",map.get(key),value);

    }

    assertTrue("Value must be in map",map.containsValue(value));

    verify();

  }

}

Location: AbstractMapIteratorTest.java

Content: 

public void testMapIteratorRemoveGetKey(){

  if (!supportsRemove()) {

    return;

  }

  final MapIterator<K,V> it=makeObject();

  final Map<K,V> confirmed=getConfirmedMap();

  assertTrue(it.hasNext());

  final K key=it.next();

  it.remove();

  confirmed.remove(key);

  verify();

  try {

    it.getKey();

    fail();

  }

 catch (  final IllegalStateException ex) {

  }

  verify();

}

Location: AbstractMapIteratorTest.java

Content: 

public void testMapIteratorRemoveGetValue(){

  if (!supportsRemove()) {

    return;

  }

  final MapIterator<K,V> it=makeObject();

  final Map<K,V> confirmed=getConfirmedMap();

  assertTrue(it.hasNext());

  final K key=it.next();

  it.remove();

  confirmed.remove(key);

  verify();

  try {

    it.getValue();

    fail();

  }

 catch (  final IllegalStateException ex) {

  }

  verify();

}

Location: AbstractMapIteratorTest.java

Content: 

public void testMapIteratorSet(){

  if (!supportsFullIterator()) {

    return;

  }

  final V newValue=addSetValues()[0];

  final V newValue2=addSetValues().length == 1 ? addSetValues()[0] : addSetValues()[1];

  final MapIterator<K,V> it=makeObject();

  final Map<K,V> map=getMap();

  final Map<K,V> confirmed=getConfirmedMap();

  assertTrue(it.hasNext());

  final K key=it.next();

  final V value=it.getValue();

  if (!supportsSetValue()) {

    try {

      it.setValue(newValue);

      fail();

    }

 catch (    final UnsupportedOperationException ex) {

    }

    return;

  }

  final V old=it.setValue(newValue);

  confirmed.put(key,newValue);

  assertSame("Key must not change after setValue",key,it.getKey());

  assertSame("Value must be changed after setValue",newValue,it.getValue());

  assertSame("setValue must return old value",value,old);

  assertTrue("Map must contain key",map.containsKey(key));

  assertEquals("Map must not contain old value",confirmed.containsValue(old),map.containsValue(old));

  assertTrue("Map must contain new value",map.containsValue(newValue));

  verify();

  it.setValue(newValue);

  confirmed.put(key,newValue);

  assertSame("Key must not change after setValue",key,it.getKey());

  assertSame("Value must be changed after setValue",newValue,it.getValue());

  verify();

  it.setValue(newValue2);

  confirmed.put(key,newValue2);

  assertSame("Key must not change after setValue",key,it.getKey());

  assertSame("Value must be changed after setValue",newValue2,it.getValue());

  verify();

}

Location: AbstractMapIteratorTest.java

Content: 

public void testMapIteratorSetRemoveSet(){

  if (!supportsSetValue() || !supportsRemove()) {

    return;

  }

  final V newValue=addSetValues()[0];

  final MapIterator<K,V> it=makeObject();

  final Map<K,V> confirmed=getConfirmedMap();

  assertTrue(it.hasNext());

  final K key=it.next();

  it.setValue(newValue);

  it.remove();

  confirmed.remove(key);

  verify();

  try {

    it.setValue(newValue);

    fail();

  }

 catch (  final IllegalStateException ex) {

  }

  verify();

}

Location: AbstractMapIteratorTest.java

Content: 

/** 

 * JUnit constructor.

 * @param testName  the test class name

 */

public AbstractMapIteratorTest(final String testName){

  super(testName);

}

Location: AbstractMapIteratorTest.java

Content: 

/** 

 * The values to be used in the add and set tests. Default is two strings.

 */

@SuppressWarnings("unchecked") public V[] addSetValues(){

  return (V[])new Object[]{"A","B"};

}

Location: AbstractMapIteratorTest.java

Content: 

/** 

 * Implement this method to return the confirmed map which contains the same data as the iterator.

 * @return a full map which can be updated

 */

public abstract Map<K,V> getConfirmedMap();

Location: AbstractMapIteratorTest.java

Content: 

/** 

 * Whether or not we are testing an iterator that supports setValue(). Default is true.

 * @return true if Iterator supports set

 */

public boolean supportsSetValue(){

  return true;

}

Location: AbstractMapIteratorTest.java

Content: 

/** 

 * Test that the empty list iterator contract is correct.

 */

public void testEmptyMapIterator(){

  if (!supportsEmptyIterator()) {

    return;

  }

  final MapIterator<K,V> it=makeEmptyIterator();

  assertFalse(it.hasNext());

  try {

    it.next();

    fail();

  }

 catch (  final NoSuchElementException ex) {

  }

  try {

    it.getKey();

    fail();

  }

 catch (  final IllegalStateException ex) {

  }

  try {

    it.getValue();

    fail();

  }

 catch (  final IllegalStateException ex) {

  }

  if (!supportsSetValue()) {

    try {

      it.setValue(addSetValues()[0]);

      fail();

    }

 catch (    final UnsupportedOperationException|IllegalStateException ex) {

    }

  }

 else {

    try {

      it.setValue(addSetValues()[0]);

      fail();

    }

 catch (    final IllegalStateException ex) {

    }

  }

}

Location: AbstractMapIteratorTest.java

Content: 

/** 

 * Test that the full list iterator contract is correct.

 */

public void testFullMapIterator(){

  if (!supportsFullIterator()) {

    return;

  }

  final MapIterator<K,V> it=makeObject();

  final Map<K,V> map=getMap();

  assertTrue(it.hasNext());

  assertTrue(it.hasNext());

  final Set<K> set=new HashSet<>();

  while (it.hasNext()) {

    final K key=it.next();

    assertSame("it.next() should equals getKey()",key,it.getKey());

    assertTrue("Key must be in map",map.containsKey(key));

    assertTrue("Key must be unique",set.add(key));

    final V value=it.getValue();

    if (!isGetStructuralModify()) {

      assertSame("Value must be mapped to key",map.get(key),value);

    }

    assertTrue("Value must be in map",map.containsValue(value));

    verify();

  }

}

Location: AbstractMapIteratorTest.java

Content: 

public void testMapIteratorRemoveGetKey(){

  if (!supportsRemove()) {

    return;

  }

  final MapIterator<K,V> it=makeObject();

  final Map<K,V> confirmed=getConfirmedMap();

  assertTrue(it.hasNext());

  final K key=it.next();

  it.remove();

  confirmed.remove(key);

  verify();

  try {

    it.getKey();

    fail();

  }

 catch (  final IllegalStateException ex) {

  }

  verify();

}

Location: AbstractMapIteratorTest.java

Content: 

public void testMapIteratorRemoveGetValue(){

  if (!supportsRemove()) {

    return;

  }

  final MapIterator<K,V> it=makeObject();

  final Map<K,V> confirmed=getConfirmedMap();

  assertTrue(it.hasNext());

  final K key=it.next();

  it.remove();

  confirmed.remove(key);

  verify();

  try {

    it.getValue();

    fail();

  }

 catch (  final IllegalStateException ex) {

  }

  verify();

}

Location: AbstractMapIteratorTest.java

Content: 

public void testMapIteratorSet(){

  if (!supportsFullIterator()) {

    return;

  }

  final V newValue=addSetValues()[0];

  final V newValue2=addSetValues().length == 1 ? addSetValues()[0] : addSetValues()[1];

  final MapIterator<K,V> it=makeObject();

  final Map<K,V> map=getMap();

  final Map<K,V> confirmed=getConfirmedMap();

  assertTrue(it.hasNext());

  final K key=it.next();

  final V value=it.getValue();

  if (!supportsSetValue()) {

    try {

      it.setValue(newValue);

      fail();

    }

 catch (    final UnsupportedOperationException ex) {

    }

    return;

  }

  final V old=it.setValue(newValue);

  confirmed.put(key,newValue);

  assertSame("Key must not change after setValue",key,it.getKey());

  assertSame("Value must be changed after setValue",newValue,it.getValue());

  assertSame("setValue must return old value",value,old);

  assertTrue("Map must contain key",map.containsKey(key));

  assertEquals("Map must not contain old value",confirmed.containsValue(old),map.containsValue(old));

  assertTrue("Map must contain new value",map.containsValue(newValue));

  verify();

  it.setValue(newValue);

  confirmed.put(key,newValue);

  assertSame("Key must not change after setValue",key,it.getKey());

  assertSame("Value must be changed after setValue",newValue,it.getValue());

  verify();

  it.setValue(newValue2);

  confirmed.put(key,newValue2);

  assertSame("Key must not change after setValue",key,it.getKey());

  assertSame("Value must be changed after setValue",newValue2,it.getValue());

  verify();

}

Location: AbstractMapIteratorTest.java

Content: 

public void testMapIteratorSetRemoveSet(){

  if (!supportsSetValue() || !supportsRemove()) {

    return;

  }

  final V newValue=addSetValues()[0];

  final MapIterator<K,V> it=makeObject();

  final Map<K,V> confirmed=getConfirmedMap();

  assertTrue(it.hasNext());

  final K key=it.next();

  it.setValue(newValue);

  it.remove();

  confirmed.remove(key);

  verify();

  try {

    it.setValue(newValue);

    fail();

  }

 catch (  final IllegalStateException ex) {

  }

  verify();

}

