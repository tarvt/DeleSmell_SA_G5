Location: LazySortedMapTest.java

Content: 

public LazySortedMapTest(final String testName){

  super(testName);

}

Location: LazySortedMapTest.java

Content: 

@Test public void mapGet(){

  Map<Integer,Number> map=lazySortedMap(new TreeMap<Integer,Number>(),oneFactory);

  assertEquals(0,map.size());

  final Number i1=map.get(5);

  assertEquals(1,i1);

  assertEquals(1,map.size());

  map=lazySortedMap(new TreeMap<Integer,Number>(),FactoryUtils.<Number>nullFactory());

  final Number o=map.get(5);

  assertNull(o);

  assertEquals(1,map.size());

}

Location: LazySortedMapTest.java

Content: 

public void testReverseSortOrder(){

  final SortedMap<String,Number> map=lazySortedMap(new ConcurrentSkipListMap<String,Number>(reverseStringComparator),oneFactory);

  map.put("A",5);

  map.get("B");

  map.put("C",8);

  assertEquals("Last key should be A","A",map.lastKey());

  assertEquals("First key should be C","C",map.firstKey());

  assertEquals("First key in tail map should be B","B",map.tailMap("B").firstKey());

  assertEquals("Last key in head map should be B","B",map.headMap("A").lastKey());

  assertEquals("Last key in submap should be B","B",map.subMap("C","A").lastKey());

  final Comparator<?> c=map.comparator();

  assertSame("natural order, so comparator should be null",c,reverseStringComparator);

}

Location: LazySortedMapTest.java

Content: 

public void testSortOrder(){

  final SortedMap<String,Number> map=lazySortedMap(new TreeMap<String,Number>(),oneFactory);

  map.put("A",5);

  map.get("B");

  map.put("C",8);

  assertEquals("First key should be A","A",map.firstKey());

  assertEquals("Last key should be C","C",map.lastKey());

  assertEquals("First key in tail map should be B","B",map.tailMap("B").firstKey());

  assertEquals("Last key in head map should be B","B",map.headMap("C").lastKey());

  assertEquals("Last key in submap should be B","B",map.subMap("A","C").lastKey());

  final Comparator<?> c=map.comparator();

  assertNull("natural order, so comparator should be null",c);

}

Location: LazySortedMapTest.java

Content: 

public void testTransformerDecorate(){

  final Transformer<Object,Integer> transformer=TransformerUtils.asTransformer(oneFactory);

  SortedMap<Integer,Number> map=lazySortedMap(new TreeMap<Integer,Number>(),transformer);

  assertTrue(map instanceof LazySortedMap);

  try {

    map=lazySortedMap(new TreeMap<Integer,Number>(),(Transformer<Integer,Number>)null);

    fail("Expecting NullPointerException for null transformer");

  }

 catch (  final NullPointerException e) {

  }

  try {

    map=lazySortedMap((SortedMap<Integer,Number>)null,transformer);

    fail("Expecting NullPointerException for null map");

  }

 catch (  final NullPointerException e) {

  }

}

Location: LazySortedMapTest.java

Content: 

public LazySortedMapTest(final String testName){

  super(testName);

}

Location: LazySortedMapTest.java

Content: 

@Test public void mapGet(){

  Map<Integer,Number> map=lazySortedMap(new TreeMap<Integer,Number>(),oneFactory);

  assertEquals(0,map.size());

  final Number i1=map.get(5);

  assertEquals(1,i1);

  assertEquals(1,map.size());

  map=lazySortedMap(new TreeMap<Integer,Number>(),FactoryUtils.<Number>nullFactory());

  final Number o=map.get(5);

  assertNull(o);

  assertEquals(1,map.size());

}

Location: LazySortedMapTest.java

Content: 

public void testReverseSortOrder(){

  final SortedMap<String,Number> map=lazySortedMap(new ConcurrentSkipListMap<String,Number>(reverseStringComparator),oneFactory);

  map.put("A",5);

  map.get("B");

  map.put("C",8);

  assertEquals("Last key should be A","A",map.lastKey());

  assertEquals("First key should be C","C",map.firstKey());

  assertEquals("First key in tail map should be B","B",map.tailMap("B").firstKey());

  assertEquals("Last key in head map should be B","B",map.headMap("A").lastKey());

  assertEquals("Last key in submap should be B","B",map.subMap("C","A").lastKey());

  final Comparator<?> c=map.comparator();

  assertSame("natural order, so comparator should be null",c,reverseStringComparator);

}

Location: LazySortedMapTest.java

Content: 

public void testSortOrder(){

  final SortedMap<String,Number> map=lazySortedMap(new TreeMap<String,Number>(),oneFactory);

  map.put("A",5);

  map.get("B");

  map.put("C",8);

  assertEquals("First key should be A","A",map.firstKey());

  assertEquals("Last key should be C","C",map.lastKey());

  assertEquals("First key in tail map should be B","B",map.tailMap("B").firstKey());

  assertEquals("Last key in head map should be B","B",map.headMap("C").lastKey());

  assertEquals("Last key in submap should be B","B",map.subMap("A","C").lastKey());

  final Comparator<?> c=map.comparator();

  assertNull("natural order, so comparator should be null",c);

}

Location: LazySortedMapTest.java

Content: 

public void testTransformerDecorate(){

  final Transformer<Object,Integer> transformer=TransformerUtils.asTransformer(oneFactory);

  SortedMap<Integer,Number> map=lazySortedMap(new TreeMap<Integer,Number>(),transformer);

  assertTrue(map instanceof LazySortedMap);

  try {

    map=lazySortedMap(new TreeMap<Integer,Number>(),(Transformer<Integer,Number>)null);

    fail("Expecting NullPointerException for null transformer");

  }

 catch (  final NullPointerException e) {

  }

  try {

    map=lazySortedMap((SortedMap<Integer,Number>)null,transformer);

    fail("Expecting NullPointerException for null map");

  }

 catch (  final NullPointerException e) {

  }

}

