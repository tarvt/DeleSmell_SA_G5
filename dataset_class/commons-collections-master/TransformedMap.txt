Location: TransformedMap.java

Content: 

/** 

 * Override to transform the value when using  {@code setValue}.

 * @param value  the value to transform

 * @return the transformed value

 * @since 3.1

 */

@Override protected V checkSetValue(final V value){

  return valueTransformer.transform(value);

}

Location: TransformedMap.java

Content: 

/** 

 * Override to only return true when there is a value transformer.

 * @return true if a value transformer is in use

 * @since 3.1

 */

@Override protected boolean isSetValueChecking(){

  return valueTransformer != null;

}

Location: TransformedMap.java

Content: 

/** 

 * Constructor that wraps (not copies). <p> If there are any elements already in the collection being decorated, they are NOT transformed.

 * @param map  the map to decorate, must not be null

 * @param keyTransformer  the transformer to use for key conversion, null means no conversion

 * @param valueTransformer  the transformer to use for value conversion, null means no conversion

 * @throws NullPointerException if map is null

 */

protected TransformedMap(final Map<K,V> map,final Transformer<? super K,? extends K> keyTransformer,final Transformer<? super V,? extends V> valueTransformer){

  super(map);

  this.keyTransformer=keyTransformer;

  this.valueTransformer=valueTransformer;

}

Location: TransformedMap.java

Content: 

/** 

 * Override to transform the value when using  {@code setValue}.

 * @param value  the value to transform

 * @return the transformed value

 * @since 3.1

 */

@Override protected V checkSetValue(final V value){

  return valueTransformer.transform(value);

}

Location: TransformedMap.java

Content: 

/** 

 * Override to only return true when there is a value transformer.

 * @return true if a value transformer is in use

 * @since 3.1

 */

@Override protected boolean isSetValueChecking(){

  return valueTransformer != null;

}

Location: TransformedMap.java

Content: 

/** 

 * Constructor that wraps (not copies). <p> If there are any elements already in the collection being decorated, they are NOT transformed.

 * @param map  the map to decorate, must not be null

 * @param keyTransformer  the transformer to use for key conversion, null means no conversion

 * @param valueTransformer  the transformer to use for value conversion, null means no conversion

 * @throws NullPointerException if map is null

 */

protected TransformedMap(final Map<K,V> map,final Transformer<? super K,? extends K> keyTransformer,final Transformer<? super V,? extends V> valueTransformer){

  super(map);

  this.keyTransformer=keyTransformer;

  this.valueTransformer=valueTransformer;

}

