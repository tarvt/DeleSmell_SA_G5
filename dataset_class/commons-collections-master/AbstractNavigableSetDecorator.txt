Location: AbstractNavigableSetDecorator.java

Content: 

/** 

 * Constructor only used in deserialization, do not use otherwise.

 */

protected AbstractNavigableSetDecorator(){

}

Location: AbstractNavigableSetDecorator.java

Content: 

/** 

 * Constructor that wraps (not copies).

 * @param set  the set to decorate, must not be null

 * @throws NullPointerException if set is null

 */

protected AbstractNavigableSetDecorator(final NavigableSet<E> set){

  super(set);

}

Location: AbstractNavigableSetDecorator.java

Content: 

@Override public E ceiling(final E e){

  return decorated().ceiling(e);

}

Location: AbstractNavigableSetDecorator.java

Content: 

@Override public Iterator<E> descendingIterator(){

  return decorated().descendingIterator();

}

Location: AbstractNavigableSetDecorator.java

Content: 

@Override public NavigableSet<E> descendingSet(){

  return decorated().descendingSet();

}

Location: AbstractNavigableSetDecorator.java

Content: 

@Override public E floor(final E e){

  return decorated().floor(e);

}

Location: AbstractNavigableSetDecorator.java

Content: 

@Override public NavigableSet<E> headSet(final E toElement,final boolean inclusive){

  return decorated().headSet(toElement,inclusive);

}

Location: AbstractNavigableSetDecorator.java

Content: 

@Override public E higher(final E e){

  return decorated().higher(e);

}

Location: AbstractNavigableSetDecorator.java

Content: 

@Override public E lower(final E e){

  return decorated().lower(e);

}

Location: AbstractNavigableSetDecorator.java

Content: 

@Override public E pollFirst(){

  return decorated().pollFirst();

}

Location: AbstractNavigableSetDecorator.java

Content: 

@Override public E pollLast(){

  return decorated().pollLast();

}

Location: AbstractNavigableSetDecorator.java

Content: 

@Override public NavigableSet<E> subSet(final E fromElement,final boolean fromInclusive,final E toElement,final boolean toInclusive){

  return decorated().subSet(fromElement,fromInclusive,toElement,toInclusive);

}

Location: AbstractNavigableSetDecorator.java

Content: 

@Override public NavigableSet<E> tailSet(final E fromElement,final boolean inclusive){

  return decorated().tailSet(fromElement,inclusive);

}

Location: AbstractNavigableSetDecorator.java

Content: 

/** 

 * Constructor only used in deserialization, do not use otherwise.

 */

protected AbstractNavigableSetDecorator(){

}

Location: AbstractNavigableSetDecorator.java

Content: 

/** 

 * Constructor that wraps (not copies).

 * @param set  the set to decorate, must not be null

 * @throws NullPointerException if set is null

 */

protected AbstractNavigableSetDecorator(final NavigableSet<E> set){

  super(set);

}

Location: AbstractNavigableSetDecorator.java

Content: 

@Override public E ceiling(final E e){

  return decorated().ceiling(e);

}

Location: AbstractNavigableSetDecorator.java

Content: 

@Override public Iterator<E> descendingIterator(){

  return decorated().descendingIterator();

}

Location: AbstractNavigableSetDecorator.java

Content: 

@Override public NavigableSet<E> descendingSet(){

  return decorated().descendingSet();

}

Location: AbstractNavigableSetDecorator.java

Content: 

@Override public E floor(final E e){

  return decorated().floor(e);

}

Location: AbstractNavigableSetDecorator.java

Content: 

@Override public NavigableSet<E> headSet(final E toElement,final boolean inclusive){

  return decorated().headSet(toElement,inclusive);

}

Location: AbstractNavigableSetDecorator.java

Content: 

@Override public E higher(final E e){

  return decorated().higher(e);

}

Location: AbstractNavigableSetDecorator.java

Content: 

@Override public E lower(final E e){

  return decorated().lower(e);

}

Location: AbstractNavigableSetDecorator.java

Content: 

@Override public E pollFirst(){

  return decorated().pollFirst();

}

Location: AbstractNavigableSetDecorator.java

Content: 

@Override public E pollLast(){

  return decorated().pollLast();

}

Location: AbstractNavigableSetDecorator.java

Content: 

@Override public NavigableSet<E> subSet(final E fromElement,final boolean fromInclusive,final E toElement,final boolean toInclusive){

  return decorated().subSet(fromElement,fromInclusive,toElement,toInclusive);

}

Location: AbstractNavigableSetDecorator.java

Content: 

@Override public NavigableSet<E> tailSet(final E fromElement,final boolean inclusive){

  return decorated().tailSet(fromElement,inclusive);

}

