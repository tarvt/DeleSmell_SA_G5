Location: MultiKeyTest.java

Content: 

@Test public void testConstructorsByArray() throws Exception {

  MultiKey<Integer> mk;

  Integer[] keys=new Integer[]{THREE,FOUR,ONE,TWO};

  mk=new MultiKey<>(keys);

  assertArrayEquals(new Object[]{THREE,FOUR,ONE,TWO},mk.getKeys());

  keys[3]=FIVE;

  assertArrayEquals(new Object[]{THREE,FOUR,ONE,TWO},mk.getKeys());

  keys=new Integer[]{};

  mk=new MultiKey<>(keys);

  assertArrayEquals(new Object[]{},mk.getKeys());

  keys=new Integer[]{THREE,FOUR,ONE,TWO};

  mk=new MultiKey<>(keys,true);

  assertArrayEquals(new Object[]{THREE,FOUR,ONE,TWO},mk.getKeys());

  keys[3]=FIVE;

  assertArrayEquals(new Object[]{THREE,FOUR,ONE,TWO},mk.getKeys());

  keys=new Integer[]{THREE,FOUR,ONE,TWO};

  mk=new MultiKey<>(keys,false);

  assertArrayEquals(new Object[]{THREE,FOUR,ONE,TWO},mk.getKeys());

  keys[3]=FIVE;

  assertArrayEquals(new Object[]{THREE,FOUR,ONE,FIVE},mk.getKeys());

}

Location: MultiKeyTest.java

Content: 

@Test public void testConstructorsByArrayNull() throws Exception {

  final Integer[] keys=null;

  try {

    new MultiKey<>(keys);

    fail();

  }

 catch (  final NullPointerException ex) {

  }

  try {

    new MultiKey<>(keys,true);

    fail();

  }

 catch (  final NullPointerException ex) {

  }

  try {

    new MultiKey<>(keys,false);

    fail();

  }

 catch (  final NullPointerException ex) {

  }

}

Location: MultiKeyTest.java

Content: 

@Test public void testEqualsAfterSerialization() throws IOException, ClassNotFoundException {

  SystemHashCodeSimulatingKey sysKey=new SystemHashCodeSimulatingKey("test");

  final MultiKey<?> mk=new MultiKey<Object>(ONE,sysKey);

  final Map<MultiKey<?>,Integer> map=new HashMap<>();

  map.put(mk,TWO);

  final ByteArrayOutputStream baos=new ByteArrayOutputStream();

  final ObjectOutputStream out=new ObjectOutputStream(baos);

  out.writeObject(sysKey);

  out.writeObject(map);

  out.close();

  final ByteArrayInputStream bais=new ByteArrayInputStream(baos.toByteArray());

  final ObjectInputStream in=new ObjectInputStream(bais);

  sysKey=(SystemHashCodeSimulatingKey)in.readObject();

  final Map<?,?> map2=(Map<?,?>)in.readObject();

  in.close();

  assertEquals(2,sysKey.hashCode());

  final MultiKey<?> mk2=new MultiKey<Object>(ONE,sysKey);

  assertEquals(TWO,map2.get(mk2));

}

Location: MultiKeyTest.java

Content: 

@Test public void testEqualsAfterSerializationOfDerivedClass() throws IOException, ClassNotFoundException {

  final DerivedMultiKey<?> mk=new DerivedMultiKey<>("A","B");

  final ByteArrayOutputStream baos=new ByteArrayOutputStream();

  final ObjectOutputStream out=new ObjectOutputStream(baos);

  out.writeObject(mk);

  out.close();

  final ByteArrayInputStream bais=new ByteArrayInputStream(baos.toByteArray());

  final ObjectInputStream in=new ObjectInputStream(bais);

  final DerivedMultiKey<?> mk2=(DerivedMultiKey<?>)in.readObject();

  in.close();

  assertEquals(mk.hashCode(),mk2.hashCode());

}

Location: MultiKeyTest.java

Content: 

@Test public void testGetIndexed(){

  final MultiKey<Integer> mk=new MultiKey<>(ONE,TWO);

  assertSame(ONE,mk.getKey(0));

  assertSame(TWO,mk.getKey(1));

  try {

    mk.getKey(-1);

    fail();

  }

 catch (  final IndexOutOfBoundsException ex) {

  }

  try {

    mk.getKey(2);

    fail();

  }

 catch (  final IndexOutOfBoundsException ex) {

  }

}

Location: MultiKeyTest.java

Content: 

@Test public void testGetKeysArrayConstructorCloned(){

  final Integer[] keys=new Integer[]{ONE,TWO};

  final MultiKey<Integer> mk=new MultiKey<>(keys,true);

  final Object[] array=mk.getKeys();

  assertNotSame(array,keys);

  assertArrayEquals(array,keys);

  assertSame(ONE,array[0]);

  assertSame(TWO,array[1]);

  assertEquals(2,array.length);

}

Location: MultiKeyTest.java

Content: 

@Test public void testGetKeysArrayConstructorNonCloned(){

  final Integer[] keys=new Integer[]{ONE,TWO};

  final MultiKey<Integer> mk=new MultiKey<>(keys,false);

  final Object[] array=mk.getKeys();

  assertNotSame(array,keys);

  assertArrayEquals(array,keys);

  assertSame(ONE,array[0]);

  assertSame(TWO,array[1]);

  assertEquals(2,array.length);

}

Location: MultiKeyTest.java

Content: 

@Test public void testGetKeysSimpleConstructor(){

  final MultiKey<Integer> mk=new MultiKey<>(ONE,TWO);

  final Object[] array=mk.getKeys();

  assertSame(ONE,array[0]);

  assertSame(TWO,array[1]);

  assertEquals(2,array.length);

}

Location: MultiKeyTest.java

Content: 

@Test public void testTwoArgCtor(){

  final MultiKeyTest key1=new MultiKeyTest();

  final MultiKeyTest key2=new MultiKeyTest();

  final MultiKeyTest[] keys=new MultiKey<>(key1,key2).getKeys();

  assertNotNull(keys);

}

Location: MultiKeyTest.java

Content: 

@Test public void testConstructorsByArray() throws Exception {

  MultiKey<Integer> mk;

  Integer[] keys=new Integer[]{THREE,FOUR,ONE,TWO};

  mk=new MultiKey<>(keys);

  assertArrayEquals(new Object[]{THREE,FOUR,ONE,TWO},mk.getKeys());

  keys[3]=FIVE;

  assertArrayEquals(new Object[]{THREE,FOUR,ONE,TWO},mk.getKeys());

  keys=new Integer[]{};

  mk=new MultiKey<>(keys);

  assertArrayEquals(new Object[]{},mk.getKeys());

  keys=new Integer[]{THREE,FOUR,ONE,TWO};

  mk=new MultiKey<>(keys,true);

  assertArrayEquals(new Object[]{THREE,FOUR,ONE,TWO},mk.getKeys());

  keys[3]=FIVE;

  assertArrayEquals(new Object[]{THREE,FOUR,ONE,TWO},mk.getKeys());

  keys=new Integer[]{THREE,FOUR,ONE,TWO};

  mk=new MultiKey<>(keys,false);

  assertArrayEquals(new Object[]{THREE,FOUR,ONE,TWO},mk.getKeys());

  keys[3]=FIVE;

  assertArrayEquals(new Object[]{THREE,FOUR,ONE,FIVE},mk.getKeys());

}

Location: MultiKeyTest.java

Content: 

@Test public void testConstructorsByArrayNull() throws Exception {

  final Integer[] keys=null;

  try {

    new MultiKey<>(keys);

    fail();

  }

 catch (  final NullPointerException ex) {

  }

  try {

    new MultiKey<>(keys,true);

    fail();

  }

 catch (  final NullPointerException ex) {

  }

  try {

    new MultiKey<>(keys,false);

    fail();

  }

 catch (  final NullPointerException ex) {

  }

}

Location: MultiKeyTest.java

Content: 

@Test public void testEqualsAfterSerialization() throws IOException, ClassNotFoundException {

  SystemHashCodeSimulatingKey sysKey=new SystemHashCodeSimulatingKey("test");

  final MultiKey<?> mk=new MultiKey<Object>(ONE,sysKey);

  final Map<MultiKey<?>,Integer> map=new HashMap<>();

  map.put(mk,TWO);

  final ByteArrayOutputStream baos=new ByteArrayOutputStream();

  final ObjectOutputStream out=new ObjectOutputStream(baos);

  out.writeObject(sysKey);

  out.writeObject(map);

  out.close();

  final ByteArrayInputStream bais=new ByteArrayInputStream(baos.toByteArray());

  final ObjectInputStream in=new ObjectInputStream(bais);

  sysKey=(SystemHashCodeSimulatingKey)in.readObject();

  final Map<?,?> map2=(Map<?,?>)in.readObject();

  in.close();

  assertEquals(2,sysKey.hashCode());

  final MultiKey<?> mk2=new MultiKey<Object>(ONE,sysKey);

  assertEquals(TWO,map2.get(mk2));

}

Location: MultiKeyTest.java

Content: 

@Test public void testEqualsAfterSerializationOfDerivedClass() throws IOException, ClassNotFoundException {

  final DerivedMultiKey<?> mk=new DerivedMultiKey<>("A","B");

  final ByteArrayOutputStream baos=new ByteArrayOutputStream();

  final ObjectOutputStream out=new ObjectOutputStream(baos);

  out.writeObject(mk);

  out.close();

  final ByteArrayInputStream bais=new ByteArrayInputStream(baos.toByteArray());

  final ObjectInputStream in=new ObjectInputStream(bais);

  final DerivedMultiKey<?> mk2=(DerivedMultiKey<?>)in.readObject();

  in.close();

  assertEquals(mk.hashCode(),mk2.hashCode());

}

Location: MultiKeyTest.java

Content: 

@Test public void testGetIndexed(){

  final MultiKey<Integer> mk=new MultiKey<>(ONE,TWO);

  assertSame(ONE,mk.getKey(0));

  assertSame(TWO,mk.getKey(1));

  try {

    mk.getKey(-1);

    fail();

  }

 catch (  final IndexOutOfBoundsException ex) {

  }

  try {

    mk.getKey(2);

    fail();

  }

 catch (  final IndexOutOfBoundsException ex) {

  }

}

Location: MultiKeyTest.java

Content: 

@Test public void testGetKeysArrayConstructorCloned(){

  final Integer[] keys=new Integer[]{ONE,TWO};

  final MultiKey<Integer> mk=new MultiKey<>(keys,true);

  final Object[] array=mk.getKeys();

  assertNotSame(array,keys);

  assertArrayEquals(array,keys);

  assertSame(ONE,array[0]);

  assertSame(TWO,array[1]);

  assertEquals(2,array.length);

}

Location: MultiKeyTest.java

Content: 

@Test public void testGetKeysArrayConstructorNonCloned(){

  final Integer[] keys=new Integer[]{ONE,TWO};

  final MultiKey<Integer> mk=new MultiKey<>(keys,false);

  final Object[] array=mk.getKeys();

  assertNotSame(array,keys);

  assertArrayEquals(array,keys);

  assertSame(ONE,array[0]);

  assertSame(TWO,array[1]);

  assertEquals(2,array.length);

}

Location: MultiKeyTest.java

Content: 

@Test public void testGetKeysSimpleConstructor(){

  final MultiKey<Integer> mk=new MultiKey<>(ONE,TWO);

  final Object[] array=mk.getKeys();

  assertSame(ONE,array[0]);

  assertSame(TWO,array[1]);

  assertEquals(2,array.length);

}

Location: MultiKeyTest.java

Content: 

@Test public void testTwoArgCtor(){

  final MultiKeyTest key1=new MultiKeyTest();

  final MultiKeyTest key2=new MultiKeyTest();

  final MultiKeyTest[] keys=new MultiKey<>(key1,key2).getKeys();

  assertNotNull(keys);

}

