Location: ArrayStackTest.java

Content: 

public ArrayStackTest(final String testName){

  super(testName);

}

Location: ArrayStackTest.java

Content: 

public void testNewStack(){

  final ArrayStack<E> stack=makeObject();

  assertTrue("New stack is empty",stack.empty());

  assertEquals("New stack has size zero",0,stack.size());

  try {

    stack.peek();

    fail("peek() should have thrown EmptyStackException");

  }

 catch (  final EmptyStackException e) {

  }

  try {

    stack.pop();

    fail("pop() should have thrown EmptyStackException");

  }

 catch (  final EmptyStackException e) {

  }

}

Location: ArrayStackTest.java

Content: 

@SuppressWarnings("unchecked") public void testPushPeekPop(){

  final ArrayStack<E> stack=makeObject();

  stack.push((E)"First Item");

  assertFalse("Stack is not empty",stack.empty());

  assertEquals("Stack size is one",1,stack.size());

  assertEquals("Top item is 'First Item'","First Item",(String)stack.peek());

  assertEquals("Stack size is one",1,stack.size());

  stack.push((E)"Second Item");

  assertEquals("Stack size is two",2,stack.size());

  assertEquals("Top item is 'Second Item'","Second Item",(String)stack.peek());

  assertEquals("Stack size is two",2,stack.size());

  assertEquals("Popped item is 'Second Item'","Second Item",(String)stack.pop());

  assertEquals("Top item is 'First Item'","First Item",(String)stack.peek());

  assertEquals("Stack size is one",1,stack.size());

  assertEquals("Popped item is 'First Item'","First Item",(String)stack.pop());

  assertEquals("Stack size is zero",0,stack.size());

}

Location: ArrayStackTest.java

Content: 

public ArrayStackTest(final String testName){

  super(testName);

}

Location: ArrayStackTest.java

Content: 

public void testNewStack(){

  final ArrayStack<E> stack=makeObject();

  assertTrue("New stack is empty",stack.empty());

  assertEquals("New stack has size zero",0,stack.size());

  try {

    stack.peek();

    fail("peek() should have thrown EmptyStackException");

  }

 catch (  final EmptyStackException e) {

  }

  try {

    stack.pop();

    fail("pop() should have thrown EmptyStackException");

  }

 catch (  final EmptyStackException e) {

  }

}

Location: ArrayStackTest.java

Content: 

@SuppressWarnings("unchecked") public void testPushPeekPop(){

  final ArrayStack<E> stack=makeObject();

  stack.push((E)"First Item");

  assertFalse("Stack is not empty",stack.empty());

  assertEquals("Stack size is one",1,stack.size());

  assertEquals("Top item is 'First Item'","First Item",(String)stack.peek());

  assertEquals("Stack size is one",1,stack.size());

  stack.push((E)"Second Item");

  assertEquals("Stack size is two",2,stack.size());

  assertEquals("Top item is 'Second Item'","Second Item",(String)stack.peek());

  assertEquals("Stack size is two",2,stack.size());

  assertEquals("Popped item is 'Second Item'","Second Item",(String)stack.pop());

  assertEquals("Top item is 'First Item'","First Item",(String)stack.peek());

  assertEquals("Stack size is one",1,stack.size());

  assertEquals("Popped item is 'First Item'","First Item",(String)stack.pop());

  assertEquals("Stack size is zero",0,stack.size());

}

