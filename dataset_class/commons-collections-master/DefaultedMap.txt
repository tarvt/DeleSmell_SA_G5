Location: DefaultedMap.java

Content: 

/** 

 * Factory method to create a defaulting map. <p> The factory specified is called when a missing key is found. The result will be returned as the result of the map get(key) method.

 * @param < K >  the key type

 * @param < V >  the value type

 * @param map  the map to decorate, must not be null

 * @param factory  the factory to use to create entries, must not be null

 * @return a new defaulting map

 * @throws NullPointerException if map or factory is null

 * @since 4.0

 */

public static <K,V>DefaultedMap<K,V> defaultedMap(final Map<K,V> map,final Factory<? extends V> factory){

  return new DefaultedMap<>(map,FactoryTransformer.factoryTransformer(Objects.requireNonNull(factory,"Factory must not be null")));

}

Location: DefaultedMap.java

Content: 

/** 

 * Constructor that wraps (not copies).

 * @param map  the map to decorate, must not be null

 * @param defaultValueTransformer  the value transformer to use

 * @throws NullPointerException if map or transformer is null

 */

protected DefaultedMap(final Map<K,V> map,final Transformer<? super K,? extends V> defaultValueTransformer){

  super(map);

  this.value=Objects.requireNonNull(defaultValueTransformer,"defaultValueTransformer");

}

Location: DefaultedMap.java

Content: 

/** 

 * Factory method to create a defaulting map. <p> The value specified is returned when a missing key is found.

 * @param < K >  the key type

 * @param < V >  the value type

 * @param map  the map to decorate, must not be null

 * @param defaultValue  the default value to return when the key is not found

 * @return a new defaulting map

 * @throws NullPointerException if map is null

 * @since 4.0

 */

public static <K,V>DefaultedMap<K,V> defaultedMap(final Map<K,V> map,final V defaultValue){

  return new DefaultedMap<>(map,ConstantTransformer.constantTransformer(defaultValue));

}

Location: DefaultedMap.java

Content: 

/** 

 * Constructs a new empty  {@code DefaultedMap} that decorates a {@code HashMap}.

 * @param defaultValueTransformer transformer to use to generate missing values.

 */

public DefaultedMap(final Transformer<? super K,? extends V> defaultValueTransformer){

  this(new HashMap<K,V>(),defaultValueTransformer);

}

Location: DefaultedMap.java

Content: 

/** 

 * Constructs a new empty  {@code DefaultedMap} that decoratesa  {@code HashMap}. <p> The object passed in will be returned by the map whenever an unknown key is requested.

 * @param defaultValue  the default value to return when the key is not found

 */

public DefaultedMap(final V defaultValue){

  this(ConstantTransformer.constantTransformer(defaultValue));

}

Location: DefaultedMap.java

Content: 

/** 

 * Factory method to create a defaulting map. <p> The factory specified is called when a missing key is found. The result will be returned as the result of the map get(key) method.

 * @param < K >  the key type

 * @param < V >  the value type

 * @param map  the map to decorate, must not be null

 * @param factory  the factory to use to create entries, must not be null

 * @return a new defaulting map

 * @throws NullPointerException if map or factory is null

 * @since 4.0

 */

public static <K,V>DefaultedMap<K,V> defaultedMap(final Map<K,V> map,final Factory<? extends V> factory){

  return new DefaultedMap<>(map,FactoryTransformer.factoryTransformer(Objects.requireNonNull(factory,"Factory must not be null")));

}

Location: DefaultedMap.java

Content: 

/** 

 * Constructor that wraps (not copies).

 * @param map  the map to decorate, must not be null

 * @param defaultValueTransformer  the value transformer to use

 * @throws NullPointerException if map or transformer is null

 */

protected DefaultedMap(final Map<K,V> map,final Transformer<? super K,? extends V> defaultValueTransformer){

  super(map);

  this.value=Objects.requireNonNull(defaultValueTransformer,"defaultValueTransformer");

}

Location: DefaultedMap.java

Content: 

/** 

 * Factory method to create a defaulting map. <p> The value specified is returned when a missing key is found.

 * @param < K >  the key type

 * @param < V >  the value type

 * @param map  the map to decorate, must not be null

 * @param defaultValue  the default value to return when the key is not found

 * @return a new defaulting map

 * @throws NullPointerException if map is null

 * @since 4.0

 */

public static <K,V>DefaultedMap<K,V> defaultedMap(final Map<K,V> map,final V defaultValue){

  return new DefaultedMap<>(map,ConstantTransformer.constantTransformer(defaultValue));

}

Location: DefaultedMap.java

Content: 

/** 

 * Constructs a new empty  {@code DefaultedMap} that decorates a {@code HashMap}.

 * @param defaultValueTransformer transformer to use to generate missing values.

 */

public DefaultedMap(final Transformer<? super K,? extends V> defaultValueTransformer){

  this(new HashMap<K,V>(),defaultValueTransformer);

}

Location: DefaultedMap.java

Content: 

/** 

 * Constructs a new empty  {@code DefaultedMap} that decoratesa  {@code HashMap}. <p> The object passed in will be returned by the map whenever an unknown key is requested.

 * @param defaultValue  the default value to return when the key is not found

 */

public DefaultedMap(final V defaultValue){

  this(ConstantTransformer.constantTransformer(defaultValue));

}

