Location: SplitMapUtils.java

Content: 

/** 

 * Get the specified  {@link Get} as an instance of {@link IterableMap}. If  {@code get} implements {@link IterableMap} directly, no conversion will take place.If  {@code get} implements {@link Map} but not {@link IterableMap} it will be decorated.Otherwise an  {@link Unmodifiable} {@link IterableMap} will be returned.

 * @param < K > the key type

 * @param < V > the value type

 * @param get to wrap, must not be null

 * @return {@link IterableMap}

 * @throws NullPointerException if the argument is null

 */

@SuppressWarnings("unchecked") public static <K,V>IterableMap<K,V> readableMap(final Get<K,V> get){

  Objects.requireNonNull(get,"get");

  if (get instanceof Map) {

    return get instanceof IterableMap ? ((IterableMap<K,V>)get) : MapUtils.iterableMap((Map<K,V>)get);

  }

  return new WrappedGet<>(get);

}

Location: SplitMapUtils.java

Content: 

/** 

 * Don't allow instances.

 */

private SplitMapUtils(){

}

Location: SplitMapUtils.java

Content: 

/** 

 * Get the specified  {@link Put} as an instanceof {@link Map}. If  {@code put} implements {@link Map} directly, no conversion will take place.Otherwise a <em>write-only</em>  {@link Map} will be returned.  On such a {@link Map}it is recommended that the result of #put(K, V) be discarded as it likely will not match  {@code V} at runtime.

 * @param < K > the key type

 * @param < V > the element type

 * @param put to wrap, must not be null

 * @return {@link Map}

 * @throws NullPointerException if the argument is null

 */

@SuppressWarnings("unchecked") public static <K,V>Map<K,V> writableMap(final Put<K,V> put){

  Objects.requireNonNull(put,"put");

  if (put instanceof Map) {

    return (Map<K,V>)put;

  }

  return new WrappedPut<>(put);

}

Location: SplitMapUtils.java

Content: 

/** 

 * Get the specified  {@link Get} as an instance of {@link IterableMap}. If  {@code get} implements {@link IterableMap} directly, no conversion will take place.If  {@code get} implements {@link Map} but not {@link IterableMap} it will be decorated.Otherwise an  {@link Unmodifiable} {@link IterableMap} will be returned.

 * @param < K > the key type

 * @param < V > the value type

 * @param get to wrap, must not be null

 * @return {@link IterableMap}

 * @throws NullPointerException if the argument is null

 */

@SuppressWarnings("unchecked") public static <K,V>IterableMap<K,V> readableMap(final Get<K,V> get){

  Objects.requireNonNull(get,"get");

  if (get instanceof Map) {

    return get instanceof IterableMap ? ((IterableMap<K,V>)get) : MapUtils.iterableMap((Map<K,V>)get);

  }

  return new WrappedGet<>(get);

}

Location: SplitMapUtils.java

Content: 

/** 

 * Don't allow instances.

 */

private SplitMapUtils(){

}

Location: SplitMapUtils.java

Content: 

/** 

 * Get the specified  {@link Put} as an instanceof {@link Map}. If  {@code put} implements {@link Map} directly, no conversion will take place.Otherwise a <em>write-only</em>  {@link Map} will be returned.  On such a {@link Map}it is recommended that the result of #put(K, V) be discarded as it likely will not match  {@code V} at runtime.

 * @param < K > the key type

 * @param < V > the element type

 * @param put to wrap, must not be null

 * @return {@link Map}

 * @throws NullPointerException if the argument is null

 */

@SuppressWarnings("unchecked") public static <K,V>Map<K,V> writableMap(final Put<K,V> put){

  Objects.requireNonNull(put,"put");

  if (put instanceof Map) {

    return (Map<K,V>)put;

  }

  return new WrappedPut<>(put);

}

