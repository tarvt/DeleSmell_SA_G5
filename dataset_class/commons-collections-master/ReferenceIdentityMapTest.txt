Location: ReferenceIdentityMapTest.java

Content: 

@SuppressWarnings("unchecked") private Map<K,V> buildRefMap(){

  final K key=(K)new Object();

  final V value=(V)new Object();

  keyReference=new WeakReference<>(key);

  valueReference=new WeakReference<>(value);

  final Map<K,V> testMap=new ReferenceIdentityMap<>(ReferenceStrength.WEAK,ReferenceStrength.HARD,true);

  testMap.put(key,value);

  assertEquals("In map",value,testMap.get(key));

  assertNotNull("Weak reference released early (1)",keyReference.get());

  assertNotNull("Weak reference released early (2)",valueReference.get());

  return testMap;

}

Location: ReferenceIdentityMapTest.java

Content: 

@SuppressWarnings("unused") private static void gc(){

  try {

    final byte[][] tooLarge=new byte[1000000000][1000000000];

    fail("you have too much RAM");

  }

 catch (  final OutOfMemoryError ex) {

    System.gc();

  }

}

Location: ReferenceIdentityMapTest.java

Content: 

public ReferenceIdentityMapTest(final String testName){

  super(testName);

}

Location: ReferenceIdentityMapTest.java

Content: 

@SuppressWarnings("unchecked") public void testBasics(){

  final IterableMap<K,V> map=new ReferenceIdentityMap<>(ReferenceStrength.HARD,ReferenceStrength.HARD);

  assertEquals(0,map.size());

  map.put((K)I1A,(V)I2A);

  assertEquals(1,map.size());

  assertSame(I2A,map.get(I1A));

  assertSame(null,map.get(I1B));

  assertTrue(map.containsKey(I1A));

  assertFalse(map.containsKey(I1B));

  assertTrue(map.containsValue(I2A));

  assertFalse(map.containsValue(I2B));

  map.put((K)I1A,(V)I2B);

  assertEquals(1,map.size());

  assertSame(I2B,map.get(I1A));

  assertSame(null,map.get(I1B));

  assertTrue(map.containsKey(I1A));

  assertFalse(map.containsKey(I1B));

  assertFalse(map.containsValue(I2A));

  assertTrue(map.containsValue(I2B));

  map.put((K)I1B,(V)I2B);

  assertEquals(2,map.size());

  assertSame(I2B,map.get(I1A));

  assertSame(I2B,map.get(I1B));

  assertTrue(map.containsKey(I1A));

  assertTrue(map.containsKey(I1B));

  assertFalse(map.containsValue(I2A));

  assertTrue(map.containsValue(I2B));

}

Location: ReferenceIdentityMapTest.java

Content: 

@SuppressWarnings("unchecked") public void testHashEntry(){

  final IterableMap<K,V> map=new ReferenceIdentityMap<>(ReferenceStrength.HARD,ReferenceStrength.HARD);

  map.put((K)I1A,(V)I2A);

  map.put((K)I1B,(V)I2A);

  final Map.Entry<K,V> entry1=map.entrySet().iterator().next();

  final Iterator<Map.Entry<K,V>> it=map.entrySet().iterator();

  final Map.Entry<K,V> entry2=it.next();

  final Map.Entry<K,V> entry3=it.next();

  assertTrue(entry1.equals(entry2));

  assertTrue(entry2.equals(entry1));

  assertFalse(entry1.equals(entry3));

}

Location: ReferenceIdentityMapTest.java

Content: 

/** 

 * Tests whether purge values setting works 

 */

public void testPurgeValues() throws Exception {

  final Map<K,V> testMap=buildRefMap();

  int iterations=0;

  int bytz=2;

  while (true) {

    System.gc();

    if (iterations++ > 50) {

      fail("Max iterations reached before resource released.");

    }

    testMap.isEmpty();

    if (keyReference.get() == null && valueReference.get() == null) {

      break;

    }

    @SuppressWarnings("unused") final byte[] b=new byte[bytz];

    bytz=bytz * 2;

  }

}

Location: ReferenceIdentityMapTest.java

Content: 

@SuppressWarnings("unchecked") private Map<K,V> buildRefMap(){

  final K key=(K)new Object();

  final V value=(V)new Object();

  keyReference=new WeakReference<>(key);

  valueReference=new WeakReference<>(value);

  final Map<K,V> testMap=new ReferenceIdentityMap<>(ReferenceStrength.WEAK,ReferenceStrength.HARD,true);

  testMap.put(key,value);

  assertEquals("In map",value,testMap.get(key));

  assertNotNull("Weak reference released early (1)",keyReference.get());

  assertNotNull("Weak reference released early (2)",valueReference.get());

  return testMap;

}

Location: ReferenceIdentityMapTest.java

Content: 

@SuppressWarnings("unused") private static void gc(){

  try {

    final byte[][] tooLarge=new byte[1000000000][1000000000];

    fail("you have too much RAM");

  }

 catch (  final OutOfMemoryError ex) {

    System.gc();

  }

}

Location: ReferenceIdentityMapTest.java

Content: 

public ReferenceIdentityMapTest(final String testName){

  super(testName);

}

Location: ReferenceIdentityMapTest.java

Content: 

@SuppressWarnings("unchecked") public void testBasics(){

  final IterableMap<K,V> map=new ReferenceIdentityMap<>(ReferenceStrength.HARD,ReferenceStrength.HARD);

  assertEquals(0,map.size());

  map.put((K)I1A,(V)I2A);

  assertEquals(1,map.size());

  assertSame(I2A,map.get(I1A));

  assertSame(null,map.get(I1B));

  assertTrue(map.containsKey(I1A));

  assertFalse(map.containsKey(I1B));

  assertTrue(map.containsValue(I2A));

  assertFalse(map.containsValue(I2B));

  map.put((K)I1A,(V)I2B);

  assertEquals(1,map.size());

  assertSame(I2B,map.get(I1A));

  assertSame(null,map.get(I1B));

  assertTrue(map.containsKey(I1A));

  assertFalse(map.containsKey(I1B));

  assertFalse(map.containsValue(I2A));

  assertTrue(map.containsValue(I2B));

  map.put((K)I1B,(V)I2B);

  assertEquals(2,map.size());

  assertSame(I2B,map.get(I1A));

  assertSame(I2B,map.get(I1B));

  assertTrue(map.containsKey(I1A));

  assertTrue(map.containsKey(I1B));

  assertFalse(map.containsValue(I2A));

  assertTrue(map.containsValue(I2B));

}

Location: ReferenceIdentityMapTest.java

Content: 

@SuppressWarnings("unchecked") public void testHashEntry(){

  final IterableMap<K,V> map=new ReferenceIdentityMap<>(ReferenceStrength.HARD,ReferenceStrength.HARD);

  map.put((K)I1A,(V)I2A);

  map.put((K)I1B,(V)I2A);

  final Map.Entry<K,V> entry1=map.entrySet().iterator().next();

  final Iterator<Map.Entry<K,V>> it=map.entrySet().iterator();

  final Map.Entry<K,V> entry2=it.next();

  final Map.Entry<K,V> entry3=it.next();

  assertTrue(entry1.equals(entry2));

  assertTrue(entry2.equals(entry1));

  assertFalse(entry1.equals(entry3));

}

Location: ReferenceIdentityMapTest.java

Content: 

/** 

 * Tests whether purge values setting works 

 */

public void testPurgeValues() throws Exception {

  final Map<K,V> testMap=buildRefMap();

  int iterations=0;

  int bytz=2;

  while (true) {

    System.gc();

    if (iterations++ > 50) {

      fail("Max iterations reached before resource released.");

    }

    testMap.isEmpty();

    if (keyReference.get() == null && valueReference.get() == null) {

      break;

    }

    @SuppressWarnings("unused") final byte[] b=new byte[bytz];

    bytz=bytz * 2;

  }

}

