Location: CompositeSet.java

Content: 

/** 

 * Adds these Sets to the list of sets in this composite

 * @param sets  the Sets to be appended to the composite

 */

public void addComposited(final Set<E>... sets){

  if (sets != null) {

    for (    final Set<E> set : sets) {

      addComposited(set);

    }

  }

}

Location: CompositeSet.java

Content: 

/** 

 * Adds these Sets to the list of sets in this composite.

 * @param set1  the first Set to be appended to the composite

 * @param set2  the second Set to be appended to the composite

 */

public void addComposited(final Set<E> set1,final Set<E> set2){

  addComposited(set1);

  addComposited(set2);

}

Location: CompositeSet.java

Content: 

/** 

 * Creates an empty CompositeSet.

 */

public CompositeSet(){

}

Location: CompositeSet.java

Content: 

/** 

 * Creates a composite set with sets as the initial set of composited Sets.

 * @param sets  the initial sets in the composite

 */

public CompositeSet(final Set<E>... sets){

  addComposited(sets);

}

Location: CompositeSet.java

Content: 

/** 

 * Checks whether this composite contains all the elements in the specified collection. <p> This implementation calls  {@code contains()} for each element in thespecified collection.

 * @param coll  the collection to check for

 * @return true if all elements contained

 */

@Override public boolean containsAll(final Collection<?> coll){

  if (coll == null) {

    return false;

  }

  for (  final Object item : coll) {

    if (!contains(item)) {

      return false;

    }

  }

  return true;

}

Location: CompositeSet.java

Content: 

/** 

 * Checks whether this composite set contains the object. <p> This implementation calls  {@code contains()} on each set.

 * @param obj  the object to search for

 * @return true if obj is contained in any of the contained sets

 */

@Override public boolean contains(final Object obj){

  for (  final Set<E> item : all) {

    if (item.contains(obj)) {

      return true;

    }

  }

  return false;

}

Location: CompositeSet.java

Content: 

/** 

 * Gets the set mutator to be used for this CompositeSet.

 * @return the set mutator

 */

protected SetMutator<E> getMutator(){

  return mutator;

}

Location: CompositeSet.java

Content: 

/** 

 * Gets the sets being decorated.

 * @return Unmodifiable list of all sets in this composite.

 */

public List<Set<E>> getSets(){

  return UnmodifiableList.unmodifiableList(all);

}

Location: CompositeSet.java

Content: 

/** 

 * Removes a set from those being decorated in this composite.

 * @param set  set to be removed

 */

public void removeComposited(final Set<E> set){

  all.remove(set);

}

Location: CompositeSet.java

Content: 

/** 

 * Specify a SetMutator strategy instance to handle changes.

 * @param mutator  the mutator to use

 */

public void setMutator(final SetMutator<E> mutator){

  this.mutator=mutator;

}

Location: CompositeSet.java

Content: 

/** 

 * Returns a new Set containing all of the elements.

 * @return A new HashSet containing all of the elements in this composite.The new collection is <i>not</i> backed by this composite.

 */

public Set<E> toSet(){

  return new HashSet<>(this);

}

Location: CompositeSet.java

Content: 

/** 

 * Adds these Sets to the list of sets in this composite

 * @param sets  the Sets to be appended to the composite

 */

public void addComposited(final Set<E>... sets){

  if (sets != null) {

    for (    final Set<E> set : sets) {

      addComposited(set);

    }

  }

}

Location: CompositeSet.java

Content: 

/** 

 * Adds these Sets to the list of sets in this composite.

 * @param set1  the first Set to be appended to the composite

 * @param set2  the second Set to be appended to the composite

 */

public void addComposited(final Set<E> set1,final Set<E> set2){

  addComposited(set1);

  addComposited(set2);

}

Location: CompositeSet.java

Content: 

/** 

 * Creates an empty CompositeSet.

 */

public CompositeSet(){

}

Location: CompositeSet.java

Content: 

/** 

 * Creates a composite set with sets as the initial set of composited Sets.

 * @param sets  the initial sets in the composite

 */

public CompositeSet(final Set<E>... sets){

  addComposited(sets);

}

Location: CompositeSet.java

Content: 

/** 

 * Checks whether this composite contains all the elements in the specified collection. <p> This implementation calls  {@code contains()} for each element in thespecified collection.

 * @param coll  the collection to check for

 * @return true if all elements contained

 */

@Override public boolean containsAll(final Collection<?> coll){

  if (coll == null) {

    return false;

  }

  for (  final Object item : coll) {

    if (!contains(item)) {

      return false;

    }

  }

  return true;

}

Location: CompositeSet.java

Content: 

/** 

 * Checks whether this composite set contains the object. <p> This implementation calls  {@code contains()} on each set.

 * @param obj  the object to search for

 * @return true if obj is contained in any of the contained sets

 */

@Override public boolean contains(final Object obj){

  for (  final Set<E> item : all) {

    if (item.contains(obj)) {

      return true;

    }

  }

  return false;

}

Location: CompositeSet.java

Content: 

/** 

 * Gets the set mutator to be used for this CompositeSet.

 * @return the set mutator

 */

protected SetMutator<E> getMutator(){

  return mutator;

}

Location: CompositeSet.java

Content: 

/** 

 * Gets the sets being decorated.

 * @return Unmodifiable list of all sets in this composite.

 */

public List<Set<E>> getSets(){

  return UnmodifiableList.unmodifiableList(all);

}

Location: CompositeSet.java

Content: 

/** 

 * Removes a set from those being decorated in this composite.

 * @param set  set to be removed

 */

public void removeComposited(final Set<E> set){

  all.remove(set);

}

Location: CompositeSet.java

Content: 

/** 

 * Specify a SetMutator strategy instance to handle changes.

 * @param mutator  the mutator to use

 */

public void setMutator(final SetMutator<E> mutator){

  this.mutator=mutator;

}

Location: CompositeSet.java

Content: 

/** 

 * Returns a new Set containing all of the elements.

 * @return A new HashSet containing all of the elements in this composite.The new collection is <i>not</i> backed by this composite.

 */

public Set<E> toSet(){

  return new HashSet<>(this);

}

