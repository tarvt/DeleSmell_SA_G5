Location: NodeListIterator.java

Content: 

/** 

 * Convenience constructor, which creates a new NodeListIterator from the specified node's childNodes.

 * @param node Node, who's child nodes are wrapped by this class. Must not be null

 * @throws NullPointerException if node is null

 */

public NodeListIterator(final Node node){

  Objects.requireNonNull(node,"node");

  this.nodeList=node.getChildNodes();

}

Location: NodeListIterator.java

Content: 

/** 

 * Constructor, that creates a new NodeListIterator from the specified {@code org.w3c.NodeList}

 * @param nodeList node list, which is wrapped by this class. Must not be null

 * @throws NullPointerException if nodeList is null

 */

public NodeListIterator(final NodeList nodeList){

  this.nodeList=Objects.requireNonNull(nodeList,"nodeList");

}

Location: NodeListIterator.java

Content: 

/** 

 * Convenience constructor, which creates a new NodeListIterator from the specified node's childNodes.

 * @param node Node, who's child nodes are wrapped by this class. Must not be null

 * @throws NullPointerException if node is null

 */

public NodeListIterator(final Node node){

  Objects.requireNonNull(node,"node");

  this.nodeList=node.getChildNodes();

}

Location: NodeListIterator.java

Content: 

/** 

 * Constructor, that creates a new NodeListIterator from the specified {@code org.w3c.NodeList}

 * @param nodeList node list, which is wrapped by this class. Must not be null

 * @throws NullPointerException if nodeList is null

 */

public NodeListIterator(final NodeList nodeList){

  this.nodeList=Objects.requireNonNull(nodeList,"nodeList");

}

