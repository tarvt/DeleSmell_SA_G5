Location: SingletonMap.java

Content: 

/** 

 * Gets the key.

 * @return the key

 */

@Override public K getKey(){

  return key;

}

Location: SingletonMap.java

Content: 

/** 

 * Gets the value.

 * @return the value

 */

@Override public V getValue(){

  return value;

}

Location: SingletonMap.java

Content: 

/** 

 * Compares the specified key to the stored key.

 * @param key  the key to compare

 * @return true if equal

 */

protected boolean isEqualKey(final Object key){

  return key == null ? getKey() == null : key.equals(getKey());

}

Location: SingletonMap.java

Content: 

/** 

 * Compares the specified value to the stored value.

 * @param value  the value to compare

 * @return true if equal

 */

protected boolean isEqualValue(final Object value){

  return value == null ? getValue() == null : value.equals(getValue());

}

Location: SingletonMap.java

Content: 

/** 

 * Sets the value.

 * @param value  the new value to set

 * @return the old value

 */

public V setValue(final V value){

  final V old=this.value;

  this.value=value;

  return old;

}

Location: SingletonMap.java

Content: 

/** 

 * Constructor that creates a map of  {@code null} to {@code null}.

 */

public SingletonMap(){

  this.key=null;

}

Location: SingletonMap.java

Content: 

/** 

 * Constructor specifying the key and value as a  {@code KeyValue}.

 * @param keyValue  the key value pair to use

 */

public SingletonMap(final KeyValue<K,V> keyValue){

  this.key=keyValue.getKey();

  this.value=keyValue.getValue();

}

Location: SingletonMap.java

Content: 

/** 

 * Constructor specifying the key and value.

 * @param key  the key to use

 * @param value  the value to use

 */

public SingletonMap(final K key,final V value){

  this.key=key;

  this.value=value;

}

Location: SingletonMap.java

Content: 

/** 

 * Constructor copying elements from another map.

 * @param map  the map to copy, must be size 1

 * @throws NullPointerException if the map is null

 * @throws IllegalArgumentException if the size is not 1

 */

public SingletonMap(final Map<? extends K,? extends V> map){

  if (map.size() != 1) {

    throw new IllegalArgumentException("The map size must be 1");

  }

  final Map.Entry<? extends K,? extends V> entry=map.entrySet().iterator().next();

  this.key=entry.getKey();

  this.value=entry.getValue();

}

Location: SingletonMap.java

Content: 

/** 

 * Gets the key.

 * @return the key

 */

@Override public K getKey(){

  return key;

}

Location: SingletonMap.java

Content: 

/** 

 * Gets the value.

 * @return the value

 */

@Override public V getValue(){

  return value;

}

Location: SingletonMap.java

Content: 

/** 

 * Compares the specified key to the stored key.

 * @param key  the key to compare

 * @return true if equal

 */

protected boolean isEqualKey(final Object key){

  return key == null ? getKey() == null : key.equals(getKey());

}

Location: SingletonMap.java

Content: 

/** 

 * Compares the specified value to the stored value.

 * @param value  the value to compare

 * @return true if equal

 */

protected boolean isEqualValue(final Object value){

  return value == null ? getValue() == null : value.equals(getValue());

}

Location: SingletonMap.java

Content: 

/** 

 * Sets the value.

 * @param value  the new value to set

 * @return the old value

 */

public V setValue(final V value){

  final V old=this.value;

  this.value=value;

  return old;

}

Location: SingletonMap.java

Content: 

/** 

 * Constructor that creates a map of  {@code null} to {@code null}.

 */

public SingletonMap(){

  this.key=null;

}

Location: SingletonMap.java

Content: 

/** 

 * Constructor specifying the key and value as a  {@code KeyValue}.

 * @param keyValue  the key value pair to use

 */

public SingletonMap(final KeyValue<K,V> keyValue){

  this.key=keyValue.getKey();

  this.value=keyValue.getValue();

}

Location: SingletonMap.java

Content: 

/** 

 * Constructor specifying the key and value.

 * @param key  the key to use

 * @param value  the value to use

 */

public SingletonMap(final K key,final V value){

  this.key=key;

  this.value=value;

}

Location: SingletonMap.java

Content: 

/** 

 * Constructor copying elements from another map.

 * @param map  the map to copy, must be size 1

 * @throws NullPointerException if the map is null

 * @throws IllegalArgumentException if the size is not 1

 */

public SingletonMap(final Map<? extends K,? extends V> map){

  if (map.size() != 1) {

    throw new IllegalArgumentException("The map size must be 1");

  }

  final Map.Entry<? extends K,? extends V> entry=map.entrySet().iterator().next();

  this.key=entry.getKey();

  this.value=entry.getValue();

}

