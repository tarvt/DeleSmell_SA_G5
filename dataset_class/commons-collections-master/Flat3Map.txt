Location: Flat3Map.java

Content: 

/** 

 * Create an instance of the map used for storage when in delegation mode. <p> This can be overridden by subclasses to provide a different map implementation. Not every AbstractHashedMap is suitable, identity and reference based maps would be poor choices.

 * @return a new AbstractHashedMap or subclass

 * @since 3.1

 */

protected AbstractHashedMap<K,V> createDelegateMap(){

  return new HashedMap<>();

}

Location: Flat3Map.java

Content: 

/** 

 * Constructor.

 */

public Flat3Map(){

}

Location: Flat3Map.java

Content: 

/** 

 * Constructor copying elements from another map.

 * @param map  the map to copy

 * @throws NullPointerException if the map is null

 */

public Flat3Map(final Map<? extends K,? extends V> map){

  putAll(map);

}

Location: Flat3Map.java

Content: 

/** 

 * Create an instance of the map used for storage when in delegation mode. <p> This can be overridden by subclasses to provide a different map implementation. Not every AbstractHashedMap is suitable, identity and reference based maps would be poor choices.

 * @return a new AbstractHashedMap or subclass

 * @since 3.1

 */

protected AbstractHashedMap<K,V> createDelegateMap(){

  return new HashedMap<>();

}

Location: Flat3Map.java

Content: 

/** 

 * Constructor.

 */

public Flat3Map(){

}

Location: Flat3Map.java

Content: 

/** 

 * Constructor copying elements from another map.

 * @param map  the map to copy

 * @throws NullPointerException if the map is null

 */

public Flat3Map(final Map<? extends K,? extends V> map){

  putAll(map);

}

