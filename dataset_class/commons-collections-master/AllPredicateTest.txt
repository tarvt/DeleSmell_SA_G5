Location: AllPredicateTest.java

Content: 

/** 

 * Creates a new  {@code TestAllPredicate}.

 */

public AllPredicateTest(){

  super(42);

}

Location: AllPredicateTest.java

Content: 

/** 

 * Tests whether multiple true predicates evaluates to true.

 */

@Test public void allTrue(){

  assertTrue(getPredicateInstance(true,true).evaluate(getTestValue()),"multiple true predicates evaluated to false");

  assertTrue(getPredicateInstance(true,true,true).evaluate(getTestValue()),"multiple true predicates evaluated to false");

}

Location: AllPredicateTest.java

Content: 

/** 

 * Verifies that providing an empty predicate array evaluates to true.

 */

@SuppressWarnings({"unchecked"}) @Test public void emptyArrayToGetInstance(){

  assertTrue(getPredicateInstance(new Predicate[]{}).evaluate(null),"empty array not true");

}

Location: AllPredicateTest.java

Content: 

/** 

 * Verifies that providing an empty predicate collection evaluates to true.

 */

@Test public void emptyCollectionToGetInstance(){

  final Predicate<Integer> allPredicate=getPredicateInstance(Collections.<Predicate<Integer>>emptyList());

  assertTrue(allPredicate.evaluate(getTestValue()),"empty collection not true");

}

Location: AllPredicateTest.java

Content: 

/** 

 * {@inheritDoc}

 */

@Override protected final Predicate<Integer> getPredicateInstance(final Collection<Predicate<Integer>> predicates){

  return AllPredicate.allPredicate(predicates);

}

Location: AllPredicateTest.java

Content: 

/** 

 * {@inheritDoc}

 */

@Override protected final Predicate<Integer> getPredicateInstance(final Predicate<? super Integer>... predicates){

  return AllPredicate.allPredicate(predicates);

}

Location: AllPredicateTest.java

Content: 

/** 

 * Tests whether a single false predicate evaluates to true.

 */

@SuppressWarnings("unchecked") @Test public void oneFalsePredicate(){

  final Predicate<Integer> predicate=createMockPredicate(false);

  assertFalse(allPredicate(predicate).evaluate(getTestValue()),"single false predicate evaluated to true");

}

Location: AllPredicateTest.java

Content: 

/** 

 * Tests whether a single true predicate evaluates to true.

 */

@SuppressWarnings("unchecked") @Test public void oneTruePredicate(){

  final Predicate<Integer> predicate=createMockPredicate(true);

  assertTrue(allPredicate(predicate).evaluate(getTestValue()),"single true predicate evaluated to false");

}

Location: AllPredicateTest.java

Content: 

/** 

 * Tests whether combining some true and one false evaluates to false.  Also verifies that only the first false predicate is actually evaluated

 */

@Test public void trueAndFalseCombined(){

  assertFalse(getPredicateInstance(false,null).evaluate(getTestValue()),"false predicate evaluated to true");

  assertFalse(getPredicateInstance(false,null,null).evaluate(getTestValue()),"false predicate evaluated to true");

  assertFalse(getPredicateInstance(true,false,null).evaluate(getTestValue()),"false predicate evaluated to true");

  assertFalse(getPredicateInstance(true,true,false).evaluate(getTestValue()),"false predicate evaluated to true");

  assertFalse(getPredicateInstance(true,true,false,null).evaluate(getTestValue()),"false predicate evaluated to true");

}

Location: AllPredicateTest.java

Content: 

/** 

 * Creates a new  {@code TestAllPredicate}.

 */

public AllPredicateTest(){

  super(42);

}

Location: AllPredicateTest.java

Content: 

/** 

 * Tests whether multiple true predicates evaluates to true.

 */

@Test public void allTrue(){

  assertTrue(getPredicateInstance(true,true).evaluate(getTestValue()),"multiple true predicates evaluated to false");

  assertTrue(getPredicateInstance(true,true,true).evaluate(getTestValue()),"multiple true predicates evaluated to false");

}

Location: AllPredicateTest.java

Content: 

/** 

 * Verifies that providing an empty predicate array evaluates to true.

 */

@SuppressWarnings({"unchecked"}) @Test public void emptyArrayToGetInstance(){

  assertTrue(getPredicateInstance(new Predicate[]{}).evaluate(null),"empty array not true");

}

Location: AllPredicateTest.java

Content: 

/** 

 * Verifies that providing an empty predicate collection evaluates to true.

 */

@Test public void emptyCollectionToGetInstance(){

  final Predicate<Integer> allPredicate=getPredicateInstance(Collections.<Predicate<Integer>>emptyList());

  assertTrue(allPredicate.evaluate(getTestValue()),"empty collection not true");

}

Location: AllPredicateTest.java

Content: 

/** 

 * {@inheritDoc}

 */

@Override protected final Predicate<Integer> getPredicateInstance(final Collection<Predicate<Integer>> predicates){

  return AllPredicate.allPredicate(predicates);

}

Location: AllPredicateTest.java

Content: 

/** 

 * {@inheritDoc}

 */

@Override protected final Predicate<Integer> getPredicateInstance(final Predicate<? super Integer>... predicates){

  return AllPredicate.allPredicate(predicates);

}

Location: AllPredicateTest.java

Content: 

/** 

 * Tests whether a single false predicate evaluates to true.

 */

@SuppressWarnings("unchecked") @Test public void oneFalsePredicate(){

  final Predicate<Integer> predicate=createMockPredicate(false);

  assertFalse(allPredicate(predicate).evaluate(getTestValue()),"single false predicate evaluated to true");

}

Location: AllPredicateTest.java

Content: 

/** 

 * Tests whether a single true predicate evaluates to true.

 */

@SuppressWarnings("unchecked") @Test public void oneTruePredicate(){

  final Predicate<Integer> predicate=createMockPredicate(true);

  assertTrue(allPredicate(predicate).evaluate(getTestValue()),"single true predicate evaluated to false");

}

Location: AllPredicateTest.java

Content: 

/** 

 * Tests whether combining some true and one false evaluates to false.  Also verifies that only the first false predicate is actually evaluated

 */

@Test public void trueAndFalseCombined(){

  assertFalse(getPredicateInstance(false,null).evaluate(getTestValue()),"false predicate evaluated to true");

  assertFalse(getPredicateInstance(false,null,null).evaluate(getTestValue()),"false predicate evaluated to true");

  assertFalse(getPredicateInstance(true,false,null).evaluate(getTestValue()),"false predicate evaluated to true");

  assertFalse(getPredicateInstance(true,true,false).evaluate(getTestValue()),"false predicate evaluated to true");

  assertFalse(getPredicateInstance(true,true,false,null).evaluate(getTestValue()),"false predicate evaluated to true");

}

