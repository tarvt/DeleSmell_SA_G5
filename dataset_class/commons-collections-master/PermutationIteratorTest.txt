Location: PermutationIteratorTest.java

Content: 

public PermutationIteratorTest(final String testName){

  super(testName);

}

Location: PermutationIteratorTest.java

Content: 

public void testEmptyCollection(){

  final PermutationIterator<Character> it=makeEmptyIterator();

  assertTrue(it.hasNext());

  final List<Character> nextPermutation=it.next();

  assertEquals(0,nextPermutation.size());

  assertFalse(it.hasNext());

}

Location: PermutationIteratorTest.java

Content: 

public void testPermutationException(){

  final List<List<Character>> resultsList=new ArrayList<>();

  final PermutationIterator<Character> it=makeObject();

  while (it.hasNext()) {

    final List<Character> permutation=it.next();

    resultsList.add(permutation);

  }

  try {

    it.next();

    fail();

  }

 catch (  final NoSuchElementException e) {

  }

}

Location: PermutationIteratorTest.java

Content: 

/** 

 * test checking that all the permutations are returned

 */

@SuppressWarnings("boxing") public void testPermutationExhaustivity(){

  final List<Character> perm1=new ArrayList<>();

  final List<Character> perm2=new ArrayList<>();

  final List<Character> perm3=new ArrayList<>();

  final List<Character> perm4=new ArrayList<>();

  final List<Character> perm5=new ArrayList<>();

  final List<Character> perm6=new ArrayList<>();

  perm1.add('A');

  perm2.add('A');

  perm3.add('B');

  perm4.add('B');

  perm5.add('C');

  perm6.add('C');

  perm1.add('B');

  perm2.add('C');

  perm3.add('A');

  perm4.add('C');

  perm5.add('A');

  perm6.add('B');

  perm1.add('C');

  perm2.add('B');

  perm3.add('C');

  perm4.add('A');

  perm5.add('B');

  perm6.add('A');

  final List<List<Character>> results=new ArrayList<>();

  final PermutationIterator<Character> it=makeObject();

  while (it.hasNext()) {

    final List<Character> next=it.next();

    results.add(next);

  }

  assertEquals(6,results.size());

  assertTrue(results.contains(perm1));

  assertTrue(results.contains(perm2));

  assertTrue(results.contains(perm3));

  assertTrue(results.contains(perm4));

  assertTrue(results.contains(perm5));

  assertTrue(results.contains(perm6));

}

Location: PermutationIteratorTest.java

Content: 

@SuppressWarnings("boxing") public void testPermutationResultSize(){

  int factorial=1;

  for (int i=0; i < 8; i++, factorial*=i) {

    final List<Integer> list=new ArrayList<>();

    for (int j=0; j < i; j++) {

      list.add(j);

    }

    final Iterator<List<Integer>> it=new PermutationIterator<>(list);

    int count=0;

    while (it.hasNext()) {

      it.next();

      count++;

    }

    assertEquals(factorial,count);

  }

}

Location: PermutationIteratorTest.java

Content: 

/** 

 * test checking that all the permutations are returned only once.

 */

public void testPermutationUnicity(){

  final List<List<Character>> resultsList=new ArrayList<>();

  final Set<List<Character>> resultsSet=new HashSet<>();

  final PermutationIterator<Character> it=makeObject();

  while (it.hasNext()) {

    final List<Character> permutation=it.next();

    resultsList.add(permutation);

    resultsSet.add(permutation);

  }

  assertEquals(6,resultsList.size());

  assertEquals(6,resultsSet.size());

}

Location: PermutationIteratorTest.java

Content: 

public void testPermutatorHasMore(){

  final PermutationIterator<Character> it=makeObject();

  for (int i=0; i < 6; i++) {

    assertTrue(it.hasNext());

    it.next();

  }

  assertFalse(it.hasNext());

}

Location: PermutationIteratorTest.java

Content: 

public PermutationIteratorTest(final String testName){

  super(testName);

}

Location: PermutationIteratorTest.java

Content: 

public void testEmptyCollection(){

  final PermutationIterator<Character> it=makeEmptyIterator();

  assertTrue(it.hasNext());

  final List<Character> nextPermutation=it.next();

  assertEquals(0,nextPermutation.size());

  assertFalse(it.hasNext());

}

Location: PermutationIteratorTest.java

Content: 

public void testPermutationException(){

  final List<List<Character>> resultsList=new ArrayList<>();

  final PermutationIterator<Character> it=makeObject();

  while (it.hasNext()) {

    final List<Character> permutation=it.next();

    resultsList.add(permutation);

  }

  try {

    it.next();

    fail();

  }

 catch (  final NoSuchElementException e) {

  }

}

Location: PermutationIteratorTest.java

Content: 

/** 

 * test checking that all the permutations are returned

 */

@SuppressWarnings("boxing") public void testPermutationExhaustivity(){

  final List<Character> perm1=new ArrayList<>();

  final List<Character> perm2=new ArrayList<>();

  final List<Character> perm3=new ArrayList<>();

  final List<Character> perm4=new ArrayList<>();

  final List<Character> perm5=new ArrayList<>();

  final List<Character> perm6=new ArrayList<>();

  perm1.add('A');

  perm2.add('A');

  perm3.add('B');

  perm4.add('B');

  perm5.add('C');

  perm6.add('C');

  perm1.add('B');

  perm2.add('C');

  perm3.add('A');

  perm4.add('C');

  perm5.add('A');

  perm6.add('B');

  perm1.add('C');

  perm2.add('B');

  perm3.add('C');

  perm4.add('A');

  perm5.add('B');

  perm6.add('A');

  final List<List<Character>> results=new ArrayList<>();

  final PermutationIterator<Character> it=makeObject();

  while (it.hasNext()) {

    final List<Character> next=it.next();

    results.add(next);

  }

  assertEquals(6,results.size());

  assertTrue(results.contains(perm1));

  assertTrue(results.contains(perm2));

  assertTrue(results.contains(perm3));

  assertTrue(results.contains(perm4));

  assertTrue(results.contains(perm5));

  assertTrue(results.contains(perm6));

}

Location: PermutationIteratorTest.java

Content: 

@SuppressWarnings("boxing") public void testPermutationResultSize(){

  int factorial=1;

  for (int i=0; i < 8; i++, factorial*=i) {

    final List<Integer> list=new ArrayList<>();

    for (int j=0; j < i; j++) {

      list.add(j);

    }

    final Iterator<List<Integer>> it=new PermutationIterator<>(list);

    int count=0;

    while (it.hasNext()) {

      it.next();

      count++;

    }

    assertEquals(factorial,count);

  }

}

Location: PermutationIteratorTest.java

Content: 

/** 

 * test checking that all the permutations are returned only once.

 */

public void testPermutationUnicity(){

  final List<List<Character>> resultsList=new ArrayList<>();

  final Set<List<Character>> resultsSet=new HashSet<>();

  final PermutationIterator<Character> it=makeObject();

  while (it.hasNext()) {

    final List<Character> permutation=it.next();

    resultsList.add(permutation);

    resultsSet.add(permutation);

  }

  assertEquals(6,resultsList.size());

  assertEquals(6,resultsSet.size());

}

Location: PermutationIteratorTest.java

Content: 

public void testPermutatorHasMore(){

  final PermutationIterator<Character> it=makeObject();

  for (int i=0; i < 6; i++) {

    assertTrue(it.hasNext());

    it.next();

  }

  assertFalse(it.hasNext());

}

