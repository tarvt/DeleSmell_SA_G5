Location: LazyList.java

Content: 

private E element(final int index){

  if (factory != null) {

    return factory.create();

  }

  if (transformer != null) {

    return transformer.transform(index);

  }

  throw new IllegalStateException("Factory and Transformer are both null!");

}

Location: LazyList.java

Content: 

/** 

 * Constructor that wraps (not copies).

 * @param list  the list to decorate, must not be null

 * @param factory  the factory to use for creation, must not be null

 * @throws NullPointerException if list or factory is null

 */

protected LazyList(final List<E> list,final Factory<? extends E> factory){

  super(list);

  this.factory=Objects.requireNonNull(factory);

  this.transformer=null;

}

Location: LazyList.java

Content: 

/** 

 * Constructor that wraps (not copies).

 * @param list  the list to decorate, must not be null

 * @param transformer  the transformer to use for creation, must not be null

 * @throws NullPointerException if list or transformer is null

 */

protected LazyList(final List<E> list,final Transformer<Integer,? extends E> transformer){

  super(list);

  this.factory=null;

  this.transformer=Objects.requireNonNull(transformer);

}

Location: LazyList.java

Content: 

private E element(final int index){

  if (factory != null) {

    return factory.create();

  }

  if (transformer != null) {

    return transformer.transform(index);

  }

  throw new IllegalStateException("Factory and Transformer are both null!");

}

Location: LazyList.java

Content: 

/** 

 * Constructor that wraps (not copies).

 * @param list  the list to decorate, must not be null

 * @param factory  the factory to use for creation, must not be null

 * @throws NullPointerException if list or factory is null

 */

protected LazyList(final List<E> list,final Factory<? extends E> factory){

  super(list);

  this.factory=Objects.requireNonNull(factory);

  this.transformer=null;

}

Location: LazyList.java

Content: 

/** 

 * Constructor that wraps (not copies).

 * @param list  the list to decorate, must not be null

 * @param transformer  the transformer to use for creation, must not be null

 * @throws NullPointerException if list or transformer is null

 */

protected LazyList(final List<E> list,final Transformer<Integer,? extends E> transformer){

  super(list);

  this.factory=null;

  this.transformer=Objects.requireNonNull(transformer);

}

