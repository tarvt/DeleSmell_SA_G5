Location: PredicatedListTest.java

Content: 

protected List<E> decorateList(final List<E> list,final Predicate<E> predicate){

  return PredicatedList.predicatedList(list,predicate);

}

Location: PredicatedListTest.java

Content: 

public List<E> makeTestList(){

  return decorateList(new ArrayList<E>(),testPredicate);

}

Location: PredicatedListTest.java

Content: 

public PredicatedListTest(final String testName){

  super(testName);

}

Location: PredicatedListTest.java

Content: 

@SuppressWarnings("unchecked") public void testIllegalSet(){

  final List<E> list=makeTestList();

  try {

    list.set(0,(E)Integer.valueOf(3));

    fail("Integer should fail string predicate.");

  }

 catch (  final IllegalArgumentException e) {

  }

}

Location: PredicatedListTest.java

Content: 

@SuppressWarnings("unchecked") public void testLegalAddAll(){

  final List<E> list=makeTestList();

  list.add((E)"zero");

  final List<E> elements=new ArrayList<>();

  elements.add((E)"one");

  elements.add((E)"two");

  elements.add((E)"three");

  list.addAll(1,elements);

  assertTrue("List should contain legal element",list.contains("zero"));

  assertTrue("List should contain legal element",list.contains("one"));

  assertTrue("List should contain legal element",list.contains("two"));

  assertTrue("List should contain legal element",list.contains("three"));

}

Location: PredicatedListTest.java

Content: 

protected List<E> decorateList(final List<E> list,final Predicate<E> predicate){

  return PredicatedList.predicatedList(list,predicate);

}

Location: PredicatedListTest.java

Content: 

public List<E> makeTestList(){

  return decorateList(new ArrayList<E>(),testPredicate);

}

Location: PredicatedListTest.java

Content: 

public PredicatedListTest(final String testName){

  super(testName);

}

Location: PredicatedListTest.java

Content: 

@SuppressWarnings("unchecked") public void testIllegalSet(){

  final List<E> list=makeTestList();

  try {

    list.set(0,(E)Integer.valueOf(3));

    fail("Integer should fail string predicate.");

  }

 catch (  final IllegalArgumentException e) {

  }

}

Location: PredicatedListTest.java

Content: 

@SuppressWarnings("unchecked") public void testLegalAddAll(){

  final List<E> list=makeTestList();

  list.add((E)"zero");

  final List<E> elements=new ArrayList<>();

  elements.add((E)"one");

  elements.add((E)"two");

  elements.add((E)"three");

  list.addAll(1,elements);

  assertTrue("List should contain legal element",list.contains("zero"));

  assertTrue("List should contain legal element",list.contains("one"));

  assertTrue("List should contain legal element",list.contains("two"));

  assertTrue("List should contain legal element",list.contains("three"));

}

