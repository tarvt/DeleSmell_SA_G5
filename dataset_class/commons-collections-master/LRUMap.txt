Location: LRUMap.java

Content: 

/** 

 * Adds a new key-value mapping into this map. <p> This implementation checks the LRU size and determines whether to discard an entry or not using  {@link #removeLRU(AbstractLinkedMap.LinkEntry)}. <p> From Commons Collections 3.1 this method uses  {@link #isFull()} ratherthan accessing  {@code size} and {@code maxSize} directly.It also handles the scanUntilRemovable functionality.

 * @param hashIndex  the index into the data array to store at

 * @param hashCode  the hash code of the key to add

 * @param key  the key to add

 * @param value  the value to add

 */

@Override protected void addMapping(final int hashIndex,final int hashCode,final K key,final V value){

  if (isFull()) {

    LinkEntry<K,V> reuse=header.after;

    boolean removeLRUEntry=false;

    if (scanUntilRemovable) {

      while (reuse != header && reuse != null) {

        if (removeLRU(reuse)) {

          removeLRUEntry=true;

          break;

        }

        reuse=reuse.after;

      }

      if (reuse == null) {

        throw new IllegalStateException("Entry.after=null, header.after=" + header.after + " header.before="+ header.before+ " key="+ key+ " value="+ value+ " size="+ size+ " maxSize="+ maxSize+ " This should not occur if your keys are immutable and you used synchronization properly.");

      }

    }

 else {

      removeLRUEntry=removeLRU(reuse);

    }

    if (removeLRUEntry) {

      if (reuse == null) {

        throw new IllegalStateException("reuse=null, header.after=" + header.after + " header.before="+ header.before+ " key="+ key+ " value="+ value+ " size="+ size+ " maxSize="+ maxSize+ " This should not occur if your keys are immutable and you used synchronization properly.");

      }

      reuseMapping(reuse,hashIndex,hashCode,key,value);

    }

 else {

      super.addMapping(hashIndex,hashCode,key,value);

    }

  }

 else {

    super.addMapping(hashIndex,hashCode,key,value);

  }

}

Location: LRUMap.java

Content: 

/** 

 * Gets the value mapped to the key specified. <p> If  {@code updateToMRU} is {@code true}, the position of the key in the map is changed to the most recently used position (last), otherwise the iteration order is not changed by this operation.

 * @param key  the key

 * @param updateToMRU  whether the key shall be updated to themost recently used position

 * @return the mapped value, null if no match

 * @since 4.1

 */

public V get(final Object key,final boolean updateToMRU){

  final LinkEntry<K,V> entry=getEntry(key);

  if (entry == null) {

    return null;

  }

  if (updateToMRU) {

    moveToMRU(entry);

  }

  return entry.getValue();

}

Location: LRUMap.java

Content: 

/** 

 * Whether this LRUMap will scan until a removable entry is found when the map is full.

 * @return true if this map scans

 * @since 3.1

 */

public boolean isScanUntilRemovable(){

  return scanUntilRemovable;

}

Location: LRUMap.java

Content: 

/** 

 * Constructs a new empty map with a maximum size of 100.

 */

public LRUMap(){

  this(DEFAULT_MAX_SIZE,DEFAULT_LOAD_FACTOR,false);

}

Location: LRUMap.java

Content: 

/** 

 * Constructs a new, empty map with the specified maximum size.

 * @param maxSize  the maximum size of the map

 * @throws IllegalArgumentException if the maximum size is less than one

 */

public LRUMap(final int maxSize){

  this(maxSize,DEFAULT_LOAD_FACTOR);

}

Location: LRUMap.java

Content: 

/** 

 * Constructs a new, empty map with the specified maximum size.

 * @param maxSize  the maximum size of the map

 * @param scanUntilRemovable  scan until a removable entry is found, default false

 * @throws IllegalArgumentException if the maximum size is less than one

 * @since 3.1

 */

public LRUMap(final int maxSize,final boolean scanUntilRemovable){

  this(maxSize,DEFAULT_LOAD_FACTOR,scanUntilRemovable);

}

Location: LRUMap.java

Content: 

/** 

 * Constructs a new, empty map with the specified max capacity and load factor.

 * @param maxSize  the maximum size of the map

 * @param loadFactor  the load factor

 * @throws IllegalArgumentException if the maximum size is less than one

 * @throws IllegalArgumentException if the load factor is less than zero

 */

public LRUMap(final int maxSize,final float loadFactor){

  this(maxSize,loadFactor,false);

}

Location: LRUMap.java

Content: 

/** 

 * Constructs a new, empty map with the specified max capacity and load factor.

 * @param maxSize  the maximum size of the map

 * @param loadFactor  the load factor

 * @param scanUntilRemovable  scan until a removable entry is found, default false

 * @throws IllegalArgumentException if the maximum size is less than one

 * @throws IllegalArgumentException if the load factor is less than zero

 * @since 3.1

 */

public LRUMap(final int maxSize,final float loadFactor,final boolean scanUntilRemovable){

  this(maxSize,maxSize,loadFactor,scanUntilRemovable);

}

Location: LRUMap.java

Content: 

/** 

 * Constructs a new, empty map with the specified maximum size.

 * @param maxSize  the maximum size of the map

 * @param initialSize  the initial size of the map

 * @throws IllegalArgumentException if the maximum size is less than one

 * @throws IllegalArgumentException if the initial size is negative or larger than the maximum size

 * @since 4.1

 */

public LRUMap(final int maxSize,final int initialSize){

  this(maxSize,initialSize,DEFAULT_LOAD_FACTOR);

}

Location: LRUMap.java

Content: 

/** 

 * Constructs a new, empty map with the specified max / initial capacity and load factor.

 * @param maxSize  the maximum size of the map

 * @param initialSize  the initial size of the map

 * @param loadFactor  the load factor

 * @throws IllegalArgumentException if the maximum size is less than one

 * @throws IllegalArgumentException if the initial size is negative or larger than the maximum size

 * @throws IllegalArgumentException if the load factor is less than zero

 * @since 4.1

 */

public LRUMap(final int maxSize,final int initialSize,final float loadFactor){

  this(maxSize,initialSize,loadFactor,false);

}

Location: LRUMap.java

Content: 

/** 

 * Constructs a new, empty map with the specified max / initial capacity and load factor.

 * @param maxSize  the maximum size of the map

 * @param initialSize  the initial size of the map

 * @param loadFactor  the load factor

 * @param scanUntilRemovable  scan until a removable entry is found, default false

 * @throws IllegalArgumentException if the maximum size is less than one

 * @throws IllegalArgumentException if the initial size is negative or larger than the maximum size

 * @throws IllegalArgumentException if the load factor is less than zero

 * @since 4.1

 */

public LRUMap(final int maxSize,final int initialSize,final float loadFactor,final boolean scanUntilRemovable){

  super(initialSize,loadFactor);

  if (maxSize < 1) {

    throw new IllegalArgumentException("LRUMap max size must be greater than 0");

  }

  if (initialSize > maxSize) {

    throw new IllegalArgumentException("LRUMap initial size must not be greater than max size");

  }

  this.maxSize=maxSize;

  this.scanUntilRemovable=scanUntilRemovable;

}

Location: LRUMap.java

Content: 

/** 

 * Constructor copying elements from another map. <p> The maximum size is set from the map's size.

 * @param map  the map to copy

 * @throws NullPointerException if the map is null

 * @throws IllegalArgumentException if the map is empty

 */

public LRUMap(final Map<? extends K,? extends V> map){

  this(map,false);

}

Location: LRUMap.java

Content: 

/** 

 * Constructor copying elements from another map. <p>The maximum size is set from the map's size.</p>

 * @param map  the map to copy

 * @param scanUntilRemovable  scan until a removable entry is found, default false

 * @throws NullPointerException if the map is null

 * @throws IllegalArgumentException if the map is empty

 * @since 3.1

 */

public LRUMap(final Map<? extends K,? extends V> map,final boolean scanUntilRemovable){

  this(map.size(),DEFAULT_LOAD_FACTOR,scanUntilRemovable);

  putAll(map);

}

Location: LRUMap.java

Content: 

/** 

 * Moves an entry to the MRU position at the end of the list. <p> This implementation moves the updated entry to the end of the list.

 * @param entry  the entry to update

 */

protected void moveToMRU(final LinkEntry<K,V> entry){

  if (entry.after != header) {

    modCount++;

    if (entry.before == null) {

      throw new IllegalStateException("Entry.before is null." + " This should not occur if your keys are immutable, and you have used synchronization properly.");

    }

    entry.before.after=entry.after;

    entry.after.before=entry.before;

    entry.after=header;

    entry.before=header.before;

    header.before.after=entry;

    header.before=entry;

  }

 else   if (entry == header) {

    throw new IllegalStateException("Can't move header to MRU" + " This should not occur if your keys are immutable, and you have used synchronization properly.");

  }

}

Location: LRUMap.java

Content: 

/** 

 * Subclass method to control removal of the least recently used entry from the map. <p> This method exists for subclasses to override. A subclass may wish to provide cleanup of resources when an entry is removed. For example: <pre> protected boolean removeLRU(LinkEntry entry) { releaseResources(entry.getValue());  // release resources held by entry return true;  // actually delete entry } </pre> <p> Alternatively, a subclass may choose to not remove the entry or selectively keep certain LRU entries. For example: <pre> protected boolean removeLRU(LinkEntry entry) { if (entry.getKey().toString().startsWith("System.")) { return false;  // entry not removed from LRUMap } else { return true;  // actually delete entry } } </pre> The effect of returning false is dependent on the scanUntilRemovable flag. If the flag is true, the next LRU entry will be passed to this method and so on until one returns false and is removed, or every entry in the map has been passed. If the scanUntilRemovable flag is false, the map will exceed the maximum size. <p> NOTE: Commons Collections 3.0 passed the wrong entry to this method. This is fixed in version 3.1 onwards.

 * @param entry  the entry to be removed

 * @return {@code true}

 */

protected boolean removeLRU(final LinkEntry<K,V> entry){

  return true;

}

Location: LRUMap.java

Content: 

/** 

 * Reuses an entry by removing it and moving it to a new place in the map. <p> This method uses  {@link #removeEntry},  {@link #reuseEntry} and {@link #addEntry}.

 * @param entry  the entry to reuse

 * @param hashIndex  the index into the data array to store at

 * @param hashCode  the hash code of the key to add

 * @param key  the key to add

 * @param value  the value to add

 */

protected void reuseMapping(final LinkEntry<K,V> entry,final int hashIndex,final int hashCode,final K key,final V value){

  try {

    final int removeIndex=hashIndex(entry.hashCode,data.length);

    final HashEntry<K,V>[] tmp=data;

    HashEntry<K,V> loop=tmp[removeIndex];

    HashEntry<K,V> previous=null;

    while (loop != entry && loop != null) {

      previous=loop;

      loop=loop.next;

    }

    if (loop == null) {

      throw new IllegalStateException("Entry.next=null, data[removeIndex]=" + data[removeIndex] + " previous="+ previous+ " key="+ key+ " value="+ value+ " size="+ size+ " maxSize="+ maxSize+ " This should not occur if your keys are immutable, and you have used synchronization properly.");

    }

    modCount++;

    removeEntry(entry,removeIndex,previous);

    reuseEntry(entry,hashIndex,hashCode,key,value);

    addEntry(entry,hashIndex);

  }

 catch (  final NullPointerException ex) {

    throw new IllegalStateException("NPE, entry=" + entry + " entryIsHeader="+ (entry == header)+ " key="+ key+ " value="+ value+ " size="+ size+ " maxSize="+ maxSize+ " This should not occur if your keys are immutable, and you have used synchronization properly.");

  }

}

Location: LRUMap.java

Content: 

/** 

 * Updates an existing key-value mapping. <p> This implementation moves the updated entry to the end of the list using  {@link #moveToMRU(AbstractLinkedMap.LinkEntry)}.

 * @param entry  the entry to update

 * @param newValue  the new value to store

 */

@Override protected void updateEntry(final HashEntry<K,V> entry,final V newValue){

  moveToMRU((LinkEntry<K,V>)entry);

  entry.setValue(newValue);

}

Location: LRUMap.java

Content: 

/** 

 * Adds a new key-value mapping into this map. <p> This implementation checks the LRU size and determines whether to discard an entry or not using  {@link #removeLRU(AbstractLinkedMap.LinkEntry)}. <p> From Commons Collections 3.1 this method uses  {@link #isFull()} ratherthan accessing  {@code size} and {@code maxSize} directly.It also handles the scanUntilRemovable functionality.

 * @param hashIndex  the index into the data array to store at

 * @param hashCode  the hash code of the key to add

 * @param key  the key to add

 * @param value  the value to add

 */

@Override protected void addMapping(final int hashIndex,final int hashCode,final K key,final V value){

  if (isFull()) {

    LinkEntry<K,V> reuse=header.after;

    boolean removeLRUEntry=false;

    if (scanUntilRemovable) {

      while (reuse != header && reuse != null) {

        if (removeLRU(reuse)) {

          removeLRUEntry=true;

          break;

        }

        reuse=reuse.after;

      }

      if (reuse == null) {

        throw new IllegalStateException("Entry.after=null, header.after=" + header.after + " header.before="+ header.before+ " key="+ key+ " value="+ value+ " size="+ size+ " maxSize="+ maxSize+ " This should not occur if your keys are immutable and you used synchronization properly.");

      }

    }

 else {

      removeLRUEntry=removeLRU(reuse);

    }

    if (removeLRUEntry) {

      if (reuse == null) {

        throw new IllegalStateException("reuse=null, header.after=" + header.after + " header.before="+ header.before+ " key="+ key+ " value="+ value+ " size="+ size+ " maxSize="+ maxSize+ " This should not occur if your keys are immutable and you used synchronization properly.");

      }

      reuseMapping(reuse,hashIndex,hashCode,key,value);

    }

 else {

      super.addMapping(hashIndex,hashCode,key,value);

    }

  }

 else {

    super.addMapping(hashIndex,hashCode,key,value);

  }

}

Location: LRUMap.java

Content: 

/** 

 * Gets the value mapped to the key specified. <p> If  {@code updateToMRU} is {@code true}, the position of the key in the map is changed to the most recently used position (last), otherwise the iteration order is not changed by this operation.

 * @param key  the key

 * @param updateToMRU  whether the key shall be updated to themost recently used position

 * @return the mapped value, null if no match

 * @since 4.1

 */

public V get(final Object key,final boolean updateToMRU){

  final LinkEntry<K,V> entry=getEntry(key);

  if (entry == null) {

    return null;

  }

  if (updateToMRU) {

    moveToMRU(entry);

  }

  return entry.getValue();

}

Location: LRUMap.java

Content: 

/** 

 * Whether this LRUMap will scan until a removable entry is found when the map is full.

 * @return true if this map scans

 * @since 3.1

 */

public boolean isScanUntilRemovable(){

  return scanUntilRemovable;

}

Location: LRUMap.java

Content: 

/** 

 * Constructs a new empty map with a maximum size of 100.

 */

public LRUMap(){

  this(DEFAULT_MAX_SIZE,DEFAULT_LOAD_FACTOR,false);

}

Location: LRUMap.java

Content: 

/** 

 * Constructs a new, empty map with the specified maximum size.

 * @param maxSize  the maximum size of the map

 * @throws IllegalArgumentException if the maximum size is less than one

 */

public LRUMap(final int maxSize){

  this(maxSize,DEFAULT_LOAD_FACTOR);

}

Location: LRUMap.java

Content: 

/** 

 * Constructs a new, empty map with the specified maximum size.

 * @param maxSize  the maximum size of the map

 * @param scanUntilRemovable  scan until a removable entry is found, default false

 * @throws IllegalArgumentException if the maximum size is less than one

 * @since 3.1

 */

public LRUMap(final int maxSize,final boolean scanUntilRemovable){

  this(maxSize,DEFAULT_LOAD_FACTOR,scanUntilRemovable);

}

Location: LRUMap.java

Content: 

/** 

 * Constructs a new, empty map with the specified max capacity and load factor.

 * @param maxSize  the maximum size of the map

 * @param loadFactor  the load factor

 * @throws IllegalArgumentException if the maximum size is less than one

 * @throws IllegalArgumentException if the load factor is less than zero

 */

public LRUMap(final int maxSize,final float loadFactor){

  this(maxSize,loadFactor,false);

}

Location: LRUMap.java

Content: 

/** 

 * Constructs a new, empty map with the specified max capacity and load factor.

 * @param maxSize  the maximum size of the map

 * @param loadFactor  the load factor

 * @param scanUntilRemovable  scan until a removable entry is found, default false

 * @throws IllegalArgumentException if the maximum size is less than one

 * @throws IllegalArgumentException if the load factor is less than zero

 * @since 3.1

 */

public LRUMap(final int maxSize,final float loadFactor,final boolean scanUntilRemovable){

  this(maxSize,maxSize,loadFactor,scanUntilRemovable);

}

Location: LRUMap.java

Content: 

/** 

 * Constructs a new, empty map with the specified maximum size.

 * @param maxSize  the maximum size of the map

 * @param initialSize  the initial size of the map

 * @throws IllegalArgumentException if the maximum size is less than one

 * @throws IllegalArgumentException if the initial size is negative or larger than the maximum size

 * @since 4.1

 */

public LRUMap(final int maxSize,final int initialSize){

  this(maxSize,initialSize,DEFAULT_LOAD_FACTOR);

}

Location: LRUMap.java

Content: 

/** 

 * Constructs a new, empty map with the specified max / initial capacity and load factor.

 * @param maxSize  the maximum size of the map

 * @param initialSize  the initial size of the map

 * @param loadFactor  the load factor

 * @throws IllegalArgumentException if the maximum size is less than one

 * @throws IllegalArgumentException if the initial size is negative or larger than the maximum size

 * @throws IllegalArgumentException if the load factor is less than zero

 * @since 4.1

 */

public LRUMap(final int maxSize,final int initialSize,final float loadFactor){

  this(maxSize,initialSize,loadFactor,false);

}

Location: LRUMap.java

Content: 

/** 

 * Constructs a new, empty map with the specified max / initial capacity and load factor.

 * @param maxSize  the maximum size of the map

 * @param initialSize  the initial size of the map

 * @param loadFactor  the load factor

 * @param scanUntilRemovable  scan until a removable entry is found, default false

 * @throws IllegalArgumentException if the maximum size is less than one

 * @throws IllegalArgumentException if the initial size is negative or larger than the maximum size

 * @throws IllegalArgumentException if the load factor is less than zero

 * @since 4.1

 */

public LRUMap(final int maxSize,final int initialSize,final float loadFactor,final boolean scanUntilRemovable){

  super(initialSize,loadFactor);

  if (maxSize < 1) {

    throw new IllegalArgumentException("LRUMap max size must be greater than 0");

  }

  if (initialSize > maxSize) {

    throw new IllegalArgumentException("LRUMap initial size must not be greater than max size");

  }

  this.maxSize=maxSize;

  this.scanUntilRemovable=scanUntilRemovable;

}

Location: LRUMap.java

Content: 

/** 

 * Constructor copying elements from another map. <p> The maximum size is set from the map's size.

 * @param map  the map to copy

 * @throws NullPointerException if the map is null

 * @throws IllegalArgumentException if the map is empty

 */

public LRUMap(final Map<? extends K,? extends V> map){

  this(map,false);

}

Location: LRUMap.java

Content: 

/** 

 * Constructor copying elements from another map. <p>The maximum size is set from the map's size.</p>

 * @param map  the map to copy

 * @param scanUntilRemovable  scan until a removable entry is found, default false

 * @throws NullPointerException if the map is null

 * @throws IllegalArgumentException if the map is empty

 * @since 3.1

 */

public LRUMap(final Map<? extends K,? extends V> map,final boolean scanUntilRemovable){

  this(map.size(),DEFAULT_LOAD_FACTOR,scanUntilRemovable);

  putAll(map);

}

Location: LRUMap.java

Content: 

/** 

 * Moves an entry to the MRU position at the end of the list. <p> This implementation moves the updated entry to the end of the list.

 * @param entry  the entry to update

 */

protected void moveToMRU(final LinkEntry<K,V> entry){

  if (entry.after != header) {

    modCount++;

    if (entry.before == null) {

      throw new IllegalStateException("Entry.before is null." + " This should not occur if your keys are immutable, and you have used synchronization properly.");

    }

    entry.before.after=entry.after;

    entry.after.before=entry.before;

    entry.after=header;

    entry.before=header.before;

    header.before.after=entry;

    header.before=entry;

  }

 else   if (entry == header) {

    throw new IllegalStateException("Can't move header to MRU" + " This should not occur if your keys are immutable, and you have used synchronization properly.");

  }

}

Location: LRUMap.java

Content: 

/** 

 * Subclass method to control removal of the least recently used entry from the map. <p> This method exists for subclasses to override. A subclass may wish to provide cleanup of resources when an entry is removed. For example: <pre> protected boolean removeLRU(LinkEntry entry) { releaseResources(entry.getValue());  // release resources held by entry return true;  // actually delete entry } </pre> <p> Alternatively, a subclass may choose to not remove the entry or selectively keep certain LRU entries. For example: <pre> protected boolean removeLRU(LinkEntry entry) { if (entry.getKey().toString().startsWith("System.")) { return false;  // entry not removed from LRUMap } else { return true;  // actually delete entry } } </pre> The effect of returning false is dependent on the scanUntilRemovable flag. If the flag is true, the next LRU entry will be passed to this method and so on until one returns false and is removed, or every entry in the map has been passed. If the scanUntilRemovable flag is false, the map will exceed the maximum size. <p> NOTE: Commons Collections 3.0 passed the wrong entry to this method. This is fixed in version 3.1 onwards.

 * @param entry  the entry to be removed

 * @return {@code true}

 */

protected boolean removeLRU(final LinkEntry<K,V> entry){

  return true;

}

Location: LRUMap.java

Content: 

/** 

 * Reuses an entry by removing it and moving it to a new place in the map. <p> This method uses  {@link #removeEntry},  {@link #reuseEntry} and {@link #addEntry}.

 * @param entry  the entry to reuse

 * @param hashIndex  the index into the data array to store at

 * @param hashCode  the hash code of the key to add

 * @param key  the key to add

 * @param value  the value to add

 */

protected void reuseMapping(final LinkEntry<K,V> entry,final int hashIndex,final int hashCode,final K key,final V value){

  try {

    final int removeIndex=hashIndex(entry.hashCode,data.length);

    final HashEntry<K,V>[] tmp=data;

    HashEntry<K,V> loop=tmp[removeIndex];

    HashEntry<K,V> previous=null;

    while (loop != entry && loop != null) {

      previous=loop;

      loop=loop.next;

    }

    if (loop == null) {

      throw new IllegalStateException("Entry.next=null, data[removeIndex]=" + data[removeIndex] + " previous="+ previous+ " key="+ key+ " value="+ value+ " size="+ size+ " maxSize="+ maxSize+ " This should not occur if your keys are immutable, and you have used synchronization properly.");

    }

    modCount++;

    removeEntry(entry,removeIndex,previous);

    reuseEntry(entry,hashIndex,hashCode,key,value);

    addEntry(entry,hashIndex);

  }

 catch (  final NullPointerException ex) {

    throw new IllegalStateException("NPE, entry=" + entry + " entryIsHeader="+ (entry == header)+ " key="+ key+ " value="+ value+ " size="+ size+ " maxSize="+ maxSize+ " This should not occur if your keys are immutable, and you have used synchronization properly.");

  }

}

Location: LRUMap.java

Content: 

/** 

 * Updates an existing key-value mapping. <p> This implementation moves the updated entry to the end of the list using  {@link #moveToMRU(AbstractLinkedMap.LinkEntry)}.

 * @param entry  the entry to update

 * @param newValue  the new value to store

 */

@Override protected void updateEntry(final HashEntry<K,V> entry,final V newValue){

  moveToMRU((LinkEntry<K,V>)entry);

  entry.setValue(newValue);

}

