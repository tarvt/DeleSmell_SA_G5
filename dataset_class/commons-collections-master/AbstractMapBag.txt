Location: AbstractMapBag.java

Content: 

/** 

 * Constructor needed for subclass serialisation.

 */

protected AbstractMapBag(){

}

Location: AbstractMapBag.java

Content: 

/** 

 * Constructor that assigns the specified Map as the backing store. The map must be empty and non-null.

 * @param map the map to assign

 */

protected AbstractMapBag(final Map<E,MutableInteger> map){

  this.map=map;

}

Location: AbstractMapBag.java

Content: 

/** 

 * Returns  {@code true} if the bag contains all elements in the givencollection, respecting cardinality.

 * @param other the bag to check against

 * @return {@code true} if the Bag contains all the collection

 */

boolean containsAll(final Bag<?> other){

  final Iterator<?> it=other.uniqueSet().iterator();

  while (it.hasNext()) {

    final Object current=it.next();

    if (getCount(current) < other.getCount(current)) {

      return false;

    }

  }

  return true;

}

Location: AbstractMapBag.java

Content: 

/** 

 * Read the map in using a custom routine.

 * @param map the map to use

 * @param in the input stream

 * @throws IOException any of the usual I/O related exceptions

 * @throws ClassNotFoundException if the stream contains an object which class can not be loaded

 * @throws ClassCastException if the stream does not contain the correct objects

 */

protected void doReadObject(final Map<E,MutableInteger> map,final ObjectInputStream in) throws IOException, ClassNotFoundException {

  this.map=map;

  final int entrySize=in.readInt();

  for (int i=0; i < entrySize; i++) {

    @SuppressWarnings("unchecked") final E obj=(E)in.readObject();

    final int count=in.readInt();

    map.put(obj,new MutableInteger(count));

    size+=count;

  }

}

Location: AbstractMapBag.java

Content: 

/** 

 * Remove any members of the bag that are not in the given bag, respecting cardinality.

 * @see #retainAll(Collection)

 * @param other the bag to retain

 * @return {@code true} if this call changed the collection

 */

boolean retainAll(final Bag<?> other){

  boolean result=false;

  final Bag<E> excess=new HashBag<>();

  final Iterator<E> i=uniqueSet().iterator();

  while (i.hasNext()) {

    final E current=i.next();

    final int myCount=getCount(current);

    final int otherCount=other.getCount(current);

    if (1 <= otherCount && otherCount <= myCount) {

      excess.add(current,myCount - otherCount);

    }

 else {

      excess.add(current,myCount);

    }

  }

  if (!excess.isEmpty()) {

    result=removeAll(excess);

  }

  return result;

}

Location: AbstractMapBag.java

Content: 

/** 

 * Constructor needed for subclass serialisation.

 */

protected AbstractMapBag(){

}

Location: AbstractMapBag.java

Content: 

/** 

 * Constructor that assigns the specified Map as the backing store. The map must be empty and non-null.

 * @param map the map to assign

 */

protected AbstractMapBag(final Map<E,MutableInteger> map){

  this.map=map;

}

Location: AbstractMapBag.java

Content: 

/** 

 * Returns  {@code true} if the bag contains all elements in the givencollection, respecting cardinality.

 * @param other the bag to check against

 * @return {@code true} if the Bag contains all the collection

 */

boolean containsAll(final Bag<?> other){

  final Iterator<?> it=other.uniqueSet().iterator();

  while (it.hasNext()) {

    final Object current=it.next();

    if (getCount(current) < other.getCount(current)) {

      return false;

    }

  }

  return true;

}

Location: AbstractMapBag.java

Content: 

/** 

 * Read the map in using a custom routine.

 * @param map the map to use

 * @param in the input stream

 * @throws IOException any of the usual I/O related exceptions

 * @throws ClassNotFoundException if the stream contains an object which class can not be loaded

 * @throws ClassCastException if the stream does not contain the correct objects

 */

protected void doReadObject(final Map<E,MutableInteger> map,final ObjectInputStream in) throws IOException, ClassNotFoundException {

  this.map=map;

  final int entrySize=in.readInt();

  for (int i=0; i < entrySize; i++) {

    @SuppressWarnings("unchecked") final E obj=(E)in.readObject();

    final int count=in.readInt();

    map.put(obj,new MutableInteger(count));

    size+=count;

  }

}

Location: AbstractMapBag.java

Content: 

/** 

 * Remove any members of the bag that are not in the given bag, respecting cardinality.

 * @see #retainAll(Collection)

 * @param other the bag to retain

 * @return {@code true} if this call changed the collection

 */

boolean retainAll(final Bag<?> other){

  boolean result=false;

  final Bag<E> excess=new HashBag<>();

  final Iterator<E> i=uniqueSet().iterator();

  while (i.hasNext()) {

    final E current=i.next();

    final int myCount=getCount(current);

    final int otherCount=other.getCount(current);

    if (1 <= otherCount && otherCount <= myCount) {

      excess.add(current,myCount - otherCount);

    }

 else {

      excess.add(current,myCount);

    }

  }

  if (!excess.isEmpty()) {

    result=removeAll(excess);

  }

  return result;

}

