Location: MultiValueMapTest.java

Content: 

@SuppressWarnings("unchecked") private MultiValueMap<K,V> createTestMap(){

  return createTestMap(ArrayList.class);

}

Location: MultiValueMapTest.java

Content: 

@SuppressWarnings("unchecked") private <C extends Collection<V>>MultiValueMap<K,V> createTestMap(final Class<C> collectionClass){

  final MultiValueMap<K,V> map=MultiValueMap.multiValueMap(new HashMap<K,C>(),collectionClass);

  map.put((K)"one",(V)"uno");

  map.put((K)"one",(V)"un");

  map.put((K)"two",(V)"dos");

  map.put((K)"two",(V)"deux");

  map.put((K)"three",(V)"tres");

  map.put((K)"three",(V)"trois");

  return map;

}

Location: MultiValueMapTest.java

Content: 

private Object deserialize(final byte[] data) throws IOException, ClassNotFoundException {

  final ByteArrayInputStream bais=new ByteArrayInputStream(data);

  final ObjectInputStream iis=new ObjectInputStream(bais);

  return iis.readObject();

}

Location: MultiValueMapTest.java

Content: 

@SuppressWarnings("rawtypes") private Map makeEmptyMap(){

  return new MultiValueMap();

}

Location: MultiValueMapTest.java

Content: 

public MultiValueMapTest(final String testName){

  super(testName);

}

Location: MultiValueMapTest.java

Content: 

private byte[] serialize(final Object object) throws IOException {

  final ByteArrayOutputStream baos=new ByteArrayOutputStream();

  final ObjectOutputStream oos=new ObjectOutputStream(baos);

  oos.writeObject(object);

  oos.close();

  return baos.toByteArray();

}

Location: MultiValueMapTest.java

Content: 

@SuppressWarnings("unchecked") public void testGetCollection(){

  final MultiValueMap<K,V> map=new MultiValueMap<>();

  map.put((K)"A","AA");

  assertSame(map.get("A"),map.getCollection("A"));

}

Location: MultiValueMapTest.java

Content: 

public void testIterator(){

  final MultiValueMap<K,V> map=createTestMap();

  @SuppressWarnings("unchecked") final Collection<V> values=new ArrayList<>((Collection<V>)map.values());

  final Iterator<Map.Entry<K,V>> iterator=map.iterator();

  while (iterator.hasNext()) {

    final Map.Entry<K,V> entry=iterator.next();

    assertTrue(map.containsValue(entry.getKey(),entry.getValue()));

    assertTrue(values.contains(entry.getValue()));

    assertTrue(values.remove(entry.getValue()));

  }

  assertTrue(values.isEmpty());

}

Location: MultiValueMapTest.java

Content: 

@SuppressWarnings("unchecked") public void testIterator_Key(){

  final MultiValueMap<K,V> map=new MultiValueMap<>();

  assertFalse(map.iterator("A").hasNext());

  map.put((K)"A","AA");

  final Iterator<?> it=map.iterator("A");

  assertTrue(it.hasNext());

  it.next();

  assertFalse(it.hasNext());

}

Location: MultiValueMapTest.java

Content: 

public void testKeyedIterator(){

  final MultiValueMap<K,V> map=createTestMap();

  final ArrayList<Object> actual=new ArrayList<>(IteratorUtils.toList(map.iterator("one")));

  final ArrayList<Object> expected=new ArrayList<>(Arrays.asList("uno","un"));

  assertEquals(expected,actual);

}

Location: MultiValueMapTest.java

Content: 

public void testNoMappingReturnsNull(){

  final MultiValueMap<K,V> map=createTestMap();

  assertNull(map.get("whatever"));

}

Location: MultiValueMapTest.java

Content: 

@SuppressWarnings("unchecked") public void testPutAll_KeyCollection(){

  final MultiValueMap<K,V> map=new MultiValueMap<>();

  Collection<V> coll=(Collection<V>)Arrays.asList("X","Y","Z");

  assertTrue(map.putAll((K)"A",coll));

  assertEquals(3,map.size("A"));

  assertTrue(map.containsValue("A","X"));

  assertTrue(map.containsValue("A","Y"));

  assertTrue(map.containsValue("A","Z"));

  assertFalse(map.putAll((K)"A",null));

  assertEquals(3,map.size("A"));

  assertTrue(map.containsValue("A","X"));

  assertTrue(map.containsValue("A","Y"));

  assertTrue(map.containsValue("A","Z"));

  assertFalse(map.putAll((K)"A",new ArrayList<V>()));

  assertEquals(3,map.size("A"));

  assertTrue(map.containsValue("A","X"));

  assertTrue(map.containsValue("A","Y"));

  assertTrue(map.containsValue("A","Z"));

  coll=(Collection<V>)Arrays.asList("M");

  assertTrue(map.putAll((K)"A",coll));

  assertEquals(4,map.size("A"));

  assertTrue(map.containsValue("A","X"));

  assertTrue(map.containsValue("A","Y"));

  assertTrue(map.containsValue("A","Z"));

  assertTrue(map.containsValue("A","M"));

}

Location: MultiValueMapTest.java

Content: 

@SuppressWarnings("unchecked") public void testPutWithList(){

  @SuppressWarnings("rawtypes") final MultiValueMap<K,V> test=MultiValueMap.multiValueMap(new HashMap<K,Collection>(),ArrayList.class);

  assertEquals("a",test.put((K)"A","a"));

  assertEquals("b",test.put((K)"A","b"));

  assertEquals(1,test.size());

  assertEquals(2,test.size("A"));

  assertEquals(2,test.totalSize());

}

Location: MultiValueMapTest.java

Content: 

@SuppressWarnings("unchecked") public void testPutWithSet(){

  @SuppressWarnings("rawtypes") final MultiValueMap<K,V> test=MultiValueMap.multiValueMap(new HashMap<K,HashSet>(),HashSet.class);

  assertEquals("a",test.put((K)"A","a"));

  assertEquals("b",test.put((K)"A","b"));

  assertNull(test.put((K)"A","a"));

  assertEquals(1,test.size());

  assertEquals(2,test.size("A"));

  assertEquals(2,test.totalSize());

}

Location: MultiValueMapTest.java

Content: 

public void testRemoveAllViaEntryIterator(){

  final MultiValueMap<K,V> map=createTestMap();

  for (final Iterator<?> i=map.iterator(); i.hasNext(); ) {

    i.next();

    i.remove();

  }

  assertNull(map.get("one"));

  assertEquals(0,map.totalSize());

}

Location: MultiValueMapTest.java

Content: 

public void testRemoveAllViaIterator(){

  final MultiValueMap<K,V> map=createTestMap();

  for (final Iterator<?> i=map.values().iterator(); i.hasNext(); ) {

    i.next();

    i.remove();

  }

  assertNull(map.get("one"));

  assertTrue(map.isEmpty());

}

Location: MultiValueMapTest.java

Content: 

public void testRemoveAllViaKeyedIterator(){

  final MultiValueMap<K,V> map=createTestMap();

  for (final Iterator<?> i=map.iterator("one"); i.hasNext(); ) {

    i.next();

    i.remove();

  }

  assertNull(map.get("one"));

  assertEquals(4,map.totalSize());

}

Location: MultiValueMapTest.java

Content: 

@SuppressWarnings("unchecked") public void testTotalSize(){

  final MultiValueMap<K,V> map=new MultiValueMap<>();

  assertEquals(0,map.totalSize());

  map.put((K)"A","AA");

  assertEquals(1,map.totalSize());

  map.put((K)"B","BA");

  assertEquals(2,map.totalSize());

  map.put((K)"B","BB");

  assertEquals(3,map.totalSize());

  map.put((K)"B","BC");

  assertEquals(4,map.totalSize());

  map.remove("A");

  assertEquals(3,map.totalSize());

  map.removeMapping("B","BC");

  assertEquals(2,map.totalSize());

}

Location: MultiValueMapTest.java

Content: 

public void testTotalSizeA(){

  assertEquals(6,createTestMap().totalSize());

}

Location: MultiValueMapTest.java

Content: 

public void testUnsafeDeSerialization() throws Exception {

  final MultiValueMap map1=MultiValueMap.multiValueMap(new HashMap(),ArrayList.class);

  byte[] bytes=serialize(map1);

  Object result=deserialize(bytes);

  assertEquals(map1,result);

  final MultiValueMap map2=MultiValueMap.multiValueMap(new HashMap(),(Class)String.class);

  bytes=serialize(map2);

  try {

    result=deserialize(bytes);

    fail("unsafe clazz accepted when de-serializing MultiValueMap");

  }

 catch (  final UnsupportedOperationException ex) {

  }

}

Location: MultiValueMapTest.java

Content: 

@SuppressWarnings("unchecked") public void testValueCollectionType(){

  final MultiValueMap<K,V> map=createTestMap(LinkedList.class);

  assertTrue(map.get("one") instanceof LinkedList);

}

Location: MultiValueMapTest.java

Content: 

@SuppressWarnings("unchecked") private MultiValueMap<K,V> createTestMap(){

  return createTestMap(ArrayList.class);

}

Location: MultiValueMapTest.java

Content: 

@SuppressWarnings("unchecked") private <C extends Collection<V>>MultiValueMap<K,V> createTestMap(final Class<C> collectionClass){

  final MultiValueMap<K,V> map=MultiValueMap.multiValueMap(new HashMap<K,C>(),collectionClass);

  map.put((K)"one",(V)"uno");

  map.put((K)"one",(V)"un");

  map.put((K)"two",(V)"dos");

  map.put((K)"two",(V)"deux");

  map.put((K)"three",(V)"tres");

  map.put((K)"three",(V)"trois");

  return map;

}

Location: MultiValueMapTest.java

Content: 

private Object deserialize(final byte[] data) throws IOException, ClassNotFoundException {

  final ByteArrayInputStream bais=new ByteArrayInputStream(data);

  final ObjectInputStream iis=new ObjectInputStream(bais);

  return iis.readObject();

}

Location: MultiValueMapTest.java

Content: 

@SuppressWarnings("rawtypes") private Map makeEmptyMap(){

  return new MultiValueMap();

}

Location: MultiValueMapTest.java

Content: 

public MultiValueMapTest(final String testName){

  super(testName);

}

Location: MultiValueMapTest.java

Content: 

private byte[] serialize(final Object object) throws IOException {

  final ByteArrayOutputStream baos=new ByteArrayOutputStream();

  final ObjectOutputStream oos=new ObjectOutputStream(baos);

  oos.writeObject(object);

  oos.close();

  return baos.toByteArray();

}

Location: MultiValueMapTest.java

Content: 

@SuppressWarnings("unchecked") public void testGetCollection(){

  final MultiValueMap<K,V> map=new MultiValueMap<>();

  map.put((K)"A","AA");

  assertSame(map.get("A"),map.getCollection("A"));

}

Location: MultiValueMapTest.java

Content: 

public void testIterator(){

  final MultiValueMap<K,V> map=createTestMap();

  @SuppressWarnings("unchecked") final Collection<V> values=new ArrayList<>((Collection<V>)map.values());

  final Iterator<Map.Entry<K,V>> iterator=map.iterator();

  while (iterator.hasNext()) {

    final Map.Entry<K,V> entry=iterator.next();

    assertTrue(map.containsValue(entry.getKey(),entry.getValue()));

    assertTrue(values.contains(entry.getValue()));

    assertTrue(values.remove(entry.getValue()));

  }

  assertTrue(values.isEmpty());

}

Location: MultiValueMapTest.java

Content: 

@SuppressWarnings("unchecked") public void testIterator_Key(){

  final MultiValueMap<K,V> map=new MultiValueMap<>();

  assertFalse(map.iterator("A").hasNext());

  map.put((K)"A","AA");

  final Iterator<?> it=map.iterator("A");

  assertTrue(it.hasNext());

  it.next();

  assertFalse(it.hasNext());

}

Location: MultiValueMapTest.java

Content: 

public void testKeyedIterator(){

  final MultiValueMap<K,V> map=createTestMap();

  final ArrayList<Object> actual=new ArrayList<>(IteratorUtils.toList(map.iterator("one")));

  final ArrayList<Object> expected=new ArrayList<>(Arrays.asList("uno","un"));

  assertEquals(expected,actual);

}

Location: MultiValueMapTest.java

Content: 

public void testNoMappingReturnsNull(){

  final MultiValueMap<K,V> map=createTestMap();

  assertNull(map.get("whatever"));

}

Location: MultiValueMapTest.java

Content: 

@SuppressWarnings("unchecked") public void testPutAll_KeyCollection(){

  final MultiValueMap<K,V> map=new MultiValueMap<>();

  Collection<V> coll=(Collection<V>)Arrays.asList("X","Y","Z");

  assertTrue(map.putAll((K)"A",coll));

  assertEquals(3,map.size("A"));

  assertTrue(map.containsValue("A","X"));

  assertTrue(map.containsValue("A","Y"));

  assertTrue(map.containsValue("A","Z"));

  assertFalse(map.putAll((K)"A",null));

  assertEquals(3,map.size("A"));

  assertTrue(map.containsValue("A","X"));

  assertTrue(map.containsValue("A","Y"));

  assertTrue(map.containsValue("A","Z"));

  assertFalse(map.putAll((K)"A",new ArrayList<V>()));

  assertEquals(3,map.size("A"));

  assertTrue(map.containsValue("A","X"));

  assertTrue(map.containsValue("A","Y"));

  assertTrue(map.containsValue("A","Z"));

  coll=(Collection<V>)Arrays.asList("M");

  assertTrue(map.putAll((K)"A",coll));

  assertEquals(4,map.size("A"));

  assertTrue(map.containsValue("A","X"));

  assertTrue(map.containsValue("A","Y"));

  assertTrue(map.containsValue("A","Z"));

  assertTrue(map.containsValue("A","M"));

}

Location: MultiValueMapTest.java

Content: 

@SuppressWarnings("unchecked") public void testPutWithList(){

  @SuppressWarnings("rawtypes") final MultiValueMap<K,V> test=MultiValueMap.multiValueMap(new HashMap<K,Collection>(),ArrayList.class);

  assertEquals("a",test.put((K)"A","a"));

  assertEquals("b",test.put((K)"A","b"));

  assertEquals(1,test.size());

  assertEquals(2,test.size("A"));

  assertEquals(2,test.totalSize());

}

Location: MultiValueMapTest.java

Content: 

@SuppressWarnings("unchecked") public void testPutWithSet(){

  @SuppressWarnings("rawtypes") final MultiValueMap<K,V> test=MultiValueMap.multiValueMap(new HashMap<K,HashSet>(),HashSet.class);

  assertEquals("a",test.put((K)"A","a"));

  assertEquals("b",test.put((K)"A","b"));

  assertNull(test.put((K)"A","a"));

  assertEquals(1,test.size());

  assertEquals(2,test.size("A"));

  assertEquals(2,test.totalSize());

}

Location: MultiValueMapTest.java

Content: 

public void testRemoveAllViaEntryIterator(){

  final MultiValueMap<K,V> map=createTestMap();

  for (final Iterator<?> i=map.iterator(); i.hasNext(); ) {

    i.next();

    i.remove();

  }

  assertNull(map.get("one"));

  assertEquals(0,map.totalSize());

}

Location: MultiValueMapTest.java

Content: 

public void testRemoveAllViaIterator(){

  final MultiValueMap<K,V> map=createTestMap();

  for (final Iterator<?> i=map.values().iterator(); i.hasNext(); ) {

    i.next();

    i.remove();

  }

  assertNull(map.get("one"));

  assertTrue(map.isEmpty());

}

Location: MultiValueMapTest.java

Content: 

public void testRemoveAllViaKeyedIterator(){

  final MultiValueMap<K,V> map=createTestMap();

  for (final Iterator<?> i=map.iterator("one"); i.hasNext(); ) {

    i.next();

    i.remove();

  }

  assertNull(map.get("one"));

  assertEquals(4,map.totalSize());

}

Location: MultiValueMapTest.java

Content: 

@SuppressWarnings("unchecked") public void testTotalSize(){

  final MultiValueMap<K,V> map=new MultiValueMap<>();

  assertEquals(0,map.totalSize());

  map.put((K)"A","AA");

  assertEquals(1,map.totalSize());

  map.put((K)"B","BA");

  assertEquals(2,map.totalSize());

  map.put((K)"B","BB");

  assertEquals(3,map.totalSize());

  map.put((K)"B","BC");

  assertEquals(4,map.totalSize());

  map.remove("A");

  assertEquals(3,map.totalSize());

  map.removeMapping("B","BC");

  assertEquals(2,map.totalSize());

}

Location: MultiValueMapTest.java

Content: 

public void testTotalSizeA(){

  assertEquals(6,createTestMap().totalSize());

}

Location: MultiValueMapTest.java

Content: 

public void testUnsafeDeSerialization() throws Exception {

  final MultiValueMap map1=MultiValueMap.multiValueMap(new HashMap(),ArrayList.class);

  byte[] bytes=serialize(map1);

  Object result=deserialize(bytes);

  assertEquals(map1,result);

  final MultiValueMap map2=MultiValueMap.multiValueMap(new HashMap(),(Class)String.class);

  bytes=serialize(map2);

  try {

    result=deserialize(bytes);

    fail("unsafe clazz accepted when de-serializing MultiValueMap");

  }

 catch (  final UnsupportedOperationException ex) {

  }

}

Location: MultiValueMapTest.java

Content: 

@SuppressWarnings("unchecked") public void testValueCollectionType(){

  final MultiValueMap<K,V> map=createTestMap(LinkedList.class);

  assertTrue(map.get("one") instanceof LinkedList);

}

