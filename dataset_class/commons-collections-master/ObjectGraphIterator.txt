Location: ObjectGraphIterator.java

Content: 

/** 

 * Finds the next object in the iteration given an iterator.

 * @param iterator  the iterator to start from

 */

protected void findNextByIterator(final Iterator<? extends E> iterator){

  if (iterator != currentIterator) {

    if (currentIterator != null) {

      stack.push(currentIterator);

    }

    currentIterator=iterator;

  }

  while (currentIterator.hasNext() && !hasNext) {

    E next=currentIterator.next();

    if (transformer != null) {

      next=transformer.transform(next);

    }

    findNext(next);

  }

  if (!hasNext && !stack.isEmpty()) {

    currentIterator=stack.pop();

    findNextByIterator(currentIterator);

  }

}

Location: ObjectGraphIterator.java

Content: 

/** 

 * Finds the next object in the iteration given any start object.

 * @param value  the value to start from

 */

@SuppressWarnings("unchecked") protected void findNext(final E value){

  if (value instanceof Iterator) {

    findNextByIterator((Iterator<? extends E>)value);

  }

 else {

    currentValue=value;

    hasNext=true;

  }

}

Location: ObjectGraphIterator.java

Content: 

/** 

 * Constructs an ObjectGraphIterator using a root object and transformer. <p> The root object can be an iterator, in which case it will be immediately looped around.

 * @param root  the root object, null will result in an empty iterator

 * @param transformer  the transformer to use, null will use a no effect transformer

 */

@SuppressWarnings("unchecked") public ObjectGraphIterator(final E root,final Transformer<? super E,? extends E> transformer){

  if (root instanceof Iterator) {

    this.currentIterator=(Iterator<? extends E>)root;

  }

 else {

    this.root=root;

  }

  this.transformer=transformer;

}

Location: ObjectGraphIterator.java

Content: 

/** 

 * Constructs a ObjectGraphIterator that will handle an iterator of iterators. <p> This constructor exists for convenience to emphasise that this class can be used to iterate over nested iterators. That is to say that the iterator passed in here contains other iterators, which may in turn contain further iterators.

 * @param rootIterator  the root iterator, null will result in an empty iterator

 */

public ObjectGraphIterator(final Iterator<? extends E> rootIterator){

  this.currentIterator=rootIterator;

  this.transformer=null;

}

Location: ObjectGraphIterator.java

Content: 

/** 

 * Loops around the iterators to find the next value to return.

 */

protected void updateCurrentIterator(){

  if (hasNext) {

    return;

  }

  if (currentIterator == null) {

    if (root == null) {

    }

 else {

      if (transformer == null) {

        findNext(root);

      }

 else {

        findNext(transformer.transform(root));

      }

      root=null;

    }

  }

 else {

    findNextByIterator(currentIterator);

  }

}

Location: ObjectGraphIterator.java

Content: 

/** 

 * Finds the next object in the iteration given an iterator.

 * @param iterator  the iterator to start from

 */

protected void findNextByIterator(final Iterator<? extends E> iterator){

  if (iterator != currentIterator) {

    if (currentIterator != null) {

      stack.push(currentIterator);

    }

    currentIterator=iterator;

  }

  while (currentIterator.hasNext() && !hasNext) {

    E next=currentIterator.next();

    if (transformer != null) {

      next=transformer.transform(next);

    }

    findNext(next);

  }

  if (!hasNext && !stack.isEmpty()) {

    currentIterator=stack.pop();

    findNextByIterator(currentIterator);

  }

}

Location: ObjectGraphIterator.java

Content: 

/** 

 * Finds the next object in the iteration given any start object.

 * @param value  the value to start from

 */

@SuppressWarnings("unchecked") protected void findNext(final E value){

  if (value instanceof Iterator) {

    findNextByIterator((Iterator<? extends E>)value);

  }

 else {

    currentValue=value;

    hasNext=true;

  }

}

Location: ObjectGraphIterator.java

Content: 

/** 

 * Constructs an ObjectGraphIterator using a root object and transformer. <p> The root object can be an iterator, in which case it will be immediately looped around.

 * @param root  the root object, null will result in an empty iterator

 * @param transformer  the transformer to use, null will use a no effect transformer

 */

@SuppressWarnings("unchecked") public ObjectGraphIterator(final E root,final Transformer<? super E,? extends E> transformer){

  if (root instanceof Iterator) {

    this.currentIterator=(Iterator<? extends E>)root;

  }

 else {

    this.root=root;

  }

  this.transformer=transformer;

}

Location: ObjectGraphIterator.java

Content: 

/** 

 * Constructs a ObjectGraphIterator that will handle an iterator of iterators. <p> This constructor exists for convenience to emphasise that this class can be used to iterate over nested iterators. That is to say that the iterator passed in here contains other iterators, which may in turn contain further iterators.

 * @param rootIterator  the root iterator, null will result in an empty iterator

 */

public ObjectGraphIterator(final Iterator<? extends E> rootIterator){

  this.currentIterator=rootIterator;

  this.transformer=null;

}

Location: ObjectGraphIterator.java

Content: 

/** 

 * Loops around the iterators to find the next value to return.

 */

protected void updateCurrentIterator(){

  if (hasNext) {

    return;

  }

  if (currentIterator == null) {

    if (root == null) {

    }

 else {

      if (transformer == null) {

        findNext(root);

      }

 else {

        findNext(transformer.transform(root));

      }

      root=null;

    }

  }

 else {

    findNextByIterator(currentIterator);

  }

}

