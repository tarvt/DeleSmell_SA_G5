Location: TransformedList.java

Content: 

/** 

 * Gets the decorated list.

 * @return the decorated list

 */

protected List<E> getList(){

  return (List<E>)decorated();

}

Location: TransformedList.java

Content: 

/** 

 * Constructor that wraps (not copies). <p> If there are any elements already in the list being decorated, they are NOT transformed.

 * @param list  the list to decorate, must not be null

 * @param transformer  the transformer to use for conversion, must not be null

 * @throws NullPointerException if list or transformer is null

 */

protected TransformedList(final List<E> list,final Transformer<? super E,? extends E> transformer){

  super(list,transformer);

}

Location: TransformedList.java

Content: 

/** 

 * Factory method to create a transforming list. <p> If there are any elements already in the list being decorated, they are NOT transformed. Contrast this with  {@link #transformedList(List,Transformer)}.

 * @param < E > the type of the elements in the list

 * @param list  the list to decorate, must not be null

 * @param transformer  the transformer to use for conversion, must not be null

 * @return a new transformed list

 * @throws NullPointerException if list or transformer is null

 * @since 4.0

 */

public static <E>TransformedList<E> transformingList(final List<E> list,final Transformer<? super E,? extends E> transformer){

  return new TransformedList<>(list,transformer);

}

Location: TransformedList.java

Content: 

/** 

 * Gets the decorated list.

 * @return the decorated list

 */

protected List<E> getList(){

  return (List<E>)decorated();

}

Location: TransformedList.java

Content: 

/** 

 * Constructor that wraps (not copies). <p> If there are any elements already in the list being decorated, they are NOT transformed.

 * @param list  the list to decorate, must not be null

 * @param transformer  the transformer to use for conversion, must not be null

 * @throws NullPointerException if list or transformer is null

 */

protected TransformedList(final List<E> list,final Transformer<? super E,? extends E> transformer){

  super(list,transformer);

}

Location: TransformedList.java

Content: 

/** 

 * Factory method to create a transforming list. <p> If there are any elements already in the list being decorated, they are NOT transformed. Contrast this with  {@link #transformedList(List,Transformer)}.

 * @param < E > the type of the elements in the list

 * @param list  the list to decorate, must not be null

 * @param transformer  the transformer to use for conversion, must not be null

 * @return a new transformed list

 * @throws NullPointerException if list or transformer is null

 * @since 4.0

 */

public static <E>TransformedList<E> transformingList(final List<E> list,final Transformer<? super E,? extends E> transformer){

  return new TransformedList<>(list,transformer);

}

