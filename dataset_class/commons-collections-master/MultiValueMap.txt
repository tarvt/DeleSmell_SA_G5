Location: MultiValueMap.java

Content: 

/** 

 * Checks whether the collection at the specified key contains the value.

 * @param key  the key to search for

 * @param value  the value to search for

 * @return true if the map contains the value

 */

public boolean containsValue(final Object key,final Object value){

  final Collection<V> coll=getCollection(key);

  if (coll == null) {

    return false;

  }

  return coll.contains(value);

}

Location: MultiValueMap.java

Content: 

/** 

 * Creates a new instance of the map value Collection container using the factory. <p> This method can be overridden to perform your own processing instead of using the factory.

 * @param size  the collection size that is about to be added

 * @return the new collection

 */

protected Collection<V> createCollection(final int size){

  return collectionFactory.create();

}

Location: MultiValueMap.java

Content: 

/** 

 * Gets the collection mapped to the specified key. This method is a convenience method to typecast the result of  {@code get(key)}.

 * @param key  the key to retrieve

 * @return the collection mapped to the key, null if no mapping

 */

@SuppressWarnings("unchecked") public Collection<V> getCollection(final Object key){

  return (Collection<V>)decorated().get(key);

}

Location: MultiValueMap.java

Content: 

/** 

 * Gets an iterator for the collection mapped to the specified key.

 * @param key  the key to get an iterator for

 * @return the iterator of the collection at the key, empty iterator if key not in map

 */

public Iterator<V> iterator(final Object key){

  if (!containsKey(key)) {

    return EmptyIterator.<V>emptyIterator();

  }

  return new ValuesIterator(key);

}

Location: MultiValueMap.java

Content: 

/** 

 * Creates a MultiValueMap based on a  {@code HashMap} andstoring the multiple values in an  {@code ArrayList}.

 */

@SuppressWarnings({"unchecked","rawtypes"}) public MultiValueMap(){

  this(new HashMap<K,V>(),new ReflectionFactory(ArrayList.class));

}

Location: MultiValueMap.java

Content: 

/** 

 * Creates a map which wraps the given map and maps keys to ArrayLists.

 * @param < K >  the key type

 * @param < V >  the value type

 * @param map  the map to wrap

 * @return a new multi-value map

 * @since 4.0

 */

@SuppressWarnings({"unchecked","rawtypes"}) public static <K,V>MultiValueMap<K,V> multiValueMap(final Map<K,? super Collection<V>> map){

  return MultiValueMap.<K,V,ArrayList>multiValueMap((Map<K,? super Collection>)map,ArrayList.class);

}

Location: MultiValueMap.java

Content: 

/** 

 * Creates a map which decorates the given  {@code map} andmaps keys to collections of type  {@code collectionClass}.

 * @param < K >  the key type

 * @param < V >  the value type

 * @param < C >  the collection class type

 * @param map  the map to wrap

 * @param collectionClass  the type of the collection class

 * @return a new multi-value map

 * @since 4.0

 */

public static <K,V,C extends Collection<V>>MultiValueMap<K,V> multiValueMap(final Map<K,? super C> map,final Class<C> collectionClass){

  return new MultiValueMap<>(map,new ReflectionFactory<>(collectionClass));

}

Location: MultiValueMap.java

Content: 

/** 

 * Creates a MultiValueMap which decorates the given  {@code map} andcreates the value collections using the supplied  {@code collectionFactory}.

 * @param < C >  the collection class type

 * @param map  the map to decorate

 * @param collectionFactory  the collection factory which must return a Collection instance

 */

@SuppressWarnings("unchecked") protected <C extends Collection<V>>MultiValueMap(final Map<K,? super C> map,final Factory<C> collectionFactory){

  super((Map<K,Object>)map);

  if (collectionFactory == null) {

    throw new IllegalArgumentException("The factory must not be null");

  }

  this.collectionFactory=collectionFactory;

}

Location: MultiValueMap.java

Content: 

/** 

 * Adds a collection of values to the collection associated with the specified key.

 * @param key  the key to store against

 * @param values  the values to add to the collection at the key, null ignored

 * @return true if this map changed

 */

public boolean putAll(final K key,final Collection<V> values){

  if (values == null || values.isEmpty()) {

    return false;

  }

  boolean result=false;

  Collection<V> coll=getCollection(key);

  if (coll == null) {

    coll=createCollection(values.size());

    coll.addAll(values);

    if (!coll.isEmpty()) {

      decorated().put(key,coll);

      result=true;

    }

  }

 else {

    result=coll.addAll(values);

  }

  return result;

}

Location: MultiValueMap.java

Content: 

/** 

 * Adds the value to the collection associated with the specified key. <p> Unlike a normal  {@code Map} the previous value is not replaced.Instead the new value is added to the collection stored against the key.

 * @param key  the key to store against

 * @param value  the value to add to the collection at the key

 * @return the value added if the map changed and null if the map did not change

 */

@Override @SuppressWarnings("unchecked") public Object put(final K key,final Object value){

  boolean result=false;

  Collection<V> coll=getCollection(key);

  if (coll == null) {

    coll=createCollection(1);

    coll.add((V)value);

    if (!coll.isEmpty()) {

      decorated().put(key,coll);

      result=true;

    }

  }

 else {

    result=coll.add((V)value);

  }

  return result ? value : null;

}

Location: MultiValueMap.java

Content: 

/** 

 * Gets the size of the collection mapped to the specified key.

 * @param key  the key to get size for

 * @return the size of the collection at the key, zero if key not in map

 */

public int size(final Object key){

  final Collection<V> coll=getCollection(key);

  if (coll == null) {

    return 0;

  }

  return coll.size();

}

Location: MultiValueMap.java

Content: 

/** 

 * Gets the total size of the map by counting all the values.

 * @return the total size of the map counting all values

 */

public int totalSize(){

  int total=0;

  for (  final Object v : decorated().values()) {

    total+=CollectionUtils.size(v);

  }

  return total;

}

Location: MultiValueMap.java

Content: 

/** 

 * Checks whether the collection at the specified key contains the value.

 * @param key  the key to search for

 * @param value  the value to search for

 * @return true if the map contains the value

 */

public boolean containsValue(final Object key,final Object value){

  final Collection<V> coll=getCollection(key);

  if (coll == null) {

    return false;

  }

  return coll.contains(value);

}

Location: MultiValueMap.java

Content: 

/** 

 * Creates a new instance of the map value Collection container using the factory. <p> This method can be overridden to perform your own processing instead of using the factory.

 * @param size  the collection size that is about to be added

 * @return the new collection

 */

protected Collection<V> createCollection(final int size){

  return collectionFactory.create();

}

Location: MultiValueMap.java

Content: 

/** 

 * Gets the collection mapped to the specified key. This method is a convenience method to typecast the result of  {@code get(key)}.

 * @param key  the key to retrieve

 * @return the collection mapped to the key, null if no mapping

 */

@SuppressWarnings("unchecked") public Collection<V> getCollection(final Object key){

  return (Collection<V>)decorated().get(key);

}

Location: MultiValueMap.java

Content: 

/** 

 * Gets an iterator for the collection mapped to the specified key.

 * @param key  the key to get an iterator for

 * @return the iterator of the collection at the key, empty iterator if key not in map

 */

public Iterator<V> iterator(final Object key){

  if (!containsKey(key)) {

    return EmptyIterator.<V>emptyIterator();

  }

  return new ValuesIterator(key);

}

Location: MultiValueMap.java

Content: 

/** 

 * Creates a MultiValueMap based on a  {@code HashMap} andstoring the multiple values in an  {@code ArrayList}.

 */

@SuppressWarnings({"unchecked","rawtypes"}) public MultiValueMap(){

  this(new HashMap<K,V>(),new ReflectionFactory(ArrayList.class));

}

Location: MultiValueMap.java

Content: 

/** 

 * Creates a map which wraps the given map and maps keys to ArrayLists.

 * @param < K >  the key type

 * @param < V >  the value type

 * @param map  the map to wrap

 * @return a new multi-value map

 * @since 4.0

 */

@SuppressWarnings({"unchecked","rawtypes"}) public static <K,V>MultiValueMap<K,V> multiValueMap(final Map<K,? super Collection<V>> map){

  return MultiValueMap.<K,V,ArrayList>multiValueMap((Map<K,? super Collection>)map,ArrayList.class);

}

Location: MultiValueMap.java

Content: 

/** 

 * Creates a map which decorates the given  {@code map} andmaps keys to collections of type  {@code collectionClass}.

 * @param < K >  the key type

 * @param < V >  the value type

 * @param < C >  the collection class type

 * @param map  the map to wrap

 * @param collectionClass  the type of the collection class

 * @return a new multi-value map

 * @since 4.0

 */

public static <K,V,C extends Collection<V>>MultiValueMap<K,V> multiValueMap(final Map<K,? super C> map,final Class<C> collectionClass){

  return new MultiValueMap<>(map,new ReflectionFactory<>(collectionClass));

}

Location: MultiValueMap.java

Content: 

/** 

 * Creates a MultiValueMap which decorates the given  {@code map} andcreates the value collections using the supplied  {@code collectionFactory}.

 * @param < C >  the collection class type

 * @param map  the map to decorate

 * @param collectionFactory  the collection factory which must return a Collection instance

 */

@SuppressWarnings("unchecked") protected <C extends Collection<V>>MultiValueMap(final Map<K,? super C> map,final Factory<C> collectionFactory){

  super((Map<K,Object>)map);

  if (collectionFactory == null) {

    throw new IllegalArgumentException("The factory must not be null");

  }

  this.collectionFactory=collectionFactory;

}

Location: MultiValueMap.java

Content: 

/** 

 * Adds a collection of values to the collection associated with the specified key.

 * @param key  the key to store against

 * @param values  the values to add to the collection at the key, null ignored

 * @return true if this map changed

 */

public boolean putAll(final K key,final Collection<V> values){

  if (values == null || values.isEmpty()) {

    return false;

  }

  boolean result=false;

  Collection<V> coll=getCollection(key);

  if (coll == null) {

    coll=createCollection(values.size());

    coll.addAll(values);

    if (!coll.isEmpty()) {

      decorated().put(key,coll);

      result=true;

    }

  }

 else {

    result=coll.addAll(values);

  }

  return result;

}

Location: MultiValueMap.java

Content: 

/** 

 * Adds the value to the collection associated with the specified key. <p> Unlike a normal  {@code Map} the previous value is not replaced.Instead the new value is added to the collection stored against the key.

 * @param key  the key to store against

 * @param value  the value to add to the collection at the key

 * @return the value added if the map changed and null if the map did not change

 */

@Override @SuppressWarnings("unchecked") public Object put(final K key,final Object value){

  boolean result=false;

  Collection<V> coll=getCollection(key);

  if (coll == null) {

    coll=createCollection(1);

    coll.add((V)value);

    if (!coll.isEmpty()) {

      decorated().put(key,coll);

      result=true;

    }

  }

 else {

    result=coll.add((V)value);

  }

  return result ? value : null;

}

Location: MultiValueMap.java

Content: 

/** 

 * Gets the size of the collection mapped to the specified key.

 * @param key  the key to get size for

 * @return the size of the collection at the key, zero if key not in map

 */

public int size(final Object key){

  final Collection<V> coll=getCollection(key);

  if (coll == null) {

    return 0;

  }

  return coll.size();

}

Location: MultiValueMap.java

Content: 

/** 

 * Gets the total size of the map by counting all the values.

 * @return the total size of the map counting all values

 */

public int totalSize(){

  int total=0;

  for (  final Object v : decorated().values()) {

    total+=CollectionUtils.size(v);

  }

  return total;

}

