Location: TransformedCollectionTest.java

Content: 

@Override public Object[] getOtherElements(){

  return new Object[]{"9","88","678","87","98","78","99"};

}

Location: TransformedCollectionTest.java

Content: 

public void testTransformedCollection(){

  final Collection<Object> coll=TransformedCollection.transformingCollection(new ArrayList<>(),STRING_TO_INTEGER_TRANSFORMER);

  assertEquals(0,coll.size());

  final Object[] elements=getFullElements();

  for (int i=0; i < elements.length; i++) {

    coll.add(elements[i]);

    assertEquals(i + 1,coll.size());

    assertTrue(coll.contains(Integer.valueOf((String)elements[i])));

    assertFalse(coll.contains(elements[i]));

  }

  assertTrue(coll.remove(Integer.valueOf((String)elements[0])));

}

Location: TransformedCollectionTest.java

Content: 

public void testTransformedCollection_decorateTransform(){

  final Collection<Object> originalCollection=new ArrayList<>();

  final Object[] elements=getFullElements();

  Collections.addAll(originalCollection,elements);

  final Collection<Object> collection=TransformedCollection.transformedCollection(originalCollection,TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER);

  assertEquals(elements.length,collection.size());

  for (  final Object element : elements) {

    assertTrue(collection.contains(Integer.valueOf((String)element)));

    assertFalse(collection.contains(element));

  }

  assertFalse(collection.remove(elements[0]));

  assertTrue(collection.remove(Integer.valueOf((String)elements[0])));

}

Location: TransformedCollectionTest.java

Content: 

public TransformedCollectionTest(final String testName){

  super(testName);

}

Location: TransformedCollectionTest.java

Content: 

@Override public Object[] getOtherElements(){

  return new Object[]{"9","88","678","87","98","78","99"};

}

Location: TransformedCollectionTest.java

Content: 

public void testTransformedCollection(){

  final Collection<Object> coll=TransformedCollection.transformingCollection(new ArrayList<>(),STRING_TO_INTEGER_TRANSFORMER);

  assertEquals(0,coll.size());

  final Object[] elements=getFullElements();

  for (int i=0; i < elements.length; i++) {

    coll.add(elements[i]);

    assertEquals(i + 1,coll.size());

    assertTrue(coll.contains(Integer.valueOf((String)elements[i])));

    assertFalse(coll.contains(elements[i]));

  }

  assertTrue(coll.remove(Integer.valueOf((String)elements[0])));

}

Location: TransformedCollectionTest.java

Content: 

public void testTransformedCollection_decorateTransform(){

  final Collection<Object> originalCollection=new ArrayList<>();

  final Object[] elements=getFullElements();

  Collections.addAll(originalCollection,elements);

  final Collection<Object> collection=TransformedCollection.transformedCollection(originalCollection,TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER);

  assertEquals(elements.length,collection.size());

  for (  final Object element : elements) {

    assertTrue(collection.contains(Integer.valueOf((String)element)));

    assertFalse(collection.contains(element));

  }

  assertFalse(collection.remove(elements[0]));

  assertTrue(collection.remove(Integer.valueOf((String)elements[0])));

}

Location: TransformedCollectionTest.java

Content: 

public TransformedCollectionTest(final String testName){

  super(testName);

}

