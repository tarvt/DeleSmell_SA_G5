Location: TransformedMultiValuedMap.java

Content: 

/** 

 * Factory method to create a transforming MultiValuedMap that will transform existing contents of the specified map. <p> If there are any elements already in the map being decorated, they will be transformed by this method. Contrast this with {@link #transformingMap(MultiValuedMap,Transformer,Transformer)}.

 * @param < K > the key type

 * @param < V > the value type

 * @param map  the MultiValuedMap to decorate, may not be null

 * @param keyTransformer  the transformer to use for key conversion, null means no conversion

 * @param valueTransformer  the transformer to use for value conversion, null means no conversion

 * @return a new transformed MultiValuedMap

 * @throws NullPointerException if map is null

 */

public static <K,V>TransformedMultiValuedMap<K,V> transformedMap(final MultiValuedMap<K,V> map,final Transformer<? super K,? extends K> keyTransformer,final Transformer<? super V,? extends V> valueTransformer){

  final TransformedMultiValuedMap<K,V> decorated=new TransformedMultiValuedMap<>(map,keyTransformer,valueTransformer);

  if (!map.isEmpty()) {

    final MultiValuedMap<K,V> mapCopy=new ArrayListValuedHashMap<>(map);

    decorated.clear();

    decorated.putAll(mapCopy);

  }

  return decorated;

}

Location: TransformedMultiValuedMap.java

Content: 

/** 

 * Constructor that wraps (not copies). <p> If there are any elements already in the collection being decorated, they are NOT transformed.

 * @param map  the MultiValuedMap to decorate, may not be null

 * @param keyTransformer  the transformer to use for key conversion, null means no conversion

 * @param valueTransformer  the transformer to use for value conversion, null means no conversion

 * @throws NullPointerException if map is null

 */

protected TransformedMultiValuedMap(final MultiValuedMap<K,V> map,final Transformer<? super K,? extends K> keyTransformer,final Transformer<? super V,? extends V> valueTransformer){

  super(map);

  this.keyTransformer=keyTransformer;

  this.valueTransformer=valueTransformer;

}

Location: TransformedMultiValuedMap.java

Content: 

/** 

 * Factory method to create a transforming MultiValuedMap. <p> If there are any elements already in the map being decorated, they are NOT transformed. Contrast this with {@link #transformedMap(MultiValuedMap,Transformer,Transformer)}.

 * @param < K > the key type

 * @param < V > the value type

 * @param map  the MultiValuedMap to decorate, may not be null

 * @param keyTransformer  the transformer to use for key conversion, null means no conversion

 * @param valueTransformer  the transformer to use for value conversion, null means no conversion

 * @return a new transformed MultiValuedMap

 * @throws NullPointerException if map is null

 */

public static <K,V>TransformedMultiValuedMap<K,V> transformingMap(final MultiValuedMap<K,V> map,final Transformer<? super K,? extends K> keyTransformer,final Transformer<? super V,? extends V> valueTransformer){

  return new TransformedMultiValuedMap<>(map,keyTransformer,valueTransformer);

}

Location: TransformedMultiValuedMap.java

Content: 

/** 

 * Transforms a key. <p> The transformer itself may throw an exception if necessary.

 * @param object  the object to transform

 * @return the transformed object

 */

protected K transformKey(final K object){

  if (keyTransformer == null) {

    return object;

  }

  return keyTransformer.transform(object);

}

Location: TransformedMultiValuedMap.java

Content: 

/** 

 * Transforms a value. <p> The transformer itself may throw an exception if necessary.

 * @param object  the object to transform

 * @return the transformed object

 */

protected V transformValue(final V object){

  if (valueTransformer == null) {

    return object;

  }

  return valueTransformer.transform(object);

}

Location: TransformedMultiValuedMap.java

Content: 

/** 

 * Factory method to create a transforming MultiValuedMap that will transform existing contents of the specified map. <p> If there are any elements already in the map being decorated, they will be transformed by this method. Contrast this with {@link #transformingMap(MultiValuedMap,Transformer,Transformer)}.

 * @param < K > the key type

 * @param < V > the value type

 * @param map  the MultiValuedMap to decorate, may not be null

 * @param keyTransformer  the transformer to use for key conversion, null means no conversion

 * @param valueTransformer  the transformer to use for value conversion, null means no conversion

 * @return a new transformed MultiValuedMap

 * @throws NullPointerException if map is null

 */

public static <K,V>TransformedMultiValuedMap<K,V> transformedMap(final MultiValuedMap<K,V> map,final Transformer<? super K,? extends K> keyTransformer,final Transformer<? super V,? extends V> valueTransformer){

  final TransformedMultiValuedMap<K,V> decorated=new TransformedMultiValuedMap<>(map,keyTransformer,valueTransformer);

  if (!map.isEmpty()) {

    final MultiValuedMap<K,V> mapCopy=new ArrayListValuedHashMap<>(map);

    decorated.clear();

    decorated.putAll(mapCopy);

  }

  return decorated;

}

Location: TransformedMultiValuedMap.java

Content: 

/** 

 * Constructor that wraps (not copies). <p> If there are any elements already in the collection being decorated, they are NOT transformed.

 * @param map  the MultiValuedMap to decorate, may not be null

 * @param keyTransformer  the transformer to use for key conversion, null means no conversion

 * @param valueTransformer  the transformer to use for value conversion, null means no conversion

 * @throws NullPointerException if map is null

 */

protected TransformedMultiValuedMap(final MultiValuedMap<K,V> map,final Transformer<? super K,? extends K> keyTransformer,final Transformer<? super V,? extends V> valueTransformer){

  super(map);

  this.keyTransformer=keyTransformer;

  this.valueTransformer=valueTransformer;

}

Location: TransformedMultiValuedMap.java

Content: 

/** 

 * Factory method to create a transforming MultiValuedMap. <p> If there are any elements already in the map being decorated, they are NOT transformed. Contrast this with {@link #transformedMap(MultiValuedMap,Transformer,Transformer)}.

 * @param < K > the key type

 * @param < V > the value type

 * @param map  the MultiValuedMap to decorate, may not be null

 * @param keyTransformer  the transformer to use for key conversion, null means no conversion

 * @param valueTransformer  the transformer to use for value conversion, null means no conversion

 * @return a new transformed MultiValuedMap

 * @throws NullPointerException if map is null

 */

public static <K,V>TransformedMultiValuedMap<K,V> transformingMap(final MultiValuedMap<K,V> map,final Transformer<? super K,? extends K> keyTransformer,final Transformer<? super V,? extends V> valueTransformer){

  return new TransformedMultiValuedMap<>(map,keyTransformer,valueTransformer);

}

Location: TransformedMultiValuedMap.java

Content: 

/** 

 * Transforms a key. <p> The transformer itself may throw an exception if necessary.

 * @param object  the object to transform

 * @return the transformed object

 */

protected K transformKey(final K object){

  if (keyTransformer == null) {

    return object;

  }

  return keyTransformer.transform(object);

}

Location: TransformedMultiValuedMap.java

Content: 

/** 

 * Transforms a value. <p> The transformer itself may throw an exception if necessary.

 * @param object  the object to transform

 * @return the transformed object

 */

protected V transformValue(final V object){

  if (valueTransformer == null) {

    return object;

  }

  return valueTransformer.transform(object);

}

