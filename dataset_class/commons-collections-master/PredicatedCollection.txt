Location: PredicatedCollection.java

Content: 

/** 

 * Returns a Builder with the given predicate.

 * @param < E >  the element type

 * @param predicate  the predicate to use

 * @return a new Builder for predicated collections

 * @since 4.1

 */

public static <E>Builder<E> builder(final Predicate<? super E> predicate){

  return new Builder<>(predicate);

}

Location: PredicatedCollection.java

Content: 

/** 

 * Returns a Builder with a NotNullPredicate.

 * @param < E >  the element type

 * @return a new Builder for predicated collections that ignores null values.

 * @since 4.1

 */

public static <E>Builder<E> notNullBuilder(){

  return new Builder<>(NotNullPredicate.<E>notNullPredicate());

}

Location: PredicatedCollection.java

Content: 

/** 

 * Constructor that wraps (not copies). <p> If there are any elements already in the collection being decorated, they are validated.

 * @param collection  the collection to decorate, must not be null

 * @param predicate  the predicate to use for validation, must not be null

 * @throws NullPointerException if collection or predicate is null

 * @throws IllegalArgumentException if the collection contains invalid elements

 */

protected PredicatedCollection(final Collection<E> collection,final Predicate<? super E> predicate){

  super(collection);

  this.predicate=Objects.requireNonNull(predicate,"predicate");

  for (  final E item : collection) {

    validate(item);

  }

}

Location: PredicatedCollection.java

Content: 

/** 

 * Validates the object being added to ensure it matches the predicate. <p> The predicate itself should not throw an exception, but return false to indicate that the object cannot be added.

 * @param object  the object being added

 * @throws IllegalArgumentException if the add is invalid

 */

protected void validate(final E object){

  if (!predicate.evaluate(object)) {

    throw new IllegalArgumentException("Cannot add Object '" + object + "' - Predicate '"+ predicate+ "' rejected it");

  }

}

Location: PredicatedCollection.java

Content: 

/** 

 * Returns a Builder with the given predicate.

 * @param < E >  the element type

 * @param predicate  the predicate to use

 * @return a new Builder for predicated collections

 * @since 4.1

 */

public static <E>Builder<E> builder(final Predicate<? super E> predicate){

  return new Builder<>(predicate);

}

Location: PredicatedCollection.java

Content: 

/** 

 * Returns a Builder with a NotNullPredicate.

 * @param < E >  the element type

 * @return a new Builder for predicated collections that ignores null values.

 * @since 4.1

 */

public static <E>Builder<E> notNullBuilder(){

  return new Builder<>(NotNullPredicate.<E>notNullPredicate());

}

Location: PredicatedCollection.java

Content: 

/** 

 * Constructor that wraps (not copies). <p> If there are any elements already in the collection being decorated, they are validated.

 * @param collection  the collection to decorate, must not be null

 * @param predicate  the predicate to use for validation, must not be null

 * @throws NullPointerException if collection or predicate is null

 * @throws IllegalArgumentException if the collection contains invalid elements

 */

protected PredicatedCollection(final Collection<E> collection,final Predicate<? super E> predicate){

  super(collection);

  this.predicate=Objects.requireNonNull(predicate,"predicate");

  for (  final E item : collection) {

    validate(item);

  }

}

Location: PredicatedCollection.java

Content: 

/** 

 * Validates the object being added to ensure it matches the predicate. <p> The predicate itself should not throw an exception, but return false to indicate that the object cannot be added.

 * @param object  the object being added

 * @throws IllegalArgumentException if the add is invalid

 */

protected void validate(final E object){

  if (!predicate.evaluate(object)) {

    throw new IllegalArgumentException("Cannot add Object '" + object + "' - Predicate '"+ predicate+ "' rejected it");

  }

}

