Location: ClosureUtilsTest.java

Content: 

@Test @SuppressWarnings("unchecked") public void testChainedClosure(){

  MockClosure<Object> a=new MockClosure<>();

  MockClosure<Object> b=new MockClosure<>();

  ClosureUtils.chainedClosure(a,b).execute(null);

  assertEquals(1,a.count);

  assertEquals(1,b.count);

  a=new MockClosure<>();

  b=new MockClosure<>();

  ClosureUtils.<Object>chainedClosure(a,b,a).execute(null);

  assertEquals(2,a.count);

  assertEquals(1,b.count);

  a=new MockClosure<>();

  b=new MockClosure<>();

  Collection<Closure<Object>> coll=new ArrayList<>();

  coll.add(b);

  coll.add(a);

  coll.add(b);

  ClosureUtils.<Object>chainedClosure(coll).execute(null);

  assertEquals(1,a.count);

  assertEquals(2,b.count);

  assertSame(NOPClosure.INSTANCE,ClosureUtils.<Object>chainedClosure());

  assertSame(NOPClosure.INSTANCE,ClosureUtils.<Object>chainedClosure(Collections.<Closure<Object>>emptyList()));

  try {

    ClosureUtils.chainedClosure(null,null);

    fail();

  }

 catch (  final NullPointerException ex) {

  }

  try {

    ClosureUtils.<Object>chainedClosure((Closure[])null);

    fail();

  }

 catch (  final NullPointerException ex) {

  }

  try {

    ClosureUtils.<Object>chainedClosure((Collection<Closure<Object>>)null);

    fail();

  }

 catch (  final NullPointerException ex) {

  }

  try {

    ClosureUtils.<Object>chainedClosure(null,null);

    fail();

  }

 catch (  final NullPointerException ex) {

  }

  try {

    coll=new ArrayList<>();

    coll.add(null);

    coll.add(null);

    ClosureUtils.chainedClosure(coll);

    fail();

  }

 catch (  final NullPointerException ex) {

  }

}

Location: ClosureUtilsTest.java

Content: 

@Test public void testDoWhileClosure(){

  MockClosure<Object> cmd=new MockClosure<>();

  ClosureUtils.doWhileClosure(cmd,FalsePredicate.falsePredicate()).execute(null);

  assertEquals(1,cmd.count);

  cmd=new MockClosure<>();

  ClosureUtils.doWhileClosure(cmd,PredicateUtils.uniquePredicate()).execute(null);

  assertEquals(2,cmd.count);

  try {

    ClosureUtils.doWhileClosure(null,null);

    fail();

  }

 catch (  final NullPointerException ex) {

  }

}

Location: ClosureUtilsTest.java

Content: 

@Test public void testExceptionClosure(){

  assertNotNull(ClosureUtils.exceptionClosure());

  assertSame(ClosureUtils.exceptionClosure(),ClosureUtils.exceptionClosure());

  try {

    ClosureUtils.exceptionClosure().execute(null);

  }

 catch (  final FunctorException ex) {

    try {

      ClosureUtils.exceptionClosure().execute(cString);

    }

 catch (    final FunctorException ex2) {

      return;

    }

  }

  fail();

}

Location: ClosureUtilsTest.java

Content: 

@Test public void testForClosure(){

  final MockClosure<Object> cmd=new MockClosure<>();

  ClosureUtils.forClosure(5,cmd).execute(null);

  assertEquals(5,cmd.count);

  assertSame(NOPClosure.INSTANCE,ClosureUtils.forClosure(0,new MockClosure<>()));

  assertSame(NOPClosure.INSTANCE,ClosureUtils.forClosure(-1,new MockClosure<>()));

  assertSame(NOPClosure.INSTANCE,ClosureUtils.forClosure(1,null));

  assertSame(NOPClosure.INSTANCE,ClosureUtils.forClosure(3,null));

  assertSame(cmd,ClosureUtils.forClosure(1,cmd));

}

Location: ClosureUtilsTest.java

Content: 

@Test public void testIfClosure(){

  MockClosure<Object> a=new MockClosure<>();

  MockClosure<Object> b;

  ClosureUtils.ifClosure(TruePredicate.truePredicate(),a).execute(null);

  assertEquals(1,a.count);

  a=new MockClosure<>();

  ClosureUtils.ifClosure(FalsePredicate.<Object>falsePredicate(),a).execute(null);

  assertEquals(0,a.count);

  a=new MockClosure<>();

  b=new MockClosure<>();

  ClosureUtils.ifClosure(TruePredicate.<Object>truePredicate(),a,b).execute(null);

  assertEquals(1,a.count);

  assertEquals(0,b.count);

  a=new MockClosure<>();

  b=new MockClosure<>();

  ClosureUtils.ifClosure(FalsePredicate.<Object>falsePredicate(),a,b).execute(null);

  assertEquals(0,a.count);

  assertEquals(1,b.count);

}

Location: ClosureUtilsTest.java

Content: 

@Test public void testInvokeClosure(){

  StringBuffer buf=new StringBuffer("Hello");

  ClosureUtils.invokerClosure("reverse").execute(buf);

  assertEquals("olleH",buf.toString());

  buf=new StringBuffer("Hello");

  ClosureUtils.invokerClosure("setLength",new Class[]{Integer.TYPE},new Object[]{Integer.valueOf(2)}).execute(buf);

  assertEquals("He",buf.toString());

}

Location: ClosureUtilsTest.java

Content: 

@Test public void testNopClosure(){

  final StringBuilder buf=new StringBuilder("Hello");

  ClosureUtils.nopClosure().execute(null);

  assertEquals("Hello",buf.toString());

  ClosureUtils.nopClosure().execute("Hello");

  assertEquals("Hello",buf.toString());

}

Location: ClosureUtilsTest.java

Content: 

@Test @SuppressWarnings("unchecked") public void testSwitchClosure(){

  final MockClosure<String> a=new MockClosure<>();

  final MockClosure<String> b=new MockClosure<>();

  ClosureUtils.<String>switchClosure(new Predicate[]{EqualPredicate.equalPredicate("HELLO"),EqualPredicate.equalPredicate("THERE")},new Closure[]{a,b}).execute("WELL");

  assertEquals(0,a.count);

  assertEquals(0,b.count);

  a.reset();

  b.reset();

  ClosureUtils.<String>switchClosure(new Predicate[]{EqualPredicate.equalPredicate("HELLO"),EqualPredicate.equalPredicate("THERE")},new Closure[]{a,b}).execute("HELLO");

  assertEquals(1,a.count);

  assertEquals(0,b.count);

  a.reset();

  b.reset();

  final MockClosure<String> c=new MockClosure<>();

  ClosureUtils.<String>switchClosure(new Predicate[]{EqualPredicate.equalPredicate("HELLO"),EqualPredicate.equalPredicate("THERE")},new Closure[]{a,b},c).execute("WELL");

  assertEquals(0,a.count);

  assertEquals(0,b.count);

  assertEquals(1,c.count);

  a.reset();

  b.reset();

  final Map<Predicate<String>,Closure<String>> map=new HashMap<>();

  map.put(EqualPredicate.equalPredicate("HELLO"),a);

  map.put(EqualPredicate.equalPredicate("THERE"),b);

  ClosureUtils.<String>switchClosure(map).execute(null);

  assertEquals(0,a.count);

  assertEquals(0,b.count);

  a.reset();

  b.reset();

  map.clear();

  map.put(EqualPredicate.equalPredicate("HELLO"),a);

  map.put(EqualPredicate.equalPredicate("THERE"),b);

  ClosureUtils.switchClosure(map).execute("THERE");

  assertEquals(0,a.count);

  assertEquals(1,b.count);

  a.reset();

  b.reset();

  c.reset();

  map.clear();

  map.put(EqualPredicate.equalPredicate("HELLO"),a);

  map.put(EqualPredicate.equalPredicate("THERE"),b);

  map.put(null,c);

  ClosureUtils.switchClosure(map).execute("WELL");

  assertEquals(0,a.count);

  assertEquals(0,b.count);

  assertEquals(1,c.count);

  assertEquals(NOPClosure.INSTANCE,ClosureUtils.<String>switchClosure(new Predicate[0],new Closure[0]));

  assertEquals(NOPClosure.INSTANCE,ClosureUtils.<String>switchClosure(new HashMap<Predicate<String>,Closure<String>>()));

  map.clear();

  map.put(null,null);

  assertEquals(NOPClosure.INSTANCE,ClosureUtils.switchClosure(map));

  try {

    ClosureUtils.switchClosure(null,null);

    fail();

  }

 catch (  final NullPointerException ex) {

  }

  try {

    ClosureUtils.<String>switchClosure((Predicate<String>[])null,(Closure<String>[])null);

    fail();

  }

 catch (  final NullPointerException ex) {

  }

  try {

    ClosureUtils.<String>switchClosure((Map<Predicate<String>,Closure<String>>)null);

    fail();

  }

 catch (  final NullPointerException ex) {

  }

  try {

    ClosureUtils.<String>switchClosure(new Predicate[2],new Closure[2]);

    fail();

  }

 catch (  final NullPointerException ex) {

  }

  try {

    ClosureUtils.<String>switchClosure(new Predicate[]{TruePredicate.<String>truePredicate()},new Closure[]{a,b});

    fail();

  }

 catch (  final IllegalArgumentException ex) {

  }

}

Location: ClosureUtilsTest.java

Content: 

@Test public void testSwitchMapClosure(){

  final MockClosure<String> a=new MockClosure<>();

  final MockClosure<String> b=new MockClosure<>();

  final Map<String,Closure<String>> map=new HashMap<>();

  map.put("HELLO",a);

  map.put("THERE",b);

  ClosureUtils.switchMapClosure(map).execute(null);

  assertEquals(0,a.count);

  assertEquals(0,b.count);

  a.reset();

  b.reset();

  map.clear();

  map.put("HELLO",a);

  map.put("THERE",b);

  ClosureUtils.switchMapClosure(map).execute("THERE");

  assertEquals(0,a.count);

  assertEquals(1,b.count);

  a.reset();

  b.reset();

  map.clear();

  final MockClosure<String> c=new MockClosure<>();

  map.put("HELLO",a);

  map.put("THERE",b);

  map.put(null,c);

  ClosureUtils.switchMapClosure(map).execute("WELL");

  assertEquals(0,a.count);

  assertEquals(0,b.count);

  assertEquals(1,c.count);

  assertEquals(NOPClosure.INSTANCE,ClosureUtils.switchMapClosure(new HashMap<String,Closure<String>>()));

  try {

    ClosureUtils.switchMapClosure(null);

    fail();

  }

 catch (  final NullPointerException ex) {

  }

}

Location: ClosureUtilsTest.java

Content: 

@Test public void testTransformerClosure(){

  final MockTransformer<Object> mock=new MockTransformer<>();

  final Closure<Object> closure=ClosureUtils.asClosure(mock);

  closure.execute(null);

  assertEquals(1,mock.count);

  closure.execute(null);

  assertEquals(2,mock.count);

  assertEquals(ClosureUtils.nopClosure(),ClosureUtils.asClosure(null));

}

Location: ClosureUtilsTest.java

Content: 

@Test public void testWhileClosure(){

  MockClosure<Object> cmd=new MockClosure<>();

  ClosureUtils.whileClosure(FalsePredicate.falsePredicate(),cmd).execute(null);

  assertEquals(0,cmd.count);

  cmd=new MockClosure<>();

  ClosureUtils.whileClosure(PredicateUtils.uniquePredicate(),cmd).execute(null);

  assertEquals(1,cmd.count);

  try {

    ClosureUtils.whileClosure(null,ClosureUtils.nopClosure());

    fail();

  }

 catch (  final NullPointerException ex) {

  }

  try {

    ClosureUtils.whileClosure(FalsePredicate.falsePredicate(),null);

    fail();

  }

 catch (  final NullPointerException ex) {

  }

  try {

    ClosureUtils.whileClosure(null,null);

    fail();

  }

 catch (  final NullPointerException ex) {

  }

}

Location: ClosureUtilsTest.java

Content: 

@Test @SuppressWarnings("unchecked") public void testChainedClosure(){

  MockClosure<Object> a=new MockClosure<>();

  MockClosure<Object> b=new MockClosure<>();

  ClosureUtils.chainedClosure(a,b).execute(null);

  assertEquals(1,a.count);

  assertEquals(1,b.count);

  a=new MockClosure<>();

  b=new MockClosure<>();

  ClosureUtils.<Object>chainedClosure(a,b,a).execute(null);

  assertEquals(2,a.count);

  assertEquals(1,b.count);

  a=new MockClosure<>();

  b=new MockClosure<>();

  Collection<Closure<Object>> coll=new ArrayList<>();

  coll.add(b);

  coll.add(a);

  coll.add(b);

  ClosureUtils.<Object>chainedClosure(coll).execute(null);

  assertEquals(1,a.count);

  assertEquals(2,b.count);

  assertSame(NOPClosure.INSTANCE,ClosureUtils.<Object>chainedClosure());

  assertSame(NOPClosure.INSTANCE,ClosureUtils.<Object>chainedClosure(Collections.<Closure<Object>>emptyList()));

  try {

    ClosureUtils.chainedClosure(null,null);

    fail();

  }

 catch (  final NullPointerException ex) {

  }

  try {

    ClosureUtils.<Object>chainedClosure((Closure[])null);

    fail();

  }

 catch (  final NullPointerException ex) {

  }

  try {

    ClosureUtils.<Object>chainedClosure((Collection<Closure<Object>>)null);

    fail();

  }

 catch (  final NullPointerException ex) {

  }

  try {

    ClosureUtils.<Object>chainedClosure(null,null);

    fail();

  }

 catch (  final NullPointerException ex) {

  }

  try {

    coll=new ArrayList<>();

    coll.add(null);

    coll.add(null);

    ClosureUtils.chainedClosure(coll);

    fail();

  }

 catch (  final NullPointerException ex) {

  }

}

Location: ClosureUtilsTest.java

Content: 

@Test public void testDoWhileClosure(){

  MockClosure<Object> cmd=new MockClosure<>();

  ClosureUtils.doWhileClosure(cmd,FalsePredicate.falsePredicate()).execute(null);

  assertEquals(1,cmd.count);

  cmd=new MockClosure<>();

  ClosureUtils.doWhileClosure(cmd,PredicateUtils.uniquePredicate()).execute(null);

  assertEquals(2,cmd.count);

  try {

    ClosureUtils.doWhileClosure(null,null);

    fail();

  }

 catch (  final NullPointerException ex) {

  }

}

Location: ClosureUtilsTest.java

Content: 

@Test public void testExceptionClosure(){

  assertNotNull(ClosureUtils.exceptionClosure());

  assertSame(ClosureUtils.exceptionClosure(),ClosureUtils.exceptionClosure());

  try {

    ClosureUtils.exceptionClosure().execute(null);

  }

 catch (  final FunctorException ex) {

    try {

      ClosureUtils.exceptionClosure().execute(cString);

    }

 catch (    final FunctorException ex2) {

      return;

    }

  }

  fail();

}

Location: ClosureUtilsTest.java

Content: 

@Test public void testForClosure(){

  final MockClosure<Object> cmd=new MockClosure<>();

  ClosureUtils.forClosure(5,cmd).execute(null);

  assertEquals(5,cmd.count);

  assertSame(NOPClosure.INSTANCE,ClosureUtils.forClosure(0,new MockClosure<>()));

  assertSame(NOPClosure.INSTANCE,ClosureUtils.forClosure(-1,new MockClosure<>()));

  assertSame(NOPClosure.INSTANCE,ClosureUtils.forClosure(1,null));

  assertSame(NOPClosure.INSTANCE,ClosureUtils.forClosure(3,null));

  assertSame(cmd,ClosureUtils.forClosure(1,cmd));

}

Location: ClosureUtilsTest.java

Content: 

@Test public void testIfClosure(){

  MockClosure<Object> a=new MockClosure<>();

  MockClosure<Object> b;

  ClosureUtils.ifClosure(TruePredicate.truePredicate(),a).execute(null);

  assertEquals(1,a.count);

  a=new MockClosure<>();

  ClosureUtils.ifClosure(FalsePredicate.<Object>falsePredicate(),a).execute(null);

  assertEquals(0,a.count);

  a=new MockClosure<>();

  b=new MockClosure<>();

  ClosureUtils.ifClosure(TruePredicate.<Object>truePredicate(),a,b).execute(null);

  assertEquals(1,a.count);

  assertEquals(0,b.count);

  a=new MockClosure<>();

  b=new MockClosure<>();

  ClosureUtils.ifClosure(FalsePredicate.<Object>falsePredicate(),a,b).execute(null);

  assertEquals(0,a.count);

  assertEquals(1,b.count);

}

Location: ClosureUtilsTest.java

Content: 

@Test public void testInvokeClosure(){

  StringBuffer buf=new StringBuffer("Hello");

  ClosureUtils.invokerClosure("reverse").execute(buf);

  assertEquals("olleH",buf.toString());

  buf=new StringBuffer("Hello");

  ClosureUtils.invokerClosure("setLength",new Class[]{Integer.TYPE},new Object[]{Integer.valueOf(2)}).execute(buf);

  assertEquals("He",buf.toString());

}

Location: ClosureUtilsTest.java

Content: 

@Test public void testNopClosure(){

  final StringBuilder buf=new StringBuilder("Hello");

  ClosureUtils.nopClosure().execute(null);

  assertEquals("Hello",buf.toString());

  ClosureUtils.nopClosure().execute("Hello");

  assertEquals("Hello",buf.toString());

}

Location: ClosureUtilsTest.java

Content: 

@Test @SuppressWarnings("unchecked") public void testSwitchClosure(){

  final MockClosure<String> a=new MockClosure<>();

  final MockClosure<String> b=new MockClosure<>();

  ClosureUtils.<String>switchClosure(new Predicate[]{EqualPredicate.equalPredicate("HELLO"),EqualPredicate.equalPredicate("THERE")},new Closure[]{a,b}).execute("WELL");

  assertEquals(0,a.count);

  assertEquals(0,b.count);

  a.reset();

  b.reset();

  ClosureUtils.<String>switchClosure(new Predicate[]{EqualPredicate.equalPredicate("HELLO"),EqualPredicate.equalPredicate("THERE")},new Closure[]{a,b}).execute("HELLO");

  assertEquals(1,a.count);

  assertEquals(0,b.count);

  a.reset();

  b.reset();

  final MockClosure<String> c=new MockClosure<>();

  ClosureUtils.<String>switchClosure(new Predicate[]{EqualPredicate.equalPredicate("HELLO"),EqualPredicate.equalPredicate("THERE")},new Closure[]{a,b},c).execute("WELL");

  assertEquals(0,a.count);

  assertEquals(0,b.count);

  assertEquals(1,c.count);

  a.reset();

  b.reset();

  final Map<Predicate<String>,Closure<String>> map=new HashMap<>();

  map.put(EqualPredicate.equalPredicate("HELLO"),a);

  map.put(EqualPredicate.equalPredicate("THERE"),b);

  ClosureUtils.<String>switchClosure(map).execute(null);

  assertEquals(0,a.count);

  assertEquals(0,b.count);

  a.reset();

  b.reset();

  map.clear();

  map.put(EqualPredicate.equalPredicate("HELLO"),a);

  map.put(EqualPredicate.equalPredicate("THERE"),b);

  ClosureUtils.switchClosure(map).execute("THERE");

  assertEquals(0,a.count);

  assertEquals(1,b.count);

  a.reset();

  b.reset();

  c.reset();

  map.clear();

  map.put(EqualPredicate.equalPredicate("HELLO"),a);

  map.put(EqualPredicate.equalPredicate("THERE"),b);

  map.put(null,c);

  ClosureUtils.switchClosure(map).execute("WELL");

  assertEquals(0,a.count);

  assertEquals(0,b.count);

  assertEquals(1,c.count);

  assertEquals(NOPClosure.INSTANCE,ClosureUtils.<String>switchClosure(new Predicate[0],new Closure[0]));

  assertEquals(NOPClosure.INSTANCE,ClosureUtils.<String>switchClosure(new HashMap<Predicate<String>,Closure<String>>()));

  map.clear();

  map.put(null,null);

  assertEquals(NOPClosure.INSTANCE,ClosureUtils.switchClosure(map));

  try {

    ClosureUtils.switchClosure(null,null);

    fail();

  }

 catch (  final NullPointerException ex) {

  }

  try {

    ClosureUtils.<String>switchClosure((Predicate<String>[])null,(Closure<String>[])null);

    fail();

  }

 catch (  final NullPointerException ex) {

  }

  try {

    ClosureUtils.<String>switchClosure((Map<Predicate<String>,Closure<String>>)null);

    fail();

  }

 catch (  final NullPointerException ex) {

  }

  try {

    ClosureUtils.<String>switchClosure(new Predicate[2],new Closure[2]);

    fail();

  }

 catch (  final NullPointerException ex) {

  }

  try {

    ClosureUtils.<String>switchClosure(new Predicate[]{TruePredicate.<String>truePredicate()},new Closure[]{a,b});

    fail();

  }

 catch (  final IllegalArgumentException ex) {

  }

}

Location: ClosureUtilsTest.java

Content: 

@Test public void testSwitchMapClosure(){

  final MockClosure<String> a=new MockClosure<>();

  final MockClosure<String> b=new MockClosure<>();

  final Map<String,Closure<String>> map=new HashMap<>();

  map.put("HELLO",a);

  map.put("THERE",b);

  ClosureUtils.switchMapClosure(map).execute(null);

  assertEquals(0,a.count);

  assertEquals(0,b.count);

  a.reset();

  b.reset();

  map.clear();

  map.put("HELLO",a);

  map.put("THERE",b);

  ClosureUtils.switchMapClosure(map).execute("THERE");

  assertEquals(0,a.count);

  assertEquals(1,b.count);

  a.reset();

  b.reset();

  map.clear();

  final MockClosure<String> c=new MockClosure<>();

  map.put("HELLO",a);

  map.put("THERE",b);

  map.put(null,c);

  ClosureUtils.switchMapClosure(map).execute("WELL");

  assertEquals(0,a.count);

  assertEquals(0,b.count);

  assertEquals(1,c.count);

  assertEquals(NOPClosure.INSTANCE,ClosureUtils.switchMapClosure(new HashMap<String,Closure<String>>()));

  try {

    ClosureUtils.switchMapClosure(null);

    fail();

  }

 catch (  final NullPointerException ex) {

  }

}

Location: ClosureUtilsTest.java

Content: 

@Test public void testTransformerClosure(){

  final MockTransformer<Object> mock=new MockTransformer<>();

  final Closure<Object> closure=ClosureUtils.asClosure(mock);

  closure.execute(null);

  assertEquals(1,mock.count);

  closure.execute(null);

  assertEquals(2,mock.count);

  assertEquals(ClosureUtils.nopClosure(),ClosureUtils.asClosure(null));

}

Location: ClosureUtilsTest.java

Content: 

@Test public void testWhileClosure(){

  MockClosure<Object> cmd=new MockClosure<>();

  ClosureUtils.whileClosure(FalsePredicate.falsePredicate(),cmd).execute(null);

  assertEquals(0,cmd.count);

  cmd=new MockClosure<>();

  ClosureUtils.whileClosure(PredicateUtils.uniquePredicate(),cmd).execute(null);

  assertEquals(1,cmd.count);

  try {

    ClosureUtils.whileClosure(null,ClosureUtils.nopClosure());

    fail();

  }

 catch (  final NullPointerException ex) {

  }

  try {

    ClosureUtils.whileClosure(FalsePredicate.falsePredicate(),null);

    fail();

  }

 catch (  final NullPointerException ex) {

  }

  try {

    ClosureUtils.whileClosure(null,null);

    fail();

  }

 catch (  final NullPointerException ex) {

  }

}

