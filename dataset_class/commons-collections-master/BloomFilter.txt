Location: BloomFilter.java

Content: 

/** 

 * Performs a logical "AND" with the other Bloom filter and returns the cardinality (number of enabled bits) of the result.

 * @param other the other Bloom filter

 * @return the cardinality of the result of {@code (this AND other)}

 */

int andCardinality(BloomFilter other);

Location: BloomFilter.java

Content: 

/** 

 * Performs a logical "OR" with the other Bloom filter and returns the cardinality (number of enabled bits) of the result.

 * @param other the other Bloom filter

 * @return the cardinality of the result of {@code (this OR other)}

 */

int orCardinality(BloomFilter other);

Location: BloomFilter.java

Content: 

/** 

 * Performs a logical "XOR" with the other Bloom filter and returns the cardinality (number of enabled bits) of the result.

 * @param other the other Bloom filter

 * @return the cardinality of the result of {@code (this XOR other)}

 */

int xorCardinality(BloomFilter other);

Location: BloomFilter.java

Content: 

/** 

 * Performs a logical "AND" with the other Bloom filter and returns the cardinality (number of enabled bits) of the result.

 * @param other the other Bloom filter

 * @return the cardinality of the result of {@code (this AND other)}

 */

int andCardinality(BloomFilter other);

Location: BloomFilter.java

Content: 

/** 

 * Performs a logical "OR" with the other Bloom filter and returns the cardinality (number of enabled bits) of the result.

 * @param other the other Bloom filter

 * @return the cardinality of the result of {@code (this OR other)}

 */

int orCardinality(BloomFilter other);

Location: BloomFilter.java

Content: 

/** 

 * Performs a logical "XOR" with the other Bloom filter and returns the cardinality (number of enabled bits) of the result.

 * @param other the other Bloom filter

 * @return the cardinality of the result of {@code (this XOR other)}

 */

int xorCardinality(BloomFilter other);

