Location: TransformedSet.java

Content: 

/** 

 * Constructor that wraps (not copies). <p> If there are any elements already in the set being decorated, they are NOT transformed.

 * @param set  the set to decorate, must not be null

 * @param transformer  the transformer to use for conversion, must not be null

 * @throws NullPointerException if set or transformer is null

 */

protected TransformedSet(final Set<E> set,final Transformer<? super E,? extends E> transformer){

  super(set,transformer);

}

Location: TransformedSet.java

Content: 

/** 

 * Factory method to create a transforming set. <p> If there are any elements already in the set being decorated, they are NOT transformed. Contrast this with  {@link #transformedSet(Set,Transformer)}.

 * @param < E > the element type

 * @param set  the set to decorate, must not be null

 * @param transformer  the transformer to use for conversion, must not be null

 * @return a new transformed set

 * @throws NullPointerException if set or transformer is null

 * @since 4.0

 */

public static <E>TransformedSet<E> transformingSet(final Set<E> set,final Transformer<? super E,? extends E> transformer){

  return new TransformedSet<>(set,transformer);

}

Location: TransformedSet.java

Content: 

/** 

 * Constructor that wraps (not copies). <p> If there are any elements already in the set being decorated, they are NOT transformed.

 * @param set  the set to decorate, must not be null

 * @param transformer  the transformer to use for conversion, must not be null

 * @throws NullPointerException if set or transformer is null

 */

protected TransformedSet(final Set<E> set,final Transformer<? super E,? extends E> transformer){

  super(set,transformer);

}

Location: TransformedSet.java

Content: 

/** 

 * Factory method to create a transforming set. <p> If there are any elements already in the set being decorated, they are NOT transformed. Contrast this with  {@link #transformedSet(Set,Transformer)}.

 * @param < E > the element type

 * @param set  the set to decorate, must not be null

 * @param transformer  the transformer to use for conversion, must not be null

 * @return a new transformed set

 * @throws NullPointerException if set or transformer is null

 * @since 4.0

 */

public static <E>TransformedSet<E> transformingSet(final Set<E> set,final Transformer<? super E,? extends E> transformer){

  return new TransformedSet<>(set,transformer);

}

