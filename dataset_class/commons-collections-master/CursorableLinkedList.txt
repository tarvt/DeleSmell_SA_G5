Location: CursorableLinkedList.java

Content: 

/** 

 * Inserts a new node into the list.

 * @param nodeToInsert  new node to insert

 * @param insertBeforeNode  node to insert before

 * @throws NullPointerException if either node is null

 */

@Override protected void addNode(final Node<E> nodeToInsert,final Node<E> insertBeforeNode){

  super.addNode(nodeToInsert,insertBeforeNode);

  broadcastNodeInserted(nodeToInsert);

}

Location: CursorableLinkedList.java

Content: 

/** 

 * Informs all of my registered cursors that the specified element was changed.

 * @param node  the node that was changed

 */

protected void broadcastNodeChanged(final Node<E> node){

  final Iterator<WeakReference<Cursor<E>>> it=cursors.iterator();

  while (it.hasNext()) {

    final WeakReference<Cursor<E>> ref=it.next();

    final Cursor<E> cursor=ref.get();

    if (cursor == null) {

      it.remove();

    }

 else {

      cursor.nodeChanged(node);

    }

  }

}

Location: CursorableLinkedList.java

Content: 

/** 

 * Informs all of my registered cursors that the specified element was just added to my list.

 * @param node  the node that was changed

 */

protected void broadcastNodeInserted(final Node<E> node){

  final Iterator<WeakReference<Cursor<E>>> it=cursors.iterator();

  while (it.hasNext()) {

    final WeakReference<Cursor<E>> ref=it.next();

    final Cursor<E> cursor=ref.get();

    if (cursor == null) {

      it.remove();

    }

 else {

      cursor.nodeInserted(node);

    }

  }

}

Location: CursorableLinkedList.java

Content: 

/** 

 * Informs all of my registered cursors that the specified element was just removed from my list.

 * @param node  the node that was changed

 */

protected void broadcastNodeRemoved(final Node<E> node){

  final Iterator<WeakReference<Cursor<E>>> it=cursors.iterator();

  while (it.hasNext()) {

    final WeakReference<Cursor<E>> ref=it.next();

    final Cursor<E> cursor=ref.get();

    if (cursor == null) {

      it.remove();

    }

 else {

      cursor.nodeRemoved(node);

    }

  }

}

Location: CursorableLinkedList.java

Content: 

/** 

 * Creates a list iterator for the sublist.

 * @param subList  the sublist to get an iterator for

 * @param fromIndex  the index to start from, relative to the sublist

 * @return the list iterator for the sublist

 */

@Override protected ListIterator<E> createSubListListIterator(final LinkedSubList<E> subList,final int fromIndex){

  final SubCursor<E> cursor=new SubCursor<>(subList,fromIndex);

  registerCursor(cursor);

  return cursor;

}

Location: CursorableLinkedList.java

Content: 

/** 

 * Returns a  {@link Cursor} for iterating through the elements of this list.<p> A  {@code Cursor} is a {@code ListIterator} with an additional{@code close()} method. Calling this method immediately discards thereferences to the cursor. If it is not called, then the garbage collector will still remove the reference as it is held via a  {@code WeakReference}. <p> The cursor enables iteration and list changes to occur in any order without invalidating the iterator (from one thread). When elements are added to the list, an event is fired to all active cursors enabling them to adjust to the change in the list. <p> When the "current" (i.e., last returned by  {@link ListIterator#next}or  {@link ListIterator#previous}) element of the list is removed, the cursor automatically adjusts to the change (invalidating the last returned value such that it cannot be removed). <p> The  {@link #listIterator()} method returns the same as this method, and canbe cast to a  {@code Cursor} if the {@code close} method is required.

 * @return a new cursor iterator

 */

public CursorableLinkedList.Cursor<E> cursor(){

  return cursor(0);

}

Location: CursorableLinkedList.java

Content: 

/** 

 * Constructor that creates.

 */

public CursorableLinkedList(){

  init();

}

Location: CursorableLinkedList.java

Content: 

/** 

 * Constructor that copies the specified collection

 * @param coll  the collection to copy

 */

public CursorableLinkedList(final Collection<? extends E> coll){

  super(coll);

}

Location: CursorableLinkedList.java

Content: 

/** 

 * Returns a  {@link Cursor} for iterating through the elements of this liststarting from a specified index. <p> A  {@code Cursor} is a {@code ListIterator} with an additional{@code close()} method. Calling this method immediately discards thereferences to the cursor. If it is not called, then the garbage collector will still remove the reference as it is held via a  {@code WeakReference}. <p> The cursor enables iteration and list changes to occur in any order without invalidating the iterator (from one thread). When elements are added to the list, an event is fired to all active cursors enabling them to adjust to the change in the list. <p> When the "current" (i.e., last returned by  {@link ListIterator#next}or  {@link ListIterator#previous}) element of the list is removed, the cursor automatically adjusts to the change (invalidating the last returned value such that it cannot be removed). <p> The  {@link #listIterator(int)} method returns the same as this method, and canbe cast to a  {@code Cursor} if the {@code close} method is required.

 * @param fromIndex  the index to start from

 * @return a new cursor iterator

 * @throws IndexOutOfBoundsException if the index is out of range(index &lt; 0 || index &gt; size()).

 */

public CursorableLinkedList.Cursor<E> cursor(final int fromIndex){

  final Cursor<E> cursor=new Cursor<>(this,fromIndex);

  registerCursor(cursor);

  return cursor;

}

Location: CursorableLinkedList.java

Content: 

/** 

 * Registers a cursor to be notified of changes to this list.

 * @param cursor  the cursor to register

 */

protected void registerCursor(final Cursor<E> cursor){

  cursors.removeIf(ref -> ref.get() == null);

  cursors.add(new WeakReference<>(cursor));

}

Location: CursorableLinkedList.java

Content: 

/** 

 * Removes all nodes by iteration.

 */

@Override protected void removeAllNodes(){

  if (!isEmpty()) {

    final Iterator<E> it=iterator();

    while (it.hasNext()) {

      it.next();

      it.remove();

    }

  }

}

Location: CursorableLinkedList.java

Content: 

/** 

 * Removes the specified node from the list.

 * @param node  the node to remove

 * @throws NullPointerException if {@code node} is null

 */

@Override protected void removeNode(final Node<E> node){

  super.removeNode(node);

  broadcastNodeRemoved(node);

}

Location: CursorableLinkedList.java

Content: 

/** 

 * Deregisters a cursor from the list to be notified of changes.

 * @param cursor  the cursor to deregister

 */

protected void unregisterCursor(final Cursor<E> cursor){

  for (final Iterator<WeakReference<Cursor<E>>> it=cursors.iterator(); it.hasNext(); ) {

    final WeakReference<Cursor<E>> ref=it.next();

    final Cursor<E> cur=ref.get();

    if (cur == null) {

      it.remove();

    }

 else     if (cur == cursor) {

      ref.clear();

      it.remove();

      break;

    }

  }

}

Location: CursorableLinkedList.java

Content: 

/** 

 * Updates the node with a new value. This implementation sets the value on the node. Subclasses can override this to record the change.

 * @param node  node to update

 * @param value  new value of the node

 */

@Override protected void updateNode(final Node<E> node,final E value){

  super.updateNode(node,value);

  broadcastNodeChanged(node);

}

Location: CursorableLinkedList.java

Content: 

/** 

 * Inserts a new node into the list.

 * @param nodeToInsert  new node to insert

 * @param insertBeforeNode  node to insert before

 * @throws NullPointerException if either node is null

 */

@Override protected void addNode(final Node<E> nodeToInsert,final Node<E> insertBeforeNode){

  super.addNode(nodeToInsert,insertBeforeNode);

  broadcastNodeInserted(nodeToInsert);

}

Location: CursorableLinkedList.java

Content: 

/** 

 * Informs all of my registered cursors that the specified element was changed.

 * @param node  the node that was changed

 */

protected void broadcastNodeChanged(final Node<E> node){

  final Iterator<WeakReference<Cursor<E>>> it=cursors.iterator();

  while (it.hasNext()) {

    final WeakReference<Cursor<E>> ref=it.next();

    final Cursor<E> cursor=ref.get();

    if (cursor == null) {

      it.remove();

    }

 else {

      cursor.nodeChanged(node);

    }

  }

}

Location: CursorableLinkedList.java

Content: 

/** 

 * Informs all of my registered cursors that the specified element was just added to my list.

 * @param node  the node that was changed

 */

protected void broadcastNodeInserted(final Node<E> node){

  final Iterator<WeakReference<Cursor<E>>> it=cursors.iterator();

  while (it.hasNext()) {

    final WeakReference<Cursor<E>> ref=it.next();

    final Cursor<E> cursor=ref.get();

    if (cursor == null) {

      it.remove();

    }

 else {

      cursor.nodeInserted(node);

    }

  }

}

Location: CursorableLinkedList.java

Content: 

/** 

 * Informs all of my registered cursors that the specified element was just removed from my list.

 * @param node  the node that was changed

 */

protected void broadcastNodeRemoved(final Node<E> node){

  final Iterator<WeakReference<Cursor<E>>> it=cursors.iterator();

  while (it.hasNext()) {

    final WeakReference<Cursor<E>> ref=it.next();

    final Cursor<E> cursor=ref.get();

    if (cursor == null) {

      it.remove();

    }

 else {

      cursor.nodeRemoved(node);

    }

  }

}

Location: CursorableLinkedList.java

Content: 

/** 

 * Creates a list iterator for the sublist.

 * @param subList  the sublist to get an iterator for

 * @param fromIndex  the index to start from, relative to the sublist

 * @return the list iterator for the sublist

 */

@Override protected ListIterator<E> createSubListListIterator(final LinkedSubList<E> subList,final int fromIndex){

  final SubCursor<E> cursor=new SubCursor<>(subList,fromIndex);

  registerCursor(cursor);

  return cursor;

}

Location: CursorableLinkedList.java

Content: 

/** 

 * Returns a  {@link Cursor} for iterating through the elements of this list.<p> A  {@code Cursor} is a {@code ListIterator} with an additional{@code close()} method. Calling this method immediately discards thereferences to the cursor. If it is not called, then the garbage collector will still remove the reference as it is held via a  {@code WeakReference}. <p> The cursor enables iteration and list changes to occur in any order without invalidating the iterator (from one thread). When elements are added to the list, an event is fired to all active cursors enabling them to adjust to the change in the list. <p> When the "current" (i.e., last returned by  {@link ListIterator#next}or  {@link ListIterator#previous}) element of the list is removed, the cursor automatically adjusts to the change (invalidating the last returned value such that it cannot be removed). <p> The  {@link #listIterator()} method returns the same as this method, and canbe cast to a  {@code Cursor} if the {@code close} method is required.

 * @return a new cursor iterator

 */

public CursorableLinkedList.Cursor<E> cursor(){

  return cursor(0);

}

Location: CursorableLinkedList.java

Content: 

/** 

 * Constructor that creates.

 */

public CursorableLinkedList(){

  init();

}

Location: CursorableLinkedList.java

Content: 

/** 

 * Constructor that copies the specified collection

 * @param coll  the collection to copy

 */

public CursorableLinkedList(final Collection<? extends E> coll){

  super(coll);

}

Location: CursorableLinkedList.java

Content: 

/** 

 * Returns a  {@link Cursor} for iterating through the elements of this liststarting from a specified index. <p> A  {@code Cursor} is a {@code ListIterator} with an additional{@code close()} method. Calling this method immediately discards thereferences to the cursor. If it is not called, then the garbage collector will still remove the reference as it is held via a  {@code WeakReference}. <p> The cursor enables iteration and list changes to occur in any order without invalidating the iterator (from one thread). When elements are added to the list, an event is fired to all active cursors enabling them to adjust to the change in the list. <p> When the "current" (i.e., last returned by  {@link ListIterator#next}or  {@link ListIterator#previous}) element of the list is removed, the cursor automatically adjusts to the change (invalidating the last returned value such that it cannot be removed). <p> The  {@link #listIterator(int)} method returns the same as this method, and canbe cast to a  {@code Cursor} if the {@code close} method is required.

 * @param fromIndex  the index to start from

 * @return a new cursor iterator

 * @throws IndexOutOfBoundsException if the index is out of range(index &lt; 0 || index &gt; size()).

 */

public CursorableLinkedList.Cursor<E> cursor(final int fromIndex){

  final Cursor<E> cursor=new Cursor<>(this,fromIndex);

  registerCursor(cursor);

  return cursor;

}

Location: CursorableLinkedList.java

Content: 

/** 

 * Registers a cursor to be notified of changes to this list.

 * @param cursor  the cursor to register

 */

protected void registerCursor(final Cursor<E> cursor){

  cursors.removeIf(ref -> ref.get() == null);

  cursors.add(new WeakReference<>(cursor));

}

Location: CursorableLinkedList.java

Content: 

/** 

 * Removes all nodes by iteration.

 */

@Override protected void removeAllNodes(){

  if (!isEmpty()) {

    final Iterator<E> it=iterator();

    while (it.hasNext()) {

      it.next();

      it.remove();

    }

  }

}

Location: CursorableLinkedList.java

Content: 

/** 

 * Removes the specified node from the list.

 * @param node  the node to remove

 * @throws NullPointerException if {@code node} is null

 */

@Override protected void removeNode(final Node<E> node){

  super.removeNode(node);

  broadcastNodeRemoved(node);

}

Location: CursorableLinkedList.java

Content: 

/** 

 * Deregisters a cursor from the list to be notified of changes.

 * @param cursor  the cursor to deregister

 */

protected void unregisterCursor(final Cursor<E> cursor){

  for (final Iterator<WeakReference<Cursor<E>>> it=cursors.iterator(); it.hasNext(); ) {

    final WeakReference<Cursor<E>> ref=it.next();

    final Cursor<E> cur=ref.get();

    if (cur == null) {

      it.remove();

    }

 else     if (cur == cursor) {

      ref.clear();

      it.remove();

      break;

    }

  }

}

Location: CursorableLinkedList.java

Content: 

/** 

 * Updates the node with a new value. This implementation sets the value on the node. Subclasses can override this to record the change.

 * @param node  node to update

 * @param value  new value of the node

 */

@Override protected void updateNode(final Node<E> node,final E value){

  super.updateNode(node,value);

  broadcastNodeChanged(node);

}

