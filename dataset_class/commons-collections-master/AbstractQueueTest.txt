Location: AbstractQueueTest.java

Content: 

/** 

 * JUnit constructor.

 * @param testName  the test class name

 */

public AbstractQueueTest(final String testName){

  super(testName);

}

Location: AbstractQueueTest.java

Content: 

/** 

 * Returns true if the collections produced by {@link #makeObject()} and {@link #makeFullCollection()}support the <code>set operation.<p> Default implementation returns true.  Override if your collection class does not support set.

 */

public boolean isSetSupported(){

  return true;

}

Location: AbstractQueueTest.java

Content: 

/** 

 * Compare the current serialized form of the Queue against the canonical version in SCM.

 */

@SuppressWarnings("unchecked") public void testEmptyQueueCompatibility() throws IOException, ClassNotFoundException {

  final Queue<E> queue=makeObject();

  if (queue instanceof Serializable && !skipSerializedCanonicalTests() && isTestSerialization()) {

    final Queue<E> queue2=(Queue<E>)readExternalFormFromDisk(getCanonicalEmptyCollectionName(queue));

    assertEquals("Queue is empty",0,queue2.size());

  }

}

Location: AbstractQueueTest.java

Content: 

@SuppressWarnings("unchecked") public void testEmptyQueueSerialization() throws IOException, ClassNotFoundException {

  final Queue<E> queue=makeObject();

  if (!(queue instanceof Serializable && isTestSerialization())) {

    return;

  }

  final byte[] object=writeExternalFormToBytes((Serializable)queue);

  final Queue<E> queue2=(Queue<E>)readExternalFormFromBytes(object);

  assertEquals("Both queues are empty",0,queue.size());

  assertEquals("Both queues are empty",0,queue2.size());

}

Location: AbstractQueueTest.java

Content: 

/** 

 * Compare the current serialized form of the Queue against the canonical version in SCM.

 */

@SuppressWarnings("unchecked") public void testFullQueueCompatibility() throws IOException, ClassNotFoundException {

  final Queue<E> queue=makeFullCollection();

  if (queue instanceof Serializable && !skipSerializedCanonicalTests() && isTestSerialization()) {

    final Queue<E> queue2=(Queue<E>)readExternalFormFromDisk(getCanonicalFullCollectionName(queue));

    assertEquals("Queues are not the right size",queue.size(),queue2.size());

  }

}

Location: AbstractQueueTest.java

Content: 

@SuppressWarnings("unchecked") public void testFullQueueSerialization() throws IOException, ClassNotFoundException {

  final Queue<E> queue=makeFullCollection();

  final int size=getFullElements().length;

  if (!(queue instanceof Serializable && isTestSerialization())) {

    return;

  }

  final byte[] object=writeExternalFormToBytes((Serializable)queue);

  final Queue<E> queue2=(Queue<E>)readExternalFormFromBytes(object);

  assertEquals("Both queues are same size",size,queue.size());

  assertEquals("Both queues are same size",size,queue2.size());

}

Location: AbstractQueueTest.java

Content: 

/** 

 * Tests  {@link Queue#element()}.

 */

public void testQueueElement(){

  resetEmpty();

  try {

    getCollection().element();

    fail("Queue.element should throw NoSuchElementException");

  }

 catch (  final NoSuchElementException e) {

  }

  resetFull();

  assertTrue(getConfirmed().contains(getCollection().element()));

  if (!isRemoveSupported()) {

    return;

  }

  final int max=getFullElements().length;

  for (int i=0; i < max; i++) {

    final E element=getCollection().element();

    if (!isNullSupported()) {

      assertNotNull(element);

    }

    assertTrue(getConfirmed().contains(element));

    getCollection().remove(element);

    getConfirmed().remove(element);

    verify();

  }

  try {

    getCollection().element();

    fail("Queue.element should throw NoSuchElementException");

  }

 catch (  final NoSuchElementException e) {

  }

}

Location: AbstractQueueTest.java

Content: 

/** 

 * Tests  {@link Queue#offer(Object)}.

 */

public void testQueueOffer(){

  if (!isAddSupported()) {

    return;

  }

  final E[] elements=getFullElements();

  for (  final E element : elements) {

    resetEmpty();

    final boolean r=getCollection().offer(element);

    getConfirmed().add(element);

    verify();

    assertTrue("Empty queue changed after add",r);

    assertEquals("Queue size is 1 after first add",1,getCollection().size());

  }

  resetEmpty();

  int size=0;

  for (  final E element : elements) {

    final boolean r=getCollection().offer(element);

    getConfirmed().add(element);

    verify();

    if (r) {

      size++;

    }

    assertEquals("Queue size should grow after add",size,getCollection().size());

    assertTrue("Queue should contain added element",getCollection().contains(element));

  }

}

Location: AbstractQueueTest.java

Content: 

/** 

 * Tests  {@link Queue#peek()}.

 */

public void testQueuePeek(){

  if (!isRemoveSupported()) {

    return;

  }

  resetEmpty();

  E element=getCollection().peek();

  assertNull(element);

  resetFull();

  final int max=getFullElements().length;

  for (int i=0; i < max; i++) {

    element=getCollection().peek();

    if (!isNullSupported()) {

      assertNotNull(element);

    }

    assertTrue(getConfirmed().contains(element));

    getCollection().remove(element);

    getConfirmed().remove(element);

    verify();

  }

  element=getCollection().peek();

  assertNull(element);

}

Location: AbstractQueueTest.java

Content: 

/** 

 * Tests  {@link Queue#poll()}.

 */

public void testQueuePoll(){

  if (!isRemoveSupported()) {

    return;

  }

  resetEmpty();

  E element=getCollection().poll();

  assertNull(element);

  resetFull();

  final int max=getFullElements().length;

  for (int i=0; i < max; i++) {

    element=getCollection().poll();

    final boolean success=getConfirmed().remove(element);

    assertTrue("poll should return correct element",success);

    verify();

  }

  element=getCollection().poll();

  assertNull(element);

}

Location: AbstractQueueTest.java

Content: 

/** 

 * Tests  {@link Queue#remove()}.

 */

public void testQueueRemove(){

  if (!isRemoveSupported()) {

    return;

  }

  resetEmpty();

  try {

    getCollection().remove();

    fail("Queue.remove should throw NoSuchElementException");

  }

 catch (  final NoSuchElementException e) {

  }

  resetFull();

  final int max=getFullElements().length;

  for (int i=0; i < max; i++) {

    final E element=getCollection().remove();

    final boolean success=getConfirmed().remove(element);

    assertTrue("remove should return correct element",success);

    verify();

  }

  try {

    getCollection().element();

    fail("Queue.remove should throw NoSuchElementException");

  }

 catch (  final NoSuchElementException e) {

  }

}

Location: AbstractQueueTest.java

Content: 

/** 

 * JUnit constructor.

 * @param testName  the test class name

 */

public AbstractQueueTest(final String testName){

  super(testName);

}

Location: AbstractQueueTest.java

Content: 

/** 

 * Returns true if the collections produced by {@link #makeObject()} and {@link #makeFullCollection()}support the <code>set operation.<p> Default implementation returns true.  Override if your collection class does not support set.

 */

public boolean isSetSupported(){

  return true;

}

Location: AbstractQueueTest.java

Content: 

/** 

 * Compare the current serialized form of the Queue against the canonical version in SCM.

 */

@SuppressWarnings("unchecked") public void testEmptyQueueCompatibility() throws IOException, ClassNotFoundException {

  final Queue<E> queue=makeObject();

  if (queue instanceof Serializable && !skipSerializedCanonicalTests() && isTestSerialization()) {

    final Queue<E> queue2=(Queue<E>)readExternalFormFromDisk(getCanonicalEmptyCollectionName(queue));

    assertEquals("Queue is empty",0,queue2.size());

  }

}

Location: AbstractQueueTest.java

Content: 

@SuppressWarnings("unchecked") public void testEmptyQueueSerialization() throws IOException, ClassNotFoundException {

  final Queue<E> queue=makeObject();

  if (!(queue instanceof Serializable && isTestSerialization())) {

    return;

  }

  final byte[] object=writeExternalFormToBytes((Serializable)queue);

  final Queue<E> queue2=(Queue<E>)readExternalFormFromBytes(object);

  assertEquals("Both queues are empty",0,queue.size());

  assertEquals("Both queues are empty",0,queue2.size());

}

Location: AbstractQueueTest.java

Content: 

/** 

 * Compare the current serialized form of the Queue against the canonical version in SCM.

 */

@SuppressWarnings("unchecked") public void testFullQueueCompatibility() throws IOException, ClassNotFoundException {

  final Queue<E> queue=makeFullCollection();

  if (queue instanceof Serializable && !skipSerializedCanonicalTests() && isTestSerialization()) {

    final Queue<E> queue2=(Queue<E>)readExternalFormFromDisk(getCanonicalFullCollectionName(queue));

    assertEquals("Queues are not the right size",queue.size(),queue2.size());

  }

}

Location: AbstractQueueTest.java

Content: 

@SuppressWarnings("unchecked") public void testFullQueueSerialization() throws IOException, ClassNotFoundException {

  final Queue<E> queue=makeFullCollection();

  final int size=getFullElements().length;

  if (!(queue instanceof Serializable && isTestSerialization())) {

    return;

  }

  final byte[] object=writeExternalFormToBytes((Serializable)queue);

  final Queue<E> queue2=(Queue<E>)readExternalFormFromBytes(object);

  assertEquals("Both queues are same size",size,queue.size());

  assertEquals("Both queues are same size",size,queue2.size());

}

Location: AbstractQueueTest.java

Content: 

/** 

 * Tests  {@link Queue#element()}.

 */

public void testQueueElement(){

  resetEmpty();

  try {

    getCollection().element();

    fail("Queue.element should throw NoSuchElementException");

  }

 catch (  final NoSuchElementException e) {

  }

  resetFull();

  assertTrue(getConfirmed().contains(getCollection().element()));

  if (!isRemoveSupported()) {

    return;

  }

  final int max=getFullElements().length;

  for (int i=0; i < max; i++) {

    final E element=getCollection().element();

    if (!isNullSupported()) {

      assertNotNull(element);

    }

    assertTrue(getConfirmed().contains(element));

    getCollection().remove(element);

    getConfirmed().remove(element);

    verify();

  }

  try {

    getCollection().element();

    fail("Queue.element should throw NoSuchElementException");

  }

 catch (  final NoSuchElementException e) {

  }

}

Location: AbstractQueueTest.java

Content: 

/** 

 * Tests  {@link Queue#offer(Object)}.

 */

public void testQueueOffer(){

  if (!isAddSupported()) {

    return;

  }

  final E[] elements=getFullElements();

  for (  final E element : elements) {

    resetEmpty();

    final boolean r=getCollection().offer(element);

    getConfirmed().add(element);

    verify();

    assertTrue("Empty queue changed after add",r);

    assertEquals("Queue size is 1 after first add",1,getCollection().size());

  }

  resetEmpty();

  int size=0;

  for (  final E element : elements) {

    final boolean r=getCollection().offer(element);

    getConfirmed().add(element);

    verify();

    if (r) {

      size++;

    }

    assertEquals("Queue size should grow after add",size,getCollection().size());

    assertTrue("Queue should contain added element",getCollection().contains(element));

  }

}

Location: AbstractQueueTest.java

Content: 

/** 

 * Tests  {@link Queue#peek()}.

 */

public void testQueuePeek(){

  if (!isRemoveSupported()) {

    return;

  }

  resetEmpty();

  E element=getCollection().peek();

  assertNull(element);

  resetFull();

  final int max=getFullElements().length;

  for (int i=0; i < max; i++) {

    element=getCollection().peek();

    if (!isNullSupported()) {

      assertNotNull(element);

    }

    assertTrue(getConfirmed().contains(element));

    getCollection().remove(element);

    getConfirmed().remove(element);

    verify();

  }

  element=getCollection().peek();

  assertNull(element);

}

Location: AbstractQueueTest.java

Content: 

/** 

 * Tests  {@link Queue#poll()}.

 */

public void testQueuePoll(){

  if (!isRemoveSupported()) {

    return;

  }

  resetEmpty();

  E element=getCollection().poll();

  assertNull(element);

  resetFull();

  final int max=getFullElements().length;

  for (int i=0; i < max; i++) {

    element=getCollection().poll();

    final boolean success=getConfirmed().remove(element);

    assertTrue("poll should return correct element",success);

    verify();

  }

  element=getCollection().poll();

  assertNull(element);

}

Location: AbstractQueueTest.java

Content: 

/** 

 * Tests  {@link Queue#remove()}.

 */

public void testQueueRemove(){

  if (!isRemoveSupported()) {

    return;

  }

  resetEmpty();

  try {

    getCollection().remove();

    fail("Queue.remove should throw NoSuchElementException");

  }

 catch (  final NoSuchElementException e) {

  }

  resetFull();

  final int max=getFullElements().length;

  for (int i=0; i < max; i++) {

    final E element=getCollection().remove();

    final boolean success=getConfirmed().remove(element);

    assertTrue("remove should return correct element",success);

    verify();

  }

  try {

    getCollection().element();

    fail("Queue.remove should throw NoSuchElementException");

  }

 catch (  final NoSuchElementException e) {

  }

}

