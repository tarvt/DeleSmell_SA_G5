Location: CompositeMap.java

Content: 

/** 

 * Add an additional Map to the composite.

 * @param map  the Map to be added to the composite

 * @throws IllegalArgumentException if there is a key collision and there is noMapMutator set to handle it.

 */

@SuppressWarnings("unchecked") public synchronized void addComposited(final Map<K,V> map) throws IllegalArgumentException {

  if (map != null) {

    for (int i=composite.length - 1; i >= 0; --i) {

      final Collection<K> intersect=CollectionUtils.intersection(this.composite[i].keySet(),map.keySet());

      if (!intersect.isEmpty()) {

        if (this.mutator == null) {

          throw new IllegalArgumentException("Key collision adding Map to CompositeMap");

        }

        this.mutator.resolveCollision(this,this.composite[i],map,intersect);

      }

    }

    final Map<K,V>[] temp=new Map[this.composite.length + 1];

    System.arraycopy(this.composite,0,temp,0,this.composite.length);

    temp[temp.length - 1]=map;

    this.composite=temp;

  }

}

Location: CompositeMap.java

Content: 

/** 

 * Create a new, empty, CompositeMap.

 */

@SuppressWarnings("unchecked") public CompositeMap(){

  this(new Map[]{},null);

}

Location: CompositeMap.java

Content: 

/** 

 * Create a new CompositeMap which composites all of the Map instances in the argument. It copies the argument array, it does not use it directly.

 * @param composite  the Maps to be composited

 * @throws IllegalArgumentException if there is a key collision

 */

public CompositeMap(final Map<K,V>... composite){

  this(composite,null);

}

Location: CompositeMap.java

Content: 

/** 

 * Create a new CompositeMap with two composited Map instances.

 * @param one  the first Map to be composited

 * @param two  the second Map to be composited

 * @throws IllegalArgumentException if there is a key collision

 */

@SuppressWarnings("unchecked") public CompositeMap(final Map<K,V> one,final Map<K,V> two){

  this(new Map[]{one,two},null);

}

Location: CompositeMap.java

Content: 

/** 

 * Create a new CompositeMap with two composited Map instances.

 * @param one  the first Map to be composited

 * @param two  the second Map to be composited

 * @param mutator  MapMutator to be used for mutation operations

 */

@SuppressWarnings("unchecked") public CompositeMap(final Map<K,V> one,final Map<K,V> two,final MapMutator<K,V> mutator){

  this(new Map[]{one,two},mutator);

}

Location: CompositeMap.java

Content: 

/** 

 * Create a new CompositeMap which composites all of the Map instances in the argument. It copies the argument array, it does not use it directly.

 * @param composite  Maps to be composited

 * @param mutator  MapMutator to be used for mutation operations

 */

@SuppressWarnings("unchecked") public CompositeMap(final Map<K,V>[] composite,final MapMutator<K,V> mutator){

  this.mutator=mutator;

  this.composite=EMPTY_MAP_ARRAY;

  for (int i=composite.length - 1; i >= 0; --i) {

    this.addComposited(composite[i]);

  }

}

Location: CompositeMap.java

Content: 

/** 

 * Remove a Map from the composite.

 * @param map  the Map to be removed from the composite

 * @return The removed Map or {@code null} if map is not in the composite

 */

@SuppressWarnings("unchecked") public synchronized Map<K,V> removeComposited(final Map<K,V> map){

  final int size=this.composite.length;

  for (int i=0; i < size; ++i) {

    if (this.composite[i].equals(map)) {

      final Map<K,V>[] temp=new Map[size - 1];

      System.arraycopy(this.composite,0,temp,0,i);

      System.arraycopy(this.composite,i + 1,temp,i,size - i - 1);

      this.composite=temp;

      return map;

    }

  }

  return null;

}

Location: CompositeMap.java

Content: 

/** 

 * Specify the MapMutator to be used by mutation operations.

 * @param mutator  the MapMutator to be used for mutation delegation

 */

public void setMutator(final MapMutator<K,V> mutator){

  this.mutator=mutator;

}

Location: CompositeMap.java

Content: 

/** 

 * Add an additional Map to the composite.

 * @param map  the Map to be added to the composite

 * @throws IllegalArgumentException if there is a key collision and there is noMapMutator set to handle it.

 */

@SuppressWarnings("unchecked") public synchronized void addComposited(final Map<K,V> map) throws IllegalArgumentException {

  if (map != null) {

    for (int i=composite.length - 1; i >= 0; --i) {

      final Collection<K> intersect=CollectionUtils.intersection(this.composite[i].keySet(),map.keySet());

      if (!intersect.isEmpty()) {

        if (this.mutator == null) {

          throw new IllegalArgumentException("Key collision adding Map to CompositeMap");

        }

        this.mutator.resolveCollision(this,this.composite[i],map,intersect);

      }

    }

    final Map<K,V>[] temp=new Map[this.composite.length + 1];

    System.arraycopy(this.composite,0,temp,0,this.composite.length);

    temp[temp.length - 1]=map;

    this.composite=temp;

  }

}

Location: CompositeMap.java

Content: 

/** 

 * Create a new, empty, CompositeMap.

 */

@SuppressWarnings("unchecked") public CompositeMap(){

  this(new Map[]{},null);

}

Location: CompositeMap.java

Content: 

/** 

 * Create a new CompositeMap which composites all of the Map instances in the argument. It copies the argument array, it does not use it directly.

 * @param composite  the Maps to be composited

 * @throws IllegalArgumentException if there is a key collision

 */

public CompositeMap(final Map<K,V>... composite){

  this(composite,null);

}

Location: CompositeMap.java

Content: 

/** 

 * Create a new CompositeMap with two composited Map instances.

 * @param one  the first Map to be composited

 * @param two  the second Map to be composited

 * @throws IllegalArgumentException if there is a key collision

 */

@SuppressWarnings("unchecked") public CompositeMap(final Map<K,V> one,final Map<K,V> two){

  this(new Map[]{one,two},null);

}

Location: CompositeMap.java

Content: 

/** 

 * Create a new CompositeMap with two composited Map instances.

 * @param one  the first Map to be composited

 * @param two  the second Map to be composited

 * @param mutator  MapMutator to be used for mutation operations

 */

@SuppressWarnings("unchecked") public CompositeMap(final Map<K,V> one,final Map<K,V> two,final MapMutator<K,V> mutator){

  this(new Map[]{one,two},mutator);

}

Location: CompositeMap.java

Content: 

/** 

 * Create a new CompositeMap which composites all of the Map instances in the argument. It copies the argument array, it does not use it directly.

 * @param composite  Maps to be composited

 * @param mutator  MapMutator to be used for mutation operations

 */

@SuppressWarnings("unchecked") public CompositeMap(final Map<K,V>[] composite,final MapMutator<K,V> mutator){

  this.mutator=mutator;

  this.composite=EMPTY_MAP_ARRAY;

  for (int i=composite.length - 1; i >= 0; --i) {

    this.addComposited(composite[i]);

  }

}

Location: CompositeMap.java

Content: 

/** 

 * Remove a Map from the composite.

 * @param map  the Map to be removed from the composite

 * @return The removed Map or {@code null} if map is not in the composite

 */

@SuppressWarnings("unchecked") public synchronized Map<K,V> removeComposited(final Map<K,V> map){

  final int size=this.composite.length;

  for (int i=0; i < size; ++i) {

    if (this.composite[i].equals(map)) {

      final Map<K,V>[] temp=new Map[size - 1];

      System.arraycopy(this.composite,0,temp,0,i);

      System.arraycopy(this.composite,i + 1,temp,i,size - i - 1);

      this.composite=temp;

      return map;

    }

  }

  return null;

}

Location: CompositeMap.java

Content: 

/** 

 * Specify the MapMutator to be used by mutation operations.

 * @param mutator  the MapMutator to be used for mutation delegation

 */

public void setMutator(final MapMutator<K,V> mutator){

  this.mutator=mutator;

}

