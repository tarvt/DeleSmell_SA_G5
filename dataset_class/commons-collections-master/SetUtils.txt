Location: SetUtils.java

Content: 

/** 

 * Returns a unmodifiable <b>view</b> containing the difference of the given {@link Set}s, denoted by  {@code a \ b} (or {@code a - b}). <p> The returned view contains all elements of  {@code a} that are not a memberof  {@code b}.

 * @param < E > the generic type that is able to represent the types containedin both input sets.

 * @param setA  the set to subtract from, must not be null

 * @param setB  the set to subtract, must not be null

 * @return a view of the relative complement of  of the two sets

 * @since 4.1

 */

public static <E>SetView<E> difference(final Set<? extends E> setA,final Set<? extends E> setB){

  Objects.requireNonNull(setA,"setA");

  Objects.requireNonNull(setB,"setB");

  final Predicate<E> notContainedInB=object -> !setB.contains(object);

  return new SetView<E>(){

    @Override public boolean contains(    final Object o){

      return setA.contains(o) && !setB.contains(o);

    }

    @Override public Iterator<E> createIterator(){

      return IteratorUtils.filteredIterator(setA.iterator(),notContainedInB);

    }

  }

;

}

Location: SetUtils.java

Content: 

/** 

 * Returns a unmodifiable <b>view</b> of the symmetric difference of the given {@link Set}s. <p> The returned view contains all elements of  {@code a} and {@code b} that arenot a member of the other set. <p> This is equivalent to  {@code union(difference(a, b), difference(b, a))}.

 * @param < E > the generic type that is able to represent the types containedin both input sets.

 * @param setA  the first set, must not be null

 * @param setB  the second set, must not be null

 * @return a view of the symmetric difference of the two sets

 * @since 4.1

 */

public static <E>SetView<E> disjunction(final Set<? extends E> setA,final Set<? extends E> setB){

  Objects.requireNonNull(setA,"setA");

  Objects.requireNonNull(setB,"setB");

  final SetView<E> aMinusB=difference(setA,setB);

  final SetView<E> bMinusA=difference(setB,setA);

  return new SetView<E>(){

    @Override public boolean contains(    final Object o){

      return setA.contains(o) ^ setB.contains(o);

    }

    @Override public Iterator<E> createIterator(){

      return IteratorUtils.chainedIterator(aMinusB.iterator(),bMinusA.iterator());

    }

    @Override public boolean isEmpty(){

      return aMinusB.isEmpty() && bMinusA.isEmpty();

    }

    @Override public int size(){

      return aMinusB.size() + bMinusA.size();

    }

  }

;

}

Location: SetUtils.java

Content: 

/** 

 * Returns an immutable empty set if the argument is  {@code null}, or the argument itself otherwise.

 * @param < T > the element type

 * @param set the set, possibly {@code null}

 * @return an empty set if the argument is {@code null}

 */

public static <T>Set<T> emptyIfNull(final Set<T> set){

  return set == null ? Collections.<T>emptySet() : set;

}

Location: SetUtils.java

Content: 

/** 

 * Get a typed empty unmodifiable Set.

 * @param < E > the element type

 * @return an empty Set

 */

public static <E>Set<E> emptySet(){

  return Collections.<E>emptySet();

}

Location: SetUtils.java

Content: 

/** 

 * Get a typed empty unmodifiable sorted set.

 * @param < E > the element type

 * @return an empty sorted Set

 */

@SuppressWarnings("unchecked") public static <E>SortedSet<E> emptySortedSet(){

  return EMPTY_SORTED_SET;

}

Location: SetUtils.java

Content: 

/** 

 * Generates a hash code using the algorithm specified in {@link java.util.Set#hashCode()}. <p> This method is useful for implementing  {@code Set} when you cannotextend AbstractSet. The method takes Collection instances to enable other collection types to use the Set implementation algorithm.

 * @param < T > the element type

 * @see java.util.Set#hashCode()

 * @param set  the set to calculate the hash code for, may be null

 * @return the hash code

 */

public static <T>int hashCodeForSet(final Collection<T> set){

  if (set == null) {

    return 0;

  }

  int hashCode=0;

  for (  final T obj : set) {

    if (obj != null) {

      hashCode+=obj.hashCode();

    }

  }

  return hashCode;

}

Location: SetUtils.java

Content: 

/** 

 * Creates a set from the given items. If the passed var-args argument is  {@code null}, then the method returns  {@code null}.

 * @param < E > the element type

 * @param items the elements that make up the new set

 * @return a set

 * @since 4.3

 */

public static <E>HashSet<E> hashSet(final E... items){

  if (items == null) {

    return null;

  }

  return new HashSet<>(Arrays.asList(items));

}

Location: SetUtils.java

Content: 

/** 

 * Returns a unmodifiable <b>view</b> of the intersection of the given  {@link Set}s. <p> The returned view contains all elements that are members of both input sets ( {@code a} and {@code b}).

 * @param < E > the generic type that is able to represent the types containedin both input sets.

 * @param setA  the first set, must not be null

 * @param setB  the second set, must not be null

 * @return a view of the intersection of the two sets

 * @since 4.1

 */

public static <E>SetView<E> intersection(final Set<? extends E> setA,final Set<? extends E> setB){

  Objects.requireNonNull(setA,"setA");

  Objects.requireNonNull(setB,"setB");

  final Predicate<E> containedInB=object -> setB.contains(object);

  return new SetView<E>(){

    @Override public boolean contains(    final Object o){

      return setA.contains(o) && setB.contains(o);

    }

    @Override public Iterator<E> createIterator(){

      return IteratorUtils.filteredIterator(setA.iterator(),containedInB);

    }

  }

;

}

Location: SetUtils.java

Content: 

/** 

 * Tests two sets for equality as per the  {@code equals()} contractin  {@link java.util.Set#equals(java.lang.Object)}. <p> This method is useful for implementing  {@code Set} when you cannotextend AbstractSet. The method takes Collection instances to enable other collection types to use the Set implementation algorithm. <p> The relevant text (slightly paraphrased as this is a static method) is: <blockquote> <p>Two sets are considered equal if they have the same size, and every member of the first set is contained in the second. This ensures that the  {@code equals} method worksproperly across different implementations of the  {@code Set}interface.</p> <p> This implementation first checks if the two sets are the same object: if so it returns  {@code true}.  Then, it checks if the two sets are identical in size; if not, it returns false. If so, it returns {@code a.containsAll((Collection) b)}.</p> </blockquote>

 * @see java.util.Set

 * @param set1  the first set, may be null

 * @param set2  the second set, may be null

 * @return whether the sets are equal by value comparison

 */

public static boolean isEqualSet(final Collection<?> set1,final Collection<?> set2){

  if (set1 == set2) {

    return true;

  }

  if (set1 == null || set2 == null || set1.size() != set2.size()) {

    return false;

  }

  return set1.containsAll(set2);

}

Location: SetUtils.java

Content: 

/** 

 * Returns a new hash set that matches elements based on  {@code ==} not{@code equals()}. <p> <strong>This set will violate the detail of various Set contracts.</strong> As a general rule, don't compare this set to other sets. In particular, you can't use decorators like  {@link ListOrderedSet} on it, which silently assume that thesecontracts are fulfilled. <p> <strong>Note that the returned set is not synchronized and is not thread-safe.</strong> If you wish to use this set from multiple threads concurrently, you must use appropriate synchronization. The simplest approach is to wrap this map using  {@link java.util.Collections#synchronizedSet(Set)}. This class may throw exceptions when accessed by concurrent threads without synchronization.

 * @param < E >  the element type

 * @return a new identity hash set

 * @since 4.1

 */

public static <E>Set<E> newIdentityHashSet(){

  return Collections.newSetFromMap(new IdentityHashMap<E,Boolean>());

}

Location: SetUtils.java

Content: 

/** 

 * Returns a set that maintains the order of elements that are added backed by the given set. <p> If an element is added twice, the order is determined by the first add. The order is observed through the iterator or toArray.

 * @param < E > the element type

 * @param set  the set to order, must not be null

 * @return an ordered set backed by the given set

 * @throws NullPointerException if the set is null

 */

public static <E>Set<E> orderedSet(final Set<E> set){

  return ListOrderedSet.listOrderedSet(set);

}

Location: SetUtils.java

Content: 

/** 

 * Don't allow instances.

 */

private SetUtils(){

}

Location: SetUtils.java

Content: 

/** 

 * Returns a synchronized set backed by the given set. <p> You must manually synchronize on the returned set's iterator to avoid non-deterministic behavior: <pre> Set s = SetUtils.synchronizedSet(mySet); synchronized (s) { Iterator i = s.iterator(); while (i.hasNext()) { process (i.next()); } } </pre> This method is just a wrapper for  {@link Collections#synchronizedSet(Set)}.

 * @param < E > the element type

 * @param set  the set to synchronize, must not be null

 * @return a synchronized set backed by the given set

 * @throws NullPointerException if the set is null

 */

public static <E>Set<E> synchronizedSet(final Set<E> set){

  return Collections.synchronizedSet(set);

}

Location: SetUtils.java

Content: 

/** 

 * Returns a synchronized sorted set backed by the given sorted set. <p> You must manually synchronize on the returned set's iterator to avoid non-deterministic behavior: <pre> Set s = SetUtils.synchronizedSortedSet(mySet); synchronized (s) { Iterator i = s.iterator(); while (i.hasNext()) { process (i.next()); } } </pre> This method is just a wrapper for  {@link Collections#synchronizedSortedSet(SortedSet)}.

 * @param < E > the element type

 * @param set  the sorted set to synchronize, must not be null

 * @return a synchronized set backed by the given set

 * @throws NullPointerException if the set is null

 */

public static <E>SortedSet<E> synchronizedSortedSet(final SortedSet<E> set){

  return Collections.synchronizedSortedSet(set);

}

Location: SetUtils.java

Content: 

/** 

 * Returns a unmodifiable <b>view</b> of the union of the given  {@link Set}s. <p> The returned view contains all elements of  {@code a} and {@code b}.

 * @param < E > the generic type that is able to represent the types containedin both input sets.

 * @param setA  the first set, must not be null

 * @param setB  the second set, must not be null

 * @return a view of the union of the two set

 * @throws NullPointerException if either input set is null

 * @since 4.1

 */

public static <E>SetView<E> union(final Set<? extends E> setA,final Set<? extends E> setB){

  Objects.requireNonNull(setA,"setA");

  Objects.requireNonNull(setB,"setB");

  final SetView<E> bMinusA=difference(setB,setA);

  return new SetView<E>(){

    @Override public boolean contains(    final Object o){

      return setA.contains(o) || setB.contains(o);

    }

    @Override public Iterator<E> createIterator(){

      return IteratorUtils.chainedIterator(setA.iterator(),bMinusA.iterator());

    }

    @Override public boolean isEmpty(){

      return setA.isEmpty() && setB.isEmpty();

    }

    @Override public int size(){

      return setA.size() + bMinusA.size();

    }

  }

;

}

Location: SetUtils.java

Content: 

/** 

 * Creates an unmodifiable set from the given items. If the passed var-args argument is  {@code null}, then the method returns  {@code null}.

 * @param < E > the element type

 * @param items the elements that make up the new set

 * @return a set

 * @since 4.3

 */

public static <E>Set<E> unmodifiableSet(final E... items){

  if (items == null) {

    return null;

  }

  return UnmodifiableSet.unmodifiableSet(hashSet(items));

}

Location: SetUtils.java

Content: 

/** 

 * Returns a unmodifiable <b>view</b> containing the difference of the given {@link Set}s, denoted by  {@code a \ b} (or {@code a - b}). <p> The returned view contains all elements of  {@code a} that are not a memberof  {@code b}.

 * @param < E > the generic type that is able to represent the types containedin both input sets.

 * @param setA  the set to subtract from, must not be null

 * @param setB  the set to subtract, must not be null

 * @return a view of the relative complement of  of the two sets

 * @since 4.1

 */

public static <E>SetView<E> difference(final Set<? extends E> setA,final Set<? extends E> setB){

  Objects.requireNonNull(setA,"setA");

  Objects.requireNonNull(setB,"setB");

  final Predicate<E> notContainedInB=object -> !setB.contains(object);

  return new SetView<E>(){

    @Override public boolean contains(    final Object o){

      return setA.contains(o) && !setB.contains(o);

    }

    @Override public Iterator<E> createIterator(){

      return IteratorUtils.filteredIterator(setA.iterator(),notContainedInB);

    }

  }

;

}

Location: SetUtils.java

Content: 

/** 

 * Returns a unmodifiable <b>view</b> of the symmetric difference of the given {@link Set}s. <p> The returned view contains all elements of  {@code a} and {@code b} that arenot a member of the other set. <p> This is equivalent to  {@code union(difference(a, b), difference(b, a))}.

 * @param < E > the generic type that is able to represent the types containedin both input sets.

 * @param setA  the first set, must not be null

 * @param setB  the second set, must not be null

 * @return a view of the symmetric difference of the two sets

 * @since 4.1

 */

public static <E>SetView<E> disjunction(final Set<? extends E> setA,final Set<? extends E> setB){

  Objects.requireNonNull(setA,"setA");

  Objects.requireNonNull(setB,"setB");

  final SetView<E> aMinusB=difference(setA,setB);

  final SetView<E> bMinusA=difference(setB,setA);

  return new SetView<E>(){

    @Override public boolean contains(    final Object o){

      return setA.contains(o) ^ setB.contains(o);

    }

    @Override public Iterator<E> createIterator(){

      return IteratorUtils.chainedIterator(aMinusB.iterator(),bMinusA.iterator());

    }

    @Override public boolean isEmpty(){

      return aMinusB.isEmpty() && bMinusA.isEmpty();

    }

    @Override public int size(){

      return aMinusB.size() + bMinusA.size();

    }

  }

;

}

Location: SetUtils.java

Content: 

/** 

 * Returns an immutable empty set if the argument is  {@code null}, or the argument itself otherwise.

 * @param < T > the element type

 * @param set the set, possibly {@code null}

 * @return an empty set if the argument is {@code null}

 */

public static <T>Set<T> emptyIfNull(final Set<T> set){

  return set == null ? Collections.<T>emptySet() : set;

}

Location: SetUtils.java

Content: 

/** 

 * Get a typed empty unmodifiable Set.

 * @param < E > the element type

 * @return an empty Set

 */

public static <E>Set<E> emptySet(){

  return Collections.<E>emptySet();

}

Location: SetUtils.java

Content: 

/** 

 * Get a typed empty unmodifiable sorted set.

 * @param < E > the element type

 * @return an empty sorted Set

 */

@SuppressWarnings("unchecked") public static <E>SortedSet<E> emptySortedSet(){

  return EMPTY_SORTED_SET;

}

Location: SetUtils.java

Content: 

/** 

 * Generates a hash code using the algorithm specified in {@link java.util.Set#hashCode()}. <p> This method is useful for implementing  {@code Set} when you cannotextend AbstractSet. The method takes Collection instances to enable other collection types to use the Set implementation algorithm.

 * @param < T > the element type

 * @see java.util.Set#hashCode()

 * @param set  the set to calculate the hash code for, may be null

 * @return the hash code

 */

public static <T>int hashCodeForSet(final Collection<T> set){

  if (set == null) {

    return 0;

  }

  int hashCode=0;

  for (  final T obj : set) {

    if (obj != null) {

      hashCode+=obj.hashCode();

    }

  }

  return hashCode;

}

Location: SetUtils.java

Content: 

/** 

 * Creates a set from the given items. If the passed var-args argument is  {@code null}, then the method returns  {@code null}.

 * @param < E > the element type

 * @param items the elements that make up the new set

 * @return a set

 * @since 4.3

 */

public static <E>HashSet<E> hashSet(final E... items){

  if (items == null) {

    return null;

  }

  return new HashSet<>(Arrays.asList(items));

}

Location: SetUtils.java

Content: 

/** 

 * Returns a unmodifiable <b>view</b> of the intersection of the given  {@link Set}s. <p> The returned view contains all elements that are members of both input sets ( {@code a} and {@code b}).

 * @param < E > the generic type that is able to represent the types containedin both input sets.

 * @param setA  the first set, must not be null

 * @param setB  the second set, must not be null

 * @return a view of the intersection of the two sets

 * @since 4.1

 */

public static <E>SetView<E> intersection(final Set<? extends E> setA,final Set<? extends E> setB){

  Objects.requireNonNull(setA,"setA");

  Objects.requireNonNull(setB,"setB");

  final Predicate<E> containedInB=object -> setB.contains(object);

  return new SetView<E>(){

    @Override public boolean contains(    final Object o){

      return setA.contains(o) && setB.contains(o);

    }

    @Override public Iterator<E> createIterator(){

      return IteratorUtils.filteredIterator(setA.iterator(),containedInB);

    }

  }

;

}

Location: SetUtils.java

Content: 

/** 

 * Tests two sets for equality as per the  {@code equals()} contractin  {@link java.util.Set#equals(java.lang.Object)}. <p> This method is useful for implementing  {@code Set} when you cannotextend AbstractSet. The method takes Collection instances to enable other collection types to use the Set implementation algorithm. <p> The relevant text (slightly paraphrased as this is a static method) is: <blockquote> <p>Two sets are considered equal if they have the same size, and every member of the first set is contained in the second. This ensures that the  {@code equals} method worksproperly across different implementations of the  {@code Set}interface.</p> <p> This implementation first checks if the two sets are the same object: if so it returns  {@code true}.  Then, it checks if the two sets are identical in size; if not, it returns false. If so, it returns {@code a.containsAll((Collection) b)}.</p> </blockquote>

 * @see java.util.Set

 * @param set1  the first set, may be null

 * @param set2  the second set, may be null

 * @return whether the sets are equal by value comparison

 */

public static boolean isEqualSet(final Collection<?> set1,final Collection<?> set2){

  if (set1 == set2) {

    return true;

  }

  if (set1 == null || set2 == null || set1.size() != set2.size()) {

    return false;

  }

  return set1.containsAll(set2);

}

Location: SetUtils.java

Content: 

/** 

 * Returns a new hash set that matches elements based on  {@code ==} not{@code equals()}. <p> <strong>This set will violate the detail of various Set contracts.</strong> As a general rule, don't compare this set to other sets. In particular, you can't use decorators like  {@link ListOrderedSet} on it, which silently assume that thesecontracts are fulfilled. <p> <strong>Note that the returned set is not synchronized and is not thread-safe.</strong> If you wish to use this set from multiple threads concurrently, you must use appropriate synchronization. The simplest approach is to wrap this map using  {@link java.util.Collections#synchronizedSet(Set)}. This class may throw exceptions when accessed by concurrent threads without synchronization.

 * @param < E >  the element type

 * @return a new identity hash set

 * @since 4.1

 */

public static <E>Set<E> newIdentityHashSet(){

  return Collections.newSetFromMap(new IdentityHashMap<E,Boolean>());

}

Location: SetUtils.java

Content: 

/** 

 * Returns a set that maintains the order of elements that are added backed by the given set. <p> If an element is added twice, the order is determined by the first add. The order is observed through the iterator or toArray.

 * @param < E > the element type

 * @param set  the set to order, must not be null

 * @return an ordered set backed by the given set

 * @throws NullPointerException if the set is null

 */

public static <E>Set<E> orderedSet(final Set<E> set){

  return ListOrderedSet.listOrderedSet(set);

}

Location: SetUtils.java

Content: 

/** 

 * Don't allow instances.

 */

private SetUtils(){

}

Location: SetUtils.java

Content: 

/** 

 * Returns a synchronized set backed by the given set. <p> You must manually synchronize on the returned set's iterator to avoid non-deterministic behavior: <pre> Set s = SetUtils.synchronizedSet(mySet); synchronized (s) { Iterator i = s.iterator(); while (i.hasNext()) { process (i.next()); } } </pre> This method is just a wrapper for  {@link Collections#synchronizedSet(Set)}.

 * @param < E > the element type

 * @param set  the set to synchronize, must not be null

 * @return a synchronized set backed by the given set

 * @throws NullPointerException if the set is null

 */

public static <E>Set<E> synchronizedSet(final Set<E> set){

  return Collections.synchronizedSet(set);

}

Location: SetUtils.java

Content: 

/** 

 * Returns a synchronized sorted set backed by the given sorted set. <p> You must manually synchronize on the returned set's iterator to avoid non-deterministic behavior: <pre> Set s = SetUtils.synchronizedSortedSet(mySet); synchronized (s) { Iterator i = s.iterator(); while (i.hasNext()) { process (i.next()); } } </pre> This method is just a wrapper for  {@link Collections#synchronizedSortedSet(SortedSet)}.

 * @param < E > the element type

 * @param set  the sorted set to synchronize, must not be null

 * @return a synchronized set backed by the given set

 * @throws NullPointerException if the set is null

 */

public static <E>SortedSet<E> synchronizedSortedSet(final SortedSet<E> set){

  return Collections.synchronizedSortedSet(set);

}

Location: SetUtils.java

Content: 

/** 

 * Returns a unmodifiable <b>view</b> of the union of the given  {@link Set}s. <p> The returned view contains all elements of  {@code a} and {@code b}.

 * @param < E > the generic type that is able to represent the types containedin both input sets.

 * @param setA  the first set, must not be null

 * @param setB  the second set, must not be null

 * @return a view of the union of the two set

 * @throws NullPointerException if either input set is null

 * @since 4.1

 */

public static <E>SetView<E> union(final Set<? extends E> setA,final Set<? extends E> setB){

  Objects.requireNonNull(setA,"setA");

  Objects.requireNonNull(setB,"setB");

  final SetView<E> bMinusA=difference(setB,setA);

  return new SetView<E>(){

    @Override public boolean contains(    final Object o){

      return setA.contains(o) || setB.contains(o);

    }

    @Override public Iterator<E> createIterator(){

      return IteratorUtils.chainedIterator(setA.iterator(),bMinusA.iterator());

    }

    @Override public boolean isEmpty(){

      return setA.isEmpty() && setB.isEmpty();

    }

    @Override public int size(){

      return setA.size() + bMinusA.size();

    }

  }

;

}

Location: SetUtils.java

Content: 

/** 

 * Creates an unmodifiable set from the given items. If the passed var-args argument is  {@code null}, then the method returns  {@code null}.

 * @param < E > the element type

 * @param items the elements that make up the new set

 * @return a set

 * @since 4.3

 */

public static <E>Set<E> unmodifiableSet(final E... items){

  if (items == null) {

    return null;

  }

  return UnmodifiableSet.unmodifiableSet(hashSet(items));

}

