Location: FactoryUtilsTest.java

Content: 

@Test public void instantiateFactoryComplex(){

  TimeZone.setDefault(TimeZone.getTimeZone("GMT"));

  final Factory<Date> factory=FactoryUtils.instantiateFactory(Date.class,new Class[]{Integer.TYPE,Integer.TYPE,Integer.TYPE},new Object[]{Integer.valueOf(70),Integer.valueOf(0),Integer.valueOf(2)});

  assertNotNull(factory);

  final Date created=factory.create();

  assertEquals(new Date(1000 * 60 * 60* 24),created);

}

Location: FactoryUtilsTest.java

Content: 

@Test public void instantiateFactoryMismatch(){

  assertThrows(IllegalArgumentException.class,() -> FactoryUtils.instantiateFactory(Date.class,null,new Object[]{null}));

}

Location: FactoryUtilsTest.java

Content: 

@Test public void instantiateFactoryNoConstructor(){

  assertThrows(IllegalArgumentException.class,() -> FactoryUtils.instantiateFactory(Date.class,new Class[]{Long.class},new Object[]{null}));

}

Location: FactoryUtilsTest.java

Content: 

@Test public void instantiateFactoryNull(){

  assertThrows(NullPointerException.class,() -> FactoryUtils.instantiateFactory(null));

}

Location: FactoryUtilsTest.java

Content: 

@Test public void instantiateFactorySimple(){

  final Factory<Mock3> factory=FactoryUtils.instantiateFactory(Mock3.class);

  assertNotNull(factory);

  Mock3 created=factory.create();

  assertEquals(0,created.getValue());

  created=factory.create();

  assertEquals(1,created.getValue());

}

Location: FactoryUtilsTest.java

Content: 

@Test public void testConstantFactoryConstant(){

  final Integer constant=Integer.valueOf(9);

  final Factory<Integer> factory=FactoryUtils.constantFactory(constant);

  assertNotNull(factory);

  final Integer created=factory.create();

  assertSame(constant,created);

}

Location: FactoryUtilsTest.java

Content: 

@Test public void testConstantFactoryNull(){

  final Factory<Object> factory=FactoryUtils.constantFactory(null);

  assertNotNull(factory);

  final Object created=factory.create();

  assertNull(created);

}

Location: FactoryUtilsTest.java

Content: 

@Test public void testExceptionFactory(){

  assertNotNull(FactoryUtils.exceptionFactory());

  assertSame(FactoryUtils.exceptionFactory(),FactoryUtils.exceptionFactory());

  try {

    FactoryUtils.exceptionFactory().create();

  }

 catch (  final FunctorException ex) {

    try {

      FactoryUtils.exceptionFactory().create();

    }

 catch (    final FunctorException ex2) {

      return;

    }

  }

  fail();

}

Location: FactoryUtilsTest.java

Content: 

@Test public void testNullFactory(){

  final Factory<Object> factory=FactoryUtils.nullFactory();

  assertNotNull(factory);

  final Object created=factory.create();

  assertNull(created);

}

Location: FactoryUtilsTest.java

Content: 

@Test public void testPrototypeFactoryNull(){

  assertSame(ConstantFactory.NULL_INSTANCE,FactoryUtils.prototypeFactory(null));

}

Location: FactoryUtilsTest.java

Content: 

@Test public void testPrototypeFactoryPublicBad(){

  final Object proto=new Object();

  try {

    FactoryUtils.prototypeFactory(proto);

  }

 catch (  final IllegalArgumentException ex) {

    return;

  }

  fail();

}

Location: FactoryUtilsTest.java

Content: 

@Test public void testPrototypeFactoryPublicCloneMethod() throws Exception {

  final Date proto=new Date();

  final Factory<Date> factory=FactoryUtils.prototypeFactory(proto);

  assertNotNull(factory);

  final Date created=factory.create();

  assertNotSame(proto,created);

  assertEquals(proto,created);

}

Location: FactoryUtilsTest.java

Content: 

@Test public void testPrototypeFactoryPublicCopyConstructor() throws Exception {

  final Mock1 proto=new Mock1(6);

  final Factory<Object> factory=FactoryUtils.<Object>prototypeFactory(proto);

  assertNotNull(factory);

  final Object created=factory.create();

  assertNotSame(proto,created);

  assertEquals(proto,created);

}

Location: FactoryUtilsTest.java

Content: 

@Test public void testPrototypeFactoryPublicSerialization() throws Exception {

  final Integer proto=9;

  final Factory<Integer> factory=FactoryUtils.prototypeFactory(proto);

  assertNotNull(factory);

  final Integer created=factory.create();

  assertNotSame(proto,created);

  assertEquals(proto,created);

}

Location: FactoryUtilsTest.java

Content: 

@Test public void testPrototypeFactoryPublicSerializationError(){

  final Mock2 proto=new Mock2(new Object());

  final Factory<Object> factory=FactoryUtils.<Object>prototypeFactory(proto);

  assertNotNull(factory);

  try {

    factory.create();

  }

 catch (  final FunctorException ex) {

    assertTrue(ex.getCause() instanceof IOException);

    return;

  }

  fail();

}

Location: FactoryUtilsTest.java

Content: 

/** 

 * Test that all Factory singletons hold singleton pattern in serialization/deserialization process.

 */

@Test public void testSingletonPatternInSerialization(){

  final Object[] singletons=new Object[]{ExceptionFactory.INSTANCE};

  for (  final Object original : singletons) {

    TestUtils.assertSameAfterSerialization("Singleton pattern broken for " + original.getClass(),original);

  }

}

Location: FactoryUtilsTest.java

Content: 

@Test public void instantiateFactoryComplex(){

  TimeZone.setDefault(TimeZone.getTimeZone("GMT"));

  final Factory<Date> factory=FactoryUtils.instantiateFactory(Date.class,new Class[]{Integer.TYPE,Integer.TYPE,Integer.TYPE},new Object[]{Integer.valueOf(70),Integer.valueOf(0),Integer.valueOf(2)});

  assertNotNull(factory);

  final Date created=factory.create();

  assertEquals(new Date(1000 * 60 * 60* 24),created);

}

Location: FactoryUtilsTest.java

Content: 

@Test public void instantiateFactoryMismatch(){

  assertThrows(IllegalArgumentException.class,() -> FactoryUtils.instantiateFactory(Date.class,null,new Object[]{null}));

}

Location: FactoryUtilsTest.java

Content: 

@Test public void instantiateFactoryNoConstructor(){

  assertThrows(IllegalArgumentException.class,() -> FactoryUtils.instantiateFactory(Date.class,new Class[]{Long.class},new Object[]{null}));

}

Location: FactoryUtilsTest.java

Content: 

@Test public void instantiateFactoryNull(){

  assertThrows(NullPointerException.class,() -> FactoryUtils.instantiateFactory(null));

}

Location: FactoryUtilsTest.java

Content: 

@Test public void instantiateFactorySimple(){

  final Factory<Mock3> factory=FactoryUtils.instantiateFactory(Mock3.class);

  assertNotNull(factory);

  Mock3 created=factory.create();

  assertEquals(0,created.getValue());

  created=factory.create();

  assertEquals(1,created.getValue());

}

Location: FactoryUtilsTest.java

Content: 

@Test public void testConstantFactoryConstant(){

  final Integer constant=Integer.valueOf(9);

  final Factory<Integer> factory=FactoryUtils.constantFactory(constant);

  assertNotNull(factory);

  final Integer created=factory.create();

  assertSame(constant,created);

}

Location: FactoryUtilsTest.java

Content: 

@Test public void testConstantFactoryNull(){

  final Factory<Object> factory=FactoryUtils.constantFactory(null);

  assertNotNull(factory);

  final Object created=factory.create();

  assertNull(created);

}

Location: FactoryUtilsTest.java

Content: 

@Test public void testExceptionFactory(){

  assertNotNull(FactoryUtils.exceptionFactory());

  assertSame(FactoryUtils.exceptionFactory(),FactoryUtils.exceptionFactory());

  try {

    FactoryUtils.exceptionFactory().create();

  }

 catch (  final FunctorException ex) {

    try {

      FactoryUtils.exceptionFactory().create();

    }

 catch (    final FunctorException ex2) {

      return;

    }

  }

  fail();

}

Location: FactoryUtilsTest.java

Content: 

@Test public void testNullFactory(){

  final Factory<Object> factory=FactoryUtils.nullFactory();

  assertNotNull(factory);

  final Object created=factory.create();

  assertNull(created);

}

Location: FactoryUtilsTest.java

Content: 

@Test public void testPrototypeFactoryNull(){

  assertSame(ConstantFactory.NULL_INSTANCE,FactoryUtils.prototypeFactory(null));

}

Location: FactoryUtilsTest.java

Content: 

@Test public void testPrototypeFactoryPublicBad(){

  final Object proto=new Object();

  try {

    FactoryUtils.prototypeFactory(proto);

  }

 catch (  final IllegalArgumentException ex) {

    return;

  }

  fail();

}

Location: FactoryUtilsTest.java

Content: 

@Test public void testPrototypeFactoryPublicCloneMethod() throws Exception {

  final Date proto=new Date();

  final Factory<Date> factory=FactoryUtils.prototypeFactory(proto);

  assertNotNull(factory);

  final Date created=factory.create();

  assertNotSame(proto,created);

  assertEquals(proto,created);

}

Location: FactoryUtilsTest.java

Content: 

@Test public void testPrototypeFactoryPublicCopyConstructor() throws Exception {

  final Mock1 proto=new Mock1(6);

  final Factory<Object> factory=FactoryUtils.<Object>prototypeFactory(proto);

  assertNotNull(factory);

  final Object created=factory.create();

  assertNotSame(proto,created);

  assertEquals(proto,created);

}

Location: FactoryUtilsTest.java

Content: 

@Test public void testPrototypeFactoryPublicSerialization() throws Exception {

  final Integer proto=9;

  final Factory<Integer> factory=FactoryUtils.prototypeFactory(proto);

  assertNotNull(factory);

  final Integer created=factory.create();

  assertNotSame(proto,created);

  assertEquals(proto,created);

}

Location: FactoryUtilsTest.java

Content: 

@Test public void testPrototypeFactoryPublicSerializationError(){

  final Mock2 proto=new Mock2(new Object());

  final Factory<Object> factory=FactoryUtils.<Object>prototypeFactory(proto);

  assertNotNull(factory);

  try {

    factory.create();

  }

 catch (  final FunctorException ex) {

    assertTrue(ex.getCause() instanceof IOException);

    return;

  }

  fail();

}

Location: FactoryUtilsTest.java

Content: 

/** 

 * Test that all Factory singletons hold singleton pattern in serialization/deserialization process.

 */

@Test public void testSingletonPatternInSerialization(){

  final Object[] singletons=new Object[]{ExceptionFactory.INSTANCE};

  for (  final Object original : singletons) {

    TestUtils.assertSameAfterSerialization("Singleton pattern broken for " + original.getClass(),original);

  }

}

