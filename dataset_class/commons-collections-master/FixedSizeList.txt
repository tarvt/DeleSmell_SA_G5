Location: FixedSizeList.java

Content: 

/** 

 * Constructor that wraps (not copies).

 * @param list  the list to decorate, must not be null

 * @throws NullPointerException if list is null

 */

protected FixedSizeList(final List<E> list){

  super(list);

}

Location: FixedSizeList.java

Content: 

@Override public int lastIndexOf(final Object object){

  return decorated().lastIndexOf(object);

}

Location: FixedSizeList.java

Content: 

@Override public ListIterator<E> listIterator(){

  return new FixedSizeListIterator(decorated().listIterator(0));

}

Location: FixedSizeList.java

Content: 

@Override public ListIterator<E> listIterator(final int index){

  return new FixedSizeListIterator(decorated().listIterator(index));

}

Location: FixedSizeList.java

Content: 

@Override public E set(final int index,final E object){

  return decorated().set(index,object);

}

Location: FixedSizeList.java

Content: 

@Override public List<E> subList(final int fromIndex,final int toIndex){

  final List<E> sub=decorated().subList(fromIndex,toIndex);

  return new FixedSizeList<>(sub);

}

Location: FixedSizeList.java

Content: 

private static UnsupportedOperationException unsupportedOperationException(){

  return new UnsupportedOperationException("List is fixed size");

}

Location: FixedSizeList.java

Content: 

/** 

 * Constructor that wraps (not copies).

 * @param list  the list to decorate, must not be null

 * @throws NullPointerException if list is null

 */

protected FixedSizeList(final List<E> list){

  super(list);

}

Location: FixedSizeList.java

Content: 

@Override public int lastIndexOf(final Object object){

  return decorated().lastIndexOf(object);

}

Location: FixedSizeList.java

Content: 

@Override public ListIterator<E> listIterator(){

  return new FixedSizeListIterator(decorated().listIterator(0));

}

Location: FixedSizeList.java

Content: 

@Override public ListIterator<E> listIterator(final int index){

  return new FixedSizeListIterator(decorated().listIterator(index));

}

Location: FixedSizeList.java

Content: 

@Override public E set(final int index,final E object){

  return decorated().set(index,object);

}

Location: FixedSizeList.java

Content: 

@Override public List<E> subList(final int fromIndex,final int toIndex){

  final List<E> sub=decorated().subList(fromIndex,toIndex);

  return new FixedSizeList<>(sub);

}

Location: FixedSizeList.java

Content: 

private static UnsupportedOperationException unsupportedOperationException(){

  return new UnsupportedOperationException("List is fixed size");

}

