Location: BloomFilterIndexerTest.java

Content: 

/** 

 * Gets non-zero positive indexes for testing.

 * @return the indices

 */

private static int[] getIndexes(){

  final Random rng=ThreadLocalRandom.current();

  final ArrayList<Integer> indexes=new ArrayList<>(40);

  for (int i=0; i < 10; i++) {

    indexes.add(rng.nextInt() >>> 1);

    indexes.add(rng.nextInt(23647826));

    indexes.add(rng.nextInt(245));

  }

  indexes.removeIf(i -> i == 0);

  indexes.add(1);

  indexes.add(2);

  indexes.add(63);

  indexes.add(64);

  indexes.add(Integer.MAX_VALUE);

  return indexes.stream().mapToInt(Integer::intValue).toArray();

}

Location: BloomFilterIndexerTest.java

Content: 

@Test public void testCheckPositiveThrows(){

  assertThrows(IndexOutOfBoundsException.class,() -> BloomFilterIndexer.checkPositive(-1));

}

Location: BloomFilterIndexerTest.java

Content: 

@Test public void testGetLongBit(){

  assertEquals(1L,BloomFilterIndexer.getLongBit(0));

  for (  final int index : getIndexes()) {

    assertEquals(1L << (index % Long.SIZE),BloomFilterIndexer.getLongBit(index));

    assertEquals(1L << (64 - (index & 0x3f)),BloomFilterIndexer.getLongBit(-index));

  }

}

Location: BloomFilterIndexerTest.java

Content: 

@Test public void testGetLongIndex(){

  assertEquals(0,BloomFilterIndexer.getLongIndex(0));

  for (  final int index : getIndexes()) {

    assertEquals(index / Long.SIZE,BloomFilterIndexer.getLongIndex(index));

    assertTrue(BloomFilterIndexer.getLongIndex(-index) < 0);

    assertEquals(((1 - index) / Long.SIZE) - 1,BloomFilterIndexer.getLongIndex(-index));

  }

}

Location: BloomFilterIndexerTest.java

Content: 

/** 

 * Gets non-zero positive indexes for testing.

 * @return the indices

 */

private static int[] getIndexes(){

  final Random rng=ThreadLocalRandom.current();

  final ArrayList<Integer> indexes=new ArrayList<>(40);

  for (int i=0; i < 10; i++) {

    indexes.add(rng.nextInt() >>> 1);

    indexes.add(rng.nextInt(23647826));

    indexes.add(rng.nextInt(245));

  }

  indexes.removeIf(i -> i == 0);

  indexes.add(1);

  indexes.add(2);

  indexes.add(63);

  indexes.add(64);

  indexes.add(Integer.MAX_VALUE);

  return indexes.stream().mapToInt(Integer::intValue).toArray();

}

Location: BloomFilterIndexerTest.java

Content: 

@Test public void testCheckPositiveThrows(){

  assertThrows(IndexOutOfBoundsException.class,() -> BloomFilterIndexer.checkPositive(-1));

}

Location: BloomFilterIndexerTest.java

Content: 

@Test public void testGetLongBit(){

  assertEquals(1L,BloomFilterIndexer.getLongBit(0));

  for (  final int index : getIndexes()) {

    assertEquals(1L << (index % Long.SIZE),BloomFilterIndexer.getLongBit(index));

    assertEquals(1L << (64 - (index & 0x3f)),BloomFilterIndexer.getLongBit(-index));

  }

}

Location: BloomFilterIndexerTest.java

Content: 

@Test public void testGetLongIndex(){

  assertEquals(0,BloomFilterIndexer.getLongIndex(0));

  for (  final int index : getIndexes()) {

    assertEquals(index / Long.SIZE,BloomFilterIndexer.getLongIndex(index));

    assertTrue(BloomFilterIndexer.getLongIndex(-index) < 0);

    assertEquals(((1 - index) / Long.SIZE) - 1,BloomFilterIndexer.getLongIndex(-index));

  }

}

