Location: AbstractBitwiseTrie.java

Content: 

/** 

 * Constructs a new  {@link Trie} using the given {@link KeyAnalyzer}.

 * @param keyAnalyzer  the {@link KeyAnalyzer} to use

 */

protected AbstractBitwiseTrie(final KeyAnalyzer<? super K> keyAnalyzer){

  this.keyAnalyzer=Objects.requireNonNull(keyAnalyzer,"keyAnalyzer");

}

Location: AbstractBitwiseTrie.java

Content: 

/** 

 * Utility method for calling  {@link KeyAnalyzer#bitIndex(Object,int,int,Object,int,int)}.

 */

final int bitIndex(final K key,final K foundKey){

  return keyAnalyzer.bitIndex(key,0,lengthInBits(key),foundKey,0,lengthInBits(foundKey));

}

Location: AbstractBitwiseTrie.java

Content: 

/** 

 * A utility method to cast keys. It actually doesn't cast anything. It's just fooling the compiler!

 */

@SuppressWarnings("unchecked") final K castKey(final Object key){

  return (K)key;

}

Location: AbstractBitwiseTrie.java

Content: 

/** 

 * An utility method for calling  {@link KeyAnalyzer#compare(Object,Object)}

 */

final boolean compareKeys(final K key,final K other){

  if (key == null) {

    return other == null;

  }

  if (other == null) {

    return false;

  }

  return keyAnalyzer.compare(key,other) == 0;

}

Location: AbstractBitwiseTrie.java

Content: 

/** 

 * Returns the  {@link KeyAnalyzer} that constructed the {@link Trie}.

 * @return the {@link KeyAnalyzer} used by this {@link Trie}

 */

protected KeyAnalyzer<? super K> getKeyAnalyzer(){

  return keyAnalyzer;

}

Location: AbstractBitwiseTrie.java

Content: 

/** 

 * Returns whether or not the given bit on the key is set or false if the key is null.

 * @see KeyAnalyzer#isBitSet(Object,int,int)

 */

final boolean isBitSet(final K key,final int bitIndex,final int lengthInBits){

  if (key == null) {

    return false;

  }

  return keyAnalyzer.isBitSet(key,bitIndex,lengthInBits);

}

Location: AbstractBitwiseTrie.java

Content: 

/** 

 * Returns the length of the given key in bits

 * @see KeyAnalyzer#lengthInBits(Object)

 */

final int lengthInBits(final K key){

  if (key == null) {

    return 0;

  }

  return keyAnalyzer.lengthInBits(key);

}

Location: AbstractBitwiseTrie.java

Content: 

/** 

 * Constructs a new  {@link Trie} using the given {@link KeyAnalyzer}.

 * @param keyAnalyzer  the {@link KeyAnalyzer} to use

 */

protected AbstractBitwiseTrie(final KeyAnalyzer<? super K> keyAnalyzer){

  this.keyAnalyzer=Objects.requireNonNull(keyAnalyzer,"keyAnalyzer");

}

Location: AbstractBitwiseTrie.java

Content: 

/** 

 * Utility method for calling  {@link KeyAnalyzer#bitIndex(Object,int,int,Object,int,int)}.

 */

final int bitIndex(final K key,final K foundKey){

  return keyAnalyzer.bitIndex(key,0,lengthInBits(key),foundKey,0,lengthInBits(foundKey));

}

Location: AbstractBitwiseTrie.java

Content: 

/** 

 * A utility method to cast keys. It actually doesn't cast anything. It's just fooling the compiler!

 */

@SuppressWarnings("unchecked") final K castKey(final Object key){

  return (K)key;

}

Location: AbstractBitwiseTrie.java

Content: 

/** 

 * An utility method for calling  {@link KeyAnalyzer#compare(Object,Object)}

 */

final boolean compareKeys(final K key,final K other){

  if (key == null) {

    return other == null;

  }

  if (other == null) {

    return false;

  }

  return keyAnalyzer.compare(key,other) == 0;

}

Location: AbstractBitwiseTrie.java

Content: 

/** 

 * Returns the  {@link KeyAnalyzer} that constructed the {@link Trie}.

 * @return the {@link KeyAnalyzer} used by this {@link Trie}

 */

protected KeyAnalyzer<? super K> getKeyAnalyzer(){

  return keyAnalyzer;

}

Location: AbstractBitwiseTrie.java

Content: 

/** 

 * Returns whether or not the given bit on the key is set or false if the key is null.

 * @see KeyAnalyzer#isBitSet(Object,int,int)

 */

final boolean isBitSet(final K key,final int bitIndex,final int lengthInBits){

  if (key == null) {

    return false;

  }

  return keyAnalyzer.isBitSet(key,bitIndex,lengthInBits);

}

Location: AbstractBitwiseTrie.java

Content: 

/** 

 * Returns the length of the given key in bits

 * @see KeyAnalyzer#lengthInBits(Object)

 */

final int lengthInBits(final K key){

  if (key == null) {

    return 0;

  }

  return keyAnalyzer.lengthInBits(key);

}

