Location: FunctorUtils.java

Content: 

/** 

 * A very simple method that coerces Closure<? super T> to Closure<T>. <p>This method exists simply as centralized documentation and atomic unchecked warning suppression.

 * @param < T > the type of object the returned closure should "accept"

 * @param closure the closure to coerce.

 * @return the coerced closure.

 */

@SuppressWarnings("unchecked") static <T>Closure<T> coerce(final Closure<? super T> closure){

  return (Closure<T>)closure;

}

Location: FunctorUtils.java

Content: 

/** 

 * A very simple method that coerces Predicate<? super T> to Predicate<T>. Due to the  {@link Predicate#evaluate(T)} method, Predicate<? super T> isable to be coerced to Predicate<T> without casting issues. <p>This method exists simply as centralised documentation and atomic unchecked warning suppression.

 * @param < T > the type of object the returned predicate should "accept"

 * @param predicate the predicate to coerce.

 * @return the coerced predicate.

 */

@SuppressWarnings("unchecked") static <T>Predicate<T> coerce(final Predicate<? super T> predicate){

  return (Predicate<T>)predicate;

}

Location: FunctorUtils.java

Content: 

/** 

 * A very simple method that coerces Transformer<? super I, ? extends O> to Transformer<I, O>. <p>This method exists simply as centralised documentation and atomic unchecked warning suppression.

 * @param < I > the type of object the returned transformer should "accept"

 * @param < O > the type of object the returned transformer should "produce"

 * @param transformer the transformer to coerce.

 * @return the coerced transformer.

 */

@SuppressWarnings("unchecked") static <I,O>Transformer<I,O> coerce(final Transformer<? super I,? extends O> transformer){

  return (Transformer<I,O>)transformer;

}

Location: FunctorUtils.java

Content: 

/** 

 * Clone the closures to ensure that the internal reference can't be messed with.

 * @param closures  the closures to copy

 * @return the cloned closures

 */

@SuppressWarnings("unchecked") static <E>Closure<E>[] copy(final Closure<? super E>... closures){

  if (closures == null) {

    return null;

  }

  return (Closure<E>[])closures.clone();

}

Location: FunctorUtils.java

Content: 

/** 

 * Clone the predicates to ensure that the internal reference can't be messed with. Due to the  {@link Predicate#evaluate(T)} method, Predicate<? super T> isable to be coerced to Predicate<T> without casting issues.

 * @param predicates  the predicates to copy

 * @return the cloned predicates

 */

@SuppressWarnings("unchecked") static <T>Predicate<T>[] copy(final Predicate<? super T>... predicates){

  if (predicates == null) {

    return null;

  }

  return (Predicate<T>[])predicates.clone();

}

Location: FunctorUtils.java

Content: 

/** 

 * Copy method

 * @param transformers  the transformers to copy

 * @return a clone of the transformers

 */

@SuppressWarnings("unchecked") static <I,O>Transformer<I,O>[] copy(final Transformer<? super I,? extends O>... transformers){

  if (transformers == null) {

    return null;

  }

  return (Transformer<I,O>[])transformers.clone();

}

Location: FunctorUtils.java

Content: 

/** 

 * Restricted constructor.

 */

private FunctorUtils(){

}

Location: FunctorUtils.java

Content: 

/** 

 * Validate the closures to ensure that all is well.

 * @param closures  the closures to validate

 */

static void validate(final Closure<?>... closures){

  Objects.requireNonNull(closures,"closures");

  for (int i=0; i < closures.length; i++) {

    if (closures[i] == null) {

      throw new NullPointerException("closures[" + i + "]");

    }

  }

}

Location: FunctorUtils.java

Content: 

/** 

 * Validate the predicates to ensure that all is well.

 * @param predicates  the predicates to validate

 * @return predicate array

 */

static <T>Predicate<? super T>[] validate(final Collection<? extends Predicate<? super T>> predicates){

  Objects.requireNonNull(predicates,"predicates");

  @SuppressWarnings("unchecked") final Predicate<? super T>[] preds=new Predicate[predicates.size()];

  int i=0;

  for (  final Predicate<? super T> predicate : predicates) {

    preds[i]=predicate;

    if (preds[i] == null) {

      throw new NullPointerException("predicates[" + i + "]");

    }

    i++;

  }

  return preds;

}

Location: FunctorUtils.java

Content: 

/** 

 * Validate the predicates to ensure that all is well.

 * @param predicates  the predicates to validate

 */

static void validate(final Predicate<?>... predicates){

  Objects.requireNonNull(predicates,"predicates");

  for (int i=0; i < predicates.length; i++) {

    if (predicates[i] == null) {

      throw new NullPointerException("predicates[" + i + "]");

    }

  }

}

Location: FunctorUtils.java

Content: 

/** 

 * Validate method

 * @param transformers  the transformers to validate

 */

static void validate(final Transformer<?,?>... transformers){

  Objects.requireNonNull(transformers,"transformers");

  for (int i=0; i < transformers.length; i++) {

    if (transformers[i] == null) {

      throw new NullPointerException("transformers[" + i + "]");

    }

  }

}

Location: FunctorUtils.java

Content: 

/** 

 * A very simple method that coerces Closure<? super T> to Closure<T>. <p>This method exists simply as centralized documentation and atomic unchecked warning suppression.

 * @param < T > the type of object the returned closure should "accept"

 * @param closure the closure to coerce.

 * @return the coerced closure.

 */

@SuppressWarnings("unchecked") static <T>Closure<T> coerce(final Closure<? super T> closure){

  return (Closure<T>)closure;

}

Location: FunctorUtils.java

Content: 

/** 

 * A very simple method that coerces Predicate<? super T> to Predicate<T>. Due to the  {@link Predicate#evaluate(T)} method, Predicate<? super T> isable to be coerced to Predicate<T> without casting issues. <p>This method exists simply as centralised documentation and atomic unchecked warning suppression.

 * @param < T > the type of object the returned predicate should "accept"

 * @param predicate the predicate to coerce.

 * @return the coerced predicate.

 */

@SuppressWarnings("unchecked") static <T>Predicate<T> coerce(final Predicate<? super T> predicate){

  return (Predicate<T>)predicate;

}

Location: FunctorUtils.java

Content: 

/** 

 * A very simple method that coerces Transformer<? super I, ? extends O> to Transformer<I, O>. <p>This method exists simply as centralised documentation and atomic unchecked warning suppression.

 * @param < I > the type of object the returned transformer should "accept"

 * @param < O > the type of object the returned transformer should "produce"

 * @param transformer the transformer to coerce.

 * @return the coerced transformer.

 */

@SuppressWarnings("unchecked") static <I,O>Transformer<I,O> coerce(final Transformer<? super I,? extends O> transformer){

  return (Transformer<I,O>)transformer;

}

Location: FunctorUtils.java

Content: 

/** 

 * Clone the closures to ensure that the internal reference can't be messed with.

 * @param closures  the closures to copy

 * @return the cloned closures

 */

@SuppressWarnings("unchecked") static <E>Closure<E>[] copy(final Closure<? super E>... closures){

  if (closures == null) {

    return null;

  }

  return (Closure<E>[])closures.clone();

}

Location: FunctorUtils.java

Content: 

/** 

 * Clone the predicates to ensure that the internal reference can't be messed with. Due to the  {@link Predicate#evaluate(T)} method, Predicate<? super T> isable to be coerced to Predicate<T> without casting issues.

 * @param predicates  the predicates to copy

 * @return the cloned predicates

 */

@SuppressWarnings("unchecked") static <T>Predicate<T>[] copy(final Predicate<? super T>... predicates){

  if (predicates == null) {

    return null;

  }

  return (Predicate<T>[])predicates.clone();

}

Location: FunctorUtils.java

Content: 

/** 

 * Copy method

 * @param transformers  the transformers to copy

 * @return a clone of the transformers

 */

@SuppressWarnings("unchecked") static <I,O>Transformer<I,O>[] copy(final Transformer<? super I,? extends O>... transformers){

  if (transformers == null) {

    return null;

  }

  return (Transformer<I,O>[])transformers.clone();

}

Location: FunctorUtils.java

Content: 

/** 

 * Restricted constructor.

 */

private FunctorUtils(){

}

Location: FunctorUtils.java

Content: 

/** 

 * Validate the closures to ensure that all is well.

 * @param closures  the closures to validate

 */

static void validate(final Closure<?>... closures){

  Objects.requireNonNull(closures,"closures");

  for (int i=0; i < closures.length; i++) {

    if (closures[i] == null) {

      throw new NullPointerException("closures[" + i + "]");

    }

  }

}

Location: FunctorUtils.java

Content: 

/** 

 * Validate the predicates to ensure that all is well.

 * @param predicates  the predicates to validate

 * @return predicate array

 */

static <T>Predicate<? super T>[] validate(final Collection<? extends Predicate<? super T>> predicates){

  Objects.requireNonNull(predicates,"predicates");

  @SuppressWarnings("unchecked") final Predicate<? super T>[] preds=new Predicate[predicates.size()];

  int i=0;

  for (  final Predicate<? super T> predicate : predicates) {

    preds[i]=predicate;

    if (preds[i] == null) {

      throw new NullPointerException("predicates[" + i + "]");

    }

    i++;

  }

  return preds;

}

Location: FunctorUtils.java

Content: 

/** 

 * Validate the predicates to ensure that all is well.

 * @param predicates  the predicates to validate

 */

static void validate(final Predicate<?>... predicates){

  Objects.requireNonNull(predicates,"predicates");

  for (int i=0; i < predicates.length; i++) {

    if (predicates[i] == null) {

      throw new NullPointerException("predicates[" + i + "]");

    }

  }

}

Location: FunctorUtils.java

Content: 

/** 

 * Validate method

 * @param transformers  the transformers to validate

 */

static void validate(final Transformer<?,?>... transformers){

  Objects.requireNonNull(transformers,"transformers");

  for (int i=0; i < transformers.length; i++) {

    if (transformers[i] == null) {

      throw new NullPointerException("transformers[" + i + "]");

    }

  }

}

