Location: TransformIterator.java

Content: 

/** 

 * Gets the transformer this iterator is using.

 * @return the transformer.

 */

public Transformer<? super I,? extends O> getTransformer(){

  return transformer;

}

Location: TransformIterator.java

Content: 

/** 

 * Sets the transformer this the iterator to use. A null transformer is a no-op transformer.

 * @param transformer  the transformer to use

 */

public void setTransformer(final Transformer<? super I,? extends O> transformer){

  this.transformer=transformer;

}

Location: TransformIterator.java

Content: 

/** 

 * Constructs a new  {@code TransformIterator} that will not functionuntil the  {@link #setIterator(Iterator) setIterator} and{@link #setTransformer(Transformer)} methods are invoked.

 */

public TransformIterator(){

}

Location: TransformIterator.java

Content: 

/** 

 * Constructs a new  {@code TransformIterator} that won't transformelements from the given iterator.

 * @param iterator  the iterator to use

 */

public TransformIterator(final Iterator<? extends I> iterator){

  this.iterator=iterator;

}

Location: TransformIterator.java

Content: 

/** 

 * Constructs a new  {@code TransformIterator} that will use thegiven iterator and transformer.  If the given transformer is null, then objects will not be transformed.

 * @param iterator  the iterator to use

 * @param transformer  the transformer to use

 */

public TransformIterator(final Iterator<? extends I> iterator,final Transformer<? super I,? extends O> transformer){

  this.iterator=iterator;

  this.transformer=transformer;

}

Location: TransformIterator.java

Content: 

/** 

 * Transforms the given object using the transformer. If the transformer is null, the original object is returned as-is.

 * @param source  the object to transform

 * @return the transformed object

 */

protected O transform(final I source){

  return transformer.transform(source);

}

Location: TransformIterator.java

Content: 

/** 

 * Gets the transformer this iterator is using.

 * @return the transformer.

 */

public Transformer<? super I,? extends O> getTransformer(){

  return transformer;

}

Location: TransformIterator.java

Content: 

/** 

 * Sets the transformer this the iterator to use. A null transformer is a no-op transformer.

 * @param transformer  the transformer to use

 */

public void setTransformer(final Transformer<? super I,? extends O> transformer){

  this.transformer=transformer;

}

Location: TransformIterator.java

Content: 

/** 

 * Constructs a new  {@code TransformIterator} that will not functionuntil the  {@link #setIterator(Iterator) setIterator} and{@link #setTransformer(Transformer)} methods are invoked.

 */

public TransformIterator(){

}

Location: TransformIterator.java

Content: 

/** 

 * Constructs a new  {@code TransformIterator} that won't transformelements from the given iterator.

 * @param iterator  the iterator to use

 */

public TransformIterator(final Iterator<? extends I> iterator){

  this.iterator=iterator;

}

Location: TransformIterator.java

Content: 

/** 

 * Constructs a new  {@code TransformIterator} that will use thegiven iterator and transformer.  If the given transformer is null, then objects will not be transformed.

 * @param iterator  the iterator to use

 * @param transformer  the transformer to use

 */

public TransformIterator(final Iterator<? extends I> iterator,final Transformer<? super I,? extends O> transformer){

  this.iterator=iterator;

  this.transformer=transformer;

}

Location: TransformIterator.java

Content: 

/** 

 * Transforms the given object using the transformer. If the transformer is null, the original object is returned as-is.

 * @param source  the object to transform

 * @return the transformed object

 */

protected O transform(final I source){

  return transformer.transform(source);

}

