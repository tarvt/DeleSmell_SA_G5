Location: StaticBucketMap.java

Content: 

/** 

 * Prevents any operations from occurring on this map while the given  {@link Runnable} executes.  This method can be used, forinstance, to execute a bulk operation atomically: <pre> staticBucketMapInstance.atomic(new Runnable() { public void run() { staticBucketMapInstance.putAll(map); } }); </pre> It can also be used if you need a reliable iterator: <pre> staticBucketMapInstance.atomic(new Runnable() { public void run() { Iterator iterator = staticBucketMapInstance.iterator(); while (iterator.hasNext()) { foo(iterator.next(); } } }); </pre> <b>Implementation note:</b> This method requires a lot of time and a ton of stack space.  Essentially a recursive algorithm is used to enter each bucket's monitor.  If you have twenty thousand buckets in your map, then the recursive method will be invoked twenty thousand times.  You have been warned.

 * @param runnable  the code to execute atomically

 */

public void atomic(final Runnable runnable){

  atomic(Objects.requireNonNull(runnable,"runnable"),0);

}

Location: StaticBucketMap.java

Content: 

private void atomic(final Runnable r,final int bucket){

  if (bucket >= buckets.length) {

    r.run();

    return;

  }

synchronized (locks[bucket]) {

    atomic(r,bucket + 1);

  }

}

Location: StaticBucketMap.java

Content: 

/** 

 * Determine the exact hash entry for the key.  The hash algorithm is rather simplistic, but it does the job: <pre> He = |Hk mod n| </pre> <p> He is the entry's hashCode, Hk is the key's hashCode, and n is the number of buckets. </p>

 */

private int getHash(final Object key){

  if (key == null) {

    return 0;

  }

  int hash=key.hashCode();

  hash+=~(hash << 15);

  hash^=(hash >>> 10);

  hash+=(hash << 3);

  hash^=(hash >>> 6);

  hash+=~(hash << 11);

  hash^=(hash >>> 16);

  hash%=buckets.length;

  return (hash < 0) ? hash * -1 : hash;

}

Location: StaticBucketMap.java

Content: 

/** 

 * Initializes the map with the default number of buckets (255).

 */

public StaticBucketMap(){

  this(DEFAULT_BUCKETS);

}

Location: StaticBucketMap.java

Content: 

/** 

 * Initializes the map with a specified number of buckets.  The number of buckets is never below 17, and is always an odd number (StaticBucketMap ensures this). The number of buckets is inversely proportional to the chances for thread contention.  The fewer buckets, the more chances for thread contention.  The more buckets the fewer chances for thread contention.

 * @param numBuckets  the number of buckets for this map

 */

@SuppressWarnings("unchecked") public StaticBucketMap(final int numBuckets){

  int size=Math.max(17,numBuckets);

  if (size % 2 == 0) {

    size--;

  }

  buckets=new Node[size];

  locks=new Lock[size];

  for (int i=0; i < size; i++) {

    locks[i]=new Lock();

  }

}

Location: StaticBucketMap.java

Content: 

/** 

 * Prevents any operations from occurring on this map while the given  {@link Runnable} executes.  This method can be used, forinstance, to execute a bulk operation atomically: <pre> staticBucketMapInstance.atomic(new Runnable() { public void run() { staticBucketMapInstance.putAll(map); } }); </pre> It can also be used if you need a reliable iterator: <pre> staticBucketMapInstance.atomic(new Runnable() { public void run() { Iterator iterator = staticBucketMapInstance.iterator(); while (iterator.hasNext()) { foo(iterator.next(); } } }); </pre> <b>Implementation note:</b> This method requires a lot of time and a ton of stack space.  Essentially a recursive algorithm is used to enter each bucket's monitor.  If you have twenty thousand buckets in your map, then the recursive method will be invoked twenty thousand times.  You have been warned.

 * @param runnable  the code to execute atomically

 */

public void atomic(final Runnable runnable){

  atomic(Objects.requireNonNull(runnable,"runnable"),0);

}

Location: StaticBucketMap.java

Content: 

private void atomic(final Runnable r,final int bucket){

  if (bucket >= buckets.length) {

    r.run();

    return;

  }

synchronized (locks[bucket]) {

    atomic(r,bucket + 1);

  }

}

Location: StaticBucketMap.java

Content: 

/** 

 * Determine the exact hash entry for the key.  The hash algorithm is rather simplistic, but it does the job: <pre> He = |Hk mod n| </pre> <p> He is the entry's hashCode, Hk is the key's hashCode, and n is the number of buckets. </p>

 */

private int getHash(final Object key){

  if (key == null) {

    return 0;

  }

  int hash=key.hashCode();

  hash+=~(hash << 15);

  hash^=(hash >>> 10);

  hash+=(hash << 3);

  hash^=(hash >>> 6);

  hash+=~(hash << 11);

  hash^=(hash >>> 16);

  hash%=buckets.length;

  return (hash < 0) ? hash * -1 : hash;

}

Location: StaticBucketMap.java

Content: 

/** 

 * Initializes the map with the default number of buckets (255).

 */

public StaticBucketMap(){

  this(DEFAULT_BUCKETS);

}

Location: StaticBucketMap.java

Content: 

/** 

 * Initializes the map with a specified number of buckets.  The number of buckets is never below 17, and is always an odd number (StaticBucketMap ensures this). The number of buckets is inversely proportional to the chances for thread contention.  The fewer buckets, the more chances for thread contention.  The more buckets the fewer chances for thread contention.

 * @param numBuckets  the number of buckets for this map

 */

@SuppressWarnings("unchecked") public StaticBucketMap(final int numBuckets){

  int size=Math.max(17,numBuckets);

  if (size % 2 == 0) {

    size--;

  }

  buckets=new Node[size];

  locks=new Lock[size];

  for (int i=0; i < size; i++) {

    locks[i]=new Lock();

  }

}

