Location: SetUniqueListTest.java

Content: 

public SetUniqueListTest(final String testName){

  super(testName);

}

Location: SetUniqueListTest.java

Content: 

@Override public void testCollectionAddAll(){

  resetEmpty();

  E[] elements=getFullElements();

  boolean r=getCollection().addAll(Arrays.asList(elements));

  getConfirmed().addAll(Arrays.asList(elements));

  verify();

  assertTrue("Empty collection should change after addAll",r);

  for (  final E element : elements) {

    assertTrue("Collection should contain added element",getCollection().contains(element));

  }

  resetFull();

  final int size=getCollection().size();

  elements=getOtherElements();

  r=getCollection().addAll(Arrays.asList(elements));

  getConfirmed().addAll(Arrays.asList(elements));

  verify();

  assertTrue("Full collection should change after addAll",r);

  for (int i=0; i < elements.length; i++) {

    assertTrue("Full collection should contain added element " + i,getCollection().contains(elements[i]));

  }

  assertEquals("Size should increase after addAll",size + elements.length,getCollection().size());

}

Location: SetUniqueListTest.java

Content: 

@Override public void testCollectionIteratorRemove(){

  try {

    extraVerify=false;

    super.testCollectionIteratorRemove();

  }

  finally {

    extraVerify=true;

  }

}

Location: SetUniqueListTest.java

Content: 

public void testCollections304(){

  final List<String> list=new LinkedList<>();

  final SetUniqueList<String> decoratedList=SetUniqueList.setUniqueList(list);

  final String s1="Apple";

  final String s2="Lemon";

  final String s3="Orange";

  final String s4="Strawberry";

  decoratedList.add(s1);

  decoratedList.add(s2);

  decoratedList.add(s3);

  assertEquals(3,decoratedList.size());

  decoratedList.set(1,s4);

  assertEquals(3,decoratedList.size());

  decoratedList.add(1,s4);

  assertEquals(3,decoratedList.size());

  decoratedList.add(1,s2);

  assertEquals(4,decoratedList.size());

}

Location: SetUniqueListTest.java

Content: 

@SuppressWarnings("unchecked") public void testCollections307(){

  List<E> list=new ArrayList<>();

  List<E> uniqueList=SetUniqueList.setUniqueList(list);

  final String hello="Hello";

  final String world="World";

  uniqueList.add((E)hello);

  uniqueList.add((E)world);

  List<E> subList=list.subList(0,0);

  List<E> subUniqueList=uniqueList.subList(0,0);

  assertFalse(subList.contains(world));

  assertFalse(subUniqueList.contains(world));

  List<E> worldList=new ArrayList<>();

  worldList.add((E)world);

  assertFalse(subList.contains("World"));

  assertFalse(subUniqueList.contains("World"));

  list=new ArrayList<>();

  uniqueList=new SetUniqueList307(list,new TreeSet<E>());

  uniqueList.add((E)hello);

  uniqueList.add((E)world);

  subList=list.subList(0,0);

  subUniqueList=uniqueList.subList(0,0);

  assertFalse(subList.contains(world));

  assertFalse(subUniqueList.contains(world));

  worldList=new ArrayList<>();

  worldList.add((E)world);

  assertFalse(subList.contains("World"));

  assertFalse(subUniqueList.contains("World"));

}

Location: SetUniqueListTest.java

Content: 

public void testCollections701(){

  final SetUniqueList<Object> uniqueList=new SetUniqueList<>(new ArrayList<>(),new HashSet<>());

  final Integer obj1=Integer.valueOf(1);

  final Integer obj2=Integer.valueOf(2);

  uniqueList.add(obj1);

  uniqueList.add(obj2);

  assertEquals(2,uniqueList.size());

  uniqueList.add(uniqueList);

  assertEquals(3,uniqueList.size());

  final List<Object> list=new LinkedList<>();

  final SetUniqueList<Object> decoratedList=SetUniqueList.setUniqueList(list);

  final String s1="Apple";

  final String s2="Lemon";

  final String s3="Orange";

  final String s4="Strawberry";

  decoratedList.add(s1);

  decoratedList.add(s2);

  decoratedList.add(s3);

  assertEquals(3,decoratedList.size());

  decoratedList.set(1,s4);

  assertEquals(3,decoratedList.size());

  decoratedList.add(decoratedList);

  assertEquals(4,decoratedList.size());

}

Location: SetUniqueListTest.java

Content: 

@SuppressWarnings("unchecked") public void testCreateSetBasedOnList(){

  final List<String> list=new ArrayList<>();

  list.add("One");

  list.add("Two");

  @SuppressWarnings("rawtypes") final SetUniqueList setUniqueList=(SetUniqueList)makeObject();

  final Set<String> setBasedOnList=setUniqueList.createSetBasedOnList(new HashSet<>(),list);

  assertEquals(list.size(),setBasedOnList.size());

  list.forEach(item -> assertTrue(setBasedOnList.contains(item)));

  final Set<String> setBasedOnList1=setUniqueList.createSetBasedOnList(new TreeSet<>(),list);

  assertEquals(list.size(),setBasedOnList1.size());

  list.forEach(item -> assertTrue(setBasedOnList1.contains(item)));

  final Set<String> setBasedOnList2=setUniqueList.createSetBasedOnList(UnmodifiableSet.unmodifiableSet(new HashSet<>()),list);

  assertEquals(list.size(),setBasedOnList2.size());

  list.forEach(item -> assertTrue(setBasedOnList2.contains(item)));

  assertThrows(NullPointerException.class,() -> setUniqueList.createSetBasedOnList(null,list));

  assertThrows(NullPointerException.class,() -> setUniqueList.createSetBasedOnList(new HashSet<>(),null));

}

Location: SetUniqueListTest.java

Content: 

public void testFactory(){

  final Integer[] array=new Integer[]{Integer.valueOf(1),Integer.valueOf(2),Integer.valueOf(1)};

  final ArrayList<Integer> list=new ArrayList<>(Arrays.asList(array));

  final SetUniqueList<Integer> lset=SetUniqueList.setUniqueList(list);

  assertEquals("Duplicate element was added.",2,lset.size());

  assertEquals(Integer.valueOf(1),lset.get(0));

  assertEquals(Integer.valueOf(2),lset.get(1));

  assertEquals(Integer.valueOf(1),list.get(0));

  assertEquals(Integer.valueOf(2),list.get(1));

}

Location: SetUniqueListTest.java

Content: 

public void testIntCollectionAddAll(){

  final List<Integer> list=new SetUniqueList<>(new ArrayList<Integer>(),new HashSet<Integer>());

  final Integer existingElement=Integer.valueOf(1);

  list.add(existingElement);

  final Integer firstNewElement=Integer.valueOf(2);

  final Integer secondNewElement=Integer.valueOf(3);

  Collection<Integer> collection=Arrays.asList(firstNewElement,secondNewElement);

  list.addAll(0,collection);

  assertEquals("Unique elements should be added.",3,list.size());

  assertEquals("First new element should be at index 0",firstNewElement,list.get(0));

  assertEquals("Second new element should be at index 1",secondNewElement,list.get(1));

  assertEquals("Existing element should shift to index 2",existingElement,list.get(2));

  final Integer thirdNewElement=Integer.valueOf(4);

  collection=Arrays.asList(existingElement,thirdNewElement);

  list.addAll(0,collection);

  assertEquals("Duplicate element should not be added, unique element should be added.",4,list.size());

  assertEquals("Third new element should be at index 0",thirdNewElement,list.get(0));

}

Location: SetUniqueListTest.java

Content: 

@SuppressWarnings("unchecked") public void testListIterator(){

  final SetUniqueList<E> lset=new SetUniqueList<>(new ArrayList<E>(),new HashSet<E>());

  final E obj1=(E)Integer.valueOf(1);

  final E obj2=(E)Integer.valueOf(2);

  lset.add(obj1);

  lset.add(obj2);

  for (final ListIterator<E> it=lset.listIterator(); it.hasNext(); ) {

    it.next();

    if (!it.hasNext()) {

      it.add(obj1);

      break;

    }

  }

  assertEquals("Duplicate element was added",2,lset.size());

}

Location: SetUniqueListTest.java

Content: 

@SuppressWarnings("unchecked") public void testRetainAllWithInitialList(){

  final List<E> list=new ArrayList<>(10);

  for (int i=0; i < 5; ++i) {

    list.add((E)Integer.valueOf(i));

  }

  final SetUniqueList<E> uniqueList=SetUniqueList.setUniqueList(list);

  for (int i=5; i < 10; ++i) {

    uniqueList.add((E)Integer.valueOf(i));

  }

  final Collection<E> retained=new ArrayList<>(5);

  for (int i=0; i < 5; ++i) {

    retained.add((E)Integer.valueOf(i * 2));

  }

  assertTrue(uniqueList.retainAll(retained));

  assertEquals(5,uniqueList.size());

  assertTrue(uniqueList.contains(Integer.valueOf(0)));

  assertTrue(uniqueList.contains(Integer.valueOf(2)));

  assertTrue(uniqueList.contains(Integer.valueOf(4)));

  assertTrue(uniqueList.contains(Integer.valueOf(6)));

  assertTrue(uniqueList.contains(Integer.valueOf(8)));

}

Location: SetUniqueListTest.java

Content: 

public void testSetCollections444(){

  final SetUniqueList<Integer> lset=new SetUniqueList<>(new ArrayList<Integer>(),new HashSet<Integer>());

  final Integer obj1=Integer.valueOf(1);

  final Integer obj2=Integer.valueOf(2);

  lset.add(obj1);

  lset.add(obj2);

  lset.set(0,obj1);

  assertEquals(2,lset.size());

  assertSame(obj1,lset.get(0));

  assertSame(obj2,lset.get(1));

  assertTrue(lset.contains(obj1));

  assertTrue(lset.contains(obj2));

}

Location: SetUniqueListTest.java

Content: 

@SuppressWarnings("unchecked") public void testSetDownwardsInList(){

  final ArrayList<E> l=new ArrayList<>();

  final HashSet<E> s=new HashSet<>();

  final SetUniqueList<E> ul=new SetUniqueList<>(l,s);

  final E a=(E)new Object();

  final E b=(E)new Object();

  ul.add(a);

  ul.add(b);

  assertEquals(a,l.get(0));

  assertEquals(b,l.get(1));

  assertTrue(s.contains(a));

  assertTrue(s.contains(b));

  assertEquals(a,ul.set(0,b));

  assertEquals(1,s.size());

  assertEquals(1,l.size());

  assertEquals(b,l.get(0));

  assertTrue(s.contains(b));

  assertFalse(s.contains(a));

}

Location: SetUniqueListTest.java

Content: 

@SuppressWarnings("unchecked") public void testSetInBiggerList(){

  final ArrayList<E> l=new ArrayList<>();

  final HashSet<E> s=new HashSet<>();

  final SetUniqueList<E> ul=new SetUniqueList<>(l,s);

  final E a=(E)new Object();

  final E b=(E)new Object();

  final E c=(E)new Object();

  ul.add(a);

  ul.add(b);

  ul.add(c);

  assertEquals(a,l.get(0));

  assertEquals(b,l.get(1));

  assertEquals(c,l.get(2));

  assertTrue(s.contains(a));

  assertTrue(s.contains(b));

  assertTrue(s.contains(c));

  assertEquals(a,ul.set(0,b));

  assertEquals(2,s.size());

  assertEquals(2,l.size());

  assertEquals(b,l.get(0));

  assertEquals(c,l.get(1));

  assertFalse(s.contains(a));

  assertTrue(s.contains(b));

  assertTrue(s.contains(c));

}

Location: SetUniqueListTest.java

Content: 

@SuppressWarnings("unchecked") public void testSetUpwardsInList(){

  final ArrayList<E> l=new ArrayList<>();

  final HashSet<E> s=new HashSet<>();

  final SetUniqueList<E> ul=new SetUniqueList<>(l,s);

  final E a=(E)"A";

  final E b=(E)"B";

  final E c=(E)"C";

  ul.add(a);

  ul.add(b);

  ul.add(c);

  assertEquals(a,l.get(0));

  assertEquals(b,l.get(1));

  assertEquals(c,l.get(2));

  assertTrue(s.contains(a));

  assertTrue(s.contains(b));

  assertTrue(s.contains(c));

  assertEquals(b,ul.set(1,a));

  assertEquals(2,s.size());

  assertEquals(2,l.size());

  assertEquals(a,l.get(0));

  assertEquals(c,l.get(1));

  assertTrue(s.contains(a));

  assertFalse(s.contains(b));

  assertTrue(s.contains(c));

}

Location: SetUniqueListTest.java

Content: 

public void testSubListIsUnmodifiable(){

  resetFull();

  final List<E> subList=getCollection().subList(1,3);

  assertEquals(2,subList.size());

  assertThrows(UnsupportedOperationException.class,() -> subList.remove(0));

}

Location: SetUniqueListTest.java

Content: 

@SuppressWarnings("unchecked") public void testUniqueListDoubleInsert(){

  final List<E> l=SetUniqueList.setUniqueList(new LinkedList<E>());

  l.add((E)new Object());

  l.add((E)new Object());

  l.set(0,l.get(1));

  assertEquals(1,l.size());

  l.add(1,l.get(0));

  assertEquals(1,l.size());

}

Location: SetUniqueListTest.java

Content: 

@SuppressWarnings("unchecked") public void testUniqueListReInsert(){

  final List<E> l=SetUniqueList.setUniqueList(new LinkedList<E>());

  l.add((E)new Object());

  l.add((E)new Object());

  final E a=l.get(0);

  l.set(0,l.get(1));

  assertEquals(1,l.size());

  l.add(1,a);

  assertEquals(2,l.size());

}

Location: SetUniqueListTest.java

Content: 

public SetUniqueListTest(final String testName){

  super(testName);

}

Location: SetUniqueListTest.java

Content: 

@Override public void testCollectionAddAll(){

  resetEmpty();

  E[] elements=getFullElements();

  boolean r=getCollection().addAll(Arrays.asList(elements));

  getConfirmed().addAll(Arrays.asList(elements));

  verify();

  assertTrue("Empty collection should change after addAll",r);

  for (  final E element : elements) {

    assertTrue("Collection should contain added element",getCollection().contains(element));

  }

  resetFull();

  final int size=getCollection().size();

  elements=getOtherElements();

  r=getCollection().addAll(Arrays.asList(elements));

  getConfirmed().addAll(Arrays.asList(elements));

  verify();

  assertTrue("Full collection should change after addAll",r);

  for (int i=0; i < elements.length; i++) {

    assertTrue("Full collection should contain added element " + i,getCollection().contains(elements[i]));

  }

  assertEquals("Size should increase after addAll",size + elements.length,getCollection().size());

}

Location: SetUniqueListTest.java

Content: 

@Override public void testCollectionIteratorRemove(){

  try {

    extraVerify=false;

    super.testCollectionIteratorRemove();

  }

  finally {

    extraVerify=true;

  }

}

Location: SetUniqueListTest.java

Content: 

public void testCollections304(){

  final List<String> list=new LinkedList<>();

  final SetUniqueList<String> decoratedList=SetUniqueList.setUniqueList(list);

  final String s1="Apple";

  final String s2="Lemon";

  final String s3="Orange";

  final String s4="Strawberry";

  decoratedList.add(s1);

  decoratedList.add(s2);

  decoratedList.add(s3);

  assertEquals(3,decoratedList.size());

  decoratedList.set(1,s4);

  assertEquals(3,decoratedList.size());

  decoratedList.add(1,s4);

  assertEquals(3,decoratedList.size());

  decoratedList.add(1,s2);

  assertEquals(4,decoratedList.size());

}

Location: SetUniqueListTest.java

Content: 

@SuppressWarnings("unchecked") public void testCollections307(){

  List<E> list=new ArrayList<>();

  List<E> uniqueList=SetUniqueList.setUniqueList(list);

  final String hello="Hello";

  final String world="World";

  uniqueList.add((E)hello);

  uniqueList.add((E)world);

  List<E> subList=list.subList(0,0);

  List<E> subUniqueList=uniqueList.subList(0,0);

  assertFalse(subList.contains(world));

  assertFalse(subUniqueList.contains(world));

  List<E> worldList=new ArrayList<>();

  worldList.add((E)world);

  assertFalse(subList.contains("World"));

  assertFalse(subUniqueList.contains("World"));

  list=new ArrayList<>();

  uniqueList=new SetUniqueList307(list,new TreeSet<E>());

  uniqueList.add((E)hello);

  uniqueList.add((E)world);

  subList=list.subList(0,0);

  subUniqueList=uniqueList.subList(0,0);

  assertFalse(subList.contains(world));

  assertFalse(subUniqueList.contains(world));

  worldList=new ArrayList<>();

  worldList.add((E)world);

  assertFalse(subList.contains("World"));

  assertFalse(subUniqueList.contains("World"));

}

Location: SetUniqueListTest.java

Content: 

public void testCollections701(){

  final SetUniqueList<Object> uniqueList=new SetUniqueList<>(new ArrayList<>(),new HashSet<>());

  final Integer obj1=Integer.valueOf(1);

  final Integer obj2=Integer.valueOf(2);

  uniqueList.add(obj1);

  uniqueList.add(obj2);

  assertEquals(2,uniqueList.size());

  uniqueList.add(uniqueList);

  assertEquals(3,uniqueList.size());

  final List<Object> list=new LinkedList<>();

  final SetUniqueList<Object> decoratedList=SetUniqueList.setUniqueList(list);

  final String s1="Apple";

  final String s2="Lemon";

  final String s3="Orange";

  final String s4="Strawberry";

  decoratedList.add(s1);

  decoratedList.add(s2);

  decoratedList.add(s3);

  assertEquals(3,decoratedList.size());

  decoratedList.set(1,s4);

  assertEquals(3,decoratedList.size());

  decoratedList.add(decoratedList);

  assertEquals(4,decoratedList.size());

}

Location: SetUniqueListTest.java

Content: 

@SuppressWarnings("unchecked") public void testCreateSetBasedOnList(){

  final List<String> list=new ArrayList<>();

  list.add("One");

  list.add("Two");

  @SuppressWarnings("rawtypes") final SetUniqueList setUniqueList=(SetUniqueList)makeObject();

  final Set<String> setBasedOnList=setUniqueList.createSetBasedOnList(new HashSet<>(),list);

  assertEquals(list.size(),setBasedOnList.size());

  list.forEach(item -> assertTrue(setBasedOnList.contains(item)));

  final Set<String> setBasedOnList1=setUniqueList.createSetBasedOnList(new TreeSet<>(),list);

  assertEquals(list.size(),setBasedOnList1.size());

  list.forEach(item -> assertTrue(setBasedOnList1.contains(item)));

  final Set<String> setBasedOnList2=setUniqueList.createSetBasedOnList(UnmodifiableSet.unmodifiableSet(new HashSet<>()),list);

  assertEquals(list.size(),setBasedOnList2.size());

  list.forEach(item -> assertTrue(setBasedOnList2.contains(item)));

  assertThrows(NullPointerException.class,() -> setUniqueList.createSetBasedOnList(null,list));

  assertThrows(NullPointerException.class,() -> setUniqueList.createSetBasedOnList(new HashSet<>(),null));

}

Location: SetUniqueListTest.java

Content: 

public void testFactory(){

  final Integer[] array=new Integer[]{Integer.valueOf(1),Integer.valueOf(2),Integer.valueOf(1)};

  final ArrayList<Integer> list=new ArrayList<>(Arrays.asList(array));

  final SetUniqueList<Integer> lset=SetUniqueList.setUniqueList(list);

  assertEquals("Duplicate element was added.",2,lset.size());

  assertEquals(Integer.valueOf(1),lset.get(0));

  assertEquals(Integer.valueOf(2),lset.get(1));

  assertEquals(Integer.valueOf(1),list.get(0));

  assertEquals(Integer.valueOf(2),list.get(1));

}

Location: SetUniqueListTest.java

Content: 

public void testIntCollectionAddAll(){

  final List<Integer> list=new SetUniqueList<>(new ArrayList<Integer>(),new HashSet<Integer>());

  final Integer existingElement=Integer.valueOf(1);

  list.add(existingElement);

  final Integer firstNewElement=Integer.valueOf(2);

  final Integer secondNewElement=Integer.valueOf(3);

  Collection<Integer> collection=Arrays.asList(firstNewElement,secondNewElement);

  list.addAll(0,collection);

  assertEquals("Unique elements should be added.",3,list.size());

  assertEquals("First new element should be at index 0",firstNewElement,list.get(0));

  assertEquals("Second new element should be at index 1",secondNewElement,list.get(1));

  assertEquals("Existing element should shift to index 2",existingElement,list.get(2));

  final Integer thirdNewElement=Integer.valueOf(4);

  collection=Arrays.asList(existingElement,thirdNewElement);

  list.addAll(0,collection);

  assertEquals("Duplicate element should not be added, unique element should be added.",4,list.size());

  assertEquals("Third new element should be at index 0",thirdNewElement,list.get(0));

}

Location: SetUniqueListTest.java

Content: 

@SuppressWarnings("unchecked") public void testListIterator(){

  final SetUniqueList<E> lset=new SetUniqueList<>(new ArrayList<E>(),new HashSet<E>());

  final E obj1=(E)Integer.valueOf(1);

  final E obj2=(E)Integer.valueOf(2);

  lset.add(obj1);

  lset.add(obj2);

  for (final ListIterator<E> it=lset.listIterator(); it.hasNext(); ) {

    it.next();

    if (!it.hasNext()) {

      it.add(obj1);

      break;

    }

  }

  assertEquals("Duplicate element was added",2,lset.size());

}

Location: SetUniqueListTest.java

Content: 

@SuppressWarnings("unchecked") public void testRetainAllWithInitialList(){

  final List<E> list=new ArrayList<>(10);

  for (int i=0; i < 5; ++i) {

    list.add((E)Integer.valueOf(i));

  }

  final SetUniqueList<E> uniqueList=SetUniqueList.setUniqueList(list);

  for (int i=5; i < 10; ++i) {

    uniqueList.add((E)Integer.valueOf(i));

  }

  final Collection<E> retained=new ArrayList<>(5);

  for (int i=0; i < 5; ++i) {

    retained.add((E)Integer.valueOf(i * 2));

  }

  assertTrue(uniqueList.retainAll(retained));

  assertEquals(5,uniqueList.size());

  assertTrue(uniqueList.contains(Integer.valueOf(0)));

  assertTrue(uniqueList.contains(Integer.valueOf(2)));

  assertTrue(uniqueList.contains(Integer.valueOf(4)));

  assertTrue(uniqueList.contains(Integer.valueOf(6)));

  assertTrue(uniqueList.contains(Integer.valueOf(8)));

}

Location: SetUniqueListTest.java

Content: 

public void testSetCollections444(){

  final SetUniqueList<Integer> lset=new SetUniqueList<>(new ArrayList<Integer>(),new HashSet<Integer>());

  final Integer obj1=Integer.valueOf(1);

  final Integer obj2=Integer.valueOf(2);

  lset.add(obj1);

  lset.add(obj2);

  lset.set(0,obj1);

  assertEquals(2,lset.size());

  assertSame(obj1,lset.get(0));

  assertSame(obj2,lset.get(1));

  assertTrue(lset.contains(obj1));

  assertTrue(lset.contains(obj2));

}

Location: SetUniqueListTest.java

Content: 

@SuppressWarnings("unchecked") public void testSetDownwardsInList(){

  final ArrayList<E> l=new ArrayList<>();

  final HashSet<E> s=new HashSet<>();

  final SetUniqueList<E> ul=new SetUniqueList<>(l,s);

  final E a=(E)new Object();

  final E b=(E)new Object();

  ul.add(a);

  ul.add(b);

  assertEquals(a,l.get(0));

  assertEquals(b,l.get(1));

  assertTrue(s.contains(a));

  assertTrue(s.contains(b));

  assertEquals(a,ul.set(0,b));

  assertEquals(1,s.size());

  assertEquals(1,l.size());

  assertEquals(b,l.get(0));

  assertTrue(s.contains(b));

  assertFalse(s.contains(a));

}

Location: SetUniqueListTest.java

Content: 

@SuppressWarnings("unchecked") public void testSetInBiggerList(){

  final ArrayList<E> l=new ArrayList<>();

  final HashSet<E> s=new HashSet<>();

  final SetUniqueList<E> ul=new SetUniqueList<>(l,s);

  final E a=(E)new Object();

  final E b=(E)new Object();

  final E c=(E)new Object();

  ul.add(a);

  ul.add(b);

  ul.add(c);

  assertEquals(a,l.get(0));

  assertEquals(b,l.get(1));

  assertEquals(c,l.get(2));

  assertTrue(s.contains(a));

  assertTrue(s.contains(b));

  assertTrue(s.contains(c));

  assertEquals(a,ul.set(0,b));

  assertEquals(2,s.size());

  assertEquals(2,l.size());

  assertEquals(b,l.get(0));

  assertEquals(c,l.get(1));

  assertFalse(s.contains(a));

  assertTrue(s.contains(b));

  assertTrue(s.contains(c));

}

Location: SetUniqueListTest.java

Content: 

@SuppressWarnings("unchecked") public void testSetUpwardsInList(){

  final ArrayList<E> l=new ArrayList<>();

  final HashSet<E> s=new HashSet<>();

  final SetUniqueList<E> ul=new SetUniqueList<>(l,s);

  final E a=(E)"A";

  final E b=(E)"B";

  final E c=(E)"C";

  ul.add(a);

  ul.add(b);

  ul.add(c);

  assertEquals(a,l.get(0));

  assertEquals(b,l.get(1));

  assertEquals(c,l.get(2));

  assertTrue(s.contains(a));

  assertTrue(s.contains(b));

  assertTrue(s.contains(c));

  assertEquals(b,ul.set(1,a));

  assertEquals(2,s.size());

  assertEquals(2,l.size());

  assertEquals(a,l.get(0));

  assertEquals(c,l.get(1));

  assertTrue(s.contains(a));

  assertFalse(s.contains(b));

  assertTrue(s.contains(c));

}

Location: SetUniqueListTest.java

Content: 

public void testSubListIsUnmodifiable(){

  resetFull();

  final List<E> subList=getCollection().subList(1,3);

  assertEquals(2,subList.size());

  assertThrows(UnsupportedOperationException.class,() -> subList.remove(0));

}

Location: SetUniqueListTest.java

Content: 

@SuppressWarnings("unchecked") public void testUniqueListDoubleInsert(){

  final List<E> l=SetUniqueList.setUniqueList(new LinkedList<E>());

  l.add((E)new Object());

  l.add((E)new Object());

  l.set(0,l.get(1));

  assertEquals(1,l.size());

  l.add(1,l.get(0));

  assertEquals(1,l.size());

}

Location: SetUniqueListTest.java

Content: 

@SuppressWarnings("unchecked") public void testUniqueListReInsert(){

  final List<E> l=SetUniqueList.setUniqueList(new LinkedList<E>());

  l.add((E)new Object());

  l.add((E)new Object());

  final E a=l.get(0);

  l.set(0,l.get(1));

  assertEquals(1,l.size());

  l.add(1,a);

  assertEquals(2,l.size());

}

