Location: PredicateUtilsTest.java

Content: 

@SuppressWarnings("unchecked") @Test public void testAllPredicate(){

  assertPredicateTrue(AllPredicate.allPredicate(),null);

  assertTrue(AllPredicate.allPredicate(truePredicate(),truePredicate(),truePredicate()).evaluate(null));

  assertFalse(AllPredicate.allPredicate(truePredicate(),FalsePredicate.falsePredicate(),truePredicate()).evaluate(null));

  assertFalse(AllPredicate.allPredicate(FalsePredicate.falsePredicate(),FalsePredicate.falsePredicate(),truePredicate()).evaluate(null));

  assertFalse(AllPredicate.allPredicate(FalsePredicate.falsePredicate(),FalsePredicate.falsePredicate(),FalsePredicate.falsePredicate()).evaluate(null));

  final Collection<Predicate<Object>> coll=new ArrayList<>();

  coll.add(TruePredicate.truePredicate());

  coll.add(TruePredicate.truePredicate());

  coll.add(TruePredicate.truePredicate());

  assertTrue(AllPredicate.allPredicate(coll).evaluate(null));

  coll.clear();

  coll.add(TruePredicate.truePredicate());

  coll.add(FalsePredicate.falsePredicate());

  coll.add(TruePredicate.truePredicate());

  assertFalse(AllPredicate.allPredicate(coll).evaluate(null));

  coll.clear();

  coll.add(FalsePredicate.falsePredicate());

  coll.add(FalsePredicate.falsePredicate());

  coll.add(TruePredicate.truePredicate());

  assertFalse(AllPredicate.allPredicate(coll).evaluate(null));

  coll.clear();

  coll.add(FalsePredicate.falsePredicate());

  coll.add(FalsePredicate.falsePredicate());

  coll.add(FalsePredicate.falsePredicate());

  assertFalse(AllPredicate.allPredicate(coll).evaluate(null));

  coll.clear();

  coll.add(FalsePredicate.falsePredicate());

  assertPredicateFalse(AllPredicate.allPredicate(coll),null);

  coll.clear();

  coll.add(TruePredicate.truePredicate());

  assertPredicateTrue(AllPredicate.allPredicate(coll),null);

  coll.clear();

  assertPredicateTrue(AllPredicate.allPredicate(coll),null);

}

Location: PredicateUtilsTest.java

Content: 

@Test public void testAllPredicateEx1(){

  assertThrows(NullPointerException.class,() -> AllPredicate.allPredicate((Predicate<Object>[])null));

}

Location: PredicateUtilsTest.java

Content: 

@SuppressWarnings("unchecked") @Test public void testAllPredicateEx2(){

  assertThrows(NullPointerException.class,() -> AllPredicate.<Object>allPredicate(new Predicate[]{null}));

}

Location: PredicateUtilsTest.java

Content: 

@Test public void testAllPredicateEx3(){

  assertThrows(NullPointerException.class,() -> AllPredicate.allPredicate(null,null));

}

Location: PredicateUtilsTest.java

Content: 

@Test public void testAllPredicateEx4(){

  assertThrows(NullPointerException.class,() -> AllPredicate.allPredicate((Collection<Predicate<Object>>)null));

}

Location: PredicateUtilsTest.java

Content: 

@Test public void testAllPredicateEx5(){

  AllPredicate.allPredicate(Collections.emptyList());

}

Location: PredicateUtilsTest.java

Content: 

@Test public void testAllPredicateEx6(){

  final Collection<Predicate<Object>> coll=new ArrayList<>();

  coll.add(null);

  coll.add(null);

  assertThrows(NullPointerException.class,() -> AllPredicate.allPredicate(coll));

}

Location: PredicateUtilsTest.java

Content: 

@Test public void testAndPredicate(){

  assertTrue(PredicateUtils.andPredicate(truePredicate(),truePredicate()).evaluate(null));

  assertFalse(PredicateUtils.andPredicate(truePredicate(),FalsePredicate.falsePredicate()).evaluate(null));

  assertFalse(PredicateUtils.andPredicate(FalsePredicate.falsePredicate(),truePredicate()).evaluate(null));

  assertFalse(PredicateUtils.andPredicate(FalsePredicate.falsePredicate(),FalsePredicate.falsePredicate()).evaluate(null));

}

Location: PredicateUtilsTest.java

Content: 

@Test public void testAndPredicateEx(){

  assertThrows(NullPointerException.class,() -> PredicateUtils.andPredicate(null,null));

}

Location: PredicateUtilsTest.java

Content: 

@SuppressWarnings("unchecked") @Test public void testAnyPredicate(){

  assertPredicateFalse(PredicateUtils.anyPredicate(),null);

  assertTrue(PredicateUtils.anyPredicate(truePredicate(),truePredicate(),truePredicate()).evaluate(null));

  assertTrue(PredicateUtils.anyPredicate(truePredicate(),FalsePredicate.falsePredicate(),truePredicate()).evaluate(null));

  assertTrue(PredicateUtils.anyPredicate(FalsePredicate.falsePredicate(),FalsePredicate.falsePredicate(),truePredicate()).evaluate(null));

  assertFalse(PredicateUtils.anyPredicate(FalsePredicate.falsePredicate(),FalsePredicate.falsePredicate(),FalsePredicate.falsePredicate()).evaluate(null));

  final Collection<Predicate<Object>> coll=new ArrayList<>();

  coll.add(TruePredicate.truePredicate());

  coll.add(TruePredicate.truePredicate());

  coll.add(TruePredicate.truePredicate());

  assertTrue(PredicateUtils.anyPredicate(coll).evaluate(null));

  coll.clear();

  coll.add(TruePredicate.truePredicate());

  coll.add(FalsePredicate.falsePredicate());

  coll.add(TruePredicate.truePredicate());

  assertTrue(PredicateUtils.anyPredicate(coll).evaluate(null));

  coll.clear();

  coll.add(FalsePredicate.falsePredicate());

  coll.add(FalsePredicate.falsePredicate());

  coll.add(TruePredicate.truePredicate());

  assertTrue(PredicateUtils.anyPredicate(coll).evaluate(null));

  coll.clear();

  coll.add(FalsePredicate.falsePredicate());

  coll.add(FalsePredicate.falsePredicate());

  coll.add(FalsePredicate.falsePredicate());

  assertFalse(PredicateUtils.anyPredicate(coll).evaluate(null));

  coll.clear();

  coll.add(FalsePredicate.falsePredicate());

  assertPredicateFalse(PredicateUtils.anyPredicate(coll),null);

  coll.clear();

  coll.add(TruePredicate.truePredicate());

  assertPredicateTrue(PredicateUtils.anyPredicate(coll),null);

  coll.clear();

  assertPredicateFalse(PredicateUtils.anyPredicate(coll),null);

}

Location: PredicateUtilsTest.java

Content: 

@Test public void testAnyPredicateEx1(){

  assertThrows(NullPointerException.class,() -> PredicateUtils.anyPredicate((Predicate<Object>[])null));

}

Location: PredicateUtilsTest.java

Content: 

@SuppressWarnings("unchecked") @Test public void testAnyPredicateEx2(){

  assertThrows(NullPointerException.class,() -> PredicateUtils.anyPredicate(new Predicate[]{null}));

}

Location: PredicateUtilsTest.java

Content: 

@Test public void testAnyPredicateEx3(){

  assertThrows(NullPointerException.class,() -> PredicateUtils.anyPredicate(null,null));

}

Location: PredicateUtilsTest.java

Content: 

@Test public void testAnyPredicateEx4(){

  assertThrows(NullPointerException.class,() -> PredicateUtils.anyPredicate((Collection<Predicate<Object>>)null));

}

Location: PredicateUtilsTest.java

Content: 

@Test public void testAnyPredicateEx5(){

  PredicateUtils.anyPredicate(Collections.emptyList());

}

Location: PredicateUtilsTest.java

Content: 

@Test public void testAnyPredicateEx6(){

  final Collection<Predicate<Object>> coll=new ArrayList<>();

  coll.add(null);

  coll.add(null);

  assertThrows(NullPointerException.class,() -> PredicateUtils.anyPredicate(coll));

}

Location: PredicateUtilsTest.java

Content: 

@Test public void testAsPredicateTransformer(){

  assertFalse(PredicateUtils.asPredicate(TransformerUtils.nopTransformer()).evaluate(false));

  assertTrue(PredicateUtils.asPredicate(TransformerUtils.nopTransformer()).evaluate(true));

}

Location: PredicateUtilsTest.java

Content: 

@Test public void testAsPredicateTransformerEx1(){

  assertThrows(NullPointerException.class,() -> PredicateUtils.asPredicate(null));

}

Location: PredicateUtilsTest.java

Content: 

@Test public void testAsPredicateTransformerEx2(){

  assertThrows(FunctorException.class,() -> PredicateUtils.asPredicate(TransformerUtils.nopTransformer()).evaluate(null));

}

Location: PredicateUtilsTest.java

Content: 

@Test public void testEitherPredicate(){

  assertFalse(PredicateUtils.eitherPredicate(truePredicate(),truePredicate()).evaluate(null));

  assertTrue(PredicateUtils.eitherPredicate(truePredicate(),FalsePredicate.falsePredicate()).evaluate(null));

  assertTrue(PredicateUtils.eitherPredicate(FalsePredicate.falsePredicate(),truePredicate()).evaluate(null));

  assertFalse(PredicateUtils.eitherPredicate(FalsePredicate.falsePredicate(),FalsePredicate.falsePredicate()).evaluate(null));

}

Location: PredicateUtilsTest.java

Content: 

@Test public void testEitherPredicateEx(){

  assertThrows(NullPointerException.class,() -> PredicateUtils.eitherPredicate(null,null));

}

Location: PredicateUtilsTest.java

Content: 

@Test public void testExceptionPredicate(){

  assertNotNull(PredicateUtils.exceptionPredicate());

  assertSame(PredicateUtils.exceptionPredicate(),PredicateUtils.exceptionPredicate());

  try {

    PredicateUtils.exceptionPredicate().evaluate(null);

  }

 catch (  final FunctorException ex) {

    try {

      PredicateUtils.exceptionPredicate().evaluate(cString);

    }

 catch (    final FunctorException ex2) {

      return;

    }

  }

  fail();

}

Location: PredicateUtilsTest.java

Content: 

@Test public void testIdentityPredicate(){

  assertSame(nullPredicate(),PredicateUtils.identityPredicate(null));

  assertNotNull(PredicateUtils.identityPredicate(6));

  assertFalse(PredicateUtils.identityPredicate(6).evaluate(null));

  assertFalse(PredicateUtils.<Object>identityPredicate(6).evaluate(cObject));

  assertFalse(PredicateUtils.<Object>identityPredicate(6).evaluate(cString));

  assertTrue(PredicateUtils.identityPredicate(6).evaluate(cInteger));

  assertTrue(PredicateUtils.identityPredicate(cInteger).evaluate(cInteger));

}

Location: PredicateUtilsTest.java

Content: 

@Test public void testInstanceOfPredicate(){

  assertNotNull(PredicateUtils.instanceofPredicate(String.class));

  assertFalse(PredicateUtils.instanceofPredicate(String.class).evaluate(null));

  assertFalse(PredicateUtils.instanceofPredicate(String.class).evaluate(cObject));

  assertTrue(PredicateUtils.instanceofPredicate(String.class).evaluate(cString));

  assertFalse(PredicateUtils.instanceofPredicate(String.class).evaluate(cInteger));

}

Location: PredicateUtilsTest.java

Content: 

@Test public void testInvokerPredicate(){

  final List<Object> list=new ArrayList<>();

  assertTrue(PredicateUtils.invokerPredicate("isEmpty").evaluate(list));

  list.add(new Object());

  assertFalse(PredicateUtils.invokerPredicate("isEmpty").evaluate(list));

}

Location: PredicateUtilsTest.java

Content: 

@Test public void testInvokerPredicate2(){

  final List<String> list=new ArrayList<>();

  assertFalse(PredicateUtils.invokerPredicate("contains",new Class[]{Object.class},new Object[]{cString}).evaluate(list));

  list.add(cString);

  assertTrue(PredicateUtils.invokerPredicate("contains",new Class[]{Object.class},new Object[]{cString}).evaluate(list));

}

Location: PredicateUtilsTest.java

Content: 

@Test public void testInvokerPredicate2Ex1(){

  assertThrows(NullPointerException.class,() -> PredicateUtils.invokerPredicate(null,null,null));

}

Location: PredicateUtilsTest.java

Content: 

@Test public void testInvokerPredicate2Ex2(){

  assertThrows(FunctorException.class,() -> PredicateUtils.invokerPredicate("contains",new Class[]{Object.class},new Object[]{cString}).evaluate(null));

}

Location: PredicateUtilsTest.java

Content: 

@Test public void testInvokerPredicate2Ex3(){

  assertThrows(FunctorException.class,() -> PredicateUtils.invokerPredicate("noSuchMethod",new Class[]{Object.class},new Object[]{cString}).evaluate(new Object()));

}

Location: PredicateUtilsTest.java

Content: 

@Test public void testInvokerPredicateEx1(){

  assertThrows(NullPointerException.class,() -> PredicateUtils.invokerPredicate(null));

}

Location: PredicateUtilsTest.java

Content: 

@Test public void testInvokerPredicateEx2(){

  assertThrows(FunctorException.class,() -> PredicateUtils.invokerPredicate("isEmpty").evaluate(null));

}

Location: PredicateUtilsTest.java

Content: 

@Test public void testInvokerPredicateEx3(){

  assertThrows(FunctorException.class,() -> PredicateUtils.invokerPredicate("noSuchMethod").evaluate(new Object()));

}

Location: PredicateUtilsTest.java

Content: 

@Test public void testIsNotNullPredicate(){

  assertNotNull(PredicateUtils.notNullPredicate());

  assertSame(PredicateUtils.notNullPredicate(),PredicateUtils.notNullPredicate());

  assertFalse(PredicateUtils.notNullPredicate().evaluate(null));

  assertTrue(PredicateUtils.notNullPredicate().evaluate(cObject));

  assertTrue(PredicateUtils.notNullPredicate().evaluate(cString));

  assertTrue(PredicateUtils.notNullPredicate().evaluate(cInteger));

}

Location: PredicateUtilsTest.java

Content: 

@Test public void testNeitherPredicate(){

  assertFalse(PredicateUtils.neitherPredicate(truePredicate(),truePredicate()).evaluate(null));

  assertFalse(PredicateUtils.neitherPredicate(truePredicate(),FalsePredicate.falsePredicate()).evaluate(null));

  assertFalse(PredicateUtils.neitherPredicate(FalsePredicate.falsePredicate(),truePredicate()).evaluate(null));

  assertTrue(PredicateUtils.neitherPredicate(FalsePredicate.falsePredicate(),FalsePredicate.falsePredicate()).evaluate(null));

}

Location: PredicateUtilsTest.java

Content: 

@Test public void testNeitherPredicateEx(){

  assertThrows(NullPointerException.class,() -> PredicateUtils.neitherPredicate(null,null));

}

Location: PredicateUtilsTest.java

Content: 

@SuppressWarnings("unchecked") @Test public void testNonePredicate(){

  assertPredicateTrue(PredicateUtils.nonePredicate(),null);

  assertFalse(PredicateUtils.nonePredicate(truePredicate(),truePredicate(),truePredicate()).evaluate(null));

  assertFalse(PredicateUtils.nonePredicate(truePredicate(),FalsePredicate.falsePredicate(),truePredicate()).evaluate(null));

  assertFalse(PredicateUtils.nonePredicate(FalsePredicate.falsePredicate(),FalsePredicate.falsePredicate(),truePredicate()).evaluate(null));

  assertTrue(PredicateUtils.nonePredicate(FalsePredicate.falsePredicate(),FalsePredicate.falsePredicate(),FalsePredicate.falsePredicate()).evaluate(null));

  final Collection<Predicate<Object>> coll=new ArrayList<>();

  coll.add(TruePredicate.truePredicate());

  coll.add(TruePredicate.truePredicate());

  coll.add(TruePredicate.truePredicate());

  assertFalse(PredicateUtils.nonePredicate(coll).evaluate(null));

  coll.clear();

  coll.add(TruePredicate.truePredicate());

  coll.add(FalsePredicate.falsePredicate());

  coll.add(TruePredicate.truePredicate());

  assertFalse(PredicateUtils.nonePredicate(coll).evaluate(null));

  coll.clear();

  coll.add(FalsePredicate.falsePredicate());

  coll.add(FalsePredicate.falsePredicate());

  coll.add(TruePredicate.truePredicate());

  assertFalse(PredicateUtils.nonePredicate(coll).evaluate(null));

  coll.clear();

  coll.add(FalsePredicate.falsePredicate());

  coll.add(FalsePredicate.falsePredicate());

  coll.add(FalsePredicate.falsePredicate());

  assertTrue(PredicateUtils.nonePredicate(coll).evaluate(null));

  coll.clear();

  coll.add(FalsePredicate.falsePredicate());

  assertPredicateTrue(PredicateUtils.nonePredicate(coll),null);

  coll.clear();

  coll.add(TruePredicate.truePredicate());

  assertPredicateFalse(PredicateUtils.nonePredicate(coll),null);

  coll.clear();

  assertPredicateTrue(PredicateUtils.nonePredicate(coll),null);

}

Location: PredicateUtilsTest.java

Content: 

@Test public void testNonePredicateEx1(){

  assertThrows(NullPointerException.class,() -> PredicateUtils.nonePredicate((Predicate<Object>[])null));

}

Location: PredicateUtilsTest.java

Content: 

@SuppressWarnings("unchecked") @Test public void testNonePredicateEx2(){

  assertThrows(NullPointerException.class,() -> PredicateUtils.nonePredicate(new Predicate[]{null}));

}

Location: PredicateUtilsTest.java

Content: 

@SuppressWarnings("unchecked") @Test public void testNonePredicateEx3(){

  assertThrows(NullPointerException.class,() -> PredicateUtils.nonePredicate(null,null));

}

Location: PredicateUtilsTest.java

Content: 

@Test public void testNonePredicateEx4(){

  assertThrows(NullPointerException.class,() -> PredicateUtils.nonePredicate((Collection<Predicate<Object>>)null));

}

Location: PredicateUtilsTest.java

Content: 

@Test public void testNonePredicateEx5(){

  PredicateUtils.nonePredicate(Collections.emptyList());

}

Location: PredicateUtilsTest.java

Content: 

@Test public void testNonePredicateEx6(){

  final Collection<Predicate<Object>> coll=new ArrayList<>();

  coll.add(null);

  coll.add(null);

  assertThrows(NullPointerException.class,() -> PredicateUtils.nonePredicate(coll));

}

Location: PredicateUtilsTest.java

Content: 

@Test public void testNotPredicate(){

  assertNotNull(PredicateUtils.notPredicate(TruePredicate.truePredicate()));

  assertFalse(PredicateUtils.notPredicate(truePredicate()).evaluate(null));

  assertFalse(PredicateUtils.notPredicate(truePredicate()).evaluate(cObject));

  assertFalse(PredicateUtils.notPredicate(truePredicate()).evaluate(cString));

  assertFalse(PredicateUtils.notPredicate(truePredicate()).evaluate(cInteger));

}

Location: PredicateUtilsTest.java

Content: 

@Test public void testNotPredicateEx(){

  assertThrows(NullPointerException.class,() -> PredicateUtils.notPredicate(null));

}

Location: PredicateUtilsTest.java

Content: 

@Test public void testNullIsExceptionPredicate(){

  assertTrue(PredicateUtils.nullIsExceptionPredicate(truePredicate()).evaluate(new Object()));

  assertThrows(FunctorException.class,() -> PredicateUtils.nullIsExceptionPredicate(TruePredicate.truePredicate()).evaluate(null));

}

Location: PredicateUtilsTest.java

Content: 

@Test public void testNullIsExceptionPredicateEx1(){

  assertThrows(NullPointerException.class,() -> PredicateUtils.nullIsExceptionPredicate(null));

}

Location: PredicateUtilsTest.java

Content: 

@Test public void testNullIsFalsePredicate(){

  assertFalse(PredicateUtils.nullIsFalsePredicate(truePredicate()).evaluate(null));

  assertTrue(PredicateUtils.nullIsFalsePredicate(truePredicate()).evaluate(new Object()));

  assertFalse(PredicateUtils.nullIsFalsePredicate(FalsePredicate.falsePredicate()).evaluate(new Object()));

}

Location: PredicateUtilsTest.java

Content: 

@Test public void testNullIsFalsePredicateEx1(){

  assertThrows(NullPointerException.class,() -> PredicateUtils.nullIsFalsePredicate(null));

}

Location: PredicateUtilsTest.java

Content: 

@Test public void testNullIsTruePredicate(){

  assertTrue(PredicateUtils.nullIsTruePredicate(truePredicate()).evaluate(null));

  assertTrue(PredicateUtils.nullIsTruePredicate(truePredicate()).evaluate(new Object()));

  assertFalse(PredicateUtils.nullIsTruePredicate(FalsePredicate.falsePredicate()).evaluate(new Object()));

}

Location: PredicateUtilsTest.java

Content: 

@Test public void testNullIsTruePredicateEx1(){

  assertThrows(NullPointerException.class,() -> PredicateUtils.nullIsTruePredicate(null));

}

Location: PredicateUtilsTest.java

Content: 

@SuppressWarnings("unchecked") @Test public void testOnePredicate(){

  assertPredicateFalse(PredicateUtils.onePredicate((Predicate<Object>[])new Predicate[]{}),null);

  assertFalse(PredicateUtils.onePredicate(truePredicate(),truePredicate(),truePredicate()).evaluate(null));

  assertFalse(PredicateUtils.onePredicate(truePredicate(),FalsePredicate.falsePredicate(),truePredicate()).evaluate(null));

  assertTrue(PredicateUtils.onePredicate(truePredicate(),FalsePredicate.falsePredicate(),FalsePredicate.falsePredicate()).evaluate(null));

  assertTrue(PredicateUtils.onePredicate(FalsePredicate.falsePredicate(),truePredicate(),FalsePredicate.falsePredicate()).evaluate(null));

  assertTrue(PredicateUtils.onePredicate(FalsePredicate.falsePredicate(),FalsePredicate.falsePredicate(),truePredicate()).evaluate(null));

  assertFalse(PredicateUtils.onePredicate(FalsePredicate.falsePredicate(),FalsePredicate.falsePredicate(),FalsePredicate.falsePredicate()).evaluate(null));

  final Collection<Predicate<Object>> coll=new ArrayList<>();

  coll.add(TruePredicate.truePredicate());

  coll.add(TruePredicate.truePredicate());

  coll.add(TruePredicate.truePredicate());

  assertFalse(PredicateUtils.onePredicate(coll).evaluate(null));

  coll.clear();

  coll.add(TruePredicate.truePredicate());

  coll.add(FalsePredicate.falsePredicate());

  coll.add(TruePredicate.truePredicate());

  assertFalse(PredicateUtils.onePredicate(coll).evaluate(null));

  coll.clear();

  coll.add(FalsePredicate.falsePredicate());

  coll.add(FalsePredicate.falsePredicate());

  coll.add(TruePredicate.truePredicate());

  assertTrue(PredicateUtils.onePredicate(coll).evaluate(null));

  coll.clear();

  coll.add(FalsePredicate.falsePredicate());

  coll.add(FalsePredicate.falsePredicate());

  coll.add(FalsePredicate.falsePredicate());

  assertFalse(PredicateUtils.onePredicate(coll).evaluate(null));

  coll.clear();

  coll.add(FalsePredicate.falsePredicate());

  assertPredicateFalse(PredicateUtils.onePredicate(coll),null);

  coll.clear();

  coll.add(TruePredicate.truePredicate());

  assertPredicateTrue(PredicateUtils.onePredicate(coll),null);

  coll.clear();

  assertPredicateFalse(PredicateUtils.onePredicate(coll),null);

}

Location: PredicateUtilsTest.java

Content: 

@Test public void testOnePredicateEx1(){

  assertThrows(NullPointerException.class,() -> PredicateUtils.onePredicate((Predicate<Object>[])null));

}

Location: PredicateUtilsTest.java

Content: 

@SuppressWarnings("unchecked") @Test public void testOnePredicateEx2(){

  assertThrows(NullPointerException.class,() -> PredicateUtils.onePredicate(new Predicate[]{null}));

}

Location: PredicateUtilsTest.java

Content: 

@Test public void testOnePredicateEx3(){

  assertThrows(NullPointerException.class,() -> PredicateUtils.onePredicate(null,null));

}

Location: PredicateUtilsTest.java

Content: 

@Test public void testOnePredicateEx4(){

  assertThrows(NullPointerException.class,() -> PredicateUtils.onePredicate((Collection<Predicate<Object>>)null));

}

Location: PredicateUtilsTest.java

Content: 

@SuppressWarnings("unchecked") @Test public void testOnePredicateEx5(){

  PredicateUtils.onePredicate(Collections.EMPTY_LIST);

}

Location: PredicateUtilsTest.java

Content: 

@Test public void testOnePredicateEx6(){

  assertThrows(NullPointerException.class,() -> PredicateUtils.onePredicate(Arrays.asList(null,null)));

}

Location: PredicateUtilsTest.java

Content: 

@Test public void testOrPredicate(){

  assertTrue(PredicateUtils.orPredicate(truePredicate(),truePredicate()).evaluate(null));

  assertTrue(PredicateUtils.orPredicate(truePredicate(),FalsePredicate.falsePredicate()).evaluate(null));

  assertTrue(PredicateUtils.orPredicate(FalsePredicate.falsePredicate(),truePredicate()).evaluate(null));

  assertFalse(PredicateUtils.orPredicate(FalsePredicate.falsePredicate(),FalsePredicate.falsePredicate()).evaluate(null));

}

Location: PredicateUtilsTest.java

Content: 

@Test public void testOrPredicateEx(){

  assertThrows(NullPointerException.class,() -> PredicateUtils.orPredicate(null,null));

}

Location: PredicateUtilsTest.java

Content: 

@Test public void testTransformedPredicate(){

  assertTrue(PredicateUtils.transformedPredicate(TransformerUtils.nopTransformer(),truePredicate()).evaluate(new Object()));

  final Map<Object,Object> map=new HashMap<>();

  map.put(Boolean.TRUE,"Hello");

  final Transformer<Object,Object> t=TransformerUtils.mapTransformer(map);

  final Predicate<Object> p=EqualPredicate.<Object>equalPredicate("Hello");

  assertFalse(PredicateUtils.transformedPredicate(t,p).evaluate(null));

  assertTrue(PredicateUtils.transformedPredicate(t,p).evaluate(Boolean.TRUE));

  try {

    PredicateUtils.transformedPredicate(null,null);

    fail();

  }

 catch (  final NullPointerException ex) {

  }

}

Location: PredicateUtilsTest.java

Content: 

@Test public void testUniquePredicate(){

  final Predicate<Object> p=PredicateUtils.uniquePredicate();

  assertTrue(p.evaluate(new Object()));

  assertTrue(p.evaluate(new Object()));

  assertTrue(p.evaluate(new Object()));

  assertTrue(p.evaluate(cString));

  assertFalse(p.evaluate(cString));

  assertFalse(p.evaluate(cString));

}

Location: PredicateUtilsTest.java

Content: 

@SuppressWarnings("unchecked") @Test public void testAllPredicate(){

  assertPredicateTrue(AllPredicate.allPredicate(),null);

  assertTrue(AllPredicate.allPredicate(truePredicate(),truePredicate(),truePredicate()).evaluate(null));

  assertFalse(AllPredicate.allPredicate(truePredicate(),FalsePredicate.falsePredicate(),truePredicate()).evaluate(null));

  assertFalse(AllPredicate.allPredicate(FalsePredicate.falsePredicate(),FalsePredicate.falsePredicate(),truePredicate()).evaluate(null));

  assertFalse(AllPredicate.allPredicate(FalsePredicate.falsePredicate(),FalsePredicate.falsePredicate(),FalsePredicate.falsePredicate()).evaluate(null));

  final Collection<Predicate<Object>> coll=new ArrayList<>();

  coll.add(TruePredicate.truePredicate());

  coll.add(TruePredicate.truePredicate());

  coll.add(TruePredicate.truePredicate());

  assertTrue(AllPredicate.allPredicate(coll).evaluate(null));

  coll.clear();

  coll.add(TruePredicate.truePredicate());

  coll.add(FalsePredicate.falsePredicate());

  coll.add(TruePredicate.truePredicate());

  assertFalse(AllPredicate.allPredicate(coll).evaluate(null));

  coll.clear();

  coll.add(FalsePredicate.falsePredicate());

  coll.add(FalsePredicate.falsePredicate());

  coll.add(TruePredicate.truePredicate());

  assertFalse(AllPredicate.allPredicate(coll).evaluate(null));

  coll.clear();

  coll.add(FalsePredicate.falsePredicate());

  coll.add(FalsePredicate.falsePredicate());

  coll.add(FalsePredicate.falsePredicate());

  assertFalse(AllPredicate.allPredicate(coll).evaluate(null));

  coll.clear();

  coll.add(FalsePredicate.falsePredicate());

  assertPredicateFalse(AllPredicate.allPredicate(coll),null);

  coll.clear();

  coll.add(TruePredicate.truePredicate());

  assertPredicateTrue(AllPredicate.allPredicate(coll),null);

  coll.clear();

  assertPredicateTrue(AllPredicate.allPredicate(coll),null);

}

Location: PredicateUtilsTest.java

Content: 

@Test public void testAllPredicateEx1(){

  assertThrows(NullPointerException.class,() -> AllPredicate.allPredicate((Predicate<Object>[])null));

}

Location: PredicateUtilsTest.java

Content: 

@SuppressWarnings("unchecked") @Test public void testAllPredicateEx2(){

  assertThrows(NullPointerException.class,() -> AllPredicate.<Object>allPredicate(new Predicate[]{null}));

}

Location: PredicateUtilsTest.java

Content: 

@Test public void testAllPredicateEx3(){

  assertThrows(NullPointerException.class,() -> AllPredicate.allPredicate(null,null));

}

Location: PredicateUtilsTest.java

Content: 

@Test public void testAllPredicateEx4(){

  assertThrows(NullPointerException.class,() -> AllPredicate.allPredicate((Collection<Predicate<Object>>)null));

}

Location: PredicateUtilsTest.java

Content: 

@Test public void testAllPredicateEx5(){

  AllPredicate.allPredicate(Collections.emptyList());

}

Location: PredicateUtilsTest.java

Content: 

@Test public void testAllPredicateEx6(){

  final Collection<Predicate<Object>> coll=new ArrayList<>();

  coll.add(null);

  coll.add(null);

  assertThrows(NullPointerException.class,() -> AllPredicate.allPredicate(coll));

}

Location: PredicateUtilsTest.java

Content: 

@Test public void testAndPredicate(){

  assertTrue(PredicateUtils.andPredicate(truePredicate(),truePredicate()).evaluate(null));

  assertFalse(PredicateUtils.andPredicate(truePredicate(),FalsePredicate.falsePredicate()).evaluate(null));

  assertFalse(PredicateUtils.andPredicate(FalsePredicate.falsePredicate(),truePredicate()).evaluate(null));

  assertFalse(PredicateUtils.andPredicate(FalsePredicate.falsePredicate(),FalsePredicate.falsePredicate()).evaluate(null));

}

Location: PredicateUtilsTest.java

Content: 

@Test public void testAndPredicateEx(){

  assertThrows(NullPointerException.class,() -> PredicateUtils.andPredicate(null,null));

}

Location: PredicateUtilsTest.java

Content: 

@SuppressWarnings("unchecked") @Test public void testAnyPredicate(){

  assertPredicateFalse(PredicateUtils.anyPredicate(),null);

  assertTrue(PredicateUtils.anyPredicate(truePredicate(),truePredicate(),truePredicate()).evaluate(null));

  assertTrue(PredicateUtils.anyPredicate(truePredicate(),FalsePredicate.falsePredicate(),truePredicate()).evaluate(null));

  assertTrue(PredicateUtils.anyPredicate(FalsePredicate.falsePredicate(),FalsePredicate.falsePredicate(),truePredicate()).evaluate(null));

  assertFalse(PredicateUtils.anyPredicate(FalsePredicate.falsePredicate(),FalsePredicate.falsePredicate(),FalsePredicate.falsePredicate()).evaluate(null));

  final Collection<Predicate<Object>> coll=new ArrayList<>();

  coll.add(TruePredicate.truePredicate());

  coll.add(TruePredicate.truePredicate());

  coll.add(TruePredicate.truePredicate());

  assertTrue(PredicateUtils.anyPredicate(coll).evaluate(null));

  coll.clear();

  coll.add(TruePredicate.truePredicate());

  coll.add(FalsePredicate.falsePredicate());

  coll.add(TruePredicate.truePredicate());

  assertTrue(PredicateUtils.anyPredicate(coll).evaluate(null));

  coll.clear();

  coll.add(FalsePredicate.falsePredicate());

  coll.add(FalsePredicate.falsePredicate());

  coll.add(TruePredicate.truePredicate());

  assertTrue(PredicateUtils.anyPredicate(coll).evaluate(null));

  coll.clear();

  coll.add(FalsePredicate.falsePredicate());

  coll.add(FalsePredicate.falsePredicate());

  coll.add(FalsePredicate.falsePredicate());

  assertFalse(PredicateUtils.anyPredicate(coll).evaluate(null));

  coll.clear();

  coll.add(FalsePredicate.falsePredicate());

  assertPredicateFalse(PredicateUtils.anyPredicate(coll),null);

  coll.clear();

  coll.add(TruePredicate.truePredicate());

  assertPredicateTrue(PredicateUtils.anyPredicate(coll),null);

  coll.clear();

  assertPredicateFalse(PredicateUtils.anyPredicate(coll),null);

}

Location: PredicateUtilsTest.java

Content: 

@Test public void testAnyPredicateEx1(){

  assertThrows(NullPointerException.class,() -> PredicateUtils.anyPredicate((Predicate<Object>[])null));

}

Location: PredicateUtilsTest.java

Content: 

@SuppressWarnings("unchecked") @Test public void testAnyPredicateEx2(){

  assertThrows(NullPointerException.class,() -> PredicateUtils.anyPredicate(new Predicate[]{null}));

}

Location: PredicateUtilsTest.java

Content: 

@Test public void testAnyPredicateEx3(){

  assertThrows(NullPointerException.class,() -> PredicateUtils.anyPredicate(null,null));

}

Location: PredicateUtilsTest.java

Content: 

@Test public void testAnyPredicateEx4(){

  assertThrows(NullPointerException.class,() -> PredicateUtils.anyPredicate((Collection<Predicate<Object>>)null));

}

Location: PredicateUtilsTest.java

Content: 

@Test public void testAnyPredicateEx5(){

  PredicateUtils.anyPredicate(Collections.emptyList());

}

Location: PredicateUtilsTest.java

Content: 

@Test public void testAnyPredicateEx6(){

  final Collection<Predicate<Object>> coll=new ArrayList<>();

  coll.add(null);

  coll.add(null);

  assertThrows(NullPointerException.class,() -> PredicateUtils.anyPredicate(coll));

}

Location: PredicateUtilsTest.java

Content: 

@Test public void testAsPredicateTransformer(){

  assertFalse(PredicateUtils.asPredicate(TransformerUtils.nopTransformer()).evaluate(false));

  assertTrue(PredicateUtils.asPredicate(TransformerUtils.nopTransformer()).evaluate(true));

}

Location: PredicateUtilsTest.java

Content: 

@Test public void testAsPredicateTransformerEx1(){

  assertThrows(NullPointerException.class,() -> PredicateUtils.asPredicate(null));

}

Location: PredicateUtilsTest.java

Content: 

@Test public void testAsPredicateTransformerEx2(){

  assertThrows(FunctorException.class,() -> PredicateUtils.asPredicate(TransformerUtils.nopTransformer()).evaluate(null));

}

Location: PredicateUtilsTest.java

Content: 

@Test public void testEitherPredicate(){

  assertFalse(PredicateUtils.eitherPredicate(truePredicate(),truePredicate()).evaluate(null));

  assertTrue(PredicateUtils.eitherPredicate(truePredicate(),FalsePredicate.falsePredicate()).evaluate(null));

  assertTrue(PredicateUtils.eitherPredicate(FalsePredicate.falsePredicate(),truePredicate()).evaluate(null));

  assertFalse(PredicateUtils.eitherPredicate(FalsePredicate.falsePredicate(),FalsePredicate.falsePredicate()).evaluate(null));

}

Location: PredicateUtilsTest.java

Content: 

@Test public void testEitherPredicateEx(){

  assertThrows(NullPointerException.class,() -> PredicateUtils.eitherPredicate(null,null));

}

Location: PredicateUtilsTest.java

Content: 

@Test public void testExceptionPredicate(){

  assertNotNull(PredicateUtils.exceptionPredicate());

  assertSame(PredicateUtils.exceptionPredicate(),PredicateUtils.exceptionPredicate());

  try {

    PredicateUtils.exceptionPredicate().evaluate(null);

  }

 catch (  final FunctorException ex) {

    try {

      PredicateUtils.exceptionPredicate().evaluate(cString);

    }

 catch (    final FunctorException ex2) {

      return;

    }

  }

  fail();

}

Location: PredicateUtilsTest.java

Content: 

@Test public void testIdentityPredicate(){

  assertSame(nullPredicate(),PredicateUtils.identityPredicate(null));

  assertNotNull(PredicateUtils.identityPredicate(6));

  assertFalse(PredicateUtils.identityPredicate(6).evaluate(null));

  assertFalse(PredicateUtils.<Object>identityPredicate(6).evaluate(cObject));

  assertFalse(PredicateUtils.<Object>identityPredicate(6).evaluate(cString));

  assertTrue(PredicateUtils.identityPredicate(6).evaluate(cInteger));

  assertTrue(PredicateUtils.identityPredicate(cInteger).evaluate(cInteger));

}

Location: PredicateUtilsTest.java

Content: 

@Test public void testInstanceOfPredicate(){

  assertNotNull(PredicateUtils.instanceofPredicate(String.class));

  assertFalse(PredicateUtils.instanceofPredicate(String.class).evaluate(null));

  assertFalse(PredicateUtils.instanceofPredicate(String.class).evaluate(cObject));

  assertTrue(PredicateUtils.instanceofPredicate(String.class).evaluate(cString));

  assertFalse(PredicateUtils.instanceofPredicate(String.class).evaluate(cInteger));

}

Location: PredicateUtilsTest.java

Content: 

@Test public void testInvokerPredicate(){

  final List<Object> list=new ArrayList<>();

  assertTrue(PredicateUtils.invokerPredicate("isEmpty").evaluate(list));

  list.add(new Object());

  assertFalse(PredicateUtils.invokerPredicate("isEmpty").evaluate(list));

}

Location: PredicateUtilsTest.java

Content: 

@Test public void testInvokerPredicate2(){

  final List<String> list=new ArrayList<>();

  assertFalse(PredicateUtils.invokerPredicate("contains",new Class[]{Object.class},new Object[]{cString}).evaluate(list));

  list.add(cString);

  assertTrue(PredicateUtils.invokerPredicate("contains",new Class[]{Object.class},new Object[]{cString}).evaluate(list));

}

Location: PredicateUtilsTest.java

Content: 

@Test public void testInvokerPredicate2Ex1(){

  assertThrows(NullPointerException.class,() -> PredicateUtils.invokerPredicate(null,null,null));

}

Location: PredicateUtilsTest.java

Content: 

@Test public void testInvokerPredicate2Ex2(){

  assertThrows(FunctorException.class,() -> PredicateUtils.invokerPredicate("contains",new Class[]{Object.class},new Object[]{cString}).evaluate(null));

}

Location: PredicateUtilsTest.java

Content: 

@Test public void testInvokerPredicate2Ex3(){

  assertThrows(FunctorException.class,() -> PredicateUtils.invokerPredicate("noSuchMethod",new Class[]{Object.class},new Object[]{cString}).evaluate(new Object()));

}

Location: PredicateUtilsTest.java

Content: 

@Test public void testInvokerPredicateEx1(){

  assertThrows(NullPointerException.class,() -> PredicateUtils.invokerPredicate(null));

}

Location: PredicateUtilsTest.java

Content: 

@Test public void testInvokerPredicateEx2(){

  assertThrows(FunctorException.class,() -> PredicateUtils.invokerPredicate("isEmpty").evaluate(null));

}

Location: PredicateUtilsTest.java

Content: 

@Test public void testInvokerPredicateEx3(){

  assertThrows(FunctorException.class,() -> PredicateUtils.invokerPredicate("noSuchMethod").evaluate(new Object()));

}

Location: PredicateUtilsTest.java

Content: 

@Test public void testIsNotNullPredicate(){

  assertNotNull(PredicateUtils.notNullPredicate());

  assertSame(PredicateUtils.notNullPredicate(),PredicateUtils.notNullPredicate());

  assertFalse(PredicateUtils.notNullPredicate().evaluate(null));

  assertTrue(PredicateUtils.notNullPredicate().evaluate(cObject));

  assertTrue(PredicateUtils.notNullPredicate().evaluate(cString));

  assertTrue(PredicateUtils.notNullPredicate().evaluate(cInteger));

}

Location: PredicateUtilsTest.java

Content: 

@Test public void testNeitherPredicate(){

  assertFalse(PredicateUtils.neitherPredicate(truePredicate(),truePredicate()).evaluate(null));

  assertFalse(PredicateUtils.neitherPredicate(truePredicate(),FalsePredicate.falsePredicate()).evaluate(null));

  assertFalse(PredicateUtils.neitherPredicate(FalsePredicate.falsePredicate(),truePredicate()).evaluate(null));

  assertTrue(PredicateUtils.neitherPredicate(FalsePredicate.falsePredicate(),FalsePredicate.falsePredicate()).evaluate(null));

}

Location: PredicateUtilsTest.java

Content: 

@Test public void testNeitherPredicateEx(){

  assertThrows(NullPointerException.class,() -> PredicateUtils.neitherPredicate(null,null));

}

Location: PredicateUtilsTest.java

Content: 

@SuppressWarnings("unchecked") @Test public void testNonePredicate(){

  assertPredicateTrue(PredicateUtils.nonePredicate(),null);

  assertFalse(PredicateUtils.nonePredicate(truePredicate(),truePredicate(),truePredicate()).evaluate(null));

  assertFalse(PredicateUtils.nonePredicate(truePredicate(),FalsePredicate.falsePredicate(),truePredicate()).evaluate(null));

  assertFalse(PredicateUtils.nonePredicate(FalsePredicate.falsePredicate(),FalsePredicate.falsePredicate(),truePredicate()).evaluate(null));

  assertTrue(PredicateUtils.nonePredicate(FalsePredicate.falsePredicate(),FalsePredicate.falsePredicate(),FalsePredicate.falsePredicate()).evaluate(null));

  final Collection<Predicate<Object>> coll=new ArrayList<>();

  coll.add(TruePredicate.truePredicate());

  coll.add(TruePredicate.truePredicate());

  coll.add(TruePredicate.truePredicate());

  assertFalse(PredicateUtils.nonePredicate(coll).evaluate(null));

  coll.clear();

  coll.add(TruePredicate.truePredicate());

  coll.add(FalsePredicate.falsePredicate());

  coll.add(TruePredicate.truePredicate());

  assertFalse(PredicateUtils.nonePredicate(coll).evaluate(null));

  coll.clear();

  coll.add(FalsePredicate.falsePredicate());

  coll.add(FalsePredicate.falsePredicate());

  coll.add(TruePredicate.truePredicate());

  assertFalse(PredicateUtils.nonePredicate(coll).evaluate(null));

  coll.clear();

  coll.add(FalsePredicate.falsePredicate());

  coll.add(FalsePredicate.falsePredicate());

  coll.add(FalsePredicate.falsePredicate());

  assertTrue(PredicateUtils.nonePredicate(coll).evaluate(null));

  coll.clear();

  coll.add(FalsePredicate.falsePredicate());

  assertPredicateTrue(PredicateUtils.nonePredicate(coll),null);

  coll.clear();

  coll.add(TruePredicate.truePredicate());

  assertPredicateFalse(PredicateUtils.nonePredicate(coll),null);

  coll.clear();

  assertPredicateTrue(PredicateUtils.nonePredicate(coll),null);

}

Location: PredicateUtilsTest.java

Content: 

@Test public void testNonePredicateEx1(){

  assertThrows(NullPointerException.class,() -> PredicateUtils.nonePredicate((Predicate<Object>[])null));

}

Location: PredicateUtilsTest.java

Content: 

@SuppressWarnings("unchecked") @Test public void testNonePredicateEx2(){

  assertThrows(NullPointerException.class,() -> PredicateUtils.nonePredicate(new Predicate[]{null}));

}

Location: PredicateUtilsTest.java

Content: 

@SuppressWarnings("unchecked") @Test public void testNonePredicateEx3(){

  assertThrows(NullPointerException.class,() -> PredicateUtils.nonePredicate(null,null));

}

Location: PredicateUtilsTest.java

Content: 

@Test public void testNonePredicateEx4(){

  assertThrows(NullPointerException.class,() -> PredicateUtils.nonePredicate((Collection<Predicate<Object>>)null));

}

Location: PredicateUtilsTest.java

Content: 

@Test public void testNonePredicateEx5(){

  PredicateUtils.nonePredicate(Collections.emptyList());

}

Location: PredicateUtilsTest.java

Content: 

@Test public void testNonePredicateEx6(){

  final Collection<Predicate<Object>> coll=new ArrayList<>();

  coll.add(null);

  coll.add(null);

  assertThrows(NullPointerException.class,() -> PredicateUtils.nonePredicate(coll));

}

Location: PredicateUtilsTest.java

Content: 

@Test public void testNotPredicate(){

  assertNotNull(PredicateUtils.notPredicate(TruePredicate.truePredicate()));

  assertFalse(PredicateUtils.notPredicate(truePredicate()).evaluate(null));

  assertFalse(PredicateUtils.notPredicate(truePredicate()).evaluate(cObject));

  assertFalse(PredicateUtils.notPredicate(truePredicate()).evaluate(cString));

  assertFalse(PredicateUtils.notPredicate(truePredicate()).evaluate(cInteger));

}

Location: PredicateUtilsTest.java

Content: 

@Test public void testNotPredicateEx(){

  assertThrows(NullPointerException.class,() -> PredicateUtils.notPredicate(null));

}

Location: PredicateUtilsTest.java

Content: 

@Test public void testNullIsExceptionPredicate(){

  assertTrue(PredicateUtils.nullIsExceptionPredicate(truePredicate()).evaluate(new Object()));

  assertThrows(FunctorException.class,() -> PredicateUtils.nullIsExceptionPredicate(TruePredicate.truePredicate()).evaluate(null));

}

Location: PredicateUtilsTest.java

Content: 

@Test public void testNullIsExceptionPredicateEx1(){

  assertThrows(NullPointerException.class,() -> PredicateUtils.nullIsExceptionPredicate(null));

}

Location: PredicateUtilsTest.java

Content: 

@Test public void testNullIsFalsePredicate(){

  assertFalse(PredicateUtils.nullIsFalsePredicate(truePredicate()).evaluate(null));

  assertTrue(PredicateUtils.nullIsFalsePredicate(truePredicate()).evaluate(new Object()));

  assertFalse(PredicateUtils.nullIsFalsePredicate(FalsePredicate.falsePredicate()).evaluate(new Object()));

}

Location: PredicateUtilsTest.java

Content: 

@Test public void testNullIsFalsePredicateEx1(){

  assertThrows(NullPointerException.class,() -> PredicateUtils.nullIsFalsePredicate(null));

}

Location: PredicateUtilsTest.java

Content: 

@Test public void testNullIsTruePredicate(){

  assertTrue(PredicateUtils.nullIsTruePredicate(truePredicate()).evaluate(null));

  assertTrue(PredicateUtils.nullIsTruePredicate(truePredicate()).evaluate(new Object()));

  assertFalse(PredicateUtils.nullIsTruePredicate(FalsePredicate.falsePredicate()).evaluate(new Object()));

}

Location: PredicateUtilsTest.java

Content: 

@Test public void testNullIsTruePredicateEx1(){

  assertThrows(NullPointerException.class,() -> PredicateUtils.nullIsTruePredicate(null));

}

Location: PredicateUtilsTest.java

Content: 

@SuppressWarnings("unchecked") @Test public void testOnePredicate(){

  assertPredicateFalse(PredicateUtils.onePredicate((Predicate<Object>[])new Predicate[]{}),null);

  assertFalse(PredicateUtils.onePredicate(truePredicate(),truePredicate(),truePredicate()).evaluate(null));

  assertFalse(PredicateUtils.onePredicate(truePredicate(),FalsePredicate.falsePredicate(),truePredicate()).evaluate(null));

  assertTrue(PredicateUtils.onePredicate(truePredicate(),FalsePredicate.falsePredicate(),FalsePredicate.falsePredicate()).evaluate(null));

  assertTrue(PredicateUtils.onePredicate(FalsePredicate.falsePredicate(),truePredicate(),FalsePredicate.falsePredicate()).evaluate(null));

  assertTrue(PredicateUtils.onePredicate(FalsePredicate.falsePredicate(),FalsePredicate.falsePredicate(),truePredicate()).evaluate(null));

  assertFalse(PredicateUtils.onePredicate(FalsePredicate.falsePredicate(),FalsePredicate.falsePredicate(),FalsePredicate.falsePredicate()).evaluate(null));

  final Collection<Predicate<Object>> coll=new ArrayList<>();

  coll.add(TruePredicate.truePredicate());

  coll.add(TruePredicate.truePredicate());

  coll.add(TruePredicate.truePredicate());

  assertFalse(PredicateUtils.onePredicate(coll).evaluate(null));

  coll.clear();

  coll.add(TruePredicate.truePredicate());

  coll.add(FalsePredicate.falsePredicate());

  coll.add(TruePredicate.truePredicate());

  assertFalse(PredicateUtils.onePredicate(coll).evaluate(null));

  coll.clear();

  coll.add(FalsePredicate.falsePredicate());

  coll.add(FalsePredicate.falsePredicate());

  coll.add(TruePredicate.truePredicate());

  assertTrue(PredicateUtils.onePredicate(coll).evaluate(null));

  coll.clear();

  coll.add(FalsePredicate.falsePredicate());

  coll.add(FalsePredicate.falsePredicate());

  coll.add(FalsePredicate.falsePredicate());

  assertFalse(PredicateUtils.onePredicate(coll).evaluate(null));

  coll.clear();

  coll.add(FalsePredicate.falsePredicate());

  assertPredicateFalse(PredicateUtils.onePredicate(coll),null);

  coll.clear();

  coll.add(TruePredicate.truePredicate());

  assertPredicateTrue(PredicateUtils.onePredicate(coll),null);

  coll.clear();

  assertPredicateFalse(PredicateUtils.onePredicate(coll),null);

}

Location: PredicateUtilsTest.java

Content: 

@Test public void testOnePredicateEx1(){

  assertThrows(NullPointerException.class,() -> PredicateUtils.onePredicate((Predicate<Object>[])null));

}

Location: PredicateUtilsTest.java

Content: 

@SuppressWarnings("unchecked") @Test public void testOnePredicateEx2(){

  assertThrows(NullPointerException.class,() -> PredicateUtils.onePredicate(new Predicate[]{null}));

}

Location: PredicateUtilsTest.java

Content: 

@Test public void testOnePredicateEx3(){

  assertThrows(NullPointerException.class,() -> PredicateUtils.onePredicate(null,null));

}

Location: PredicateUtilsTest.java

Content: 

@Test public void testOnePredicateEx4(){

  assertThrows(NullPointerException.class,() -> PredicateUtils.onePredicate((Collection<Predicate<Object>>)null));

}

Location: PredicateUtilsTest.java

Content: 

@SuppressWarnings("unchecked") @Test public void testOnePredicateEx5(){

  PredicateUtils.onePredicate(Collections.EMPTY_LIST);

}

Location: PredicateUtilsTest.java

Content: 

@Test public void testOnePredicateEx6(){

  assertThrows(NullPointerException.class,() -> PredicateUtils.onePredicate(Arrays.asList(null,null)));

}

Location: PredicateUtilsTest.java

Content: 

@Test public void testOrPredicate(){

  assertTrue(PredicateUtils.orPredicate(truePredicate(),truePredicate()).evaluate(null));

  assertTrue(PredicateUtils.orPredicate(truePredicate(),FalsePredicate.falsePredicate()).evaluate(null));

  assertTrue(PredicateUtils.orPredicate(FalsePredicate.falsePredicate(),truePredicate()).evaluate(null));

  assertFalse(PredicateUtils.orPredicate(FalsePredicate.falsePredicate(),FalsePredicate.falsePredicate()).evaluate(null));

}

Location: PredicateUtilsTest.java

Content: 

@Test public void testOrPredicateEx(){

  assertThrows(NullPointerException.class,() -> PredicateUtils.orPredicate(null,null));

}

Location: PredicateUtilsTest.java

Content: 

@Test public void testTransformedPredicate(){

  assertTrue(PredicateUtils.transformedPredicate(TransformerUtils.nopTransformer(),truePredicate()).evaluate(new Object()));

  final Map<Object,Object> map=new HashMap<>();

  map.put(Boolean.TRUE,"Hello");

  final Transformer<Object,Object> t=TransformerUtils.mapTransformer(map);

  final Predicate<Object> p=EqualPredicate.<Object>equalPredicate("Hello");

  assertFalse(PredicateUtils.transformedPredicate(t,p).evaluate(null));

  assertTrue(PredicateUtils.transformedPredicate(t,p).evaluate(Boolean.TRUE));

  try {

    PredicateUtils.transformedPredicate(null,null);

    fail();

  }

 catch (  final NullPointerException ex) {

  }

}

Location: PredicateUtilsTest.java

Content: 

@Test public void testUniquePredicate(){

  final Predicate<Object> p=PredicateUtils.uniquePredicate();

  assertTrue(p.evaluate(new Object()));

  assertTrue(p.evaluate(new Object()));

  assertTrue(p.evaluate(new Object()));

  assertTrue(p.evaluate(cString));

  assertFalse(p.evaluate(cString));

  assertFalse(p.evaluate(cString));

}

