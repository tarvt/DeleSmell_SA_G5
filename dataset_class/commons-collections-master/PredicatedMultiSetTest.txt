Location: PredicatedMultiSetTest.java

Content: 

protected MultiSet<T> decorateMultiSet(final HashMultiSet<T> multiset,final Predicate<T> predicate){

  return PredicatedMultiSet.predicatedMultiSet(multiset,predicate);

}

Location: PredicatedMultiSetTest.java

Content: 

protected MultiSet<T> makeTestMultiSet(){

  return decorateMultiSet(new HashMultiSet<T>(),stringPredicate());

}

Location: PredicatedMultiSetTest.java

Content: 

public PredicatedMultiSetTest(final String testName){

  super(testName);

}

Location: PredicatedMultiSetTest.java

Content: 

protected Predicate<T> stringPredicate(){

  return o -> o instanceof String;

}

Location: PredicatedMultiSetTest.java

Content: 

@SuppressWarnings("unchecked") public void testIllegalDecorate(){

  final HashMultiSet<Object> elements=new HashMultiSet<>();

  elements.add("one");

  elements.add("two");

  elements.add(Integer.valueOf(3));

  elements.add("four");

  try {

    decorateMultiSet((HashMultiSet<T>)elements,stringPredicate());

    fail("MultiSet contains an element that should fail the predicate.");

  }

 catch (  final IllegalArgumentException e) {

  }

  try {

    decorateMultiSet(new HashMultiSet<T>(),null);

    fail("Expecting NullPointerException for null predicate.");

  }

 catch (  final NullPointerException e) {

  }

}

Location: PredicatedMultiSetTest.java

Content: 

@SuppressWarnings("unchecked") public void testLegalAddRemove(){

  final MultiSet<T> multiset=makeTestMultiSet();

  assertEquals(0,multiset.size());

  final T[] els=(T[])new Object[]{"1","3","5","7","2","4","1"};

  for (int i=0; i < els.length; i++) {

    multiset.add(els[i]);

    assertEquals(i + 1,multiset.size());

    assertTrue(multiset.contains(els[i]));

  }

  Set<T> set=((PredicatedMultiSet<T>)multiset).uniqueSet();

  assertTrue("Unique set contains the first element",set.contains(els[0]));

  assertTrue(multiset.remove(els[0]));

  set=((PredicatedMultiSet<T>)multiset).uniqueSet();

  assertTrue("Unique set does not contain anymore the first element",set.contains(els[0]));

}

Location: PredicatedMultiSetTest.java

Content: 

protected MultiSet<T> decorateMultiSet(final HashMultiSet<T> multiset,final Predicate<T> predicate){

  return PredicatedMultiSet.predicatedMultiSet(multiset,predicate);

}

Location: PredicatedMultiSetTest.java

Content: 

protected MultiSet<T> makeTestMultiSet(){

  return decorateMultiSet(new HashMultiSet<T>(),stringPredicate());

}

Location: PredicatedMultiSetTest.java

Content: 

public PredicatedMultiSetTest(final String testName){

  super(testName);

}

Location: PredicatedMultiSetTest.java

Content: 

protected Predicate<T> stringPredicate(){

  return o -> o instanceof String;

}

Location: PredicatedMultiSetTest.java

Content: 

@SuppressWarnings("unchecked") public void testIllegalDecorate(){

  final HashMultiSet<Object> elements=new HashMultiSet<>();

  elements.add("one");

  elements.add("two");

  elements.add(Integer.valueOf(3));

  elements.add("four");

  try {

    decorateMultiSet((HashMultiSet<T>)elements,stringPredicate());

    fail("MultiSet contains an element that should fail the predicate.");

  }

 catch (  final IllegalArgumentException e) {

  }

  try {

    decorateMultiSet(new HashMultiSet<T>(),null);

    fail("Expecting NullPointerException for null predicate.");

  }

 catch (  final NullPointerException e) {

  }

}

Location: PredicatedMultiSetTest.java

Content: 

@SuppressWarnings("unchecked") public void testLegalAddRemove(){

  final MultiSet<T> multiset=makeTestMultiSet();

  assertEquals(0,multiset.size());

  final T[] els=(T[])new Object[]{"1","3","5","7","2","4","1"};

  for (int i=0; i < els.length; i++) {

    multiset.add(els[i]);

    assertEquals(i + 1,multiset.size());

    assertTrue(multiset.contains(els[i]));

  }

  Set<T> set=((PredicatedMultiSet<T>)multiset).uniqueSet();

  assertTrue("Unique set contains the first element",set.contains(els[0]));

  assertTrue(multiset.remove(els[0]));

  set=((PredicatedMultiSet<T>)multiset).uniqueSet();

  assertTrue("Unique set does not contain anymore the first element",set.contains(els[0]));

}

