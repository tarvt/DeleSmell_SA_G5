Location: LoopingListIteratorTest.java

Content: 

/** 

 * Tests constructor exception.

 */

@Test public void testConstructorEx() throws Exception {

  try {

    new LoopingListIterator<>(null);

    fail();

  }

 catch (  final NullPointerException ex) {

  }

}

Location: LoopingListIteratorTest.java

Content: 

/** 

 * Tests jogging back and forth between two elements, but not over the begin/end boundary of the list.

 */

@Test public void testJoggingNotOverBoundary(){

  final List<String> list=Arrays.asList("a","b");

  final LoopingListIterator<String> loop=new LoopingListIterator<>(list);

  loop.reset();

  assertEquals("a",loop.next());

  assertEquals("a",loop.previous());

  assertEquals("a",loop.next());

  assertEquals("b",loop.next());

  assertEquals("b",loop.previous());

  assertEquals("b",loop.next());

}

Location: LoopingListIteratorTest.java

Content: 

/** 

 * Tests jogging back and forth between two elements over the begin/end boundary of the list.

 */

@Test public void testJoggingOverBoundary(){

  final List<String> list=Arrays.asList("a","b");

  final LoopingListIterator<String> loop=new LoopingListIterator<>(list);

  assertEquals("b",loop.previous());

  assertEquals("b",loop.next());

  assertEquals("b",loop.previous());

  assertEquals("a",loop.previous());

  assertEquals("a",loop.next());

  assertEquals("a",loop.previous());

}

Location: LoopingListIteratorTest.java

Content: 

/** 

 * Tests whether an empty looping list iterator works.

 */

@Test public void testLooping0() throws Exception {

  final List<Object> list=new ArrayList<>();

  final LoopingListIterator<Object> loop=new LoopingListIterator<>(list);

  assertFalse(loop.hasNext());

  assertFalse(loop.hasPrevious());

  try {

    loop.next();

    fail();

  }

 catch (  final NoSuchElementException ex) {

  }

  try {

    loop.previous();

    fail();

  }

 catch (  final NoSuchElementException ex) {

  }

}

Location: LoopingListIteratorTest.java

Content: 

/** 

 * Tests whether a looping list iterator works on a list with only one element.

 */

@Test public void testLooping1() throws Exception {

  final List<String> list=Arrays.asList("a");

  final LoopingListIterator<String> loop=new LoopingListIterator<>(list);

  assertTrue(loop.hasNext());

  assertEquals("a",loop.next());

  assertTrue(loop.hasNext());

  assertEquals("a",loop.next());

  assertTrue(loop.hasNext());

  assertEquals("a",loop.next());

  assertTrue(loop.hasPrevious());

  assertEquals("a",loop.previous());

  assertTrue(loop.hasPrevious());

  assertEquals("a",loop.previous());

  assertTrue(loop.hasPrevious());

  assertEquals("a",loop.previous());

}

Location: LoopingListIteratorTest.java

Content: 

/** 

 * Tests whether a looping list iterator works on a list with two elements.

 */

@Test public void testLooping2() throws Exception {

  final List<String> list=Arrays.asList("a","b");

  final LoopingListIterator<String> loop=new LoopingListIterator<>(list);

  assertTrue(loop.hasNext());

  assertEquals("a",loop.next());

  assertTrue(loop.hasNext());

  assertEquals("b",loop.next());

  assertTrue(loop.hasNext());

  assertEquals("a",loop.next());

  loop.reset();

  assertTrue(loop.hasPrevious());

  assertEquals("b",loop.previous());

  assertTrue(loop.hasPrevious());

  assertEquals("a",loop.previous());

  assertTrue(loop.hasPrevious());

  assertEquals("b",loop.previous());

}

Location: LoopingListIteratorTest.java

Content: 

/** 

 * Tests nextIndex and previousIndex.

 */

@Test public void testNextAndPreviousIndex(){

  final List<String> list=Arrays.asList("a","b","c");

  final LoopingListIterator<String> loop=new LoopingListIterator<>(list);

  assertEquals(0,loop.nextIndex());

  assertEquals(2,loop.previousIndex());

  assertEquals("a",loop.next());

  assertEquals(1,loop.nextIndex());

  assertEquals(0,loop.previousIndex());

  assertEquals("a",loop.previous());

  assertEquals(0,loop.nextIndex());

  assertEquals(2,loop.previousIndex());

  assertEquals("c",loop.previous());

  assertEquals(2,loop.nextIndex());

  assertEquals(1,loop.previousIndex());

  assertEquals("b",loop.previous());

  assertEquals(1,loop.nextIndex());

  assertEquals(0,loop.previousIndex());

  assertEquals("a",loop.previous());

  assertEquals(0,loop.nextIndex());

  assertEquals(2,loop.previousIndex());

}

Location: LoopingListIteratorTest.java

Content: 

/** 

 * Tests removing an element from a wrapped ArrayList.

 */

@Test public void testRemovingElementsAndIteratingBackwards(){

  final List<String> list=new ArrayList<>(Arrays.asList("a","b","c"));

  final LoopingListIterator<String> loop=new LoopingListIterator<>(list);

  assertTrue(loop.hasPrevious());

  assertEquals("c",loop.previous());

  loop.remove();

  assertEquals(2,list.size());

  assertTrue(loop.hasPrevious());

  assertEquals("b",loop.previous());

  loop.remove();

  assertEquals(1,list.size());

  assertTrue(loop.hasPrevious());

  assertEquals("a",loop.previous());

  loop.remove();

  assertEquals(0,list.size());

  assertFalse(loop.hasPrevious());

  try {

    loop.previous();

    fail();

  }

 catch (  final NoSuchElementException ex) {

  }

}

Location: LoopingListIteratorTest.java

Content: 

/** 

 * Tests removing an element from a wrapped ArrayList.

 */

@Test public void testRemovingElementsAndIteratingForward(){

  final List<String> list=new ArrayList<>(Arrays.asList("a","b","c"));

  final LoopingListIterator<String> loop=new LoopingListIterator<>(list);

  assertTrue(loop.hasNext());

  assertEquals("a",loop.next());

  loop.remove();

  assertEquals(2,list.size());

  assertTrue(loop.hasNext());

  assertEquals("b",loop.next());

  loop.remove();

  assertEquals(1,list.size());

  assertTrue(loop.hasNext());

  assertEquals("c",loop.next());

  loop.remove();

  assertEquals(0,list.size());

  assertFalse(loop.hasNext());

  try {

    loop.next();

    fail();

  }

 catch (  final NoSuchElementException ex) {

  }

}

Location: LoopingListIteratorTest.java

Content: 

/** 

 * Tests constructor exception.

 */

@Test public void testConstructorEx() throws Exception {

  try {

    new LoopingListIterator<>(null);

    fail();

  }

 catch (  final NullPointerException ex) {

  }

}

Location: LoopingListIteratorTest.java

Content: 

/** 

 * Tests jogging back and forth between two elements, but not over the begin/end boundary of the list.

 */

@Test public void testJoggingNotOverBoundary(){

  final List<String> list=Arrays.asList("a","b");

  final LoopingListIterator<String> loop=new LoopingListIterator<>(list);

  loop.reset();

  assertEquals("a",loop.next());

  assertEquals("a",loop.previous());

  assertEquals("a",loop.next());

  assertEquals("b",loop.next());

  assertEquals("b",loop.previous());

  assertEquals("b",loop.next());

}

Location: LoopingListIteratorTest.java

Content: 

/** 

 * Tests jogging back and forth between two elements over the begin/end boundary of the list.

 */

@Test public void testJoggingOverBoundary(){

  final List<String> list=Arrays.asList("a","b");

  final LoopingListIterator<String> loop=new LoopingListIterator<>(list);

  assertEquals("b",loop.previous());

  assertEquals("b",loop.next());

  assertEquals("b",loop.previous());

  assertEquals("a",loop.previous());

  assertEquals("a",loop.next());

  assertEquals("a",loop.previous());

}

Location: LoopingListIteratorTest.java

Content: 

/** 

 * Tests whether an empty looping list iterator works.

 */

@Test public void testLooping0() throws Exception {

  final List<Object> list=new ArrayList<>();

  final LoopingListIterator<Object> loop=new LoopingListIterator<>(list);

  assertFalse(loop.hasNext());

  assertFalse(loop.hasPrevious());

  try {

    loop.next();

    fail();

  }

 catch (  final NoSuchElementException ex) {

  }

  try {

    loop.previous();

    fail();

  }

 catch (  final NoSuchElementException ex) {

  }

}

Location: LoopingListIteratorTest.java

Content: 

/** 

 * Tests whether a looping list iterator works on a list with only one element.

 */

@Test public void testLooping1() throws Exception {

  final List<String> list=Arrays.asList("a");

  final LoopingListIterator<String> loop=new LoopingListIterator<>(list);

  assertTrue(loop.hasNext());

  assertEquals("a",loop.next());

  assertTrue(loop.hasNext());

  assertEquals("a",loop.next());

  assertTrue(loop.hasNext());

  assertEquals("a",loop.next());

  assertTrue(loop.hasPrevious());

  assertEquals("a",loop.previous());

  assertTrue(loop.hasPrevious());

  assertEquals("a",loop.previous());

  assertTrue(loop.hasPrevious());

  assertEquals("a",loop.previous());

}

Location: LoopingListIteratorTest.java

Content: 

/** 

 * Tests whether a looping list iterator works on a list with two elements.

 */

@Test public void testLooping2() throws Exception {

  final List<String> list=Arrays.asList("a","b");

  final LoopingListIterator<String> loop=new LoopingListIterator<>(list);

  assertTrue(loop.hasNext());

  assertEquals("a",loop.next());

  assertTrue(loop.hasNext());

  assertEquals("b",loop.next());

  assertTrue(loop.hasNext());

  assertEquals("a",loop.next());

  loop.reset();

  assertTrue(loop.hasPrevious());

  assertEquals("b",loop.previous());

  assertTrue(loop.hasPrevious());

  assertEquals("a",loop.previous());

  assertTrue(loop.hasPrevious());

  assertEquals("b",loop.previous());

}

Location: LoopingListIteratorTest.java

Content: 

/** 

 * Tests nextIndex and previousIndex.

 */

@Test public void testNextAndPreviousIndex(){

  final List<String> list=Arrays.asList("a","b","c");

  final LoopingListIterator<String> loop=new LoopingListIterator<>(list);

  assertEquals(0,loop.nextIndex());

  assertEquals(2,loop.previousIndex());

  assertEquals("a",loop.next());

  assertEquals(1,loop.nextIndex());

  assertEquals(0,loop.previousIndex());

  assertEquals("a",loop.previous());

  assertEquals(0,loop.nextIndex());

  assertEquals(2,loop.previousIndex());

  assertEquals("c",loop.previous());

  assertEquals(2,loop.nextIndex());

  assertEquals(1,loop.previousIndex());

  assertEquals("b",loop.previous());

  assertEquals(1,loop.nextIndex());

  assertEquals(0,loop.previousIndex());

  assertEquals("a",loop.previous());

  assertEquals(0,loop.nextIndex());

  assertEquals(2,loop.previousIndex());

}

Location: LoopingListIteratorTest.java

Content: 

/** 

 * Tests removing an element from a wrapped ArrayList.

 */

@Test public void testRemovingElementsAndIteratingBackwards(){

  final List<String> list=new ArrayList<>(Arrays.asList("a","b","c"));

  final LoopingListIterator<String> loop=new LoopingListIterator<>(list);

  assertTrue(loop.hasPrevious());

  assertEquals("c",loop.previous());

  loop.remove();

  assertEquals(2,list.size());

  assertTrue(loop.hasPrevious());

  assertEquals("b",loop.previous());

  loop.remove();

  assertEquals(1,list.size());

  assertTrue(loop.hasPrevious());

  assertEquals("a",loop.previous());

  loop.remove();

  assertEquals(0,list.size());

  assertFalse(loop.hasPrevious());

  try {

    loop.previous();

    fail();

  }

 catch (  final NoSuchElementException ex) {

  }

}

Location: LoopingListIteratorTest.java

Content: 

/** 

 * Tests removing an element from a wrapped ArrayList.

 */

@Test public void testRemovingElementsAndIteratingForward(){

  final List<String> list=new ArrayList<>(Arrays.asList("a","b","c"));

  final LoopingListIterator<String> loop=new LoopingListIterator<>(list);

  assertTrue(loop.hasNext());

  assertEquals("a",loop.next());

  loop.remove();

  assertEquals(2,list.size());

  assertTrue(loop.hasNext());

  assertEquals("b",loop.next());

  loop.remove();

  assertEquals(1,list.size());

  assertTrue(loop.hasNext());

  assertEquals("c",loop.next());

  loop.remove();

  assertEquals(0,list.size());

  assertFalse(loop.hasNext());

  try {

    loop.next();

    fail();

  }

 catch (  final NoSuchElementException ex) {

  }

}

