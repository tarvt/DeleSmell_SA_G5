Location: SetUniqueList.java

Content: 

/** 

 * Gets an unmodifiable view as a Set.

 * @return an unmodifiable set view

 */

public Set<E> asSet(){

  return UnmodifiableSet.unmodifiableSet(set);

}

Location: SetUniqueList.java

Content: 

/** 

 * Create a new  {@link Set} with the same type as the provided {@code set}and populate it with all elements of  {@code list}.

 * @param set  the {@link Set} to be used as return type, must not be null

 * @param list  the {@link List} to populate the {@link Set}

 * @return a new {@link Set} populated with all elements of the provided{@link List}

 */

protected Set<E> createSetBasedOnList(final Set<E> set,final List<E> list){

  Set<E> subSet;

  if (set.getClass().equals(HashSet.class)) {

    subSet=new HashSet<>(list.size());

  }

 else {

    try {

      subSet=set.getClass().getDeclaredConstructor(set.getClass()).newInstance(set);

    }

 catch (    final InstantiationException|IllegalAccessException|InvocationTargetException|NoSuchMethodException ie) {

      subSet=new HashSet<>();

    }

  }

  subSet.addAll(list);

  return subSet;

}

Location: SetUniqueList.java

Content: 

/** 

 * Factory method to create a SetList using the supplied list to retain order. <p> If the list contains duplicates, these are removed (first indexed one kept). A  {@code HashSet} is used for the set behavior.

 * @param < E >  the element type

 * @param list  the list to decorate, must not be null

 * @return a new {@link SetUniqueList}

 * @throws NullPointerException if list is null

 * @since 4.0

 */

public static <E>SetUniqueList<E> setUniqueList(final List<E> list){

  Objects.requireNonNull(list,"list");

  if (list.isEmpty()) {

    return new SetUniqueList<>(list,new HashSet<E>());

  }

  final List<E> temp=new ArrayList<>(list);

  list.clear();

  final SetUniqueList<E> sl=new SetUniqueList<>(list,new HashSet<E>());

  sl.addAll(temp);

  return sl;

}

Location: SetUniqueList.java

Content: 

/** 

 * Constructor that wraps (not copies) the List and specifies the set to use. <p> The set and list must both be correctly initialized to the same elements.

 * @param set  the set to decorate, must not be null

 * @param list  the list to decorate, must not be null

 * @throws NullPointerException if set or list is null

 */

protected SetUniqueList(final List<E> list,final Set<E> set){

  super(list);

  this.set=Objects.requireNonNull(set,"set");

}

Location: SetUniqueList.java

Content: 

/** 

 * Gets an unmodifiable view as a Set.

 * @return an unmodifiable set view

 */

public Set<E> asSet(){

  return UnmodifiableSet.unmodifiableSet(set);

}

Location: SetUniqueList.java

Content: 

/** 

 * Create a new  {@link Set} with the same type as the provided {@code set}and populate it with all elements of  {@code list}.

 * @param set  the {@link Set} to be used as return type, must not be null

 * @param list  the {@link List} to populate the {@link Set}

 * @return a new {@link Set} populated with all elements of the provided{@link List}

 */

protected Set<E> createSetBasedOnList(final Set<E> set,final List<E> list){

  Set<E> subSet;

  if (set.getClass().equals(HashSet.class)) {

    subSet=new HashSet<>(list.size());

  }

 else {

    try {

      subSet=set.getClass().getDeclaredConstructor(set.getClass()).newInstance(set);

    }

 catch (    final InstantiationException|IllegalAccessException|InvocationTargetException|NoSuchMethodException ie) {

      subSet=new HashSet<>();

    }

  }

  subSet.addAll(list);

  return subSet;

}

Location: SetUniqueList.java

Content: 

/** 

 * Factory method to create a SetList using the supplied list to retain order. <p> If the list contains duplicates, these are removed (first indexed one kept). A  {@code HashSet} is used for the set behavior.

 * @param < E >  the element type

 * @param list  the list to decorate, must not be null

 * @return a new {@link SetUniqueList}

 * @throws NullPointerException if list is null

 * @since 4.0

 */

public static <E>SetUniqueList<E> setUniqueList(final List<E> list){

  Objects.requireNonNull(list,"list");

  if (list.isEmpty()) {

    return new SetUniqueList<>(list,new HashSet<E>());

  }

  final List<E> temp=new ArrayList<>(list);

  list.clear();

  final SetUniqueList<E> sl=new SetUniqueList<>(list,new HashSet<E>());

  sl.addAll(temp);

  return sl;

}

Location: SetUniqueList.java

Content: 

/** 

 * Constructor that wraps (not copies) the List and specifies the set to use. <p> The set and list must both be correctly initialized to the same elements.

 * @param set  the set to decorate, must not be null

 * @param list  the list to decorate, must not be null

 * @throws NullPointerException if set or list is null

 */

protected SetUniqueList(final List<E> list,final Set<E> set){

  super(list);

  this.set=Objects.requireNonNull(set,"set");

}

