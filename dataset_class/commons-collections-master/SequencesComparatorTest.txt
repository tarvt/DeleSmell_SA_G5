Location: SequencesComparatorTest.java

Content: 

private List<Character> sequence(final String string){

  final List<Character> list=new ArrayList<>();

  for (int i=0; i < string.length(); ++i) {

    list.add(Character.valueOf(string.charAt(i)));

  }

  return list;

}

Location: SequencesComparatorTest.java

Content: 

@BeforeEach public void setUp(){

  before=Arrays.asList("bottle","nematode knowledge","","aa","prefixed string","ABCABBA","glop glop","coq","spider-man");

  after=Arrays.asList("noodle","empty bottle","","C","prefix","CBABAC","pas glop pas glop","ane","klingon");

  length=new int[]{6,16,0,3,9,5,8,6,13};

}

Location: SequencesComparatorTest.java

Content: 

@AfterEach public void tearDown(){

  before=null;

  after=null;

  length=null;

}

Location: SequencesComparatorTest.java

Content: 

@Test public void testExecution(){

  final ExecutionVisitor<Character> ev=new ExecutionVisitor<>();

  for (int i=0; i < before.size(); ++i) {

    ev.setList(sequence(before.get(i)));

    new SequencesComparator<>(sequence(before.get(i)),sequence(after.get(i))).getScript().visit(ev);

    assertEquals(after.get(i),ev.getString());

  }

}

Location: SequencesComparatorTest.java

Content: 

@Test public void testLength(){

  for (int i=0; i < before.size(); ++i) {

    final SequencesComparator<Character> comparator=new SequencesComparator<>(sequence(before.get(i)),sequence(after.get(i)));

    assertEquals(length[i],comparator.getScript().getModifications());

  }

}

Location: SequencesComparatorTest.java

Content: 

@Test public void testMinimal(){

  final String[] shadokAlph=new String[]{"GA","BU","ZO","MEU"};

  final List<String> sentenceBefore=new ArrayList<>();

  final List<String> sentenceAfter=new ArrayList<>();

  sentenceBefore.add(shadokAlph[0]);

  sentenceBefore.add(shadokAlph[2]);

  sentenceBefore.add(shadokAlph[3]);

  sentenceBefore.add(shadokAlph[1]);

  sentenceBefore.add(shadokAlph[0]);

  sentenceBefore.add(shadokAlph[0]);

  sentenceBefore.add(shadokAlph[2]);

  sentenceBefore.add(shadokAlph[1]);

  sentenceBefore.add(shadokAlph[3]);

  sentenceBefore.add(shadokAlph[0]);

  sentenceBefore.add(shadokAlph[2]);

  sentenceBefore.add(shadokAlph[1]);

  sentenceBefore.add(shadokAlph[3]);

  sentenceBefore.add(shadokAlph[2]);

  sentenceBefore.add(shadokAlph[2]);

  sentenceBefore.add(shadokAlph[0]);

  sentenceBefore.add(shadokAlph[1]);

  sentenceBefore.add(shadokAlph[3]);

  sentenceBefore.add(shadokAlph[0]);

  sentenceBefore.add(shadokAlph[3]);

  final Random random=new Random(4564634237452342L);

  for (int nbCom=0; nbCom <= 40; nbCom+=5) {

    sentenceAfter.clear();

    sentenceAfter.addAll(sentenceBefore);

    for (int i=0; i < nbCom; i++) {

      if (random.nextInt(2) == 0) {

        sentenceAfter.add(random.nextInt(sentenceAfter.size() + 1),shadokAlph[random.nextInt(4)]);

      }

 else {

        sentenceAfter.remove(random.nextInt(sentenceAfter.size()));

      }

    }

    final SequencesComparator<String> comparator=new SequencesComparator<>(sentenceBefore,sentenceAfter);

    assertTrue(comparator.getScript().getModifications() <= nbCom);

  }

}

Location: SequencesComparatorTest.java

Content: 

@Test public void testShadok(){

  final int lgMax=5;

  final String[] shadokAlph=new String[]{"GA","BU","ZO","MEU"};

  List<List<String>> shadokSentences=new ArrayList<>();

  for (int lg=0; lg < lgMax; ++lg) {

    final List<List<String>> newTab=new ArrayList<>();

    newTab.add(new ArrayList<String>());

    for (    final String element : shadokAlph) {

      for (      final List<String> sentence : shadokSentences) {

        final List<String> newSentence=new ArrayList<>(sentence);

        newSentence.add(element);

        newTab.add(newSentence);

      }

    }

    shadokSentences=newTab;

  }

  final ExecutionVisitor<String> ev=new ExecutionVisitor<>();

  for (  final List<String> element : shadokSentences) {

    for (    final List<String> shadokSentence : shadokSentences) {

      ev.setList(element);

      new SequencesComparator<>(element,shadokSentence).getScript().visit(ev);

      final StringBuilder concat=new StringBuilder();

      for (      final String s : shadokSentence) {

        concat.append(s);

      }

      assertEquals(concat.toString(),ev.getString());

    }

  }

}

Location: SequencesComparatorTest.java

Content: 

private List<Character> sequence(final String string){

  final List<Character> list=new ArrayList<>();

  for (int i=0; i < string.length(); ++i) {

    list.add(Character.valueOf(string.charAt(i)));

  }

  return list;

}

Location: SequencesComparatorTest.java

Content: 

@BeforeEach public void setUp(){

  before=Arrays.asList("bottle","nematode knowledge","","aa","prefixed string","ABCABBA","glop glop","coq","spider-man");

  after=Arrays.asList("noodle","empty bottle","","C","prefix","CBABAC","pas glop pas glop","ane","klingon");

  length=new int[]{6,16,0,3,9,5,8,6,13};

}

Location: SequencesComparatorTest.java

Content: 

@AfterEach public void tearDown(){

  before=null;

  after=null;

  length=null;

}

Location: SequencesComparatorTest.java

Content: 

@Test public void testExecution(){

  final ExecutionVisitor<Character> ev=new ExecutionVisitor<>();

  for (int i=0; i < before.size(); ++i) {

    ev.setList(sequence(before.get(i)));

    new SequencesComparator<>(sequence(before.get(i)),sequence(after.get(i))).getScript().visit(ev);

    assertEquals(after.get(i),ev.getString());

  }

}

Location: SequencesComparatorTest.java

Content: 

@Test public void testLength(){

  for (int i=0; i < before.size(); ++i) {

    final SequencesComparator<Character> comparator=new SequencesComparator<>(sequence(before.get(i)),sequence(after.get(i)));

    assertEquals(length[i],comparator.getScript().getModifications());

  }

}

Location: SequencesComparatorTest.java

Content: 

@Test public void testMinimal(){

  final String[] shadokAlph=new String[]{"GA","BU","ZO","MEU"};

  final List<String> sentenceBefore=new ArrayList<>();

  final List<String> sentenceAfter=new ArrayList<>();

  sentenceBefore.add(shadokAlph[0]);

  sentenceBefore.add(shadokAlph[2]);

  sentenceBefore.add(shadokAlph[3]);

  sentenceBefore.add(shadokAlph[1]);

  sentenceBefore.add(shadokAlph[0]);

  sentenceBefore.add(shadokAlph[0]);

  sentenceBefore.add(shadokAlph[2]);

  sentenceBefore.add(shadokAlph[1]);

  sentenceBefore.add(shadokAlph[3]);

  sentenceBefore.add(shadokAlph[0]);

  sentenceBefore.add(shadokAlph[2]);

  sentenceBefore.add(shadokAlph[1]);

  sentenceBefore.add(shadokAlph[3]);

  sentenceBefore.add(shadokAlph[2]);

  sentenceBefore.add(shadokAlph[2]);

  sentenceBefore.add(shadokAlph[0]);

  sentenceBefore.add(shadokAlph[1]);

  sentenceBefore.add(shadokAlph[3]);

  sentenceBefore.add(shadokAlph[0]);

  sentenceBefore.add(shadokAlph[3]);

  final Random random=new Random(4564634237452342L);

  for (int nbCom=0; nbCom <= 40; nbCom+=5) {

    sentenceAfter.clear();

    sentenceAfter.addAll(sentenceBefore);

    for (int i=0; i < nbCom; i++) {

      if (random.nextInt(2) == 0) {

        sentenceAfter.add(random.nextInt(sentenceAfter.size() + 1),shadokAlph[random.nextInt(4)]);

      }

 else {

        sentenceAfter.remove(random.nextInt(sentenceAfter.size()));

      }

    }

    final SequencesComparator<String> comparator=new SequencesComparator<>(sentenceBefore,sentenceAfter);

    assertTrue(comparator.getScript().getModifications() <= nbCom);

  }

}

Location: SequencesComparatorTest.java

Content: 

@Test public void testShadok(){

  final int lgMax=5;

  final String[] shadokAlph=new String[]{"GA","BU","ZO","MEU"};

  List<List<String>> shadokSentences=new ArrayList<>();

  for (int lg=0; lg < lgMax; ++lg) {

    final List<List<String>> newTab=new ArrayList<>();

    newTab.add(new ArrayList<String>());

    for (    final String element : shadokAlph) {

      for (      final List<String> sentence : shadokSentences) {

        final List<String> newSentence=new ArrayList<>(sentence);

        newSentence.add(element);

        newTab.add(newSentence);

      }

    }

    shadokSentences=newTab;

  }

  final ExecutionVisitor<String> ev=new ExecutionVisitor<>();

  for (  final List<String> element : shadokSentences) {

    for (    final List<String> shadokSentence : shadokSentences) {

      ev.setList(element);

      new SequencesComparator<>(element,shadokSentence).getScript().visit(ev);

      final StringBuilder concat=new StringBuilder();

      for (      final String s : shadokSentence) {

        concat.append(s);

      }

      assertEquals(concat.toString(),ev.getString());

    }

  }

}

