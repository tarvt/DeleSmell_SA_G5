Location: PredicatedMap.java

Content: 

/** 

 * Constructor that wraps (not copies).

 * @param map  the map to decorate, must not be null

 * @param keyPredicate  the predicate to validate the keys, null means no check

 * @param valuePredicate  the predicate to validate to values, null means no check

 * @throws NullPointerException if the map is null

 */

protected PredicatedMap(final Map<K,V> map,final Predicate<? super K> keyPredicate,final Predicate<? super V> valuePredicate){

  super(map);

  this.keyPredicate=keyPredicate;

  this.valuePredicate=valuePredicate;

  final Iterator<Map.Entry<K,V>> it=map.entrySet().iterator();

  while (it.hasNext()) {

    final Map.Entry<K,V> entry=it.next();

    validate(entry.getKey(),entry.getValue());

  }

}

Location: PredicatedMap.java

Content: 

/** 

 * Validates a key value pair.

 * @param key  the key to validate

 * @param value  the value to validate

 * @throws IllegalArgumentException if invalid

 */

protected void validate(final K key,final V value){

  if (keyPredicate != null && !keyPredicate.evaluate(key)) {

    throw new IllegalArgumentException("Cannot add key - Predicate rejected it");

  }

  if (valuePredicate != null && !valuePredicate.evaluate(value)) {

    throw new IllegalArgumentException("Cannot add value - Predicate rejected it");

  }

}

Location: PredicatedMap.java

Content: 

/** 

 * Constructor that wraps (not copies).

 * @param map  the map to decorate, must not be null

 * @param keyPredicate  the predicate to validate the keys, null means no check

 * @param valuePredicate  the predicate to validate to values, null means no check

 * @throws NullPointerException if the map is null

 */

protected PredicatedMap(final Map<K,V> map,final Predicate<? super K> keyPredicate,final Predicate<? super V> valuePredicate){

  super(map);

  this.keyPredicate=keyPredicate;

  this.valuePredicate=valuePredicate;

  final Iterator<Map.Entry<K,V>> it=map.entrySet().iterator();

  while (it.hasNext()) {

    final Map.Entry<K,V> entry=it.next();

    validate(entry.getKey(),entry.getValue());

  }

}

Location: PredicatedMap.java

Content: 

/** 

 * Validates a key value pair.

 * @param key  the key to validate

 * @param value  the value to validate

 * @throws IllegalArgumentException if invalid

 */

protected void validate(final K key,final V value){

  if (keyPredicate != null && !keyPredicate.evaluate(key)) {

    throw new IllegalArgumentException("Cannot add key - Predicate rejected it");

  }

  if (valuePredicate != null && !valuePredicate.evaluate(value)) {

    throw new IllegalArgumentException("Cannot add value - Predicate rejected it");

  }

}

