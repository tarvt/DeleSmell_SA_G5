Location: ArrayIterator.java

Content: 

/** 

 * Constructs an ArrayIterator that will iterate over the values in the specified array.

 * @param array the array to iterate over.

 * @throws IllegalArgumentException if {@code array} is not an array.

 * @throws NullPointerException if {@code array} is {@code null}

 */

public ArrayIterator(final Object array){

  this(array,0);

}

Location: ArrayIterator.java

Content: 

/** 

 * Constructs an ArrayIterator that will iterate over the values in the specified array from a specific start index.

 * @param array  the array to iterate over.

 * @param startIndex  the index to start iterating at.

 * @throws IllegalArgumentException if {@code array} is not an array.

 * @throws NullPointerException if {@code array} is {@code null}

 * @throws IndexOutOfBoundsException if the index is invalid

 */

public ArrayIterator(final Object array,final int startIndex){

  this(array,startIndex,Array.getLength(array));

}

Location: ArrayIterator.java

Content: 

/** 

 * Construct an ArrayIterator that will iterate over a range of values in the specified array.

 * @param array  the array to iterate over.

 * @param startIndex  the index to start iterating at.

 * @param endIndex  the index to finish iterating at.

 * @throws IllegalArgumentException if {@code array} is not an array.

 * @throws NullPointerException if {@code array} is {@code null}

 * @throws IndexOutOfBoundsException if either index is invalid

 */

public ArrayIterator(final Object array,final int startIndex,final int endIndex){

  this.array=array;

  this.startIndex=startIndex;

  this.endIndex=endIndex;

  this.index=startIndex;

  final int len=Array.getLength(array);

  checkBound(startIndex,len,"start");

  checkBound(endIndex,len,"end");

  if (endIndex < startIndex) {

    throw new IllegalArgumentException("End index must not be less than start index.");

  }

}

Location: ArrayIterator.java

Content: 

/** 

 * Checks whether the index is valid or not.

 * @param bound  the index to check

 * @param len  the length of the array

 * @param type  the index type (for error messages)

 * @throws IndexOutOfBoundsException if the index is invalid

 */

protected void checkBound(final int bound,final int len,final String type){

  if (bound > len) {

    throw new ArrayIndexOutOfBoundsException("Attempt to make an ArrayIterator that " + type + "s beyond the end of the array. ");

  }

  if (bound < 0) {

    throw new ArrayIndexOutOfBoundsException("Attempt to make an ArrayIterator that " + type + "s before the start of the array. ");

  }

}

Location: ArrayIterator.java

Content: 

/** 

 * Constructs an ArrayIterator that will iterate over the values in the specified array.

 * @param array the array to iterate over.

 * @throws IllegalArgumentException if {@code array} is not an array.

 * @throws NullPointerException if {@code array} is {@code null}

 */

public ArrayIterator(final Object array){

  this(array,0);

}

Location: ArrayIterator.java

Content: 

/** 

 * Constructs an ArrayIterator that will iterate over the values in the specified array from a specific start index.

 * @param array  the array to iterate over.

 * @param startIndex  the index to start iterating at.

 * @throws IllegalArgumentException if {@code array} is not an array.

 * @throws NullPointerException if {@code array} is {@code null}

 * @throws IndexOutOfBoundsException if the index is invalid

 */

public ArrayIterator(final Object array,final int startIndex){

  this(array,startIndex,Array.getLength(array));

}

Location: ArrayIterator.java

Content: 

/** 

 * Construct an ArrayIterator that will iterate over a range of values in the specified array.

 * @param array  the array to iterate over.

 * @param startIndex  the index to start iterating at.

 * @param endIndex  the index to finish iterating at.

 * @throws IllegalArgumentException if {@code array} is not an array.

 * @throws NullPointerException if {@code array} is {@code null}

 * @throws IndexOutOfBoundsException if either index is invalid

 */

public ArrayIterator(final Object array,final int startIndex,final int endIndex){

  this.array=array;

  this.startIndex=startIndex;

  this.endIndex=endIndex;

  this.index=startIndex;

  final int len=Array.getLength(array);

  checkBound(startIndex,len,"start");

  checkBound(endIndex,len,"end");

  if (endIndex < startIndex) {

    throw new IllegalArgumentException("End index must not be less than start index.");

  }

}

Location: ArrayIterator.java

Content: 

/** 

 * Checks whether the index is valid or not.

 * @param bound  the index to check

 * @param len  the length of the array

 * @param type  the index type (for error messages)

 * @throws IndexOutOfBoundsException if the index is invalid

 */

protected void checkBound(final int bound,final int len,final String type){

  if (bound > len) {

    throw new ArrayIndexOutOfBoundsException("Attempt to make an ArrayIterator that " + type + "s beyond the end of the array. ");

  }

  if (bound < 0) {

    throw new ArrayIndexOutOfBoundsException("Attempt to make an ArrayIterator that " + type + "s before the start of the array. ");

  }

}

