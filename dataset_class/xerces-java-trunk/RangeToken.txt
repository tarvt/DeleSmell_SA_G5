Location: RangeToken.java

Content: 

private void createMap(){

  int asize=MAPSIZE / 32;

  int[] map=new int[asize];

  int nonMapIndex=this.ranges.length;

  for (int i=0; i < asize; ++i) {

    map[i]=0;

  }

  for (int i=0; i < this.ranges.length; i+=2) {

    int s=this.ranges[i];

    int e=this.ranges[i + 1];

    if (s < MAPSIZE) {

      for (int j=s; j <= e && j < MAPSIZE; j++) {

        map[j / 32]|=1 << (j & 0x1f);

      }

    }

 else {

      nonMapIndex=i;

      break;

    }

    if (e >= MAPSIZE) {

      nonMapIndex=i;

      break;

    }

  }

  this.map=map;

  this.nonMapIndex=nonMapIndex;

}

Location: RangeToken.java

Content: 

void dumpRanges(){

  System.err.print("RANGE: ");

  if (this.ranges == null) {

    System.err.println(" NULL");

    return;

  }

  for (int i=0; i < this.ranges.length; i+=2) {

    System.err.print("[" + this.ranges[i] + ","+ this.ranges[i + 1]+ "] ");

  }

  System.err.println("");

}

Location: RangeToken.java

Content: 

private static String escapeCharInCharClass(int ch){

  String ret;

switch (ch) {

case '[':

case ']':

case '-':

case '^':

case ',':

case '\\':

    ret="\\" + (char)ch;

  break;

case '\f':

ret="\\f";

break;

case '\n':

ret="\\n";

break;

case '\r':

ret="\\r";

break;

case '\t':

ret="\\t";

break;

case 0x1b:

ret="\\e";

break;

default :

if (ch < 0x20) {

String pre="0" + Integer.toHexString(ch);

ret="\\x" + pre.substring(pre.length() - 2,pre.length());

}

 else if (ch >= 0x10000) {

String pre="0" + Integer.toHexString(ch);

ret="\\v" + pre.substring(pre.length() - 6,pre.length());

}

 else ret="" + (char)ch;

}

return ret;

}

Location: RangeToken.java

Content: 

synchronized RangeToken getCaseInsensitiveToken(){

  if (this.icaseCache != null)   return this.icaseCache;

  RangeToken uppers=this.type == Token.RANGE ? Token.createRange() : Token.createNRange();

  for (int i=0; i < this.ranges.length; i+=2) {

    for (int ch=this.ranges[i]; ch <= this.ranges[i + 1]; ch++) {

      if (ch > 0xffff)       uppers.addRange(ch,ch);

 else {

        char uch=Character.toUpperCase((char)ch);

        uppers.addRange(uch,uch);

      }

    }

  }

  RangeToken lowers=this.type == Token.RANGE ? Token.createRange() : Token.createNRange();

  for (int i=0; i < uppers.ranges.length; i+=2) {

    for (int ch=uppers.ranges[i]; ch <= uppers.ranges[i + 1]; ch++) {

      if (ch > 0xffff)       lowers.addRange(ch,ch);

 else {

        char uch=Character.toLowerCase((char)ch);

        lowers.addRange(uch,uch);

      }

    }

  }

  lowers.mergeRanges(uppers);

  lowers.mergeRanges(this);

  lowers.compactRanges();

  this.icaseCache=lowers;

  return lowers;

}

Location: RangeToken.java

Content: 

private final boolean isCompacted(){

  return this.compacted;

}

Location: RangeToken.java

Content: 

private final boolean isSorted(){

  return this.sorted;

}

Location: RangeToken.java

Content: 

RangeToken(int type){

  super(type);

  this.setSorted(false);

}

Location: RangeToken.java

Content: 

private final void setCompacted(){

  this.compacted=true;

}

Location: RangeToken.java

Content: 

private final void setSorted(boolean sort){

  this.sorted=sort;

  if (!sort)   this.compacted=false;

}

