Location: EventImpl.java

Content: 

/** 

 * @return true iff this Event is of a class and type which supportsbubbling. In the generic case, this is True.

 */

public boolean getBubbles(){

  return bubbles;

}

Location: EventImpl.java

Content: 

/** 

 * @return true iff this Event is of a class and type which (a) has aDefault Behavior in this DOM, and (b)allows cancellation (blocking) of that behavior. In the generic case, this is False.

 */

public boolean getCancelable(){

  return cancelable;

}

Location: EventImpl.java

Content: 

/** 

 * @return the Node (EventTarget) whose EventListeners are currentlybeing processed. During capture and bubble phases, this may not be the target node. 

 */

public EventTarget getCurrentTarget(){

  return currentTarget;

}

Location: EventImpl.java

Content: 

/** 

 * @return the current processing phase for this event -- CAPTURING_PHASE, AT_TARGET, BUBBLING_PHASE. (There may be an internal DEFAULT_PHASE as well, but the users won't see it.) 

 */

public short getEventPhase(){

  return eventPhase;

}

Location: EventImpl.java

Content: 

public long getTimeStamp(){

  return timeStamp;

}

Location: EventImpl.java

Content: 

/** 

 * The DOM doesn't deal with constructors, so instead we have an initializer call to set most of the read-only fields. The others are set, and reset, by the event subsystem during dispatch. <p> Note that init() -- and the subclass-specific initWhatever() calls -- may be reinvoked. At least one initialization is required; repeated initializations overwrite the event with new values of their parameters.

 */

public void initEvent(String eventTypeArg,boolean canBubbleArg,boolean cancelableArg){

  type=eventTypeArg;

  bubbles=canBubbleArg;

  cancelable=cancelableArg;

  initialized=true;

}

Location: EventImpl.java

Content: 

/** 

 * Prevents any default processing built into the target node from occurring.

 */

public void preventDefault(){

  preventDefault=true;

}

Location: EventImpl.java

Content: 

/** 

 * Causes exit from in-progress event dispatch before the next currentTarget is selected. Replaces the preventBubble() and  preventCapture() methods which were present in early drafts;  they may be reintroduced in future levels of the DOM. 

 */

public void stopPropagation(){

  stopPropagation=true;

}

