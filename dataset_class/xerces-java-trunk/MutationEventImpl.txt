Location: MutationEventImpl.java

Content: 

/** 

 * <code>attrChange</code> indicates the type of change which triggered  the DOMAttrModified event. The values can be <code>MODIFICATION</code> , <code>ADDITION</code>, or <code>REMOVAL</code>. 

 */

public short getAttrChange(){

  return attrChange;

}

Location: MutationEventImpl.java

Content: 

/** 

 * @return the name of the Attr whichchanged, for DOMAttrModified events.  Undefined for others.

 */

public String getAttrName(){

  return attrName;

}

Location: MutationEventImpl.java

Content: 

/** 

 * @return the new string value of the Attr for DOMAttrModified events, orof the CharacterData node for DOMCharDataModifed events. Undefined for others.

 */

public String getNewValue(){

  return newValue;

}

Location: MutationEventImpl.java

Content: 

/** 

 * @return the previous string value of the Attr for DOMAttrModified events, orof the CharacterData node for DOMCharDataModifed events. Undefined for others.

 */

public String getPrevValue(){

  return prevValue;

}

Location: MutationEventImpl.java

Content: 

/** 

 * @return a Node related to this event, other than the target that thenode was dispatched to. For DOMNodeRemoved, it is the node which was removed.  No other uses are currently defined.

 */

public Node getRelatedNode(){

  return relatedNode;

}

Location: MutationEventImpl.java

Content: 

/** 

 * Initialize a mutation event, or overwrite the event's current settings with new values of the parameters. 

 */

public void initMutationEvent(String typeArg,boolean canBubbleArg,boolean cancelableArg,Node relatedNodeArg,String prevValueArg,String newValueArg,String attrNameArg,short attrChangeArg){

  relatedNode=relatedNodeArg;

  prevValue=prevValueArg;

  newValue=newValueArg;

  attrName=attrNameArg;

  attrChange=attrChangeArg;

  super.initEvent(typeArg,canBubbleArg,cancelableArg);

}

