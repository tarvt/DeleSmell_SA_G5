Location: Writer.java

Content: 

/** 

 * Characters. 

 */

public void characters(char ch[],int start,int length) throws SAXException {

  if (!fInCDATA) {

    normalizeAndPrint(ch,start,length,false);

  }

 else {

    for (int i=0; i < length; ++i) {

      fOut.print(ch[start + i]);

    }

  }

  fOut.flush();

}

Location: Writer.java

Content: 

/** 

 * Comment. 

 */

public void comment(char ch[],int start,int length) throws SAXException {

  if (!fCanonical && fElementDepth > 0) {

    fOut.print("<!--");

    for (int i=0; i < length; ++i) {

      fOut.print(ch[start + i]);

    }

    fOut.print("-->");

    fOut.flush();

  }

}

Location: Writer.java

Content: 

/** 

 * End CDATA section. 

 */

public void endCDATA() throws SAXException {

  if (!fCanonical) {

    fInCDATA=false;

    fOut.print("]]>");

  }

}

Location: Writer.java

Content: 

/** 

 * End DTD. 

 */

public void endDTD() throws SAXException {

}

Location: Writer.java

Content: 

/** 

 * End entity. 

 */

public void endEntity(String name) throws SAXException {

}

Location: Writer.java

Content: 

/** 

 * Extracts the XML version from the Document. 

 */

protected String getVersion(Document document){

  if (document == null) {

    return null;

  }

  String version=null;

  Method getXMLVersion=null;

  try {

    getXMLVersion=document.getClass().getMethod("getXmlVersion",new Class[]{});

    if (getXMLVersion != null) {

      version=(String)getXMLVersion.invoke(document,(Object[])null);

    }

  }

 catch (  Exception e) {

  }

  return version;

}

Location: Writer.java

Content: 

/** 

 * Ignorable whitespace. 

 */

public void ignorableWhitespace(char ch[],int start,int length) throws SAXException {

  characters(ch,start,length);

  fOut.flush();

}

Location: Writer.java

Content: 

/** 

 * Normalizes and print the given character. 

 */

protected void normalizeAndPrint(char c,boolean isAttValue){

switch (c) {

case '<':

{

      fOut.print("&lt;");

      break;

    }

case '>':

{

    fOut.print("&gt;");

    break;

  }

case '&':

{

  fOut.print("&amp;");

  break;

}

case '"':

{

if (isAttValue) {

  fOut.print("&quot;");

}

 else {

  fOut.print("\"");

}

break;

}

case '\r':

{

fOut.print("&#xD;");

break;

}

case '\n':

{

if (fCanonical) {

fOut.print("&#xA;");

break;

}

}

default :

{

if (fXML11 && ((c >= 0x01 && c <= 0x1F && c != 0x09 && c != 0x0A) || (c >= 0x7F && c <= 0x9F) || c == 0x2028) || isAttValue && (c == 0x09 || c == 0x0A)) {

fOut.print("&#x");

fOut.print(Integer.toHexString(c).toUpperCase());

fOut.print(";");

}

 else {

fOut.print(c);

}

}

}

}

Location: Writer.java

Content: 

/** 

 * Normalizes and prints the given array of characters. 

 */

protected void normalizeAndPrint(char[] ch,int offset,int length,boolean isAttValue){

  for (int i=0; i < length; i++) {

    normalizeAndPrint(ch[offset + i],isAttValue);

  }

}

Location: Writer.java

Content: 

/** 

 * Normalizes and prints the given string. 

 */

protected void normalizeAndPrint(String s){

  int len=(s != null) ? s.length() : 0;

  for (int i=0; i < len; i++) {

    char c=s.charAt(i);

    normalizeAndPrint(c);

  }

}

Location: Writer.java

Content: 

/** 

 * Normalizes and prints the given string. 

 */

protected void normalizeAndPrint(String s,boolean isAttValue){

  int len=(s != null) ? s.length() : 0;

  for (int i=0; i < len; i++) {

    char c=s.charAt(i);

    normalizeAndPrint(c,isAttValue);

  }

}

Location: Writer.java

Content: 

/** 

 * Normalizes and prints the given array of characters. 

 */

protected void normalizeAndPrint(XMLString text){

  for (int i=0; i < text.length; i++) {

    normalizeAndPrint(text.ch[text.offset + i]);

  }

}

Location: Writer.java

Content: 

/** 

 * Processing instruction. 

 */

public void processingInstruction(String target,String data) throws SAXException {

  if (fElementDepth > 0) {

    fOut.print("<?");

    fOut.print(target);

    if (data != null && data.length() > 0) {

      fOut.print(' ');

      fOut.print(data);

    }

    fOut.print("?>");

    fOut.flush();

  }

}

Location: Writer.java

Content: 

/** 

 * Sets whether output is canonical. 

 */

public void setCanonical(boolean canonical){

  fCanonical=canonical;

}

Location: Writer.java

Content: 

/** 

 * Set Document Locator. 

 */

public void setDocumentLocator(Locator locator){

  fLocator=locator;

}

Location: Writer.java

Content: 

/** 

 * Sets the output writer. 

 */

public void setOutput(java.io.Writer writer){

  fOut=writer instanceof PrintWriter ? (PrintWriter)writer : new PrintWriter(writer);

}

Location: Writer.java

Content: 

/** 

 * Returns a sorted list of attributes. 

 */

protected Attributes sortAttributes(Attributes attrs){

  AttributesImpl attributes=new AttributesImpl();

  int len=(attrs != null) ? attrs.getLength() : 0;

  for (int i=0; i < len; i++) {

    String name=attrs.getQName(i);

    int count=attributes.getLength();

    int j=0;

    while (j < count) {

      if (name.compareTo(attributes.getQName(j)) < 0) {

        break;

      }

      j++;

    }

    attributes.insertAttributeAt(j,name,attrs.getType(i),attrs.getValue(i));

  }

  return attributes;

}

Location: Writer.java

Content: 

/** 

 * Start CDATA section. 

 */

public void startCDATA() throws SAXException {

  if (!fCanonical) {

    fOut.print("<![CDATA[");

    fInCDATA=true;

  }

}

Location: Writer.java

Content: 

/** 

 * Start document. 

 */

public void startDocument() throws SAXException {

  fElementDepth=0;

  fXML11=false;

  fInCDATA=false;

}

Location: Writer.java

Content: 

/** 

 * Start DTD. 

 */

public void startDTD(String name,String publicId,String systemId) throws SAXException {

}

Location: Writer.java

Content: 

/** 

 * Start entity. 

 */

public void startEntity(String name) throws SAXException {

}

Location: Writer.java

Content: 

/** 

 * Default constructor. 

 */

public Writer(){

}

Location: Writer.java

Content: 

public Writer(boolean canonical){

  fCanonical=canonical;

}

Location: Writer.java

Content: 

/** 

 * Default constructor. 

 */

public Writer(XMLParserConfiguration configuration){

  super(configuration);

  fConfiguration.setErrorHandler(this);

}

Location: Writer.java

Content: 

/** 

 * Writes the specified node, recursively. 

 */

public void write(Node node){

  if (node == null) {

    return;

  }

  short type=node.getNodeType();

switch (type) {

case Node.DOCUMENT_NODE:

{

      Document document=(Document)node;

      fXML11="1.1".equals(getVersion(document));

      if (!fCanonical) {

        if (fXML11) {

          fOut.println("<?xml version=\"1.1\" encoding=\"UTF-8\"?>");

        }

 else {

          fOut.println("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");

        }

        fOut.flush();

        write(document.getDoctype());

      }

      write(document.getDocumentElement());

      break;

    }

case Node.DOCUMENT_TYPE_NODE:

{

    DocumentType doctype=(DocumentType)node;

    fOut.print("<!DOCTYPE ");

    fOut.print(doctype.getName());

    String publicId=doctype.getPublicId();

    String systemId=doctype.getSystemId();

    if (publicId != null) {

      fOut.print(" PUBLIC '");

      fOut.print(publicId);

      fOut.print("' '");

      fOut.print(systemId);

      fOut.print('\'');

    }

 else     if (systemId != null) {

      fOut.print(" SYSTEM '");

      fOut.print(systemId);

      fOut.print('\'');

    }

    String internalSubset=doctype.getInternalSubset();

    if (internalSubset != null) {

      fOut.println(" [");

      fOut.print(internalSubset);

      fOut.print(']');

    }

    fOut.println('>');

    break;

  }

case Node.ELEMENT_NODE:

{

  fOut.print('<');

  fOut.print(node.getNodeName());

  Attr attrs[]=sortAttributes(node.getAttributes());

  for (int i=0; i < attrs.length; i++) {

    Attr attr=attrs[i];

    fOut.print(' ');

    fOut.print(attr.getNodeName());

    fOut.print("=\"");

    normalizeAndPrint(attr.getNodeValue(),true);

    fOut.print('"');

  }

  fOut.print('>');

  fOut.flush();

  Node child=node.getFirstChild();

  while (child != null) {

    write(child);

    child=child.getNextSibling();

  }

  break;

}

case Node.ENTITY_REFERENCE_NODE:

{

if (fCanonical) {

  Node child=node.getFirstChild();

  while (child != null) {

    write(child);

    child=child.getNextSibling();

  }

}

 else {

  fOut.print('&');

  fOut.print(node.getNodeName());

  fOut.print(';');

  fOut.flush();

}

break;

}

case Node.CDATA_SECTION_NODE:

{

if (fCanonical) {

normalizeAndPrint(node.getNodeValue(),false);

}

 else {

fOut.print("<![CDATA[");

fOut.print(node.getNodeValue());

fOut.print("]]>");

}

fOut.flush();

break;

}

case Node.TEXT_NODE:

{

normalizeAndPrint(node.getNodeValue(),false);

fOut.flush();

break;

}

case Node.PROCESSING_INSTRUCTION_NODE:

{

fOut.print("<?");

fOut.print(node.getNodeName());

String data=node.getNodeValue();

if (data != null && data.length() > 0) {

fOut.print(' ');

fOut.print(data);

}

fOut.print("?>");

fOut.flush();

break;

}

case Node.COMMENT_NODE:

{

if (!fCanonical) {

fOut.print("<!--");

String comment=node.getNodeValue();

if (comment != null && comment.length() > 0) {

fOut.print(comment);

}

fOut.print("-->");

fOut.flush();

}

}

}

if (type == Node.ELEMENT_NODE) {

fOut.print("</");

fOut.print(node.getNodeName());

fOut.print('>');

fOut.flush();

}

}

