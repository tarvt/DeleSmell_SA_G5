Location: ASElementDeclaration.java

Content: 

/** 

 * Adds an <code>ASAttributeDeclaration</code> for the element being  declared.

 * @param attributeDecl The new attribute to add. If the attribute declaration already exists for the element, the call does not have  any effect.

 */

public void addASAttributeDecl(ASAttributeDeclaration attributeDecl);

Location: ASElementDeclaration.java

Content: 

/** 

 * The<code>ASNamedObjectMap</code> containing  <code>ASAttributeDeclarations</code> for all the attributes that can  appear on this type of element.

 */

public ASNamedObjectMap getASAttributeDecls();

Location: ASElementDeclaration.java

Content: 

/** 

 * The content model of element.

 */

public ASContentModel getAsCM();

Location: ASElementDeclaration.java

Content: 

/** 

 * Datatype of the element.

 */

public ASDataType getElementType();

Location: ASElementDeclaration.java

Content: 

/** 

 * Boolean defining whether the element type contains child elements and  PCDATA or PCDATA only for mixed element types. <code>true</code> if  the element is of type PCDATA only. Relevant only for mixed content  type elements. 

 */

public boolean getIsPCDataOnly();

Location: ASElementDeclaration.java

Content: 

/** 

 * A boolean defining whether the element order and number of the child  elements for mixed content type has to be respected or not. For  example XML Schema defined mixed content types the order is important  and needs to be respected whether for DTD based AS the order and  number of child elements are not important.

 */

public boolean getStrictMixedContent();

Location: ASElementDeclaration.java

Content: 

/** 

 * Removes an <code>ASAttributeDeclaration</code> from the element being  declared.

 * @param attributeDecl The attribute declaraition to be removed. If the attribute declaration does not exist for the element, the call does  not have any effect.

 * @return <code>null</code> if the attribute does not exist. Otherwise returns the attribute being removed.

 */

public ASAttributeDeclaration removeASAttributeDecl(ASAttributeDeclaration attributeDecl);

Location: ASElementDeclaration.java

Content: 

/** 

 * The<code>ASNamedObjectMap</code> containing  <code>ASAttributeDeclarations</code> for all the attributes that can  appear on this type of element.

 */

public void setASAttributeDecls(ASNamedObjectMap ASAttributeDecls);

Location: ASElementDeclaration.java

Content: 

/** 

 * The content model of element.

 */

public void setAsCM(ASContentModel asCM);

Location: ASElementDeclaration.java

Content: 

/** 

 * The content type of the element. One of <code>EMPTY_CONTENTTYPE</code>,  <code>ANY_CONTENTTYPE</code>, <code>MIXED_CONTENTTYPE</code>,  <code>ELEMENTS_CONTENTTYPE</code>.

 */

public void setContentType(short contentType);

Location: ASElementDeclaration.java

Content: 

/** 

 * Datatype of the element.

 */

public void setElementType(ASDataType elementType);

Location: ASElementDeclaration.java

Content: 

/** 

 * Boolean defining whether the element type contains child elements and  PCDATA or PCDATA only for mixed element types. <code>true</code> if  the element is of type PCDATA only. Relevant only for mixed content  type elements. 

 */

public void setIsPCDataOnly(boolean isPCDataOnly);

Location: ASElementDeclaration.java

Content: 

/** 

 * A boolean defining whether the element order and number of the child  elements for mixed content type has to be respected or not. For  example XML Schema defined mixed content types the order is important  and needs to be respected whether for DTD based AS the order and  number of child elements are not important.

 */

public void setStrictMixedContent(boolean strictMixedContent);

