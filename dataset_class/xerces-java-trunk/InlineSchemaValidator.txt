Location: InlineSchemaValidator.java

Content: 

public String getNamespaceURI(String prefix){

  if (prefix == null) {

    throw new IllegalArgumentException("Prefix cannot be null.");

  }

 else   if (XMLConstants.XML_NS_PREFIX.equals(prefix)) {

    return XMLConstants.XML_NS_URI;

  }

 else   if (XMLConstants.XMLNS_ATTRIBUTE.equals(prefix)) {

    return XMLConstants.XMLNS_ATTRIBUTE_NS_URI;

  }

 else   if (fPrefixToURIMappings != null) {

    String uri=(String)fPrefixToURIMappings.get(prefix);

    if (uri != null) {

      return uri;

    }

  }

  return XMLConstants.NULL_NS_URI;

}

Location: InlineSchemaValidator.java

Content: 

public Iterator getPrefixes(String namespaceURI){

  if (namespaceURI == null) {

    throw new IllegalArgumentException("Namespace URI cannot be null.");

  }

 else   if (XMLConstants.XML_NS_URI.equals(namespaceURI)) {

    return new Iterator(){

      boolean more=true;

      public boolean hasNext(){

        return more;

      }

      public Object next(){

        if (!hasNext()) {

          throw new NoSuchElementException();

        }

        more=false;

        return XMLConstants.XML_NS_PREFIX;

      }

      public void remove(){

        throw new UnsupportedOperationException();

      }

    }

;

  }

 else   if (XMLConstants.XMLNS_ATTRIBUTE_NS_URI.equals(namespaceURI)) {

    return new Iterator(){

      boolean more=true;

      public boolean hasNext(){

        return more;

      }

      public Object next(){

        if (!hasNext()) {

          throw new NoSuchElementException();

        }

        more=false;

        return XMLConstants.XMLNS_ATTRIBUTE;

      }

      public void remove(){

        throw new UnsupportedOperationException();

      }

    }

;

  }

 else   if (fURIToPrefixMappings != null) {

    HashSet prefixes=(HashSet)fURIToPrefixMappings.get(namespaceURI);

    if (prefixes != null && prefixes.size() > 0) {

      return prefixes.iterator();

    }

  }

  return Collections.EMPTY_LIST.iterator();

}

Location: InlineSchemaValidator.java

Content: 

public String getPrefix(String namespaceURI){

  if (namespaceURI == null) {

    throw new IllegalArgumentException("Namespace URI cannot be null.");

  }

 else   if (XMLConstants.XML_NS_URI.equals(namespaceURI)) {

    return XMLConstants.XML_NS_PREFIX;

  }

 else   if (XMLConstants.XMLNS_ATTRIBUTE_NS_URI.equals(namespaceURI)) {

    return XMLConstants.XMLNS_ATTRIBUTE;

  }

 else   if (fURIToPrefixMappings != null) {

    HashSet prefixes=(HashSet)fURIToPrefixMappings.get(namespaceURI);

    if (prefixes != null && prefixes.size() > 0) {

      return (String)prefixes.iterator().next();

    }

  }

  return null;

}

Location: InlineSchemaValidator.java

Content: 

public InlineSchemaValidator(HashMap prefixToURIMappings,HashMap uriToPrefixMappings){

  fPrefixToURIMappings=prefixToURIMappings;

  fURIToPrefixMappings=uriToPrefixMappings;

}

Location: InlineSchemaValidator.java

Content: 

/** 

 * Prints the results. 

 */

public void printResults(PrintWriter out,String uri,long time,long memory,int repetition){

  out.print(uri);

  out.print(": ");

  if (repetition == 1) {

    out.print(time);

  }

 else {

    out.print(time);

    out.print('/');

    out.print(repetition);

    out.print('=');

    out.print(((float)time) / repetition);

  }

  out.print(" ms");

  if (memory != Long.MIN_VALUE) {

    out.print(", ");

    out.print(memory);

    out.print(" bytes");

  }

  out.println();

  out.flush();

}

Location: InlineSchemaValidator.java

Content: 

public void validate(Validator validator,Source source,String systemId,int repetitions,boolean memoryUsage){

  try {

    long timeBefore=System.currentTimeMillis();

    long memoryBefore=Runtime.getRuntime().freeMemory();

    for (int j=0; j < repetitions; ++j) {

      validator.validate(source);

    }

    long memoryAfter=Runtime.getRuntime().freeMemory();

    long timeAfter=System.currentTimeMillis();

    long time=timeAfter - timeBefore;

    long memory=memoryUsage ? memoryBefore - memoryAfter : Long.MIN_VALUE;

    printResults(fOut,systemId,time,memory,repetitions);

  }

 catch (  SAXParseException e) {

  }

catch (  Exception e) {

    System.err.println("error: Parse error occurred - " + e.getMessage());

    Exception se=e;

    if (e instanceof SAXException) {

      se=((SAXException)e).getException();

    }

    if (se != null)     se.printStackTrace(System.err);

 else     e.printStackTrace(System.err);

  }

}

