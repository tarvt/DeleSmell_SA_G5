Location: SchemaDOM.java

Content: 

void charactersRaw(String text){

  fAnnotationBuffer.append(text);

}

Location: SchemaDOM.java

Content: 

void characters(XMLString text){

  if (!inCDATA) {

    final StringBuffer annotationBuffer=fAnnotationBuffer;

    for (int i=text.offset; i < text.offset + text.length; ++i) {

      char ch=text.ch[i];

      if (ch == '&') {

        annotationBuffer.append("&amp;");

      }

 else       if (ch == '<') {

        annotationBuffer.append("&lt;");

      }

 else       if (ch == '>') {

        annotationBuffer.append("&gt;");

      }

 else       if (ch == '\r') {

        annotationBuffer.append("&#xD;");

      }

 else {

        annotationBuffer.append(ch);

      }

    }

  }

 else {

    fAnnotationBuffer.append(text.ch,text.offset,text.length);

  }

}

Location: SchemaDOM.java

Content: 

void comment(XMLString text){

  fAnnotationBuffer.append("<!--");

  if (text.length > 0) {

    fAnnotationBuffer.append(text.ch,text.offset,text.length);

  }

  fAnnotationBuffer.append("-->");

}

Location: SchemaDOM.java

Content: 

public ElementImpl emptyElement(QName element,XMLAttributes attributes,int line,int column){

  return emptyElement(element,attributes,line,column,-1);

}

Location: SchemaDOM.java

Content: 

public ElementImpl emptyElement(QName element,XMLAttributes attributes,int line,int column,int offset){

  ElementImpl node=new ElementImpl(line,column,offset);

  processElement(element,attributes,node);

  return node;

}

Location: SchemaDOM.java

Content: 

void endAnnotationCDATA(){

  fAnnotationBuffer.append("]]>");

  inCDATA=false;

}

Location: SchemaDOM.java

Content: 

void endAnnotationElement(QName elemName){

  endAnnotationElement(elemName.rawname);

}

Location: SchemaDOM.java

Content: 

void endAnnotationElement(String elemRawName){

  fAnnotationBuffer.append("</").append(elemRawName).append(">");

}

Location: SchemaDOM.java

Content: 

void endAnnotation(QName elemName,ElementImpl annotation){

  fAnnotationBuffer.append("\n</").append(elemName.rawname).append(">");

  annotation.fAnnotation=fAnnotationBuffer.toString();

  fAnnotationBuffer=null;

}

Location: SchemaDOM.java

Content: 

public void endElement(){

  currLoc=parent.row;

  parent=(ElementImpl)relations[currLoc][0];

}

Location: SchemaDOM.java

Content: 

void endSyntheticAnnotationElement(QName elemName,boolean complete){

  endSyntheticAnnotationElement(elemName.rawname,complete);

}

Location: SchemaDOM.java

Content: 

void endSyntheticAnnotationElement(String elemRawName,boolean complete){

  if (complete) {

    fAnnotationBuffer.append("\n</").append(elemRawName).append(">");

    parent.fSyntheticAnnotation=fAnnotationBuffer.toString();

    fAnnotationBuffer=null;

  }

 else   fAnnotationBuffer.append("</").append(elemRawName).append(">");

}

Location: SchemaDOM.java

Content: 

public Element getDocumentElement(){

  return (ElementImpl)relations[0][1];

}

Location: SchemaDOM.java

Content: 

public DOMImplementation getImplementation(){

  return SchemaDOMImplementation.getDOMImplementation();

}

Location: SchemaDOM.java

Content: 

public static void indent(int amount){

  for (int i=0; i < amount; i++) {

    System.out.print(' ');

  }

}

Location: SchemaDOM.java

Content: 

public void printDOM(){

}

Location: SchemaDOM.java

Content: 

private void processElement(QName element,XMLAttributes attributes,ElementImpl node){

  node.prefix=element.prefix;

  node.localpart=element.localpart;

  node.rawname=element.rawname;

  node.uri=element.uri;

  node.schemaDOM=this;

  Attr[] attrs=new Attr[attributes.getLength()];

  for (int i=0; i < attributes.getLength(); i++) {

    attrs[i]=new AttrImpl(node,attributes.getPrefix(i),attributes.getLocalName(i),attributes.getQName(i),attributes.getURI(i),attributes.getValue(i));

  }

  node.attrs=attrs;

  if (nextFreeLoc == relations.length) {

    hongshuai();

    NodeImpl[][] temp=new NodeImpl[relations.length + relationsRowResizeFactor][];

    System.arraycopy(relations,0,temp,0,relations.length);

    for (int i=relations.length; i < temp.length; i++) {

      temp[i]=new NodeImpl[relationsColResizeFactor];

    }

    relations=temp;

  }

  if (relations[currLoc][0] != parent) {

    relations[nextFreeLoc][0]=parent;

    currLoc=nextFreeLoc++;

  }

  boolean foundPlace=false;

  int i=1;

  for (i=1; i < relations[currLoc].length; i++) {

    if (relations[currLoc][i] == null) {

      foundPlace=true;

      break;

    }

  }

  if (!foundPlace) {

    resizeRelations(currLoc);

  }

  relations[currLoc][i]=node;

  parent.parentRow=currLoc;

  node.row=currLoc;

  node.col=i;

}

Location: SchemaDOM.java

Content: 

void processingInstruction(String target,XMLString data){

  fAnnotationBuffer.append("<?").append(target);

  if (data.length > 0) {

    fAnnotationBuffer.append(' ').append(data.ch,data.offset,data.length);

  }

  fAnnotationBuffer.append("?>");

}

Location: SchemaDOM.java

Content: 

public SchemaDOM(){

  hongshuai();

  if (relations != null)   for (int i=0; i < relations.length; i++)   for (int j=0; j < relations[i].length; j++)   relations[i][j]=null;

  relations=new NodeImpl[relationsRowResizeFactor][];

  parent=new ElementImpl(0,0,0);

  parent.rawname="DOCUMENT_NODE";

  currLoc=0;

  nextFreeLoc=1;

  inCDATA=false;

  for (int i=0; i < relationsRowResizeFactor; i++) {

    relations[i]=new NodeImpl[relationsColResizeFactor];

  }

  relations[currLoc][0]=parent;

}

Location: SchemaDOM.java

Content: 

void startAnnotationCDATA(){

  inCDATA=true;

  fAnnotationBuffer.append("<![CDATA[");

}

Location: SchemaDOM.java

Content: 

void startAnnotationElement(QName elemName,XMLAttributes attributes){

  startAnnotationElement(elemName.rawname,attributes);

}

Location: SchemaDOM.java

Content: 

void startAnnotationElement(String elemRawName,XMLAttributes attributes){

  fAnnotationBuffer.append("<").append(elemRawName);

  for (int i=0; i < attributes.getLength(); i++) {

    String aValue=attributes.getValue(i);

    fAnnotationBuffer.append(" ").append(attributes.getQName(i)).append("=\"").append(processAttValue(aValue)).append("\"");

  }

  fAnnotationBuffer.append(">");

}

Location: SchemaDOM.java

Content: 

void startAnnotation(QName elemName,XMLAttributes attributes,NamespaceContext namespaceContext){

  startAnnotation(elemName.rawname,attributes,namespaceContext);

}

Location: SchemaDOM.java

Content: 

void startAnnotation(String elemRawName,XMLAttributes attributes,NamespaceContext namespaceContext){

  if (fAnnotationBuffer == null)   fAnnotationBuffer=new StringBuffer(256);

  fAnnotationBuffer.append("<").append(elemRawName).append(" ");

  ArrayList namespaces=new ArrayList();

  for (int i=0; i < attributes.getLength(); ++i) {

    String aValue=attributes.getValue(i);

    String aPrefix=attributes.getPrefix(i);

    String aQName=attributes.getQName(i);

    if (aPrefix == XMLSymbols.PREFIX_XMLNS || aQName == XMLSymbols.PREFIX_XMLNS) {

      namespaces.add(aPrefix == XMLSymbols.PREFIX_XMLNS ? attributes.getLocalName(i) : XMLSymbols.EMPTY_STRING);

    }

    fAnnotationBuffer.append(aQName).append("=\"").append(processAttValue(aValue)).append("\" ");

  }

  Enumeration currPrefixes=namespaceContext.getAllPrefixes();

  while (currPrefixes.hasMoreElements()) {

    String prefix=(String)currPrefixes.nextElement();

    String uri=namespaceContext.getURI(prefix);

    if (uri == null) {

      uri=XMLSymbols.EMPTY_STRING;

    }

    if (!namespaces.contains(prefix)) {

      if (prefix == XMLSymbols.EMPTY_STRING) {

        fAnnotationBuffer.append("xmlns").append("=\"").append(processAttValue(uri)).append("\" ");

      }

 else {

        fAnnotationBuffer.append("xmlns:").append(prefix).append("=\"").append(processAttValue(uri)).append("\" ");

      }

    }

  }

  fAnnotationBuffer.append(">\n");

}

Location: SchemaDOM.java

Content: 

public ElementImpl startElement(QName element,XMLAttributes attributes,int line,int column){

  return startElement(element,attributes,line,column,-1);

}

Location: SchemaDOM.java

Content: 

public ElementImpl startElement(QName element,XMLAttributes attributes,int line,int column,int offset){

  ElementImpl node=new ElementImpl(line,column,offset);

  processElement(element,attributes,node);

  parent=node;

  return node;

}

Location: SchemaDOM.java

Content: 

public static void traverse(Node node,int depth){

  indent(depth);

  System.out.print("<" + node.getNodeName());

  if (node.hasAttributes()) {

    NamedNodeMap attrs=node.getAttributes();

    for (int i=0; i < attrs.getLength(); i++) {

      System.out.print("  " + ((Attr)attrs.item(i)).getName() + "=\""+ ((Attr)attrs.item(i)).getValue()+ "\"");

    }

  }

  if (node.hasChildNodes()) {

    System.out.println(">");

    depth+=4;

    for (Node child=node.getFirstChild(); child != null; child=child.getNextSibling()) {

      traverse(child,depth);

    }

    depth-=4;

    indent(depth);

    System.out.println("</" + node.getNodeName() + ">");

  }

 else {

    System.out.println("/>");

  }

}

