Location: ItemPSVI.java

Content: 

/** 

 * Returns a reference to an immutable instance with the same data that this instance of <code>ItemPSVI</code> currently has.

 */

public ItemPSVI constant();

Location: ItemPSVI.java

Content: 

/** 

 * <code>[schema normalized value]</code>: Binding specific actual value  or <code>null</code> if the value is in error. 

 * @exception XSException NOT_SUPPORTED_ERR: Raised if the implementation does not support this  method.

 * @deprecated Use getSchemaValue().getActualValue() instead

 */

public Object getActualNormalizedValue() throws XSException ;

Location: ItemPSVI.java

Content: 

/** 

 * The actual value built-in datatype, e.g.  <code>STRING_DT, SHORT_DT</code>. If the type definition of this  value is a list type definition, this method returns  <code>LIST_DT</code>. If the type definition of this value is a list  type definition whose item type is a union type definition, this  method returns <code>LISTOFUNION_DT</code>. To query the actual value  of the list or list of union type definitions use  <code>itemValueTypes</code>. If the <code>actualNormalizedValue</code> is <code>null</code>, this method returns <code>UNAVAILABLE_DT</code>. 

 * @exception XSException NOT_SUPPORTED_ERR: Raised if the implementation does not support this  method.

 * @deprecated Use getSchemaValue().getActualValueType() instead

 */

public short getActualNormalizedValueType() throws XSException ;

Location: ItemPSVI.java

Content: 

/** 

 * <code>[schema error code]</code>: a list of error codes generated from  the validation attempt or an empty <code>StringList</code> if no  errors occurred during the validation attempt. 

 */

public StringList getErrorCodes();

Location: ItemPSVI.java

Content: 

/** 

 * A list of error messages generated from the validation attempt or an empty <code>StringList</code> if no errors occurred during the  validation attempt. The indices of error messages in this list are  aligned with those in the <code>[schema error code]</code> list.

 */

public StringList getErrorMessages();

Location: ItemPSVI.java

Content: 

/** 

 * <code>[schema specified]</code>: if true, the value was specified in  the schema. If false, the value comes from the infoset. For more  information refer to element specified and attribute specified. 

 */

public boolean getIsSchemaSpecified();

Location: ItemPSVI.java

Content: 

/** 

 * <code>[schema default]</code>: the canonical lexical representation of  the declaration's {value constraint} value. For more information  refer to element schema default and attribute schema default. 

 */

public String getSchemaDefault();

Location: ItemPSVI.java

Content: 

/** 

 * <code>[schema normalized value]</code>: the normalized value of this  item after validation. 

 * @deprecated Use getSchemaValue().getNormalizedValue() instead

 */

public String getSchemaNormalizedValue();

Location: ItemPSVI.java

Content: 

/** 

 * If this item has a simple type definition or a complex type with simple content, then return the value with respect to the simple type. If this item doesn't have a simple-typed value, the behavior of this method is not specified.

 */

public XSValue getSchemaValue();

Location: ItemPSVI.java

Content: 

/** 

 * <code>[validation attempted]</code>: determines the extent to which  the schema item has been validated. The value will be one of the  constants: <code>VALIDATION_NONE</code>,  <code>VALIDATION_PARTIAL</code> or <code>VALIDATION_FULL</code>. 

 */

public short getValidationAttempted();

Location: ItemPSVI.java

Content: 

/** 

 * <code>[validity]</code>: determines the validity of the schema item  with respect to the validation being attempted. The value will be one  of the constants: <code>VALIDITY_NOTKNOWN</code>,  <code>VALIDITY_INVALID</code> or <code>VALIDITY_VALID</code>. 

 */

public short getValidity();

Location: ItemPSVI.java

Content: 

/** 

 * Returns <code>true</code> if this specific instance of <code>ItemPSVI</code> is immutable, otherwise <code>false</code>.

 */

public boolean isConstant();

