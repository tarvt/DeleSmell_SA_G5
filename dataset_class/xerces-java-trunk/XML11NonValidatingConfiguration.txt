Location: XML11NonValidatingConfiguration.java

Content: 

/** 

 * Default constructor. 

 */

public XML11NonValidatingConfiguration(){

  this(null,null,null);

}

Location: XML11NonValidatingConfiguration.java

Content: 

/** 

 * Constructs a parser configuration using the specified symbol table. 

 * @param symbolTable The symbol table to use.

 */

public XML11NonValidatingConfiguration(SymbolTable symbolTable){

  this(symbolTable,null,null);

}

Location: XML11NonValidatingConfiguration.java

Content: 

/** 

 * Constructs a parser configuration using the specified symbol table and grammar pool. <p> <strong>REVISIT:</strong>  Grammar pool will be updated when the new validation engine is implemented.

 * @param symbolTable The symbol table to use.

 * @param grammarPool The grammar pool to use.

 */

public XML11NonValidatingConfiguration(SymbolTable symbolTable,XMLGrammarPool grammarPool){

  this(symbolTable,grammarPool,null);

}

Location: XML11NonValidatingConfiguration.java

Content: 

/** 

 * Constructs a parser configuration using the specified symbol table, grammar pool, and parent settings. <p> <strong>REVISIT:</strong>  Grammar pool will be updated when the new validation engine is implemented.

 * @param symbolTable    The symbol table to use.

 * @param grammarPool    The grammar pool to use.

 * @param parentSettings The parent settings.

 */

public XML11NonValidatingConfiguration(SymbolTable symbolTable,XMLGrammarPool grammarPool,XMLComponentManager parentSettings){

  super(parentSettings);

  fComponents=new ArrayList();

  fXML11Components=new ArrayList();

  fCommonComponents=new ArrayList();

  fRecognizedFeatures=new ArrayList();

  fRecognizedProperties=new ArrayList();

  fFeatures=new HashMap();

  fProperties=new HashMap();

  final String[] recognizedFeatures={CONTINUE_AFTER_FATAL_ERROR,VALIDATION,NAMESPACES,EXTERNAL_GENERAL_ENTITIES,EXTERNAL_PARAMETER_ENTITIES,PARSER_SETTINGS};

  addRecognizedFeatures(recognizedFeatures);

  fFeatures.put(VALIDATION,Boolean.FALSE);

  fFeatures.put(NAMESPACES,Boolean.TRUE);

  fFeatures.put(EXTERNAL_GENERAL_ENTITIES,Boolean.TRUE);

  fFeatures.put(EXTERNAL_PARAMETER_ENTITIES,Boolean.TRUE);

  fFeatures.put(CONTINUE_AFTER_FATAL_ERROR,Boolean.FALSE);

  fFeatures.put(PARSER_SETTINGS,Boolean.TRUE);

  final String[] recognizedProperties={XML_STRING,SYMBOL_TABLE,ERROR_HANDLER,ENTITY_RESOLVER,ERROR_REPORTER,ENTITY_MANAGER,DOCUMENT_SCANNER,DTD_SCANNER,DTD_VALIDATOR,DATATYPE_VALIDATOR_FACTORY,VALIDATION_MANAGER,XML_STRING,XMLGRAMMAR_POOL};

  addRecognizedProperties(recognizedProperties);

  if (symbolTable == null) {

    symbolTable=new SymbolTable();

  }

  fSymbolTable=symbolTable;

  fProperties.put(SYMBOL_TABLE,fSymbolTable);

  fGrammarPool=grammarPool;

  if (fGrammarPool != null) {

    fProperties.put(XMLGRAMMAR_POOL,fGrammarPool);

  }

  fEntityManager=new XMLEntityManager();

  fProperties.put(ENTITY_MANAGER,fEntityManager);

  addCommonComponent(fEntityManager);

  fErrorReporter=new XMLErrorReporter();

  fErrorReporter.setDocumentLocator(fEntityManager.getEntityScanner());

  fProperties.put(ERROR_REPORTER,fErrorReporter);

  addCommonComponent(fErrorReporter);

  fNamespaceScanner=new XMLNSDocumentScannerImpl();

  fProperties.put(DOCUMENT_SCANNER,fNamespaceScanner);

  addComponent((XMLComponent)fNamespaceScanner);

  fDTDScanner=new XMLDTDScannerImpl();

  fProperties.put(DTD_SCANNER,fDTDScanner);

  addComponent((XMLComponent)fDTDScanner);

  fDatatypeValidatorFactory=DTDDVFactory.getInstance();

  fProperties.put(DATATYPE_VALIDATOR_FACTORY,fDatatypeValidatorFactory);

  fValidationManager=new ValidationManager();

  fProperties.put(VALIDATION_MANAGER,fValidationManager);

  fVersionDetector=new XMLVersionDetector();

  if (fErrorReporter.getMessageFormatter(XMLMessageFormatter.XML_DOMAIN) == null) {

    XMLMessageFormatter xmft=new XMLMessageFormatter();

    fErrorReporter.putMessageFormatter(XMLMessageFormatter.XML_DOMAIN,xmft);

    fErrorReporter.putMessageFormatter(XMLMessageFormatter.XMLNS_DOMAIN,xmft);

  }

  try {

    setLocale(Locale.getDefault());

  }

 catch (  XNIException e) {

  }

  fConfigUpdated=false;

}

