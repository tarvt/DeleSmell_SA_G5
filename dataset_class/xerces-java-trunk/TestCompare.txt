Location: TestCompare.java

Content: 

/** 

 * Builds a set of ranges that correspond to the range example from section 2.1 of the DOM range spec.  These ranges are based on a  document that looks like: <BODY><H1>Title</H1><P>Blah xyz.</P></BODY> The ranges are as follows: Range   Start-node  Start-Offset        End-node    End-Offset 0      "Title"     2                   "Blah.."    2 1      BODY        1                   BODY        2 2      P           0                   P           1 3      "Blah.."    0                   "Blah.."    9 These ranges are in sorted order based on the boundary point of the start of each range, in document order.   The ending points of the ranges are not in any particular order. These ranges cover all four boundary tests as enumerated in the DOM range specification.

 */

private Range[] buildRanges(){

  DocumentImpl doc=new org.apache.xerces.dom.DocumentImpl();

  Element body=doc.createElement("BODY");

  doc.appendChild(body);

  Element h1=doc.createElement("H1");

  body.appendChild(h1);

  Text title=doc.createTextNode("Title");

  h1.appendChild(title);

  Element p=doc.createElement("P");

  body.appendChild(p);

  Text blah=doc.createTextNode("Blah xyz.");

  p.appendChild(blah);

  Range[] ranges=new Range[4];

  ranges[0]=doc.createRange();

  ranges[0].setStart(title,2);

  ranges[0].setEnd(blah,2);

  ranges[1]=doc.createRange();

  ranges[1].setStart(body,1);

  ranges[1].setEnd(body,2);

  ranges[2]=doc.createRange();

  ranges[2].setStart(p,0);

  ranges[2].setEnd(p,1);

  ranges[3]=doc.createRange();

  ranges[3].setStart(blah,0);

  ranges[3].setEnd(blah,9);

  return ranges;

}

Location: TestCompare.java

Content: 

/** 

 * Utility method used to compare the Ranges from the  buildRanges() method.  The caller specifies how the ranges should be compared and what the results should be.

 */

private void doTestCompare(short how,int[][] results){

  Range[] ranges=buildRanges();

  for (int i=0; i < ranges.length; ++i) {

    for (int j=0; j < ranges.length; ++j) {

      int result=ranges[i].compareBoundaryPoints(how,ranges[j]);

      assertTrue("Compare returned the wrong value i=" + i + " j="+ j+ " result="+ result,result == results[i][j]);

    }

  }

}

Location: TestCompare.java

Content: 

/** 

 * Using all of the sample ranges from section 2.1 of the DOM specification, compare each ending point to every other  ending point.

 */

public void testCompareEndToEnd(){

  doTestCompare(Range.END_TO_END,results_END_TO_END);

}

Location: TestCompare.java

Content: 

/** 

 * Using all of the sample ranges from section 2.1 of the DOM specification, compare each ending point to every other  starting point.

 */

public void testCompareEndToStart(){

  doTestCompare(Range.END_TO_START,results_END_TO_START);

}

Location: TestCompare.java

Content: 

/** 

 * Using all of the sample ranges from section 2.1 of the DOM specification, compare each starting point to every other  ending point.

 */

public void testCompareStartToEnd(){

  doTestCompare(Range.START_TO_END,results_START_TO_END);

}

Location: TestCompare.java

Content: 

/** 

 * Using all of the sample ranges from section 2.1 of the DOM specification, compare each starting point to every other  starting point.

 */

public void testCompareStartToStart(){

  doTestCompare(Range.START_TO_START,results_START_TO_START);

}

Location: TestCompare.java

Content: 

/** 

 * Creates an instance of the test

 */

public TestCompare(String name){

  super(name);

}

