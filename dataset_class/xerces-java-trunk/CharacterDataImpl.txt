Location: CharacterDataImpl.java

Content: 

public CharacterDataImpl(){

}

Location: CharacterDataImpl.java

Content: 

/** 

 * Factory constructor. 

 */

protected CharacterDataImpl(CoreDocumentImpl ownerDocument,String data){

  super(ownerDocument);

  this.data=data;

}

Location: CharacterDataImpl.java

Content: 

/** 

 * NON-DOM INTERNAL: Within DOM actions, we sometimes need to be able to control which mutation events are spawned. This version of the deleteData operation allows us to do so. It is not intended for use by application programs.

 */

void internalDeleteData(int offset,int count,boolean replace) throws DOMException {

  CoreDocumentImpl ownerDocument=ownerDocument();

  if (ownerDocument.errorChecking) {

    if (isReadOnly()) {

      String msg=DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN,"NO_MODIFICATION_ALLOWED_ERR",null);

      throw new DOMException(DOMException.NO_MODIFICATION_ALLOWED_ERR,msg);

    }

    if (count < 0) {

      String msg=DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN,"INDEX_SIZE_ERR",null);

      throw new DOMException(DOMException.INDEX_SIZE_ERR,msg);

    }

  }

  if (needsSyncData()) {

    synchronizeData();

  }

  int tailLength=Math.max(data.length() - count - offset,0);

  try {

    String value=data.substring(0,offset) + (tailLength > 0 ? data.substring(offset + count,offset + count + tailLength) : "");

    setNodeValueInternal(value,replace);

    ownerDocument.deletedText(this,offset,count);

  }

 catch (  StringIndexOutOfBoundsException e) {

    String msg=DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN,"INDEX_SIZE_ERR",null);

    throw new DOMException(DOMException.INDEX_SIZE_ERR,msg);

  }

}

Location: CharacterDataImpl.java

Content: 

/** 

 * NON-DOM INTERNAL: Within DOM actions, we sometimes need to be able to control which mutation events are spawned. This version of the insertData operation allows us to do so. It is not intended for use by application programs.

 */

void internalInsertData(int offset,String data,boolean replace) throws DOMException {

  CoreDocumentImpl ownerDocument=ownerDocument();

  if (ownerDocument.errorChecking && isReadOnly()) {

    String msg=DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN,"NO_MODIFICATION_ALLOWED_ERR",null);

    throw new DOMException(DOMException.NO_MODIFICATION_ALLOWED_ERR,msg);

  }

  if (needsSyncData()) {

    synchronizeData();

  }

  try {

    String value=new StringBuffer(this.data).insert(offset,data).toString();

    setNodeValueInternal(value,replace);

    ownerDocument.insertedText(this,offset,data.length());

  }

 catch (  StringIndexOutOfBoundsException e) {

    String msg=DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN,"INDEX_SIZE_ERR",null);

    throw new DOMException(DOMException.INDEX_SIZE_ERR,msg);

  }

}

Location: CharacterDataImpl.java

Content: 

/** 

 * Convenience wrapper for calling setNodeValueInternal when  we are not performing a replacement operation  

 */

protected void setNodeValueInternal(String value){

  setNodeValueInternal(value,false);

}

Location: CharacterDataImpl.java

Content: 

/** 

 * This function added so that we can distinguish whether setNodeValue has been called from some other DOM functions. or by the client.<p> This is important, because we do one type of Range fix-up,  from the high-level functions in CharacterData, and another type if the client simply calls setNodeValue(value).

 */

protected void setNodeValueInternal(String value,boolean replace){

  CoreDocumentImpl ownerDocument=ownerDocument();

  if (ownerDocument.errorChecking && isReadOnly()) {

    String msg=DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN,"NO_MODIFICATION_ALLOWED_ERR",null);

    throw new DOMException(DOMException.NO_MODIFICATION_ALLOWED_ERR,msg);

  }

  if (needsSyncData()) {

    synchronizeData();

  }

  String oldvalue=this.data;

  ownerDocument.modifyingCharacterData(this,replace);

  this.data=value;

  ownerDocument.modifiedCharacterData(this,oldvalue,value,replace);

}

