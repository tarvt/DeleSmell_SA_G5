Location: MultipleScopeNamespaceSupport.java

Content: 

public String getPrefix(String uri,int context){

  return getPrefix(uri,fContext[context + 1],fContext[fScope[getScopeForContext(context)]]);

}

Location: MultipleScopeNamespaceSupport.java

Content: 

public String getPrefix(String uri,int start,int end){

  if (uri == NamespaceContext.XML_URI) {

    return XMLSymbols.PREFIX_XML;

  }

  if (uri == NamespaceContext.XMLNS_URI) {

    return XMLSymbols.PREFIX_XMLNS;

  }

  for (int i=start; i > end; i-=2) {

    if (fNamespace[i - 1] == uri) {

      if (getURI(fNamespace[i - 2]) == uri)       return fNamespace[i - 2];

    }

  }

  return null;

}

Location: MultipleScopeNamespaceSupport.java

Content: 

public int getScopeForContext(int context){

  int scope=fCurrentScope;

  while (context < fScope[scope]) {

    scope--;

  }

  return scope;

}

Location: MultipleScopeNamespaceSupport.java

Content: 

public String getURI(String prefix,int context){

  return getURI(prefix,fContext[context + 1],fContext[fScope[getScopeForContext(context)]]);

}

Location: MultipleScopeNamespaceSupport.java

Content: 

public String getURI(String prefix,int start,int end){

  if (prefix == XMLSymbols.PREFIX_XML) {

    return NamespaceContext.XML_URI;

  }

  if (prefix == XMLSymbols.PREFIX_XMLNS) {

    return NamespaceContext.XMLNS_URI;

  }

  for (int i=start; i > end; i-=2) {

    if (fNamespace[i - 2] == prefix) {

      return fNamespace[i - 1];

    }

  }

  return null;

}

Location: MultipleScopeNamespaceSupport.java

Content: 

/** 

 */

public MultipleScopeNamespaceSupport(){

  super();

  fCurrentScope=0;

  fScope[0]=0;

}

Location: MultipleScopeNamespaceSupport.java

Content: 

/** 

 * @param context

 */

public MultipleScopeNamespaceSupport(NamespaceContext context){

  super(context);

  fCurrentScope=0;

  fScope[0]=0;

}

Location: MultipleScopeNamespaceSupport.java

Content: 

/** 

 * Pops the current scope.  The namespace bindings from the new current scope are then used for searching for namespaces and prefixes.

 */

public void popScope(){

  fCurrentContext=fScope[fCurrentScope--];

  popContext();

}

Location: MultipleScopeNamespaceSupport.java

Content: 

/** 

 * Begins a new scope.  None of the previous namespace bindings will be used, until the new scope is popped with popScope()

 */

public void pushScope(){

  if (fCurrentScope + 1 == fScope.length) {

    int[] contextarray=new int[fScope.length * 2];

    System.arraycopy(fScope,0,contextarray,0,fScope.length);

    fScope=contextarray;

  }

  pushContext();

  fScope[++fCurrentScope]=fCurrentContext;

}

