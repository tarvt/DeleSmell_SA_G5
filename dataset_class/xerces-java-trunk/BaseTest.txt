Location: BaseTest.java

Content: 

protected void assertAnyType(XSTypeDefinition type){

  assertEquals("Type is supposed to be anyType",SchemaGrammar.fAnyType,type);

}

Location: BaseTest.java

Content: 

protected void assertElementNamespaceNull(String actualName){

  assertNull("Local name of element declaration should be null.",actualName);

}

Location: BaseTest.java

Content: 

protected void assertElementNamespace(String expectedName,String actualName){

  assertEquals("Namespace of element declaration is wrong.",expectedName,actualName);

}

Location: BaseTest.java

Content: 

protected void assertElementName(String expectedName,String actualName){

  assertEquals("Local name of element declaration is wrong.",expectedName,actualName);

}

Location: BaseTest.java

Content: 

protected void assertElementNull(XSElementDeclaration elem){

  assertNull("Element declaration should be null.",elem);

}

Location: BaseTest.java

Content: 

protected void assertError(String error){

  assertTrue("Error <" + error + "> should have occured, but did not.",fErrorHandler.specialCaseFound(error));

}

Location: BaseTest.java

Content: 

protected void assertNoError(String error){

  assertFalse("Error <" + error + "> should not have occured (but it did)",fErrorHandler.specialCaseFound(error));

}

Location: BaseTest.java

Content: 

protected void assertTypeNamespaceNull(String actualName){

  assertNull("Namespace of type definition should be null.",actualName);

}

Location: BaseTest.java

Content: 

protected void assertTypeNamespace(String expectedName,String actualName){

  assertEquals("Namespace of type definition is wrong.",expectedName,actualName);

}

Location: BaseTest.java

Content: 

protected void assertTypeName(String expectedName,String actualName){

  assertEquals("Local name of type definition is wrong.",expectedName,actualName);

}

Location: BaseTest.java

Content: 

protected void assertTypeNull(XSTypeDefinition type){

  assertNull("Type definition should be null.",type);

}

Location: BaseTest.java

Content: 

protected void assertValidationAttempted(short expectedAttempted,short actualAttempted){

  String expectedString=expectedAttempted == ItemPSVI.VALIDATION_FULL ? "full" : (expectedAttempted == ItemPSVI.VALIDATION_PARTIAL ? "partial" : "none");

  String actualString=actualAttempted == ItemPSVI.VALIDATION_FULL ? "full" : (actualAttempted == ItemPSVI.VALIDATION_PARTIAL ? "partial" : "none");

  String message="{validity} was <" + actualString + "> but it should have been <"+ expectedString+ ">";

  assertEquals(message,expectedAttempted,actualAttempted);

}

Location: BaseTest.java

Content: 

protected void assertValidity(short expectedValidity,short actualValidity){

  String expectedString=expectedValidity == ItemPSVI.VALIDITY_VALID ? "valid" : (expectedValidity == ItemPSVI.VALIDITY_INVALID ? "invalid" : "notKnown");

  String actualString=actualValidity == ItemPSVI.VALIDITY_VALID ? "valid" : (actualValidity == ItemPSVI.VALIDITY_INVALID ? "invalid" : "notKnown");

  String message="{validity} was <" + actualString + "> but it should have been <"+ expectedString+ ">";

  assertEquals(message,expectedValidity,actualValidity);

}

Location: BaseTest.java

Content: 

public BaseTest(String name){

  super(name);

  fErrorHandler=new SpecialCaseErrorHandler(getRelevantErrorIDs());

}

Location: BaseTest.java

Content: 

protected PSVIElementNSImpl getChild(int n){

  int numFound=0;

  Node child=((Node)fRootNode).getFirstChild();

  while (child != null) {

    if (child.getNodeType() == Node.ELEMENT_NODE) {

      numFound++;

      if (numFound == n) {

        return (PSVIElementNSImpl)child;

      }

    }

    child=child.getNextSibling();

  }

  return null;

}

Location: BaseTest.java

Content: 

protected void validateDocument() throws Exception {

  Source source=new DOMSource(fDocument);

  source.setSystemId(fDocumentURL.toExternalForm());

  Result result=new DOMResult(fDocument);

  fValidator.validate(source,result);

}

Location: BaseTest.java

Content: 

protected void validateFragment() throws Exception {

  Source source=new DOMSource((Node)fRootNode);

  source.setSystemId(fDocumentURL.toExternalForm());

  Result result=new DOMResult((Node)fRootNode);

  fValidator.validate(source,result);

}

