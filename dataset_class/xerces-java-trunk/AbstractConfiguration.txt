Location: AbstractConfiguration.java

Content: 

/** 

 * Adds a component to list of configurable components. If the same component is added multiple times, the component is added only the first time.  <p> This method helps manage the components in the configuration. Therefore, all subclasses should call this method to add the components specific to the configuration.

 * @param component The component to add.

 * @see #resetComponents

 */

protected void addComponent(XMLComponent component){

  if (!fComponents.contains(component)) {

    fComponents.addElement(component);

    addRecognizedFeatures(component.getRecognizedFeatures());

    addRecognizedProperties(component.getRecognizedProperties());

  }

}

Location: AbstractConfiguration.java

Content: 

/** 

 * Allows a parser to add parser specific features to be recognized and managed by the parser configuration.

 * @param featureIds An array of the additional feature identifiers to be recognized.

 */

public void addRecognizedFeatures(String[] featureIds){

  int length=featureIds != null ? featureIds.length : 0;

  for (int i=0; i < length; i++) {

    String featureId=featureIds[i];

    if (!fRecognizedFeatures.contains(featureId)) {

      fRecognizedFeatures.addElement(featureId);

    }

  }

}

Location: AbstractConfiguration.java

Content: 

/** 

 * Allows a parser to add parser specific properties to be recognized and managed by the parser configuration.

 * @param propertyIds An array of the additional property identifiers to be recognized.

 */

public void addRecognizedProperties(String[] propertyIds){

  int length=propertyIds != null ? propertyIds.length : 0;

  for (int i=0; i < length; i++) {

    String propertyId=propertyIds[i];

    if (!fRecognizedProperties.contains(propertyId)) {

      fRecognizedProperties.addElement(propertyId);

    }

  }

}

Location: AbstractConfiguration.java

Content: 

/** 

 * Returns the registered document handler. 

 */

public XMLDocumentHandler getDocumentHandler(){

  return fDocumentHandler;

}

Location: AbstractConfiguration.java

Content: 

/** 

 * Returns the registered DTD content model handler. 

 */

public XMLDTDContentModelHandler getDTDContentModelHandler(){

  return fDTDContentModelHandler;

}

Location: AbstractConfiguration.java

Content: 

/** 

 * Returns the registered DTD handler. 

 */

public XMLDTDHandler getDTDHandler(){

  return fDTDHandler;

}

Location: AbstractConfiguration.java

Content: 

/** 

 * Returns the registered entity resolver. 

 */

public XMLEntityResolver getEntityResolver(){

  return fEntityResolver;

}

Location: AbstractConfiguration.java

Content: 

/** 

 * Returns the registered error handler. 

 */

public XMLErrorHandler getErrorHandler(){

  return fErrorHandler;

}

Location: AbstractConfiguration.java

Content: 

/** 

 * Returns the locale. 

 */

public Locale getLocale(){

  return fLocale;

}

Location: AbstractConfiguration.java

Content: 

/** 

 * This method tries to open the necessary stream for the given XMLInputSource. If the input source already has a character stream (java.io.Reader) or a byte stream (java.io.InputStream) set, this method returns immediately. However, if no character or byte stream is already open, this method attempts to open an input stream using the source's system identifier.

 * @param source The input source to open.

 */

protected void openInputSourceStream(XMLInputSource source) throws IOException {

  if (source.getCharacterStream() != null) {

    return;

  }

  InputStream stream=source.getByteStream();

  if (stream == null) {

    String systemId=source.getSystemId();

    try {

      URL url=new URL(systemId);

      stream=url.openStream();

    }

 catch (    MalformedURLException e) {

      stream=new FileInputStream(systemId);

    }

    source.setByteStream(stream);

  }

}

Location: AbstractConfiguration.java

Content: 

/** 

 * Resets all of the registered components. Before the subclassed configuration begins parsing, it should call this method to reset the components.

 * @see #addComponent

 */

protected void resetComponents() throws XMLConfigurationException {

  int length=fComponents.size();

  for (int i=0; i < length; i++) {

    XMLComponent component=(XMLComponent)fComponents.elementAt(i);

    component.reset(this);

  }

}

Location: AbstractConfiguration.java

Content: 

/** 

 * Sets the document handler to receive information about the document.

 * @param handler The document handler.

 */

public void setDocumentHandler(XMLDocumentHandler handler){

  fDocumentHandler=handler;

}

Location: AbstractConfiguration.java

Content: 

/** 

 * Sets the DTD content model handler.

 * @param handler The DTD content model handler.

 */

public void setDTDContentModelHandler(XMLDTDContentModelHandler handler){

  fDTDContentModelHandler=handler;

}

Location: AbstractConfiguration.java

Content: 

/** 

 * Sets the DTD handler.

 * @param handler The DTD handler.

 */

public void setDTDHandler(XMLDTDHandler handler){

  fDTDHandler=handler;

}

Location: AbstractConfiguration.java

Content: 

/** 

 * Sets the entity resolver.

 * @param resolver The new entity resolver.

 */

public void setEntityResolver(XMLEntityResolver resolver){

  fEntityResolver=resolver;

}

Location: AbstractConfiguration.java

Content: 

/** 

 * Sets the error handler.

 * @param handler The error resolver.

 */

public void setErrorHandler(XMLErrorHandler handler){

  fErrorHandler=handler;

}

Location: AbstractConfiguration.java

Content: 

/** 

 * Set the locale to use for messages.

 * @param locale The locale object to use for localization of messages.

 * @exception XNIException Thrown if the parser does not support thespecified locale.

 */

public void setLocale(Locale locale){

  fLocale=locale;

}

