Location: HTMLCollectionImpl.java

Content: 

/** 

 * Constructs a new index with the specified initial value. The index will then be decremeneted until it reaches zero.

 * @param index The initial value

 */

CollectionIndex(int index){

  _index=index;

}

Location: HTMLCollectionImpl.java

Content: 

/** 

 * Determines if current element matches based on what we're looking for. The element is passed along with an optional identifier name. If the element is the one we're looking for, return true. If the name is also specified, the name must match the <code>id</code> attribute (match <code>name</code> first for anchors).

 * @param elem The current element

 * @param name The identifier name or null

 * @return The element matches what we're looking for

 */

protected boolean collectionMatch(Element elem,String name){

  boolean match;

synchronized (elem) {

    match=false;

switch (_lookingFor) {

case ANCHOR:

      match=(elem instanceof HTMLAnchorElement) && elem.getAttribute("name").length() > 0;

    break;

case FORM:

  match=(elem instanceof HTMLFormElement);

break;

case IMAGE:

match=(elem instanceof HTMLImageElement);

break;

case APPLET:

match=(elem instanceof HTMLAppletElement) || (elem instanceof HTMLObjectElement && ("application/java".equals(elem.getAttribute("codetype")) || elem.getAttribute("classid").startsWith("java:")));

break;

case ELEMENT:

match=(elem instanceof HTMLFormControl);

break;

case LINK:

match=((elem instanceof HTMLAnchorElement || elem instanceof HTMLAreaElement) && elem.getAttribute("href").length() > 0);

break;

case AREA:

match=(elem instanceof HTMLAreaElement);

break;

case OPTION:

match=(elem instanceof HTMLOptionElement);

break;

case ROW:

match=(elem instanceof HTMLTableRowElement);

break;

case TBODY:

match=(elem instanceof HTMLTableSectionElement && elem.getTagName().equals("TBODY"));

break;

case CELL:

match=(elem instanceof HTMLTableCellElement);

break;

}

if (match && name != null) {

if (elem instanceof HTMLAnchorElement && name.equals(elem.getAttribute("name"))) return true;

match=name.equals(elem.getAttribute("id"));

}

}

return match;

}

Location: HTMLCollectionImpl.java

Content: 

/** 

 * Decrements the index by one.

 */

void decrement(){

  --_index;

}

Location: HTMLCollectionImpl.java

Content: 

/** 

 * Recursive function returns the number of elements of a particular type that exist under the top level element. This is a recursive function and the top level element is passed along.

 * @param topLevel Top level element from which to scan

 * @return Number of elements

 */

private int getLength(Element topLevel){

  int length;

  Node node;

synchronized (topLevel) {

    length=0;

    node=topLevel.getFirstChild();

    while (node != null) {

      if (node instanceof Element) {

        if (collectionMatch((Element)node,null))         ++length;

 else         if (recurse())         length+=getLength((Element)node);

      }

      node=node.getNextSibling();

    }

  }

  return length;

}

Location: HTMLCollectionImpl.java

Content: 

/** 

 * Construct a new collection that retrieves element of the specific type (<code>lookingFor</code>) from the specific document portion (<code>topLevel</code>).

 * @param topLevel The element underneath which the collection exists

 * @param lookingFor Code indicating what elements to look for

 */

HTMLCollectionImpl(HTMLElement topLevel,short lookingFor){

  if (topLevel == null)   throw new NullPointerException("HTM011 Argument 'topLevel' is null.");

  _topLevel=topLevel;

  _lookingFor=lookingFor;

}

Location: HTMLCollectionImpl.java

Content: 

/** 

 * Returns true if index is zero (or negative).

 * @return True if index is zero

 */

boolean isZero(){

  return _index <= 0;

}

Location: HTMLCollectionImpl.java

Content: 

/** 

 * Recursive function returns the numbered element of a particular type that exist under the top level element. This is a recursive function and the top level element is passed along. <p> Note that this function must call itself with an index and get back both the element (if one was found) and the new index which is decremeneted for any like element found. Since integers are only passed by value, this function makes use of a separate class ( {@link CollectionIndex}) to hold that index.

 * @param topLevel Top level element from which to scan

 * @param index The index of the item to retreive

 * @return Number of elements

 * @see CollectionIndex

 */

private Node item(Element topLevel,CollectionIndex index){

  Node node;

  Node result;

synchronized (topLevel) {

    node=topLevel.getFirstChild();

    while (node != null) {

      if (node instanceof Element) {

        if (collectionMatch((Element)node,null)) {

          if (index.isZero())           return node;

          index.decrement();

        }

 else         if (recurse()) {

          result=item((Element)node,index);

          if (result != null)           return result;

        }

      }

      node=node.getNextSibling();

    }

  }

  return null;

}

Location: HTMLCollectionImpl.java

Content: 

/** 

 * Recursive function returns an element of a particular type with the specified name (<TT>id</TT> attribute).

 * @param topLevel Top level element from which to scan

 * @param name The named element to look for

 * @return The first named element found

 */

private Node namedItem(Element topLevel,String name){

  Node node;

  Node result;

synchronized (topLevel) {

    node=topLevel.getFirstChild();

    while (node != null) {

      if (node instanceof Element) {

        if (collectionMatch((Element)node,name))         return node;

 else         if (recurse()) {

          result=namedItem((Element)node,name);

          if (result != null)           return result;

        }

      }

      node=node.getNextSibling();

    }

    return node;

  }

}

Location: HTMLCollectionImpl.java

Content: 

/** 

 * Retrieves the named node from the collection. The name is matched case sensitive against the <TT>id</TT> attribute of each element in the collection, returning the first match. The tree is traversed in depth-first order. This method might traverse the entire document tree.

 * @param name The name of the node to return

 * @return The specified node or null if no such node found

 */

public final Node namedItem(String name){

  if (name == null)   throw new NullPointerException("HTM013 Argument 'name' is null.");

  return namedItem(_topLevel,name);

}

Location: HTMLCollectionImpl.java

Content: 

/** 

 * Returns true if scanning methods should iterate through the collection. When looking for elements in the document, recursing is needed to traverse the full document tree. When looking inside a specific element (e.g. for a cell inside a row), recursing can lead to erroneous results.

 * @return True if methods should recurse to traverse entire tree

 */

protected boolean recurse(){

  return _lookingFor > 0;

}

