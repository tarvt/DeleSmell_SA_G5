Location: TreeView.java

Content: 

/** 

 * called to handle menu actions.

 */

public void actionPerformed(java.awt.event.ActionEvent e){

  if (DEBUG)   System.err.println("ACTION: " + e.getActionCommand() + ", "+ e.paramString());

  if (e.getActionCommand().equals(quitString)) {

    System.exit(0);

  }

 else   if (e.getActionCommand().equals(openString)) {

    fni=new FileNameInput("Open File");

    fni.addTextListener(this);

    fni.setVisible(true);

  }

 else   if (e.getActionCommand().equals(expandString)) {

    expandTree();

  }

 else   if (e.getActionCommand().equals(collapseString)) {

    int rows=m_tree.getRowCount();

    for (int i=0; i < rows; i++) {

      m_tree.collapseRow(i);

    }

  }

 else   refreshUI(fname);

}

Location: TreeView.java

Content: 

/** 

 * create and return the entire UI from the root TreeNode

 */

JComponent createUI(String filename){

  if (DEBUG)   System.out.println("START createUI:" + filename);

  messageText=new JTextArea(3,40);

  messageText.setFont(new Font("dialog",Font.PLAIN,12));

  JPanel messagePanel=new JPanel(new BorderLayout());

  messagePanel.add(new JScrollPane(messageText){

    private static final long serialVersionUID=3978426918603075632L;

    public Dimension getPreferredSize(){

      Dimension size=TreeView.this.getSize();

      return new Dimension(size.width,size.height / 4);

    }

    public Dimension getMinimumSize(){

      return new Dimension(100,100);

    }

  }

,BorderLayout.CENTER);

  messagePanel.setBorder(BorderFactory.createCompoundBorder(BorderFactory.createTitledBorder("Messages"),BorderFactory.createEmptyBorder(4,4,4,4)));

  sourceText=new JTextArea();

  sourceText.setFont(new Font("monospaced",Font.PLAIN,12));

  sourceText.setBackground(Color.white);

  sourceText.setForeground(Color.black);

  sourceText.setSelectedTextColor(Color.black);

  sourceText.setSelectionColor(Color.red);

  sourceText.setEditable(false);

  JPanel sourcePanel=new JPanel(new BorderLayout());

  sourcePanel.add(new JScrollPane(sourceText){

    private static final long serialVersionUID=4121135831458068789L;

    public Dimension getPreferredSize(){

      Dimension size=TreeView.this.getSize();

      return new Dimension(size.width / 2,size.height * 3 / 5);

    }

    public Dimension getMinimumSize(){

      return new Dimension(100,100);

    }

  }

,BorderLayout.CENTER);

  sourcePanel.setBorder(BorderFactory.createCompoundBorder(BorderFactory.createTitledBorder("Source View"),BorderFactory.createEmptyBorder(4,4,4,4)));

  JPanel treePanel=new JPanel(new BorderLayout());

  m_tree=new DOMTree();

  m_tree.setCellRenderer(new XMLTreeCellRenderer());

  m_tree.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);

  m_tree.addTreeSelectionListener(new TreeSelectionListener(){

    public void valueChanged(    TreeSelectionEvent e){

      TreeNode node=(TreeNode)(e.getPath().getLastPathComponent());

      nodeSelected(node);

    }

  }

);

  m_tree.setRowHeight(18);

  m_tree.setFont(new Font("dialog",Font.PLAIN,12));

  treePanel.add(new JScrollPane(m_tree){

    private static final long serialVersionUID=3977860665971126320L;

    public Dimension getPreferredSize(){

      Dimension size=TreeView.this.getSize();

      return new Dimension(size.width / 2,size.height * 3 / 5);

    }

    public Dimension getMinimumSize(){

      return new Dimension(100,100);

    }

  }

,BorderLayout.CENTER);

  treePanel.setBorder(BorderFactory.createCompoundBorder(BorderFactory.createTitledBorder("Tree View"),BorderFactory.createEmptyBorder(4,4,4,4)));

  refreshUI(filename);

  JComponent split=new JSplitPane(JSplitPane.HORIZONTAL_SPLIT,true,treePanel,sourcePanel);

  JComponent mainSplitPane=new JSplitPane(JSplitPane.VERTICAL_SPLIT,true,split,messagePanel);

  if (DEBUG)   System.out.println("END createUI:" + filename);

  return mainSplitPane;

}

Location: TreeView.java

Content: 

static URL createURL(String name) throws Exception {

  try {

    URL u=new URL(name);

    return u;

  }

 catch (  MalformedURLException ex) {

  }

  URL u=new URL("file:" + new File(name).getAbsolutePath());

  return u;

}

Location: TreeView.java

Content: 

void expandTree(){

  int rows=0;

  for (int levels=0; levels <= 4; levels++) {

    rows=m_tree.getRowCount();

    for (int i=0; i < rows; i++) {

      m_tree.expandRow(i);

    }

  }

}

Location: TreeView.java

Content: 

/** 

 * Invoke the Parser on fname and return the root TreeNode.

 */

public Document getRoot(String filename){

  if (DEBUG)   System.out.println("START getRoot:" + filename);

  if (filename == null || filename.length() == 0)   return null;

  try {

    ef.resetErrors();

    parser.setErrorHandler(ef);

    parser.setFeature("http://apache.org/xml/features/dom/defer-node-expansion",false);

    parser.setFeature("http://apache.org/xml/features/continue-after-fatal-error",true);

    parser.setFeature("http://apache.org/xml/features/allow-java-encodings",true);

    parser.parse(filename);

    Document document=parser.getDocument();

    return document;

  }

 catch (  Exception e) {

    System.err.println("Error: Invalid XML document could not get ROOT");

    System.exit(1);

  }

  return null;

}

Location: TreeView.java

Content: 

/** 

 * called when our JTree's nodes are selected.

 */

void nodeSelected(TreeNode treeNode){

  Node node=m_tree.getNode(treeNode);

  if (node == null)   return;

  StringBuffer sb=new StringBuffer();

  messageText.selectAll();

  messageText.cut();

  Object errorObject=ef == null ? null : ef.getError(node);

  if (errorObject != null) {

    messageText.setForeground(Color.red);

    ParseError eip=(ParseError)errorObject;

    sb.append("Error: " + eip.getMsg() + "\n");

    int lineNo=eip.getLineNo();

    int pos=0;

    int next=0;

    int sizeOfTextLine=textLine.size();

    if (lineNo < sizeOfTextLine) {

      pos=((Integer)textLine.elementAt(lineNo - 1)).intValue();

      next=(lineNo == sizeOfTextLine) ? pos : (((Integer)textLine.elementAt(lineNo)).intValue());

    }

 else {

      pos=((Integer)textLine.elementAt(sizeOfTextLine - 1)).intValue();

      next=pos + 2;

    }

    sourceText.select(pos,next);

  }

 else {

    messageText.setForeground(Color.black);

    sourceText.select(0,0);

  }

  if (node.getNodeType() == Node.ELEMENT_NODE || node.getNodeType() == Node.TEXT_NODE || node.getNodeType() == Node.CDATA_SECTION_NODE) {

    sb.append(node.toString());

  }

  messageText.append(sb.toString());

}

Location: TreeView.java

Content: 

/** 

 * read the xml file from filename and append it to the JTextArea

 */

synchronized void readXMLFile(String filename,JTextArea ta){

  if (DEBUG)   System.out.println("START readXMLFile" + filename);

  if (filename == null || filename.length() == 0)   return;

  InputStream fis=null;

  BufferedReader dis=null;

  try {

    java.net.URL file=createURL(filename);

    fis=file.openStream();

    String javaEncoding=parser.getJavaEncoding();

    try {

      dis=new BufferedReader(new InputStreamReader(fis,javaEncoding));

    }

 catch (    UnsupportedEncodingException ex) {

      dis=new BufferedReader(new InputStreamReader(fis));

    }

  }

 catch (  Exception ex) {

    System.err.println("ERROR: Xerces.readXMLFile: " + ex);

    return;

  }

  String line;

  int len=0;

  textLine=new Vector();

  String nl="\n";

  int nllen=nl.length();

  StringBuffer sb=new StringBuffer();

  try {

    readline:     while ((line=dis.readLine()) != null) {

      sb.append(line + nl);

      textLine.addElement(new Integer(len));

      len+=line.length() + nllen;

    }

    ta.append(sb.toString());

  }

 catch (  IOException io) {

    System.err.println(io);

    return;

  }

  if (DEBUG)   System.out.println("END readXMLFile" + filename);

  return;

}

Location: TreeView.java

Content: 

/** 

 * refreshUI is called when we have a new filename to parse.

 */

void refreshUI(String filename){

  if (DEBUG)   System.out.println("START refreshUI:" + filename);

  messageText.selectAll();

  messageText.cut();

  if (filename == null || filename.length() == 0) {

    messageText.setForeground(Color.red);

    messageText.append("No input XML filename specified:" + filename + "\n");

    return;

  }

  fname=filename;

  Document newRoot=getRoot(filename);

  if (newRoot == null) {

    messageText.setForeground(Color.red);

    messageText.append("Unable to get new DOM Tree for:" + filename + "\n");

    return;

  }

  m_tree.setDocument(newRoot);

  sourceText.selectAll();

  sourceText.cut();

  readXMLFile(fname,sourceText);

  setTitle(title + ": " + filename);

  if (m_tree != null)   expandTree();

  if (ef != null && ef.getErrorNodes() != null && ef.getErrorNodes().size() > 0) {

    messageText.setForeground(Color.red);

    messageText.append("XML source, " + fname + " has errors.\n");

    messageText.append("Please click on red Tree View items for details.\n");

    Hashtable errors=ef.getErrorNodes();

    Iterator entries=errors.entrySet().iterator();

    while (entries.hasNext()) {

      Map.Entry entry=(Map.Entry)entries.next();

      Node node=(Node)entry.getKey();

      ParseError parseError=(ParseError)entry.getValue();

      messageText.append("node=" + node.getNodeName() + ", error="+ parseError.getMsg()+ "\n");

    }

  }

  if (DEBUG)   System.out.println("END refreshUI:" + filename);

}

Location: TreeView.java

Content: 

/** 

 * called when a the text value has changed in the FileNameInput. read in new XML file.

 */

public void textValueChanged(TextEvent e){

  try {

    if (fni != null)     fni.setVisible(false);

    fname=((JTextField)e.getSource()).getText();

    if (DEBUG)     System.out.println("textValueChanged:" + fname);

    refreshUI(fname);

  }

 catch (  Exception ex) {

    System.err.println("Error: while trying to refresh gui");

    System.exit(1);

  }

}

Location: TreeView.java

Content: 

/** 

 * Constructor

 */

public TreeView(){

  this(null);

}

Location: TreeView.java

Content: 

/** 

 * Constructor

 */

public TreeView(String uri){

  super(uri);

  openFolder=DefaultImages.createOpenFolderImage();

  closedFolder=DefaultImages.createClosedFolderImage();

  leafImage=DefaultImages.createLeafImage();

  parser=new DOMParserSaveEncoding();

  ef=new ErrorStorer();

  fname=uri;

  JMenuBar jmb=new JMenuBar();

  JMenu fileMenu=new JMenu("File");

  JMenuItem item;

  item=new JMenuItem(openString);

  fileMenu.add(item);

  item.addActionListener(this);

  item=new JMenuItem(quitString);

  fileMenu.add(item);

  item.addActionListener(this);

  JMenu shortcutMenu=new JMenu("Shortcuts");

  item=new JMenuItem(expandString);

  shortcutMenu.add(item);

  item.addActionListener(this);

  item=new JMenuItem(collapseString);

  shortcutMenu.add(item);

  item.addActionListener(this);

  item=new JMenuItem(reloadString);

  shortcutMenu.add(item);

  item.addActionListener(this);

  jmb.add(fileMenu);

  jmb.add(shortcutMenu);

  setJMenuBar(jmb);

  getContentPane().add(createUI(fname));

}

