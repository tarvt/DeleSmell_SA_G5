Location: SoftReferenceSymbolTable.java

Content: 

/** 

 * Removes stale symbols from the table.

 */

private void clean(){

  SREntry entry=(SREntry)fReferenceQueue.poll();

  if (entry != null) {

    do {

      removeEntry(entry);

      entry=(SREntry)fReferenceQueue.poll();

    }

 while (entry != null);

    if (fCount < (fThreshold >> 2)) {

      compact();

    }

  }

}

Location: SoftReferenceSymbolTable.java

Content: 

/** 

 * Reduces the capacity of and internally reorganizes this  SymbolTable, in order to accommodate and access its entries in a more memory efficient way. This method is called automatically when  the number of keys in the SymbolTable drops below 25% of this hashtable's load factor (as a result of SoftReferences which have been cleared).

 */

protected void compact(){

  rehashCommon(((int)(fCount / fLoadFactor)) * 2 + 1);

}

Location: SoftReferenceSymbolTable.java

Content: 

private void removeEntry(SREntry entry){

  final int bucket=entry.bucket;

  if (bucket >= 0) {

    if (entry.next != null) {

      entry.next.prev=entry.prev;

    }

    if (entry.prev != null) {

      entry.prev.next=entry.next;

    }

 else {

      fBuckets[bucket]=entry.next;

    }

    --fCount;

  }

}

Location: SoftReferenceSymbolTable.java

Content: 

/** 

 * Constructs a new, empty SymbolTable with a default initial capacity (101) and load factor, which is <tt>0.75</tt>. 

 */

public SoftReferenceSymbolTable(){

  this(TABLE_SIZE,0.75f);

}

Location: SoftReferenceSymbolTable.java

Content: 

/** 

 * Constructs a new, empty SymbolTable with the specified initial capacity and default load factor, which is <tt>0.75</tt>.

 * @param initialCapacity   the initial capacity of the hashtable.

 * @throws IllegalArgumentException if the initial capacity is lessthan zero.

 */

public SoftReferenceSymbolTable(int initialCapacity){

  this(initialCapacity,0.75f);

}

Location: SoftReferenceSymbolTable.java

Content: 

/** 

 * Constructs a new, empty SymbolTable with the specified initial  capacity and the specified load factor.

 * @param initialCapacity   the initial capacity of the SymbolTable.

 * @param loadFactor        the load factor of the SymbolTable.

 * @throws IllegalArgumentException  if the initial capacity is lessthan zero, or if the load factor is nonpositive.

 */

public SoftReferenceSymbolTable(int initialCapacity,float loadFactor){

  super(1,loadFactor);

  if (initialCapacity < 0) {

    throw new IllegalArgumentException("Illegal Capacity: " + initialCapacity);

  }

  if (loadFactor <= 0 || Float.isNaN(loadFactor)) {

    throw new IllegalArgumentException("Illegal Load: " + loadFactor);

  }

  if (initialCapacity == 0) {

    initialCapacity=1;

  }

  fLoadFactor=loadFactor;

  fTableSize=initialCapacity;

  fBuckets=new SREntry[fTableSize];

  fThreshold=(int)(fTableSize * loadFactor);

  fCount=0;

  fReferenceQueue=new ReferenceQueue();

}

