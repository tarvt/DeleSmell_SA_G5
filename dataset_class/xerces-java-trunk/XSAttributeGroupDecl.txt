Location: XSAttributeGroupDecl.java

Content: 

public String addAttributeUse(XSAttributeUseImpl attrUse){

  if (attrUse.fUse != SchemaSymbols.USE_PROHIBITED) {

    if (attrUse.fAttrDecl.fType.isIDType()) {

      if (fIDAttrName == null)       fIDAttrName=attrUse.fAttrDecl.fName;

 else       return fIDAttrName;

    }

  }

  if (fAttrUseNum == fAttributeUses.length) {

    fAttributeUses=resize(fAttributeUses,fAttrUseNum * 2);

  }

  fAttributeUses[fAttrUseNum++]=attrUse;

  return null;

}

Location: XSAttributeGroupDecl.java

Content: 

public XSAttributeUse getAttributeUseNoProhibited(String namespace,String name){

  for (int i=0; i < fAttrUseNum; i++) {

    if ((fAttributeUses[i].fAttrDecl.fTargetNamespace == namespace) && (fAttributeUses[i].fAttrDecl.fName == name) && (fAttributeUses[i].fUse != SchemaSymbols.USE_PROHIBITED))     return fAttributeUses[i];

  }

  return null;

}

Location: XSAttributeGroupDecl.java

Content: 

public XSAttributeUse getAttributeUse(String namespace,String name){

  for (int i=0; i < fAttrUseNum; i++) {

    if ((fAttributeUses[i].fAttrDecl.fTargetNamespace == namespace) && (fAttributeUses[i].fAttrDecl.fName == name))     return fAttributeUses[i];

  }

  return null;

}

Location: XSAttributeGroupDecl.java

Content: 

public void removeProhibitedAttrs(){

  if (fAttrUseNum == 0)   return;

  int count=0;

  XSAttributeUseImpl[] uses=new XSAttributeUseImpl[fAttrUseNum];

  for (int i=0; i < fAttrUseNum; i++) {

    if (fAttributeUses[i].fUse != SchemaSymbols.USE_PROHIBITED) {

      uses[count++]=fAttributeUses[i];

    }

  }

  fAttributeUses=uses;

  fAttrUseNum=count;

}

Location: XSAttributeGroupDecl.java

Content: 

public void replaceAttributeUse(XSAttributeUse oldUse,XSAttributeUseImpl newUse){

  for (int i=0; i < fAttrUseNum; i++) {

    if (fAttributeUses[i] == oldUse) {

      fAttributeUses[i]=newUse;

    }

  }

}

Location: XSAttributeGroupDecl.java

Content: 

static final XSAttributeUseImpl[] resize(XSAttributeUseImpl[] oldArray,int newSize){

  XSAttributeUseImpl[] newArray=new XSAttributeUseImpl[newSize];

  System.arraycopy(oldArray,0,newArray,0,Math.min(oldArray.length,newSize));

  return newArray;

}

Location: XSAttributeGroupDecl.java

Content: 

void setNamespaceItem(XSNamespaceItem namespaceItem){

  fNamespaceItem=namespaceItem;

}

Location: XSAttributeGroupDecl.java

Content: 

/** 

 * Check that the attributes in this group validly restrict those from a base group. If an error is found, an Object[] is returned. This contains the arguments for the error message describing the error. The last element in the array (at index arr.length - 1) is the the error code. Returns null if there is no error. REVISIT: is there a better way of returning the appropriate information for the error?

 * @param typeName the name of the type containing this attribute group, used for error reporting purposes

 * @param baseGroup the XSAttributeGroupDecl that is the base we are checking against

 */

public Object[] validRestrictionOf(String typeName,XSAttributeGroupDecl baseGroup){

  Object[] errorArgs=null;

  XSAttributeUseImpl attrUse=null;

  XSAttributeDecl attrDecl=null;

  XSAttributeUseImpl baseAttrUse=null;

  XSAttributeDecl baseAttrDecl=null;

  for (int i=0; i < fAttrUseNum; i++) {

    attrUse=fAttributeUses[i];

    attrDecl=attrUse.fAttrDecl;

    baseAttrUse=(XSAttributeUseImpl)baseGroup.getAttributeUse(attrDecl.fTargetNamespace,attrDecl.fName);

    if (baseAttrUse != null) {

      if (baseAttrUse.getRequired() && !attrUse.getRequired()) {

        errorArgs=new Object[]{typeName,attrDecl.fName,attrUse.fUse == SchemaSymbols.USE_OPTIONAL ? SchemaSymbols.ATTVAL_OPTIONAL : SchemaSymbols.ATTVAL_PROHIBITED,"derivation-ok-restriction.2.1.1"};

        return errorArgs;

      }

      if (attrUse.fUse == SchemaSymbols.USE_PROHIBITED) {

        continue;

      }

      baseAttrDecl=baseAttrUse.fAttrDecl;

      if (!XSConstraints.checkSimpleDerivationOk(attrDecl.fType,baseAttrDecl.fType,baseAttrDecl.fType.getFinal())) {

        errorArgs=new Object[]{typeName,attrDecl.fName,attrDecl.fType.getName(),baseAttrDecl.fType.getName(),"derivation-ok-restriction.2.1.2"};

        return errorArgs;

      }

      int baseConsType=baseAttrUse.fConstraintType != XSConstants.VC_NONE ? baseAttrUse.fConstraintType : baseAttrDecl.getConstraintType();

      int thisConstType=attrUse.fConstraintType != XSConstants.VC_NONE ? attrUse.fConstraintType : attrDecl.getConstraintType();

      if (baseConsType == XSConstants.VC_FIXED) {

        if (thisConstType != XSConstants.VC_FIXED) {

          errorArgs=new Object[]{typeName,attrDecl.fName,"derivation-ok-restriction.2.1.3.a"};

          return errorArgs;

        }

 else {

          ValidatedInfo baseFixedValue=(baseAttrUse.fDefault != null ? baseAttrUse.fDefault : baseAttrDecl.fDefault);

          ValidatedInfo thisFixedValue=(attrUse.fDefault != null ? attrUse.fDefault : attrDecl.fDefault);

          if (!baseFixedValue.actualValue.equals(thisFixedValue.actualValue)) {

            errorArgs=new Object[]{typeName,attrDecl.fName,thisFixedValue.stringValue(),baseFixedValue.stringValue(),"derivation-ok-restriction.2.1.3.b"};

            return errorArgs;

          }

        }

      }

    }

 else {

      if (baseGroup.fAttributeWC == null) {

        errorArgs=new Object[]{typeName,attrDecl.fName,"derivation-ok-restriction.2.2.a"};

        return errorArgs;

      }

 else       if (!baseGroup.fAttributeWC.allowNamespace(attrDecl.fTargetNamespace)) {

        errorArgs=new Object[]{typeName,attrDecl.fName,attrDecl.fTargetNamespace == null ? "" : attrDecl.fTargetNamespace,"derivation-ok-restriction.2.2.b"};

        return errorArgs;

      }

    }

  }

  for (int i=0; i < baseGroup.fAttrUseNum; i++) {

    baseAttrUse=baseGroup.fAttributeUses[i];

    if (baseAttrUse.fUse == SchemaSymbols.USE_REQUIRED) {

      baseAttrDecl=baseAttrUse.fAttrDecl;

      if (getAttributeUse(baseAttrDecl.fTargetNamespace,baseAttrDecl.fName) == null) {

        errorArgs=new Object[]{typeName,baseAttrUse.fAttrDecl.fName,"derivation-ok-restriction.3"};

        return errorArgs;

      }

    }

  }

  if (fAttributeWC != null) {

    if (baseGroup.fAttributeWC == null) {

      errorArgs=new Object[]{typeName,"derivation-ok-restriction.4.1"};

      return errorArgs;

    }

    if (!fAttributeWC.isSubsetOf(baseGroup.fAttributeWC)) {

      errorArgs=new Object[]{typeName,"derivation-ok-restriction.4.2"};

      return errorArgs;

    }

    if (fAttributeWC.weakerProcessContents(baseGroup.fAttributeWC)) {

      errorArgs=new Object[]{typeName,fAttributeWC.getProcessContentsAsString(),baseGroup.fAttributeWC.getProcessContentsAsString(),"derivation-ok-restriction.4.3"};

      return errorArgs;

    }

  }

  return null;

}

