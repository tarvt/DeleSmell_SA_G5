Location: XNIException.java

Content: 

/** 

 * Returns the cause of this <code>XNIException</code>. 

 */

public Throwable getCause(){

  return getException();

}

Location: XNIException.java

Content: 

/** 

 * Initializes the cause of this <code>XNIException</code>. The value must be an instance of <code>Exception</code> or <code>null</code>.

 * @param throwable the cause

 * @return this exception

 * @throws IllegalStateException if a cause has already been set

 * @throws IllegalArgumentException if the cause is this exception

 * @throws ClassCastException if the cause is not assignable to <code>Exception</code>

 */

public synchronized Throwable initCause(Throwable throwable){

  if (fException != this) {

    throw new IllegalStateException();

  }

  if (throwable == this) {

    throw new IllegalArgumentException();

  }

  fException=(Exception)throwable;

  return this;

}

Location: XNIException.java

Content: 

/** 

 * Constructs an XNI exception with a wrapped exception. 

 * @param exception The wrapped exception.

 */

public XNIException(Exception exception){

  super(exception.getMessage());

  fException=exception;

}

Location: XNIException.java

Content: 

/** 

 * Constructs an XNI exception with a message. 

 * @param message The exception message.

 */

public XNIException(String message){

  super(message);

}

Location: XNIException.java

Content: 

/** 

 * Constructs an XNI exception with a message and wrapped exception. 

 * @param message The exception message.

 * @param exception The wrapped exception.

 */

public XNIException(String message,Exception exception){

  super(message);

  fException=exception;

}

