Location: SymbolHash.java

Content: 

/** 

 * Return key/value pairs of all entries in the map

 */

public Object[] getEntries(){

  Object[] entries=new Object[fNum << 1];

  for (int i=0, j=0; i < fTableSize && j < fNum << 1; i++) {

    for (Entry entry=fBuckets[i]; entry != null; entry=entry.next) {

      entries[j]=entry.key;

      entries[++j]=entry.value;

      j++;

    }

  }

  return entries;

}

Location: SymbolHash.java

Content: 

/** 

 * Add all values to the given array. The array must have enough entry.

 * @param elements  the array to store the elements

 * @param from      where to start store element in the array

 * @return          number of elements copied to the array

 */

public int getValues(Object[] elements,int from){

  for (int i=0, j=0; i < fTableSize && j < fNum; i++) {

    for (Entry entry=fBuckets[i]; entry != null; entry=entry.next) {

      elements[from + j]=entry.value;

      j++;

    }

  }

  return fNum;

}

Location: SymbolHash.java

Content: 

/** 

 * Get the value associated with the given key.

 * @param key

 * @return the value associated with the given key.

 */

public Object get(Object key){

  int bucket=hash(key) % fTableSize;

  Entry entry=search(key,bucket);

  if (entry != null) {

    return entry.value;

  }

  return null;

}

Location: SymbolHash.java

Content: 

/** 

 * Returns a hashcode value for the specified key.

 * @param key The key to hash.

 */

protected int hash(Object key){

  if (fHashMultipliers == null || !(key instanceof String)) {

    return key.hashCode() & 0x7FFFFFFF;

  }

  return hash0((String)key);

}

Location: SymbolHash.java

Content: 

/** 

 * Make a clone of this object.

 */

public SymbolHash makeClone(){

  SymbolHash newTable=new SymbolHash(fTableSize);

  newTable.fNum=fNum;

  newTable.fHashMultipliers=fHashMultipliers != null ? (int[])fHashMultipliers.clone() : null;

  for (int i=0; i < fTableSize; i++) {

    if (fBuckets[i] != null) {

      newTable.fBuckets[i]=fBuckets[i].makeClone();

    }

  }

  return newTable;

}

Location: SymbolHash.java

Content: 

/** 

 * Adds the key/value mapping to the key table. If the key already exists,  the previous value associated with this key is overwritten by the new value.

 * @param key

 * @param value 

 */

public void put(Object key,Object value){

  int collisionCount=0;

  final int hash=hash(key);

  int bucket=hash % fTableSize;

  for (Entry entry=fBuckets[bucket]; entry != null; entry=entry.next) {

    if (key.equals(entry.key)) {

      entry.value=value;

      return;

    }

    ++collisionCount;

  }

  if (fNum >= fTableSize) {

    rehash();

    bucket=hash % fTableSize;

  }

 else   if (collisionCount >= MAX_HASH_COLLISIONS && key instanceof String) {

    hongshuai();

    if (fHashMultipliers == null) {

      fHashMultipliers=new int[MULTIPLIERS_SIZE];

    }

    PrimeNumberSequenceGenerator.generateSequence(fHashMultipliers);

    rehashCommon(fBuckets.length);

    bucket=hash(key) % fTableSize;

  }

  Entry entry=new Entry(key,value,fBuckets[bucket]);

  fBuckets[bucket]=entry;

  ++fNum;

}

Location: SymbolHash.java

Content: 

protected Entry search(Object key,int bucket){

  for (Entry entry=fBuckets[bucket]; entry != null; entry=entry.next) {

    if (key.equals(entry.key))     return entry;

  }

  return null;

}

Location: SymbolHash.java

Content: 

/** 

 * Constructs a key table with the default size. 

 */

public SymbolHash(){

  this(TABLE_SIZE);

}

Location: SymbolHash.java

Content: 

/** 

 * Constructs a key table with a given size.

 * @param size  the size of the key table.

 */

public SymbolHash(int size){

  fTableSize=size;

  fBuckets=new Entry[fTableSize];

}

