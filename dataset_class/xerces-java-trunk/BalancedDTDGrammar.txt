Location: BalancedDTDGrammar.java

Content: 

/** 

 * Creates a subtree from the leaf nodes at the current depth.

 */

private int addContentSpecNodes(int begin,int end){

  if (begin == end) {

    return fGroupIndexStack[fDepth][begin];

  }

  final int middle=(begin + end) >>> 1;

  return addContentSpecNode(fOpStack[fDepth],addContentSpecNodes(begin,middle),addContentSpecNodes(middle + 1,end));

}

Location: BalancedDTDGrammar.java

Content: 

/** 

 * Adds the content spec to the given element declaration.

 */

protected final void addContentSpecToElement(XMLElementDecl elementDecl){

  int contentSpec=fGroupIndexStackSizes[0] > 0 ? fGroupIndexStack[0][0] : -1;

  setContentSpecIndex(fCurrentElementIndex,contentSpec);

}

Location: BalancedDTDGrammar.java

Content: 

/** 

 * Add XMLContentSpec to the current group.

 * @param contentSpec handle to the XMLContentSpec to add to the current group

 */

private void addToCurrentGroup(int contentSpec){

  int[] currentGroup=fGroupIndexStack[fDepth];

  int length=fGroupIndexStackSizes[fDepth]++;

  if (currentGroup == null) {

    currentGroup=new int[8];

    fGroupIndexStack[fDepth]=currentGroup;

  }

 else   if (length == currentGroup.length) {

    int[] newGroup=new int[currentGroup.length * 2];

    System.arraycopy(currentGroup,0,newGroup,0,currentGroup.length);

    currentGroup=newGroup;

    fGroupIndexStack[fDepth]=currentGroup;

  }

  currentGroup[length]=contentSpec;

}

Location: BalancedDTDGrammar.java

Content: 

/** 

 * Default constructor. 

 */

public BalancedDTDGrammar(SymbolTable symbolTable,XMLDTDDescription desc){

  super(symbolTable,desc);

}

Location: BalancedDTDGrammar.java

Content: 

/** 

 * Initialize the stacks which temporarily hold content models.

 */

private void initializeContentModelStacks(){

  if (fOpStack == null) {

    fOpStack=new short[8];

    fGroupIndexStack=new int[8][];

    fGroupIndexStackSizes=new int[8];

  }

 else   if (fDepth == fOpStack.length) {

    short[] newOpStack=new short[fDepth * 2];

    System.arraycopy(fOpStack,0,newOpStack,0,fDepth);

    fOpStack=newOpStack;

    int[][] newGroupIndexStack=new int[fDepth * 2][];

    System.arraycopy(fGroupIndexStack,0,newGroupIndexStack,0,fDepth);

    fGroupIndexStack=newGroupIndexStack;

    int[] newGroupIndexStackLengths=new int[fDepth * 2];

    System.arraycopy(fGroupIndexStackSizes,0,newGroupIndexStackLengths,0,fDepth);

    fGroupIndexStackSizes=newGroupIndexStackLengths;

  }

  fOpStack[fDepth]=-1;

  fGroupIndexStackSizes[fDepth]=0;

}

