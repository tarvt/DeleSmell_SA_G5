Location: RootSimpleTypeDefinitionTest.java

Content: 

public RootSimpleTypeDefinitionTest(String name){

  super(name);

  String ns="x" + XMLConstants.W3C_XML_SCHEMA_NS_URI;

  ns=ns.substring(1);

  typeString=new QName(ns,"string","xsd");

  typeNonNegInt=new QName(ns,"nonNegativeInteger","xsd");

}

Location: RootSimpleTypeDefinitionTest.java

Content: 

public void testSettingInvalidSimpleType() throws Exception {

  try {

    fValidator.setProperty(ROOT_TYPE,typeNonNegInt);

  }

 catch (  SAXException e1) {

    Assert.fail("Problem setting property: " + e1.getMessage());

  }

  try {

    validateDocument();

  }

 catch (  Exception e) {

    Assert.fail("Validation failed: " + e.getMessage());

  }

  assertError(INVALID_TYPE_ERROR);

  assertError(MININCLUSIVE_DERIVATION_ERROR);

  assertValidity(ItemPSVI.VALIDITY_INVALID,fRootNode.getValidity());

  assertValidationAttempted(ItemPSVI.VALIDATION_FULL,fRootNode.getValidationAttempted());

  assertElementNull(fRootNode.getElementDeclaration());

  assertTypeName("nonNegativeInteger",fRootNode.getTypeDefinition().getName());

}

Location: RootSimpleTypeDefinitionTest.java

Content: 

public void testSettingSimpleType() throws Exception {

  try {

    fValidator.setProperty(ROOT_TYPE,typeString);

  }

 catch (  SAXException e1) {

    Assert.fail("Problem setting property: " + e1.getMessage());

  }

  try {

    validateDocument();

  }

 catch (  Exception e) {

    Assert.fail("Validation failed: " + e.getMessage());

  }

  assertValidity(ItemPSVI.VALIDITY_VALID,fRootNode.getValidity());

  assertValidationAttempted(ItemPSVI.VALIDATION_FULL,fRootNode.getValidationAttempted());

  assertElementNull(fRootNode.getElementDeclaration());

  assertTypeName("string",fRootNode.getTypeDefinition().getName());

}

