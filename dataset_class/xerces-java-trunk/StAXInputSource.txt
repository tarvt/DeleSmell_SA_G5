Location: StAXInputSource.java

Content: 

private static String getEventReaderSystemId(XMLEventReader reader){

  try {

    if (reader != null) {

      return reader.peek().getLocation().getSystemId();

    }

  }

 catch (  XMLStreamException e) {

  }

  return null;

}

Location: StAXInputSource.java

Content: 

private static String getStreamReaderSystemId(XMLStreamReader reader){

  if (reader != null) {

    return reader.getLocation().getSystemId();

  }

  return null;

}

Location: StAXInputSource.java

Content: 

public XMLEventReader getXMLEventReader(){

  return fEventReader;

}

Location: StAXInputSource.java

Content: 

public XMLStreamReader getXMLStreamReader(){

  return fStreamReader;

}

Location: StAXInputSource.java

Content: 

public boolean shouldConsumeRemainingContent(){

  return fConsumeRemainingContent;

}

Location: StAXInputSource.java

Content: 

public StAXInputSource(XMLEventReader source){

  this(source,false);

}

Location: StAXInputSource.java

Content: 

public StAXInputSource(XMLEventReader source,boolean consumeRemainingContent){

  super(null,getEventReaderSystemId(source),null);

  if (source == null) {

    throw new IllegalArgumentException("XMLEventReader parameter cannot be null.");

  }

  fStreamReader=null;

  fEventReader=source;

  fConsumeRemainingContent=consumeRemainingContent;

}

Location: StAXInputSource.java

Content: 

public StAXInputSource(XMLStreamReader source){

  this(source,false);

}

Location: StAXInputSource.java

Content: 

public StAXInputSource(XMLStreamReader source,boolean consumeRemainingContent){

  super(null,getStreamReaderSystemId(source),null);

  if (source == null) {

    throw new IllegalArgumentException("XMLStreamReader parameter cannot be null.");

  }

  fStreamReader=source;

  fEventReader=null;

  fConsumeRemainingContent=consumeRemainingContent;

}

