Location: IntStack.java

Content: 

/** 

 * Returns the element at the specified depth in the stack. 

 */

public int elementAt(int depth){

  return fData[depth];

}

Location: IntStack.java

Content: 

/** 

 * Ensures capacity. 

 */

private void ensureCapacity(int size){

  if (fData == null) {

    fData=new int[32];

  }

 else   if (fData.length <= size) {

    int[] newdata=new int[fData.length * 2];

    System.arraycopy(fData,0,newdata,0,fData.length);

    fData=newdata;

  }

}

Location: IntStack.java

Content: 

/** 

 * Peeks at the top of the stack. 

 */

public int peek(){

  return fData[fDepth - 1];

}

Location: IntStack.java

Content: 

/** 

 * Pops a value off of the stack. 

 */

public int pop(){

  return fData[--fDepth];

}

Location: IntStack.java

Content: 

/** 

 * Prints the stack. 

 */

public void print(){

  System.out.print('(');

  System.out.print(fDepth);

  System.out.print(") {");

  for (int i=0; i < fDepth; i++) {

    if (i == 3) {

      System.out.print(" ...");

      break;

    }

    System.out.print(' ');

    System.out.print(fData[i]);

    if (i < fDepth - 1) {

      System.out.print(',');

    }

  }

  System.out.print(" }");

  System.out.println();

}

Location: IntStack.java

Content: 

/** 

 * Pushes a value onto the stack. 

 */

public void push(int value){

  ensureCapacity(fDepth + 1);

  fData[fDepth++]=value;

}

Location: IntStack.java

Content: 

/** 

 * Returns the size of the stack. 

 */

public int size(){

  return fDepth;

}

