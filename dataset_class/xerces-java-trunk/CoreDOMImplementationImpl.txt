Location: CoreDOMImplementationImpl.java

Content: 

/** 

 * NON-DOM:  increment document/doctype counter 

 */

protected synchronized int assignDocTypeNumber(){

  return ++docAndDoctypeCounter;

}

Location: CoreDOMImplementationImpl.java

Content: 

/** 

 * NON-DOM:  increment document/doctype counter 

 */

protected synchronized int assignDocumentNumber(){

  return ++docAndDoctypeCounter;

}

Location: CoreDOMImplementationImpl.java

Content: 

final void checkQName(String qname){

  int index=qname.indexOf(':');

  int lastIndex=qname.lastIndexOf(':');

  int length=qname.length();

  if (index == 0 || index == length - 1 || lastIndex != index) {

    String msg=DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN,"NAMESPACE_ERR",null);

    throw new DOMException(DOMException.NAMESPACE_ERR,msg);

  }

  int start=0;

  if (index > 0) {

    if (!XMLChar.isNCNameStart(qname.charAt(start))) {

      String msg=DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN,"INVALID_CHARACTER_ERR",null);

      throw new DOMException(DOMException.INVALID_CHARACTER_ERR,msg);

    }

    for (int i=1; i < index; i++) {

      if (!XMLChar.isNCName(qname.charAt(i))) {

        String msg=DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN,"INVALID_CHARACTER_ERR",null);

        throw new DOMException(DOMException.INVALID_CHARACTER_ERR,msg);

      }

    }

    start=index + 1;

  }

  if (!XMLChar.isNCNameStart(qname.charAt(start))) {

    String msg=DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN,"INVALID_CHARACTER_ERR",null);

    throw new DOMException(DOMException.INVALID_CHARACTER_ERR,msg);

  }

  for (int i=start + 1; i < length; i++) {

    if (!XMLChar.isNCName(qname.charAt(i))) {

      String msg=DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN,"INVALID_CHARACTER_ERR",null);

      throw new DOMException(DOMException.INVALID_CHARACTER_ERR,msg);

    }

  }

}

Location: CoreDOMImplementationImpl.java

Content: 

protected CoreDocumentImpl createDocument(DocumentType doctype){

  return new CoreDocumentImpl(doctype);

}

Location: CoreDOMImplementationImpl.java

Content: 

/** 

 * DOM Level 3 LS CR - Experimental. Create a new empty input source.

 * @return  The newly created input object.

 */

public LSInput createLSInput(){

  return new DOMInputImpl();

}

Location: CoreDOMImplementationImpl.java

Content: 

/** 

 * DOM Level 3 LS CR - Experimental. Create a new empty output destination object where <code>LSOutput.characterStream</code>, <code>LSOutput.byteStream</code>, <code>LSOutput.systemId</code>, <code>LSOutput.encoding</code> are null.

 * @return  The newly created output object.

 */

public LSOutput createLSOutput(){

  return new DOMOutputImpl();

}

Location: CoreDOMImplementationImpl.java

Content: 

/** 

 * DOM Level 3 LS CR - Experimental. Create a new <code>LSParser</code>. The newly constructed parser may then be configured by means of its <code>DOMConfiguration</code> object, and used to parse documents by means of its <code>parse</code> method.

 * @param mode  The <code>mode</code> argument is either<code>MODE_SYNCHRONOUS</code> or <code>MODE_ASYNCHRONOUS</code>, if <code>mode</code> is <code>MODE_SYNCHRONOUS</code> then the <code>LSParser</code> that is created will operate in synchronous mode, if it's <code>MODE_ASYNCHRONOUS</code> then the <code>LSParser</code> that is created will operate in asynchronous mode.

 * @param schemaType  An absolute URI representing the type of the schemalanguage used during the load of a <code>Document</code> using the newly created <code>LSParser</code>. Note that no lexical checking is done on the absolute URI. In order to create a <code>LSParser</code> for any kind of schema types (i.e. the LSParser will be free to use any schema found), use the value <code>null</code>. <p ><b>Note:</b>    For W3C XML Schema [<a href='http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/'>XML Schema Part 1</a>] , applications must use the value <code>"http://www.w3.org/2001/XMLSchema"</code>. For XML DTD [<a href='http://www.w3.org/TR/2000/REC-xml-20001006'>XML 1.0</a>], applications must use the value <code>"http://www.w3.org/TR/REC-xml"</code>. Other Schema languages are outside the scope of the W3C and therefore should recommend an absolute URI in order to use this method.

 * @return  The newly created <code>LSParser</code> object. This<code>LSParser</code> is either synchronous or asynchronous depending on the value of the <code>mode</code> argument. <p ><b>Note:</b>    By default, the newly created <code>LSParser</code> does not contain a <code>DOMErrorHandler</code>, i.e. the value of the "<a href='http://www.w3.org/TR/2003/WD-DOM-Level-3-Core-20030609/core.html#parameter-error-handler'> error-handler</a>" configuration parameter is <code>null</code>. However, implementations may provide a default error handler at creation time. In that case, the initial value of the <code>"error-handler"</code> configuration parameter on the new created <code>LSParser</code> contains a reference to the default error handler.

 * @exception DOMException NOT_SUPPORTED_ERR: Raised if the requested mode or schema type is not supported.

 */

public LSParser createLSParser(short mode,String schemaType) throws DOMException {

  if (mode != DOMImplementationLS.MODE_SYNCHRONOUS || (schemaType != null && !"http://www.w3.org/2001/XMLSchema".equals(schemaType) && !"http://www.w3.org/TR/REC-xml".equals(schemaType))) {

    String msg=DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN,"NOT_SUPPORTED_ERR",null);

    throw new DOMException(DOMException.NOT_SUPPORTED_ERR,msg);

  }

  if (schemaType != null && schemaType.equals("http://www.w3.org/TR/REC-xml")) {

    return new DOMParserImpl("org.apache.xerces.parsers.XML11DTDConfiguration",schemaType);

  }

 else {

    return new DOMParserImpl("org.apache.xerces.parsers.XIncludeAwareParserConfiguration",schemaType);

  }

}

Location: CoreDOMImplementationImpl.java

Content: 

/** 

 * DOM Level 3 LS CR - Experimental. Create a new <code>LSSerializer</code> object.

 * @return The newly created <code>LSSerializer</code> object.<p ><b>Note:</b>    By default, the newly created <code>LSSerializer</code> has no <code>DOMErrorHandler</code>, i.e. the value of the <code>"error-handler"</code> configuration parameter is <code>null</code>. However, implementations may provide a default error handler at creation time. In that case, the initial value of the <code>"error-handler"</code> configuration parameter on the new created <code>LSSerializer</code> contains a reference to the default error handler.

 */

public LSSerializer createLSSerializer(){

  try {

    Class serializerClass=ObjectFactory.findProviderClass("org.apache.xml.serializer.dom3.LSSerializerImpl",ObjectFactory.findClassLoader(),true);

    return (LSSerializer)serializerClass.newInstance();

  }

 catch (  Exception e) {

  }

  return new DOMSerializerImpl();

}

Location: CoreDOMImplementationImpl.java

Content: 

/** 

 * NON-DOM: retrieve DTD loader 

 */

synchronized final XMLDTDLoader getDTDLoader(String xmlVersion){

  if ("1.1".equals(xmlVersion)) {

    while (freeXML11DTDLoaderIndex >= 0) {

      SoftReference ref=xml11DTDLoaders[freeXML11DTDLoaderIndex];

      XMLDTDLoaderHolder holder=(XMLDTDLoaderHolder)ref.get();

      if (holder != null && holder.loader != null) {

        XMLDTDLoader val=holder.loader;

        holder.loader=null;

        --freeXML11DTDLoaderIndex;

        return val;

      }

      xml11DTDLoaders[freeXML11DTDLoaderIndex--]=null;

    }

    return (XMLDTDLoader)(ObjectFactory.newInstance("org.apache.xerces.impl.dtd.XML11DTDProcessor",ObjectFactory.findClassLoader(),true));

  }

 else {

    while (freeXML10DTDLoaderIndex >= 0) {

      SoftReference ref=xml10DTDLoaders[freeXML10DTDLoaderIndex];

      XMLDTDLoaderHolder holder=(XMLDTDLoaderHolder)ref.get();

      if (holder != null && holder.loader != null) {

        XMLDTDLoader val=holder.loader;

        holder.loader=null;

        --freeXML10DTDLoaderIndex;

        return val;

      }

      xml10DTDLoaders[freeXML10DTDLoaderIndex--]=null;

    }

    return new XMLDTDLoader();

  }

}

Location: CoreDOMImplementationImpl.java

Content: 

/** 

 * NON-DOM: retrieve validator. 

 */

synchronized RevalidationHandler getValidator(String schemaType,String xmlVersion){

  if (schemaType == XMLGrammarDescription.XML_SCHEMA) {

    while (freeSchemaValidatorIndex >= 0) {

      SoftReference ref=schemaValidators[freeSchemaValidatorIndex];

      RevalidationHandlerHolder holder=(RevalidationHandlerHolder)ref.get();

      if (holder != null && holder.handler != null) {

        RevalidationHandler val=holder.handler;

        holder.handler=null;

        --freeSchemaValidatorIndex;

        return val;

      }

      schemaValidators[freeSchemaValidatorIndex--]=null;

    }

    return (RevalidationHandler)(ObjectFactory.newInstance("org.apache.xerces.impl.xs.XMLSchemaValidator",ObjectFactory.findClassLoader(),true));

  }

 else   if (schemaType == XMLGrammarDescription.XML_DTD) {

    if ("1.1".equals(xmlVersion)) {

      while (freeXML11DTDValidatorIndex >= 0) {

        SoftReference ref=xml11DTDValidators[freeXML11DTDValidatorIndex];

        RevalidationHandlerHolder holder=(RevalidationHandlerHolder)ref.get();

        if (holder != null && holder.handler != null) {

          RevalidationHandler val=holder.handler;

          holder.handler=null;

          --freeXML11DTDValidatorIndex;

          return val;

        }

        xml11DTDValidators[freeXML11DTDValidatorIndex--]=null;

      }

      return (RevalidationHandler)(ObjectFactory.newInstance("org.apache.xerces.impl.dtd.XML11DTDValidator",ObjectFactory.findClassLoader(),true));

    }

 else {

      while (freeXML10DTDValidatorIndex >= 0) {

        SoftReference ref=xml10DTDValidators[freeXML10DTDValidatorIndex];

        RevalidationHandlerHolder holder=(RevalidationHandlerHolder)ref.get();

        if (holder != null && holder.handler != null) {

          RevalidationHandler val=holder.handler;

          holder.handler=null;

          --freeXML10DTDValidatorIndex;

          return val;

        }

        xml10DTDValidators[freeXML10DTDValidatorIndex--]=null;

      }

      return (RevalidationHandler)(ObjectFactory.newInstance("org.apache.xerces.impl.dtd.XMLDTDValidator",ObjectFactory.findClassLoader(),true));

    }

  }

  return null;

}

Location: CoreDOMImplementationImpl.java

Content: 

/** 

 * NON-DOM: release DTD loader 

 */

synchronized final void releaseDTDLoader(String xmlVersion,XMLDTDLoader loader){

  if ("1.1".equals(xmlVersion)) {

    ++freeXML11DTDLoaderIndex;

    if (xml11DTDLoaders.length == freeXML11DTDLoaderIndex) {

      xml11DTDLoaderCurrentSize+=SIZE;

      SoftReference[] newarray=new SoftReference[xml11DTDLoaderCurrentSize];

      System.arraycopy(xml11DTDLoaders,0,newarray,0,xml11DTDLoaders.length);

      xml11DTDLoaders=newarray;

    }

    SoftReference ref=xml11DTDLoaders[freeXML11DTDLoaderIndex];

    if (ref != null) {

      XMLDTDLoaderHolder holder=(XMLDTDLoaderHolder)ref.get();

      if (holder != null) {

        holder.loader=loader;

        return;

      }

    }

    xml11DTDLoaders[freeXML11DTDLoaderIndex]=new SoftReference(new XMLDTDLoaderHolder(loader));

  }

 else {

    ++freeXML10DTDLoaderIndex;

    if (xml10DTDLoaders.length == freeXML10DTDLoaderIndex) {

      xml10DTDLoaderCurrentSize+=SIZE;

      SoftReference[] newarray=new SoftReference[xml10DTDLoaderCurrentSize];

      System.arraycopy(xml10DTDLoaders,0,newarray,0,xml10DTDLoaders.length);

      xml10DTDLoaders=newarray;

    }

    SoftReference ref=xml10DTDLoaders[freeXML10DTDLoaderIndex];

    if (ref != null) {

      XMLDTDLoaderHolder holder=(XMLDTDLoaderHolder)ref.get();

      if (holder != null) {

        holder.loader=loader;

        return;

      }

    }

    xml10DTDLoaders[freeXML10DTDLoaderIndex]=new SoftReference(new XMLDTDLoaderHolder(loader));

  }

}

Location: CoreDOMImplementationImpl.java

Content: 

/** 

 * NON-DOM: release validator 

 */

synchronized void releaseValidator(String schemaType,String xmlVersion,RevalidationHandler validator){

  if (schemaType == XMLGrammarDescription.XML_SCHEMA) {

    ++freeSchemaValidatorIndex;

    if (schemaValidators.length == freeSchemaValidatorIndex) {

      schemaValidatorsCurrentSize+=SIZE;

      SoftReference newarray[]=new SoftReference[schemaValidatorsCurrentSize];

      System.arraycopy(schemaValidators,0,newarray,0,schemaValidators.length);

      schemaValidators=newarray;

    }

    SoftReference ref=schemaValidators[freeSchemaValidatorIndex];

    if (ref != null) {

      RevalidationHandlerHolder holder=(RevalidationHandlerHolder)ref.get();

      if (holder != null) {

        holder.handler=validator;

        return;

      }

    }

    schemaValidators[freeSchemaValidatorIndex]=new SoftReference(new RevalidationHandlerHolder(validator));

  }

 else   if (schemaType == XMLGrammarDescription.XML_DTD) {

    if ("1.1".equals(xmlVersion)) {

      ++freeXML11DTDValidatorIndex;

      if (xml11DTDValidators.length == freeXML11DTDValidatorIndex) {

        xml11DTDValidatorsCurrentSize+=SIZE;

        SoftReference[] newarray=new SoftReference[xml11DTDValidatorsCurrentSize];

        System.arraycopy(xml11DTDValidators,0,newarray,0,xml11DTDValidators.length);

        xml11DTDValidators=newarray;

      }

      SoftReference ref=xml11DTDValidators[freeXML11DTDValidatorIndex];

      if (ref != null) {

        RevalidationHandlerHolder holder=(RevalidationHandlerHolder)ref.get();

        if (holder != null) {

          holder.handler=validator;

          return;

        }

      }

      xml11DTDValidators[freeXML11DTDValidatorIndex]=new SoftReference(new RevalidationHandlerHolder(validator));

    }

 else {

      ++freeXML10DTDValidatorIndex;

      if (xml10DTDValidators.length == freeXML10DTDValidatorIndex) {

        xml10DTDValidatorsCurrentSize+=SIZE;

        SoftReference[] newarray=new SoftReference[xml10DTDValidatorsCurrentSize];

        System.arraycopy(xml10DTDValidators,0,newarray,0,xml10DTDValidators.length);

        xml10DTDValidators=newarray;

      }

      SoftReference ref=xml10DTDValidators[freeXML10DTDValidatorIndex];

      if (ref != null) {

        RevalidationHandlerHolder holder=(RevalidationHandlerHolder)ref.get();

        if (holder != null) {

          holder.handler=validator;

          return;

        }

      }

      xml10DTDValidators[freeXML10DTDValidatorIndex]=new SoftReference(new RevalidationHandlerHolder(validator));

    }

  }

}

