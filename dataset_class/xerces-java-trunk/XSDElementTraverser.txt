Location: XSDElementTraverser.java

Content: 

/** 

 * Traverse a globally declared element.

 * @param elmDecl

 * @param schemaDoc

 * @param grammar

 * @return the element declaration

 */

XSElementDecl traverseGlobal(Element elmDecl,XSDocumentInfo schemaDoc,SchemaGrammar grammar){

  Object[] attrValues=fAttrChecker.checkAttributes(elmDecl,true,schemaDoc);

  XSElementDecl element=traverseNamedElement(elmDecl,attrValues,schemaDoc,grammar,true,null);

  fAttrChecker.returnAttrArray(attrValues,schemaDoc);

  return element;

}

Location: XSDElementTraverser.java

Content: 

/** 

 * Traverse a locally declared element (or an element reference). To handle the recursive cases efficiently, we delay the traversal and return an empty particle node. We'll fill in this particle node later after we've done with all the global declarations. This method causes a number of data structures in the schema handler to be filled in.

 * @param elmDecl

 * @param schemaDoc

 * @param grammar

 * @return the particle

 */

XSParticleDecl traverseLocal(Element elmDecl,XSDocumentInfo schemaDoc,SchemaGrammar grammar,int allContextFlags,XSObject parent){

  XSParticleDecl particle=null;

  if (fSchemaHandler.fDeclPool != null) {

    particle=fSchemaHandler.fDeclPool.getParticleDecl();

  }

 else {

    particle=new XSParticleDecl();

  }

  if (fDeferTraversingLocalElements) {

    particle.fType=XSParticleDecl.PARTICLE_ELEMENT;

    Attr attr=elmDecl.getAttributeNode(SchemaSymbols.ATT_MINOCCURS);

    if (attr != null) {

      String min=attr.getValue();

      try {

        int m=Integer.parseInt(XMLChar.trim(min));

        if (m >= 0)         particle.fMinOccurs=m;

      }

 catch (      NumberFormatException ex) {

      }

    }

    fSchemaHandler.fillInLocalElemInfo(elmDecl,schemaDoc,allContextFlags,parent,particle);

  }

 else {

    traverseLocal(particle,elmDecl,schemaDoc,grammar,allContextFlags,parent,null);

    if (particle.fType == XSParticleDecl.PARTICLE_EMPTY)     particle=null;

  }

  return particle;

}

Location: XSDElementTraverser.java

Content: 

/** 

 * Traverse a locally declared element (or an element reference). This is the real traversal method. It's called after we've done with all the global declarations.

 * @param index

 */

protected void traverseLocal(XSParticleDecl particle,Element elmDecl,XSDocumentInfo schemaDoc,SchemaGrammar grammar,int allContextFlags,XSObject parent,String[] localNSDecls){

  if (localNSDecls != null) {

    schemaDoc.fNamespaceSupport.setEffectiveContext(localNSDecls);

  }

  Object[] attrValues=fAttrChecker.checkAttributes(elmDecl,false,schemaDoc);

  QName refAtt=(QName)attrValues[XSAttributeChecker.ATTIDX_REF];

  XInt minAtt=(XInt)attrValues[XSAttributeChecker.ATTIDX_MINOCCURS];

  XInt maxAtt=(XInt)attrValues[XSAttributeChecker.ATTIDX_MAXOCCURS];

  XSElementDecl element=null;

  XSAnnotationImpl annotation=null;

  if (elmDecl.getAttributeNode(SchemaSymbols.ATT_REF) != null) {

    if (refAtt != null) {

      element=(XSElementDecl)fSchemaHandler.getGlobalDecl(schemaDoc,XSDHandler.ELEMENT_TYPE,refAtt,elmDecl);

      Element child=DOMUtil.getFirstChildElement(elmDecl);

      if (child != null && DOMUtil.getLocalName(child).equals(SchemaSymbols.ELT_ANNOTATION)) {

        annotation=traverseAnnotationDecl(child,attrValues,false,schemaDoc);

        child=DOMUtil.getNextSiblingElement(child);

      }

 else {

        String text=DOMUtil.getSyntheticAnnotation(elmDecl);

        if (text != null) {

          annotation=traverseSyntheticAnnotation(elmDecl,text,attrValues,false,schemaDoc);

        }

      }

      if (child != null) {

        reportSchemaError("src-element.2.2",new Object[]{refAtt.rawname,DOMUtil.getLocalName(child)},child);

      }

    }

 else {

      element=null;

    }

  }

 else {

    element=traverseNamedElement(elmDecl,attrValues,schemaDoc,grammar,false,parent);

  }

  particle.fMinOccurs=minAtt.intValue();

  particle.fMaxOccurs=maxAtt.intValue();

  if (element != null) {

    particle.fType=XSParticleDecl.PARTICLE_ELEMENT;

    particle.fValue=element;

  }

 else {

    particle.fType=XSParticleDecl.PARTICLE_EMPTY;

  }

  if (refAtt != null) {

    XSObjectList annotations;

    if (annotation != null) {

      annotations=new XSObjectListImpl();

      ((XSObjectListImpl)annotations).addXSObject(annotation);

    }

 else {

      annotations=XSObjectListImpl.EMPTY_LIST;

    }

    particle.fAnnotations=annotations;

  }

 else {

    particle.fAnnotations=((element != null) ? element.fAnnotations : XSObjectListImpl.EMPTY_LIST);

  }

  Long defaultVals=(Long)attrValues[XSAttributeChecker.ATTIDX_FROMDEFAULT];

  checkOccurrences(particle,SchemaSymbols.ELT_ELEMENT,(Element)elmDecl.getParentNode(),allContextFlags,defaultVals.longValue());

  fAttrChecker.returnAttrArray(attrValues,schemaDoc);

}

Location: XSDElementTraverser.java

Content: 

/** 

 * Traverse a globally declared element.

 * @param elmDecl

 * @param attrValues

 * @param schemaDoc

 * @param grammar

 * @param isGlobal

 * @return the element declaration

 */

XSElementDecl traverseNamedElement(Element elmDecl,Object[] attrValues,XSDocumentInfo schemaDoc,SchemaGrammar grammar,boolean isGlobal,XSObject parent){

  Boolean abstractAtt=(Boolean)attrValues[XSAttributeChecker.ATTIDX_ABSTRACT];

  XInt blockAtt=(XInt)attrValues[XSAttributeChecker.ATTIDX_BLOCK];

  String defaultAtt=(String)attrValues[XSAttributeChecker.ATTIDX_DEFAULT];

  XInt finalAtt=(XInt)attrValues[XSAttributeChecker.ATTIDX_FINAL];

  String fixedAtt=(String)attrValues[XSAttributeChecker.ATTIDX_FIXED];

  XInt formAtt=(XInt)attrValues[XSAttributeChecker.ATTIDX_FORM];

  String nameAtt=(String)attrValues[XSAttributeChecker.ATTIDX_NAME];

  Boolean nillableAtt=(Boolean)attrValues[XSAttributeChecker.ATTIDX_NILLABLE];

  QName subGroupAtt=(QName)attrValues[XSAttributeChecker.ATTIDX_SUBSGROUP];

  QName typeAtt=(QName)attrValues[XSAttributeChecker.ATTIDX_TYPE];

  XSElementDecl element=null;

  if (fSchemaHandler.fDeclPool != null) {

    element=fSchemaHandler.fDeclPool.getElementDecl();

  }

 else {

    element=new XSElementDecl();

  }

  if (nameAtt != null)   element.fName=fSymbolTable.addSymbol(nameAtt);

  if (isGlobal) {

    element.fTargetNamespace=schemaDoc.fTargetNamespace;

    element.setIsGlobal();

  }

 else {

    if (parent instanceof XSComplexTypeDecl)     element.setIsLocal((XSComplexTypeDecl)parent);

    if (formAtt != null) {

      if (formAtt.intValue() == SchemaSymbols.FORM_QUALIFIED)       element.fTargetNamespace=schemaDoc.fTargetNamespace;

 else       element.fTargetNamespace=null;

    }

 else     if (schemaDoc.fAreLocalElementsQualified) {

      element.fTargetNamespace=schemaDoc.fTargetNamespace;

    }

 else {

      element.fTargetNamespace=null;

    }

  }

  element.fBlock=blockAtt == null ? schemaDoc.fBlockDefault : blockAtt.shortValue();

  element.fFinal=finalAtt == null ? schemaDoc.fFinalDefault : finalAtt.shortValue();

  element.fBlock&=(XSConstants.DERIVATION_EXTENSION | XSConstants.DERIVATION_RESTRICTION | XSConstants.DERIVATION_SUBSTITUTION);

  element.fFinal&=(XSConstants.DERIVATION_EXTENSION | XSConstants.DERIVATION_RESTRICTION);

  if (nillableAtt.booleanValue())   element.setIsNillable();

  if (abstractAtt != null && abstractAtt.booleanValue())   element.setIsAbstract();

  if (fixedAtt != null) {

    element.fDefault=new ValidatedInfo();

    element.fDefault.normalizedValue=fixedAtt;

    element.setConstraintType(XSConstants.VC_FIXED);

  }

 else   if (defaultAtt != null) {

    element.fDefault=new ValidatedInfo();

    element.fDefault.normalizedValue=defaultAtt;

    element.setConstraintType(XSConstants.VC_DEFAULT);

  }

 else {

    element.setConstraintType(XSConstants.VC_NONE);

  }

  if (subGroupAtt != null) {

    element.fSubGroup=(XSElementDecl)fSchemaHandler.getGlobalDecl(schemaDoc,XSDHandler.ELEMENT_TYPE,subGroupAtt,elmDecl);

  }

  Element child=DOMUtil.getFirstChildElement(elmDecl);

  XSAnnotationImpl annotation=null;

  if (child != null && DOMUtil.getLocalName(child).equals(SchemaSymbols.ELT_ANNOTATION)) {

    annotation=traverseAnnotationDecl(child,attrValues,false,schemaDoc);

    child=DOMUtil.getNextSiblingElement(child);

  }

 else {

    String text=DOMUtil.getSyntheticAnnotation(elmDecl);

    if (text != null) {

      annotation=traverseSyntheticAnnotation(elmDecl,text,attrValues,false,schemaDoc);

    }

  }

  XSObjectList annotations;

  if (annotation != null) {

    annotations=new XSObjectListImpl();

    ((XSObjectListImpl)annotations).addXSObject(annotation);

  }

 else {

    annotations=XSObjectListImpl.EMPTY_LIST;

  }

  element.fAnnotations=annotations;

  XSTypeDefinition elementType=null;

  boolean haveAnonType=false;

  if (child != null) {

    String childName=DOMUtil.getLocalName(child);

    if (childName.equals(SchemaSymbols.ELT_COMPLEXTYPE)) {

      elementType=fSchemaHandler.fComplexTypeTraverser.traverseLocal(child,schemaDoc,grammar);

      haveAnonType=true;

      child=DOMUtil.getNextSiblingElement(child);

    }

 else     if (childName.equals(SchemaSymbols.ELT_SIMPLETYPE)) {

      elementType=fSchemaHandler.fSimpleTypeTraverser.traverseLocal(child,schemaDoc,grammar);

      haveAnonType=true;

      child=DOMUtil.getNextSiblingElement(child);

    }

  }

  if (elementType == null && typeAtt != null) {

    elementType=(XSTypeDefinition)fSchemaHandler.getGlobalDecl(schemaDoc,XSDHandler.TYPEDECL_TYPE,typeAtt,elmDecl);

    if (elementType == null) {

      element.fUnresolvedTypeName=typeAtt;

    }

  }

  if (elementType == null && element.fSubGroup != null) {

    elementType=element.fSubGroup.fType;

  }

  if (elementType == null) {

    elementType=SchemaGrammar.fAnyType;

  }

  element.fType=elementType;

  if (child != null) {

    String childName=DOMUtil.getLocalName(child);

    while (child != null && (childName.equals(SchemaSymbols.ELT_KEY) || childName.equals(SchemaSymbols.ELT_KEYREF) || childName.equals(SchemaSymbols.ELT_UNIQUE))) {

      if (childName.equals(SchemaSymbols.ELT_KEY) || childName.equals(SchemaSymbols.ELT_UNIQUE)) {

        DOMUtil.setHidden(child,fSchemaHandler.fHiddenNodes);

        fSchemaHandler.fUniqueOrKeyTraverser.traverse(child,element,schemaDoc,grammar);

        if (DOMUtil.getAttrValue(child,SchemaSymbols.ATT_NAME).length() != 0) {

          fSchemaHandler.checkForDuplicateNames((schemaDoc.fTargetNamespace == null) ? "," + DOMUtil.getAttrValue(child,SchemaSymbols.ATT_NAME) : schemaDoc.fTargetNamespace + "," + DOMUtil.getAttrValue(child,SchemaSymbols.ATT_NAME),XSDHandler.ATTRIBUTE_TYPE,fSchemaHandler.getIDRegistry(),fSchemaHandler.getIDRegistry_sub(),child,schemaDoc);

        }

      }

 else       if (childName.equals(SchemaSymbols.ELT_KEYREF)) {

        fSchemaHandler.storeKeyRef(child,schemaDoc,element);

      }

      child=DOMUtil.getNextSiblingElement(child);

      if (child != null) {

        childName=DOMUtil.getLocalName(child);

      }

    }

  }

  if (nameAtt == null) {

    if (isGlobal)     reportSchemaError("s4s-att-must-appear",new Object[]{SchemaSymbols.ELT_ELEMENT,SchemaSymbols.ATT_NAME},elmDecl);

 else     reportSchemaError("src-element.2.1",null,elmDecl);

    nameAtt=NO_NAME;

  }

  if (child != null) {

    reportSchemaError("s4s-elt-must-match.1",new Object[]{nameAtt,"(annotation?, (simpleType | complexType)?, (unique | key | keyref)*))",DOMUtil.getLocalName(child)},child);

  }

  if (defaultAtt != null && fixedAtt != null) {

    reportSchemaError("src-element.1",new Object[]{nameAtt},elmDecl);

  }

  if (haveAnonType && (typeAtt != null)) {

    reportSchemaError("src-element.3",new Object[]{nameAtt},elmDecl);

  }

  checkNotationType(nameAtt,elementType,elmDecl);

  if (element.fDefault != null) {

    fValidationState.setNamespaceSupport(schemaDoc.fNamespaceSupport);

    if (XSConstraints.ElementDefaultValidImmediate(element.fType,element.fDefault.normalizedValue,fValidationState,element.fDefault) == null) {

      reportSchemaError("e-props-correct.2",new Object[]{nameAtt,element.fDefault.normalizedValue},elmDecl);

      element.fDefault=null;

      element.setConstraintType(XSConstants.VC_NONE);

    }

  }

  if (element.fSubGroup != null) {

    if (!XSConstraints.checkTypeDerivationOk(element.fType,element.fSubGroup.fType,element.fSubGroup.fFinal)) {

      reportSchemaError("e-props-correct.4",new Object[]{nameAtt,subGroupAtt.prefix + ":" + subGroupAtt.localpart},elmDecl);

      element.fSubGroup=null;

    }

  }

  if (element.fDefault != null) {

    if ((elementType.getTypeCategory() == XSTypeDefinition.SIMPLE_TYPE && ((XSSimpleType)elementType).isIDType()) || (elementType.getTypeCategory() == XSTypeDefinition.COMPLEX_TYPE && ((XSComplexTypeDecl)elementType).containsTypeID())) {

      reportSchemaError("e-props-correct.5",new Object[]{element.fName},elmDecl);

      element.fDefault=null;

      element.setConstraintType(XSConstants.VC_NONE);

    }

  }

  if (element.fName == null)   return null;

  if (isGlobal) {

    grammar.addGlobalElementDeclAll(element);

    if (grammar.getGlobalElementDecl(element.fName) == null) {

      grammar.addGlobalElementDecl(element);

    }

    final String loc=fSchemaHandler.schemaDocument2SystemId(schemaDoc);

    final XSElementDecl element2=grammar.getGlobalElementDecl(element.fName,loc);

    if (element2 == null) {

      grammar.addGlobalElementDecl(element,loc);

    }

    if (fSchemaHandler.fTolerateDuplicates) {

      if (element2 != null) {

        element=element2;

      }

      fSchemaHandler.addGlobalElementDecl(element);

    }

  }

  return element;

}

Location: XSDElementTraverser.java

Content: 

XSDElementTraverser(XSDHandler handler,XSAttributeChecker gAttrCheck){

  super(handler,gAttrCheck);

}

