Location: EntityResolver2Wrapper.java

Content: 

/** 

 * Creates an XMLInputSource from a SAX InputSource.

 */

private XMLInputSource createXMLInputSource(InputSource source,String baseURI){

  String publicId=source.getPublicId();

  String systemId=source.getSystemId();

  String baseSystemId=baseURI;

  InputStream byteStream=source.getByteStream();

  Reader charStream=source.getCharacterStream();

  String encoding=source.getEncoding();

  XMLInputSource xmlInputSource=new XMLInputSource(publicId,systemId,baseSystemId);

  xmlInputSource.setByteStream(byteStream);

  xmlInputSource.setCharacterStream(charStream);

  xmlInputSource.setEncoding(encoding);

  return xmlInputSource;

}

Location: EntityResolver2Wrapper.java

Content: 

/** 

 * Default constructor. 

 */

public EntityResolver2Wrapper(){

}

Location: EntityResolver2Wrapper.java

Content: 

/** 

 * <p>Creates a new instance wrapping the given SAX entity resolver.</p>

 * @param entityResolver the SAX entity resolver to wrap

 */

public EntityResolver2Wrapper(EntityResolver2 entityResolver){

  setEntityResolver(entityResolver);

}

Location: EntityResolver2Wrapper.java

Content: 

/** 

 * <p>Locates an external subset for documents which do not explicitly provide one. If no external subset is provided, this method should return <code>null</code>.</p>

 * @param grammarDescription a description of the DTD

 * @throws XNIException Thrown on general error.

 * @throws IOException  Thrown if resolved entity stream cannot beopened or some other i/o error occurs.

 */

public XMLInputSource getExternalSubset(XMLDTDDescription grammarDescription) throws XNIException, IOException {

  if (fEntityResolver != null) {

    String name=grammarDescription.getRootName();

    String baseURI=grammarDescription.getBaseSystemId();

    try {

      InputSource inputSource=fEntityResolver.getExternalSubset(name,baseURI);

      return (inputSource != null) ? createXMLInputSource(inputSource,baseURI) : null;

    }

 catch (    SAXException e) {

      Exception ex=e.getException();

      if (ex == null) {

        ex=e;

      }

      throw new XNIException(ex);

    }

  }

  return null;

}

Location: EntityResolver2Wrapper.java

Content: 

/** 

 * <p>Sets the SAX entity resolver wrapped by this object.</p>

 * @param entityResolver the SAX entity resolver to wrap

 */

public void setEntityResolver(EntityResolver2 entityResolver){

  fEntityResolver=entityResolver;

}

