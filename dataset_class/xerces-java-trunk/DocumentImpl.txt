Location: DocumentImpl.java

Content: 

/** 

 * Introduced in DOM Level 2. <p> Register an event listener with this Node. A listener may be independently registered as both Capturing and Bubbling, but may only be registered once per role; redundant registrations are ignored.

 * @param node node to add listener to

 * @param type Event name (NOT event group!) to listen for.

 * @param listener Who gets called when event is dispatched

 * @param useCapture True iff listener is registered oncapturing phase rather than at-target or bubbling

 */

protected void addEventListener(NodeImpl node,String type,EventListener listener,boolean useCapture){

  if (type == null || type.length() == 0 || listener == null)   return;

  removeEventListener(node,type,listener,useCapture);

  Vector nodeListeners=getEventListeners(node);

  if (nodeListeners == null) {

    nodeListeners=new Vector();

    setEventListeners(node,nodeListeners);

  }

  nodeListeners.addElement(new LEntry(type,listener,useCapture));

  LCount lc=LCount.lookup(type);

  if (useCapture) {

    ++lc.captures;

    ++lc.total;

  }

 else {

    ++lc.bubbles;

    ++lc.total;

  }

}

Location: DocumentImpl.java

Content: 

protected void copyEventListeners(NodeImpl src,NodeImpl tgt){

  Vector nodeListeners=getEventListeners(src);

  if (nodeListeners == null) {

    return;

  }

  setEventListeners(tgt,(Vector)nodeListeners.clone());

}

Location: DocumentImpl.java

Content: 

/** 

 * Introduced in DOM Level 2. Optional. <p> Create and return Event objects.

 * @param type The eventType parameter specifies the type of Eventinterface to be created.  If the Event interface specified is supported by the implementation this method will return a new Event of the interface type requested. If the Event is to be dispatched via the dispatchEvent method the appropriate event init method must be called after creation in order to initialize the Event's values.  As an example, a user wishing to synthesize some kind of Event would call createEvent with the parameter "Events". The initEvent method could then be called on the newly created Event to set the specific type of Event to be dispatched and set its context information.

 * @return Newly created Event

 * @exception DOMException NOT_SUPPORTED_ERR: Raised if the implementationdoes not support the type of Event interface requested

 * @since WD-DOM-Level-2-19990923

 */

public Event createEvent(String type) throws DOMException {

  if (type.equalsIgnoreCase("Events") || "Event".equals(type)) {

    return new EventImpl();

  }

 else   if (type.equalsIgnoreCase("MutationEvents") || "MutationEvent".equals(type)) {

    return new MutationEventImpl();

  }

 else   if (type.equalsIgnoreCase("UIEvents") || "UIEvent".equals(type)) {

    return new UIEventImpl();

  }

 else   if (type.equalsIgnoreCase("MouseEvents") || "MouseEvent".equals(type)) {

    return new MouseEventImpl();

  }

 else {

    String msg=DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN,"NOT_SUPPORTED_ERR",null);

    throw new DOMException(DOMException.NOT_SUPPORTED_ERR,msg);

  }

}

Location: DocumentImpl.java

Content: 

/** 

 * Create and return a NodeIterator. The NodeIterator is added to a list of NodeIterators so that it can be removed to free up the DOM Nodes it references.

 * @param root The root of the iterator.

 * @param whatToShow The whatToShow mask.

 * @param filter The NodeFilter installed. Null means no filter.

 * @param entityReferenceExpansion true to expand the contents ofEntityReference nodes

 * @since WD-DOM-Level-2-19990923

 */

public NodeIterator createNodeIterator(Node root,int whatToShow,NodeFilter filter,boolean entityReferenceExpansion){

  if (root == null) {

    String msg=DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN,"NOT_SUPPORTED_ERR",null);

    throw new DOMException(DOMException.NOT_SUPPORTED_ERR,msg);

  }

  NodeIterator iterator=new NodeIteratorImpl(this,root,whatToShow,filter,entityReferenceExpansion);

  if (iterators == null) {

    iterators=new LinkedList();

    iteratorReferenceQueue=new ReferenceQueue();

  }

  removeStaleIteratorReferences();

  iterators.add(new WeakReference(iterator,iteratorReferenceQueue));

  return iterator;

}

Location: DocumentImpl.java

Content: 

/** 

 * NON-DOM extension: Create and return a NodeIterator. The NodeIterator is added to a list of NodeIterators so that it can be removed to free up the DOM Nodes it references.

 * @param root The root of the iterator.

 * @param whatToShow The whatToShow mask.

 * @param filter The NodeFilter installed. Null means no filter.

 */

public NodeIterator createNodeIterator(Node root,short whatToShow,NodeFilter filter){

  return createNodeIterator(root,whatToShow,filter,true);

}

Location: DocumentImpl.java

Content: 

/** 

 * Create and return a TreeWalker.

 * @param root The root of the iterator.

 * @param whatToShow The whatToShow mask.

 * @param filter The NodeFilter installed. Null means no filter.

 * @param entityReferenceExpansion true to expand the contents ofEntityReference nodes

 * @since WD-DOM-Level-2-19990923

 */

public TreeWalker createTreeWalker(Node root,int whatToShow,NodeFilter filter,boolean entityReferenceExpansion){

  if (root == null) {

    String msg=DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN,"NOT_SUPPORTED_ERR",null);

    throw new DOMException(DOMException.NOT_SUPPORTED_ERR,msg);

  }

  return new TreeWalkerImpl(root,whatToShow,filter,entityReferenceExpansion);

}

Location: DocumentImpl.java

Content: 

/** 

 * NON-DOM extension: Create and return a TreeWalker.

 * @param root The root of the iterator.

 * @param whatToShow The whatToShow mask.

 * @param filter The NodeFilter installed. Null means no filter.

 */

public TreeWalker createTreeWalker(Node root,short whatToShow,NodeFilter filter){

  return createTreeWalker(root,whatToShow,filter,true);

}

Location: DocumentImpl.java

Content: 

/** 

 * A method to be called when some text was deleted from a text node, so that live objects can be notified.

 */

void deletedText(CharacterDataImpl node,int offset,int count){

  if (ranges != null) {

    notifyRangesDeletedText(node,offset,count);

  }

}

Location: DocumentImpl.java

Content: 

/** 

 * NON-DOM INTERNAL: Generate the "aggregated" post-mutation events DOMAttrModified and DOMSubtreeModified. Both of these should be issued only once for each user-requested mutation operation, even if that involves multiple changes to the DOM. For example, if a DOM operation makes multiple changes to a single Attr before returning, it would be nice to generate only one  DOMAttrModified, and multiple changes over larger scope but within a recognizable single subtree might want to generate only one  DOMSubtreeModified, sent to their lowest common ancestor.  <p> To manage this, use the "internal" versions of insert and remove with MUTATION_LOCAL, then make an explicit call to this routine at the higher level. Some examples now exist in our code.

 * @param node The node to dispatch to

 * @param enclosingAttr The Attr node (if any) whose value has been changedas a result of the DOM operation. Null if none such.

 * @param oldvalue The String value previously held by theenclosingAttr. Ignored if none such.

 * @param change Type of modification to the attr. SeeMutationEvent.attrChange

 */

protected void dispatchAggregateEvents(NodeImpl node,AttrImpl enclosingAttr,String oldvalue,short change){

  NodeImpl owner=null;

  if (enclosingAttr != null) {

    LCount lc=LCount.lookup(MutationEventImpl.DOM_ATTR_MODIFIED);

    owner=(NodeImpl)enclosingAttr.getOwnerElement();

    if (lc.total > 0) {

      if (owner != null) {

        MutationEventImpl me=new MutationEventImpl();

        me.initMutationEvent(MutationEventImpl.DOM_ATTR_MODIFIED,true,false,enclosingAttr,oldvalue,enclosingAttr.getNodeValue(),enclosingAttr.getNodeName(),change);

        owner.dispatchEvent(me);

      }

    }

  }

  LCount lc=LCount.lookup(MutationEventImpl.DOM_SUBTREE_MODIFIED);

  if (lc.total > 0) {

    MutationEvent me=new MutationEventImpl();

    me.initMutationEvent(MutationEventImpl.DOM_SUBTREE_MODIFIED,true,false,null,null,null,null,(short)0);

    if (enclosingAttr != null) {

      dispatchEvent(enclosingAttr,me);

      if (owner != null)       dispatchEvent(owner,me);

    }

 else     dispatchEvent(node,me);

  }

}

Location: DocumentImpl.java

Content: 

/** 

 * NON-DOM INTERNAL: Convenience wrapper for calling dispatchAggregateEvents when the context was established by <code>savedEnclosingAttr</code>.

 * @param node node to dispatch to

 * @param ea description of Attr affected by current operation

 */

protected void dispatchAggregateEvents(NodeImpl node,EnclosingAttr ea){

  if (ea != null)   dispatchAggregateEvents(node,ea.node,ea.oldvalue,MutationEvent.MODIFICATION);

 else   dispatchAggregateEvents(node,null,null,(short)0);

}

Location: DocumentImpl.java

Content: 

/** 

 * NON-DOM INTERNAL: DOMNodeInsertedIntoDocument and ...RemovedFrom... are dispatched to an entire subtree. This is the distribution code therefor. They DO NOT bubble, thanks be, but may be captured. <p> Similar to code in dispatchingEventToSubtree however this method is only used on the target node and does not start a dispatching chain on the sibling of the target node as this is not part of the subtree  ***** At the moment I'm being sloppy and using the normal capture dispatcher on every node. This could be optimized hugely by writing a capture engine that tracks our position in the tree to update the capture chain without repeated chases up to root.

 * @param n target node (that was directly inserted or removed)

 * @param e event to be sent to that node and its subtree

 */

protected void dispatchEventToSubtree(Node n,Event e){

  ((NodeImpl)n).dispatchEvent(e);

  if (n.getNodeType() == Node.ELEMENT_NODE) {

    NamedNodeMap a=n.getAttributes();

    for (int i=a.getLength() - 1; i >= 0; --i)     dispatchingEventToSubtree(a.item(i),e);

  }

  dispatchingEventToSubtree(n.getFirstChild(),e);

}

Location: DocumentImpl.java

Content: 

/** 

 * Introduced in DOM Level 2. <p> Distribution engine for DOM Level 2 Events.  <p> Event propagation runs as follows: <ol> <li>Event is dispatched to a particular target node, which invokes this code. Note that the event's stopPropagation flag is cleared when dispatch begins; thereafter, if it has  been set before processing of a node commences, we instead immediately advance to the DEFAULT phase. <li>The node's ancestors are established as destinations for events. For capture and bubble purposes, node ancestry is determined at  the time dispatch starts. If an event handler alters the document  tree, that does not change which nodes will be informed of the event.  <li>CAPTURING_PHASE: Ancestors are scanned, root to target, for  Capturing listeners. If found, they are invoked (see below).  <li>AT_TARGET:  Event is dispatched to NON-CAPTURING listeners on the target node. Note that capturing listeners on this node are _not_ invoked. <li>BUBBLING_PHASE: Ancestors are scanned, target to root, for non-capturing listeners.  <li>Default processing: Some DOMs have default behaviors bound to specific nodes. If this DOM does, and if the event's preventDefault flag has not been set, we now return to the target node and process its default handler for this event, if any. </ol> <p> Note that registration of handlers during processing of an event does not take effect during this phase of this event; they will not be called until the next time this node is visited by dispatchEvent. On the other hand, removals take effect immediately. <p> If an event handler itself causes events to be dispatched, they are processed synchronously, before processing resumes on the event which triggered them. Please be aware that this may  result in events arriving at listeners "out of order" relative to the actual sequence of requests. <p> Note that our implementation resets the event's stop/prevent flags when dispatch begins. I believe the DOM's intent is that event objects be redispatchable, though it isn't stated in those terms.

 * @param node node to dispatch to

 * @param event the event object to be dispatched to registered EventListeners

 * @return true if the event's <code>preventDefault()</code>method was invoked by an EventListener; otherwise false.

 */

protected boolean dispatchEvent(NodeImpl node,Event event){

  if (event == null)   return false;

  EventImpl evt=(EventImpl)event;

  if (!evt.initialized || evt.type == null || evt.type.length() == 0) {

    String msg=DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN,"UNSPECIFIED_EVENT_TYPE_ERR",null);

    throw new EventException(EventException.UNSPECIFIED_EVENT_TYPE_ERR,msg);

  }

  LCount lc=LCount.lookup(evt.getType());

  if (lc.total == 0)   return evt.preventDefault;

  evt.target=node;

  evt.stopPropagation=false;

  evt.preventDefault=false;

  ArrayList pv=new ArrayList(10);

  Node p=node;

  Node n=p.getParentNode();

  while (n != null) {

    pv.add(n);

    p=n;

    n=n.getParentNode();

  }

  if (lc.captures > 0) {

    evt.eventPhase=Event.CAPTURING_PHASE;

    for (int j=pv.size() - 1; j >= 0; --j) {

      if (evt.stopPropagation)       break;

      NodeImpl nn=(NodeImpl)pv.get(j);

      evt.currentTarget=nn;

      Vector nodeListeners=getEventListeners(nn);

      if (nodeListeners != null) {

        Vector nl=(Vector)nodeListeners.clone();

        int nlsize=nl.size();

        for (int i=0; i < nlsize; i++) {

          LEntry le=(LEntry)nl.elementAt(i);

          if (le.useCapture && le.type.equals(evt.type) && nodeListeners.contains(le)) {

            try {

              le.listener.handleEvent(evt);

            }

 catch (            Exception e) {

            }

          }

        }

      }

    }

  }

  if (lc.bubbles > 0) {

    evt.eventPhase=Event.AT_TARGET;

    evt.currentTarget=node;

    Vector nodeListeners=getEventListeners(node);

    if (!evt.stopPropagation && nodeListeners != null) {

      Vector nl=(Vector)nodeListeners.clone();

      int nlsize=nl.size();

      for (int i=0; i < nlsize; i++) {

        LEntry le=(LEntry)nl.elementAt(i);

        if (!le.useCapture && le.type.equals(evt.type) && nodeListeners.contains(le)) {

          try {

            le.listener.handleEvent(evt);

          }

 catch (          Exception e) {

          }

        }

      }

    }

    if (evt.bubbles) {

      evt.eventPhase=Event.BUBBLING_PHASE;

      int pvsize=pv.size();

      for (int j=0; j < pvsize; j++) {

        if (evt.stopPropagation)         break;

        NodeImpl nn=(NodeImpl)pv.get(j);

        evt.currentTarget=nn;

        nodeListeners=getEventListeners(nn);

        if (nodeListeners != null) {

          Vector nl=(Vector)nodeListeners.clone();

          int nlsize=nl.size();

          for (int i=0; i < nlsize; i++) {

            LEntry le=(LEntry)nl.elementAt(i);

            if (!le.useCapture && le.type.equals(evt.type) && nodeListeners.contains(le)) {

              try {

                le.listener.handleEvent(evt);

              }

 catch (              Exception e) {

              }

            }

          }

        }

      }

    }

  }

  if (lc.defaults > 0 && (!evt.cancelable || !evt.preventDefault)) {

  }

  return evt.preventDefault;

}

Location: DocumentImpl.java

Content: 

/** 

 * Dispatches event to the target node's descendents recursively

 * @param n node to dispatch to

 * @param e event to be sent to that node and its subtree

 */

protected void dispatchingEventToSubtree(Node n,Event e){

  if (n == null)   return;

  ((NodeImpl)n).dispatchEvent(e);

  if (n.getNodeType() == Node.ELEMENT_NODE) {

    NamedNodeMap a=n.getAttributes();

    for (int i=a.getLength() - 1; i >= 0; --i)     dispatchingEventToSubtree(a.item(i),e);

  }

  dispatchingEventToSubtree(n.getFirstChild(),e);

  dispatchingEventToSubtree(n.getNextSibling(),e);

}

Location: DocumentImpl.java

Content: 

/** 

 * NON-DOM: Actually creating a Document is outside the DOM's spec, since it has to operate in terms of a particular implementation.

 */

public DocumentImpl(){

  super();

}

Location: DocumentImpl.java

Content: 

/** 

 * Constructor. 

 */

public DocumentImpl(boolean grammarAccess){

  super(grammarAccess);

}

Location: DocumentImpl.java

Content: 

/** 

 * For DOM2 support. The createDocument factory method is in DOMImplementation.

 */

public DocumentImpl(DocumentType doctype){

  super(doctype);

}

Location: DocumentImpl.java

Content: 

/** 

 * For DOM2 support. 

 */

public DocumentImpl(DocumentType doctype,boolean grammarAccess){

  super(doctype,grammarAccess);

}

Location: DocumentImpl.java

Content: 

/** 

 * Retreive event listener registered on a given node

 */

protected Vector getEventListeners(NodeImpl n){

  if (eventListeners == null) {

    return null;

  }

  return (Vector)eventListeners.get(n);

}

Location: DocumentImpl.java

Content: 

/** 

 * Returns true if the DOM implementation generates mutation events.

 */

boolean getMutationEvents(){

  return mutationEvents;

}

Location: DocumentImpl.java

Content: 

/** 

 * A method to be called when a node has been inserted in the tree.

 */

void insertedNode(NodeImpl node,NodeImpl newInternal,boolean replace){

  if (mutationEvents) {

    mutationEventsInsertedNode(node,newInternal,replace);

  }

  if (ranges != null) {

    notifyRangesInsertedNode(newInternal);

  }

}

Location: DocumentImpl.java

Content: 

/** 

 * A method to be called when some text was inserted into a text node, so that live objects can be notified.

 */

void insertedText(CharacterDataImpl node,int offset,int count){

  if (ranges != null) {

    notifyRangesInsertedText(node,offset,count);

  }

}

Location: DocumentImpl.java

Content: 

/** 

 * A method to be called when a node is about to be inserted in the tree.

 */

void insertingNode(NodeImpl node,boolean replace){

  if (mutationEvents) {

    if (!replace) {

      saveEnclosingAttr(node);

    }

  }

}

Location: DocumentImpl.java

Content: 

/** 

 * A method to be called when an attribute value has been modified

 */

void modifiedAttrValue(AttrImpl attr,String oldvalue){

  if (mutationEvents) {

    dispatchAggregateEvents(attr,attr,oldvalue,MutationEvent.MODIFICATION);

  }

}

Location: DocumentImpl.java

Content: 

/** 

 * A method to be called when a character data node has been modified

 */

void modifiedCharacterData(NodeImpl node,String oldvalue,String value,boolean replace){

  if (mutationEvents) {

    mutationEventsModifiedCharacterData(node,oldvalue,value,replace);

  }

}

Location: DocumentImpl.java

Content: 

/** 

 * A method to be called when a character data node has been modified

 */

void modifyingCharacterData(NodeImpl node,boolean replace){

  if (mutationEvents) {

    if (!replace) {

      saveEnclosingAttr(node);

    }

  }

}

Location: DocumentImpl.java

Content: 

private void mutationEventsInsertedNode(NodeImpl node,NodeImpl newInternal,boolean replace){

  LCount lc=LCount.lookup(MutationEventImpl.DOM_NODE_INSERTED);

  if (lc.total > 0) {

    MutationEventImpl me=new MutationEventImpl();

    me.initMutationEvent(MutationEventImpl.DOM_NODE_INSERTED,true,false,node,null,null,null,(short)0);

    dispatchEvent(newInternal,me);

  }

  lc=LCount.lookup(MutationEventImpl.DOM_NODE_INSERTED_INTO_DOCUMENT);

  if (lc.total > 0) {

    NodeImpl eventAncestor=node;

    if (savedEnclosingAttr != null)     eventAncestor=(NodeImpl)savedEnclosingAttr.node.getOwnerElement();

    if (eventAncestor != null) {

      NodeImpl p=eventAncestor;

      while (p != null) {

        eventAncestor=p;

        if (p.getNodeType() == ATTRIBUTE_NODE) {

          p=(NodeImpl)((AttrImpl)p).getOwnerElement();

        }

 else {

          p=p.parentNode();

        }

      }

      if (eventAncestor.getNodeType() == Node.DOCUMENT_NODE) {

        MutationEventImpl me=new MutationEventImpl();

        me.initMutationEvent(MutationEventImpl.DOM_NODE_INSERTED_INTO_DOCUMENT,false,false,null,null,null,null,(short)0);

        dispatchEventToSubtree(newInternal,me);

      }

    }

  }

  if (!replace) {

    dispatchAggregateEvents(node,savedEnclosingAttr);

  }

}

Location: DocumentImpl.java

Content: 

private void mutationEventsModifiedCharacterData(NodeImpl node,String oldvalue,String value,boolean replace){

  if (!replace) {

    LCount lc=LCount.lookup(MutationEventImpl.DOM_CHARACTER_DATA_MODIFIED);

    if (lc.total > 0) {

      MutationEvent me=new MutationEventImpl();

      me.initMutationEvent(MutationEventImpl.DOM_CHARACTER_DATA_MODIFIED,true,false,null,oldvalue,value,null,(short)0);

      dispatchEvent(node,me);

    }

    dispatchAggregateEvents(node,savedEnclosingAttr);

  }

}

Location: DocumentImpl.java

Content: 

private void mutationEventsRemovedAttrNode(AttrImpl attr,NodeImpl oldOwner,String name){

  LCount lc=LCount.lookup(MutationEventImpl.DOM_ATTR_MODIFIED);

  if (lc.total > 0) {

    MutationEventImpl me=new MutationEventImpl();

    me.initMutationEvent(MutationEventImpl.DOM_ATTR_MODIFIED,true,false,attr,attr.getNodeValue(),null,name,MutationEvent.REMOVAL);

    dispatchEvent(oldOwner,me);

  }

  dispatchAggregateEvents(oldOwner,null,null,(short)0);

}

Location: DocumentImpl.java

Content: 

private void mutationEventsRemovingNode(NodeImpl node,NodeImpl oldChild,boolean replace){

  if (!replace) {

    saveEnclosingAttr(node);

  }

  LCount lc=LCount.lookup(MutationEventImpl.DOM_NODE_REMOVED);

  if (lc.total > 0) {

    MutationEventImpl me=new MutationEventImpl();

    me.initMutationEvent(MutationEventImpl.DOM_NODE_REMOVED,true,false,node,null,null,null,(short)0);

    dispatchEvent(oldChild,me);

  }

  lc=LCount.lookup(MutationEventImpl.DOM_NODE_REMOVED_FROM_DOCUMENT);

  if (lc.total > 0) {

    NodeImpl eventAncestor=this;

    if (savedEnclosingAttr != null)     eventAncestor=(NodeImpl)savedEnclosingAttr.node.getOwnerElement();

    if (eventAncestor != null) {

      for (NodeImpl p=eventAncestor.parentNode(); p != null; p=p.parentNode()) {

        eventAncestor=p;

      }

      if (eventAncestor.getNodeType() == Node.DOCUMENT_NODE) {

        MutationEventImpl me=new MutationEventImpl();

        me.initMutationEvent(MutationEventImpl.DOM_NODE_REMOVED_FROM_DOCUMENT,false,false,null,null,null,null,(short)0);

        dispatchEventToSubtree(oldChild,me);

      }

    }

  }

}

Location: DocumentImpl.java

Content: 

private void notifyIteratorsRemovingNode(NodeImpl oldChild){

  removeStaleIteratorReferences();

  final Iterator i=iterators.iterator();

  while (i.hasNext()) {

    NodeIteratorImpl iterator=(NodeIteratorImpl)((Reference)i.next()).get();

    if (iterator != null) {

      iterator.removeNode(oldChild);

    }

 else {

      i.remove();

    }

  }

}

Location: DocumentImpl.java

Content: 

private void notifyRangesDeletedText(CharacterDataImpl node,int offset,int count){

  removeStaleRangeReferences();

  final Iterator i=ranges.iterator();

  while (i.hasNext()) {

    RangeImpl range=(RangeImpl)((Reference)i.next()).get();

    if (range != null) {

      range.receiveDeletedText(node,offset,count);

    }

 else {

      i.remove();

    }

  }

}

Location: DocumentImpl.java

Content: 

private void notifyRangesInsertedNode(NodeImpl newInternal){

  removeStaleRangeReferences();

  final Iterator i=ranges.iterator();

  while (i.hasNext()) {

    RangeImpl range=(RangeImpl)((Reference)i.next()).get();

    if (range != null) {

      range.insertedNodeFromDOM(newInternal);

    }

 else {

      i.remove();

    }

  }

}

Location: DocumentImpl.java

Content: 

private void notifyRangesInsertedText(CharacterDataImpl node,int offset,int count){

  removeStaleRangeReferences();

  final Iterator i=ranges.iterator();

  while (i.hasNext()) {

    RangeImpl range=(RangeImpl)((Reference)i.next()).get();

    if (range != null) {

      range.receiveInsertedText(node,offset,count);

    }

 else {

      i.remove();

    }

  }

}

Location: DocumentImpl.java

Content: 

private void notifyRangesRemovingNode(NodeImpl oldChild){

  removeStaleRangeReferences();

  final Iterator i=ranges.iterator();

  while (i.hasNext()) {

    RangeImpl range=(RangeImpl)((Reference)i.next()).get();

    if (range != null) {

      range.removeNode(oldChild);

    }

 else {

      i.remove();

    }

  }

}

Location: DocumentImpl.java

Content: 

private void notifyRangesReplacedText(CharacterDataImpl node){

  removeStaleRangeReferences();

  final Iterator i=ranges.iterator();

  while (i.hasNext()) {

    RangeImpl range=(RangeImpl)((Reference)i.next()).get();

    if (range != null) {

      range.receiveReplacedText(node);

    }

 else {

      i.remove();

    }

  }

}

Location: DocumentImpl.java

Content: 

private void notifyRangesSplitData(Node node,Node newNode,int offset){

  removeStaleRangeReferences();

  final Iterator i=ranges.iterator();

  while (i.hasNext()) {

    RangeImpl range=(RangeImpl)((Reference)i.next()).get();

    if (range != null) {

      range.receiveSplitData(node,newNode,offset);

    }

 else {

      i.remove();

    }

  }

}

Location: DocumentImpl.java

Content: 

/** 

 * A method to be called when an attribute node has been removed

 */

void removedAttrNode(AttrImpl attr,NodeImpl oldOwner,String name){

  if (mutationEvents) {

    mutationEventsRemovedAttrNode(attr,oldOwner,name);

  }

}

Location: DocumentImpl.java

Content: 

/** 

 * A method to be called when a node has been removed from the tree.

 */

void removedNode(NodeImpl node,boolean replace){

  if (mutationEvents) {

    if (!replace) {

      dispatchAggregateEvents(node,savedEnclosingAttr);

    }

  }

}

Location: DocumentImpl.java

Content: 

/** 

 * Introduced in DOM Level 2. <p> Deregister an event listener previously registered with this Node.  A listener must be independently removed from the Capturing and Bubbling roles. Redundant removals (of listeners not currently registered for this role) are ignored.

 * @param node node to remove listener from

 * @param type Event name (NOT event group!) to listen for.

 * @param listener Who gets called when event is dispatched

 * @param useCapture True iff listener is registered oncapturing phase rather than at-target or bubbling

 */

protected void removeEventListener(NodeImpl node,String type,EventListener listener,boolean useCapture){

  if (type == null || type.length() == 0 || listener == null)   return;

  Vector nodeListeners=getEventListeners(node);

  if (nodeListeners == null)   return;

  for (int i=nodeListeners.size() - 1; i >= 0; --i) {

    LEntry le=(LEntry)nodeListeners.elementAt(i);

    if (le.useCapture == useCapture && le.listener == listener && le.type.equals(type)) {

      nodeListeners.removeElementAt(i);

      if (nodeListeners.size() == 0)       setEventListeners(node,null);

      LCount lc=LCount.lookup(type);

      if (useCapture) {

        --lc.captures;

        --lc.total;

      }

 else {

        --lc.bubbles;

        --lc.total;

      }

      break;

    }

  }

}

Location: DocumentImpl.java

Content: 

/** 

 * This is not called by the developer client. The developer client uses the detach() function on the NodeIterator itself. <p> This function is called from the NodeIterator#detach().

 */

void removeNodeIterator(NodeIterator nodeIterator){

  if (nodeIterator == null)   return;

  if (iterators == null)   return;

  removeStaleIteratorReferences();

  Iterator i=iterators.iterator();

  while (i.hasNext()) {

    Object iterator=((Reference)i.next()).get();

    if (iterator == nodeIterator) {

      i.remove();

      return;

    }

 else     if (iterator == null) {

      i.remove();

    }

  }

}

Location: DocumentImpl.java

Content: 

/** 

 * Not a client function. Called by Range.detach(), so a Range can remove itself from the list of Ranges.

 */

void removeRange(Range range){

  if (range == null)   return;

  if (ranges == null)   return;

  removeStaleRangeReferences();

  Iterator i=ranges.iterator();

  while (i.hasNext()) {

    Object otherRange=((Reference)i.next()).get();

    if (otherRange == range) {

      i.remove();

      return;

    }

 else     if (otherRange == null) {

      i.remove();

    }

  }

}

Location: DocumentImpl.java

Content: 

/** 

 * Remove stale iterator references from the iterator list.

 */

private void removeStaleIteratorReferences(){

  removeStaleReferences(iteratorReferenceQueue,iterators);

}

Location: DocumentImpl.java

Content: 

/** 

 * Remove stale range references from the range list.

 */

private void removeStaleRangeReferences(){

  removeStaleReferences(rangeReferenceQueue,ranges);

}

Location: DocumentImpl.java

Content: 

/** 

 * Remove stale references from the given list.

 */

private void removeStaleReferences(ReferenceQueue queue,List list){

  Reference ref=queue.poll();

  int count=0;

  while (ref != null) {

    ++count;

    ref=queue.poll();

  }

  if (count > 0) {

    final Iterator i=list.iterator();

    while (i.hasNext()) {

      Object o=((Reference)i.next()).get();

      if (o == null) {

        i.remove();

        if (--count <= 0) {

          return;

        }

      }

    }

  }

}

Location: DocumentImpl.java

Content: 

/** 

 * A method to be called when a node is about to be removed from the tree.

 */

void removingNode(NodeImpl node,NodeImpl oldChild,boolean replace){

  if (iterators != null) {

    notifyIteratorsRemovingNode(oldChild);

  }

  if (ranges != null) {

    notifyRangesRemovingNode(oldChild);

  }

  if (mutationEvents) {

    mutationEventsRemovingNode(node,oldChild,replace);

  }

}

Location: DocumentImpl.java

Content: 

/** 

 * A method to be called when an attribute node has been renamed

 */

void renamedAttrNode(Attr oldAt,Attr newAt){

}

Location: DocumentImpl.java

Content: 

/** 

 * A method to be called when an element has been renamed

 */

void renamedElement(Element oldEl,Element newEl){

}

Location: DocumentImpl.java

Content: 

/** 

 * A method to be called when a character data node has been replaced

 */

void replacedCharacterData(NodeImpl node,String oldvalue,String value){

  modifiedCharacterData(node,oldvalue,value,false);

}

Location: DocumentImpl.java

Content: 

/** 

 * A method to be called when a node has been replaced in the tree.

 */

void replacedNode(NodeImpl node){

  if (mutationEvents) {

    dispatchAggregateEvents(node,savedEnclosingAttr);

  }

}

Location: DocumentImpl.java

Content: 

/** 

 * A method to be called when some text was changed in a text node, so that live objects can be notified.

 */

void replacedText(CharacterDataImpl node){

  if (ranges != null) {

    notifyRangesReplacedText(node);

  }

}

Location: DocumentImpl.java

Content: 

/** 

 * A method to be called when character data is about to be replaced in the tree.

 */

void replacingData(NodeImpl node){

  if (mutationEvents) {

    saveEnclosingAttr(node);

  }

}

Location: DocumentImpl.java

Content: 

/** 

 * A method to be called when a node is about to be replaced in the tree.

 */

void replacingNode(NodeImpl node){

  if (mutationEvents) {

    saveEnclosingAttr(node);

  }

}

Location: DocumentImpl.java

Content: 

/** 

 * NON-DOM INTERNAL: Pre-mutation context check, in preparation for later generating DOMAttrModified events. Determines whether this node is within an Attr

 * @param node node to get enclosing attribute for

 */

protected void saveEnclosingAttr(NodeImpl node){

  savedEnclosingAttr=null;

  LCount lc=LCount.lookup(MutationEventImpl.DOM_ATTR_MODIFIED);

  if (lc.total > 0) {

    NodeImpl eventAncestor=node;

    while (true) {

      if (eventAncestor == null)       return;

      int type=eventAncestor.getNodeType();

      if (type == Node.ATTRIBUTE_NODE) {

        EnclosingAttr retval=new EnclosingAttr();

        retval.node=(AttrImpl)eventAncestor;

        retval.oldvalue=retval.node.getNodeValue();

        savedEnclosingAttr=retval;

        return;

      }

 else       if (type == Node.ENTITY_REFERENCE_NODE)       eventAncestor=eventAncestor.parentNode();

 else       if (type == Node.TEXT_NODE)       eventAncestor=eventAncestor.parentNode();

 else       return;

    }

  }

}

Location: DocumentImpl.java

Content: 

/** 

 * A method to be called when an attribute node has been set

 */

void setAttrNode(AttrImpl attr,AttrImpl previous){

  if (mutationEvents) {

    if (previous == null) {

      dispatchAggregateEvents(attr.ownerNode,attr,null,MutationEvent.ADDITION);

    }

 else {

      dispatchAggregateEvents(attr.ownerNode,attr,previous.getNodeValue(),MutationEvent.MODIFICATION);

    }

  }

}

Location: DocumentImpl.java

Content: 

/** 

 * Store event listener registered on a given node This is another place where we could use weak references! Indeed, the node here won't be GC'ed as long as some listener is registered on it, since the eventsListeners table will have a reference to the node.

 */

protected void setEventListeners(NodeImpl n,Vector listeners){

  if (eventListeners == null) {

    eventListeners=new Hashtable();

  }

  if (listeners == null) {

    eventListeners.remove(n);

    if (eventListeners.isEmpty()) {

      mutationEvents=false;

    }

  }

 else {

    eventListeners.put(n,listeners);

    mutationEvents=true;

  }

}

Location: DocumentImpl.java

Content: 

/** 

 * Sets whether the DOM implementation generates mutation events upon operations.

 */

void setMutationEvents(boolean set){

  mutationEvents=set;

}

Location: DocumentImpl.java

Content: 

/** 

 * A method to be called when a text node has been split, so that live objects can be notified.

 */

void splitData(Node node,Node newNode,int offset){

  if (ranges != null) {

    notifyRangesSplitData(node,newNode,offset);

  }

}

