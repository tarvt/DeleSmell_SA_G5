Location: REUtil.java

Content: 

static final int composeFromSurrogates(int high,int low){

  return 0x10000 + ((high - 0xd800) << 10) + low - 0xdc00;

}

Location: REUtil.java

Content: 

static final String createOptionString(int options){

  StringBuffer sb=new StringBuffer(9);

  if ((options & RegularExpression.PROHIBIT_FIXED_STRING_OPTIMIZATION) != 0)   sb.append((char)'F');

  if ((options & RegularExpression.PROHIBIT_HEAD_CHARACTER_OPTIMIZATION) != 0)   sb.append((char)'H');

  if ((options & RegularExpression.XMLSCHEMA_MODE) != 0)   sb.append((char)'X');

  if ((options & RegularExpression.IGNORE_CASE) != 0)   sb.append((char)'i');

  if ((options & RegularExpression.MULTIPLE_LINES) != 0)   sb.append((char)'m');

  if ((options & RegularExpression.SINGLE_LINE) != 0)   sb.append((char)'s');

  if ((options & RegularExpression.USE_UNICODE_CATEGORY) != 0)   sb.append((char)'u');

  if ((options & RegularExpression.UNICODE_WORD_BOUNDARY) != 0)   sb.append((char)'w');

  if ((options & RegularExpression.EXTENDED_COMMENT) != 0)   sb.append((char)'x');

  if ((options & RegularExpression.SPECIAL_COMMA) != 0)   sb.append((char)',');

  return sb.toString().intern();

}

Location: REUtil.java

Content: 

/** 

 * Creates a RegularExpression instance. This method caches created instances.

 * @see RegularExpression#RegularExpression(java.lang.String,java.lang.String)

 */

public static RegularExpression createRegex(String pattern,String options) throws ParseException {

  RegularExpression re=null;

  int intOptions=REUtil.parseOptions(options);

synchronized (REUtil.regexCache) {

    int i;

    for (i=0; i < REUtil.CACHESIZE; i++) {

      RegularExpression cached=REUtil.regexCache[i];

      if (cached == null) {

        i=-1;

        break;

      }

      if (cached.equals(pattern,intOptions)) {

        re=cached;

        break;

      }

    }

    if (re != null) {

      if (i != 0) {

        System.arraycopy(REUtil.regexCache,0,REUtil.regexCache,1,i);

        REUtil.regexCache[0]=re;

      }

    }

 else {

      re=new RegularExpression(pattern,options);

      System.arraycopy(REUtil.regexCache,0,REUtil.regexCache,1,REUtil.CACHESIZE - 1);

      REUtil.regexCache[0]=re;

    }

  }

  return re;

}

Location: REUtil.java

Content: 

static final String decomposeToSurrogates(int ch){

  char[] chs=new char[2];

  ch-=0x10000;

  chs[0]=(char)((ch >> 10) + 0xd800);

  chs[1]=(char)((ch & 0x3ff) + 0xdc00);

  return new String(chs);

}

Location: REUtil.java

Content: 

static void dumpString(String v){

  for (int i=0; i < v.length(); i++) {

    System.out.print(Integer.toHexString(v.charAt(i)));

    System.out.print(" ");

  }

  System.out.println();

}

Location: REUtil.java

Content: 

static final int getOptionValue(int ch){

  int ret=0;

switch (ch) {

case 'i':

    ret=RegularExpression.IGNORE_CASE;

  break;

case 'm':

ret=RegularExpression.MULTIPLE_LINES;

break;

case 's':

ret=RegularExpression.SINGLE_LINE;

break;

case 'x':

ret=RegularExpression.EXTENDED_COMMENT;

break;

case 'u':

ret=RegularExpression.USE_UNICODE_CATEGORY;

break;

case 'w':

ret=RegularExpression.UNICODE_WORD_BOUNDARY;

break;

case 'F':

ret=RegularExpression.PROHIBIT_FIXED_STRING_OPTIMIZATION;

break;

case 'H':

ret=RegularExpression.PROHIBIT_HEAD_CHARACTER_OPTIMIZATION;

break;

case 'X':

ret=RegularExpression.XMLSCHEMA_MODE;

break;

case ',':

ret=RegularExpression.SPECIAL_COMMA;

break;

default :

}

return ret;

}

Location: REUtil.java

Content: 

/** 

 * @see RegularExpression#matches(java.lang.String)

 */

public static boolean matches(String regex,String target) throws ParseException {

  return REUtil.createRegex(regex,null).matches(target);

}

Location: REUtil.java

Content: 

/** 

 * @see RegularExpression#matches(java.lang.String)

 */

public static boolean matches(String regex,String options,String target) throws ParseException {

  return REUtil.createRegex(regex,options).matches(target);

}

Location: REUtil.java

Content: 

static final int parseOptions(String opts) throws ParseException {

  if (opts == null)   return 0;

  int options=0;

  for (int i=0; i < opts.length(); i++) {

    int v=getOptionValue(opts.charAt(i));

    if (v == 0)     throw new ParseException("Unknown Option: " + opts.substring(i),-1);

    options|=v;

  }

  return options;

}

Location: REUtil.java

Content: 

/** 

 */

public static String quoteMeta(String literal){

  int len=literal.length();

  StringBuffer buffer=null;

  for (int i=0; i < len; i++) {

    int ch=literal.charAt(i);

    if (".*+?{[()|\\^$".indexOf(ch) >= 0) {

      if (buffer == null) {

        buffer=new StringBuffer(i + (len - i) * 2);

        if (i > 0)         buffer.append(literal.substring(0,i));

      }

      buffer.append((char)'\\');

      buffer.append((char)ch);

    }

 else     if (buffer != null)     buffer.append((char)ch);

  }

  return buffer != null ? buffer.toString() : literal;

}

Location: REUtil.java

Content: 

private REUtil(){

}

Location: REUtil.java

Content: 

static String stripExtendedComment(String regex){

  int len=regex.length();

  StringBuffer buffer=new StringBuffer(len);

  int offset=0;

  int charClass=0;

  while (offset < len) {

    int ch=regex.charAt(offset++);

    if (ch == '\t' || ch == '\n' || ch == '\f' || ch == '\r' || ch == ' ') {

      if (charClass > 0) {

        buffer.append((char)ch);

      }

      continue;

    }

    if (ch == '#') {

      while (offset < len) {

        ch=regex.charAt(offset++);

        if (ch == '\r' || ch == '\n')         break;

      }

      continue;

    }

    int next;

    if (ch == '\\' && offset < len) {

      if ((next=regex.charAt(offset)) == '#' || next == '\t' || next == '\n' || next == '\f' || next == '\r' || next == ' ') {

        buffer.append((char)next);

        offset++;

      }

 else {

        buffer.append((char)'\\');

        buffer.append((char)next);

        offset++;

      }

    }

 else     if (ch == '[') {

      charClass++;

      buffer.append((char)ch);

      if (offset < len) {

        next=regex.charAt(offset);

        if (next == '[' || next == ']') {

          buffer.append((char)next);

          offset++;

        }

 else         if (next == '^' && offset + 1 < len) {

          next=regex.charAt(offset + 1);

          if (next == '[' || next == ']') {

            buffer.append((char)'^');

            buffer.append((char)next);

            offset+=2;

          }

        }

      }

    }

 else {

      if (charClass > 0 && ch == ']') {

        --charClass;

      }

      buffer.append((char)ch);

    }

  }

  return buffer.toString();

}

Location: REUtil.java

Content: 

static final String substring(CharacterIterator iterator,int begin,int end){

  char[] src=new char[end - begin];

  for (int i=0; i < src.length; i++)   src[i]=iterator.setIndex(i + begin);

  return new String(src);

}

