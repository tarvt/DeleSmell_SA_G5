Location: XMLGrammarPoolImpl.java

Content: 

/** 

 * Returns true if the grammar pool contains a grammar associated to the specified grammar description. Currently, the root element name is used as the key for DTD grammars and the target namespace  is used as the key for Schema grammars.

 * @param desc The Grammar Description.

 */

public boolean containsGrammar(XMLGrammarDescription desc){

synchronized (fGrammars) {

    int hash=hashCode(desc);

    int index=(hash & 0x7FFFFFFF) % fGrammars.length;

    for (Entry entry=fGrammars[index]; entry != null; entry=entry.next) {

      if ((entry.hash == hash) && equals(entry.desc,desc)) {

        return true;

      }

    }

    return false;

  }

}

Location: XMLGrammarPoolImpl.java

Content: 

/** 

 * This method checks whether two grammars are the same. Currently, we compare the root element names for DTD grammars and the target namespaces for Schema grammars. The application can override this behaviour and add its own logic.

 * @param desc1 The grammar description

 * @param desc2 The grammar description of the grammar to be compared to

 * @return      True if the grammars are equal, otherwise false

 */

public boolean equals(XMLGrammarDescription desc1,XMLGrammarDescription desc2){

  return desc1.equals(desc2);

}

Location: XMLGrammarPoolImpl.java

Content: 

/** 

 * Returns the grammar associated to the specified grammar description. Currently, the root element name is used as the key for DTD grammars and the target namespace  is used as the key for Schema grammars.

 * @param desc The Grammar Description.

 */

public Grammar getGrammar(XMLGrammarDescription desc){

synchronized (fGrammars) {

    int hash=hashCode(desc);

    int index=(hash & 0x7FFFFFFF) % fGrammars.length;

    for (Entry entry=fGrammars[index]; entry != null; entry=entry.next) {

      if ((entry.hash == hash) && equals(entry.desc,desc)) {

        return entry.grammar;

      }

    }

    return null;

  }

}

Location: XMLGrammarPoolImpl.java

Content: 

/** 

 * Returns the hash code value for the given grammar description.

 * @param desc The grammar description

 * @return     The hash code value

 */

public int hashCode(XMLGrammarDescription desc){

  return desc.hashCode();

}

Location: XMLGrammarPoolImpl.java

Content: 

/** 

 * Puts the specified grammar into the grammar pool and associates it to its root element name or its target namespace.

 * @param grammar The Grammar.

 */

public void putGrammar(Grammar grammar){

  if (!fPoolIsLocked) {

synchronized (fGrammars) {

      XMLGrammarDescription desc=grammar.getGrammarDescription();

      int hash=hashCode(desc);

      int index=(hash & 0x7FFFFFFF) % fGrammars.length;

      for (Entry entry=fGrammars[index]; entry != null; entry=entry.next) {

        if (entry.hash == hash && equals(entry.desc,desc)) {

          entry.grammar=grammar;

          return;

        }

      }

      Entry entry=new Entry(hash,desc,grammar,fGrammars[index]);

      fGrammars[index]=entry;

      fGrammarCount++;

    }

  }

}

Location: XMLGrammarPoolImpl.java

Content: 

/** 

 * Removes the grammar associated to the specified grammar description from the grammar pool and returns the removed grammar. Currently, the root element name is used as the key for DTD grammars and the target namespace  is used as the key for Schema grammars.

 * @param desc The Grammar Description.

 * @return     The removed grammar.

 */

public Grammar removeGrammar(XMLGrammarDescription desc){

synchronized (fGrammars) {

    int hash=hashCode(desc);

    int index=(hash & 0x7FFFFFFF) % fGrammars.length;

    for (Entry entry=fGrammars[index], prev=null; entry != null; prev=entry, entry=entry.next) {

      if ((entry.hash == hash) && equals(entry.desc,desc)) {

        if (prev != null) {

          prev.next=entry.next;

        }

 else {

          fGrammars[index]=entry.next;

        }

        Grammar tempGrammar=entry.grammar;

        entry.grammar=null;

        fGrammarCount--;

        return tempGrammar;

      }

    }

    return null;

  }

}

Location: XMLGrammarPoolImpl.java

Content: 

/** 

 * Constructs a grammar pool with a default number of buckets. 

 */

public XMLGrammarPoolImpl(){

  fGrammars=new Entry[TABLE_SIZE];

  fPoolIsLocked=false;

}

Location: XMLGrammarPoolImpl.java

Content: 

/** 

 * Constructs a grammar pool with a specified number of buckets. 

 */

public XMLGrammarPoolImpl(int initialCapacity){

  fGrammars=new Entry[initialCapacity];

  fPoolIsLocked=false;

}

