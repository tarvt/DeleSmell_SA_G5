Location: DocumentAS.java

Content: 

/** 

 * Associate a <code>ASModel</code> with a document. Can be invoked  multiple times to result in a list of <code>ASModel</code>s. Note  that only one internal <code>ASModel</code> is associated with the  document, however, and that only one of the possible list of  <code>ASModel</code>s is active at any one time.

 * @param as <code>ASModel</code> to be associated with the document.

 */

public void addAS(ASModel as);

Location: DocumentAS.java

Content: 

/** 

 * The active external ASModel. Note that the active external  <code>ASModel</code> is responsible for consulting the internal  ASModel, so if an attribute is declared in the internal  <code>ASModel</code> and the corresponding <code>ownerElements</code>  points to a <code>ASElementDeclaration</code>s defined in the active  external ASModel, changing the active external ASModel will cause the  <code>ownerElements</code> to be recomputed. If the  <code>ownerElements</code> is not defined in the newly active  external ASModel, the <code>ownerElements</code> will be an empty  node list. 

 */

public ASModel getActiveASModel();

Location: DocumentAS.java

Content: 

/** 

 * A list of <code>ASObject</code>s of type <code>AS_MODEL</code>s  associated with a document. The <code>addAS</code> method associates  a <code>ASModel</code> with a document.

 */

public ASObjectList getBoundASModels();

Location: DocumentAS.java

Content: 

/** 

 * Retrieve the internal <code>ASModel</code> of a document. 

 * @return <code>ASModel</code>.

 */

public ASModel getInternalAS();

Location: DocumentAS.java

Content: 

/** 

 * Removes a <code>ASModel</code> associated with a document. Can be  invoked multiple times to remove a number of these in the list of  <code>ASModel</code>s.

 * @param as The <code>ASModel</code> to be removed.

 */

public void removeAS(ASModel as);

Location: DocumentAS.java

Content: 

/** 

 * The active external ASModel. Note that the active external  <code>ASModel</code> is responsible for consulting the internal  ASModel, so if an attribute is declared in the internal  <code>ASModel</code> and the corresponding <code>ownerElements</code>  points to a <code>ASElementDeclaration</code>s defined in the active  external ASModel, changing the active external ASModel will cause the  <code>ownerElements</code> to be recomputed. If the  <code>ownerElements</code> is not defined in the newly active  external ASModel, the <code>ownerElements</code> will be an empty  node list. 

 */

public void setActiveASModel(ASModel activeASModel);

Location: DocumentAS.java

Content: 

/** 

 * A list of <code>ASObject</code>s of type <code>AS_MODEL</code>s  associated with a document. The <code>addAS</code> method associates  a <code>ASModel</code> with a document.

 */

public void setBoundASModels(ASObjectList boundASModels);

Location: DocumentAS.java

Content: 

/** 

 * Sets the internal subset <code>ASModel</code> of a document. This could  be null as a mechanism for "removal". 

 * @param as <code>ASModel</code> to be the internal subset of the document.

 */

public void setInternalAS(ASModel as);

