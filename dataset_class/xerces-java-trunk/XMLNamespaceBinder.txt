Location: XMLNamespaceBinder.java

Content: 

/** 

 * Returns true if the namespace binder only passes the prefix mapping events to the registered document handler; false if the namespace binder passes all document events.

 */

public boolean getOnlyPassPrefixMappingEvents(){

  return fOnlyPassPrefixMappingEvents;

}

Location: XMLNamespaceBinder.java

Content: 

/** 

 * Handles start element. 

 */

protected void handleStartElement(QName element,XMLAttributes attributes,Augmentations augs,boolean isEmpty) throws XNIException {

  fNamespaceContext.pushContext();

  if (element.prefix == XMLSymbols.PREFIX_XMLNS) {

    fErrorReporter.reportError(XMLMessageFormatter.XMLNS_DOMAIN,"ElementXMLNSPrefix",new Object[]{element.rawname},XMLErrorReporter.SEVERITY_FATAL_ERROR);

  }

  int length=attributes.getLength();

  for (int i=0; i < length; i++) {

    String localpart=attributes.getLocalName(i);

    String prefix=attributes.getPrefix(i);

    if (prefix == XMLSymbols.PREFIX_XMLNS || prefix == XMLSymbols.EMPTY_STRING && localpart == XMLSymbols.PREFIX_XMLNS) {

      String uri=fSymbolTable.addSymbol(attributes.getValue(i));

      if (prefix == XMLSymbols.PREFIX_XMLNS && localpart == XMLSymbols.PREFIX_XMLNS) {

        fErrorReporter.reportError(XMLMessageFormatter.XMLNS_DOMAIN,"CantBindXMLNS",new Object[]{attributes.getQName(i)},XMLErrorReporter.SEVERITY_FATAL_ERROR);

      }

      if (uri == NamespaceContext.XMLNS_URI) {

        fErrorReporter.reportError(XMLMessageFormatter.XMLNS_DOMAIN,"CantBindXMLNS",new Object[]{attributes.getQName(i)},XMLErrorReporter.SEVERITY_FATAL_ERROR);

      }

      if (localpart == XMLSymbols.PREFIX_XML) {

        if (uri != NamespaceContext.XML_URI) {

          fErrorReporter.reportError(XMLMessageFormatter.XMLNS_DOMAIN,"CantBindXML",new Object[]{attributes.getQName(i)},XMLErrorReporter.SEVERITY_FATAL_ERROR);

        }

      }

 else {

        if (uri == NamespaceContext.XML_URI) {

          fErrorReporter.reportError(XMLMessageFormatter.XMLNS_DOMAIN,"CantBindXML",new Object[]{attributes.getQName(i)},XMLErrorReporter.SEVERITY_FATAL_ERROR);

        }

      }

      prefix=localpart != XMLSymbols.PREFIX_XMLNS ? localpart : XMLSymbols.EMPTY_STRING;

      if (prefixBoundToNullURI(uri,localpart)) {

        fErrorReporter.reportError(XMLMessageFormatter.XMLNS_DOMAIN,"EmptyPrefixedAttName",new Object[]{attributes.getQName(i)},XMLErrorReporter.SEVERITY_FATAL_ERROR);

        continue;

      }

      fNamespaceContext.declarePrefix(prefix,uri.length() != 0 ? uri : null);

    }

  }

  String prefix=element.prefix != null ? element.prefix : XMLSymbols.EMPTY_STRING;

  element.uri=fNamespaceContext.getURI(prefix);

  if (element.prefix == null && element.uri != null) {

    element.prefix=XMLSymbols.EMPTY_STRING;

  }

  if (element.prefix != null && element.uri == null) {

    fErrorReporter.reportError(XMLMessageFormatter.XMLNS_DOMAIN,"ElementPrefixUnbound",new Object[]{element.prefix,element.rawname},XMLErrorReporter.SEVERITY_FATAL_ERROR);

  }

  for (int i=0; i < length; i++) {

    attributes.getName(i,fAttributeQName);

    String aprefix=fAttributeQName.prefix != null ? fAttributeQName.prefix : XMLSymbols.EMPTY_STRING;

    String arawname=fAttributeQName.rawname;

    if (arawname == XMLSymbols.PREFIX_XMLNS) {

      fAttributeQName.uri=fNamespaceContext.getURI(XMLSymbols.PREFIX_XMLNS);

      attributes.setName(i,fAttributeQName);

    }

 else     if (aprefix != XMLSymbols.EMPTY_STRING) {

      fAttributeQName.uri=fNamespaceContext.getURI(aprefix);

      if (fAttributeQName.uri == null) {

        fErrorReporter.reportError(XMLMessageFormatter.XMLNS_DOMAIN,"AttributePrefixUnbound",new Object[]{element.rawname,arawname,aprefix},XMLErrorReporter.SEVERITY_FATAL_ERROR);

      }

      attributes.setName(i,fAttributeQName);

    }

  }

  int attrCount=attributes.getLength();

  for (int i=0; i < attrCount - 1; i++) {

    String auri=attributes.getURI(i);

    if (auri == null || auri == NamespaceContext.XMLNS_URI) {

      continue;

    }

    String alocalpart=attributes.getLocalName(i);

    for (int j=i + 1; j < attrCount; j++) {

      String blocalpart=attributes.getLocalName(j);

      String buri=attributes.getURI(j);

      if (alocalpart == blocalpart && auri == buri) {

        fErrorReporter.reportError(XMLMessageFormatter.XMLNS_DOMAIN,"AttributeNSNotUnique",new Object[]{element.rawname,alocalpart,auri},XMLErrorReporter.SEVERITY_FATAL_ERROR);

      }

    }

  }

  if (fDocumentHandler != null && !fOnlyPassPrefixMappingEvents) {

    if (isEmpty) {

      fDocumentHandler.emptyElement(element,attributes,augs);

    }

 else {

      fDocumentHandler.startElement(element,attributes,augs);

    }

  }

}

Location: XMLNamespaceBinder.java

Content: 

/** 

 * Sets whether the namespace binder only passes the prefix mapping events to the registered document handler or passes all document events.

 * @param onlyPassPrefixMappingEvents True to pass only the prefixmapping events; false to pass all events.

 */

public void setOnlyPassPrefixMappingEvents(boolean onlyPassPrefixMappingEvents){

  fOnlyPassPrefixMappingEvents=onlyPassPrefixMappingEvents;

}

Location: XMLNamespaceBinder.java

Content: 

/** 

 * Default constructor. 

 */

public XMLNamespaceBinder(){

}

