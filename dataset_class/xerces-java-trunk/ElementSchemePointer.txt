Location: ElementSchemePointer.java

Content: 

/** 

 * Matches the current position of the element being visited by checking  its position and previous elements against the element XPointer expression.   If a match is found it return true else false.

 * @return boolean 

 */

protected boolean checkMatch(){

  if (!fIsShortHand) {

    if (fChildSequence.length <= fCurrentChildDepth + 1) {

      for (int i=0; i < fChildSequence.length; i++) {

        if (fChildSequence[i] != fCurrentChildSequence[i]) {

          return false;

        }

      }

    }

 else {

      return false;

    }

  }

 else {

    if (fChildSequence.length <= fCurrentChildDepth + 1) {

      for (int i=0; i < fChildSequence.length; i++) {

        if (fCurrentChildSequence.length < i + 2) {

          return false;

        }

        if (fChildSequence[i] != fCurrentChildSequence[i + 1]) {

          return false;

        }

      }

    }

 else {

      return false;

    }

  }

  return true;

}

Location: ElementSchemePointer.java

Content: 

public ElementSchemePointer(){

}

Location: ElementSchemePointer.java

Content: 

public ElementSchemePointer(SymbolTable symbolTable){

  fSymbolTable=symbolTable;

}

Location: ElementSchemePointer.java

Content: 

public ElementSchemePointer(SymbolTable symbolTable,XMLErrorReporter errorReporter){

  fSymbolTable=symbolTable;

  fErrorReporter=errorReporter;

}

Location: ElementSchemePointer.java

Content: 

/** 

 * Returns the scheme data

 * @see org.apache.xerces.xpointer.XPointerPart#getSchemeData()

 */

public String getSchemeData(){

  return fSchemeData;

}

Location: ElementSchemePointer.java

Content: 

/** 

 * Returns the scheme name i.e element

 * @see org.apache.xerces.xpointer.XPointerPart#getSchemeName()

 */

public String getSchemeName(){

  return fSchemeName;

}

Location: ElementSchemePointer.java

Content: 

/** 

 * Initializes the element scheme processor

 */

protected void init(){

  fSchemeName=null;

  fSchemeData=null;

  fShortHandPointerName=null;

  fIsResolveElement=false;

  fIsElementFound=false;

  fWasOnlyEmptyElementFound=false;

  fFoundDepth=0;

  fCurrentChildPosition=1;

  fCurrentChildDepth=0;

  fIsFragmentResolved=false;

  fShortHandPointer=null;

  initErrorReporter();

}

Location: ElementSchemePointer.java

Content: 

/** 

 * Initializes error handling objects

 */

protected void initErrorReporter(){

  if (fErrorReporter == null) {

    fErrorReporter=new XMLErrorReporter();

  }

  if (fErrorHandler == null) {

    fErrorHandler=new XPointerErrorHandler();

  }

  fErrorReporter.putMessageFormatter(XPointerMessageFormatter.XPOINTER_DOMAIN,new XPointerMessageFormatter());

}

Location: ElementSchemePointer.java

Content: 

/** 

 * Returns true if the XPointer expression resolves to a non-element child of the current resource fragment.       

 * @see org.apache.xerces.xpointer.XPointerPart#isChildFragmentResolved()

 */

public boolean isChildFragmentResolved(){

  if (fIsShortHand && fShortHandPointer != null && fChildSequence.length <= 0) {

    return fShortHandPointer.isChildFragmentResolved();

  }

 else {

    return fWasOnlyEmptyElementFound ? !fWasOnlyEmptyElementFound : (fIsFragmentResolved && (fCurrentChildDepth >= fFoundDepth));

  }

}

Location: ElementSchemePointer.java

Content: 

/** 

 * Returns true if the node matches or is a child of a matching element() scheme XPointer.

 * @see org.apache.xerces.xpointer.XPointerProcessor#isFragmentResolved()

 */

public boolean isFragmentResolved() throws XNIException {

  return fIsFragmentResolved;

}

Location: ElementSchemePointer.java

Content: 

/** 

 * Matches the current element position in the document tree with the element position specified in the element XPointer scheme.

 * @param event

 * @return boolean - true if the current element position in the document tree matches theelement position specified in the element XPointer  scheme.

 */

protected boolean matchChildSequence(QName element,int event) throws XNIException {

  if (fCurrentChildDepth >= fCurrentChildSequence.length) {

    int tmpCurrentChildSequence[]=new int[fCurrentChildSequence.length];

    System.arraycopy(fCurrentChildSequence,0,tmpCurrentChildSequence,0,fCurrentChildSequence.length);

    fCurrentChildSequence=new int[fCurrentChildDepth * 2];

    System.arraycopy(tmpCurrentChildSequence,0,fCurrentChildSequence,0,tmpCurrentChildSequence.length);

  }

  if (fIsResolveElement) {

    if (event == XPointerPart.EVENT_ELEMENT_START) {

      fCurrentChildSequence[fCurrentChildDepth]=fCurrentChildPosition;

      fCurrentChildDepth++;

      fCurrentChildPosition=1;

      if ((fCurrentChildDepth <= fFoundDepth) || (fFoundDepth == 0)) {

        if (checkMatch()) {

          fIsElementFound=true;

          fFoundDepth=fCurrentChildDepth;

        }

 else {

          fIsElementFound=false;

          fFoundDepth=0;

        }

      }

    }

 else     if (event == XPointerPart.EVENT_ELEMENT_END) {

      if (fCurrentChildDepth == fFoundDepth) {

        fIsElementFound=true;

      }

 else       if (((fCurrentChildDepth < fFoundDepth) && (fFoundDepth != 0)) || ((fCurrentChildDepth > fFoundDepth) && (fFoundDepth == 0))) {

        fIsElementFound=false;

      }

      fCurrentChildSequence[fCurrentChildDepth]=0;

      fCurrentChildDepth--;

      fCurrentChildPosition=fCurrentChildSequence[fCurrentChildDepth] + 1;

    }

 else     if (event == XPointerPart.EVENT_ELEMENT_EMPTY) {

      fCurrentChildSequence[fCurrentChildDepth]=fCurrentChildPosition;

      fCurrentChildPosition++;

      if (checkMatch()) {

        if (!fIsElementFound) {

          fWasOnlyEmptyElementFound=true;

        }

 else {

          fWasOnlyEmptyElementFound=false;

        }

        fIsElementFound=true;

      }

 else {

        fIsElementFound=false;

        fWasOnlyEmptyElementFound=false;

      }

    }

  }

  return fIsElementFound;

}

Location: ElementSchemePointer.java

Content: 

/** 

 * Parses the XPointer expression and tokenizes it into Strings delimited by whitespace.   

 * @see org.apache.xerces.xpointer.XPointerProcessor#parseXPointer(java.lang.String)

 */

public void parseXPointer(String xpointer) throws XNIException {

  hongshuai();

  fSchemeName=null;

  fSchemeData=null;

  fShortHandPointerName=null;

  fIsResolveElement=false;

  fIsElementFound=false;

  fWasOnlyEmptyElementFound=false;

  fFoundDepth=0;

  fCurrentChildPosition=1;

  fCurrentChildDepth=0;

  fIsFragmentResolved=false;

  fShortHandPointer=null;

  initErrorReporter();

  final Tokens tokens=new Tokens(fSymbolTable);

  Scanner scanner=new Scanner(fSymbolTable){

    protected void addToken(    Tokens tokens,    int token) throws XNIException {

      if (token == Tokens.XPTRTOKEN_ELEM_CHILD || token == Tokens.XPTRTOKEN_ELEM_NCNAME) {

        super.addToken(tokens,token);

        return;

      }

      reportError("InvalidElementSchemeToken",new Object[]{tokens.getTokenString(token)});

    }

  }

;

  int length=xpointer.length();

  boolean success=scanner.scanExpr(fSymbolTable,tokens,xpointer,0,length);

  if (!success) {

    reportError("InvalidElementSchemeXPointer",new Object[]{xpointer});

  }

  int tmpChildSequence[]=new int[tokens.getTokenCount() / 2 + 1];

  int i=0;

  while (tokens.hasMore()) {

    int token=tokens.nextToken();

switch (token) {

case Tokens.XPTRTOKEN_ELEM_NCNAME:

{

        token=tokens.nextToken();

        fShortHandPointerName=tokens.getTokenString(token);

        fShortHandPointer=new ShortHandPointer(fSymbolTable);

        fShortHandPointer.setSchemeName(fShortHandPointerName);

        break;

      }

case Tokens.XPTRTOKEN_ELEM_CHILD:

{

      tmpChildSequence[i]=tokens.nextToken();

      i++;

      break;

    }

default :

  reportError("InvalidElementSchemeXPointer",new Object[]{xpointer});

}

}

fChildSequence=new int[i];

fCurrentChildSequence=new int[i];

System.arraycopy(tmpChildSequence,0,fChildSequence,0,i);

}

Location: ElementSchemePointer.java

Content: 

/** 

 * Reports an XPointer error

 */

protected void reportError(String key,Object[] arguments) throws XNIException {

  throw new XNIException((fErrorReporter.getMessageFormatter(XPointerMessageFormatter.XPOINTER_DOMAIN)).formatMessage(fErrorReporter.getLocale(),key,arguments));

}

Location: ElementSchemePointer.java

Content: 

/** 

 * Responsible for resolving the element() scheme XPointer.  If a ShortHand Pointer is present and it is successfully resolved and if a child sequence is present, the child sequence is resolved relative to it.

 * @see org.apache.xerces.xpointer.XPointerProcessor#resolveXPointer(org.apache.xerces.xni.QName, org.apache.xerces.xni.XMLAttributes, org.apache.xerces.xni.Augmentations, int event)

 */

public boolean resolveXPointer(QName element,XMLAttributes attributes,Augmentations augs,int event) throws XNIException {

  boolean isShortHandPointerResolved=false;

  if (fShortHandPointerName != null) {

    isShortHandPointerResolved=fShortHandPointer.resolveXPointer(element,attributes,augs,event);

    if (isShortHandPointerResolved) {

      fIsResolveElement=true;

      fIsShortHand=true;

    }

 else {

      fIsResolveElement=false;

    }

  }

 else {

    fIsResolveElement=true;

  }

  if (fChildSequence.length > 0) {

    fIsFragmentResolved=matchChildSequence(element,event);

  }

 else   if (isShortHandPointerResolved && fChildSequence.length <= 0) {

    fIsFragmentResolved=isShortHandPointerResolved;

  }

 else {

    fIsFragmentResolved=false;

  }

  return fIsFragmentResolved;

}

Location: ElementSchemePointer.java

Content: 

/** 

 * Sets the scheme data

 * @see org.apache.xerces.xpointer.XPointerPart#setSchemeData(java.lang.String)

 */

public void setSchemeData(String schemeData){

  fSchemeData=schemeData;

}

Location: ElementSchemePointer.java

Content: 

/** 

 * Sets the scheme name

 * @see org.apache.xerces.xpointer.XPointerPart#setSchemeName(java.lang.String)

 */

public void setSchemeName(String schemeName){

  fSchemeName=schemeName;

}

