Location: ParentNode.java

Content: 

/** 

 * Create a NodeList to access children that is use by subclass elements that have methods named getLength() or item(int).  ChildAndParentNode optimizes getChildNodes() by implementing NodeList itself.  However if a subclass Element implements methods with the same name as the NodeList methods, they will override the actually methods in this class. <p> To use this method, the subclass should implement getChildNodes() and have it call this method.  The resulting NodeList instance maybe shared and cached in a transient field, but the cached value must be cleared if the node is cloned.

 */

protected final NodeList getChildNodesUnoptimized(){

  if (needsSyncChildren()) {

    synchronizeChildren();

  }

  return new NodeList(){

    /** 

 * @see NodeList.getLength()

 */

    public int getLength(){

      return nodeListGetLength();

    }

    /** 

 * @see NodeList.item(int)

 */

    public Node item(    int index){

      return nodeListItem(index);

    }

  }

;

}

Location: ParentNode.java

Content: 

void getTextContent(StringBuffer buf) throws DOMException {

  Node child=getFirstChild();

  while (child != null) {

    if (hasTextContent(child)) {

      ((NodeImpl)child).getTextContent(buf);

    }

    child=child.getNextSibling();

  }

}

Location: ParentNode.java

Content: 

final boolean hasTextContent(Node child){

  return child.getNodeType() != Node.COMMENT_NODE && child.getNodeType() != Node.PROCESSING_INSTRUCTION_NODE && (child.getNodeType() != Node.TEXT_NODE || ((TextImpl)child).isIgnorableWhitespace() == false);

}

Location: ParentNode.java

Content: 

/** 

 * Count the immediate children of this node.  Use to implement NodeList.getLength().

 * @return int

 */

private int nodeListGetLength(){

  if (fNodeListCache == null) {

    if (needsSyncChildren()) {

      synchronizeChildren();

    }

    if (firstChild == null) {

      return 0;

    }

    if (firstChild == lastChild()) {

      return 1;

    }

    fNodeListCache=ownerDocument.getNodeListCache(this);

  }

  if (fNodeListCache.fLength == -1) {

    int l;

    ChildNode n;

    if (fNodeListCache.fChildIndex != -1 && fNodeListCache.fChild != null) {

      l=fNodeListCache.fChildIndex;

      n=fNodeListCache.fChild;

    }

 else {

      n=firstChild;

      l=0;

    }

    while (n != null) {

      l++;

      n=n.nextSibling;

    }

    fNodeListCache.fLength=l;

  }

  return fNodeListCache.fLength;

}

Location: ParentNode.java

Content: 

/** 

 * Return the Nth immediate child of this node, or null if the index is out of bounds.  Use to implement NodeList.item().

 * @param index int

 */

private Node nodeListItem(int index){

  if (fNodeListCache == null) {

    if (needsSyncChildren()) {

      synchronizeChildren();

    }

    if (firstChild == lastChild()) {

      return index == 0 ? firstChild : null;

    }

    fNodeListCache=ownerDocument.getNodeListCache(this);

  }

  int i=fNodeListCache.fChildIndex;

  ChildNode n=fNodeListCache.fChild;

  boolean firstAccess=true;

  if (i != -1 && n != null) {

    firstAccess=false;

    if (i < index) {

      while (i < index && n != null) {

        i++;

        n=n.nextSibling;

      }

    }

 else     if (i > index) {

      while (i > index && n != null) {

        i--;

        n=n.previousSibling();

      }

    }

  }

 else {

    if (index < 0) {

      return null;

    }

    n=firstChild;

    for (i=0; i < index && n != null; i++) {

      n=n.nextSibling;

    }

  }

  if (!firstAccess && (n == firstChild || n == lastChild())) {

    fNodeListCache.fChildIndex=-1;

    fNodeListCache.fChild=null;

    ownerDocument.freeNodeListCache(fNodeListCache);

  }

 else {

    fNodeListCache.fChildIndex=i;

    fNodeListCache.fChild=n;

  }

  return n;

}

Location: ParentNode.java

Content: 

/** 

 * same as above but returns internal type and this one is not overridden by CoreDocumentImpl to return null

 */

CoreDocumentImpl ownerDocument(){

  return ownerDocument;

}

Location: ParentNode.java

Content: 

/** 

 * No public constructor; only subclasses of ParentNode should be instantiated, and those normally via a Document's factory methods

 */

protected ParentNode(CoreDocumentImpl ownerDocument){

  super(ownerDocument);

  this.ownerDocument=ownerDocument;

}

