Location: ParserConfigurationSettings.java

Content: 

/** 

 * Check a feature. If feature is known and supported, this method simply returns. Otherwise, the appropriate exception is thrown.

 * @param featureId The unique identifier (URI) of the feature.

 * @exception org.apache.xerces.xni.parser.XMLConfigurationException If therequested feature is not known.

 */

protected void checkFeature(String featureId) throws XMLConfigurationException {

  if (!fRecognizedFeatures.contains(featureId)) {

    if (fParentSettings != null) {

      fParentSettings.getFeature(featureId);

    }

 else {

      short type=XMLConfigurationException.NOT_RECOGNIZED;

      throw new XMLConfigurationException(type,featureId);

    }

  }

}

Location: ParserConfigurationSettings.java

Content: 

/** 

 * Check a property. If the property is known and supported, this method simply returns. Otherwise, the appropriate exception is thrown.

 * @param propertyId The unique identifier (URI) of the propertybeing set.

 * @exception org.apache.xerces.xni.parser.XMLConfigurationException If therequested feature is not known.

 */

protected void checkProperty(String propertyId) throws XMLConfigurationException {

  if (!fRecognizedProperties.contains(propertyId)) {

    if (fParentSettings != null) {

      fParentSettings.getProperty(propertyId);

    }

 else {

      short type=XMLConfigurationException.NOT_RECOGNIZED;

      throw new XMLConfigurationException(type,propertyId);

    }

  }

}

Location: ParserConfigurationSettings.java

Content: 

/** 

 * Default Constructor. 

 */

public ParserConfigurationSettings(){

  this(null);

}

Location: ParserConfigurationSettings.java

Content: 

/** 

 * Constructs a parser configuration settings object with a parent settings object.

 */

public ParserConfigurationSettings(XMLComponentManager parent){

  fRecognizedFeatures=new ArrayList();

  fRecognizedProperties=new ArrayList();

  fFeatures=new HashMap();

  fProperties=new HashMap();

  fParentSettings=parent;

}

