Location: ASContentModel.java

Content: 

/** 

 * Appends a new node to the end of the list representing the <code>subModels</code>.

 * @param newNode The new node to be appended.

 * @return the length of the <code>subModels</code>.

 * @exception DOMASException <code>DUPLICATE_NAME_ERR</code>: Raised if a element declaration  already exists with the same name within an <code>AS_CHOICE</code>  operator.  <br> <code>TYPE_ERR</code>: Raised if type is neither an  <code>ASContentModel</code> nor an <code>ASElementDeclaration</code> . 

 */

public int appendsubModel(ASObject newNode) throws DOMASException ;

Location: ASContentModel.java

Content: 

/** 

 * One of <code>AS_CHOICE</code>, <code>AS_SEQUENCE</code>,  <code>AS_ALL</code> or <code>AS_NONE</code>. The operator is applied  to all the components(ASObjects) in the <code>subModels</code>. For  example, if the list operator is <code>AS_CHOICE</code> and the  components in subModels are a, b and c then the abstract schema for  the element being declared is <code>(a|b|c)</code>. 

 */

public short getListOperator();

Location: ASContentModel.java

Content: 

/** 

 * Pointers to <code>ASObject</code>s such as  <code> ASElementDeclaration</code>s and further  <code>ASContentModel</code>s. 

 */

public ASObjectList getSubModels();

Location: ASContentModel.java

Content: 

/** 

 * Inserts a new node in the submodel. Nodes that already exist in the  list are moved as needed. 

 * @param newNode The new node to be inserted.

 * @exception DOMASException <code>DUPLICATE_NAME_ERR</code>: Raised if a element declaration  already exists with the same name within an <code>AS_CHOICE</code>  operator. 

 */

public void insertsubModel(ASObject newNode) throws DOMASException ;

Location: ASContentModel.java

Content: 

/** 

 * Removes the <code>ASObject</code> in the submodel. Nodes that already  exist in the list are moved as needed. 

 * @param oldNode The node to be removed.

 */

public void removesubModel(ASObject oldNode);

Location: ASContentModel.java

Content: 

/** 

 * One of <code>AS_CHOICE</code>, <code>AS_SEQUENCE</code>,  <code>AS_ALL</code> or <code>AS_NONE</code>. The operator is applied  to all the components(ASObjects) in the <code>subModels</code>. For  example, if the list operator is <code>AS_CHOICE</code> and the  components in subModels are a, b and c then the abstract schema for  the element being declared is <code>(a|b|c)</code>. 

 */

public void setListOperator(short listOperator);

Location: ASContentModel.java

Content: 

/** 

 * maximum occurrence for this content particle. Its value may be  <code>0</code>, a positive integer, or <code>AS_UNBOUNDED</code> to  indicate that no upper limit has been set. 

 */

public void setMaxOccurs(int maxOccurs);

Location: ASContentModel.java

Content: 

/** 

 * min occurrence for this content particle. Its value may be 0 or a  positive integer. 

 */

public void setMinOccurs(int minOccurs);

Location: ASContentModel.java

Content: 

/** 

 * Pointers to <code>ASObject</code>s such as  <code> ASElementDeclaration</code>s and further  <code>ASContentModel</code>s. 

 */

public void setSubModels(ASObjectList subModels);

