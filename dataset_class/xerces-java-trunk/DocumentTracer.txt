Location: DocumentTracer.java

Content: 

/** 

 * Any. 

 */

public void any(Augmentations augs) throws XNIException {

  printIndent();

  fOut.print("any(");

  if (augs != null) {

    fOut.print(',');

    printAugmentations(augs);

  }

  fOut.println(')');

  fOut.flush();

}

Location: DocumentTracer.java

Content: 

/** 

 * Attribute declaration. 

 */

public void attributeDecl(String elementName,String attributeName,String type,String valueDefault,String value) throws SAXException {

  printIndent();

  fOut.print("attributeDecl(");

  fOut.print("elementName=");

  printQuotedString(elementName);

  fOut.print(',');

  fOut.print("attributeName=");

  printQuotedString(attributeName);

  fOut.print(',');

  fOut.print("type=");

  printQuotedString(type);

  fOut.print(',');

  fOut.print("valueDefault=");

  printQuotedString(valueDefault);

  fOut.print(',');

  fOut.print("value=");

  printQuotedString(value);

  fOut.println(')');

  fOut.flush();

}

Location: DocumentTracer.java

Content: 

/** 

 * Attribute declaration. 

 */

public void attributeDecl(String elementName,String attributeName,String type,String[] enumeration,String defaultType,XMLString defaultValue,XMLString nonNormalizedDefaultValue,Augmentations augs) throws XNIException {

  printIndent();

  fOut.print("attributeDecl(");

  fOut.print("elementName=");

  printQuotedString(elementName);

  fOut.print(',');

  fOut.print("attributeName=");

  printQuotedString(attributeName);

  fOut.print(',');

  fOut.print("type=");

  printQuotedString(type);

  fOut.print(',');

  fOut.print("enumeration=");

  if (enumeration == null) {

    fOut.print("null");

  }

 else {

    fOut.print('{');

    for (int i=0; i < enumeration.length; i++) {

      printQuotedString(enumeration[i]);

      if (i < enumeration.length - 1) {

        fOut.print(',');

      }

    }

    fOut.print('}');

  }

  fOut.print(',');

  fOut.print("defaultType=");

  printQuotedString(defaultType);

  fOut.print(',');

  fOut.print("defaultValue=");

  if (defaultValue == null) {

    fOut.print("null");

  }

 else {

    printQuotedString(defaultValue.ch,defaultValue.offset,defaultValue.length);

  }

  fOut.print(',');

  fOut.print("nonNormalizedDefaultValue=");

  if (nonNormalizedDefaultValue == null) {

    fOut.print("null");

  }

 else {

    printQuotedString(nonNormalizedDefaultValue.ch,nonNormalizedDefaultValue.offset,nonNormalizedDefaultValue.length);

  }

  if (augs != null) {

    fOut.print(',');

    printAugmentations(augs);

  }

  fOut.println(')');

  fOut.flush();

}

Location: DocumentTracer.java

Content: 

/** 

 * Default constructor. 

 */

public DocumentTracer(){

  this(null);

}

Location: DocumentTracer.java

Content: 

/** 

 * Default constructor. 

 */

public DocumentTracer(XMLParserConfiguration config){

  super(config);

  setOutput(new PrintWriter(System.out));

  fConfiguration.setErrorHandler(this);

}

Location: DocumentTracer.java

Content: 

/** 

 * Element declaration. 

 */

public void elementDecl(String name,String contentModel) throws SAXException {

  printIndent();

  fOut.print("elementDecl(");

  fOut.print("name=");

  printQuotedString(name);

  fOut.print(',');

  fOut.print("contentModel=");

  printQuotedString(contentModel);

  fOut.println(')');

  fOut.flush();

}

Location: DocumentTracer.java

Content: 

/** 

 * Element declaration. 

 */

public void elementDecl(String name,String contentModel,Augmentations augs) throws XNIException {

  printIndent();

  fOut.print("elementDecl(");

  fOut.print("name=");

  printQuotedString(name);

  fOut.print(',');

  fOut.print("contentModel=");

  printQuotedString(contentModel);

  if (augs != null) {

    fOut.print(',');

    printAugmentations(augs);

  }

  fOut.println(')');

  fOut.flush();

}

Location: DocumentTracer.java

Content: 

/** 

 * Element. 

 */

public void element(String elementName,Augmentations augs) throws XNIException {

  printIndent();

  fOut.print("element(");

  fOut.print("elementName=");

  printQuotedString(elementName);

  if (augs != null) {

    fOut.print(',');

    printAugmentations(augs);

  }

  fOut.println(')');

  fOut.flush();

}

Location: DocumentTracer.java

Content: 

/** 

 * Empty. 

 */

public void empty(Augmentations augs) throws XNIException {

  printIndent();

  fOut.print("empty(");

  if (augs != null) {

    fOut.print(',');

    printAugmentations(augs);

  }

  fOut.println(')');

  fOut.flush();

}

Location: DocumentTracer.java

Content: 

/** 

 * End attribute list. 

 */

public void endAttlist(Augmentations augs) throws XNIException {

  fIndent--;

  printIndent();

  fOut.print("endAttlist(");

  if (augs != null) {

    fOut.print(',');

    printAugmentations(augs);

  }

  fOut.println(')');

  fOut.flush();

}

Location: DocumentTracer.java

Content: 

/** 

 * End conditional section. 

 */

public void endConditional(Augmentations augs) throws XNIException {

  fIndent--;

  printIndent();

  fOut.print("endConditional(");

  if (augs != null) {

    fOut.print(',');

    printAugmentations(augs);

  }

  fOut.println(')');

  fOut.flush();

}

Location: DocumentTracer.java

Content: 

/** 

 * End content model. 

 */

public void endContentModel(Augmentations augs) throws XNIException {

  fIndent--;

  printIndent();

  fOut.print("endContentModel(");

  if (augs != null) {

    fOut.print(',');

    printAugmentations(augs);

  }

  fOut.println(')');

  fOut.flush();

}

Location: DocumentTracer.java

Content: 

/** 

 * End document. 

 */

public void endDocument() throws SAXException {

  fIndent--;

  printIndent();

  fOut.println("endDocument()");

  fOut.flush();

}

Location: DocumentTracer.java

Content: 

/** 

 * End DTD. 

 */

public void endDTD(Augmentations augs) throws XNIException {

  fIndent--;

  printIndent();

  fOut.print("endDTD(");

  if (augs != null) {

    fOut.print(',');

    printAugmentations(augs);

  }

  fOut.println(')');

  fOut.flush();

}

Location: DocumentTracer.java

Content: 

/** 

 * End element. 

 */

public void endElement(String name) throws SAXException {

  fIndent--;

  printIndent();

  fOut.print("endElement(");

  fOut.print("name=");

  printQuotedString(name);

  fOut.println(')');

  fOut.flush();

}

Location: DocumentTracer.java

Content: 

/** 

 * End external subset. 

 */

public void endExternalSubset(Augmentations augs) throws XNIException {

  fIndent--;

  printIndent();

  fOut.print("endExternalSubset(");

  if (augs != null) {

    fOut.print(',');

    printAugmentations(augs);

  }

  fOut.println(')');

  fOut.flush();

}

Location: DocumentTracer.java

Content: 

/** 

 * End group. 

 */

public void endGroup(Augmentations augs) throws XNIException {

  fIndent--;

  printIndent();

  fOut.print("endGroup(");

  if (augs != null) {

    fOut.print(',');

    printAugmentations(augs);

  }

  fOut.println(')');

  fOut.flush();

}

Location: DocumentTracer.java

Content: 

/** 

 * End entity. 

 */

public void endParameterEntity(String name,Augmentations augs) throws XNIException {

  fIndent--;

  printIndent();

  fOut.print("endParameterEntity(");

  fOut.print("name=");

  printQuotedString(name);

  if (augs != null) {

    fOut.print(',');

    printAugmentations(augs);

  }

  fOut.println(')');

  fOut.flush();

}

Location: DocumentTracer.java

Content: 

/** 

 * End prefix mapping. 

 */

public void endPrefixMapping(String prefix) throws SAXException {

  printIndent();

  fOut.print("endPrefixMapping(");

  fOut.print("prefix=");

  printQuotedString(prefix);

  fOut.println(')');

  fOut.flush();

}

Location: DocumentTracer.java

Content: 

/** 

 * External entity declaration. 

 */

public void externalEntityDecl(String name,String publicId,String systemId) throws SAXException {

  printIndent();

  fOut.print("externalEntityDecl(");

  fOut.print("name=");

  printQuotedString(name);

  fOut.print(',');

  fOut.print("publicId=");

  printQuotedString(publicId);

  fOut.print(',');

  fOut.print("systemId=");

  printQuotedString(systemId);

  fOut.println(')');

  fOut.flush();

}

Location: DocumentTracer.java

Content: 

/** 

 * External entity declaration. 

 */

public void externalEntityDecl(String name,XMLResourceIdentifier identifier,Augmentations augs) throws XNIException {

  printIndent();

  fOut.print("externalEntityDecl(");

  fOut.print("name=");

  printQuotedString(name);

  fOut.print(',');

  fOut.print("publicId=");

  printQuotedString(identifier.getPublicId());

  fOut.print(',');

  fOut.print("systemId=");

  printQuotedString(identifier.getLiteralSystemId());

  fOut.print(',');

  fOut.print("baseSystemId=");

  printQuotedString(identifier.getBaseSystemId());

  if (augs != null) {

    fOut.print(',');

    printAugmentations(augs);

  }

  fOut.println(')');

  fOut.flush();

}

Location: DocumentTracer.java

Content: 

/** 

 * Characters.

 */

public void ignoredCharacters(XMLString text,Augmentations augs) throws XNIException {

  printIndent();

  fOut.print("ignoredCharacters(");

  fOut.print("text=");

  printQuotedString(text.ch,text.offset,text.length);

  if (augs != null) {

    fOut.print(',');

    printAugmentations(augs);

  }

  fOut.println(')');

  fOut.flush();

}

Location: DocumentTracer.java

Content: 

/** 

 * Internal entity declaration. 

 */

public void internalEntityDecl(String name,String text) throws SAXException {

  printIndent();

  fOut.print("internalEntityDecl(");

  fOut.print("name=");

  printQuotedString(name);

  fOut.print(',');

  fOut.print("text=");

  printQuotedString(text);

  fOut.println(')');

  fOut.flush();

}

Location: DocumentTracer.java

Content: 

/** 

 * Internal entity declaration. 

 */

public void internalEntityDecl(String name,XMLString text,XMLString nonNormalizedText,Augmentations augs) throws XNIException {

  printIndent();

  fOut.print("internalEntityDecl(");

  fOut.print("name=");

  printQuotedString(name);

  fOut.print(',');

  fOut.print("text=");

  printQuotedString(text.ch,text.offset,text.length);

  fOut.print(',');

  fOut.print("nonNormalizedText=");

  printQuotedString(nonNormalizedText.ch,nonNormalizedText.offset,nonNormalizedText.length);

  if (augs != null) {

    fOut.print(',');

    printAugmentations(augs);

  }

  fOut.println(')');

  fOut.flush();

}

Location: DocumentTracer.java

Content: 

/** 

 * Normalize and print. 

 */

protected void normalizeAndPrint(char c){

switch (c) {

case '\n':

{

      fOut.print("\\n");

      break;

    }

case '\r':

{

    fOut.print("\\r");

    break;

  }

case '\t':

{

  fOut.print("\\t");

  break;

}

case '\\':

{

fOut.print("\\\\");

break;

}

case '"':

{

fOut.print("\\\"");

break;

}

default :

{

fOut.print(c);

}

}

}

Location: DocumentTracer.java

Content: 

/** 

 * Notation declaration. 

 */

public void notationDecl(String name,String publicId,String systemId) throws SAXException {

  printIndent();

  fOut.print("notationDecl(");

  fOut.print("name=");

  printQuotedString(name);

  fOut.print(',');

  fOut.print("publicId=");

  printQuotedString(publicId);

  fOut.print(',');

  fOut.print("systemId=");

  printQuotedString(systemId);

  fOut.println(')');

  fOut.flush();

}

Location: DocumentTracer.java

Content: 

/** 

 * Notation declaration. 

 */

public void notationDecl(String name,XMLResourceIdentifier identifier,Augmentations augs) throws XNIException {

  printIndent();

  fOut.print("notationDecl(");

  fOut.print("name=");

  printQuotedString(name);

  fOut.print(',');

  fOut.print("publicId=");

  printQuotedString(identifier.getPublicId());

  fOut.print(',');

  fOut.print("systemId=");

  printQuotedString(identifier.getLiteralSystemId());

  fOut.print(',');

  fOut.print("baseSystemId=");

  printQuotedString(identifier.getBaseSystemId());

  if (augs != null) {

    fOut.print(',');

    printAugmentations(augs);

  }

  fOut.println(')');

  fOut.flush();

}

Location: DocumentTracer.java

Content: 

/** 

 * Occurrence. 

 */

public void occurrence(short occurrence,Augmentations augs) throws XNIException {

  printIndent();

  fOut.print("occurrence(");

  fOut.print("occurrence=");

switch (occurrence) {

case XMLDTDContentModelHandler.OCCURS_ONE_OR_MORE:

{

      fOut.print("OCCURS_ONE_OR_MORE");

      break;

    }

case XMLDTDContentModelHandler.OCCURS_ZERO_OR_MORE:

{

    fOut.print("OCCURS_ZERO_OR_MORE");

    break;

  }

case XMLDTDContentModelHandler.OCCURS_ZERO_OR_ONE:

{

  fOut.print("OCCURS_ZERO_OR_ONE");

  break;

}

default :

{

fOut.print("??? (" + occurrence + ')');

}

}

if (augs != null) {

fOut.print(',');

printAugmentations(augs);

}

fOut.println(')');

fOut.flush();

}

Location: DocumentTracer.java

Content: 

/** 

 * #PCDATA. 

 */

public void pcdata(Augmentations augs) throws XNIException {

  printIndent();

  fOut.print("pcdata(");

  if (augs != null) {

    fOut.print(',');

    printAugmentations(augs);

  }

  fOut.println(')');

  fOut.flush();

}

Location: DocumentTracer.java

Content: 

/** 

 * Prints augmentations. 

 */

protected void printAugmentations(Augmentations augs){

  fOut.print("augs={");

  java.util.Enumeration keys=augs.keys();

  while (keys.hasMoreElements()) {

    String key=(String)keys.nextElement();

    Object value=augs.getItem(key);

    fOut.print(key);

    fOut.print('#');

    fOut.print(String.valueOf(value));

  }

  fOut.print('}');

}

Location: DocumentTracer.java

Content: 

/** 

 * Prints an element. 

 */

protected void printElement(QName element,XMLAttributes attributes){

  fOut.print("element=");

  fOut.print('{');

  fOut.print("prefix=");

  printQuotedString(element.prefix);

  fOut.print(',');

  fOut.print("localpart=");

  printQuotedString(element.localpart);

  fOut.print(',');

  fOut.print("rawname=");

  printQuotedString(element.rawname);

  fOut.print(',');

  fOut.print("uri=");

  printQuotedString(element.uri);

  fOut.print('}');

  fOut.print(',');

  fOut.print("attributes=");

  if (attributes == null) {

    fOut.println("null");

  }

 else {

    fOut.print('{');

    int length=attributes.getLength();

    for (int i=0; i < length; i++) {

      if (i > 0) {

        fOut.print(',');

      }

      attributes.getName(i,fQName);

      String attrType=attributes.getType(i);

      String attrValue=attributes.getValue(i);

      String attrNonNormalizedValue=attributes.getNonNormalizedValue(i);

      Augmentations augs=attributes.getAugmentations(i);

      fOut.print("name=");

      fOut.print('{');

      fOut.print("prefix=");

      printQuotedString(fQName.prefix);

      fOut.print(',');

      fOut.print("localpart=");

      printQuotedString(fQName.localpart);

      fOut.print(',');

      fOut.print("rawname=");

      printQuotedString(fQName.rawname);

      fOut.print(',');

      fOut.print("uri=");

      printQuotedString(fQName.uri);

      fOut.print('}');

      fOut.print(',');

      fOut.print("type=");

      printQuotedString(attrType);

      fOut.print(',');

      fOut.print("value=");

      printQuotedString(attrValue);

      fOut.print(',');

      fOut.print("nonNormalizedValue=");

      printQuotedString(attrNonNormalizedValue);

      if (attributes.isSpecified(i) == false) {

        fOut.print("(default)");

      }

      if (augs != null) {

        fOut.print(',');

        printAugmentations(augs);

      }

      fOut.print('}');

    }

    fOut.print('}');

  }

}

Location: DocumentTracer.java

Content: 

protected void printEndNamespaceMapping(){

  int count=fNamespaceContext.getDeclaredPrefixCount();

  if (count > 0) {

    for (int i=0; i < count; i++) {

      printIndent();

      fOut.print("endPrefix(");

      fOut.print("prefix=");

      String prefix=fNamespaceContext.getDeclaredPrefixAt(i);

      printQuotedString(prefix);

      fOut.println(')');

      fOut.flush();

    }

  }

}

Location: DocumentTracer.java

Content: 

/** 

 * Prints the indent. 

 */

protected void printIndent(){

  for (int i=0; i < fIndent; i++) {

    fOut.print(' ');

  }

}

Location: DocumentTracer.java

Content: 

protected void printInScopeNamespaces(){

  int count=fNamespaceContext.getDeclaredPrefixCount();

  if (count > 0) {

    for (int i=0; i < count; i++) {

      printIndent();

      fOut.print("declaredPrefix(");

      fOut.print("prefix=");

      String prefix=fNamespaceContext.getDeclaredPrefixAt(i);

      printQuotedString(prefix);

      fOut.print(',');

      fOut.print("uri=");

      printQuotedString(fNamespaceContext.getURI(prefix));

      fOut.println(')');

      fOut.flush();

    }

  }

}

Location: DocumentTracer.java

Content: 

/** 

 * Print quoted string. 

 */

protected void printQuotedString(char[] ch,int offset,int length){

  fOut.print('"');

  for (int i=0; i < length; i++) {

    normalizeAndPrint(ch[offset + i]);

  }

  fOut.print('"');

}

Location: DocumentTracer.java

Content: 

/** 

 * Print quoted string. 

 */

protected void printQuotedString(String s){

  if (s == null) {

    fOut.print("null");

    return;

  }

  fOut.print('"');

  int length=s.length();

  for (int i=0; i < length; i++) {

    char c=s.charAt(i);

    normalizeAndPrint(c);

  }

  fOut.print('"');

}

Location: DocumentTracer.java

Content: 

/** 

 * separator. 

 */

public void separator(short separator,Augmentations augs) throws XNIException {

  printIndent();

  fOut.print("separator(");

  fOut.print("separator=");

switch (separator) {

case XMLDTDContentModelHandler.SEPARATOR_CHOICE:

{

      fOut.print("SEPARATOR_CHOICE");

      break;

    }

case XMLDTDContentModelHandler.SEPARATOR_SEQUENCE:

{

    fOut.print("SEPARATOR_SEQUENCE");

    break;

  }

default :

{

  fOut.print("??? (" + separator + ')');

}

}

if (augs != null) {

fOut.print(',');

printAugmentations(augs);

}

fOut.println(')');

fOut.flush();

}

Location: DocumentTracer.java

Content: 

/** 

 * Sets the output stream for printing. 

 */

public void setOutput(OutputStream stream,String encoding) throws UnsupportedEncodingException {

  if (encoding == null) {

    encoding="UTF8";

  }

  Writer writer=new OutputStreamWriter(stream,encoding);

  fOut=new PrintWriter(writer);

}

Location: DocumentTracer.java

Content: 

/** 

 * Sets the output writer. 

 */

public void setOutput(Writer writer){

  fOut=writer instanceof PrintWriter ? (PrintWriter)writer : new PrintWriter(writer);

}

Location: DocumentTracer.java

Content: 

/** 

 * Skipped entity. 

 */

public void skippedEntity(String name) throws SAXException {

  printIndent();

  fOut.print("skippedEntity(");

  fOut.print("name=");

  printQuotedString(name);

  fOut.println(')');

  fOut.flush();

}

Location: DocumentTracer.java

Content: 

/** 

 * Start attribute list. 

 */

public void startAttlist(String elementName,Augmentations augs) throws XNIException {

  printIndent();

  fOut.print("startAttlist(");

  fOut.print("elementName=");

  printQuotedString(elementName);

  if (augs != null) {

    fOut.print(',');

    printAugmentations(augs);

  }

  fOut.println(')');

  fOut.flush();

  fIndent++;

}

Location: DocumentTracer.java

Content: 

/** 

 * Start conditional section. 

 */

public void startConditional(short type,Augmentations augs) throws XNIException {

  printIndent();

  fOut.print("startConditional(");

  fOut.print("type=");

switch (type) {

case XMLDTDHandler.CONDITIONAL_IGNORE:

{

      fOut.print("CONDITIONAL_IGNORE");

      break;

    }

case XMLDTDHandler.CONDITIONAL_INCLUDE:

{

    fOut.print("CONDITIONAL_INCLUDE");

    break;

  }

default :

{

  fOut.print("??? (" + type + ')');

}

}

if (augs != null) {

fOut.print(',');

printAugmentations(augs);

}

fOut.println(')');

fOut.flush();

fIndent++;

}

Location: DocumentTracer.java

Content: 

/** 

 * Start content model. 

 */

public void startContentModel(String elementName,Augmentations augs) throws XNIException {

  printIndent();

  fOut.print("startContentModel(");

  fOut.print("elementName=");

  printQuotedString(elementName);

  if (augs != null) {

    fOut.print(',');

    printAugmentations(augs);

  }

  fOut.println(')');

  fOut.flush();

  fIndent++;

}

Location: DocumentTracer.java

Content: 

/** 

 * Start DTD. 

 */

public void startDTD(XMLLocator locator,Augmentations augs) throws XNIException {

  printIndent();

  fOut.print("startDTD(");

  fOut.print("locator=");

  if (locator == null) {

    fOut.print("null");

  }

 else {

    fOut.print('{');

    fOut.print("publicId=");

    printQuotedString(locator.getPublicId());

    fOut.print(',');

    fOut.print("literal systemId=");

    printQuotedString(locator.getLiteralSystemId());

    fOut.print(',');

    fOut.print("baseSystemId=");

    printQuotedString(locator.getBaseSystemId());

    fOut.print(',');

    fOut.print("expanded systemId=");

    printQuotedString(locator.getExpandedSystemId());

    fOut.print(',');

    fOut.print("lineNumber=");

    fOut.print(locator.getLineNumber());

    fOut.print(',');

    fOut.print("columnNumber=");

    fOut.print(locator.getColumnNumber());

    fOut.print('}');

  }

  if (augs != null) {

    fOut.print(',');

    printAugmentations(augs);

  }

  fOut.println(')');

  fOut.flush();

  fIndent++;

}

Location: DocumentTracer.java

Content: 

/** 

 * Start element. 

 */

public void startElement(String name,AttributeList attributes) throws SAXException {

  printIndent();

  fOut.print("startElement(");

  fOut.print("name=");

  printQuotedString(name);

  fOut.print(',');

  fOut.print("attributes=");

  if (attributes == null) {

    fOut.println("null");

  }

 else {

    fOut.print('{');

    int length=attributes.getLength();

    for (int i=0; i < length; i++) {

      if (i > 0) {

        System.out.print(',');

      }

      String attrName=attributes.getName(i);

      String attrType=attributes.getType(i);

      String attrValue=attributes.getValue(i);

      fOut.print('{');

      fOut.print("name=");

      printQuotedString(attrName);

      fOut.print(',');

      fOut.print("type=");

      printQuotedString(attrType);

      fOut.print(',');

      fOut.print("value=");

      printQuotedString(attrValue);

      fOut.print('}');

    }

    fOut.print('}');

  }

  fOut.println(')');

  fOut.flush();

  fIndent++;

}

Location: DocumentTracer.java

Content: 

/** 

 * Start external subset. 

 */

public void startExternalSubset(XMLResourceIdentifier identifier,Augmentations augs) throws XNIException {

  printIndent();

  fOut.print("startExternalSubset(");

  if (augs != null) {

    fOut.print(',');

    printAugmentations(augs);

  }

  fOut.println(')');

  fOut.flush();

  fIndent++;

}

Location: DocumentTracer.java

Content: 

/** 

 * Start group. 

 */

public void startGroup(Augmentations augs) throws XNIException {

  printIndent();

  fOut.print("startGroup(");

  if (augs != null) {

    fOut.print(',');

    printAugmentations(augs);

  }

  fOut.println(')');

  fOut.flush();

  fIndent++;

}

Location: DocumentTracer.java

Content: 

/** 

 * Start entity. 

 */

public void startParameterEntity(String name,XMLResourceIdentifier identifier,String encoding,Augmentations augs) throws XNIException {

  printIndent();

  fOut.print("startParameterEntity(");

  fOut.print("name=");

  printQuotedString(name);

  fOut.print(',');

  fOut.print("identifier=");

  fOut.print(identifier);

  fOut.print(',');

  fOut.print("encoding=");

  printQuotedString(encoding);

  if (augs != null) {

    fOut.print(',');

    printAugmentations(augs);

  }

  fOut.println(')');

  fOut.flush();

  fIndent++;

}

Location: DocumentTracer.java

Content: 

/** 

 * Start prefix mapping. 

 */

public void startPrefixMapping(String prefix,String uri) throws SAXException {

  printIndent();

  fOut.print("startPrefixMapping(");

  fOut.print("prefix=");

  printQuotedString(prefix);

  fOut.print(',');

  fOut.print("uri=");

  printQuotedString(uri);

  fOut.println(')');

  fOut.flush();

}

Location: DocumentTracer.java

Content: 

/** 

 * Unparsed entity declaration. 

 */

public void unparsedEntityDecl(String name,String publicId,String systemId,String notationName) throws SAXException {

  printIndent();

  fOut.print("unparsedEntityDecl(");

  fOut.print("name=");

  printQuotedString(name);

  fOut.print(',');

  fOut.print("publicId=");

  printQuotedString(publicId);

  fOut.print(',');

  fOut.print("systemId=");

  printQuotedString(systemId);

  fOut.print(',');

  fOut.print("notationName=");

  printQuotedString(notationName);

  fOut.println(')');

  fOut.flush();

}

Location: DocumentTracer.java

Content: 

/** 

 * Unparsed entity declaration. 

 */

public void unparsedEntityDecl(String name,XMLResourceIdentifier identifier,String notation,Augmentations augs) throws XNIException {

  printIndent();

  fOut.print("unparsedEntityDecl(");

  fOut.print("name=");

  printQuotedString(name);

  fOut.print(',');

  fOut.print("publicId=");

  printQuotedString(identifier.getPublicId());

  fOut.print(',');

  fOut.print("systemId=");

  printQuotedString(identifier.getLiteralSystemId());

  fOut.print(',');

  fOut.print("baseSystemId=");

  printQuotedString(identifier.getBaseSystemId());

  fOut.print(',');

  fOut.print("notation=");

  printQuotedString(notation);

  if (augs != null) {

    fOut.print(',');

    printAugmentations(augs);

  }

  fOut.println(')');

  fOut.flush();

}

