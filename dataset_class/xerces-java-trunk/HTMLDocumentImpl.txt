Location: HTMLDocumentImpl.java

Content: 

public HTMLCollection getAnchors(){

  if (_anchors == null)   _anchors=new HTMLCollectionImpl(getBody(),HTMLCollectionImpl.ANCHOR);

  return _anchors;

}

Location: HTMLDocumentImpl.java

Content: 

public HTMLCollection getApplets(){

  if (_applets == null)   _applets=new HTMLCollectionImpl(getBody(),HTMLCollectionImpl.APPLET);

  return _applets;

}

Location: HTMLDocumentImpl.java

Content: 

public synchronized HTMLElement getBody(){

  Node html;

  Node head;

  Node body;

  Node child;

  Node next;

  html=getDocumentElement();

  head=getHead();

synchronized (html) {

    body=head.getNextSibling();

    while (body != null && !(body instanceof HTMLBodyElement) && !(body instanceof HTMLFrameSetElement))     body=body.getNextSibling();

    if (body != null) {

synchronized (body) {

        child=head.getNextSibling();

        while (child != null && child != body) {

          next=child.getNextSibling();

          body.insertBefore(child,body.getFirstChild());

          child=next;

        }

      }

      return (HTMLElement)body;

    }

    body=new HTMLBodyElementImpl(this,"BODY");

    html.appendChild(body);

  }

  return (HTMLElement)body;

}

Location: HTMLDocumentImpl.java

Content: 

public String getCookie(){

  return null;

}

Location: HTMLDocumentImpl.java

Content: 

/** 

 * Recursive method retreives an element by its <code>id</code> attribute. Called by  {@link #getElementById(String)}.

 * @param elementId The <code>id</code> value to look for

 * @return The node in which to look for

 */

private Element getElementById(String elementId,Node node){

  Node child;

  Element result;

  child=node.getFirstChild();

  while (child != null) {

    if (child instanceof Element) {

      if (elementId.equals(((Element)child).getAttribute("id")))       return (Element)child;

      result=getElementById(elementId,child);

      if (result != null)       return result;

    }

    child=child.getNextSibling();

  }

  return null;

}

Location: HTMLDocumentImpl.java

Content: 

public NodeList getElementsByName(String elementName){

  return new NameNodeListImpl(this,elementName);

}

Location: HTMLDocumentImpl.java

Content: 

public HTMLCollection getForms(){

  if (_forms == null)   _forms=new HTMLCollectionImpl(getBody(),HTMLCollectionImpl.FORM);

  return _forms;

}

Location: HTMLDocumentImpl.java

Content: 

/** 

 * Obtains the &lt;HEAD&gt; element in the document, creating one if does not exist before. The &lt;HEAD&gt; element is the first element in the &lt;HTML&gt; in the document. The &lt;HTML&gt; element is obtained by calling  {@link #getDocumentElement}. If the element does not exist, one is created. <P> Called by  {@link #getTitle},  {@link #setTitle},  {@link #getBody} and{@link #setBody} to assure the document has the &lt;HEAD&gt; elementcorrectly placed.

 * @return The &lt;HEAD&gt; element

 */

public synchronized HTMLElement getHead(){

  Node head;

  Node html;

  Node child;

  Node next;

  html=getDocumentElement();

synchronized (html) {

    head=html.getFirstChild();

    while (head != null && !(head instanceof HTMLHeadElement))     head=head.getNextSibling();

    if (head != null) {

synchronized (head) {

        child=html.getFirstChild();

        while (child != null && child != head) {

          next=child.getNextSibling();

          head.insertBefore(child,head.getFirstChild());

          child=next;

        }

      }

      return (HTMLElement)head;

    }

    head=new HTMLHeadElementImpl(this,"HEAD");

    html.insertBefore(head,html.getFirstChild());

  }

  return (HTMLElement)head;

}

Location: HTMLDocumentImpl.java

Content: 

public HTMLCollection getImages(){

  if (_images == null)   _images=new HTMLCollectionImpl(getBody(),HTMLCollectionImpl.IMAGE);

  return _images;

}

Location: HTMLDocumentImpl.java

Content: 

public HTMLCollection getLinks(){

  if (_links == null)   _links=new HTMLCollectionImpl(getBody(),HTMLCollectionImpl.LINK);

  return _links;

}

Location: HTMLDocumentImpl.java

Content: 

public String getReferrer(){

  return null;

}

Location: HTMLDocumentImpl.java

Content: 

public String getURL(){

  return null;

}

Location: HTMLDocumentImpl.java

Content: 

/** 

 */

public HTMLDocumentImpl(){

  super();

  populateElementTypes();

}

Location: HTMLDocumentImpl.java

Content: 

public void open(){

  if (_writer == null)   _writer=new StringWriter();

}

Location: HTMLDocumentImpl.java

Content: 

/** 

 * Called by the constructor to populate the element types list (see  {@link #_elementTypesHTML}). Will be called multiple times but populate the list only the first time. Replacement for static constructor.

 */

private synchronized static void populateElementTypes(){

  if (_elementTypesHTML != null)   return;

  _elementTypesHTML=new Hashtable(63);

  populateElementType("A","HTMLAnchorElementImpl");

  populateElementType("APPLET","HTMLAppletElementImpl");

  populateElementType("AREA","HTMLAreaElementImpl");

  populateElementType("BASE","HTMLBaseElementImpl");

  populateElementType("BASEFONT","HTMLBaseFontElementImpl");

  populateElementType("BLOCKQUOTE","HTMLQuoteElementImpl");

  populateElementType("BODY","HTMLBodyElementImpl");

  populateElementType("BR","HTMLBRElementImpl");

  populateElementType("BUTTON","HTMLButtonElementImpl");

  populateElementType("DEL","HTMLModElementImpl");

  populateElementType("DIR","HTMLDirectoryElementImpl");

  populateElementType("DIV","HTMLDivElementImpl");

  populateElementType("DL","HTMLDListElementImpl");

  populateElementType("FIELDSET","HTMLFieldSetElementImpl");

  populateElementType("FONT","HTMLFontElementImpl");

  populateElementType("FORM","HTMLFormElementImpl");

  populateElementType("FRAME","HTMLFrameElementImpl");

  populateElementType("FRAMESET","HTMLFrameSetElementImpl");

  populateElementType("HEAD","HTMLHeadElementImpl");

  populateElementType("H1","HTMLHeadingElementImpl");

  populateElementType("H2","HTMLHeadingElementImpl");

  populateElementType("H3","HTMLHeadingElementImpl");

  populateElementType("H4","HTMLHeadingElementImpl");

  populateElementType("H5","HTMLHeadingElementImpl");

  populateElementType("H6","HTMLHeadingElementImpl");

  populateElementType("HR","HTMLHRElementImpl");

  populateElementType("HTML","HTMLHtmlElementImpl");

  populateElementType("IFRAME","HTMLIFrameElementImpl");

  populateElementType("IMG","HTMLImageElementImpl");

  populateElementType("INPUT","HTMLInputElementImpl");

  populateElementType("INS","HTMLModElementImpl");

  populateElementType("ISINDEX","HTMLIsIndexElementImpl");

  populateElementType("LABEL","HTMLLabelElementImpl");

  populateElementType("LEGEND","HTMLLegendElementImpl");

  populateElementType("LI","HTMLLIElementImpl");

  populateElementType("LINK","HTMLLinkElementImpl");

  populateElementType("MAP","HTMLMapElementImpl");

  populateElementType("MENU","HTMLMenuElementImpl");

  populateElementType("META","HTMLMetaElementImpl");

  populateElementType("OBJECT","HTMLObjectElementImpl");

  populateElementType("OL","HTMLOListElementImpl");

  populateElementType("OPTGROUP","HTMLOptGroupElementImpl");

  populateElementType("OPTION","HTMLOptionElementImpl");

  populateElementType("P","HTMLParagraphElementImpl");

  populateElementType("PARAM","HTMLParamElementImpl");

  populateElementType("PRE","HTMLPreElementImpl");

  populateElementType("Q","HTMLQuoteElementImpl");

  populateElementType("SCRIPT","HTMLScriptElementImpl");

  populateElementType("SELECT","HTMLSelectElementImpl");

  populateElementType("STYLE","HTMLStyleElementImpl");

  populateElementType("TABLE","HTMLTableElementImpl");

  populateElementType("CAPTION","HTMLTableCaptionElementImpl");

  populateElementType("TD","HTMLTableCellElementImpl");

  populateElementType("TH","HTMLTableCellElementImpl");

  populateElementType("COL","HTMLTableColElementImpl");

  populateElementType("COLGROUP","HTMLTableColElementImpl");

  populateElementType("TR","HTMLTableRowElementImpl");

  populateElementType("TBODY","HTMLTableSectionElementImpl");

  populateElementType("THEAD","HTMLTableSectionElementImpl");

  populateElementType("TFOOT","HTMLTableSectionElementImpl");

  populateElementType("TEXTAREA","HTMLTextAreaElementImpl");

  populateElementType("TITLE","HTMLTitleElementImpl");

  populateElementType("UL","HTMLUListElementImpl");

}

Location: HTMLDocumentImpl.java

Content: 

private static void populateElementType(String tagName,String className){

  try {

    _elementTypesHTML.put(tagName,ObjectFactory.findProviderClass("org.apache.html.dom." + className,HTMLDocumentImpl.class.getClassLoader(),true));

  }

 catch (  Exception except) {

    throw new RuntimeException("HTM019 OpenXML Error: Could not find or execute class " + className + " implementing HTML element "+ tagName+ "\n"+ className+ "\t"+ tagName);

  }

}

Location: HTMLDocumentImpl.java

Content: 

public synchronized void setBody(HTMLElement newBody){

  Node html;

  Node body;

  Node head;

  Node child;

  NodeList list;

synchronized (newBody) {

    html=getDocumentElement();

    head=getHead();

synchronized (html) {

      list=this.getElementsByTagName("BODY");

      if (list.getLength() > 0) {

        body=list.item(0);

synchronized (body) {

          child=head;

          while (child != null) {

            if (child instanceof Element) {

              if (child != body)               html.insertBefore(newBody,child);

 else               html.replaceChild(newBody,body);

              return;

            }

            child=child.getNextSibling();

          }

          html.appendChild(newBody);

        }

        return;

      }

      html.appendChild(newBody);

    }

  }

}

Location: HTMLDocumentImpl.java

Content: 

public void setCookie(String cookie){

}

Location: HTMLDocumentImpl.java

Content: 

public void writeln(String text){

  if (_writer != null)   _writer.write(text + "\n");

}

Location: HTMLDocumentImpl.java

Content: 

public void write(String text){

  if (_writer != null)   _writer.write(text);

}

