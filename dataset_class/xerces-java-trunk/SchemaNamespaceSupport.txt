Location: SchemaNamespaceSupport.java

Content: 

/** 

 * This method returns an array of Strings, as would be stored in a NamespaceSupport object.  This array contains all declarations except those at the global level.

 */

public String[] getEffectiveLocalContext(){

  String[] returnVal=null;

  if (fCurrentContext >= 3) {

    int bottomLocalContext=fContext[3];

    int copyCount=fNamespaceSize - bottomLocalContext;

    if (copyCount > 0) {

      returnVal=new String[copyCount];

      System.arraycopy(fNamespace,bottomLocalContext,returnVal,0,copyCount);

    }

  }

  return returnVal;

}

Location: SchemaNamespaceSupport.java

Content: 

public void makeGlobal(){

  if (fCurrentContext >= 3) {

    fCurrentContext=3;

    fNamespaceSize=fContext[3];

  }

}

Location: SchemaNamespaceSupport.java

Content: 

public SchemaNamespaceSupport(Element schemaRoot,SymbolTable symbolTable){

  super();

  if (schemaRoot != null && !(schemaRoot instanceof ElementImpl)) {

    Document ownerDocument=schemaRoot.getOwnerDocument();

    if (ownerDocument != null && schemaRoot != ownerDocument.getDocumentElement()) {

      fSchemaRootContext=new SchemaRootContext(schemaRoot,symbolTable);

    }

  }

}

Location: SchemaNamespaceSupport.java

Content: 

public SchemaNamespaceSupport(SchemaNamespaceSupport nSupport){

  fSchemaRootContext=nSupport.fSchemaRootContext;

  fNamespaceSize=nSupport.fNamespaceSize;

  if (fNamespace.length < fNamespaceSize)   fNamespace=new String[fNamespaceSize];

  System.arraycopy(nSupport.fNamespace,0,fNamespace,0,fNamespaceSize);

  fCurrentContext=nSupport.fCurrentContext;

  if (fContext.length <= fCurrentContext)   fContext=new int[fCurrentContext + 1];

  System.arraycopy(nSupport.fContext,0,fContext,0,fCurrentContext + 1);

}

Location: SchemaNamespaceSupport.java

Content: 

/** 

 * This method takes a set of Strings, as stored in a NamespaceSupport object, and "fools" the object into thinking that this is one unified context.  This is meant to be used in conjunction with things like local elements, whose declarations may be deeply nested but which for all practical purposes may be regarded as being one level below the global <schema> element--at least with regard to namespace declarations. It's worth noting that the context from which the strings are being imported had better be using the same SymbolTable.

 */

public void setEffectiveContext(String[] namespaceDecls){

  if (namespaceDecls == null || namespaceDecls.length == 0)   return;

  pushContext();

  int newSize=fNamespaceSize + namespaceDecls.length;

  if (fNamespace.length < newSize) {

    String[] tempNSArray=new String[newSize];

    System.arraycopy(fNamespace,0,tempNSArray,0,fNamespace.length);

    fNamespace=tempNSArray;

  }

  System.arraycopy(namespaceDecls,0,fNamespace,fNamespaceSize,namespaceDecls.length);

  fNamespaceSize=newSize;

}

