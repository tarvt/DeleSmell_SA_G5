Location: DurationDV.java

Content: 

private DateTimeData addDuration(DateTimeData date,DateTimeData addto,DateTimeData duration){

  resetDateObj(duration);

  int temp=addto.month + date.month;

  duration.month=modulo(temp,1,13);

  int carry=fQuotient(temp,1,13);

  duration.year=addto.year + date.year + carry;

  double dtemp=addto.second + date.second;

  carry=(int)Math.floor(dtemp / 60);

  duration.second=dtemp - carry * 60;

  temp=addto.minute + date.minute + carry;

  carry=fQuotient(temp,60);

  duration.minute=mod(temp,60,carry);

  temp=addto.hour + date.hour + carry;

  carry=fQuotient(temp,24);

  duration.hour=mod(temp,24,carry);

  duration.day=addto.day + date.day + carry;

  while (true) {

    temp=maxDayInMonthFor(duration.year,duration.month);

    if (duration.day < 1) {

      duration.day=duration.day + maxDayInMonthFor(duration.year,duration.month - 1);

      carry=-1;

    }

 else     if (duration.day > temp) {

      duration.day=duration.day - temp;

      carry=1;

    }

 else {

      break;

    }

    temp=duration.month + carry;

    duration.month=modulo(temp,1,13);

    duration.year=duration.year + fQuotient(temp,1,13);

  }

  duration.utc='Z';

  return duration;

}

Location: DurationDV.java

Content: 

private short compareResults(short resultA,short resultB,boolean strict){

  if (resultB == INDETERMINATE) {

    return INDETERMINATE;

  }

 else   if (resultA != resultB && strict) {

    return INDETERMINATE;

  }

 else   if (resultA != resultB && !strict) {

    if (resultA != 0 && resultB != 0) {

      return INDETERMINATE;

    }

 else {

      return (resultA != 0) ? resultA : resultB;

    }

  }

  return resultA;

}

