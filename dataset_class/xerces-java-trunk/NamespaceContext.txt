Location: NamespaceContext.java

Content: 

/** 

 * Declare a Namespace prefix. <p> This method declares a prefix in the current Namespace context; the prefix will remain in force until this context is popped, unless it is shadowed in a descendant context. <p> Note that to declare a default Namespace, use the empty string.   The prefixes "xml" and "xmlns" can't be rebound. <p> Note that you must <em>not</em> declare a prefix after you've pushed and popped another Namespace.

 * @param prefix The prefix to declare, or null for the emptystring. 

 * @param uri The Namespace URI to associate with the prefix.

 * @return true if the prefix was legal, false otherwise

 * @see #getURI

 * @see #getDeclaredPrefixAt

 */

public boolean declarePrefix(String prefix,String uri);

Location: NamespaceContext.java

Content: 

/** 

 * Return an enumeration of all prefixes whose declarations are active  in the current context. This includes declarations from parent contexts  that have not been overridden.

 * @return Enumeration

 */

public Enumeration getAllPrefixes();

Location: NamespaceContext.java

Content: 

/** 

 * Returns the prefix at the specified index in the current context.

 */

public String getDeclaredPrefixAt(int index);

Location: NamespaceContext.java

Content: 

/** 

 * Return a count of locally declared prefixes, including the default prefix if bound.

 */

public int getDeclaredPrefixCount();

Location: NamespaceContext.java

Content: 

/** 

 * Look up a prefix and get the currently-mapped Namespace URI. <p> This method looks up the prefix in the current context. If no mapping  is found, this methods will continue lookup in the parent context(s). Use the empty string ("") for the default Namespace.

 * @param prefix The prefix to look up. 

 * @return The associated Namespace URI, or null if the prefixis undeclared in this context.

 */

public String getURI(String prefix);

Location: NamespaceContext.java

Content: 

/** 

 * Revert to the previous Namespace context. <p> The context should be popped at the end of each XML element.  After popping the context, all Namespace prefix mappings that were previously in force are restored. <p> Users must not attempt to declare additional Namespace prefixes after popping a context, unless you push another context first.

 * @see #pushContext

 */

public void popContext();

Location: NamespaceContext.java

Content: 

/** 

 * Start a new Namespace context. <p> A new context should be pushed at the beginning of each XML element: the new context will automatically inherit the declarations of its parent context, but it will also keep track of which declarations were made within this context. <p>

 * @see #popContext

 */

public void pushContext();

