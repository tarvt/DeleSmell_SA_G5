Location: DeferredAttrImpl.java

Content: 

/** 

 * This is the deferred constructor. Only the fNodeIndex is given here. All other data, can be requested from the ownerDocument via the index.

 */

DeferredAttrImpl(DeferredDocumentImpl ownerDocument,int nodeIndex){

  super(ownerDocument,null);

  fNodeIndex=nodeIndex;

  needsSyncData(true);

  needsSyncChildren(true);

}

Location: DeferredAttrImpl.java

Content: 

/** 

 * Returns the node index. 

 */

public int getNodeIndex(){

  return fNodeIndex;

}

Location: DeferredAttrImpl.java

Content: 

/** 

 * Synchronizes the node's children with the internal structure. Fluffing the children at once solves a lot of work to keep the two structures in sync. The problem gets worse when editing the tree -- this makes it a lot easier.

 */

protected void synchronizeChildren(){

  DeferredDocumentImpl ownerDocument=(DeferredDocumentImpl)ownerDocument();

  ownerDocument.synchronizeChildren(this,fNodeIndex);

}

Location: DeferredAttrImpl.java

Content: 

/** 

 * Synchronizes the data (name and value) for fast nodes. 

 */

protected void synchronizeData(){

  needsSyncData(false);

  DeferredDocumentImpl ownerDocument=(DeferredDocumentImpl)ownerDocument();

  name=ownerDocument.getNodeName(fNodeIndex);

  int extra=ownerDocument.getNodeExtra(fNodeIndex);

  isSpecified((extra & SPECIFIED) != 0);

  isIdAttribute((extra & ID) != 0);

  int extraNode=ownerDocument.getLastChild(fNodeIndex);

  type=ownerDocument.getTypeInfo(extraNode);

}

