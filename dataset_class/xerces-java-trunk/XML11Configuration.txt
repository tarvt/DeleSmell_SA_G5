Location: XML11Configuration.java

Content: 

/** 

 * Adds common component to the parser configuration. This method will also add all of the component's recognized features and properties to the list of default recognized features and properties.

 * @param component The component to add.

 */

protected void addCommonComponent(XMLComponent component){

  if (fCommonComponents.contains(component)) {

    return;

  }

  fCommonComponents.add(component);

  addRecognizedParamsAndSetDefaults(component);

}

Location: XML11Configuration.java

Content: 

/** 

 * Adds all of the component's recognized features and properties to the list of default recognized features and properties, and sets default values on the configuration for features and properties which were previously absent from the configuration.

 * @param component The component whose recognized featuresand properties will be added to the configuration

 */

protected void addRecognizedParamsAndSetDefaults(XMLComponent component){

  String[] recognizedFeatures=component.getRecognizedFeatures();

  addRecognizedFeatures(recognizedFeatures);

  String[] recognizedProperties=component.getRecognizedProperties();

  addRecognizedProperties(recognizedProperties);

  if (recognizedFeatures != null) {

    for (int i=0; i < recognizedFeatures.length; ++i) {

      String featureId=recognizedFeatures[i];

      Boolean state=component.getFeatureDefault(featureId);

      if (state != null) {

        if (!fFeatures.containsKey(featureId)) {

          fFeatures.put(featureId,state);

          fConfigUpdated=true;

        }

      }

    }

  }

  if (recognizedProperties != null) {

    for (int i=0; i < recognizedProperties.length; ++i) {

      String propertyId=recognizedProperties[i];

      Object value=component.getPropertyDefault(propertyId);

      if (value != null) {

        if (!fProperties.containsKey(propertyId)) {

          fProperties.put(propertyId,value);

          fConfigUpdated=true;

        }

      }

    }

  }

}

Location: XML11Configuration.java

Content: 

/** 

 * Adds an XML 1.1 component to the parser configuration. This method will also add all of the component's recognized features and properties to the list of default recognized features and properties.

 * @param component The component to add.

 */

protected void addXML11Component(XMLComponent component){

  if (fXML11Components.contains(component)) {

    return;

  }

  fXML11Components.add(component);

  addRecognizedParamsAndSetDefaults(component);

}

Location: XML11Configuration.java

Content: 

/** 

 * Returns the state of a feature. This method calls getFeature() on ParserConfigurationSettings, bypassing getFeature() on this class.

 */

boolean getFeature0(String featureId) throws XMLConfigurationException {

  return super.getFeature(featureId);

}

Location: XML11Configuration.java

Content: 

private void initXML11Components(){

  if (!f11Initialized) {

    fXML11DatatypeFactory=DTDDVFactory.getInstance(XML11_DATATYPE_VALIDATOR_FACTORY);

    fXML11DTDScanner=new XML11DTDScannerImpl();

    addXML11Component(fXML11DTDScanner);

    fXML11DTDProcessor=new XML11DTDProcessor();

    addXML11Component(fXML11DTDProcessor);

    fXML11NSDocScanner=new XML11NSDocumentScannerImpl();

    addXML11Component(fXML11NSDocScanner);

    fXML11NSDTDValidator=new XML11NSDTDValidator();

    addXML11Component(fXML11NSDTDValidator);

    f11Initialized=true;

  }

}

Location: XML11Configuration.java

Content: 

/** 

 * reset all common components before parsing

 */

protected void resetCommon() throws XNIException {

  int count=fCommonComponents.size();

  for (int i=0; i < count; i++) {

    XMLComponent c=(XMLComponent)fCommonComponents.get(i);

    c.reset(this);

  }

}

Location: XML11Configuration.java

Content: 

/** 

 * reset all components before parsing and namespace context

 */

protected void resetXML11() throws XNIException {

  int count=fXML11Components.size();

  for (int i=0; i < count; i++) {

    XMLComponent c=(XMLComponent)fXML11Components.get(i);

    c.reset(this);

  }

}

Location: XML11Configuration.java

Content: 

/** 

 * Default constructor. 

 */

public XML11Configuration(){

  this(null,null,null);

}

Location: XML11Configuration.java

Content: 

/** 

 * Constructs a parser configuration using the specified symbol table. 

 * @param symbolTable The symbol table to use.

 */

public XML11Configuration(SymbolTable symbolTable){

  this(symbolTable,null,null);

}

Location: XML11Configuration.java

Content: 

/** 

 * Constructs a parser configuration using the specified symbol table and grammar pool. <p> <strong>REVISIT:</strong>  Grammar pool will be updated when the new validation engine is implemented.

 * @param symbolTable The symbol table to use.

 * @param grammarPool The grammar pool to use.

 */

public XML11Configuration(SymbolTable symbolTable,XMLGrammarPool grammarPool){

  this(symbolTable,grammarPool,null);

}

Location: XML11Configuration.java

Content: 

/** 

 * Constructs a parser configuration using the specified symbol table, grammar pool, and parent settings. <p> <strong>REVISIT:</strong>  Grammar pool will be updated when the new validation engine is implemented.

 * @param symbolTable    The symbol table to use.

 * @param grammarPool    The grammar pool to use.

 * @param parentSettings The parent settings.

 */

public XML11Configuration(SymbolTable symbolTable,XMLGrammarPool grammarPool,XMLComponentManager parentSettings){

  super(parentSettings);

  fComponents=new ArrayList();

  fXML11Components=new ArrayList();

  fCommonComponents=new ArrayList();

  fRecognizedFeatures=new ArrayList();

  fRecognizedProperties=new ArrayList();

  fFeatures=new HashMap();

  fProperties=new HashMap();

  final String[] recognizedFeatures={CONTINUE_AFTER_FATAL_ERROR,LOAD_EXTERNAL_DTD,VALIDATION,NAMESPACES,NORMALIZE_DATA,SCHEMA_ELEMENT_DEFAULT,SCHEMA_AUGMENT_PSVI,GENERATE_SYNTHETIC_ANNOTATIONS,VALIDATE_ANNOTATIONS,HONOUR_ALL_SCHEMALOCATIONS,NAMESPACE_GROWTH,TOLERATE_DUPLICATES,IGNORE_XSI_TYPE,ID_IDREF_CHECKING,IDENTITY_CONSTRAINT_CHECKING,UNPARSED_ENTITY_CHECKING,USE_GRAMMAR_POOL_ONLY,XMLSCHEMA_VALIDATION,XMLSCHEMA_FULL_CHECKING,EXTERNAL_GENERAL_ENTITIES,EXTERNAL_PARAMETER_ENTITIES,PARSER_SETTINGS};

  addRecognizedFeatures(recognizedFeatures);

  fFeatures.put(VALIDATION,Boolean.FALSE);

  fFeatures.put(NAMESPACES,Boolean.TRUE);

  fFeatures.put(EXTERNAL_GENERAL_ENTITIES,Boolean.TRUE);

  fFeatures.put(EXTERNAL_PARAMETER_ENTITIES,Boolean.TRUE);

  fFeatures.put(CONTINUE_AFTER_FATAL_ERROR,Boolean.FALSE);

  fFeatures.put(LOAD_EXTERNAL_DTD,Boolean.TRUE);

  fFeatures.put(SCHEMA_ELEMENT_DEFAULT,Boolean.TRUE);

  fFeatures.put(NORMALIZE_DATA,Boolean.TRUE);

  fFeatures.put(SCHEMA_AUGMENT_PSVI,Boolean.TRUE);

  fFeatures.put(GENERATE_SYNTHETIC_ANNOTATIONS,Boolean.FALSE);

  fFeatures.put(VALIDATE_ANNOTATIONS,Boolean.FALSE);

  fFeatures.put(HONOUR_ALL_SCHEMALOCATIONS,Boolean.FALSE);

  fFeatures.put(NAMESPACE_GROWTH,Boolean.FALSE);

  fFeatures.put(TOLERATE_DUPLICATES,Boolean.FALSE);

  fFeatures.put(IGNORE_XSI_TYPE,Boolean.FALSE);

  fFeatures.put(ID_IDREF_CHECKING,Boolean.TRUE);

  fFeatures.put(IDENTITY_CONSTRAINT_CHECKING,Boolean.TRUE);

  fFeatures.put(UNPARSED_ENTITY_CHECKING,Boolean.TRUE);

  fFeatures.put(USE_GRAMMAR_POOL_ONLY,Boolean.FALSE);

  fFeatures.put(PARSER_SETTINGS,Boolean.TRUE);

  final String[] recognizedProperties={SYMBOL_TABLE,ERROR_HANDLER,ENTITY_RESOLVER,ERROR_REPORTER,ENTITY_MANAGER,DOCUMENT_SCANNER,DTD_SCANNER,DTD_PROCESSOR,DTD_VALIDATOR,DATATYPE_VALIDATOR_FACTORY,VALIDATION_MANAGER,SCHEMA_VALIDATOR,XML_STRING,XMLGRAMMAR_POOL,JAXP_SCHEMA_SOURCE,JAXP_SCHEMA_LANGUAGE,SCHEMA_LOCATION,SCHEMA_NONS_LOCATION,LOCALE,ROOT_TYPE_DEF,ROOT_ELEMENT_DECL,SCHEMA_DV_FACTORY};

  addRecognizedProperties(recognizedProperties);

  if (symbolTable == null) {

    symbolTable=new SymbolTable();

  }

  fSymbolTable=symbolTable;

  fProperties.put(SYMBOL_TABLE,fSymbolTable);

  fGrammarPool=grammarPool;

  if (fGrammarPool != null) {

    fProperties.put(XMLGRAMMAR_POOL,fGrammarPool);

  }

  fEntityManager=new XMLEntityManager();

  fProperties.put(ENTITY_MANAGER,fEntityManager);

  addCommonComponent(fEntityManager);

  fErrorReporter=new XMLErrorReporter();

  fErrorReporter.setDocumentLocator(fEntityManager.getEntityScanner());

  fProperties.put(ERROR_REPORTER,fErrorReporter);

  addCommonComponent(fErrorReporter);

  fNamespaceScanner=new XMLNSDocumentScannerImpl();

  fProperties.put(DOCUMENT_SCANNER,fNamespaceScanner);

  addComponent((XMLComponent)fNamespaceScanner);

  fDTDScanner=new XMLDTDScannerImpl();

  fProperties.put(DTD_SCANNER,fDTDScanner);

  addComponent((XMLComponent)fDTDScanner);

  fDTDProcessor=new XMLDTDProcessor();

  fProperties.put(DTD_PROCESSOR,fDTDProcessor);

  addComponent(fDTDProcessor);

  fDTDValidator=new XMLNSDTDValidator();

  fProperties.put(DTD_VALIDATOR,fDTDValidator);

  addComponent(fDTDValidator);

  fDatatypeValidatorFactory=DTDDVFactory.getInstance();

  fProperties.put(DATATYPE_VALIDATOR_FACTORY,fDatatypeValidatorFactory);

  fValidationManager=new ValidationManager();

  fProperties.put(VALIDATION_MANAGER,fValidationManager);

  fVersionDetector=new XMLVersionDetector();

  if (fErrorReporter.getMessageFormatter(XMLMessageFormatter.XML_DOMAIN) == null) {

    XMLMessageFormatter xmft=new XMLMessageFormatter();

    fErrorReporter.putMessageFormatter(XMLMessageFormatter.XML_DOMAIN,xmft);

    fErrorReporter.putMessageFormatter(XMLMessageFormatter.XMLNS_DOMAIN,xmft);

  }

  try {

    setLocale(Locale.getDefault());

  }

 catch (  XNIException e) {

  }

  fConfigUpdated=false;

}

