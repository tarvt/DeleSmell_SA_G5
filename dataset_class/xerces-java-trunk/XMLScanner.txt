Location: XMLScanner.java

Content: 

/** 

 * Scans an attribute value and normalizes whitespace converting all whitespace characters to space characters. [10] AttValue ::= '"' ([^<&"] | Reference)* '"' | "'" ([^<&'] | Reference)* "'"

 * @param value The XMLString to fill in with the value.

 * @param nonNormalizedValue The XMLString to fill in with the non-normalized value.

 * @param atName The name of the attribute being parsed (for error msgs).

 * @param checkEntities true if undeclared entities should be reported as VC violation,  false if undeclared entities should be reported as WFC violation.

 * @param eleName The name of element to which this attribute belongs.

 * @return true if the non-normalized and normalized value are the same<strong>Note:</strong> This method uses fStringBuffer2, anything in it at the time of calling is lost.

 */

protected boolean scanAttributeValue(XMLString value,XMLString nonNormalizedValue,String atName,boolean checkEntities,String eleName) throws IOException, XNIException {

  int quote=fEntityScanner.peekChar();

  if (quote != '\'' && quote != '"') {

    reportFatalError("OpenQuoteExpected",new Object[]{eleName,atName});

  }

  fEntityScanner.scanChar();

  int entityDepth=fEntityDepth;

  int c=fEntityScanner.scanLiteral(quote,value);

  if (DEBUG_ATTR_NORMALIZATION) {

    System.out.println("** scanLiteral -> \"" + value.toString() + "\"");

  }

  int fromIndex=0;

  if (c == quote && (fromIndex=isUnchangedByNormalization(value)) == -1) {

    nonNormalizedValue.setValues(value);

    int cquote=fEntityScanner.scanChar();

    if (cquote != quote) {

      reportFatalError("CloseQuoteExpected",new Object[]{eleName,atName});

    }

    return true;

  }

  fStringBuffer2.clear();

  fStringBuffer2.append(value);

  normalizeWhitespace(value,fromIndex);

  if (DEBUG_ATTR_NORMALIZATION) {

    System.out.println("** normalizeWhitespace -> \"" + value.toString() + "\"");

  }

  if (c != quote) {

    fScanningAttribute=true;

    fStringBuffer.clear();

    do {

      fStringBuffer.append(value);

      if (DEBUG_ATTR_NORMALIZATION) {

        System.out.println("** value2: \"" + fStringBuffer.toString() + "\"");

      }

      if (c == '&') {

        fEntityScanner.skipChar('&');

        if (entityDepth == fEntityDepth) {

          fStringBuffer2.append('&');

        }

        if (fEntityScanner.skipChar('#')) {

          if (entityDepth == fEntityDepth) {

            fStringBuffer2.append('#');

          }

          int ch=scanCharReferenceValue(fStringBuffer,fStringBuffer2);

          if (ch != -1) {

            if (DEBUG_ATTR_NORMALIZATION) {

              System.out.println("** value3: \"" + fStringBuffer.toString() + "\"");

            }

          }

        }

 else {

          String entityName=fEntityScanner.scanName();

          if (entityName == null) {

            reportFatalError("NameRequiredInReference",null);

          }

 else           if (entityDepth == fEntityDepth) {

            fStringBuffer2.append(entityName);

          }

          if (!fEntityScanner.skipChar(';')) {

            reportFatalError("SemicolonRequiredInReference",new Object[]{entityName});

          }

 else           if (entityDepth == fEntityDepth) {

            fStringBuffer2.append(';');

          }

          if (entityName == fAmpSymbol) {

            fStringBuffer.append('&');

            if (DEBUG_ATTR_NORMALIZATION) {

              System.out.println("** value5: \"" + fStringBuffer.toString() + "\"");

            }

          }

 else           if (entityName == fAposSymbol) {

            fStringBuffer.append('\'');

            if (DEBUG_ATTR_NORMALIZATION) {

              System.out.println("** value7: \"" + fStringBuffer.toString() + "\"");

            }

          }

 else           if (entityName == fLtSymbol) {

            fStringBuffer.append('<');

            if (DEBUG_ATTR_NORMALIZATION) {

              System.out.println("** value9: \"" + fStringBuffer.toString() + "\"");

            }

          }

 else           if (entityName == fGtSymbol) {

            fStringBuffer.append('>');

            if (DEBUG_ATTR_NORMALIZATION) {

              System.out.println("** valueB: \"" + fStringBuffer.toString() + "\"");

            }

          }

 else           if (entityName == fQuotSymbol) {

            fStringBuffer.append('"');

            if (DEBUG_ATTR_NORMALIZATION) {

              System.out.println("** valueD: \"" + fStringBuffer.toString() + "\"");

            }

          }

 else {

            if (fEntityManager.isExternalEntity(entityName)) {

              reportFatalError("ReferenceToExternalEntity",new Object[]{entityName});

            }

 else {

              if (!fEntityManager.isDeclaredEntity(entityName)) {

                if (checkEntities) {

                  if (fValidation) {

                    fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,"EntityNotDeclared",new Object[]{entityName},XMLErrorReporter.SEVERITY_ERROR);

                  }

                }

 else {

                  reportFatalError("EntityNotDeclared",new Object[]{entityName});

                }

              }

              fEntityManager.startEntity(entityName,true);

            }

          }

        }

      }

 else       if (c == '<') {

        reportFatalError("LessthanInAttValue",new Object[]{eleName,atName});

        fEntityScanner.scanChar();

        if (entityDepth == fEntityDepth) {

          fStringBuffer2.append((char)c);

        }

      }

 else       if (c == '%' || c == ']') {

        fEntityScanner.scanChar();

        fStringBuffer.append((char)c);

        if (entityDepth == fEntityDepth) {

          fStringBuffer2.append((char)c);

        }

        if (DEBUG_ATTR_NORMALIZATION) {

          System.out.println("** valueF: \"" + fStringBuffer.toString() + "\"");

        }

      }

 else       if (c == '\n' || c == '\r') {

        fEntityScanner.scanChar();

        fStringBuffer.append(' ');

        if (entityDepth == fEntityDepth) {

          fStringBuffer2.append('\n');

        }

      }

 else       if (c != -1 && XMLChar.isHighSurrogate(c)) {

        fStringBuffer3.clear();

        if (scanSurrogates(fStringBuffer3)) {

          fStringBuffer.append(fStringBuffer3);

          if (entityDepth == fEntityDepth) {

            fStringBuffer2.append(fStringBuffer3);

          }

          if (DEBUG_ATTR_NORMALIZATION) {

            System.out.println("** valueI: \"" + fStringBuffer.toString() + "\"");

          }

        }

      }

 else       if (c != -1 && isInvalidLiteral(c)) {

        reportFatalError("InvalidCharInAttValue",new Object[]{eleName,atName,Integer.toString(c,16)});

        fEntityScanner.scanChar();

        if (entityDepth == fEntityDepth) {

          fStringBuffer2.append((char)c);

        }

      }

      c=fEntityScanner.scanLiteral(quote,value);

      if (entityDepth == fEntityDepth) {

        fStringBuffer2.append(value);

      }

      normalizeWhitespace(value);

    }

 while (c != quote || entityDepth != fEntityDepth);

    fStringBuffer.append(value);

    if (DEBUG_ATTR_NORMALIZATION) {

      System.out.println("** valueN: \"" + fStringBuffer.toString() + "\"");

    }

    value.setValues(fStringBuffer);

    fScanningAttribute=false;

  }

  nonNormalizedValue.setValues(fStringBuffer2);

  int cquote=fEntityScanner.scanChar();

  if (cquote != quote) {

    reportFatalError("CloseQuoteExpected",new Object[]{eleName,atName});

  }

  return nonNormalizedValue.equals(value.ch,value.offset,value.length);

}

Location: XMLScanner.java

Content: 

/** 

 * Scans a character reference and append the corresponding chars to the specified buffer. <p> <pre> [66] CharRef ::= '&#' [0-9]+ ';' | '&#x' [0-9a-fA-F]+ ';' </pre> <strong>Note:</strong> This method uses fStringBuffer, anything in it at the time of calling is lost.

 * @param buf the character buffer to append chars to

 * @param buf2 the character buffer to append non-normalized chars to

 * @return the character value or (-1) on conversion failure

 */

protected int scanCharReferenceValue(XMLStringBuffer buf,XMLStringBuffer buf2) throws IOException, XNIException {

  boolean hex=false;

  if (fEntityScanner.skipChar('x')) {

    if (buf2 != null) {

      buf2.append('x');

    }

    hex=true;

    fStringBuffer3.clear();

    boolean digit=true;

    int c=fEntityScanner.peekChar();

    digit=(c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') || (c >= 'A' && c <= 'F');

    if (digit) {

      if (buf2 != null) {

        buf2.append((char)c);

      }

      fEntityScanner.scanChar();

      fStringBuffer3.append((char)c);

      do {

        c=fEntityScanner.peekChar();

        digit=(c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') || (c >= 'A' && c <= 'F');

        if (digit) {

          if (buf2 != null) {

            buf2.append((char)c);

          }

          fEntityScanner.scanChar();

          fStringBuffer3.append((char)c);

        }

      }

 while (digit);

    }

 else {

      reportFatalError("HexdigitRequiredInCharRef",null);

    }

  }

 else {

    fStringBuffer3.clear();

    boolean digit=true;

    int c=fEntityScanner.peekChar();

    digit=c >= '0' && c <= '9';

    if (digit) {

      if (buf2 != null) {

        buf2.append((char)c);

      }

      fEntityScanner.scanChar();

      fStringBuffer3.append((char)c);

      do {

        c=fEntityScanner.peekChar();

        digit=c >= '0' && c <= '9';

        if (digit) {

          if (buf2 != null) {

            buf2.append((char)c);

          }

          fEntityScanner.scanChar();

          fStringBuffer3.append((char)c);

        }

      }

 while (digit);

    }

 else {

      reportFatalError("DigitRequiredInCharRef",null);

    }

  }

  if (!fEntityScanner.skipChar(';')) {

    reportFatalError("SemicolonRequiredInCharRef",null);

  }

  if (buf2 != null) {

    buf2.append(';');

  }

  int value=-1;

  try {

    value=Integer.parseInt(fStringBuffer3.toString(),hex ? 16 : 10);

    if (isInvalid(value)) {

      StringBuffer errorBuf=new StringBuffer(fStringBuffer3.length + 1);

      if (hex)       errorBuf.append('x');

      errorBuf.append(fStringBuffer3.ch,fStringBuffer3.offset,fStringBuffer3.length);

      reportFatalError("InvalidCharRef",new Object[]{errorBuf.toString()});

    }

  }

 catch (  NumberFormatException e) {

    StringBuffer errorBuf=new StringBuffer(fStringBuffer3.length + 1);

    if (hex)     errorBuf.append('x');

    errorBuf.append(fStringBuffer3.ch,fStringBuffer3.offset,fStringBuffer3.length);

    reportFatalError("InvalidCharRef",new Object[]{errorBuf.toString()});

  }

  if (!XMLChar.isSupplemental(value)) {

    buf.append((char)value);

  }

 else {

    buf.append(XMLChar.highSurrogate(value));

    buf.append(XMLChar.lowSurrogate(value));

  }

  if (fNotifyCharRefs && value != -1) {

    String literal="#" + (hex ? "x" : "") + fStringBuffer3.toString();

    if (!fScanningAttribute) {

      fCharRefLiteral=literal;

    }

  }

  return value;

}

Location: XMLScanner.java

Content: 

/** 

 * Scans a comment. <p> <pre> [15] Comment ::= '&lt!--' ((Char - '-') | ('-' (Char - '-')))* '-->' </pre> <p> <strong>Note:</strong> Called after scanning past '&lt;!--' <strong>Note:</strong> This method uses fString, anything in it at the time of calling is lost.

 * @param text The buffer to fill in with the text.

 */

protected void scanComment(XMLStringBuffer text) throws IOException, XNIException {

  text.clear();

  while (fEntityScanner.scanData("--",text)) {

    int c=fEntityScanner.peekChar();

    if (c != -1) {

      if (XMLChar.isHighSurrogate(c)) {

        scanSurrogates(text);

      }

 else       if (isInvalidLiteral(c)) {

        reportFatalError("InvalidCharInComment",new Object[]{Integer.toHexString(c)});

        fEntityScanner.scanChar();

      }

    }

  }

  if (!fEntityScanner.skipChar('>')) {

    reportFatalError("DashDashInComment",null);

  }

}

Location: XMLScanner.java

Content: 

/** 

 * Scans External ID and return the public and system IDs.

 * @param identifiers An array of size 2 to return the system id,and public id (in that order).

 * @param optionalSystemId Specifies whether the system id is optional.<strong>Note:</strong> This method uses fString and fStringBuffer, anything in them at the time of calling is lost.

 */

protected void scanExternalID(String[] identifiers,boolean optionalSystemId) throws IOException, XNIException {

  String systemId=null;

  String publicId=null;

  if (fEntityScanner.skipString("PUBLIC")) {

    if (!fEntityScanner.skipSpaces()) {

      reportFatalError("SpaceRequiredAfterPUBLIC",null);

    }

    scanPubidLiteral(fString);

    publicId=fString.toString();

    if (!fEntityScanner.skipSpaces() && !optionalSystemId) {

      reportFatalError("SpaceRequiredBetweenPublicAndSystem",null);

    }

  }

  if (publicId != null || fEntityScanner.skipString("SYSTEM")) {

    if (publicId == null && !fEntityScanner.skipSpaces()) {

      reportFatalError("SpaceRequiredAfterSYSTEM",null);

    }

    int quote=fEntityScanner.peekChar();

    if (quote != '\'' && quote != '"') {

      if (publicId != null && optionalSystemId) {

        identifiers[0]=null;

        identifiers[1]=publicId;

        return;

      }

      reportFatalError("QuoteRequiredInSystemID",null);

    }

    fEntityScanner.scanChar();

    XMLString ident=fString;

    if (fEntityScanner.scanLiteral(quote,ident) != quote) {

      fStringBuffer.clear();

      do {

        fStringBuffer.append(ident);

        int c=fEntityScanner.peekChar();

        if (XMLChar.isMarkup(c) || c == ']') {

          fStringBuffer.append((char)fEntityScanner.scanChar());

        }

 else         if (XMLChar.isHighSurrogate(c)) {

          scanSurrogates(fStringBuffer);

        }

 else         if (isInvalidLiteral(c)) {

          reportFatalError("InvalidCharInSystemID",new Object[]{Integer.toHexString(c)});

          fEntityScanner.scanChar();

        }

      }

 while (fEntityScanner.scanLiteral(quote,ident) != quote);

      fStringBuffer.append(ident);

      ident=fStringBuffer;

    }

    systemId=ident.toString();

    if (!fEntityScanner.skipChar(quote)) {

      reportFatalError("SystemIDUnterminated",null);

    }

  }

  identifiers[0]=systemId;

  identifiers[1]=publicId;

}

Location: XMLScanner.java

Content: 

/** 

 * Scans a processing instruction. <p> <pre> [16] PI ::= '&lt;?' PITarget (S (Char* - (Char* '?>' Char*)))? '?>' [17] PITarget ::= Name - (('X' | 'x') ('M' | 'm') ('L' | 'l')) </pre> <strong>Note:</strong> This method uses fString, anything in it at the time of calling is lost.

 */

protected void scanPI() throws IOException, XNIException {

  fReportEntity=false;

  String target=null;

  if (fNamespaces) {

    target=fEntityScanner.scanNCName();

  }

 else {

    target=fEntityScanner.scanName();

  }

  if (target == null) {

    reportFatalError("PITargetRequired",null);

  }

  scanPIData(target,fString);

  fReportEntity=true;

}

Location: XMLScanner.java

Content: 

/** 

 * Scans the name of a pseudo attribute. The only legal names in XML 1.0/1.1 documents are 'version', 'encoding' and 'standalone'.

 * @return the name of the pseudo attribute or <code>null</code>if a legal pseudo attribute name could not be scanned.

 */

private String scanPseudoAttributeName() throws IOException, XNIException {

  final int ch=fEntityScanner.peekChar();

switch (ch) {

case 'v':

    if (fEntityScanner.skipString(fVersionSymbol)) {

      return fVersionSymbol;

    }

  break;

case 'e':

if (fEntityScanner.skipString(fEncodingSymbol)) {

  return fEncodingSymbol;

}

break;

case 's':

if (fEntityScanner.skipString(fStandaloneSymbol)) {

return fStandaloneSymbol;

}

break;

}

return null;

}

Location: XMLScanner.java

Content: 

/** 

 * Scans a pseudo attribute.

 * @param scanningTextDecl True if scanning this pseudo-attribute for aTextDecl; false if scanning XMLDecl. This  flag is needed to report the correct type of error.

 * @param value            The string to fill in with the attribute value.

 * @return The name of the attribute<strong>Note:</strong> This method uses fStringBuffer2, anything in it at the time of calling is lost.

 */

public String scanPseudoAttribute(boolean scanningTextDecl,XMLString value) throws IOException, XNIException {

  String name=scanPseudoAttributeName();

  XMLEntityManager.print(fEntityManager.getCurrentEntity());

  if (name == null) {

    reportFatalError("PseudoAttrNameExpected",null);

  }

  fEntityScanner.skipDeclSpaces();

  if (!fEntityScanner.skipChar('=')) {

    reportFatalError(scanningTextDecl ? "EqRequiredInTextDecl" : "EqRequiredInXMLDecl",new Object[]{name});

  }

  fEntityScanner.skipDeclSpaces();

  int quote=fEntityScanner.peekChar();

  if (quote != '\'' && quote != '"') {

    reportFatalError(scanningTextDecl ? "QuoteRequiredInTextDecl" : "QuoteRequiredInXMLDecl",new Object[]{name});

  }

  fEntityScanner.scanChar();

  int c=fEntityScanner.scanLiteral(quote,value);

  if (c != quote) {

    fStringBuffer2.clear();

    do {

      fStringBuffer2.append(value);

      if (c != -1) {

        if (c == '&' || c == '%' || c == '<' || c == ']') {

          fStringBuffer2.append((char)fEntityScanner.scanChar());

        }

 else         if (XMLChar.isHighSurrogate(c)) {

          scanSurrogates(fStringBuffer2);

        }

 else         if (isInvalidLiteral(c)) {

          String key=scanningTextDecl ? "InvalidCharInTextDecl" : "InvalidCharInXMLDecl";

          reportFatalError(key,new Object[]{Integer.toString(c,16)});

          fEntityScanner.scanChar();

        }

      }

      c=fEntityScanner.scanLiteral(quote,value);

    }

 while (c != quote);

    fStringBuffer2.append(value);

    value.setValues(fStringBuffer2);

  }

  if (!fEntityScanner.skipChar(quote)) {

    reportFatalError(scanningTextDecl ? "CloseQuoteMissingInTextDecl" : "CloseQuoteMissingInXMLDecl",new Object[]{name});

  }

  return name;

}

Location: XMLScanner.java

Content: 

/** 

 * Scans surrogates and append them to the specified buffer. <p> <strong>Note:</strong> This assumes the current char has already been identified as a high surrogate.

 * @param buf The StringBuffer to append the read surrogates to.

 * @return True if it succeeded.

 */

protected boolean scanSurrogates(XMLStringBuffer buf) throws IOException, XNIException {

  int high=fEntityScanner.scanChar();

  int low=fEntityScanner.peekChar();

  if (!XMLChar.isLowSurrogate(low)) {

    reportFatalError("InvalidCharInContent",new Object[]{Integer.toString(high,16)});

    return false;

  }

  fEntityScanner.scanChar();

  int c=XMLChar.supplemental((char)high,(char)low);

  if (isInvalid(c)) {

    reportFatalError("InvalidCharInContent",new Object[]{Integer.toString(c,16)});

    return false;

  }

  buf.append((char)high);

  buf.append((char)low);

  return true;

}

Location: XMLScanner.java

Content: 

/** 

 * Scans an XML or text declaration. <p> <pre> [23] XMLDecl ::= '<?xml' VersionInfo EncodingDecl? SDDecl? S? '?>' [24] VersionInfo ::= S 'version' Eq (' VersionNum ' | " VersionNum ") [80] EncodingDecl ::= S 'encoding' Eq ('"' EncName '"' |  "'" EncName "'" ) [81] EncName ::= [A-Za-z] ([A-Za-z0-9._] | '-') [32] SDDecl ::= S 'standalone' Eq (("'" ('yes' | 'no') "'") | ('"' ('yes' | 'no') '"')) [77] TextDecl ::= '<?xml' VersionInfo? EncodingDecl S? '?>' </pre>

 * @param scanningTextDecl True if a text declaration is tobe scanned instead of an XML declaration.

 * @param pseudoAttributeValues An array of size 3 to return the version,encoding and standalone pseudo attribute values (in that order). <strong>Note:</strong> This method uses fString, anything in it at the time of calling is lost.

 */

protected void scanXMLDeclOrTextDecl(boolean scanningTextDecl,String[] pseudoAttributeValues) throws IOException, XNIException {

  String version=null;

  String encoding=null;

  String standalone=null;

  final int STATE_VERSION=0;

  final int STATE_ENCODING=1;

  final int STATE_STANDALONE=2;

  final int STATE_DONE=3;

  int state=STATE_VERSION;

  boolean dataFoundForTarget=false;

  boolean sawSpace=fEntityScanner.skipDeclSpaces();

  XMLEntityManager.ScannedEntity currEnt=fEntityManager.getCurrentEntity();

  boolean currLiteral=currEnt.literal;

  currEnt.literal=false;

  while (fEntityScanner.peekChar() != '?') {

    dataFoundForTarget=true;

    String name=scanPseudoAttribute(scanningTextDecl,fString);

switch (state) {

case STATE_VERSION:

{

        if (name == fVersionSymbol) {

          if (!sawSpace) {

            reportFatalError(scanningTextDecl ? "SpaceRequiredBeforeVersionInTextDecl" : "SpaceRequiredBeforeVersionInXMLDecl",null);

          }

          version=fString.toString();

          state=STATE_ENCODING;

          if (!versionSupported(version)) {

            reportFatalError(getVersionNotSupportedKey(),new Object[]{version});

          }

        }

 else         if (name == fEncodingSymbol) {

          if (!scanningTextDecl) {

            reportFatalError("VersionInfoRequired",null);

          }

          if (!sawSpace) {

            reportFatalError(scanningTextDecl ? "SpaceRequiredBeforeEncodingInTextDecl" : "SpaceRequiredBeforeEncodingInXMLDecl",null);

          }

          encoding=fString.toString();

          state=scanningTextDecl ? STATE_DONE : STATE_STANDALONE;

        }

 else {

          if (scanningTextDecl) {

            reportFatalError("EncodingDeclRequired",null);

          }

 else {

            reportFatalError("VersionInfoRequired",null);

          }

        }

        break;

      }

case STATE_ENCODING:

{

      if (name == fEncodingSymbol) {

        if (!sawSpace) {

          reportFatalError(scanningTextDecl ? "SpaceRequiredBeforeEncodingInTextDecl" : "SpaceRequiredBeforeEncodingInXMLDecl",null);

        }

        encoding=fString.toString();

        state=scanningTextDecl ? STATE_DONE : STATE_STANDALONE;

      }

 else       if (!scanningTextDecl && name == fStandaloneSymbol) {

        if (!sawSpace) {

          reportFatalError("SpaceRequiredBeforeStandalone",null);

        }

        standalone=fString.toString();

        state=STATE_DONE;

        if (!standalone.equals("yes") && !standalone.equals("no")) {

          reportFatalError("SDDeclInvalid",new Object[]{standalone});

        }

      }

 else {

        reportFatalError("EncodingDeclRequired",null);

      }

      break;

    }

case STATE_STANDALONE:

{

    if (name == fStandaloneSymbol) {

      if (!sawSpace) {

        reportFatalError("SpaceRequiredBeforeStandalone",null);

      }

      standalone=fString.toString();

      state=STATE_DONE;

      if (!standalone.equals("yes") && !standalone.equals("no")) {

        reportFatalError("SDDeclInvalid",new Object[]{standalone});

      }

    }

 else {

      reportFatalError("EncodingDeclRequired",null);

    }

    break;

  }

default :

{

  reportFatalError("NoMorePseudoAttributes",null);

}

}

sawSpace=fEntityScanner.skipDeclSpaces();

}

if (currLiteral) currEnt.literal=true;

if (scanningTextDecl && state != STATE_DONE) {

reportFatalError("MorePseudoAttributes",null);

}

if (scanningTextDecl) {

if (!dataFoundForTarget && encoding == null) {

reportFatalError("EncodingDeclRequired",null);

}

}

 else {

if (!dataFoundForTarget && version == null) {

reportFatalError("VersionInfoRequired",null);

}

}

if (!fEntityScanner.skipChar('?')) {

reportFatalError("XMLDeclUnterminated",null);

}

if (!fEntityScanner.skipChar('>')) {

reportFatalError("XMLDeclUnterminated",null);

}

pseudoAttributeValues[0]=version;

pseudoAttributeValues[1]=encoding;

pseudoAttributeValues[2]=standalone;

}

