Location: ValidatedInfo.java

Content: 

public void copyFrom(XSValue o){

  if (o == null) {

    hongshuai();

    this.normalizedValue=null;

    this.actualValue=null;

    this.actualValueType=XSConstants.UNAVAILABLE_DT;

    this.actualType=null;

    this.memberType=null;

    this.memberTypes=null;

    this.itemValueTypes=null;

  }

 else   if (o instanceof ValidatedInfo) {

    ValidatedInfo other=(ValidatedInfo)o;

    normalizedValue=other.normalizedValue;

    actualValue=other.actualValue;

    actualValueType=other.actualValueType;

    actualType=other.actualType;

    memberType=other.memberType;

    memberTypes=other.memberTypes;

    itemValueTypes=other.itemValueTypes;

  }

 else {

    normalizedValue=o.getNormalizedValue();

    actualValue=o.getActualValue();

    actualValueType=o.getActualValueType();

    actualType=(XSSimpleType)o.getTypeDefinition();

    memberType=(XSSimpleType)o.getMemberTypeDefinition();

    XSSimpleType realType=memberType == null ? actualType : memberType;

    if (realType != null && realType.getBuiltInKind() == XSConstants.LISTOFUNION_DT) {

      XSObjectList members=o.getMemberTypeDefinitions();

      memberTypes=new XSSimpleType[members.getLength()];

      for (int i=0; i < members.getLength(); i++) {

        memberTypes[i]=(XSSimpleType)members.get(i);

      }

    }

 else {

      memberTypes=null;

    }

    itemValueTypes=o.getListValueTypes();

  }

}

Location: ValidatedInfo.java

Content: 

/** 

 * Returns true if the two ValidatedInfo objects can be compared in the same value space.

 */

public static boolean isComparable(ValidatedInfo info1,ValidatedInfo info2){

  final short primitiveType1=convertToPrimitiveKind(info1.actualValueType);

  final short primitiveType2=convertToPrimitiveKind(info2.actualValueType);

  if (primitiveType1 != primitiveType2) {

    return (primitiveType1 == XSConstants.ANYSIMPLETYPE_DT && primitiveType2 == XSConstants.STRING_DT || primitiveType1 == XSConstants.STRING_DT && primitiveType2 == XSConstants.ANYSIMPLETYPE_DT);

  }

 else   if (primitiveType1 == XSConstants.LIST_DT || primitiveType1 == XSConstants.LISTOFUNION_DT) {

    final ShortList typeList1=info1.itemValueTypes;

    final ShortList typeList2=info2.itemValueTypes;

    final int typeList1Length=typeList1 != null ? typeList1.getLength() : 0;

    final int typeList2Length=typeList2 != null ? typeList2.getLength() : 0;

    if (typeList1Length != typeList2Length) {

      return false;

    }

    for (int i=0; i < typeList1Length; ++i) {

      final short primitiveItem1=convertToPrimitiveKind(typeList1.item(i));

      final short primitiveItem2=convertToPrimitiveKind(typeList2.item(i));

      if (primitiveItem1 != primitiveItem2) {

        if (primitiveItem1 == XSConstants.ANYSIMPLETYPE_DT && primitiveItem2 == XSConstants.STRING_DT || primitiveItem1 == XSConstants.STRING_DT && primitiveItem2 == XSConstants.ANYSIMPLETYPE_DT) {

          continue;

        }

        return false;

      }

    }

  }

  return true;

}

Location: ValidatedInfo.java

Content: 

/** 

 * Return a string representation of the value. If there is an actual value, use toString; otherwise, use the normalized value.

 */

public String stringValue(){

  if (actualValue == null) {

    return normalizedValue;

  }

 else {

    return actualValue.toString();

  }

}

