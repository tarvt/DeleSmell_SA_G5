Location: HTMLSerializer.java

Content: 

protected void characters(String text) throws IOException {

  content();

  super.characters(text);

}

Location: HTMLSerializer.java

Content: 

protected String escapeURI(String uri){

  int index;

  index=uri.indexOf("\"");

  if (index >= 0) {

    return uri.substring(0,index);

  }

  return uri;

}

Location: HTMLSerializer.java

Content: 

/** 

 * Constructs a new serializer. The serializer cannot be used without calling  {@link #setOutputCharStream} or {@link #setOutputByteStream}first.

 */

public HTMLSerializer(){

  this(false,new OutputFormat(Method.HTML,"ISO-8859-1",false));

}

Location: HTMLSerializer.java

Content: 

/** 

 * Constructs a new HTML/XHTML serializer depending on the value of <tt>xhtml</tt>. The serializer cannot be used without calling {@link #setOutputCharStream} or {@link #setOutputByteStream} first.

 * @param xhtml True if XHTML serializing

 */

protected HTMLSerializer(boolean xhtml,OutputFormat format){

  super(format);

  _xhtml=xhtml;

}

Location: HTMLSerializer.java

Content: 

/** 

 * Constructs a new serializer. The serializer cannot be used without calling  {@link #setOutputCharStream} or {@link #setOutputByteStream}first.

 */

public HTMLSerializer(OutputFormat format){

  this(false,format != null ? format : new OutputFormat(Method.HTML,"ISO-8859-1",false));

}

Location: HTMLSerializer.java

Content: 

/** 

 * Constructs a new serializer that writes to the specified output stream using the specified output format. If <tt>format</tt> is null, will use a default output format.

 * @param output The output stream to use

 * @param format The output format to use, null for the default

 */

public HTMLSerializer(OutputStream output,OutputFormat format){

  this(false,format != null ? format : new OutputFormat(Method.HTML,"ISO-8859-1",false));

  setOutputByteStream(output);

}

Location: HTMLSerializer.java

Content: 

/** 

 * Constructs a new serializer that writes to the specified writer using the specified output format. If <tt>format</tt> is null, will use a default output format.

 * @param writer The writer to use

 * @param format The output format to use, null for the default

 */

public HTMLSerializer(Writer writer,OutputFormat format){

  this(false,format != null ? format : new OutputFormat(Method.HTML,"ISO-8859-1",false));

  setOutputCharStream(writer);

}

Location: HTMLSerializer.java

Content: 

public void setXHTMLNamespace(String newNamespace){

  fUserXHTMLNamespace=newNamespace;

}

