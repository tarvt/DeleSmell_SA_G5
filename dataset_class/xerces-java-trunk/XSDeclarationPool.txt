Location: XSDeclarationPool.java

Content: 

private boolean ensureAttrDeclCapacity(int chunk){

  if (chunk >= fAttrDecl.length) {

    fAttrDecl=resize(fAttrDecl,fAttrDecl.length * 2);

  }

 else   if (fAttrDecl[chunk] != null) {

    return false;

  }

  fAttrDecl[chunk]=new XSAttributeDecl[CHUNK_SIZE];

  return true;

}

Location: XSDeclarationPool.java

Content: 

private boolean ensureAttributeUseCapacity(int chunk){

  if (chunk >= fAttributeUse.length) {

    fAttributeUse=resize(fAttributeUse,fAttributeUse.length * 2);

  }

 else   if (fAttributeUse[chunk] != null) {

    return false;

  }

  fAttributeUse[chunk]=new XSAttributeUseImpl[CHUNK_SIZE];

  return true;

}

Location: XSDeclarationPool.java

Content: 

private boolean ensureCTDeclCapacity(int chunk){

  if (chunk >= fCTDecl.length) {

    fCTDecl=resize(fCTDecl,fCTDecl.length * 2);

  }

 else   if (fCTDecl[chunk] != null) {

    return false;

  }

  fCTDecl[chunk]=new XSComplexTypeDecl[CHUNK_SIZE];

  return true;

}

Location: XSDeclarationPool.java

Content: 

private boolean ensureElementDeclCapacity(int chunk){

  if (chunk >= fElementDecl.length) {

    fElementDecl=resize(fElementDecl,fElementDecl.length * 2);

  }

 else   if (fElementDecl[chunk] != null) {

    return false;

  }

  fElementDecl[chunk]=new XSElementDecl[CHUNK_SIZE];

  return true;

}

Location: XSDeclarationPool.java

Content: 

private boolean ensureModelGroupCapacity(int chunk){

  if (chunk >= fModelGroup.length) {

    fModelGroup=resize(fModelGroup,fModelGroup.length * 2);

  }

 else   if (fModelGroup[chunk] != null) {

    return false;

  }

  fModelGroup[chunk]=new XSModelGroupImpl[CHUNK_SIZE];

  return true;

}

Location: XSDeclarationPool.java

Content: 

private boolean ensureParticleDeclCapacity(int chunk){

  if (chunk >= fParticleDecl.length) {

    fParticleDecl=resize(fParticleDecl,fParticleDecl.length * 2);

  }

 else   if (fParticleDecl[chunk] != null) {

    return false;

  }

  fParticleDecl[chunk]=new XSParticleDecl[CHUNK_SIZE];

  return true;

}

Location: XSDeclarationPool.java

Content: 

private boolean ensureSTDeclCapacity(int chunk){

  if (chunk >= fSTDecl.length) {

    fSTDecl=resize(fSTDecl,fSTDecl.length * 2);

  }

 else   if (fSTDecl[chunk] != null) {

    return false;

  }

  fSTDecl[chunk]=new XSSimpleTypeDecl[CHUNK_SIZE];

  return true;

}

Location: XSDeclarationPool.java

Content: 

public final XSAttributeDecl getAttributeDecl(){

  int chunk=fAttrDeclIndex >> CHUNK_SHIFT;

  int index=fAttrDeclIndex & CHUNK_MASK;

  ensureAttrDeclCapacity(chunk);

  if (fAttrDecl[chunk][index] == null) {

    fAttrDecl[chunk][index]=new XSAttributeDecl();

  }

 else {

    fAttrDecl[chunk][index].reset();

  }

  fAttrDeclIndex++;

  return fAttrDecl[chunk][index];

}

Location: XSDeclarationPool.java

Content: 

public final XSAttributeUseImpl getAttributeUse(){

  int chunk=fAttributeUseIndex >> CHUNK_SHIFT;

  int index=fAttributeUseIndex & CHUNK_MASK;

  ensureAttributeUseCapacity(chunk);

  if (fAttributeUse[chunk][index] == null) {

    fAttributeUse[chunk][index]=new XSAttributeUseImpl();

  }

 else {

    fAttributeUse[chunk][index].reset();

  }

  fAttributeUseIndex++;

  return fAttributeUse[chunk][index];

}

Location: XSDeclarationPool.java

Content: 

public final XSComplexTypeDecl getComplexTypeDecl(){

  int chunk=fCTDeclIndex >> CHUNK_SHIFT;

  int index=fCTDeclIndex & CHUNK_MASK;

  ensureCTDeclCapacity(chunk);

  if (fCTDecl[chunk][index] == null) {

    fCTDecl[chunk][index]=new XSComplexTypeDecl();

  }

 else {

    fCTDecl[chunk][index].reset();

  }

  fCTDeclIndex++;

  return fCTDecl[chunk][index];

}

Location: XSDeclarationPool.java

Content: 

public final XSElementDecl getElementDecl(){

  int chunk=fElementDeclIndex >> CHUNK_SHIFT;

  int index=fElementDeclIndex & CHUNK_MASK;

  ensureElementDeclCapacity(chunk);

  if (fElementDecl[chunk][index] == null) {

    fElementDecl[chunk][index]=new XSElementDecl();

  }

 else {

    fElementDecl[chunk][index].reset();

  }

  fElementDeclIndex++;

  return fElementDecl[chunk][index];

}

Location: XSDeclarationPool.java

Content: 

public final XSParticleDecl getParticleDecl(){

  int chunk=fParticleDeclIndex >> CHUNK_SHIFT;

  int index=fParticleDeclIndex & CHUNK_MASK;

  ensureParticleDeclCapacity(chunk);

  if (fParticleDecl[chunk][index] == null) {

    fParticleDecl[chunk][index]=new XSParticleDecl();

  }

 else {

    fParticleDecl[chunk][index].reset();

  }

  fParticleDeclIndex++;

  return fParticleDecl[chunk][index];

}

Location: XSDeclarationPool.java

Content: 

public final XSSimpleTypeDecl getSimpleTypeDecl(){

  int chunk=fSTDeclIndex >> CHUNK_SHIFT;

  int index=fSTDeclIndex & CHUNK_MASK;

  ensureSTDeclCapacity(chunk);

  if (fSTDecl[chunk][index] == null) {

    fSTDecl[chunk][index]=dvFactory.newXSSimpleTypeDecl();

  }

 else {

    fSTDecl[chunk][index].reset();

  }

  fSTDeclIndex++;

  return fSTDecl[chunk][index];

}

Location: XSDeclarationPool.java

Content: 

private static XSAttributeDecl[][] resize(XSAttributeDecl array[][],int newsize){

  XSAttributeDecl newarray[][]=new XSAttributeDecl[newsize][];

  System.arraycopy(array,0,newarray,0,array.length);

  return newarray;

}

Location: XSDeclarationPool.java

Content: 

private static XSModelGroupImpl[][] resize(XSModelGroupImpl array[][],int newsize){

  XSModelGroupImpl newarray[][]=new XSModelGroupImpl[newsize][];

  System.arraycopy(array,0,newarray,0,array.length);

  return newarray;

}

Location: XSDeclarationPool.java

Content: 

private static XSParticleDecl[][] resize(XSParticleDecl array[][],int newsize){

  XSParticleDecl newarray[][]=new XSParticleDecl[newsize][];

  System.arraycopy(array,0,newarray,0,array.length);

  return newarray;

}

Location: XSDeclarationPool.java

Content: 

private static XSSimpleTypeDecl[][] resize(XSSimpleTypeDecl array[][],int newsize){

  XSSimpleTypeDecl newarray[][]=new XSSimpleTypeDecl[newsize][];

  System.arraycopy(array,0,newarray,0,array.length);

  return newarray;

}

Location: XSDeclarationPool.java

Content: 

public void setDVFactory(SchemaDVFactoryImpl dvFactory){

  this.dvFactory=dvFactory;

}

