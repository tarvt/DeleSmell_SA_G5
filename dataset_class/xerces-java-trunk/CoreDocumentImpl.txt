Location: CoreDocumentImpl.java

Content: 

/** 

 * Call user data handlers when a node is deleted (finalized)

 * @param n The node this operation applies to.

 * @param c The copy node or null.

 * @param operation The operation - import, clone, or delete.

 */

protected void callUserDataHandlers(Node n,Node c,short operation){

  if (userData == null) {

    return;

  }

  if (n instanceof NodeImpl) {

    Hashtable t=((NodeImpl)n).getUserDataRecord();

    if (t == null || t.isEmpty()) {

      return;

    }

    callUserDataHandlers(n,c,operation,t);

  }

}

Location: CoreDocumentImpl.java

Content: 

/** 

 * Call user data handlers when a node is deleted (finalized)

 * @param n The node this operation applies to.

 * @param c The copy node or null.

 * @param operation The operation - import, clone, or delete.

 * @param handlers Data associated with n.

 */

void callUserDataHandlers(Node n,Node c,short operation,Hashtable userData){

  if (userData == null || userData.isEmpty()) {

    return;

  }

  Iterator entries=userData.entrySet().iterator();

  while (entries.hasNext()) {

    Map.Entry entry=(Map.Entry)entries.next();

    String key=(String)entry.getKey();

    UserDataRecord r=(UserDataRecord)entry.getValue();

    if (r.fHandler != null) {

      r.fHandler.handle(operation,key,r.fData,n,c);

    }

  }

}

Location: CoreDocumentImpl.java

Content: 

protected boolean canRenameElements(String newNamespaceURI,String newNodeName,ElementImpl el){

  return true;

}

Location: CoreDocumentImpl.java

Content: 

/** 

 * Returns the number of changes to this node.

 */

protected int changes(){

  return changes;

}

Location: CoreDocumentImpl.java

Content: 

protected final void checkDOMNSErr(String prefix,String namespace){

  if (errorChecking) {

    if (namespace == null) {

      String msg=DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN,"NAMESPACE_ERR",null);

      throw new DOMException(DOMException.NAMESPACE_ERR,msg);

    }

 else     if (prefix.equals("xml") && !namespace.equals(NamespaceContext.XML_URI)) {

      String msg=DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN,"NAMESPACE_ERR",null);

      throw new DOMException(DOMException.NAMESPACE_ERR,msg);

    }

 else     if (prefix.equals("xmlns") && !namespace.equals(NamespaceContext.XMLNS_URI) || (!prefix.equals("xmlns") && namespace.equals(NamespaceContext.XMLNS_URI))) {

      String msg=DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN,"NAMESPACE_ERR",null);

      throw new DOMException(DOMException.NAMESPACE_ERR,msg);

    }

  }

}

Location: CoreDocumentImpl.java

Content: 

/** 

 * Call user data handlers to let them know the nodes they are related to are being deleted. The alternative would be to do that on Node but because the nodes are used as the keys we have a reference to them that prevents them from being gc'ed until the document is. At the same time, doing it here has the advantage of avoiding a finalize() method on Node, which would affect all nodes and not just the ones that have a user data.

 */

protected final void checkNamespaceWF(String qname,int colon1,int colon2){

  if (!errorChecking) {

    return;

  }

  if (colon1 == 0 || colon1 == qname.length() - 1 || colon2 != colon1) {

    String msg=DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN,"NAMESPACE_ERR",null);

    throw new DOMException(DOMException.NAMESPACE_ERR,msg);

  }

}

Location: CoreDocumentImpl.java

Content: 

/** 

 * Checks if the given qualified name is legal with respect to the version of XML to which this document must conform.

 * @param prefix prefix of qualified name

 * @param local local part of qualified name

 */

protected final void checkQName(String prefix,String local){

  if (!errorChecking) {

    return;

  }

  boolean validNCName=false;

  if (!xml11Version) {

    validNCName=(prefix == null || XMLChar.isValidNCName(prefix)) && XMLChar.isValidNCName(local);

  }

 else {

    validNCName=(prefix == null || XML11Char.isXML11ValidNCName(prefix)) && XML11Char.isXML11ValidNCName(local);

  }

  if (!validNCName) {

    String msg=DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN,"INVALID_CHARACTER_ERR",null);

    throw new DOMException(DOMException.INVALID_CHARACTER_ERR,msg);

  }

}

Location: CoreDocumentImpl.java

Content: 

/** 

 * Remove all identifiers from the ID table

 */

protected final void clearIdentifiers(){

  if (identifiers != null) {

    identifiers.clear();

  }

}

Location: CoreDocumentImpl.java

Content: 

/** 

 * internal method to share code with subclass

 */

protected void cloneNode(CoreDocumentImpl newdoc,boolean deep){

  if (needsSyncChildren()) {

    synchronizeChildren();

  }

  if (deep) {

    HashMap reversedIdentifiers=null;

    if (identifiers != null) {

      reversedIdentifiers=new HashMap();

      Iterator entries=identifiers.entrySet().iterator();

      while (entries.hasNext()) {

        Map.Entry entry=(Map.Entry)entries.next();

        Object elementId=entry.getKey();

        Object elementNode=entry.getValue();

        reversedIdentifiers.put(elementNode,elementId);

      }

    }

    for (ChildNode kid=firstChild; kid != null; kid=kid.nextSibling) {

      newdoc.appendChild(newdoc.importNode(kid,true,true,reversedIdentifiers));

    }

  }

  newdoc.allowGrammarAccess=allowGrammarAccess;

  newdoc.errorChecking=errorChecking;

}

Location: CoreDocumentImpl.java

Content: 

/** 

 * NON-DOM: Actually creating a Document is outside the DOM's spec, since it has to operate in terms of a particular implementation.

 */

public CoreDocumentImpl(){

  this(false);

}

Location: CoreDocumentImpl.java

Content: 

/** 

 * Constructor. 

 */

public CoreDocumentImpl(boolean grammarAccess){

  super(null);

  ownerDocument=this;

  allowGrammarAccess=grammarAccess;

}

Location: CoreDocumentImpl.java

Content: 

/** 

 * For DOM2 support. The createDocument factory method is in DOMImplementation.

 */

public CoreDocumentImpl(DocumentType doctype){

  this(doctype,false);

}

Location: CoreDocumentImpl.java

Content: 

/** 

 * For DOM2 support. 

 */

public CoreDocumentImpl(DocumentType doctype,boolean grammarAccess){

  this(grammarAccess);

  if (doctype != null) {

    DocumentTypeImpl doctypeImpl;

    try {

      doctypeImpl=(DocumentTypeImpl)doctype;

    }

 catch (    ClassCastException e) {

      String msg=DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN,"WRONG_DOCUMENT_ERR",null);

      throw new DOMException(DOMException.WRONG_DOCUMENT_ERR,msg);

    }

    doctypeImpl.ownerDocument=this;

    appendChild(doctype);

  }

}

Location: CoreDocumentImpl.java

Content: 

/** 

 * NON-DOM Factory method: creates an element definition. Element definitions hold default attribute values.

 */

public ElementDefinitionImpl createElementDefinition(String name) throws DOMException {

  if (errorChecking && !isXMLName(name,xml11Version)) {

    String msg=DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN,"INVALID_CHARACTER_ERR",null);

    throw new DOMException(DOMException.INVALID_CHARACTER_ERR,msg);

  }

  return new ElementDefinitionImpl(this,name);

}

Location: CoreDocumentImpl.java

Content: 

/** 

 * NON-DOM Factory method; creates an Entity having this Document as its OwnerDoc. (REC-DOM-Level-1-19981001 left the process of building DTD information unspecified.)

 * @param name The name of the Entity we wish to provide a value for.

 * @throws DOMException (NOT_SUPPORTED_ERR) for HTML documents, where nonstandard entities are not permitted. (HTML not yet implemented.)

 */

public Entity createEntity(String name) throws DOMException {

  if (errorChecking && !isXMLName(name,xml11Version)) {

    String msg=DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN,"INVALID_CHARACTER_ERR",null);

    throw new DOMException(DOMException.INVALID_CHARACTER_ERR,msg);

  }

  return new EntityImpl(this,name);

}

Location: CoreDocumentImpl.java

Content: 

/** 

 * NON-DOM Factory method; creates a Notation having this Document as its OwnerDoc. (REC-DOM-Level-1-19981001 left the process of building DTD information unspecified.)

 * @param name The name of the Notation we wish to describe

 * @throws DOMException (NOT_SUPPORTED_ERR) for HTML documents, where notations are not permitted. (HTML not yet implemented.)

 */

public Notation createNotation(String name) throws DOMException {

  if (errorChecking && !isXMLName(name,xml11Version)) {

    String msg=DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN,"INVALID_CHARACTER_ERR",null);

    throw new DOMException(DOMException.INVALID_CHARACTER_ERR,msg);

  }

  return new NotationImpl(this,name);

}

Location: CoreDocumentImpl.java

Content: 

/** 

 * Puts the given NodeListCache in the free list. Note: The owner node can keep using it until we reuse it

 */

void freeNodeListCache(NodeListCache c){

  c.next=fFreeNLCache;

  fFreeNLCache=c;

}

Location: CoreDocumentImpl.java

Content: 

/** 

 * Returns true if the DOM implementation performs error checking.

 */

public boolean getErrorChecking(){

  return errorChecking;

}

Location: CoreDocumentImpl.java

Content: 

/** 

 * Returns an enumeration registered of identifier names. 

 */

public Enumeration getIdentifiers(){

  if (needsSyncData()) {

    synchronizeData();

  }

  if (identifiers == null) {

    identifiers=new Hashtable();

  }

  return identifiers.keys();

}

Location: CoreDocumentImpl.java

Content: 

/** 

 * Returns a previously registered element with the specified identifier name, or null if no element is registered.

 * @see #putIdentifier

 * @see #removeIdentifier

 */

public Element getIdentifier(String idName){

  if (needsSyncData()) {

    synchronizeData();

  }

  if (identifiers == null) {

    return null;

  }

  Element elem=(Element)identifiers.get(idName);

  if (elem != null) {

    Node parent=elem.getParentNode();

    while (parent != null) {

      if (parent == this) {

        return elem;

      }

      parent=parent.getParentNode();

    }

  }

  return null;

}

Location: CoreDocumentImpl.java

Content: 

/** 

 * Returns a NodeListCache for the given node.

 */

NodeListCache getNodeListCache(ParentNode owner){

  if (fFreeNLCache == null) {

    return new NodeListCache(owner);

  }

  NodeListCache c=fFreeNLCache;

  fFreeNLCache=fFreeNLCache.next;

  c.fChild=null;

  c.fChildIndex=-1;

  c.fLength=-1;

  if (c.fOwner != null) {

    c.fOwner.fNodeListCache=null;

  }

  c.fOwner=owner;

  return c;

}

Location: CoreDocumentImpl.java

Content: 

/** 

 * NON-DOM:  Get the number associated with this document.   Used to order documents in the implementation.

 */

protected int getNodeNumber(){

  if (documentNumber == 0) {

    CoreDOMImplementationImpl cd=(CoreDOMImplementationImpl)CoreDOMImplementationImpl.getDOMImplementation();

    documentNumber=cd.assignDocumentNumber();

  }

  return documentNumber;

}

Location: CoreDocumentImpl.java

Content: 

/** 

 * NON-DOM:  Get a number associated with a node created with respect to this document.   Needed for compareDocumentPosition when nodes are disconnected.  This is only used on demand.

 */

protected int getNodeNumber(Node node){

  int num;

  if (nodeTable == null) {

    nodeTable=new WeakHashMap();

    num=--nodeCounter;

    nodeTable.put(node,new Integer(num));

  }

 else {

    Integer n=(Integer)nodeTable.get(node);

    if (n == null) {

      num=--nodeCounter;

      nodeTable.put(node,new Integer(num));

    }

 else     num=n.intValue();

  }

  return num;

}

Location: CoreDocumentImpl.java

Content: 

protected Hashtable getUserDataRecord(Node n){

  if (userData == null) {

    return null;

  }

  Hashtable t=(Hashtable)userData.get(n);

  if (t == null) {

    return null;

  }

  return t;

}

Location: CoreDocumentImpl.java

Content: 

/** 

 * NON-DOM: kept for backward compatibility Retreive user data related to a given node

 */

protected Object getUserData(NodeImpl n){

  return getUserData(n,"XERCES1DOMUSERDATA");

}

Location: CoreDocumentImpl.java

Content: 

/** 

 * Retrieves the object associated to a key on a this node. The object must first have been set to this node by calling <code>setUserData</code> with the same key.

 * @param n The node the object is associated to.

 * @param key The key the object is associated to.

 * @return Returns the <code>DOMObject</code> associated to the given keyon this node, or <code>null</code> if there was none.

 * @since DOM Level 3

 */

public Object getUserData(Node n,String key){

  if (userData == null) {

    return null;

  }

  Hashtable t=(Hashtable)userData.get(n);

  if (t == null) {

    return null;

  }

  Object o=t.get(key);

  if (o != null) {

    UserDataRecord r=(UserDataRecord)o;

    return r.fData;

  }

  return null;

}

Location: CoreDocumentImpl.java

Content: 

/** 

 * Overloaded implementation of DOM's importNode method. This method provides the core functionality for the public importNode and cloneNode methods. The reversedIdentifiers parameter is provided for cloneNode to preserve the document's identifiers. The HashMap has Elements as the keys and their identifiers as the values. When an element is being imported, a check is done for an associated identifier. If one exists, the identifier is registered with the new, imported element. If reversedIdentifiers is null, the parameter is not applied.

 */

private Node importNode(Node source,boolean deep,boolean cloningDoc,HashMap reversedIdentifiers) throws DOMException {

  Node newnode=null;

  Hashtable userData=null;

  if (source instanceof NodeImpl)   userData=((NodeImpl)source).getUserDataRecord();

  int type=source.getNodeType();

switch (type) {

case ELEMENT_NODE:

{

      Element newElement;

      boolean domLevel20=source.getOwnerDocument().getImplementation().hasFeature("XML","2.0");

      if (domLevel20 == false || source.getLocalName() == null)       newElement=createElement(source.getNodeName());

 else       newElement=createElementNS(source.getNamespaceURI(),source.getNodeName());

      NamedNodeMap sourceAttrs=source.getAttributes();

      if (sourceAttrs != null) {

        int length=sourceAttrs.getLength();

        for (int index=0; index < length; index++) {

          Attr attr=(Attr)sourceAttrs.item(index);

          if (attr.getSpecified() || cloningDoc) {

            Attr newAttr=(Attr)importNode(attr,true,cloningDoc,reversedIdentifiers);

            if (domLevel20 == false || attr.getLocalName() == null)             newElement.setAttributeNode(newAttr);

 else             newElement.setAttributeNodeNS(newAttr);

          }

        }

      }

      if (reversedIdentifiers != null) {

        Object elementId=reversedIdentifiers.get(source);

        if (elementId != null) {

          if (identifiers == null)           identifiers=new Hashtable();

          identifiers.put(elementId,newElement);

        }

      }

      newnode=newElement;

      break;

    }

case ATTRIBUTE_NODE:

{

    if (source.getOwnerDocument().getImplementation().hasFeature("XML","2.0")) {

      if (source.getLocalName() == null) {

        newnode=createAttribute(source.getNodeName());

      }

 else {

        newnode=createAttributeNS(source.getNamespaceURI(),source.getNodeName());

      }

    }

 else {

      newnode=createAttribute(source.getNodeName());

    }

    if (source instanceof AttrImpl) {

      AttrImpl attr=(AttrImpl)source;

      if (attr.hasStringValue()) {

        AttrImpl newattr=(AttrImpl)newnode;

        newattr.setValue(attr.getValue());

        deep=false;

      }

 else {

        deep=true;

      }

    }

 else {

      if (source.getFirstChild() == null) {

        newnode.setNodeValue(source.getNodeValue());

        deep=false;

      }

 else {

        deep=true;

      }

    }

    break;

  }

case TEXT_NODE:

{

  newnode=createTextNode(source.getNodeValue());

  break;

}

case CDATA_SECTION_NODE:

{

newnode=createCDATASection(source.getNodeValue());

break;

}

case ENTITY_REFERENCE_NODE:

{

newnode=createEntityReference(source.getNodeName());

deep=false;

break;

}

case ENTITY_NODE:

{

Entity srcentity=(Entity)source;

EntityImpl newentity=(EntityImpl)createEntity(source.getNodeName());

newentity.setPublicId(srcentity.getPublicId());

newentity.setSystemId(srcentity.getSystemId());

newentity.setNotationName(srcentity.getNotationName());

newentity.isReadOnly(false);

newnode=newentity;

break;

}

case PROCESSING_INSTRUCTION_NODE:

{

newnode=createProcessingInstruction(source.getNodeName(),source.getNodeValue());

break;

}

case COMMENT_NODE:

{

newnode=createComment(source.getNodeValue());

break;

}

case DOCUMENT_TYPE_NODE:

{

if (!cloningDoc) {

String msg=DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN,"NOT_SUPPORTED_ERR",null);

throw new DOMException(DOMException.NOT_SUPPORTED_ERR,msg);

}

DocumentType srcdoctype=(DocumentType)source;

DocumentTypeImpl newdoctype=(DocumentTypeImpl)createDocumentType(srcdoctype.getNodeName(),srcdoctype.getPublicId(),srcdoctype.getSystemId());

newdoctype.setInternalSubset(srcdoctype.getInternalSubset());

NamedNodeMap smap=srcdoctype.getEntities();

NamedNodeMap tmap=newdoctype.getEntities();

if (smap != null) {

for (int i=0; i < smap.getLength(); i++) {

tmap.setNamedItem(importNode(smap.item(i),true,true,reversedIdentifiers));

}

}

smap=srcdoctype.getNotations();

tmap=newdoctype.getNotations();

if (smap != null) {

for (int i=0; i < smap.getLength(); i++) {

tmap.setNamedItem(importNode(smap.item(i),true,true,reversedIdentifiers));

}

}

newnode=newdoctype;

break;

}

case DOCUMENT_FRAGMENT_NODE:

{

newnode=createDocumentFragment();

break;

}

case NOTATION_NODE:

{

Notation srcnotation=(Notation)source;

NotationImpl newnotation=(NotationImpl)createNotation(source.getNodeName());

newnotation.setPublicId(srcnotation.getPublicId());

newnotation.setSystemId(srcnotation.getSystemId());

newnode=newnotation;

break;

}

case DOCUMENT_NODE:

default :

{

String msg=DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN,"NOT_SUPPORTED_ERR",null);

throw new DOMException(DOMException.NOT_SUPPORTED_ERR,msg);

}

}

if (userData != null) callUserDataHandlers(source,newnode,UserDataHandler.NODE_IMPORTED,userData);

if (deep) {

for (Node srckid=source.getFirstChild(); srckid != null; srckid=srckid.getNextSibling()) {

newnode.appendChild(importNode(srckid,true,cloningDoc,reversedIdentifiers));

}

}

if (newnode.getNodeType() == Node.ENTITY_NODE) {

((NodeImpl)newnode).setReadOnly(true,true);

}

return newnode;

}

Location: CoreDocumentImpl.java

Content: 

/** 

 * Uses the kidOK lookup table to check whether the proposed tree structure is legal.

 */

protected boolean isKidOK(Node parent,Node child){

  if (allowGrammarAccess && parent.getNodeType() == Node.DOCUMENT_TYPE_NODE) {

    return child.getNodeType() == Node.ELEMENT_NODE;

  }

  return 0 != (kidOK[parent.getNodeType()] & 1 << child.getNodeType());

}

Location: CoreDocumentImpl.java

Content: 

boolean isNormalizeDocRequired(){

  return true;

}

Location: CoreDocumentImpl.java

Content: 

/** 

 * Checks if the given qualified name is legal with respect to the version of XML to which this document must conform.

 * @param prefix prefix of qualified name

 * @param local local part of qualified name

 */

public static final boolean isValidQName(String prefix,String local,boolean xml11Version){

  if (local == null)   return false;

  boolean validNCName=false;

  if (!xml11Version) {

    validNCName=(prefix == null || XMLChar.isValidNCName(prefix)) && XMLChar.isValidNCName(local);

  }

 else {

    validNCName=(prefix == null || XML11Char.isXML11ValidNCName(prefix)) && XML11Char.isXML11ValidNCName(local);

  }

  return validNCName;

}

Location: CoreDocumentImpl.java

Content: 

/** 

 * We could have more xml versions in future , but for now we could do with this to handle XML 1.0 and 1.1

 */

boolean isXML11Version(){

  return xml11Version;

}

Location: CoreDocumentImpl.java

Content: 

/** 

 * Check the string against XML's definition of acceptable names for elements and attributes and so on using the XMLCharacterProperties utility class

 */

public static final boolean isXMLName(String s,boolean xml11Version){

  if (s == null) {

    return false;

  }

  if (!xml11Version)   return XMLChar.isValidName(s);

 else   return XML11Char.isXML11ValidName(s);

}

Location: CoreDocumentImpl.java

Content: 

boolean isXMLVersionChanged(){

  return xmlVersionChanged;

}

Location: CoreDocumentImpl.java

Content: 

/** 

 * DOM Level 3 WD - Experimental. Replace the content of the document with the result of parsing the input string, this method is always synchronous.

 * @param source A string containing an XML document.

 * @return <code>true</code> if parsing the input string succeededwithout errors, otherwise <code>false</code>.

 */

public boolean loadXML(String source){

  return false;

}

Location: CoreDocumentImpl.java

Content: 

/** 

 * DOM Level 3 WD - Experimental. Replaces the content of the document with the result of parsing the given URI. Invoking this method will either block the caller or return to the caller immediately depending on the value of the async attribute. Once the document is fully loaded a "load" event (as defined in [<a href='http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331'>DOM Level 3 Events</a>] , except that the <code>Event.targetNode</code> will be the document, not an element) will be dispatched on the document. If an error occurs, an implementation dependent "error" event will be dispatched on the document. If this method is called on a document that is currently loading, the current load is interrupted and the new URI load is initiated. <br> When invoking this method the parameters used in the <code>DOMParser</code> interface are assumed to have their default values with the exception that the parameters <code>"entities"</code> , <code>"normalize-characters"</code>, <code>"check-character-normalization"</code> are set to <code>"false"</code>. <br> The result of a call to this method is the same the result of a call to <code>DOMParser.parseWithContext</code> with an input stream referencing the URI that was passed to this call, the document as the context node, and the action <code>ACTION_REPLACE_CHILDREN</code>.

 * @param uri The URI reference for the XML file to be loaded. If this isa relative URI, the base URI used by the implementation is implementation dependent.

 * @return If async is set to <code>true</code> <code>load</code> returns<code>true</code> if the document load was successfully initiated. If an error occurred when initiating the document load, <code>load</code> returns <code>false</code>.If async is set to <code>false</code> <code>load</code> returns <code>true</code> if the document was successfully loaded and parsed. If an error occurred when either loading or parsing the URI, <code>load</code> returns <code>false</code>.

 */

public boolean load(String uri){

  return false;

}

Location: CoreDocumentImpl.java

Content: 

/** 

 * Registers an identifier name with a specified element node. If the identifier is already registered, the new element node replaces the previous node. If the specified element node is null, removeIdentifier() is called.

 * @see #getIdentifier

 * @see #removeIdentifier

 */

public void putIdentifier(String idName,Element element){

  if (element == null) {

    removeIdentifier(idName);

    return;

  }

  if (needsSyncData()) {

    synchronizeData();

  }

  if (identifiers == null) {

    identifiers=new Hashtable();

  }

  identifiers.put(idName,element);

}

Location: CoreDocumentImpl.java

Content: 

/** 

 * Removes a previously registered element with the specified identifier name.

 * @see #putIdentifier

 * @see #getIdentifier

 */

public void removeIdentifier(String idName){

  if (needsSyncData()) {

    synchronizeData();

  }

  if (identifiers == null) {

    return;

  }

  identifiers.remove(idName);

}

Location: CoreDocumentImpl.java

Content: 

/** 

 * Remove user data table for the given node.

 * @param n The node this operation applies to.

 * @return The removed table.

 */

Hashtable removeUserDataTable(Node n){

  if (userData == null) {

    return null;

  }

  return (Hashtable)userData.get(n);

}

Location: CoreDocumentImpl.java

Content: 

private ElementImpl replaceRenameElement(ElementImpl el,String namespaceURI,String name){

  ElementNSImpl nel=(ElementNSImpl)createElementNS(namespaceURI,name);

  copyEventListeners(el,nel);

  Hashtable data=removeUserDataTable(el);

  Node parent=el.getParentNode();

  Node nextSib=el.getNextSibling();

  if (parent != null) {

    parent.removeChild(el);

  }

  Node child=el.getFirstChild();

  while (child != null) {

    el.removeChild(child);

    nel.appendChild(child);

    child=el.getFirstChild();

  }

  nel.moveSpecifiedAttributes(el);

  setUserDataTable(nel,data);

  callUserDataHandlers(el,nel,UserDataHandler.NODE_RENAMED);

  if (parent != null) {

    parent.insertBefore(nel,nextSib);

  }

  return nel;

}

Location: CoreDocumentImpl.java

Content: 

/** 

 * DOM Level 3 WD - Experimental. Save the document or the given node and all its descendants to a string (i.e. serialize the document or node). <br>The parameters used in the <code>LSSerializer</code> interface are assumed to have their default values when invoking this method. <br> The result of a call to this method is the same the result of a call to <code>LSSerializer.writeToString</code> with the document as the node to write.

 * @param node Specifies what to serialize, if this parameter is<code>null</code> the whole document is serialized, if it's non-null the given node is serialized.

 * @return The serialized document or <code>null</code> in case an erroroccurred.

 * @exception DOMException WRONG_DOCUMENT_ERR: Raised if the node passed in as the node parameter is from an other document.

 */

public String saveXML(Node node) throws DOMException {

  if (errorChecking && node != null && this != node.getOwnerDocument()) {

    String msg=DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN,"WRONG_DOCUMENT_ERR",null);

    throw new DOMException(DOMException.WRONG_DOCUMENT_ERR,msg);

  }

  DOMImplementationLS domImplLS=(DOMImplementationLS)DOMImplementationImpl.getDOMImplementation();

  LSSerializer xmlWriter=domImplLS.createLSSerializer();

  if (node == null) {

    node=this;

  }

  return xmlWriter.writeToString(node);

}

Location: CoreDocumentImpl.java

Content: 

/** 

 * DOM Level 3 WD - Experimental. Indicates whether the method load should be synchronous or asynchronous. When the async attribute is set to <code>true</code> the load method returns control to the caller before the document has completed loading. The default value of this property is <code>false</code>. <br>Setting the value of this attribute might throw NOT_SUPPORTED_ERR if the implementation doesn't support the mode the attribute is being set to. Should the DOM spec define the default value of this property? What if implementing both async and sync IO is impractical in some systems?  2001-09-14. default is <code>false</code> but we need to check with Mozilla and IE.

 */

public void setAsync(boolean async){

  if (async) {

    String msg=DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN,"NOT_SUPPORTED_ERR",null);

    throw new DOMException(DOMException.NOT_SUPPORTED_ERR,msg);

  }

}

Location: CoreDocumentImpl.java

Content: 

/** 

 * Sets whether the DOM implementation performs error checking upon operations. Turning off error checking only affects the following DOM checks: <ul> <li>Checking strings to make sure that all characters are legal XML characters <li>Hierarchy checking such as allowed children, checks for cycles, etc. </ul> <p> Turning off error checking does <em>not</em> turn off the following checks: <ul> <li>Read only checks <li>Checks related to DOM events </ul>

 */

public void setErrorChecking(boolean check){

  errorChecking=check;

}

Location: CoreDocumentImpl.java

Content: 

/** 

 * Set user data table for the given node.

 * @param n The node this operation applies to.

 * @param data The user data table.

 */

void setUserDataTable(Node n,Hashtable data){

  if (userData == null) {

    userData=new WeakHashMap();

  }

  if (data != null) {

    userData.put(n,data);

  }

}

Location: CoreDocumentImpl.java

Content: 

/** 

 * NON-DOM: kept for backward compatibility Store user data related to a given node This is a place where we could use weak references! Indeed, the node here won't be GC'ed as long as some user data is attached to it, since the userData table will have a reference to the node.

 */

protected void setUserData(NodeImpl n,Object data){

  setUserData(n,"XERCES1DOMUSERDATA",data,null);

}

Location: CoreDocumentImpl.java

Content: 

/** 

 * Associate an object to a key on this node. The object can later be retrieved from this node by calling <code>getUserData</code> with the same key.

 * @param n The node to associate the object to.

 * @param key The key to associate the object to.

 * @param data The object to associate to the given key, or<code>null</code> to remove any existing association to that key.

 * @param handler The handler to associate to that key, or<code>null</code>.

 * @return Returns the <code>DOMObject</code> previously associated tothe given key on this node, or <code>null</code> if there was none.

 * @since DOM Level 3REVISIT: we could use a free list of UserDataRecord here

 */

public Object setUserData(Node n,String key,Object data,UserDataHandler handler){

  if (data == null) {

    if (userData != null) {

      Hashtable t=(Hashtable)userData.get(n);

      if (t != null) {

        Object o=t.remove(key);

        if (o != null) {

          UserDataRecord r=(UserDataRecord)o;

          return r.fData;

        }

      }

    }

    return null;

  }

 else {

    Hashtable t;

    if (userData == null) {

      userData=new WeakHashMap();

      t=new Hashtable();

      userData.put(n,t);

    }

 else {

      t=(Hashtable)userData.get(n);

      if (t == null) {

        t=new Hashtable();

        userData.put(n,t);

      }

    }

    Object o=t.put(key,new UserDataRecord(data,handler));

    if (o != null) {

      UserDataRecord r=(UserDataRecord)o;

      return r.fData;

    }

    return null;

  }

}

Location: CoreDocumentImpl.java

Content: 

/** 

 * Traverses the DOM Tree and expands deferred nodes and their children.

 */

protected void undeferChildren(Node node){

  Node top=node;

  while (null != node) {

    if (((NodeImpl)node).needsSyncData()) {

      ((NodeImpl)node).synchronizeData();

    }

    NamedNodeMap attributes=node.getAttributes();

    if (attributes != null) {

      int length=attributes.getLength();

      for (int i=0; i < length; ++i) {

        undeferChildren(attributes.item(i));

      }

    }

    Node nextNode=null;

    nextNode=node.getFirstChild();

    while (null == nextNode) {

      if (top.equals(node))       break;

      nextNode=node.getNextSibling();

      if (null == nextNode) {

        node=node.getParentNode();

        if ((null == node) || (top.equals(node))) {

          nextNode=null;

          break;

        }

      }

    }

    node=nextNode;

  }

}

