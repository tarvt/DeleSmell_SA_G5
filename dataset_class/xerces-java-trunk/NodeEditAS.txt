Location: NodeEditAS.java

Content: 

/** 

 * Has the same arguments as <code>AppendChild</code>.

 * @param newChild <code>Node</code> to be appended.

 * @return <code>true</code> if no reason it can't be done; <code>false</code> if it can't be done.

 */

public boolean canAppendChild(Node newChild);

Location: NodeEditAS.java

Content: 

/** 

 * Determines whether the <code>insertBefore</code> operation from the  <code>Node</code> interface would make this document invalid with  respect to the currently active AS. Describe "valid" when referring  to partially completed documents.

 * @param newChild <code>Node</code> to be inserted.

 * @param refChild Reference <code>Node</code>.

 * @return <code>true</code> if no reason it can't be done; <code>false</code> if it can't be done.

 */

public boolean canInsertBefore(Node newChild,Node refChild);

Location: NodeEditAS.java

Content: 

/** 

 * Has the same arguments as <code>RemoveChild</code>.

 * @param oldChild <code>Node</code> to be removed.

 * @return <code>true</code> if no reason it can't be done; <code>false</code> if it can't be done.

 */

public boolean canRemoveChild(Node oldChild);

Location: NodeEditAS.java

Content: 

/** 

 * Has the same arguments as <code>ReplaceChild</code>.

 * @param newChild New <code>Node</code>.

 * @param oldChild <code>Node</code> to be replaced.

 * @return <code>true</code> if no reason it can't be done; <code>false</code> if it can't be done.

 */

public boolean canReplaceChild(Node newChild,Node oldChild);

Location: NodeEditAS.java

Content: 

/** 

 * Determines if the Node is valid relative to currently active AS. It  doesn't normalize before checking if the document is valid. To do so,  one would need to explicitly call a normalize method. 

 * @param deep Setting the <code>deep</code> flag on causes the <code>isNodeValid</code> method to check for the whole subtree of  the current node for validity. Setting it to <code>false</code>  only checks the current node and its immediate child nodes. The  <code>validate</code> method on the <code>DocumentAS</code>  interface, however, checks to determine whether the entire document  is valid.

 * @param wFValidityCheckLevel Flag to tell at what level validity and well-formedness checking is done. 

 * @return <code>true</code> if the node is valid/well-formed in the current context and check level defined by  <code>wfValidityCheckLevel</code>, <code>false</code> if not.

 * @exception DOMASException <code>NO_AS_AVAILABLE</code>: Raised if the  <code>DocumentEditAS</code> related to this node does not have any  active <code>ASModel</code> and <code>wfValidityCheckLevel</code>  is set to <code>PARTIAL</code> or <code>STRICT_VALIDITY_CHECK</code> .

 */

public boolean isNodeValid(boolean deep,short wFValidityCheckLevel) throws DOMASException ;

