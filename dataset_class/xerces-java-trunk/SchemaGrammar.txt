Location: SchemaGrammar.java

Content: 

/** 

 * add one complex type decl: for later constraint checking

 */

public void addComplexTypeDecl(XSComplexTypeDecl decl,SimpleLocator locator){

  if (fCTCount == fComplexTypeDecls.length) {

    fComplexTypeDecls=resize(fComplexTypeDecls,fCTCount + INC_SIZE);

    fCTLocators=resize(fCTLocators,fCTCount + INC_SIZE);

  }

  fCTLocators[fCTCount]=locator;

  fComplexTypeDecls[fCTCount++]=decl;

}

Location: SchemaGrammar.java

Content: 

public synchronized void addDocument(Object document,String location){

  if (fDocuments == null) {

    fDocuments=new Vector();

    fLocations=new Vector();

  }

  fDocuments.addElement(document);

  fLocations.addElement(location);

}

Location: SchemaGrammar.java

Content: 

public void addGlobalAttributeDecl(XSAttributeDecl decl,String location){

  fGlobalAttrDeclsExt.put(((location != null) ? location : "") + "," + decl.fName,decl);

  if (decl.getNamespaceItem() == null) {

    decl.setNamespaceItem(this);

  }

}

Location: SchemaGrammar.java

Content: 

public void addGlobalAttributeGroupDecl(XSAttributeGroupDecl decl,String location){

  fGlobalAttrGrpDeclsExt.put(((location != null) ? location : "") + "," + decl.fName,decl);

  if (decl.getNamespaceItem() == null) {

    decl.setNamespaceItem(this);

  }

}

Location: SchemaGrammar.java

Content: 

/** 

 * register one global complex type

 */

public void addGlobalComplexTypeDecl(XSComplexTypeDecl decl){

  fGlobalTypeDecls.put(decl.getName(),decl);

  decl.setNamespaceItem(this);

}

Location: SchemaGrammar.java

Content: 

public void addGlobalComplexTypeDecl(XSComplexTypeDecl decl,String location){

  fGlobalTypeDeclsExt.put(((location != null) ? location : "") + "," + decl.getName(),decl);

  if (decl.getNamespaceItem() == null) {

    decl.setNamespaceItem(this);

  }

}

Location: SchemaGrammar.java

Content: 

/** 

 * register one global element

 */

public void addGlobalElementDeclAll(XSElementDecl decl){

  if (fAllGlobalElemDecls.get(decl) == null) {

    fAllGlobalElemDecls.put(decl,decl);

    if (decl.fSubGroup != null) {

      if (fSubGroupCount == fSubGroups.length)       fSubGroups=resize(fSubGroups,fSubGroupCount + INC_SIZE);

      fSubGroups[fSubGroupCount++]=decl;

    }

  }

}

Location: SchemaGrammar.java

Content: 

public void addGlobalElementDecl(XSElementDecl decl,String location){

  fGlobalElemDeclsExt.put(((location != null) ? location : "") + "," + decl.fName,decl);

  if (decl.getNamespaceItem() == null) {

    decl.setNamespaceItem(this);

  }

}

Location: SchemaGrammar.java

Content: 

public void addGlobalGroupDecl(XSGroupDecl decl,String location){

  fGlobalGroupDeclsExt.put(((location != null) ? location : "") + "," + decl.fName,decl);

  if (decl.getNamespaceItem() == null) {

    decl.setNamespaceItem(this);

  }

}

Location: SchemaGrammar.java

Content: 

public void addGlobalNotationDecl(XSNotationDecl decl,String location){

  fGlobalNotationDeclsExt.put(((location != null) ? location : "") + "," + decl.fName,decl);

  if (decl.getNamespaceItem() == null) {

    decl.setNamespaceItem(this);

  }

}

Location: SchemaGrammar.java

Content: 

/** 

 * register one global simple type

 */

public void addGlobalSimpleTypeDecl(XSSimpleType decl){

  fGlobalTypeDecls.put(decl.getName(),decl);

  if (decl instanceof XSSimpleTypeDecl) {

    ((XSSimpleTypeDecl)decl).setNamespaceItem(this);

  }

}

Location: SchemaGrammar.java

Content: 

public void addGlobalSimpleTypeDecl(XSSimpleType decl,String location){

  fGlobalTypeDeclsExt.put(((location != null) ? location : "") + "," + decl.getName(),decl);

  if (decl.getNamespaceItem() == null && decl instanceof XSSimpleTypeDecl) {

    ((XSSimpleTypeDecl)decl).setNamespaceItem(this);

  }

}

Location: SchemaGrammar.java

Content: 

public void addGlobalTypeDecl(XSTypeDefinition decl,String location){

  fGlobalTypeDeclsExt.put(((location != null) ? location : "") + "," + decl.getName(),decl);

  if (decl.getNamespaceItem() == null) {

    if (decl instanceof XSComplexTypeDecl) {

      ((XSComplexTypeDecl)decl).setNamespaceItem(this);

    }

 else     if (decl instanceof XSSimpleTypeDecl) {

      ((XSSimpleTypeDecl)decl).setNamespaceItem(this);

    }

  }

}

Location: SchemaGrammar.java

Content: 

/** 

 * register one identity constraint

 */

public final void addIDConstraintDecl(XSElementDecl elmDecl,IdentityConstraint decl){

  elmDecl.addIDConstraint(decl);

  fGlobalIDConstraintDecls.put(decl.getIdentityConstraintName(),decl);

}

Location: SchemaGrammar.java

Content: 

public final void addIDConstraintDecl(XSElementDecl elmDecl,IdentityConstraint decl,String location){

  fGlobalIDConstraintDeclsExt.put(((location != null) ? location : "") + "," + decl.getIdentityConstraintName(),decl);

}

Location: SchemaGrammar.java

Content: 

/** 

 * add a group redefined by restriction: for later constraint checking

 */

public void addRedefinedGroupDecl(XSGroupDecl derived,XSGroupDecl base,SimpleLocator locator){

  if (fRGCount == fRedefinedGroupDecls.length) {

    fRedefinedGroupDecls=resize(fRedefinedGroupDecls,fRGCount << 1);

    fRGLocators=resize(fRGLocators,fRGCount);

  }

  fRGLocators[fRGCount / 2]=locator;

  fRedefinedGroupDecls[fRGCount++]=derived;

  fRedefinedGroupDecls[fRGCount++]=base;

}

Location: SchemaGrammar.java

Content: 

public synchronized ObjectList getComponentsExt(short objectType){

  if (objectType <= 0 || objectType > MAX_COMP_IDX || !GLOBAL_COMP[objectType]) {

    return ObjectListImpl.EMPTY_LIST;

  }

  if (fComponentsExt == null)   fComponentsExt=new ObjectList[MAX_COMP_IDX + 1];

  if (fComponentsExt[objectType] == null) {

    SymbolHash table=null;

switch (objectType) {

case XSConstants.TYPE_DEFINITION:

case XSTypeDefinition.COMPLEX_TYPE:

case XSTypeDefinition.SIMPLE_TYPE:

      table=fGlobalTypeDeclsExt;

    break;

case XSConstants.ATTRIBUTE_DECLARATION:

  table=fGlobalAttrDeclsExt;

break;

case XSConstants.ELEMENT_DECLARATION:

table=fGlobalElemDeclsExt;

break;

case XSConstants.ATTRIBUTE_GROUP:

table=fGlobalAttrGrpDeclsExt;

break;

case XSConstants.MODEL_GROUP_DEFINITION:

table=fGlobalGroupDeclsExt;

break;

case XSConstants.NOTATION_DECLARATION:

table=fGlobalNotationDeclsExt;

break;

case XSConstants.IDENTITY_CONSTRAINT:

table=this.fGlobalIDConstraintDeclsExt;

break;

}

Object[] entries=table.getEntries();

fComponentsExt[objectType]=new ObjectListImpl(entries,entries.length);

}

return fComponentsExt[objectType];

}

Location: SchemaGrammar.java

Content: 

public final XSAttributeDecl getGlobalAttributeDecl(String declName,String location){

  return (XSAttributeDecl)fGlobalAttrDeclsExt.get(((location != null) ? location : "") + "," + declName);

}

Location: SchemaGrammar.java

Content: 

public final XSAttributeGroupDecl getGlobalAttributeGroupDecl(String declName,String location){

  return (XSAttributeGroupDecl)fGlobalAttrGrpDeclsExt.get(((location != null) ? location : "") + "," + declName);

}

Location: SchemaGrammar.java

Content: 

public final XSElementDecl getGlobalElementDecl(String declName,String location){

  return (XSElementDecl)fGlobalElemDeclsExt.get(((location != null) ? location : "") + "," + declName);

}

Location: SchemaGrammar.java

Content: 

public final XSGroupDecl getGlobalGroupDecl(String declName,String location){

  return (XSGroupDecl)fGlobalGroupDeclsExt.get(((location != null) ? location : "") + "," + declName);

}

Location: SchemaGrammar.java

Content: 

public final XSNotationDecl getGlobalNotationDecl(String declName,String location){

  return (XSNotationDecl)fGlobalNotationDeclsExt.get(((location != null) ? location : "") + "," + declName);

}

Location: SchemaGrammar.java

Content: 

public final XSTypeDefinition getGlobalTypeDecl(String declName,String location){

  return (XSTypeDefinition)fGlobalTypeDeclsExt.get(((location != null) ? location : "") + "," + declName);

}

Location: SchemaGrammar.java

Content: 

public final IdentityConstraint getIDConstraintDecl(String declName,String location){

  return (IdentityConstraint)fGlobalIDConstraintDeclsExt.get(((location != null) ? location : "") + "," + declName);

}

Location: SchemaGrammar.java

Content: 

public Vector getImportedGrammars(){

  return fImported;

}

Location: SchemaGrammar.java

Content: 

/** 

 * get all redefined groups: for later constraint checking

 */

final XSGroupDecl[] getRedefinedGroupDecls(){

  if (fRGCount < fRedefinedGroupDecls.length) {

    fRedefinedGroupDecls=resize(fRedefinedGroupDecls,fRGCount);

    fRGLocators=resize(fRGLocators,fRGCount / 2);

  }

  return fRedefinedGroupDecls;

}

Location: SchemaGrammar.java

Content: 

/** 

 * get the error locator of all redefined groups

 */

final SimpleLocator[] getRGLocators(){

  if (fRGCount < fRedefinedGroupDecls.length) {

    fRedefinedGroupDecls=resize(fRedefinedGroupDecls,fRGCount);

    fRGLocators=resize(fRGLocators,fRGCount / 2);

  }

  return fRGLocators;

}

Location: SchemaGrammar.java

Content: 

public static SchemaGrammar getS4SGrammar(short schemaVersion){

  if (schemaVersion == Constants.SCHEMA_VERSION_1_0) {

    return SG_SchemaNS;

  }

 else {

    return SG_SchemaNSExtended;

  }

}

Location: SchemaGrammar.java

Content: 

synchronized SAXParser getSAXParser(){

  if (fSAXParser != null) {

    SAXParser parser=(SAXParser)fSAXParser.get();

    if (parser != null) {

      return parser;

    }

  }

  XML11Configuration config=new XML11Configuration(fSymbolTable);

  config.setFeature(Constants.SAX_FEATURE_PREFIX + Constants.NAMESPACES_FEATURE,true);

  config.setFeature(Constants.SAX_FEATURE_PREFIX + Constants.VALIDATION_FEATURE,false);

  SAXParser parser=new SAXParser(config);

  fSAXParser=new SoftReference(parser);

  return parser;

}

Location: SchemaGrammar.java

Content: 

/** 

 * get all substitution group information: for the 3 constraint checking

 */

final XSElementDecl[] getSubstitutionGroups(){

  if (fSubGroupCount < fSubGroups.length)   fSubGroups=resize(fSubGroups,fSubGroupCount);

  return fSubGroups;

}

Location: SchemaGrammar.java

Content: 

/** 

 * get all complex type decls: for later constraint checking

 */

final XSComplexTypeDecl[] getUncheckedComplexTypeDecls(){

  if (fCTCount < fComplexTypeDecls.length) {

    fComplexTypeDecls=resize(fComplexTypeDecls,fCTCount);

    fCTLocators=resize(fCTLocators,fCTCount);

  }

  return fComplexTypeDecls;

}

Location: SchemaGrammar.java

Content: 

/** 

 * get the error locator of all complex type decls

 */

final SimpleLocator[] getUncheckedCTLocators(){

  if (fCTCount < fCTLocators.length) {

    fComplexTypeDecls=resize(fComplexTypeDecls,fCTCount);

    fCTLocators=resize(fCTLocators,fCTCount);

  }

  return fCTLocators;

}

Location: SchemaGrammar.java

Content: 

public boolean isImmutable(){

  return fIsImmutable;

}

Location: SchemaGrammar.java

Content: 

public synchronized void removeDocument(int index){

  if (fDocuments != null && index >= 0 && index < fDocuments.size()) {

    fDocuments.removeElementAt(index);

    fLocations.removeElementAt(index);

  }

}

Location: SchemaGrammar.java

Content: 

static final SimpleLocator[] resize(SimpleLocator[] oldArray,int newSize){

  SimpleLocator[] newArray=new SimpleLocator[newSize];

  System.arraycopy(oldArray,0,newArray,0,Math.min(oldArray.length,newSize));

  return newArray;

}

Location: SchemaGrammar.java

Content: 

static final XSComplexTypeDecl[] resize(XSComplexTypeDecl[] oldArray,int newSize){

  XSComplexTypeDecl[] newArray=new XSComplexTypeDecl[newSize];

  System.arraycopy(oldArray,0,newArray,0,Math.min(oldArray.length,newSize));

  return newArray;

}

Location: SchemaGrammar.java

Content: 

static final XSElementDecl[] resize(XSElementDecl[] oldArray,int newSize){

  XSElementDecl[] newArray=new XSElementDecl[newSize];

  System.arraycopy(oldArray,0,newArray,0,Math.min(oldArray.length,newSize));

  return newArray;

}

Location: SchemaGrammar.java

Content: 

static final XSGroupDecl[] resize(XSGroupDecl[] oldArray,int newSize){

  XSGroupDecl[] newArray=new XSGroupDecl[newSize];

  System.arraycopy(oldArray,0,newArray,0,Math.min(oldArray.length,newSize));

  return newArray;

}

Location: SchemaGrammar.java

Content: 

protected SchemaGrammar(){

}

Location: SchemaGrammar.java

Content: 

public SchemaGrammar(SchemaGrammar grammar){

  fTargetNamespace=grammar.fTargetNamespace;

  fGrammarDescription=grammar.fGrammarDescription.makeClone();

  fSymbolTable=grammar.fSymbolTable;

  fGlobalAttrDecls=grammar.fGlobalAttrDecls.makeClone();

  fGlobalAttrGrpDecls=grammar.fGlobalAttrGrpDecls.makeClone();

  fGlobalElemDecls=grammar.fGlobalElemDecls.makeClone();

  fGlobalGroupDecls=grammar.fGlobalGroupDecls.makeClone();

  fGlobalNotationDecls=grammar.fGlobalNotationDecls.makeClone();

  fGlobalIDConstraintDecls=grammar.fGlobalIDConstraintDecls.makeClone();

  fGlobalTypeDecls=grammar.fGlobalTypeDecls.makeClone();

  fGlobalAttrDeclsExt=grammar.fGlobalAttrDeclsExt.makeClone();

  fGlobalAttrGrpDeclsExt=grammar.fGlobalAttrGrpDeclsExt.makeClone();

  fGlobalElemDeclsExt=grammar.fGlobalElemDeclsExt.makeClone();

  fGlobalGroupDeclsExt=grammar.fGlobalGroupDeclsExt.makeClone();

  fGlobalNotationDeclsExt=grammar.fGlobalNotationDeclsExt.makeClone();

  fGlobalIDConstraintDeclsExt=grammar.fGlobalIDConstraintDeclsExt.makeClone();

  fGlobalTypeDeclsExt=grammar.fGlobalTypeDeclsExt.makeClone();

  fAllGlobalElemDecls=grammar.fAllGlobalElemDecls.makeClone();

  fNumAnnotations=grammar.fNumAnnotations;

  if (fNumAnnotations > 0) {

    fAnnotations=new XSAnnotationImpl[grammar.fAnnotations.length];

    System.arraycopy(grammar.fAnnotations,0,fAnnotations,0,fNumAnnotations);

  }

  fSubGroupCount=grammar.fSubGroupCount;

  if (fSubGroupCount > 0) {

    fSubGroups=new XSElementDecl[grammar.fSubGroups.length];

    System.arraycopy(grammar.fSubGroups,0,fSubGroups,0,fSubGroupCount);

  }

  fCTCount=grammar.fCTCount;

  if (fCTCount > 0) {

    fComplexTypeDecls=new XSComplexTypeDecl[grammar.fComplexTypeDecls.length];

    fCTLocators=new SimpleLocator[grammar.fCTLocators.length];

    System.arraycopy(grammar.fComplexTypeDecls,0,fComplexTypeDecls,0,fCTCount);

    System.arraycopy(grammar.fCTLocators,0,fCTLocators,0,fCTCount);

  }

  fRGCount=grammar.fRGCount;

  if (fRGCount > 0) {

    fRedefinedGroupDecls=new XSGroupDecl[grammar.fRedefinedGroupDecls.length];

    fRGLocators=new SimpleLocator[grammar.fRGLocators.length];

    System.arraycopy(grammar.fRedefinedGroupDecls,0,fRedefinedGroupDecls,0,fRGCount);

    System.arraycopy(grammar.fRGLocators,0,fRGLocators,0,fRGCount / 2);

  }

  if (grammar.fImported != null) {

    fImported=new Vector();

    for (int i=0; i < grammar.fImported.size(); i++) {

      fImported.add(grammar.fImported.elementAt(i));

    }

  }

  if (grammar.fLocations != null) {

    for (int k=0; k < grammar.fLocations.size(); k++) {

      addDocument(null,(String)grammar.fLocations.elementAt(k));

    }

  }

}

Location: SchemaGrammar.java

Content: 

/** 

 * Default constructor.

 * @param targetNamespace

 * @param grammarDesc the XMLGrammarDescription corresponding to this objecat the least a systemId should always be known.

 * @param symbolTable   needed for annotation support

 */

public SchemaGrammar(String targetNamespace,XSDDescription grammarDesc,SymbolTable symbolTable){

  fTargetNamespace=targetNamespace;

  fGrammarDescription=grammarDesc;

  fSymbolTable=symbolTable;

  fGlobalAttrDecls=new SymbolHash(12);

  fGlobalAttrGrpDecls=new SymbolHash(5);

  fGlobalElemDecls=new SymbolHash(25);

  fGlobalGroupDecls=new SymbolHash(5);

  fGlobalNotationDecls=new SymbolHash(1);

  fGlobalIDConstraintDecls=new SymbolHash(3);

  fGlobalAttrDeclsExt=new SymbolHash(12);

  fGlobalAttrGrpDeclsExt=new SymbolHash(5);

  fGlobalElemDeclsExt=new SymbolHash(25);

  fGlobalGroupDeclsExt=new SymbolHash(5);

  fGlobalNotationDeclsExt=new SymbolHash(1);

  fGlobalIDConstraintDeclsExt=new SymbolHash(3);

  fGlobalTypeDeclsExt=new SymbolHash(25);

  fAllGlobalElemDecls=new SymbolHash(25);

  if (fTargetNamespace == SchemaSymbols.URI_SCHEMAFORSCHEMA) {

    fGlobalTypeDecls=SG_SchemaNS.fGlobalTypeDecls.makeClone();

  }

 else {

    fGlobalTypeDecls=new SymbolHash(25);

  }

}

Location: SchemaGrammar.java

Content: 

public void setImmutable(boolean isImmutable){

  fIsImmutable=isImmutable;

}

Location: SchemaGrammar.java

Content: 

public void setImportedGrammars(Vector importedGrammars){

  fImported=importedGrammars;

}

Location: SchemaGrammar.java

Content: 

/** 

 * after the first-round checking, some types don't need to be checked against UPA again. here we trim the array to the proper size.

 */

final void setUncheckedTypeNum(int newSize){

  fCTCount=newSize;

  fComplexTypeDecls=resize(fComplexTypeDecls,fCTCount);

  fCTLocators=resize(fCTLocators,fCTCount);

}

