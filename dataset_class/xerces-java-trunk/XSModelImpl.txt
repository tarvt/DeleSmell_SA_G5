Location: XSModelImpl.java

Content: 

private SymbolHash buildSubGroups(){

  SubstitutionGroupHandler sgHandler=new SubstitutionGroupHandler(null);

  for (int i=0; i < fGrammarCount; i++) {

    sgHandler.addSubstitutionGroup(fGrammarList[i].getSubstitutionGroups());

  }

  final XSObjectListImpl elements=getGlobalElements();

  final int len=elements.getLength();

  final SymbolHash subGroupMap=new SymbolHash(len * 2);

  XSElementDecl head;

  XSElementDeclaration[] subGroup;

  for (int i=0; i < len; i++) {

    head=(XSElementDecl)elements.item(i);

    subGroup=sgHandler.getSubstitutionGroup(head);

    subGroupMap.put(head,subGroup.length > 0 ? new XSObjectListImpl(subGroup,subGroup.length) : XSObjectListImpl.EMPTY_LIST);

  }

  return subGroupMap;

}

Location: XSModelImpl.java

Content: 

private SymbolHash buildSubGroups_Org(){

  SubstitutionGroupHandler sgHandler=new SubstitutionGroupHandler(null);

  for (int i=0; i < fGrammarCount; i++) {

    sgHandler.addSubstitutionGroup(fGrammarList[i].getSubstitutionGroups());

  }

  final XSNamedMap elements=getComponents(XSConstants.ELEMENT_DECLARATION);

  final int len=elements.getLength();

  final SymbolHash subGroupMap=new SymbolHash(len * 2);

  XSElementDecl head;

  XSElementDeclaration[] subGroup;

  for (int i=0; i < len; i++) {

    head=(XSElementDecl)elements.item(i);

    subGroup=sgHandler.getSubstitutionGroup(head);

    subGroupMap.put(head,subGroup.length > 0 ? new XSObjectListImpl(subGroup,subGroup.length) : XSObjectListImpl.EMPTY_LIST);

  }

  return subGroupMap;

}

Location: XSModelImpl.java

Content: 

/** 

 * Convenience method. Returns a top-level attribute declaration.

 * @param name The name of the declaration.

 * @param namespace The namespace of the definition, otherwise null.

 * @param loc The schema location where the component was defined

 * @return A top-level attribute declaration or null if such declarationdoes not exist.

 */

public XSAttributeDeclaration getAttributeDeclaration(String name,String namespace,String loc){

  SchemaGrammar sg=(SchemaGrammar)fGrammarMap.get(null2EmptyString(namespace));

  if (sg == null) {

    return null;

  }

  return sg.getGlobalAttributeDecl(name,loc);

}

Location: XSModelImpl.java

Content: 

/** 

 * Convenience method. Returns a top-level attribute group definition.

 * @param name The name of the definition.

 * @param namespace The namespace of the definition, otherwise null.

 * @param loc The schema location where the component was defined

 * @return A top-level attribute group definition or null if suchdefinition does not exist.

 */

public XSAttributeGroupDefinition getAttributeGroup(String name,String namespace,String loc){

  SchemaGrammar sg=(SchemaGrammar)fGrammarMap.get(null2EmptyString(namespace));

  if (sg == null) {

    return null;

  }

  return sg.getGlobalAttributeGroupDecl(name,loc);

}

Location: XSModelImpl.java

Content: 

/** 

 * Convenience method. Returns a top-level element declaration.

 * @param name The name of the declaration.

 * @param namespace The namespace of the definition, otherwise null.

 * @param loc The schema location where the component was defined

 * @return A top-level element declaration or null if such declarationdoes not exist.

 */

public XSElementDeclaration getElementDeclaration(String name,String namespace,String loc){

  SchemaGrammar sg=(SchemaGrammar)fGrammarMap.get(null2EmptyString(namespace));

  if (sg == null) {

    return null;

  }

  return sg.getGlobalElementDecl(name,loc);

}

Location: XSModelImpl.java

Content: 

private XSObjectListImpl getGlobalElements(){

  final SymbolHash[] tables=new SymbolHash[fGrammarCount];

  int length=0;

  for (int i=0; i < fGrammarCount; i++) {

    tables[i]=fGrammarList[i].fAllGlobalElemDecls;

    length+=tables[i].getLength();

  }

  if (length == 0) {

    return XSObjectListImpl.EMPTY_LIST;

  }

  final XSObject[] components=new XSObject[length];

  int start=0;

  for (int i=0; i < fGrammarCount; i++) {

    tables[i].getValues(components,start);

    start+=tables[i].getLength();

  }

  return new XSObjectListImpl(components,length);

}

Location: XSModelImpl.java

Content: 

/** 

 * Convenience method. Returns a top-level model group definition.

 * @param name      The name of the definition.

 * @param namespace The namespace of the definition, otherwise null.

 * @param loc The schema location where the component was defined

 * @return A top-level model group definition definition or null if suchdefinition does not exist.

 */

public XSIDCDefinition getIDCDefinition(String name,String namespace,String loc){

  SchemaGrammar sg=(SchemaGrammar)fGrammarMap.get(null2EmptyString(namespace));

  if (sg == null) {

    return null;

  }

  return sg.getIDConstraintDecl(name,loc);

}

Location: XSModelImpl.java

Content: 

/** 

 * Convenience method. Returns a top-level model group definition.

 * @param name      The name of the definition.

 * @param namespace The namespace of the definition, otherwise null.

 * @param loc The schema location where the component was defined

 * @return A top-level model group definition definition or null if suchdefinition does not exist.

 */

public XSModelGroupDefinition getModelGroupDefinition(String name,String namespace,String loc){

  SchemaGrammar sg=(SchemaGrammar)fGrammarMap.get(null2EmptyString(namespace));

  if (sg == null) {

    return null;

  }

  return sg.getGlobalGroupDecl(name,loc);

}

Location: XSModelImpl.java

Content: 

public XSNotationDeclaration getNotationDeclaration(String name,String namespace,String loc){

  SchemaGrammar sg=(SchemaGrammar)fGrammarMap.get(null2EmptyString(namespace));

  if (sg == null) {

    return null;

  }

  return sg.getGlobalNotationDecl(name,loc);

}

Location: XSModelImpl.java

Content: 

/** 

 * Convenience method. Returns a top-level simple or complex type definition.

 * @param name The name of the definition.

 * @param namespace The namespace of the definition, otherwise null.

 * @param loc The schema location where the component was defined

 * @return An <code>XSTypeDefinition</code> or null if such definitiondoes not exist.

 */

public XSTypeDefinition getTypeDefinition(String name,String namespace,String loc){

  SchemaGrammar sg=(SchemaGrammar)fGrammarMap.get(null2EmptyString(namespace));

  if (sg == null) {

    return null;

  }

  return sg.getGlobalTypeDecl(name,loc);

}

Location: XSModelImpl.java

Content: 

/** 

 * REVISIT: to expose identity constraints from XSModel. For now, we only expose whether there are any IDCs. We also need to add these methods to the public XSModel interface.

 */

public boolean hasIDConstraints(){

  return fHasIDC;

}

Location: XSModelImpl.java

Content: 

/** 

 * Construct an XSModelImpl, by storing some grammars and grammars imported by them to this object.

 * @param grammars   the array of schema grammars

 */

public XSModelImpl(SchemaGrammar[] grammars){

  this(grammars,Constants.SCHEMA_VERSION_1_0);

}

Location: XSModelImpl.java

Content: 

public XSModelImpl(SchemaGrammar[] grammars,short s4sVersion){

  int len=grammars.length;

  final int initialSize=Math.max(len + 1,5);

  String[] namespaces=new String[initialSize];

  SchemaGrammar[] grammarList=new SchemaGrammar[initialSize];

  boolean hasS4S=false;

  for (int i=0; i < len; i++) {

    final SchemaGrammar sg=grammars[i];

    final String tns=sg.getTargetNamespace();

    namespaces[i]=tns;

    grammarList[i]=sg;

    if (tns == SchemaSymbols.URI_SCHEMAFORSCHEMA) {

      hasS4S=true;

    }

  }

  if (!hasS4S) {

    namespaces[len]=SchemaSymbols.URI_SCHEMAFORSCHEMA;

    grammarList[len++]=SchemaGrammar.getS4SGrammar(s4sVersion);

  }

  SchemaGrammar sg1, sg2;

  Vector gs;

  int i, j, k;

  for (i=0; i < len; i++) {

    sg1=grammarList[i];

    gs=sg1.getImportedGrammars();

    for (j=gs == null ? -1 : gs.size() - 1; j >= 0; j--) {

      sg2=(SchemaGrammar)gs.elementAt(j);

      for (k=0; k < len; k++) {

        if (sg2 == grammarList[k]) {

          break;

        }

      }

      if (k == len) {

        if (len == grammarList.length) {

          String[] newSA=new String[len * 2];

          System.arraycopy(namespaces,0,newSA,0,len);

          namespaces=newSA;

          SchemaGrammar[] newGA=new SchemaGrammar[len * 2];

          System.arraycopy(grammarList,0,newGA,0,len);

          grammarList=newGA;

        }

        namespaces[len]=sg2.getTargetNamespace();

        grammarList[len]=sg2;

        len++;

      }

    }

  }

  fNamespaces=namespaces;

  fGrammarList=grammarList;

  boolean hasIDC=false;

  fGrammarMap=new SymbolHash(len * 2);

  for (i=0; i < len; i++) {

    fGrammarMap.put(null2EmptyString(fNamespaces[i]),fGrammarList[i]);

    if (fGrammarList[i].hasIDConstraints()) {

      hasIDC=true;

    }

  }

  fHasIDC=hasIDC;

  fGrammarCount=len;

  fGlobalComponents=new XSNamedMap[MAX_COMP_IDX + 1];

  fNSComponents=new XSNamedMap[len][MAX_COMP_IDX + 1];

  fNamespacesList=new StringListImpl(fNamespaces,fGrammarCount);

  fSubGroupMap=buildSubGroups();

}

