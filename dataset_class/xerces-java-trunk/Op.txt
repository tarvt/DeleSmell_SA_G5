Location: Op.java

Content: 

static CharOp createCapture(int number,Op next){

  if (Op.COUNT)   Op.nofinstances++;

  CharOp op=new CharOp(Op.CAPTURE,number);

  op.next=next;

  return op;

}

Location: Op.java

Content: 

static ChildOp createClosure(int id){

  if (Op.COUNT)   Op.nofinstances++;

  return new ModifierOp(Op.CLOSURE,id,-1);

}

Location: Op.java

Content: 

static ConditionOp createCondition(Op next,int ref,Op conditionflow,Op yesflow,Op noflow){

  if (Op.COUNT)   Op.nofinstances++;

  ConditionOp op=new ConditionOp(Op.CONDITION,ref,conditionflow,yesflow,noflow);

  op.next=next;

  return op;

}

Location: Op.java

Content: 

static Op createDot(){

  if (Op.COUNT)   Op.nofinstances++;

  return new Op(Op.DOT);

}

Location: Op.java

Content: 

static ChildOp createIndependent(Op next,Op branch){

  if (Op.COUNT)   Op.nofinstances++;

  ChildOp op=new ChildOp(Op.INDEPENDENT);

  op.setChild(branch);

  op.next=next;

  return op;

}

Location: Op.java

Content: 

static ChildOp createLook(int type,Op next,Op branch){

  if (Op.COUNT)   Op.nofinstances++;

  ChildOp op=new ChildOp(type);

  op.setChild(branch);

  op.next=next;

  return op;

}

Location: Op.java

Content: 

static ModifierOp createModifier(Op next,Op branch,int add,int mask){

  if (Op.COUNT)   Op.nofinstances++;

  ModifierOp op=new ModifierOp(Op.MODIFIER,add,mask);

  op.setChild(branch);

  op.next=next;

  return op;

}

Location: Op.java

Content: 

static ChildOp createNonGreedyClosure(){

  if (Op.COUNT)   Op.nofinstances++;

  return new ChildOp(Op.NONGREEDYCLOSURE);

}

Location: Op.java

Content: 

static ChildOp createQuestion(boolean nongreedy){

  if (Op.COUNT)   Op.nofinstances++;

  return new ChildOp(nongreedy ? Op.NONGREEDYQUESTION : Op.QUESTION);

}

Location: Op.java

Content: 

static RangeOp createRange(Token tok){

  if (Op.COUNT)   Op.nofinstances++;

  return new RangeOp(Op.RANGE,tok);

}

Location: Op.java

Content: 

static UnionOp createUnion(int size){

  if (Op.COUNT)   Op.nofinstances++;

  return new UnionOp(Op.UNION,size);

}

Location: Op.java

Content: 

int getData2(){

  throw new RuntimeException("Internal Error: type=" + this.type);

}

Location: Op.java

Content: 

RangeToken getToken(){

  throw new RuntimeException("Internal Error: type=" + this.type);

}

Location: Op.java

Content: 

protected Op(int type){

  this.type=type;

}

