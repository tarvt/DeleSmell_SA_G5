Location: XPathMatcher.java

Content: 

/** 

 * @param element name of the element.

 * @param type content type of this element. IOW, the XML schema type of the <tt>value</tt>. Note that this may not be the type declared in the element declaration, but it is "the actual type". For example, if the XML is &lt;foo xsi:type="xs:string">aaa&lt;/foo>, this parameter will be "xs:string".

 * @param nillable - nillabletrue if the element declaration is nillable.

 * @param value - actual valuethe typed value of the content of this element. 

 */

public void endElement(QName element,XSTypeDefinition type,boolean nillable,Object value,short valueType,ShortList itemValueType){

  if (DEBUG_METHODS2) {

    System.out.println(toString() + "#endElement(" + "element={"+ element+ "},"+ ")");

  }

  for (int i=0; i < fLocationPaths.length; i++) {

    fCurrentStep[i]=fStepIndexes[i].pop();

    if (fNoMatchDepth[i] > 0) {

      fNoMatchDepth[i]--;

    }

 else {

      int j=0;

      for (; j < i && ((fMatched[j] & MATCHED) != MATCHED); j++)       ;

      if ((j < i) || (fMatched[j] == 0)) {

        continue;

      }

      if ((fMatched[j] & MATCHED_ATTRIBUTE) == MATCHED_ATTRIBUTE) {

        fMatched[i]=0;

        continue;

      }

      handleContent(type,nillable,value,valueType,itemValueType);

      fMatched[i]=0;

    }

    if (DEBUG_STACK) {

      System.out.println(toString() + ": " + fStepIndexes[i]);

    }

  }

}

Location: XPathMatcher.java

Content: 

protected void handleContent(XSTypeDefinition type,boolean nillable,Object value,short valueType,ShortList itemValueType){

}

Location: XPathMatcher.java

Content: 

/** 

 * Returns value of first member of fMatched that is nonzero.  

 */

public boolean isMatched(){

  for (int i=0; i < fLocationPaths.length; i++)   if (((fMatched[i] & MATCHED) == MATCHED) && ((fMatched[i] & MATCHED_DESCENDANT_PREVIOUS) != MATCHED_DESCENDANT_PREVIOUS) && ((fNoMatchDepth[i] == 0) || ((fMatched[i] & MATCHED_DESCENDANT) == MATCHED_DESCENDANT)))   return true;

  return false;

}

Location: XPathMatcher.java

Content: 

/** 

 * This method is called when the XPath handler matches the XPath expression. Subclasses can override this method to provide default handling upon a match.

 */

protected void matched(Object actualValue,short valueType,ShortList itemValueType,boolean isNil){

  if (DEBUG_METHODS3) {

    System.out.println(toString() + "#matched(\"" + actualValue+ "\")");

  }

}

Location: XPathMatcher.java

Content: 

/** 

 * Returns true if the given QName matches the node test. 

 */

private static boolean matches(XPath.NodeTest nodeTest,QName value){

  if (nodeTest.type == XPath.NodeTest.QNAME) {

    return nodeTest.name.equals(value);

  }

  if (nodeTest.type == XPath.NodeTest.NAMESPACE) {

    return nodeTest.name.uri == value.uri;

  }

  return true;

}

Location: XPathMatcher.java

Content: 

/** 

 * The start of the document fragment.

 */

public void startDocumentFragment(){

  if (DEBUG_METHODS) {

    System.out.println(toString() + "#startDocumentFragment(" + ")");

  }

  fMatchedString=null;

  for (int i=0; i < fLocationPaths.length; i++) {

    fStepIndexes[i].clear();

    fCurrentStep[i]=0;

    fNoMatchDepth[i]=0;

    fMatched[i]=0;

  }

}

Location: XPathMatcher.java

Content: 

/** 

 * The start of an element. If the document specifies the start element by using an empty tag, then the startElement method will immediately be followed by the endElement method, with no intervening methods.

 * @param element    The name of the element.

 * @param attributes The element attributes.

 * @throws SAXException Thrown by handler to signal an error.

 */

public void startElement(QName element,XMLAttributes attributes){

  if (DEBUG_METHODS2) {

    System.out.println(toString() + "#startElement(" + "element={"+ element+ "},"+ "attributes=..."+ attributes+ ")");

  }

  for (int i=0; i < fLocationPaths.length; i++) {

    int startStep=fCurrentStep[i];

    fStepIndexes[i].push(startStep);

    if ((fMatched[i] & MATCHED_DESCENDANT) == MATCHED || fNoMatchDepth[i] > 0) {

      fNoMatchDepth[i]++;

      continue;

    }

    if ((fMatched[i] & MATCHED_DESCENDANT) == MATCHED_DESCENDANT) {

      fMatched[i]=MATCHED_DESCENDANT_PREVIOUS;

    }

    if (DEBUG_STACK) {

      System.out.println(toString() + ": " + fStepIndexes[i]);

    }

    XPath.Step[] steps=fLocationPaths[i].steps;

    while (fCurrentStep[i] < steps.length && steps[fCurrentStep[i]].axis.type == XPath.Axis.SELF) {

      if (DEBUG_MATCH) {

        XPath.Step step=steps[fCurrentStep[i]];

        System.out.println(toString() + " [SELF] MATCHED!");

      }

      fCurrentStep[i]++;

    }

    if (fCurrentStep[i] == steps.length) {

      if (DEBUG_MATCH) {

        System.out.println(toString() + " XPath MATCHED!");

      }

      fMatched[i]=MATCHED;

      continue;

    }

    int descendantStep=fCurrentStep[i];

    while (fCurrentStep[i] < steps.length && steps[fCurrentStep[i]].axis.type == XPath.Axis.DESCENDANT) {

      if (DEBUG_MATCH) {

        XPath.Step step=steps[fCurrentStep[i]];

        System.out.println(toString() + " [DESCENDANT] MATCHED!");

      }

      fCurrentStep[i]++;

    }

    boolean sawDescendant=fCurrentStep[i] > descendantStep;

    if (fCurrentStep[i] == steps.length) {

      if (DEBUG_MATCH) {

        System.out.println(toString() + " XPath DIDN'T MATCH!");

      }

      fNoMatchDepth[i]++;

      if (DEBUG_MATCH) {

        System.out.println(toString() + " [CHILD] after NO MATCH");

      }

      continue;

    }

    if ((fCurrentStep[i] == startStep || fCurrentStep[i] > descendantStep) && steps[fCurrentStep[i]].axis.type == XPath.Axis.CHILD) {

      XPath.Step step=steps[fCurrentStep[i]];

      XPath.NodeTest nodeTest=step.nodeTest;

      if (DEBUG_MATCH) {

        System.out.println(toString() + " [CHILD] before");

      }

      if (!matches(nodeTest,element)) {

        if (fCurrentStep[i] > descendantStep) {

          fCurrentStep[i]=descendantStep;

          continue;

        }

        fNoMatchDepth[i]++;

        if (DEBUG_MATCH) {

          System.out.println(toString() + " [CHILD] after NO MATCH");

        }

        continue;

      }

      fCurrentStep[i]++;

      if (DEBUG_MATCH) {

        System.out.println(toString() + " [CHILD] after MATCHED!");

      }

    }

    if (fCurrentStep[i] == steps.length) {

      if (sawDescendant) {

        fCurrentStep[i]=descendantStep;

        fMatched[i]=MATCHED_DESCENDANT;

      }

 else {

        fMatched[i]=MATCHED;

      }

      continue;

    }

    if (fCurrentStep[i] < steps.length && steps[fCurrentStep[i]].axis.type == XPath.Axis.ATTRIBUTE) {

      if (DEBUG_MATCH) {

        System.out.println(toString() + " [ATTRIBUTE] before");

      }

      int attrCount=attributes.getLength();

      if (attrCount > 0) {

        XPath.NodeTest nodeTest=steps[fCurrentStep[i]].nodeTest;

        for (int aIndex=0; aIndex < attrCount; aIndex++) {

          attributes.getName(aIndex,fQName);

          if (matches(nodeTest,fQName)) {

            fCurrentStep[i]++;

            if (fCurrentStep[i] == steps.length) {

              fMatched[i]=MATCHED_ATTRIBUTE;

              int j=0;

              for (; j < i && ((fMatched[j] & MATCHED) != MATCHED); j++)               ;

              if (j == i) {

                AttributePSVI attrPSVI=(AttributePSVI)attributes.getAugmentations(aIndex).getItem(Constants.ATTRIBUTE_PSVI);

                fMatchedString=attrPSVI.getActualNormalizedValue();

                matched(fMatchedString,attrPSVI.getActualNormalizedValueType(),attrPSVI.getItemValueTypes(),false);

              }

            }

            break;

          }

        }

      }

      if ((fMatched[i] & MATCHED) != MATCHED) {

        if (fCurrentStep[i] > descendantStep) {

          fCurrentStep[i]=descendantStep;

          continue;

        }

        fNoMatchDepth[i]++;

        if (DEBUG_MATCH) {

          System.out.println(toString() + " [ATTRIBUTE] after");

        }

        continue;

      }

      if (DEBUG_MATCH) {

        System.out.println(toString() + " [ATTRIBUTE] after MATCHED!");

      }

    }

  }

}

Location: XPathMatcher.java

Content: 

/** 

 * Constructs an XPath matcher that implements a document fragment handler.

 * @param xpath   The xpath.

 */

public XPathMatcher(XPath xpath){

  fLocationPaths=xpath.getLocationPaths();

  fStepIndexes=new IntStack[fLocationPaths.length];

  for (int i=0; i < fStepIndexes.length; i++)   fStepIndexes[i]=new IntStack();

  fCurrentStep=new int[fLocationPaths.length];

  fNoMatchDepth=new int[fLocationPaths.length];

  fMatched=new int[fLocationPaths.length];

}

