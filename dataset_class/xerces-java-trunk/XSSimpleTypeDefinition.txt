Location: XSSimpleTypeDefinition.java

Content: 

/** 

 * Fundamental Facet: bounded. 

 */

public boolean getBounded();

Location: XSSimpleTypeDefinition.java

Content: 

/** 

 * Returns the closest built-in type category this type represents or  derived from. For example, if this simple type is a built-in derived  type integer the <code>INTEGER_DV</code> is returned.

 */

public short getBuiltInKind();

Location: XSSimpleTypeDefinition.java

Content: 

/** 

 * [facets]: all facets defined on this type. The value is a bit  combination of FACET_XXX constants of all defined facets. 

 */

public short getDefinedFacets();

Location: XSSimpleTypeDefinition.java

Content: 

/** 

 * A list of constraining facets if it exists, otherwise an empty  <code>XSObjectList</code>. Note: This method must not be used to  retrieve values for <code>enumeration</code> and <code>pattern</code>  facets. 

 */

public XSObjectList getFacets();

Location: XSSimpleTypeDefinition.java

Content: 

/** 

 * A constraining facet object. An instance of XSFacet or XSMultiValueFacet.

 */

public XSObject getFacet(int facetType);

Location: XSSimpleTypeDefinition.java

Content: 

/** 

 * Fundamental Facet: cardinality. 

 */

public boolean getFinite();

Location: XSSimpleTypeDefinition.java

Content: 

/** 

 * [facets]: all defined facets for this type which are fixed.

 */

public short getFixedFacets();

Location: XSSimpleTypeDefinition.java

Content: 

/** 

 * If variety is <code>list</code> the item type definition (an atomic or  union simple type definition) is available, otherwise  <code>null</code>. 

 */

public XSSimpleTypeDefinition getItemType();

Location: XSSimpleTypeDefinition.java

Content: 

/** 

 * A list of enumeration values if it exists, otherwise an empty  <code>StringList</code>. 

 */

public StringList getLexicalEnumeration();

Location: XSSimpleTypeDefinition.java

Content: 

/** 

 * Convenience method. Returns a value of a single constraining facet for  this simple type definition. This method must not be used to retrieve  values for <code>enumeration</code> and <code>pattern</code> facets. 

 * @param facetName The name of the facet, i.e. <code>FACET_LENGTH, FACET_TOTALDIGITS</code>. To retrieve the value for a pattern or  an enumeration, see <code>enumeration</code> and  <code>pattern</code>.

 * @return A value of the facet specified in <code>facetName</code> for this simple type definition or <code>null</code>. 

 */

public String getLexicalFacetValue(short facetName);

Location: XSSimpleTypeDefinition.java

Content: 

/** 

 * A list of pattern values if it exists, otherwise an empty  <code>StringList</code>. 

 */

public StringList getLexicalPattern();

Location: XSSimpleTypeDefinition.java

Content: 

/** 

 * If variety is <code>union</code> the list of member type definitions (a  non-empty sequence of simple type definitions) is available,  otherwise an empty <code>XSObjectList</code>. 

 */

public XSObjectList getMemberTypes();

Location: XSSimpleTypeDefinition.java

Content: 

/** 

 * A list of enumeration and pattern constraining facets if it exists,  otherwise an empty <code>XSObjectList</code>. 

 */

public XSObjectList getMultiValueFacets();

Location: XSSimpleTypeDefinition.java

Content: 

/** 

 * Fundamental Facet: numeric. 

 */

public boolean getNumeric();

Location: XSSimpleTypeDefinition.java

Content: 

/** 

 * Fundamental Facet: ordered. 

 */

public short getOrdered();

Location: XSSimpleTypeDefinition.java

Content: 

/** 

 * If variety is <code>atomic</code> the primitive type definition (a  built-in primitive datatype definition or the simple ur-type  definition) is available, otherwise <code>null</code>. 

 */

public XSSimpleTypeDefinition getPrimitiveType();

Location: XSSimpleTypeDefinition.java

Content: 

/** 

 * [variety]: one of {atomic, list, union} or absent. 

 */

public short getVariety();

Location: XSSimpleTypeDefinition.java

Content: 

/** 

 * Convenience method. [Facets]: check whether a facet is defined on this  type.

 * @param facetName  The name of the facet. 

 * @return  True if the facet is defined, false otherwise.

 */

public boolean isDefinedFacet(short facetName);

Location: XSSimpleTypeDefinition.java

Content: 

/** 

 * Convenience method. [Facets]: check whether a facet is defined and  fixed on this type. 

 * @param facetName  The name of the facet. 

 * @return  True if the facet is fixed, false otherwise.

 */

public boolean isFixedFacet(short facetName);

