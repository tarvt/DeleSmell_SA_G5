Location: TextSerializer.java

Content: 

protected void characters(String text,boolean unescaped) throws IOException {

  ElementState state;

  state=content();

  state.doCData=state.inCData=false;

  printText(text,true,true);

}

Location: TextSerializer.java

Content: 

public void comment(String text){

}

Location: TextSerializer.java

Content: 

protected ElementState content(){

  ElementState state;

  state=getElementState();

  if (!isDocumentState()) {

    if (state.empty)     state.empty=false;

    state.afterElement=false;

  }

  return state;

}

Location: TextSerializer.java

Content: 

public void endElementIO(String tagName) throws IOException {

  ElementState state;

  state=getElementState();

  state=leaveElementState();

  state.afterElement=true;

  state.empty=false;

  if (isDocumentState())   _printer.flush();

}

Location: TextSerializer.java

Content: 

protected String getEntityRef(int ch){

  return null;

}

Location: TextSerializer.java

Content: 

public void processingInstructionIO(String target,String code) throws IOException {

}

Location: TextSerializer.java

Content: 

/** 

 * Called to serialize a DOM element. Equivalent to calling  {@link #startElement},  {@link #endElement} and serializing everythinginbetween, but better optimized.

 */

protected void serializeElement(Element elem) throws IOException {

  Node child;

  ElementState state;

  boolean preserveSpace;

  String tagName;

  tagName=elem.getTagName();

  state=getElementState();

  if (isDocumentState()) {

    if (!_started)     startDocument(tagName);

  }

  preserveSpace=state.preserveSpace;

  if (elem.hasChildNodes()) {

    state=enterElementState(null,null,tagName,preserveSpace);

    child=elem.getFirstChild();

    while (child != null) {

      serializeNode(child);

      child=child.getNextSibling();

    }

    endElementIO(tagName);

  }

 else {

    if (!isDocumentState()) {

      state.afterElement=true;

      state.empty=false;

    }

  }

}

Location: TextSerializer.java

Content: 

/** 

 * Serialize the DOM node. This method is unique to the Text serializer.

 * @param node The node to serialize

 */

protected void serializeNode(Node node) throws IOException {

switch (node.getNodeType()) {

case Node.TEXT_NODE:

{

      String text;

      text=node.getNodeValue();

      if (text != null)       characters(node.getNodeValue(),true);

      break;

    }

case Node.CDATA_SECTION_NODE:

{

    String text;

    text=node.getNodeValue();

    if (text != null)     characters(node.getNodeValue(),true);

    break;

  }

case Node.COMMENT_NODE:

break;

case Node.ENTITY_REFERENCE_NODE:

break;

case Node.PROCESSING_INSTRUCTION_NODE:

break;

case Node.ELEMENT_NODE:

serializeElement((Element)node);

break;

case Node.DOCUMENT_NODE:

case Node.DOCUMENT_FRAGMENT_NODE:

{

Node child;

child=node.getFirstChild();

while (child != null) {

serializeNode(child);

child=child.getNextSibling();

}

break;

}

default :

break;

}

}

Location: TextSerializer.java

Content: 

/** 

 * Called to serialize the document's DOCTYPE by the root element. <p> This method will check if it has not been called before ( {@link #_started}), will serialize the document type declaration, and will serialize all pre-root comments and PIs that were accumulated in the document (see  {@link #serializePreRoot}). Pre-root will be serialized even if this is not the first root element of the document.

 */

protected void startDocument(String rootTagName) throws IOException {

  _printer.leaveDTD();

  _started=true;

  serializePreRoot();

}

Location: TextSerializer.java

Content: 

/** 

 * Constructs a new serializer. The serializer cannot be used without calling  {@link #setOutputCharStream} or {@link #setOutputByteStream}first.

 */

public TextSerializer(){

  super(new OutputFormat(Method.TEXT,null,false));

}

