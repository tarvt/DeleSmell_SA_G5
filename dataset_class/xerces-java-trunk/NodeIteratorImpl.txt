Location: NodeIteratorImpl.java

Content: 

/** 

 * Return whether children entity references are included in the iterator. 

 */

public boolean getExpandEntityReferences(){

  return fEntityReferenceExpansion;

}

Location: NodeIteratorImpl.java

Content: 

public Node getRoot(){

  return fRoot;

}

Location: NodeIteratorImpl.java

Content: 

/** 

 * Return node, if matches or any parent if matches. 

 */

Node matchNodeOrParent(Node node){

  if (fCurrentNode == null)   return null;

  for (Node n=fCurrentNode; n != fRoot; n=n.getParentNode()) {

    if (node == n)     return n;

  }

  return null;

}

Location: NodeIteratorImpl.java

Content: 

/** 

 * Return the next Node in the Iterator. The node is the next node in  depth-first order which also passes the filter, and whatToShow.  If there is no next node which passes these criteria, then return null.

 */

public Node nextNode(){

  if (fDetach) {

    throw new DOMException(DOMException.INVALID_STATE_ERR,DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN,"INVALID_STATE_ERR",null));

  }

  if (fRoot == null)   return null;

  Node nextNode=fCurrentNode;

  boolean accepted=false;

  accepted_loop:   while (!accepted) {

    if (!fForward && nextNode != null) {

      nextNode=fCurrentNode;

    }

 else {

      if (!fEntityReferenceExpansion && nextNode != null && nextNode.getNodeType() == Node.ENTITY_REFERENCE_NODE) {

        nextNode=nextNode(nextNode,false);

      }

 else {

        nextNode=nextNode(nextNode,true);

      }

    }

    fForward=true;

    if (nextNode == null)     return null;

    accepted=acceptNode(nextNode);

    if (accepted) {

      fCurrentNode=nextNode;

      return fCurrentNode;

    }

 else     continue accepted_loop;

  }

  return null;

}

Location: NodeIteratorImpl.java

Content: 

/** 

 * Public constructor 

 */

public NodeIteratorImpl(DocumentImpl document,Node root,int whatToShow,NodeFilter nodeFilter,boolean entityReferenceExpansion){

  fDocument=document;

  fRoot=root;

  fCurrentNode=null;

  fWhatToShow=whatToShow;

  fNodeFilter=nodeFilter;

  fEntityReferenceExpansion=entityReferenceExpansion;

}

Location: NodeIteratorImpl.java

Content: 

/** 

 * Return the previous Node in the Iterator. The node is the next node in  _backwards_ depth-first order which also passes the filter, and whatToShow. 

 */

public Node previousNode(){

  if (fDetach) {

    throw new DOMException(DOMException.INVALID_STATE_ERR,DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN,"INVALID_STATE_ERR",null));

  }

  if (fRoot == null || fCurrentNode == null)   return null;

  Node previousNode=fCurrentNode;

  boolean accepted=false;

  accepted_loop:   while (!accepted) {

    if (fForward && previousNode != null) {

      previousNode=fCurrentNode;

    }

 else {

      previousNode=previousNode(previousNode);

    }

    fForward=false;

    if (previousNode == null)     return null;

    accepted=acceptNode(previousNode);

    if (accepted) {

      fCurrentNode=previousNode;

      return fCurrentNode;

    }

 else     continue accepted_loop;

  }

  return null;

}

Location: NodeIteratorImpl.java

Content: 

/** 

 * The method previousNode(Node) returns the previous node  from the actual DOM tree.

 */

Node previousNode(Node node){

  Node result;

  if (node == fRoot)   return null;

  result=node.getPreviousSibling();

  if (result == null) {

    result=node.getParentNode();

    return result;

  }

  if (result.hasChildNodes() && !(!fEntityReferenceExpansion && result != null && result.getNodeType() == Node.ENTITY_REFERENCE_NODE)) {

    while (result.hasChildNodes()) {

      result=result.getLastChild();

    }

  }

  return result;

}

