Location: ElementPSVImpl.java

Content: 

public void copySchemaInformationTo(ElementPSVImpl target){

  target.fGrammars=fGrammars;

  target.fSchemaInformation=fSchemaInformation;

}

Location: ElementPSVImpl.java

Content: 

public ElementPSVImpl(){

}

Location: ElementPSVImpl.java

Content: 

public ElementPSVImpl(boolean isConstant,ElementPSVI elementPSVI){

  fDeclaration=elementPSVI.getElementDeclaration();

  fTypeDecl=elementPSVI.getTypeDefinition();

  fNil=elementPSVI.getNil();

  fSpecified=elementPSVI.getIsSchemaSpecified();

  fValue.copyFrom(elementPSVI.getSchemaValue());

  fNotation=elementPSVI.getNotation();

  fValidationAttempted=elementPSVI.getValidationAttempted();

  fValidity=elementPSVI.getValidity();

  fValidationContext=elementPSVI.getValidationContext();

  if (elementPSVI instanceof ElementPSVImpl) {

    final ElementPSVImpl elementPSVIImpl=(ElementPSVImpl)elementPSVI;

    fErrors=(elementPSVIImpl.fErrors != null) ? (String[])elementPSVIImpl.fErrors.clone() : null;

    elementPSVIImpl.copySchemaInformationTo(this);

  }

 else {

    final StringList errorCodes=elementPSVI.getErrorCodes();

    final int length=errorCodes.getLength();

    if (length > 0) {

      final StringList errorMessages=elementPSVI.getErrorMessages();

      final String[] errors=new String[length << 1];

      for (int i=0, j=0; i < length; ++i) {

        errors[j++]=errorCodes.item(i);

        errors[j++]=errorMessages.item(i);

      }

      fErrors=errors;

    }

    fSchemaInformation=elementPSVI.getSchemaInformation();

  }

  fIsConstant=isConstant;

}

