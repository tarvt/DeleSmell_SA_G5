Location: XSAllCM.java

Content: 

public void addElement(XSElementDecl element,boolean isOptional){

  fAllElements[fNumElements]=element;

  fIsOptionalElement[fNumElements]=isOptional;

  fNumElements++;

}

Location: XSAllCM.java

Content: 

/** 

 * check whether this content violates UPA constraint.

 * @param subGroupHandler the substitution group handler

 * @return true if this content model contains other or list wildcard

 */

public boolean checkUniqueParticleAttribution(SubstitutionGroupHandler subGroupHandler) throws XMLSchemaException {

  for (int i=0; i < fNumElements; i++) {

    for (int j=i + 1; j < fNumElements; j++) {

      if (XSConstraints.overlapUPA(fAllElements[i],fAllElements[j],subGroupHandler)) {

        throw new XMLSchemaException("cos-nonambig",new Object[]{fAllElements[i].toString(),fAllElements[j].toString()});

      }

    }

  }

  return false;

}

Location: XSAllCM.java

Content: 

/** 

 * The method indicates the end of list of children

 * @param currentState  Current state of the content model

 * @return true if the last state was a valid final state

 */

public boolean endContentModel(int[] currentState){

  int state=currentState[0];

  if (state == XSCMValidator.FIRST_ERROR || state == XSCMValidator.SUBSEQUENT_ERROR) {

    return false;

  }

  if (fHasOptionalContent && state == STATE_START) {

    return true;

  }

  for (int i=0; i < fNumElements; i++) {

    if (!fIsOptionalElement[i] && currentState[i + 1] == STATE_START)     return false;

  }

  return true;

}

Location: XSAllCM.java

Content: 

Object findMatchingDecl(QName elementName,SubstitutionGroupHandler subGroupHandler){

  Object matchingDecl=null;

  for (int i=0; i < fNumElements; i++) {

    matchingDecl=subGroupHandler.getMatchingElemDecl(elementName,fAllElements[i]);

    if (matchingDecl != null)     break;

  }

  return matchingDecl;

}

Location: XSAllCM.java

Content: 

public String getTermName(int termId){

  return null;

}

Location: XSAllCM.java

Content: 

public boolean isCompactedForUPA(){

  return false;

}

Location: XSAllCM.java

Content: 

public int[] occurenceInfo(int[] state){

  return null;

}

Location: XSAllCM.java

Content: 

/** 

 * The method corresponds to one transition in the content model.

 * @param elementName

 * @param currentState  Current state

 * @return an element decl object

 */

public Object oneTransition(QName elementName,int[] currentState,SubstitutionGroupHandler subGroupHandler){

  if (currentState[0] < 0) {

    currentState[0]=XSCMValidator.SUBSEQUENT_ERROR;

    return findMatchingDecl(elementName,subGroupHandler);

  }

  currentState[0]=STATE_CHILD;

  Object matchingDecl=null;

  for (int i=0; i < fNumElements; i++) {

    if (currentState[i + 1] != STATE_START)     continue;

    matchingDecl=subGroupHandler.getMatchingElemDecl(elementName,fAllElements[i]);

    if (matchingDecl != null) {

      currentState[i + 1]=STATE_VALID;

      return matchingDecl;

    }

  }

  currentState[0]=XSCMValidator.FIRST_ERROR;

  return findMatchingDecl(elementName,subGroupHandler);

}

Location: XSAllCM.java

Content: 

/** 

 * This methods to be called on entering a first element whose type has this content model. It will return the initial state of the content model

 * @return Start state of the content model

 */

public int[] startContentModel(){

  int[] state=new int[fNumElements + 1];

  for (int i=0; i <= fNumElements; i++) {

    state[i]=STATE_START;

  }

  return state;

}

Location: XSAllCM.java

Content: 

/** 

 * Check which elements are valid to appear at this point. This method also works if the state is in error, in which case it returns what should have been seen.

 * @param state  the current state

 * @return       a Vector whose entries are instances ofeither XSWildcardDecl or XSElementDecl.

 */

public Vector whatCanGoHere(int[] state){

  Vector ret=new Vector();

  for (int i=0; i < fNumElements; i++) {

    if (state[i + 1] == STATE_START)     ret.addElement(fAllElements[i]);

  }

  return ret;

}

Location: XSAllCM.java

Content: 

public XSAllCM(boolean hasOptionalContent,int size){

  fHasOptionalContent=hasOptionalContent;

  fAllElements=new XSElementDecl[size];

  fIsOptionalElement=new boolean[size];

}

