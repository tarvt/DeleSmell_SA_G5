Location: HTTPInputSource.java

Content: 

/** 

 * Returns the preference whether HTTP redirects should be followed. By default HTTP redirects will be followed.

 */

public boolean getFollowHTTPRedirects(){

  return fFollowRedirects;

}

Location: HTTPInputSource.java

Content: 

/** 

 * Returns an iterator for the request properties this input source contains. Each object returned by the iterator is an instance of <code>java.util.Map.Entry</code> where each key and value are a pair of strings corresponding to the name and value of a request property. 

 * @return an iterator for the request properties thisinput source contains

 */

public Iterator getHTTPRequestProperties(){

  return fHTTPRequestProperties.entrySet().iterator();

}

Location: HTTPInputSource.java

Content: 

/** 

 * Returns the value of the request property  associated with the given property name.

 * @param key the name of the request property

 * @return the value of the request property or <code>null</code> if this property has not been set

 */

public String getHTTPRequestProperty(String key){

  return (String)fHTTPRequestProperties.get(key);

}

Location: HTTPInputSource.java

Content: 

/** 

 * Constructs an input source from just the public and system identifiers, leaving resolution of the entity and opening of the input stream up to the caller.

 * @param publicId     The public identifier, if known.

 * @param systemId     The system identifier. This value shouldalways be set, if possible, and can be relative or absolute. If the system identifier is relative, then the base system identifier should be set.

 * @param baseSystemId The base system identifier. This value shouldalways be set to the fully expanded URI of the base system identifier, if possible.

 */

public HTTPInputSource(String publicId,String systemId,String baseSystemId){

  super(publicId,systemId,baseSystemId);

}

Location: HTTPInputSource.java

Content: 

/** 

 * Constructs an input source from a byte stream.

 * @param publicId     The public identifier, if known.

 * @param systemId     The system identifier. This value shouldalways be set, if possible, and can be relative or absolute. If the system identifier is relative, then the base system identifier should be set.

 * @param baseSystemId The base system identifier. This value shouldalways be set to the fully expanded URI of the base system identifier, if possible.

 * @param byteStream   The byte stream.

 * @param encoding     The encoding of the byte stream, if known.

 */

public HTTPInputSource(String publicId,String systemId,String baseSystemId,InputStream byteStream,String encoding){

  super(publicId,systemId,baseSystemId,byteStream,encoding);

}

Location: HTTPInputSource.java

Content: 

/** 

 * Constructs an input source from a character stream.

 * @param publicId     The public identifier, if known.

 * @param systemId     The system identifier. This value shouldalways be set, if possible, and can be relative or absolute. If the system identifier is relative, then the base system identifier should be set.

 * @param baseSystemId The base system identifier. This value shouldalways be set to the fully expanded URI of the base system identifier, if possible.

 * @param charStream   The character stream.

 * @param encoding     The original encoding of the byte streamused by the reader, if known.

 */

public HTTPInputSource(String publicId,String systemId,String baseSystemId,Reader charStream,String encoding){

  super(publicId,systemId,baseSystemId,charStream,encoding);

}

Location: HTTPInputSource.java

Content: 

/** 

 * Constructs an input source from a XMLResourceIdentifier object, leaving resolution of the entity and opening of the input stream up to the caller.

 * @param resourceIdentifier the XMLResourceIdentifier containing the information

 */

public HTTPInputSource(XMLResourceIdentifier resourceIdentifier){

  super(resourceIdentifier);

}

Location: HTTPInputSource.java

Content: 

/** 

 * Sets the preference whether HTTP redirects should be followed. By default HTTP redirects will be followed.

 */

public void setFollowHTTPRedirects(boolean followRedirects){

  fFollowRedirects=followRedirects;

}

Location: HTTPInputSource.java

Content: 

/** 

 * Sets the value of the request property associated with the given property name.

 * @param key the name of the request property

 * @param value the value of the request property

 */

public void setHTTPRequestProperty(String key,String value){

  if (value != null) {

    fHTTPRequestProperties.put(key,value);

  }

 else {

    fHTTPRequestProperties.remove(key);

  }

}

