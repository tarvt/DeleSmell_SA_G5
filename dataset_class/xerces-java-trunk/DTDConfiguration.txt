Location: DTDConfiguration.java

Content: 

protected void configureDTDPipeline(){

  if (fDTDScanner != null) {

    fProperties.put(DTD_SCANNER,fDTDScanner);

    if (fDTDProcessor != null) {

      fProperties.put(DTD_PROCESSOR,fDTDProcessor);

      fDTDScanner.setDTDHandler(fDTDProcessor);

      fDTDProcessor.setDTDSource(fDTDScanner);

      fDTDProcessor.setDTDHandler(fDTDHandler);

      if (fDTDHandler != null) {

        fDTDHandler.setDTDSource(fDTDProcessor);

      }

      fDTDScanner.setDTDContentModelHandler(fDTDProcessor);

      fDTDProcessor.setDTDContentModelSource(fDTDScanner);

      fDTDProcessor.setDTDContentModelHandler(fDTDContentModelHandler);

      if (fDTDContentModelHandler != null) {

        fDTDContentModelHandler.setDTDContentModelSource(fDTDProcessor);

      }

    }

 else {

      fDTDScanner.setDTDHandler(fDTDHandler);

      if (fDTDHandler != null) {

        fDTDHandler.setDTDSource(fDTDScanner);

      }

      fDTDScanner.setDTDContentModelHandler(fDTDContentModelHandler);

      if (fDTDContentModelHandler != null) {

        fDTDContentModelHandler.setDTDContentModelSource(fDTDScanner);

      }

    }

  }

}

Location: DTDConfiguration.java

Content: 

/** 

 * Create a datatype validator factory. 

 */

protected DTDDVFactory createDatatypeValidatorFactory(){

  return DTDDVFactory.getInstance();

}

Location: DTDConfiguration.java

Content: 

/** 

 * Create a document scanner. 

 */

protected XMLDocumentScanner createDocumentScanner(){

  return new XMLDocumentScannerImpl();

}

Location: DTDConfiguration.java

Content: 

/** 

 * Create a DTD loader . 

 */

protected XMLDTDProcessor createDTDProcessor(){

  return new XMLDTDProcessor();

}

Location: DTDConfiguration.java

Content: 

/** 

 * Create a DTD scanner. 

 */

protected XMLDTDScanner createDTDScanner(){

  return new XMLDTDScannerImpl();

}

Location: DTDConfiguration.java

Content: 

/** 

 * Creates an entity manager. 

 */

protected XMLEntityManager createEntityManager(){

  return new XMLEntityManager();

}

Location: DTDConfiguration.java

Content: 

/** 

 * Creates an error reporter. 

 */

protected XMLErrorReporter createErrorReporter(){

  return new XMLErrorReporter();

}

Location: DTDConfiguration.java

Content: 

/** 

 * Create a namespace binder. 

 */

protected XMLNamespaceBinder createNamespaceBinder(){

  return new XMLNamespaceBinder();

}

Location: DTDConfiguration.java

Content: 

protected ValidationManager createValidationManager(){

  return new ValidationManager();

}

Location: DTDConfiguration.java

Content: 

/** 

 * Default constructor. 

 */

public DTDConfiguration(){

  this(null,null,null);

}

Location: DTDConfiguration.java

Content: 

/** 

 * Constructs a parser configuration using the specified symbol table. 

 * @param symbolTable The symbol table to use.

 */

public DTDConfiguration(SymbolTable symbolTable){

  this(symbolTable,null,null);

}

Location: DTDConfiguration.java

Content: 

/** 

 * Constructs a parser configuration using the specified symbol table and grammar pool. <p> <strong>REVISIT:</strong>  Grammar pool will be updated when the new validation engine is implemented.

 * @param symbolTable The symbol table to use.

 * @param grammarPool The grammar pool to use.

 */

public DTDConfiguration(SymbolTable symbolTable,XMLGrammarPool grammarPool){

  this(symbolTable,grammarPool,null);

}

Location: DTDConfiguration.java

Content: 

/** 

 * Constructs a parser configuration using the specified symbol table, grammar pool, and parent settings. <p> <strong>REVISIT:</strong>  Grammar pool will be updated when the new validation engine is implemented.

 * @param symbolTable    The symbol table to use.

 * @param grammarPool    The grammar pool to use.

 * @param parentSettings The parent settings.

 */

public DTDConfiguration(SymbolTable symbolTable,XMLGrammarPool grammarPool,XMLComponentManager parentSettings){

  super(symbolTable,parentSettings);

  final String[] recognizedFeatures={CONTINUE_AFTER_FATAL_ERROR,LOAD_EXTERNAL_DTD};

  addRecognizedFeatures(recognizedFeatures);

  setFeature(CONTINUE_AFTER_FATAL_ERROR,false);

  setFeature(LOAD_EXTERNAL_DTD,true);

  final String[] recognizedProperties={ERROR_REPORTER,ENTITY_MANAGER,DOCUMENT_SCANNER,DTD_SCANNER,DTD_PROCESSOR,DTD_VALIDATOR,NAMESPACE_BINDER,XMLGRAMMAR_POOL,DATATYPE_VALIDATOR_FACTORY,VALIDATION_MANAGER,JAXP_SCHEMA_SOURCE,JAXP_SCHEMA_LANGUAGE,LOCALE};

  addRecognizedProperties(recognizedProperties);

  fGrammarPool=grammarPool;

  if (fGrammarPool != null) {

    setProperty(XMLGRAMMAR_POOL,fGrammarPool);

  }

  fEntityManager=createEntityManager();

  setProperty(ENTITY_MANAGER,fEntityManager);

  addComponent(fEntityManager);

  fErrorReporter=createErrorReporter();

  fErrorReporter.setDocumentLocator(fEntityManager.getEntityScanner());

  setProperty(ERROR_REPORTER,fErrorReporter);

  addComponent(fErrorReporter);

  fScanner=createDocumentScanner();

  setProperty(DOCUMENT_SCANNER,fScanner);

  if (fScanner instanceof XMLComponent) {

    addComponent((XMLComponent)fScanner);

  }

  fDTDScanner=createDTDScanner();

  if (fDTDScanner != null) {

    setProperty(DTD_SCANNER,fDTDScanner);

    if (fDTDScanner instanceof XMLComponent) {

      addComponent((XMLComponent)fDTDScanner);

    }

  }

  fDTDProcessor=createDTDProcessor();

  if (fDTDProcessor != null) {

    setProperty(DTD_PROCESSOR,fDTDProcessor);

    addComponent(fDTDProcessor);

  }

  fDTDValidator=createDTDValidator();

  if (fDTDValidator != null) {

    setProperty(DTD_VALIDATOR,fDTDValidator);

    addComponent(fDTDValidator);

  }

  fNamespaceBinder=createNamespaceBinder();

  if (fNamespaceBinder != null) {

    setProperty(NAMESPACE_BINDER,fNamespaceBinder);

    addComponent(fNamespaceBinder);

  }

  fDatatypeValidatorFactory=createDatatypeValidatorFactory();

  if (fDatatypeValidatorFactory != null) {

    setProperty(DATATYPE_VALIDATOR_FACTORY,fDatatypeValidatorFactory);

  }

  fValidationManager=createValidationManager();

  if (fValidationManager != null) {

    setProperty(VALIDATION_MANAGER,fValidationManager);

  }

  if (fErrorReporter.getMessageFormatter(XMLMessageFormatter.XML_DOMAIN) == null) {

    XMLMessageFormatter xmft=new XMLMessageFormatter();

    fErrorReporter.putMessageFormatter(XMLMessageFormatter.XML_DOMAIN,xmft);

    fErrorReporter.putMessageFormatter(XMLMessageFormatter.XMLNS_DOMAIN,xmft);

  }

  try {

    setLocale(Locale.getDefault());

  }

 catch (  XNIException e) {

  }

}

