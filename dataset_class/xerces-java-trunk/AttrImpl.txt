Location: AttrImpl.java

Content: 

/** 

 * Default Constructor 

 */

public AttrImpl(){

  nodeType=Node.ATTRIBUTE_NODE;

}

Location: AttrImpl.java

Content: 

/** 

 * Attribute has no public constructor. Please use the factory method in the Document class.

 */

protected AttrImpl(CoreDocumentImpl ownerDocument,String name){

  super(ownerDocument);

  this.name=name;

  isSpecified(true);

  hasStringValue(true);

}

Location: AttrImpl.java

Content: 

/** 

 * Constructs an attribute.

 * @param element Element which owns this attribute

 * @param prefix The QName prefix.

 * @param localpart The QName localpart.

 * @param rawname The QName rawname.

 * @param uri The uri binding for the associated prefix.

 * @param value The value of the attribute.

 */

public AttrImpl(Element element,String prefix,String localpart,String rawname,String uri,String value){

  super(prefix,localpart,rawname,uri,Node.ATTRIBUTE_NODE);

  this.element=element;

  this.value=value;

}

Location: AttrImpl.java

Content: 

/** 

 * Checks the normalized state of this node after inserting a child. If the inserted child causes this node to be unnormalized, then this node is flagged accordingly. The conditions for changing the normalized state are: <ul> <li>The inserted child is a text node and one of its adjacent siblings is also a text node. <li>The inserted child is is itself unnormalized. </ul>

 * @param insertedChild the child node that was inserted into this node

 * @throws NullPointerException if the inserted child is <code>null</code>

 */

void checkNormalizationAfterInsert(ChildNode insertedChild){

  if (insertedChild.getNodeType() == Node.TEXT_NODE) {

    ChildNode prev=insertedChild.previousSibling();

    ChildNode next=insertedChild.nextSibling;

    if ((prev != null && prev.getNodeType() == Node.TEXT_NODE) || (next != null && next.getNodeType() == Node.TEXT_NODE)) {

      isNormalized(false);

    }

  }

 else {

    if (!insertedChild.isNormalized()) {

      isNormalized(false);

    }

  }

}

Location: AttrImpl.java

Content: 

/** 

 * Checks the normalized of this node after removing a child. If the removed child causes this node to be unnormalized, then this node is flagged accordingly. The conditions for changing the normalized state are: <ul> <li>The removed child had two adjacent siblings that were text nodes. </ul>

 * @param previousSibling the previous sibling of the removed child, or<code>null</code>

 */

void checkNormalizationAfterRemove(ChildNode previousSibling){

  if (previousSibling != null && previousSibling.getNodeType() == Node.TEXT_NODE) {

    ChildNode next=previousSibling.nextSibling;

    if (next != null && next.getNodeType() == Node.TEXT_NODE) {

      isNormalized(false);

    }

  }

}

Location: AttrImpl.java

Content: 

public String getNodeValue(){

  return getValue();

}

Location: AttrImpl.java

Content: 

public Document getOwnerDocument(){

  return element.getOwnerDocument();

}

Location: AttrImpl.java

Content: 

public Element getOwnerElement(){

  return element;

}

Location: AttrImpl.java

Content: 

/** 

 * Method getSchemaTypeInfo.

 * @return TypeInfo

 */

public TypeInfo getSchemaTypeInfo(){

  return null;

}

Location: AttrImpl.java

Content: 

public boolean getSpecified(){

  return true;

}

Location: AttrImpl.java

Content: 

/** 

 * NON-DOM INTERNAL: Within DOM actions,we sometimes need to be able to control which mutation events are spawned. This version of the insertBefore operation allows us to do so. It is not intended for use by application programs.

 */

Node internalInsertBefore(Node newChild,Node refChild,boolean replace) throws DOMException {

  CoreDocumentImpl ownerDocument=ownerDocument();

  boolean errorChecking=ownerDocument.errorChecking;

  if (newChild.getNodeType() == Node.DOCUMENT_FRAGMENT_NODE) {

    if (errorChecking) {

      for (Node kid=newChild.getFirstChild(); kid != null; kid=kid.getNextSibling()) {

        if (!ownerDocument.isKidOK(this,kid)) {

          String msg=DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN,"HIERARCHY_REQUEST_ERR",null);

          throw new DOMException(DOMException.HIERARCHY_REQUEST_ERR,msg);

        }

      }

    }

    while (newChild.hasChildNodes()) {

      insertBefore(newChild.getFirstChild(),refChild);

    }

    return newChild;

  }

  if (newChild == refChild) {

    refChild=refChild.getNextSibling();

    removeChild(newChild);

    insertBefore(newChild,refChild);

    return newChild;

  }

  if (needsSyncChildren()) {

    synchronizeChildren();

  }

  if (errorChecking) {

    if (isReadOnly()) {

      String msg=DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN,"NO_MODIFICATION_ALLOWED_ERR",null);

      throw new DOMException(DOMException.NO_MODIFICATION_ALLOWED_ERR,msg);

    }

    if (newChild.getOwnerDocument() != ownerDocument) {

      String msg=DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN,"WRONG_DOCUMENT_ERR",null);

      throw new DOMException(DOMException.WRONG_DOCUMENT_ERR,msg);

    }

    if (!ownerDocument.isKidOK(this,newChild)) {

      String msg=DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN,"HIERARCHY_REQUEST_ERR",null);

      throw new DOMException(DOMException.HIERARCHY_REQUEST_ERR,msg);

    }

    if (refChild != null && refChild.getParentNode() != this) {

      String msg=DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN,"NOT_FOUND_ERR",null);

      throw new DOMException(DOMException.NOT_FOUND_ERR,msg);

    }

    boolean treeSafe=true;

    for (NodeImpl a=this; treeSafe && a != null; a=a.parentNode()) {

      treeSafe=newChild != a;

    }

    if (!treeSafe) {

      String msg=DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN,"HIERARCHY_REQUEST_ERR",null);

      throw new DOMException(DOMException.HIERARCHY_REQUEST_ERR,msg);

    }

  }

  makeChildNode();

  ownerDocument.insertingNode(this,replace);

  ChildNode newInternal=(ChildNode)newChild;

  Node oldparent=newInternal.parentNode();

  if (oldparent != null) {

    oldparent.removeChild(newInternal);

  }

  ChildNode refInternal=(ChildNode)refChild;

  newInternal.ownerNode=this;

  newInternal.isOwned(true);

  ChildNode firstChild=(ChildNode)value;

  if (firstChild == null) {

    value=newInternal;

    newInternal.isFirstChild(true);

    newInternal.previousSibling=newInternal;

  }

 else {

    if (refInternal == null) {

      ChildNode lastChild=firstChild.previousSibling;

      lastChild.nextSibling=newInternal;

      newInternal.previousSibling=lastChild;

      firstChild.previousSibling=newInternal;

    }

 else {

      if (refChild == firstChild) {

        firstChild.isFirstChild(false);

        newInternal.nextSibling=firstChild;

        newInternal.previousSibling=firstChild.previousSibling;

        firstChild.previousSibling=newInternal;

        value=newInternal;

        newInternal.isFirstChild(true);

      }

 else {

        ChildNode prev=refInternal.previousSibling;

        newInternal.nextSibling=refInternal;

        prev.nextSibling=newInternal;

        refInternal.previousSibling=newInternal;

        newInternal.previousSibling=prev;

      }

    }

  }

  changed();

  ownerDocument.insertedNode(this,newInternal,replace);

  checkNormalizationAfterInsert(newInternal);

  return newChild;

}

Location: AttrImpl.java

Content: 

/** 

 * NON-DOM INTERNAL: Within DOM actions,we sometimes need to be able to control which mutation events are spawned. This version of the removeChild operation allows us to do so. It is not intended for use by application programs.

 */

Node internalRemoveChild(Node oldChild,boolean replace) throws DOMException {

  CoreDocumentImpl ownerDocument=ownerDocument();

  if (ownerDocument.errorChecking) {

    if (isReadOnly()) {

      String msg=DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN,"NO_MODIFICATION_ALLOWED_ERR",null);

      throw new DOMException(DOMException.NO_MODIFICATION_ALLOWED_ERR,msg);

    }

    if (oldChild != null && oldChild.getParentNode() != this) {

      String msg=DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN,"NOT_FOUND_ERR",null);

      throw new DOMException(DOMException.NOT_FOUND_ERR,msg);

    }

  }

  ChildNode oldInternal=(ChildNode)oldChild;

  ownerDocument.removingNode(this,oldInternal,replace);

  if (oldInternal == value) {

    oldInternal.isFirstChild(false);

    value=oldInternal.nextSibling;

    ChildNode firstChild=(ChildNode)value;

    if (firstChild != null) {

      firstChild.isFirstChild(true);

      firstChild.previousSibling=oldInternal.previousSibling;

    }

  }

 else {

    ChildNode prev=oldInternal.previousSibling;

    ChildNode next=oldInternal.nextSibling;

    prev.nextSibling=next;

    if (next == null) {

      ChildNode firstChild=(ChildNode)value;

      firstChild.previousSibling=prev;

    }

 else {

      next.previousSibling=prev;

    }

  }

  ChildNode oldPreviousSibling=oldInternal.previousSibling();

  oldInternal.ownerNode=ownerDocument;

  oldInternal.isOwned(false);

  oldInternal.nextSibling=null;

  oldInternal.previousSibling=null;

  changed();

  ownerDocument.removedNode(this,replace);

  checkNormalizationAfterRemove(oldPreviousSibling);

  return oldInternal;

}

Location: AttrImpl.java

Content: 

/** 

 * @since DOM Level 3 

 */

public boolean isId(){

  return false;

}

Location: AttrImpl.java

Content: 

final ChildNode lastChild(){

  makeChildNode();

  return value != null ? ((ChildNode)value).previousSibling : null;

}

Location: AttrImpl.java

Content: 

final void lastChild(ChildNode node){

  if (value != null) {

    ((ChildNode)value).previousSibling=node;

  }

}

Location: AttrImpl.java

Content: 

protected void makeChildNode(){

  if (hasStringValue()) {

    if (value != null) {

      TextImpl text=(TextImpl)ownerDocument().createTextNode((String)value);

      value=text;

      text.isFirstChild(true);

      text.previousSibling=text;

      text.ownerNode=this;

      text.isOwned(true);

    }

    hasStringValue(false);

  }

}

Location: AttrImpl.java

Content: 

void rename(String name){

  if (needsSyncData()) {

    synchronizeData();

  }

  this.name=name;

}

Location: AttrImpl.java

Content: 

/** 

 * NON-DOM: set the type of this attribute to be ID type.

 * @param id

 */

public void setIdAttribute(boolean id){

  if (needsSyncData()) {

    synchronizeData();

  }

  isIdAttribute(id);

}

Location: AttrImpl.java

Content: 

/** 

 * NON-DOM, for use by parser 

 */

public void setSpecified(boolean arg){

  if (needsSyncData()) {

    synchronizeData();

  }

  isSpecified(arg);

}

Location: AttrImpl.java

Content: 

/** 

 * NON-DOM: used by the parser

 * @param type

 */

public void setType(Object type){

  this.type=type;

}

Location: AttrImpl.java

Content: 

public void setValue(String value) throws DOMException {

  this.value=value;

}

