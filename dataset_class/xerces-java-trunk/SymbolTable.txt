Location: SymbolTable.java

Content: 

private String addSymbol0(char[] buffer,int offset,int length,int bucket,int collisionCount){

  if (fCount >= fThreshold) {

    rehash();

    bucket=hash(buffer,offset,length) % fTableSize;

  }

 else   if (collisionCount >= fCollisionThreshold) {

    hongshuai();

    if (fHashMultipliers == null) {

      fHashMultipliers=new int[MULTIPLIERS_SIZE];

    }

    PrimeNumberSequenceGenerator.generateSequence(fHashMultipliers);

    rehashCommon(fBuckets.length);

    bucket=hash(buffer,offset,length) % fTableSize;

  }

  Entry entry=new Entry(buffer,offset,length,fBuckets[bucket]);

  fBuckets[bucket]=entry;

  ++fCount;

  return entry.symbol;

}

Location: SymbolTable.java

Content: 

private String addSymbol0(String symbol,int bucket,int collisionCount){

  if (fCount >= fThreshold) {

    rehash();

    bucket=hash(symbol) % fTableSize;

  }

 else   if (collisionCount >= fCollisionThreshold) {

    hongshuai();

    if (fHashMultipliers == null) {

      fHashMultipliers=new int[MULTIPLIERS_SIZE];

    }

    PrimeNumberSequenceGenerator.generateSequence(fHashMultipliers);

    rehashCommon(fBuckets.length);

    bucket=hash(symbol) % fTableSize;

  }

  Entry entry=new Entry(symbol,fBuckets[bucket]);

  fBuckets[bucket]=entry;

  ++fCount;

  return entry.symbol;

}

Location: SymbolTable.java

Content: 

private int hash0(char[] buffer,int offset,int length){

  int code=0;

  final int[] multipliers=fHashMultipliers;

  for (int i=0; i < length; ++i) {

    code=code * multipliers[i & MULTIPLIERS_MASK] + buffer[offset + i];

  }

  return code & 0x7FFFFFFF;

}

Location: SymbolTable.java

Content: 

private int hash0(String symbol){

  int code=0;

  final int length=symbol.length();

  final int[] multipliers=fHashMultipliers;

  for (int i=0; i < length; ++i) {

    code=code * multipliers[i & MULTIPLIERS_MASK] + symbol.charAt(i);

  }

  return code & 0x7FFFFFFF;

}

Location: SymbolTable.java

Content: 

/** 

 * Returns a hashcode value for the specified symbol information. The value returned by this method must be identical to the value returned by the <code>hash(String)</code> method when called with the string object created from the symbol information.

 * @param buffer The character buffer containing the symbol.

 * @param offset The offset into the character buffer of the startof the symbol.

 * @param length The length of the symbol.

 */

public int hash(char[] buffer,int offset,int length){

  if (fHashMultipliers == null) {

    int code=0;

    for (int i=0; i < length; ++i) {

      code=code * 31 + buffer[offset + i];

    }

    return code & 0x7FFFFFFF;

  }

  return hash0(buffer,offset,length);

}

Location: SymbolTable.java

Content: 

/** 

 * Returns a hashcode value for the specified symbol. The value returned by this method must be identical to the value returned by the <code>hash(char[],int,int)</code> method when called with the character array that comprises the symbol string.

 * @param symbol The symbol to hash.

 */

public int hash(String symbol){

  if (fHashMultipliers == null) {

    return symbol.hashCode() & 0x7FFFFFFF;

  }

  return hash0(symbol);

}

Location: SymbolTable.java

Content: 

/** 

 * Randomly selects a new hash function and reorganizes this SymbolTable in order to more evenly distribute its entries across the table. This  method is called automatically when the number keys in one of the  SymbolTable's buckets exceeds the given collision threshold.

 */

protected void rebalance(){

  if (fHashMultipliers == null) {

    fHashMultipliers=new int[MULTIPLIERS_SIZE];

  }

  PrimeNumberSequenceGenerator.generateSequence(fHashMultipliers);

  rehashCommon(fBuckets.length);

}

Location: SymbolTable.java

Content: 

/** 

 * Increases the capacity of and internally reorganizes this  SymbolTable, in order to accommodate and access its entries more  efficiently.  This method is called automatically when the  number of keys in the SymbolTable exceeds this hashtable's capacity  and load factor. 

 */

protected void rehash(){

  rehashCommon(fBuckets.length * 2 + 1);

}

Location: SymbolTable.java

Content: 

private void rehashCommon(final int newCapacity){

  int oldCapacity=fBuckets.length;

  Entry[] oldTable=fBuckets;

  Entry[] newTable=new Entry[newCapacity];

  fThreshold=(int)(newCapacity * fLoadFactor);

  fBuckets=newTable;

  fTableSize=fBuckets.length;

  for (int i=oldCapacity; i-- > 0; ) {

    for (Entry old=oldTable[i]; old != null; ) {

      Entry e=old;

      old=old.next;

      int index=hash(e.symbol) % newCapacity;

      e.next=newTable[index];

      newTable[index]=e;

    }

  }

}

Location: SymbolTable.java

Content: 

/** 

 * Constructs a new, empty SymbolTable with a default initial capacity (101) and load factor, which is <tt>0.75</tt>. 

 */

public SymbolTable(){

  this(TABLE_SIZE,0.75f);

}

Location: SymbolTable.java

Content: 

/** 

 * Constructs a new, empty SymbolTable with the specified initial capacity and default load factor, which is <tt>0.75</tt>.

 * @param initialCapacity   the initial capacity of the hashtable.

 * @throws IllegalArgumentException if the initial capacity is lessthan zero.

 */

public SymbolTable(int initialCapacity){

  this(initialCapacity,0.75f);

}

Location: SymbolTable.java

Content: 

/** 

 * Constructs a new, empty SymbolTable with the specified initial  capacity and the specified load factor.

 * @param initialCapacity   the initial capacity of the SymbolTable.

 * @param loadFactor        the load factor of the SymbolTable.

 * @throws IllegalArgumentException  if the initial capacity is lessthan zero, or if the load factor is nonpositive.

 */

public SymbolTable(int initialCapacity,float loadFactor){

  if (initialCapacity < 0) {

    throw new IllegalArgumentException("Illegal Capacity: " + initialCapacity);

  }

  if (loadFactor <= 0 || Float.isNaN(loadFactor)) {

    throw new IllegalArgumentException("Illegal Load: " + loadFactor);

  }

  if (initialCapacity == 0) {

    initialCapacity=1;

  }

  fLoadFactor=loadFactor;

  fTableSize=initialCapacity;

  fBuckets=new Entry[fTableSize];

  fThreshold=(int)(fTableSize * loadFactor);

  fCollisionThreshold=(int)(MAX_HASH_COLLISIONS * loadFactor);

  fCount=0;

}

