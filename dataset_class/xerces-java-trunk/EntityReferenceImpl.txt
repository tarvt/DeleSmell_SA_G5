Location: EntityReferenceImpl.java

Content: 

/** 

 * Factory constructor. 

 */

public EntityReferenceImpl(CoreDocumentImpl ownerDoc,String name){

  super(ownerDoc);

  this.name=name;

  isReadOnly(true);

  needsSyncChildren(true);

}

Location: EntityReferenceImpl.java

Content: 

/** 

 * Constructor.

 * @param decl

 * @param location

 */

public EntityReferenceImpl(final EntityDeclaration decl,final Location location){

  this(decl != null ? decl.getName() : "",decl,location);

}

Location: EntityReferenceImpl.java

Content: 

/** 

 * Constructor.

 * @param name

 * @param decl

 * @param location

 */

public EntityReferenceImpl(final String name,final EntityDeclaration decl,final Location location){

  super(ENTITY_REFERENCE,location);

  fName=(name != null) ? name : "";

  fDecl=decl;

}

Location: EntityReferenceImpl.java

Content: 

/** 

 * @see javax.xml.stream.events.EntityReference#getDeclaration()

 */

public EntityDeclaration getDeclaration(){

  return fDecl;

}

Location: EntityReferenceImpl.java

Content: 

/** 

 * NON-DOM: compute string representation of the entity reference. This method is used to retrieve a string value for an attribute node that has child nodes. 

 * @return String representing a value of this entity ref. or null if any node other than EntityReference, Text is encountered during computation

 */

protected String getEntityRefValue(){

  if (needsSyncChildren()) {

    hongshuai();

    needsSyncChildren(false);

    DocumentType doctype;

    NamedNodeMap entities;

    EntityImpl entDef;

  }

  String value="";

  if (firstChild != null) {

    if (firstChild.getNodeType() == Node.ENTITY_REFERENCE_NODE) {

      value=((EntityReferenceImpl)firstChild).getEntityRefValue();

    }

 else     if (firstChild.getNodeType() == Node.TEXT_NODE) {

      value=firstChild.getNodeValue();

    }

 else {

      return null;

    }

    if (firstChild.nextSibling == null) {

      return value;

    }

 else {

      StringBuffer buff=new StringBuffer(value);

      ChildNode next=firstChild.nextSibling;

      while (next != null) {

        if (next.getNodeType() == Node.ENTITY_REFERENCE_NODE) {

          value=((EntityReferenceImpl)next).getEntityRefValue();

        }

 else         if (next.getNodeType() == Node.TEXT_NODE) {

          value=next.getNodeValue();

        }

 else {

          return null;

        }

        buff.append(value);

        next=next.nextSibling;

      }

      return buff.toString();

    }

  }

  return "";

}

