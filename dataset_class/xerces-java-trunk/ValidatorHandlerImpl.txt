Location: ValidatorHandlerImpl.java

Content: 

/** 

 * Fills in a QName object. 

 */

private void fillQName(QName toFill,String uri,String localpart,String raw){

  if (!fStringsInternalized) {

    uri=(uri != null && uri.length() > 0) ? fSymbolTable.addSymbol(uri) : null;

    localpart=(localpart != null) ? fSymbolTable.addSymbol(localpart) : XMLSymbols.EMPTY_STRING;

    raw=(raw != null) ? fSymbolTable.addSymbol(raw) : XMLSymbols.EMPTY_STRING;

  }

 else {

    if (uri != null && uri.length() == 0) {

      uri=null;

    }

    if (localpart == null) {

      localpart=XMLSymbols.EMPTY_STRING;

    }

    if (raw == null) {

      raw=XMLSymbols.EMPTY_STRING;

    }

  }

  String prefix=XMLSymbols.EMPTY_STRING;

  int prefixIdx=raw.indexOf(':');

  if (prefixIdx != -1) {

    prefix=fSymbolTable.addSymbol(raw.substring(0,prefixIdx));

  }

  toFill.setValues(prefix,localpart,raw,uri);

}

Location: ValidatorHandlerImpl.java

Content: 

/** 

 * Fills in the XMLAttributes object. 

 */

private void fillXMLAttributes2(Attributes2 att){

  fAttributes.removeAllAttributes();

  final int len=att.getLength();

  for (int i=0; i < len; ++i) {

    fillXMLAttribute(att,i);

    fAttributes.setSpecified(i,att.isSpecified(i));

    if (att.isDeclared(i)) {

      fAttributes.getAugmentations(i).putItem(Constants.ATTRIBUTE_DECLARED,Boolean.TRUE);

    }

  }

}

Location: ValidatorHandlerImpl.java

Content: 

/** 

 * Fills in the XMLAttributes object. 

 */

private void fillXMLAttributes(Attributes att){

  fAttributes.removeAllAttributes();

  final int len=att.getLength();

  for (int i=0; i < len; ++i) {

    fillXMLAttribute(att,i);

    fAttributes.setSpecified(i,true);

  }

}

Location: ValidatorHandlerImpl.java

Content: 

/** 

 * Adds an attribute to the XMLAttributes object. 

 */

private void fillXMLAttribute(Attributes att,int index){

  fillQName(fAttributeQName,att.getURI(index),att.getLocalName(index),att.getQName(index));

  String type=att.getType(index);

  fAttributes.addAttributeNS(fAttributeQName,(type != null) ? type : XMLSymbols.fCDATASymbol,att.getValue(index));

}

Location: ValidatorHandlerImpl.java

Content: 

public LSResourceResolver getResourceResolver(){

  return fComponentManager.getResourceResolver();

}

Location: ValidatorHandlerImpl.java

Content: 

public TypeInfoProvider getTypeInfoProvider(){

  return fTypeInfoProvider;

}

Location: ValidatorHandlerImpl.java

Content: 

public boolean isEntityDeclared(String name){

  return false;

}

Location: ValidatorHandlerImpl.java

Content: 

public boolean isEntityUnparsed(String name){

  if (fUnparsedEntities != null) {

    return fUnparsedEntities.containsKey(name);

  }

  return false;

}

Location: ValidatorHandlerImpl.java

Content: 

public void setResourceResolver(LSResourceResolver resourceResolver){

  fComponentManager.setResourceResolver(resourceResolver);

}

Location: ValidatorHandlerImpl.java

Content: 

public ValidatorHandlerImpl(XMLSchemaValidatorComponentManager componentManager){

  fComponentManager=componentManager;

  fErrorReporter=(XMLErrorReporter)fComponentManager.getProperty(ERROR_REPORTER);

  fNamespaceContext=(NamespaceContext)fComponentManager.getProperty(NAMESPACE_CONTEXT);

  fSchemaValidator=(XMLSchemaValidator)fComponentManager.getProperty(SCHEMA_VALIDATOR);

  fSymbolTable=(SymbolTable)fComponentManager.getProperty(SYMBOL_TABLE);

  fValidationManager=(ValidationManager)fComponentManager.getProperty(VALIDATION_MANAGER);

}

Location: ValidatorHandlerImpl.java

Content: 

public ValidatorHandlerImpl(XSGrammarPoolContainer grammarContainer){

  this(new XMLSchemaValidatorComponentManager(grammarContainer));

  fComponentManager.addRecognizedFeatures(new String[]{NAMESPACE_PREFIXES});

  fComponentManager.setFeature(NAMESPACE_PREFIXES,false);

  setErrorHandler(null);

  setResourceResolver(null);

}

