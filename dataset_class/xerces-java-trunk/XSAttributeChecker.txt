Location: XSAttributeChecker.java

Content: 

/** 

 * Check whether the specified element conforms to the attributes restriction an array of attribute values is returned. the caller must call <code>returnAttrArray</code> to return that array.

 * @param element    which element to check

 * @param isGlobal   whether a child of &lt;schema&gt; or &lt;redefine&gt;

 * @param schemaDoc  the document where the element lives in

 * @return           an array containing attribute values

 */

public Object[] checkAttributes(Element element,boolean isGlobal,XSDocumentInfo schemaDoc){

  return checkAttributes(element,isGlobal,schemaDoc,false);

}

Location: XSAttributeChecker.java

Content: 

/** 

 * Check whether the specified element conforms to the attributes restriction an array of attribute values is returned. the caller must call <code>returnAttrArray</code> to return that array. This method also takes an extra parameter: if the element is "enumeration", whether to make a copy of the namespace context, so that the value can be resolved as a QName later.

 * @param element      which element to check

 * @param isGlobal     whether a child of &lt;schema&gt; or &lt;redefine&gt;

 * @param schemaDoc    the document where the element lives in

 * @param enumAsQName  whether to tread enumeration value as QName

 * @return             an array containing attribute values

 */

public Object[] checkAttributes(Element element,boolean isGlobal,XSDocumentInfo schemaDoc,boolean enumAsQName){

  if (element == null)   return null;

  Attr[] attrs=DOMUtil.getAttrs(element);

  resolveNamespace(element,attrs,schemaDoc.fNamespaceSupport);

  String uri=DOMUtil.getNamespaceURI(element);

  String elName=DOMUtil.getLocalName(element);

  if (!SchemaSymbols.URI_SCHEMAFORSCHEMA.equals(uri)) {

    reportSchemaError("s4s-elt-schema-ns",new Object[]{elName},element);

  }

  Hashtable eleAttrsMap=fEleAttrsMapG;

  String lookupName=elName;

  if (!isGlobal) {

    eleAttrsMap=fEleAttrsMapL;

    if (elName.equals(SchemaSymbols.ELT_ELEMENT)) {

      if (DOMUtil.getAttr(element,SchemaSymbols.ATT_REF) != null)       lookupName=ELEMENT_R;

 else       lookupName=ELEMENT_N;

    }

 else     if (elName.equals(SchemaSymbols.ELT_ATTRIBUTE)) {

      if (DOMUtil.getAttr(element,SchemaSymbols.ATT_REF) != null)       lookupName=ATTRIBUTE_R;

 else       lookupName=ATTRIBUTE_N;

    }

  }

  Container attrList=(Container)eleAttrsMap.get(lookupName);

  if (attrList == null) {

    reportSchemaError("s4s-elt-invalid",new Object[]{elName},element);

    return null;

  }

  Object[] attrValues=getAvailableArray();

  long fromDefault=0;

  System.arraycopy(fSeenTemp,0,fSeen,0,ATTIDX_COUNT);

  int length=attrs.length;

  Attr sattr=null;

  for (int i=0; i < length; i++) {

    sattr=attrs[i];

    String attrName=sattr.getName();

    String attrURI=DOMUtil.getNamespaceURI(sattr);

    String attrVal=DOMUtil.getValue(sattr);

    if (attrName.startsWith("xml")) {

      String attrPrefix=DOMUtil.getPrefix(sattr);

      if ("xmlns".equals(attrPrefix) || "xmlns".equals(attrName)) {

        continue;

      }

 else       if (SchemaSymbols.ATT_XML_LANG.equals(attrName) && (SchemaSymbols.ELT_SCHEMA.equals(elName) || SchemaSymbols.ELT_DOCUMENTATION.equals(elName))) {

        attrURI=null;

      }

    }

    if (attrURI != null && attrURI.length() != 0) {

      if (attrURI.equals(SchemaSymbols.URI_SCHEMAFORSCHEMA)) {

        reportSchemaError("s4s-att-not-allowed",new Object[]{elName,attrName},element);

      }

 else {

        if (attrValues[ATTIDX_NONSCHEMA] == null) {

          attrValues[ATTIDX_NONSCHEMA]=new Vector(4,2);

        }

        ((Vector)attrValues[ATTIDX_NONSCHEMA]).addElement(attrName);

        ((Vector)attrValues[ATTIDX_NONSCHEMA]).addElement(attrVal);

      }

      continue;

    }

    OneAttr oneAttr=attrList.get(attrName);

    if (oneAttr == null) {

      reportSchemaError("s4s-att-not-allowed",new Object[]{elName,attrName},element);

      continue;

    }

    fSeen[oneAttr.valueIndex]=true;

    try {

      if (oneAttr.dvIndex >= 0) {

        if (oneAttr.dvIndex != DT_STRING && oneAttr.dvIndex != DT_XPATH && oneAttr.dvIndex != DT_XPATH1) {

          XSSimpleType dv=fExtraDVs[oneAttr.dvIndex];

          Object avalue=dv.validate(attrVal,schemaDoc.fValidationContext,null);

          if (oneAttr.dvIndex == DT_QNAME) {

            QName qname=(QName)avalue;

            if (qname.prefix == XMLSymbols.EMPTY_STRING && qname.uri == null && schemaDoc.fIsChameleonSchema)             qname.uri=schemaDoc.fTargetNamespace;

          }

          attrValues[oneAttr.valueIndex]=avalue;

        }

 else {

          attrValues[oneAttr.valueIndex]=attrVal;

        }

      }

 else {

        attrValues[oneAttr.valueIndex]=validate(attrValues,attrName,attrVal,oneAttr.dvIndex,schemaDoc);

      }

    }

 catch (    InvalidDatatypeValueException ide) {

      reportSchemaError("s4s-att-invalid-value",new Object[]{elName,attrName,ide.getMessage()},element);

      if (oneAttr.dfltValue != null)       attrValues[oneAttr.valueIndex]=oneAttr.dfltValue;

    }

    if (elName.equals(SchemaSymbols.ELT_ENUMERATION) && enumAsQName) {

      attrValues[ATTIDX_ENUMNSDECLS]=new SchemaNamespaceSupport(schemaDoc.fNamespaceSupport);

    }

  }

  OneAttr[] reqAttrs=attrList.values;

  for (int i=0; i < reqAttrs.length; i++) {

    OneAttr oneAttr=reqAttrs[i];

    if (oneAttr.dfltValue != null && !fSeen[oneAttr.valueIndex]) {

      attrValues[oneAttr.valueIndex]=oneAttr.dfltValue;

      fromDefault|=(1 << oneAttr.valueIndex);

    }

  }

  attrValues[ATTIDX_FROMDEFAULT]=new Long(fromDefault);

  if (attrValues[ATTIDX_MAXOCCURS] != null) {

    int min=((XInt)attrValues[ATTIDX_MINOCCURS]).intValue();

    int max=((XInt)attrValues[ATTIDX_MAXOCCURS]).intValue();

    if (max != SchemaSymbols.OCCURRENCE_UNBOUNDED) {

      if (min > max) {

        reportSchemaError("p-props-correct.2.1",new Object[]{elName,attrValues[ATTIDX_MINOCCURS],attrValues[ATTIDX_MAXOCCURS]},element);

        attrValues[ATTIDX_MINOCCURS]=attrValues[ATTIDX_MAXOCCURS];

      }

    }

  }

  return attrValues;

}

Location: XSAttributeChecker.java

Content: 

public void checkNonSchemaAttributes(XSGrammarBucket grammarBucket){

  Iterator entries=fNonSchemaAttrs.entrySet().iterator();

  XSAttributeDecl attrDecl;

  while (entries.hasNext()) {

    Map.Entry entry=(Map.Entry)entries.next();

    String attrRName=(String)entry.getKey();

    String attrURI=attrRName.substring(0,attrRName.indexOf(','));

    String attrLocal=attrRName.substring(attrRName.indexOf(',') + 1);

    SchemaGrammar sGrammar=grammarBucket.getGrammar(attrURI);

    if (sGrammar == null) {

      continue;

    }

    attrDecl=sGrammar.getGlobalAttributeDecl(attrLocal);

    if (attrDecl == null) {

      continue;

    }

    XSSimpleType dv=(XSSimpleType)attrDecl.getTypeDefinition();

    if (dv == null) {

      continue;

    }

    Vector values=(Vector)entry.getValue();

    String elName;

    String attrName=(String)values.elementAt(0);

    int count=values.size();

    for (int i=1; i < count; i+=2) {

      elName=(String)values.elementAt(i);

      try {

        dv.validate((String)values.elementAt(i + 1),null,null);

      }

 catch (      InvalidDatatypeValueException ide) {

        reportSchemaError("s4s-att-invalid-value",new Object[]{elName,attrName,ide.getMessage()},null);

      }

    }

  }

}

Location: XSAttributeChecker.java

Content: 

protected Object[] getAvailableArray(){

  if (fArrayPool.length == fPoolPos) {

    fArrayPool=new Object[fPoolPos + INC_POOL_SIZE][];

    for (int i=fPoolPos; i < fArrayPool.length; i++)     fArrayPool[i]=new Object[ATTIDX_COUNT];

  }

  Object[] retArray=fArrayPool[fPoolPos];

  fArrayPool[fPoolPos++]=null;

  System.arraycopy(fTempArray,0,retArray,0,ATTIDX_COUNT - 1);

  retArray[ATTIDX_ISRETURNED]=Boolean.FALSE;

  return retArray;

}

Location: XSAttributeChecker.java

Content: 

static Container getContainer(int size){

  if (size > THRESHOLD)   return new LargeContainer(size);

 else   return new SmallContainer(size);

}

Location: XSAttributeChecker.java

Content: 

OneAttr get(String key){

  OneAttr ret=(OneAttr)items.get(key);

  return ret;

}

Location: XSAttributeChecker.java

Content: 

LargeContainer(int size){

  items=new Hashtable(size * 2 + 1);

  values=new OneAttr[size];

}

Location: XSAttributeChecker.java

Content: 

public static String normalize(String content,short ws){

  int len=content == null ? 0 : content.length();

  if (len == 0 || ws == XSSimpleType.WS_PRESERVE)   return content;

  StringBuffer sb=new StringBuffer();

  if (ws == XSSimpleType.WS_REPLACE) {

    char ch;

    for (int i=0; i < len; i++) {

      ch=content.charAt(i);

      if (ch != 0x9 && ch != 0xa && ch != 0xd)       sb.append(ch);

 else       sb.append((char)0x20);

    }

  }

 else {

    char ch;

    int i;

    boolean isLeading=true;

    for (i=0; i < len; i++) {

      ch=content.charAt(i);

      if (ch != 0x9 && ch != 0xa && ch != 0xd && ch != 0x20) {

        sb.append(ch);

        isLeading=false;

      }

 else {

        for (; i < len - 1; i++) {

          ch=content.charAt(i + 1);

          if (ch != 0x9 && ch != 0xa && ch != 0xd && ch != 0x20)           break;

        }

        if (i < len - 1 && !isLeading)         sb.append((char)0x20);

      }

    }

  }

  return sb.toString();

}

Location: XSAttributeChecker.java

Content: 

public OneAttr(String name,int dvIndex,int valueIndex,Object dfltValue){

  this.name=name;

  this.dvIndex=dvIndex;

  this.valueIndex=valueIndex;

  this.dfltValue=dfltValue;

}

Location: XSAttributeChecker.java

Content: 

void put(String key,OneAttr value){

  items.put(key,value);

  values[pos++]=value;

}

Location: XSAttributeChecker.java

Content: 

public void reset(SymbolTable symbolTable){

  fSymbolTable=symbolTable;

  fNonSchemaAttrs.clear();

}

Location: XSAttributeChecker.java

Content: 

public void resolveNamespace(Element element,Attr[] attrs,SchemaNamespaceSupport nsSupport){

  nsSupport.pushContext();

  int length=attrs.length;

  Attr sattr=null;

  String rawname, prefix, uri;

  for (int i=0; i < length; i++) {

    sattr=attrs[i];

    rawname=DOMUtil.getName(sattr);

    prefix=null;

    if (rawname.equals(XMLSymbols.PREFIX_XMLNS))     prefix=XMLSymbols.EMPTY_STRING;

 else     if (rawname.startsWith("xmlns:"))     prefix=fSymbolTable.addSymbol(DOMUtil.getLocalName(sattr));

    if (prefix != null) {

      uri=fSymbolTable.addSymbol(DOMUtil.getValue(sattr));

      nsSupport.declarePrefix(prefix,uri.length() != 0 ? uri : null);

    }

  }

}

Location: XSAttributeChecker.java

Content: 

public void returnAttrArray(Object[] attrArray,XSDocumentInfo schemaDoc){

  if (schemaDoc != null)   schemaDoc.fNamespaceSupport.popContext();

  if (fPoolPos == 0 || attrArray == null || attrArray.length != ATTIDX_COUNT || ((Boolean)attrArray[ATTIDX_ISRETURNED]).booleanValue()) {

    return;

  }

  attrArray[ATTIDX_ISRETURNED]=Boolean.TRUE;

  if (attrArray[ATTIDX_NONSCHEMA] != null)   ((Vector)attrArray[ATTIDX_NONSCHEMA]).clear();

  fArrayPool[--fPoolPos]=attrArray;

}

Location: XSAttributeChecker.java

Content: 

SmallContainer(int size){

  keys=new String[size];

  values=new OneAttr[size];

}

Location: XSAttributeChecker.java

Content: 

private Object validate(Object[] attrValues,String attr,String ivalue,int dvIndex,XSDocumentInfo schemaDoc) throws InvalidDatatypeValueException {

  if (ivalue == null)   return null;

  String value=XMLChar.trim(ivalue);

  Object retValue=null;

  Vector memberType;

  int choice;

switch (dvIndex) {

case DT_BOOLEAN:

    if (value.equals(SchemaSymbols.ATTVAL_FALSE) || value.equals(SchemaSymbols.ATTVAL_FALSE_0)) {

      retValue=Boolean.FALSE;

    }

 else     if (value.equals(SchemaSymbols.ATTVAL_TRUE) || value.equals(SchemaSymbols.ATTVAL_TRUE_1)) {

      retValue=Boolean.TRUE;

    }

 else {

      throw new InvalidDatatypeValueException("cvc-datatype-valid.1.2.1",new Object[]{value,"boolean"});

    }

  break;

case DT_NONNEGINT:

try {

  if (value.length() > 0 && value.charAt(0) == '+')   value=value.substring(1);

  retValue=fXIntPool.getXInt(Integer.parseInt(value));

}

 catch (NumberFormatException e) {

  throw new InvalidDatatypeValueException("cvc-datatype-valid.1.2.1",new Object[]{value,"nonNegativeInteger"});

}

if (((XInt)retValue).intValue() < 0) throw new InvalidDatatypeValueException("cvc-datatype-valid.1.2.1",new Object[]{value,"nonNegativeInteger"});

break;

case DT_POSINT:

try {

if (value.length() > 0 && value.charAt(0) == '+') value=value.substring(1);

retValue=fXIntPool.getXInt(Integer.parseInt(value));

}

 catch (NumberFormatException e) {

throw new InvalidDatatypeValueException("cvc-datatype-valid.1.2.1",new Object[]{value,"positiveInteger"});

}

if (((XInt)retValue).intValue() <= 0) throw new InvalidDatatypeValueException("cvc-datatype-valid.1.2.1",new Object[]{value,"positiveInteger"});

break;

case DT_BLOCK:

choice=0;

if (value.equals(SchemaSymbols.ATTVAL_POUNDALL)) {

choice=XSConstants.DERIVATION_SUBSTITUTION | XSConstants.DERIVATION_EXTENSION | XSConstants.DERIVATION_RESTRICTION| XSConstants.DERIVATION_LIST| XSConstants.DERIVATION_UNION;

}

 else {

StringTokenizer t=new StringTokenizer(value," \n\t\r");

while (t.hasMoreTokens()) {

String token=t.nextToken();

if (token.equals(SchemaSymbols.ATTVAL_EXTENSION)) {

choice|=XSConstants.DERIVATION_EXTENSION;

}

 else if (token.equals(SchemaSymbols.ATTVAL_RESTRICTION)) {

choice|=XSConstants.DERIVATION_RESTRICTION;

}

 else if (token.equals(SchemaSymbols.ATTVAL_SUBSTITUTION)) {

choice|=XSConstants.DERIVATION_SUBSTITUTION;

}

 else {

throw new InvalidDatatypeValueException("cvc-datatype-valid.1.2.3",new Object[]{value,"(#all | List of (extension | restriction | substitution))"});

}

}

}

retValue=fXIntPool.getXInt(choice);

break;

case DT_BLOCK1:

case DT_FINAL:

choice=0;

if (value.equals(SchemaSymbols.ATTVAL_POUNDALL)) {

choice=XSConstants.DERIVATION_SUBSTITUTION | XSConstants.DERIVATION_EXTENSION | XSConstants.DERIVATION_RESTRICTION| XSConstants.DERIVATION_LIST| XSConstants.DERIVATION_UNION;

}

 else {

StringTokenizer t=new StringTokenizer(value," \n\t\r");

while (t.hasMoreTokens()) {

String token=t.nextToken();

if (token.equals(SchemaSymbols.ATTVAL_EXTENSION)) {

choice|=XSConstants.DERIVATION_EXTENSION;

}

 else if (token.equals(SchemaSymbols.ATTVAL_RESTRICTION)) {

choice|=XSConstants.DERIVATION_RESTRICTION;

}

 else {

throw new InvalidDatatypeValueException("cvc-datatype-valid.1.2.3",new Object[]{value,"(#all | List of (extension | restriction))"});

}

}

}

retValue=fXIntPool.getXInt(choice);

break;

case DT_FINAL1:

choice=0;

if (value.equals(SchemaSymbols.ATTVAL_POUNDALL)) {

choice=XSConstants.DERIVATION_SUBSTITUTION | XSConstants.DERIVATION_EXTENSION | XSConstants.DERIVATION_RESTRICTION| XSConstants.DERIVATION_LIST| XSConstants.DERIVATION_UNION;

}

 else {

StringTokenizer t=new StringTokenizer(value," \n\t\r");

while (t.hasMoreTokens()) {

String token=t.nextToken();

if (token.equals(SchemaSymbols.ATTVAL_LIST)) {

choice|=XSConstants.DERIVATION_LIST;

}

 else if (token.equals(SchemaSymbols.ATTVAL_UNION)) {

choice|=XSConstants.DERIVATION_UNION;

}

 else if (token.equals(SchemaSymbols.ATTVAL_RESTRICTION)) {

choice|=XSConstants.DERIVATION_RESTRICTION;

}

 else {

throw new InvalidDatatypeValueException("cvc-datatype-valid.1.2.3",new Object[]{value,"(#all | List of (list | union | restriction))"});

}

}

}

retValue=fXIntPool.getXInt(choice);

break;

case DT_FINAL2:

choice=0;

if (value.equals(SchemaSymbols.ATTVAL_POUNDALL)) {

choice=XSConstants.DERIVATION_SUBSTITUTION | XSConstants.DERIVATION_EXTENSION | XSConstants.DERIVATION_RESTRICTION| XSConstants.DERIVATION_LIST| XSConstants.DERIVATION_UNION;

}

 else {

StringTokenizer t=new StringTokenizer(value," \n\t\r");

while (t.hasMoreTokens()) {

String token=t.nextToken();

if (token.equals(SchemaSymbols.ATTVAL_EXTENSION)) {

choice|=XSConstants.DERIVATION_EXTENSION;

}

 else if (token.equals(SchemaSymbols.ATTVAL_RESTRICTION)) {

choice|=XSConstants.DERIVATION_RESTRICTION;

}

 else if (token.equals(SchemaSymbols.ATTVAL_LIST)) {

choice|=XSConstants.DERIVATION_LIST;

}

 else if (token.equals(SchemaSymbols.ATTVAL_UNION)) {

choice|=XSConstants.DERIVATION_UNION;

}

 else {

throw new InvalidDatatypeValueException("cvc-datatype-valid.1.2.3",new Object[]{value,"(#all | List of (extension | restriction | list | union))"});

}

}

}

retValue=fXIntPool.getXInt(choice);

break;

case DT_FORM:

if (value.equals(SchemaSymbols.ATTVAL_QUALIFIED)) retValue=INT_QUALIFIED;

 else if (value.equals(SchemaSymbols.ATTVAL_UNQUALIFIED)) retValue=INT_UNQUALIFIED;

 else throw new InvalidDatatypeValueException("cvc-enumeration-valid",new Object[]{value,"(qualified | unqualified)"});

break;

case DT_MAXOCCURS:

if (value.equals(SchemaSymbols.ATTVAL_UNBOUNDED)) {

retValue=INT_UNBOUNDED;

}

 else {

try {

retValue=validate(attrValues,attr,value,DT_NONNEGINT,schemaDoc);

}

 catch (NumberFormatException e) {

throw new InvalidDatatypeValueException("cvc-datatype-valid.1.2.3",new Object[]{value,"(nonNegativeInteger | unbounded)"});

}

}

break;

case DT_MAXOCCURS1:

if (value.equals("1")) retValue=fXIntPool.getXInt(1);

 else throw new InvalidDatatypeValueException("cvc-enumeration-valid",new Object[]{value,"(1)"});

break;

case DT_MEMBERTYPES:

memberType=new Vector();

try {

StringTokenizer t=new StringTokenizer(value," \n\t\r");

while (t.hasMoreTokens()) {

String token=t.nextToken();

QName qname=(QName)fExtraDVs[DT_QNAME].validate(token,schemaDoc.fValidationContext,null);

if (qname.prefix == XMLSymbols.EMPTY_STRING && qname.uri == null && schemaDoc.fIsChameleonSchema) qname.uri=schemaDoc.fTargetNamespace;

memberType.addElement(qname);

}

retValue=memberType;

}

 catch (InvalidDatatypeValueException ide) {

throw new InvalidDatatypeValueException("cvc-datatype-valid.1.2.2",new Object[]{value,"(List of QName)"});

}

break;

case DT_MINOCCURS1:

if (value.equals("0")) retValue=fXIntPool.getXInt(0);

 else if (value.equals("1")) retValue=fXIntPool.getXInt(1);

 else throw new InvalidDatatypeValueException("cvc-enumeration-valid",new Object[]{value,"(0 | 1)"});

break;

case DT_NAMESPACE:

if (value.equals(SchemaSymbols.ATTVAL_TWOPOUNDANY)) {

retValue=INT_ANY_ANY;

}

 else if (value.equals(SchemaSymbols.ATTVAL_TWOPOUNDOTHER)) {

retValue=INT_ANY_NOT;

String[] list=new String[2];

list[0]=schemaDoc.fTargetNamespace;

list[1]=null;

attrValues[ATTIDX_NAMESPACE_LIST]=list;

}

 else {

retValue=INT_ANY_LIST;

fNamespaceList.removeAllElements();

StringTokenizer tokens=new StringTokenizer(value," \n\t\r");

String token;

String tempNamespace;

try {

while (tokens.hasMoreTokens()) {

token=tokens.nextToken();

if (token.equals(SchemaSymbols.ATTVAL_TWOPOUNDLOCAL)) {

tempNamespace=null;

}

 else if (token.equals(SchemaSymbols.ATTVAL_TWOPOUNDTARGETNS)) {

tempNamespace=schemaDoc.fTargetNamespace;

}

 else {

fExtraDVs[DT_ANYURI].validate(token,schemaDoc.fValidationContext,null);

tempNamespace=fSymbolTable.addSymbol(token);

}

if (!fNamespaceList.contains(tempNamespace)) {

fNamespaceList.addElement(tempNamespace);

}

}

}

 catch (InvalidDatatypeValueException ide) {

throw new InvalidDatatypeValueException("cvc-datatype-valid.1.2.3",new Object[]{value,"((##any | ##other) | List of (anyURI | (##targetNamespace | ##local)) )"});

}

int num=fNamespaceList.size();

String[] list=new String[num];

fNamespaceList.copyInto(list);

attrValues[ATTIDX_NAMESPACE_LIST]=list;

}

break;

case DT_PROCESSCONTENTS:

if (value.equals(SchemaSymbols.ATTVAL_STRICT)) retValue=INT_ANY_STRICT;

 else if (value.equals(SchemaSymbols.ATTVAL_LAX)) retValue=INT_ANY_LAX;

 else if (value.equals(SchemaSymbols.ATTVAL_SKIP)) retValue=INT_ANY_SKIP;

 else throw new InvalidDatatypeValueException("cvc-enumeration-valid",new Object[]{value,"(lax | skip | strict)"});

break;

case DT_USE:

if (value.equals(SchemaSymbols.ATTVAL_OPTIONAL)) retValue=INT_USE_OPTIONAL;

 else if (value.equals(SchemaSymbols.ATTVAL_REQUIRED)) retValue=INT_USE_REQUIRED;

 else if (value.equals(SchemaSymbols.ATTVAL_PROHIBITED)) retValue=INT_USE_PROHIBITED;

 else throw new InvalidDatatypeValueException("cvc-enumeration-valid",new Object[]{value,"(optional | prohibited | required)"});

break;

case DT_WHITESPACE:

if (value.equals(SchemaSymbols.ATTVAL_PRESERVE)) retValue=INT_WS_PRESERVE;

 else if (value.equals(SchemaSymbols.ATTVAL_REPLACE)) retValue=INT_WS_REPLACE;

 else if (value.equals(SchemaSymbols.ATTVAL_COLLAPSE)) retValue=INT_WS_COLLAPSE;

 else throw new InvalidDatatypeValueException("cvc-enumeration-valid",new Object[]{value,"(preserve | replace | collapse)"});

break;

}

return retValue;

}

Location: XSAttributeChecker.java

Content: 

public XSAttributeChecker(XSDHandler schemaHandler){

  fSchemaHandler=schemaHandler;

}

