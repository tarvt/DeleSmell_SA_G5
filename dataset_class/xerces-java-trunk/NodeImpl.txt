Location: NodeImpl.java

Content: 

public void addEventListener(String type,EventListener listener,boolean useCapture){

  ownerDocument().addEventListener(this,type,listener,useCapture);

}

Location: NodeImpl.java

Content: 

/** 

 * Compares a node with this node with regard to their position in the  tree and according to the document order. This order can be extended  by module that define additional types of nodes.

 * @param other The node to compare against this node.

 * @return Returns how the given node is positioned relatively to this node.

 * @since DOM Level 3

 * @deprecated

 */

public short compareTreePosition(Node other){

  if (this == other)   return (TREE_POSITION_SAME_NODE | TREE_POSITION_EQUIVALENT);

  short thisType=this.getNodeType();

  short otherType=other.getNodeType();

  if (thisType == Node.ENTITY_NODE || thisType == Node.NOTATION_NODE || otherType == Node.ENTITY_NODE || otherType == Node.NOTATION_NODE) {

    return TREE_POSITION_DISCONNECTED;

  }

  Node node;

  Node thisAncestor=this;

  Node otherAncestor=other;

  int thisDepth=0;

  int otherDepth=0;

  for (node=this; node != null; node=node.getParentNode()) {

    thisDepth+=1;

    if (node == other)     return (TREE_POSITION_ANCESTOR | TREE_POSITION_PRECEDING);

    thisAncestor=node;

  }

  for (node=other; node != null; node=node.getParentNode()) {

    otherDepth+=1;

    if (node == this)     return (TREE_POSITION_DESCENDANT | TREE_POSITION_FOLLOWING);

    otherAncestor=node;

  }

  Node thisNode=this;

  Node otherNode=other;

  int thisAncestorType=thisAncestor.getNodeType();

  int otherAncestorType=otherAncestor.getNodeType();

  if (thisAncestorType == Node.ATTRIBUTE_NODE) {

    thisNode=((AttrImpl)thisAncestor).getOwnerElement();

  }

  if (otherAncestorType == Node.ATTRIBUTE_NODE) {

    otherNode=((AttrImpl)otherAncestor).getOwnerElement();

  }

  if (thisAncestorType == Node.ATTRIBUTE_NODE && otherAncestorType == Node.ATTRIBUTE_NODE && thisNode == otherNode)   return TREE_POSITION_EQUIVALENT;

  if (thisAncestorType == Node.ATTRIBUTE_NODE) {

    thisDepth=0;

    for (node=thisNode; node != null; node=node.getParentNode()) {

      thisDepth+=1;

      if (node == otherNode) {

        return TREE_POSITION_PRECEDING;

      }

      thisAncestor=node;

    }

  }

  if (otherAncestorType == Node.ATTRIBUTE_NODE) {

    otherDepth=0;

    for (node=otherNode; node != null; node=node.getParentNode()) {

      otherDepth+=1;

      if (node == thisNode)       return TREE_POSITION_FOLLOWING;

      otherAncestor=node;

    }

  }

  if (thisAncestor != otherAncestor)   return TREE_POSITION_DISCONNECTED;

  if (thisDepth > otherDepth) {

    for (int i=0; i < thisDepth - otherDepth; i++)     thisNode=thisNode.getParentNode();

    if (thisNode == otherNode)     return TREE_POSITION_PRECEDING;

  }

 else {

    for (int i=0; i < otherDepth - thisDepth; i++)     otherNode=otherNode.getParentNode();

    if (otherNode == thisNode)     return TREE_POSITION_FOLLOWING;

  }

  Node thisNodeP, otherNodeP;

  for (thisNodeP=thisNode.getParentNode(), otherNodeP=otherNode.getParentNode(); thisNodeP != otherNodeP; ) {

    thisNode=thisNodeP;

    otherNode=otherNodeP;

    thisNodeP=thisNodeP.getParentNode();

    otherNodeP=otherNodeP.getParentNode();

  }

  for (Node current=thisNodeP.getFirstChild(); current != null; current=current.getNextSibling()) {

    if (current == otherNode) {

      return TREE_POSITION_PRECEDING;

    }

 else     if (current == thisNode) {

      return TREE_POSITION_FOLLOWING;

    }

  }

  return 0;

}

Location: NodeImpl.java

Content: 

public boolean dispatchEvent(Event event){

  return ownerDocument().dispatchEvent(this,event);

}

Location: NodeImpl.java

Content: 

Node getElementAncestor(Node currentNode){

  Node parent=currentNode.getParentNode();

  while (parent != null) {

    short type=parent.getNodeType();

    if (type == Node.ELEMENT_NODE) {

      return parent;

    }

    parent=parent.getParentNode();

  }

  return null;

}

Location: NodeImpl.java

Content: 

public boolean getReadOnly(){

  return hidden;

}

Location: NodeImpl.java

Content: 

/** 

 * NON-DOM: Returns the user data associated to this node.

 */

public Object getUserData(){

  return ownerDocument().getUserData(this);

}

Location: NodeImpl.java

Content: 

final boolean hasStringValue(){

  return (flags & HASSTRING) != 0;

}

Location: NodeImpl.java

Content: 

final void hasStringValue(boolean value){

  flags=(short)(value ? flags | HASSTRING : flags & ~HASSTRING);

}

Location: NodeImpl.java

Content: 

final boolean internalIsIgnorableWhitespace(){

  return (flags & IGNORABLEWS) != 0;

}

Location: NodeImpl.java

Content: 

final boolean isFirstChild(){

  return (flags & FIRSTCHILD) != 0;

}

Location: NodeImpl.java

Content: 

final void isFirstChild(boolean value){

  flags=(short)(value ? flags | FIRSTCHILD : flags & ~FIRSTCHILD);

}

Location: NodeImpl.java

Content: 

final boolean isIdAttribute(){

  return (flags & ID) != 0;

}

Location: NodeImpl.java

Content: 

final void isIdAttribute(boolean value){

  flags=(short)(value ? flags | ID : flags & ~ID);

}

Location: NodeImpl.java

Content: 

final void isIgnorableWhitespace(boolean value){

  flags=(short)(value ? flags | IGNORABLEWS : flags & ~IGNORABLEWS);

}

Location: NodeImpl.java

Content: 

final void isNormalized(boolean value){

  if (!value && isNormalized() && ownerNode != null) {

    ownerNode.isNormalized(false);

  }

  flags=(short)(value ? flags | NORMALIZED : flags & ~NORMALIZED);

}

Location: NodeImpl.java

Content: 

final boolean isOwned(){

  return (flags & OWNED) != 0;

}

Location: NodeImpl.java

Content: 

final void isOwned(boolean value){

  flags=(short)(value ? flags | OWNED : flags & ~OWNED);

}

Location: NodeImpl.java

Content: 

final void isSpecified(boolean value){

  flags=(short)(value ? flags | SPECIFIED : flags & ~SPECIFIED);

}

Location: NodeImpl.java

Content: 

String lookupNamespacePrefix(String namespaceURI,ElementImpl el){

  String namespace=this.getNamespaceURI();

  String prefix=this.getPrefix();

  if (namespace != null && namespace.equals(namespaceURI)) {

    if (prefix != null) {

      String foundNamespace=el.lookupNamespaceURI(prefix);

      if (foundNamespace != null && foundNamespace.equals(namespaceURI)) {

        return prefix;

      }

    }

  }

  if (this.hasAttributes()) {

    NamedNodeMap map=this.getAttributes();

    int length=map.getLength();

    for (int i=0; i < length; i++) {

      Node attr=map.item(i);

      namespace=attr.getNamespaceURI();

      if (namespace != null && namespace.equals("http://www.w3.org/2000/xmlns/")) {

        String attrPrefix=attr.getPrefix();

        String value=attr.getNodeValue();

        if (((attr.getNodeName().equals("xmlns")) || (attrPrefix != null && attrPrefix.equals("xmlns")) && value.equals(namespaceURI))) {

          String localname=attr.getLocalName();

          String foundNamespace=el.lookupNamespaceURI(localname);

          if (foundNamespace != null && foundNamespace.equals(namespaceURI)) {

            return localname;

          }

        }

      }

    }

  }

  NodeImpl ancestor=(NodeImpl)getElementAncestor(this);

  if (ancestor != null) {

    return ancestor.lookupNamespacePrefix(namespaceURI,el);

  }

  return null;

}

Location: NodeImpl.java

Content: 

final boolean needsSyncChildren(){

  return (flags & SYNCCHILDREN) != 0;

}

Location: NodeImpl.java

Content: 

public final void needsSyncChildren(boolean value){

  flags=(short)(value ? flags | SYNCCHILDREN : flags & ~SYNCCHILDREN);

}

Location: NodeImpl.java

Content: 

final boolean needsSyncData(){

  return (flags & SYNCDATA) != 0;

}

Location: NodeImpl.java

Content: 

final void needsSyncData(boolean value){

  flags=(short)(value ? flags | SYNCDATA : flags & ~SYNCDATA);

}

Location: NodeImpl.java

Content: 

public NodeImpl(){

}

Location: NodeImpl.java

Content: 

/** 

 * No public constructor; only subclasses of Node should be instantiated, and those normally via a Document's factory methods <p> Every Node knows what Document it belongs to.

 */

protected NodeImpl(CoreDocumentImpl ownerDocument){

  ownerNode=ownerDocument;

}

Location: NodeImpl.java

Content: 

public NodeImpl(String prefix,String localpart,String rawname,String uri,short nodeType){

  this.prefix=prefix;

  this.localpart=localpart;

  this.rawname=rawname;

  this.uri=uri;

  this.nodeType=nodeType;

}

Location: NodeImpl.java

Content: 

public void removeEventListener(String type,EventListener listener,boolean useCapture){

  ownerDocument().removeEventListener(this,type,listener,useCapture);

}

Location: NodeImpl.java

Content: 

public void setReadOnly(boolean hide,boolean deep){

  hidden=hide;

}

Location: NodeImpl.java

Content: 

/** 

 * NON-DOM: As an alternative to subclassing the DOM, this implementation has been extended with the ability to attach an object to each node. (If you need multiple objects, you can attach a collection such as a vector or hashtable, then attach your application information to that.) <p><b>Important Note:</b> You are responsible for removing references to your data on nodes that are no longer used. Failure to do so will prevent the nodes, your data is attached to, to be garbage collected until the whole document is.

 * @param data the object to store or null to remove any existing reference

 */

public void setUserData(Object data){

  ownerDocument().setUserData(this,data);

}

