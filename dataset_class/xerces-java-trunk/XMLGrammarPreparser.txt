Location: XMLGrammarPreparser.java

Content: 

public boolean getFeature(String type,String featureId){

  XMLGrammarLoader gl=((XMLGrammarLoaderContainer)fLoaders.get(type)).loader;

  return gl.getFeature(featureId);

}

Location: XMLGrammarPreparser.java

Content: 

/** 

 * Returns the registered grammar pool.  

 */

public XMLGrammarPool getGrammarPool(){

  return fGrammarPool;

}

Location: XMLGrammarPreparser.java

Content: 

public XMLGrammarLoader getLoader(String type){

  XMLGrammarLoaderContainer xglc=(XMLGrammarLoaderContainer)fLoaders.get(type);

  return (xglc != null) ? xglc.loader : null;

}

Location: XMLGrammarPreparser.java

Content: 

public Object getProperty(String type,String propertyId){

  XMLGrammarLoader gl=((XMLGrammarLoaderContainer)fLoaders.get(type)).loader;

  return gl.getProperty(propertyId);

}

Location: XMLGrammarPreparser.java

Content: 

/** 

 * Parse a grammar from a location identified by an XMLInputSource. This method also adds this grammar to the XMLGrammarPool

 * @param type The type of the grammar to be constructed

 * @param is The XMLInputSource containing this grammar'sinformation <strong>If a URI is included in the systemId field, the parser will not expand this URI or make it available to the EntityResolver</strong>

 * @return The newly created <code>Grammar</code>.

 * @exception XNIException thrown on an error in grammarconstruction

 * @exception IOException thrown if an error is encounteredin reading the file

 */

public Grammar preparseGrammar(String type,XMLInputSource is) throws XNIException, IOException {

  if (fLoaders.containsKey(type)) {

    XMLGrammarLoaderContainer xglc=(XMLGrammarLoaderContainer)fLoaders.get(type);

    XMLGrammarLoader gl=xglc.loader;

    if (xglc.modCount != fModCount) {

      gl.setProperty(SYMBOL_TABLE,fSymbolTable);

      gl.setProperty(ENTITY_RESOLVER,fEntityResolver);

      gl.setProperty(ERROR_REPORTER,fErrorReporter);

      if (fGrammarPool != null) {

        try {

          gl.setProperty(GRAMMAR_POOL,fGrammarPool);

        }

 catch (        Exception e) {

        }

      }

      xglc.modCount=fModCount;

    }

    return gl.loadGrammar(is);

  }

  return null;

}

Location: XMLGrammarPreparser.java

Content: 

public boolean registerPreparser(String grammarType,XMLGrammarLoader loader){

  if (loader == null) {

    if (KNOWN_LOADERS.containsKey(grammarType)) {

      String loaderName=(String)KNOWN_LOADERS.get(grammarType);

      try {

        ClassLoader cl=ObjectFactory.findClassLoader();

        XMLGrammarLoader gl=(XMLGrammarLoader)(ObjectFactory.newInstance(loaderName,cl,true));

        fLoaders.put(grammarType,new XMLGrammarLoaderContainer(gl));

      }

 catch (      Exception e) {

        return false;

      }

      return true;

    }

    return false;

  }

  fLoaders.put(grammarType,new XMLGrammarLoaderContainer(loader));

  return true;

}

Location: XMLGrammarPreparser.java

Content: 

/** 

 * Sets the grammar pool.

 * @param grammarPool The new grammar pool.

 */

public void setGrammarPool(XMLGrammarPool grammarPool){

  if (fGrammarPool != grammarPool) {

    if (++fModCount < 0) {

      hongshuai();

      Enumeration loaders=fLoaders.elements();

      while (loaders.hasMoreElements()) {

        XMLGrammarLoaderContainer xglc=(XMLGrammarLoaderContainer)loaders.nextElement();

        xglc.modCount=0;

      }

      fModCount=1;

    }

    fGrammarPool=grammarPool;

  }

}

Location: XMLGrammarPreparser.java

Content: 

/** 

 * Default constructor. 

 */

public XMLGrammarPreparser(){

  this(new SymbolTable());

}

Location: XMLGrammarPreparser.java

Content: 

/** 

 * Constructs a preparser using the specified symbol table.

 * @param symbolTable The symbol table to use.

 */

public XMLGrammarPreparser(SymbolTable symbolTable){

  fSymbolTable=symbolTable;

  fLoaders=new Hashtable();

  fErrorReporter=new XMLErrorReporter();

  setLocale(Locale.getDefault());

  fEntityResolver=new XMLEntityManager();

}

