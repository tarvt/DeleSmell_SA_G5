Location: IdentityConstraintCheckingTest.java

Content: 

private void checkValidResult(){

  assertNoError(DUPLICATE_UNIQUE);

  assertNoError(DUPLICATE_KEY);

  assertNoError(INVALID_KEYREF);

  assertValidity(ItemPSVI.VALIDITY_VALID,fRootNode.getValidity());

  assertValidationAttempted(ItemPSVI.VALIDATION_FULL,fRootNode.getValidationAttempted());

  assertElementName("itemList",fRootNode.getElementDeclaration().getName());

  assertTypeName("itemListType",fRootNode.getTypeDefinition().getName());

  PSVIElementNSImpl child=super.getChild(1);

  assertValidity(ItemPSVI.VALIDITY_VALID,child.getValidity());

  assertValidationAttempted(ItemPSVI.VALIDATION_FULL,child.getValidationAttempted());

  assertElementName("item",child.getElementDeclaration().getName());

  assertTypeName("itemType",child.getTypeDefinition().getName());

  child=super.getChild(2);

  assertValidity(ItemPSVI.VALIDITY_VALID,child.getValidity());

  assertValidationAttempted(ItemPSVI.VALIDATION_FULL,child.getValidationAttempted());

  assertElementName("item",child.getElementDeclaration().getName());

  assertTypeName("itemType",child.getTypeDefinition().getName());

  child=super.getChild(3);

  assertValidity(ItemPSVI.VALIDITY_VALID,child.getValidity());

  assertValidationAttempted(ItemPSVI.VALIDATION_FULL,child.getValidationAttempted());

  assertElementName("item",child.getElementDeclaration().getName());

  assertTypeName("itemType",child.getTypeDefinition().getName());

  child=super.getChild(4);

  assertValidity(ItemPSVI.VALIDITY_VALID,child.getValidity());

  assertValidationAttempted(ItemPSVI.VALIDATION_FULL,child.getValidationAttempted());

  assertElementName("itemRef",child.getElementDeclaration().getName());

  assertTypeName("string",child.getTypeDefinition().getName());

}

Location: IdentityConstraintCheckingTest.java

Content: 

public IdentityConstraintCheckingTest(String name){

  super(name);

}

Location: IdentityConstraintCheckingTest.java

Content: 

public void testSetFalse(){

  try {

    fValidator.setFeature(IDC_CHECKING,false);

  }

 catch (  SAXException e) {

    Assert.fail("Error setting feature.");

  }

  try {

    validateDocument();

  }

 catch (  Exception e) {

    Assert.fail("Validation failed: " + e.getMessage());

  }

  checkValidResult();

}

Location: IdentityConstraintCheckingTest.java

Content: 

public void testSetTrue(){

  try {

    fValidator.setFeature(IDC_CHECKING,true);

  }

 catch (  SAXException e) {

    Assert.fail("Error setting feature.");

  }

  try {

    validateDocument();

  }

 catch (  Exception e) {

    Assert.fail("Validation failed: " + e.getMessage());

  }

  checkDefault();

}

