Location: XMLDTDValidator.java

Content: 

/** 

 * Add default attributes and validate. 

 */

protected void addDTDDefaultAttrsAndValidate(QName elementName,int elementIndex,XMLAttributes attributes) throws XNIException {

  if (elementIndex == -1 || fDTDGrammar == null) {

    return;

  }

  int attlistIndex=fDTDGrammar.getFirstAttributeDeclIndex(elementIndex);

  while (attlistIndex != -1) {

    fDTDGrammar.getAttributeDecl(attlistIndex,fTempAttDecl);

    if (DEBUG_ATTRIBUTES) {

      if (fTempAttDecl != null) {

        XMLElementDecl elementDecl=new XMLElementDecl();

        fDTDGrammar.getElementDecl(elementIndex,elementDecl);

        System.out.println("element: " + (elementDecl.name.localpart));

        System.out.println("attlistIndex " + attlistIndex + "\n"+ "attName : '"+ (fTempAttDecl.name.localpart)+ "'\n"+ "attType : "+ fTempAttDecl.simpleType.type+ "\n"+ "attDefaultType : "+ fTempAttDecl.simpleType.defaultType+ "\n"+ "attDefaultValue : '"+ fTempAttDecl.simpleType.defaultValue+ "'\n"+ attributes.getLength()+ "\n");

      }

    }

    String attPrefix=fTempAttDecl.name.prefix;

    String attLocalpart=fTempAttDecl.name.localpart;

    String attRawName=fTempAttDecl.name.rawname;

    String attType=getAttributeTypeName(fTempAttDecl);

    int attDefaultType=fTempAttDecl.simpleType.defaultType;

    String attValue=null;

    if (fTempAttDecl.simpleType.defaultValue != null) {

      attValue=fTempAttDecl.simpleType.defaultValue;

    }

    boolean specified=false;

    boolean required=attDefaultType == XMLSimpleType.DEFAULT_TYPE_REQUIRED;

    boolean cdata=attType == XMLSymbols.fCDATASymbol;

    if (!cdata || required || attValue != null) {

      int attrCount=attributes.getLength();

      for (int i=0; i < attrCount; i++) {

        if (attributes.getQName(i) == attRawName) {

          specified=true;

          break;

        }

      }

    }

    if (!specified) {

      if (required) {

        if (fPerformValidation) {

          Object[] args={elementName.localpart,attRawName};

          fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,"MSG_REQUIRED_ATTRIBUTE_NOT_SPECIFIED",args,XMLErrorReporter.SEVERITY_ERROR);

        }

      }

 else       if (attValue != null) {

        if (fPerformValidation && fGrammarBucket.getStandalone()) {

          if (fDTDGrammar.getAttributeDeclIsExternal(attlistIndex)) {

            Object[] args={elementName.localpart,attRawName};

            fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,"MSG_DEFAULTED_ATTRIBUTE_NOT_SPECIFIED",args,XMLErrorReporter.SEVERITY_ERROR);

          }

        }

        if (fNamespaces) {

          int index=attRawName.indexOf(':');

          if (index != -1) {

            attPrefix=attRawName.substring(0,index);

            attPrefix=fSymbolTable.addSymbol(attPrefix);

            attLocalpart=attRawName.substring(index + 1);

            attLocalpart=fSymbolTable.addSymbol(attLocalpart);

          }

        }

        fTempQName.setValues(attPrefix,attLocalpart,attRawName,fTempAttDecl.name.uri);

        int newAttr=attributes.addAttribute(fTempQName,attType,attValue);

      }

    }

    attlistIndex=fDTDGrammar.getNextAttributeDeclIndex(attlistIndex);

  }

  int attrCount=attributes.getLength();

  for (int i=0; i < attrCount; i++) {

    String attrRawName=attributes.getQName(i);

    boolean declared=false;

    if (fPerformValidation) {

      if (fGrammarBucket.getStandalone()) {

        String nonNormalizedValue=attributes.getNonNormalizedValue(i);

        if (nonNormalizedValue != null) {

          String entityName=getExternalEntityRefInAttrValue(nonNormalizedValue);

          if (entityName != null) {

            fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,"MSG_REFERENCE_TO_EXTERNALLY_DECLARED_ENTITY_WHEN_STANDALONE",new Object[]{entityName},XMLErrorReporter.SEVERITY_ERROR);

          }

        }

      }

    }

    int attDefIndex=-1;

    int position=fDTDGrammar.getFirstAttributeDeclIndex(elementIndex);

    while (position != -1) {

      fDTDGrammar.getAttributeDecl(position,fTempAttDecl);

      if (fTempAttDecl.name.rawname == attrRawName) {

        attDefIndex=position;

        declared=true;

        break;

      }

      position=fDTDGrammar.getNextAttributeDeclIndex(position);

    }

    if (!declared) {

      if (fPerformValidation) {

        Object[] args={elementName.rawname,attrRawName};

        fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,"MSG_ATTRIBUTE_NOT_DECLARED",args,XMLErrorReporter.SEVERITY_ERROR);

      }

      continue;

    }

    String type=getAttributeTypeName(fTempAttDecl);

    attributes.setType(i,type);

    attributes.getAugmentations(i).putItem(Constants.ATTRIBUTE_DECLARED,Boolean.TRUE);

    boolean changedByNormalization=false;

    String oldValue=attributes.getValue(i);

    String attrValue=oldValue;

    if (attributes.isSpecified(i) && type != XMLSymbols.fCDATASymbol) {

      changedByNormalization=normalizeAttrValue(attributes,i);

      attrValue=attributes.getValue(i);

      if (fPerformValidation && fGrammarBucket.getStandalone() && changedByNormalization&& fDTDGrammar.getAttributeDeclIsExternal(position)) {

        fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,"MSG_ATTVALUE_CHANGED_DURING_NORMALIZATION_WHEN_STANDALONE",new Object[]{attrRawName,oldValue,attrValue},XMLErrorReporter.SEVERITY_ERROR);

      }

    }

    if (!fPerformValidation) {

      continue;

    }

    if (fTempAttDecl.simpleType.defaultType == XMLSimpleType.DEFAULT_TYPE_FIXED) {

      String defaultValue=fTempAttDecl.simpleType.defaultValue;

      if (!attrValue.equals(defaultValue)) {

        Object[] args={elementName.localpart,attrRawName,attrValue,defaultValue};

        fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,"MSG_FIXED_ATTVALUE_INVALID",args,XMLErrorReporter.SEVERITY_ERROR);

      }

    }

    if (fTempAttDecl.simpleType.type == XMLSimpleType.TYPE_ENTITY || fTempAttDecl.simpleType.type == XMLSimpleType.TYPE_ENUMERATION || fTempAttDecl.simpleType.type == XMLSimpleType.TYPE_ID || fTempAttDecl.simpleType.type == XMLSimpleType.TYPE_IDREF || fTempAttDecl.simpleType.type == XMLSimpleType.TYPE_NMTOKEN || fTempAttDecl.simpleType.type == XMLSimpleType.TYPE_NOTATION) {

      validateDTDattribute(elementName,attrValue,fTempAttDecl);

    }

  }

}

Location: XMLDTDValidator.java

Content: 

/** 

 * Check that the content of an element is valid. <p> This is the method of primary concern to the validator. This method is called upon the scanner reaching the end tag of an element. At that time, the element's children must be structurally validated, so it calls this method. The index of the element being checked (in the decl pool), is provided as well as an array of element name indexes of the children. The validator must confirm that this element can have these children in this order. <p> This can also be called to do 'what if' testing of content models just to see if they would be valid. <p> Note that the element index is an index into the element decl pool, whereas the children indexes are name indexes, i.e. into the string pool. <p> A value of -1 in the children array indicates a PCDATA node. All other indexes will be positive and represent child elements. The count can be zero, since some elements have the EMPTY content model and that must be confirmed.

 * @param elementIndex The index within the <code>ElementDeclPool</code> of thiselement.

 * @param childCount The number of entries in the <code>children</code> array.

 * @param children The children of this element.  

 * @return The value -1 if fully valid, else the 0 based index of the childthat first failed. If the value returned is equal to the number of children, then additional content is required to reach a valid ending state.

 * @exception Exception Thrown on error.

 */

private int checkContent(int elementIndex,QName[] children,int childOffset,int childCount) throws XNIException {

  fDTDGrammar.getElementDecl(elementIndex,fTempElementDecl);

  final String elementType=fCurrentElement.rawname;

  final int contentType=fCurrentContentSpecType;

  if (contentType == XMLElementDecl.TYPE_EMPTY) {

    if (childCount != 0) {

      return 0;

    }

  }

 else   if (contentType == XMLElementDecl.TYPE_ANY) {

  }

 else   if (contentType == XMLElementDecl.TYPE_MIXED || contentType == XMLElementDecl.TYPE_CHILDREN) {

    ContentModelValidator cmElem=null;

    cmElem=fTempElementDecl.contentModelValidator;

    int result=cmElem.validate(children,childOffset,childCount);

    return result;

  }

 else   if (contentType == -1) {

  }

 else   if (contentType == XMLElementDecl.TYPE_SIMPLE) {

  }

 else {

  }

  return -1;

}

Location: XMLDTDValidator.java

Content: 

protected void endNamespaceScope(QName element,Augmentations augs,boolean isEmpty){

  if (fDocumentHandler != null && !isEmpty) {

    fDocumentHandler.endElement(fCurrentElement,augs);

  }

}

Location: XMLDTDValidator.java

Content: 

/** 

 * ensure element stack capacity 

 */

private void ensureStackCapacity(int newElementDepth){

  if (newElementDepth == fElementQNamePartsStack.length) {

    QName[] newStackOfQueue=new QName[newElementDepth * 2];

    System.arraycopy(this.fElementQNamePartsStack,0,newStackOfQueue,0,newElementDepth);

    fElementQNamePartsStack=newStackOfQueue;

    QName qname=fElementQNamePartsStack[newElementDepth];

    if (qname == null) {

      for (int i=newElementDepth; i < fElementQNamePartsStack.length; i++) {

        fElementQNamePartsStack[i]=new QName();

      }

    }

    int[] newStack=new int[newElementDepth * 2];

    System.arraycopy(fElementIndexStack,0,newStack,0,newElementDepth);

    fElementIndexStack=newStack;

    newStack=new int[newElementDepth * 2];

    System.arraycopy(fContentSpecTypeStack,0,newStack,0,newElementDepth);

    fContentSpecTypeStack=newStack;

  }

}

Location: XMLDTDValidator.java

Content: 

/** 

 * convert attribute type from ints to strings 

 */

private String getAttributeTypeName(XMLAttributeDecl attrDecl){

switch (attrDecl.simpleType.type) {

case XMLSimpleType.TYPE_ENTITY:

{

      return attrDecl.simpleType.list ? XMLSymbols.fENTITIESSymbol : XMLSymbols.fENTITYSymbol;

    }

case XMLSimpleType.TYPE_ENUMERATION:

{

    StringBuffer buffer=new StringBuffer();

    buffer.append('(');

    for (int i=0; i < attrDecl.simpleType.enumeration.length; i++) {

      if (i > 0) {

        buffer.append('|');

      }

      buffer.append(attrDecl.simpleType.enumeration[i]);

    }

    buffer.append(')');

    return fSymbolTable.addSymbol(buffer.toString());

  }

case XMLSimpleType.TYPE_ID:

{

  return XMLSymbols.fIDSymbol;

}

case XMLSimpleType.TYPE_IDREF:

{

return attrDecl.simpleType.list ? XMLSymbols.fIDREFSSymbol : XMLSymbols.fIDREFSymbol;

}

case XMLSimpleType.TYPE_NMTOKEN:

{

return attrDecl.simpleType.list ? XMLSymbols.fNMTOKENSSymbol : XMLSymbols.fNMTOKENSymbol;

}

case XMLSimpleType.TYPE_NOTATION:

{

return XMLSymbols.fNOTATIONSymbol;

}

}

return XMLSymbols.fCDATASymbol;

}

Location: XMLDTDValidator.java

Content: 

/** 

 * Returns the content spec type for an element index. 

 */

private int getContentSpecType(int elementIndex){

  int contentSpecType=-1;

  if (elementIndex > -1) {

    if (fDTDGrammar.getElementDecl(elementIndex,fTempElementDecl)) {

      contentSpecType=fTempElementDecl.type;

    }

  }

  return contentSpecType;

}

Location: XMLDTDValidator.java

Content: 

/** 

 * Checks entities in attribute values for standalone VC. 

 */

protected String getExternalEntityRefInAttrValue(String nonNormalizedValue){

  int valLength=nonNormalizedValue.length();

  int ampIndex=nonNormalizedValue.indexOf('&');

  while (ampIndex != -1) {

    if (ampIndex + 1 < valLength && nonNormalizedValue.charAt(ampIndex + 1) != '#') {

      int semicolonIndex=nonNormalizedValue.indexOf(';',ampIndex + 1);

      String entityName=nonNormalizedValue.substring(ampIndex + 1,semicolonIndex);

      entityName=fSymbolTable.addSymbol(entityName);

      int entIndex=fDTDGrammar.getEntityDeclIndex(entityName);

      if (entIndex > -1) {

        fDTDGrammar.getEntityDecl(entIndex,fEntityDecl);

        if (fEntityDecl.inExternal || (entityName=getExternalEntityRefInAttrValue(fEntityDecl.value)) != null) {

          return entityName;

        }

      }

    }

    ampIndex=nonNormalizedValue.indexOf('&',ampIndex + 1);

  }

  return null;

}

Location: XMLDTDValidator.java

Content: 

DTDGrammarBucket getGrammarBucket(){

  return fGrammarBucket;

}

Location: XMLDTDValidator.java

Content: 

/** 

 * Handle end element. 

 */

protected void handleEndElement(QName element,Augmentations augs,boolean isEmpty) throws XNIException {

  fElementDepth--;

  if (fPerformValidation) {

    int elementIndex=fCurrentElementIndex;

    if (elementIndex != -1 && fCurrentContentSpecType != -1) {

      QName children[]=fElementChildren;

      int childrenOffset=fElementChildrenOffsetStack[fElementDepth + 1] + 1;

      int childrenLength=fElementChildrenLength - childrenOffset;

      int result=checkContent(elementIndex,children,childrenOffset,childrenLength);

      if (result != -1) {

        fDTDGrammar.getElementDecl(elementIndex,fTempElementDecl);

        if (fTempElementDecl.type == XMLElementDecl.TYPE_EMPTY) {

          fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,"MSG_CONTENT_INVALID",new Object[]{element.rawname,"EMPTY"},XMLErrorReporter.SEVERITY_ERROR);

        }

 else {

          String messageKey=result != childrenLength ? "MSG_CONTENT_INVALID" : "MSG_CONTENT_INCOMPLETE";

          fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,messageKey,new Object[]{element.rawname,fDTDGrammar.getContentSpecAsString(elementIndex)},XMLErrorReporter.SEVERITY_ERROR);

        }

      }

    }

    fElementChildrenLength=fElementChildrenOffsetStack[fElementDepth + 1] + 1;

  }

  endNamespaceScope(fCurrentElement,augs,isEmpty);

  if (fElementDepth < -1) {

    throw new RuntimeException("FWK008 Element stack underflow");

  }

  if (fElementDepth < 0) {

    fCurrentElement.clear();

    fCurrentElementIndex=-1;

    fCurrentContentSpecType=-1;

    fInElementContent=false;

    if (fPerformValidation) {

      Iterator invIdRefs=fValidationState.checkIDRefID();

      if (invIdRefs != null) {

        while (invIdRefs.hasNext()) {

          fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,"MSG_ELEMENT_WITH_ID_REQUIRED",new Object[]{invIdRefs.next()},XMLErrorReporter.SEVERITY_ERROR);

        }

      }

    }

    return;

  }

  fCurrentElement.setValues(fElementQNamePartsStack[fElementDepth]);

  fCurrentElementIndex=fElementIndexStack[fElementDepth];

  fCurrentContentSpecType=fContentSpecTypeStack[fElementDepth];

  fInElementContent=(fCurrentContentSpecType == XMLElementDecl.TYPE_CHILDREN);

}

Location: XMLDTDValidator.java

Content: 

public final boolean hasGrammar(){

  return (fDTDGrammar != null);

}

Location: XMLDTDValidator.java

Content: 

/** 

 * Returns true if invalid standalone attribute definition. 

 */

protected boolean invalidStandaloneAttDef(QName element,QName attribute){

  boolean state=true;

  return state;

}

Location: XMLDTDValidator.java

Content: 

/** 

 * Normalize the attribute value of a non CDATA attributes collapsing sequences of space characters (x20)

 * @param attributes The list of attributes

 * @param index The index of the attribute to normalize

 */

private boolean normalizeAttrValue(XMLAttributes attributes,int index){

  boolean leadingSpace=true;

  boolean spaceStart=false;

  boolean readingNonSpace=false;

  int count=0;

  int eaten=0;

  String attrValue=attributes.getValue(index);

  char[] attValue=new char[attrValue.length()];

  fBuffer.setLength(0);

  attrValue.getChars(0,attrValue.length(),attValue,0);

  for (int i=0; i < attValue.length; i++) {

    if (attValue[i] == ' ') {

      if (readingNonSpace) {

        spaceStart=true;

        readingNonSpace=false;

      }

      if (spaceStart && !leadingSpace) {

        spaceStart=false;

        fBuffer.append(attValue[i]);

        count++;

      }

 else {

        if (leadingSpace || !spaceStart) {

          eaten++;

        }

      }

    }

 else {

      readingNonSpace=true;

      spaceStart=false;

      leadingSpace=false;

      fBuffer.append(attValue[i]);

      count++;

    }

  }

  if (count > 0 && fBuffer.charAt(count - 1) == ' ') {

    fBuffer.setLength(count - 1);

  }

  String newValue=fBuffer.toString();

  attributes.setValue(index,newValue);

  return !attrValue.equals(newValue);

}

Location: XMLDTDValidator.java

Content: 

/** 

 * Root element specified. 

 */

private final void rootElementSpecified(QName rootElement) throws XNIException {

  if (fPerformValidation) {

    String root1=fRootElement.rawname;

    String root2=rootElement.rawname;

    if (root1 == null || !root1.equals(root2)) {

      fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,"RootElementTypeMustMatchDoctypedecl",new Object[]{root1,root2},XMLErrorReporter.SEVERITY_ERROR);

    }

  }

}

Location: XMLDTDValidator.java

Content: 

protected void startNamespaceScope(QName element,XMLAttributes attributes,Augmentations augs){

}

Location: XMLDTDValidator.java

Content: 

public final boolean validate(){

  return (fSchemaType != Constants.NS_XMLSCHEMA) && (!fDynamicValidation && fValidation || fDynamicValidation && fSeenDoctypeDecl) && (fDTDValidation || fSeenDoctypeDecl);

}

Location: XMLDTDValidator.java

Content: 

/** 

 * Validate attributes in DTD fashion.

 */

protected void validateDTDattribute(QName element,String attValue,XMLAttributeDecl attributeDecl) throws XNIException {

switch (attributeDecl.simpleType.type) {

case XMLSimpleType.TYPE_ENTITY:

{

      boolean isAlistAttribute=attributeDecl.simpleType.list;

      try {

        if (isAlistAttribute) {

          fValENTITIES.validate(attValue,fValidationState);

        }

 else {

          fValENTITY.validate(attValue,fValidationState);

        }

      }

 catch (      InvalidDatatypeValueException ex) {

        fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,ex.getKey(),ex.getArgs(),XMLErrorReporter.SEVERITY_ERROR);

      }

      break;

    }

case XMLSimpleType.TYPE_NOTATION:

case XMLSimpleType.TYPE_ENUMERATION:

{

    boolean found=false;

    String[] enumVals=attributeDecl.simpleType.enumeration;

    if (enumVals == null) {

      found=false;

    }

 else     for (int i=0; i < enumVals.length; i++) {

      if (attValue == enumVals[i] || attValue.equals(enumVals[i])) {

        found=true;

        break;

      }

    }

    if (!found) {

      StringBuffer enumValueString=new StringBuffer();

      if (enumVals != null)       for (int i=0; i < enumVals.length; i++) {

        enumValueString.append(enumVals[i] + " ");

      }

      fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,"MSG_ATTRIBUTE_VALUE_NOT_IN_LIST",new Object[]{attributeDecl.name.rawname,attValue,enumValueString},XMLErrorReporter.SEVERITY_ERROR);

    }

    break;

  }

case XMLSimpleType.TYPE_ID:

{

  try {

    fValID.validate(attValue,fValidationState);

  }

 catch (  InvalidDatatypeValueException ex) {

    fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,ex.getKey(),ex.getArgs(),XMLErrorReporter.SEVERITY_ERROR);

  }

  break;

}

case XMLSimpleType.TYPE_IDREF:

{

boolean isAlistAttribute=attributeDecl.simpleType.list;

try {

  if (isAlistAttribute) {

    fValIDRefs.validate(attValue,fValidationState);

  }

 else {

    fValIDRef.validate(attValue,fValidationState);

  }

}

 catch (InvalidDatatypeValueException ex) {

  if (isAlistAttribute) {

    fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,"IDREFSInvalid",new Object[]{attValue},XMLErrorReporter.SEVERITY_ERROR);

  }

 else {

    fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,ex.getKey(),ex.getArgs(),XMLErrorReporter.SEVERITY_ERROR);

  }

}

break;

}

case XMLSimpleType.TYPE_NMTOKEN:

{

boolean isAlistAttribute=attributeDecl.simpleType.list;

try {

if (isAlistAttribute) {

  fValNMTOKENS.validate(attValue,fValidationState);

}

 else {

  fValNMTOKEN.validate(attValue,fValidationState);

}

}

 catch (InvalidDatatypeValueException ex) {

if (isAlistAttribute) {

  fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,"NMTOKENSInvalid",new Object[]{attValue},XMLErrorReporter.SEVERITY_ERROR);

}

 else {

  fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,"NMTOKENInvalid",new Object[]{attValue},XMLErrorReporter.SEVERITY_ERROR);

}

}

break;

}

}

}

Location: XMLDTDValidator.java

Content: 

/** 

 * Default constructor. 

 */

public XMLDTDValidator(){

  for (int i=0; i < fElementQNamePartsStack.length; i++) {

    fElementQNamePartsStack[i]=new QName();

  }

  fGrammarBucket=new DTDGrammarBucket();

}

