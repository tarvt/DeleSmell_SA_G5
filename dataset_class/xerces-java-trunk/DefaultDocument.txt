Location: DefaultDocument.java

Content: 

/** 

 * DOM Level 3

 */

public Node adoptNode(Node source) throws DOMException {

  throw new DOMException(DOMException.NOT_SUPPORTED_ERR,"Method not supported");

}

Location: DefaultDocument.java

Content: 

public Attr createAttributeNS(String namespaceURI,String qualifiedName) throws DOMException {

  throw new DOMException(DOMException.NOT_SUPPORTED_ERR,"Method not supported");

}

Location: DefaultDocument.java

Content: 

public Attr createAttribute(String name) throws DOMException {

  throw new DOMException(DOMException.NOT_SUPPORTED_ERR,"Method not supported");

}

Location: DefaultDocument.java

Content: 

public CDATASection createCDATASection(String data) throws DOMException {

  throw new DOMException(DOMException.NOT_SUPPORTED_ERR,"Method not supported");

}

Location: DefaultDocument.java

Content: 

public DocumentFragment createDocumentFragment(){

  return null;

}

Location: DefaultDocument.java

Content: 

public Element createElementNS(String namespaceURI,String qualifiedName) throws DOMException {

  throw new DOMException(DOMException.NOT_SUPPORTED_ERR,"Method not supported");

}

Location: DefaultDocument.java

Content: 

public Element createElement(String tagName) throws DOMException {

  throw new DOMException(DOMException.NOT_SUPPORTED_ERR,"Method not supported");

}

Location: DefaultDocument.java

Content: 

public EntityReference createEntityReference(String name) throws DOMException {

  throw new DOMException(DOMException.NOT_SUPPORTED_ERR,"Method not supported");

}

Location: DefaultDocument.java

Content: 

public Text createTextNode(String data){

  return null;

}

Location: DefaultDocument.java

Content: 

public DefaultDocument(){

  this.nodeType=Node.DOCUMENT_NODE;

}

Location: DefaultDocument.java

Content: 

public DocumentType getDoctype(){

  return null;

}

Location: DefaultDocument.java

Content: 

/** 

 * The location of the document or <code>null</code> if undefined. <br>Beware that when the <code>Document</code> supports the feature  "HTML" , the href attribute of the HTML BASE element takes precedence  over this attribute.

 * @since DOM Level 3

 */

public String getDocumentURI(){

  return fDocumentURI;

}

Location: DefaultDocument.java

Content: 

public Element getElementById(String elementId){

  return null;

}

Location: DefaultDocument.java

Content: 

public String getInputEncoding(){

  return null;

}

Location: DefaultDocument.java

Content: 

/** 

 * An attribute specifying whether errors checking is enforced or not.  When set to <code>false</code>, the implementation is free to not  test every possible error case normally defined on DOM operations,  and not raise any <code>DOMException</code>. In case of error, the  behavior is undefined. This attribute is <code>true</code> by  defaults.

 * @since DOM Level 3

 */

public boolean getStrictErrorChecking(){

  return false;

}

Location: DefaultDocument.java

Content: 

/** 

 * public void setInputEncoding(String actualEncoding){ throw new DOMException(DOMException.NOT_SUPPORTED_ERR, "Method not supported"); }

 */

public String getXmlEncoding(){

  return null;

}

Location: DefaultDocument.java

Content: 

/** 

 * An attribute specifying, as part of the XML declaration, whether this  document is standalone. <br> This attribute represents the property [standalone] defined in . 

 * @since DOM Level 3

 */

public boolean getXmlStandalone(){

  throw new DOMException(DOMException.NOT_SUPPORTED_ERR,"Method not supported");

}

Location: DefaultDocument.java

Content: 

public Node importNode(Node importedNode,boolean deep) throws DOMException {

  throw new DOMException(DOMException.NOT_SUPPORTED_ERR,"Method not supported");

}

Location: DefaultDocument.java

Content: 

/** 

 * DOM Level 3

 */

public void normalizeDocument(){

  throw new DOMException(DOMException.NOT_SUPPORTED_ERR,"Method not supported");

}

Location: DefaultDocument.java

Content: 

/** 

 * DOM Level 3

 */

public Node renameNode(Node n,String namespaceURI,String name) throws DOMException {

  throw new DOMException(DOMException.NOT_SUPPORTED_ERR,"Method not supported");

}

Location: DefaultDocument.java

Content: 

/** 

 * The location of the document or <code>null</code> if undefined. <br>Beware that when the <code>Document</code> supports the feature  "HTML" , the href attribute of the HTML BASE element takes precedence  over this attribute.

 * @since DOM Level 3

 */

public void setDocumentURI(String documentURI){

  fDocumentURI=documentURI;

}

Location: DefaultDocument.java

Content: 

/** 

 * An attribute specifying whether errors checking is enforced or not.  When set to <code>false</code>, the implementation is free to not  test every possible error case normally defined on DOM operations,  and not raise any <code>DOMException</code>. In case of error, the  behavior is undefined. This attribute is <code>true</code> by  defaults.

 * @since DOM Level 3

 */

public void setStrictErrorChecking(boolean strictErrorChecking){

  throw new DOMException(DOMException.NOT_SUPPORTED_ERR,"Method not supported");

}

Location: DefaultDocument.java

Content: 

/** 

 * An attribute specifying, as part of the XML declaration, whether this  document is standalone. <br> This attribute represents the property [standalone] defined in . 

 * @since DOM Level 3

 */

public void setXmlStandalone(boolean standalone){

  throw new DOMException(DOMException.NOT_SUPPORTED_ERR,"Method not supported");

}

Location: DefaultDocument.java

Content: 

/** 

 * An attribute specifying, as part of the XML declaration, the version  number of this document. This is <code>null</code> when unspecified. <br> This attribute represents the property [version] defined in . 

 * @exception DOMException NOT_SUPPORTED_ERR: Raised if the version is set to a value that is  not supported by this <code>Document</code>.

 * @since DOM Level 3

 */

public void setXmlVersion(String version) throws DOMException {

  throw new DOMException(DOMException.NOT_SUPPORTED_ERR,"Method not supported");

}

