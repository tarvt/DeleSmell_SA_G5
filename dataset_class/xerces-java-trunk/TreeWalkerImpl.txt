Location: TreeWalkerImpl.java

Content: 

/** 

 * Return the first child Node from the current node,  after applying filter, whatToshow. If result is not null, set the current Node.

 */

public Node firstChild(){

  if (fCurrentNode == null)   return null;

  Node node=getFirstChild(fCurrentNode);

  if (node != null) {

    fCurrentNode=node;

  }

  return node;

}

Location: TreeWalkerImpl.java

Content: 

/** 

 * Return the current Node. 

 */

public Node getCurrentNode(){

  return fCurrentNode;

}

Location: TreeWalkerImpl.java

Content: 

/** 

 * Internal function. Return the first child Node, from the input node after applying filter, whatToshow. The current node is not consulted or set.

 */

Node getFirstChild(Node node){

  if (node == null)   return null;

  if (!fEntityReferenceExpansion && node.getNodeType() == Node.ENTITY_REFERENCE_NODE)   return null;

  Node newNode=node.getFirstChild();

  if (newNode == null)   return null;

  int accept=acceptNode(newNode);

  if (accept == NodeFilter.FILTER_ACCEPT)   return newNode;

 else   if (accept == NodeFilter.FILTER_SKIP && newNode.hasChildNodes()) {

    Node fChild=getFirstChild(newNode);

    if (fChild == null) {

      return getNextSibling(newNode,node);

    }

    return fChild;

  }

 else {

    return getNextSibling(newNode,node);

  }

}

Location: TreeWalkerImpl.java

Content: 

/** 

 * Internal function. Return the last child Node, from the input node after applying filter, whatToshow. The current node is not consulted or set.

 */

Node getLastChild(Node node){

  if (node == null)   return null;

  if (!fEntityReferenceExpansion && node.getNodeType() == Node.ENTITY_REFERENCE_NODE)   return null;

  Node newNode=node.getLastChild();

  if (newNode == null)   return null;

  int accept=acceptNode(newNode);

  if (accept == NodeFilter.FILTER_ACCEPT)   return newNode;

 else   if (accept == NodeFilter.FILTER_SKIP && newNode.hasChildNodes()) {

    Node lChild=getLastChild(newNode);

    if (lChild == null) {

      return getPreviousSibling(newNode,node);

    }

    return lChild;

  }

 else {

    return getPreviousSibling(newNode,node);

  }

}

Location: TreeWalkerImpl.java

Content: 

/** 

 * Internal function. Return the nextSibling Node, from the input node after applying filter, whatToshow. The current node is not consulted or set.

 */

Node getNextSibling(Node node){

  return getNextSibling(node,fRoot);

}

Location: TreeWalkerImpl.java

Content: 

/** 

 * Internal function. Return the nextSibling Node, from the input node after applying filter, whatToshow. NEVER TRAVERSES ABOVE THE SPECIFIED ROOT NODE.  The current node is not consulted or set.

 */

Node getNextSibling(Node node,Node root){

  if (node == null || isSameNode(node,root))   return null;

  Node newNode=node.getNextSibling();

  if (newNode == null) {

    newNode=node.getParentNode();

    if (newNode == null || isSameNode(newNode,root))     return null;

    int parentAccept=acceptNode(newNode);

    if (parentAccept == NodeFilter.FILTER_SKIP) {

      return getNextSibling(newNode,root);

    }

    return null;

  }

  int accept=acceptNode(newNode);

  if (accept == NodeFilter.FILTER_ACCEPT)   return newNode;

 else   if (accept == NodeFilter.FILTER_SKIP) {

    Node fChild=getFirstChild(newNode);

    if (fChild == null) {

      return getNextSibling(newNode,root);

    }

    return fChild;

  }

 else {

    return getNextSibling(newNode,root);

  }

}

Location: TreeWalkerImpl.java

Content: 

/** 

 * Internal function. Return the parent Node, from the input node after applying filter, whatToshow. The current node is not consulted or set.

 */

Node getParentNode(Node node){

  if (node == null || isSameNode(node,fRoot))   return null;

  Node newNode=node.getParentNode();

  if (newNode == null)   return null;

  int accept=acceptNode(newNode);

  if (accept == NodeFilter.FILTER_ACCEPT)   return newNode;

 else {

    return getParentNode(newNode);

  }

}

Location: TreeWalkerImpl.java

Content: 

/** 

 * Internal function. Return the previous sibling Node, from the input node after applying filter, whatToshow. The current node is not consulted or set.

 */

Node getPreviousSibling(Node node){

  return getPreviousSibling(node,fRoot);

}

Location: TreeWalkerImpl.java

Content: 

/** 

 * Internal function. Return the previousSibling Node, from the input node after applying filter, whatToshow. NEVER TRAVERSES ABOVE THE SPECIFIED ROOT NODE.  The current node is not consulted or set.

 */

Node getPreviousSibling(Node node,Node root){

  if (node == null || isSameNode(node,root))   return null;

  Node newNode=node.getPreviousSibling();

  if (newNode == null) {

    newNode=node.getParentNode();

    if (newNode == null || isSameNode(newNode,root))     return null;

    int parentAccept=acceptNode(newNode);

    if (parentAccept == NodeFilter.FILTER_SKIP) {

      return getPreviousSibling(newNode,root);

    }

    return null;

  }

  int accept=acceptNode(newNode);

  if (accept == NodeFilter.FILTER_ACCEPT)   return newNode;

 else   if (accept == NodeFilter.FILTER_SKIP) {

    Node fChild=getLastChild(newNode);

    if (fChild == null) {

      return getPreviousSibling(newNode,root);

    }

    return fChild;

  }

 else {

    return getPreviousSibling(newNode,root);

  }

}

Location: TreeWalkerImpl.java

Content: 

/** 

 * Returns true if <code>m</code> is the same node <code>n</code>.

 */

private boolean isSameNode(Node m,Node n){

  return (fUseIsSameNode) ? m.isSameNode(n) : m == n;

}

Location: TreeWalkerImpl.java

Content: 

/** 

 * Return the next sibling Node from the current node,  after applying filter, whatToshow. If result is not null, set the current Node.

 */

public Node nextSibling(){

  if (fCurrentNode == null)   return null;

  Node node=getNextSibling(fCurrentNode);

  if (node != null) {

    fCurrentNode=node;

  }

  return node;

}

Location: TreeWalkerImpl.java

Content: 

/** 

 * Return the current Node. 

 */

public void setCurrentNode(Node node){

  if (node == null) {

    String msg=DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN,"NOT_SUPPORTED_ERR",null);

    throw new DOMException(DOMException.NOT_SUPPORTED_ERR,msg);

  }

  fCurrentNode=node;

}

Location: TreeWalkerImpl.java

Content: 

public void setWhatShow(int whatToShow){

  fWhatToShow=whatToShow;

}

Location: TreeWalkerImpl.java

Content: 

/** 

 * Public constructor 

 */

public TreeWalkerImpl(Node root,int whatToShow,NodeFilter nodeFilter,boolean entityReferenceExpansion){

  fCurrentNode=root;

  fRoot=root;

  fUseIsSameNode=useIsSameNode(root);

  fWhatToShow=whatToShow;

  fNodeFilter=nodeFilter;

  fEntityReferenceExpansion=entityReferenceExpansion;

}

