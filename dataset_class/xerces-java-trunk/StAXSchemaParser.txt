Location: StAXSchemaParser.java

Content: 

private void addNamespaceDeclarations(){

  String prefix=null;

  String localpart=null;

  String rawname=null;

  String nsPrefix=null;

  String nsURI=null;

  final Iterator iter=fDeclaredPrefixes.iterator();

  while (iter.hasNext()) {

    nsPrefix=(String)iter.next();

    nsURI=fNamespaceContext.getURI(nsPrefix);

    if (nsPrefix.length() > 0) {

      prefix=XMLSymbols.PREFIX_XMLNS;

      localpart=nsPrefix;

      fStringBuffer.clear();

      fStringBuffer.append(prefix);

      fStringBuffer.append(':');

      fStringBuffer.append(localpart);

      rawname=fSymbolTable.addSymbol(fStringBuffer.ch,fStringBuffer.offset,fStringBuffer.length);

    }

 else {

      prefix=XMLSymbols.EMPTY_STRING;

      localpart=XMLSymbols.PREFIX_XMLNS;

      rawname=XMLSymbols.PREFIX_XMLNS;

    }

    fAttributeQName.setValues(prefix,localpart,rawname,NamespaceContext.XMLNS_URI);

    fAttributes.addAttribute(fAttributeQName,XMLSymbols.fCDATASymbol,(nsURI != null) ? nsURI : XMLSymbols.EMPTY_STRING);

  }

}

Location: StAXSchemaParser.java

Content: 

/** 

 * Fills in the list of declared prefixes. 

 */

private void fillDeclaredPrefixes(EndElement event){

  fillDeclaredPrefixes(event.getNamespaces());

}

Location: StAXSchemaParser.java

Content: 

/** 

 * Fills in the list of declared prefixes. 

 */

private void fillDeclaredPrefixes(Iterator namespaces){

  fDeclaredPrefixes.clear();

  while (namespaces.hasNext()) {

    Namespace ns=(Namespace)namespaces.next();

    String prefix=ns.getPrefix();

    fDeclaredPrefixes.add(prefix != null ? prefix : "");

  }

}

Location: StAXSchemaParser.java

Content: 

/** 

 * Fills in the list of declared prefixes. 

 */

private void fillDeclaredPrefixes(StartElement event){

  fillDeclaredPrefixes(event.getNamespaces());

}

Location: StAXSchemaParser.java

Content: 

/** 

 * Fills in the list of declared prefixes. 

 */

private void fillDeclaredPrefixes(XMLStreamReader reader){

  fDeclaredPrefixes.clear();

  final int len=reader.getNamespaceCount();

  for (int i=0; i < len; ++i) {

    String prefix=reader.getNamespacePrefix(i);

    fDeclaredPrefixes.add(prefix != null ? prefix : "");

  }

}

Location: StAXSchemaParser.java

Content: 

private void fillProcessingInstruction(String data){

  final int dataLength=data.length();

  char[] charBuffer=fCharBuffer;

  if (charBuffer.length < dataLength) {

    charBuffer=data.toCharArray();

  }

 else {

    data.getChars(0,dataLength,charBuffer,0);

  }

  fTempString.setValues(charBuffer,0,dataLength);

}

Location: StAXSchemaParser.java

Content: 

/** 

 * Fills in a QName object. 

 */

private void fillQName(QName toFill,javax.xml.namespace.QName toCopy){

  fillQName(toFill,toCopy.getNamespaceURI(),toCopy.getLocalPart(),toCopy.getPrefix());

}

Location: StAXSchemaParser.java

Content: 

private void fillXMLAttributes(StartElement event){

  fAttributes.removeAllAttributes();

  final Iterator attrs=event.getAttributes();

  while (attrs.hasNext()) {

    Attribute attr=(Attribute)attrs.next();

    fillQName(fAttributeQName,attr.getName());

    String type=attr.getDTDType();

    int idx=fAttributes.getLength();

    fAttributes.addAttributeNS(fAttributeQName,(type != null) ? type : XMLSymbols.fCDATASymbol,attr.getValue());

    fAttributes.setSpecified(idx,attr.isSpecified());

  }

}

Location: StAXSchemaParser.java

Content: 

private void fillXMLAttributes(XMLStreamReader input){

  fAttributes.removeAllAttributes();

  final int len=input.getAttributeCount();

  for (int i=0; i < len; ++i) {

    fillQName(fAttributeQName,input.getAttributeNamespace(i),input.getAttributeLocalName(i),input.getAttributePrefix(i));

    String type=input.getAttributeType(i);

    fAttributes.addAttributeNS(fAttributeQName,(type != null) ? type : XMLSymbols.fCDATASymbol,input.getAttributeValue(i));

    fAttributes.setSpecified(i,input.isAttributeSpecified(i));

  }

}

Location: StAXSchemaParser.java

Content: 

public void parse(XMLEventReader input) throws XMLStreamException, XNIException {

  XMLEvent currentEvent=input.peek();

  if (currentEvent != null) {

    int eventType=currentEvent.getEventType();

    if (eventType != XMLStreamConstants.START_DOCUMENT && eventType != XMLStreamConstants.START_ELEMENT) {

      throw new XMLStreamException();

    }

    fLocationWrapper.setLocation(currentEvent.getLocation());

    fSchemaDOMParser.startDocument(fLocationWrapper,null,fNamespaceContext,null);

    loop:     while (input.hasNext()) {

      currentEvent=input.nextEvent();

      eventType=currentEvent.getEventType();

switch (eventType) {

case XMLStreamConstants.START_ELEMENT:

        ++fDepth;

      StartElement start=currentEvent.asStartElement();

    fillQName(fElementQName,start.getName());

  fLocationWrapper.setLocation(start.getLocation());

fNamespaceContext.setNamespaceContext(start.getNamespaceContext());

fillXMLAttributes(start);

fillDeclaredPrefixes(start);

addNamespaceDeclarations();

fNamespaceContext.pushContext();

fSchemaDOMParser.startElement(fElementQName,fAttributes,null);

break;

case XMLStreamConstants.END_ELEMENT:

EndElement end=currentEvent.asEndElement();

fillQName(fElementQName,end.getName());

fillDeclaredPrefixes(end);

fLocationWrapper.setLocation(end.getLocation());

fSchemaDOMParser.endElement(fElementQName,null);

fNamespaceContext.popContext();

--fDepth;

if (fDepth <= 0) {

break loop;

}

break;

case XMLStreamConstants.CHARACTERS:

sendCharactersToSchemaParser(currentEvent.asCharacters().getData(),false);

break;

case XMLStreamConstants.SPACE:

sendCharactersToSchemaParser(currentEvent.asCharacters().getData(),true);

break;

case XMLStreamConstants.CDATA:

fSchemaDOMParser.startCDATA(null);

sendCharactersToSchemaParser(currentEvent.asCharacters().getData(),false);

fSchemaDOMParser.endCDATA(null);

break;

case XMLStreamConstants.PROCESSING_INSTRUCTION:

ProcessingInstruction pi=(ProcessingInstruction)currentEvent;

fillProcessingInstruction(pi.getData());

fSchemaDOMParser.processingInstruction(pi.getTarget(),fTempString,null);

break;

case XMLStreamConstants.DTD:

break;

case XMLStreamConstants.ENTITY_REFERENCE:

break;

case XMLStreamConstants.COMMENT:

break;

case XMLStreamConstants.START_DOCUMENT:

fDepth++;

break;

case XMLStreamConstants.END_DOCUMENT:

break;

}

}

fLocationWrapper.setLocation(null);

fNamespaceContext.setNamespaceContext(null);

fSchemaDOMParser.endDocument(null);

}

}

Location: StAXSchemaParser.java

Content: 

public void parse(XMLStreamReader input) throws XMLStreamException, XNIException {

  if (input.hasNext()) {

    int eventType=input.getEventType();

    if (eventType != XMLStreamConstants.START_DOCUMENT && eventType != XMLStreamConstants.START_ELEMENT) {

      throw new XMLStreamException();

    }

    fLocationWrapper.setLocation(input.getLocation());

    fSchemaDOMParser.startDocument(fLocationWrapper,null,fNamespaceContext,null);

    boolean first=true;

    loop:     while (input.hasNext()) {

      if (!first) {

        eventType=input.next();

      }

 else {

        first=false;

      }

switch (eventType) {

case XMLStreamConstants.START_ELEMENT:

        ++fDepth;

      fLocationWrapper.setLocation(input.getLocation());

    fNamespaceContext.setNamespaceContext(input.getNamespaceContext());

  fillQName(fElementQName,input.getNamespaceURI(),input.getLocalName(),input.getPrefix());

fillXMLAttributes(input);

fillDeclaredPrefixes(input);

addNamespaceDeclarations();

fNamespaceContext.pushContext();

fSchemaDOMParser.startElement(fElementQName,fAttributes,null);

break;

case XMLStreamConstants.END_ELEMENT:

fLocationWrapper.setLocation(input.getLocation());

fNamespaceContext.setNamespaceContext(input.getNamespaceContext());

fillQName(fElementQName,input.getNamespaceURI(),input.getLocalName(),input.getPrefix());

fillDeclaredPrefixes(input);

fSchemaDOMParser.endElement(fElementQName,null);

fNamespaceContext.popContext();

--fDepth;

if (fDepth <= 0) {

break loop;

}

break;

case XMLStreamConstants.CHARACTERS:

fTempString.setValues(input.getTextCharacters(),input.getTextStart(),input.getTextLength());

fSchemaDOMParser.characters(fTempString,null);

break;

case XMLStreamConstants.SPACE:

fTempString.setValues(input.getTextCharacters(),input.getTextStart(),input.getTextLength());

fSchemaDOMParser.ignorableWhitespace(fTempString,null);

break;

case XMLStreamConstants.CDATA:

fSchemaDOMParser.startCDATA(null);

fTempString.setValues(input.getTextCharacters(),input.getTextStart(),input.getTextLength());

fSchemaDOMParser.characters(fTempString,null);

fSchemaDOMParser.endCDATA(null);

break;

case XMLStreamConstants.PROCESSING_INSTRUCTION:

fillProcessingInstruction(input.getPIData());

fSchemaDOMParser.processingInstruction(input.getPITarget(),fTempString,null);

break;

case XMLStreamConstants.DTD:

break;

case XMLStreamConstants.ENTITY_REFERENCE:

break;

case XMLStreamConstants.COMMENT:

break;

case XMLStreamConstants.START_DOCUMENT:

++fDepth;

break;

case XMLStreamConstants.END_DOCUMENT:

break;

}

}

fLocationWrapper.setLocation(null);

fNamespaceContext.setNamespaceContext(null);

fSchemaDOMParser.endDocument(null);

}

}

Location: StAXSchemaParser.java

Content: 

public void reset(SchemaDOMParser schemaDOMParser,SymbolTable symbolTable){

  fSchemaDOMParser=schemaDOMParser;

  fSymbolTable=symbolTable;

  fNamespaceContext.setSymbolTable(fSymbolTable);

  fNamespaceContext.reset();

}

Location: StAXSchemaParser.java

Content: 

/** 

 * Send characters to the validator in CHUNK_SIZE character chunks. 

 */

private void sendCharactersToSchemaParser(String str,boolean whitespace){

  if (str != null) {

    final int length=str.length();

    final int remainder=length & CHUNK_MASK;

    if (remainder > 0) {

      str.getChars(0,remainder,fCharBuffer,0);

      fTempString.setValues(fCharBuffer,0,remainder);

      if (whitespace) {

        fSchemaDOMParser.ignorableWhitespace(fTempString,null);

      }

 else {

        fSchemaDOMParser.characters(fTempString,null);

      }

    }

    int i=remainder;

    while (i < length) {

      str.getChars(i,i+=CHUNK_SIZE,fCharBuffer,0);

      fTempString.setValues(fCharBuffer,0,CHUNK_SIZE);

      if (whitespace) {

        fSchemaDOMParser.ignorableWhitespace(fTempString,null);

      }

 else {

        fSchemaDOMParser.characters(fTempString,null);

      }

    }

  }

}

Location: StAXSchemaParser.java

Content: 

public StAXSchemaParser(){

  fNamespaceContext.setDeclaredPrefixes(fDeclaredPrefixes);

}

