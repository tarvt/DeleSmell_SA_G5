Location: XMLSchemaValidatorComponentManager.java

Content: 

/** 

 * Adds all of the component's recognized features and properties to the list of default recognized features and properties, and sets default values on the configuration for features and properties which were previously absent from the configuration.

 * @param component The component whose recognized featuresand properties will be added to the configuration

 */

public void addRecognizedParamsAndSetDefaults(XMLComponent component,XSGrammarPoolContainer grammarContainer){

  final String[] recognizedFeatures=component.getRecognizedFeatures();

  addRecognizedFeatures(recognizedFeatures);

  final String[] recognizedProperties=component.getRecognizedProperties();

  addRecognizedProperties(recognizedProperties);

  setFeatureDefaults(component,recognizedFeatures,grammarContainer);

  setPropertyDefaults(component,recognizedProperties);

}

Location: XMLSchemaValidatorComponentManager.java

Content: 

/** 

 * Cleans out configuration, restoring it to its initial state. 

 */

void restoreInitialState(){

  fConfigUpdated=true;

  fComponents.put(ENTITY_RESOLVER,null);

  fComponents.put(ERROR_HANDLER,null);

  fComponents.put(SECURITY_MANAGER,fInitSecurityManager);

  setLocale(null);

  fComponents.put(LOCALE,null);

  if (!fInitFeatures.isEmpty()) {

    Iterator iter=fInitFeatures.entrySet().iterator();

    while (iter.hasNext()) {

      Map.Entry entry=(Map.Entry)iter.next();

      String name=(String)entry.getKey();

      boolean value=((Boolean)entry.getValue()).booleanValue();

      super.setFeature(name,value);

    }

    fInitFeatures.clear();

  }

  if (!fInitProperties.isEmpty()) {

    Iterator iter=fInitProperties.entrySet().iterator();

    while (iter.hasNext()) {

      Map.Entry entry=(Map.Entry)iter.next();

      String name=(String)entry.getKey();

      Object value=entry.getValue();

      super.setProperty(name,value);

    }

    fInitProperties.clear();

  }

}

Location: XMLSchemaValidatorComponentManager.java

Content: 

/** 

 * Sets feature defaults for the given component on this configuration. 

 */

private void setFeatureDefaults(final XMLComponent component,final String[] recognizedFeatures,XSGrammarPoolContainer grammarContainer){

  if (recognizedFeatures != null) {

    for (int i=0; i < recognizedFeatures.length; ++i) {

      String featureId=recognizedFeatures[i];

      Boolean state=grammarContainer.getFeature(featureId);

      if (state == null) {

        state=component.getFeatureDefault(featureId);

      }

      if (state != null) {

        if (!fFeatures.containsKey(featureId)) {

          fFeatures.put(featureId,state);

          fConfigUpdated=true;

        }

      }

    }

  }

}

Location: XMLSchemaValidatorComponentManager.java

Content: 

/** 

 * Sets property defaults for the given component on this configuration. 

 */

private void setPropertyDefaults(final XMLComponent component,final String[] recognizedProperties){

  if (recognizedProperties != null) {

    for (int i=0; i < recognizedProperties.length; ++i) {

      String propertyId=recognizedProperties[i];

      Object value=component.getPropertyDefault(propertyId);

      if (value != null) {

        if (!fProperties.containsKey(propertyId)) {

          fProperties.put(propertyId,value);

          fConfigUpdated=true;

        }

      }

    }

  }

}

Location: XMLSchemaValidatorComponentManager.java

Content: 

/** 

 * Constructs a component manager suitable for Xerces' schema validator. 

 */

public XMLSchemaValidatorComponentManager(XSGrammarPoolContainer grammarContainer){

  fEntityManager=new XMLEntityManager();

  fComponents.put(ENTITY_MANAGER,fEntityManager);

  fErrorReporter=new XMLErrorReporter();

  fComponents.put(ERROR_REPORTER,fErrorReporter);

  fNamespaceContext=new NamespaceSupport();

  fComponents.put(NAMESPACE_CONTEXT,fNamespaceContext);

  fSchemaValidator=new XMLSchemaValidator();

  fComponents.put(SCHEMA_VALIDATOR,fSchemaValidator);

  fValidationManager=new ValidationManager();

  fComponents.put(VALIDATION_MANAGER,fValidationManager);

  fComponents.put(ENTITY_RESOLVER,null);

  fComponents.put(ERROR_HANDLER,null);

  fComponents.put(SECURITY_MANAGER,null);

  fComponents.put(SYMBOL_TABLE,new SymbolTable());

  fComponents.put(XMLGRAMMAR_POOL,grammarContainer.getGrammarPool());

  fUseGrammarPoolOnly=grammarContainer.isFullyComposed();

  fErrorReporter.putMessageFormatter(XSMessageFormatter.SCHEMA_DOMAIN,new XSMessageFormatter());

  final String[] recognizedFeatures={DISALLOW_DOCTYPE_DECL_FEATURE,NORMALIZE_DATA,SCHEMA_ELEMENT_DEFAULT,SCHEMA_AUGMENT_PSVI};

  addRecognizedFeatures(recognizedFeatures);

  fFeatures.put(DISALLOW_DOCTYPE_DECL_FEATURE,Boolean.FALSE);

  fFeatures.put(NORMALIZE_DATA,Boolean.FALSE);

  fFeatures.put(SCHEMA_ELEMENT_DEFAULT,Boolean.FALSE);

  fFeatures.put(SCHEMA_AUGMENT_PSVI,Boolean.TRUE);

  addRecognizedParamsAndSetDefaults(fEntityManager,grammarContainer);

  addRecognizedParamsAndSetDefaults(fErrorReporter,grammarContainer);

  addRecognizedParamsAndSetDefaults(fSchemaValidator,grammarContainer);

  Boolean secureProcessing=grammarContainer.getFeature(XMLConstants.FEATURE_SECURE_PROCESSING);

  if (Boolean.TRUE.equals(secureProcessing)) {

    fInitSecurityManager=new SecurityManager();

  }

 else {

    fInitSecurityManager=null;

  }

  fComponents.put(SECURITY_MANAGER,fInitSecurityManager);

  fFeatures.put(IGNORE_XSI_TYPE,Boolean.FALSE);

  fFeatures.put(ID_IDREF_CHECKING,Boolean.TRUE);

  fFeatures.put(IDENTITY_CONSTRAINT_CHECKING,Boolean.TRUE);

  fFeatures.put(UNPARSED_ENTITY_CHECKING,Boolean.TRUE);

}

