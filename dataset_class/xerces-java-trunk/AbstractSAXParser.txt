Location: AbstractSAXParser.java

Content: 

/** 

 * Default constructor. 

 */

protected AbstractSAXParser(XMLParserConfiguration config){

  super(config);

  config.addRecognizedFeatures(RECOGNIZED_FEATURES);

  config.addRecognizedProperties(RECOGNIZED_PROPERTIES);

  try {

    config.setFeature(ALLOW_UE_AND_NOTATION_EVENTS,false);

  }

 catch (  XMLConfigurationException e) {

  }

}

Location: AbstractSAXParser.java

Content: 

/** 

 * Send endPrefixMapping events

 */

protected final void endNamespaceMapping() throws SAXException {

  int count=fNamespaceContext.getDeclaredPrefixCount();

  if (count > 0) {

    for (int i=0; i < count; i++) {

      fContentHandler.endPrefixMapping(fNamespaceContext.getDeclaredPrefixAt(i));

    }

  }

}

Location: AbstractSAXParser.java

Content: 

/** 

 * Return the current content handler.

 * @return The current content handler, or null if nonehas been registered.

 * @see #setContentHandler

 */

public ContentHandler getContentHandler(){

  return fContentHandler;

}

Location: AbstractSAXParser.java

Content: 

/** 

 * Returns the DTD declaration event handler.

 * @see #setDeclHandler

 */

protected DeclHandler getDeclHandler() throws SAXNotRecognizedException, SAXNotSupportedException {

  return fDeclHandler;

}

Location: AbstractSAXParser.java

Content: 

/** 

 * Returns the lexical handler.

 * @see #setLexicalHandler

 */

protected LexicalHandler getLexicalHandler() throws SAXNotRecognizedException, SAXNotSupportedException {

  return fLexicalHandler;

}

Location: AbstractSAXParser.java

Content: 

/** 

 * parse

 * @param inputSource

 * @exception org.xml.sax.SAXException

 * @exception java.io.IOException

 */

public void parse(InputSource inputSource) throws SAXException, IOException {

  try {

    XMLInputSource xmlInputSource=new XMLInputSource(inputSource.getPublicId(),inputSource.getSystemId(),null);

    xmlInputSource.setByteStream(inputSource.getByteStream());

    xmlInputSource.setCharacterStream(inputSource.getCharacterStream());

    xmlInputSource.setEncoding(inputSource.getEncoding());

    parse(xmlInputSource);

  }

 catch (  XMLParseException e) {

    Exception ex=e.getException();

    if (ex == null || ex instanceof CharConversionException) {

      Locator2Impl locatorImpl=new Locator2Impl();

      locatorImpl.setXMLVersion(fVersion);

      locatorImpl.setPublicId(e.getPublicId());

      locatorImpl.setSystemId(e.getExpandedSystemId());

      locatorImpl.setLineNumber(e.getLineNumber());

      locatorImpl.setColumnNumber(e.getColumnNumber());

      throw (ex == null) ? new SAXParseException(e.getMessage(),locatorImpl) : new SAXParseException(e.getMessage(),locatorImpl,ex);

    }

    if (ex instanceof SAXException) {

      throw (SAXException)ex;

    }

    if (ex instanceof IOException) {

      throw (IOException)ex;

    }

    throw new SAXException(ex);

  }

catch (  XNIException e) {

    Exception ex=e.getException();

    if (ex == null) {

      throw new SAXException(e.getMessage());

    }

    if (ex instanceof SAXException) {

      throw (SAXException)ex;

    }

    if (ex instanceof IOException) {

      throw (IOException)ex;

    }

    throw new SAXException(ex);

  }

}

Location: AbstractSAXParser.java

Content: 

/** 

 * Allow an application to register a content event handler. <p> If the application does not register a content handler, all content events reported by the SAX parser will be silently ignored. <p> Applications may register a new or different handler in the middle of a parse, and the SAX parser must begin using the new handler immediately.

 * @param contentHandler The content handler.

 * @see #getContentHandler

 */

public void setContentHandler(ContentHandler contentHandler){

  fContentHandler=contentHandler;

}

Location: AbstractSAXParser.java

Content: 

/** 

 * Set the DTD declaration event handler. <p> This method is the equivalent to the property: <pre> http://xml.org/sax/properties/declaration-handler </pre>

 * @param handler The new handler.

 * @see #getDeclHandler

 * @see #setProperty

 */

protected void setDeclHandler(DeclHandler handler) throws SAXNotRecognizedException, SAXNotSupportedException {

  if (fParseInProgress) {

    throw new SAXNotSupportedException(SAXMessageFormatter.formatMessage(fConfiguration.getLocale(),"property-not-parsing-supported",new Object[]{"http://xml.org/sax/properties/declaration-handler"}));

  }

  fDeclHandler=handler;

}

Location: AbstractSAXParser.java

Content: 

/** 

 * Allow an application to register a document event handler. <p> If the application does not register a document handler, all document events reported by the SAX parser will be silently ignored (this is the default behaviour implemented by HandlerBase). <p> Applications may register a new or different handler in the middle of a parse, and the SAX parser must begin using the new handler immediately.

 * @param documentHandler The document handler.

 */

public void setDocumentHandler(DocumentHandler documentHandler){

  fDocumentHandler=documentHandler;

}

Location: AbstractSAXParser.java

Content: 

/** 

 * Allow an application to register a DTD event handler. <p> If the application does not register a DTD handler, all DTD events reported by the SAX parser will be silently ignored. <p> Applications may register a new or different handler in the middle of a parse, and the SAX parser must begin using the new handler immediately.

 * @param dtdHandler The DTD handler.

 * @see #getDTDHandler

 */

public void setDTDHandler(DTDHandler dtdHandler){

  fDTDHandler=dtdHandler;

}

Location: AbstractSAXParser.java

Content: 

/** 

 * Set the lexical event handler. <p> This method is the equivalent to the property: <pre> http://xml.org/sax/properties/lexical-handler </pre>

 * @param handler lexical event handler

 * @see #getLexicalHandler

 * @see #setProperty

 */

protected void setLexicalHandler(LexicalHandler handler) throws SAXNotRecognizedException, SAXNotSupportedException {

  if (fParseInProgress) {

    throw new SAXNotSupportedException(SAXMessageFormatter.formatMessage(fConfiguration.getLocale(),"property-not-parsing-supported",new Object[]{"http://xml.org/sax/properties/lexical-handler"}));

  }

  fLexicalHandler=handler;

}

Location: AbstractSAXParser.java

Content: 

/** 

 * Send startPrefixMapping events

 */

protected final void startNamespaceMapping() throws SAXException {

  int count=fNamespaceContext.getDeclaredPrefixCount();

  if (count > 0) {

    String prefix=null;

    String uri=null;

    for (int i=0; i < count; i++) {

      prefix=fNamespaceContext.getDeclaredPrefixAt(i);

      uri=fNamespaceContext.getURI(prefix);

      fContentHandler.startPrefixMapping(prefix,(uri == null) ? "" : uri);

    }

  }

}

