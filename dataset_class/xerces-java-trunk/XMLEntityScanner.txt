Location: XMLEntityScanner.java

Content: 

/** 

 * Returns true if the current entity being scanned is external. 

 */

public final boolean isExternal(){

  return fCurrentEntity.isExternal();

}

Location: XMLEntityScanner.java

Content: 

/** 

 * Loads a chunk of text.

 * @param offset       The offset into the character buffer toread the next batch of characters.

 * @param changeEntity True if the load should change entitiesat the end of the entity, otherwise leave the current entity in place and the entity boundary will be signaled by the return value.

 * @returns Returns true if the entity changed as a result of thisload operation.

 */

final boolean load(int offset,boolean changeEntity) throws IOException {

  if (DEBUG_BUFFER) {

    System.out.print("(load, " + offset + ": ");

    XMLEntityManager.print(fCurrentEntity);

    System.out.println();

  }

  fCurrentEntity.baseCharOffset+=(fCurrentEntity.position - fCurrentEntity.startPosition);

  int length=fCurrentEntity.ch.length - offset;

  if (!fCurrentEntity.mayReadChunks && length > XMLEntityManager.DEFAULT_XMLDECL_BUFFER_SIZE) {

    length=XMLEntityManager.DEFAULT_XMLDECL_BUFFER_SIZE;

  }

  if (DEBUG_BUFFER)   System.out.println("  length to try to read: " + length);

  int count=fCurrentEntity.reader.read(fCurrentEntity.ch,offset,length);

  if (DEBUG_BUFFER)   System.out.println("  length actually read:  " + count);

  boolean entityChanged=false;

  if (count != -1) {

    if (count != 0) {

      fCurrentEntity.count=count + offset;

      fCurrentEntity.position=offset;

      fCurrentEntity.startPosition=offset;

    }

  }

 else {

    fCurrentEntity.count=offset;

    fCurrentEntity.position=offset;

    fCurrentEntity.startPosition=offset;

    entityChanged=true;

    if (changeEntity) {

      fEntityManager.endEntity();

      if (fCurrentEntity == null) {

        throw END_OF_DOCUMENT_ENTITY;

      }

      if (fCurrentEntity.position == fCurrentEntity.count) {

        load(0,true);

      }

    }

  }

  if (DEBUG_BUFFER) {

    System.out.print(")load, " + offset + ": ");

    XMLEntityManager.print(fCurrentEntity);

    System.out.println();

  }

  return entityChanged;

}

Location: XMLEntityScanner.java

Content: 

public final void reset(SymbolTable symbolTable,XMLEntityManager entityManager,XMLErrorReporter reporter){

  fCurrentEntity=null;

  fSymbolTable=symbolTable;

  fEntityManager=entityManager;

  fErrorReporter=reporter;

}

Location: XMLEntityScanner.java

Content: 

/** 

 * This method is invoked to increase the size of the current entity's buffer if an XML name being scanned is too large to fit within the buffer at its current size. 

 */

final void resizeBuffer(int offset,int length){

  char[] tmp=new char[fCurrentEntity.ch.length << 1];

  System.arraycopy(fCurrentEntity.ch,offset,tmp,0,length);

  fCurrentEntity.ch=tmp;

}

Location: XMLEntityScanner.java

Content: 

public final void setCurrentEntity(XMLEntityManager.ScannedEntity ent){

  fCurrentEntity=ent;

}

Location: XMLEntityScanner.java

Content: 

/** 

 * Skips space characters appearing immediately on the input that would match non-terminal S (0x09, 0x0A, 0x0D, 0x20) before end of line  normalization is performed. This is useful when scanning structures  such as the XMLDecl and TextDecl that can only contain US-ASCII  characters. <p> <strong>Note:</strong> The characters are consumed only if they would match non-terminal S before end of line normalization is performed.

 * @return Returns true if at least one space character was skipped.

 * @throws IOException  Thrown if i/o error occurs.

 * @throws EOFException Thrown on end of file.

 * @see org.apache.xerces.util.XMLChar#isSpace

 */

public final boolean skipDeclSpaces() throws IOException {

  if (DEBUG_BUFFER) {

    System.out.print("(skipDeclSpaces: ");

    XMLEntityManager.print(fCurrentEntity);

    System.out.println();

  }

  if (fCurrentEntity.position == fCurrentEntity.count) {

    load(0,true);

  }

  int c=fCurrentEntity.ch[fCurrentEntity.position];

  if (XMLChar.isSpace(c)) {

    boolean external=fCurrentEntity.isExternal();

    do {

      boolean entityChanged=false;

      if (c == '\n' || (external && c == '\r')) {

        fCurrentEntity.lineNumber++;

        fCurrentEntity.columnNumber=1;

        if (fCurrentEntity.position == fCurrentEntity.count - 1) {

          fCurrentEntity.ch[0]=(char)c;

          entityChanged=load(1,true);

          if (!entityChanged) {

            fCurrentEntity.position=0;

            fCurrentEntity.startPosition=0;

          }

        }

        if (c == '\r' && external) {

          if (fCurrentEntity.ch[++fCurrentEntity.position] != '\n') {

            fCurrentEntity.position--;

          }

        }

      }

 else {

        fCurrentEntity.columnNumber++;

      }

      if (!entityChanged)       fCurrentEntity.position++;

      if (fCurrentEntity.position == fCurrentEntity.count) {

        load(0,true);

      }

    }

 while (XMLChar.isSpace(c=fCurrentEntity.ch[fCurrentEntity.position]));

    if (DEBUG_BUFFER) {

      System.out.print(")skipDeclSpaces: ");

      XMLEntityManager.print(fCurrentEntity);

      System.out.println(" -> true");

    }

    return true;

  }

  if (DEBUG_BUFFER) {

    System.out.print(")skipDeclSpaces: ");

    XMLEntityManager.print(fCurrentEntity);

    System.out.println(" -> false");

  }

  return false;

}

Location: XMLEntityScanner.java

Content: 

/** 

 * Default constructor. 

 */

public XMLEntityScanner(){

}

