Location: XML11DTDScannerImpl.java

Content: 

protected String getVersionNotSupportedKey(){

  return "VersionNotSupported11";

}

Location: XML11DTDScannerImpl.java

Content: 

protected boolean isInvalidLiteral(int value){

  return (!XML11Char.isXML11ValidLiteral(value));

}

Location: XML11DTDScannerImpl.java

Content: 

/** 

 * Checks whether this string would be unchanged by normalization.

 * @return -1 if the value would be unchanged by normalization,otherwise the index of the first whitespace character which would be transformed.

 */

protected int isUnchangedByNormalization(XMLString value){

  int end=value.offset + value.length;

  for (int i=value.offset; i < end; ++i) {

    int c=value.ch[i];

    if (XMLChar.isSpace(c)) {

      return i - value.offset;

    }

  }

  return -1;

}

Location: XML11DTDScannerImpl.java

Content: 

protected boolean isValidNameChar(int value){

  return (XML11Char.isXML11Name(value));

}

Location: XML11DTDScannerImpl.java

Content: 

protected boolean isValidNameStartChar(int value){

  return (XML11Char.isXML11NameStart(value));

}

Location: XML11DTDScannerImpl.java

Content: 

protected boolean isValidNameStartHighSurrogate(int value){

  return XML11Char.isXML11NameHighSurrogate(value);

}

Location: XML11DTDScannerImpl.java

Content: 

protected boolean isValidNCName(int value){

  return (XML11Char.isXML11NCName(value));

}

Location: XML11DTDScannerImpl.java

Content: 

/** 

 * Normalize whitespace in an XMLString converting all whitespace characters to space characters.

 */

protected void normalizeWhitespace(XMLString value){

  int end=value.offset + value.length;

  for (int i=value.offset; i < end; ++i) {

    int c=value.ch[i];

    if (XMLChar.isSpace(c)) {

      value.ch[i]=' ';

    }

  }

}

Location: XML11DTDScannerImpl.java

Content: 

/** 

 * Normalize whitespace in an XMLString converting all whitespace characters to space characters.

 */

protected void normalizeWhitespace(XMLString value,int fromIndex){

  int end=value.offset + value.length;

  for (int i=value.offset + fromIndex; i < end; ++i) {

    int c=value.ch[i];

    if (XMLChar.isSpace(c)) {

      value.ch[i]=' ';

    }

  }

}

Location: XML11DTDScannerImpl.java

Content: 

/** 

 * Scans public ID literal. [12] PubidLiteral ::= '"' PubidChar* '"' | "'" (PubidChar - "'")* "'"  [13] PubidChar::= #x20 | #xD | #xA | [a-zA-Z0-9] | [-'()+,./:=?;!*#@$_%] The returned string is normalized according to the following rule, from http://www.w3.org/TR/REC-xml#dt-pubid: Before a match is attempted, all strings of white space in the public identifier must be normalized to single space characters (#x20), and leading and trailing white space must be removed.

 * @param literal The string to fill in with the public ID literal.

 * @return True on success.<strong>Note:</strong> This method uses fStringBuffer, anything in it at the time of calling is lost.

 */

protected boolean scanPubidLiteral(XMLString literal) throws IOException, XNIException {

  int quote=fEntityScanner.scanChar();

  if (quote != '\'' && quote != '"') {

    reportFatalError("QuoteRequiredInPublicID",null);

    return false;

  }

  fStringBuffer.clear();

  boolean skipSpace=true;

  boolean dataok=true;

  while (true) {

    int c=fEntityScanner.scanChar();

    if (c == ' ' || c == '\n' || c == '\r' || c == 0x85 || c == 0x2028) {

      if (!skipSpace) {

        fStringBuffer.append(' ');

        skipSpace=true;

      }

    }

 else     if (c == quote) {

      if (skipSpace) {

        fStringBuffer.length--;

      }

      literal.setValues(fStringBuffer);

      break;

    }

 else     if (XMLChar.isPubid(c)) {

      fStringBuffer.append((char)c);

      skipSpace=false;

    }

 else     if (c == -1) {

      reportFatalError("PublicIDUnterminated",null);

      return false;

    }

 else {

      dataok=false;

      reportFatalError("InvalidCharInPublicID",new Object[]{Integer.toHexString(c)});

    }

  }

  return dataok;

}

Location: XML11DTDScannerImpl.java

Content: 

protected boolean versionSupported(String version){

  return version.equals("1.1") || version.equals("1.0");

}

Location: XML11DTDScannerImpl.java

Content: 

/** 

 * Default constructor. 

 */

public XML11DTDScannerImpl(){

  super();

}

Location: XML11DTDScannerImpl.java

Content: 

/** 

 * Constructor for he use of non-XMLComponentManagers. 

 */

public XML11DTDScannerImpl(SymbolTable symbolTable,XMLErrorReporter errorReporter,XMLEntityManager entityManager){

  super(symbolTable,errorReporter,entityManager);

}

