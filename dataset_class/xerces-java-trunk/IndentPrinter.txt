Location: IndentPrinter.java

Content: 

/** 

 * Called to print a line consisting of the text accumulated so far. This is equivalent to calling  {@link #printSpace} butforcing the line to print and starting a new line ( {@link #printSpace} will only start a new line if the current lineis long enough).

 */

public void breakLine(){

  breakLine(false);

}

Location: IndentPrinter.java

Content: 

public void breakLine(boolean preserveSpace){

  if (_text.length() > 0) {

    while (_spaces > 0) {

      _line.append(' ');

      --_spaces;

    }

    _line.append(_text);

    _text=new StringBuffer(20);

  }

  flushLine(preserveSpace);

  try {

    _writer.write(_format.getLineSeparator());

  }

 catch (  IOException except) {

    if (_exception == null)     _exception=except;

  }

}

Location: IndentPrinter.java

Content: 

/** 

 * Called by any of the DTD handlers to enter DTD mode. Once entered, all output will be accumulated in a string that can be printed as part of the document's DTD. This method may be called any number of time but will only have affect the first time it's called. To exist DTD state and get the accumulated DTD, call  {@link #leaveDTD}.

 */

public void enterDTD(){

  if (_dtdWriter == null) {

    _line.append(_text);

    _text=new StringBuffer(20);

    flushLine(false);

    _dtdWriter=new StringWriter();

    _docWriter=_writer;

    _writer=_dtdWriter;

  }

}

Location: IndentPrinter.java

Content: 

/** 

 * Flushes the line accumulated so far to the writer and get ready to accumulate the next line. This method is called by  {@link #printText} and {@link #printSpace} when the accumulated line plusaccumulated text are two long to fit on a given line. At the end of this method _line is empty and _spaces is zero.

 */

public void flushLine(boolean preserveSpace){

  int indent;

  if (_line.length() > 0) {

    try {

      if (_format.getIndenting() && !preserveSpace) {

        indent=_thisIndent;

        if ((2 * indent) > _format.getLineWidth() && _format.getLineWidth() > 0)         indent=_format.getLineWidth() / 2;

        while (indent > 0) {

          _writer.write(' ');

          --indent;

        }

      }

      _thisIndent=_nextIndent;

      _spaces=0;

      _writer.write(_line.toString());

      _line=new StringBuffer(40);

    }

 catch (    IOException except) {

      if (_exception == null)       _exception=except;

    }

  }

}

Location: IndentPrinter.java

Content: 

public int getNextIndent(){

  return _nextIndent;

}

Location: IndentPrinter.java

Content: 

/** 

 * Increment the indentation for the next line.

 */

public void indent(){

  _nextIndent+=_format.getIndent();

}

Location: IndentPrinter.java

Content: 

public IndentPrinter(Writer writer,OutputFormat format){

  super(writer,format);

  _line=new StringBuffer(80);

  _text=new StringBuffer(20);

  _spaces=0;

  _thisIndent=_nextIndent=0;

}

Location: IndentPrinter.java

Content: 

/** 

 * Called by the root element to leave DTD mode and if any DTD parts were printer, will return a string with their textual content.

 */

public String leaveDTD(){

  if (_writer == _dtdWriter) {

    _line.append(_text);

    _text=new StringBuffer(20);

    flushLine(false);

    _writer=_docWriter;

    return _dtdWriter.toString();

  }

  return null;

}

Location: IndentPrinter.java

Content: 

/** 

 * Called to print a single space between text parts that may be broken into separate lines. Must not be called to print a space when preserving spaces. The text accumulated so far with  {@link #printText} will be added to the accumulated line, and a spaceseparator will be counted. If the line accumulated so far is long enough, it will be printed.

 */

public void printSpace(){

  if (_text.length() > 0) {

    if (_format.getLineWidth() > 0 && _thisIndent + _line.length() + _spaces+ _text.length() > _format.getLineWidth()) {

      flushLine(false);

      try {

        _writer.write(_format.getLineSeparator());

      }

 catch (      IOException except) {

        if (_exception == null)         _exception=except;

      }

    }

    while (_spaces > 0) {

      _line.append(' ');

      --_spaces;

    }

    _line.append(_text);

    _text=new StringBuffer(20);

  }

  ++_spaces;

}

Location: IndentPrinter.java

Content: 

public void printText(char ch){

  _text.append(ch);

}

Location: IndentPrinter.java

Content: 

public void printText(char[] chars,int start,int length){

  _text.append(chars,start,length);

}

Location: IndentPrinter.java

Content: 

/** 

 * Called to print additional text. Each time this method is called it accumulates more text. When a space is printed ( {@link #printSpace}) all the accumulated text becomes one part and is added to the accumulate line. When a line is long enough, it can be broken at its text boundary.

 * @param text The text to print

 */

public void printText(String text){

  _text.append(text);

}

Location: IndentPrinter.java

Content: 

public void printText(StringBuffer text){

  _text.append(text.toString());

}

Location: IndentPrinter.java

Content: 

public void setNextIndent(int indent){

  _nextIndent=indent;

}

Location: IndentPrinter.java

Content: 

public void setThisIndent(int indent){

  _thisIndent=indent;

}

Location: IndentPrinter.java

Content: 

/** 

 * Decrement the indentation for the next line.

 */

public void unindent(){

  _nextIndent-=_format.getIndent();

  if (_nextIndent < 0)   _nextIndent=0;

  if ((_line.length() + _spaces + _text.length()) == 0)   _thisIndent=_nextIndent;

}

