Location: XSObjectListImpl.java

Content: 

public void addXSObject(int index,XSObject object){

  fArray[index]=object;

}

Location: XSObjectListImpl.java

Content: 

public void addXSObject(XSObject object){

  if (fLength == fArray.length) {

    XSObject[] temp=new XSObject[fLength + 4];

    System.arraycopy(fArray,0,temp,0,fLength);

    fArray=temp;

  }

  fArray[fLength++]=object;

}

Location: XSObjectListImpl.java

Content: 

public void clearXSObjectList(){

  for (int i=0; i < fLength; i++) {

    fArray[i]=null;

  }

  fArray=null;

  fLength=0;

}

Location: XSObjectListImpl.java

Content: 

private boolean containsNull(){

  for (int i=fLength - 1; i >= 0; --i) {

    if (fArray[i] == null) {

      return true;

    }

  }

  return false;

}

Location: XSObjectListImpl.java

Content: 

private boolean containsObject(Object value){

  for (int i=fLength - 1; i >= 0; --i) {

    if (value.equals(fArray[i])) {

      return true;

    }

  }

  return false;

}

Location: XSObjectListImpl.java

Content: 

public Iterator iterator(){

  return listIterator0(0);

}

Location: XSObjectListImpl.java

Content: 

public ListIterator listIterator(){

  return listIterator0(0);

}

Location: XSObjectListImpl.java

Content: 

private ListIterator listIterator0(int index){

  return fLength == 0 ? EMPTY_ITERATOR : new XSObjectListIterator(index);

}

Location: XSObjectListImpl.java

Content: 

public ListIterator listIterator(int index){

  if (index >= 0 && index < fLength) {

    return listIterator0(index);

  }

  throw new IndexOutOfBoundsException("Index: " + index);

}

Location: XSObjectListImpl.java

Content: 

public XSObjectListImpl(){

  fArray=new XSObject[DEFAULT_SIZE];

  fLength=0;

}

Location: XSObjectListImpl.java

Content: 

/** 

 * Construct an XSObjectList implementation

 * @param array     the data array

 * @param length    the number of elements

 */

public XSObjectListImpl(XSObject[] array,int length){

  fArray=array;

  fLength=length;

}

