Location: RootTypeDefinitionTest.java

Content: 

private void checkDefault(){

  assertValidity(ItemPSVI.VALIDITY_VALID,fRootNode.getValidity());

  assertValidationAttempted(ItemPSVI.VALIDATION_FULL,fRootNode.getValidationAttempted());

  assertElementName("A",fRootNode.getElementDeclaration().getName());

  assertTypeName("X",fRootNode.getTypeDefinition().getName());

}

Location: RootTypeDefinitionTest.java

Content: 

public RootTypeDefinitionTest(String name){

  super(name);

  unknownType=new QName("W");

  typeX=new QName("X");

  typeY=new QName("Y");

  typeZ=new QName("Z");

  typeOtherNamespace=new QName("xslt.unittests","W","unit");

}

Location: RootTypeDefinitionTest.java

Content: 

public void testDefault(){

  try {

    validateDocument();

  }

 catch (  Exception e) {

    Assert.fail("Validation failed: " + e.getMessage());

  }

  checkDefault();

}

Location: RootTypeDefinitionTest.java

Content: 

public void testSettingNull(){

  try {

    fValidator.setProperty(ROOT_TYPE,null);

  }

 catch (  SAXException e1) {

    Assert.fail("Problem setting property: " + e1.getMessage());

  }

  try {

    validateDocument();

  }

 catch (  Exception e) {

    Assert.fail("Validation failed: " + e.getMessage());

  }

  checkDefault();

}

Location: RootTypeDefinitionTest.java

Content: 

public void testSettingToDerivedType(){

  ((PSVIElementNSImpl)fRootNode).setAttributeNS(null,"attr","typeY");

  try {

    fValidator.setProperty(ROOT_TYPE,typeY);

  }

 catch (  SAXException e1) {

    Assert.fail("Problem setting property: " + e1.getMessage());

  }

  try {

    validateDocument();

  }

 catch (  Exception e) {

    Assert.fail("Validation failed: " + e.getMessage());

  }

  assertValidity(ItemPSVI.VALIDITY_VALID,fRootNode.getValidity());

  assertValidationAttempted(ItemPSVI.VALIDATION_FULL,fRootNode.getValidationAttempted());

  assertElementNull(fRootNode.getElementDeclaration());

  assertTypeName("Y",fRootNode.getTypeDefinition().getName());

}

Location: RootTypeDefinitionTest.java

Content: 

public void testSettingToEqualType(){

  try {

    fValidator.setProperty(ROOT_TYPE,typeX);

  }

 catch (  SAXException e1) {

    Assert.fail("Problem setting property: " + e1.getMessage());

  }

  try {

    validateDocument();

  }

 catch (  Exception e) {

    Assert.fail("Validation failed: " + e.getMessage());

  }

  assertValidity(ItemPSVI.VALIDITY_VALID,fRootNode.getValidity());

  assertValidationAttempted(ItemPSVI.VALIDATION_FULL,fRootNode.getValidationAttempted());

  assertElementNull(fRootNode.getElementDeclaration());

  assertTypeName("X",fRootNode.getTypeDefinition().getName());

}

Location: RootTypeDefinitionTest.java

Content: 

public void testSettingToNonDerivedType(){

  try {

    fValidator.setProperty(ROOT_TYPE,typeZ);

  }

 catch (  SAXException e1) {

    Assert.fail("Problem setting property: " + e1.getMessage());

  }

  try {

    validateDocument();

  }

 catch (  Exception e) {

    Assert.fail("Validation failed: " + e.getMessage());

  }

  assertValidity(ItemPSVI.VALIDITY_VALID,fRootNode.getValidity());

  assertValidationAttempted(ItemPSVI.VALIDATION_FULL,fRootNode.getValidationAttempted());

  assertElementNull(fRootNode.getElementDeclaration());

  assertTypeName("Z",fRootNode.getTypeDefinition().getName());

}

Location: RootTypeDefinitionTest.java

Content: 

public void testSettingToOtherSchemaType(){

  ((PSVIElementNSImpl)fRootNode).setAttributeNS(SchemaSymbols.URI_XSI,SchemaSymbols.XSI_SCHEMALOCATION,"xslt.unittests otherNamespace.xsd");

  try {

    fValidator.setProperty(ROOT_TYPE,typeOtherNamespace);

  }

 catch (  SAXException e1) {

    Assert.fail("Problem setting property: " + e1.getMessage());

  }

  try {

    validateDocument();

  }

 catch (  Exception e) {

    Assert.fail("Validation failed: " + e.getMessage());

  }

  assertValidity(ItemPSVI.VALIDITY_VALID,fRootNode.getValidity());

  assertValidationAttempted(ItemPSVI.VALIDATION_FULL,fRootNode.getValidationAttempted());

  assertElementNull(fRootNode.getElementDeclaration());

  assertTypeName("W",fRootNode.getTypeDefinition().getName());

  assertTypeNamespace("xslt.unittests",fRootNode.getTypeDefinition().getNamespace());

}

Location: RootTypeDefinitionTest.java

Content: 

public void testSettingToUnknownType(){

  try {

    fValidator.setProperty(ROOT_TYPE,unknownType);

  }

 catch (  SAXException e1) {

    Assert.fail("Problem setting property: " + e1.getMessage());

  }

  try {

    validateDocument();

  }

 catch (  Exception e) {

    Assert.fail("Validation failed: " + e.getMessage());

  }

  assertError(UNKNOWN_TYPE_ERROR);

  checkDefault();

}

Location: RootTypeDefinitionTest.java

Content: 

public void testSettingTypeAndInvalidXSIType(){

  ((PSVIElementNSImpl)fRootNode).setAttributeNS(SchemaSymbols.URI_XSI,SchemaSymbols.XSI_TYPE,"Z");

  try {

    fValidator.setProperty(ROOT_TYPE,typeX);

  }

 catch (  SAXException e1) {

    Assert.fail("Problem setting property: " + e1.getMessage());

  }

  try {

    validateDocument();

  }

 catch (  Exception e) {

    Assert.fail("Validation failed: " + e.getMessage());

  }

  assertError(INVALID_DERIVATION_ERROR);

  assertValidity(ItemPSVI.VALIDITY_INVALID,fRootNode.getValidity());

  assertValidationAttempted(ItemPSVI.VALIDATION_FULL,fRootNode.getValidationAttempted());

  assertElementNull(fRootNode.getElementDeclaration());

  assertTypeName("Z",fRootNode.getTypeDefinition().getName());

}

Location: RootTypeDefinitionTest.java

Content: 

public void testSettingTypeAndXSIType(){

  ((PSVIElementNSImpl)fRootNode).setAttributeNS(null,"attr","typeY");

  ((PSVIElementNSImpl)fRootNode).setAttributeNS(SchemaSymbols.URI_XSI,SchemaSymbols.XSI_TYPE,"Y");

  try {

    fValidator.setProperty(ROOT_TYPE,typeX);

  }

 catch (  SAXException e1) {

    Assert.fail("Problem setting property: " + e1.getMessage());

  }

  try {

    validateDocument();

  }

 catch (  Exception e) {

    Assert.fail("Validation failed: " + e.getMessage());

  }

  assertValidity(ItemPSVI.VALIDITY_VALID,fRootNode.getValidity());

  assertValidationAttempted(ItemPSVI.VALIDATION_FULL,fRootNode.getValidationAttempted());

  assertElementNull(fRootNode.getElementDeclaration());

  assertTypeName("Y",fRootNode.getTypeDefinition().getName());

}

Location: RootTypeDefinitionTest.java

Content: 

public void testUsingDocumentBuilderFactory() throws Exception {

  DocumentBuilderFactory dbf=DocumentBuilderFactory.newInstance();

  dbf.setAttribute(ROOT_TYPE,typeX);

  dbf.setAttribute(DOCUMENT_CLASS_NAME,"org.apache.xerces.dom.PSVIDocumentImpl");

  dbf.setNamespaceAware(true);

  dbf.setValidating(false);

  SchemaFactory sf=SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);

  dbf.setSchema(sf.newSchema(fSchemaURL));

  DocumentBuilder db=dbf.newDocumentBuilder();

  fDocument=db.parse(fDocumentURL.toExternalForm());

  fRootNode=(ElementPSVI)fDocument.getDocumentElement();

  assertValidity(ItemPSVI.VALIDITY_VALID,fRootNode.getValidity());

  assertValidationAttempted(ItemPSVI.VALIDATION_FULL,fRootNode.getValidationAttempted());

  assertElementNull(fRootNode.getElementDeclaration());

  assertTypeName("X",fRootNode.getTypeDefinition().getName());

}

