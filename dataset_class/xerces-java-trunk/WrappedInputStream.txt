Location: WrappedInputStream.java

Content: 

/** 

 * Closes the input stream. This method will search for the end of the wrapped input, positioning the stream at after the end packet. <p> <strong>Note:</strong> This method does not close the underlying input stream.

 */

public void close() throws IOException {

  if (!fClosed) {

    fClosed=true;

    do {

      super.in.skip(fPacketCount);

      fPacketCount=fDataInputStream.readInt() & 0x7FFFFFFF;

    }

 while (fPacketCount > 0);

  }

}

Location: WrappedInputStream.java

Content: 

/** 

 * Reads a single byte. 

 */

public int read() throws IOException {

  if (fClosed) {

    return -1;

  }

  if (fPacketCount == 0) {

    fPacketCount=fDataInputStream.readInt() & 0x7FFFFFFF;

    if (fPacketCount == 0) {

      fClosed=true;

      return -1;

    }

  }

  fPacketCount--;

  return super.in.read();

}

Location: WrappedInputStream.java

Content: 

/** 

 * Reads a block of bytes and returns the total number of bytes read. 

 */

public int read(byte[] b,int offset,int length) throws IOException {

  if (fClosed) {

    return -1;

  }

  if (fPacketCount == 0) {

    fPacketCount=fDataInputStream.readInt() & 0x7FFFFFFF;

    if (fPacketCount == 0) {

      fClosed=true;

      return -1;

    }

  }

  if (length > fPacketCount) {

    length=fPacketCount;

  }

  int count=super.in.read(b,offset,length);

  if (count == -1) {

    fClosed=true;

    return -1;

  }

  fPacketCount-=count;

  return count;

}

Location: WrappedInputStream.java

Content: 

/** 

 * Skips the specified number of bytes from the input stream. 

 */

public long skip(long n) throws IOException {

  if (!fClosed) {

    for (long i=0; i < n; i++) {

      int b=read();

      if (b == -1) {

        return i + 1;

      }

    }

    return n;

  }

  return 0;

}

Location: WrappedInputStream.java

Content: 

/** 

 * Constructs a wrapper for the given an input stream. 

 */

public WrappedInputStream(InputStream stream){

  super(stream);

  fDataInputStream=new DataInputStream(stream);

}

