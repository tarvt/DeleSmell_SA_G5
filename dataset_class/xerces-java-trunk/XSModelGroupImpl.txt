Location: XSModelGroupImpl.java

Content: 

public boolean isEmpty(){

  for (int i=0; i < fParticleCount; i++) {

    if (!fParticles[i].isEmpty())     return false;

  }

  return true;

}

Location: XSModelGroupImpl.java

Content: 

public int maxEffectiveTotalRange(){

  if (fCompositor == MODELGROUP_CHOICE)   return maxEffectiveTotalRangeChoice();

 else   return maxEffectiveTotalRangeAllSeq();

}

Location: XSModelGroupImpl.java

Content: 

private int maxEffectiveTotalRangeAllSeq(){

  int total=0, one;

  for (int i=0; i < fParticleCount; i++) {

    one=fParticles[i].maxEffectiveTotalRange();

    if (one == SchemaSymbols.OCCURRENCE_UNBOUNDED)     return SchemaSymbols.OCCURRENCE_UNBOUNDED;

    total+=one;

  }

  return total;

}

Location: XSModelGroupImpl.java

Content: 

private int maxEffectiveTotalRangeChoice(){

  int max=0, one;

  if (fParticleCount > 0) {

    max=fParticles[0].maxEffectiveTotalRange();

    if (max == SchemaSymbols.OCCURRENCE_UNBOUNDED)     return SchemaSymbols.OCCURRENCE_UNBOUNDED;

  }

  for (int i=1; i < fParticleCount; i++) {

    one=fParticles[i].maxEffectiveTotalRange();

    if (one == SchemaSymbols.OCCURRENCE_UNBOUNDED)     return SchemaSymbols.OCCURRENCE_UNBOUNDED;

    if (one > max)     max=one;

  }

  return max;

}

Location: XSModelGroupImpl.java

Content: 

/** 

 * 3.8.6 Effective Total Range (all and sequence) and Effective Total Range (choice) The following methods are used to return min/max range for a particle. They are not exactly the same as it's described in the spec, but all the values from the spec are retrievable by these methods.

 */

public int minEffectiveTotalRange(){

  if (fCompositor == MODELGROUP_CHOICE)   return minEffectiveTotalRangeChoice();

 else   return minEffectiveTotalRangeAllSeq();

}

Location: XSModelGroupImpl.java

Content: 

private int minEffectiveTotalRangeAllSeq(){

  int total=0;

  for (int i=0; i < fParticleCount; i++)   total+=fParticles[i].minEffectiveTotalRange();

  return total;

}

Location: XSModelGroupImpl.java

Content: 

private int minEffectiveTotalRangeChoice(){

  int min=0, one;

  if (fParticleCount > 0)   min=fParticles[0].minEffectiveTotalRange();

  for (int i=1; i < fParticleCount; i++) {

    one=fParticles[i].minEffectiveTotalRange();

    if (one < min)     min=one;

  }

  return min;

}

