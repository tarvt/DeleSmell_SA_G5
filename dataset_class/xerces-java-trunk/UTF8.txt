Location: UTF8.java

Content: 

/** 

 * Creates an I/O exception for expected character. 

 */

static void expectedChar(String prefix,int ec,int fc) throws IOException {

  StringBuffer str=new StringBuffer();

  str.append("expected ");

  if (prefix != null) {

    str.append(prefix);

    str.append(' ');

  }

  str.append("0x");

  str.append(Integer.toHexString(ec));

  str.append(" but found 0x");

  if (fc != -1) {

    str.append(Integer.toHexString(fc));

  }

 else {

    str.append("EOF");

  }

  String message=str.toString();

  throw new IOException(message);

}

Location: UTF8.java

Content: 

/** 

 * Creates an I/O exception for extra character. 

 */

static void extraChar(int c) throws IOException {

  StringBuffer str=new StringBuffer();

  str.append("found extra character 0x");

  str.append(Integer.toHexString(c));

  String message=str.toString();

  throw new IOException(message);

}

Location: UTF8.java

Content: 

/** 

 * Loads another block of characters from the reader. 

 */

static int load(Reader reader,char[] ch) throws IOException {

  int count=reader.read(ch,0,ch.length);

  return count;

}

Location: UTF8.java

Content: 

/** 

 * This function tests the given reader by performing block character reads of the specified size.

 */

public static long testCharArray(Reader reader,int size) throws Exception {

  long before=System.currentTimeMillis();

  System.err.println("# Testing character array of size " + size);

  char[] ch=new char[size];

  int count=0;

  int position=0;

  System.err.println("testing 0x000000 -> 0x00007F");

  for (int i=0; i < 0x0080; i++) {

    if (position == count) {

      count=load(reader,ch);

      position=0;

    }

    int c=ch[position++];

    if (c != i) {

      expectedChar(null,i,c);

    }

  }

  System.err.println("testing 0x000080 -> 0x0007FF");

  for (int i=0x0080; i < 0x0800; i++) {

    if (position == count) {

      count=load(reader,ch);

      position=0;

    }

    int c=ch[position++];

    if (c != i) {

      expectedChar(null,i,c);

    }

  }

  System.err.println("testing 0x000800 -> 0x00D7FF");

  for (int i=0x0800; i < 0xD800; i++) {

    if (position == count) {

      count=load(reader,ch);

      position=0;

    }

    int c=ch[position++];

    if (c != i) {

      expectedChar(null,i,c);

    }

  }

  System.err.println("testing 0x00E000 -> 0x00FFFF");

  for (int i=0xE000; i < 0x010000; i++) {

    if (position == count) {

      count=load(reader,ch);

      position=0;

    }

    int c=ch[position++];

    if (c != i) {

      expectedChar(null,i,c);

    }

  }

  System.err.println("testing 0x010000 -> 0x10FFFF");

  for (int i=0x10000; i < 0x110000; i++) {

    int uuuuu=(i >> 16) & 0x001F;

    int wwww=uuuuu - 1;

    int zzzz=(i >> 12) & 0x000F;

    int yyyyyy=(i >> 6) & 0x003F;

    int xxxxxx=i & 0x003F;

    int hs=0xD800 | (wwww << 6) | (zzzz << 2)| (yyyyyy >> 4);

    int ls=0xDC00 | ((yyyyyy << 6) & 0x03C0) | xxxxxx;

    if (position == count) {

      count=load(reader,ch);

      position=0;

    }

    int c=ch[position++];

    if (c != hs) {

      expectedChar("high surrogate",hs,c);

    }

    if (position == count) {

      count=load(reader,ch);

      position=0;

    }

    c=ch[position++];

    if (c != ls) {

      expectedChar("low surrogate",ls,c);

    }

  }

  System.err.println("checking EOF");

  if (position == count) {

    count=load(reader,ch);

    position=0;

  }

  if (count != -1) {

    extraChar(ch[position]);

  }

  long after=System.currentTimeMillis();

  return after - before;

}

Location: UTF8.java

Content: 

/** 

 * This function tests the specified reader character by character. 

 */

public static long testCharByChar(Reader reader) throws Exception {

  long before=System.currentTimeMillis();

  System.err.println("# Testing character by character");

  System.err.println("testing 0x000000 -> 0x00007F");

  for (int i=0; i < 0x0080; i++) {

    int c=reader.read();

    if (c != i) {

      expectedChar(null,i,c);

    }

  }

  System.err.println("testing 0x000080 -> 0x0007FF");

  for (int i=0x0080; i < 0x0800; i++) {

    int c=reader.read();

    if (c != i) {

      expectedChar(null,i,c);

    }

  }

  System.err.println("testing 0x000800 -> 0x00D7FF");

  for (int i=0x0800; i < 0xD800; i++) {

    int c=reader.read();

    if (c != i) {

      expectedChar(null,i,c);

    }

  }

  System.err.println("testing 0x00E000 -> 0x00FFFF");

  for (int i=0xE000; i < 0x010000; i++) {

    int c=reader.read();

    if (c != i) {

      expectedChar(null,i,c);

    }

  }

  System.err.println("testing 0x010000 -> 0x110000");

  for (int i=0x10000; i < 0x110000; i++) {

    int uuuuu=(i >> 16) & 0x001F;

    int wwww=uuuuu - 1;

    int zzzz=(i >> 12) & 0x000F;

    int yyyyyy=(i >> 6) & 0x003F;

    int xxxxxx=i & 0x003F;

    int hs=0xD800 | (wwww << 6) | (zzzz << 2)| (yyyyyy >> 4);

    int ls=0xDC00 | ((yyyyyy << 6) & 0x03C0) | xxxxxx;

    int c=reader.read();

    if (c != hs) {

      expectedChar("high surrogate",hs,c);

    }

    c=reader.read();

    if (c != ls) {

      expectedChar("low surrogate",ls,c);

    }

  }

  System.err.println("checking EOF");

  int c=reader.read();

  if (c != -1) {

    extraChar(c);

  }

  long after=System.currentTimeMillis();

  return after - before;

}

