Location: ASModelImpl.java

Content: 

public ASModelImpl(){

  fASModels=new Vector();

}

Location: ASModelImpl.java

Content: 

public ASModelImpl(boolean isNamespaceAware){

  fASModels=new Vector();

  fNamespaceAware=isNamespaceAware;

}

Location: ASModelImpl.java

Content: 

/** 

 * If <code>usage</code> is EXTERNAL_SUBSET or NOT_USED, and the  <code>ASModel</code> is simply a container of other ASModels. 

 */

public boolean getContainer(){

  return (fGrammar != null);

}

Location: ASModelImpl.java

Content: 

public SchemaGrammar getGrammar(){

  return fGrammar;

}

Location: ASModelImpl.java

Content: 

public Vector getInternalASModels(){

  return fASModels;

}

Location: ASModelImpl.java

Content: 

/** 

 * Imports <code>ASObject</code> into ASModel. 

 * @param asobject  <code>ASObject</code> to be imported. 

 */

public void importASObject(ASObject asobject){

  String msg=DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN,"NOT_SUPPORTED_ERR",null);

  throw new DOMException(DOMException.NOT_SUPPORTED_ERR,msg);

}

Location: ASModelImpl.java

Content: 

/** 

 * Inserts <code>ASObject</code> into ASModel. 

 * @param asobject  <code>ASObject</code> to be inserted. 

 */

public void insertASObject(ASObject asobject){

  String msg=DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN,"NOT_SUPPORTED_ERR",null);

  throw new DOMException(DOMException.NOT_SUPPORTED_ERR,msg);

}

Location: ASModelImpl.java

Content: 

public void setGrammar(SchemaGrammar grammar){

  fGrammar=grammar;

}

