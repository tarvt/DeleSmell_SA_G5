Location: HTMLOptionElementImpl.java

Content: 

public boolean getDefaultSelected(){

  return getBinary("default-selected");

}

Location: HTMLOptionElementImpl.java

Content: 

public int getIndex(){

  Node parent;

  NodeList options;

  int i;

  parent=getParentNode();

  while (parent != null && !(parent instanceof HTMLSelectElement))   parent=parent.getParentNode();

  if (parent != null) {

    options=((HTMLElement)parent).getElementsByTagName("OPTION");

    for (i=0; i < options.getLength(); ++i)     if (options.item(i) == this)     return i;

  }

  return -1;

}

Location: HTMLOptionElementImpl.java

Content: 

public boolean getSelected(){

  return getBinary("selected");

}

Location: HTMLOptionElementImpl.java

Content: 

/** 

 * Constructor requires owner document.

 * @param owner The owner HTML document

 */

public HTMLOptionElementImpl(HTMLDocumentImpl owner,String name){

  super(owner,name);

}

Location: HTMLOptionElementImpl.java

Content: 

public void setDefaultSelected(boolean defaultSelected){

  setAttribute("default-selected",defaultSelected);

}

Location: HTMLOptionElementImpl.java

Content: 

public void setIndex(int index){

  Node parent;

  NodeList options;

  Node item;

  parent=getParentNode();

  while (parent != null && !(parent instanceof HTMLSelectElement))   parent=parent.getParentNode();

  if (parent != null) {

    options=((HTMLElement)parent).getElementsByTagName("OPTION");

    if (options.item(index) != this) {

      getParentNode().removeChild(this);

      item=options.item(index);

      item.getParentNode().insertBefore(this,item);

    }

  }

}

Location: HTMLOptionElementImpl.java

Content: 

public void setSelected(boolean selected){

  setAttribute("selected",selected);

}

Location: HTMLOptionElementImpl.java

Content: 

public void setText(String text){

  Node child;

  Node next;

  child=getFirstChild();

  while (child != null) {

    next=child.getNextSibling();

    removeChild(child);

    child=next;

  }

  insertBefore(getOwnerDocument().createTextNode(text),getFirstChild());

}

