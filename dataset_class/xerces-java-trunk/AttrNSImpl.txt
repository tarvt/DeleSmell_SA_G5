Location: AttrNSImpl.java

Content: 

public AttrNSImpl(){

}

Location: AttrNSImpl.java

Content: 

protected AttrNSImpl(CoreDocumentImpl ownerDocument,String value){

  super(ownerDocument,value);

}

Location: AttrNSImpl.java

Content: 

/** 

 * DOM2: Constructor for Namespace implementation.

 */

protected AttrNSImpl(CoreDocumentImpl ownerDocument,String namespaceURI,String qualifiedName){

  super(ownerDocument,qualifiedName);

  setName(namespaceURI,qualifiedName);

}

Location: AttrNSImpl.java

Content: 

public AttrNSImpl(CoreDocumentImpl ownerDocument,String namespaceURI,String qualifiedName,String localName){

  super(ownerDocument,qualifiedName);

  this.localName=localName;

  this.namespaceURI=namespaceURI;

}

Location: AttrNSImpl.java

Content: 

void rename(String namespaceURI,String qualifiedName){

  if (needsSyncData()) {

    synchronizeData();

  }

  this.name=qualifiedName;

  setName(namespaceURI,qualifiedName);

}

Location: AttrNSImpl.java

Content: 

private void setName(String namespaceURI,String qname){

  CoreDocumentImpl ownerDocument=ownerDocument();

  String prefix;

  this.namespaceURI=namespaceURI;

  if (namespaceURI != null) {

    this.namespaceURI=(namespaceURI.length() == 0) ? null : namespaceURI;

  }

  int colon1=qname.indexOf(':');

  int colon2=qname.lastIndexOf(':');

  ownerDocument.checkNamespaceWF(qname,colon1,colon2);

  if (colon1 < 0) {

    localName=qname;

    if (ownerDocument.errorChecking) {

      ownerDocument.checkQName(null,localName);

      if (qname.equals("xmlns") && (namespaceURI == null || !namespaceURI.equals(NamespaceContext.XMLNS_URI)) || (namespaceURI != null && namespaceURI.equals(NamespaceContext.XMLNS_URI) && !qname.equals("xmlns"))) {

        String msg=DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN,"NAMESPACE_ERR",null);

        throw new DOMException(DOMException.NAMESPACE_ERR,msg);

      }

    }

  }

 else {

    prefix=qname.substring(0,colon1);

    localName=qname.substring(colon2 + 1);

    ownerDocument.checkQName(prefix,localName);

    ownerDocument.checkDOMNSErr(prefix,namespaceURI);

  }

}

