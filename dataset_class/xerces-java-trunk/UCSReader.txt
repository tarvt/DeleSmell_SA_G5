Location: UCSReader.java

Content: 

/** 

 * Tell whether this stream supports the mark() operation.

 */

public boolean markSupported(){

  return fInputStream.markSupported();

}

Location: UCSReader.java

Content: 

/** 

 * Mark the present position in the stream.  Subsequent calls to reset() will attempt to reposition the stream to this point.  Not all character-input streams support the mark() operation.

 * @param readAheadLimit  Limit on the number of characters that may beread while still preserving the mark.  After reading this many characters, attempting to reset the stream may fail.

 * @exception IOException  If the stream does not support mark(),or if some other I/O error occurs

 */

public void mark(int readAheadLimit) throws IOException {

  fInputStream.mark(readAheadLimit);

}

Location: UCSReader.java

Content: 

/** 

 * Tell whether this stream is ready to be read.

 * @return True if the next read() is guaranteed not to block for input,false otherwise.  Note that returning false does not guarantee that the next read will block.

 * @exception IOException  If an I/O error occurs

 */

public boolean ready() throws IOException {

  return false;

}

Location: UCSReader.java

Content: 

/** 

 * Read characters into a portion of an array.  This method will block until some input is available, an I/O error occurs, or the end of the stream is reached.

 * @param ch     Destination buffer

 * @param offset Offset at which to start storing characters

 * @param length Maximum number of characters to read

 * @return     The number of characters read, or -1 if the end of thestream has been reached

 * @exception IOException  If an I/O error occurs

 */

public int read(char ch[],int offset,int length) throws IOException {

  int byteLength=length << ((fEncoding >= 4) ? 2 : 1);

  if (byteLength > fBuffer.length) {

    byteLength=fBuffer.length;

  }

  int count=fInputStream.read(fBuffer,0,byteLength);

  if (count == -1)   return -1;

  if (fEncoding >= 4) {

    int numToRead=(4 - (count & 3) & 3);

    for (int i=0; i < numToRead; i++) {

      int charRead=fInputStream.read();

      if (charRead == -1) {

        for (int j=i; j < numToRead; j++) {

          fBuffer[count + j]=0;

        }

        break;

      }

      fBuffer[count + i]=(byte)charRead;

    }

    count+=numToRead;

  }

 else {

    int numToRead=count & 1;

    if (numToRead != 0) {

      count++;

      int charRead=fInputStream.read();

      if (charRead == -1) {

        fBuffer[count]=0;

      }

 else {

        fBuffer[count]=(byte)charRead;

      }

    }

  }

  int numChars=count >> ((fEncoding >= 4) ? 2 : 1);

  int curPos=0;

  for (int i=0; i < numChars; i++) {

    int b0=fBuffer[curPos++] & 0xff;

    int b1=fBuffer[curPos++] & 0xff;

    if (fEncoding >= 4) {

      int b2=fBuffer[curPos++] & 0xff;

      int b3=fBuffer[curPos++] & 0xff;

      if (fEncoding == UCS4BE) {

        ch[offset + i]=(char)((b0 << 24) + (b1 << 16) + (b2 << 8)+ b3);

      }

 else {

        ch[offset + i]=(char)((b3 << 24) + (b2 << 16) + (b1 << 8)+ b0);

      }

    }

 else {

      if (fEncoding == UCS2BE) {

        ch[offset + i]=(char)((b0 << 8) + b1);

      }

 else {

        ch[offset + i]=(char)((b1 << 8) + b0);

      }

    }

  }

  return numChars;

}

Location: UCSReader.java

Content: 

/** 

 * Constructs a UCS reader from the specified input stream  and buffer.  The Endian-ness and whether this is UCS-2 or UCS-4 needs also to be known in advance.

 * @param inputStream The input stream.

 * @param buffer      The byte buffer.

 * @param encoding One of UCS2LE, UCS2BE, UCS4LE or UCS4BE.

 */

public UCSReader(InputStream inputStream,byte[] buffer,short encoding){

  fInputStream=inputStream;

  fBuffer=buffer;

  fEncoding=encoding;

}

Location: UCSReader.java

Content: 

/** 

 * Constructs a UCS reader from the specified input stream  and buffer size.  The Endian-ness and whether this is UCS-2 or UCS-4 needs also to be known in advance.

 * @param inputStream The input stream.

 * @param size        The initial buffer size.

 * @param encoding One of UCS2LE, UCS2BE, UCS4LE or UCS4BE.

 */

public UCSReader(InputStream inputStream,int size,short encoding){

  this(inputStream,new byte[size],encoding);

}

Location: UCSReader.java

Content: 

/** 

 * Constructs a UCS reader from the specified input stream  using the default buffer size.  The Endian-ness and whether this is UCS-2 or UCS-4 needs also to be known in advance.

 * @param inputStream The input stream.

 * @param encoding One of UCS2LE, UCS2BE, UCS4LE or UCS4BE.

 */

public UCSReader(InputStream inputStream,short encoding){

  this(inputStream,DEFAULT_BUFFER_SIZE,encoding);

}

