Location: DOMASBuilderImpl.java

Content: 

private void addGrammars(ASModelImpl model,XSGrammarBucket grammarBucket){

  SchemaGrammar[] grammarList=grammarBucket.getGrammars();

  for (int i=0; i < grammarList.length; i++) {

    ASModelImpl newModel=new ASModelImpl();

    newModel.setGrammar(grammarList[i]);

    model.addASModel(newModel);

  }

}

Location: DOMASBuilderImpl.java

Content: 

/** 

 * Constructs a DOM Builder using the dtd/xml schema parser configuration.

 */

public DOMASBuilderImpl(){

  super(new XMLGrammarCachingConfiguration());

}

Location: DOMASBuilderImpl.java

Content: 

/** 

 * Constructs a DOM Builder using the specified symbol table.

 */

public DOMASBuilderImpl(SymbolTable symbolTable){

  super(new XMLGrammarCachingConfiguration(symbolTable));

}

Location: DOMASBuilderImpl.java

Content: 

/** 

 * Constructs a DOM Builder using the specified symbol table and grammar pool. The grammarPool implementation should extent the default implementation; otherwise, correct functioning of this class may not occur.

 */

public DOMASBuilderImpl(SymbolTable symbolTable,XMLGrammarPool grammarPool){

  super(new XMLGrammarCachingConfiguration(symbolTable,grammarPool));

}

Location: DOMASBuilderImpl.java

Content: 

/** 

 * Constructs a DOM Builder using the specified parser configuration. We must demand that the configuration extend XMLGrammarCachingConfiguration to make sure all relevant methods/features are available.

 */

public DOMASBuilderImpl(XMLGrammarCachingConfiguration config){

  super(config);

}

Location: DOMASBuilderImpl.java

Content: 

/** 

 * Associate an <code>ASModel</code> with a document instance. This <code>ASModel</code> will be used by the " <code>validate-if-schema</code>" and " <code>datatype-normalization</code>" options during the load of a new <code>Document</code>.

 */

public ASModel getAbstractSchema(){

  return fAbstractSchema;

}

Location: DOMASBuilderImpl.java

Content: 

private void initGrammarBucket(){

  fGrammarBucket.reset();

  if (fAbstractSchema != null)   initGrammarBucketRecurse(fAbstractSchema);

}

Location: DOMASBuilderImpl.java

Content: 

private void initGrammarBucketRecurse(ASModelImpl currModel){

  if (currModel.getGrammar() != null) {

    fGrammarBucket.putGrammar(currModel.getGrammar());

  }

  for (int i=0; i < currModel.getInternalASModels().size(); i++) {

    ASModelImpl nextModel=(ASModelImpl)(currModel.getInternalASModels().elementAt(i));

    initGrammarBucketRecurse(nextModel);

  }

}

Location: DOMASBuilderImpl.java

Content: 

private void initGrammarPool(ASModelImpl currModel,XMLGrammarPool grammarPool){

  Grammar[] grammars=new Grammar[1];

  if ((grammars[0]=(Grammar)currModel.getGrammar()) != null) {

    grammarPool.cacheGrammars(grammars[0].getGrammarDescription().getGrammarType(),grammars);

  }

  Vector modelStore=currModel.getInternalASModels();

  for (int i=0; i < modelStore.size(); i++) {

    initGrammarPool((ASModelImpl)modelStore.elementAt(i),grammarPool);

  }

}

Location: DOMASBuilderImpl.java

Content: 

/** 

 * Parse a Abstract Schema from a location identified by an <code>LSInput</code>.

 * @param is The <code>LSInput</code> from which the sourceAbstract Schema is to be read.

 * @return The newly created <code>ASModel</code>.

 * @exception DOMASException Exceptions raised by <code>parseASURI()</code> originate with the installed ErrorHandler, and thus depend on the implementation of the <code>DOMErrorHandler</code> interfaces. The default error handlers will raise a <code>DOMASException</code> if any form of Abstract Schema inconsistencies or warning occurs during the parse, but application defined errorHandlers are not required to do so. <br> WRONG_MIME_TYPE_ERR: Raised when <code>mimeTypeCheck</code> is true and the inputsource has an incorrect MIME Type. See attribute <code>mimeTypeCheck</code>.

 * @exception DOMSystemException Exceptions raised by <code>parseURI()</code> originate with the installed ErrorHandler, and thus depend on the implementation of the <code>DOMErrorHandler</code> interfaces. The default error handlers will raise a DOMSystemException if any form I/O or other system error occurs during the parse, but application defined error handlers are not required to do so.

 */

public ASModel parseASInputSource(LSInput is) throws DOMASException, Exception {

  XMLInputSource xis=this.dom2xmlInputSource(is);

  try {

    return parseASInputSource(xis);

  }

 catch (  XNIException e) {

    Exception ex=e.getException();

    throw ex;

  }

}

Location: DOMASBuilderImpl.java

Content: 

ASModel parseASInputSource(XMLInputSource is) throws Exception {

  if (fGrammarBucket == null) {

    fGrammarBucket=new XSGrammarBucket();

  }

  initGrammarBucket();

  XMLGrammarCachingConfiguration gramConfig=(XMLGrammarCachingConfiguration)fConfiguration;

  gramConfig.lockGrammarPool();

  SchemaGrammar grammar=gramConfig.parseXMLSchema(is);

  gramConfig.unlockGrammarPool();

  ASModelImpl newAsModel=null;

  if (grammar != null) {

    newAsModel=new ASModelImpl();

    fGrammarBucket.putGrammar(grammar,true);

    addGrammars(newAsModel,fGrammarBucket);

  }

  return newAsModel;

}

Location: DOMASBuilderImpl.java

Content: 

/** 

 * Parse a Abstract Schema from a location identified by an URI.

 * @param uri The location of the Abstract Schema to be read.

 * @return The newly created <code>Abstract Schema</code>.

 * @exception DOMASException Exceptions raised by <code>parseASURI()</code> originate with the installed ErrorHandler, and thus depend on the implementation of the <code>DOMErrorHandler</code> interfaces. The default error handlers will raise a <code>DOMASException</code> if any form of Abstract Schema inconsistencies or warning occurs during the parse, but application defined errorHandlers are not required to do so. <br> WRONG_MIME_TYPE_ERR: Raised when <code>mimeTypeCheck</code> is <code>true</code> and the inputsource has an incorrect MIME Type. See attribute <code>mimeTypeCheck</code>.

 * @exception DOMSystemException Exceptions raised by <code>parseURI()</code> originate with the installed ErrorHandler, and thus depend on the implementation of the <code>DOMErrorHandler</code> interfaces. The default error handlers will raise a DOMSystemException if any form I/O or other system error occurs during the parse, but application defined error handlers are not required to do so.

 */

public ASModel parseASURI(String uri) throws DOMASException, Exception {

  XMLInputSource source=new XMLInputSource(null,uri,null);

  return parseASInputSource(source);

}

Location: DOMASBuilderImpl.java

Content: 

/** 

 * Associate an <code>ASModel</code> with a document instance. This <code>ASModel</code> will be used by the " <code>validate-if-schema</code>" and " <code>datatype-normalization</code>" options during the load of a new <code>Document</code>.

 */

public void setAbstractSchema(ASModel abstractSchema){

  fAbstractSchema=(ASModelImpl)abstractSchema;

  XMLGrammarPool grammarPool=(XMLGrammarPool)fConfiguration.getProperty(StandardParserConfiguration.XMLGRAMMAR_POOL);

  if (grammarPool == null) {

    grammarPool=new XMLGrammarPoolImpl();

    fConfiguration.setProperty(StandardParserConfiguration.XMLGRAMMAR_POOL,grammarPool);

  }

  if (fAbstractSchema != null) {

    initGrammarPool(fAbstractSchema,grammarPool);

  }

}

