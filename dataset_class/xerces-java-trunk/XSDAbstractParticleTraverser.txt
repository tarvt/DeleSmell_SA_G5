Location: XSDAbstractParticleTraverser.java

Content: 

protected boolean hasAllContent(XSParticleDecl particle){

  if (particle != null && particle.fType == XSParticleDecl.PARTICLE_MODELGROUP) {

    return ((XSModelGroupImpl)particle.fValue).fCompositor == XSModelGroupImpl.MODELGROUP_ALL;

  }

  return false;

}

Location: XSDAbstractParticleTraverser.java

Content: 

/** 

 * Traverse the "All" declaration &lt;all id = ID maxOccurs = 1 : 1 minOccurs = (0 | 1) : 1&gt; Content: (annotation? , element*) &lt;/all&gt;

 */

XSParticleDecl traverseAll(Element allDecl,XSDocumentInfo schemaDoc,SchemaGrammar grammar,int allContextFlags,XSObject parent){

  Object[] attrValues=fAttrChecker.checkAttributes(allDecl,false,schemaDoc);

  Element child=DOMUtil.getFirstChildElement(allDecl);

  XSAnnotationImpl annotation=null;

  if (child != null && DOMUtil.getLocalName(child).equals(SchemaSymbols.ELT_ANNOTATION)) {

    annotation=traverseAnnotationDecl(child,attrValues,false,schemaDoc);

    child=DOMUtil.getNextSiblingElement(child);

  }

 else {

    String text=DOMUtil.getSyntheticAnnotation(allDecl);

    if (text != null) {

      annotation=traverseSyntheticAnnotation(allDecl,text,attrValues,false,schemaDoc);

    }

  }

  String childName=null;

  XSParticleDecl particle;

  fPArray.pushContext();

  for (; child != null; child=DOMUtil.getNextSiblingElement(child)) {

    particle=null;

    childName=DOMUtil.getLocalName(child);

    if (childName.equals(SchemaSymbols.ELT_ELEMENT)) {

      particle=fSchemaHandler.fElementTraverser.traverseLocal(child,schemaDoc,grammar,PROCESSING_ALL_EL,parent);

    }

 else {

      Object[] args={"all","(annotation?, element*)",DOMUtil.getLocalName(child)};

      reportSchemaError("s4s-elt-must-match.1",args,child);

    }

    if (particle != null)     fPArray.addParticle(particle);

  }

  particle=null;

  XInt minAtt=(XInt)attrValues[XSAttributeChecker.ATTIDX_MINOCCURS];

  XInt maxAtt=(XInt)attrValues[XSAttributeChecker.ATTIDX_MAXOCCURS];

  Long defaultVals=(Long)attrValues[XSAttributeChecker.ATTIDX_FROMDEFAULT];

  XSModelGroupImpl group=new XSModelGroupImpl();

  group.fCompositor=XSModelGroupImpl.MODELGROUP_ALL;

  group.fParticleCount=fPArray.getParticleCount();

  group.fParticles=fPArray.popContext();

  XSObjectList annotations;

  if (annotation != null) {

    annotations=new XSObjectListImpl();

    ((XSObjectListImpl)annotations).addXSObject(annotation);

  }

 else {

    annotations=XSObjectListImpl.EMPTY_LIST;

  }

  group.fAnnotations=annotations;

  particle=new XSParticleDecl();

  particle.fType=XSParticleDecl.PARTICLE_MODELGROUP;

  particle.fMinOccurs=minAtt.intValue();

  particle.fMaxOccurs=maxAtt.intValue();

  particle.fValue=group;

  particle.fAnnotations=annotations;

  particle=checkOccurrences(particle,SchemaSymbols.ELT_ALL,(Element)allDecl.getParentNode(),allContextFlags,defaultVals.longValue());

  fAttrChecker.returnAttrArray(attrValues,schemaDoc);

  return particle;

}

Location: XSDAbstractParticleTraverser.java

Content: 

/** 

 * Traverse the Choice declaration <choice id = ID maxOccurs = string minOccurs = nonNegativeInteger> Content: (annotation? , (element | group | choice | sequence | any)*) </choice>

 * @param choiceDecl

 * @param schemaDoc

 * @param grammar

 * @return

 */

XSParticleDecl traverseChoice(Element choiceDecl,XSDocumentInfo schemaDoc,SchemaGrammar grammar,int allContextFlags,XSObject parent){

  return traverseSeqChoice(choiceDecl,schemaDoc,grammar,allContextFlags,true,parent);

}

Location: XSDAbstractParticleTraverser.java

Content: 

/** 

 * Common traversal for <choice> and <sequence>

 * @param decl

 * @param schemaDoc

 * @param grammar

 * @param choice    If traversing <choice> this parameter is true.

 * @return

 */

private XSParticleDecl traverseSeqChoice(Element decl,XSDocumentInfo schemaDoc,SchemaGrammar grammar,int allContextFlags,boolean choice,XSObject parent){

  Object[] attrValues=fAttrChecker.checkAttributes(decl,false,schemaDoc);

  Element child=DOMUtil.getFirstChildElement(decl);

  XSAnnotationImpl annotation=null;

  if (child != null && DOMUtil.getLocalName(child).equals(SchemaSymbols.ELT_ANNOTATION)) {

    annotation=traverseAnnotationDecl(child,attrValues,false,schemaDoc);

    child=DOMUtil.getNextSiblingElement(child);

  }

 else {

    String text=DOMUtil.getSyntheticAnnotation(decl);

    if (text != null) {

      annotation=traverseSyntheticAnnotation(decl,text,attrValues,false,schemaDoc);

    }

  }

  String childName=null;

  XSParticleDecl particle;

  fPArray.pushContext();

  for (; child != null; child=DOMUtil.getNextSiblingElement(child)) {

    particle=null;

    childName=DOMUtil.getLocalName(child);

    if (childName.equals(SchemaSymbols.ELT_ELEMENT)) {

      particle=fSchemaHandler.fElementTraverser.traverseLocal(child,schemaDoc,grammar,NOT_ALL_CONTEXT,parent);

    }

 else     if (childName.equals(SchemaSymbols.ELT_GROUP)) {

      particle=fSchemaHandler.fGroupTraverser.traverseLocal(child,schemaDoc,grammar);

      if (hasAllContent(particle)) {

        particle=null;

        reportSchemaError("cos-all-limited.1.2",null,child);

      }

    }

 else     if (childName.equals(SchemaSymbols.ELT_CHOICE)) {

      particle=traverseChoice(child,schemaDoc,grammar,NOT_ALL_CONTEXT,parent);

    }

 else     if (childName.equals(SchemaSymbols.ELT_SEQUENCE)) {

      particle=traverseSequence(child,schemaDoc,grammar,NOT_ALL_CONTEXT,parent);

    }

 else     if (childName.equals(SchemaSymbols.ELT_ANY)) {

      particle=fSchemaHandler.fWildCardTraverser.traverseAny(child,schemaDoc,grammar);

    }

 else {

      Object[] args;

      if (choice) {

        args=new Object[]{"choice","(annotation?, (element | group | choice | sequence | any)*)",DOMUtil.getLocalName(child)};

      }

 else {

        args=new Object[]{"sequence","(annotation?, (element | group | choice | sequence | any)*)",DOMUtil.getLocalName(child)};

      }

      reportSchemaError("s4s-elt-must-match.1",args,child);

    }

    if (particle != null)     fPArray.addParticle(particle);

  }

  particle=null;

  XInt minAtt=(XInt)attrValues[XSAttributeChecker.ATTIDX_MINOCCURS];

  XInt maxAtt=(XInt)attrValues[XSAttributeChecker.ATTIDX_MAXOCCURS];

  Long defaultVals=(Long)attrValues[XSAttributeChecker.ATTIDX_FROMDEFAULT];

  XSModelGroupImpl group=new XSModelGroupImpl();

  group.fCompositor=choice ? XSModelGroupImpl.MODELGROUP_CHOICE : XSModelGroupImpl.MODELGROUP_SEQUENCE;

  group.fParticleCount=fPArray.getParticleCount();

  group.fParticles=fPArray.popContext();

  XSObjectList annotations;

  if (annotation != null) {

    annotations=new XSObjectListImpl();

    ((XSObjectListImpl)annotations).addXSObject(annotation);

  }

 else {

    annotations=XSObjectListImpl.EMPTY_LIST;

  }

  group.fAnnotations=annotations;

  particle=new XSParticleDecl();

  particle.fType=XSParticleDecl.PARTICLE_MODELGROUP;

  particle.fMinOccurs=minAtt.intValue();

  particle.fMaxOccurs=maxAtt.intValue();

  particle.fValue=group;

  particle.fAnnotations=annotations;

  particle=checkOccurrences(particle,choice ? SchemaSymbols.ELT_CHOICE : SchemaSymbols.ELT_SEQUENCE,(Element)decl.getParentNode(),allContextFlags,defaultVals.longValue());

  fAttrChecker.returnAttrArray(attrValues,schemaDoc);

  return particle;

}

Location: XSDAbstractParticleTraverser.java

Content: 

/** 

 * Traverse the Sequence declaration <sequence id = ID maxOccurs = string minOccurs = nonNegativeInteger> Content: (annotation? , (element | group | choice | sequence | any)*) </sequence>

 * @param seqDecl

 * @param schemaDoc

 * @param grammar

 * @return

 */

XSParticleDecl traverseSequence(Element seqDecl,XSDocumentInfo schemaDoc,SchemaGrammar grammar,int allContextFlags,XSObject parent){

  return traverseSeqChoice(seqDecl,schemaDoc,grammar,allContextFlags,false,parent);

}

Location: XSDAbstractParticleTraverser.java

Content: 

XSDAbstractParticleTraverser(XSDHandler handler,XSAttributeChecker gAttrCheck){

  super(handler,gAttrCheck);

}

