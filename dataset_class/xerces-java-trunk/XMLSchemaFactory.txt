Location: XMLSchemaFactory.java

Content: 

/** 

 * <p>Is specified schema supported by this <code>SchemaFactory</code>?</p>

 * @param schemaLanguage Specifies the schema language which the returned <code>SchemaFactory</code> will understand.<code>schemaLanguage</code> must specify a <a href="#schemaLanguage">valid</a> schema language.

 * @return <code>true</code> if <code>SchemaFactory</code> supports <code>schemaLanguage</code>, else <code>false</code>.

 * @throws NullPointerException If <code>schemaLanguage</code> is <code>null</code>.

 * @throws IllegalArgumentException If <code>schemaLanguage.length() == 0</code>or <code>schemaLanguage</code> does not specify a <a href="#schemaLanguage">valid</a> schema language.

 */

public boolean isSchemaLanguageSupported(String schemaLanguage){

  if (schemaLanguage == null) {

    throw new NullPointerException(JAXPValidationMessageFormatter.formatMessage(fXMLSchemaLoader.getLocale(),"SchemaLanguageNull",null));

  }

  if (schemaLanguage.length() == 0) {

    throw new IllegalArgumentException(JAXPValidationMessageFormatter.formatMessage(fXMLSchemaLoader.getLocale(),"SchemaLanguageLengthZero",null));

  }

  return schemaLanguage.equals(XMLConstants.W3C_XML_SCHEMA_NS_URI) || schemaLanguage.equals(Constants.W3C_XML_SCHEMA10_NS_URI);

}

Location: XMLSchemaFactory.java

Content: 

public Schema newSchema() throws SAXException {

  AbstractXMLSchema schema=new WeakReferenceXMLSchema();

  propagateFeatures(schema);

  return schema;

}

Location: XMLSchemaFactory.java

Content: 

public Schema newSchema(Source[] schemas) throws SAXException {

  XMLGrammarPoolImplExtension pool=new XMLGrammarPoolImplExtension();

  fXMLGrammarPoolWrapper.setGrammarPool(pool);

  XMLInputSource[] xmlInputSources=new XMLInputSource[schemas.length];

  InputStream inputStream;

  Reader reader;

  for (int i=0; i < schemas.length; ++i) {

    Source source=schemas[i];

    if (source instanceof StreamSource) {

      StreamSource streamSource=(StreamSource)source;

      String publicId=streamSource.getPublicId();

      String systemId=streamSource.getSystemId();

      inputStream=streamSource.getInputStream();

      reader=streamSource.getReader();

      XMLInputSource xmlInputSource=new XMLInputSource(publicId,systemId,null);

      xmlInputSource.setByteStream(inputStream);

      xmlInputSource.setCharacterStream(reader);

      xmlInputSources[i]=xmlInputSource;

    }

 else     if (source instanceof SAXSource) {

      SAXSource saxSource=(SAXSource)source;

      InputSource inputSource=saxSource.getInputSource();

      if (inputSource == null) {

        throw new SAXException(JAXPValidationMessageFormatter.formatMessage(fXMLSchemaLoader.getLocale(),"SAXSourceNullInputSource",null));

      }

      xmlInputSources[i]=new SAXInputSource(saxSource.getXMLReader(),inputSource);

    }

 else     if (source instanceof DOMSource) {

      DOMSource domSource=(DOMSource)source;

      Node node=domSource.getNode();

      String systemID=domSource.getSystemId();

      xmlInputSources[i]=new DOMInputSource(node,systemID);

    }

 else     if (source instanceof StAXSource) {

      StAXSource staxSource=(StAXSource)source;

      XMLEventReader eventReader=staxSource.getXMLEventReader();

      if (eventReader != null) {

        xmlInputSources[i]=new StAXInputSource(eventReader);

      }

 else {

        xmlInputSources[i]=new StAXInputSource(staxSource.getXMLStreamReader());

      }

    }

 else     if (source == null) {

      throw new NullPointerException(JAXPValidationMessageFormatter.formatMessage(fXMLSchemaLoader.getLocale(),"SchemaSourceArrayMemberNull",null));

    }

 else {

      throw new IllegalArgumentException(JAXPValidationMessageFormatter.formatMessage(fXMLSchemaLoader.getLocale(),"SchemaFactorySourceUnrecognized",new Object[]{source.getClass().getName()}));

    }

  }

  try {

    fXMLSchemaLoader.loadGrammar(xmlInputSources);

  }

 catch (  XNIException e) {

    throw Util.toSAXException(e);

  }

catch (  IOException e) {

    SAXParseException se=new SAXParseException(e.getMessage(),null,e);

    if (fErrorHandler != null) {

      fErrorHandler.error(se);

    }

    throw se;

  }

  fXMLGrammarPoolWrapper.setGrammarPool(null);

  final int grammarCount=pool.getGrammarCount();

  AbstractXMLSchema schema=null;

  if (fUseGrammarPoolOnly) {

    if (grammarCount > 1) {

      schema=new XMLSchema(new ReadOnlyGrammarPool(pool));

    }

 else     if (grammarCount == 1) {

      Grammar[] grammars=pool.retrieveInitialGrammarSet(XMLGrammarDescription.XML_SCHEMA);

      schema=new SimpleXMLSchema(grammars[0]);

    }

 else {

      schema=new EmptyXMLSchema();

    }

  }

 else {

    schema=new XMLSchema(new ReadOnlyGrammarPool(pool),false);

  }

  propagateFeatures(schema);

  return schema;

}

Location: XMLSchemaFactory.java

Content: 

public Schema newSchema(XMLGrammarPool pool) throws SAXException {

  final AbstractXMLSchema schema=(fUseGrammarPoolOnly) ? new XMLSchema(new ReadOnlyGrammarPool(pool)) : new XMLSchema(pool,false);

  propagateFeatures(schema);

  return schema;

}

Location: XMLSchemaFactory.java

Content: 

private void propagateFeatures(AbstractXMLSchema schema){

  schema.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING,fSecurityManager != null);

  String[] features=fXMLSchemaLoader.getRecognizedFeatures();

  for (int i=0; i < features.length; ++i) {

    boolean state=fXMLSchemaLoader.getFeature(features[i]);

    schema.setFeature(features[i],state);

  }

}

Location: XMLSchemaFactory.java

Content: 

public XMLSchemaFactory(){

  fErrorHandlerWrapper=new ErrorHandlerWrapper(DraconianErrorHandler.getInstance());

  fDOMEntityResolverWrapper=new DOMEntityResolverWrapper();

  fXMLGrammarPoolWrapper=new XMLGrammarPoolWrapper();

  fXMLSchemaLoader.setFeature(SCHEMA_FULL_CHECKING,true);

  fXMLSchemaLoader.setProperty(XMLGRAMMAR_POOL,fXMLGrammarPoolWrapper);

  fXMLSchemaLoader.setEntityResolver(fDOMEntityResolverWrapper);

  fXMLSchemaLoader.setErrorHandler(fErrorHandlerWrapper);

  fUseGrammarPoolOnly=true;

}

