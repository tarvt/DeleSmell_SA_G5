Location: RegularExpression.java

Content: 

/** 

 * Compiles a token tree into an operation flow.

 */

private synchronized void compile(Token tok){

  if (this.operations != null)   return;

  this.numberOfClosures=0;

  this.operations=this.compile(tok,null,false);

}

Location: RegularExpression.java

Content: 

/** 

 * Converts a token to an operation.

 */

private Op compile(Token tok,Op next,boolean reverse){

  Op ret;

switch (tok.type) {

case Token.DOT:

    ret=Op.createDot();

  ret.next=next;

break;

case Token.CHAR:

ret=Op.createChar(tok.getChar());

ret.next=next;

break;

case Token.ANCHOR:

ret=Op.createAnchor(tok.getChar());

ret.next=next;

break;

case Token.RANGE:

case Token.NRANGE:

ret=Op.createRange(tok);

ret.next=next;

break;

case Token.CONCAT:

ret=next;

if (!reverse) {

for (int i=tok.size() - 1; i >= 0; i--) {

ret=compile(tok.getChild(i),ret,false);

}

}

 else {

for (int i=0; i < tok.size(); i++) {

ret=compile(tok.getChild(i),ret,true);

}

}

break;

case Token.UNION:

Op.UnionOp uni=Op.createUnion(tok.size());

for (int i=0; i < tok.size(); i++) {

uni.addElement(compile(tok.getChild(i),next,reverse));

}

ret=uni;

break;

case Token.CLOSURE:

case Token.NONGREEDYCLOSURE:

Token child=tok.getChild(0);

int min=tok.getMin();

int max=tok.getMax();

if (min >= 0 && min == max) {

ret=next;

for (int i=0; i < min; i++) {

ret=compile(child,ret,reverse);

}

break;

}

if (min > 0 && max > 0) max-=min;

if (max > 0) {

ret=next;

for (int i=0; i < max; i++) {

Op.ChildOp q=Op.createQuestion(tok.type == Token.NONGREEDYCLOSURE);

q.next=next;

q.setChild(compile(child,ret,reverse));

ret=q;

}

}

 else {

Op.ChildOp op;

if (tok.type == Token.NONGREEDYCLOSURE) {

op=Op.createNonGreedyClosure();

}

 else {

op=Op.createClosure(this.numberOfClosures++);

}

op.next=next;

op.setChild(compile(child,op,reverse));

ret=op;

}

if (min > 0) {

for (int i=0; i < min; i++) {

ret=compile(child,ret,reverse);

}

}

break;

case Token.EMPTY:

ret=next;

break;

case Token.STRING:

ret=Op.createString(tok.getString());

ret.next=next;

break;

case Token.BACKREFERENCE:

ret=Op.createBackReference(tok.getReferenceNumber());

ret.next=next;

break;

case Token.PAREN:

if (tok.getParenNumber() == 0) {

ret=compile(tok.getChild(0),next,reverse);

}

 else if (reverse) {

next=Op.createCapture(tok.getParenNumber(),next);

next=compile(tok.getChild(0),next,reverse);

ret=Op.createCapture(-tok.getParenNumber(),next);

}

 else {

next=Op.createCapture(-tok.getParenNumber(),next);

next=compile(tok.getChild(0),next,reverse);

ret=Op.createCapture(tok.getParenNumber(),next);

}

break;

case Token.LOOKAHEAD:

ret=Op.createLook(Op.LOOKAHEAD,next,compile(tok.getChild(0),null,false));

break;

case Token.NEGATIVELOOKAHEAD:

ret=Op.createLook(Op.NEGATIVELOOKAHEAD,next,compile(tok.getChild(0),null,false));

break;

case Token.LOOKBEHIND:

ret=Op.createLook(Op.LOOKBEHIND,next,compile(tok.getChild(0),null,true));

break;

case Token.NEGATIVELOOKBEHIND:

ret=Op.createLook(Op.NEGATIVELOOKBEHIND,next,compile(tok.getChild(0),null,true));

break;

case Token.INDEPENDENT:

ret=Op.createIndependent(next,compile(tok.getChild(0),null,reverse));

break;

case Token.MODIFIERGROUP:

ret=Op.createModifier(next,compile(tok.getChild(0),null,reverse),((Token.ModifierToken)tok).getOptions(),((Token.ModifierToken)tok).getOptionsMask());

break;

case Token.CONDITION:

Token.ConditionToken ctok=(Token.ConditionToken)tok;

int ref=ctok.refNumber;

Op condition=ctok.condition == null ? null : compile(ctok.condition,null,reverse);

Op yes=compile(ctok.yes,next,reverse);

Op no=ctok.no == null ? null : compile(ctok.no,next,reverse);

ret=Op.createCondition(next,ref,condition,yes,no);

break;

default :

throw new RuntimeException("Unknown token type: " + tok.type);

}

return ret;

}

Location: RegularExpression.java

Content: 

boolean equals(String pattern,int options){

  return this.regex.equals(pattern) && this.options == options;

}

Location: RegularExpression.java

Content: 

/** 

 * Returns a option string. The order of letters in it may be different from a string specified in a constructor or <code>setPattern()</code>.

 * @see #RegularExpression(java.lang.String,java.lang.String)

 * @see #setPattern(java.lang.String,java.lang.String)

 */

public String getOptions(){

  return REUtil.createOptionString(this.options);

}

Location: RegularExpression.java

Content: 

/** 

 */

public String getPattern(){

  return this.regex;

}

Location: RegularExpression.java

Content: 

private static final int getPreviousWordType(ExpressionTarget target,int begin,int end,int offset,int opts){

  int ret=getWordType(target,begin,end,--offset,opts);

  while (ret == WT_IGNORE)   ret=getWordType(target,begin,end,--offset,opts);

  return ret;

}

Location: RegularExpression.java

Content: 

private static final int getWordType0(char ch,int opts){

  if (!isSet(opts,UNICODE_WORD_BOUNDARY)) {

    if (isSet(opts,USE_UNICODE_CATEGORY)) {

      return (Token.getRange("IsWord",true).match(ch)) ? WT_LETTER : WT_OTHER;

    }

    return isWordChar(ch) ? WT_LETTER : WT_OTHER;

  }

switch (Character.getType(ch)) {

case Character.UPPERCASE_LETTER:

case Character.LOWERCASE_LETTER:

case Character.TITLECASE_LETTER:

case Character.MODIFIER_LETTER:

case Character.OTHER_LETTER:

case Character.LETTER_NUMBER:

case Character.DECIMAL_DIGIT_NUMBER:

case Character.OTHER_NUMBER:

case Character.COMBINING_SPACING_MARK:

    return WT_LETTER;

case Character.FORMAT:

case Character.NON_SPACING_MARK:

case Character.ENCLOSING_MARK:

  return WT_IGNORE;

case Character.CONTROL:

switch (ch) {

case '\t':

case '\n':

case '\u000B':

case '\f':

case '\r':

  return WT_OTHER;

default :

return WT_IGNORE;

}

default :

return WT_OTHER;

}

}

Location: RegularExpression.java

Content: 

private static final int getWordType(ExpressionTarget target,int begin,int end,int offset,int opts){

  if (offset < begin || offset >= end)   return WT_OTHER;

  return getWordType0(target.charAt(offset),opts);

}

Location: RegularExpression.java

Content: 

private static final boolean isEOLChar(int ch){

  return ch == LINE_FEED || ch == CARRIAGE_RETURN || ch == LINE_SEPARATOR || ch == PARAGRAPH_SEPARATOR;

}

Location: RegularExpression.java

Content: 

private static final boolean isWordChar(int ch){

  if (ch == '_')   return true;

  if (ch < '0')   return false;

  if (ch > 'z')   return false;

  if (ch <= '9')   return true;

  if (ch < 'A')   return false;

  if (ch <= 'Z')   return true;

  if (ch < 'a')   return false;

  return true;

}

Location: RegularExpression.java

Content: 

boolean matchAnchor(ExpressionTarget target,Op op,Context con,int offset,int opts){

  boolean go=false;

switch (op.getData()) {

case '^':

    if (isSet(opts,MULTIPLE_LINES)) {

      if (!(offset == con.start || offset > con.start && offset < con.limit && isEOLChar(target.charAt(offset - 1))))       return false;

    }

 else {

      if (offset != con.start)       return false;

    }

  break;

case '@':

if (!(offset == con.start || offset > con.start && isEOLChar(target.charAt(offset - 1)))) return false;

break;

case '$':

if (isSet(opts,MULTIPLE_LINES)) {

if (!(offset == con.limit || offset < con.limit && isEOLChar(target.charAt(offset)))) return false;

}

 else {

if (!(offset == con.limit || offset + 1 == con.limit && isEOLChar(target.charAt(offset)) || offset + 2 == con.limit && target.charAt(offset) == CARRIAGE_RETURN && target.charAt(offset + 1) == LINE_FEED)) return false;

}

break;

case 'A':

if (offset != con.start) return false;

break;

case 'Z':

if (!(offset == con.limit || offset + 1 == con.limit && isEOLChar(target.charAt(offset)) || offset + 2 == con.limit && target.charAt(offset) == CARRIAGE_RETURN && target.charAt(offset + 1) == LINE_FEED)) return false;

break;

case 'z':

if (offset != con.limit) return false;

break;

case 'b':

if (con.length == 0) return false;

{

int after=getWordType(target,con.start,con.limit,offset,opts);

if (after == WT_IGNORE) return false;

int before=getPreviousWordType(target,con.start,con.limit,offset,opts);

if (after == before) return false;

}

break;

case 'B':

if (con.length == 0) go=true;

 else {

int after=getWordType(target,con.start,con.limit,offset,opts);

go=after == WT_IGNORE || after == getPreviousWordType(target,con.start,con.limit,offset,opts);

}

if (!go) return false;

break;

case '<':

if (con.length == 0 || offset == con.limit) return false;

if (getWordType(target,con.start,con.limit,offset,opts) != WT_LETTER || getPreviousWordType(target,con.start,con.limit,offset,opts) != WT_OTHER) return false;

break;

case '>':

if (con.length == 0 || offset == con.start) return false;

if (getWordType(target,con.start,con.limit,offset,opts) != WT_OTHER || getPreviousWordType(target,con.start,con.limit,offset,opts) != WT_LETTER) return false;

break;

}

return true;

}

Location: RegularExpression.java

Content: 

private boolean matchChar(int ch,int other,boolean ignoreCase){

  return (ignoreCase) ? matchIgnoreCase(ch,other) : ch == other;

}

Location: RegularExpression.java

Content: 

/** 

 * Checks whether the <var>target</var> text <strong>contains</strong> this pattern or not.

 * @return true if the target is matched to this regular expression.

 */

public boolean matches(char[] target){

  return this.matches(target,0,target.length,(Match)null);

}

Location: RegularExpression.java

Content: 

/** 

 * Checks whether the <var>target</var> text <strong>contains</strong> this pattern or not.

 * @return true if the target is matched to this regular expression.

 */

public boolean matches(CharacterIterator target){

  return this.matches(target,(Match)null);

}

Location: RegularExpression.java

Content: 

/** 

 * Checks whether the <var>target</var> text <strong>contains</strong> this pattern or not.

 * @param match A Match instance for storing matching result.

 * @return Offset of the start position in <VAR>target</VAR>; or -1 if not match.

 */

public boolean matches(CharacterIterator target,Match match){

  int start=target.getBeginIndex();

  int end=target.getEndIndex();

synchronized (this) {

    if (this.operations == null)     this.prepare();

    if (this.context == null)     this.context=new Context();

  }

  Context con=null;

synchronized (this.context) {

    con=this.context.inuse ? new Context() : this.context;

    con.reset(target,start,end,this.numberOfClosures);

  }

  if (match != null) {

    match.setNumberOfGroups(this.nofparen);

    match.setSource(target);

  }

 else   if (this.hasBackReferences) {

    match=new Match();

    match.setNumberOfGroups(this.nofparen);

  }

  con.match=match;

  if (RegularExpression.isSet(this.options,XMLSCHEMA_MODE)) {

    int matchEnd=this.match(con,this.operations,con.start,1,this.options);

    if (matchEnd == con.limit) {

      if (con.match != null) {

        con.match.setBeginning(0,con.start);

        con.match.setEnd(0,matchEnd);

      }

      con.setInUse(false);

      return true;

    }

    return false;

  }

  if (this.fixedStringOnly) {

    int o=this.fixedStringTable.matches(target,con.start,con.limit);

    if (o >= 0) {

      if (con.match != null) {

        con.match.setBeginning(0,o);

        con.match.setEnd(0,o + this.fixedString.length());

      }

      con.setInUse(false);

      return true;

    }

    con.setInUse(false);

    return false;

  }

  if (this.fixedString != null) {

    int o=this.fixedStringTable.matches(target,con.start,con.limit);

    if (o < 0) {

      con.setInUse(false);

      return false;

    }

  }

  int limit=con.limit - this.minlength;

  int matchStart;

  int matchEnd=-1;

  if (this.operations != null && this.operations.type == Op.CLOSURE && this.operations.getChild().type == Op.DOT) {

    if (isSet(this.options,SINGLE_LINE)) {

      matchStart=con.start;

      matchEnd=this.match(con,this.operations,con.start,1,this.options);

    }

 else {

      boolean previousIsEOL=true;

      for (matchStart=con.start; matchStart <= limit; matchStart++) {

        int ch=target.setIndex(matchStart);

        if (isEOLChar(ch)) {

          previousIsEOL=true;

        }

 else {

          if (previousIsEOL) {

            if (0 <= (matchEnd=this.match(con,this.operations,matchStart,1,this.options)))             break;

          }

          previousIsEOL=false;

        }

      }

    }

  }

 else   if (this.firstChar != null) {

    RangeToken range=this.firstChar;

    for (matchStart=con.start; matchStart <= limit; matchStart++) {

      int ch=target.setIndex(matchStart);

      if (REUtil.isHighSurrogate(ch) && matchStart + 1 < con.limit) {

        ch=REUtil.composeFromSurrogates(ch,target.setIndex(matchStart + 1));

      }

      if (!range.match(ch)) {

        continue;

      }

      if (0 <= (matchEnd=this.match(con,this.operations,matchStart,1,this.options))) {

        break;

      }

    }

  }

 else {

    for (matchStart=con.start; matchStart <= limit; matchStart++) {

      if (0 <= (matchEnd=this.match(con,this.operations,matchStart,1,this.options)))       break;

    }

  }

  if (matchEnd >= 0) {

    if (con.match != null) {

      con.match.setBeginning(0,matchStart);

      con.match.setEnd(0,matchEnd);

    }

    con.setInUse(false);

    return true;

  }

 else {

    con.setInUse(false);

    return false;

  }

}

Location: RegularExpression.java

Content: 

/** 

 * Checks whether the <var>target</var> text <strong>contains</strong> this pattern in specified range or not.

 * @param start Start offset of the range.

 * @param end  End offset +1 of the range.

 * @param match A Match instance for storing matching result.

 * @return Offset of the start position in <VAR>target</VAR>; or -1 if not match.

 */

public boolean matches(char[] target,int start,int end,Match match){

synchronized (this) {

    if (this.operations == null)     this.prepare();

    if (this.context == null)     this.context=new Context();

  }

  Context con=null;

synchronized (this.context) {

    con=this.context.inuse ? new Context() : this.context;

    con.reset(target,start,end,this.numberOfClosures);

  }

  if (match != null) {

    match.setNumberOfGroups(this.nofparen);

    match.setSource(target);

  }

 else   if (this.hasBackReferences) {

    match=new Match();

    match.setNumberOfGroups(this.nofparen);

  }

  con.match=match;

  if (RegularExpression.isSet(this.options,XMLSCHEMA_MODE)) {

    int matchEnd=this.match(con,this.operations,con.start,1,this.options);

    if (matchEnd == con.limit) {

      if (con.match != null) {

        con.match.setBeginning(0,con.start);

        con.match.setEnd(0,matchEnd);

      }

      con.setInUse(false);

      return true;

    }

    return false;

  }

  if (this.fixedStringOnly) {

    int o=this.fixedStringTable.matches(target,con.start,con.limit);

    if (o >= 0) {

      if (con.match != null) {

        con.match.setBeginning(0,o);

        con.match.setEnd(0,o + this.fixedString.length());

      }

      con.setInUse(false);

      return true;

    }

    con.setInUse(false);

    return false;

  }

  if (this.fixedString != null) {

    int o=this.fixedStringTable.matches(target,con.start,con.limit);

    if (o < 0) {

      con.setInUse(false);

      return false;

    }

  }

  int limit=con.limit - this.minlength;

  int matchStart;

  int matchEnd=-1;

  if (this.operations != null && this.operations.type == Op.CLOSURE && this.operations.getChild().type == Op.DOT) {

    if (isSet(this.options,SINGLE_LINE)) {

      matchStart=con.start;

      matchEnd=this.match(con,this.operations,con.start,1,this.options);

    }

 else {

      boolean previousIsEOL=true;

      for (matchStart=con.start; matchStart <= limit; matchStart++) {

        int ch=target[matchStart];

        if (isEOLChar(ch)) {

          previousIsEOL=true;

        }

 else {

          if (previousIsEOL) {

            if (0 <= (matchEnd=this.match(con,this.operations,matchStart,1,this.options)))             break;

          }

          previousIsEOL=false;

        }

      }

    }

  }

 else   if (this.firstChar != null) {

    RangeToken range=this.firstChar;

    for (matchStart=con.start; matchStart <= limit; matchStart++) {

      int ch=target[matchStart];

      if (REUtil.isHighSurrogate(ch) && matchStart + 1 < con.limit) {

        ch=REUtil.composeFromSurrogates(ch,target[matchStart + 1]);

      }

      if (!range.match(ch)) {

        continue;

      }

      if (0 <= (matchEnd=this.match(con,this.operations,matchStart,1,this.options))) {

        break;

      }

    }

  }

 else {

    for (matchStart=con.start; matchStart <= limit; matchStart++) {

      if (0 <= (matchEnd=this.match(con,this.operations,matchStart,1,this.options)))       break;

    }

  }

  if (matchEnd >= 0) {

    if (con.match != null) {

      con.match.setBeginning(0,matchStart);

      con.match.setEnd(0,matchEnd);

    }

    con.setInUse(false);

    return true;

  }

 else {

    con.setInUse(false);

    return false;

  }

}

Location: RegularExpression.java

Content: 

/** 

 * Checks whether the <var>target</var> text <strong>contains</strong> this pattern or not.

 * @param match A Match instance for storing matching result.

 * @return Offset of the start position in <VAR>target</VAR>; or -1 if not match.

 */

public boolean matches(char[] target,Match match){

  return this.matches(target,0,target.length,match);

}

Location: RegularExpression.java

Content: 

/** 

 * Checks whether the <var>target</var> text <strong>contains</strong> this pattern or not.

 * @return true if the target is matched to this regular expression.

 */

public boolean matches(String target){

  return this.matches(target,0,target.length(),(Match)null);

}

Location: RegularExpression.java

Content: 

/** 

 * Checks whether the <var>target</var> text <strong>contains</strong> this pattern in specified range or not.

 * @param start Start offset of the range.

 * @param end  End offset +1 of the range.

 * @param match A Match instance for storing matching result.

 * @return Offset of the start position in <VAR>target</VAR>; or -1 if not match.

 */

public boolean matches(String target,int start,int end,Match match){

synchronized (this) {

    if (this.operations == null)     this.prepare();

    if (this.context == null)     this.context=new Context();

  }

  Context con=null;

synchronized (this.context) {

    con=this.context.inuse ? new Context() : this.context;

    con.reset(target,start,end,this.numberOfClosures);

  }

  if (match != null) {

    match.setNumberOfGroups(this.nofparen);

    match.setSource(target);

  }

 else   if (this.hasBackReferences) {

    match=new Match();

    match.setNumberOfGroups(this.nofparen);

  }

  con.match=match;

  if (RegularExpression.isSet(this.options,XMLSCHEMA_MODE)) {

    if (DEBUG) {

      System.err.println("target string=" + target);

    }

    int matchEnd=this.match(con,this.operations,con.start,1,this.options);

    if (DEBUG) {

      System.err.println("matchEnd=" + matchEnd);

      System.err.println("con.limit=" + con.limit);

    }

    if (matchEnd == con.limit) {

      if (con.match != null) {

        con.match.setBeginning(0,con.start);

        con.match.setEnd(0,matchEnd);

      }

      con.setInUse(false);

      return true;

    }

    return false;

  }

  if (this.fixedStringOnly) {

    int o=this.fixedStringTable.matches(target,con.start,con.limit);

    if (o >= 0) {

      if (con.match != null) {

        con.match.setBeginning(0,o);

        con.match.setEnd(0,o + this.fixedString.length());

      }

      con.setInUse(false);

      return true;

    }

    con.setInUse(false);

    return false;

  }

  if (this.fixedString != null) {

    int o=this.fixedStringTable.matches(target,con.start,con.limit);

    if (o < 0) {

      con.setInUse(false);

      return false;

    }

  }

  int limit=con.limit - this.minlength;

  int matchStart;

  int matchEnd=-1;

  if (this.operations != null && this.operations.type == Op.CLOSURE && this.operations.getChild().type == Op.DOT) {

    if (isSet(this.options,SINGLE_LINE)) {

      matchStart=con.start;

      matchEnd=this.match(con,this.operations,con.start,1,this.options);

    }

 else {

      boolean previousIsEOL=true;

      for (matchStart=con.start; matchStart <= limit; matchStart++) {

        int ch=target.charAt(matchStart);

        if (isEOLChar(ch)) {

          previousIsEOL=true;

        }

 else {

          if (previousIsEOL) {

            if (0 <= (matchEnd=this.match(con,this.operations,matchStart,1,this.options)))             break;

          }

          previousIsEOL=false;

        }

      }

    }

  }

 else   if (this.firstChar != null) {

    RangeToken range=this.firstChar;

    for (matchStart=con.start; matchStart <= limit; matchStart++) {

      int ch=target.charAt(matchStart);

      if (REUtil.isHighSurrogate(ch) && matchStart + 1 < con.limit) {

        ch=REUtil.composeFromSurrogates(ch,target.charAt(matchStart + 1));

      }

      if (!range.match(ch)) {

        continue;

      }

      if (0 <= (matchEnd=this.match(con,this.operations,matchStart,1,this.options))) {

        break;

      }

    }

  }

 else {

    for (matchStart=con.start; matchStart <= limit; matchStart++) {

      if (0 <= (matchEnd=this.match(con,this.operations,matchStart,1,this.options)))       break;

    }

  }

  if (matchEnd >= 0) {

    if (con.match != null) {

      con.match.setBeginning(0,matchStart);

      con.match.setEnd(0,matchEnd);

    }

    con.setInUse(false);

    return true;

  }

 else {

    con.setInUse(false);

    return false;

  }

}

Location: RegularExpression.java

Content: 

/** 

 * Checks whether the <var>target</var> text <strong>contains</strong> this pattern or not.

 * @param match A Match instance for storing matching result.

 * @return Offset of the start position in <VAR>target</VAR>; or -1 if not match.

 */

public boolean matches(String target,Match match){

  return this.matches(target,0,target.length(),match);

}

Location: RegularExpression.java

Content: 

private static final boolean matchIgnoreCase(int chardata,int ch){

  if (chardata == ch)   return true;

  if (chardata > 0xffff || ch > 0xffff)   return false;

  char uch1=Character.toUpperCase((char)chardata);

  char uch2=Character.toUpperCase((char)ch);

  if (uch1 == uch2)   return true;

  return Character.toLowerCase(uch1) == Character.toLowerCase(uch2);

}

Location: RegularExpression.java

Content: 

/** 

 * @return -1 when not match; offset of the end of matched string when match.

 */

private int match(Context con,Op op,int offset,int dx,int opts){

  final ExpressionTarget target=con.target;

  final Stack opStack=new Stack();

  final IntStack dataStack=new IntStack();

  final boolean isSetIgnoreCase=isSet(opts,IGNORE_CASE);

  int retValue=-1;

  boolean returned=false;

  for (; ; ) {

    if (op == null || offset > con.limit || offset < con.start) {

      if (op == null) {

        retValue=isSet(opts,XMLSCHEMA_MODE) && offset != con.limit ? -1 : offset;

      }

 else {

        retValue=-1;

      }

      returned=true;

    }

 else {

      retValue=-1;

switch (op.type) {

case Op.CHAR:

{

          final int o1=(dx > 0) ? offset : offset - 1;

          if (o1 >= con.limit || o1 < 0 || !matchChar(op.getData(),target.charAt(o1),isSetIgnoreCase)) {

            returned=true;

            break;

          }

          offset+=dx;

          op=op.next;

        }

      break;

case Op.DOT:

{

      int o1=(dx > 0) ? offset : offset - 1;

      if (o1 >= con.limit || o1 < 0) {

        returned=true;

        break;

      }

      if (isSet(opts,SINGLE_LINE)) {

        if (REUtil.isHighSurrogate(target.charAt(o1)) && o1 + dx >= 0 && o1 + dx < con.limit) {

          o1+=dx;

        }

      }

 else {

        int ch=target.charAt(o1);

        if (REUtil.isHighSurrogate(ch) && o1 + dx >= 0 && o1 + dx < con.limit) {

          o1+=dx;

          ch=REUtil.composeFromSurrogates(ch,target.charAt(o1));

        }

        if (isEOLChar(ch)) {

          returned=true;

          break;

        }

      }

      offset=(dx > 0) ? o1 + 1 : o1;

      op=op.next;

    }

  break;

case Op.RANGE:

case Op.NRANGE:

{

  int o1=(dx > 0) ? offset : offset - 1;

  if (o1 >= con.limit || o1 < 0) {

    returned=true;

    break;

  }

  int ch=target.charAt(offset);

  if (REUtil.isHighSurrogate(ch) && o1 + dx < con.limit && o1 + dx >= 0) {

    o1+=dx;

    ch=REUtil.composeFromSurrogates(ch,target.charAt(o1));

  }

  final RangeToken tok=op.getToken();

  if (!tok.match(ch)) {

    returned=true;

    break;

  }

  offset=(dx > 0) ? o1 + 1 : o1;

  op=op.next;

}

break;

case Op.ANCHOR:

{

if (!matchAnchor(target,op,con,offset,opts)) {

returned=true;

break;

}

op=op.next;

}

break;

case Op.BACKREFERENCE:

{

int refno=op.getData();

if (refno <= 0 || refno >= this.nofparen) {

throw new RuntimeException("Internal Error: Reference number must be more than zero: " + refno);

}

if (con.match.getBeginning(refno) < 0 || con.match.getEnd(refno) < 0) {

returned=true;

break;

}

int o2=con.match.getBeginning(refno);

int literallen=con.match.getEnd(refno) - o2;

if (dx > 0) {

if (!target.regionMatches(isSetIgnoreCase,offset,con.limit,o2,literallen)) {

returned=true;

break;

}

offset+=literallen;

}

 else {

if (!target.regionMatches(isSetIgnoreCase,offset - literallen,con.limit,o2,literallen)) {

returned=true;

break;

}

offset-=literallen;

}

op=op.next;

}

break;

case Op.STRING:

{

String literal=op.getString();

int literallen=literal.length();

if (dx > 0) {

if (!target.regionMatches(isSetIgnoreCase,offset,con.limit,literal,literallen)) {

returned=true;

break;

}

offset+=literallen;

}

 else {

if (!target.regionMatches(isSetIgnoreCase,offset - literallen,con.limit,literal,literallen)) {

returned=true;

break;

}

offset-=literallen;

}

op=op.next;

}

break;

case Op.CLOSURE:

{

final int id=op.getData();

if (con.closureContexts[id].contains(offset)) {

returned=true;

break;

}

con.closureContexts[id].addOffset(offset);

}

case Op.QUESTION:

{

opStack.push(op);

dataStack.push(offset);

op=op.getChild();

}

break;

case Op.NONGREEDYCLOSURE:

case Op.NONGREEDYQUESTION:

{

opStack.push(op);

dataStack.push(offset);

op=op.next;

}

break;

case Op.UNION:

if (op.size() == 0) {

returned=true;

}

 else {

opStack.push(op);

dataStack.push(0);

dataStack.push(offset);

op=op.elementAt(0);

}

break;

case Op.CAPTURE:

{

final int refno=op.getData();

if (con.match != null) {

if (refno > 0) {

dataStack.push(con.match.getBeginning(refno));

con.match.setBeginning(refno,offset);

}

 else {

final int index=-refno;

dataStack.push(con.match.getEnd(index));

con.match.setEnd(index,offset);

}

opStack.push(op);

dataStack.push(offset);

}

op=op.next;

}

break;

case Op.LOOKAHEAD:

case Op.NEGATIVELOOKAHEAD:

case Op.LOOKBEHIND:

case Op.NEGATIVELOOKBEHIND:

{

opStack.push(op);

dataStack.push(dx);

dataStack.push(offset);

dx=(op.type == Op.LOOKAHEAD || op.type == Op.NEGATIVELOOKAHEAD) ? 1 : -1;

op=op.getChild();

}

break;

case Op.INDEPENDENT:

{

opStack.push(op);

dataStack.push(offset);

op=op.getChild();

}

break;

case Op.MODIFIER:

{

int localopts=opts;

localopts|=op.getData();

localopts&=~op.getData2();

opStack.push(op);

dataStack.push(opts);

dataStack.push(offset);

opts=localopts;

op=op.getChild();

}

break;

case Op.CONDITION:

{

Op.ConditionOp cop=(Op.ConditionOp)op;

if (cop.refNumber > 0) {

if (cop.refNumber >= this.nofparen) {

throw new RuntimeException("Internal Error: Reference number must be more than zero: " + cop.refNumber);

}

if (con.match.getBeginning(cop.refNumber) >= 0 && con.match.getEnd(cop.refNumber) >= 0) {

op=cop.yes;

}

 else if (cop.no != null) {

op=cop.no;

}

 else {

op=cop.next;

}

}

 else {

opStack.push(op);

dataStack.push(offset);

op=cop.condition;

}

}

break;

default :

throw new RuntimeException("Unknown operation type: " + op.type);

}

}

while (returned) {

if (opStack.isEmpty()) {

return retValue;

}

op=(Op)opStack.pop();

offset=dataStack.pop();

switch (op.type) {

case Op.CLOSURE:

case Op.QUESTION:

if (retValue < 0) {

op=op.next;

returned=false;

}

break;

case Op.NONGREEDYCLOSURE:

case Op.NONGREEDYQUESTION:

if (retValue < 0) {

op=op.getChild();

returned=false;

}

break;

case Op.UNION:

{

int unionIndex=dataStack.pop();

if (DEBUG) {

System.err.println("UNION: " + unionIndex + ", ret="+ retValue);

}

if (retValue < 0) {

if (++unionIndex < op.size()) {

opStack.push(op);

dataStack.push(unionIndex);

dataStack.push(offset);

op=op.elementAt(unionIndex);

returned=false;

}

 else {

retValue=-1;

}

}

}

break;

case Op.CAPTURE:

final int refno=op.getData();

final int saved=dataStack.pop();

if (retValue < 0) {

if (refno > 0) {

con.match.setBeginning(refno,saved);

}

 else {

con.match.setEnd(-refno,saved);

}

}

break;

case Op.LOOKAHEAD:

case Op.LOOKBEHIND:

{

dx=dataStack.pop();

if (0 <= retValue) {

op=op.next;

returned=false;

}

retValue=-1;

}

break;

case Op.NEGATIVELOOKAHEAD:

case Op.NEGATIVELOOKBEHIND:

{

dx=dataStack.pop();

if (0 > retValue) {

op=op.next;

returned=false;

}

retValue=-1;

}

break;

case Op.MODIFIER:

opts=dataStack.pop();

case Op.INDEPENDENT:

if (retValue >= 0) {

offset=retValue;

op=op.next;

returned=false;

}

break;

case Op.CONDITION:

{

final Op.ConditionOp cop=(Op.ConditionOp)op;

if (0 <= retValue) {

op=cop.yes;

}

 else if (cop.no != null) {

op=cop.no;

}

 else {

op=cop.next;

}

}

returned=false;

break;

default :

break;

}

}

}

}

Location: RegularExpression.java

Content: 

/** 

 * Creates a new RegularExpression instance.

 * @param regex A regular expression

 * @exception org.apache.xerces.utils.regex.ParseException <VAR>regex</VAR> is not conforming to the syntax.

 */

public RegularExpression(String regex) throws ParseException {

  this(regex,null);

}

Location: RegularExpression.java

Content: 

/** 

 * Creates a new RegularExpression instance with options.

 * @param regex A regular expression

 * @param options A String consisted of "i" "m" "s" "u" "w" "," "X"

 * @exception org.apache.xerces.utils.regex.ParseException <VAR>regex</VAR> is not conforming to the syntax.

 */

public RegularExpression(String regex,String options) throws ParseException {

  this.setPattern(regex,options);

}

Location: RegularExpression.java

Content: 

/** 

 * Creates a new RegularExpression instance with options.

 * @param regex A regular expression

 * @param options A String consisted of "i" "m" "s" "u" "w" "," "X"

 * @exception org.apache.xerces.utils.regex.ParseException <VAR>regex</VAR> is not conforming to the syntax.

 */

public RegularExpression(String regex,String options,Locale locale) throws ParseException {

  this.setPattern(regex,options,locale);

}

Location: RegularExpression.java

Content: 

RegularExpression(String regex,Token tok,int parens,boolean hasBackReferences,int options){

  this.regex=regex;

  this.tokentree=tok;

  this.nofparen=parens;

  this.options=options;

  this.hasBackReferences=hasBackReferences;

}

Location: RegularExpression.java

Content: 

/** 

 */

public void setPattern(String newPattern) throws ParseException {

  this.setPattern(newPattern,Locale.getDefault());

}

Location: RegularExpression.java

Content: 

private void setPattern(String newPattern,int options,Locale locale) throws ParseException {

  this.regex=newPattern;

  this.options=options;

  RegexParser rp=RegularExpression.isSet(this.options,RegularExpression.XMLSCHEMA_MODE) ? new ParserForXMLSchema(locale) : new RegexParser(locale);

  this.tokentree=rp.parse(this.regex,this.options);

  this.nofparen=rp.parennumber;

  this.hasBackReferences=rp.hasBackReferences;

  this.operations=null;

  this.context=null;

}

Location: RegularExpression.java

Content: 

public void setPattern(String newPattern,Locale locale) throws ParseException {

  this.setPattern(newPattern,this.options,locale);

}

Location: RegularExpression.java

Content: 

/** 

 */

public void setPattern(String newPattern,String options) throws ParseException {

  this.setPattern(newPattern,options,Locale.getDefault());

}

Location: RegularExpression.java

Content: 

public void setPattern(String newPattern,String options,Locale locale) throws ParseException {

  this.setPattern(newPattern,REUtil.parseOptions(options),locale);

}

