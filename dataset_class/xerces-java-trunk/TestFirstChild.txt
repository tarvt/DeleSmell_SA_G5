Location: TestFirstChild.java

Content: 

/** 

 * Method getNodeSet1

 * @return

 * @throws ParserConfigurationException

 */

private static Document getNodeSet1() throws ParserConfigurationException {

  DocumentBuilderFactory dfactory=DocumentBuilderFactory.newInstance();

  dfactory.setValidating(false);

  dfactory.setNamespaceAware(true);

  DocumentBuilder db=dfactory.newDocumentBuilder();

  Document doc=db.newDocument();

  Element root=doc.createElement("RootElement");

  Element e1=doc.createElement("Element1");

  Element e2=doc.createElement("Element2");

  Element e3=doc.createElement("Element3");

  Text e3t=doc.createTextNode("Text in Element3");

  e3.appendChild(e3t);

  root.appendChild(e1);

  root.appendChild(e2);

  root.appendChild(e3);

  doc.appendChild(root);

  String s1="<RootElement><Element1/><Element2/><Element3>Text in Element3</Element3></RootElement>";

  return doc;

}

Location: TestFirstChild.java

Content: 

/** 

 * Transforms <code>org.w3c.dom.Node.XXX_NODE</code> NodeType values into XXX Strings.

 * @param nodeType as taken from the {@link org.w3c.dom.Node#getNodeType}function

 * @return the String value.

 * @see org.w3c.dom.Node#getNodeType

 * @param nodeType

 * @return 

 */

public static String getNodeTypeString(short nodeType){

  if ((nodeType > 0) && (nodeType < 13)) {

    return nodeTypeString[nodeType];

  }

 else {

    return "";

  }

}

Location: TestFirstChild.java

Content: 

/** 

 * recursively traverses the tree for simplicity, I don't handle comments, Attributes, PIs etc. Only Text, Document and Element

 * @param treewalker

 * @param printwriter

 */

private static void process2(TreeWalker treewalker,PrintWriter printwriter){

  Node currentNode=treewalker.getCurrentNode();

switch (currentNode.getNodeType()) {

case Node.TEXT_NODE:

case Node.CDATA_SECTION_NODE:

    printwriter.print(currentNode.getNodeValue());

  break;

case Node.ENTITY_REFERENCE_NODE:

case Node.DOCUMENT_NODE:

case Node.ELEMENT_NODE:

default :

if (currentNode.getNodeType() == Node.ELEMENT_NODE) {

  printwriter.print('<');

  printwriter.print(currentNode.getNodeName());

  printwriter.print(">");

}

Node node1=treewalker.firstChild();

if (node1 == null) {

System.out.println(getNodeTypeString(currentNode.getNodeType()) + "_NODE parent: " + currentNode.getNodeName()+ " has no children ");

}

 else {

System.out.println(getNodeTypeString(currentNode.getNodeType()) + "_NODE parent: " + currentNode.getNodeName()+ " has children ");

while (node1 != null) {

{

  String qStr="";

  for (Node q=node1; q != null; q=q.getParentNode()) {

    qStr=q.getNodeName() + "/" + qStr;

  }

  System.out.println(getNodeTypeString(currentNode.getNodeType()) + "_NODE process child " + qStr);

}

process2(treewalker,printwriter);

node1=treewalker.nextSibling();

if (node1 != null) {

  System.out.println("treewalker.nextSibling() = " + node1.getNodeName());

}

}

}

System.out.println("setCurrentNode() back to " + currentNode.getNodeName());

treewalker.setCurrentNode(currentNode);

if (currentNode.getNodeType() == Node.ELEMENT_NODE) {

printwriter.print("</");

printwriter.print(currentNode.getNodeName());

printwriter.print(">");

}

break;

}

}

