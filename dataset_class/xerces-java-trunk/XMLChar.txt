Location: XMLChar.java

Content: 

/** 

 * Returns the high surrogate of a supplemental character

 * @param c The supplemental character to "split".

 */

public static char highSurrogate(int c){

  return (char)(((c - 0x00010000) >> 10) + 0xD800);

}

Location: XMLChar.java

Content: 

/** 

 * Returns true if the specified character can be considered content.

 * @param c The character to check.

 */

public static boolean isContent(int c){

  return (c < 0x10000 && (CHARS[c] & MASK_CONTENT) != 0) || (0x10000 <= c && c <= 0x10FFFF);

}

Location: XMLChar.java

Content: 

/** 

 * Returns whether the given character is a high surrogate

 * @param c The character to check.

 */

public static boolean isHighSurrogate(int c){

  return (0xD800 <= c && c <= 0xDBFF);

}

Location: XMLChar.java

Content: 

/** 

 * Returns true if the specified character is invalid.

 * @param c The character to check.

 */

public static boolean isInvalid(int c){

  return !isValid(c);

}

Location: XMLChar.java

Content: 

/** 

 * Returns whether the given character is a low surrogate

 * @param c The character to check.

 */

public static boolean isLowSurrogate(int c){

  return (0xDC00 <= c && c <= 0xDFFF);

}

Location: XMLChar.java

Content: 

/** 

 * Returns true if the specified character can be considered markup. Markup characters include '&lt;', '&amp;', and '%'.

 * @param c The character to check.

 */

public static boolean isMarkup(int c){

  return c == '<' || c == '&' || c == '%';

}

Location: XMLChar.java

Content: 

/** 

 * Returns true if the specified character is a valid name start character as defined by production [5] in the XML 1.0 specification.

 * @param c The character to check.

 */

public static boolean isNameStart(int c){

  return c < 0x10000 && (CHARS[c] & MASK_NAME_START) != 0;

}

Location: XMLChar.java

Content: 

/** 

 * Returns true if the specified character is a valid name character as defined by production [4] in the XML 1.0 specification.

 * @param c The character to check.

 */

public static boolean isName(int c){

  return c < 0x10000 && (CHARS[c] & MASK_NAME) != 0;

}

Location: XMLChar.java

Content: 

/** 

 * Returns true if the specified character is a valid NCName start character as defined by production [4] in Namespaces in XML recommendation.

 * @param c The character to check.

 */

public static boolean isNCNameStart(int c){

  return c < 0x10000 && (CHARS[c] & MASK_NCNAME_START) != 0;

}

Location: XMLChar.java

Content: 

/** 

 * Returns true if the specified character is a valid NCName character as defined by production [5] in Namespaces in XML recommendation.

 * @param c The character to check.

 */

public static boolean isNCName(int c){

  return c < 0x10000 && (CHARS[c] & MASK_NCNAME) != 0;

}

Location: XMLChar.java

Content: 

/** 

 * Returns true if the specified character is a valid Pubid character as defined by production [13] in the XML 1.0 specification.

 * @param c The character to check.

 */

public static boolean isPubid(int c){

  return c < 0x10000 && (CHARS[c] & MASK_PUBID) != 0;

}

Location: XMLChar.java

Content: 

/** 

 * Returns true if the specified character is a space character as defined by production [3] in the XML 1.0 specification.

 * @param c The character to check.

 */

public static boolean isSpace(int c){

  return c <= 0x20 && (CHARS[c] & MASK_SPACE) != 0;

}

Location: XMLChar.java

Content: 

/** 

 * Returns true if the specified character is a supplemental character.

 * @param c The character to check.

 */

public static boolean isSupplemental(int c){

  return (c >= 0x10000 && c <= 0x10FFFF);

}

Location: XMLChar.java

Content: 

/** 

 * Returns true if the encoding name is a valid IANA encoding. This method does not verify that there is a decoder available for this encoding, only that the characters are valid for an IANA encoding name.

 * @param ianaEncoding The IANA encoding name.

 */

public static boolean isValidIANAEncoding(String ianaEncoding){

  if (ianaEncoding != null) {

    int length=ianaEncoding.length();

    if (length > 0) {

      char c=ianaEncoding.charAt(0);

      if ((c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z')) {

        for (int i=1; i < length; i++) {

          c=ianaEncoding.charAt(i);

          if ((c < 'A' || c > 'Z') && (c < 'a' || c > 'z') && (c < '0' || c > '9')&& c != '.' && c != '_' && c != '-') {

            return false;

          }

        }

        return true;

      }

    }

  }

  return false;

}

Location: XMLChar.java

Content: 

/** 

 * Returns true if the encoding name is a valid Java encoding. This method does not verify that there is a decoder available for this encoding, only that the characters are valid for an Java encoding name.

 * @param javaEncoding The Java encoding name.

 */

public static boolean isValidJavaEncoding(String javaEncoding){

  if (javaEncoding != null) {

    int length=javaEncoding.length();

    if (length > 0) {

      for (int i=1; i < length; i++) {

        char c=javaEncoding.charAt(i);

        if ((c < 'A' || c > 'Z') && (c < 'a' || c > 'z') && (c < '0' || c > '9')&& c != '.' && c != '_' && c != '-') {

          return false;

        }

      }

      return true;

    }

  }

  return false;

}

Location: XMLChar.java

Content: 

/** 

 * Check to see if a string is a valid Name according to [5] in the XML 1.0 Recommendation

 * @param name string to check

 * @return true if name is a valid Name

 */

public static boolean isValidName(String name){

  final int length=name.length();

  if (length == 0) {

    return false;

  }

  char ch=name.charAt(0);

  if (!isNameStart(ch)) {

    return false;

  }

  for (int i=1; i < length; ++i) {

    ch=name.charAt(i);

    if (!isName(ch)) {

      return false;

    }

  }

  return true;

}

Location: XMLChar.java

Content: 

/** 

 * Check to see if a string is a valid NCName according to [4] from the XML Namespaces 1.0 Recommendation

 * @param ncName string to check

 * @return true if name is a valid NCName

 */

public static boolean isValidNCName(String ncName){

  final int length=ncName.length();

  if (length == 0) {

    return false;

  }

  char ch=ncName.charAt(0);

  if (!isNCNameStart(ch)) {

    return false;

  }

  for (int i=1; i < length; ++i) {

    ch=ncName.charAt(i);

    if (!isNCName(ch)) {

      return false;

    }

  }

  return true;

}

Location: XMLChar.java

Content: 

/** 

 * Check to see if a string is a valid Nmtoken according to [7] in the XML 1.0 Recommendation

 * @param nmtoken string to check

 * @return true if nmtoken is a valid Nmtoken 

 */

public static boolean isValidNmtoken(String nmtoken){

  final int length=nmtoken.length();

  if (length == 0) {

    return false;

  }

  for (int i=0; i < length; ++i) {

    char ch=nmtoken.charAt(i);

    if (!isName(ch)) {

      return false;

    }

  }

  return true;

}

Location: XMLChar.java

Content: 

/** 

 * Returns the low surrogate of a supplemental character

 * @param c The supplemental character to "split".

 */

public static char lowSurrogate(int c){

  return (char)(((c - 0x00010000) & 0x3FF) + 0xDC00);

}

Location: XMLChar.java

Content: 

/** 

 * Returns true the supplemental character corresponding to the given surrogates.

 * @param h The high surrogate.

 * @param l The low surrogate.

 */

public static int supplemental(char h,char l){

  return (h - 0xD800) * 0x400 + (l - 0xDC00) + 0x10000;

}

