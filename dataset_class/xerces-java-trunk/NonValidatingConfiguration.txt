Location: NonValidatingConfiguration.java

Content: 

/** 

 * Default constructor. 

 */

public NonValidatingConfiguration(){

  this(null,null,null);

}

Location: NonValidatingConfiguration.java

Content: 

/** 

 * Constructs a parser configuration using the specified symbol table. 

 * @param symbolTable The symbol table to use.

 */

public NonValidatingConfiguration(SymbolTable symbolTable){

  this(symbolTable,null,null);

}

Location: NonValidatingConfiguration.java

Content: 

/** 

 * Constructs a parser configuration using the specified symbol table and grammar pool. <p> <strong>REVISIT:</strong>  Grammar pool will be updated when the new validation engine is implemented.

 * @param symbolTable The symbol table to use.

 * @param grammarPool The grammar pool to use.

 */

public NonValidatingConfiguration(SymbolTable symbolTable,XMLGrammarPool grammarPool){

  this(symbolTable,grammarPool,null);

}

Location: NonValidatingConfiguration.java

Content: 

/** 

 * Constructs a parser configuration using the specified symbol table, grammar pool, and parent settings. <p> <strong>REVISIT:</strong>  Grammar pool will be updated when the new validation engine is implemented.

 * @param symbolTable    The symbol table to use.

 * @param grammarPool    The grammar pool to use.

 * @param parentSettings The parent settings.

 */

public NonValidatingConfiguration(SymbolTable symbolTable,XMLGrammarPool grammarPool,XMLComponentManager parentSettings){

  super(symbolTable,parentSettings);

  final String[] recognizedFeatures={PARSER_SETTINGS,NAMESPACES,CONTINUE_AFTER_FATAL_ERROR};

  addRecognizedFeatures(recognizedFeatures);

  fFeatures.put(CONTINUE_AFTER_FATAL_ERROR,Boolean.FALSE);

  fFeatures.put(PARSER_SETTINGS,Boolean.TRUE);

  fFeatures.put(NAMESPACES,Boolean.TRUE);

  final String[] recognizedProperties={ERROR_REPORTER,ENTITY_MANAGER,DOCUMENT_SCANNER,DTD_SCANNER,DTD_VALIDATOR,NAMESPACE_BINDER,XMLGRAMMAR_POOL,DATATYPE_VALIDATOR_FACTORY,VALIDATION_MANAGER,LOCALE};

  addRecognizedProperties(recognizedProperties);

  fGrammarPool=grammarPool;

  if (fGrammarPool != null) {

    fProperties.put(XMLGRAMMAR_POOL,fGrammarPool);

  }

  fEntityManager=createEntityManager();

  fProperties.put(ENTITY_MANAGER,fEntityManager);

  addComponent(fEntityManager);

  fErrorReporter=createErrorReporter();

  fErrorReporter.setDocumentLocator(fEntityManager.getEntityScanner());

  fProperties.put(ERROR_REPORTER,fErrorReporter);

  addComponent(fErrorReporter);

  fDTDScanner=createDTDScanner();

  if (fDTDScanner != null) {

    fProperties.put(DTD_SCANNER,fDTDScanner);

    if (fDTDScanner instanceof XMLComponent) {

      addComponent((XMLComponent)fDTDScanner);

    }

  }

  fDatatypeValidatorFactory=createDatatypeValidatorFactory();

  if (fDatatypeValidatorFactory != null) {

    fProperties.put(DATATYPE_VALIDATOR_FACTORY,fDatatypeValidatorFactory);

  }

  fValidationManager=createValidationManager();

  if (fValidationManager != null) {

    fProperties.put(VALIDATION_MANAGER,fValidationManager);

  }

  if (fErrorReporter.getMessageFormatter(XMLMessageFormatter.XML_DOMAIN) == null) {

    XMLMessageFormatter xmft=new XMLMessageFormatter();

    fErrorReporter.putMessageFormatter(XMLMessageFormatter.XML_DOMAIN,xmft);

    fErrorReporter.putMessageFormatter(XMLMessageFormatter.XMLNS_DOMAIN,xmft);

  }

  fConfigUpdated=false;

  try {

    setLocale(Locale.getDefault());

  }

 catch (  XNIException e) {

  }

}

