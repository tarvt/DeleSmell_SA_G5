Location: NamedNodeMapImpl.java

Content: 

final boolean changed(){

  return (flags & CHANGED) != 0;

}

Location: NamedNodeMapImpl.java

Content: 

final void changed(boolean value){

  flags=(short)(value ? flags | CHANGED : flags & ~CHANGED);

}

Location: NamedNodeMapImpl.java

Content: 

/** 

 * NON-DOM: copy content of this map into the specified ArrayList

 * @param list   ArrayList to copy information into.

 * @return A copy of this node named map

 */

protected ArrayList cloneMap(ArrayList list){

  if (list == null) {

    list=new ArrayList(5);

  }

  list.clear();

  if (nodes != null) {

    final int size=nodes.size();

    for (int i=0; i < size; ++i) {

      list.add(nodes.get(i));

    }

  }

  return list;

}

Location: NamedNodeMapImpl.java

Content: 

/** 

 * Subroutine: Locate the named item, or the point at which said item should be added. 

 * @param name Name of a node to look up.

 * @return If positive or zero, the index of the found item.If negative, index of the appropriate point at which to insert the item, encoded as -1-index and hence reconvertable by subtracting it from -1. (Encoding because I don't want to recompare the strings but don't want to burn bytes on a datatype to hold a flagged value.)

 */

protected int findNamePoint(String name,int start){

  int i=0;

  if (nodes != null) {

    int first=start;

    int last=nodes.size() - 1;

    while (first <= last) {

      i=(first + last) / 2;

      int test=name.compareTo(((Node)(nodes.get(i))).getNodeName());

      if (test == 0) {

        return i;

      }

 else       if (test < 0) {

        last=i - 1;

      }

 else {

        first=i + 1;

      }

    }

    if (first > i) {

      i=first;

    }

  }

  return -1 - i;

}

Location: NamedNodeMapImpl.java

Content: 

/** 

 * This findNamePoint is for DOM Level 2 Namespaces.

 */

protected int findNamePoint(String namespaceURI,String name){

  if (nodes == null)   return -1;

  if (name == null)   return -1;

  final int size=nodes.size();

  for (int i=0; i < size; ++i) {

    NodeImpl a=(NodeImpl)nodes.get(i);

    String aNamespaceURI=a.getNamespaceURI();

    String aLocalName=a.getLocalName();

    if (namespaceURI == null) {

      if (aNamespaceURI == null && (name.equals(aLocalName) || (aLocalName == null && name.equals(a.getNodeName()))))       return i;

    }

 else {

      if (namespaceURI.equals(aNamespaceURI) && name.equals(aLocalName))       return i;

    }

  }

  return -1;

}

Location: NamedNodeMapImpl.java

Content: 

protected Object getItem(int index){

  if (nodes != null) {

    return nodes.get(index);

  }

  return null;

}

Location: NamedNodeMapImpl.java

Content: 

protected int getNamedItemIndex(String namespaceURI,String localName){

  return findNamePoint(namespaceURI,localName);

}

Location: NamedNodeMapImpl.java

Content: 

public Node getNamedItemNS(String namespaceURI,String localName){

  for (int i=0; i < attrs.length; i++) {

    if (attrs[i].getName().equals(localName) && attrs[i].getNamespaceURI().equals(namespaceURI)) {

      return attrs[i];

    }

  }

  return null;

}

Location: NamedNodeMapImpl.java

Content: 

public Node getNamedItem(String name){

  for (int i=0; i < attrs.length; i++) {

    if (attrs[i].getName().equals(name)) {

      return attrs[i];

    }

  }

  return null;

}

Location: NamedNodeMapImpl.java

Content: 

final boolean hasDefaults(){

  return (flags & HASDEFAULTS) != 0;

}

Location: NamedNodeMapImpl.java

Content: 

final void hasDefaults(boolean value){

  flags=(short)(value ? flags | HASDEFAULTS : flags & ~HASDEFAULTS);

}

Location: NamedNodeMapImpl.java

Content: 

final boolean isReadOnly(){

  return (flags & READONLY) != 0;

}

Location: NamedNodeMapImpl.java

Content: 

final void isReadOnly(boolean value){

  flags=(short)(value ? flags | READONLY : flags & ~READONLY);

}

Location: NamedNodeMapImpl.java

Content: 

public NamedNodeMapImpl(Attr[] attrs){

  this.attrs=attrs;

}

Location: NamedNodeMapImpl.java

Content: 

/** 

 * Constructs a named node map. 

 */

protected NamedNodeMapImpl(NodeImpl ownerNode){

  this.ownerNode=ownerNode;

}

Location: NamedNodeMapImpl.java

Content: 

protected boolean precedes(Node a,Node b){

  if (nodes != null) {

    final int size=nodes.size();

    for (int i=0; i < size; ++i) {

      Node n=(Node)nodes.get(i);

      if (n == a)       return true;

      if (n == b)       return false;

    }

  }

  return false;

}

Location: NamedNodeMapImpl.java

Content: 

/** 

 * NON-DOM remove all elements from this map

 */

public void removeAll(){

  if (nodes != null) {

    nodes.clear();

  }

}

Location: NamedNodeMapImpl.java

Content: 

/** 

 * NON-DOM: Remove attribute at specified index

 */

protected void removeItem(int index){

  if (nodes != null && index < nodes.size()) {

    nodes.remove(index);

  }

}

Location: NamedNodeMapImpl.java

Content: 

public Node removeNamedItemNS(String namespaceURI,String localName) throws DOMException {

  throw new DOMException(DOMException.NOT_SUPPORTED_ERR,"Method not supported");

}

Location: NamedNodeMapImpl.java

Content: 

public Node removeNamedItem(String name) throws DOMException {

  throw new DOMException(DOMException.NOT_SUPPORTED_ERR,"Method not supported");

}

Location: NamedNodeMapImpl.java

Content: 

public Node setNamedItemNS(Node arg) throws DOMException {

  throw new DOMException(DOMException.NOT_SUPPORTED_ERR,"Method not supported");

}

Location: NamedNodeMapImpl.java

Content: 

public Node setNamedItem(Node arg) throws DOMException {

  throw new DOMException(DOMException.NOT_SUPPORTED_ERR,"Method not supported");

}

Location: NamedNodeMapImpl.java

Content: 

/** 

 * NON-DOM set the ownerDocument of this node, and the attributes it contains

 */

protected void setOwnerDocument(CoreDocumentImpl doc){

  if (nodes != null) {

    final int size=nodes.size();

    for (int i=0; i < size; ++i) {

      ((NodeImpl)item(i)).setOwnerDocument(doc);

    }

  }

}

