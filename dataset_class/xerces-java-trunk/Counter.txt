Location: Counter.java

Content: 

/** 

 * Default constructor. 

 */

public Counter(){

}

Location: Counter.java

Content: 

/** 

 * Default constructor. 

 */

public Counter(XMLParserConfiguration configuration){

  super(configuration);

  fConfiguration.setErrorHandler(this);

}

Location: Counter.java

Content: 

/** 

 * Traverses the specified node, recursively. 

 */

public void count(Node node){

  if (node == null) {

    return;

  }

  int type=node.getNodeType();

switch (type) {

case Node.DOCUMENT_NODE:

{

      fElements=0;

      fAttributes=0;

      fCharacters=0;

      fIgnorableWhitespace=0;

      Document document=(Document)node;

      count(document.getDocumentElement());

      break;

    }

case Node.ELEMENT_NODE:

{

    fElements++;

    NamedNodeMap attrs=node.getAttributes();

    if (attrs != null) {

      fAttributes+=attrs.getLength();

    }

  }

case Node.ENTITY_REFERENCE_NODE:

{

  Node child=node.getFirstChild();

  while (child != null) {

    count(child);

    child=child.getNextSibling();

  }

  break;

}

case Node.CDATA_SECTION_NODE:

{

fCharacters+=((Text)node).getLength();

break;

}

case Node.TEXT_NODE:

{

if (fDocumentInfo != null) {

Text text=(Text)node;

int length=text.getLength();

if (fDocumentInfo.isIgnorableWhitespace(text)) {

  fIgnorableWhitespace+=length;

}

 else {

  fCharacters+=length;

}

}

break;

}

}

}

Location: Counter.java

Content: 

/** 

 * Prints the results. 

 */

public void printResults(PrintWriter out,String uri,long time,long memory,boolean tagginess,int repetition){

  out.print(uri);

  out.print(": ");

  if (repetition == 1) {

    out.print(time);

  }

 else {

    out.print(time);

    out.print('/');

    out.print(repetition);

    out.print('=');

    out.print(time / repetition);

  }

  out.print(" ms");

  if (memory != Long.MIN_VALUE) {

    out.print(", ");

    out.print(memory);

    out.print(" bytes");

  }

  out.print(" (");

  out.print(fElements);

  out.print(" elems, ");

  out.print(fAttributes);

  out.print(" attrs, ");

  out.print(fIgnorableWhitespace);

  out.print(" spaces, ");

  out.print(fCharacters);

  out.print(" chars)");

  if (tagginess) {

    out.print(' ');

    long totalCharacters=fTagCharacters + fOtherCharacters + fCharacters+ fIgnorableWhitespace;

    long tagValue=fTagCharacters * 100 / totalCharacters;

    out.print(tagValue);

    out.print("% tagginess");

  }

  out.println();

  out.flush();

}

Location: Counter.java

Content: 

/** 

 * Prints the results. 

 */

public void printResults(PrintWriter out,String uri,long parse,long traverse1,long traverse2,int repetition){

  out.print(uri);

  out.print(": ");

  if (repetition == 1) {

    out.print(parse);

  }

 else {

    out.print(parse);

    out.print('/');

    out.print(repetition);

    out.print('=');

    out.print(parse / repetition);

  }

  out.print(';');

  out.print(traverse1);

  out.print(';');

  out.print(traverse2);

  out.print(" ms (");

  out.print(fElements);

  out.print(" elems, ");

  out.print(fAttributes);

  out.print(" attrs, ");

  out.print(fIgnorableWhitespace);

  out.print(" spaces, ");

  out.print(fCharacters);

  out.print(" chars)");

  out.println();

  out.flush();

}

Location: Counter.java

Content: 

/** 

 * Sets the parser wrapper. 

 */

public void setDocumentInfo(ParserWrapper.DocumentInfo documentInfo){

  fDocumentInfo=documentInfo;

}

