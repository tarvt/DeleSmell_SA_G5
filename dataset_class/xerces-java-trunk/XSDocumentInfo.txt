Location: XSDocumentInfo.java

Content: 

public void addAllowedNS(String namespace){

  fImportedNS.addElement(namespace == null ? "" : namespace);

}

Location: XSDocumentInfo.java

Content: 

void addAnnotation(XSAnnotationInfo info){

  info.next=fAnnotations;

  fAnnotations=info;

}

Location: XSDocumentInfo.java

Content: 

void backupNSSupport(SchemaNamespaceSupport nsSupport){

  SchemaNamespaceSupportStack.push(fNamespaceSupport);

  if (nsSupport == null)   nsSupport=fNamespaceSupportRoot;

  fNamespaceSupport=new SchemaNamespaceSupport(nsSupport);

  fValidationContext.setNamespaceSupport(fNamespaceSupport);

}

Location: XSDocumentInfo.java

Content: 

Object[] getSchemaAttrs(){

  return fSchemaAttrs;

}

Location: XSDocumentInfo.java

Content: 

public boolean isAllowedNS(String namespace){

  return fImportedNS.contains(namespace == null ? "" : namespace);

}

Location: XSDocumentInfo.java

Content: 

final boolean needReportTNSError(String uri){

  if (fReportedTNS == null)   fReportedTNS=new Vector();

 else   if (fReportedTNS.contains(uri))   return false;

  fReportedTNS.addElement(uri);

  return true;

}

Location: XSDocumentInfo.java

Content: 

void removeAnnotations(){

  fAnnotations=null;

}

Location: XSDocumentInfo.java

Content: 

void restoreNSSupport(){

  fNamespaceSupport=(SchemaNamespaceSupport)SchemaNamespaceSupportStack.pop();

  fValidationContext.setNamespaceSupport(fNamespaceSupport);

}

Location: XSDocumentInfo.java

Content: 

void returnSchemaAttrs(){

  fAttrChecker.returnAttrArray(fSchemaAttrs,null);

  fSchemaAttrs=null;

}

Location: XSDocumentInfo.java

Content: 

XSDocumentInfo(Element schemaRoot,XSAttributeChecker attrChecker,SymbolTable symbolTable) throws XMLSchemaException {

  fSchemaElement=schemaRoot;

  fNamespaceSupport=new SchemaNamespaceSupport(schemaRoot,symbolTable);

  fNamespaceSupport.reset();

  fIsChameleonSchema=false;

  fSymbolTable=symbolTable;

  fAttrChecker=attrChecker;

  if (schemaRoot != null) {

    Element root=schemaRoot;

    fSchemaAttrs=attrChecker.checkAttributes(root,true,this);

    if (fSchemaAttrs == null) {

      throw new XMLSchemaException(null,null);

    }

    fAreLocalAttributesQualified=((XInt)fSchemaAttrs[XSAttributeChecker.ATTIDX_AFORMDEFAULT]).intValue() == SchemaSymbols.FORM_QUALIFIED;

    fAreLocalElementsQualified=((XInt)fSchemaAttrs[XSAttributeChecker.ATTIDX_EFORMDEFAULT]).intValue() == SchemaSymbols.FORM_QUALIFIED;

    fBlockDefault=((XInt)fSchemaAttrs[XSAttributeChecker.ATTIDX_BLOCKDEFAULT]).shortValue();

    fFinalDefault=((XInt)fSchemaAttrs[XSAttributeChecker.ATTIDX_FINALDEFAULT]).shortValue();

    fTargetNamespace=(String)fSchemaAttrs[XSAttributeChecker.ATTIDX_TARGETNAMESPACE];

    if (fTargetNamespace != null)     fTargetNamespace=symbolTable.addSymbol(fTargetNamespace);

    fNamespaceSupportRoot=new SchemaNamespaceSupport(fNamespaceSupport);

    fValidationContext.setNamespaceSupport(fNamespaceSupport);

    fValidationContext.setSymbolTable(symbolTable);

  }

}

