Location: Token.java

Content: 

void addChild(Token tok){

  throw new RuntimeException("Not supported.");

}

Location: Token.java

Content: 

protected void addRange(int start,int end){

  throw new RuntimeException("Not supported.");

}

Location: Token.java

Content: 

final int analyzeFirstCharacter(RangeToken result,int options){

switch (this.type) {

case CONCAT:

    int ret=FC_CONTINUE;

  for (int i=0; i < this.size(); i++)   if ((ret=this.getChild(i).analyzeFirstCharacter(result,options)) != FC_CONTINUE)   break;

return ret;

case UNION:

if (this.size() == 0) return FC_CONTINUE;

int ret2=FC_CONTINUE;

boolean hasEmpty=false;

for (int i=0; i < this.size(); i++) {

ret2=this.getChild(i).analyzeFirstCharacter(result,options);

if (ret2 == FC_ANY) break;

 else if (ret2 == FC_CONTINUE) hasEmpty=true;

}

return hasEmpty ? FC_CONTINUE : ret2;

case CONDITION:

int ret3=this.getChild(0).analyzeFirstCharacter(result,options);

if (this.size() == 1) return FC_CONTINUE;

if (ret3 == FC_ANY) return ret3;

int ret4=this.getChild(1).analyzeFirstCharacter(result,options);

if (ret4 == FC_ANY) return ret4;

return ret3 == FC_CONTINUE || ret4 == FC_CONTINUE ? FC_CONTINUE : FC_TERMINAL;

case CLOSURE:

case NONGREEDYCLOSURE:

this.getChild(0).analyzeFirstCharacter(result,options);

return FC_CONTINUE;

case EMPTY:

case ANCHOR:

return FC_CONTINUE;

case CHAR:

int ch=this.getChar();

result.addRange(ch,ch);

if (ch < 0x10000 && isSet(options,RegularExpression.IGNORE_CASE)) {

ch=Character.toUpperCase((char)ch);

result.addRange(ch,ch);

ch=Character.toLowerCase((char)ch);

result.addRange(ch,ch);

}

return FC_TERMINAL;

case DOT:

return FC_ANY;

case RANGE:

result.mergeRanges(this);

return FC_TERMINAL;

case NRANGE:

result.mergeRanges(Token.complementRanges(this));

return FC_TERMINAL;

case INDEPENDENT:

case PAREN:

return this.getChild(0).analyzeFirstCharacter(result,options);

case MODIFIERGROUP:

options|=((ModifierToken)this).getOptions();

options&=~((ModifierToken)this).getOptionsMask();

return this.getChild(0).analyzeFirstCharacter(result,options);

case BACKREFERENCE:

result.addRange(0,UTF16_MAX);

return FC_ANY;

case STRING:

int cha=this.getString().charAt(0);

int ch2;

if (REUtil.isHighSurrogate(cha) && this.getString().length() >= 2 && REUtil.isLowSurrogate((ch2=this.getString().charAt(1)))) cha=REUtil.composeFromSurrogates(cha,ch2);

result.addRange(cha,cha);

if (cha < 0x10000 && isSet(options,RegularExpression.IGNORE_CASE)) {

cha=Character.toUpperCase((char)cha);

result.addRange(cha,cha);

cha=Character.toLowerCase((char)cha);

result.addRange(cha,cha);

}

return FC_TERMINAL;

case LOOKAHEAD:

case NEGATIVELOOKAHEAD:

case LOOKBEHIND:

case NEGATIVELOOKBEHIND:

return FC_CONTINUE;

default :

throw new RuntimeException("Token#analyzeHeadCharacter(): Invalid Type: " + this.type);

}

}

Location: Token.java

Content: 

protected void compactRanges(){

  throw new RuntimeException("Not supported.");

}

Location: Token.java

Content: 

static Token complementRanges(Token tok){

  return RangeToken.complementRanges(tok);

}

Location: Token.java

Content: 

static private Token.CharToken createAnchor(int ch){

  if (COUNTTOKENS)   Token.tokens++;

  return new Token.CharToken(Token.ANCHOR,ch);

}

Location: Token.java

Content: 

static Token.StringToken createBackReference(int refno){

  if (COUNTTOKENS)   Token.tokens++;

  return new Token.StringToken(Token.BACKREFERENCE,null,refno);

}

Location: Token.java

Content: 

static Token.CharToken createChar(int ch){

  if (COUNTTOKENS)   Token.tokens++;

  return new Token.CharToken(Token.CHAR,ch);

}

Location: Token.java

Content: 

static Token.ClosureToken createClosure(Token tok){

  if (COUNTTOKENS)   Token.tokens++;

  return new Token.ClosureToken(Token.CLOSURE,tok);

}

Location: Token.java

Content: 

static Token.UnionToken createConcat(){

  if (COUNTTOKENS)   Token.tokens++;

  return new Token.UnionToken(Token.CONCAT);

}

Location: Token.java

Content: 

static Token.ConcatToken createConcat(Token tok1,Token tok2){

  if (COUNTTOKENS)   Token.tokens++;

  return new Token.ConcatToken(tok1,tok2);

}

Location: Token.java

Content: 

static Token.ConditionToken createCondition(int refno,Token condition,Token yespat,Token nopat){

  if (COUNTTOKENS)   Token.tokens++;

  return new Token.ConditionToken(refno,condition,yespat,nopat);

}

Location: Token.java

Content: 

static Token createEmpty(){

  return Token.token_empty;

}

Location: Token.java

Content: 

static Token.ParenToken createLook(int type,Token child){

  if (COUNTTOKENS)   Token.tokens++;

  return new Token.ParenToken(type,child,0);

}

Location: Token.java

Content: 

static Token.ModifierToken createModifierGroup(Token child,int add,int mask){

  if (COUNTTOKENS)   Token.tokens++;

  return new Token.ModifierToken(child,add,mask);

}

Location: Token.java

Content: 

static Token.ClosureToken createNGClosure(Token tok){

  if (COUNTTOKENS)   Token.tokens++;

  return new Token.ClosureToken(Token.NONGREEDYCLOSURE,tok);

}

Location: Token.java

Content: 

static RangeToken createNRange(){

  if (COUNTTOKENS)   Token.tokens++;

  return new RangeToken(Token.NRANGE);

}

Location: Token.java

Content: 

static Token.ParenToken createParen(Token child,int pnumber){

  if (COUNTTOKENS)   Token.tokens++;

  return new Token.ParenToken(Token.PAREN,child,pnumber);

}

Location: Token.java

Content: 

static RangeToken createRange(){

  if (COUNTTOKENS)   Token.tokens++;

  return new RangeToken(Token.RANGE);

}

Location: Token.java

Content: 

static Token.StringToken createString(String str){

  if (COUNTTOKENS)   Token.tokens++;

  return new Token.StringToken(Token.STRING,str,0);

}

Location: Token.java

Content: 

static Token.UnionToken createUnion(){

  if (COUNTTOKENS)   Token.tokens++;

  return new Token.UnionToken(Token.UNION);

}

Location: Token.java

Content: 

final void findFixedString(FixedStringContainer container,int options){

switch (this.type) {

case CONCAT:

    Token prevToken=null;

  int prevOptions=0;

for (int i=0; i < this.size(); i++) {

  this.getChild(i).findFixedString(container,options);

  if (prevToken == null || prevToken.isShorterThan(container.token)) {

    prevToken=container.token;

    prevOptions=container.options;

  }

}

container.token=prevToken;

container.options=prevOptions;

return;

case UNION:

case CLOSURE:

case NONGREEDYCLOSURE:

case EMPTY:

case ANCHOR:

case RANGE:

case DOT:

case NRANGE:

case BACKREFERENCE:

case LOOKAHEAD:

case NEGATIVELOOKAHEAD:

case LOOKBEHIND:

case NEGATIVELOOKBEHIND:

case CONDITION:

container.token=null;

return;

case CHAR:

container.token=null;

return;

case STRING:

container.token=this;

container.options=options;

return;

case INDEPENDENT:

case PAREN:

this.getChild(0).findFixedString(container,options);

return;

case MODIFIERGROUP:

options|=((ModifierToken)this).getOptions();

options&=~((ModifierToken)this).getOptionsMask();

this.getChild(0).findFixedString(container,options);

return;

default :

throw new RuntimeException("Token#findFixedString(): Invalid Type: " + this.type);

}

}

Location: Token.java

Content: 

int getChar(){

  return -1;

}

Location: Token.java

Content: 

static synchronized Token getCombiningCharacterSequence(){

  if (Token.token_ccs != null)   return Token.token_ccs;

  Token foo=Token.createClosure(Token.getRange("M",true));

  foo=Token.createConcat(Token.getRange("M",false),foo);

  Token.token_ccs=foo;

  return Token.token_ccs;

}

Location: Token.java

Content: 

static synchronized Token getGraphemePattern(){

  if (Token.token_grapheme != null)   return Token.token_grapheme;

  Token base_char=Token.createRange();

  base_char.mergeRanges(Token.getRange("ASSIGNED",true));

  base_char.subtractRanges(Token.getRange("M",true));

  base_char.subtractRanges(Token.getRange("C",true));

  Token virama=Token.createRange();

  for (int i=0; i < Token.viramaString.length(); i++) {

    virama.addRange(i,i);

  }

  Token combiner_wo_virama=Token.createRange();

  combiner_wo_virama.mergeRanges(Token.getRange("M",true));

  combiner_wo_virama.addRange(0x1160,0x11ff);

  combiner_wo_virama.addRange(0xff9e,0xff9f);

  Token left=Token.createUnion();

  left.addChild(base_char);

  left.addChild(Token.token_empty);

  Token foo=Token.createUnion();

  foo.addChild(Token.createConcat(virama,Token.getRange("L",true)));

  foo.addChild(combiner_wo_virama);

  foo=Token.createClosure(foo);

  foo=Token.createConcat(left,foo);

  Token.token_grapheme=foo;

  return Token.token_grapheme;

}

Location: Token.java

Content: 

int getMax(){

  return -1;

}

Location: Token.java

Content: 

final int getMaxLength(){

switch (this.type) {

case CONCAT:

    int sum=0;

  for (int i=0; i < this.size(); i++) {

    int d=this.getChild(i).getMaxLength();

    if (d < 0)     return -1;

    sum+=d;

  }

return sum;

case CONDITION:

case UNION:

if (this.size() == 0) return 0;

int ret=this.getChild(0).getMaxLength();

for (int i=1; ret >= 0 && i < this.size(); i++) {

int max=this.getChild(i).getMaxLength();

if (max < 0) {

ret=-1;

break;

}

if (max > ret) ret=max;

}

return ret;

case CLOSURE:

case NONGREEDYCLOSURE:

if (this.getMax() >= 0) return this.getMax() * this.getChild(0).getMaxLength();

return -1;

case EMPTY:

case ANCHOR:

return 0;

case CHAR:

return 1;

case DOT:

case RANGE:

case NRANGE:

return 2;

case INDEPENDENT:

case PAREN:

case MODIFIERGROUP:

return this.getChild(0).getMaxLength();

case BACKREFERENCE:

return -1;

case STRING:

return this.getString().length();

case LOOKAHEAD:

case NEGATIVELOOKAHEAD:

case LOOKBEHIND:

case NEGATIVELOOKBEHIND:

return 0;

default :

throw new RuntimeException("Token#getMaxLength(): Invalid Type: " + this.type);

}

}

Location: Token.java

Content: 

int getMin(){

  return -1;

}

Location: Token.java

Content: 

/** 

 * How many characters are needed?

 */

final int getMinLength(){

switch (this.type) {

case CONCAT:

    int sum=0;

  for (int i=0; i < this.size(); i++)   sum+=this.getChild(i).getMinLength();

return sum;

case CONDITION:

case UNION:

if (this.size() == 0) return 0;

int ret=this.getChild(0).getMinLength();

for (int i=1; i < this.size(); i++) {

int min=this.getChild(i).getMinLength();

if (min < ret) ret=min;

}

return ret;

case CLOSURE:

case NONGREEDYCLOSURE:

if (this.getMin() >= 0) return this.getMin() * this.getChild(0).getMinLength();

return 0;

case EMPTY:

case ANCHOR:

return 0;

case DOT:

case CHAR:

case RANGE:

case NRANGE:

return 1;

case INDEPENDENT:

case PAREN:

case MODIFIERGROUP:

return this.getChild(0).getMinLength();

case BACKREFERENCE:

return 0;

case STRING:

return this.getString().length();

case LOOKAHEAD:

case NEGATIVELOOKAHEAD:

case LOOKBEHIND:

case NEGATIVELOOKBEHIND:

return 0;

default :

throw new RuntimeException("Token#getMinLength(): Invalid Type: " + this.type);

}

}

Location: Token.java

Content: 

int getParenNumber(){

  return 0;

}

Location: Token.java

Content: 

static protected RangeToken getRange(String name,boolean positive){

  if (Token.categories.size() == 0) {

synchronized (Token.categories) {

      Token[] ranges=new Token[Token.categoryNames.length];

      for (int i=0; i < ranges.length; i++) {

        ranges[i]=Token.createRange();

      }

      int type;

      for (int i=0; i < 0x10000; i++) {

        type=Character.getType((char)i);

        if (type == Character.START_PUNCTUATION || type == Character.END_PUNCTUATION) {

          if (i == 0x00AB || i == 0x2018 || i == 0x201B || i == 0x201C || i == 0x201F || i == 0x2039) {

            type=CHAR_INIT_QUOTE;

          }

          if (i == 0x00BB || i == 0x2019 || i == 0x201D || i == 0x203A) {

            type=CHAR_FINAL_QUOTE;

          }

        }

        ranges[type].addRange(i,i);

switch (type) {

case Character.UPPERCASE_LETTER:

case Character.LOWERCASE_LETTER:

case Character.TITLECASE_LETTER:

case Character.MODIFIER_LETTER:

case Character.OTHER_LETTER:

          type=CHAR_LETTER;

        break;

case Character.NON_SPACING_MARK:

case Character.COMBINING_SPACING_MARK:

case Character.ENCLOSING_MARK:

      type=CHAR_MARK;

    break;

case Character.DECIMAL_DIGIT_NUMBER:

case Character.LETTER_NUMBER:

case Character.OTHER_NUMBER:

  type=CHAR_NUMBER;

break;

case Character.SPACE_SEPARATOR:

case Character.LINE_SEPARATOR:

case Character.PARAGRAPH_SEPARATOR:

type=CHAR_SEPARATOR;

break;

case Character.CONTROL:

case Character.FORMAT:

case Character.SURROGATE:

case Character.PRIVATE_USE:

case Character.UNASSIGNED:

type=CHAR_OTHER;

break;

case Character.CONNECTOR_PUNCTUATION:

case Character.DASH_PUNCTUATION:

case Character.START_PUNCTUATION:

case Character.END_PUNCTUATION:

case CHAR_INIT_QUOTE:

case CHAR_FINAL_QUOTE:

case Character.OTHER_PUNCTUATION:

type=CHAR_PUNCTUATION;

break;

case Character.MATH_SYMBOL:

case Character.CURRENCY_SYMBOL:

case Character.MODIFIER_SYMBOL:

case Character.OTHER_SYMBOL:

type=CHAR_SYMBOL;

break;

default :

throw new RuntimeException("org.apache.xerces.utils.regex.Token#getRange(): Unknown Unicode category: " + type);

}

ranges[type].addRange(i,i);

}

ranges[Character.UNASSIGNED].addRange(0x10000,Token.UTF16_MAX);

ranges[CHAR_OTHER].addRange(0x10000,Token.UTF16_MAX);

for (int i=0; i < ranges.length; i++) {

if (Token.categoryNames[i] != null) {

if (i == Character.UNASSIGNED) {

ranges[i].addRange(0x10000,Token.UTF16_MAX);

}

Token.categories.put(Token.categoryNames[i],ranges[i]);

Token.categories2.put(Token.categoryNames[i],Token.complementRanges(ranges[i]));

}

}

StringBuffer buffer=new StringBuffer(50);

for (int i=0; i < Token.blockNames.length; i++) {

Token r1=Token.createRange();

int location;

if (i < NONBMP_BLOCK_START) {

location=i * 2;

int rstart=Token.blockRanges.charAt(location);

int rend=Token.blockRanges.charAt(location + 1);

r1.addRange(rstart,rend);

}

 else {

location=(i - NONBMP_BLOCK_START) * 2;

r1.addRange(Token.nonBMPBlockRanges[location],Token.nonBMPBlockRanges[location + 1]);

}

String n=Token.blockNames[i];

if (n.equals("Specials")) r1.addRange(0xfff0,0xfffd);

if (n.equals("Private Use")) {

r1.addRange(0xF0000,0xFFFFD);

r1.addRange(0x100000,0x10FFFD);

}

Token.categories.put(n,r1);

Token.categories2.put(n,Token.complementRanges(r1));

buffer.setLength(0);

buffer.append("Is");

if (n.indexOf(' ') >= 0) {

for (int ci=0; ci < n.length(); ci++) if (n.charAt(ci) != ' ') buffer.append((char)n.charAt(ci));

}

 else {

buffer.append(n);

}

Token.setAlias(buffer.toString(),n,true);

}

Token.setAlias("ASSIGNED","Cn",false);

Token.setAlias("UNASSIGNED","Cn",true);

Token all=Token.createRange();

all.addRange(0,Token.UTF16_MAX);

Token.categories.put("ALL",all);

Token.categories2.put("ALL",Token.complementRanges(all));

Token.registerNonXS("ASSIGNED");

Token.registerNonXS("UNASSIGNED");

Token.registerNonXS("ALL");

Token isalpha=Token.createRange();

isalpha.mergeRanges(ranges[Character.UPPERCASE_LETTER]);

isalpha.mergeRanges(ranges[Character.LOWERCASE_LETTER]);

isalpha.mergeRanges(ranges[Character.OTHER_LETTER]);

Token.categories.put("IsAlpha",isalpha);

Token.categories2.put("IsAlpha",Token.complementRanges(isalpha));

Token.registerNonXS("IsAlpha");

Token isalnum=Token.createRange();

isalnum.mergeRanges(isalpha);

isalnum.mergeRanges(ranges[Character.DECIMAL_DIGIT_NUMBER]);

Token.categories.put("IsAlnum",isalnum);

Token.categories2.put("IsAlnum",Token.complementRanges(isalnum));

Token.registerNonXS("IsAlnum");

Token isspace=Token.createRange();

isspace.mergeRanges(Token.token_spaces);

isspace.mergeRanges(ranges[CHAR_SEPARATOR]);

Token.categories.put("IsSpace",isspace);

Token.categories2.put("IsSpace",Token.complementRanges(isspace));

Token.registerNonXS("IsSpace");

Token isword=Token.createRange();

isword.mergeRanges(isalnum);

isword.addRange('_','_');

Token.categories.put("IsWord",isword);

Token.categories2.put("IsWord",Token.complementRanges(isword));

Token.registerNonXS("IsWord");

Token isascii=Token.createRange();

isascii.addRange(0,127);

Token.categories.put("IsASCII",isascii);

Token.categories2.put("IsASCII",Token.complementRanges(isascii));

Token.registerNonXS("IsASCII");

Token isnotgraph=Token.createRange();

isnotgraph.mergeRanges(ranges[CHAR_OTHER]);

isnotgraph.addRange(' ',' ');

Token.categories.put("IsGraph",Token.complementRanges(isnotgraph));

Token.categories2.put("IsGraph",isnotgraph);

Token.registerNonXS("IsGraph");

Token isxdigit=Token.createRange();

isxdigit.addRange('0','9');

isxdigit.addRange('A','F');

isxdigit.addRange('a','f');

Token.categories.put("IsXDigit",Token.complementRanges(isxdigit));

Token.categories2.put("IsXDigit",isxdigit);

Token.registerNonXS("IsXDigit");

Token.setAlias("IsDigit","Nd",true);

Token.setAlias("IsUpper","Lu",true);

Token.setAlias("IsLower","Ll",true);

Token.setAlias("IsCntrl","C",true);

Token.setAlias("IsPrint","C",false);

Token.setAlias("IsPunct","P",true);

Token.registerNonXS("IsDigit");

Token.registerNonXS("IsUpper");

Token.registerNonXS("IsLower");

Token.registerNonXS("IsCntrl");

Token.registerNonXS("IsPrint");

Token.registerNonXS("IsPunct");

Token.setAlias("alpha","IsAlpha",true);

Token.setAlias("alnum","IsAlnum",true);

Token.setAlias("ascii","IsASCII",true);

Token.setAlias("cntrl","IsCntrl",true);

Token.setAlias("digit","IsDigit",true);

Token.setAlias("graph","IsGraph",true);

Token.setAlias("lower","IsLower",true);

Token.setAlias("print","IsPrint",true);

Token.setAlias("punct","IsPunct",true);

Token.setAlias("space","IsSpace",true);

Token.setAlias("upper","IsUpper",true);

Token.setAlias("word","IsWord",true);

Token.setAlias("xdigit","IsXDigit",true);

Token.registerNonXS("alpha");

Token.registerNonXS("alnum");

Token.registerNonXS("ascii");

Token.registerNonXS("cntrl");

Token.registerNonXS("digit");

Token.registerNonXS("graph");

Token.registerNonXS("lower");

Token.registerNonXS("print");

Token.registerNonXS("punct");

Token.registerNonXS("space");

Token.registerNonXS("upper");

Token.registerNonXS("word");

Token.registerNonXS("xdigit");

}

}

RangeToken tok=positive ? (RangeToken)Token.categories.get(name) : (RangeToken)Token.categories2.get(name);

return tok;

}

Location: Token.java

Content: 

static protected RangeToken getRange(String name,boolean positive,boolean xs){

  RangeToken range=Token.getRange(name,positive);

  if (xs && range != null && Token.isRegisterNonXS(name))   range=null;

  return range;

}

Location: Token.java

Content: 

int getReferenceNumber(){

  return 0;

}

Location: Token.java

Content: 

String getString(){

  return null;

}

Location: Token.java

Content: 

protected void intersectRanges(Token tok){

  throw new RuntimeException("Not supported.");

}

Location: Token.java

Content: 

static protected boolean isRegisterNonXS(String name){

  if (Token.nonxs == null)   return false;

  return Token.nonxs.containsKey(name);

}

Location: Token.java

Content: 

private static final boolean isSet(int options,int flag){

  return (options & flag) == flag;

}

Location: Token.java

Content: 

private final boolean isShorterThan(Token tok){

  if (tok == null)   return false;

  int mylength;

  if (this.type == STRING)   mylength=this.getString().length();

 else   throw new RuntimeException("Internal Error: Illegal type: " + this.type);

  int otherlength;

  if (tok.type == STRING)   otherlength=tok.getString().length();

 else   throw new RuntimeException("Internal Error: Illegal type: " + tok.type);

  return mylength < otherlength;

}

Location: Token.java

Content: 

boolean match(int ch){

  throw new RuntimeException("NFAArrow#match(): Internal error: " + this.type);

}

Location: Token.java

Content: 

protected void mergeRanges(Token tok){

  throw new RuntimeException("Not supported.");

}

Location: Token.java

Content: 

/** 

 * This method is called by only getRange(). So this method need not MT-safe.

 */

static protected void registerNonXS(String name){

  if (Token.nonxs == null)   Token.nonxs=new Hashtable();

  Token.nonxs.put(name,name);

}

Location: Token.java

Content: 

private static void setAlias(String newName,String name,boolean positive){

  Token t1=(Token)Token.categories.get(name);

  Token t2=(Token)Token.categories2.get(name);

  if (positive) {

    Token.categories.put(newName,t1);

    Token.categories2.put(newName,t2);

  }

 else {

    Token.categories2.put(newName,t1);

    Token.categories.put(newName,t2);

  }

}

Location: Token.java

Content: 

void setMax(int max){

}

Location: Token.java

Content: 

void setMin(int min){

}

Location: Token.java

Content: 

protected void sortRanges(){

  throw new RuntimeException("Not supported.");

}

Location: Token.java

Content: 

protected void subtractRanges(Token tok){

  throw new RuntimeException("Not supported.");

}

Location: Token.java

Content: 

protected Token(int type){

  this.type=type;

}

Location: Token.java

Content: 

public String toString(int options){

  return this.type == Token.DOT ? "." : "";

}

