Location: XMLGrammarCachingConfiguration.java

Content: 

public void clearGrammarPool(){

  fGrammarPool.clear();

}

Location: XMLGrammarCachingConfiguration.java

Content: 

public void lockGrammarPool(){

  fGrammarPool.lockPool();

}

Location: XMLGrammarCachingConfiguration.java

Content: 

DTDGrammar parseDTD(XMLInputSource is) throws IOException {

  XMLEntityResolver resolver=getEntityResolver();

  if (resolver != null) {

    fDTDLoader.setEntityResolver(resolver);

  }

  fDTDLoader.setProperty(ERROR_REPORTER,fErrorReporter);

  DTDGrammar grammar=(DTDGrammar)fDTDLoader.loadGrammar(is);

  if (grammar != null) {

    fGrammarPool.cacheGrammars(XMLGrammarDescription.XML_DTD,new Grammar[]{grammar});

  }

  return grammar;

}

Location: XMLGrammarCachingConfiguration.java

Content: 

/** 

 * Parse a grammar from a location identified by an URI. This method also adds this grammar to the XMLGrammarPool

 * @param type The type of the grammar to be constructed

 * @param uri The location of the grammar to be constructed.<strong>The parser will not expand this URI or make it available to the EntityResolver</strong>

 * @return The newly created <code>Grammar</code>.

 * @exception XNIException thrown on an error in grammarconstruction

 * @exception IOException thrown if an error is encounteredin reading the file

 */

public Grammar parseGrammar(String type,String uri) throws XNIException, IOException {

  XMLInputSource source=new XMLInputSource(null,uri,null);

  return parseGrammar(type,source);

}

Location: XMLGrammarCachingConfiguration.java

Content: 

/** 

 * Parse a grammar from a location identified by an XMLInputSource.   This method also adds this grammar to the XMLGrammarPool

 * @param type The type of the grammar to be constructed

 * @param is The XMLInputSource containing this grammar'sinformation <strong>If a URI is included in the systemId field, the parser will not expand this URI or make it available to the EntityResolver</strong>

 * @return The newly created <code>Grammar</code>.

 * @exception XNIException thrown on an error in grammarconstruction

 * @exception IOException thrown if an error is encounteredin reading the file

 */

public Grammar parseGrammar(String type,XMLInputSource is) throws XNIException, IOException {

  if (type.equals(XMLGrammarDescription.XML_SCHEMA)) {

    return parseXMLSchema(is);

  }

 else   if (type.equals(XMLGrammarDescription.XML_DTD)) {

    return parseDTD(is);

  }

  return null;

}

Location: XMLGrammarCachingConfiguration.java

Content: 

SchemaGrammar parseXMLSchema(XMLInputSource is) throws IOException {

  XMLEntityResolver resolver=getEntityResolver();

  if (resolver != null) {

    fSchemaLoader.setEntityResolver(resolver);

  }

  if (fErrorReporter.getMessageFormatter(XSMessageFormatter.SCHEMA_DOMAIN) == null) {

    fErrorReporter.putMessageFormatter(XSMessageFormatter.SCHEMA_DOMAIN,new XSMessageFormatter());

  }

  fSchemaLoader.setProperty(ERROR_REPORTER,fErrorReporter);

  String propPrefix=Constants.XERCES_PROPERTY_PREFIX;

  String propName=propPrefix + Constants.SCHEMA_LOCATION;

  fSchemaLoader.setProperty(propName,getProperty(propName));

  propName=propPrefix + Constants.SCHEMA_NONS_LOCATION;

  fSchemaLoader.setProperty(propName,getProperty(propName));

  propName=Constants.JAXP_PROPERTY_PREFIX + Constants.SCHEMA_SOURCE;

  fSchemaLoader.setProperty(propName,getProperty(propName));

  fSchemaLoader.setFeature(SCHEMA_FULL_CHECKING,getFeature(SCHEMA_FULL_CHECKING));

  SchemaGrammar grammar=(SchemaGrammar)fSchemaLoader.loadGrammar(is);

  if (grammar != null) {

    fGrammarPool.cacheGrammars(XMLGrammarDescription.XML_SCHEMA,new Grammar[]{grammar});

  }

  return grammar;

}

Location: XMLGrammarCachingConfiguration.java

Content: 

public void unlockGrammarPool(){

  fGrammarPool.unlockPool();

}

Location: XMLGrammarCachingConfiguration.java

Content: 

/** 

 * Default constructor. 

 */

public XMLGrammarCachingConfiguration(){

  this(fStaticSymbolTable,fStaticGrammarPool,null);

}

Location: XMLGrammarCachingConfiguration.java

Content: 

/** 

 * Constructs a parser configuration using the specified symbol table. 

 * @param symbolTable The symbol table to use.

 */

public XMLGrammarCachingConfiguration(SymbolTable symbolTable){

  this(symbolTable,fStaticGrammarPool,null);

}

Location: XMLGrammarCachingConfiguration.java

Content: 

/** 

 * Constructs a parser configuration using the specified symbol table and grammar pool. <p> <strong>REVISIT:</strong>  Grammar pool will be updated when the new validation engine is implemented.

 * @param symbolTable The symbol table to use.

 * @param grammarPool The grammar pool to use.

 */

public XMLGrammarCachingConfiguration(SymbolTable symbolTable,XMLGrammarPool grammarPool){

  this(symbolTable,grammarPool,null);

}

Location: XMLGrammarCachingConfiguration.java

Content: 

/** 

 * Constructs a parser configuration using the specified symbol table, grammar pool, and parent settings. <p> <strong>REVISIT:</strong>  Grammar pool will be updated when the new validation engine is implemented.

 * @param symbolTable    The symbol table to use.

 * @param grammarPool    The grammar pool to use.

 * @param parentSettings The parent settings.

 */

public XMLGrammarCachingConfiguration(SymbolTable symbolTable,XMLGrammarPool grammarPool,XMLComponentManager parentSettings){

  super(symbolTable,grammarPool,parentSettings);

  fSchemaLoader=new XMLSchemaLoader(fSymbolTable);

  fSchemaLoader.setProperty(XMLGRAMMAR_POOL,fGrammarPool);

  fDTDLoader=new XMLDTDLoader(fSymbolTable,fGrammarPool);

}

