Location: XSDFACM.java

Content: 

/** 

 * Builds the internal DFA transition table from the given syntax tree.

 * @param syntaxTree The syntax tree.

 * @exception RuntimeException Thrown if DFA cannot be built.

 */

private void buildDFA(CMNode syntaxTree){

  int EOCPos=fLeafCount;

  XSCMLeaf nodeEOC=new XSCMLeaf(XSParticleDecl.PARTICLE_ELEMENT,null,-1,fLeafCount++);

  fHeadNode=new XSCMBinOp(XSModelGroupImpl.MODELGROUP_SEQUENCE,syntaxTree,nodeEOC);

  fLeafList=new XSCMLeaf[fLeafCount];

  fLeafListType=new int[fLeafCount];

  postTreeBuildInit(fHeadNode);

  fFollowList=new CMStateSet[fLeafCount];

  for (int index=0; index < fLeafCount; index++)   fFollowList[index]=new CMStateSet(fLeafCount);

  calcFollowList(fHeadNode);

  fElemMap=new Object[fLeafCount];

  fElemMapType=new int[fLeafCount];

  fElemMapId=new int[fLeafCount];

  fElemMapSize=0;

  Occurence[] elemOccurenceMap=null;

  for (int outIndex=0; outIndex < fLeafCount; outIndex++) {

    fElemMap[outIndex]=null;

    int inIndex=0;

    final int id=fLeafList[outIndex].getParticleId();

    for (; inIndex < fElemMapSize; inIndex++) {

      if (id == fElemMapId[inIndex])       break;

    }

    if (inIndex == fElemMapSize) {

      XSCMLeaf leaf=fLeafList[outIndex];

      fElemMap[fElemMapSize]=leaf.getLeaf();

      if (leaf instanceof XSCMRepeatingLeaf) {

        if (elemOccurenceMap == null) {

          elemOccurenceMap=new Occurence[fLeafCount];

        }

        elemOccurenceMap[fElemMapSize]=new Occurence((XSCMRepeatingLeaf)leaf,fElemMapSize);

      }

      fElemMapType[fElemMapSize]=fLeafListType[outIndex];

      fElemMapId[fElemMapSize]=id;

      fElemMapSize++;

    }

  }

  if (DEBUG) {

    if (fElemMapId[fElemMapSize - 1] != -1)     System.err.println("interal error in DFA: last element is not EOC.");

  }

  fElemMapSize--;

  int[] fLeafSorter=new int[fLeafCount + fElemMapSize];

  int fSortCount=0;

  for (int elemIndex=0; elemIndex < fElemMapSize; elemIndex++) {

    final int id=fElemMapId[elemIndex];

    for (int leafIndex=0; leafIndex < fLeafCount; leafIndex++) {

      if (id == fLeafList[leafIndex].getParticleId())       fLeafSorter[fSortCount++]=leafIndex;

    }

    fLeafSorter[fSortCount++]=-1;

  }

  int curArraySize=fLeafCount * 4;

  CMStateSet[] statesToDo=new CMStateSet[curArraySize];

  fFinalStateFlags=new boolean[curArraySize];

  fTransTable=new int[curArraySize][];

  CMStateSet setT=fHeadNode.firstPos();

  int unmarkedState=0;

  int curState=0;

  fTransTable[curState]=makeDefStateList();

  statesToDo[curState]=setT;

  curState++;

  HashMap stateTable=new HashMap();

  while (unmarkedState < curState) {

    setT=statesToDo[unmarkedState];

    int[] transEntry=fTransTable[unmarkedState];

    fFinalStateFlags[unmarkedState]=setT.getBit(EOCPos);

    unmarkedState++;

    CMStateSet newSet=null;

    int sorterIndex=0;

    for (int elemIndex=0; elemIndex < fElemMapSize; elemIndex++) {

      if (newSet == null)       newSet=new CMStateSet(fLeafCount);

 else       newSet.zeroBits();

      int leafIndex=fLeafSorter[sorterIndex++];

      while (leafIndex != -1) {

        if (setT.getBit(leafIndex)) {

          newSet.union(fFollowList[leafIndex]);

        }

        leafIndex=fLeafSorter[sorterIndex++];

      }

      if (!newSet.isEmpty()) {

        Integer stateObj=(Integer)stateTable.get(newSet);

        int stateIndex=(stateObj == null ? curState : stateObj.intValue());

        if (stateIndex == curState) {

          statesToDo[curState]=newSet;

          fTransTable[curState]=makeDefStateList();

          stateTable.put(newSet,new Integer(curState));

          curState++;

          newSet=null;

        }

        transEntry[elemIndex]=stateIndex;

        if (curState == curArraySize) {

          final int newSize=(int)(curArraySize * 1.5);

          CMStateSet[] newToDo=new CMStateSet[newSize];

          boolean[] newFinalFlags=new boolean[newSize];

          int[][] newTransTable=new int[newSize][];

          System.arraycopy(statesToDo,0,newToDo,0,curArraySize);

          System.arraycopy(fFinalStateFlags,0,newFinalFlags,0,curArraySize);

          System.arraycopy(fTransTable,0,newTransTable,0,curArraySize);

          curArraySize=newSize;

          statesToDo=newToDo;

          fFinalStateFlags=newFinalFlags;

          fTransTable=newTransTable;

        }

      }

    }

  }

  if (elemOccurenceMap != null) {

    fCountingStates=new Occurence[curState];

    for (int i=0; i < curState; ++i) {

      int[] transitions=fTransTable[i];

      for (int j=0; j < transitions.length; ++j) {

        if (i == transitions[j]) {

          fCountingStates[i]=elemOccurenceMap[j];

          break;

        }

      }

    }

  }

  if (DEBUG_VALIDATE_CONTENT)   dumpTree(fHeadNode,0);

  fHeadNode=null;

  fLeafList=null;

  fFollowList=null;

  fLeafListType=null;

  fElemMapId=null;

}

Location: XSDFACM.java

Content: 

/** 

 * Calculates the follow list of the current node.

 * @param nodeCur The curent node.

 * @exception RuntimeException Thrown if follow list cannot be calculated.

 */

private void calcFollowList(CMNode nodeCur){

  if (nodeCur.type() == XSModelGroupImpl.MODELGROUP_CHOICE) {

    calcFollowList(((XSCMBinOp)nodeCur).getLeft());

    calcFollowList(((XSCMBinOp)nodeCur).getRight());

  }

 else   if (nodeCur.type() == XSModelGroupImpl.MODELGROUP_SEQUENCE) {

    calcFollowList(((XSCMBinOp)nodeCur).getLeft());

    calcFollowList(((XSCMBinOp)nodeCur).getRight());

    final CMStateSet last=((XSCMBinOp)nodeCur).getLeft().lastPos();

    final CMStateSet first=((XSCMBinOp)nodeCur).getRight().firstPos();

    for (int index=0; index < fLeafCount; index++) {

      if (last.getBit(index))       fFollowList[index].union(first);

    }

  }

 else   if (nodeCur.type() == XSParticleDecl.PARTICLE_ZERO_OR_MORE || nodeCur.type() == XSParticleDecl.PARTICLE_ONE_OR_MORE) {

    calcFollowList(((XSCMUniOp)nodeCur).getChild());

    final CMStateSet first=nodeCur.firstPos();

    final CMStateSet last=nodeCur.lastPos();

    for (int index=0; index < fLeafCount; index++) {

      if (last.getBit(index))       fFollowList[index].union(first);

    }

  }

 else   if (nodeCur.type() == XSParticleDecl.PARTICLE_ZERO_OR_ONE) {

    calcFollowList(((XSCMUniOp)nodeCur).getChild());

  }

}

Location: XSDFACM.java

Content: 

/** 

 * Dumps the tree of the current node to standard output.

 * @param nodeCur The current node.

 * @param level   The maximum levels to output.

 * @exception RuntimeException Thrown on error.

 */

private void dumpTree(CMNode nodeCur,int level){

  for (int index=0; index < level; index++)   System.out.print("   ");

  int type=nodeCur.type();

switch (type) {

case XSModelGroupImpl.MODELGROUP_CHOICE:

case XSModelGroupImpl.MODELGROUP_SEQUENCE:

{

      if (type == XSModelGroupImpl.MODELGROUP_CHOICE)       System.out.print("Choice Node ");

 else       System.out.print("Seq Node ");

      if (nodeCur.isNullable())       System.out.print("Nullable ");

      System.out.print("firstPos=");

      System.out.print(nodeCur.firstPos().toString());

      System.out.print(" lastPos=");

      System.out.println(nodeCur.lastPos().toString());

      dumpTree(((XSCMBinOp)nodeCur).getLeft(),level + 1);

      dumpTree(((XSCMBinOp)nodeCur).getRight(),level + 1);

      break;

    }

case XSParticleDecl.PARTICLE_ZERO_OR_MORE:

case XSParticleDecl.PARTICLE_ONE_OR_MORE:

case XSParticleDecl.PARTICLE_ZERO_OR_ONE:

{

    System.out.print("Rep Node ");

    if (nodeCur.isNullable())     System.out.print("Nullable ");

    System.out.print("firstPos=");

    System.out.print(nodeCur.firstPos().toString());

    System.out.print(" lastPos=");

    System.out.println(nodeCur.lastPos().toString());

    dumpTree(((XSCMUniOp)nodeCur).getChild(),level + 1);

    break;

  }

case XSParticleDecl.PARTICLE_ELEMENT:

{

  System.out.print("Leaf: (pos=" + ((XSCMLeaf)nodeCur).getPosition() + "), "+ "(elemIndex="+ ((XSCMLeaf)nodeCur).getLeaf()+ ") ");

  if (nodeCur.isNullable())   System.out.print(" Nullable ");

  System.out.print("firstPos=");

  System.out.print(nodeCur.firstPos().toString());

  System.out.print(" lastPos=");

  System.out.println(nodeCur.lastPos().toString());

  break;

}

case XSParticleDecl.PARTICLE_WILDCARD:

System.out.print("Any Node: ");

System.out.print("firstPos=");

System.out.print(nodeCur.firstPos().toString());

System.out.print(" lastPos=");

System.out.println(nodeCur.lastPos().toString());

break;

default :

{

throw new RuntimeException("ImplementationMessages.VAL_NIICM");

}

}

}

Location: XSDFACM.java

Content: 

Object findMatchingDecl(QName curElem,int[] state,SubstitutionGroupHandler subGroupHandler,int elemIndex){

  int curState=state[0];

  int nextState=0;

  Object matchingDecl=null;

  while (++elemIndex < fElemMapSize) {

    nextState=fTransTable[curState][elemIndex];

    if (nextState == -1)     continue;

    int type=fElemMapType[elemIndex];

    if (type == XSParticleDecl.PARTICLE_ELEMENT) {

      matchingDecl=subGroupHandler.getMatchingElemDecl(curElem,(XSElementDecl)fElemMap[elemIndex]);

      if (matchingDecl != null) {

        break;

      }

    }

 else     if (type == XSParticleDecl.PARTICLE_WILDCARD) {

      if (((XSWildcardDecl)fElemMap[elemIndex]).allowNamespace(curElem.uri)) {

        matchingDecl=fElemMap[elemIndex];

        break;

      }

    }

  }

  if (elemIndex == fElemMapSize) {

    state[1]=state[0];

    state[0]=XSCMValidator.FIRST_ERROR;

    return findMatchingDecl(curElem,subGroupHandler);

  }

  state[0]=nextState;

  final Occurence o=fCountingStates[nextState];

  if (o != null) {

    state[2]=(elemIndex == o.elemIndex) ? 1 : 0;

  }

  return matchingDecl;

}

Location: XSDFACM.java

Content: 

/** 

 * check whether the given state is one of the final states

 * @param state       the state to check

 * @return whether it's a final state

 */

public boolean isFinalState(int state){

  return (state < 0) ? false : fFinalStateFlags[state];

}

Location: XSDFACM.java

Content: 

/** 

 * -1 is used to represent bad transitions in the transition table entry for each state. So each entry is initialized to an all -1 array. This method creates a new entry and initializes it.

 */

private int[] makeDefStateList(){

  int[] retArray=new int[fElemMapSize];

  for (int index=0; index < fElemMapSize; index++)   retArray[index]=-1;

  return retArray;

}

Location: XSDFACM.java

Content: 

/** 

 * Post tree build initialization. 

 */

private void postTreeBuildInit(CMNode nodeCur) throws RuntimeException {

  nodeCur.setMaxStates(fLeafCount);

  XSCMLeaf leaf=null;

  int pos=0;

  if (nodeCur.type() == XSParticleDecl.PARTICLE_WILDCARD) {

    leaf=(XSCMLeaf)nodeCur;

    pos=leaf.getPosition();

    fLeafList[pos]=leaf;

    fLeafListType[pos]=XSParticleDecl.PARTICLE_WILDCARD;

  }

 else   if ((nodeCur.type() == XSModelGroupImpl.MODELGROUP_CHOICE) || (nodeCur.type() == XSModelGroupImpl.MODELGROUP_SEQUENCE)) {

    postTreeBuildInit(((XSCMBinOp)nodeCur).getLeft());

    postTreeBuildInit(((XSCMBinOp)nodeCur).getRight());

  }

 else   if (nodeCur.type() == XSParticleDecl.PARTICLE_ZERO_OR_MORE || nodeCur.type() == XSParticleDecl.PARTICLE_ONE_OR_MORE || nodeCur.type() == XSParticleDecl.PARTICLE_ZERO_OR_ONE) {

    postTreeBuildInit(((XSCMUniOp)nodeCur).getChild());

  }

 else   if (nodeCur.type() == XSParticleDecl.PARTICLE_ELEMENT) {

    leaf=(XSCMLeaf)nodeCur;

    pos=leaf.getPosition();

    fLeafList[pos]=leaf;

    fLeafListType[pos]=XSParticleDecl.PARTICLE_ELEMENT;

  }

 else {

    throw new RuntimeException("ImplementationMessages.VAL_NIICM");

  }

}

Location: XSDFACM.java

Content: 

/** 

 * Constructs a DFA content model.

 * @param syntaxTree    The syntax tree of the content model.

 * @param leafCount     The number of leaves.

 * @exception RuntimeException Thrown if DFA can't be built.

 */

public XSDFACM(CMNode syntaxTree,int leafCount){

  fLeafCount=leafCount;

  fIsCompactedForUPA=syntaxTree.isCompactedForUPA();

  if (DEBUG_VALIDATE_CONTENT) {

    XSDFACM.time-=System.currentTimeMillis();

  }

  buildDFA(syntaxTree);

  if (DEBUG_VALIDATE_CONTENT) {

    XSDFACM.time+=System.currentTimeMillis();

    System.out.println("DFA build: " + XSDFACM.time + "ms");

  }

}

