Location: HTMLElementImpl.java

Content: 

/** 

 * Convenience method used to capitalize a one-off attribute value before it is returned. For example, the align values "LEFT" and "left" will both return as "Left".

 * @param value The value of the attribute

 * @return The capitalized value

 */

String capitalize(String value){

  char[] chars;

  int i;

  chars=value.toCharArray();

  if (chars.length > 0) {

    chars[0]=Character.toUpperCase(chars[0]);

    for (i=1; i < chars.length; ++i) {

      chars[i]=Character.toLowerCase(chars[i]);

    }

    return String.valueOf(chars);

  }

  return value;

}

Location: HTMLElementImpl.java

Content: 

/** 

 * Convenience method used to translate an attribute value into a boolean value. If the attribute has an associated value (even an empty string), it is set and true is returned. If the attribute does not exist, false is returend.

 * @param value The value of the attribute

 * @return True or false depending on whether the attribute has been set

 */

boolean getBinary(String name){

  return (getAttributeNode(name) != null);

}

Location: HTMLElementImpl.java

Content: 

/** 

 * Convenience method used to capitalize a one-off attribute value before it is returned. For example, the align values "LEFT" and "left" will both return as "Left".

 * @param name The name of the attribute

 * @return The capitalized value

 */

String getCapitalized(String name){

  String value;

  char[] chars;

  int i;

  value=getAttribute(name);

  if (value != null) {

    chars=value.toCharArray();

    if (chars.length > 0) {

      chars[0]=Character.toUpperCase(chars[0]);

      for (i=1; i < chars.length; ++i) {

        chars[i]=Character.toLowerCase(chars[i]);

      }

      return String.valueOf(chars);

    }

  }

  return value;

}

Location: HTMLElementImpl.java

Content: 

public String getDir(){

  return getAttribute("dir");

}

Location: HTMLElementImpl.java

Content: 

/** 

 * Convenience method returns the form in which this form element is contained. This method is exposed for form elements through the DOM API, but other elements have no access to it through the API.

 */

public HTMLFormElement getForm(){

  Node parent=getParentNode();

  while (parent != null) {

    if (parent instanceof HTMLFormElement) {

      return (HTMLFormElement)parent;

    }

    parent=parent.getParentNode();

  }

  return null;

}

Location: HTMLElementImpl.java

Content: 

/** 

 * Convenience method used to translate an attribute value into an integer value. Returns the integer value or zero if the attribute is not a valid numeric string.

 * @param value The value of the attribute

 * @return The integer value, or zero if not a valid numeric string

 */

int getInteger(String value){

  try {

    return Integer.parseInt(value);

  }

 catch (  NumberFormatException except) {

    return 0;

  }

}

Location: HTMLElementImpl.java

Content: 

public String getLang(){

  return getAttribute("lang");

}

Location: HTMLElementImpl.java

Content: 

/** 

 * Constructor required owner document and element tag name. Will be called by the constructor of specific element types but with a known tag name. Assures that the owner document is an HTML element.

 * @param owner The owner HTML document

 * @param tagName The element's tag name

 */

public HTMLElementImpl(HTMLDocumentImpl owner,String tagName){

  super(owner,tagName.toUpperCase(Locale.ENGLISH));

}

Location: HTMLElementImpl.java

Content: 

public void setDir(String dir){

  setAttribute("dir",dir);

}

Location: HTMLElementImpl.java

Content: 

public void setLang(String lang){

  setAttribute("lang",lang);

}

