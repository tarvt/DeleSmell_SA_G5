Location: SequenceFileAsBinaryOutputFormat.java

Content: 

@Override public void checkOutputSpecs(JobContext job) throws IOException {

  super.checkOutputSpecs(job);

  if (getCompressOutput(job) && getOutputCompressionType(job) == CompressionType.RECORD) {

    throw new InvalidJobConfException("SequenceFileAsBinaryOutputFormat " + "doesn't support Record Compression");

  }

}

Location: SequenceFileAsBinaryOutputFormat.java

Content: 

/** 

 * Get the key class for the  {@link SequenceFile}

 * @return the key class of the {@link SequenceFile}

 */

static public Class<? extends WritableComparable> getSequenceFileOutputKeyClass(JobConf conf){

  return conf.getClass(org.apache.hadoop.mapreduce.lib.output.SequenceFileAsBinaryOutputFormat.KEY_CLASS,conf.getOutputKeyClass().asSubclass(WritableComparable.class),WritableComparable.class);

}

Location: SequenceFileAsBinaryOutputFormat.java

Content: 

/** 

 * Get the key class for the  {@link SequenceFile}

 * @return the key class of the {@link SequenceFile}

 */

static public Class<? extends WritableComparable> getSequenceFileOutputKeyClass(JobContext job){

  return job.getConfiguration().getClass(KEY_CLASS,job.getOutputKeyClass().asSubclass(WritableComparable.class),WritableComparable.class);

}

Location: SequenceFileAsBinaryOutputFormat.java

Content: 

/** 

 * Get the value class for the  {@link SequenceFile}

 * @return the value class of the {@link SequenceFile}

 */

static public Class<? extends Writable> getSequenceFileOutputValueClass(JobConf conf){

  return conf.getClass(org.apache.hadoop.mapreduce.lib.output.SequenceFileAsBinaryOutputFormat.VALUE_CLASS,conf.getOutputValueClass().asSubclass(Writable.class),Writable.class);

}

Location: SequenceFileAsBinaryOutputFormat.java

Content: 

/** 

 * Get the value class for the  {@link SequenceFile}

 * @return the value class of the {@link SequenceFile}

 */

static public Class<? extends Writable> getSequenceFileOutputValueClass(JobContext job){

  return job.getConfiguration().getClass(VALUE_CLASS,job.getOutputValueClass().asSubclass(Writable.class),Writable.class);

}

Location: SequenceFileAsBinaryOutputFormat.java

Content: 

/** 

 * Set the key class for the  {@link SequenceFile}<p>This allows the user to specify the key class to be different  from the actual class ( {@link BytesWritable}) used for writing </p>

 * @param job the {@link Job} to modify

 * @param theClass the SequenceFile output key class.

 */

static public void setSequenceFileOutputKeyClass(Job job,Class<?> theClass){

  job.getConfiguration().setClass(KEY_CLASS,theClass,Object.class);

}

Location: SequenceFileAsBinaryOutputFormat.java

Content: 

/** 

 * Set the key class for the  {@link SequenceFile}<p>This allows the user to specify the key class to be different  from the actual class ( {@link BytesWritable}) used for writing </p>

 * @param conf the {@link JobConf} to modify

 * @param theClass the SequenceFile output key class.

 */

static public void setSequenceFileOutputKeyClass(JobConf conf,Class<?> theClass){

  conf.setClass(org.apache.hadoop.mapreduce.lib.output.SequenceFileAsBinaryOutputFormat.KEY_CLASS,theClass,Object.class);

}

Location: SequenceFileAsBinaryOutputFormat.java

Content: 

/** 

 * Set the value class for the  {@link SequenceFile}<p>This allows the user to specify the value class to be different  from the actual class ( {@link BytesWritable}) used for writing </p>

 * @param job the {@link Job} to modify

 * @param theClass the SequenceFile output key class.

 */

static public void setSequenceFileOutputValueClass(Job job,Class<?> theClass){

  job.getConfiguration().setClass(VALUE_CLASS,theClass,Object.class);

}

Location: SequenceFileAsBinaryOutputFormat.java

Content: 

/** 

 * Set the value class for the  {@link SequenceFile}<p>This allows the user to specify the value class to be different  from the actual class ( {@link BytesWritable}) used for writing </p>

 * @param conf the {@link JobConf} to modify

 * @param theClass the SequenceFile output key class.

 */

static public void setSequenceFileOutputValueClass(JobConf conf,Class<?> theClass){

  conf.setClass(org.apache.hadoop.mapreduce.lib.output.SequenceFileAsBinaryOutputFormat.VALUE_CLASS,theClass,Object.class);

}

