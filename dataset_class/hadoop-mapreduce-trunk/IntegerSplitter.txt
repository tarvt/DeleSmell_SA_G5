Location: IntegerSplitter.java

Content: 

/** 

 * Returns a list of longs one element longer than the list of input splits. This represents the boundaries between input splits. All splits are open on the top end, except the last one. So the list [0, 5, 8, 12, 18] would represent splits capturing the intervals: [0, 5) [5, 8) [8, 12) [12, 18] note the closed interval for the last split.

 */

List<Long> split(long numSplits,long minVal,long maxVal) throws SQLException {

  List<Long> splits=new ArrayList<Long>();

  long splitSize=(maxVal - minVal) / numSplits;

  if (splitSize < 1) {

    splitSize=1;

  }

  long curVal=minVal;

  while (curVal <= maxVal) {

    splits.add(curVal);

    curVal+=splitSize;

  }

  if (splits.get(splits.size() - 1) != maxVal || splits.size() == 1) {

    splits.add(maxVal);

  }

  return splits;

}

