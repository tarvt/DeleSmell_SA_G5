Location: TestTTResourceReporting.java

Content: 

private void setUpCluster(JobConf conf) throws Exception {

  conf.setClass(JTConfig.JT_TASK_SCHEDULER,TestTTResourceReporting.FakeTaskScheduler.class,TaskScheduler.class);

  conf.set(JTConfig.JT_IPC_HANDLER_COUNT,"1");

  miniMRCluster=new MiniMRCluster(1,"file:///",3,null,null,conf);

}

Location: TestTTResourceReporting.java

Content: 

@After private void tearDownCluster(){

  if (miniMRCluster != null) {

    miniMRCluster.shutdown();

  }

}

Location: TestTTResourceReporting.java

Content: 

/** 

 * Test that verifies that configured values are reported correctly.

 * @throws Exception

 */

@Test public void testConfiguredResourceValues() throws Exception {

  JobConf conf=new JobConf();

  conf.setLong("totalVmemOnTT",4 * 1024 * 1024* 1024L);

  conf.setLong("totalPmemOnTT",2 * 1024 * 1024* 1024L);

  conf.setLong("mapSlotMemorySize",1 * 512L);

  conf.setLong("reduceSlotMemorySize",1 * 1024L);

  conf.setLong("availableVmemOnTT",4 * 1024 * 1024* 1024L);

  conf.setLong("availablePmemOnTT",2 * 1024 * 1024* 1024L);

  conf.setLong("cumulativeCpuTime",10000L);

  conf.setLong("cpuFrequency",2000000L);

  conf.setInt("numProcessors",8);

  conf.setFloat("cpuUsage",15.5F);

  conf.setLong("procCumulativeCpuTime",1000L);

  conf.setLong("procVirtualMemorySize",2 * 1024 * 1024* 1024L);

  conf.setLong("procPhysicalMemorySize",1024 * 1024 * 1024L);

  conf.setClass(org.apache.hadoop.mapreduce.server.tasktracker.TTConfig.TT_RESOURCE_CALCULATOR_PLUGIN,DummyResourceCalculatorPlugin.class,ResourceCalculatorPlugin.class);

  conf.setLong(DummyResourceCalculatorPlugin.MAXVMEM_TESTING_PROPERTY,4 * 1024 * 1024* 1024L);

  conf.setLong(DummyResourceCalculatorPlugin.MAXPMEM_TESTING_PROPERTY,2 * 1024 * 1024* 1024L);

  conf.setLong(MRConfig.MAPMEMORY_MB,512L);

  conf.setLong(MRConfig.REDUCEMEMORY_MB,1024L);

  conf.setLong(DummyResourceCalculatorPlugin.CUMULATIVE_CPU_TIME,10000L);

  conf.setLong(DummyResourceCalculatorPlugin.CPU_FREQUENCY,2000000L);

  conf.setInt(DummyResourceCalculatorPlugin.NUM_PROCESSORS,8);

  conf.setFloat(DummyResourceCalculatorPlugin.CPU_USAGE,15.5F);

  try {

    setUpCluster(conf);

    JobConf jobConf=miniMRCluster.createJobConf();

    jobConf.setMemoryForMapTask(1 * 1024L);

    jobConf.setMemoryForReduceTask(2 * 1024L);

    jobConf.setClass(org.apache.hadoop.mapreduce.server.tasktracker.TTConfig.TT_RESOURCE_CALCULATOR_PLUGIN,DummyResourceCalculatorPlugin.class,ResourceCalculatorPlugin.class);

    jobConf.setLong(DummyResourceCalculatorPlugin.PROC_CUMULATIVE_CPU_TIME,1000L);

    jobConf.setLong(DummyResourceCalculatorPlugin.PROC_VMEM_TESTING_PROPERTY,2 * 1024 * 1024* 1024L);

    jobConf.setLong(DummyResourceCalculatorPlugin.PROC_PMEM_TESTING_PROPERTY,1024 * 1024 * 1024L);

    runSleepJob(jobConf);

    verifyTestResults();

  }

  finally {

    tearDownCluster();

  }

}

Location: TestTTResourceReporting.java

Content: 

/** 

 * Test that verifies default values are configured and reported correctly.

 * @throws Exception

 */

@Test public void testDefaultResourceValues() throws Exception {

  JobConf conf=new JobConf();

  try {

    conf.setClass(org.apache.hadoop.mapreduce.server.tasktracker.TTConfig.TT_RESOURCE_CALCULATOR_PLUGIN,DummyResourceCalculatorPlugin.class,ResourceCalculatorPlugin.class);

    setUpCluster(conf);

    JobConf jobConf=miniMRCluster.createJobConf();

    jobConf.setClass(org.apache.hadoop.mapreduce.server.tasktracker.TTConfig.TT_RESOURCE_CALCULATOR_PLUGIN,DummyResourceCalculatorPlugin.class,ResourceCalculatorPlugin.class);

    runSleepJob(jobConf);

    verifyTestResults();

  }

  finally {

    tearDownCluster();

  }

}

Location: TestTTResourceReporting.java

Content: 

/** 

 * Test that verifies that total memory values are calculated and reported correctly.

 * @throws Exception

 */

@Test public void testResourceValuesOnLinux() throws Exception {

  if (!System.getProperty("os.name").startsWith("Linux")) {

    return;

  }

  JobConf conf=new JobConf();

  LinuxResourceCalculatorPlugin plugin=new LinuxResourceCalculatorPlugin();

  conf.setLong("totalVmemOnTT",plugin.getVirtualMemorySize());

  conf.setLong("totalPmemOnTT",plugin.getPhysicalMemorySize());

  conf.setLong("numProcessors",plugin.getNumProcessors());

  try {

    setUpCluster(conf);

    runSleepJob(miniMRCluster.createJobConf());

    verifyTestResults(true);

  }

  finally {

    tearDownCluster();

  }

}

Location: TestTTResourceReporting.java

Content: 

private void verifyTestResults(){

  verifyTestResults(false);

}

Location: TestTTResourceReporting.java

Content: 

private void verifyTestResults(boolean excludeDynamic){

  FakeTaskScheduler scheduler=(FakeTaskScheduler)miniMRCluster.getJobTrackerRunner().getJobTracker().getTaskScheduler();

  assertTrue(scheduler.getFailureMessage(),scheduler.hasTestPassed());

  if (!excludeDynamic) {

    assertTrue(scheduler.getFailureMessage(),scheduler.hasDynamicTestPassed());

  }

}

