Location: SimulatorJobInProgress.java

Content: 

TaskSplitMetaInfo[] createSplits(JobStory story) throws IOException {

  InputSplit[] splits=story.getInputSplits();

  if (splits == null || splits.length != numMapTasks) {

    throw new IllegalArgumentException("Input split size mismatch: expected=" + numMapTasks + ", actual="+ ((splits == null) ? -1 : splits.length));

  }

  TaskSplitMetaInfo[] splitMetaInfo=new TaskSplitMetaInfo[story.getNumberMaps()];

  int i=0;

  for (  InputSplit split : splits) {

    try {

      splitMetaInfo[i++]=new TaskSplitMetaInfo(split,0);

    }

 catch (    InterruptedException ie) {

      throw new IOException(ie);

    }

  }

  return splitMetaInfo;

}

Location: SimulatorJobInProgress.java

Content: 

private int getClosestLocality(TaskTracker taskTracker,TaskSplitMetaInfo split){

  int locality=2;

  Node taskTrackerNode=jobtracker.getNode(taskTracker.getStatus().getHost());

  if (taskTrackerNode == null) {

    throw new IllegalArgumentException("Cannot determine network topology node for TaskTracker " + taskTracker.getTrackerName());

  }

  for (  String location : split.getLocations()) {

    Node dataNode=jobtracker.getNode(location);

    if (dataNode == null) {

      throw new IllegalArgumentException("Cannot determine network topology node for split location " + location);

    }

    locality=Math.min(locality,jobtracker.clusterMap.getDistance(taskTrackerNode,dataNode));

  }

  return locality;

}

Location: SimulatorJobInProgress.java

Content: 

/** 

 * Given the map taskAttemptID, returns the TaskAttemptInfo. Deconstructs the map's taskAttemptID and looks up the jobStory with the parts taskType, id of task, id of task attempt.

 * @param taskTracker tasktracker

 * @param taskAttemptID task-attempt

 * @return TaskAttemptInfo for the map task-attempt

 */

@SuppressWarnings("deprecation") private synchronized TaskAttemptInfo getMapTaskAttemptInfo(TaskTracker taskTracker,TaskAttemptID taskAttemptID){

  assert (taskAttemptID.getTaskType() == TaskType.MAP);

  JobID jobid=(JobID)taskAttemptID.getJobID();

  assert (jobid == getJobID());

  TaskSplitMetaInfo split=taskSplitMetaInfo[taskAttemptID.getTaskID().getId()];

  int locality=getClosestLocality(taskTracker,split);

  TaskID taskId=taskAttemptID.getTaskID();

  TaskType taskType=taskAttemptID.getTaskType();

  if (taskId.getTaskType() != TaskType.MAP) {

    assert false : "Task " + taskId + " is not MAP :"+ taskId.getTaskType();

  }

  TaskAttemptInfo taskAttemptInfo=jobStory.getMapTaskAttemptInfoAdjusted(taskId.getId(),taskAttemptID.getId(),locality);

  if (LOG.isDebugEnabled()) {

    LOG.debug("get an attempt: " + taskAttemptID.toString() + ", state="+ taskAttemptInfo.getRunState()+ ", runtime="+ ((taskType == TaskType.MAP) ? taskAttemptInfo.getRuntime() : ((ReduceTaskAttemptInfo)taskAttemptInfo).getReduceRuntime()));

  }

  return taskAttemptInfo;

}

Location: SimulatorJobInProgress.java

Content: 

/** 

 * Given the reduce taskAttemptID, returns the TaskAttemptInfo. Deconstructs the reduce taskAttemptID and looks up the jobStory with the parts taskType, id of task, id of task attempt.

 * @param taskTracker tasktracker

 * @param taskAttemptID task-attempt

 * @return TaskAttemptInfo for the reduce task-attempt

 */

private TaskAttemptInfo getReduceTaskAttemptInfo(TaskTracker taskTracker,TaskAttemptID taskAttemptID){

  assert (taskAttemptID.getTaskType() == TaskType.REDUCE);

  TaskID taskId=taskAttemptID.getTaskID();

  TaskType taskType=taskAttemptID.getTaskType();

  TaskAttemptInfo taskAttemptInfo=jobStory.getTaskAttemptInfo(taskType,taskId.getId(),taskAttemptID.getId());

  if (LOG.isDebugEnabled()) {

    LOG.debug("get an attempt: " + taskAttemptID.toString() + ", state="+ taskAttemptInfo.getRunState()+ ", runtime="+ ((taskType == TaskType.MAP) ? taskAttemptInfo.getRuntime() : ((ReduceTaskAttemptInfo)taskAttemptInfo).getReduceRuntime()));

  }

  return taskAttemptInfo;

}

Location: SimulatorJobInProgress.java

Content: 

@SuppressWarnings("deprecation") public TaskAttemptInfo getTaskAttemptInfo(TaskTracker taskTracker,TaskAttemptID taskAttemptId){

  JobID jobid=(JobID)taskAttemptId.getJobID();

  assert (jobid == getJobID());

  return (taskAttemptId.getTaskType() == TaskType.MAP) ? getMapTaskAttemptInfo(taskTracker,taskAttemptId) : getReduceTaskAttemptInfo(taskTracker,taskAttemptId);

}

Location: SimulatorJobInProgress.java

Content: 

@SuppressWarnings("deprecation") public SimulatorJobInProgress(JobID jobid,String jobSubmitDir,JobTracker jobtracker,JobConf default_conf,JobStory jobStory){

  super(default_conf);

  this.jobId=jobid;

  String url="http://" + jobtracker.getJobTrackerMachine() + ":"+ jobtracker.getInfoPort()+ "/jobdetails.jsp?jobid="+ jobid;

  this.jobtracker=jobtracker;

  this.conf=jobStory.getJobConf();

  this.priority=conf.getJobPriority();

  Path jobDir=new Path(jobSubmitDir);

  this.jobFile=new Path(jobDir,"job.xml");

  this.status=new JobStatus(jobid,0.0f,0.0f,0.0f,0.0f,JobStatus.PREP,priority,conf.getUser(),conf.getJobName(),jobFile.toString(),url);

  this.profile=new JobProfile(jobStory.getUser(),jobid,this.jobFile.toString(),url,jobStory.getName(),conf.getQueueName());

  this.startTime=JobTracker.getClock().getTime();

  status.setStartTime(startTime);

  this.resourceEstimator=new ResourceEstimator(this);

  this.numMapTasks=jobStory.getNumberMaps();

  this.numReduceTasks=jobStory.getNumberReduces();

  this.taskCompletionEvents=new ArrayList<TaskCompletionEvent>(numMapTasks + numReduceTasks + 10);

  this.mapFailuresPercent=conf.getMaxMapTaskFailuresPercent();

  this.reduceFailuresPercent=conf.getMaxReduceTaskFailuresPercent();

  this.maxLevel=jobtracker.getNumTaskCacheLevels();

  this.anyCacheLevel=this.maxLevel + 1;

  this.nonLocalMaps=new LinkedList<TaskInProgress>();

  this.nonLocalRunningMaps=new LinkedHashSet<TaskInProgress>();

  this.runningMapCache=new IdentityHashMap<Node,Set<TaskInProgress>>();

  this.nonRunningReduces=new LinkedList<TaskInProgress>();

  this.runningReduces=new LinkedHashSet<TaskInProgress>();

  this.slowTaskThreshold=Math.max(0.0f,conf.getFloat("mapred.speculative.execution.slowTaskThreshold",1.0f));

  this.speculativeCap=conf.getFloat("mapred.speculative.execution.speculativeCap",0.1f);

  this.slowNodeThreshold=conf.getFloat("mapred.speculative.execution.slowNodeThreshold",1.0f);

  this.jobStory=jobStory;

  this.jobHistory=this.jobtracker.getJobHistory();

}

