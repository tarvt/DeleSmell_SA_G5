Location: StreamUtil.java

Content: 

static Environment env(){

  if (env != null) {

    return env;

  }

  try {

    env=new Environment();

  }

 catch (  IOException io) {

    io.printStackTrace();

  }

  return env;

}

Location: StreamUtil.java

Content: 

public static String findInClasspath(String className){

  return findInClasspath(className,StreamUtil.class.getClassLoader());

}

Location: StreamUtil.java

Content: 

/** 

 * @return a jar file path or a base directory or null if not found.

 */

public static String findInClasspath(String className,ClassLoader loader){

  String relPath=className;

  relPath=relPath.replace('.','/');

  relPath+=".class";

  java.net.URL classUrl=loader.getResource(relPath);

  String codePath;

  if (classUrl != null) {

    boolean inJar=classUrl.getProtocol().equals("jar");

    codePath=classUrl.toString();

    if (codePath.startsWith("jar:")) {

      codePath=codePath.substring("jar:".length());

    }

    if (codePath.startsWith("file:")) {

      codePath=codePath.substring("file:".length());

    }

    if (inJar) {

      int bang=codePath.lastIndexOf('!');

      codePath=codePath.substring(0,bang);

    }

 else {

      int pos=codePath.lastIndexOf(relPath);

      if (pos == -1) {

        throw new IllegalArgumentException("invalid codePath: className=" + className + " codePath="+ codePath);

      }

      codePath=codePath.substring(0,pos);

    }

  }

 else {

    codePath=null;

  }

  return codePath;

}

Location: StreamUtil.java

Content: 

/** 

 * It may seem strange to silently switch behaviour when a String is not a classname; the reason is simplified Usage:<pre> -mapper [classname | program ] instead of the explicit Usage: [-mapper program | -javamapper classname], -mapper and -javamapper are mutually exclusive. (repeat for -reducer, -combiner) </pre>

 */

public static Class goodClassOrNull(Configuration conf,String className,String defaultPackage){

  Class clazz=null;

  try {

    clazz=conf.getClassByName(className);

  }

 catch (  ClassNotFoundException cnf) {

  }

  if (clazz == null) {

    if (className.indexOf('.') == -1 && defaultPackage != null) {

      className=defaultPackage + "." + className;

      try {

        clazz=conf.getClassByName(className);

      }

 catch (      ClassNotFoundException cnf) {

      }

    }

  }

  return clazz;

}

Location: StreamUtil.java

Content: 

public static boolean isLocalJobTracker(JobConf job){

  return job.get(JTConfig.JT_IPC_ADDRESS,"local").equals("local");

}

Location: StreamUtil.java

Content: 

static String qualifyHost(String url){

  try {

    return qualifyHost(new URL(url)).toString();

  }

 catch (  IOException io) {

    return url;

  }

}

Location: StreamUtil.java

Content: 

static URL qualifyHost(URL url){

  try {

    InetAddress a=InetAddress.getByName(url.getHost());

    String qualHost=a.getCanonicalHostName();

    URL q=new URL(url.getProtocol(),qualHost,url.getPort(),url.getFile());

    return q;

  }

 catch (  IOException io) {

    return url;

  }

}

