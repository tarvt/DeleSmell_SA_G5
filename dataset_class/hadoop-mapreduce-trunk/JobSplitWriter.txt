Location: JobSplitWriter.java

Content: 

private static FSDataOutputStream createFile(FileSystem fs,Path splitFile,Configuration job) throws IOException {

  FSDataOutputStream out=FileSystem.create(fs,splitFile,new FsPermission(JobSubmissionFiles.JOB_FILE_PERMISSION));

  int replication=job.getInt(Job.SUBMIT_REPLICATION,10);

  fs.setReplication(splitFile,(short)replication);

  writeSplitHeader(out);

  return out;

}

Location: JobSplitWriter.java

Content: 

@SuppressWarnings("unchecked") public static <T extends InputSplit>void createSplitFiles(Path jobSubmitDir,Configuration conf,FileSystem fs,List<InputSplit> splits) throws IOException, InterruptedException {

  T[] array=(T[])splits.toArray(new InputSplit[splits.size()]);

  createSplitFiles(jobSubmitDir,conf,fs,array);

}

Location: JobSplitWriter.java

Content: 

public static void createSplitFiles(Path jobSubmitDir,Configuration conf,FileSystem fs,org.apache.hadoop.mapred.InputSplit[] splits) throws IOException {

  FSDataOutputStream out=createFile(fs,JobSubmissionFiles.getJobSplitFile(jobSubmitDir),conf);

  SplitMetaInfo[] info=writeOldSplits(splits,out);

  out.close();

  writeJobSplitMetaInfo(fs,JobSubmissionFiles.getJobSplitMetaFile(jobSubmitDir),new FsPermission(JobSubmissionFiles.JOB_FILE_PERMISSION),splitVersion,info);

}

Location: JobSplitWriter.java

Content: 

public static <T extends InputSplit>void createSplitFiles(Path jobSubmitDir,Configuration conf,FileSystem fs,T[] splits) throws IOException, InterruptedException {

  FSDataOutputStream out=createFile(fs,JobSubmissionFiles.getJobSplitFile(jobSubmitDir),conf);

  SplitMetaInfo[] info=writeNewSplits(conf,splits,out);

  out.close();

  writeJobSplitMetaInfo(fs,JobSubmissionFiles.getJobSplitMetaFile(jobSubmitDir),new FsPermission(JobSubmissionFiles.JOB_FILE_PERMISSION),splitVersion,info);

}

Location: JobSplitWriter.java

Content: 

private static void writeJobSplitMetaInfo(FileSystem fs,Path filename,FsPermission p,int splitMetaInfoVersion,JobSplit.SplitMetaInfo[] allSplitMetaInfo) throws IOException {

  FSDataOutputStream out=FileSystem.create(fs,filename,p);

  out.write(JobSplit.META_SPLIT_FILE_HEADER);

  WritableUtils.writeVInt(out,splitMetaInfoVersion);

  WritableUtils.writeVInt(out,allSplitMetaInfo.length);

  for (  JobSplit.SplitMetaInfo splitMetaInfo : allSplitMetaInfo) {

    splitMetaInfo.write(out);

  }

  out.close();

}

Location: JobSplitWriter.java

Content: 

@SuppressWarnings("unchecked") private static <T extends InputSplit>SplitMetaInfo[] writeNewSplits(Configuration conf,T[] array,FSDataOutputStream out) throws IOException, InterruptedException {

  SplitMetaInfo[] info=new SplitMetaInfo[array.length];

  if (array.length != 0) {

    SerializationFactory factory=new SerializationFactory(conf);

    int i=0;

    long offset=out.size();

    for (    T split : array) {

      int prevCount=out.size();

      Text.writeString(out,split.getClass().getName());

      Serializer<T> serializer=factory.getSerializer((Class<T>)split.getClass());

      serializer.open(out);

      serializer.serialize(split);

      int currCount=out.size();

      info[i++]=new JobSplit.SplitMetaInfo(split.getLocations(),offset,split.getLength());

      offset+=currCount - prevCount;

    }

  }

  return info;

}

Location: JobSplitWriter.java

Content: 

private static SplitMetaInfo[] writeOldSplits(org.apache.hadoop.mapred.InputSplit[] splits,FSDataOutputStream out) throws IOException {

  SplitMetaInfo[] info=new SplitMetaInfo[splits.length];

  if (splits.length != 0) {

    int i=0;

    long offset=out.size();

    for (    org.apache.hadoop.mapred.InputSplit split : splits) {

      int prevLen=out.size();

      Text.writeString(out,split.getClass().getName());

      split.write(out);

      int currLen=out.size();

      info[i++]=new JobSplit.SplitMetaInfo(split.getLocations(),offset,split.getLength());

      offset+=currLen - prevLen;

    }

  }

  return info;

}

Location: JobSplitWriter.java

Content: 

private static void writeSplitHeader(FSDataOutputStream out) throws IOException {

  out.write(SPLIT_FILE_HEADER);

  out.writeInt(splitVersion);

}

