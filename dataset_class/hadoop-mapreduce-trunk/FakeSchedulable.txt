Location: FakeSchedulable.java

Content: 

@Override public Task assignTask(TaskTrackerStatus tts,long currentTime,Collection<JobInProgress> visited) throws IOException {

  return null;

}

Location: FakeSchedulable.java

Content: 

public FakeSchedulable(){

  this(0,0,1,0,0,JobPriority.NORMAL,0);

}

Location: FakeSchedulable.java

Content: 

public FakeSchedulable(int demand){

  this(demand,0,1,0,0,JobPriority.NORMAL,0);

}

Location: FakeSchedulable.java

Content: 

public FakeSchedulable(int demand,int minShare){

  this(demand,minShare,1,0,0,JobPriority.NORMAL,0);

}

Location: FakeSchedulable.java

Content: 

public FakeSchedulable(int demand,int minShare,double weight){

  this(demand,minShare,weight,0,0,JobPriority.NORMAL,0);

}

Location: FakeSchedulable.java

Content: 

public FakeSchedulable(int demand,int minShare,double weight,int fairShare,int runningTasks,JobPriority priority,long startTime){

  this.demand=demand;

  this.minShare=minShare;

  this.weight=weight;

  setFairShare(fairShare);

  this.runningTasks=runningTasks;

  this.priority=priority;

  this.startTime=startTime;

}

Location: FakeSchedulable.java

Content: 

@Override public int getDemand(){

  return demand;

}

Location: FakeSchedulable.java

Content: 

@Override public int getMinShare(){

  return minShare;

}

Location: FakeSchedulable.java

Content: 

@Override public int getRunningTasks(){

  return runningTasks;

}

Location: FakeSchedulable.java

Content: 

@Override public void redistributeShare(){

}

Location: FakeSchedulable.java

Content: 

@Override public void updateDemand(){

}

