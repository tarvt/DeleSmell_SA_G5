Location: FakeConcurrentHashMap.java

Content: 

@Override public boolean containsKey(Object key){

  return map.containsKey(key);

}

Location: FakeConcurrentHashMap.java

Content: 

@Override public boolean containsValue(Object value){

  return map.containsValue(value);

}

Location: FakeConcurrentHashMap.java

Content: 

@Override public Set<Map.Entry<K,V>> entrySet(){

  return map.entrySet();

}

Location: FakeConcurrentHashMap.java

Content: 

public FakeConcurrentHashMap(){

  map=new LinkedHashMap<K,V>();

}

Location: FakeConcurrentHashMap.java

Content: 

@Override public V get(Object key){

  return map.get(key);

}

Location: FakeConcurrentHashMap.java

Content: 

@Override public boolean isEmpty(){

  return map.isEmpty();

}

Location: FakeConcurrentHashMap.java

Content: 

@Override public Set<K> keySet(){

  return map.keySet();

}

Location: FakeConcurrentHashMap.java

Content: 

@Override public void putAll(Map<? extends K,? extends V> t){

  map.putAll(t);

}

Location: FakeConcurrentHashMap.java

Content: 

@Override public V putIfAbsent(K key,V value){

  if (!containsKey(key)) {

    return put(key,value);

  }

 else {

    return get(key);

  }

}

Location: FakeConcurrentHashMap.java

Content: 

@Override public V put(K key,V value){

  return map.put(key,value);

}

Location: FakeConcurrentHashMap.java

Content: 

@Override public V remove(Object key){

  return map.remove(key);

}

Location: FakeConcurrentHashMap.java

Content: 

@Override public boolean remove(Object key,Object value){

  if (!containsKey(key))   return false;

  Object oldValue=get(key);

  if ((oldValue == null) ? value == null : oldValue.equals(value)) {

    remove(key);

    return true;

  }

  return false;

}

Location: FakeConcurrentHashMap.java

Content: 

@Override public V replace(K key,V value){

  if (containsKey(key)) {

    return put(key,value);

  }

 else {

    return null;

  }

}

Location: FakeConcurrentHashMap.java

Content: 

@Override public boolean replace(K key,V oldValue,V newValue){

  if (!containsKey(key))   return false;

  Object origValue=get(key);

  if ((origValue == null) ? oldValue == null : origValue.equals(oldValue)) {

    put(key,newValue);

    return true;

  }

  return false;

}

Location: FakeConcurrentHashMap.java

Content: 

@Override public Collection<V> values(){

  return map.values();

}

