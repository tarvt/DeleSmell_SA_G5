Location: MRCaching.java

Content: 

public static TestResult launchMRCache(String indir,String outdir,String cacheDir,JobConf conf,String input) throws IOException {

  setupCache(cacheDir,FileSystem.get(conf));

  return launchMRCache(indir,outdir,cacheDir,conf,input,false);

}

Location: MRCaching.java

Content: 

public static TestResult launchMRCache(String indir,String outdir,String cacheDir,JobConf conf,String input,boolean withSymlink) throws IOException {

  String TEST_ROOT_DIR=new Path(System.getProperty("test.build.data","/tmp")).toString().replace(' ','+');

  conf.set("test.build.data",TEST_ROOT_DIR);

  final Path inDir=new Path(indir);

  final Path outDir=new Path(outdir);

  FileSystem fs=FileSystem.get(conf);

  fs.delete(outDir,true);

  if (!fs.mkdirs(inDir)) {

    throw new IOException("Mkdirs failed to create " + inDir.toString());

  }

{

    System.out.println("HERE:" + inDir);

    DataOutputStream file=fs.create(new Path(inDir,"part-0"));

    file.writeBytes(input);

    file.close();

  }

  conf.setJobName("cachetest");

  conf.setOutputKeyClass(Text.class);

  conf.setOutputValueClass(IntWritable.class);

  conf.setCombinerClass(MRCaching.ReduceClass.class);

  conf.setReducerClass(MRCaching.ReduceClass.class);

  FileInputFormat.setInputPaths(conf,inDir);

  FileOutputFormat.setOutputPath(conf,outDir);

  conf.setNumMapTasks(1);

  conf.setNumReduceTasks(1);

  conf.setSpeculativeExecution(false);

  URI[] uris=new URI[6];

  if (!withSymlink) {

    conf.setMapperClass(MRCaching.MapClass.class);

    uris[0]=fs.getUri().resolve(cacheDir + "/test.txt");

    uris[1]=fs.getUri().resolve(cacheDir + "/test.jar");

    uris[2]=fs.getUri().resolve(cacheDir + "/test.zip");

    uris[3]=fs.getUri().resolve(cacheDir + "/test.tgz");

    uris[4]=fs.getUri().resolve(cacheDir + "/test.tar.gz");

    uris[5]=fs.getUri().resolve(cacheDir + "/test.tar");

  }

 else {

    DistributedCache.createSymlink(conf);

    conf.setMapperClass(MRCaching.MapClass2.class);

    uris[0]=fs.getUri().resolve(cacheDir + "/test.txt#" + "test.txt");

    uris[1]=fs.getUri().resolve(cacheDir + "/test.jar#" + "testjar");

    uris[2]=fs.getUri().resolve(cacheDir + "/test.zip#" + "testzip");

    uris[3]=fs.getUri().resolve(cacheDir + "/test.tgz#" + "testtgz");

    uris[4]=fs.getUri().resolve(cacheDir + "/test.tar.gz#" + "testtargz");

    uris[5]=fs.getUri().resolve(cacheDir + "/test.tar#" + "testtar");

  }

  DistributedCache.addCacheFile(uris[0],conf);

  long[] fileSizes=new long[1];

  fileSizes[0]=fs.getFileStatus(new Path(uris[0].getPath())).getLen();

  long[] archiveSizes=new long[5];

  for (int i=1; i < 6; i++) {

    DistributedCache.addCacheArchive(uris[i],conf);

    archiveSizes[i - 1]=fs.getFileStatus(new Path(uris[i].getPath())).getLen();

  }

  RunningJob job=JobClient.runJob(conf);

  int count=0;

  Path result=new Path(TEST_ROOT_DIR + "/test.txt");

{

    BufferedReader file=new BufferedReader(new InputStreamReader(FileSystem.getLocal(conf).open(result)));

    String line=file.readLine();

    while (line != null) {

      if (!testStr.equals(line))       return new TestResult(job,false);

      count++;

      line=file.readLine();

    }

    file.close();

  }

  if (count != 6)   return new TestResult(job,false);

  validateCacheFileSizes(job.getConfiguration(),fileSizes,MRJobConfig.CACHE_FILES_SIZES);

  validateCacheFileSizes(job.getConfiguration(),archiveSizes,MRJobConfig.CACHE_ARCHIVES_SIZES);

  return new TestResult(job,true);

}

Location: MRCaching.java

Content: 

static void setupCache(String cacheDir,FileSystem fs) throws IOException {

  Path localPath=new Path("build/test/cache");

  Path txtPath=new Path(localPath,new Path("test.txt"));

  Path jarPath=new Path(localPath,new Path("test.jar"));

  Path zipPath=new Path(localPath,new Path("test.zip"));

  Path tarPath=new Path(localPath,new Path("test.tgz"));

  Path tarPath1=new Path(localPath,new Path("test.tar.gz"));

  Path tarPath2=new Path(localPath,new Path("test.tar"));

  Path cachePath=new Path(cacheDir);

  fs.delete(cachePath,true);

  if (!fs.mkdirs(cachePath)) {

    throw new IOException("Mkdirs failed to create " + cachePath.toString());

  }

  fs.copyFromLocalFile(txtPath,cachePath);

  fs.copyFromLocalFile(jarPath,cachePath);

  fs.copyFromLocalFile(zipPath,cachePath);

  fs.copyFromLocalFile(tarPath,cachePath);

  fs.copyFromLocalFile(tarPath1,cachePath);

  fs.copyFromLocalFile(tarPath2,cachePath);

}

Location: MRCaching.java

Content: 

private static void validateCacheFileSizes(Configuration job,long[] expectedSizes,String configKey) throws IOException {

  String configValues=job.get(configKey,"");

  System.out.println(configKey + " -> " + configValues);

  String[] realSizes=StringUtils.getStrings(configValues);

  Assert.assertEquals("Number of files for " + configKey,expectedSizes.length,realSizes.length);

  for (int i=0; i < expectedSizes.length; ++i) {

    long actual=Long.valueOf(realSizes[i]);

    long expected=expectedSizes[i];

    Assert.assertEquals("File " + i + " for "+ configKey,expected,actual);

  }

}

