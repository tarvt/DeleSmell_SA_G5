Location: TestVertica.java

Content: 

public Job getVerticaJob() throws IOException {

  Configuration conf=new Configuration(true);

  Cluster cluster=new Cluster(conf);

  Job job=Job.getInstance(cluster);

  job.setJarByClass(VerticaTestMR.class);

  VerticaConfiguration.configureVertica(job.getConfiguration(),new String[]{AllTests.getHostname()},AllTests.getDatabase(),AllTests.getUsername(),AllTests.getPassword());

  return job;

}

Location: TestVertica.java

Content: 

public VerticaInputSplit getVerticaSplit(boolean fake) throws Exception {

  List<Object> segment_params=new ArrayList<Object>();

  long start=0;

  long end=0;

  String input_query="SELECT value FROM mrsource WHERE key = ?";

  segment_params.add(3);

  if (fake) {

    segment_params.add(Calendar.getInstance().getTime());

    segment_params.add("foobar");

    start=5;

    end=10;

  }

  VerticaInputSplit input=new VerticaInputSplit(input_query,segment_params,start,end);

  input.configure(getVerticaJob().getConfiguration());

  return input;

}

Location: TestVertica.java

Content: 

private String recordTest(List<Integer> types,List<Object> values,DataOutputBuffer out,DataInputBuffer in,boolean date_string) throws IOException {

  VerticaRecord record=new VerticaRecord(null,types,values,date_string);

  record.write(out);

  in.reset(out.getData(),out.getLength());

  List<Object> new_values=new ArrayList<Object>();

  record=new VerticaRecord(null,types,new_values,date_string);

  record.readFields(in);

  for (int i=0; i < values.size(); i++)   if (values.get(i) == null)   assertSame("Vertica Record serialized value " + i + " is null",values.get(i),new_values.get(i));

 else   if (values.get(i).getClass().isArray()) {

    Object a=values.get(i);

    Object b=new_values.get(i);

    for (int j=0; j < Array.getLength(a); j++)     assertEquals("Vertica Record serialized value " + i + "["+ j+ "] does not match",Array.get(a,j),Array.get(b,j));

  }

 else {

    assertEquals("Vertica Record serialized value " + i + " does not match",values.get(i),new_values.get(i));

  }

  return record.toSQLString();

}

Location: TestVertica.java

Content: 

public void testVerticaInput() throws IOException {

  if (!AllTests.isSetup()) {

    return;

  }

  String input_query1="SELECT value FROM mrsource";

  String input_query2="SELECT value FROM mrsource WHERE key = ?";

  String segment_query="SELECT y FROM bar";

  List<List<Object>> segment_params=new ArrayList<List<Object>>();

  for (int i=0; i < 4; i++) {

    ArrayList<Object> params=new ArrayList<Object>();

    params.add(i);

    segment_params.add(params);

  }

  Job job=getVerticaJob();

  VerticaInputFormat.setInput(job,input_query1);

  validateInput(job);

  job=getVerticaJob();

  VerticaInputFormat.setInput(job,input_query2,segment_query);

  validateInput(job);

  VerticaInputFormat.setInput(job,input_query2,segment_params);

  validateInput(job);

}

Location: TestVertica.java

Content: 

public void testVerticaOutput() throws Exception {

  if (!AllTests.isSetup()) {

    return;

  }

  VerticaOutputFormat output=new VerticaOutputFormat();

  Job job=getVerticaJob();

  VerticaOutputFormat.setOutput(job,"mrtarget",true,"a int","b boolean","c char(1)","d date","f float","t timestamp","v varchar","z varbinary");

  output.checkOutputSpecs(job,true);

  TaskAttemptContext context=new TaskAttemptContextImpl(job.getConfiguration(),new TaskAttemptID());

  VerticaRecordWriter writer=(VerticaRecordWriter)output.getRecordWriter(context);

  Text table=new Text();

  table.set("mrtarget");

  VerticaRecord record=VerticaOutputFormat.getValue(job.getConfiguration());

  record.set(0,125,true);

  record.set(1,true,true);

  record.set(2,'c',true);

  record.set(3,Calendar.getInstance().getTime(),true);

  record.set(4,234.526,true);

  record.set(5,Calendar.getInstance().getTime(),true);

  record.set(6,"foobar string",true);

  record.set(7,new byte[10],true);

  writer.write(table,record);

  writer.close(null);

}

Location: TestVertica.java

Content: 

public void testVerticaReader() throws Exception {

  if (!AllTests.isSetup()) {

    return;

  }

  VerticaInputSplit input=getVerticaSplit(false);

  VerticaRecordReader reader=new VerticaRecordReader(input,input.getConfiguration());

  TaskAttemptContext context=new TaskAttemptContextImpl(input.getConfiguration(),new TaskAttemptID());

  reader.initialize(input,context);

  boolean hasValue=reader.nextKeyValue();

  assertEquals("There should be a record in the database",hasValue,true);

  LongWritable key=reader.getCurrentKey();

  VerticaRecord value=reader.getCurrentValue();

  assertEquals("Key should be 1 for first record",key.get(),1);

  assertEquals("Result type should be VARCHAR",((Integer)value.getTypes().get(0)).intValue(),Types.VARCHAR);

  assertEquals("Result value should be three",value.getValues().get(0),"three");

  reader.close();

}

Location: TestVertica.java

Content: 

public void testVerticaRecord() throws ParseException, IOException {

  if (!AllTests.isSetup()) {

    return;

  }

  List<Integer> types=new ArrayList<Integer>();

  List<Object> values=new ArrayList<Object>();

  DataOutputBuffer out=new DataOutputBuffer();

  DataInputBuffer in=new DataInputBuffer();

  DateFormat datefmt=new SimpleDateFormat("yyyy-MM-dd");

  DateFormat timefmt=new SimpleDateFormat("HH:mm:ss");

  DateFormat tmstmpfmt=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

  types.add(Types.BIGINT);

  values.add(209348039485345L);

  types.add(Types.INTEGER);

  values.add(2342345);

  types.add(Types.TINYINT);

  values.add((short)564);

  types.add(Types.SMALLINT);

  values.add((short)4);

  types.add(Types.REAL);

  values.add(new BigDecimal(15234342345.532637));

  types.add(Types.DECIMAL);

  values.add(new BigDecimal(346223093.4256));

  types.add(Types.NUMERIC);

  values.add(new BigDecimal(209232301132.4203));

  types.add(Types.DOUBLE);

  values.add(934029342.234);

  types.add(Types.FLOAT);

  values.add((float)62304.235);

  types.add(Types.BINARY);

  values.add(new byte[10]);

  types.add(Types.LONGVARBINARY);

  values.add(new byte[10]);

  types.add(Types.VARBINARY);

  values.add(new byte[10]);

  types.add(Types.BOOLEAN);

  values.add(new Boolean(true));

  types.add(Types.CHAR);

  values.add('x');

  types.add(Types.LONGNVARCHAR);

  values.add("2ialnnnnsfm9.3;olainlekf nasl f'\\4\r\n");

  types.add(Types.LONGVARCHAR);

  values.add("3jflin4f'\\4\r\n'");

  types.add(Types.NCHAR);

  values.add("jf|ls4\\4\r\nf44sf");

  types.add(Types.VARCHAR);

  values.add("4filjsf!@#$^&)*()");

  types.add(Types.DATE);

  values.add(new Date(datefmt.parse("2009-06-07").getTime()));

  types.add(Types.TIME);

  values.add(new Time(timefmt.parse("16:17:18.90").getTime()));

  types.add(Types.TIMESTAMP);

  values.add(new Timestamp(tmstmpfmt.parse("2007-08-09 6:07:05.06").getTime()));

  types.add(Types.BIGINT);

  values.add(null);

  types.add(Types.INTEGER);

  values.add(null);

  types.add(Types.TINYINT);

  values.add(null);

  types.add(Types.SMALLINT);

  values.add(null);

  types.add(Types.REAL);

  values.add(null);

  types.add(Types.DECIMAL);

  values.add(null);

  types.add(Types.NUMERIC);

  values.add(null);

  types.add(Types.DOUBLE);

  values.add(null);

  types.add(Types.FLOAT);

  values.add(null);

  types.add(Types.BINARY);

  values.add(null);

  types.add(Types.LONGVARBINARY);

  values.add(null);

  types.add(Types.VARBINARY);

  values.add(null);

  types.add(Types.BOOLEAN);

  values.add(null);

  types.add(Types.CHAR);

  values.add(null);

  types.add(Types.LONGNVARCHAR);

  values.add(null);

  types.add(Types.LONGVARCHAR);

  values.add(null);

  types.add(Types.NCHAR);

  values.add(null);

  types.add(Types.VARCHAR);

  values.add(null);

  types.add(Types.DATE);

  values.add(null);

  types.add(Types.TIME);

  values.add(null);

  types.add(Types.TIMESTAMP);

  values.add(null);

  String sql1=null;

  sql1=recordTest(types,values,out,in,true);

  out=new DataOutputBuffer();

  in=new DataInputBuffer();

  String sql2=null;

  sql2=recordTest(types,values,out,in,true);

  assertEquals("SQL Serialization test failed",sql1,sql2);

}

Location: TestVertica.java

Content: 

public void testVerticaSplit() throws Exception {

  if (!AllTests.isSetup()) {

    return;

  }

  VerticaInputSplit input=getVerticaSplit(true);

  VerticaInputSplit rem_input=new VerticaInputSplit();

  DataOutputBuffer out=new DataOutputBuffer();

  DataInputBuffer in=new DataInputBuffer();

  input.write(out);

  in.reset(out.getData(),out.getLength());

  rem_input.readFields(in);

  assertEquals("Serialized segment params do not match",rem_input.getSegmentParams(),input.getSegmentParams());

  assertEquals("Serialized start does not match",rem_input.getStart(),input.getStart());

  assertEquals("Serialized length does not match",rem_input.getLength(),input.getLength());

}

Location: TestVertica.java

Content: 

public TestVertica(String name){

  super(name);

}

Location: TestVertica.java

Content: 

public void validateInput(Job job) throws IOException {

  VerticaInputFormat input=new VerticaInputFormat();

  List<InputSplit> splits=null;

  Configuration conf=job.getConfiguration();

  conf.setInt("mapreduce.job.maps",1);

  JobContext context=new JobContextImpl(conf,new JobID());

  splits=input.getSplits(context);

  assert splits.size() == 1;

  conf.setInt("mapreduce.job.maps",3);

  splits=input.getSplits(context);

  assert splits.size() == 3;

  conf.setInt("mapreduce.job.maps",10);

  splits=input.getSplits(context);

  assert splits.size() == 10;

}

