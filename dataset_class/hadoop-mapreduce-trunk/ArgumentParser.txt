Location: ArgumentParser.java

Content: 

ArgumentParser(String[] args){

  optList=getOptions();

  if (args == null) {

    args=new String[]{};

  }

  argumentList=args;

  parsed=null;

}

Location: ArgumentParser.java

Content: 

private Options getOptionList(){

  return optList;

}

Location: ArgumentParser.java

Content: 

/** 

 * @return the option set to be used in command line parsing

 */

private Options getOptions(){

  Options cliopt=new Options();

  cliopt.addOption(ConfigOption.MAPS);

  cliopt.addOption(ConfigOption.REDUCES);

  cliopt.addOption(ConfigOption.PACKET_SIZE);

  cliopt.addOption(ConfigOption.OPS);

  cliopt.addOption(ConfigOption.DURATION);

  cliopt.addOption(ConfigOption.EXIT_ON_ERROR);

  cliopt.addOption(ConfigOption.SLEEP_TIME);

  cliopt.addOption(ConfigOption.FILES);

  cliopt.addOption(ConfigOption.DIR_SIZE);

  cliopt.addOption(ConfigOption.BASE_DIR);

  cliopt.addOption(ConfigOption.RESULT_FILE);

  cliopt.addOption(ConfigOption.CLEANUP);

{

    String distStrs[]=new String[Distribution.values().length];

    Distribution distValues[]=Distribution.values();

    for (int i=0; i < distValues.length; ++i) {

      distStrs[i]=distValues[i].lowerName();

    }

    String opdesc=String.format(Constants.OP_DESCR,StringUtils.arrayToString(distStrs));

    for (    OperationType type : OperationType.values()) {

      String opname=type.lowerName();

      cliopt.addOption(new Option(opname,true,opdesc));

    }

  }

  cliopt.addOption(ConfigOption.REPLICATION_AM);

  cliopt.addOption(ConfigOption.BLOCK_SIZE);

  cliopt.addOption(ConfigOption.READ_SIZE);

  cliopt.addOption(ConfigOption.WRITE_SIZE);

  cliopt.addOption(ConfigOption.APPEND_SIZE);

  cliopt.addOption(ConfigOption.RANDOM_SEED);

  cliopt.addOption(ConfigOption.QUEUE_NAME);

  cliopt.addOption(ConfigOption.HELP);

  return cliopt;

}

Location: ArgumentParser.java

Content: 

/** 

 * Parses the command line options

 * @return false if need to print help output

 * @throws Exception when parsing fails

 */

ParsedOutput parse() throws Exception {

  if (parsed == null) {

    PosixParser parser=new PosixParser();

    CommandLine popts=parser.parse(getOptionList(),argumentList,true);

    if (popts.hasOption(ConfigOption.HELP.getOpt())) {

      parsed=new ParsedOutput(null,this,true);

    }

 else {

      parsed=new ParsedOutput(popts,this,false);

    }

  }

  return parsed;

}

