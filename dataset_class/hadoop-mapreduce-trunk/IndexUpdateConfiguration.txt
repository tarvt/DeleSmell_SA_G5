Location: IndexUpdateConfiguration.java

Content: 

/** 

 * Get the distribution policy class.

 * @return the distribution policy class

 */

public Class<? extends IDistributionPolicy> getDistributionPolicyClass(){

  return conf.getClass("sea.distribution.policy",HashingDistributionPolicy.class,IDistributionPolicy.class);

}

Location: IndexUpdateConfiguration.java

Content: 

/** 

 * Get the analyzer class.

 * @return the analyzer class

 */

public Class<? extends Analyzer> getDocumentAnalyzerClass(){

  return conf.getClass("sea.document.analyzer",StandardAnalyzer.class,Analyzer.class);

}

Location: IndexUpdateConfiguration.java

Content: 

/** 

 * Get the index input format class.

 * @return the index input format class

 */

public Class<? extends InputFormat> getIndexInputFormatClass(){

  return conf.getClass("sea.input.format",LineDocInputFormat.class,InputFormat.class);

}

Location: IndexUpdateConfiguration.java

Content: 

/** 

 * Get the max field length for a Lucene instance.

 * @return the max field length for a Lucene instance

 */

public int getIndexMaxFieldLength(){

  return conf.getInt("sea.max.field.length",-1);

}

Location: IndexUpdateConfiguration.java

Content: 

/** 

 * Get the max number of segments for a Lucene instance.

 * @return the max number of segments for a Lucene instance

 */

public int getIndexMaxNumSegments(){

  return conf.getInt("sea.max.num.segments",-1);

}

Location: IndexUpdateConfiguration.java

Content: 

/** 

 * Get the string representation of a number of shards.

 * @return the string representation of a number of shards

 */

public String getIndexShards(){

  return conf.get("sea.index.shards");

}

Location: IndexUpdateConfiguration.java

Content: 

/** 

 * Get the index updater class.

 * @return the index updater class

 */

public Class<? extends IIndexUpdater> getIndexUpdaterClass(){

  return conf.getClass("sea.index.updater",IndexUpdater.class,IIndexUpdater.class);

}

Location: IndexUpdateConfiguration.java

Content: 

/** 

 * Check whether to use the compound file format for a Lucene instance.

 * @return true if using the compound file format for a Lucene instance

 */

public boolean getIndexUseCompoundFile(){

  return conf.getBoolean("sea.use.compound.file",false);

}

Location: IndexUpdateConfiguration.java

Content: 

/** 

 * Get the IO sort space in MB.

 * @return the IO sort space in MB

 */

public int getIOSortMB(){

  return conf.getInt(MRJobConfig.IO_SORT_MB,100);

}

Location: IndexUpdateConfiguration.java

Content: 

/** 

 * Get the local analysis class.

 * @return the local analysis class

 */

public Class<? extends ILocalAnalysis> getLocalAnalysisClass(){

  return conf.getClass("sea.local.analysis",LineDocLocalAnalysis.class,ILocalAnalysis.class);

}

Location: IndexUpdateConfiguration.java

Content: 

/** 

 * Get the Map/Reduce temp directory.

 * @return the Map/Reduce temp directory

 */

public String getMapredTempDir(){

  return conf.get(MRConfig.TEMP_DIR);

}

Location: IndexUpdateConfiguration.java

Content: 

/** 

 * Get the max ram index size in bytes. The default is 50M.

 * @return the max ram index size in bytes

 */

public long getMaxRAMSizeInBytes(){

  return conf.getLong("sea.max.ramsize.bytes",50L << 20);

}

Location: IndexUpdateConfiguration.java

Content: 

/** 

 * Constructor

 * @param conf

 */

public IndexUpdateConfiguration(Configuration conf){

  this.conf=conf;

}

Location: IndexUpdateConfiguration.java

Content: 

/** 

 * Set the distribution policy class.

 * @param theClass  the distribution policy class

 */

public void setDistributionPolicyClass(Class<? extends IDistributionPolicy> theClass){

  conf.setClass("sea.distribution.policy",theClass,IDistributionPolicy.class);

}

Location: IndexUpdateConfiguration.java

Content: 

/** 

 * Set the analyzer class.

 * @param theClass  the analyzer class

 */

public void setDocumentAnalyzerClass(Class<? extends Analyzer> theClass){

  conf.setClass("sea.document.analyzer",theClass,Analyzer.class);

}

Location: IndexUpdateConfiguration.java

Content: 

/** 

 * Set the index input format class.

 * @param theClass  the index input format class

 */

public void setIndexInputFormatClass(Class<? extends InputFormat> theClass){

  conf.setClass("sea.input.format",theClass,InputFormat.class);

}

Location: IndexUpdateConfiguration.java

Content: 

/** 

 * Set the max field length for a Lucene instance.

 * @param maxFieldLength  the max field length for a Lucene instance

 */

public void setIndexMaxFieldLength(int maxFieldLength){

  conf.setInt("sea.max.field.length",maxFieldLength);

}

Location: IndexUpdateConfiguration.java

Content: 

/** 

 * Set the max number of segments for a Lucene instance.

 * @param maxNumSegments  the max number of segments for a Lucene instance

 */

public void setIndexMaxNumSegments(int maxNumSegments){

  conf.setInt("sea.max.num.segments",maxNumSegments);

}

Location: IndexUpdateConfiguration.java

Content: 

/** 

 * Set the string representation of a number of shards.

 * @param shards  the string representation of a number of shards

 */

public void setIndexShards(String shards){

  conf.set("sea.index.shards",shards);

}

Location: IndexUpdateConfiguration.java

Content: 

/** 

 * Set the index updater class.

 * @param theClass  the index updater class

 */

public void setIndexUpdaterClass(Class<? extends IIndexUpdater> theClass){

  conf.setClass("sea.index.updater",theClass,IIndexUpdater.class);

}

Location: IndexUpdateConfiguration.java

Content: 

/** 

 * Set whether use the compound file format for a Lucene instance.

 * @param useCompoundFile  whether to use the compound file format

 */

public void setIndexUseCompoundFile(boolean useCompoundFile){

  conf.setBoolean("sea.use.compound.file",useCompoundFile);

}

Location: IndexUpdateConfiguration.java

Content: 

/** 

 * Set the IO sort space in MB.

 * @param mb  the IO sort space in MB

 */

public void setIOSortMB(int mb){

  conf.setInt(MRJobConfig.IO_SORT_MB,mb);

}

Location: IndexUpdateConfiguration.java

Content: 

/** 

 * Set the local analysis class.

 * @param theClass  the local analysis class

 */

public void setLocalAnalysisClass(Class<? extends ILocalAnalysis> theClass){

  conf.setClass("sea.local.analysis",theClass,ILocalAnalysis.class);

}

Location: IndexUpdateConfiguration.java

Content: 

/** 

 * Set the max ram index size in bytes.

 * @param b  the max ram index size in bytes

 */

public void setMaxRAMSizeInBytes(long b){

  conf.setLong("sea.max.ramsize.bytes",b);

}

