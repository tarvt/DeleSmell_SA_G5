Location: DBConfiguration.java

Content: 

/** 

 * Sets the DB access related fields in the JobConf.  

 * @param job the job

 * @param driverClass JDBC Driver class name

 * @param dbUrl JDBC DB access URL. 

 */

public static void configureDB(Configuration job,String driverClass,String dbUrl){

  configureDB(job,driverClass,dbUrl,null,null);

}

Location: DBConfiguration.java

Content: 

/** 

 * Sets the DB access related fields in the  {@link Configuration}.  

 * @param conf the configuration

 * @param driverClass JDBC Driver class name

 * @param dbUrl JDBC DB access URL. 

 * @param userName DB access username 

 * @param passwd DB access passwd

 */

public static void configureDB(Configuration conf,String driverClass,String dbUrl,String userName,String passwd){

  conf.set(DRIVER_CLASS_PROPERTY,driverClass);

  conf.set(URL_PROPERTY,dbUrl);

  if (userName != null) {

    conf.set(USERNAME_PROPERTY,userName);

  }

  if (passwd != null) {

    conf.set(PASSWORD_PROPERTY,passwd);

  }

}

Location: DBConfiguration.java

Content: 

/** 

 * Sets the DB access related fields in the JobConf.  

 * @param job the job

 * @param driverClass JDBC Driver class name

 * @param dbUrl JDBC DB access URL. 

 */

public static void configureDB(JobConf job,String driverClass,String dbUrl){

  configureDB(job,driverClass,dbUrl,null,null);

}

Location: DBConfiguration.java

Content: 

/** 

 * Sets the DB access related fields in the JobConf.  

 * @param job the job

 * @param driverClass JDBC Driver class name

 * @param dbUrl JDBC DB access URL. 

 * @param userName DB access username 

 * @param passwd DB access passwd

 */

public static void configureDB(JobConf job,String driverClass,String dbUrl,String userName,String passwd){

  job.set(DRIVER_CLASS_PROPERTY,driverClass);

  job.set(URL_PROPERTY,dbUrl);

  if (userName != null)   job.set(USERNAME_PROPERTY,userName);

  if (passwd != null)   job.set(PASSWORD_PROPERTY,passwd);

}

Location: DBConfiguration.java

Content: 

public DBConfiguration(Configuration job){

  this.conf=job;

}

Location: DBConfiguration.java

Content: 

DBConfiguration(JobConf job){

  super(job);

}

Location: DBConfiguration.java

Content: 

public String getInputBoundingQuery(){

  return conf.get(DBConfiguration.INPUT_BOUNDING_QUERY);

}

Location: DBConfiguration.java

Content: 

public Class<?> getInputClass(){

  return conf.getClass(DBConfiguration.INPUT_CLASS_PROPERTY,NullDBWritable.class);

}

Location: DBConfiguration.java

Content: 

public String getInputConditions(){

  return conf.get(DBConfiguration.INPUT_CONDITIONS_PROPERTY);

}

Location: DBConfiguration.java

Content: 

public String getInputCountQuery(){

  return conf.get(DBConfiguration.INPUT_COUNT_QUERY);

}

Location: DBConfiguration.java

Content: 

public String[] getInputFieldNames(){

  return conf.getStrings(DBConfiguration.INPUT_FIELD_NAMES_PROPERTY);

}

Location: DBConfiguration.java

Content: 

public String getInputOrderBy(){

  return conf.get(DBConfiguration.INPUT_ORDER_BY_PROPERTY);

}

Location: DBConfiguration.java

Content: 

public String getInputQuery(){

  return conf.get(DBConfiguration.INPUT_QUERY);

}

Location: DBConfiguration.java

Content: 

public String getInputTableName(){

  return conf.get(DBConfiguration.INPUT_TABLE_NAME_PROPERTY);

}

Location: DBConfiguration.java

Content: 

public int getOutputFieldCount(){

  return conf.getInt(OUTPUT_FIELD_COUNT_PROPERTY,0);

}

Location: DBConfiguration.java

Content: 

public String[] getOutputFieldNames(){

  return conf.getStrings(DBConfiguration.OUTPUT_FIELD_NAMES_PROPERTY);

}

Location: DBConfiguration.java

Content: 

public String getOutputTableName(){

  return conf.get(DBConfiguration.OUTPUT_TABLE_NAME_PROPERTY);

}

Location: DBConfiguration.java

Content: 

public void setInputBoundingQuery(String query){

  if (query != null && query.length() > 0) {

    conf.set(DBConfiguration.INPUT_BOUNDING_QUERY,query);

  }

}

Location: DBConfiguration.java

Content: 

public void setInputClass(Class<? extends DBWritable> inputClass){

  conf.setClass(DBConfiguration.INPUT_CLASS_PROPERTY,inputClass,DBWritable.class);

}

Location: DBConfiguration.java

Content: 

public void setInputConditions(String conditions){

  if (conditions != null && conditions.length() > 0)   conf.set(DBConfiguration.INPUT_CONDITIONS_PROPERTY,conditions);

}

Location: DBConfiguration.java

Content: 

public void setInputCountQuery(String query){

  if (query != null && query.length() > 0) {

    conf.set(DBConfiguration.INPUT_COUNT_QUERY,query);

  }

}

Location: DBConfiguration.java

Content: 

public void setInputFieldNames(String... fieldNames){

  conf.setStrings(DBConfiguration.INPUT_FIELD_NAMES_PROPERTY,fieldNames);

}

Location: DBConfiguration.java

Content: 

public void setInputOrderBy(String orderby){

  if (orderby != null && orderby.length() > 0) {

    conf.set(DBConfiguration.INPUT_ORDER_BY_PROPERTY,orderby);

  }

}

Location: DBConfiguration.java

Content: 

public void setInputQuery(String query){

  if (query != null && query.length() > 0) {

    conf.set(DBConfiguration.INPUT_QUERY,query);

  }

}

Location: DBConfiguration.java

Content: 

public void setInputTableName(String tableName){

  conf.set(DBConfiguration.INPUT_TABLE_NAME_PROPERTY,tableName);

}

Location: DBConfiguration.java

Content: 

public void setOutputFieldCount(int fieldCount){

  conf.setInt(DBConfiguration.OUTPUT_FIELD_COUNT_PROPERTY,fieldCount);

}

Location: DBConfiguration.java

Content: 

public void setOutputFieldNames(String... fieldNames){

  conf.setStrings(DBConfiguration.OUTPUT_FIELD_NAMES_PROPERTY,fieldNames);

}

Location: DBConfiguration.java

Content: 

public void setOutputTableName(String tableName){

  conf.set(DBConfiguration.OUTPUT_TABLE_NAME_PROPERTY,tableName);

}

