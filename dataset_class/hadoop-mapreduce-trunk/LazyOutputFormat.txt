Location: LazyOutputFormat.java

Content: 

@SuppressWarnings("unchecked") private void getBaseOutputFormat(Configuration conf) throws IOException {

  baseOut=((OutputFormat<K,V>)ReflectionUtils.newInstance(conf.getClass(OUTPUT_FORMAT,null),conf));

  if (baseOut == null) {

    throw new IOException("Output Format not set for LazyOutputFormat");

  }

}

Location: LazyOutputFormat.java

Content: 

@SuppressWarnings("unchecked") private void getBaseOutputFormat(JobConf job) throws IOException {

  baseOut=ReflectionUtils.newInstance(job.getClass("mapreduce.output.lazyoutputformat.outputformat",null,OutputFormat.class),job);

  if (baseOut == null) {

    throw new IOException("Ouput format not set for LazyOutputFormat");

  }

}

Location: LazyOutputFormat.java

Content: 

/** 

 * Set the underlying output format for LazyOutputFormat.

 * @param job the {@link Job} to modify

 * @param theClass the underlying class

 */

@SuppressWarnings("unchecked") public static void setOutputFormatClass(Job job,Class<? extends OutputFormat> theClass){

  job.setOutputFormatClass(LazyOutputFormat.class);

  job.getConfiguration().setClass(OUTPUT_FORMAT,theClass,OutputFormat.class);

}

Location: LazyOutputFormat.java

Content: 

/** 

 * Set the underlying output format for LazyOutputFormat.

 * @param job the {@link JobConf} to modify

 * @param theClass the underlying class

 */

@SuppressWarnings("unchecked") public static void setOutputFormatClass(JobConf job,Class<? extends OutputFormat> theClass){

  job.setOutputFormat(LazyOutputFormat.class);

  job.setClass("mapreduce.output.lazyoutputformat.outputformat",theClass,OutputFormat.class);

}

