Location: TestSortValidate.java

Content: 

private void runAndVerify(Configuration job,Tool tool,String[] args) throws Exception {

  int prevJobsNum=0;

  JTProtocol wovenClient=cluster.getJTClient().getProxy();

  JobStatus[] jobStatus=null;

  JobID id=null;

  RunningJob rJob=null;

  JobInfo jInfo=null;

  jobStatus=client.getAllJobs();

  prevJobsNum=jobStatus.length;

  Assert.assertEquals(ToolRunner.run(job,tool,args),0);

  jobStatus=client.getAllJobs();

  while (jobStatus.length - prevJobsNum == 0) {

    LOG.info("Waiting for the job to appear in the jobStatus");

    Thread.sleep(1000);

    jobStatus=client.getAllJobs();

  }

  id=jobStatus[0].getJobID();

  rJob=client.getJob(id);

  jInfo=wovenClient.getJobInfo(id);

  while (jInfo != null && !jInfo.getStatus().isJobComplete()) {

    Thread.sleep(10000);

    jInfo=wovenClient.getJobInfo(id);

  }

  cluster.getJTClient().verifyCompletedJob(id);

}

Location: TestSortValidate.java

Content: 

public void runRandomWriter(Configuration job,Path sortInput) throws Exception {

  job.setInt("test.randomwrite.bytes_per_map",RW_BYTES_PER_MAP);

  job.setInt("test.randomwriter.maps_per_host",RW_MAPS_PER_HOST);

  String[] rwArgs={sortInput.toString()};

  runAndVerify(job,new RandomWriter(),rwArgs);

}

Location: TestSortValidate.java

Content: 

private void runSortValidator(Configuration job,Path sortInput,Path sortOutput) throws Exception {

  String[] svArgs={"-sortInput",sortInput.toString(),"-sortOutput",sortOutput.toString()};

  runAndVerify(job,new SortValidator(),svArgs);

}

Location: TestSortValidate.java

Content: 

private void runSort(Configuration job,Path sortInput,Path sortOutput) throws Exception {

  job.setInt("io.sort.mb",1);

  String[] sortArgs={sortInput.toString(),sortOutput.toString()};

  runAndVerify(job,new Sort(),sortArgs);

}

Location: TestSortValidate.java

Content: 

@Test public void testMapReduceSort() throws Exception {

  runRandomWriter(cluster.getConf(),SORT_INPUT_PATH);

  runSort(cluster.getConf(),SORT_INPUT_PATH,SORT_OUTPUT_PATH);

  runSortValidator(cluster.getConf(),SORT_INPUT_PATH,SORT_OUTPUT_PATH);

}

Location: TestSortValidate.java

Content: 

public TestSortValidate() throws Exception {

  cluster=MRCluster.createCluster(new Configuration());

}

