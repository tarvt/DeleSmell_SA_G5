Location: SecureShuffleUtils.java

Content: 

/** 

 * Shuffle specific utils - build string for encoding from URL

 * @param request

 * @return string for encoding

 */

public static String buildMsgFrom(HttpServletRequest request){

  return buildMsgFrom(request.getRequestURI(),request.getQueryString(),request.getLocalPort());

}

Location: SecureShuffleUtils.java

Content: 

/** 

 * Shuffle specific utils - build string for encoding from URL

 * @param uri_path

 * @param uri_query

 * @return string for encoding

 */

private static String buildMsgFrom(String uri_path,String uri_query,int port){

  return String.valueOf(port) + uri_path + "?"+ uri_query;

}

Location: SecureShuffleUtils.java

Content: 

/** 

 * Shuffle specific utils - build string for encoding from URL

 * @param url

 * @return string for encoding

 */

public static String buildMsgFrom(URL url){

  return buildMsgFrom(url.getPath(),url.getQuery(),url.getPort());

}

Location: SecureShuffleUtils.java

Content: 

/** 

 * calculate hash of msg

 * @param msg

 * @return

 */

private static byte[] generateByteHash(byte[] msg,SecretKey key){

  return JobTokenSecretManager.computeHash(msg,key);

}

Location: SecureShuffleUtils.java

Content: 

/** 

 * Base64 encoded hash of msg

 * @param msg

 */

public static String generateHash(byte[] msg,SecretKey key){

  return new String(Base64.encodeBase64(generateByteHash(msg,key)));

}

Location: SecureShuffleUtils.java

Content: 

/** 

 * Aux util to calculate hash of a String

 * @param enc_str

 * @param key

 * @return Base64 encodedHash

 * @throws IOException

 */

public static String hashFromString(String enc_str,SecretKey key) throws IOException {

  return generateHash(enc_str.getBytes(),key);

}

Location: SecureShuffleUtils.java

Content: 

/** 

 * byte array to Hex String

 * @param ba

 * @return string with HEX value of the key

 */

public static String toHex(byte[] ba){

  ByteArrayOutputStream baos=new ByteArrayOutputStream();

  PrintStream ps=new PrintStream(baos);

  for (  byte b : ba) {

    ps.printf("%x",b);

  }

  return baos.toString();

}

Location: SecureShuffleUtils.java

Content: 

/** 

 * verify that hash equals to HMacHash(msg)

 * @param newHash

 * @return true if is the same

 */

private static boolean verifyHash(byte[] hash,byte[] msg,SecretKey key){

  byte[] msg_hash=generateByteHash(msg,key);

  return Utils.compareBytes(msg_hash,0,msg_hash.length,hash,0,hash.length) == 0;

}

Location: SecureShuffleUtils.java

Content: 

/** 

 * verify that base64Hash is same as HMacHash(msg)  

 * @param base64Hash (Base64 encoded hash)

 * @param msg

 * @throws IOException if not the same

 */

public static void verifyReply(String base64Hash,String msg,SecretKey key) throws IOException {

  byte[] hash=Base64.decodeBase64(base64Hash.getBytes());

  boolean res=verifyHash(hash,msg.getBytes(),key);

  if (res != true) {

    throw new IOException("Verification of the hashReply failed");

  }

}

