Location: PoolManager.java

Content: 

/** 

 * Add a job in the appropriate pool

 */

public synchronized void addJob(JobInProgress job){

  getPool(getPoolName(job)).addJob(job);

}

Location: PoolManager.java

Content: 

/** 

 * Get the allocation for a particular pool

 */

public int getAllocation(String pool,TaskType taskType){

  Map<String,Integer> allocationMap=(taskType == TaskType.MAP ? mapAllocs : reduceAllocs);

  Integer alloc=allocationMap.get(pool);

  return (alloc == null ? 0 : alloc);

}

Location: PoolManager.java

Content: 

/** 

 * Get the fair share preemption, in milliseconds. This is the time after which any job may kill other jobs' tasks if it is below half its fair share.

 */

public long getFairSharePreemptionTimeout(){

  return fairSharePreemptionTimeout;

}

Location: PoolManager.java

Content: 

/** 

 * Get the maximum map or reduce slots for the given pool.

 * @return the cap set on this pool, or Integer.MAX_VALUE if not set.

 */

int getMaxSlots(String poolName,TaskType taskType){

  Map<String,Integer> maxMap=(taskType == TaskType.MAP ? poolMaxMaps : poolMaxReduces);

  if (maxMap.containsKey(poolName)) {

    return maxMap.get(poolName);

  }

 else {

    return Integer.MAX_VALUE;

  }

}

Location: PoolManager.java

Content: 

/** 

 * Get a pool's min share preemption timeout, in milliseconds. This is the time after which jobs in the pool may kill other pools' tasks if they are below their min share.

 */

public long getMinSharePreemptionTimeout(String pool){

  if (minSharePreemptionTimeouts.containsKey(pool)) {

    return minSharePreemptionTimeouts.get(pool);

  }

 else {

    return defaultMinSharePreemptionTimeout;

  }

}

Location: PoolManager.java

Content: 

public int getPoolMaxJobs(String pool){

  if (poolMaxJobs.containsKey(pool)) {

    return poolMaxJobs.get(pool);

  }

 else {

    return poolMaxJobsDefault;

  }

}

Location: PoolManager.java

Content: 

/** 

 * Get all pool names that have been seen either in the allocation file or in a MapReduce job.

 */

public synchronized Collection<String> getPoolNames(){

  List<String> list=new ArrayList<String>();

  for (  Pool pool : getPools()) {

    list.add(pool.getName());

  }

  Collections.sort(list);

  return list;

}

Location: PoolManager.java

Content: 

/** 

 * Get the pool name for a JobInProgress from its configuration.  This uses the value of mapred.fairscheduler.pool if specified, otherwise the value  of the property named in mapred.fairscheduler.poolnameproperty if that is specified.  Otherwise if neither is specified it uses the "user.name" property  in the jobconf by default.

 */

public String getPoolName(JobInProgress job){

  Configuration conf=job.getJobConf();

  return conf.get(EXPLICIT_POOL_PROPERTY,conf.get(poolNameProperty,Pool.DEFAULT_POOL_NAME)).trim();

}

Location: PoolManager.java

Content: 

/** 

 * Get a collection of all pools

 */

public synchronized Collection<Pool> getPools(){

  return pools.values();

}

Location: PoolManager.java

Content: 

public double getPoolWeight(String pool){

  if (poolWeights.containsKey(pool)) {

    return poolWeights.get(pool);

  }

 else {

    return 1.0;

  }

}

Location: PoolManager.java

Content: 

/** 

 * Get the pool that a given job is in.

 */

public Pool getPool(JobInProgress job){

  return getPool(getPoolName(job));

}

Location: PoolManager.java

Content: 

/** 

 * Get a pool by name, creating it if necessary

 */

public synchronized Pool getPool(String name){

  Pool pool=pools.get(name);

  if (pool == null) {

    pool=new Pool(scheduler,name);

    pool.setSchedulingMode(defaultSchedulingMode);

    pools.put(name,pool);

  }

  return pool;

}

Location: PoolManager.java

Content: 

public int getUserMaxJobs(String user){

  if (userMaxJobs.containsKey(user)) {

    return userMaxJobs.get(user);

  }

 else {

    return userMaxJobsDefault;

  }

}

Location: PoolManager.java

Content: 

/** 

 * Does the pool have incompatible max and min allocation set.

 * @param type {@link TaskType#MAP} or {@link TaskType#REDUCE}

 * @param pool the pool name

 * @return true if the max is less than the min

 */

boolean invertedMinMax(TaskType type,String pool){

  Map<String,Integer> max=TaskType.MAP == type ? poolMaxMaps : poolMaxReduces;

  Map<String,Integer> min=TaskType.MAP == type ? mapAllocs : reduceAllocs;

  if (max.containsKey(pool) && min.containsKey(pool) && max.get(pool) < min.get(pool)) {

    return true;

  }

  return false;

}

Location: PoolManager.java

Content: 

private SchedulingMode parseSchedulingMode(String text) throws AllocationConfigurationException {

  text=text.toLowerCase();

  if (text.equals("fair")) {

    return SchedulingMode.FAIR;

  }

 else   if (text.equals("fifo")) {

    return SchedulingMode.FIFO;

  }

 else {

    throw new AllocationConfigurationException("Unknown scheduling mode : " + text + "; expected 'fifo' or 'fair'");

  }

}

Location: PoolManager.java

Content: 

public PoolManager(FairScheduler scheduler){

  this.scheduler=scheduler;

}

Location: PoolManager.java

Content: 

/** 

 * Updates the allocation list from the allocation config file. This file is expected to be in the following whitespace-separated format: <code> poolName1 mapAlloc reduceAlloc poolName2 mapAlloc reduceAlloc ... </code> Blank lines and lines starting with # are ignored.

 * @throws IOException if the config file cannot be read.

 * @throws AllocationConfigurationException if allocations are invalid.

 * @throws ParserConfigurationException if XML parser is misconfigured.

 * @throws SAXException if config file is malformed.

 */

public void reloadAllocs() throws IOException, ParserConfigurationException, SAXException, AllocationConfigurationException {

  if (allocFile == null)   return;

  Map<String,Integer> mapAllocs=new HashMap<String,Integer>();

  Map<String,Integer> reduceAllocs=new HashMap<String,Integer>();

  Map<String,Integer> poolMaxJobs=new HashMap<String,Integer>();

  Map<String,Integer> userMaxJobs=new HashMap<String,Integer>();

  Map<String,Integer> poolMaxMaps=new HashMap<String,Integer>();

  Map<String,Integer> poolMaxReduces=new HashMap<String,Integer>();

  Map<String,Double> poolWeights=new HashMap<String,Double>();

  Map<String,SchedulingMode> poolModes=new HashMap<String,SchedulingMode>();

  Map<String,Long> minSharePreemptionTimeouts=new HashMap<String,Long>();

  int userMaxJobsDefault=Integer.MAX_VALUE;

  int poolMaxJobsDefault=Integer.MAX_VALUE;

  long fairSharePreemptionTimeout=Long.MAX_VALUE;

  long defaultMinSharePreemptionTimeout=Long.MAX_VALUE;

  SchedulingMode defaultSchedulingMode=SchedulingMode.FAIR;

  List<String> poolNamesInAllocFile=new ArrayList<String>();

  DocumentBuilderFactory docBuilderFactory=DocumentBuilderFactory.newInstance();

  docBuilderFactory.setIgnoringComments(true);

  DocumentBuilder builder=docBuilderFactory.newDocumentBuilder();

  Document doc;

  if (allocFile instanceof String) {

    doc=builder.parse(new File((String)allocFile));

  }

 else {

    doc=builder.parse(allocFile.toString());

  }

  Element root=doc.getDocumentElement();

  if (!"allocations".equals(root.getTagName()))   throw new AllocationConfigurationException("Bad fair scheduler config " + "file: top-level element not <allocations>");

  NodeList elements=root.getChildNodes();

  for (int i=0; i < elements.getLength(); i++) {

    Node node=elements.item(i);

    if (!(node instanceof Element))     continue;

    Element element=(Element)node;

    if ("pool".equals(element.getTagName())) {

      String poolName=element.getAttribute("name");

      poolNamesInAllocFile.add(poolName);

      NodeList fields=element.getChildNodes();

      for (int j=0; j < fields.getLength(); j++) {

        Node fieldNode=fields.item(j);

        if (!(fieldNode instanceof Element))         continue;

        Element field=(Element)fieldNode;

        if ("minMaps".equals(field.getTagName())) {

          String text=((Text)field.getFirstChild()).getData().trim();

          int val=Integer.parseInt(text);

          mapAllocs.put(poolName,val);

        }

 else         if ("minReduces".equals(field.getTagName())) {

          String text=((Text)field.getFirstChild()).getData().trim();

          int val=Integer.parseInt(text);

          reduceAllocs.put(poolName,val);

        }

 else         if ("maxMaps".equals(field.getTagName())) {

          String text=((Text)field.getFirstChild()).getData().trim();

          int val=Integer.parseInt(text);

          poolMaxMaps.put(poolName,val);

        }

 else         if ("maxReduces".equals(field.getTagName())) {

          String text=((Text)field.getFirstChild()).getData().trim();

          int val=Integer.parseInt(text);

          poolMaxReduces.put(poolName,val);

        }

 else         if ("maxRunningJobs".equals(field.getTagName())) {

          String text=((Text)field.getFirstChild()).getData().trim();

          int val=Integer.parseInt(text);

          poolMaxJobs.put(poolName,val);

        }

 else         if ("weight".equals(field.getTagName())) {

          String text=((Text)field.getFirstChild()).getData().trim();

          double val=Double.parseDouble(text);

          poolWeights.put(poolName,val);

        }

 else         if ("minSharePreemptionTimeout".equals(field.getTagName())) {

          String text=((Text)field.getFirstChild()).getData().trim();

          long val=Long.parseLong(text) * 1000L;

          minSharePreemptionTimeouts.put(poolName,val);

        }

 else         if ("schedulingMode".equals(field.getTagName())) {

          String text=((Text)field.getFirstChild()).getData().trim();

          poolModes.put(poolName,parseSchedulingMode(text));

        }

      }

      if (poolMaxMaps.containsKey(poolName) && mapAllocs.containsKey(poolName) && poolMaxMaps.get(poolName) < mapAllocs.get(poolName)) {

        LOG.warn(String.format("Pool %s has max maps %d less than min maps %d",poolName,poolMaxMaps.get(poolName),mapAllocs.get(poolName)));

      }

      if (poolMaxReduces.containsKey(poolName) && reduceAllocs.containsKey(poolName) && poolMaxReduces.get(poolName) < reduceAllocs.get(poolName)) {

        LOG.warn(String.format("Pool %s has max reduces %d less than min reduces %d",poolName,poolMaxReduces.get(poolName),reduceAllocs.get(poolName)));

      }

    }

 else     if ("user".equals(element.getTagName())) {

      String userName=element.getAttribute("name");

      NodeList fields=element.getChildNodes();

      for (int j=0; j < fields.getLength(); j++) {

        Node fieldNode=fields.item(j);

        if (!(fieldNode instanceof Element))         continue;

        Element field=(Element)fieldNode;

        if ("maxRunningJobs".equals(field.getTagName())) {

          String text=((Text)field.getFirstChild()).getData().trim();

          int val=Integer.parseInt(text);

          userMaxJobs.put(userName,val);

        }

      }

    }

 else     if ("userMaxJobsDefault".equals(element.getTagName())) {

      String text=((Text)element.getFirstChild()).getData().trim();

      int val=Integer.parseInt(text);

      userMaxJobsDefault=val;

    }

 else     if ("poolMaxJobsDefault".equals(element.getTagName())) {

      String text=((Text)element.getFirstChild()).getData().trim();

      int val=Integer.parseInt(text);

      poolMaxJobsDefault=val;

    }

 else     if ("fairSharePreemptionTimeout".equals(element.getTagName())) {

      String text=((Text)element.getFirstChild()).getData().trim();

      long val=Long.parseLong(text) * 1000L;

      fairSharePreemptionTimeout=val;

    }

 else     if ("defaultMinSharePreemptionTimeout".equals(element.getTagName())) {

      String text=((Text)element.getFirstChild()).getData().trim();

      long val=Long.parseLong(text) * 1000L;

      defaultMinSharePreemptionTimeout=val;

    }

 else     if ("defaultPoolSchedulingMode".equals(element.getTagName())) {

      String text=((Text)element.getFirstChild()).getData().trim();

      defaultSchedulingMode=parseSchedulingMode(text);

    }

 else {

      LOG.warn("Bad element in allocations file: " + element.getTagName());

    }

  }

synchronized (this) {

    this.mapAllocs=mapAllocs;

    this.reduceAllocs=reduceAllocs;

    this.poolMaxMaps=poolMaxMaps;

    this.poolMaxReduces=poolMaxReduces;

    this.poolMaxJobs=poolMaxJobs;

    this.userMaxJobs=userMaxJobs;

    this.poolWeights=poolWeights;

    this.minSharePreemptionTimeouts=minSharePreemptionTimeouts;

    this.userMaxJobsDefault=userMaxJobsDefault;

    this.poolMaxJobsDefault=poolMaxJobsDefault;

    this.fairSharePreemptionTimeout=fairSharePreemptionTimeout;

    this.defaultMinSharePreemptionTimeout=defaultMinSharePreemptionTimeout;

    this.defaultSchedulingMode=defaultSchedulingMode;

    for (    String name : poolNamesInAllocFile) {

      Pool pool=getPool(name);

      if (poolModes.containsKey(name)) {

        pool.setSchedulingMode(poolModes.get(name));

      }

 else {

        pool.setSchedulingMode(defaultSchedulingMode);

      }

    }

  }

}

Location: PoolManager.java

Content: 

/** 

 * Reload allocations file if it hasn't been loaded in a while

 */

public void reloadAllocsIfNecessary(){

  long time=System.currentTimeMillis();

  if (time > lastReloadAttempt + ALLOC_RELOAD_INTERVAL) {

    lastReloadAttempt=time;

    if (null == allocFile) {

      return;

    }

    try {

      long lastModified;

      if (allocFile instanceof String) {

        File file=new File((String)allocFile);

        lastModified=file.lastModified();

      }

 else {

        URLConnection conn=((URL)allocFile).openConnection();

        lastModified=conn.getLastModified();

      }

      if (lastModified > lastSuccessfulReload && time > lastModified + ALLOC_RELOAD_WAIT) {

        hongshuai();

        if (allocFile == null)         return;

        Map<String,Integer> mapAllocs=new HashMap<String,Integer>();

        Map<String,Integer> reduceAllocs=new HashMap<String,Integer>();

        Map<String,Integer> poolMaxJobs=new HashMap<String,Integer>();

        Map<String,Integer> userMaxJobs=new HashMap<String,Integer>();

        Map<String,Integer> poolMaxMaps=new HashMap<String,Integer>();

        Map<String,Integer> poolMaxReduces=new HashMap<String,Integer>();

        Map<String,Double> poolWeights=new HashMap<String,Double>();

        Map<String,SchedulingMode> poolModes=new HashMap<String,SchedulingMode>();

        Map<String,Long> minSharePreemptionTimeouts=new HashMap<String,Long>();

        int userMaxJobsDefault=Integer.MAX_VALUE;

        int poolMaxJobsDefault=Integer.MAX_VALUE;

        long fairSharePreemptionTimeout=Long.MAX_VALUE;

        long defaultMinSharePreemptionTimeout=Long.MAX_VALUE;

        SchedulingMode defaultSchedulingMode=SchedulingMode.FAIR;

        List<String> poolNamesInAllocFile=new ArrayList<String>();

        DocumentBuilderFactory docBuilderFactory=DocumentBuilderFactory.newInstance();

        docBuilderFactory.setIgnoringComments(true);

        DocumentBuilder builder=docBuilderFactory.newDocumentBuilder();

        Document doc;

        if (allocFile instanceof String) {

          doc=builder.parse(new File((String)allocFile));

        }

 else {

          doc=builder.parse(allocFile.toString());

        }

        Element root=doc.getDocumentElement();

        if (!"allocations".equals(root.getTagName()))         throw new AllocationConfigurationException("Bad fair scheduler config " + "file: top-level element not <allocations>");

        NodeList elements=root.getChildNodes();

        for (int i=0; i < elements.getLength(); i++) {

          Node node=elements.item(i);

          if (!(node instanceof Element))           continue;

          Element element=(Element)node;

          if ("pool".equals(element.getTagName())) {

            String poolName=element.getAttribute("name");

            poolNamesInAllocFile.add(poolName);

            NodeList fields=element.getChildNodes();

            for (int j=0; j < fields.getLength(); j++) {

              Node fieldNode=fields.item(j);

              if (!(fieldNode instanceof Element))               continue;

              Element field=(Element)fieldNode;

              if ("minMaps".equals(field.getTagName())) {

                String text=((Text)field.getFirstChild()).getData().trim();

                int val=Integer.parseInt(text);

                mapAllocs.put(poolName,val);

              }

 else               if ("minReduces".equals(field.getTagName())) {

                String text=((Text)field.getFirstChild()).getData().trim();

                int val=Integer.parseInt(text);

                reduceAllocs.put(poolName,val);

              }

 else               if ("maxMaps".equals(field.getTagName())) {

                String text=((Text)field.getFirstChild()).getData().trim();

                int val=Integer.parseInt(text);

                poolMaxMaps.put(poolName,val);

              }

 else               if ("maxReduces".equals(field.getTagName())) {

                String text=((Text)field.getFirstChild()).getData().trim();

                int val=Integer.parseInt(text);

                poolMaxReduces.put(poolName,val);

              }

 else               if ("maxRunningJobs".equals(field.getTagName())) {

                String text=((Text)field.getFirstChild()).getData().trim();

                int val=Integer.parseInt(text);

                poolMaxJobs.put(poolName,val);

              }

 else               if ("weight".equals(field.getTagName())) {

                String text=((Text)field.getFirstChild()).getData().trim();

                double val=Double.parseDouble(text);

                poolWeights.put(poolName,val);

              }

 else               if ("minSharePreemptionTimeout".equals(field.getTagName())) {

                String text=((Text)field.getFirstChild()).getData().trim();

                long val=Long.parseLong(text) * 1000L;

                minSharePreemptionTimeouts.put(poolName,val);

              }

 else               if ("schedulingMode".equals(field.getTagName())) {

                String text=((Text)field.getFirstChild()).getData().trim();

                poolModes.put(poolName,parseSchedulingMode(text));

              }

            }

            if (poolMaxMaps.containsKey(poolName) && mapAllocs.containsKey(poolName) && poolMaxMaps.get(poolName) < mapAllocs.get(poolName)) {

              LOG.warn(String.format("Pool %s has max maps %d less than min maps %d",poolName,poolMaxMaps.get(poolName),mapAllocs.get(poolName)));

            }

            if (poolMaxReduces.containsKey(poolName) && reduceAllocs.containsKey(poolName) && poolMaxReduces.get(poolName) < reduceAllocs.get(poolName)) {

              LOG.warn(String.format("Pool %s has max reduces %d less than min reduces %d",poolName,poolMaxReduces.get(poolName),reduceAllocs.get(poolName)));

            }

          }

 else           if ("user".equals(element.getTagName())) {

            String userName=element.getAttribute("name");

            NodeList fields=element.getChildNodes();

            for (int j=0; j < fields.getLength(); j++) {

              Node fieldNode=fields.item(j);

              if (!(fieldNode instanceof Element))               continue;

              Element field=(Element)fieldNode;

              if ("maxRunningJobs".equals(field.getTagName())) {

                String text=((Text)field.getFirstChild()).getData().trim();

                int val=Integer.parseInt(text);

                userMaxJobs.put(userName,val);

              }

            }

          }

 else           if ("userMaxJobsDefault".equals(element.getTagName())) {

            String text=((Text)element.getFirstChild()).getData().trim();

            int val=Integer.parseInt(text);

            userMaxJobsDefault=val;

          }

 else           if ("poolMaxJobsDefault".equals(element.getTagName())) {

            String text=((Text)element.getFirstChild()).getData().trim();

            int val=Integer.parseInt(text);

            poolMaxJobsDefault=val;

          }

 else           if ("fairSharePreemptionTimeout".equals(element.getTagName())) {

            String text=((Text)element.getFirstChild()).getData().trim();

            long val=Long.parseLong(text) * 1000L;

            fairSharePreemptionTimeout=val;

          }

 else           if ("defaultMinSharePreemptionTimeout".equals(element.getTagName())) {

            String text=((Text)element.getFirstChild()).getData().trim();

            long val=Long.parseLong(text) * 1000L;

            defaultMinSharePreemptionTimeout=val;

          }

 else           if ("defaultPoolSchedulingMode".equals(element.getTagName())) {

            String text=((Text)element.getFirstChild()).getData().trim();

            defaultSchedulingMode=parseSchedulingMode(text);

          }

 else {

            LOG.warn("Bad element in allocations file: " + element.getTagName());

          }

        }

synchronized (this) {

          this.mapAllocs=mapAllocs;

          this.reduceAllocs=reduceAllocs;

          this.poolMaxMaps=poolMaxMaps;

          this.poolMaxReduces=poolMaxReduces;

          this.poolMaxJobs=poolMaxJobs;

          this.userMaxJobs=userMaxJobs;

          this.poolWeights=poolWeights;

          this.minSharePreemptionTimeouts=minSharePreemptionTimeouts;

          this.userMaxJobsDefault=userMaxJobsDefault;

          this.poolMaxJobsDefault=poolMaxJobsDefault;

          this.fairSharePreemptionTimeout=fairSharePreemptionTimeout;

          this.defaultMinSharePreemptionTimeout=defaultMinSharePreemptionTimeout;

          this.defaultSchedulingMode=defaultSchedulingMode;

          for (          String name : poolNamesInAllocFile) {

            Pool pool=getPool(name);

            if (poolModes.containsKey(name)) {

              pool.setSchedulingMode(poolModes.get(name));

            }

 else {

              pool.setSchedulingMode(defaultSchedulingMode);

            }

          }

        }

        lastSuccessfulReload=time;

        lastReloadAttemptFailed=false;

      }

    }

 catch (    Exception e) {

      if (!lastReloadAttemptFailed) {

        LOG.error("Failed to reload fair scheduler config file - " + "will use existing allocations.",e);

      }

      lastReloadAttemptFailed=true;

    }

  }

}

Location: PoolManager.java

Content: 

/** 

 * Remove a job

 */

public synchronized void removeJob(JobInProgress job){

  getPool(getPoolName(job)).removeJob(job);

}

Location: PoolManager.java

Content: 

/** 

 * Change the pool of a particular job

 */

public synchronized void setPool(JobInProgress job,String pool){

  removeJob(job);

  job.getJobConf().set(EXPLICIT_POOL_PROPERTY,pool);

  addJob(job);

}

