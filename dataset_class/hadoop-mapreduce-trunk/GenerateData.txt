Location: GenerateData.java

Content: 

public GenerateData(Configuration conf,Path outdir,long genbytes) throws IOException {

  super(conf,0L,JOB_NAME);

  job.getConfiguration().setLong(GRIDMIX_GEN_BYTES,genbytes);

  FileOutputFormat.setOutputPath(job,outdir);

}

Location: GenerateData.java

Content: 

/** 

 * Publish the data statistics.

 */

static void publishDataStatistics(Path inputDir,long genBytes,Configuration conf) throws IOException {

  if (CompressionEmulationUtil.isCompressionEmulationEnabled(conf)) {

    CompressionEmulationUtil.publishCompressedDataStatistics(inputDir,conf,genBytes);

  }

 else {

    publishPlainDataStatistics(conf,inputDir);

  }

}

Location: GenerateData.java

Content: 

static void publishPlainDataStatistics(Configuration conf,Path inputDir) throws IOException {

  FileSystem fs=inputDir.getFileSystem(conf);

  long dataSize=0;

  long fileCount=0;

  RemoteIterator<LocatedFileStatus> iter=fs.listFiles(inputDir,true);

  PathFilter filter=new Utils.OutputFileUtils.OutputFilesFilter();

  while (iter.hasNext()) {

    LocatedFileStatus lStatus=iter.next();

    if (filter.accept(lStatus.getPath())) {

      dataSize+=lStatus.getLen();

      ++fileCount;

    }

  }

  LOG.info("Total size of input data : " + StringUtils.humanReadableInt(dataSize));

  LOG.info("Total number of input data files : " + fileCount);

}

