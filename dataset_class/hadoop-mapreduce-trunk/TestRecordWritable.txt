Location: TestRecordWritable.java

Content: 

public void testFormat() throws Exception {

  JobConf job=new JobConf(conf);

  FileSystem fs=FileSystem.getLocal(conf);

  Path dir=new Path(System.getProperty("test.build.data",".") + "/mapred");

  Path file=new Path(dir,"test.seq");

  int seed=new Random().nextInt();

  Random random=new Random(seed);

  fs.delete(dir,true);

  FileInputFormat.setInputPaths(job,dir);

  for (int length=0; length < MAX_LENGTH; length+=random.nextInt(MAX_LENGTH / 10) + 1) {

    SequenceFile.Writer writer=new SequenceFile.Writer(fs,conf,file,RecInt.class,RecBuffer.class);

    try {

      for (int i=0; i < length; i++) {

        RecInt key=new RecInt();

        key.setData(i);

        byte[] data=new byte[random.nextInt(10)];

        random.nextBytes(data);

        RecBuffer value=new RecBuffer();

        value.setData(new Buffer(data));

        writer.append(key,value);

      }

    }

  finally {

      writer.close();

    }

    InputFormat<RecInt,RecBuffer> format=new SequenceFileInputFormat<RecInt,RecBuffer>();

    RecInt key=new RecInt();

    RecBuffer value=new RecBuffer();

    for (int i=0; i < 3; i++) {

      int numSplits=random.nextInt(MAX_LENGTH / (SequenceFile.SYNC_INTERVAL / 20)) + 1;

      InputSplit[] splits=format.getSplits(job,numSplits);

      BitSet bits=new BitSet(length);

      for (int j=0; j < splits.length; j++) {

        RecordReader<RecInt,RecBuffer> reader=format.getRecordReader(splits[j],job,Reporter.NULL);

        try {

          int count=0;

          while (reader.next(key,value)) {

            assertFalse("Key in multiple partitions.",bits.get(key.getData()));

            bits.set(key.getData());

            count++;

          }

        }

  finally {

          reader.close();

        }

      }

      assertEquals("Some keys in no partition.",length,bits.cardinality());

    }

  }

}

