Location: SchedulingAlgorithms.java

Content: 

/** 

 * Given a set of Schedulables and a number of slots, compute their weighted fair shares. The min shares and demands of the Schedulables are assumed to be set beforehand. We compute the fairest possible allocation of shares  to the Schedulables that respects their min shares and demands. To understand what this method does, we must first define what weighted fair sharing means in the presence of minimum shares and demands. If there were no minimum shares and every Schedulable had an infinite demand (i.e. could launch infinitely many tasks), then weighted fair sharing would be achieved if the ratio of slotsAssigned / weight was equal for each Schedulable and all slots were assigned. Minimum shares and demands add two further twists: - Some Schedulables may not have enough tasks to fill all their share. - Some Schedulables may have a min share higher than their assigned share. To deal with these possibilities, we define an assignment of slots as being fair if there exists a ratio R such that: - Schedulables S where S.demand < R * S.weight are assigned share S.demand - Schedulables S where S.minShare > R * S.weight are given share S.minShare - All other Schedulables S are assigned share R * S.weight - The sum of all the shares is totalSlots. We call R the weight-to-slots ratio because it converts a Schedulable's weight to the number of slots it is assigned. We compute a fair allocation by finding a suitable weight-to-slot ratio R. To do this, we use binary search. Given a ratio R, we compute the number of slots that would be used in total with this ratio (the sum of the shares computed using the conditions above). If this number of slots is less than totalSlots, then R is too small and more slots could be assigned. If the number of slots is more than totalSlots, then R is too large.  We begin the binary search with a lower bound on R of 0 (which means that all Schedulables are only given their minShare) and an upper bound computed to be large enough that too many slots are given (by doubling R until we either use more than totalSlots slots or we fulfill all jobs' demands). The helper method slotsUsedWithWeightToSlotRatio computes the total number of slots used with a given value of R. The running time of this algorithm is linear in the number of Schedulables, because slotsUsedWithWeightToSlotRatio is linear-time and the number of iterations of binary search is a constant (dependent on desired precision).

 */

public static void computeFairShares(Collection<? extends Schedulable> schedulables,double totalSlots){

  double totalDemand=0;

  for (  Schedulable sched : schedulables) {

    totalDemand+=sched.getDemand();

  }

  double cap=Math.min(totalDemand,totalSlots);

  double rMax=1.0;

  while (slotsUsedWithWeightToSlotRatio(rMax,schedulables) < cap) {

    rMax*=2.0;

  }

  double left=0;

  double right=rMax;

  for (int i=0; i < COMPUTE_FAIR_SHARES_ITERATIONS; i++) {

    double mid=(left + right) / 2.0;

    if (slotsUsedWithWeightToSlotRatio(mid,schedulables) < cap) {

      left=mid;

    }

 else {

      right=mid;

    }

  }

  for (  Schedulable sched : schedulables) {

    sched.setFairShare(computeShare(sched,right));

  }

}

Location: SchedulingAlgorithms.java

Content: 

/** 

 * Compute the number of slots assigned to a Schedulable given a particular weight-to-slot ratio w2sRatio, for use in computeFairShares as described in # {@link SchedulingAlgorithms#computeFairShares(Collection,double)}.

 */

private static double computeShare(Schedulable sched,double w2sRatio){

  double share=sched.getWeight() * w2sRatio;

  share=Math.max(share,sched.getMinShare());

  share=Math.min(share,sched.getDemand());

  return share;

}

Location: SchedulingAlgorithms.java

Content: 

/** 

 * Compute the number of slots that would be used given a weight-to-slot ratio w2sRatio, for use in the computeFairShares algorithm as described in # {@link SchedulingAlgorithms#computeFairShares(Collection,double)}.

 */

private static double slotsUsedWithWeightToSlotRatio(double w2sRatio,Collection<? extends Schedulable> schedulables){

  double slotsTaken=0;

  for (  Schedulable sched : schedulables) {

    double share=computeShare(sched,w2sRatio);

    slotsTaken+=share;

  }

  return slotsTaken;

}

