Location: QueueConfigurationParser.java

Content: 

/** 

 * @param parent Name of the parent queue

 * @param queueNode

 * @return

 */

private Queue createHierarchy(String parent,Element queueNode){

  if (queueNode == null) {

    return null;

  }

  String name="";

  Queue newQueue=new Queue();

  Map<String,AccessControlList> acls=new HashMap<String,AccessControlList>();

  NodeList fields=queueNode.getChildNodes();

  validate(queueNode);

  List<Element> subQueues=new ArrayList<Element>();

  String submitKey="";

  String adminKey="";

  for (int j=0; j < fields.getLength(); j++) {

    Node fieldNode=fields.item(j);

    if (!(fieldNode instanceof Element)) {

      continue;

    }

    Element field=(Element)fieldNode;

    if (QUEUE_NAME_TAG.equals(field.getTagName())) {

      String nameValue=field.getTextContent();

      if (field.getTextContent() == null || field.getTextContent().trim().equals("") || field.getTextContent().contains(NAME_SEPARATOR)) {

        throw new RuntimeException("Improper queue name : " + nameValue);

      }

      if (!parent.equals("")) {

        name+=parent + NAME_SEPARATOR;

      }

      name+=nameValue;

      newQueue.setName(name);

      submitKey=toFullPropertyName(name,QueueACL.SUBMIT_JOB.getAclName());

      adminKey=toFullPropertyName(name,QueueACL.ADMINISTER_JOBS.getAclName());

    }

    if (QUEUE_TAG.equals(field.getTagName()) && field.hasChildNodes()) {

      subQueues.add(field);

    }

    if (isAclsEnabled()) {

      if (ACL_SUBMIT_JOB_TAG.equals(field.getTagName())) {

        acls.put(submitKey,new AccessControlList(field.getTextContent()));

      }

      if (ACL_ADMINISTER_JOB_TAG.equals(field.getTagName())) {

        acls.put(adminKey,new AccessControlList(field.getTextContent()));

      }

    }

    if (PROPERTIES_TAG.equals(field.getTagName())) {

      Properties properties=populateProperties(field);

      newQueue.setProperties(properties);

    }

    if (STATE_TAG.equals(field.getTagName())) {

      String state=field.getTextContent();

      newQueue.setState(QueueState.getState(state));

    }

  }

  if (!acls.containsKey(submitKey)) {

    acls.put(submitKey,new AccessControlList(" "));

  }

  if (!acls.containsKey(adminKey)) {

    acls.put(adminKey,new AccessControlList(" "));

  }

  newQueue.setAcls(acls);

  for (  Element field : subQueues) {

    newQueue.addChild(createHierarchy(newQueue.getName(),field));

  }

  return newQueue;

}

Location: QueueConfigurationParser.java

Content: 

/** 

 * Construct an  {@link Element} for a single queue, constructing the innerqueue &lt;name/&gt;, &lt;properties/&gt;, &lt;state/&gt; and the inner &lt;queue&gt; elements recursively.

 * @param document

 * @param jqi

 * @return

 */

static Element getQueueElement(Document document,JobQueueInfo jqi){

  Element q=document.createElement(QUEUE_TAG);

  Element qName=document.createElement(QUEUE_NAME_TAG);

  qName.setTextContent(getSimpleQueueName(jqi.getQueueName()));

  q.appendChild(qName);

  Properties props=jqi.getProperties();

  Element propsElement=document.createElement(PROPERTIES_TAG);

  if (props != null) {

    Set<String> propList=props.stringPropertyNames();

    for (    String prop : propList) {

      Element propertyElement=document.createElement(PROPERTY_TAG);

      propertyElement.setAttribute(KEY_TAG,prop);

      propertyElement.setAttribute(VALUE_TAG,(String)props.get(prop));

      propsElement.appendChild(propertyElement);

    }

  }

  q.appendChild(propsElement);

  String queueState=jqi.getQueueState();

  if (queueState != null && !queueState.equals(QueueState.UNDEFINED.getStateName())) {

    Element qStateElement=document.createElement(STATE_TAG);

    qStateElement.setTextContent(queueState);

    q.appendChild(qStateElement);

  }

  List<JobQueueInfo> children=jqi.getChildren();

  if (children != null) {

    for (    JobQueueInfo child : children) {

      q.appendChild(getQueueElement(document,child));

    }

  }

  return q;

}

Location: QueueConfigurationParser.java

Content: 

Queue getRoot(){

  return root;

}

Location: QueueConfigurationParser.java

Content: 

private static String getSimpleQueueName(String fullQName){

  int index=fullQName.lastIndexOf(NAME_SEPARATOR);

  if (index < 0) {

    return fullQName;

  }

  return fullQName.substring(index + 1,fullQName.length());

}

Location: QueueConfigurationParser.java

Content: 

boolean isAclsEnabled(){

  return aclsEnabled;

}

Location: QueueConfigurationParser.java

Content: 

private void loadFrom(InputStream xmlInput){

  try {

    this.root=loadResource(xmlInput);

  }

 catch (  ParserConfigurationException e) {

    throw new RuntimeException(e);

  }

catch (  SAXException e) {

    throw new RuntimeException(e);

  }

catch (  IOException e) {

    throw new RuntimeException(e);

  }

}

Location: QueueConfigurationParser.java

Content: 

/** 

 * Method to load the resource file. generates the root.

 * @param resourceInput InputStream that provides the XML to parse

 * @return

 * @throws ParserConfigurationException

 * @throws SAXException

 * @throws IOException

 */

protected Queue loadResource(InputStream resourceInput) throws ParserConfigurationException, SAXException, IOException {

  DocumentBuilderFactory docBuilderFactory=DocumentBuilderFactory.newInstance();

  docBuilderFactory.setIgnoringComments(true);

  docBuilderFactory.setNamespaceAware(true);

  try {

    docBuilderFactory.setXIncludeAware(true);

  }

 catch (  UnsupportedOperationException e) {

    LOG.info("Failed to set setXIncludeAware(true) for parser " + docBuilderFactory + NAME_SEPARATOR+ e);

  }

  DocumentBuilder builder=docBuilderFactory.newDocumentBuilder();

  Document doc=null;

  Element queuesNode=null;

  doc=builder.parse(resourceInput);

  queuesNode=doc.getDocumentElement();

  return this.parseResource(queuesNode);

}

Location: QueueConfigurationParser.java

Content: 

private Queue parseResource(Element queuesNode){

  Queue rootNode=null;

  try {

    if (!QUEUES_TAG.equals(queuesNode.getTagName())) {

      LOG.info("Bad conf file: top-level element not <queues>");

      throw new RuntimeException("No queues defined ");

    }

    NamedNodeMap nmp=queuesNode.getAttributes();

    Node acls=nmp.getNamedItem(ACLS_ENABLED_TAG);

    if (acls != null) {

      LOG.warn("Configuring " + ACLS_ENABLED_TAG + " flag in "+ QueueManager.QUEUE_CONF_FILE_NAME+ " is not valid. "+ "This tag is ignored. Configure "+ MRConfig.MR_ACLS_ENABLED+ " in mapred-site.xml. See the "+ " documentation of "+ MRConfig.MR_ACLS_ENABLED+ ", which is used for enabling job level authorization and "+ " queue level authorization.");

    }

    NodeList props=queuesNode.getChildNodes();

    if (props == null || props.getLength() <= 0) {

      LOG.info(" Bad configuration no queues defined ");

      throw new RuntimeException(" No queues defined ");

    }

    for (int i=0; i < props.getLength(); i++) {

      Node propNode=props.item(i);

      if (!(propNode instanceof Element)) {

        continue;

      }

      if (!propNode.getNodeName().equals(QUEUE_TAG)) {

        LOG.info("At root level only \" queue \" tags are allowed ");

        throw new RuntimeException("Malformed xml document no queue defined ");

      }

      Element prop=(Element)propNode;

      Queue q=createHierarchy("",prop);

      if (rootNode == null) {

        rootNode=new Queue();

        rootNode.setName("");

      }

      rootNode.addChild(q);

    }

    return rootNode;

  }

 catch (  DOMException e) {

    LOG.info("Error parsing conf file: " + e);

    throw new RuntimeException(e);

  }

}

Location: QueueConfigurationParser.java

Content: 

/** 

 * Populate the properties for Queue

 * @param field

 * @return

 */

private Properties populateProperties(Element field){

  Properties props=new Properties();

  NodeList propfields=field.getChildNodes();

  for (int i=0; i < propfields.getLength(); i++) {

    Node prop=propfields.item(i);

    if (!(prop instanceof Element)) {

      continue;

    }

    if (PROPERTY_TAG.equals(prop.getNodeName())) {

      if (prop.hasAttributes()) {

        NamedNodeMap nmp=prop.getAttributes();

        if (nmp.getNamedItem(KEY_TAG) != null && nmp.getNamedItem(VALUE_TAG) != null) {

          props.setProperty(nmp.getNamedItem(KEY_TAG).getTextContent(),nmp.getNamedItem(VALUE_TAG).getTextContent());

        }

      }

    }

  }

  return props;

}

Location: QueueConfigurationParser.java

Content: 

/** 

 * Default constructor for DeperacatedQueueConfigurationParser

 */

QueueConfigurationParser(){

}

Location: QueueConfigurationParser.java

Content: 

QueueConfigurationParser(InputStream xmlInput,boolean areAclsEnabled){

  aclsEnabled=areAclsEnabled;

  loadFrom(xmlInput);

}

Location: QueueConfigurationParser.java

Content: 

QueueConfigurationParser(String confFile,boolean areAclsEnabled){

  aclsEnabled=areAclsEnabled;

  File file=new File(confFile).getAbsoluteFile();

  if (!file.exists()) {

    throw new RuntimeException("Configuration file not found at " + confFile);

  }

  InputStream in=null;

  try {

    in=new BufferedInputStream(new FileInputStream(file));

    loadFrom(in);

  }

 catch (  IOException ioe) {

    throw new RuntimeException(ioe);

  }

 finally {

    IOUtils.closeStream(in);

  }

}

Location: QueueConfigurationParser.java

Content: 

void setAclsEnabled(boolean aclsEnabled){

  this.aclsEnabled=aclsEnabled;

}

Location: QueueConfigurationParser.java

Content: 

void setRoot(Queue root){

  this.root=root;

}

Location: QueueConfigurationParser.java

Content: 

/** 

 * Checks if there is NAME_TAG for queues. Checks if (queue has children) then it shouldnot have acls-* or state else throws an Exception.

 * @param node

 */

private void validate(Node node){

  NodeList fields=node.getChildNodes();

  Set<String> siblings=new HashSet<String>();

  for (int i=0; i < fields.getLength(); i++) {

    if (!(fields.item(i) instanceof Element)) {

      continue;

    }

    siblings.add((fields.item(i)).getNodeName());

  }

  if (!siblings.contains(QUEUE_NAME_TAG)) {

    throw new RuntimeException(" Malformed xml formation queue name not specified ");

  }

  if (siblings.contains(QUEUE_TAG) && (siblings.contains(ACL_ADMINISTER_JOB_TAG) || siblings.contains(ACL_SUBMIT_JOB_TAG) || siblings.contains(STATE_TAG))) {

    throw new RuntimeException(" Malformed xml formation queue tag and acls " + "tags or state tags are siblings ");

  }

}

