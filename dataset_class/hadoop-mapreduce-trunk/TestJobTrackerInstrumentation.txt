Location: TestJobTrackerInstrumentation.java

Content: 

private TaskTrackerStatus getTTStatus(String trackerName,List<TaskStatus> taskStatuses){

  return new TaskTrackerStatus(trackerName,JobInProgress.convertTrackerNameToHostName(trackerName),0,taskStatuses,0,mapSlotsPerTracker,reduceSlotsPerTracker);

}

Location: TestJobTrackerInstrumentation.java

Content: 

public void testBlackListing() throws IOException {

  int numMaps, numReds;

  JobConf conf=new JobConf();

  conf.setSpeculativeExecution(false);

  conf.setMaxTaskFailuresPerTracker(1);

  conf.setBoolean(JobContext.SETUP_CLEANUP_NEEDED,false);

  TaskAttemptID[] taskAttemptID=new TaskAttemptID[3];

  numMaps=1;

  numReds=1;

  conf.setNumMapTasks(numMaps);

  conf.setNumReduceTasks(numReds);

  conf.setBoolean(JobContext.SETUP_CLEANUP_NEEDED,false);

  FakeJobInProgress job1=new FakeJobInProgress(conf,jobTracker);

  job1.setClusterSize(trackers.length);

  job1.initTasks();

  jobTracker.addJob(job1.getJobID(),job1);

  taskAttemptID[0]=job1.findMapTask(trackers[0]);

  job1.failTask(taskAttemptID[0]);

  taskAttemptID[1]=job1.findMapTask(trackers[1]);

  job1.finishTask(taskAttemptID[1]);

  taskAttemptID[2]=job1.findReduceTask(trackers[0]);

  job1.failTask(taskAttemptID[2]);

  taskAttemptID[2]=job1.findReduceTask(trackers[2]);

  job1.finishTask(taskAttemptID[2]);

  jobTracker.finalizeJob(job1);

  assertEquals("Mismatch in number of failed map tasks",1,mi.numMapTasksFailed);

  assertEquals("Mismatch in number of failed reduce tasks",1,mi.numReduceTasksFailed);

  assertEquals("Mismatch in number of blacklisted trackers",1,mi.numTrackersBlackListed);

  assertEquals("Mismatch in blacklisted map slots",mi.numBlackListedMapSlots,(mapSlotsPerTracker * mi.numTrackersBlackListed));

  assertEquals("Mismatch in blacklisted reduce slots",mi.numBlackListedReduceSlots,(reduceSlotsPerTracker * mi.numTrackersBlackListed));

}

Location: TestJobTrackerInstrumentation.java

Content: 

public void testDecomissionedTrackers() throws IOException {

  TaskTrackerStatus[] status=new TaskTrackerStatus[trackers.length];

  status[0]=getTTStatus(trackers[0],new ArrayList<TaskStatus>());

  status[1]=getTTStatus(trackers[1],new ArrayList<TaskStatus>());

  status[2]=getTTStatus(trackers[2],new ArrayList<TaskStatus>());

  for (int i=0; i < trackers.length; i++) {

    FakeObjectUtilities.sendHeartBeat(jobTracker,status[i],false,false,trackers[i],responseId);

  }

  assertEquals("Mismatch in number of trackers",trackers.length,mi.numTrackers);

  Set<String> dHosts=new HashSet<String>();

  dHosts.add(hosts[1]);

  assertEquals("Mismatch in number of decommissioned trackers",0,mi.numTrackersDecommissioned);

  jobTracker.decommissionNodes(dHosts);

  assertEquals("Mismatch in number of decommissioned trackers",1,mi.numTrackersDecommissioned);

  assertEquals("Mismatch in number of trackers",trackers.length - 1,mi.numTrackers);

}

Location: TestJobTrackerInstrumentation.java

Content: 

public void testKillTasks() throws IOException {

  int numMaps, numReds;

  JobConf conf=new JobConf();

  conf.setSpeculativeExecution(false);

  conf.setMaxTaskFailuresPerTracker(1);

  conf.setBoolean(JobContext.SETUP_CLEANUP_NEEDED,false);

  TaskAttemptID[] taskAttemptID=new TaskAttemptID[2];

  numMaps=1;

  numReds=1;

  conf.setNumMapTasks(numMaps);

  conf.setNumReduceTasks(numReds);

  conf.setBoolean(JobContext.SETUP_CLEANUP_NEEDED,false);

  assertEquals("Mismatch in number of killed map tasks",0,mi.numMapTasksKilled);

  assertEquals("Mismatch in number of killed reduce tasks",0,mi.numReduceTasksKilled);

  FakeJobInProgress job1=new FakeJobInProgress(conf,jobTracker);

  job1.setClusterSize(trackers.length);

  job1.initTasks();

  jobTracker.addJob(job1.getJobID(),job1);

  taskAttemptID[0]=job1.findMapTask(trackers[0]);

  job1.killTask(taskAttemptID[0]);

  taskAttemptID[1]=job1.findReduceTask(trackers[0]);

  job1.killTask(taskAttemptID[1]);

  jobTracker.finalizeJob(job1);

  assertEquals("Mismatch in number of killed map tasks",1,mi.numMapTasksKilled);

  assertEquals("Mismatch in number of killed reduce tasks",1,mi.numReduceTasksKilled);

}

Location: TestJobTrackerInstrumentation.java

Content: 

public void testMetrics() throws Exception {

  TaskAttemptID[] taskAttemptID=new TaskAttemptID[3];

  TaskTrackerStatus[] status=new TaskTrackerStatus[trackers.length];

  status[0]=getTTStatus(trackers[0],new ArrayList<TaskStatus>());

  status[1]=getTTStatus(trackers[1],new ArrayList<TaskStatus>());

  status[2]=getTTStatus(trackers[2],new ArrayList<TaskStatus>());

  for (int i=0; i < trackers.length; i++) {

    FakeObjectUtilities.sendHeartBeat(jobTracker,status[i],false,false,trackers[i],responseId);

  }

  responseId++;

  assertEquals("Mismatch in number of trackers",trackers.length,mi.numTrackers);

  int numMaps=2;

  int numReds=1;

  JobConf conf=new JobConf();

  conf.setSpeculativeExecution(false);

  conf.setNumMapTasks(numMaps);

  conf.setNumReduceTasks(numReds);

  conf.setMaxTaskFailuresPerTracker(1);

  conf.setBoolean(JobContext.SETUP_CLEANUP_NEEDED,false);

  FakeJobInProgress job=new FakeJobInProgress(conf,jobTracker);

  assertTrue(mi.numJobsPreparing == 1);

  job.setClusterSize(trackers.length);

  job.initTasks();

  jobTracker.addJob(job.getJobID(),job);

  taskAttemptID[0]=job.findMapTask(trackers[0]);

  taskAttemptID[1]=job.findMapTask(trackers[1]);

  taskAttemptID[2]=job.findReduceTask(trackers[2]);

  job.finishTask(taskAttemptID[0]);

  job.finishTask(taskAttemptID[1]);

  job.finishTask(taskAttemptID[2]);

  jobTracker.finalizeJob(job);

  assertTrue("Mismatch in map tasks launched",mi.numMapTasksLaunched == numMaps);

  assertTrue("Mismatch in map tasks completed",mi.numMapTasksCompleted == numMaps);

  assertTrue("Mismatch in map tasks failed",mi.numMapTasksFailed == 0);

  assertTrue("Mismatch in reduce tasks launched",mi.numReduceTasksLaunched == numReds);

  assertTrue("Mismatch in reduce tasks completed",mi.numReduceTasksCompleted == numReds);

  assertTrue("Mismatch in reduce tasks failed",mi.numReduceTasksFailed == 0);

  assertTrue("Mismatch in num Jobs submitted",mi.numJobsSubmitted == 1);

  assertTrue("Mismatch in num map slots",mi.numMapSlots == (mapSlotsPerTracker * trackers.length));

  assertTrue("Mismatch in num reduce slots",mi.numReduceSlots == (reduceSlotsPerTracker * trackers.length));

  assertTrue("No heartbeats were recorded, but at least one was sent.",mi.numHeartbeats > 0);

}

Location: TestJobTrackerInstrumentation.java

Content: 

public void testOccupiedSlotCounts() throws Exception {

  TaskTrackerStatus[] status=new TaskTrackerStatus[trackers.length];

  List<TaskStatus> list=new ArrayList<TaskStatus>();

  int mapSlotsPerTask=2;

  TaskStatus ts=TaskStatus.createTaskStatus(true,new TaskAttemptID("jt",1,TaskType.MAP,0,0),0.0f,mapSlotsPerTask,TaskStatus.State.RUNNING,"","",trackers[0],TaskStatus.Phase.MAP,null);

  list.add(ts);

  int mapSlotsPerTask1=1;

  ts=TaskStatus.createTaskStatus(true,new TaskAttemptID("jt",1,TaskType.MAP,0,0),0.0f,mapSlotsPerTask1,TaskStatus.State.RUNNING,"","",trackers[0],TaskStatus.Phase.MAP,null);

  list.add(ts);

  int reduceSlotsPerTask=3;

  ts=TaskStatus.createTaskStatus(false,new TaskAttemptID("jt",1,TaskType.REDUCE,0,0),0.0f,reduceSlotsPerTask,TaskStatus.State.RUNNING,"","",trackers[0],TaskStatus.Phase.REDUCE,null);

  list.add(ts);

  int reduceSlotsPerTask1=1;

  ts=TaskStatus.createTaskStatus(false,new TaskAttemptID("jt",1,TaskType.REDUCE,0,0),0.0f,reduceSlotsPerTask1,TaskStatus.State.RUNNING,"","",trackers[0],TaskStatus.Phase.REDUCE,null);

  list.add(ts);

  status=new TaskTrackerStatus[trackers.length];

  status[0]=getTTStatus(trackers[0],list);

  status[1]=getTTStatus(trackers[1],new ArrayList<TaskStatus>());

  status[2]=getTTStatus(trackers[2],new ArrayList<TaskStatus>());

  for (int i=0; i < trackers.length; i++) {

    FakeObjectUtilities.sendHeartBeat(jobTracker,status[i],false,false,trackers[i],responseId);

  }

  responseId++;

  assertEquals("Mismatch in map slots occupied",mapSlotsPerTask + mapSlotsPerTask1,mi.numOccupiedMapSlots);

  assertEquals("Mismatch in reduce slots occupied",reduceSlotsPerTask + reduceSlotsPerTask1,mi.numOccupiedReduceSlots);

  assertEquals("Mismatch in num  running maps",2,mi.numRunningMaps);

  assertEquals("Mismatch in num running reduces",2,mi.numRunningReduces);

  status=new TaskTrackerStatus[1];

  status[0]=getTTStatus(trackers[0],new ArrayList<TaskStatus>());

  FakeObjectUtilities.sendHeartBeat(jobTracker,status[0],false,false,trackers[0],responseId);

  assertEquals("Mismatch in map slots occupied",0,mi.numOccupiedMapSlots);

  assertEquals("Mismatch in reduce slots occupied",0,mi.numOccupiedReduceSlots);

  assertEquals("Mismatch in num  running maps",0,mi.numRunningMaps);

  assertEquals("Mismatch in num running reduces",0,mi.numRunningReduces);

}

Location: TestJobTrackerInstrumentation.java

Content: 

public void testReservedSlots() throws IOException {

  JobConf conf=new JobConf();

  conf.setNumMapTasks(1);

  conf.setNumReduceTasks(1);

  conf.setSpeculativeExecution(false);

  TaskTracker tt2=jobTracker.getTaskTracker(trackers[1]);

  TaskTrackerStatus status2=new TaskTrackerStatus(trackers[1],JobInProgress.convertTrackerNameToHostName(trackers[1]),0,new ArrayList<TaskStatus>(),0,2,2);

  tt2.setStatus(status2);

  fakeJob=new FakeJobInProgress(conf,jobTracker);

  fakeJob.setClusterSize(3);

  fakeJob.initTasks();

  FakeObjectUtilities.sendHeartBeat(jobTracker,status2,false,true,trackers[1],responseId);

  responseId++;

  assertEquals("Mismtach in reserved map slots",numMapSlotsToReserve,mi.numReservedMapSlots);

  assertEquals("Mismtach in reserved red slots",numReduceSlotsToReserve,mi.numReservedReduceSlots);

}

