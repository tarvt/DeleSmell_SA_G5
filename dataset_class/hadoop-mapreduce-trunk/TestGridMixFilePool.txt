Location: TestGridMixFilePool.java

Content: 

private void createFiles(Path inputDir,int[] fileSizes) throws Exception {

  for (  int size : fileSizes) {

    UtilsForGridmix.createFile(size,inputDir,conf);

  }

}

Location: TestGridMixFilePool.java

Content: 

@Test public void testFilesCountAndSizesForSpecifiedFilePool() throws Exception {

  conf=remoteClient.getDaemonConf();

  final long inputSizeInMB=clusterSize * 200;

  int[] fileSizesInMB={50,100,400,50,300,10,60,40,20,10,500};

  long targetSize=Long.MAX_VALUE;

  final int expFileCount=clusterSize + 4;

  String[] runtimeValues={"LOADJOB",SubmitterUserResolver.class.getName(),"STRESS",inputSizeInMB + "m","file:///dev/null"};

  String[] otherArgs={"-D",GridMixConfig.GRIDMIX_DISTCACHE_ENABLE + "=false","-D",GridMixConfig.GRIDMIX_COMPRESSION_ENABLE + "=false"};

  int exitCode=UtilsForGridmix.runGridmixJob(gridmixDir,conf,GridMixRunMode.DATA_GENERATION.getValue(),runtimeValues,otherArgs);

  Assert.assertEquals("Data generation has failed.",0,exitCode);

  createFiles(new Path(gridmixDir,"input"),fileSizesInMB);

  conf.setLong(FilePool.GRIDMIX_MIN_FILE,100 * 1024 * 1024);

  FilePool fpool=new FilePool(conf,new Path(gridmixDir,"input"));

  fpool.refresh();

  verifyFilesSizeAndCountForSpecifiedPool(expFileCount,targetSize,fpool);

}

Location: TestGridMixFilePool.java

Content: 

private void verifyFilesSizeAndCountForSpecifiedPool(int expFileCount,long minFileSize,FilePool pool) throws IOException {

  final ArrayList<FileStatus> files=new ArrayList<FileStatus>();

  long filesSizeInBytes=pool.getInputFiles(minFileSize,files);

  long actFilesSizeInMB=filesSizeInBytes / (1024 * 1024);

  long expFilesSizeInMB=(clusterSize * 200) + 1300;

  Assert.assertEquals("Files Size has not matched for specified pool.",expFilesSizeInMB,actFilesSizeInMB);

  int actFileCount=files.size();

  Assert.assertEquals("File count has not matched.",expFileCount,actFileCount);

  int count=0;

  for (  FileStatus fstat : files) {

    String fp=fstat.getPath().toString();

    count=count + ((fp.indexOf("datafile_") > 0) ? 0 : 1);

  }

  Assert.assertEquals("Total folders are not matched with cluster size",clusterSize,count);

}

