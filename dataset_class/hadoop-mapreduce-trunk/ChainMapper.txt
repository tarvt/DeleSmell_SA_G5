Location: ChainMapper.java

Content: 

/** 

 * Adds a  {@link Mapper} class to the chain mapper.<p> The key and values are passed from one element of the chain to the next, by value. For the added Mapper the configuration given for it, <code>mapperConf</code>, have precedence over the job's Configuration. This precedence is in effect when the task is running. </p> <p> IMPORTANT: There is no need to specify the output key/value classes for the ChainMapper, this is done by the addMapper for the last mapper in the chain </p>

 * @param job The job.

 * @param klass the Mapper class to add.

 * @param inputKeyClass mapper input key class.

 * @param inputValueClass mapper input value class.

 * @param outputKeyClass mapper output key class.

 * @param outputValueClass mapper output value class.

 * @param mapperConf a configuration for the Mapper class. It is recommended to use a Configuration without default values using the <code>Configuration(boolean loadDefaults)</code> constructor with FALSE.

 */

public static void addMapper(Job job,Class<? extends Mapper> klass,Class<?> inputKeyClass,Class<?> inputValueClass,Class<?> outputKeyClass,Class<?> outputValueClass,Configuration mapperConf) throws IOException {

  job.setMapperClass(ChainMapper.class);

  job.setMapOutputKeyClass(outputKeyClass);

  job.setMapOutputValueClass(outputValueClass);

  Chain.addMapper(true,job,klass,inputKeyClass,inputValueClass,outputKeyClass,outputValueClass,mapperConf);

}

Location: ChainMapper.java

Content: 

/** 

 * Constructor.

 */

public ChainMapper(){

  chain=new Chain(true);

}

