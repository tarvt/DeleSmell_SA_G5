Location: TestCombineFileInputFormat.java

Content: 

private void splitRealFiles(String[] args) throws IOException {

  Configuration conf=new Configuration();

  Job job=Job.getInstance();

  FileSystem fs=FileSystem.get(conf);

  if (!(fs instanceof DistributedFileSystem)) {

    throw new IOException("Wrong file system: " + fs.getClass().getName());

  }

  int blockSize=conf.getInt("dfs.block.size",128 * 1024 * 1024);

  DummyInputFormat inFormat=new DummyInputFormat();

  for (int i=0; i < args.length; i++) {

    FileInputFormat.addInputPaths(job,args[i]);

  }

  inFormat.setMinSplitSizeRack(blockSize);

  inFormat.setMaxSplitSize(10 * blockSize);

  List<InputSplit> splits=inFormat.getSplits(job);

  System.out.println("Total number of splits " + splits.size());

  for (int i=0; i < splits.size(); ++i) {

    CombineFileSplit fileSplit=(CombineFileSplit)splits.get(i);

    System.out.println("Split[" + i + "] "+ fileSplit);

  }

}

Location: TestCombineFileInputFormat.java

Content: 

/** 

 * Test that CFIF can handle missing blocks.

 */

public void testMissingBlocks() throws IOException {

  String namenode=null;

  MiniDFSCluster dfs=null;

  FileSystem fileSys=null;

  String testName="testMissingBlocks";

  try {

    Configuration conf=new Configuration();

    conf.set("fs.hdfs.impl",MissingBlockFileSystem.class.getName());

    conf.setBoolean("dfs.replication.considerLoad",false);

    dfs=new MiniDFSCluster(conf,1,true,rack1,hosts1);

    dfs.waitActive();

    namenode=(dfs.getFileSystem()).getUri().getHost() + ":" + (dfs.getFileSystem()).getUri().getPort();

    fileSys=dfs.getFileSystem();

    if (!fileSys.mkdirs(inDir)) {

      throw new IOException("Mkdirs failed to create " + inDir.toString());

    }

    Path file1=new Path(dir1 + "/file1");

    writeFile(conf,file1,(short)1,1);

    Path file5=new Path(dir5 + "/file5");

    writeFile(conf,file5,(short)1,1);

    ((MissingBlockFileSystem)fileSys).setFileWithMissingBlocks(file1.toUri().getPath());

    DummyInputFormat inFormat=new DummyInputFormat();

    Job job=Job.getInstance(conf);

    FileInputFormat.setInputPaths(job,dir1 + "," + dir5);

    List<InputSplit> splits=inFormat.getSplits(job);

    System.out.println("Made splits(Test0): " + splits.size());

    for (    InputSplit split : splits) {

      System.out.println("File split(Test0): " + split);

    }

    assertEquals(splits.size(),1);

    CombineFileSplit fileSplit=(CombineFileSplit)splits.get(0);

    assertEquals(2,fileSplit.getNumPaths());

    assertEquals(1,fileSplit.getLocations().length);

    assertEquals(file1.getName(),fileSplit.getPath(0).getName());

    assertEquals(0,fileSplit.getOffset(0));

    assertEquals(BLOCKSIZE,fileSplit.getLength(0));

    assertEquals(file5.getName(),fileSplit.getPath(1).getName());

    assertEquals(0,fileSplit.getOffset(1));

    assertEquals(BLOCKSIZE,fileSplit.getLength(1));

    assertEquals(hosts1[0],fileSplit.getLocations()[0]);

  }

  finally {

    if (dfs != null) {

      dfs.shutdown();

    }

  }

}

Location: TestCombineFileInputFormat.java

Content: 

public void testRecordReaderInit() throws InterruptedException, IOException {

  TaskAttemptID taskId=new TaskAttemptID("jt",0,TaskType.MAP,0,0);

  Configuration conf1=new Configuration();

  conf1.set(DUMMY_KEY,"STATE1");

  TaskAttemptContext context1=new TaskAttemptContextImpl(conf1,taskId);

  InputFormat inputFormat=new ChildRRInputFormat();

  Path[] files={new Path("file1")};

  long[] lengths={1};

  CombineFileSplit split=new CombineFileSplit(files,lengths);

  RecordReader rr=inputFormat.createRecordReader(split,context1);

  assertTrue("Unexpected RR type!",rr instanceof CombineFileRecordReader);

  assertEquals("Invalid initial dummy key value","STATE1",rr.getCurrentKey().toString());

  Configuration conf2=new Configuration();

  conf2.set(DUMMY_KEY,"STATE2");

  TaskAttemptContext context2=new TaskAttemptContextImpl(conf2,taskId);

  rr.initialize(split,context2);

  assertEquals("Invalid secondary dummy key value","STATE2",rr.getCurrentKey().toString());

}

Location: TestCombineFileInputFormat.java

Content: 

public void testReinit() throws Exception {

  TaskAttemptID taskId=new TaskAttemptID("jt",0,TaskType.MAP,0,0);

  Configuration conf=new Configuration();

  TaskAttemptContext context=new TaskAttemptContextImpl(conf,taskId);

  InputFormat inputFormat=new ChildRRInputFormat();

  Path[] files={new Path("file1"),new Path("file2")};

  long[] lengths={1,1};

  CombineFileSplit split=new CombineFileSplit(files,lengths);

  RecordReader rr=inputFormat.createRecordReader(split,context);

  assertTrue("Unexpected RR type!",rr instanceof CombineFileRecordReader);

  rr.initialize(split,context);

  assertTrue(rr.nextKeyValue());

  assertEquals("file1",rr.getCurrentValue().toString());

  assertTrue(rr.nextKeyValue());

  assertEquals("file2",rr.getCurrentValue().toString());

  assertFalse(rr.nextKeyValue());

}

Location: TestCombineFileInputFormat.java

Content: 

public void testSplitPlacement() throws IOException {

  MiniDFSCluster dfs=null;

  FileSystem fileSys=null;

  try {

    Configuration conf=new Configuration();

    conf.setBoolean("dfs.replication.considerLoad",false);

    dfs=new MiniDFSCluster(conf,1,true,rack1,hosts1);

    dfs.waitActive();

    fileSys=dfs.getFileSystem();

    if (!fileSys.mkdirs(inDir)) {

      throw new IOException("Mkdirs failed to create " + inDir.toString());

    }

    Path file1=new Path(dir1 + "/file1");

    writeFile(conf,file1,(short)1,1);

    Path file5=new Path(dir5 + "/file5");

    writeFile(conf,file5,(short)1,1);

    DummyInputFormat inFormat=new DummyInputFormat();

    Job job=Job.getInstance(conf);

    FileInputFormat.setInputPaths(job,dir1 + "," + dir5);

    List<InputSplit> splits=inFormat.getSplits(job);

    System.out.println("Made splits(Test0): " + splits.size());

    for (    InputSplit split : splits) {

      System.out.println("File split(Test0): " + split);

    }

    assertEquals(splits.size(),1);

    CombineFileSplit fileSplit=(CombineFileSplit)splits.get(0);

    assertEquals(2,fileSplit.getNumPaths());

    assertEquals(1,fileSplit.getLocations().length);

    assertEquals(file1.getName(),fileSplit.getPath(0).getName());

    assertEquals(0,fileSplit.getOffset(0));

    assertEquals(BLOCKSIZE,fileSplit.getLength(0));

    assertEquals(file5.getName(),fileSplit.getPath(1).getName());

    assertEquals(0,fileSplit.getOffset(1));

    assertEquals(BLOCKSIZE,fileSplit.getLength(1));

    assertEquals(hosts1[0],fileSplit.getLocations()[0]);

    dfs.startDataNodes(conf,1,true,null,rack2,hosts2,null);

    dfs.waitActive();

    Path file2=new Path(dir2 + "/file2");

    writeFile(conf,file2,(short)2,2);

    inFormat=new DummyInputFormat();

    FileInputFormat.setInputPaths(job,dir1 + "," + dir2);

    inFormat.setMinSplitSizeRack(BLOCKSIZE);

    splits=inFormat.getSplits(job);

    System.out.println("Made splits(Test1): " + splits.size());

    for (    InputSplit split : splits) {

      System.out.println("File split(Test1): " + split);

    }

    assertEquals(splits.size(),2);

    fileSplit=(CombineFileSplit)splits.get(0);

    assertEquals(fileSplit.getNumPaths(),2);

    assertEquals(fileSplit.getLocations().length,1);

    assertEquals(fileSplit.getPath(0).getName(),file2.getName());

    assertEquals(fileSplit.getOffset(0),0);

    assertEquals(fileSplit.getLength(0),BLOCKSIZE);

    assertEquals(fileSplit.getPath(1).getName(),file2.getName());

    assertEquals(fileSplit.getOffset(1),BLOCKSIZE);

    assertEquals(fileSplit.getLength(1),BLOCKSIZE);

    assertEquals(fileSplit.getLocations()[0],hosts2[0]);

    fileSplit=(CombineFileSplit)splits.get(1);

    assertEquals(fileSplit.getNumPaths(),1);

    assertEquals(fileSplit.getLocations().length,1);

    assertEquals(fileSplit.getPath(0).getName(),file1.getName());

    assertEquals(fileSplit.getOffset(0),0);

    assertEquals(fileSplit.getLength(0),BLOCKSIZE);

    assertEquals(fileSplit.getLocations()[0],hosts1[0]);

    dfs.startDataNodes(conf,1,true,null,rack3,hosts3,null);

    dfs.waitActive();

    Path file3=new Path(dir3 + "/file3");

    writeFile(conf,new Path(dir3 + "/file3"),(short)3,3);

    inFormat=new DummyInputFormat();

    FileInputFormat.setInputPaths(job,dir1 + "," + dir2+ ","+ dir3);

    inFormat.setMinSplitSizeRack(BLOCKSIZE);

    splits=inFormat.getSplits(job);

    for (    InputSplit split : splits) {

      System.out.println("File split(Test2): " + split);

    }

    assertEquals(splits.size(),3);

    fileSplit=(CombineFileSplit)splits.get(0);

    assertEquals(fileSplit.getNumPaths(),3);

    assertEquals(fileSplit.getLocations().length,1);

    assertEquals(fileSplit.getPath(0).getName(),file3.getName());

    assertEquals(fileSplit.getOffset(0),0);

    assertEquals(fileSplit.getLength(0),BLOCKSIZE);

    assertEquals(fileSplit.getPath(1).getName(),file3.getName());

    assertEquals(fileSplit.getOffset(1),BLOCKSIZE);

    assertEquals(fileSplit.getLength(1),BLOCKSIZE);

    assertEquals(fileSplit.getPath(2).getName(),file3.getName());

    assertEquals(fileSplit.getOffset(2),2 * BLOCKSIZE);

    assertEquals(fileSplit.getLength(2),BLOCKSIZE);

    assertEquals(fileSplit.getLocations()[0],hosts3[0]);

    fileSplit=(CombineFileSplit)splits.get(1);

    assertEquals(fileSplit.getNumPaths(),2);

    assertEquals(fileSplit.getLocations().length,1);

    assertEquals(fileSplit.getPath(0).getName(),file2.getName());

    assertEquals(fileSplit.getOffset(0),0);

    assertEquals(fileSplit.getLength(0),BLOCKSIZE);

    assertEquals(fileSplit.getPath(1).getName(),file2.getName());

    assertEquals(fileSplit.getOffset(1),BLOCKSIZE);

    assertEquals(fileSplit.getLength(1),BLOCKSIZE);

    assertEquals(fileSplit.getLocations()[0],hosts2[0]);

    fileSplit=(CombineFileSplit)splits.get(2);

    assertEquals(fileSplit.getNumPaths(),1);

    assertEquals(fileSplit.getLocations().length,1);

    assertEquals(fileSplit.getPath(0).getName(),file1.getName());

    assertEquals(fileSplit.getOffset(0),0);

    assertEquals(fileSplit.getLength(0),BLOCKSIZE);

    assertEquals(fileSplit.getLocations()[0],hosts1[0]);

    Path file4=new Path(dir4 + "/file4");

    writeFile(conf,file4,(short)3,3);

    inFormat=new DummyInputFormat();

    FileInputFormat.setInputPaths(job,dir1 + "," + dir2+ ","+ dir3+ ","+ dir4);

    inFormat.setMinSplitSizeRack(BLOCKSIZE);

    splits=inFormat.getSplits(job);

    for (    InputSplit split : splits) {

      System.out.println("File split(Test3): " + split);

    }

    assertEquals(splits.size(),3);

    fileSplit=(CombineFileSplit)splits.get(0);

    assertEquals(fileSplit.getNumPaths(),6);

    assertEquals(fileSplit.getLocations().length,1);

    assertEquals(fileSplit.getPath(0).getName(),file3.getName());

    assertEquals(fileSplit.getOffset(0),0);

    assertEquals(fileSplit.getLength(0),BLOCKSIZE);

    assertEquals(fileSplit.getPath(1).getName(),file3.getName());

    assertEquals(fileSplit.getOffset(1),BLOCKSIZE);

    assertEquals(fileSplit.getLength(1),BLOCKSIZE);

    assertEquals(fileSplit.getPath(2).getName(),file3.getName());

    assertEquals(fileSplit.getOffset(2),2 * BLOCKSIZE);

    assertEquals(fileSplit.getLength(2),BLOCKSIZE);

    assertEquals(fileSplit.getLocations()[0],hosts3[0]);

    fileSplit=(CombineFileSplit)splits.get(1);

    assertEquals(fileSplit.getNumPaths(),2);

    assertEquals(fileSplit.getLocations().length,1);

    assertEquals(fileSplit.getPath(0).getName(),file2.getName());

    assertEquals(fileSplit.getOffset(0),0);

    assertEquals(fileSplit.getLength(0),BLOCKSIZE);

    assertEquals(fileSplit.getPath(1).getName(),file2.getName());

    assertEquals(fileSplit.getOffset(1),BLOCKSIZE);

    assertEquals(fileSplit.getLength(1),BLOCKSIZE);

    assertEquals(fileSplit.getLocations()[0],hosts2[0]);

    fileSplit=(CombineFileSplit)splits.get(2);

    assertEquals(fileSplit.getNumPaths(),1);

    assertEquals(fileSplit.getLocations().length,1);

    assertEquals(fileSplit.getPath(0).getName(),file1.getName());

    assertEquals(fileSplit.getOffset(0),0);

    assertEquals(fileSplit.getLength(0),BLOCKSIZE);

    assertEquals(fileSplit.getLocations()[0],hosts1[0]);

    inFormat=new DummyInputFormat();

    inFormat.setMinSplitSizeNode(BLOCKSIZE);

    inFormat.setMaxSplitSize(2 * BLOCKSIZE);

    FileInputFormat.setInputPaths(job,dir1 + "," + dir2+ ","+ dir3+ ","+ dir4);

    splits=inFormat.getSplits(job);

    for (    InputSplit split : splits) {

      System.out.println("File split(Test4): " + split);

    }

    assertEquals(splits.size(),5);

    fileSplit=(CombineFileSplit)splits.get(0);

    assertEquals(fileSplit.getNumPaths(),2);

    assertEquals(fileSplit.getLocations().length,1);

    assertEquals(fileSplit.getPath(0).getName(),file3.getName());

    assertEquals(fileSplit.getOffset(0),0);

    assertEquals(fileSplit.getLength(0),BLOCKSIZE);

    assertEquals(fileSplit.getPath(1).getName(),file3.getName());

    assertEquals(fileSplit.getOffset(1),BLOCKSIZE);

    assertEquals(fileSplit.getLength(1),BLOCKSIZE);

    assertEquals(fileSplit.getLocations()[0],"host3.rack3.com");

    fileSplit=(CombineFileSplit)splits.get(1);

    assertEquals(fileSplit.getPath(0).getName(),file3.getName());

    assertEquals(fileSplit.getOffset(0),2 * BLOCKSIZE);

    assertEquals(fileSplit.getLength(0),BLOCKSIZE);

    assertEquals(fileSplit.getPath(1).getName(),file4.getName());

    assertEquals(fileSplit.getOffset(1),0);

    assertEquals(fileSplit.getLength(1),BLOCKSIZE);

    assertEquals(fileSplit.getLocations()[0],"host3.rack3.com");

    fileSplit=(CombineFileSplit)splits.get(2);

    assertEquals(fileSplit.getNumPaths(),2);

    assertEquals(fileSplit.getLocations().length,1);

    assertEquals(fileSplit.getPath(0).getName(),file4.getName());

    assertEquals(fileSplit.getOffset(0),BLOCKSIZE);

    assertEquals(fileSplit.getLength(0),BLOCKSIZE);

    assertEquals(fileSplit.getPath(1).getName(),file4.getName());

    assertEquals(fileSplit.getOffset(1),2 * BLOCKSIZE);

    assertEquals(fileSplit.getLength(1),BLOCKSIZE);

    assertEquals(fileSplit.getLocations()[0],"host3.rack3.com");

    inFormat=new DummyInputFormat();

    inFormat.setMinSplitSizeNode(BLOCKSIZE);

    inFormat.setMaxSplitSize(3 * BLOCKSIZE);

    FileInputFormat.setInputPaths(job,dir1 + "," + dir2+ ","+ dir3+ ","+ dir4);

    splits=inFormat.getSplits(job);

    for (    InputSplit split : splits) {

      System.out.println("File split(Test5): " + split);

    }

    assertEquals(splits.size(),4);

    fileSplit=(CombineFileSplit)splits.get(0);

    assertEquals(fileSplit.getNumPaths(),3);

    assertEquals(fileSplit.getLocations().length,1);

    assertEquals(fileSplit.getPath(0).getName(),file3.getName());

    assertEquals(fileSplit.getOffset(0),0);

    assertEquals(fileSplit.getLength(0),BLOCKSIZE);

    assertEquals(fileSplit.getPath(1).getName(),file3.getName());

    assertEquals(fileSplit.getOffset(1),BLOCKSIZE);

    assertEquals(fileSplit.getLength(1),BLOCKSIZE);

    assertEquals(fileSplit.getPath(2).getName(),file3.getName());

    assertEquals(fileSplit.getOffset(2),2 * BLOCKSIZE);

    assertEquals(fileSplit.getLength(2),BLOCKSIZE);

    assertEquals(fileSplit.getLocations()[0],"host3.rack3.com");

    fileSplit=(CombineFileSplit)splits.get(1);

    assertEquals(fileSplit.getPath(0).getName(),file4.getName());

    assertEquals(fileSplit.getOffset(0),0);

    assertEquals(fileSplit.getLength(0),BLOCKSIZE);

    assertEquals(fileSplit.getPath(1).getName(),file4.getName());

    assertEquals(fileSplit.getOffset(1),BLOCKSIZE);

    assertEquals(fileSplit.getLength(1),BLOCKSIZE);

    assertEquals(fileSplit.getPath(2).getName(),file4.getName());

    assertEquals(fileSplit.getOffset(2),2 * BLOCKSIZE);

    assertEquals(fileSplit.getLength(2),BLOCKSIZE);

    assertEquals(fileSplit.getLocations()[0],"host3.rack3.com");

    fileSplit=(CombineFileSplit)splits.get(2);

    assertEquals(fileSplit.getNumPaths(),2);

    assertEquals(fileSplit.getLocations().length,1);

    assertEquals(fileSplit.getPath(0).getName(),file2.getName());

    assertEquals(fileSplit.getOffset(0),0);

    assertEquals(fileSplit.getLength(0),BLOCKSIZE);

    assertEquals(fileSplit.getPath(1).getName(),file2.getName());

    assertEquals(fileSplit.getOffset(1),BLOCKSIZE);

    assertEquals(fileSplit.getLength(1),BLOCKSIZE);

    assertEquals(fileSplit.getLocations()[0],"host2.rack2.com");

    fileSplit=(CombineFileSplit)splits.get(3);

    assertEquals(fileSplit.getNumPaths(),1);

    assertEquals(fileSplit.getLocations().length,1);

    assertEquals(fileSplit.getPath(0).getName(),file1.getName());

    assertEquals(fileSplit.getOffset(0),0);

    assertEquals(fileSplit.getLength(0),BLOCKSIZE);

    assertEquals(fileSplit.getLocations()[0],"host1.rack1.com");

    inFormat=new DummyInputFormat();

    inFormat.setMaxSplitSize(4 * BLOCKSIZE);

    FileInputFormat.setInputPaths(job,dir1 + "," + dir2+ ","+ dir3+ ","+ dir4);

    splits=inFormat.getSplits(job);

    for (    InputSplit split : splits) {

      System.out.println("File split(Test6): " + split);

    }

    assertEquals(splits.size(),3);

    fileSplit=(CombineFileSplit)splits.get(0);

    assertEquals(fileSplit.getNumPaths(),4);

    assertEquals(fileSplit.getLocations().length,1);

    assertEquals(fileSplit.getPath(0).getName(),file3.getName());

    assertEquals(fileSplit.getOffset(0),0);

    assertEquals(fileSplit.getLength(0),BLOCKSIZE);

    assertEquals(fileSplit.getPath(1).getName(),file3.getName());

    assertEquals(fileSplit.getOffset(1),BLOCKSIZE);

    assertEquals(fileSplit.getLength(1),BLOCKSIZE);

    assertEquals(fileSplit.getPath(2).getName(),file3.getName());

    assertEquals(fileSplit.getOffset(2),2 * BLOCKSIZE);

    assertEquals(fileSplit.getLength(2),BLOCKSIZE);

    assertEquals(fileSplit.getLocations()[0],"host3.rack3.com");

    fileSplit=(CombineFileSplit)splits.get(1);

    assertEquals(fileSplit.getNumPaths(),4);

    assertEquals(fileSplit.getPath(0).getName(),file2.getName());

    assertEquals(fileSplit.getOffset(0),0);

    assertEquals(fileSplit.getLength(0),BLOCKSIZE);

    assertEquals(fileSplit.getPath(1).getName(),file2.getName());

    assertEquals(fileSplit.getOffset(1),BLOCKSIZE);

    assertEquals(fileSplit.getLength(1),BLOCKSIZE);

    assertEquals(fileSplit.getPath(2).getName(),file4.getName());

    assertEquals(fileSplit.getOffset(2),BLOCKSIZE);

    assertEquals(fileSplit.getLength(2),BLOCKSIZE);

    assertEquals(fileSplit.getPath(3).getName(),file4.getName());

    assertEquals(fileSplit.getOffset(3),2 * BLOCKSIZE);

    assertEquals(fileSplit.getLength(3),BLOCKSIZE);

    assertEquals(fileSplit.getLocations()[0],"host2.rack2.com");

    fileSplit=(CombineFileSplit)splits.get(2);

    assertEquals(fileSplit.getNumPaths(),1);

    assertEquals(fileSplit.getLocations().length,1);

    assertEquals(fileSplit.getPath(0).getName(),file1.getName());

    assertEquals(fileSplit.getOffset(0),0);

    assertEquals(fileSplit.getLength(0),BLOCKSIZE);

    assertEquals(fileSplit.getLocations()[0],hosts1[0]);

    inFormat=new DummyInputFormat();

    inFormat.setMaxSplitSize(7 * BLOCKSIZE);

    inFormat.setMinSplitSizeNode(3 * BLOCKSIZE);

    inFormat.setMinSplitSizeRack(3 * BLOCKSIZE);

    FileInputFormat.setInputPaths(job,dir1 + "," + dir2+ ","+ dir3+ ","+ dir4);

    splits=inFormat.getSplits(job);

    for (    InputSplit split : splits) {

      System.out.println("File split(Test7): " + split);

    }

    assertEquals(splits.size(),2);

    fileSplit=(CombineFileSplit)splits.get(0);

    assertEquals(fileSplit.getNumPaths(),6);

    assertEquals(fileSplit.getLocations().length,1);

    assertEquals(fileSplit.getLocations()[0],"host3.rack3.com");

    fileSplit=(CombineFileSplit)splits.get(1);

    assertEquals(fileSplit.getNumPaths(),3);

    assertEquals(fileSplit.getLocations().length,1);

    assertEquals(fileSplit.getLocations()[0],"host1.rack1.com");

    inFormat=new DummyInputFormat();

    FileInputFormat.addInputPath(job,inDir);

    inFormat.setMinSplitSizeRack(1);

    inFormat.createPool(new TestFilter(dir1),new TestFilter(dir2));

    splits=inFormat.getSplits(job);

    for (    InputSplit split : splits) {

      System.out.println("File split(Test1): " + split);

    }

    assertEquals(splits.size(),3);

    fileSplit=(CombineFileSplit)splits.get(0);

    assertEquals(fileSplit.getNumPaths(),2);

    assertEquals(fileSplit.getLocations().length,1);

    assertEquals(fileSplit.getLocations()[0],hosts2[0]);

    fileSplit=(CombineFileSplit)splits.get(1);

    assertEquals(fileSplit.getNumPaths(),1);

    assertEquals(fileSplit.getLocations().length,1);

    assertEquals(fileSplit.getLocations()[0],hosts1[0]);

    fileSplit=(CombineFileSplit)splits.get(2);

    assertEquals(fileSplit.getNumPaths(),6);

    assertEquals(fileSplit.getLocations().length,1);

    assertEquals(fileSplit.getLocations()[0],hosts3[0]);

    int numPools=100;

    int numFiles=1000;

    DummyInputFormat1 inFormat1=new DummyInputFormat1();

    for (int i=0; i < numFiles; i++) {

      FileInputFormat.setInputPaths(job,file1);

    }

    inFormat1.setMinSplitSizeRack(1);

    final Path dirNoMatch1=new Path(inDir,"/dirxx");

    final Path dirNoMatch2=new Path(inDir,"/diryy");

    for (int i=0; i < numPools; i++) {

      inFormat1.createPool(new TestFilter(dirNoMatch1),new TestFilter(dirNoMatch2));

    }

    long start=System.currentTimeMillis();

    splits=inFormat1.getSplits(job);

    long end=System.currentTimeMillis();

    System.out.println("Elapsed time for " + numPools + " pools "+ " and "+ numFiles+ " files is "+ ((end - start) / 1000)+ " seconds.");

    inFormat=new DummyInputFormat();

    inFormat.setMaxSplitSize(BLOCKSIZE / 2);

    FileInputFormat.setInputPaths(job,dir3);

    splits=inFormat.getSplits(job);

    for (    InputSplit split : splits) {

      System.out.println("File split(Test8): " + split);

    }

    assertEquals(6,splits.size());

  }

  finally {

    if (dfs != null) {

      dfs.shutdown();

    }

  }

}

Location: TestCombineFileInputFormat.java

Content: 

public void testSplitPlacementForCompressedFiles() throws IOException {

  MiniDFSCluster dfs=null;

  FileSystem fileSys=null;

  try {

    Configuration conf=new Configuration();

    conf.setBoolean("dfs.replication.considerLoad",false);

    dfs=new MiniDFSCluster(conf,1,true,rack1,hosts1);

    dfs.waitActive();

    fileSys=dfs.getFileSystem();

    if (!fileSys.mkdirs(inDir)) {

      throw new IOException("Mkdirs failed to create " + inDir.toString());

    }

    Path file1=new Path(dir1 + "/file1.gz");

    FileStatus f1=writeGzipFile(conf,file1,(short)1,1);

    Path file5=new Path(dir5 + "/file5.gz");

    FileStatus f5=writeGzipFile(conf,file5,(short)1,1);

    DummyInputFormat inFormat=new DummyInputFormat();

    Job job=Job.getInstance(conf);

    FileInputFormat.setInputPaths(job,dir1 + "," + dir5);

    List<InputSplit> splits=inFormat.getSplits(job);

    System.out.println("Made splits(Test0): " + splits.size());

    for (    InputSplit split : splits) {

      System.out.println("File split(Test0): " + split);

    }

    assertEquals(splits.size(),1);

    CombineFileSplit fileSplit=(CombineFileSplit)splits.get(0);

    assertEquals(2,fileSplit.getNumPaths());

    assertEquals(1,fileSplit.getLocations().length);

    assertEquals(file1.getName(),fileSplit.getPath(0).getName());

    assertEquals(0,fileSplit.getOffset(0));

    assertEquals(f1.getLen(),fileSplit.getLength(0));

    assertEquals(file5.getName(),fileSplit.getPath(1).getName());

    assertEquals(0,fileSplit.getOffset(1));

    assertEquals(f5.getLen(),fileSplit.getLength(1));

    assertEquals(hosts1[0],fileSplit.getLocations()[0]);

    dfs.startDataNodes(conf,1,true,null,rack2,hosts2,null);

    dfs.waitActive();

    Path file2=new Path(dir2 + "/file2.gz");

    FileStatus f2=writeGzipFile(conf,file2,(short)2,2);

    inFormat=new DummyInputFormat();

    FileInputFormat.setInputPaths(job,dir1 + "," + dir2);

    inFormat.setMinSplitSizeRack(f1.getLen());

    splits=inFormat.getSplits(job);

    System.out.println("Made splits(Test1): " + splits.size());

    for (    InputSplit split : splits) {

      System.out.println("File split(Test1): " + split);

    }

    assertEquals(2,splits.size());

    fileSplit=(CombineFileSplit)splits.get(0);

    assertEquals(1,fileSplit.getNumPaths());

    assertEquals(1,fileSplit.getLocations().length);

    assertEquals(file2.getName(),fileSplit.getPath(0).getName());

    assertEquals(0,fileSplit.getOffset(0));

    assertEquals(f2.getLen(),fileSplit.getLength(0));

    assertEquals(hosts2[0],fileSplit.getLocations()[0]);

    fileSplit=(CombineFileSplit)splits.get(1);

    assertEquals(1,fileSplit.getNumPaths());

    assertEquals(1,fileSplit.getLocations().length);

    assertEquals(file1.getName(),fileSplit.getPath(0).getName());

    assertEquals(0,fileSplit.getOffset(0));

    assertEquals(f1.getLen(),fileSplit.getLength(0));

    assertEquals(hosts1[0],fileSplit.getLocations()[0]);

    dfs.startDataNodes(conf,1,true,null,rack3,hosts3,null);

    dfs.waitActive();

    Path file3=new Path(dir3 + "/file3.gz");

    FileStatus f3=writeGzipFile(conf,file3,(short)3,3);

    inFormat=new DummyInputFormat();

    FileInputFormat.setInputPaths(job,dir1 + "," + dir2+ ","+ dir3);

    inFormat.setMinSplitSizeRack(f1.getLen());

    splits=inFormat.getSplits(job);

    for (    InputSplit split : splits) {

      System.out.println("File split(Test2): " + split);

    }

    assertEquals(3,splits.size());

    fileSplit=(CombineFileSplit)splits.get(0);

    assertEquals(1,fileSplit.getNumPaths());

    assertEquals(1,fileSplit.getLocations().length);

    assertEquals(file3.getName(),fileSplit.getPath(0).getName());

    assertEquals(0,fileSplit.getOffset(0));

    assertEquals(f3.getLen(),fileSplit.getLength(0));

    assertEquals(hosts3[0],fileSplit.getLocations()[0]);

    fileSplit=(CombineFileSplit)splits.get(1);

    assertEquals(1,fileSplit.getNumPaths());

    assertEquals(1,fileSplit.getLocations().length);

    assertEquals(file2.getName(),fileSplit.getPath(0).getName());

    assertEquals(0,fileSplit.getOffset(0));

    assertEquals(f2.getLen(),fileSplit.getLength(0));

    assertEquals(hosts2[0],fileSplit.getLocations()[0]);

    fileSplit=(CombineFileSplit)splits.get(2);

    assertEquals(1,fileSplit.getNumPaths());

    assertEquals(1,fileSplit.getLocations().length);

    assertEquals(file1.getName(),fileSplit.getPath(0).getName());

    assertEquals(0,fileSplit.getOffset(0));

    assertEquals(f1.getLen(),fileSplit.getLength(0));

    assertEquals(hosts1[0],fileSplit.getLocations()[0]);

    Path file4=new Path(dir4 + "/file4.gz");

    FileStatus f4=writeGzipFile(conf,file4,(short)3,3);

    inFormat=new DummyInputFormat();

    FileInputFormat.setInputPaths(job,dir1 + "," + dir2+ ","+ dir3+ ","+ dir4);

    inFormat.setMinSplitSizeRack(f1.getLen());

    splits=inFormat.getSplits(job);

    for (    InputSplit split : splits) {

      System.out.println("File split(Test3): " + split);

    }

    assertEquals(3,splits.size());

    fileSplit=(CombineFileSplit)splits.get(0);

    assertEquals(2,fileSplit.getNumPaths());

    assertEquals(1,fileSplit.getLocations().length);

    assertEquals(file3.getName(),fileSplit.getPath(0).getName());

    assertEquals(0,fileSplit.getOffset(0));

    assertEquals(f3.getLen(),fileSplit.getLength(0));

    assertEquals(file4.getName(),fileSplit.getPath(1).getName());

    assertEquals(0,fileSplit.getOffset(1));

    assertEquals(f4.getLen(),fileSplit.getLength(1));

    assertEquals(hosts3[0],fileSplit.getLocations()[0]);

    fileSplit=(CombineFileSplit)splits.get(1);

    assertEquals(1,fileSplit.getNumPaths());

    assertEquals(1,fileSplit.getLocations().length);

    assertEquals(file2.getName(),fileSplit.getPath(0).getName());

    assertEquals(0,fileSplit.getOffset(0));

    assertEquals(f2.getLen(),fileSplit.getLength(0));

    assertEquals(hosts2[0],fileSplit.getLocations()[0]);

    fileSplit=(CombineFileSplit)splits.get(2);

    assertEquals(1,fileSplit.getNumPaths());

    assertEquals(1,fileSplit.getLocations().length);

    assertEquals(file1.getName(),fileSplit.getPath(0).getName());

    assertEquals(0,fileSplit.getOffset(0));

    assertEquals(f1.getLen(),fileSplit.getLength(0));

    assertEquals(hosts1[0],fileSplit.getLocations()[0]);

    inFormat=new DummyInputFormat();

    inFormat.setMinSplitSizeNode(f1.getLen());

    inFormat.setMaxSplitSize(f1.getLen());

    FileInputFormat.setInputPaths(job,dir1 + "," + dir2+ ","+ dir3+ ","+ dir4);

    splits=inFormat.getSplits(job);

    for (    InputSplit split : splits) {

      System.out.println("File split(Test4): " + split);

    }

    assertEquals(4,splits.size());

    fileSplit=(CombineFileSplit)splits.get(0);

    assertEquals(1,fileSplit.getNumPaths());

    assertEquals(1,fileSplit.getLocations().length);

    assertEquals(file3.getName(),fileSplit.getPath(0).getName());

    assertEquals(0,fileSplit.getOffset(0));

    assertEquals(f3.getLen(),fileSplit.getLength(0));

    assertEquals(hosts3[0],fileSplit.getLocations()[0]);

    fileSplit=(CombineFileSplit)splits.get(1);

    assertEquals(file4.getName(),fileSplit.getPath(0).getName());

    assertEquals(0,fileSplit.getOffset(0));

    assertEquals(f4.getLen(),fileSplit.getLength(0));

    assertEquals(hosts3[0],fileSplit.getLocations()[0]);

    fileSplit=(CombineFileSplit)splits.get(2);

    assertEquals(1,fileSplit.getNumPaths());

    assertEquals(1,fileSplit.getLocations().length);

    assertEquals(file2.getName(),fileSplit.getPath(0).getName());

    assertEquals(0,fileSplit.getOffset(0));

    assertEquals(f2.getLen(),fileSplit.getLength(0));

    assertEquals(hosts2[0],fileSplit.getLocations()[0]);

    fileSplit=(CombineFileSplit)splits.get(3);

    assertEquals(1,fileSplit.getNumPaths());

    assertEquals(1,fileSplit.getLocations().length);

    assertEquals(file1.getName(),fileSplit.getPath(0).getName());

    assertEquals(0,fileSplit.getOffset(0));

    assertEquals(f1.getLen(),fileSplit.getLength(0));

    assertEquals(hosts1[0],fileSplit.getLocations()[0]);

    inFormat=new DummyInputFormat();

    inFormat.setMinSplitSizeNode(f1.getLen());

    inFormat.setMaxSplitSize(2 * f1.getLen());

    FileInputFormat.setInputPaths(job,dir1 + "," + dir2+ ","+ dir3+ ","+ dir4);

    splits=inFormat.getSplits(job);

    for (    InputSplit split : splits) {

      System.out.println("File split(Test5): " + split);

    }

    assertEquals(3,splits.size());

    fileSplit=(CombineFileSplit)splits.get(0);

    assertEquals(2,fileSplit.getNumPaths());

    assertEquals(1,fileSplit.getLocations().length);

    assertEquals(file3.getName(),fileSplit.getPath(0).getName());

    assertEquals(0,fileSplit.getOffset(0));

    assertEquals(f3.getLen(),fileSplit.getLength(0));

    assertEquals(file4.getName(),fileSplit.getPath(1).getName());

    assertEquals(0,fileSplit.getOffset(1));

    assertEquals(f4.getLen(),fileSplit.getLength(1));

    assertEquals(hosts3[0],fileSplit.getLocations()[0]);

    fileSplit=(CombineFileSplit)splits.get(1);

    assertEquals(1,fileSplit.getNumPaths());

    assertEquals(1,fileSplit.getLocations().length);

    assertEquals(file2.getName(),fileSplit.getPath(0).getName());

    assertEquals(0,fileSplit.getOffset(0));

    assertEquals(f2.getLen(),fileSplit.getLength(0));

    assertEquals(hosts2[0],fileSplit.getLocations()[0]);

    fileSplit=(CombineFileSplit)splits.get(2);

    assertEquals(1,fileSplit.getNumPaths());

    assertEquals(1,fileSplit.getLocations().length);

    assertEquals(file1.getName(),fileSplit.getPath(0).getName());

    assertEquals(0,fileSplit.getOffset(0));

    assertEquals(f1.getLen(),fileSplit.getLength(0));

    assertEquals(hosts1[0],fileSplit.getLocations()[0]);

    inFormat=new DummyInputFormat();

    inFormat.setMinSplitSizeNode(2 * f1.getLen());

    inFormat.setMaxSplitSize(4 * f1.getLen());

    FileInputFormat.setInputPaths(job,dir1 + "," + dir2+ ","+ dir3+ ","+ dir4);

    splits=inFormat.getSplits(job);

    for (    InputSplit split : splits) {

      System.out.println("File split(Test6): " + split);

    }

    assertEquals(2,splits.size());

    fileSplit=(CombineFileSplit)splits.get(0);

    assertEquals(2,fileSplit.getNumPaths());

    assertEquals(1,fileSplit.getLocations().length);

    assertEquals(file3.getName(),fileSplit.getPath(0).getName());

    assertEquals(0,fileSplit.getOffset(0));

    assertEquals(f3.getLen(),fileSplit.getLength(0));

    assertEquals(file4.getName(),fileSplit.getPath(1).getName());

    assertEquals(0,fileSplit.getOffset(1));

    assertEquals(f4.getLen(),fileSplit.getLength(1));

    assertEquals(hosts3[0],fileSplit.getLocations()[0]);

    fileSplit=(CombineFileSplit)splits.get(1);

    assertEquals(2,fileSplit.getNumPaths());

    assertEquals(file1.getName(),fileSplit.getPath(0).getName());

    assertEquals(0,fileSplit.getOffset(0));

    assertEquals(f1.getLen(),fileSplit.getLength(0));

    assertEquals(file2.getName(),fileSplit.getPath(1).getName());

    assertEquals(0,fileSplit.getOffset(1),BLOCKSIZE);

    assertEquals(f2.getLen(),fileSplit.getLength(1));

    assertEquals(hosts1[0],fileSplit.getLocations()[0]);

    inFormat=new DummyInputFormat();

    inFormat.setMaxSplitSize(4 * f1.getLen());

    inFormat.setMinSplitSizeRack(4 * f1.getLen());

    FileInputFormat.setInputPaths(job,dir1 + "," + dir2+ ","+ dir3+ ","+ dir4);

    splits=inFormat.getSplits(job);

    for (    InputSplit split : splits) {

      System.out.println("File split(Test7): " + split);

    }

    assertEquals(1,splits.size());

    fileSplit=(CombineFileSplit)splits.get(0);

    assertEquals(4,fileSplit.getNumPaths());

    assertEquals(1,fileSplit.getLocations().length);

    assertEquals(hosts1[0],fileSplit.getLocations()[0]);

    inFormat=new DummyInputFormat();

    inFormat.setMinSplitSizeNode(4 * f1.getLen());

    FileInputFormat.setInputPaths(job,dir1 + "," + dir2+ ","+ dir3+ ","+ dir4);

    splits=inFormat.getSplits(job);

    for (    InputSplit split : splits) {

      System.out.println("File split(Test8): " + split);

    }

    assertEquals(1,splits.size());

    fileSplit=(CombineFileSplit)splits.get(0);

    assertEquals(4,fileSplit.getNumPaths());

    assertEquals(1,fileSplit.getLocations().length);

    assertEquals(hosts1[0],fileSplit.getLocations()[0]);

    inFormat=new DummyInputFormat();

    FileInputFormat.addInputPath(job,inDir);

    inFormat.setMinSplitSizeRack(1);

    inFormat.createPool(new TestFilter(dir1),new TestFilter(dir2));

    splits=inFormat.getSplits(job);

    for (    InputSplit split : splits) {

      System.out.println("File split(Test9): " + split);

    }

    assertEquals(3,splits.size());

    fileSplit=(CombineFileSplit)splits.get(0);

    assertEquals(1,fileSplit.getNumPaths());

    assertEquals(1,fileSplit.getLocations().length);

    assertEquals(hosts2[0],fileSplit.getLocations()[0]);

    fileSplit=(CombineFileSplit)splits.get(1);

    assertEquals(1,fileSplit.getNumPaths());

    assertEquals(1,fileSplit.getLocations().length);

    assertEquals(hosts1[0],fileSplit.getLocations()[0]);

    fileSplit=(CombineFileSplit)splits.get(2);

    assertEquals(2,fileSplit.getNumPaths());

    assertEquals(1,fileSplit.getLocations().length);

    assertEquals(hosts3[0],fileSplit.getLocations()[0]);

    int numPools=100;

    int numFiles=1000;

    DummyInputFormat1 inFormat1=new DummyInputFormat1();

    for (int i=0; i < numFiles; i++) {

      FileInputFormat.setInputPaths(job,file1);

    }

    inFormat1.setMinSplitSizeRack(1);

    final Path dirNoMatch1=new Path(inDir,"/dirxx");

    final Path dirNoMatch2=new Path(inDir,"/diryy");

    for (int i=0; i < numPools; i++) {

      inFormat1.createPool(new TestFilter(dirNoMatch1),new TestFilter(dirNoMatch2));

    }

    long start=System.currentTimeMillis();

    splits=inFormat1.getSplits(job);

    long end=System.currentTimeMillis();

    System.out.println("Elapsed time for " + numPools + " pools "+ " and "+ numFiles+ " files is "+ ((end - start))+ " milli seconds.");

  }

  finally {

    if (dfs != null) {

      dfs.shutdown();

    }

  }

}

Location: TestCombineFileInputFormat.java

Content: 

/** 

 * Test getSplits

 */

@Test @SuppressWarnings("unchecked") public void testSplits() throws IOException {

  JobConf job=new JobConf(defaultConf);

  localFs.delete(workDir,true);

  writeFile(localFs,new Path(workDir,"test.txt"),"the quick\nbrown\nfox jumped\nover\n the lazy\n dog\n");

  FileInputFormat.setInputPaths(job,workDir);

  CombineFileInputFormat format=new CombineFileInputFormat(){

    @Override public RecordReader getRecordReader(    InputSplit split,    JobConf job,    Reporter reporter) throws IOException {

      return new CombineFileRecordReader(job,(CombineFileSplit)split,reporter,CombineFileRecordReader.class);

    }

  }

;

  final int SIZE_SPLITS=1;

  LOG.info("Trying to getSplits with splits = " + SIZE_SPLITS);

  InputSplit[] splits=format.getSplits(job,SIZE_SPLITS);

  LOG.info("Got getSplits = " + splits.length);

  assertEquals("splits == " + SIZE_SPLITS,SIZE_SPLITS,splits.length);

}

Location: TestCombineFileInputFormat.java

Content: 

private static void writeDataAndSetReplication(FileSystem fileSys,Path name,OutputStream out,short replication,int numBlocks) throws IOException {

  for (int i=0; i < numBlocks; i++) {

    out.write(databuf);

  }

  out.close();

  DFSTestUtil.waitReplication(fileSys,name,replication);

}

Location: TestCombineFileInputFormat.java

Content: 

static void writeFile(Configuration conf,Path name,short replication,int numBlocks) throws IOException {

  FileSystem fileSys=FileSystem.get(conf);

  FSDataOutputStream stm=fileSys.create(name,true,conf.getInt("io.file.buffer.size",4096),replication,(long)BLOCKSIZE);

  writeDataAndSetReplication(fileSys,name,stm,replication,numBlocks);

}

Location: TestCombineFileInputFormat.java

Content: 

private static void writeFile(FileSystem fs,Path name,String contents) throws IOException {

  OutputStream stm;

  stm=fs.create(name);

  stm.write(contents.getBytes());

  stm.close();

}

Location: TestCombineFileInputFormat.java

Content: 

static FileStatus writeGzipFile(Configuration conf,Path name,short replication,int numBlocks) throws IOException {

  FileSystem fileSys=FileSystem.get(conf);

  GZIPOutputStream out=new GZIPOutputStream(fileSys.create(name,true,conf.getInt("io.file.buffer.size",4096),replication,(long)BLOCKSIZE));

  writeDataAndSetReplication(fileSys,name,out,replication,numBlocks);

  return fileSys.getFileStatus(name);

}

