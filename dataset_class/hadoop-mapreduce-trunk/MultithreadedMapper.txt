Location: MultithreadedMapper.java

Content: 

/** 

 * Get the application's mapper class.

 * @param < K1 > the map's input key type

 * @param < V1 > the map's input value type

 * @param < K2 > the map's output key type

 * @param < V2 > the map's output value type

 * @param job the job

 * @return the mapper class to run

 */

@SuppressWarnings("unchecked") public static <K1,V1,K2,V2>Class<Mapper<K1,V1,K2,V2>> getMapperClass(JobContext job){

  return (Class<Mapper<K1,V1,K2,V2>>)job.getConfiguration().getClass(MAP_CLASS,Mapper.class);

}

Location: MultithreadedMapper.java

Content: 

/** 

 * The number of threads in the thread pool that will run the map function.

 * @param job the job

 * @return the number of threads

 */

public static int getNumberOfThreads(JobContext job){

  return job.getConfiguration().getInt(NUM_THREADS,10);

}

Location: MultithreadedMapper.java

Content: 

/** 

 * Run the application's maps using a thread pool.

 */

@Override public void run(Context context) throws IOException, InterruptedException {

  outer=context;

  int numberOfThreads=getNumberOfThreads(context);

  mapClass=getMapperClass(context);

  if (LOG.isDebugEnabled()) {

    LOG.debug("Configuring multithread runner to use " + numberOfThreads + " threads");

  }

  runners=new ArrayList<MapRunner>(numberOfThreads);

  for (int i=0; i < numberOfThreads; ++i) {

    MapRunner thread=new MapRunner(context);

    thread.start();

    runners.add(i,thread);

  }

  for (int i=0; i < numberOfThreads; ++i) {

    MapRunner thread=runners.get(i);

    thread.join();

    Throwable th=thread.throwable;

    if (th != null) {

      if (th instanceof IOException) {

        throw (IOException)th;

      }

 else       if (th instanceof InterruptedException) {

        throw (InterruptedException)th;

      }

 else {

        throw new RuntimeException(th);

      }

    }

  }

}

Location: MultithreadedMapper.java

Content: 

/** 

 * Set the application's mapper class.

 * @param < K1 > the map input key type

 * @param < V1 > the map input value type

 * @param < K2 > the map output key type

 * @param < V2 > the map output value type

 * @param job the job to modify

 * @param cls the class to use as the mapper

 */

public static <K1,V1,K2,V2>void setMapperClass(Job job,Class<? extends Mapper<K1,V1,K2,V2>> cls){

  if (MultithreadedMapper.class.isAssignableFrom(cls)) {

    throw new IllegalArgumentException("Can't have recursive " + "MultithreadedMapper instances.");

  }

  job.getConfiguration().setClass(MAP_CLASS,cls,Mapper.class);

}

Location: MultithreadedMapper.java

Content: 

/** 

 * Set the number of threads in the pool for running maps.

 * @param job the job to modify

 * @param threads the new number of threads

 */

public static void setNumberOfThreads(Job job,int threads){

  job.getConfiguration().setInt(NUM_THREADS,threads);

}

