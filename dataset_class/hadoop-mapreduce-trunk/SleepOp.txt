Location: SleepOp.java

Content: 

protected long getSleepTime(Range<Long> sleepTime){

  long sleepMs=Range.betweenPositive(getRandom(),sleepTime);

  return sleepMs;

}

Location: SleepOp.java

Content: 

/** 

 * Sleep for a random amount of time between a given positive range

 * @param sleepTime positive long range for times to choose

 * @return output data on operation

 */

List<OperationOutput> run(Range<Long> sleepTime){

  List<OperationOutput> out=super.run(null);

  try {

    if (sleepTime != null) {

      long sleepMs=getSleepTime(sleepTime);

      long startTime=Timer.now();

      sleep(sleepMs);

      long elapsedTime=Timer.elapsed(startTime);

      out.add(new OperationOutput(OutputType.LONG,getType(),ReportWriter.OK_TIME_TAKEN,elapsedTime));

      out.add(new OperationOutput(OutputType.LONG,getType(),ReportWriter.SUCCESSES,1L));

    }

  }

 catch (  InterruptedException e) {

    out.add(new OperationOutput(OutputType.LONG,getType(),ReportWriter.FAILURES,1L));

    LOG.warn("Error with sleeping",e);

  }

  return out;

}

Location: SleepOp.java

Content: 

SleepOp(ConfigExtractor cfg,Random rnd){

  super(SleepOp.class.getSimpleName(),cfg,rnd);

}

Location: SleepOp.java

Content: 

/** 

 * Sleeps the current thread for X milliseconds

 * @param ms milliseconds to sleep for

 * @throws InterruptedException

 */

private void sleep(long ms) throws InterruptedException {

  if (ms <= 0) {

    return;

  }

  Thread.sleep(ms);

}

