Location: CreateOp.java

Content: 

CreateOp(ConfigExtractor cfg,Random rnd){

  super(CreateOp.class.getSimpleName(),cfg,rnd);

}

Location: CreateOp.java

Content: 

/** 

 * Returns the block size to use (aligned to nearest BYTES_PER_CHECKSUM if configuration says a value exists) - this will avoid the warnings caused by this not occurring and the file will not be created if it is not correct...

 * @return long

 */

private long determineBlockSize(){

  Range<Long> blockSizeRange=getConfig().getBlockSize();

  long blockSize=Range.betweenPositive(getRandom(),blockSizeRange);

  Long byteChecksum=getConfig().getByteCheckSum();

  if (byteChecksum == null) {

    return blockSize;

  }

  long full=(blockSize / byteChecksum) * byteChecksum;

  long toFull=blockSize - full;

  if (toFull >= (byteChecksum / 2)) {

    full+=byteChecksum;

  }

  if (full > blockSizeRange.getUpper()) {

    full=blockSizeRange.getUpper();

  }

  if (full < blockSizeRange.getLower()) {

    full=blockSizeRange.getLower();

  }

  return full;

}

Location: CreateOp.java

Content: 

/** 

 * Gets the replication amount

 * @return short

 */

private short determineReplication(){

  Range<Short> replicationAmountRange=getConfig().getReplication();

  Range<Long> repRange=new Range<Long>(replicationAmountRange.getLower().longValue(),replicationAmountRange.getUpper().longValue());

  short replicationAmount=(short)Range.betweenPositive(getRandom(),repRange);

  return replicationAmount;

}

Location: CreateOp.java

Content: 

/** 

 * Gets the output buffering size to use

 * @return int

 */

private int getBufferSize(){

  return getConfig().getConfig().getInt(IO_BUF_CONFIG,DEF_IO_BUFFER_SIZE);

}

Location: CreateOp.java

Content: 

/** 

 * Gets the file to create

 * @return Path

 */

protected Path getCreateFile(){

  Path fn=getFinder().getFile();

  return fn;

}

