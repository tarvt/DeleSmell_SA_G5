Location: JvmManager.java

Content: 

public JvmEnv constructJvmEnv(List<String> setup,Vector<String> vargs,File stdout,File stderr,long logSize,File workDir,Map<String,String> env,JobConf conf){

  return new JvmEnv(setup,vargs,stdout,stderr,logSize,workDir,env,conf);

}

Location: JvmManager.java

Content: 

/** 

 * Adds the task's work dir to the cleanup queue of taskTracker for asynchronous deletion of work dir.

 * @param tracker taskTracker

 * @param task    the task whose work dir needs to be deleted

 * @throws IOException

 */

static void deleteWorkDir(TaskTracker tracker,Task task) throws IOException {

  tracker.getCleanupThread().addToQueue(TaskTracker.buildTaskControllerTaskPathDeletionContexts(tracker.getLocalFileSystem(),tracker.getLocalFiles(tracker.getJobConf(),""),task,true,tracker.getTaskController()));

}

Location: JvmManager.java

Content: 

void dumpStack(TaskRunner tr){

  if (tr.getTask().isMapTask()) {

    mapJvmManager.dumpStack(tr);

  }

 else {

    reduceJvmManager.dumpStack(tr);

  }

}

Location: JvmManager.java

Content: 

JvmManagerForType getJvmManagerForType(TaskType type){

  if (type.equals(TaskType.MAP)) {

    return mapJvmManager;

  }

 else   if (type.equals(TaskType.REDUCE)) {

    return reduceJvmManager;

  }

  return null;

}

Location: JvmManager.java

Content: 

String getPid(TaskRunner t){

  if (t != null && t.getTask() != null) {

    if (t.getTask().isMapTask()) {

      return mapJvmManager.getPidByRunningTask(t);

    }

 else {

      return reduceJvmManager.getPidByRunningTask(t);

    }

  }

  return null;

}

Location: JvmManager.java

Content: 

public TaskInProgress getTaskForJvm(JVMId jvmId) throws IOException {

  if (jvmId.isMapJVM()) {

    return mapJvmManager.getTaskForJvm(jvmId);

  }

 else {

    return reduceJvmManager.getTaskForJvm(jvmId);

  }

}

Location: JvmManager.java

Content: 

public boolean isJvmKnown(JVMId jvmId){

  if (jvmId.isMapJVM()) {

    return mapJvmManager.isJvmknown(jvmId);

  }

 else {

    return reduceJvmManager.isJvmknown(jvmId);

  }

}

Location: JvmManager.java

Content: 

public JvmManager(TaskTracker tracker){

  mapJvmManager=new JvmManagerForType(tracker.getMaxCurrentMapTasks(),true,tracker);

  reduceJvmManager=new JvmManagerForType(tracker.getMaxCurrentReduceTasks(),false,tracker);

}

Location: JvmManager.java

Content: 

public void killJvm(JVMId jvmId){

  if (jvmId.isMap) {

    mapJvmManager.killJvm(jvmId);

  }

 else {

    reduceJvmManager.killJvm(jvmId);

  }

}

Location: JvmManager.java

Content: 

public void launchJvm(TaskRunner t,JvmEnv env){

  if (t.getTask().isMapTask()) {

    mapJvmManager.reapJvm(t,env);

  }

 else {

    reduceJvmManager.reapJvm(t,env);

  }

}

Location: JvmManager.java

Content: 

void setPidToJvm(JVMId jvmId,String pid){

  if (jvmId.isMapJVM()) {

    mapJvmManager.setPidForJvm(jvmId,pid);

  }

 else {

    reduceJvmManager.setPidForJvm(jvmId,pid);

  }

}

Location: JvmManager.java

Content: 

public void taskFinished(TaskRunner tr){

  if (tr.getTask().isMapTask()) {

    mapJvmManager.taskFinished(tr);

  }

 else {

    reduceJvmManager.taskFinished(tr);

  }

}

Location: JvmManager.java

Content: 

public void taskKilled(TaskRunner tr){

  if (tr.getTask().isMapTask()) {

    mapJvmManager.taskKilled(tr);

  }

 else {

    reduceJvmManager.taskKilled(tr);

  }

}

