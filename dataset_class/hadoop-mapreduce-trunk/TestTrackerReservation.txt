Location: TestTrackerReservation.java

Content: 

/** 

 * Test case to check if the job reservation is handled properly if the  job has a reservation on a black listed tracker.

 * @throws Exception

 */

public void testReservationOnBlacklistedTracker() throws Exception {

  TaskAttemptID[] taskAttemptID=new TaskAttemptID[3];

  JobConf conf=new JobConf();

  conf.setSpeculativeExecution(false);

  conf.setNumMapTasks(2);

  conf.setNumReduceTasks(2);

  conf.set(JobContext.REDUCE_FAILURES_MAXPERCENT,".70");

  conf.set(JobContext.MAP_FAILURES_MAX_PERCENT,".70");

  conf.setBoolean(JobContext.SETUP_CLEANUP_NEEDED,false);

  conf.setMaxTaskFailuresPerTracker(1);

  FakeJobInProgress job=new FakeJobInProgress(conf,jobTracker);

  job.setClusterSize(trackers.length);

  job.initTasks();

  TaskTracker tt1=jobTracker.getTaskTracker(trackers[0]);

  TaskTracker tt2=jobTracker.getTaskTracker(trackers[1]);

  TaskTracker tt3=jobTracker.getTaskTracker(trackers[2]);

  TaskTrackerStatus status1=new TaskTrackerStatus(trackers[0],JobInProgress.convertTrackerNameToHostName(trackers[0]),0,new ArrayList<TaskStatus>(),0,2,2);

  TaskTrackerStatus status2=new TaskTrackerStatus(trackers[1],JobInProgress.convertTrackerNameToHostName(trackers[1]),0,new ArrayList<TaskStatus>(),0,2,2);

  TaskTrackerStatus status3=new TaskTrackerStatus(trackers[1],JobInProgress.convertTrackerNameToHostName(trackers[1]),0,new ArrayList<TaskStatus>(),0,2,2);

  tt1.setStatus(status1);

  tt2.setStatus(status2);

  tt3.setStatus(status3);

  tt1.reserveSlots(TaskType.MAP,job,2);

  tt1.reserveSlots(TaskType.REDUCE,job,2);

  tt3.reserveSlots(TaskType.MAP,job,2);

  tt3.reserveSlots(TaskType.REDUCE,job,2);

  assertEquals("Trackers not reserved for the job : maps",2,job.getNumReservedTaskTrackersForMaps());

  assertEquals("Trackers not reserved for the job : reduces",2,job.getNumReservedTaskTrackersForReduces());

  ClusterMetrics metrics=jobTracker.getClusterMetrics();

  assertEquals("reserved map slots do not match",4,metrics.getReservedMapSlots());

  assertEquals("reserved reduce slots do not match",4,metrics.getReservedReduceSlots());

  TaskAttemptID mTid=job.findMapTask(trackers[0]);

  TaskAttemptID rTid=job.findReduceTask(trackers[0]);

  job.failTask(rTid);

  assertEquals("Tracker 0 not blacklisted for the job",1,job.getBlackListedTrackers().size());

  assertEquals("Extra Trackers reserved for the job : maps",1,job.getNumReservedTaskTrackersForMaps());

  assertEquals("Extra Trackers reserved for the job : reduces",1,job.getNumReservedTaskTrackersForReduces());

  metrics=jobTracker.getClusterMetrics();

  assertEquals("reserved map slots do not match",2,metrics.getReservedMapSlots());

  assertEquals("reserved reduce slots do not match",2,metrics.getReservedReduceSlots());

  job.finishTask(mTid);

  mTid=job.findMapTask(trackers[1]);

  rTid=job.findReduceTask(trackers[1]);

  job.finishTask(mTid);

  job.finishTask(rTid);

  rTid=job.findReduceTask(trackers[1]);

  job.finishTask(rTid);

  assertEquals("Job didnt complete successfully complete",job.getStatus().getRunState(),JobStatus.SUCCEEDED);

  assertEquals("Trackers not unreserved for the job : maps",0,job.getNumReservedTaskTrackersForMaps());

  assertEquals("Trackers not unreserved for the job : reduces",0,job.getNumReservedTaskTrackersForReduces());

  metrics=jobTracker.getClusterMetrics();

  assertEquals("reserved map slots do not match",0,metrics.getReservedMapSlots());

  assertEquals("reserved reduce slots do not match",0,metrics.getReservedReduceSlots());

}

Location: TestTrackerReservation.java

Content: 

/** 

 * Test case to test if task tracker reservation. <ol> <li>Run a cluster with 3 trackers.</li> <li>Submit a job which reserves all the slots in two trackers.</li> <li>Run the job on another tracker which has  no reservations</li> <li>Finish the job and observe the reservations are successfully canceled</li> </ol>

 * @throws Exception

 */

public void testTaskTrackerReservation() throws Exception {

  JobConf conf=new JobConf();

  conf.setNumMapTasks(1);

  conf.setNumReduceTasks(1);

  conf.setSpeculativeExecution(false);

  conf.setBoolean(JobContext.SETUP_CLEANUP_NEEDED,false);

  TaskTracker tt1=jobTracker.getTaskTracker(trackers[0]);

  TaskTracker tt2=jobTracker.getTaskTracker(trackers[1]);

  TaskTracker tt3=jobTracker.getTaskTracker(trackers[2]);

  TaskTrackerStatus status1=new TaskTrackerStatus(trackers[0],JobInProgress.convertTrackerNameToHostName(trackers[0]),0,new ArrayList<TaskStatus>(),0,2,2);

  TaskTrackerStatus status2=new TaskTrackerStatus(trackers[1],JobInProgress.convertTrackerNameToHostName(trackers[1]),0,new ArrayList<TaskStatus>(),0,2,2);

  TaskTrackerStatus status3=new TaskTrackerStatus(trackers[1],JobInProgress.convertTrackerNameToHostName(trackers[1]),0,new ArrayList<TaskStatus>(),0,2,2);

  tt1.setStatus(status1);

  tt2.setStatus(status2);

  tt3.setStatus(status3);

  FakeJobInProgress fjob=new FakeJobInProgress(conf,jobTracker);

  fjob.setClusterSize(3);

  fjob.initTasks();

  tt1.reserveSlots(TaskType.MAP,fjob,2);

  tt1.reserveSlots(TaskType.REDUCE,fjob,2);

  tt3.reserveSlots(TaskType.MAP,fjob,2);

  tt3.reserveSlots(TaskType.REDUCE,fjob,2);

  assertEquals("Trackers not reserved for the job : maps",2,fjob.getNumReservedTaskTrackersForMaps());

  assertEquals("Trackers not reserved for the job : reduces",2,fjob.getNumReservedTaskTrackersForReduces());

  ClusterMetrics metrics=jobTracker.getClusterMetrics();

  assertEquals("reserved map slots do not match",4,metrics.getReservedMapSlots());

  assertEquals("reserved reduce slots do not match",4,metrics.getReservedReduceSlots());

  TaskAttemptID mTid=fjob.findMapTask(trackers[1]);

  TaskAttemptID rTid=fjob.findReduceTask(trackers[1]);

  fjob.finishTask(mTid);

  fjob.finishTask(rTid);

  assertEquals("Job didnt complete successfully complete",fjob.getStatus().getRunState(),JobStatus.SUCCEEDED);

  assertEquals("Reservation for the job not released: Maps",0,fjob.getNumReservedTaskTrackersForMaps());

  assertEquals("Reservation for the job not released : Reduces",0,fjob.getNumReservedTaskTrackersForReduces());

  metrics=jobTracker.getClusterMetrics();

  assertEquals("reserved map slots do not match",0,metrics.getReservedMapSlots());

  assertEquals("reserved reduce slots do not match",0,metrics.getReservedReduceSlots());

}

Location: TestTrackerReservation.java

Content: 

/** 

 * Test case to check task tracker reservation for a job which  has a job blacklisted tracker. <ol> <li>Run a job which fails on one of the tracker.</li> <li>Check if the job succeeds and has no reservation.</li> </ol>

 * @throws Exception

 */

public void testTrackerReservationWithJobBlackListedTracker() throws Exception {

  FakeJobInProgress job=TestTaskTrackerBlacklisting.runBlackListingJob(jobTracker,trackers);

  assertEquals("Job has no blacklisted trackers",1,job.getBlackListedTrackers().size());

  assertTrue("Tracker 1 not blacklisted for the job",job.getBlackListedTrackers().contains(JobInProgress.convertTrackerNameToHostName(trackers[0])));

  assertEquals("Job didnt complete successfully complete",job.getStatus().getRunState(),JobStatus.SUCCEEDED);

  assertEquals("Reservation for the job not released: Maps",0,job.getNumReservedTaskTrackersForMaps());

  assertEquals("Reservation for the job not released : Reduces",0,job.getNumReservedTaskTrackersForReduces());

  ClusterMetrics metrics=jobTracker.getClusterMetrics();

  assertEquals("reserved map slots do not match",0,metrics.getReservedMapSlots());

  assertEquals("reserved reduce slots do not match",0,metrics.getReservedReduceSlots());

}

