Location: TestDelegatingInputFormat.java

Content: 

static Path getPath(final String location,final FileSystem fs) throws IOException {

  Path path=new Path(location);

  DataOutputStream out=fs.create(path,true,4096,(short)2,512,null);

  for (int i=0; i < 1000; ++i) {

    out.writeChars("Hello\n");

  }

  out.close();

  return path;

}

Location: TestDelegatingInputFormat.java

Content: 

@SuppressWarnings("unchecked") public void testSplitting() throws Exception {

  Job job=Job.getInstance();

  MiniDFSCluster dfs=null;

  try {

    dfs=new MiniDFSCluster(job.getConfiguration(),4,true,new String[]{"/rack0","/rack0","/rack1","/rack1"},new String[]{"host0","host1","host2","host3"});

    FileSystem fs=dfs.getFileSystem();

    Path path=getPath("/foo/bar",fs);

    Path path2=getPath("/foo/baz",fs);

    Path path3=getPath("/bar/bar",fs);

    Path path4=getPath("/bar/baz",fs);

    final int numSplits=100;

    FileInputFormat.setMaxInputSplitSize(job,fs.getFileStatus(path).getLen() / numSplits);

    MultipleInputs.addInputPath(job,path,TextInputFormat.class,MapClass.class);

    MultipleInputs.addInputPath(job,path2,TextInputFormat.class,MapClass2.class);

    MultipleInputs.addInputPath(job,path3,KeyValueTextInputFormat.class,MapClass.class);

    MultipleInputs.addInputPath(job,path4,TextInputFormat.class,MapClass2.class);

    DelegatingInputFormat inFormat=new DelegatingInputFormat();

    int[] bins=new int[3];

    for (    InputSplit split : (List<InputSplit>)inFormat.getSplits(job)) {

      assertTrue(split instanceof TaggedInputSplit);

      final TaggedInputSplit tis=(TaggedInputSplit)split;

      int index=-1;

      if (tis.getInputFormatClass().equals(KeyValueTextInputFormat.class)) {

        index=0;

      }

 else       if (tis.getMapperClass().equals(MapClass.class)) {

        index=1;

      }

 else {

        index=2;

      }

      bins[index]++;

    }

    assertEquals("count is not equal to num splits",numSplits,bins[0]);

    assertEquals("count is not equal to num splits",numSplits,bins[1]);

    assertEquals("count is not equal to 2 * num splits",numSplits * 2,bins[2]);

  }

  finally {

    if (dfs != null) {

      dfs.shutdown();

    }

  }

}

