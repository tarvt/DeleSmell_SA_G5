Location: TestMRServerPorts.java

Content: 

/** 

 * Check whether the JobTracker can be started.

 */

private boolean canStartJobTracker(JobConf conf) throws IOException, InterruptedException, LoginException {

  JobTracker jt=null;

  try {

    jt=JobTracker.startTracker(conf);

  }

 catch (  IOException e) {

    if (e instanceof java.net.BindException)     return false;

    throw e;

  }

  jt.fs.close();

  jt.stopTracker();

  return true;

}

Location: TestMRServerPorts.java

Content: 

/** 

 * Check whether the TaskTracker can be started.

 */

private boolean canStartTaskTracker(JobConf conf) throws IOException, InterruptedException {

  TaskTracker tt=null;

  try {

    tt=new TaskTracker(conf);

  }

 catch (  IOException e) {

    if (e instanceof java.net.BindException)     return false;

    throw e;

  }

  tt.shutdown();

  return true;

}

Location: TestMRServerPorts.java

Content: 

private void setDataNodePorts(Configuration conf){

  conf.set("dfs.datanode.address",THIS_HOST);

  conf.set("dfs.datanode.http.address",THIS_HOST);

  conf.set("dfs.datanode.ipc.address",THIS_HOST);

}

Location: TestMRServerPorts.java

Content: 

/** 

 * Check whether the JobTracker can be started.

 */

private JobTracker startJobTracker(JobConf conf,JTRunner runner) throws IOException, LoginException {

  conf.set(JTConfig.JT_IPC_ADDRESS,"localhost:0");

  conf.set(JTConfig.JT_HTTP_ADDRESS,"0.0.0.0:0");

  JobTracker jt=null;

  try {

    jt=JobTracker.startTracker(conf);

    runner.setJobTracker(jt);

    runner.start();

    conf.set(JTConfig.JT_IPC_ADDRESS,"localhost:" + jt.getTrackerPort());

    conf.set(JTConfig.JT_HTTP_ADDRESS,"0.0.0.0:" + jt.getInfoPort());

  }

 catch (  InterruptedException e) {

    throw new IOException(e.getLocalizedMessage());

  }

  return jt;

}

Location: TestMRServerPorts.java

Content: 

/** 

 * Verify JobTracker port usage.

 */

public void testJobTrackerPorts() throws Exception {

  NameNode nn=null;

  DataNode dn=null;

  try {

    nn=hdfs.startNameNode();

    setDataNodePorts(hdfs.getConfig());

    dn=hdfs.startDataNode(1,hdfs.getConfig());

    JobConf conf2=new JobConf(hdfs.getConfig());

    conf2.set(JTConfig.JT_IPC_ADDRESS,FileSystem.getDefaultUri(hdfs.getConfig()).toString());

    conf2.set(JTConfig.JT_HTTP_ADDRESS,THIS_HOST);

    boolean started=canStartJobTracker(conf2);

    assertFalse(started);

    conf2.set(JTConfig.JT_IPC_ADDRESS,THIS_HOST);

    conf2.set(JTConfig.JT_HTTP_ADDRESS,hdfs.getConfig().get("dfs.http.address"));

    started=canStartJobTracker(conf2);

    assertFalse(started);

    conf2.set(JTConfig.JT_IPC_ADDRESS,THIS_HOST);

    conf2.set(JTConfig.JT_HTTP_ADDRESS,THIS_HOST);

    started=canStartJobTracker(conf2);

    assertTrue(started);

  }

  finally {

    hdfs.stopDataNode(dn);

    hdfs.stopNameNode(nn);

  }

}

Location: TestMRServerPorts.java

Content: 

/** 

 * Verify JobTracker port usage.

 */

public void testTaskTrackerPorts() throws Exception {

  NameNode nn=null;

  DataNode dn=null;

  JobTracker jt=null;

  JTRunner runner=null;

  try {

    nn=hdfs.startNameNode();

    setDataNodePorts(hdfs.getConfig());

    dn=hdfs.startDataNode(2,hdfs.getConfig());

    JobConf conf2=new JobConf(hdfs.getConfig());

    runner=new JTRunner();

    jt=startJobTracker(conf2,runner);

    conf2.set(TTConfig.TT_REPORT_ADDRESS,FileSystem.getDefaultUri(hdfs.getConfig()).toString());

    conf2.set(TTConfig.TT_HTTP_ADDRESS,THIS_HOST);

    boolean started=canStartTaskTracker(conf2);

    assertFalse(started);

    conf2.set(TTConfig.TT_REPORT_ADDRESS,THIS_HOST);

    conf2.set(TTConfig.TT_HTTP_ADDRESS,hdfs.getConfig().get("dfs.http.address"));

    started=canStartTaskTracker(conf2);

    assertFalse(started);

    conf2.set(TTConfig.TT_REPORT_ADDRESS,THIS_HOST);

    conf2.set(TTConfig.TT_HTTP_ADDRESS,THIS_HOST);

    started=canStartTaskTracker(conf2);

    assertTrue(started);

  }

  finally {

    if (jt != null) {

      jt.fs.close();

      jt.stopTracker();

      runner.interrupt();

      runner.join();

    }

    hdfs.stopDataNode(dn);

    hdfs.stopNameNode(nn);

  }

}

