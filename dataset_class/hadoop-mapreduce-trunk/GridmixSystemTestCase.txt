Location: GridmixSystemTestCase.java

Content: 

/** 

 * get the trace file based on given regular expression.

 * @param regExp - trace file file pattern. 

 * @return - trace file as string.

 * @throws IOException - if an I/O error occurs.

 */

public static String getTraceFile(String regExp) throws IOException {

  List<String> listTraces=UtilsForGridmix.listMRTraces(rtClient.getDaemonConf());

  Iterator<String> ite=listTraces.iterator();

  while (ite.hasNext()) {

    String traceFile=ite.next();

    if (traceFile.indexOf(regExp) >= 0) {

      return traceFile;

    }

  }

  return null;

}

Location: GridmixSystemTestCase.java

Content: 

public static boolean isLocalDistCache(String fileName,String userName,boolean visibility){

  return DistributedCacheEmulator.isLocalDistCacheFile(fileName,userName,visibility);

}

Location: GridmixSystemTestCase.java

Content: 

/** 

 * Run the gridmix with specified runtime parameters and  verify the jobs the after completion of execution.

 * @param runtimeValues - common runtime arguments for gridmix.

 * @param otherValues - test specific runtime arguments for gridmix.

 * @param tracePath - path of a trace file.

 * @throws Exception - if an exception occurs.

 */

public static void runGridmixAndVerify(String[] runtimeValues,String[] otherValues,String tracePath) throws Exception {

  runGridmixAndVerify(runtimeValues,otherValues,tracePath,GridMixRunMode.DATA_GENERATION_AND_RUN_GRIDMIX.getValue());

}

Location: GridmixSystemTestCase.java

Content: 

/** 

 * Run the gridmix with specified runtime parameters and verify the jobs the after completion of execution.

 * @param runtimeValues - common runtime arguments for gridmix.

 * @param otherValues - test specific runtime arguments for gridmix.

 * @param tracePath - path of a trace file.

 * @param mode - 1 for data generation, 2 for run the gridmix and 3 fordata generation and run the gridmix.

 * @throws Exception - if an exception occurs.

 */

public static void runGridmixAndVerify(String[] runtimeValues,String[] otherValues,String tracePath,int mode) throws Exception {

  List<JobID> jobids=runGridmix(runtimeValues,otherValues,mode);

  gridmixJV=new GridmixJobVerification(new Path(tracePath),gridmixJS.getJobConf(),jtClient);

  gridmixJV.verifyGridmixJobsWithJobStories(jobids);

}

Location: GridmixSystemTestCase.java

Content: 

/** 

 * Run the gridmix with user specified mode.

 * @param runtimeValues - common runtime parameters for gridmix.

 * @param otherValues - test specifix runtime parameters for gridmix.

 * @param mode -  1 for data generation, 2 for run the gridmix and 3 fordata generation and run the gridmix.

 * @return - list of gridmix job ids.

 * @throws Exception - if an exception occurs.

 */

public static List<JobID> runGridmix(String[] runtimeValues,String[] otherValues,int mode) throws Exception {

  gridmixJS=new GridmixJobSubmission(rtClient.getDaemonConf(),jtClient,gridmixDir);

  gridmixJS.submitJobs(runtimeValues,otherValues,mode);

  List<JobID> jobids=UtilsForGridmix.listGridmixJobIDs(jtClient.getClient(),gridmixJS.getGridmixJobCount());

  return jobids;

}

