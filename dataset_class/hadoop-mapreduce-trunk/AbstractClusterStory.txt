Location: AbstractClusterStory.java

Content: 

protected synchronized void buildMachineNodeMap(){

  if (mNodeMap == null) {

    mNodeMap=new HashMap<String,MachineNode>(machineNodes.size());

    for (    MachineNode mn : machineNodes) {

      mNodeMap.put(mn.getName(),mn);

    }

  }

}

Location: AbstractClusterStory.java

Content: 

protected synchronized void buildRackNodeMap(){

  if (rNodeMap == null) {

    rNodeMap=new HashMap<String,RackNode>(rackNodes.size());

    for (    RackNode rn : rackNodes) {

      rNodeMap.put(rn.getName(),rn);

    }

  }

}

Location: AbstractClusterStory.java

Content: 

@Override public int distance(Node a,Node b){

  int lvl_a=a.getLevel();

  int lvl_b=b.getLevel();

  int retval=0;

  if (lvl_a > lvl_b) {

    retval=lvl_a - lvl_b;

    for (int i=0; i < retval; ++i) {

      a=a.getParent();

    }

  }

 else   if (lvl_a < lvl_b) {

    retval=lvl_b - lvl_a;

    for (int i=0; i < retval; ++i) {

      b=b.getParent();

    }

  }

  while (a != b) {

    a=a.getParent();

    b=b.getParent();

    ++retval;

  }

  return retval;

}

Location: AbstractClusterStory.java

Content: 

@Override public MachineNode getMachineByName(String name){

  buildMachineNodeMap();

  return mNodeMap.get(name);

}

Location: AbstractClusterStory.java

Content: 

@Override public Set<MachineNode> getMachines(){

  parseTopologyTree();

  return machineNodes;

}

Location: AbstractClusterStory.java

Content: 

@Override public int getMaximumDistance(){

  parseTopologyTree();

  return maximumDistance;

}

Location: AbstractClusterStory.java

Content: 

@Override public RackNode getRackByName(String name){

  buildRackNodeMap();

  return rNodeMap.get(name);

}

Location: AbstractClusterStory.java

Content: 

@Override public synchronized Set<RackNode> getRacks(){

  parseTopologyTree();

  return rackNodes;

}

Location: AbstractClusterStory.java

Content: 

@Override public synchronized MachineNode[] getRandomMachines(int expected,Random random){

  if (expected == 0) {

    return new MachineNode[0];

  }

  parseTopologyTree();

  int total=machineNodes.size();

  int select=Math.min(expected,total);

  if (mNodesFlattened == null) {

    mNodesFlattened=machineNodes.toArray(new MachineNode[total]);

  }

  MachineNode[] retval=new MachineNode[select];

  int i=0;

  while ((i != select) && (total != i + select)) {

    int index=random.nextInt(total - i);

    MachineNode tmp=mNodesFlattened[index];

    mNodesFlattened[index]=mNodesFlattened[total - i - 1];

    mNodesFlattened[total - i - 1]=tmp;

    ++i;

  }

  if (i == select) {

    System.arraycopy(mNodesFlattened,total - i,retval,0,select);

  }

 else {

    System.arraycopy(mNodesFlattened,0,retval,0,select);

  }

  return retval;

}

Location: AbstractClusterStory.java

Content: 

protected synchronized void parseTopologyTree(){

  if (machineNodes == null) {

    Node root=getClusterTopology();

    SortedSet<MachineNode> mNodes=new TreeSet<MachineNode>();

    SortedSet<RackNode> rNodes=new TreeSet<RackNode>();

    Deque<Node> unvisited=new ArrayDeque<Node>();

    Deque<Integer> distUnvisited=new ArrayDeque<Integer>();

    unvisited.add(root);

    distUnvisited.add(0);

    for (Node n=unvisited.poll(); n != null; n=unvisited.poll()) {

      int distance=distUnvisited.poll();

      if (n instanceof RackNode) {

        rNodes.add((RackNode)n);

        mNodes.addAll(((RackNode)n).getMachinesInRack());

        if (distance + 1 > maximumDistance) {

          maximumDistance=distance + 1;

        }

      }

 else       if (n instanceof MachineNode) {

        mNodes.add((MachineNode)n);

        if (distance > maximumDistance) {

          maximumDistance=distance;

        }

      }

 else {

        for (        Node child : n.getChildren()) {

          unvisited.addFirst(child);

          distUnvisited.addFirst(distance + 1);

        }

      }

    }

    machineNodes=Collections.unmodifiableSortedSet(mNodes);

    rackNodes=Collections.unmodifiableSortedSet(rNodes);

  }

}

