Location: SkipBadRecords.java

Content: 

/** 

 * Get the number of Task attempts AFTER which skip mode  will be kicked off. When skip mode is kicked off, the  tasks reports the range of records which it will process  next to the TaskTracker. So that on failures, TT knows which  ones are possibly the bad records. On further executions,  those are skipped. Default value is 2.

 * @param conf the configuration

 * @return attemptsToStartSkipping no of task attempts

 */

public static int getAttemptsToStartSkipping(Configuration conf){

  return conf.getInt(ATTEMPTS_TO_START_SKIPPING,2);

}

Location: SkipBadRecords.java

Content: 

/** 

 * Get the flag which if set to true,  {@link SkipBadRecords#COUNTER_MAP_PROCESSED_RECORDS} is incremented by MapRunner after invoking the map function. This value must be set to  false for applications which process the records asynchronously  or buffer the input records. For example streaming.  In such cases applications should increment this counter on their own. Default value is true.

 * @param conf the configuration

 * @return <code>true</code> if auto increment {@link SkipBadRecords#COUNTER_MAP_PROCESSED_RECORDS}. <code>false</code> otherwise.

 */

public static boolean getAutoIncrMapperProcCount(Configuration conf){

  return conf.getBoolean(AUTO_INCR_MAP_PROC_COUNT,true);

}

Location: SkipBadRecords.java

Content: 

/** 

 * Get the flag which if set to true,  {@link SkipBadRecords#COUNTER_REDUCE_PROCESSED_GROUPS} is incremented by framework after invoking the reduce function. This value must be set to  false for applications which process the records asynchronously  or buffer the input records. For example streaming.  In such cases applications should increment this counter on their own. Default value is true.

 * @param conf the configuration

 * @return <code>true</code> if auto increment {@link SkipBadRecords#COUNTER_REDUCE_PROCESSED_GROUPS}. <code>false</code> otherwise.

 */

public static boolean getAutoIncrReducerProcCount(Configuration conf){

  return conf.getBoolean(AUTO_INCR_REDUCE_PROC_COUNT,true);

}

Location: SkipBadRecords.java

Content: 

/** 

 * Get the number of acceptable skip records surrounding the bad record PER  bad record in mapper. The number includes the bad record as well. To turn the feature of detection/skipping of bad records off, set the  value to 0. The framework tries to narrow down the skipped range by retrying   until this threshold is met OR all attempts get exhausted for this task.  Set the value to Long.MAX_VALUE to indicate that framework need not try to  narrow down. Whatever records(depends on application) get skipped are  acceptable. Default value is 0.

 * @param conf the configuration

 * @return maxSkipRecs acceptable skip records.

 */

public static long getMapperMaxSkipRecords(Configuration conf){

  return conf.getLong(MAPPER_MAX_SKIP_RECORDS,0);

}

Location: SkipBadRecords.java

Content: 

/** 

 * Get the number of acceptable skip groups surrounding the bad group PER  bad group in reducer. The number includes the bad group as well. To turn the feature of detection/skipping of bad groups off, set the  value to 0. The framework tries to narrow down the skipped range by retrying   until this threshold is met OR all attempts get exhausted for this task.  Set the value to Long.MAX_VALUE to indicate that framework need not try to  narrow down. Whatever groups(depends on application) get skipped are  acceptable. Default value is 0.

 * @param conf the configuration

 * @return maxSkipGrps acceptable skip groups.

 */

public static long getReducerMaxSkipGroups(Configuration conf){

  return conf.getLong(REDUCER_MAX_SKIP_GROUPS,0);

}

Location: SkipBadRecords.java

Content: 

/** 

 * Get the directory to which skipped records are written. By default it is  the sub directory of the output _logs directory. User can stop writing skipped records by setting the value null.

 * @param conf the configuration.

 * @return path skip output directory. Null is returned if this is not set and output directory is also not set.

 */

public static Path getSkipOutputPath(Configuration conf){

  String name=conf.get(OUT_PATH);

  if (name != null) {

    if ("none".equals(name)) {

      return null;

    }

    return new Path(name);

  }

  Path outPath=FileOutputFormat.getOutputPath(new JobConf(conf));

  return outPath == null ? null : new Path(outPath,"_logs" + Path.SEPARATOR + "skip");

}

Location: SkipBadRecords.java

Content: 

/** 

 * Set the number of Task attempts AFTER which skip mode  will be kicked off. When skip mode is kicked off, the  tasks reports the range of records which it will process  next to the TaskTracker. So that on failures, TT knows which  ones are possibly the bad records. On further executions,  those are skipped. Default value is 2.

 * @param conf the configuration

 * @param attemptsToStartSkipping no of task attempts

 */

public static void setAttemptsToStartSkipping(Configuration conf,int attemptsToStartSkipping){

  conf.setInt(ATTEMPTS_TO_START_SKIPPING,attemptsToStartSkipping);

}

Location: SkipBadRecords.java

Content: 

/** 

 * Set the flag which if set to true,  {@link SkipBadRecords#COUNTER_MAP_PROCESSED_RECORDS} is incremented by MapRunner after invoking the map function. This value must be set to  false for applications which process the records asynchronously  or buffer the input records. For example streaming.  In such cases applications should increment this counter on their own. Default value is true.

 * @param conf the configuration

 * @param autoIncr whether to auto increment {@link SkipBadRecords#COUNTER_MAP_PROCESSED_RECORDS}.

 */

public static void setAutoIncrMapperProcCount(Configuration conf,boolean autoIncr){

  conf.setBoolean(AUTO_INCR_MAP_PROC_COUNT,autoIncr);

}

Location: SkipBadRecords.java

Content: 

/** 

 * Set the flag which if set to true,  {@link SkipBadRecords#COUNTER_REDUCE_PROCESSED_GROUPS} is incremented by framework after invoking the reduce function. This value must be set to  false for applications which process the records asynchronously  or buffer the input records. For example streaming.  In such cases applications should increment this counter on their own. Default value is true.

 * @param conf the configuration

 * @param autoIncr whether to auto increment {@link SkipBadRecords#COUNTER_REDUCE_PROCESSED_GROUPS}.

 */

public static void setAutoIncrReducerProcCount(Configuration conf,boolean autoIncr){

  conf.setBoolean(AUTO_INCR_REDUCE_PROC_COUNT,autoIncr);

}

Location: SkipBadRecords.java

Content: 

/** 

 * Set the number of acceptable skip records surrounding the bad record PER  bad record in mapper. The number includes the bad record as well. To turn the feature of detection/skipping of bad records off, set the  value to 0. The framework tries to narrow down the skipped range by retrying   until this threshold is met OR all attempts get exhausted for this task.  Set the value to Long.MAX_VALUE to indicate that framework need not try to  narrow down. Whatever records(depends on application) get skipped are  acceptable. Default value is 0.

 * @param conf the configuration

 * @param maxSkipRecs acceptable skip records.

 */

public static void setMapperMaxSkipRecords(Configuration conf,long maxSkipRecs){

  conf.setLong(MAPPER_MAX_SKIP_RECORDS,maxSkipRecs);

}

Location: SkipBadRecords.java

Content: 

/** 

 * Set the number of acceptable skip groups surrounding the bad group PER  bad group in reducer. The number includes the bad group as well. To turn the feature of detection/skipping of bad groups off, set the  value to 0. The framework tries to narrow down the skipped range by retrying   until this threshold is met OR all attempts get exhausted for this task.  Set the value to Long.MAX_VALUE to indicate that framework need not try to  narrow down. Whatever groups(depends on application) get skipped are  acceptable. Default value is 0.

 * @param conf the configuration

 * @param maxSkipGrps acceptable skip groups.

 */

public static void setReducerMaxSkipGroups(Configuration conf,long maxSkipGrps){

  conf.setLong(REDUCER_MAX_SKIP_GROUPS,maxSkipGrps);

}

Location: SkipBadRecords.java

Content: 

/** 

 * Set the directory to which skipped records are written. By default it is  the sub directory of the output _logs directory. User can stop writing skipped records by setting the value null.

 * @param conf the configuration.

 * @param path skip output directory path

 */

public static void setSkipOutputPath(JobConf conf,Path path){

  String pathStr=null;

  if (path == null) {

    pathStr="none";

  }

 else {

    pathStr=path.toString();

  }

  conf.set(OUT_PATH,pathStr);

}

