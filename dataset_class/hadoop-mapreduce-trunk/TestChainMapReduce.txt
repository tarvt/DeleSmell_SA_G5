Location: TestChainMapReduce.java

Content: 

private static void cleanFlags(JobConf conf) throws IOException {

  FileSystem fs=FileSystem.get(conf);

  fs.delete(getFlagDir(conf.getBoolean("localFS",true)),true);

  fs.mkdirs(getFlagDir(conf.getBoolean("localFS",true)));

}

Location: TestChainMapReduce.java

Content: 

private static Path getFlagDir(boolean local){

  Path flagDir=new Path("testing/chain/flags");

  if (local) {

    String localPathRoot=System.getProperty("test.build.data","/tmp").replace(' ','+');

    flagDir=new Path(localPathRoot,flagDir);

  }

  return flagDir;

}

Location: TestChainMapReduce.java

Content: 

private static boolean getFlag(JobConf conf,String flag) throws IOException {

  FileSystem fs=FileSystem.get(conf);

  return fs.exists(new Path(getFlagDir(conf.getBoolean("localFS",true)),flag));

}

Location: TestChainMapReduce.java

Content: 

public TestChainMapReduce() throws IOException {

  super(HadoopTestCase.LOCAL_MR,HadoopTestCase.LOCAL_FS,1,1);

}

Location: TestChainMapReduce.java

Content: 

private static void writeFlag(JobConf conf,String flag) throws IOException {

  FileSystem fs=FileSystem.get(conf);

  if (getFlag(conf,flag)) {

    fail("Flag " + flag + " already exists");

  }

  DataOutputStream file=fs.create(new Path(getFlagDir(conf.getBoolean("localFS",true)),flag));

  file.close();

}

