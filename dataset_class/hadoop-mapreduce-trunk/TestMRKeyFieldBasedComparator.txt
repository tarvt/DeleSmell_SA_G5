Location: TestMRKeyFieldBasedComparator.java

Content: 

public void testBasicUnixComparator() throws Exception {

  testComparator("-k1,1n",1);

  testComparator("-k2,2n",1);

  testComparator("-k2.2,2n",2);

  testComparator("-k3.4,3n",2);

  testComparator("-k3.2,3.3n -k4,4n",2);

  testComparator("-k3.2,3.3n -k4,4nr",1);

  testComparator("-k2.4,2.4n",2);

  testComparator("-k7,7",1);

  testComparator("-k7,7n",2);

  testComparator("-k8,8n",1);

  testComparator("-k9,9",2);

  testComparator("-k11,11",2);

  testComparator("-k10,10",2);

  testWithoutMRJob("-k9,9",1);

  testWithoutMRJob("-k9n",1);

}

Location: TestMRKeyFieldBasedComparator.java

Content: 

private void testComparator(String keySpec,int expect) throws Exception {

  String root=System.getProperty("test.build.data","/tmp");

  Path inDir=new Path(root,"test_cmp/in");

  Path outDir=new Path(root,"test_cmp/out");

  conf.set("mapreduce.partition.keycomparator.options",keySpec);

  conf.set("mapreduce.partition.keypartitioner.options","-k1.1,1.1");

  conf.set(MRJobConfig.MAP_OUTPUT_KEY_FIELD_SEPERATOR," ");

  Job job=MapReduceTestUtil.createJob(conf,inDir,outDir,1,2,line1 + "\n" + line2+ "\n");

  job.setMapperClass(InverseMapper.class);

  job.setReducerClass(Reducer.class);

  job.setOutputKeyClass(Text.class);

  job.setOutputValueClass(LongWritable.class);

  job.setSortComparatorClass(KeyFieldBasedComparator.class);

  job.setPartitionerClass(KeyFieldBasedPartitioner.class);

  job.waitForCompletion(true);

  assertTrue(job.isSuccessful());

  Path[] outputFiles=FileUtil.stat2Paths(getFileSystem().listStatus(outDir,new Utils.OutputFileUtils.OutputFilesFilter()));

  if (outputFiles.length > 0) {

    InputStream is=getFileSystem().open(outputFiles[0]);

    BufferedReader reader=new BufferedReader(new InputStreamReader(is));

    String line=reader.readLine();

    if (expect == 1) {

      assertTrue(line.startsWith(line1));

    }

 else     if (expect == 2) {

      assertTrue(line.startsWith(line2));

    }

    line=reader.readLine();

    if (expect == 1) {

      assertTrue(line.startsWith(line2));

    }

 else     if (expect == 2) {

      assertTrue(line.startsWith(line1));

    }

    reader.close();

  }

}

Location: TestMRKeyFieldBasedComparator.java

Content: 

public TestMRKeyFieldBasedComparator() throws IOException {

  super(HadoopTestCase.LOCAL_MR,HadoopTestCase.LOCAL_FS,1,1);

  conf=createJobConf();

  conf.set(MRJobConfig.MAP_OUTPUT_KEY_FIELD_SEPERATOR," ");

}

Location: TestMRKeyFieldBasedComparator.java

Content: 

public void testWithoutMRJob(String keySpec,int expect) throws Exception {

  KeyFieldBasedComparator<Void,Void> keyFieldCmp=new KeyFieldBasedComparator<Void,Void>();

  conf.set("mapreduce.partition.keycomparator.options",keySpec);

  keyFieldCmp.setConf(conf);

  int result=keyFieldCmp.compare(line1_bytes,0,line1_bytes.length,line2_bytes,0,line2_bytes.length);

  if ((expect >= 0 && result < 0) || (expect < 0 && result >= 0))   fail();

}

