Location: JoinRecordReader.java

Content: 

public TupleWritable createValue(){

  return createTupleWritable();

}

Location: JoinRecordReader.java

Content: 

/** 

 * Return an iterator wrapping the JoinCollector.

 */

protected ResetableIterator<TupleWritable> getDelegate(){

  return new JoinDelegationIterator();

}

Location: JoinRecordReader.java

Content: 

public JoinRecordReader(int id,Configuration conf,int capacity,Class<? extends WritableComparator> cmpcl) throws IOException {

  super(id,capacity,cmpcl);

  setConf(conf);

}

Location: JoinRecordReader.java

Content: 

public JoinRecordReader(int id,JobConf conf,int capacity,Class<? extends WritableComparator> cmpcl) throws IOException {

  super(id,capacity,cmpcl);

  setConf(conf);

}

Location: JoinRecordReader.java

Content: 

/** 

 * Emit the next set of key, value pairs as defined by the child RecordReaders and operation associated with this composite RR.

 */

public boolean next(K key,TupleWritable value) throws IOException {

  if (jc.flush(value)) {

    WritableUtils.cloneInto(key,jc.key());

    return true;

  }

  jc.clear();

  K iterkey=createKey();

  final PriorityQueue<ComposableRecordReader<K,?>> q=getRecordReaderQueue();

  while (!q.isEmpty()) {

    fillJoinCollector(iterkey);

    jc.reset(iterkey);

    if (jc.flush(value)) {

      WritableUtils.cloneInto(key,jc.key());

      return true;

    }

    jc.clear();

  }

  return false;

}

