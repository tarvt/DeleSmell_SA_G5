Location: TestJobKillAndFail.java

Content: 

/** 

 * If a task was killed, then dumpTaskStack() should have been called. Test whether or not the counter was incremented and succeed/fail based on this. 

 */

private void checkForStackDump(boolean expectDump,int lastNumDumps){

  int curNumDumps=MockStackDumpTaskController.numStackDumps;

  LOG.info("curNumDumps=" + curNumDumps + "; lastNumDumps="+ lastNumDumps+ "; expect="+ expectDump);

  if (expectDump) {

    assertTrue("No stack dump recorded!",lastNumDumps < curNumDumps);

  }

 else {

    assertTrue("Stack dump happened anyway!",lastNumDumps == curNumDumps);

  }

}

Location: TestJobKillAndFail.java

Content: 

public void testJobFailAndKill() throws Exception {

  MiniMRCluster mr=null;

  try {

    JobConf jtConf=new JobConf();

    jtConf.set("mapred.jobtracker.instrumentation",JTInstrumentation.class.getName());

    jtConf.set("mapreduce.tasktracker.taskcontroller",MockStackDumpTaskController.class.getName());

    mr=new MiniMRCluster(2,"file:///",3,null,null,jtConf);

    JTInstrumentation instr=(JTInstrumentation)mr.getJobTrackerRunner().getJobTracker().getInstrumentation();

    JobConf conf=mr.createJobConf();

    conf.setInt(Job.COMPLETION_POLL_INTERVAL_KEY,50);

    Path inDir=new Path(TEST_ROOT_DIR + "/failkilljob/input");

    Path outDir=new Path(TEST_ROOT_DIR + "/failkilljob/output");

    RunningJob runningJob=UtilsForTests.runJobFail(conf,inDir,outDir);

    assertEquals(runningJob.getJobState(),JobStatus.FAILED);

    assertTrue(instr.verifyJob());

    assertEquals(1,instr.failed);

    instr.reset();

    int prevNumDumps=MockStackDumpTaskController.numStackDumps;

    runningJob=UtilsForTests.runJobKill(conf,inDir,outDir);

    assertTrue(runningJob.isComplete());

    assertEquals(runningJob.getJobState(),JobStatus.KILLED);

    assertTrue(instr.verifyJob());

    assertEquals(1,instr.killed);

    checkForStackDump(false,prevNumDumps);

    conf=mr.createJobConf();

    conf.setInt(JobContext.TASK_TIMEOUT,10000);

    conf.setInt(Job.COMPLETION_POLL_INTERVAL_KEY,50);

    SleepJob sleepJob=new SleepJob();

    sleepJob.setConf(conf);

    Job job=sleepJob.createJob(1,0,30000,1,0,0);

    job.setMaxMapAttempts(1);

    prevNumDumps=MockStackDumpTaskController.numStackDumps;

    job.waitForCompletion(true);

    checkForStackDump(true,prevNumDumps);

  }

  finally {

    if (mr != null) {

      mr.shutdown();

    }

  }

}

