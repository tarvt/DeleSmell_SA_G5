Location: TaskLogServlet.java

Content: 

/** 

 * Validates if the given user has job view permissions for this job. conf contains jobOwner and job-view-ACLs. We allow jobOwner, superUser(i.e. mrOwner) and cluster administrators and users and groups specified in configuration using mapreduce.job.acl-view-job to view job.

 */

private void checkAccessForTaskLogs(JobConf conf,String user,String jobId,TaskTracker tracker) throws AccessControlException {

  if (!tracker.areACLsEnabled()) {

    return;

  }

  AccessControlList jobViewACL=tracker.getJobACLsManager().constructJobACLs(conf).get(JobACL.VIEW_JOB);

  String queue=conf.getQueueName();

  AccessControlList queueAdminsACL=new AccessControlList(conf.get(toFullPropertyName(queue,QueueACL.ADMINISTER_JOBS.getAclName())," "));

  String jobOwner=conf.get(JobContext.USER_NAME);

  UserGroupInformation callerUGI=UserGroupInformation.createRemoteUser(user);

  if (!queueAdminsACL.isUserAllowed(callerUGI)) {

    tracker.getACLsManager().checkAccess(jobId,callerUGI,queue,Operation.VIEW_TASK_LOGS,jobOwner,jobViewACL);

  }

}

Location: TaskLogServlet.java

Content: 

/** 

 * Get the logs via http.

 */

@Override public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {

  long start=0;

  long end=-1;

  boolean plainText=false;

  TaskLog.LogName filter=null;

  boolean isCleanup=false;

  String attemptIdStr=request.getParameter("attemptid");

  if (attemptIdStr == null) {

    response.sendError(HttpServletResponse.SC_BAD_REQUEST,"Argument attemptid is required");

    return;

  }

  String logFilter=request.getParameter("filter");

  if (logFilter != null) {

    try {

      filter=TaskLog.LogName.valueOf(TaskLog.LogName.class,logFilter.toUpperCase());

    }

 catch (    IllegalArgumentException iae) {

      response.sendError(HttpServletResponse.SC_BAD_REQUEST,"Illegal value for filter: " + logFilter);

      return;

    }

  }

  String sLogOff=request.getParameter("start");

  if (sLogOff != null) {

    start=Long.valueOf(sLogOff).longValue();

  }

  String sLogEnd=request.getParameter("end");

  if (sLogEnd != null) {

    end=Long.valueOf(sLogEnd).longValue();

  }

  String sPlainText=request.getParameter("plaintext");

  if (sPlainText != null) {

    plainText=Boolean.valueOf(sPlainText);

  }

  String sCleanup=request.getParameter("cleanup");

  if (sCleanup != null) {

    isCleanup=Boolean.valueOf(sCleanup);

  }

  TaskAttemptID attemptId=TaskAttemptID.forName(attemptIdStr);

  if (!TaskLog.getAttemptDir(attemptId,isCleanup).exists()) {

    response.sendError(HttpServletResponse.SC_GONE,"Task log directory for task " + attemptId + " does not exist. May be cleaned up by Task Tracker, if older logs.");

    return;

  }

  String user=request.getRemoteUser();

  if (user != null) {

    ServletContext context=getServletContext();

    TaskTracker taskTracker=(TaskTracker)context.getAttribute("task.tracker");

    JobID jobId=attemptId.getJobID();

    JobConf jobACLConf=getConfFromJobACLsFile(jobId);

    if (jobACLConf != null) {

      try {

        checkAccessForTaskLogs(jobACLConf,user,jobId.toString(),taskTracker);

      }

 catch (      AccessControlException e) {

        String errMsg="User " + user + " failed to view tasklogs of job "+ jobId+ "!\n\n"+ e.getMessage();

        response.sendError(HttpServletResponse.SC_UNAUTHORIZED,errMsg);

        return;

      }

    }

  }

  OutputStream out=response.getOutputStream();

  if (!plainText) {

    response.setContentType("text/html; charset=utf-8");

    out.write(("<html>\n" + "<title>Task Logs: '" + attemptId + "'</title>\n"+ "<body>\n"+ "<h1>Task Logs: '"+ attemptId+ "'</h1><br>\n").getBytes());

    if (filter == null) {

      printTaskLog(response,out,attemptId,start,end,plainText,TaskLog.LogName.STDOUT,isCleanup);

      printTaskLog(response,out,attemptId,start,end,plainText,TaskLog.LogName.STDERR,isCleanup);

      printTaskLog(response,out,attemptId,start,end,plainText,TaskLog.LogName.SYSLOG,isCleanup);

      if (haveTaskLog(attemptId,isCleanup,TaskLog.LogName.DEBUGOUT)) {

        printTaskLog(response,out,attemptId,start,end,plainText,TaskLog.LogName.DEBUGOUT,isCleanup);

      }

      if (haveTaskLog(attemptId,isCleanup,TaskLog.LogName.PROFILE)) {

        printTaskLog(response,out,attemptId,start,end,plainText,TaskLog.LogName.PROFILE,isCleanup);

      }

    }

 else {

      printTaskLog(response,out,attemptId,start,end,plainText,filter,isCleanup);

    }

    out.write("</body></html>\n".getBytes());

    out.close();

  }

 else   if (filter == null) {

    response.sendError(HttpServletResponse.SC_BAD_REQUEST,"You must supply a value for `filter' (STDOUT, STDERR, or SYSLOG) if you set plainText = true");

  }

 else {

    response.setContentType("text/plain; charset=utf-8");

    printTaskLog(response,out,attemptId,start,end,plainText,filter,isCleanup);

  }

}

Location: TaskLogServlet.java

Content: 

/** 

 * Builds a JobConf object by reading the job-acls.xml file. This doesn't load the default resources. Returns null if job-acls.xml is not there in userlogs/$jobid on local file system. This can happen when we restart the cluster with job level authorization enabled(but was disabled on earlier cluster) and viewing task logs of old jobs(i.e. jobs finished on earlier unsecure cluster).

 */

static JobConf getConfFromJobACLsFile(JobID jobId){

  Path jobAclsFilePath=new Path(TaskLog.getJobDir(jobId).toString(),TaskTracker.jobACLsFile);

  JobConf conf=null;

  if (new File(jobAclsFilePath.toUri().getPath()).exists()) {

    conf=new JobConf(false);

    conf.addResource(jobAclsFilePath);

  }

  return conf;

}

Location: TaskLogServlet.java

Content: 

/** 

 * Construct the taskLogUrl

 * @param taskTrackerHostName

 * @param httpPort

 * @param taskAttemptID

 * @return the taskLogUrl

 */

public static String getTaskLogUrl(String taskTrackerHostName,String httpPort,String taskAttemptID){

  return ("http://" + taskTrackerHostName + ":"+ httpPort+ "/tasklog?attemptid="+ taskAttemptID);

}

Location: TaskLogServlet.java

Content: 

private boolean haveTaskLog(TaskAttemptID taskId,boolean isCleanup,TaskLog.LogName type){

  File f=TaskLog.getTaskLogFile(taskId,isCleanup,type);

  return f.canRead();

}

Location: TaskLogServlet.java

Content: 

private void printTaskLog(HttpServletResponse response,OutputStream out,TaskAttemptID taskId,long start,long end,boolean plainText,TaskLog.LogName filter,boolean isCleanup) throws IOException {

  if (!plainText) {

    out.write(("<br><b><u>" + filter + " logs</u></b><br>\n"+ "<pre>\n").getBytes());

  }

  try {

    InputStream taskLogReader=new TaskLog.Reader(taskId,filter,start,end,isCleanup);

    byte[] b=new byte[65536];

    int result;

    while (true) {

      result=taskLogReader.read(b);

      if (result > 0) {

        if (plainText) {

          out.write(b,0,result);

        }

 else {

          HtmlQuoting.quoteHtmlChars(out,b,0,result);

        }

      }

 else {

        break;

      }

    }

    taskLogReader.close();

    if (!plainText) {

      out.write("</pre></td></tr></table><hr><br>\n".getBytes());

    }

  }

 catch (  IOException ioe) {

    if (filter == TaskLog.LogName.DEBUGOUT) {

      if (!plainText) {

        out.write("</pre><hr><br>\n".getBytes());

      }

    }

 else {

      String msg="Failed to retrieve " + filter + " log for task: "+ taskId;

      LOG.warn(msg,ioe);

      response.sendError(HttpServletResponse.SC_GONE,msg);

    }

  }

}

