Location: TestMultipleArchiveFiles.java

Content: 

protected void checkOutput() throws IOException {

  StringBuffer output=new StringBuffer(256);

  Path[] fileList=FileUtil.stat2Paths(fileSys.listStatus(new Path(OUTPUT_DIR)));

  for (int i=0; i < fileList.length; i++) {

    LOG.info("Adding output from file: " + fileList[i]);

    output.append(StreamUtil.slurpHadoop(fileList[i],fileSys));

  }

  assertEquals(expectedOutput,output.toString());

}

Location: TestMultipleArchiveFiles.java

Content: 

@Override protected void setInputOutput(){

  inputFile=INPUT_FILE;

  outDir=OUTPUT_DIR;

}

Location: TestMultipleArchiveFiles.java

Content: 

public TestMultipleArchiveFiles() throws Exception {

  CACHE_FILE_1=new File("cacheArchive1");

  CACHE_FILE_2=new File("cacheArchive2");

  input="HADOOP";

  expectedOutput="HADOOP\t\nHADOOP\t\n";

  conf=new Configuration();

  dfs=new MiniDFSCluster(conf,1,true,null);

  fileSys=dfs.getFileSystem();

  namenode=fileSys.getUri().getAuthority();

  mr=new MiniMRCluster(1,namenode,3);

  strJobTracker=JTConfig.JT_IPC_ADDRESS + "=localhost:" + mr.getJobTrackerPort();

  strNamenode="fs.default.name=" + namenode;

  map="xargs cat";

  reduce="cat";

}

