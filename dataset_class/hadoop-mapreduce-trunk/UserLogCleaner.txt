Location: UserLogCleaner.java

Content: 

/** 

 * Clears all the logs in userlog directory. Adds the job directories for deletion with default retain hours. Deletes all other directories, if any. This is usually called on reinit/restart of the TaskTracker

 * @param conf

 * @throws IOException

 */

void clearOldUserLogs(Configuration conf) throws IOException {

  File userLogDir=TaskLog.getUserLogDir();

  if (userLogDir.exists()) {

    String[] logDirs=userLogDir.list();

    if (logDirs.length > 0) {

      long now=clock.getTime();

      for (      String logDir : logDirs) {

        if (logDir.equals(logAsyncDisk.TOBEDELETED)) {

          continue;

        }

        JobID jobid=null;

        try {

          jobid=JobID.forName(logDir);

        }

 catch (        IllegalArgumentException ie) {

          deleteLogPath(new File(userLogDir,logDir).getAbsolutePath());

          continue;

        }

        if (!completedJobs.containsKey(jobid)) {

          markJobLogsForDeletion(now,conf,jobid);

        }

      }

    }

  }

}

Location: UserLogCleaner.java

Content: 

/** 

 * Deletes the log path. This path will be removed immediately through  {@link MRAsyncDiskService}

 * @param logPath

 * @throws IOException

 */

private void deleteLogPath(String logPath) throws IOException {

  LOG.info("Deleting user log path " + logPath);

  logAsyncDisk.moveAndDeleteAbsolutePath(logPath);

}

Location: UserLogCleaner.java

Content: 

private int getUserlogRetainMillis(Configuration conf){

  return (conf == null ? UserLogCleaner.DEFAULT_USER_LOG_RETAIN_HOURS : conf.getInt(MRJobConfig.USER_LOG_RETAIN_HOURS,UserLogCleaner.DEFAULT_USER_LOG_RETAIN_HOURS)) * 1000 * 60* 60;

}

Location: UserLogCleaner.java

Content: 

/** 

 * Adds job user-log directory to cleanup thread to delete logs after user-log retain hours. If the configuration is null or user-log retain hours is not configured, it is deleted after {@value UserLogCleaner#DEFAULT_USER_LOG_RETAIN_HOURS}

 * @param jobCompletionTime job completion time in millis

 * @param conf The configuration from which user-log retain hours should be read

 * @param jobid JobID for which user logs should be deleted

 */

public void markJobLogsForDeletion(long jobCompletionTime,Configuration conf,JobID jobid){

  long retainTimeStamp=jobCompletionTime + (getUserlogRetainMillis(conf));

  LOG.info("Adding " + jobid + " for user-log deletion with retainTimeStamp:"+ retainTimeStamp);

  completedJobs.put(jobid,Long.valueOf(retainTimeStamp));

}

Location: UserLogCleaner.java

Content: 

void processCompletedJobs() throws IOException {

  long now=clock.getTime();

synchronized (completedJobs) {

    Iterator<Entry<JobID,Long>> completedJobIter=completedJobs.entrySet().iterator();

    while (completedJobIter.hasNext()) {

      Entry<JobID,Long> entry=completedJobIter.next();

      if (entry.getValue().longValue() <= now) {

        deleteLogPath(TaskLog.getJobDir(entry.getKey()).getAbsolutePath());

        completedJobIter.remove();

      }

    }

  }

}

Location: UserLogCleaner.java

Content: 

void setClock(Clock clock){

  this.clock=clock;

}

Location: UserLogCleaner.java

Content: 

/** 

 * Remove job from user log deletion.

 * @param jobid

 */

public void unmarkJobFromLogDeletion(JobID jobid){

  if (completedJobs.remove(jobid) != null) {

    LOG.info("Removing " + jobid + " from user-log deletion");

  }

}

Location: UserLogCleaner.java

Content: 

UserLogCleaner(Configuration conf) throws IOException {

  threadSleepTime=conf.getLong(TTConfig.TT_USERLOGCLEANUP_SLEEPTIME,DEFAULT_THREAD_SLEEP_TIME);

  logAsyncDisk=new MRAsyncDiskService(FileSystem.getLocal(conf),TaskLog.getUserLogDir().toString());

  setClock(new Clock());

}

