Location: MapFileOutputFormat.java

Content: 

/** 

 * Get an entry from output generated by this class. 

 */

public static <K extends WritableComparable<?>,V extends Writable>Writable getEntry(MapFile.Reader[] readers,Partitioner<K,V> partitioner,K key,V value) throws IOException {

  int part=partitioner.getPartition(key,value,readers.length);

  return readers[part].get(key,value);

}

Location: MapFileOutputFormat.java

Content: 

/** 

 * Open the output generated by this format. 

 */

public static MapFile.Reader[] getReaders(FileSystem ignored,Path dir,Configuration conf) throws IOException {

  return org.apache.hadoop.mapreduce.lib.output.MapFileOutputFormat.getReaders(dir,conf);

}

Location: MapFileOutputFormat.java

Content: 

/** 

 * Open the output generated by this format. 

 */

public static MapFile.Reader[] getReaders(Path dir,Configuration conf) throws IOException {

  FileSystem fs=dir.getFileSystem(conf);

  Path[] names=FileUtil.stat2Paths(fs.listStatus(dir));

  Arrays.sort(names);

  MapFile.Reader[] parts=new MapFile.Reader[names.length];

  for (int i=0; i < names.length; i++) {

    parts[i]=new MapFile.Reader(fs,names[i].toString(),conf);

  }

  return parts;

}

