Location: VerticaInputFormat.java

Content: 

/** 

 * Set the input query for a job

 * @param job

 * @param inputQuery query to run against Vertica

 */

public static void setInput(Job job,String inputQuery){

  job.setInputFormatClass(VerticaInputFormat.class);

  VerticaConfiguration config=new VerticaConfiguration(job.getConfiguration());

  config.setInputQuery(inputQuery);

}

Location: VerticaInputFormat.java

Content: 

/** 

 * Set the input query and a collection of parameter lists

 * @param job

 * @param inpuQuery SQL query that has parameters specified by question marks ("?")

 * @param segmentParams collection of ordered lists to subtitute into the input query

 * @throws IOException

 */

public static void setInput(Job job,String inpuQuery,Collection<List<Object>> segmentParams) throws IOException {

  job.setInputFormatClass(VerticaInputFormat.class);

  VerticaConfiguration config=new VerticaConfiguration(job.getConfiguration());

  config.setInputQuery(inpuQuery);

  config.setInputParams(segmentParams);

}

Location: VerticaInputFormat.java

Content: 

/** 

 * Set the input query and any number of comma delimited literal list of parameters

 * @param job

 * @param inputQuery SQL query that has parameters specified by question marks ("?")

 * @param segmentParams any numer of comma delimited strings with literal parameters to substitute in the input query

 */

@SuppressWarnings("serial") public static void setInput(Job job,String inputQuery,String... segmentParams) throws IOException {

  DateFormat datefmt=DateFormat.getDateInstance();

  Collection<List<Object>> params=new HashSet<List<Object>>(){

  }

;

  for (  String strParams : segmentParams) {

    List<Object> param=new ArrayList<Object>();

    for (    String strParam : strParams.split(",")) {

      strParam=strParam.trim();

      if (strParam.charAt(0) == '\'' && strParam.charAt(strParam.length() - 1) == '\'')       param.add(strParam.substring(1,strParam.length() - 1));

 else {

        try {

          param.add(datefmt.parse(strParam));

        }

 catch (        ParseException e1) {

          try {

            param.add(Integer.parseInt(strParam));

          }

 catch (          NumberFormatException e2) {

            throw new IOException("Error parsing argument " + strParam);

          }

        }

      }

    }

    params.add(param);

  }

  setInput(job,inputQuery,params);

}

