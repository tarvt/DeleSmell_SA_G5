Location: TestTaskTrackerBlacklisting.java

Content: 

private void checkReasonForBlackListing(String host,Set<ReasonForBlackListing> reasonsForBlackListing){

  Set<ReasonForBlackListing> rfbs=jobTracker.getReasonForBlackList(host);

  assertEquals("Reasons for blacklisting of " + host + " does not match",reasonsForBlackListing,rfbs);

}

Location: TestTaskTrackerBlacklisting.java

Content: 

private int getFailureCountSinceStart(JobTracker jt,String tracker){

  JobTrackerStatistics jtStats=jt.getStatistics();

  StatisticsCollector collector=jtStats.collector;

  collector.update();

  return jtStats.getTaskTrackerStat(tracker).healthCheckFailedStat.getValues().get(StatisticsCollector.SINCE_START).getValue();

}

Location: TestTaskTrackerBlacklisting.java

Content: 

private TaskTrackerHealthStatus getUnhealthyNodeStatus(String error){

  TaskTrackerHealthStatus status=new TaskTrackerHealthStatus();

  status.setNodeHealthy(false);

  status.setLastReported(System.currentTimeMillis());

  status.setHealthReport(error);

  return status;

}

Location: TestTaskTrackerBlacklisting.java

Content: 

/** 

 * Runs a job which blacklists the first of the tracker which is passed to the method.

 * @param jobTracker JobTracker instance

 * @param trackers array of trackers, the method would blacklistfirst element of the array

 * @return A job in progress object.

 * @throws Exception

 */

static FakeJobInProgress runBlackListingJob(JobTracker jobTracker,String[] trackers) throws Exception {

  TaskAttemptID[] taskAttemptID=new TaskAttemptID[3];

  JobConf conf=new JobConf();

  conf.setSpeculativeExecution(false);

  conf.setNumMapTasks(0);

  conf.setNumReduceTasks(5);

  conf.set(JobContext.REDUCE_FAILURES_MAXPERCENT,".70");

  conf.setBoolean(JobContext.SETUP_CLEANUP_NEEDED,false);

  conf.setMaxTaskFailuresPerTracker(1);

  FakeJobInProgress job=new FakeJobInProgress(conf,jobTracker);

  job.setClusterSize(trackers.length);

  job.initTasks();

  taskAttemptID[0]=job.findReduceTask(trackers[0]);

  taskAttemptID[1]=job.findReduceTask(trackers[1]);

  taskAttemptID[2]=job.findReduceTask(trackers[2]);

  job.finishTask(taskAttemptID[1]);

  job.finishTask(taskAttemptID[2]);

  job.failTask(taskAttemptID[0]);

  taskAttemptID[0]=job.findReduceTask(trackers[0]);

  job.failTask(taskAttemptID[0]);

  taskAttemptID[0]=job.findReduceTask(trackers[1]);

  job.finishTask(taskAttemptID[0]);

  taskAttemptID[0]=job.findReduceTask(trackers[1]);

  taskAttemptID[1]=job.findReduceTask(trackers[2]);

  job.finishTask(taskAttemptID[0]);

  job.finishTask(taskAttemptID[1]);

  jobTracker.finalizeJob(job);

  return job;

}

Location: TestTaskTrackerBlacklisting.java

Content: 

private static void sendHeartBeat(TaskTrackerHealthStatus status,boolean initialContact) throws IOException {

  for (  String tracker : trackers) {

    TaskTrackerStatus tts=new TaskTrackerStatus(tracker,JobInProgress.convertTrackerNameToHostName(tracker));

    if (status != null) {

      TaskTrackerHealthStatus healthStatus=tts.getHealthStatus();

      healthStatus.setNodeHealthy(status.isNodeHealthy());

      healthStatus.setHealthReport(status.getHealthReport());

      healthStatus.setLastReported(status.getLastReported());

    }

    jobTracker.heartbeat(tts,false,initialContact,false,responseId);

  }

  responseId++;

}

Location: TestTaskTrackerBlacklisting.java

Content: 

public void testBlacklistingReasonString() throws Exception {

  String error="ERROR";

  String error1="ERROR1";

  TaskTrackerHealthStatus status=getUnhealthyNodeStatus(error);

  sendHeartBeat(status,false);

  assertEquals("All trackers not blacklisted",3,jobTracker.getBlacklistedTrackerCount());

  checkReasonForBlackListing(hosts[0],nodeUnHealthyReasonSet);

  checkReasonForBlackListing(hosts[1],nodeUnHealthyReasonSet);

  checkReasonForBlackListing(hosts[2],nodeUnHealthyReasonSet);

  for (int i=0; i < hosts.length; i++) {

    assertEquals("Blacklisting reason string not correct for host " + i,error,jobTracker.getFaultReport(hosts[i]).replace("\n",""));

  }

  status.setNodeHealthy(false);

  status.setLastReported(System.currentTimeMillis());

  status.setHealthReport(error1);

  sendHeartBeat(status,false);

  checkReasonForBlackListing(hosts[0],nodeUnHealthyReasonSet);

  checkReasonForBlackListing(hosts[1],nodeUnHealthyReasonSet);

  checkReasonForBlackListing(hosts[2],nodeUnHealthyReasonSet);

  for (int i=0; i < hosts.length; i++) {

    assertEquals("Blacklisting reason string not correct for host " + i,error1,jobTracker.getFaultReport(hosts[i]).replace("\n",""));

  }

  sendHeartBeat(null,false);

}

Location: TestTaskTrackerBlacklisting.java

Content: 

public void testBlackListingWithFailuresAndHealthStatus() throws Exception {

  runBlackListingJob(jobTracker,trackers);

  assertEquals("Tracker 1 not blacklisted",1,jobTracker.getBlacklistedTrackerCount());

  checkReasonForBlackListing(hosts[0],exceedsFailuresReasonSet);

  TaskTrackerHealthStatus status=getUnhealthyNodeStatus("ERROR");

  sendHeartBeat(status,false);

  assertEquals("All trackers not blacklisted",3,jobTracker.getBlacklistedTrackerCount());

  checkReasonForBlackListing(hosts[0],unhealthyAndExceedsFailure);

  checkReasonForBlackListing(hosts[1],nodeUnHealthyReasonSet);

  checkReasonForBlackListing(hosts[2],nodeUnHealthyReasonSet);

  clock.jumpADay=true;

  sendHeartBeat(status,false);

  assertEquals("All trackers not blacklisted",3,jobTracker.getBlacklistedTrackerCount());

  for (  String host : hosts) {

    checkReasonForBlackListing(host,nodeUnHealthyReasonSet);

  }

  sendHeartBeat(null,false);

  assertEquals("All trackers not white listed",0,jobTracker.getBlacklistedTrackerCount());

  clock.jumpADay=false;

}

Location: TestTaskTrackerBlacklisting.java

Content: 

public void testBlackListingWithTrackerReservation() throws Exception {

  JobConf conf=new JobConf();

  conf.setNumMapTasks(1);

  conf.setNumReduceTasks(1);

  FakeJobInProgress job=new FakeJobInProgress(conf,jobTracker);

  TaskTracker tt1=jobTracker.getTaskTracker(trackers[0]);

  TaskTracker tt2=jobTracker.getTaskTracker(trackers[1]);

  tt1.reserveSlots(TaskType.MAP,job,1);

  tt1.reserveSlots(TaskType.REDUCE,job,1);

  tt2.reserveSlots(TaskType.MAP,job,1);

  tt2.reserveSlots(TaskType.REDUCE,job,1);

  assertEquals("Tracker 1 not reserved for the job 1",2,job.getNumReservedTaskTrackersForMaps());

  assertEquals("Tracker 1 not reserved for the job 1",2,job.getNumReservedTaskTrackersForReduces());

  runBlackListingJob(jobTracker,trackers);

  assertEquals("Tracker 1 not unreserved for the job 1",1,job.getNumReservedTaskTrackersForMaps());

  assertEquals("Tracker 1 not unreserved for the job 1",1,job.getNumReservedTaskTrackersForReduces());

  assertEquals("Tracker 1 not blacklisted",1,jobTracker.getBlacklistedTrackerCount());

  checkReasonForBlackListing(hosts[0],exceedsFailuresReasonSet);

  TaskTrackerHealthStatus status=getUnhealthyNodeStatus("ERROR");

  sendHeartBeat(status,false);

  assertEquals("All trackers not blacklisted",3,jobTracker.getBlacklistedTrackerCount());

  checkReasonForBlackListing(hosts[0],unhealthyAndExceedsFailure);

  checkReasonForBlackListing(hosts[1],nodeUnHealthyReasonSet);

  checkReasonForBlackListing(hosts[2],nodeUnHealthyReasonSet);

  assertEquals("Tracker 1 not unreserved for the job 1",0,job.getNumReservedTaskTrackersForMaps());

  assertEquals("Tracker 1 not unreserved for the job 1",0,job.getNumReservedTaskTrackersForReduces());

  clock.jumpADay=true;

  sendHeartBeat(null,false);

}

Location: TestTaskTrackerBlacklisting.java

Content: 

/** 

 * Test case to test if the cluster status is populated with the right blacklist information, which would be used by the  {@link JobClient} todisplay information on the Command Line interface.

 */

public void testClusterStatusBlacklistedReason() throws Exception {

  String error="ERROR";

  String errorWithNewLines="ERROR\nERROR";

  String expectedErrorReport="ERROR:ERROR";

  Collection<BlackListInfo> blackListedTrackerInfo=jobTracker.getBlackListedTrackers();

  assertTrue("The blacklisted tracker nodes is not empty.",blackListedTrackerInfo.isEmpty());

  TaskTrackerHealthStatus status=getUnhealthyNodeStatus(errorWithNewLines);

  sendHeartBeat(status,false);

  assertEquals("All trackers not blacklisted",3,jobTracker.getBlacklistedTrackerCount());

  blackListedTrackerInfo=jobTracker.getBlackListedTrackers();

  assertEquals("Blacklist tracker info does not contain all trackers",3,blackListedTrackerInfo.size());

  for (  BlackListInfo bi : blackListedTrackerInfo) {

    assertEquals("Tracker not blacklisted for health reason",ReasonForBlackListing.NODE_UNHEALTHY.toString().trim(),bi.getReasonForBlackListing().trim());

    assertTrue("Tracker blacklist report does not match",bi.toString().endsWith(expectedErrorReport));

  }

  sendHeartBeat(null,false);

  runBlackListingJob(jobTracker,trackers);

  sendHeartBeat(status,false);

  blackListedTrackerInfo=jobTracker.getBlackListedTrackers();

  for (  BlackListInfo bi : blackListedTrackerInfo) {

    if (bi.getTrackerName().equals(trackers[0])) {

      assertTrue("Reason for blacklisting of tracker 1 does not contain Unhealthy reasons",bi.getReasonForBlackListing().contains(ReasonForBlackListing.NODE_UNHEALTHY.toString().trim()));

      assertTrue("Reason for blacklisting of tracker 1 does not contain Unhealthy reasons",bi.getReasonForBlackListing().contains(ReasonForBlackListing.EXCEEDING_FAILURES.toString().trim()));

      assertTrue("Blacklist failure does not contain failure report string",bi.getBlackListReport().contains("failures on the tracker"));

    }

 else {

      assertEquals("Tracker not blacklisted for health reason",ReasonForBlackListing.NODE_UNHEALTHY.toString().trim(),bi.getReasonForBlackListing().trim());

    }

    assertTrue("Tracker blacklist report does not match",bi.getBlackListReport().trim().contains(error));

  }

  clock.jumpADay=true;

  sendHeartBeat(null,false);

}

Location: TestTaskTrackerBlacklisting.java

Content: 

public void testNodeHealthBlackListing() throws Exception {

  TaskTrackerHealthStatus status=getUnhealthyNodeStatus("ERROR");

  sendHeartBeat(status,false);

  for (  String host : hosts) {

    checkReasonForBlackListing(host,nodeUnHealthyReasonSet);

  }

  status.setNodeHealthy(true);

  status.setLastReported(System.currentTimeMillis());

  status.setHealthReport("");

  sendHeartBeat(status,false);

  assertEquals("Trackers still blacklisted after healthy report",0,jobTracker.getBlacklistedTrackerCount());

}

Location: TestTaskTrackerBlacklisting.java

Content: 

/** 

 * Test case to check if the task tracker node health failure statistics is populated correctly. We check the since start property and assume that other properties would be populated in a correct manner.

 */

public void testTaskTrackerNodeHealthFailureStatistics() throws Exception {

  int failureCount=getFailureCountSinceStart(jobTracker,trackers[0]);

  sendHeartBeat(null,false);

  for (  String tracker : trackers) {

    assertEquals("Failure count updated wrongly for tracker : " + tracker,failureCount,getFailureCountSinceStart(jobTracker,tracker));

  }

  TaskTrackerHealthStatus status=getUnhealthyNodeStatus("ERROR");

  sendHeartBeat(status,false);

  failureCount++;

  for (  String tracker : trackers) {

    assertEquals("Failure count updated wrongly for tracker : " + tracker,failureCount,getFailureCountSinceStart(jobTracker,tracker));

  }

  sendHeartBeat(status,false);

  for (  String tracker : trackers) {

    assertEquals("Failure count updated wrongly for tracker : " + tracker,failureCount,getFailureCountSinceStart(jobTracker,tracker));

  }

  sendHeartBeat(null,false);

  for (  String tracker : trackers) {

    assertEquals("Failure count updated wrongly for tracker : " + tracker,failureCount,getFailureCountSinceStart(jobTracker,tracker));

  }

}

Location: TestTaskTrackerBlacklisting.java

Content: 

public void testTrackerBlacklistingForJobFailures() throws Exception {

  runBlackListingJob(jobTracker,trackers);

  assertEquals("Tracker 1 not blacklisted",jobTracker.getBlacklistedTrackerCount(),1);

  checkReasonForBlackListing(hosts[0],exceedsFailuresReasonSet);

  clock.jumpADay=true;

  sendHeartBeat(null,false);

  assertEquals("Tracker 1 still blacklisted after a day",0,jobTracker.getBlacklistedTrackerCount());

  clock.jumpADay=false;

}

