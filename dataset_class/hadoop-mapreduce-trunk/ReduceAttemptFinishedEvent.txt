Location: ReduceAttemptFinishedEvent.java

Content: 

/** 

 * Get the finish time of the shuffle phase 

 */

public long getShuffleFinishTime(){

  return datum.shuffleFinishTime;

}

Location: ReduceAttemptFinishedEvent.java

Content: 

/** 

 * Get the finish time of the sort phase 

 */

public long getSortFinishTime(){

  return datum.sortFinishTime;

}

Location: ReduceAttemptFinishedEvent.java

Content: 

ReduceAttemptFinishedEvent(){

}

Location: ReduceAttemptFinishedEvent.java

Content: 

/** 

 * Create an event to record completion of a reduce attempt

 * @param id Attempt Id

 * @param taskType Type of task

 * @param taskStatus Status of the task

 * @param shuffleFinishTime Finish time of the shuffle phase

 * @param sortFinishTime Finish time of the sort phase

 * @param finishTime Finish time of the attempt

 * @param hostname Name of the host where the attempt executed

 * @param state State of the attempt

 * @param counters Counters for the attempt

 */

public ReduceAttemptFinishedEvent(TaskAttemptID id,TaskType taskType,String taskStatus,long shuffleFinishTime,long sortFinishTime,long finishTime,String hostname,String state,Counters counters){

  datum.taskid=new Utf8(id.getTaskID().toString());

  datum.attemptId=new Utf8(id.toString());

  datum.taskType=new Utf8(taskType.name());

  datum.taskStatus=new Utf8(taskStatus);

  datum.shuffleFinishTime=shuffleFinishTime;

  datum.sortFinishTime=sortFinishTime;

  datum.finishTime=finishTime;

  datum.hostname=new Utf8(hostname);

  datum.state=new Utf8(state);

  datum.counters=EventWriter.toAvro(counters);

}

