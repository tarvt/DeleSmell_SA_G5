Location: LinuxResourceCalculatorPlugin.java

Content: 

/** 

 * Get current time

 * @return Unix time stamp in millisecond

 */

long getCurrentTime(){

  return System.currentTimeMillis();

}

Location: LinuxResourceCalculatorPlugin.java

Content: 

public LinuxResourceCalculatorPlugin(){

  procfsMemFile=PROCFS_MEMFILE;

  procfsCpuFile=PROCFS_CPUINFO;

  procfsStatFile=PROCFS_STAT;

  jiffyLengthInMillis=ProcfsBasedProcessTree.JIFFY_LENGTH_IN_MILLIS;

  String pid=System.getenv().get("JVM_PID");

  pTree=new ProcfsBasedProcessTree(pid);

}

Location: LinuxResourceCalculatorPlugin.java

Content: 

/** 

 * Constructor which allows assigning the /proc/ directories. This will be used only in unit tests

 * @param procfsMemFile fake file for /proc/meminfo

 * @param procfsCpuFile fake file for /proc/cpuinfo

 * @param procfsStatFile fake file for /proc/stat

 * @param jiffyLengthInMillis fake jiffy length value

 */

public LinuxResourceCalculatorPlugin(String procfsMemFile,String procfsCpuFile,String procfsStatFile,long jiffyLengthInMillis){

  this.procfsMemFile=procfsMemFile;

  this.procfsCpuFile=procfsCpuFile;

  this.procfsStatFile=procfsStatFile;

  this.jiffyLengthInMillis=jiffyLengthInMillis;

  String pid=System.getenv().get("JVM_PID");

  pTree=new ProcfsBasedProcessTree(pid);

}

Location: LinuxResourceCalculatorPlugin.java

Content: 

/** 

 * Read /proc/meminfo, parse and compute memory information only once

 */

private void readProcMemInfoFile(){

  readProcMemInfoFile(false);

}

Location: LinuxResourceCalculatorPlugin.java

Content: 

/** 

 * Read /proc/meminfo, parse and compute memory information

 * @param readAgain if false, read only on the first time

 */

private void readProcMemInfoFile(boolean readAgain){

  if (readMemInfoFile && !readAgain) {

    return;

  }

  BufferedReader in=null;

  FileReader fReader=null;

  try {

    fReader=new FileReader(procfsMemFile);

    in=new BufferedReader(fReader);

  }

 catch (  FileNotFoundException f) {

    return;

  }

  Matcher mat=null;

  try {

    String str=in.readLine();

    while (str != null) {

      mat=PROCFS_MEMFILE_FORMAT.matcher(str);

      if (mat.find()) {

        if (mat.group(1).equals(MEMTOTAL_STRING)) {

          ramSize=Long.parseLong(mat.group(2));

        }

 else         if (mat.group(1).equals(SWAPTOTAL_STRING)) {

          swapSize=Long.parseLong(mat.group(2));

        }

 else         if (mat.group(1).equals(MEMFREE_STRING)) {

          ramSizeFree=Long.parseLong(mat.group(2));

        }

 else         if (mat.group(1).equals(SWAPFREE_STRING)) {

          swapSizeFree=Long.parseLong(mat.group(2));

        }

 else         if (mat.group(1).equals(INACTIVE_STRING)) {

          inactiveSize=Long.parseLong(mat.group(2));

        }

      }

      str=in.readLine();

    }

  }

 catch (  IOException io) {

    LOG.warn("Error reading the stream " + io);

  }

 finally {

    try {

      fReader.close();

      try {

        in.close();

      }

 catch (      IOException i) {

        LOG.warn("Error closing the stream " + in);

      }

    }

 catch (    IOException i) {

      LOG.warn("Error closing the stream " + fReader);

    }

  }

  readMemInfoFile=true;

}

