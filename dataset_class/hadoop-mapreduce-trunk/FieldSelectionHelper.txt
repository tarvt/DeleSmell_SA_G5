Location: FieldSelectionHelper.java

Content: 

/** 

 * Extract the actual field numbers from the given field specs. If a field spec is in the form of "n-" (like 3-), then n will be the  return value. Otherwise, -1 will be returned.  

 * @param fieldListSpec an array of field specs

 * @param fieldList an array of field numbers extracted from the specs.

 * @return number n if some field spec is in the form of "n-", -1 otherwise.

 */

private static int extractFields(String[] fieldListSpec,List<Integer> fieldList){

  int allFieldsFrom=-1;

  int i=0;

  int j=0;

  int pos=-1;

  String fieldSpec=null;

  for (i=0; i < fieldListSpec.length; i++) {

    fieldSpec=fieldListSpec[i];

    if (fieldSpec.length() == 0) {

      continue;

    }

    pos=fieldSpec.indexOf('-');

    if (pos < 0) {

      Integer fn=new Integer(fieldSpec);

      fieldList.add(fn);

    }

 else {

      String start=fieldSpec.substring(0,pos);

      String end=fieldSpec.substring(pos + 1);

      if (start.length() == 0) {

        start="0";

      }

      if (end.length() == 0) {

        allFieldsFrom=Integer.parseInt(start);

        continue;

      }

      int startPos=Integer.parseInt(start);

      int endPos=Integer.parseInt(end);

      for (j=startPos; j <= endPos; j++) {

        fieldList.add(j);

      }

    }

  }

  return allFieldsFrom;

}

Location: FieldSelectionHelper.java

Content: 

public void extractOutputKeyValue(String key,String val,String fieldSep,List<Integer> keyFieldList,List<Integer> valFieldList,int allValueFieldsFrom,boolean ignoreKey,boolean isMap){

  if (!ignoreKey) {

    val=key + val;

  }

  String[] fields=val.split(fieldSep);

  String newKey=selectFields(fields,keyFieldList,-1,fieldSep);

  String newVal=selectFields(fields,valFieldList,allValueFieldsFrom,fieldSep);

  if (isMap && newKey == null) {

    newKey=newVal;

    newVal=null;

  }

  if (newKey != null) {

    this.key=new Text(newKey);

  }

  if (newVal != null) {

    this.value=new Text(newVal);

  }

}

Location: FieldSelectionHelper.java

Content: 

public FieldSelectionHelper(){

}

Location: FieldSelectionHelper.java

Content: 

public FieldSelectionHelper(Text key,Text val){

  this.key=key;

  this.value=val;

}

Location: FieldSelectionHelper.java

Content: 

public static int parseOutputKeyValueSpec(String keyValueSpec,List<Integer> keyFieldList,List<Integer> valueFieldList){

  String[] keyValSpecs=keyValueSpec.split(":",-1);

  String[] keySpec=keyValSpecs[0].split(",");

  String[] valSpec=new String[0];

  if (keyValSpecs.length > 1) {

    valSpec=keyValSpecs[1].split(",");

  }

  FieldSelectionHelper.extractFields(keySpec,keyFieldList);

  return FieldSelectionHelper.extractFields(valSpec,valueFieldList);

}

Location: FieldSelectionHelper.java

Content: 

private static String selectFields(String[] fields,List<Integer> fieldList,int allFieldsFrom,String separator){

  String retv=null;

  int i=0;

  StringBuffer sb=null;

  if (fieldList != null && fieldList.size() > 0) {

    if (sb == null) {

      sb=new StringBuffer();

    }

    for (    Integer index : fieldList) {

      if (index < fields.length) {

        sb.append(fields[index]);

      }

      sb.append(separator);

    }

  }

  if (allFieldsFrom >= 0) {

    if (sb == null) {

      sb=new StringBuffer();

    }

    for (i=allFieldsFrom; i < fields.length; i++) {

      sb.append(fields[i]).append(separator);

    }

  }

  if (sb != null) {

    retv=sb.toString();

    if (retv.length() > 0) {

      retv=retv.substring(0,retv.length() - 1);

    }

  }

  return retv;

}

Location: FieldSelectionHelper.java

Content: 

public static String specToString(String fieldSeparator,String keyValueSpec,int allValueFieldsFrom,List<Integer> keyFieldList,List<Integer> valueFieldList){

  StringBuffer sb=new StringBuffer();

  sb.append("fieldSeparator: ").append(fieldSeparator).append("\n");

  sb.append("keyValueSpec: ").append(keyValueSpec).append("\n");

  sb.append("allValueFieldsFrom: ").append(allValueFieldsFrom);

  sb.append("\n");

  sb.append("keyFieldList.length: ").append(keyFieldList.size());

  sb.append("\n");

  for (  Integer field : keyFieldList) {

    sb.append("\t").append(field).append("\n");

  }

  sb.append("valueFieldList.length: ").append(valueFieldList.size());

  sb.append("\n");

  for (  Integer field : valueFieldList) {

    sb.append("\t").append(field).append("\n");

  }

  return sb.toString();

}

