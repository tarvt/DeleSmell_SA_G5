Location: ControlledMapReduceJob.java

Content: 

/** 

 * Make sure that the number of tasks of type specified by isMap running in the given job is the same as noOfTasksToBeRunning <p> TODO: It should eventually use a JobID and then get the information from the JT to check the number of running tasks.

 * @param jip

 * @param isMap

 * @param noOfTasksToBeRunning

 */

static void assertNumTasksRunning(JobInProgress jip,boolean isMap,int noOfTasksToBeRunning) throws Exception {

  if ((isMap ? jip.runningMaps() : jip.runningReduces()) != noOfTasksToBeRunning) {

    throw new Exception("Number of tasks running is not " + noOfTasksToBeRunning);

  }

}

Location: ControlledMapReduceJob.java

Content: 

/** 

 * Finished all tasks of type determined by isMap

 * @param isMap

 * @throws IOException

 */

public void finishAllTasks(boolean isMap) throws IOException {

  finishNTasks(isMap,(isMap ? numMappers : numReducers));

}

Location: ControlledMapReduceJob.java

Content: 

/** 

 * Finish the job

 * @throws IOException

 */

public void finishJob() throws IOException {

  finishAllTasks(true);

  finishAllTasks(false);

}

Location: ControlledMapReduceJob.java

Content: 

/** 

 * Finish N number of maps/reduces.

 * @param isMap

 * @param noOfTasksToFinish

 * @throws IOException

 */

public void finishNTasks(boolean isMap,int noOfTasksToFinish) throws IOException {

  if (noOfTasksToFinish < 0) {

    throw new IOException("Negative values for noOfTasksToFinish not acceptable");

  }

  if (noOfTasksToFinish == 0) {

    return;

  }

  LOG.info("Going to finish off " + noOfTasksToFinish);

  String PREFIX=isMap ? MAP_SIGFILE_PREFIX : REDUCE_SIGFILE_PREFIX;

  long tasksFinished=isMap ? mapsFinished : reducesFinished;

  Path oldSignalFile=new Path(signalFileDir,PREFIX + String.valueOf(tasksFinished));

  Path newSignalFile=new Path(signalFileDir,PREFIX + String.valueOf(tasksFinished + noOfTasksToFinish));

  fs.rename(oldSignalFile,newSignalFile);

  if (isMap) {

    mapsFinished+=noOfTasksToFinish;

  }

 else {

    reducesFinished+=noOfTasksToFinish;

  }

  LOG.info("Successfully sent signal to finish off " + noOfTasksToFinish);

}

Location: ControlledMapReduceJob.java

Content: 

private JobConf getControlledMapReduceJobConf(Configuration clusterConf,int numMapper,int numReducer) throws IOException {

  setConf(clusterConf);

  initialize();

  JobConf conf=new JobConf(getConf(),ControlledMapReduceJob.class);

  conf.setJobName("ControlledJob");

  conf.set("signal.dir.path",signalFileDir.toString());

  conf.setNumMapTasks(numMapper);

  conf.setNumReduceTasks(numReducer);

  conf.setMapperClass(ControlledMapReduceJob.class);

  conf.setMapOutputKeyClass(IntWritable.class);

  conf.setMapOutputValueClass(NullWritable.class);

  conf.setReducerClass(ControlledMapReduceJob.class);

  conf.setOutputKeyClass(NullWritable.class);

  conf.setOutputValueClass(NullWritable.class);

  conf.setInputFormat(ControlledMapReduceJob.class);

  FileInputFormat.addInputPath(conf,new Path("ignored"));

  conf.setOutputFormat(NullOutputFormat.class);

  conf.setMapSpeculativeExecution(false);

  conf.setReduceSpeculativeExecution(false);

  conf.set(JobContext.COMPLETED_MAPS_FOR_REDUCE_SLOWSTART,String.valueOf(0));

  return conf;

}

Location: ControlledMapReduceJob.java

Content: 

@Override public int getPartition(IntWritable k,NullWritable v,int numPartitions){

  return k.get() % numPartitions;

}

Location: ControlledMapReduceJob.java

Content: 

/** 

 * Have all the tasks of type specified by isMap finished in this job?

 * @param jip

 * @param isMap

 * @return true if finished, false otherwise

 */

static boolean haveAllTasksFinished(JobInProgress jip,boolean isMap){

  return ((isMap ? jip.runningMaps() : jip.runningReduces()) == 0);

}

Location: ControlledMapReduceJob.java

Content: 

private void initialize() throws IOException {

  fs=FileSystem.get(getConf());

  fs.mkdirs(signalFileDir);

  writeFile(new Path(signalFileDir,MAP_SIGFILE_PREFIX + mapsFinished));

  writeFile(new Path(signalFileDir,REDUCE_SIGFILE_PREFIX + reducesFinished));

}

Location: ControlledMapReduceJob.java

Content: 

private FileStatus[] listSignalFiles(FileSystem fileSys,final boolean isMap) throws IOException {

  return fileSys.globStatus(new Path(signalFileDir.toString() + "/*"),new PathFilter(){

    @Override public boolean accept(    Path path){

      if (isMap && path.getName().startsWith(MAP_SIGFILE_PREFIX)) {

        LOG.debug("Found signal file : " + path.getName());

        return true;

      }

 else       if (!isMap && path.getName().startsWith(REDUCE_SIGFILE_PREFIX)) {

        LOG.debug("Found signal file : " + path.getName());

        return true;

      }

      LOG.info("Didn't find any relevant signal files.");

      return false;

    }

  }

);

}

Location: ControlledMapReduceJob.java

Content: 

@Override public void map(NullWritable key,NullWritable value,OutputCollector<IntWritable,NullWritable> output,Reporter reporter) throws IOException {

  LOG.info(taskNumber + " has started.");

  FileStatus[] files=listSignalFiles(fs,true);

  String[] sigFileComps=files[0].getPath().getName().split("_");

  String signalType=sigFileComps[0];

  int noOfTasks=Integer.parseInt(sigFileComps[1]);

  while (!signalType.equals("MAPS") || taskNumber + 1 > noOfTasks) {

    LOG.info("Signal type found : " + signalType + " .Number of tasks to be finished by this signal : "+ noOfTasks+ " . My id : "+ taskNumber);

    LOG.info(taskNumber + " is still alive.");

    try {

      reporter.progress();

      Thread.sleep(1000);

    }

 catch (    InterruptedException ie) {

      LOG.info(taskNumber + " is still alive.");

      break;

    }

    files=listSignalFiles(fs,true);

    sigFileComps=files[0].getPath().getName().split("_");

    signalType=sigFileComps[0];

    noOfTasks=Integer.parseInt(sigFileComps[1]);

  }

  LOG.info("Signal type found : " + signalType + " .Number of tasks to be finished by this signal : "+ noOfTasks+ " . My id : "+ taskNumber);

  for (int i=0; i < numReducers; i++) {

    output.collect(new IntWritable(i),NullWritable.get());

  }

  LOG.info(taskNumber + " is finished.");

}

Location: ControlledMapReduceJob.java

Content: 

@Override public void reduce(IntWritable key,Iterator<NullWritable> values,OutputCollector<NullWritable,NullWritable> output,Reporter reporter) throws IOException {

  LOG.info(taskNumber + " has started.");

  FileStatus[] files=listSignalFiles(fs,false);

  String[] sigFileComps=files[0].getPath().getName().split("_");

  String signalType=sigFileComps[0];

  int noOfTasks=Integer.parseInt(sigFileComps[1]);

  while (!signalType.equals("REDUCES") || taskNumber + 1 > noOfTasks) {

    LOG.info("Signal type found : " + signalType + " .Number of tasks to be finished by this signal : "+ noOfTasks+ " . My id : "+ taskNumber);

    LOG.info(taskNumber + " is still alive.");

    try {

      reporter.progress();

      Thread.sleep(1000);

    }

 catch (    InterruptedException ie) {

      LOG.info(taskNumber + " is still alive.");

      break;

    }

    files=listSignalFiles(fs,false);

    sigFileComps=files[0].getPath().getName().split("_");

    signalType=sigFileComps[0];

    noOfTasks=Integer.parseInt(sigFileComps[1]);

  }

  LOG.info("Signal type found : " + signalType + " .Number of tasks to be finished by this signal : "+ noOfTasks+ " . My id : "+ taskNumber);

  LOG.info(taskNumber + " is finished.");

}

Location: ControlledMapReduceJob.java

Content: 

public int run(int numMapper,int numReducer) throws IOException {

  JobConf conf=getControlledMapReduceJobConf(getConf(),numMapper,numReducer);

  JobClient client=new JobClient(conf);

  rJob=client.submitJob(conf);

  while (!rJob.isComplete()) {

    try {

      Thread.sleep(1000);

    }

 catch (    InterruptedException ie) {

      break;

    }

  }

  if (rJob.isSuccessful()) {

    return 0;

  }

  return 1;

}

Location: ControlledMapReduceJob.java

Content: 

/** 

 * Wait till noOfTasksToBeRunning number of tasks of type specified by isMap started running. This currently uses a jip object and directly uses its api to determine the number of tasks running. <p> TODO: It should eventually use a JobID and then get the information from the JT to check the number of running tasks.

 * @param jip

 * @param isMap

 * @param noOfTasksToBeRunning

 */

static void waitTillNTasksStartRunning(JobInProgress jip,boolean isMap,int noOfTasksToBeRunning) throws InterruptedException {

  int numTasks=0;

  while (numTasks != noOfTasksToBeRunning) {

    Thread.sleep(1000);

    numTasks=isMap ? jip.runningMaps() : jip.runningReduces();

    LOG.info("Waiting till " + noOfTasksToBeRunning + (isMap ? " map" : " reduce")+ " tasks of the job "+ jip.getJobID()+ " start running. "+ numTasks+ " tasks already started running.");

  }

}

Location: ControlledMapReduceJob.java

Content: 

/** 

 * Wait till noOfTasksToFinish number of tasks of type specified by isMap are finished. This currently uses a jip object and directly uses its api to determine the number of tasks finished. <p> TODO: It should eventually use a JobID and then get the information from the JT to check the number of finished tasks.

 * @param jip

 * @param isMap

 * @param noOfTasksToFinish

 * @throws InterruptedException

 */

static void waitTillNTotalTasksFinish(JobInProgress jip,boolean isMap,int noOfTasksToFinish) throws InterruptedException {

  int noOfTasksAlreadyFinished=0;

  while (noOfTasksAlreadyFinished < noOfTasksToFinish) {

    Thread.sleep(1000);

    noOfTasksAlreadyFinished=(isMap ? jip.finishedMaps() : jip.finishedReduces());

    LOG.info("Waiting till " + noOfTasksToFinish + (isMap ? " map" : " reduce")+ " tasks of the job "+ jip.getJobID()+ " finish. "+ noOfTasksAlreadyFinished+ " tasks already got finished.");

  }

}

Location: ControlledMapReduceJob.java

Content: 

private void writeFile(Path name) throws IOException {

  Configuration conf=new Configuration(false);

  SequenceFile.Writer writer=SequenceFile.createWriter(fs,conf,name,BytesWritable.class,BytesWritable.class,CompressionType.NONE);

  writer.append(new BytesWritable(),new BytesWritable());

  writer.close();

}

