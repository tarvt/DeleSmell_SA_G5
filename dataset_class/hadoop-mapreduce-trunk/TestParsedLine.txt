Location: TestParsedLine.java

Content: 

String buildLine(String type,String[] kvseq){

  StringBuilder sb=new StringBuilder();

  sb.append(type);

  for (int i=0; i < kvseq.length; ++i) {

    sb.append(" ");

    if (kvseq[i].equals(".") || kvseq[i].equals("\n")) {

      sb.append(kvseq[i]);

      continue;

    }

    if (i == kvseq.length - 1) {

      fail("Incorrect input, expecting value.");

    }

    sb.append(kvseq[i++]);

    sb.append("=\"");

    sb.append(StringUtils.escapeString(kvseq[i],StringUtils.ESCAPE_CHAR,CHARS_TO_ESCAPE));

    sb.append("\"");

  }

  return sb.toString();

}

Location: TestParsedLine.java

Content: 

@Test public void testBackSlash(){

  testOneLine("REC1","A","x","B","abc\\de","C","f");

  testOneLine("REC2","B","\\ab\\c\\de","C","f");

  testOneLine("REC3","A","x","B","abc\\\\de\\");

  testOneLine("REC4","A","x","B","abc\\\"de\\\"","C","f");

}

Location: TestParsedLine.java

Content: 

@Test public void testEqualSign(){

  testOneLine("REC1","A","x","B","abc=de","C","f");

  testOneLine("REC2","B","=abcde","C","f");

  testOneLine("REC3","A","x","B","abcde=");

}

Location: TestParsedLine.java

Content: 

@Test public void testEscapedQuote(){

  testOneLine("REC","A","x","B","abc\"de","C","f");

  testOneLine("REC","B","abcde\"","C","f");

  testOneLine("REC","A","x","B","\"abcde");

}

Location: TestParsedLine.java

Content: 

@Test public void testLineDelimiter(){

  testOneLine("REC1","A","x","B","abc.de","C","f");

  testOneLine("REC2","B",".ab.de");

  testOneLine("REC3","A","x","B","abc.de.");

  testOneLine("REC4","A","x","B","abc.de",".");

}

Location: TestParsedLine.java

Content: 

@Test public void testMultipleLines(){

  testOneLine("REC1","A","x","\n","B","abc.de","\n","C","f","\n",".");

}

Location: TestParsedLine.java

Content: 

void testOneLine(String type,String... kvseq){

  String line=buildLine(type,kvseq);

  ParsedLine pl=new ParsedLine(line,Hadoop20JHParser.internalVersion);

  assertEquals("Mismatching type",type,pl.getType().toString());

  for (int i=0; i < kvseq.length; ++i) {

    if (kvseq[i].equals(".") || kvseq[i].equals("\n")) {

      continue;

    }

    assertEquals("Key mismatching for " + kvseq[i],kvseq[i + 1],StringUtils.unEscapeString(pl.get(kvseq[i]),StringUtils.ESCAPE_CHAR,CHARS_TO_ESCAPE));

    ++i;

  }

}

Location: TestParsedLine.java

Content: 

@Test public void testSpace(){

  testOneLine("REC1","A","x","B","abc de","C","f");

  testOneLine("REC2","B"," ab c de","C","f");

  testOneLine("REC3","A","x","B","abc\t  de  ");

}

