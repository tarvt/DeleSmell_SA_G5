Location: TaskAttemptUnsuccessfulCompletionEvent.java

Content: 

/** 

 * Get the error string 

 */

public String getError(){

  return datum.error.toString();

}

Location: TaskAttemptUnsuccessfulCompletionEvent.java

Content: 

/** 

 * Get the event type 

 */

public EventType getEventType(){

  boolean failed=TaskStatus.State.FAILED.toString().equals(getTaskStatus());

  return getTaskId().getTaskType() == TaskType.MAP ? (failed ? EventType.MAP_ATTEMPT_FAILED : EventType.MAP_ATTEMPT_KILLED) : (failed ? EventType.REDUCE_ATTEMPT_FAILED : EventType.REDUCE_ATTEMPT_KILLED);

}

Location: TaskAttemptUnsuccessfulCompletionEvent.java

Content: 

public void setDatum(Object datum){

  this.datum=(TaskAttemptUnsuccessfulCompletion)datum;

}

Location: TaskAttemptUnsuccessfulCompletionEvent.java

Content: 

TaskAttemptUnsuccessfulCompletionEvent(){

}

Location: TaskAttemptUnsuccessfulCompletionEvent.java

Content: 

/** 

 * Create an event to record the unsuccessful completion of attempts

 * @param id Attempt ID

 * @param taskType Type of the task

 * @param status Status of the attempt

 * @param finishTime Finish time of the attempt

 * @param hostname Name of the host where the attempt executed

 * @param error Error string

 */

public TaskAttemptUnsuccessfulCompletionEvent(TaskAttemptID id,TaskType taskType,String status,long finishTime,String hostname,String error){

  datum.taskid=new Utf8(id.getTaskID().toString());

  datum.taskType=new Utf8(taskType.name());

  datum.attemptId=new Utf8(id.toString());

  datum.finishTime=finishTime;

  datum.hostname=new Utf8(hostname);

  datum.error=new Utf8(error);

  datum.status=new Utf8(status);

}

