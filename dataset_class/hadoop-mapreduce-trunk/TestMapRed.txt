Location: TestMapRed.java

Content: 

private void checkCompression(boolean compressMapOutputs,CompressionType redCompression,boolean includeCombine) throws Exception {

  JobConf conf=new JobConf(TestMapRed.class);

  Path testdir=new Path("build/test/test.mapred.compress");

  Path inDir=new Path(testdir,"in");

  Path outDir=new Path(testdir,"out");

  FileSystem fs=FileSystem.get(conf);

  fs.delete(testdir,true);

  FileInputFormat.setInputPaths(conf,inDir);

  FileOutputFormat.setOutputPath(conf,outDir);

  conf.setMapperClass(MyMap.class);

  conf.setReducerClass(MyReduce.class);

  conf.setOutputKeyClass(Text.class);

  conf.setOutputValueClass(Text.class);

  conf.setOutputFormat(SequenceFileOutputFormat.class);

  if (includeCombine) {

    conf.setCombinerClass(IdentityReducer.class);

  }

  conf.setCompressMapOutput(compressMapOutputs);

  SequenceFileOutputFormat.setOutputCompressionType(conf,redCompression);

  try {

    if (!fs.mkdirs(testdir)) {

      throw new IOException("Mkdirs failed to create " + testdir.toString());

    }

    if (!fs.mkdirs(inDir)) {

      throw new IOException("Mkdirs failed to create " + inDir.toString());

    }

    Path inFile=new Path(inDir,"part0");

    DataOutputStream f=fs.create(inFile);

    f.writeBytes("Owen was here\n");

    f.writeBytes("Hadoop is fun\n");

    f.writeBytes("Is this done, yet?\n");

    f.close();

    RunningJob rj=JobClient.runJob(conf);

    assertTrue("job was complete",rj.isComplete());

    assertTrue("job was successful",rj.isSuccessful());

    Path output=new Path(outDir,Task.getOutputName(0));

    assertTrue("reduce output exists " + output,fs.exists(output));

    SequenceFile.Reader rdr=new SequenceFile.Reader(fs,output,conf);

    assertEquals("is reduce output compressed " + output,redCompression != CompressionType.NONE,rdr.isCompressed());

    rdr.close();

  }

  finally {

    fs.delete(testdir,true);

  }

}

Location: TestMapRed.java

Content: 

public void runJob(int items){

  try {

    JobConf conf=new JobConf(TestMapRed.class);

    Path testdir=new Path("build/test/test.mapred.spill");

    Path inDir=new Path(testdir,"in");

    Path outDir=new Path(testdir,"out");

    FileSystem fs=FileSystem.get(conf);

    fs.delete(testdir,true);

    conf.setInt(JobContext.IO_SORT_MB,1);

    conf.setInputFormat(SequenceFileInputFormat.class);

    FileInputFormat.setInputPaths(conf,inDir);

    FileOutputFormat.setOutputPath(conf,outDir);

    conf.setMapperClass(IdentityMapper.class);

    conf.setReducerClass(IdentityReducer.class);

    conf.setOutputKeyClass(Text.class);

    conf.setOutputValueClass(Text.class);

    conf.setOutputFormat(SequenceFileOutputFormat.class);

    if (!fs.mkdirs(testdir)) {

      throw new IOException("Mkdirs failed to create " + testdir.toString());

    }

    if (!fs.mkdirs(inDir)) {

      throw new IOException("Mkdirs failed to create " + inDir.toString());

    }

    Path inFile=new Path(inDir,"part0");

    SequenceFile.Writer writer=SequenceFile.createWriter(fs,conf,inFile,Text.class,Text.class);

    StringBuffer content=new StringBuffer();

    for (int i=0; i < 1000; i++) {

      content.append(i).append(": This is one more line of content\n");

    }

    Text text=new Text(content.toString());

    for (int i=0; i < items; i++) {

      writer.append(new Text("rec:" + i),text);

    }

    writer.close();

    JobClient.runJob(conf);

  }

 catch (  Exception e) {

    assertTrue("Threw exception:" + e,false);

  }

}

Location: TestMapRed.java

Content: 

@Test public void testBiggerInput(){

  runJob(1000);

}

Location: TestMapRed.java

Content: 

@Test public void testCompression() throws Exception {

  EnumSet<SequenceFile.CompressionType> seq=EnumSet.allOf(SequenceFile.CompressionType.class);

  for (  CompressionType redCompression : seq) {

    for (int combine=0; combine < 2; ++combine) {

      checkCompression(false,redCompression,combine == 1);

      checkCompression(true,redCompression,combine == 1);

    }

  }

}

Location: TestMapRed.java

Content: 

@Test public void testNullKeys() throws Exception {

  JobConf conf=new JobConf(TestMapRed.class);

  FileSystem fs=FileSystem.getLocal(conf);

  HashSet<String> values=new HashSet<String>();

  String m="AAAAAAAAAAAAAA";

  for (int i=1; i < 11; ++i) {

    values.add(m);

    m=m.replace((char)('A' + i - 1),(char)('A' + i));

  }

  Path testdir=new Path(System.getProperty("test.build.data","/tmp")).makeQualified(fs);

  fs.delete(testdir,true);

  Path inFile=new Path(testdir,"nullin/blah");

  SequenceFile.Writer w=SequenceFile.createWriter(fs,conf,inFile,NullWritable.class,Text.class,SequenceFile.CompressionType.NONE);

  Text t=new Text();

  for (  String s : values) {

    t.set(s);

    w.append(NullWritable.get(),t);

  }

  w.close();

  FileInputFormat.setInputPaths(conf,inFile);

  FileOutputFormat.setOutputPath(conf,new Path(testdir,"nullout"));

  conf.setMapperClass(NullMapper.class);

  conf.setReducerClass(IdentityReducer.class);

  conf.setOutputKeyClass(NullWritable.class);

  conf.setOutputValueClass(Text.class);

  conf.setInputFormat(SequenceFileInputFormat.class);

  conf.setOutputFormat(SequenceFileOutputFormat.class);

  conf.setNumReduceTasks(1);

  JobClient.runJob(conf);

  SequenceFile.Reader r=new SequenceFile.Reader(fs,new Path(testdir,"nullout/part-00000"),conf);

  m="AAAAAAAAAAAAAA";

  for (int i=1; r.next(NullWritable.get(),t); ++i) {

    assertTrue("Unexpected value: " + t,values.remove(t.toString()));

    m=m.replace((char)('A' + i - 1),(char)('A' + i));

  }

  assertTrue("Missing values: " + values.toString(),values.isEmpty());

}

Location: TestMapRed.java

Content: 

@Test public void testSmallInput(){

  runJob(100);

}

