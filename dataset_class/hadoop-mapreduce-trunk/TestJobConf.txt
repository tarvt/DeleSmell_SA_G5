Location: TestJobConf.java

Content: 

@Test public void testFindContainingJar() throws Exception {

  testJarAtPath(JAR_RELATIVE_PATH);

}

Location: TestJobConf.java

Content: 

/** 

 * Test that findContainingJar works correctly even if the path has a "+" sign or spaces in it

 */

@Test public void testFindContainingJarWithPlus() throws Exception {

  new File(TEST_DIR_WITH_SPECIAL_CHARS).mkdirs();

  Configuration conf=new Configuration();

  FileSystem localfs=FileSystem.getLocal(conf);

  FileUtil.copy(localfs,new Path(JAR_RELATIVE_PATH),localfs,new Path(TEST_DIR_WITH_SPECIAL_CHARS,"test.jar"),false,true,conf);

  testJarAtPath(TEST_DIR_WITH_SPECIAL_CHARS + File.separator + "test.jar");

}

Location: TestJobConf.java

Content: 

/** 

 * Given a path with a jar, make a classloader with that jar on the classpath, and check that findContainingJar can correctly identify the path of the jar.

 */

private void testJarAtPath(String path) throws Exception {

  File jar=new File(path).getAbsoluteFile();

  assertTrue(jar.exists());

  URL urls[]=new URL[]{jar.toURI().toURL()};

  ClassLoader cl=new URLClassLoader(urls);

  Class clazz=Class.forName(CLASSNAME,true,cl);

  assertNotNull(clazz);

  String containingJar=JobConf.findContainingJar(clazz);

  assertEquals(jar.getAbsolutePath(),containingJar);

}

Location: TestJobConf.java

Content: 

/** 

 * Test deprecated accessor and mutator method for mapred.task.maxvmem

 */

@Test public void testMaxVirtualMemoryForTask(){

  JobConf configuration=new JobConf();

  configuration.set(MRJobConfig.MAP_MEMORY_MB,String.valueOf(300));

  configuration.set(MRJobConfig.REDUCE_MEMORY_MB,String.valueOf(-1));

  Assert.assertEquals(configuration.getMaxVirtualMemoryForTask(),300 * 1024 * 1024);

  configuration=new JobConf();

  configuration.set(MRJobConfig.MAP_MEMORY_MB,String.valueOf(-1));

  configuration.set(MRJobConfig.REDUCE_MEMORY_MB,String.valueOf(200));

  Assert.assertEquals(configuration.getMaxVirtualMemoryForTask(),200 * 1024 * 1024);

  configuration=new JobConf();

  configuration.set(MRJobConfig.MAP_MEMORY_MB,String.valueOf(-1));

  configuration.set(MRJobConfig.REDUCE_MEMORY_MB,String.valueOf(-1));

  configuration.set("mapred.task.maxvmem",String.valueOf(1 * 1024 * 1024));

  Assert.assertEquals(configuration.getMaxVirtualMemoryForTask(),1 * 1024 * 1024);

  configuration=new JobConf();

  configuration.set("mapred.task.maxvmem",String.valueOf(1 * 1024 * 1024));

  Assert.assertEquals(configuration.getMaxVirtualMemoryForTask(),1 * 1024 * 1024);

  configuration=new JobConf();

  configuration.setMaxVirtualMemoryForTask(2 * 1024 * 1024);

  Assert.assertEquals(configuration.getMemoryForMapTask(),2);

  Assert.assertEquals(configuration.getMemoryForReduceTask(),2);

  configuration=new JobConf();

  configuration.set(MRJobConfig.MAP_MEMORY_MB,String.valueOf(300));

  configuration.set(MRJobConfig.REDUCE_MEMORY_MB,String.valueOf(400));

  configuration.setMaxVirtualMemoryForTask(2 * 1024 * 1024);

  Assert.assertEquals(configuration.getMemoryForMapTask(),2);

  Assert.assertEquals(configuration.getMemoryForReduceTask(),2);

}

Location: TestJobConf.java

Content: 

/** 

 * Testing mapred.task.maxvmem replacement with new values

 */

@Test public void testMemoryConfigForMapOrReduceTask(){

  JobConf configuration=new JobConf();

  configuration.set(MRJobConfig.MAP_MEMORY_MB,String.valueOf(300));

  configuration.set(MRJobConfig.REDUCE_MEMORY_MB,String.valueOf(300));

  Assert.assertEquals(configuration.getMemoryForMapTask(),300);

  Assert.assertEquals(configuration.getMemoryForReduceTask(),300);

  configuration.set("mapred.task.maxvmem",String.valueOf(2 * 1024 * 1024));

  configuration.set(MRJobConfig.MAP_MEMORY_MB,String.valueOf(300));

  configuration.set(MRJobConfig.REDUCE_MEMORY_MB,String.valueOf(300));

  Assert.assertEquals(configuration.getMemoryForMapTask(),2);

  Assert.assertEquals(configuration.getMemoryForReduceTask(),2);

  configuration=new JobConf();

  configuration.set("mapred.task.maxvmem","-1");

  configuration.set(MRJobConfig.MAP_MEMORY_MB,String.valueOf(300));

  configuration.set(MRJobConfig.REDUCE_MEMORY_MB,String.valueOf(400));

  Assert.assertEquals(configuration.getMemoryForMapTask(),300);

  Assert.assertEquals(configuration.getMemoryForReduceTask(),400);

  configuration=new JobConf();

  configuration.set("mapred.task.maxvmem",String.valueOf(2 * 1024 * 1024));

  configuration.set(MRJobConfig.MAP_MEMORY_MB,"-1");

  configuration.set(MRJobConfig.REDUCE_MEMORY_MB,"-1");

  Assert.assertEquals(configuration.getMemoryForMapTask(),2);

  Assert.assertEquals(configuration.getMemoryForReduceTask(),2);

  configuration=new JobConf();

  configuration.set("mapred.task.maxvmem",String.valueOf(-1));

  configuration.set(MRJobConfig.MAP_MEMORY_MB,"-1");

  configuration.set(MRJobConfig.REDUCE_MEMORY_MB,"-1");

  Assert.assertEquals(configuration.getMemoryForMapTask(),-1);

  Assert.assertEquals(configuration.getMemoryForReduceTask(),-1);

  configuration=new JobConf();

  configuration.set("mapred.task.maxvmem",String.valueOf(2 * 1024 * 1024));

  configuration.set(MRJobConfig.MAP_MEMORY_MB,"3");

  configuration.set(MRJobConfig.REDUCE_MEMORY_MB,"3");

  Assert.assertEquals(configuration.getMemoryForMapTask(),2);

  Assert.assertEquals(configuration.getMemoryForReduceTask(),2);

}

Location: TestJobConf.java

Content: 

/** 

 * Test that negative values for MAPRED_TASK_MAXVMEM_PROPERTY cause new configuration keys' values to be used.

 */

@Test public void testNegativeValueForTaskVmem(){

  JobConf configuration=new JobConf();

  configuration.set(JobConf.MAPRED_TASK_MAXVMEM_PROPERTY,"-3");

  configuration.set(MRJobConfig.MAP_MEMORY_MB,"4");

  configuration.set(MRJobConfig.REDUCE_MEMORY_MB,"5");

  Assert.assertEquals(4,configuration.getMemoryForMapTask());

  Assert.assertEquals(5,configuration.getMemoryForReduceTask());

}

Location: TestJobConf.java

Content: 

/** 

 * Test that negative values for all memory configuration properties causes APIs to disable memory limits

 */

@Test public void testNegativeValuesForMemoryParams(){

  JobConf configuration=new JobConf();

  configuration.set(JobConf.MAPRED_TASK_MAXVMEM_PROPERTY,"-4");

  configuration.set(MRJobConfig.MAP_MEMORY_MB,"-5");

  configuration.set(MRJobConfig.REDUCE_MEMORY_MB,"-6");

  Assert.assertEquals(JobConf.DISABLED_MEMORY_LIMIT,configuration.getMemoryForMapTask());

  Assert.assertEquals(JobConf.DISABLED_MEMORY_LIMIT,configuration.getMemoryForReduceTask());

  Assert.assertEquals(JobConf.DISABLED_MEMORY_LIMIT,configuration.getMaxVirtualMemoryForTask());

}

Location: TestJobConf.java

Content: 

@Test public void testProfileParamsDefaults(){

  JobConf configuration=new JobConf();

  Assert.assertNull(configuration.get(MRJobConfig.TASK_PROFILE_PARAMS));

  String result=configuration.getProfileParams();

  Assert.assertNotNull(result);

  Assert.assertTrue(result.contains("file=%s"));

  Assert.assertTrue(result.startsWith("-agentlib:hprof"));

}

Location: TestJobConf.java

Content: 

@Test public void testProfileParamsGetter(){

  JobConf configuration=new JobConf();

  configuration.set(MRJobConfig.TASK_PROFILE_PARAMS,"test");

  Assert.assertEquals("test",configuration.getProfileParams());

}

Location: TestJobConf.java

Content: 

@Test public void testProfileParamsSetter(){

  JobConf configuration=new JobConf();

  configuration.setProfileParams("test");

  Assert.assertEquals("test",configuration.get(MRJobConfig.TASK_PROFILE_PARAMS));

}

