Location: InputStriper.java

Content: 

/** 

 * @param inputDir Pool from which files are requested.

 * @param mapBytes Sum of all expected split requests.

 */

InputStriper(FilePool inputDir,long mapBytes) throws IOException {

  final long inputBytes=inputDir.getInputFiles(mapBytes,files);

  if (mapBytes > inputBytes) {

    LOG.warn("Using " + inputBytes + "/"+ mapBytes+ " bytes");

  }

  if (files.isEmpty() && mapBytes > 0) {

    throw new IOException("Failed to satisfy request for " + mapBytes);

  }

  current=files.isEmpty() ? null : files.get(0);

}

Location: InputStriper.java

Content: 

/** 

 * @param inputDir Pool used to resolve block locations.

 * @param bytes Target byte count

 * @param nLocs Number of block locations per split.

 * @return A set of files satisfying the byte count, with locations weightedto the dominating proportion of input bytes.

 */

CombineFileSplit splitFor(FilePool inputDir,long bytes,int nLocs) throws IOException {

  final ArrayList<Path> paths=new ArrayList<Path>();

  final ArrayList<Long> start=new ArrayList<Long>();

  final ArrayList<Long> length=new ArrayList<Long>();

  final HashMap<String,Double> sb=new HashMap<String,Double>();

  do {

    paths.add(current.getPath());

    start.add(currentStart);

    final long fromFile=Math.min(bytes,current.getLen() - currentStart);

    length.add(fromFile);

    for (    BlockLocation loc : inputDir.locationsFor(current,currentStart,fromFile)) {

      final double tedium=loc.getLength() / (1.0 * bytes);

      for (      String l : loc.getHosts()) {

        Double j=sb.get(l);

        if (null == j) {

          sb.put(l,tedium);

        }

 else {

          sb.put(l,j.doubleValue() + tedium);

        }

      }

    }

    currentStart+=fromFile;

    bytes-=fromFile;

    CompressionCodecFactory compressionCodecs=new CompressionCodecFactory(conf);

    CompressionCodec codec=compressionCodecs.getCodec(current.getPath());

    if (current.getLen() - currentStart == 0 || codec != null) {

      current=files.get(++idx % files.size());

      currentStart=0;

    }

  }

 while (bytes > 0);

  final ArrayList<Entry<String,Double>> sort=new ArrayList<Entry<String,Double>>(sb.entrySet());

  Collections.sort(sort,hostRank);

  final String[] hosts=new String[Math.min(nLocs,sort.size())];

  for (int i=0; i < nLocs && i < sort.size(); ++i) {

    hosts[i]=sort.get(i).getKey();

  }

  return new CombineFileSplit(paths.toArray(new Path[0]),toLongArray(start),toLongArray(length),hosts);

}

Location: InputStriper.java

Content: 

private long[] toLongArray(final ArrayList<Long> sigh){

  final long[] ret=new long[sigh.size()];

  for (int i=0; i < ret.length; ++i) {

    ret[i]=sigh.get(i);

  }

  return ret;

}

