Location: TestPipesAsDifferentUser.java

Content: 

public void testPipes() throws Exception {

  if (System.getProperty("compile.c++") == null) {

    LOG.info("compile.c++ is not defined, so skipping TestPipes");

    return;

  }

  if (!shouldRun()) {

    return;

  }

  super.startCluster();

  jobOwner.doAs(new PrivilegedExceptionAction<Object>(){

    public Object run() throws Exception {

      JobConf clusterConf=getClusterConf();

      Path inputPath=new Path(homeDirectory,"in");

      Path outputPath=new Path(homeDirectory,"out");

      TestPipes.writeInputFile(FileSystem.get(clusterConf),inputPath);

      TestPipes.runProgram(mrCluster,dfsCluster,TestPipes.wordCountSimple,inputPath,outputPath,3,2,TestPipes.twoSplitOutput,clusterConf);

      assertOwnerShip(outputPath);

      TestPipes.cleanup(dfsCluster.getFileSystem(),outputPath);

      TestPipes.runProgram(mrCluster,dfsCluster,TestPipes.wordCountSimple,inputPath,outputPath,3,0,TestPipes.noSortOutput,clusterConf);

      assertOwnerShip(outputPath);

      TestPipes.cleanup(dfsCluster.getFileSystem(),outputPath);

      TestPipes.runProgram(mrCluster,dfsCluster,TestPipes.wordCountPart,inputPath,outputPath,3,2,TestPipes.fixedPartitionOutput,clusterConf);

      assertOwnerShip(outputPath);

      TestPipes.cleanup(dfsCluster.getFileSystem(),outputPath);

      TestPipes.runNonPipedProgram(mrCluster,dfsCluster,TestPipes.wordCountNoPipes,clusterConf);

      assertOwnerShip(TestPipes.nonPipedOutDir,FileSystem.getLocal(clusterConf));

      return null;

    }

  }

);

}

