Location: TestHistograms.java

Content: 

private static LoggedDiscreteCDF histogramFileToCDF(Path path,FileSystem fs) throws IOException {

  FSDataInputStream dataStream=fs.open(path);

  JsonObjectMapperParser<HistogramRawTestData> parser=new JsonObjectMapperParser<HistogramRawTestData>(dataStream,HistogramRawTestData.class);

  HistogramRawTestData data;

  try {

    data=parser.getNext();

  }

  finally {

    parser.close();

  }

  Histogram hist=new Histogram();

  List<Long> measurements=data.getData();

  List<Long> typeProbeData=new HistogramRawTestData().getData();

  assertTrue("The data attribute of a jackson-reconstructed HistogramRawTestData " + " should be a " + typeProbeData.getClass().getName() + ", like a virgin HistogramRawTestData, but it's a "+ measurements.getClass().getName(),measurements.getClass() == typeProbeData.getClass());

  for (int j=0; j < measurements.size(); ++j) {

    hist.enter(measurements.get(j));

  }

  LoggedDiscreteCDF result=new LoggedDiscreteCDF();

  int[] percentiles=new int[data.getPercentiles().size()];

  for (int j=0; j < data.getPercentiles().size(); ++j) {

    percentiles[j]=data.getPercentiles().get(j);

  }

  result.setCDF(hist,percentiles,data.getScale());

  return result;

}

Location: TestHistograms.java

Content: 

/** 

 * @throws IOException There should be files in the directory named by ${test.build.data}/rumen/histogram-test . There will be pairs of files, inputXxx.json and goldXxx.json . We read the input file as a HistogramRawTestData in json. Then we create a Histogram using the data field, and then a LoggedDiscreteCDF using the percentiles and scale field. Finally, we read the corresponding goldXxx.json as a LoggedDiscreteCDF and deepCompare them.

 */

@Test public void testHistograms() throws IOException {

  final Configuration conf=new Configuration();

  final FileSystem lfs=FileSystem.getLocal(conf);

  final Path rootInputDir=new Path(System.getProperty("test.tools.input.dir","")).makeQualified(lfs);

  final Path rootInputFile=new Path(rootInputDir,"rumen/histogram-tests");

  FileStatus[] tests=lfs.listStatus(rootInputFile);

  for (int i=0; i < tests.length; ++i) {

    Path filePath=tests[i].getPath();

    String fileName=filePath.getName();

    if (fileName.startsWith("input")) {

      String testName=fileName.substring("input".length());

      Path goldFilePath=new Path(rootInputFile,"gold" + testName);

      assertTrue("Gold file dies not exist",lfs.exists(goldFilePath));

      LoggedDiscreteCDF newResult=histogramFileToCDF(filePath,lfs);

      System.out.println("Testing a Histogram for " + fileName);

      FSDataInputStream goldStream=lfs.open(goldFilePath);

      JsonObjectMapperParser<LoggedDiscreteCDF> parser=new JsonObjectMapperParser<LoggedDiscreteCDF>(goldStream,LoggedDiscreteCDF.class);

      try {

        LoggedDiscreteCDF dcdf=parser.getNext();

        dcdf.deepCompare(newResult,new TreePath(null,"<root>"));

      }

 catch (      DeepInequalityException e) {

        fail(e.path.toString());

      }

 finally {

        parser.close();

      }

    }

  }

}

