Location: TaskInfo.java

Content: 

/** 

 * Gets the progress of the Task in percentage will be in range of 0.0-1.0  <br/>

 * @return progress of task in percentage.

 */

double getProgress();

Location: TaskInfo.java

Content: 

/** 

 * @return Memory used by the task leq the heap size.

 */

public long getTaskMemory(){

  return maxMemory;

}

Location: TaskInfo.java

Content: 

/** 

 * Gets a list of tracker on which the task attempts are scheduled/running. Can be empty if the task attempt has succeeded <br/>

 * @return list of trackers

 */

String[] getTaskTrackers();

Location: TaskInfo.java

Content: 

/** 

 * Gets if the current TaskInProgress is a setup or cleanup tip. <br/>

 * @return true if setup/cleanup

 */

boolean isSetupOrCleanup();

Location: TaskInfo.java

Content: 

/** 

 * Number of times task attempts have failed for the given TaskInProgress. <br/>

 * @return number of failed task attempts.

 */

int numFailedAttempts();

Location: TaskInfo.java

Content: 

/** 

 * Number of times task attempts have been killed for the given TaskInProgress  <br/>

 * @return number of killed task attempts.

 */

int numKilledAttempts();

Location: TaskInfo.java

Content: 

/** 

 * Number of attempts currently running for the given TaskInProgress.<br/>

 * @return number of running attempts.

 */

int numRunningAttempts();

Location: TaskInfo.java

Content: 

public TaskInfo(long bytesIn,int recsIn,long bytesOut,int recsOut,long maxMemory){

  this(bytesIn,recsIn,bytesOut,recsOut,maxMemory,new ResourceUsageMetrics());

}

Location: TaskInfo.java

Content: 

public TaskInfo(long bytesIn,int recsIn,long bytesOut,int recsOut,long maxMemory,ResourceUsageMetrics metrics){

  this.bytesIn=bytesIn;

  this.recsIn=recsIn;

  this.bytesOut=bytesOut;

  this.recsOut=recsOut;

  this.maxMemory=maxMemory;

  this.metrics=metrics;

}

