Location: TestFilePool.java

Content: 

void checkSplitEq(FileSystem fs,CombineFileSplit split,long bytes) throws Exception {

  long splitBytes=0L;

  HashSet<Path> uniq=new HashSet<Path>();

  for (int i=0; i < split.getNumPaths(); ++i) {

    splitBytes+=split.getLength(i);

    assertTrue(split.getLength(i) <= fs.getFileStatus(split.getPath(i)).getLen());

    assertFalse(uniq.contains(split.getPath(i)));

    uniq.add(split.getPath(i));

  }

  assertEquals(bytes,splitBytes);

}

Location: TestFilePool.java

Content: 

static Path getBaseDir(){

  try {

    final Configuration conf=new Configuration();

    final FileSystem fs=FileSystem.getLocal(conf).getRaw();

    return new Path(System.getProperty("test.build.data","/tmp"),"testFilePool").makeQualified(fs);

  }

 catch (  IOException e) {

    fail();

  }

  return null;

}

Location: TestFilePool.java

Content: 

@Test public void testPool() throws Exception {

  final Random r=new Random();

  final Configuration conf=new Configuration();

  conf.setLong(FilePool.GRIDMIX_MIN_FILE,3 * 1024);

  final FilePool pool=new FilePool(conf,base);

  pool.refresh();

  final ArrayList<FileStatus> files=new ArrayList<FileStatus>();

  final int expectedPoolSize=(NFILES / 2 * (NFILES / 2 + 1) - 6) * 1024;

  assertEquals(expectedPoolSize,pool.getInputFiles(Long.MAX_VALUE,files));

  assertEquals(NFILES - 4,files.size());

  files.clear();

  assertEquals(expectedPoolSize,pool.getInputFiles(expectedPoolSize,files));

  files.clear();

  final long rand=r.nextInt(expectedPoolSize);

  assertTrue("Missed: " + rand,(NFILES / 2) * 1024 > rand - pool.getInputFiles(rand,files));

  conf.setLong(FilePool.GRIDMIX_MIN_FILE,0);

  pool.refresh();

  files.clear();

  assertEquals((NFILES / 2 * (NFILES / 2 + 1)) * 1024,pool.getInputFiles(Long.MAX_VALUE,files));

}

Location: TestFilePool.java

Content: 

@Test public void testStriper() throws Exception {

  final Random r=new Random();

  final Configuration conf=new Configuration();

  final FileSystem fs=FileSystem.getLocal(conf).getRaw();

  conf.setLong(FilePool.GRIDMIX_MIN_FILE,3 * 1024);

  final FilePool pool=new FilePool(conf,base){

    @Override public BlockLocation[] locationsFor(    FileStatus stat,    long start,    long len) throws IOException {

      return new BlockLocation[]{new BlockLocation()};

    }

  }

;

  pool.refresh();

  final int expectedPoolSize=(NFILES / 2 * (NFILES / 2 + 1) - 6) * 1024;

  final InputStriper striper=new InputStriper(pool,expectedPoolSize);

  int last=0;

  for (int i=0; i < expectedPoolSize; last=Math.min(expectedPoolSize - i,r.nextInt(expectedPoolSize))) {

    checkSplitEq(fs,striper.splitFor(pool,last,0),last);

    i+=last;

  }

  final InputStriper striper2=new InputStriper(pool,expectedPoolSize);

  checkSplitEq(fs,striper2.splitFor(pool,expectedPoolSize,0),expectedPoolSize);

}

Location: TestFilePool.java

Content: 

@Test public void testUnsuitable() throws Exception {

  try {

    final Configuration conf=new Configuration();

    conf.setLong(FilePool.GRIDMIX_MIN_FILE,14 * 1024);

    final FilePool pool=new FilePool(conf,base);

    pool.refresh();

  }

 catch (  IOException e) {

    return;

  }

  fail();

}

