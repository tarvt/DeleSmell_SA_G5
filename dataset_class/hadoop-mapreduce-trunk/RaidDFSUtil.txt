Location: RaidDFSUtil.java

Content: 

/** 

 * Returns the corrupt blocks in a file.

 */

public static List<LocatedBlock> corruptBlocksInFile(DistributedFileSystem dfs,String path,long offset,long length) throws IOException {

  List<LocatedBlock> corrupt=new LinkedList<LocatedBlock>();

  LocatedBlocks locatedBlocks=getBlockLocations(dfs,path,offset,length);

  for (  LocatedBlock b : locatedBlocks.getLocatedBlocks()) {

    if (b.isCorrupt() || (b.getLocations().length == 0 && b.getBlockSize() > 0)) {

      corrupt.add(b);

    }

  }

  return corrupt;

}

Location: RaidDFSUtil.java

Content: 

public static LocatedBlocks getBlockLocations(DistributedFileSystem dfs,String path,long offset,long length) throws IOException {

  return dfs.getClient().namenode.getBlockLocations(path,offset,length);

}

Location: RaidDFSUtil.java

Content: 

/** 

 * Make successive calls to listCorruptFiles to obtain all  corrupt files.

 */

public static String[] getCorruptFiles(DistributedFileSystem dfs) throws IOException {

  Set<String> corruptFiles=new HashSet<String>();

  RemoteIterator<Path> cfb=dfs.listCorruptFileBlocks(new Path("/"));

  while (cfb.hasNext()) {

    corruptFiles.add(cfb.next().toUri().getPath());

  }

  return corruptFiles.toArray(new String[corruptFiles.size()]);

}

