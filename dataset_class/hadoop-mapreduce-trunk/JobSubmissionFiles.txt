Location: JobSubmissionFiles.java

Content: 

/** 

 * Get the job conf path.

 */

public static Path getJobConfPath(Path jobSubmitDir){

  return new Path(jobSubmitDir,"job.xml");

}

Location: JobSubmissionFiles.java

Content: 

/** 

 * Get the job distributed cache archives path.

 * @param jobSubmitDir 

 */

public static Path getJobDistCacheArchives(Path jobSubmitDir){

  return new Path(jobSubmitDir,"archives");

}

Location: JobSubmissionFiles.java

Content: 

/** 

 * Get the job distributed cache files path.

 * @param jobSubmitDir

 */

public static Path getJobDistCacheFiles(Path jobSubmitDir){

  return new Path(jobSubmitDir,"files");

}

Location: JobSubmissionFiles.java

Content: 

/** 

 * Get the job distributed cache libjars path.

 * @param jobSubmitDir 

 */

public static Path getJobDistCacheLibjars(Path jobSubmitDir){

  return new Path(jobSubmitDir,"libjars");

}

Location: JobSubmissionFiles.java

Content: 

/** 

 * Get the job jar path.

 */

public static Path getJobJar(Path jobSubmitDir){

  return new Path(jobSubmitDir,"job.jar");

}

Location: JobSubmissionFiles.java

Content: 

public static Path getJobSplitFile(Path jobSubmissionDir){

  return new Path(jobSubmissionDir,"job.split");

}

Location: JobSubmissionFiles.java

Content: 

public static Path getJobSplitMetaFile(Path jobSubmissionDir){

  return new Path(jobSubmissionDir,"job.splitmetainfo");

}

Location: JobSubmissionFiles.java

Content: 

/** 

 * Initializes the staging directory and returns the path. It also keeps track of all necessary ownership & permissions

 * @param cluster

 * @param conf

 */

public static Path getStagingDir(Cluster cluster,Configuration conf) throws IOException, InterruptedException {

  Path stagingArea=cluster.getStagingAreaDir();

  FileSystem fs=stagingArea.getFileSystem(conf);

  String realUser;

  String currentUser;

  UserGroupInformation ugi=UserGroupInformation.getLoginUser();

  realUser=ugi.getShortUserName();

  currentUser=UserGroupInformation.getCurrentUser().getShortUserName();

  if (fs.exists(stagingArea)) {

    FileStatus fsStatus=fs.getFileStatus(stagingArea);

    String owner=fsStatus.getOwner();

    if (!(owner.equals(currentUser) || owner.equals(realUser)) || !fsStatus.getPermission().equals(JOB_DIR_PERMISSION)) {

      throw new IOException("The ownership/permissions on the staging " + "directory " + stagingArea + " is not as expected. "+ "It is owned by "+ owner+ " and permissions are "+ fsStatus.getPermission()+ ". The directory must "+ "be owned by the submitter "+ currentUser+ " or "+ "by "+ realUser+ " and permissions must be rwx------");

    }

  }

 else {

    fs.mkdirs(stagingArea,new FsPermission(JOB_DIR_PERMISSION));

  }

  return stagingArea;

}

