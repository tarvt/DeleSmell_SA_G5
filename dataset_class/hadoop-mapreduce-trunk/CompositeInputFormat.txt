Location: CompositeInputFormat.java

Content: 

/** 

 * Adds the default set of identifiers to the parser.

 */

protected void addDefaults(){

  try {

    Parser.CNode.addIdentifier("inner",InnerJoinRecordReader.class);

    Parser.CNode.addIdentifier("outer",OuterJoinRecordReader.class);

    Parser.CNode.addIdentifier("override",OverrideRecordReader.class);

    Parser.WNode.addIdentifier("tbl",WrappedRecordReader.class);

  }

 catch (  NoSuchMethodException e) {

    throw new RuntimeException("FATAL: Failed to init defaults",e);

  }

}

Location: CompositeInputFormat.java

Content: 

/** 

 * Inform the parser of user-defined types.

 */

private void addUserIdentifiers(Configuration conf) throws IOException {

  Pattern x=Pattern.compile("^mapreduce\\.join\\.define\\.(\\w+)$");

  for (  Map.Entry<String,String> kv : conf) {

    Matcher m=x.matcher(kv.getKey());

    if (m.matches()) {

      try {

        Parser.CNode.addIdentifier(m.group(1),conf.getClass(m.group(0),null,ComposableRecordReader.class));

      }

 catch (      NoSuchMethodException e) {

        throw new IOException("Invalid define for " + m.group(1),e);

      }

    }

  }

}

Location: CompositeInputFormat.java

Content: 

/** 

 * Inform the parser of user-defined types.

 */

private void addUserIdentifiers(JobConf job) throws IOException {

  Pattern x=Pattern.compile("^mapred\\.join\\.define\\.(\\w+)$");

  for (  Map.Entry<String,String> kv : job) {

    Matcher m=x.matcher(kv.getKey());

    if (m.matches()) {

      try {

        Parser.CNode.addIdentifier(m.group(1),job.getClass(m.group(0),null,ComposableRecordReader.class));

      }

 catch (      NoSuchMethodException e) {

        throw (IOException)new IOException("Invalid define for " + m.group(1)).initCause(e);

      }

    }

  }

}

Location: CompositeInputFormat.java

Content: 

/** 

 * Convenience method for constructing composite formats. Given InputFormat class (inf), path (p) return: {@code tbl(<inf>, <p>) }

 */

public static String compose(Class<? extends InputFormat> inf,String path){

  return compose(inf.getName().intern(),path,new StringBuffer()).toString();

}

Location: CompositeInputFormat.java

Content: 

/** 

 * Convenience method for constructing composite formats. Given operation (op), Object class (inf), set of paths (p) return: {@code <op>(tbl(<inf>,<p1>),tbl(<inf>,<p2>),...,tbl(<inf>,<pn>)) }

 */

public static String compose(String op,Class<? extends InputFormat> inf,Path... path){

  ArrayList<String> tmp=new ArrayList<String>(path.length);

  for (  Path p : path) {

    tmp.add(p.toString());

  }

  return compose(op,inf,tmp.toArray(new String[0]));

}

Location: CompositeInputFormat.java

Content: 

/** 

 * Convenience method for constructing composite formats. Given operation (op), Object class (inf), set of paths (p) return: {@code <op>(tbl(<inf>,<p1>),tbl(<inf>,<p2>),...,tbl(<inf>,<pn>)) }

 */

public static String compose(String op,Class<? extends InputFormat> inf,String... path){

  final String infname=inf.getName();

  StringBuffer ret=new StringBuffer(op + '(');

  for (  String p : path) {

    compose(infname,p,ret);

    ret.append(',');

  }

  ret.setCharAt(ret.length() - 1,')');

  return ret.toString();

}

Location: CompositeInputFormat.java

Content: 

private static StringBuffer compose(String inf,String path,StringBuffer sb){

  sb.append("tbl(" + inf + ",\"");

  sb.append(path);

  sb.append("\")");

  return sb;

}

Location: CompositeInputFormat.java

Content: 

public CompositeInputFormat(){

}

Location: CompositeInputFormat.java

Content: 

/** 

 * Build a CompositeInputSplit from the child InputFormats by assigning the ith split from each child to the ith composite split.

 */

@SuppressWarnings("unchecked") public List<InputSplit> getSplits(JobContext job) throws IOException, InterruptedException {

  setFormat(job.getConfiguration());

  job.getConfiguration().setLong("mapreduce.input.fileinputformat.split.minsize",Long.MAX_VALUE);

  return root.getSplits(job);

}

Location: CompositeInputFormat.java

Content: 

/** 

 * Interpret a given string as a composite expression. {@code func  ::= <ident>([<func>,]*<func>) func  ::= tbl(<class>,"<path>") class ::= @see java.lang.Class#forName(java.lang.String) path  ::= @see org.apache.hadoop.fs.Path#Path(java.lang.String)}Reads expression from the <tt>mapreduce.join.expr</tt> property and user-supplied join types from <tt>mapreduce.join.define.&lt;ident&gt;</tt> types. Paths supplied to <tt>tbl</tt> are given as input paths to the InputFormat class listed.

 * @see #compose(java.lang.String,java.lang.Class,java.lang.String)

 */

public void setFormat(Configuration conf) throws IOException {

  addDefaults();

  addUserIdentifiers(conf);

  root=Parser.parse(conf.get(JOIN_EXPR,null),conf);

}

Location: CompositeInputFormat.java

Content: 

/** 

 * Interpret a given string as a composite expression. {@code func  ::= <ident>([<func>,]*<func>) func  ::= tbl(<class>,"<path>") class ::= @see java.lang.Class#forName(java.lang.String) path  ::= @see org.apache.hadoop.fs.Path#Path(java.lang.String)}Reads expression from the <tt>mapred.join.expr</tt> property and user-supplied join types from <tt>mapred.join.define.&lt;ident&gt;</tt> types. Paths supplied to <tt>tbl</tt> are given as input paths to the InputFormat class listed.

 * @see #compose(java.lang.String,java.lang.Class,java.lang.String)

 */

public void setFormat(JobConf job) throws IOException {

  addDefaults();

  addUserIdentifiers(job);

  root=Parser.parse(job.get("mapred.join.expr",null),job);

}

