Location: MiniMRCluster.java

Content: 

/** 

 * Add a task-tracker to the Mini-MR cluster.

 */

void addTaskTracker(TaskTrackerRunner taskTracker){

  Thread taskTrackerThread=new Thread(taskTracker);

  taskTrackerList.add(taskTracker);

  taskTrackerThreadList.add(taskTrackerThread);

  taskTrackerThread.start();

  ++numTaskTrackers;

}

Location: MiniMRCluster.java

Content: 

static JobConf configureJobConf(JobConf conf,String namenode,int jobTrackerPort,int jobTrackerInfoPort,UserGroupInformation ugi){

  JobConf result=new JobConf(conf);

  FileSystem.setDefaultUri(result,namenode);

  result.set(JTConfig.JT_IPC_ADDRESS,"localhost:" + jobTrackerPort);

  result.set(JTConfig.JT_HTTP_ADDRESS,"127.0.0.1:" + jobTrackerInfoPort);

  JobClient.setTaskOutputFilter(result,JobClient.TaskStatusFilter.ALL);

  return result;

}

Location: MiniMRCluster.java

Content: 

public JobConf createJobConf(JobConf conf){

  if (conf == null) {

    conf=new JobConf();

  }

  return configureJobConf(conf,namenode,jobTrackerPort,jobTrackerInfoPort,ugi);

}

Location: MiniMRCluster.java

Content: 

public int getFaultCount(String hostName){

  return jobTracker.getJobTracker().getFaultCount(hostName);

}

Location: MiniMRCluster.java

Content: 

/** 

 * Get the job finish time

 */

public long getJobFinishTime(JobID jobId){

  return jobTracker.getJobTracker().getJob(jobId).getFinishTime();

}

Location: MiniMRCluster.java

Content: 

/** 

 * Get the job's priority

 */

public JobPriority getJobPriority(JobID jobId){

  return jobTracker.getJobTracker().getJob(jobId).getPriority();

}

Location: MiniMRCluster.java

Content: 

/** 

 * Get jobtracker conf

 */

public JobConf getJobTrackerConf(){

  return this.conf;

}

Location: MiniMRCluster.java

Content: 

/** 

 * Get the actual rpc port used.

 */

public int getJobTrackerPort(){

  return jobTrackerPort;

}

Location: MiniMRCluster.java

Content: 

public JobTrackerRunner getJobTrackerRunner(){

  return jobTracker;

}

Location: MiniMRCluster.java

Content: 

/** 

 * Get the events list at the tasktracker

 */

public MapTaskCompletionEventsUpdate getMapTaskCompletionEventsUpdates(int index,JobID jobId,int max) throws IOException {

  String jtId=jobTracker.getJobTracker().getTrackerIdentifier();

  TaskAttemptID dummy=new TaskAttemptID(jtId,jobId.getId(),TaskType.REDUCE,0,0);

  return taskTrackerList.get(index).getTaskTracker().getMapCompletionEvents(jobId,0,max,dummy);

}

Location: MiniMRCluster.java

Content: 

/** 

 * Get the number of task trackers in the cluster

 */

public int getNumTaskTrackers(){

  return taskTrackerList.size();

}

Location: MiniMRCluster.java

Content: 

/** 

 * Get the task completion events

 */

public TaskCompletionEvent[] getTaskCompletionEvents(JobID id,int from,int max) throws IOException {

  return jobTracker.getJobTracker().getTaskCompletionEvents(id,from,max);

}

Location: MiniMRCluster.java

Content: 

/** 

 * Get the tasktrackerID in MiniMRCluster with given trackerName.

 */

int getTaskTrackerID(String trackerName){

  for (int id=0; id < numTaskTrackers; id++) {

    if (taskTrackerList.get(id).getTaskTracker().getName().equals(trackerName)) {

      return id;

    }

  }

  return -1;

}

Location: MiniMRCluster.java

Content: 

/** 

 * Get all the local directories for the Nth task tracker

 * @param taskTracker the index of the task tracker to check

 * @return array of local dirs

 */

public String[] getTaskTrackerLocalDirs(int taskTracker){

  return (taskTrackerList.get(taskTracker)).getLocalDirs();

}

Location: MiniMRCluster.java

Content: 

/** 

 * Get the local directory for the Nth task tracker

 * @param taskTracker the index of the task tracker to check

 * @return the absolute pathname of the local dir

 */

public String getTaskTrackerLocalDir(int taskTracker){

  return (taskTrackerList.get(taskTracker)).getLocalDir();

}

Location: MiniMRCluster.java

Content: 

TaskTrackerRunner getTaskTrackerRunner(int id){

  return taskTrackerList.get(id);

}

Location: MiniMRCluster.java

Content: 

public UserGroupInformation getUgi(){

  return ugi;

}

Location: MiniMRCluster.java

Content: 

/** 

 * Init the job

 */

public void initializeJob(JobID jobId) throws IOException {

  JobInProgress job=jobTracker.getJobTracker().getJob(jobId);

  jobTracker.getJobTracker().initJob(job);

}

Location: MiniMRCluster.java

Content: 

public MiniMRCluster(int jobTrackerPort,int taskTrackerPort,int numTaskTrackers,String namenode,int numDir) throws IOException {

  this(jobTrackerPort,taskTrackerPort,numTaskTrackers,namenode,numDir,null);

}

Location: MiniMRCluster.java

Content: 

public MiniMRCluster(int jobTrackerPort,int taskTrackerPort,int numTaskTrackers,String namenode,int numDir,String[] racks) throws IOException {

  this(jobTrackerPort,taskTrackerPort,numTaskTrackers,namenode,numDir,racks,null);

}

Location: MiniMRCluster.java

Content: 

public MiniMRCluster(int jobTrackerPort,int taskTrackerPort,int numTaskTrackers,String namenode,int numDir,String[] racks,String[] hosts) throws IOException {

  this(jobTrackerPort,taskTrackerPort,numTaskTrackers,namenode,numDir,racks,hosts,null);

}

Location: MiniMRCluster.java

Content: 

public MiniMRCluster(int jobTrackerPort,int taskTrackerPort,int numTaskTrackers,String namenode,int numDir,String[] racks,String[] hosts,UserGroupInformation ugi) throws IOException {

  this(jobTrackerPort,taskTrackerPort,numTaskTrackers,namenode,numDir,racks,hosts,ugi,null);

}

Location: MiniMRCluster.java

Content: 

public MiniMRCluster(int jobTrackerPort,int taskTrackerPort,int numTaskTrackers,String namenode,int numDir,String[] racks,String[] hosts,UserGroupInformation ugi,JobConf conf) throws IOException {

  this(jobTrackerPort,taskTrackerPort,numTaskTrackers,namenode,numDir,racks,hosts,ugi,conf,0);

}

Location: MiniMRCluster.java

Content: 

public MiniMRCluster(int jobTrackerPort,int taskTrackerPort,int numTaskTrackers,String namenode,int numDir,String[] racks,String[] hosts,UserGroupInformation ugi,JobConf conf,int numTrackerToExclude) throws IOException {

  this(jobTrackerPort,taskTrackerPort,numTaskTrackers,namenode,numDir,racks,hosts,ugi,conf,numTrackerToExclude,new Clock());

}

Location: MiniMRCluster.java

Content: 

public MiniMRCluster(int jobTrackerPort,int taskTrackerPort,int numTaskTrackers,String namenode,int numDir,String[] racks,String[] hosts,UserGroupInformation ugi,JobConf conf,int numTrackerToExclude,Clock clock) throws IOException {

  if (racks != null && racks.length < numTaskTrackers) {

    LOG.error("Invalid number of racks specified. It should be at least " + "equal to the number of tasktrackers");

    shutdown();

  }

  if (hosts != null && numTaskTrackers > hosts.length) {

    throw new IllegalArgumentException("The length of hosts [" + hosts.length + "] is less than the number of tasktrackers ["+ numTaskTrackers+ "].");

  }

  if (racks == null) {

    System.out.println("Generating rack names for tasktrackers");

    racks=new String[numTaskTrackers];

    for (int i=0; i < racks.length; ++i) {

      racks[i]=NetworkTopology.DEFAULT_RACK;

    }

  }

  if (hosts == null) {

    System.out.println("Generating host names for tasktrackers");

    hosts=new String[numTaskTrackers];

    for (int i=0; i < numTaskTrackers; i++) {

      hosts[i]="host" + i + ".foo.com";

    }

  }

  this.jobTrackerPort=jobTrackerPort;

  this.taskTrackerPort=taskTrackerPort;

  this.jobTrackerInfoPort=0;

  this.numTaskTrackers=0;

  this.namenode=namenode;

  this.ugi=ugi;

  this.conf=conf;

  this.numTrackerToExclude=numTrackerToExclude;

  this.clock=clock;

  startJobTracker();

  for (int idx=0; idx < numTaskTrackers; idx++) {

    String rack=null;

    String host=null;

    if (racks != null) {

      rack=racks[idx];

    }

    if (hosts != null) {

      host=hosts[idx];

    }

    startTaskTracker(host,rack,idx,numDir);

  }

  this.job=createJobConf(conf);

  waitUntilIdle();

}

Location: MiniMRCluster.java

Content: 

/** 

 * Create the config and the cluster.

 * @param numTaskTrackers no. of tasktrackers in the cluster

 * @param namenode the namenode

 * @param numDir no. of directories

 * @throws IOException

 */

public MiniMRCluster(int numTaskTrackers,String namenode,int numDir) throws IOException {

  this(0,0,numTaskTrackers,namenode,numDir);

}

Location: MiniMRCluster.java

Content: 

/** 

 * Create the config and the cluster.

 * @param numTaskTrackers no. of tasktrackers in the cluster

 * @param namenode the namenode

 * @param numDir no. of directories

 * @throws IOException

 */

public MiniMRCluster(int numTaskTrackers,String namenode,int numDir,String[] racks,String[] hosts) throws IOException {

  this(0,0,numTaskTrackers,namenode,numDir,racks,hosts);

}

Location: MiniMRCluster.java

Content: 

/** 

 * Create the config and the cluster.

 * @param numTaskTrackers no. of tasktrackers in the cluster

 * @param namenode the namenode

 * @param numDir no. of directories

 * @param racks Array of racks

 * @param hosts Array of hosts in the corresponding racks

 * @param conf Default conf for the jobtracker

 * @throws IOException

 */

public MiniMRCluster(int numTaskTrackers,String namenode,int numDir,String[] racks,String[] hosts,JobConf conf) throws IOException {

  this(0,0,numTaskTrackers,namenode,numDir,racks,hosts,null,conf);

}

Location: MiniMRCluster.java

Content: 

/** 

 * Sets inline cleanup threads to all task trackers sothat deletion of temporary files/dirs happen inline

 */

public void setInlineCleanupThreads(){

  for (int i=0; i < getNumTaskTrackers(); i++) {

    getTaskTrackerRunner(i).getTaskTracker().setCleanupThread(new UtilsForTests.InlineCleanupQueue());

  }

}

Location: MiniMRCluster.java

Content: 

/** 

 * Change the job's priority

 * @throws IOException

 * @throws AccessControlException

 */

public void setJobPriority(JobID jobId,JobPriority priority) throws AccessControlException, IOException {

  jobTracker.getJobTracker().setJobPriority(jobId,priority);

}

Location: MiniMRCluster.java

Content: 

/** 

 * Start the jobtracker.

 */

public void startJobTracker(){

  startJobTracker(true);

}

Location: MiniMRCluster.java

Content: 

public void startJobTracker(boolean wait){

  jobTracker=new JobTrackerRunner(conf,clock);

  jobTrackerThread=new Thread(jobTracker);

  jobTrackerThread.start();

  if (!wait) {

    return;

  }

  while (jobTracker.isActive() && !jobTracker.isUp()) {

    try {

      Thread.sleep(1000);

    }

 catch (    InterruptedException e) {

    }

  }

  ClusterStatus status=null;

  if (jobTracker.isUp()) {

    status=jobTracker.getJobTracker().getClusterStatus(false);

    while (jobTracker.isActive() && status.getJobTrackerStatus() == JobTrackerStatus.INITIALIZING) {

      try {

        LOG.info("JobTracker still initializing. Waiting.");

        Thread.sleep(1000);

      }

 catch (      InterruptedException e) {

      }

      status=jobTracker.getJobTracker().getClusterStatus(false);

    }

  }

  if (!jobTracker.isActive()) {

    return;

  }

  this.jobTrackerPort=jobTracker.getJobTrackerPort();

  this.jobTrackerInfoPort=jobTracker.getJobTrackerInfoPort();

}

Location: MiniMRCluster.java

Content: 

/** 

 * Start the tasktracker.

 */

public void startTaskTracker(String host,String rack,int idx,int numDir) throws IOException {

  if (rack != null) {

    StaticMapping.addNodeToRack(host,rack);

  }

  if (host != null) {

    NetUtils.addStaticResolution(host,"localhost");

  }

  TaskTrackerRunner taskTracker;

  taskTracker=new TaskTrackerRunner(idx,numDir,host,conf);

  addTaskTracker(taskTracker);

}

Location: MiniMRCluster.java

Content: 

/** 

 * Kill the jobtracker.

 */

public void stopJobTracker(){

  jobTracker.shutdown();

  jobTrackerThread.interrupt();

  try {

    jobTrackerThread.join();

  }

 catch (  InterruptedException ex) {

    LOG.error("Problem waiting for job tracker to finish",ex);

  }

}

Location: MiniMRCluster.java

Content: 

/** 

 * Kill the tasktracker.

 */

public void stopTaskTracker(int id){

  TaskTrackerRunner tracker=taskTrackerList.remove(id);

  tracker.shutdown();

  Thread thread=taskTrackerThreadList.remove(id);

  try {

    thread.join();

    tracker.isDead=true;

    --numTaskTrackers;

  }

 catch (  InterruptedException ex) {

    LOG.error("Problem waiting for task tracker to finish",ex);

  }

}

Location: MiniMRCluster.java

Content: 

private void waitTaskTrackers(){

  for (Iterator<TaskTrackerRunner> itr=taskTrackerList.iterator(); itr.hasNext(); ) {

    TaskTrackerRunner runner=itr.next();

    while (!runner.isDead && (!runner.isInitialized || !runner.tt.isIdle())) {

      if (!runner.isInitialized) {

        LOG.info("Waiting for task tracker to start.");

      }

 else {

        LOG.info("Waiting for task tracker " + runner.tt.getName() + " to be idle.");

      }

      try {

        Thread.sleep(1000);

      }

 catch (      InterruptedException ie) {

      }

    }

  }

}

Location: MiniMRCluster.java

Content: 

/** 

 * Wait until the system is idle.

 */

public void waitUntilIdle(){

  waitTaskTrackers();

  JobClient client;

  try {

    client=new JobClient(job);

    ClusterStatus status=client.getClusterStatus();

    while (status.getTaskTrackers() + numTrackerToExclude < taskTrackerList.size()) {

      for (      TaskTrackerRunner runner : taskTrackerList) {

        if (runner.isDead) {

          throw new RuntimeException("TaskTracker is dead");

        }

      }

      Thread.sleep(1000);

      status=client.getClusterStatus();

    }

  }

 catch (  IOException ex) {

    throw new RuntimeException(ex);

  }

catch (  InterruptedException ex) {

    throw new RuntimeException(ex);

  }

}

