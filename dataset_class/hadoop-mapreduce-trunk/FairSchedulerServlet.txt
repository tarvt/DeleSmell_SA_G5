Location: FairSchedulerServlet.java

Content: 

@Override protected void doPost(HttpServletRequest req,HttpServletResponse resp) throws ServletException, IOException {

  doGet(req,resp);

}

Location: FairSchedulerServlet.java

Content: 

/** 

 * Generate a HTML select control with a given list of choices and a given option selected. When the selection is changed, take the user to the <code>submitUrl</code>. The <code>submitUrl</code> can be made to include the option selected -- the first occurrence of the substring <code>&lt;CHOICE&gt;</code> will be replaced by the option chosen.

 */

private String generateSelect(Iterable<String> choices,String selectedChoice,String submitUrl){

  StringBuilder html=new StringBuilder();

  String id="select" + lastId++;

  html.append("<select id=\"" + id + "\" name=\""+ id+ "\" "+ "onchange=\"window.location = '"+ submitUrl+ "'.replace('<CHOICE>', document.getElementById('"+ id+ "').value);\">\n");

  for (  String choice : choices) {

    html.append(String.format("<option value=\"%s\"%s>%s</option>\n",choice,(choice.equals(selectedChoice) ? " selected" : ""),choice));

  }

  html.append("</select>\n");

  return html.toString();

}

Location: FairSchedulerServlet.java

Content: 

/** 

 * Obtained all initialized jobs

 */

private Collection<JobInProgress> getInitedJobs(){

  Collection<JobInProgress> runningJobs=jobTracker.getRunningJobs();

  for (Iterator<JobInProgress> it=runningJobs.iterator(); it.hasNext(); ) {

    JobInProgress job=it.next();

    if (!job.inited()) {

      it.remove();

    }

  }

  return runningJobs;

}

Location: FairSchedulerServlet.java

Content: 

/** 

 * Print a view of running jobs to the given output writer.

 */

private void showJobs(PrintWriter out,boolean advancedView){

  out.print("<h2>Running Jobs</h2>\n");

  out.print("<table border=\"2\" cellpadding=\"5\" cellspacing=\"2\">\n");

  int colsPerTaskType=advancedView ? 4 : 3;

  out.printf("<tr><th rowspan=2>Submitted</th>" + "<th rowspan=2>JobID</th>" + "<th rowspan=2>User</th>"+ "<th rowspan=2>Name</th>"+ "<th rowspan=2>Pool</th>"+ "<th rowspan=2>Priority</th>"+ "<th colspan=%d>Map Tasks</th>"+ "<th colspan=%d>Reduce Tasks</th>",colsPerTaskType,colsPerTaskType);

  out.print("</tr><tr>\n");

  out.print("<th>Finished</th><th>Running</th><th>Fair Share</th>" + (advancedView ? "<th>Weight</th>" : ""));

  out.print("<th>Finished</th><th>Running</th><th>Fair Share</th>" + (advancedView ? "<th>Weight</th>" : ""));

  out.print("</tr>\n");

synchronized (jobTracker) {

    Collection<JobInProgress> runningJobs=getInitedJobs();

synchronized (scheduler) {

      for (      JobInProgress job : runningJobs) {

        JobProfile profile=job.getProfile();

        JobInfo info=scheduler.infos.get(job);

        if (info == null) {

          info=new JobInfo(null,null);

        }

        out.print("<tr>\n");

        out.printf("<td>%s</td>\n",DATE_FORMAT.format(new Date(job.getStartTime())));

        out.printf("<td><a href=\"jobdetails.jsp?jobid=%s\">%s</a></td>",profile.getJobID(),profile.getJobID());

        out.printf("<td>%s</td>\n",profile.getUser());

        out.printf("<td>%s</td>\n",profile.getJobName());

        if (JSPUtil.privateActionsAllowed(jobTracker.conf)) {

          out.printf("<td>%s</td>\n",generateSelect(scheduler.getPoolManager().getPoolNames(),scheduler.getPoolManager().getPoolName(job),"/scheduler?setPool=<CHOICE>&jobid=" + profile.getJobID() + (advancedView ? "&advanced" : "")));

          out.printf("<td>%s</td>\n",generateSelect(Arrays.asList(new String[]{"VERY_LOW","LOW","NORMAL","HIGH","VERY_HIGH"}),job.getPriority().toString(),"/scheduler?setPriority=<CHOICE>&jobid=" + profile.getJobID() + (advancedView ? "&advanced" : "")));

        }

 else {

          out.printf("<td>%s</td>\n",scheduler.getPoolManager().getPoolName(job));

          out.printf("<td>%s</td>\n",job.getPriority().toString());

        }

        Pool pool=scheduler.getPoolManager().getPool(job);

        String mapShare=(pool.getSchedulingMode() == SchedulingMode.FAIR) ? String.format("%.1f",info.mapSchedulable.getFairShare()) : "NA";

        out.printf("<td>%d / %d</td><td>%d</td><td>%s</td>\n",job.finishedMaps(),job.desiredMaps(),info.mapSchedulable.getRunningTasks(),mapShare);

        if (advancedView) {

          out.printf("<td>%.1f</td>\n",info.mapSchedulable.getWeight());

        }

        String reduceShare=(pool.getSchedulingMode() == SchedulingMode.FAIR) ? String.format("%.1f",info.reduceSchedulable.getFairShare()) : "NA";

        out.printf("<td>%d / %d</td><td>%d</td><td>%s</td>\n",job.finishedReduces(),job.desiredReduces(),info.reduceSchedulable.getRunningTasks(),reduceShare);

        if (advancedView) {

          out.printf("<td>%.1f</td>\n",info.reduceSchedulable.getWeight());

        }

        out.print("</tr>\n");

      }

    }

  }

  out.print("</table>\n");

}

Location: FairSchedulerServlet.java

Content: 

/** 

 * Print a view of pools to the given output writer.

 */

private void showPools(PrintWriter out,boolean advancedView){

synchronized (scheduler) {

    boolean warnInverted=false;

    PoolManager poolManager=scheduler.getPoolManager();

    out.print("<h2>Pools</h2>\n");

    out.print("<table border=\"2\" cellpadding=\"5\" cellspacing=\"2\">\n");

    out.print("<tr><th rowspan=2>Pool</th>" + "<th rowspan=2>Running Jobs</th>" + "<th colspan=4>Map Tasks</th>"+ "<th colspan=4>Reduce Tasks</th>"+ "<th rowspan=2>Scheduling Mode</th></tr>\n<tr>"+ "<th>Min Share</th><th>Max Share</th><th>Running</th><th>Fair Share</th>"+ "<th>Min Share</th><th>Max Share</th><th>Running</th><th>Fair Share</th></tr>\n");

    List<Pool> pools=new ArrayList<Pool>(poolManager.getPools());

    Collections.sort(pools,new Comparator<Pool>(){

      public int compare(      Pool p1,      Pool p2){

        if (p1.isDefaultPool())         return 1;

 else         if (p2.isDefaultPool())         return -1;

 else         return p1.getName().compareTo(p2.getName());

      }

    }

);

    for (    Pool pool : pools) {

      String name=pool.getName();

      int runningMaps=pool.getMapSchedulable().getRunningTasks();

      int runningReduces=pool.getReduceSchedulable().getRunningTasks();

      int maxMaps=poolManager.getMaxSlots(name,TaskType.MAP);

      int maxReduces=poolManager.getMaxSlots(name,TaskType.REDUCE);

      boolean invertedMaps=poolManager.invertedMinMax(TaskType.MAP,name);

      boolean invertedReduces=poolManager.invertedMinMax(TaskType.REDUCE,name);

      warnInverted=warnInverted || invertedMaps || invertedReduces;

      out.print("<tr>");

      out.printf("<td>%s</td>",name);

      out.printf("<td>%d</td>",pool.getJobs().size());

      out.printf("<td>%d</td>",poolManager.getAllocation(name,TaskType.MAP));

      out.print("<td>");

      if (maxMaps == Integer.MAX_VALUE) {

        out.print("-");

      }

 else {

        out.print(maxMaps);

      }

      if (invertedMaps) {

        out.print("*");

      }

      out.print("</td>");

      out.printf("<td>%d</td>",runningMaps);

      out.printf("<td>%.1f</td>",pool.getMapSchedulable().getFairShare());

      out.printf("<td>%d</td>",poolManager.getAllocation(name,TaskType.REDUCE));

      out.print("<td>");

      if (maxReduces == Integer.MAX_VALUE) {

        out.print("-");

      }

 else {

        out.print(maxReduces);

      }

      if (invertedReduces) {

        out.print("*");

      }

      out.print("</td>");

      out.printf("<td>%d</td>",runningReduces);

      out.printf("<td>%.1f</td>",pool.getReduceSchedulable().getFairShare());

      out.printf("<td>%s</td>",pool.getSchedulingMode());

      out.print("</tr>\n");

    }

    out.print("</table>\n");

    if (warnInverted) {

      out.print("<p>* One or more pools have max share set lower than min share. Max share will be used and minimum will be treated as if set equal to max.</p>");

    }

  }

}

