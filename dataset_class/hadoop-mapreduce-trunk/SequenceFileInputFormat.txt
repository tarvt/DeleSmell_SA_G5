Location: SequenceFileInputFormat.java

Content: 

@Override protected long getFormatMinSplitSize(){

  return SequenceFile.SYNC_INTERVAL;

}

Location: SequenceFileInputFormat.java

Content: 

@Override protected FileStatus[] listStatus(JobConf job) throws IOException {

  FileStatus[] files=super.listStatus(job);

  for (int i=0; i < files.length; i++) {

    FileStatus file=files[i];

    if (file.isDirectory()) {

      Path dataFile=new Path(file.getPath(),MapFile.DATA_FILE_NAME);

      FileSystem fs=file.getPath().getFileSystem(job);

      files[i]=fs.getFileStatus(dataFile);

    }

  }

  return files;

}

Location: SequenceFileInputFormat.java

Content: 

@Override protected List<FileStatus> listStatus(JobContext job) throws IOException {

  List<FileStatus> files=super.listStatus(job);

  int len=files.size();

  for (int i=0; i < len; ++i) {

    FileStatus file=files.get(i);

    if (file.isDirectory()) {

      Path p=file.getPath();

      FileSystem fs=p.getFileSystem(job.getConfiguration());

      files.set(i,fs.getFileStatus(new Path(p,MapFile.DATA_FILE_NAME)));

    }

  }

  return files;

}

Location: SequenceFileInputFormat.java

Content: 

public SequenceFileInputFormat(){

  setMinSplitSize(SequenceFile.SYNC_INTERVAL);

}

