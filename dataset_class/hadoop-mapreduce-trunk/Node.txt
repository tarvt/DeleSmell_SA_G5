Location: Node.java

Content: 

/** 

 * Add a child node to this node.

 * @param child The child node to be added. The child node should currently not be belong to another cluster topology.

 * @return Boolean indicating whether the node is successfully added.

 */

public synchronized boolean addChild(Node child){

  if (child.parent != null) {

    throw new IllegalArgumentException("The child is already under another node:" + child.parent);

  }

  checkChildren();

  boolean retval=children.add(child);

  if (retval)   child.parent=this;

  return retval;

}

Location: Node.java

Content: 

private void checkChildren(){

  if (children == null) {

    children=new TreeSet<Node>();

  }

}

Location: Node.java

Content: 

@Override public int compareTo(Node o){

  return name.compareTo(o.name);

}

Location: Node.java

Content: 

@Override public boolean equals(Object obj){

  if (this == obj)   return true;

  if (obj == null)   return false;

  if (obj.getClass() != this.getClass())   return false;

  Node other=(Node)obj;

  return name.equals(other.name);

}

Location: Node.java

Content: 

/** 

 * Get the children of this node.

 * @return The children of this node. If no child, an empty set will bereturned. The returned set is read-only.

 */

public synchronized Set<Node> getChildren(){

  return (children == null) ? EMPTY_SET : Collections.unmodifiableSortedSet(children);

}

Location: Node.java

Content: 

/** 

 * Get the level of the node.

 * @return The level of the node.

 */

public int getLevel(){

  return level;

}

Location: Node.java

Content: 

/** 

 * Get the name of the node.

 * @return The name of the node.

 */

public String getName(){

  return name;

}

Location: Node.java

Content: 

/** 

 * Get the parent node.

 * @return the parent node. If root node, return null.

 */

public Node getParent(){

  return parent;

}

Location: Node.java

Content: 

/** 

 * Does this node have any children?

 * @return Boolean indicate whether this node has any children.

 */

public synchronized boolean hasChildren(){

  return children != null && !children.isEmpty();

}

Location: Node.java

Content: 

@Override public int hashCode(){

  return name.hashCode();

}

Location: Node.java

Content: 

/** 

 * @param name A unique name to identify a node in the cluster.

 * @param level The level of the node in the cluster

 */

public Node(String name,int level){

  if (name == null) {

    throw new IllegalArgumentException("Node name cannot be null");

  }

  if (level < 0) {

    throw new IllegalArgumentException("Level cannot be negative");

  }

  this.name=name;

  this.level=level;

}

Location: Node.java

Content: 

@Override public String toString(){

  return "(" + name + ", "+ level+ ")";

}

