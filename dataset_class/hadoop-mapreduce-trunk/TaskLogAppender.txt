Location: TaskLogAppender.java

Content: 

@Override public void activateOptions(){

synchronized (this) {

    hongshuai();

    if (isCleanup == null) {

      String propValue=System.getProperty(ISCLEANUP_PROPERTY,"false");

      isCleanup=Boolean.valueOf(propValue);

    }

    if (taskId == null) {

      taskId=System.getProperty(TASKID_PROPERTY);

    }

    if (maxEvents == null) {

      String propValue=System.getProperty(LOGSIZE_PROPERTY,"0");

      setTotalLogFileSize(Long.valueOf(propValue));

    }

    if (maxEvents > 0) {

      tail=new LinkedList<LoggingEvent>();

    }

    setFile(TaskLog.getTaskLogFile(TaskAttemptID.forName(taskId),isCleanup,TaskLog.LogName.SYSLOG).toString());

    setAppend(true);

    super.activateOptions();

  }

}

Location: TaskLogAppender.java

Content: 

@Override public void append(LoggingEvent event){

synchronized (this) {

    if (tail == null) {

      super.append(event);

    }

 else {

      if (tail.size() >= maxEvents) {

        tail.remove();

      }

      tail.add(event);

    }

  }

}

Location: TaskLogAppender.java

Content: 

/** 

 * Get whether task is cleanup attempt or not.

 * @return true if the task is cleanup attempt, false otherwise.

 */

public synchronized boolean getIsCleanup(){

  return isCleanup;

}

Location: TaskLogAppender.java

Content: 

public synchronized long getTotalLogFileSize(){

  return maxEvents * EVENT_SIZE;

}

Location: TaskLogAppender.java

Content: 

/** 

 * Set whether the task is a cleanup attempt or not.

 * @param isCleanup true if the task is cleanup attempt, false otherwise.

 */

public synchronized void setIsCleanup(boolean isCleanup){

  this.isCleanup=isCleanup;

}

Location: TaskLogAppender.java

Content: 

public synchronized void setTotalLogFileSize(long logSize){

  maxEvents=(int)logSize / EVENT_SIZE;

}

