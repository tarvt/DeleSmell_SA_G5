Location: PolicyInfo.java

Content: 

/** 

 * Copy fields from another PolicyInfo

 */

public void copyFrom(PolicyInfo other){

  if (other.conf != null) {

    this.conf=other.conf;

  }

  if (other.policyName != null && other.policyName.length() > 0) {

    this.policyName=other.policyName;

  }

  if (other.description != null && other.description.length() > 0) {

    this.description=other.description;

  }

  if (other.codeType != null) {

    this.codeType=other.codeType;

  }

  if (other.srcPath != null) {

    this.srcPath=other.srcPath;

  }

  for (  Object key : other.properties.keySet()) {

    String skey=(String)key;

    this.properties.setProperty(skey,other.properties.getProperty(skey));

  }

}

Location: PolicyInfo.java

Content: 

/** 

 * Get the destination path of this policy.

 */

public ErasureCodeType getErasureCode(){

  return this.codeType;

}

Location: PolicyInfo.java

Content: 

/** 

 * Returns the value of an internal property.

 * @param name property name.

 */

public String getProperty(String name){

  return properties.getProperty(name);

}

Location: PolicyInfo.java

Content: 

/** 

 * Get the expanded (unglobbed) forms of the srcPaths

 */

public Path[] getSrcPathExpanded() throws IOException {

  FileSystem fs=srcPath.getFileSystem(conf);

  FileStatus[] gpaths=fs.globStatus(srcPath);

  if (gpaths == null) {

    return null;

  }

  Path[] values=new Path[gpaths.length];

  for (int i=0; i < gpaths.length; i++) {

    Path p=gpaths[i].getPath();

    values[i]=p.makeQualified(fs);

  }

  return values;

}

Location: PolicyInfo.java

Content: 

/** 

 * Create the empty object

 */

public PolicyInfo(){

  this.conf=null;

  this.policyName="";

  this.description="";

  this.srcPath=null;

  this.properties=new Properties();

  this.plock=new ReentrantReadWriteLock();

}

Location: PolicyInfo.java

Content: 

/** 

 * Create the metadata that describes a policy

 */

public PolicyInfo(String policyName,Configuration conf){

  this.conf=conf;

  this.policyName=policyName;

  this.description="";

  this.srcPath=null;

  this.properties=new Properties();

  this.plock=new ReentrantReadWriteLock();

}

Location: PolicyInfo.java

Content: 

/** 

 * Set the description of this policy.

 */

public void setDescription(String des){

  this.description=des;

}

Location: PolicyInfo.java

Content: 

/** 

 * Set the erasure code type used in this policy

 */

public void setErasureCode(String code){

  this.codeType=ErasureCodeType.fromString(code);

}

Location: PolicyInfo.java

Content: 

/** 

 * Sets an internal property.

 * @param name property name.

 * @param value property value.

 */

public void setProperty(String name,String value){

  properties.setProperty(name,value);

}

Location: PolicyInfo.java

Content: 

/** 

 * Sets the input path on which this policy has to be applied

 */

public void setSrcPath(String in) throws IOException {

  srcPath=new Path(in);

  srcPath=srcPath.makeQualified(srcPath.getFileSystem(conf));

}

