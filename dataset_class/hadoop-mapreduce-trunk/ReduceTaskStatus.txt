Location: ReduceTaskStatus.java

Content: 

@Override public void addFetchFailedMap(TaskAttemptID mapTaskId){

  failedFetchTasks.add(mapTaskId);

}

Location: ReduceTaskStatus.java

Content: 

@Override synchronized void clearStatus(){

  super.clearStatus();

  failedFetchTasks.clear();

}

Location: ReduceTaskStatus.java

Content: 

@Override public List<TaskAttemptID> getFetchFailedMaps(){

  return failedFetchTasks;

}

Location: ReduceTaskStatus.java

Content: 

@Override public boolean getIsMap(){

  return false;

}

Location: ReduceTaskStatus.java

Content: 

public ReduceTaskStatus(){

}

Location: ReduceTaskStatus.java

Content: 

public ReduceTaskStatus(TaskAttemptID taskid,float progress,int numSlots,State runState,String diagnosticInfo,String stateString,String taskTracker,Phase phase,Counters counters){

  super(taskid,progress,numSlots,runState,diagnosticInfo,stateString,taskTracker,phase,counters);

}

Location: ReduceTaskStatus.java

Content: 

@Override void setMapFinishTime(long shuffleFinishTime){

  throw new UnsupportedOperationException("setMapFinishTime() not supported for ReduceTask");

}

Location: ReduceTaskStatus.java

Content: 

@Override void setShuffleFinishTime(long shuffleFinishTime){

  this.shuffleFinishTime=shuffleFinishTime;

}

Location: ReduceTaskStatus.java

Content: 

@Override void setSortFinishTime(long sortFinishTime){

  this.sortFinishTime=sortFinishTime;

  if (0 == this.shuffleFinishTime) {

    this.shuffleFinishTime=sortFinishTime;

  }

}

Location: ReduceTaskStatus.java

Content: 

@Override synchronized void statusUpdate(TaskStatus status){

  super.statusUpdate(status);

  if (status.getShuffleFinishTime() != 0) {

    this.shuffleFinishTime=status.getShuffleFinishTime();

  }

  if (status.getSortFinishTime() != 0) {

    sortFinishTime=status.getSortFinishTime();

  }

  List<TaskAttemptID> newFetchFailedMaps=status.getFetchFailedMaps();

  if (failedFetchTasks == null) {

    failedFetchTasks=newFetchFailedMaps;

  }

 else   if (newFetchFailedMaps != null) {

    failedFetchTasks.addAll(newFetchFailedMaps);

  }

}

