Location: TestLongLong.java

Content: 

static long nextPositiveLong(){

  return RAN.nextLong() & MASK;

}

Location: TestLongLong.java

Content: 

public void testMultiplication(){

  for (int i=0; i < 100; i++) {

    final long a=nextPositiveLong();

    final long b=nextPositiveLong();

    verifyMultiplication(a,b);

  }

  final long max=Long.MAX_VALUE & MASK;

  verifyMultiplication(max,max);

}

Location: TestLongLong.java

Content: 

public void testRightShift(){

  for (int i=0; i < 1000; i++) {

    final long a=nextPositiveLong();

    final long b=nextPositiveLong();

    verifyMultiplication(a,b);

  }

}

Location: TestLongLong.java

Content: 

static void verifyMultiplication(long a,long b){

  final LongLong ll=LongLong.multiplication(new LongLong(),a,b);

  final BigInteger bi=BigInteger.valueOf(a).multiply(BigInteger.valueOf(b));

  final String s=String.format("\na = %x\nb = %x\nll= " + ll + "\nbi= "+ bi.toString(16)+ "\n",a,b);

  assertEquals(s,bi,ll.toBigInteger());

}

Location: TestLongLong.java

Content: 

static void verifyRightShift(long a,long b){

  final LongLong ll=new LongLong().set(a,b);

  final BigInteger bi=ll.toBigInteger();

  for (int i=0; i < LongLong.SIZE >> 1; i++) {

    final long result=ll.shiftRight(i) & MASK;

    final long expected=bi.shiftRight(i).longValue() & MASK;

    final String s=String.format("\na = %x\nb = %x\nll= " + ll + "\nbi= "+ bi.toString(16)+ "\n",a,b);

    assertEquals(s,expected,result);

  }

  final String s=String.format("\na = %x\nb = %x\nll= " + ll + "\nbi= "+ bi.toString(16)+ "\n",a,b);

  assertEquals(s,bi,ll.toBigInteger());

}

