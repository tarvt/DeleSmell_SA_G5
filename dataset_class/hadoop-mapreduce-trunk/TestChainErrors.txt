Location: TestChainErrors.java

Content: 

public TestChainErrors() throws IOException {

  super(HadoopTestCase.LOCAL_MR,HadoopTestCase.LOCAL_FS,1,1);

}

Location: TestChainErrors.java

Content: 

/** 

 * Tests one of the mappers throwing exception.

 * @throws Exception

 */

public void testChainFail() throws Exception {

  Configuration conf=createJobConf();

  Job job=MapReduceTestUtil.createJob(conf,inDir,outDir,1,0,input);

  job.setJobName("chain");

  ChainMapper.addMapper(job,Mapper.class,LongWritable.class,Text.class,LongWritable.class,Text.class,null);

  ChainMapper.addMapper(job,FailMap.class,LongWritable.class,Text.class,IntWritable.class,Text.class,null);

  ChainMapper.addMapper(job,Mapper.class,IntWritable.class,Text.class,LongWritable.class,Text.class,null);

  job.waitForCompletion(true);

  assertTrue("Job Not failed",!job.isSuccessful());

}

Location: TestChainErrors.java

Content: 

/** 

 * Tests one of the maps consuming output.

 * @throws Exception

 */

public void testChainMapNoOuptut() throws Exception {

  Configuration conf=createJobConf();

  String expectedOutput="";

  Job job=MapReduceTestUtil.createJob(conf,inDir,outDir,1,0,input);

  job.setJobName("chain");

  ChainMapper.addMapper(job,ConsumeMap.class,IntWritable.class,Text.class,LongWritable.class,Text.class,null);

  ChainMapper.addMapper(job,Mapper.class,LongWritable.class,Text.class,LongWritable.class,Text.class,null);

  job.waitForCompletion(true);

  assertTrue("Job failed",job.isSuccessful());

  assertEquals("Outputs doesn't match",expectedOutput,MapReduceTestUtil.readOutput(outDir,conf));

}

Location: TestChainErrors.java

Content: 

/** 

 * Tests reducer consuming output.

 * @throws Exception

 */

public void testChainReduceNoOuptut() throws Exception {

  Configuration conf=createJobConf();

  String expectedOutput="";

  Job job=MapReduceTestUtil.createJob(conf,inDir,outDir,1,1,input);

  job.setJobName("chain");

  ChainMapper.addMapper(job,Mapper.class,IntWritable.class,Text.class,LongWritable.class,Text.class,null);

  ChainReducer.setReducer(job,ConsumeReduce.class,LongWritable.class,Text.class,LongWritable.class,Text.class,null);

  ChainReducer.addMapper(job,Mapper.class,LongWritable.class,Text.class,LongWritable.class,Text.class,null);

  job.waitForCompletion(true);

  assertTrue("Job failed",job.isSuccessful());

  assertEquals("Outputs doesn't match",expectedOutput,MapReduceTestUtil.readOutput(outDir,conf));

}

Location: TestChainErrors.java

Content: 

/** 

 * Tests errors during submission.

 * @throws Exception

 */

public void testChainSubmission() throws Exception {

  Configuration conf=createJobConf();

  Job job=MapReduceTestUtil.createJob(conf,inDir,outDir,0,0,input);

  job.setJobName("chain");

  Throwable th=null;

  try {

    ChainMapper.addMapper(job,Mapper.class,LongWritable.class,Text.class,IntWritable.class,Text.class,null);

    ChainMapper.addMapper(job,Mapper.class,LongWritable.class,Text.class,LongWritable.class,Text.class,null);

  }

 catch (  IllegalArgumentException iae) {

    th=iae;

  }

  assertTrue(th != null);

  th=null;

  try {

    ChainReducer.setReducer(job,Reducer.class,LongWritable.class,Text.class,IntWritable.class,Text.class,null);

    ChainMapper.addMapper(job,Mapper.class,LongWritable.class,Text.class,LongWritable.class,Text.class,null);

  }

 catch (  IllegalArgumentException iae) {

    th=iae;

  }

  assertTrue(th != null);

}

Location: TestChainErrors.java

Content: 

/** 

 * Tests Reducer throwing exception.

 * @throws Exception

 */

public void testReducerFail() throws Exception {

  Configuration conf=createJobConf();

  Job job=MapReduceTestUtil.createJob(conf,inDir,outDir,1,1,input);

  job.setJobName("chain");

  ChainMapper.addMapper(job,Mapper.class,LongWritable.class,Text.class,LongWritable.class,Text.class,null);

  ChainReducer.setReducer(job,FailReduce.class,LongWritable.class,Text.class,LongWritable.class,Text.class,null);

  ChainReducer.addMapper(job,Mapper.class,LongWritable.class,Text.class,LongWritable.class,Text.class,null);

  job.waitForCompletion(true);

  assertTrue("Job Not failed",!job.isSuccessful());

}

