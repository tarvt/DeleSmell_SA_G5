Location: MockSimulatorJobTracker.java

Content: 

public void checkMissingHeartbeats(){

  Assert.assertEquals(1,heartbeats.size());

  long lastHeartbeat=heartbeats.firstKey();

  Assert.assertTrue("Missing heartbeats, last heartbeat=" + lastHeartbeat,heartbeats.get(lastHeartbeat).isEmpty());

}

Location: MockSimulatorJobTracker.java

Content: 

public void expectEmptyHeartbeats(String taskTrackerName,int numHeartbeats){

  long simulationTime=simulationStartTime;

  for (int i=0; i < numHeartbeats; i++) {

    TreeMap<String,HeartbeatHelper> hb=heartbeats.get(simulationTime);

    if (hb == null) {

      hb=new TreeMap<String,HeartbeatHelper>();

      heartbeats.put(simulationTime,hb);

    }

    hb.put(taskTrackerName,new HeartbeatHelper());

    simulationTime+=heartbeatInterval;

  }

}

Location: MockSimulatorJobTracker.java

Content: 

public MockSimulatorJobTracker(long simulationStartTime,int heartbeatInterval,boolean checkHeartbeats){

  this.simulationStartTime=simulationStartTime;

  this.heartbeatInterval=heartbeatInterval;

  this.checkHeartbeats=checkHeartbeats;

}

Location: MockSimulatorJobTracker.java

Content: 

public long nextHeartbeat(long time){

  long numHeartbeats=(long)Math.ceil((time - simulationStartTime) / (double)heartbeatInterval);

  return simulationStartTime + numHeartbeats * heartbeatInterval;

}

Location: MockSimulatorJobTracker.java

Content: 

public void runMapTask(String taskTrackerName,TaskAttemptID taskId,long mapStart,long mapRuntime,long killHeartbeat){

  long mapDone=mapStart + mapRuntime;

  long mapEndHeartbeat=nextHeartbeat(mapDone);

  final boolean isKilled=(killHeartbeat >= 0);

  if (isKilled) {

    mapEndHeartbeat=nextHeartbeat(killHeartbeat + 1);

  }

  LOG.debug("mapStart=" + mapStart + ", mapDone="+ mapDone+ ", mapEndHeartbeat="+ mapEndHeartbeat+ ", killHeartbeat="+ killHeartbeat);

  final int numSlotsRequired=1;

  org.apache.hadoop.mapred.TaskAttemptID taskIdOldApi=org.apache.hadoop.mapred.TaskAttemptID.downgrade(taskId);

  Task task=new MapTask("dummyjobfile",taskIdOldApi,0,new TaskSplitIndex(),numSlotsRequired);

  TaskInfo taskInfo=new TaskInfo(0,0,0,0,0);

  MapTaskAttemptInfo taskAttemptInfo=new MapTaskAttemptInfo(State.SUCCEEDED,taskInfo,mapRuntime);

  TaskTrackerAction action=new SimulatorLaunchTaskAction(task,taskAttemptInfo);

  heartbeats.get(mapStart).get(taskTrackerName).addTaskTrackerAction(action);

  if (isKilled) {

    action=new KillTaskAction(taskIdOldApi);

    heartbeats.get(killHeartbeat).get(taskTrackerName).addTaskTrackerAction(action);

  }

  for (long simulationTime=mapStart + heartbeatInterval; simulationTime <= mapEndHeartbeat; simulationTime+=heartbeatInterval) {

    State state=simulationTime < mapEndHeartbeat ? State.RUNNING : State.SUCCEEDED;

    if (simulationTime == mapEndHeartbeat && isKilled) {

      state=State.KILLED;

    }

    MapTaskStatus mapStatus=new MapTaskStatus(task.getTaskID(),0.0f,0,state,"","",null,Phase.MAP,null);

    heartbeats.get(simulationTime).get(taskTrackerName).addTaskReport(mapStatus);

  }

}

Location: MockSimulatorJobTracker.java

Content: 

public void runReduceTask(String taskTrackerName,TaskAttemptID taskId,long reduceStart,long mapDoneDelay,long reduceRuntime,long killHeartbeat){

  long mapDone=nextHeartbeat(reduceStart + mapDoneDelay);

  long reduceDone=mapDone + reduceRuntime;

  long reduceEndHeartbeat=nextHeartbeat(reduceDone);

  final boolean isKilled=(killHeartbeat >= 0);

  if (isKilled) {

    reduceEndHeartbeat=nextHeartbeat(killHeartbeat + 1);

  }

  LOG.debug("reduceStart=" + reduceStart + ", mapDone="+ mapDone+ ", reduceDone="+ reduceDone+ ", reduceEndHeartbeat="+ reduceEndHeartbeat+ ", killHeartbeat="+ killHeartbeat);

  final int numSlotsRequired=1;

  org.apache.hadoop.mapred.TaskAttemptID taskIdOldApi=org.apache.hadoop.mapred.TaskAttemptID.downgrade(taskId);

  Task task=new ReduceTask("dummyjobfile",taskIdOldApi,0,0,numSlotsRequired);

  TaskInfo taskInfo=new TaskInfo(0,0,0,0,0);

  ReduceTaskAttemptInfo taskAttemptInfo=new ReduceTaskAttemptInfo(State.SUCCEEDED,taskInfo,0,0,reduceRuntime);

  TaskTrackerAction action=new SimulatorLaunchTaskAction(task,taskAttemptInfo);

  heartbeats.get(reduceStart).get(taskTrackerName).addTaskTrackerAction(action);

  if (!isKilled || mapDone < killHeartbeat) {

    action=new AllMapsCompletedTaskAction(task.getTaskID());

    heartbeats.get(mapDone).get(taskTrackerName).addTaskTrackerAction(action);

  }

  if (isKilled) {

    action=new KillTaskAction(taskIdOldApi);

    heartbeats.get(killHeartbeat).get(taskTrackerName).addTaskTrackerAction(action);

  }

  for (long simulationTime=reduceStart + heartbeatInterval; simulationTime <= reduceEndHeartbeat; simulationTime+=heartbeatInterval) {

    State state=simulationTime < reduceEndHeartbeat ? State.RUNNING : State.SUCCEEDED;

    if (simulationTime == reduceEndHeartbeat && isKilled) {

      state=State.KILLED;

    }

    Phase phase=simulationTime <= mapDone ? Phase.SHUFFLE : Phase.REDUCE;

    ReduceTaskStatus reduceStatus=new ReduceTaskStatus(task.getTaskID(),0.0f,0,state,"","",null,phase,null);

    heartbeats.get(simulationTime).get(taskTrackerName).addTaskReport(reduceStatus);

  }

}

