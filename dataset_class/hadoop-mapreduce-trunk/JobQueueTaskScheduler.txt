Location: JobQueueTaskScheduler.java

Content: 

@Override public synchronized List<Task> assignTasks(TaskTracker taskTracker) throws IOException {

  TaskTrackerStatus taskTrackerStatus=taskTracker.getStatus();

  ClusterStatus clusterStatus=taskTrackerManager.getClusterStatus();

  final int numTaskTrackers=clusterStatus.getTaskTrackers();

  final int clusterMapCapacity=clusterStatus.getMaxMapTasks();

  final int clusterReduceCapacity=clusterStatus.getMaxReduceTasks();

  Collection<JobInProgress> jobQueue=jobQueueJobInProgressListener.getJobQueue();

  final int trackerMapCapacity=taskTrackerStatus.getMaxMapSlots();

  final int trackerReduceCapacity=taskTrackerStatus.getMaxReduceSlots();

  final int trackerRunningMaps=taskTrackerStatus.countMapTasks();

  final int trackerRunningReduces=taskTrackerStatus.countReduceTasks();

  List<Task> assignedTasks=new ArrayList<Task>();

  int remainingReduceLoad=0;

  int remainingMapLoad=0;

synchronized (jobQueue) {

    for (    JobInProgress job : jobQueue) {

      if (job.getStatus().getRunState() == JobStatus.RUNNING) {

        remainingMapLoad+=(job.desiredMaps() - job.finishedMaps());

        if (job.scheduleReduces()) {

          remainingReduceLoad+=(job.desiredReduces() - job.finishedReduces());

        }

      }

    }

  }

  double mapLoadFactor=0.0;

  if (clusterMapCapacity > 0) {

    mapLoadFactor=(double)remainingMapLoad / clusterMapCapacity;

  }

  double reduceLoadFactor=0.0;

  if (clusterReduceCapacity > 0) {

    reduceLoadFactor=(double)remainingReduceLoad / clusterReduceCapacity;

  }

  final int trackerCurrentMapCapacity=Math.min((int)Math.ceil(mapLoadFactor * trackerMapCapacity),trackerMapCapacity);

  int availableMapSlots=trackerCurrentMapCapacity - trackerRunningMaps;

  boolean exceededMapPadding=false;

  if (availableMapSlots > 0) {

    exceededMapPadding=exceededPadding(true,clusterStatus,trackerMapCapacity);

  }

  int numLocalMaps=0;

  int numNonLocalMaps=0;

  scheduleMaps:   for (int i=0; i < availableMapSlots; ++i) {

synchronized (jobQueue) {

      for (      JobInProgress job : jobQueue) {

        if (job.getStatus().getRunState() != JobStatus.RUNNING) {

          continue;

        }

        Task t=null;

        t=job.obtainNewLocalMapTask(taskTrackerStatus,numTaskTrackers,taskTrackerManager.getNumberOfUniqueHosts());

        if (t != null) {

          assignedTasks.add(t);

          ++numLocalMaps;

          if (exceededMapPadding) {

            break scheduleMaps;

          }

          break;

        }

        t=job.obtainNewNonLocalMapTask(taskTrackerStatus,numTaskTrackers,taskTrackerManager.getNumberOfUniqueHosts());

        if (t != null) {

          assignedTasks.add(t);

          ++numNonLocalMaps;

          break scheduleMaps;

        }

      }

    }

  }

  int assignedMaps=assignedTasks.size();

  final int trackerCurrentReduceCapacity=Math.min((int)Math.ceil(reduceLoadFactor * trackerReduceCapacity),trackerReduceCapacity);

  final int availableReduceSlots=Math.min((trackerCurrentReduceCapacity - trackerRunningReduces),1);

  boolean exceededReducePadding=false;

  if (availableReduceSlots > 0) {

    exceededReducePadding=exceededPadding(false,clusterStatus,trackerReduceCapacity);

synchronized (jobQueue) {

      for (      JobInProgress job : jobQueue) {

        if (job.getStatus().getRunState() != JobStatus.RUNNING || job.numReduceTasks == 0) {

          continue;

        }

        Task t=job.obtainNewReduceTask(taskTrackerStatus,numTaskTrackers,taskTrackerManager.getNumberOfUniqueHosts());

        if (t != null) {

          assignedTasks.add(t);

          break;

        }

        if (exceededReducePadding) {

          break;

        }

      }

    }

  }

  if (LOG.isDebugEnabled()) {

    LOG.debug("Task assignments for " + taskTrackerStatus.getTrackerName() + " --> "+ "["+ mapLoadFactor+ ", "+ trackerMapCapacity+ ", "+ trackerCurrentMapCapacity+ ", "+ trackerRunningMaps+ "] -> ["+ (trackerCurrentMapCapacity - trackerRunningMaps)+ ", "+ assignedMaps+ " ("+ numLocalMaps+ ", "+ numNonLocalMaps+ ")] ["+ reduceLoadFactor+ ", "+ trackerReduceCapacity+ ", "+ trackerCurrentReduceCapacity+ ","+ trackerRunningReduces+ "] -> ["+ (trackerCurrentReduceCapacity - trackerRunningReduces)+ ", "+ (assignedTasks.size() - assignedMaps)+ "]");

  }

  return assignedTasks;

}

Location: JobQueueTaskScheduler.java

Content: 

private boolean exceededPadding(boolean isMapTask,ClusterStatus clusterStatus,int maxTaskTrackerSlots){

  int numTaskTrackers=clusterStatus.getTaskTrackers();

  int totalTasks=(isMapTask) ? clusterStatus.getMapTasks() : clusterStatus.getReduceTasks();

  int totalTaskCapacity=isMapTask ? clusterStatus.getMaxMapTasks() : clusterStatus.getMaxReduceTasks();

  Collection<JobInProgress> jobQueue=jobQueueJobInProgressListener.getJobQueue();

  boolean exceededPadding=false;

synchronized (jobQueue) {

    int totalNeededTasks=0;

    for (    JobInProgress job : jobQueue) {

      if (job.getStatus().getRunState() != JobStatus.RUNNING || job.numReduceTasks == 0) {

        continue;

      }

      totalNeededTasks+=isMapTask ? job.desiredMaps() : job.desiredReduces();

      int padding=0;

      if (numTaskTrackers > MIN_CLUSTER_SIZE_FOR_PADDING) {

        padding=Math.min(maxTaskTrackerSlots,(int)(totalNeededTasks * padFraction));

      }

      if (totalTasks + padding >= totalTaskCapacity) {

        exceededPadding=true;

        break;

      }

    }

  }

  return exceededPadding;

}

Location: JobQueueTaskScheduler.java

Content: 

@Override public synchronized Collection<JobInProgress> getJobs(String queueName){

  return jobQueueJobInProgressListener.getJobQueue();

}

Location: JobQueueTaskScheduler.java

Content: 

public JobQueueTaskScheduler(){

  this.jobQueueJobInProgressListener=new JobQueueJobInProgressListener();

}

Location: JobQueueTaskScheduler.java

Content: 

@Override public synchronized void terminate() throws IOException {

  if (jobQueueJobInProgressListener != null) {

    taskTrackerManager.removeJobInProgressListener(jobQueueJobInProgressListener);

  }

  if (eagerTaskInitializationListener != null) {

    taskTrackerManager.removeJobInProgressListener(eagerTaskInitializationListener);

    eagerTaskInitializationListener.terminate();

  }

  super.terminate();

}

