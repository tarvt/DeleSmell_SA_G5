Location: JobInfo.java

Content: 

/** 

 * Gets the number of maps that are finished. <br/>

 * @return the number of finished maps.

 */

int finishedMaps();

Location: JobInfo.java

Content: 

/** 

 * Gets the number of reduces that are finished. <br/>

 * @return the number of finished reduces.

 */

int finishedReduces();

Location: JobInfo.java

Content: 

/** 

 * Gets list of blacklisted trackers for the particular job. <br/>

 * @return list of blacklisted tracker name.

 */

List<String> getBlackListedTrackers();

Location: JobInfo.java

Content: 

/** 

 * Gets the history location of the job.<br/>

 * @return the path to the history file.

 */

String getHistoryUrl();

Location: JobInfo.java

Content: 

/** 

 * Gets the JobId of the job.<br/>

 * @return id of the job.

 */

JobID getID();

Location: JobInfo.java

Content: 

/** 

 * Get the job submission directory

 */

public Path getJobSubmitDir(){

  return this.jobSubmitDir;

}

Location: JobInfo.java

Content: 

/** 

 * Gets the current status of the job.<br/>

 * @return status.

 */

JobStatus getStatus();

Location: JobInfo.java

Content: 

/** 

 * Gets if cleanup for the job has been launched.<br/>

 * @return true if cleanup task has been launched.

 */

boolean isCleanupLaunched();

Location: JobInfo.java

Content: 

/** 

 * Gets if the history file of the job is copied to the done  location <br/>

 * @return true if history file copied.

 */

boolean isHistoryFileCopied();

Location: JobInfo.java

Content: 

/** 

 * Gets if the setup for the job has been completed.<br/>

 * @return true if the setup task for the job has completed.

 */

boolean isSetupFinished();

Location: JobInfo.java

Content: 

/** 

 * Gets if the setup for the job has been launched.<br/>

 * @return true if setup task has been launched.

 */

boolean isSetupLaunched();

Location: JobInfo.java

Content: 

public JobInfo(){

}

Location: JobInfo.java

Content: 

public JobInfo(org.apache.hadoop.mapreduce.JobID id,Text user,Path jobSubmitDir){

  this.id=id;

  this.user=user;

  this.jobSubmitDir=jobSubmitDir;

}

Location: JobInfo.java

Content: 

/** 

 * Gets the number of map tasks that are to be spawned for the job <br/>

 * @return

 */

int numMaps();

Location: JobInfo.java

Content: 

/** 

 * Gets the number of reduce tasks that are to be spawned for the job <br/>

 * @return

 */

int numReduces();

Location: JobInfo.java

Content: 

/** 

 * Gets the number of maps which are currently running for the job. <br/>

 * @return number of running for the job.

 */

int runningMaps();

Location: JobInfo.java

Content: 

/** 

 * Gets the number of reduces currently running for the job. <br/>

 * @return number of reduces running for the job.

 */

int runningReduces();

Location: JobInfo.java

Content: 

/** 

 * Gets the number of maps to be scheduled for the job. <br/>

 * @return number of waiting maps.

 */

int waitingMaps();

Location: JobInfo.java

Content: 

/** 

 * Gets the number of reduces to be scheduled for the job. <br/>

 * @return number of waiting reduces.

 */

int waitingReduces();

