Location: TestMapReduce.java

Content: 

private static boolean isSequenceFile(FileSystem fs,Path f) throws IOException {

  DataInputStream in=fs.open(f);

  byte[] seq="SEQ".getBytes();

  for (int i=0; i < seq.length; ++i) {

    if (seq[i] != in.read()) {

      return false;

    }

  }

  return true;

}

Location: TestMapReduce.java

Content: 

private static void printFiles(Path dir,Configuration conf) throws IOException {

  FileSystem fs=dir.getFileSystem(conf);

  for (  FileStatus f : fs.listStatus(dir)) {

    System.out.println("Reading " + f.getPath() + ": ");

    if (f.isDirectory()) {

      System.out.println("  it is a map file.");

      printSequenceFile(fs,new Path(f.getPath(),"data"),conf);

    }

 else     if (isSequenceFile(fs,f.getPath())) {

      System.out.println("  it is a sequence file.");

      printSequenceFile(fs,f.getPath(),conf);

    }

 else {

      System.out.println("  it is a text file.");

      printTextFile(fs,f.getPath());

    }

  }

}

Location: TestMapReduce.java

Content: 

private static void printSequenceFile(FileSystem fs,Path p,Configuration conf) throws IOException {

  SequenceFile.Reader r=new SequenceFile.Reader(fs,p,conf);

  Object key=null;

  Object value=null;

  while ((key=r.next(key)) != null) {

    value=r.getCurrentValue(value);

    System.out.println("  Row: " + key + ", "+ value);

  }

  r.close();

}

Location: TestMapReduce.java

Content: 

private static void printTextFile(FileSystem fs,Path p) throws IOException {

  BufferedReader in=new BufferedReader(new InputStreamReader(fs.open(p)));

  String line;

  while ((line=in.readLine()) != null) {

    System.out.println("  Row: " + line);

  }

  in.close();

}

