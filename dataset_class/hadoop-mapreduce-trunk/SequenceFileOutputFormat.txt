Location: SequenceFileOutputFormat.java

Content: 

/** 

 * Get the  {@link CompressionType} for the output {@link SequenceFile}.

 * @param conf the {@link JobConf}

 * @return the {@link CompressionType} for the output {@link SequenceFile},  defaulting to  {@link CompressionType#RECORD}

 */

public static CompressionType getOutputCompressionType(JobConf conf){

  String val=conf.get(org.apache.hadoop.mapreduce.lib.output.FileOutputFormat.COMPRESS_TYPE,CompressionType.RECORD.toString());

  return CompressionType.valueOf(val);

}

Location: SequenceFileOutputFormat.java

Content: 

/** 

 * Get the  {@link CompressionType} for the output {@link SequenceFile}.

 * @param job the {@link Job}

 * @return the {@link CompressionType} for the output {@link SequenceFile},  defaulting to  {@link CompressionType#RECORD}

 */

public static CompressionType getOutputCompressionType(JobContext job){

  String val=job.getConfiguration().get(FileOutputFormat.COMPRESS_TYPE,CompressionType.RECORD.toString());

  return CompressionType.valueOf(val);

}

Location: SequenceFileOutputFormat.java

Content: 

/** 

 * Open the output generated by this format. 

 */

public static SequenceFile.Reader[] getReaders(Configuration conf,Path dir) throws IOException {

  FileSystem fs=dir.getFileSystem(conf);

  Path[] names=FileUtil.stat2Paths(fs.listStatus(dir));

  Arrays.sort(names);

  SequenceFile.Reader[] parts=new SequenceFile.Reader[names.length];

  for (int i=0; i < names.length; i++) {

    parts[i]=new SequenceFile.Reader(fs,names[i],conf);

  }

  return parts;

}

Location: SequenceFileOutputFormat.java

Content: 

protected SequenceFile.Writer getSequenceWriter(TaskAttemptContext context,Class<?> keyClass,Class<?> valueClass) throws IOException {

  Configuration conf=context.getConfiguration();

  CompressionCodec codec=null;

  CompressionType compressionType=CompressionType.NONE;

  if (getCompressOutput(context)) {

    compressionType=getOutputCompressionType(context);

    Class<?> codecClass=getOutputCompressorClass(context,DefaultCodec.class);

    codec=(CompressionCodec)ReflectionUtils.newInstance(codecClass,conf);

  }

  Path file=getDefaultWorkFile(context,"");

  FileSystem fs=file.getFileSystem(conf);

  return SequenceFile.createWriter(fs,conf,file,keyClass,valueClass,compressionType,codec,context);

}

Location: SequenceFileOutputFormat.java

Content: 

/** 

 * Set the  {@link CompressionType} for the output {@link SequenceFile}.

 * @param job the {@link Job} to modify

 * @param style the {@link CompressionType} for the output{@link SequenceFile} 

 */

public static void setOutputCompressionType(Job job,CompressionType style){

  setCompressOutput(job,true);

  job.getConfiguration().set(FileOutputFormat.COMPRESS_TYPE,style.toString());

}

Location: SequenceFileOutputFormat.java

Content: 

/** 

 * Set the  {@link CompressionType} for the output {@link SequenceFile}.

 * @param conf the {@link JobConf} to modify

 * @param style the {@link CompressionType} for the output{@link SequenceFile} 

 */

public static void setOutputCompressionType(JobConf conf,CompressionType style){

  setCompressOutput(conf,true);

  conf.set(org.apache.hadoop.mapreduce.lib.output.FileOutputFormat.COMPRESS_TYPE,style.toString());

}

