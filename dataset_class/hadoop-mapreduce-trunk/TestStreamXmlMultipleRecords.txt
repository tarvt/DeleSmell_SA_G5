Location: TestStreamXmlMultipleRecords.java

Content: 

/** 

 * Tests if StreamXmlRecordReader will read the next record, _after_ the end of a split if the split falls before the end of end-tag of a record. Tests with slowmatch=false.

 * @throws Exception

 */

@Test public void testStreamXmlMultiInnerFast() throws Exception {

  if (hasPerl) {

    blockSize=60;

    isSlowMatch="false";

    super.testCommandLine();

  }

 else {

    LOG.warn("No perl; skipping test.");

  }

}

Location: TestStreamXmlMultipleRecords.java

Content: 

/** 

 * Tests if StreamXmlRecordReader will read the next record, _after_ the end of a split if the split falls before the end of end-tag of a record. Tests with slowmatch=true.

 * @throws Exception

 */

@Test public void testStreamXmlMultiInnerSlow() throws Exception {

  if (hasPerl) {

    blockSize=60;

    isSlowMatch="true";

    super.testCommandLine();

  }

 else {

    LOG.warn("No perl; skipping test.");

  }

}

Location: TestStreamXmlMultipleRecords.java

Content: 

/** 

 * Tests if StreamXmlRecordReader will read a record twice if end of a split is after few characters after the end-tag of a record but before the begin-tag of next record. Tests with slowmatch=false.

 * @throws Exception

 */

@Test public void testStreamXmlMultiOuterFast() throws Exception {

  if (hasPerl) {

    blockSize=80;

    isSlowMatch="false";

    super.testCommandLine();

  }

 else {

    LOG.warn("No perl; skipping test.");

  }

}

Location: TestStreamXmlMultipleRecords.java

Content: 

/** 

 * Tests if StreamXmlRecordReader will read a record twice if end of a split is after few characters after the end-tag of a record but before the begin-tag of next record. Tests with slowmatch=true.

 * @throws Exception

 */

@Test public void testStreamXmlMultiOuterSlow() throws Exception {

  if (hasPerl) {

    blockSize=80;

    isSlowMatch="true";

    super.testCommandLine();

  }

 else {

    LOG.warn("No perl; skipping test.");

  }

}

Location: TestStreamXmlMultipleRecords.java

Content: 

public TestStreamXmlMultipleRecords() throws IOException {

  super();

  input="<line>This is a single line,\nand it is containing multiple" + " words.</line>                     <line>Only is appears more than" + " once.</line>\n";

  outputExpect="is\t3\n";

  map=myPerlMapper;

  reduce=myPerlReducer;

  hasPerl=UtilTest.hasPerlSupport();

}

