Location: TaskReport.java

Content: 

static TaskReport[] downgradeArray(org.apache.hadoop.mapreduce.TaskReport[] reports){

  List<TaskReport> ret=new ArrayList<TaskReport>();

  for (  org.apache.hadoop.mapreduce.TaskReport report : reports) {

    ret.add(downgrade(report));

  }

  return ret.toArray(new TaskReport[0]);

}

Location: TaskReport.java

Content: 

/** 

 * The current status 

 */

public TIPStatus getCurrentStatus(){

  return currentStatus;

}

Location: TaskReport.java

Content: 

/** 

 * A list of error messages. 

 */

public String[] getDiagnostics(){

  return diagnostics;

}

Location: TaskReport.java

Content: 

/** 

 * Get the running task attempt IDs for this task

 */

public Collection<TaskAttemptID> getRunningTaskAttemptIds(){

  return runningAttempts;

}

Location: TaskReport.java

Content: 

/** 

 * Get the running task attempt IDs for this task

 */

public Collection<TaskAttemptID> getRunningTaskAttempts(){

  Collection<TaskAttemptID> attempts=new ArrayList<TaskAttemptID>();

  for (  org.apache.hadoop.mapreduce.TaskAttemptID id : super.getRunningTaskAttemptIds()) {

    attempts.add(TaskAttemptID.downgrade(id));

  }

  return attempts;

}

Location: TaskReport.java

Content: 

/** 

 * Get the attempt ID that took this task to completion

 */

public TaskAttemptID getSuccessfulTaskAttempt(){

  return TaskAttemptID.downgrade(super.getSuccessfulTaskAttemptId());

}

Location: TaskReport.java

Content: 

/** 

 * Get the attempt ID that took this task to completion

 */

public TaskAttemptID getSuccessfulTaskAttemptId(){

  return successfulAttempt;

}

Location: TaskReport.java

Content: 

/** 

 * A table of counters. 

 */

public Counters getTaskCounters(){

  return counters;

}

Location: TaskReport.java

Content: 

/** 

 * set running attempt(s) of the task. 

 */

protected void setRunningTaskAttemptIds(Collection<TaskAttemptID> runningAttempts){

  this.runningAttempts=runningAttempts;

}

Location: TaskReport.java

Content: 

/** 

 * set running attempt(s) of the task. 

 */

public void setRunningTaskAttempts(Collection<TaskAttemptID> runningAttempts){

  Collection<org.apache.hadoop.mapreduce.TaskAttemptID> attempts=new ArrayList<org.apache.hadoop.mapreduce.TaskAttemptID>();

  for (  TaskAttemptID id : runningAttempts) {

    attempts.add(id);

  }

  super.setRunningTaskAttemptIds(attempts);

}

Location: TaskReport.java

Content: 

/** 

 * set successful attempt ID of the task. 

 */

protected void setSuccessfulAttemptId(TaskAttemptID t){

  successfulAttempt=t;

}

Location: TaskReport.java

Content: 

/** 

 * set successful attempt ID of the task. 

 */

public void setSuccessfulAttempt(TaskAttemptID t){

  super.setSuccessfulAttemptId(t);

}

Location: TaskReport.java

Content: 

public TaskReport(){

  taskid=new TaskID();

}

Location: TaskReport.java

Content: 

/** 

 * Creates a new TaskReport object

 * @param taskid

 * @param progress

 * @param state

 * @param diagnostics

 * @param startTime

 * @param finishTime

 * @param counters

 * @deprecated

 */

@Deprecated TaskReport(TaskID taskid,float progress,String state,String[] diagnostics,long startTime,long finishTime,Counters counters){

  this(taskid,progress,state,diagnostics,null,startTime,finishTime,counters);

}

Location: TaskReport.java

Content: 

/** 

 * Creates a new TaskReport object

 * @param taskid

 * @param progress

 * @param state

 * @param diagnostics

 * @param currentStatus

 * @param startTime

 * @param finishTime

 * @param counters

 */

public TaskReport(TaskID taskid,float progress,String state,String[] diagnostics,TIPStatus currentStatus,long startTime,long finishTime,Counters counters){

  this.taskid=taskid;

  this.progress=progress;

  this.state=state;

  this.diagnostics=diagnostics;

  this.currentStatus=currentStatus;

  this.startTime=startTime;

  this.finishTime=finishTime;

  this.counters=counters;

}

