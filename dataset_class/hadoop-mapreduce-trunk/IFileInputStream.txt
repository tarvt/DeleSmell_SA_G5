Location: IFileInputStream.java

Content: 

void disableChecksumValidation(){

  disableChecksumValidation=true;

}

Location: IFileInputStream.java

Content: 

private int doRead(byte[] b,int off,int len) throws IOException {

  if (currentOffset + len > dataLength) {

    len=(int)dataLength - (int)currentOffset;

  }

  int bytesRead=in.read(b,off,len);

  if (bytesRead < 0) {

    throw new ChecksumException("Checksum Error",0);

  }

  sum.update(b,off,bytesRead);

  currentOffset+=bytesRead;

  if (disableChecksumValidation) {

    return bytesRead;

  }

  if (currentOffset == dataLength) {

    csum=new byte[checksumSize];

    IOUtils.readFully(in,csum,0,checksumSize);

    if (!sum.compare(csum,0)) {

      throw new ChecksumException("Checksum Error",0);

    }

  }

  return bytesRead;

}

Location: IFileInputStream.java

Content: 

public byte[] getChecksum(){

  return csum;

}

Location: IFileInputStream.java

Content: 

/** 

 * Create a checksum input stream that reads

 * @param in The input stream to be verified for checksum.

 * @param len The length of the input stream including checksum bytes.

 */

public IFileInputStream(InputStream in,long len){

  this.in=in;

  sum=DataChecksum.newDataChecksum(DataChecksum.CHECKSUM_CRC32,Integer.MAX_VALUE);

  checksumSize=sum.getChecksumSize();

  length=len;

  dataLength=length - checksumSize;

}

Location: IFileInputStream.java

Content: 

/** 

 * Read bytes from the stream. At EOF, checksum is validated and sent back as the last four bytes of the buffer. The caller should handle these bytes appropriately

 */

public int readWithChecksum(byte[] b,int off,int len) throws IOException {

  if (currentOffset == length) {

    return -1;

  }

 else   if (currentOffset >= dataLength) {

    int lenToCopy=(int)(checksumSize - (currentOffset - dataLength));

    if (len < lenToCopy) {

      lenToCopy=len;

    }

    System.arraycopy(csum,(int)(currentOffset - dataLength),b,off,lenToCopy);

    currentOffset+=lenToCopy;

    return lenToCopy;

  }

  int bytesRead=doRead(b,off,len);

  if (currentOffset == dataLength) {

    if (len >= bytesRead + checksumSize) {

      System.arraycopy(csum,0,b,off + bytesRead,checksumSize);

      bytesRead+=checksumSize;

      currentOffset+=checksumSize;

    }

  }

  return bytesRead;

}

Location: IFileInputStream.java

Content: 

@Override public long skip(long n) throws IOException {

  throw new IOException("Skip not supported for IFileInputStream");

}

