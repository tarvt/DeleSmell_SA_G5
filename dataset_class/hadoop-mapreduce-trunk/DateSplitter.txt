Location: DateSplitter.java

Content: 

/** 

 * Parse the long-valued timestamp into the appropriate SQL date type. 

 */

private Date longToDate(long val,int sqlDataType){

switch (sqlDataType) {

case Types.DATE:

    return new java.sql.Date(val);

case Types.TIME:

  return new java.sql.Time(val);

case Types.TIMESTAMP:

return new java.sql.Timestamp(val);

default :

return null;

}

}

Location: DateSplitter.java

Content: 

/** 

 * Retrieve the value from the column in a type-appropriate manner and return its timestamp since the epoch. If the column is null, then return Long.MIN_VALUE. This will cause a special split to be generated for the NULL case, but may also cause poorly-balanced splits if most of the actual dates are positive time since the epoch, etc.

 */

private long resultSetColToLong(ResultSet rs,int colNum,int sqlDataType) throws SQLException {

  try {

switch (sqlDataType) {

case Types.DATE:

      return rs.getDate(colNum).getTime();

case Types.TIME:

    return rs.getTime(colNum).getTime();

case Types.TIMESTAMP:

  return rs.getTimestamp(colNum).getTime();

default :

throw new SQLException("Not a date-type field");

}

}

 catch (NullPointerException npe) {

LOG.warn("Encountered a NULL date in the split column. Splits may be poorly balanced.");

return Long.MIN_VALUE;

}

}

