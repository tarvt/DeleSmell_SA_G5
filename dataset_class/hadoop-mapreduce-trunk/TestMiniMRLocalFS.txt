Location: TestMiniMRLocalFS.java

Content: 

private void runCustomFormats(MiniMRCluster mr) throws IOException {

  JobConf job=mr.createJobConf();

  FileSystem fileSys=FileSystem.get(job);

  Path testDir=new Path(TEST_ROOT_DIR + "/test_mini_mr_local");

  Path outDir=new Path(testDir,"out");

  System.out.println("testDir= " + testDir);

  fileSys.delete(testDir,true);

  job.setInputFormat(MyInputFormat.class);

  job.setOutputFormat(MyOutputFormat.class);

  job.setOutputKeyClass(Text.class);

  job.setOutputValueClass(IntWritable.class);

  job.setMapperClass(MyMapper.class);

  job.setReducerClass(MyReducer.class);

  job.setNumMapTasks(100);

  job.setNumReduceTasks(1);

  job.set("non.std.out",outDir.toString());

  try {

    JobClient.runJob(job);

    String result=MapReduceTestUtil.readOutput(outDir,job);

    assertEquals("output",("aunt annie\t1\n" + "bumble boat\t4\n" + "crocodile pants\t0\n"+ "duck-dog\t5\n"+ "eggs\t2\n"+ "finagle the agent\t3\n"),result);

  }

  finally {

    fileSys.delete(testDir,true);

  }

}

Location: TestMiniMRLocalFS.java

Content: 

private void runSecondarySort(Configuration conf) throws IOException, InterruptedException, ClassNotFoundException {

  FileSystem localFs=FileSystem.getLocal(conf);

  localFs.delete(new Path(TEST_ROOT_DIR + "/in"),true);

  localFs.delete(new Path(TEST_ROOT_DIR + "/out"),true);

  TestMapReduceLocal.writeFile("in/part1","-1 -4\n-3 23\n5 10\n-1 -2\n-1 300\n-1 10\n4 1\n" + "4 2\n4 10\n4 -1\n4 -10\n10 20\n10 30\n10 25\n");

  Job job=Job.getInstance(conf,"word count");

  job.setJarByClass(WordCount.class);

  job.setNumReduceTasks(2);

  job.setMapperClass(SecondarySort.MapClass.class);

  job.setReducerClass(SecondarySort.Reduce.class);

  job.setPartitionerClass(FirstPartitioner.class);

  job.setGroupingComparatorClass(FirstGroupingComparator.class);

  job.setMapOutputKeyClass(IntPair.class);

  job.setMapOutputValueClass(IntWritable.class);

  job.setOutputKeyClass(Text.class);

  job.setOutputValueClass(IntWritable.class);

  FileInputFormat.addInputPath(job,new Path(TEST_ROOT_DIR + "/in"));

  FileOutputFormat.setOutputPath(job,new Path(TEST_ROOT_DIR + "/out"));

  assertTrue(job.waitForCompletion(true));

  String out=TestMapReduceLocal.readFile("out/part-r-00000");

  assertEquals("------------------------------------------------\n" + "4\t-10\n4\t-1\n4\t1\n4\t2\n4\t10\n" + "------------------------------------------------\n"+ "10\t20\n10\t25\n10\t30\n",out);

  out=TestMapReduceLocal.readFile("out/part-r-00001");

  assertEquals("------------------------------------------------\n" + "-3\t23\n" + "------------------------------------------------\n"+ "-1\t-4\n-1\t-2\n-1\t10\n-1\t300\n"+ "------------------------------------------------\n"+ "5\t10\n",out);

}

