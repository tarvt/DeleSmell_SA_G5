Location: ParsedConfigFile.java

Content: 

private int maybeGetIntValue(String propName,String attr,String value,int oldValue){

  if (propName.equals(attr) && value != null) {

    try {

      return Integer.parseInt(value);

    }

 catch (    NumberFormatException e) {

      return oldValue;

    }

  }

  return oldValue;

}

Location: ParsedConfigFile.java

Content: 

@SuppressWarnings("hiding") @Deprecated ParsedConfigFile(String filenameLine,String xmlString){

  super();

  int heapMegabytes=-1;

  String queue=null;

  String jobName=null;

  int clusterMapMB=-1;

  int clusterReduceMB=-1;

  int jobMapMB=-1;

  int jobReduceMB=-1;

  String jobID=null;

  boolean valid=true;

  Matcher jobIDMatcher=jobIDPattern.matcher(filenameLine);

  if (jobIDMatcher.find()) {

    jobID=jobIDMatcher.group(1);

  }

  try {

    InputStream is=new ByteArrayInputStream(xmlString.getBytes());

    DocumentBuilderFactory dbf=DocumentBuilderFactory.newInstance();

    DocumentBuilder db=dbf.newDocumentBuilder();

    Document doc=db.parse(is);

    Element root=doc.getDocumentElement();

    if (!"configuration".equals(root.getTagName())) {

      System.out.print("root is not a configuration node");

      valid=false;

    }

    NodeList props=root.getChildNodes();

    for (int i=0; i < props.getLength(); ++i) {

      Node propNode=props.item(i);

      if (!(propNode instanceof Element))       continue;

      Element prop=(Element)propNode;

      if (!"property".equals(prop.getTagName())) {

        System.out.print("bad conf file: element not <property>");

      }

      NodeList fields=prop.getChildNodes();

      String attr=null;

      String value=null;

      @SuppressWarnings("unused") boolean finalParameter=false;

      for (int j=0; j < fields.getLength(); j++) {

        Node fieldNode=fields.item(j);

        if (!(fieldNode instanceof Element)) {

          continue;

        }

        Element field=(Element)fieldNode;

        if ("name".equals(field.getTagName()) && field.hasChildNodes()) {

          attr=((Text)field.getFirstChild()).getData().trim();

        }

        if ("value".equals(field.getTagName()) && field.hasChildNodes()) {

          value=((Text)field.getFirstChild()).getData();

        }

        if ("final".equals(field.getTagName()) && field.hasChildNodes()) {

          finalParameter="true".equals(((Text)field.getFirstChild()).getData());

        }

      }

      properties.setProperty(attr,value);

      if ("mapred.child.java.opts".equals(attr) && value != null) {

        Matcher matcher=heapPattern.matcher(value);

        if (matcher.find()) {

          String heapSize=matcher.group(1);

          heapMegabytes=Integer.parseInt(heapSize);

          if (matcher.group(2).equalsIgnoreCase("G")) {

            heapMegabytes*=1024;

          }

        }

      }

      if (MRJobConfig.QUEUE_NAME.equals(attr) && value != null) {

        queue=value;

      }

      if (MRJobConfig.JOB_NAME.equals(attr) && value != null) {

        jobName=value;

      }

      clusterMapMB=maybeGetIntValue(MRConfig.MAPMEMORY_MB,attr,value,clusterMapMB);

      clusterReduceMB=maybeGetIntValue(MRConfig.REDUCEMEMORY_MB,attr,value,clusterReduceMB);

      jobMapMB=maybeGetIntValue(MRJobConfig.MAP_MEMORY_MB,attr,value,jobMapMB);

      jobReduceMB=maybeGetIntValue(MRJobConfig.REDUCE_MEMORY_MB,attr,value,jobReduceMB);

    }

    valid=true;

  }

 catch (  ParserConfigurationException e) {

    valid=false;

  }

catch (  SAXException e) {

    valid=false;

  }

catch (  IOException e) {

    valid=false;

  }

  this.heapMegabytes=heapMegabytes;

  this.queue=queue;

  this.jobName=jobName;

  this.clusterMapMB=clusterMapMB;

  this.clusterReduceMB=clusterReduceMB;

  this.jobMapMB=jobMapMB;

  this.jobReduceMB=jobReduceMB;

  this.jobID=jobID;

  this.valid=valid;

}

