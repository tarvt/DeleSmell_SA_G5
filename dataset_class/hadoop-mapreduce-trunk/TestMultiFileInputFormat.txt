Location: TestMultiFileInputFormat.java

Content: 

private Path initFiles(FileSystem fs,int numFiles,int numBytes) throws IOException {

  Path dir=new Path(System.getProperty("test.build.data",".") + "/mapred");

  Path multiFileDir=new Path(dir,"test.multifile");

  fs.delete(multiFileDir,true);

  fs.mkdirs(multiFileDir);

  LOG.info("Creating " + numFiles + " file(s) in "+ multiFileDir);

  for (int i=0; i < numFiles; i++) {

    Path path=new Path(multiFileDir,"file_" + i);

    FSDataOutputStream out=fs.create(path);

    if (numBytes == -1) {

      numBytes=rand.nextInt(MAX_BYTES);

    }

    for (int j=0; j < numBytes; j++) {

      out.write(rand.nextInt());

    }

    out.close();

    if (LOG.isDebugEnabled()) {

      LOG.debug("Created file " + path + " with length "+ numBytes);

    }

    lengths.put(path.getName(),new Long(numBytes));

  }

  FileInputFormat.setInputPaths(job,multiFileDir);

  return multiFileDir;

}

Location: TestMultiFileInputFormat.java

Content: 

public void testFormatWithLessPathsThanSplits() throws Exception {

  MultiFileInputFormat<Text,Text> format=new DummyMultiFileInputFormat();

  FileSystem fs=FileSystem.getLocal(job);

  initFiles(fs,0,-1);

  assertEquals(0,format.getSplits(job,2).length);

  initFiles(fs,2,500);

  assertEquals(2,format.getSplits(job,4).length);

}

