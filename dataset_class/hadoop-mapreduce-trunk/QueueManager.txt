Location: QueueManager.java

Content: 

/** 

 * method to perform depth-first search and write the parameters of every  queue in JSON format.

 * @param dumpGenerator JsonGenerator object which takes the dump and flushesto a writer object

 * @param rootQueues the top-level queues

 * @throws JsonGenerationException

 * @throws IOException

 */

private static void dumpConfiguration(JsonGenerator dumpGenerator,Set<Queue> rootQueues) throws JsonGenerationException, IOException {

  for (  Queue queue : rootQueues) {

    dumpGenerator.writeStartObject();

    dumpGenerator.writeStringField("name",queue.getName());

    dumpGenerator.writeStringField("state",queue.getState().toString());

    AccessControlList submitJobList=null;

    AccessControlList administerJobsList=null;

    if (queue.getAcls() != null) {

      submitJobList=queue.getAcls().get(toFullPropertyName(queue.getName(),QueueACL.SUBMIT_JOB.getAclName()));

      administerJobsList=queue.getAcls().get(toFullPropertyName(queue.getName(),QueueACL.ADMINISTER_JOBS.getAclName()));

    }

    String aclsSubmitJobValue=" ";

    if (submitJobList != null) {

      aclsSubmitJobValue=submitJobList.getAclString();

    }

    dumpGenerator.writeStringField("acl_submit_job",aclsSubmitJobValue);

    String aclsAdministerValue=" ";

    if (administerJobsList != null) {

      aclsAdministerValue=administerJobsList.getAclString();

    }

    dumpGenerator.writeStringField("acl_administer_jobs",aclsAdministerValue);

    dumpGenerator.writeFieldName("properties");

    dumpGenerator.writeStartArray();

    if (queue.getProperties() != null) {

      for (      Map.Entry<Object,Object> property : queue.getProperties().entrySet()) {

        dumpGenerator.writeStartObject();

        dumpGenerator.writeStringField("key",(String)property.getKey());

        dumpGenerator.writeStringField("value",(String)property.getValue());

        dumpGenerator.writeEndObject();

      }

    }

    dumpGenerator.writeEndArray();

    Set<Queue> childQueues=queue.getChildren();

    dumpGenerator.writeFieldName("children");

    dumpGenerator.writeStartArray();

    if (childQueues != null && childQueues.size() > 0) {

      dumpConfiguration(dumpGenerator,childQueues);

    }

    dumpGenerator.writeEndArray();

    dumpGenerator.writeEndObject();

  }

}

Location: QueueManager.java

Content: 

/** 

 * Dumps the configuration of hierarchy of queues

 * @param out the writer object to which dump is written

 * @throws IOException

 */

static void dumpConfiguration(Writer out,Configuration conf) throws IOException {

  dumpConfiguration(out,null,conf);

}

Location: QueueManager.java

Content: 

/** 

 * Dumps the configuration of hierarchy of queues with  the xml file path given. It is to be used directly ONLY FOR TESTING.

 * @param out the writer object to which dump is written to.

 * @param configFile the filename of xml file

 * @throws IOException

 */

static void dumpConfiguration(Writer out,String configFile,Configuration conf) throws IOException {

  if (conf != null && conf.get(DeprecatedQueueConfigurationParser.MAPRED_QUEUE_NAMES_KEY) != null) {

    return;

  }

  JsonFactory dumpFactory=new JsonFactory();

  JsonGenerator dumpGenerator=dumpFactory.createJsonGenerator(out);

  QueueConfigurationParser parser;

  boolean aclsEnabled=false;

  if (conf != null) {

    aclsEnabled=conf.getBoolean(MRConfig.MR_ACLS_ENABLED,false);

  }

  if (configFile != null && !"".equals(configFile)) {

    parser=new QueueConfigurationParser(configFile,aclsEnabled);

  }

 else {

    parser=getQueueConfigurationParser(null,false,aclsEnabled);

  }

  dumpGenerator.writeStartObject();

  dumpGenerator.writeFieldName("queues");

  dumpGenerator.writeStartArray();

  dumpConfiguration(dumpGenerator,parser.getRoot().getChildren());

  dumpGenerator.writeEndArray();

  dumpGenerator.writeEndObject();

  dumpGenerator.flush();

}

Location: QueueManager.java

Content: 

/** 

 * JobQueueInfo for all the queues. <p/> Contribs can use this data structure to either create a hierarchy or for traversing. They can also use this to refresh properties in case of refreshQueues

 * @return a map for easy navigation.

 */

synchronized Map<String,JobQueueInfo> getJobQueueInfoMapping(){

  Map<String,JobQueueInfo> m=new HashMap<String,JobQueueInfo>();

  for (  String key : allQueues.keySet()) {

    m.put(key,allQueues.get(key).getJobQueueInfo());

  }

  return m;

}

Location: QueueManager.java

Content: 

/** 

 * Return an array of  {@link JobQueueInfo} objects for all thequeues configurated in the system.

 * @return array of JobQueueInfo objects.

 */

synchronized JobQueueInfo[] getJobQueueInfos(){

  ArrayList<JobQueueInfo> queueInfoList=new ArrayList<JobQueueInfo>();

  for (  String queue : allQueues.keySet()) {

    JobQueueInfo queueInfo=getJobQueueInfo(queue);

    if (queueInfo != null) {

      queueInfoList.add(queueInfo);

    }

  }

  return queueInfoList.toArray(new JobQueueInfo[queueInfoList.size()]);

}

Location: QueueManager.java

Content: 

/** 

 * Return  {@link JobQueueInfo} for a given queue.

 * @param queue name of the queue

 * @return JobQueueInfo for the queue, null if the queue is not found.

 */

synchronized JobQueueInfo getJobQueueInfo(String queue){

  if (allQueues.containsKey(queue)) {

    return allQueues.get(queue).getJobQueueInfo();

  }

  return null;

}

Location: QueueManager.java

Content: 

/** 

 * Return the set of leaf level queues configured in the system to which jobs are submitted. <p/> The number of queues configured should be dependent on the Scheduler configured. Note that some schedulers work with only one queue, whereas others can support multiple queues.

 * @return Set of queue names.

 */

public synchronized Set<String> getLeafQueueNames(){

  return leafQueues.keySet();

}

Location: QueueManager.java

Content: 

/** 

 * Generates the array of QueueAclsInfo object. <p/> The array consists of only those queues for which user has acls.

 * @return QueueAclsInfo[]

 * @throws java.io.IOException

 */

synchronized QueueAclsInfo[] getQueueAcls(UserGroupInformation ugi) throws IOException {

  ArrayList<QueueAclsInfo> queueAclsInfolist=new ArrayList<QueueAclsInfo>();

  QueueACL[] qAcls=QueueACL.values();

  for (  String queueName : leafQueues.keySet()) {

    QueueAclsInfo queueAclsInfo=null;

    ArrayList<String> operationsAllowed=null;

    for (    QueueACL qAcl : qAcls) {

      if (hasAccess(queueName,qAcl,ugi)) {

        if (operationsAllowed == null) {

          operationsAllowed=new ArrayList<String>();

        }

        operationsAllowed.add(qAcl.getAclName());

      }

    }

    if (operationsAllowed != null) {

      queueAclsInfo=new QueueAclsInfo(queueName,operationsAllowed.toArray(new String[operationsAllowed.size()]));

      queueAclsInfolist.add(queueAclsInfo);

    }

  }

  return queueAclsInfolist.toArray(new QueueAclsInfo[queueAclsInfolist.size()]);

}

Location: QueueManager.java

Content: 

/** 

 * Returns the specific queue ACL for the given queue. Returns null if the given queue does not exist or the acl is not configured for that queue. If acls are disabled(mapreduce.cluster.acls.enabled set to false), returns ACL with all users.

 */

synchronized AccessControlList getQueueACL(String queueName,QueueACL qACL){

  if (areAclsEnabled) {

    Queue q=leafQueues.get(queueName);

    if (q != null) {

      return q.getAcls().get(toFullPropertyName(queueName,qACL.getAclName()));

    }

 else {

      LOG.warn("Queue " + queueName + " is not present.");

      return null;

    }

  }

  return new AccessControlList("*");

}

Location: QueueManager.java

Content: 

/** 

 * Factory method to create an appropriate instance of a queue configuration parser. <p/> Returns a parser that can parse either the deprecated property style queue configuration in mapred-site.xml, or one that can parse hierarchical queues in mapred-queues.xml. First preference is given to configuration in mapred-site.xml. If no queue configuration is found there, then a parser that can parse configuration in mapred-queues.xml is created.

 * @param conf Configuration instance that determines which parserto use.

 * @return Queue configuration parser

 */

static QueueConfigurationParser getQueueConfigurationParser(Configuration conf,boolean reloadConf,boolean areAclsEnabled){

  if (conf != null && conf.get(DeprecatedQueueConfigurationParser.MAPRED_QUEUE_NAMES_KEY) != null) {

    if (reloadConf) {

      conf.reloadConfiguration();

    }

    return new DeprecatedQueueConfigurationParser(conf);

  }

 else {

    URL xmlInUrl=Thread.currentThread().getContextClassLoader().getResource(QUEUE_CONF_FILE_NAME);

    if (xmlInUrl == null) {

      xmlInUrl=Thread.currentThread().getContextClassLoader().getResource(QUEUE_CONF_DEFAULT_FILE_NAME);

      assert xmlInUrl != null;

    }

    InputStream stream=null;

    try {

      stream=xmlInUrl.openStream();

      return new QueueConfigurationParser(new BufferedInputStream(stream),areAclsEnabled);

    }

 catch (    IOException ioe) {

      throw new RuntimeException("Couldn't open queue configuration at " + xmlInUrl,ioe);

    }

 finally {

      IOUtils.closeStream(stream);

    }

  }

}

Location: QueueManager.java

Content: 

/** 

 * Return the scheduler information configured for this queue.

 * @param queueName queue for which the scheduling information is required.

 * @return The scheduling information for this queue.

 */

public synchronized Object getSchedulerInfo(String queueName){

  if (allQueues.get(queueName) != null) {

    return allQueues.get(queueName).getSchedulingInfo();

  }

  return null;

}

Location: QueueManager.java

Content: 

/** 

 * Return true if the given user is part of the ACL for the given {@link QueueACL} name for the given queue.<p/> An operation is allowed if all users are provided access for this operation, or if either the user or any of the groups specified is provided access.

 * @param queueName Queue on which the operation needs to be performed.

 * @param qACL      The queue ACL name to be checked

 * @param ugi       The user and groups who wish to perform the operation.

 * @return true     if the operation is allowed, false otherwise.

 */

public synchronized boolean hasAccess(String queueName,QueueACL qACL,UserGroupInformation ugi){

  Queue q=leafQueues.get(queueName);

  if (q == null) {

    LOG.info("Queue " + queueName + " is not present");

    return false;

  }

  if (q.getChildren() != null && !q.getChildren().isEmpty()) {

    LOG.info("Cannot submit job to parent queue " + q.getName());

    return false;

  }

  if (!areAclsEnabled()) {

    return true;

  }

  if (LOG.isDebugEnabled()) {

    LOG.debug("Checking access for the acl " + toFullPropertyName(queueName,qACL.getAclName()) + " for user "+ ugi.getShortUserName());

  }

  AccessControlList acl=q.getAcls().get(toFullPropertyName(queueName,qACL.getAclName()));

  if (acl == null) {

    return false;

  }

  return acl.isUserAllowed(ugi);

}

Location: QueueManager.java

Content: 

/** 

 * Initialize the queue-manager with the queue hierarchy specified by the given  {@link QueueConfigurationParser}.

 * @param cp

 */

private void initialize(QueueConfigurationParser cp){

  this.root=cp.getRoot();

  leafQueues.clear();

  allQueues.clear();

  leafQueues=getRoot().getLeafQueues();

  allQueues.putAll(getRoot().getInnerQueues());

  allQueues.putAll(leafQueues);

  LOG.info("AllQueues : " + allQueues + "; LeafQueues : "+ leafQueues);

}

Location: QueueManager.java

Content: 

/** 

 * Checks whether the given queue is running or not.

 * @param queueName name of the queue

 * @return true, if the queue is running.

 */

synchronized boolean isRunning(String queueName){

  Queue q=leafQueues.get(queueName);

  if (q != null) {

    return q.getState().equals(QueueState.RUNNING);

  }

  return false;

}

Location: QueueManager.java

Content: 

QueueManager(){

  this(false);

}

Location: QueueManager.java

Content: 

QueueManager(boolean areAclsEnabled){

  this.areAclsEnabled=areAclsEnabled;

  initialize(getQueueConfigurationParser(null,false,areAclsEnabled));

}

Location: QueueManager.java

Content: 

/** 

 * Construct a new QueueManager using configuration specified in the passed in  {@link org.apache.hadoop.conf.Configuration} object.<p/> This instance supports queue configuration specified in mapred-site.xml, but without support for hierarchical queues. If no queue configuration is found in mapred-site.xml, it will then look for site configuration in mapred-queues.xml supporting hierarchical queues.

 * @param clusterConf    mapreduce cluster configuration

 */

public QueueManager(Configuration clusterConf){

  areAclsEnabled=clusterConf.getBoolean(MRConfig.MR_ACLS_ENABLED,false);

  initialize(getQueueConfigurationParser(clusterConf,false,areAclsEnabled));

}

Location: QueueManager.java

Content: 

/** 

 * Create an instance that supports hierarchical queues, defined in the passed in configuration file. <p/> This is mainly used for testing purposes and should not called from production code.

 * @param confFile File where the queue configuration is found.

 */

QueueManager(String confFile,boolean areAclsEnabled){

  this.areAclsEnabled=areAclsEnabled;

  QueueConfigurationParser cp=new QueueConfigurationParser(confFile,areAclsEnabled);

  initialize(cp);

}

Location: QueueManager.java

Content: 

/** 

 * Refresh acls, state and scheduler properties for the configured queues. <p/> This method reloads configuration related to queues, but does not support changes to the list of queues or hierarchy. The expected usage is that an administrator can modify the queue configuration file and fire an admin command to reload queue configuration. If there is a problem in reloading configuration, then this method guarantees that existing queue configuration is untouched and in a consistent state.

 * @param schedulerRefresher

 * @throws IOException when queue configuration file is invalid.

 */

synchronized void refreshQueues(Configuration conf,QueueRefresher schedulerRefresher) throws IOException {

  QueueConfigurationParser cp=getQueueConfigurationParser(conf,true,areAclsEnabled);

  if (!root.isHierarchySameAs(cp.getRoot())) {

    LOG.warn(MSG_REFRESH_FAILURE_WITH_CHANGE_OF_HIERARCHY);

    throw new IOException(MSG_REFRESH_FAILURE_WITH_CHANGE_OF_HIERARCHY);

  }

  if (schedulerRefresher != null) {

    try {

      schedulerRefresher.refreshQueues(cp.getRoot().getJobQueueInfo().getChildren());

    }

 catch (    Throwable e) {

      StringBuilder msg=new StringBuilder("Scheduler's refresh-queues failed with the exception : " + StringUtils.stringifyException(e));

      msg.append("\n");

      msg.append(MSG_REFRESH_FAILURE_WITH_SCHEDULER_FAILURE);

      LOG.error(msg.toString());

      throw new IOException(msg.toString());

    }

  }

  cp.getRoot().copySchedulingInfo(this.root);

  initialize(cp);

  LOG.info("Queue configuration is refreshed successfully.");

}

Location: QueueManager.java

Content: 

/** 

 * ONLY FOR TESTING - Do not use in production code. This method is used for setting up of leafQueues only. We are not setting the hierarchy here.

 * @param queues

 */

synchronized void setQueues(Queue[] queues){

  root.getChildren().clear();

  leafQueues.clear();

  allQueues.clear();

  for (  Queue queue : queues) {

    root.addChild(queue);

  }

  leafQueues=getRoot().getLeafQueues();

  allQueues.putAll(getRoot().getInnerQueues());

  allQueues.putAll(leafQueues);

}

Location: QueueManager.java

Content: 

/** 

 * Set a generic Object that represents scheduling information relevant to a queue. <p/> A string representation of this Object will be used by the framework to display in user facing applications like the JobTracker web UI and the hadoop CLI.

 * @param queueName queue for which the scheduling information is to be set.

 * @param queueInfo scheduling information for this queue.

 */

public synchronized void setSchedulerInfo(String queueName,Object queueInfo){

  if (allQueues.get(queueName) != null) {

    allQueues.get(queueName).setSchedulingInfo(queueInfo);

  }

}

Location: QueueManager.java

Content: 

public static final String toFullPropertyName(String queue,String property){

  return QUEUE_CONF_PROPERTY_NAME_PREFIX + queue + "."+ property;

}

