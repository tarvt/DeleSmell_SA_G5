Location: TestSpeculativeExecution.java

Content: 

private int speculativeCap(int totalTasks,int numEarlyComplete,int slots) throws IOException {

  TaskAttemptID[] taskAttemptID=new TaskAttemptID[1500];

  JobConf conf=new JobConf();

  conf.setSpeculativeExecution(true);

  conf.setNumMapTasks(totalTasks);

  conf.setNumReduceTasks(0);

  jobTracker.setNumSlots(slots);

  FakeJobInProgress job=new FakeJobInProgress(conf,jobTracker);

  job.initTasks();

  int i;

  for (i=0; i < totalTasks; i++) {

    taskAttemptID[i]=job.findMapTask(trackers[0]);

  }

  clock.advance(5000);

  for (i=0; i < numEarlyComplete; i++) {

    job.finishTask(taskAttemptID[i]);

  }

  clock.advanceBySpeculativeLag();

  for (i=numEarlyComplete; i < totalTasks; i++) {

    job.progressMade(taskAttemptID[i],0.85f);

  }

  clock.advance(50000);

  for (i=0; i < (totalTasks - numEarlyComplete); i++) {

    taskAttemptID[i]=job.findMapTask(trackers[1]);

    clock.advance(2000);

    if (taskAttemptID[i] != null) {

      job.progressMade(taskAttemptID[i],0.99f);

    }

 else {

      break;

    }

  }

  return i;

}

Location: TestSpeculativeExecution.java

Content: 

public void testAtSpeculativeCap() throws IOException {

  assertEquals(speculativeCap(1200,800,20),40);

  assertEquals(speculativeCap(1200,1150,20),10);

  assertEquals(speculativeCap(1200,1150,4000),20);

  assertEquals("Total speculative maps",72,fakeInst.numSpeculativeMaps);

  assertEquals("Total speculative reduces",3,fakeInst.numSpeculativeReduces);

  LOG.info("Total speculative maps = " + fakeInst.numSpeculativeMaps);

  LOG.info("Total speculative reduces = " + fakeInst.numSpeculativeReduces);

}

Location: TestSpeculativeExecution.java

Content: 

public void testIsSlowTracker() throws IOException {

  TaskAttemptID[] taskAttemptID=new TaskAttemptID[20];

  JobConf conf=new JobConf();

  conf.setSpeculativeExecution(true);

  conf.setNumMapTasks(10);

  conf.setNumReduceTasks(0);

  FakeJobInProgress job=new FakeJobInProgress(conf,jobTracker);

  job.initTasks();

  taskAttemptID[0]=job.findMapTask(trackers[0]);

  taskAttemptID[1]=job.findMapTask(trackers[0]);

  taskAttemptID[2]=job.findMapTask(trackers[0]);

  taskAttemptID[3]=job.findMapTask(trackers[1]);

  taskAttemptID[4]=job.findMapTask(trackers[1]);

  taskAttemptID[5]=job.findMapTask(trackers[1]);

  taskAttemptID[6]=job.findMapTask(trackers[2]);

  taskAttemptID[7]=job.findMapTask(trackers[2]);

  taskAttemptID[8]=job.findMapTask(trackers[2]);

  clock.advance(1000);

  job.finishTask(taskAttemptID[0]);

  job.finishTask(taskAttemptID[1]);

  job.finishTask(taskAttemptID[2]);

  clock.advance(1000);

  job.finishTask(taskAttemptID[3]);

  job.finishTask(taskAttemptID[4]);

  job.finishTask(taskAttemptID[5]);

  assertEquals("Tracker " + trackers[0] + " expected to be not slow ",job.isSlowTracker(trackers[0]),false);

  clock.advance(100000);

  job.finishTask(taskAttemptID[6]);

  job.finishTask(taskAttemptID[7]);

  job.finishTask(taskAttemptID[8]);

  assertEquals("Tracker " + trackers[2] + " expected to be slow ",job.isSlowTracker(trackers[2]),true);

  assertEquals("Total speculative maps",1,fakeInst.numSpeculativeMaps);

  assertEquals("Total speculative reduces",1,fakeInst.numSpeculativeReduces);

  LOG.info("Total speculative maps = " + fakeInst.numSpeculativeMaps);

  LOG.info("Total speculative reduces = " + fakeInst.numSpeculativeReduces);

}

Location: TestSpeculativeExecution.java

Content: 

public void testRunningTaskCountWithSpeculation() throws IOException {

  TaskAttemptID[] taskAttemptID=new TaskAttemptID[8];

  JobConf conf=new JobConf();

  conf.setSpeculativeExecution(true);

  conf.setNumMapTasks(3);

  conf.setNumReduceTasks(3);

  conf.setFloat(JobContext.SPECULATIVE_SLOWTASK_THRESHOLD,0.5f);

  FakeJobInProgress job=new FakeJobInProgress(conf,jobTracker);

  job.initTasks();

  taskAttemptID[0]=job.findMapTask(trackers[0]);

  taskAttemptID[1]=job.findMapTask(trackers[1]);

  taskAttemptID[2]=job.findMapTask(trackers[2]);

  clock.advance(5000);

  job.finishTask(taskAttemptID[0]);

  clock.advance(1000);

  job.finishTask(taskAttemptID[1]);

  clock.advanceBySpeculativeLag();

  taskAttemptID[3]=job.findMapTask(trackers[3]);

  int oldRunningMap=job.runningMaps();

  LOG.info("No of running maps before fail was " + oldRunningMap);

  job.failTask(taskAttemptID[2]);

  assertEquals("Running maps count should be updated from " + oldRunningMap + " to "+ (oldRunningMap - 1),job.runningMaps(),oldRunningMap - 1);

  LOG.info(" Job running maps after fail " + job.runningMaps());

  clock.advance(5000);

  job.finishTask(taskAttemptID[3]);

  taskAttemptID[4]=job.findReduceTask(trackers[0]);

  taskAttemptID[5]=job.findReduceTask(trackers[1]);

  taskAttemptID[6]=job.findReduceTask(trackers[2]);

  clock.advance(5000);

  job.finishTask(taskAttemptID[4]);

  clock.advance(1000);

  job.finishTask(taskAttemptID[5]);

  clock.advanceBySpeculativeLag();

  taskAttemptID[7]=job.findReduceTask(trackers[4]);

  int oldRunningReduces=job.runningReduces();

  job.failTask(taskAttemptID[6]);

  LOG.info(" No of running Reduces before fail " + oldRunningReduces);

  LOG.info(" No of runing reduces after fail " + job.runningReduces());

  assertEquals("Running reduces count should be updated from " + oldRunningReduces + " to "+ (oldRunningReduces - 1),job.runningReduces(),oldRunningReduces - 1);

  assertEquals("Total speculative maps",1,fakeInst.numSpeculativeMaps);

  assertEquals("Total speculative reduces",1,fakeInst.numSpeculativeReduces);

  LOG.info("Total speculative maps = " + fakeInst.numSpeculativeMaps);

  LOG.info("Total speculative reduces = " + fakeInst.numSpeculativeReduces);

  job.finishTask(taskAttemptID[7]);

}

Location: TestSpeculativeExecution.java

Content: 

public void testTaskLATEScheduling() throws IOException {

  TaskAttemptID[] taskAttemptID=new TaskAttemptID[20];

  JobConf conf=new JobConf();

  conf.setSpeculativeExecution(true);

  conf.setNumMapTasks(5);

  conf.setNumReduceTasks(0);

  conf.setFloat(JobContext.SPECULATIVE_SLOWTASK_THRESHOLD,0.5f);

  FakeJobInProgress job=new FakeJobInProgress(conf,jobTracker);

  job.initTasks();

  taskAttemptID[0]=job.findMapTask(trackers[0]);

  taskAttemptID[1]=job.findMapTask(trackers[1]);

  taskAttemptID[2]=job.findMapTask(trackers[2]);

  taskAttemptID[3]=job.findMapTask(trackers[3]);

  clock.advance(2000);

  job.finishTask(taskAttemptID[0]);

  job.finishTask(taskAttemptID[1]);

  job.finishTask(taskAttemptID[2]);

  clock.advance(250000);

  taskAttemptID[4]=job.findMapTask(trackers[3]);

  clock.advanceBySpeculativeLag();

  job.progressMade(taskAttemptID[3],0.85f);

  job.progressMade(taskAttemptID[4],0.20f);

  taskAttemptID[5]=job.findMapTask(trackers[4]);

  assertEquals(taskAttemptID[5].getTaskID().getId(),4);

  assertEquals("Total speculative maps",2,fakeInst.numSpeculativeMaps);

  assertEquals("Total speculative reduces",3,fakeInst.numSpeculativeReduces);

  LOG.info("Total speculative maps = " + fakeInst.numSpeculativeMaps);

  LOG.info("Total speculative reduces = " + fakeInst.numSpeculativeReduces);

}

Location: TestSpeculativeExecution.java

Content: 

public void testTaskToSpeculate() throws IOException {

  TaskAttemptID[] taskAttemptID=new TaskAttemptID[6];

  JobConf conf=new JobConf();

  conf.setSpeculativeExecution(true);

  conf.setNumMapTasks(5);

  conf.setNumReduceTasks(5);

  conf.setFloat(JobContext.SPECULATIVE_SLOWTASK_THRESHOLD,0.5f);

  FakeJobInProgress job=new FakeJobInProgress(conf,jobTracker);

  job.initTasks();

  taskAttemptID[0]=job.findReduceTask(trackers[0]);

  taskAttemptID[1]=job.findReduceTask(trackers[1]);

  taskAttemptID[2]=job.findReduceTask(trackers[2]);

  taskAttemptID[3]=job.findReduceTask(trackers[3]);

  taskAttemptID[4]=job.findReduceTask(trackers[3]);

  clock.advance(5000);

  job.finishTask(taskAttemptID[0]);

  clock.advance(1000);

  job.finishTask(taskAttemptID[1]);

  clock.advance(20000);

  clock.advanceBySpeculativeLag();

  taskAttemptID[5]=job.findReduceTask(trackers[4]);

  assertEquals(taskAttemptID[5].getTaskID().getId(),2);

  clock.advance(5000);

  job.finishTask(taskAttemptID[5]);

  taskAttemptID[5]=job.findReduceTask(trackers[4]);

  assertEquals(taskAttemptID[5].getTaskID().getId(),3);

  assertEquals("Total speculative maps",1,fakeInst.numSpeculativeMaps);

  assertEquals("Total speculative reduces",3,fakeInst.numSpeculativeReduces);

  LOG.info("Total speculative maps = " + fakeInst.numSpeculativeMaps);

  LOG.info("Total speculative reduces = " + fakeInst.numSpeculativeReduces);

}

