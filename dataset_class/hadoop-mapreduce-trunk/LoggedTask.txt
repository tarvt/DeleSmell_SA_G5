Location: LoggedTask.java

Content: 

void adjustTimes(long adjustment){

  startTime+=adjustment;

  finishTime+=adjustment;

  for (  LoggedTaskAttempt attempt : attempts) {

    attempt.adjustTimes(adjustment);

  }

}

Location: LoggedTask.java

Content: 

private static String canonicalizeCounterName(String nonCanonicalName){

  String result=nonCanonicalName.toLowerCase();

  result=result.replace(' ','|');

  result=result.replace('-','|');

  result=result.replace('_','|');

  result=result.replace('.','|');

  return result;

}

Location: LoggedTask.java

Content: 

private void compare1(long c1,long c2,TreePath loc,String eltname) throws DeepInequalityException {

  if (c1 != c2) {

    throw new DeepInequalityException(eltname + " miscompared",new TreePath(loc,eltname));

  }

}

Location: LoggedTask.java

Content: 

private void compare1(Pre21JobHistoryConstants.Values c1,Pre21JobHistoryConstants.Values c2,TreePath loc,String eltname) throws DeepInequalityException {

  if (c1 == null && c2 == null) {

    return;

  }

  if (c1 == null || c2 == null || !c1.equals(c2)) {

    throw new DeepInequalityException(eltname + " miscompared",new TreePath(loc,eltname));

  }

}

Location: LoggedTask.java

Content: 

private void compare1(String c1,String c2,TreePath loc,String eltname) throws DeepInequalityException {

  if (c1 == null && c2 == null) {

    return;

  }

  if (c1 == null || c2 == null || !c1.equals(c2)) {

    throw new DeepInequalityException(eltname + " miscompared",new TreePath(loc,eltname));

  }

}

Location: LoggedTask.java

Content: 

private void compareLoggedLocations(List<LoggedLocation> c1,List<LoggedLocation> c2,TreePath loc,String eltname) throws DeepInequalityException {

  if (c1 == null && c2 == null) {

    return;

  }

  if (c1 == null || c2 == null || c1.size() != c2.size()) {

    throw new DeepInequalityException(eltname + " miscompared",new TreePath(loc,eltname));

  }

  for (int i=0; i < c1.size(); ++i) {

    c1.get(i).deepCompare(c2.get(i),new TreePath(loc,eltname,i));

  }

}

Location: LoggedTask.java

Content: 

private void compareLoggedTaskAttempts(List<LoggedTaskAttempt> c1,List<LoggedTaskAttempt> c2,TreePath loc,String eltname) throws DeepInequalityException {

  if (c1 == null && c2 == null) {

    return;

  }

  if (c1 == null || c2 == null || c1.size() != c2.size()) {

    throw new DeepInequalityException(eltname + " miscompared",new TreePath(loc,eltname));

  }

  for (int i=0; i < c1.size(); ++i) {

    c1.get(i).deepCompare(c2.get(i),new TreePath(loc,eltname,i));

  }

}

Location: LoggedTask.java

Content: 

public void deepCompare(DeepCompare comparand,TreePath loc) throws DeepInequalityException {

  if (!(comparand instanceof LoggedTask)) {

    throw new DeepInequalityException("comparand has wrong type",loc);

  }

  LoggedTask other=(LoggedTask)comparand;

  compare1(inputBytes,other.inputBytes,loc,"inputBytes");

  compare1(inputRecords,other.inputRecords,loc,"inputRecords");

  compare1(outputBytes,other.outputBytes,loc,"outputBytes");

  compare1(outputRecords,other.outputRecords,loc,"outputRecords");

  compare1(taskID,other.taskID,loc,"taskID");

  compare1(startTime,other.startTime,loc,"startTime");

  compare1(finishTime,other.finishTime,loc,"finishTime");

  compare1(taskType,other.taskType,loc,"taskType");

  compare1(taskStatus,other.taskStatus,loc,"taskStatus");

  compareLoggedTaskAttempts(attempts,other.attempts,loc,"attempts");

  compareLoggedLocations(preferredLocations,other.preferredLocations,loc,"preferredLocations");

}

Location: LoggedTask.java

Content: 

public List<LoggedTaskAttempt> getAttempts(){

  return attempts;

}

Location: LoggedTask.java

Content: 

public long getFinishTime(){

  return finishTime;

}

Location: LoggedTask.java

Content: 

public long getInputBytes(){

  return inputBytes;

}

Location: LoggedTask.java

Content: 

public long getInputRecords(){

  return inputRecords;

}

Location: LoggedTask.java

Content: 

public long getOutputBytes(){

  return outputBytes;

}

Location: LoggedTask.java

Content: 

public long getOutputRecords(){

  return outputRecords;

}

Location: LoggedTask.java

Content: 

public List<LoggedLocation> getPreferredLocations(){

  return preferredLocations;

}

Location: LoggedTask.java

Content: 

public long getStartTime(){

  return startTime;

}

Location: LoggedTask.java

Content: 

public String getTaskID(){

  return taskID;

}

Location: LoggedTask.java

Content: 

public Pre21JobHistoryConstants.Values getTaskStatus(){

  return taskStatus;

}

Location: LoggedTask.java

Content: 

public Pre21JobHistoryConstants.Values getTaskType(){

  return taskType;

}

Location: LoggedTask.java

Content: 

public void incorporateCounters(JhCounters counters){

switch (taskType) {

case MAP:

    incorporateMapCounters(counters);

  return;

case REDUCE:

incorporateReduceCounters(counters);

return;

}

}

Location: LoggedTask.java

Content: 

private static void incorporateCounter(SetField thunk,JhCounters counters,String counterName){

  counterName=canonicalizeCounterName(counterName);

  for (  JhCounterGroup group : counters.groups) {

    for (    JhCounter counter : group.counts) {

      if (counterName.equals(canonicalizeCounterName(counter.name.toString()))) {

        thunk.set(counter.value);

        return;

      }

    }

  }

}

Location: LoggedTask.java

Content: 

private void incorporateMapCounters(JhCounters counters){

  incorporateCounter(new SetField(this){

    @Override void set(    long val){

      task.inputBytes=val;

    }

  }

,counters,"HDFS_BYTES_READ");

  incorporateCounter(new SetField(this){

    @Override void set(    long val){

      task.outputBytes=val;

    }

  }

,counters,"FILE_BYTES_WRITTEN");

  incorporateCounter(new SetField(this){

    @Override void set(    long val){

      task.inputRecords=val;

    }

  }

,counters,"MAP_INPUT_RECORDS");

  incorporateCounter(new SetField(this){

    @Override void set(    long val){

      task.outputRecords=val;

    }

  }

,counters,"MAP_OUTPUT_RECORDS");

}

Location: LoggedTask.java

Content: 

private void incorporateReduceCounters(JhCounters counters){

  incorporateCounter(new SetField(this){

    @Override void set(    long val){

      task.inputBytes=val;

    }

  }

,counters,"REDUCE_SHUFFLE_BYTES");

  incorporateCounter(new SetField(this){

    @Override void set(    long val){

      task.outputBytes=val;

    }

  }

,counters,"HDFS_BYTES_WRITTEN");

  incorporateCounter(new SetField(this){

    @Override void set(    long val){

      task.inputRecords=val;

    }

  }

,counters,"REDUCE_INPUT_RECORDS");

  incorporateCounter(new SetField(this){

    @Override void set(    long val){

      task.outputRecords=val;

    }

  }

,counters,"REDUCE_OUTPUT_RECORDS");

}

Location: LoggedTask.java

Content: 

LoggedTask(){

  super();

}

Location: LoggedTask.java

Content: 

void setAttempts(List<LoggedTaskAttempt> attempts){

  if (attempts == null) {

    this.attempts=new ArrayList<LoggedTaskAttempt>();

  }

 else {

    this.attempts=attempts;

  }

}

Location: LoggedTask.java

Content: 

void setFinishTime(long finishTime){

  this.finishTime=finishTime;

}

Location: LoggedTask.java

Content: 

void setInputBytes(long inputBytes){

  this.inputBytes=inputBytes;

}

Location: LoggedTask.java

Content: 

void setInputRecords(long inputRecords){

  this.inputRecords=inputRecords;

}

Location: LoggedTask.java

Content: 

void setOutputBytes(long outputBytes){

  this.outputBytes=outputBytes;

}

Location: LoggedTask.java

Content: 

void setOutputRecords(long outputRecords){

  this.outputRecords=outputRecords;

}

Location: LoggedTask.java

Content: 

void setPreferredLocations(List<LoggedLocation> preferredLocations){

  if (preferredLocations == null || preferredLocations.isEmpty()) {

    this.preferredLocations=Collections.emptyList();

  }

 else {

    this.preferredLocations=preferredLocations;

  }

}

Location: LoggedTask.java

Content: 

void setStartTime(long startTime){

  this.startTime=startTime;

}

Location: LoggedTask.java

Content: 

void setTaskID(String taskID){

  this.taskID=taskID;

}

Location: LoggedTask.java

Content: 

void setTaskStatus(Pre21JobHistoryConstants.Values taskStatus){

  this.taskStatus=taskStatus;

}

Location: LoggedTask.java

Content: 

void setTaskType(Pre21JobHistoryConstants.Values taskType){

  this.taskType=taskType;

}

Location: LoggedTask.java

Content: 

@SuppressWarnings("unused") @JsonAnySetter public void setUnknownAttribute(String attributeName,Object ignored){

  if (!alreadySeenAnySetterAttributes.contains(attributeName)) {

    alreadySeenAnySetterAttributes.add(attributeName);

    System.err.println("In LoggedJob, we saw the unknown attribute " + attributeName + ".");

  }

}

