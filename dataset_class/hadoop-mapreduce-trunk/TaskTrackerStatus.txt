Location: TaskTrackerStatus.java

Content: 

/** 

 * Get the number of running map tasks.

 * @return the number of running map tasks

 */

public int countMapTasks(){

  int mapCount=0;

  for (  TaskStatus ts : taskReports) {

    if (ts.getIsMap() && isTaskRunning(ts)) {

      mapCount++;

    }

  }

  return mapCount;

}

Location: TaskTrackerStatus.java

Content: 

/** 

 * Get the number of occupied map slots.

 * @return the number of occupied map slots

 */

public int countOccupiedMapSlots(){

  int mapSlotsCount=0;

  for (  TaskStatus ts : taskReports) {

    if (ts.getIsMap() && isTaskRunning(ts)) {

      mapSlotsCount+=ts.getNumSlots();

    }

  }

  return mapSlotsCount;

}

Location: TaskTrackerStatus.java

Content: 

/** 

 * Get the number of occupied reduce slots.

 * @return the number of occupied reduce slots

 */

public int countOccupiedReduceSlots(){

  int reduceSlotsCount=0;

  for (  TaskStatus ts : taskReports) {

    if ((!ts.getIsMap()) && isTaskRunning(ts)) {

      reduceSlotsCount+=ts.getNumSlots();

    }

  }

  return reduceSlotsCount;

}

Location: TaskTrackerStatus.java

Content: 

/** 

 * Get the number of running reduce tasks.

 * @return the number of running reduce tasks

 */

public int countReduceTasks(){

  int reduceCount=0;

  for (  TaskStatus ts : taskReports) {

    if ((!ts.getIsMap()) && isTaskRunning(ts)) {

      reduceCount++;

    }

  }

  return reduceCount;

}

Location: TaskTrackerStatus.java

Content: 

/** 

 * Get available map slots.

 * @return available map slots

 */

public int getAvailableMapSlots(){

  return getMaxMapSlots() - countOccupiedMapSlots();

}

Location: TaskTrackerStatus.java

Content: 

/** 

 * Get available reduce slots.

 * @return available reduce slots

 */

public int getAvailableReduceSlots(){

  return getMaxReduceSlots() - countOccupiedReduceSlots();

}

Location: TaskTrackerStatus.java

Content: 

/** 

 * Get the number of tasks that have failed on this tracker.

 * @return The number of failed tasks

 */

public int getFailures(){

  return failures;

}

Location: TaskTrackerStatus.java

Content: 

/** 

 * Returns health status of the task tracker.

 * @return health status of Task Tracker

 */

public TaskTrackerHealthStatus getHealthStatus(){

  return healthStatus;

}

Location: TaskTrackerStatus.java

Content: 

/** 

 */

public long getLastSeen(){

  return lastSeen;

}

Location: TaskTrackerStatus.java

Content: 

/** 

 * Get the maximum map slots for this node.

 * @return the maximum map slots for this node

 */

public int getMaxMapSlots(){

  return maxMapTasks;

}

Location: TaskTrackerStatus.java

Content: 

/** 

 * Get the maximum reduce slots for this node.

 * @return the maximum reduce slots for this node

 */

public int getMaxReduceSlots(){

  return maxReduceTasks;

}

Location: TaskTrackerStatus.java

Content: 

/** 

 * Return the  {@link ResourceStatus} object configured with thisstatus.

 * @return the resource status

 */

ResourceStatus getResourceStatus(){

  return resStatus;

}

Location: TaskTrackerStatus.java

Content: 

/** 

 * Get the current tasks at the TaskTracker. Tasks are tracked by a  {@link TaskStatus} object.

 * @return a list of {@link TaskStatus} representing the current tasks at the TaskTracker.

 */

public List<TaskStatus> getTaskReports(){

  return taskReports;

}

Location: TaskTrackerStatus.java

Content: 

/** 

 * Is the given task considered as 'running' ?

 * @param taskStatus

 * @return

 */

private boolean isTaskRunning(TaskStatus taskStatus){

  TaskStatus.State state=taskStatus.getRunState();

  return (state == State.RUNNING || state == State.UNASSIGNED || taskStatus.inTaskCleanupPhase());

}

Location: TaskTrackerStatus.java

Content: 

/** 

 */

public void setLastSeen(long lastSeen){

  this.lastSeen=lastSeen;

}

Location: TaskTrackerStatus.java

Content: 

/** 

 */

public TaskTrackerStatus(){

  taskReports=new ArrayList<TaskStatus>();

  resStatus=new ResourceStatus();

  this.healthStatus=new TaskTrackerHealthStatus();

}

Location: TaskTrackerStatus.java

Content: 

public TaskTrackerStatus(String trackerName,String host){

  this();

  this.trackerName=trackerName;

  this.host=host;

}

Location: TaskTrackerStatus.java

Content: 

/** 

 */

public TaskTrackerStatus(String trackerName,String host,int httpPort,List<TaskStatus> taskReports,int failures,int maxMapTasks,int maxReduceTasks){

  this.trackerName=trackerName;

  this.host=host;

  this.httpPort=httpPort;

  this.taskReports=new ArrayList<TaskStatus>(taskReports);

  this.failures=failures;

  this.maxMapTasks=maxMapTasks;

  this.maxReduceTasks=maxReduceTasks;

  this.resStatus=new ResourceStatus();

  this.healthStatus=new TaskTrackerHealthStatus();

}

