Location: TestSpecialCharactersInOutputPath.java

Content: 

public static boolean launchJob(URI fileSys,String jobTracker,JobConf conf,int numMaps,int numReduces) throws IOException {

  final Path inDir=new Path("/testing/input");

  final Path outDir=new Path("/testing/output");

  FileSystem fs=FileSystem.get(fileSys,conf);

  fs.delete(outDir,true);

  if (!fs.mkdirs(inDir)) {

    LOG.warn("Can't create " + inDir);

    return false;

  }

  DataOutputStream file=fs.create(new Path(inDir,"part-0"));

  file.writeBytes("foo foo2 foo3");

  file.close();

  FileSystem.setDefaultUri(conf,fileSys);

  conf.set(JTConfig.JT_IPC_ADDRESS,jobTracker);

  conf.setJobName("foo");

  conf.setInputFormat(TextInputFormat.class);

  conf.setOutputFormat(SpecialTextOutputFormat.class);

  conf.setOutputKeyClass(LongWritable.class);

  conf.setOutputValueClass(Text.class);

  conf.setMapperClass(IdentityMapper.class);

  conf.setReducerClass(IdentityReducer.class);

  FileInputFormat.setInputPaths(conf,inDir);

  FileOutputFormat.setOutputPath(conf,outDir);

  conf.setNumMapTasks(numMaps);

  conf.setNumReduceTasks(numReduces);

  RunningJob runningJob=JobClient.runJob(conf);

  try {

    assertTrue(runningJob.isComplete());

    assertTrue(runningJob.isSuccessful());

    assertTrue("Output folder not found!",fs.exists(new Path("/testing/output/" + OUTPUT_FILENAME)));

  }

 catch (  NullPointerException npe) {

    fail("A NPE should not have happened.");

  }

  LOG.info("job is complete: " + runningJob.isSuccessful());

  return (runningJob.isSuccessful());

}

Location: TestSpecialCharactersInOutputPath.java

Content: 

public void testJobWithDFS() throws IOException {

  String namenode=null;

  MiniDFSCluster dfs=null;

  MiniMRCluster mr=null;

  FileSystem fileSys=null;

  try {

    final int taskTrackers=4;

    final int jobTrackerPort=60050;

    Configuration conf=new Configuration();

    dfs=new MiniDFSCluster(conf,1,true,null);

    fileSys=dfs.getFileSystem();

    namenode=fileSys.getUri().toString();

    mr=new MiniMRCluster(taskTrackers,namenode,2);

    final String jobTrackerName="localhost:" + mr.getJobTrackerPort();

    JobConf jobConf=new JobConf();

    boolean result;

    result=launchJob(fileSys.getUri(),jobTrackerName,jobConf,3,1);

    assertTrue(result);

  }

  finally {

    if (dfs != null) {

      dfs.shutdown();

    }

    if (mr != null) {

      mr.shutdown();

    }

  }

}

