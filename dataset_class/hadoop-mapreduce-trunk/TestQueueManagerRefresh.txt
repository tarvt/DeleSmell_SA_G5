Location: TestQueueManagerRefresh.java

Content: 

/** 

 * @return a simple hierarchy of JobQueueInfos

 */

static JobQueueInfo[] getSimpleQueueHierarchy(){

  int numQs=3;

  JobQueueInfo[] queues=new JobQueueInfo[numQs];

  queues[0]=newJobQueueInfo(new ArrayList<JobQueueInfo>(),null,"q1",QueueState.UNDEFINED,null);

  queues[1]=newJobQueueInfo(new ArrayList<JobQueueInfo>(),null,"q1:q2",QueueState.RUNNING,null);

  queues[2]=newJobQueueInfo(new ArrayList<JobQueueInfo>(),null,"q1:q3",QueueState.RUNNING,null);

  queues[0].addChild(queues[1]);

  queues[0].addChild(queues[2]);

  return queues;

}

Location: TestQueueManagerRefresh.java

Content: 

static JobQueueInfo newJobQueueInfo(List<JobQueueInfo> children,Properties props,String queueName,QueueState state,String schedulingInfo){

  JobQueueInfo jqi=new JobQueueInfo();

  jqi.setChildren(children);

  if (props != null) {

    jqi.setProperties(props);

  }

  jqi.setQueueName(queueName);

  jqi.setQueueState(state.getStateName());

  jqi.setSchedulingInfo(schedulingInfo);

  return jqi;

}

Location: TestQueueManagerRefresh.java

Content: 

/** 

 * @param originalQManager

 * @throws Exception

 */

private void testRefreshFailureWithChangeOfHierarchy(QueueManager originalQManager) throws Exception {

  QueueManager modifiedQueueManager=new QueueManager();

  assertFalse("Hierarchy changed after refresh!",originalQManager.getRoot().isHierarchySameAs(modifiedQueueManager.getRoot()));

  try {

    originalQManager.refreshQueues(null,null);

    fail("Queue-refresh should have failed!");

  }

 catch (  Exception e) {

    assertTrue("Exception message should point to a change in queue hierarchy!",e.getMessage().contains(QueueManager.MSG_REFRESH_FAILURE_WITH_CHANGE_OF_HIERARCHY));

  }

  List<JobQueueInfo> rootQueues=originalQManager.getRoot().getJobQueueInfo().getChildren();

  assertTrue(rootQueues.size() == 1);

}

Location: TestQueueManagerRefresh.java

Content: 

/** 

 * Test to verify that the refresh of scheduler properties passes smoothly.

 * @throws Exception

 */

@Test public void testRefreshOfSchedulerProperties() throws Exception {

  JobQueueInfo[] queues=getSimpleQueueHierarchy();

  for (  JobQueueInfo jqi : queues) {

    Properties props=new Properties();

    props.setProperty("testing.property","testing.value." + jqi.getQueueName());

    jqi.setProperties(props);

  }

  writeQueueConfigurationFile(QUEUES_CONFIG_FILE_PATH,new JobQueueInfo[]{queues[0]});

  QueueManager qManager=new QueueManager();

  MyTaskScheduler myScheduler=new MyTaskScheduler();

  qManager.refreshQueues(null,myScheduler.new MyQueueRefresher());

  Map<String,Properties> schedProps=myScheduler.getSchedulerProperties();

  for (  JobQueueInfo jqi : queues) {

    String expectedVal="testing.value." + jqi.getQueueName();

    Properties qProperties=schedProps.get(jqi.getQueueName());

    assertNotNull("Properties should not be null for the SchedulerQueue " + jqi.getQueueName(),qProperties);

    String observedVal=qProperties.getProperty("testing.property");

    assertEquals("Properties for the SchedulerQueue " + jqi.getQueueName() + " are not reloaded properly!",expectedVal,observedVal);

  }

}

Location: TestQueueManagerRefresh.java

Content: 

/** 

 * Test to verify that the refresh of queue properties fails if a new queue is added.

 * @throws Exception

 */

@Test public void testRefreshWithAddedQueues() throws Exception {

  JobQueueInfo[] queues=getSimpleQueueHierarchy();

  writeQueueConfigurationFile(QUEUES_CONFIG_FILE_PATH,new JobQueueInfo[]{queues[0]});

  QueueManager qManager=new QueueManager();

  JobQueueInfo newQueue=newJobQueueInfo(new ArrayList<JobQueueInfo>(),null,"q4",QueueState.UNDEFINED,null);

  queues[0].addChild(newQueue);

  writeQueueConfigurationFile(QUEUES_CONFIG_FILE_PATH,new JobQueueInfo[]{queues[0]});

  testRefreshFailureWithChangeOfHierarchy(qManager);

}

Location: TestQueueManagerRefresh.java

Content: 

/** 

 * Test to verify that the refresh of queue properties fails if queues are removed.

 * @throws Exception

 */

@Test public void testRefreshWithRemovedQueues() throws Exception {

  JobQueueInfo[] queues=getSimpleQueueHierarchy();

  writeQueueConfigurationFile(QUEUES_CONFIG_FILE_PATH,new JobQueueInfo[]{queues[0]});

  QueueManager qManager=new QueueManager();

  JobQueueInfo q2=queues[2];

  queues[0].removeChild(q2);

  writeQueueConfigurationFile(QUEUES_CONFIG_FILE_PATH,new JobQueueInfo[]{queues[0]});

  testRefreshFailureWithChangeOfHierarchy(qManager);

}

Location: TestQueueManagerRefresh.java

Content: 

/** 

 * Test to verify that the refresh of queue properties fails if scheduler fails to reload itself.

 * @throws Exception

 */

public void testRefreshWithSchedulerFailure() throws Exception {

  JobQueueInfo[] queues=getSimpleQueueHierarchy();

  writeQueueConfigurationFile(QUEUES_CONFIG_FILE_PATH,new JobQueueInfo[]{queues[0]});

  QueueManager qManager=new QueueManager();

  try {

    qManager.refreshQueues(null,new MyTaskScheduler().new MyFailingQueueRefresher());

    fail("Queue-refresh should have failed!");

  }

 catch (  Exception e) {

    assertTrue("Exception message should point to a refresh-failure in scheduler!",e.getMessage().contains(QueueManager.MSG_REFRESH_FAILURE_WITH_SCHEDULER_FAILURE));

  }

}

Location: TestQueueManagerRefresh.java

Content: 

/** 

 * Test to verify that the scheduling information per queue in the {@link QueueManager} is retained across queue-refresh.

 * @throws Exception

 */

@Test public void testSchedulingInfoAfterRefresh() throws Exception {

  JobQueueInfo[] queues=getSimpleQueueHierarchy();

  writeQueueConfigurationFile(QUEUES_CONFIG_FILE_PATH,new JobQueueInfo[]{queues[0]});

  QueueManager qManager=new QueueManager();

  for (  String qName : qManager.getLeafQueueNames()) {

    qManager.setSchedulerInfo(qName,new String("scheduling-information-for-queue-" + qName));

  }

  qManager.refreshQueues(null,null);

  for (  String qName : qManager.getLeafQueueNames()) {

    assertEquals("scheduling-information-for-queue-" + qName,qManager.getSchedulerInfo(qName));

  }

}

