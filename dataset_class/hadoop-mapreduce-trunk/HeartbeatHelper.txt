Location: HeartbeatHelper.java

Content: 

public void addTaskReport(TaskStatus report){

  String trackerName=status.getTrackerName();

  String host=status.getHost();

  int httpPort=status.getHttpPort();

  List<TaskStatus> taskReports=status.getTaskReports();

  int failures=status.getFailures();

  int maxMapTasks=status.getMaxMapSlots();

  int maxReduceTasks=status.getMaxReduceSlots();

  taskReports.add(report);

  status=new TaskTrackerStatus(trackerName,host,httpPort,taskReports,failures,maxMapTasks,maxReduceTasks);

}

Location: HeartbeatHelper.java

Content: 

public void addTaskTrackerAction(TaskTrackerAction action){

  actions.add(action);

}

Location: HeartbeatHelper.java

Content: 

public void checkHeartbeatParameters(TaskTrackerStatus otherStatus,boolean otherAcceptNewTasks){

  Assert.assertEquals("Mismatch in acceptNewTask",this.acceptNewTasks,otherAcceptNewTasks);

  List<TaskStatus> taskReports=this.status.getTaskReports();

  List<TaskStatus> otherTaskReports=otherStatus.getTaskReports();

  Assert.assertEquals("Mismatch in number of reported tasks",taskReports.size(),otherTaskReports.size());

  for (  TaskStatus report : taskReports) {

    boolean found=false;

    for (    TaskStatus otherReport : otherTaskReports) {

      if (report.getTaskID() == otherReport.getTaskID()) {

        Assert.assertEquals("Map/reduce task mismatch",report.getIsMap(),otherReport.getIsMap());

        Assert.assertEquals("Mismatch in run state",report.getRunState(),otherReport.getRunState());

        Assert.assertEquals("Mismatch in run phase",report.getPhase(),otherReport.getPhase());

        found=true;

        break;

      }

    }

    Assert.assertTrue("Task status report not found, taskID=" + report.getTaskID(),found);

  }

}

Location: HeartbeatHelper.java

Content: 

public TaskTrackerAction[] getTaskTrackerActions(){

  return actions.toArray(new TaskTrackerAction[0]);

}

