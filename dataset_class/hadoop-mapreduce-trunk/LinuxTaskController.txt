Location: LinuxTaskController.java

Content: 

private List<String> buildInitializeJobCommandArgs(JobInitializationContext context){

  List<String> initJobCmdArgs=new ArrayList<String>();

  initJobCmdArgs.add(context.jobid.toString());

  return initJobCmdArgs;

}

Location: LinuxTaskController.java

Content: 

/** 

 * Returns list of arguments to be passed while initializing a new task. See {@code buildTaskControllerExecutor(TaskControllerCommands, String, List<String>, JvmEnv)} documentation.

 * @param context

 * @return Argument to be used while launching Task VM

 */

private List<String> buildInitializeTaskArgs(TaskExecContext context){

  List<String> commandArgs=new ArrayList<String>(3);

  String taskId=context.task.getTaskID().toString();

  String jobId=getJobId(context);

  commandArgs.add(jobId);

  if (!context.task.isTaskCleanupTask()) {

    commandArgs.add(taskId);

  }

 else {

    commandArgs.add(taskId + TaskTracker.TASK_CLEANUP_SUFFIX);

  }

  return commandArgs;

}

Location: LinuxTaskController.java

Content: 

/** 

 * Builds the args to be passed to task-controller for enabling of job for cleanup. Last arg in this List is $jobid.

 */

private List<String> buildJobCleanupArgs(TaskControllerJobPathDeletionContext context){

  List<String> commandArgs=new ArrayList<String>(2);

  commandArgs.add(context.mapredLocalDir.toUri().getPath());

  commandArgs.add(context.jobId.toString());

  return commandArgs;

}

Location: LinuxTaskController.java

Content: 

/** 

 * API which builds the command line to be pass to LinuxTaskController binary to terminate/kill the task. See  {@code buildTaskControllerExecutor(TaskControllerCommands, String, List<String>, JvmEnv)} documentation.

 * @param context context of task which has to be passed kill signal.

 */

private List<String> buildKillTaskCommandArgs(TaskControllerContext context){

  List<String> killTaskJVMArgs=new ArrayList<String>();

  killTaskJVMArgs.add(context.pid);

  return killTaskJVMArgs;

}

Location: LinuxTaskController.java

Content: 

/** 

 * Returns list of arguments to be passed while launching task VM. See  {@code buildTaskControllerExecutor(TaskControllerCommands, String, List<String>, JvmEnv)} documentation.

 * @param context

 * @return Argument to be used while launching Task VM

 */

private List<String> buildLaunchTaskArgs(TaskExecContext context,File workDir){

  List<String> commandArgs=new ArrayList<String>(3);

  LOG.debug("getting the task directory as: " + getTaskCacheDirectory(context,workDir));

  LOG.debug("getting the tt_root as " + getDirectoryChosenForTask(new File(getTaskCacheDirectory(context,workDir)),context));

  commandArgs.add(getDirectoryChosenForTask(new File(getTaskCacheDirectory(context,workDir)),context));

  commandArgs.addAll(buildInitializeTaskArgs(context));

  return commandArgs;

}

Location: LinuxTaskController.java

Content: 

/** 

 * Builds the args to be passed to task-controller for enabling of task for cleanup. Last arg in this List is either $attemptId or $attemptId/work

 */

private List<String> buildTaskCleanupArgs(TaskControllerTaskPathDeletionContext context){

  List<String> commandArgs=new ArrayList<String>(3);

  commandArgs.add(context.mapredLocalDir.toUri().getPath());

  commandArgs.add(context.task.getJobID().toString());

  String workDir="";

  if (context.isWorkDir) {

    workDir="/work";

  }

  if (context.task.isTaskCleanupTask()) {

    commandArgs.add(context.task.getTaskID() + TaskTracker.TASK_CLEANUP_SUFFIX + workDir);

  }

 else {

    commandArgs.add(context.task.getTaskID() + workDir);

  }

  return commandArgs;

}

Location: LinuxTaskController.java

Content: 

/** 

 * Builds the command line for launching/terminating/killing task JVM. Following is the format for launching/terminating/killing task JVM <br/> For launching following is command line argument: <br/> {@code mapreduce.job.user.name command tt-root job_id task_id} <br/> For terminating/killing task jvm. {@code mapreduce.job.user.name command tt-root task-pid}

 * @param command command to be executed.

 * @param userName mapreduce.job.user.name

 * @param cmdArgs list of extra arguments

 * @param workDir working directory for the task-controller

 * @param env JVM environment variables.

 * @return {@link ShellCommandExecutor}

 * @throws IOException

 */

private ShellCommandExecutor buildTaskControllerExecutor(TaskControllerCommands command,String userName,List<String> cmdArgs,File workDir,Map<String,String> env) throws IOException {

  String[] taskControllerCmd=new String[3 + cmdArgs.size()];

  taskControllerCmd[0]=getTaskControllerExecutablePath();

  taskControllerCmd[1]=userName;

  taskControllerCmd[2]=String.valueOf(command.ordinal());

  int i=3;

  for (  String cmdArg : cmdArgs) {

    taskControllerCmd[i++]=cmdArg;

  }

  if (LOG.isDebugEnabled()) {

    for (    String cmd : taskControllerCmd) {

      LOG.debug("taskctrl command = " + cmd);

    }

  }

  ShellCommandExecutor shExec=null;

  if (workDir != null && workDir.exists()) {

    shExec=new ShellCommandExecutor(taskControllerCmd,workDir,env);

  }

 else {

    shExec=new ShellCommandExecutor(taskControllerCmd);

  }

  return shExec;

}

Location: LinuxTaskController.java

Content: 

@Override void dumpTaskStack(TaskControllerContext context){

  try {

    signalTask(context,TaskControllerCommands.SIGQUIT_TASK_JVM);

  }

 catch (  Exception e) {

    LOG.warn("Exception thrown while sending SIGQUIT to the Task VM " + StringUtils.stringifyException(e));

  }

}

Location: LinuxTaskController.java

Content: 

/** 

 * Enables the job for cleanup by changing permissions of the specified path in the local filesystem

 */

@Override void enableJobForCleanup(PathDeletionContext context) throws IOException {

  if (context instanceof TaskControllerJobPathDeletionContext) {

    TaskControllerJobPathDeletionContext tContext=(TaskControllerJobPathDeletionContext)context;

    enablePathForCleanup(tContext,TaskControllerCommands.ENABLE_JOB_FOR_CLEANUP,buildJobCleanupArgs(tContext));

  }

 else {

    throw new IllegalArgumentException("PathDeletionContext provided is not " + "TaskControllerJobPathDeletionContext.");

  }

}

Location: LinuxTaskController.java

Content: 

/** 

 * Enable a path for cleanup

 * @param c {@link TaskControllerPathDeletionContext} for the path to be cleaned up

 * @param command {@link TaskControllerCommands} for task/job cleanup

 * @param cleanupArgs arguments for the {@link LinuxTaskController} to enable path cleanup

 */

private void enablePathForCleanup(TaskControllerPathDeletionContext c,TaskControllerCommands command,List<String> cleanupArgs){

  if (LOG.isDebugEnabled()) {

    LOG.debug("Going to do " + command.toString() + " for "+ c.fullPath);

  }

  if (c.user != null && c.fs instanceof LocalFileSystem) {

    try {

      runCommand(command,c.user,cleanupArgs,null,null);

    }

 catch (    IOException e) {

      LOG.warn("Unable to change permissions for " + c.fullPath);

    }

  }

 else {

    throw new IllegalArgumentException("Either user is null or the " + "file system is not local file system.");

  }

}

Location: LinuxTaskController.java

Content: 

/** 

 * Enables the task for cleanup by changing permissions of the specified path in the local filesystem

 */

@Override void enableTaskForCleanup(PathDeletionContext context) throws IOException {

  if (context instanceof TaskControllerTaskPathDeletionContext) {

    TaskControllerTaskPathDeletionContext tContext=(TaskControllerTaskPathDeletionContext)context;

    enablePathForCleanup(tContext,TaskControllerCommands.ENABLE_TASK_FOR_CLEANUP,buildTaskCleanupArgs(tContext));

  }

 else {

    throw new IllegalArgumentException("PathDeletionContext provided is not " + "TaskControllerTaskPathDeletionContext.");

  }

}

Location: LinuxTaskController.java

Content: 

private String getDirectoryChosenForTask(File directory,TaskExecContext context){

  String jobId=getJobId(context);

  String taskId=context.task.getTaskID().toString();

  for (  String dir : mapredLocalDirs) {

    File mapredDir=new File(dir);

    File taskDir=new File(mapredDir,TaskTracker.getTaskWorkDir(context.task.getUser(),jobId,taskId,context.task.isTaskCleanupTask())).getParentFile();

    if (directory.equals(taskDir)) {

      return dir;

    }

  }

  LOG.error("Couldn't parse task cache directory correctly");

  throw new IllegalArgumentException("invalid task cache directory " + directory.getAbsolutePath());

}

Location: LinuxTaskController.java

Content: 

private String getJobId(TaskExecContext context){

  String taskId=context.task.getTaskID().toString();

  TaskAttemptID tId=TaskAttemptID.forName(taskId);

  String jobId=tId.getJobID().toString();

  return jobId;

}

Location: LinuxTaskController.java

Content: 

@Override String getRunAsUser(JobConf conf){

  return conf.getUser();

}

Location: LinuxTaskController.java

Content: 

private String getTaskCacheDirectory(TaskExecContext context,File workDir){

  String taskId=context.task.getTaskID().toString();

  File cacheDirForJob=workDir.getParentFile().getParentFile();

  if (context.task.isTaskCleanupTask()) {

    taskId=taskId + TaskTracker.TASK_CLEANUP_SUFFIX;

  }

  return new File(cacheDirForJob,taskId).getAbsolutePath();

}

Location: LinuxTaskController.java

Content: 

protected String getTaskControllerExecutablePath(){

  return taskControllerExe;

}

Location: LinuxTaskController.java

Content: 

@Override public void initializeDistributedCacheFile(DistributedCacheFileContext context) throws IOException {

  if (LOG.isDebugEnabled()) {

    LOG.debug("Going to initialize distributed cache for " + context.user + " with localizedBaseDir "+ context.localizedBaseDir+ " and uniqueString "+ context.uniqueString);

  }

  List<String> args=new ArrayList<String>();

  args.add("--");

  args.add(context.localizedBaseDir.toString());

  args.add(context.uniqueString);

  runCommand(TaskControllerCommands.INITIALIZE_DISTRIBUTEDCACHE_FILE,context.user,args,context.workDir,null);

}

Location: LinuxTaskController.java

Content: 

@Override void initializeJob(JobInitializationContext context) throws IOException {

  LOG.debug("Going to initialize job " + context.jobid.toString() + " on the TT");

  runCommand(TaskControllerCommands.INITIALIZE_JOB,context.user,buildInitializeJobCommandArgs(context),context.workDir,null);

}

Location: LinuxTaskController.java

Content: 

@Override void initializeTask(TaskControllerContext context) throws IOException {

  if (LOG.isDebugEnabled()) {

    LOG.debug("Going to do " + TaskControllerCommands.INITIALIZE_TASK.toString() + " for "+ context.task.getTaskID().toString());

  }

  runCommand(TaskControllerCommands.INITIALIZE_TASK,context.env.conf.getUser(),buildInitializeTaskArgs(context),context.env.workDir,context.env.env);

}

Location: LinuxTaskController.java

Content: 

@Override public void initializeUser(InitializationContext context) throws IOException {

  LOG.debug("Going to initialize user directories for " + context.user + " on the TT");

  runCommand(TaskControllerCommands.INITIALIZE_USER,context.user,new ArrayList<String>(),context.workDir,null);

}

Location: LinuxTaskController.java

Content: 

@Override void killTask(TaskControllerContext context){

  try {

    signalTask(context,TaskControllerCommands.KILL_TASK_JVM);

  }

 catch (  Exception e) {

    LOG.warn("Exception thrown while sending destroy to the Task VM " + StringUtils.stringifyException(e));

  }

}

Location: LinuxTaskController.java

Content: 

/** 

 * Launch a task JVM that will run as the owner of the job. This method launches a task JVM by executing a setuid executable that will switch to the user and run the task. Also does initialization of the first task in the same setuid process launch.

 */

@Override void launchTaskJVM(TaskController.TaskControllerContext context) throws IOException {

  JvmEnv env=context.env;

  String cmdLine=TaskLog.buildCommandLine(env.setup,env.vargs,env.stdout,env.stderr,env.logSize,true);

  StringBuffer sb=new StringBuffer();

  for (  Entry<String,String> entry : env.env.entrySet()) {

    sb.append("export ");

    sb.append(entry.getKey());

    sb.append("=");

    sb.append(entry.getValue());

    sb.append("\n");

  }

  sb.append(cmdLine);

  writeCommand(sb.toString(),getTaskCacheDirectory(context,context.env.workDir));

  List<String> launchTaskJVMArgs=buildLaunchTaskArgs(context,context.env.workDir);

  ShellCommandExecutor shExec=buildTaskControllerExecutor(TaskControllerCommands.LAUNCH_TASK_JVM,env.conf.getUser(),launchTaskJVMArgs,env.workDir,env.env);

  context.shExec=shExec;

  try {

    shExec.execute();

  }

 catch (  Exception e) {

    int exitCode=shExec.getExitCode();

    LOG.warn("Exit code from task is : " + exitCode);

    if (exitCode != 143 && exitCode != 137) {

      LOG.warn("Exception thrown while launching task JVM : " + StringUtils.stringifyException(e));

      LOG.info("Output from LinuxTaskController's launchTaskJVM follows:");

      logOutput(shExec.getOutput());

    }

    throw new IOException(e);

  }

  if (LOG.isDebugEnabled()) {

    LOG.info("Output from LinuxTaskController's launchTaskJVM follows:");

    logOutput(shExec.getOutput());

  }

}

Location: LinuxTaskController.java

Content: 

public LinuxTaskController(){

  super();

}

Location: LinuxTaskController.java

Content: 

private void logOutput(String output){

  String shExecOutput=output;

  if (shExecOutput != null) {

    for (    String str : shExecOutput.split("\n")) {

      LOG.info(str);

    }

  }

}

Location: LinuxTaskController.java

Content: 

/** 

 * Helper method that runs a LinuxTaskController command

 * @param taskControllerCommand

 * @param user

 * @param cmdArgs

 * @param env

 * @throws IOException

 */

private void runCommand(TaskControllerCommands taskControllerCommand,String user,List<String> cmdArgs,File workDir,Map<String,String> env) throws IOException {

  ShellCommandExecutor shExec=buildTaskControllerExecutor(taskControllerCommand,user,cmdArgs,workDir,env);

  try {

    shExec.execute();

  }

 catch (  Exception e) {

    LOG.warn("Exit code from " + taskControllerCommand.toString() + " is : "+ shExec.getExitCode());

    LOG.warn("Exception thrown by " + taskControllerCommand.toString() + " : "+ StringUtils.stringifyException(e));

    LOG.info("Output from LinuxTaskController's " + taskControllerCommand.toString() + " follows:");

    logOutput(shExec.getOutput());

    throw new IOException(e);

  }

  if (LOG.isDebugEnabled()) {

    LOG.info("Output from LinuxTaskController's " + taskControllerCommand.toString() + " follows:");

    logOutput(shExec.getOutput());

  }

}

Location: LinuxTaskController.java

Content: 

/** 

 * Launch the debug script process that will run as the owner of the job. This method launches the task debug script process by executing a setuid executable that will switch to the user and run the task. 

 */

@Override void runDebugScript(DebugScriptContext context) throws IOException {

  String debugOut=FileUtil.makeShellPath(context.stdout);

  String cmdLine=TaskLog.buildDebugScriptCommandLine(context.args,debugOut);

  writeCommand(cmdLine,getTaskCacheDirectory(context,context.workDir));

  List<String> launchTaskJVMArgs=buildLaunchTaskArgs(context,context.workDir);

  runCommand(TaskControllerCommands.RUN_DEBUG_SCRIPT,context.task.getUser(),launchTaskJVMArgs,context.workDir,null);

}

Location: LinuxTaskController.java

Content: 

/** 

 * Convenience method used to sending appropriate signal to the task VM

 * @param context

 * @param command

 * @throws IOException

 */

protected void signalTask(TaskControllerContext context,TaskControllerCommands command) throws IOException {

  if (context.task == null) {

    LOG.info("Context task is null; not signaling the JVM");

    return;

  }

  ShellCommandExecutor shExec=buildTaskControllerExecutor(command,context.env.conf.getUser(),buildKillTaskCommandArgs(context),context.env.workDir,context.env.env);

  try {

    shExec.execute();

  }

 catch (  Exception e) {

    LOG.warn("Output from task-contoller is : " + shExec.getOutput());

    throw new IOException(e);

  }

}

Location: LinuxTaskController.java

Content: 

@Override void terminateTask(TaskControllerContext context){

  try {

    signalTask(context,TaskControllerCommands.TERMINATE_TASK_JVM);

  }

 catch (  Exception e) {

    LOG.warn("Exception thrown while sending kill to the Task VM " + StringUtils.stringifyException(e));

  }

}

Location: LinuxTaskController.java

Content: 

private void writeCommand(String cmdLine,String directory) throws IOException {

  PrintWriter pw=null;

  String commandFile=directory + File.separator + COMMAND_FILE;

  LOG.info("Writing commands to " + commandFile);

  LOG.info("--------Commands Begin--------");

  LOG.info(cmdLine);

  LOG.info("--------Commands End--------");

  try {

    FileWriter fw=new FileWriter(commandFile);

    BufferedWriter bw=new BufferedWriter(fw);

    pw=new PrintWriter(bw);

    pw.write(cmdLine);

  }

 catch (  IOException ioe) {

    LOG.error("Caught IOException while writing JVM command line to file. " + ioe.getMessage());

  }

 finally {

    if (pw != null) {

      pw.close();

    }

    File f=new File(commandFile);

    if (f.exists()) {

      f.setReadable(true,false);

      f.setExecutable(true,false);

    }

  }

}

