Location: TaskController.java

Content: 

/** 

 * Top level cleanup a task JVM method. <ol> <li>Sends a graceful termiante signal to task JVM to allow subprocesses to cleanup.</li> <li>Sends a forceful kill signal to task JVM, terminating all its sub-processes forcefully.</li> </ol>

 * @param context the task for which kill signal has to be sent.

 */

final void destroyTaskJVM(TaskControllerContext context){

  terminateTask(context);

  try {

    Thread.sleep(context.sleeptimeBeforeSigkill);

  }

 catch (  InterruptedException e) {

    LOG.warn("Sleep interrupted : " + StringUtils.stringifyException(e));

  }

  killTask(context);

}

Location: TaskController.java

Content: 

/** 

 * Launch a task JVM This method defines how a JVM will be launched to run a task. Each task-controller should also do an {@link #initializeTask(TaskControllerContext)} inside this method so as toinitialize the task before launching it. This is for reasons of task-controller specific optimizations w.r.t combining initialization and launching of tasks.

 * @param context the context associated to the task

 */

abstract void launchTaskJVM(TaskControllerContext context) throws IOException ;

