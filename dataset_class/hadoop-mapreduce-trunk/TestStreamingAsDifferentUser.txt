Location: TestStreamingAsDifferentUser.java

Content: 

/** 

 * Verify if the permissions of distcache dir contents are valid once the job is finished

 */

public void testStreamingWithDistCache() throws Exception {

  if (!shouldRun()) {

    return;

  }

  startCluster();

  final String[] localDirs=mrCluster.getTaskTrackerLocalDirs(0);

  final JobConf myConf=getClusterConf();

  File publicFile=new File(System.getProperty("test.build.data","/tmp"),"publicFile");

  FileOutputStream fstream=new FileOutputStream(publicFile);

  fstream.write("public file contents".getBytes());

  fstream.close();

  FileSystem dfs=dfsCluster.getFileSystem();

  dfs.setPermission(new Path(dfs.getDefaultUri(myConf).toString() + "/tmp"),new FsPermission((short)0755));

  final String publicCacheFile=dfs.getDefaultUri(myConf).toString() + "/tmp/publicFile";

  dfs.copyFromLocalFile(new Path(publicFile.getAbsolutePath()),new Path(publicCacheFile));

  dfs.setPermission(new Path(publicCacheFile),new FsPermission((short)0755));

  final String taskTrackerUser=UserGroupInformation.getCurrentUser().getShortUserName();

  jobOwner.doAs(new PrivilegedExceptionAction<Void>(){

    public Void run() throws Exception {

      FileSystem inFs=inputPath.getFileSystem(myConf);

      FileSystem outFs=outputPath.getFileSystem(myConf);

      outFs.delete(outputPath,true);

      if (!inFs.mkdirs(inputPath)) {

        throw new IOException("Mkdirs failed to create " + inFs.toString());

      }

      DataOutputStream file=inFs.create(new Path(inputPath,"part-0"));

      file.writeBytes(input);

      file.close();

      File privateFile=new File(System.getProperty("test.build.data","/tmp"),"test.sh");

      privateFile.createNewFile();

      String[] args=new String[]{"-files",privateFile.toString() + "," + publicCacheFile,"-Dmapreduce.task.files.preserve.failedtasks=true","-Dstream.tmpdir=" + System.getProperty("test.build.data","/tmp"),"-input",inputPath.makeQualified(inFs).toString(),"-output",outputPath.makeQualified(outFs).toString(),"-mapper","pwd","-reducer",StreamJob.REDUCE_NONE};

      StreamJob streamJob=new StreamJob();

      streamJob.setConf(myConf);

      assertTrue("Job failed",ToolRunner.run(streamJob,args) == 0);

      checkPermissionsOnPrivateDistCache(localDirs,jobOwner.getShortUserName(),taskTrackerUser,taskTrackerSpecialGroup);

      checkPresenceOfPrivateDistCacheFiles(localDirs,jobOwner.getShortUserName(),new String[]{"test.sh"});

      checkPermissionsOnPublicDistCache(FileSystem.getLocal(myConf),localDirs,taskTrackerUser,taskTrackerPrimaryGroup);

      checkPresenceOfPublicDistCacheFiles(localDirs,new String[]{"publicFile"});

      assertOwnerShip(outputPath);

      return null;

    }

  }

);

}

