Location: UtilsForTests.java

Content: 

/** 

 * Configure a waiting job

 */

static void configureWaitingJobConf(JobConf jobConf,Path inDir,Path outputPath,int numMaps,int numRed,String jobName,String mapSignalFilename,String redSignalFilename) throws IOException {

  jobConf.setJobName(jobName);

  jobConf.setInputFormat(NonSplitableSequenceFileInputFormat.class);

  jobConf.setOutputFormat(SequenceFileOutputFormat.class);

  FileInputFormat.setInputPaths(jobConf,inDir);

  FileOutputFormat.setOutputPath(jobConf,outputPath);

  jobConf.setMapperClass(UtilsForTests.HalfWaitingMapper.class);

  jobConf.setReducerClass(IdentityReducer.class);

  jobConf.setOutputKeyClass(BytesWritable.class);

  jobConf.setOutputValueClass(BytesWritable.class);

  jobConf.setInputFormat(RandomInputFormat.class);

  jobConf.setNumMapTasks(numMaps);

  jobConf.setNumReduceTasks(numRed);

  jobConf.setJar("build/test/mapred/testjar/testjob.jar");

  jobConf.set(getTaskSignalParameter(true),mapSignalFilename);

  jobConf.set(getTaskSignalParameter(false),redSignalFilename);

}

Location: UtilsForTests.java

Content: 

/** 

 * This creates a file in the dfs

 * @param dfs FileSystem Local File System where file needs to be picked

 * @param URIPATH Path dfs path where file needs to be copied

 * @param permission FsPermission File permission

 * @return returns the DataOutputStream

 */

public static DataOutputStream createTmpFileDFS(FileSystem dfs,Path URIPATH,FsPermission permission,String input) throws Exception {

  DataOutputStream file=FileSystem.create(dfs,URIPATH,permission);

  file.writeBytes(input);

  file.close();

  return file;

}

Location: UtilsForTests.java

Content: 

public static String dfmt(double d){

  return dfm.format(d);

}

Location: UtilsForTests.java

Content: 

public static String formatBytes2(long numBytes){

  StringBuffer buf=new StringBuffer();

  long u=0;

  if (numBytes >= TB) {

    u=numBytes / TB;

    numBytes-=u * TB;

    buf.append(u + " TB ");

  }

  if (numBytes >= GB) {

    u=numBytes / GB;

    numBytes-=u * GB;

    buf.append(u + " GB ");

  }

  if (numBytes >= MB) {

    u=numBytes / MB;

    numBytes-=u * MB;

    buf.append(u + " MB ");

  }

  if (numBytes >= KB) {

    u=numBytes / KB;

    numBytes-=u * KB;

    buf.append(u + " KB ");

  }

  buf.append(u + " B");

  return buf.toString();

}

Location: UtilsForTests.java

Content: 

public static String formatBytes(long numBytes){

  StringBuffer buf=new StringBuffer();

  boolean bDetails=true;

  double num=numBytes;

  if (numBytes < KB) {

    buf.append(numBytes + " B");

    bDetails=false;

  }

 else   if (numBytes < MB) {

    buf.append(dfmt(num / KB) + " KB");

  }

 else   if (numBytes < GB) {

    buf.append(dfmt(num / MB) + " MB");

  }

 else   if (numBytes < TB) {

    buf.append(dfmt(num / GB) + " GB");

  }

 else   if (numBytes < PB) {

    buf.append(dfmt(num / TB) + " TB");

  }

 else {

    buf.append(dfmt(num / PB) + " PB");

  }

  if (bDetails) {

    buf.append(" (" + ifmt(numBytes) + " bytes)");

  }

  return buf.toString();

}

Location: UtilsForTests.java

Content: 

/** 

 * This formats the long tasktracker name to just the FQDN

 * @param taskTrackerLong String The long format of the tasktracker string

 * @return String The FQDN of the tasktracker

 * @throws Exception

 */

public static String getFQDNofTT(String taskTrackerLong) throws Exception {

  String[] firstSplit=taskTrackerLong.split("_");

  String tmpOutput=firstSplit[1];

  String[] secondSplit=tmpOutput.split(":");

  String tmpTaskTracker=secondSplit[0];

  return tmpTaskTracker;

}

Location: UtilsForTests.java

Content: 

/** 

 * Gets job status from the jobtracker given the jobclient and the job id

 */

static JobStatus getJobStatus(JobClient jc,JobID id) throws IOException {

  JobStatus[] statuses=jc.getAllJobs();

  for (  JobStatus jobStatus : statuses) {

    if (jobStatus.getJobID().equals(id)) {

      return jobStatus;

    }

  }

  return null;

}

Location: UtilsForTests.java

Content: 

static JobTracker getJobTracker(){

  JobTracker jt=new JobTracker();

  return jt;

}

Location: UtilsForTests.java

Content: 

static String getMapSignalFile(Path dir){

  return (new Path(dir,"map-signal")).toString();

}

Location: UtilsForTests.java

Content: 

static String getReduceSignalFile(Path dir){

  return (new Path(dir,"reduce-signal")).toString();

}

Location: UtilsForTests.java

Content: 

static String getSignalFile(Path dir){

  return (new Path(dir,"signal")).toString();

}

Location: UtilsForTests.java

Content: 

public static String getSpace(int len){

  if (len > space.length) {

    space=new char[Math.max(len,2 * space.length)];

    Arrays.fill(space,'\u0020');

  }

  return new String(space,0,len);

}

Location: UtilsForTests.java

Content: 

static String getTaskSignalParameter(boolean isMap){

  return isMap ? "test.mapred.map.waiting.target" : "test.mapred.reduce.waiting.target";

}

Location: UtilsForTests.java

Content: 

public static String ifmt(double d){

  return ifm.format(d);

}

Location: UtilsForTests.java

Content: 

public static String ljustify(String s,int width){

  if (s == null)   s="null";

  if (width > s.length()) {

    s=s + getSpace(width - s.length());

  }

  return s;

}

Location: UtilsForTests.java

Content: 

public static String regexpEscape(String plain){

  StringBuffer buf=new StringBuffer();

  char[] ch=plain.toCharArray();

  int csup=ch.length;

  for (int c=0; c < csup; c++) {

    if (regexpSpecials.indexOf(ch[c]) != -1) {

      buf.append("\\");

    }

    buf.append(ch[c]);

  }

  return buf.toString();

}

Location: UtilsForTests.java

Content: 

public static String rjustify(String s,int width){

  if (s == null)   s="null";

  if (width > s.length()) {

    s=getSpace(width - s.length()) + s;

  }

  return s;

}

Location: UtilsForTests.java

Content: 

public static RunningJob runJobFail(JobConf conf,Path inDir,Path outDir) throws IOException {

  conf.setJobName("test-job-fail");

  conf.setMapperClass(FailMapper.class);

  conf.setReducerClass(IdentityReducer.class);

  conf.setMaxMapAttempts(1);

  RunningJob job=UtilsForTests.runJob(conf,inDir,outDir);

  while (!job.isComplete()) {

    try {

      Thread.sleep(100);

    }

 catch (    InterruptedException e) {

      break;

    }

  }

  return job;

}

Location: UtilsForTests.java

Content: 

public static RunningJob runJobKill(JobConf conf,Path inDir,Path outDir) throws IOException {

  conf.setJobName("test-job-kill");

  conf.setMapperClass(KillMapper.class);

  conf.setReducerClass(IdentityReducer.class);

  RunningJob job=UtilsForTests.runJob(conf,inDir,outDir);

  while (job.getJobState() != JobStatus.RUNNING) {

    try {

      Thread.sleep(100);

    }

 catch (    InterruptedException e) {

      break;

    }

  }

  job.killJob();

  while (job.cleanupProgress() == 0.0f) {

    try {

      Thread.sleep(10);

    }

 catch (    InterruptedException ie) {

      break;

    }

  }

  return job;

}

Location: UtilsForTests.java

Content: 

public static RunningJob runJobSucceed(JobConf conf,Path inDir,Path outDir) throws IOException {

  conf.setJobName("test-job-succeed");

  conf.setMapperClass(IdentityMapper.class);

  conf.setReducerClass(IdentityReducer.class);

  RunningJob job=UtilsForTests.runJob(conf,inDir,outDir);

  while (!job.isComplete()) {

    try {

      Thread.sleep(100);

    }

 catch (    InterruptedException e) {

      break;

    }

  }

  return job;

}

Location: UtilsForTests.java

Content: 

static RunningJob runJob(JobConf conf,Path inDir,Path outDir) throws IOException {

  return runJob(conf,inDir,outDir,conf.getNumMapTasks(),conf.getNumReduceTasks());

}

Location: UtilsForTests.java

Content: 

static RunningJob runJob(JobConf conf,Path inDir,Path outDir,int numMaps,int numReds) throws IOException {

  String input="The quick brown fox\n" + "has many silly\n" + "red fox sox\n";

  return runJob(conf,inDir,outDir,numMaps,numReds,input);

}

Location: UtilsForTests.java

Content: 

static RunningJob runJob(JobConf conf,Path inDir,Path outDir,int numMaps,int numReds,String input) throws IOException {

  FileSystem fs=FileSystem.get(conf);

  if (fs.exists(outDir)) {

    fs.delete(outDir,true);

  }

  if (!fs.exists(inDir)) {

    fs.mkdirs(inDir);

  }

  for (int i=0; i < numMaps; ++i) {

    DataOutputStream file=fs.create(new Path(inDir,"part-" + i));

    file.writeBytes(input);

    file.close();

  }

  conf.setInputFormat(TextInputFormat.class);

  conf.setOutputKeyClass(LongWritable.class);

  conf.setOutputValueClass(Text.class);

  FileInputFormat.setInputPaths(conf,inDir);

  FileOutputFormat.setOutputPath(conf,outDir);

  conf.setNumMapTasks(numMaps);

  conf.setNumReduceTasks(numReds);

  JobClient jobClient=new JobClient(conf);

  RunningJob job=jobClient.submitJob(conf);

  return job;

}

Location: UtilsForTests.java

Content: 

public static String safeGetCanonicalPath(File f){

  try {

    String s=f.getCanonicalPath();

    return (s == null) ? f.toString() : s;

  }

 catch (  IOException io) {

    return f.toString();

  }

}

Location: UtilsForTests.java

Content: 

static void setUpConfigFile(Properties confProps,File configFile) throws IOException {

  Configuration config=new Configuration(false);

  FileOutputStream fos=new FileOutputStream(configFile);

  for (Enumeration<?> e=confProps.propertyNames(); e.hasMoreElements(); ) {

    String key=(String)e.nextElement();

    config.set(key,confProps.getProperty(key));

  }

  config.writeXml(fos);

  fos.close();

}

Location: UtilsForTests.java

Content: 

/** 

 * Signal the maps/reduces to start.

 */

static void signalTasks(MiniDFSCluster dfs,FileSystem fileSys,boolean isMap,String mapSignalFile,String reduceSignalFile) throws IOException {

  writeFile(dfs.getNameNode(),fileSys.getConf(),isMap ? new Path(mapSignalFile) : new Path(reduceSignalFile),(short)1);

}

Location: UtilsForTests.java

Content: 

/** 

 * Signal the maps/reduces to start.

 */

static void signalTasks(MiniDFSCluster dfs,FileSystem fileSys,String mapSignalFile,String reduceSignalFile,int replication) throws IOException {

  writeFile(dfs.getNameNode(),fileSys.getConf(),new Path(mapSignalFile),(short)replication);

  writeFile(dfs.getNameNode(),fileSys.getConf(),new Path(reduceSignalFile),(short)replication);

}

Location: UtilsForTests.java

Content: 

static String slurpHadoop(Path p,FileSystem fs) throws IOException {

  int len=(int)fs.getFileStatus(p).getLen();

  byte[] buf=new byte[len];

  InputStream in=fs.open(p);

  String contents=null;

  try {

    in.read(buf,0,len);

    contents=new String(buf,"UTF-8");

  }

  finally {

    in.close();

  }

  return contents;

}

Location: UtilsForTests.java

Content: 

public static String slurp(File f) throws IOException {

  int len=(int)f.length();

  byte[] buf=new byte[len];

  FileInputStream in=new FileInputStream(f);

  String contents=null;

  try {

    in.read(buf,0,len);

    contents=new String(buf,"UTF-8");

  }

  finally {

    in.close();

  }

  return contents;

}

Location: UtilsForTests.java

Content: 

/** 

 * Wait for the jobtracker to be RUNNING.

 */

static void waitForJobTracker(JobClient jobClient){

  while (true) {

    try {

      ClusterStatus status=jobClient.getClusterStatus();

      while (status.getJobTrackerStatus() != JobTrackerStatus.RUNNING) {

        waitFor(100);

        status=jobClient.getClusterStatus();

      }

      break;

    }

 catch (    IOException ioe) {

    }

  }

}

Location: UtilsForTests.java

Content: 

/** 

 * A utility that waits for specified amount of time

 */

public static void waitFor(long duration){

  try {

synchronized (waitLock) {

      waitLock.wait(duration);

    }

  }

 catch (  InterruptedException ie) {

  }

}

Location: UtilsForTests.java

Content: 

/** 

 * Waits until all the jobs at the jobtracker complete.

 */

static void waitTillDone(JobClient jobClient) throws IOException {

  while (true) {

    boolean shouldWait=false;

    for (    JobStatus jobStatuses : jobClient.getAllJobs()) {

      if (jobStatuses.getRunState() != JobStatus.SUCCEEDED && jobStatuses.getRunState() != JobStatus.FAILED && jobStatuses.getRunState() != JobStatus.KILLED) {

        shouldWait=true;

        break;

      }

    }

    if (shouldWait) {

      waitFor(100);

    }

 else {

      break;

    }

  }

}

Location: UtilsForTests.java

Content: 

static void writeFile(NameNode namenode,Configuration conf,Path name,short replication) throws IOException {

  FileSystem fileSys=FileSystem.get(conf);

  SequenceFile.Writer writer=SequenceFile.createWriter(fileSys,conf,name,BytesWritable.class,BytesWritable.class,CompressionType.NONE);

  writer.append(new BytesWritable(),new BytesWritable());

  writer.close();

  fileSys.setReplication(name,replication);

  DFSTestUtil.waitReplication(fileSys,name,replication);

}

