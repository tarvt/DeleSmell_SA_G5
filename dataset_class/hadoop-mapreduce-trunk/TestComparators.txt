Location: TestComparators.java

Content: 

public void configure() throws Exception {

  Path testdir=new Path("build/test/test.mapred.spill");

  Path inDir=new Path(testdir,"in");

  Path outDir=new Path(testdir,"out");

  FileSystem fs=FileSystem.get(conf);

  fs.delete(testdir,true);

  conf.setInputFormat(SequenceFileInputFormat.class);

  FileInputFormat.setInputPaths(conf,inDir);

  FileOutputFormat.setOutputPath(conf,outDir);

  conf.setOutputKeyClass(IntWritable.class);

  conf.setOutputValueClass(Text.class);

  conf.setMapOutputValueClass(IntWritable.class);

  conf.setNumMapTasks(2);

  conf.setOutputFormat(SequenceFileOutputFormat.class);

  if (!fs.mkdirs(testdir)) {

    throw new IOException("Mkdirs failed to create " + testdir.toString());

  }

  if (!fs.mkdirs(inDir)) {

    throw new IOException("Mkdirs failed to create " + inDir.toString());

  }

  Path inFile=new Path(inDir,"part0");

  SequenceFile.Writer writer=SequenceFile.createWriter(fs,conf,inFile,IntWritable.class,IntWritable.class);

  writer.append(new IntWritable(11),new IntWritable(999));

  writer.append(new IntWritable(23),new IntWritable(456));

  writer.append(new IntWritable(10),new IntWritable(780));

  writer.close();

  inFile=new Path(inDir,"part1");

  writer=SequenceFile.createWriter(fs,conf,inFile,IntWritable.class,IntWritable.class);

  writer.append(new IntWritable(45),new IntWritable(100));

  writer.append(new IntWritable(18),new IntWritable(200));

  writer.append(new IntWritable(27),new IntWritable(300));

  writer.close();

  jc=new JobClient(conf);

}

Location: TestComparators.java

Content: 

/** 

 * Test all user comparators. Super-test of all tests here.  We generate composite keys that contain a random number, which acts as a timestamp associated with the record. In our Reduce function,  values for a key should be sorted by the 'timestamp'. We also provide our own comparators that reverse the default sorting  order. This lets us make sure that the right comparators are used. 

 * @throws Exception

 */

public void testAllUserComparators() throws Exception {

  hongshuai();

  Path testdir=new Path("build/test/test.mapred.spill");

  Path inDir=new Path(testdir,"in");

  Path outDir=new Path(testdir,"out");

  FileSystem fs=FileSystem.get(conf);

  fs.delete(testdir,true);

  conf.setInputFormat(SequenceFileInputFormat.class);

  FileInputFormat.setInputPaths(conf,inDir);

  FileOutputFormat.setOutputPath(conf,outDir);

  conf.setOutputKeyClass(IntWritable.class);

  conf.setOutputValueClass(Text.class);

  conf.setMapOutputValueClass(IntWritable.class);

  conf.setNumMapTasks(2);

  conf.setOutputFormat(SequenceFileOutputFormat.class);

  if (!fs.mkdirs(testdir)) {

    throw new IOException("Mkdirs failed to create " + testdir.toString());

  }

  if (!fs.mkdirs(inDir)) {

    throw new IOException("Mkdirs failed to create " + inDir.toString());

  }

  Path inFile=new Path(inDir,"part0");

  SequenceFile.Writer writer=SequenceFile.createWriter(fs,conf,inFile,IntWritable.class,IntWritable.class);

  writer.append(new IntWritable(11),new IntWritable(999));

  writer.append(new IntWritable(23),new IntWritable(456));

  writer.append(new IntWritable(10),new IntWritable(780));

  writer.close();

  inFile=new Path(inDir,"part1");

  writer=SequenceFile.createWriter(fs,conf,inFile,IntWritable.class,IntWritable.class);

  writer.append(new IntWritable(45),new IntWritable(100));

  writer.append(new IntWritable(18),new IntWritable(200));

  writer.append(new IntWritable(27),new IntWritable(300));

  writer.close();

  jc=new JobClient(conf);

  conf.setMapperClass(RandomGenMapper.class);

  conf.setOutputKeyComparatorClass(DecreasingIntComparator.class);

  conf.setReducerClass(DescendingGroupReducer.class);

  conf.setOutputValueGroupingComparator(CompositeIntReverseGroupFn.class);

  RunningJob r_job=jc.submitJob(conf);

  while (!r_job.isComplete()) {

    Thread.sleep(1000);

  }

  if (!r_job.isSuccessful()) {

    fail("Oops! The job broke due to an unexpected error");

  }

}

Location: TestComparators.java

Content: 

/** 

 * Test a user comparator that relies on deserializing both arguments for each compare.

 */

public void testBakedUserComparator() throws Exception {

  MyWritable a=new MyWritable(8,8);

  MyWritable b=new MyWritable(7,9);

  assertTrue(a.compareTo(b) > 0);

  assertTrue(WritableComparator.get(MyWritable.class).compare(a,b) < 0);

}

Location: TestComparators.java

Content: 

/** 

 * Test the default comparator for Map/Reduce.  Use the identity mapper and see if the keys are sorted at the end

 * @throws Exception

 */

public void testDefaultMRComparator() throws Exception {

  hongshuai();

  Path testdir=new Path("build/test/test.mapred.spill");

  Path inDir=new Path(testdir,"in");

  Path outDir=new Path(testdir,"out");

  FileSystem fs=FileSystem.get(conf);

  fs.delete(testdir,true);

  conf.setInputFormat(SequenceFileInputFormat.class);

  FileInputFormat.setInputPaths(conf,inDir);

  FileOutputFormat.setOutputPath(conf,outDir);

  conf.setOutputKeyClass(IntWritable.class);

  conf.setOutputValueClass(Text.class);

  conf.setMapOutputValueClass(IntWritable.class);

  conf.setNumMapTasks(2);

  conf.setOutputFormat(SequenceFileOutputFormat.class);

  if (!fs.mkdirs(testdir)) {

    throw new IOException("Mkdirs failed to create " + testdir.toString());

  }

  if (!fs.mkdirs(inDir)) {

    throw new IOException("Mkdirs failed to create " + inDir.toString());

  }

  Path inFile=new Path(inDir,"part0");

  SequenceFile.Writer writer=SequenceFile.createWriter(fs,conf,inFile,IntWritable.class,IntWritable.class);

  writer.append(new IntWritable(11),new IntWritable(999));

  writer.append(new IntWritable(23),new IntWritable(456));

  writer.append(new IntWritable(10),new IntWritable(780));

  writer.close();

  inFile=new Path(inDir,"part1");

  writer=SequenceFile.createWriter(fs,conf,inFile,IntWritable.class,IntWritable.class);

  writer.append(new IntWritable(45),new IntWritable(100));

  writer.append(new IntWritable(18),new IntWritable(200));

  writer.append(new IntWritable(27),new IntWritable(300));

  writer.close();

  jc=new JobClient(conf);

  conf.setMapperClass(IdentityMapper.class);

  conf.setReducerClass(AscendingKeysReducer.class);

  RunningJob r_job=jc.submitJob(conf);

  while (!r_job.isComplete()) {

    Thread.sleep(1000);

  }

  if (!r_job.isSuccessful()) {

    fail("Oops! The job broke due to an unexpected error");

  }

}

Location: TestComparators.java

Content: 

/** 

 * Test user-defined comparator for Map/Reduce. We provide our own comparator that is the reverse of the default int  comparator. Keys should be sorted in reverse order in the reducer. 

 * @throws Exception

 */

public void testUserMRComparator() throws Exception {

  hongshuai();

  Path testdir=new Path("build/test/test.mapred.spill");

  Path inDir=new Path(testdir,"in");

  Path outDir=new Path(testdir,"out");

  FileSystem fs=FileSystem.get(conf);

  fs.delete(testdir,true);

  conf.setInputFormat(SequenceFileInputFormat.class);

  FileInputFormat.setInputPaths(conf,inDir);

  FileOutputFormat.setOutputPath(conf,outDir);

  conf.setOutputKeyClass(IntWritable.class);

  conf.setOutputValueClass(Text.class);

  conf.setMapOutputValueClass(IntWritable.class);

  conf.setNumMapTasks(2);

  conf.setOutputFormat(SequenceFileOutputFormat.class);

  if (!fs.mkdirs(testdir)) {

    throw new IOException("Mkdirs failed to create " + testdir.toString());

  }

  if (!fs.mkdirs(inDir)) {

    throw new IOException("Mkdirs failed to create " + inDir.toString());

  }

  Path inFile=new Path(inDir,"part0");

  SequenceFile.Writer writer=SequenceFile.createWriter(fs,conf,inFile,IntWritable.class,IntWritable.class);

  writer.append(new IntWritable(11),new IntWritable(999));

  writer.append(new IntWritable(23),new IntWritable(456));

  writer.append(new IntWritable(10),new IntWritable(780));

  writer.close();

  inFile=new Path(inDir,"part1");

  writer=SequenceFile.createWriter(fs,conf,inFile,IntWritable.class,IntWritable.class);

  writer.append(new IntWritable(45),new IntWritable(100));

  writer.append(new IntWritable(18),new IntWritable(200));

  writer.append(new IntWritable(27),new IntWritable(300));

  writer.close();

  jc=new JobClient(conf);

  conf.setMapperClass(IdentityMapper.class);

  conf.setReducerClass(DescendingKeysReducer.class);

  conf.setOutputKeyComparatorClass(DecreasingIntComparator.class);

  RunningJob r_job=jc.submitJob(conf);

  while (!r_job.isComplete()) {

    Thread.sleep(1000);

  }

  if (!r_job.isSuccessful()) {

    fail("Oops! The job broke due to an unexpected error");

  }

}

Location: TestComparators.java

Content: 

/** 

 * Test user-defined grouping comparator for grouping values in Reduce. We generate composite keys that contain a random number, which acts as a timestamp associated with the record. In our Reduce function,  values for a key should be sorted by the 'timestamp'. 

 * @throws Exception

 */

public void testUserValueGroupingComparator() throws Exception {

  hongshuai();

  Path testdir=new Path("build/test/test.mapred.spill");

  Path inDir=new Path(testdir,"in");

  Path outDir=new Path(testdir,"out");

  FileSystem fs=FileSystem.get(conf);

  fs.delete(testdir,true);

  conf.setInputFormat(SequenceFileInputFormat.class);

  FileInputFormat.setInputPaths(conf,inDir);

  FileOutputFormat.setOutputPath(conf,outDir);

  conf.setOutputKeyClass(IntWritable.class);

  conf.setOutputValueClass(Text.class);

  conf.setMapOutputValueClass(IntWritable.class);

  conf.setNumMapTasks(2);

  conf.setOutputFormat(SequenceFileOutputFormat.class);

  if (!fs.mkdirs(testdir)) {

    throw new IOException("Mkdirs failed to create " + testdir.toString());

  }

  if (!fs.mkdirs(inDir)) {

    throw new IOException("Mkdirs failed to create " + inDir.toString());

  }

  Path inFile=new Path(inDir,"part0");

  SequenceFile.Writer writer=SequenceFile.createWriter(fs,conf,inFile,IntWritable.class,IntWritable.class);

  writer.append(new IntWritable(11),new IntWritable(999));

  writer.append(new IntWritable(23),new IntWritable(456));

  writer.append(new IntWritable(10),new IntWritable(780));

  writer.close();

  inFile=new Path(inDir,"part1");

  writer=SequenceFile.createWriter(fs,conf,inFile,IntWritable.class,IntWritable.class);

  writer.append(new IntWritable(45),new IntWritable(100));

  writer.append(new IntWritable(18),new IntWritable(200));

  writer.append(new IntWritable(27),new IntWritable(300));

  writer.close();

  jc=new JobClient(conf);

  conf.setMapperClass(RandomGenMapper.class);

  conf.setReducerClass(AscendingGroupReducer.class);

  conf.setOutputValueGroupingComparator(CompositeIntGroupFn.class);

  RunningJob r_job=jc.submitJob(conf);

  while (!r_job.isComplete()) {

    Thread.sleep(1000);

  }

  if (!r_job.isSuccessful()) {

    fail("Oops! The job broke due to an unexpected error");

  }

}

