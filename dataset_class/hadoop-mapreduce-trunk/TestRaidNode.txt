Location: TestRaidNode.java

Content: 

static long createOldFile(FileSystem fileSys,Path name,int repl,int numBlocks,long blocksize) throws IOException {

  CRC32 crc=new CRC32();

  FSDataOutputStream stm=fileSys.create(name,true,fileSys.getConf().getInt("io.file.buffer.size",4096),(short)repl,blocksize);

  byte[] b=new byte[(int)blocksize];

  for (int i=0; i < numBlocks; i++) {

    if (i == (numBlocks - 1)) {

      b=new byte[(int)blocksize / 2];

    }

    rand.nextBytes(b);

    stm.write(b);

    crc.update(b);

  }

  stm.close();

  return crc.getValue();

}

Location: TestRaidNode.java

Content: 

private void createTestFiles(String path,String destpath) throws IOException {

  long blockSize=1024L;

  Path dir=new Path(path);

  Path destPath=new Path(destpath);

  fileSys.delete(dir,true);

  fileSys.delete(destPath,true);

  for (int i=0; i < 10; i++) {

    Path file=new Path(path + "file" + i);

    createOldFile(fileSys,file,1,7,blockSize);

  }

}

Location: TestRaidNode.java

Content: 

private void doCheckPolicy() throws Exception {

  LOG.info("doCheckPolicy started---------------------------:");

  short srcReplication=1;

  long targetReplication=2;

  long metaReplication=1;

  long stripeLength=2;

  long blockSize=1024;

  int numBlock=3;

  ConfigBuilder cb=new ConfigBuilder();

  cb.addPolicy("policy1","/user/dhruba/policytest",srcReplication,targetReplication,metaReplication,stripeLength);

  cb.persist();

  Path dir=new Path("/user/dhruba/policytest/");

  Path file1=new Path(dir + "/file1");

  Path file2=new Path(dir + "/file2");

  RaidNode cnode=null;

  try {

    Path destPath=new Path("/destraid/user/dhruba/policytest");

    fileSys.delete(dir,true);

    fileSys.delete(destPath,true);

    Configuration localConf=new Configuration(conf);

    localConf.set(RaidNode.RAID_LOCATION_KEY,"/destraid");

    cnode=RaidNode.createRaidNode(null,localConf);

    createOldFile(fileSys,file2,2,numBlock,blockSize);

    FileStatus[] listPaths=null;

    long firstmodtime=0;

    while (true) {

      Thread.sleep(1000);

      try {

        listPaths=fileSys.listStatus(destPath);

      }

 catch (      FileNotFoundException e) {

        LOG.warn("File not found " + destPath);

        continue;

      }

      int count=0;

      if (listPaths != null && listPaths.length == 1) {

        for (        FileStatus s : listPaths) {

          LOG.info("doCheckPolicy found path " + s.getPath());

          if (!s.getPath().toString().endsWith(".tmp") && fileSys.getFileStatus(file2).getReplication() == targetReplication) {

            count++;

            firstmodtime=s.getModificationTime();

          }

        }

      }

      if (count > 0) {

        break;

      }

      LOG.info("doCheckPolicy waiting for files to be raided. Found " + (listPaths == null ? "none" : listPaths.length));

    }

    assertEquals(listPaths.length,1);

    LOG.info("doCheckPolicy all files found in Raid the first time.");

    LOG.info("doCheckPolicy: recreating source file");

    createOldFile(fileSys,file2,2,numBlock,blockSize);

    FileStatus st=fileSys.getFileStatus(file2);

    assertTrue(st.getModificationTime() > firstmodtime);

    while (true) {

      Thread.sleep(20000L);

      listPaths=fileSys.listStatus(destPath);

      int count=0;

      if (listPaths != null && listPaths.length == 1) {

        for (        FileStatus s : listPaths) {

          LOG.info("doCheckPolicy found path " + s.getPath() + " "+ s.getModificationTime());

          if (!s.getPath().toString().endsWith(".tmp") && s.getModificationTime() > firstmodtime && fileSys.getFileStatus(file2).getReplication() == targetReplication) {

            count++;

          }

        }

      }

      if (count > 0) {

        break;

      }

      LOG.info("doCheckPolicy waiting for files to be raided. Found " + (listPaths == null ? "none" : listPaths.length));

    }

    assertEquals(listPaths.length,1);

    LOG.info("doCheckPolicy: file got re-raided as expected.");

  }

 catch (  Exception e) {

    LOG.info("doCheckPolicy Exception " + e + StringUtils.stringifyException(e));

    throw e;

  }

 finally {

    if (cnode != null) {

      cnode.stop();

      cnode.join();

    }

    LOG.info("doTestPathFilter delete file " + file1);

    fileSys.delete(file1,false);

  }

  LOG.info("doCheckPolicy completed:");

}

Location: TestRaidNode.java

Content: 

/** 

 * Test to run a filter

 */

private void doTestPathFilter(int iter,long targetReplication,long metaReplication,long stripeLength,long blockSize,int numBlock) throws Exception {

  LOG.info("doTestPathFilter started---------------------------:" + " iter " + iter + " blockSize="+ blockSize+ " stripeLength="+ stripeLength);

  ConfigBuilder cb=new ConfigBuilder();

  cb.addPolicy("policy1","/user/dhruba/raidtest",(short)1,targetReplication,metaReplication,stripeLength);

  cb.persist();

  RaidShell shell=null;

  Path dir=new Path("/user/dhruba/raidtest/");

  Path file1=new Path(dir + "/file" + iter);

  RaidNode cnode=null;

  try {

    Path destPath=new Path("/destraid/user/dhruba/raidtest");

    fileSys.delete(dir,true);

    fileSys.delete(destPath,true);

    long crc1=createOldFile(fileSys,file1,1,numBlock,blockSize);

    LOG.info("doTestPathFilter created test files for iteration " + iter);

    cnode=RaidNode.createRaidNode(null,conf);

    FileStatus[] listPaths=null;

    while (true) {

      try {

        listPaths=fileSys.listStatus(destPath);

        int count=0;

        if (listPaths != null && listPaths.length == 1) {

          for (          FileStatus s : listPaths) {

            LOG.info("doTestPathFilter found path " + s.getPath());

            if (!s.getPath().toString().endsWith(".tmp") && fileSys.getFileStatus(file1).getReplication() == targetReplication) {

              count++;

            }

          }

        }

        if (count > 0) {

          break;

        }

      }

 catch (      FileNotFoundException e) {

      }

      LOG.info("doTestPathFilter waiting for files to be raided. Found " + (listPaths == null ? "none" : listPaths.length));

      Thread.sleep(1000);

    }

    LOG.info("doTestPathFilter all files found in Raid.");

    Thread.sleep(20000);

    shell=new RaidShell(conf);

    shell.initializeRpc(conf,cnode.getListenerAddress());

    if (numBlock >= 1) {

      LOG.info("doTestPathFilter Check error at beginning of file.");

      simulateError(shell,fileSys,file1,crc1,0);

    }

    if (numBlock >= 2) {

      LOG.info("doTestPathFilter Check error at beginning of second block.");

      simulateError(shell,fileSys,file1,crc1,blockSize + 1);

    }

    if (numBlock >= 3) {

      LOG.info("doTestPathFilter Check error at middle of third block.");

      simulateError(shell,fileSys,file1,crc1,2 * blockSize + 10);

    }

    if (numBlock >= stripeLength + 1) {

      LOG.info("doTestPathFilter Check error at middle of second stripe.");

      simulateError(shell,fileSys,file1,crc1,stripeLength * blockSize + 100);

    }

  }

 catch (  Exception e) {

    LOG.info("doTestPathFilter Exception " + e + StringUtils.stringifyException(e));

    throw e;

  }

 finally {

    if (shell != null)     shell.close();

    if (cnode != null) {

      cnode.stop();

      cnode.join();

    }

    LOG.info("doTestPathFilter delete file " + file1);

    fileSys.delete(file1,true);

  }

  LOG.info("doTestPathFilter completed:" + " blockSize=" + blockSize + " stripeLength="+ stripeLength);

}

Location: TestRaidNode.java

Content: 

void simulateError(RaidShell shell,FileSystem fileSys,Path file1,long crc,long corruptOffset) throws IOException {

  String[] args=new String[3];

  args[0]="-recover";

  args[1]=file1.toString();

  args[2]=Long.toString(corruptOffset);

  Path recover1=shell.recover(args[0],args,1)[0];

  LOG.info("Comparing file " + file1 + " with recovered file "+ recover1);

  validateFile(fileSys,file1,recover1,crc);

  fileSys.delete(recover1,false);

}

Location: TestRaidNode.java

Content: 

/** 

 * Test dist Raid

 */

public void testDistRaid() throws Exception {

  LOG.info("Test testDistRaid started.");

  long targetReplication=2;

  long metaReplication=2;

  long stripeLength=3;

  short srcReplication=1;

  createClusters(false);

  ConfigBuilder cb=new ConfigBuilder();

  cb.addPolicy("policy1","/user/dhruba/raidtest",srcReplication,targetReplication,metaReplication,stripeLength);

  cb.addPolicy("policy2","/user/dhruba/raidtest2",srcReplication,targetReplication,metaReplication,stripeLength);

  cb.persist();

  RaidNode cnode=null;

  try {

    createTestFiles("/user/dhruba/raidtest/","/destraid/user/dhruba/raidtest");

    createTestFiles("/user/dhruba/raidtest2/","/destraid/user/dhruba/raidtest2");

    LOG.info("Test testDistRaid created test files");

    Configuration localConf=new Configuration(conf);

    localConf.set(RaidNode.RAID_LOCATION_KEY,"/destraid");

    cnode=RaidNode.createRaidNode(null,localConf);

    for (    PolicyList policyList : cnode.getAllPolicies()) {

      for (      PolicyInfo p : policyList.getAll()) {

        if (p.getName().equals("policy1")) {

          Path srcPath=new Path("/user/dhruba/raidtest");

          FileSystem fs=srcPath.getFileSystem(conf);

          assertTrue(p.getSrcPath().equals(srcPath.makeQualified(fs.getUri(),fs.getWorkingDirectory())));

        }

 else {

          assertTrue(p.getName().equals("policy2"));

          Path srcPath=new Path("/user/dhruba/raidtest2");

          FileSystem fs=srcPath.getFileSystem(conf);

          assertTrue(p.getSrcPath().equals(srcPath.makeQualified(fs.getUri(),fs.getWorkingDirectory())));

        }

        assertEquals(targetReplication,Integer.parseInt(p.getProperty("targetReplication")));

        assertEquals(metaReplication,Integer.parseInt(p.getProperty("metaReplication")));

        assertEquals(stripeLength,Integer.parseInt(p.getProperty("stripeLength")));

      }

    }

    long start=System.currentTimeMillis();

    final int MAX_WAITTIME=300000;

    assertTrue("cnode is not DistRaidNode",cnode instanceof DistRaidNode);

    DistRaidNode dcnode=(DistRaidNode)cnode;

    while (dcnode.jobMonitor.jobsMonitored() < 2 && System.currentTimeMillis() - start < MAX_WAITTIME) {

      Thread.sleep(1000);

    }

    assertEquals(dcnode.jobMonitor.jobsMonitored(),2);

    start=System.currentTimeMillis();

    while (dcnode.jobMonitor.jobsSucceeded() < 2 && System.currentTimeMillis() - start < MAX_WAITTIME) {

      Thread.sleep(1000);

    }

    assertEquals(dcnode.jobMonitor.jobsSucceeded(),2);

    LOG.info("Test testDistRaid successful.");

  }

 catch (  Exception e) {

    LOG.info("testDistRaid Exception " + e + StringUtils.stringifyException(e));

    throw e;

  }

 finally {

    if (cnode != null) {

      cnode.stop();

      cnode.join();

    }

    stopClusters();

  }

  LOG.info("Test testDistRaid completed.");

}

Location: TestRaidNode.java

Content: 

/** 

 * Test to run a filter

 */

public void testPathFilter() throws Exception {

  LOG.info("Test testPathFilter started.");

  long blockSizes[]={1024L};

  long stripeLengths[]={1,2,5,6,10,11,12};

  long targetReplication=1;

  long metaReplication=1;

  int numBlock=11;

  int iter=0;

  createClusters(true);

  try {

    for (    long blockSize : blockSizes) {

      for (      long stripeLength : stripeLengths) {

        doTestPathFilter(iter,targetReplication,metaReplication,stripeLength,blockSize,numBlock);

        iter++;

      }

    }

    doCheckPolicy();

  }

  finally {

    stopClusters();

  }

  LOG.info("Test testPathFilter completed.");

}

Location: TestRaidNode.java

Content: 

public void testSchedulerOption() throws IOException {

  Configuration conf=new Configuration();

  conf.set("raid.scheduleroption","mapred.fairscheduler.pool:dummy,foo:bar");

  org.apache.hadoop.mapreduce.Job job=DistRaid.createJob(conf);

  Configuration jobConf=job.getConfiguration();

  assertEquals("dummy",jobConf.get("mapred.fairscheduler.pool"));

  assertEquals("bar",jobConf.get("foo"));

}

Location: TestRaidNode.java

Content: 

public void testSuspendTraversal() throws Exception {

  LOG.info("Test testSuspendTraversal started.");

  long targetReplication=2;

  long metaReplication=2;

  long stripeLength=3;

  short srcReplication=1;

  createClusters(false);

  ConfigBuilder cb=new ConfigBuilder();

  cb.addPolicy("policy1","/user/dhruba/raidtest",srcReplication,targetReplication,metaReplication,stripeLength);

  cb.persist();

  RaidNode cnode=null;

  try {

    createTestFiles("/user/dhruba/raidtest/1/","/destraid/user/dhruba/raidtest/1");

    createTestFiles("/user/dhruba/raidtest/2/","/destraid/user/dhruba/raidtest/2");

    createTestFiles("/user/dhruba/raidtest/3/","/destraid/user/dhruba/raidtest/3");

    createTestFiles("/user/dhruba/raidtest/4/","/destraid/user/dhruba/raidtest/4");

    LOG.info("Test testSuspendTraversal created test files");

    Configuration localConf=new Configuration(conf);

    localConf.set(RaidNode.RAID_LOCATION_KEY,"/destraid");

    localConf.setInt("raid.distraid.max.files",3);

    localConf.setInt("raid.directorytraversal.threads",1);

    final int numJobsExpected=2;

    cnode=RaidNode.createRaidNode(null,localConf);

    long start=System.currentTimeMillis();

    final int MAX_WAITTIME=300000;

    assertTrue("cnode is not DistRaidNode",cnode instanceof DistRaidNode);

    DistRaidNode dcnode=(DistRaidNode)cnode;

    start=System.currentTimeMillis();

    while (dcnode.jobMonitor.jobsSucceeded() < numJobsExpected && System.currentTimeMillis() - start < MAX_WAITTIME) {

      Thread.sleep(1000);

    }

    assertEquals(dcnode.jobMonitor.jobsMonitored(),numJobsExpected);

    assertEquals(dcnode.jobMonitor.jobsSucceeded(),numJobsExpected);

    LOG.info("Test testSuspendTraversal successful.");

  }

 catch (  Exception e) {

    LOG.info("testSuspendTraversal Exception " + e + StringUtils.stringifyException(e));

    throw e;

  }

 finally {

    if (cnode != null) {

      cnode.stop();

      cnode.join();

    }

    stopClusters();

  }

  LOG.info("Test testSuspendTraversal completed.");

}

Location: TestRaidNode.java

Content: 

private void validateFile(FileSystem fileSys,Path name1,Path name2,long crc) throws IOException {

  FileStatus stat1=fileSys.getFileStatus(name1);

  FileStatus stat2=fileSys.getFileStatus(name2);

  assertTrue(" Length of file " + name1 + " is "+ stat1.getLen()+ " is different from length of file "+ name1+ " "+ stat2.getLen(),stat1.getLen() == stat2.getLen());

  CRC32 newcrc=new CRC32();

  FSDataInputStream stm=fileSys.open(name2);

  final byte[] b=new byte[4192];

  int num=0;

  while (num >= 0) {

    num=stm.read(b);

    if (num < 0) {

      break;

    }

    newcrc.update(b,0,num);

  }

  stm.close();

  if (newcrc.getValue() != crc) {

    fail("CRC mismatch of files " + name1 + " with file "+ name2);

  }

}

