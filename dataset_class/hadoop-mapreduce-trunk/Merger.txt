Location: Merger.java

Content: 

/** 

 * Sets the boolean variable includeFinalMerge to true. Called from map task before calling merge() so that final merge of map task is also considered as part of sort phase.

 */

static void considerFinalMergeForProgress(){

  includeFinalMerge=true;

}

Location: Merger.java

Content: 

static <K extends Object,V extends Object>RawKeyValueIterator merge(Configuration conf,FileSystem fs,Class<K> keyClass,Class<V> valueClass,CompressionCodec codec,List<Segment<K,V>> segments,int mergeFactor,int inMemSegments,Path tmpDir,RawComparator<K> comparator,Progressable reporter,boolean sortSegments,Counters.Counter readsCounter,Counters.Counter writesCounter,Progress mergePhase) throws IOException {

  return new MergeQueue<K,V>(conf,fs,segments,comparator,reporter,sortSegments,codec).merge(keyClass,valueClass,mergeFactor,inMemSegments,tmpDir,readsCounter,writesCounter,mergePhase);

}

Location: Merger.java

Content: 

public static <K extends Object,V extends Object>RawKeyValueIterator merge(Configuration conf,FileSystem fs,Class<K> keyClass,Class<V> valueClass,CompressionCodec codec,List<Segment<K,V>> segments,int mergeFactor,Path tmpDir,RawComparator<K> comparator,Progressable reporter,boolean sortSegments,Counters.Counter readsCounter,Counters.Counter writesCounter,Progress mergePhase) throws IOException {

  return new MergeQueue<K,V>(conf,fs,segments,comparator,reporter,sortSegments,codec).merge(keyClass,valueClass,mergeFactor,tmpDir,readsCounter,writesCounter,mergePhase);

}

Location: Merger.java

Content: 

public static <K extends Object,V extends Object>RawKeyValueIterator merge(Configuration conf,FileSystem fs,Class<K> keyClass,Class<V> valueClass,CompressionCodec codec,Path[] inputs,boolean deleteInputs,int mergeFactor,Path tmpDir,RawComparator<K> comparator,Progressable reporter,Counters.Counter readsCounter,Counters.Counter writesCounter,Counters.Counter mergedMapOutputsCounter,Progress mergePhase) throws IOException {

  return new MergeQueue<K,V>(conf,fs,inputs,deleteInputs,codec,comparator,reporter,mergedMapOutputsCounter).merge(keyClass,valueClass,mergeFactor,tmpDir,readsCounter,writesCounter,mergePhase);

}

Location: Merger.java

Content: 

public static <K extends Object,V extends Object>RawKeyValueIterator merge(Configuration conf,FileSystem fs,Class<K> keyClass,Class<V> valueClass,CompressionCodec codec,Path[] inputs,boolean deleteInputs,int mergeFactor,Path tmpDir,RawComparator<K> comparator,Progressable reporter,Counters.Counter readsCounter,Counters.Counter writesCounter,Progress mergePhase) throws IOException {

  return new MergeQueue<K,V>(conf,fs,inputs,deleteInputs,codec,comparator,reporter,null).merge(keyClass,valueClass,mergeFactor,tmpDir,readsCounter,writesCounter,mergePhase);

}

Location: Merger.java

Content: 

public static <K extends Object,V extends Object>RawKeyValueIterator merge(Configuration conf,FileSystem fs,Class<K> keyClass,Class<V> valueClass,List<Segment<K,V>> segments,int mergeFactor,int inMemSegments,Path tmpDir,RawComparator<K> comparator,Progressable reporter,boolean sortSegments,Counters.Counter readsCounter,Counters.Counter writesCounter,Progress mergePhase) throws IOException {

  return new MergeQueue<K,V>(conf,fs,segments,comparator,reporter,sortSegments).merge(keyClass,valueClass,mergeFactor,inMemSegments,tmpDir,readsCounter,writesCounter,mergePhase);

}

Location: Merger.java

Content: 

public static <K extends Object,V extends Object>RawKeyValueIterator merge(Configuration conf,FileSystem fs,Class<K> keyClass,Class<V> valueClass,List<Segment<K,V>> segments,int mergeFactor,Path tmpDir,RawComparator<K> comparator,Progressable reporter,boolean sortSegments,Counters.Counter readsCounter,Counters.Counter writesCounter,Progress mergePhase) throws IOException {

  return new MergeQueue<K,V>(conf,fs,segments,comparator,reporter,sortSegments).merge(keyClass,valueClass,mergeFactor,tmpDir,readsCounter,writesCounter,mergePhase);

}

Location: Merger.java

Content: 

public static <K extends Object,V extends Object>RawKeyValueIterator merge(Configuration conf,FileSystem fs,Class<K> keyClass,Class<V> valueClass,List<Segment<K,V>> segments,int mergeFactor,Path tmpDir,RawComparator<K> comparator,Progressable reporter,Counters.Counter readsCounter,Counters.Counter writesCounter,Progress mergePhase) throws IOException {

  return merge(conf,fs,keyClass,valueClass,segments,mergeFactor,tmpDir,comparator,reporter,false,readsCounter,writesCounter,mergePhase);

}

Location: Merger.java

Content: 

public static <K extends Object,V extends Object>void writeFile(RawKeyValueIterator records,Writer<K,V> writer,Progressable progressable,Configuration conf) throws IOException {

  long progressBar=conf.getLong(JobContext.RECORDS_BEFORE_PROGRESS,10000);

  long recordCtr=0;

  while (records.next()) {

    writer.append(records.getKey(),records.getValue());

    if (((recordCtr++) % progressBar) == 0) {

      progressable.progress();

    }

  }

}

