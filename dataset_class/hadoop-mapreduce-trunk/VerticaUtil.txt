Location: VerticaUtil.java

Content: 

public static void checkOutputSpecs(Configuration conf) throws IOException {

  VerticaConfiguration vtconfig=new VerticaConfiguration(conf);

  String writerTable=vtconfig.getOutputTableName();

  if (writerTable == null)   throw new IOException("Vertica output requires a table name defined by " + VerticaConfiguration.OUTPUT_TABLE_NAME_PROP);

  String[] def=vtconfig.getOutputTableDef();

  boolean dropTable=vtconfig.getDropTable();

  String schema=null;

  String table=null;

  String[] schemaTable=writerTable.split("\\.");

  if (schemaTable.length == 2) {

    schema=schemaTable[0];

    table=schemaTable[1];

  }

 else   table=schemaTable[0];

  Statement stmt=null;

  try {

    Connection conn=vtconfig.getConnection(true);

    DatabaseMetaData dbmd=conn.getMetaData();

    ResultSet rs=dbmd.getTables(null,schema,table,null);

    boolean tableExists=rs.next();

    stmt=conn.createStatement();

    if (tableExists && dropTable) {

      if (verticaVersion(conf,true) >= 305) {

        stmt=conn.createStatement();

        stmt.execute("TRUNCATE TABLE " + writerTable);

      }

 else {

        if (def == null) {

          rs=dbmd.getColumns(null,schema,table,null);

          ArrayList<String> defs=new ArrayList<String>();

          while (rs.next())           defs.add(rs.getString(4) + " " + rs.getString(5));

          def=defs.toArray(new String[0]);

        }

        stmt=conn.createStatement();

        stmt.execute("DROP TABLE " + writerTable + " CASCADE");

        tableExists=false;

      }

    }

    if (!tableExists) {

      if (def == null)       throw new RuntimeException("Table " + writerTable + " does not exist and no table definition provided");

      if (schema != null) {

        rs=dbmd.getSchemas(null,schema);

        if (!rs.next())         stmt.execute("CREATE SCHEMA " + schema);

      }

      StringBuffer tabledef=new StringBuffer("CREATE TABLE ").append(writerTable).append(" (");

      for (      String column : def)       tabledef.append(column).append(",");

      tabledef.replace(tabledef.length() - 1,tabledef.length(),")");

      stmt.execute(tabledef.toString());

      stmt.execute("select implement_temp_design('" + writerTable + "')");

    }

  }

 catch (  Exception e) {

    throw new RuntimeException(e);

  }

 finally {

    if (stmt != null)     try {

      stmt.close();

    }

 catch (    SQLException e) {

      throw new RuntimeException(e);

    }

  }

}

Location: VerticaUtil.java

Content: 

public static int verticaVersion(Configuration conf,boolean output) throws IOException {

  int ver=-1;

  try {

    VerticaConfiguration vtconfig=new VerticaConfiguration(conf);

    Connection conn=vtconfig.getConnection(output);

    DatabaseMetaData dbmd=conn.getMetaData();

    ver=dbmd.getDatabaseMajorVersion() * 100;

    ver+=dbmd.getDatabaseMinorVersion();

  }

 catch (  ClassNotFoundException e) {

    throw new IOException("Vertica Driver required to use Vertica Input or Output Formatters");

  }

catch (  SQLException e) {

    throw new IOException(e);

  }

  return ver;

}

