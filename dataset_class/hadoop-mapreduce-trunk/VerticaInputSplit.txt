Location: VerticaInputSplit.java

Content: 

/** 

 * Run the query that, when executed returns input for the mapper

 * @throws Exception

 */

public ResultSet executeQuery() throws Exception {

  LOG.trace("Input split execute query");

  long length=getLength();

  if (length != 0)   inputQuery="SELECT * FROM ( " + inputQuery + " ) limited LIMIT ? OFFSET ?";

  if (connection == null)   throw new Exception("Cannot execute query with no connection");

  stmt=connection.prepareStatement(inputQuery);

  int i=1;

  if (segmentParams != null)   for (  Object param : segmentParams)   stmt.setObject(i++,param);

  if (length != 0) {

    stmt.setLong(i++,length);

    stmt.setLong(i++,start);

  }

  ResultSet rs=stmt.executeQuery();

  return rs;

}

Location: VerticaInputSplit.java

Content: 

/** 

 * @return The index of the last row to select

 */

public long getEnd(){

  return end;

}

Location: VerticaInputSplit.java

Content: 

/** 

 * Return the parameters used for input query

 */

public List<Object> getSegmentParams(){

  return segmentParams;

}

Location: VerticaInputSplit.java

Content: 

/** 

 * (@inheritDoc) 

 */

public VerticaInputSplit(){

  LOG.trace("Input split default constructor");

}

Location: VerticaInputSplit.java

Content: 

/** 

 * Set the input query and a list of parameters to substitute when evaluating the query

 * @param inputQuery SQL query to run

 * @param segmentParams list of parameters to substitute into the query

 * @param start the logical starting record number

 * @param end the logical ending record number

 */

public VerticaInputSplit(String inputQuery,List<Object> segmentParams,long start,long end){

  LOG.trace("Input split constructor with query and params");

  this.inputQuery=inputQuery;

  this.segmentParams=segmentParams;

  this.start=start;

  this.end=end;

}

