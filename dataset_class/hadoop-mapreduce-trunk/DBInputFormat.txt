Location: DBInputFormat.java

Content: 

protected void closeConnection(){

  try {

    if (null != this.connection) {

      this.connection.close();

      this.connection=null;

    }

  }

 catch (  SQLException sqlE) {

  }

}

Location: DBInputFormat.java

Content: 

protected RecordReader<LongWritable,T> createDBRecordReader(DBInputSplit split,Configuration conf) throws IOException {

  @SuppressWarnings("unchecked") Class<T> inputClass=(Class<T>)(dbConf.getInputClass());

  try {

    if (dbProductName.startsWith("ORACLE")) {

      return new OracleDBRecordReader<T>(split,inputClass,conf,getConnection(),getDBConf(),conditions,fieldNames,tableName);

    }

 else     if (dbProductName.startsWith("MYSQL")) {

      return new MySQLDBRecordReader<T>(split,inputClass,conf,getConnection(),getDBConf(),conditions,fieldNames,tableName);

    }

 else {

      return new DBRecordReader<T>(split,inputClass,conf,getConnection(),getDBConf(),conditions,fieldNames,tableName);

    }

  }

 catch (  SQLException ex) {

    throw new IOException(ex.getMessage());

  }

}

Location: DBInputFormat.java

Content: 

/** 

 * Returns the query for getting the total number of rows,  subclasses can override this for custom behaviour.

 */

protected String getCountQuery(){

  if (dbConf.getInputCountQuery() != null) {

    return dbConf.getInputCountQuery();

  }

  StringBuilder query=new StringBuilder();

  query.append("SELECT COUNT(*) FROM " + tableName);

  if (conditions != null && conditions.length() > 0)   query.append(" WHERE " + conditions);

  return query.toString();

}

Location: DBInputFormat.java

Content: 

public String getDBProductName(){

  return dbProductName;

}

Location: DBInputFormat.java

Content: 

/** 

 * Initializes the map-part of the job with the appropriate input settings.

 * @param job The map-reduce job

 * @param inputClass the class object implementing DBWritable, which is the Java object holding tuple fields.

 * @param inputQuery the input query to select fields. Example : "SELECT f1, f2, f3 FROM Mytable ORDER BY f1"

 * @param inputCountQuery the input query that returns the number of records in the table.  Example : "SELECT COUNT(f1) FROM Mytable"

 * @see #setInput(Job,Class,String,String,String,String)

 */

public static void setInput(Job job,Class<? extends DBWritable> inputClass,String inputQuery,String inputCountQuery){

  job.setInputFormatClass(DBInputFormat.class);

  DBConfiguration dbConf=new DBConfiguration(job.getConfiguration());

  dbConf.setInputClass(inputClass);

  dbConf.setInputQuery(inputQuery);

  dbConf.setInputCountQuery(inputCountQuery);

}

Location: DBInputFormat.java

Content: 

/** 

 * Initializes the map-part of the job with the appropriate input settings.

 * @param job The map-reduce job

 * @param inputClass the class object implementing DBWritable, which is the Java object holding tuple fields.

 * @param tableName The table to read data from

 * @param conditions The condition which to select data with, eg. '(updated > 20070101 AND length > 0)'

 * @param orderBy the fieldNames in the orderBy clause.

 * @param fieldNames The field names in the table

 * @see #setInput(Job,Class,String,String)

 */

public static void setInput(Job job,Class<? extends DBWritable> inputClass,String tableName,String conditions,String orderBy,String... fieldNames){

  job.setInputFormatClass(DBInputFormat.class);

  DBConfiguration dbConf=new DBConfiguration(job.getConfiguration());

  dbConf.setInputClass(inputClass);

  dbConf.setInputTableName(tableName);

  dbConf.setInputFieldNames(fieldNames);

  dbConf.setInputConditions(conditions);

  dbConf.setInputOrderBy(orderBy);

}

Location: DBInputFormat.java

Content: 

/** 

 * Initializes the map-part of the job with the appropriate input settings.

 * @param job The job

 * @param inputClass the class object implementing DBWritable, which is the Java object holding tuple fields.

 * @param inputQuery the input query to select fields. Example : "SELECT f1, f2, f3 FROM Mytable ORDER BY f1"

 * @param inputCountQuery the input query that returns the number of records inthe table.  Example : "SELECT COUNT(f1) FROM Mytable"

 * @see #setInput(JobConf,Class,String,String,String,String)

 */

public static void setInput(JobConf job,Class<? extends DBWritable> inputClass,String inputQuery,String inputCountQuery){

  job.setInputFormat(DBInputFormat.class);

  DBConfiguration dbConf=new DBConfiguration(job);

  dbConf.setInputClass(inputClass);

  dbConf.setInputQuery(inputQuery);

  dbConf.setInputCountQuery(inputCountQuery);

}

Location: DBInputFormat.java

Content: 

/** 

 * Initializes the map-part of the job with the appropriate input settings.

 * @param job The job

 * @param inputClass the class object implementing DBWritable, which is the Java object holding tuple fields.

 * @param tableName The table to read data from

 * @param conditions The condition which to select data with, eg. '(updated >20070101 AND length > 0)'

 * @param orderBy the fieldNames in the orderBy clause.

 * @param fieldNames The field names in the table

 * @see #setInput(JobConf,Class,String,String)

 */

public static void setInput(JobConf job,Class<? extends DBWritable> inputClass,String tableName,String conditions,String orderBy,String... fieldNames){

  job.setInputFormat(DBInputFormat.class);

  DBConfiguration dbConf=new DBConfiguration(job);

  dbConf.setInputClass(inputClass);

  dbConf.setInputTableName(tableName);

  dbConf.setInputFieldNames(fieldNames);

  dbConf.setInputConditions(conditions);

  dbConf.setInputOrderBy(orderBy);

}

