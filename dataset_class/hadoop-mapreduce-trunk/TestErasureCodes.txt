Location: TestErasureCodes.java

Content: 

private int[] randomErasedLocation(int erasedLen,int dataLen){

  int[] erasedLocations=new int[erasedLen];

  for (int i=0; i < erasedLen; i++) {

    Set<Integer> s=new HashSet<Integer>();

    while (s.size() != erasedLen) {

      s.add(RAND.nextInt(dataLen));

    }

    int t=0;

    for (    int erased : s) {

      erasedLocations[t++]=erased;

    }

  }

  return erasedLocations;

}

Location: TestErasureCodes.java

Content: 

public void testEncodeDecode(){

  for (int n=0; n < TEST_CODES; n++) {

    int stripeSize=RAND.nextInt(99) + 1;

    int paritySize=RAND.nextInt(9) + 1;

    ErasureCode ec=new ReedSolomonCode(stripeSize,paritySize);

    for (int m=0; m < TEST_TIMES; m++) {

      int symbolMax=(int)Math.pow(2,ec.symbolSize());

      int[] message=new int[stripeSize];

      for (int i=0; i < stripeSize; i++) {

        message[i]=RAND.nextInt(symbolMax);

      }

      int[] parity=new int[paritySize];

      ec.encode(message,parity);

      int[] data=new int[stripeSize + paritySize];

      int[] copy=new int[data.length];

      for (int i=0; i < paritySize; i++) {

        data[i]=parity[i];

        copy[i]=parity[i];

      }

      for (int i=0; i < stripeSize; i++) {

        data[i + paritySize]=message[i];

        copy[i + paritySize]=message[i];

      }

      int erasedLen=paritySize == 1 ? 1 : RAND.nextInt(paritySize - 1) + 1;

      int[] erasedLocations=randomErasedLocation(erasedLen,data.length);

      for (int i=0; i < erasedLocations.length; i++) {

        data[erasedLocations[i]]=0;

      }

      int[] erasedValues=new int[erasedLen];

      ec.decode(data,erasedLocations,erasedValues);

      for (int i=0; i < erasedLen; i++) {

        assertEquals("Decode failed",copy[erasedLocations[i]],erasedValues[i]);

      }

    }

  }

}

Location: TestErasureCodes.java

Content: 

public void testRSPerformance(){

  int stripeSize=10;

  int paritySize=4;

  ErasureCode ec=new ReedSolomonCode(stripeSize,paritySize);

  int symbolMax=(int)Math.pow(2,ec.symbolSize());

  byte[][] message=new byte[stripeSize][];

  int bufsize=1024 * 1024 * 10;

  for (int i=0; i < stripeSize; i++) {

    message[i]=new byte[bufsize];

    for (int j=0; j < bufsize; j++) {

      message[i][j]=(byte)RAND.nextInt(symbolMax);

    }

  }

  byte[][] parity=new byte[paritySize][];

  for (int i=0; i < paritySize; i++) {

    parity[i]=new byte[bufsize];

  }

  long encodeStart=System.currentTimeMillis();

  int[] tmpIn=new int[stripeSize];

  int[] tmpOut=new int[paritySize];

  for (int i=0; i < bufsize; i++) {

    for (int j=0; j < stripeSize; j++)     tmpIn[j]=0x000000FF & message[j][i];

    ec.encode(tmpIn,tmpOut);

    for (int j=0; j < paritySize; j++)     parity[j][i]=(byte)tmpOut[j];

  }

  long encodeEnd=System.currentTimeMillis();

  float encodeMSecs=(encodeEnd - encodeStart);

  System.out.println("Time to encode rs = " + encodeMSecs + "msec ("+ message[0].length / (1000 * encodeMSecs) + " MB/s)");

  int[] data=new int[paritySize + stripeSize];

  int[] erasedLocations=new int[]{4,1,5,7};

  int[] erasedValues=new int[erasedLocations.length];

  byte[] copy=new byte[bufsize];

  for (int j=0; j < bufsize; j++) {

    copy[j]=message[0][j];

    message[0][j]=0;

  }

  long decodeStart=System.currentTimeMillis();

  for (int i=0; i < bufsize; i++) {

    for (int j=0; j < paritySize; j++) {

      data[j]=0x000000FF & parity[j][i];

    }

    for (int j=1; j < stripeSize; j++) {

      data[j + paritySize]=0x000000FF & message[j][i];

    }

    ec.decode(data,erasedLocations,erasedValues);

    message[0][i]=(byte)erasedValues[0];

  }

  long decodeEnd=System.currentTimeMillis();

  float decodeMSecs=(decodeEnd - decodeStart);

  System.out.println("Time to decode = " + decodeMSecs + "msec ("+ message[0].length / (1000 * decodeMSecs) + " MB/s)");

  assertTrue("Decode failed",java.util.Arrays.equals(copy,message[0]));

}

Location: TestErasureCodes.java

Content: 

public void testXorPerformance(){

  java.util.Random RAND=new java.util.Random();

  int stripeSize=10;

  byte[][] message=new byte[stripeSize][];

  int bufsize=1024 * 1024 * 10;

  for (int i=0; i < stripeSize; i++) {

    message[i]=new byte[bufsize];

    for (int j=0; j < bufsize; j++) {

      message[i][j]=(byte)RAND.nextInt(256);

    }

  }

  byte[] parity=new byte[bufsize];

  long encodeStart=System.currentTimeMillis();

  for (int i=0; i < bufsize; i++) {

    for (int j=0; j < stripeSize; j++)     parity[i]^=message[j][i];

  }

  long encodeEnd=System.currentTimeMillis();

  float encodeMSecs=encodeEnd - encodeStart;

  System.out.println("Time to encode xor = " + encodeMSecs + " msec ("+ message[0].length / (1000 * encodeMSecs) + "MB/s)");

  byte[] copy=new byte[bufsize];

  for (int j=0; j < bufsize; j++) {

    copy[j]=message[0][j];

    message[0][j]=0;

  }

  long decodeStart=System.currentTimeMillis();

  for (int i=0; i < bufsize; i++) {

    for (int j=1; j < stripeSize; j++)     message[0][i]^=message[j][i];

    message[0][i]^=parity[i];

  }

  long decodeEnd=System.currentTimeMillis();

  float decodeMSecs=decodeEnd - decodeStart;

  System.out.println("Time to decode xor = " + decodeMSecs + " msec ("+ message[0].length / (1000 * decodeMSecs) + "MB/s)");

  assertTrue("Decode failed",java.util.Arrays.equals(copy,message[0]));

}

