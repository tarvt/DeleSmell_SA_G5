Location: LoggedTaskAttempt.java

Content: 

private void compare1(LoggedLocation c1,LoggedLocation c2,TreePath loc,String eltname) throws DeepInequalityException {

  if (c1 == null && c2 == null) {

    return;

  }

  TreePath recurse=new TreePath(loc,eltname);

  if (c1 == null || c2 == null) {

    throw new DeepInequalityException(eltname + " miscompared",recurse);

  }

  c1.deepCompare(c2,recurse);

}

Location: LoggedTaskAttempt.java

Content: 

public String getAttemptID(){

  return attemptID;

}

Location: LoggedTaskAttempt.java

Content: 

public long getCombineInputRecords(){

  return combineInputRecords;

}

Location: LoggedTaskAttempt.java

Content: 

public long getFileBytesRead(){

  return fileBytesRead;

}

Location: LoggedTaskAttempt.java

Content: 

public long getFileBytesWritten(){

  return fileBytesWritten;

}

Location: LoggedTaskAttempt.java

Content: 

public long getHdfsBytesRead(){

  return hdfsBytesRead;

}

Location: LoggedTaskAttempt.java

Content: 

public long getHdfsBytesWritten(){

  return hdfsBytesWritten;

}

Location: LoggedTaskAttempt.java

Content: 

public String getHostName(){

  return hostName;

}

Location: LoggedTaskAttempt.java

Content: 

public LoggedLocation getLocation(){

  return location;

}

Location: LoggedTaskAttempt.java

Content: 

public long getMapInputBytes(){

  return mapInputBytes;

}

Location: LoggedTaskAttempt.java

Content: 

public long getMapInputRecords(){

  return mapInputRecords;

}

Location: LoggedTaskAttempt.java

Content: 

public long getMapOutputBytes(){

  return mapOutputBytes;

}

Location: LoggedTaskAttempt.java

Content: 

public long getMapOutputRecords(){

  return mapOutputRecords;

}

Location: LoggedTaskAttempt.java

Content: 

public long getReduceInputGroups(){

  return reduceInputGroups;

}

Location: LoggedTaskAttempt.java

Content: 

public long getReduceInputRecords(){

  return reduceInputRecords;

}

Location: LoggedTaskAttempt.java

Content: 

public long getReduceOutputRecords(){

  return reduceOutputRecords;

}

Location: LoggedTaskAttempt.java

Content: 

public long getReduceShuffleBytes(){

  return reduceShuffleBytes;

}

Location: LoggedTaskAttempt.java

Content: 

public ResourceUsageMetrics getResourceUsageMetrics(){

  return metrics;

}

Location: LoggedTaskAttempt.java

Content: 

public Pre21JobHistoryConstants.Values getResult(){

  return result;

}

Location: LoggedTaskAttempt.java

Content: 

public long getShuffleFinished(){

  return shuffleFinished;

}

Location: LoggedTaskAttempt.java

Content: 

public long getSortFinished(){

  return sortFinished;

}

Location: LoggedTaskAttempt.java

Content: 

public long getSpilledRecords(){

  return spilledRecords;

}

Location: LoggedTaskAttempt.java

Content: 

LoggedTaskAttempt(){

  super();

}

Location: LoggedTaskAttempt.java

Content: 

void setAttemptID(String attemptID){

  this.attemptID=attemptID;

}

Location: LoggedTaskAttempt.java

Content: 

void setCombineInputRecords(long combineInputRecords){

  this.combineInputRecords=combineInputRecords;

}

Location: LoggedTaskAttempt.java

Content: 

void setFileBytesRead(long fileBytesRead){

  this.fileBytesRead=fileBytesRead;

}

Location: LoggedTaskAttempt.java

Content: 

void setFileBytesWritten(long fileBytesWritten){

  this.fileBytesWritten=fileBytesWritten;

}

Location: LoggedTaskAttempt.java

Content: 

void setHdfsBytesRead(long hdfsBytesRead){

  this.hdfsBytesRead=hdfsBytesRead;

}

Location: LoggedTaskAttempt.java

Content: 

void setHdfsBytesWritten(long hdfsBytesWritten){

  this.hdfsBytesWritten=hdfsBytesWritten;

}

Location: LoggedTaskAttempt.java

Content: 

void setHostName(String hostName){

  this.hostName=hostName == null ? null : hostName.intern();

}

Location: LoggedTaskAttempt.java

Content: 

void setLocation(LoggedLocation location){

  this.location=location;

}

Location: LoggedTaskAttempt.java

Content: 

void setMapInputBytes(long mapInputBytes){

  this.mapInputBytes=mapInputBytes;

}

Location: LoggedTaskAttempt.java

Content: 

void setMapInputRecords(long mapInputRecords){

  this.mapInputRecords=mapInputRecords;

}

Location: LoggedTaskAttempt.java

Content: 

void setMapOutputBytes(long mapOutputBytes){

  this.mapOutputBytes=mapOutputBytes;

}

Location: LoggedTaskAttempt.java

Content: 

void setMapOutputRecords(long mapOutputRecords){

  this.mapOutputRecords=mapOutputRecords;

}

Location: LoggedTaskAttempt.java

Content: 

void setReduceInputGroups(long reduceInputGroups){

  this.reduceInputGroups=reduceInputGroups;

}

Location: LoggedTaskAttempt.java

Content: 

void setReduceInputRecords(long reduceInputRecords){

  this.reduceInputRecords=reduceInputRecords;

}

Location: LoggedTaskAttempt.java

Content: 

void setReduceOutputRecords(long reduceOutputRecords){

  this.reduceOutputRecords=reduceOutputRecords;

}

Location: LoggedTaskAttempt.java

Content: 

void setReduceShuffleBytes(long reduceShuffleBytes){

  this.reduceShuffleBytes=reduceShuffleBytes;

}

Location: LoggedTaskAttempt.java

Content: 

void setResourceUsageMetrics(ResourceUsageMetrics metrics){

  this.metrics=metrics;

}

Location: LoggedTaskAttempt.java

Content: 

void setResult(Pre21JobHistoryConstants.Values result){

  this.result=result;

}

Location: LoggedTaskAttempt.java

Content: 

void setShuffleFinished(long shuffleFinished){

  this.shuffleFinished=shuffleFinished;

}

Location: LoggedTaskAttempt.java

Content: 

void setSortFinished(long sortFinished){

  this.sortFinished=sortFinished;

}

Location: LoggedTaskAttempt.java

Content: 

void setSpilledRecords(long spilledRecords){

  this.spilledRecords=spilledRecords;

}

