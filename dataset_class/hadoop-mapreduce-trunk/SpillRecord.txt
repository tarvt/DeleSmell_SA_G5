Location: SpillRecord.java

Content: 

/** 

 * Get spill offsets for given partition.

 */

public IndexRecord getIndex(int partition){

  final int pos=partition * MapTask.MAP_OUTPUT_INDEX_RECORD_LENGTH / 8;

  return new IndexRecord(entries.get(pos),entries.get(pos + 1),entries.get(pos + 2));

}

Location: SpillRecord.java

Content: 

public IndexRecord(){

}

Location: SpillRecord.java

Content: 

public IndexRecord(long startOffset,long rawLength,long partLength){

  this.startOffset=startOffset;

  this.rawLength=rawLength;

  this.partLength=partLength;

}

Location: SpillRecord.java

Content: 

/** 

 * Set spill offsets for given partition.

 */

public void putIndex(IndexRecord rec,int partition){

  final int pos=partition * MapTask.MAP_OUTPUT_INDEX_RECORD_LENGTH / 8;

  entries.put(pos,rec.startOffset);

  entries.put(pos + 1,rec.rawLength);

  entries.put(pos + 2,rec.partLength);

}

Location: SpillRecord.java

Content: 

public SpillRecord(int numPartitions){

  buf=ByteBuffer.allocate(numPartitions * MapTask.MAP_OUTPUT_INDEX_RECORD_LENGTH);

  entries=buf.asLongBuffer();

}

Location: SpillRecord.java

Content: 

public SpillRecord(Path indexFileName,JobConf job) throws IOException {

  this(indexFileName,job,null);

}

Location: SpillRecord.java

Content: 

public SpillRecord(Path indexFileName,JobConf job,Checksum crc,String expectedIndexOwner) throws IOException {

  final FileSystem rfs=FileSystem.getLocal(job).getRaw();

  final DataInputStream in=new DataInputStream(SecureIOUtils.openForRead(new File(indexFileName.toUri().getPath()),expectedIndexOwner,null));

  try {

    final long length=rfs.getFileStatus(indexFileName).getLen();

    final int partitions=(int)length / MAP_OUTPUT_INDEX_RECORD_LENGTH;

    final int size=partitions * MAP_OUTPUT_INDEX_RECORD_LENGTH;

    buf=ByteBuffer.allocate(size);

    if (crc != null) {

      crc.reset();

      CheckedInputStream chk=new CheckedInputStream(in,crc);

      IOUtils.readFully(chk,buf.array(),0,size);

      if (chk.getChecksum().getValue() != in.readLong()) {

        throw new ChecksumException("Checksum error reading spill index: " + indexFileName,-1);

      }

    }

 else {

      IOUtils.readFully(in,buf.array(),0,size);

    }

    entries=buf.asLongBuffer();

  }

  finally {

    in.close();

  }

}

Location: SpillRecord.java

Content: 

public SpillRecord(Path indexFileName,JobConf job,String expectedIndexOwner) throws IOException {

  this(indexFileName,job,new PureJavaCrc32(),expectedIndexOwner);

}

Location: SpillRecord.java

Content: 

/** 

 * Write this spill record to the location provided.

 */

public void writeToFile(Path loc,JobConf job) throws IOException {

  writeToFile(loc,job,new PureJavaCrc32());

}

Location: SpillRecord.java

Content: 

public void writeToFile(Path loc,JobConf job,Checksum crc) throws IOException {

  final FileSystem rfs=FileSystem.getLocal(job).getRaw();

  CheckedOutputStream chk=null;

  final FSDataOutputStream out=rfs.create(loc);

  try {

    if (crc != null) {

      crc.reset();

      chk=new CheckedOutputStream(out,crc);

      chk.write(buf.array());

      out.writeLong(chk.getChecksum().getValue());

    }

 else {

      out.write(buf.array());

    }

  }

  finally {

    if (chk != null) {

      chk.close();

    }

 else {

      out.close();

    }

  }

}

