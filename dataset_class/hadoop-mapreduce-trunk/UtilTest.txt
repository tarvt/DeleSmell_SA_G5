Location: UtilTest.java

Content: 

void checkUserDir(){

  if (!userDir_.equals(antTestDir_)) {

    throw new IllegalStateException("user.dir != test.build.data. The junit Ant task must be forked.");

  }

}

Location: UtilTest.java

Content: 

public static String collate(List<String> args,String sep){

  StringBuffer buf=new StringBuffer();

  Iterator<String> it=args.iterator();

  while (it.hasNext()) {

    if (buf.length() > 0) {

      buf.append(" ");

    }

    buf.append(it.next());

  }

  return buf.toString();

}

Location: UtilTest.java

Content: 

/** 

 * Is perl supported on this machine ?

 * @return true if perl is available and is working as expected

 */

public static boolean hasPerlSupport(){

  boolean hasPerl=false;

  ShellCommandExecutor shexec=new ShellCommandExecutor(new String[]{"perl","-e","print 42"});

  try {

    shexec.execute();

    if (shexec.getOutput().equals("42")) {

      hasPerl=true;

    }

 else {

      LOG.warn("Perl is installed, but isn't behaving as expected.");

    }

  }

 catch (  Exception e) {

    LOG.warn("Could not run perl: " + e);

  }

  return hasPerl;

}

Location: UtilTest.java

Content: 

public static boolean isCygwin(){

  String OS=System.getProperty("os.name");

  return (OS.indexOf("Windows") > -1);

}

Location: UtilTest.java

Content: 

public static String makeJavaCommand(Class<?> main,String[] argv){

  ArrayList<String> vargs=new ArrayList<String>();

  File javaHomeBin=new File(System.getProperty("java.home"),"bin");

  File jvm=new File(javaHomeBin,"java");

  vargs.add(jvm.toString());

  vargs.add("-classpath");

  vargs.add("\"" + System.getProperty("java.class.path") + "\"");

  vargs.add("-Xmx" + Runtime.getRuntime().maxMemory());

  vargs.add(main.getName());

  for (int i=0; i < argv.length; i++) {

    vargs.add(argv[i]);

  }

  return collate(vargs," ");

}

Location: UtilTest.java

Content: 

/** 

 * Utility routine to recurisvely delete a directory. On normal return, the file does not exist.

 * @param file File or directory to delete.

 * @throws RuntimeException if the file, or some file withinit, could not be deleted.

 */

static void recursiveDelete(File file){

  file=file.getAbsoluteFile();

  if (!file.exists())   return;

  if (file.isDirectory()) {

    for (    File child : file.listFiles()) {

      recursiveDelete(child);

    }

  }

  if (!file.delete()) {

    throw new RuntimeException("Failed to delete " + file);

  }

}

Location: UtilTest.java

Content: 

void redirectIfAntJunit() throws IOException {

  boolean fromAntJunit=System.getProperty("test.build.data") != null;

  if (fromAntJunit) {

    new File(antTestDir_).mkdirs();

    File outFile=new File(antTestDir_,testName_ + ".log");

    PrintStream out=new PrintStream(new FileOutputStream(outFile));

    System.setOut(out);

    System.setErr(out);

  }

}

Location: UtilTest.java

Content: 

public UtilTest(String testName){

  testName_=testName;

  userDir_=System.getProperty("user.dir");

  antTestDir_=System.getProperty("test.build.data",userDir_);

  System.out.println("test.build.data-or-user.dir=" + antTestDir_);

}

