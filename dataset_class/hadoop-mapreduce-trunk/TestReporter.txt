Location: TestReporter.java

Content: 

/** 

 * Test  {@link Reporter}'s progress for a map-only job. This will make sure that only the map phase decides the attempt's progress.

 */

@SuppressWarnings("deprecation") @Test public void testReporterProgressForMapOnlyJob() throws IOException {

  Path test=new Path(testRootTempDir,"testReporterProgressForMapOnlyJob");

  JobConf conf=new JobConf();

  conf.setMapperClass(ProgressTesterMapper.class);

  conf.setMapOutputKeyClass(Text.class);

  conf.setMaxMapAttempts(1);

  conf.setMaxReduceAttempts(0);

  RunningJob job=UtilsForTests.runJob(conf,new Path(test,"in"),new Path(test,"out"),1,0,INPUT);

  job.waitForCompletion();

  assertTrue("Job failed",job.isSuccessful());

}

Location: TestReporter.java

Content: 

/** 

 * Test  {@link Reporter}'s progress for map-reduce job.

 */

@SuppressWarnings("deprecation") @Test public void testReporterProgressForMRJob() throws IOException {

  Path test=new Path(testRootTempDir,"testReporterProgressForMRJob");

  JobConf conf=new JobConf();

  conf.setMapperClass(ProgressTesterMapper.class);

  conf.setReducerClass(ProgressTestingReducer.class);

  conf.setMapOutputKeyClass(Text.class);

  conf.setMaxMapAttempts(1);

  conf.setMaxReduceAttempts(1);

  RunningJob job=UtilsForTests.runJob(conf,new Path(test,"in"),new Path(test,"out"),1,1,INPUT);

  job.waitForCompletion();

  assertTrue("Job failed",job.isSuccessful());

}

