Location: CompositeInputSplit.java

Content: 

/** 

 * Add an InputSplit to this collection.

 * @throws IOException If capacity was not specified during constructionor if capacity has been reached.

 */

public void add(InputSplit s) throws IOException, InterruptedException {

  if (null == splits) {

    throw new IOException("Uninitialized InputSplit");

  }

  if (fill == splits.length) {

    throw new IOException("Too many splits");

  }

  splits[fill++]=s;

  totsize+=s.getLength();

}

Location: CompositeInputSplit.java

Content: 

public CompositeInputSplit(){

}

Location: CompositeInputSplit.java

Content: 

public CompositeInputSplit(int capacity){

  splits=new InputSplit[capacity];

}

Location: CompositeInputSplit.java

Content: 

/** 

 * Get the length of ith child InputSplit.

 */

public long getLength(int i) throws IOException, InterruptedException {

  return splits[i].getLength();

}

Location: CompositeInputSplit.java

Content: 

/** 

 * Collect a set of hosts from all child InputSplits.

 */

public String[] getLocations() throws IOException, InterruptedException {

  HashSet<String> hosts=new HashSet<String>();

  for (  InputSplit s : splits) {

    String[] hints=s.getLocations();

    if (hints != null && hints.length > 0) {

      for (      String host : hints) {

        hosts.add(host);

      }

    }

  }

  return hosts.toArray(new String[hosts.size()]);

}

Location: CompositeInputSplit.java

Content: 

/** 

 * getLocations from ith InputSplit.

 */

public String[] getLocation(int i) throws IOException, InterruptedException {

  return splits[i].getLocations();

}

