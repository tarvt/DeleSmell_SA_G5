Location: TestJobStatusPersistency.java

Content: 

/** 

 * Verify that completed-job store is inactive if the jobinfo path is not writable.

 * @throws Exception

 */

public void testJobStoreDisablingWithInvalidPath() throws Exception {

  MiniMRCluster mr=null;

  Path parent=new Path(TEST_DIR,"parent");

  try {

    FileSystem fs=FileSystem.getLocal(new JobConf());

    if (fs.exists(TEST_DIR) && !fs.delete(TEST_DIR,true)) {

      fail("Cannot delete TEST_DIR!");

    }

    if (fs.mkdirs(new Path(TEST_DIR,parent))) {

      if (!(new File(parent.toUri().getPath()).setWritable(false,false))) {

        fail("Cannot chmod parent!");

      }

    }

 else {

      fail("Cannot create parent dir!");

    }

    JobConf config=new JobConf();

    config.set(JTConfig.JT_PERSIST_JOBSTATUS,"true");

    config.set(JTConfig.JT_PERSIST_JOBSTATUS_HOURS,"1");

    config.set(JTConfig.JT_PERSIST_JOBSTATUS_DIR,new Path(parent,"child").toUri().getPath());

    boolean started=true;

    JobConf conf=MiniMRCluster.configureJobConf(config,"file:///",0,0,null);

    try {

      JobTracker jt=JobTracker.startTracker(conf);

    }

 catch (    IOException ex) {

      started=false;

    }

    assertFalse(started);

  }

  finally {

    new File(parent.toUri().getPath()).setWritable(true,false);

  }

}

Location: TestJobStatusPersistency.java

Content: 

/** 

 * Test if the completed job status is persisted to localfs.

 */

public void testLocalPersistency() throws Exception {

  FileSystem fs=FileSystem.getLocal(new JobConf());

  fs.delete(TEST_DIR,true);

  Properties config=new Properties();

  config.setProperty(JTConfig.JT_PERSIST_JOBSTATUS,"true");

  config.setProperty(JTConfig.JT_PERSIST_JOBSTATUS_HOURS,"1");

  config.setProperty(JTConfig.JT_PERSIST_JOBSTATUS_DIR,fs.makeQualified(TEST_DIR).toString());

  startCluster(true,config);

  JobID jobId=runJob();

  JobClient jc=new JobClient(createJobConf());

  RunningJob rj=jc.getJob(jobId);

  assertNotNull(rj);

  Path jobInfo=new Path(TEST_DIR,rj.getID() + ".info");

  assertTrue("Missing job info from the local fs",fs.exists(jobInfo));

  fs.delete(TEST_DIR,true);

}

Location: TestJobStatusPersistency.java

Content: 

public void testNonPersistency() throws Exception {

  startCluster(true,null);

  JobID jobId=runJob();

  JobClient jc=new JobClient(createJobConf());

  RunningJob rj=jc.getJob(jobId);

  assertNotNull(rj);

  stopCluster();

  startCluster(false,null);

  jc=new JobClient(createJobConf());

  rj=jc.getJob(jobId);

  assertNull(rj);

}

Location: TestJobStatusPersistency.java

Content: 

public void testPersistency() throws Exception {

  Properties config=new Properties();

  config.setProperty(JTConfig.JT_PERSIST_JOBSTATUS,"true");

  config.setProperty(JTConfig.JT_PERSIST_JOBSTATUS_HOURS,"1");

  startCluster(true,config);

  JobID jobId=runJob();

  JobClient jc=new JobClient(createJobConf());

  RunningJob rj0=jc.getJob(jobId);

  assertNotNull(rj0);

  boolean sucessfull0=rj0.isSuccessful();

  String jobName0=rj0.getJobName();

  Counters counters0=rj0.getCounters();

  TaskCompletionEvent[] events0=rj0.getTaskCompletionEvents(0);

  stopCluster();

  startCluster(false,config);

  jc=new JobClient(createJobConf());

  RunningJob rj1=jc.getJob(jobId);

  assertNotNull(rj1);

  assertEquals(sucessfull0,rj1.isSuccessful());

  assertEquals(jobName0,rj0.getJobName());

  assertEquals(counters0.size(),rj1.getCounters().size());

  TaskCompletionEvent[] events1=rj1.getTaskCompletionEvents(0);

  assertEquals(events0.length,events1.length);

  for (int i=0; i < events0.length; i++) {

    assertEquals(events0[i].getTaskAttemptId(),events1[i].getTaskAttemptId());

    assertEquals(events0[i].getTaskStatus(),events1[i].getTaskStatus());

  }

}

