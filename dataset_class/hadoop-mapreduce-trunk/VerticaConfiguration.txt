Location: VerticaConfiguration.java

Content: 

/** 

 * Sets the Vertica database connection information in the (@link Configuration)

 * @param conf the configuration

 * @param hostnames one or more hosts in the Vertica cluster

 * @param database the name of the Vertica database

 * @param username Vertica database username

 * @param password Vertica database password

 */

public static void configureVertica(Configuration conf,String[] hostnames,String database,String username,String password){

  conf.setStrings(HOSTNAMES_PROP,hostnames);

  conf.set(DATABASE_PROP,database);

  conf.set(USERNAME_PROP,username);

  conf.set(PASSWORD_PROP,password);

}

Location: VerticaConfiguration.java

Content: 

/** 

 * Sets the Vertica database connection information in the (@link Configuration)

 * @param conf the configuration

 * @param hostnames one or more hosts in the source Cluster

 * @param database the name of the source Vertica database

 * @param username for the source Vertica database

 * @param password for he source Vertica database

 * @param output_hostnames one or more hosts in the output Cluster

 * @param output_database the name of the output VerticaDatabase

 * @param output_username for the target Vertica database

 * @param output_password for the target Vertica database

 */

public static void configureVertica(Configuration conf,String[] hostnames,String database,String username,String password,String[] output_hostnames,String output_database,String output_username,String output_password){

  configureVertica(conf,hostnames,database,username,password);

  conf.setStrings(OUTPUT_HOSTNAMES_PROP,output_hostnames);

  conf.set(OUTPUT_DATABASE_PROP,output_database);

  conf.set(OUTPUT_USERNAME_PROP,output_username);

  conf.set(OUTPUT_PASSWORD_PROP,output_password);

}

Location: VerticaConfiguration.java

Content: 

/** 

 * Returns a connection to a random host in the Vertica cluster

 * @param output true if the connection is for writing

 * @throws IOException

 * @throws ClassNotFoundException

 * @throws SQLException

 */

Connection getConnection(boolean output) throws IOException, ClassNotFoundException, SQLException {

  try {

    Class.forName(VERTICA_DRIVER_CLASS);

  }

 catch (  ClassNotFoundException e) {

    throw new RuntimeException(e);

  }

  String[] hosts=conf.getStrings(HOSTNAMES_PROP);

  String user=conf.get(USERNAME_PROP);

  String pass=conf.get(PASSWORD_PROP);

  String database=conf.get(DATABASE_PROP);

  if (output) {

    hosts=conf.getStrings(OUTPUT_HOSTNAMES_PROP,hosts);

    user=conf.get(OUTPUT_USERNAME_PROP,user);

    pass=conf.get(OUTPUT_PASSWORD_PROP,pass);

    database=conf.get(OUTPUT_DATABASE_PROP,database);

  }

  if (hosts == null)   throw new IOException("Vertica requies a hostname defined by " + HOSTNAMES_PROP);

  if (hosts.length == 0)   throw new IOException("Vertica requies a hostname defined by " + HOSTNAMES_PROP);

  if (database == null)   throw new IOException("Vertica requies a database name defined by " + DATABASE_PROP);

  Random r=new Random();

  if (user == null)   throw new IOException("Vertica requires a username defined by " + USERNAME_PROP);

  return DriverManager.getConnection("jdbc:vertica://" + hosts[r.nextInt(hosts.length)] + ":5433/"+ database,user,pass);

}

Location: VerticaConfiguration.java

Content: 

/** 

 * Return whether output table is truncated before loading

 * @return Returns true if output table should be dropped before loading

 */

public boolean getDropTable(){

  return conf.getBoolean(OUTPUT_TABLE_DROP,false);

}

Location: VerticaConfiguration.java

Content: 

/** 

 * For streaming return the delimiter to separate values to the mapper

 * @return Returns delimiter used to format streaming input data

 */

public String getInputDelimiter(){

  return conf.get(INPUT_DELIMITER_PROP,DELIMITER);

}

Location: VerticaConfiguration.java

Content: 

/** 

 * Return static input parameters if set

 * @return Collection of list of objects representing input parameters

 * @throws IOException

 */

public Collection<List<Object>> getInputParameters() throws IOException {

  Collection<List<Object>> values=null;

  String[] query_params=conf.getStrings(QUERY_PARAMS_PROP);

  if (query_params != null) {

    values=new ArrayList<List<Object>>();

    for (    String str_params : query_params) {

      DataInputBuffer in=new DataInputBuffer();

      in.reset(StringUtils.hexStringToByte(str_params),str_params.length());

      VerticaRecord record=new VerticaRecord();

      record.readFields(in);

      values.add(record.getValues());

    }

  }

  return values;

}

Location: VerticaConfiguration.java

Content: 

/** 

 * For streaming return the record terminator to separate values to the mapper

 * @return Returns recorder terminator for input data

 */

public String getInputRecordTerminator(){

  return conf.get(INPUT_TERMINATOR_PROP,RECORD_TERMINATER);

}

Location: VerticaConfiguration.java

Content: 

/** 

 * Returns poll timer for optimize loop

 * @return Returns poll timer for optimize loop

 */

public Long getOptimizePollTimeout(){

  return conf.getLong(OPTIMIZE_POLL_TIMER_PROP,OPTIMIZE_POLL_TIMER);

}

Location: VerticaConfiguration.java

Content: 

/** 

 * For streaming return the delimiter used by the reducer

 * @return Returns delimiter to use for output data

 */

public String getOutputDelimiter(){

  return conf.get(OUTPUT_DELIMITER_PROP,DELIMITER);

}

Location: VerticaConfiguration.java

Content: 

/** 

 * For streaming return the record terminator used by the reducer

 * @return Returns the record terminator for output data

 */

public String getOutputRecordTerminator(){

  return conf.get(OUTPUT_TERMINATOR_PROP,RECORD_TERMINATER);

}

Location: VerticaConfiguration.java

Content: 

/** 

 * Return definition of columns for output table

 * @return Returns table definition for output table

 */

public String[] getOutputTableDef(){

  return conf.getStrings(OUTPUT_TABLE_DEF_PROP);

}

Location: VerticaConfiguration.java

Content: 

/** 

 * Return the query used to retrieve parameters for the input query (if set)

 * @return Returns the query for input parameters

 */

public String getParamsQuery(){

  return conf.get(QUERY_PARAM_PROP);

}

Location: VerticaConfiguration.java

Content: 

/** 

 * Set whether to truncate the output table before loading

 * @param drop_table

 */

public void setDropTable(boolean drop_table){

  conf.setBoolean(OUTPUT_TABLE_DROP,drop_table);

}

Location: VerticaConfiguration.java

Content: 

/** 

 * For streaming set the delimiter to separate values to the mapper

 */

public void setInputDelimiter(String delimiter){

  conf.set(INPUT_DELIMITER_PROP,delimiter);

}

Location: VerticaConfiguration.java

Content: 

/** 

 * Sets a collection of lists. Each list is passed to an input split and used as arguments to the input query.

 * @param segment_params

 * @throws IOException

 */

public void setInputParams(Collection<List<Object>> segment_params) throws IOException {

  String[] values=new String[segment_params.size()];

  int i=0;

  for (  List<Object> params : segment_params) {

    DataOutputBuffer out=new DataOutputBuffer();

    VerticaRecord record=new VerticaRecord(params,true);

    record.write(out);

    values[i++]=StringUtils.byteToHexString(out.getData());

  }

  conf.setStrings(QUERY_PARAMS_PROP,values);

}

Location: VerticaConfiguration.java

Content: 

/** 

 * For streaming set the record terminator to separate values to the mapper

 */

public void setInputRecordTerminator(String terminator){

  conf.set(INPUT_TERMINATOR_PROP,terminator);

}

Location: VerticaConfiguration.java

Content: 

/** 

 * Set the timour for the optimize poll loop

 * @param timeout

 */

public void setOptimizePollTimeout(Long timeout){

  conf.setLong(OPTIMIZE_POLL_TIMER_PROP,timeout);

}

Location: VerticaConfiguration.java

Content: 

/** 

 * For streaming set the delimiter used by the reducer

 * @param delimiter

 */

public void setOutputDelimiter(String delimiter){

  conf.set(OUTPUT_DELIMITER_PROP,delimiter);

}

Location: VerticaConfiguration.java

Content: 

/** 

 * For streaming set the record terminator used by the reducer

 * @param terminator

 */

public void setOutputRecordTerminator(String terminator){

  conf.set(OUTPUT_TERMINATOR_PROP,terminator);

}

Location: VerticaConfiguration.java

Content: 

/** 

 * Set the definition of a table for output if it needs to be created

 * @param fieldNames

 */

public void setOutputTableDef(String... fieldNames){

  conf.setStrings(OUTPUT_TABLE_DEF_PROP,fieldNames);

}

Location: VerticaConfiguration.java

Content: 

/** 

 * Query used to retrieve parameters for the input query. The result set must match the input query parameters preceisely.

 * @param segment_params_query

 */

public void setParamsQuery(String segment_params_query){

  conf.set(QUERY_PARAM_PROP,segment_params_query);

}

Location: VerticaConfiguration.java

Content: 

VerticaConfiguration(Configuration conf){

  this.conf=conf;

}

