Location: MapHost.java

Content: 

public synchronized void addKnownMap(TaskAttemptID mapId){

  maps.add(mapId);

  if (state == State.IDLE) {

    state=State.PENDING;

  }

}

Location: MapHost.java

Content: 

public synchronized List<TaskAttemptID> getAndClearKnownMaps(){

  List<TaskAttemptID> currentKnownMaps=maps;

  maps=new ArrayList<TaskAttemptID>();

  return currentKnownMaps;

}

Location: MapHost.java

Content: 

public String getBaseUrl(){

  return baseUrl;

}

Location: MapHost.java

Content: 

public synchronized int getNumKnownMapOutputs(){

  return maps.size();

}

Location: MapHost.java

Content: 

public State getState(){

  return state;

}

Location: MapHost.java

Content: 

public MapHost(String hostName,String baseUrl){

  this.hostName=hostName;

  this.baseUrl=baseUrl;

}

Location: MapHost.java

Content: 

/** 

 * Called when the node is done with its penalty or done copying.

 * @return the host's new state

 */

public synchronized State markAvailable(){

  if (maps.isEmpty()) {

    state=State.IDLE;

  }

 else {

    state=State.PENDING;

  }

  return state;

}

Location: MapHost.java

Content: 

public synchronized void markBusy(){

  state=State.BUSY;

}

Location: MapHost.java

Content: 

public synchronized void markPenalized(){

  state=State.PENALIZED;

}

Location: MapHost.java

Content: 

/** 

 * Mark the host as penalized

 */

public synchronized void penalize(){

  state=State.PENALIZED;

}

