Location: JobTrackerMetricsInst.java

Content: 

@Override public synchronized void addBlackListedMapSlots(int slots){

  numBlackListedMapSlots+=slots;

}

Location: JobTrackerMetricsInst.java

Content: 

@Override public synchronized void addBlackListedReduceSlots(int slots){

  numBlackListedReduceSlots+=slots;

}

Location: JobTrackerMetricsInst.java

Content: 

@Override public synchronized void addBlackListedTrackers(int trackers){

  numTrackersBlackListed+=trackers;

}

Location: JobTrackerMetricsInst.java

Content: 

@Override public synchronized void addOccupiedMapSlots(int slots){

  numOccupiedMapSlots+=slots;

}

Location: JobTrackerMetricsInst.java

Content: 

@Override public synchronized void addOccupiedReduceSlots(int slots){

  numOccupiedReduceSlots+=slots;

}

Location: JobTrackerMetricsInst.java

Content: 

@Override public synchronized void addPrepJob(JobConf conf,JobID id){

  numJobsPreparing++;

}

Location: JobTrackerMetricsInst.java

Content: 

@Override public synchronized void addReservedMapSlots(int slots){

  numReservedMapSlots+=slots;

}

Location: JobTrackerMetricsInst.java

Content: 

@Override public synchronized void addReservedReduceSlots(int slots){

  numReservedReduceSlots+=slots;

}

Location: JobTrackerMetricsInst.java

Content: 

@Override public synchronized void addRunningJob(JobConf conf,JobID id){

  numJobsRunning++;

}

Location: JobTrackerMetricsInst.java

Content: 

@Override public synchronized void addRunningMaps(int task){

  numRunningMaps+=task;

}

Location: JobTrackerMetricsInst.java

Content: 

@Override public synchronized void addRunningReduces(int task){

  numRunningReduces+=task;

}

Location: JobTrackerMetricsInst.java

Content: 

@Override public synchronized void addTrackers(int trackers){

  numTrackers+=trackers;

}

Location: JobTrackerMetricsInst.java

Content: 

@Override public synchronized void addWaitingMaps(JobID id,int task){

  numWaitingMaps+=task;

}

Location: JobTrackerMetricsInst.java

Content: 

@Override public synchronized void addWaitingReduces(JobID id,int task){

  numWaitingReduces+=task;

}

Location: JobTrackerMetricsInst.java

Content: 

@Override public synchronized void completeJob(JobConf conf,JobID id){

  ++numJobsCompleted;

}

Location: JobTrackerMetricsInst.java

Content: 

@Override public synchronized void completeMap(TaskAttemptID taskAttemptID){

  ++numMapTasksCompleted;

}

Location: JobTrackerMetricsInst.java

Content: 

@Override public synchronized void completeReduce(TaskAttemptID taskAttemptID){

  ++numReduceTasksCompleted;

}

Location: JobTrackerMetricsInst.java

Content: 

@Override public synchronized void decBlackListedMapSlots(int slots){

  numBlackListedMapSlots-=slots;

}

Location: JobTrackerMetricsInst.java

Content: 

@Override public synchronized void decBlackListedReduceSlots(int slots){

  numBlackListedReduceSlots-=slots;

}

Location: JobTrackerMetricsInst.java

Content: 

@Override public synchronized void decBlackListedTrackers(int trackers){

  numTrackersBlackListed-=trackers;

}

Location: JobTrackerMetricsInst.java

Content: 

@Override public synchronized void decOccupiedMapSlots(int slots){

  numOccupiedMapSlots-=slots;

}

Location: JobTrackerMetricsInst.java

Content: 

@Override public synchronized void decOccupiedReduceSlots(int slots){

  numOccupiedReduceSlots-=slots;

}

Location: JobTrackerMetricsInst.java

Content: 

@Override public synchronized void decPrepJob(JobConf conf,JobID id){

  numJobsPreparing--;

}

Location: JobTrackerMetricsInst.java

Content: 

@Override public synchronized void decReservedMapSlots(int slots){

  numReservedMapSlots-=slots;

}

Location: JobTrackerMetricsInst.java

Content: 

@Override public synchronized void decReservedReduceSlots(int slots){

  numReservedReduceSlots-=slots;

}

Location: JobTrackerMetricsInst.java

Content: 

@Override public synchronized void decRunningJob(JobConf conf,JobID id){

  numJobsRunning--;

}

Location: JobTrackerMetricsInst.java

Content: 

@Override public synchronized void decRunningMaps(int task){

  numRunningMaps-=task;

}

Location: JobTrackerMetricsInst.java

Content: 

@Override public synchronized void decRunningReduces(int task){

  numRunningReduces-=task;

}

Location: JobTrackerMetricsInst.java

Content: 

@Override public synchronized void decTrackers(int trackers){

  numTrackers-=trackers;

}

Location: JobTrackerMetricsInst.java

Content: 

@Override public synchronized void decWaitingMaps(JobID id,int task){

  numWaitingMaps-=task;

}

Location: JobTrackerMetricsInst.java

Content: 

@Override public synchronized void decWaitingReduces(JobID id,int task){

  numWaitingReduces-=task;

}

Location: JobTrackerMetricsInst.java

Content: 

@Override public synchronized void failedJob(JobConf conf,JobID id){

  numJobsFailed++;

}

Location: JobTrackerMetricsInst.java

Content: 

@Override public synchronized void failedMap(TaskAttemptID taskAttemptID){

  ++numMapTasksFailed;

  addWaitingMaps(taskAttemptID.getJobID(),1);

}

Location: JobTrackerMetricsInst.java

Content: 

@Override public synchronized void failedReduce(TaskAttemptID taskAttemptID){

  ++numReduceTasksFailed;

  addWaitingReduces(taskAttemptID.getJobID(),1);

}

Location: JobTrackerMetricsInst.java

Content: 

@Override public synchronized void heartbeat(){

  ++numHeartbeats;

}

Location: JobTrackerMetricsInst.java

Content: 

public JobTrackerMetricsInst(JobTracker tracker,JobConf conf){

  super(tracker,conf);

  String sessionId=conf.getSessionId();

  JvmMetrics.init("JobTracker",sessionId);

  MetricsContext context=MetricsUtil.getContext("mapred");

  metricsRecord=MetricsUtil.createRecord(context,"jobtracker");

  metricsRecord.setTag("sessionId",sessionId);

  context.registerUpdater(this);

}

Location: JobTrackerMetricsInst.java

Content: 

@Override public synchronized void killedJob(JobConf conf,JobID id){

  numJobsKilled++;

}

Location: JobTrackerMetricsInst.java

Content: 

@Override public synchronized void killedMap(TaskAttemptID taskAttemptID){

  numMapTasksKilled++;

}

Location: JobTrackerMetricsInst.java

Content: 

@Override public synchronized void killedReduce(TaskAttemptID taskAttemptID){

  numReduceTasksKilled++;

}

Location: JobTrackerMetricsInst.java

Content: 

@Override public synchronized void launchDataLocalMap(TaskAttemptID taskAttemptID){

  ++numDataLocalMaps;

}

Location: JobTrackerMetricsInst.java

Content: 

@Override public synchronized void launchMap(TaskAttemptID taskAttemptID){

  ++numMapTasksLaunched;

  decWaitingMaps(taskAttemptID.getJobID(),1);

}

Location: JobTrackerMetricsInst.java

Content: 

@Override public synchronized void launchRackLocalMap(TaskAttemptID taskAttemptID){

  ++numRackLocalMaps;

}

Location: JobTrackerMetricsInst.java

Content: 

@Override public synchronized void launchReduce(TaskAttemptID taskAttemptID){

  ++numReduceTasksLaunched;

  decWaitingReduces(taskAttemptID.getJobID(),1);

}

Location: JobTrackerMetricsInst.java

Content: 

@Override public synchronized void setDecommissionedTrackers(int trackers){

  numTrackersDecommissioned=trackers;

}

Location: JobTrackerMetricsInst.java

Content: 

@Override public synchronized void setMapSlots(int slots){

  numMapSlots=slots;

}

Location: JobTrackerMetricsInst.java

Content: 

@Override public synchronized void setReduceSlots(int slots){

  numReduceSlots=slots;

}

Location: JobTrackerMetricsInst.java

Content: 

@Override public synchronized void speculateMap(TaskAttemptID taskAttemptID){

  ++numSpeculativeMaps;

}

Location: JobTrackerMetricsInst.java

Content: 

@Override public synchronized void speculateReduce(TaskAttemptID taskAttemptID){

  ++numSpeculativeReduces;

}

Location: JobTrackerMetricsInst.java

Content: 

@Override public synchronized void submitJob(JobConf conf,JobID id){

  ++numJobsSubmitted;

}

