Location: FileOutputCommitter.java

Content: 

@Override public void abortJob(JobContext context,int runState) throws IOException {

  cleanupJob(context);

}

Location: FileOutputCommitter.java

Content: 

/** 

 * Delete the temporary directory, including all of the work directories.

 * @param context the job's context

 */

@Override public void abortJob(JobContext context,JobStatus.State state) throws IOException {

  cleanupJob(context);

}

Location: FileOutputCommitter.java

Content: 

/** 

 * Delete the work directory

 * @throws IOException 

 */

@Override public void abortTask(TaskAttemptContext context) throws IOException {

  if (workPath != null) {

    context.progress();

    outputFileSystem.delete(workPath,true);

  }

}

Location: FileOutputCommitter.java

Content: 

@Override @Deprecated public void cleanupJob(JobContext context) throws IOException {

  if (outputPath != null) {

    Path tmpDir=new Path(outputPath,FileOutputCommitter.TEMP_DIR_NAME);

    FileSystem fileSys=tmpDir.getFileSystem(context.getConfiguration());

    if (fileSys.exists(tmpDir)) {

      fileSys.delete(tmpDir,true);

    }

  }

 else {

    LOG.warn("Output Path is null in cleanup");

  }

}

Location: FileOutputCommitter.java

Content: 

/** 

 * Delete the temporary directory, including all of the work directories. Create a _SUCCESS file to make it as successful.

 * @param context the job's context

 */

public void commitJob(JobContext context) throws IOException {

  cleanupJob(context);

  if (shouldMarkOutputDir(context.getConfiguration())) {

    markOutputDirSuccessful(context);

  }

}

Location: FileOutputCommitter.java

Content: 

/** 

 * Move the files from the work directory to the job output directory

 * @param context the task context

 */

public void commitTask(TaskAttemptContext context) throws IOException {

  TaskAttemptID attemptId=context.getTaskAttemptID();

  if (workPath != null) {

    context.progress();

    if (outputFileSystem.exists(workPath)) {

      moveTaskOutputs(context,outputFileSystem,outputPath,workPath);

      if (!outputFileSystem.delete(workPath,true)) {

        LOG.warn("Failed to delete the temporary output" + " directory of task: " + attemptId + " - "+ workPath);

      }

      LOG.info("Saved output of task '" + attemptId + "' to "+ outputPath);

    }

  }

}

Location: FileOutputCommitter.java

Content: 

/** 

 * Create a file output committer

 * @param outputPath the job's output path

 * @param context the task's context

 * @throws IOException

 */

public FileOutputCommitter(Path outputPath,TaskAttemptContext context) throws IOException {

  if (outputPath != null) {

    this.outputPath=outputPath;

    outputFileSystem=outputPath.getFileSystem(context.getConfiguration());

    workPath=new Path(outputPath,(FileOutputCommitter.TEMP_DIR_NAME + Path.SEPARATOR + "_"+ context.getTaskAttemptID().toString())).makeQualified(outputFileSystem);

  }

}

Location: FileOutputCommitter.java

Content: 

/** 

 * Find the final name of a given output file, given the job output directory and the work directory.

 * @param jobOutputDir the job's output directory

 * @param taskOutput the specific task output file

 * @param taskOutputPath the job's work directory

 * @return the final path for the specific output file

 * @throws IOException

 */

private Path getFinalPath(Path jobOutputDir,Path taskOutput,Path taskOutputPath) throws IOException {

  URI taskOutputUri=taskOutput.toUri();

  URI relativePath=taskOutputPath.toUri().relativize(taskOutputUri);

  if (taskOutputUri == relativePath) {

    throw new IOException("Can not get the relative path: base = " + taskOutputPath + " child = "+ taskOutput);

  }

  if (relativePath.getPath().length() > 0) {

    return new Path(jobOutputDir,relativePath.getPath());

  }

 else {

    return jobOutputDir;

  }

}

Location: FileOutputCommitter.java

Content: 

Path getTempTaskOutputPath(TaskAttemptContext taskContext) throws IOException {

  JobConf conf=taskContext.getJobConf();

  Path outputPath=FileOutputFormat.getOutputPath(conf);

  if (outputPath != null) {

    Path p=new Path(outputPath,(FileOutputCommitter.TEMP_DIR_NAME + Path.SEPARATOR + "_"+ taskContext.getTaskAttemptID().toString()));

    FileSystem fs=p.getFileSystem(conf);

    return p.makeQualified(fs);

  }

  return null;

}

Location: FileOutputCommitter.java

Content: 

/** 

 * Get the directory that the task should write results into

 * @return the work directory

 * @throws IOException

 */

public Path getWorkPath() throws IOException {

  return workPath;

}

Location: FileOutputCommitter.java

Content: 

Path getWorkPath(TaskAttemptContext taskContext,Path basePath) throws IOException {

  Path jobTmpDir=new Path(basePath,FileOutputCommitter.TEMP_DIR_NAME);

  FileSystem fs=jobTmpDir.getFileSystem(taskContext.getJobConf());

  if (!fs.exists(jobTmpDir)) {

    throw new IOException("The temporary job-output directory " + jobTmpDir.toString() + " doesn't exist!");

  }

  String taskid=taskContext.getTaskAttemptID().toString();

  Path taskTmpDir=new Path(jobTmpDir,"_" + taskid);

  if (!fs.mkdirs(taskTmpDir)) {

    throw new IOException("Mkdirs failed to create " + taskTmpDir.toString());

  }

  return taskTmpDir;

}

Location: FileOutputCommitter.java

Content: 

private void markOutputDirSuccessful(JobContext context) throws IOException {

  JobConf conf=context.getJobConf();

  Path outputPath=FileOutputFormat.getOutputPath(conf);

  if (outputPath != null) {

    FileSystem fileSys=outputPath.getFileSystem(conf);

    Path filePath=new Path(outputPath,SUCCEEDED_FILE_NAME);

    fileSys.create(filePath).close();

  }

}

Location: FileOutputCommitter.java

Content: 

private void markOutputDirSuccessful(MRJobConfig context) throws IOException {

  if (outputPath != null) {

    Path filePath=new Path(outputPath,SUCCEEDED_FILE_NAME);

    outputFileSystem.create(filePath).close();

  }

}

Location: FileOutputCommitter.java

Content: 

/** 

 * Move all of the files from the work directory to the final output

 * @param context the task context

 * @param fs the output file system

 * @param jobOutputDir the final output direcotry

 * @param taskOutput the work path

 * @throws IOException

 */

private void moveTaskOutputs(TaskAttemptContext context,FileSystem fs,Path jobOutputDir,Path taskOutput) throws IOException {

  TaskAttemptID attemptId=context.getTaskAttemptID();

  context.progress();

  if (fs.isFile(taskOutput)) {

    Path finalOutputPath=getFinalPath(jobOutputDir,taskOutput,workPath);

    if (!fs.rename(taskOutput,finalOutputPath)) {

      if (!fs.delete(finalOutputPath,true)) {

        throw new IOException("Failed to delete earlier output of task: " + attemptId);

      }

      if (!fs.rename(taskOutput,finalOutputPath)) {

        throw new IOException("Failed to save output of task: " + attemptId);

      }

    }

    LOG.debug("Moved " + taskOutput + " to "+ finalOutputPath);

  }

 else   if (fs.getFileStatus(taskOutput).isDirectory()) {

    FileStatus[] paths=fs.listStatus(taskOutput);

    Path finalOutputPath=getFinalPath(jobOutputDir,taskOutput,workPath);

    fs.mkdirs(finalOutputPath);

    if (paths != null) {

      for (      FileStatus path : paths) {

        moveTaskOutputs(context,fs,jobOutputDir,path.getPath());

      }

    }

  }

}

Location: FileOutputCommitter.java

Content: 

/** 

 * Did this task write any files in the work directory?

 * @param context the task's context

 */

@Override public boolean needsTaskCommit(TaskAttemptContext context) throws IOException {

  return workPath != null && outputFileSystem.exists(workPath);

}

Location: FileOutputCommitter.java

Content: 

/** 

 * Create the temporary directory that is the root of all of the task  work directories.

 * @param context the job's context

 */

public void setupJob(JobContext context) throws IOException {

  if (outputPath != null) {

    Path tmpDir=new Path(outputPath,FileOutputCommitter.TEMP_DIR_NAME);

    FileSystem fileSys=tmpDir.getFileSystem(context.getConfiguration());

    if (!fileSys.mkdirs(tmpDir)) {

      LOG.error("Mkdirs failed to create " + tmpDir.toString());

    }

  }

}

Location: FileOutputCommitter.java

Content: 

/** 

 * No task setup required.

 */

@Override public void setupTask(TaskAttemptContext context) throws IOException {

}

Location: FileOutputCommitter.java

Content: 

private boolean shouldMarkOutputDir(Configuration conf){

  return conf.getBoolean(SUCCESSFUL_JOB_OUTPUT_DIR_MARKER,true);

}

Location: FileOutputCommitter.java

Content: 

private boolean shouldMarkOutputDir(JobConf conf){

  return conf.getBoolean(SUCCESSFUL_JOB_OUTPUT_DIR_MARKER,true);

}

