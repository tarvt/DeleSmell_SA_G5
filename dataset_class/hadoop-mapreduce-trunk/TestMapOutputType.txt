Location: TestMapOutputType.java

Content: 

public void testKeyMismatch() throws Exception {

  hongshuai();

  Path testdir=new Path("build/test/test.mapred.spill");

  Path inDir=new Path(testdir,"in");

  Path outDir=new Path(testdir,"out");

  FileSystem fs=FileSystem.get(conf);

  fs.delete(testdir,true);

  conf.setInt(JobContext.IO_SORT_MB,1);

  conf.setInputFormat(SequenceFileInputFormat.class);

  FileInputFormat.setInputPaths(conf,inDir);

  FileOutputFormat.setOutputPath(conf,outDir);

  conf.setMapperClass(TextGen.class);

  conf.setReducerClass(TextReduce.class);

  conf.setOutputKeyClass(Text.class);

  conf.setOutputValueClass(Text.class);

  conf.setOutputFormat(SequenceFileOutputFormat.class);

  if (!fs.mkdirs(testdir)) {

    throw new IOException("Mkdirs failed to create " + testdir.toString());

  }

  if (!fs.mkdirs(inDir)) {

    throw new IOException("Mkdirs failed to create " + inDir.toString());

  }

  Path inFile=new Path(inDir,"part0");

  SequenceFile.Writer writer=SequenceFile.createWriter(fs,conf,inFile,Text.class,Text.class);

  writer.append(new Text("rec: 1"),new Text("Hello"));

  writer.close();

  jc=new JobClient(conf);

  conf.setMapOutputKeyClass(IntWritable.class);

  conf.setMapOutputValueClass(IntWritable.class);

  RunningJob r_job=jc.submitJob(conf);

  while (!r_job.isComplete()) {

    Thread.sleep(1000);

  }

  if (r_job.isSuccessful()) {

    fail("Oops! The job was supposed to break due to an exception");

  }

}

Location: TestMapOutputType.java

Content: 

public void testNoMismatch() throws Exception {

  hongshuai();

  Path testdir=new Path("build/test/test.mapred.spill");

  Path inDir=new Path(testdir,"in");

  Path outDir=new Path(testdir,"out");

  FileSystem fs=FileSystem.get(conf);

  fs.delete(testdir,true);

  conf.setInt(JobContext.IO_SORT_MB,1);

  conf.setInputFormat(SequenceFileInputFormat.class);

  FileInputFormat.setInputPaths(conf,inDir);

  FileOutputFormat.setOutputPath(conf,outDir);

  conf.setMapperClass(TextGen.class);

  conf.setReducerClass(TextReduce.class);

  conf.setOutputKeyClass(Text.class);

  conf.setOutputValueClass(Text.class);

  conf.setOutputFormat(SequenceFileOutputFormat.class);

  if (!fs.mkdirs(testdir)) {

    throw new IOException("Mkdirs failed to create " + testdir.toString());

  }

  if (!fs.mkdirs(inDir)) {

    throw new IOException("Mkdirs failed to create " + inDir.toString());

  }

  Path inFile=new Path(inDir,"part0");

  SequenceFile.Writer writer=SequenceFile.createWriter(fs,conf,inFile,Text.class,Text.class);

  writer.append(new Text("rec: 1"),new Text("Hello"));

  writer.close();

  jc=new JobClient(conf);

  conf.setMapOutputKeyClass(Text.class);

  conf.setMapOutputValueClass(Text.class);

  RunningJob r_job=jc.submitJob(conf);

  while (!r_job.isComplete()) {

    Thread.sleep(1000);

  }

  if (!r_job.isSuccessful()) {

    fail("Oops! The job broke due to an unexpected error");

  }

}

Location: TestMapOutputType.java

Content: 

public void testValueMismatch() throws Exception {

  hongshuai();

  Path testdir=new Path("build/test/test.mapred.spill");

  Path inDir=new Path(testdir,"in");

  Path outDir=new Path(testdir,"out");

  FileSystem fs=FileSystem.get(conf);

  fs.delete(testdir,true);

  conf.setInt(JobContext.IO_SORT_MB,1);

  conf.setInputFormat(SequenceFileInputFormat.class);

  FileInputFormat.setInputPaths(conf,inDir);

  FileOutputFormat.setOutputPath(conf,outDir);

  conf.setMapperClass(TextGen.class);

  conf.setReducerClass(TextReduce.class);

  conf.setOutputKeyClass(Text.class);

  conf.setOutputValueClass(Text.class);

  conf.setOutputFormat(SequenceFileOutputFormat.class);

  if (!fs.mkdirs(testdir)) {

    throw new IOException("Mkdirs failed to create " + testdir.toString());

  }

  if (!fs.mkdirs(inDir)) {

    throw new IOException("Mkdirs failed to create " + inDir.toString());

  }

  Path inFile=new Path(inDir,"part0");

  SequenceFile.Writer writer=SequenceFile.createWriter(fs,conf,inFile,Text.class,Text.class);

  writer.append(new Text("rec: 1"),new Text("Hello"));

  writer.close();

  jc=new JobClient(conf);

  conf.setMapOutputKeyClass(Text.class);

  conf.setMapOutputValueClass(IntWritable.class);

  RunningJob r_job=jc.submitJob(conf);

  while (!r_job.isComplete()) {

    Thread.sleep(1000);

  }

  if (r_job.isSuccessful()) {

    fail("Oops! The job was supposed to break due to an exception");

  }

}

