Location: TestResourceEstimation.java

Content: 

public void testResourceEstimator() throws Exception {

  final int maps=100;

  final int reduces=2;

  final int singleMapOutputSize=1000;

  JobConf jc=new JobConf();

  JobID jid=new JobID("testJT",0);

  jc.setNumMapTasks(maps);

  jc.setNumReduceTasks(reduces);

  JobInProgress jip=new JobInProgress(jid,jc,UtilsForTests.getJobTracker());

  ResourceEstimator re=new ResourceEstimator(jip);

  for (int i=0; i < maps / 10; ++i) {

    long estOutSize=re.getEstimatedMapOutputSize();

    System.out.println(estOutSize);

    assertEquals(0,estOutSize);

    TaskStatus ts=new MapTaskStatus();

    ts.setOutputSize(singleMapOutputSize);

    JobSplit.TaskSplitMetaInfo split=new JobSplit.TaskSplitMetaInfo(new String[0],0,0);

    TaskInProgress tip=new TaskInProgress(jid,"",split,null,jc,jip,0,1);

    re.updateWithCompletedTask(ts,tip);

  }

  assertEquals(2 * singleMapOutputSize,re.getEstimatedMapOutputSize());

  assertEquals(2 * singleMapOutputSize * maps / reduces,re.getEstimatedReduceInputSize());

}

Location: TestResourceEstimation.java

Content: 

public void testWithNonZeroInput() throws Exception {

  final int maps=100;

  final int reduces=2;

  final int singleMapOutputSize=1000;

  final int singleMapInputSize=500;

  JobConf jc=new JobConf();

  JobID jid=new JobID("testJT",0);

  jc.setNumMapTasks(maps);

  jc.setNumReduceTasks(reduces);

  JobInProgress jip=new JobInProgress(jid,jc,UtilsForTests.getJobTracker()){

    long getInputLength(){

      return singleMapInputSize * desiredMaps();

    }

  }

;

  ResourceEstimator re=new ResourceEstimator(jip);

  for (int i=0; i < maps / 10; ++i) {

    long estOutSize=re.getEstimatedMapOutputSize();

    System.out.println(estOutSize);

    assertEquals(0,estOutSize);

    TaskStatus ts=new MapTaskStatus();

    ts.setOutputSize(singleMapOutputSize);

    JobSplit.TaskSplitMetaInfo split=new JobSplit.TaskSplitMetaInfo(new String[0],0,singleMapInputSize);

    TaskInProgress tip=new TaskInProgress(jid,"",split,null,jc,jip,0,1);

    re.updateWithCompletedTask(ts,tip);

  }

  assertEquals(2 * singleMapOutputSize,re.getEstimatedMapOutputSize());

  assertEquals(2 * singleMapOutputSize * maps / reduces,re.getEstimatedReduceInputSize());

  TaskStatus ts=new MapTaskStatus();

  ts.setOutputSize(singleMapOutputSize);

  JobSplit.TaskSplitMetaInfo split=new JobSplit.TaskSplitMetaInfo(new String[0],0,0);

  TaskInProgress tip=new TaskInProgress(jid,"",split,null,jc,jip,0,1);

  re.updateWithCompletedTask(ts,tip);

  long expectedTotalMapOutSize=(singleMapOutputSize * 11) * ((maps * singleMapInputSize) + maps) / ((singleMapInputSize + 1) * 10 + 1);

  assertEquals(2 * expectedTotalMapOutSize / maps,re.getEstimatedMapOutputSize());

}

