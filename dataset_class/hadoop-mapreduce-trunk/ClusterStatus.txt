Location: ClusterStatus.java

Content: 

ClusterStatus(){

}

Location: ClusterStatus.java

Content: 

/** 

 * Construct a new cluster status.

 * @param activeTrackers active tasktrackers in the cluster

 * @param blacklistedTrackers blacklisted tasktrackers in the cluster

 * @param ttExpiryInterval the tasktracker expiry interval

 * @param maps no. of currently running map-tasks in the cluster

 * @param reduces no. of currently running reduce-tasks in the cluster

 * @param maxMaps the maximum no. of map tasks in the cluster

 * @param maxReduces the maximum no. of reduce tasks in the cluster

 * @param status the {@link JobTrackerStatus} of the <code>JobTracker</code>

 */

ClusterStatus(Collection<String> activeTrackers,Collection<BlackListInfo> blacklistedTrackers,long ttExpiryInterval,int maps,int reduces,int maxMaps,int maxReduces,JobTrackerStatus status){

  this(activeTrackers,blacklistedTrackers,ttExpiryInterval,maps,reduces,maxMaps,maxReduces,status,0);

}

Location: ClusterStatus.java

Content: 

/** 

 * Construct a new cluster status.

 * @param activeTrackers active tasktrackers in the cluster

 * @param blackListedTrackerInfo blacklisted tasktrackers information in the cluster

 * @param ttExpiryInterval the tasktracker expiry interval

 * @param maps no. of currently running map-tasks in the cluster

 * @param reduces no. of currently running reduce-tasks in the cluster

 * @param maxMaps the maximum no. of map tasks in the cluster

 * @param maxReduces the maximum no. of reduce tasks in the cluster

 * @param status the {@link JobTrackerStatus} of the <code>JobTracker</code>

 * @param numDecommissionNodes number of decommission trackers

 */

ClusterStatus(Collection<String> activeTrackers,Collection<BlackListInfo> blackListedTrackerInfo,long ttExpiryInterval,int maps,int reduces,int maxMaps,int maxReduces,JobTrackerStatus status,int numDecommissionNodes){

  this(activeTrackers.size(),blackListedTrackerInfo.size(),ttExpiryInterval,maps,reduces,maxMaps,maxReduces,status,numDecommissionNodes);

  this.activeTrackers=activeTrackers;

  this.blacklistedTrackersInfo=blackListedTrackerInfo;

}

Location: ClusterStatus.java

Content: 

/** 

 * Construct a new cluster status.

 * @param trackers no. of tasktrackers in the cluster

 * @param blacklists no of blacklisted task trackers in the cluster

 * @param ttExpiryInterval the tasktracker expiry interval

 * @param maps no. of currently running map-tasks in the cluster

 * @param reduces no. of currently running reduce-tasks in the cluster

 * @param maxMaps the maximum no. of map tasks in the cluster

 * @param maxReduces the maximum no. of reduce tasks in the cluster

 * @param status the {@link JobTrackerStatus} of the <code>JobTracker</code>

 */

ClusterStatus(int trackers,int blacklists,long ttExpiryInterval,int maps,int reduces,int maxMaps,int maxReduces,JobTrackerStatus status){

  this(trackers,blacklists,ttExpiryInterval,maps,reduces,maxMaps,maxReduces,status,0);

}

Location: ClusterStatus.java

Content: 

/** 

 * Construct a new cluster status.

 * @param trackers no. of tasktrackers in the cluster

 * @param blacklists no of blacklisted task trackers in the cluster

 * @param ttExpiryInterval the tasktracker expiry interval

 * @param maps no. of currently running map-tasks in the cluster

 * @param reduces no. of currently running reduce-tasks in the cluster

 * @param maxMaps the maximum no. of map tasks in the cluster

 * @param maxReduces the maximum no. of reduce tasks in the cluster

 * @param status the {@link JobTrackerStatus} of the <code>JobTracker</code>

 * @param numDecommissionedNodes number of decommission trackers

 */

ClusterStatus(int trackers,int blacklists,long ttExpiryInterval,int maps,int reduces,int maxMaps,int maxReduces,JobTrackerStatus status,int numDecommissionedNodes){

  numActiveTrackers=trackers;

  numBlacklistedTrackers=blacklists;

  this.numExcludedNodes=numDecommissionedNodes;

  this.ttExpiryInterval=ttExpiryInterval;

  map_tasks=maps;

  reduce_tasks=reduces;

  max_map_tasks=maxMaps;

  max_reduce_tasks=maxReduces;

  this.status=status;

}

Location: ClusterStatus.java

Content: 

/** 

 * Get the names of task trackers in the cluster.

 * @return the active task trackers in the cluster.

 */

public Collection<String> getActiveTrackerNames(){

  return activeTrackers;

}

Location: ClusterStatus.java

Content: 

/** 

 * Get the names of task trackers in the cluster.

 * @return the blacklisted task trackers in the cluster.

 */

public Collection<String> getBlacklistedTrackerNames(){

  ArrayList<String> blacklistedTrackers=new ArrayList<String>();

  for (  BlackListInfo bi : blacklistedTrackersInfo) {

    blacklistedTrackers.add(bi.getTrackerName());

  }

  return blacklistedTrackers;

}

Location: ClusterStatus.java

Content: 

/** 

 * Gets the list of blacklisted trackers along with reasons for blacklisting.

 * @return the collection of {@link BlackListInfo} objects. 

 */

public Collection<BlackListInfo> getBlackListedTrackersInfo(){

  return blacklistedTrackersInfo;

}

Location: ClusterStatus.java

Content: 

/** 

 * Get the maximum capacity for running map tasks in the cluster.

 * @return the maximum capacity for running map tasks in the cluster.

 */

public int getMaxMapTasks(){

  return max_map_tasks;

}

Location: ClusterStatus.java

Content: 

/** 

 * Get the maximum capacity for running reduce tasks in the cluster.

 * @return the maximum capacity for running reduce tasks in the cluster.

 */

public int getMaxReduceTasks(){

  return max_reduce_tasks;

}

Location: ClusterStatus.java

Content: 

/** 

 * Get the number of excluded hosts in the cluster.

 * @return the number of excluded hosts in the cluster.

 */

public int getNumExcludedNodes(){

  return numExcludedNodes;

}

Location: ClusterStatus.java

Content: 

/** 

 * Get the tasktracker expiry interval for the cluster

 * @return the expiry interval in msec

 */

public long getTTExpiryInterval(){

  return ttExpiryInterval;

}

