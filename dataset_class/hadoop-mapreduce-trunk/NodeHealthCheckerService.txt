Location: NodeHealthCheckerService.java

Content: 

/** 

 * Returns output from health script. if node is healthy then an empty string is returned.

 * @return output from health script

 */

private String getHealthReport(){

  return healthReport;

}

Location: NodeHealthCheckerService.java

Content: 

/** 

 * Returns time stamp when node health script was last run.

 * @return timestamp when node health script was last run

 */

private long getLastReportedTime(){

  return lastReportedTime;

}

Location: NodeHealthCheckerService.java

Content: 

/** 

 * Test method to directly access the timer which node  health checker would use.

 * @return Timer task

 */

TimerTask getTimer(){

  return timer;

}

Location: NodeHealthCheckerService.java

Content: 

private void initialize(Configuration conf){

  this.nodeHealthScript=conf.get(TTConfig.TT_HEALTH_CHECKER_SCRIPT_PATH);

  this.intervalTime=conf.getLong(TTConfig.TT_HEALTH_CHECKER_INTERVAL,DEFAULT_HEALTH_CHECK_INTERVAL);

  this.scriptTimeout=conf.getLong(TTConfig.TT_HEALTH_CHECKER_SCRIPT_TIMEOUT,DEFAULT_HEALTH_SCRIPT_FAILURE_INTERVAL);

  String[] args=conf.getStrings(TTConfig.TT_HEALTH_CHECKER_SCRIPT_ARGS,new String[]{});

  timer=new NodeHealthMonitorExecutor(args);

}

Location: NodeHealthCheckerService.java

Content: 

/** 

 * Gets the if the node is healthy or not

 * @return true if node is healthy

 */

private boolean isHealthy(){

  return isHealthy;

}

Location: NodeHealthCheckerService.java

Content: 

public NodeHealthCheckerService(Configuration conf){

  this.conf=conf;

  this.lastReportedTime=System.currentTimeMillis();

  this.isHealthy=true;

  this.healthReport="";

  initialize(conf);

}

Location: NodeHealthCheckerService.java

Content: 

/** 

 * Sets the health report from the node health script.

 * @param healthReport

 */

private synchronized void setHealthReport(String healthReport){

  this.healthReport=healthReport;

}

Location: NodeHealthCheckerService.java

Content: 

private synchronized void setHealthStatus(boolean isHealthy,String output){

  this.setHealthy(isHealthy);

  this.setHealthReport(output);

}

Location: NodeHealthCheckerService.java

Content: 

private synchronized void setHealthStatus(boolean isHealthy,String output,long time){

  this.setHealthStatus(isHealthy,output);

  this.setLastReportedTime(time);

}

Location: NodeHealthCheckerService.java

Content: 

/** 

 * Method to populate the fields for the  {@link TaskTrackerHealthStatus}

 * @param healthStatus

 */

synchronized void setHealthStatus(TaskTrackerHealthStatus healthStatus){

  healthStatus.setNodeHealthy(this.isHealthy());

  healthStatus.setHealthReport(this.getHealthReport());

  healthStatus.setLastReported(this.getLastReportedTime());

}

Location: NodeHealthCheckerService.java

Content: 

/** 

 * Sets if the node is healhty or not.

 * @param isHealthy if or not node is healthy

 */

private synchronized void setHealthy(boolean isHealthy){

  this.isHealthy=isHealthy;

}

Location: NodeHealthCheckerService.java

Content: 

/** 

 * Sets the last run time of the node health script.

 * @param lastReportedTime

 */

private synchronized void setLastReportedTime(long lastReportedTime){

  this.lastReportedTime=lastReportedTime;

}

Location: NodeHealthCheckerService.java

Content: 

/** 

 * Method used to determine if or not node health monitoring service should be started or not. Returns true if following conditions are met: <ol> <li>Path to Node health check script is not empty</li> <li>Node health check script file exists</li> </ol>

 * @param conf

 * @return true if node health monitoring service can be started.

 */

static boolean shouldRun(Configuration conf){

  String nodeHealthScript=conf.get(TTConfig.TT_HEALTH_CHECKER_SCRIPT_PATH);

  if (nodeHealthScript == null || nodeHealthScript.trim().isEmpty()) {

    return false;

  }

  File f=new File(nodeHealthScript);

  return f.exists() && f.canExecute();

}

