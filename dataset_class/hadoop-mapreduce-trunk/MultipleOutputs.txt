Location: MultipleOutputs.java

Content: 

/** 

 * Adds a multi named output for the job. <p/>

 * @param conf              job conf to add the named output

 * @param namedOutput       named output name, it has to be a word, lettersand numbers only, cannot be the word 'part' as that is reserved for the default output.

 * @param outputFormatClass OutputFormat class.

 * @param keyClass          key class

 * @param valueClass        value class

 */

public static void addMultiNamedOutput(JobConf conf,String namedOutput,Class<? extends OutputFormat> outputFormatClass,Class<?> keyClass,Class<?> valueClass){

  addNamedOutput(conf,namedOutput,true,outputFormatClass,keyClass,valueClass);

}

Location: MultipleOutputs.java

Content: 

/** 

 * Adds a named output for the job. <p/>

 * @param conf              job conf to add the named output

 * @param namedOutput       named output name, it has to be a word, lettersand numbers only, cannot be the word 'part' as that is reserved for the default output.

 * @param multi             indicates if the named output is multi

 * @param outputFormatClass OutputFormat class.

 * @param keyClass          key class

 * @param valueClass        value class

 */

private static void addNamedOutput(JobConf conf,String namedOutput,boolean multi,Class<? extends OutputFormat> outputFormatClass,Class<?> keyClass,Class<?> valueClass){

  checkNamedOutputName(namedOutput);

  checkNamedOutput(conf,namedOutput,true);

  conf.set(NAMED_OUTPUTS,conf.get(NAMED_OUTPUTS,"") + " " + namedOutput);

  conf.setClass(MO_PREFIX + namedOutput + FORMAT,outputFormatClass,OutputFormat.class);

  conf.setClass(MO_PREFIX + namedOutput + KEY,keyClass,Object.class);

  conf.setClass(MO_PREFIX + namedOutput + VALUE,valueClass,Object.class);

  conf.setBoolean(MO_PREFIX + namedOutput + MULTI,multi);

}

Location: MultipleOutputs.java

Content: 

/** 

 * Adds a named output for the job. <p/>

 * @param conf              job conf to add the named output

 * @param namedOutput       named output name, it has to be a word, lettersand numbers only, cannot be the word 'part' as that is reserved for the default output.

 * @param outputFormatClass OutputFormat class.

 * @param keyClass          key class

 * @param valueClass        value class

 */

public static void addNamedOutput(JobConf conf,String namedOutput,Class<? extends OutputFormat> outputFormatClass,Class<?> keyClass,Class<?> valueClass){

  addNamedOutput(conf,namedOutput,false,outputFormatClass,keyClass,valueClass);

}

Location: MultipleOutputs.java

Content: 

/** 

 * Adds a named output for the job. <p/>

 * @param job               job to add the named output

 * @param namedOutput       named output name, it has to be a word, lettersand numbers only, cannot be the word 'part' as that is reserved for the default output.

 * @param outputFormatClass OutputFormat class.

 * @param keyClass          key class

 * @param valueClass        value class

 */

@SuppressWarnings("unchecked") public static void addNamedOutput(Job job,String namedOutput,Class<? extends OutputFormat> outputFormatClass,Class<?> keyClass,Class<?> valueClass){

  checkNamedOutputName(job,namedOutput,true);

  Configuration conf=job.getConfiguration();

  conf.set(MULTIPLE_OUTPUTS,conf.get(MULTIPLE_OUTPUTS,"") + " " + namedOutput);

  conf.setClass(MO_PREFIX + namedOutput + FORMAT,outputFormatClass,OutputFormat.class);

  conf.setClass(MO_PREFIX + namedOutput + KEY,keyClass,Object.class);

  conf.setClass(MO_PREFIX + namedOutput + VALUE,valueClass,Object.class);

}

Location: MultipleOutputs.java

Content: 

/** 

 * Checks if output name is valid. name cannot be the name used for the default output

 * @param outputPath base output Name

 * @throws IllegalArgumentException if the output name is not valid.

 */

private static void checkBaseOutputPath(String outputPath){

  if (outputPath.equals(FileOutputFormat.PART)) {

    throw new IllegalArgumentException("output name cannot be 'part'");

  }

}

Location: MultipleOutputs.java

Content: 

/** 

 * Checks if a named output name is valid.

 * @param namedOutput named output Name

 * @throws IllegalArgumentException if the output name is not valid.

 */

private static void checkNamedOutputName(JobContext job,String namedOutput,boolean alreadyDefined){

  checkTokenName(namedOutput);

  checkBaseOutputPath(namedOutput);

  List<String> definedChannels=getNamedOutputsList(job);

  if (alreadyDefined && definedChannels.contains(namedOutput)) {

    throw new IllegalArgumentException("Named output '" + namedOutput + "' already alreadyDefined");

  }

 else   if (!alreadyDefined && !definedChannels.contains(namedOutput)) {

    throw new IllegalArgumentException("Named output '" + namedOutput + "' not defined");

  }

}

Location: MultipleOutputs.java

Content: 

/** 

 * Checks if a named output name is valid.

 * @param namedOutput named output Name

 * @throws IllegalArgumentException if the output name is not valid.

 */

private static void checkNamedOutputName(String namedOutput){

  checkTokenName(namedOutput);

  if (namedOutput.equals("part")) {

    throw new IllegalArgumentException("Named output name cannot be 'part'");

  }

}

Location: MultipleOutputs.java

Content: 

/** 

 * Checks if a named output is alreadyDefined or not.

 * @param conf           job conf

 * @param namedOutput    named output names

 * @param alreadyDefined whether the existence/non-existence ofthe named output is to be checked

 * @throws IllegalArgumentException if the output name is alreadyDefined ornot depending on the value of the 'alreadyDefined' parameter

 */

private static void checkNamedOutput(JobConf conf,String namedOutput,boolean alreadyDefined){

  List<String> definedChannels=getNamedOutputsList(conf);

  if (alreadyDefined && definedChannels.contains(namedOutput)) {

    throw new IllegalArgumentException("Named output '" + namedOutput + "' already alreadyDefined");

  }

 else   if (!alreadyDefined && !definedChannels.contains(namedOutput)) {

    throw new IllegalArgumentException("Named output '" + namedOutput + "' not defined");

  }

}

Location: MultipleOutputs.java

Content: 

/** 

 * Checks if a named output name is valid token.

 * @param namedOutput named output Name

 * @throws IllegalArgumentException if the output name is not valid.

 */

private static void checkTokenName(String namedOutput){

  if (namedOutput == null || namedOutput.length() == 0) {

    throw new IllegalArgumentException("Name cannot be NULL or emtpy");

  }

  for (  char ch : namedOutput.toCharArray()) {

    if ((ch >= 'A') && (ch <= 'Z')) {

      continue;

    }

    if ((ch >= 'a') && (ch <= 'z')) {

      continue;

    }

    if ((ch >= '0') && (ch <= '9')) {

      continue;

    }

    throw new IllegalArgumentException("Name cannot be have a '" + ch + "' char");

  }

}

Location: MultipleOutputs.java

Content: 

/** 

 * Gets the output collector for a named output. <p/>

 * @param namedOutput the named output name

 * @param reporter    the reporter

 * @return the output collector for the given named output

 * @throws IOException thrown if output collector could not be created

 */

@SuppressWarnings({"unchecked"}) public OutputCollector getCollector(String namedOutput,Reporter reporter) throws IOException {

  return getCollector(namedOutput,null,reporter);

}

Location: MultipleOutputs.java

Content: 

/** 

 * Gets the output collector for a multi named output. <p/>

 * @param namedOutput the named output name

 * @param multiName   the multi name part

 * @param reporter    the reporter

 * @return the output collector for the given named output

 * @throws IOException thrown if output collector could not be created

 */

@SuppressWarnings({"unchecked"}) public OutputCollector getCollector(String namedOutput,String multiName,Reporter reporter) throws IOException {

  checkNamedOutputName(namedOutput);

  if (!namedOutputs.contains(namedOutput)) {

    throw new IllegalArgumentException("Undefined named output '" + namedOutput + "'");

  }

  boolean multi=isMultiNamedOutput(conf,namedOutput);

  if (!multi && multiName != null) {

    throw new IllegalArgumentException("Name output '" + namedOutput + "' has not been defined as multi");

  }

  if (multi) {

    checkTokenName(multiName);

  }

  String baseFileName=(multi) ? namedOutput + "_" + multiName : namedOutput;

  final RecordWriter writer=getRecordWriter(namedOutput,baseFileName,reporter);

  return new OutputCollector(){

    @SuppressWarnings({"unchecked"}) public void collect(    Object key,    Object value) throws IOException {

      writer.write(key,value);

    }

  }

;

}

Location: MultipleOutputs.java

Content: 

private TaskAttemptContext getContext(String nameOutput) throws IOException {

  TaskAttemptContext taskContext=taskContexts.get(nameOutput);

  if (taskContext != null) {

    return taskContext;

  }

  Job job=new Job(context.getConfiguration());

  job.setOutputFormatClass(getNamedOutputFormatClass(context,nameOutput));

  job.setOutputKeyClass(getNamedOutputKeyClass(context,nameOutput));

  job.setOutputValueClass(getNamedOutputValueClass(context,nameOutput));

  taskContext=new TaskAttemptContextImpl(job.getConfiguration(),context.getTaskAttemptID(),new WrappedStatusReporter(context));

  taskContexts.put(nameOutput,taskContext);

  return taskContext;

}

Location: MultipleOutputs.java

Content: 

/** 

 * Returns if the counters for the named outputs are enabled or not. <p/> By default these counters are disabled. <p/> MultipleOutputs supports counters, by default the are disabled. The counters group is the  {@link MultipleOutputs} class name.</p> The names of the counters are the same as the named outputs. For multi named outputs the name of the counter is the concatenation of the named output, and underscore '_' and the multiname.

 * @param conf    job conf to enableadd the named output.

 * @return TRUE if the counters are enabled, FALSE if they are disabled.

 */

public static boolean getCountersEnabled(JobConf conf){

  return conf.getBoolean(COUNTERS_ENABLED,false);

}

Location: MultipleOutputs.java

Content: 

/** 

 * Returns if the counters for the named outputs are enabled or not. By default these counters are disabled.

 * @param job    the job 

 * @return TRUE if the counters are enabled, FALSE if they are disabled.

 */

public static boolean getCountersEnabled(JobContext job){

  return job.getConfiguration().getBoolean(COUNTERS_ENABLED,false);

}

Location: MultipleOutputs.java

Content: 

/** 

 * Returns the named output OutputFormat.

 * @param conf        job conf

 * @param namedOutput named output

 * @return namedOutput OutputFormat

 */

public static Class<? extends OutputFormat> getNamedOutputFormatClass(JobConf conf,String namedOutput){

  checkNamedOutput(conf,namedOutput,false);

  return conf.getClass(MO_PREFIX + namedOutput + FORMAT,null,OutputFormat.class);

}

Location: MultipleOutputs.java

Content: 

@SuppressWarnings("unchecked") private static Class<? extends OutputFormat<?,?>> getNamedOutputFormatClass(JobContext job,String namedOutput){

  return (Class<? extends OutputFormat<?,?>>)job.getConfiguration().getClass(MO_PREFIX + namedOutput + FORMAT,null,OutputFormat.class);

}

Location: MultipleOutputs.java

Content: 

/** 

 * Returns the key class for a named output.

 * @param conf        job conf

 * @param namedOutput named output

 * @return class for the named output key

 */

public static Class<?> getNamedOutputKeyClass(JobConf conf,String namedOutput){

  checkNamedOutput(conf,namedOutput,false);

  return conf.getClass(MO_PREFIX + namedOutput + KEY,null,Object.class);

}

Location: MultipleOutputs.java

Content: 

private static Class<?> getNamedOutputKeyClass(JobContext job,String namedOutput){

  return job.getConfiguration().getClass(MO_PREFIX + namedOutput + KEY,null,Object.class);

}

Location: MultipleOutputs.java

Content: 

/** 

 * Returns iterator with the defined name outputs.

 * @return iterator with the defined named outputs

 */

public Iterator<String> getNamedOutputs(){

  return namedOutputs.iterator();

}

Location: MultipleOutputs.java

Content: 

/** 

 * Returns list of channel names.

 * @param conf job conf

 * @return List of channel Names

 */

public static List<String> getNamedOutputsList(JobConf conf){

  List<String> names=new ArrayList<String>();

  StringTokenizer st=new StringTokenizer(conf.get(NAMED_OUTPUTS,"")," ");

  while (st.hasMoreTokens()) {

    names.add(st.nextToken());

  }

  return names;

}

Location: MultipleOutputs.java

Content: 

private static List<String> getNamedOutputsList(JobContext job){

  List<String> names=new ArrayList<String>();

  StringTokenizer st=new StringTokenizer(job.getConfiguration().get(MULTIPLE_OUTPUTS,"")," ");

  while (st.hasMoreTokens()) {

    names.add(st.nextToken());

  }

  return names;

}

Location: MultipleOutputs.java

Content: 

/** 

 * Returns the value class for a named output.

 * @param conf        job conf

 * @param namedOutput named output

 * @return class of named output value

 */

public static Class<?> getNamedOutputValueClass(JobConf conf,String namedOutput){

  checkNamedOutput(conf,namedOutput,false);

  return conf.getClass(MO_PREFIX + namedOutput + VALUE,null,Object.class);

}

Location: MultipleOutputs.java

Content: 

private static Class<?> getNamedOutputValueClass(JobContext job,String namedOutput){

  return job.getConfiguration().getClass(MO_PREFIX + namedOutput + VALUE,null,Object.class);

}

Location: MultipleOutputs.java

Content: 

private synchronized RecordWriter getRecordWriter(String namedOutput,String baseFileName,final Reporter reporter) throws IOException {

  RecordWriter writer=recordWriters.get(baseFileName);

  if (writer == null) {

    if (countersEnabled && reporter == null) {

      throw new IllegalArgumentException("Counters are enabled, Reporter cannot be NULL");

    }

    JobConf jobConf=new JobConf(conf);

    jobConf.set(InternalFileOutputFormat.CONFIG_NAMED_OUTPUT,namedOutput);

    FileSystem fs=FileSystem.get(conf);

    writer=outputFormat.getRecordWriter(fs,jobConf,baseFileName,reporter);

    if (countersEnabled) {

      if (reporter == null) {

        throw new IllegalArgumentException("Counters are enabled, Reporter cannot be NULL");

      }

      writer=new RecordWriterWithCounter(writer,baseFileName,reporter);

    }

    recordWriters.put(baseFileName,writer);

  }

  return writer;

}

Location: MultipleOutputs.java

Content: 

@SuppressWarnings("unchecked") private synchronized RecordWriter getRecordWriter(TaskAttemptContext taskContext,String baseFileName) throws IOException, InterruptedException {

  RecordWriter writer=recordWriters.get(baseFileName);

  if (writer == null) {

    FileOutputFormat.setOutputName(taskContext,baseFileName);

    try {

      writer=((OutputFormat)ReflectionUtils.newInstance(taskContext.getOutputFormatClass(),taskContext.getConfiguration())).getRecordWriter(taskContext);

    }

 catch (    ClassNotFoundException e) {

      throw new IOException(e);

    }

    if (countersEnabled) {

      writer=new RecordWriterWithCounter(writer,baseFileName,context);

    }

    recordWriters.put(baseFileName,writer);

  }

  return writer;

}

Location: MultipleOutputs.java

Content: 

/** 

 * Returns if a named output is multiple.

 * @param conf        job conf

 * @param namedOutput named output

 * @return <code>true</code> if the name output is multi, <code>false</code>if it is single. If the name output is not defined it returns <code>false</code>

 */

public static boolean isMultiNamedOutput(JobConf conf,String namedOutput){

  checkNamedOutput(conf,namedOutput,false);

  return conf.getBoolean(MO_PREFIX + namedOutput + MULTI,false);

}

Location: MultipleOutputs.java

Content: 

/** 

 * Creates and initializes multiple named outputs support, it should be instantiated in the Mapper/Reducer configure method.

 * @param job the job configuration object

 */

public MultipleOutputs(JobConf job){

  this.conf=job;

  outputFormat=new InternalFileOutputFormat();

  namedOutputs=Collections.unmodifiableSet(new HashSet<String>(MultipleOutputs.getNamedOutputsList(job)));

  recordWriters=new HashMap<String,RecordWriter>();

  countersEnabled=getCountersEnabled(job);

}

Location: MultipleOutputs.java

Content: 

/** 

 * Creates and initializes multiple outputs support, it should be instantiated in the Mapper/Reducer setup method.

 * @param context the TaskInputOutputContext object

 */

public MultipleOutputs(TaskInputOutputContext<?,?,KEYOUT,VALUEOUT> context){

  this.context=context;

  namedOutputs=Collections.unmodifiableSet(new HashSet<String>(MultipleOutputs.getNamedOutputsList(context)));

  recordWriters=new HashMap<String,RecordWriter<?,?>>();

  countersEnabled=getCountersEnabled(context);

}

Location: MultipleOutputs.java

Content: 

/** 

 * Enables or disables counters for the named outputs. The counters group is the  {@link MultipleOutputs} class name.The names of the counters are the same as the named outputs. These counters count the number records written to each output name. By default these counters are disabled.

 * @param job    job  to enable counters

 * @param enabled indicates if the counters will be enabled or not.

 */

public static void setCountersEnabled(Job job,boolean enabled){

  job.getConfiguration().setBoolean(COUNTERS_ENABLED,enabled);

}

Location: MultipleOutputs.java

Content: 

/** 

 * Enables or disables counters for the named outputs. <p/> By default these counters are disabled. <p/> MultipleOutputs supports counters, by default the are disabled. The counters group is the  {@link MultipleOutputs} class name.</p> The names of the counters are the same as the named outputs. For multi named outputs the name of the counter is the concatenation of the named output, and underscore '_' and the multiname.

 * @param conf    job conf to enableadd the named output.

 * @param enabled indicates if the counters will be enabled or not.

 */

public static void setCountersEnabled(JobConf conf,boolean enabled){

  conf.setBoolean(COUNTERS_ENABLED,enabled);

}

Location: MultipleOutputs.java

Content: 

/** 

 * Write key value to an output file name. Gets the record writer from job's output format.   Job's output format should be a FileOutputFormat.

 * @param key       the key

 * @param value     the value

 * @param baseOutputPath base-output path to write the record to.Note: Framework will generate unique filename for the baseOutputPath

 */

@SuppressWarnings("unchecked") public void write(KEYOUT key,VALUEOUT value,String baseOutputPath) throws IOException, InterruptedException {

  checkBaseOutputPath(baseOutputPath);

  TaskAttemptContext taskContext=new TaskAttemptContextImpl(context.getConfiguration(),context.getTaskAttemptID(),new WrappedStatusReporter(context));

  getRecordWriter(taskContext,baseOutputPath).write(key,value);

}

Location: MultipleOutputs.java

Content: 

/** 

 * Write key and value to the namedOutput. Output path is a unique file generated for the namedOutput. For example, {namedOutput}-(m|r)-{part-number}

 * @param namedOutput the named output name

 * @param key         the key

 * @param value       the value

 */

@SuppressWarnings("unchecked") public <K,V>void write(String namedOutput,K key,V value) throws IOException, InterruptedException {

  write(namedOutput,key,value,namedOutput);

}

Location: MultipleOutputs.java

Content: 

/** 

 * Write key and value to baseOutputPath using the namedOutput.

 * @param namedOutput    the named output name

 * @param key            the key

 * @param value          the value

 * @param baseOutputPath base-output path to write the record to.Note: Framework will generate unique filename for the baseOutputPath

 */

@SuppressWarnings("unchecked") public <K,V>void write(String namedOutput,K key,V value,String baseOutputPath) throws IOException, InterruptedException {

  checkNamedOutputName(context,namedOutput,false);

  checkBaseOutputPath(baseOutputPath);

  if (!namedOutputs.contains(namedOutput)) {

    throw new IllegalArgumentException("Undefined named output '" + namedOutput + "'");

  }

  TaskAttemptContext taskContext=getContext(namedOutput);

  getRecordWriter(taskContext,baseOutputPath).write(key,value);

}

