Location: TestMapReduceChain.java

Content: 

private static void cleanFlags(Configuration conf) throws IOException {

  FileSystem fs=FileSystem.get(conf);

  fs.delete(flagDir,true);

  fs.mkdirs(flagDir);

}

Location: TestMapReduceChain.java

Content: 

private static boolean getFlag(Configuration conf,String flag) throws IOException {

  FileSystem fs=FileSystem.get(conf);

  return fs.exists(new Path(flagDir,flag));

}

Location: TestMapReduceChain.java

Content: 

public void testChain() throws Exception {

  Path inDir=new Path(localPathRoot,"testing/chain/input");

  Path outDir=new Path(localPathRoot,"testing/chain/output");

  String input="1\n2\n";

  String expectedOutput="0\t1ABCRDEF\n2\t2ABCRDEF\n";

  Configuration conf=createJobConf();

  cleanFlags(conf);

  conf.set("a","X");

  Job job=MapReduceTestUtil.createJob(conf,inDir,outDir,1,1,input);

  job.setJobName("chain");

  Configuration mapAConf=new Configuration(false);

  mapAConf.set("a","A");

  ChainMapper.addMapper(job,AMap.class,LongWritable.class,Text.class,LongWritable.class,Text.class,mapAConf);

  ChainMapper.addMapper(job,BMap.class,LongWritable.class,Text.class,LongWritable.class,Text.class,null);

  ChainMapper.addMapper(job,CMap.class,LongWritable.class,Text.class,LongWritable.class,Text.class,null);

  Configuration reduceConf=new Configuration(false);

  reduceConf.set("a","C");

  ChainReducer.setReducer(job,RReduce.class,LongWritable.class,Text.class,LongWritable.class,Text.class,reduceConf);

  ChainReducer.addMapper(job,DMap.class,LongWritable.class,Text.class,LongWritable.class,Text.class,null);

  Configuration mapEConf=new Configuration(false);

  mapEConf.set("a","E");

  ChainReducer.addMapper(job,EMap.class,LongWritable.class,Text.class,LongWritable.class,Text.class,mapEConf);

  ChainReducer.addMapper(job,FMap.class,LongWritable.class,Text.class,LongWritable.class,Text.class,null);

  job.waitForCompletion(true);

  assertTrue("Job failed",job.isSuccessful());

  String str="flag not set";

  assertTrue(str,getFlag(conf,"map.setup.A"));

  assertTrue(str,getFlag(conf,"map.setup.B"));

  assertTrue(str,getFlag(conf,"map.setup.C"));

  assertTrue(str,getFlag(conf,"reduce.setup.R"));

  assertTrue(str,getFlag(conf,"map.setup.D"));

  assertTrue(str,getFlag(conf,"map.setup.E"));

  assertTrue(str,getFlag(conf,"map.setup.F"));

  assertTrue(str,getFlag(conf,"map.A.value.1"));

  assertTrue(str,getFlag(conf,"map.A.value.2"));

  assertTrue(str,getFlag(conf,"map.B.value.1A"));

  assertTrue(str,getFlag(conf,"map.B.value.2A"));

  assertTrue(str,getFlag(conf,"map.C.value.1AB"));

  assertTrue(str,getFlag(conf,"map.C.value.2AB"));

  assertTrue(str,getFlag(conf,"reduce.R.value.1ABC"));

  assertTrue(str,getFlag(conf,"reduce.R.value.2ABC"));

  assertTrue(str,getFlag(conf,"map.D.value.1ABCR"));

  assertTrue(str,getFlag(conf,"map.D.value.2ABCR"));

  assertTrue(str,getFlag(conf,"map.E.value.1ABCRD"));

  assertTrue(str,getFlag(conf,"map.E.value.2ABCRD"));

  assertTrue(str,getFlag(conf,"map.F.value.1ABCRDE"));

  assertTrue(str,getFlag(conf,"map.F.value.2ABCRDE"));

  assertTrue(getFlag(conf,"map.cleanup.A"));

  assertTrue(getFlag(conf,"map.cleanup.B"));

  assertTrue(getFlag(conf,"map.cleanup.C"));

  assertTrue(getFlag(conf,"reduce.cleanup.R"));

  assertTrue(getFlag(conf,"map.cleanup.D"));

  assertTrue(getFlag(conf,"map.cleanup.E"));

  assertTrue(getFlag(conf,"map.cleanup.F"));

  assertEquals("Outputs doesn't match",expectedOutput,MapReduceTestUtil.readOutput(outDir,conf));

}

Location: TestMapReduceChain.java

Content: 

public TestMapReduceChain() throws IOException {

  super(HadoopTestCase.LOCAL_MR,HadoopTestCase.LOCAL_FS,1,1);

}

Location: TestMapReduceChain.java

Content: 

private static void writeFlag(Configuration conf,String flag) throws IOException {

  FileSystem fs=FileSystem.get(conf);

  if (getFlag(conf,flag)) {

    fail("Flag " + flag + " already exists");

  }

  DataOutputStream file=fs.create(new Path(flagDir,flag));

  file.close();

}

