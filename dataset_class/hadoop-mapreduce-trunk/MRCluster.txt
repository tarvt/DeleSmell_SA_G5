Location: MRCluster.java

Content: 

@Override protected AbstractDaemonClient createClient(RemoteProcess process) throws IOException {

  if (Role.JT.equals(process.getRole())) {

    return createJTClient(process);

  }

 else   if (Role.TT.equals(process.getRole())) {

    return createTTClient(process);

  }

 else   throw new IOException("Role: " + process.getRole() + "  is not "+ "applicable to MRCluster");

}

Location: MRCluster.java

Content: 

/** 

 * Factory method to create an instance of the Map-Reduce cluster.<br/>

 * @param conf contains all required parameter to create cluster.

 * @return a cluster instance to be managed.

 * @throws Exception

 */

public static MRCluster createCluster(Configuration conf) throws Exception {

  conf.addResource(SYSTEM_TEST_FILE);

  TT_hostFileName=conf.get(CONF_HADOOP_TT_HOSTFILE_NAME,"slaves");

  String jtHostPort=conf.get(JTConfig.JT_IPC_ADDRESS);

  if (jtHostPort == null) {

    throw new Exception(JTConfig.JT_IPC_ADDRESS + "is not set or " + SYSTEM_TEST_FILE+ " hasn't been found.");

  }

  jtHostName=jtHostPort.trim().split(":")[0];

  mrDaemonInfos.add(new HadoopDaemonInfo("jobtracker",Role.JT,Arrays.asList(new String[]{jtHostName})));

  mrDaemonInfos.add(new HadoopDaemonInfo("tasktracker",Role.TT,TT_hostFileName));

  String implKlass=conf.get(CLUSTER_PROCESS_MGR_IMPL);

  if (implKlass == null || implKlass.isEmpty()) {

    implKlass=MRProcessManager.class.getName();

  }

  Class<ClusterProcessManager> klass=(Class<ClusterProcessManager>)Class.forName(implKlass);

  ClusterProcessManager clusterProcessMgr=klass.newInstance();

  LOG.info("Created ClusterProcessManager as " + implKlass);

  clusterProcessMgr.init(conf);

  return new MRCluster(conf,clusterProcessMgr);

}

Location: MRCluster.java

Content: 

protected JTClient createJTClient(RemoteProcess jtDaemon) throws IOException {

  return new JTClient(getConf(),jtDaemon);

}

Location: MRCluster.java

Content: 

protected TTClient createTTClient(RemoteProcess ttDaemon) throws IOException {

  return new TTClient(getConf(),ttDaemon);

}

Location: MRCluster.java

Content: 

@Override public void ensureClean() throws IOException {

  JTClient jtClient=getJTClient();

  JobInfo[] jobs=jtClient.getProxy().getAllJobInfo();

  for (  JobInfo job : jobs) {

    jtClient.killJob(org.apache.hadoop.mapred.JobID.downgrade(job.getID()));

  }

}

Location: MRCluster.java

Content: 

public JTClient getJTClient(){

  Iterator<AbstractDaemonClient> it=getDaemons().get(Role.JT).iterator();

  return (JTClient)it.next();

}

Location: MRCluster.java

Content: 

public List<TTClient> getTTClients(){

  return (List)getDaemons().get(Role.TT);

}

Location: MRCluster.java

Content: 

public TTClient getTTClient(String hostname){

  for (  TTClient c : getTTClients()) {

    if (c.getHostName().equals(hostname)) {

      return c;

    }

  }

  return null;

}

Location: MRCluster.java

Content: 

private MRCluster(Configuration conf,ClusterProcessManager rCluster) throws IOException {

  super(conf,rCluster);

}

