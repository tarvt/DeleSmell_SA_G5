Location: JobMonitor.java

Content: 

private static void addJob(Map<String,List<DistRaid>> jobsMap,String jobName,DistRaid job){

synchronized (jobsMap) {

    List<DistRaid> list=null;

    if (jobsMap.containsKey(jobName)) {

      list=jobsMap.get(jobName);

    }

 else {

      list=new LinkedList<DistRaid>();

      jobsMap.put(jobName,list);

    }

synchronized (list) {

      list.add(job);

    }

  }

}

Location: JobMonitor.java

Content: 

/** 

 * Periodically checks status of running map-reduce jobs.

 */

public void doMonitor(){

  while (running) {

    String[] keys=null;

synchronized (jobs) {

      keys=jobs.keySet().toArray(new String[0]);

    }

    Map<String,List<DistRaid>> finishedJobs=new HashMap<String,List<DistRaid>>();

    for (    String key : keys) {

      DistRaid[] jobListCopy=null;

synchronized (jobs) {

        List<DistRaid> jobList=jobs.get(key);

synchronized (jobList) {

          jobListCopy=jobList.toArray(new DistRaid[jobList.size()]);

        }

      }

      for (      DistRaid job : jobListCopy) {

        try {

          boolean complete=job.checkComplete();

          if (complete) {

            addJob(finishedJobs,key,job);

            if (job.successful()) {

              jobsSucceeded++;

            }

          }

        }

 catch (        IOException ioe) {

          addJob(finishedJobs,key,job);

        }

      }

    }

    if (finishedJobs.size() > 0) {

      for (      String key : finishedJobs.keySet()) {

        List<DistRaid> finishedJobList=finishedJobs.get(key);

        for (        DistRaid job : finishedJobList) {

          removeJob(jobs,key,job);

        }

      }

    }

    try {

      Thread.sleep(jobMonitorInterval);

    }

 catch (    InterruptedException ie) {

    }

  }

}

Location: JobMonitor.java

Content: 

/** 

 * If shutdown before all jobs have completed, any still-running jobs may be extracted from the component.

 * @throws IllegalStateException If monitoring thread is still running.

 * @return Any jobs submitted and not known to have completed.

 */

List<Job> getRemainingJobs(){

  if (mThread.isAlive()) {

    LOG.warn("Internal error: Polling running monitor for jobs");

  }

synchronized (mJobs) {

    return new ArrayList<Job>(mJobs);

  }

}

Location: JobMonitor.java

Content: 

public JobMonitor(Configuration conf){

  jobMonitorInterval=conf.getLong("raid.jobmonitor.interval",60000);

  jobs=new java.util.HashMap<String,List<DistRaid>>();

}

Location: JobMonitor.java

Content: 

/** 

 * Create a JobMonitor that sleeps for the specified duration after polling a still-running job.

 * @param pollDelay Delay after polling a running job

 * @param unit Time unit for pollDelaySec (rounded to milliseconds)

 * @param statistics StatCollector , listener to job completion.

 */

public JobMonitor(int pollDelay,TimeUnit unit,Statistics statistics){

  mThread=new MonitorThread();

  runningJobs=new LinkedBlockingQueue<Job>();

  mJobs=new LinkedList<Job>();

  this.pollDelayMillis=TimeUnit.MILLISECONDS.convert(pollDelay,unit);

  this.statistics=statistics;

}

Location: JobMonitor.java

Content: 

public JobMonitor(Statistics statistics){

  this(5,TimeUnit.SECONDS,statistics);

}

Location: JobMonitor.java

Content: 

public long jobsMonitored(){

  return this.jobsMonitored;

}

Location: JobMonitor.java

Content: 

public long jobsSucceeded(){

  return this.jobsSucceeded;

}

Location: JobMonitor.java

Content: 

public void monitorJob(String key,DistRaid job){

  addJob(jobs,key,job);

  jobsMonitored++;

}

Location: JobMonitor.java

Content: 

/** 

 * Temporary hook for recording job failure.

 */

protected void onFailure(Job job){

  LOG.info(job.getJobName() + " (" + job.getJobID()+ ")"+ " failure");

}

Location: JobMonitor.java

Content: 

/** 

 * Temporary hook for recording job success.

 */

protected void onSuccess(Job job){

  LOG.info(job.getJobName() + " (" + job.getJobID()+ ")"+ " success");

}

Location: JobMonitor.java

Content: 

private static void removeJob(Map<String,List<DistRaid>> jobsMap,String jobName,DistRaid job){

synchronized (jobsMap) {

    if (jobsMap.containsKey(jobName)) {

      List<DistRaid> list=jobsMap.get(jobName);

synchronized (list) {

        for (Iterator<DistRaid> it=list.iterator(); it.hasNext(); ) {

          DistRaid val=it.next();

          if (val == job) {

            it.remove();

          }

        }

        if (list.size() == 0) {

          jobsMap.remove(jobName);

        }

      }

    }

  }

}

Location: JobMonitor.java

Content: 

public int runningJobsCount(String key){

  int count=0;

synchronized (jobs) {

    if (jobs.containsKey(key)) {

      List<DistRaid> jobList=jobs.get(key);

synchronized (jobList) {

        count=jobList.size();

      }

    }

  }

  return count;

}

Location: JobMonitor.java

Content: 

/** 

 * Add a submission failed job , such tht it can be communicated back to serial. TODO: Cleaner solution for this problem

 * @param job

 */

public void submissionFailed(Job job){

  LOG.info(" Job submission failed notify if anyone is waiting " + job);

  this.statistics.add(job);

}

