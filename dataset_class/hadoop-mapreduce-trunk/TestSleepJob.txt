Location: TestSleepJob.java

Content: 

private void doSubmission(String... optional) throws Exception {

  final Path in=new Path("foo").makeQualified(GridmixTestUtils.dfs);

  final Path out=GridmixTestUtils.DEST.makeQualified(GridmixTestUtils.dfs);

  final Path root=new Path("/user");

  Configuration conf=null;

  try {

    final String[] required={"-D" + FilePool.GRIDMIX_MIN_FILE + "=0","-D" + Gridmix.GRIDMIX_OUT_DIR + "="+ out,"-D" + Gridmix.GRIDMIX_USR_RSV + "="+ EchoUserResolver.class.getName(),"-D" + JobCreator.GRIDMIX_JOB_TYPE + "="+ JobCreator.SLEEPJOB.name(),"-D" + SleepJob.GRIDMIX_SLEEP_INTERVAL + "="+ "10"};

    final String[] mandatory={"-generate",String.valueOf(GENDATA) + "m",in.toString(),"-"};

    ArrayList<String> argv=new ArrayList<String>(required.length + optional.length + mandatory.length);

    for (    String s : required) {

      argv.add(s);

    }

    for (    String s : optional) {

      argv.add(s);

    }

    for (    String s : mandatory) {

      argv.add(s);

    }

    DebugGridmix client=new DebugGridmix();

    conf=new Configuration();

    conf.setEnum(GridmixJobSubmissionPolicy.JOB_SUBMISSION_POLICY,policy);

    conf=GridmixTestUtils.mrCluster.createJobConf(new JobConf(conf));

    GridmixTestUtils.dfs.mkdirs(root,new FsPermission((short)0777));

    GridmixTestUtils.dfs.setPermission(root,new FsPermission((short)0777));

    String[] args=argv.toArray(new String[argv.size()]);

    System.out.println("Command line arguments:");

    for (int i=0; i < args.length; ++i) {

      System.out.printf("    [%d] %s\n",i,args[i]);

    }

    int res=ToolRunner.run(conf,client,args);

    assertEquals("Client exited with nonzero status",0,res);

    client.checkMonitor();

  }

 catch (  Exception e) {

    e.printStackTrace();

  }

 finally {

    in.getFileSystem(conf).delete(in,true);

    out.getFileSystem(conf).delete(out,true);

    root.getFileSystem(conf).delete(root,true);

  }

}

Location: TestSleepJob.java

Content: 

@Test public void testLimitTaskSleepTimeSubmit() throws Exception {

  policy=GridmixJobSubmissionPolicy.STRESS;

  System.out.println(" Limit sleep time only at " + System.currentTimeMillis());

  doSubmission("-D" + SleepJob.GRIDMIX_SLEEP_MAX_MAP_TIME + "=100","-D" + SleepJob.GRIDMIX_SLEEP_MAX_REDUCE_TIME + "=200");

  System.out.println(" Limit sleep time ended at " + System.currentTimeMillis());

}

Location: TestSleepJob.java

Content: 

@Test public void testMapTasksOnlySleepJobs() throws Exception {

  Configuration conf=new Configuration();

  conf.setBoolean(SleepJob.SLEEPJOB_MAPTASK_ONLY,true);

  DebugJobProducer jobProducer=new DebugJobProducer(5,conf);

  JobConf jconf=GridmixTestUtils.mrCluster.createJobConf(new JobConf(conf));

  UserGroupInformation ugi=UserGroupInformation.getLoginUser();

  JobStory story;

  int seq=1;

  while ((story=jobProducer.getNextJob()) != null) {

    GridmixJob gridmixJob=JobCreator.SLEEPJOB.createGridmixJob(jconf,0,story,new Path("ignored"),ugi,seq++);

    gridmixJob.buildSplits(null);

    Job job=gridmixJob.call();

    assertEquals(0,job.getNumReduceTasks());

  }

}

Location: TestSleepJob.java

Content: 

@Test public void testMapTasksOnlySubmit() throws Exception {

  policy=GridmixJobSubmissionPolicy.STRESS;

  System.out.println(" Map tasks only at " + System.currentTimeMillis());

  doSubmission("-D" + SleepJob.SLEEPJOB_MAPTASK_ONLY + "=true");

  System.out.println(" Map tasks only ended at " + System.currentTimeMillis());

}

Location: TestSleepJob.java

Content: 

@Test public void testRandomLocation() throws Exception {

  UserGroupInformation ugi=UserGroupInformation.getLoginUser();

  testRandomLocation(1,10,ugi);

  testRandomLocation(2,10,ugi);

}

Location: TestSleepJob.java

Content: 

@Test public void testRandomLocationSubmit() throws Exception {

  policy=GridmixJobSubmissionPolicy.STRESS;

  System.out.println(" Random locations started at " + System.currentTimeMillis());

  doSubmission("-D" + JobCreator.SLEEPJOB_RANDOM_LOCATIONS + "=3");

  System.out.println(" Random locations ended at " + System.currentTimeMillis());

}

Location: TestSleepJob.java

Content: 

private void testRandomLocation(int locations,int njobs,UserGroupInformation ugi) throws Exception {

  Configuration conf=new Configuration();

  conf.setInt(JobCreator.SLEEPJOB_RANDOM_LOCATIONS,locations);

  DebugJobProducer jobProducer=new DebugJobProducer(njobs,conf);

  JobConf jconf=GridmixTestUtils.mrCluster.createJobConf(new JobConf(conf));

  JobStory story;

  int seq=1;

  while ((story=jobProducer.getNextJob()) != null) {

    GridmixJob gridmixJob=JobCreator.SLEEPJOB.createGridmixJob(jconf,0,story,new Path("ignored"),ugi,seq++);

    gridmixJob.buildSplits(null);

    List<InputSplit> splits=new SleepJob.SleepInputFormat().getSplits(gridmixJob.getJob());

    for (    InputSplit split : splits) {

      assertEquals(locations,split.getLocations().length);

    }

  }

}

Location: TestSleepJob.java

Content: 

@Test public void testReplaySubmit() throws Exception {

  policy=GridmixJobSubmissionPolicy.REPLAY;

  System.out.println(" Replay started at " + System.currentTimeMillis());

  doSubmission();

  System.out.println(" Replay ended at " + System.currentTimeMillis());

}

Location: TestSleepJob.java

Content: 

@Test public void testSerialSubmit() throws Exception {

  policy=GridmixJobSubmissionPolicy.SERIAL;

  System.out.println("Serial started at " + System.currentTimeMillis());

  doSubmission();

  System.out.println("Serial ended at " + System.currentTimeMillis());

}

Location: TestSleepJob.java

Content: 

@Test public void testStressSubmit() throws Exception {

  policy=GridmixJobSubmissionPolicy.STRESS;

  System.out.println(" Stress started at " + System.currentTimeMillis());

  doSubmission();

  System.out.println(" Stress ended at " + System.currentTimeMillis());

}

