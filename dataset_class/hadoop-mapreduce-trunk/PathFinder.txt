Location: PathFinder.java

Content: 

/** 

 * Returns the full path name of this file if it is listed in the path

 */

public File getAbsolutePath(String filename){

  if (pathenv == null || pathSep == null || fileSep == null) {

    return null;

  }

  int val=-1;

  String classvalue=pathenv + pathSep;

  while (((val=classvalue.indexOf(pathSep)) >= 0) && classvalue.length() > 0) {

    String entry=classvalue.substring(0,val).trim();

    File f=new File(entry);

    if (f.isDirectory()) {

      f=new File(entry + fileSep + filename);

    }

    if (f.isFile() && f.canRead()) {

      return f;

    }

    classvalue=classvalue.substring(val + 1).trim();

  }

  return null;

}

Location: PathFinder.java

Content: 

/** 

 * Gets a directory path using the given configuration provided total files and files per directory

 * @return path

 */

Path getDirectory(){

  int fileLimit=config.getTotalFiles();

  int dirLimit=config.getDirSize();

  int startPoint=rnd.nextInt(fileLimit);

  return getPath(startPoint,dirLimit,Type.DIRECTORY);

}

Location: PathFinder.java

Content: 

/** 

 * Gets a file path using the given configuration provided total files and files per directory

 * @return path

 */

Path getFile(){

  int fileLimit=config.getTotalFiles();

  int dirLimit=config.getDirSize();

  int startPoint=1 + rnd.nextInt(fileLimit);

  return getPath(startPoint,dirLimit,Type.FILE);

}

Location: PathFinder.java

Content: 

/** 

 * This function uses a simple recursive algorithm to generate a path name using the current id % limitPerDir and using current id / limitPerDir to form the rest of the tree segments

 * @param curId the current id to use for determining the current directory id % per directory limit and then used for determining the next segment of the path to use, if <= zero this will return the base path

 * @param limitPerDir the per directory file limit used in modulo and division operations to calculate the file name and path tree

 * @param type directory or file enumeration

 * @return Path

 */

private Path getPath(int curId,int limitPerDir,Type type){

  if (curId <= 0) {

    return basePath;

  }

  String name="";

switch (type) {

case FILE:

    name=FILE_PREFIX + new Integer(curId % limitPerDir).toString();

  break;

case DIRECTORY:

name=DIR_PREFIX + new Integer(curId % limitPerDir).toString();

break;

}

Path base=getPath((curId / limitPerDir),limitPerDir,Type.DIRECTORY);

return new Path(base,name);

}

Location: PathFinder.java

Content: 

/** 

 * Construct a PathFinder object using the path from java.class.path

 */

public PathFinder(){

  pathenv=System.getProperty("java.class.path");

  pathSep=System.getProperty("path.separator");

  fileSep=System.getProperty("file.separator");

}

Location: PathFinder.java

Content: 

PathFinder(ConfigExtractor cfg,Random rnd){

  this.basePath=cfg.getDataPath();

  this.config=cfg;

  this.rnd=rnd;

}

Location: PathFinder.java

Content: 

/** 

 * Construct a PathFinder object using the path from the specified system environment variable.

 */

public PathFinder(String envpath){

  pathenv=System.getenv(envpath);

  pathSep=System.getProperty("path.separator");

  fileSep=System.getProperty("file.separator");

}

Location: PathFinder.java

Content: 

/** 

 * Appends the specified component to the path list

 */

public void prependPathComponent(String str){

  pathenv=str + pathSep + pathenv;

}

