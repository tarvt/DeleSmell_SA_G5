Location: SimulatorTaskTracker.java

Content: 

/** 

 * Creates a list of task statuses suitable for transmission via heartbeat(). The task statuses are cloned() so that the heartbeat() callee, the job  tracker, can't mess up the SimulatorTaskTracker's internal data.

 * @return the list of running and recently completed task statuses on the tracker

 */

private List<TaskStatus> collectAndCloneTaskStatuses(){

  ArrayList<TaskStatus> statuses=new ArrayList<TaskStatus>();

  for (  SimulatorTaskInProgress tip : tasks.values()) {

    statuses.add((TaskStatus)tip.getTaskStatus().clone());

  }

  return statuses;

}

Location: SimulatorTaskTracker.java

Content: 

/** 

 * Creates a signal for itself marking the completion of a task attempt.  It assumes that the task attempt hasn't made any progress in the user  space code so far, i.e. it is called right at launch for map tasks and immediately after all maps completed for reduce tasks.

 * @param tip the simulator task in progress

 * @param now the current simulation time

 * @return the TaskAttemptCompletionEvent we are sending to ourselves

 */

private TaskAttemptCompletionEvent createTaskAttemptCompletionEvent(SimulatorTaskInProgress tip,long now){

  TaskStatus status=(TaskStatus)tip.getTaskStatus().clone();

  long delta=tip.getUserSpaceRunTime();

  assert delta >= 0 : "TaskAttempt " + tip.getTaskStatus().getTaskID() + " has negative UserSpaceRunTime = "+ delta;

  long finishTime=now + delta;

  status.setFinishTime(finishTime);

  if (tip.isMapTask()) {

    status.setMapFinishTime(finishTime);

  }

  status.setProgress(1.0f);

  status.setRunState(tip.getFinalRunState());

  TaskAttemptCompletionEvent event=new TaskAttemptCompletionEvent(this,status);

  if (LOG.isDebugEnabled()) {

    LOG.debug("Created task attempt completion event " + event);

  }

  return event;

}

Location: SimulatorTaskTracker.java

Content: 

/** 

 * Stops running a task attempt on the task tracker. It also updates the  number of available slots accordingly.

 * @param finalStatus the TaskStatus containing the task id and final status of the task attempt. This rountine asserts a lot of the finalStatus params, in case it is coming from a task attempt completion event sent to ourselves. Only the run state, finish time, and progress fields of the task attempt are updated.

 * @param now Current simulation time, used for assert only

 */

private void finishRunningTask(TaskStatus finalStatus,long now){

  TaskAttemptID taskId=finalStatus.getTaskID();

  if (LOG.isDebugEnabled()) {

    LOG.debug("Finishing running task id=" + taskId + ", now="+ now);

  }

  SimulatorTaskInProgress tip=tasks.get(taskId);

  if (tip == null) {

    throw new IllegalArgumentException("Unknown task attempt " + taskId + " completed");

  }

  TaskStatus currentStatus=tip.getTaskStatus();

  if (currentStatus.getRunState() != State.RUNNING) {

    throw new IllegalArgumentException("Task attempt to finish is not running: " + tip);

  }

  State finalRunState=finalStatus.getRunState();

  if (finalRunState != State.SUCCEEDED && finalRunState != State.FAILED && finalRunState != State.KILLED) {

    throw new IllegalArgumentException("Final run state for completed task can't be : " + finalRunState + " "+ tip);

  }

  if (now != finalStatus.getFinishTime()) {

    throw new IllegalArgumentException("Current time does not match task finish time: now=" + now + ", finish="+ finalStatus.getFinishTime());

  }

  if (currentStatus.getIsMap() != finalStatus.getIsMap() || currentStatus.getNumSlots() != finalStatus.getNumSlots() || currentStatus.getPhase() != finalStatus.getPhase() || currentStatus.getStartTime() != finalStatus.getStartTime()) {

    throw new IllegalArgumentException("Current status does not match final status");

  }

  currentStatus.setRunState(finalStatus.getRunState());

  currentStatus.setFinishTime(finalStatus.getFinishTime());

  currentStatus.setProgress(finalStatus.getProgress());

  int numSlots=currentStatus.getNumSlots();

  if (tip.isMapTask()) {

    usedMapSlots-=numSlots;

    if (usedMapSlots < 0) {

      throw new IllegalStateException("TaskTracker reaches negative map slots: " + usedMapSlots);

    }

  }

 else {

    usedReduceSlots-=numSlots;

    if (usedReduceSlots < 0) {

      throw new IllegalStateException("TaskTracker reaches negative reduce slots: " + usedReduceSlots);

    }

  }

}

Location: SimulatorTaskTracker.java

Content: 

/** 

 * Frees up bookkeping memory used by completed tasks.  Has no effect on the events or logs produced by the SimulatorTaskTracker. We need this in order not to report completed task multiple times and  to ensure that we do not run out of Java heap memory in larger  simulations.

 */

private void garbageCollectCompletedTasks(){

  for (Iterator<TaskAttemptID> iter=tasks.keySet().iterator(); iter.hasNext(); ) {

    TaskAttemptID taskId=iter.next();

    SimulatorTaskInProgress tip=tasks.get(taskId);

    if (tip.getTaskStatus().getRunState() != State.RUNNING) {

      iter.remove();

      if (LOG.isDebugEnabled()) {

        LOG.debug("Garbage collected SimulatorTIP, taskId=" + taskId);

      }

    }

  }

}

Location: SimulatorTaskTracker.java

Content: 

/** 

 * Starts "running" the REDUCE phase of reduce upon being notified that  all map tasks are (successfully) done.

 * @param action contains the notification for one of the reduce tasks

 * @param now current simulation time

 * @return new events generated, a single TaskAttemptCompletionEvent for thereduce

 */

private List<SimulatorEvent> handleAllMapsCompletedTaskAction(AllMapsCompletedTaskAction action,long now){

  if (LOG.isDebugEnabled()) {

    LOG.debug("Handling all maps completed task action " + action);

  }

  TaskAttemptID taskId=action.getTaskID();

  SimulatorTaskInProgress tip=tasks.get(taskId);

  TaskStatus status=tip.getTaskStatus();

  if (status.getIsMap()) {

    throw new IllegalStateException("Invalid AllMapsCompletedTaskAction, task attempt " + "to be notified is a map: " + taskId + " "+ status);

  }

  if (status.getPhase() != Phase.SHUFFLE) {

    throw new IllegalArgumentException("Reducer task attempt already notified: " + taskId + " "+ status);

  }

  status.setPhase(Phase.REDUCE);

  status.setShuffleFinishTime(now);

  status.setSortFinishTime(now);

  TaskAttemptCompletionEvent e=createTaskAttemptCompletionEvent(tip,now);

  return Collections.<SimulatorEvent>singletonList(e);

}

Location: SimulatorTaskTracker.java

Content: 

/** 

 * Handles the HeartbeatResponse received from the job tracker upon  heartbeat(). Dispatches to handle*Action() methods.

 * @param response HeartbeatResponse received from the job tracker

 * @param now current simulation time

 * @return list of new events generated in response to the task actions

 */

private List<SimulatorEvent> handleHeartbeatResponse(HeartbeatResponse response,long now){

  if (LOG.isDebugEnabled()) {

    LOG.debug("Handling heartbeat response " + response);

  }

  List<SimulatorEvent> events=new ArrayList<SimulatorEvent>();

  TaskTrackerAction[] actions=response.getActions();

  for (  TaskTrackerAction action : actions) {

    List<SimulatorEvent> actionEvents;

    if (action instanceof SimulatorLaunchTaskAction) {

      actionEvents=handleSimulatorLaunchTaskAction((SimulatorLaunchTaskAction)action,now);

    }

 else     if (action instanceof KillTaskAction) {

      actionEvents=handleKillTaskAction((KillTaskAction)action,now);

    }

 else     if (action instanceof AllMapsCompletedTaskAction) {

      actionEvents=handleAllMapsCompletedTaskAction((AllMapsCompletedTaskAction)action,now);

    }

 else {

      throw new UnsupportedOperationException("Unimplemented TaskAction: " + action);

    }

    events.addAll(actionEvents);

  }

  return events;

}

Location: SimulatorTaskTracker.java

Content: 

/** 

 * Kills a task attempt.

 * @param action contains the task attempt to kill

 * @param now current simulation time

 * @return new events generated in response, empty

 */

private List<SimulatorEvent> handleKillTaskAction(KillTaskAction action,long now){

  TaskAttemptID taskId=action.getTaskID();

  if (LOG.isDebugEnabled()) {

    LOG.debug("Handling kill task action, taskId=" + taskId + ", now="+ now);

  }

  SimulatorTaskInProgress tip=tasks.get(taskId);

  if (tip == null) {

    return SimulatorEngine.EMPTY_EVENTS;

  }

  progressTaskStatus(tip,now);

  TaskStatus finalStatus=(TaskStatus)tip.getTaskStatus().clone();

  finalStatus.setFinishTime(now);

  finalStatus.setRunState(State.KILLED);

  finishRunningTask(finalStatus,now);

  if (finalStatus.getIsMap() || finalStatus.getPhase() == Phase.REDUCE) {

    orphanTaskCompletions.add(taskId);

  }

  return SimulatorEngine.EMPTY_EVENTS;

}

Location: SimulatorTaskTracker.java

Content: 

/** 

 * Launches a task on the simulated task tracker. 

 * @param action SimulatorLaunchTaskAction sent by the job tracker

 * @param now current simulation time

 * @return new events generated, a TaskAttemptCompletionEvent for maptasks, empty otherwise

 */

private List<SimulatorEvent> handleSimulatorLaunchTaskAction(SimulatorLaunchTaskAction action,long now){

  if (LOG.isDebugEnabled()) {

    LOG.debug("Handling launch task action " + action);

  }

  Task task=action.getTask();

  TaskAttemptID taskId=task.getTaskID();

  if (tasks.containsKey(taskId)) {

    throw new IllegalArgumentException("Multiple launch of task id =" + taskId);

  }

  org.apache.hadoop.mapred.TaskAttemptID taskIdOldApi=org.apache.hadoop.mapred.TaskAttemptID.downgrade(taskId);

  TaskStatus status;

  int numSlotsRequired=task.getNumSlotsRequired();

  Counters emptyCounters=new Counters();

  if (task.isMapTask()) {

    status=new MapTaskStatus(taskIdOldApi,0f,numSlotsRequired,State.RUNNING,"","",taskTrackerName,Phase.MAP,emptyCounters);

    usedMapSlots+=numSlotsRequired;

    if (usedMapSlots > maxMapSlots) {

      throw new IllegalStateException("usedMapSlots exceeds maxMapSlots: " + usedMapSlots + " > "+ maxMapSlots);

    }

  }

 else {

    status=new ReduceTaskStatus(taskIdOldApi,0f,numSlotsRequired,State.RUNNING,"","",taskTrackerName,Phase.SHUFFLE,emptyCounters);

    usedReduceSlots+=numSlotsRequired;

    if (usedReduceSlots > maxReduceSlots) {

      throw new IllegalStateException("usedReduceSlots exceeds usedReduceSlots: " + usedReduceSlots + " > "+ usedReduceSlots);

    }

  }

  status.setStartTime(now);

  SimulatorTaskInProgress tip=new SimulatorTaskInProgress(action,status,now);

  tasks.put(taskId,tip);

  if (task.isMapTask()) {

    TaskAttemptCompletionEvent e=createTaskAttemptCompletionEvent(tip,now);

    return Collections.<SimulatorEvent>singletonList(e);

  }

 else {

    return SimulatorEngine.EMPTY_EVENTS;

  }

}

Location: SimulatorTaskTracker.java

Content: 

/** 

 * Transmits a heartbeat event to the jobtracker and processes the response.

 * @param event HeartbeatEvent to process

 * @return list of new events generated in response

 */

private List<SimulatorEvent> processHeartbeatEvent(HeartbeatEvent event){

  if (LOG.isDebugEnabled()) {

    LOG.debug("Processing heartbeat event " + event);

  }

  long now=event.getTimeStamp();

  progressTaskStatuses(now);

  List<TaskStatus> taskStatuses=collectAndCloneTaskStatuses();

  boolean askForNewTask=(usedMapSlots < maxMapSlots || usedReduceSlots < maxReduceSlots);

  TaskTrackerStatus taskTrackerStatus=new SimulatorTaskTrackerStatus(taskTrackerName,hostName,httpPort,taskStatuses,0,maxMapSlots,maxReduceSlots,now);

  garbageCollectCompletedTasks();

  HeartbeatResponse response=null;

  try {

    response=jobTracker.heartbeat(taskTrackerStatus,false,firstHeartbeat,askForNewTask,heartbeatResponseId);

  }

 catch (  IOException ioe) {

    throw new IllegalStateException("Internal error",ioe);

  }

  firstHeartbeat=false;

  heartbeatResponseId=response.getResponseId();

  List<SimulatorEvent> events=handleHeartbeatResponse(response,now);

  int heartbeatInterval=response.getHeartbeatInterval();

  if (heartbeatIntervalFuzz > 1) {

    int randomFuzz=random.nextInt(2 * heartbeatIntervalFuzz - 1) - heartbeatIntervalFuzz;

    heartbeatInterval+=randomFuzz;

    heartbeatInterval=Math.max(1,heartbeatInterval);

  }

  events.add(new HeartbeatEvent(this,now + heartbeatInterval));

  return events;

}

Location: SimulatorTaskTracker.java

Content: 

/** 

 * Records that a task attempt has completed. Ignores the event for tasks that got killed after the creation of the completion event.

 * @param event the TaskAttemptCompletionEvent the tracker sent to itself

 * @return the list of response events, empty

 */

private List<SimulatorEvent> processTaskAttemptCompletionEvent(TaskAttemptCompletionEvent event){

  if (LOG.isDebugEnabled()) {

    LOG.debug("Processing task attempt completion event" + event);

  }

  long now=event.getTimeStamp();

  TaskStatus finalStatus=event.getStatus();

  TaskAttemptID taskID=finalStatus.getTaskID();

  boolean killedEarlier=orphanTaskCompletions.remove(taskID);

  if (!killedEarlier) {

    finishRunningTask(finalStatus,now);

  }

  return SimulatorEngine.EMPTY_EVENTS;

}

Location: SimulatorTaskTracker.java

Content: 

/** 

 * Updates the progress indicator of all running tasks. 

 * @param now current simulation time

 */

private void progressTaskStatuses(long now){

  for (  SimulatorTaskInProgress tip : tasks.values()) {

    progressTaskStatus(tip,now);

  }

}

Location: SimulatorTaskTracker.java

Content: 

/** 

 * Updates the progress indicator of a task if it is running.

 * @param tip simulator task in progress whose progress is to be updated

 * @param now current simulation time

 */

private void progressTaskStatus(SimulatorTaskInProgress tip,long now){

  TaskStatus status=tip.getTaskStatus();

  if (status.getRunState() != State.RUNNING) {

    return;

  }

  boolean isMap=tip.isMapTask();

  long startTime=-1;

  long runTime=tip.getUserSpaceRunTime();

  float progress=0.0f;

  if (isMap) {

    startTime=status.getStartTime();

    progress=((float)(now - startTime)) / runTime;

  }

 else {

    Phase reducePhase=status.getPhase();

switch (reducePhase) {

case SHUFFLE:

      progress=0.0f;

    break;

case SORT:

  progress=1.0f / 3;

break;

case REDUCE:

{

startTime=status.getSortFinishTime();

progress=2.0f / 3 + (((float)(now - startTime)) / runTime) / 3.0f;

}

break;

default :

throw new IllegalArgumentException("Invalid reducePhase=" + reducePhase);

}

}

final float EPSILON=0.0001f;

if (progress < -EPSILON || progress > 1 + EPSILON) {

throw new IllegalStateException("Task progress out of range: " + progress);

}

progress=Math.max(Math.min(1.0f,progress),0.0f);

status.setProgress(progress);

if (LOG.isDebugEnabled()) {

LOG.debug("Updated task progress, taskId=" + status.getTaskID() + ", progress="+ status.getProgress());

}

}

Location: SimulatorTaskTracker.java

Content: 

/** 

 * Constructs a task tracker. 

 * @param jobTracker the SimulatorJobTracker we talk to

 * @param conf Configuration object. Parameters read are:<dl> <dt> mumak.tasktracker.tracker.name <dd>  the task tracker name to report, otherwise unused <dt> mumak.tasktracker.host.name <dd>  the host name to report, otherwise unused <dt> mapred.tasktracker.map.tasks.maximum <dd>  the number of map slots <dt> mapred.tasktracker.reduce.tasks.maximum <dd>  the number of reduce slots <dt> mumak.tasktracker.heartbeat.fuzz <dd> Perturbation for the heartbeats.  None if <= 1 else perturbations are uniformly randomly generated  in (-heartbeat.fuzz,+heartbeat.fuzz), not including the bounds. </dl>

 */

public SimulatorTaskTracker(InterTrackerProtocol jobTracker,Configuration conf){

  this.taskTrackerName=conf.get("mumak.tasktracker.tracker.name",DEFAULT_TRACKER_NAME);

  LOG.debug("SimulatorTaskTracker constructor, taskTrackerName=" + taskTrackerName);

  this.jobTracker=jobTracker;

  this.hostName=conf.get("mumak.tasktracker.host.name",DEFAULT_HOST_NAME);

  this.maxMapSlots=conf.getInt("mapred.tasktracker.map.tasks.maximum",DEFAULT_MAP_SLOTS);

  this.maxReduceSlots=conf.getInt("mapred.tasktracker.reduce.tasks.maximum",DEFAULT_REDUCE_SLOTS);

  this.heartbeatIntervalFuzz=conf.getInt("mumak.tasktracker.heartbeat.fuzz",DEFAULT_HEARTBEAT_FUZZ);

  long seed=conf.getLong("mumak.tasktracker.random.seed",System.nanoTime());

  this.random=new Random(seed);

}

