Location: TestSummation.java

Content: 

private static void computeBenchmarks(final Summation2 sigma){

  final Timer t=new Timer(false);

  t.tick("sigma=" + sigma);

  final double value=sigma.compute();

  t.tick("compute=" + value);

  assertEquals(value,sigma.compute_modular());

  t.tick("compute_modular");

  assertEquals(value,sigma.compute_montgomery());

  t.tick("compute_montgomery");

  assertEquals(value,sigma.compute_montgomery2());

  t.tick("compute_montgomery2");

  assertEquals(value,sigma.compute_modBigInteger());

  t.tick("compute_modBigInteger");

  assertEquals(value,sigma.compute_modPow());

  t.tick("compute_modPow");

}

Location: TestSummation.java

Content: 

private static Summation2 newSummation(final long base,final long range,final long delta){

  final ArithmeticProgression N=new ArithmeticProgression('n',base + 3,delta,base + 3 + range);

  final ArithmeticProgression E=new ArithmeticProgression('e',base + range,-delta,base);

  return new Summation2(N,E);

}

Location: TestSummation.java

Content: 

private static void runTestSubtract(Summation sigma,List<Summation> diff){

  List<Container<Summation>> tmp=new ArrayList<Container<Summation>>(diff.size());

  for (  Summation s : diff)   tmp.add(s);

  final List<Summation> a=sigma.remainingTerms(tmp);

  a.addAll(diff);

  for (  Summation s : a)   s.compute();

  final List<Summation> combined=Util.combine(a);

  assertEquals(1,combined.size());

  assertEquals(sigma,combined.get(0));

}

Location: TestSummation.java

Content: 

public void testSubtract(){

  final Summation sigma=newSummation(3,10000,20);

  final int size=10;

  final List<Summation> parts=Arrays.asList(sigma.partition(size));

  Collections.sort(parts);

  runTestSubtract(sigma,new ArrayList<Summation>());

  runTestSubtract(sigma,parts);

  for (int n=1; n < size; n++) {

    for (int j=0; j < 10; j++) {

      final List<Summation> diff=new ArrayList<Summation>(parts);

      for (int i=0; i < n; i++)       diff.remove(RANDOM.nextInt(diff.size()));

      runTestSubtract(sigma,diff);

    }

  }

}

