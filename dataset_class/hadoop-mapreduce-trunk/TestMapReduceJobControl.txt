Location: TestMapReduceJobControl.java

Content: 

private void cleanupData(Configuration conf) throws Exception {

  FileSystem fs=FileSystem.get(conf);

  MapReduceTestUtil.cleanData(fs,indir);

  MapReduceTestUtil.generateData(fs,indir);

  MapReduceTestUtil.cleanData(fs,outdir_1);

  MapReduceTestUtil.cleanData(fs,outdir_2);

  MapReduceTestUtil.cleanData(fs,outdir_3);

  MapReduceTestUtil.cleanData(fs,outdir_4);

}

Location: TestMapReduceJobControl.java

Content: 

/** 

 * This is a main function for testing JobControl class. It requires 4 jobs:  Job 1: passed as parameter. input:indir  output:outdir_1 Job 2: copy data from indir to outdir_2 Job 3: copy data from outdir_1 and outdir_2 to outdir_3 Job 4: copy data from outdir to outdir_4 The jobs 1 and 2 have no dependency. The job 3 depends on jobs 1 and 2. The job 4 depends on job 3. Then it creates a JobControl object and add the 4 jobs to  the JobControl object. Finally, it creates a thread to run the JobControl object

 */

private JobControl createDependencies(Configuration conf,Job job1) throws Exception {

  List<ControlledJob> dependingJobs=null;

  cjob1=new ControlledJob(job1,dependingJobs);

  Job job2=MapReduceTestUtil.createCopyJob(conf,outdir_2,indir);

  cjob2=new ControlledJob(job2,dependingJobs);

  Job job3=MapReduceTestUtil.createCopyJob(conf,outdir_3,outdir_1,outdir_2);

  dependingJobs=new ArrayList<ControlledJob>();

  dependingJobs.add(cjob1);

  dependingJobs.add(cjob2);

  cjob3=new ControlledJob(job3,dependingJobs);

  Job job4=MapReduceTestUtil.createCopyJob(conf,outdir_4,outdir_3);

  dependingJobs=new ArrayList<ControlledJob>();

  dependingJobs.add(cjob3);

  cjob4=new ControlledJob(job4,dependingJobs);

  JobControl theControl=new JobControl("Test");

  theControl.addJob(cjob1);

  theControl.addJob(cjob2);

  theControl.addJob(cjob3);

  theControl.addJob(cjob4);

  Thread theController=new Thread(theControl);

  theController.start();

  return theControl;

}

Location: TestMapReduceJobControl.java

Content: 

public void testJobControl() throws Exception {

  Configuration conf=createJobConf();

  cleanupData(conf);

  Job job1=MapReduceTestUtil.createCopyJob(conf,outdir_1,indir);

  JobControl theControl=createDependencies(conf,job1);

  waitTillAllFinished(theControl);

  assertEquals("Some jobs failed",0,theControl.getFailedJobList().size());

  theControl.stop();

}

Location: TestMapReduceJobControl.java

Content: 

public void testJobControlWithFailJob() throws Exception {

  Configuration conf=createJobConf();

  cleanupData(conf);

  Job job1=MapReduceTestUtil.createFailJob(conf,outdir_1,indir);

  JobControl theControl=createDependencies(conf,job1);

  waitTillAllFinished(theControl);

  assertTrue(cjob1.getJobState() == ControlledJob.State.FAILED);

  assertTrue(cjob2.getJobState() == ControlledJob.State.SUCCESS);

  assertTrue(cjob3.getJobState() == ControlledJob.State.DEPENDENT_FAILED);

  assertTrue(cjob4.getJobState() == ControlledJob.State.DEPENDENT_FAILED);

  theControl.stop();

}

Location: TestMapReduceJobControl.java

Content: 

public void testJobControlWithKillJob() throws Exception {

  Configuration conf=createJobConf();

  cleanupData(conf);

  Job job1=MapReduceTestUtil.createKillJob(conf,outdir_1,indir);

  JobControl theControl=createDependencies(conf,job1);

  while (cjob1.getJobState() != ControlledJob.State.RUNNING) {

    try {

      Thread.sleep(100);

    }

 catch (    InterruptedException e) {

      break;

    }

  }

  assertFalse(cjob1.addDependingJob(cjob2));

  theControl.suspend();

  assertTrue(theControl.getThreadState() == JobControl.ThreadState.SUSPENDED);

  theControl.resume();

  cjob1.killJob();

  waitTillAllFinished(theControl);

  assertTrue(cjob1.getJobState() == ControlledJob.State.FAILED);

  assertTrue(cjob2.getJobState() == ControlledJob.State.SUCCESS);

  assertTrue(cjob3.getJobState() == ControlledJob.State.DEPENDENT_FAILED);

  assertTrue(cjob4.getJobState() == ControlledJob.State.DEPENDENT_FAILED);

  theControl.stop();

}

Location: TestMapReduceJobControl.java

Content: 

public TestMapReduceJobControl() throws IOException {

  super(HadoopTestCase.LOCAL_MR,HadoopTestCase.LOCAL_FS,2,2);

}

