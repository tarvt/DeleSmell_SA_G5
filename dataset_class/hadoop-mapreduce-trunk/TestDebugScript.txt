Location: TestDebugScript.java

Content: 

/** 

 * Cleanup method which is used to delete the files folder which are generated by the testcase.

 */

static void cleanupDebugScriptDirs(){

  File scriptFile=new File(SCRIPT_FILE);

  scriptFile.delete();

  File scriptDir=new File(SCRIPT_DIR);

  scriptDir.delete();

}

Location: TestDebugScript.java

Content: 

/** 

 * Method to run a failing mapper on a given Cluster.

 * @param conf the JobConf for the job

 * @param inputPath input path for the job.

 * @param outputDir output directory for job.

 * @throws IOException

 */

static JobID runFailingMapJob(JobConf conf,Path inputPath,Path outputDir) throws IOException {

  conf.setMapDebugScript(SCRIPT_FILE);

  conf.setMaxMapAttempts(0);

  conf.set("mapred.committer.job.setup.cleanup.needed","false");

  RunningJob rJob=UtilsForTests.runJobFail(conf,inputPath,outputDir);

  return rJob.getID();

}

Location: TestDebugScript.java

Content: 

/** 

 * Setup method which is used to create necessary files and folder for the testcase.

 * @throws Exception

 */

static void setupDebugScriptDirs() throws Exception {

  File scriptDir=new File(SCRIPT_DIR);

  if (!scriptDir.exists()) {

    scriptDir.mkdirs();

  }

  scriptDir.setExecutable(true,false);

  scriptDir.setReadable(true,false);

  scriptDir.setWritable(true,false);

  File scriptFile=new File(SCRIPT_FILE);

  PrintWriter writer=new PrintWriter(scriptFile);

  writer.println(SCRIPT_CONTENT);

  writer.flush();

  writer.close();

  scriptFile.setExecutable(true,false);

  scriptFile.setReadable(true,false);

}

Location: TestDebugScript.java

Content: 

/** 

 * Main test case which checks proper execution of the testcase.

 * @throws Exception

 */

@Test public void testDebugScript() throws Exception {

  JobConf conf=new JobConf();

  conf.setLong(TTConfig.TT_SLEEP_TIME_BEFORE_SIG_KILL,0L);

  MiniMRCluster mrCluster=new MiniMRCluster(1,"file:///",1,null,null,conf);

  Path inputPath=new Path(SCRIPT_DIR);

  Path outputPath=new Path(SCRIPT_DIR,"task_output");

  JobID jobId=runFailingMapJob(mrCluster.createJobConf(),inputPath,outputPath);

  TaskAttemptID taskId=new TaskAttemptID(new TaskID(jobId,TaskType.MAP,0),0);

  verifyDebugScriptOutput(taskId);

}

Location: TestDebugScript.java

Content: 

/** 

 * Method which verifies if debug script ran and ran correctly.

 * @param taskId

 * @param expectedUser expected user id from debug script

 * @throws Exception

 */

static void verifyDebugScriptOutput(TaskAttemptID taskId) throws Exception {

  verifyDebugScriptOutput(taskId,null,null,null);

}

Location: TestDebugScript.java

Content: 

/** 

 * Method which verifies if debug script ran and ran correctly.

 * @param taskId

 * @param expectedUser expected user id from debug script

 * @param expectedPerms the expected permissions on the debugout file

 * @throws Exception

 */

static void verifyDebugScriptOutput(TaskAttemptID taskId,String expectedUser,String expectedGroup,String expectedPerms) throws Exception {

  File output=TaskLog.getRealTaskLogFileLocation(taskId,false,TaskLog.LogName.DEBUGOUT);

  assertTrue("Output file does not exists. DebugScript has not been run",output.exists());

  BufferedReader reader=new BufferedReader(new FileReader(output));

  String out=reader.readLine();

  reader.close();

  assertNotNull("DebugScript didn't generate output.",out);

  assertTrue(out.contains("failing map"));

  if (expectedPerms != null && expectedUser != null) {

    TestTaskTrackerLocalization.checkFilePermissions(output.getAbsolutePath(),expectedPerms,expectedUser,expectedGroup);

  }

}

