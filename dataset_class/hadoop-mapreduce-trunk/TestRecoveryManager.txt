Location: TestRecoveryManager.java

Content: 

/** 

 * Tests the  {@link JobTracker} against the exceptions thrown in {@link JobTracker.RecoveryManager}. It does the following : - submits 3 jobs - kills the jobtracker - Garble job.xml for one job causing it to fail in constructor  and job.split for another causing it to fail in init. - delete the job temp/submit dir - restarts the jobtracker - checks if the jobtraker starts normally

 */

public void testJobTracker() throws Exception {

  LOG.info("Testing jobtracker restart with faulty job");

  String signalFile=new Path(TEST_DIR,"signal").toString();

  JobConf conf=new JobConf();

  FileSystem fs=FileSystem.get(new Configuration());

  fs.delete(TEST_DIR,true);

  conf.set(JTConfig.JT_JOBHISTORY_BLOCK_SIZE,"1024");

  MiniMRCluster mr=new MiniMRCluster(1,"file:///",1,null,null,conf);

  JobConf job1=mr.createJobConf();

  UtilsForTests.configureWaitingJobConf(job1,new Path(TEST_DIR,"input"),new Path(TEST_DIR,"output1"),2,0,"test-recovery-manager",signalFile,signalFile);

  RunningJob rJob1=(new JobClient(job1)).submitJob(job1);

  LOG.info("Submitted job " + rJob1.getID());

  while (rJob1.mapProgress() < 0.5f) {

    LOG.info("Waiting for job " + rJob1.getID() + " to be 50% done");

    UtilsForTests.waitFor(100);

  }

  JobConf job2=mr.createJobConf();

  UtilsForTests.configureWaitingJobConf(job2,new Path(TEST_DIR,"input"),new Path(TEST_DIR,"output2"),30,0,"test-recovery-manager",signalFile,signalFile);

  RunningJob rJob2=(new JobClient(job2)).submitJob(job2);

  LOG.info("Submitted job " + rJob2.getID());

  while (rJob2.mapProgress() < 0.5f) {

    LOG.info("Waiting for job " + rJob2.getID() + " to be 50% done");

    UtilsForTests.waitFor(100);

  }

  LOG.info("Stopping jobtracker");

  String sysDir=mr.getJobTrackerRunner().getJobTracker().getSystemDir();

  mr.stopJobTracker();

  Path jobFile=new Path(sysDir,rJob1.getID().toString() + "/" + JobTracker.JOB_INFO_FILE);

  LOG.info("Deleting job token file : " + jobFile.toString());

  fs.delete(jobFile,false);

  FSDataOutputStream out=fs.create(jobFile);

  out.write(1);

  out.close();

  mr.getJobTrackerConf().setBoolean(JTConfig.JT_RESTART_ENABLED,true);

  LOG.info("Starting jobtracker");

  mr.startJobTracker();

  ClusterStatus status=mr.getJobTrackerRunner().getJobTracker().getClusterStatus(false);

  assertEquals("JobTracker crashed!",JobTrackerStatus.RUNNING,status.getJobTrackerStatus());

  assertEquals("No of recovered jobs not correct",1,mr.getJobTrackerRunner().getJobTracker().recoveryManager.getRecovered());

  mr.shutdown();

}

Location: TestRecoveryManager.java

Content: 

/** 

 * Test if the jobtracker waits for the info file to be created before  starting.

 */

public void testJobTrackerInfoCreation() throws Exception {

  LOG.info("Testing jobtracker.info file");

  MiniDFSCluster dfs=new MiniDFSCluster(new Configuration(),1,true,null);

  String namenode=(dfs.getFileSystem()).getUri().getHost() + ":" + (dfs.getFileSystem()).getUri().getPort();

  dfs.shutdownDataNodes();

  JobConf conf=new JobConf();

  FileSystem.setDefaultUri(conf,namenode);

  conf.set(JTConfig.JT_IPC_ADDRESS,"localhost:0");

  conf.set(JTConfig.JT_HTTP_ADDRESS,"127.0.0.1:0");

  JobTracker jobtracker=new JobTracker(conf);

  boolean failed=false;

  try {

    jobtracker.recoveryManager.updateRestartCount();

  }

 catch (  IOException ioe) {

    failed=true;

  }

  assertTrue("JobTracker created info files without datanodes!!!",failed);

  Path restartFile=jobtracker.recoveryManager.getRestartCountFile();

  Path tmpRestartFile=jobtracker.recoveryManager.getTempRestartCountFile();

  FileSystem fs=dfs.getFileSystem();

  assertFalse("Info file exists after update failure",fs.exists(restartFile));

  assertFalse("Temporary restart-file exists after update failure",fs.exists(restartFile));

  dfs.startDataNodes(conf,1,true,null,null,null,null);

  dfs.waitActive();

  failed=false;

  try {

    jobtracker.recoveryManager.updateRestartCount();

  }

 catch (  IOException ioe) {

    failed=true;

  }

  assertFalse("JobTracker failed to create info files with datanodes!!!",failed);

}

Location: TestRecoveryManager.java

Content: 

/** 

 * Tests the  {@link JobTracker.RecoveryManager} against the exceptions thrown during recovery. It does the following : - submits a job with HIGH priority and x tasks - allows it to complete 50% - submits another job with normal priority and y tasks - kills the jobtracker - restarts the jobtracker with max-tasks-per-job such that  y < max-tasks-per-job < x - checks if the jobtraker starts normally and job#2 is recovered while  job#1 is failed.

 */

public void testRecoveryManager() throws Exception {

  LOG.info("Testing recovery-manager");

  String signalFile=new Path(TEST_DIR,"signal").toString();

  FileSystem fs=FileSystem.get(new Configuration());

  fs.delete(TEST_DIR,true);

  JobConf conf=new JobConf();

  conf.set(JTConfig.JT_JOBHISTORY_BLOCK_SIZE,"1024");

  MiniMRCluster mr=new MiniMRCluster(1,"file:///",1,null,null,conf);

  JobTracker jobtracker=mr.getJobTrackerRunner().getJobTracker();

  JobConf job1=mr.createJobConf();

  job1.setJobPriority(JobPriority.HIGH);

  UtilsForTests.configureWaitingJobConf(job1,new Path(TEST_DIR,"input"),new Path(TEST_DIR,"output3"),30,0,"test-recovery-manager",signalFile,signalFile);

  JobClient jc=new JobClient(job1);

  RunningJob rJob1=jc.submitJob(job1);

  LOG.info("Submitted first job " + rJob1.getID());

  while (rJob1.mapProgress() < 0.5f) {

    LOG.info("Waiting for job " + rJob1.getID() + " to be 50% done");

    UtilsForTests.waitFor(100);

  }

  JobConf job2=mr.createJobConf();

  String signalFile1=new Path(TEST_DIR,"signal1").toString();

  UtilsForTests.configureWaitingJobConf(job2,new Path(TEST_DIR,"input"),new Path(TEST_DIR,"output4"),20,0,"test-recovery-manager",signalFile1,signalFile1);

  RunningJob rJob2=(new JobClient(job2)).submitJob(job2);

  LOG.info("Submitted job " + rJob2.getID());

  JobInProgress jip=jobtracker.getJob(rJob2.getID());

  while (!jip.inited()) {

    LOG.info("Waiting for job " + jip.getJobID() + " to be inited");

    UtilsForTests.waitFor(100);

  }

  final JobConf job3=mr.createJobConf();

  UserGroupInformation ugi3=UserGroupInformation.createUserForTesting("abc",new String[]{"users"});

  UtilsForTests.configureWaitingJobConf(job3,new Path(TEST_DIR,"input"),new Path(TEST_DIR,"output5"),1,0,"test-recovery-manager",signalFile,signalFile);

  RunningJob rJob3=ugi3.doAs(new PrivilegedExceptionAction<RunningJob>(){

    public RunningJob run() throws IOException {

      return (new JobClient(job3)).submitJob(job3);

    }

  }

);

  LOG.info("Submitted job " + rJob3.getID() + " with different user");

  jip=jobtracker.getJob(rJob3.getID());

  assertEquals("Restart count is not correct",0,jip.getNumRestarts());

  while (!jip.inited()) {

    LOG.info("Waiting for job " + jip.getJobID() + " to be inited");

    UtilsForTests.waitFor(100);

  }

  LOG.info("Stopping jobtracker");

  mr.stopJobTracker();

  mr.getJobTrackerConf().setBoolean(JTConfig.JT_RESTART_ENABLED,true);

  mr.getJobTrackerConf().setInt(JTConfig.JT_TASKS_PER_JOB,25);

  mr.getJobTrackerConf().setBoolean(MRConfig.MR_ACLS_ENABLED,true);

  UserGroupInformation ugi=UserGroupInformation.getLoginUser();

  mr.getJobTrackerConf().set(toFullPropertyName("default",QueueACL.SUBMIT_JOB.getAclName()),ugi.getUserName());

  LOG.info("Starting jobtracker");

  mr.startJobTracker();

  UtilsForTests.waitForJobTracker(jc);

  jobtracker=mr.getJobTrackerRunner().getJobTracker();

  assertEquals("Recovery manager failed to tolerate job failures",2,jobtracker.getAllJobs().length);

  assertEquals("No of recovered jobs not correct",2,jobtracker.recoveryManager.getRecovered());

  assertEquals("Restart count is not correct",1,jobtracker.getJob(rJob2.getID()).getNumRestarts());

  JobStatus status=jobtracker.getJobStatus(rJob1.getID());

  assertEquals("Faulty job not failed",JobStatus.FAILED,status.getRunState());

  jip=jobtracker.getJob(rJob2.getID());

  assertFalse("Job should be running",jip.isComplete());

  status=jobtracker.getJobStatus(rJob3.getID());

  assertNull("Job should be missing",status);

  mr.shutdown();

}

