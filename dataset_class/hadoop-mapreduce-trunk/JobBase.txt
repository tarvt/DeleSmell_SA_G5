Location: JobBase.java

Content: 

/** 

 * Increment the given counter by the given incremental value If the counter does not exist, one is created with value 0.

 * @param name the counter name

 * @param inc the incremental value

 * @return the updated value.

 */

protected Double addDoubleValue(Object name,double inc){

  Double val=this.doubleCounters.get(name);

  Double retv=null;

  if (val == null) {

    retv=new Double(inc);

  }

 else {

    retv=new Double(val.doubleValue() + inc);

  }

  this.doubleCounters.put(name,retv);

  return retv;

}

Location: JobBase.java

Content: 

/** 

 * Increment the given counter by the given incremental value If the counter does not exist, one is created with value 0.

 * @param name the counter name

 * @param inc the incremental value

 * @return the updated value.

 */

protected Long addLongValue(Object name,long inc){

  Long val=this.longCounters.get(name);

  Long retv=null;

  if (val == null) {

    retv=new Long(inc);

  }

 else {

    retv=new Long(val.longValue() + inc);

  }

  this.longCounters.put(name,retv);

  return retv;

}

Location: JobBase.java

Content: 

/** 

 * @param name the counter name

 * @return return the value of the given counter.

 */

protected Double getDoubleValue(Object name){

  return this.doubleCounters.get(name);

}

Location: JobBase.java

Content: 

/** 

 * @param name the counter name

 * @return return the value of the given counter.

 */

protected Long getLongValue(Object name){

  return this.longCounters.get(name);

}

Location: JobBase.java

Content: 

/** 

 * log the counters

 */

protected void report(){

  LOG.info(getReport());

}

Location: JobBase.java

Content: 

/** 

 * Set the given counter to the given value

 * @param name the counter name

 * @param value the value for the counter

 */

protected void setDoubleValue(Object name,double value){

  this.doubleCounters.put(name,new Double(value));

}

Location: JobBase.java

Content: 

/** 

 * Set the given counter to the given value

 * @param name the counter name

 * @param value the value for the counter

 */

protected void setLongValue(Object name,long value){

  this.longCounters.put(name,new Long(value));

}

