Location: MultipleInputs.java

Content: 

/** 

 * Add a  {@link Path} with a custom {@link InputFormat} to the list ofinputs for the map-reduce job.

 * @param conf The configuration of the job

 * @param path {@link Path} to be added to the list of inputs for the job

 * @param inputFormatClass {@link InputFormat} class to use for this path

 */

public static void addInputPath(JobConf conf,Path path,Class<? extends InputFormat> inputFormatClass){

  String inputFormatMapping=path.toString() + ";" + inputFormatClass.getName();

  String inputFormats=conf.get("mapreduce.input.multipleinputs.dir.formats");

  conf.set("mapreduce.input.multipleinputs.dir.formats",inputFormats == null ? inputFormatMapping : inputFormats + "," + inputFormatMapping);

  conf.setInputFormat(DelegatingInputFormat.class);

}

Location: MultipleInputs.java

Content: 

/** 

 * Add a  {@link Path} with a custom {@link InputFormat} and{@link Mapper} to the list of inputs for the map-reduce job.

 * @param conf The configuration of the job

 * @param path {@link Path} to be added to the list of inputs for the job

 * @param inputFormatClass {@link InputFormat} class to use for this path

 * @param mapperClass {@link Mapper} class to use for this path

 */

public static void addInputPath(JobConf conf,Path path,Class<? extends InputFormat> inputFormatClass,Class<? extends Mapper> mapperClass){

  addInputPath(conf,path,inputFormatClass);

  String mapperMapping=path.toString() + ";" + mapperClass.getName();

  String mappers=conf.get("mapreduce.input.multipleinputs.dir.mappers");

  conf.set("mapreduce.input.multipleinputs.dir.mappers",mappers == null ? mapperMapping : mappers + "," + mapperMapping);

  conf.setMapperClass(DelegatingMapper.class);

}

Location: MultipleInputs.java

Content: 

/** 

 * Add a  {@link Path} with a custom {@link InputFormat} to the list ofinputs for the map-reduce job.

 * @param job The {@link Job}

 * @param path {@link Path} to be added to the list of inputs for the job

 * @param inputFormatClass {@link InputFormat} class to use for this path

 */

@SuppressWarnings("unchecked") public static void addInputPath(Job job,Path path,Class<? extends InputFormat> inputFormatClass){

  String inputFormatMapping=path.toString() + ";" + inputFormatClass.getName();

  Configuration conf=job.getConfiguration();

  String inputFormats=conf.get(DIR_FORMATS);

  conf.set(DIR_FORMATS,inputFormats == null ? inputFormatMapping : inputFormats + "," + inputFormatMapping);

  job.setInputFormatClass(DelegatingInputFormat.class);

}

Location: MultipleInputs.java

Content: 

/** 

 * Add a  {@link Path} with a custom {@link InputFormat} and{@link Mapper} to the list of inputs for the map-reduce job.

 * @param job The {@link Job}

 * @param path {@link Path} to be added to the list of inputs for the job

 * @param inputFormatClass {@link InputFormat} class to use for this path

 * @param mapperClass {@link Mapper} class to use for this path

 */

@SuppressWarnings("unchecked") public static void addInputPath(Job job,Path path,Class<? extends InputFormat> inputFormatClass,Class<? extends Mapper> mapperClass){

  addInputPath(job,path,inputFormatClass);

  Configuration conf=job.getConfiguration();

  String mapperMapping=path.toString() + ";" + mapperClass.getName();

  String mappers=conf.get(DIR_MAPPERS);

  conf.set(DIR_MAPPERS,mappers == null ? mapperMapping : mappers + "," + mapperMapping);

  job.setMapperClass(DelegatingMapper.class);

}

Location: MultipleInputs.java

Content: 

/** 

 * Retrieves a map of  {@link Path}s to the  {@link InputFormat} classthat should be used for them.

 * @param conf The confuration of the job

 * @see #addInputPath(JobConf,Path,Class)

 * @return A map of paths to inputformats for the job

 */

static Map<Path,InputFormat> getInputFormatMap(JobConf conf){

  Map<Path,InputFormat> m=new HashMap<Path,InputFormat>();

  String[] pathMappings=conf.get("mapreduce.input.multipleinputs.dir.formats").split(",");

  for (  String pathMapping : pathMappings) {

    String[] split=pathMapping.split(";");

    InputFormat inputFormat;

    try {

      inputFormat=(InputFormat)ReflectionUtils.newInstance(conf.getClassByName(split[1]),conf);

    }

 catch (    ClassNotFoundException e) {

      throw new RuntimeException(e);

    }

    m.put(new Path(split[0]),inputFormat);

  }

  return m;

}

Location: MultipleInputs.java

Content: 

/** 

 * Retrieves a map of  {@link Path}s to the  {@link InputFormat} classthat should be used for them.

 * @param job The {@link JobContext}

 * @see #addInputPath(JobConf,Path,Class)

 * @return A map of paths to inputformats for the job

 */

@SuppressWarnings("unchecked") static Map<Path,InputFormat> getInputFormatMap(JobContext job){

  Map<Path,InputFormat> m=new HashMap<Path,InputFormat>();

  Configuration conf=job.getConfiguration();

  String[] pathMappings=conf.get(DIR_FORMATS).split(",");

  for (  String pathMapping : pathMappings) {

    String[] split=pathMapping.split(";");

    InputFormat inputFormat;

    try {

      inputFormat=(InputFormat)ReflectionUtils.newInstance(conf.getClassByName(split[1]),conf);

    }

 catch (    ClassNotFoundException e) {

      throw new RuntimeException(e);

    }

    m.put(new Path(split[0]),inputFormat);

  }

  return m;

}

Location: MultipleInputs.java

Content: 

/** 

 * Retrieves a map of  {@link Path}s to the  {@link Mapper} class thatshould be used for them.

 * @param conf The confuration of the job

 * @see #addInputPath(JobConf,Path,Class,Class)

 * @return A map of paths to mappers for the job

 */

@SuppressWarnings("unchecked") static Map<Path,Class<? extends Mapper>> getMapperTypeMap(JobConf conf){

  if (conf.get("mapreduce.input.multipleinputs.dir.mappers") == null) {

    return Collections.emptyMap();

  }

  Map<Path,Class<? extends Mapper>> m=new HashMap<Path,Class<? extends Mapper>>();

  String[] pathMappings=conf.get("mapreduce.input.multipleinputs.dir.mappers").split(",");

  for (  String pathMapping : pathMappings) {

    String[] split=pathMapping.split(";");

    Class<? extends Mapper> mapClass;

    try {

      mapClass=(Class<? extends Mapper>)conf.getClassByName(split[1]);

    }

 catch (    ClassNotFoundException e) {

      throw new RuntimeException(e);

    }

    m.put(new Path(split[0]),mapClass);

  }

  return m;

}

Location: MultipleInputs.java

Content: 

/** 

 * Retrieves a map of  {@link Path}s to the  {@link Mapper} class thatshould be used for them.

 * @param job The {@link JobContext}

 * @see #addInputPath(JobConf,Path,Class,Class)

 * @return A map of paths to mappers for the job

 */

@SuppressWarnings("unchecked") static Map<Path,Class<? extends Mapper>> getMapperTypeMap(JobContext job){

  Configuration conf=job.getConfiguration();

  if (conf.get(DIR_MAPPERS) == null) {

    return Collections.emptyMap();

  }

  Map<Path,Class<? extends Mapper>> m=new HashMap<Path,Class<? extends Mapper>>();

  String[] pathMappings=conf.get(DIR_MAPPERS).split(",");

  for (  String pathMapping : pathMappings) {

    String[] split=pathMapping.split(";");

    Class<? extends Mapper> mapClass;

    try {

      mapClass=(Class<? extends Mapper>)conf.getClassByName(split[1]);

    }

 catch (    ClassNotFoundException e) {

      throw new RuntimeException(e);

    }

    m.put(new Path(split[0]),mapClass);

  }

  return m;

}

