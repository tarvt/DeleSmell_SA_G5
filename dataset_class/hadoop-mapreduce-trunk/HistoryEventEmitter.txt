Location: HistoryEventEmitter.java

Content: 

final Pair<Queue<HistoryEvent>,PostEmitAction> emitterCore(ParsedLine line,String name){

  Queue<HistoryEvent> results=new LinkedList<HistoryEvent>();

  PostEmitAction removeEmitter=PostEmitAction.NONE;

  for (  SingleEventEmitter see : nonFinalSEEs()) {

    HistoryEvent event=see.maybeEmitEvent(line,name,this);

    if (event != null) {

      results.add(event);

    }

  }

  for (  SingleEventEmitter see : finalSEEs()) {

    HistoryEvent event=see.maybeEmitEvent(line,name,this);

    if (event != null) {

      results.add(event);

      removeEmitter=PostEmitAction.REMOVE_HEE;

      break;

    }

  }

  return new Pair<Queue<HistoryEvent>,PostEmitAction>(results,removeEmitter);

}

Location: HistoryEventEmitter.java

Content: 

protected HistoryEventEmitter(){

}

Location: HistoryEventEmitter.java

Content: 

protected static Counters maybeParseCounters(String counters){

  try {

    return parseCounters(counters);

  }

 catch (  ParseException e) {

    LOG.warn("The counter string, \"" + counters + "\" is badly formatted.");

    return null;

  }

}

Location: HistoryEventEmitter.java

Content: 

protected static Counters parseCounters(String counters) throws ParseException {

  if (counters == null) {

    LOG.warn("HistoryEventEmitters: null counter detected:");

    return null;

  }

  counters=counters.replace("\\.","\\\\.");

  counters=counters.replace("\\\\(","\\(");

  counters=counters.replace("\\\\)","\\)");

  counters=counters.replace("\\\\[","\\[");

  counters=counters.replace("\\\\]","\\]");

  org.apache.hadoop.mapred.Counters depForm=org.apache.hadoop.mapred.Counters.fromEscapedCompactString(counters);

  return new Counters(depForm);

}

