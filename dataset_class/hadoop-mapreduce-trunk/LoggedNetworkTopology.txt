Location: LoggedNetworkTopology.java

Content: 

private void compare1(List<LoggedNetworkTopology> c1,List<LoggedNetworkTopology> c2,TreePath loc,String eltname) throws DeepInequalityException {

  if (c1 == null && c2 == null) {

    return;

  }

  if (c1 == null || c2 == null || c1.size() != c2.size()) {

    throw new DeepInequalityException(eltname + " miscompared",new TreePath(loc,eltname));

  }

  Collections.sort(c1,new TopoSort());

  Collections.sort(c2,new TopoSort());

  for (int i=0; i < c1.size(); ++i) {

    c1.get(i).deepCompare(c2.get(i),new TreePath(loc,eltname,i));

  }

}

Location: LoggedNetworkTopology.java

Content: 

public LoggedNetworkTopology(){

  super();

}

Location: LoggedNetworkTopology.java

Content: 

LoggedNetworkTopology(Set<ParsedHost> hosts){

  this(hosts,"<root>",0);

}

Location: LoggedNetworkTopology.java

Content: 

/** 

 * @param hosts a HashSet of the  {@link ParsedHost}

 * @param name the name of this level's host [for recursive descent]

 * @param level the level number

 */

LoggedNetworkTopology(Set<ParsedHost> hosts,String name,int level){

  this.name=name;

  this.children=null;

  if (level < ParsedHost.numberOfDistances() - 1) {

    HashMap<String,HashSet<ParsedHost>> topologies=new HashMap<String,HashSet<ParsedHost>>();

    Iterator<ParsedHost> iter=hosts.iterator();

    while (iter.hasNext()) {

      ParsedHost host=iter.next();

      String thisComponent=host.nameComponent(level);

      HashSet<ParsedHost> thisSet=topologies.get(thisComponent);

      if (thisSet == null) {

        thisSet=new HashSet<ParsedHost>();

        topologies.put(thisComponent,thisSet);

      }

      thisSet.add(host);

    }

    children=new ArrayList<LoggedNetworkTopology>();

    for (    Map.Entry<String,HashSet<ParsedHost>> ent : topologies.entrySet()) {

      children.add(new LoggedNetworkTopology(ent.getValue(),ent.getKey(),level + 1));

    }

  }

 else {

  }

}

Location: LoggedNetworkTopology.java

Content: 

void setChildren(List<LoggedNetworkTopology> children){

  this.children=children;

}

Location: LoggedNetworkTopology.java

Content: 

void setName(String name){

  this.name=name;

}

