Location: Decoder.java

Content: 

/** 

 * The interface to generate a decoded file using the good portion of the source file and the parity file.

 * @param fs The filesystem containing the source file.

 * @param srcFile The damaged source file.

 * @param parityFs The filesystem containing the parity file. This could bedifferent from fs in case the parity file is part of a HAR archive.

 * @param parityFile The parity file.

 * @param errorOffset Known location of error in the source file. There couldbe additional errors in the source file that are discovered during the decode process.

 * @param decodedFile The decoded file. This will have the exact same contentsas the source file on success.

 */

public void decodeFile(FileSystem fs,Path srcFile,FileSystem parityFs,Path parityFile,long errorOffset,Path decodedFile) throws IOException {

  LOG.info("Create " + decodedFile + " for error at "+ srcFile+ ":"+ errorOffset);

  FileStatus srcStat=fs.getFileStatus(srcFile);

  long blockSize=srcStat.getBlockSize();

  configureBuffers(blockSize);

  errorOffset=(errorOffset / blockSize) * blockSize;

  FSDataOutputStream out=fs.create(decodedFile,false,conf.getInt("io.file.buffer.size",64 * 1024),srcStat.getReplication(),srcStat.getBlockSize());

  FSDataInputStream in=fs.open(srcFile,conf.getInt("io.file.buffer.size",64 * 1024));

  for (long offset=0; offset < srcStat.getLen(); offset+=blockSize) {

    long limit=Math.min(blockSize,srcStat.getLen() - offset);

    long bytesAlreadyCopied=0;

    if (offset != errorOffset) {

      try {

        in=fs.open(srcFile,conf.getInt("io.file.buffer.size",64 * 1024));

        in.seek(offset);

        RaidUtils.copyBytes(in,out,readBufs[0],limit);

        assert (out.getPos() == offset + limit);

        LOG.info("Copied till " + out.getPos() + " from "+ srcFile);

        continue;

      }

 catch (      BlockMissingException e) {

        LOG.warn("Encountered BME at " + srcFile + ":"+ offset);

        bytesAlreadyCopied=out.getPos() - offset;

      }

catch (      ChecksumException e) {

        LOG.warn("Encountered CE at " + srcFile + ":"+ offset);

        bytesAlreadyCopied=out.getPos() - offset;

      }

    }

    fixErasedBlock(fs,srcFile,parityFs,parityFile,blockSize,offset,bytesAlreadyCopied,limit,out);

  }

  out.close();

  try {

    fs.setOwner(decodedFile,srcStat.getOwner(),srcStat.getGroup());

    fs.setPermission(decodedFile,srcStat.getPermission());

    fs.setTimes(decodedFile,srcStat.getModificationTime(),srcStat.getAccessTime());

  }

 catch (  Exception exc) {

    LOG.warn("Didn't manage to copy meta information because of " + exc + " Ignoring...");

  }

}

Location: Decoder.java

Content: 

Decoder(Configuration conf,int stripeSize,int paritySize){

  this.conf=conf;

  this.stripeSize=stripeSize;

  this.paritySize=paritySize;

  this.rand=new Random();

  this.bufSize=conf.getInt("raid.decoder.bufsize",1024 * 1024);

  this.readBufs=new byte[stripeSize + paritySize][];

  this.writeBufs=new byte[paritySize][];

  allocateBuffers();

}

Location: Decoder.java

Content: 

/** 

 * Recovers a corrupt block to local file.

 * @param srcFs The filesystem containing the source file.

 * @param srcPath The damaged source file.

 * @param parityPath The filesystem containing the parity file. This could bedifferent from fs in case the parity file is part of a HAR archive.

 * @param parityFile The parity file.

 * @param blockSize The block size of the file.

 * @param blockOffset Known location of error in the source file. There couldbe additional errors in the source file that are discovered during the decode process.

 * @param localBlockFile The file to write the block to.

 * @param limit The maximum number of bytes to be written out.This is to prevent writing beyond the end of the file.

 */

public void recoverBlockToFile(FileSystem srcFs,Path srcPath,FileSystem parityFs,Path parityPath,long blockSize,long blockOffset,File localBlockFile,long limit) throws IOException {

  OutputStream out=new FileOutputStream(localBlockFile);

  fixErasedBlock(srcFs,srcPath,parityFs,parityPath,blockSize,blockOffset,0,limit,out);

  out.close();

}

