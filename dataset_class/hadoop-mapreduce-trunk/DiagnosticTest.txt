Location: DiagnosticTest.java

Content: 

public String getDescription() throws Exception {

  return XMLUtils.getElementValue("Description",this._testConfigElement);

}

Location: DiagnosticTest.java

Content: 

public double getImpactLevel() throws Exception {

  if (!this.isEvaluated()) {

    throw new Exception("Test has not been evaluated");

  }

  return truncate(this._impactLevel);

}

Location: DiagnosticTest.java

Content: 

public double getImportance() throws Exception {

  if (XMLUtils.getElementValue("Importance",this._testConfigElement).equalsIgnoreCase("high")) {

    return HIGHVAL;

  }

 else   if (XMLUtils.getElementValue("Importance",this._testConfigElement).equalsIgnoreCase("medium")) {

    return MEDIUMVAL;

  }

 else {

    return LOWVAL;

  }

}

Location: DiagnosticTest.java

Content: 

protected double getInputElementDoubleValue(String elementName,double defaultValue){

  Element inputElement=(Element)(this._testConfigElement.getElementsByTagName("InputElement").item(0));

  Element prs=null;

  double value;

  prs=(Element)inputElement.getElementsByTagName(elementName).item(0);

  if (prs != null) {

    value=Double.parseDouble(prs.getFirstChild().getNodeValue().trim());

  }

 else {

    value=defaultValue;

  }

  return value;

}

Location: DiagnosticTest.java

Content: 

protected long getInputElementLongValue(String elementName,long defaultValue){

  Element inputElement=(Element)(this._testConfigElement.getElementsByTagName("InputElement").item(0));

  Element prs=null;

  long value;

  prs=(Element)inputElement.getElementsByTagName(elementName).item(0);

  if (prs != null) {

    value=Long.parseLong(prs.getFirstChild().getNodeValue().trim());

  }

 else {

    value=defaultValue;

  }

  return value;

}

Location: DiagnosticTest.java

Content: 

protected String getInputElementStringValue(String elementName,String defaultValue){

  Element inputElement=(Element)(this._testConfigElement.getElementsByTagName("InputElement").item(0));

  Element prs=null;

  String value;

  prs=(Element)inputElement.getElementsByTagName(elementName).item(0);

  if (prs != null) {

    value=prs.getFirstChild().getNodeValue().trim();

  }

 else {

    value=defaultValue;

  }

  return value;

}

Location: DiagnosticTest.java

Content: 

public Element getReportElement(Document doc,Node parent,int i) throws Exception {

  if (!this.isEvaluated()) {

    throw new Exception("Test has not been evaluated");

  }

  if (i == 0) {

    Node reportElementx=doc.createElement("JobInformationElement");

    parent.appendChild(reportElementx);

    Node itemx=doc.createElement("JobTrackerID");

    reportElementx.appendChild(itemx);

    Node valuex=doc.createTextNode(this._jobExecutionStats.getStringValue(JobKeys.JOBTRACKERID));

    itemx.appendChild(valuex);

    itemx=doc.createElement("JobName");

    reportElementx.appendChild(itemx);

    valuex=doc.createTextNode(this._jobExecutionStats.getStringValue(JobKeys.JOBNAME));

    itemx.appendChild(valuex);

    itemx=doc.createElement("JobType");

    reportElementx.appendChild(itemx);

    valuex=doc.createTextNode(this._jobExecutionStats.getStringValue(JobKeys.JOBTYPE));

    itemx.appendChild(valuex);

    itemx=doc.createElement("User");

    reportElementx.appendChild(itemx);

    valuex=doc.createTextNode(this._jobExecutionStats.getStringValue(JobKeys.USER));

    itemx.appendChild(valuex);

    itemx=doc.createElement("SubmitTime");

    reportElementx.appendChild(itemx);

    String st1=(new Timestamp(Long.parseLong(this._jobExecutionStats.getStringValue(JobKeys.SUBMIT_TIME))).toString());

    valuex=doc.createTextNode(st1);

    itemx.appendChild(valuex);

    itemx=doc.createElement("LaunchTime");

    reportElementx.appendChild(itemx);

    String st2=(new Timestamp(Long.parseLong(this._jobExecutionStats.getStringValue(JobKeys.LAUNCH_TIME))).toString());

    valuex=doc.createTextNode(st2);

    itemx.appendChild(valuex);

    itemx=doc.createElement("FinishTime");

    reportElementx.appendChild(itemx);

    String st3=(new Timestamp(Long.parseLong(this._jobExecutionStats.getStringValue(JobKeys.FINISH_TIME))).toString());

    valuex=doc.createTextNode(st3);

    itemx.appendChild(valuex);

    itemx=doc.createElement("Status");

    reportElementx.appendChild(itemx);

    valuex=doc.createTextNode(this._jobExecutionStats.getStringValue(JobKeys.STATUS));

    itemx.appendChild(valuex);

  }

  Node reportElement=doc.createElement("TestReportElement");

  parent.appendChild(reportElement);

  Node item=doc.createElement("TestTitle");

  reportElement.appendChild(item);

  Node value=doc.createTextNode(this.getTitle());

  item.appendChild(value);

  item=doc.createElement("TestDescription");

  reportElement.appendChild(item);

  value=doc.createTextNode(this.getDescription());

  item.appendChild(value);

  item=doc.createElement("TestImportance");

  reportElement.appendChild(item);

  String imp;

  if (this.getImportance() == HIGHVAL) {

    imp="HIGH";

  }

 else   if (this.getImportance() == MEDIUMVAL) {

    imp="MEDIUM";

  }

 else {

    imp="LOW";

  }

  value=doc.createTextNode(imp);

  item.appendChild(value);

  item=doc.createElement("TestResult");

  reportElement.appendChild(item);

  if (this._testPassed) {

    value=doc.createTextNode("NEGATIVE(PASSED)");

  }

 else {

    value=doc.createTextNode("POSITIVE(FAILED)");

  }

  item.appendChild(value);

  item=doc.createElement("TestSeverity");

  reportElement.appendChild(item);

  value=doc.createTextNode("" + this.getSeverityLevel());

  item.appendChild(value);

  item=doc.createElement("ReferenceDetails");

  reportElement.appendChild(item);

  value=doc.createTextNode("" + this.getReferenceDetails());

  item.appendChild(value);

  item=doc.createElement("TestPrescription");

  String val=this.getPrescription();

  if (val == null) {

    val=XMLUtils.getElementValue("Prescription",this._testConfigElement);

  }

  reportElement.appendChild(item);

  value=doc.createTextNode("" + val);

  item.appendChild(value);

  return (Element)reportElement;

}

Location: DiagnosticTest.java

Content: 

public double getSeverityLevel() throws Exception {

  return truncate((double)(getImportance() * getImpactLevel()));

}

Location: DiagnosticTest.java

Content: 

public double getSuccessThreshold() throws Exception {

  double x=Double.parseDouble(XMLUtils.getElementValue("SuccessThreshold",this._testConfigElement));

  return truncate(x);

}

Location: DiagnosticTest.java

Content: 

public String getTitle() throws Exception {

  return XMLUtils.getElementValue("Title",this._testConfigElement);

}

Location: DiagnosticTest.java

Content: 

public void initGlobals(JobStatistics jobExecutionStats,Element testConfigElement){

  this._jobExecutionStats=jobExecutionStats;

  this._testConfigElement=testConfigElement;

}

Location: DiagnosticTest.java

Content: 

public boolean isEvaluated(){

  return _evaluated;

}

Location: DiagnosticTest.java

Content: 

public boolean istestPassed(){

  return this._testPassed;

}

Location: DiagnosticTest.java

Content: 

public static double truncate(double x){

  long y=(long)(x * 100);

  return (double)y / 100;

}

