Location: TestHadoopArchives.java

Content: 

static private Path createFile(Path dir,String filename,FileSystem fs) throws IOException {

  final Path f=new Path(dir,filename);

  final FSDataOutputStream out=fs.create(f);

  out.write(filename.getBytes());

  out.close();

  return f;

}

Location: TestHadoopArchives.java

Content: 

private static List<String> lsr(final FsShell shell,String dir) throws Exception {

  System.out.println("lsr root=" + dir);

  final ByteArrayOutputStream bytes=new ByteArrayOutputStream();

  final PrintStream out=new PrintStream(bytes);

  final PrintStream oldOut=System.out;

  final PrintStream oldErr=System.err;

  System.setOut(out);

  System.setErr(out);

  final String results;

  try {

    assertEquals(0,shell.run(new String[]{"-lsr",dir}));

    results=bytes.toString();

  }

  finally {

    IOUtils.closeStream(out);

    System.setOut(oldOut);

    System.setErr(oldErr);

  }

  System.out.println("lsr results:\n" + results);

  final String dirname=dir.substring(dir.lastIndexOf(Path.SEPARATOR));

  final List<String> paths=new ArrayList<String>();

  for (StringTokenizer t=new StringTokenizer(results,"\n"); t.hasMoreTokens(); ) {

    final String s=t.nextToken();

    final int i=s.indexOf(dirname);

    if (i >= 0) {

      paths.add(s.substring(i + dirname.length()));

    }

  }

  Collections.sort(paths);

  System.out.println("lsr paths = " + paths.toString().replace(", ",",\n  "));

  return paths;

}

Location: TestHadoopArchives.java

Content: 

public void testPathWithSpaces() throws Exception {

  fs.delete(archivePath,true);

  createFile(inputPath,"c c",fs);

  final Path sub1=new Path(inputPath,"sub 1");

  fs.mkdirs(sub1);

  createFile(sub1,"file x y z",fs);

  createFile(sub1,"file",fs);

  createFile(sub1,"x",fs);

  createFile(sub1,"y",fs);

  createFile(sub1,"z",fs);

  final Path sub2=new Path(inputPath,"sub 1 with suffix");

  fs.mkdirs(sub2);

  createFile(sub2,"z",fs);

  final Configuration conf=mapred.createJobConf();

  final FsShell shell=new FsShell(conf);

  final String inputPathStr=inputPath.toUri().getPath();

  System.out.println("inputPathStr = " + inputPathStr);

  final List<String> originalPaths=lsr(shell,inputPathStr);

  final URI uri=fs.getUri();

  final String prefix="har://hdfs-" + uri.getHost() + ":"+ uri.getPort()+ archivePath.toUri().getPath()+ Path.SEPARATOR;

{

    final String harName="foo.har";

    final String[] args={"-archiveName",harName,"-p",inputPathStr,"*",archivePath.toString()};

    final HadoopArchives har=new HadoopArchives(mapred.createJobConf());

    assertEquals(0,ToolRunner.run(har,args));

    final List<String> harPaths=lsr(shell,prefix + harName);

    assertEquals(originalPaths,harPaths);

  }

}

