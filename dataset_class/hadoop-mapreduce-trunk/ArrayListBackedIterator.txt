Location: ArrayListBackedIterator.java

Content: 

public void add(X item) throws IOException {

  data.add(WritableUtils.clone(item,null));

}

Location: ArrayListBackedIterator.java

Content: 

public ArrayListBackedIterator(){

  this(new ArrayList<X>());

}

Location: ArrayListBackedIterator.java

Content: 

public ArrayListBackedIterator(ArrayList<X> data){

  this.data=data;

  this.iter=this.data.iterator();

}

Location: ArrayListBackedIterator.java

Content: 

public void clear(){

  data.clear();

  reset();

}

Location: ArrayListBackedIterator.java

Content: 

public boolean hasNext(){

  return iter.hasNext();

}

Location: ArrayListBackedIterator.java

Content: 

public boolean next(X val) throws IOException {

  if (iter.hasNext()) {

    ReflectionUtils.copy(conf,iter.next(),val);

    if (null == hold) {

      hold=WritableUtils.clone(val,null);

    }

 else {

      ReflectionUtils.copy(conf,val,hold);

    }

    return true;

  }

  return false;

}

Location: ArrayListBackedIterator.java

Content: 

public boolean replay(X val) throws IOException {

  ReflectionUtils.copy(conf,hold,val);

  return true;

}

Location: ArrayListBackedIterator.java

Content: 

public void reset(){

  iter=data.iterator();

}

