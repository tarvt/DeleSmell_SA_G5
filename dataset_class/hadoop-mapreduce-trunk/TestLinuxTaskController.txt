Location: TestLinuxTaskController.java

Content: 

@Test public void testTaskControllerGroup() throws Exception {

  if (!ClusterWithLinuxTaskController.isTaskExecPathPassed()) {

    return;

  }

  ClusterWithLinuxTaskController.getTaskControllerConfFile(taskControllerPath).delete();

  Configuration conf=new Configuration();

  File mapredLocal=new File(testDir,"mapred/local");

  mapredLocal.mkdirs();

  conf.set(MRConfig.LOCAL_DIR,mapredLocal.toString());

  TaskController controller=new MyLinuxTaskController();

  controller.setConf(conf);

  validateTaskControllerSetup(controller,true);

  conf.set(TTConfig.TT_GROUP,"invalid");

  ClusterWithLinuxTaskController.createTaskControllerConf(taskControllerPath,conf);

  validateTaskControllerSetup(controller,true);

  conf.set(TTConfig.TT_GROUP,ClusterWithLinuxTaskController.taskTrackerSpecialGroup);

  ClusterWithLinuxTaskController.createTaskControllerConf(taskControllerPath,conf);

  validateTaskControllerSetup(controller,false);

}

Location: TestLinuxTaskController.java

Content: 

private void validateTaskControllerSetup(TaskController controller,boolean shouldFail) throws IOException {

  if (shouldFail) {

    Throwable th=null;

    try {

      controller.setup();

    }

 catch (    IOException ie) {

      th=ie;

    }

    assertNotNull("No exception during setup",th);

    assertTrue("Exception message does not contain exit code" + INVALID_TASKCONTROLLER_PERMISSIONS,th.getMessage().contains("with exit code " + INVALID_TASKCONTROLLER_PERMISSIONS));

  }

 else {

    controller.setup();

  }

}

