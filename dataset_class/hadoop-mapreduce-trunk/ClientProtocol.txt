Location: ClientProtocol.java

Content: 

/** 

 * Cancel a delegation token.

 * @param token the token to cancel

 * @throws IOException

 * @throws InterruptedException

 */

public void cancelDelegationToken(Token<DelegationTokenIdentifier> token) throws IOException, InterruptedException ;

Location: ClientProtocol.java

Content: 

/** 

 * Get all active trackers in cluster. 

 * @return array of TaskTrackerInfo

 */

public TaskTrackerInfo[] getActiveTrackers() throws IOException, InterruptedException ;

Location: ClientProtocol.java

Content: 

/** 

 * Get all the jobs submitted. 

 * @return array of JobStatus for the submitted jobs

 */

public JobStatus[] getAllJobs() throws IOException, InterruptedException ;

Location: ClientProtocol.java

Content: 

/** 

 * Returns immediate children of queueName.

 * @param queueName

 * @return array of JobQueueInfo which are children of queueName

 * @throws IOException

 */

public QueueInfo[] getChildQueues(String queueName) throws IOException, InterruptedException ;

Location: ClientProtocol.java

Content: 

/** 

 * Get the current status of the cluster

 * @return summary of the state of the cluster

 */

public ClusterMetrics getClusterMetrics() throws IOException, InterruptedException ;

Location: ClientProtocol.java

Content: 

/** 

 * Get a new delegation token.

 * @param renewer the user other than the creator (if any) that can renew the token

 * @return the new delegation token

 * @throws IOException

 * @throws InterruptedException

 */

public Token<DelegationTokenIdentifier> getDelegationToken(Text renewer) throws IOException, InterruptedException ;

Location: ClientProtocol.java

Content: 

/** 

 * A MapReduce system always operates on a single filesystem.  This  function returns the fs name.  ('local' if the localfs; 'addr:port'  if dfs).  The client can then copy files into the right locations  prior to submitting the job.

 */

public String getFilesystemName() throws IOException, InterruptedException ;

Location: ClientProtocol.java

Content: 

/** 

 * Grab the current job counters

 */

public Counters getJobCounters(JobID jobid) throws IOException, InterruptedException ;

Location: ClientProtocol.java

Content: 

/** 

 * Gets the directory location of the completed job history files.

 * @throws IOException

 * @throws InterruptedException

 */

public String getJobHistoryDir() throws IOException, InterruptedException ;

Location: ClientProtocol.java

Content: 

/** 

 * Grab a handle to a job that is already known to the JobTracker.

 * @return Status of the job, or null if not found.

 */

public JobStatus getJobStatus(JobID jobid) throws IOException, InterruptedException ;

Location: ClientProtocol.java

Content: 

/** 

 * Get JobTracker's state

 * @return {@link State} of the JobTracker

 * @throws IOException

 * @throws InterruptedException

 * @deprecated Use {@link #getJobTrackerStatus()} instead.

 */

@Deprecated public State getJobTrackerState() throws IOException, InterruptedException ;

Location: ClientProtocol.java

Content: 

/** 

 * Get the JobTracker's status.

 * @return {@link JobTrackerStatus} of the JobTracker

 * @throws IOException

 * @throws InterruptedException

 */

public JobTrackerStatus getJobTrackerStatus() throws IOException, InterruptedException ;

Location: ClientProtocol.java

Content: 

/** 

 * Allocate a name for the job.

 * @return a unique job name for submitting jobs.

 * @throws IOException

 */

public JobID getNewJobID() throws IOException, InterruptedException ;

Location: ClientProtocol.java

Content: 

/** 

 * Gets the Queue ACLs for current user

 * @return array of QueueAclsInfo object for current user.

 * @throws IOException

 */

public QueueAclsInfo[] getQueueAclsForCurrentUser() throws IOException, InterruptedException ;

Location: ClientProtocol.java

Content: 

/** 

 * Get the administrators of the given job-queue. This method is for hadoop internal use only.

 * @param queueName

 * @return Queue administrators ACL for the queue to which job issubmitted to

 * @throws IOException

 */

public AccessControlList getQueueAdmins(String queueName) throws IOException ;

Location: ClientProtocol.java

Content: 

/** 

 * Gets set of Queues associated with the Job Tracker

 * @return Array of the Queue Information Object

 * @throws IOException 

 */

public QueueInfo[] getQueues() throws IOException, InterruptedException ;

Location: ClientProtocol.java

Content: 

/** 

 * Gets scheduling information associated with the particular Job queue

 * @param queueName Queue Name

 * @return Scheduling Information of the Queue

 * @throws IOException 

 */

public QueueInfo getQueue(String queueName) throws IOException, InterruptedException ;

Location: ClientProtocol.java

Content: 

/** 

 * Gets the root level queues.

 * @return array of JobQueueInfo object.

 * @throws IOException

 */

public QueueInfo[] getRootQueues() throws IOException, InterruptedException ;

Location: ClientProtocol.java

Content: 

/** 

 * Get a hint from the JobTracker  where job-specific files are to be placed.

 * @return the directory where job-specific files are to be placed.

 */

public String getStagingAreaDir() throws IOException, InterruptedException ;

Location: ClientProtocol.java

Content: 

/** 

 * Grab the jobtracker system directory path  where job-specific files are to be placed.

 * @return the system directory where job-specific files are to be placed.

 */

public String getSystemDir() throws IOException, InterruptedException ;

Location: ClientProtocol.java

Content: 

/** 

 * Get the diagnostics for a given task in a given job

 * @param taskId the id of the task

 * @return an array of the diagnostic messages

 */

public String[] getTaskDiagnostics(TaskAttemptID taskId) throws IOException, InterruptedException ;

Location: ClientProtocol.java

Content: 

/** 

 * Grab a bunch of info on the tasks that make up the job

 */

public TaskReport[] getTaskReports(JobID jobid,TaskType type) throws IOException, InterruptedException ;

Location: ClientProtocol.java

Content: 

public long getTaskTrackerExpiryInterval() throws IOException, InterruptedException ;

Location: ClientProtocol.java

Content: 

/** 

 * Kill indicated task attempt.

 * @param taskId the id of the task to kill.

 * @param shouldFail if true the task is failed and added to failed tasks list, otherwiseit is just killed, w/o affecting job failure status.  

 */

public boolean killTask(TaskAttemptID taskId,boolean shouldFail) throws IOException, InterruptedException ;

Location: ClientProtocol.java

Content: 

/** 

 * Renew an existing delegation token

 * @param token the token to renew

 * @return the new expiration time

 * @throws IOException

 * @throws InterruptedException

 */

public long renewDelegationToken(Token<DelegationTokenIdentifier> token) throws IOException, InterruptedException ;

Location: ClientProtocol.java

Content: 

/** 

 * Set the priority of the specified job

 * @param jobid ID of the job

 * @param priority Priority to be set for the job

 */

public void setJobPriority(JobID jobid,String priority) throws IOException, InterruptedException ;

Location: ClientProtocol.java

Content: 

/** 

 * Submit a Job for execution.  Returns the latest profile for that job.

 */

public JobStatus submitJob(JobID jobId,String jobSubmitDir,Credentials ts) throws IOException, InterruptedException ;

