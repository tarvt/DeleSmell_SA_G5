Location: TestStreamingTaskLog.java

Content: 

private File createScript(String script) throws IOException {

  File scriptFile=new File(script);

  UtilTest.recursiveDelete(scriptFile);

  FileOutputStream in=new FileOutputStream(scriptFile);

  in.write(("cat > /dev/null 2>&1\n" + "echo $HADOOP_ROOT_LOGGER $HADOOP_CLIENT_OPTS").getBytes());

  in.close();

  Shell.execCommand(new String[]{"chmod","+x",scriptFile.getAbsolutePath()});

  return scriptFile;

}

Location: TestStreamingTaskLog.java

Content: 

/** 

 * Runs the streaming job and validates the output.

 * @throws IOException

 */

private void runStreamJobAndValidateEnv() throws IOException {

  int returnStatus=-1;

  boolean mayExit=false;

  StreamJob job=new StreamJob(genArgs(),mayExit);

  returnStatus=job.go();

  assertEquals("StreamJob failed.",0,returnStatus);

  String env=MapReduceTestUtil.readOutput(outputPath,mr.createJobConf());

  long logSize=USERLOG_LIMIT_KB * 1024;

  assertTrue("environment set for child is wrong",env.contains("INFO,TLA") && env.contains("-Dhadoop.tasklog.taskid=attempt_") && env.contains("-Dhadoop.tasklog.totalLogFileSize=" + logSize)&& env.contains("-Dhadoop.tasklog.iscleanup=false"));

}

Location: TestStreamingTaskLog.java

Content: 

/** 

 * This test validates the setting of HADOOP_ROOT_LOGGER to 'INFO,TLA' and the dependent properties (a) hadoop.tasklog.taskid and (b) hadoop.tasklog.totalLogFileSize for the children of java tasks in streaming jobs.

 */

@Test public void testStreamingTaskLogWithHadoopCmd(){

  try {

    final int numSlaves=1;

    JobConf conf=new JobConf();

    fs=FileSystem.getLocal(conf);

    Path testDir=new Path(System.getProperty("test.build.data","/tmp"));

    if (fs.exists(testDir)) {

      fs.delete(testDir,true);

    }

    fs.mkdirs(testDir);

    File scriptFile=createScript(testDir.toString() + "/testTaskLog.sh");

    conf.setBoolean(JTConfig.JT_PERSIST_JOBSTATUS,false);

    mr=new MiniMRCluster(numSlaves,fs.getUri().toString(),1,null,null,conf);

    writeInputFile(fs,inputPath);

    map=scriptFile.getAbsolutePath();

    runStreamJobAndValidateEnv();

    fs.delete(outputPath,true);

    assertFalse("output not cleaned up",fs.exists(outputPath));

    mr.waitUntilIdle();

  }

 catch (  IOException e) {

    fail(e.toString());

  }

 finally {

    if (mr != null) {

      mr.shutdown();

    }

  }

}

