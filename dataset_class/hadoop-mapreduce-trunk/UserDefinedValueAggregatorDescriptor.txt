Location: UserDefinedValueAggregatorDescriptor.java

Content: 

/** 

 * Do nothing.

 */

public void configure(Configuration conf){

}

Location: UserDefinedValueAggregatorDescriptor.java

Content: 

private void createAggregator(Configuration conf){

  if (theAggregatorDescriptor == null) {

    theAggregatorDescriptor=(ValueAggregatorDescriptor)createInstance(this.className);

    theAggregatorDescriptor.configure(conf);

  }

}

Location: UserDefinedValueAggregatorDescriptor.java

Content: 

/** 

 * Create an instance of the given class

 * @param className the name of the class

 * @return a dynamically created instance of the given class 

 */

public static Object createInstance(String className){

  Object retv=null;

  try {

    ClassLoader classLoader=Thread.currentThread().getContextClassLoader();

    Class<?> theFilterClass=Class.forName(className,true,classLoader);

    Constructor<?> meth=theFilterClass.getDeclaredConstructor(argArray);

    meth.setAccessible(true);

    retv=meth.newInstance();

  }

 catch (  Exception e) {

    throw new RuntimeException(e);

  }

  return retv;

}

Location: UserDefinedValueAggregatorDescriptor.java

Content: 

/** 

 * @param className the class name of the user defined descriptor class

 * @param conf a configure object used for decriptor configuration

 */

public UserDefinedValueAggregatorDescriptor(String className,Configuration conf){

  this.className=className;

  this.createAggregator(conf);

}

Location: UserDefinedValueAggregatorDescriptor.java

Content: 

/** 

 * @param className the class name of the user defined descriptor class

 * @param job a configure object used for decriptor configuration

 */

public UserDefinedValueAggregatorDescriptor(String className,JobConf job){

  super(className,job);

  ((ValueAggregatorDescriptor)theAggregatorDescriptor).configure(job);

}

