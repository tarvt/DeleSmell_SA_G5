Location: TaskCompletionEvent.java

Content: 

/** 

 * Returns event Id. 

 * @return event id

 */

public int getEventId(){

  return eventId;

}

Location: TaskCompletionEvent.java

Content: 

/** 

 * Returns time (in millisec) the task took to complete. 

 */

public int getTaskRunTime(){

  return taskRunTime;

}

Location: TaskCompletionEvent.java

Content: 

/** 

 * http location of the tasktracker where this task ran. 

 * @return http location of tasktracker user logs

 */

public String getTaskTrackerHttp(){

  return taskTrackerHttp;

}

Location: TaskCompletionEvent.java

Content: 

public int idWithinJob(){

  return idWithinJob;

}

Location: TaskCompletionEvent.java

Content: 

public boolean isMapTask(){

  return isMap;

}

Location: TaskCompletionEvent.java

Content: 

/** 

 * set event Id. should be assigned incrementally starting from 0. 

 * @param eventId

 */

protected void setEventId(int eventId){

  this.eventId=eventId;

}

Location: TaskCompletionEvent.java

Content: 

/** 

 * Sets task id. 

 * @param taskId

 */

protected void setTaskAttemptId(TaskAttemptID taskId){

  this.taskId=taskId;

}

Location: TaskCompletionEvent.java

Content: 

/** 

 * Set the task completion time

 * @param taskCompletionTime time (in millisec) the task took to complete

 */

protected void setTaskRunTime(int taskCompletionTime){

  this.taskRunTime=taskCompletionTime;

}

Location: TaskCompletionEvent.java

Content: 

/** 

 * Set task status. 

 * @param status

 */

protected void setTaskStatus(Status status){

  this.status=status;

}

Location: TaskCompletionEvent.java

Content: 

/** 

 * Set task tracker http location. 

 * @param taskTrackerHttp

 */

protected void setTaskTrackerHttp(String taskTrackerHttp){

  this.taskTrackerHttp=taskTrackerHttp;

}

Location: TaskCompletionEvent.java

Content: 

/** 

 * Default constructor for Writable.

 */

public TaskCompletionEvent(){

  taskId=new TaskAttemptID();

}

Location: TaskCompletionEvent.java

Content: 

/** 

 * Constructor. eventId should be created externally and incremented per event for each job. 

 * @param eventId event id, event id should be unique and assigned inincrementally, starting from 0. 

 * @param taskId task id

 * @param status task's status 

 * @param taskTrackerHttp task tracker's host:port for http. 

 */

public TaskCompletionEvent(int eventId,TaskAttemptID taskId,int idWithinJob,boolean isMap,Status status,String taskTrackerHttp){

  this.taskId=taskId;

  this.idWithinJob=idWithinJob;

  this.isMap=isMap;

  this.eventId=eventId;

  this.status=status;

  this.taskTrackerHttp=taskTrackerHttp;

}

