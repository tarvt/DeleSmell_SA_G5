Location: TestEmptyJob.java

Content: 

/** 

 * Simple method running a MapReduce job with no input data. Used to test that such a job is successful.

 * @param fileSys

 * @param numMaps

 * @param numReduces

 * @return true if the MR job is successful, otherwise false

 * @throws IOException

 */

private boolean launchEmptyJob(URI fileSys,int numMaps,int numReduces) throws IOException {

  final Path inDir=new Path(TEST_ROOT_DIR,"testing/empty/input");

  final Path outDir=new Path(TEST_ROOT_DIR,"testing/empty/output");

  final Path inDir2=new Path(TEST_ROOT_DIR,"testing/dummy/input");

  final Path outDir2=new Path(TEST_ROOT_DIR,"testing/dummy/output");

  final Path share=new Path(TEST_ROOT_DIR,"share");

  JobConf conf=mr.createJobConf();

  FileSystem fs=FileSystem.get(fileSys,conf);

  fs.delete(new Path(TEST_ROOT_DIR),true);

  fs.delete(outDir,true);

  if (!fs.mkdirs(inDir)) {

    LOG.warn("Can't create " + inDir);

    return false;

  }

  FileSystem.setDefaultUri(conf,fileSys);

  conf.setJobName("empty");

  conf.setInputFormat(EmptyInputFormat.class);

  conf.setOutputCommitter(CommitterWithDelayCommit.class);

  conf.setOutputKeyClass(Text.class);

  conf.setOutputValueClass(IntWritable.class);

  conf.setMapperClass(IdentityMapper.class);

  conf.setReducerClass(IdentityReducer.class);

  FileInputFormat.setInputPaths(conf,inDir);

  FileOutputFormat.setOutputPath(conf,outDir);

  conf.setNumMapTasks(numMaps);

  conf.setNumReduceTasks(numReduces);

  conf.set("share",share.toString());

  JobClient jc=new JobClient(conf);

  RunningJob runningJob=jc.submitJob(conf);

  JobInProgress job=mr.getJobTrackerRunner().getJobTracker().getJob(runningJob.getID());

  InetAddress ip=InetAddress.getLocalHost();

  if (ip != null) {

    assertTrue(job.getJobSubmitHostAddress().equalsIgnoreCase(ip.getHostAddress()));

    assertTrue(job.getJobSubmitHostName().equalsIgnoreCase(ip.getHostName()));

  }

  while (true) {

    if (job.isCleanupLaunched()) {

      LOG.info("Waiting for cleanup to be launched for job " + runningJob.getID());

      break;

    }

    UtilsForTests.waitFor(100);

  }

  LOG.info("Launching dummy job ");

  RunningJob dJob=null;

  try {

    JobConf dConf=new JobConf(conf);

    dConf.setOutputCommitter(FileOutputCommitter.class);

    dJob=UtilsForTests.runJob(dConf,inDir2,outDir2,2,0);

  }

 catch (  Exception e) {

    LOG.info("Exception ",e);

    throw new IOException(e);

  }

  while (true) {

    LOG.info("Waiting for job " + dJob.getID() + " to complete");

    try {

      Thread.sleep(100);

    }

 catch (    InterruptedException e) {

    }

    if (dJob.isComplete()) {

      break;

    }

  }

  assertTrue(dJob.isSuccessful());

  fs.create(share).close();

  while (true) {

    LOG.info("Waiting for job " + runningJob.getID() + " to complete");

    try {

      Thread.sleep(100);

    }

 catch (    InterruptedException e) {

    }

    if (runningJob.isComplete()) {

      break;

    }

  }

  assertTrue(runningJob.isComplete());

  assertTrue(runningJob.isSuccessful());

  JobID jobID=runningJob.getID();

  TaskReport[] jobSetupTasks=jc.getSetupTaskReports(jobID);

  assertTrue("Number of job-setup tips is not 2!",jobSetupTasks.length == 2);

  assertTrue("Setup progress is " + runningJob.setupProgress() + " and not 1.0",runningJob.setupProgress() == 1.0);

  assertTrue("Setup task is not finished!",mr.getJobTrackerRunner().getJobTracker().getJob(jobID).isSetupFinished());

  assertTrue("Number of maps is not zero!",jc.getMapTaskReports(runningJob.getID()).length == 0);

  assertTrue("Map progress is " + runningJob.mapProgress() + " and not 1.0!",runningJob.mapProgress() == 1.0);

  assertTrue("Reduce progress is " + runningJob.reduceProgress() + " and not 1.0!",runningJob.reduceProgress() == 1.0);

  assertTrue("Number of reduces is not " + numReduces,jc.getReduceTaskReports(runningJob.getID()).length == numReduces);

  TaskReport[] jobCleanupTasks=jc.getCleanupTaskReports(jobID);

  assertTrue("Number of job-cleanup tips is not 2!",jobCleanupTasks.length == 2);

  assertTrue("Cleanup progress is " + runningJob.cleanupProgress() + " and not 1.0",runningJob.cleanupProgress() == 1.0);

  assertTrue("Job output directory doesn't exit!",fs.exists(outDir));

  FileStatus[] list=fs.listStatus(outDir,new Utils.OutputFileUtils.OutputFilesFilter());

  assertTrue("Number of part-files is " + list.length + " and not "+ numReduces,list.length == numReduces);

  fs.delete(outDir,true);

  LOG.info("job is complete: " + runningJob.isSuccessful());

  return (runningJob.isSuccessful());

}

Location: TestEmptyJob.java

Content: 

/** 

 * Test that a job with no input data (and thus with no input split and no map task to execute) is successful.

 * @throws IOException

 */

public void testEmptyJob() throws IOException {

  FileSystem fileSys=null;

  try {

    final int taskTrackers=2;

    JobConf conf=new JobConf();

    fileSys=FileSystem.get(conf);

    conf.set(JTConfig.JT_IPC_HANDLER_COUNT,"1");

    conf.set(JTConfig.JT_IPC_ADDRESS,"127.0.0.1:0");

    conf.set(JTConfig.JT_HTTP_ADDRESS,"127.0.0.1:0");

    conf.set(TTConfig.TT_HTTP_ADDRESS,"127.0.0.1:0");

    mr=new MiniMRCluster(taskTrackers,fileSys.getUri().toString(),1,null,null,conf);

    assertTrue(launchEmptyJob(fileSys.getUri(),3,1));

    assertTrue(launchEmptyJob(fileSys.getUri(),0,0));

  }

  finally {

    if (fileSys != null) {

      fileSys.close();

    }

    if (mr != null) {

      mr.shutdown();

    }

  }

}

