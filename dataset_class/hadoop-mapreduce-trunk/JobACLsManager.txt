Location: JobACLsManager.java

Content: 

/** 

 * If authorization is enabled, checks whether the user (in the callerUGI) is authorized to perform the operation specified by 'jobOperation' on the job by checking if the user is jobOwner or part of job ACL for the specific job operation. <ul> <li>The owner of the job can do any operation on the job</li> <li>For all other users/groups job-acls are checked</li> </ul>

 * @param callerUGI

 * @param jobOperation

 * @param jobOwner

 * @param jobACL

 * @throws AccessControlException

 */

boolean checkAccess(UserGroupInformation callerUGI,JobACL jobOperation,String jobOwner,AccessControlList jobACL){

  String user=callerUGI.getShortUserName();

  if (!areACLsEnabled()) {

    return true;

  }

  if (user.equals(jobOwner) || jobACL.isUserAllowed(callerUGI)) {

    return true;

  }

  return false;

}

Location: JobACLsManager.java

Content: 

/** 

 * Construct the jobACLs from the configuration so that they can be kept in the memory. If authorization is disabled on the JT, nothing is constructed and an empty map is returned.

 * @return JobACL to AccessControlList map.

 */

Map<JobACL,AccessControlList> constructJobACLs(JobConf conf){

  Map<JobACL,AccessControlList> acls=new HashMap<JobACL,AccessControlList>();

  if (!areACLsEnabled()) {

    return acls;

  }

  for (  JobACL aclName : JobACL.values()) {

    String aclConfigName=aclName.getAclName();

    String aclConfigured=conf.get(aclConfigName);

    if (aclConfigured == null) {

      aclConfigured=" ";

    }

    acls.put(aclName,new AccessControlList(aclConfigured));

  }

  return acls;

}

Location: JobACLsManager.java

Content: 

public JobACLsManager(JobConf conf){

  this.conf=conf;

}

