Location: MergeThread.java

Content: 

public synchronized boolean isInProgress(){

  return inProgress;

}

Location: MergeThread.java

Content: 

public MergeThread(MergeManager<K,V> manager,int mergeFactor,ExceptionReporter reporter){

  this.manager=manager;

  this.mergeFactor=mergeFactor;

  this.reporter=reporter;

}

Location: MergeThread.java

Content: 

public abstract void merge(List<T> inputs) throws IOException ;

Location: MergeThread.java

Content: 

public synchronized void startMerge(Set<T> inputs){

  if (!closed) {

    inProgress=true;

    this.inputs=new ArrayList<T>();

    Iterator<T> iter=inputs.iterator();

    for (int ctr=0; iter.hasNext() && ctr < mergeFactor; ++ctr) {

      this.inputs.add(iter.next());

      iter.remove();

    }

    LOG.info(getName() + ": Starting merge with " + this.inputs.size()+ " segments, while ignoring "+ inputs.size()+ " segments");

    notifyAll();

  }

}

Location: MergeThread.java

Content: 

public synchronized void waitForMerge() throws InterruptedException {

  while (inProgress) {

    wait();

  }

}

