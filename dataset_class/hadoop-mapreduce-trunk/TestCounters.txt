Location: TestCounters.java

Content: 

private Counters getEnumCounters(Enum[] keys){

  Counters counters=new Counters();

  for (  Enum key : keys) {

    for (long i=0; i < MAX_VALUE; ++i) {

      counters.incrCounter(key,i);

    }

  }

  return counters;

}

Location: TestCounters.java

Content: 

private Counters getEnumCounters(String[] gNames,String[] cNames){

  Counters counters=new Counters();

  for (  String gName : gNames) {

    for (    String cName : cNames) {

      for (long i=0; i < MAX_VALUE; ++i) {

        counters.incrCounter(gName,cName,i);

      }

    }

  }

  return counters;

}

Location: TestCounters.java

Content: 

public void testCounters() throws IOException {

  Enum[] keysWithResource={TaskCounter.MAP_INPUT_RECORDS,TaskCounter.MAP_OUTPUT_BYTES};

  Enum[] keysWithoutResource={myCounters.TEST1,myCounters.TEST2};

  String[] groups={"group1","group2","group{}()[]"};

  String[] counters={"counter1","counter2","counter{}()[]"};

  try {

    testCounter(getEnumCounters(keysWithResource));

    testCounter(getEnumCounters(keysWithoutResource));

    testCounter(getEnumCounters(groups,counters));

  }

 catch (  ParseException pe) {

    throw new IOException(pe);

  }

}

Location: TestCounters.java

Content: 

/** 

 * Verify counter value works

 */

@Test public void testCounterValue(){

  final int NUMBER_TESTS=100;

  final int NUMBER_INC=10;

  final Random rand=new Random();

  for (int i=0; i < NUMBER_TESTS; i++) {

    long initValue=rand.nextInt();

    long expectedValue=initValue;

    Counter counter=new Counter("foo","bar",expectedValue);

    assertEquals("Counter value is not initialized correctly",expectedValue,counter.getValue());

    for (int j=0; j < NUMBER_INC; j++) {

      int incValue=rand.nextInt();

      counter.increment(incValue);

      expectedValue+=incValue;

      assertEquals("Counter value is not incremented correctly",expectedValue,counter.getValue());

    }

    expectedValue=rand.nextInt();

    counter.setValue(expectedValue);

    assertEquals("Counter value is not set correctly",expectedValue,counter.getValue());

  }

}

Location: TestCounters.java

Content: 

/** 

 * Test counter recovery

 */

private void testCounter(Counters counter) throws ParseException {

  String compactEscapedString=counter.makeEscapedCompactString();

  Counters recoveredCounter=Counters.fromEscapedCompactString(compactEscapedString);

  assertEquals("Recovered counter does not match on content",counter,recoveredCounter);

  assertEquals("recovered counter has wrong hash code",counter.hashCode(),recoveredCounter.hashCode());

}

