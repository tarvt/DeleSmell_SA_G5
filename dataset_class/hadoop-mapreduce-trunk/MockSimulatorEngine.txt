Location: MockSimulatorEngine.java

Content: 

private Pre21JobHistoryConstants.Values convertState(JobStatus status){

  int runState=status.getRunState();

  if (runState == JobStatus.FAILED) {

    return Pre21JobHistoryConstants.Values.FAILED;

  }

 else   if (runState == JobStatus.SUCCEEDED) {

    return Pre21JobHistoryConstants.Values.SUCCESS;

  }

 else {

    throw new IllegalArgumentException("unknown status " + status);

  }

}

Location: MockSimulatorEngine.java

Content: 

public MockSimulatorEngine(int nJobs,int nTrackers){

  super();

  fixedJobs=nJobs;

  jobs=new HashMap<JobID,JobStory>();

  submittedJobs=new HashSet<JobID>();

  completedJobs=new HashSet<JobID>();

}

Location: MockSimulatorEngine.java

Content: 

private void validateEnd(){

  Assert.assertEquals("Number of submitted jobs does not match trace",submittedJobs.size(),fixedJobs);

  Assert.assertEquals("Number of submitted jobs does not match trace",completedJobs.size(),fixedJobs);

}

Location: MockSimulatorEngine.java

Content: 

private void validateInitialization(){

  Assert.assertTrue("SimulatorJobTracker is null",jt != null);

  Assert.assertTrue("Clock of simulator is behind startTime",SimulatorJobTracker.getClock().getTime() >= startTime);

  Assert.assertTrue("SimulatorJobClient is null",jc != null);

}

Location: MockSimulatorEngine.java

Content: 

private void validateJobComplete(JobCompleteEvent completeEvent){

  JobID jobId=completeEvent.getJobStatus().getJobID();

  JobStatus finalStatus=completeEvent.getJobStatus();

  Assert.assertTrue("Job completed was not submitted:" + jobId,submittedJobs.contains(jobId));

  Assert.assertFalse("Job completed more than once:" + jobId,completedJobs.contains(jobId));

  completedJobs.add(jobId);

  Pre21JobHistoryConstants.Values finalValue=jobs.get(jobId).getOutcome();

  Pre21JobHistoryConstants.Values obtainedStatus=convertState(finalStatus);

  Assert.assertEquals("Job completion final status mismatch",obtainedStatus,finalValue);

}

Location: MockSimulatorEngine.java

Content: 

private void validateJobSubmission(JobSubmissionEvent submissionEvent){

  JobID jobId=submissionEvent.getJob().getJobID();

  LOG.info("Job being submitted: " + jobId);

  Assert.assertFalse("Job " + jobId + " is already submitted",submittedJobs.contains(jobId));

  LOG.info("Adding to submitted Jobs " + jobId);

  submittedJobs.add(jobId);

  jobs.put(jobId,submissionEvent.getJob());

  Pre21JobHistoryConstants.Values finalValue=submissionEvent.getJob().getOutcome();

  Assert.assertTrue("Job has final state neither SUCCESS nor FAILED",finalValue == Pre21JobHistoryConstants.Values.FAILED || finalValue == Pre21JobHistoryConstants.Values.SUCCESS);

}

