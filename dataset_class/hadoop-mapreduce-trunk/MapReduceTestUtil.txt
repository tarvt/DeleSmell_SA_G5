Location: MapReduceTestUtil.java

Content: 

/** 

 * Cleans the data from the passed Path in the passed FileSystem.

 * @param fs FileSystem to delete data from.

 * @param dirPath Path to be deleted.

 * @throws IOException If an error occurs cleaning the data.

 */

public static void cleanData(FileSystem fs,Path dirPath) throws IOException {

  fs.delete(dirPath,true);

}

Location: MapReduceTestUtil.java

Content: 

/** 

 * Creates a simple copy job.

 * @param conf Configuration object

 * @param outdir Output directory.

 * @param indirs Comma separated input directories.

 * @return Job initialized for a data copy job.

 * @throws Exception If an error occurs creating job configuration.

 */

public static Job createCopyJob(Configuration conf,Path outdir,Path... indirs) throws Exception {

  conf.setInt(MRJobConfig.NUM_MAPS,3);

  Job theJob=Job.getInstance(conf);

  theJob.setJobName("DataMoveJob");

  FileInputFormat.setInputPaths(theJob,indirs);

  theJob.setMapperClass(DataCopyMapper.class);

  FileOutputFormat.setOutputPath(theJob,outdir);

  theJob.setOutputKeyClass(Text.class);

  theJob.setOutputValueClass(Text.class);

  theJob.setReducerClass(DataCopyReducer.class);

  theJob.setNumReduceTasks(1);

  return theJob;

}

Location: MapReduceTestUtil.java

Content: 

public static TaskAttemptContext createDummyMapTaskAttemptContext(Configuration conf){

  TaskAttemptID tid=new TaskAttemptID("jt",1,TaskType.MAP,0,0);

  conf.set(MRJobConfig.TASK_ATTEMPT_ID,tid.toString());

  return new TaskAttemptContextImpl(conf,tid);

}

Location: MapReduceTestUtil.java

Content: 

public static StatusReporter createDummyReporter(){

  return new StatusReporter(){

    public void setStatus(    String s){

    }

    public void progress(){

    }

    @Override public float getProgress(){

      return 0;

    }

    public Counter getCounter(    Enum<?> name){

      return new Counters().findCounter(name);

    }

    public Counter getCounter(    String group,    String name){

      return new Counters().findCounter(group,name);

    }

  }

;

}

Location: MapReduceTestUtil.java

Content: 

/** 

 * Creates a simple fail job.

 * @param conf Configuration object

 * @param outdir Output directory.

 * @param indirs Comma separated input directories.

 * @return Job initialized for a simple fail job.

 * @throws Exception If an error occurs creating job configuration.

 */

public static Job createFailJob(Configuration conf,Path outdir,Path... indirs) throws Exception {

  FileSystem fs=outdir.getFileSystem(conf);

  if (fs.exists(outdir)) {

    fs.delete(outdir,true);

  }

  conf.setInt(MRJobConfig.MAP_MAX_ATTEMPTS,2);

  Job theJob=Job.getInstance(conf);

  theJob.setJobName("Fail-Job");

  FileInputFormat.setInputPaths(theJob,indirs);

  theJob.setMapperClass(FailMapper.class);

  theJob.setReducerClass(Reducer.class);

  theJob.setNumReduceTasks(0);

  FileOutputFormat.setOutputPath(theJob,outdir);

  theJob.setOutputKeyClass(Text.class);

  theJob.setOutputValueClass(Text.class);

  return theJob;

}

Location: MapReduceTestUtil.java

Content: 

public static Job createJob(Configuration conf,Path inDir,Path outDir,int numInputFiles,int numReds) throws IOException {

  String input="The quick brown fox\n" + "has many silly\n" + "red fox sox\n";

  return createJob(conf,inDir,outDir,numInputFiles,numReds,input);

}

Location: MapReduceTestUtil.java

Content: 

public static Job createJob(Configuration conf,Path inDir,Path outDir,int numInputFiles,int numReds,String input) throws IOException {

  Job job=Job.getInstance(conf);

  FileSystem fs=FileSystem.get(conf);

  if (fs.exists(outDir)) {

    fs.delete(outDir,true);

  }

  if (fs.exists(inDir)) {

    fs.delete(inDir,true);

  }

  fs.mkdirs(inDir);

  for (int i=0; i < numInputFiles; ++i) {

    DataOutputStream file=fs.create(new Path(inDir,"part-" + i));

    file.writeBytes(input);

    file.close();

  }

  FileInputFormat.setInputPaths(job,inDir);

  FileOutputFormat.setOutputPath(job,outDir);

  job.setNumReduceTasks(numReds);

  return job;

}

Location: MapReduceTestUtil.java

Content: 

/** 

 * Creates a simple fail job.

 * @param conf Configuration object

 * @param outdir Output directory.

 * @param indirs Comma separated input directories.

 * @return Job initialized for a simple kill job.

 * @throws Exception If an error occurs creating job configuration.

 */

public static Job createKillJob(Configuration conf,Path outdir,Path... indirs) throws Exception {

  Job theJob=Job.getInstance(conf);

  theJob.setJobName("Kill-Job");

  FileInputFormat.setInputPaths(theJob,indirs);

  theJob.setMapperClass(KillMapper.class);

  theJob.setReducerClass(Reducer.class);

  theJob.setNumReduceTasks(0);

  FileOutputFormat.setOutputPath(theJob,outdir);

  theJob.setOutputKeyClass(Text.class);

  theJob.setOutputValueClass(Text.class);

  return theJob;

}

Location: MapReduceTestUtil.java

Content: 

/** 

 * Generates random data consisting of 10000 lines.

 * @param fs FileSystem to create data in.

 * @param dirPath Path to create the data in.

 * @throws IOException If an error occurs creating the data.

 */

public static void generateData(FileSystem fs,Path dirPath) throws IOException {

  FSDataOutputStream out=fs.create(new Path(dirPath,"data.txt"));

  for (int i=0; i < 10000; i++) {

    String line=generateRandomLine();

    out.write(line.getBytes("UTF-8"));

  }

  out.close();

}

Location: MapReduceTestUtil.java

Content: 

/** 

 * Generates a line of random text.

 * @return A line of random text.

 */

public static String generateRandomLine(){

  long r=rand.nextLong() % 7;

  long n=r + 20;

  StringBuffer sb=new StringBuffer();

  for (int i=0; i < n; i++) {

    sb.append(generateRandomWord()).append(" ");

  }

  sb.append("\n");

  return sb.toString();

}

Location: MapReduceTestUtil.java

Content: 

/** 

 * Generates a string of random digits.

 * @return A random string.

 */

public static String generateRandomWord(){

  return idFormat.format(rand.nextLong());

}

Location: MapReduceTestUtil.java

Content: 

public static String readOutput(Path outDir,Configuration conf) throws IOException {

  FileSystem fs=outDir.getFileSystem(conf);

  StringBuffer result=new StringBuffer();

  Path[] fileList=FileUtil.stat2Paths(fs.listStatus(outDir,new Utils.OutputFileUtils.OutputFilesFilter()));

  for (  Path outputFile : fileList) {

    LOG.info("Path" + ": " + outputFile);

    BufferedReader file=new BufferedReader(new InputStreamReader(fs.open(outputFile)));

    String line=file.readLine();

    while (line != null) {

      result.append(line);

      result.append("\n");

      line=file.readLine();

    }

    file.close();

  }

  return result.toString();

}

Location: MapReduceTestUtil.java

Content: 

/** 

 * Reads tasklog and returns it as string after trimming it.

 * @param filter Task log filter; can be STDOUT, STDERR, SYSLOG, DEBUGOUT, PROFILE

 * @param taskId The task id for which the log has to collected

 * @param isCleanup whether the task is a cleanup attempt or not.

 * @return task log as string

 * @throws IOException

 */

public static String readTaskLog(TaskLog.LogName filter,org.apache.hadoop.mapred.TaskAttemptID taskId,boolean isCleanup) throws IOException {

  StringBuffer result=new StringBuffer();

  int res;

  InputStream taskLogReader=new TaskLog.Reader(taskId,filter,0,-1,isCleanup);

  byte[] b=new byte[65536];

  while (true) {

    res=taskLogReader.read(b);

    if (res > 0) {

      result.append(new String(b));

    }

 else {

      break;

    }

  }

  taskLogReader.close();

  String str=result.toString();

  str=str.trim();

  return str;

}

