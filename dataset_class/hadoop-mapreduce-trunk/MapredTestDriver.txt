Location: MapredTestDriver.java

Content: 

public MapredTestDriver(){

  this(new ProgramDriver());

}

Location: MapredTestDriver.java

Content: 

public MapredTestDriver(ProgramDriver pgd){

  this.pgd=pgd;

  try {

    pgd.addClass("testsequencefile",TestSequenceFile.class,"A test for flat files of binary key value pairs.");

    pgd.addClass("threadedmapbench",ThreadedMapBenchmark.class,"A map/reduce benchmark that compares the performance " + "of maps with multiple spills over maps with 1 spill");

    pgd.addClass("mrbench",MRBench.class,"A map/reduce benchmark that can create many small jobs");

    pgd.addClass("mapredtest",TestMapRed.class,"A map/reduce test check.");

    pgd.addClass("testsequencefileinputformat",TestSequenceFileInputFormat.class,"A test for sequence file input format.");

    pgd.addClass("testtextinputformat",TestTextInputFormat.class,"A test for text input format.");

    pgd.addClass("testmapredsort",SortValidator.class,"A map/reduce program that validates the " + "map-reduce framework's sort.");

    pgd.addClass("testbigmapoutput",BigMapOutput.class,"A map/reduce program that works on a very big " + "non-splittable file and does identity map/reduce");

    pgd.addClass("loadgen",GenericMRLoadGenerator.class,"Generic map/reduce load generator");

    pgd.addClass("MRReliabilityTest",ReliabilityTest.class,"A program that tests the reliability of the MR framework by " + "injecting faults/failures");

    pgd.addClass("fail",FailJob.class,"a job that always fails");

    pgd.addClass("sleep",SleepJob.class,"A job that sleeps at each map and reduce task.");

    pgd.addClass("nnbench",NNBench.class,"A benchmark that stresses the namenode.");

    pgd.addClass("testfilesystem",TestFileSystem.class,"A test for FileSystem read/write.");

    pgd.addClass(TestDFSIO.class.getSimpleName(),TestDFSIO.class,"Distributed i/o benchmark.");

    pgd.addClass("DFSCIOTest",DFSCIOTest.class,"" + "Distributed i/o benchmark of libhdfs.");

    pgd.addClass("DistributedFSCheck",DistributedFSCheck.class,"Distributed checkup of the file system consistency.");

    pgd.addClass("filebench",FileBench.class,"Benchmark SequenceFile(Input|Output)Format " + "(block,record compressed and uncompressed), " + "Text(Input|Output)Format (compressed and uncompressed)");

    pgd.addClass(JHLogAnalyzer.class.getSimpleName(),JHLogAnalyzer.class,"Job History Log analyzer.");

    pgd.addClass(SliveTest.class.getSimpleName(),SliveTest.class,"HDFS Stress Test and Live Data Verification.");

  }

 catch (  Throwable e) {

    e.printStackTrace();

  }

}

