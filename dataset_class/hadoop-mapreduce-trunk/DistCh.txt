Location: DistCh.java

Content: 

private static void checkDuplication(FileSystem fs,Path file,Path sorted,Configuration conf) throws IOException {

  SequenceFile.Sorter sorter=new SequenceFile.Sorter(fs,new Text.Comparator(),Text.class,FileOperation.class,conf);

  sorter.sort(file,sorted);

  SequenceFile.Reader in=null;

  try {

    in=new SequenceFile.Reader(fs,sorted,conf);

    FileOperation curop=new FileOperation();

    Text prevsrc=null, cursrc=new Text();

    for (; in.next(cursrc,curop); ) {

      if (prevsrc != null && cursrc.equals(prevsrc)) {

        throw new DuplicationException("Invalid input, there are duplicated files in the sources: " + prevsrc + ", "+ cursrc);

      }

      prevsrc=cursrc;

      cursrc=new Text();

      curop=new FileOperation();

    }

  }

  finally {

    in.close();

  }

}

Location: DistCh.java

Content: 

private static void check(Configuration conf,List<FileOperation> ops) throws InvalidInputException {

  List<Path> srcs=new ArrayList<Path>();

  for (  FileOperation op : ops) {

    srcs.add(op.src);

  }

  DistTool.checkSource(conf,srcs);

}

Location: DistCh.java

Content: 

private static JobConf createJobConf(Configuration conf){

  JobConf jobconf=new JobConf(conf,DistCh.class);

  jobconf.setJobName(NAME);

  jobconf.setMapSpeculativeExecution(false);

  jobconf.setInputFormat(ChangeInputFormat.class);

  jobconf.setOutputKeyClass(Text.class);

  jobconf.setOutputValueClass(Text.class);

  jobconf.setMapperClass(ChangeFilesMapper.class);

  jobconf.setNumReduceTasks(0);

  return jobconf;

}

Location: DistCh.java

Content: 

DistCh(Configuration conf){

  super(createJobConf(conf));

}

Location: DistCh.java

Content: 

private static List<FileOperation> fetchList(Configuration conf,Path inputfile) throws IOException {

  List<FileOperation> result=new ArrayList<FileOperation>();

  for (  String line : readFile(conf,inputfile)) {

    result.add(new FileOperation(line));

  }

  return result;

}

Location: DistCh.java

Content: 

/** 

 * Calculate how many maps to run. 

 */

private static int getMapCount(int srcCount,int numNodes){

  int numMaps=(int)(srcCount / OP_PER_MAP);

  numMaps=Math.min(numMaps,numNodes * MAX_MAPS_PER_NODE);

  return Math.max(numMaps,1);

}

Location: DistCh.java

Content: 

private boolean setup(List<FileOperation> ops,Path log) throws IOException {

  final String randomId=getRandomId();

  JobClient jClient=new JobClient(jobconf);

  Path stagingArea;

  try {

    stagingArea=JobSubmissionFiles.getStagingDir(jClient.getClusterHandle(),jobconf);

  }

 catch (  InterruptedException ie) {

    throw new IOException(ie);

  }

  Path jobdir=new Path(stagingArea + NAME + "_"+ randomId);

  FsPermission mapredSysPerms=new FsPermission(JobSubmissionFiles.JOB_DIR_PERMISSION);

  FileSystem.mkdirs(jClient.getFs(),jobdir,mapredSysPerms);

  LOG.info(JOB_DIR_LABEL + "=" + jobdir);

  if (log == null) {

    log=new Path(jobdir,"_logs");

  }

  FileOutputFormat.setOutputPath(jobconf,log);

  LOG.info("log=" + log);

  FileSystem fs=jobdir.getFileSystem(jobconf);

  Path opList=new Path(jobdir,"_" + OP_LIST_LABEL);

  jobconf.set(OP_LIST_LABEL,opList.toString());

  int opCount=0, synCount=0;

  SequenceFile.Writer opWriter=null;

  try {

    opWriter=SequenceFile.createWriter(fs,jobconf,opList,Text.class,FileOperation.class,SequenceFile.CompressionType.NONE);

    for (    FileOperation op : ops) {

      FileStatus srcstat=fs.getFileStatus(op.src);

      if (srcstat.isDirectory() && op.isDifferent(srcstat)) {

        ++opCount;

        opWriter.append(new Text(op.src.toString()),op);

      }

      Stack<Path> pathstack=new Stack<Path>();

      for (pathstack.push(op.src); !pathstack.empty(); ) {

        for (        FileStatus stat : fs.listStatus(pathstack.pop())) {

          if (stat.isDirectory()) {

            pathstack.push(stat.getPath());

          }

          if (op.isDifferent(stat)) {

            ++opCount;

            if (++synCount > SYNC_FILE_MAX) {

              opWriter.sync();

              synCount=0;

            }

            Path f=stat.getPath();

            opWriter.append(new Text(f.toString()),new FileOperation(f,op));

          }

        }

      }

    }

  }

  finally {

    opWriter.close();

  }

  checkDuplication(fs,opList,new Path(jobdir,"_sorted"),jobconf);

  jobconf.setInt(OP_COUNT_LABEL,opCount);

  LOG.info(OP_COUNT_LABEL + "=" + opCount);

  jobconf.setNumMapTasks(getMapCount(opCount,new JobClient(jobconf).getClusterStatus().getTaskTrackers()));

  return opCount != 0;

}

