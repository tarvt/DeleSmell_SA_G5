Location: TopologyBuilder.java

Content: 

/** 

 * Request the builder to build the final object. Once called, the {@link TopologyBuilder} would accept no more events or job-conf properties.

 * @return Parsed {@link LoggedNetworkTopology} object.

 */

public LoggedNetworkTopology build(){

  return new LoggedNetworkTopology(allHosts);

}

Location: TopologyBuilder.java

Content: 

private void preferredLocationForSplits(String splits){

  if (splits != null) {

    StringTokenizer tok=new StringTokenizer(splits,",",false);

    while (tok.hasMoreTokens()) {

      String nextSplit=tok.nextToken();

      recordParsedHost(nextSplit);

    }

  }

}

Location: TopologyBuilder.java

Content: 

private void processTaskAttemptFinishedEvent(TaskAttemptFinishedEvent event){

  recordParsedHost(event.getHostname());

}

Location: TopologyBuilder.java

Content: 

private void processTaskAttemptUnsuccessfulCompletionEvent(TaskAttemptUnsuccessfulCompletionEvent event){

  recordParsedHost(event.getHostname());

}

Location: TopologyBuilder.java

Content: 

private void processTaskStartedEvent(TaskStartedEvent event){

  preferredLocationForSplits(event.getSplitLocations());

}

Location: TopologyBuilder.java

Content: 

/** 

 * Process one  {@link HistoryEvent}

 * @param event The  {@link HistoryEvent} to be processed.

 */

public void process(HistoryEvent event){

  if (event instanceof TaskAttemptFinishedEvent) {

    processTaskAttemptFinishedEvent((TaskAttemptFinishedEvent)event);

  }

 else   if (event instanceof TaskAttemptUnsuccessfulCompletionEvent) {

    processTaskAttemptUnsuccessfulCompletionEvent((TaskAttemptUnsuccessfulCompletionEvent)event);

  }

 else   if (event instanceof TaskStartedEvent) {

    processTaskStartedEvent((TaskStartedEvent)event);

  }

}

Location: TopologyBuilder.java

Content: 

/** 

 * Process a collection of JobConf  {@link Properties}. We do not restrict it to be called once.

 * @param conf The job conf properties to be added.

 */

public void process(Properties conf){

}

Location: TopologyBuilder.java

Content: 

private void recordParsedHost(String hostName){

  ParsedHost result=ParsedHost.parse(hostName);

  if (result != null && !allHosts.contains(result)) {

    allHosts.add(result);

  }

}

