Location: DataJoinReducerBase.java

Content: 

/** 

 * The subclass can overwrite this method to perform additional filtering and/or other processing logic before a value is collected.

 * @param key

 * @param aRecord

 * @param output

 * @param reporter

 * @throws IOException

 */

protected void collect(Object key,TaggedMapOutput aRecord,OutputCollector output,Reporter reporter) throws IOException {

  this.collected+=1;

  addLongValue("collectedCount",1);

  if (aRecord != null) {

    output.collect(key,aRecord.getData());

    reporter.setStatus("key: " + key.toString() + " collected: "+ collected);

    addLongValue("actuallyCollectedCount",1);

  }

}

Location: DataJoinReducerBase.java

Content: 

/** 

 * @param tags a list of source tags

 * @param values a value per source

 * @return combined value derived from values of the sources

 */

protected abstract TaggedMapOutput combine(Object[] tags,Object[] values);

Location: DataJoinReducerBase.java

Content: 

/** 

 * The subclass can provide a different implementation on ResetableIterator. This is necessary if the number of values in a reduce call is very high. The default provided here uses ArrayListBackedIterator

 * @return an Object of ResetableIterator.

 */

protected ResetableIterator createResetableIterator(){

  return new ArrayListBackedIterator();

}

Location: DataJoinReducerBase.java

Content: 

/** 

 * Perform the actual join recursively.

 * @param tags a list of input tags

 * @param values a list of value lists, each corresponding to one input source

 * @param pos indicating the next value list to be joined

 * @param partialList a list of values, each from one value list considered so far.

 * @param key

 * @param output

 * @throws IOException

 */

private void joinAndCollect(Object[] tags,ResetableIterator[] values,int pos,Object[] partialList,Object key,OutputCollector output,Reporter reporter) throws IOException {

  if (values.length == pos) {

    TaggedMapOutput combined=combine(tags,partialList);

    collect(key,combined,output,reporter);

    return;

  }

  ResetableIterator nextValues=values[pos];

  nextValues.reset();

  while (nextValues.hasNext()) {

    Object v=nextValues.next();

    partialList[pos]=v;

    joinAndCollect(tags,values,pos + 1,partialList,key,output,reporter);

  }

}

Location: DataJoinReducerBase.java

Content: 

/** 

 * join the list of the value lists, and collect the results.

 * @param tags a list of input tags

 * @param values a list of value lists, each corresponding to one input source

 * @param key

 * @param output

 * @throws IOException

 */

private void joinAndCollect(Object[] tags,ResetableIterator[] values,Object key,OutputCollector output,Reporter reporter) throws IOException {

  if (values.length < 1) {

    return;

  }

  Object[] partialList=new Object[values.length];

  joinAndCollect(tags,values,0,partialList,key,output,reporter);

}

Location: DataJoinReducerBase.java

Content: 

/** 

 * This is the function that re-groups values for a key into sub-groups based on a secondary key (input tag).

 * @param arg1

 * @return

 */

private SortedMap<Object,ResetableIterator> regroup(Object key,Iterator arg1,Reporter reporter) throws IOException {

  this.numOfValues=0;

  SortedMap<Object,ResetableIterator> retv=new TreeMap<Object,ResetableIterator>();

  TaggedMapOutput aRecord=null;

  while (arg1.hasNext()) {

    this.numOfValues+=1;

    if (this.numOfValues % 100 == 0) {

      reporter.setStatus("key: " + key.toString() + " numOfValues: "+ this.numOfValues);

    }

    if (this.numOfValues > this.maxNumOfValuesPerGroup) {

      continue;

    }

    aRecord=((TaggedMapOutput)arg1.next()).clone(job);

    Text tag=aRecord.getTag();

    ResetableIterator data=retv.get(tag);

    if (data == null) {

      data=createResetableIterator();

      retv.put(tag,data);

    }

    data.add(aRecord);

  }

  if (this.numOfValues > this.largestNumOfValues) {

    this.largestNumOfValues=numOfValues;

    LOG.info("key: " + key.toString() + " this.largestNumOfValues: "+ this.largestNumOfValues);

  }

  return retv;

}

