Location: LoggedJob.java

Content: 

private void compare1(DeepCompare c1,DeepCompare c2,TreePath loc,String eltname,int index) throws DeepInequalityException {

  if (c1 == null && c2 == null) {

    return;

  }

  TreePath recursePath=new TreePath(loc,eltname,index);

  if (c1 == null || c2 == null) {

    if (index == -1) {

      throw new DeepInequalityException(eltname + " miscompared",recursePath);

    }

 else {

      throw new DeepInequalityException(eltname + "[" + index+ "] miscompared",recursePath);

    }

  }

  c1.deepCompare(c2,recursePath);

}

Location: LoggedJob.java

Content: 

private void compare1(double[] c1,double[] c2,TreePath loc,String eltname) throws DeepInequalityException {

  if (c1 == null && c2 == null) {

    return;

  }

  TreePath recursePath=new TreePath(loc,eltname);

  if (c1 == null || c2 == null || c1.length != c2.length) {

    throw new DeepInequalityException(eltname + " miscompared",recursePath);

  }

  for (int i=0; i < c1.length; ++i) {

    if (c1[i] != c2[i]) {

      throw new DeepInequalityException(eltname + " miscompared",new TreePath(loc,eltname,i));

    }

  }

}

Location: LoggedJob.java

Content: 

private void compare1(int c1,int c2,TreePath loc,String eltname) throws DeepInequalityException {

  if (c1 != c2) {

    throw new DeepInequalityException(eltname + " miscompared",new TreePath(loc,eltname));

  }

}

Location: LoggedJob.java

Content: 

private void compare1(JobPriority c1,JobPriority c2,TreePath loc,String eltname) throws DeepInequalityException {

  if (c1 != c2) {

    throw new DeepInequalityException(eltname + " miscompared",new TreePath(loc,eltname));

  }

}

Location: LoggedJob.java

Content: 

private void compare1(JobType c1,JobType c2,TreePath loc,String eltname) throws DeepInequalityException {

  if (c1 != c2) {

    throw new DeepInequalityException(eltname + " miscompared",new TreePath(loc,eltname));

  }

}

Location: LoggedJob.java

Content: 

private void compareCDFs(List<LoggedDiscreteCDF> c1,List<LoggedDiscreteCDF> c2,TreePath loc,String eltname) throws DeepInequalityException {

  if (c1 == null && c2 == null) {

    return;

  }

  if (c1 == null || c2 == null || c1.size() != c2.size()) {

    throw new DeepInequalityException(eltname + " miscompared",new TreePath(loc,eltname));

  }

  for (int i=0; i < c1.size(); ++i) {

    c1.get(i).deepCompare(c2.get(i),new TreePath(loc,eltname,i));

  }

}

Location: LoggedJob.java

Content: 

private void compareJobProperties(Properties prop1,Properties prop2,TreePath loc,String eltname) throws DeepInequalityException {

  if (prop1 == null && prop2 == null) {

    return;

  }

  if (prop1 == null || prop2 == null) {

    throw new DeepInequalityException(eltname + " miscompared [null]",new TreePath(loc,eltname));

  }

  if (prop1.size() != prop2.size()) {

    throw new DeepInequalityException(eltname + " miscompared [size]",new TreePath(loc,eltname));

  }

  for (  Map.Entry<Object,Object> entry : prop1.entrySet()) {

    Object v1=entry.getValue();

    Object v2=prop2.get(entry.getKey());

    if (v1 == null || v2 == null || !v1.equals(v2)) {

      throw new DeepInequalityException(eltname + " miscompared for value of key : " + entry.getKey().toString(),new TreePath(loc,eltname));

    }

  }

}

Location: LoggedJob.java

Content: 

private void compareLoggedTasks(List<LoggedTask> c1,List<LoggedTask> c2,TreePath loc,String eltname) throws DeepInequalityException {

  if (c1 == null && c2 == null) {

    return;

  }

  if (c1 == null || c2 == null || c1.size() != c2.size()) {

    throw new DeepInequalityException(eltname + " miscompared",new TreePath(loc,eltname));

  }

  for (int i=0; i < c1.size(); ++i) {

    c1.get(i).deepCompare(c2.get(i),new TreePath(loc,eltname,i));

  }

}

Location: LoggedJob.java

Content: 

private void compareStrings(List<String> c1,List<String> c2,TreePath loc,String eltname) throws DeepInequalityException {

  if (c1 == null && c2 == null) {

    return;

  }

  TreePath recursePath=new TreePath(loc,eltname);

  if (c1 == null || c2 == null || !c1.equals(c2)) {

    throw new DeepInequalityException(eltname + " miscompared",recursePath);

  }

}

Location: LoggedJob.java

Content: 

public int getClusterMapMB(){

  return clusterMapMB;

}

Location: LoggedJob.java

Content: 

public int getClusterReduceMB(){

  return clusterReduceMB;

}

Location: LoggedJob.java

Content: 

public long getComputonsPerMapInputByte(){

  return computonsPerMapInputByte;

}

Location: LoggedJob.java

Content: 

public long getComputonsPerMapOutputByte(){

  return computonsPerMapOutputByte;

}

Location: LoggedJob.java

Content: 

public long getComputonsPerReduceInputByte(){

  return computonsPerReduceInputByte;

}

Location: LoggedJob.java

Content: 

public long getComputonsPerReduceOutputByte(){

  return computonsPerReduceOutputByte;

}

Location: LoggedJob.java

Content: 

public List<String> getDirectDependantJobs(){

  return directDependantJobs;

}

Location: LoggedJob.java

Content: 

public ArrayList<LoggedDiscreteCDF> getFailedMapAttemptCDFs(){

  return failedMapAttemptCDFs;

}

Location: LoggedJob.java

Content: 

public double getFailedMapperFraction(){

  return failedMapperFraction;

}

Location: LoggedJob.java

Content: 

public LoggedDiscreteCDF getFailedReduceAttemptCDF(){

  return failedReduceAttemptCDF;

}

Location: LoggedJob.java

Content: 

public int getHeapMegabytes(){

  return heapMegabytes;

}

Location: LoggedJob.java

Content: 

public int getJobMapMB(){

  return jobMapMB;

}

Location: LoggedJob.java

Content: 

public String getJobName(){

  return jobName;

}

Location: LoggedJob.java

Content: 

/** 

 * Get the configuration properties of the job.

 */

public Properties getJobProperties(){

  return jobProperties;

}

Location: LoggedJob.java

Content: 

public int getJobReduceMB(){

  return jobReduceMB;

}

Location: LoggedJob.java

Content: 

public JobType getJobtype(){

  return jobtype;

}

Location: LoggedJob.java

Content: 

public long getLaunchTime(){

  return launchTime;

}

Location: LoggedJob.java

Content: 

public double[] getMapperTriesToSucceed(){

  return mapperTriesToSucceed;

}

Location: LoggedJob.java

Content: 

public List<LoggedTask> getMapTasks(){

  return mapTasks;

}

Location: LoggedJob.java

Content: 

public List<LoggedTask> getOtherTasks(){

  return otherTasks;

}

Location: LoggedJob.java

Content: 

public JobPriority getPriority(){

  return priority;

}

Location: LoggedJob.java

Content: 

public String getQueue(){

  return queue;

}

Location: LoggedJob.java

Content: 

public List<LoggedTask> getReduceTasks(){

  return reduceTasks;

}

Location: LoggedJob.java

Content: 

public long getRelativeTime(){

  return relativeTime;

}

Location: LoggedJob.java

Content: 

public long getSubmitTime(){

  return submitTime;

}

Location: LoggedJob.java

Content: 

public ArrayList<LoggedDiscreteCDF> getSuccessfulMapAttemptCDFs(){

  return successfulMapAttemptCDFs;

}

Location: LoggedJob.java

Content: 

public LoggedDiscreteCDF getSuccessfulReduceAttemptCDF(){

  return successfulReduceAttemptCDF;

}

Location: LoggedJob.java

Content: 

public int getTotalMaps(){

  return totalMaps;

}

Location: LoggedJob.java

Content: 

public int getTotalReduces(){

  return totalReduces;

}

Location: LoggedJob.java

Content: 

LoggedJob(){

}

Location: LoggedJob.java

Content: 

LoggedJob(String jobID){

  super();

  setJobID(jobID);

}

Location: LoggedJob.java

Content: 

void setClusterMapMB(int clusterMapMB){

  this.clusterMapMB=clusterMapMB;

}

Location: LoggedJob.java

Content: 

void setClusterReduceMB(int clusterReduceMB){

  this.clusterReduceMB=clusterReduceMB;

}

Location: LoggedJob.java

Content: 

void setComputonsPerMapInputByte(long computonsPerMapInputByte){

  this.computonsPerMapInputByte=computonsPerMapInputByte;

}

Location: LoggedJob.java

Content: 

void setComputonsPerMapOutputByte(long computonsPerMapOutputByte){

  this.computonsPerMapOutputByte=computonsPerMapOutputByte;

}

Location: LoggedJob.java

Content: 

void setComputonsPerReduceInputByte(long computonsPerReduceInputByte){

  this.computonsPerReduceInputByte=computonsPerReduceInputByte;

}

Location: LoggedJob.java

Content: 

void setComputonsPerReduceOutputByte(long computonsPerReduceOutputByte){

  this.computonsPerReduceOutputByte=computonsPerReduceOutputByte;

}

Location: LoggedJob.java

Content: 

void setDirectDependantJobs(List<String> directDependantJobs){

  this.directDependantJobs=directDependantJobs;

}

Location: LoggedJob.java

Content: 

void setFailedMapAttemptCDFs(ArrayList<LoggedDiscreteCDF> failedMapAttemptCDFs){

  this.failedMapAttemptCDFs=failedMapAttemptCDFs;

}

Location: LoggedJob.java

Content: 

void setFailedMapperFraction(double failedMapperFraction){

  this.failedMapperFraction=failedMapperFraction;

}

Location: LoggedJob.java

Content: 

void setFailedReduceAttemptCDF(LoggedDiscreteCDF failedReduceAttemptCDF){

  this.failedReduceAttemptCDF=failedReduceAttemptCDF;

}

Location: LoggedJob.java

Content: 

void setHeapMegabytes(int heapMegabytes){

  this.heapMegabytes=heapMegabytes;

}

Location: LoggedJob.java

Content: 

void setJobID(String jobID){

  this.jobID=jobID;

}

Location: LoggedJob.java

Content: 

void setJobMapMB(int jobMapMB){

  this.jobMapMB=jobMapMB;

}

Location: LoggedJob.java

Content: 

void setJobName(String jobName){

  this.jobName=jobName;

}

Location: LoggedJob.java

Content: 

/** 

 * Set the configuration properties of the job.

 */

void setJobProperties(Properties conf){

  this.jobProperties=conf;

}

Location: LoggedJob.java

Content: 

void setJobReduceMB(int jobReduceMB){

  this.jobReduceMB=jobReduceMB;

}

Location: LoggedJob.java

Content: 

void setJobtype(JobType jobtype){

  this.jobtype=jobtype;

}

Location: LoggedJob.java

Content: 

void setLaunchTime(long startTime){

  this.launchTime=startTime;

}

Location: LoggedJob.java

Content: 

void setMapperTriesToSucceed(double[] mapperTriesToSucceed){

  this.mapperTriesToSucceed=mapperTriesToSucceed;

}

Location: LoggedJob.java

Content: 

void setMapTasks(List<LoggedTask> mapTasks){

  this.mapTasks=mapTasks;

}

Location: LoggedJob.java

Content: 

void setOtherTasks(List<LoggedTask> otherTasks){

  this.otherTasks=otherTasks;

}

Location: LoggedJob.java

Content: 

void setOutcome(Pre21JobHistoryConstants.Values outcome){

  this.outcome=outcome;

}

Location: LoggedJob.java

Content: 

void setPriority(JobPriority priority){

  this.priority=priority;

}

Location: LoggedJob.java

Content: 

void setQueue(String queue){

  this.queue=queue;

}

Location: LoggedJob.java

Content: 

void setReduceTasks(List<LoggedTask> reduceTasks){

  this.reduceTasks=reduceTasks;

}

Location: LoggedJob.java

Content: 

void setRelativeTime(long relativeTime){

  this.relativeTime=relativeTime;

}

Location: LoggedJob.java

Content: 

void setSubmitTime(long submitTime){

  this.submitTime=submitTime;

}

Location: LoggedJob.java

Content: 

void setSuccessfulMapAttemptCDFs(ArrayList<LoggedDiscreteCDF> successfulMapAttemptCDFs){

  this.successfulMapAttemptCDFs=successfulMapAttemptCDFs;

}

Location: LoggedJob.java

Content: 

void setSuccessfulReduceAttemptCDF(LoggedDiscreteCDF successfulReduceAttemptCDF){

  this.successfulReduceAttemptCDF=successfulReduceAttemptCDF;

}

Location: LoggedJob.java

Content: 

void setTotalMaps(int totalMaps){

  this.totalMaps=totalMaps;

}

Location: LoggedJob.java

Content: 

void setTotalReduces(int totalReduces){

  this.totalReduces=totalReduces;

}

Location: LoggedJob.java

Content: 

void setUser(String user){

  this.user=user;

}

