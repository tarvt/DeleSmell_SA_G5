Location: WrappedRecordReader.java

Content: 

/** 

 * Implement Comparable contract (compare key at head of proxied RR with that of another).

 */

public int compareTo(ComposableRecordReader<K,?> other){

  return cmp.compare(key(),other.key());

}

Location: WrappedRecordReader.java

Content: 

public void initialize(InputSplit split,TaskAttemptContext context) throws IOException, InterruptedException {

  rr.initialize(split,context);

  conf=context.getConfiguration();

  nextKeyValue();

  if (!empty) {

    keyclass=key.getClass().asSubclass(WritableComparable.class);

    valueclass=value.getClass();

    if (cmp == null) {

      cmp=WritableComparator.get(keyclass);

    }

  }

}

Location: WrappedRecordReader.java

Content: 

/** 

 * Write key-value pair at the head of this stream to the objects provided; get next key-value pair from proxied RR.

 */

public boolean next(K key,U value) throws IOException {

  if (hasNext()) {

    WritableUtils.cloneInto(key,khead);

    WritableUtils.cloneInto(value,vhead);

    next();

    return true;

  }

  return false;

}

Location: WrappedRecordReader.java

Content: 

protected WrappedRecordReader(int id){

  this.id=id;

  vjoin=new StreamBackedIterator<U>();

}

Location: WrappedRecordReader.java

Content: 

/** 

 * For a given RecordReader rr, occupy position id in collector.

 */

WrappedRecordReader(int id,RecordReader<K,U> rr,Class<? extends WritableComparator> cmpcl) throws IOException, InterruptedException {

  this.id=id;

  this.rr=rr;

  if (cmpcl != null) {

    try {

      this.cmp=cmpcl.newInstance();

    }

 catch (    InstantiationException e) {

      throw new IOException(e);

    }

catch (    IllegalAccessException e) {

      throw new IOException(e);

    }

  }

  vjoin=new StreamBackedIterator<U>();

}

