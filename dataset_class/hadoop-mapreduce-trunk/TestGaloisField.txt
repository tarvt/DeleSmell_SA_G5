Location: TestGaloisField.java

Content: 

private int randGF(){

  return 0x000000FF & RAND.nextInt(GF.getFieldSize());

}

Location: TestGaloisField.java

Content: 

private int[] randGFPoly(int len){

  int[] result=new int[len];

  for (int i=0; i < len; i++) {

    result[i]=randGF();

  }

  return result;

}

Location: TestGaloisField.java

Content: 

public void testDevision(){

  for (int i=0; i < TEST_TIMES; i++) {

    int a=RAND.nextInt(GF.getFieldSize());

    int b=RAND.nextInt(GF.getFieldSize());

    if (b == 0) {

      continue;

    }

    int c=GF.divide(a,b);

    assertTrue("Division test #" + i + " failed: "+ a+ "/"+ b+ " = "+ c,a == GF.multiply(c,b));

  }

}

Location: TestGaloisField.java

Content: 

public void testDistributivity(){

  for (int i=0; i < TEST_TIMES; i++) {

    int a=RAND.nextInt(GF.getFieldSize());

    int b=RAND.nextInt(GF.getFieldSize());

    int c=RAND.nextInt(GF.getFieldSize());

    int result1=GF.multiply(a,GF.add(b,c));

    int result2=GF.add(GF.multiply(a,b),GF.multiply(a,c));

    assertTrue("Distributivity test #" + i + " failed: "+ a+ ", "+ b+ ", "+ c,result1 == result2);

  }

}

Location: TestGaloisField.java

Content: 

public void testGetInstance(){

  GaloisField gf1=GaloisField.getInstance(256,285);

  GaloisField gf2=GaloisField.getInstance();

  GaloisField gf3=GaloisField.getInstance(128,137);

  GaloisField gf4=GaloisField.getInstance(128,137);

  GaloisField gf5=GaloisField.getInstance(512,529);

  GaloisField gf6=GaloisField.getInstance(512,529);

  assertTrue(gf1 == gf2);

  assertTrue(gf3 == gf4);

  assertTrue(gf5 == gf6);

}

Location: TestGaloisField.java

Content: 

public void testPolynomialDistributivity(){

  final int TEST_LEN=15;

  for (int i=0; i < TEST_TIMES; i++) {

    int[] a=randGFPoly(RAND.nextInt(TEST_LEN - 1) + 1);

    int[] b=randGFPoly(RAND.nextInt(TEST_LEN - 1) + 1);

    int[] c=randGFPoly(RAND.nextInt(TEST_LEN - 1) + 1);

    int[] result1=GF.multiply(a,GF.add(b,c));

    int[] result2=GF.add(GF.multiply(a,b),GF.multiply(a,c));

    assertTrue("Distributivity test on polynomials failed",java.util.Arrays.equals(result1,result2));

  }

}

Location: TestGaloisField.java

Content: 

public void testPower(){

  for (int i=0; i < TEST_TIMES; i++) {

    int a=randGF();

    int n=RAND.nextInt(10);

    int result1=GF.power(a,n);

    int result2=1;

    for (int j=0; j < n; j++) {

      result2=GF.multiply(result2,a);

    }

    assert (result1 == result2);

  }

}

Location: TestGaloisField.java

Content: 

public void testRemainder(){

  final int TEST_LEN=15;

  for (int i=0; i < TEST_TIMES; i++) {

    int[] quotient=null;

    int[] divisor=null;

    int[] remainder=null;

    int[] dividend=null;

    while (true) {

      quotient=randGFPoly(RAND.nextInt(TEST_LEN - 3) + 3);

      divisor=randGFPoly(RAND.nextInt(quotient.length - 2) + 2);

      remainder=randGFPoly(RAND.nextInt(divisor.length - 1) + 1);

      dividend=GF.add(remainder,GF.multiply(quotient,divisor));

      if (quotient[quotient.length - 1] != 0 && divisor[divisor.length - 1] != 0 && remainder[remainder.length - 1] != 0) {

        break;

      }

    }

    GF.remainder(dividend,divisor);

    for (int j=0; j < remainder.length; j++) {

      assertTrue("Distributivity test on polynomials failed",dividend[j] == remainder[j]);

    }

  }

}

Location: TestGaloisField.java

Content: 

public void testSolveVandermondeSystem(){

  final int TEST_LEN=15;

  for (int i=0; i < TEST_TIMES; i++) {

    int[] z=randGFPoly(RAND.nextInt(TEST_LEN - 1) + 1);

    int[] x=new int[z.length];

    Set<Integer> s=new HashSet<Integer>();

    while (s.size() != z.length) {

      s.add(randGF());

    }

    int t=0;

    for (    int v : s) {

      x[t++]=v;

    }

    int[] y=new int[x.length];

    for (int j=0; j < x.length; j++) {

      y[j]=0;

      for (int k=0; k < x.length; k++) {

        y[j]=GF.add(y[j],GF.multiply(GF.power(x[k],j),z[k]));

      }

    }

    GF.solveVandermondeSystem(x,y);

    assertTrue("Solving Vandermonde system failed",java.util.Arrays.equals(y,z));

  }

}

Location: TestGaloisField.java

Content: 

public void testSubstitute(){

  final int TEST_LEN=15;

  for (int i=0; i < TEST_TIMES; i++) {

    int[] a=randGFPoly(RAND.nextInt(TEST_LEN - 1) + 1);

    int[] b=randGFPoly(RAND.nextInt(TEST_LEN - 1) + 1);

    int[] c=randGFPoly(RAND.nextInt(TEST_LEN - 1) + 1);

    int x=randGF();

    int result1=GF.substitute(GF.multiply(GF.multiply(a,b),c),x);

    int result2=GF.multiply(GF.multiply(GF.substitute(a,x),GF.substitute(b,x)),GF.substitute(c,x));

    assertTrue("Substitute test on polynomial failed",result1 == result2);

  }

}

