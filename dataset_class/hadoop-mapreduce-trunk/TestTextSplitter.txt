Location: TestTextSplitter.java

Content: 

public void assertArrayEquals(Object[] expected,Object[] actual){

  for (int i=0; i < expected.length; i++) {

    try {

      assertEquals("Failure at position " + i + "; got "+ actual[i]+ " instead of "+ expected[i]+ "; actual array is "+ formatArray(actual),expected[i],actual[i]);

    }

 catch (    ArrayIndexOutOfBoundsException oob) {

      fail("Expected array with " + expected.length + " elements; got "+ actual.length+ ". Actual array is "+ formatArray(actual));

    }

  }

  if (actual.length > expected.length) {

    fail("Actual array has " + actual.length + " elements; expected "+ expected.length+ ". Actual array is "+ formatArray(actual));

  }

}

Location: TestTextSplitter.java

Content: 

public String formatArray(Object[] ar){

  StringBuilder sb=new StringBuilder();

  sb.append("[");

  boolean first=true;

  for (  Object val : ar) {

    if (!first) {

      sb.append(", ");

    }

    sb.append(val.toString());

    first=false;

  }

  sb.append("]");

  return sb.toString();

}

Location: TestTextSplitter.java

Content: 

public void testAlphabetSplit() throws SQLException {

  TextSplitter splitter=new TextSplitter();

  List<String> splits=splitter.split(25,"A","Z","");

  String[] expected={"A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z"};

  assertArrayEquals(expected,splits.toArray(new String[0]));

}

Location: TestTextSplitter.java

Content: 

public void testBigDecConvertEmpty(){

  TextSplitter splitter=new TextSplitter();

  String emptyStr=splitter.bigDecimalToString(BigDecimal.ZERO);

  assertEquals("",emptyStr);

}

Location: TestTextSplitter.java

Content: 

public void testCommonPrefix() throws SQLException {

  TextSplitter splitter=new TextSplitter();

  List<String> splits=splitter.split(5,"nd","rdy","Ha");

  assertEquals("Hand",splits.get(0));

  assertEquals("Hardy",splits.get(splits.size() - 1));

  assertEquals(6,splits.size());

}

Location: TestTextSplitter.java

Content: 

public void testConvertA(){

  TextSplitter splitter=new TextSplitter();

  String out=splitter.bigDecimalToString(splitter.stringToBigDecimal("A"));

  assertEquals("A",out);

}

Location: TestTextSplitter.java

Content: 

public void testConvertChomped(){

  TextSplitter splitter=new TextSplitter();

  String out=splitter.bigDecimalToString(splitter.stringToBigDecimal("AVeryLongStringIndeed"));

  assertEquals("AVeryLon",out);

}

Location: TestTextSplitter.java

Content: 

public void testConvertStr(){

  TextSplitter splitter=new TextSplitter();

  String out=splitter.bigDecimalToString(splitter.stringToBigDecimal("big str"));

  assertEquals("big str",out);

}

Location: TestTextSplitter.java

Content: 

public void testConvertThreeChars(){

  TextSplitter splitter=new TextSplitter();

  String out=splitter.bigDecimalToString(splitter.stringToBigDecimal("abc"));

  assertEquals("abc",out);

}

Location: TestTextSplitter.java

Content: 

public void testConvertZ(){

  TextSplitter splitter=new TextSplitter();

  String out=splitter.bigDecimalToString(splitter.stringToBigDecimal("Z"));

  assertEquals("Z",out);

}

Location: TestTextSplitter.java

Content: 

public void testStringConvertEmpty(){

  TextSplitter splitter=new TextSplitter();

  BigDecimal emptyBigDec=splitter.stringToBigDecimal("");

  assertEquals(BigDecimal.ZERO,emptyBigDec);

}

