Location: JobControl.java

Content: 

/** 

 * Add a collection of jobs

 * @param jobs

 */

public void addJobCollection(Collection<ControlledJob> jobs){

  for (  ControlledJob job : jobs) {

    addJob(job);

  }

}

Location: JobControl.java

Content: 

/** 

 * Add a collection of jobs

 * @param jobs

 */

public void addJobs(Collection<Job> jobs){

  for (  Job job : jobs) {

    addJob(job);

  }

}

Location: JobControl.java

Content: 

/** 

 * Add a new job.

 * @param aJob the new job

 */

synchronized public String addJob(ControlledJob aJob){

  String id=this.getNextJobID();

  aJob.setJobID(id);

  aJob.setJobState(State.WAITING);

  this.addToQueue(aJob);

  return id;

}

Location: JobControl.java

Content: 

private void addToQueue(ControlledJob aJob){

  Map<String,ControlledJob> queue=getQueue(aJob.getJobState());

  addToQueue(aJob,queue);

}

Location: JobControl.java

Content: 

private static void addToQueue(ControlledJob aJob,Map<String,ControlledJob> queue){

synchronized (queue) {

    queue.put(aJob.getJobID(),aJob);

  }

}

Location: JobControl.java

Content: 

synchronized public boolean allFinished(){

  return this.waitingJobs.size() == 0 && this.readyJobs.size() == 0 && this.runningJobs.size() == 0;

}

Location: JobControl.java

Content: 

static ArrayList<Job> castToJobList(List<ControlledJob> cjobs){

  ArrayList<Job> ret=new ArrayList<Job>();

  for (  ControlledJob job : cjobs) {

    ret.add((Job)job);

  }

  return ret;

}

Location: JobControl.java

Content: 

synchronized private void checkWaitingJobs() throws IOException, InterruptedException {

  Map<String,ControlledJob> oldJobs=null;

  oldJobs=this.waitingJobs;

  this.waitingJobs=new Hashtable<String,ControlledJob>();

  for (  ControlledJob nextJob : oldJobs.values()) {

    nextJob.checkState();

    this.addToQueue(nextJob);

  }

}

Location: JobControl.java

Content: 

public List<ControlledJob> getFailedJobList(){

  return toList(this.failedJobs);

}

Location: JobControl.java

Content: 

public ArrayList<Job> getFailedJobs(){

  return castToJobList(super.getFailedJobList());

}

Location: JobControl.java

Content: 

private String getNextJobID(){

  nextJobID+=1;

  return this.groupName + this.nextJobID;

}

Location: JobControl.java

Content: 

private Map<String,ControlledJob> getQueue(State state){

  Map<String,ControlledJob> retv=null;

  if (state == State.WAITING) {

    retv=this.waitingJobs;

  }

 else   if (state == State.READY) {

    retv=this.readyJobs;

  }

 else   if (state == State.RUNNING) {

    retv=this.runningJobs;

  }

 else   if (state == State.SUCCESS) {

    retv=this.successfulJobs;

  }

 else   if (state == State.FAILED || state == State.DEPENDENT_FAILED) {

    retv=this.failedJobs;

  }

  return retv;

}

Location: JobControl.java

Content: 

/** 

 * @return the jobs in the ready state

 */

public ArrayList<Job> getReadyJobs(){

  return castToJobList(super.getReadyJobsList());

}

Location: JobControl.java

Content: 

/** 

 * @return the jobs in the ready state

 */

public List<ControlledJob> getReadyJobsList(){

  return toList(this.readyJobs);

}

Location: JobControl.java

Content: 

/** 

 * @return the jobs in the running state

 */

public List<ControlledJob> getRunningJobList(){

  return toList(this.runningJobs);

}

Location: JobControl.java

Content: 

/** 

 * @return the jobs in the running state

 */

public ArrayList<Job> getRunningJobs(){

  return castToJobList(super.getRunningJobList());

}

Location: JobControl.java

Content: 

/** 

 * @return the jobs in the success state

 */

public List<ControlledJob> getSuccessfulJobList(){

  return toList(this.successfulJobs);

}

Location: JobControl.java

Content: 

/** 

 * @return the jobs in the success state

 */

public ArrayList<Job> getSuccessfulJobs(){

  return castToJobList(super.getSuccessfulJobList());

}

Location: JobControl.java

Content: 

/** 

 * @return the thread state

 */

public ThreadState getThreadState(){

  return this.runnerState;

}

Location: JobControl.java

Content: 

/** 

 * @return the jobs in the waiting state

 */

public List<ControlledJob> getWaitingJobList(){

  return toList(this.waitingJobs);

}

Location: JobControl.java

Content: 

/** 

 * @return the jobs in the waiting state

 */

public ArrayList<Job> getWaitingJobs(){

  return castToJobList(super.getWaitingJobList());

}

Location: JobControl.java

Content: 

/** 

 * Construct a job control for a group of jobs.

 * @param groupName a name identifying this group

 */

public JobControl(String groupName){

  this.waitingJobs=new Hashtable<String,ControlledJob>();

  this.readyJobs=new Hashtable<String,ControlledJob>();

  this.runningJobs=new Hashtable<String,ControlledJob>();

  this.successfulJobs=new Hashtable<String,ControlledJob>();

  this.failedJobs=new Hashtable<String,ControlledJob>();

  this.nextJobID=-1;

  this.groupName=groupName;

  this.runnerState=ThreadState.READY;

}

Location: JobControl.java

Content: 

/** 

 * resume the suspended thread

 */

public void resume(){

  if (this.runnerState == ThreadState.SUSPENDED) {

    this.runnerState=ThreadState.RUNNING;

  }

}

Location: JobControl.java

Content: 

synchronized private void startReadyJobs(){

  Map<String,ControlledJob> oldJobs=null;

  oldJobs=this.readyJobs;

  this.readyJobs=new Hashtable<String,ControlledJob>();

  for (  ControlledJob nextJob : oldJobs.values()) {

    nextJob.submit();

    this.addToQueue(nextJob);

  }

}

Location: JobControl.java

Content: 

/** 

 * set the thread state to STOPPING so that the  thread will stop when it wakes up.

 */

public void stop(){

  this.runnerState=ThreadState.STOPPING;

}

Location: JobControl.java

Content: 

/** 

 * suspend the running thread

 */

public void suspend(){

  if (this.runnerState == ThreadState.RUNNING) {

    this.runnerState=ThreadState.SUSPENDED;

  }

}

Location: JobControl.java

Content: 

private static List<ControlledJob> toList(Map<String,ControlledJob> jobs){

  ArrayList<ControlledJob> retv=new ArrayList<ControlledJob>();

synchronized (jobs) {

    for (    ControlledJob job : jobs.values()) {

      retv.add(job);

    }

  }

  return retv;

}

