Location: StreamBaseRecordReader.java

Content: 

String getStatus(CharSequence record){

  long pos=-1;

  try {

    pos=getPos();

  }

 catch (  IOException io) {

  }

  String recStr;

  if (record.length() > statusMaxRecordChars_) {

    recStr=record.subSequence(0,statusMaxRecordChars_) + "...";

  }

 else {

    recStr=record.toString();

  }

  String unqualSplit=split_.getPath().getName() + ":" + split_.getStart()+ "+"+ split_.getLength();

  String status="HSTR " + StreamUtil.HOST + " "+ numRec_+ ". pos="+ pos+ " "+ unqualSplit+ " Processing record="+ recStr;

  status+=" " + splitName_;

  return status;

}

Location: StreamBaseRecordReader.java

Content: 

void numRecStats(byte[] record,int start,int len) throws IOException {

  numRec_++;

  if (numRec_ == nextStatusRec_) {

    String recordStr=new String(record,start,Math.min(len,statusMaxRecordChars_),"UTF-8");

    nextStatusRec_+=100;

    String status=getStatus(recordStr);

    LOG.info(status);

    reporter_.setStatus(status);

  }

}

Location: StreamBaseRecordReader.java

Content: 

public StreamBaseRecordReader(FSDataInputStream in,FileSplit split,Reporter reporter,JobConf job,FileSystem fs) throws IOException {

  in_=in;

  split_=split;

  start_=split_.getStart();

  length_=split_.getLength();

  end_=start_ + length_;

  splitName_=split_.getPath().getName();

  reporter_=reporter;

  job_=job;

  fs_=fs;

  statusMaxRecordChars_=job_.getInt(CONF_NS + "statuschars",200);

}

