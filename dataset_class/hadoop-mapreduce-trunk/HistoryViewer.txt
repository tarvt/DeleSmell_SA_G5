Location: HistoryViewer.java

Content: 

/** 

 * Return the TaskLogsUrl of a particular TaskAttempt

 * @param attempt

 * @return the taskLogsUrl. null if http-port or tracker-name ortask-attempt-id are unavailable.

 */

public static String getTaskLogsUrl(JobHistoryParser.TaskAttemptInfo attempt){

  if (attempt.getHttpPort() == -1 || attempt.getTrackerName().equals("") || attempt.getAttemptId() == null) {

    return null;

  }

  String taskTrackerName=JobInProgress.convertTrackerNameToHostName(attempt.getTrackerName());

  return TaskLogServlet.getTaskLogUrl(taskTrackerName,Integer.toString(attempt.getHttpPort()),attempt.getAttemptId().toString());

}

Location: HistoryViewer.java

Content: 

/** 

 * Constructs the HistoryViewer object

 * @param historyFile The fully qualified Path of the History File

 * @param conf The Configuration file

 * @param printAll Toggle to print all status to only killed/failed status

 * @throws IOException

 */

public HistoryViewer(String historyFile,Configuration conf,boolean printAll) throws IOException {

  this.printAll=printAll;

  String errorMsg="Unable to initialize History Viewer";

  try {

    Path jobFile=new Path(historyFile);

    fs=jobFile.getFileSystem(conf);

    String[] jobDetails=jobFile.getName().split("_");

    if (jobDetails.length < 2) {

      System.err.println("Ignore unrecognized file: " + jobFile.getName());

      throw new IOException(errorMsg);

    }

    JobHistoryParser parser=new JobHistoryParser(fs,jobFile);

    job=parser.parse();

    jobId=job.getJobId().toString();

  }

 catch (  Exception e) {

    throw new IOException(errorMsg,e);

  }

}

Location: HistoryViewer.java

Content: 

/** 

 * Print the job/task/attempt summary information

 * @throws IOException

 */

public void print() throws IOException {

  hongshuai();

  StringBuffer jobDetails=new StringBuffer();

  jobDetails.append("\nHadoop job: ").append(job.getJobId());

  jobDetails.append("\n=====================================");

  jobDetails.append("\nUser: ").append(job.getUsername());

  jobDetails.append("\nJobName: ").append(job.getJobname());

  jobDetails.append("\nJobConf: ").append(job.getJobConfPath());

  jobDetails.append("\nSubmitted At: ").append(StringUtils.getFormattedTimeWithDiff(dateFormat,job.getSubmitTime(),0));

  jobDetails.append("\nLaunched At: ").append(StringUtils.getFormattedTimeWithDiff(dateFormat,job.getLaunchTime(),job.getSubmitTime()));

  jobDetails.append("\nFinished At: ").append(StringUtils.getFormattedTimeWithDiff(dateFormat,job.getFinishTime(),job.getLaunchTime()));

  jobDetails.append("\nStatus: ").append(((job.getJobStatus() == null) ? "Incomplete" : job.getJobStatus()));

  printCounters(jobDetails,job.getTotalCounters(),job.getMapCounters(),job.getReduceCounters());

  jobDetails.append("\n");

  jobDetails.append("\n=====================================");

  System.out.println(jobDetails.toString());

  printTaskSummary();

  printJobAnalysis();

  printTasks(TaskType.JOB_SETUP,TaskStatus.State.FAILED.toString());

  printTasks(TaskType.JOB_SETUP,TaskStatus.State.KILLED.toString());

  printTasks(TaskType.MAP,TaskStatus.State.FAILED.toString());

  printTasks(TaskType.MAP,TaskStatus.State.KILLED.toString());

  printTasks(TaskType.REDUCE,TaskStatus.State.FAILED.toString());

  printTasks(TaskType.REDUCE,TaskStatus.State.KILLED.toString());

  printTasks(TaskType.JOB_CLEANUP,TaskStatus.State.FAILED.toString());

  printTasks(TaskType.JOB_CLEANUP,JobStatus.getJobRunState(JobStatus.KILLED));

  if (printAll) {

    printTasks(TaskType.JOB_SETUP,TaskStatus.State.SUCCEEDED.toString());

    printTasks(TaskType.MAP,TaskStatus.State.SUCCEEDED.toString());

    printTasks(TaskType.REDUCE,TaskStatus.State.SUCCEEDED.toString());

    printTasks(TaskType.JOB_CLEANUP,TaskStatus.State.SUCCEEDED.toString());

    printAllTaskAttempts(TaskType.JOB_SETUP);

    printAllTaskAttempts(TaskType.MAP);

    printAllTaskAttempts(TaskType.REDUCE);

    printAllTaskAttempts(TaskType.JOB_CLEANUP);

  }

  FilteredJob filter=new FilteredJob(job,TaskStatus.State.FAILED.toString());

  printFailedAttempts(filter);

  filter=new FilteredJob(job,TaskStatus.State.KILLED.toString());

  printFailedAttempts(filter);

}

Location: HistoryViewer.java

Content: 

private void printAllTaskAttempts(TaskType taskType){

  Map<TaskID,TaskInfo> tasks=job.getAllTasks();

  StringBuffer taskList=new StringBuffer();

  taskList.append("\n").append(taskType);

  taskList.append(" task list for ").append(job.getJobId());

  taskList.append("\nTaskId\t\tStartTime");

  if (TaskType.REDUCE.equals(taskType)) {

    taskList.append("\tShuffleFinished\tSortFinished");

  }

  taskList.append("\tFinishTime\tHostName\tError\tTaskLogs");

  taskList.append("\n====================================================");

  System.out.println(taskList.toString());

  for (  JobHistoryParser.TaskInfo task : tasks.values()) {

    for (    JobHistoryParser.TaskAttemptInfo attempt : task.getAllTaskAttempts().values()) {

      if (taskType.equals(task.getTaskType())) {

        taskList.setLength(0);

        taskList.append(attempt.getAttemptId()).append("\t");

        taskList.append(StringUtils.getFormattedTimeWithDiff(dateFormat,attempt.getStartTime(),0)).append("\t");

        if (TaskType.REDUCE.equals(taskType)) {

          taskList.append(StringUtils.getFormattedTimeWithDiff(dateFormat,attempt.getShuffleFinishTime(),attempt.getStartTime()));

          taskList.append("\t");

          taskList.append(StringUtils.getFormattedTimeWithDiff(dateFormat,attempt.getSortFinishTime(),attempt.getShuffleFinishTime()));

        }

        taskList.append(StringUtils.getFormattedTimeWithDiff(dateFormat,attempt.getFinishTime(),attempt.getStartTime()));

        taskList.append("\t");

        taskList.append(attempt.getHostname()).append("\t");

        taskList.append(attempt.getError());

        String taskLogsUrl=getTaskLogsUrl(attempt);

        taskList.append(taskLogsUrl != null ? taskLogsUrl : "n/a");

        System.out.println(taskList.toString());

      }

    }

  }

}

Location: HistoryViewer.java

Content: 

private void printAnalysis(JobHistoryParser.TaskAttemptInfo[] tasks,Comparator<JobHistoryParser.TaskAttemptInfo> cmp,String taskType,long avg,int showTasks){

  Arrays.sort(tasks,cmp);

  JobHistoryParser.TaskAttemptInfo min=tasks[tasks.length - 1];

  StringBuffer details=new StringBuffer();

  details.append("\nTime taken by best performing ");

  details.append(taskType).append(" task ");

  details.append(min.getAttemptId().getTaskID().toString()).append(": ");

  if ("map".equals(taskType)) {

    details.append(StringUtils.formatTimeDiff(min.getFinishTime(),min.getStartTime()));

  }

 else   if ("shuffle".equals(taskType)) {

    details.append(StringUtils.formatTimeDiff(min.getShuffleFinishTime(),min.getStartTime()));

  }

 else {

    details.append(StringUtils.formatTimeDiff(min.getFinishTime(),min.getShuffleFinishTime()));

  }

  details.append("\nAverage time taken by ");

  details.append(taskType).append(" tasks: ");

  details.append(StringUtils.formatTimeDiff(avg,0));

  details.append("\nWorse performing ");

  details.append(taskType).append(" tasks: ");

  details.append("\nTaskId\t\tTimetaken");

  System.out.println(details.toString());

  for (int i=0; i < showTasks && i < tasks.length; i++) {

    details.setLength(0);

    details.append(tasks[i].getAttemptId().getTaskID()).append(" ");

    if ("map".equals(taskType)) {

      details.append(StringUtils.formatTimeDiff(tasks[i].getFinishTime(),tasks[i].getStartTime()));

    }

 else     if ("shuffle".equals(taskType)) {

      details.append(StringUtils.formatTimeDiff(tasks[i].getShuffleFinishTime(),tasks[i].getStartTime()));

    }

 else {

      details.append(StringUtils.formatTimeDiff(tasks[i].getFinishTime(),tasks[i].getShuffleFinishTime()));

    }

    System.out.println(details.toString());

  }

}

Location: HistoryViewer.java

Content: 

private void printCounters(StringBuffer buff,Counters totalCounters,Counters mapCounters,Counters reduceCounters){

  if (totalCounters == null) {

    return;

  }

  buff.append("\nCounters: \n\n");

  buff.append(String.format("|%1$-30s|%2$-30s|%3$-10s|%4$-10s|%5$-10s|","Group Name","Counter name","Map Value","Reduce Value","Total Value"));

  buff.append("\n------------------------------------------" + "---------------------------------------------");

  for (  String groupName : totalCounters.getGroupNames()) {

    CounterGroup totalGroup=totalCounters.getGroup(groupName);

    CounterGroup mapGroup=mapCounters.getGroup(groupName);

    CounterGroup reduceGroup=reduceCounters.getGroup(groupName);

    Format decimal=new DecimalFormat();

    Iterator<org.apache.hadoop.mapreduce.Counter> ctrItr=totalGroup.iterator();

    while (ctrItr.hasNext()) {

      org.apache.hadoop.mapreduce.Counter counter=ctrItr.next();

      String name=counter.getName();

      String mapValue=decimal.format(mapGroup.findCounter(name).getValue());

      String reduceValue=decimal.format(reduceGroup.findCounter(name).getValue());

      String totalValue=decimal.format(counter.getValue());

      buff.append(String.format("\n|%1$-30s|%2$-30s|%3$-10s|%4$-10s|%5$-10s",totalGroup.getDisplayName(),counter.getDisplayName(),mapValue,reduceValue,totalValue));

    }

  }

}

Location: HistoryViewer.java

Content: 

private void printFailedAttempts(FilteredJob filteredJob){

  Map<String,Set<TaskID>> badNodes=filteredJob.getFilteredMap();

  StringBuffer attempts=new StringBuffer();

  if (badNodes.size() > 0) {

    attempts.append("\n").append(filteredJob.getFilter());

    attempts.append(" task attempts by nodes");

    attempts.append("\nHostname\tFailedTasks");

    attempts.append("\n===============================");

    System.out.println(attempts.toString());

    for (    Map.Entry<String,Set<TaskID>> entry : badNodes.entrySet()) {

      String node=entry.getKey();

      Set<TaskID> failedTasks=entry.getValue();

      attempts.setLength(0);

      attempts.append(node).append("\t");

      for (      TaskID t : failedTasks) {

        attempts.append(t).append(", ");

      }

      System.out.println(attempts.toString());

    }

  }

}

Location: HistoryViewer.java

Content: 

private void printJobAnalysis(){

  if (!job.getJobStatus().equals(JobStatus.getJobRunState(JobStatus.SUCCEEDED))) {

    System.out.println("No Analysis available as job did not finish");

    return;

  }

  AnalyzedJob avg=new AnalyzedJob(job);

  System.out.println("\nAnalysis");

  System.out.println("=========");

  printAnalysis(avg.getMapTasks(),cMap,"map",avg.getAvgMapTime(),10);

  printLast(avg.getMapTasks(),"map",cFinishMapRed);

  if (avg.getReduceTasks().length > 0) {

    printAnalysis(avg.getReduceTasks(),cShuffle,"shuffle",avg.getAvgShuffleTime(),10);

    printLast(avg.getReduceTasks(),"shuffle",cFinishShuffle);

    printAnalysis(avg.getReduceTasks(),cReduce,"reduce",avg.getAvgReduceTime(),10);

    printLast(avg.getReduceTasks(),"reduce",cFinishMapRed);

  }

  System.out.println("=========");

}

Location: HistoryViewer.java

Content: 

private void printLast(JobHistoryParser.TaskAttemptInfo[] tasks,String taskType,Comparator<JobHistoryParser.TaskAttemptInfo> cmp){

  Arrays.sort(tasks,cFinishMapRed);

  JobHistoryParser.TaskAttemptInfo last=tasks[0];

  StringBuffer lastBuf=new StringBuffer();

  lastBuf.append("The last ").append(taskType);

  lastBuf.append(" task ").append(last.getAttemptId().getTaskID());

  Long finishTime;

  if ("shuffle".equals(taskType)) {

    finishTime=last.getShuffleFinishTime();

  }

 else {

    finishTime=last.getFinishTime();

  }

  lastBuf.append(" finished at (relative to the Job launch time): ");

  lastBuf.append(StringUtils.getFormattedTimeWithDiff(dateFormat,finishTime,job.getLaunchTime()));

  System.out.println(lastBuf.toString());

}

Location: HistoryViewer.java

Content: 

private void printTaskSummary(){

  SummarizedJob ts=new SummarizedJob(job);

  StringBuffer taskSummary=new StringBuffer();

  taskSummary.append("\nTask Summary");

  taskSummary.append("\n============================");

  taskSummary.append("\nKind\tTotal\t");

  taskSummary.append("Successful\tFailed\tKilled\tStartTime\tFinishTime");

  taskSummary.append("\n");

  taskSummary.append("\nSetup\t").append(ts.totalSetups);

  taskSummary.append("\t").append(ts.numFinishedSetups);

  taskSummary.append("\t\t").append(ts.numFailedSetups);

  taskSummary.append("\t").append(ts.numKilledSetups);

  taskSummary.append("\t").append(StringUtils.getFormattedTimeWithDiff(dateFormat,ts.setupStarted,0));

  taskSummary.append("\t").append(StringUtils.getFormattedTimeWithDiff(dateFormat,ts.setupFinished,ts.setupStarted));

  taskSummary.append("\nMap\t").append(ts.totalMaps);

  taskSummary.append("\t").append(job.getFinishedMaps());

  taskSummary.append("\t\t").append(ts.numFailedMaps);

  taskSummary.append("\t").append(ts.numKilledMaps);

  taskSummary.append("\t").append(StringUtils.getFormattedTimeWithDiff(dateFormat,ts.mapStarted,0));

  taskSummary.append("\t").append(StringUtils.getFormattedTimeWithDiff(dateFormat,ts.mapFinished,ts.mapStarted));

  taskSummary.append("\nReduce\t").append(ts.totalReduces);

  taskSummary.append("\t").append(job.getFinishedReduces());

  taskSummary.append("\t\t").append(ts.numFailedReduces);

  taskSummary.append("\t").append(ts.numKilledReduces);

  taskSummary.append("\t").append(StringUtils.getFormattedTimeWithDiff(dateFormat,ts.reduceStarted,0));

  taskSummary.append("\t").append(StringUtils.getFormattedTimeWithDiff(dateFormat,ts.reduceFinished,ts.reduceStarted));

  taskSummary.append("\nCleanup\t").append(ts.totalCleanups);

  taskSummary.append("\t").append(ts.numFinishedCleanups);

  taskSummary.append("\t\t").append(ts.numFailedCleanups);

  taskSummary.append("\t").append(ts.numKilledCleanups);

  taskSummary.append("\t").append(StringUtils.getFormattedTimeWithDiff(dateFormat,ts.cleanupStarted,0));

  taskSummary.append("\t").append(StringUtils.getFormattedTimeWithDiff(dateFormat,ts.cleanupFinished,ts.cleanupStarted));

  taskSummary.append("\n============================\n");

  System.out.println(taskSummary.toString());

}

Location: HistoryViewer.java

Content: 

private void printTasks(TaskType taskType,String status){

  Map<TaskID,JobHistoryParser.TaskInfo> tasks=job.getAllTasks();

  StringBuffer header=new StringBuffer();

  header.append("\n").append(status).append(" ");

  header.append(taskType).append(" task list for ").append(jobId);

  header.append("\nTaskId\t\tStartTime\tFinishTime\tError");

  if (TaskType.MAP.equals(taskType)) {

    header.append("\tInputSplits");

  }

  header.append("\n====================================================");

  StringBuffer taskList=new StringBuffer();

  for (  JobHistoryParser.TaskInfo task : tasks.values()) {

    if (taskType.equals(task.getTaskType()) && (status.equals(task.getTaskStatus()) || status.equalsIgnoreCase("ALL"))) {

      taskList.setLength(0);

      taskList.append(task.getTaskId());

      taskList.append("\t").append(StringUtils.getFormattedTimeWithDiff(dateFormat,task.getStartTime(),0));

      taskList.append("\t").append(StringUtils.getFormattedTimeWithDiff(dateFormat,task.getFinishTime(),task.getStartTime()));

      taskList.append("\t").append(task.getError());

      if (TaskType.MAP.equals(taskType)) {

        taskList.append("\t").append(task.getSplitLocations());

      }

      if (taskList != null) {

        System.out.println(header.toString());

        System.out.println(taskList.toString());

      }

    }

  }

}

