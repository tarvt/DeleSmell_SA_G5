Location: DistributedCache.java

Content: 

/** 

 * Add an archive path to the current set of classpath entries. It adds the archive to cache as well.  Intended to be used by user code.

 * @param archive Path of the archive to be added

 * @param conf Configuration that contains the classpath setting

 * @deprecated Use {@link Job#addArchiveToClassPath(Path)} instead

 */

@Deprecated public static void addArchiveToClassPath(Path archive,Configuration conf) throws IOException {

  String classpath=conf.get(MRJobConfig.CLASSPATH_ARCHIVES);

  conf.set(MRJobConfig.CLASSPATH_ARCHIVES,classpath == null ? archive.toString() : classpath + "," + archive.toString());

  FileSystem fs=FileSystem.get(conf);

  URI uri=fs.makeQualified(archive).toUri();

  addCacheArchive(uri,conf);

}

Location: DistributedCache.java

Content: 

/** 

 * Add a archives to be localized to the conf.  Intended to be used by user code.

 * @param uri The uri of the cache to be localized

 * @param conf Configuration to add the cache to

 * @deprecated Use {@link Job#addCacheArchive(URI)} instead

 */

@Deprecated public static void addCacheArchive(URI uri,Configuration conf){

  String archives=conf.get(MRJobConfig.CACHE_ARCHIVES);

  conf.set(MRJobConfig.CACHE_ARCHIVES,archives == null ? uri.toString() : archives + "," + uri.toString());

}

Location: DistributedCache.java

Content: 

/** 

 * Add a file to be localized to the conf.  Intended to be used by user code.

 * @param uri The uri of the cache to be localized

 * @param conf Configuration to add the cache to

 * @deprecated Use {@link Job#addCacheFile(URI)} instead

 */

@Deprecated public static void addCacheFile(URI uri,Configuration conf){

  String files=conf.get(MRJobConfig.CACHE_FILES);

  conf.set(MRJobConfig.CACHE_FILES,files == null ? uri.toString() : files + "," + uri.toString());

}

Location: DistributedCache.java

Content: 

/** 

 * Add an file path to the current set of classpath entries It adds the file to cache as well.  Intended to be used by user code.

 * @param file Path of the file to be added

 * @param conf Configuration that contains the classpath setting

 * @deprecated Use {@link Job#addFileToClassPath(Path)} instead

 */

@Deprecated public static void addFileToClassPath(Path file,Configuration conf) throws IOException {

  String classpath=conf.get(MRJobConfig.CLASSPATH_FILES);

  conf.set(MRJobConfig.CLASSPATH_FILES,classpath == null ? file.toString() : classpath + "," + file.toString());

  FileSystem fs=FileSystem.get(conf);

  URI uri=fs.makeQualified(file).toUri();

  addCacheFile(uri,conf);

}

Location: DistributedCache.java

Content: 

/** 

 * This method checks if there is a conflict in the fragment names  of the uris. Also makes sure that each uri has a fragment. It  is only to be called if you want to create symlinks for  the various archives and files.  May be used by user code.

 * @param uriFiles The uri array of urifiles

 * @param uriArchives the uri array of uri archives

 */

public static boolean checkURIs(URI[] uriFiles,URI[] uriArchives){

  if ((uriFiles == null) && (uriArchives == null)) {

    return true;

  }

  Set<String> fragments=new HashSet<String>();

  if (uriFiles != null) {

    for (int i=0; i < uriFiles.length; i++) {

      String fragment=uriFiles[i].getFragment();

      if (fragment == null) {

        return false;

      }

      String lowerCaseFragment=fragment.toLowerCase();

      if (fragments.contains(lowerCaseFragment)) {

        return false;

      }

      fragments.add(lowerCaseFragment);

    }

  }

  if (uriArchives != null) {

    for (int i=0; i < uriArchives.length; i++) {

      String fragment=uriArchives[i].getFragment();

      if (fragment == null) {

        return false;

      }

      String lowerCaseFragment=fragment.toLowerCase();

      if (fragments.contains(lowerCaseFragment)) {

        return false;

      }

      fragments.add(lowerCaseFragment);

    }

  }

  return true;

}

Location: DistributedCache.java

Content: 

/** 

 * This method allows you to create symlinks in the current working directory of the task to all the cache files/archives. Intended to be used by user code.

 * @param conf the jobconf

 * @deprecated Use {@link Job#createSymlink()} instead  

 */

@Deprecated public static void createSymlink(Configuration conf){

  conf.set(MRJobConfig.CACHE_SYMLINK,"yes");

}

Location: DistributedCache.java

Content: 

/** 

 * Get the archive entries in classpath as an array of Path. Used by internal DistributedCache code.

 * @param conf Configuration that contains the classpath setting

 * @deprecated Use {@link JobContext#getArchiveClassPaths()} instead 

 */

@Deprecated public static Path[] getArchiveClassPaths(Configuration conf){

  ArrayList<String> list=(ArrayList<String>)conf.getStringCollection(MRJobConfig.CLASSPATH_ARCHIVES);

  if (list.size() == 0) {

    return null;

  }

  Path[] paths=new Path[list.size()];

  for (int i=0; i < list.size(); i++) {

    paths[i]=new Path(list.get(i));

  }

  return paths;

}

Location: DistributedCache.java

Content: 

/** 

 * Get the timestamps of the archives.  Used by internal DistributedCache and MapReduce code.

 * @param conf The configuration which stored the timestamps

 * @return a string array of timestamps 

 * @throws IOException

 * @deprecated Use {@link JobContext#getArchiveTimestamps()} instead

 */

@Deprecated public static String[] getArchiveTimestamps(Configuration conf){

  return conf.getStrings(MRJobConfig.CACHE_ARCHIVES_TIMESTAMPS);

}

Location: DistributedCache.java

Content: 

/** 

 * Get cache archives set in the Configuration.  Used by internal DistributedCache and MapReduce code.

 * @param conf The configuration which contains the archives

 * @return A URI array of the caches set in the Configuration

 * @throws IOException

 * @deprecated Use {@link JobContext#getCacheArchives()} instead

 */

@Deprecated public static URI[] getCacheArchives(Configuration conf) throws IOException {

  return StringUtils.stringToURI(conf.getStrings(MRJobConfig.CACHE_ARCHIVES));

}

Location: DistributedCache.java

Content: 

/** 

 * Get cache files set in the Configuration.  Used by internal DistributedCache and MapReduce code.

 * @param conf The configuration which contains the files

 * @return A URI array of the files set in the Configuration

 * @throws IOException

 * @deprecated Use {@link JobContext#getCacheFiles()} instead

 */

@Deprecated public static URI[] getCacheFiles(Configuration conf) throws IOException {

  return StringUtils.stringToURI(conf.getStrings(MRJobConfig.CACHE_FILES));

}

Location: DistributedCache.java

Content: 

/** 

 * Get the file entries in classpath as an array of Path. Used by internal DistributedCache code.

 * @param conf Configuration that contains the classpath setting

 * @deprecated Use {@link JobContext#getFileClassPaths()} instead 

 */

@Deprecated public static Path[] getFileClassPaths(Configuration conf){

  ArrayList<String> list=(ArrayList<String>)conf.getStringCollection(MRJobConfig.CLASSPATH_FILES);

  if (list.size() == 0) {

    return null;

  }

  Path[] paths=new Path[list.size()];

  for (int i=0; i < list.size(); i++) {

    paths[i]=new Path(list.get(i));

  }

  return paths;

}

Location: DistributedCache.java

Content: 

/** 

 * Get the timestamps of the files.  Used by internal DistributedCache and MapReduce code.

 * @param conf The configuration which stored the timestamps

 * @return a string array of timestamps 

 * @throws IOException

 * @deprecated Use {@link JobContext#getFileTimestamps()} instead

 */

@Deprecated public static String[] getFileTimestamps(Configuration conf){

  return conf.getStrings(MRJobConfig.CACHE_FILE_TIMESTAMPS);

}

Location: DistributedCache.java

Content: 

/** 

 * Return the path array of the localized caches.  Intended to be used by user code.

 * @param conf Configuration that contains the localized archives

 * @return A path array of localized caches

 * @throws IOException

 * @deprecated Use {@link JobContext#getLocalCacheArchives()} instead

 */

@Deprecated public static Path[] getLocalCacheArchives(Configuration conf) throws IOException {

  return StringUtils.stringToPath(conf.getStrings(MRJobConfig.CACHE_LOCALARCHIVES));

}

Location: DistributedCache.java

Content: 

/** 

 * Return the path array of the localized files.  Intended to be used by user code.

 * @param conf Configuration that contains the localized files

 * @return A path array of localized files

 * @throws IOException

 * @deprecated Use {@link JobContext#getLocalCacheFiles()} instead

 */

@Deprecated public static Path[] getLocalCacheFiles(Configuration conf) throws IOException {

  return StringUtils.stringToPath(conf.getStrings(MRJobConfig.CACHE_LOCALFILES));

}

Location: DistributedCache.java

Content: 

/** 

 * This method checks to see if symlinks are to be create for the  localized cache files in the current working directory  Used by internal DistributedCache code.

 * @param conf the jobconf

 * @return true if symlinks are to be created- else return false

 * @deprecated Use {@link JobContext#getSymlink()} instead

 */

@Deprecated public static boolean getSymlink(Configuration conf){

  String result=conf.get(MRJobConfig.CACHE_SYMLINK);

  if ("yes".equals(result)) {

    return true;

  }

  return false;

}

Location: DistributedCache.java

Content: 

/** 

 * Set the configuration with the given set of archives.  Intended to be used by user code.

 * @param archives The list of archives that need to be localized

 * @param conf Configuration which will be changed

 * @deprecated Use {@link Job#setCacheArchives(URI[])} instead

 */

@Deprecated public static void setCacheArchives(URI[] archives,Configuration conf){

  String sarchives=StringUtils.uriToString(archives);

  conf.set(MRJobConfig.CACHE_ARCHIVES,sarchives);

}

Location: DistributedCache.java

Content: 

/** 

 * Set the configuration with the given set of files.  Intended to be used by user code.

 * @param files The list of files that need to be localized

 * @param conf Configuration which will be changed

 * @deprecated Use {@link Job#setCacheFiles(URI[])} instead

 */

@Deprecated public static void setCacheFiles(URI[] files,Configuration conf){

  String sfiles=StringUtils.uriToString(files);

  conf.set(MRJobConfig.CACHE_FILES,sfiles);

}

