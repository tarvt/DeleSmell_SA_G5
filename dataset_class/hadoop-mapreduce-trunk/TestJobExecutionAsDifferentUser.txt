Location: TestJobExecutionAsDifferentUser.java

Content: 

public void testEnvironment() throws Exception {

  if (!shouldRun()) {

    return;

  }

  startCluster();

  jobOwner.doAs(new PrivilegedExceptionAction<Object>(){

    public Object run() throws Exception {

      TestMiniMRChildTask childTask=new TestMiniMRChildTask();

      Path inDir=new Path("input1");

      Path outDir=new Path("output1");

      try {

        childTask.runTestTaskEnv(getClusterConf(),inDir,outDir,false);

      }

 catch (      IOException e) {

        fail("IOException thrown while running enviroment test." + e.getMessage());

      }

 finally {

        FileSystem outFs=outDir.getFileSystem(getClusterConf());

        if (outFs.exists(outDir)) {

          assertOwnerShip(outDir);

          outFs.delete(outDir,true);

        }

 else {

          fail("Output directory does not exist" + outDir.toString());

        }

        return null;

      }

    }

  }

);

}

Location: TestJobExecutionAsDifferentUser.java

Content: 

public void testJobExecution() throws Exception {

  if (!shouldRun()) {

    return;

  }

  startCluster();

  jobOwner.doAs(new PrivilegedExceptionAction<Object>(){

    public Object run() throws Exception {

      Path inDir=new Path("input");

      Path outDir=new Path("output");

      RunningJob job;

      job=UtilsForTests.runJob(getClusterConf(),inDir,outDir,0,0);

      job.waitForCompletion();

      assertTrue("Job failed",job.isSuccessful());

      assertOwnerShip(outDir);

      job=UtilsForTests.runJob(getClusterConf(),inDir,outDir,1,0);

      job.waitForCompletion();

      assertTrue("Job failed",job.isSuccessful());

      assertOwnerShip(outDir);

      job=UtilsForTests.runJob(getClusterConf(),inDir,outDir,1,1);

      job.waitForCompletion();

      assertTrue("Job failed",job.isSuccessful());

      assertOwnerShip(outDir);

      JobConf myConf=getClusterConf();

      myConf.set(JobContext.JVM_NUMTASKS_TORUN,"-1");

      String[] args={"-m","6","-r","3","-mt","1000","-rt","1000"};

      assertEquals(0,ToolRunner.run(myConf,new SleepJob(),args));

      return null;

    }

  }

);

}

Location: TestJobExecutionAsDifferentUser.java

Content: 

/** 

 * Ensure that SIGQUIT can be properly sent by the LinuxTaskController if a task times out.

 */

public void testTimeoutStackTrace() throws Exception {

  if (!shouldRun()) {

    return;

  }

  startCluster();

  jobOwner.doAs(new PrivilegedExceptionAction<Object>(){

    public Object run() throws Exception {

      JobConf conf=getClusterConf();

      conf.setInt(JobContext.TASK_TIMEOUT,10000);

      conf.setInt(Job.COMPLETION_POLL_INTERVAL_KEY,50);

      SleepJob sleepJob=new SleepJob();

      sleepJob.setConf(conf);

      Job job=sleepJob.createJob(1,0,30000,1,0,0);

      job.setMaxMapAttempts(1);

      int prevNumSigQuits=MyLinuxTaskController.attemptedSigQuits;

      job.waitForCompletion(true);

      assertTrue("Did not detect a new SIGQUIT!",prevNumSigQuits < MyLinuxTaskController.attemptedSigQuits);

      assertEquals("A SIGQUIT attempt failed!",0,MyLinuxTaskController.failedSigQuits);

      return null;

    }

  }

);

}

