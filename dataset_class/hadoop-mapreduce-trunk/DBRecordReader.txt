Location: DBRecordReader.java

Content: 

/** 

 * @param split The InputSplit to read data for

 * @throws SQLException 

 */

public DBRecordReader(DBInputFormat.DBInputSplit split,Class<T> inputClass,Configuration conf,Connection conn,DBConfiguration dbConfig,String cond,String[] fields,String table) throws SQLException {

  this.inputClass=inputClass;

  this.split=split;

  this.conf=conf;

  this.connection=conn;

  this.dbConf=dbConfig;

  this.conditions=cond;

  this.fieldNames=fields;

  this.tableName=table;

}

Location: DBRecordReader.java

Content: 

protected String getConditions(){

  return conditions;

}

Location: DBRecordReader.java

Content: 

protected Connection getConnection(){

  return connection;

}

Location: DBRecordReader.java

Content: 

protected DBConfiguration getDBConf(){

  return dbConf;

}

Location: DBRecordReader.java

Content: 

protected String[] getFieldNames(){

  return fieldNames;

}

Location: DBRecordReader.java

Content: 

/** 

 * @deprecated 

 */

@Deprecated public long getPos() throws IOException {

  return pos;

}

Location: DBRecordReader.java

Content: 

/** 

 * Returns the query for selecting the records,  subclasses can override this for custom behaviour.

 */

protected String getSelectQuery(){

  StringBuilder query=new StringBuilder();

  if (dbConf.getInputQuery() == null) {

    query.append("SELECT ");

    for (int i=0; i < fieldNames.length; i++) {

      query.append(fieldNames[i]);

      if (i != fieldNames.length - 1) {

        query.append(", ");

      }

    }

    query.append(" FROM ").append(tableName);

    query.append(" AS ").append(tableName);

    if (conditions != null && conditions.length() > 0) {

      query.append(" WHERE (").append(conditions).append(")");

    }

    String orderBy=dbConf.getInputOrderBy();

    if (orderBy != null && orderBy.length() > 0) {

      query.append(" ORDER BY ").append(orderBy);

    }

  }

 else {

    query.append(dbConf.getInputQuery());

  }

  try {

    query.append(" LIMIT ").append(split.getLength());

    query.append(" OFFSET ").append(split.getStart());

  }

 catch (  IOException ex) {

  }

  return query.toString();

}

Location: DBRecordReader.java

Content: 

protected DBInputFormat.DBInputSplit getSplit(){

  return split;

}

Location: DBRecordReader.java

Content: 

protected PreparedStatement getStatement(){

  return statement;

}

Location: DBRecordReader.java

Content: 

protected String getTableName(){

  return tableName;

}

Location: DBRecordReader.java

Content: 

/** 

 * @deprecated Use {@link #nextKeyValue()}

 */

@Deprecated public boolean next(LongWritable key,T value) throws IOException {

  this.key=key;

  this.value=value;

  return nextKeyValue();

}

Location: DBRecordReader.java

Content: 

protected void setStatement(PreparedStatement stmt){

  this.statement=stmt;

}

