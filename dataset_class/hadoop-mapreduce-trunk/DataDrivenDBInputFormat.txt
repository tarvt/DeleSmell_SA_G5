Location: DataDrivenDBInputFormat.java

Content: 

/** 

 * @return a query which returns the minimum and maximum values forthe order-by column. The min value should be in the first column, and the max value should be in the second column of the results.

 */

protected String getBoundingValsQuery(){

  String userQuery=getDBConf().getInputBoundingQuery();

  if (null != userQuery) {

    return userQuery;

  }

  StringBuilder query=new StringBuilder();

  String splitCol=getDBConf().getInputOrderBy();

  query.append("SELECT MIN(").append(splitCol).append("), ");

  query.append("MAX(").append(splitCol).append(") FROM ");

  query.append(getDBConf().getInputTableName());

  String conditions=getDBConf().getInputConditions();

  if (null != conditions) {

    query.append(" WHERE ( " + conditions + " )");

  }

  return query.toString();

}

Location: DataDrivenDBInputFormat.java

Content: 

/** 

 * @return the DBSplitter implementation to use to divide the table/query into InputSplits.

 */

protected DBSplitter getSplitter(int sqlDataType){

switch (sqlDataType) {

case Types.NUMERIC:

case Types.DECIMAL:

    return new BigDecimalSplitter();

case Types.BIT:

case Types.BOOLEAN:

  return new BooleanSplitter();

case Types.INTEGER:

case Types.TINYINT:

case Types.SMALLINT:

case Types.BIGINT:

return new IntegerSplitter();

case Types.REAL:

case Types.FLOAT:

case Types.DOUBLE:

return new FloatSplitter();

case Types.CHAR:

case Types.VARCHAR:

case Types.LONGVARCHAR:

return new TextSplitter();

case Types.DATE:

case Types.TIME:

case Types.TIMESTAMP:

return new DateSplitter();

default :

return null;

}

}

Location: DataDrivenDBInputFormat.java

Content: 

/** 

 * Set the user-defined bounding query to use with a user-defined query. This *must* include the substring "$CONDITIONS" (DataDrivenDBInputFormat.SUBSTITUTE_TOKEN) inside the WHERE clause, so that DataDrivenDBInputFormat knows where to insert split clauses. e.g., "SELECT foo FROM mytable WHERE $CONDITIONS" This will be expanded to something like: SELECT foo FROM mytable WHERE (id &gt; 100) AND (id &lt; 250) inside each split.

 */

public static void setBoundingQuery(Configuration conf,String query){

  if (null != query) {

    if (query.indexOf(SUBSTITUTE_TOKEN) == -1) {

      LOG.warn("Could not find " + SUBSTITUTE_TOKEN + " token in query: "+ query+ "; splits may not partition data.");

    }

  }

  conf.set(DBConfiguration.INPUT_BOUNDING_QUERY,query);

}

