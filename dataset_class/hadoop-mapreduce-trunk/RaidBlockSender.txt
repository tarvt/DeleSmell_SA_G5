Location: RaidBlockSender.java

Content: 

/** 

 * Converts an IOExcpetion (not subclasses) to SocketException. This is typically done to indicate to upper layers that the error  was a socket error rather than often more serious exceptions like  disk errors.

 */

private static IOException ioeToSocketException(IOException ioe){

  if (ioe.getClass().equals(IOException.class)) {

    IOException se=new SocketException("Original Exception : " + ioe);

    se.initCause(ioe);

    se.setStackTrace(ioe.getStackTrace());

    return se;

  }

  return ioe;

}

Location: RaidBlockSender.java

Content: 

boolean isBlockReadFully(){

  return blockReadFully;

}

Location: RaidBlockSender.java

Content: 

public RaidBlockSender(ExtendedBlock block,long blockLength,long startOffset,long length,boolean corruptChecksumOk,boolean chunkOffsetOK,boolean verifyChecksum,boolean transferToAllowed,DataInputStream metadataIn,InputStreamFactory streamFactory) throws IOException {

  this(block,blockLength,startOffset,length,corruptChecksumOk,chunkOffsetOK,verifyChecksum,transferToAllowed,metadataIn,streamFactory,null);

}

Location: RaidBlockSender.java

Content: 

public RaidBlockSender(ExtendedBlock block,long blockLength,long startOffset,long length,boolean corruptChecksumOk,boolean chunkOffsetOK,boolean verifyChecksum,boolean transferToAllowed,DataInputStream metadataIn,InputStreamFactory streamFactory,String clientTraceFmt) throws IOException {

  try {

    this.block=block;

    this.chunkOffsetOK=chunkOffsetOK;

    this.corruptChecksumOk=corruptChecksumOk;

    this.verifyChecksum=verifyChecksum;

    this.replicaVisibleLength=blockLength;

    this.transferToAllowed=transferToAllowed;

    this.clientTraceFmt=clientTraceFmt;

    if (!corruptChecksumOk || metadataIn != null) {

      this.checksumIn=metadataIn;

      BlockMetadataHeader header=BlockMetadataHeader.readHeader(checksumIn);

      short version=header.getVersion();

      if (version != FSDataset.METADATA_VERSION) {

        LOG.warn("Wrong version (" + version + ") for metadata file for "+ block+ " ignoring ...");

      }

      checksum=header.getChecksum();

    }

 else {

      LOG.warn("Could not find metadata file for " + block);

      checksum=DataChecksum.newDataChecksum(DataChecksum.CHECKSUM_NULL,16 * 1024);

    }

    bytesPerChecksum=checksum.getBytesPerChecksum();

    if (bytesPerChecksum > 10 * 1024 * 1024 && bytesPerChecksum > replicaVisibleLength) {

      checksum=DataChecksum.newDataChecksum(checksum.getChecksumType(),Math.max((int)replicaVisibleLength,10 * 1024 * 1024));

      bytesPerChecksum=checksum.getBytesPerChecksum();

    }

    checksumSize=checksum.getChecksumSize();

    if (length < 0) {

      length=replicaVisibleLength;

    }

    endOffset=blockLength;

    if (startOffset < 0 || startOffset > endOffset || (length + startOffset) > endOffset) {

      String msg=" Offset " + startOffset + " and length "+ length+ " don't match block "+ block+ " ( blockLen "+ endOffset+ " )";

      LOG.warn("sendBlock() : " + msg);

      throw new IOException(msg);

    }

    offset=(startOffset - (startOffset % bytesPerChecksum));

    if (length >= 0) {

      long tmpLen=startOffset + length;

      if (tmpLen % bytesPerChecksum != 0) {

        tmpLen+=(bytesPerChecksum - tmpLen % bytesPerChecksum);

      }

      if (tmpLen < endOffset) {

        endOffset=tmpLen;

      }

    }

    if (offset > 0) {

      long checksumSkip=(offset / bytesPerChecksum) * checksumSize;

      if (checksumSkip > 0) {

        IOUtils.skipFully(checksumIn,checksumSkip);

      }

    }

    seqno=0;

    blockIn=streamFactory.createStream(offset);

  }

 catch (  IOException ioe) {

    IOUtils.closeStream(this);

    IOUtils.closeStream(blockIn);

    throw ioe;

  }

}

Location: RaidBlockSender.java

Content: 

/** 

 * sendBlock() is used to read block and its metadata and stream the data to either a client or to another datanode. 

 * @param out  stream to which the block is written to

 * @param baseStream optional. if non-null, <code>out</code> is assumed to be a wrapper over this stream. This enables optimizations for sending the data, e.g.  {@link SocketOutputStream#transferToFully(FileChannel,long,int)}.

 * @return total bytes reads, including crc.

 */

public long sendBlock(DataOutputStream out,OutputStream baseStream) throws IOException {

  if (out == null) {

    throw new IOException("out stream is null");

  }

  long initialOffset=offset;

  long totalRead=0;

  OutputStream streamForSendChunks=out;

  final long startTime=ClientTraceLog.isInfoEnabled() ? System.nanoTime() : 0;

  try {

    try {

      checksum.writeHeader(out);

      if (chunkOffsetOK) {

        out.writeLong(offset);

      }

      out.flush();

    }

 catch (    IOException e) {

      throw ioeToSocketException(e);

    }

    int maxChunksPerPacket;

    int pktSize=PacketHeader.PKT_HEADER_LEN;

    if (transferToAllowed && !verifyChecksum && baseStream instanceof SocketOutputStream&& blockIn instanceof FileInputStream) {

      FileChannel fileChannel=((FileInputStream)blockIn).getChannel();

      blockInPosition=fileChannel.position();

      streamForSendChunks=baseStream;

      maxChunksPerPacket=(Math.max(BUFFER_SIZE,MIN_BUFFER_WITH_TRANSFERTO) + bytesPerChecksum - 1) / bytesPerChecksum;

      pktSize+=checksumSize * maxChunksPerPacket;

    }

 else {

      maxChunksPerPacket=Math.max(1,(BUFFER_SIZE + bytesPerChecksum - 1) / bytesPerChecksum);

      pktSize+=(bytesPerChecksum + checksumSize) * maxChunksPerPacket;

    }

    ByteBuffer pktBuf=ByteBuffer.allocate(pktSize);

    while (endOffset > offset) {

      long len=sendChunks(pktBuf,maxChunksPerPacket,streamForSendChunks);

      offset+=len;

      totalRead+=len + ((len + bytesPerChecksum - 1) / bytesPerChecksum * checksumSize);

      seqno++;

    }

    try {

      sendChunks(pktBuf,maxChunksPerPacket,streamForSendChunks);

      out.flush();

    }

 catch (    IOException e) {

      throw ioeToSocketException(e);

    }

  }

  finally {

    if (clientTraceFmt != null) {

      final long endTime=System.nanoTime();

      ClientTraceLog.info(String.format(clientTraceFmt,totalRead,initialOffset,endTime - startTime));

    }

    close();

  }

  blockReadFully=initialOffset == 0 && offset >= replicaVisibleLength;

  return totalRead;

}

Location: RaidBlockSender.java

Content: 

/** 

 * Sends upto maxChunks chunks of data. When blockInPosition is >= 0, assumes 'out' is a  {@link SocketOutputStream} and tries {@link SocketOutputStream#transferToFully(FileChannel,long,int)} tosend data (and updates blockInPosition).

 */

private int sendChunks(ByteBuffer pkt,int maxChunks,OutputStream out) throws IOException {

  int len=(int)Math.min(endOffset - offset,(((long)bytesPerChecksum) * ((long)maxChunks)));

  int numChunks=(len + bytesPerChecksum - 1) / bytesPerChecksum;

  int packetLen=len + numChunks * checksumSize + 4;

  boolean lastDataPacket=offset + len == endOffset && len > 0;

  pkt.clear();

  PacketHeader header=new PacketHeader(packetLen,offset,seqno,(len == 0),len);

  header.putInBuffer(pkt);

  int checksumOff=pkt.position();

  int checksumLen=numChunks * checksumSize;

  byte[] buf=pkt.array();

  if (checksumSize > 0 && checksumIn != null) {

    try {

      checksumIn.readFully(buf,checksumOff,checksumLen);

    }

 catch (    IOException e) {

      LOG.warn(" Could not read or failed to veirfy checksum for data" + " at offset " + offset + " for block "+ block+ " got : "+ StringUtils.stringifyException(e));

      IOUtils.closeStream(checksumIn);

      checksumIn=null;

      if (corruptChecksumOk) {

        if (checksumOff < checksumLen) {

          Arrays.fill(buf,checksumOff,checksumLen,(byte)0);

        }

      }

 else {

        throw e;

      }

    }

    if (lastDataPacket && lastChunkChecksum != null) {

      int start=checksumOff + checksumLen - checksumSize;

      byte[] updatedChecksum=lastChunkChecksum.getChecksum();

      if (updatedChecksum != null) {

        System.arraycopy(updatedChecksum,0,buf,start,checksumSize);

      }

    }

  }

  int dataOff=checksumOff + checksumLen;

  if (blockInPosition < 0) {

    IOUtils.readFully(blockIn,buf,dataOff,len);

    if (verifyChecksum) {

      int dOff=dataOff;

      int cOff=checksumOff;

      int dLeft=len;

      for (int i=0; i < numChunks; i++) {

        checksum.reset();

        int dLen=Math.min(dLeft,bytesPerChecksum);

        checksum.update(buf,dOff,dLen);

        if (!checksum.compare(buf,cOff)) {

          long failedPos=offset + len - dLeft;

          throw new ChecksumException("Checksum failed at " + failedPos,failedPos);

        }

        dLeft-=dLen;

        dOff+=dLen;

        cOff+=checksumSize;

      }

    }

  }

  try {

    if (blockInPosition >= 0) {

      SocketOutputStream sockOut=(SocketOutputStream)out;

      sockOut.write(buf,0,dataOff);

      sockOut.transferToFully(((FileInputStream)blockIn).getChannel(),blockInPosition,len);

      blockInPosition+=len;

    }

 else {

      out.write(buf,0,dataOff + len);

    }

  }

 catch (  IOException e) {

    throw ioeToSocketException(e);

  }

  return len;

}

