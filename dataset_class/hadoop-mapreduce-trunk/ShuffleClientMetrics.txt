Location: ShuffleClientMetrics.java

Content: 

public void doUpdates(MetricsContext unused){

synchronized (this) {

    shuffleMetrics.incrMetric("shuffle_input_bytes",numBytes);

    shuffleMetrics.incrMetric("shuffle_failed_fetches",numFailedFetches);

    shuffleMetrics.incrMetric("shuffle_success_fetches",numSuccessFetches);

    if (numCopiers != 0) {

      shuffleMetrics.setMetric("shuffle_fetchers_busy_percent",100 * ((float)numThreadsBusy / numCopiers));

    }

 else {

      shuffleMetrics.setMetric("shuffle_fetchers_busy_percent",0);

    }

    numBytes=0;

    numSuccessFetches=0;

    numFailedFetches=0;

  }

  shuffleMetrics.update();

}

Location: ShuffleClientMetrics.java

Content: 

public synchronized void failedFetch(){

  ++numFailedFetches;

}

Location: ShuffleClientMetrics.java

Content: 

public synchronized void inputBytes(long numBytes){

  this.numBytes+=numBytes;

}

Location: ShuffleClientMetrics.java

Content: 

ShuffleClientMetrics(TaskAttemptID reduceId,JobConf jobConf){

  this.numCopiers=jobConf.getInt(MRJobConfig.SHUFFLE_PARALLEL_COPIES,5);

  MetricsContext metricsContext=MetricsUtil.getContext("mapred");

  this.shuffleMetrics=MetricsUtil.createRecord(metricsContext,"shuffleInput");

  this.shuffleMetrics.setTag("user",jobConf.getUser());

  this.shuffleMetrics.setTag("jobName",jobConf.getJobName());

  this.shuffleMetrics.setTag("jobId",reduceId.getJobID().toString());

  this.shuffleMetrics.setTag("taskId",reduceId.toString());

  this.shuffleMetrics.setTag("sessionId",jobConf.getSessionId());

  metricsContext.registerUpdater(this);

}

Location: ShuffleClientMetrics.java

Content: 

public synchronized void successFetch(){

  ++numSuccessFetches;

}

Location: ShuffleClientMetrics.java

Content: 

public synchronized void threadBusy(){

  ++numThreadsBusy;

}

Location: ShuffleClientMetrics.java

Content: 

public synchronized void threadFree(){

  --numThreadsBusy;

}

