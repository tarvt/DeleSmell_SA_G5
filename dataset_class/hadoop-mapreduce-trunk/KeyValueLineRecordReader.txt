Location: KeyValueLineRecordReader.java

Content: 

public static int findSeparator(byte[] utf,int start,int length,byte sep){

  for (int i=start; i < (start + length); i++) {

    if (utf[i] == sep) {

      return i;

    }

  }

  return -1;

}

Location: KeyValueLineRecordReader.java

Content: 

public Class getKeyClass(){

  return Text.class;

}

Location: KeyValueLineRecordReader.java

Content: 

public KeyValueLineRecordReader(Configuration conf) throws IOException {

  lineRecordReader=new LineRecordReader();

  String sepStr=conf.get(KEY_VALUE_SEPERATOR,"\t");

  this.separator=(byte)sepStr.charAt(0);

}

Location: KeyValueLineRecordReader.java

Content: 

public KeyValueLineRecordReader(Configuration job,FileSplit split) throws IOException {

  lineRecordReader=new LineRecordReader(job,split);

  dummyKey=lineRecordReader.createKey();

  innerValue=lineRecordReader.createValue();

  String sepStr=job.get("mapreduce.input.keyvaluelinerecordreader.key.value.separator","\t");

  this.separator=(byte)sepStr.charAt(0);

}

Location: KeyValueLineRecordReader.java

Content: 

/** 

 * Read key/value pair in a line. 

 */

public synchronized boolean next(Text key,Text value) throws IOException {

  byte[] line=null;

  int lineLen=-1;

  if (lineRecordReader.next(dummyKey,innerValue)) {

    line=innerValue.getBytes();

    lineLen=innerValue.getLength();

  }

 else {

    return false;

  }

  if (line == null)   return false;

  int pos=findSeparator(line,0,lineLen,this.separator);

  org.apache.hadoop.mapreduce.lib.input.KeyValueLineRecordReader.setKeyValue(key,value,line,lineLen,pos);

  return true;

}

Location: KeyValueLineRecordReader.java

Content: 

public static void setKeyValue(Text key,Text value,byte[] line,int lineLen,int pos){

  if (pos == -1) {

    key.set(line,0,lineLen);

    value.set("");

  }

 else {

    key.set(line,0,pos);

    value.set(line,pos + 1,lineLen - pos - 1);

  }

}

