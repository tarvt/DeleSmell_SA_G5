Location: TaskID.java

Content: 

/** 

 * Add the unique string to the given builder.

 * @param builder the builder to append to

 * @return the builder that was passed in

 */

protected StringBuilder appendTo(StringBuilder builder){

  return jobId.appendTo(builder).append(SEPARATOR).append(CharTaskTypeMaps.getRepresentingCharacter(type)).append(SEPARATOR).append(idFormat.format(id));

}

Location: TaskID.java

Content: 

/** 

 * Compare TaskInProgressIds by first jobIds, then by tip numbers. Reduces are  defined as greater then maps.

 */

@Override public int compareTo(ID o){

  TaskID that=(TaskID)o;

  int jobComp=this.jobId.compareTo(that.jobId);

  if (jobComp == 0) {

    if (this.type == that.type) {

      return this.id - that.id;

    }

 else {

      return this.type.compareTo(that.type);

    }

  }

 else   return jobComp;

}

Location: TaskID.java

Content: 

/** 

 * Construct a TaskID object from given string 

 * @return constructed TaskID object or null if the given String is null

 * @throws IllegalArgumentException if the given string is malformed

 */

public static TaskID forName(String str) throws IllegalArgumentException {

  if (str == null)   return null;

  try {

    String[] parts=str.split("_");

    if (parts.length == 5) {

      if (parts[0].equals(TASK)) {

        String type=parts[3];

        TaskType t=CharTaskTypeMaps.getTaskType(type.charAt(0));

        if (t != null) {

          return new org.apache.hadoop.mapred.TaskID(parts[1],Integer.parseInt(parts[2]),t,Integer.parseInt(parts[4]));

        }

 else         throw new Exception();

      }

    }

  }

 catch (  Exception ex) {

  }

  throw new IllegalArgumentException("TaskId string : " + str + " is not properly formed");

}

Location: TaskID.java

Content: 

public static String getAllTaskTypes(){

  return CharTaskTypeMaps.allTaskTypes;

}

Location: TaskID.java

Content: 

/** 

 * Gets the character representing the  {@link TaskType}

 * @param type the TaskType

 * @return the character

 */

public static char getRepresentingCharacter(TaskType type){

  return CharTaskTypeMaps.getRepresentingCharacter(type);

}

Location: TaskID.java

Content: 

@Deprecated static StringBuilder getTaskIDsPatternWOPrefix(String jtIdentifier,Integer jobId,TaskType type,Integer taskId){

  StringBuilder builder=new StringBuilder();

  builder.append(JobID.getJobIDsPatternWOPrefix(jtIdentifier,jobId)).append(SEPARATOR).append(type != null ? (org.apache.hadoop.mapreduce.TaskID.getRepresentingCharacter(type)) : org.apache.hadoop.mapreduce.TaskID.getAllTaskTypes()).append(SEPARATOR).append(taskId != null ? idFormat.format(taskId) : "[0-9]*");

  return builder;

}

Location: TaskID.java

Content: 

/** 

 * Returns a regex pattern which matches task IDs. Arguments can  be given null, in which case that part of the regex will be generic.   For example to obtain a regex matching <i>the first map task</i>  of <i>any jobtracker</i>, of <i>any job</i>, we would use : <pre>  TaskID.getTaskIDsPattern(null, null, true, 1); </pre> which will return : <pre> "task_[^_]*_[0-9]*_m_000001*" </pre> 

 * @param jtIdentifier jobTracker identifier, or null

 * @param jobId job number, or null

 * @param isMap whether the tip is a map, or null 

 * @param taskId taskId number, or null

 * @return a regex pattern matching TaskIDs

 * @deprecated Use {@link TaskID#getTaskIDsPattern(String,Integer,TaskType,Integer)}

 */

@Deprecated public static String getTaskIDsPattern(String jtIdentifier,Integer jobId,Boolean isMap,Integer taskId){

  return getTaskIDsPattern(jtIdentifier,jobId,isMap ? TaskType.MAP : TaskType.REDUCE,taskId);

}

Location: TaskID.java

Content: 

/** 

 * Returns a regex pattern which matches task IDs. Arguments can  be given null, in which case that part of the regex will be generic.   For example to obtain a regex matching <i>the first map task</i>  of <i>any jobtracker</i>, of <i>any job</i>, we would use : <pre>  TaskID.getTaskIDsPattern(null, null, true, 1); </pre> which will return : <pre> "task_[^_]*_[0-9]*_m_000001*" </pre> 

 * @param jtIdentifier jobTracker identifier, or null

 * @param jobId job number, or null

 * @param type the {@link TaskType}, or null 

 * @param taskId taskId number, or null

 * @return a regex pattern matching TaskIDs

 */

@Deprecated public static String getTaskIDsPattern(String jtIdentifier,Integer jobId,TaskType type,Integer taskId){

  StringBuilder builder=new StringBuilder(TASK).append(SEPARATOR).append(getTaskIDsPatternWOPrefix(jtIdentifier,jobId,type,taskId));

  return builder.toString();

}

Location: TaskID.java

Content: 

/** 

 * Gets the  {@link TaskType} corresponding to the character

 * @param c the character

 * @return the TaskType

 */

public static TaskType getTaskType(char c){

  return CharTaskTypeMaps.getTaskType(c);

}

Location: TaskID.java

Content: 

public TaskID(){

  jobId=new JobID();

}

Location: TaskID.java

Content: 

/** 

 * Constructs a TaskID object from given  {@link JobID}.  

 * @param jobId JobID that this tip belongs to 

 * @param type the {@link TaskType} of the task 

 * @param id the tip number

 */

public TaskID(JobID jobId,TaskType type,int id){

  super(id);

  if (jobId == null) {

    throw new IllegalArgumentException("jobId cannot be null");

  }

  this.jobId=jobId;

  this.type=type;

}

Location: TaskID.java

Content: 

/** 

 * Constructs a TaskID object from given  {@link JobID}.  

 * @param jobId JobID that this tip belongs to 

 * @param isMap whether the tip is a map 

 * @param id the tip number

 * @deprecated Use {@link #TaskID(String,int,TaskType,int)}

 */

@Deprecated public TaskID(org.apache.hadoop.mapreduce.JobID jobId,boolean isMap,int id){

  this(jobId,isMap ? TaskType.MAP : TaskType.REDUCE,id);

}

Location: TaskID.java

Content: 

/** 

 * Constructs a TaskID object from given  {@link JobID}.  

 * @param jobId JobID that this tip belongs to 

 * @param type the {@link TaskType} 

 * @param id the tip number

 */

public TaskID(org.apache.hadoop.mapreduce.JobID jobId,TaskType type,int id){

  super(jobId,type,id);

}

Location: TaskID.java

Content: 

/** 

 * Constructs a TaskInProgressId object from given parts.

 * @param jtIdentifier jobTracker identifier

 * @param jobId job number 

 * @param isMap whether the tip is a map 

 * @param id the tip number

 * @deprecated Use {@link #TaskID(org.apache.hadoop.mapreduce.JobID,TaskType,int)}

 */

@Deprecated public TaskID(String jtIdentifier,int jobId,boolean isMap,int id){

  this(jtIdentifier,jobId,isMap ? TaskType.MAP : TaskType.REDUCE,id);

}

Location: TaskID.java

Content: 

/** 

 * Constructs a TaskInProgressId object from given parts.

 * @param jtIdentifier jobTracker identifier

 * @param jobId job number 

 * @param type the TaskType 

 * @param id the tip number

 */

public TaskID(String jtIdentifier,int jobId,TaskType type,int id){

  this(new JobID(jtIdentifier,jobId),type,id);

}

