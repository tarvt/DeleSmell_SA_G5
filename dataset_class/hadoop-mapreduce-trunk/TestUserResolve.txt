Location: TestUserResolve.java

Content: 

@BeforeClass public static void createRootDir() throws IOException {

  conf=new Configuration();

  fs=FileSystem.getLocal(conf);

  rootDir=new Path(new Path(System.getProperty("test.build.data","/tmp")).makeQualified(fs),"gridmixUserResolve");

}

Location: TestUserResolve.java

Content: 

/** 

 * Validate the behavior of  {@link RoundRobinUserResolver} for differentuser resource files like <li> Empty user resource file <li> Non existent user resource file <li> User resource file with valid content

 * @throws Exception

 */

@Test public void testRoundRobinResolver() throws Exception {

  final UserResolver rslv=new RoundRobinUserResolver();

  Path usersFilePath=new Path(rootDir,"users");

  URI userRsrc=new URI(usersFilePath.toString());

  fs.delete(usersFilePath,false);

  String expectedErrorMsg="File " + userRsrc + " does not exist.";

  validateBadUsersFile(rslv,userRsrc,expectedErrorMsg);

  writeUserList(usersFilePath,"");

  expectedErrorMsg=RoundRobinUserResolver.buildEmptyUsersErrorMsg(userRsrc);

  validateBadUsersFile(rslv,userRsrc,expectedErrorMsg);

  writeUserList(usersFilePath,"user0,groupA,groupB,groupC\nuser1,groupA,groupC\n");

  validateValidUsersFile(rslv,userRsrc);

  writeUserList(usersFilePath,"user0,groupA,groupB\nuser1,");

  validateValidUsersFile(rslv,userRsrc);

  writeUserList(usersFilePath,"user0\nuser1");

  validateValidUsersFile(rslv,userRsrc);

}

Location: TestUserResolve.java

Content: 

@Test public void testSubmitterResolver() throws Exception {

  final UserResolver rslv=new SubmitterUserResolver();

  assertFalse(rslv.needsTargetUsersList());

  UserGroupInformation ugi=UserGroupInformation.getCurrentUser();

  assertEquals(ugi,rslv.getTargetUgi((UserGroupInformation)null));

}

Location: TestUserResolve.java

Content: 

/** 

 * Validate RoundRobinUserResolver's behavior for bad user resource file. RoundRobinUserResolver.setTargetUsers() should throw proper Exception for the cases like <li> non existent user resource file and <li> empty user resource file

 * @param rslv              The RoundRobinUserResolver object

 * @param userRsrc          users file

 * @param expectedErrorMsg  expected error message

 */

private void validateBadUsersFile(UserResolver rslv,URI userRsrc,String expectedErrorMsg){

  boolean fail=false;

  try {

    rslv.setTargetUsers(userRsrc,conf);

  }

 catch (  IOException e) {

    assertTrue("Exception message from RoundRobinUserResolver is wrong",e.getMessage().equals(expectedErrorMsg));

    fail=true;

  }

  assertTrue("User list required for RoundRobinUserResolver",fail);

}

Location: TestUserResolve.java

Content: 

private void validateValidUsersFile(UserResolver rslv,URI userRsrc) throws IOException {

  assertTrue(rslv.setTargetUsers(userRsrc,conf));

  UserGroupInformation ugi1=UserGroupInformation.createRemoteUser("hfre0");

  assertEquals("user0",rslv.getTargetUgi(ugi1).getUserName());

  assertEquals("user1",rslv.getTargetUgi(UserGroupInformation.createRemoteUser("hfre1")).getUserName());

  assertEquals("user0",rslv.getTargetUgi(UserGroupInformation.createRemoteUser("hfre2")).getUserName());

  assertEquals("user0",rslv.getTargetUgi(ugi1).getUserName());

  assertEquals("user1",rslv.getTargetUgi(UserGroupInformation.createRemoteUser("hfre3")).getUserName());

  assertEquals("user0",rslv.getTargetUgi(UserGroupInformation.createRemoteUser("hfre0")).getUserName());

  assertEquals("user0",rslv.getTargetUgi(UserGroupInformation.createRemoteUser("hfre5")).getUserName());

  assertEquals("user0",rslv.getTargetUgi(UserGroupInformation.createRemoteUser("hfre0")).getUserName());

}

Location: TestUserResolve.java

Content: 

/** 

 * Creates users file with the content as the String usersFileContent.

 * @param usersFilePath    the path to the file that is to be created

 * @param usersFileContent Content of users file

 * @throws IOException

 */

private static void writeUserList(Path usersFilePath,String usersFileContent) throws IOException {

  FSDataOutputStream out=null;

  try {

    out=fs.create(usersFilePath,true);

    out.writeBytes(usersFileContent);

  }

  finally {

    if (out != null) {

      out.close();

    }

  }

}

