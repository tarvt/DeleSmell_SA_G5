Location: TypedBytesInput.java

Content: 

/** 

 * Reads the boolean following a <code>Type.BOOL</code> code.

 * @return the obtained boolean

 * @throws IOException

 */

public boolean readBool() throws IOException {

  return in.readBoolean();

}

Location: TypedBytesInput.java

Content: 

/** 

 * Reads the list following a <code>Type.LIST</code> code.

 * @return the obtained list

 * @throws IOException

 */

@SuppressWarnings("unchecked") public List readList() throws IOException {

  List list=new ArrayList();

  Object obj=read();

  while (obj != null) {

    list.add(obj);

    obj=read();

  }

  return list;

}

Location: TypedBytesInput.java

Content: 

/** 

 * Reads the header following a <code>Type.MAP</code> code.

 * @return the number of key-value pairs in the map

 * @throws IOException

 */

public int readMapHeader() throws IOException {

  return in.readInt();

}

Location: TypedBytesInput.java

Content: 

/** 

 * Reads a typed bytes sequence. The first byte is interpreted as a type code, and then the right number of subsequent bytes are read depending on the obtained type.

 * @return the obtained typed bytes sequence or null when the end of the fileis reached

 * @throws IOException

 */

public byte[] readRaw() throws IOException {

  int code=-1;

  try {

    code=in.readUnsignedByte();

  }

 catch (  EOFException eof) {

    return null;

  }

  if (code == Type.BYTES.code) {

    return readRawBytes();

  }

 else   if (code == Type.BYTE.code) {

    return readRawByte();

  }

 else   if (code == Type.BOOL.code) {

    return readRawBool();

  }

 else   if (code == Type.INT.code) {

    return readRawInt();

  }

 else   if (code == Type.LONG.code) {

    return readRawLong();

  }

 else   if (code == Type.FLOAT.code) {

    return readRawFloat();

  }

 else   if (code == Type.DOUBLE.code) {

    return readRawDouble();

  }

 else   if (code == Type.STRING.code) {

    return readRawString();

  }

 else   if (code == Type.VECTOR.code) {

    return readRawVector();

  }

 else   if (code == Type.LIST.code) {

    return readRawList();

  }

 else   if (code == Type.MAP.code) {

    return readRawMap();

  }

 else   if (code == Type.MARKER.code) {

    return null;

  }

 else   if (50 <= code && code <= 200) {

    return readRawBytes(code);

  }

 else {

    throw new RuntimeException("unknown type");

  }

}

Location: TypedBytesInput.java

Content: 

/** 

 * Reads the raw bytes following a <code>Type.BOOL</code> code.

 * @return the obtained bytes sequence

 * @throws IOException

 */

public byte[] readRawBool() throws IOException {

  byte[] bytes=new byte[2];

  bytes[0]=(byte)Type.BOOL.code;

  in.readFully(bytes,1,1);

  return bytes;

}

Location: TypedBytesInput.java

Content: 

/** 

 * Reads the raw byte following a <code>Type.BYTE</code> code.

 * @return the obtained byte

 * @throws IOException

 */

public byte[] readRawByte() throws IOException {

  byte[] bytes=new byte[2];

  bytes[0]=(byte)Type.BYTE.code;

  in.readFully(bytes,1,1);

  return bytes;

}

Location: TypedBytesInput.java

Content: 

/** 

 * Reads the raw bytes following a <code>Type.BYTES</code> code.

 * @return the obtained bytes sequence

 * @throws IOException

 */

public byte[] readRawBytes() throws IOException {

  return readRawBytes(Type.BYTES.code);

}

Location: TypedBytesInput.java

Content: 

/** 

 * Reads the raw bytes following a custom code.

 * @param code the custom type code

 * @return the obtained bytes sequence

 * @throws IOException

 */

public byte[] readRawBytes(int code) throws IOException {

  int length=in.readInt();

  byte[] bytes=new byte[5 + length];

  bytes[0]=(byte)code;

  bytes[1]=(byte)(0xff & (length >> 24));

  bytes[2]=(byte)(0xff & (length >> 16));

  bytes[3]=(byte)(0xff & (length >> 8));

  bytes[4]=(byte)(0xff & length);

  in.readFully(bytes,5,length);

  return bytes;

}

Location: TypedBytesInput.java

Content: 

/** 

 * Reads the raw bytes following a <code>Type.DOUBLE</code> code.

 * @return the obtained bytes sequence

 * @throws IOException

 */

public byte[] readRawDouble() throws IOException {

  byte[] bytes=new byte[9];

  bytes[0]=(byte)Type.DOUBLE.code;

  in.readFully(bytes,1,8);

  return bytes;

}

Location: TypedBytesInput.java

Content: 

/** 

 * Reads the raw bytes following a <code>Type.FLOAT</code> code.

 * @return the obtained bytes sequence

 * @throws IOException

 */

public byte[] readRawFloat() throws IOException {

  byte[] bytes=new byte[5];

  bytes[0]=(byte)Type.FLOAT.code;

  in.readFully(bytes,1,4);

  return bytes;

}

Location: TypedBytesInput.java

Content: 

/** 

 * Reads the raw bytes following a <code>Type.INT</code> code.

 * @return the obtained bytes sequence

 * @throws IOException

 */

public byte[] readRawInt() throws IOException {

  byte[] bytes=new byte[5];

  bytes[0]=(byte)Type.INT.code;

  in.readFully(bytes,1,4);

  return bytes;

}

Location: TypedBytesInput.java

Content: 

/** 

 * Reads the raw bytes following a <code>Type.LIST</code> code.

 * @return the obtained bytes sequence

 * @throws IOException

 */

public byte[] readRawList() throws IOException {

  Buffer buffer=new Buffer(new byte[]{(byte)Type.LIST.code});

  byte[] bytes=readRaw();

  while (bytes != null) {

    buffer.append(bytes);

    bytes=readRaw();

  }

  buffer.append(new byte[]{(byte)Type.MARKER.code});

  return buffer.get();

}

Location: TypedBytesInput.java

Content: 

/** 

 * Reads the raw bytes following a <code>Type.LONG</code> code.

 * @return the obtained bytes sequence

 * @throws IOException

 */

public byte[] readRawLong() throws IOException {

  byte[] bytes=new byte[9];

  bytes[0]=(byte)Type.LONG.code;

  in.readFully(bytes,1,8);

  return bytes;

}

Location: TypedBytesInput.java

Content: 

/** 

 * Reads the raw bytes following a <code>Type.MAP</code> code.

 * @return the obtained bytes sequence

 * @throws IOException

 */

public byte[] readRawMap() throws IOException {

  Buffer buffer=new Buffer();

  int length=readMapHeader();

  buffer.append(new byte[]{(byte)Type.MAP.code,(byte)(0xff & (length >> 24)),(byte)(0xff & (length >> 16)),(byte)(0xff & (length >> 8)),(byte)(0xff & length)});

  for (int i=0; i < length; i++) {

    buffer.append(readRaw());

    buffer.append(readRaw());

  }

  return buffer.get();

}

Location: TypedBytesInput.java

Content: 

/** 

 * Reads the raw bytes following a <code>Type.STRING</code> code.

 * @return the obtained bytes sequence

 * @throws IOException

 */

public byte[] readRawString() throws IOException {

  int length=in.readInt();

  byte[] bytes=new byte[5 + length];

  bytes[0]=(byte)Type.STRING.code;

  bytes[1]=(byte)(0xff & (length >> 24));

  bytes[2]=(byte)(0xff & (length >> 16));

  bytes[3]=(byte)(0xff & (length >> 8));

  bytes[4]=(byte)(0xff & length);

  in.readFully(bytes,5,length);

  return bytes;

}

Location: TypedBytesInput.java

Content: 

/** 

 * Reads the raw bytes following a <code>Type.VECTOR</code> code.

 * @return the obtained bytes sequence

 * @throws IOException

 */

public byte[] readRawVector() throws IOException {

  Buffer buffer=new Buffer();

  int length=readVectorHeader();

  buffer.append(new byte[]{(byte)Type.VECTOR.code,(byte)(0xff & (length >> 24)),(byte)(0xff & (length >> 16)),(byte)(0xff & (length >> 8)),(byte)(0xff & length)});

  for (int i=0; i < length; i++) {

    buffer.append(readRaw());

  }

  return buffer.get();

}

Location: TypedBytesInput.java

Content: 

/** 

 * Reads the vector following a <code>Type.VECTOR</code> code.

 * @return the obtained vector

 * @throws IOException

 */

@SuppressWarnings("unchecked") public ArrayList readVector() throws IOException {

  int length=readVectorHeader();

  ArrayList result=new ArrayList(length);

  for (int i=0; i < length; i++) {

    result.add(read());

  }

  return result;

}

Location: TypedBytesInput.java

Content: 

/** 

 * Reads the header following a <code>Type.VECTOR</code> code.

 * @return the number of elements in the vector

 * @throws IOException

 */

public int readVectorHeader() throws IOException {

  return in.readInt();

}

Location: TypedBytesInput.java

Content: 

private void setDataInput(DataInput in){

  this.in=in;

}

Location: TypedBytesInput.java

Content: 

/** 

 * Skips a type byte.

 * @return true iff the end of the file was not reached

 * @throws IOException

 */

public boolean skipType() throws IOException {

  try {

    in.readByte();

    return true;

  }

 catch (  EOFException eof) {

    return false;

  }

}

Location: TypedBytesInput.java

Content: 

private TypedBytesInput(){

}

Location: TypedBytesInput.java

Content: 

/** 

 * Creates a new instance of TypedBytesInput. 

 */

public TypedBytesInput(DataInput in){

  this.in=in;

}

