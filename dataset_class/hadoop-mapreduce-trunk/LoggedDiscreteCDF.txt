Location: LoggedDiscreteCDF.java

Content: 

public long getMaximum(){

  return maximum;

}

Location: LoggedDiscreteCDF.java

Content: 

public long getMinimum(){

  return minimum;

}

Location: LoggedDiscreteCDF.java

Content: 

public long getNumberValues(){

  return numberValues;

}

Location: LoggedDiscreteCDF.java

Content: 

public List<LoggedSingleRelativeRanking> getRankings(){

  return rankings;

}

Location: LoggedDiscreteCDF.java

Content: 

void setCDF(Histogram data,int[] steps,int modulus){

  numberValues=data.getTotalCount();

  long[] CDF=data.getCDF(modulus,steps);

  if (CDF != null) {

    minimum=CDF[0];

    maximum=CDF[CDF.length - 1];

    rankings=new ArrayList<LoggedSingleRelativeRanking>();

    for (int i=1; i < CDF.length - 1; ++i) {

      LoggedSingleRelativeRanking srr=new LoggedSingleRelativeRanking();

      srr.setRelativeRanking(((double)steps[i - 1]) / modulus);

      srr.setDatum(CDF[i]);

      rankings.add(srr);

    }

  }

}

Location: LoggedDiscreteCDF.java

Content: 

void setMaximum(long maximum){

  this.maximum=maximum;

}

Location: LoggedDiscreteCDF.java

Content: 

void setMinimum(long minimum){

  this.minimum=minimum;

}

Location: LoggedDiscreteCDF.java

Content: 

void setNumberValues(long numberValues){

  this.numberValues=numberValues;

}

Location: LoggedDiscreteCDF.java

Content: 

void setRankings(List<LoggedSingleRelativeRanking> rankings){

  this.rankings=rankings;

}

