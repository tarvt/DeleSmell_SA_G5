Location: OutputCommitter.java

Content: 

/** 

 * This method implements the new interface by calling the old method. Note that the input types are different between the new and old apis and this is a bridge between the two.

 */

@Override public final void abortJob(org.apache.hadoop.mapreduce.JobContext context,org.apache.hadoop.mapreduce.JobStatus.State runState) throws IOException {

  int state=JobStatus.getOldNewJobRunState(runState);

  if (state != JobStatus.FAILED && state != JobStatus.KILLED) {

    throw new IOException("Invalid job run state : " + runState.name());

  }

  abortJob((JobContext)context,state);

}

Location: OutputCommitter.java

Content: 

/** 

 * This method implements the new interface by calling the old method. Note that the input types are different between the new and old apis and this is a bridge between the two.

 */

@Override public final void abortTask(org.apache.hadoop.mapreduce.TaskAttemptContext taskContext) throws IOException {

  abortTask((TaskAttemptContext)taskContext);

}

Location: OutputCommitter.java

Content: 

/** 

 * This method implements the new interface by calling the old method. Note that the input types are different between the new and old apis and this is a bridge between the two.

 * @deprecated Use {@link #commitJob(org.apache.hadoop.mapreduce.JobContext)}or  {@link #abortJob(org.apache.hadoop.mapreduce.JobContext,org.apache.hadoop.mapreduce.JobStatus.State)}instead.

 */

@Override @Deprecated public final void cleanupJob(org.apache.hadoop.mapreduce.JobContext context) throws IOException {

  cleanupJob((JobContext)context);

}

Location: OutputCommitter.java

Content: 

/** 

 * This method implements the new interface by calling the old method. Note that the input types are different between the new and old apis and this is a bridge between the two.

 */

@Override public final void commitJob(org.apache.hadoop.mapreduce.JobContext context) throws IOException {

  commitJob((JobContext)context);

}

Location: OutputCommitter.java

Content: 

/** 

 * This method implements the new interface by calling the old method. Note that the input types are different between the new and old apis and this is a bridge between the two.

 */

@Override public final void commitTask(org.apache.hadoop.mapreduce.TaskAttemptContext taskContext) throws IOException {

  commitTask((TaskAttemptContext)taskContext);

}

Location: OutputCommitter.java

Content: 

/** 

 * This method implements the new interface by calling the old method. Note that the input types are different between the new and old apis and this is a bridge between the two.

 */

@Override public final boolean needsTaskCommit(org.apache.hadoop.mapreduce.TaskAttemptContext taskContext) throws IOException {

  return needsTaskCommit((TaskAttemptContext)taskContext);

}

Location: OutputCommitter.java

Content: 

/** 

 * This method implements the new interface by calling the old method. Note that the input types are different between the new and old apis and this is a bridge between the two.

 */

@Override public final void setupJob(org.apache.hadoop.mapreduce.JobContext jobContext) throws IOException {

  setupJob((JobContext)jobContext);

}

Location: OutputCommitter.java

Content: 

/** 

 * This method implements the new interface by calling the old method. Note that the input types are different between the new and old apis and this is a bridge between the two.

 */

@Override public final void setupTask(org.apache.hadoop.mapreduce.TaskAttemptContext taskContext) throws IOException {

  setupTask((TaskAttemptContext)taskContext);

}

