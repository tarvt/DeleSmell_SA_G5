Location: JobHistoryParser.java

Content: 

private void handleEvent(HistoryEvent event) throws IOException {

  EventType type=event.getEventType();

switch (type) {

case JOB_SUBMITTED:

    handleJobSubmittedEvent((JobSubmittedEvent)event);

  break;

case JOB_STATUS_CHANGED:

break;

case JOB_INFO_CHANGED:

handleJobInfoChangeEvent((JobInfoChangeEvent)event);

break;

case JOB_INITED:

handleJobInitedEvent((JobInitedEvent)event);

break;

case JOB_PRIORITY_CHANGED:

handleJobPriorityChangeEvent((JobPriorityChangeEvent)event);

break;

case JOB_FAILED:

case JOB_KILLED:

handleJobFailedEvent((JobUnsuccessfulCompletionEvent)event);

break;

case JOB_FINISHED:

handleJobFinishedEvent((JobFinishedEvent)event);

break;

case TASK_STARTED:

handleTaskStartedEvent((TaskStartedEvent)event);

break;

case TASK_FAILED:

handleTaskFailedEvent((TaskFailedEvent)event);

break;

case TASK_UPDATED:

handleTaskUpdatedEvent((TaskUpdatedEvent)event);

break;

case TASK_FINISHED:

handleTaskFinishedEvent((TaskFinishedEvent)event);

break;

case MAP_ATTEMPT_STARTED:

case CLEANUP_ATTEMPT_STARTED:

case REDUCE_ATTEMPT_STARTED:

case SETUP_ATTEMPT_STARTED:

handleTaskAttemptStartedEvent((TaskAttemptStartedEvent)event);

break;

case MAP_ATTEMPT_FAILED:

case CLEANUP_ATTEMPT_FAILED:

case REDUCE_ATTEMPT_FAILED:

case SETUP_ATTEMPT_FAILED:

case MAP_ATTEMPT_KILLED:

case CLEANUP_ATTEMPT_KILLED:

case REDUCE_ATTEMPT_KILLED:

case SETUP_ATTEMPT_KILLED:

handleTaskAttemptFailedEvent((TaskAttemptUnsuccessfulCompletionEvent)event);

break;

case MAP_ATTEMPT_FINISHED:

handleMapAttemptFinishedEvent((MapAttemptFinishedEvent)event);

break;

case REDUCE_ATTEMPT_FINISHED:

handleReduceAttemptFinishedEvent((ReduceAttemptFinishedEvent)event);

break;

case SETUP_ATTEMPT_FINISHED:

case CLEANUP_ATTEMPT_FINISHED:

handleTaskAttemptFinishedEvent((TaskAttemptFinishedEvent)event);

break;

default :

break;

}

}

Location: JobHistoryParser.java

Content: 

private void handleJobFailedEvent(JobUnsuccessfulCompletionEvent event){

  info.finishTime=event.getFinishTime();

  info.finishedMaps=event.getFinishedMaps();

  info.finishedReduces=event.getFinishedReduces();

  info.jobStatus=event.getStatus();

}

Location: JobHistoryParser.java

Content: 

private void handleJobFinishedEvent(JobFinishedEvent event){

  info.finishTime=event.getFinishTime();

  info.finishedMaps=event.getFinishedMaps();

  info.finishedReduces=event.getFinishedReduces();

  info.failedMaps=event.getFailedMaps();

  info.failedReduces=event.getFailedReduces();

  info.totalCounters=event.getTotalCounters();

  info.mapCounters=event.getMapCounters();

  info.reduceCounters=event.getReduceCounters();

  info.jobStatus=JobStatus.getJobRunState(JobStatus.SUCCEEDED);

}

Location: JobHistoryParser.java

Content: 

private void handleJobInfoChangeEvent(JobInfoChangeEvent event){

  info.submitTime=event.getSubmitTime();

  info.launchTime=event.getLaunchTime();

}

Location: JobHistoryParser.java

Content: 

private void handleJobInitedEvent(JobInitedEvent event){

  info.launchTime=event.getLaunchTime();

  info.totalMaps=event.getTotalMaps();

  info.totalReduces=event.getTotalReduces();

}

Location: JobHistoryParser.java

Content: 

private void handleJobPriorityChangeEvent(JobPriorityChangeEvent event){

  info.priority=event.getPriority();

}

Location: JobHistoryParser.java

Content: 

private void handleJobSubmittedEvent(JobSubmittedEvent event){

  info.jobid=event.getJobId();

  info.jobname=event.getJobName();

  info.username=event.getUserName();

  info.submitTime=event.getSubmitTime();

  info.jobConfPath=event.getJobConfPath();

  info.jobACLs=event.getJobAcls();

  info.jobQueueName=event.getJobQueueName();

}

Location: JobHistoryParser.java

Content: 

private void handleMapAttemptFinishedEvent(MapAttemptFinishedEvent event){

  TaskInfo taskInfo=info.tasksMap.get(event.getTaskId());

  TaskAttemptInfo attemptInfo=taskInfo.attemptsMap.get(event.getAttemptId());

  attemptInfo.finishTime=event.getFinishTime();

  attemptInfo.status=event.getTaskStatus();

  attemptInfo.state=event.getState();

  attemptInfo.mapFinishTime=event.getMapFinishTime();

  attemptInfo.counters=event.getCounters();

  attemptInfo.hostname=event.getHostname();

}

Location: JobHistoryParser.java

Content: 

private void handleReduceAttemptFinishedEvent(ReduceAttemptFinishedEvent event){

  TaskInfo taskInfo=info.tasksMap.get(event.getTaskId());

  TaskAttemptInfo attemptInfo=taskInfo.attemptsMap.get(event.getAttemptId());

  attemptInfo.finishTime=event.getFinishTime();

  attemptInfo.status=event.getTaskStatus();

  attemptInfo.state=event.getState();

  attemptInfo.shuffleFinishTime=event.getShuffleFinishTime();

  attemptInfo.sortFinishTime=event.getSortFinishTime();

  attemptInfo.counters=event.getCounters();

  attemptInfo.hostname=event.getHostname();

}

Location: JobHistoryParser.java

Content: 

private void handleTaskAttemptFailedEvent(TaskAttemptUnsuccessfulCompletionEvent event){

  TaskInfo taskInfo=info.tasksMap.get(event.getTaskId());

  TaskAttemptInfo attemptInfo=taskInfo.attemptsMap.get(event.getTaskAttemptId());

  attemptInfo.finishTime=event.getFinishTime();

  attemptInfo.error=event.getError();

  attemptInfo.status=event.getTaskStatus();

  attemptInfo.hostname=event.getHostname();

  attemptInfo.shuffleFinishTime=event.getFinishTime();

  attemptInfo.sortFinishTime=event.getFinishTime();

  attemptInfo.mapFinishTime=event.getFinishTime();

}

Location: JobHistoryParser.java

Content: 

private void handleTaskAttemptFinishedEvent(TaskAttemptFinishedEvent event){

  TaskInfo taskInfo=info.tasksMap.get(event.getTaskId());

  TaskAttemptInfo attemptInfo=taskInfo.attemptsMap.get(event.getAttemptId());

  attemptInfo.finishTime=event.getFinishTime();

  attemptInfo.status=event.getTaskStatus();

  attemptInfo.state=event.getState();

  attemptInfo.counters=event.getCounters();

  attemptInfo.hostname=event.getHostname();

}

Location: JobHistoryParser.java

Content: 

private void handleTaskAttemptStartedEvent(TaskAttemptStartedEvent event){

  TaskAttemptID attemptId=event.getTaskAttemptId();

  TaskInfo taskInfo=info.tasksMap.get(event.getTaskId());

  TaskAttemptInfo attemptInfo=new TaskAttemptInfo();

  attemptInfo.startTime=event.getStartTime();

  attemptInfo.attemptId=event.getTaskAttemptId();

  attemptInfo.httpPort=event.getHttpPort();

  attemptInfo.trackerName=event.getTrackerName();

  attemptInfo.taskType=event.getTaskType();

  taskInfo.attemptsMap.put(attemptId,attemptInfo);

}

Location: JobHistoryParser.java

Content: 

private void handleTaskFailedEvent(TaskFailedEvent event){

  TaskInfo taskInfo=info.tasksMap.get(event.getTaskId());

  taskInfo.status=TaskStatus.State.FAILED.toString();

  taskInfo.finishTime=event.getFinishTime();

  taskInfo.error=event.getError();

  taskInfo.failedDueToAttemptId=event.getFailedAttemptID();

}

Location: JobHistoryParser.java

Content: 

private void handleTaskFinishedEvent(TaskFinishedEvent event){

  TaskInfo taskInfo=info.tasksMap.get(event.getTaskId());

  taskInfo.counters=event.getCounters();

  taskInfo.finishTime=event.getFinishTime();

  taskInfo.status=TaskStatus.State.SUCCEEDED.toString();

}

Location: JobHistoryParser.java

Content: 

private void handleTaskStartedEvent(TaskStartedEvent event){

  TaskInfo taskInfo=new TaskInfo();

  taskInfo.taskId=event.getTaskId();

  taskInfo.startTime=event.getStartTime();

  taskInfo.taskType=event.getTaskType();

  taskInfo.splitLocations=event.getSplitLocations();

  info.tasksMap.put(event.getTaskId(),taskInfo);

}

Location: JobHistoryParser.java

Content: 

private void handleTaskUpdatedEvent(TaskUpdatedEvent event){

  TaskInfo taskInfo=info.tasksMap.get(event.getTaskId());

  taskInfo.finishTime=event.getFinishTime();

}

Location: JobHistoryParser.java

Content: 

/** 

 * Create the job history parser for the given history file using the  given file system

 * @param fs

 * @param historyFile

 * @throws IOException

 */

public JobHistoryParser(FileSystem fs,Path historyFile) throws IOException {

  this(fs.open(historyFile));

}

Location: JobHistoryParser.java

Content: 

/** 

 * Create a job history parser for the given history file using the  given file system

 * @param fs

 * @param file

 * @throws IOException

 */

public JobHistoryParser(FileSystem fs,String file) throws IOException {

  this(fs,new Path(file));

}

Location: JobHistoryParser.java

Content: 

/** 

 * Create the history parser based on the input stream

 * @param in

 */

public JobHistoryParser(FSDataInputStream in){

  this.in=in;

}

Location: JobHistoryParser.java

Content: 

/** 

 * Get the next  {@link HistoryEvent}

 * @return the next {@link HistoryEvent}. If no more events left, return null.

 * @throws IOException 

 */

HistoryEvent nextEvent() throws IOException ;

