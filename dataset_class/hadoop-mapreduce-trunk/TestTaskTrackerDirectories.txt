Location: TestTaskTrackerDirectories.java

Content: 

private void checkDir(String dir) throws IOException {

  FileSystem fs=RawLocalFileSystem.get(new Configuration());

  File f=new File(dir);

  assertTrue(dir + "should exist",f.exists());

  FileStatus stat=fs.getFileStatus(new Path(dir));

  assertEquals(dir + " has correct permissions",0755,stat.getPermission().toShort());

}

Location: TestTaskTrackerDirectories.java

Content: 

@Before public void deleteTestDir() throws IOException {

  FileUtil.fullyDelete(new File(TEST_DIR));

  assertFalse("Could not delete " + TEST_DIR,new File(TEST_DIR).exists());

}

Location: TestTaskTrackerDirectories.java

Content: 

private void setupTaskController(Configuration conf) throws IOException {

  TaskController tc=new DefaultTaskController();

  tc.setConf(conf);

  tc.setup();

}

Location: TestTaskTrackerDirectories.java

Content: 

/** 

 * If the log dir can't be created, the TT should fail to start since it will be unable to localize or run tasks.

 */

@Test public void testCantCreateLogDir() throws Exception {

  File dir=TaskLog.getUserLogDir();

  FileUtil.fullyDelete(dir);

  assertTrue("Making file in place of log dir",dir.createNewFile());

  try {

    setupTaskController(new Configuration());

    fail("Didn't throw!");

  }

 catch (  IOException ioe) {

    System.err.println("Got expected exception");

    ioe.printStackTrace(System.out);

  }

}

Location: TestTaskTrackerDirectories.java

Content: 

@Test public void testCreatesLocalDirs() throws Exception {

  Configuration conf=new Configuration();

  String[] dirs=new String[]{TEST_DIR + "/local1",TEST_DIR + "/local2"};

  conf.setStrings(MRConfig.LOCAL_DIR,dirs);

  setupTaskController(conf);

  for (  String dir : dirs) {

    checkDir(dir);

  }

}

Location: TestTaskTrackerDirectories.java

Content: 

@Test public void testCreatesLogDir() throws Exception {

  File dir=TaskLog.getUserLogDir();

  FileUtil.fullyDelete(dir);

  setupTaskController(new Configuration());

  checkDir(dir.getAbsolutePath());

}

Location: TestTaskTrackerDirectories.java

Content: 

@Test public void testFixesLocalDirPermissions() throws Exception {

  Configuration conf=new Configuration();

  String[] dirs=new String[]{TEST_DIR + "/badperms"};

  new File(dirs[0]).mkdirs();

  FileUtil.chmod(dirs[0],"000");

  conf.setStrings(MRConfig.LOCAL_DIR,dirs);

  setupTaskController(conf);

  for (  String dir : dirs) {

    checkDir(dir);

  }

}

Location: TestTaskTrackerDirectories.java

Content: 

@Test public void testFixesLogDirPermissions() throws Exception {

  File dir=TaskLog.getUserLogDir();

  FileUtil.fullyDelete(dir);

  dir.mkdirs();

  FileUtil.chmod(dir.getAbsolutePath(),"000");

  setupTaskController(new Configuration());

  checkDir(dir.getAbsolutePath());

}

