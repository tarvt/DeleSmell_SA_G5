Location: TestTotalOrderPartitioner.java

Content: 

public void testTotalOrderBinarySearch() throws Exception {

  TotalOrderPartitioner<Text,NullWritable> partitioner=new TotalOrderPartitioner<Text,NullWritable>();

  Configuration conf=new Configuration();

  Path p=TestTotalOrderPartitioner.<Text>writePartitionFile("totalorderbinarysearch",conf,splitStrings);

  conf.setBoolean(TotalOrderPartitioner.NATURAL_ORDER,false);

  conf.setClass(MRJobConfig.MAP_OUTPUT_KEY_CLASS,Text.class,Object.class);

  try {

    partitioner.setConf(conf);

    NullWritable nw=NullWritable.get();

    for (    Check<Text> chk : testStrings) {

      assertEquals(chk.data.toString(),chk.part,partitioner.getPartition(chk.data,nw,splitStrings.length + 1));

    }

  }

  finally {

    p.getFileSystem(conf).delete(p,true);

  }

}

Location: TestTotalOrderPartitioner.java

Content: 

public void testTotalOrderCustomComparator() throws Exception {

  TotalOrderPartitioner<Text,NullWritable> partitioner=new TotalOrderPartitioner<Text,NullWritable>();

  Configuration conf=new Configuration();

  Text[] revSplitStrings=Arrays.copyOf(splitStrings,splitStrings.length);

  Arrays.sort(revSplitStrings,new ReverseStringComparator());

  Path p=TestTotalOrderPartitioner.<Text>writePartitionFile("totalordercustomcomparator",conf,revSplitStrings);

  conf.setBoolean(TotalOrderPartitioner.NATURAL_ORDER,false);

  conf.setClass(MRJobConfig.MAP_OUTPUT_KEY_CLASS,Text.class,Object.class);

  conf.setClass(MRJobConfig.KEY_COMPARATOR,ReverseStringComparator.class,RawComparator.class);

  ArrayList<Check<Text>> revCheck=new ArrayList<Check<Text>>();

  revCheck.add(new Check<Text>(new Text("aaaaa"),9));

  revCheck.add(new Check<Text>(new Text("aaabb"),9));

  revCheck.add(new Check<Text>(new Text("aabbb"),9));

  revCheck.add(new Check<Text>(new Text("aaaaa"),9));

  revCheck.add(new Check<Text>(new Text("babbb"),8));

  revCheck.add(new Check<Text>(new Text("baabb"),8));

  revCheck.add(new Check<Text>(new Text("yai"),1));

  revCheck.add(new Check<Text>(new Text("yak"),1));

  revCheck.add(new Check<Text>(new Text("z"),0));

  revCheck.add(new Check<Text>(new Text("ddngo"),4));

  revCheck.add(new Check<Text>(new Text("hi"),3));

  try {

    partitioner.setConf(conf);

    NullWritable nw=NullWritable.get();

    for (    Check<Text> chk : revCheck) {

      assertEquals(chk.data.toString(),chk.part,partitioner.getPartition(chk.data,nw,splitStrings.length + 1));

    }

  }

  finally {

    p.getFileSystem(conf).delete(p,true);

  }

}

Location: TestTotalOrderPartitioner.java

Content: 

public void testTotalOrderMemCmp() throws Exception {

  TotalOrderPartitioner<Text,NullWritable> partitioner=new TotalOrderPartitioner<Text,NullWritable>();

  Configuration conf=new Configuration();

  Path p=TestTotalOrderPartitioner.<Text>writePartitionFile("totalordermemcmp",conf,splitStrings);

  conf.setClass(MRJobConfig.MAP_OUTPUT_KEY_CLASS,Text.class,Object.class);

  try {

    partitioner.setConf(conf);

    NullWritable nw=NullWritable.get();

    for (    Check<Text> chk : testStrings) {

      assertEquals(chk.data.toString(),chk.part,partitioner.getPartition(chk.data,nw,splitStrings.length + 1));

    }

  }

  finally {

    p.getFileSystem(conf).delete(p,true);

  }

}

Location: TestTotalOrderPartitioner.java

Content: 

private static <T extends WritableComparable<?>>Path writePartitionFile(String testname,Configuration conf,T[] splits) throws IOException {

  final FileSystem fs=FileSystem.getLocal(conf);

  final Path testdir=new Path(System.getProperty("test.build.data","/tmp")).makeQualified(fs);

  Path p=new Path(testdir,testname + "/_partition.lst");

  TotalOrderPartitioner.setPartitionFile(conf,p);

  conf.setInt(MRJobConfig.NUM_REDUCES,splits.length + 1);

  SequenceFile.Writer w=null;

  try {

    w=SequenceFile.createWriter(fs,conf,p,splits[0].getClass(),NullWritable.class,SequenceFile.CompressionType.NONE);

    for (int i=0; i < splits.length; ++i) {

      w.append(splits[i],NullWritable.get());

    }

  }

  finally {

    if (null != w)     w.close();

  }

  return p;

}

