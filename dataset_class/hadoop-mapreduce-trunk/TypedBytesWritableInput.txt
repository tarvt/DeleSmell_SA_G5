Location: TypedBytesWritableInput.java

Content: 

/** 

 * Get a thread-local typed bytes writable input for the supplied {@link DataInput}.

 * @param in data input object

 * @return typed bytes writable input corresponding to the supplied{@link DataInput}.

 */

public static TypedBytesWritableInput get(DataInput in){

  return get(TypedBytesInput.get(in));

}

Location: TypedBytesWritableInput.java

Content: 

/** 

 * Get a thread-local typed bytes writable input for the supplied {@link TypedBytesInput}.

 * @param in typed bytes input object

 * @return typed bytes writable input corresponding to the supplied{@link TypedBytesInput}.

 */

public static TypedBytesWritableInput get(TypedBytesInput in){

  TypedBytesWritableInput bin=(TypedBytesWritableInput)tbIn.get();

  bin.setTypedBytesInput(in);

  return bin;

}

Location: TypedBytesWritableInput.java

Content: 

public ArrayWritable readArray() throws IOException {

  return readArray(null);

}

Location: TypedBytesWritableInput.java

Content: 

public ArrayWritable readArray(ArrayWritable aw) throws IOException {

  if (aw == null) {

    aw=new ArrayWritable(TypedBytesWritable.class);

  }

 else   if (!aw.getValueClass().equals(TypedBytesWritable.class)) {

    throw new RuntimeException("value class has to be TypedBytesWritable");

  }

  int length=in.readVectorHeader();

  Writable[] writables=new Writable[length];

  for (int i=0; i < length; i++) {

    writables[i]=new TypedBytesWritable(in.readRaw());

  }

  aw.set(writables);

  return aw;

}

Location: TypedBytesWritableInput.java

Content: 

public BooleanWritable readBoolean() throws IOException {

  return readBoolean(null);

}

Location: TypedBytesWritableInput.java

Content: 

public BooleanWritable readBoolean(BooleanWritable bw) throws IOException {

  if (bw == null) {

    bw=new BooleanWritable();

  }

  bw.set(in.readBool());

  return bw;

}

Location: TypedBytesWritableInput.java

Content: 

public ByteWritable readByte() throws IOException {

  return readByte(null);

}

Location: TypedBytesWritableInput.java

Content: 

public BytesWritable readBytes() throws IOException {

  return readBytes(null);

}

Location: TypedBytesWritableInput.java

Content: 

public BytesWritable readBytes(BytesWritable bw) throws IOException {

  byte[] bytes=in.readBytes();

  if (bw == null) {

    bw=new BytesWritable(bytes);

  }

 else {

    bw.set(bytes,0,bytes.length);

  }

  return bw;

}

Location: TypedBytesWritableInput.java

Content: 

public ByteWritable readByte(ByteWritable bw) throws IOException {

  if (bw == null) {

    bw=new ByteWritable();

  }

  bw.set(in.readByte());

  return bw;

}

Location: TypedBytesWritableInput.java

Content: 

public DoubleWritable readDouble() throws IOException {

  return readDouble(null);

}

Location: TypedBytesWritableInput.java

Content: 

public DoubleWritable readDouble(DoubleWritable dw) throws IOException {

  if (dw == null) {

    dw=new DoubleWritable();

  }

  dw.set(in.readDouble());

  return dw;

}

Location: TypedBytesWritableInput.java

Content: 

public FloatWritable readFloat() throws IOException {

  return readFloat(null);

}

Location: TypedBytesWritableInput.java

Content: 

public FloatWritable readFloat(FloatWritable fw) throws IOException {

  if (fw == null) {

    fw=new FloatWritable();

  }

  fw.set(in.readFloat());

  return fw;

}

Location: TypedBytesWritableInput.java

Content: 

public IntWritable readInt(IntWritable iw) throws IOException {

  if (iw == null) {

    iw=new IntWritable();

  }

  iw.set(in.readInt());

  return iw;

}

Location: TypedBytesWritableInput.java

Content: 

public LongWritable readLong() throws IOException {

  return readLong(null);

}

Location: TypedBytesWritableInput.java

Content: 

public LongWritable readLong(LongWritable lw) throws IOException {

  if (lw == null) {

    lw=new LongWritable();

  }

  lw.set(in.readLong());

  return lw;

}

Location: TypedBytesWritableInput.java

Content: 

public MapWritable readMap() throws IOException {

  return readMap(null);

}

Location: TypedBytesWritableInput.java

Content: 

public MapWritable readMap(MapWritable mw) throws IOException {

  if (mw == null) {

    mw=new MapWritable();

  }

  int length=in.readMapHeader();

  for (int i=0; i < length; i++) {

    Writable key=read();

    Writable value=read();

    mw.put(key,value);

  }

  return mw;

}

Location: TypedBytesWritableInput.java

Content: 

public SortedMapWritable readSortedMap() throws IOException {

  return readSortedMap(null);

}

Location: TypedBytesWritableInput.java

Content: 

public SortedMapWritable readSortedMap(SortedMapWritable mw) throws IOException {

  if (mw == null) {

    mw=new SortedMapWritable();

  }

  int length=in.readMapHeader();

  for (int i=0; i < length; i++) {

    WritableComparable key=(WritableComparable)read();

    Writable value=read();

    mw.put(key,value);

  }

  return mw;

}

Location: TypedBytesWritableInput.java

Content: 

public Text readText() throws IOException {

  return readText(null);

}

Location: TypedBytesWritableInput.java

Content: 

public Text readText(Text t) throws IOException {

  if (t == null) {

    t=new Text();

  }

  t.set(in.readString());

  return t;

}

Location: TypedBytesWritableInput.java

Content: 

public Class<? extends Writable> readType() throws IOException {

  Type type=in.readType();

  if (type == null) {

    return null;

  }

switch (type) {

case BYTES:

    return BytesWritable.class;

case BYTE:

  return ByteWritable.class;

case BOOL:

return BooleanWritable.class;

case INT:

return VIntWritable.class;

case LONG:

return VLongWritable.class;

case FLOAT:

return FloatWritable.class;

case DOUBLE:

return DoubleWritable.class;

case STRING:

return Text.class;

case VECTOR:

return ArrayWritable.class;

case MAP:

return MapWritable.class;

case WRITABLE:

return Writable.class;

default :

throw new RuntimeException("unknown type");

}

}

Location: TypedBytesWritableInput.java

Content: 

public VIntWritable readVInt() throws IOException {

  return readVInt(null);

}

Location: TypedBytesWritableInput.java

Content: 

public VIntWritable readVInt(VIntWritable iw) throws IOException {

  if (iw == null) {

    iw=new VIntWritable();

  }

  iw.set(in.readInt());

  return iw;

}

Location: TypedBytesWritableInput.java

Content: 

public VLongWritable readVLong() throws IOException {

  return readVLong(null);

}

Location: TypedBytesWritableInput.java

Content: 

public VLongWritable readVLong(VLongWritable lw) throws IOException {

  if (lw == null) {

    lw=new VLongWritable();

  }

  lw.set(in.readLong());

  return lw;

}

Location: TypedBytesWritableInput.java

Content: 

public Writable readWritable() throws IOException {

  return readWritable(null);

}

Location: TypedBytesWritableInput.java

Content: 

public Writable readWritable(Writable writable) throws IOException {

  ByteArrayInputStream bais=new ByteArrayInputStream(in.readBytes());

  DataInputStream dis=new DataInputStream(bais);

  String className=WritableUtils.readString(dis);

  if (writable == null) {

    try {

      Class<? extends Writable> cls=conf.getClassByName(className).asSubclass(Writable.class);

      writable=(Writable)ReflectionUtils.newInstance(cls,conf);

    }

 catch (    ClassNotFoundException e) {

      throw new IOException(e);

    }

  }

 else   if (!writable.getClass().getName().equals(className)) {

    throw new IOException("wrong Writable class given");

  }

  writable.readFields(dis);

  return writable;

}

Location: TypedBytesWritableInput.java

Content: 

private void setTypedBytesInput(TypedBytesInput in){

  this.in=in;

}

Location: TypedBytesWritableInput.java

Content: 

private TypedBytesWritableInput(){

  conf=new Configuration();

}

Location: TypedBytesWritableInput.java

Content: 

/** 

 * Creates a new instance of TypedBytesWritableInput. 

 */

public TypedBytesWritableInput(DataInput din){

  this(new TypedBytesInput(din));

}

Location: TypedBytesWritableInput.java

Content: 

/** 

 * Creates a new instance of TypedBytesWritableInput. 

 */

public TypedBytesWritableInput(TypedBytesInput in){

  this();

  this.in=in;

}

