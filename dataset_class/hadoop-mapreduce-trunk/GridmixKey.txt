Location: GridmixKey.java

Content: 

@Override public int compareTo(GridmixRecord other){

  final GridmixKey o=(GridmixKey)other;

  final byte t1=getType();

  final byte t2=o.getType();

  if (t1 != t2) {

    return t1 - t2;

  }

  return super.compareTo(other);

}

Location: GridmixKey.java

Content: 

int fixedBytes(){

  return super.fixedBytes() + (REDUCE_SPEC == getType() ? spec.getSize() : 0) + META_BYTES;

}

Location: GridmixKey.java

Content: 

public long getReduceOutputBytes(){

  assert REDUCE_SPEC == getType();

  return spec.bytes_out;

}

Location: GridmixKey.java

Content: 

GridmixKey(){

  this(DATA,1,0L);

}

Location: GridmixKey.java

Content: 

GridmixKey(byte type,int size,long seed){

  super(size,seed);

  this.type=type;

  setSize(size);

}

Location: GridmixKey.java

Content: 

public void setPartition(int partition){

  this.partition=partition;

}

Location: GridmixKey.java

Content: 

public void setReduceOutputBytes(long b_out){

  assert REDUCE_SPEC == getType();

  final int origSize=getSize();

  spec.bytes_out=b_out;

  setSize(origSize);

}

Location: GridmixKey.java

Content: 

@Override public void setSize(int size){

switch (type) {

case REDUCE_SPEC:

    super.setSize(size - (META_BYTES + spec.getSize()));

  break;

case DATA:

super.setSize(size - META_BYTES);

break;

default :

throw new IllegalStateException("Invalid type: " + type);

}

}

Location: GridmixKey.java

Content: 

public void setSpec(Spec spec){

  assert REDUCE_SPEC == getType();

  final int origSize=getSize();

  this.spec.set(spec);

  setSize(origSize);

}

Location: GridmixKey.java

Content: 

public void setType(byte type) throws IOException {

  final int origSize=getSize();

switch (type) {

case REDUCE_SPEC:

case DATA:

    this.type=type;

  break;

default :

throw new IOException("Invalid type: " + type);

}

setSize(origSize);

}

