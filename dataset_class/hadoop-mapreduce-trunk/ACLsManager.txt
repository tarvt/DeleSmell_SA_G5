Location: ACLsManager.java

Content: 

ACLsManager(Configuration conf,JobACLsManager jobACLsManager,QueueManager queueManager) throws IOException {

  mrOwner=UserGroupInformation.getCurrentUser();

  adminAcl=new AccessControlList(conf.get(MRConfig.MR_ADMINS," "));

  adminAcl.addUser(mrOwner.getShortUserName());

  String deprecatedSuperGroup=conf.get(MRConfig.MR_SUPERGROUP);

  if (deprecatedSuperGroup != null) {

    LOG.warn(MRConfig.MR_SUPERGROUP + " is deprecated. Use " + MRConfig.MR_ADMINS+ " instead");

    adminAcl.addGroup(deprecatedSuperGroup);

  }

  aclsEnabled=conf.getBoolean(MRConfig.MR_ACLS_ENABLED,false);

  this.jobACLsManager=jobACLsManager;

  this.queueManager=queueManager;

}

Location: ACLsManager.java

Content: 

/** 

 * Check the ACLs for a user doing the passed operation. <ul> <li>If ACLs are disabled, allow all users.</li> <li>Otherwise, if the operation is not a job operation(for eg. submit-job-to-queue), then allow only (a) clusterOwner(who started the cluster), (b) cluster administrators and (c) members of queue-submit-job-acl for the queue.</li> <li>If the operation is a job operation, then allow only (a) jobOwner, (b) clusterOwner(who started the cluster), (c) cluster administrators, (d) members of queue admins acl for the queue and (e) members of job acl for the job operation</li> </ul>

 * @param job   the job on which operation is requested

 * @param callerUGI  the user who is requesting the operation

 * @param operation  the operation for which authorization is needed

 * @throws AccessControlException

 */

void checkAccess(JobInProgress job,UserGroupInformation callerUGI,Operation operation) throws AccessControlException {

  String queue=job.getProfile().getQueueName();

  String jobId=job.getJobID().toString();

  JobStatus jobStatus=job.getStatus();

  String jobOwner=jobStatus.getUsername();

  AccessControlList jobAcl=jobStatus.getJobACLs().get(operation.jobACLNeeded);

  checkAccess(jobId,callerUGI,queue,operation,jobOwner,jobAcl);

}

Location: ACLsManager.java

Content: 

/** 

 * Check the ACLs for a user doing the passed job operation. <ul> <li>If ACLs are disabled, allow all users.</li> <li>Otherwise, allow only (a) jobOwner, (b) clusterOwner(who started the cluster), (c) cluster administrators, (d) members of job acl for the jobOperation</li> </ul>

 * @param jobStatus  the status of the job

 * @param callerUGI  the user who is trying to perform the operation

 * @param queue      the job queue name

 * @param operation  the operation for which authorization is needed

 */

void checkAccess(JobStatus jobStatus,UserGroupInformation callerUGI,String queue,Operation operation) throws AccessControlException {

  String jobId=jobStatus.getJobID().toString();

  String jobOwner=jobStatus.getUsername();

  AccessControlList jobAcl=jobStatus.getJobACLs().get(operation.jobACLNeeded);

  checkAccess(jobId,callerUGI,queue,operation,jobOwner,jobAcl);

}

Location: ACLsManager.java

Content: 

/** 

 * Check the ACLs for a user doing the passed operation. <ul> <li>If ACLs are disabled, allow all users.</li> <li>Otherwise, if the operation is not a job operation(for eg. submit-job-to-queue), then allow only (a) clusterOwner(who started the cluster), (b) cluster administrators and (c) members of queue-submit-job-acl for the queue.</li> <li>If the operation is a job operation, then allow only (a) jobOwner, (b) clusterOwner(who started the cluster), (c) cluster administrators, (d) members of queue admins acl for the queue and (e) members of job acl for the job operation</li> </ul>

 * @param jobId      the job id

 * @param callerUGI  the user who is trying to perform the operation

 * @param queue      the job queue name

 * @param operation  the operation for which authorization is needed

 * @param jobOwner   the user who submitted(or is submitting) this job

 * @param jobAcl     could be job-view-acl or job-modify-acl depending on thejob operation.

 */

void checkAccess(String jobId,UserGroupInformation callerUGI,String queue,Operation operation,String jobOwner,AccessControlList jobAcl) throws AccessControlException {

  String user=callerUGI.getShortUserName();

  String targetResource=jobId + " in queue " + queue;

  if (!aclsEnabled) {

    AuditLogger.logSuccess(user,operation.name(),targetResource);

    return;

  }

  if (isMRAdmin(callerUGI)) {

    AuditLogger.logSuccess(user,operation.name(),targetResource);

    return;

  }

  if (operation == Operation.SUBMIT_JOB) {

    if (!queueManager.hasAccess(queue,operation.qACLNeeded,callerUGI)) {

      AuditLogger.logFailure(user,operation.name(),queueManager.getQueueACL(queue,operation.qACLNeeded).toString(),targetResource,Constants.UNAUTHORIZED_USER);

      throw new AccessControlException("User " + callerUGI.getShortUserName() + " cannot perform "+ "operation "+ operation.name()+ " on queue "+ queue+ ".\n Please run \"hadoop queue -showacls\" "+ "command to find the queues you have access to .");

    }

 else {

      AuditLogger.logSuccess(user,operation.name(),targetResource);

      return;

    }

  }

  if (operation == Operation.VIEW_TASK_LOGS) {

    if (jobACLsManager.checkAccess(callerUGI,operation.jobACLNeeded,jobOwner,jobAcl)) {

      AuditLogger.logSuccess(user,operation.name(),targetResource);

      return;

    }

  }

 else   if (queueManager.hasAccess(queue,operation.qACLNeeded,callerUGI) || jobACLsManager.checkAccess(callerUGI,operation.jobACLNeeded,jobOwner,jobAcl)) {

    AuditLogger.logSuccess(user,operation.name(),targetResource);

    return;

  }

  AuditLogger.logFailure(user,operation.name(),jobAcl.toString(),targetResource,Constants.UNAUTHORIZED_USER);

  throw new AccessControlException("User " + callerUGI.getShortUserName() + " cannot perform operation "+ operation.name()+ " on "+ jobId+ " that is in the queue "+ queue);

}

Location: ACLsManager.java

Content: 

AccessControlList getAdminsAcl(){

  return adminAcl;

}

Location: ACLsManager.java

Content: 

/** 

 * Is the calling user an admin for the mapreduce cluster ? i.e. either cluster owner or cluster administrator

 * @return true, if user is an admin

 */

boolean isMRAdmin(UserGroupInformation callerUGI){

  if (adminAcl.isUserAllowed(callerUGI)) {

    return true;

  }

  return false;

}

