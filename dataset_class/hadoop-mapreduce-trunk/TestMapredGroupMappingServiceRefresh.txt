Location: TestMapredGroupMappingServiceRefresh.java

Content: 

private void addNewConfigResource(String rsrcName,String keyGroup,String groups,String keyHosts,String hosts) throws FileNotFoundException {

  URL url=config.getResource("mapred-site.xml");

  Path p=new Path(url.getPath());

  Path dir=p.getParent();

  tempResource=dir.toString() + "/" + rsrcName;

  String newResource="<configuration>" + "<property><name>" + keyGroup + "</name><value>"+ groups+ "</value></property>"+ "<property><name>"+ keyHosts+ "</name><value>"+ hosts+ "</value></property>"+ "</configuration>";

  PrintWriter writer=new PrintWriter(new FileOutputStream(tempResource));

  writer.println(newResource);

  writer.close();

  Configuration.addDefaultResource(rsrcName);

}

Location: TestMapredGroupMappingServiceRefresh.java

Content: 

@Test public void testGroupMappingRefresh() throws Exception {

  MRAdmin admin=new MRAdmin(config);

  String[] args=new String[]{"-refreshUserToGroupsMappings"};

  Groups groups=Groups.getUserToGroupsMappingService(config);

  String user=UserGroupInformation.getLoginUser().getShortUserName();

  System.out.println("first attempt:");

  List<String> g1=groups.getGroups(user);

  String[] str_groups=new String[g1.size()];

  g1.toArray(str_groups);

  System.out.println(Arrays.toString(str_groups));

  System.out.println("second attempt, should be same:");

  List<String> g2=groups.getGroups(user);

  g2.toArray(str_groups);

  System.out.println(Arrays.toString(str_groups));

  for (int i=0; i < g2.size(); i++) {

    assertEquals("Should be same group ",g1.get(i),g2.get(i));

  }

  admin.run(args);

  System.out.println("third attempt(after refresh command), should be different:");

  List<String> g3=groups.getGroups(user);

  g3.toArray(str_groups);

  System.out.println(Arrays.toString(str_groups));

  for (int i=0; i < g3.size(); i++) {

    assertFalse("Should be different group ",g1.get(i).equals(g3.get(i)));

  }

  System.out.println("");

  Thread.sleep(groupRefreshTimeoutSec * 1100);

  System.out.println("fourth attempt(after timeout), should be different:");

  List<String> g4=groups.getGroups(user);

  g4.toArray(str_groups);

  System.out.println(Arrays.toString(str_groups));

  for (int i=0; i < g4.size(); i++) {

    assertFalse("Should be different group ",g3.get(i).equals(g4.get(i)));

  }

}

Location: TestMapredGroupMappingServiceRefresh.java

Content: 

@Test public void testRefreshSuperUserGroupsConfiguration() throws Exception {

  final String SUPER_USER="super_user";

  final String[] GROUP_NAMES1=new String[]{"gr1","gr2"};

  final String[] GROUP_NAMES2=new String[]{"gr3","gr4"};

  String userKeyGroups=ProxyUsers.getProxySuperuserGroupConfKey(SUPER_USER);

  String userKeyHosts=ProxyUsers.getProxySuperuserIpConfKey(SUPER_USER);

  config.set(userKeyGroups,"gr3,gr4,gr5");

  config.set(userKeyHosts,"127.0.0.1");

  ProxyUsers.refreshSuperUserGroupsConfiguration(config);

  UserGroupInformation ugi1=mock(UserGroupInformation.class);

  UserGroupInformation ugi2=mock(UserGroupInformation.class);

  UserGroupInformation suUgi=mock(UserGroupInformation.class);

  when(ugi1.getRealUser()).thenReturn(suUgi);

  when(ugi2.getRealUser()).thenReturn(suUgi);

  when(suUgi.getShortUserName()).thenReturn(SUPER_USER);

  when(suUgi.getUserName()).thenReturn(SUPER_USER + "L");

  when(ugi1.getShortUserName()).thenReturn("user1");

  when(ugi2.getShortUserName()).thenReturn("user2");

  when(ugi1.getUserName()).thenReturn("userL1");

  when(ugi2.getUserName()).thenReturn("userL2");

  when(ugi1.getGroupNames()).thenReturn(GROUP_NAMES1);

  when(ugi2.getGroupNames()).thenReturn(GROUP_NAMES2);

  try {

    ProxyUsers.authorize(ugi1,"127.0.0.1",config);

    fail("first auth for " + ugi1.getShortUserName() + " should've failed ");

  }

 catch (  AuthorizationException e) {

    System.err.println("auth for " + ugi1.getUserName() + " failed");

  }

  try {

    ProxyUsers.authorize(ugi2,"127.0.0.1",config);

    System.err.println("auth for " + ugi2.getUserName() + " succeeded");

  }

 catch (  AuthorizationException e) {

    fail("first auth for " + ugi2.getShortUserName() + " should've succeeded: "+ e.getLocalizedMessage());

  }

  String rsrc="testRefreshSuperUserGroupsConfiguration_rsrc.xml";

  addNewConfigResource(rsrc,userKeyGroups,"gr2",userKeyHosts,"127.0.0.1");

  MRAdmin admin=new MRAdmin(config);

  String[] args=new String[]{"-refreshSuperUserGroupsConfiguration"};

  admin.run(args);

  try {

    ProxyUsers.authorize(ugi2,"127.0.0.1",config);

    fail("second auth for " + ugi2.getShortUserName() + " should've failed ");

  }

 catch (  AuthorizationException e) {

    System.err.println("auth for " + ugi2.getUserName() + " failed");

  }

  try {

    ProxyUsers.authorize(ugi1,"127.0.0.1",config);

    System.err.println("auth for " + ugi1.getUserName() + " succeeded");

  }

 catch (  AuthorizationException e) {

    fail("second auth for " + ugi1.getShortUserName() + " should've succeeded: "+ e.getLocalizedMessage());

  }

}

