Location: DataVerifier.java

Content: 

/** 

 * Inits with the default buffer size

 */

DataVerifier(){

  this(Constants.BUFFERSIZE);

}

Location: DataVerifier.java

Content: 

/** 

 * Inits with given buffer size (must be greater than bytes per long and a multiple of bytes per long)

 * @param bufferSize size which must be greater than BYTES_PER_LONG and which also must be a multiple of BYTES_PER_LONG

 */

DataVerifier(int bufferSize){

  if (bufferSize < BYTES_PER_LONG) {

    throw new IllegalArgumentException("Buffer size must be greater than or equal to " + BYTES_PER_LONG);

  }

  if ((bufferSize % BYTES_PER_LONG) != 0) {

    throw new IllegalArgumentException("Buffer size must be a multiple of " + BYTES_PER_LONG);

  }

  this.bufferSize=bufferSize;

}

Location: DataVerifier.java

Content: 

/** 

 * Determines the offset to use given a byte counter

 * @param byteRead

 * @return offset position

 */

private long determineOffset(long byteRead){

  if (byteRead < 0) {

    byteRead=0;

  }

  return (byteRead / BYTES_PER_LONG) * BYTES_PER_LONG;

}

Location: DataVerifier.java

Content: 

/** 

 * Reads a header from the given input stream

 * @param in input stream to read from

 * @return ReadInfo

 * @throws IOException if a read error occurs or EOF occurs

 * @throws BadFileException if end of file occurs or the byte amount read is invalid

 */

ReadInfo readHeader(DataInputStream in) throws IOException, BadFileException {

  int headerLen=DataWriter.getHeaderLength();

  ByteBuffer headerBuf=ByteBuffer.wrap(new byte[headerLen]);

  long elapsed=0;

{

    long startTime=Timer.now();

    in.readFully(headerBuf.array());

    elapsed+=Timer.elapsed(startTime);

  }

  headerBuf.rewind();

  long hashValue=headerBuf.getLong();

  long byteAvailable=headerBuf.getLong();

  if (byteAvailable < 0) {

    throw new BadFileException("Invalid negative amount " + byteAvailable + " determined for header data amount");

  }

  return new ReadInfo(byteAvailable,hashValue,elapsed,headerLen);

}

Location: DataVerifier.java

Content: 

/** 

 * Verifies a buffer of a given size using the given start hash offset

 * @param buf the buffer to verify

 * @param size the number of bytes to be used in that buffer

 * @param startOffset the start hash offset

 * @param hasher the hasher to use for calculating expected values

 * @return ResumeBytes a set of data about the next offset and chunks analyzed

 */

private VerifyInfo verifyBuffer(ByteBuffer buf,int size,long startOffset,DataHasher hasher){

  ByteBuffer cmpBuf=ByteBuffer.wrap(new byte[BYTES_PER_LONG]);

  long hashOffset=startOffset;

  long chunksSame=0;

  long chunksDifferent=0;

  for (long i=0; i < size; ++i) {

    cmpBuf.put(buf.get());

    if (!cmpBuf.hasRemaining()) {

      cmpBuf.rewind();

      long receivedData=cmpBuf.getLong();

      cmpBuf.rewind();

      long expected=hasher.generate(hashOffset);

      hashOffset+=BYTES_PER_LONG;

      if (receivedData == expected) {

        ++chunksSame;

      }

 else {

        ++chunksDifferent;

      }

    }

  }

  if (cmpBuf.hasRemaining() && cmpBuf.position() != 0) {

    int curSize=cmpBuf.position();

    while (cmpBuf.hasRemaining()) {

      cmpBuf.put((byte)0);

    }

    long expected=hasher.generate(hashOffset);

    ByteBuffer tempBuf=ByteBuffer.wrap(new byte[BYTES_PER_LONG]);

    tempBuf.putLong(expected);

    tempBuf.position(curSize);

    while (tempBuf.hasRemaining()) {

      tempBuf.put((byte)0);

    }

    cmpBuf.rewind();

    tempBuf.rewind();

    if (cmpBuf.equals(tempBuf)) {

      ++chunksSame;

    }

 else {

      ++chunksDifferent;

    }

  }

  return new VerifyInfo(chunksSame,chunksDifferent);

}

Location: DataVerifier.java

Content: 

/** 

 * Verifies a given number of bytes from a file - less number of bytes may be read if a header can not be read in due to the byte limit

 * @param byteAm the byte amount to limit to (should be less than or equal to file size)

 * @param bytesRead the starting byte location

 * @param in the input stream to read from

 * @return VerifyOutput with data about reads

 * @throws IOException if a read failure occurs

 * @throws BadFileException if a header can not be read or end of file is reached unexpectedly

 */

private VerifyOutput verifyBytes(long byteAm,long bytesRead,DataInputStream in) throws IOException, BadFileException {

  if (byteAm <= 0) {

    return new VerifyOutput(0,0,0,0);

  }

  long chunksSame=0;

  long chunksDifferent=0;

  long readTime=0;

  long bytesLeft=byteAm;

  long bufLeft=0;

  long bufRead=0;

  long seqNum=0;

  DataHasher hasher=null;

  ByteBuffer readBuf=ByteBuffer.wrap(new byte[bufferSize]);

  while (bytesLeft > 0) {

    if (bufLeft <= 0) {

      if (bytesLeft < DataWriter.getHeaderLength()) {

        break;

      }

      ReadInfo header=null;

      try {

        header=readHeader(in);

      }

 catch (      EOFException e) {

        break;

      }

      ++seqNum;

      hasher=new DataHasher(header.getHashValue());

      bufLeft=header.getByteAm();

      readTime+=header.getTimeTaken();

      bytesRead+=header.getBytesRead();

      bytesLeft-=header.getBytesRead();

      bufRead=0;

      if (bufLeft > bytesLeft) {

        bufLeft=bytesLeft;

      }

      if (bufLeft <= 0) {

        continue;

      }

    }

    int bufSize=bufferSize;

    if (bytesLeft < bufSize) {

      bufSize=(int)bytesLeft;

    }

    if (bufLeft < bufSize) {

      bufSize=(int)bufLeft;

    }

    try {

      readBuf.rewind();

      long startTime=Timer.now();

      in.readFully(readBuf.array(),0,bufSize);

      readTime+=Timer.elapsed(startTime);

    }

 catch (    EOFException e) {

      throw new BadFileException("Could not read the number of expected data bytes " + bufSize + " due to unexpected end of file during sequence "+ seqNum,e);

    }

    bytesRead+=bufSize;

    bytesLeft-=bufSize;

    bufLeft-=bufSize;

    readBuf.rewind();

    long vOffset=determineOffset(bufRead);

    bufRead+=bufSize;

    VerifyInfo verifyRes=verifyBuffer(readBuf,bufSize,vOffset,hasher);

    chunksSame+=verifyRes.getSame();

    chunksDifferent+=verifyRes.getDifferent();

  }

  return new VerifyOutput(chunksSame,chunksDifferent,bytesRead,readTime);

}

Location: DataVerifier.java

Content: 

/** 

 * Verifies a given number of bytes from a file - less number of bytes may be read if a header can not be read in due to the byte limit

 * @param byteAm the byte amount to limit to (should be less than or equal to file size)

 * @param in the input stream to read from

 * @return VerifyOutput with data about reads

 * @throws IOException if a read failure occurs

 * @throws BadFileException if a header can not be read or end of file is reached unexpectedly

 */

VerifyOutput verifyFile(long byteAm,DataInputStream in) throws IOException, BadFileException {

  return verifyBytes(byteAm,0,in);

}

