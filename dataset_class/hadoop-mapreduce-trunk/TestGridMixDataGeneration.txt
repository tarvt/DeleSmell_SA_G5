Location: TestGridMixDataGeneration.java

Content: 

private void checkGeneratedDataAndJobStatus(long inputSize) throws IOException {

  LOG.info("Verify the generated data size.");

  long dataSizeInMB=getDataSizeInMB(new Path(gridmixDir,"input"));

  Assert.assertTrue("Generate data has not matched with given size",dataSizeInMB + 0.1 > inputSize || dataSizeInMB - 0.1 < inputSize);

  JobClient jobClient=jtClient.getClient();

  int len=jobClient.getAllJobs().length;

  LOG.info("Verify the job status after completion of job.");

  Assert.assertEquals("Job has not succeeded.",JobStatus.SUCCEEDED,jobClient.getAllJobs()[len - 1].getRunState());

}

Location: TestGridMixDataGeneration.java

Content: 

private static long getDataSizeInMB(Path inputDir) throws IOException {

  FileSystem fs=inputDir.getFileSystem(conf);

  ContentSummary csmry=fs.getContentSummary(inputDir);

  long dataSize=csmry.getLength();

  dataSize=dataSize / (1024 * 1024);

  return dataSize;

}

Location: TestGridMixDataGeneration.java

Content: 

/** 

 * Generate the data in a REPLAY submission policy with RoundRobinUserResolver mode and verify whether the generated data matches with the given  input size or not.

 * @throws Exception

 */

@Test public void testGenerateDataWithREPLAYSubmission() throws Exception {

  conf=rtClient.getDaemonConf();

  final long inputSizeInMB=cSize * 300;

  String[] runtimeValues={"LOADJOB",RoundRobinUserResolver.class.getName(),"REPLAY",inputSizeInMB + "m","file://" + UtilsForGridmix.getProxyUsersFile(conf),"file:///dev/null"};

  String[] otherArgs={"-D",GridMixConfig.GRIDMIX_DISTCACHE_ENABLE + "=false","-D",GridMixConfig.GRIDMIX_COMPRESSION_ENABLE + "=false"};

  int exitCode=UtilsForGridmix.runGridmixJob(gridmixDir,conf,GridMixRunMode.DATA_GENERATION.getValue(),runtimeValues,otherArgs);

  Assert.assertEquals("Data generation has failed.",0,exitCode);

  checkGeneratedDataAndJobStatus(inputSizeInMB);

}

Location: TestGridMixDataGeneration.java

Content: 

/** 

 * Generate the data in a SERIAL submission policy with EchoUserResolver mode and also set the no.of bytes per file in the data.Verify whether each  file size matches with given per file size or not and also  verify the overall size of generated data.

 * @throws Exception

 */

@Test public void testGenerateDataWithSERIALSubmission() throws Exception {

  conf=rtClient.getDaemonConf();

  long perNodeSizeInMB=500;

  final long inputSizeInMB=cSize * perNodeSizeInMB;

  String[] runtimeValues={"LOADJOB",EchoUserResolver.class.getName(),"SERIAL",inputSizeInMB + "m","file:///dev/null"};

  long bytesPerFile=200 * 1024 * 1024;

  String[] otherArgs={"-D",GridMixConfig.GRIDMIX_BYTES_PER_FILE + "=" + bytesPerFile,"-D",GridMixConfig.GRIDMIX_DISTCACHE_ENABLE + "=false","-D",GridMixConfig.GRIDMIX_COMPRESSION_ENABLE + "=false"};

  int exitCode=UtilsForGridmix.runGridmixJob(gridmixDir,conf,GridMixRunMode.DATA_GENERATION.getValue(),runtimeValues,otherArgs);

  Assert.assertEquals("Data generation has failed.",0,exitCode);

  LOG.info("Verify the eache file size in a generate data.");

  verifyEachNodeSize(new Path(gridmixDir,"input"),perNodeSizeInMB);

  verifyNumOfFilesGeneratedInEachNode(new Path(gridmixDir,"input"),perNodeSizeInMB,bytesPerFile);

  checkGeneratedDataAndJobStatus(inputSizeInMB);

}

Location: TestGridMixDataGeneration.java

Content: 

/** 

 * Generate the data in a STRESS submission policy with SubmitterUserResolver  mode and verify whether the generated data matches with given  input size or not.

 * @throws IOException

 */

@Test public void testGenerateDataWithSTRESSSubmission() throws Exception {

  conf=rtClient.getDaemonConf();

  final long inputSizeInMB=cSize * 128;

  String[] runtimeValues={"LOADJOB",SubmitterUserResolver.class.getName(),"STRESS",inputSizeInMB + "m","file:///dev/null"};

  String[] otherArgs={"-D",GridMixConfig.GRIDMIX_DISTCACHE_ENABLE + "=false","-D",GridMixConfig.GRIDMIX_COMPRESSION_ENABLE + "=false"};

  int exitCode=UtilsForGridmix.runGridmixJob(gridmixDir,conf,GridMixRunMode.DATA_GENERATION.getValue(),runtimeValues,otherArgs);

  Assert.assertEquals("Data generation has failed.",0,exitCode);

  checkGeneratedDataAndJobStatus(inputSizeInMB);

}

Location: TestGridMixDataGeneration.java

Content: 

private void verifyEachNodeSize(Path inputDir,long dataSizePerNode) throws IOException {

  FileSystem fs=inputDir.getFileSystem(conf);

  FileStatus[] fstatus=fs.listStatus(inputDir);

  for (  FileStatus fstat : fstatus) {

    if (fstat.isDirectory()) {

      long fileSize=getDataSizeInMB(fstat.getPath());

      Assert.assertTrue("The Size has not matched with given " + "per node file size(" + dataSizePerNode + "MB)",fileSize + 0.1 > dataSizePerNode || fileSize - 0.1 < dataSizePerNode);

    }

  }

}

Location: TestGridMixDataGeneration.java

Content: 

private void verifyNumOfFilesGeneratedInEachNode(Path inputDir,long nodeSize,long fileSize) throws IOException {

  long fileCount=nodeSize / fileSize;

  long expFileCount=Math.round(fileCount);

  expFileCount=expFileCount + ((nodeSize % fileSize != 0) ? 1 : 0);

  FileSystem fs=inputDir.getFileSystem(conf);

  FileStatus[] fstatus=fs.listStatus(inputDir);

  for (  FileStatus fstat : fstatus) {

    if (fstat.isDirectory()) {

      FileSystem nodeFs=fstat.getPath().getFileSystem(conf);

      long actFileCount=nodeFs.getContentSummary(fstat.getPath()).getFileCount();

      Assert.assertEquals("File count has not matched.",expFileCount,actFileCount);

    }

  }

}

