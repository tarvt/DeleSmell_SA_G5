Location: BigDecimalSplitter.java

Content: 

/** 

 * Returns a list of BigDecimals one element longer than the list of input splits. This represents the boundaries between input splits. All splits are open on the top end, except the last one. So the list [0, 5, 8, 12, 18] would represent splits capturing the intervals: [0, 5) [5, 8) [8, 12) [12, 18] note the closed interval for the last split.

 */

List<BigDecimal> split(BigDecimal numSplits,BigDecimal minVal,BigDecimal maxVal) throws SQLException {

  List<BigDecimal> splits=new ArrayList<BigDecimal>();

  BigDecimal splitSize=tryDivide(maxVal.subtract(minVal),(numSplits));

  if (splitSize.compareTo(MIN_INCREMENT) < 0) {

    splitSize=MIN_INCREMENT;

    LOG.warn("Set BigDecimal splitSize to MIN_INCREMENT");

  }

  BigDecimal curVal=minVal;

  while (curVal.compareTo(maxVal) <= 0) {

    splits.add(curVal);

    curVal=curVal.add(splitSize);

  }

  if (splits.get(splits.size() - 1).compareTo(maxVal) != 0 || splits.size() == 1) {

    splits.add(maxVal);

  }

  return splits;

}

Location: BigDecimalSplitter.java

Content: 

/** 

 * Divide numerator by denominator. If impossible in exact mode, use rounding.

 */

protected BigDecimal tryDivide(BigDecimal numerator,BigDecimal denominator){

  try {

    return numerator.divide(denominator);

  }

 catch (  ArithmeticException ae) {

    return numerator.divide(denominator,BigDecimal.ROUND_HALF_UP);

  }

}

