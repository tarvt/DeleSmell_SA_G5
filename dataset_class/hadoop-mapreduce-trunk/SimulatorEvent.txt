Location: SimulatorEvent.java

Content: 

/** 

 * Get an internal counter of the  {@link SimulatorEvent}. Each  {@link SimulatorEvent} holds acounter, incremented on every event, to order multiple events that occur at the same time.

 * @return internal counter of the {@link SimulatorEvent}

 */

long getInternalCount(){

  return internalCount;

}

Location: SimulatorEvent.java

Content: 

/** 

 * Get the  {@link SimulatorEventListener} to handle the {@link SimulatorEvent}.

 * @return the {@link SimulatorEventListener} to handle the {@link SimulatorEvent}.

 */

public SimulatorEventListener getListener(){

  return listener;

}

Location: SimulatorEvent.java

Content: 

/** 

 * Get the expected event expiry time. 

 * @return the expected event expiry time

 */

public long getTimeStamp(){

  return timestamp;

}

Location: SimulatorEvent.java

Content: 

/** 

 * Set the internal counter of the  {@link SimulatorEvent}.

 * @param count value to set the internal counter

 */

void setInternalCount(long count){

  this.internalCount=count;

}

Location: SimulatorEvent.java

Content: 

protected SimulatorEvent(SimulatorEventListener listener,long timestamp){

  this.listener=listener;

  this.timestamp=timestamp;

}

