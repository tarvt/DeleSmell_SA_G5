Location: TestCommandLineJobSubmission.java

Content: 

@SuppressWarnings("unchecked") private Class loadLibJar(JobConf jobConf){

  try {

    return jobConf.getClassByName("testjar.ClassWordCount");

  }

 catch (  ClassNotFoundException e) {

    return null;

  }

}

Location: TestCommandLineJobSubmission.java

Content: 

public void testJobShell() throws Exception {

  MiniDFSCluster dfs=null;

  MiniMRCluster mr=null;

  FileSystem fs=null;

  Path testFile=new Path(input,"testfile");

  try {

    Configuration conf=new Configuration();

    dfs=new MiniDFSCluster(conf,2,true,null);

    fs=dfs.getFileSystem();

    FSDataOutputStream stream=fs.create(testFile);

    stream.write("teststring".getBytes());

    stream.close();

    mr=new MiniMRCluster(2,fs.getUri().toString(),1);

    File thisbuildDir=new File(buildDir,"jobCommand");

    assertTrue("create build dir",thisbuildDir.mkdirs());

    File f=new File(thisbuildDir,"files_tmp");

    FileOutputStream fstream=new FileOutputStream(f);

    fstream.write("somestrings".getBytes());

    fstream.close();

    File f1=new File(thisbuildDir,"files_tmp1");

    fstream=new FileOutputStream(f1);

    fstream.write("somestrings".getBytes());

    fstream.close();

    Path cachePath=new Path("/cacheDir");

    if (!fs.mkdirs(cachePath)) {

      throw new IOException("Mkdirs failed to create " + cachePath.toString());

    }

    Path localCachePath=new Path(System.getProperty("test.cache.data"));

    Path txtPath=new Path(localCachePath,new Path("test.txt"));

    Path jarPath=new Path(localCachePath,new Path("test.jar"));

    Path zipPath=new Path(localCachePath,new Path("test.zip"));

    Path tarPath=new Path(localCachePath,new Path("test.tar"));

    Path tgzPath=new Path(localCachePath,new Path("test.tgz"));

    fs.copyFromLocalFile(txtPath,cachePath);

    fs.copyFromLocalFile(jarPath,cachePath);

    fs.copyFromLocalFile(zipPath,cachePath);

    String[] files=new String[3];

    files[0]=f.toString();

    files[1]=f1.toString() + "#localfilelink";

    files[2]=fs.getUri().resolve(cachePath + "/test.txt#dfsfilelink").toString();

    String[] libjars=new String[2];

    libjars[0]="build/test/mapred/testjar/testjob.jar";

    libjars[1]=fs.getUri().resolve(cachePath + "/test.jar").toString();

    String[] archives=new String[3];

    archives[0]=tgzPath.toString();

    archives[1]=tarPath + "#tarlink";

    archives[2]=fs.getUri().resolve(cachePath + "/test.zip#ziplink").toString();

    String[] args=new String[10];

    args[0]="-files";

    args[1]=StringUtils.arrayToString(files);

    args[2]="-libjars";

    args[3]=StringUtils.arrayToString(libjars);

    args[4]="-archives";

    args[5]=StringUtils.arrayToString(archives);

    args[6]="-D";

    args[7]="mapred.output.committer.class=testjar.CustomOutputCommitter";

    args[8]=input.toString();

    args[9]=output.toString();

    JobConf jobConf=mr.createJobConf();

    assertTrue("libjar not in client classpath",loadLibJar(jobConf) == null);

    int ret=ToolRunner.run(jobConf,new testshell.ExternalMapReduce(),args);

    assertTrue("libjar added to client classpath",loadLibJar(jobConf) != null);

    assertTrue("not failed ",ret != -1);

    f.delete();

    thisbuildDir.delete();

  }

  finally {

    if (dfs != null) {

      dfs.shutdown();

    }

    ;

    if (mr != null) {

      mr.shutdown();

    }

    ;

  }

}

