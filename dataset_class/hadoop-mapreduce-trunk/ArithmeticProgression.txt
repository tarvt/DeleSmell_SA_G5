Location: ArithmeticProgression.java

Content: 

/** 

 * Constructor 

 */

public ArithmeticProgression(char symbol,long value,long delta,long limit){

  if (delta == 0)   throw new IllegalArgumentException("delta == 0");

  this.symbol=symbol;

  this.value=value;

  this.delta=delta;

  this.limit=limit;

}

Location: ArithmeticProgression.java

Content: 

/** 

 * {@inheritDoc} 

 */

@Override public int compareTo(ArithmeticProgression that){

  if (this.symbol != that.symbol)   throw new IllegalArgumentException("this.symbol != that.symbol, this=" + this + ", that="+ that);

  if (this.delta != that.delta)   throw new IllegalArgumentException("this.delta != that.delta, this=" + this + ", that="+ that);

  final long d=this.limit - that.limit;

  return d > 0 ? 1 : d == 0 ? 0 : -1;

}

Location: ArithmeticProgression.java

Content: 

/** 

 * Does this contain that? 

 */

boolean contains(ArithmeticProgression that){

  if (this.symbol != that.symbol)   throw new IllegalArgumentException("this.symbol != that.symbol, this=" + this + ", that="+ that);

  if (this.delta == that.delta) {

    if (this.value == that.value)     return this.getSteps() >= that.getSteps();

 else     if (this.delta < 0)     return this.value > that.value && this.limit <= that.limit;

 else     if (this.delta > 0)     return this.value < that.value && this.limit >= that.limit;

  }

  return false;

}

