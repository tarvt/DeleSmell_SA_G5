Location: ProcessTree.java

Content: 

/** 

 * Destroy the process group.

 * @param pgrpId Process group id of to-be-killed-processes

 * @param sleeptimeBeforeSigkill The time to wait before sending SIGKILLafter sending SIGTERM

 * @param inBackground Process group is to be killed in the back ground witha separate thread

 */

protected static void destroyProcessGroup(String pgrpId,long sleeptimeBeforeSigkill,boolean inBackground){

  terminateProcessGroup(pgrpId);

  sigKill(pgrpId,true,sleeptimeBeforeSigkill,inBackground);

}

Location: ProcessTree.java

Content: 

/** 

 * Destroy the process.

 * @param pid Process id of to-be-killed-process

 * @param sleeptimeBeforeSigkill The time to wait before sending SIGKILLafter sending SIGTERM

 * @param inBackground Process is to be killed in the back ground witha separate thread

 */

protected static void destroyProcess(String pid,long sleeptimeBeforeSigkill,boolean inBackground){

  terminateProcess(pid);

  sigKill(pid,false,sleeptimeBeforeSigkill,inBackground);

}

Location: ProcessTree.java

Content: 

/** 

 * Destroy the process-tree.

 * @param pid process id of the root process of the subtree of processesto be killed

 * @param sleeptimeBeforeSigkill The time to wait before sending SIGKILLafter sending SIGTERM

 * @param isProcessGroup pid is a process group leader or not

 * @param inBackground Process is to be killed in the back ground witha separate thread

 */

public static void destroy(String pid,long sleeptimeBeforeSigkill,boolean isProcessGroup,boolean inBackground){

  if (isProcessGroup) {

    destroyProcessGroup(pid,sleeptimeBeforeSigkill,inBackground);

  }

 else {

    destroyProcess(pid,sleeptimeBeforeSigkill,inBackground);

  }

}

Location: ProcessTree.java

Content: 

/** 

 * Is the process group with  still alive? This method assumes that isAlive is called on a pid that was alive not too long ago, and hence assumes no chance of pid-wrapping-around.

 * @param pgrpId process group id

 * @return true if any of process in group is alive.

 */

public static boolean isProcessGroupAlive(String pgrpId){

  ShellCommandExecutor shexec=null;

  try {

    String[] args={"kill","-0","-" + pgrpId};

    shexec=new ShellCommandExecutor(args);

    shexec.execute();

  }

 catch (  ExitCodeException ee) {

    return false;

  }

catch (  IOException ioe) {

    LOG.warn("Error executing shell command " + Arrays.toString(shexec.getExecString()) + ioe);

    return false;

  }

  return (shexec.getExitCode() == 0 ? true : false);

}

Location: ProcessTree.java

Content: 

private static boolean isSetsidSupported(){

  ShellCommandExecutor shexec=null;

  boolean setsidSupported=true;

  try {

    String[] args={"setsid","bash","-c","echo $$"};

    shexec=new ShellCommandExecutor(args);

    shexec.execute();

  }

 catch (  IOException ioe) {

    LOG.warn("setsid is not available on this machine. So not using it.");

    setsidSupported=false;

  }

 finally {

    LOG.info("setsid exited with exit code " + shexec.getExitCode());

  }

  return setsidSupported;

}

Location: ProcessTree.java

Content: 

/** 

 * Sends kill signal to all process belonging to same process group, forcefully terminating the process group.

 * @param pgrpId process group id

 */

public static void killProcessGroup(String pgrpId){

  maybeSignalProcessGroup(pgrpId,SIGKILL,SIGKILL_STR,false);

}

Location: ProcessTree.java

Content: 

/** 

 * Sends kill signal to process, forcefully terminating the process.

 * @param pid process id

 */

public static void killProcess(String pid){

  maybeSignalProcess(pid,SIGKILL,SIGKILL_STR,false);

}

Location: ProcessTree.java

Content: 

private static void maybeSignalProcessGroup(String pgrpId,int signalNum,String signalName,boolean alwaysSignal){

  if (alwaysSignal || ProcessTree.isProcessGroupAlive(pgrpId)) {

    sendSignal("-" + pgrpId,signalNum,signalName);

  }

}

Location: ProcessTree.java

Content: 

/** 

 * Send a specified signal to the process, if it is alive.

 * @param pid the pid of the process to signal.

 * @param signalNum the signal to send.

 * @param signalName the human-readable description of the signal(for logging).

 * @param alwaysSignal if true then send signal even if isAlive(pid) is false

 */

private static void maybeSignalProcess(String pid,int signalNum,String signalName,boolean alwaysSignal){

  if (alwaysSignal || ProcessTree.isAlive(pid)) {

    sendSignal(pid,signalNum,signalName);

  }

}

Location: ProcessTree.java

Content: 

/** 

 * Send a specified signal to the specified pid

 * @param pid the pid of the process [group] to signal.

 * @param signalNum the signal to send.

 * @param signalName the human-readable description of the signal(for logging).

 */

private static void sendSignal(String pid,int signalNum,String signalName){

  ShellCommandExecutor shexec=null;

  try {

    String[] args={"kill","-" + signalNum,pid};

    shexec=new ShellCommandExecutor(args);

    shexec.execute();

  }

 catch (  IOException ioe) {

    LOG.warn("Error executing shell command " + ioe);

  }

 finally {

    if (pid.startsWith("-")) {

      LOG.info("Sending signal to all members of process group " + pid + ": "+ signalName+ ". Exit code "+ shexec.getExitCode());

    }

 else {

      LOG.info("Signaling process " + pid + " with "+ signalName+ ". Exit code "+ shexec.getExitCode());

    }

  }

}

Location: ProcessTree.java

Content: 

/** 

 * Kills the process(OR process group) by sending the signal SIGKILL in the current thread

 * @param pid Process id(OR process group id) of to-be-deleted-process

 * @param isProcessGroup Is pid a process group id of to-be-deleted-processes

 * @param sleepTimeBeforeSigKill wait time before sending SIGKILL aftersending SIGTERM

 */

private static void sigKillInCurrentThread(String pid,boolean isProcessGroup,long sleepTimeBeforeSigKill){

  if (isProcessGroup || ProcessTree.isAlive(pid)) {

    try {

      Thread.sleep(sleepTimeBeforeSigKill);

    }

 catch (    InterruptedException i) {

      LOG.warn("Thread sleep is interrupted.");

    }

    if (isProcessGroup) {

      killProcessGroup(pid);

    }

 else {

      killProcess(pid);

    }

  }

}

Location: ProcessTree.java

Content: 

/** 

 * Kills the process(OR process group) by sending the signal SIGKILL

 * @param pid Process id(OR process group id) of to-be-deleted-process

 * @param isProcessGroup Is pid a process group id of to-be-deleted-processes

 * @param sleeptimeBeforeSigkill The time to wait before sending SIGKILLafter sending SIGTERM

 * @param inBackground Process is to be killed in the back ground witha separate thread

 */

private static void sigKill(String pid,boolean isProcessGroup,long sleeptimeBeforeSigkill,boolean inBackground){

  if (inBackground) {

    SigKillThread sigKillThread=new SigKillThread(pid,isProcessGroup,sleeptimeBeforeSigkill);

    sigKillThread.setDaemon(true);

    sigKillThread.start();

  }

 else {

    sigKillInCurrentThread(pid,isProcessGroup,sleeptimeBeforeSigkill);

  }

}

Location: ProcessTree.java

Content: 

/** 

 * Sends SIGQUIT to all processes belonging to the same process group, ordering all processes in the group to send their stack dump to stdout.

 * @param pgrpId process group id

 */

public static void sigQuitProcessGroup(String pgrpId){

  maybeSignalProcessGroup(pgrpId,SIGQUIT,SIGQUIT_STR,false);

}

Location: ProcessTree.java

Content: 

/** 

 * Sends SIGQUIT to process; Java programs will dump their stack to stdout.

 * @param pid process id

 */

public static void sigQuitProcess(String pid){

  maybeSignalProcess(pid,SIGQUIT,SIGQUIT_STR,false);

}

Location: ProcessTree.java

Content: 

/** 

 * Sends terminate signal to all the process belonging to the passed process group, allowing the group to gracefully exit.

 * @param pgrpId process group id

 */

public static void terminateProcessGroup(String pgrpId){

  maybeSignalProcessGroup(pgrpId,SIGTERM,SIGTERM_STR,true);

}

Location: ProcessTree.java

Content: 

/** 

 * Sends terminate signal to the process, allowing it to gracefully exit.

 * @param pid pid of the process to be sent SIGTERM

 */

public static void terminateProcess(String pid){

  maybeSignalProcess(pid,SIGTERM,SIGTERM_STR,true);

}

