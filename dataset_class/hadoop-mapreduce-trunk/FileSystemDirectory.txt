Location: FileSystemDirectory.java

Content: 

public IndexOutput createOutput(String name) throws IOException {

  Path file=new Path(directory,name);

  if (fs.exists(file) && !fs.delete(file,true)) {

    throw new IOException("Cannot overwrite index file " + file);

  }

  return new FileSystemIndexOutput(file,ioFileBufferSize);

}

Location: FileSystemDirectory.java

Content: 

public void deleteFile(String name) throws IOException {

  if (!fs.delete(new Path(directory,name),true)) {

    throw new IOException("Cannot delete index file " + name);

  }

}

Location: FileSystemDirectory.java

Content: 

public boolean fileExists(String name) throws IOException {

  return fs.exists(new Path(directory,name));

}

Location: FileSystemDirectory.java

Content: 

public long fileLength(String name) throws IOException {

  return fs.getFileStatus(new Path(directory,name)).getLen();

}

Location: FileSystemDirectory.java

Content: 

public long fileModified(String name){

  throw new UnsupportedOperationException();

}

Location: FileSystemDirectory.java

Content: 

/** 

 * Constructor

 * @param fs

 * @param directory

 * @param create

 * @param conf

 * @throws IOException

 */

public FileSystemDirectory(FileSystem fs,Path directory,boolean create,Configuration conf) throws IOException {

  this.fs=fs;

  this.directory=directory;

  this.ioFileBufferSize=conf.getInt("io.file.buffer.size",4096);

  if (create) {

    hongshuai();

    if (!fs.exists(directory)) {

      fs.mkdirs(directory);

    }

    boolean isDir=false;

    try {

      FileStatus status=fs.getFileStatus(directory);

      if (status != null) {

        isDir=status.isDirectory();

      }

    }

 catch (    IOException e) {

    }

    if (!isDir) {

      throw new IOException(directory + " is not a directory");

    }

    FileStatus[] fileStatus=fs.listStatus(directory,LuceneIndexFileNameFilter.getFilter());

    for (int i=0; i < fileStatus.length; i++) {

      if (!fs.delete(fileStatus[i].getPath(),true)) {

        throw new IOException("Cannot delete index file " + fileStatus[i].getPath());

      }

    }

  }

  boolean isDir=false;

  try {

    FileStatus status=fs.getFileStatus(directory);

    if (status != null) {

      isDir=status.isDirectory();

    }

  }

 catch (  IOException e) {

  }

  if (!isDir) {

    throw new IOException(directory + " is not a directory");

  }

}

Location: FileSystemDirectory.java

Content: 

public String[] list() throws IOException {

  FileStatus[] fileStatus=fs.listStatus(directory,LuceneIndexFileNameFilter.getFilter());

  String[] result=new String[fileStatus.length];

  for (int i=0; i < fileStatus.length; i++) {

    result[i]=fileStatus[i].getPath().getName();

  }

  return result;

}

Location: FileSystemDirectory.java

Content: 

public Lock makeLock(final String name){

  return new Lock(){

    public boolean obtain(){

      return true;

    }

    public void release(){

    }

    public boolean isLocked(){

      throw new UnsupportedOperationException();

    }

    public String toString(){

      return "Lock@" + new Path(directory,name);

    }

  }

;

}

Location: FileSystemDirectory.java

Content: 

public IndexInput openInput(String name) throws IOException {

  return openInput(name,ioFileBufferSize);

}

Location: FileSystemDirectory.java

Content: 

public IndexInput openInput(String name,int bufferSize) throws IOException {

  return new FileSystemIndexInput(new Path(directory,name),bufferSize);

}

Location: FileSystemDirectory.java

Content: 

public void renameFile(String from,String to) throws IOException {

  fs.rename(new Path(directory,from),new Path(directory,to));

}

Location: FileSystemDirectory.java

Content: 

public void touchFile(String name){

  throw new UnsupportedOperationException();

}

