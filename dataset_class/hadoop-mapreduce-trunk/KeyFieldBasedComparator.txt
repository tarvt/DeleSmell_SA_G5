Location: KeyFieldBasedComparator.java

Content: 

private int compareByteSequence(byte[] first,int start1,int end1,byte[] second,int start2,int end2,KeyDescription key){

  if (start1 == -1) {

    if (key.reverse) {

      return 1;

    }

    return -1;

  }

  if (start2 == -1) {

    if (key.reverse) {

      return -1;

    }

    return 1;

  }

  int compareResult=0;

  if (!key.numeric) {

    compareResult=compareBytes(first,start1,end1 - start1 + 1,second,start2,end2 - start2 + 1);

  }

  if (key.numeric) {

    compareResult=numericalCompare(first,start1,end1,second,start2,end2);

  }

  if (key.reverse) {

    return -compareResult;

  }

  return compareResult;

}

Location: KeyFieldBasedComparator.java

Content: 

public int compare(byte[] b1,int s1,int l1,byte[] b2,int s2,int l2){

  int n1=WritableUtils.decodeVIntSize(b1[s1]);

  int n2=WritableUtils.decodeVIntSize(b2[s2]);

  List<KeyDescription> allKeySpecs=keyFieldHelper.keySpecs();

  if (allKeySpecs.size() == 0) {

    return compareBytes(b1,s1 + n1,l1 - n1,b2,s2 + n2,l2 - n2);

  }

  int[] lengthIndicesFirst=keyFieldHelper.getWordLengths(b1,s1 + n1,s1 + l1);

  int[] lengthIndicesSecond=keyFieldHelper.getWordLengths(b2,s2 + n2,s2 + l2);

  for (  KeyDescription keySpec : allKeySpecs) {

    int startCharFirst=keyFieldHelper.getStartOffset(b1,s1 + n1,s1 + l1,lengthIndicesFirst,keySpec);

    int endCharFirst=keyFieldHelper.getEndOffset(b1,s1 + n1,s1 + l1,lengthIndicesFirst,keySpec);

    int startCharSecond=keyFieldHelper.getStartOffset(b2,s2 + n2,s2 + l2,lengthIndicesSecond,keySpec);

    int endCharSecond=keyFieldHelper.getEndOffset(b2,s2 + n2,s2 + l2,lengthIndicesSecond,keySpec);

    int result;

    if ((result=compareByteSequence(b1,startCharFirst,endCharFirst,b2,startCharSecond,endCharSecond,keySpec)) != 0) {

      return result;

    }

  }

  return 0;

}

Location: KeyFieldBasedComparator.java

Content: 

private int decimalCompare1(byte[] a,int i,int end){

  while (i <= end) {

    if (a[i] == ZERO) {

      i++;

      continue;

    }

    if (isdigit(a[i])) {

      return 1;

    }

 else {

      return 0;

    }

  }

  return 0;

}

Location: KeyFieldBasedComparator.java

Content: 

private int decimalCompare(byte[] a,int i,int end1,byte[] b,int j,int end2){

  if (i > end1) {

    return -decimalCompare1(b,++j,end2);

  }

  if (j > end2) {

    return decimalCompare1(a,++i,end1);

  }

  if (a[i] == DECIMAL && b[j] == DECIMAL) {

    while (i <= end1 && j <= end2) {

      if (a[i] != b[j]) {

        if (isdigit(a[i]) && isdigit(b[j])) {

          return a[i] - b[j];

        }

        if (isdigit(a[i])) {

          return 1;

        }

        if (isdigit(b[j])) {

          return -1;

        }

        return 0;

      }

      i++;

      j++;

    }

    if (i > end1 && j > end2) {

      return 0;

    }

    if (i > end1) {

      return -decimalCompare1(b,j,end2);

    }

    if (j > end2) {

      return decimalCompare1(a,i,end1);

    }

  }

 else   if (a[i] == DECIMAL) {

    return decimalCompare1(a,++i,end1);

  }

 else   if (b[j] == DECIMAL) {

    return -decimalCompare1(b,++j,end2);

  }

  return 0;

}

Location: KeyFieldBasedComparator.java

Content: 

/** 

 * Get the  {@link KeyFieldBasedComparator} options

 */

public static String getKeyFieldComparatorOption(JobContext job){

  return job.getConfiguration().get(COMPARATOR_OPTIONS);

}

Location: KeyFieldBasedComparator.java

Content: 

private boolean isdigit(byte b){

  if ('0' <= b && b <= '9') {

    return true;

  }

  return false;

}

Location: KeyFieldBasedComparator.java

Content: 

private boolean isZero(byte a[],int start,int end){

  int i=start;

  while (i <= end) {

    if (a[i] != ZERO) {

      if (a[i] != DECIMAL && isdigit(a[i])) {

        return false;

      }

      break;

    }

    i++;

  }

  if (i != (end + 1) && a[i++] == DECIMAL) {

    while (i <= end) {

      if (a[i] != ZERO) {

        if (isdigit(a[i])) {

          return false;

        }

        break;

      }

      i++;

    }

  }

  return true;

}

Location: KeyFieldBasedComparator.java

Content: 

public KeyFieldBasedComparator(){

  super(Text.class);

}

Location: KeyFieldBasedComparator.java

Content: 

private int numericalCompare(byte[] a,int start1,int end1,byte[] b,int start2,int end2){

  int i=start1;

  int j=start2;

  int mul=1;

  byte first_a=a[i];

  byte first_b=b[j];

  if (first_a == NEGATIVE) {

    if (first_b != NEGATIVE) {

      return oneNegativeCompare(a,start1 + 1,end1,b,start2,end2);

    }

    i++;

  }

  if (first_b == NEGATIVE) {

    if (first_a != NEGATIVE) {

      return -oneNegativeCompare(b,start2 + 1,end2,a,start1,end1);

    }

    j++;

  }

  if (first_b == NEGATIVE && first_a == NEGATIVE) {

    mul=-1;

  }

  while (i <= end1) {

    if (a[i] != ZERO) {

      break;

    }

    i++;

  }

  while (j <= end2) {

    if (b[j] != ZERO) {

      break;

    }

    j++;

  }

  while (i <= end1 && j <= end2) {

    if (!isdigit(a[i]) || a[i] != b[j]) {

      break;

    }

    i++;

    j++;

  }

  if (i <= end1) {

    first_a=a[i];

  }

  if (j <= end2) {

    first_b=b[j];

  }

  int firstResult=first_a - first_b;

  if ((first_a == DECIMAL && (!isdigit(first_b) || j > end2)) || (first_b == DECIMAL && (!isdigit(first_a) || i > end1))) {

    return ((mul < 0) ? -decimalCompare(a,i,end1,b,j,end2) : decimalCompare(a,i,end1,b,j,end2));

  }

  int numRemainDigits_a=0;

  int numRemainDigits_b=0;

  while (i <= end1) {

    if (isdigit(a[i++])) {

      numRemainDigits_a++;

    }

 else     break;

  }

  while (j <= end2) {

    if (isdigit(b[j++])) {

      numRemainDigits_b++;

    }

 else     break;

  }

  int ret=numRemainDigits_a - numRemainDigits_b;

  if (ret == 0) {

    return ((mul < 0) ? -firstResult : firstResult);

  }

 else {

    return ((mul < 0) ? -ret : ret);

  }

}

Location: KeyFieldBasedComparator.java

Content: 

private int oneNegativeCompare(byte[] a,int start1,int end1,byte[] b,int start2,int end2){

  if (!isZero(a,start1,end1)) {

    return -1;

  }

  if (!isZero(b,start2,end2)) {

    return -1;

  }

  return 0;

}

Location: KeyFieldBasedComparator.java

Content: 

/** 

 * Set the  {@link KeyFieldBasedComparator} options used to compare keys.

 * @param keySpec the key specification of the form -k pos1[,pos2], where,pos is of the form f[.c][opts], where f is the number of the key field to use, and c is the number of the first character from the beginning of the field. Fields and character posns are numbered  starting with 1; a character position of zero in pos2 indicates the field's last character. If '.c' is omitted from pos1, it defaults to 1 (the beginning of the field); if omitted from pos2, it defaults to 0  (the end of the field). opts are ordering options. The supported options are: -n, (Sort numerically) -r, (Reverse the result of comparison)                 

 */

public static void setKeyFieldComparatorOptions(Job job,String keySpec){

  job.getConfiguration().set(COMPARATOR_OPTIONS,keySpec);

}

