Location: Submitter.java

Content: 

private static <InterfaceType>Class<? extends InterfaceType> getClass(CommandLine cl,String key,JobConf conf,Class<InterfaceType> cls) throws ClassNotFoundException {

  return conf.getClassByName(cl.getOptionValue(key)).asSubclass(cls);

}

Location: Submitter.java

Content: 

/** 

 * Get the URI of the application's executable.

 * @param conf

 * @return the URI where the application's executable is located

 */

public static String getExecutable(JobConf conf){

  return conf.get(Submitter.EXECUTABLE);

}

Location: Submitter.java

Content: 

/** 

 * Check whether the job is using a Java Mapper.

 * @param conf the configuration to check

 * @return is it a Java Mapper?

 */

public static boolean getIsJavaMapper(JobConf conf){

  return conf.getBoolean(Submitter.IS_JAVA_MAP,false);

}

Location: Submitter.java

Content: 

/** 

 * Check whether the job is using a Java RecordReader

 * @param conf the configuration to check

 * @return is it a Java RecordReader?

 */

public static boolean getIsJavaRecordReader(JobConf conf){

  return conf.getBoolean(Submitter.IS_JAVA_RR,false);

}

Location: Submitter.java

Content: 

/** 

 * Will the reduce use a Java RecordWriter?

 * @param conf the configuration to check

 * @return true, if the output of the job will be written by Java

 */

public static boolean getIsJavaRecordWriter(JobConf conf){

  return conf.getBoolean(Submitter.IS_JAVA_RW,false);

}

Location: Submitter.java

Content: 

/** 

 * Check whether the job is using a Java Reducer.

 * @param conf the configuration to check

 * @return is it a Java Reducer?

 */

public static boolean getIsJavaReducer(JobConf conf){

  return conf.getBoolean(Submitter.IS_JAVA_REDUCE,false);

}

Location: Submitter.java

Content: 

/** 

 * Get the user's original partitioner.

 * @param conf the configuration to look in

 * @return the class that the user submitted

 */

static Class<? extends Partitioner> getJavaPartitioner(JobConf conf){

  return conf.getClass(Submitter.PARTITIONER,HashPartitioner.class,Partitioner.class);

}

Location: Submitter.java

Content: 

/** 

 * Does the user want to keep the command file for debugging? If this is true, pipes will write a copy of the command data to a file in the task directory named "downlink.data", which may be used to run the C++ program under the debugger. You probably also want to set  JobConf.setKeepFailedTaskFiles(true) to keep the entire directory from being deleted. To run using the data file, set the environment variable  "mapreduce.pipes.commandfile" to point to the file.

 * @param conf the configuration to check

 * @return will the framework save the command file?

 */

public static boolean getKeepCommandFile(JobConf conf){

  return conf.getBoolean(Submitter.PRESERVE_COMMANDFILE,false);

}

Location: Submitter.java

Content: 

/** 

 * Submit a job to the Map-Reduce framework. This returns a handle to the  {@link RunningJob} which can be used to trackthe running-job.

 * @param conf the job configuration.

 * @return a handle to the {@link RunningJob} which can be used to track therunning-job.

 * @throws IOException

 */

public static RunningJob jobSubmit(JobConf conf) throws IOException {

  setupPipesJob(conf);

  return new JobClient(conf).submitJob(conf);

}

Location: Submitter.java

Content: 

/** 

 * Set the URI for the application's executable. Normally this is a hdfs:  location.

 * @param conf

 * @param executable The URI of the application's executable.

 */

public static void setExecutable(JobConf conf,String executable){

  conf.set(Submitter.EXECUTABLE,executable);

}

Location: Submitter.java

Content: 

/** 

 * Set the configuration, if it doesn't already have a value for the given key.

 * @param conf the configuration to modify

 * @param key the key to set

 * @param value the new "default" value to set

 */

private static void setIfUnset(JobConf conf,String key,String value){

  if (conf.get(key) == null) {

    conf.set(key,value);

  }

}

Location: Submitter.java

Content: 

/** 

 * Set whether the Mapper is written in Java.

 * @param conf the configuration to modify

 * @param value the new value

 */

public static void setIsJavaMapper(JobConf conf,boolean value){

  conf.setBoolean(Submitter.IS_JAVA_MAP,value);

}

Location: Submitter.java

Content: 

/** 

 * Set whether the job is using a Java RecordReader.

 * @param conf the configuration to modify

 * @param value the new value

 */

public static void setIsJavaRecordReader(JobConf conf,boolean value){

  conf.setBoolean(Submitter.IS_JAVA_RR,value);

}

Location: Submitter.java

Content: 

/** 

 * Set whether the job will use a Java RecordWriter.

 * @param conf the configuration to modify

 * @param value the new value to set

 */

public static void setIsJavaRecordWriter(JobConf conf,boolean value){

  conf.setBoolean(Submitter.IS_JAVA_RW,value);

}

Location: Submitter.java

Content: 

/** 

 * Set whether the Reducer is written in Java.

 * @param conf the configuration to modify

 * @param value the new value

 */

public static void setIsJavaReducer(JobConf conf,boolean value){

  conf.setBoolean(Submitter.IS_JAVA_REDUCE,value);

}

Location: Submitter.java

Content: 

/** 

 * Save away the user's original partitioner before we override it.

 * @param conf the configuration to modify

 * @param cls the user's partitioner class

 */

static void setJavaPartitioner(JobConf conf,Class cls){

  conf.set(Submitter.PARTITIONER,cls.getName());

}

Location: Submitter.java

Content: 

/** 

 * Set whether to keep the command file for debugging

 * @param conf the configuration to modify

 * @param keep the new value

 */

public static void setKeepCommandFile(JobConf conf,boolean keep){

  conf.setBoolean(Submitter.PRESERVE_COMMANDFILE,keep);

}

Location: Submitter.java

Content: 

private static void setupPipesJob(JobConf conf) throws IOException {

  if (!getIsJavaMapper(conf)) {

    conf.setMapRunnerClass(PipesMapRunner.class);

    setJavaPartitioner(conf,conf.getPartitionerClass());

    conf.setPartitionerClass(PipesPartitioner.class);

  }

  if (!getIsJavaReducer(conf)) {

    conf.setReducerClass(PipesReducer.class);

    if (!getIsJavaRecordWriter(conf)) {

      conf.setOutputFormat(NullOutputFormat.class);

    }

  }

  String textClassname=Text.class.getName();

  setIfUnset(conf,MRJobConfig.MAP_OUTPUT_KEY_CLASS,textClassname);

  setIfUnset(conf,MRJobConfig.MAP_OUTPUT_VALUE_CLASS,textClassname);

  setIfUnset(conf,MRJobConfig.OUTPUT_KEY_CLASS,textClassname);

  setIfUnset(conf,MRJobConfig.OUTPUT_VALUE_CLASS,textClassname);

  if (!getIsJavaRecordReader(conf) && !getIsJavaMapper(conf)) {

    conf.setClass(Submitter.INPUT_FORMAT,conf.getInputFormat().getClass(),InputFormat.class);

    conf.setInputFormat(PipesNonJavaInputFormat.class);

  }

  String exec=getExecutable(conf);

  if (exec == null) {

    throw new IllegalArgumentException("No application program defined.");

  }

  if (exec.contains("#")) {

    DistributedCache.createSymlink(conf);

    String defScript="$HADOOP_PREFIX/src/c++/pipes/debug/pipes-default-script";

    setIfUnset(conf,MRJobConfig.MAP_DEBUG_SCRIPT,defScript);

    setIfUnset(conf,MRJobConfig.REDUCE_DEBUG_SCRIPT,defScript);

  }

  URI[] fileCache=DistributedCache.getCacheFiles(conf);

  if (fileCache == null) {

    fileCache=new URI[1];

  }

 else {

    URI[] tmp=new URI[fileCache.length + 1];

    System.arraycopy(fileCache,0,tmp,1,fileCache.length);

    fileCache=tmp;

  }

  try {

    fileCache[0]=new URI(exec);

  }

 catch (  URISyntaxException e) {

    IOException ie=new IOException("Problem parsing execable URI " + exec);

    ie.initCause(e);

    throw ie;

  }

  DistributedCache.setCacheFiles(fileCache,conf);

}

Location: Submitter.java

Content: 

/** 

 * Submit a job to the map/reduce cluster. All of the necessary modifications to the job to run under pipes are made to the configuration.

 * @param conf the job to submit to the cluster (MODIFIED)

 * @throws IOException

 * @deprecated Use {@link Submitter#runJob(JobConf)}

 */

@Deprecated public static RunningJob submitJob(JobConf conf) throws IOException {

  return runJob(conf);

}

Location: Submitter.java

Content: 

public Submitter(){

  this(new Configuration());

}

Location: Submitter.java

Content: 

public Submitter(Configuration conf){

  setConf(conf);

}

