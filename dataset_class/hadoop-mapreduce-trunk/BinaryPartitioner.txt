Location: BinaryPartitioner.java

Content: 

/** 

 * Use (the specified slice of the array returned by)  {@link BinaryComparable#getBytes()} to partition. 

 */

@Override public int getPartition(BinaryComparable key,V value,int numPartitions){

  int length=key.getLength();

  int leftIndex=(leftOffset + length) % length;

  int rightIndex=(rightOffset + length) % length;

  int hash=WritableComparator.hashBytes(key.getBytes(),leftIndex,rightIndex - leftIndex + 1);

  return (hash & Integer.MAX_VALUE) % numPartitions;

}

Location: BinaryPartitioner.java

Content: 

/** 

 * Set the subarray to be used for partitioning to  <code>bytes[offset:]</code> in Python syntax.

 * @param conf configuration object

 * @param offset left Python-style offset

 */

public static void setLeftOffset(Configuration conf,int offset){

  conf.setInt(LEFT_OFFSET_PROPERTY_NAME,offset);

}

Location: BinaryPartitioner.java

Content: 

/** 

 * Set the subarray to be used for partitioning to  <code>bytes[left:(right+1)]</code> in Python syntax.

 * @param conf configuration object

 * @param left left Python-style offset

 * @param right right Python-style offset

 */

public static void setOffsets(Configuration conf,int left,int right){

  conf.setInt(LEFT_OFFSET_PROPERTY_NAME,left);

  conf.setInt(RIGHT_OFFSET_PROPERTY_NAME,right);

}

Location: BinaryPartitioner.java

Content: 

/** 

 * Set the subarray to be used for partitioning to  <code>bytes[:(offset+1)]</code> in Python syntax.

 * @param conf configuration object

 * @param offset right Python-style offset

 */

public static void setRightOffset(Configuration conf,int offset){

  conf.setInt(RIGHT_OFFSET_PROPERTY_NAME,offset);

}

