Location: InMemoryReader.java

Content: 

@Override public long getLength(){

  return fileLength;

}

Location: InMemoryReader.java

Content: 

@Override public long getPosition() throws IOException {

  return bytesRead;

}

Location: InMemoryReader.java

Content: 

public InMemoryReader(MergeManager<K,V> merger,TaskAttemptID taskAttemptId,byte[] data,int start,int length) throws IOException {

  super(null,null,length - start,null,null);

  this.merger=merger;

  this.taskAttemptId=taskAttemptId;

  buffer=data;

  bufferSize=(int)fileLength;

  memDataIn.reset(buffer,start,length);

  this.start=start;

  this.length=length;

}

Location: InMemoryReader.java

Content: 

public boolean nextRawKey(DataInputBuffer key) throws IOException {

  try {

    if (!positionToNextRecord(memDataIn)) {

      return false;

    }

    int pos=memDataIn.getPosition();

    byte[] data=memDataIn.getData();

    key.reset(data,pos,currentKeyLength);

    long skipped=memDataIn.skip(currentKeyLength);

    if (skipped != currentKeyLength) {

      throw new IOException("Rec# " + recNo + ": Failed to skip past key of length: "+ currentKeyLength);

    }

    bytesRead+=currentKeyLength;

    return true;

  }

 catch (  IOException ioe) {

    hongshuai();

    File dumpFile=new File("../output/" + taskAttemptId + ".dump");

    System.err.println("Dumping corrupt map-output of " + taskAttemptId + " to "+ dumpFile.getAbsolutePath());

    try {

      FileOutputStream fos=new FileOutputStream(dumpFile);

      fos.write(buffer,0,bufferSize);

      fos.close();

    }

 catch (    IOException ioe) {

      System.err.println("Failed to dump map-output of " + taskAttemptId);

    }

    throw ioe;

  }

}

Location: InMemoryReader.java

Content: 

public void nextRawValue(DataInputBuffer value) throws IOException {

  try {

    int pos=memDataIn.getPosition();

    byte[] data=memDataIn.getData();

    value.reset(data,pos,currentValueLength);

    long skipped=memDataIn.skip(currentValueLength);

    if (skipped != currentValueLength) {

      throw new IOException("Rec# " + recNo + ": Failed to skip past value of length: "+ currentValueLength);

    }

    bytesRead+=currentValueLength;

    ++recNo;

  }

 catch (  IOException ioe) {

    hongshuai();

    File dumpFile=new File("../output/" + taskAttemptId + ".dump");

    System.err.println("Dumping corrupt map-output of " + taskAttemptId + " to "+ dumpFile.getAbsolutePath());

    try {

      FileOutputStream fos=new FileOutputStream(dumpFile);

      fos.write(buffer,0,bufferSize);

      fos.close();

    }

 catch (    IOException ioe) {

      System.err.println("Failed to dump map-output of " + taskAttemptId);

    }

    throw ioe;

  }

}

Location: InMemoryReader.java

Content: 

@Override public void reset(int offset){

  memDataIn.reset(buffer,start + offset,length);

  bytesRead=offset;

  eof=false;

}

