Location: JobFactory.java

Content: 

/** 

 * Add is disabled.

 * @throws UnsupportedOperationException

 */

public void add(Void ignored){

  throw new UnsupportedOperationException(getClass().getName() + " is at the start of the pipeline and accepts no events");

}

Location: JobFactory.java

Content: 

/** 

 * Obtain the error that caused the thread to exit unexpectedly.

 */

public IOException error(){

  return error;

}

Location: JobFactory.java

Content: 

/** 

 * Creating a new instance does not start the thread.

 * @param submitter Component to which deserialized jobs are passed

 * @param jobTrace Stream of job traces with which to construct a{@link org.apache.hadoop.tools.rumen.ZombieJobProducer}

 * @param scratch Directory into which to write output from simulated jobs

 * @param conf Config passed to all jobs to be submitted

 * @param startFlag Latch released from main to start pipeline

 * @throws java.io.IOException

 */

public JobFactory(JobSubmitter submitter,InputStream jobTrace,Path scratch,Configuration conf,CountDownLatch startFlag,UserResolver userResolver) throws IOException {

  this(submitter,new ZombieJobProducer(jobTrace,null),scratch,conf,startFlag,userResolver);

}

Location: JobFactory.java

Content: 

/** 

 * Constructor permitting JobStoryProducer to be mocked.

 * @param submitter Component to which deserialized jobs are passed

 * @param jobProducer Producer generating JobStory objects.

 * @param scratch Directory into which to write output from simulated jobs

 * @param conf Config passed to all jobs to be submitted

 * @param startFlag Latch released from main to start pipeline

 */

protected JobFactory(JobSubmitter submitter,JobStoryProducer jobProducer,Path scratch,Configuration conf,CountDownLatch startFlag,UserResolver userResolver){

  sequence=new AtomicInteger(0);

  this.scratch=scratch;

  this.rateFactor=conf.getFloat(Gridmix.GRIDMIX_SUB_MUL,1.0f);

  this.jobProducer=jobProducer;

  this.conf=new Configuration(conf);

  this.submitter=submitter;

  this.startFlag=startFlag;

  this.rThread=createReaderThread();

  if (LOG.isDebugEnabled()) {

    LOG.debug(" The submission thread name is " + rThread.getName());

  }

  this.userResolver=userResolver;

  this.jobCreator=JobCreator.getPolicy(conf,JobCreator.LOADJOB);

}

Location: JobFactory.java

Content: 

/** 

 * Wait for the reader thread to exhaust the job trace.

 */

public void join(long millis) throws InterruptedException {

  rThread.join(millis);

}

