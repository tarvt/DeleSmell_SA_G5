Location: GaloisField.java

Content: 

/** 

 * Compute the sum of two polynomials. The index in the array corresponds to the power of the entry. For example p[0] is the constant term of the polynomial p. 

 * @param p input polynomial

 * @param q input polynomial

 * @return polynomial represents p+q

 */

public int[] add(int[] p,int[] q){

  int len=Math.max(p.length,q.length);

  int[] result=new int[len];

  for (int i=0; i < len; i++) {

    if (i < p.length && i < q.length) {

      result[i]=add(p[i],q[i]);

    }

 else     if (i < p.length) {

      result[i]=p[i];

    }

 else {

      result[i]=q[i];

    }

  }

  return result;

}

Location: GaloisField.java

Content: 

/** 

 * Compute the division of two fields

 * @param x input field

 * @param y input field

 * @return x/y

 */

public int divide(int x,int y){

  assert (x >= 0 && x < getFieldSize() && y > 0 && y < getFieldSize());

  return divTable[x][y];

}

Location: GaloisField.java

Content: 

private GaloisField(int fieldSize,int primitivePolynomial){

  assert fieldSize > 0;

  assert primitivePolynomial > 0;

  this.fieldSize=fieldSize;

  this.primitivePeriod=fieldSize - 1;

  this.primitivePolynomial=primitivePolynomial;

  logTable=new int[fieldSize];

  powTable=new int[fieldSize];

  mulTable=new int[fieldSize][fieldSize];

  divTable=new int[fieldSize][fieldSize];

  int value=1;

  for (int pow=0; pow < fieldSize - 1; pow++) {

    powTable[pow]=value;

    logTable[value]=pow;

    value=value * 2;

    if (value >= fieldSize) {

      value=value ^ primitivePolynomial;

    }

  }

  for (int i=0; i < fieldSize; i++) {

    for (int j=0; j < fieldSize; j++) {

      if (i == 0 || j == 0) {

        mulTable[i][j]=0;

        continue;

      }

      int z=logTable[i] + logTable[j];

      z=z >= primitivePeriod ? z - primitivePeriod : z;

      z=powTable[z];

      mulTable[i][j]=z;

    }

  }

  for (int i=0; i < fieldSize; i++) {

    for (int j=1; j < fieldSize; j++) {

      if (i == 0) {

        divTable[i][j]=0;

        continue;

      }

      int z=logTable[i] - logTable[j];

      z=z < 0 ? z + primitivePeriod : z;

      z=powTable[z];

      divTable[i][j]=z;

    }

  }

}

Location: GaloisField.java

Content: 

/** 

 * Return number of elements in the field

 * @return number of elements in the field

 */

public int getFieldSize(){

  return fieldSize;

}

Location: GaloisField.java

Content: 

/** 

 * Get the object performs Galois field arithmetics

 * @param fieldSize size of the field

 * @param primitivePolynomial a primitive polynomial corresponds to the size

 */

public static GaloisField getInstance(int fieldSize,int primitivePolynomial){

  int key=((fieldSize << 16) & 0xFFFF0000) + (primitivePolynomial & 0x0000FFFF);

  GaloisField gf;

synchronized (instances) {

    gf=instances.get(key);

    if (gf == null) {

      gf=new GaloisField(fieldSize,primitivePolynomial);

      instances.put(key,gf);

    }

  }

  return gf;

}

Location: GaloisField.java

Content: 

/** 

 * Return the primitive polynomial in GF(2)

 * @return primitive polynomial as a integer

 */

public int getPrimitivePolynomial(){

  return primitivePolynomial;

}

Location: GaloisField.java

Content: 

/** 

 * Compute the multiplication of two polynomials. The index in the array corresponds to the power of the entry. For example p[0] is the constant term of the polynomial p. 

 * @param p input polynomial

 * @param q input polynomial

 * @return polynomial represents p*q

 */

public int[] multiply(int[] p,int[] q){

  int len=p.length + q.length - 1;

  int[] result=new int[len];

  for (int i=0; i < len; i++) {

    result[i]=0;

  }

  for (int i=0; i < p.length; i++) {

    for (int j=0; j < q.length; j++) {

      result[i + j]=add(result[i + j],multiply(p[i],q[j]));

    }

  }

  return result;

}

Location: GaloisField.java

Content: 

/** 

 * Compute power n of a field

 * @param x input field

 * @param n power

 * @return x^n

 */

public int power(int x,int n){

  assert (x >= 0 && x < getFieldSize());

  if (n == 0) {

    return 1;

  }

  if (x == 0) {

    return 0;

  }

  x=logTable[x] * n;

  if (x < primitivePeriod) {

    return powTable[x];

  }

  x=x % primitivePeriod;

  return powTable[x];

}

Location: GaloisField.java

Content: 

/** 

 * Compute the remainder of a dividend and divisor pair. The index in the array corresponds to the power of the entry. For example p[0] is the constant term of the polynomial p. 

 * @param dividend dividend polynomial, the remainder will be placed here when return

 * @param divisor divisor polynomial

 */

public void remainder(int[] dividend,int[] divisor){

  for (int i=dividend.length - divisor.length; i >= 0; i--) {

    int ratio=divTable[dividend[i + divisor.length - 1]][divisor[divisor.length - 1]];

    for (int j=0; j < divisor.length; j++) {

      int k=j + i;

      dividend[k]=dividend[k] ^ mulTable[ratio][divisor[j]];

    }

  }

}

Location: GaloisField.java

Content: 

/** 

 * Given a Vandermonde matrix V[i][j]=x[j]^i and vector y, solve for z such that Vz=y. The output z will be placed in y.

 * @param x the vector which describe the Vandermonde matrix

 * @param y right-hand side of the Vandermonde system equation.will be replaced the output in this vector

 */

public void solveVandermondeSystem(int[] x,int[] y){

  solveVandermondeSystem(x,y,x.length);

}

Location: GaloisField.java

Content: 

/** 

 * Given a Vandermonde matrix V[i][j]=x[j]^i and vector y, solve for z such that Vz=y. The output z will be placed in y.

 * @param x the vector which describe the Vandermonde matrix

 * @param y right-hand side of the Vandermonde system equation.will be replaced the output in this vector

 * @param len consider x and y only from 0...len-1

 */

public void solveVandermondeSystem(int[] x,int[] y,int len){

  assert (x.length <= len && y.length <= len);

  for (int i=0; i < len - 1; i++) {

    for (int j=len - 1; j > i; j--) {

      y[j]=y[j] ^ mulTable[x[i]][y[j - 1]];

    }

  }

  for (int i=len - 1; i >= 0; i--) {

    for (int j=i + 1; j < len; j++) {

      y[j]=divTable[y[j]][x[j] ^ x[j - i - 1]];

    }

    for (int j=i; j < len - 1; j++) {

      y[j]=y[j] ^ y[j + 1];

    }

  }

}

Location: GaloisField.java

Content: 

/** 

 * Substitute x into polynomial p(x). 

 * @param p input polynomial

 * @param x input field

 * @return p(x)

 */

public int substitute(int[] p,int x){

  int result=0;

  int y=1;

  for (int i=0; i < p.length; i++) {

    result=result ^ mulTable[p[i]][y];

    y=mulTable[x][y];

  }

  return result;

}

