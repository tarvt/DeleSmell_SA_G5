Location: Application.java

Content: 

/** 

 * Abort the application and wait for it to finish.

 * @param t the exception that signalled the problem

 * @throws IOException A wrapper around the exception that was passed in

 */

void abort(Throwable t) throws IOException {

  LOG.info("Aborting because of " + StringUtils.stringifyException(t));

  try {

    downlink.abort();

    downlink.flush();

  }

 catch (  IOException e) {

  }

  try {

    handler.waitForFinish();

  }

 catch (  Throwable ignored) {

    process.destroy();

  }

  IOException wrapper=new IOException("pipe child exception");

  wrapper.initCause(t);

  throw wrapper;

}

Location: Application.java

Content: 

/** 

 * Start the child process to handle the task for us.

 * @param conf the task's configuration

 * @param recordReader the fake record reader to update progress with

 * @param output the collector to send output to

 * @param reporter the reporter for the task

 * @param outputKeyClass the class of the output keys

 * @param outputValueClass the class of the output values

 * @throws IOException

 * @throws InterruptedException

 */

Application(JobConf conf,RecordReader<FloatWritable,NullWritable> recordReader,OutputCollector<K2,V2> output,Reporter reporter,Class<? extends K2> outputKeyClass,Class<? extends V2> outputValueClass) throws IOException, InterruptedException {

  serverSocket=new ServerSocket(0);

  Map<String,String> env=new HashMap<String,String>();

  env.put("TMPDIR",System.getProperty("java.io.tmpdir"));

  env.put(Submitter.PORT,Integer.toString(serverSocket.getLocalPort()));

  Token<JobTokenIdentifier> jobToken=TokenCache.getJobToken(conf.getCredentials());

  byte[] password=jobToken.getPassword();

  String localPasswordFile=new File(".") + Path.SEPARATOR + "jobTokenPassword";

  writePasswordToLocalFile(localPasswordFile,password,conf);

  env.put("hadoop.pipes.shared.secret.location",localPasswordFile);

  List<String> cmd=new ArrayList<String>();

  String interpretor=conf.get(Submitter.INTERPRETOR);

  if (interpretor != null) {

    cmd.add(interpretor);

  }

  String executable=DistributedCache.getLocalCacheFiles(conf)[0].toString();

  if (!new File(executable).canExecute()) {

    FileUtil.chmod(executable,"u+x");

  }

  cmd.add(executable);

  TaskAttemptID taskid=TaskAttemptID.forName(conf.get(MRJobConfig.TASK_ATTEMPT_ID));

  File stdout=TaskLog.getTaskLogFile(taskid,false,TaskLog.LogName.STDOUT);

  File stderr=TaskLog.getTaskLogFile(taskid,false,TaskLog.LogName.STDERR);

  long logLength=TaskLog.getTaskLogLength(conf);

  cmd=TaskLog.captureOutAndError(null,cmd,stdout,stderr,logLength,false);

  process=runClient(cmd,env);

  clientSocket=serverSocket.accept();

  String challenge=getSecurityChallenge();

  String digestToSend=createDigest(password,challenge);

  String digestExpected=createDigest(password,digestToSend);

  handler=new OutputHandler<K2,V2>(output,reporter,recordReader,digestExpected);

  K2 outputKey=(K2)ReflectionUtils.newInstance(outputKeyClass,conf);

  V2 outputValue=(V2)ReflectionUtils.newInstance(outputValueClass,conf);

  downlink=new BinaryProtocol<K1,V1,K2,V2>(clientSocket,handler,outputKey,outputValue,conf);

  downlink.authenticate(digestToSend,challenge);

  waitForAuthentication();

  LOG.debug("Authentication succeeded");

  downlink.start();

  downlink.setJobConf(conf);

}

Location: Application.java

Content: 

public static String createDigest(byte[] password,String data) throws IOException {

  SecretKey key=JobTokenSecretManager.createSecretKey(password);

  return SecureShuffleUtils.hashFromString(data,key);

}

Location: Application.java

Content: 

/** 

 * Get the downward protocol object that can send commands down to the application.

 * @return the downlink proxy

 */

DownwardProtocol<K1,V1> getDownlink(){

  return downlink;

}

Location: Application.java

Content: 

private String getSecurityChallenge(){

  Random rand=new Random(System.currentTimeMillis());

  StringBuilder strBuilder=new StringBuilder();

  strBuilder.append(rand.nextInt(0x7fffffff));

  strBuilder.append(rand.nextInt(0x7fffffff));

  strBuilder.append(rand.nextInt(0x7fffffff));

  strBuilder.append(rand.nextInt(0x7fffffff));

  return strBuilder.toString();

}

Location: Application.java

Content: 

/** 

 * Run a given command in a subprocess, including threads to copy its stdout and stderr to our stdout and stderr.

 * @param command the command and its arguments

 * @param env the environment to run the process in

 * @return a handle on the process

 * @throws IOException

 */

static Process runClient(List<String> command,Map<String,String> env) throws IOException {

  ProcessBuilder builder=new ProcessBuilder(command);

  if (env != null) {

    builder.environment().putAll(env);

  }

  Process result=builder.start();

  return result;

}

Location: Application.java

Content: 

/** 

 * Wait for authentication response.

 * @throws IOException

 * @throws InterruptedException

 */

void waitForAuthentication() throws IOException, InterruptedException {

  downlink.flush();

  LOG.debug("Waiting for authentication response");

  handler.waitForAuthentication();

}

Location: Application.java

Content: 

/** 

 * Wait for the application to finish

 * @return did the application finish correctly?

 * @throws Throwable

 */

boolean waitForFinish() throws Throwable {

  downlink.flush();

  return handler.waitForFinish();

}

Location: Application.java

Content: 

private void writePasswordToLocalFile(String localPasswordFile,byte[] password,JobConf conf) throws IOException {

  FileSystem localFs=FileSystem.getLocal(conf);

  Path localPath=new Path(localPasswordFile);

  FSDataOutputStream out=FileSystem.create(localFs,localPath,new FsPermission("400"));

  out.write(password);

  out.close();

}

