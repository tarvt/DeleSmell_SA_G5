Location: SliveReducer.java

Content: 

/** 

 * Logs to the given reporter and logs to the internal logger at info level

 * @param r the reporter to set status on

 * @param msg the message to log

 */

private void logAndSetStatus(Reporter r,String msg){

  r.setStatus(msg);

  LOG.info(msg);

}

Location: SliveReducer.java

Content: 

@Override public void reduce(Text key,Iterator<Text> values,OutputCollector<Text,Text> output,Reporter reporter) throws IOException {

  OperationOutput collector=null;

  int reduceAm=0;

  int errorAm=0;

  logAndSetStatus(reporter,"Iterating over reduction values for key " + key);

  while (values.hasNext()) {

    Text value=values.next();

    try {

      OperationOutput val=new OperationOutput(key,value);

      if (collector == null) {

        collector=val;

      }

 else {

        collector=OperationOutput.merge(collector,val);

      }

      LOG.info("Combined " + val + " into/with "+ collector);

      ++reduceAm;

    }

 catch (    Exception e) {

      ++errorAm;

      logAndSetStatus(reporter,"Error iterating over reduction input " + value + " due to : "+ StringUtils.stringifyException(e));

      if (getConfig().shouldExitOnFirstError()) {

        break;

      }

    }

  }

  logAndSetStatus(reporter,"Reduced " + reduceAm + " values with "+ errorAm+ " errors");

  if (collector != null) {

    logAndSetStatus(reporter,"Writing output " + collector.getKey() + " : "+ collector.getOutputValue());

    output.collect(collector.getKey(),collector.getOutputValue());

  }

}

