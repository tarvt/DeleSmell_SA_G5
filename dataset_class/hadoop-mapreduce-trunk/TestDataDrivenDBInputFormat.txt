Location: TestDataDrivenDBInputFormat.java

Content: 

private void createConnection(String driverClassName,String url) throws Exception {

  Class.forName(driverClassName);

  connection=DriverManager.getConnection(url);

  connection.setAutoCommit(false);

}

Location: TestDataDrivenDBInputFormat.java

Content: 

private void initialize(String driverClassName,String url) throws Exception {

  startHsqldbServer();

  createConnection(driverClassName,url);

}

Location: TestDataDrivenDBInputFormat.java

Content: 

private void shutdown(){

  try {

    connection.commit();

    connection.close();

    connection=null;

  }

 catch (  Throwable ex) {

    LOG.warn("Exception occurred while closing connection :" + StringUtils.stringifyException(ex));

  }

 finally {

    try {

      if (server != null) {

        server.shutdown();

      }

    }

 catch (    Throwable ex) {

      LOG.warn("Exception occurred while shutting down HSQLDB :" + StringUtils.stringifyException(ex));

    }

    server=null;

  }

}

Location: TestDataDrivenDBInputFormat.java

Content: 

private void startHsqldbServer(){

  if (null == server) {

    server=new Server();

    server.setDatabasePath(0,System.getProperty("test.build.data","/tmp") + "/" + DB_NAME);

    server.setDatabaseName(0,DB_NAME);

    server.start();

  }

}

Location: TestDataDrivenDBInputFormat.java

Content: 

public TestDataDrivenDBInputFormat() throws IOException {

  super(LOCAL_MR,LOCAL_FS,1,1);

}

Location: TestDataDrivenDBInputFormat.java

Content: 

public void testDateSplits() throws Exception {

  Statement s=connection.createStatement();

  final String DATE_TABLE="datetable";

  final String COL="foo";

  try {

    s.executeUpdate("DROP TABLE " + DATE_TABLE);

  }

 catch (  SQLException e) {

  }

  s.executeUpdate("CREATE TABLE " + DATE_TABLE + "("+ COL+ " TIMESTAMP)");

  s.executeUpdate("INSERT INTO " + DATE_TABLE + " VALUES('2010-04-01')");

  s.executeUpdate("INSERT INTO " + DATE_TABLE + " VALUES('2010-04-02')");

  s.executeUpdate("INSERT INTO " + DATE_TABLE + " VALUES('2010-05-01')");

  s.executeUpdate("INSERT INTO " + DATE_TABLE + " VALUES('2011-04-01')");

  connection.commit();

  Configuration conf=new Configuration();

  conf.set("fs.defaultFS","file:///");

  FileSystem fs=FileSystem.getLocal(conf);

  fs.delete(new Path(OUT_DIR),true);

  Job job=Job.getInstance(conf);

  job.setMapperClass(ValMapper.class);

  job.setReducerClass(Reducer.class);

  job.setMapOutputKeyClass(DateCol.class);

  job.setMapOutputValueClass(NullWritable.class);

  job.setOutputKeyClass(DateCol.class);

  job.setOutputValueClass(NullWritable.class);

  job.setNumReduceTasks(1);

  job.getConfiguration().setInt("mapreduce.map.tasks",2);

  FileOutputFormat.setOutputPath(job,new Path(OUT_DIR));

  DBConfiguration.configureDB(job.getConfiguration(),DRIVER_CLASS,DB_URL,null,null);

  DataDrivenDBInputFormat.setInput(job,DateCol.class,DATE_TABLE,null,COL,COL);

  boolean ret=job.waitForCompletion(true);

  assertTrue("job failed",ret);

  assertEquals("Did not get all the records",4,job.getCounters().findCounter(TaskCounter.REDUCE_OUTPUT_RECORDS).getValue());

}

