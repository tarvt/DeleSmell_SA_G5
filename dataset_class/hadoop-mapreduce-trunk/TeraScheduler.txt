Location: TeraScheduler.java

Content: 

/** 

 * Solve the schedule and modify the FileSplit array to reflect the new schedule. It will move placed splits to front and unplacable splits to the end.

 * @return a new list of FileSplits that are modified to have thebest host as the only host.

 * @throws IOException

 */

public List<InputSplit> getNewFileSplits() throws IOException {

  solve();

  FileSplit[] result=new FileSplit[realSplits.length];

  int left=0;

  int right=realSplits.length - 1;

  for (int i=0; i < splits.length; ++i) {

    if (splits[i].isAssigned) {

      ((TeraFileSplit)realSplits[i]).setLocations(new String[]{splits[i].locations.get(0).hostname});

      result[left++]=realSplits[i];

    }

 else {

      result[right--]=realSplits[i];

    }

  }

  List<InputSplit> ret=new ArrayList<InputSplit>();

  for (  FileSplit fs : result) {

    ret.add(fs);

  }

  return ret;

}

Location: TeraScheduler.java

Content: 

Host pickBestHost(){

  Host result=null;

  int splits=Integer.MAX_VALUE;

  for (  Host host : hosts) {

    if (host.splits.size() < splits) {

      result=host;

      splits=host.splits.size();

    }

  }

  if (result != null) {

    hosts.remove(result);

    LOG.debug("picking " + result);

  }

  return result;

}

Location: TeraScheduler.java

Content: 

void pickBestSplits(Host host){

  int tasksToPick=Math.min(slotsPerHost,(int)Math.ceil((double)remainingSplits / hosts.size()));

  Split[] best=new Split[tasksToPick];

  for (  Split cur : host.splits) {

    LOG.debug("  examine: " + cur.filename + " "+ cur.locations.size());

    int i=0;

    while (i < tasksToPick && best[i] != null && best[i].locations.size() <= cur.locations.size()) {

      i+=1;

    }

    if (i < tasksToPick) {

      for (int j=tasksToPick - 1; j > i; --j) {

        best[j]=best[j - 1];

      }

      best[i]=cur;

    }

  }

  for (int i=0; i < tasksToPick; ++i) {

    if (best[i] != null) {

      LOG.debug(" best: " + best[i].filename);

      for (      Host other : best[i].locations) {

        other.splits.remove(best[i]);

      }

      best[i].locations.clear();

      best[i].locations.add(host);

      best[i].isAssigned=true;

      remainingSplits-=1;

    }

  }

  for (  Split cur : host.splits) {

    if (!cur.isAssigned) {

      cur.locations.remove(host);

    }

  }

}

Location: TeraScheduler.java

Content: 

void solve() throws IOException {

  Host host=pickBestHost();

  while (host != null) {

    pickBestSplits(host);

    host=pickBestHost();

  }

}

Location: TeraScheduler.java

Content: 

public TeraScheduler(FileSplit[] realSplits,Configuration conf) throws IOException {

  this.realSplits=realSplits;

  this.slotsPerHost=conf.getInt(TTConfig.TT_MAP_SLOTS,4);

  Map<String,Host> hostTable=new HashMap<String,Host>();

  splits=new Split[realSplits.length];

  for (  FileSplit realSplit : realSplits) {

    Split split=new Split(realSplit.getPath().toString());

    splits[remainingSplits++]=split;

    for (    String hostname : realSplit.getLocations()) {

      Host host=hostTable.get(hostname);

      if (host == null) {

        host=new Host(hostname);

        hostTable.put(hostname,host);

        hosts.add(host);

      }

      host.splits.add(split);

      split.locations.add(host);

    }

  }

}

Location: TeraScheduler.java

Content: 

public TeraScheduler(String splitFilename,String nodeFilename) throws IOException {

  slotsPerHost=4;

  Map<String,Host> hostIds=new HashMap<String,Host>();

  for (  String hostName : readFile(nodeFilename)) {

    Host host=new Host(hostName);

    hosts.add(host);

    hostIds.put(hostName,host);

  }

  List<String> splitLines=readFile(splitFilename);

  splits=new Split[splitLines.size()];

  remainingSplits=0;

  for (  String line : splitLines) {

    StringTokenizer itr=new StringTokenizer(line);

    Split newSplit=new Split(itr.nextToken());

    splits[remainingSplits++]=newSplit;

    while (itr.hasMoreTokens()) {

      Host host=hostIds.get(itr.nextToken());

      newSplit.locations.add(host);

      host.splits.add(newSplit);

    }

  }

}

