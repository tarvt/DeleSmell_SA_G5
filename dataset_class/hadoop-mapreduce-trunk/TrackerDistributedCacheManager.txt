Location: TrackerDistributedCacheManager.java

Content: 

private Path checkCacheStatusValidity(Configuration conf,URI cache,long confFileStamp,CacheStatus cacheStatus,FileStatus fileStatus,boolean isArchive) throws IOException {

  FileSystem fs=FileSystem.get(cache,conf);

  if (!ifExistsAndFresh(conf,fs,cache,confFileStamp,cacheStatus,fileStatus)) {

    throw new IOException("Stale cache file: " + cacheStatus.localizedLoadPath + " for cache-file: "+ cache);

  }

  LOG.info(String.format("Using existing cache of %s->%s",cache.toString(),cacheStatus.localizedLoadPath));

  return cacheStatus.localizedLoadPath;

}

Location: TrackerDistributedCacheManager.java

Content: 

private long checkStampSinceJobStarted(Configuration conf,FileSystem fs,URI cache,long confFileStamp,CacheStatus lcacheStatus,FileStatus fileStatus) throws IOException {

  long dfsFileStamp;

  if (fileStatus != null) {

    dfsFileStamp=fileStatus.getModificationTime();

  }

 else {

    dfsFileStamp=getTimestamp(conf,cache);

  }

  if (dfsFileStamp != confFileStamp) {

    LOG.fatal("File: " + cache + " has changed on HDFS since job started");

    throw new IOException("File: " + cache + " has changed on HDFS since job started");

  }

  return dfsFileStamp;

}

Location: TrackerDistributedCacheManager.java

Content: 

/** 

 * This method create symlinks for all files in a given dir in another  directory. Should not be used outside of DistributedCache code.

 * @param conf the configuration

 * @param jobCacheDir the target directory for creating symlinks

 * @param workDir the directory in which the symlinks are created

 * @throws IOException

 */

public static void createAllSymlink(Configuration conf,File jobCacheDir,File workDir) throws IOException {

  if ((jobCacheDir == null || !jobCacheDir.isDirectory()) || workDir == null || (!workDir.isDirectory())) {

    return;

  }

  boolean createSymlink=DistributedCache.getSymlink(conf);

  if (createSymlink) {

    File[] list=jobCacheDir.listFiles();

    for (int i=0; i < list.length; i++) {

      String target=list[i].getAbsolutePath();

      String link=new File(workDir,list[i].getName()).toString();

      LOG.info(String.format("Creating symlink: %s <- %s",target,link));

      int ret=FileUtil.symLink(target,link);

      if (ret != 0) {

        LOG.warn(String.format("Failed to create symlink: %s <- %s",target,link));

      }

    }

  }

}

Location: TrackerDistributedCacheManager.java

Content: 

private void createSymlink(Configuration conf,URI cache,CacheStatus cacheStatus,boolean isArchive,Path currentWorkDir,boolean honorSymLinkConf) throws IOException {

  boolean doSymlink=honorSymLinkConf && DistributedCache.getSymlink(conf);

  if (cache.getFragment() == null) {

    doSymlink=false;

  }

  String link=currentWorkDir.toString() + Path.SEPARATOR + cache.getFragment();

  File flink=new File(link);

  if (doSymlink) {

    if (!flink.exists()) {

      FileUtil.symLink(cacheStatus.localizedLoadPath.toString(),link);

    }

  }

}

Location: TrackerDistributedCacheManager.java

Content: 

/** 

 * Delete a local path with asyncDiskService if available, or otherwise synchronously with local file system.

 */

private static void deleteLocalPath(MRAsyncDiskService asyncDiskService,LocalFileSystem fs,Path path) throws IOException {

  boolean deleted=false;

  if (asyncDiskService != null) {

    String localPathToDelete=path.toUri().getPath();

    deleted=asyncDiskService.moveAndDeleteAbsolutePath(localPathToDelete);

    if (!deleted) {

      LOG.warn("Cannot find DistributedCache path " + localPathToDelete + " on any of the asyncDiskService volumes!");

    }

  }

  if (!deleted) {

    fs.delete(path,true);

  }

  LOG.info("Deleted path " + path);

}

Location: TrackerDistributedCacheManager.java

Content: 

/** 

 * Get the booleans on whether the archives are public or not.  Used by  internal DistributedCache and MapReduce code.

 * @param conf The configuration which stored the timestamps

 * @return a string array of booleans 

 */

static String[] getArchiveVisibilities(Configuration conf){

  return conf.getStrings(MRJobConfig.CACHE_ARCHIVES_VISIBILITIES);

}

Location: TrackerDistributedCacheManager.java

Content: 

/** 

 * Get the booleans on whether the files are public or not.  Used by  internal DistributedCache and MapReduce code.

 * @param conf The configuration which stored the timestamps

 * @return a string array of booleans 

 * @throws IOException

 */

static String[] getFileVisibilities(Configuration conf){

  return conf.getStrings(MRJobConfig.CACHE_FILE_VISIBILITIES);

}

Location: TrackerDistributedCacheManager.java

Content: 

String getKey(URI cache,Configuration conf,long timeStamp,String user) throws IOException {

  return makeRelative(cache,conf) + String.valueOf(timeStamp) + user;

}

Location: TrackerDistributedCacheManager.java

Content: 

/** 

 * Get the locally cached file or archive; it could either be previously cached (and valid) or copy it from the  {@link FileSystem} now.

 * @param cache the cache to be localized, this should be specified asnew URI(scheme://scheme-specific-part/absolute_path_to_file#LINKNAME).

 * @param conf The Configuration file which contains the filesystem

 * @param subDir The base cache subDir where you want to localize the files/archives

 * @param fileStatus The file status on the dfs.

 * @param isArchive if the cache is an archive or a file. In case it is anarchive with a .zip or .jar or .tar or .tgz or .tar.gz extension it will be unzipped/unjarred/untarred automatically and the directory where the archive is unzipped/unjarred/untarred is returned as the Path. In case of a file, the path to the file is returned

 * @param confFileStamp this is the hdfs file modification timestamp to verifythat the file to be cached hasn't changed since the job started

 * @param currentWorkDir this is the directory where you would want to createsymlinks for the locally cached files/archives

 * @param honorSymLinkConf if this is false, then the symlinks are notcreated even if conf says so (this is required for an optimization in task launches NOTE: This is effectively always on since r696957, since there is no code path that does not use this.

 * @param isPublic to know the cache file is accessible to public or private

 * @return the path to directory where the archives are unjarred in case ofarchives, the path to the file where the file is copied locally

 * @throws IOException

 */

Path getLocalCache(URI cache,Configuration conf,String subDir,FileStatus fileStatus,boolean isArchive,long confFileStamp,Path currentWorkDir,boolean honorSymLinkConf,boolean isPublic) throws IOException {

  String key;

  key=getKey(cache,conf,confFileStamp,getLocalizedCacheOwner(isPublic));

  CacheStatus lcacheStatus;

  Path localizedPath=null;

synchronized (cachedArchives) {

    lcacheStatus=cachedArchives.get(key);

    if (lcacheStatus == null) {

      String uniqueString=String.valueOf(random.nextLong());

      String cachePath=new Path(subDir,new Path(uniqueString,makeRelative(cache,conf))).toString();

      Path localPath=lDirAllocator.getLocalPathForWrite(cachePath,fileStatus.getLen(),trackerConf);

      lcacheStatus=new CacheStatus(new Path(localPath.toString().replace(cachePath,"")),localPath,new Path(subDir),uniqueString,key);

      cachedArchives.put(key,lcacheStatus);

    }

    lcacheStatus.incRefCount();

  }

  boolean initSuccessful=false;

  try {

synchronized (lcacheStatus) {

      if (!lcacheStatus.isInited()) {

        FileSystem fs=FileSystem.get(cache,conf);

        checkStampSinceJobStarted(conf,fs,cache,confFileStamp,lcacheStatus,fileStatus);

        localizedPath=localizeCache(conf,cache,confFileStamp,lcacheStatus,isArchive,isPublic);

        lcacheStatus.initComplete();

      }

 else {

        localizedPath=checkCacheStatusValidity(conf,cache,confFileStamp,lcacheStatus,fileStatus,isArchive);

      }

      createSymlink(conf,cache,lcacheStatus,isArchive,currentWorkDir,honorSymLinkConf);

    }

    initSuccessful=true;

    return localizedPath;

  }

  finally {

    if (!initSuccessful) {

      lcacheStatus.decRefCount();

    }

  }

}

Location: TrackerDistributedCacheManager.java

Content: 

/** 

 * Get the user who should "own" the localized distributed cache file. If the cache is public, the tasktracker user is the owner. If private, the user that the task is running as, is the owner.

 * @param isPublic

 * @return the owner as a shortname string

 * @throws IOException

 */

static String getLocalizedCacheOwner(boolean isPublic) throws IOException {

  String user;

  if (isPublic) {

    user=UserGroupInformation.getLoginUser().getShortUserName();

  }

 else {

    user=UserGroupInformation.getCurrentUser().getShortUserName();

  }

  return user;

}

Location: TrackerDistributedCacheManager.java

Content: 

int getReferenceCount(URI cache,Configuration conf,long timeStamp,String owner) throws IOException {

  String key=getKey(cache,conf,timeStamp,owner);

synchronized (cachedArchives) {

    CacheStatus lcacheStatus=cachedArchives.get(key);

    if (lcacheStatus == null) {

      throw new IOException("Cannot find localized cache: " + cache);

    }

    return lcacheStatus.getRefCount();

  }

}

Location: TrackerDistributedCacheManager.java

Content: 

/** 

 * Returns mtime of a given cache file on hdfs.

 * @param conf configuration

 * @param cache cache file

 * @return mtime of a given cache file on hdfs

 * @throws IOException

 */

static long getTimestamp(Configuration conf,URI cache) throws IOException {

  return getFileStatus(conf,cache).getModificationTime();

}

Location: TrackerDistributedCacheManager.java

Content: 

private boolean ifExistsAndFresh(Configuration conf,FileSystem fs,URI cache,long confFileStamp,CacheStatus lcacheStatus,FileStatus fileStatus) throws IOException {

  long dfsFileStamp=checkStampSinceJobStarted(conf,fs,cache,confFileStamp,lcacheStatus,fileStatus);

  if (dfsFileStamp != lcacheStatus.mtime) {

    return false;

  }

  return true;

}

Location: TrackerDistributedCacheManager.java

Content: 

private static boolean isTarFile(String filename){

  return (filename.endsWith(".tgz") || filename.endsWith(".tar.gz") || filename.endsWith(".tar"));

}

Location: TrackerDistributedCacheManager.java

Content: 

Path localizeCache(Configuration conf,URI cache,long confFileStamp,CacheStatus cacheStatus,boolean isArchive,boolean isPublic) throws IOException {

  FileSystem fs=FileSystem.get(cache,conf);

  FileSystem localFs=FileSystem.getLocal(conf);

  Path parchive=null;

  if (isArchive) {

    parchive=new Path(cacheStatus.localizedLoadPath,new Path(cacheStatus.localizedLoadPath.getName()));

  }

 else {

    parchive=cacheStatus.localizedLoadPath;

  }

  if (!localFs.mkdirs(parchive.getParent())) {

    throw new IOException("Mkdirs failed to create directory " + cacheStatus.localizedLoadPath.toString());

  }

  String cacheId=cache.getPath();

  fs.copyToLocalFile(new Path(cacheId),parchive);

  if (isArchive) {

    String tmpArchive=parchive.toString().toLowerCase();

    File srcFile=new File(parchive.toString());

    File destDir=new File(parchive.getParent().toString());

    LOG.info(String.format("Extracting %s to %s",srcFile.toString(),destDir.toString()));

    if (tmpArchive.endsWith(".jar")) {

      RunJar.unJar(srcFile,destDir);

    }

 else     if (tmpArchive.endsWith(".zip")) {

      FileUtil.unZip(srcFile,destDir);

    }

 else     if (isTarFile(tmpArchive)) {

      FileUtil.unTar(srcFile,destDir);

    }

 else {

      LOG.warn(String.format("Cache file %s specified as archive, but not valid extension.",srcFile.toString()));

    }

  }

  long cacheSize=FileUtil.getDU(new File(parchive.getParent().toString()));

  cacheStatus.size=cacheSize;

  baseDirManager.addCacheUpdate(cacheStatus);

  setPermissions(conf,cacheStatus,isPublic);

  cacheStatus.mtime=getTimestamp(conf,cache);

  LOG.info(String.format("Cached %s as %s",cache.toString(),cacheStatus.localizedLoadPath));

  return cacheStatus.localizedLoadPath;

}

Location: TrackerDistributedCacheManager.java

Content: 

String makeRelative(URI cache,Configuration conf) throws IOException {

  String host=cache.getHost();

  if (host == null) {

    host=cache.getScheme();

  }

  if (host == null) {

    URI defaultUri=FileSystem.get(conf).getUri();

    host=defaultUri.getHost();

    if (host == null) {

      host=defaultUri.getScheme();

    }

  }

  String path=host + cache.getPath();

  path=path.replace(":/","/");

  return path;

}

Location: TrackerDistributedCacheManager.java

Content: 

public TaskDistributedCacheManager newTaskDistributedCacheManager(Configuration taskConf) throws IOException {

  return new TaskDistributedCacheManager(this,taskConf);

}

Location: TrackerDistributedCacheManager.java

Content: 

/** 

 * Clear the entire contents of the cache and delete the backing files. This should only be used when the server is reinitializing, because the users are going to lose their files.

 */

public void purgeCache(){

synchronized (cachedArchives) {

    for (    Map.Entry<String,CacheStatus> f : cachedArchives.entrySet()) {

      try {

        deleteLocalPath(asyncDiskService,localFs,f.getValue().localizedLoadPath);

      }

 catch (      IOException ie) {

        LOG.debug("Error cleaning up cache",ie);

      }

    }

    cachedArchives.clear();

  }

}

Location: TrackerDistributedCacheManager.java

Content: 

/** 

 * This is the opposite of getlocalcache. When you are done with using the cache, you need to release the cache

 * @param cache The cache URI to be released

 * @param conf configuration which contains the filesystem the cache

 * @param timeStamp the timestamp on the file represented by the cache URI

 * @param owner the owner of the localized fileis contained in.

 * @throws IOException

 */

void releaseCache(URI cache,Configuration conf,long timeStamp,String owner) throws IOException {

  String key=getKey(cache,conf,timeStamp,owner);

synchronized (cachedArchives) {

    CacheStatus lcacheStatus=cachedArchives.get(key);

    if (lcacheStatus == null) {

      LOG.warn("Cannot find localized cache: " + cache + " (key: "+ key+ ") in releaseCache!");

      return;

    }

    lcacheStatus.decRefCount();

  }

}

Location: TrackerDistributedCacheManager.java

Content: 

/** 

 * Set the conf to contain the location for localized archives.

 * @param conf The conf to modify to contain the localized caches

 * @param str a comma separated list of local archives

 */

static void setLocalArchives(Configuration conf,String str){

  conf.set(MRJobConfig.CACHE_LOCALARCHIVES,str);

}

Location: TrackerDistributedCacheManager.java

Content: 

/** 

 * Set the conf to contain the location for localized files.

 * @param conf The conf to modify to contain the localized caches

 * @param str a comma separated list of local files

 */

public static void setLocalFiles(Configuration conf,String str){

  conf.set(MRJobConfig.CACHE_LOCALFILES,str);

}

Location: TrackerDistributedCacheManager.java

Content: 

private void setPermissions(Configuration conf,CacheStatus cacheStatus,boolean isPublic) throws IOException {

  if (isPublic) {

    Path localizedUniqueDir=cacheStatus.getLocalizedUniqueDir();

    LOG.info("Doing chmod on localdir :" + localizedUniqueDir);

    try {

      FileUtil.chmod(localizedUniqueDir.toString(),"ugo+rx",true);

    }

 catch (    InterruptedException e) {

      LOG.warn("Exception in chmod" + e.toString());

      throw new IOException(e);

    }

  }

 else {

    DistributedCacheFileContext context=new DistributedCacheFileContext(conf.get(MRJobConfig.USER_NAME),new File(cacheStatus.localizedBaseDir.toString()),cacheStatus.localizedBaseDir,cacheStatus.uniqueString);

    taskController.initializeDistributedCacheFile(context);

  }

}

Location: TrackerDistributedCacheManager.java

Content: 

/** 

 * Start the background thread

 */

public void startCleanupThread(){

  this.cleanupThread.start();

}

Location: TrackerDistributedCacheManager.java

Content: 

/** 

 * Stop the background thread

 */

public void stopCleanupThread(){

  cleanupThread.stopRunning();

  cleanupThread.interrupt();

}

Location: TrackerDistributedCacheManager.java

Content: 

public TrackerDistributedCacheManager(Configuration conf,TaskController taskController) throws IOException {

  this.localFs=FileSystem.getLocal(conf);

  this.trackerConf=conf;

  this.lDirAllocator=new LocalDirAllocator(TTConfig.LOCAL_DIR);

  this.taskController=taskController;

  this.allowedCacheSize=conf.getLong(TTConfig.TT_LOCAL_CACHE_SIZE,DEFAULT_CACHE_SIZE);

  this.allowedCacheSubdirs=conf.getLong(TTConfig.TT_LOCAL_CACHE_SUBDIRS_LIMIT,DEFAULT_CACHE_SUBDIR_LIMIT);

  double cleanupPct=conf.getFloat(TTConfig.TT_LOCAL_CACHE_KEEP_AROUND_PCT,DEFAULT_CACHE_KEEP_AROUND_PCT);

  this.allowedCacheSizeCleanupGoal=(long)(this.allowedCacheSize * cleanupPct);

  this.allowedCacheSubdirsCleanupGoal=(long)(this.allowedCacheSubdirs * cleanupPct);

  this.cleanupThread=new CleanupThread(conf);

}

Location: TrackerDistributedCacheManager.java

Content: 

/** 

 * Creates a TrackerDistributedCacheManager with a MRAsyncDiskService.

 * @param asyncDiskService Provides a set of ThreadPools for async disk operations.  

 */

public TrackerDistributedCacheManager(Configuration conf,TaskController taskController,MRAsyncDiskService asyncDiskService) throws IOException {

  this(conf,taskController);

  this.asyncDiskService=asyncDiskService;

}

