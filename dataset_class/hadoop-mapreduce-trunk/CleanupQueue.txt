Location: CleanupQueue.java

Content: 

/** 

 * Adds the paths to the queue of paths to be deleted by cleanupThread.

 */

void addToQueue(PathDeletionContext... contexts){

  cleanupThread.addToQueue(contexts);

}

Location: CleanupQueue.java

Content: 

/** 

 * Create a singleton path-clean-up queue. It can be used to delete paths(directories/files) in a separate thread. This constructor creates a clean-up thread and also starts it as a daemon. Callers can instantiate one CleanupQueue per JVM and can use it for deleting paths. Use {@link CleanupQueue#addToQueue(PathDeletionContext)} to add paths fordeletion.

 */

public CleanupQueue(){

synchronized (PathCleanupThread.class) {

    if (cleanupThread == null) {

      cleanupThread=new PathCleanupThread();

    }

  }

}

Location: CleanupQueue.java

Content: 

protected static boolean deletePath(PathDeletionContext context) throws IOException {

  context.enablePathForCleanup();

  if (LOG.isDebugEnabled()) {

    LOG.debug("Trying to delete " + context.fullPath);

  }

  if (context.fs.exists(new Path(context.fullPath))) {

    return context.fs.delete(new Path(context.fullPath),true);

  }

  return true;

}

Location: CleanupQueue.java

Content: 

protected boolean isQueueEmpty(){

  return (cleanupThread.queue.size() == 0);

}

