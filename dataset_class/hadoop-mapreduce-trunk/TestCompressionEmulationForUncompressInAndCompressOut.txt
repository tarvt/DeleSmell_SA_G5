Location: TestCompressionEmulationForUncompressInAndCompressOut.java

Content: 

/** 

 * Generate a uncompressed input data and verify the compression ratios  of reduce output against default output compression ratio.

 * @throws Exception -if an error occurs.

 */

@Test public void testCompressionEmulationOfCompressedOuputWithDefaultRatios() throws Exception {

  final String tracePath=getTraceFile("compression_case3_trace");

  Assert.assertNotNull("Trace file has not found.",tracePath);

  final String[] runtimeValues={"LOADJOB",RoundRobinUserResolver.class.getName(),"REPLAY",inputSizeInMB + "m","file://" + UtilsForGridmix.getProxyUsersFile(conf),tracePath};

  final String[] otherArgs={"-D",GridMixConfig.GRIDMIX_DISTCACHE_ENABLE + "=false","-D",GridMixConfig.GRIDMIX_COMPRESSION_ENABLE + "=true"};

  runGridmixAndVerify(runtimeValues,otherArgs,tracePath,GridMixRunMode.DATA_GENERATION_AND_RUN_GRIDMIX.getValue());

}

Location: TestCompressionEmulationForUncompressInAndCompressOut.java

Content: 

/** 

 * Use existing uncompressed input data and verify the compression ratio  of reduce output against custom output compression ratio and also verify  the compression output file output format.

 * @throws Exception -if an error occurs.

 */

@Test public void testCompressionEmulationOfCompressedOutputWithCustomRatios() throws Exception {

  final String tracePath=getTraceFile("compression_case3_trace");

  Assert.assertNotNull("Trace file has not found.",tracePath);

  UtilsForGridmix.cleanup(gridmixDir,rtClient.getDaemonConf());

  final String[] runtimeValues={"LOADJOB",SubmitterUserResolver.class.getName(),"STRESS",inputSizeInMB + "m",tracePath};

  final String[] otherArgs={"-D",GridMixConfig.GRIDMIX_DISTCACHE_ENABLE + "=false","-D",GridMixConfig.GRIDMIX_COMPRESSION_ENABLE + "=true","-D",GridMixConfig.GRIDMIX_OUTPUT_COMPRESSION_RATIO + "=0.38"};

  runGridmixAndVerify(runtimeValues,otherArgs,tracePath,GridMixRunMode.DATA_GENERATION_AND_RUN_GRIDMIX.getValue());

}

