Location: TestMRKeyFieldBasedPartitioner.java

Content: 

/** 

 * Test is key-field-based partitioned works with empty key.

 */

public void testEmptyKey() throws Exception {

  int numReducers=10;

  KeyFieldBasedPartitioner<Text,Text> kfbp=new KeyFieldBasedPartitioner<Text,Text>();

  Configuration conf=new Configuration();

  conf.setInt("num.key.fields.for.partition",10);

  kfbp.setConf(conf);

  assertEquals("Empty key should map to 0th partition",0,kfbp.getPartition(new Text(),new Text(),numReducers));

  kfbp=new KeyFieldBasedPartitioner<Text,Text>();

  conf=new Configuration();

  kfbp.setConf(conf);

  String input="abc\tdef\txyz";

  int hashCode=input.hashCode();

  int expectedPartition=kfbp.getPartition(hashCode,numReducers);

  assertEquals("Partitioner doesnt work as expected",expectedPartition,kfbp.getPartition(new Text(input),new Text(),numReducers));

  kfbp=new KeyFieldBasedPartitioner<Text,Text>();

  conf=new Configuration();

  conf.set(KeyFieldBasedPartitioner.PARTITIONER_OPTIONS,"-k2,2");

  kfbp.setConf(conf);

  String expectedOutput="def";

  byte[] eBytes=expectedOutput.getBytes();

  hashCode=kfbp.hashCode(eBytes,0,eBytes.length - 1,0);

  expectedPartition=kfbp.getPartition(hashCode,numReducers);

  assertEquals("Partitioner doesnt work as expected",expectedPartition,kfbp.getPartition(new Text(input),new Text(),numReducers));

  kfbp=new KeyFieldBasedPartitioner<Text,Text>();

  conf=new Configuration();

  conf.set(KeyFieldBasedPartitioner.PARTITIONER_OPTIONS,"-k2,5");

  kfbp.setConf(conf);

  expectedOutput="def\txyz";

  eBytes=expectedOutput.getBytes();

  hashCode=kfbp.hashCode(eBytes,0,eBytes.length - 1,0);

  expectedPartition=kfbp.getPartition(hashCode,numReducers);

  assertEquals("Partitioner doesnt work as expected",expectedPartition,kfbp.getPartition(new Text(input),new Text(),numReducers));

  kfbp=new KeyFieldBasedPartitioner<Text,Text>();

  conf=new Configuration();

  conf.set(KeyFieldBasedPartitioner.PARTITIONER_OPTIONS,"-k2");

  kfbp.setConf(conf);

  expectedOutput="def\txyz";

  eBytes=expectedOutput.getBytes();

  hashCode=kfbp.hashCode(eBytes,0,eBytes.length - 1,0);

  expectedPartition=kfbp.getPartition(hashCode,numReducers);

  assertEquals("Partitioner doesnt work as expected",expectedPartition,kfbp.getPartition(new Text(input),new Text(),numReducers));

  kfbp=new KeyFieldBasedPartitioner<Text,Text>();

  conf=new Configuration();

  conf.set(KeyFieldBasedPartitioner.PARTITIONER_OPTIONS,"-k10");

  kfbp.setConf(conf);

  assertEquals("Partitioner doesnt work as expected",0,kfbp.getPartition(new Text(input),new Text(),numReducers));

  kfbp=new KeyFieldBasedPartitioner<Text,Text>();

  conf=new Configuration();

  conf.set(KeyFieldBasedPartitioner.PARTITIONER_OPTIONS,"-k2,2 -k4,4");

  kfbp.setConf(conf);

  input="abc\tdef\tpqr\txyz";

  expectedOutput="def";

  eBytes=expectedOutput.getBytes();

  hashCode=kfbp.hashCode(eBytes,0,eBytes.length - 1,0);

  expectedOutput="xyz";

  eBytes=expectedOutput.getBytes();

  hashCode=kfbp.hashCode(eBytes,0,eBytes.length - 1,hashCode);

  expectedPartition=kfbp.getPartition(hashCode,numReducers);

  assertEquals("Partitioner doesnt work as expected",expectedPartition,kfbp.getPartition(new Text(input),new Text(),numReducers));

  kfbp=new KeyFieldBasedPartitioner<Text,Text>();

  conf=new Configuration();

  conf.set(KeyFieldBasedPartitioner.PARTITIONER_OPTIONS,"-k2,2 -k30,21 -k4,4 -k5");

  kfbp.setConf(conf);

  expectedOutput="def";

  eBytes=expectedOutput.getBytes();

  hashCode=kfbp.hashCode(eBytes,0,eBytes.length - 1,0);

  expectedOutput="xyz";

  eBytes=expectedOutput.getBytes();

  hashCode=kfbp.hashCode(eBytes,0,eBytes.length - 1,hashCode);

  expectedPartition=kfbp.getPartition(hashCode,numReducers);

  assertEquals("Partitioner doesnt work as expected",expectedPartition,kfbp.getPartition(new Text(input),new Text(),numReducers));

}

