Location: TestDistCh.java

Content: 

static void checkFileStatus(PermissionStatus expected,FileStatus actual){

  assertEquals(expected.getUserName(),actual.getOwner());

  assertEquals(expected.getGroupName(),actual.getGroup());

  FsPermission perm=expected.getPermission();

  if (actual.isFile()) {

    perm=perm.applyUMask(UMASK);

  }

  assertEquals(perm,actual.getPermission());

}

Location: TestDistCh.java

Content: 

private static String runLsr(final FsShell shell,String root,int returnvalue) throws Exception {

  System.out.println("root=" + root + ", returnvalue="+ returnvalue);

  final ByteArrayOutputStream bytes=new ByteArrayOutputStream();

  final PrintStream out=new PrintStream(bytes);

  final PrintStream oldOut=System.out;

  final PrintStream oldErr=System.err;

  System.setOut(out);

  System.setErr(out);

  final String results;

  try {

    assertEquals(returnvalue,shell.run(new String[]{"-lsr",root}));

    results=bytes.toString();

  }

  finally {

    IOUtils.closeStream(out);

    System.setOut(oldOut);

    System.setErr(oldErr);

  }

  System.out.println("results:\n" + results);

  return results;

}

Location: TestDistCh.java

Content: 

public void testDistCh() throws Exception {

  final Configuration conf=new Configuration();

  final MiniDFSCluster cluster=new MiniDFSCluster(conf,2,true,null);

  final FileSystem fs=cluster.getFileSystem();

  final MiniMRCluster mr=new MiniMRCluster(2,fs.getUri().toString(),1);

  final FsShell shell=new FsShell(conf);

  try {

    final FileTree tree=new FileTree(fs,"testDistCh");

    final FileStatus rootstatus=fs.getFileStatus(tree.rootdir);

    runLsr(shell,tree.root,0);

    final String[] args=new String[RANDOM.nextInt(NUN_SUBS - 1) + 1];

    final PermissionStatus[] newstatus=new PermissionStatus[NUN_SUBS];

    final List<Integer> indices=new LinkedList<Integer>();

    for (int i=0; i < NUN_SUBS; i++) {

      indices.add(i);

    }

    for (int i=0; i < args.length; i++) {

      final int index=indices.remove(RANDOM.nextInt(indices.size()));

      final String sub="sub" + index;

      final boolean changeOwner=RANDOM.nextBoolean();

      final boolean changeGroup=RANDOM.nextBoolean();

      final boolean changeMode=!changeOwner && !changeGroup ? true : RANDOM.nextBoolean();

      final String owner=changeOwner ? sub : "";

      final String group=changeGroup ? sub : "";

      final String permission=changeMode ? RANDOM.nextInt(8) + "" + RANDOM.nextInt(8)+ ""+ RANDOM.nextInt(8) : "";

      args[i]=tree.root + "/" + sub+ ":"+ owner+ ":"+ group+ ":"+ permission;

      newstatus[index]=new ChPermissionStatus(rootstatus,owner,group,permission);

    }

    for (int i=0; i < NUN_SUBS; i++) {

      if (newstatus[i] == null) {

        newstatus[i]=new ChPermissionStatus(rootstatus);

      }

    }

    System.out.println("args=" + Arrays.asList(args).toString().replace(",",",\n  "));

    System.out.println("newstatus=" + Arrays.asList(newstatus).toString().replace(",",",\n  "));

    new DistCh(mr.createJobConf()).run(args);

    runLsr(shell,tree.root,0);

    for (int i=0; i < NUN_SUBS; i++) {

      Path sub=new Path(tree.root + "/sub" + i);

      checkFileStatus(newstatus[i],fs.getFileStatus(sub));

      for (      FileStatus status : fs.listStatus(sub)) {

        checkFileStatus(newstatus[i],status);

      }

    }

  }

  finally {

    cluster.shutdown();

  }

}

