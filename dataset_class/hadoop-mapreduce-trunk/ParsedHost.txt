Location: ParsedHost.java

Content: 

int distance(ParsedHost other){

  if (nodeName.equals(other.nodeName)) {

    return 0;

  }

  if (rackName.equals(other.rackName)) {

    return 1;

  }

  return 2;

}

Location: ParsedHost.java

Content: 

String getNodeName(){

  return nodeName;

}

Location: ParsedHost.java

Content: 

String getRackName(){

  return rackName;

}

Location: ParsedHost.java

Content: 

LoggedLocation makeLoggedLocation(){

  LoggedLocation result=new LoggedLocation();

  List<String> coordinates=new ArrayList<String>();

  coordinates.add(rackName);

  coordinates.add(nodeName);

  result.setLayers(coordinates);

  return result;

}

Location: ParsedHost.java

Content: 

String nameComponent(int i) throws IllegalArgumentException {

switch (i) {

case 0:

    return rackName;

case 1:

  return nodeName;

default :

throw new IllegalArgumentException("Host location component index out of range.");

}

}

Location: ParsedHost.java

Content: 

/** 

 * TODO handle arbitrary level of network names.

 */

static int numberOfDistances(){

  return 3;

}

Location: ParsedHost.java

Content: 

public ParsedHost(LoggedLocation loc){

  List<String> coordinates=loc.getLayers();

  rackName=coordinates.get(0);

  nodeName=coordinates.get(1);

}

Location: ParsedHost.java

Content: 

ParsedHost(String rackName,String nodeName){

  this.rackName=rackName;

  this.nodeName=nodeName;

}

Location: ParsedHost.java

Content: 

public static ParsedHost parse(String name){

  Matcher matcher=splitPattern.matcher(name);

  if (!matcher.matches())   return null;

  return new ParsedHost(matcher.group(1),matcher.group(2));

}

