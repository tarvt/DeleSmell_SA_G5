Location: BigMapOutput.java

Content: 

private static void createBigMapInputFile(Configuration conf,FileSystem fs,Path dir,long fileSizeInMB) throws IOException {

  if (fs.exists(dir)) {

    FileStatus[] list=fs.listStatus(dir);

    if (list.length > 0) {

      throw new IOException("Input path: " + dir + " already exists... ");

    }

  }

  Path file=new Path(dir,"part-0");

  SequenceFile.Writer writer=SequenceFile.createWriter(fs,conf,file,BytesWritable.class,BytesWritable.class,CompressionType.NONE);

  long numBytesToWrite=fileSizeInMB * 1024 * 1024;

  int minKeySize=conf.getInt(MIN_KEY,10);

  ;

  int keySizeRange=conf.getInt(MAX_KEY,1000) - minKeySize;

  int minValueSize=conf.getInt(MIN_VALUE,0);

  int valueSizeRange=conf.getInt(MAX_VALUE,20000) - minValueSize;

  BytesWritable randomKey=new BytesWritable();

  BytesWritable randomValue=new BytesWritable();

  LOG.info("Writing " + numBytesToWrite + " bytes to "+ file+ " with "+ "minKeySize: "+ minKeySize+ " keySizeRange: "+ keySizeRange+ " minValueSize: "+ minValueSize+ " valueSizeRange: "+ valueSizeRange);

  long start=System.currentTimeMillis();

  while (numBytesToWrite > 0) {

    int keyLength=minKeySize + (keySizeRange != 0 ? random.nextInt(keySizeRange) : 0);

    randomKey.setSize(keyLength);

    randomizeBytes(randomKey.getBytes(),0,randomKey.getLength());

    int valueLength=minValueSize + (valueSizeRange != 0 ? random.nextInt(valueSizeRange) : 0);

    randomValue.setSize(valueLength);

    randomizeBytes(randomValue.getBytes(),0,randomValue.getLength());

    writer.append(randomKey,randomValue);

    numBytesToWrite-=keyLength + valueLength;

  }

  writer.close();

  long end=System.currentTimeMillis();

  LOG.info("Created " + file + " of size: "+ fileSizeInMB+ "MB in "+ (end - start) / 1000 + "secs");

}

Location: BigMapOutput.java

Content: 

private static void randomizeBytes(byte[] data,int offset,int length){

  for (int i=offset + length - 1; i >= offset; --i) {

    data[i]=(byte)random.nextInt(256);

  }

}

