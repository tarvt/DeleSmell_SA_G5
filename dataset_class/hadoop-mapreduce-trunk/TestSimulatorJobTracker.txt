Location: TestSimulatorJobTracker.java

Content: 

@Test public void testTrackerInteraction() throws IOException, InterruptedException {

  LOG.info("Testing Inter Tracker protocols");

  int now=0;

  JobConf jtConf=createJobConf();

  int NoMaps=2;

  int NoReduces=10;

  jtConf.set("fs.default.name","file:///");

  jtConf.set("mapred.jobtracker.taskScheduler",JobQueueTaskScheduler.class.getName());

  SimulatorJobTracker sjobTracker=SimulatorJobTracker.startTracker(jtConf,0);

  System.out.println("Created the SimulatorJobTracker successfully");

  sjobTracker.offerService();

  FakeJobClient jbc=new FakeJobClient(sjobTracker,NoMaps,NoReduces);

  int NoJobs=1;

  for (int i=0; i < NoJobs; i++) {

    jbc.submitNewJob();

  }

  org.apache.hadoop.mapreduce.JobStatus[] allJobs=sjobTracker.getAllJobs();

  Assert.assertTrue("allJobs queue length is " + allJobs.length,allJobs.length >= 1);

  for (  org.apache.hadoop.mapreduce.JobStatus js : allJobs) {

    LOG.info("From JTQueue: job id = " + js.getJobID());

  }

  Configuration ttConf=new Configuration();

  ttConf.set("mumak.tasktracker.tracker.name","tracker_host1.foo.com:localhost/127.0.0.1:9010");

  ttConf.set("mumak.tasktracker.host.name","host1.foo.com");

  ttConf.setInt("mapred.tasktracker.map.tasks.maximum",10);

  ttConf.setInt("mapred.tasktracker.reduce.tasks.maximum",10);

  ttConf.setInt("mumak.tasktracker.heartbeat.fuzz",-1);

  FakeTaskTracker fakeTracker=new FakeTaskTracker(sjobTracker,ttConf);

  int numLaunchTaskActions=0;

  for (int i=0; i < NoMaps * 2; ++i) {

    numLaunchTaskActions+=fakeTracker.sendFakeHeartbeat(now);

    if (numLaunchTaskActions >= NoMaps) {

      break;

    }

    now+=5;

    LOG.debug("Number of MapLaunchTasks=" + numLaunchTaskActions + " now = "+ now);

  }

  Assert.assertTrue("Failed to launch all maps: " + numLaunchTaskActions,numLaunchTaskActions >= NoMaps);

  LOG.info("Sending task completed status");

  numLaunchTaskActions+=fakeTracker.sendFakeHeartbeat(now);

  for (int i=0; i < NoReduces * 2; ++i) {

    if (numLaunchTaskActions >= NoMaps + NoReduces) {

      break;

    }

    numLaunchTaskActions+=fakeTracker.sendFakeHeartbeat(now);

    now+=5;

    LOG.debug("Number of ReduceLaunchTasks=" + numLaunchTaskActions + " now = "+ now);

  }

  Assert.assertTrue("Failed to launch all reduces: " + numLaunchTaskActions,numLaunchTaskActions >= NoMaps + NoReduces);

  numLaunchTaskActions+=fakeTracker.sendFakeHeartbeat(now);

}

