Location: TestRecordMR.java

Content: 

/** 

 */

public static void launch() throws Exception {

  int countsToGo=counts;

  int dist[]=new int[range];

  for (int i=0; i < range; i++) {

    double avgInts=(1.0 * countsToGo) / (range - i);

    dist[i]=(int)Math.max(0,Math.round(avgInts + (Math.sqrt(avgInts) * r.nextGaussian())));

    countsToGo-=dist[i];

  }

  if (countsToGo > 0) {

    dist[dist.length - 1]+=countsToGo;

  }

  FileSystem fs=FileSystem.get(conf);

  Path testdir=new Path("mapred.loadtest");

  if (!fs.mkdirs(testdir)) {

    throw new IOException("Mkdirs failed to create directory " + testdir.toString());

  }

  Path randomIns=new Path(testdir,"genins");

  if (!fs.mkdirs(randomIns)) {

    throw new IOException("Mkdirs failed to create directory " + randomIns.toString());

  }

  Path answerkey=new Path(randomIns,"answer.key");

  SequenceFile.Writer out=SequenceFile.createWriter(fs,conf,answerkey,RecInt.class,RecInt.class,CompressionType.NONE);

  try {

    for (int i=0; i < range; i++) {

      RecInt k=new RecInt();

      RecInt v=new RecInt();

      k.setData(i);

      v.setData(dist[i]);

      out.append(k,v);

    }

  }

  finally {

    out.close();

  }

  Path randomOuts=new Path(testdir,"genouts");

  fs.delete(randomOuts,true);

  JobConf genJob=new JobConf(conf,TestRecordMR.class);

  FileInputFormat.setInputPaths(genJob,randomIns);

  genJob.setInputFormat(SequenceFileInputFormat.class);

  genJob.setMapperClass(RandomGenMapper.class);

  FileOutputFormat.setOutputPath(genJob,randomOuts);

  genJob.setOutputKeyClass(RecInt.class);

  genJob.setOutputValueClass(RecString.class);

  genJob.setOutputFormat(SequenceFileOutputFormat.class);

  genJob.setReducerClass(RandomGenReducer.class);

  genJob.setNumReduceTasks(1);

  JobClient.runJob(genJob);

  int intermediateReduces=10;

  Path intermediateOuts=new Path(testdir,"intermediateouts");

  fs.delete(intermediateOuts,true);

  JobConf checkJob=new JobConf(conf,TestRecordMR.class);

  FileInputFormat.setInputPaths(checkJob,randomOuts);

  checkJob.setInputFormat(SequenceFileInputFormat.class);

  checkJob.setMapperClass(RandomCheckMapper.class);

  FileOutputFormat.setOutputPath(checkJob,intermediateOuts);

  checkJob.setOutputKeyClass(RecInt.class);

  checkJob.setOutputValueClass(RecString.class);

  checkJob.setOutputFormat(SequenceFileOutputFormat.class);

  checkJob.setReducerClass(RandomCheckReducer.class);

  checkJob.setNumReduceTasks(intermediateReduces);

  JobClient.runJob(checkJob);

  Path finalOuts=new Path(testdir,"finalouts");

  fs.delete(finalOuts,true);

  JobConf mergeJob=new JobConf(conf,TestRecordMR.class);

  FileInputFormat.setInputPaths(mergeJob,intermediateOuts);

  mergeJob.setInputFormat(SequenceFileInputFormat.class);

  mergeJob.setMapperClass(MergeMapper.class);

  FileOutputFormat.setOutputPath(mergeJob,finalOuts);

  mergeJob.setOutputKeyClass(RecInt.class);

  mergeJob.setOutputValueClass(RecInt.class);

  mergeJob.setOutputFormat(SequenceFileOutputFormat.class);

  mergeJob.setReducerClass(MergeReducer.class);

  mergeJob.setNumReduceTasks(1);

  JobClient.runJob(mergeJob);

  boolean success=true;

  Path recomputedkey=new Path(finalOuts,"part-00000");

  SequenceFile.Reader in=new SequenceFile.Reader(fs,recomputedkey,conf);

  int totalseen=0;

  try {

    RecInt key=new RecInt();

    RecInt val=new RecInt();

    for (int i=0; i < range; i++) {

      if (dist[i] == 0) {

        continue;

      }

      if (!in.next(key,val)) {

        System.err.println("Cannot read entry " + i);

        success=false;

        break;

      }

 else {

        if (!((key.getData() == i) && (val.getData() == dist[i]))) {

          System.err.println("Mismatch!  Pos=" + key.getData() + ", i="+ i+ ", val="+ val.getData()+ ", dist[i]="+ dist[i]);

          success=false;

        }

        totalseen+=val.getData();

      }

    }

    if (success) {

      if (in.next(key,val)) {

        System.err.println("Unnecessary lines in recomputed key!");

        success=false;

      }

    }

  }

  finally {

    in.close();

  }

  int originalTotal=0;

  for (int i=0; i < dist.length; i++) {

    originalTotal+=dist[i];

  }

  System.out.println("Original sum: " + originalTotal);

  System.out.println("Recomputed sum: " + totalseen);

  Path resultFile=new Path(testdir,"results");

  BufferedWriter bw=new BufferedWriter(new OutputStreamWriter(fs.create(resultFile)));

  try {

    bw.write("Success=" + success + "\n");

    System.out.println("Success=" + success);

  }

  finally {

    bw.close();

  }

  fs.delete(testdir,true);

}

Location: TestRecordMR.java

Content: 

public void testMapred() throws Exception {

  hongshuai();

  int countsToGo=counts;

  int dist[]=new int[range];

  for (int i=0; i < range; i++) {

    double avgInts=(1.0 * countsToGo) / (range - i);

    dist[i]=(int)Math.max(0,Math.round(avgInts + (Math.sqrt(avgInts) * r.nextGaussian())));

    countsToGo-=dist[i];

  }

  if (countsToGo > 0) {

    dist[dist.length - 1]+=countsToGo;

  }

  FileSystem fs=FileSystem.get(conf);

  Path testdir=new Path("mapred.loadtest");

  if (!fs.mkdirs(testdir)) {

    throw new IOException("Mkdirs failed to create directory " + testdir.toString());

  }

  Path randomIns=new Path(testdir,"genins");

  if (!fs.mkdirs(randomIns)) {

    throw new IOException("Mkdirs failed to create directory " + randomIns.toString());

  }

  Path answerkey=new Path(randomIns,"answer.key");

  SequenceFile.Writer out=SequenceFile.createWriter(fs,conf,answerkey,RecInt.class,RecInt.class,CompressionType.NONE);

  try {

    for (int i=0; i < range; i++) {

      RecInt k=new RecInt();

      RecInt v=new RecInt();

      k.setData(i);

      v.setData(dist[i]);

      out.append(k,v);

    }

  }

  finally {

    out.close();

  }

  Path randomOuts=new Path(testdir,"genouts");

  fs.delete(randomOuts,true);

  JobConf genJob=new JobConf(conf,TestRecordMR.class);

  FileInputFormat.setInputPaths(genJob,randomIns);

  genJob.setInputFormat(SequenceFileInputFormat.class);

  genJob.setMapperClass(RandomGenMapper.class);

  FileOutputFormat.setOutputPath(genJob,randomOuts);

  genJob.setOutputKeyClass(RecInt.class);

  genJob.setOutputValueClass(RecString.class);

  genJob.setOutputFormat(SequenceFileOutputFormat.class);

  genJob.setReducerClass(RandomGenReducer.class);

  genJob.setNumReduceTasks(1);

  JobClient.runJob(genJob);

  int intermediateReduces=10;

  Path intermediateOuts=new Path(testdir,"intermediateouts");

  fs.delete(intermediateOuts,true);

  JobConf checkJob=new JobConf(conf,TestRecordMR.class);

  FileInputFormat.setInputPaths(checkJob,randomOuts);

  checkJob.setInputFormat(SequenceFileInputFormat.class);

  checkJob.setMapperClass(RandomCheckMapper.class);

  FileOutputFormat.setOutputPath(checkJob,intermediateOuts);

  checkJob.setOutputKeyClass(RecInt.class);

  checkJob.setOutputValueClass(RecString.class);

  checkJob.setOutputFormat(SequenceFileOutputFormat.class);

  checkJob.setReducerClass(RandomCheckReducer.class);

  checkJob.setNumReduceTasks(intermediateReduces);

  JobClient.runJob(checkJob);

  Path finalOuts=new Path(testdir,"finalouts");

  fs.delete(finalOuts,true);

  JobConf mergeJob=new JobConf(conf,TestRecordMR.class);

  FileInputFormat.setInputPaths(mergeJob,intermediateOuts);

  mergeJob.setInputFormat(SequenceFileInputFormat.class);

  mergeJob.setMapperClass(MergeMapper.class);

  FileOutputFormat.setOutputPath(mergeJob,finalOuts);

  mergeJob.setOutputKeyClass(RecInt.class);

  mergeJob.setOutputValueClass(RecInt.class);

  mergeJob.setOutputFormat(SequenceFileOutputFormat.class);

  mergeJob.setReducerClass(MergeReducer.class);

  mergeJob.setNumReduceTasks(1);

  JobClient.runJob(mergeJob);

  boolean success=true;

  Path recomputedkey=new Path(finalOuts,"part-00000");

  SequenceFile.Reader in=new SequenceFile.Reader(fs,recomputedkey,conf);

  int totalseen=0;

  try {

    RecInt key=new RecInt();

    RecInt val=new RecInt();

    for (int i=0; i < range; i++) {

      if (dist[i] == 0) {

        continue;

      }

      if (!in.next(key,val)) {

        System.err.println("Cannot read entry " + i);

        success=false;

        break;

      }

 else {

        if (!((key.getData() == i) && (val.getData() == dist[i]))) {

          System.err.println("Mismatch!  Pos=" + key.getData() + ", i="+ i+ ", val="+ val.getData()+ ", dist[i]="+ dist[i]);

          success=false;

        }

        totalseen+=val.getData();

      }

    }

    if (success) {

      if (in.next(key,val)) {

        System.err.println("Unnecessary lines in recomputed key!");

        success=false;

      }

    }

  }

  finally {

    in.close();

  }

  int originalTotal=0;

  for (int i=0; i < dist.length; i++) {

    originalTotal+=dist[i];

  }

  System.out.println("Original sum: " + originalTotal);

  System.out.println("Recomputed sum: " + totalseen);

  Path resultFile=new Path(testdir,"results");

  BufferedWriter bw=new BufferedWriter(new OutputStreamWriter(fs.create(resultFile)));

  try {

    bw.write("Success=" + success + "\n");

    System.out.println("Success=" + success);

  }

  finally {

    bw.close();

  }

  fs.delete(testdir,true);

}

