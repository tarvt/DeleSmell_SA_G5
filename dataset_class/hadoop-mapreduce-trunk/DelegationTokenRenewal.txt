Location: DelegationTokenRenewal.java

Content: 

private static void addTokenToList(DelegationTokenToRenew t){

  delegationTokens.add(t);

}

Location: DelegationTokenRenewal.java

Content: 

protected static void cancelDelegationTokenOverHttps(final Token<DelegationTokenIdentifier> token,final Configuration conf) throws InterruptedException, IOException {

  final String httpAddress=getHttpAddressForToken(token,conf);

  LOG.info("address to cancel=" + httpAddress + "; tok="+ token.getService());

  UserGroupInformation.getLoginUser().doAs(new PrivilegedExceptionAction<Void>(){

    public Void run() throws IOException {

      DelegationTokenFetcher.cancelDelegationToken(httpAddress,token);

      return null;

    }

  }

);

  LOG.info("Cancel over HTTP done. addr=" + httpAddress);

}

Location: DelegationTokenRenewal.java

Content: 

private static void cancelToken(DelegationTokenToRenew t){

  Token<DelegationTokenIdentifier> token=t.token;

  Configuration conf=t.conf;

  if (token.getKind().equals(kindHdfs)) {

    dtCancelThread.cancelToken(token,conf);

  }

}

Location: DelegationTokenRenewal.java

Content: 

private static DistributedFileSystem getDFSForToken(Token<DelegationTokenIdentifier> token,final Configuration conf) throws Exception {

  DistributedFileSystem dfs=null;

  try {

    final URI uri=new URI(SCHEME + "://" + token.getService().toString());

    dfs=UserGroupInformation.getLoginUser().doAs(new PrivilegedExceptionAction<DistributedFileSystem>(){

      public DistributedFileSystem run() throws IOException {

        return (DistributedFileSystem)FileSystem.get(uri,conf);

      }

    }

);

  }

 catch (  Exception e) {

    LOG.warn("Failed to create a dfs to renew/cancel for:" + token.getService(),e);

    throw e;

  }

  return dfs;

}

Location: DelegationTokenRenewal.java

Content: 

private static String getHttpAddressForToken(Token<DelegationTokenIdentifier> token,final Configuration conf) throws IOException {

  String[] ipaddr=token.getService().toString().split(":");

  InetAddress iaddr=InetAddress.getByName(ipaddr[0]);

  String dnsName=iaddr.getCanonicalHostName();

  String httpsPort=conf.get("dfs.hftp.https.port");

  if (httpsPort == null) {

    httpsPort=conf.get(DFSConfigKeys.DFS_HTTPS_PORT_KEY,"" + DFSConfigKeys.DFS_HTTPS_PORT_DEFAULT);

  }

  return "https://" + dnsName + ":"+ httpsPort;

}

Location: DelegationTokenRenewal.java

Content: 

@SuppressWarnings("unchecked") public static synchronized void registerDelegationTokensForRenewal(JobID jobId,Credentials ts,Configuration conf){

  if (ts == null)   return;

  Collection<Token<? extends TokenIdentifier>> tokens=ts.getAllTokens();

  long now=System.currentTimeMillis();

  for (  Token<? extends TokenIdentifier> t : tokens) {

    if (!t.getKind().equals(kindHdfs)) {

      continue;

    }

    Token<DelegationTokenIdentifier> dt=(Token<DelegationTokenIdentifier>)t;

    DelegationTokenToRenew dtr=new DelegationTokenToRenew(jobId,dt,conf,now);

    addTokenToList(dtr);

    setTimerForTokenRenewal(dtr,true);

    LOG.info("registering token for renewal for service =" + dt.getService() + " and jobID = "+ jobId);

  }

}

Location: DelegationTokenRenewal.java

Content: 

/** 

 * removing DT for completed jobs

 * @param jobId

 */

public static void removeDelegationTokenRenewalForJob(JobID jobId){

synchronized (delegationTokens) {

    Iterator<DelegationTokenToRenew> it=delegationTokens.iterator();

    while (it.hasNext()) {

      DelegationTokenToRenew dttr=it.next();

      if (dttr.jobId.equals(jobId)) {

        if (LOG.isDebugEnabled())         LOG.debug("removing delegation token for jobid=" + jobId + ";t="+ dttr.token.getService());

        if (dttr.timerTask != null)         dttr.timerTask.cancel();

        cancelToken(dttr);

        it.remove();

      }

    }

  }

}

Location: DelegationTokenRenewal.java

Content: 

/** 

 * removing failed DT

 * @param jobId

 */

private static void removeFailedDelegationToken(DelegationTokenToRenew t){

  JobID jobId=t.jobId;

  if (LOG.isDebugEnabled())   LOG.debug("removing failed delegation token for jobid=" + jobId + ";t="+ t.token.getService());

  delegationTokens.remove(t);

  if (t.timerTask != null)   t.timerTask.cancel();

}

Location: DelegationTokenRenewal.java

Content: 

protected static long renewDelegationTokenOverHttps(final Token<DelegationTokenIdentifier> token,final Configuration conf) throws InterruptedException, IOException {

  final String httpAddress=getHttpAddressForToken(token,conf);

  LOG.info("address to renew=" + httpAddress + "; tok="+ token.getService());

  Long expDate=(Long)UserGroupInformation.getLoginUser().doAs(new PrivilegedExceptionAction<Long>(){

    public Long run() throws IOException {

      return DelegationTokenFetcher.renewDelegationToken(httpAddress,token);

    }

  }

);

  LOG.info("Renew over HTTP done. addr=" + httpAddress + ";res="+ expDate);

  return expDate;

}

Location: DelegationTokenRenewal.java

Content: 

private static long renewDelegationToken(DelegationTokenToRenew dttr) throws Exception {

  long newExpirationDate=System.currentTimeMillis() + 3600 * 1000;

  Token<DelegationTokenIdentifier> token=dttr.token;

  Configuration conf=dttr.conf;

  if (token.getKind().equals(kindHdfs)) {

    DistributedFileSystem dfs=null;

    try {

      dfs=getDFSForToken(token,conf);

    }

 catch (    IOException e) {

      LOG.info("couldn't get DFS to renew. Will retry over HTTPS");

      dfs=null;

    }

    try {

      if (dfs != null)       newExpirationDate=dfs.renewDelegationToken(token);

 else {

        newExpirationDate=renewDelegationTokenOverHttps(token,conf);

      }

    }

 catch (    InvalidToken ite) {

      LOG.warn("invalid token - not scheduling for renew");

      removeFailedDelegationToken(dttr);

      throw new IOException("failed to renew token",ite);

    }

catch (    AccessControlException ioe) {

      LOG.warn("failed to renew token:" + token,ioe);

      removeFailedDelegationToken(dttr);

      throw new IOException("failed to renew token",ioe);

    }

catch (    Exception e) {

      LOG.warn("failed to renew token:" + token,e);

    }

  }

 else {

    throw new Exception("unknown token type to renew:" + token.getKind());

  }

  return newExpirationDate;

}

Location: DelegationTokenRenewal.java

Content: 

/** 

 * find the soonest expiring token and set it for renew

 */

private static void setTimerForTokenRenewal(DelegationTokenToRenew token,boolean firstTime){

  long now=System.currentTimeMillis();

  long renewIn;

  if (firstTime) {

    renewIn=now;

  }

 else {

    long expiresIn=(token.expirationDate - now);

    renewIn=now + expiresIn - expiresIn / 10;

  }

  try {

    TimerTask tTask=new RenewalTimerTask(token);

    token.setTimerTask(tTask);

    renewalTimer.schedule(token.timerTask,new Date(renewIn));

  }

 catch (  Exception e) {

    LOG.warn("failed to schedule a task, token will not renew more",e);

  }

}

