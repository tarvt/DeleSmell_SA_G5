Location: TestReduceTask.java

Content: 

public void runValueIterator(Path tmpDir,Pair[] vals,Configuration conf,CompressionCodec codec) throws IOException {

  FileSystem localFs=FileSystem.getLocal(conf);

  FileSystem rfs=((LocalFileSystem)localFs).getRaw();

  Path path=new Path(tmpDir,"data.in");

  IFile.Writer<Text,Text> writer=new IFile.Writer<Text,Text>(conf,rfs,path,Text.class,Text.class,codec,null);

  for (  Pair p : vals) {

    writer.append(new Text(p.key),new Text(p.value));

  }

  writer.close();

  @SuppressWarnings("unchecked") RawKeyValueIterator rawItr=Merger.merge(conf,rfs,Text.class,Text.class,codec,new Path[]{path},false,conf.getInt(JobContext.IO_SORT_FACTOR,100),tmpDir,new Text.Comparator(),new NullProgress(),null,null,null);

  @SuppressWarnings("unchecked") ReduceTask.ValuesIterator valItr=new ReduceTask.ValuesIterator<Text,Text>(rawItr,WritableComparator.get(Text.class),Text.class,Text.class,conf,new NullProgress());

  int i=0;

  while (valItr.more()) {

    Object key=valItr.getKey();

    String keyString=key.toString();

    assertEquals(vals[i].key,keyString);

    assertTrue(valItr.hasNext());

    while (valItr.hasNext()) {

      String valueString=valItr.next().toString();

      assertEquals(vals[i].value,valueString);

      assertEquals(vals[i].key,valItr.getKey().toString());

      i+=1;

    }

    assertEquals(keyString,valItr.getKey().toString());

    valItr.nextKey();

  }

  assertEquals(vals.length,i);

  assertEquals(1.0f,rawItr.getProgress().get());

}

Location: TestReduceTask.java

Content: 

public void testValueIterator() throws Exception {

  Path tmpDir=new Path("build/test/test.reduce.task");

  Configuration conf=new Configuration();

  for (  Pair[] testCase : testCases) {

    runValueIterator(tmpDir,testCase,conf,null);

  }

}

Location: TestReduceTask.java

Content: 

public void testValueIteratorWithCompression() throws Exception {

  Path tmpDir=new Path("build/test/test.reduce.task.compression");

  Configuration conf=new Configuration();

  DefaultCodec codec=new DefaultCodec();

  codec.setConf(conf);

  for (  Pair[] testCase : testCases) {

    runValueIterator(tmpDir,testCase,conf,codec);

  }

}

