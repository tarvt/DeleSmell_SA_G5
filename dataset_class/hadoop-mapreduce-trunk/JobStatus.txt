Location: JobStatus.java

Content: 

@Override public Object clone(){

  try {

    return super.clone();

  }

 catch (  CloneNotSupportedException cnse) {

    throw new InternalError(cnse.toString());

  }

}

Location: JobStatus.java

Content: 

/** 

 * @return Percentage of progress in cleanup 

 */

public synchronized float getCleanupProgress(){

  return cleanupProgress;

}

Location: JobStatus.java

Content: 

static org.apache.hadoop.mapreduce.JobStatus.State getEnum(int state){

switch (state) {

case 1:

    return org.apache.hadoop.mapreduce.JobStatus.State.RUNNING;

case 2:

  return org.apache.hadoop.mapreduce.JobStatus.State.SUCCEEDED;

case 3:

return org.apache.hadoop.mapreduce.JobStatus.State.FAILED;

case 4:

return org.apache.hadoop.mapreduce.JobStatus.State.PREP;

case 5:

return org.apache.hadoop.mapreduce.JobStatus.State.KILLED;

}

return null;

}

Location: JobStatus.java

Content: 

/** 

 * @return the job history file name for a completed job. If job is not completed or history file not available then return null.

 */

public synchronized String getHistoryFile(){

  return historyFile;

}

Location: JobStatus.java

Content: 

/** 

 * Return the priority of the job

 * @return job priority

 */

public synchronized JobPriority getJobPriority(){

  return JobPriority.valueOf(super.getPriority().name());

}

Location: JobStatus.java

Content: 

/** 

 * Helper method to get human-readable state of the job.

 * @param state job state

 * @return human-readable state of the job

 */

public static String getJobRunState(int state){

  if (state < 1 || state >= runStates.length) {

    return UNKNOWN;

  }

  return runStates[state];

}

Location: JobStatus.java

Content: 

/** 

 * @return Percentage of progress in maps 

 */

public synchronized float getMapProgress(){

  return mapProgress;

}

Location: JobStatus.java

Content: 

static int getOldNewJobRunState(org.apache.hadoop.mapreduce.JobStatus.State state){

  return state.getValue();

}

Location: JobStatus.java

Content: 

/** 

 * @return Percentage of progress in reduce 

 */

public synchronized float getReduceProgress(){

  return reduceProgress;

}

Location: JobStatus.java

Content: 

/** 

 * @return Percentage of progress in setup 

 */

public synchronized float getSetupProgress(){

  return setupProgress;

}

Location: JobStatus.java

Content: 

/** 

 * Returns true if the status is for a completed job.

 */

public synchronized boolean isJobComplete(){

  return (runState == JobStatus.State.SUCCEEDED || runState == JobStatus.State.FAILED || runState == JobStatus.State.KILLED);

}

Location: JobStatus.java

Content: 

/** 

 */

public JobStatus(){

}

Location: JobStatus.java

Content: 

/** 

 * Create a job status object for a given jobid.

 * @param jobid The jobid of the job

 * @param setupProgress The progress made on the setup

 * @param mapProgress The progress made on the maps

 * @param reduceProgress The progress made on the reduces

 * @param cleanupProgress The progress made on the cleanup

 * @param runState The current state of the job

 * @param jp Priority of the job.

 * @param user userid of the person who submitted the job.

 * @param jobName user-specified job name.

 * @param jobFile job configuration file. 

 * @param trackingUrl link to the web-ui for details of the job.

 */

public JobStatus(JobID jobid,float setupProgress,float mapProgress,float reduceProgress,float cleanupProgress,int runState,JobPriority jp,String user,String jobName,String jobFile,String trackingUrl){

  super(jobid,setupProgress,mapProgress,reduceProgress,cleanupProgress,getEnum(runState),org.apache.hadoop.mapreduce.JobPriority.valueOf(jp.name()),user,jobName,jobFile,trackingUrl);

}

Location: JobStatus.java

Content: 

/** 

 * Create a job status object for a given jobid.

 * @param jobid The jobid of the job

 * @param setupProgress The progress made on the setup

 * @param mapProgress The progress made on the maps

 * @param reduceProgress The progress made on the reduces

 * @param cleanupProgress The progress made on the cleanup

 * @param runState The current state of the job

 * @param jp Priority of the job.

 * @param user userid of the person who submitted the job.

 * @param jobName user-specified job name.

 * @param jobFile job configuration file. 

 * @param trackingUrl link to the web-ui for details of the job.

 */

public JobStatus(JobID jobid,float setupProgress,float mapProgress,float reduceProgress,float cleanupProgress,State runState,JobPriority jp,String user,String jobName,String jobFile,String trackingUrl){

  this.jobid=jobid;

  this.setupProgress=setupProgress;

  this.mapProgress=mapProgress;

  this.reduceProgress=reduceProgress;

  this.cleanupProgress=cleanupProgress;

  this.runState=runState;

  this.user=user;

  if (jp == null) {

    throw new IllegalArgumentException("Job Priority cannot be null.");

  }

  priority=jp;

  this.jobName=jobName;

  this.jobFile=jobFile;

  this.trackingUrl=trackingUrl;

}

Location: JobStatus.java

Content: 

/** 

 * Create a job status object for a given jobid.

 * @param jobid The jobid of the job

 * @param mapProgress The progress made on the maps

 * @param reduceProgress The progress made on the reduces

 * @param runState The current state of the job

 * @param jp Priority of the job.

 * @param user userid of the person who submitted the job.

 * @param jobName user-specified job name.

 * @param jobFile job configuration file. 

 * @param trackingUrl link to the web-ui for details of the job.

 */

public JobStatus(JobID jobid,float mapProgress,float reduceProgress,float cleanupProgress,int runState,JobPriority jp,String user,String jobName,String jobFile,String trackingUrl){

  this(jobid,0.0f,mapProgress,reduceProgress,cleanupProgress,runState,jp,user,jobName,jobFile,trackingUrl);

}

Location: JobStatus.java

Content: 

/** 

 * Create a job status object for a given jobid.

 * @param jobid The jobid of the job

 * @param mapProgress The progress made on the maps

 * @param reduceProgress The progress made on the reduces

 * @param cleanupProgress The progress made on cleanup

 * @param runState The current state of the job

 * @param user userid of the person who submitted the job.

 * @param jobName user-specified job name.

 * @param jobFile job configuration file. 

 * @param trackingUrl link to the web-ui for details of the job.

 */

public JobStatus(JobID jobid,float mapProgress,float reduceProgress,float cleanupProgress,int runState,String user,String jobName,String jobFile,String trackingUrl){

  this(jobid,mapProgress,reduceProgress,cleanupProgress,runState,JobPriority.NORMAL,user,jobName,jobFile,trackingUrl);

}

Location: JobStatus.java

Content: 

/** 

 * Create a job status object for a given jobid.

 * @param jobid The jobid of the job

 * @param mapProgress The progress made on the maps

 * @param reduceProgress The progress made on the reduces

 * @param runState The current state of the job

 * @param user userid of the person who submitted the job.

 * @param jobName user-specified job name.

 * @param jobFile job configuration file. 

 * @param trackingUrl link to the web-ui for details of the job.

 */

public JobStatus(JobID jobid,float mapProgress,float reduceProgress,int runState,String user,String jobName,String jobFile,String trackingUrl){

  this(jobid,mapProgress,reduceProgress,0.0f,runState,user,jobName,jobFile,trackingUrl);

}

Location: JobStatus.java

Content: 

/** 

 * Sets the cleanup progress of this job

 * @param p The value of cleanup progress to set to

 */

protected synchronized void setCleanupProgress(float p){

  this.cleanupProgress=(float)Math.min(1.0,Math.max(0.0,p));

}

Location: JobStatus.java

Content: 

/** 

 * Set the job history file url for a completed job

 */

protected synchronized void setHistoryFile(String historyFile){

  this.historyFile=historyFile;

}

Location: JobStatus.java

Content: 

/** 

 * Set the job acls.

 * @param acls {@link Map} from {@link JobACL} to {@link AccessControlList}

 */

protected synchronized void setJobACLs(Map<JobACL,AccessControlList> acls){

  this.jobACLs=acls;

}

Location: JobStatus.java

Content: 

/** 

 * Set the priority of the job, defaulting to NORMAL.

 * @param jp new job priority

 */

public synchronized void setJobPriority(JobPriority jp){

  super.setPriority(org.apache.hadoop.mapreduce.JobPriority.valueOf(jp.name()));

}

Location: JobStatus.java

Content: 

/** 

 * Sets the map progress of this job

 * @param p The value of map progress to set to

 */

protected synchronized void setMapProgress(float p){

  this.mapProgress=(float)Math.min(1.0,Math.max(0.0,p));

}

Location: JobStatus.java

Content: 

/** 

 * Sets the reduce progress of this Job

 * @param p The value of reduce progress to set to

 */

protected synchronized void setReduceProgress(float p){

  this.reduceProgress=(float)Math.min(1.0,Math.max(0.0,p));

}

Location: JobStatus.java

Content: 

/** 

 * Set the job retire flag to true.

 */

protected synchronized void setRetired(){

  this.isRetired=true;

}

Location: JobStatus.java

Content: 

/** 

 * Change the current run state of the job.

 */

protected synchronized void setRunState(int state){

  super.setState(getEnum(state));

}

Location: JobStatus.java

Content: 

/** 

 * Used to set the scheduling information associated to a particular Job.

 * @param schedulingInfo Scheduling information of the job

 */

protected synchronized void setSchedulingInfo(String schedulingInfo){

  this.schedulingInfo=schedulingInfo;

}

Location: JobStatus.java

Content: 

/** 

 * Sets the setup progress of this job

 * @param p The value of setup progress to set to

 */

protected synchronized void setSetupProgress(float p){

  this.setupProgress=(float)Math.min(1.0,Math.max(0.0,p));

}

Location: JobStatus.java

Content: 

/** 

 * Change the current run state of the job.

 */

protected synchronized void setState(State state){

  this.runState=state;

}

Location: JobStatus.java

Content: 

/** 

 * Set the link to the web-ui for details of the job.

 */

protected synchronized void setTrackingUrl(String trackingUrl){

  this.trackingUrl=trackingUrl;

}

Location: JobStatus.java

Content: 

/** 

 * @param userName The username of the job

 */

protected synchronized void setUsername(String userName){

  this.user=userName;

}

