Location: TestTaskOwner.java

Content: 

@AfterClass public static void tearDown() throws java.lang.Exception {

  FileSystem fs=outDir.getFileSystem(cluster.getJTClient().getConf());

  fs.delete(outDir,true);

  fs.delete(inDir,true);

  cluster.tearDown();

}

Location: TestTaskOwner.java

Content: 

@Test public void testProcessPermission() throws Exception {

  Configuration conf=cluster.getJTClient().getConf();

  Job job=new Job(conf,"user name check");

  job.setJarByClass(UserNamePermission.class);

  job.setMapperClass(UserNamePermission.UserNameMapper.class);

  job.setCombinerClass(UserNamePermission.UserNameReducer.class);

  job.setMapOutputKeyClass(Text.class);

  job.setMapOutputValueClass(Text.class);

  job.setReducerClass(UserNamePermission.UserNameReducer.class);

  job.setNumReduceTasks(1);

  FileInputFormat.addInputPath(job,inDir);

  FileOutputFormat.setOutputPath(job,outDir);

  job.waitForCompletion(true);

  FileSystem fs=outDir.getFileSystem(conf);

  Path[] fileList=FileUtil.stat2Paths(fs.listStatus(outDir,new Utils.OutputFileUtils.OutputFilesFilter()));

  for (int i=0; i < fileList.length; ++i) {

    LOG.info("File list[" + i + "]"+ ": "+ fileList[i]);

    BufferedReader file=new BufferedReader(new InputStreamReader(fs.open(fileList[i])));

    String line=file.readLine();

    while (line != null) {

      StringTokenizer token=new StringTokenizer(line);

      if (token.hasMoreTokens()) {

        LOG.info("First token " + token.nextToken());

        String userName=token.nextToken();

        LOG.info("Next token " + userName);

        Assert.assertEquals("The user name did not match permission violation ",userName,System.getProperty("user.name").toString());

        break;

      }

    }

    file.close();

  }

}

