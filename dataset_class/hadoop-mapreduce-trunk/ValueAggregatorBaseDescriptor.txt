Location: ValueAggregatorBaseDescriptor.java

Content: 

/** 

 * @param type the aggregation type

 * @param id the aggregation id

 * @param val the val associated with the id to be aggregated

 * @return an Entry whose key is the aggregation id prefixed with the aggregation type.

 */

public static Entry<Text,Text> generateEntry(String type,String id,Text val){

  Text key=new Text(type + TYPE_SEPARATOR + id);

  return new MyEntry(key,val);

}

Location: ValueAggregatorBaseDescriptor.java

Content: 

/** 

 * @param type the aggregation type

 * @return a value aggregator of the given type.

 */

static public ValueAggregator generateValueAggregator(String type){

  ValueAggregator retv=null;

  if (type.compareToIgnoreCase(LONG_VALUE_SUM) == 0) {

    retv=new LongValueSum();

  }

  if (type.compareToIgnoreCase(LONG_VALUE_MAX) == 0) {

    retv=new LongValueMax();

  }

 else   if (type.compareToIgnoreCase(LONG_VALUE_MIN) == 0) {

    retv=new LongValueMin();

  }

 else   if (type.compareToIgnoreCase(STRING_VALUE_MAX) == 0) {

    retv=new StringValueMax();

  }

 else   if (type.compareToIgnoreCase(STRING_VALUE_MIN) == 0) {

    retv=new StringValueMin();

  }

 else   if (type.compareToIgnoreCase(DOUBLE_VALUE_SUM) == 0) {

    retv=new DoubleValueSum();

  }

 else   if (type.compareToIgnoreCase(UNIQ_VALUE_COUNT) == 0) {

    retv=new UniqValueCount(maxNumItems);

  }

 else   if (type.compareToIgnoreCase(VALUE_HISTOGRAM) == 0) {

    retv=new ValueHistogram();

  }

  return retv;

}

Location: ValueAggregatorBaseDescriptor.java

Content: 

/** 

 * @param type the aggregation type

 * @param uniqCount the limit in the number of unique values to keep, if type is UNIQ_VALUE_COUNT 

 * @return a value aggregator of the given type.

 */

static public ValueAggregator generateValueAggregator(String type,long uniqCount){

  if (type.compareToIgnoreCase(LONG_VALUE_SUM) == 0) {

    return new LongValueSum();

  }

  if (type.compareToIgnoreCase(LONG_VALUE_MAX) == 0) {

    return new LongValueMax();

  }

 else   if (type.compareToIgnoreCase(LONG_VALUE_MIN) == 0) {

    return new LongValueMin();

  }

 else   if (type.compareToIgnoreCase(STRING_VALUE_MAX) == 0) {

    return new StringValueMax();

  }

 else   if (type.compareToIgnoreCase(STRING_VALUE_MIN) == 0) {

    return new StringValueMin();

  }

 else   if (type.compareToIgnoreCase(DOUBLE_VALUE_SUM) == 0) {

    return new DoubleValueSum();

  }

 else   if (type.compareToIgnoreCase(UNIQ_VALUE_COUNT) == 0) {

    return new UniqValueCount(uniqCount);

  }

 else   if (type.compareToIgnoreCase(VALUE_HISTOGRAM) == 0) {

    return new ValueHistogram();

  }

  return null;

}

