Location: PseudoLocalFs.java

Content: 

@Override public FSDataOutputStream append(Path path,int bufferSize,Progressable progress) throws IOException {

  throw new UnsupportedOperationException("Append is not supported" + " in pseudo local file system.");

}

Location: PseudoLocalFs.java

Content: 

/** 

 * Creating a pseudo local file is nothing but validating the file path. Actual data of the file is generated on the fly when client tries to open the file for reading.

 * @param path file path to be created

 */

@Override public FSDataOutputStream create(Path path) throws IOException {

  try {

    validateFileNameFormat(path);

  }

 catch (  FileNotFoundException e) {

    throw new IOException("File creation failed for " + path);

  }

  return null;

}

Location: PseudoLocalFs.java

Content: 

@Override public boolean exists(Path path){

  try {

    validateFileNameFormat(path);

  }

 catch (  FileNotFoundException e) {

    return false;

  }

  return true;

}

Location: PseudoLocalFs.java

Content: 

/** 

 * Generates a valid pseudo local file path from the given <code>fileId</code> and <code>fileSize</code>.

 * @param fileId unique file id string

 * @param fileSize file size

 * @return the generated relative path

 */

static Path generateFilePath(String fileId,long fileSize){

  return new Path(fileId + "." + fileSize);

}

Location: PseudoLocalFs.java

Content: 

/** 

 * @See create(Path) for details

 */

@Override public FSDataInputStream open(Path path) throws IOException {

  return open(path,DEFAULT_BUFFER_SIZE);

}

Location: PseudoLocalFs.java

Content: 

PseudoLocalFs(){

  this(new Path(HOME_DIR));

}

Location: PseudoLocalFs.java

Content: 

PseudoLocalFs(Path home){

  super();

  this.home=home;

}

Location: PseudoLocalFs.java

Content: 

@Override public boolean rename(Path src,Path dst) throws IOException {

  throw new UnsupportedOperationException("Rename is not supported" + " in pseudo local file system.");

}

Location: PseudoLocalFs.java

Content: 

/** 

 * Validate if the path provided is of expected format of Pseudo Local File System based files.

 * @param path file path

 * @return the file size

 * @throws FileNotFoundException

 */

long validateFileNameFormat(Path path) throws FileNotFoundException {

  path=path.makeQualified(this);

  boolean valid=true;

  long fileSize=0;

  if (!path.toUri().getScheme().equals(getUri().getScheme())) {

    valid=false;

  }

 else {

    String[] parts=path.toUri().getPath().split("\\.");

    try {

      fileSize=Long.valueOf(parts[parts.length - 1]);

      valid=(fileSize >= 0);

    }

 catch (    NumberFormatException e) {

      valid=false;

    }

  }

  if (!valid) {

    throw new FileNotFoundException("File " + path + " does not exist in pseudo local file system");

  }

  return fileSize;

}

