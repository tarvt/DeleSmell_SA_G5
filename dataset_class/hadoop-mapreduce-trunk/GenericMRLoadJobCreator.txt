Location: GenericMRLoadJobCreator.java

Content: 

public static Job createJob(String[] argv,boolean mapoutputCompressed,boolean outputCompressed) throws Exception {

  Job job=new Job();

  job.setJarByClass(GenericMRLoadGenerator.class);

  job.setMapperClass(SampleMapper.class);

  job.setReducerClass(SampleReducer.class);

  if (!parseArgs(argv,job)) {

    return null;

  }

  if (null == FileOutputFormat.getOutputPath(job)) {

    job.setOutputFormatClass(NullOutputFormat.class);

  }

  Configuration conf=job.getConfiguration();

  if (0 == FileInputFormat.getInputPaths(job).length) {

    System.err.println("No input path; ignoring InputFormat");

    confRandom(job);

  }

 else   if (null != conf.getClass(INDIRECT_INPUT_FORMAT,null)) {

    JobClient jClient=new JobClient(conf);

    Path sysdir=jClient.getSystemDir();

    Random r=new Random();

    Path indirInputFile=new Path(sysdir,Integer.toString(r.nextInt(Integer.MAX_VALUE),36) + "_files");

    conf.set(INDIRECT_INPUT_FILE,indirInputFile.toString());

    SequenceFile.Writer writer=SequenceFile.createWriter(sysdir.getFileSystem(conf),conf,indirInputFile,LongWritable.class,Text.class,SequenceFile.CompressionType.NONE);

    try {

      for (      Path p : FileInputFormat.getInputPaths(job)) {

        FileSystem fs=p.getFileSystem(conf);

        Stack<Path> pathstack=new Stack<Path>();

        pathstack.push(p);

        while (!pathstack.empty()) {

          for (          FileStatus stat : fs.listStatus(pathstack.pop())) {

            if (stat.isDirectory()) {

              if (!stat.getPath().getName().startsWith("_")) {

                pathstack.push(stat.getPath());

              }

            }

 else {

              writer.sync();

              writer.append(new LongWritable(stat.getLen()),new Text(stat.getPath().toUri().toString()));

            }

          }

        }

      }

    }

  finally {

      writer.close();

    }

  }

  conf.setBoolean(MRJobConfig.MAP_OUTPUT_COMPRESS,mapoutputCompressed);

  conf.setBoolean(FileOutputFormat.COMPRESS,outputCompressed);

  return job;

}

