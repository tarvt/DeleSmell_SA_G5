Location: TestStreamingExitStatus.java

Content: 

protected String[] genArgs(boolean exitStatusIsFailure,boolean failMap){

  return new String[]{"-input",INPUT_FILE.getAbsolutePath(),"-output",OUTPUT_DIR.getAbsolutePath(),"-mapper",(failMap ? failingTask : echoTask),"-reducer",(failMap ? echoTask : failingTask),"-jobconf","mapreduce.task.files.preserve.failedtasks=true","-jobconf","stream.non.zero.exit.is.failure=" + exitStatusIsFailure,"-jobconf","stream.tmpdir=" + System.getProperty("test.build.data","/tmp"),"-jobconf","mapreduce.task.io.sort.mb=10"};

}

Location: TestStreamingExitStatus.java

Content: 

public void runStreamJob(boolean exitStatusIsFailure,boolean failMap) throws Exception {

  boolean mayExit=false;

  int returnStatus=0;

  StreamJob job=new StreamJob(genArgs(exitStatusIsFailure,failMap),mayExit);

  returnStatus=job.go();

  if (exitStatusIsFailure) {

    assertEquals("Streaming Job failure code expected",1,returnStatus);

  }

 else {

    assertEquals("Streaming Job expected to succeed",0,returnStatus);

  }

}

Location: TestStreamingExitStatus.java

Content: 

@Test public void testMapFailNotOk() throws Exception {

  runStreamJob(true,true);

}

Location: TestStreamingExitStatus.java

Content: 

@Test public void testMapFailOk() throws Exception {

  runStreamJob(false,true);

}

Location: TestStreamingExitStatus.java

Content: 

@Test public void testReduceFailNotOk() throws Exception {

  runStreamJob(true,false);

}

Location: TestStreamingExitStatus.java

Content: 

@Test public void testReduceFailOk() throws Exception {

  runStreamJob(false,false);

}

Location: TestStreamingExitStatus.java

Content: 

public TestStreamingExitStatus() throws IOException {

  UtilTest utilTest=new UtilTest(getClass().getName());

  utilTest.checkUserDir();

  utilTest.redirectIfAntJunit();

}

