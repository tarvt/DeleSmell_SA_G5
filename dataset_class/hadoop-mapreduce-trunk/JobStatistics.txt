Location: JobStatistics.java

Content: 

private TaskAttemptInfo getLastSuccessfulTaskAttempt(TaskInfo task){

  for (  TaskAttemptInfo ai : task.getAllTaskAttempts().values()) {

    if (ai.getTaskStatus().equals(TaskStatus.State.SUCCEEDED.toString())) {

      return ai;

    }

  }

  return null;

}

Location: JobStatistics.java

Content: 

public JobStatistics(JobConf jobConf,JobInfo jobInfo) throws ParseException {

  this._jobConf=jobConf;

  this._jobInfo=jobInfo;

  this._job=new Hashtable<Enum,String>();

  populate_Job(this._job,jobInfo);

  populate_MapReduceTaskLists(this._mapTaskList,this._reduceTaskList,jobInfo.getAllTasks());

  if (getLongValue(JobKeys.TOTAL_REDUCES) == 0) {

    this._job.put(JobKeys.JOBTYPE,"MAP_ONLY");

  }

 else {

    this._job.put(JobKeys.JOBTYPE,"MAP_REDUCE");

  }

}

Location: JobStatistics.java

Content: 

private void parseAndAddJobCounters(Hashtable<Enum,String> job,String counters) throws ParseException {

  Counters cnt=Counters.fromEscapedCompactString(counters);

  for (java.util.Iterator<Counters.Group> grps=cnt.iterator(); grps.hasNext(); ) {

    Counters.Group grp=grps.next();

    for (java.util.Iterator<Counters.Counter> mycounters=grp.iterator(); mycounters.hasNext(); ) {

      Counters.Counter counter=mycounters.next();

      String countername=grp.getDisplayName() + "." + counter.getDisplayName();

      String value=(new Long(counter.getValue())).toString();

      String[] parts={countername,value};

      if (parts[0].equals("FileSystemCounters.FILE_BYTES_READ")) {

        job.put(JobKeys.FILE_BYTES_READ,parts[1]);

      }

 else       if (parts[0].equals("FileSystemCounters.FILE_BYTES_WRITTEN")) {

        job.put(JobKeys.FILE_BYTES_WRITTEN,parts[1]);

      }

 else       if (parts[0].equals("FileSystemCounters.HDFS_BYTES_READ")) {

        job.put(JobKeys.HDFS_BYTES_READ,parts[1]);

      }

 else       if (parts[0].equals("FileSystemCounters.HDFS_BYTES_WRITTEN")) {

        job.put(JobKeys.HDFS_BYTES_WRITTEN,parts[1]);

      }

 else       if (parts[0].equals("Job Counters .Launched map tasks")) {

        job.put(JobKeys.LAUNCHED_MAPS,parts[1]);

      }

 else       if (parts[0].equals("Job Counters .Launched reduce tasks")) {

        job.put(JobKeys.LAUNCHED_REDUCES,parts[1]);

      }

 else       if (parts[0].equals("Job Counters .Data-local map tasks")) {

        job.put(JobKeys.DATALOCAL_MAPS,parts[1]);

      }

 else       if (parts[0].equals("Job Counters .Rack-local map tasks")) {

        job.put(JobKeys.RACKLOCAL_MAPS,parts[1]);

      }

 else       if (parts[0].equals("Map-Reduce Framework.Map input records")) {

        job.put(JobKeys.MAP_INPUT_RECORDS,parts[1]);

      }

 else       if (parts[0].equals("Map-Reduce Framework.Map output records")) {

        job.put(JobKeys.MAP_OUTPUT_RECORDS,parts[1]);

      }

 else       if (parts[0].equals("Map-Reduce Framework.Map input bytes")) {

        job.put(JobKeys.MAP_INPUT_BYTES,parts[1]);

      }

 else       if (parts[0].equals("Map-Reduce Framework.Map output bytes")) {

        job.put(JobKeys.MAP_OUTPUT_BYTES,parts[1]);

      }

 else       if (parts[0].equals("Map-Reduce Framework.Combine input records")) {

        job.put(JobKeys.COMBINE_INPUT_RECORDS,parts[1]);

      }

 else       if (parts[0].equals("Map-Reduce Framework.Combine output records")) {

        job.put(JobKeys.COMBINE_OUTPUT_RECORDS,parts[1]);

      }

 else       if (parts[0].equals("Map-Reduce Framework.Reduce input groups")) {

        job.put(JobKeys.REDUCE_INPUT_GROUPS,parts[1]);

      }

 else       if (parts[0].equals("Map-Reduce Framework.Reduce input records")) {

        job.put(JobKeys.REDUCE_INPUT_RECORDS,parts[1]);

      }

 else       if (parts[0].equals("Map-Reduce Framework.Reduce output records")) {

        job.put(JobKeys.REDUCE_OUTPUT_RECORDS,parts[1]);

      }

 else       if (parts[0].equals("Map-Reduce Framework.Spilled Records")) {

        job.put(JobKeys.SPILLED_RECORDS,parts[1]);

      }

 else       if (parts[0].equals("Map-Reduce Framework.Reduce shuffle bytes")) {

        job.put(JobKeys.SHUFFLE_BYTES,parts[1]);

      }

 else {

        System.err.println("JobCounterKey:<" + parts[0] + "> ==> NOT INCLUDED IN PERFORMANCE ADVISOR");

      }

    }

  }

}

Location: JobStatistics.java

Content: 

private void parseAndAddMapTaskCounters(MapTaskStatistics mapTask,String counters) throws ParseException {

  Counters cnt=Counters.fromEscapedCompactString(counters);

  for (java.util.Iterator<Counters.Group> grps=cnt.iterator(); grps.hasNext(); ) {

    Counters.Group grp=grps.next();

    for (java.util.Iterator<Counters.Counter> mycounters=grp.iterator(); mycounters.hasNext(); ) {

      Counters.Counter counter=mycounters.next();

      String countername=grp.getDisplayName() + "." + counter.getDisplayName();

      String value=(new Long(counter.getValue())).toString();

      String[] parts={countername,value};

      if (parts[0].equals("FileSystemCounters.FILE_BYTES_READ")) {

        mapTask.setValue(MapTaskKeys.FILE_BYTES_READ,parts[1]);

      }

 else       if (parts[0].equals("FileSystemCounters.FILE_BYTES_WRITTEN")) {

        mapTask.setValue(MapTaskKeys.FILE_BYTES_WRITTEN,parts[1]);

      }

 else       if (parts[0].equals("FileSystemCounters.HDFS_BYTES_READ")) {

        mapTask.setValue(MapTaskKeys.HDFS_BYTES_READ,parts[1]);

      }

 else       if (parts[0].equals("FileSystemCounters.HDFS_BYTES_WRITTEN")) {

        mapTask.setValue(MapTaskKeys.HDFS_BYTES_WRITTEN,parts[1]);

      }

 else       if (parts[0].equals("Map-Reduce Framework.Map input records")) {

        mapTask.setValue(MapTaskKeys.INPUT_RECORDS,parts[1]);

      }

 else       if (parts[0].equals("Map-Reduce Framework.Map output records")) {

        mapTask.setValue(MapTaskKeys.OUTPUT_RECORDS,parts[1]);

      }

 else       if (parts[0].equals("Map-Reduce Framework.Map output bytes")) {

        mapTask.setValue(MapTaskKeys.OUTPUT_BYTES,parts[1]);

      }

 else       if (parts[0].equals("Map-Reduce Framework.Combine input records")) {

        mapTask.setValue(MapTaskKeys.COMBINE_INPUT_RECORDS,parts[1]);

      }

 else       if (parts[0].equals("Map-Reduce Framework.Combine output records")) {

        mapTask.setValue(MapTaskKeys.COMBINE_OUTPUT_RECORDS,parts[1]);

      }

 else       if (parts[0].equals("Map-Reduce Framework.Spilled Records")) {

        mapTask.setValue(MapTaskKeys.SPILLED_RECORDS,parts[1]);

      }

 else       if (parts[0].equals("FileInputFormatCounters.BYTES_READ")) {

        mapTask.setValue(MapTaskKeys.INPUT_BYTES,parts[1]);

      }

 else {

        System.err.println("MapCounterKey:<" + parts[0] + "> ==> NOT INCLUDED IN PERFORMANCE ADVISOR MAP TASK");

      }

    }

  }

}

Location: JobStatistics.java

Content: 

private void parseAndAddReduceTaskCounters(ReduceTaskStatistics reduceTask,String counters) throws ParseException {

  Counters cnt=Counters.fromEscapedCompactString(counters);

  for (java.util.Iterator<Counters.Group> grps=cnt.iterator(); grps.hasNext(); ) {

    Counters.Group grp=grps.next();

    for (java.util.Iterator<Counters.Counter> mycounters=grp.iterator(); mycounters.hasNext(); ) {

      Counters.Counter counter=mycounters.next();

      String countername=grp.getDisplayName() + "." + counter.getDisplayName();

      String value=(new Long(counter.getValue())).toString();

      String[] parts={countername,value};

      if (parts[0].equals("FileSystemCounters.FILE_BYTES_READ")) {

        reduceTask.setValue(ReduceTaskKeys.FILE_BYTES_READ,parts[1]);

      }

 else       if (parts[0].equals("FileSystemCounters.FILE_BYTES_WRITTEN")) {

        reduceTask.setValue(ReduceTaskKeys.FILE_BYTES_WRITTEN,parts[1]);

      }

 else       if (parts[0].equals("FileSystemCounters.HDFS_BYTES_READ")) {

        reduceTask.setValue(ReduceTaskKeys.HDFS_BYTES_READ,parts[1]);

      }

 else       if (parts[0].equals("FileSystemCounters.HDFS_BYTES_WRITTEN")) {

        reduceTask.setValue(ReduceTaskKeys.HDFS_BYTES_WRITTEN,parts[1]);

      }

 else       if (parts[0].equals("Map-Reduce Framework.Reduce input records")) {

        reduceTask.setValue(ReduceTaskKeys.INPUT_RECORDS,parts[1]);

      }

 else       if (parts[0].equals("Map-Reduce Framework.Reduce output records")) {

        reduceTask.setValue(ReduceTaskKeys.OUTPUT_RECORDS,parts[1]);

      }

 else       if (parts[0].equals("Map-Reduce Framework.Combine input records")) {

        reduceTask.setValue(ReduceTaskKeys.COMBINE_INPUT_RECORDS,parts[1]);

      }

 else       if (parts[0].equals("Map-Reduce Framework.Combine output records")) {

        reduceTask.setValue(ReduceTaskKeys.COMBINE_OUTPUT_RECORDS,parts[1]);

      }

 else       if (parts[0].equals("Map-Reduce Framework.Reduce input groups")) {

        reduceTask.setValue(ReduceTaskKeys.INPUT_GROUPS,parts[1]);

      }

 else       if (parts[0].equals("Map-Reduce Framework.Spilled Records")) {

        reduceTask.setValue(ReduceTaskKeys.SPILLED_RECORDS,parts[1]);

      }

 else       if (parts[0].equals("Map-Reduce Framework.Reduce shuffle bytes")) {

        reduceTask.setValue(ReduceTaskKeys.SHUFFLE_BYTES,parts[1]);

      }

 else {

        System.err.println("ReduceCounterKey:<" + parts[0] + "> ==> NOT INCLUDED IN PERFORMANCE ADVISOR REDUCE TASK");

      }

    }

  }

}

Location: JobStatistics.java

Content: 

private void populate_Job(Hashtable<Enum,String> job,JobInfo jobInfo) throws ParseException {

  job.put(JobKeys.FINISH_TIME,String.valueOf(jobInfo.getFinishTime()));

  job.put(JobKeys.JOBID,jobInfo.getJobId().toString());

  job.put(JobKeys.JOBNAME,jobInfo.getJobname());

  job.put(JobKeys.USER,jobInfo.getUsername());

  job.put(JobKeys.JOBCONF,jobInfo.getJobConfPath());

  job.put(JobKeys.SUBMIT_TIME,String.valueOf(jobInfo.getSubmitTime()));

  job.put(JobKeys.LAUNCH_TIME,String.valueOf(jobInfo.getLaunchTime()));

  job.put(JobKeys.TOTAL_MAPS,String.valueOf(jobInfo.getTotalMaps()));

  job.put(JobKeys.TOTAL_REDUCES,String.valueOf(jobInfo.getTotalReduces()));

  job.put(JobKeys.FAILED_MAPS,String.valueOf(jobInfo.getFailedMaps()));

  job.put(JobKeys.FAILED_REDUCES,String.valueOf(jobInfo.getFailedReduces()));

  job.put(JobKeys.FINISHED_MAPS,String.valueOf(jobInfo.getFinishedMaps()));

  job.put(JobKeys.FINISHED_REDUCES,String.valueOf(jobInfo.getFinishedReduces()));

  job.put(JobKeys.STATUS,jobInfo.getJobStatus().toString());

  job.put(JobKeys.JOB_PRIORITY,jobInfo.getPriority());

  parseAndAddJobCounters(job,jobInfo.getTotalCounters().toString());

}

Location: JobStatistics.java

Content: 

private void populate_MapReduceTaskLists(ArrayList<MapTaskStatistics> mapTaskList,ArrayList<ReduceTaskStatistics> reduceTaskList,Map<TaskID,TaskInfo> taskMap) throws ParseException {

  int num_tasks=taskMap.entrySet().size();

  for (  JobHistoryParser.TaskInfo taskInfo : taskMap.values()) {

    if (taskInfo.getTaskType().equals(TaskType.MAP)) {

      MapTaskStatistics mapT=new MapTaskStatistics();

      TaskAttemptInfo successfulAttempt=getLastSuccessfulTaskAttempt(taskInfo);

      mapT.setValue(MapTaskKeys.TASK_ID,successfulAttempt.getAttemptId().getTaskID().toString());

      mapT.setValue(MapTaskKeys.ATTEMPT_ID,successfulAttempt.getAttemptId().toString());

      mapT.setValue(MapTaskKeys.HOSTNAME,successfulAttempt.getTrackerName());

      mapT.setValue(MapTaskKeys.TASK_TYPE,successfulAttempt.getTaskType().toString());

      mapT.setValue(MapTaskKeys.STATUS,successfulAttempt.getTaskStatus().toString());

      mapT.setValue(MapTaskKeys.START_TIME,successfulAttempt.getStartTime());

      mapT.setValue(MapTaskKeys.FINISH_TIME,successfulAttempt.getFinishTime());

      mapT.setValue(MapTaskKeys.SPLITS,taskInfo.getSplitLocations());

      mapT.setValue(MapTaskKeys.TRACKER_NAME,successfulAttempt.getTrackerName());

      mapT.setValue(MapTaskKeys.STATE_STRING,successfulAttempt.getState());

      mapT.setValue(MapTaskKeys.HTTP_PORT,successfulAttempt.getHttpPort());

      mapT.setValue(MapTaskKeys.ERROR,successfulAttempt.getError());

      parseAndAddMapTaskCounters(mapT,successfulAttempt.getCounters().toString());

      mapTaskList.add(mapT);

      mapT.setValue(MapTaskKeys.NUM_ATTEMPTS,(new Integer(taskInfo.getAllTaskAttempts().size())).toString());

      long etime=mapT.getLongValue(MapTaskKeys.FINISH_TIME) - mapT.getLongValue(MapTaskKeys.START_TIME);

      mapT.setValue(MapTaskKeys.EXECUTION_TIME,(new Long(etime)).toString());

    }

 else     if (taskInfo.getTaskType().equals(TaskType.REDUCE)) {

      ReduceTaskStatistics reduceT=new ReduceTaskStatistics();

      TaskAttemptInfo successfulAttempt=getLastSuccessfulTaskAttempt(taskInfo);

      reduceT.setValue(ReduceTaskKeys.TASK_ID,successfulAttempt.getAttemptId().getTaskID().toString());

      reduceT.setValue(ReduceTaskKeys.ATTEMPT_ID,successfulAttempt.getAttemptId().toString());

      reduceT.setValue(ReduceTaskKeys.HOSTNAME,successfulAttempt.getTrackerName());

      reduceT.setValue(ReduceTaskKeys.TASK_TYPE,successfulAttempt.getTaskType().toString());

      reduceT.setValue(ReduceTaskKeys.STATUS,successfulAttempt.getTaskStatus().toString());

      reduceT.setValue(ReduceTaskKeys.START_TIME,successfulAttempt.getStartTime());

      reduceT.setValue(ReduceTaskKeys.FINISH_TIME,successfulAttempt.getFinishTime());

      reduceT.setValue(ReduceTaskKeys.SHUFFLE_FINISH_TIME,successfulAttempt.getShuffleFinishTime());

      reduceT.setValue(ReduceTaskKeys.SORT_FINISH_TIME,successfulAttempt.getSortFinishTime());

      reduceT.setValue(ReduceTaskKeys.SPLITS,"");

      reduceT.setValue(ReduceTaskKeys.TRACKER_NAME,successfulAttempt.getTrackerName());

      reduceT.setValue(ReduceTaskKeys.STATE_STRING,successfulAttempt.getState());

      reduceT.setValue(ReduceTaskKeys.HTTP_PORT,successfulAttempt.getHttpPort());

      parseAndAddReduceTaskCounters(reduceT,successfulAttempt.getCounters().toString());

      reduceTaskList.add(reduceT);

      reduceT.setValue(ReduceTaskKeys.NUM_ATTEMPTS,(new Integer(taskInfo.getAllTaskAttempts().size())).toString());

      long etime1=reduceT.getLongValue(ReduceTaskKeys.FINISH_TIME) - reduceT.getLongValue(ReduceTaskKeys.START_TIME);

      reduceT.setValue(ReduceTaskKeys.EXECUTION_TIME,(new Long(etime1)).toString());

    }

 else     if (taskInfo.getTaskType().equals(TaskType.JOB_CLEANUP) || taskInfo.getTaskType().equals(TaskType.JOB_SETUP)) {

    }

 else {

      System.err.println("UNKNOWN TASK TYPE : " + taskInfo.getTaskType());

    }

  }

}

Location: JobStatistics.java

Content: 

private ArrayList<MapTaskStatistics> sortMapTasksByKey(ArrayList<MapTaskStatistics> mapTasks,Enum key,Enum dataType){

  MapCounterComparator mcc=new MapCounterComparator(key,dataType);

  Collections.sort(mapTasks,mcc);

  return mapTasks;

}

Location: JobStatistics.java

Content: 

private ArrayList<ReduceTaskStatistics> sortReduceTasksByKey(ArrayList<ReduceTaskStatistics> reduceTasks,Enum key,Enum dataType){

  ReduceCounterComparator rcc=new ReduceCounterComparator(key,dataType);

  Collections.sort(reduceTasks,rcc);

  return reduceTasks;

}

