Location: TestGridmixSubmission.java

Content: 

private void doSubmission(boolean useDefaultQueue,boolean defaultOutputPath) throws Exception {

  final Path in=new Path("foo").makeQualified(GridmixTestUtils.dfs);

  final Path out=GridmixTestUtils.DEST.makeQualified(GridmixTestUtils.dfs);

  final Path root=new Path("/user");

  Configuration conf=null;

  try {

    ArrayList<String> argsList=new ArrayList<String>();

    argsList.add("-D" + FilePool.GRIDMIX_MIN_FILE + "=0");

    argsList.add("-D" + Gridmix.GRIDMIX_USR_RSV + "="+ EchoUserResolver.class.getName());

    if (!defaultOutputPath) {

      argsList.add("-D" + Gridmix.GRIDMIX_OUT_DIR + "="+ out);

    }

    argsList.add("-generate");

    argsList.add(String.valueOf(GENDATA) + "m");

    argsList.add(in.toString());

    argsList.add("-");

    String[] argv=argsList.toArray(new String[argsList.size()]);

    DebugGridmix client=new DebugGridmix();

    conf=new Configuration();

    conf.setEnum(GridmixJobSubmissionPolicy.JOB_SUBMISSION_POLICY,policy);

    if (useDefaultQueue) {

      conf.setBoolean(GridmixJob.GRIDMIX_USE_QUEUE_IN_TRACE,false);

      conf.set(GridmixJob.GRIDMIX_DEFAULT_QUEUE,"q1");

    }

 else {

      conf.setBoolean(GridmixJob.GRIDMIX_USE_QUEUE_IN_TRACE,true);

    }

    conf=GridmixTestUtils.mrCluster.createJobConf(new JobConf(conf));

    GridmixTestUtils.dfs.mkdirs(root,new FsPermission((short)0777));

    GridmixTestUtils.dfs.setPermission(root,new FsPermission((short)0777));

    int res=ToolRunner.run(conf,client,argv);

    assertEquals("Client exited with nonzero status",0,res);

    client.checkMonitor();

  }

 catch (  Exception e) {

    e.printStackTrace();

  }

 finally {

    in.getFileSystem(conf).delete(in,true);

    out.getFileSystem(conf).delete(out,true);

    root.getFileSystem(conf).delete(root,true);

  }

}

Location: TestGridmixSubmission.java

Content: 

/** 

 * Expands a file compressed using  {@code gzip}.

 * @param fs the {@code FileSystem} corresponding to the givenfile.

 * @param in the path to the compressed file.

 * @param out the path to the uncompressed output.

 * @throws Exception if there was an error during the operation.

 */

private void expandGzippedTrace(FileSystem fs,Path in,Path out) throws Exception {

  byte[] buff=new byte[4096];

  GZIPInputStream gis=new GZIPInputStream(fs.open(in));

  FSDataOutputStream fsdos=fs.create(out);

  int numRead;

  while ((numRead=gis.read(buff,0,buff.length)) != -1) {

    fsdos.write(buff,0,numRead);

  }

  gis.close();

  fsdos.close();

}

Location: TestGridmixSubmission.java

Content: 

@Test public void testStressSubmitWithDefaultQueue() throws Exception {

  policy=GridmixJobSubmissionPolicy.STRESS;

  System.out.println(" Stress with default q started at " + System.currentTimeMillis());

  doSubmission(true,false);

  System.out.println(" Stress with default q ended at " + System.currentTimeMillis());

}

Location: TestGridmixSubmission.java

Content: 

/** 

 * Tests the reading of traces in GridMix3. These traces are generated by Rumen and are in the JSON format. The traces can optionally be compressed and uncompressed traces can also be passed to GridMix3 via its standard input stream. The testing is effected via JUnit assertions.

 * @throws Exception if there was an error.

 */

@Test public void testTraceReader() throws Exception {

  Configuration conf=new Configuration();

  FileSystem lfs=FileSystem.getLocal(conf);

  Path rootInputDir=new Path(System.getProperty("src.test.data"));

  rootInputDir=rootInputDir.makeQualified(lfs.getUri(),lfs.getWorkingDirectory());

  Path rootTempDir=new Path(System.getProperty("test.build.data",System.getProperty("java.io.tmpdir")),"testTraceReader");

  rootTempDir=rootTempDir.makeQualified(lfs.getUri(),lfs.getWorkingDirectory());

  Path inputFile=new Path(rootInputDir,"wordcount.json.gz");

  Path tempFile=new Path(rootTempDir,"gridmix3-wc.json");

  InputStream origStdIn=System.in;

  InputStream tmpIs=null;

  try {

    DebugGridmix dgm=new DebugGridmix();

    JobStoryProducer jsp=dgm.createJobStoryProducer(inputFile.toString(),conf);

    System.out.println("Verifying JobStory from compressed trace...");

    verifyWordCountJobStory(jsp.getNextJob());

    expandGzippedTrace(lfs,inputFile,tempFile);

    jsp=dgm.createJobStoryProducer(tempFile.toString(),conf);

    System.out.println("Verifying JobStory from uncompressed trace...");

    verifyWordCountJobStory(jsp.getNextJob());

    tmpIs=lfs.open(tempFile);

    System.setIn(tmpIs);

    System.out.println("Verifying JobStory from trace in standard input...");

    jsp=dgm.createJobStoryProducer("-",conf);

    verifyWordCountJobStory(jsp.getNextJob());

  }

  finally {

    System.setIn(origStdIn);

    if (tmpIs != null) {

      tmpIs.close();

    }

    lfs.delete(rootTempDir,true);

  }

}

Location: TestGridmixSubmission.java

Content: 

/** 

 * Verifies that the given  {@code JobStory} corresponds to the checked-inWordCount  {@code JobStory}. The verification is effected via JUnit assertions.

 * @param js the candidate JobStory.

 */

private void verifyWordCountJobStory(JobStory js){

  assertNotNull("Null JobStory",js);

  String expectedJobStory="WordCount:johndoe:default:1285322645148:3:1";

  String actualJobStory=js.getName() + ":" + js.getUser()+ ":"+ js.getQueueName()+ ":"+ js.getSubmissionTime()+ ":"+ js.getNumberMaps()+ ":"+ js.getNumberReduces();

  assertEquals("Unexpected JobStory",expectedJobStory,actualJobStory);

}

