Location: ProcfsBasedProcessTree.java

Content: 

/** 

 * Make sure that the given pid is a process group leader and then destroy the process group.

 * @param pgrpId   Process group id of to-be-killed-processes

 * @param interval The time to wait before sending SIGKILLafter sending SIGTERM

 * @param inBackground Process is to be killed in the back ground witha separate thread

 */

public static void assertAndDestroyProcessGroup(String pgrpId,long interval,boolean inBackground) throws IOException {

  if (!checkPidPgrpidForMatch(pgrpId,PROCFS)) {

    throw new IOException("Process with PID " + pgrpId + " is not a process group leader.");

  }

  destroyProcessGroup(pgrpId,interval,inBackground);

}

Location: ProcfsBasedProcessTree.java

Content: 

/** 

 * Verify that the given process id is same as its process group id.

 * @param pidStr Process id of the to-be-verified-process

 * @param procfsDir  Procfs root dir

 */

static boolean checkPidPgrpidForMatch(String pidStr,String procfsDir){

  Integer pId=Integer.parseInt(pidStr);

  ProcessInfo pInfo=new ProcessInfo(pId);

  pInfo=constructProcessInfo(pInfo,procfsDir);

  if (pInfo == null) {

    return true;

  }

  if (!pInfo.getPgrpId().equals(pId)) {

    LOG.warn("Unexpected: Process with PID " + pId + " is not a process group leader.");

    return false;

  }

  if (LOG.isDebugEnabled()) {

    LOG.debug(pId + " is a process group leader, as expected.");

  }

  return true;

}

Location: ProcfsBasedProcessTree.java

Content: 

/** 

 * Construct the ProcessInfo using the process' PID and procfs rooted at the specified directory and return the same. It is provided mainly to assist testing purposes. Returns null on failing to read from procfs,

 * @param pinfo ProcessInfo that needs to be updated

 * @param procfsDir root of the proc file system

 * @return updated ProcessInfo, null on errors.

 */

private static ProcessInfo constructProcessInfo(ProcessInfo pinfo,String procfsDir){

  ProcessInfo ret=null;

  BufferedReader in=null;

  FileReader fReader=null;

  try {

    File pidDir=new File(procfsDir,String.valueOf(pinfo.getPid()));

    fReader=new FileReader(new File(pidDir,PROCFS_STAT_FILE));

    in=new BufferedReader(fReader);

  }

 catch (  FileNotFoundException f) {

    LOG.warn("The process " + pinfo.getPid() + " may have finished in the interim.");

    return ret;

  }

  ret=pinfo;

  try {

    String str=in.readLine();

    Matcher m=PROCFS_STAT_FILE_FORMAT.matcher(str);

    boolean mat=m.find();

    if (mat) {

      pinfo.updateProcessInfo(m.group(2),Integer.parseInt(m.group(3)),Integer.parseInt(m.group(4)),Integer.parseInt(m.group(5)),Long.parseLong(m.group(7)),Long.parseLong(m.group(8)),Long.parseLong(m.group(10)),Long.parseLong(m.group(11)));

    }

 else {

      LOG.warn("Unexpected: procfs stat file is not in the expected format" + " for process with pid " + pinfo.getPid());

      ret=null;

    }

  }

 catch (  IOException io) {

    LOG.warn("Error reading the stream " + io);

    ret=null;

  }

 finally {

    try {

      fReader.close();

      try {

        in.close();

      }

 catch (      IOException i) {

        LOG.warn("Error closing the stream " + in);

      }

    }

 catch (    IOException i) {

      LOG.warn("Error closing the stream " + fReader);

    }

  }

  return ret;

}

Location: ProcfsBasedProcessTree.java

Content: 

/** 

 * Destroy the process-tree.

 */

public void destroy(){

  destroy(true);

}

Location: ProcfsBasedProcessTree.java

Content: 

/** 

 * Destroy the process-tree.

 * @param inBackground Process is to be killed in the back ground witha separate thread

 */

public void destroy(boolean inBackground){

  LOG.debug("Killing ProcfsBasedProcessTree of " + pid);

  if (pid == -1) {

    return;

  }

  if (isAlive(pid.toString())) {

    if (isSetsidAvailable && setsidUsed) {

      try {

        assertAndDestroyProcessGroup(pid.toString(),sleeptimeBeforeSigkill,inBackground);

      }

 catch (      IOException e) {

        LOG.warn(StringUtils.stringifyException(e));

      }

    }

 else {

      destroyProcess(pid.toString(),sleeptimeBeforeSigkill,inBackground);

    }

  }

}

Location: ProcfsBasedProcessTree.java

Content: 

/** 

 * Get the cumulative resident set size (rss) memory used by all the processes in the process-tree.

 * @return cumulative rss memory used by the process-tree in bytes. return 0if it cannot be calculated

 */

public long getCumulativeRssmem(){

  return getCumulativeRssmem(0);

}

Location: ProcfsBasedProcessTree.java

Content: 

/** 

 * Get the cumulative resident set size (rss) memory used by all the processes in the process-tree that are older than the passed in age.

 * @param olderThanAge processes above this age are included in thememory addition

 * @return cumulative rss memory used by the process-tree in bytes,for processes older than this age. return 0 if it cannot be calculated

 */

public long getCumulativeRssmem(int olderThanAge){

  if (PAGE_SIZE < 0) {

    return 0;

  }

  long totalPages=0;

  for (  ProcessInfo p : processTree.values()) {

    if ((p != null) && (p.getAge() > olderThanAge)) {

      totalPages+=p.getRssmemPage();

    }

  }

  return totalPages * PAGE_SIZE;

}

Location: ProcfsBasedProcessTree.java

Content: 

/** 

 * Get the cumulative virtual memory used by all the processes in the process-tree.

 * @return cumulative virtual memory used by the process-tree in bytes.

 */

public long getCumulativeVmem(){

  return getCumulativeVmem(0);

}

Location: ProcfsBasedProcessTree.java

Content: 

/** 

 * Get the cumulative virtual memory used by all the processes in the process-tree that are older than the passed in age.

 * @param olderThanAge processes above this age are included in thememory addition

 * @return cumulative virtual memory used by the process-tree in bytes,for processes older than this age.

 */

public long getCumulativeVmem(int olderThanAge){

  long total=0;

  for (  ProcessInfo p : processTree.values()) {

    if ((p != null) && (p.getAge() > olderThanAge)) {

      total+=p.getVmem();

    }

  }

  return total;

}

Location: ProcfsBasedProcessTree.java

Content: 

/** 

 * Get the list of all processes in the system.

 */

private List<Integer> getProcessList(){

  String[] processDirs=(new File(procfsDir)).list();

  List<Integer> processList=new ArrayList<Integer>();

  for (  String dir : processDirs) {

    try {

      int pd=Integer.parseInt(dir);

      if ((new File(procfsDir,dir)).isDirectory()) {

        processList.add(Integer.valueOf(pd));

      }

    }

 catch (    NumberFormatException n) {

    }

catch (    SecurityException s) {

    }

  }

  return processList;

}

Location: ProcfsBasedProcessTree.java

Content: 

public ProcfsBasedProcessTree getProcessTree(){

  return (ProcfsBasedProcessTree)super.getProcessTree();

}

Location: ProcfsBasedProcessTree.java

Content: 

/** 

 * Get a dump of the process-tree.

 * @return a string concatenating the dump of information of all the processesin the process-tree

 */

public String getProcessTreeDump(){

  StringBuilder ret=new StringBuilder();

  ret.append(String.format("\t|- PID PPID PGRPID SESSID CMD_NAME " + "USER_MODE_TIME(MILLIS) SYSTEM_TIME(MILLIS) VMEM_USAGE(BYTES) " + "RSSMEM_USAGE(PAGES) FULL_CMD_LINE\n"));

  for (  ProcessInfo p : processTree.values()) {

    if (p != null) {

      ret.append(String.format(PROCESSTREE_DUMP_FORMAT,p.getPid(),p.getPpid(),p.getPgrpId(),p.getSessionId(),p.getName(),p.getUtime(),p.getStime(),p.getVmem(),p.getRssmemPage(),p.getCmdLine(procfsDir)));

    }

  }

  return ret.toString();

}

Location: ProcfsBasedProcessTree.java

Content: 

private static Integer getValidPID(String pid){

  Integer retPid=-1;

  try {

    retPid=Integer.parseInt(pid);

    if (retPid <= 0) {

      retPid=-1;

    }

  }

 catch (  NumberFormatException nfe) {

    retPid=-1;

  }

  return retPid;

}

Location: ProcfsBasedProcessTree.java

Content: 

/** 

 * Is the root-process alive?

 * @return true if the root-process is alive, false otherwise.

 */

public boolean isAlive(){

  if (pid == -1) {

    return false;

  }

 else {

    return isAlive(pid.toString());

  }

}

Location: ProcfsBasedProcessTree.java

Content: 

/** 

 * Is any of the subprocesses in the process-tree alive?

 * @return true if any of the processes in the process-tree isalive, false otherwise.

 */

public boolean isAnyProcessInTreeAlive(){

  for (  Integer pId : processTree.keySet()) {

    if (isAlive(pId.toString())) {

      return true;

    }

  }

  return false;

}

Location: ProcfsBasedProcessTree.java

Content: 

/** 

 * Checks if the ProcfsBasedProcessTree is available on this system.

 * @return true if ProcfsBasedProcessTree is available. False otherwise.

 */

public static boolean isAvailable(){

  try {

    String osName=System.getProperty("os.name");

    if (!osName.startsWith("Linux")) {

      LOG.info("ProcfsBasedProcessTree currently is supported only on " + "Linux.");

      return false;

    }

  }

 catch (  SecurityException se) {

    LOG.warn("Failed to get Operating System name. " + se);

    return false;

  }

  return true;

}

Location: ProcfsBasedProcessTree.java

Content: 

public ProcfsBasedProcessTree(String pid){

  super(pid);

}

Location: ProcfsBasedProcessTree.java

Content: 

public ProcfsBasedProcessTree(String pid,boolean setsidUsed,long sigkillInterval){

  super(pid,setsidUsed,sigkillInterval);

}

Location: ProcfsBasedProcessTree.java

Content: 

public ProcfsBasedProcessTree(String pid,boolean setsidUsed,long sigkillInterval,String procfsDir){

  super(pid,setsidUsed,sigkillInterval,procfsDir);

}

Location: ProcfsBasedProcessTree.java

Content: 

/** 

 * Sets SIGKILL interval

 * @deprecated Use {@link ProcfsBasedProcessTree#ProcfsBasedProcessTree(String,boolean,long)} instead

 * @param interval The time to wait before sending SIGKILLafter sending SIGTERM

 */

@Deprecated public void setSigKillInterval(long interval){

  sleeptimeBeforeSigkill=interval;

}

