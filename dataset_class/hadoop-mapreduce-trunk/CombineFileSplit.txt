Location: CombineFileSplit.java

Content: 

/** 

 * default constructor

 */

public CombineFileSplit(){

}

Location: CombineFileSplit.java

Content: 

/** 

 * Copy constructor

 */

public CombineFileSplit(CombineFileSplit old) throws IOException {

  this(old.getPaths(),old.getStartOffsets(),old.getLengths(),old.getLocations());

}

Location: CombineFileSplit.java

Content: 

public CombineFileSplit(JobConf job,Path[] files,long[] lengths){

  super(files,lengths);

  this.job=job;

}

Location: CombineFileSplit.java

Content: 

public CombineFileSplit(JobConf job,Path[] files,long[] start,long[] lengths,String[] locations){

  super(files,start,lengths,locations);

  this.job=job;

}

Location: CombineFileSplit.java

Content: 

public CombineFileSplit(Path[] files,long[] lengths){

  long[] startoffset=new long[files.length];

  for (int i=0; i < startoffset.length; i++) {

    startoffset[i]=0;

  }

  String[] locations=new String[files.length];

  for (int i=0; i < locations.length; i++) {

    locations[i]="";

  }

  initSplit(files,startoffset,lengths,locations);

}

Location: CombineFileSplit.java

Content: 

public CombineFileSplit(Path[] files,long[] start,long[] lengths,String[] locations){

  initSplit(files,start,lengths,locations);

}

Location: CombineFileSplit.java

Content: 

/** 

 * Returns an array containing the lengths of the files in the split

 */

public long[] getLengths(){

  return lengths;

}

Location: CombineFileSplit.java

Content: 

/** 

 * Returns the number of Paths in the split 

 */

public int getNumPaths(){

  return paths.length;

}

Location: CombineFileSplit.java

Content: 

/** 

 * Returns the start offset of the i<sup>th</sup> Path 

 */

public long getOffset(int i){

  return startoffset[i];

}

Location: CombineFileSplit.java

Content: 

/** 

 * Returns all the Paths in the split 

 */

public Path[] getPaths(){

  return paths;

}

Location: CombineFileSplit.java

Content: 

/** 

 * Returns the i<sup>th</sup> Path 

 */

public Path getPath(int i){

  return paths[i];

}

Location: CombineFileSplit.java

Content: 

/** 

 * Returns an array containing the start offsets of the files in the split

 */

public long[] getStartOffsets(){

  return startoffset;

}

Location: CombineFileSplit.java

Content: 

private void initSplit(Path[] files,long[] start,long[] lengths,String[] locations){

  this.startoffset=start;

  this.lengths=lengths;

  this.paths=files;

  this.totLength=0;

  this.locations=locations;

  for (  long length : lengths) {

    totLength+=length;

  }

}

