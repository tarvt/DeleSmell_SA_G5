Location: TotalOrderPartitioner.java

Content: 

/** 

 * This is the core of buildTrie.  The interface, and stub, above, just adds an empty CarriedTrieNodeRef.   We build trie nodes in depth first order, which is also in key space order.  Every leaf node is referenced as a slot in a parent internal node.  If two adjacent slots [in the DFO] hold leaf nodes that have no split point, then they are not separated by a split point either,  because there's no place in key space for that split point to exist. When that happens, the leaf nodes would be semantically identical, and we reuse the object.  A single CarriedTrieNodeRef "ref" lives for the  duration of the tree-walk.  ref carries a potentially reusable, unsplit leaf node for such reuse until a leaf node with a split arises, which  breaks the chain until we need to make a new unsplit leaf node. Note that this use of CarriedTrieNodeRef means that for internal nodes,  for internal nodes if this code is modified in any way we still need  to make or fill in the subnodes in key space order.

 */

private TrieNode buildTrieRec(BinaryComparable[] splits,int lower,int upper,byte[] prefix,int maxDepth,CarriedTrieNodeRef ref){

  final int depth=prefix.length;

  if (depth >= maxDepth || lower >= upper - 1) {

    if (lower == upper && ref.content != null) {

      return ref.content;

    }

    TrieNode result=LeafTrieNodeFactory(depth,splits,lower,upper);

    ref.content=lower == upper ? result : null;

    return result;

  }

  InnerTrieNode result=new InnerTrieNode(depth);

  byte[] trial=Arrays.copyOf(prefix,prefix.length + 1);

  int currentBound=lower;

  for (int ch=0; ch < 0xFF; ++ch) {

    trial[depth]=(byte)(ch + 1);

    lower=currentBound;

    while (currentBound < upper) {

      if (splits[currentBound].compareTo(trial,0,trial.length) >= 0) {

        break;

      }

      currentBound+=1;

    }

    trial[depth]=(byte)ch;

    result.child[0xFF & ch]=buildTrieRec(splits,lower,currentBound,trial,maxDepth,ref);

  }

  trial[depth]=(byte)0xFF;

  result.child[0xFF]=buildTrieRec(splits,lower,currentBound,trial,maxDepth,ref);

  return result;

}

Location: TotalOrderPartitioner.java

Content: 

/** 

 * Given a sorted set of cut points, build a trie that will find the correct partition quickly.

 * @param splits the list of cut points

 * @param lower the lower bound of partitions 0..numPartitions-1

 * @param upper the upper bound of partitions 0..numPartitions-1

 * @param prefix the prefix that we have already checked against

 * @param maxDepth the maximum depth we will build a trie for

 * @return the trie node that will divide the splits correctly

 */

private TrieNode buildTrie(BinaryComparable[] splits,int lower,int upper,byte[] prefix,int maxDepth){

  return buildTrieRec(splits,lower,upper,prefix,maxDepth,new CarriedTrieNodeRef());

}

Location: TotalOrderPartitioner.java

Content: 

/** 

 * Get the path to the SequenceFile storing the sorted partition keyset.

 * @see #setPartitionFile(Configuration,Path)

 */

public static String getPartitionFile(Configuration conf){

  return conf.get(PARTITIONER_PATH,DEFAULT_PATH);

}

Location: TotalOrderPartitioner.java

Content: 

@SuppressWarnings("unchecked") public int getPartition(K key,V value,int numPartitions){

  return partitions.findPartition(key);

}

Location: TotalOrderPartitioner.java

Content: 

/** 

 * @param level        the tree depth at this node

 * @param splitPoints  the full split point vector, which holdsthe split point or points this leaf node should contain

 * @param lower        first INcluded element of splitPoints

 * @param upper        first EXcluded element of splitPoints

 * @return  a leaf node.  They come in three kinds: no split points [and the findParttion returns a canned index], one split point [and we compare with a single comparand], or more than one [and we do a binary search].  The last case is rare.

 */

private TrieNode LeafTrieNodeFactory(int level,BinaryComparable[] splitPoints,int lower,int upper){

switch (upper - lower) {

case 0:

    return new UnsplitTrieNode(level,lower);

case 1:

  return new SinglySplitTrieNode(level,splitPoints,lower);

default :

return new LeafTrieNode(level,splitPoints,lower,upper);

}

}

Location: TotalOrderPartitioner.java

Content: 

/** 

 * Read the cut points from the given IFile.

 * @param fs The file system

 * @param p The path to read

 * @param keyClass The map output key class

 * @param job The job config

 * @throws IOException

 */

@SuppressWarnings("unchecked") private K[] readPartitions(FileSystem fs,Path p,Class<K> keyClass,Configuration conf) throws IOException {

  SequenceFile.Reader reader=new SequenceFile.Reader(fs,p,conf);

  ArrayList<K> parts=new ArrayList<K>();

  K key=ReflectionUtils.newInstance(keyClass,conf);

  NullWritable value=NullWritable.get();

  while (reader.next(key,value)) {

    parts.add(key);

    key=ReflectionUtils.newInstance(keyClass,conf);

  }

  reader.close();

  return parts.toArray((K[])Array.newInstance(keyClass,parts.size()));

}

Location: TotalOrderPartitioner.java

Content: 

/** 

 * Set the path to the SequenceFile storing the sorted partition keyset. It must be the case that for <tt>R</tt> reduces, there are <tt>R-1</tt> keys in the SequenceFile.

 */

public static void setPartitionFile(Configuration conf,Path p){

  conf.set(PARTITIONER_PATH,p.toString());

}

Location: TotalOrderPartitioner.java

Content: 

public TotalOrderPartitioner(){

}

