Location: TestJoinProperties.java

Content: 

private String A(){

  return CompositeInputFormat.compose(SequenceFileInputFormat.class,src[0].toString());

}

Location: TestJoinProperties.java

Content: 

private String B(){

  return CompositeInputFormat.compose(SequenceFileInputFormat.class,src[1].toString());

}

Location: TestJoinProperties.java

Content: 

private String C(){

  return CompositeInputFormat.compose(SequenceFileInputFormat.class,src[2].toString());

}

Location: TestJoinProperties.java

Content: 

private String constructExpr1(String op){

  StringBuilder sb=new StringBuilder();

  sb.append(op + "(" + op+ "(");

  sb.append(A());

  sb.append(",");

  sb.append(B());

  sb.append("),");

  sb.append(C());

  sb.append(")");

  return sb.toString();

}

Location: TestJoinProperties.java

Content: 

private String constructExpr2(String op){

  StringBuilder sb=new StringBuilder();

  sb.append(op + "(");

  sb.append(A());

  sb.append(",");

  sb.append(op + "(");

  sb.append(B());

  sb.append(",");

  sb.append(C());

  sb.append("))");

  return sb.toString();

}

Location: TestJoinProperties.java

Content: 

private String constructExpr3(String op){

  StringBuilder sb=new StringBuilder();

  sb.append(op + "(");

  sb.append(A());

  sb.append(",");

  sb.append(B());

  sb.append(",");

  sb.append(C());

  sb.append(")");

  return sb.toString();

}

Location: TestJoinProperties.java

Content: 

private String constructExpr4(){

  StringBuilder sb=new StringBuilder();

  sb.append("override(inner(");

  sb.append(A());

  sb.append(",");

  sb.append(B());

  sb.append("),");

  sb.append(A());

  sb.append(")");

  return sb.toString();

}

Location: TestJoinProperties.java

Content: 

private static SequenceFile.Writer[] createWriters(Path testdir,Configuration conf,int srcs,Path[] src) throws IOException {

  for (int i=0; i < srcs; ++i) {

    src[i]=new Path(testdir,Integer.toString(i + 10,36));

  }

  SequenceFile.Writer out[]=new SequenceFile.Writer[srcs];

  for (int i=0; i < srcs - 1; ++i) {

    out[i]=new SequenceFile.Writer(testdir.getFileSystem(conf),conf,src[i],IntWritable.class,IntWritable.class);

  }

  out[srcs - 1]=new SequenceFile.Writer(testdir.getFileSystem(conf),conf,src[srcs - 1],IntWritable.class,LongWritable.class);

  return out;

}

Location: TestJoinProperties.java

Content: 

private static Path[] generateSources(Configuration conf) throws IOException {

  for (int i=0; i < SOURCES; ++i) {

    source[i]=new int[ITEMS];

    for (int j=0; j < ITEMS; ++j) {

      source[i][j]=(i + 2) * (j + 1);

    }

  }

  Path[] src=new Path[SOURCES];

  SequenceFile.Writer out[]=createWriters(base,conf,SOURCES,src);

  IntWritable k=new IntWritable();

  for (int i=0; i < SOURCES; ++i) {

    Writable v;

    if (i != SOURCES - 1) {

      v=new IntWritable();

      ((IntWritable)v).set(i);

    }

 else {

      v=new LongWritable();

      ((LongWritable)v).set(i);

    }

    for (int j=0; j < ITEMS; ++j) {

      k.set(source[i][j]);

      out[i].append(k,v);

    }

    out[i].close();

  }

  return src;

}

Location: TestJoinProperties.java

Content: 

private static String stringify(IntWritable key,Writable val){

  StringBuilder sb=new StringBuilder();

  sb.append("(" + key);

  sb.append("," + val + ")");

  return sb.toString();

}

Location: TestJoinProperties.java

Content: 

public static Test suite(){

  TestSetup setup=new TestSetup(new TestSuite(TestJoinProperties.class)){

    protected void setUp() throws Exception {

      Configuration conf=new Configuration();

      cluster=new MiniDFSCluster(conf,2,true,null);

      base=cluster.getFileSystem().makeQualified(new Path("/nested"));

      src=generateSources(conf);

    }

    protected void tearDown() throws Exception {

      if (cluster != null) {

        cluster.shutdown();

      }

    }

  }

;

  return setup;

}

Location: TestJoinProperties.java

Content: 

private void testExpr1(Configuration conf,String op,TestType ttype,int expectedCount) throws Exception {

  String joinExpr=constructExpr1(op);

  conf.set(CompositeInputFormat.JOIN_EXPR,joinExpr);

  int count=testFormat(conf,2,true,false,ttype);

  assertTrue("not all keys present",count == expectedCount);

}

Location: TestJoinProperties.java

Content: 

private void testExpr2(Configuration conf,String op,TestType ttype,int expectedCount) throws Exception {

  String joinExpr=constructExpr2(op);

  conf.set(CompositeInputFormat.JOIN_EXPR,joinExpr);

  int count=testFormat(conf,2,false,true,ttype);

  assertTrue("not all keys present",count == expectedCount);

}

Location: TestJoinProperties.java

Content: 

private void testExpr3(Configuration conf,String op,TestType ttype,int expectedCount) throws Exception {

  String joinExpr=constructExpr3(op);

  conf.set(CompositeInputFormat.JOIN_EXPR,joinExpr);

  int count=testFormat(conf,3,false,false,ttype);

  assertTrue("not all keys present",count == expectedCount);

}

Location: TestJoinProperties.java

Content: 

private void testExpr4(Configuration conf) throws Exception {

  String joinExpr=constructExpr4();

  conf.set(CompositeInputFormat.JOIN_EXPR,joinExpr);

  int count=testFormat(conf,0,false,false,TestType.INNER_IDENTITY);

  assertTrue("not all keys present",count == ITEMS);

}

Location: TestJoinProperties.java

Content: 

@SuppressWarnings("unchecked") public int testFormat(Configuration conf,int tupleSize,boolean firstTuple,boolean secondTuple,TestType ttype) throws Exception {

  Job job=Job.getInstance(conf);

  CompositeInputFormat format=new CompositeInputFormat();

  int count=0;

  for (  InputSplit split : (List<InputSplit>)format.getSplits(job)) {

    TaskAttemptContext context=MapReduceTestUtil.createDummyMapTaskAttemptContext(conf);

    RecordReader reader=format.createRecordReader(split,context);

    MapContext mcontext=new MapContextImpl(conf,context.getTaskAttemptID(),reader,null,null,MapReduceTestUtil.createDummyReporter(),split);

    reader.initialize(split,mcontext);

    WritableComparable key=null;

    Writable value=null;

    while (reader.nextKeyValue()) {

      key=(WritableComparable)reader.getCurrentKey();

      value=(Writable)reader.getCurrentValue();

      validateKeyValue(key,value,tupleSize,firstTuple,secondTuple,ttype);

      count++;

    }

  }

  return count;

}

Location: TestJoinProperties.java

Content: 

public void testIdentity() throws Exception {

  Configuration conf=new Configuration();

  testExpr4(conf);

}

Location: TestJoinProperties.java

Content: 

public void testInnerAssociativity() throws Exception {

  Configuration conf=new Configuration();

  testExpr1(conf,"inner",TestType.INNER_ASSOCIATIVITY,2);

  testExpr2(conf,"inner",TestType.INNER_ASSOCIATIVITY,2);

  testExpr3(conf,"inner",TestType.INNER_ASSOCIATIVITY,2);

}

Location: TestJoinProperties.java

Content: 

public void testOuterAssociativity() throws Exception {

  Configuration conf=new Configuration();

  testExpr1(conf,"outer",TestType.OUTER_ASSOCIATIVITY,33);

  testExpr2(conf,"outer",TestType.OUTER_ASSOCIATIVITY,33);

  testExpr3(conf,"outer",TestType.OUTER_ASSOCIATIVITY,33);

}

Location: TestJoinProperties.java

Content: 

private void validateInnerKeyValue(IntWritable k,TupleWritable v,int tupleSize,boolean firstTuple,boolean secondTuple){

  final String kvstr="Unexpected tuple: " + stringify(k,v);

  assertTrue(kvstr,v.size() == tupleSize);

  int key=k.get();

  IntWritable val0=null;

  IntWritable val1=null;

  LongWritable val2=null;

  assertTrue(kvstr,key % 2 == 0 && key / 2 <= ITEMS);

  assertTrue(kvstr,key % 3 == 0 && key / 3 <= ITEMS);

  assertTrue(kvstr,key % 4 == 0 && key / 4 <= ITEMS);

  if (firstTuple) {

    TupleWritable v0=((TupleWritable)v.get(0));

    val0=(IntWritable)v0.get(0);

    val1=(IntWritable)v0.get(1);

    val2=(LongWritable)v.get(1);

  }

 else   if (secondTuple) {

    val0=(IntWritable)v.get(0);

    TupleWritable v1=((TupleWritable)v.get(1));

    val1=(IntWritable)v1.get(0);

    val2=(LongWritable)v1.get(1);

  }

 else {

    val0=(IntWritable)v.get(0);

    val1=(IntWritable)v.get(1);

    val2=(LongWritable)v.get(2);

  }

  assertTrue(kvstr,val0.get() == 0);

  assertTrue(kvstr,val1.get() == 1);

  assertTrue(kvstr,val2.get() == 2);

}

Location: TestJoinProperties.java

Content: 

private void validateKeyValue_INNER_IDENTITY(IntWritable k,IntWritable v){

  final String kvstr="Unexpected tuple: " + stringify(k,v);

  int key=k.get();

  assertTrue(kvstr,(key % 2 == 0 && key / 2 <= ITEMS));

  assertTrue(kvstr,v.get() == 0);

}

Location: TestJoinProperties.java

Content: 

private void validateKeyValue(WritableComparable<?> k,Writable v,int tupleSize,boolean firstTuple,boolean secondTuple,TestType ttype) throws IOException {

  System.out.println("out k:" + k + " v:"+ v);

  if (ttype.equals(TestType.OUTER_ASSOCIATIVITY)) {

    validateOuterKeyValue((IntWritable)k,(TupleWritable)v,tupleSize,firstTuple,secondTuple);

  }

 else   if (ttype.equals(TestType.INNER_ASSOCIATIVITY)) {

    validateInnerKeyValue((IntWritable)k,(TupleWritable)v,tupleSize,firstTuple,secondTuple);

  }

  if (ttype.equals(TestType.INNER_IDENTITY)) {

    validateKeyValue_INNER_IDENTITY((IntWritable)k,(IntWritable)v);

  }

}

Location: TestJoinProperties.java

Content: 

private void validateOuterKeyValue(IntWritable k,TupleWritable v,int tupleSize,boolean firstTuple,boolean secondTuple){

  final String kvstr="Unexpected tuple: " + stringify(k,v);

  assertTrue(kvstr,v.size() == tupleSize);

  int key=k.get();

  IntWritable val0=null;

  IntWritable val1=null;

  LongWritable val2=null;

  if (firstTuple) {

    TupleWritable v0=((TupleWritable)v.get(0));

    if (key % 2 == 0 && key / 2 <= ITEMS) {

      val0=(IntWritable)v0.get(0);

    }

 else {

      assertFalse(kvstr,v0.has(0));

    }

    if (key % 3 == 0 && key / 3 <= ITEMS) {

      val1=(IntWritable)v0.get(1);

    }

 else {

      assertFalse(kvstr,v0.has(1));

    }

    if (key % 4 == 0 && key / 4 <= ITEMS) {

      val2=(LongWritable)v.get(1);

    }

 else {

      assertFalse(kvstr,v.has(2));

    }

  }

 else   if (secondTuple) {

    if (key % 2 == 0 && key / 2 <= ITEMS) {

      val0=(IntWritable)v.get(0);

    }

 else {

      assertFalse(kvstr,v.has(0));

    }

    TupleWritable v1=((TupleWritable)v.get(1));

    if (key % 3 == 0 && key / 3 <= ITEMS) {

      val1=(IntWritable)v1.get(0);

    }

 else {

      assertFalse(kvstr,v1.has(0));

    }

    if (key % 4 == 0 && key / 4 <= ITEMS) {

      val2=(LongWritable)v1.get(1);

    }

 else {

      assertFalse(kvstr,v1.has(1));

    }

  }

 else {

    if (key % 2 == 0 && key / 2 <= ITEMS) {

      val0=(IntWritable)v.get(0);

    }

 else {

      assertFalse(kvstr,v.has(0));

    }

    if (key % 3 == 0 && key / 3 <= ITEMS) {

      val1=(IntWritable)v.get(1);

    }

 else {

      assertFalse(kvstr,v.has(1));

    }

    if (key % 4 == 0 && key / 4 <= ITEMS) {

      val2=(LongWritable)v.get(2);

    }

 else {

      assertFalse(kvstr,v.has(2));

    }

  }

  if (val0 != null) {

    assertTrue(kvstr,val0.get() == 0);

  }

  if (val1 != null) {

    assertTrue(kvstr,val1.get() == 1);

  }

  if (val2 != null) {

    assertTrue(kvstr,val2.get() == 2);

  }

}

