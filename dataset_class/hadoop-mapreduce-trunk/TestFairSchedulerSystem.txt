Location: TestFairSchedulerSystem.java

Content: 

/** 

 * Check the fair scheduler servlet for good status code and smoke test for contents.

 */

private void checkServlet(boolean advanced) throws Exception {

  String jtURL="http://localhost:" + mr.getJobTrackerRunner().getJobTrackerInfoPort();

  URL url=new URL(jtURL + "/scheduler" + (advanced ? "?advanced" : ""));

  HttpURLConnection connection=(HttpURLConnection)url.openConnection();

  connection.setRequestMethod("GET");

  connection.connect();

  assertEquals(200,connection.getResponseCode());

  BufferedReader reader=new BufferedReader(new InputStreamReader(connection.getInputStream()));

  StringBuilder sb=new StringBuilder();

  String line=null;

  while ((line=reader.readLine()) != null) {

    sb.append(line).append('\n');

  }

  String contents=sb.toString();

  assertTrue("Bad contents for fair scheduler servlet: " + contents,contents.contains("Fair Scheduler Administration"));

  String userGroups[]=UserGroupInformation.getCurrentUser().getGroupNames();

  String primaryGroup=">" + userGroups[0] + "<";

  assertTrue(contents.contains(primaryGroup));

}

Location: TestFairSchedulerSystem.java

Content: 

private void checkTaskGraphServlet(JobID job) throws Exception {

  String jtURL="http://localhost:" + mr.getJobTrackerRunner().getJobTrackerInfoPort();

  URL url=new URL(jtURL + "/taskgraph?jobid=" + job.toString()+ "&type=map");

  HttpURLConnection connection=(HttpURLConnection)url.openConnection();

  connection.setRequestMethod("GET");

  connection.connect();

  assertEquals(200,connection.getResponseCode());

  String contents=slurpContents(connection);

  assertTrue("Bad contents for job " + job + ":\n"+ contents,contents.contains("</svg>"));

}

Location: TestFairSchedulerSystem.java

Content: 

private String slurpContents(HttpURLConnection connection) throws Exception {

  BufferedReader reader=new BufferedReader(new InputStreamReader(connection.getInputStream()));

  StringBuilder sb=new StringBuilder();

  String line=null;

  while ((line=reader.readLine()) != null) {

    sb.append(line).append('\n');

  }

  return sb.toString();

}

Location: TestFairSchedulerSystem.java

Content: 

/** 

 * Submit some concurrent sleep jobs, and visit the scheduler servlet while they're running.

 */

@Test public void testFairSchedulerSystem() throws Exception {

  ExecutorService exec=Executors.newFixedThreadPool(NUM_THREADS);

  List<Future<Void>> futures=new ArrayList<Future<Void>>(NUM_THREADS);

  for (int i=0; i < NUM_THREADS; i++) {

    futures.add(exec.submit(new Callable<Void>(){

      public Void call() throws Exception {

        JobConf jobConf=mr.createJobConf();

        runSleepJob(jobConf);

        return null;

      }

    }

));

  }

  JobClient jc=new JobClient(mr.createJobConf(null));

  for (  Future<Void> future : futures) {

    while (true) {

      try {

        future.get(3,TimeUnit.SECONDS);

        break;

      }

 catch (      TimeoutException te) {

      }

      checkServlet(true);

      checkServlet(false);

      JobStatus jobs[]=jc.getAllJobs();

      if (jobs == null) {

        System.err.println("No jobs running, not checking tasklog servlet");

        continue;

      }

      for (      JobStatus j : jobs) {

        System.err.println("Checking task graph for " + j.getJobID());

        try {

          checkTaskGraphServlet(j.getJobID());

        }

 catch (        AssertionError err) {

          RunningJob rj=jc.getJob(j.getJobID());

          if (!rj.isRetired()) {

            throw err;

          }

        }

      }

    }

  }

}

