Location: MapOutputFile.java

Content: 

/** 

 * Create a local reduce input file name.

 * @param mapId a map task id

 * @param size the size of the file

 * @return path

 * @throws IOException

 */

public Path getInputFileForWrite(org.apache.hadoop.mapreduce.TaskID mapId,long size) throws IOException {

  return lDirAlloc.getLocalPathForWrite(String.format(REDUCE_INPUT_FILE_FORMAT_STRING,TaskTracker.OUTPUT,mapId.getId()),size,conf);

}

Location: MapOutputFile.java

Content: 

/** 

 * Return a local reduce input file created earlier

 * @param mapId a map task id

 * @return path

 * @throws IOException 

 */

public Path getInputFile(int mapId) throws IOException {

  return lDirAlloc.getLocalPathToRead(String.format(REDUCE_INPUT_FILE_FORMAT_STRING,TaskTracker.OUTPUT,Integer.valueOf(mapId)),conf);

}

Location: MapOutputFile.java

Content: 

/** 

 * Return the path to local map output file created earlier

 * @return path

 * @throws IOException

 */

public Path getOutputFile() throws IOException {

  return lDirAlloc.getLocalPathToRead(TaskTracker.OUTPUT + Path.SEPARATOR + "file.out",conf);

}

Location: MapOutputFile.java

Content: 

/** 

 * Create a local map output file name.

 * @param size the size of the file

 * @return path

 * @throws IOException

 */

public Path getOutputFileForWrite(long size) throws IOException {

  return lDirAlloc.getLocalPathForWrite(TaskTracker.OUTPUT + Path.SEPARATOR + "file.out",size,conf);

}

Location: MapOutputFile.java

Content: 

/** 

 * Return the path to a local map output index file created earlier

 * @return path

 * @throws IOException

 */

public Path getOutputIndexFile() throws IOException {

  return lDirAlloc.getLocalPathToRead(TaskTracker.OUTPUT + Path.SEPARATOR + "file.out.index",conf);

}

Location: MapOutputFile.java

Content: 

/** 

 * Create a local map output index file name.

 * @param size the size of the file

 * @return path

 * @throws IOException

 */

public Path getOutputIndexFileForWrite(long size) throws IOException {

  return lDirAlloc.getLocalPathForWrite(TaskTracker.OUTPUT + Path.SEPARATOR + "file.out.index",size,conf);

}

Location: MapOutputFile.java

Content: 

/** 

 * Create a local map spill file name.

 * @param spillNumber the number

 * @param size the size of the file

 * @return path

 * @throws IOException

 */

public Path getSpillFileForWrite(int spillNumber,long size) throws IOException {

  return lDirAlloc.getLocalPathForWrite(TaskTracker.OUTPUT + "/spill" + spillNumber+ ".out",size,conf);

}

Location: MapOutputFile.java

Content: 

/** 

 * Return a local map spill file created earlier.

 * @param spillNumber the number

 * @return path

 * @throws IOException

 */

public Path getSpillFile(int spillNumber) throws IOException {

  return lDirAlloc.getLocalPathToRead(TaskTracker.OUTPUT + "/spill" + spillNumber+ ".out",conf);

}

Location: MapOutputFile.java

Content: 

/** 

 * Create a local map spill index file name.

 * @param spillNumber the number

 * @param size the size of the file

 * @return path

 * @throws IOException

 */

public Path getSpillIndexFileForWrite(int spillNumber,long size) throws IOException {

  return lDirAlloc.getLocalPathForWrite(TaskTracker.OUTPUT + "/spill" + spillNumber+ ".out.index",size,conf);

}

Location: MapOutputFile.java

Content: 

/** 

 * Return a local map spill index file created earlier

 * @param spillNumber the number

 * @return path

 * @throws IOException

 */

public Path getSpillIndexFile(int spillNumber) throws IOException {

  return lDirAlloc.getLocalPathToRead(TaskTracker.OUTPUT + "/spill" + spillNumber+ ".out.index",conf);

}

Location: MapOutputFile.java

Content: 

public MapOutputFile(){

}

Location: MapOutputFile.java

Content: 

/** 

 * Removes all of the files related to a task. 

 */

public void removeAll() throws IOException {

  conf.deleteLocalFiles(TaskTracker.OUTPUT);

}

