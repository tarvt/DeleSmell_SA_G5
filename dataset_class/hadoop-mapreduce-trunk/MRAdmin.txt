Location: MRAdmin.java

Content: 

private static UserGroupInformation getUGI(Configuration conf) throws IOException {

  return UserGroupInformation.getCurrentUser();

}

Location: MRAdmin.java

Content: 

public MRAdmin(){

  super();

}

Location: MRAdmin.java

Content: 

public MRAdmin(Configuration conf){

  super(conf);

}

Location: MRAdmin.java

Content: 

private static void printHelp(String cmd){

  String summary="hadoop mradmin is the command to execute Map-Reduce administrative commands.\n" + "The full syntax is: \n\n" + "hadoop mradmin [-refreshServiceAcl] [-refreshQueues] "+ "[-refreshNodes] [-refreshUserToGroupsMappings] "+ "[-refreshSuperUserGroupsConfiguration] [-help [cmd]]\n";

  String refreshServiceAcl="-refreshServiceAcl: Reload the service-level authorization policy file\n" + "\t\tJobtracker will reload the authorization policy file.\n";

  String refreshQueues="-refreshQueues: Reload the queues' acls, states and " + "scheduler specific properties.\n" + "\t\tJobTracker will reload the mapred-queues configuration file.\n";

  String refreshUserToGroupsMappings="-refreshUserToGroupsMappings: Refresh user-to-groups mappings\n";

  String refreshSuperUserGroupsConfiguration="-refreshSuperUserGroupsConfiguration: Refresh superuser proxy groups mappings\n";

  String refreshNodes="-refreshNodes: Refresh the hosts information at the jobtracker.\n";

  String help="-help [cmd]: \tDisplays help for the given command or all commands if none\n" + "\t\tis specified.\n";

  if ("refreshServiceAcl".equals(cmd)) {

    System.out.println(refreshServiceAcl);

  }

 else   if ("refreshQueues".equals(cmd)) {

    System.out.println(refreshQueues);

  }

 else   if ("refreshUserToGroupsMappings".equals(cmd)) {

    System.out.println(refreshUserToGroupsMappings);

  }

 else   if ("refreshNodes".equals(cmd)) {

    System.out.println(refreshNodes);

  }

 else   if ("refreshSuperUserGroupsConfiguration".equals(cmd)) {

    System.out.println(refreshSuperUserGroupsConfiguration);

  }

 else   if ("help".equals(cmd)) {

    System.out.println(help);

  }

 else {

    System.out.println(summary);

    System.out.println(refreshServiceAcl);

    System.out.println(refreshQueues);

    System.out.println(refreshUserToGroupsMappings);

    System.out.println(refreshSuperUserGroupsConfiguration);

    System.out.println(refreshNodes);

    System.out.println(help);

    System.out.println();

    ToolRunner.printGenericCommandUsage(System.out);

  }

}

Location: MRAdmin.java

Content: 

/** 

 * Displays format of commands.

 * @param cmd The command that is being executed.

 */

private static void printUsage(String cmd){

  if ("-refreshServiceAcl".equals(cmd)) {

    System.err.println("Usage: java MRAdmin" + " [-refreshServiceAcl]");

  }

 else   if ("-refreshQueues".equals(cmd)) {

    System.err.println("Usage: java MRAdmin" + " [-refreshQueues]");

  }

 else   if ("-refreshUserToGroupsMappings".equals(cmd)) {

    System.err.println("Usage: java MRAdmin" + " [-refreshUserToGroupsMappings]");

  }

 else   if ("-refreshSuperUserGroupsConfiguration".equals(cmd)) {

    System.err.println("Usage: java DFSAdmin" + " [-refreshSuperUserGroupsConfiguration]");

  }

 else   if ("-refreshNodes".equals(cmd)) {

    System.err.println("Usage: java MRAdmin" + " [-refreshNodes]");

  }

 else {

    System.err.println("Usage: java MRAdmin");

    System.err.println("           [-refreshServiceAcl]");

    System.err.println("           [-refreshQueues]");

    System.err.println("           [-refreshUserToGroupsMappings]");

    System.err.println("           [-refreshSuperUserGroupsConfiguration]");

    System.err.println("           [-refreshNodes]");

    System.err.println("           [-help [cmd]]");

    System.err.println();

    ToolRunner.printGenericCommandUsage(System.err);

  }

}

Location: MRAdmin.java

Content: 

private int refreshAuthorizationPolicy() throws IOException {

  Configuration conf=getConf();

  JobConf jConf=new JobConf(conf);

  conf.set(CommonConfigurationKeys.HADOOP_SECURITY_SERVICE_USER_NAME_KEY,jConf.get(JobTracker.JT_USER_NAME,""));

  RefreshAuthorizationPolicyProtocol refreshProtocol=(RefreshAuthorizationPolicyProtocol)RPC.getProxy(RefreshAuthorizationPolicyProtocol.class,RefreshAuthorizationPolicyProtocol.versionID,JobTracker.getAddress(conf),getUGI(conf),conf,NetUtils.getSocketFactory(conf,RefreshAuthorizationPolicyProtocol.class));

  refreshProtocol.refreshServiceAcl();

  return 0;

}

Location: MRAdmin.java

Content: 

/** 

 * Command to ask the jobtracker to reread the hosts and excluded hosts  file. Usage: java MRAdmin -refreshNodes

 * @exception IOException 

 */

private int refreshNodes() throws IOException {

  Configuration conf=getConf();

  AdminOperationsProtocol adminOperationsProtocol=(AdminOperationsProtocol)RPC.getProxy(AdminOperationsProtocol.class,AdminOperationsProtocol.versionID,JobTracker.getAddress(conf),getUGI(conf),conf,NetUtils.getSocketFactory(conf,AdminOperationsProtocol.class));

  adminOperationsProtocol.refreshNodes();

  return 0;

}

Location: MRAdmin.java

Content: 

private int refreshQueues() throws IOException {

  Configuration conf=getConf();

  AdminOperationsProtocol adminOperationsProtocol=(AdminOperationsProtocol)RPC.getProxy(AdminOperationsProtocol.class,AdminOperationsProtocol.versionID,JobTracker.getAddress(conf),getUGI(conf),conf,NetUtils.getSocketFactory(conf,AdminOperationsProtocol.class));

  adminOperationsProtocol.refreshQueues();

  return 0;

}

Location: MRAdmin.java

Content: 

/** 

 * refreshSuperUserGroupsConfiguration  {@link JobTracker}.

 * @return exitcode 0 on success, non-zero on failure

 * @throws IOException

 */

public int refreshSuperUserGroupsConfiguration() throws IOException {

  Configuration conf=getConf();

  JobConf jConf=new JobConf(conf);

  conf.set(CommonConfigurationKeys.HADOOP_SECURITY_SERVICE_USER_NAME_KEY,jConf.get(JobTracker.JT_USER_NAME,""));

  RefreshUserMappingsProtocol refreshProtocol=(RefreshUserMappingsProtocol)RPC.getProxy(RefreshUserMappingsProtocol.class,RefreshUserMappingsProtocol.versionID,JobTracker.getAddress(conf),getUGI(conf),conf,NetUtils.getSocketFactory(conf,RefreshUserMappingsProtocol.class));

  refreshProtocol.refreshSuperUserGroupsConfiguration();

  return 0;

}

Location: MRAdmin.java

Content: 

/** 

 * Refresh the user-to-groups mappings on the  {@link JobTracker}.

 * @return exitcode 0 on success, non-zero on failure

 * @throws IOException

 */

private int refreshUserToGroupsMappings() throws IOException {

  Configuration conf=getConf();

  JobConf jConf=new JobConf(conf);

  conf.set(CommonConfigurationKeys.HADOOP_SECURITY_SERVICE_USER_NAME_KEY,jConf.get(JobTracker.JT_USER_NAME,""));

  RefreshUserMappingsProtocol refreshProtocol=(RefreshUserMappingsProtocol)RPC.getProxy(RefreshUserMappingsProtocol.class,RefreshUserMappingsProtocol.versionID,JobTracker.getAddress(conf),getUGI(conf),conf,NetUtils.getSocketFactory(conf,RefreshUserMappingsProtocol.class));

  refreshProtocol.refreshUserToGroupsMappings();

  return 0;

}

