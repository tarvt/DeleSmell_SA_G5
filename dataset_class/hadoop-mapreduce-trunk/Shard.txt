Location: Shard.java

Content: 

/** 

 * Compare to another shard.

 * @param other  another shard

 * @return compare version first, then directory and finally generation

 */

public int compareTo(Shard other){

  if (version < other.version) {

    return -1;

  }

 else   if (version > other.version) {

    return 1;

  }

  int result=dir.compareTo(other.dir);

  if (result != 0) {

    return result;

  }

  if (gen < other.gen) {

    return -1;

  }

 else   if (gen == other.gen) {

    return 0;

  }

 else {

    return 1;

  }

}

Location: Shard.java

Content: 

private static Shard createShardFromString(String str){

  int first=str.indexOf("@");

  int second=str.indexOf("@",first + 1);

  long version=Long.parseLong(str.substring(0,first));

  String dir=str.substring(first + 1,second);

  long gen=Long.parseLong(str.substring(second + 1));

  return new Shard(version,dir,gen);

}

Location: Shard.java

Content: 

/** 

 * Get the generation of the Lucene instance.

 * @return the generation of the Lucene instance

 */

public long getGeneration(){

  return gen;

}

Location: Shard.java

Content: 

public static Shard[] getIndexShards(IndexUpdateConfiguration conf){

  String shards=conf.getIndexShards();

  if (shards != null) {

    ArrayList<Object> list=Collections.list(new StringTokenizer(shards,","));

    Shard[] result=new Shard[list.size()];

    for (int i=0; i < list.size(); i++) {

      result[i]=Shard.createShardFromString((String)list.get(i));

    }

    return result;

  }

 else {

    return null;

  }

}

Location: Shard.java

Content: 

/** 

 * Get the version number of the entire index.

 * @return the version number of the entire index

 */

public long getVersion(){

  return version;

}

Location: Shard.java

Content: 

public static void setIndexShards(IndexUpdateConfiguration conf,Shard[] shards){

  StringBuilder shardsString=new StringBuilder(shards[0].toString());

  for (int i=1; i < shards.length; i++) {

    shardsString.append(",");

    shardsString.append(shards[i].toString());

  }

  conf.setIndexShards(shardsString.toString());

}

Location: Shard.java

Content: 

/** 

 * Constructor.

 */

public Shard(){

  this.version=-1;

  this.dir=null;

  this.gen=-1;

}

Location: Shard.java

Content: 

/** 

 * Construct a shard from a versio number, a directory and a generation number.

 * @param version  the version number of the entire index

 * @param dir  the directory where this shard resides

 * @param gen  the generation of the Lucene instance

 */

public Shard(long version,String dir,long gen){

  this.version=version;

  this.dir=normalizePath(dir);

  this.gen=gen;

}

Location: Shard.java

Content: 

/** 

 * Construct using a shard object.

 * @param shard  the shard used by the constructor

 */

public Shard(Shard shard){

  this.version=shard.version;

  this.dir=shard.dir;

  this.gen=shard.gen;

}

