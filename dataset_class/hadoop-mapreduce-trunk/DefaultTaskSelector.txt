Location: DefaultTaskSelector.java

Content: 

@Override public int neededSpeculativeMaps(JobInProgress job){

  int count=0;

  long time=System.currentTimeMillis();

  for (  TaskInProgress tip : job.maps) {

    if (tip.isRunning() && tip.canBeSpeculated(time)) {

      count++;

    }

  }

  return count;

}

Location: DefaultTaskSelector.java

Content: 

@Override public int neededSpeculativeReduces(JobInProgress job){

  int count=0;

  long time=System.currentTimeMillis();

  double avgProgress=job.getStatus().reduceProgress();

  for (  TaskInProgress tip : job.reduces) {

    if (tip.isRunning() && tip.canBeSpeculated(time)) {

      count++;

    }

  }

  return count;

}

Location: DefaultTaskSelector.java

Content: 

@Override public Task obtainNewMapTask(TaskTrackerStatus taskTracker,JobInProgress job,int localityLevel) throws IOException {

  ClusterStatus clusterStatus=taskTrackerManager.getClusterStatus();

  int numTaskTrackers=clusterStatus.getTaskTrackers();

  return job.obtainNewMapTask(taskTracker,numTaskTrackers,taskTrackerManager.getNumberOfUniqueHosts(),localityLevel);

}

Location: DefaultTaskSelector.java

Content: 

@Override public Task obtainNewReduceTask(TaskTrackerStatus taskTracker,JobInProgress job) throws IOException {

  ClusterStatus clusterStatus=taskTrackerManager.getClusterStatus();

  int numTaskTrackers=clusterStatus.getTaskTrackers();

  return job.obtainNewReduceTask(taskTracker,numTaskTrackers,taskTrackerManager.getNumberOfUniqueHosts());

}

