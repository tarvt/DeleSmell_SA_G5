Location: CapBasedLoadManager.java

Content: 

@Override public boolean canAssignMap(TaskTrackerStatus tracker,int totalRunnableMaps,int totalMapSlots){

  return tracker.countMapTasks() < getCap(totalRunnableMaps,tracker.getMaxMapSlots(),totalMapSlots);

}

Location: CapBasedLoadManager.java

Content: 

@Override public boolean canAssignReduce(TaskTrackerStatus tracker,int totalRunnableReduces,int totalReduceSlots){

  return tracker.countReduceTasks() < getCap(totalRunnableReduces,tracker.getMaxReduceSlots(),totalReduceSlots);

}

Location: CapBasedLoadManager.java

Content: 

@Override public boolean canLaunchTask(TaskTrackerStatus tracker,JobInProgress job,TaskType type){

  return true;

}

Location: CapBasedLoadManager.java

Content: 

/** 

 * Determine how many tasks of a given type we want to run on a TaskTracker.  This cap is chosen based on how many tasks of that type are outstanding in total, so that when the cluster is used below capacity, tasks are spread out uniformly across the nodes rather than being clumped up on whichever machines sent out heartbeats earliest.

 */

int getCap(int totalRunnableTasks,int localMaxTasks,int totalSlots){

  double load=maxDiff + ((double)totalRunnableTasks) / totalSlots;

  return (int)Math.ceil(localMaxTasks * Math.min(1.0,load));

}

