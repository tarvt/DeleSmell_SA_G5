Location: Bellard.java

Content: 

/** 

 * Estimate the number of terms. 

 */

public static long bit2terms(long b){

  return 7 * (b / 10);

}

Location: Bellard.java

Content: 

/** 

 * Compute bits of Pi in the local machine. 

 */

public static double computePi(final long b){

  double pi=0;

  for (  Parameter p : Parameter.values())   pi=Modular.addMod(pi,new Sum(b,p,1,null).getValue());

  return pi;

}

Location: Bellard.java

Content: 

/** 

 * Compute bits of Pi from the results. 

 */

public static <T extends Container<Summation>>double computePi(final long b,Map<Parameter,T> results){

  if (results.size() != Parameter.values().length)   throw new IllegalArgumentException("m.size() != Parameter.values().length" + ", m.size()=" + results.size() + "\n  m="+ results);

  double pi=0;

  for (  Parameter p : Parameter.values()) {

    final Summation sigma=results.get(p).getElement();

    final Sum s=new Sum(b,p,1,null);

    s.setValue(sigma);

    pi=Modular.addMod(pi,s.getValue());

  }

  return pi;

}

Location: Bellard.java

Content: 

private static void computePi(Util.Timer t,long b){

  t.tick(Util.pi2string(computePi(b),bit2terms(b)));

}

Location: Bellard.java

Content: 

/** 

 * Get the sums for the Bellard formula. 

 */

public static <T extends Container<Summation>>Map<Parameter,Sum> getSums(long b,int partsPerSum,Map<Parameter,List<T>> existing){

  final Map<Parameter,Sum> sums=new TreeMap<Parameter,Sum>();

  for (  Parameter p : Parameter.values()) {

    final Sum s=new Sum(b,p,partsPerSum,existing.get(p));

    Util.out.println("put " + s);

    sums.put(p,s);

  }

  return sums;

}

