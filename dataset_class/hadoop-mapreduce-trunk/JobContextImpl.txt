Location: JobContextImpl.java

Content: 

/** 

 * Get the archive entries in classpath as an array of Path

 */

public Path[] getArchiveClassPaths(){

  return DistributedCache.getArchiveClassPaths(conf);

}

Location: JobContextImpl.java

Content: 

/** 

 * Get the timestamps of the archives.  Used by internal DistributedCache and MapReduce code.

 * @return a string array of timestamps 

 * @throws IOException

 */

public String[] getArchiveTimestamps(){

  return DistributedCache.getArchiveTimestamps(conf);

}

Location: JobContextImpl.java

Content: 

/** 

 * Get cache archives set in the Configuration

 * @return A URI array of the caches set in the Configuration

 * @throws IOException

 */

public URI[] getCacheArchives() throws IOException {

  return DistributedCache.getCacheArchives(conf);

}

Location: JobContextImpl.java

Content: 

/** 

 * Get cache files set in the Configuration

 * @return A URI array of the files set in the Configuration

 * @throws IOException

 */

public URI[] getCacheFiles() throws IOException {

  return DistributedCache.getCacheFiles(conf);

}

Location: JobContextImpl.java

Content: 

/** 

 * Get the combiner class for the job.

 * @return the combiner class for the job.

 */

@SuppressWarnings("unchecked") public Class<? extends Reducer<?,?,?,?>> getCombinerClass() throws ClassNotFoundException {

  return (Class<? extends Reducer<?,?,?,?>>)conf.getClass(COMBINE_CLASS_ATTR,null);

}

Location: JobContextImpl.java

Content: 

/** 

 * Return the configuration for the job.

 * @return the shared configuration object

 */

public Configuration getConfiguration(){

  return conf;

}

Location: JobContextImpl.java

Content: 

public Credentials getCredentials(){

  return credentials;

}

Location: JobContextImpl.java

Content: 

/** 

 * Get the file entries in classpath as an array of Path

 */

public Path[] getFileClassPaths(){

  return DistributedCache.getFileClassPaths(conf);

}

Location: JobContextImpl.java

Content: 

/** 

 * Get the timestamps of the files.  Used by internal DistributedCache and MapReduce code.

 * @return a string array of timestamps 

 * @throws IOException

 */

public String[] getFileTimestamps(){

  return DistributedCache.getFileTimestamps(conf);

}

Location: JobContextImpl.java

Content: 

/** 

 * Get the user defined  {@link RawComparator} comparator for grouping keys of inputs to the reduce.

 * @return comparator set by the user for grouping values.

 * @see Job#setGroupingComparatorClass(Class) for details.  

 */

public RawComparator<?> getGroupingComparator(){

  return conf.getOutputValueGroupingComparator();

}

Location: JobContextImpl.java

Content: 

/** 

 * Get the  {@link InputFormat} class for the job.

 * @return the {@link InputFormat} class for the job.

 */

@SuppressWarnings("unchecked") public Class<? extends InputFormat<?,?>> getInputFormatClass() throws ClassNotFoundException {

  return (Class<? extends InputFormat<?,?>>)conf.getClass(INPUT_FORMAT_CLASS_ATTR,TextInputFormat.class);

}

Location: JobContextImpl.java

Content: 

/** 

 * Get the pathname of the job's jar.

 * @return the pathname

 */

public String getJar(){

  return conf.getJar();

}

Location: JobContextImpl.java

Content: 

/** 

 * Get whether job-setup and job-cleanup is needed for the job 

 * @return boolean 

 */

public boolean getJobSetupCleanupNeeded(){

  return conf.getBoolean(MRJobConfig.SETUP_CLEANUP_NEEDED,true);

}

Location: JobContextImpl.java

Content: 

/** 

 * Return the path array of the localized caches

 * @return A path array of localized caches

 * @throws IOException

 */

public Path[] getLocalCacheArchives() throws IOException {

  return DistributedCache.getLocalCacheArchives(conf);

}

Location: JobContextImpl.java

Content: 

/** 

 * Return the path array of the localized files

 * @return A path array of localized files

 * @throws IOException

 */

public Path[] getLocalCacheFiles() throws IOException {

  return DistributedCache.getLocalCacheFiles(conf);

}

Location: JobContextImpl.java

Content: 

/** 

 * Get the key class for the map output data. If it is not set, use the (final) output key class. This allows the map output key class to be different than the final output key class.

 * @return the map output key class.

 */

public Class<?> getMapOutputKeyClass(){

  return conf.getMapOutputKeyClass();

}

Location: JobContextImpl.java

Content: 

/** 

 * Get the value class for the map output data. If it is not set, use the (final) output value class This allows the map output value class to be different than the final output value class.

 * @return the map output value class.

 */

public Class<?> getMapOutputValueClass(){

  return conf.getMapOutputValueClass();

}

Location: JobContextImpl.java

Content: 

/** 

 * Get the  {@link Mapper} class for the job.

 * @return the {@link Mapper} class for the job.

 */

@SuppressWarnings("unchecked") public Class<? extends Mapper<?,?,?,?>> getMapperClass() throws ClassNotFoundException {

  return (Class<? extends Mapper<?,?,?,?>>)conf.getClass(MAP_CLASS_ATTR,Mapper.class);

}

Location: JobContextImpl.java

Content: 

/** 

 * Get the configured number of maximum attempts that will be made to run a map task, as specified by the <code>mapred.map.max.attempts</code> property. If this property is not already set, the default is 4 attempts.

 * @return the max number of attempts per map task.

 */

public int getMaxMapAttempts(){

  return conf.getMaxMapAttempts();

}

Location: JobContextImpl.java

Content: 

/** 

 * Get the configured number of maximum attempts  that will be made to run a reduce task, as specified by the <code>mapred.reduce.max.attempts</code> property. If this property is not already set, the default is 4 attempts.

 * @return the max number of attempts per reduce task.

 */

public int getMaxReduceAttempts(){

  return conf.getMaxReduceAttempts();

}

Location: JobContextImpl.java

Content: 

/** 

 * Get configured the number of reduce tasks for this job. Defaults to  <code>1</code>.

 * @return the number of reduce tasks for this job.

 */

public int getNumReduceTasks(){

  return conf.getNumReduceTasks();

}

Location: JobContextImpl.java

Content: 

/** 

 * Get the  {@link OutputFormat} class for the job.

 * @return the {@link OutputFormat} class for the job.

 */

@SuppressWarnings("unchecked") public Class<? extends OutputFormat<?,?>> getOutputFormatClass() throws ClassNotFoundException {

  return (Class<? extends OutputFormat<?,?>>)conf.getClass(OUTPUT_FORMAT_CLASS_ATTR,TextOutputFormat.class);

}

Location: JobContextImpl.java

Content: 

/** 

 * Get the key class for the job output data.

 * @return the key class for the job output data.

 */

public Class<?> getOutputKeyClass(){

  return conf.getOutputKeyClass();

}

Location: JobContextImpl.java

Content: 

/** 

 * Get the value class for job outputs.

 * @return the value class for job outputs.

 */

public Class<?> getOutputValueClass(){

  return conf.getOutputValueClass();

}

Location: JobContextImpl.java

Content: 

/** 

 * Get the  {@link Partitioner} class for the job.

 * @return the {@link Partitioner} class for the job.

 */

@SuppressWarnings("unchecked") public Class<? extends Partitioner<?,?>> getPartitionerClass() throws ClassNotFoundException {

  return (Class<? extends Partitioner<?,?>>)conf.getClass(PARTITIONER_CLASS_ATTR,HashPartitioner.class);

}

Location: JobContextImpl.java

Content: 

/** 

 * Get whether the task profiling is enabled.

 * @return true if some tasks will be profiled

 */

public boolean getProfileEnabled(){

  return conf.getProfileEnabled();

}

Location: JobContextImpl.java

Content: 

/** 

 * Get the profiler configuration arguments. The default value for this property is "-agentlib:hprof=cpu=samples,heap=sites,force=n,thread=y,verbose=n,file=%s"

 * @return the parameters to pass to the task child to configure profiling

 */

public String getProfileParams(){

  return conf.getProfileParams();

}

Location: JobContextImpl.java

Content: 

/** 

 * Get the range of maps or reduces to profile.

 * @param isMap is the task a map?

 * @return the task ranges

 */

public IntegerRanges getProfileTaskRange(boolean isMap){

  return conf.getProfileTaskRange(isMap);

}

Location: JobContextImpl.java

Content: 

/** 

 * Get the  {@link Reducer} class for the job.

 * @return the {@link Reducer} class for the job.

 */

@SuppressWarnings("unchecked") public Class<? extends Reducer<?,?,?,?>> getReducerClass() throws ClassNotFoundException {

  return (Class<? extends Reducer<?,?,?,?>>)conf.getClass(REDUCE_CLASS_ATTR,Reducer.class);

}

Location: JobContextImpl.java

Content: 

/** 

 * Get the  {@link RawComparator} comparator used to compare keys.

 * @return the {@link RawComparator} comparator used to compare keys.

 */

public RawComparator<?> getSortComparator(){

  return conf.getOutputKeyComparator();

}

Location: JobContextImpl.java

Content: 

/** 

 * This method checks to see if symlinks are to be create for the  localized cache files in the current working directory 

 * @return true if symlinks are to be created- else return false

 */

public boolean getSymlink(){

  return DistributedCache.getSymlink(conf);

}

Location: JobContextImpl.java

Content: 

/** 

 * Get whether task-cleanup is needed for the job 

 * @return boolean 

 */

public boolean getTaskCleanupNeeded(){

  return conf.getBoolean(MRJobConfig.TASK_CLEANUP_NEEDED,true);

}

Location: JobContextImpl.java

Content: 

public JobContextImpl(Configuration conf,JobID jobId){

  this.conf=new org.apache.hadoop.mapred.JobConf(conf);

  this.jobId=jobId;

  this.credentials=this.conf.getCredentials();

  try {

    this.ugi=UserGroupInformation.getCurrentUser();

  }

 catch (  IOException e) {

    throw new RuntimeException(e);

  }

}

Location: JobContextImpl.java

Content: 

JobContextImpl(JobConf conf,org.apache.hadoop.mapreduce.JobID jobId){

  this(conf,jobId,Reporter.NULL);

}

Location: JobContextImpl.java

Content: 

JobContextImpl(JobConf conf,org.apache.hadoop.mapreduce.JobID jobId,Progressable progress){

  super(conf,jobId);

  this.job=conf;

  this.progress=progress;

}

Location: JobContextImpl.java

Content: 

/** 

 * Set the JobID.

 */

public void setJobID(JobID jobId){

  this.jobId=jobId;

}

