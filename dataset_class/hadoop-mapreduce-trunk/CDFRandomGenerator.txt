Location: CDFRandomGenerator.java

Content: 

CDFRandomGenerator(LoggedDiscreteCDF cdf){

  this(cdf,new Random());

}

Location: CDFRandomGenerator.java

Content: 

CDFRandomGenerator(LoggedDiscreteCDF cdf,long seed){

  this(cdf,new Random(seed));

}

Location: CDFRandomGenerator.java

Content: 

private CDFRandomGenerator(LoggedDiscreteCDF cdf,Random random){

  this.random=random;

  rankings=new double[cdf.getRankings().size() + 2];

  values=new long[cdf.getRankings().size() + 2];

  initializeTables(cdf);

}

Location: CDFRandomGenerator.java

Content: 

protected int floorIndex(double probe){

  int result=Arrays.binarySearch(rankings,probe);

  return Math.abs(result + 1) - 1;

}

Location: CDFRandomGenerator.java

Content: 

protected long getDatumAt(int index){

  return values[index];

}

Location: CDFRandomGenerator.java

Content: 

protected double getRankingAt(int index){

  return rankings[index];

}

Location: CDFRandomGenerator.java

Content: 

protected final void initializeTables(LoggedDiscreteCDF cdf){

  rankings[0]=0.0;

  values[0]=cdf.getMinimum();

  rankings[rankings.length - 1]=1.0;

  values[rankings.length - 1]=cdf.getMaximum();

  List<LoggedSingleRelativeRanking> subjects=cdf.getRankings();

  for (int i=0; i < subjects.size(); ++i) {

    rankings[i + 1]=subjects.get(i).getRelativeRanking();

    values[i + 1]=subjects.get(i).getDatum();

  }

}

Location: CDFRandomGenerator.java

Content: 

public long randomValue(){

  return valueAt(random.nextDouble());

}

