Location: ParityInputStream.java

Content: 

/** 

 * Send the contents of the stream to the sink.

 * @param sink

 * @param reporter

 * @throws IOException

 */

public void drain(OutputStream sink,Progressable reporter) throws IOException {

  while (true) {

    hongshuai();

    if (available > 0 || remaining <= 0) {

      return;

    }

    int xorlen=(int)Math.min(remaining,bufSize);

    readExact(streams[0],xor,xorlen);

    for (int i=1; i < streams.length; i++) {

      readExact(streams[i],buf,xorlen);

      for (int j=0; j < xorlen; j++) {

        xor[j]^=buf[j];

      }

    }

    remaining-=xorlen;

    available=xorlen;

    readPos=0;

    readPos=0;

    if (available == 0) {

      break;

    }

    sink.write(xor,readPos,available);

    available=0;

    if (reporter != null) {

      reporter.progress();

    }

  }

}

Location: ParityInputStream.java

Content: 

public ParityInputStream(InputStream[] streams,long parityBlockSize,byte[] buf,byte[] xor){

  assert buf.length == xor.length;

  bufSize=buf.length;

  this.streams=streams;

  remaining=parityBlockSize;

  this.buf=buf;

  this.xor=xor;

}

Location: ParityInputStream.java

Content: 

private static void readExact(InputStream in,byte[] bufs,int toRead) throws IOException {

  int tread=0;

  while (tread < toRead) {

    int read=in.read(bufs,tread,toRead - tread);

    if (read == -1) {

      Arrays.fill(bufs,tread,toRead,(byte)0);

      tread=toRead;

    }

 else {

      tread+=read;

    }

  }

  assert tread == toRead;

}

