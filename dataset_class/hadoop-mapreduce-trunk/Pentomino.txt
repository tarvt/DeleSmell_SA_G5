Location: Pentomino.java

Content: 

/** 

 * For a given piece, generate all of the potential placements and add them  as rows to the model.

 * @param dancer the problem model

 * @param piece the piece we are trying to place

 * @param width the width of the board

 * @param height the height of the board

 * @param flip is the piece flipped over?

 * @param row a workspace the length of the each row in the table

 * @param upperLeft is the piece constrained to the upper left of the board?this is used on a single piece to eliminate most of the trivial roations of the solution.

 */

private static void generateRows(DancingLinks dancer,Piece piece,int width,int height,boolean flip,boolean[] row,boolean upperLeft){

  int[] rotations=piece.getRotations();

  for (int rotIndex=0; rotIndex < rotations.length; ++rotIndex) {

    boolean[][] shape=piece.getShape(flip,rotations[rotIndex]);

    for (int x=0; x < width; ++x) {

      for (int y=0; y < height; ++y) {

        if (y + shape.length <= height && x + shape[0].length <= width && (!upperLeft || (isSide(x,shape[0].length,width) && isSide(y,shape.length,height)))) {

          for (int idx=0; idx < width * height; ++idx) {

            row[idx]=false;

          }

          for (int subY=0; subY < shape.length; ++subY) {

            for (int subX=0; subX < shape[0].length; ++subX) {

              row[(y + subY) * width + x + subX]=shape[subY][subX];

            }

          }

          dancer.addRow(row);

        }

      }

    }

  }

}

Location: Pentomino.java

Content: 

/** 

 * Find whether the solution has the x in the upper left quadrant, the x-midline, the y-midline or in the center.

 * @param names the solution to check

 * @return the catagory of the solution

 */

public SolutionCategory getCategory(List<List<ColumnName>> names){

  Piece xPiece=null;

  for (  Piece p : pieces) {

    if ("x".equals(p.name)) {

      xPiece=p;

      break;

    }

  }

  for (  List<ColumnName> row : names) {

    if (row.contains(xPiece)) {

      int low_x=width;

      int high_x=0;

      int low_y=height;

      int high_y=0;

      for (      ColumnName col : row) {

        if (col instanceof Point) {

          int x=((Point)col).x;

          int y=((Point)col).y;

          if (x < low_x) {

            low_x=x;

          }

          if (x > high_x) {

            high_x=x;

          }

          if (y < low_y) {

            low_y=y;

          }

          if (y > high_y) {

            high_y=y;

          }

        }

      }

      boolean mid_x=(low_x + high_x == width - 1);

      boolean mid_y=(low_y + high_y == height - 1);

      if (mid_x && mid_y) {

        return SolutionCategory.CENTER;

      }

 else       if (mid_x) {

        return SolutionCategory.MID_X;

      }

 else       if (mid_y) {

        return SolutionCategory.MID_Y;

      }

      break;

    }

  }

  return SolutionCategory.UPPER_LEFT;

}

Location: Pentomino.java

Content: 

/** 

 * Generate a list of prefixes to a given depth

 * @param depth the length of each prefix

 * @return a list of arrays of ints, which are potential prefixes

 */

public List<int[]> getSplits(int depth){

  return dancer.split(depth);

}

Location: Pentomino.java

Content: 

/** 

 * Fill in the pieces list.

 */

protected void initializePieces(){

  pieces.add(new Piece("x"," x /xxx/ x ",false,oneRotation));

  pieces.add(new Piece("v","x  /x  /xxx",false,fourRotations));

  pieces.add(new Piece("t","xxx/ x / x ",false,fourRotations));

  pieces.add(new Piece("w","  x/ xx/xx ",false,fourRotations));

  pieces.add(new Piece("u","x x/xxx",false,fourRotations));

  pieces.add(new Piece("i","xxxxx",false,twoRotations));

  pieces.add(new Piece("f"," xx/xx / x ",true,fourRotations));

  pieces.add(new Piece("p","xx/xx/x ",true,fourRotations));

  pieces.add(new Piece("z","xx / x / xx",true,twoRotations));

  pieces.add(new Piece("n","xx  / xxx",true,fourRotations));

  pieces.add(new Piece("y","  x /xxxx",true,fourRotations));

  pieces.add(new Piece("l","   x/xxxx",true,fourRotations));

}

Location: Pentomino.java

Content: 

void initialize(int width,int height){

  this.width=width;

  this.height=height;

  for (int y=0; y < height; ++y) {

    for (int x=0; x < width; ++x) {

      dancer.addColumn(new Point(x,y));

    }

  }

  int pieceBase=dancer.getNumberColumns();

  for (  Piece p : pieces) {

    dancer.addColumn(p);

  }

  boolean[] row=new boolean[dancer.getNumberColumns()];

  for (int idx=0; idx < pieces.size(); ++idx) {

    Piece piece=pieces.get(idx);

    row[idx + pieceBase]=true;

    generateRows(dancer,piece,width,height,false,row,idx == 0);

    if (piece.getFlippable()) {

      generateRows(dancer,piece,width,height,true,row,idx == 0);

    }

    row[idx + pieceBase]=false;

  }

  printer=new SolutionPrinter(width,height);

}

Location: Pentomino.java

Content: 

/** 

 * Is the middle of piece on the upper/left side of the board with  a given offset and size of the piece? This only checks in one dimension.

 * @param offset the offset of the piece

 * @param shapeSize the size of the piece

 * @param board the size of the board

 * @return is it in the upper/left?

 */

private static boolean isSide(int offset,int shapeSize,int board){

  return 2 * offset + shapeSize <= board;

}

Location: Pentomino.java

Content: 

/** 

 * Create the object without initialization.

 */

public Pentomino(){

}

Location: Pentomino.java

Content: 

/** 

 * Create the model for a given pentomino set of pieces and board size.

 * @param width the width of the board in squares

 * @param height the height of the board in squares

 */

public Pentomino(int width,int height){

  initialize(width,height);

}

Location: Pentomino.java

Content: 

/** 

 * Set the printer for the puzzle.

 * @param printer A call-back object that is given each solution as it is found.

 */

public void setPrinter(DancingLinks.SolutionAcceptor<ColumnName> printer){

  this.printer=printer;

}

Location: Pentomino.java

Content: 

/** 

 * Find all of the solutions that start with the given prefix. The printer is given each solution as it is found.

 * @param split a list of row indexes that should be choosen for each rowin order

 * @return the number of solutions found

 */

public int solve(int[] split){

  return dancer.solve(split,printer);

}

Location: Pentomino.java

Content: 

/** 

 * Convert a solution to the puzzle returned by the model into a string that represents the placement of the pieces onto the board.

 * @param width the width of the puzzle board

 * @param height the height of the puzzle board

 * @param solution the list of column names that were selected in the model

 * @return a string representation of completed puzzle board

 */

public static String stringifySolution(int width,int height,List<List<ColumnName>> solution){

  String[][] picture=new String[height][width];

  StringBuffer result=new StringBuffer();

  for (  List<ColumnName> row : solution) {

    Piece piece=null;

    for (    ColumnName item : row) {

      if (item instanceof Piece) {

        piece=(Piece)item;

        break;

      }

    }

    for (    ColumnName item : row) {

      if (item instanceof Point) {

        Point p=(Point)item;

        picture[p.y][p.x]=piece.getName();

      }

    }

  }

  for (int y=0; y < picture.length; ++y) {

    for (int x=0; x < picture[y].length; ++x) {

      result.append(picture[y][x]);

    }

    result.append("\n");

  }

  return result.toString();

}

