Location: ClusterMapReduceTestCase.java

Content: 

/** 

 * Returns a preconfigured Filesystem instance for test cases to read and write files to it. <p/> TestCases should use this Filesystem instance.

 * @return the filesystem used by Hadoop.

 * @throws IOException 

 */

protected FileSystem getFileSystem() throws IOException {

  return dfsCluster.getFileSystem();

}

Location: ClusterMapReduceTestCase.java

Content: 

/** 

 * Returns a path to the input directory for the testcase.

 * @return path to the input directory for the tescase.

 */

protected Path getInputDir(){

  return new Path("input");

}

Location: ClusterMapReduceTestCase.java

Content: 

protected MiniMRCluster getMRCluster(){

  return mrCluster;

}

Location: ClusterMapReduceTestCase.java

Content: 

/** 

 * Returns a path to the output directory for the testcase.

 * @return path to the output directory for the tescase.

 */

protected Path getOutputDir(){

  return new Path("output");

}

Location: ClusterMapReduceTestCase.java

Content: 

/** 

 * Returns the path to the root directory for the testcase.

 * @return path to the root directory for the testcase.

 */

protected Path getTestRootDir(){

  return new Path("x").getParent();

}

Location: ClusterMapReduceTestCase.java

Content: 

/** 

 * Starts the cluster within a testcase. <p/> Note that the cluster is already started when the testcase method is invoked. This method is useful if as part of the testcase the cluster has to be shutdown and restarted again. <p/> If the cluster is already running this method does nothing.

 * @param reformatDFS indicates if DFS has to be reformated

 * @param props configuration properties to inject to the mini cluster

 * @throws Exception if the cluster could not be started

 */

protected synchronized void startCluster(boolean reformatDFS,Properties props) throws Exception {

  if (dfsCluster == null) {

    JobConf conf=new JobConf();

    if (props != null) {

      for (      Map.Entry entry : props.entrySet()) {

        conf.set((String)entry.getKey(),(String)entry.getValue());

      }

    }

    dfsCluster=new MiniDFSCluster(conf,2,reformatDFS,null);

    ConfigurableMiniMRCluster.setConfiguration(props);

    mrCluster=new ConfigurableMiniMRCluster(2,getFileSystem().getUri().toString(),1,conf);

  }

}

