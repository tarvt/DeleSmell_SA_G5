Location: JobClient.java

Content: 

private Collection<BlackListInfo> arrayToBlackListInfo(TaskTrackerInfo[] objs){

  Collection<BlackListInfo> list=new ArrayList<BlackListInfo>();

  for (  TaskTrackerInfo info : objs) {

    BlackListInfo binfo=new BlackListInfo();

    binfo.setTrackerName(info.getTaskTrackerName());

    binfo.setReasonForBlackListing(info.getReasonForBlacklist());

    binfo.setBlackListReport(info.getBlacklistReport());

    list.add(binfo);

  }

  return list;

}

Location: JobClient.java

Content: 

private Collection<String> arrayToStringList(TaskTrackerInfo[] objs){

  Collection<String> list=new ArrayList<String>();

  for (  TaskTrackerInfo info : objs) {

    list.add(info.getTaskTrackerName());

  }

  return list;

}

Location: JobClient.java

Content: 

void displayJobList(JobStatus[] jobs){

  System.out.printf("JobId\tState\tStartTime\tUserName\tPriority\tSchedulingInfo\n");

  for (  JobStatus job : jobs) {

    System.out.printf("%s\t%d\t%d\t%s\t%s\t%s\n",job.getJobID(),job.getRunState(),job.getStartTime(),job.getUsername(),job.getJobPriority().name(),job.getSchedulingInfo());

  }

}

Location: JobClient.java

Content: 

/** 

 * Display the information about a job's tasks, of a particular type and in a particular state

 * @param jobId the ID of the job

 * @param type the type of the task (map/reduce/setup/cleanup)

 * @param state the state of the task (pending/running/completed/failed/killed)

 */

public void displayTasks(JobID jobId,String type,String state) throws IOException {

  try {

    super.displayTasks(cluster.getJob(jobId),type,state);

  }

 catch (  InterruptedException ie) {

    throw new IOException(ie);

  }

}

Location: JobClient.java

Content: 

/** 

 * Get a handle to the Cluster

 */

public Cluster getClusterHandle(){

  return cluster;

}

Location: JobClient.java

Content: 

static Configuration getConfiguration(String jobTrackerSpec){

  Configuration conf=new Configuration();

  if (jobTrackerSpec != null) {

    if (jobTrackerSpec.indexOf(":") >= 0) {

      conf.set("mapred.job.tracker",jobTrackerSpec);

    }

 else {

      String classpathFile="hadoop-" + jobTrackerSpec + ".xml";

      URL validate=conf.getResource(classpathFile);

      if (validate == null) {

        throw new RuntimeException(classpathFile + " not found on CLASSPATH");

      }

      conf.addResource(classpathFile);

    }

  }

  return conf;

}

Location: JobClient.java

Content: 

protected long getCounter(org.apache.hadoop.mapreduce.Counters cntrs,String counterGroupName,String counterName) throws IOException {

  Counters counters=Counters.downgrade(cntrs);

  return counters.findCounter(counterGroupName,counterName).getValue();

}

Location: JobClient.java

Content: 

/** 

 * Get status information about the max available Maps in the cluster.

 * @return the max available Maps in the cluster

 * @throws IOException

 */

public int getDefaultMaps() throws IOException {

  try {

    return cluster.getClusterStatus().getMapSlotCapacity();

  }

 catch (  InterruptedException ie) {

    throw new IOException(ie);

  }

}

Location: JobClient.java

Content: 

/** 

 * Get status information about the max available Reduces in the cluster.

 * @return the max available Reduces in the cluster

 * @throws IOException

 */

public int getDefaultReduces() throws IOException {

  try {

    return cluster.getClusterStatus().getReduceSlotCapacity();

  }

 catch (  InterruptedException ie) {

    throw new IOException(ie);

  }

}

Location: JobClient.java

Content: 

/** 

 * Get a filesystem handle.  We need this to prepare jobs for submission to the MapReduce system.

 * @return the filesystem handle.

 */

public synchronized FileSystem getFs() throws IOException {

  try {

    return cluster.getFileSystem();

  }

 catch (  InterruptedException ie) {

    throw new IOException(ie);

  }

}

Location: JobClient.java

Content: 

private JobQueueInfo[] getJobQueueInfoArray(QueueInfo[] queues) throws IOException {

  JobQueueInfo[] ret=new JobQueueInfo[queues.length];

  for (int i=0; i < queues.length; i++) {

    ret[i]=new JobQueueInfo(queues[i]);

  }

  return ret;

}

Location: JobClient.java

Content: 

/** 

 * @deprecated Applications should rather use {@link #getJob(JobID)}. 

 */

@Deprecated public RunningJob getJob(String jobid) throws IOException {

  return getJob(JobID.forName(jobid));

}

Location: JobClient.java

Content: 

/** 

 * @deprecated Applications should rather use {@link #getMapTaskReports(JobID)}

 */

@Deprecated public TaskReport[] getMapTaskReports(String jobId) throws IOException {

  return getMapTaskReports(JobID.forName(jobId));

}

Location: JobClient.java

Content: 

/** 

 * @deprecated Applications should rather use {@link #getReduceTaskReports(JobID)}

 */

@Deprecated public TaskReport[] getReduceTaskReports(String jobId) throws IOException {

  return getReduceTaskReports(JobID.forName(jobId));

}

Location: JobClient.java

Content: 

/** 

 * Returns task output filter.

 * @return task filter. 

 */

@Deprecated public TaskStatusFilter getTaskOutputFilter(){

  return this.taskOutputFilter;

}

Location: JobClient.java

Content: 

/** 

 * Get the task output filter out of the JobConf.

 * @param job the JobConf to examine.

 * @return the filter level.

 */

public static TaskStatusFilter getTaskOutputFilter(JobConf job){

  return TaskStatusFilter.valueOf(job.get("jobclient.output.filter","FAILED"));

}

Location: JobClient.java

Content: 

/** 

 * Connect to the default  {@link JobTracker}.

 * @param conf the job configuration.

 * @throws IOException

 */

public void init(JobConf conf) throws IOException {

  setConf(conf);

  cluster=new Cluster(conf);

}

Location: JobClient.java

Content: 

/** 

 * Create a job client.

 */

public JobClient(){

}

Location: JobClient.java

Content: 

/** 

 * Build a job client with the given  {@link Configuration},  and connect to the default  {@link JobTracker}.

 * @param conf the configuration.

 * @throws IOException

 */

public JobClient(Configuration conf) throws IOException {

  init(new JobConf(conf));

}

Location: JobClient.java

Content: 

/** 

 * Build a job client, connect to the indicated job tracker.

 * @param jobTrackAddr the job tracker to connect to.

 * @param conf configuration.

 */

public JobClient(InetSocketAddress jobTrackAddr,Configuration conf) throws IOException {

  cluster=new Cluster(jobTrackAddr,conf);

}

Location: JobClient.java

Content: 

/** 

 * Build a job client with the given  {@link JobConf}, and connect to the  default  {@link JobTracker}.

 * @param conf the job configuration.

 * @throws IOException

 */

public JobClient(JobConf conf) throws IOException {

  init(conf);

}

Location: JobClient.java

Content: 

/** 

 * Monitor a job and print status in real-time as progress is made and tasks  fail.

 * @param conf the job's configuration

 * @param job the job to track

 * @return true if the job succeeded

 * @throws IOException if communication to the JobTracker fails

 */

public boolean monitorAndPrintJob(JobConf conf,RunningJob job) throws IOException, InterruptedException {

  return ((NetworkedJob)job).monitorAndPrintJob();

}

Location: JobClient.java

Content: 

/** 

 * Modify the JobConf to set the task output filter.

 * @param job the JobConf to modify.

 * @param newValue the value to set.

 */

public static void setTaskOutputFilter(JobConf job,TaskStatusFilter newValue){

  job.set("jobclient.output.filter",newValue.toString());

}

Location: JobClient.java

Content: 

/** 

 * Sets the output filter for tasks. only those tasks are printed whose output matches the filter. 

 * @param newValue task filter.

 */

@Deprecated public void setTaskOutputFilter(TaskStatusFilter newValue){

  this.taskOutputFilter=newValue;

}

Location: JobClient.java

Content: 

/** 

 * Submit a job to the MR system. This returns a handle to the  {@link RunningJob} which can be used to trackthe running-job.

 * @param jobFile the job configuration.

 * @return a handle to the {@link RunningJob} which can be used to track therunning-job.

 * @throws FileNotFoundException

 * @throws InvalidJobConfException

 * @throws IOException

 */

public RunningJob submitJob(String jobFile) throws FileNotFoundException, InvalidJobConfException, IOException {

  JobConf job=new JobConf(jobFile);

  return submitJob(job);

}

