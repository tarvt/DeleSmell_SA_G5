Location: XMLUtils.java

Content: 

/** 

 * Count Elements in Document by Tag Name

 * @param tag

 * @param document

 * @return number elements by Tag Name

 */

public static int countByTagName(String tag,Document document){

  NodeList list=document.getElementsByTagName(tag);

  return list.getLength();

}

Location: XMLUtils.java

Content: 

public static String getElementValue(String elementName,Element element) throws Exception {

  String value=null;

  NodeList childNodes=element.getElementsByTagName(elementName);

  Element cn=(Element)childNodes.item(0);

  value=cn.getFirstChild().getNodeValue().trim();

  if (value == null) {

    throw new Exception("No element found with given name:" + elementName);

  }

  return value;

}

Location: XMLUtils.java

Content: 

/** 

 * Prints the specified node, then prints all of its children. 

 */

public static void printDOM(Node node){

  int type=node.getNodeType();

switch (type) {

case Node.DOCUMENT_NODE:

{

      System.out.print("<?xml version=\"1.0\" ?>");

      printDOM(((Document)node).getDocumentElement());

      break;

    }

case Node.ELEMENT_NODE:

{

    System.out.println();

    System.out.print("<");

    System.out.print(node.getNodeName());

    NamedNodeMap attrs=node.getAttributes();

    for (int i=0; i < attrs.getLength(); i++) {

      Node attr=attrs.item(i);

      System.out.print(" " + attr.getNodeName().trim() + "=\""+ attr.getNodeValue().trim()+ "\"");

    }

    System.out.print(">");

    NodeList children=node.getChildNodes();

    if (children != null) {

      int len=children.getLength();

      for (int i=0; i < len; i++)       printDOM(children.item(i));

    }

    break;

  }

case Node.ENTITY_REFERENCE_NODE:

{

  System.out.print("&");

  System.out.print(node.getNodeName().trim());

  System.out.print(";");

  break;

}

case Node.CDATA_SECTION_NODE:

{

System.out.print("<![CDATA[");

System.out.print(node.getNodeValue().trim());

System.out.print("]]>");

break;

}

case Node.TEXT_NODE:

{

System.out.println();

System.out.print(node.getNodeValue().trim());

break;

}

case Node.PROCESSING_INSTRUCTION_NODE:

{

System.out.print("<?");

System.out.print(node.getNodeName().trim());

String data=node.getNodeValue().trim();

{

System.out.print(" ");

System.out.print(data);

}

System.out.print("?>");

break;

}

}

if (type == Node.ELEMENT_NODE) {

System.out.println();

System.out.print("</");

System.out.print(node.getNodeName().trim());

System.out.print('>');

}

}

Location: XMLUtils.java

Content: 

/** 

 * This method writes a DOM document to a file

 * @param filename

 * @param document

 */

public static void writeXmlToFile(String filename,Document document){

  try {

    Source source=new DOMSource(document);

    File file=new File(filename);

    Result result=new StreamResult(file);

    Transformer xformer=TransformerFactory.newInstance().newTransformer();

    xformer.transform(source,result);

  }

 catch (  TransformerConfigurationException e) {

    System.err.println("TransformerConfigurationException: " + e);

  }

catch (  TransformerException e) {

    System.err.println("TransformerException: " + e);

  }

}

