Location: ResourceUsageMetrics.java

Content: 

private static void compareMetric(long m1,long m2,TreePath loc) throws DeepInequalityException {

  if (m1 != m2) {

    throw new DeepInequalityException("Value miscompared:" + loc.toString(),loc);

  }

}

Location: ResourceUsageMetrics.java

Content: 

private static void compareSize(ResourceUsageMetrics m1,ResourceUsageMetrics m2,TreePath loc) throws DeepInequalityException {

  if (m1.size() != m2.size()) {

    throw new DeepInequalityException("Size miscompared: " + loc.toString(),loc);

  }

}

Location: ResourceUsageMetrics.java

Content: 

/** 

 * Get the cumulative CPU usage.

 */

public long getCumulativeCpuUsage(){

  return cumulativeCpuUsage;

}

Location: ResourceUsageMetrics.java

Content: 

/** 

 * Get the total heap usage.

 */

public long getHeapUsage(){

  return heapUsage;

}

Location: ResourceUsageMetrics.java

Content: 

/** 

 * Get the physical memory usage.

 */

public long getPhysicalMemoryUsage(){

  return physicalMemoryUsage;

}

Location: ResourceUsageMetrics.java

Content: 

/** 

 * Get the virtual memory usage.

 */

public long getVirtualMemoryUsage(){

  return virtualMemoryUsage;

}

Location: ResourceUsageMetrics.java

Content: 

@Override public void readFields(DataInput in) throws IOException {

  cumulativeCpuUsage=WritableUtils.readVLong(in);

  virtualMemoryUsage=WritableUtils.readVLong(in);

  physicalMemoryUsage=WritableUtils.readVLong(in);

  heapUsage=WritableUtils.readVLong(in);

}

Location: ResourceUsageMetrics.java

Content: 

public ResourceUsageMetrics(){

}

Location: ResourceUsageMetrics.java

Content: 

/** 

 * Set the cumulative CPU usage.

 */

public void setCumulativeCpuUsage(long usage){

  cumulativeCpuUsage=usage;

}

Location: ResourceUsageMetrics.java

Content: 

/** 

 * Set the total heap usage.

 */

public void setHeapUsage(long usage){

  heapUsage=usage;

}

Location: ResourceUsageMetrics.java

Content: 

/** 

 * Set the physical memory usage.

 */

public void setPhysicalMemoryUsage(long usage){

  physicalMemoryUsage=usage;

}

Location: ResourceUsageMetrics.java

Content: 

/** 

 * Set the virtual memory usage.

 */

public void setVirtualMemoryUsage(long usage){

  virtualMemoryUsage=usage;

}

Location: ResourceUsageMetrics.java

Content: 

/** 

 * Returns the size of the serialized data

 */

public int size(){

  int size=0;

  size+=WritableUtils.getVIntSize(cumulativeCpuUsage);

  size+=WritableUtils.getVIntSize(virtualMemoryUsage);

  size+=WritableUtils.getVIntSize(physicalMemoryUsage);

  size+=WritableUtils.getVIntSize(heapUsage);

  return size;

}

Location: ResourceUsageMetrics.java

Content: 

@Override public void write(DataOutput out) throws IOException {

  WritableUtils.writeVLong(out,cumulativeCpuUsage);

  WritableUtils.writeVLong(out,virtualMemoryUsage);

  WritableUtils.writeVLong(out,physicalMemoryUsage);

  WritableUtils.writeVLong(out,heapUsage);

}

