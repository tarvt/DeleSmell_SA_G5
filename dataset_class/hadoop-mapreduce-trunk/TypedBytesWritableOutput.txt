Location: TypedBytesWritableOutput.java

Content: 

private TypedBytesWritableOutput(){

}

Location: TypedBytesWritableOutput.java

Content: 

/** 

 * Creates a new instance of TypedBytesWritableOutput. 

 */

public TypedBytesWritableOutput(DataOutput dout){

  this(new TypedBytesOutput(dout));

}

Location: TypedBytesWritableOutput.java

Content: 

/** 

 * Creates a new instance of TypedBytesWritableOutput. 

 */

public TypedBytesWritableOutput(TypedBytesOutput out){

  this();

  this.out=out;

}

Location: TypedBytesWritableOutput.java

Content: 

public void writeArray(ArrayWritable aw) throws IOException {

  Writable[] writables=aw.get();

  out.writeVectorHeader(writables.length);

  for (  Writable writable : writables) {

    write(writable);

  }

}

Location: TypedBytesWritableOutput.java

Content: 

public void writeBoolean(BooleanWritable bw) throws IOException {

  out.writeBool(bw.get());

}

Location: TypedBytesWritableOutput.java

Content: 

public void writeBytes(BytesWritable bw) throws IOException {

  byte[] bytes=Arrays.copyOfRange(bw.getBytes(),0,bw.getLength());

  out.writeBytes(bytes);

}

Location: TypedBytesWritableOutput.java

Content: 

public void writeByte(ByteWritable bw) throws IOException {

  out.writeByte(bw.get());

}

Location: TypedBytesWritableOutput.java

Content: 

public void writeDouble(DoubleWritable dw) throws IOException {

  out.writeDouble(dw.get());

}

Location: TypedBytesWritableOutput.java

Content: 

public void writeFloat(FloatWritable fw) throws IOException {

  out.writeFloat(fw.get());

}

Location: TypedBytesWritableOutput.java

Content: 

public void writeInt(IntWritable iw) throws IOException {

  out.writeInt(iw.get());

}

Location: TypedBytesWritableOutput.java

Content: 

public void writeLong(LongWritable lw) throws IOException {

  out.writeLong(lw.get());

}

Location: TypedBytesWritableOutput.java

Content: 

public void writeMap(MapWritable mw) throws IOException {

  out.writeMapHeader(mw.size());

  for (  Map.Entry<Writable,Writable> entry : mw.entrySet()) {

    write(entry.getKey());

    write(entry.getValue());

  }

}

Location: TypedBytesWritableOutput.java

Content: 

public void writeRecord(Record r) throws IOException {

  r.serialize(TypedBytesRecordOutput.get(out));

}

Location: TypedBytesWritableOutput.java

Content: 

public void writeSortedMap(SortedMapWritable smw) throws IOException {

  out.writeMapHeader(smw.size());

  for (  Map.Entry<WritableComparable,Writable> entry : smw.entrySet()) {

    write(entry.getKey());

    write(entry.getValue());

  }

}

Location: TypedBytesWritableOutput.java

Content: 

public void writeText(Text t) throws IOException {

  out.writeString(t.toString());

}

Location: TypedBytesWritableOutput.java

Content: 

public void writeTypedBytes(TypedBytesWritable tbw) throws IOException {

  out.writeRaw(tbw.getBytes(),0,tbw.getLength());

}

Location: TypedBytesWritableOutput.java

Content: 

public void writeVInt(VIntWritable viw) throws IOException {

  out.writeInt(viw.get());

}

Location: TypedBytesWritableOutput.java

Content: 

public void writeVLong(VLongWritable vlw) throws IOException {

  out.writeLong(vlw.get());

}

Location: TypedBytesWritableOutput.java

Content: 

public void writeWritable(Writable w) throws IOException {

  ByteArrayOutputStream baos=new ByteArrayOutputStream();

  DataOutputStream dos=new DataOutputStream(baos);

  WritableUtils.writeString(dos,w.getClass().getName());

  w.write(dos);

  dos.close();

  out.writeBytes(baos.toByteArray(),Type.WRITABLE.code);

}

Location: TypedBytesWritableOutput.java

Content: 

public void write(Writable w) throws IOException {

  if (w instanceof TypedBytesWritable) {

    writeTypedBytes((TypedBytesWritable)w);

  }

 else   if (w instanceof BytesWritable) {

    writeBytes((BytesWritable)w);

  }

 else   if (w instanceof ByteWritable) {

    writeByte((ByteWritable)w);

  }

 else   if (w instanceof BooleanWritable) {

    writeBoolean((BooleanWritable)w);

  }

 else   if (w instanceof IntWritable) {

    writeInt((IntWritable)w);

  }

 else   if (w instanceof VIntWritable) {

    writeVInt((VIntWritable)w);

  }

 else   if (w instanceof LongWritable) {

    writeLong((LongWritable)w);

  }

 else   if (w instanceof VLongWritable) {

    writeVLong((VLongWritable)w);

  }

 else   if (w instanceof FloatWritable) {

    writeFloat((FloatWritable)w);

  }

 else   if (w instanceof DoubleWritable) {

    writeDouble((DoubleWritable)w);

  }

 else   if (w instanceof Text) {

    writeText((Text)w);

  }

 else   if (w instanceof ArrayWritable) {

    writeArray((ArrayWritable)w);

  }

 else   if (w instanceof MapWritable) {

    writeMap((MapWritable)w);

  }

 else   if (w instanceof SortedMapWritable) {

    writeSortedMap((SortedMapWritable)w);

  }

 else   if (w instanceof Record) {

    writeRecord((Record)w);

  }

 else {

    writeWritable(w);

  }

}

