Location: TypedBytesRecordOutput.java

Content: 

public void endMap(TreeMap m,String tag) throws IOException {

}

Location: TypedBytesRecordOutput.java

Content: 

public void endRecord(Record r,String tag) throws IOException {

  out.writeListFooter();

}

Location: TypedBytesRecordOutput.java

Content: 

public void endVector(ArrayList v,String tag) throws IOException {

}

Location: TypedBytesRecordOutput.java

Content: 

/** 

 * Get a thread-local typed bytes record output for the supplied {@link DataOutput}.

 * @param out data output object

 * @return typed bytes record output corresponding to the supplied{@link DataOutput}.

 */

public static TypedBytesRecordOutput get(DataOutput out){

  return get(TypedBytesOutput.get(out));

}

Location: TypedBytesRecordOutput.java

Content: 

/** 

 * Get a thread-local typed bytes record input for the supplied {@link TypedBytesOutput}.

 * @param out typed bytes output object

 * @return typed bytes record output corresponding to the supplied{@link TypedBytesOutput}.

 */

public static TypedBytesRecordOutput get(TypedBytesOutput out){

  TypedBytesRecordOutput bout=(TypedBytesRecordOutput)tbOut.get();

  bout.setTypedBytesOutput(out);

  return bout;

}

Location: TypedBytesRecordOutput.java

Content: 

private void setTypedBytesOutput(TypedBytesOutput out){

  this.out=out;

}

Location: TypedBytesRecordOutput.java

Content: 

public void startMap(TreeMap m,String tag) throws IOException {

  out.writeMapHeader(m.size());

}

Location: TypedBytesRecordOutput.java

Content: 

public void startRecord(Record r,String tag) throws IOException {

  out.writeListHeader();

}

Location: TypedBytesRecordOutput.java

Content: 

public void startVector(ArrayList v,String tag) throws IOException {

  out.writeVectorHeader(v.size());

}

Location: TypedBytesRecordOutput.java

Content: 

private TypedBytesRecordOutput(){

}

Location: TypedBytesRecordOutput.java

Content: 

/** 

 * Creates a new instance of TypedBytesRecordOutput. 

 */

public TypedBytesRecordOutput(DataOutput out){

  this(new TypedBytesOutput(out));

}

Location: TypedBytesRecordOutput.java

Content: 

/** 

 * Creates a new instance of TypedBytesRecordOutput. 

 */

public TypedBytesRecordOutput(TypedBytesOutput out){

  this.out=out;

}

Location: TypedBytesRecordOutput.java

Content: 

public void writeBool(boolean b,String tag) throws IOException {

  out.writeBool(b);

}

Location: TypedBytesRecordOutput.java

Content: 

public void writeBuffer(Buffer buf,String tag) throws IOException {

  out.writeBytes(buf.get());

}

Location: TypedBytesRecordOutput.java

Content: 

public void writeByte(byte b,String tag) throws IOException {

  out.writeByte(b);

}

Location: TypedBytesRecordOutput.java

Content: 

public void writeDouble(double d,String tag) throws IOException {

  out.writeDouble(d);

}

Location: TypedBytesRecordOutput.java

Content: 

public void writeFloat(float f,String tag) throws IOException {

  out.writeFloat(f);

}

Location: TypedBytesRecordOutput.java

Content: 

public void writeInt(int i,String tag) throws IOException {

  out.writeInt(i);

}

Location: TypedBytesRecordOutput.java

Content: 

public void writeLong(long l,String tag) throws IOException {

  out.writeLong(l);

}

Location: TypedBytesRecordOutput.java

Content: 

public void writeString(String s,String tag) throws IOException {

  out.writeString(s);

}

