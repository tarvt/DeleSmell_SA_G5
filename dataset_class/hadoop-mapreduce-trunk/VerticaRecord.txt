Location: VerticaRecord.java

Content: 

public List<Integer> getTypes(){

  return types;

}

Location: VerticaRecord.java

Content: 

private void objectTypes(){

  for (  Object obj : values) {

    if (obj == null) {

      this.types.add(Types.NULL);

    }

 else     if (obj instanceof Long) {

      this.types.add(Types.BIGINT);

    }

 else     if (obj instanceof LongWritable) {

      this.types.add(Types.BIGINT);

    }

 else     if (obj instanceof VLongWritable) {

      this.types.add(Types.BIGINT);

    }

 else     if (obj instanceof VIntWritable) {

      this.types.add(Types.INTEGER);

    }

 else     if (obj instanceof Integer) {

      this.types.add(Types.INTEGER);

    }

 else     if (obj instanceof Short) {

      this.types.add(Types.SMALLINT);

    }

 else     if (obj instanceof BigDecimal) {

      this.types.add(Types.NUMERIC);

    }

 else     if (obj instanceof DoubleWritable) {

      this.types.add(Types.DOUBLE);

    }

 else     if (obj instanceof Double) {

      this.types.add(Types.DOUBLE);

    }

 else     if (obj instanceof Float) {

      this.types.add(Types.FLOAT);

    }

 else     if (obj instanceof FloatWritable) {

      this.types.add(Types.FLOAT);

    }

 else     if (obj instanceof byte[]) {

      this.types.add(Types.BINARY);

    }

 else     if (obj instanceof ByteWritable) {

      this.types.add(Types.BINARY);

    }

 else     if (obj instanceof Boolean) {

      this.types.add(Types.BOOLEAN);

    }

 else     if (obj instanceof BooleanWritable) {

      this.types.add(Types.BOOLEAN);

    }

 else     if (obj instanceof Character) {

      this.types.add(Types.CHAR);

    }

 else     if (obj instanceof String) {

      this.types.add(Types.VARCHAR);

    }

 else     if (obj instanceof BytesWritable) {

      this.types.add(Types.VARCHAR);

    }

 else     if (obj instanceof Text) {

      this.types.add(Types.VARCHAR);

    }

 else     if (obj instanceof java.util.Date) {

      this.types.add(Types.DATE);

    }

 else     if (obj instanceof Date) {

      this.types.add(Types.DATE);

    }

 else     if (obj instanceof Time) {

      this.types.add(Types.TIME);

    }

 else     if (obj instanceof Timestamp) {

      this.types.add(Types.TIMESTAMP);

    }

 else {

      throw new RuntimeException("Unknown type " + obj.getClass().getName() + " passed to Vertica Record");

    }

  }

}

Location: VerticaRecord.java

Content: 

/** 

 * set a value, 0 indexed

 * @param i

 */

public void set(Integer i,Object value){

  set(i,value,false);

}

Location: VerticaRecord.java

Content: 

/** 

 * set a value, 0 indexed

 * @param i

 */

public void set(Integer i,Object value,boolean validate){

  if (i >= values.size())   throw new IndexOutOfBoundsException("Index " + i + " greater than input size "+ values.size());

  if (validate && value != null) {

    Integer type=types.get(i);

switch (type) {

case Types.BIGINT:

      if (!(value instanceof Long) && !(value instanceof Integer) && !(value instanceof Short)&& !(value instanceof LongWritable)&& !(value instanceof VLongWritable)&& !(value instanceof VIntWritable))       throw new ClassCastException("Cannot cast " + value.getClass().getName() + " to Long");

    break;

case Types.INTEGER:

  if (!(value instanceof Integer) && !(value instanceof Short) && !(value instanceof VIntWritable))   throw new ClassCastException("Cannot cast " + value.getClass().getName() + " to Integer");

break;

case Types.TINYINT:

case Types.SMALLINT:

if (!(value instanceof Short)) throw new ClassCastException("Cannot cast " + value.getClass().getName() + " to Short");

break;

case Types.REAL:

case Types.DECIMAL:

case Types.NUMERIC:

if (!(value instanceof BigDecimal)) throw new ClassCastException("Cannot cast " + value.getClass().getName() + " to BigDecimal");

case Types.DOUBLE:

if (!(value instanceof Double) && !(value instanceof Float) && !(value instanceof DoubleWritable)&& !(value instanceof FloatWritable)) throw new ClassCastException("Cannot cast " + value.getClass().getName() + " to Double");

break;

case Types.FLOAT:

if (!(value instanceof Float) && !(value instanceof FloatWritable)) throw new ClassCastException("Cannot cast " + value.getClass().getName() + " to Float");

break;

case Types.BINARY:

case Types.LONGVARBINARY:

case Types.VARBINARY:

if (!(value instanceof byte[]) && !(value instanceof BytesWritable)) throw new ClassCastException("Cannot cast " + value.getClass().getName() + " to byte[]");

break;

case Types.BIT:

case Types.BOOLEAN:

if (!(value instanceof Boolean) && !(value instanceof BooleanWritable) && !(value instanceof ByteWritable)) throw new ClassCastException("Cannot cast " + value.getClass().getName() + " to Boolean");

break;

case Types.CHAR:

if (!(value instanceof Character) && !(value instanceof String)) throw new ClassCastException("Cannot cast " + value.getClass().getName() + " to Character");

break;

case Types.LONGNVARCHAR:

case Types.LONGVARCHAR:

case Types.NCHAR:

case Types.NVARCHAR:

case Types.VARCHAR:

if (!(value instanceof String) && !(value instanceof Text)) throw new ClassCastException("Cannot cast " + value.getClass().getName() + " to String");

break;

case Types.DATE:

if (!(value instanceof Date) && !(value instanceof java.util.Date)) throw new ClassCastException("Cannot cast " + value.getClass().getName() + " to Date");

break;

case Types.TIME:

if (!(value instanceof Time) && !(value instanceof java.util.Date)) throw new ClassCastException("Cannot cast " + value.getClass().getName() + " to Time");

break;

case Types.TIMESTAMP:

if (!(value instanceof Timestamp) && !(value instanceof java.util.Date)) throw new ClassCastException("Cannot cast " + value.getClass().getName() + " to Timestamp");

break;

default :

throw new RuntimeException("Unknown type value " + types.get(i));

}

}

values.set(i,value);

}

Location: VerticaRecord.java

Content: 

public void set(String name,Object value) throws Exception {

  if (names == null || names.size() == 0)   throw new Exception("Cannot set record by name if names not initialized");

  int i=names.indexOf(name);

  set(i,value);

}

Location: VerticaRecord.java

Content: 

public String toSQLString(){

  return toSQLString(delimiter,terminator);

}

Location: VerticaRecord.java

Content: 

public String toSQLString(String delimiterArg,String terminatorArg){

  StringBuffer sb=new StringBuffer();

  for (int i=0; i < columns; i++) {

    Object obj=values.get(i);

    Integer type=types.get(i);

switch (type) {

case Types.NULL:

      sb.append("");

    break;

case Types.BIGINT:

  if (obj instanceof Long) {

    sb.append(obj.toString());

    break;

  }

case Types.INTEGER:

if (obj instanceof Integer) {

  sb.append(obj.toString());

  break;

}

case Types.TINYINT:

case Types.SMALLINT:

if (obj instanceof Short) {

sb.append(obj.toString());

break;

}

if (obj instanceof LongWritable) {

sb.append(((LongWritable)obj).get());

break;

}

if (obj instanceof VLongWritable) {

sb.append(((VLongWritable)obj).get());

break;

}

if (obj instanceof VIntWritable) {

sb.append(((VIntWritable)obj).get());

break;

}

case Types.REAL:

case Types.DECIMAL:

case Types.NUMERIC:

if (obj instanceof BigDecimal) {

sb.append(obj.toString());

break;

}

case Types.DOUBLE:

if (obj instanceof Double) {

sb.append(obj.toString());

break;

}

if (obj instanceof DoubleWritable) {

sb.append(((DoubleWritable)obj).get());

break;

}

case Types.FLOAT:

if (obj instanceof Float) {

sb.append(obj.toString());

break;

}

if (obj instanceof FloatWritable) {

sb.append(((FloatWritable)obj).get());

break;

}

case Types.BINARY:

case Types.LONGVARBINARY:

case Types.VARBINARY:

if (obj == null) sb.append("");

 else sb.append(ByteBuffer.wrap((byte[])obj).asCharBuffer());

break;

case Types.BIT:

case Types.BOOLEAN:

if (obj instanceof Boolean) {

if ((Boolean)obj) sb.append("true");

 else sb.append("false");

break;

}

if (obj instanceof BooleanWritable) {

if (((BooleanWritable)obj).get()) sb.append("true");

 else sb.append("false");

break;

}

case Types.LONGNVARCHAR:

case Types.LONGVARCHAR:

case Types.NCHAR:

case Types.NVARCHAR:

case Types.VARCHAR:

if (obj instanceof String) {

sb.append((String)obj);

break;

}

if (obj instanceof byte[]) {

sb.append((byte[])obj);

break;

}

if (obj instanceof BytesWritable) {

sb.append(((BytesWritable)obj).getBytes());

break;

}

case Types.CHAR:

if (obj instanceof Character) {

sb.append((Character)obj);

break;

}

if (obj instanceof ByteWritable) {

sb.append(((ByteWritable)obj).get());

break;

}

case Types.DATE:

case Types.TIME:

case Types.TIMESTAMP:

if (obj instanceof java.util.Date) sb.append(sqlfmt.format((java.util.Date)obj));

 else if (obj instanceof Date) sb.append(sqlfmt.format((Date)obj));

 else if (obj instanceof Time) sb.append(sqlfmt.format((Time)obj));

 else if (obj instanceof Timestamp) sb.append(sqlfmt.format((Timestamp)obj));

break;

default :

if (obj == null) sb.append("");

 else throw new RuntimeException("Unknown type value " + types.get(i));

}

if (i < columns - 1) sb.append(delimiterArg);

 else sb.append(terminatorArg);

}

return sb.toString();

}

Location: VerticaRecord.java

Content: 

public VerticaRecord(){

  this.types=new ArrayList<Integer>();

  this.values=new ArrayList<Object>();

}

Location: VerticaRecord.java

Content: 

public VerticaRecord(List<Object> values,boolean parseTypes){

  this.types=new ArrayList<Integer>();

  this.values=values;

  columns=values.size();

  objectTypes();

}

Location: VerticaRecord.java

Content: 

public VerticaRecord(List<String> names,List<Integer> types){

  this.names=names;

  this.types=types;

  values=new ArrayList<Object>();

  for (  @SuppressWarnings("unused") Integer type : types)   values.add(null);

  columns=values.size();

}

Location: VerticaRecord.java

Content: 

/** 

 * Test interface for junit tests that do not require a database

 * @param types

 * @param values

 * @param dateString

 */

public VerticaRecord(List<String> names,List<Integer> types,List<Object> values,boolean dateString){

  this.names=names;

  this.types=types;

  this.values=values;

  this.dateString=dateString;

  columns=types.size();

  if (types.size() == 0)   objectTypes();

}

Location: VerticaRecord.java

Content: 

/** 

 * Create a new VerticaRecord class out of a query result set

 * @param results ResultSet returned from running input split query

 * @param dateString True if dates should be marshaled as strings

 * @throws SQLException

 */

VerticaRecord(ResultSet results,boolean dateString) throws SQLException {

  this.results=results;

  this.dateString=dateString;

  meta=results.getMetaData();

  columns=meta.getColumnCount();

  names=new ArrayList<String>(columns);

  types=new ArrayList<Integer>(columns);

  values=new ArrayList<Object>(columns);

  for (int i=0; i < columns; i++) {

    names.add(meta.getCatalogName(i + 1));

    types.add(meta.getColumnType(i + 1));

    values.add(null);

  }

}

