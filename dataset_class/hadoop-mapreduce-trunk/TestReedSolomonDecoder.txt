Location: TestReedSolomonDecoder.java

Content: 

public void testDecoder() throws Exception {

  hongshuai();

  new File(TEST_DIR).mkdirs();

  conf=new Configuration();

  conf.set("fs.shell.delete.classname","org.apache.hadoop.hdfs.DFSClient");

  conf.setBoolean("dfs.permissions",false);

  dfs=new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATANODES).build();

  dfs.waitActive();

  fileSys=dfs.getFileSystem();

  String namenode=fileSys.getUri().toString();

  FileSystem.setDefaultUri(conf,namenode);

  int stripeSize=10;

  int paritySize=4;

  long blockSize=8192;

  Path file1=new Path("/user/raidtest/file1");

  Path recoveredFile1=new Path("/user/raidtest/file1.recovered");

  Path parityFile1=new Path("/rsraid/user/raidtest/file1");

  long crc1=TestRaidDfs.createTestFilePartialLastBlock(fileSys,file1,1,25,blockSize);

  FileStatus file1Stat=fileSys.getFileStatus(file1);

  conf.setInt("raid.rsdecoder.bufsize",512);

  conf.setInt("raid.rsencoder.bufsize",512);

  try {

    ReedSolomonEncoder encoder=new ReedSolomonEncoder(conf,stripeSize,paritySize);

    short parityRepl=1;

    encoder.encodeFile(fileSys,file1,fileSys,parityFile1,parityRepl,Reporter.NULL);

    DistributedFileSystem dfs=(DistributedFileSystem)fileSys;

    String[] corruptFiles=RaidDFSUtil.getCorruptFiles(dfs);

    assertEquals(corruptFiles.length,0);

    long corruptOffset=blockSize * 5;

    FileStatus srcStat=fileSys.getFileStatus(file1);

    LocatedBlocks locations=RaidDFSUtil.getBlockLocations(dfs,file1.toUri().getPath(),0,srcStat.getLen());

    corruptBlock(locations.get(5).getBlock());

    corruptBlock(locations.get(6).getBlock());

    TestBlockFixer.reportCorruptBlocks(dfs,file1,new int[]{5,6},srcStat.getBlockSize());

    corruptFiles=RaidDFSUtil.getCorruptFiles(dfs);

    assertEquals(corruptFiles.length,1);

    assertEquals(corruptFiles[0],file1.toString());

    ReedSolomonDecoder decoder=new ReedSolomonDecoder(conf,stripeSize,paritySize);

    decoder.decodeFile(fileSys,file1,fileSys,parityFile1,corruptOffset,recoveredFile1);

    assertTrue(TestRaidDfs.validateFile(fileSys,recoveredFile1,file1Stat.getLen(),crc1));

  }

  finally {

    myTearDown();

  }

}

