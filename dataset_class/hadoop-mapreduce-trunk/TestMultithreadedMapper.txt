Location: TestMultithreadedMapper.java

Content: 

private void run(boolean ioEx,boolean rtEx) throws Exception {

  String localPathRoot=System.getProperty("test.build.data","/tmp");

  Path inDir=new Path(localPathRoot,"testing/mt/input");

  Path outDir=new Path(localPathRoot,"testing/mt/output");

  Configuration conf=createJobConf();

  if (ioEx) {

    conf.setBoolean("multithreaded.ioException",true);

  }

  if (rtEx) {

    conf.setBoolean("multithreaded.runtimeException",true);

  }

  Job job=MapReduceTestUtil.createJob(conf,inDir,outDir,1,1);

  job.setJobName("mt");

  job.setMapperClass(MultithreadedMapper.class);

  MultithreadedMapper.setMapperClass(job,IDMap.class);

  MultithreadedMapper.setNumberOfThreads(job,2);

  job.setReducerClass(Reducer.class);

  job.waitForCompletion(true);

  if (job.isSuccessful()) {

    assertFalse(ioEx || rtEx);

  }

 else {

    assertTrue(ioEx || rtEx);

  }

}

Location: TestMultithreadedMapper.java

Content: 

public void testIOExRun() throws Exception {

  run(true,false);

}

Location: TestMultithreadedMapper.java

Content: 

public TestMultithreadedMapper() throws IOException {

  super(HadoopTestCase.LOCAL_MR,HadoopTestCase.LOCAL_FS,1,1);

}

Location: TestMultithreadedMapper.java

Content: 

public void testOKRun() throws Exception {

  run(false,false);

}

Location: TestMultithreadedMapper.java

Content: 

public void testRuntimeExRun() throws Exception {

  run(false,true);

}

