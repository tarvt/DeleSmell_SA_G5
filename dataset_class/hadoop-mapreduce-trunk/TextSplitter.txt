Location: TextSplitter.java

Content: 

/** 

 * Return the string encoded in a BigDecimal. Repeatedly multiply the input value by 65536; the integer portion after such a multiplication represents a single character in base 65536. Convert that back into a char and create a string out of these until we have no data left.

 */

String bigDecimalToString(BigDecimal bd){

  BigDecimal cur=bd.stripTrailingZeros();

  StringBuilder sb=new StringBuilder();

  for (int numConverted=0; numConverted < MAX_CHARS; numConverted++) {

    cur=cur.multiply(ONE_PLACE);

    int curCodePoint=cur.intValue();

    if (0 == curCodePoint) {

      break;

    }

    cur=cur.subtract(new BigDecimal(curCodePoint));

    sb.append(Character.toChars(curCodePoint));

  }

  return sb.toString();

}

Location: TextSplitter.java

Content: 

List<String> split(int numSplits,String minString,String maxString,String commonPrefix) throws SQLException {

  BigDecimal minVal=stringToBigDecimal(minString);

  BigDecimal maxVal=stringToBigDecimal(maxString);

  List<BigDecimal> splitPoints=split(new BigDecimal(numSplits),minVal,maxVal);

  List<String> splitStrings=new ArrayList<String>();

  for (  BigDecimal bd : splitPoints) {

    splitStrings.add(commonPrefix + bigDecimalToString(bd));

  }

  if (splitStrings.size() == 0 || !splitStrings.get(0).equals(commonPrefix + minString)) {

    splitStrings.add(0,commonPrefix + minString);

  }

  if (splitStrings.size() == 1 || !splitStrings.get(splitStrings.size() - 1).equals(commonPrefix + maxString)) {

    splitStrings.add(commonPrefix + maxString);

  }

  return splitStrings;

}

Location: TextSplitter.java

Content: 

/** 

 * Return a BigDecimal representation of string 'str' suitable for use in a numerically-sorting order.

 */

BigDecimal stringToBigDecimal(String str){

  BigDecimal result=BigDecimal.ZERO;

  BigDecimal curPlace=ONE_PLACE;

  int len=Math.min(str.length(),MAX_CHARS);

  for (int i=0; i < len; i++) {

    int codePoint=str.codePointAt(i);

    result=result.add(tryDivide(new BigDecimal(codePoint),curPlace));

    curPlace=curPlace.multiply(ONE_PLACE);

  }

  return result;

}

