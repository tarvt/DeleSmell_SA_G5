Location: Main.java

Content: 

public static void ArgumentProcess(String[] args){

  for (int i=0; i < args.length; i++) {

    if (args[i].equalsIgnoreCase("-help")) {

      hongshuai();

      System.out.println("The parameters (Selective):");

      System.out.println("	-nt  : the number of threads");

      System.out.println("	-nr  : the number of read threads");

      System.out.println("	-ne  : the number of execution");

      System.out.println();

      System.exit(0);

    }

  }

  for (int i=0; i < args.length; i++) {

    if (args[i].equalsIgnoreCase("-nt")) {

      numThreads=Integer.parseInt(args[i + 1]);

      i++;

      continue;

    }

    if (args[i].equalsIgnoreCase("-nr")) {

      readNum=Integer.parseInt(args[i + 1]);

      i++;

      continue;

    }

    if (args[i].equalsIgnoreCase("-ne")) {

      exeTimes=Integer.parseInt(args[i + 1]);

      i++;

      continue;

    }

  }

}

Location: Main.java

Content: 

public static void help(){

  System.out.println("The parameters (Selective):");

  System.out.println("	-nt  : the number of threads");

  System.out.println("	-nr  : the number of read threads");

  System.out.println("	-ne  : the number of execution");

  System.out.println();

}

Location: Main.java

Content: 

/** 

 * @param args

 */

public static void main(String[] args){

  int writeNum=numThreads - readNum;

  RBTree rbtree=new RBTree();

  rbtree.init();

  Test test=new SyncTest(rbtree);

  long startTime=System.currentTimeMillis();

  Thread[] rd=new ReadThread[readNum];

  Thread[] wr=new WriteThread[writeNum];

  for (int i=0; i < readNum; i++) {

    rd[i]=new ReadThread(i,test,exeTimes);

    rd[i].start();

    rd[i].run();

  }

  for (int i=0; i < writeNum; i++) {

    wr[i]=new WriteThread(readNum + i,test,exeTimes);

    wr[i].start();

    wr[i].run();

  }

  try {

    for (int i=0; i < readNum; i++)     rd[i].join();

    for (int i=0; i < writeNum; i++)     wr[i].join();

  }

 catch (  InterruptedException e) {

    e.printStackTrace();

  }

  long endTime=System.currentTimeMillis();

  System.out.println("The time elipse: " + (endTime - startTime));

}

