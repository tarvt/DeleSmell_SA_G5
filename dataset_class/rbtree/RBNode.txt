Location: RBNode.java

Content: 

/** 

 * examine node color

 * @return node color

 */

public int getColor(){

  return color;

}

Location: RBNode.java

Content: 

/** 

 * examine node's left child

 * @return node's left child

 */

public RBNode getLeft(){

  return left;

}

Location: RBNode.java

Content: 

/** 

 * examine node's parent

 * @return node's parent

 */

public RBNode getParent(){

  return parent;

}

Location: RBNode.java

Content: 

/** 

 * examine node's right child

 * @return node's right child

 */

public RBNode getRight(){

  return right;

}

Location: RBNode.java

Content: 

/** 

 * Reads node value.

 * @return node value

 */

public int getValue(){

  return value;

}

Location: RBNode.java

Content: 

/** 

 * is node marked?

 * @return whether node is marked

 */

public boolean isMarked(){

  return marked;

}

Location: RBNode.java

Content: 

/** 

 * change node's color

 * @param newColor new color

 */

public void setColor(int newColor){

  color=newColor;

}

Location: RBNode.java

Content: 

/** 

 * change node's right child

 * @param newLeft new left child

 */

public void setLeft(RBNode newLeft){

  left=newLeft;

}

Location: RBNode.java

Content: 

/** 

 * mark or unmark node

 * @param newMarked new value for marked flag

 */

public void setMarked(boolean newMarked){

  marked=newMarked;

}

Location: RBNode.java

Content: 

/** 

 * change node's parent

 * @param newParent new parent

 */

public void setParent(RBNode newParent){

  parent=newParent;

}

Location: RBNode.java

Content: 

/** 

 * change node's left child

 * @param newRight new right child

 */

public void setRight(RBNode newRight){

  right=newRight;

}

Location: RBNode.java

Content: 

/** 

 * sets node value

 * @param newValue new value for node

 */

public void setValue(int newValue){

  value=newValue;

}

