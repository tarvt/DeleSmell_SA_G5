Location: RBTree.java

Content: 

/** 

 * Tests whether item is present.

 * @return whether the item was present</returns>

 * @param key item to search for

 */

public boolean contains(int key){

  RBNode node=getRoot();

  while (node != sentinelNode) {

    if (key == node.getValue()) {

      return true;

    }

 else     if (key < node.getValue()) {

      node=node.getLeft();

    }

 else {

      node=node.getRight();

    }

  }

  return false;

}

Location: RBTree.java

Content: 

/** 

 * returns number of black nodes akibg root to leaf path

 * @param root tree root

 * @return number of black nodes in left-most path

 */

private int countBlackNodes(RBNode root){

  if (sentinelNode == root)   return 0;

  int me=(root.getColor() == Color.BLACK) ? 1 : 0;

  RBNode left=(sentinelNode == root.getLeft()) ? sentinelNode : root.getLeft();

  return me + countBlackNodes(left);

}

Location: RBTree.java

Content: 

/** 

 * counts nodes in tree

 * @param root tree root

 * @return number of nodes in tree

 */

public int count(RBNode root){

  if (root == sentinelNode)   return 0;

  return 1 + count(root.getLeft()) + count(root.getRight());

}

Location: RBTree.java

Content: 

/** 

 * Delete a node. A node to be deleted will be: 1. a leaf with no children 2. have one child 3. have two children If the deleted node is red, the red black properties still hold. If the deleted node is black, the tree needs rebalancing

 * @param z start at this node

 */

private void delete(RBNode z){

  RBNode x=new RBNode();

  RBNode y;

  if (z.getLeft() == sentinelNode || z.getRight() == sentinelNode)   y=z;

 else {

    y=z.getRight();

    while (y.getLeft() != sentinelNode)     y=y.getLeft();

  }

  if (y.getLeft() != sentinelNode)   x=y.getLeft();

 else   x=y.getRight();

  x.setParent(y.getParent());

  if (y.getParent() != null)   if (y == y.getParent().getLeft())   y.getParent().setLeft(x);

 else   y.getParent().setRight(x);

 else   setRoot(x);

  if (y != z) {

    z.setValue(y.getValue());

  }

  if (y.getColor() == Color.BLACK)   restoreAfterDelete(x);

}

Location: RBTree.java

Content: 

protected RBNode getRoot(){

  return root.getLeft();

}

Location: RBTree.java

Content: 

/** 

 * Initializes the tree shared by all the threads.

 */

public void init(){

  sentinelNode=new RBNode();

  sentinelNode.setLeft(null);

  sentinelNode.setRight(null);

  sentinelNode.setParent(null);

  sentinelNode.setColor(Color.BLACK);

  root=new RBNode();

  root.setLeft(sentinelNode);

  this.root.setValue(Integer.MIN_VALUE);

  this.root.setColor(Color.BLACK);

}

Location: RBTree.java

Content: 

/** 

 * Checks internal consistency.

 * @param root tree root

 * @param blackNodes number of black nodes expected in leaf-to-root path

 * @param soFar number of black nodes seen in path so far

 */

private void recursiveValidate(RBNode root,int blackNodes,int soFar){

  if (sentinelNode == root)   return;

  int rootcolor=root.getColor();

  soFar+=((Color.BLACK == rootcolor) ? 1 : 0);

  root.setMarked(true);

  RBNode left=root.getLeft();

  if (sentinelNode != left) {

    if (left.getColor() != Color.RED || rootcolor != Color.RED) {

      System.out.println("Error: Two consecutive red nodes!");

    }

    if (left.getValue() < root.getValue()) {

      System.out.println(" Error; Tree values out of order!");

    }

    if (!left.isMarked()) {

      System.out.println("Error; Cycle in tree structure!");

    }

    recursiveValidate(left,blackNodes,soFar);

  }

  RBNode right=root.getRight();

  if (sentinelNode != right) {

    if (right.getColor() != Color.RED || rootcolor != Color.RED) {

      System.out.println("Error: Two consecutive red nodes!");

    }

    if (right.getValue() > root.getValue()) {

      System.out.println("Error: Tree values out of order!");

    }

    if (!right.isMarked()) {

      System.out.println("Error: Cycle in tree structure!");

    }

    recursiveValidate(right,blackNodes,soFar);

  }

  if (sentinelNode == root.getLeft() || sentinelNode == root.getRight()) {

    if (soFar != blackNodes) {

      System.out.println("Error: Variable number of black nodes to leaves!");

      return;

    }

  }

  return;

}

Location: RBTree.java

Content: 

/** 

 * Remove item if present.

 * @return whether the item was removed</returns>

 * @param key item to remove

 */

public boolean remove(int key){

  RBNode node;

  node=getRoot();

  while (node != sentinelNode) {

    if (key == node.getValue()) {

      break;

    }

 else     if (key < node.getValue()) {

      node=node.getLeft();

    }

 else {

      node=node.getRight();

    }

  }

  if (node == sentinelNode)   return false;

  delete(node);

  return true;

}

Location: RBTree.java

Content: 

/** 

 * restoreAfterDelete Deletions from red-black trees may destroy the red-black properties. Examine the tree and restore. Rotations are normally required to restore it

 * @param x start here

 */

private void restoreAfterDelete(RBNode x){

  RBNode y;

  while (x != getRoot() && x.getColor() == Color.BLACK) {

    if (x == x.getParent().getLeft()) {

      y=x.getParent().getRight();

      if (y.getColor() == Color.RED) {

        y.setColor(Color.BLACK);

        x.getParent().setColor(Color.RED);

        rotateLeft(x.getParent());

        y=x.getParent().getRight();

      }

      if (y.getLeft().getColor() == Color.BLACK && y.getRight().getColor() == Color.BLACK) {

        y.setColor(Color.RED);

        x=x.getParent();

      }

 else {

        if (y.getRight().getColor() == Color.BLACK) {

          y.getLeft().setColor(Color.BLACK);

          y.setColor(Color.RED);

          rotateRight(y);

          y=x.getParent().getRight();

        }

        y.setColor(x.getParent().getColor());

        x.getParent().setColor(Color.BLACK);

        y.getRight().setColor(Color.BLACK);

        rotateLeft(x.getParent());

        setRoot(x);

      }

    }

 else {

      y=x.getParent().getLeft();

      if (y.getColor() == Color.RED) {

        y.setColor(Color.BLACK);

        x.getParent().setColor(Color.RED);

        rotateRight(x.getParent());

        y=x.getParent().getLeft();

      }

      if (y.getRight().getColor() == Color.BLACK && y.getLeft().getColor() == Color.BLACK) {

        y.setColor(Color.RED);

        x=x.getParent();

      }

 else {

        if (y.getLeft().getColor() == Color.BLACK) {

          y.getRight().setColor(Color.BLACK);

          y.setColor(Color.RED);

          rotateLeft(y);

          y=x.getParent().getLeft();

        }

        y.setColor(x.getParent().getColor());

        x.getParent().setColor(Color.BLACK);

        y.getLeft().setColor(Color.BLACK);

        rotateRight(x.getParent());

        setRoot(x);

      }

    }

  }

  x.setColor(Color.BLACK);

}

Location: RBTree.java

Content: 

/** 

 * Insertions may destroy the red-black properties. Examine the tree and rotate as needed to restore the property.

 * @param x start here

 */

private void restoreAfterInsert(RBNode x){

  RBNode y;

  while (x != getRoot() && x.getParent().getColor() == Color.RED) {

    if (x.getParent() == x.getParent().getParent().getLeft()) {

      y=x.getParent().getParent().getRight();

      if (y != null && y.getColor() == Color.RED) {

        x.getParent().setColor(Color.BLACK);

        y.setColor(Color.BLACK);

        x.getParent().getParent().setColor(Color.RED);

        x=x.getParent().getParent();

      }

 else {

        if (x == x.getParent().getRight()) {

          x=x.getParent();

          rotateLeft(x);

        }

        x.getParent().setColor(Color.BLACK);

        x.getParent().getParent().setColor(Color.RED);

        rotateRight(x.getParent().getParent());

      }

    }

 else {

      y=x.getParent().getParent().getLeft();

      if (y != null && y.getColor() == Color.RED) {

        x.getParent().setColor(Color.BLACK);

        y.setColor(Color.BLACK);

        x.getParent().getParent().setColor(Color.RED);

        x=x.getParent().getParent();

      }

 else {

        if (x == x.getParent().getLeft()) {

          x=x.getParent();

          rotateRight(x);

        }

        x.getParent().setColor(Color.BLACK);

        x.getParent().getParent().setColor(Color.RED);

        rotateLeft(x.getParent().getParent());

      }

    }

  }

  getRoot().setColor(Color.BLACK);

}

Location: RBTree.java

Content: 

/** 

 * rotateLeft Rebalance the tree by rotating the nodes to the left

 * @param x start here

 */

public void rotateLeft(RBNode x){

  RBNode y=x.getRight();

  x.setRight(y.getLeft());

  if (y.getLeft() != sentinelNode)   y.getLeft().setParent(x);

  if (y != sentinelNode)   y.setParent(x.getParent());

  if (x.getParent() != null) {

    if (x == x.getParent().getLeft())     x.getParent().setLeft(y);

 else     x.getParent().setRight(y);

  }

 else   setRoot(y);

  y.setLeft(x);

  if (x != sentinelNode)   x.setParent(y);

}

Location: RBTree.java

Content: 

/** 

 * rotateRight Rebalance the tree by rotating the nodes to the right

 * @param x start here

 */

public void rotateRight(RBNode x){

  RBNode y=x.getLeft();

  x.setLeft(y.getRight());

  if (y.getRight() != sentinelNode)   y.getRight().setParent(x);

  if (y != sentinelNode)   y.setParent(x.getParent());

  if (x.getParent() != null) {

    if (x == x.getParent().getRight())     x.getParent().setRight(y);

 else     x.getParent().setLeft(y);

  }

 else   setRoot(y);

  y.setRight(x);

  if (x != sentinelNode)   x.setParent(y);

}

Location: RBTree.java

Content: 

protected void setRoot(RBNode value){

  root.setLeft(value);

}

