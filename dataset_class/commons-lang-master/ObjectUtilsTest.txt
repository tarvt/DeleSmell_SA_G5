Location: ObjectUtilsTest.java

Content: 

/** 

 * Tests  {@link ObjectUtils#allNotNull(Object)}.

 */

@Test public void testAllNotNull(){

  assertFalse(ObjectUtils.allNotNull((Object)null));

  assertFalse(ObjectUtils.allNotNull((Object[])null));

  assertFalse(ObjectUtils.allNotNull(null,null,null));

  assertFalse(ObjectUtils.allNotNull(null,FOO,BAR));

  assertFalse(ObjectUtils.allNotNull(FOO,BAR,null));

  assertFalse(ObjectUtils.allNotNull(FOO,BAR,null,FOO,BAR));

  assertTrue(ObjectUtils.allNotNull());

  assertTrue(ObjectUtils.allNotNull(FOO));

  assertTrue(ObjectUtils.allNotNull(FOO,BAR,1,Boolean.TRUE,new Object(),new Object[]{}));

}

Location: ObjectUtilsTest.java

Content: 

/** 

 * Tests  {@link ObjectUtils#allNull(Object)}.

 */

@Test public void testAllNull(){

  assertTrue(ObjectUtils.allNull());

  assertTrue(ObjectUtils.allNull((Object)null));

  assertTrue(ObjectUtils.allNull((Object[])null));

  assertTrue(ObjectUtils.allNull(null,null,null));

  assertFalse(ObjectUtils.allNull(FOO));

  assertFalse(ObjectUtils.allNull(null,FOO,null));

  assertFalse(ObjectUtils.allNull(null,null,null,null,FOO,BAR));

}

Location: ObjectUtilsTest.java

Content: 

/** 

 * Tests  {@link ObjectUtils#anyNotNull(Object)}.

 */

@Test public void testAnyNotNull(){

  assertFalse(ObjectUtils.anyNotNull());

  assertFalse(ObjectUtils.anyNotNull((Object)null));

  assertFalse(ObjectUtils.anyNotNull((Object[])null));

  assertFalse(ObjectUtils.anyNotNull(null,null,null));

  assertTrue(ObjectUtils.anyNotNull(FOO));

  assertTrue(ObjectUtils.anyNotNull(null,FOO,null));

  assertTrue(ObjectUtils.anyNotNull(null,null,null,null,FOO,BAR));

}

Location: ObjectUtilsTest.java

Content: 

/** 

 * Tests  {@link ObjectUtils#anyNull(Object)}.

 */

@Test public void testAnyNull(){

  assertTrue(ObjectUtils.anyNull((Object)null));

  assertTrue(ObjectUtils.anyNull(null,null,null));

  assertTrue(ObjectUtils.anyNull(null,FOO,BAR));

  assertTrue(ObjectUtils.anyNull(FOO,BAR,null));

  assertTrue(ObjectUtils.anyNull(FOO,BAR,null,FOO,BAR));

  assertFalse(ObjectUtils.anyNull());

  assertFalse(ObjectUtils.anyNull(FOO));

  assertFalse(ObjectUtils.anyNull(FOO,BAR,1,Boolean.TRUE,new Object(),new Object[]{}));

}

Location: ObjectUtilsTest.java

Content: 

/** 

 * Tests  {@link ObjectUtils#clone(Object)} with a cloneable object.

 */

@Test public void testCloneOfCloneable(){

  final CloneableString string=new CloneableString("apache");

  final CloneableString stringClone=ObjectUtils.clone(string);

  assertEquals("apache",stringClone.getValue());

}

Location: ObjectUtilsTest.java

Content: 

/** 

 * Tests  {@link ObjectUtils#clone(Object)} with a not cloneable object.

 */

@Test public void testCloneOfNotCloneable(){

  final String string="apache";

  assertNull(ObjectUtils.clone(string));

}

Location: ObjectUtilsTest.java

Content: 

/** 

 * Tests  {@link ObjectUtils#clone(Object)} with an array of primitives.

 */

@Test public void testCloneOfPrimitiveArray(){

  assertArrayEquals(new int[]{1},ObjectUtils.clone(new int[]{1}));

}

Location: ObjectUtilsTest.java

Content: 

/** 

 * Tests  {@link ObjectUtils#clone(Object)} with an object array.

 */

@Test public void testCloneOfStringArray(){

  assertTrue(Arrays.deepEquals(new String[]{"string"},ObjectUtils.clone(new String[]{"string"})));

}

Location: ObjectUtilsTest.java

Content: 

/** 

 * Tests  {@link ObjectUtils#clone(Object)} with an uncloneable object.

 */

@Test public void testCloneOfUncloneable(){

  final UncloneableString string=new UncloneableString("apache");

  final CloneFailedException e=assertThrows(CloneFailedException.class,() -> ObjectUtils.clone(string));

  assertEquals(NoSuchMethodException.class,e.getCause().getClass());

}

Location: ObjectUtilsTest.java

Content: 

@Test public void testComparatorMedian(){

  final CharSequenceComparator cmp=new CharSequenceComparator();

  final NonComparableCharSequence foo=new NonComparableCharSequence("foo");

  final NonComparableCharSequence bar=new NonComparableCharSequence("bar");

  final NonComparableCharSequence baz=new NonComparableCharSequence("baz");

  final NonComparableCharSequence blah=new NonComparableCharSequence("blah");

  final NonComparableCharSequence wah=new NonComparableCharSequence("wah");

  assertSame(foo,ObjectUtils.median(cmp,foo));

  assertSame(bar,ObjectUtils.median(cmp,foo,bar));

  assertSame(baz,ObjectUtils.median(cmp,foo,bar,baz));

  assertSame(baz,ObjectUtils.median(cmp,foo,bar,baz,blah));

  assertSame(blah,ObjectUtils.median(cmp,foo,bar,baz,blah,wah));

}

Location: ObjectUtilsTest.java

Content: 

@Test public void testComparatorMedian_emptyItems(){

  assertThrows(IllegalArgumentException.class,() -> ObjectUtils.median(new CharSequenceComparator()));

}

Location: ObjectUtilsTest.java

Content: 

@Test public void testComparatorMedian_nullComparator(){

  assertThrows(NullPointerException.class,() -> ObjectUtils.median((Comparator<CharSequence>)null,new NonComparableCharSequence("foo")));

}

Location: ObjectUtilsTest.java

Content: 

@Test public void testComparatorMedian_nullItems(){

  assertThrows(NullPointerException.class,() -> ObjectUtils.median(new CharSequenceComparator(),(CharSequence[])null));

}

Location: ObjectUtilsTest.java

Content: 

@Test public void testConstMethods(){

  assertTrue(ObjectUtils.CONST(true),"CONST(boolean)");

  assertEquals((byte)3,ObjectUtils.CONST((byte)3),"CONST(byte)");

  assertEquals((char)3,ObjectUtils.CONST((char)3),"CONST(char)");

  assertEquals((short)3,ObjectUtils.CONST((short)3),"CONST(short)");

  assertEquals(3,ObjectUtils.CONST(3),"CONST(int)");

  assertEquals(3L,ObjectUtils.CONST(3L),"CONST(long)");

  assertEquals(3f,ObjectUtils.CONST(3f),"CONST(float)");

  assertEquals(3.0,ObjectUtils.CONST(3.0),"CONST(double)");

  assertEquals("abc",ObjectUtils.CONST("abc"),"CONST(Object)");

  final boolean MAGIC_FLAG=ObjectUtils.CONST(true);

  final byte MAGIC_BYTE1=ObjectUtils.CONST((byte)127);

  final byte MAGIC_BYTE2=ObjectUtils.CONST_BYTE(127);

  final char MAGIC_CHAR=ObjectUtils.CONST('a');

  final short MAGIC_SHORT1=ObjectUtils.CONST((short)123);

  final short MAGIC_SHORT2=ObjectUtils.CONST_SHORT(127);

  final int MAGIC_INT=ObjectUtils.CONST(123);

  final long MAGIC_LONG1=ObjectUtils.CONST(123L);

  final long MAGIC_LONG2=ObjectUtils.CONST(3);

  final float MAGIC_FLOAT=ObjectUtils.CONST(1.0f);

  final double MAGIC_DOUBLE=ObjectUtils.CONST(1.0);

  final String MAGIC_STRING=ObjectUtils.CONST("abc");

  assertTrue(MAGIC_FLAG);

  assertEquals(127,MAGIC_BYTE1);

  assertEquals(127,MAGIC_BYTE2);

  assertEquals('a',MAGIC_CHAR);

  assertEquals(123,MAGIC_SHORT1);

  assertEquals(127,MAGIC_SHORT2);

  assertEquals(123,MAGIC_INT);

  assertEquals(123,MAGIC_LONG1);

  assertEquals(3,MAGIC_LONG2);

  assertEquals(1.0f,MAGIC_FLOAT);

  assertEquals(1.0,MAGIC_DOUBLE);

  assertEquals("abc",MAGIC_STRING);

  assertThrows(IllegalArgumentException.class,() -> ObjectUtils.CONST_BYTE(-129),"CONST_BYTE(-129): IllegalArgumentException should have been thrown.");

  assertThrows(IllegalArgumentException.class,() -> ObjectUtils.CONST_BYTE(128),"CONST_BYTE(128): IllegalArgumentException should have been thrown.");

  assertThrows(IllegalArgumentException.class,() -> ObjectUtils.CONST_SHORT(-32769),"CONST_SHORT(-32769): IllegalArgumentException should have been thrown.");

  assertThrows(IllegalArgumentException.class,() -> ObjectUtils.CONST_BYTE(32768),"CONST_SHORT(32768): IllegalArgumentException should have been thrown.");

}

Location: ObjectUtilsTest.java

Content: 

@Test public void testDefaultIfNull(){

  final Object o=FOO;

  final Object dflt=BAR;

  assertSame(dflt,ObjectUtils.defaultIfNull(null,dflt),"dflt was not returned when o was null");

  assertSame(o,ObjectUtils.defaultIfNull(o,dflt),"dflt was returned when o was not null");

  assertSame(dflt,ObjectUtils.getIfNull(null,() -> dflt),"dflt was not returned when o was null");

  assertSame(o,ObjectUtils.getIfNull(o,() -> dflt),"dflt was returned when o was not null");

  assertSame(o,ObjectUtils.getIfNull(FOO,() -> dflt),"dflt was returned when o was not null");

  assertSame(o,ObjectUtils.getIfNull("foo",() -> dflt),"dflt was returned when o was not null");

  final MutableInt callsCounter=new MutableInt(0);

  final Supplier<Object> countingDefaultSupplier=() -> {

    callsCounter.increment();

    return dflt;

  }

;

  ObjectUtils.getIfNull(o,countingDefaultSupplier);

  assertEquals(0,callsCounter.getValue());

  ObjectUtils.getIfNull(null,countingDefaultSupplier);

  assertEquals(1,callsCounter.getValue());

}

Location: ObjectUtilsTest.java

Content: 

@Test public void testFirstNonNull(){

  assertEquals("",ObjectUtils.firstNonNull(null,""));

  final String firstNonNullGenerics=ObjectUtils.firstNonNull(null,null,"123","456");

  assertEquals("123",firstNonNullGenerics);

  assertEquals("123",ObjectUtils.firstNonNull("123",null,"456",null));

  assertSame(Boolean.TRUE,ObjectUtils.firstNonNull(Boolean.TRUE));

  assertNull(ObjectUtils.firstNonNull());

  assertNull(ObjectUtils.firstNonNull(null,null));

  assertNull(ObjectUtils.firstNonNull((Object)null));

  assertNull(ObjectUtils.firstNonNull((Object[])null));

}

Location: ObjectUtilsTest.java

Content: 

@Test public void testGetClass(){

  final String[] newArray=ArrayUtils.EMPTY_STRING_ARRAY;

  final Class<String[]> cls=ObjectUtils.getClass(newArray);

  assertEquals(String[].class,cls);

  assertNull(ObjectUtils.getClass(null));

}

Location: ObjectUtilsTest.java

Content: 

@Test public void testGetFirstNonNull(){

  assertEquals("",ObjectUtils.getFirstNonNull(() -> null,() -> ""));

  assertEquals("1",ObjectUtils.getFirstNonNull(() -> null,() -> "1",() -> "2",() -> null));

  assertEquals("123",ObjectUtils.getFirstNonNull(() -> "123",() -> null,() -> "456"));

  assertEquals("123",ObjectUtils.getFirstNonNull(() -> null,() -> "123",() -> fail("Supplier after first non-null value should not be evaluated")));

  assertNull(ObjectUtils.getFirstNonNull(null,() -> null));

  assertNull(ObjectUtils.getFirstNonNull());

  assertNull(ObjectUtils.getFirstNonNull((Supplier<Object>)null));

  assertNull(ObjectUtils.getFirstNonNull((Supplier<Object>[])null));

  assertEquals(1,ObjectUtils.getFirstNonNull(() -> null,() -> 1));

  assertEquals(Boolean.TRUE,ObjectUtils.getFirstNonNull(() -> null,() -> Boolean.TRUE));

}

Location: ObjectUtilsTest.java

Content: 

@Test public void testHashCodeHex(){

  final Integer i=Integer.valueOf(90);

  assertEquals(Integer.toHexString(Objects.hashCode(i)),ObjectUtils.hashCodeHex(i));

  final Integer zero=Integer.valueOf(0);

  assertEquals(Integer.toHexString(Objects.hashCode(zero)),ObjectUtils.hashCodeHex(zero));

  assertEquals(Integer.toHexString(Objects.hashCode(null)),ObjectUtils.hashCodeHex(null));

}

Location: ObjectUtilsTest.java

Content: 

@Test public void testHashCodeMulti_multiple_emptyArray(){

  final Object[] array={};

  assertEquals(1,ObjectUtils.hashCodeMulti(array));

}

Location: ObjectUtilsTest.java

Content: 

@Test public void testHashCodeMulti_multiple_likeList(){

  final List<Object> list0=new ArrayList<>(Collections.emptyList());

  assertEquals(list0.hashCode(),ObjectUtils.hashCodeMulti());

  final List<Object> list1=new ArrayList<>(Collections.singletonList("a"));

  assertEquals(list1.hashCode(),ObjectUtils.hashCodeMulti("a"));

  final List<Object> list2=new ArrayList<>(Arrays.asList("a","b"));

  assertEquals(list2.hashCode(),ObjectUtils.hashCodeMulti("a","b"));

  final List<Object> list3=new ArrayList<>(Arrays.asList("a","b","c"));

  assertEquals(list3.hashCode(),ObjectUtils.hashCodeMulti("a","b","c"));

}

Location: ObjectUtilsTest.java

Content: 

@Test public void testHashCodeMulti_multiple_nullArray(){

  final Object[] array=null;

  assertEquals(1,ObjectUtils.hashCodeMulti(array));

}

Location: ObjectUtilsTest.java

Content: 

@Test public void testIdentityHashCodeHex(){

  final Integer i=Integer.valueOf(90);

  assertEquals(Integer.toHexString(System.identityHashCode(i)),ObjectUtils.identityHashCodeHex(i));

  final Integer zero=Integer.valueOf(0);

  assertEquals(Integer.toHexString(System.identityHashCode(zero)),ObjectUtils.identityHashCodeHex(zero));

  assertEquals(Integer.toHexString(System.identityHashCode(null)),ObjectUtils.identityHashCodeHex(null));

}

Location: ObjectUtilsTest.java

Content: 

@Test public void testIdentityToStringAppendable() throws IOException {

  final Integer i=Integer.valueOf(121);

  final String expected="java.lang.Integer@" + Integer.toHexString(System.identityHashCode(i));

  final Appendable appendable=new StringBuilder();

  ObjectUtils.identityToString(appendable,i);

  assertEquals(expected,appendable.toString());

  assertThrows(NullPointerException.class,() -> ObjectUtils.identityToString((Appendable)null,"tmp"));

  assertThrows(NullPointerException.class,() -> ObjectUtils.identityToString((Appendable)(new StringBuilder()),null));

}

Location: ObjectUtilsTest.java

Content: 

@Test public void testIdentityToStringInteger(){

  final Integer i=Integer.valueOf(90);

  final String expected="java.lang.Integer@" + Integer.toHexString(System.identityHashCode(i));

  assertEquals(expected,ObjectUtils.identityToString(i));

}

Location: ObjectUtilsTest.java

Content: 

@Test public void testIdentityToStringObjectNull(){

  assertNull(ObjectUtils.identityToString(null));

}

Location: ObjectUtilsTest.java

Content: 

@Test public void testIdentityToStringStrBuilder(){

  final Integer i=Integer.valueOf(102);

  final String expected="java.lang.Integer@" + Integer.toHexString(System.identityHashCode(i));

  final StrBuilder builder=new StrBuilder();

  ObjectUtils.identityToString(builder,i);

  assertEquals(expected,builder.toString());

  assertThrows(NullPointerException.class,() -> ObjectUtils.identityToString((StrBuilder)null,"tmp"));

  assertThrows(NullPointerException.class,() -> ObjectUtils.identityToString(new StrBuilder(),null));

}

Location: ObjectUtilsTest.java

Content: 

@Test public void testIdentityToStringString(){

  assertEquals("java.lang.String@" + Integer.toHexString(System.identityHashCode(FOO)),ObjectUtils.identityToString(FOO));

}

Location: ObjectUtilsTest.java

Content: 

@Test public void testIdentityToStringStringBuffer(){

  final Integer i=Integer.valueOf(45);

  final String expected="java.lang.Integer@" + Integer.toHexString(System.identityHashCode(i));

  final StringBuffer buffer=new StringBuffer();

  ObjectUtils.identityToString(buffer,i);

  assertEquals(expected,buffer.toString());

  assertThrows(NullPointerException.class,() -> ObjectUtils.identityToString((StringBuffer)null,"tmp"));

  assertThrows(NullPointerException.class,() -> ObjectUtils.identityToString(new StringBuffer(),null));

}

Location: ObjectUtilsTest.java

Content: 

@Test public void testIdentityToStringStringBuilder(){

  final Integer i=Integer.valueOf(90);

  final String expected="java.lang.Integer@" + Integer.toHexString(System.identityHashCode(i));

  final StringBuilder builder=new StringBuilder();

  ObjectUtils.identityToString(builder,i);

  assertEquals(expected,builder.toString());

}

Location: ObjectUtilsTest.java

Content: 

@Test public void testIdentityToStringStringBuilderInUse(){

  final Integer i=Integer.valueOf(90);

  final String expected="ABC = java.lang.Integer@" + Integer.toHexString(System.identityHashCode(i));

  final StringBuilder builder=new StringBuilder("ABC = ");

  ObjectUtils.identityToString(builder,i);

  assertEquals(expected,builder.toString());

}

Location: ObjectUtilsTest.java

Content: 

@Test public void testIdentityToStringStringBuilderNullStringBuilder(){

  assertThrows(NullPointerException.class,() -> ObjectUtils.identityToString((StringBuilder)null,"tmp"));

}

Location: ObjectUtilsTest.java

Content: 

@Test public void testIdentityToStringStringBuilderNullValue(){

  assertThrows(NullPointerException.class,() -> ObjectUtils.identityToString(new StringBuilder(),null));

}

Location: ObjectUtilsTest.java

Content: 

@Test public void testIsNotEmpty(){

  assertFalse(ObjectUtils.isNotEmpty(null));

  assertFalse(ObjectUtils.isNotEmpty(""));

  assertFalse(ObjectUtils.isNotEmpty(new int[]{}));

  assertFalse(ObjectUtils.isNotEmpty(Collections.emptyList()));

  assertFalse(ObjectUtils.isNotEmpty(Collections.emptySet()));

  assertFalse(ObjectUtils.isNotEmpty(Collections.emptyMap()));

  assertTrue(ObjectUtils.isNotEmpty("  "));

  assertTrue(ObjectUtils.isNotEmpty("ab"));

  assertTrue(ObjectUtils.isNotEmpty(NON_EMPTY_ARRAY));

  assertTrue(ObjectUtils.isNotEmpty(NON_EMPTY_LIST));

  assertTrue(ObjectUtils.isNotEmpty(NON_EMPTY_SET));

  assertTrue(ObjectUtils.isNotEmpty(NON_EMPTY_MAP));

}

Location: ObjectUtilsTest.java

Content: 

@Test public void testMax(){

  final Calendar calendar=Calendar.getInstance();

  final Date nonNullComparable1=calendar.getTime();

  final Date nonNullComparable2=calendar.getTime();

  final String[] nullArray=null;

  calendar.set(Calendar.YEAR,calendar.get(Calendar.YEAR) - 1);

  final Date minComparable=calendar.getTime();

  assertNotSame(nonNullComparable1,nonNullComparable2);

  assertNull(ObjectUtils.max((String)null));

  assertNull(ObjectUtils.max(nullArray));

  assertSame(nonNullComparable1,ObjectUtils.max(null,nonNullComparable1));

  assertSame(nonNullComparable1,ObjectUtils.max(nonNullComparable1,null));

  assertSame(nonNullComparable1,ObjectUtils.max(null,nonNullComparable1,null));

  assertSame(nonNullComparable1,ObjectUtils.max(nonNullComparable1,nonNullComparable2));

  assertSame(nonNullComparable2,ObjectUtils.max(nonNullComparable2,nonNullComparable1));

  assertSame(nonNullComparable1,ObjectUtils.max(nonNullComparable1,minComparable));

  assertSame(nonNullComparable1,ObjectUtils.max(minComparable,nonNullComparable1));

  assertSame(nonNullComparable1,ObjectUtils.max(null,minComparable,null,nonNullComparable1));

  assertNull(ObjectUtils.max(null,null));

}

Location: ObjectUtilsTest.java

Content: 

@Test public void testMedian(){

  assertEquals("foo",ObjectUtils.median("foo"));

  assertEquals("bar",ObjectUtils.median("foo","bar"));

  assertEquals("baz",ObjectUtils.median("foo","bar","baz"));

  assertEquals("baz",ObjectUtils.median("foo","bar","baz","blah"));

  assertEquals("blah",ObjectUtils.median("foo","bar","baz","blah","wah"));

  assertEquals(Integer.valueOf(5),ObjectUtils.median(Integer.valueOf(1),Integer.valueOf(5),Integer.valueOf(10)));

  assertEquals(Integer.valueOf(7),ObjectUtils.median(Integer.valueOf(5),Integer.valueOf(6),Integer.valueOf(7),Integer.valueOf(8),Integer.valueOf(9)));

  assertEquals(Integer.valueOf(6),ObjectUtils.median(Integer.valueOf(5),Integer.valueOf(6),Integer.valueOf(7),Integer.valueOf(8)));

}

Location: ObjectUtilsTest.java

Content: 

@Test public void testMedian_emptyItems(){

  assertThrows(IllegalArgumentException.class,ObjectUtils::<String>median);

}

Location: ObjectUtilsTest.java

Content: 

@Test public void testMedian_nullItems(){

  assertThrows(NullPointerException.class,() -> ObjectUtils.median((String[])null));

}

Location: ObjectUtilsTest.java

Content: 

@Test public void testMin(){

  final Calendar calendar=Calendar.getInstance();

  final Date nonNullComparable1=calendar.getTime();

  final Date nonNullComparable2=calendar.getTime();

  final String[] nullArray=null;

  calendar.set(Calendar.YEAR,calendar.get(Calendar.YEAR) - 1);

  final Date minComparable=calendar.getTime();

  assertNotSame(nonNullComparable1,nonNullComparable2);

  assertNull(ObjectUtils.min((String)null));

  assertNull(ObjectUtils.min(nullArray));

  assertSame(nonNullComparable1,ObjectUtils.min(null,nonNullComparable1));

  assertSame(nonNullComparable1,ObjectUtils.min(nonNullComparable1,null));

  assertSame(nonNullComparable1,ObjectUtils.min(null,nonNullComparable1,null));

  assertSame(nonNullComparable1,ObjectUtils.min(nonNullComparable1,nonNullComparable2));

  assertSame(nonNullComparable2,ObjectUtils.min(nonNullComparable2,nonNullComparable1));

  assertSame(minComparable,ObjectUtils.min(nonNullComparable1,minComparable));

  assertSame(minComparable,ObjectUtils.min(minComparable,nonNullComparable1));

  assertSame(minComparable,ObjectUtils.min(null,nonNullComparable1,null,minComparable));

  assertNull(ObjectUtils.min(null,null));

}

Location: ObjectUtilsTest.java

Content: 

@Test public void testMode(){

  assertNull(ObjectUtils.mode((Object[])null));

  assertNull(ObjectUtils.mode());

  assertNull(ObjectUtils.mode("foo","bar","baz"));

  assertNull(ObjectUtils.mode("foo","bar","baz","foo","bar"));

  assertEquals("foo",ObjectUtils.mode("foo","bar","baz","foo"));

  assertEquals(Integer.valueOf(9),ObjectUtils.mode("foo","bar","baz",Integer.valueOf(9),Integer.valueOf(10),Integer.valueOf(9)));

}

Location: ObjectUtilsTest.java

Content: 

@Test public void testNotEqual(){

  assertFalse(ObjectUtils.notEqual(null,null),"ObjectUtils.notEqual(null, null) returned false");

  assertTrue(ObjectUtils.notEqual(FOO,null),"ObjectUtils.notEqual(\"foo\", null) returned true");

  assertTrue(ObjectUtils.notEqual(null,BAR),"ObjectUtils.notEqual(null, \"bar\") returned true");

  assertTrue(ObjectUtils.notEqual(FOO,BAR),"ObjectUtils.notEqual(\"foo\", \"bar\") returned true");

  assertFalse(ObjectUtils.notEqual(FOO,FOO),"ObjectUtils.notEqual(\"foo\", \"foo\") returned false");

}

Location: ObjectUtilsTest.java

Content: 

/** 

 * Tests  {@link ObjectUtils#cloneIfPossible(Object)} with a cloneable object.

 */

@Test public void testPossibleCloneOfCloneable(){

  final CloneableString string=new CloneableString("apache");

  final CloneableString stringClone=ObjectUtils.cloneIfPossible(string);

  assertEquals("apache",stringClone.getValue());

}

Location: ObjectUtilsTest.java

Content: 

/** 

 * Tests  {@link ObjectUtils#cloneIfPossible(Object)} with a not cloneable object.

 */

@Test public void testPossibleCloneOfNotCloneable(){

  final String string="apache";

  assertSame(string,ObjectUtils.cloneIfPossible(string));

}

Location: ObjectUtilsTest.java

Content: 

/** 

 * Tests  {@link ObjectUtils#cloneIfPossible(Object)} with an uncloneable object.

 */

@Test public void testPossibleCloneOfUncloneable(){

  final UncloneableString string=new UncloneableString("apache");

  final CloneFailedException e=assertThrows(CloneFailedException.class,() -> ObjectUtils.cloneIfPossible(string));

  assertEquals(NoSuchMethodException.class,e.getCause().getClass());

}

Location: ObjectUtilsTest.java

Content: 

@Test public void testRequireNonEmpty(){

  assertEquals("foo",ObjectUtils.requireNonEmpty("foo"));

  assertEquals("foo",ObjectUtils.requireNonEmpty("foo","foo"));

  assertThrows(NullPointerException.class,() -> ObjectUtils.requireNonEmpty(null));

  assertThrows(NullPointerException.class,() -> ObjectUtils.requireNonEmpty(null,"foo"));

  assertThrows(IllegalArgumentException.class,() -> ObjectUtils.requireNonEmpty(""));

  assertThrows(IllegalArgumentException.class,() -> ObjectUtils.requireNonEmpty("","foo"));

}

Location: ObjectUtilsTest.java

Content: 

@Test public void testToString_Object(){

  assertEquals("",ObjectUtils.toString(null));

  assertEquals(Boolean.TRUE.toString(),ObjectUtils.toString(Boolean.TRUE));

}

Location: ObjectUtilsTest.java

Content: 

@Test public void testToString_ObjectString(){

  assertEquals(BAR,ObjectUtils.toString(null,BAR));

  assertEquals(Boolean.TRUE.toString(),ObjectUtils.toString(Boolean.TRUE,BAR));

}

Location: ObjectUtilsTest.java

Content: 

@Test public void testToString_SupplierString(){

  assertNull(ObjectUtils.toString(null,(Supplier<String>)null));

  assertNull(ObjectUtils.toString(null,() -> null));

  assertEquals(BAR,ObjectUtils.toString(null,() -> BAR));

  assertEquals(Boolean.TRUE.toString(),ObjectUtils.toString(Boolean.TRUE,() -> BAR));

}

Location: ObjectUtilsTest.java

Content: 

@Test public void testWaitDuration(){

  assertThrows(IllegalMonitorStateException.class,() -> ObjectUtils.wait(new Object(),Duration.ZERO));

}

