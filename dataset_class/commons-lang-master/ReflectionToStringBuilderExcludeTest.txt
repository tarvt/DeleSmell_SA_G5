Location: ReflectionToStringBuilderExcludeTest.java

Content: 

@Test public void test_toStringExcludeArray(){

  final String toString=ReflectionToStringBuilder.toStringExclude(new TestFixture(),SECRET_FIELD);

  this.validateSecretFieldAbsent(toString);

}

Location: ReflectionToStringBuilderExcludeTest.java

Content: 

@Test public void test_toStringExcludeArrayWithNull(){

  final String toString=ReflectionToStringBuilder.toStringExclude(new TestFixture(),new String[]{null});

  this.validateSecretFieldPresent(toString);

}

Location: ReflectionToStringBuilderExcludeTest.java

Content: 

@Test public void test_toStringExcludeArrayWithNulls(){

  final String toString=ReflectionToStringBuilder.toStringExclude(new TestFixture(),null,null);

  this.validateSecretFieldPresent(toString);

}

Location: ReflectionToStringBuilderExcludeTest.java

Content: 

@Test public void test_toStringExcludeCollection(){

  final List<String> excludeList=new ArrayList<>();

  excludeList.add(SECRET_FIELD);

  final String toString=ReflectionToStringBuilder.toStringExclude(new TestFixture(),excludeList);

  this.validateSecretFieldAbsent(toString);

}

Location: ReflectionToStringBuilderExcludeTest.java

Content: 

@Test public void test_toStringExcludeCollectionWithNull(){

  final List<String> excludeList=new ArrayList<>();

  excludeList.add(null);

  final String toString=ReflectionToStringBuilder.toStringExclude(new TestFixture(),excludeList);

  this.validateSecretFieldPresent(toString);

}

Location: ReflectionToStringBuilderExcludeTest.java

Content: 

@Test public void test_toStringExcludeCollectionWithNulls(){

  final List<String> excludeList=new ArrayList<>();

  excludeList.add(null);

  excludeList.add(null);

  final String toString=ReflectionToStringBuilder.toStringExclude(new TestFixture(),excludeList);

  this.validateSecretFieldPresent(toString);

}

Location: ReflectionToStringBuilderExcludeTest.java

Content: 

@Test public void test_toStringExcludeEmptyArray(){

  final String toString=ReflectionToStringBuilder.toStringExclude(new TestFixture(),ArrayUtils.EMPTY_STRING_ARRAY);

  this.validateSecretFieldPresent(toString);

}

Location: ReflectionToStringBuilderExcludeTest.java

Content: 

@Test public void test_toStringExcludeEmptyCollection(){

  final String toString=ReflectionToStringBuilder.toStringExclude(new TestFixture(),new ArrayList<>());

  this.validateSecretFieldPresent(toString);

}

Location: ReflectionToStringBuilderExcludeTest.java

Content: 

@Test public void test_toStringExcludeNullArray(){

  final String toString=ReflectionToStringBuilder.toStringExclude(new TestFixture(),(String[])null);

  this.validateSecretFieldPresent(toString);

}

Location: ReflectionToStringBuilderExcludeTest.java

Content: 

@Test public void test_toStringExcludeNullCollection(){

  final String toString=ReflectionToStringBuilder.toStringExclude(new TestFixture(),(Collection<String>)null);

  this.validateSecretFieldPresent(toString);

}

Location: ReflectionToStringBuilderExcludeTest.java

Content: 

private void validateNonSecretField(final String toString){

  assertTrue(toString.contains(NOT_SECRET_FIELD));

  assertTrue(toString.contains(NOT_SECRET_VALUE));

}

Location: ReflectionToStringBuilderExcludeTest.java

Content: 

private void validateSecretFieldAbsent(final String toString){

  assertEquals(ArrayUtils.INDEX_NOT_FOUND,toString.indexOf(SECRET_VALUE));

  this.validateNonSecretField(toString);

}

Location: ReflectionToStringBuilderExcludeTest.java

Content: 

private void validateSecretFieldPresent(final String toString){

  assertTrue(toString.indexOf(SECRET_VALUE) > 0);

  this.validateNonSecretField(toString);

}

