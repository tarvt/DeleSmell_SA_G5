Location: EnumUtilsTest.java

Content: 

private void assertArrayEquals(final long[] actual,final long... expected){

  Assertions.assertArrayEquals(expected,actual);

}

Location: EnumUtilsTest.java

Content: 

@Test public void testConstructable(){

  new EnumUtils();

}

Location: EnumUtilsTest.java

Content: 

@Test public void test_generateBitVector(){

  assertEquals(0L,EnumUtils.generateBitVector(Traffic.class,EnumSet.noneOf(Traffic.class)));

  assertEquals(1L,EnumUtils.generateBitVector(Traffic.class,EnumSet.of(Traffic.RED)));

  assertEquals(2L,EnumUtils.generateBitVector(Traffic.class,EnumSet.of(Traffic.AMBER)));

  assertEquals(4L,EnumUtils.generateBitVector(Traffic.class,EnumSet.of(Traffic.GREEN)));

  assertEquals(3L,EnumUtils.generateBitVector(Traffic.class,EnumSet.of(Traffic.RED,Traffic.AMBER)));

  assertEquals(5L,EnumUtils.generateBitVector(Traffic.class,EnumSet.of(Traffic.RED,Traffic.GREEN)));

  assertEquals(6L,EnumUtils.generateBitVector(Traffic.class,EnumSet.of(Traffic.AMBER,Traffic.GREEN)));

  assertEquals(7L,EnumUtils.generateBitVector(Traffic.class,EnumSet.of(Traffic.RED,Traffic.AMBER,Traffic.GREEN)));

  assertEquals((1L << 31),EnumUtils.generateBitVector(Enum64.class,EnumSet.of(Enum64.A31)));

  assertEquals((1L << 32),EnumUtils.generateBitVector(Enum64.class,EnumSet.of(Enum64.A32)));

  assertEquals((1L << 63),EnumUtils.generateBitVector(Enum64.class,EnumSet.of(Enum64.A63)));

  assertEquals(Long.MIN_VALUE,EnumUtils.generateBitVector(Enum64.class,EnumSet.of(Enum64.A63)));

}

Location: EnumUtilsTest.java

Content: 

@Test public void test_generateBitVectorFromArray(){

  assertEquals(0L,EnumUtils.generateBitVector(Traffic.class));

  assertEquals(1L,EnumUtils.generateBitVector(Traffic.class,Traffic.RED));

  assertEquals(2L,EnumUtils.generateBitVector(Traffic.class,Traffic.AMBER));

  assertEquals(4L,EnumUtils.generateBitVector(Traffic.class,Traffic.GREEN));

  assertEquals(3L,EnumUtils.generateBitVector(Traffic.class,Traffic.RED,Traffic.AMBER));

  assertEquals(5L,EnumUtils.generateBitVector(Traffic.class,Traffic.RED,Traffic.GREEN));

  assertEquals(6L,EnumUtils.generateBitVector(Traffic.class,Traffic.AMBER,Traffic.GREEN));

  assertEquals(7L,EnumUtils.generateBitVector(Traffic.class,Traffic.RED,Traffic.AMBER,Traffic.GREEN));

  assertEquals(7L,EnumUtils.generateBitVector(Traffic.class,Traffic.RED,Traffic.AMBER,Traffic.GREEN,Traffic.GREEN));

  assertEquals((1L << 31),EnumUtils.generateBitVector(Enum64.class,Enum64.A31));

  assertEquals((1L << 32),EnumUtils.generateBitVector(Enum64.class,Enum64.A32));

  assertEquals((1L << 63),EnumUtils.generateBitVector(Enum64.class,Enum64.A63));

  assertEquals(Long.MIN_VALUE,EnumUtils.generateBitVector(Enum64.class,Enum64.A63));

}

Location: EnumUtilsTest.java

Content: 

@Test public void test_generateBitVectors(){

  assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class,EnumSet.noneOf(Traffic.class)),0L);

  assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class,EnumSet.of(Traffic.RED)),1L);

  assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class,EnumSet.of(Traffic.AMBER)),2L);

  assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class,EnumSet.of(Traffic.GREEN)),4L);

  assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class,EnumSet.of(Traffic.RED,Traffic.AMBER)),3L);

  assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class,EnumSet.of(Traffic.RED,Traffic.GREEN)),5L);

  assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class,EnumSet.of(Traffic.AMBER,Traffic.GREEN)),6L);

  assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class,EnumSet.of(Traffic.RED,Traffic.AMBER,Traffic.GREEN)),7L);

  assertArrayEquals(EnumUtils.generateBitVectors(Enum64.class,EnumSet.of(Enum64.A31)),(1L << 31));

  assertArrayEquals(EnumUtils.generateBitVectors(Enum64.class,EnumSet.of(Enum64.A32)),(1L << 32));

  assertArrayEquals(EnumUtils.generateBitVectors(Enum64.class,EnumSet.of(Enum64.A63)),(1L << 63));

  assertArrayEquals(EnumUtils.generateBitVectors(Enum64.class,EnumSet.of(Enum64.A63)),Long.MIN_VALUE);

  assertArrayEquals(EnumUtils.generateBitVectors(TooMany.class,EnumSet.of(TooMany.M2)),1L,0L);

  assertArrayEquals(EnumUtils.generateBitVectors(TooMany.class,EnumSet.of(TooMany.L2,TooMany.M2)),1L,(1L << 63));

}

Location: EnumUtilsTest.java

Content: 

@Test public void test_generateBitVectorsFromArray(){

  assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class),0L);

  assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class,Traffic.RED),1L);

  assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class,Traffic.AMBER),2L);

  assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class,Traffic.GREEN),4L);

  assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class,Traffic.RED,Traffic.AMBER),3L);

  assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class,Traffic.RED,Traffic.GREEN),5L);

  assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class,Traffic.AMBER,Traffic.GREEN),6L);

  assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class,Traffic.RED,Traffic.AMBER,Traffic.GREEN),7L);

  assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class,Traffic.RED,Traffic.AMBER,Traffic.GREEN,Traffic.GREEN),7L);

  assertArrayEquals(EnumUtils.generateBitVectors(Enum64.class,Enum64.A31),(1L << 31));

  assertArrayEquals(EnumUtils.generateBitVectors(Enum64.class,Enum64.A32),(1L << 32));

  assertArrayEquals(EnumUtils.generateBitVectors(Enum64.class,Enum64.A63),(1L << 63));

  assertArrayEquals(EnumUtils.generateBitVectors(Enum64.class,Enum64.A63),Long.MIN_VALUE);

  assertArrayEquals(EnumUtils.generateBitVectors(TooMany.class,TooMany.M2),1L,0L);

  assertArrayEquals(EnumUtils.generateBitVectors(TooMany.class,TooMany.L2,TooMany.M2),1L,(1L << 63));

}

Location: EnumUtilsTest.java

Content: 

@SuppressWarnings("unchecked") @Test public void test_generateBitVectors_nonEnumClass(){

  @SuppressWarnings("rawtypes") final Class rawType=Object.class;

  @SuppressWarnings("rawtypes") final List rawList=new ArrayList();

  assertThrows(IllegalArgumentException.class,() -> EnumUtils.generateBitVectors(rawType,rawList));

}

Location: EnumUtilsTest.java

Content: 

@SuppressWarnings("unchecked") @Test public void test_generateBitVectors_nonEnumClassWithArray(){

  @SuppressWarnings("rawtypes") final Class rawType=Object.class;

  assertThrows(IllegalArgumentException.class,() -> EnumUtils.generateBitVectors(rawType));

}

Location: EnumUtilsTest.java

Content: 

@Test public void test_generateBitVectors_nullArray(){

  assertThrows(NullPointerException.class,() -> EnumUtils.generateBitVectors(Traffic.class,(Traffic[])null));

}

Location: EnumUtilsTest.java

Content: 

@Test public void test_generateBitVectors_nullArrayElement(){

  assertThrows(IllegalArgumentException.class,() -> EnumUtils.generateBitVectors(Traffic.class,Traffic.RED,null));

}

Location: EnumUtilsTest.java

Content: 

@Test public void test_generateBitVectors_nullClass(){

  assertThrows(NullPointerException.class,() -> EnumUtils.generateBitVectors(null,EnumSet.of(Traffic.RED)));

}

Location: EnumUtilsTest.java

Content: 

@Test public void test_generateBitVectors_nullClassWithArray(){

  assertThrows(NullPointerException.class,() -> EnumUtils.generateBitVectors(null,Traffic.RED));

}

Location: EnumUtilsTest.java

Content: 

@Test public void test_generateBitVectors_nullElement(){

  assertThrows(NullPointerException.class,() -> EnumUtils.generateBitVectors(Traffic.class,Arrays.asList(Traffic.RED,null)));

}

Location: EnumUtilsTest.java

Content: 

@Test public void test_generateBitVectors_nullIterable(){

  assertThrows(NullPointerException.class,() -> EnumUtils.generateBitVectors(null,(Iterable<Traffic>)null));

}

Location: EnumUtilsTest.java

Content: 

@Test public void test_generateBitVector_longClass(){

  assertThrows(IllegalArgumentException.class,() -> EnumUtils.generateBitVector(TooMany.class,EnumSet.of(TooMany.A1)));

}

Location: EnumUtilsTest.java

Content: 

@Test public void test_generateBitVector_longClassWithArray(){

  assertThrows(IllegalArgumentException.class,() -> EnumUtils.generateBitVector(TooMany.class,TooMany.A1));

}

Location: EnumUtilsTest.java

Content: 

@SuppressWarnings("unchecked") @Test public void test_generateBitVector_nonEnumClass(){

  @SuppressWarnings("rawtypes") final Class rawType=Object.class;

  @SuppressWarnings("rawtypes") final List rawList=new ArrayList();

  assertThrows(IllegalArgumentException.class,() -> EnumUtils.generateBitVector(rawType,rawList));

}

Location: EnumUtilsTest.java

Content: 

@SuppressWarnings("unchecked") @Test public void test_generateBitVector_nonEnumClassWithArray(){

  @SuppressWarnings("rawtypes") final Class rawType=Object.class;

  assertThrows(IllegalArgumentException.class,() -> EnumUtils.generateBitVector(rawType));

}

Location: EnumUtilsTest.java

Content: 

@Test public void test_generateBitVector_nullArray(){

  assertThrows(NullPointerException.class,() -> EnumUtils.generateBitVector(Traffic.class,(Traffic[])null));

}

Location: EnumUtilsTest.java

Content: 

@Test public void test_generateBitVector_nullArrayElement(){

  assertThrows(IllegalArgumentException.class,() -> EnumUtils.generateBitVector(Traffic.class,Traffic.RED,null));

}

Location: EnumUtilsTest.java

Content: 

@Test public void test_generateBitVector_nullClass(){

  assertThrows(NullPointerException.class,() -> EnumUtils.generateBitVector(null,EnumSet.of(Traffic.RED)));

}

Location: EnumUtilsTest.java

Content: 

@Test public void test_generateBitVector_nullClassWithArray(){

  assertThrows(NullPointerException.class,() -> EnumUtils.generateBitVector(null,Traffic.RED));

}

Location: EnumUtilsTest.java

Content: 

@Test public void test_generateBitVector_nullElement(){

  assertThrows(NullPointerException.class,() -> EnumUtils.generateBitVector(Traffic.class,Arrays.asList(Traffic.RED,null)));

}

Location: EnumUtilsTest.java

Content: 

@Test public void test_generateBitVector_nullIterable(){

  assertThrows(NullPointerException.class,() -> EnumUtils.generateBitVector(Traffic.class,(Iterable<Traffic>)null));

}

Location: EnumUtilsTest.java

Content: 

@Test public void test_getEnum(){

  assertEquals(Traffic.RED,EnumUtils.getEnum(Traffic.class,"RED"));

  assertEquals(Traffic.AMBER,EnumUtils.getEnum(Traffic.class,"AMBER"));

  assertEquals(Traffic.GREEN,EnumUtils.getEnum(Traffic.class,"GREEN"));

  assertNull(EnumUtils.getEnum(Traffic.class,"PURPLE"));

  assertNull(EnumUtils.getEnum(Traffic.class,null));

}

Location: EnumUtilsTest.java

Content: 

@Test public void test_getEnumIgnoreCase(){

  assertEquals(Traffic.RED,EnumUtils.getEnumIgnoreCase(Traffic.class,"red"));

  assertEquals(Traffic.AMBER,EnumUtils.getEnumIgnoreCase(Traffic.class,"Amber"));

  assertEquals(Traffic.GREEN,EnumUtils.getEnumIgnoreCase(Traffic.class,"grEEn"));

  assertNull(EnumUtils.getEnumIgnoreCase(Traffic.class,"purple"));

  assertNull(EnumUtils.getEnumIgnoreCase(Traffic.class,null));

}

Location: EnumUtilsTest.java

Content: 

@Test public void test_getEnumIgnoreCase_defaultEnum(){

  assertEquals(Traffic.RED,EnumUtils.getEnumIgnoreCase(Traffic.class,"red",Traffic.AMBER));

  assertEquals(Traffic.AMBER,EnumUtils.getEnumIgnoreCase(Traffic.class,"Amber",Traffic.GREEN));

  assertEquals(Traffic.GREEN,EnumUtils.getEnumIgnoreCase(Traffic.class,"grEEn",Traffic.RED));

  assertEquals(Traffic.AMBER,EnumUtils.getEnumIgnoreCase(Traffic.class,"PURPLE",Traffic.AMBER));

  assertEquals(Traffic.GREEN,EnumUtils.getEnumIgnoreCase(Traffic.class,"purple",Traffic.GREEN));

  assertEquals(Traffic.RED,EnumUtils.getEnumIgnoreCase(Traffic.class,"pUrPlE",Traffic.RED));

  assertEquals(Traffic.AMBER,EnumUtils.getEnumIgnoreCase(Traffic.class,null,Traffic.AMBER));

  assertEquals(Traffic.GREEN,EnumUtils.getEnumIgnoreCase(Traffic.class,null,Traffic.GREEN));

  assertEquals(Traffic.RED,EnumUtils.getEnumIgnoreCase(Traffic.class,null,Traffic.RED));

  assertNull(EnumUtils.getEnumIgnoreCase(Traffic.class,"PURPLE",null));

}

Location: EnumUtilsTest.java

Content: 

@Test public void test_getEnumIgnoreCase_nonEnumClass(){

  final Class rawType=Object.class;

  assertNull(EnumUtils.getEnumIgnoreCase(rawType,"rawType"));

}

Location: EnumUtilsTest.java

Content: 

@Test public void test_getEnumIgnoreCase_nullClass(){

  assertThrows(NullPointerException.class,() -> EnumUtils.getEnumIgnoreCase((Class<Traffic>)null,"PURPLE"));

}

Location: EnumUtilsTest.java

Content: 

@Test public void test_getEnumList(){

  final List<Traffic> test=EnumUtils.getEnumList(Traffic.class);

  assertEquals(3,test.size());

  assertEquals(Traffic.RED,test.get(0));

  assertEquals(Traffic.AMBER,test.get(1));

  assertEquals(Traffic.GREEN,test.get(2));

}

Location: EnumUtilsTest.java

Content: 

@Test public void test_getEnumMap(){

  final Map<String,Traffic> test=EnumUtils.getEnumMap(Traffic.class);

  assertEquals("{RED=RED, AMBER=AMBER, GREEN=GREEN}",test.toString(),"getEnumMap not created correctly");

  assertEquals(3,test.size());

  assertTrue(test.containsKey("RED"));

  assertEquals(Traffic.RED,test.get("RED"));

  assertTrue(test.containsKey("AMBER"));

  assertEquals(Traffic.AMBER,test.get("AMBER"));

  assertTrue(test.containsKey("GREEN"));

  assertEquals(Traffic.GREEN,test.get("GREEN"));

  assertFalse(test.containsKey("PURPLE"));

}

Location: EnumUtilsTest.java

Content: 

@Test public void test_getEnumSystemProperty(){

  final String key=getClass().getName();

  System.setProperty(key,Traffic.RED.toString());

  try {

    assertEquals(Traffic.RED,EnumUtils.getEnumSystemProperty(Traffic.class,key,null));

    assertEquals(Traffic.RED,EnumUtils.getEnumSystemProperty(Traffic.class,"?",Traffic.RED));

    assertEquals(Traffic.RED,EnumUtils.getEnumSystemProperty(null,null,Traffic.RED));

    assertEquals(Traffic.RED,EnumUtils.getEnumSystemProperty(null,"?",Traffic.RED));

    assertEquals(Traffic.RED,EnumUtils.getEnumSystemProperty(Traffic.class,null,Traffic.RED));

  }

  finally {

    System.getProperties().remove(key);

  }

}

Location: EnumUtilsTest.java

Content: 

@Test public void test_getEnum_defaultEnum(){

  assertEquals(Traffic.RED,EnumUtils.getEnum(Traffic.class,"RED",Traffic.AMBER));

  assertEquals(Traffic.AMBER,EnumUtils.getEnum(Traffic.class,"AMBER",Traffic.GREEN));

  assertEquals(Traffic.GREEN,EnumUtils.getEnum(Traffic.class,"GREEN",Traffic.RED));

  assertEquals(Traffic.AMBER,EnumUtils.getEnum(Traffic.class,"PURPLE",Traffic.AMBER));

  assertEquals(Traffic.GREEN,EnumUtils.getEnum(Traffic.class,"PURPLE",Traffic.GREEN));

  assertEquals(Traffic.RED,EnumUtils.getEnum(Traffic.class,"PURPLE",Traffic.RED));

  assertEquals(Traffic.AMBER,EnumUtils.getEnum(Traffic.class,null,Traffic.AMBER));

  assertEquals(Traffic.GREEN,EnumUtils.getEnum(Traffic.class,null,Traffic.GREEN));

  assertEquals(Traffic.RED,EnumUtils.getEnum(Traffic.class,null,Traffic.RED));

  assertNull(EnumUtils.getEnum(Traffic.class,"PURPLE",null));

}

Location: EnumUtilsTest.java

Content: 

@Test public void test_getEnum_nonEnumClass(){

  final Class rawType=Object.class;

  assertNull(EnumUtils.getEnum(rawType,"rawType"));

}

Location: EnumUtilsTest.java

Content: 

@Test public void test_getEnum_nullClass(){

  assertThrows(NullPointerException.class,() -> EnumUtils.getEnum((Class<Traffic>)null,"PURPLE"));

}

Location: EnumUtilsTest.java

Content: 

@Test public void test_getFirstEnumIgnoreCase_defaultEnum(){

  final Function<Traffic2,String> f=Traffic2::getLabel;

  assertEquals(Traffic2.RED,EnumUtils.getFirstEnumIgnoreCase(Traffic2.class,"***red***",f,Traffic2.AMBER));

  assertEquals(Traffic2.AMBER,EnumUtils.getFirstEnumIgnoreCase(Traffic2.class,"**Amber**",f,Traffic2.GREEN));

  assertEquals(Traffic2.GREEN,EnumUtils.getFirstEnumIgnoreCase(Traffic2.class,"*grEEn*",f,Traffic2.RED));

  assertEquals(Traffic2.AMBER,EnumUtils.getFirstEnumIgnoreCase(Traffic2.class,"PURPLE",f,Traffic2.AMBER));

  assertEquals(Traffic2.GREEN,EnumUtils.getFirstEnumIgnoreCase(Traffic2.class,"purple",f,Traffic2.GREEN));

  assertEquals(Traffic2.RED,EnumUtils.getFirstEnumIgnoreCase(Traffic2.class,"pUrPlE",f,Traffic2.RED));

  assertEquals(Traffic2.AMBER,EnumUtils.getFirstEnumIgnoreCase(Traffic2.class,null,f,Traffic2.AMBER));

  assertEquals(Traffic2.GREEN,EnumUtils.getFirstEnumIgnoreCase(Traffic2.class,null,f,Traffic2.GREEN));

  assertEquals(Traffic2.RED,EnumUtils.getFirstEnumIgnoreCase(Traffic2.class,null,f,Traffic2.RED));

  assertNull(EnumUtils.getFirstEnumIgnoreCase(Traffic2.class,"PURPLE",f,null));

}

Location: EnumUtilsTest.java

Content: 

@Test public void test_isValidEnum(){

  assertTrue(EnumUtils.isValidEnum(Traffic.class,"RED"));

  assertTrue(EnumUtils.isValidEnum(Traffic.class,"AMBER"));

  assertTrue(EnumUtils.isValidEnum(Traffic.class,"GREEN"));

  assertFalse(EnumUtils.isValidEnum(Traffic.class,"PURPLE"));

  assertFalse(EnumUtils.isValidEnum(Traffic.class,null));

}

Location: EnumUtilsTest.java

Content: 

@Test public void test_isValidEnumIgnoreCase(){

  assertTrue(EnumUtils.isValidEnumIgnoreCase(Traffic.class,"red"));

  assertTrue(EnumUtils.isValidEnumIgnoreCase(Traffic.class,"Amber"));

  assertTrue(EnumUtils.isValidEnumIgnoreCase(Traffic.class,"grEEn"));

  assertFalse(EnumUtils.isValidEnumIgnoreCase(Traffic.class,"purple"));

  assertFalse(EnumUtils.isValidEnumIgnoreCase(Traffic.class,null));

}

Location: EnumUtilsTest.java

Content: 

@Test public void test_isValidEnumIgnoreCase_nullClass(){

  assertThrows(NullPointerException.class,() -> EnumUtils.isValidEnumIgnoreCase(null,"PURPLE"));

}

Location: EnumUtilsTest.java

Content: 

@Test public void test_isValidEnum_nullClass(){

  assertThrows(NullPointerException.class,() -> EnumUtils.isValidEnum(null,"PURPLE"));

}

Location: EnumUtilsTest.java

Content: 

@Test public void test_processBitVector(){

  assertEquals(EnumSet.noneOf(Traffic.class),EnumUtils.processBitVector(Traffic.class,0L));

  assertEquals(EnumSet.of(Traffic.RED),EnumUtils.processBitVector(Traffic.class,1L));

  assertEquals(EnumSet.of(Traffic.AMBER),EnumUtils.processBitVector(Traffic.class,2L));

  assertEquals(EnumSet.of(Traffic.RED,Traffic.AMBER),EnumUtils.processBitVector(Traffic.class,3L));

  assertEquals(EnumSet.of(Traffic.GREEN),EnumUtils.processBitVector(Traffic.class,4L));

  assertEquals(EnumSet.of(Traffic.RED,Traffic.GREEN),EnumUtils.processBitVector(Traffic.class,5L));

  assertEquals(EnumSet.of(Traffic.AMBER,Traffic.GREEN),EnumUtils.processBitVector(Traffic.class,6L));

  assertEquals(EnumSet.of(Traffic.RED,Traffic.AMBER,Traffic.GREEN),EnumUtils.processBitVector(Traffic.class,7L));

  assertEquals(EnumSet.of(Enum64.A31),EnumUtils.processBitVector(Enum64.class,(1L << 31)));

  assertEquals(EnumSet.of(Enum64.A32),EnumUtils.processBitVector(Enum64.class,(1L << 32)));

  assertEquals(EnumSet.of(Enum64.A63),EnumUtils.processBitVector(Enum64.class,(1L << 63)));

  assertEquals(EnumSet.of(Enum64.A63),EnumUtils.processBitVector(Enum64.class,Long.MIN_VALUE));

}

Location: EnumUtilsTest.java

Content: 

@Test public void test_processBitVectors(){

  assertEquals(EnumSet.noneOf(Traffic.class),EnumUtils.processBitVectors(Traffic.class,0L));

  assertEquals(EnumSet.of(Traffic.RED),EnumUtils.processBitVectors(Traffic.class,1L));

  assertEquals(EnumSet.of(Traffic.AMBER),EnumUtils.processBitVectors(Traffic.class,2L));

  assertEquals(EnumSet.of(Traffic.RED,Traffic.AMBER),EnumUtils.processBitVectors(Traffic.class,3L));

  assertEquals(EnumSet.of(Traffic.GREEN),EnumUtils.processBitVectors(Traffic.class,4L));

  assertEquals(EnumSet.of(Traffic.RED,Traffic.GREEN),EnumUtils.processBitVectors(Traffic.class,5L));

  assertEquals(EnumSet.of(Traffic.AMBER,Traffic.GREEN),EnumUtils.processBitVectors(Traffic.class,6L));

  assertEquals(EnumSet.of(Traffic.RED,Traffic.AMBER,Traffic.GREEN),EnumUtils.processBitVectors(Traffic.class,7L));

  assertEquals(EnumSet.noneOf(Traffic.class),EnumUtils.processBitVectors(Traffic.class,0L,0L));

  assertEquals(EnumSet.of(Traffic.RED),EnumUtils.processBitVectors(Traffic.class,0L,1L));

  assertEquals(EnumSet.of(Traffic.AMBER),EnumUtils.processBitVectors(Traffic.class,0L,2L));

  assertEquals(EnumSet.of(Traffic.RED,Traffic.AMBER),EnumUtils.processBitVectors(Traffic.class,0L,3L));

  assertEquals(EnumSet.of(Traffic.GREEN),EnumUtils.processBitVectors(Traffic.class,0L,4L));

  assertEquals(EnumSet.of(Traffic.RED,Traffic.GREEN),EnumUtils.processBitVectors(Traffic.class,0L,5L));

  assertEquals(EnumSet.of(Traffic.AMBER,Traffic.GREEN),EnumUtils.processBitVectors(Traffic.class,0L,6L));

  assertEquals(EnumSet.of(Traffic.RED,Traffic.AMBER,Traffic.GREEN),EnumUtils.processBitVectors(Traffic.class,0L,7L));

  assertEquals(EnumSet.noneOf(Traffic.class),EnumUtils.processBitVectors(Traffic.class,666L,0L));

  assertEquals(EnumSet.of(Traffic.RED),EnumUtils.processBitVectors(Traffic.class,666L,1L));

  assertEquals(EnumSet.of(Traffic.AMBER),EnumUtils.processBitVectors(Traffic.class,666L,2L));

  assertEquals(EnumSet.of(Traffic.RED,Traffic.AMBER),EnumUtils.processBitVectors(Traffic.class,666L,3L));

  assertEquals(EnumSet.of(Traffic.GREEN),EnumUtils.processBitVectors(Traffic.class,666L,4L));

  assertEquals(EnumSet.of(Traffic.RED,Traffic.GREEN),EnumUtils.processBitVectors(Traffic.class,666L,5L));

  assertEquals(EnumSet.of(Traffic.AMBER,Traffic.GREEN),EnumUtils.processBitVectors(Traffic.class,666L,6L));

  assertEquals(EnumSet.of(Traffic.RED,Traffic.AMBER,Traffic.GREEN),EnumUtils.processBitVectors(Traffic.class,666L,7L));

  assertEquals(EnumSet.of(Enum64.A31),EnumUtils.processBitVectors(Enum64.class,(1L << 31)));

  assertEquals(EnumSet.of(Enum64.A32),EnumUtils.processBitVectors(Enum64.class,(1L << 32)));

  assertEquals(EnumSet.of(Enum64.A63),EnumUtils.processBitVectors(Enum64.class,(1L << 63)));

  assertEquals(EnumSet.of(Enum64.A63),EnumUtils.processBitVectors(Enum64.class,Long.MIN_VALUE));

}

Location: EnumUtilsTest.java

Content: 

@Test public void test_processBitVectors_longClass(){

  assertEquals(EnumSet.noneOf(TooMany.class),EnumUtils.processBitVectors(TooMany.class,0L));

  assertEquals(EnumSet.of(TooMany.A),EnumUtils.processBitVectors(TooMany.class,1L));

  assertEquals(EnumSet.of(TooMany.B),EnumUtils.processBitVectors(TooMany.class,2L));

  assertEquals(EnumSet.of(TooMany.A,TooMany.B),EnumUtils.processBitVectors(TooMany.class,3L));

  assertEquals(EnumSet.of(TooMany.C),EnumUtils.processBitVectors(TooMany.class,4L));

  assertEquals(EnumSet.of(TooMany.A,TooMany.C),EnumUtils.processBitVectors(TooMany.class,5L));

  assertEquals(EnumSet.of(TooMany.B,TooMany.C),EnumUtils.processBitVectors(TooMany.class,6L));

  assertEquals(EnumSet.of(TooMany.A,TooMany.B,TooMany.C),EnumUtils.processBitVectors(TooMany.class,7L));

  assertEquals(EnumSet.noneOf(TooMany.class),EnumUtils.processBitVectors(TooMany.class,0L,0L));

  assertEquals(EnumSet.of(TooMany.A),EnumUtils.processBitVectors(TooMany.class,0L,1L));

  assertEquals(EnumSet.of(TooMany.B),EnumUtils.processBitVectors(TooMany.class,0L,2L));

  assertEquals(EnumSet.of(TooMany.A,TooMany.B),EnumUtils.processBitVectors(TooMany.class,0L,3L));

  assertEquals(EnumSet.of(TooMany.C),EnumUtils.processBitVectors(TooMany.class,0L,4L));

  assertEquals(EnumSet.of(TooMany.A,TooMany.C),EnumUtils.processBitVectors(TooMany.class,0L,5L));

  assertEquals(EnumSet.of(TooMany.B,TooMany.C),EnumUtils.processBitVectors(TooMany.class,0L,6L));

  assertEquals(EnumSet.of(TooMany.A,TooMany.B,TooMany.C),EnumUtils.processBitVectors(TooMany.class,0L,7L));

  assertEquals(EnumSet.of(TooMany.A,TooMany.B,TooMany.C),EnumUtils.processBitVectors(TooMany.class,0L,7L));

  assertEquals(EnumSet.of(TooMany.M2),EnumUtils.processBitVectors(TooMany.class,1L,0L));

  assertEquals(EnumSet.of(TooMany.A,TooMany.M2),EnumUtils.processBitVectors(TooMany.class,1L,1L));

  assertEquals(EnumSet.of(TooMany.B,TooMany.M2),EnumUtils.processBitVectors(TooMany.class,1L,2L));

  assertEquals(EnumSet.of(TooMany.A,TooMany.B,TooMany.M2),EnumUtils.processBitVectors(TooMany.class,1L,3L));

  assertEquals(EnumSet.of(TooMany.C,TooMany.M2),EnumUtils.processBitVectors(TooMany.class,1L,4L));

  assertEquals(EnumSet.of(TooMany.A,TooMany.C,TooMany.M2),EnumUtils.processBitVectors(TooMany.class,1L,5L));

  assertEquals(EnumSet.of(TooMany.B,TooMany.C,TooMany.M2),EnumUtils.processBitVectors(TooMany.class,1L,6L));

  assertEquals(EnumSet.of(TooMany.A,TooMany.B,TooMany.C,TooMany.M2),EnumUtils.processBitVectors(TooMany.class,1L,7L));

  assertEquals(EnumSet.of(TooMany.A,TooMany.B,TooMany.C,TooMany.M2),EnumUtils.processBitVectors(TooMany.class,1L,7L));

  assertEquals(EnumSet.of(TooMany.M2),EnumUtils.processBitVectors(TooMany.class,9L,0L));

  assertEquals(EnumSet.of(TooMany.A,TooMany.M2),EnumUtils.processBitVectors(TooMany.class,9L,1L));

  assertEquals(EnumSet.of(TooMany.B,TooMany.M2),EnumUtils.processBitVectors(TooMany.class,9L,2L));

  assertEquals(EnumSet.of(TooMany.A,TooMany.B,TooMany.M2),EnumUtils.processBitVectors(TooMany.class,9L,3L));

  assertEquals(EnumSet.of(TooMany.C,TooMany.M2),EnumUtils.processBitVectors(TooMany.class,9L,4L));

  assertEquals(EnumSet.of(TooMany.A,TooMany.C,TooMany.M2),EnumUtils.processBitVectors(TooMany.class,9L,5L));

  assertEquals(EnumSet.of(TooMany.B,TooMany.C,TooMany.M2),EnumUtils.processBitVectors(TooMany.class,9L,6L));

  assertEquals(EnumSet.of(TooMany.A,TooMany.B,TooMany.C,TooMany.M2),EnumUtils.processBitVectors(TooMany.class,9L,7L));

  assertEquals(EnumSet.of(TooMany.A,TooMany.B,TooMany.C,TooMany.M2),EnumUtils.processBitVectors(TooMany.class,9L,7L));

}

Location: EnumUtilsTest.java

Content: 

@Test public void test_processBitVectors_nullClass(){

  final Class<Traffic> empty=null;

  assertThrows(NullPointerException.class,() -> EnumUtils.processBitVectors(empty,0L));

}

Location: EnumUtilsTest.java

Content: 

@Test public void test_processBitVector_longClass(){

  assertThrows(IllegalArgumentException.class,() -> EnumUtils.processBitVector(TooMany.class,0L));

}

Location: EnumUtilsTest.java

Content: 

@Test public void test_processBitVector_nullClass(){

  final Class<Traffic> empty=null;

  assertThrows(NullPointerException.class,() -> EnumUtils.processBitVector(empty,0L));

}

