Location: SystemUtils.java

Content: 

/** 

 * <p> Gets an environment variable, defaulting to  {@code defaultValue} if the variable cannot be read.</p> <p> If a  {@code SecurityException} is caught, the return value is {@code defaultValue} and a message is written to{@code System.err}. </p>

 * @param name the environment variable name

 * @param defaultValue the default value

 * @return the environment variable value or {@code defaultValue} if a security problem occurs

 * @since 3.8

 */

public static String getEnvironmentVariable(final String name,final String defaultValue){

  try {

    final String value=System.getenv(name);

    return value == null ? defaultValue : value;

  }

 catch (  final SecurityException ex) {

    return defaultValue;

  }

}

Location: SystemUtils.java

Content: 

/** 

 * Gets the host name from an environment variable (COMPUTERNAME on Windows, HOSTNAME elsewhere). <p> If you want to know what the network stack says is the host name, you should use  {@code InetAddress.getLocalHost().getHostName()}. </p>

 * @return the host name. Will be {@code null} if the environment variable is not defined.

 * @since 3.6

 */

public static String getHostName(){

  return IS_OS_WINDOWS ? System.getenv("COMPUTERNAME") : System.getenv("HOSTNAME");

}

Location: SystemUtils.java

Content: 

/** 

 * <p> Gets the Java home directory as a  {@code File}. </p>

 * @return a directory

 * @throws SecurityException if a security manager exists and its {@code checkPropertyAccess} method doesn't allowaccess to the specified system property.

 * @see System#getProperty(String)

 * @since 2.1

 */

public static File getJavaHome(){

  return new File(System.getProperty(JAVA_HOME_KEY));

}

Location: SystemUtils.java

Content: 

/** 

 * <p> Gets the Java IO temporary directory as a  {@code File}. </p>

 * @return a directory

 * @throws SecurityException if a security manager exists and its {@code checkPropertyAccess} method doesn't allowaccess to the specified system property.

 * @see System#getProperty(String)

 * @since 2.1

 */

public static File getJavaIoTmpDir(){

  return new File(System.getProperty(JAVA_IO_TMPDIR_KEY));

}

Location: SystemUtils.java

Content: 

/** 

 * <p> Decides if the Java version matches. </p>

 * @param versionPrefix the prefix for the java version

 * @return true if matches, or false if not or can't determine

 */

private static boolean getJavaVersionMatches(final String versionPrefix){

  return isJavaVersionMatch(JAVA_SPECIFICATION_VERSION,versionPrefix);

}

Location: SystemUtils.java

Content: 

/** 

 * Decides if the operating system matches.

 * @param osNamePrefix the prefix for the OS name

 * @return true if matches, or false if not or can't determine

 */

private static boolean getOsMatchesName(final String osNamePrefix){

  return isOSNameMatch(OS_NAME,osNamePrefix);

}

Location: SystemUtils.java

Content: 

/** 

 * Decides if the operating system matches.

 * @param osNamePrefix the prefix for the OS name

 * @param osVersionPrefix the prefix for the version

 * @return true if matches, or false if not or can't determine

 */

private static boolean getOsMatches(final String osNamePrefix,final String osVersionPrefix){

  return isOSMatch(OS_NAME,OS_VERSION,osNamePrefix,osVersionPrefix);

}

Location: SystemUtils.java

Content: 

/** 

 * <p> Gets a System property, defaulting to  {@code null} if the property cannot be read.</p> <p> If a  {@code SecurityException} is caught, the return value is {@code null} and a message is written to{@code System.err}. </p>

 * @param property the system property name

 * @return the system property value or {@code null} if a security problem occurs

 */

private static String getSystemProperty(final String property){

  try {

    return System.getProperty(property);

  }

 catch (  final SecurityException ex) {

    return null;

  }

}

Location: SystemUtils.java

Content: 

/** 

 * <p> Gets the user directory as a  {@code File}. </p>

 * @return a directory

 * @throws SecurityException if a security manager exists and its {@code checkPropertyAccess} method doesn't allowaccess to the specified system property.

 * @see System#getProperty(String)

 * @since 2.1

 */

public static File getUserDir(){

  return new File(System.getProperty(USER_DIR_KEY));

}

Location: SystemUtils.java

Content: 

/** 

 * <p> Gets the user home directory as a  {@code File}. </p>

 * @return a directory

 * @throws SecurityException if a security manager exists and its {@code checkPropertyAccess} method doesn't allowaccess to the specified system property.

 * @see System#getProperty(String)

 * @since 2.1

 */

public static File getUserHome(){

  return new File(System.getProperty(USER_HOME_KEY));

}

Location: SystemUtils.java

Content: 

/** 

 * <p> Gets the user name. </p>

 * @return a name

 * @throws SecurityException if a security manager exists and its {@code checkPropertyAccess} method doesn't allowaccess to the specified system property.

 * @see System#getProperty(String)

 * @since 3.10

 */

public static String getUserName(){

  return System.getProperty(USER_NAME_KEY);

}

Location: SystemUtils.java

Content: 

/** 

 * <p> Gets the user name. </p>

 * @param defaultValue A default value.

 * @return a name

 * @throws SecurityException if a security manager exists and its {@code checkPropertyAccess} method doesn't allowaccess to the specified system property.

 * @see System#getProperty(String)

 * @since 3.10

 */

public static String getUserName(final String defaultValue){

  return System.getProperty(USER_NAME_KEY,defaultValue);

}

Location: SystemUtils.java

Content: 

/** 

 * Returns whether the  {@link #JAVA_AWT_HEADLESS} value is {@code true}.

 * @return {@code true} if {@code JAVA_AWT_HEADLESS} is {@code "true"},  {@code false} otherwise.

 * @see #JAVA_AWT_HEADLESS

 * @since 2.1

 * @since Java 1.4

 */

public static boolean isJavaAwtHeadless(){

  return Boolean.TRUE.toString().equals(JAVA_AWT_HEADLESS);

}

Location: SystemUtils.java

Content: 

/** 

 * <p> Is the Java version at least the requested version. </p> <p>

 * @param requiredVersion the required version, for example 1.31f

 * @return {@code true} if the actual version is equal or greater than the required version

 */

public static boolean isJavaVersionAtLeast(final JavaVersion requiredVersion){

  return JAVA_SPECIFICATION_VERSION_AS_ENUM.atLeast(requiredVersion);

}

Location: SystemUtils.java

Content: 

/** 

 * <p> Is the Java version at most the requested version. </p> <p> Example input: </p>

 * @param requiredVersion the required version, for example 1.31f

 * @return {@code true} if the actual version is equal or less than the required version

 * @since 3.9

 */

public static boolean isJavaVersionAtMost(final JavaVersion requiredVersion){

  return JAVA_SPECIFICATION_VERSION_AS_ENUM.atMost(requiredVersion);

}

Location: SystemUtils.java

Content: 

/** 

 * <p> Decides if the Java version matches. </p> <p> This method is package private instead of private to support unit test invocation. </p>

 * @param version the actual Java version

 * @param versionPrefix the prefix for the expected Java version

 * @return true if matches, or false if not or can't determine

 */

static boolean isJavaVersionMatch(final String version,final String versionPrefix){

  if (version == null) {

    return false;

  }

  return version.startsWith(versionPrefix);

}

Location: SystemUtils.java

Content: 

/** 

 * Decides if the operating system matches. <p> This method is package private instead of private to support unit test invocation. </p>

 * @param osName the actual OS name

 * @param osVersion the actual OS version

 * @param osNamePrefix the prefix for the expected OS name

 * @param osVersionPrefix the prefix for the expected OS version

 * @return true if matches, or false if not or can't determine

 */

static boolean isOSMatch(final String osName,final String osVersion,final String osNamePrefix,final String osVersionPrefix){

  if (osName == null || osVersion == null) {

    return false;

  }

  return isOSNameMatch(osName,osNamePrefix) && isOSVersionMatch(osVersion,osVersionPrefix);

}

Location: SystemUtils.java

Content: 

/** 

 * Decides if the operating system matches. <p> This method is package private instead of private to support unit test invocation. </p>

 * @param osName the actual OS name

 * @param osNamePrefix the prefix for the expected OS name

 * @return true if matches, or false if not or can't determine

 */

static boolean isOSNameMatch(final String osName,final String osNamePrefix){

  if (osName == null) {

    return false;

  }

  return osName.startsWith(osNamePrefix);

}

Location: SystemUtils.java

Content: 

/** 

 * Decides if the operating system version matches. <p> This method is package private instead of private to support unit test invocation. </p>

 * @param osVersion the actual OS version

 * @param osVersionPrefix the prefix for the expected OS version

 * @return true if matches, or false if not or can't determine

 */

static boolean isOSVersionMatch(final String osVersion,final String osVersionPrefix){

  if (StringUtils.isEmpty(osVersion)) {

    return false;

  }

  final String[] versionPrefixParts=osVersionPrefix.split("\\.");

  final String[] versionParts=osVersion.split("\\.");

  for (int i=0; i < Math.min(versionPrefixParts.length,versionParts.length); i++) {

    if (!versionPrefixParts[i].equals(versionParts[i])) {

      return false;

    }

  }

  return true;

}

Location: SystemUtils.java

Content: 

/** 

 * <p> SystemUtils instances should NOT be constructed in standard programming. Instead, the class should be used as {@code SystemUtils.FILE_SEPARATOR}. </p> <p> This constructor is public to permit tools that require a JavaBean instance to operate. </p>

 */

public SystemUtils(){

}

