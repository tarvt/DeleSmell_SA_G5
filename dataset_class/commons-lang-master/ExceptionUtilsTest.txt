Location: ExceptionUtilsTest.java

Content: 

private Throwable createExceptionWithCause(){

  try {

    try {

      throw new ExceptionWithCause(createExceptionWithoutCause());

    }

 catch (    final Throwable t) {

      throw new ExceptionWithCause(t);

    }

  }

 catch (  final Throwable t) {

    return t;

  }

}

Location: ExceptionUtilsTest.java

Content: 

private Throwable createExceptionWithoutCause(){

  try {

    throw new ExceptionWithoutCause();

  }

 catch (  final Throwable t) {

    return t;

  }

}

Location: ExceptionUtilsTest.java

Content: 

private static int redeclareCheckedException(){

  return throwsCheckedException();

}

Location: ExceptionUtilsTest.java

Content: 

@Test public void testCatchTechniques(){

  IOException ioe=assertThrows(IOException.class,ExceptionUtilsTest::throwsCheckedException);

  assertEquals(1,ExceptionUtils.getThrowableCount(ioe));

  ioe=assertThrows(IOException.class,ExceptionUtilsTest::redeclareCheckedException);

  assertEquals(1,ExceptionUtils.getThrowableCount(ioe));

}

Location: ExceptionUtilsTest.java

Content: 

@SuppressWarnings("deprecation") @Test public void testGetCause_Throwable(){

  assertSame(null,ExceptionUtils.getCause(null));

  assertSame(null,ExceptionUtils.getCause(withoutCause));

  assertSame(withoutCause,ExceptionUtils.getCause(nested));

  assertSame(nested,ExceptionUtils.getCause(withCause));

  assertSame(null,ExceptionUtils.getCause(jdkNoCause));

  assertSame(cyclicCause.getCause(),ExceptionUtils.getCause(cyclicCause));

  assertSame(cyclicCause.getCause().getCause(),ExceptionUtils.getCause(cyclicCause.getCause()));

  assertSame(cyclicCause.getCause(),ExceptionUtils.getCause(cyclicCause.getCause().getCause()));

  assertSame(withoutCause,ExceptionUtils.getCause(notVisibleException));

}

Location: ExceptionUtilsTest.java

Content: 

@SuppressWarnings("deprecation") @Test public void testGetCause_ThrowableArray(){

  assertSame(null,ExceptionUtils.getCause(null,null));

  assertSame(null,ExceptionUtils.getCause(null,new String[0]));

  assertSame(nested,ExceptionUtils.getCause(withCause,null));

  assertSame(null,ExceptionUtils.getCause(withCause,new String[0]));

  assertSame(null,ExceptionUtils.getCause(withCause,new String[]{null}));

  assertSame(nested,ExceptionUtils.getCause(withCause,new String[]{"getCause"}));

  assertSame(null,ExceptionUtils.getCause(withoutCause,null));

  assertSame(null,ExceptionUtils.getCause(withoutCause,new String[0]));

  assertSame(null,ExceptionUtils.getCause(withoutCause,new String[]{null}));

  assertSame(null,ExceptionUtils.getCause(withoutCause,new String[]{"getCause"}));

  assertSame(null,ExceptionUtils.getCause(withoutCause,new String[]{"getTargetException"}));

}

Location: ExceptionUtilsTest.java

Content: 

@Test public void testGetRootCauseStackTrace_Throwable(){

  assertEquals(0,ExceptionUtils.getRootCauseStackTrace(null).length);

  final Throwable cause=createExceptionWithCause();

  String[] stackTrace=ExceptionUtils.getRootCauseStackTrace(cause);

  boolean match=false;

  for (  final String element : stackTrace) {

    if (element.startsWith(ExceptionUtils.WRAPPED_MARKER)) {

      match=true;

      break;

    }

  }

  assertTrue(match);

  stackTrace=ExceptionUtils.getRootCauseStackTrace(withoutCause);

  match=false;

  for (  final String element : stackTrace) {

    if (element.startsWith(ExceptionUtils.WRAPPED_MARKER)) {

      match=true;

      break;

    }

  }

  assertFalse(match);

}

Location: ExceptionUtilsTest.java

Content: 

@Test public void testGetRootCause_Throwable(){

  assertSame(null,ExceptionUtils.getRootCause(null));

  assertSame(withoutCause,ExceptionUtils.getRootCause(withoutCause));

  assertSame(withoutCause,ExceptionUtils.getRootCause(nested));

  assertSame(withoutCause,ExceptionUtils.getRootCause(withCause));

  assertSame(jdkNoCause,ExceptionUtils.getRootCause(jdkNoCause));

  assertSame(cyclicCause.getCause().getCause(),ExceptionUtils.getRootCause(cyclicCause));

}

Location: ExceptionUtilsTest.java

Content: 

@Test @DisplayName("getStackFrames returns empty string array when the argument is null") public void testgetStackFramesHappyPath(){

  final String[] actual=ExceptionUtils.getStackFrames(new Throwable(){

    @Override public void printStackTrace(    final PrintWriter s){

      s.write("org.apache.commons.lang3.exception.ExceptionUtilsTest$1\n" + "\tat org.apache.commons.lang3.exception.ExceptionUtilsTest.testgetStackFramesGappyPath(ExceptionUtilsTest.java:706)\n" + "\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n"+ "\tat com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:230)\n"+ "\tat com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:58)\n");

    }

  }

);

  assertArrayEquals(new String[]{"org.apache.commons.lang3.exception.ExceptionUtilsTest$1","\tat org.apache.commons.lang3.exception.ExceptionUtilsTest.testgetStackFramesGappyPath(ExceptionUtilsTest.java:706)","\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)","\tat com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:230)","\tat com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:58)"},actual);

}

Location: ExceptionUtilsTest.java

Content: 

@Test @DisplayName("getStackFrames returns the string array of the stack frames when there is a real exception") public void testgetStackFramesNullArg(){

  final String[] actual=ExceptionUtils.getStackFrames((Throwable)null);

  assertEquals(0,actual.length);

}

Location: ExceptionUtilsTest.java

Content: 

@Test public void testGetThrowableCount_Throwable(){

  assertEquals(0,ExceptionUtils.getThrowableCount(null));

  assertEquals(1,ExceptionUtils.getThrowableCount(withoutCause));

  assertEquals(2,ExceptionUtils.getThrowableCount(nested));

  assertEquals(3,ExceptionUtils.getThrowableCount(withCause));

  assertEquals(1,ExceptionUtils.getThrowableCount(jdkNoCause));

  assertEquals(3,ExceptionUtils.getThrowableCount(cyclicCause));

}

Location: ExceptionUtilsTest.java

Content: 

@Test public void testGetThrowableList_Throwable_jdkNoCause(){

  final List<?> throwables=ExceptionUtils.getThrowableList(jdkNoCause);

  assertEquals(1,throwables.size());

  assertSame(jdkNoCause,throwables.get(0));

}

Location: ExceptionUtilsTest.java

Content: 

@Test public void testGetThrowableList_Throwable_nested(){

  final List<?> throwables=ExceptionUtils.getThrowableList(nested);

  assertEquals(2,throwables.size());

  assertSame(nested,throwables.get(0));

  assertSame(withoutCause,throwables.get(1));

}

Location: ExceptionUtilsTest.java

Content: 

@Test public void testGetThrowableList_Throwable_null(){

  final List<?> throwables=ExceptionUtils.getThrowableList(null);

  assertEquals(0,throwables.size());

}

Location: ExceptionUtilsTest.java

Content: 

@Test public void testGetThrowableList_Throwable_recursiveCause(){

  final List<?> throwables=ExceptionUtils.getThrowableList(cyclicCause);

  assertEquals(3,throwables.size());

  assertSame(cyclicCause,throwables.get(0));

  assertSame(cyclicCause.getCause(),throwables.get(1));

  assertSame(cyclicCause.getCause().getCause(),throwables.get(2));

}

Location: ExceptionUtilsTest.java

Content: 

@Test public void testGetThrowableList_Throwable_withCause(){

  final List<?> throwables=ExceptionUtils.getThrowableList(withCause);

  assertEquals(3,throwables.size());

  assertSame(withCause,throwables.get(0));

  assertSame(nested,throwables.get(1));

  assertSame(withoutCause,throwables.get(2));

}

Location: ExceptionUtilsTest.java

Content: 

@Test public void testGetThrowableList_Throwable_withoutCause(){

  final List<?> throwables=ExceptionUtils.getThrowableList(withoutCause);

  assertEquals(1,throwables.size());

  assertSame(withoutCause,throwables.get(0));

}

Location: ExceptionUtilsTest.java

Content: 

@Test public void testGetThrowables_Throwable_jdkNoCause(){

  final Throwable[] throwables=ExceptionUtils.getThrowables(jdkNoCause);

  assertEquals(1,throwables.length);

  assertSame(jdkNoCause,throwables[0]);

}

Location: ExceptionUtilsTest.java

Content: 

@Test public void testGetThrowables_Throwable_nested(){

  final Throwable[] throwables=ExceptionUtils.getThrowables(nested);

  assertEquals(2,throwables.length);

  assertSame(nested,throwables[0]);

  assertSame(withoutCause,throwables[1]);

}

Location: ExceptionUtilsTest.java

Content: 

@Test public void testGetThrowables_Throwable_null(){

  assertEquals(0,ExceptionUtils.getThrowables(null).length);

}

Location: ExceptionUtilsTest.java

Content: 

@Test public void testGetThrowables_Throwable_recursiveCause(){

  final Throwable[] throwables=ExceptionUtils.getThrowables(cyclicCause);

  assertEquals(3,throwables.length);

  assertSame(cyclicCause,throwables[0]);

  assertSame(cyclicCause.getCause(),throwables[1]);

  assertSame(cyclicCause.getCause().getCause(),throwables[2]);

}

Location: ExceptionUtilsTest.java

Content: 

@Test public void testGetThrowables_Throwable_withCause(){

  final Throwable[] throwables=ExceptionUtils.getThrowables(withCause);

  assertEquals(3,throwables.length);

  assertSame(withCause,throwables[0]);

  assertSame(nested,throwables[1]);

  assertSame(withoutCause,throwables[2]);

}

Location: ExceptionUtilsTest.java

Content: 

@Test public void testGetThrowables_Throwable_withoutCause(){

  final Throwable[] throwables=ExceptionUtils.getThrowables(withoutCause);

  assertEquals(1,throwables.length);

  assertSame(withoutCause,throwables[0]);

}

Location: ExceptionUtilsTest.java

Content: 

@Test public void testIndexOfType_ThrowableClass(){

  assertEquals(-1,ExceptionUtils.indexOfType(null,null));

  assertEquals(-1,ExceptionUtils.indexOfType(null,NestableException.class));

  assertEquals(-1,ExceptionUtils.indexOfType(withoutCause,null));

  assertEquals(-1,ExceptionUtils.indexOfType(withoutCause,ExceptionWithCause.class));

  assertEquals(-1,ExceptionUtils.indexOfType(withoutCause,NestableException.class));

  assertEquals(0,ExceptionUtils.indexOfType(withoutCause,ExceptionWithoutCause.class));

  assertEquals(-1,ExceptionUtils.indexOfType(nested,null));

  assertEquals(-1,ExceptionUtils.indexOfType(nested,ExceptionWithCause.class));

  assertEquals(0,ExceptionUtils.indexOfType(nested,NestableException.class));

  assertEquals(1,ExceptionUtils.indexOfType(nested,ExceptionWithoutCause.class));

  assertEquals(-1,ExceptionUtils.indexOfType(withCause,null));

  assertEquals(0,ExceptionUtils.indexOfType(withCause,ExceptionWithCause.class));

  assertEquals(1,ExceptionUtils.indexOfType(withCause,NestableException.class));

  assertEquals(2,ExceptionUtils.indexOfType(withCause,ExceptionWithoutCause.class));

  assertEquals(0,ExceptionUtils.indexOfType(withCause,Exception.class));

  assertEquals(0,ExceptionUtils.indexOfType(withCause,Throwable.class));

}

Location: ExceptionUtilsTest.java

Content: 

@Test public void testIndexOfType_ThrowableClassInt(){

  assertEquals(-1,ExceptionUtils.indexOfType(null,null,0));

  assertEquals(-1,ExceptionUtils.indexOfType(null,NestableException.class,0));

  assertEquals(-1,ExceptionUtils.indexOfType(withoutCause,null));

  assertEquals(-1,ExceptionUtils.indexOfType(withoutCause,ExceptionWithCause.class,0));

  assertEquals(-1,ExceptionUtils.indexOfType(withoutCause,NestableException.class,0));

  assertEquals(0,ExceptionUtils.indexOfType(withoutCause,ExceptionWithoutCause.class,0));

  assertEquals(-1,ExceptionUtils.indexOfType(nested,null,0));

  assertEquals(-1,ExceptionUtils.indexOfType(nested,ExceptionWithCause.class,0));

  assertEquals(0,ExceptionUtils.indexOfType(nested,NestableException.class,0));

  assertEquals(1,ExceptionUtils.indexOfType(nested,ExceptionWithoutCause.class,0));

  assertEquals(-1,ExceptionUtils.indexOfType(withCause,null));

  assertEquals(0,ExceptionUtils.indexOfType(withCause,ExceptionWithCause.class,0));

  assertEquals(1,ExceptionUtils.indexOfType(withCause,NestableException.class,0));

  assertEquals(2,ExceptionUtils.indexOfType(withCause,ExceptionWithoutCause.class,0));

  assertEquals(0,ExceptionUtils.indexOfType(withCause,ExceptionWithCause.class,-1));

  assertEquals(0,ExceptionUtils.indexOfType(withCause,ExceptionWithCause.class,0));

  assertEquals(-1,ExceptionUtils.indexOfType(withCause,ExceptionWithCause.class,1));

  assertEquals(-1,ExceptionUtils.indexOfType(withCause,ExceptionWithCause.class,9));

  assertEquals(0,ExceptionUtils.indexOfType(withCause,Exception.class,0));

  assertEquals(0,ExceptionUtils.indexOfType(withCause,Throwable.class,0));

}

Location: ExceptionUtilsTest.java

Content: 

@Test public void testIndexOf_ThrowableClass(){

  assertEquals(-1,ExceptionUtils.indexOfThrowable(null,null));

  assertEquals(-1,ExceptionUtils.indexOfThrowable(null,NestableException.class));

  assertEquals(-1,ExceptionUtils.indexOfThrowable(withoutCause,null));

  assertEquals(-1,ExceptionUtils.indexOfThrowable(withoutCause,ExceptionWithCause.class));

  assertEquals(-1,ExceptionUtils.indexOfThrowable(withoutCause,NestableException.class));

  assertEquals(0,ExceptionUtils.indexOfThrowable(withoutCause,ExceptionWithoutCause.class));

  assertEquals(-1,ExceptionUtils.indexOfThrowable(nested,null));

  assertEquals(-1,ExceptionUtils.indexOfThrowable(nested,ExceptionWithCause.class));

  assertEquals(0,ExceptionUtils.indexOfThrowable(nested,NestableException.class));

  assertEquals(1,ExceptionUtils.indexOfThrowable(nested,ExceptionWithoutCause.class));

  assertEquals(-1,ExceptionUtils.indexOfThrowable(withCause,null));

  assertEquals(0,ExceptionUtils.indexOfThrowable(withCause,ExceptionWithCause.class));

  assertEquals(1,ExceptionUtils.indexOfThrowable(withCause,NestableException.class));

  assertEquals(2,ExceptionUtils.indexOfThrowable(withCause,ExceptionWithoutCause.class));

  assertEquals(-1,ExceptionUtils.indexOfThrowable(withCause,Exception.class));

  assertEquals(-1,ExceptionUtils.indexOfThrowable(withCause,Throwable.class));

}

Location: ExceptionUtilsTest.java

Content: 

@Test public void testIndexOf_ThrowableClassInt(){

  assertEquals(-1,ExceptionUtils.indexOfThrowable(null,null,0));

  assertEquals(-1,ExceptionUtils.indexOfThrowable(null,NestableException.class,0));

  assertEquals(-1,ExceptionUtils.indexOfThrowable(withoutCause,null));

  assertEquals(-1,ExceptionUtils.indexOfThrowable(withoutCause,ExceptionWithCause.class,0));

  assertEquals(-1,ExceptionUtils.indexOfThrowable(withoutCause,NestableException.class,0));

  assertEquals(0,ExceptionUtils.indexOfThrowable(withoutCause,ExceptionWithoutCause.class,0));

  assertEquals(-1,ExceptionUtils.indexOfThrowable(nested,null,0));

  assertEquals(-1,ExceptionUtils.indexOfThrowable(nested,ExceptionWithCause.class,0));

  assertEquals(0,ExceptionUtils.indexOfThrowable(nested,NestableException.class,0));

  assertEquals(1,ExceptionUtils.indexOfThrowable(nested,ExceptionWithoutCause.class,0));

  assertEquals(-1,ExceptionUtils.indexOfThrowable(withCause,null));

  assertEquals(0,ExceptionUtils.indexOfThrowable(withCause,ExceptionWithCause.class,0));

  assertEquals(1,ExceptionUtils.indexOfThrowable(withCause,NestableException.class,0));

  assertEquals(2,ExceptionUtils.indexOfThrowable(withCause,ExceptionWithoutCause.class,0));

  assertEquals(0,ExceptionUtils.indexOfThrowable(withCause,ExceptionWithCause.class,-1));

  assertEquals(0,ExceptionUtils.indexOfThrowable(withCause,ExceptionWithCause.class,0));

  assertEquals(-1,ExceptionUtils.indexOfThrowable(withCause,ExceptionWithCause.class,1));

  assertEquals(-1,ExceptionUtils.indexOfThrowable(withCause,ExceptionWithCause.class,9));

  assertEquals(-1,ExceptionUtils.indexOfThrowable(withCause,Exception.class,0));

  assertEquals(-1,ExceptionUtils.indexOfThrowable(withCause,Throwable.class,0));

}

Location: ExceptionUtilsTest.java

Content: 

@Test public void testPrintRootCauseStackTrace_Throwable(){

  ExceptionUtils.printRootCauseStackTrace(null);

}

Location: ExceptionUtilsTest.java

Content: 

@Test public void testPrintRootCauseStackTrace_ThrowableStream(){

  ByteArrayOutputStream out=new ByteArrayOutputStream(1024);

  ExceptionUtils.printRootCauseStackTrace(null,(PrintStream)null);

  ExceptionUtils.printRootCauseStackTrace(null,new PrintStream(out));

  assertEquals(0,out.toString().length());

  out=new ByteArrayOutputStream(1024);

  assertThrows(NullPointerException.class,() -> ExceptionUtils.printRootCauseStackTrace(withCause,(PrintStream)null));

  out=new ByteArrayOutputStream(1024);

  final Throwable cause=createExceptionWithCause();

  ExceptionUtils.printRootCauseStackTrace(cause,new PrintStream(out));

  String stackTrace=out.toString();

  assertTrue(stackTrace.contains(ExceptionUtils.WRAPPED_MARKER));

  out=new ByteArrayOutputStream(1024);

  ExceptionUtils.printRootCauseStackTrace(withoutCause,new PrintStream(out));

  stackTrace=out.toString();

  assertFalse(stackTrace.contains(ExceptionUtils.WRAPPED_MARKER));

}

Location: ExceptionUtilsTest.java

Content: 

@Test public void testPrintRootCauseStackTrace_ThrowableWriter(){

  StringWriter writer=new StringWriter(1024);

  ExceptionUtils.printRootCauseStackTrace(null,(PrintWriter)null);

  ExceptionUtils.printRootCauseStackTrace(null,new PrintWriter(writer));

  assertEquals(0,writer.getBuffer().length());

  writer=new StringWriter(1024);

  assertThrows(NullPointerException.class,() -> ExceptionUtils.printRootCauseStackTrace(withCause,(PrintWriter)null));

  writer=new StringWriter(1024);

  final Throwable cause=createExceptionWithCause();

  ExceptionUtils.printRootCauseStackTrace(cause,new PrintWriter(writer));

  String stackTrace=writer.toString();

  assertTrue(stackTrace.contains(ExceptionUtils.WRAPPED_MARKER));

  writer=new StringWriter(1024);

  ExceptionUtils.printRootCauseStackTrace(withoutCause,new PrintWriter(writer));

  stackTrace=writer.toString();

  assertFalse(stackTrace.contains(ExceptionUtils.WRAPPED_MARKER));

}

Location: ExceptionUtilsTest.java

Content: 

@Test public void testRemoveCommonFrames_ListList(){

  assertThrows(IllegalArgumentException.class,() -> ExceptionUtils.removeCommonFrames(null,null));

}

Location: ExceptionUtilsTest.java

Content: 

@Test public void testThrow(){

  final Exception expected=new InterruptedException();

  final Exception actual=assertThrows(Exception.class,() -> ExceptionUtils.rethrow(expected));

  assertSame(expected,actual);

}

Location: ExceptionUtilsTest.java

Content: 

@Test public void testThrowableOfType_ThrowableClass(){

  assertNull(ExceptionUtils.throwableOfType(null,null));

  assertNull(ExceptionUtils.throwableOfType(null,NestableException.class));

  assertNull(ExceptionUtils.throwableOfType(withoutCause,null));

  assertNull(ExceptionUtils.throwableOfType(withoutCause,ExceptionWithCause.class));

  assertNull(ExceptionUtils.throwableOfType(withoutCause,NestableException.class));

  assertEquals(withoutCause,ExceptionUtils.throwableOfType(withoutCause,ExceptionWithoutCause.class));

  assertNull(ExceptionUtils.throwableOfType(nested,null));

  assertNull(ExceptionUtils.throwableOfType(nested,ExceptionWithCause.class));

  assertEquals(nested,ExceptionUtils.throwableOfType(nested,NestableException.class));

  assertEquals(nested.getCause(),ExceptionUtils.throwableOfType(nested,ExceptionWithoutCause.class));

  assertNull(ExceptionUtils.throwableOfType(withCause,null));

  assertEquals(withCause,ExceptionUtils.throwableOfType(withCause,ExceptionWithCause.class));

  assertEquals(withCause.getCause(),ExceptionUtils.throwableOfType(withCause,NestableException.class));

  assertEquals(withCause.getCause().getCause(),ExceptionUtils.throwableOfType(withCause,ExceptionWithoutCause.class));

  assertEquals(withCause,ExceptionUtils.throwableOfType(withCause,Exception.class));

  assertEquals(withCause,ExceptionUtils.throwableOfType(withCause,Throwable.class));

}

Location: ExceptionUtilsTest.java

Content: 

@Test public void testThrowableOfType_ThrowableClassInt(){

  assertNull(ExceptionUtils.throwableOfType(null,null,0));

  assertNull(ExceptionUtils.throwableOfType(null,NestableException.class,0));

  assertNull(ExceptionUtils.throwableOfType(withoutCause,null));

  assertNull(ExceptionUtils.throwableOfType(withoutCause,ExceptionWithCause.class,0));

  assertNull(ExceptionUtils.throwableOfType(withoutCause,NestableException.class,0));

  assertEquals(withoutCause,ExceptionUtils.throwableOfType(withoutCause,ExceptionWithoutCause.class,0));

  assertNull(ExceptionUtils.throwableOfType(nested,null,0));

  assertNull(ExceptionUtils.throwableOfType(nested,ExceptionWithCause.class,0));

  assertEquals(nested,ExceptionUtils.throwableOfType(nested,NestableException.class,0));

  assertEquals(nested.getCause(),ExceptionUtils.throwableOfType(nested,ExceptionWithoutCause.class,0));

  assertNull(ExceptionUtils.throwableOfType(withCause,null));

  assertEquals(withCause,ExceptionUtils.throwableOfType(withCause,ExceptionWithCause.class,0));

  assertEquals(withCause.getCause(),ExceptionUtils.throwableOfType(withCause,NestableException.class,0));

  assertEquals(withCause.getCause().getCause(),ExceptionUtils.throwableOfType(withCause,ExceptionWithoutCause.class,0));

  assertEquals(withCause,ExceptionUtils.throwableOfType(withCause,ExceptionWithCause.class,-1));

  assertEquals(withCause,ExceptionUtils.throwableOfType(withCause,ExceptionWithCause.class,0));

  assertNull(ExceptionUtils.throwableOfType(withCause,ExceptionWithCause.class,1));

  assertNull(ExceptionUtils.throwableOfType(withCause,ExceptionWithCause.class,9));

  assertEquals(withCause,ExceptionUtils.throwableOfType(withCause,Exception.class,0));

  assertEquals(withCause,ExceptionUtils.throwableOfType(withCause,Throwable.class,0));

}

Location: ExceptionUtilsTest.java

Content: 

@Test public void testThrowableOf_ThrowableClass(){

  assertNull(ExceptionUtils.throwableOfThrowable(null,null));

  assertNull(ExceptionUtils.throwableOfThrowable(null,NestableException.class));

  assertNull(ExceptionUtils.throwableOfThrowable(withoutCause,null));

  assertNull(ExceptionUtils.throwableOfThrowable(withoutCause,ExceptionWithCause.class));

  assertNull(ExceptionUtils.throwableOfThrowable(withoutCause,NestableException.class));

  assertEquals(withoutCause,ExceptionUtils.throwableOfThrowable(withoutCause,ExceptionWithoutCause.class));

  assertNull(ExceptionUtils.throwableOfThrowable(nested,null));

  assertNull(ExceptionUtils.throwableOfThrowable(nested,ExceptionWithCause.class));

  assertEquals(nested,ExceptionUtils.throwableOfThrowable(nested,NestableException.class));

  assertEquals(nested.getCause(),ExceptionUtils.throwableOfThrowable(nested,ExceptionWithoutCause.class));

  assertNull(ExceptionUtils.throwableOfThrowable(withCause,null));

  assertEquals(withCause,ExceptionUtils.throwableOfThrowable(withCause,ExceptionWithCause.class));

  assertEquals(withCause.getCause(),ExceptionUtils.throwableOfThrowable(withCause,NestableException.class));

  assertEquals(withCause.getCause().getCause(),ExceptionUtils.throwableOfThrowable(withCause,ExceptionWithoutCause.class));

  assertNull(ExceptionUtils.throwableOfThrowable(withCause,Exception.class));

  assertNull(ExceptionUtils.throwableOfThrowable(withCause,Throwable.class));

}

Location: ExceptionUtilsTest.java

Content: 

@Test public void testThrowableOf_ThrowableClassInt(){

  assertNull(ExceptionUtils.throwableOfThrowable(null,null,0));

  assertNull(ExceptionUtils.throwableOfThrowable(null,NestableException.class,0));

  assertNull(ExceptionUtils.throwableOfThrowable(withoutCause,null));

  assertNull(ExceptionUtils.throwableOfThrowable(withoutCause,ExceptionWithCause.class,0));

  assertNull(ExceptionUtils.throwableOfThrowable(withoutCause,NestableException.class,0));

  assertEquals(withoutCause,ExceptionUtils.throwableOfThrowable(withoutCause,ExceptionWithoutCause.class,0));

  assertNull(ExceptionUtils.throwableOfThrowable(nested,null,0));

  assertNull(ExceptionUtils.throwableOfThrowable(nested,ExceptionWithCause.class,0));

  assertEquals(nested,ExceptionUtils.throwableOfThrowable(nested,NestableException.class,0));

  assertEquals(nested.getCause(),ExceptionUtils.throwableOfThrowable(nested,ExceptionWithoutCause.class,0));

  assertNull(ExceptionUtils.throwableOfThrowable(withCause,null));

  assertEquals(withCause,ExceptionUtils.throwableOfThrowable(withCause,ExceptionWithCause.class,0));

  assertEquals(withCause.getCause(),ExceptionUtils.throwableOfThrowable(withCause,NestableException.class,0));

  assertEquals(withCause.getCause().getCause(),ExceptionUtils.throwableOfThrowable(withCause,ExceptionWithoutCause.class,0));

  assertEquals(withCause,ExceptionUtils.throwableOfThrowable(withCause,ExceptionWithCause.class,-1));

  assertEquals(withCause,ExceptionUtils.throwableOfThrowable(withCause,ExceptionWithCause.class,0));

  assertNull(ExceptionUtils.throwableOfThrowable(withCause,ExceptionWithCause.class,1));

  assertNull(ExceptionUtils.throwableOfThrowable(withCause,ExceptionWithCause.class,9));

  assertNull(ExceptionUtils.throwableOfThrowable(withCause,Exception.class,0));

  assertNull(ExceptionUtils.throwableOfThrowable(withCause,Throwable.class,0));

}

Location: ExceptionUtilsTest.java

Content: 

@Test public void testWrapAndUnwrapCheckedException(){

  final Throwable t=assertThrows(Throwable.class,() -> ExceptionUtils.wrapAndThrow(new IOException()));

  assertTrue(ExceptionUtils.hasCause(t,IOException.class));

}

Location: ExceptionUtilsTest.java

Content: 

@Test public void testWrapAndUnwrapError(){

  final Throwable t=assertThrows(Throwable.class,() -> ExceptionUtils.wrapAndThrow(new OutOfMemoryError()));

  assertTrue(ExceptionUtils.hasCause(t,Error.class));

}

Location: ExceptionUtilsTest.java

Content: 

@Test public void testWrapAndUnwrapRuntimeException(){

  final Throwable t=assertThrows(Throwable.class,() -> ExceptionUtils.wrapAndThrow(new IllegalArgumentException()));

  assertTrue(ExceptionUtils.hasCause(t,RuntimeException.class));

}

Location: ExceptionUtilsTest.java

Content: 

@Test public void testWrapAndUnwrapThrowable(){

  final Throwable t=assertThrows(Throwable.class,() -> ExceptionUtils.wrapAndThrow(new TestThrowable()));

  assertTrue(ExceptionUtils.hasCause(t,TestThrowable.class));

}

Location: ExceptionUtilsTest.java

Content: 

@Test public void test_getMessage_Throwable(){

  Throwable th=null;

  assertEquals("",ExceptionUtils.getMessage(th));

  th=new IllegalArgumentException("Base");

  assertEquals("IllegalArgumentException: Base",ExceptionUtils.getMessage(th));

  th=new ExceptionWithCause("Wrapper",th);

  assertEquals("ExceptionUtilsTest.ExceptionWithCause: Wrapper",ExceptionUtils.getMessage(th));

}

Location: ExceptionUtilsTest.java

Content: 

@Test public void test_getRootCauseMessage_Throwable(){

  Throwable th=null;

  assertEquals("",ExceptionUtils.getRootCauseMessage(th));

  th=new IllegalArgumentException("Base");

  assertEquals("IllegalArgumentException: Base",ExceptionUtils.getRootCauseMessage(th));

  th=new ExceptionWithCause("Wrapper",th);

  assertEquals("IllegalArgumentException: Base",ExceptionUtils.getRootCauseMessage(th));

}

Location: ExceptionUtilsTest.java

Content: 

private static int throwsCheckedException(){

  try {

    throw new IOException();

  }

 catch (  final Exception e) {

    return ExceptionUtils.<Integer>rethrow(e);

  }

}

