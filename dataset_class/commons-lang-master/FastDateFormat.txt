Location: FastDateFormat.java

Content: 

/** 

 * <p>Constructs a new FastDateFormat.</p>

 * @param pattern  {@link java.text.SimpleDateFormat} compatible pattern

 * @param timeZone  non-null time zone to use

 * @param locale  non-null locale to use

 * @throws NullPointerException if pattern, timeZone, or locale is null.

 */

protected FastDateFormat(final String pattern,final TimeZone timeZone,final Locale locale){

  this(pattern,timeZone,locale,null);

}

Location: FastDateFormat.java

Content: 

/** 

 * <p>Constructs a new FastDateFormat.</p>

 * @param pattern  {@link java.text.SimpleDateFormat} compatible pattern

 * @param timeZone  non-null time zone to use

 * @param locale  non-null locale to use

 * @param centuryStart The start of the 100 year period to use as the "default century" for 2 digit year parsing.  If centuryStart is null, defaults to now - 80 years

 * @throws NullPointerException if pattern, timeZone, or locale is null.

 */

protected FastDateFormat(final String pattern,final TimeZone timeZone,final Locale locale,final Date centuryStart){

  printer=new FastDatePrinter(pattern,timeZone,locale);

  parser=new FastDateParser(pattern,timeZone,locale,centuryStart);

}

Location: FastDateFormat.java

Content: 

/** 

 * <p>Gets a date formatter instance using the specified style in the default time zone and locale.</p>

 * @param style  date style: FULL, LONG, MEDIUM, or SHORT

 * @return a localized standard date formatter

 * @throws IllegalArgumentException if the Locale has no datepattern defined

 * @since 2.1

 */

public static FastDateFormat getDateInstance(final int style){

  return cache.getDateInstance(style,null,null);

}

Location: FastDateFormat.java

Content: 

/** 

 * <p>Gets a date formatter instance using the specified style and time zone in the default locale.</p>

 * @param style  date style: FULL, LONG, MEDIUM, or SHORT

 * @param timeZone  optional time zone, overrides time zone offormatted date

 * @return a localized standard date formatter

 * @throws IllegalArgumentException if the Locale has no datepattern defined

 * @since 2.1

 */

public static FastDateFormat getDateInstance(final int style,final TimeZone timeZone){

  return cache.getDateInstance(style,timeZone,null);

}

Location: FastDateFormat.java

Content: 

/** 

 * <p>Gets a date/time formatter instance using the specified style in the default time zone and locale.</p>

 * @param dateStyle  date style: FULL, LONG, MEDIUM, or SHORT

 * @param timeStyle  time style: FULL, LONG, MEDIUM, or SHORT

 * @return a localized standard date/time formatter

 * @throws IllegalArgumentException if the Locale has no date/timepattern defined

 * @since 2.1

 */

public static FastDateFormat getDateTimeInstance(final int dateStyle,final int timeStyle){

  return cache.getDateTimeInstance(dateStyle,timeStyle,null,null);

}

Location: FastDateFormat.java

Content: 

/** 

 * <p>Gets a date/time formatter instance using the specified style and locale in the default time zone.</p>

 * @param dateStyle  date style: FULL, LONG, MEDIUM, or SHORT

 * @param timeStyle  time style: FULL, LONG, MEDIUM, or SHORT

 * @param locale  optional locale, overrides system locale

 * @return a localized standard date/time formatter

 * @throws IllegalArgumentException if the Locale has no date/timepattern defined

 * @since 2.1

 */

public static FastDateFormat getDateTimeInstance(final int dateStyle,final int timeStyle,final Locale locale){

  return cache.getDateTimeInstance(dateStyle,timeStyle,null,locale);

}

Location: FastDateFormat.java

Content: 

/** 

 * <p>Gets a date/time formatter instance using the specified style and time zone in the default locale.</p>

 * @param dateStyle  date style: FULL, LONG, MEDIUM, or SHORT

 * @param timeStyle  time style: FULL, LONG, MEDIUM, or SHORT

 * @param timeZone  optional time zone, overrides time zone offormatted date

 * @return a localized standard date/time formatter

 * @throws IllegalArgumentException if the Locale has no date/timepattern defined

 * @since 2.1

 */

public static FastDateFormat getDateTimeInstance(final int dateStyle,final int timeStyle,final TimeZone timeZone){

  return getDateTimeInstance(dateStyle,timeStyle,timeZone,null);

}

Location: FastDateFormat.java

Content: 

/** 

 * <p>Gets a time formatter instance using the specified style in the default time zone and locale.</p>

 * @param style  time style: FULL, LONG, MEDIUM, or SHORT

 * @return a localized standard time formatter

 * @throws IllegalArgumentException if the Locale has no timepattern defined

 * @since 2.1

 */

public static FastDateFormat getTimeInstance(final int style){

  return cache.getTimeInstance(style,null,null);

}

Location: FastDateFormat.java

Content: 

/** 

 * <p>Gets a time formatter instance using the specified style and locale in the default time zone.</p>

 * @param style  time style: FULL, LONG, MEDIUM, or SHORT

 * @param locale  optional locale, overrides system locale

 * @return a localized standard time formatter

 * @throws IllegalArgumentException if the Locale has no timepattern defined

 * @since 2.1

 */

public static FastDateFormat getTimeInstance(final int style,final Locale locale){

  return cache.getTimeInstance(style,null,locale);

}

Location: FastDateFormat.java

Content: 

/** 

 * <p>Gets a time formatter instance using the specified style and time zone in the default locale.</p>

 * @param style  time style: FULL, LONG, MEDIUM, or SHORT

 * @param timeZone  optional time zone, overrides time zone offormatted time

 * @return a localized standard time formatter

 * @throws IllegalArgumentException if the Locale has no timepattern defined

 * @since 2.1

 */

public static FastDateFormat getTimeInstance(final int style,final TimeZone timeZone){

  return cache.getTimeInstance(style,timeZone,null);

}

