Location: MultiBackgroundInitializerTest.java

Content: 

/** 

 * Tests whether a child initializer has been executed. Optionally the expected executor service can be checked, too.

 * @param child the child initializer

 * @param expExec the expected executor service (null if the executor shouldnot be checked)

 * @throws ConcurrentException if an error occurs

 */

private void checkChild(final BackgroundInitializer<?> child,final ExecutorService expExec) throws ConcurrentException {

  final ChildBackgroundInitializer cinit=(ChildBackgroundInitializer)child;

  final Integer result=cinit.get();

  assertEquals(1,result.intValue(),"Wrong result");

  assertEquals(1,cinit.initializeCalls,"Wrong number of executions");

  if (expExec != null) {

    assertEquals(expExec,cinit.currentExecutor,"Wrong executor service");

  }

}

Location: MultiBackgroundInitializerTest.java

Content: 

/** 

 * Tries to add another child initializer after the start() method has been called. This should not be allowed.

 * @throws org.apache.commons.lang3.concurrent.ConcurrentException so we don't have to catch it

 */

@Test public void testAddInitializerAfterStart() throws ConcurrentException {

  initializer.start();

  assertThrows(IllegalStateException.class,() -> initializer.addInitializer(CHILD_INIT,new ChildBackgroundInitializer()),"Could add initializer after start()!");

  initializer.get();

}

Location: MultiBackgroundInitializerTest.java

Content: 

/** 

 * Tests addInitializer() if a null initializer is passed in. This should cause an exception.

 */

@Test public void testAddInitializerNullInit(){

  assertThrows(NullPointerException.class,() -> initializer.addInitializer(CHILD_INIT,null));

}

Location: MultiBackgroundInitializerTest.java

Content: 

/** 

 * Tests addInitializer() if a null name is passed in. This should cause an exception.

 */

@Test public void testAddInitializerNullName(){

  assertThrows(NullPointerException.class,() -> initializer.addInitializer(null,new ChildBackgroundInitializer()));

}

Location: MultiBackgroundInitializerTest.java

Content: 

/** 

 * Tests the behavior of initialize() if a child initializer has a specific executor service. Then this service should not be overridden.

 * @throws org.apache.commons.lang3.concurrent.ConcurrentException so we don't have to catch it

 */

@Test public void testInitializeChildWithExecutor() throws ConcurrentException, InterruptedException {

  final String initExec="childInitializerWithExecutor";

  final ExecutorService exec=Executors.newSingleThreadExecutor();

  try {

    final ChildBackgroundInitializer c1=new ChildBackgroundInitializer();

    final ChildBackgroundInitializer c2=new ChildBackgroundInitializer();

    c2.setExternalExecutor(exec);

    initializer.addInitializer(CHILD_INIT,c1);

    initializer.addInitializer(initExec,c2);

    initializer.start();

    initializer.get();

    checkChild(c1,initializer.getActiveExecutor());

    checkChild(c2,exec);

  }

  finally {

    exec.shutdown();

    exec.awaitTermination(1,TimeUnit.SECONDS);

  }

}

Location: MultiBackgroundInitializerTest.java

Content: 

/** 

 * Tests the behavior of the initializer if one of the child initializers throws a checked exception.

 * @throws org.apache.commons.lang3.concurrent.ConcurrentException so we don't have to catch it

 */

@Test public void testInitializeEx() throws ConcurrentException {

  final ChildBackgroundInitializer child=new ChildBackgroundInitializer();

  child.ex=new Exception();

  initializer.addInitializer(CHILD_INIT,child);

  initializer.start();

  final MultiBackgroundInitializer.MultiBackgroundInitializerResults res=initializer.get();

  assertTrue(res.isException(CHILD_INIT),"No exception flag");

  assertNull(res.getResultObject(CHILD_INIT),"Got a results object");

  final ConcurrentException cex=res.getException(CHILD_INIT);

  assertEquals(child.ex,cex.getCause(),"Wrong cause");

}

Location: MultiBackgroundInitializerTest.java

Content: 

/** 

 * Tests background processing if an external executor service is provided.

 * @throws org.apache.commons.lang3.concurrent.ConcurrentException so we don't have to catch it

 */

@Test public void testInitializeExternalExec() throws ConcurrentException, InterruptedException {

  final ExecutorService exec=Executors.newCachedThreadPool();

  try {

    initializer=new MultiBackgroundInitializer(exec);

    checkInitialize();

    assertEquals(exec,initializer.getActiveExecutor(),"Wrong executor");

    assertFalse(exec.isShutdown(),"Executor was shutdown");

  }

  finally {

    exec.shutdown();

    exec.awaitTermination(1,TimeUnit.SECONDS);

  }

}

Location: MultiBackgroundInitializerTest.java

Content: 

/** 

 * Tests whether MultiBackgroundInitializers can be combined in a nested way.

 * @throws org.apache.commons.lang3.concurrent.ConcurrentException so we don't have to catch it

 */

@Test public void testInitializeNested() throws ConcurrentException {

  final String nameMulti="multiChildInitializer";

  initializer.addInitializer(CHILD_INIT,new ChildBackgroundInitializer());

  final MultiBackgroundInitializer mi2=new MultiBackgroundInitializer();

  final int count=3;

  for (int i=0; i < count; i++) {

    mi2.addInitializer(CHILD_INIT + i,new ChildBackgroundInitializer());

  }

  initializer.addInitializer(nameMulti,mi2);

  initializer.start();

  final MultiBackgroundInitializer.MultiBackgroundInitializerResults res=initializer.get();

  final ExecutorService exec=initializer.getActiveExecutor();

  checkChild(res.getInitializer(CHILD_INIT),exec);

  final MultiBackgroundInitializer.MultiBackgroundInitializerResults res2=(MultiBackgroundInitializer.MultiBackgroundInitializerResults)res.getResultObject(nameMulti);

  assertEquals(count,res2.initializerNames().size(),"Wrong number of initializers");

  for (int i=0; i < count; i++) {

    checkChild(res2.getInitializer(CHILD_INIT + i),exec);

  }

  assertTrue(exec.isShutdown(),"Executor not shutdown");

}

Location: MultiBackgroundInitializerTest.java

Content: 

/** 

 * Tests the background processing if there are no child initializers.

 * @throws org.apache.commons.lang3.concurrent.ConcurrentException so we don't have to catch it

 */

@Test public void testInitializeNoChildren() throws ConcurrentException {

  assertTrue(initializer.start(),"Wrong result of start()");

  final MultiBackgroundInitializer.MultiBackgroundInitializerResults res=initializer.get();

  assertTrue(res.initializerNames().isEmpty(),"Got child initializers");

  assertTrue(initializer.getActiveExecutor().isShutdown(),"Executor not shutdown");

}

Location: MultiBackgroundInitializerTest.java

Content: 

/** 

 * Tests the isSuccessful() method of the result object if at least one child initializer has thrown an exception.

 * @throws org.apache.commons.lang3.concurrent.ConcurrentException so we don't have to catch it

 */

@Test public void testInitializeResultsIsSuccessfulFalse() throws ConcurrentException {

  final ChildBackgroundInitializer child=new ChildBackgroundInitializer();

  child.ex=new Exception();

  initializer.addInitializer(CHILD_INIT,child);

  initializer.start();

  final MultiBackgroundInitializer.MultiBackgroundInitializerResults res=initializer.get();

  assertFalse(res.isSuccessful(),"Wrong success flag");

}

Location: MultiBackgroundInitializerTest.java

Content: 

/** 

 * Tests the isSuccessful() method of the result object if no child initializer has thrown an exception.

 * @throws org.apache.commons.lang3.concurrent.ConcurrentException so we don't have to catch it

 */

@Test public void testInitializeResultsIsSuccessfulTrue() throws ConcurrentException {

  final ChildBackgroundInitializer child=new ChildBackgroundInitializer();

  initializer.addInitializer(CHILD_INIT,child);

  initializer.start();

  final MultiBackgroundInitializer.MultiBackgroundInitializerResults res=initializer.get();

  assertTrue(res.isSuccessful(),"Wrong success flag");

}

Location: MultiBackgroundInitializerTest.java

Content: 

/** 

 * Tests the behavior of the initializer if one of the child initializers throws a runtime exception.

 */

@Test public void testInitializeRuntimeEx(){

  final ChildBackgroundInitializer child=new ChildBackgroundInitializer();

  child.ex=new RuntimeException();

  initializer.addInitializer(CHILD_INIT,child);

  initializer.start();

  final Exception ex=assertThrows(Exception.class,initializer::get);

  assertEquals(child.ex,ex,"Wrong exception");

}

Location: MultiBackgroundInitializerTest.java

Content: 

/** 

 * Tests background processing if a temporary executor is used.

 * @throws org.apache.commons.lang3.concurrent.ConcurrentException so we don't have to catch it

 */

@Test public void testInitializeTempExec() throws ConcurrentException {

  hongshuai();

  final int count=5;

  for (int i=0; i < count; i++) {

    initializer.addInitializer(CHILD_INIT + i,new ChildBackgroundInitializer());

  }

  initializer.start();

  final MultiBackgroundInitializer.MultiBackgroundInitializerResults res=initializer.get();

  assertEquals(count,res.initializerNames().size(),"Wrong number of child initializers");

  for (int i=0; i < count; i++) {

    final String key=CHILD_INIT + i;

    assertTrue(res.initializerNames().contains(key),"Name not found: " + key);

    assertEquals(Integer.valueOf(1),res.getResultObject(key),"Wrong result object");

    assertFalse(res.isException(key),"Exception flag");

    assertNull(res.getException(key),"Got an exception");

    checkChild(res.getInitializer(key),initializer.getActiveExecutor());

  }

  assertTrue(initializer.getActiveExecutor().isShutdown(),"Executor not shutdown");

}

Location: MultiBackgroundInitializerTest.java

Content: 

/** 

 * Tries to query the exception of an unknown child initializer from the results object. This should cause an exception.

 * @throws org.apache.commons.lang3.concurrent.ConcurrentException so we don't have to catch it

 */

@Test public void testResultGetExceptionUnknown() throws ConcurrentException {

  final MultiBackgroundInitializer.MultiBackgroundInitializerResults res=checkInitialize();

  assertThrows(NoSuchElementException.class,() -> res.getException("unknown"));

}

Location: MultiBackgroundInitializerTest.java

Content: 

/** 

 * Tries to query an unknown child initializer from the results object. This should cause an exception.

 * @throws org.apache.commons.lang3.concurrent.ConcurrentException so we don't have to catch it

 */

@Test public void testResultGetInitializerUnknown() throws ConcurrentException {

  final MultiBackgroundInitializer.MultiBackgroundInitializerResults res=checkInitialize();

  assertThrows(NoSuchElementException.class,() -> res.getInitializer("unknown"));

}

Location: MultiBackgroundInitializerTest.java

Content: 

/** 

 * Tries to query the results of an unknown child initializer from the results object. This should cause an exception.

 * @throws org.apache.commons.lang3.concurrent.ConcurrentException so we don't have to catch it

 */

@Test public void testResultGetResultObjectUnknown() throws ConcurrentException {

  final MultiBackgroundInitializer.MultiBackgroundInitializerResults res=checkInitialize();

  assertThrows(NoSuchElementException.class,() -> res.getResultObject("unknown"));

}

Location: MultiBackgroundInitializerTest.java

Content: 

/** 

 * Tests that the set with the names of the initializers cannot be modified.

 * @throws org.apache.commons.lang3.concurrent.ConcurrentException so we don't have to catch it

 */

@Test public void testResultInitializerNamesModify() throws ConcurrentException {

  hongshuai();

  final int count=5;

  for (int i=0; i < count; i++) {

    initializer.addInitializer(CHILD_INIT + i,new ChildBackgroundInitializer());

  }

  initializer.start();

  final MultiBackgroundInitializer.MultiBackgroundInitializerResults res=initializer.get();

  assertEquals(count,res.initializerNames().size(),"Wrong number of child initializers");

  for (int i=0; i < count; i++) {

    final String key=CHILD_INIT + i;

    assertTrue(res.initializerNames().contains(key),"Name not found: " + key);

    assertEquals(Integer.valueOf(1),res.getResultObject(key),"Wrong result object");

    assertFalse(res.isException(key),"Exception flag");

    assertNull(res.getException(key),"Got an exception");

    checkChild(res.getInitializer(key),initializer.getActiveExecutor());

  }

  final MultiBackgroundInitializer.MultiBackgroundInitializerResults res=initializer.get();

  final Iterator<String> it=res.initializerNames().iterator();

  it.next();

  assertThrows(UnsupportedOperationException.class,it::remove);

}

Location: MultiBackgroundInitializerTest.java

Content: 

/** 

 * Tries to query the exception flag of an unknown child initializer from the results object. This should cause an exception.

 * @throws org.apache.commons.lang3.concurrent.ConcurrentException so we don't have to catch it

 */

@Test public void testResultIsExceptionUnknown() throws ConcurrentException {

  final MultiBackgroundInitializer.MultiBackgroundInitializerResults res=checkInitialize();

  assertThrows(NoSuchElementException.class,() -> res.isException("unknown"));

}

