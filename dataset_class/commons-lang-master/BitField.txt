Location: BitField.java

Content: 

/** 

 * <p>Creates a BitField instance.</p>

 * @param mask the mask specifying which bits apply to thisBitField. Bits that are set in this mask are the bits that this BitField operates on

 */

public BitField(final int mask){

  this.mask=mask;

  this.shiftCount=mask == 0 ? 0 : Integer.numberOfTrailingZeros(mask);

}

Location: BitField.java

Content: 

/** 

 * <p>Clears the bits.</p>

 * @param holder the byte data containing the bits we'reinterested in

 * @return the value of holder with the specified bits cleared(set to  {@code 0})

 */

public byte clearByte(final byte holder){

  return (byte)clear(holder);

}

Location: BitField.java

Content: 

/** 

 * <p>Clears the bits.</p>

 * @param holder the short data containing the bits we'reinterested in

 * @return the value of holder with the specified bits cleared(set to  {@code 0})

 */

public short clearShort(final short holder){

  return (short)clear(holder);

}

Location: BitField.java

Content: 

/** 

 * <p>Clears the bits.</p>

 * @param holder the int data containing the bits we'reinterested in

 * @return the value of holder with the specified bits cleared(set to  {@code 0})

 */

public int clear(final int holder){

  return holder & ~mask;

}

Location: BitField.java

Content: 

/** 

 * <p>Obtains the value for the specified BitField, unshifted.</p>

 * @param holder the int data containing the bits we'reinterested in

 * @return the selected bits

 */

public int getRawValue(final int holder){

  return holder & mask;

}

Location: BitField.java

Content: 

/** 

 * <p>Obtains the value for the specified BitField, unshifted.</p>

 * @param holder the short data containing the bits we'reinterested in

 * @return the selected bits

 */

public short getShortRawValue(final short holder){

  return (short)getRawValue(holder);

}

Location: BitField.java

Content: 

/** 

 * <p>Obtains the value for the specified BitField, appropriately shifted right, as a short.</p> <p>Many users of a BitField will want to treat the specified bits as an int value, and will not want to be aware that the value is stored as a BitField (and so shifted left so many bits).</p>

 * @see #setShortValue(short,short)

 * @param holder the short data containing the bits we'reinterested in

 * @return the selected bits, shifted right appropriately

 */

public short getShortValue(final short holder){

  return (short)getValue(holder);

}

Location: BitField.java

Content: 

/** 

 * <p>Obtains the value for the specified BitField, appropriately shifted right.</p> <p>Many users of a BitField will want to treat the specified bits as an int value, and will not want to be aware that the value is stored as a BitField (and so shifted left so many bits).</p>

 * @see #setValue(int,int)

 * @param holder the int data containing the bits we're interestedin

 * @return the selected bits, shifted right appropriately

 */

public int getValue(final int holder){

  return getRawValue(holder) >> shiftCount;

}

Location: BitField.java

Content: 

/** 

 * <p>Returns whether all of the bits are set or not.</p> <p>This is a stricter test than  {@link #isSet(int)}, in that all of the bits in a multi-bit set must be set for this method to return  {@code true}.</p>

 * @param holder the int data containing the bits we'reinterested in

 * @return {@code true} if all of the bits are set,else  {@code false}

 */

public boolean isAllSet(final int holder){

  return (holder & mask) == mask;

}

Location: BitField.java

Content: 

/** 

 * <p>Returns whether the field is set or not.</p> <p>This is most commonly used for a single-bit field, which is often used to represent a boolean value; the results of using it for a multi-bit field is to determine whether *any* of its bits are set.</p>

 * @param holder the int data containing the bits we're interestedin

 * @return {@code true} if any of the bits are set,else  {@code false}

 */

public boolean isSet(final int holder){

  return (holder & mask) != 0;

}

Location: BitField.java

Content: 

/** 

 * <p>Sets a boolean BitField.</p>

 * @param holder the int data containing the bits we'reinterested in

 * @param flag indicating whether to set or clear the bits

 * @return the value of holder with the specified bits set orcleared

 */

public int setBoolean(final int holder,final boolean flag){

  return flag ? set(holder) : clear(holder);

}

Location: BitField.java

Content: 

/** 

 * <p>Sets a boolean BitField.</p>

 * @param holder the byte data containing the bits we'reinterested in

 * @param flag indicating whether to set or clear the bits

 * @return the value of holder with the specified bits set orcleared

 */

public byte setByteBoolean(final byte holder,final boolean flag){

  return flag ? setByte(holder) : clearByte(holder);

}

Location: BitField.java

Content: 

/** 

 * <p>Sets the bits.</p>

 * @param holder the byte data containing the bits we'reinterested in

 * @return the value of holder with the specified bits setto  {@code 1}

 */

public byte setByte(final byte holder){

  return (byte)set(holder);

}

Location: BitField.java

Content: 

/** 

 * <p>Sets a boolean BitField.</p>

 * @param holder the short data containing the bits we'reinterested in

 * @param flag indicating whether to set or clear the bits

 * @return the value of holder with the specified bits set orcleared

 */

public short setShortBoolean(final short holder,final boolean flag){

  return flag ? setShort(holder) : clearShort(holder);

}

Location: BitField.java

Content: 

/** 

 * <p>Replaces the bits with new values.</p>

 * @see #getShortValue(short)

 * @param holder the short data containing the bits we'reinterested in

 * @param value the new value for the specified bits

 * @return the value of holder with the bits from the valueparameter replacing the old bits

 */

public short setShortValue(final short holder,final short value){

  return (short)setValue(holder,value);

}

Location: BitField.java

Content: 

/** 

 * <p>Sets the bits.</p>

 * @param holder the short data containing the bits we'reinterested in

 * @return the value of holder with the specified bits setto  {@code 1}

 */

public short setShort(final short holder){

  return (short)set(holder);

}

Location: BitField.java

Content: 

/** 

 * <p>Replaces the bits with new values.</p>

 * @see #getValue(int)

 * @param holder the int data containing the bits we'reinterested in

 * @param value the new value for the specified bits

 * @return the value of holder with the bits from the valueparameter replacing the old bits

 */

public int setValue(final int holder,final int value){

  return (holder & ~mask) | ((value << shiftCount) & mask);

}

Location: BitField.java

Content: 

/** 

 * <p>Sets the bits.</p>

 * @param holder the int data containing the bits we'reinterested in

 * @return the value of holder with the specified bits setto  {@code 1}

 */

public int set(final int holder){

  return holder | mask;

}

