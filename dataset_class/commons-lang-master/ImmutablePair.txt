Location: ImmutablePair.java

Content: 

/** 

 * Create a new pair instance.

 * @param left  the left value, may be null

 * @param right  the right value, may be null

 */

public ImmutablePair(final L left,final R right){

  this.left=left;

  this.right=right;

}

Location: ImmutablePair.java

Content: 

/** 

 * <p>Creates an immutable pair of two objects inferring the generic types.</p> <p>This factory allows the pair to be created using inference to obtain the generic types.</p>

 * @param < L > the left element type

 * @param < R > the right element type

 * @param left  the left element, may be null

 * @return a pair formed from the two parameters, not null

 * @since 3.11

 */

public static <L,R>Pair<L,R> left(final L left){

  return ImmutablePair.of(left,null);

}

Location: ImmutablePair.java

Content: 

/** 

 * Returns an immutable pair of nulls.

 * @param < L > the left element of this pair. Value is {@code null}.

 * @param < R > the right element of this pair. Value is {@code null}.

 * @return an immutable pair of nulls.

 * @since 3.6

 */

public static <L,R>ImmutablePair<L,R> nullPair(){

  return NULL;

}

Location: ImmutablePair.java

Content: 

/** 

 * <p>Creates an immutable pair of two objects inferring the generic types.</p> <p>This factory allows the pair to be created using inference to obtain the generic types.</p>

 * @param < L > the left element type

 * @param < R > the right element type

 * @param right  the right element, may be null

 * @return a pair formed from the two parameters, not null

 * @since 3.11

 */

public static <L,R>Pair<L,R> right(final R right){

  return ImmutablePair.of(null,right);

}

