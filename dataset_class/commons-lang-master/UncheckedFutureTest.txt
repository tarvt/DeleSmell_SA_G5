Location: UncheckedFutureTest.java

Content: 

@Test public void testGetExecutionException(){

  final ExecutionException e=new ExecutionException(new Exception());

  assertThrows(UncheckedExecutionException.class,() -> UncheckedFuture.on(new TestFuture<>(e)).get());

}

Location: UncheckedFutureTest.java

Content: 

@Test public void testGetLongExecutionException(){

  final ExecutionException e=new ExecutionException(new Exception());

  assertThrows(UncheckedExecutionException.class,() -> UncheckedFuture.on(new TestFuture<>(e)).get(1,TimeUnit.MICROSECONDS));

}

Location: UncheckedFutureTest.java

Content: 

@Test public void testGetLongInterruptedException(){

  final InterruptedException e=new InterruptedException();

  assertThrows(UncheckedInterruptedException.class,() -> UncheckedFuture.on(new TestFuture<>(e)).get(1,TimeUnit.MICROSECONDS));

}

Location: UncheckedFutureTest.java

Content: 

@Test public void testGetLongTimeoutException(){

  final TimeoutException e=new TimeoutException();

  assertThrows(UncheckedTimeoutException.class,() -> UncheckedFuture.on(new TestFuture<>(e)).get(1,TimeUnit.MICROSECONDS));

}

Location: UncheckedFutureTest.java

Content: 

@Test public void testMap(){

  final List<String> expected=Arrays.asList("Y","Z");

  final List<Future<String>> input=Arrays.asList(new TestFuture<>("Y"),new TestFuture<>("Z"));

  assertEquals(expected,UncheckedFuture.map(input).map(UncheckedFuture::get).collect(Collectors.toList()));

}

Location: UncheckedFutureTest.java

Content: 

@Test public void testOnCollection(){

  final List<String> expected=Arrays.asList("Y","Z");

  final List<Future<String>> input=Arrays.asList(new TestFuture<>("Y"),new TestFuture<>("Z"));

  assertEquals(expected,UncheckedFuture.on(input).stream().map(UncheckedFuture::get).collect(Collectors.toList()));

}

Location: UncheckedFutureTest.java

Content: 

@Test public void testOnFuture(){

  assertEquals("Z",UncheckedFuture.on(new TestFuture<>("Z")).get());

}

