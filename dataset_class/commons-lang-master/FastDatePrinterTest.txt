Location: FastDatePrinterTest.java

Content: 

private DatePrinter getDateInstance(final int dateStyle,final Locale locale){

  return getInstance(FormatCache.getPatternForStyle(Integer.valueOf(dateStyle),null,locale),TimeZone.getDefault(),Locale.getDefault());

}

Location: FastDatePrinterTest.java

Content: 

DatePrinter getInstance(final String format){

  return getInstance(format,TimeZone.getDefault(),Locale.getDefault());

}

Location: FastDatePrinterTest.java

Content: 

private DatePrinter getInstance(final String format,final Locale locale){

  return getInstance(format,TimeZone.getDefault(),locale);

}

Location: FastDatePrinterTest.java

Content: 

private DatePrinter getInstance(final String format,final TimeZone timeZone){

  return getInstance(format,timeZone,Locale.getDefault());

}

Location: FastDatePrinterTest.java

Content: 

private static Calendar initializeCalendar(final TimeZone tz){

  final Calendar cal=Calendar.getInstance(tz);

  cal.set(Calendar.YEAR,2001);

  cal.set(Calendar.MONTH,1);

  cal.set(Calendar.DAY_OF_MONTH,4);

  cal.set(Calendar.HOUR_OF_DAY,12);

  cal.set(Calendar.MINUTE,8);

  cal.set(Calendar.SECOND,56);

  cal.set(Calendar.MILLISECOND,235);

  return cal;

}

Location: FastDatePrinterTest.java

Content: 

@Test public void test1806(){

  for (  final Expected1806 trial : Expected1806.values()) {

    final Calendar cal=initializeCalendar(trial.zone);

    DatePrinter printer=getInstance("X",trial.zone);

    assertEquals(trial.one,printer.format(cal));

    printer=getInstance("XX",trial.zone);

    assertEquals(trial.two,printer.format(cal));

    printer=getInstance("XXX",trial.zone);

    assertEquals(trial.three,printer.format(cal));

  }

}

Location: FastDatePrinterTest.java

Content: 

@Test public void test1806Argument(){

  assertThrows(IllegalArgumentException.class,() -> getInstance("XXXX"));

}

Location: FastDatePrinterTest.java

Content: 

@Test public void testAppendableOptions(){

  final DatePrinter format=getInstance("yyyy-MM-dd HH:mm:ss.SSS Z",TimeZones.GMT);

  final Calendar calendar=Calendar.getInstance();

  final StringBuilder sb=new StringBuilder();

  final String expected=format.format(calendar,sb).toString();

  sb.setLength(0);

  final Date date=calendar.getTime();

  assertEquals(expected,format.format(date,sb).toString());

  sb.setLength(0);

  final long epoch=date.getTime();

  assertEquals(expected,format.format(epoch,sb).toString());

}

Location: FastDatePrinterTest.java

Content: 

@Test public void testDayNumberOfWeek(){

  final DatePrinter printer=getInstance("u");

  final Calendar calendar=Calendar.getInstance();

  calendar.set(Calendar.DAY_OF_WEEK,Calendar.MONDAY);

  assertEquals("1",printer.format(calendar.getTime()));

  calendar.set(Calendar.DAY_OF_WEEK,Calendar.SATURDAY);

  assertEquals("6",printer.format(calendar.getTime()));

  calendar.set(Calendar.DAY_OF_WEEK,Calendar.SUNDAY);

  assertEquals("7",printer.format(calendar.getTime()));

}

Location: FastDatePrinterTest.java

Content: 

@Test public void testHourFormats(){

  final Calendar calendar=Calendar.getInstance();

  calendar.clear();

  final DatePrinter printer=getInstance("K k H h");

  calendar.set(Calendar.HOUR_OF_DAY,0);

  assertEquals("0 24 0 12",printer.format(calendar));

  calendar.set(Calendar.HOUR_OF_DAY,12);

  assertEquals("0 12 12 12",printer.format(calendar));

  calendar.set(Calendar.HOUR_OF_DAY,23);

  assertEquals("11 23 23 11",printer.format(calendar));

}

Location: FastDatePrinterTest.java

Content: 

@Test public void testLang1103(){

  final Calendar cal=Calendar.getInstance(SWEDEN);

  cal.set(Calendar.DAY_OF_MONTH,2);

  assertEquals("2",getInstance("d",SWEDEN).format(cal));

  assertEquals("02",getInstance("dd",SWEDEN).format(cal));

  assertEquals("002",getInstance("ddd",SWEDEN).format(cal));

  assertEquals("0002",getInstance("dddd",SWEDEN).format(cal));

  assertEquals("00002",getInstance("ddddd",SWEDEN).format(cal));

}

Location: FastDatePrinterTest.java

Content: 

@Test public void testLang303(){

  final Calendar cal=Calendar.getInstance();

  cal.set(2004,Calendar.DECEMBER,31);

  DatePrinter format=getInstance(YYYY_MM_DD);

  final String output=format.format(cal);

  format=SerializationUtils.deserialize(SerializationUtils.serialize((Serializable)format));

  assertEquals(output,format.format(cal));

}

Location: FastDatePrinterTest.java

Content: 

@Test public void testLang538(){

  final GregorianCalendar cal=new GregorianCalendar(TimeZone.getTimeZone("GMT-8"));

  cal.clear();

  cal.set(2009,Calendar.OCTOBER,16,8,42,16);

  final DatePrinter format=getInstance("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'",TimeZones.GMT);

  assertEquals("2009-10-16T16:42:16.000Z",format.format(cal.getTime()),"dateTime");

  assertEquals("2009-10-16T16:42:16.000Z",format.format(cal),"dateTime");

}

Location: FastDatePrinterTest.java

Content: 

@Test public void testLang645(){

  final Locale locale=new Locale("sv","SE");

  final Calendar cal=Calendar.getInstance();

  cal.set(2010,Calendar.JANUARY,1,12,0,0);

  final Date d=cal.getTime();

  final DatePrinter fdf=getInstance("EEEE', week 'ww",locale);

  assertEquals("fredag, week 53",fdf.format(d));

}

Location: FastDatePrinterTest.java

Content: 

@Test public void testLocaleMatches(){

  final DatePrinter printer=getInstance(YYYY_MM_DD,SWEDEN);

  assertEquals(SWEDEN,printer.getLocale());

}

Location: FastDatePrinterTest.java

Content: 

/** 

 * Tests that pre-1000AD years get padded with yyyy

 */

@Test public void testLowYearPadding(){

  final Calendar cal=Calendar.getInstance();

  final DatePrinter format=getInstance(YYYY_MM_DD);

  cal.set(1,Calendar.JANUARY,1);

  assertEquals("0001/01/01",format.format(cal));

  cal.set(10,Calendar.JANUARY,1);

  assertEquals("0010/01/01",format.format(cal));

  cal.set(100,Calendar.JANUARY,1);

  assertEquals("0100/01/01",format.format(cal));

  cal.set(999,Calendar.JANUARY,1);

  assertEquals("0999/01/01",format.format(cal));

}

Location: FastDatePrinterTest.java

Content: 

/** 

 * Show Bug #39410 is solved

 */

@Test public void testMilleniumBug(){

  final Calendar cal=Calendar.getInstance();

  final DatePrinter format=getInstance("dd.MM.yyyy");

  cal.set(1000,Calendar.JANUARY,1);

  assertEquals("01.01.1000",format.format(cal));

}

Location: FastDatePrinterTest.java

Content: 

@Test public void testPatternMatches(){

  final DatePrinter printer=getInstance(YYYY_MM_DD);

  assertEquals(YYYY_MM_DD,printer.getPattern());

}

Location: FastDatePrinterTest.java

Content: 

/** 

 * Test case for  {@link FastDateParser#FastDateParser(String,TimeZone,Locale)}.

 */

@Test public void testShortDateStyleWithLocales(){

  final Locale usLocale=Locale.US;

  final Locale swedishLocale=new Locale("sv","SE");

  final Calendar cal=Calendar.getInstance();

  cal.set(2004,Calendar.FEBRUARY,3);

  DatePrinter fdf=getDateInstance(FastDateFormat.SHORT,usLocale);

  assertEquals("2/3/04",fdf.format(cal));

  fdf=getDateInstance(FastDateFormat.SHORT,swedishLocale);

  assertEquals("2004-02-03",fdf.format(cal));

}

Location: FastDatePrinterTest.java

Content: 

/** 

 * testLowYearPadding showed that the date was buggy This test confirms it, getting 366 back as a date

 */

@Test public void testSimpleDate(){

  final Calendar cal=Calendar.getInstance();

  final DatePrinter format=getInstance(YYYY_MM_DD);

  cal.set(2004,Calendar.DECEMBER,31);

  assertEquals("2004/12/31",format.format(cal));

  cal.set(999,Calendar.DECEMBER,31);

  assertEquals("0999/12/31",format.format(cal));

  cal.set(1,Calendar.MARCH,2);

  assertEquals("0001/03/02",format.format(cal));

}

Location: FastDatePrinterTest.java

Content: 

@SuppressWarnings("deprecation") @Test public void testStringBufferOptions(){

  final DatePrinter format=getInstance("yyyy-MM-dd HH:mm:ss.SSS Z",TimeZones.GMT);

  final Calendar calendar=Calendar.getInstance();

  final StringBuffer sb=new StringBuffer();

  final String expected=format.format(calendar,sb,new FieldPosition(0)).toString();

  sb.setLength(0);

  assertEquals(expected,format.format(calendar,sb).toString());

  sb.setLength(0);

  final Date date=calendar.getTime();

  assertEquals(expected,format.format(date,sb,new FieldPosition(0)).toString());

  sb.setLength(0);

  assertEquals(expected,format.format(date,sb).toString());

  sb.setLength(0);

  final long epoch=date.getTime();

  assertEquals(expected,format.format(epoch,sb,new FieldPosition(0)).toString());

  sb.setLength(0);

  assertEquals(expected,format.format(epoch,sb).toString());

}

Location: FastDatePrinterTest.java

Content: 

@DefaultTimeZone("UTC") @Test public void testTimeZoneAsZ(){

  final Calendar c=Calendar.getInstance(FastTimeZone.getGmtTimeZone());

  final FastDateFormat noColonFormat=FastDateFormat.getInstance("Z");

  assertEquals("+0000",noColonFormat.format(c));

  final FastDateFormat isoFormat=FastDateFormat.getInstance("ZZ");

  assertEquals("Z",isoFormat.format(c));

  final FastDateFormat colonFormat=FastDateFormat.getInstance("ZZZ");

  assertEquals("+00:00",colonFormat.format(c));

}

Location: FastDatePrinterTest.java

Content: 

@Test public void testTimeZoneMatches(){

  final DatePrinter printer=getInstance(YYYY_MM_DD,NEW_YORK);

  assertEquals(NEW_YORK,printer.getTimeZone());

}

Location: FastDatePrinterTest.java

Content: 

@Test public void testToStringContainsName(){

  final DatePrinter printer=getInstance(YYYY_MM_DD);

  assertTrue(printer.toString().startsWith("FastDate"));

}

Location: FastDatePrinterTest.java

Content: 

@DefaultLocale(language="en",country="US") @DefaultTimeZone("America/New_York") @Test public void testWeekYear(){

  final GregorianCalendar cal=new GregorianCalendar(2020,12,31,0,0,0);

  final DatePrinter printer4Digits=getInstance("YYYY");

  final DatePrinter printer4DigitsFallback=getInstance("YYY");

  final DatePrinter printer2Digits=getInstance("YY");

  final DatePrinter printer4DigitAnotherFallback=getInstance("Y");

  assertEquals("2021",printer4Digits.format(cal));

  assertEquals("2021",printer4DigitsFallback.format(cal));

  assertEquals("2021",printer4DigitAnotherFallback.format(cal));

  assertEquals("21",printer2Digits.format(cal));

}

