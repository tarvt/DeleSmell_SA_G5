Location: AbstractConcurrentInitializerTest.java

Content: 

/** 

 * Creates the  {@link ConcurrentInitializer} object to be tested. Thismethod is called whenever the test fixture needs to be obtained.

 * @return the initializer object to be tested

 */

protected abstract ConcurrentInitializer<Object> createInitializer();

Location: AbstractConcurrentInitializerTest.java

Content: 

/** 

 * Tests whether get() can be invoked from multiple threads concurrently. Always the same object should be returned.

 * @throws org.apache.commons.lang3.concurrent.ConcurrentException because the object under test may throw it

 * @throws java.lang.InterruptedException because the threading API my throw it

 */

@Test public void testGetConcurrent() throws ConcurrentException, InterruptedException {

  final ConcurrentInitializer<Object> initializer=createInitializer();

  final int threadCount=20;

  final CountDownLatch startLatch=new CountDownLatch(1);

class GetThread extends Thread {

    Object object;

    @Override public void run(){

      try {

        startLatch.await();

        object=initializer.get();

      }

 catch (      final InterruptedException iex) {

      }

catch (      final ConcurrentException cex) {

        object=cex;

      }

    }

  }

  final GetThread[] threads=new GetThread[threadCount];

  for (int i=0; i < threadCount; i++) {

    threads[i]=new GetThread();

    threads[i].start();

  }

  startLatch.countDown();

  for (  final Thread t : threads) {

    t.join();

  }

  final Object managedObject=initializer.get();

  for (  final GetThread t : threads) {

    assertEquals(managedObject,t.object,"Wrong object");

  }

}

Location: AbstractConcurrentInitializerTest.java

Content: 

/** 

 * Tests whether sequential get() invocations always return the same instance.

 * @throws org.apache.commons.lang3.concurrent.ConcurrentException because the object under test may throw it

 */

@Test public void testGetMultipleTimes() throws ConcurrentException {

  final ConcurrentInitializer<Object> initializer=createInitializer();

  final Object obj=initializer.get();

  for (int i=0; i < 10; i++) {

    assertEquals(obj,initializer.get(),"Got different object at " + i);

  }

}

