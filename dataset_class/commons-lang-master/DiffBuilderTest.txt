Location: DiffBuilderTest.java

Content: 

@Test public void testByteArrayEqualAsObject(){

  final DiffResult<String> list=new DiffBuilder<>("String1","String2",SHORT_STYLE).append("foo",new boolean[]{false},new boolean[]{false}).append("foo",new byte[]{0x01},new byte[]{0x01}).append("foo",new char[]{'a'},new char[]{'a'}).append("foo",new double[]{1.0},new double[]{1.0}).append("foo",new float[]{1.0F},new float[]{1.0F}).append("foo",new int[]{1},new int[]{1}).append("foo",new long[]{1L},new long[]{1L}).append("foo",new short[]{1},new short[]{1}).append("foo",new Object[]{1,"two"},new Object[]{1,"two"}).build();

  assertEquals(0,list.getNumberOfDiffs());

}

Location: DiffBuilderTest.java

Content: 

@Test public void testDiffResult(){

  final TypeTestClass class1=new TypeTestClass();

  final TypeTestClass class2=new TypeTestClass();

  class2.intField=2;

  final DiffResult<TypeTestClass> list=new DiffBuilder<>(class1,class2,SHORT_STYLE).append("prop1",class1.diff(class2)).build();

  assertEquals(1,list.getNumberOfDiffs());

  assertEquals("prop1.int",list.getDiffs().get(0).getFieldName());

}

Location: DiffBuilderTest.java

Content: 

@Test public void testObjectArrayEqual(){

  final TypeTestClass class1=new TypeTestClass();

  final TypeTestClass class2=new TypeTestClass();

  class1.objectArrayField=new Object[]{"string",1,2};

  class2.objectArrayField=new Object[]{"string",1,2};

  final DiffResult<TypeTestClass> list=class1.diff(class2);

  assertEquals(0,list.getNumberOfDiffs());

}

Location: DiffBuilderTest.java

Content: 

/** 

 * Test that "left" and "right" are the same instance but are equal.

 */

@Test public void testObjectsNotSameButEqual(){

  final TypeTestClass left=new TypeTestClass();

  left.objectField=new Integer(1);

  final TypeTestClass right=new TypeTestClass();

  right.objectField=new Integer(1);

  assertNotSame(left.objectField,right.objectField);

  assertEquals(left.objectField,right.objectField);

  final DiffResult<TypeTestClass> list=left.diff(right);

  assertEquals(0,list.getNumberOfDiffs());

}

Location: DiffBuilderTest.java

Content: 

/** 

 * Test that "left" and "right" are not the same instance and are not equal.

 */

@Test public void testObjectsNotSameNorEqual(){

  final TypeTestClass left=new TypeTestClass();

  left.objectField=4;

  final TypeTestClass right=new TypeTestClass();

  right.objectField=100;

  assertNotSame(left.objectField,right.objectField);

  assertNotEquals(left.objectField,right.objectField);

  final DiffResult<TypeTestClass> list=left.diff(right);

  assertEquals(1,list.getNumberOfDiffs());

}

Location: DiffBuilderTest.java

Content: 

/** 

 * Test that "left" and "right" are the same instance and are equal.

 */

@Test public void testObjectsSameAndEqual(){

  final Integer sameObject=1;

  final TypeTestClass left=new TypeTestClass();

  left.objectField=sameObject;

  final TypeTestClass right=new TypeTestClass();

  right.objectField=sameObject;

  assertSame(left.objectField,right.objectField);

  assertEquals(left.objectField,right.objectField);

  final DiffResult<TypeTestClass> list=left.diff(right);

  assertEquals(0,list.getNumberOfDiffs());

}

Location: DiffBuilderTest.java

Content: 

@Test public void testSameObjectIgnoresAppends(){

  final TypeTestClass testClass=new TypeTestClass();

  final DiffResult<TypeTestClass> list=new DiffBuilder<>(testClass,testClass,SHORT_STYLE).append("ignored",false,true).build();

  assertEquals(0,list.getNumberOfDiffs());

}

Location: DiffBuilderTest.java

Content: 

@Test public void testSimilarObjectIgnoresAppends(){

  final TypeTestClass testClass1=new TypeTestClass();

  final TypeTestClass testClass2=new TypeTestClass();

  final DiffResult<TypeTestClass> list=new DiffBuilder<>(testClass1,testClass2,SHORT_STYLE).append("ignored",false,true).build();

  assertEquals(0,list.getNumberOfDiffs());

}

Location: DiffBuilderTest.java

Content: 

@Test public void testStylePassedToDiffResult(){

  final TypeTestClass class1=new TypeTestClass();

  DiffResult<TypeTestClass> list=class1.diff(class1);

  assertEquals(SHORT_STYLE,list.getToStringStyle());

  class1.style=ToStringStyle.MULTI_LINE_STYLE;

  list=class1.diff(class1);

  assertEquals(ToStringStyle.MULTI_LINE_STYLE,list.getToStringStyle());

}

Location: DiffBuilderTest.java

Content: 

@Test public void testTriviallyEqualTestDisabled(){

  final Matcher<Integer> equalToOne=equalTo(1);

  final DiffBuilder<Integer> explicitTestAndNotEqual1=new DiffBuilder<>(1,2,null,false);

  explicitTestAndNotEqual1.append("letter","X","Y");

  assertThat(explicitTestAndNotEqual1.build().getNumberOfDiffs(),equalToOne);

  final DiffBuilder<Integer> explicitTestAndNotEqual2=new DiffBuilder<>(1,1,null,false);

  explicitTestAndNotEqual2.append("letter","X","Y");

  assertThat(explicitTestAndNotEqual2.build().getNumberOfDiffs(),equalToOne);

}

Location: DiffBuilderTest.java

Content: 

@Test public void testTriviallyEqualTestEnabled(){

  final Matcher<Integer> equalToZero=equalTo(0);

  final Matcher<Integer> equalToOne=equalTo(1);

  final DiffBuilder<Integer> implicitTestAndEqual=new DiffBuilder<>(1,1,null);

  implicitTestAndEqual.append("letter","X","Y");

  assertThat(implicitTestAndEqual.build().getNumberOfDiffs(),equalToZero);

  final DiffBuilder<Integer> implicitTestAndNotEqual=new DiffBuilder<>(1,2,null);

  implicitTestAndNotEqual.append("letter","X","Y");

  assertThat(implicitTestAndNotEqual.build().getNumberOfDiffs(),equalToOne);

  final DiffBuilder<Integer> explicitTestAndEqual=new DiffBuilder<>(1,1,null,true);

  explicitTestAndEqual.append("letter","X","Y");

  assertThat(explicitTestAndEqual.build().getNumberOfDiffs(),equalToZero);

}

