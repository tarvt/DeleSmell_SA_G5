Location: ImmutablePairTest.java

Content: 

@Test public void testComparableLeftOnly(){

  final Pair<String,String> pair1=ImmutablePair.left("A");

  final Pair<String,String> pair2=ImmutablePair.left("B");

  assertEquals("A",pair1.getLeft());

  assertEquals("B",pair2.getLeft());

  assertEquals(0,pair1.compareTo(pair1));

  assertTrue(pair1.compareTo(pair2) < 0);

  assertEquals(0,pair2.compareTo(pair2));

  assertTrue(pair2.compareTo(pair1) > 0);

}

Location: ImmutablePairTest.java

Content: 

@Test public void testComparableRightOnly(){

  final Pair<String,String> pair1=ImmutablePair.right("A");

  final Pair<String,String> pair2=ImmutablePair.right("B");

  assertEquals("A",pair1.getRight());

  assertEquals("B",pair2.getRight());

  assertEquals(0,pair1.compareTo(pair1));

  assertTrue(pair1.compareTo(pair2) < 0);

  assertEquals(0,pair2.compareTo(pair2));

  assertTrue(pair2.compareTo(pair1) > 0);

}

Location: ImmutablePairTest.java

Content: 

@Test public void testNullPairEquals(){

  assertEquals(ImmutablePair.nullPair(),ImmutablePair.nullPair());

}

Location: ImmutablePairTest.java

Content: 

@Test public void testNullPairKey(){

  assertNull(ImmutablePair.nullPair().getKey());

}

Location: ImmutablePairTest.java

Content: 

@Test public void testNullPairLeft(){

  assertNull(ImmutablePair.nullPair().getLeft());

}

Location: ImmutablePairTest.java

Content: 

@Test public void testNullPairRight(){

  assertNull(ImmutablePair.nullPair().getRight());

}

Location: ImmutablePairTest.java

Content: 

@Test public void testNullPairSame(){

  assertSame(ImmutablePair.nullPair(),ImmutablePair.nullPair());

}

Location: ImmutablePairTest.java

Content: 

@Test public void testNullPairTyped(){

  final ImmutablePair<String,String> pair=ImmutablePair.nullPair();

  assertNotNull(pair);

}

Location: ImmutablePairTest.java

Content: 

@Test public void testNullPairValue(){

  assertNull(ImmutablePair.nullPair().getValue());

}

Location: ImmutablePairTest.java

Content: 

@Test public void testToStringLeft(){

  final Pair<String,String> pair=ImmutablePair.left("Key");

  assertEquals("(Key,null)",pair.toString());

}

Location: ImmutablePairTest.java

Content: 

@Test public void testToStringRight(){

  final Pair<String,String> pair=ImmutablePair.right("Value");

  assertEquals("(null,Value)",pair.toString());

}

Location: ImmutablePairTest.java

Content: 

@Test public void testUseAsKeyOfHashMap(){

  final HashMap<ImmutablePair<Object,Object>,String> map=new HashMap<>();

  final Object o1=new Object();

  final Object o2=new Object();

  final ImmutablePair<Object,Object> key1=ImmutablePair.of(o1,o2);

  final String value1="a1";

  map.put(key1,value1);

  assertEquals(value1,map.get(key1));

  assertEquals(value1,map.get(ImmutablePair.of(o1,o2)));

}

Location: ImmutablePairTest.java

Content: 

@Test public void testUseAsKeyOfTreeMap(){

  final TreeMap<ImmutablePair<Integer,Integer>,String> map=new TreeMap<>();

  map.put(ImmutablePair.of(1,2),"12");

  map.put(ImmutablePair.of(1,1),"11");

  map.put(ImmutablePair.of(0,1),"01");

  final ArrayList<ImmutablePair<Integer,Integer>> expected=new ArrayList<>();

  expected.add(ImmutablePair.of(0,1));

  expected.add(ImmutablePair.of(1,1));

  expected.add(ImmutablePair.of(1,2));

  final Iterator<Entry<ImmutablePair<Integer,Integer>,String>> it=map.entrySet().iterator();

  for (  final ImmutablePair<Integer,Integer> item : expected) {

    final Entry<ImmutablePair<Integer,Integer>,String> entry=it.next();

    assertEquals(item,entry.getKey());

    assertEquals(item.getLeft() + "" + item.getRight(),entry.getValue());

  }

}

