Location: FailableDoubleUnaryOperator.java

Content: 

/** 

 * Returns a composed  {@code FailableDoubleUnaryOperator} like{@link DoubleUnaryOperator#andThen(DoubleUnaryOperator)}.

 * @param after the operator to apply after this one.

 * @return a composed {@code FailableDoubleUnaryOperator} like{@link DoubleUnaryOperator#andThen(DoubleUnaryOperator)}.

 * @throws NullPointerException if after is null.

 * @see #compose(FailableDoubleUnaryOperator)

 */

default FailableDoubleUnaryOperator<E> andThen(final FailableDoubleUnaryOperator<E> after){

  Objects.requireNonNull(after);

  return (  final double t) -> after.applyAsDouble(applyAsDouble(t));

}

Location: FailableDoubleUnaryOperator.java

Content: 

/** 

 * Applies this operator to the given operand.

 * @param operand the operand

 * @return the operator result

 * @throws E Thrown when a consumer fails.

 */

double applyAsDouble(double operand) throws E ;

Location: FailableDoubleUnaryOperator.java

Content: 

/** 

 * Returns a composed  {@code FailableDoubleUnaryOperator} like{@link DoubleUnaryOperator#compose(DoubleUnaryOperator)}.

 * @param before the operator to apply before this one.

 * @return a composed {@code FailableDoubleUnaryOperator} like{@link DoubleUnaryOperator#compose(DoubleUnaryOperator)}.

 * @throws NullPointerException if before is null.

 * @see #andThen(FailableDoubleUnaryOperator)

 */

default FailableDoubleUnaryOperator<E> compose(final FailableDoubleUnaryOperator<E> before){

  Objects.requireNonNull(before);

  return (  final double v) -> applyAsDouble(before.applyAsDouble(v));

}

