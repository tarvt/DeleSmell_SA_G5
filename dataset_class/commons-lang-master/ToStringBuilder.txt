Location: ToStringBuilder.java

Content: 

/** 

 * <p>Appends with the same format as the default <code>Object toString() </code> method. Appends the class name followed by {@link System#identityHashCode(java.lang.Object)}.</p>

 * @param srcObject  the {@code Object} whose class name and id to output

 * @return this

 * @since 2.0

 */

public ToStringBuilder appendAsObjectToString(final Object srcObject){

  ObjectUtils.identityToString(this.getStringBuffer(),srcObject);

  return this;

}

Location: ToStringBuilder.java

Content: 

/** 

 * <p>Append the  {@code toString} from the superclass.</p><p>This method assumes that the superclass uses the same  {@code ToStringStyle}as this one.</p> <p>If  {@code superToString} is {@code null}, no change is made.</p>

 * @param superToString  the result of {@code super.toString()}

 * @return this

 * @since 2.0

 */

public ToStringBuilder appendSuper(final String superToString){

  if (superToString != null) {

    style.appendSuper(buffer,superToString);

  }

  return this;

}

Location: ToStringBuilder.java

Content: 

/** 

 * <p>Append the  {@code toString} from another object.</p><p>This method is useful where a class delegates most of the implementation of its properties to another class. You can then call  {@code toString()} onthe other class and pass the result into this method.</p> <pre> private AnotherObject delegate; private String fieldInThisClass; public String toString() { return new ToStringBuilder(this). appendToString(delegate.toString()). append(fieldInThisClass). toString(); }</pre> <p>This method assumes that the other object uses the same  {@code ToStringStyle}as this one.</p> <p>If the  {@code toString} is {@code null}, no change is made.</p>

 * @param toString  the result of {@code toString()} on another object

 * @return this

 * @since 2.0

 */

public ToStringBuilder appendToString(final String toString){

  if (toString != null) {

    style.appendToString(buffer,toString);

  }

  return this;

}

Location: ToStringBuilder.java

Content: 

/** 

 * <p>Append to the  {@code toString} a {@code boolean}array.</p>

 * @param fieldName  the field name

 * @param array  the array to add to the {@code hashCode}

 * @return this

 */

public ToStringBuilder append(final String fieldName,final boolean[] array){

  style.append(buffer,fieldName,array,null);

  return this;

}

Location: ToStringBuilder.java

Content: 

/** 

 * <p>Append to the  {@code toString} a {@code boolean}array.</p> <p>A boolean parameter controls the level of detail to show. Setting  {@code true} will output the array in full. Setting{@code false} will output a summary, typically the size ofthe array.</p>

 * @param fieldName  the field name

 * @param array  the array to add to the {@code toString}

 * @param fullDetail  {@code true} for detail, {@code false}for summary info

 * @return this

 */

public ToStringBuilder append(final String fieldName,final boolean[] array,final boolean fullDetail){

  style.append(buffer,fieldName,array,Boolean.valueOf(fullDetail));

  return this;

}

Location: ToStringBuilder.java

Content: 

/** 

 * <p>Append to the  {@code toString} a {@code byte} array.</p>

 * @param fieldName  the field name

 * @param array  the array to add to the {@code toString}

 * @return this

 */

public ToStringBuilder append(final String fieldName,final byte[] array){

  style.append(buffer,fieldName,array,null);

  return this;

}

Location: ToStringBuilder.java

Content: 

/** 

 * <p>Append to the  {@code toString} a {@code byte}array.</p> <p>A boolean parameter controls the level of detail to show. Setting  {@code true} will output the array in full. Setting{@code false} will output a summary, typically the size ofthe array.

 * @param fieldName  the field name

 * @param array  the array to add to the {@code toString}

 * @param fullDetail  {@code true} for detail, {@code false}for summary info

 * @return this

 */

public ToStringBuilder append(final String fieldName,final byte[] array,final boolean fullDetail){

  style.append(buffer,fieldName,array,Boolean.valueOf(fullDetail));

  return this;

}

Location: ToStringBuilder.java

Content: 

/** 

 * <p>Append to the  {@code toString} a {@code char}array.</p>

 * @param fieldName  the field name

 * @param array  the array to add to the {@code toString}

 * @return this

 */

public ToStringBuilder append(final String fieldName,final char[] array){

  style.append(buffer,fieldName,array,null);

  return this;

}

Location: ToStringBuilder.java

Content: 

/** 

 * <p>Append to the  {@code toString} a {@code char}array.</p> <p>A boolean parameter controls the level of detail to show. Setting  {@code true} will output the array in full. Setting{@code false} will output a summary, typically the size ofthe array.</p>

 * @param fieldName  the field name

 * @param array  the array to add to the {@code toString}

 * @param fullDetail  {@code true} for detail, {@code false}for summary info

 * @return this

 */

public ToStringBuilder append(final String fieldName,final char[] array,final boolean fullDetail){

  style.append(buffer,fieldName,array,Boolean.valueOf(fullDetail));

  return this;

}

Location: ToStringBuilder.java

Content: 

/** 

 * <p>Append to the  {@code toString} a {@code double}array.</p>

 * @param fieldName  the field name

 * @param array  the array to add to the {@code toString}

 * @return this

 */

public ToStringBuilder append(final String fieldName,final double[] array){

  style.append(buffer,fieldName,array,null);

  return this;

}

Location: ToStringBuilder.java

Content: 

/** 

 * <p>Append to the  {@code toString} a {@code double}array.</p> <p>A boolean parameter controls the level of detail to show. Setting  {@code true} will output the array in full. Setting{@code false} will output a summary, typically the size ofthe array.</p>

 * @param fieldName  the field name

 * @param array  the array to add to the {@code toString}

 * @param fullDetail  {@code true} for detail, {@code false}for summary info

 * @return this

 */

public ToStringBuilder append(final String fieldName,final double[] array,final boolean fullDetail){

  style.append(buffer,fieldName,array,Boolean.valueOf(fullDetail));

  return this;

}

Location: ToStringBuilder.java

Content: 

/** 

 * <p>Append to the  {@code toString} a {@code float}array.</p>

 * @param fieldName  the field name

 * @param array  the array to add to the {@code toString}

 * @return this

 */

public ToStringBuilder append(final String fieldName,final float[] array){

  style.append(buffer,fieldName,array,null);

  return this;

}

Location: ToStringBuilder.java

Content: 

/** 

 * <p>Append to the  {@code toString} a {@code float}array.</p> <p>A boolean parameter controls the level of detail to show. Setting  {@code true} will output the array in full. Setting{@code false} will output a summary, typically the size ofthe array.</p>

 * @param fieldName  the field name

 * @param array  the array to add to the {@code toString}

 * @param fullDetail  {@code true} for detail, {@code false}for summary info

 * @return this

 */

public ToStringBuilder append(final String fieldName,final float[] array,final boolean fullDetail){

  style.append(buffer,fieldName,array,Boolean.valueOf(fullDetail));

  return this;

}

Location: ToStringBuilder.java

Content: 

/** 

 * <p>Append to the  {@code toString} an {@code int}array.</p>

 * @param fieldName  the field name

 * @param array  the array to add to the {@code toString}

 * @return this

 */

public ToStringBuilder append(final String fieldName,final int[] array){

  style.append(buffer,fieldName,array,null);

  return this;

}

Location: ToStringBuilder.java

Content: 

/** 

 * <p>Append to the  {@code toString} an {@code int}array.</p> <p>A boolean parameter controls the level of detail to show. Setting  {@code true} will output the array in full. Setting{@code false} will output a summary, typically the size ofthe array.</p>

 * @param fieldName  the field name

 * @param array  the array to add to the {@code toString}

 * @param fullDetail  {@code true} for detail, {@code false}for summary info

 * @return this

 */

public ToStringBuilder append(final String fieldName,final int[] array,final boolean fullDetail){

  style.append(buffer,fieldName,array,Boolean.valueOf(fullDetail));

  return this;

}

Location: ToStringBuilder.java

Content: 

/** 

 * <p>Append to the  {@code toString} a {@code long}array.</p>

 * @param fieldName  the field name

 * @param array  the array to add to the {@code toString}

 * @return this

 */

public ToStringBuilder append(final String fieldName,final long[] array){

  style.append(buffer,fieldName,array,null);

  return this;

}

Location: ToStringBuilder.java

Content: 

/** 

 * <p>Append to the  {@code toString} a {@code long}array.</p> <p>A boolean parameter controls the level of detail to show. Setting  {@code true} will output the array in full. Setting{@code false} will output a summary, typically the size ofthe array.</p>

 * @param fieldName  the field name

 * @param array  the array to add to the {@code toString}

 * @param fullDetail  {@code true} for detail, {@code false}for summary info

 * @return this

 */

public ToStringBuilder append(final String fieldName,final long[] array,final boolean fullDetail){

  style.append(buffer,fieldName,array,Boolean.valueOf(fullDetail));

  return this;

}

Location: ToStringBuilder.java

Content: 

/** 

 * <p>Append to the  {@code toString} an {@code Object}array.</p> <p>A boolean parameter controls the level of detail to show. Setting  {@code true} will output the array in full. Setting{@code false} will output a summary, typically the size ofthe array.</p>

 * @param fieldName  the field name

 * @param array  the array to add to the {@code toString}

 * @param fullDetail  {@code true} for detail, {@code false}for summary info

 * @return this

 */

public ToStringBuilder append(final String fieldName,final Object[] array,final boolean fullDetail){

  style.append(buffer,fieldName,array,Boolean.valueOf(fullDetail));

  return this;

}

Location: ToStringBuilder.java

Content: 

/** 

 * <p>Append to the  {@code toString} a {@code short}array.</p>

 * @param fieldName  the field name

 * @param array  the array to add to the {@code toString}

 * @return this

 */

public ToStringBuilder append(final String fieldName,final short[] array){

  style.append(buffer,fieldName,array,null);

  return this;

}

Location: ToStringBuilder.java

Content: 

/** 

 * <p>Append to the  {@code toString} a {@code short}array.</p> <p>A boolean parameter controls the level of detail to show. Setting  {@code true} will output the array in full. Setting{@code false} will output a summary, typically the size ofthe array.

 * @param fieldName  the field name

 * @param array  the array to add to the {@code toString}

 * @param fullDetail  {@code true} for detail, {@code false}for summary info

 * @return this

 */

public ToStringBuilder append(final String fieldName,final short[] array,final boolean fullDetail){

  style.append(buffer,fieldName,array,Boolean.valueOf(fullDetail));

  return this;

}

Location: ToStringBuilder.java

Content: 

/** 

 * <p>Gets the default  {@code ToStringStyle} to use.</p><p>This method gets a singleton default value, typically for the whole JVM. Changing this default should generally only be done during application startup. It is recommended to pass a  {@code ToStringStyle} to the constructor insteadof using this global default.</p> <p>This method can be used from multiple threads. Internally, a  {@code volatile} variable is used to provide the guaranteethat the latest value set using  {@link #setDefaultStyle} is the value returned.It is strongly recommended that the default style is only changed during application startup.</p> <p>One reason for changing the default could be to have a verbose style during development and a compact style in production.</p>

 * @return the default {@code ToStringStyle}, never null

 */

public static ToStringStyle getDefaultStyle(){

  return defaultStyle;

}

Location: ToStringBuilder.java

Content: 

/** 

 * <p>Gets the  {@code StringBuffer} being populated.</p>

 * @return the {@code StringBuffer} being populated

 */

public StringBuffer getStringBuffer(){

  return buffer;

}

Location: ToStringBuilder.java

Content: 

/** 

 * <p>Gets the  {@code ToStringStyle} being used.</p>

 * @return the {@code ToStringStyle} being used

 * @since 2.0

 */

public ToStringStyle getStyle(){

  return style;

}

Location: ToStringBuilder.java

Content: 

/** 

 * <p>Uses  {@code ReflectionToStringBuilder} to generate a{@code toString} for the specified object.</p>

 * @param object  the Object to be output

 * @return the String result

 * @see ReflectionToStringBuilder#toString(Object)

 */

public static String reflectionToString(final Object object){

  return ReflectionToStringBuilder.toString(object);

}

Location: ToStringBuilder.java

Content: 

/** 

 * <p>Uses  {@code ReflectionToStringBuilder} to generate a{@code toString} for the specified object.</p>

 * @param object  the Object to be output

 * @param style  the style of the {@code toString} to create, may be {@code null}

 * @return the String result

 * @see ReflectionToStringBuilder#toString(Object,ToStringStyle)

 */

public static String reflectionToString(final Object object,final ToStringStyle style){

  return ReflectionToStringBuilder.toString(object,style);

}

Location: ToStringBuilder.java

Content: 

/** 

 * <p>Uses  {@code ReflectionToStringBuilder} to generate a{@code toString} for the specified object.</p>

 * @param object  the Object to be output

 * @param style  the style of the {@code toString} to create, may be {@code null}

 * @param outputTransients  whether to include transient fields

 * @return the String result

 * @see ReflectionToStringBuilder#toString(Object,ToStringStyle,boolean)

 */

public static String reflectionToString(final Object object,final ToStringStyle style,final boolean outputTransients){

  return ReflectionToStringBuilder.toString(object,style,outputTransients,false,null);

}

Location: ToStringBuilder.java

Content: 

/** 

 * <p>Uses  {@code ReflectionToStringBuilder} to generate a{@code toString} for the specified object.</p>

 * @param < T > the type of the object

 * @param object  the Object to be output

 * @param style  the style of the {@code toString} to create, may be {@code null}

 * @param outputTransients  whether to include transient fields

 * @param reflectUpToClass  the superclass to reflect up to (inclusive), may be {@code null}

 * @return the String result

 * @see ReflectionToStringBuilder#toString(Object,ToStringStyle,boolean,boolean,Class)

 * @since 2.0

 */

public static <T>String reflectionToString(final T object,final ToStringStyle style,final boolean outputTransients,final Class<? super T> reflectUpToClass){

  return ReflectionToStringBuilder.toString(object,style,outputTransients,false,reflectUpToClass);

}

Location: ToStringBuilder.java

Content: 

/** 

 * <p>Sets the default  {@code ToStringStyle} to use.</p><p>This method sets a singleton default value, typically for the whole JVM. Changing this default should generally only be done during application startup. It is recommended to pass a  {@code ToStringStyle} to the constructor insteadof changing this global default.</p> <p>This method is not intended for use from multiple threads. Internally, a  {@code volatile} variable is used to provide the guaranteethat the latest value set is the value returned from  {@link #getDefaultStyle}.</p>

 * @param style  the default {@code ToStringStyle}

 * @throws IllegalArgumentException if the style is {@code null}

 */

public static void setDefaultStyle(final ToStringStyle style){

  defaultStyle=Validate.notNull(style,"style");

}

Location: ToStringBuilder.java

Content: 

/** 

 * <p>Constructs a builder for the specified object using the default output style.</p> <p>This default style is obtained from  {@link #getDefaultStyle()}.</p>

 * @param object  the Object to build a {@code toString} for, not recommended to be null

 */

public ToStringBuilder(final Object object){

  this(object,null,null);

}

Location: ToStringBuilder.java

Content: 

/** 

 * <p>Constructs a builder for the specified object using the defined output style.</p> <p>If the style is  {@code null}, the default style is used.</p>

 * @param object  the Object to build a {@code toString} for, not recommended to be null

 * @param style  the style of the {@code toString} to create, null uses the default style

 */

public ToStringBuilder(final Object object,final ToStringStyle style){

  this(object,style,null);

}

Location: ToStringBuilder.java

Content: 

/** 

 * <p>Constructs a builder for the specified object.</p> <p>If the style is  {@code null}, the default style is used.</p> <p>If the buffer is  {@code null}, a new one is created.</p>

 * @param object  the Object to build a {@code toString} for, not recommended to be null

 * @param style  the style of the {@code toString} to create, null uses the default style

 * @param buffer  the {@code StringBuffer} to populate, may be null

 */

public ToStringBuilder(final Object object,ToStringStyle style,StringBuffer buffer){

  if (style == null) {

    style=getDefaultStyle();

  }

  if (buffer == null) {

    buffer=new StringBuffer(512);

  }

  this.buffer=buffer;

  this.style=style;

  this.object=object;

  style.appendStart(buffer,object);

}

