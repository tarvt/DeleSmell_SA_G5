Location: WordUtilsTest.java

Content: 

@Test public void testCapitalizeFullyWithDelimiters_String(){

  assertNull(WordUtils.capitalizeFully(null,null));

  assertEquals("",WordUtils.capitalizeFully(""));

  assertEquals("  ",WordUtils.capitalizeFully("  "));

  char[] chars={'-','+',' ','@'};

  assertEquals("I",WordUtils.capitalizeFully("I",chars));

  assertEquals("I",WordUtils.capitalizeFully("i",chars));

  assertEquals("I-Am Here+123",WordUtils.capitalizeFully("i-am here+123",chars));

  assertEquals("I Am+Here-123",WordUtils.capitalizeFully("I Am+Here-123",chars));

  assertEquals("I+Am-Here 123",WordUtils.capitalizeFully("i+am-HERE 123",chars));

  assertEquals("I-Am Here+123",WordUtils.capitalizeFully("I-AM HERE+123",chars));

  chars=new char[]{'.'};

  assertEquals("I am.Fine",WordUtils.capitalizeFully("i aM.fine",chars));

  assertEquals("I Am.fine",WordUtils.capitalizeFully("i am.fine",null));

}

Location: WordUtilsTest.java

Content: 

@Test public void testCapitalizeFully_String(){

  assertNull(WordUtils.capitalizeFully(null));

  assertEquals("",WordUtils.capitalizeFully(""));

  assertEquals("  ",WordUtils.capitalizeFully("  "));

  assertEquals("I",WordUtils.capitalizeFully("I"));

  assertEquals("I",WordUtils.capitalizeFully("i"));

  assertEquals("I Am Here 123",WordUtils.capitalizeFully("i am here 123"));

  assertEquals("I Am Here 123",WordUtils.capitalizeFully("I Am Here 123"));

  assertEquals("I Am Here 123",WordUtils.capitalizeFully("i am HERE 123"));

  assertEquals("I Am Here 123",WordUtils.capitalizeFully("I AM HERE 123"));

}

Location: WordUtilsTest.java

Content: 

@Test public void testCapitalizeWithDelimiters_String(){

  assertNull(WordUtils.capitalize(null,null));

  assertEquals("",WordUtils.capitalize(""));

  assertEquals("  ",WordUtils.capitalize("  "));

  char[] chars={'-','+',' ','@'};

  assertEquals("I",WordUtils.capitalize("I",chars));

  assertEquals("I",WordUtils.capitalize("i",chars));

  assertEquals("I-Am Here+123",WordUtils.capitalize("i-am here+123",chars));

  assertEquals("I Am+Here-123",WordUtils.capitalize("I Am+Here-123",chars));

  assertEquals("I+Am-HERE 123",WordUtils.capitalize("i+am-HERE 123",chars));

  assertEquals("I-AM HERE+123",WordUtils.capitalize("I-AM HERE+123",chars));

  chars=new char[]{'.'};

  assertEquals("I aM.Fine",WordUtils.capitalize("i aM.fine",chars));

  assertEquals("I Am.fine",WordUtils.capitalize("i am.fine",null));

}

Location: WordUtilsTest.java

Content: 

@Test public void testCapitalize_String(){

  assertNull(WordUtils.capitalize(null));

  assertEquals("",WordUtils.capitalize(""));

  assertEquals("  ",WordUtils.capitalize("  "));

  assertEquals("I",WordUtils.capitalize("I"));

  assertEquals("I",WordUtils.capitalize("i"));

  assertEquals("I Am Here 123",WordUtils.capitalize("i am here 123"));

  assertEquals("I Am Here 123",WordUtils.capitalize("I Am Here 123"));

  assertEquals("I Am HERE 123",WordUtils.capitalize("i am HERE 123"));

  assertEquals("I AM HERE 123",WordUtils.capitalize("I AM HERE 123"));

}

Location: WordUtilsTest.java

Content: 

@Test public void testContainsAllWords_StringString(){

  assertFalse(WordUtils.containsAllWords(null,(String)null));

  assertFalse(WordUtils.containsAllWords(null,""));

  assertFalse(WordUtils.containsAllWords(null,"ab"));

  assertFalse(WordUtils.containsAllWords("",(String)null));

  assertFalse(WordUtils.containsAllWords("",""));

  assertFalse(WordUtils.containsAllWords("","ab"));

  assertFalse(WordUtils.containsAllWords("foo",(String)null));

  assertFalse(WordUtils.containsAllWords("bar",""));

  assertFalse(WordUtils.containsAllWords("zzabyycdxx","by"));

  assertTrue(WordUtils.containsAllWords("lorem ipsum dolor sit amet","ipsum","lorem","dolor"));

  assertFalse(WordUtils.containsAllWords("lorem ipsum dolor sit amet","ipsum",null,"lorem","dolor"));

  assertFalse(WordUtils.containsAllWords("lorem ipsum null dolor sit amet","ipsum",null,"lorem","dolor"));

  assertFalse(WordUtils.containsAllWords("ab","b"));

  assertFalse(WordUtils.containsAllWords("ab","z"));

}

Location: WordUtilsTest.java

Content: 

@Test public void testInitials_String(){

  assertNull(WordUtils.initials(null));

  assertEquals("",WordUtils.initials(""));

  assertEquals("",WordUtils.initials("  "));

  assertEquals("I",WordUtils.initials("I"));

  assertEquals("i",WordUtils.initials("i"));

  assertEquals("BJL",WordUtils.initials("Ben John Lee"));

  assertEquals("BJL",WordUtils.initials("   Ben \n   John\tLee\t"));

  assertEquals("BJ",WordUtils.initials("Ben J.Lee"));

  assertEquals("BJ.L",WordUtils.initials(" Ben   John  . Lee"));

  assertEquals("iah1",WordUtils.initials("i am here 123"));

}

Location: WordUtilsTest.java

Content: 

@Test public void testInitials_String_charArray(){

  char[] array=null;

  assertNull(WordUtils.initials(null,array));

  assertEquals("",WordUtils.initials("",array));

  assertEquals("",WordUtils.initials("  ",array));

  assertEquals("I",WordUtils.initials("I",array));

  assertEquals("i",WordUtils.initials("i",array));

  assertEquals("S",WordUtils.initials("SJC",array));

  assertEquals("BJL",WordUtils.initials("Ben John Lee",array));

  assertEquals("BJL",WordUtils.initials("   Ben \n   John\tLee\t",array));

  assertEquals("BJ",WordUtils.initials("Ben J.Lee",array));

  assertEquals("BJ.L",WordUtils.initials(" Ben   John  . Lee",array));

  assertEquals("KO",WordUtils.initials("Kay O'Murphy",array));

  assertEquals("iah1",WordUtils.initials("i am here 123",array));

  array=new char[0];

  assertNull(WordUtils.initials(null,array));

  assertEquals("",WordUtils.initials("",array));

  assertEquals("",WordUtils.initials("  ",array));

  assertEquals("",WordUtils.initials("I",array));

  assertEquals("",WordUtils.initials("i",array));

  assertEquals("",WordUtils.initials("SJC",array));

  assertEquals("",WordUtils.initials("Ben John Lee",array));

  assertEquals("",WordUtils.initials("   Ben \n   John\tLee\t",array));

  assertEquals("",WordUtils.initials("Ben J.Lee",array));

  assertEquals("",WordUtils.initials(" Ben   John  . Lee",array));

  assertEquals("",WordUtils.initials("Kay O'Murphy",array));

  assertEquals("",WordUtils.initials("i am here 123",array));

  array=" ".toCharArray();

  assertNull(WordUtils.initials(null,array));

  assertEquals("",WordUtils.initials("",array));

  assertEquals("",WordUtils.initials("  ",array));

  assertEquals("I",WordUtils.initials("I",array));

  assertEquals("i",WordUtils.initials("i",array));

  assertEquals("S",WordUtils.initials("SJC",array));

  assertEquals("BJL",WordUtils.initials("Ben John Lee",array));

  assertEquals("BJ",WordUtils.initials("Ben J.Lee",array));

  assertEquals("B\nJ",WordUtils.initials("   Ben \n   John\tLee\t",array));

  assertEquals("BJ.L",WordUtils.initials(" Ben   John  . Lee",array));

  assertEquals("KO",WordUtils.initials("Kay O'Murphy",array));

  assertEquals("iah1",WordUtils.initials("i am here 123",array));

  array=" .".toCharArray();

  assertNull(WordUtils.initials(null,array));

  assertEquals("",WordUtils.initials("",array));

  assertEquals("",WordUtils.initials("  ",array));

  assertEquals("I",WordUtils.initials("I",array));

  assertEquals("i",WordUtils.initials("i",array));

  assertEquals("S",WordUtils.initials("SJC",array));

  assertEquals("BJL",WordUtils.initials("Ben John Lee",array));

  assertEquals("BJL",WordUtils.initials("Ben J.Lee",array));

  assertEquals("BJL",WordUtils.initials(" Ben   John  . Lee",array));

  assertEquals("KO",WordUtils.initials("Kay O'Murphy",array));

  assertEquals("iah1",WordUtils.initials("i am here 123",array));

  array=" .'".toCharArray();

  assertNull(WordUtils.initials(null,array));

  assertEquals("",WordUtils.initials("",array));

  assertEquals("",WordUtils.initials("  ",array));

  assertEquals("I",WordUtils.initials("I",array));

  assertEquals("i",WordUtils.initials("i",array));

  assertEquals("S",WordUtils.initials("SJC",array));

  assertEquals("BJL",WordUtils.initials("Ben John Lee",array));

  assertEquals("BJL",WordUtils.initials("Ben J.Lee",array));

  assertEquals("BJL",WordUtils.initials(" Ben   John  . Lee",array));

  assertEquals("KOM",WordUtils.initials("Kay O'Murphy",array));

  assertEquals("iah1",WordUtils.initials("i am here 123",array));

  array="SIJo1".toCharArray();

  assertNull(WordUtils.initials(null,array));

  assertEquals("",WordUtils.initials("",array));

  assertEquals(" ",WordUtils.initials("  ",array));

  assertEquals("",WordUtils.initials("I",array));

  assertEquals("i",WordUtils.initials("i",array));

  assertEquals("C",WordUtils.initials("SJC",array));

  assertEquals("Bh",WordUtils.initials("Ben John Lee",array));

  assertEquals("B.",WordUtils.initials("Ben J.Lee",array));

  assertEquals(" h",WordUtils.initials(" Ben   John  . Lee",array));

  assertEquals("K",WordUtils.initials("Kay O'Murphy",array));

  assertEquals("i2",WordUtils.initials("i am here 123",array));

}

Location: WordUtilsTest.java

Content: 

@Test public void testLANG1292(){

  WordUtils.wrap("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa " + "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa " + "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",70);

}

Location: WordUtilsTest.java

Content: 

@Test public void testLANG1397(){

  WordUtils.wrap("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa " + "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa " + "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",Integer.MAX_VALUE);

}

Location: WordUtilsTest.java

Content: 

@Test public void testSwapCase_String(){

  assertNull(WordUtils.swapCase(null));

  assertEquals("",WordUtils.swapCase(""));

  assertEquals("  ",WordUtils.swapCase("  "));

  assertEquals("i",WordUtils.swapCase("I"));

  assertEquals("I",WordUtils.swapCase("i"));

  assertEquals("I AM HERE 123",WordUtils.swapCase("i am here 123"));

  assertEquals("i aM hERE 123",WordUtils.swapCase("I Am Here 123"));

  assertEquals("I AM here 123",WordUtils.swapCase("i am HERE 123"));

  assertEquals("i am here 123",WordUtils.swapCase("I AM HERE 123"));

  final String test="This String contains a TitleCase character: \u01C8";

  final String expect="tHIS sTRING CONTAINS A tITLEcASE CHARACTER: \u01C9";

  assertEquals(expect,WordUtils.swapCase(test));

}

Location: WordUtilsTest.java

Content: 

@Test public void testUncapitalizeWithDelimiters_String(){

  assertNull(WordUtils.uncapitalize(null,null));

  assertEquals("",WordUtils.uncapitalize(""));

  assertEquals("  ",WordUtils.uncapitalize("  "));

  char[] chars={'-','+',' ','@'};

  assertEquals("i",WordUtils.uncapitalize("I",chars));

  assertEquals("i",WordUtils.uncapitalize("i",chars));

  assertEquals("i am-here+123",WordUtils.uncapitalize("i am-here+123",chars));

  assertEquals("i+am here-123",WordUtils.uncapitalize("I+Am Here-123",chars));

  assertEquals("i-am+hERE 123",WordUtils.uncapitalize("i-am+HERE 123",chars));

  assertEquals("i aM-hERE+123",WordUtils.uncapitalize("I AM-HERE+123",chars));

  chars=new char[]{'.'};

  assertEquals("i AM.fINE",WordUtils.uncapitalize("I AM.FINE",chars));

  assertEquals("i aM.FINE",WordUtils.uncapitalize("I AM.FINE",null));

}

Location: WordUtilsTest.java

Content: 

@Test public void testUncapitalize_String(){

  assertNull(WordUtils.uncapitalize(null));

  assertEquals("",WordUtils.uncapitalize(""));

  assertEquals("  ",WordUtils.uncapitalize("  "));

  assertEquals("i",WordUtils.uncapitalize("I"));

  assertEquals("i",WordUtils.uncapitalize("i"));

  assertEquals("i am here 123",WordUtils.uncapitalize("i am here 123"));

  assertEquals("i am here 123",WordUtils.uncapitalize("I Am Here 123"));

  assertEquals("i am hERE 123",WordUtils.uncapitalize("i am HERE 123"));

  assertEquals("i aM hERE 123",WordUtils.uncapitalize("I AM HERE 123"));

}

Location: WordUtilsTest.java

Content: 

@Test public void testWrap_StringInt(){

  assertNull(WordUtils.wrap(null,20));

  assertNull(WordUtils.wrap(null,-1));

  assertEquals("",WordUtils.wrap("",20));

  assertEquals("",WordUtils.wrap("",-1));

  final String systemNewLine=System.lineSeparator();

  String input="Here is one line of text that is going to be wrapped after 20 columns.";

  String expected="Here is one line of" + systemNewLine + "text that is going"+ systemNewLine+ "to be wrapped after"+ systemNewLine+ "20 columns.";

  assertEquals(expected,WordUtils.wrap(input,20));

  input="Click here to jump to the commons website - https://commons.apache.org";

  expected="Click here to jump" + systemNewLine + "to the commons"+ systemNewLine+ "website -"+ systemNewLine+ "https://commons.apache.org";

  assertEquals(expected,WordUtils.wrap(input,20));

  input="Click here, https://commons.apache.org, to jump to the commons website";

  expected="Click here," + systemNewLine + "https://commons.apache.org,"+ systemNewLine+ "to jump to the"+ systemNewLine+ "commons website";

  assertEquals(expected,WordUtils.wrap(input,20));

  input="word1             word2                        word3";

  expected="word1  " + systemNewLine + "word2  "+ systemNewLine+ "word3";

  assertEquals(expected,WordUtils.wrap(input,7));

}

Location: WordUtilsTest.java

Content: 

@Test public void testWrap_StringIntStringBoolean(){

  assertNull(WordUtils.wrap(null,20,"\n",false));

  assertNull(WordUtils.wrap(null,20,"\n",true));

  assertNull(WordUtils.wrap(null,20,null,true));

  assertNull(WordUtils.wrap(null,20,null,false));

  assertNull(WordUtils.wrap(null,-1,null,true));

  assertNull(WordUtils.wrap(null,-1,null,false));

  assertEquals("",WordUtils.wrap("",20,"\n",false));

  assertEquals("",WordUtils.wrap("",20,"\n",true));

  assertEquals("",WordUtils.wrap("",20,null,false));

  assertEquals("",WordUtils.wrap("",20,null,true));

  assertEquals("",WordUtils.wrap("",-1,null,false));

  assertEquals("",WordUtils.wrap("",-1,null,true));

  String input="Here is one line of text that is going to be wrapped after 20 columns.";

  String expected="Here is one line of\ntext that is going\nto be wrapped after\n20 columns.";

  assertEquals(expected,WordUtils.wrap(input,20,"\n",false));

  assertEquals(expected,WordUtils.wrap(input,20,"\n",true));

  input="Here is one line of text that is going to be wrapped after 20 columns.";

  expected="Here is one line of<br />text that is going<br />to be wrapped after<br />20 columns.";

  assertEquals(expected,WordUtils.wrap(input,20,"<br />",false));

  assertEquals(expected,WordUtils.wrap(input,20,"<br />",true));

  input="Here is one line";

  expected="Here\nis one\nline";

  assertEquals(expected,WordUtils.wrap(input,6,"\n",false));

  expected="Here\nis\none\nline";

  assertEquals(expected,WordUtils.wrap(input,2,"\n",false));

  assertEquals(expected,WordUtils.wrap(input,-1,"\n",false));

  final String systemNewLine=System.lineSeparator();

  input="Here is one line of text that is going to be wrapped after 20 columns.";

  expected="Here is one line of" + systemNewLine + "text that is going"+ systemNewLine+ "to be wrapped after"+ systemNewLine+ "20 columns.";

  assertEquals(expected,WordUtils.wrap(input,20,null,false));

  assertEquals(expected,WordUtils.wrap(input,20,null,true));

  input=" Here:  is  one  line  of  text  that  is  going  to  be  wrapped  after  20  columns.";

  expected="Here:  is  one  line\nof  text  that  is \ngoing  to  be \nwrapped  after  20 \ncolumns.";

  assertEquals(expected,WordUtils.wrap(input,20,"\n",false));

  assertEquals(expected,WordUtils.wrap(input,20,"\n",true));

  input="Here is\tone line of text that is going to be wrapped after 20 columns.";

  expected="Here is\tone line of\ntext that is going\nto be wrapped after\n20 columns.";

  assertEquals(expected,WordUtils.wrap(input,20,"\n",false));

  assertEquals(expected,WordUtils.wrap(input,20,"\n",true));

  input="Here is one line of\ttext that is going to be wrapped after 20 columns.";

  expected="Here is one line\nof\ttext that is\ngoing to be wrapped\nafter 20 columns.";

  assertEquals(expected,WordUtils.wrap(input,20,"\n",false));

  assertEquals(expected,WordUtils.wrap(input,20,"\n",true));

  input="Click here to jump to the commons website - https://commons.apache.org";

  expected="Click here to jump\nto the commons\nwebsite -\nhttps://commons.apache.org";

  assertEquals(expected,WordUtils.wrap(input,20,"\n",false));

  expected="Click here to jump\nto the commons\nwebsite -\nhttps://commons.apac\nhe.org";

  assertEquals(expected,WordUtils.wrap(input,20,"\n",true));

  input="Click here, https://commons.apache.org, to jump to the commons website";

  expected="Click here,\nhttps://commons.apache.org,\nto jump to the\ncommons website";

  assertEquals(expected,WordUtils.wrap(input,20,"\n",false));

  expected="Click here,\nhttps://commons.apac\nhe.org, to jump to\nthe commons website";

  assertEquals(expected,WordUtils.wrap(input,20,"\n",true));

}

Location: WordUtilsTest.java

Content: 

@Test public void testWrap_StringIntStringBooleanString(){

  String input="flammable/inflammable";

  String expected="flammable/inflammable";

  assertEquals(expected,WordUtils.wrap(input,30,"\n",false,"/"));

  expected="flammable\ninflammable";

  assertEquals(expected,WordUtils.wrap(input,2,"\n",false,"/"));

  expected="flammable\ninflammab\nle";

  assertEquals(expected,WordUtils.wrap(input,9,"\n",true,"/"));

  expected="flammable\ninflammable";

  assertEquals(expected,WordUtils.wrap(input,15,"\n",true,"/"));

  input="flammableinflammable";

  expected="flammableinflam\nmable";

  assertEquals(expected,WordUtils.wrap(input,15,"\n",true,"/"));

}

