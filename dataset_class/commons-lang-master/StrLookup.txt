Location: StrLookup.java

Content: 

/** 

 * Looks up a String key to a String value. <p> The internal implementation may use any mechanism to return the value. The simplest implementation is to use a Map. However, virtually any implementation is possible. <p> For example, it would be possible to implement a lookup that used the key as a primary key, and looked up the value on demand from the database Or, a numeric based implementation could be created that treats the key as an integer, increments the value and return the result as a string - converting 1 to 2, 15 to 16 etc. <p> The  {@link #lookup(String)} method always returns a String, regardless ofthe underlying data, by converting it as necessary. For example: <pre> Map&lt;String, Object&gt; map = new HashMap&lt;String, Object&gt;(); map.put("number", Integer.valueOf(2)); assertEquals("2", StrLookup.mapLookup(map).lookup("number")); </pre>

 * @param key  the key to be looked up, may be null

 * @return the matching value, null if no match

 */

public abstract String lookup(String key);

Location: StrLookup.java

Content: 

/** 

 * Returns a lookup which looks up values using a map. <p> If the map is null, then null will be returned from every lookup. The map result object is converted to a string using toString().

 * @param < V > the type of the values supported by the lookup

 * @param map  the map of keys to values, may be null

 * @return a lookup using the map, not null

 */

public static <V>StrLookup<V> mapLookup(final Map<String,V> map){

  return new MapStrLookup<>(map);

}

Location: StrLookup.java

Content: 

/** 

 * Returns a lookup which always returns null.

 * @return a lookup that always returns null, not null

 */

public static StrLookup<?> noneLookup(){

  return NONE_LOOKUP;

}

Location: StrLookup.java

Content: 

/** 

 * Constructor.

 */

protected StrLookup(){

}

Location: StrLookup.java

Content: 

/** 

 * Returns a new lookup which uses a copy of the current {@link System#getProperties() System properties}. <p> If a security manager blocked access to system properties, then null will be returned from every lookup. <p> If a null key is used, this lookup will throw a NullPointerException.

 * @return a lookup using system properties, not null

 */

public static StrLookup<String> systemPropertiesLookup(){

  return SYSTEM_PROPERTIES_LOOKUP;

}

