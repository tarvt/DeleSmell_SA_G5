Location: BasicThreadFactory.java

Content: 

/** 

 * Creates a new instance of  {@code ThreadFactoryImpl} and configures itfrom the specified  {@code Builder} object.

 * @param builder the {@code Builder} object

 */

private BasicThreadFactory(final Builder builder){

  if (builder.wrappedFactory == null) {

    wrappedFactory=Executors.defaultThreadFactory();

  }

 else {

    wrappedFactory=builder.wrappedFactory;

  }

  namingPattern=builder.namingPattern;

  priority=builder.priority;

  daemon=builder.daemon;

  uncaughtExceptionHandler=builder.exceptionHandler;

  threadCounter=new AtomicLong();

}

Location: BasicThreadFactory.java

Content: 

/** 

 * Returns the daemon flag. This flag determines whether newly created threads should be daemon threads. If <b>true</b>, this factory object calls  {@code setDaemon(true)} on the newly created threads. Result can be<b>null</b> if no daemon flag was provided at creation time.

 * @return the daemon flag

 */

public final Boolean getDaemonFlag(){

  return daemon;

}

Location: BasicThreadFactory.java

Content: 

/** 

 * Returns the naming pattern for naming newly created threads. Result can be <b>null</b> if no naming pattern was provided.

 * @return the naming pattern

 */

public final String getNamingPattern(){

  return namingPattern;

}

Location: BasicThreadFactory.java

Content: 

/** 

 * Returns the priority of the threads created by this factory. Result can be <b>null</b> if no priority was specified.

 * @return the priority for newly created threads

 */

public final Integer getPriority(){

  return priority;

}

Location: BasicThreadFactory.java

Content: 

/** 

 * Returns the number of threads this factory has already created. This class maintains an internal counter that is incremented each time the {@link #newThread(Runnable)} method is invoked.

 * @return the number of threads created by this factory

 */

public long getThreadCount(){

  return threadCounter.get();

}

Location: BasicThreadFactory.java

Content: 

/** 

 * Returns the  {@code UncaughtExceptionHandler} for the threads created bythis factory. Result can be <b>null</b> if no handler was provided.

 * @return the {@code UncaughtExceptionHandler}

 */

public final Thread.UncaughtExceptionHandler getUncaughtExceptionHandler(){

  return uncaughtExceptionHandler;

}

Location: BasicThreadFactory.java

Content: 

/** 

 * Returns the wrapped  {@code ThreadFactory}. This factory is used for actually creating threads. This method never returns <b>null</b>. If no {@code ThreadFactory} was passed when this object was created, a defaultthread factory is returned.

 * @return the wrapped {@code ThreadFactory}

 */

public final ThreadFactory getWrappedFactory(){

  return wrappedFactory;

}

Location: BasicThreadFactory.java

Content: 

/** 

 * Initializes the specified thread. This method is called by {@link #newThread(Runnable)} after a new thread has been obtained fromthe wrapped thread factory. It initializes the thread according to the options set for this factory.

 * @param thread the thread to be initialized

 */

private void initializeThread(final Thread thread){

  if (getNamingPattern() != null) {

    final Long count=Long.valueOf(threadCounter.incrementAndGet());

    thread.setName(String.format(getNamingPattern(),count));

  }

  if (getUncaughtExceptionHandler() != null) {

    thread.setUncaughtExceptionHandler(getUncaughtExceptionHandler());

  }

  if (getPriority() != null) {

    thread.setPriority(getPriority().intValue());

  }

  if (getDaemonFlag() != null) {

    thread.setDaemon(getDaemonFlag().booleanValue());

  }

}

Location: BasicThreadFactory.java

Content: 

/** 

 * Creates a new thread. This implementation delegates to the wrapped factory for creating the thread. Then, on the newly created thread the corresponding configuration options are set.

 * @param runnable the {@code Runnable} to be executed by the new thread

 * @return the newly created thread

 */

@Override public Thread newThread(final Runnable runnable){

  final Thread thread=getWrappedFactory().newThread(runnable);

  initializeThread(thread);

  return thread;

}

