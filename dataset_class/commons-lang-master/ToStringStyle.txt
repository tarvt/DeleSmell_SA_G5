Location: ToStringStyle.java

Content: 

/** 

 * <p>Append to the  {@code toString} the class name.</p>

 * @param buffer  the {@code StringBuffer} to populate

 * @param object  the {@code Object} whose name to output

 */

protected void appendClassName(final StringBuffer buffer,final Object object){

  if (useClassName && object != null) {

    register(object);

    if (useShortClassName) {

      buffer.append(getShortClassName(object.getClass()));

    }

 else {

      buffer.append(object.getClass().getName());

    }

  }

}

Location: ToStringStyle.java

Content: 

/** 

 * <p>Append to the  {@code toString} the content end.</p>

 * @param buffer  the {@code StringBuffer} to populate

 */

protected void appendContentEnd(final StringBuffer buffer){

  buffer.append(contentEnd);

}

Location: ToStringStyle.java

Content: 

/** 

 * <p>Append to the  {@code toString} the content start.</p>

 * @param buffer  the {@code StringBuffer} to populate

 */

protected void appendContentStart(final StringBuffer buffer){

  buffer.append(contentStart);

}

Location: ToStringStyle.java

Content: 

/** 

 * <p>Append to the  {@code toString} an {@code Object}value that has been detected to participate in a cycle. This implementation will print the standard string value of the value.</p>

 * @param buffer  the {@code StringBuffer} to populate

 * @param fieldName  the field name, typically not used as already appended

 * @param value  the value to add to the {@code toString}, not  {@code null}

 * @since 2.2

 */

protected void appendCyclicObject(final StringBuffer buffer,final String fieldName,final Object value){

  ObjectUtils.identityToString(buffer,value);

}

Location: ToStringStyle.java

Content: 

/** 

 * <p>Append to the  {@code toString} the detail of an{@code Object} array item.</p>

 * @param buffer  the {@code StringBuffer} to populate

 * @param fieldName  the field name, typically not used as already appended

 * @param i the array item index to add

 * @param item the array item to add

 * @since 3.11

 */

protected void appendDetail(final StringBuffer buffer,final String fieldName,final int i,final Object item){

  if (i > 0) {

    buffer.append(arraySeparator);

  }

  if (item == null) {

    appendNullText(buffer,fieldName);

  }

 else {

    appendInternal(buffer,fieldName,item,arrayContentDetail);

  }

}

Location: ToStringStyle.java

Content: 

/** 

 * <p>Append to the  {@code toString} a {@code Map}.</p>

 * @param buffer  the {@code StringBuffer} to populate

 * @param fieldName  the field name, typically not used as already appended

 * @param map  the {@code Map} to add to the {@code toString}, not  {@code null}

 */

protected void appendDetail(final StringBuffer buffer,final String fieldName,final Map<?,?> map){

  buffer.append(map);

}

Location: ToStringStyle.java

Content: 

/** 

 * <p>Append to the  {@code toString} the end of data indicator.</p>

 * @param buffer  the {@code StringBuffer} to populate

 * @param object  the {@code Object} to build a{@code toString} for.

 */

public void appendEnd(final StringBuffer buffer,final Object object){

  if (!this.fieldSeparatorAtEnd) {

    removeLastFieldSeparator(buffer);

  }

  appendContentEnd(buffer);

  unregister(object);

}

Location: ToStringStyle.java

Content: 

/** 

 * <p>Append to the  {@code toString} the field end.</p>

 * @param buffer  the {@code StringBuffer} to populate

 * @param fieldName  the field name, typically not used as already appended

 */

protected void appendFieldEnd(final StringBuffer buffer,final String fieldName){

  appendFieldSeparator(buffer);

}

Location: ToStringStyle.java

Content: 

/** 

 * <p>Append to the  {@code toString} the field separator.</p>

 * @param buffer  the {@code StringBuffer} to populate

 */

protected void appendFieldSeparator(final StringBuffer buffer){

  buffer.append(fieldSeparator);

}

Location: ToStringStyle.java

Content: 

/** 

 * <p>Append to the  {@code toString} the field start.</p>

 * @param buffer  the {@code StringBuffer} to populate

 * @param fieldName  the field name

 */

protected void appendFieldStart(final StringBuffer buffer,final String fieldName){

  if (useFieldNames && fieldName != null) {

    buffer.append(fieldName);

    buffer.append(fieldNameValueSeparator);

  }

}

Location: ToStringStyle.java

Content: 

/** 

 * <p>Append the  {@link System#identityHashCode(java.lang.Object)}.</p>

 * @param buffer  the {@code StringBuffer} to populate

 * @param object  the {@code Object} whose id to output

 */

protected void appendIdentityHashCode(final StringBuffer buffer,final Object object){

  if (this.isUseIdentityHashCode() && object != null) {

    register(object);

    buffer.append('@');

    buffer.append(ObjectUtils.identityHashCodeHex(object));

  }

}

Location: ToStringStyle.java

Content: 

/** 

 * <p>Append to the  {@code toString} an {@code Object}, correctly interpreting its type.</p> <p>This method performs the main lookup by Class type to correctly route arrays,  {@code Collections},  {@code Maps} and{@code Objects} to the appropriate method.</p><p>Either detail or summary views can be specified.</p> <p>If a cycle is detected, an object will be appended with the {@code Object.toString()} format.</p>

 * @param buffer  the {@code StringBuffer} to populate

 * @param fieldName  the field name, typically not used as already appended

 * @param value  the value to add to the {@code toString}, not  {@code null}

 * @param detail  output detail or not

 */

protected void appendInternal(final StringBuffer buffer,final String fieldName,final Object value,final boolean detail){

  if (isRegistered(value) && !(value instanceof Number || value instanceof Boolean || value instanceof Character)) {

    appendCyclicObject(buffer,fieldName,value);

    return;

  }

  register(value);

  try {

    if (value instanceof Collection<?>) {

      if (detail) {

        appendDetail(buffer,fieldName,(Collection<?>)value);

      }

 else {

        appendSummarySize(buffer,fieldName,((Collection<?>)value).size());

      }

    }

 else     if (value instanceof Map<?,?>) {

      if (detail) {

        appendDetail(buffer,fieldName,(Map<?,?>)value);

      }

 else {

        appendSummarySize(buffer,fieldName,((Map<?,?>)value).size());

      }

    }

 else     if (value instanceof long[]) {

      if (detail) {

        appendDetail(buffer,fieldName,(long[])value);

      }

 else {

        appendSummary(buffer,fieldName,(long[])value);

      }

    }

 else     if (value instanceof int[]) {

      if (detail) {

        appendDetail(buffer,fieldName,(int[])value);

      }

 else {

        appendSummary(buffer,fieldName,(int[])value);

      }

    }

 else     if (value instanceof short[]) {

      if (detail) {

        appendDetail(buffer,fieldName,(short[])value);

      }

 else {

        appendSummary(buffer,fieldName,(short[])value);

      }

    }

 else     if (value instanceof byte[]) {

      if (detail) {

        appendDetail(buffer,fieldName,(byte[])value);

      }

 else {

        appendSummary(buffer,fieldName,(byte[])value);

      }

    }

 else     if (value instanceof char[]) {

      if (detail) {

        appendDetail(buffer,fieldName,(char[])value);

      }

 else {

        appendSummary(buffer,fieldName,(char[])value);

      }

    }

 else     if (value instanceof double[]) {

      if (detail) {

        appendDetail(buffer,fieldName,(double[])value);

      }

 else {

        appendSummary(buffer,fieldName,(double[])value);

      }

    }

 else     if (value instanceof float[]) {

      if (detail) {

        appendDetail(buffer,fieldName,(float[])value);

      }

 else {

        appendSummary(buffer,fieldName,(float[])value);

      }

    }

 else     if (value instanceof boolean[]) {

      if (detail) {

        appendDetail(buffer,fieldName,(boolean[])value);

      }

 else {

        appendSummary(buffer,fieldName,(boolean[])value);

      }

    }

 else     if (ObjectUtils.isArray(value)) {

      if (detail) {

        appendDetail(buffer,fieldName,(Object[])value);

      }

 else {

        appendSummary(buffer,fieldName,(Object[])value);

      }

    }

 else     if (detail) {

      appendDetail(buffer,fieldName,value);

    }

 else {

      appendSummary(buffer,fieldName,value);

    }

  }

  finally {

    unregister(value);

  }

}

Location: ToStringStyle.java

Content: 

/** 

 * <p>Append to the  {@code toString} an indicator for {@code null}.</p> <p>The default indicator is  {@code '&lt;null&gt;'}.</p>

 * @param buffer  the {@code StringBuffer} to populate

 * @param fieldName  the field name, typically not used as already appended

 */

protected void appendNullText(final StringBuffer buffer,final String fieldName){

  buffer.append(nullText);

}

Location: ToStringStyle.java

Content: 

/** 

 * <p>Append to the  {@code toString} the start of data indicator.</p>

 * @param buffer  the {@code StringBuffer} to populate

 * @param object  the {@code Object} to build a {@code toString} for

 */

public void appendStart(final StringBuffer buffer,final Object object){

  if (object != null) {

    appendClassName(buffer,object);

    appendIdentityHashCode(buffer,object);

    appendContentStart(buffer);

    if (fieldSeparatorAtStart) {

      appendFieldSeparator(buffer);

    }

  }

}

Location: ToStringStyle.java

Content: 

/** 

 * <p>Append to the  {@code toString} a size summary.</p><p>The size summary is used to summarize the contents of {@code Collections},  {@code Maps} and arrays.</p><p>The output consists of a prefix, the passed in size and a suffix.</p> <p>The default format is  {@code '&lt;size=n&gt;'}.</p>

 * @param buffer  the {@code StringBuffer} to populate

 * @param fieldName  the field name, typically not used as already appended

 * @param size  the size to append

 */

protected void appendSummarySize(final StringBuffer buffer,final String fieldName,final int size){

  buffer.append(sizeStartText);

  buffer.append(size);

  buffer.append(sizeEndText);

}

Location: ToStringStyle.java

Content: 

/** 

 * <p>Append to the  {@code toString} a summary of a{@code boolean} array.</p>

 * @param buffer  the {@code StringBuffer} to populate

 * @param fieldName  the field name, typically not used as already appended

 * @param array  the array to add to the {@code toString}, not  {@code null}

 */

protected void appendSummary(final StringBuffer buffer,final String fieldName,final boolean[] array){

  appendSummarySize(buffer,fieldName,array.length);

}

Location: ToStringStyle.java

Content: 

/** 

 * <p>Append to the  {@code toString} a summary of a{@code byte} array.</p>

 * @param buffer  the {@code StringBuffer} to populate

 * @param fieldName  the field name, typically not used as already appended

 * @param array  the array to add to the {@code toString}, not  {@code null}

 */

protected void appendSummary(final StringBuffer buffer,final String fieldName,final byte[] array){

  appendSummarySize(buffer,fieldName,array.length);

}

Location: ToStringStyle.java

Content: 

/** 

 * <p>Append to the  {@code toString} a summary of a{@code char} array.</p>

 * @param buffer  the {@code StringBuffer} to populate

 * @param fieldName  the field name, typically not used as already appended

 * @param array  the array to add to the {@code toString}, not  {@code null}

 */

protected void appendSummary(final StringBuffer buffer,final String fieldName,final char[] array){

  appendSummarySize(buffer,fieldName,array.length);

}

Location: ToStringStyle.java

Content: 

/** 

 * <p>Append to the  {@code toString} a summary of a{@code double} array.</p>

 * @param buffer  the {@code StringBuffer} to populate

 * @param fieldName  the field name, typically not used as already appended

 * @param array  the array to add to the {@code toString}, not  {@code null}

 */

protected void appendSummary(final StringBuffer buffer,final String fieldName,final double[] array){

  appendSummarySize(buffer,fieldName,array.length);

}

Location: ToStringStyle.java

Content: 

/** 

 * <p>Append to the  {@code toString} a summary of a{@code float} array.</p>

 * @param buffer  the {@code StringBuffer} to populate

 * @param fieldName  the field name, typically not used as already appended

 * @param array  the array to add to the {@code toString}, not  {@code null}

 */

protected void appendSummary(final StringBuffer buffer,final String fieldName,final float[] array){

  appendSummarySize(buffer,fieldName,array.length);

}

Location: ToStringStyle.java

Content: 

/** 

 * <p>Append to the  {@code toString} a summary of an{@code int} array.</p>

 * @param buffer  the {@code StringBuffer} to populate

 * @param fieldName  the field name, typically not used as already appended

 * @param array  the array to add to the {@code toString}, not  {@code null}

 */

protected void appendSummary(final StringBuffer buffer,final String fieldName,final int[] array){

  appendSummarySize(buffer,fieldName,array.length);

}

Location: ToStringStyle.java

Content: 

/** 

 * <p>Append to the  {@code toString} a summary of a{@code long} array.</p>

 * @param buffer  the {@code StringBuffer} to populate

 * @param fieldName  the field name, typically not used as already appended

 * @param array  the array to add to the {@code toString}, not  {@code null}

 */

protected void appendSummary(final StringBuffer buffer,final String fieldName,final long[] array){

  appendSummarySize(buffer,fieldName,array.length);

}

Location: ToStringStyle.java

Content: 

/** 

 * <p>Append to the  {@code toString} a summary of an{@code Object} array.</p>

 * @param buffer  the {@code StringBuffer} to populate

 * @param fieldName  the field name, typically not used as already appended

 * @param array  the array to add to the {@code toString}, not  {@code null}

 */

protected void appendSummary(final StringBuffer buffer,final String fieldName,final Object[] array){

  appendSummarySize(buffer,fieldName,array.length);

}

Location: ToStringStyle.java

Content: 

/** 

 * <p>Append to the  {@code toString} a summary of a{@code short} array.</p>

 * @param buffer  the {@code StringBuffer} to populate

 * @param fieldName  the field name, typically not used as already appended

 * @param array  the array to add to the {@code toString}, not  {@code null}

 */

protected void appendSummary(final StringBuffer buffer,final String fieldName,final short[] array){

  appendSummarySize(buffer,fieldName,array.length);

}

Location: ToStringStyle.java

Content: 

/** 

 * <p>Append to the  {@code toString} the superclass toString.</p><p>NOTE: It assumes that the toString has been created from the same ToStringStyle. </p> <p>A  {@code null} {@code superToString} is ignored.</p>

 * @param buffer  the {@code StringBuffer} to populate

 * @param superToString  the {@code super.toString()}

 * @since 2.0

 */

public void appendSuper(final StringBuffer buffer,final String superToString){

  appendToString(buffer,superToString);

}

Location: ToStringStyle.java

Content: 

/** 

 * <p>Append to the  {@code toString} another toString.</p><p>NOTE: It assumes that the toString has been created from the same ToStringStyle. </p> <p>A  {@code null} {@code toString} is ignored.</p>

 * @param buffer  the {@code StringBuffer} to populate

 * @param toString  the additional {@code toString}

 * @since 2.0

 */

public void appendToString(final StringBuffer buffer,final String toString){

  if (toString != null) {

    final int pos1=toString.indexOf(contentStart) + contentStart.length();

    final int pos2=toString.lastIndexOf(contentEnd);

    if (pos1 != pos2 && pos1 >= 0 && pos2 >= 0) {

      if (fieldSeparatorAtStart) {

        removeLastFieldSeparator(buffer);

      }

      buffer.append(toString,pos1,pos2);

      appendFieldSeparator(buffer);

    }

  }

}

Location: ToStringStyle.java

Content: 

/** 

 * <p>Append to the  {@code toString} a {@code boolean}value.</p>

 * @param buffer  the {@code StringBuffer} to populate

 * @param fieldName  the field name

 * @param value  the value to add to the {@code toString}

 */

public void append(final StringBuffer buffer,final String fieldName,final boolean value){

  appendFieldStart(buffer,fieldName);

  appendDetail(buffer,fieldName,value);

  appendFieldEnd(buffer,fieldName);

}

Location: ToStringStyle.java

Content: 

/** 

 * <p>Append to the  {@code toString} a {@code boolean}array.</p>

 * @param buffer  the {@code StringBuffer} to populate

 * @param fieldName  the field name

 * @param array  the array to add to the toString

 * @param fullDetail  {@code true} for detail, {@code false}for summary info,  {@code null} for style decides

 */

public void append(final StringBuffer buffer,final String fieldName,final boolean[] array,final Boolean fullDetail){

  appendFieldStart(buffer,fieldName);

  if (array == null) {

    appendNullText(buffer,fieldName);

  }

 else   if (isFullDetail(fullDetail)) {

    appendDetail(buffer,fieldName,array);

  }

 else {

    appendSummary(buffer,fieldName,array);

  }

  appendFieldEnd(buffer,fieldName);

}

Location: ToStringStyle.java

Content: 

/** 

 * <p>Append to the  {@code toString} a {@code byte}value.</p>

 * @param buffer  the {@code StringBuffer} to populate

 * @param fieldName  the field name

 * @param value  the value to add to the {@code toString}

 */

public void append(final StringBuffer buffer,final String fieldName,final byte value){

  appendFieldStart(buffer,fieldName);

  appendDetail(buffer,fieldName,value);

  appendFieldEnd(buffer,fieldName);

}

Location: ToStringStyle.java

Content: 

/** 

 * <p>Append to the  {@code toString} a {@code byte}array.</p>

 * @param buffer  the {@code StringBuffer} to populate

 * @param fieldName  the field name

 * @param array  the array to add to the {@code toString}

 * @param fullDetail  {@code true} for detail, {@code false}for summary info,  {@code null} for style decides

 */

public void append(final StringBuffer buffer,final String fieldName,final byte[] array,final Boolean fullDetail){

  appendFieldStart(buffer,fieldName);

  if (array == null) {

    appendNullText(buffer,fieldName);

  }

 else   if (isFullDetail(fullDetail)) {

    appendDetail(buffer,fieldName,array);

  }

 else {

    appendSummary(buffer,fieldName,array);

  }

  appendFieldEnd(buffer,fieldName);

}

Location: ToStringStyle.java

Content: 

/** 

 * <p>Append to the  {@code toString} a {@code char}value.</p>

 * @param buffer  the {@code StringBuffer} to populate

 * @param fieldName  the field name

 * @param value  the value to add to the {@code toString}

 */

public void append(final StringBuffer buffer,final String fieldName,final char value){

  appendFieldStart(buffer,fieldName);

  appendDetail(buffer,fieldName,value);

  appendFieldEnd(buffer,fieldName);

}

Location: ToStringStyle.java

Content: 

/** 

 * <p>Append to the  {@code toString} a {@code char}array.</p>

 * @param buffer  the {@code StringBuffer} to populate

 * @param fieldName  the field name

 * @param array  the array to add to the {@code toString}

 * @param fullDetail  {@code true} for detail, {@code false}for summary info,  {@code null} for style decides

 */

public void append(final StringBuffer buffer,final String fieldName,final char[] array,final Boolean fullDetail){

  appendFieldStart(buffer,fieldName);

  if (array == null) {

    appendNullText(buffer,fieldName);

  }

 else   if (isFullDetail(fullDetail)) {

    appendDetail(buffer,fieldName,array);

  }

 else {

    appendSummary(buffer,fieldName,array);

  }

  appendFieldEnd(buffer,fieldName);

}

Location: ToStringStyle.java

Content: 

/** 

 * <p>Append to the  {@code toString} a {@code double}value.</p>

 * @param buffer  the {@code StringBuffer} to populate

 * @param fieldName  the field name

 * @param value  the value to add to the {@code toString}

 */

public void append(final StringBuffer buffer,final String fieldName,final double value){

  appendFieldStart(buffer,fieldName);

  appendDetail(buffer,fieldName,value);

  appendFieldEnd(buffer,fieldName);

}

Location: ToStringStyle.java

Content: 

/** 

 * <p>Append to the  {@code toString} a {@code double}array.</p>

 * @param buffer  the {@code StringBuffer} to populate

 * @param fieldName  the field name

 * @param array  the array to add to the toString

 * @param fullDetail  {@code true} for detail, {@code false}for summary info,  {@code null} for style decides

 */

public void append(final StringBuffer buffer,final String fieldName,final double[] array,final Boolean fullDetail){

  appendFieldStart(buffer,fieldName);

  if (array == null) {

    appendNullText(buffer,fieldName);

  }

 else   if (isFullDetail(fullDetail)) {

    appendDetail(buffer,fieldName,array);

  }

 else {

    appendSummary(buffer,fieldName,array);

  }

  appendFieldEnd(buffer,fieldName);

}

Location: ToStringStyle.java

Content: 

/** 

 * <p>Append to the  {@code toString} a {@code float}value.</p>

 * @param buffer  the {@code StringBuffer} to populate

 * @param fieldName  the field name

 * @param value  the value to add to the {@code toString}

 */

public void append(final StringBuffer buffer,final String fieldName,final float value){

  appendFieldStart(buffer,fieldName);

  appendDetail(buffer,fieldName,value);

  appendFieldEnd(buffer,fieldName);

}

Location: ToStringStyle.java

Content: 

/** 

 * <p>Append to the  {@code toString} a {@code float}array.</p>

 * @param buffer  the {@code StringBuffer} to populate

 * @param fieldName  the field name

 * @param array  the array to add to the toString

 * @param fullDetail  {@code true} for detail, {@code false}for summary info,  {@code null} for style decides

 */

public void append(final StringBuffer buffer,final String fieldName,final float[] array,final Boolean fullDetail){

  appendFieldStart(buffer,fieldName);

  if (array == null) {

    appendNullText(buffer,fieldName);

  }

 else   if (isFullDetail(fullDetail)) {

    appendDetail(buffer,fieldName,array);

  }

 else {

    appendSummary(buffer,fieldName,array);

  }

  appendFieldEnd(buffer,fieldName);

}

Location: ToStringStyle.java

Content: 

/** 

 * <p>Append to the  {@code toString} an {@code int}value.</p>

 * @param buffer  the {@code StringBuffer} to populate

 * @param fieldName  the field name

 * @param value  the value to add to the {@code toString}

 */

public void append(final StringBuffer buffer,final String fieldName,final int value){

  appendFieldStart(buffer,fieldName);

  appendDetail(buffer,fieldName,value);

  appendFieldEnd(buffer,fieldName);

}

Location: ToStringStyle.java

Content: 

/** 

 * <p>Append to the  {@code toString} an {@code int}array.</p>

 * @param buffer  the {@code StringBuffer} to populate

 * @param fieldName  the field name

 * @param array  the array to add to the {@code toString}

 * @param fullDetail  {@code true} for detail, {@code false}for summary info,  {@code null} for style decides

 */

public void append(final StringBuffer buffer,final String fieldName,final int[] array,final Boolean fullDetail){

  appendFieldStart(buffer,fieldName);

  if (array == null) {

    appendNullText(buffer,fieldName);

  }

 else   if (isFullDetail(fullDetail)) {

    appendDetail(buffer,fieldName,array);

  }

 else {

    appendSummary(buffer,fieldName,array);

  }

  appendFieldEnd(buffer,fieldName);

}

Location: ToStringStyle.java

Content: 

/** 

 * <p>Append to the  {@code toString} a {@code long}value.</p>

 * @param buffer  the {@code StringBuffer} to populate

 * @param fieldName  the field name

 * @param value  the value to add to the {@code toString}

 */

public void append(final StringBuffer buffer,final String fieldName,final long value){

  appendFieldStart(buffer,fieldName);

  appendDetail(buffer,fieldName,value);

  appendFieldEnd(buffer,fieldName);

}

Location: ToStringStyle.java

Content: 

/** 

 * <p>Append to the  {@code toString} a {@code long}array.</p>

 * @param buffer  the {@code StringBuffer} to populate

 * @param fieldName  the field name

 * @param array  the array to add to the {@code toString}

 * @param fullDetail  {@code true} for detail, {@code false}for summary info,  {@code null} for style decides

 */

public void append(final StringBuffer buffer,final String fieldName,final long[] array,final Boolean fullDetail){

  appendFieldStart(buffer,fieldName);

  if (array == null) {

    appendNullText(buffer,fieldName);

  }

 else   if (isFullDetail(fullDetail)) {

    appendDetail(buffer,fieldName,array);

  }

 else {

    appendSummary(buffer,fieldName,array);

  }

  appendFieldEnd(buffer,fieldName);

}

Location: ToStringStyle.java

Content: 

/** 

 * <p>Append to the  {@code toString} an {@code Object}array.</p>

 * @param buffer  the {@code StringBuffer} to populate

 * @param fieldName  the field name

 * @param array  the array to add to the toString

 * @param fullDetail  {@code true} for detail, {@code false}for summary info,  {@code null} for style decides

 */

public void append(final StringBuffer buffer,final String fieldName,final Object[] array,final Boolean fullDetail){

  appendFieldStart(buffer,fieldName);

  if (array == null) {

    appendNullText(buffer,fieldName);

  }

 else   if (isFullDetail(fullDetail)) {

    appendDetail(buffer,fieldName,array);

  }

 else {

    appendSummary(buffer,fieldName,array);

  }

  appendFieldEnd(buffer,fieldName);

}

Location: ToStringStyle.java

Content: 

/** 

 * <p>Append to the  {@code toString} a {@code short}value.</p>

 * @param buffer  the {@code StringBuffer} to populate

 * @param fieldName  the field name

 * @param value  the value to add to the {@code toString}

 */

public void append(final StringBuffer buffer,final String fieldName,final short value){

  appendFieldStart(buffer,fieldName);

  appendDetail(buffer,fieldName,value);

  appendFieldEnd(buffer,fieldName);

}

Location: ToStringStyle.java

Content: 

/** 

 * <p>Append to the  {@code toString} a {@code short}array.</p>

 * @param buffer  the {@code StringBuffer} to populate

 * @param fieldName  the field name

 * @param array  the array to add to the {@code toString}

 * @param fullDetail  {@code true} for detail, {@code false}for summary info,  {@code null} for style decides

 */

public void append(final StringBuffer buffer,final String fieldName,final short[] array,final Boolean fullDetail){

  appendFieldStart(buffer,fieldName);

  if (array == null) {

    appendNullText(buffer,fieldName);

  }

 else   if (isFullDetail(fullDetail)) {

    appendDetail(buffer,fieldName,array);

  }

 else {

    appendSummary(buffer,fieldName,array);

  }

  appendFieldEnd(buffer,fieldName);

}

Location: ToStringStyle.java

Content: 

/** 

 * <p>Gets the array end text.</p>

 * @return the current array end text

 */

protected String getArrayEnd(){

  return arrayEnd;

}

Location: ToStringStyle.java

Content: 

/** 

 * <p>Gets the array separator text.</p>

 * @return the current array separator text

 */

protected String getArraySeparator(){

  return arraySeparator;

}

Location: ToStringStyle.java

Content: 

/** 

 * <p>Gets the array start text.</p>

 * @return the current array start text

 */

protected String getArrayStart(){

  return arrayStart;

}

Location: ToStringStyle.java

Content: 

/** 

 * <p>Gets the content end text.</p>

 * @return the current content end text

 */

protected String getContentEnd(){

  return contentEnd;

}

Location: ToStringStyle.java

Content: 

/** 

 * <p>Gets the content start text.</p>

 * @return the current content start text

 */

protected String getContentStart(){

  return contentStart;

}

Location: ToStringStyle.java

Content: 

/** 

 * <p>Gets the field name value separator text.</p>

 * @return the current field name value separator text

 */

protected String getFieldNameValueSeparator(){

  return fieldNameValueSeparator;

}

Location: ToStringStyle.java

Content: 

/** 

 * <p>Gets the field separator text.</p>

 * @return the current field separator text

 */

protected String getFieldSeparator(){

  return fieldSeparator;

}

Location: ToStringStyle.java

Content: 

/** 

 * <p>Gets the short class name for a class.</p> <p>The short class name is the classname excluding the package name.</p>

 * @param cls  the {@code Class} to get the short name of

 * @return the short name

 */

protected String getShortClassName(final Class<?> cls){

  return ClassUtils.getShortClassName(cls);

}

Location: ToStringStyle.java

Content: 

/** 

 * <p>Gets the end text to output when a  {@code Collection}, {@code Map} or array size is output.</p><p>This is output after the size value.</p>

 * @return the current end of size text

 */

protected String getSizeEndText(){

  return sizeEndText;

}

Location: ToStringStyle.java

Content: 

/** 

 * <p>Gets the start text to output when a  {@code Collection}, {@code Map} or array size is output.</p><p>This is output before the size value.</p>

 * @return the current start of size text

 */

protected String getSizeStartText(){

  return sizeStartText;

}

Location: ToStringStyle.java

Content: 

/** 

 * <p>Gets the end text to output when an  {@code Object} isoutput in summary mode.</p> <p>This is output after the size value.</p>

 * @return the current end of summary text

 */

protected String getSummaryObjectEndText(){

  return summaryObjectEndText;

}

Location: ToStringStyle.java

Content: 

/** 

 * <p>Gets the start text to output when an  {@code Object} isoutput in summary mode.</p> <p>This is output before the size value.</p>

 * @return the current start of summary text

 */

protected String getSummaryObjectStartText(){

  return summaryObjectStartText;

}

Location: ToStringStyle.java

Content: 

/** 

 * <p>Gets whether to output array content detail.</p>

 * @return the current array content detail setting

 */

protected boolean isArrayContentDetail(){

  return arrayContentDetail;

}

Location: ToStringStyle.java

Content: 

/** 

 * <p>Gets whether to use full detail when the caller doesn't specify.</p>

 * @return the current defaultFullDetail flag

 */

protected boolean isDefaultFullDetail(){

  return defaultFullDetail;

}

Location: ToStringStyle.java

Content: 

/** 

 * <p>Gets whether the field separator should be added at the end of each buffer.</p>

 * @return fieldSeparatorAtEnd flag

 * @since 2.0

 */

protected boolean isFieldSeparatorAtEnd(){

  return fieldSeparatorAtEnd;

}

Location: ToStringStyle.java

Content: 

/** 

 * <p>Gets whether the field separator should be added at the start of each buffer.</p>

 * @return the fieldSeparatorAtStart flag

 * @since 2.0

 */

protected boolean isFieldSeparatorAtStart(){

  return fieldSeparatorAtStart;

}

Location: ToStringStyle.java

Content: 

/** 

 * <p>Is this field to be output in full detail.</p> <p>This method converts a detail request into a detail level. The calling code may request full detail ( {@code true}), but a subclass might ignore that and always return {@code false}. The calling code may pass in {@code null} indicating that it doesn't care aboutthe detail level. In this case the default detail level is used.</p>

 * @param fullDetailRequest  the detail level requested

 * @return whether full detail is to be shown

 */

protected boolean isFullDetail(final Boolean fullDetailRequest){

  if (fullDetailRequest == null) {

    return defaultFullDetail;

  }

  return fullDetailRequest.booleanValue();

}

Location: ToStringStyle.java

Content: 

/** 

 * <p>Gets whether to use the class name.</p>

 * @return the current useClassName flag

 */

protected boolean isUseClassName(){

  return useClassName;

}

Location: ToStringStyle.java

Content: 

/** 

 * <p>Gets whether to use the field names passed in.</p>

 * @return the current useFieldNames flag

 */

protected boolean isUseFieldNames(){

  return useFieldNames;

}

Location: ToStringStyle.java

Content: 

/** 

 * <p>Gets whether to use the identity hash code.</p>

 * @return the current useIdentityHashCode flag

 */

protected boolean isUseIdentityHashCode(){

  return useIdentityHashCode;

}

Location: ToStringStyle.java

Content: 

/** 

 * <p>Gets whether to output short or long class names.</p>

 * @return the current useShortClassName flag

 * @since 2.0

 */

protected boolean isUseShortClassName(){

  return useShortClassName;

}

Location: ToStringStyle.java

Content: 

/** 

 * <p>Remove the last field separator from the buffer.</p>

 * @param buffer  the {@code StringBuffer} to populate

 * @since 2.0

 */

protected void removeLastFieldSeparator(final StringBuffer buffer){

  if (StringUtils.endsWith(buffer,fieldSeparator)) {

    buffer.setLength(buffer.length() - fieldSeparator.length());

  }

}

Location: ToStringStyle.java

Content: 

/** 

 * <p>Sets whether to output array content detail.</p>

 * @param arrayContentDetail  the new arrayContentDetail flag

 */

protected void setArrayContentDetail(final boolean arrayContentDetail){

  this.arrayContentDetail=arrayContentDetail;

}

Location: ToStringStyle.java

Content: 

/** 

 * <p>Sets the array end text.</p> <p> {@code null} is accepted, but will be converted toan empty String.</p>

 * @param arrayEnd  the new array end text

 */

protected void setArrayEnd(String arrayEnd){

  if (arrayEnd == null) {

    arrayEnd=StringUtils.EMPTY;

  }

  this.arrayEnd=arrayEnd;

}

Location: ToStringStyle.java

Content: 

/** 

 * <p>Sets the array separator text.</p> <p> {@code null} is accepted, but will be converted toan empty String.</p>

 * @param arraySeparator  the new array separator text

 */

protected void setArraySeparator(String arraySeparator){

  if (arraySeparator == null) {

    arraySeparator=StringUtils.EMPTY;

  }

  this.arraySeparator=arraySeparator;

}

Location: ToStringStyle.java

Content: 

/** 

 * <p>Sets the array start text.</p> <p> {@code null} is accepted, but will be converted toan empty String.</p>

 * @param arrayStart  the new array start text

 */

protected void setArrayStart(String arrayStart){

  if (arrayStart == null) {

    arrayStart=StringUtils.EMPTY;

  }

  this.arrayStart=arrayStart;

}

Location: ToStringStyle.java

Content: 

/** 

 * <p>Sets the content end text.</p> <p> {@code null} is accepted, but will be converted toan empty String.</p>

 * @param contentEnd  the new content end text

 */

protected void setContentEnd(String contentEnd){

  if (contentEnd == null) {

    contentEnd=StringUtils.EMPTY;

  }

  this.contentEnd=contentEnd;

}

Location: ToStringStyle.java

Content: 

/** 

 * <p>Sets the content start text.</p> <p> {@code null} is accepted, but will be converted toan empty String.</p>

 * @param contentStart  the new content start text

 */

protected void setContentStart(String contentStart){

  if (contentStart == null) {

    contentStart=StringUtils.EMPTY;

  }

  this.contentStart=contentStart;

}

Location: ToStringStyle.java

Content: 

/** 

 * <p>Sets whether to use full detail when the caller doesn't specify.</p>

 * @param defaultFullDetail  the new defaultFullDetail flag

 */

protected void setDefaultFullDetail(final boolean defaultFullDetail){

  this.defaultFullDetail=defaultFullDetail;

}

Location: ToStringStyle.java

Content: 

/** 

 * <p>Sets the field name value separator text.</p> <p> {@code null} is accepted, but will be converted toan empty String.</p>

 * @param fieldNameValueSeparator  the new field name value separator text

 */

protected void setFieldNameValueSeparator(String fieldNameValueSeparator){

  if (fieldNameValueSeparator == null) {

    fieldNameValueSeparator=StringUtils.EMPTY;

  }

  this.fieldNameValueSeparator=fieldNameValueSeparator;

}

Location: ToStringStyle.java

Content: 

/** 

 * <p>Sets whether the field separator should be added at the end of each buffer.</p>

 * @param fieldSeparatorAtEnd  the fieldSeparatorAtEnd flag

 * @since 2.0

 */

protected void setFieldSeparatorAtEnd(final boolean fieldSeparatorAtEnd){

  this.fieldSeparatorAtEnd=fieldSeparatorAtEnd;

}

Location: ToStringStyle.java

Content: 

/** 

 * <p>Sets whether the field separator should be added at the start of each buffer.</p>

 * @param fieldSeparatorAtStart  the fieldSeparatorAtStart flag

 * @since 2.0

 */

protected void setFieldSeparatorAtStart(final boolean fieldSeparatorAtStart){

  this.fieldSeparatorAtStart=fieldSeparatorAtStart;

}

Location: ToStringStyle.java

Content: 

/** 

 * <p>Sets the field separator text.</p> <p> {@code null} is accepted, but will be converted toan empty String.</p>

 * @param fieldSeparator  the new field separator text

 */

protected void setFieldSeparator(String fieldSeparator){

  if (fieldSeparator == null) {

    fieldSeparator=StringUtils.EMPTY;

  }

  this.fieldSeparator=fieldSeparator;

}

Location: ToStringStyle.java

Content: 

/** 

 * <p>Sets the end text to output when a  {@code Collection}, {@code Map} or array size is output.</p><p>This is output after the size value.</p> <p> {@code null} is accepted, but will be converted toan empty String.</p>

 * @param sizeEndText  the new end of size text

 */

protected void setSizeEndText(String sizeEndText){

  if (sizeEndText == null) {

    sizeEndText=StringUtils.EMPTY;

  }

  this.sizeEndText=sizeEndText;

}

Location: ToStringStyle.java

Content: 

/** 

 * <p>Sets the start text to output when a  {@code Collection}, {@code Map} or array size is output.</p><p>This is output before the size value.</p> <p> {@code null} is accepted, but will be converted toan empty String.</p>

 * @param sizeStartText  the new start of size text

 */

protected void setSizeStartText(String sizeStartText){

  if (sizeStartText == null) {

    sizeStartText=StringUtils.EMPTY;

  }

  this.sizeStartText=sizeStartText;

}

Location: ToStringStyle.java

Content: 

/** 

 * <p>Sets the end text to output when an  {@code Object} isoutput in summary mode.</p> <p>This is output after the size value.</p> <p> {@code null} is accepted, but will be converted toan empty String.</p>

 * @param summaryObjectEndText  the new end of summary text

 */

protected void setSummaryObjectEndText(String summaryObjectEndText){

  if (summaryObjectEndText == null) {

    summaryObjectEndText=StringUtils.EMPTY;

  }

  this.summaryObjectEndText=summaryObjectEndText;

}

Location: ToStringStyle.java

Content: 

/** 

 * <p>Sets the start text to output when an  {@code Object} isoutput in summary mode.</p> <p>This is output before the size value.</p> <p> {@code null} is accepted, but will be converted toan empty String.</p>

 * @param summaryObjectStartText  the new start of summary text

 */

protected void setSummaryObjectStartText(String summaryObjectStartText){

  if (summaryObjectStartText == null) {

    summaryObjectStartText=StringUtils.EMPTY;

  }

  this.summaryObjectStartText=summaryObjectStartText;

}

Location: ToStringStyle.java

Content: 

/** 

 * <p>Sets whether to use the class name.</p>

 * @param useClassName  the new useClassName flag

 */

protected void setUseClassName(final boolean useClassName){

  this.useClassName=useClassName;

}

Location: ToStringStyle.java

Content: 

/** 

 * <p>Sets whether to use the field names passed in.</p>

 * @param useFieldNames  the new useFieldNames flag

 */

protected void setUseFieldNames(final boolean useFieldNames){

  this.useFieldNames=useFieldNames;

}

Location: ToStringStyle.java

Content: 

/** 

 * <p>Sets whether to use the identity hash code.</p>

 * @param useIdentityHashCode  the new useIdentityHashCode flag

 */

protected void setUseIdentityHashCode(final boolean useIdentityHashCode){

  this.useIdentityHashCode=useIdentityHashCode;

}

Location: ToStringStyle.java

Content: 

/** 

 * <p>Sets whether to output short or long class names.</p>

 * @param useShortClassName  the new useShortClassName flag

 * @since 2.0

 */

protected void setUseShortClassName(final boolean useShortClassName){

  this.useShortClassName=useShortClassName;

}

Location: ToStringStyle.java

Content: 

/** 

 * <p>Constructor.</p>

 */

protected ToStringStyle(){

}

