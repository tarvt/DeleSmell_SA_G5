Location: ExtendedMessageFormatTest.java

Content: 

/** 

 * Create an ExtendedMessageFormat for the specified pattern and locale and check the formatted output matches the expected result for the parameters.

 * @param pattern string

 * @param registryUnused map (currently unused)

 * @param args Object[]

 * @param locale Locale

 */

private void checkBuiltInFormat(final String pattern,final Map<String,?> registryUnused,final Object[] args,final Locale locale){

  final StringBuilder buffer=new StringBuilder();

  buffer.append("Pattern=[");

  buffer.append(pattern);

  buffer.append("], locale=[");

  buffer.append(locale);

  buffer.append("]");

  final MessageFormat mf=createMessageFormat(pattern,locale);

  ExtendedMessageFormat emf=null;

  if (locale == null) {

    emf=new ExtendedMessageFormat(pattern);

  }

 else {

    emf=new ExtendedMessageFormat(pattern,locale);

  }

  assertEquals(mf.format(args),emf.format(args),"format " + buffer.toString());

  assertEquals(mf.toPattern(),emf.toPattern(),"toPattern " + buffer.toString());

}

Location: ExtendedMessageFormatTest.java

Content: 

/** 

 * Test a built in format for the specified Locales, plus  {@code null} Locale.

 * @param pattern MessageFormat pattern

 * @param args MessageFormat arguments

 * @param locales to test

 */

private void checkBuiltInFormat(final String pattern,final Object[] args,final Locale[] locales){

  checkBuiltInFormat(pattern,null,args,locales);

}

Location: ExtendedMessageFormatTest.java

Content: 

/** 

 * Replace MessageFormat(String, Locale) constructor (not available until JDK 1.4).

 * @param pattern string

 * @param locale Locale

 * @return MessageFormat

 */

private MessageFormat createMessageFormat(final String pattern,final Locale locale){

  final MessageFormat result=new MessageFormat(pattern);

  if (locale != null) {

    result.setLocale(locale);

    result.applyPattern(pattern);

  }

  return result;

}

Location: ExtendedMessageFormatTest.java

Content: 

/** 

 * Test the built in choice format.

 */

@Test public void testBuiltInChoiceFormat(){

  final Object[] values=new Number[]{Integer.valueOf(1),Double.valueOf("2.2"),Double.valueOf("1234.5")};

  String choicePattern;

  final Locale[] availableLocales=NumberFormat.getAvailableLocales();

  choicePattern="{0,choice,1#One|2#Two|3#Many {0,number}}";

  for (  final Object value : values) {

    checkBuiltInFormat(value + ": " + choicePattern,new Object[]{value},availableLocales);

  }

  choicePattern="{0,choice,1#''One''|2#\"Two\"|3#''{Many}'' {0,number}}";

  for (  final Object value : values) {

    checkBuiltInFormat(value + ": " + choicePattern,new Object[]{value},availableLocales);

  }

}

Location: ExtendedMessageFormatTest.java

Content: 

/** 

 * Test the built in date/time formats

 */

@Test public void testBuiltInDateTimeFormat(){

  final Calendar cal=Calendar.getInstance();

  cal.set(2007,Calendar.JANUARY,23,18,33,5);

  final Object[] args={cal.getTime()};

  final Locale[] availableLocales=DateFormat.getAvailableLocales();

  checkBuiltInFormat("1: {0,date,short}",args,availableLocales);

  checkBuiltInFormat("2: {0,date,medium}",args,availableLocales);

  checkBuiltInFormat("3: {0,date,long}",args,availableLocales);

  checkBuiltInFormat("4: {0,date,full}",args,availableLocales);

  checkBuiltInFormat("5: {0,date,d MMM yy}",args,availableLocales);

  checkBuiltInFormat("6: {0,time,short}",args,availableLocales);

  checkBuiltInFormat("7: {0,time,medium}",args,availableLocales);

  checkBuiltInFormat("8: {0,time,long}",args,availableLocales);

  checkBuiltInFormat("9: {0,time,full}",args,availableLocales);

  checkBuiltInFormat("10: {0,time,HH:mm}",args,availableLocales);

  checkBuiltInFormat("11: {0,date}",args,availableLocales);

  checkBuiltInFormat("12: {0,time}",args,availableLocales);

}

Location: ExtendedMessageFormatTest.java

Content: 

/** 

 * Test the built in number formats.

 */

@Test public void testBuiltInNumberFormat(){

  final Object[] args={Double.valueOf("6543.21")};

  final Locale[] availableLocales=NumberFormat.getAvailableLocales();

  checkBuiltInFormat("1: {0,number}",args,availableLocales);

  checkBuiltInFormat("2: {0,number,integer}",args,availableLocales);

  checkBuiltInFormat("3: {0,number,currency}",args,availableLocales);

  checkBuiltInFormat("4: {0,number,percent}",args,availableLocales);

  checkBuiltInFormat("5: {0,number,00000.000}",args,availableLocales);

}

Location: ExtendedMessageFormatTest.java

Content: 

/** 

 * Test Bug LANG-917 - IndexOutOfBoundsException and/or infinite loop when using a choice pattern

 */

@Test public void testEmbeddedPatternInChoice(){

  final String pattern="Hi {0,lower}, got {1,choice,0#none|1#one|1<{1,number}}, {2,upper}!";

  final ExtendedMessageFormat emf=new ExtendedMessageFormat(pattern,registry);

  assertEquals(emf.format(new Object[]{"there",3,"great"}),"Hi there, got 3, GREAT!");

}

Location: ExtendedMessageFormatTest.java

Content: 

/** 

 * Test equals() and hashcode.

 */

@Test public void testEqualsHashcode(){

  final Map<String,? extends FormatFactory> fmtRegistry=Collections.singletonMap("testfmt",new LowerCaseFormatFactory());

  final Map<String,? extends FormatFactory> otherRegistry=Collections.singletonMap("testfmt",new UpperCaseFormatFactory());

  final String pattern="Pattern: {0,testfmt}";

  final ExtendedMessageFormat emf=new ExtendedMessageFormat(pattern,Locale.US,fmtRegistry);

  ExtendedMessageFormat other;

  assertEquals(emf,emf,"same, equals()");

  assertEquals(emf.hashCode(),emf.hashCode(),"same, hashcode()");

  other=new ExtendedMessageFormat(pattern,Locale.US,fmtRegistry);

  assertEquals(emf,other,"equal, equals()");

  assertEquals(emf.hashCode(),other.hashCode(),"equal, hashcode()");

  other=new OtherExtendedMessageFormat(pattern,Locale.US,fmtRegistry);

  assertNotEquals(emf,other,"class, equals()");

  assertEquals(emf.hashCode(),other.hashCode(),"class, hashcode()");

  other=new ExtendedMessageFormat("X" + pattern,Locale.US,fmtRegistry);

  assertNotEquals(emf,other,"pattern, equals()");

  assertNotEquals(emf.hashCode(),other.hashCode(),"pattern, hashcode()");

  other=new ExtendedMessageFormat(pattern,Locale.US,otherRegistry);

  assertNotEquals(emf,other,"registry, equals()");

  assertNotEquals(emf.hashCode(),other.hashCode(),"registry, hashcode()");

  other=new ExtendedMessageFormat(pattern,Locale.FRANCE,fmtRegistry);

  assertNotEquals(emf,other,"locale, equals()");

  assertEquals(emf.hashCode(),other.hashCode(),"locale, hashcode()");

}

Location: ExtendedMessageFormatTest.java

Content: 

/** 

 * Test Bug LANG-948 - Exception while using ExtendedMessageFormat and escaping braces

 */

@Test public void testEscapedBraces_LANG_948(){

  final String pattern="Message without placeholders '{}'";

  final ExtendedMessageFormat emf=new ExtendedMessageFormat(pattern,registry);

  assertEquals("Message without placeholders {}",emf.format(new Object[]{"DUMMY"}));

  final String pattern2="Message with placeholder ''{0}''";

  final ExtendedMessageFormat emf2=new ExtendedMessageFormat(pattern2,registry);

  assertEquals("Message with placeholder 'DUMMY'",emf2.format(new Object[]{"DUMMY"}));

}

Location: ExtendedMessageFormatTest.java

Content: 

/** 

 * Test Bug LANG-477 - out of memory error with escaped quote

 */

@Test public void testEscapedQuote_LANG_477(){

  final String pattern="it''s a {0,lower} 'test'!";

  final ExtendedMessageFormat emf=new ExtendedMessageFormat(pattern,registry);

  assertEquals("it's a dummy test!",emf.format(new Object[]{"DUMMY"}));

}

Location: ExtendedMessageFormatTest.java

Content: 

/** 

 * Test extended and built in formats.

 */

@Test public void testExtendedAndBuiltInFormats(){

  final Calendar cal=Calendar.getInstance();

  cal.set(2007,Calendar.JANUARY,23,18,33,5);

  final Object[] args={"John Doe",cal.getTime(),Double.valueOf("12345.67")};

  final String builtinsPattern="DOB: {1,date,short} Salary: {2,number,currency}";

  final String extendedPattern="Name: {0,upper} ";

  final String pattern=extendedPattern + builtinsPattern;

  final HashSet<Locale> testLocales=new HashSet<>(Arrays.asList(DateFormat.getAvailableLocales()));

  testLocales.retainAll(Arrays.asList(NumberFormat.getAvailableLocales()));

  testLocales.add(null);

  for (  final Locale locale : testLocales) {

    final MessageFormat builtins=createMessageFormat(builtinsPattern,locale);

    final String expectedPattern=extendedPattern + builtins.toPattern();

    DateFormat df=null;

    NumberFormat nf=null;

    ExtendedMessageFormat emf=null;

    if (locale == null) {

      df=DateFormat.getDateInstance(DateFormat.SHORT);

      nf=NumberFormat.getCurrencyInstance();

      emf=new ExtendedMessageFormat(pattern,registry);

    }

 else {

      df=DateFormat.getDateInstance(DateFormat.SHORT,locale);

      nf=NumberFormat.getCurrencyInstance(locale);

      emf=new ExtendedMessageFormat(pattern,locale,registry);

    }

    final StringBuilder expected=new StringBuilder();

    expected.append("Name: ");

    expected.append(args[0].toString().toUpperCase(Locale.ROOT));

    expected.append(" DOB: ");

    expected.append(df.format(args[1]));

    expected.append(" Salary: ");

    expected.append(nf.format(args[2]));

    assertEquals(expectedPattern,emf.toPattern(),"pattern comparison for locale " + locale);

    assertEquals(expected.toString(),emf.format(args),String.valueOf(locale));

  }

}

Location: ExtendedMessageFormatTest.java

Content: 

/** 

 * Test extended formats.

 */

@Test public void testExtendedFormats(){

  final String pattern="Lower: {0,lower} Upper: {1,upper}";

  final ExtendedMessageFormat emf=new ExtendedMessageFormat(pattern,registry);

  assertEquals(pattern,emf.toPattern(),"TOPATTERN");

  assertEquals(emf.format(new Object[]{"foo","bar"}),"Lower: foo Upper: BAR");

  assertEquals(emf.format(new Object[]{"Foo","Bar"}),"Lower: foo Upper: BAR");

  assertEquals(emf.format(new Object[]{"FOO","BAR"}),"Lower: foo Upper: BAR");

  assertEquals(emf.format(new Object[]{"FOO","bar"}),"Lower: foo Upper: BAR");

  assertEquals(emf.format(new Object[]{"foo","BAR"}),"Lower: foo Upper: BAR");

}

Location: ExtendedMessageFormatTest.java

Content: 

@Test public void testOverriddenBuiltinFormat(){

  final Calendar cal=Calendar.getInstance();

  cal.set(2007,Calendar.JANUARY,23);

  final Object[] args={cal.getTime()};

  final Locale[] availableLocales=DateFormat.getAvailableLocales();

  final Map<String,? extends FormatFactory> dateRegistry=Collections.singletonMap("date",new OverrideShortDateFormatFactory());

  checkBuiltInFormat("1: {0,date}",dateRegistry,args,availableLocales);

  checkBuiltInFormat("2: {0,date,medium}",dateRegistry,args,availableLocales);

  checkBuiltInFormat("3: {0,date,long}",dateRegistry,args,availableLocales);

  checkBuiltInFormat("4: {0,date,full}",dateRegistry,args,availableLocales);

  checkBuiltInFormat("5: {0,date,d MMM yy}",dateRegistry,args,availableLocales);

  for (int i=-1; i < availableLocales.length; i++) {

    final Locale locale=i < 0 ? null : availableLocales[i];

    final MessageFormat dateDefault=createMessageFormat("{0,date}",locale);

    final String pattern="{0,date,short}";

    final ExtendedMessageFormat dateShort=new ExtendedMessageFormat(pattern,locale,dateRegistry);

    assertEquals(dateDefault.format(args),dateShort.format(args),"overridden date,short format");

    assertEquals(pattern,dateShort.toPattern(),"overridden date,short pattern");

  }

}

