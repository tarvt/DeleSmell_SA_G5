Location: EventUtils.java

Content: 

/** 

 * Adds an event listener to the specified source.  This looks for an "add" method corresponding to the event type (addActionListener, for example).

 * @param eventSource   the event source

 * @param listenerType  the event listener type

 * @param listener      the listener

 * @param < L >           the event listener type

 * @throws IllegalArgumentException if the object doesn't support the listener type

 */

public static <L>void addEventListener(final Object eventSource,final Class<L> listenerType,final L listener){

  try {

    MethodUtils.invokeMethod(eventSource,"add" + listenerType.getSimpleName(),listener);

  }

 catch (  final NoSuchMethodException e) {

    throw new IllegalArgumentException("Class " + eventSource.getClass().getName() + " does not have a public add"+ listenerType.getSimpleName()+ " method which takes a parameter of type "+ listenerType.getName()+ ".");

  }

catch (  final IllegalAccessException e) {

    throw new IllegalArgumentException("Class " + eventSource.getClass().getName() + " does not have an accessible add"+ listenerType.getSimpleName()+ " method which takes a parameter of type "+ listenerType.getName()+ ".");

  }

catch (  final InvocationTargetException e) {

    throw new RuntimeException("Unable to add listener.",e.getCause());

  }

}

Location: EventUtils.java

Content: 

/** 

 * Binds an event listener to a specific method on a specific object.

 * @param < L >          the event listener type

 * @param target       the target object

 * @param methodName   the name of the method to be called

 * @param eventSource  the object which is generating events (JButton, JList, etc.)

 * @param listenerType the listener interface (ActionListener.class, SelectionListener.class, etc.)

 * @param eventTypes   the event types (method names) from the listener interface (if none specified, all will besupported)

 */

public static <L>void bindEventsToMethod(final Object target,final String methodName,final Object eventSource,final Class<L> listenerType,final String... eventTypes){

  final L listener=listenerType.cast(Proxy.newProxyInstance(target.getClass().getClassLoader(),new Class[]{listenerType},new EventBindingInvocationHandler(target,methodName,eventTypes)));

  addEventListener(eventSource,listenerType,listener);

}

