Location: RandomUtilsTest.java

Content: 

/** 

 * Tests extreme range.

 */

@Test public void testExtremeRangeDouble(){

  final double result=RandomUtils.nextDouble(0,Double.MAX_VALUE);

  assertTrue(result >= 0 && result <= Double.MAX_VALUE);

}

Location: RandomUtilsTest.java

Content: 

/** 

 * Tests extreme range.

 */

@Test public void testExtremeRangeFloat(){

  final float result=RandomUtils.nextFloat(0,Float.MAX_VALUE);

  assertTrue(result >= 0f && result <= Float.MAX_VALUE);

}

Location: RandomUtilsTest.java

Content: 

/** 

 * Tests extreme range.

 */

@Test public void testExtremeRangeInt(){

  final int result=RandomUtils.nextInt(0,Integer.MAX_VALUE);

  assertTrue(result >= 0 && result < Integer.MAX_VALUE);

}

Location: RandomUtilsTest.java

Content: 

/** 

 * Tests extreme range.

 */

@Test public void testExtremeRangeLong(){

  final long result=RandomUtils.nextLong(0,Long.MAX_VALUE);

  assertTrue(result >= 0 && result < Long.MAX_VALUE);

}

Location: RandomUtilsTest.java

Content: 

/** 

 * Test a large value for long. A previous implementation using {@link RandomUtils#nextDouble(double,double)} could generate a value equalto the upper limit. <pre> return (long) nextDouble(startInclusive, endExclusive); </pre> <p>See LANG-1592.</p>

 */

@Test public void testLargeValueRangeLong(){

  final long startInclusive=12900000000001L;

  final long endExclusive=12900000000016L;

  final int n=(int)(endExclusive - startInclusive) * 1000;

  for (int i=0; i < n; i++) {

    assertNotEquals(endExclusive,RandomUtils.nextLong(startInclusive,endExclusive));

  }

}

Location: RandomUtilsTest.java

Content: 

/** 

 * Tests random byte array.

 */

@Test public void testNextBytes(){

  final byte[] result=RandomUtils.nextBytes(20);

  assertEquals(20,result.length);

}

Location: RandomUtilsTest.java

Content: 

@Test public void testNextBytesNegative(){

  assertThrows(IllegalArgumentException.class,() -> RandomUtils.nextBytes(-1));

}

Location: RandomUtilsTest.java

Content: 

/** 

 * Tests next double range.

 */

@Test public void testNextDouble(){

  final double result=RandomUtils.nextDouble(33d,42d);

  assertTrue(result >= 33d && result <= 42d);

}

Location: RandomUtilsTest.java

Content: 

@Test public void testNextDoubleLowerGreaterUpper(){

  assertThrows(IllegalArgumentException.class,() -> RandomUtils.nextDouble(2,1));

}

Location: RandomUtilsTest.java

Content: 

/** 

 * Test next double range with minimal range.

 */

@Test public void testNextDoubleMinimalRange(){

  assertEquals(42.1,RandomUtils.nextDouble(42.1,42.1),DELTA);

}

Location: RandomUtilsTest.java

Content: 

@Test public void testNextDoubleNegative(){

  assertThrows(IllegalArgumentException.class,() -> RandomUtils.nextDouble(-1,1));

}

Location: RandomUtilsTest.java

Content: 

/** 

 * Tests next double range, random result.

 */

@Test public void testNextDoubleRandomResult(){

  final double randomResult=RandomUtils.nextDouble();

  assertTrue(randomResult > 0);

  assertTrue(randomResult < Double.MAX_VALUE);

}

Location: RandomUtilsTest.java

Content: 

/** 

 * Tests next float range.

 */

@Test public void testNextFloat(){

  final double result=RandomUtils.nextFloat(33f,42f);

  assertTrue(result >= 33f && result <= 42f);

}

Location: RandomUtilsTest.java

Content: 

@Test public void testNextFloatLowerGreaterUpper(){

  assertThrows(IllegalArgumentException.class,() -> RandomUtils.nextFloat(2,1));

}

Location: RandomUtilsTest.java

Content: 

/** 

 * Test next float range with minimal range.

 */

@Test public void testNextFloatMinimalRange(){

  assertEquals(42.1f,RandomUtils.nextFloat(42.1f,42.1f),DELTA);

}

Location: RandomUtilsTest.java

Content: 

@Test public void testNextFloatNegative(){

  assertThrows(IllegalArgumentException.class,() -> RandomUtils.nextFloat(-1,1));

}

Location: RandomUtilsTest.java

Content: 

/** 

 * Tests next float range, random result.

 */

@Test public void testNextFloatRandomResult(){

  final float randomResult=RandomUtils.nextFloat();

  assertTrue(randomResult > 0);

  assertTrue(randomResult < Float.MAX_VALUE);

}

Location: RandomUtilsTest.java

Content: 

/** 

 * Tests next int range.

 */

@Test public void testNextInt(){

  final int result=RandomUtils.nextInt(33,42);

  assertTrue(result >= 33 && result < 42);

}

Location: RandomUtilsTest.java

Content: 

@Test public void testNextIntLowerGreaterUpper(){

  assertThrows(IllegalArgumentException.class,() -> RandomUtils.nextInt(2,1));

}

Location: RandomUtilsTest.java

Content: 

/** 

 * Test next int range with minimal range.

 */

@Test public void testNextIntMinimalRange(){

  assertEquals(42,RandomUtils.nextInt(42,42));

}

Location: RandomUtilsTest.java

Content: 

@Test public void testNextIntNegative(){

  assertThrows(IllegalArgumentException.class,() -> RandomUtils.nextInt(-1,1));

}

Location: RandomUtilsTest.java

Content: 

/** 

 * Tests next int range, random result.

 */

@Test public void testNextIntRandomResult(){

  final int randomResult=RandomUtils.nextInt();

  assertTrue(randomResult > 0);

  assertTrue(randomResult < Integer.MAX_VALUE);

}

Location: RandomUtilsTest.java

Content: 

/** 

 * Tests next long range.

 */

@Test public void testNextLong(){

  final long result=RandomUtils.nextLong(33L,42L);

  assertTrue(result >= 33L && result < 42L);

}

Location: RandomUtilsTest.java

Content: 

@Test public void testNextLongLowerGreaterUpper(){

  assertThrows(IllegalArgumentException.class,() -> RandomUtils.nextLong(2,1));

}

Location: RandomUtilsTest.java

Content: 

/** 

 * Test next long range with minimal range.

 */

@Test public void testNextLongMinimalRange(){

  assertEquals(42L,RandomUtils.nextLong(42L,42L));

}

Location: RandomUtilsTest.java

Content: 

@Test public void testNextLongNegative(){

  assertThrows(IllegalArgumentException.class,() -> RandomUtils.nextLong(-1,1));

}

Location: RandomUtilsTest.java

Content: 

/** 

 * Tests next long range, random result.

 */

@Test public void testNextLongRandomResult(){

  final long randomResult=RandomUtils.nextLong();

  assertTrue(randomResult > 0);

  assertTrue(randomResult < Long.MAX_VALUE);

}

Location: RandomUtilsTest.java

Content: 

/** 

 * Tests a zero byte array length.

 */

@Test public void testZeroLengthNextBytes(){

  assertArrayEquals(new byte[0],RandomUtils.nextBytes(0));

}

