Location: ArchUtilsTest.java

Content: 

private void assertEqualsArchNotNull(final Processor.Arch arch,final Processor processor){

  assertNotNull(arch);

  assertNotNull(processor);

  assertEquals(arch,processor.getArch());

}

Location: ArchUtilsTest.java

Content: 

private void assertEqualsTypeNotNull(final Processor.Type type,final Processor processor){

  assertNotNull(type);

  assertNotNull(processor);

  assertEquals(type,processor.getType());

}

Location: ArchUtilsTest.java

Content: 

private void assertNotEqualsArchNotNull(final Processor.Arch arch,final Processor processor){

  assertNotNull(arch);

  assertNotNull(processor);

  assertNotEquals(arch,processor.getArch());

}

Location: ArchUtilsTest.java

Content: 

private void assertNotEqualsTypeNotNull(final Processor.Type type,final Processor processor){

  assertNotNull(type);

  assertNotNull(processor);

  assertNotEquals(type,processor.getType());

}

Location: ArchUtilsTest.java

Content: 

@Test public void testArch(){

  Processor processor=ArchUtils.getProcessor(X86);

  assertEqualsTypeNotNull(Processor.Type.X86,processor);

  assertTrue(processor.isX86());

  assertNotEqualsTypeNotNull(Processor.Type.PPC,processor);

  assertFalse(processor.isPPC());

  processor=ArchUtils.getProcessor(X86_64);

  assertEqualsTypeNotNull(Processor.Type.X86,processor);

  assertTrue(processor.isX86());

  processor=ArchUtils.getProcessor(IA64_32);

  assertEqualsTypeNotNull(Processor.Type.IA_64,processor);

  assertTrue(processor.isIA64());

  processor=ArchUtils.getProcessor(IA64);

  assertEqualsTypeNotNull(Processor.Type.IA_64,processor);

  assertTrue(processor.isIA64());

  assertNotEqualsTypeNotNull(Processor.Type.X86,processor);

  assertFalse(processor.isX86());

  processor=ArchUtils.getProcessor(PPC);

  assertEqualsTypeNotNull(Processor.Type.PPC,processor);

  assertTrue(processor.isPPC());

  assertNotEqualsTypeNotNull(Processor.Type.IA_64,processor);

  assertFalse(processor.isIA64());

  processor=ArchUtils.getProcessor(PPC64);

  assertEqualsTypeNotNull(Processor.Type.PPC,processor);

  assertTrue(processor.isPPC());

}

Location: ArchUtilsTest.java

Content: 

@Test public void testArchLabels(){

  for (  final Arch arch : Arch.values()) {

    assertFalse(arch.getLabel().isEmpty());

  }

}

Location: ArchUtilsTest.java

Content: 

@Test public void testGetProcessor(){

  assertNotNull(ArchUtils.getProcessor(X86));

  assertNull(ArchUtils.getProcessor("NA"));

}

Location: ArchUtilsTest.java

Content: 

@Test public void testIs32BitJVM(){

  Processor processor=ArchUtils.getProcessor(X86);

  assertEqualsArchNotNull(Processor.Arch.BIT_32,processor);

  assertTrue(processor.is32Bit());

  processor=ArchUtils.getProcessor(IA64_32);

  assertEqualsArchNotNull(Processor.Arch.BIT_32,processor);

  assertTrue(processor.is32Bit());

  processor=ArchUtils.getProcessor(PPC);

  assertEqualsArchNotNull(Processor.Arch.BIT_32,processor);

  processor.is32Bit();

  processor=ArchUtils.getProcessor(X86_64);

  assertNotEqualsArchNotNull(Processor.Arch.BIT_32,processor);

  assertFalse(processor.is32Bit());

  processor=ArchUtils.getProcessor(PPC64);

  assertNotEqualsArchNotNull(Processor.Arch.BIT_32,processor);

  assertFalse(processor.is32Bit());

  processor=ArchUtils.getProcessor(IA64);

  assertNotEqualsArchNotNull(Processor.Arch.BIT_32,processor);

  assertFalse(processor.is32Bit());

}

Location: ArchUtilsTest.java

Content: 

@Test public void testIs64BitJVM(){

  Processor processor=ArchUtils.getProcessor(X86_64);

  assertEqualsArchNotNull(Processor.Arch.BIT_64,processor);

  assertTrue(processor.is64Bit());

  processor=ArchUtils.getProcessor(PPC64);

  assertEqualsArchNotNull(Processor.Arch.BIT_64,processor);

  assertTrue(processor.is64Bit());

  processor=ArchUtils.getProcessor(IA64);

  assertEqualsArchNotNull(Processor.Arch.BIT_64,processor);

  assertTrue(processor.is64Bit());

  processor=ArchUtils.getProcessor(X86);

  assertNotEqualsArchNotNull(Processor.Arch.BIT_64,processor);

  assertFalse(processor.is64Bit());

  processor=ArchUtils.getProcessor(PPC);

  assertNotEqualsArchNotNull(Processor.Arch.BIT_64,processor);

  assertFalse(processor.is64Bit());

  processor=ArchUtils.getProcessor(IA64_32);

  assertNotEqualsArchNotNull(Processor.Arch.BIT_64,processor);

  assertFalse(processor.is64Bit());

}

