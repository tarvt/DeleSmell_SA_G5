Location: StreamsTest.java

Content: 

protected <T extends Throwable>FailableConsumer<String,T> asIntConsumer(final T pThrowable){

  return s -> {

    final int i=Integer.parseInt(s);

    if (i == 4) {

      throw pThrowable;

    }

  }

;

}

Location: StreamsTest.java

Content: 

protected <T extends Throwable>FailablePredicate<Integer,T> asIntPredicate(final T pThrowable){

  return i -> {

    if (i.intValue() == 5 && pThrowable != null) {

      throw pThrowable;

    }

    return i % 2 == 0;

  }

;

}

Location: StreamsTest.java

Content: 

private void assertEvenNumbers(final List<Integer> output){

  assertEquals(3,output.size());

  for (int i=0; i < 3; i++) {

    assertEquals((i + 1) * 2,output.get(i).intValue());

  }

}

Location: StreamsTest.java

Content: 

@TestFactory public Stream<DynamicTest> simpleStreamFilterFailing(){

  final List<String> input=Arrays.asList("1","2","3","4","5","6");

  final List<Integer> output=Failable.stream(input).map(Integer::valueOf).filter(asIntPredicate(null)).collect(Collectors.toList());

  assertEvenNumbers(output);

  return Stream.of(dynamicTest("IllegalArgumentException",() -> {

    final IllegalArgumentException iae=new IllegalArgumentException("Invalid argument: " + 5);

    final Executable testMethod=() -> Failable.stream(input).map(Integer::valueOf).filter(asIntPredicate(iae)).collect(Collectors.toList());

    final IllegalArgumentException thrown=assertThrows(IllegalArgumentException.class,testMethod);

    assertThat(thrown.getMessage(),is(equalTo("Invalid argument: " + 5)));

  }

),dynamicTest("OutOfMemoryError",() -> {

    final OutOfMemoryError oome=new OutOfMemoryError();

    final Executable testMethod=() -> Failable.stream(input).map(Integer::valueOf).filter(asIntPredicate(oome)).collect(Collectors.toList());

    final OutOfMemoryError thrown=assertThrows(OutOfMemoryError.class,testMethod);

    assertThat(thrown.getMessage(),is(nullValue()));

  }

),dynamicTest("SAXException",() -> {

    final SAXException se=new SAXException();

    final Executable testMethod=() -> Failable.stream(input).map(Integer::valueOf).filter(asIntPredicate(se)).collect(Collectors.toList());

    final UndeclaredThrowableException thrown=assertThrows(UndeclaredThrowableException.class,testMethod);

    assertAll(() -> assertThat(thrown.getMessage(),is(nullValue())),() -> assertThat(thrown.getCause(),is(equalTo(se))));

  }

));

}

Location: StreamsTest.java

Content: 

@TestFactory public Stream<DynamicTest> simpleStreamForEachFailing(){

  final List<String> input=Arrays.asList("1","2","3","4","5","6");

  return Stream.of(dynamicTest("IllegalArgumentException",() -> {

    final IllegalArgumentException ise=new IllegalArgumentException();

    final Executable testMethod=() -> Failable.stream(input).forEach(asIntConsumer(ise));

    final IllegalArgumentException thrown=assertThrows(IllegalArgumentException.class,testMethod);

    assertThat(thrown.getMessage(),is(nullValue()));

  }

),dynamicTest("OutOfMemoryError",() -> {

    final OutOfMemoryError oome=new OutOfMemoryError();

    final Executable oomeTestMethod=() -> Failable.stream(input).forEach(asIntConsumer(oome));

    final OutOfMemoryError oomeThrown=assertThrows(OutOfMemoryError.class,oomeTestMethod);

    assertThat(oomeThrown.getMessage(),is(nullValue()));

  }

),dynamicTest("SAXException",() -> {

    final SAXException se=new SAXException();

    final Executable seTestMethod=() -> Failable.stream(input).forEach(asIntConsumer(se));

    final UndeclaredThrowableException seThrown=assertThrows(UndeclaredThrowableException.class,seTestMethod);

    assertAll(() -> assertThat(seThrown.getMessage(),is(nullValue())),() -> assertThat(seThrown.getCause(),is(equalTo(se))));

  }

));

}

Location: StreamsTest.java

Content: 

@Test public void testOfArray(){

  assertEquals(0,Streams.of((Object[])null).count());

  assertEquals(1,Streams.of("foo").count());

  assertEquals(2,Streams.of("foo","bar").count());

}

Location: StreamsTest.java

Content: 

@Test public void testSimpleStreamFilter(){

  final List<String> input=Arrays.asList("1","2","3","4","5","6");

  final List<Integer> output=Failable.stream(input).map(Integer::valueOf).filter(i -> (i.intValue() % 2 == 0)).collect(Collectors.toList());

  assertEvenNumbers(output);

}

Location: StreamsTest.java

Content: 

@Test public void testSimpleStreamForEach(){

  final List<String> input=Arrays.asList("1","2","3","4","5","6");

  final List<Integer> output=new ArrayList<>();

  Failable.stream(input).forEach(s -> output.add(Integer.valueOf(s)));

  assertEquals(6,output.size());

  for (int i=0; i < 6; i++) {

    assertEquals(i + 1,output.get(i).intValue());

  }

}

Location: StreamsTest.java

Content: 

@Test public void testSimpleStreamMap(){

  final List<String> input=Arrays.asList("1","2","3","4","5","6");

  final List<Integer> output=Failable.stream(input).map(Integer::valueOf).collect(Collectors.toList());

  assertEquals(6,output.size());

  for (int i=0; i < 6; i++) {

    assertEquals(i + 1,output.get(i).intValue());

  }

}

Location: StreamsTest.java

Content: 

@Test public void testSimpleStreamMapFailing(){

  final List<String> input=Arrays.asList("1","2","3","4 ","5","6");

  final Executable testMethod=() -> Failable.stream(input).map(Integer::valueOf).collect(Collectors.toList());

  final NumberFormatException thrown=assertThrows(NumberFormatException.class,testMethod);

  assertEquals("For input string: \"4 \"",thrown.getMessage());

}

Location: StreamsTest.java

Content: 

@Test public void testStreamCollection(){

  final List<String> input=Arrays.asList("1","2","3","4","5","6");

  assertEquals(6,Streams.stream(input).collect(Collectors.toList()).size());

}

Location: StreamsTest.java

Content: 

@Test public void testStreamCollectionNull(){

  final List<String> input=null;

  assertEquals(0,Streams.stream(input).collect(Collectors.toList()).size());

}

Location: StreamsTest.java

Content: 

@Test public void testToArray(){

  final String[] array=Arrays.asList("2","3","1").stream().collect(Streams.toArray(String.class));

  assertNotNull(array);

  assertEquals(3,array.length);

  assertEquals("2",array[0]);

  assertEquals("3",array[1]);

  assertEquals("1",array[2]);

}

