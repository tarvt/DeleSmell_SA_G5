Location: HashCodeBuilderTest.java

Content: 

@Test public void testBooleanArrayAsObject(){

  final boolean[] obj=new boolean[2];

  assertEquals((17 * 37 + 1) * 37 + 1,new HashCodeBuilder(17,37).append((Object)obj).toHashCode());

  obj[0]=true;

  assertEquals((17 * 37 + 0) * 37 + 1,new HashCodeBuilder(17,37).append((Object)obj).toHashCode());

  obj[1]=false;

  assertEquals((17 * 37 + 0) * 37 + 1,new HashCodeBuilder(17,37).append((Object)obj).toHashCode());

}

Location: HashCodeBuilderTest.java

Content: 

@Test public void testBooleanMultiArray(){

  final boolean[][] obj=new boolean[2][];

  assertEquals(17 * 37 * 37,new HashCodeBuilder(17,37).append(obj).toHashCode());

  obj[0]=new boolean[0];

  assertEquals(17 * 37,new HashCodeBuilder(17,37).append(obj).toHashCode());

  obj[0]=new boolean[1];

  assertEquals((17 * 37 + 1) * 37,new HashCodeBuilder(17,37).append(obj).toHashCode());

  obj[0]=new boolean[2];

  assertEquals(((17 * 37 + 1) * 37 + 1) * 37,new HashCodeBuilder(17,37).append(obj).toHashCode());

  obj[0][0]=true;

  assertEquals(((17 * 37 + 0) * 37 + 1) * 37,new HashCodeBuilder(17,37).append(obj).toHashCode());

  obj[1]=new boolean[1];

  assertEquals(((17 * 37 + 0) * 37 + 1) * 37 + 1,new HashCodeBuilder(17,37).append(obj).toHashCode());

}

Location: HashCodeBuilderTest.java

Content: 

@Test public void testByteArrayAsObject(){

  final byte[] obj=new byte[2];

  assertEquals(17 * 37 * 37,new HashCodeBuilder(17,37).append((Object)obj).toHashCode());

  obj[0]=(byte)5;

  assertEquals((17 * 37 + 5) * 37,new HashCodeBuilder(17,37).append((Object)obj).toHashCode());

  obj[1]=(byte)6;

  assertEquals((17 * 37 + 5) * 37 + 6,new HashCodeBuilder(17,37).append((Object)obj).toHashCode());

}

Location: HashCodeBuilderTest.java

Content: 

@Test public void testCharArrayAsObject(){

  final char[] obj=new char[2];

  assertEquals(17 * 37 * 37,new HashCodeBuilder(17,37).append((Object)obj).toHashCode());

  obj[0]=(char)5;

  assertEquals((17 * 37 + 5) * 37,new HashCodeBuilder(17,37).append((Object)obj).toHashCode());

  obj[1]=(char)6;

  assertEquals((17 * 37 + 5) * 37 + 6,new HashCodeBuilder(17,37).append((Object)obj).toHashCode());

}

Location: HashCodeBuilderTest.java

Content: 

@Test public void testConstructorExEvenFirst(){

  assertThrows(IllegalArgumentException.class,() -> new HashCodeBuilder(2,3));

}

Location: HashCodeBuilderTest.java

Content: 

@Test public void testConstructorExEvenNegative(){

  assertThrows(IllegalArgumentException.class,() -> new HashCodeBuilder(-2,-2));

}

Location: HashCodeBuilderTest.java

Content: 

@Test public void testConstructorExEvenSecond(){

  assertThrows(IllegalArgumentException.class,() -> new HashCodeBuilder(3,2));

}

Location: HashCodeBuilderTest.java

Content: 

@Test public void testConstructorExZero(){

  assertThrows(IllegalArgumentException.class,() -> new HashCodeBuilder(0,0));

}

Location: HashCodeBuilderTest.java

Content: 

@Test public void testDoubleArrayAsObject(){

  final double[] obj=new double[2];

  assertEquals(17 * 37 * 37,new HashCodeBuilder(17,37).append((Object)obj).toHashCode());

  obj[0]=5.4d;

  final long l1=Double.doubleToLongBits(5.4d);

  final int h1=(int)(l1 ^ l1 >> 32);

  assertEquals((17 * 37 + h1) * 37,new HashCodeBuilder(17,37).append((Object)obj).toHashCode());

  obj[1]=6.3d;

  final long l2=Double.doubleToLongBits(6.3d);

  final int h2=(int)(l2 ^ l2 >> 32);

  assertEquals((17 * 37 + h1) * 37 + h2,new HashCodeBuilder(17,37).append((Object)obj).toHashCode());

}

Location: HashCodeBuilderTest.java

Content: 

@Test public void testFloatArrayAsObject(){

  final float[] obj=new float[2];

  assertEquals(17 * 37 * 37,new HashCodeBuilder(17,37).append((Object)obj).toHashCode());

  obj[0]=5.4f;

  final int h1=Float.floatToIntBits(5.4f);

  assertEquals((17 * 37 + h1) * 37,new HashCodeBuilder(17,37).append((Object)obj).toHashCode());

  obj[1]=6.3f;

  final int h2=Float.floatToIntBits(6.3f);

  assertEquals((17 * 37 + h1) * 37 + h2,new HashCodeBuilder(17,37).append((Object)obj).toHashCode());

}

Location: HashCodeBuilderTest.java

Content: 

@Test public void testIntArrayAsObject(){

  final int[] obj=new int[2];

  assertEquals(17 * 37 * 37,new HashCodeBuilder(17,37).append((Object)obj).toHashCode());

  obj[0]=5;

  assertEquals((17 * 37 + 5) * 37,new HashCodeBuilder(17,37).append((Object)obj).toHashCode());

  obj[1]=6;

  assertEquals((17 * 37 + 5) * 37 + 6,new HashCodeBuilder(17,37).append((Object)obj).toHashCode());

}

Location: HashCodeBuilderTest.java

Content: 

@Test public void testLongArrayAsObject(){

  final long[] obj=new long[2];

  assertEquals(17 * 37 * 37,new HashCodeBuilder(17,37).append((Object)obj).toHashCode());

  obj[0]=5L;

  final int h1=(int)(5L ^ 5L >> 32);

  assertEquals((17 * 37 + h1) * 37,new HashCodeBuilder(17,37).append((Object)obj).toHashCode());

  obj[1]=6L;

  final int h2=(int)(6L ^ 6L >> 32);

  assertEquals((17 * 37 + h1) * 37 + h2,new HashCodeBuilder(17,37).append((Object)obj).toHashCode());

}

Location: HashCodeBuilderTest.java

Content: 

@Test public void testObjectArrayAsObject(){

  final Object[] obj=new Object[2];

  assertEquals(17 * 37 * 37,new HashCodeBuilder(17,37).append((Object)obj).toHashCode());

  obj[0]=new Object();

  assertEquals((17 * 37 + obj[0].hashCode()) * 37,new HashCodeBuilder(17,37).append((Object)obj).toHashCode());

  obj[1]=new Object();

  assertEquals((17 * 37 + obj[0].hashCode()) * 37 + obj[1].hashCode(),new HashCodeBuilder(17,37).append((Object)obj).toHashCode());

}

Location: HashCodeBuilderTest.java

Content: 

@Test public void testReflectionHashCode(){

  assertEquals(17 * 37,HashCodeBuilder.reflectionHashCode(new TestObject(0)));

  assertEquals(17 * 37 + 123456,HashCodeBuilder.reflectionHashCode(new TestObject(123456)));

}

Location: HashCodeBuilderTest.java

Content: 

@Test public void testReflectionHashCodeEx1(){

  assertThrows(IllegalArgumentException.class,() -> HashCodeBuilder.reflectionHashCode(0,0,new TestObject(0),true));

}

Location: HashCodeBuilderTest.java

Content: 

@Test public void testReflectionHashCodeEx2(){

  assertThrows(IllegalArgumentException.class,() -> HashCodeBuilder.reflectionHashCode(2,2,new TestObject(0),true));

}

Location: HashCodeBuilderTest.java

Content: 

@Test public void testReflectionHashCodeEx3(){

  assertThrows(NullPointerException.class,() -> HashCodeBuilder.reflectionHashCode(13,19,null,true));

}

Location: HashCodeBuilderTest.java

Content: 

@Test public void testReflectionHashCodeExcludeFields(){

  final TestObjectWithMultipleFields x=new TestObjectWithMultipleFields(1,2,3);

  assertEquals(((17 * 37 + 1) * 37 + 3) * 37 + 2,HashCodeBuilder.reflectionHashCode(x));

  assertEquals(((17 * 37 + 1) * 37 + 3) * 37 + 2,HashCodeBuilder.reflectionHashCode(x,(String[])null));

  assertEquals(((17 * 37 + 1) * 37 + 3) * 37 + 2,HashCodeBuilder.reflectionHashCode(x));

  assertEquals(((17 * 37 + 1) * 37 + 3) * 37 + 2,HashCodeBuilder.reflectionHashCode(x,"xxx"));

  assertEquals((17 * 37 + 1) * 37 + 3,HashCodeBuilder.reflectionHashCode(x,"two"));

  assertEquals((17 * 37 + 1) * 37 + 2,HashCodeBuilder.reflectionHashCode(x,"three"));

  assertEquals(17 * 37 + 1,HashCodeBuilder.reflectionHashCode(x,"two","three"));

  assertEquals(17,HashCodeBuilder.reflectionHashCode(x,"one","two","three"));

  assertEquals(17,HashCodeBuilder.reflectionHashCode(x,"one","two","three","xxx"));

}

Location: HashCodeBuilderTest.java

Content: 

@Test public void testReflectionHierarchyHashCode(){

  assertEquals(17 * 37 * 37,HashCodeBuilder.reflectionHashCode(new TestSubObject(0,0,0)));

  assertEquals(17 * 37 * 37* 37,HashCodeBuilder.reflectionHashCode(new TestSubObject(0,0,0),true));

  assertEquals((17 * 37 + 7890) * 37 + 123456,HashCodeBuilder.reflectionHashCode(new TestSubObject(123456,7890,0)));

  assertEquals(((17 * 37 + 7890) * 37 + 0) * 37 + 123456,HashCodeBuilder.reflectionHashCode(new TestSubObject(123456,7890,0),true));

}

Location: HashCodeBuilderTest.java

Content: 

@Test public void testReflectionHierarchyHashCodeEx1(){

  assertThrows(IllegalArgumentException.class,() -> HashCodeBuilder.reflectionHashCode(0,0,new TestSubObject(0,0,0),true));

}

Location: HashCodeBuilderTest.java

Content: 

@Test public void testReflectionHierarchyHashCodeEx2(){

  assertThrows(IllegalArgumentException.class,() -> HashCodeBuilder.reflectionHashCode(2,2,new TestSubObject(0,0,0),true));

}

Location: HashCodeBuilderTest.java

Content: 

@Test public void testShortArrayAsObject(){

  final short[] obj=new short[2];

  assertEquals(17 * 37 * 37,new HashCodeBuilder(17,37).append((Object)obj).toHashCode());

  obj[0]=(short)5;

  assertEquals((17 * 37 + 5) * 37,new HashCodeBuilder(17,37).append((Object)obj).toHashCode());

  obj[1]=(short)6;

  assertEquals((17 * 37 + 5) * 37 + 6,new HashCodeBuilder(17,37).append((Object)obj).toHashCode());

}

Location: HashCodeBuilderTest.java

Content: 

/** 

 * Ensures LANG-520 remains true

 */

@Test public void testToHashCodeEqualsHashCode(){

  final HashCodeBuilder hcb=new HashCodeBuilder(17,37).append(new Object()).append('a');

  assertEquals(hcb.toHashCode(),hcb.hashCode(),"hashCode() is no longer returning the same value as toHashCode() - see LANG-520");

}

Location: HashCodeBuilderTest.java

Content: 

@Test public void testToHashCodeExclude(){

  final TestObjectHashCodeExclude one=new TestObjectHashCodeExclude(1,2);

  final TestObjectHashCodeExclude2 two=new TestObjectHashCodeExclude2(1,2);

  assertEquals(17 * 37 + 2,HashCodeBuilder.reflectionHashCode(one));

  assertEquals(17,HashCodeBuilder.reflectionHashCode(two));

}

