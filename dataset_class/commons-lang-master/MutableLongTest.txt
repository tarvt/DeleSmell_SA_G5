Location: MutableLongTest.java

Content: 

@Test public void testAddAndGetValueObject(){

  final MutableLong mutableLong=new MutableLong(0L);

  final long result=mutableLong.addAndGet(Long.valueOf(1L));

  assertEquals(1L,result);

  assertEquals(1L,mutableLong.longValue());

}

Location: MutableLongTest.java

Content: 

@Test public void testAddAndGetValuePrimitive(){

  final MutableLong mutableLong=new MutableLong(0L);

  final long result=mutableLong.addAndGet(1L);

  assertEquals(1L,result);

  assertEquals(1L,mutableLong.longValue());

}

Location: MutableLongTest.java

Content: 

@Test public void testAddValueObject(){

  final MutableLong mutNum=new MutableLong(1);

  mutNum.add(Long.valueOf(1));

  assertEquals(2,mutNum.intValue());

  assertEquals(2L,mutNum.longValue());

}

Location: MutableLongTest.java

Content: 

@Test public void testAddValuePrimitive(){

  final MutableLong mutNum=new MutableLong(1);

  mutNum.add(1);

  assertEquals(2,mutNum.intValue());

  assertEquals(2L,mutNum.longValue());

}

Location: MutableLongTest.java

Content: 

@Test public void testCompareTo(){

  final MutableLong mutNum=new MutableLong(0);

  assertEquals(0,mutNum.compareTo(new MutableLong(0)));

  assertEquals(+1,mutNum.compareTo(new MutableLong(-1)));

  assertEquals(-1,mutNum.compareTo(new MutableLong(1)));

}

Location: MutableLongTest.java

Content: 

@Test public void testCompareToNull(){

  final MutableLong mutNum=new MutableLong(0);

  assertThrows(NullPointerException.class,() -> mutNum.compareTo(null));

}

Location: MutableLongTest.java

Content: 

@Test public void testConstructorNull(){

  assertThrows(NullPointerException.class,() -> new MutableLong((Number)null));

}

Location: MutableLongTest.java

Content: 

@Test public void testDecrement(){

  final MutableLong mutNum=new MutableLong(1);

  mutNum.decrement();

  assertEquals(0,mutNum.intValue());

  assertEquals(0L,mutNum.longValue());

}

Location: MutableLongTest.java

Content: 

@Test public void testDecrementAndGet(){

  final MutableLong mutNum=new MutableLong(1L);

  final long result=mutNum.decrementAndGet();

  assertEquals(0,result);

  assertEquals(0,mutNum.intValue());

  assertEquals(0L,mutNum.longValue());

}

Location: MutableLongTest.java

Content: 

@Test public void testGetAndAddValueObject(){

  final MutableLong mutableLong=new MutableLong(0L);

  final long result=mutableLong.getAndAdd(Long.valueOf(1L));

  assertEquals(0L,result);

  assertEquals(1L,mutableLong.longValue());

}

Location: MutableLongTest.java

Content: 

@Test public void testGetAndAddValuePrimitive(){

  final MutableLong mutableLong=new MutableLong(0L);

  final long result=mutableLong.getAndAdd(1L);

  assertEquals(0L,result);

  assertEquals(1L,mutableLong.longValue());

}

Location: MutableLongTest.java

Content: 

@Test public void testGetAndDecrement(){

  final MutableLong mutNum=new MutableLong(1L);

  final long result=mutNum.getAndDecrement();

  assertEquals(1,result);

  assertEquals(0,mutNum.intValue());

  assertEquals(0L,mutNum.longValue());

}

Location: MutableLongTest.java

Content: 

@Test public void testGetAndIncrement(){

  final MutableLong mutNum=new MutableLong(1L);

  final long result=mutNum.getAndIncrement();

  assertEquals(1,result);

  assertEquals(2,mutNum.intValue());

  assertEquals(2L,mutNum.longValue());

}

Location: MutableLongTest.java

Content: 

@Test public void testGetSet(){

  final MutableLong mutNum=new MutableLong(0);

  assertEquals(0,new MutableLong().longValue());

  assertEquals(Long.valueOf(0),new MutableLong().getValue());

  mutNum.setValue(1);

  assertEquals(1,mutNum.longValue());

  assertEquals(Long.valueOf(1),mutNum.getValue());

  mutNum.setValue(Long.valueOf(2));

  assertEquals(2,mutNum.longValue());

  assertEquals(Long.valueOf(2),mutNum.getValue());

  mutNum.setValue(new MutableLong(3));

  assertEquals(3,mutNum.longValue());

  assertEquals(Long.valueOf(3),mutNum.getValue());

}

Location: MutableLongTest.java

Content: 

@Test public void testIncrement(){

  final MutableLong mutNum=new MutableLong(1);

  mutNum.increment();

  assertEquals(2,mutNum.intValue());

  assertEquals(2L,mutNum.longValue());

}

Location: MutableLongTest.java

Content: 

@Test public void testIncrementAndGet(){

  final MutableLong mutNum=new MutableLong(1L);

  final long result=mutNum.incrementAndGet();

  assertEquals(2,result);

  assertEquals(2,mutNum.intValue());

  assertEquals(2L,mutNum.longValue());

}

Location: MutableLongTest.java

Content: 

@Test public void testPrimitiveValues(){

  final MutableLong mutNum=new MutableLong(1L);

  assertEquals(1.0F,mutNum.floatValue());

  assertEquals(1.0,mutNum.doubleValue());

  assertEquals((byte)1,mutNum.byteValue());

  assertEquals((short)1,mutNum.shortValue());

  assertEquals(1,mutNum.intValue());

  assertEquals(1L,mutNum.longValue());

}

Location: MutableLongTest.java

Content: 

@Test public void testSetNull(){

  final MutableLong mutNum=new MutableLong(0);

  assertThrows(NullPointerException.class,() -> mutNum.setValue(null));

}

Location: MutableLongTest.java

Content: 

@Test public void testSubtractValueObject(){

  final MutableLong mutNum=new MutableLong(1);

  mutNum.subtract(Long.valueOf(1));

  assertEquals(0,mutNum.intValue());

  assertEquals(0L,mutNum.longValue());

}

Location: MutableLongTest.java

Content: 

@Test public void testSubtractValuePrimitive(){

  final MutableLong mutNum=new MutableLong(1);

  mutNum.subtract(1);

  assertEquals(0,mutNum.intValue());

  assertEquals(0L,mutNum.longValue());

}

Location: MutableLongTest.java

Content: 

@Test public void testToLong(){

  assertEquals(Long.valueOf(0L),new MutableLong(0L).toLong());

  assertEquals(Long.valueOf(123L),new MutableLong(123L).toLong());

}

