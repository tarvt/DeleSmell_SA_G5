Location: TripleTest.java

Content: 

@Test public void testComparable1(){

  final Triple<String,String,String> triple1=Triple.of("A","D","A");

  final Triple<String,String,String> triple2=Triple.of("B","C","A");

  assertEquals(0,triple1.compareTo(triple1));

  assertTrue(triple1.compareTo(triple2) < 0);

  assertEquals(0,triple2.compareTo(triple2));

  assertTrue(triple2.compareTo(triple1) > 0);

}

Location: TripleTest.java

Content: 

@Test public void testComparable2(){

  final Triple<String,String,String> triple1=Triple.of("A","C","B");

  final Triple<String,String,String> triple2=Triple.of("A","D","B");

  assertEquals(0,triple1.compareTo(triple1));

  assertTrue(triple1.compareTo(triple2) < 0);

  assertEquals(0,triple2.compareTo(triple2));

  assertTrue(triple2.compareTo(triple1) > 0);

}

Location: TripleTest.java

Content: 

@Test public void testComparable3(){

  final Triple<String,String,String> triple1=Triple.of("A","A","D");

  final Triple<String,String,String> triple2=Triple.of("A","B","C");

  assertEquals(0,triple1.compareTo(triple1));

  assertTrue(triple1.compareTo(triple2) < 0);

  assertEquals(0,triple2.compareTo(triple2));

  assertTrue(triple2.compareTo(triple1) > 0);

}

Location: TripleTest.java

Content: 

@Test public void testComparable4(){

  final Triple<String,String,String> triple1=Triple.of("B","A","C");

  final Triple<String,String,String> triple2=Triple.of("B","A","D");

  assertEquals(0,triple1.compareTo(triple1));

  assertTrue(triple1.compareTo(triple2) < 0);

  assertEquals(0,triple2.compareTo(triple2));

  assertTrue(triple2.compareTo(triple1) > 0);

}

Location: TripleTest.java

Content: 

@Test public void testCompatibilityBetweenTriples(){

  final Triple<Integer,String,Boolean> triple=ImmutableTriple.of(0,"foo",Boolean.TRUE);

  final Triple<Integer,String,Boolean> triple2=MutableTriple.of(0,"foo",Boolean.TRUE);

  assertEquals(triple,triple2);

  assertEquals(triple.hashCode(),triple2.hashCode());

  final HashSet<Triple<Integer,String,Boolean>> set=new HashSet<>();

  set.add(triple);

  assertTrue(set.contains(triple2));

}

Location: TripleTest.java

Content: 

@Test public void testFormattable_padded(){

  final Triple<String,String,String> triple=Triple.of("Key","Something","Value");

  assertEquals("         (Key,Something,Value)",String.format("%1$30s",triple));

}

Location: TripleTest.java

Content: 

@Test public void testFormattable_simple(){

  final Triple<String,String,String> triple=Triple.of("Key","Something","Value");

  assertEquals("(Key,Something,Value)",String.format("%1$s",triple));

}

Location: TripleTest.java

Content: 

@Test public void testToStringCustom(){

  final Calendar date=Calendar.getInstance();

  date.set(2011,Calendar.APRIL,25);

  final Triple<String,String,Calendar> triple=Triple.of("DOB","string",date);

  assertEquals("Test created on " + "04-25-2011",triple.toString("Test created on %3$tm-%3$td-%3$tY"));

}

