Location: FormattableUtils.java

Content: 

/** 

 * Handles the common  {@code Formattable} operations of truncate-pad-append,with no ellipsis on precision overflow, and padding width underflow with spaces.

 * @param seq  the string to handle, not null

 * @param formatter  the destination formatter, not null

 * @param flags  the flags for formatting, see {@code Formattable}

 * @param width  the width of the output, see {@code Formattable}

 * @param precision  the precision of the output, see {@code Formattable}

 * @return the {@code formatter} instance, not null

 */

public static Formatter append(final CharSequence seq,final Formatter formatter,final int flags,final int width,final int precision){

  return append(seq,formatter,flags,width,precision,' ',null);

}

Location: FormattableUtils.java

Content: 

/** 

 * Handles the common  {@link Formattable} operations of truncate-pad-append,with no ellipsis on precision overflow.

 * @param seq  the string to handle, not null

 * @param formatter  the destination formatter, not null

 * @param flags  the flags for formatting, see {@code Formattable}

 * @param width  the width of the output, see {@code Formattable}

 * @param precision  the precision of the output, see {@code Formattable}

 * @param padChar  the pad character to use

 * @return the {@code formatter} instance, not null

 */

public static Formatter append(final CharSequence seq,final Formatter formatter,final int flags,final int width,final int precision,final char padChar){

  return append(seq,formatter,flags,width,precision,padChar,null);

}

Location: FormattableUtils.java

Content: 

/** 

 * Handles the common  {@link Formattable} operations of truncate-pad-append.

 * @param seq  the string to handle, not null

 * @param formatter  the destination formatter, not null

 * @param flags  the flags for formatting, see {@code Formattable}

 * @param width  the width of the output, see {@code Formattable}

 * @param precision  the precision of the output, see {@code Formattable}

 * @param padChar  the pad character to use

 * @param ellipsis  the ellipsis to use when precision dictates truncation, null orempty causes a hard truncation

 * @return the {@code formatter} instance, not null

 */

public static Formatter append(final CharSequence seq,final Formatter formatter,final int flags,final int width,final int precision,final char padChar,final CharSequence ellipsis){

  Validate.isTrue(ellipsis == null || precision < 0 || ellipsis.length() <= precision,"Specified ellipsis '%1$s' exceeds precision of %2$s",ellipsis,Integer.valueOf(precision));

  final StringBuilder buf=new StringBuilder(seq);

  if (precision >= 0 && precision < seq.length()) {

    final CharSequence actualEllipsis=ObjectUtils.defaultIfNull(ellipsis,StringUtils.EMPTY);

    buf.replace(precision - actualEllipsis.length(),seq.length(),actualEllipsis.toString());

  }

  final boolean leftJustify=(flags & LEFT_JUSTIFY) == LEFT_JUSTIFY;

  for (int i=buf.length(); i < width; i++) {

    buf.insert(leftJustify ? i : 0,padChar);

  }

  formatter.format(buf.toString());

  return formatter;

}

Location: FormattableUtils.java

Content: 

/** 

 * Handles the common  {@link Formattable} operations of truncate-pad-append,padding width underflow with spaces.

 * @param seq  the string to handle, not null

 * @param formatter  the destination formatter, not null

 * @param flags  the flags for formatting, see {@code Formattable}

 * @param width  the width of the output, see {@code Formattable}

 * @param precision  the precision of the output, see {@code Formattable}

 * @param ellipsis  the ellipsis to use when precision dictates truncation, null orempty causes a hard truncation

 * @return the {@code formatter} instance, not null

 */

public static Formatter append(final CharSequence seq,final Formatter formatter,final int flags,final int width,final int precision,final CharSequence ellipsis){

  return append(seq,formatter,flags,width,precision,' ',ellipsis);

}

Location: FormattableUtils.java

Content: 

/** 

 * <p> {@code FormattableUtils} instances should NOT be constructed instandard programming. Instead, the methods of the class should be invoked statically.</p> <p>This constructor is public to permit tools that require a JavaBean instance to operate.</p>

 */

public FormattableUtils(){

}

Location: FormattableUtils.java

Content: 

/** 

 * Gets the default formatted representation of the specified {@code Formattable}.

 * @param formattable  the instance to convert to a string, not null

 * @return the resulting string, not null

 */

public static String toString(final Formattable formattable){

  return String.format(SIMPLEST_FORMAT,formattable);

}

