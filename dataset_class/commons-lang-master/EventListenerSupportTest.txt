Location: EventListenerSupportTest.java

Content: 

private void addDeregisterListener(final EventListenerSupport<VetoableChangeListener> listenerSupport){

  listenerSupport.addListener(new VetoableChangeListener(){

    @Override public void vetoableChange(    final PropertyChangeEvent e){

      listenerSupport.removeListener(this);

    }

  }

);

}

Location: EventListenerSupportTest.java

Content: 

private VetoableChangeListener createListener(final List<VetoableChangeListener> calledListeners){

  return new VetoableChangeListener(){

    @Override public void vetoableChange(    final PropertyChangeEvent e){

      calledListeners.add(this);

    }

  }

;

}

Location: EventListenerSupportTest.java

Content: 

@Test public void testAddListenerNoDuplicates(){

  final EventListenerSupport<VetoableChangeListener> listenerSupport=EventListenerSupport.create(VetoableChangeListener.class);

  final VetoableChangeListener[] listeners=listenerSupport.getListeners();

  assertEquals(0,listeners.length);

  assertEquals(VetoableChangeListener.class,listeners.getClass().getComponentType());

  final VetoableChangeListener[] empty=listeners;

  assertSame(empty,listenerSupport.getListeners());

  final VetoableChangeListener listener1=EasyMock.createNiceMock(VetoableChangeListener.class);

  listenerSupport.addListener(listener1);

  assertEquals(1,listenerSupport.getListeners().length);

  listenerSupport.addListener(listener1,false);

  assertEquals(1,listenerSupport.getListeners().length);

  listenerSupport.removeListener(listener1);

  assertSame(empty,listenerSupport.getListeners());

}

Location: EventListenerSupportTest.java

Content: 

@Test public void testAddNullListener(){

  final EventListenerSupport<VetoableChangeListener> listenerSupport=EventListenerSupport.create(VetoableChangeListener.class);

  assertThrows(NullPointerException.class,() -> listenerSupport.addListener(null));

}

Location: EventListenerSupportTest.java

Content: 

@Test public void testCreateWithNonInterfaceParameter(){

  assertThrows(IllegalArgumentException.class,() -> EventListenerSupport.create(String.class));

}

Location: EventListenerSupportTest.java

Content: 

@Test public void testCreateWithNullParameter(){

  assertThrows(NullPointerException.class,() -> EventListenerSupport.create(null));

}

Location: EventListenerSupportTest.java

Content: 

@Test public void testEventDispatchOrder() throws PropertyVetoException {

  final EventListenerSupport<VetoableChangeListener> listenerSupport=EventListenerSupport.create(VetoableChangeListener.class);

  final List<VetoableChangeListener> calledListeners=new ArrayList<>();

  final VetoableChangeListener listener1=createListener(calledListeners);

  final VetoableChangeListener listener2=createListener(calledListeners);

  listenerSupport.addListener(listener1);

  listenerSupport.addListener(listener2);

  listenerSupport.fire().vetoableChange(new PropertyChangeEvent(new Date(),"Day",4,5));

  assertEquals(calledListeners.size(),2);

  assertSame(calledListeners.get(0),listener1);

  assertSame(calledListeners.get(1),listener2);

}

Location: EventListenerSupportTest.java

Content: 

@Test public void testGetListeners(){

  final EventListenerSupport<VetoableChangeListener> listenerSupport=EventListenerSupport.create(VetoableChangeListener.class);

  final VetoableChangeListener[] listeners=listenerSupport.getListeners();

  assertEquals(0,listeners.length);

  assertEquals(VetoableChangeListener.class,listeners.getClass().getComponentType());

  final VetoableChangeListener[] empty=listeners;

  assertSame(empty,listenerSupport.getListeners());

  final VetoableChangeListener listener1=EasyMock.createNiceMock(VetoableChangeListener.class);

  listenerSupport.addListener(listener1);

  assertEquals(1,listenerSupport.getListeners().length);

  final VetoableChangeListener listener2=EasyMock.createNiceMock(VetoableChangeListener.class);

  listenerSupport.addListener(listener2);

  assertEquals(2,listenerSupport.getListeners().length);

  listenerSupport.removeListener(listener1);

  assertEquals(1,listenerSupport.getListeners().length);

  listenerSupport.removeListener(listener2);

  assertSame(empty,listenerSupport.getListeners());

}

Location: EventListenerSupportTest.java

Content: 

@Test public void testRemoveListenerDuringEvent() throws PropertyVetoException {

  final EventListenerSupport<VetoableChangeListener> listenerSupport=EventListenerSupport.create(VetoableChangeListener.class);

  for (int i=0; i < 10; ++i) {

    addDeregisterListener(listenerSupport);

  }

  assertEquals(listenerSupport.getListenerCount(),10);

  listenerSupport.fire().vetoableChange(new PropertyChangeEvent(new Date(),"Day",4,5));

  assertEquals(listenerSupport.getListenerCount(),0);

}

Location: EventListenerSupportTest.java

Content: 

@Test public void testRemoveNullListener(){

  final EventListenerSupport<VetoableChangeListener> listenerSupport=EventListenerSupport.create(VetoableChangeListener.class);

  assertThrows(NullPointerException.class,() -> listenerSupport.removeListener(null));

}

Location: EventListenerSupportTest.java

Content: 

@Test public void testSubclassInvocationHandling() throws PropertyVetoException {

  final EventListenerSupport<VetoableChangeListener> eventListenerSupport=new EventListenerSupport<VetoableChangeListener>(VetoableChangeListener.class){

    private static final long serialVersionUID=1L;

    @Override protected java.lang.reflect.InvocationHandler createInvocationHandler(){

      return new ProxyInvocationHandler(){

        /** 

 * {@inheritDoc}

 */

        @Override public Object invoke(        final Object proxy,        final Method method,        final Object[] args) throws Throwable {

          return "vetoableChange".equals(method.getName()) && "Hour".equals(((PropertyChangeEvent)args[0]).getPropertyName()) ? null : super.invoke(proxy,method,args);

        }

      }

;

    }

  }

;

  final VetoableChangeListener listener=EasyMock.createNiceMock(VetoableChangeListener.class);

  eventListenerSupport.addListener(listener);

  final Object source=new Date();

  final PropertyChangeEvent ignore=new PropertyChangeEvent(source,"Hour",5,6);

  final PropertyChangeEvent respond=new PropertyChangeEvent(source,"Day",6,7);

  listener.vetoableChange(respond);

  EasyMock.replay(listener);

  eventListenerSupport.fire().vetoableChange(ignore);

  eventListenerSupport.fire().vetoableChange(respond);

  EasyMock.verify(listener);

}

