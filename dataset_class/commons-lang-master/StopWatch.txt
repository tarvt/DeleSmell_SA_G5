Location: StopWatch.java

Content: 

/** 

 * Creates a stopwatch for convenience.

 * @return StopWatch a stopwatch.

 * @since 3.10

 */

public static StopWatch create(){

  return new StopWatch();

}

Location: StopWatch.java

Content: 

/** 

 * Creates a started stopwatch for convenience.

 * @return StopWatch a stopwatch that's already been started.

 * @since 3.5

 */

public static StopWatch createStarted(){

  final StopWatch sw=new StopWatch();

  sw.start();

  return sw;

}

Location: StopWatch.java

Content: 

/** 

 * Returns the split time formatted by  {@link DurationFormatUtils#formatDurationHMS}.

 * @return the split time formatted by {@link DurationFormatUtils#formatDurationHMS}.

 * @since 3.10

 */

public String formatSplitTime(){

  return DurationFormatUtils.formatDurationHMS(getSplitTime());

}

Location: StopWatch.java

Content: 

/** 

 * Returns the time formatted by  {@link DurationFormatUtils#formatDurationHMS}.

 * @return the time formatted by {@link DurationFormatUtils#formatDurationHMS}.

 * @since 3.10

 */

public String formatTime(){

  return DurationFormatUtils.formatDurationHMS(getTime());

}

Location: StopWatch.java

Content: 

/** 

 * Gets the message for string presentation.

 * @return the message for string presentation.

 * @since 3.10

 */

public String getMessage(){

  return message;

}

Location: StopWatch.java

Content: 

/** 

 * <p> Gets the <em>elapsed</em> time in nanoseconds. </p> <p> This is either the time between the start and the moment this method is called, or the amount of time between start and stop. </p>

 * @return the <em>elapsed</em> time in nanoseconds.

 * @see System#nanoTime()

 * @since 3.0

 */

public long getNanoTime(){

  if (this.runningState == State.STOPPED || this.runningState == State.SUSPENDED) {

    return this.stopTimeNanos - this.startTimeNanos;

  }

  if (this.runningState == State.UNSTARTED) {

    return 0;

  }

  if (this.runningState == State.RUNNING) {

    return System.nanoTime() - this.startTimeNanos;

  }

  throw new IllegalStateException("Illegal running state has occurred.");

}

Location: StopWatch.java

Content: 

/** 

 * <p> Gets the split time in nanoseconds. </p> <p> This is the time between start and latest split. </p>

 * @return the split time in nanoseconds

 * @throws IllegalStateException if the StopWatch has not yet been split.

 * @since 3.0

 */

public long getSplitNanoTime(){

  if (this.splitState != SplitState.SPLIT) {

    throw new IllegalStateException("Stopwatch must be split to get the split time.");

  }

  return this.stopTimeNanos - this.startTimeNanos;

}

Location: StopWatch.java

Content: 

/** 

 * <p> Gets the split time on the stopwatch. </p> <p> This is the time between start and latest split. </p>

 * @return the split time in milliseconds

 * @throws IllegalStateException if the StopWatch has not yet been split.

 * @since 2.1

 */

public long getSplitTime(){

  return getSplitNanoTime() / NANO_2_MILLIS;

}

Location: StopWatch.java

Content: 

/** 

 * Gets the time this stopwatch was started in milliseconds, between the current time and midnight, January 1, 1970 UTC.

 * @return the time this stopwatch was started in milliseconds, between the current time and midnight, January 1,1970 UTC.

 * @throws IllegalStateException if this StopWatch has not been started

 * @since 2.4

 */

public long getStartTime(){

  if (this.runningState == State.UNSTARTED) {

    throw new IllegalStateException("Stopwatch has not been started");

  }

  return this.startTimeMillis;

}

Location: StopWatch.java

Content: 

/** 

 * Gets the time this stopwatch was stopped in milliseconds, between the current time and midnight, January 1, 1970 UTC.

 * @return the time this stopwatch was started in milliseconds, between the current time and midnight, January 1,1970 UTC.

 * @throws IllegalStateException if this StopWatch has not been started

 * @since 3.12.0

 */

public long getStopTime(){

  if (this.runningState == State.UNSTARTED) {

    throw new IllegalStateException("Stopwatch has not been started");

  }

  return this.stopTimeMillis;

}

Location: StopWatch.java

Content: 

/** 

 * <p> Gets the time on the stopwatch. </p> <p> This is either the time between the start and the moment this method is called, or the amount of time between start and stop. </p>

 * @return the time in milliseconds

 */

public long getTime(){

  return getNanoTime() / NANO_2_MILLIS;

}

Location: StopWatch.java

Content: 

/** 

 * <p> Gets the time in the specified TimeUnit. </p> <p> This is either the time between the start and the moment this method is called, or the amount of time between start and stop. The resulting time will be expressed in the desired TimeUnit with any remainder rounded down. For example, if the specified unit is  {@code TimeUnit.HOURS} and the stopwatch time is 59 minutes, then theresult returned will be  {@code 0}. </p>

 * @param timeUnit the unit of time, not null

 * @return the time in the specified TimeUnit, rounded down

 * @since 3.5

 */

public long getTime(final TimeUnit timeUnit){

  return timeUnit.convert(getNanoTime(),TimeUnit.NANOSECONDS);

}

Location: StopWatch.java

Content: 

/** 

 * <p> Returns whether the StopWatch is started. A suspended StopWatch is also started watch. </p>

 * @return boolean If the StopWatch is started.

 * @since 3.2

 */

public boolean isStarted(){

  return runningState.isStarted();

}

Location: StopWatch.java

Content: 

/** 

 * <p> Returns whether StopWatch is stopped. The stopwatch which's not yet started and explicitly stopped stopwatch is considered as stopped. </p>

 * @return boolean If the StopWatch is stopped.

 * @since 3.2

 */

public boolean isStopped(){

  return runningState.isStopped();

}

Location: StopWatch.java

Content: 

/** 

 * <p> Returns whether the StopWatch is suspended. </p>

 * @return booleanIf the StopWatch is suspended.

 * @since 3.2

 */

public boolean isSuspended(){

  return runningState.isSuspended();

}

Location: StopWatch.java

Content: 

/** 

 * <p> Resumes the stopwatch after a suspend. </p> <p> This method resumes the watch after it was suspended. The watch will not include time between the suspend and resume calls in the total time. </p>

 * @throws IllegalStateException if the StopWatch has not been suspended.

 */

public void resume(){

  if (this.runningState != State.SUSPENDED) {

    throw new IllegalStateException("Stopwatch must be suspended to resume. ");

  }

  this.startTimeNanos+=System.nanoTime() - this.stopTimeNanos;

  this.runningState=State.RUNNING;

}

Location: StopWatch.java

Content: 

/** 

 * <p> Splits the time. </p> <p> This method sets the stop time of the watch to allow a time to be extracted. The start time is unaffected, enabling  {@link #unsplit()} to continue the timing from the original start point.</p>

 * @throws IllegalStateException if the StopWatch is not running.

 */

public void split(){

  if (this.runningState != State.RUNNING) {

    throw new IllegalStateException("Stopwatch is not running. ");

  }

  this.stopTimeNanos=System.nanoTime();

  this.splitState=SplitState.SPLIT;

}

Location: StopWatch.java

Content: 

/** 

 * <p> Starts the stopwatch. </p> <p> This method starts a new timing session, clearing any previous values. </p>

 * @throws IllegalStateException if the StopWatch is already running.

 */

public void start(){

  if (this.runningState == State.STOPPED) {

    throw new IllegalStateException("Stopwatch must be reset before being restarted. ");

  }

  if (this.runningState != State.UNSTARTED) {

    throw new IllegalStateException("Stopwatch already started. ");

  }

  this.startTimeNanos=System.nanoTime();

  this.startTimeMillis=System.currentTimeMillis();

  this.runningState=State.RUNNING;

}

Location: StopWatch.java

Content: 

/** 

 * <p> Stops the stopwatch. </p> <p> This method ends a new timing session, allowing the time to be retrieved. </p>

 * @throws IllegalStateException if the StopWatch is not running.

 */

public void stop(){

  if (this.runningState != State.RUNNING && this.runningState != State.SUSPENDED) {

    throw new IllegalStateException("Stopwatch is not running. ");

  }

  if (this.runningState == State.RUNNING) {

    this.stopTimeNanos=System.nanoTime();

    this.stopTimeMillis=System.currentTimeMillis();

  }

  this.runningState=State.STOPPED;

}

Location: StopWatch.java

Content: 

/** 

 * <p> Constructor. </p>

 */

public StopWatch(){

  this(null);

}

Location: StopWatch.java

Content: 

/** 

 * <p> Constructor. </p>

 * @param message A message for string presentation.

 * @since 3.10

 */

public StopWatch(final String message){

  this.message=message;

}

Location: StopWatch.java

Content: 

/** 

 * <p> Suspends the stopwatch for later resumption. </p> <p> This method suspends the watch until it is resumed. The watch will not include time between the suspend and resume calls in the total time. </p>

 * @throws IllegalStateException if the StopWatch is not currently running.

 */

public void suspend(){

  if (this.runningState != State.RUNNING) {

    throw new IllegalStateException("Stopwatch must be running to suspend. ");

  }

  this.stopTimeNanos=System.nanoTime();

  this.stopTimeMillis=System.currentTimeMillis();

  this.runningState=State.SUSPENDED;

}

Location: StopWatch.java

Content: 

/** 

 * <p> Gets a summary of the split time that the stopwatch recorded as a string. </p> <p> The format used is ISO 8601-like, [<i>message</i> ]<i>hours</i>:<i>minutes</i>:<i>seconds</i>.<i>milliseconds</i>. </p>

 * @return the split time as a String

 * @since 2.1

 * @since 3.10 Returns the prefix {@code "message "} if the message is set.

 */

public String toSplitString(){

  final String msgStr=Objects.toString(message,StringUtils.EMPTY);

  final String formattedTime=formatSplitTime();

  return msgStr.isEmpty() ? formattedTime : msgStr + StringUtils.SPACE + formattedTime;

}

Location: StopWatch.java

Content: 

/** 

 * <p> Removes a split. </p> <p> This method clears the stop time. The start time is unaffected, enabling timing from the original start point to continue. </p>

 * @throws IllegalStateException if the StopWatch has not been split.

 */

public void unsplit(){

  if (this.splitState != SplitState.SPLIT) {

    throw new IllegalStateException("Stopwatch has not been split. ");

  }

  this.splitState=SplitState.UNSPLIT;

}

