Location: CharSequenceTranslator.java

Content: 

/** 

 * <p>Returns an upper case hexadecimal  {@code String} for the givencharacter.</p>

 * @param codepoint The codepoint to convert.

 * @return An upper case hexadecimal {@code String}

 */

public static String hex(final int codepoint){

  return Integer.toHexString(codepoint).toUpperCase(Locale.ENGLISH);

}

Location: CharSequenceTranslator.java

Content: 

/** 

 * Helper for non-Writer usage.

 * @param input CharSequence to be translated

 * @return String output of translation

 */

public final String translate(final CharSequence input){

  if (input == null) {

    return null;

  }

  try {

    final StringWriter writer=new StringWriter(input.length() * 2);

    translate(input,writer);

    return writer.toString();

  }

 catch (  final IOException ioe) {

    throw new RuntimeException(ioe);

  }

}

Location: CharSequenceTranslator.java

Content: 

/** 

 * Translate an input onto a Writer. This is intentionally final as its algorithm is tightly coupled with the abstract method of this class.

 * @param input CharSequence that is being translated

 * @param out Writer to translate the text to

 * @throws IOException if and only if the Writer produces an IOException

 */

public final void translate(final CharSequence input,final Writer out) throws IOException {

  if (out == null) {

    throw new IllegalArgumentException("The Writer must not be null");

  }

  if (input == null) {

    return;

  }

  int pos=0;

  final int len=input.length();

  while (pos < len) {

    final int consumed=translate(input,pos,out);

    if (consumed == 0) {

      final char c1=input.charAt(pos);

      out.write(c1);

      pos++;

      if (Character.isHighSurrogate(c1) && pos < len) {

        final char c2=input.charAt(pos);

        if (Character.isLowSurrogate(c2)) {

          out.write(c2);

          pos++;

        }

      }

      continue;

    }

    for (int pt=0; pt < consumed; pt++) {

      pos+=Character.charCount(Character.codePointAt(input,pos));

    }

  }

}

Location: CharSequenceTranslator.java

Content: 

/** 

 * Helper method to create a merger of this translator with another set of translators. Useful in customizing the standard functionality.

 * @param translators CharSequenceTranslator array of translators to merge with this one

 * @return CharSequenceTranslator merging this translator with the others

 */

public final CharSequenceTranslator with(final CharSequenceTranslator... translators){

  final CharSequenceTranslator[] newArray=new CharSequenceTranslator[translators.length + 1];

  newArray[0]=this;

  System.arraycopy(translators,0,newArray,1,translators.length);

  return new AggregateTranslator(newArray);

}

