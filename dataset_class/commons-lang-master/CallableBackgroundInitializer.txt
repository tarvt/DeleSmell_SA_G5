Location: CallableBackgroundInitializer.java

Content: 

/** 

 * Creates a new instance of  {@code CallableBackgroundInitializer} and setsthe  {@code Callable} to be executed in a background thread.

 * @param call the {@code Callable} (must not be <b>null</b>)

 * @throws IllegalArgumentException if the {@code Callable} is <b>null</b>

 */

public CallableBackgroundInitializer(final Callable<T> call){

  checkCallable(call);

  callable=call;

}

Location: CallableBackgroundInitializer.java

Content: 

/** 

 * Creates a new instance of  {@code CallableBackgroundInitializer} andinitializes it with the  {@code Callable} to be executed in a backgroundthread and the  {@code ExecutorService} for managing the backgroundexecution.

 * @param call the {@code Callable} (must not be <b>null</b>)

 * @param exec an external {@code ExecutorService} to be used for taskexecution

 * @throws IllegalArgumentException if the {@code Callable} is <b>null</b>

 */

public CallableBackgroundInitializer(final Callable<T> call,final ExecutorService exec){

  super(exec);

  checkCallable(call);

  callable=call;

}

Location: CallableBackgroundInitializer.java

Content: 

/** 

 * Tests the passed in  {@code Callable} and throws an exception if it isundefined.

 * @param callable the object to check

 * @throws IllegalArgumentException if the {@code Callable} is <b>null</b>

 */

private void checkCallable(final Callable<T> callable){

  Validate.notNull(callable,"callable");

}

Location: CallableBackgroundInitializer.java

Content: 

/** 

 * Performs initialization in a background thread. This implementation delegates to the  {@code Callable} passed at construction time of thisobject.

 * @return the result of the initialization

 * @throws Exception if an error occurs

 */

@Override protected T initialize() throws Exception {

  return callable.call();

}

