Location: DurationUtils.java

Content: 

/** 

 * Accepts the function with the duration as a long milliseconds and int nanoseconds.

 * @param < T > The function exception.

 * @param consumer Accepting function.

 * @param duration The duration to pick apart.

 * @throws T See the function signature.

 */

@SuppressWarnings("boxing") public static <T extends Throwable>void accept(final FailableBiConsumer<Long,Integer,T> consumer,final Duration duration) throws T {

  if (consumer != null && duration != null) {

    consumer.accept(duration.toMillis(),getNanosOfMiili(duration));

  }

}

Location: DurationUtils.java

Content: 

/** 

 * Gets the nanosecond part of a Duration converted to milliseconds. <p> Handy when calling an API that takes a long of milliseconds and an int of nanoseconds. For example, {@link Object#wait(long,int)} and {@link Thread#sleep(long,int)}. </p> <p> Note that is this different from  {@link Duration#getNano()} because a duration are seconds and nanoseconds.</p>

 * @param duration The duration to query.

 * @return nanoseconds between 0 and 999,999.

 */

public static int getNanosOfMiili(final Duration duration){

  return duration.getNano() % 1_000_000;

}

Location: DurationUtils.java

Content: 

/** 

 * Tests whether the given Duration is positive (&gt;0).

 * @param duration the value to test

 * @return whether the given Duration is positive (&gt;0).

 */

public static boolean isPositive(final Duration duration){

  return !duration.isNegative() && !duration.isZero();

}

Location: DurationUtils.java

Content: 

/** 

 * Converts a  {@link TimeUnit} to a {@link ChronoUnit}.

 * @param timeUnit A non-null TimeUnit.

 * @return The corresponding ChronoUnit.

 */

static ChronoUnit toChronoUnit(final TimeUnit timeUnit){

switch (Objects.requireNonNull(timeUnit)) {

case NANOSECONDS:

    return ChronoUnit.NANOS;

case MICROSECONDS:

  return ChronoUnit.MICROS;

case MILLISECONDS:

return ChronoUnit.MILLIS;

case SECONDS:

return ChronoUnit.SECONDS;

case MINUTES:

return ChronoUnit.MINUTES;

case HOURS:

return ChronoUnit.HOURS;

case DAYS:

return ChronoUnit.DAYS;

default :

throw new IllegalArgumentException(timeUnit.toString());

}

}

Location: DurationUtils.java

Content: 

/** 

 * Converts an amount and TimeUnit into a Duration.

 * @param amount   the amount of the duration, measured in terms of the unit, positive or negative

 * @param timeUnit the unit that the duration is measured in, must have an exact duration, not null

 * @return a Duration.

 */

public static Duration toDuration(final long amount,final TimeUnit timeUnit){

  return Duration.of(amount,toChronoUnit(timeUnit));

}

Location: DurationUtils.java

Content: 

/** 

 * Converts a Duration to milliseconds bound to an int (instead of a long). <p> Handy for low-level APIs that take millisecond timeouts in ints rather than longs. </p> <ul> <li>If the duration milliseconds are greater than  {@link Integer#MAX_VALUE}, then return {@link Integer#MAX_VALUE}.</li> <li>If the duration milliseconds are lesser than  {@link Integer#MIN_VALUE}, then return {@link Integer#MIN_VALUE}.</li> </ul>

 * @param duration The duration to convert, not null.

 * @return int milliseconds.

 */

public static int toMillisInt(final Duration duration){

  Objects.requireNonNull(duration,"duration");

  return LONG_TO_INT_RANGE.fit(Long.valueOf(duration.toMillis())).intValue();

}

Location: DurationUtils.java

Content: 

/** 

 * Returns the given non-null value or  {@link Duration#ZERO} if null.

 * @param duration The duration to test.

 * @return The given duration or {@link Duration#ZERO}.

 */

public static Duration zeroIfNull(final Duration duration){

  return ObjectUtils.defaultIfNull(duration,Duration.ZERO);

}

