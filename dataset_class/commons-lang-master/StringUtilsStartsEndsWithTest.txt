Location: StringUtilsStartsEndsWithTest.java

Content: 

@Test public void testEndsWithAny(){

  assertFalse(StringUtils.endsWithAny(null,(String)null),"StringUtils.endsWithAny(null, null)");

  assertFalse(StringUtils.endsWithAny(null,"abc"),"StringUtils.endsWithAny(null, new String[] {abc})");

  assertFalse(StringUtils.endsWithAny("abcxyz",(String)null),"StringUtils.endsWithAny(abcxyz, null)");

  assertTrue(StringUtils.endsWithAny("abcxyz",""),"StringUtils.endsWithAny(abcxyz, new String[] {\"\"})");

  assertTrue(StringUtils.endsWithAny("abcxyz","xyz"),"StringUtils.endsWithAny(abcxyz, new String[] {xyz})");

  assertTrue(StringUtils.endsWithAny("abcxyz",null,"xyz","abc"),"StringUtils.endsWithAny(abcxyz, new String[] {null, xyz, abc})");

  assertFalse(StringUtils.endsWithAny("defg",null,"xyz","abc"),"StringUtils.endsWithAny(defg, new String[] {null, xyz, abc})");

  assertTrue(StringUtils.endsWithAny("abcXYZ","def","XYZ"));

  assertFalse(StringUtils.endsWithAny("abcXYZ","def","xyz"));

  assertTrue(StringUtils.endsWithAny("abcXYZ","def","YZ"));

  assertFalse(StringUtils.endsWithAny("abcXYZ",(CharSequence)null));

  assertFalse(StringUtils.endsWithAny("abcXYZ",(CharSequence[])null));

  assertTrue(StringUtils.endsWithAny("abcXYZ",""));

  assertTrue(StringUtils.endsWithAny("abcxyz",new StringBuilder("abc"),new StringBuffer("xyz")),"StringUtils.endsWithAny(abcxyz, StringBuilder(abc), StringBuffer(xyz))");

  assertTrue(StringUtils.endsWithAny(new StringBuffer("abcxyz"),new StringBuilder("abc"),new StringBuffer("xyz")),"StringUtils.endsWithAny(StringBuffer(abcxyz), StringBuilder(abc), StringBuffer(xyz))");

}

Location: StringUtilsStartsEndsWithTest.java

Content: 

/** 

 * Test StringUtils.endsWithIgnoreCase()

 */

@Test public void testEndsWithIgnoreCase(){

  assertTrue(StringUtils.endsWithIgnoreCase(null,null),"endsWithIgnoreCase(null, null)");

  assertFalse(StringUtils.endsWithIgnoreCase(FOOBAR,null),"endsWithIgnoreCase(FOOBAR, null)");

  assertFalse(StringUtils.endsWithIgnoreCase(null,FOO),"endsWithIgnoreCase(null, FOO)");

  assertTrue(StringUtils.endsWithIgnoreCase(FOOBAR,""),"endsWithIgnoreCase(FOOBAR, \"\")");

  assertFalse(StringUtils.endsWithIgnoreCase(foobar,foo),"endsWithIgnoreCase(foobar, foo)");

  assertFalse(StringUtils.endsWithIgnoreCase(FOOBAR,FOO),"endsWithIgnoreCase(FOOBAR, FOO)");

  assertFalse(StringUtils.endsWithIgnoreCase(foobar,FOO),"endsWithIgnoreCase(foobar, FOO)");

  assertFalse(StringUtils.endsWithIgnoreCase(FOOBAR,foo),"endsWithIgnoreCase(FOOBAR, foo)");

  assertFalse(StringUtils.endsWithIgnoreCase(foo,foobar),"endsWithIgnoreCase(foo, foobar)");

  assertFalse(StringUtils.endsWithIgnoreCase(bar,foobar),"endsWithIgnoreCase(foo, foobar)");

  assertTrue(StringUtils.endsWithIgnoreCase(foobar,bar),"endsWithIgnoreCase(foobar, bar)");

  assertTrue(StringUtils.endsWithIgnoreCase(FOOBAR,BAR),"endsWithIgnoreCase(FOOBAR, BAR)");

  assertTrue(StringUtils.endsWithIgnoreCase(foobar,BAR),"endsWithIgnoreCase(foobar, BAR)");

  assertTrue(StringUtils.endsWithIgnoreCase(FOOBAR,bar),"endsWithIgnoreCase(FOOBAR, bar)");

  assertTrue(StringUtils.endsWithIgnoreCase("abcdef","def"));

  assertTrue(StringUtils.endsWithIgnoreCase("ABCDEF","def"));

  assertFalse(StringUtils.endsWithIgnoreCase("ABCDEF","cde"));

  assertTrue(StringUtils.endsWithIgnoreCase("\u03B1\u03B2\u03B3\u03B4","\u0394"),"endsWith(\u03B1\u03B2\u03B3\u03B4, \u0394)");

  assertFalse(StringUtils.endsWithIgnoreCase("\u03B1\u03B2\u03B3\u03B4","\u0393"),"endsWith(\u03B1\u03B2\u03B3\u03B4, \u0393)");

}

Location: StringUtilsStartsEndsWithTest.java

Content: 

@Test public void testStartsWithAny(){

  assertFalse(StringUtils.startsWithAny(null,(String[])null));

  assertFalse(StringUtils.startsWithAny(null,"abc"));

  assertFalse(StringUtils.startsWithAny("abcxyz",(String[])null));

  assertFalse(StringUtils.startsWithAny("abcxyz"));

  assertTrue(StringUtils.startsWithAny("abcxyz","abc"));

  assertTrue(StringUtils.startsWithAny("abcxyz",null,"xyz","abc"));

  assertFalse(StringUtils.startsWithAny("abcxyz",null,"xyz","abcd"));

  assertTrue(StringUtils.startsWithAny("abcxyz",""));

  assertFalse(StringUtils.startsWithAny("abcxyz",null,"xyz","ABCX"));

  assertFalse(StringUtils.startsWithAny("ABCXYZ",null,"xyz","abc"));

  assertTrue(StringUtils.startsWithAny("abcxyz",new StringBuilder("xyz"),new StringBuffer("abc")),"StringUtils.startsWithAny(abcxyz, StringBuilder(xyz), StringBuffer(abc))");

  assertTrue(StringUtils.startsWithAny(new StringBuffer("abcxyz"),new StringBuilder("xyz"),new StringBuffer("abc")),"StringUtils.startsWithAny(StringBuffer(abcxyz), StringBuilder(xyz), StringBuffer(abc))");

}

Location: StringUtilsStartsEndsWithTest.java

Content: 

/** 

 * Test StringUtils.testStartsWithIgnoreCase()

 */

@Test public void testStartsWithIgnoreCase(){

  assertTrue(StringUtils.startsWithIgnoreCase(null,null),"startsWithIgnoreCase(null, null)");

  assertFalse(StringUtils.startsWithIgnoreCase(FOOBAR,null),"startsWithIgnoreCase(FOOBAR, null)");

  assertFalse(StringUtils.startsWithIgnoreCase(null,FOO),"startsWithIgnoreCase(null, FOO)");

  assertTrue(StringUtils.startsWithIgnoreCase(FOOBAR,""),"startsWithIgnoreCase(FOOBAR, \"\")");

  assertTrue(StringUtils.startsWithIgnoreCase(foobar,foo),"startsWithIgnoreCase(foobar, foo)");

  assertTrue(StringUtils.startsWithIgnoreCase(FOOBAR,FOO),"startsWithIgnoreCase(FOOBAR, FOO)");

  assertTrue(StringUtils.startsWithIgnoreCase(foobar,FOO),"startsWithIgnoreCase(foobar, FOO)");

  assertTrue(StringUtils.startsWithIgnoreCase(FOOBAR,foo),"startsWithIgnoreCase(FOOBAR, foo)");

  assertFalse(StringUtils.startsWithIgnoreCase(foo,foobar),"startsWithIgnoreCase(foo, foobar)");

  assertFalse(StringUtils.startsWithIgnoreCase(bar,foobar),"startsWithIgnoreCase(foo, foobar)");

  assertFalse(StringUtils.startsWithIgnoreCase(foobar,bar),"startsWithIgnoreCase(foobar, bar)");

  assertFalse(StringUtils.startsWithIgnoreCase(FOOBAR,BAR),"startsWithIgnoreCase(FOOBAR, BAR)");

  assertFalse(StringUtils.startsWithIgnoreCase(foobar,BAR),"startsWithIgnoreCase(foobar, BAR)");

  assertFalse(StringUtils.startsWithIgnoreCase(FOOBAR,bar),"startsWithIgnoreCase(FOOBAR, bar)");

}

