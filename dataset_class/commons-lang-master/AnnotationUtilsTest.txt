Location: AnnotationUtilsTest.java

Content: 

@Test public void testAnnotationsOfDifferingTypes(){

  assertFalse(AnnotationUtils.equals(field1.getAnnotation(TestAnnotation.class),field4.getAnnotation(NestAnnotation.class)));

  assertFalse(AnnotationUtils.equals(field4.getAnnotation(NestAnnotation.class),field1.getAnnotation(TestAnnotation.class)));

}

Location: AnnotationUtilsTest.java

Content: 

@Test public void testBothArgsNull(){

  assertTrue(AnnotationUtils.equals(null,null));

}

Location: AnnotationUtilsTest.java

Content: 

@Test public void testEquivalence(){

  assertTrue(AnnotationUtils.equals(field1.getAnnotation(TestAnnotation.class),field2.getAnnotation(TestAnnotation.class)));

  assertTrue(AnnotationUtils.equals(field2.getAnnotation(TestAnnotation.class),field1.getAnnotation(TestAnnotation.class)));

}

Location: AnnotationUtilsTest.java

Content: 

@Test public void testGeneratedAnnotationEquivalentToRealAnnotation(){

  assertTimeoutPreemptively(Duration.ofSeconds(666L),() -> {

    final Test real=getClass().getDeclaredMethod("testGeneratedAnnotationEquivalentToRealAnnotation").getAnnotation(Test.class);

    final InvocationHandler generatedTestInvocationHandler=(proxy,method,args) -> {

      if ("equals".equals(method.getName()) && method.getParameterTypes().length == 1) {

        return Boolean.valueOf(proxy == args[0]);

      }

      if ("hashCode".equals(method.getName()) && method.getParameterTypes().length == 0) {

        return Integer.valueOf(System.identityHashCode(proxy));

      }

      if ("toString".equals(method.getName()) && method.getParameterTypes().length == 0) {

        return "Test proxy";

      }

      return method.invoke(real,args);

    }

;

    final Test generated=(Test)Proxy.newProxyInstance(Thread.currentThread().getContextClassLoader(),new Class[]{Test.class},generatedTestInvocationHandler);

    assertEquals(real,generated);

    assertNotEquals(generated,real);

    assertTrue(AnnotationUtils.equals(generated,real));

    assertTrue(AnnotationUtils.equals(real,generated));

    final Test generated2=(Test)Proxy.newProxyInstance(Thread.currentThread().getContextClassLoader(),new Class[]{Test.class},generatedTestInvocationHandler);

    assertNotEquals(generated,generated2);

    assertNotEquals(generated2,generated);

    assertTrue(AnnotationUtils.equals(generated,generated2));

    assertTrue(AnnotationUtils.equals(generated2,generated));

  }

);

}

Location: AnnotationUtilsTest.java

Content: 

@Test public void testIsValidAnnotationMemberType(){

  for (  final Class<?> type : new Class[]{byte.class,short.class,int.class,char.class,long.class,float.class,double.class,boolean.class,String.class,Class.class,NestAnnotation.class,TestAnnotation.class,Stooge.class,ElementType.class}) {

    assertTrue(AnnotationUtils.isValidAnnotationMemberType(type));

    assertTrue(AnnotationUtils.isValidAnnotationMemberType(Array.newInstance(type,0).getClass()));

  }

  for (  final Class<?> type : new Class[]{Object.class,Map.class,Collection.class}) {

    assertFalse(AnnotationUtils.isValidAnnotationMemberType(type));

    assertFalse(AnnotationUtils.isValidAnnotationMemberType(Array.newInstance(type,0).getClass()));

  }

}

Location: AnnotationUtilsTest.java

Content: 

@Test public void testNonEquivalentAnnotationsOfSameType(){

  assertFalse(AnnotationUtils.equals(field1.getAnnotation(TestAnnotation.class),field3.getAnnotation(TestAnnotation.class)));

  assertFalse(AnnotationUtils.equals(field3.getAnnotation(TestAnnotation.class),field1.getAnnotation(TestAnnotation.class)));

}

Location: AnnotationUtilsTest.java

Content: 

@Test public void testOneArgNull(){

  assertFalse(AnnotationUtils.equals(field1.getAnnotation(TestAnnotation.class),null));

  assertFalse(AnnotationUtils.equals(null,field1.getAnnotation(TestAnnotation.class)));

}

Location: AnnotationUtilsTest.java

Content: 

@Test public void testSameInstance(){

  assertTrue(AnnotationUtils.equals(field1.getAnnotation(TestAnnotation.class),field1.getAnnotation(TestAnnotation.class)));

}

