Location: BooleanConsumerTest.java

Content: 

private BooleanConsumer accept(final BooleanConsumer consumer,final boolean expected){

  consumer.accept(expected);

  return consumer;

}

Location: BooleanConsumerTest.java

Content: 

@Test public void testAccept(){

  final AtomicBoolean aBool=new AtomicBoolean();

  accept(aBool::lazySet,true);

  assertTrue(aBool.get());

  accept(aBool::lazySet,false);

  assertFalse(aBool.get());

}

Location: BooleanConsumerTest.java

Content: 

@Test public void testAndThen() throws Throwable {

  final BooleanConsumer nop=BooleanConsumer.nop();

  nop.andThen(nop);

  assertThrows(NullPointerException.class,() -> nop.andThen(null));

  final AtomicBoolean aBool1=new AtomicBoolean();

  final AtomicBoolean aBool2=new AtomicBoolean();

  final BooleanConsumer bc=aBool1::lazySet;

  final BooleanConsumer composite=bc.andThen(aBool2::lazySet);

  composite.accept(true);

  assertTrue(aBool1.get());

  assertTrue(aBool2.get());

  composite.accept(false);

  assertFalse(aBool1.get());

  assertFalse(aBool2.get());

  final BooleanConsumer bad=value -> {

    throw new IllegalStateException();

  }

;

  final BooleanConsumer badComposite=bad.andThen(aBool2::lazySet);

  Assertions.assertThrows(IllegalStateException.class,() -> badComposite.accept(true));

  assertFalse(aBool2.get(),"Second consumer should not be invoked");

}

