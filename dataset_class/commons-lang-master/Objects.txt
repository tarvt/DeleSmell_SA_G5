Location: Objects.java

Content: 

/** 

 * Checks, whether the given object is non-null. If so, returns the non-null object as a result value. Otherwise, a NullPointerException is thrown.

 * @param < T > The type of parameter {@code value}, also the result type.

 * @param value The value, which is being checked.

 * @return The given input value, if it was found to be non-null.

 * @throws NullPointerException The input value was null.

 * @see java.util.Objects#requireNonNull(Object)

 */

public static <T>@Nonnull T requireNonNull(@Nullable final T value) throws NullPointerException {

  return requireNonNull(value,"The value must not be null.");

}

Location: Objects.java

Content: 

/** 

 * Checks, whether the given object is non-null. If so, returns the non-null object as a result value. Otherwise, invokes the given  {@link Supplier}, and returns the suppliers result value.

 * @param < T > The type of parameter {@code value}, also the result type of the default value supplier, and of the method itself.

 * @param < E > The type of exception, that the {@code default value supplier}, may throw.

 * @param value The value, which is being checked.

 * @param defaultValueSupplier The supplier, which returns the default value. This defaultvalue <em>must</em> be non-null. The supplier will only be invoked, if necessary. (If the  {@code value} parameter is null, that is.)

 * @return The given input value, if it was found to be non-null. Otherwise,the value, that has been returned by the default value supplier.

 * @see #requireNonNull(Object)

 * @see #requireNonNull(Object,String)

 * @see #requireNonNull(Object,Supplier)

 * @throws NullPointerException The default value supplier is null, or the defaultvalue supplier has returned null.

 */

public static <T,E extends Throwable>@Nonnull T requireNonNull(@Nullable final T value,@Nonnull final FailableSupplier<T,E> defaultValueSupplier) throws NullPointerException {

  if (value == null) {

    final FailableSupplier<T,?> supplier=requireNonNull(defaultValueSupplier,"The supplier must not be null");

    final T defaultValue;

    try {

      defaultValue=supplier.get();

    }

 catch (    final Throwable t) {

      throw Failable.rethrow(t);

    }

    return requireNonNull(defaultValue,"The supplier must not return null.");

  }

  return value;

}

Location: Objects.java

Content: 

/** 

 * Checks, whether the given object is non-null. If so, returns the non-null object as a result value. Otherwise, a NullPointerException is thrown.

 * @param < T > The type of parameter {@code value}, also the result type.

 * @param value The value, which is being checked.

 * @param msg A string, which is being used as the exceptions message, if thecheck fails.

 * @return The given input value, if it was found to be non-null.

 * @throws NullPointerException The input value was null.

 * @see java.util.Objects#requireNonNull(Object,String)

 * @see #requireNonNull(Object,Supplier)

 */

public static <T>@Nonnull T requireNonNull(@Nullable final T value,@Nonnull final String msg) throws NullPointerException {

  if (value == null) {

    throw new NullPointerException(msg);

  }

  return value;

}

Location: Objects.java

Content: 

/** 

 * Checks, whether the given object is non-null. If so, returns the non-null object as a result value. Otherwise, a NullPointerException is thrown.

 * @param < T > The type of parameter {@code value}, also the result type.

 * @param value The value, which is being checked.

 * @param msgSupplier A supplier, which creates the exception message, if the check fails.This supplier will only be invoked, if necessary.

 * @return The given input value, if it was found to be non-null.

 * @throws NullPointerException The input value was null.

 * @see java.util.Objects#requireNonNull(Object,String)

 * @see #requireNonNull(Object,String)

 */

public static <T>@Nonnull T requireNonNull(@Nullable final T value,@Nonnull final Supplier<String> msgSupplier) throws NullPointerException {

  if (value == null) {

    throw new NullPointerException(msgSupplier.get());

  }

  return value;

}

Location: Objects.java

Content: 

/** 

 * Checks, whether the given object is non-null. If so, returns the non-null object as a result value. Otherwise, a NullPointerException is thrown.

 * @param < T > The type of parameter {@code value}, also the result type.

 * @param value The value, which is being checked.

 * @param defaultValue The default value, which is being returned, if thecheck fails, and the  {@code value} is null.

 * @throws NullPointerException The input value, and the default value are null.

 * @return The given input value, if it was found to be non-null.

 * @see java.util.Objects#requireNonNull(Object)

 */

public static <T>@Nonnull T requireNonNull(@Nullable final T value,@Nonnull final T defaultValue) throws NullPointerException {

  return value == null ? requireNonNull(defaultValue) : value;

}

