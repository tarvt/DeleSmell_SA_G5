Location: CharSequenceUtilsTest.java

Content: 

static Stream<Arguments> lastIndexWithStandardCharSequence(){

  return Stream.of(arguments("abc","b",2,1),arguments(new StringBuilder("abc"),"b",2,1),arguments(new StringBuffer("abc"),"b",2,1),arguments("abc",new StringBuilder("b"),2,1),arguments(new StringBuilder("abc"),new StringBuilder("b"),2,1),arguments(new StringBuffer("abc"),new StringBuffer("b"),2,1),arguments(new StringBuilder("abc"),new StringBuffer("b"),2,1));

}

Location: CharSequenceUtilsTest.java

Content: 

@ParameterizedTest @MethodSource("lastIndexWithStandardCharSequence") public void testLastIndexOfWithDifferentCharSequences(final CharSequence cs,final CharSequence search,final int start,final int expected){

  assertEquals(expected,CharSequenceUtils.lastIndexOf(cs,search,start));

}

Location: CharSequenceUtilsTest.java

Content: 

@Test public void testNewLastIndexOf(){

  testNewLastIndexOfSingle("808087847-1321060740-635567660180086727-925755305","-1321060740-635567660",21);

  testNewLastIndexOfSingle("","");

  testNewLastIndexOfSingle("1","");

  testNewLastIndexOfSingle("","1");

  testNewLastIndexOfSingle("1","1");

  testNewLastIndexOfSingle("11","1");

  testNewLastIndexOfSingle("1","11");

  testNewLastIndexOfSingle("apache","a");

  testNewLastIndexOfSingle("apache","p");

  testNewLastIndexOfSingle("apache","e");

  testNewLastIndexOfSingle("apache","x");

  testNewLastIndexOfSingle("oraoraoraora","r");

  testNewLastIndexOfSingle("mudamudamudamuda","d");

  final Random random=new Random();

  final StringBuilder seg=new StringBuilder();

  while (seg.length() <= CharSequenceUtils.TO_STRING_LIMIT) {

    seg.append(random.nextInt());

  }

  StringBuilder original=new StringBuilder(seg);

  testNewLastIndexOfSingle(original,seg);

  for (int i=0; i < 100; i++) {

    if (random.nextDouble() < 0.5) {

      original.append(random.nextInt() % 10);

    }

 else {

      original=new StringBuilder().append(String.valueOf(random.nextInt() % 100)).append(original);

    }

    testNewLastIndexOfSingle(original,seg);

  }

}

Location: CharSequenceUtilsTest.java

Content: 

private void testNewLastIndexOfSingleSingle(final CharSequence a,final CharSequence b,final int start){

  assertEquals(a.toString().lastIndexOf(b.toString(),start),CharSequenceUtils.lastIndexOf(new WrapperString(a.toString()),new WrapperString(b.toString()),start),"testNewLastIndexOf fails! original : " + a + " seg : "+ b+ " start : "+ start);

}

Location: CharSequenceUtilsTest.java

Content: 

private void testNewLastIndexOfSingle(final CharSequence a,final CharSequence b){

  final int maxa=Math.max(a.length(),b.length());

  for (int i=-maxa - 10; i <= maxa + 10; i++) {

    testNewLastIndexOfSingle(a,b,i);

  }

  testNewLastIndexOfSingle(a,b,Integer.MIN_VALUE);

  testNewLastIndexOfSingle(a,b,Integer.MAX_VALUE);

}

Location: CharSequenceUtilsTest.java

Content: 

private void testNewLastIndexOfSingle(final CharSequence a,final CharSequence b,final int start){

  testNewLastIndexOfSingleSingle(a,b,start);

  testNewLastIndexOfSingleSingle(b,a,start);

}

Location: CharSequenceUtilsTest.java

Content: 

@Test public void testRegionMatches(){

  for (  final TestData data : TEST_DATA) {

    new RunTest(){

      @Override boolean invoke(){

        return data.source.regionMatches(data.ignoreCase,data.toffset,data.other,data.ooffset,data.len);

      }

    }

.run(data,"String");

    new RunTest(){

      @Override boolean invoke(){

        return CharSequenceUtils.regionMatches(data.source,data.ignoreCase,data.toffset,data.other,data.ooffset,data.len);

      }

    }

.run(data,"CSString");

    new RunTest(){

      @Override boolean invoke(){

        return CharSequenceUtils.regionMatches(new StringBuilder(data.source),data.ignoreCase,data.toffset,data.other,data.ooffset,data.len);

      }

    }

.run(data,"CSNonString");

  }

}

Location: CharSequenceUtilsTest.java

Content: 

@Test public void testSubSequence(){

  assertNull(CharSequenceUtils.subSequence(null,-1));

  assertNull(CharSequenceUtils.subSequence(null,0));

  assertNull(CharSequenceUtils.subSequence(null,1));

  assertEquals(StringUtils.EMPTY,CharSequenceUtils.subSequence(StringUtils.EMPTY,0));

  assertEquals("012",CharSequenceUtils.subSequence("012",0));

  assertEquals("12",CharSequenceUtils.subSequence("012",1));

  assertEquals("2",CharSequenceUtils.subSequence("012",2));

  assertEquals(StringUtils.EMPTY,CharSequenceUtils.subSequence("012",3));

}

Location: CharSequenceUtilsTest.java

Content: 

@Test public void testSubSequenceNegativeStart(){

  assertThrows(IndexOutOfBoundsException.class,() -> CharSequenceUtils.subSequence(StringUtils.EMPTY,-1));

}

Location: CharSequenceUtilsTest.java

Content: 

@Test public void testSubSequenceTooLong(){

  assertThrows(IndexOutOfBoundsException.class,() -> CharSequenceUtils.subSequence(StringUtils.EMPTY,1));

}

