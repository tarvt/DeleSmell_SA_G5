Location: DiffBuilder.java

Content: 

/** 

 * <p> Test if two  {@code byte[]}s are equal. </p>

 * @param fieldName the field name

 * @param lhs the left hand  {@code byte[]}

 * @param rhs the right hand  {@code byte[]}

 * @return this

 * @throws IllegalArgumentException if field name is  {@code null}

 */

public DiffBuilder<T> append(final String fieldName,final byte[] lhs,final byte[] rhs){

  validateFieldNameNotNull(fieldName);

  if (objectsTriviallyEqual) {

    return this;

  }

  if (!Arrays.equals(lhs,rhs)) {

    diffs.add(new Diff<Byte[]>(fieldName){

      private static final long serialVersionUID=1L;

      @Override public Byte[] getLeft(){

        return ArrayUtils.toObject(lhs);

      }

      @Override public Byte[] getRight(){

        return ArrayUtils.toObject(rhs);

      }

    }

);

  }

  return this;

}

Location: DiffBuilder.java

Content: 

/** 

 * <p> Test if two  {@code char[]}s are equal. </p>

 * @param fieldName the field name

 * @param lhs the left hand  {@code char[]}

 * @param rhs the right hand  {@code char[]}

 * @return this

 * @throws IllegalArgumentException if field name is  {@code null}

 */

public DiffBuilder<T> append(final String fieldName,final char[] lhs,final char[] rhs){

  validateFieldNameNotNull(fieldName);

  if (objectsTriviallyEqual) {

    return this;

  }

  if (!Arrays.equals(lhs,rhs)) {

    diffs.add(new Diff<Character[]>(fieldName){

      private static final long serialVersionUID=1L;

      @Override public Character[] getLeft(){

        return ArrayUtils.toObject(lhs);

      }

      @Override public Character[] getRight(){

        return ArrayUtils.toObject(rhs);

      }

    }

);

  }

  return this;

}

Location: DiffBuilder.java

Content: 

/** 

 * <p> Append diffs from another  {@code DiffResult}. </p> <p> This method is useful if you want to compare properties which are themselves Diffable and would like to know which specific part of it is different. </p> <pre> public class Person implements Diffable&lt;Person&gt; { String name; Address address; // implements Diffable&lt;Address&gt; ... public DiffResult diff(Person obj) { return new DiffBuilder(this, obj, ToStringStyle.SHORT_PREFIX_STYLE) .append("name", this.name, obj.name) .append("address", this.address.diff(obj.address)) .build(); } } </pre>

 * @param fieldName the field name

 * @param diffResult the  {@code DiffResult} to append

 * @return this

 * @throws NullPointerException if field name is {@code null}

 * @since 3.5

 */

public DiffBuilder<T> append(final String fieldName,final DiffResult<T> diffResult){

  validateFieldNameNotNull(fieldName);

  Validate.notNull(diffResult,"diffResult");

  if (objectsTriviallyEqual) {

    return this;

  }

  for (  final Diff<?> diff : diffResult.getDiffs()) {

    append(fieldName + "." + diff.getFieldName(),diff.getLeft(),diff.getRight());

  }

  return this;

}

Location: DiffBuilder.java

Content: 

/** 

 * <p> Test if two  {@code double[]}s are equal. </p>

 * @param fieldName the field name

 * @param lhs the left hand  {@code double[]}

 * @param rhs the right hand  {@code double[]}

 * @return this

 * @throws IllegalArgumentException if field name is  {@code null}

 */

public DiffBuilder<T> append(final String fieldName,final double[] lhs,final double[] rhs){

  validateFieldNameNotNull(fieldName);

  if (objectsTriviallyEqual) {

    return this;

  }

  if (!Arrays.equals(lhs,rhs)) {

    diffs.add(new Diff<Double[]>(fieldName){

      private static final long serialVersionUID=1L;

      @Override public Double[] getLeft(){

        return ArrayUtils.toObject(lhs);

      }

      @Override public Double[] getRight(){

        return ArrayUtils.toObject(rhs);

      }

    }

);

  }

  return this;

}

Location: DiffBuilder.java

Content: 

/** 

 * <p> Test if two  {@code float[]}s are equal. </p>

 * @param fieldName the field name

 * @param lhs the left hand  {@code float[]}

 * @param rhs the right hand  {@code float[]}

 * @return this

 * @throws IllegalArgumentException if field name is  {@code null}

 */

public DiffBuilder<T> append(final String fieldName,final float[] lhs,final float[] rhs){

  validateFieldNameNotNull(fieldName);

  if (objectsTriviallyEqual) {

    return this;

  }

  if (!Arrays.equals(lhs,rhs)) {

    diffs.add(new Diff<Float[]>(fieldName){

      private static final long serialVersionUID=1L;

      @Override public Float[] getLeft(){

        return ArrayUtils.toObject(lhs);

      }

      @Override public Float[] getRight(){

        return ArrayUtils.toObject(rhs);

      }

    }

);

  }

  return this;

}

Location: DiffBuilder.java

Content: 

/** 

 * <p> Test if two  {@code long[]}s are equal. </p>

 * @param fieldName the field name

 * @param lhs the left hand  {@code long[]}

 * @param rhs the right hand  {@code long[]}

 * @return this

 * @throws IllegalArgumentException if field name is  {@code null}

 */

public DiffBuilder<T> append(final String fieldName,final long[] lhs,final long[] rhs){

  validateFieldNameNotNull(fieldName);

  if (objectsTriviallyEqual) {

    return this;

  }

  if (!Arrays.equals(lhs,rhs)) {

    diffs.add(new Diff<Long[]>(fieldName){

      private static final long serialVersionUID=1L;

      @Override public Long[] getLeft(){

        return ArrayUtils.toObject(lhs);

      }

      @Override public Long[] getRight(){

        return ArrayUtils.toObject(rhs);

      }

    }

);

  }

  return this;

}

Location: DiffBuilder.java

Content: 

/** 

 * <p> Test if two  {@code Object[]}s are equal. </p>

 * @param fieldName the field name

 * @param lhs the left hand  {@code Object[]}

 * @param rhs the right hand  {@code Object[]}

 * @return this

 * @throws IllegalArgumentException if field name is  {@code null}

 */

public DiffBuilder<T> append(final String fieldName,final Object[] lhs,final Object[] rhs){

  validateFieldNameNotNull(fieldName);

  if (objectsTriviallyEqual) {

    return this;

  }

  if (!Arrays.equals(lhs,rhs)) {

    diffs.add(new Diff<Object[]>(fieldName){

      private static final long serialVersionUID=1L;

      @Override public Object[] getLeft(){

        return lhs;

      }

      @Override public Object[] getRight(){

        return rhs;

      }

    }

);

  }

  return this;

}

Location: DiffBuilder.java

Content: 

/** 

 * <p> Test if two  {@code short[]}s are equal. </p>

 * @param fieldName the field name

 * @param lhs the left hand  {@code short[]}

 * @param rhs the right hand  {@code short[]}

 * @return this

 * @throws IllegalArgumentException if field name is  {@code null}

 */

public DiffBuilder<T> append(final String fieldName,final short[] lhs,final short[] rhs){

  validateFieldNameNotNull(fieldName);

  if (objectsTriviallyEqual) {

    return this;

  }

  if (!Arrays.equals(lhs,rhs)) {

    diffs.add(new Diff<Short[]>(fieldName){

      private static final long serialVersionUID=1L;

      @Override public Short[] getLeft(){

        return ArrayUtils.toObject(lhs);

      }

      @Override public Short[] getRight(){

        return ArrayUtils.toObject(rhs);

      }

    }

);

  }

  return this;

}

Location: DiffBuilder.java

Content: 

/** 

 * <p> Constructs a builder for the specified objects with the specified style. </p> <p> If  {@code lhs == rhs} or {@code lhs.equals(rhs)} then the builder willnot evaluate any calls to  {@code append(...)} and will return an empty{@link DiffResult} when {@link #build()} is executed.</p> <p> This delegates to  {@link #DiffBuilder(Object,Object,ToStringStyle,boolean)}with the testTriviallyEqual flag enabled. </p>

 * @param lhs {@code this} object

 * @param rhs the object to diff against

 * @param style the style will use when outputting the objects,  {@code null}uses the default

 * @throws IllegalArgumentException if  {@code lhs} or {@code rhs} is {@code null}

 */

public DiffBuilder(final T lhs,final T rhs,final ToStringStyle style){

  this(lhs,rhs,style,true);

}

Location: DiffBuilder.java

Content: 

/** 

 * <p> Constructs a builder for the specified objects with the specified style. </p> <p> If  {@code lhs == rhs} or {@code lhs.equals(rhs)} then the builder willnot evaluate any calls to  {@code append(...)} and will return an empty{@link DiffResult} when {@link #build()} is executed.</p>

 * @param lhs {@code this} object

 * @param rhs the object to diff against

 * @param style the style will use when outputting the objects,  {@code null}uses the default

 * @param testTriviallyEqual If true, this will test if lhs and rhs are the same or equal. All of the append(fieldName, lhs, rhs) methods will abort without creating a field  {@link Diff} if the trivially equaltest is enabled and returns true.  The result of this test is never changed throughout the life of this  {@link DiffBuilder}.

 * @throws IllegalArgumentException if  {@code lhs} or {@code rhs} is {@code null}

 * @since 3.4

 */

public DiffBuilder(final T lhs,final T rhs,final ToStringStyle style,final boolean testTriviallyEqual){

  Validate.notNull(lhs,"lhs");

  Validate.notNull(rhs,"rhs");

  this.diffs=new ArrayList<>();

  this.left=lhs;

  this.right=rhs;

  this.style=style;

  this.objectsTriviallyEqual=testTriviallyEqual && (lhs == rhs || lhs.equals(rhs));

}

Location: DiffBuilder.java

Content: 

private void validateFieldNameNotNull(final String fieldName){

  Validate.notNull(fieldName,"fieldName");

}

