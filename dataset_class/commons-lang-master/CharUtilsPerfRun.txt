Location: CharUtilsPerfRun.java

Content: 

public static void main(final String[] args){

  new CharUtilsPerfRun().run();

}

Location: CharUtilsPerfRun.java

Content: 

private void printlnTotal(final String prefix,final long startMillis){

  final long totalMillis=System.currentTimeMillis() - startMillis;

  System.out.println(prefix + ": " + NumberFormat.getInstance().format(totalMillis)+ " milliseconds.");

}

Location: CharUtilsPerfRun.java

Content: 

private void printSysInfo(){

  System.out.println(VERSION);

  System.out.println("Now: " + Calendar.getInstance().getTime());

  System.out.println(System.getProperty("java.vendor") + " " + System.getProperty("java.runtime.name")+ " "+ System.getProperty("java.runtime.version"));

  System.out.println(System.getProperty("java.vm.vendor") + " " + System.getProperty("java.vm.name")+ " "+ System.getProperty("java.vm.version"));

  System.out.println(System.getProperty("os.name") + " " + System.getProperty("os.version")+ " "+ System.getProperty("os.arch")+ " "+ System.getProperty("sun.cpu.isalist"));

}

Location: CharUtilsPerfRun.java

Content: 

private void run(){

  this.printSysInfo();

  long startMillis;

  startMillis=System.currentTimeMillis();

  this.printlnTotal("Do nothing",startMillis);

  run_CharUtils_isAsciiNumeric(WARM_UP);

  startMillis=System.currentTimeMillis();

  run_CharUtils_isAsciiNumeric(COUNT);

  this.printlnTotal("run_CharUtils_isAsciiNumeric",startMillis);

  run_inlined_CharUtils_isAsciiNumeric(WARM_UP);

  startMillis=System.currentTimeMillis();

  run_inlined_CharUtils_isAsciiNumeric(COUNT);

  this.printlnTotal("run_inlined_CharUtils_isAsciiNumeric",startMillis);

  run_CharSet(WARM_UP);

  startMillis=System.currentTimeMillis();

  run_CharSet(COUNT);

  this.printlnTotal("run_CharSet",startMillis);

}

Location: CharUtilsPerfRun.java

Content: 

private int run_CharSet(final int loopCount){

  int t=0;

  for (int i=0; i < loopCount; i++) {

    for (    final char ch : CHAR_SAMPLES) {

      final boolean b=CharSet.ASCII_NUMERIC.contains(ch);

      t+=b ? 1 : 0;

    }

  }

  return t;

}

Location: CharUtilsPerfRun.java

Content: 

private int run_CharUtils_isAsciiNumeric(final int loopCount){

  int t=0;

  for (int i=0; i < loopCount; i++) {

    for (    final char ch : CHAR_SAMPLES) {

      final boolean b=CharUtils.isAsciiNumeric(ch);

      t+=b ? 1 : 0;

    }

  }

  return t;

}

Location: CharUtilsPerfRun.java

Content: 

private int run_inlined_CharUtils_isAsciiNumeric(final int loopCount){

  int t=0;

  for (int i=0; i < loopCount; i++) {

    for (    final char ch : CHAR_SAMPLES) {

      final boolean b=ch >= '0' && ch <= '9';

      t+=b ? 1 : 0;

    }

  }

  return t;

}

