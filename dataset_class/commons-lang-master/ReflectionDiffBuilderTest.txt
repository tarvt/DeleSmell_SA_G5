Location: ReflectionDiffBuilderTest.java

Content: 

@Test public void test_array_difference(){

  final TypeTestClass firstObject=new TypeTestClass();

  firstObject.charArrayField=new char[]{'c'};

  final TypeTestClass secondObject=new TypeTestClass();

  final DiffResult list=firstObject.diff(secondObject);

  assertEquals(1,list.getNumberOfDiffs());

}

Location: ReflectionDiffBuilderTest.java

Content: 

@Test public void test_difference_in_inherited_field(){

  final TypeTestChildClass firstObject=new TypeTestChildClass();

  firstObject.intField=99;

  final TypeTestChildClass secondObject=new TypeTestChildClass();

  final DiffResult list=firstObject.diff(secondObject);

  assertEquals(1,list.getNumberOfDiffs());

}

Location: ReflectionDiffBuilderTest.java

Content: 

@Test public void test_no_differences(){

  final TypeTestClass firstObject=new TypeTestClass();

  final TypeTestClass secondObject=new TypeTestClass();

  final DiffResult list=firstObject.diff(secondObject);

  assertEquals(0,list.getNumberOfDiffs());

}

Location: ReflectionDiffBuilderTest.java

Content: 

@Test public void test_no_differences_inheritance(){

  final TypeTestChildClass firstObject=new TypeTestChildClass();

  final TypeTestChildClass secondObject=new TypeTestChildClass();

  final DiffResult list=firstObject.diff(secondObject);

  assertEquals(0,list.getNumberOfDiffs());

}

Location: ReflectionDiffBuilderTest.java

Content: 

@Test public void test_primitive_difference(){

  final TypeTestClass firstObject=new TypeTestClass();

  firstObject.charField='c';

  final TypeTestClass secondObject=new TypeTestClass();

  final DiffResult list=firstObject.diff(secondObject);

  assertEquals(1,list.getNumberOfDiffs());

}

Location: ReflectionDiffBuilderTest.java

Content: 

@Test public void test_transient_field_difference(){

  final TypeTestClass firstObject=new TypeTestClass();

  firstObject.transientField="a";

  final TypeTestClass secondObject=new TypeTestClass();

  firstObject.transientField="b";

  final DiffResult list=firstObject.diff(secondObject);

  assertEquals(0,list.getNumberOfDiffs());

}

