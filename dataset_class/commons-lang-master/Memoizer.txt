Location: Memoizer.java

Content: 

/** 

 * <p> This method launders a Throwable to either a RuntimeException, Error or any other Exception wrapped in an IllegalStateException. </p>

 * @param throwable the throwable to laundered

 * @return a RuntimeException, Error or an IllegalStateException

 */

private RuntimeException launderException(final Throwable throwable){

  if (throwable instanceof RuntimeException) {

    return (RuntimeException)throwable;

  }

  if (throwable instanceof Error) {

    throw (Error)throwable;

  }

  throw new IllegalStateException("Unchecked exception",throwable);

}

Location: Memoizer.java

Content: 

/** 

 * <p> Constructs a Memoizer for the provided Computable calculation. </p> <p> If a calculation is thrown an exception for any reason, this exception will be cached and returned for all future calls with the provided parameter. </p>

 * @param computable the computation whose results should be memorized

 */

public Memoizer(final Computable<I,O> computable){

  this(computable,false);

}

Location: Memoizer.java

Content: 

/** 

 * <p> Constructs a Memoizer for the provided Computable calculation, with the option of whether a Computation that experiences an error should recalculate on subsequent calls or return the same cached exception. </p>

 * @param computable the computation whose results should be memorized

 * @param recalculate determines whether the computation should be recalculated on subsequent calls if the previous call failed

 */

public Memoizer(final Computable<I,O> computable,final boolean recalculate){

  this.computable=computable;

  this.recalculate=recalculate;

}

