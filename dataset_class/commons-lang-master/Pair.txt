Location: Pair.java

Content: 

/** 

 * <p>Compares the pair based on the left element followed by the right element. The types must be  {@code Comparable}.</p>

 * @param other  the other pair, not null

 * @return negative if this is less, zero if equal, positive if greater

 */

@Override public int compareTo(final Pair<L,R> other){

  return new CompareToBuilder().append(getLeft(),other.getLeft()).append(getRight(),other.getRight()).toComparison();

}

Location: Pair.java

Content: 

/** 

 * <p>Compares this pair to another based on the two elements.</p>

 * @param obj  the object to compare to, null returns false

 * @return true if the elements of the pair are equal

 */

@Override public boolean equals(final Object obj){

  if (obj == this) {

    return true;

  }

  if (obj instanceof Map.Entry<?,?>) {

    final Map.Entry<?,?> other=(Map.Entry<?,?>)obj;

    return Objects.equals(getKey(),other.getKey()) && Objects.equals(getValue(),other.getValue());

  }

  return false;

}

Location: Pair.java

Content: 

/** 

 * <p>Gets the key from this pair.</p> <p>This method implements the  {@code Map.Entry} interface returning theleft element as the key.</p>

 * @return the left element as the key, may be null

 */

@Override public final L getKey(){

  return getLeft();

}

Location: Pair.java

Content: 

/** 

 * <p>Gets the value from this pair.</p> <p>This method implements the  {@code Map.Entry} interface returning theright element as the value.</p>

 * @return the right element as the value, may be null

 */

@Override public R getValue(){

  return getRight();

}

Location: Pair.java

Content: 

/** 

 * <p>Returns a suitable hash code. The hash code follows the definition in  {@code Map.Entry}.</p>

 * @return the hash code

 */

@Override public int hashCode(){

  return Objects.hashCode(getKey()) ^ Objects.hashCode(getValue());

}

Location: Pair.java

Content: 

/** 

 * <p>Returns a String representation of this pair using the format  {@code ($left,$right)}.</p>

 * @return a string describing this object, not null

 */

@Override public String toString(){

  return "(" + getLeft() + ','+ getRight()+ ')';

}

Location: Pair.java

Content: 

/** 

 * <p>Formats the receiver using the given format.</p> <p>This uses  {@link java.util.Formattable} to perform the formatting. Two variables maybe used to embed the left and right elements. Use  {@code %1$s} for the leftelement (key) and  {@code %2$s} for the right element (value).The default format used by  {@code toString()} is {@code (%1$s,%2$s)}.</p>

 * @param format  the format string, optionally containing {@code %1$s} and {@code %2$s}, not null

 * @return the formatted string, not null

 */

public String toString(final String format){

  return String.format(format,getLeft(),getRight());

}

