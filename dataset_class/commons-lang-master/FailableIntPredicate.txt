Location: FailableIntPredicate.java

Content: 

/** 

 * Returns a composed  {@code FailableIntPredicate} like {@link IntPredicate#and(IntPredicate)}.

 * @param other a predicate that will be logically-ANDed with this predicate.

 * @return a composed {@code FailableIntPredicate} like {@link IntPredicate#and(IntPredicate)}.

 * @throws NullPointerException if other is null

 */

default FailableIntPredicate<E> and(final FailableIntPredicate<E> other){

  Objects.requireNonNull(other);

  return t -> test(t) && other.test(t);

}

Location: FailableIntPredicate.java

Content: 

/** 

 * Returns a composed  {@code FailableIntPredicate} like {@link IntPredicate#and(IntPredicate)}.

 * @param other a predicate that will be logically-ORed with this predicate.

 * @return a composed {@code FailableIntPredicate} like {@link IntPredicate#and(IntPredicate)}.

 * @throws NullPointerException if other is null

 */

default FailableIntPredicate<E> or(final FailableIntPredicate<E> other){

  Objects.requireNonNull(other);

  return t -> test(t) || other.test(t);

}

Location: FailableIntPredicate.java

Content: 

/** 

 * Tests the predicate.

 * @param value the parameter for the predicate to accept.

 * @return {@code true} if the input argument matches the predicate, {@code false} otherwise.

 * @throws E Thrown when the consumer fails.

 */

boolean test(int value) throws E ;

