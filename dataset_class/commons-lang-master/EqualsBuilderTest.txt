Location: EqualsBuilderTest.java

Content: 

@Test public void testAccessors(){

  final EqualsBuilder equalsBuilder=new EqualsBuilder();

  assertTrue(equalsBuilder.isEquals());

  equalsBuilder.setEquals(true);

  assertTrue(equalsBuilder.isEquals());

  equalsBuilder.setEquals(false);

  assertFalse(equalsBuilder.isEquals());

}

Location: EqualsBuilderTest.java

Content: 

@Test public void testBoolean(){

  final boolean o1=true;

  final boolean o2=false;

  assertTrue(new EqualsBuilder().append(o1,o1).isEquals());

  assertFalse(new EqualsBuilder().append(o1,o2).isEquals());

}

Location: EqualsBuilderTest.java

Content: 

@Test public void testBooleanArray(){

  boolean[] obj1=new boolean[2];

  obj1[0]=true;

  obj1[1]=false;

  boolean[] obj2=new boolean[2];

  obj2[0]=true;

  obj2[1]=false;

  assertTrue(new EqualsBuilder().append(obj1,obj1).isEquals());

  assertTrue(new EqualsBuilder().append(obj1,obj2).isEquals());

  obj1[1]=true;

  assertFalse(new EqualsBuilder().append(obj1,obj2).isEquals());

  obj2=null;

  assertFalse(new EqualsBuilder().append(obj1,obj2).isEquals());

  obj1=null;

  assertTrue(new EqualsBuilder().append(obj1,obj2).isEquals());

}

Location: EqualsBuilderTest.java

Content: 

@Test public void testBooleanArrayHiddenByObject(){

  final boolean[] array1=new boolean[2];

  array1[0]=true;

  array1[1]=false;

  final boolean[] array2=new boolean[2];

  array2[0]=true;

  array2[1]=false;

  final Object obj1=array1;

  final Object obj2=array2;

  assertTrue(new EqualsBuilder().append(obj1,obj1).isEquals());

  assertTrue(new EqualsBuilder().append(obj1,array1).isEquals());

  assertTrue(new EqualsBuilder().append(obj1,obj2).isEquals());

  assertTrue(new EqualsBuilder().append(obj1,array2).isEquals());

  array1[1]=true;

  assertFalse(new EqualsBuilder().append(obj1,obj2).isEquals());

}

Location: EqualsBuilderTest.java

Content: 

@Test public void testByte(){

  final byte o1=1;

  final byte o2=2;

  assertTrue(new EqualsBuilder().append(o1,o1).isEquals());

  assertFalse(new EqualsBuilder().append(o1,o2).isEquals());

}

Location: EqualsBuilderTest.java

Content: 

@Test public void testByteArray(){

  byte[] obj1=new byte[2];

  obj1[0]=5;

  obj1[1]=6;

  byte[] obj2=new byte[2];

  obj2[0]=5;

  obj2[1]=6;

  assertTrue(new EqualsBuilder().append(obj1,obj1).isEquals());

  assertTrue(new EqualsBuilder().append(obj1,obj2).isEquals());

  obj1[1]=7;

  assertFalse(new EqualsBuilder().append(obj1,obj2).isEquals());

  obj2=null;

  assertFalse(new EqualsBuilder().append(obj1,obj2).isEquals());

  obj1=null;

  assertTrue(new EqualsBuilder().append(obj1,obj2).isEquals());

}

Location: EqualsBuilderTest.java

Content: 

@Test public void testByteArrayHiddenByObject(){

  final byte[] array1=new byte[2];

  array1[0]=5;

  array1[1]=6;

  final byte[] array2=new byte[2];

  array2[0]=5;

  array2[1]=6;

  final Object obj1=array1;

  final Object obj2=array2;

  assertTrue(new EqualsBuilder().append(obj1,obj1).isEquals());

  assertTrue(new EqualsBuilder().append(obj1,array1).isEquals());

  assertTrue(new EqualsBuilder().append(obj1,obj2).isEquals());

  assertTrue(new EqualsBuilder().append(obj1,array2).isEquals());

  array1[1]=7;

  assertFalse(new EqualsBuilder().append(obj1,obj2).isEquals());

}

Location: EqualsBuilderTest.java

Content: 

@Test public void testChar(){

  final char o1=1;

  final char o2=2;

  assertTrue(new EqualsBuilder().append(o1,o1).isEquals());

  assertFalse(new EqualsBuilder().append(o1,o2).isEquals());

}

Location: EqualsBuilderTest.java

Content: 

@Test public void testCharArray(){

  char[] obj1=new char[2];

  obj1[0]=5;

  obj1[1]=6;

  char[] obj2=new char[2];

  obj2[0]=5;

  obj2[1]=6;

  assertTrue(new EqualsBuilder().append(obj1,obj1).isEquals());

  assertTrue(new EqualsBuilder().append(obj1,obj2).isEquals());

  obj1[1]=7;

  assertFalse(new EqualsBuilder().append(obj1,obj2).isEquals());

  obj2=null;

  assertFalse(new EqualsBuilder().append(obj1,obj2).isEquals());

  obj1=null;

  assertTrue(new EqualsBuilder().append(obj1,obj2).isEquals());

}

Location: EqualsBuilderTest.java

Content: 

@Test public void testCharArrayHiddenByObject(){

  final char[] array1=new char[2];

  array1[0]=5;

  array1[1]=6;

  final char[] array2=new char[2];

  array2[0]=5;

  array2[1]=6;

  final Object obj1=array1;

  final Object obj2=array2;

  assertTrue(new EqualsBuilder().append(obj1,obj1).isEquals());

  assertTrue(new EqualsBuilder().append(obj1,array1).isEquals());

  assertTrue(new EqualsBuilder().append(obj1,obj2).isEquals());

  assertTrue(new EqualsBuilder().append(obj1,array2).isEquals());

  array1[1]=7;

  assertFalse(new EqualsBuilder().append(obj1,obj2).isEquals());

}

Location: EqualsBuilderTest.java

Content: 

/** 

 * Test cyclical object references which cause a StackOverflowException if not handled properly. s. LANG-606

 */

@Test public void testCyclicalObjectReferences(){

  final TestObjectReference refX1=new TestObjectReference(1);

  final TestObjectReference x1=new TestObjectReference(1);

  x1.setObjectReference(refX1);

  refX1.setObjectReference(x1);

  final TestObjectReference refX2=new TestObjectReference(1);

  final TestObjectReference x2=new TestObjectReference(1);

  x2.setObjectReference(refX2);

  refX2.setObjectReference(x2);

  final TestObjectReference refX3=new TestObjectReference(2);

  final TestObjectReference x3=new TestObjectReference(2);

  x3.setObjectReference(refX3);

  refX3.setObjectReference(x3);

  assertEquals(x1,x2);

  assertNull(EqualsBuilder.getRegistry());

  assertNotEquals(x1,x3);

  assertNull(EqualsBuilder.getRegistry());

  assertNotEquals(x2,x3);

  assertNull(EqualsBuilder.getRegistry());

}

Location: EqualsBuilderTest.java

Content: 

@Test public void testDouble(){

  final double o1=1;

  final double o2=2;

  assertTrue(new EqualsBuilder().append(o1,o1).isEquals());

  assertFalse(new EqualsBuilder().append(o1,o2).isEquals());

  assertFalse(new EqualsBuilder().append(o1,Double.NaN).isEquals());

  assertTrue(new EqualsBuilder().append(Double.NaN,Double.NaN).isEquals());

  assertTrue(new EqualsBuilder().append(Double.POSITIVE_INFINITY,Double.POSITIVE_INFINITY).isEquals());

}

Location: EqualsBuilderTest.java

Content: 

@Test public void testDoubleArray(){

  double[] obj1=new double[2];

  obj1[0]=5;

  obj1[1]=6;

  double[] obj2=new double[2];

  obj2[0]=5;

  obj2[1]=6;

  assertTrue(new EqualsBuilder().append(obj1,obj1).isEquals());

  assertTrue(new EqualsBuilder().append(obj1,obj2).isEquals());

  obj1[1]=7;

  assertFalse(new EqualsBuilder().append(obj1,obj2).isEquals());

  obj2=null;

  assertFalse(new EqualsBuilder().append(obj1,obj2).isEquals());

  obj1=null;

  assertTrue(new EqualsBuilder().append(obj1,obj2).isEquals());

}

Location: EqualsBuilderTest.java

Content: 

@Test public void testDoubleArrayHiddenByObject(){

  final double[] array1=new double[2];

  array1[0]=5;

  array1[1]=6;

  final double[] array2=new double[2];

  array2[0]=5;

  array2[1]=6;

  final Object obj1=array1;

  final Object obj2=array2;

  assertTrue(new EqualsBuilder().append(obj1,obj1).isEquals());

  assertTrue(new EqualsBuilder().append(obj1,array1).isEquals());

  assertTrue(new EqualsBuilder().append(obj1,obj2).isEquals());

  assertTrue(new EqualsBuilder().append(obj1,array2).isEquals());

  array1[1]=7;

  assertFalse(new EqualsBuilder().append(obj1,obj2).isEquals());

}

Location: EqualsBuilderTest.java

Content: 

@Test public void testFloat(){

  final float o1=1;

  final float o2=2;

  assertTrue(new EqualsBuilder().append(o1,o1).isEquals());

  assertFalse(new EqualsBuilder().append(o1,o2).isEquals());

  assertFalse(new EqualsBuilder().append(o1,Float.NaN).isEquals());

  assertTrue(new EqualsBuilder().append(Float.NaN,Float.NaN).isEquals());

  assertTrue(new EqualsBuilder().append(Float.POSITIVE_INFINITY,Float.POSITIVE_INFINITY).isEquals());

}

Location: EqualsBuilderTest.java

Content: 

@Test public void testFloatArray(){

  float[] obj1=new float[2];

  obj1[0]=5;

  obj1[1]=6;

  float[] obj2=new float[2];

  obj2[0]=5;

  obj2[1]=6;

  assertTrue(new EqualsBuilder().append(obj1,obj1).isEquals());

  assertTrue(new EqualsBuilder().append(obj1,obj2).isEquals());

  obj1[1]=7;

  assertFalse(new EqualsBuilder().append(obj1,obj2).isEquals());

  obj2=null;

  assertFalse(new EqualsBuilder().append(obj1,obj2).isEquals());

  obj1=null;

  assertTrue(new EqualsBuilder().append(obj1,obj2).isEquals());

}

Location: EqualsBuilderTest.java

Content: 

@Test public void testFloatArrayHiddenByObject(){

  final float[] array1=new float[2];

  array1[0]=5;

  array1[1]=6;

  final float[] array2=new float[2];

  array2[0]=5;

  array2[1]=6;

  final Object obj1=array1;

  final Object obj2=array2;

  assertTrue(new EqualsBuilder().append(obj1,obj1).isEquals());

  assertTrue(new EqualsBuilder().append(obj1,array1).isEquals());

  assertTrue(new EqualsBuilder().append(obj1,obj2).isEquals());

  assertTrue(new EqualsBuilder().append(obj1,array2).isEquals());

  array1[1]=7;

  assertFalse(new EqualsBuilder().append(obj1,obj2).isEquals());

}

Location: EqualsBuilderTest.java

Content: 

@Test public void testInt(){

  final int o1=1;

  final int o2=2;

  assertTrue(new EqualsBuilder().append(o1,o1).isEquals());

  assertFalse(new EqualsBuilder().append(o1,o2).isEquals());

}

Location: EqualsBuilderTest.java

Content: 

@Test public void testIntArray(){

  int[] obj1=new int[2];

  obj1[0]=5;

  obj1[1]=6;

  int[] obj2=new int[2];

  obj2[0]=5;

  obj2[1]=6;

  assertTrue(new EqualsBuilder().append(obj1,obj1).isEquals());

  assertTrue(new EqualsBuilder().append(obj1,obj2).isEquals());

  obj1[1]=7;

  assertFalse(new EqualsBuilder().append(obj1,obj2).isEquals());

  obj2=null;

  assertFalse(new EqualsBuilder().append(obj1,obj2).isEquals());

  obj1=null;

  assertTrue(new EqualsBuilder().append(obj1,obj2).isEquals());

}

Location: EqualsBuilderTest.java

Content: 

@Test public void testIntArrayHiddenByObject(){

  final int[] array1=new int[2];

  array1[0]=5;

  array1[1]=6;

  final int[] array2=new int[2];

  array2[0]=5;

  array2[1]=6;

  final Object obj1=array1;

  final Object obj2=array2;

  assertTrue(new EqualsBuilder().append(obj1,obj1).isEquals());

  assertTrue(new EqualsBuilder().append(obj1,array1).isEquals());

  assertTrue(new EqualsBuilder().append(obj1,obj2).isEquals());

  assertTrue(new EqualsBuilder().append(obj1,array2).isEquals());

  array1[1]=7;

  assertFalse(new EqualsBuilder().append(obj1,obj2).isEquals());

}

Location: EqualsBuilderTest.java

Content: 

@Test public void testIsRegistered() throws Exception {

  final Object firstObject=new Object();

  final Object secondObject=new Object();

  try {

    final Method registerMethod=MethodUtils.getMatchingMethod(EqualsBuilder.class,"register",Object.class,Object.class);

    registerMethod.setAccessible(true);

    registerMethod.invoke(null,firstObject,secondObject);

    assertTrue(EqualsBuilder.isRegistered(firstObject,secondObject));

    assertTrue(EqualsBuilder.isRegistered(secondObject,firstObject));

  }

  finally {

    final Method unregisterMethod=MethodUtils.getMatchingMethod(EqualsBuilder.class,"unregister",Object.class,Object.class);

    unregisterMethod.setAccessible(true);

    unregisterMethod.invoke(null,firstObject,secondObject);

  }

}

Location: EqualsBuilderTest.java

Content: 

@Test public void testLongArrayHiddenByObject(){

  final long[] array1=new long[2];

  array1[0]=5L;

  array1[1]=6L;

  final long[] array2=new long[2];

  array2[0]=5L;

  array2[1]=6L;

  final Object obj1=array1;

  final Object obj2=array2;

  assertTrue(new EqualsBuilder().append(obj1,obj1).isEquals());

  assertTrue(new EqualsBuilder().append(obj1,array1).isEquals());

  assertTrue(new EqualsBuilder().append(obj1,obj2).isEquals());

  assertTrue(new EqualsBuilder().append(obj1,array2).isEquals());

  array1[1]=7;

  assertFalse(new EqualsBuilder().append(obj1,obj2).isEquals());

}

Location: EqualsBuilderTest.java

Content: 

@Test public void testMixedArray(){

  final Object[] array1=new Object[2];

  final Object[] array2=new Object[2];

  for (int i=0; i < array1.length; ++i) {

    array1[i]=new long[2];

    array2[i]=new long[2];

    for (int j=0; j < 2; ++j) {

      ((long[])array1[i])[j]=(i + 1) * (j + 1);

      ((long[])array2[i])[j]=(i + 1) * (j + 1);

    }

  }

  assertTrue(new EqualsBuilder().append(array1,array1).isEquals());

  assertTrue(new EqualsBuilder().append(array1,array2).isEquals());

  ((long[])array1[1])[1]=0;

  assertFalse(new EqualsBuilder().append(array1,array2).isEquals());

}

Location: EqualsBuilderTest.java

Content: 

@Test public void testMultiBooleanArray(){

  final boolean[][] array1=new boolean[2][2];

  final boolean[][] array2=new boolean[2][2];

  for (int i=0; i < array1.length; ++i) {

    for (int j=0; j < array1[0].length; j++) {

      array1[i][j]=i == 1 || j == 1;

      array2[i][j]=i == 1 || j == 1;

    }

  }

  assertTrue(new EqualsBuilder().append(array1,array1).isEquals());

  assertTrue(new EqualsBuilder().append(array1,array2).isEquals());

  array1[1][1]=false;

  assertFalse(new EqualsBuilder().append(array1,array2).isEquals());

  final boolean[] array3={true,true};

  assertFalse(new EqualsBuilder().append(array1,array3).isEquals());

  assertFalse(new EqualsBuilder().append(array3,array1).isEquals());

  assertFalse(new EqualsBuilder().append(array2,array3).isEquals());

  assertFalse(new EqualsBuilder().append(array3,array2).isEquals());

}

Location: EqualsBuilderTest.java

Content: 

@Test public void testMultiByteArray(){

  final byte[][] array1=new byte[2][2];

  final byte[][] array2=new byte[2][2];

  for (byte i=0; i < array1.length; ++i) {

    for (byte j=0; j < array1[0].length; j++) {

      array1[i][j]=i;

      array2[i][j]=i;

    }

  }

  assertTrue(new EqualsBuilder().append(array1,array1).isEquals());

  assertTrue(new EqualsBuilder().append(array1,array2).isEquals());

  array1[1][1]=0;

  assertFalse(new EqualsBuilder().append(array1,array2).isEquals());

}

Location: EqualsBuilderTest.java

Content: 

@Test public void testMultiCharArray(){

  final char[][] array1=new char[2][2];

  final char[][] array2=new char[2][2];

  for (char i=0; i < array1.length; ++i) {

    for (char j=0; j < array1[0].length; j++) {

      array1[i][j]=i;

      array2[i][j]=i;

    }

  }

  assertTrue(new EqualsBuilder().append(array1,array1).isEquals());

  assertTrue(new EqualsBuilder().append(array1,array2).isEquals());

  array1[1][1]=0;

  assertFalse(new EqualsBuilder().append(array1,array2).isEquals());

}

Location: EqualsBuilderTest.java

Content: 

@Test public void testMultiDoubleArray(){

  final double[][] array1=new double[2][2];

  final double[][] array2=new double[2][2];

  for (int i=0; i < array1.length; ++i) {

    for (int j=0; j < array1[0].length; j++) {

      array1[i][j]=(i + 1) * (j + 1);

      array2[i][j]=(i + 1) * (j + 1);

    }

  }

  assertTrue(new EqualsBuilder().append(array1,array1).isEquals());

  assertTrue(new EqualsBuilder().append(array1,array2).isEquals());

  array1[1][1]=0;

  assertFalse(new EqualsBuilder().append(array1,array2).isEquals());

}

Location: EqualsBuilderTest.java

Content: 

@Test public void testMultiFloatArray(){

  final float[][] array1=new float[2][2];

  final float[][] array2=new float[2][2];

  for (int i=0; i < array1.length; ++i) {

    for (int j=0; j < array1[0].length; j++) {

      array1[i][j]=(i + 1) * (j + 1);

      array2[i][j]=(i + 1) * (j + 1);

    }

  }

  assertTrue(new EqualsBuilder().append(array1,array1).isEquals());

  assertTrue(new EqualsBuilder().append(array1,array2).isEquals());

  array1[1][1]=0;

  assertFalse(new EqualsBuilder().append(array1,array2).isEquals());

}

Location: EqualsBuilderTest.java

Content: 

@Test public void testMultiIntArray(){

  final int[][] array1=new int[2][2];

  final int[][] array2=new int[2][2];

  for (int i=0; i < array1.length; ++i) {

    for (int j=0; j < array1[0].length; j++) {

      array1[i][j]=(i + 1) * (j + 1);

      array2[i][j]=(i + 1) * (j + 1);

    }

  }

  assertTrue(new EqualsBuilder().append(array1,array1).isEquals());

  assertTrue(new EqualsBuilder().append(array1,array2).isEquals());

  array1[1][1]=0;

  assertFalse(new EqualsBuilder().append(array1,array2).isEquals());

}

Location: EqualsBuilderTest.java

Content: 

@Test public void testMultiLongArray(){

  final long[][] array1=new long[2][2];

  final long[][] array2=new long[2][2];

  for (int i=0; i < array1.length; ++i) {

    for (int j=0; j < array1[0].length; j++) {

      array1[i][j]=(i + 1) * (j + 1);

      array2[i][j]=(i + 1) * (j + 1);

    }

  }

  assertTrue(new EqualsBuilder().append(array1,array1).isEquals());

  assertTrue(new EqualsBuilder().append(array1,array2).isEquals());

  array1[1][1]=0;

  assertFalse(new EqualsBuilder().append(array1,array2).isEquals());

}

Location: EqualsBuilderTest.java

Content: 

@Test public void testMultiShortArray(){

  final short[][] array1=new short[2][2];

  final short[][] array2=new short[2][2];

  for (short i=0; i < array1.length; ++i) {

    for (short j=0; j < array1[0].length; j++) {

      array1[i][j]=i;

      array2[i][j]=i;

    }

  }

  assertTrue(new EqualsBuilder().append(array1,array1).isEquals());

  assertTrue(new EqualsBuilder().append(array1,array2).isEquals());

  array1[1][1]=0;

  assertFalse(new EqualsBuilder().append(array1,array2).isEquals());

}

Location: EqualsBuilderTest.java

Content: 

/** 

 * Test from https://issues.apache.org/bugzilla/show_bug.cgi?id=33067

 */

@Test public void testNpeForNullElement(){

  final Object[] x1={Integer.valueOf(1),null,Integer.valueOf(3)};

  final Object[] x2={Integer.valueOf(1),Integer.valueOf(2),Integer.valueOf(3)};

  new EqualsBuilder().append(x1,x2);

}

Location: EqualsBuilderTest.java

Content: 

@Test public void testObjectArrayHiddenByObject(){

  final TestObject[] array1=new TestObject[2];

  array1[0]=new TestObject(4);

  array1[1]=new TestObject(5);

  final TestObject[] array2=new TestObject[2];

  array2[0]=new TestObject(4);

  array2[1]=new TestObject(5);

  final Object obj1=array1;

  final Object obj2=array2;

  assertTrue(new EqualsBuilder().append(obj1,obj1).isEquals());

  assertTrue(new EqualsBuilder().append(obj1,array1).isEquals());

  assertTrue(new EqualsBuilder().append(obj1,obj2).isEquals());

  assertTrue(new EqualsBuilder().append(obj1,array2).isEquals());

  array1[1].setA(6);

  assertFalse(new EqualsBuilder().append(obj1,obj2).isEquals());

}

Location: EqualsBuilderTest.java

Content: 

@Test public void testObjectBuild(){

  final TestObject o1=new TestObject(4);

  final TestObject o2=new TestObject(5);

  assertEquals(Boolean.TRUE,new EqualsBuilder().append(o1,o1).build());

  assertEquals(Boolean.FALSE,new EqualsBuilder().append(o1,o2).build());

  o2.setA(4);

  assertEquals(Boolean.TRUE,new EqualsBuilder().append(o1,o2).build());

  assertEquals(Boolean.FALSE,new EqualsBuilder().append(o1,this).build());

  assertEquals(Boolean.FALSE,new EqualsBuilder().append(o1,null).build());

  assertEquals(Boolean.FALSE,new EqualsBuilder().append(null,o2).build());

  assertEquals(Boolean.TRUE,new EqualsBuilder().append((Object)null,null).build());

}

Location: EqualsBuilderTest.java

Content: 

@Test public void testObjectRecursive(){

  final TestRecursiveInnerObject i1_1=new TestRecursiveInnerObject(1);

  final TestRecursiveInnerObject i1_2=new TestRecursiveInnerObject(1);

  final TestRecursiveInnerObject i2_1=new TestRecursiveInnerObject(2);

  final TestRecursiveInnerObject i2_2=new TestRecursiveInnerObject(2);

  final TestRecursiveInnerObject i3=new TestRecursiveInnerObject(3);

  final TestRecursiveInnerObject i4=new TestRecursiveInnerObject(4);

  final TestRecursiveObject o1_a=new TestRecursiveObject(i1_1,i2_1,1);

  final TestRecursiveObject o1_b=new TestRecursiveObject(i1_2,i2_2,1);

  final TestRecursiveObject o2=new TestRecursiveObject(i3,i4,2);

  final TestRecursiveObject oNull=new TestRecursiveObject(null,null,2);

  assertTrue(new EqualsBuilder().setTestRecursive(true).append(o1_a,o1_a).isEquals());

  assertTrue(new EqualsBuilder().setTestRecursive(true).append(o1_a,o1_b).isEquals());

  assertFalse(new EqualsBuilder().setTestRecursive(true).append(o1_a,o2).isEquals());

  assertTrue(new EqualsBuilder().setTestRecursive(true).append(oNull,oNull).isEquals());

  assertFalse(new EqualsBuilder().setTestRecursive(true).append(o1_a,oNull).isEquals());

}

Location: EqualsBuilderTest.java

Content: 

@Test public void testObjectRecursiveCycle(){

  final TestRecursiveCycleObject o1_a=new TestRecursiveCycleObject(1);

  final TestRecursiveCycleObject i1_a=new TestRecursiveCycleObject(o1_a,100);

  o1_a.setCycle(i1_a);

  final TestRecursiveCycleObject o1_b=new TestRecursiveCycleObject(1);

  final TestRecursiveCycleObject i1_b=new TestRecursiveCycleObject(o1_b,100);

  o1_b.setCycle(i1_b);

  final TestRecursiveCycleObject o2=new TestRecursiveCycleObject(2);

  final TestRecursiveCycleObject i2=new TestRecursiveCycleObject(o1_b,200);

  o2.setCycle(i2);

  assertTrue(new EqualsBuilder().setTestRecursive(true).append(o1_a,o1_a).isEquals());

  assertTrue(new EqualsBuilder().setTestRecursive(true).append(o1_a,o1_b).isEquals());

  assertFalse(new EqualsBuilder().setTestRecursive(true).append(o1_a,o2).isEquals());

  assertTrue(EqualsBuilder.reflectionEquals(o1_a,o1_b,false,null,true));

  assertFalse(EqualsBuilder.reflectionEquals(o1_a,o2,false,null,true));

}

Location: EqualsBuilderTest.java

Content: 

@Test public void testObjectRecursiveCycleSelfreference(){

  final TestRecursiveCycleObject o1_a=new TestRecursiveCycleObject(1);

  final TestRecursiveCycleObject o1_b=new TestRecursiveCycleObject(1);

  final TestRecursiveCycleObject o2=new TestRecursiveCycleObject(2);

  assertTrue(new EqualsBuilder().setTestRecursive(true).append(o1_a,o1_a).isEquals());

  assertTrue(new EqualsBuilder().setTestRecursive(true).append(o1_a,o1_b).isEquals());

  assertFalse(new EqualsBuilder().setTestRecursive(true).append(o1_a,o2).isEquals());

}

Location: EqualsBuilderTest.java

Content: 

@Test public void testObjectRecursiveGenericInteger(){

  final TestRecursiveGenericObject<Integer> o1_a=new TestRecursiveGenericObject<>(1);

  final TestRecursiveGenericObject<Integer> o1_b=new TestRecursiveGenericObject<>(1);

  final TestRecursiveGenericObject<Integer> o2=new TestRecursiveGenericObject<>(2);

  assertTrue(new EqualsBuilder().setTestRecursive(true).append(o1_a,o1_b).isEquals());

  assertTrue(new EqualsBuilder().setTestRecursive(true).append(o1_b,o1_a).isEquals());

  assertFalse(new EqualsBuilder().setTestRecursive(true).append(o1_b,o2).isEquals());

}

Location: EqualsBuilderTest.java

Content: 

@Test public void testObjectRecursiveGenericString(){

  final String s1_a=String.valueOf(1);

  final TestRecursiveGenericObject<String> o1_a=new TestRecursiveGenericObject<>(s1_a);

  final TestRecursiveGenericObject<String> o1_b=new TestRecursiveGenericObject<>(String.valueOf(1));

  final TestRecursiveGenericObject<String> o2=new TestRecursiveGenericObject<>(String.valueOf(2));

  s1_a.hashCode();

  assertTrue(new EqualsBuilder().setTestRecursive(true).append(o1_a,o1_b).isEquals());

  assertTrue(new EqualsBuilder().setTestRecursive(true).append(o1_b,o1_a).isEquals());

  assertFalse(new EqualsBuilder().setTestRecursive(true).append(o1_b,o2).isEquals());

}

Location: EqualsBuilderTest.java

Content: 

@Test public void testRaggedArray(){

  final long[][] array1=new long[2][];

  final long[][] array2=new long[2][];

  for (int i=0; i < array1.length; ++i) {

    array1[i]=new long[2];

    array2[i]=new long[2];

    for (int j=0; j < array1[i].length; ++j) {

      array1[i][j]=(i + 1) * (j + 1);

      array2[i][j]=(i + 1) * (j + 1);

    }

  }

  assertTrue(new EqualsBuilder().append(array1,array1).isEquals());

  assertTrue(new EqualsBuilder().append(array1,array2).isEquals());

  array1[1][1]=0;

  assertFalse(new EqualsBuilder().append(array1,array2).isEquals());

}

Location: EqualsBuilderTest.java

Content: 

@Test public void testReflectionAppend(){

  assertTrue(EqualsBuilder.reflectionEquals(null,null));

  final TestObject o1=new TestObject(4);

  final TestObject o2=new TestObject(5);

  assertTrue(new EqualsBuilder().reflectionAppend(o1,o1).build());

  assertFalse(new EqualsBuilder().reflectionAppend(o1,o2).build());

  o2.setA(4);

  assertTrue(new EqualsBuilder().reflectionAppend(o1,o2).build());

  assertFalse(new EqualsBuilder().reflectionAppend(o1,this).build());

  assertFalse(new EqualsBuilder().reflectionAppend(o1,null).build());

  assertFalse(new EqualsBuilder().reflectionAppend(null,o2).build());

}

Location: EqualsBuilderTest.java

Content: 

@Test public void testReflectionArrays(){

  final TestObject one=new TestObject(1);

  final TestObject two=new TestObject(2);

  final Object[] o1={one};

  final Object[] o2={two};

  final Object[] o3={one};

  assertFalse(EqualsBuilder.reflectionEquals(o1,o2));

  assertTrue(EqualsBuilder.reflectionEquals(o1,o1));

  assertTrue(EqualsBuilder.reflectionEquals(o1,o3));

  final double[] d1={0,1};

  final double[] d2={2,3};

  final double[] d3={0,1};

  assertFalse(EqualsBuilder.reflectionEquals(d1,d2));

  assertTrue(EqualsBuilder.reflectionEquals(d1,d1));

  assertTrue(EqualsBuilder.reflectionEquals(d1,d3));

}

Location: EqualsBuilderTest.java

Content: 

@Test public void testReflectionEquals(){

  final TestObject o1=new TestObject(4);

  final TestObject o2=new TestObject(5);

  assertTrue(EqualsBuilder.reflectionEquals(o1,o1));

  assertFalse(EqualsBuilder.reflectionEquals(o1,o2));

  o2.setA(4);

  assertTrue(EqualsBuilder.reflectionEquals(o1,o2));

  assertFalse(EqualsBuilder.reflectionEquals(o1,this));

  assertFalse(EqualsBuilder.reflectionEquals(o1,null));

  assertFalse(EqualsBuilder.reflectionEquals(null,o2));

  assertTrue(EqualsBuilder.reflectionEquals(null,null));

}

Location: EqualsBuilderTest.java

Content: 

/** 

 * Equivalence relationship tests inspired by "Effective Java": <ul> <li>reflection</li> <li>symmetry</li> <li>transitive</li> <li>consistency</li> <li>non-null reference</li> </ul>

 * @param to             a TestObject

 * @param toBis          a TestObject, equal to to and toTer

 * @param toTer          Left hand side, equal to to and toBis

 * @param to2            a different TestObject

 * @param oToChange      a TestObject that will be changed

 * @param testTransients whether to test transient instance variables

 */

private void testReflectionEqualsEquivalenceRelationship(final TestObject to,final TestObject toBis,final TestObject toTer,final TestObject to2,final TestObject oToChange,final boolean testTransients){

  assertTrue(EqualsBuilder.reflectionEquals(to,to,testTransients));

  assertTrue(EqualsBuilder.reflectionEquals(to2,to2,testTransients));

  assertTrue(EqualsBuilder.reflectionEquals(to,toBis,testTransients) && EqualsBuilder.reflectionEquals(toBis,to,testTransients));

  assertTrue(EqualsBuilder.reflectionEquals(to,toBis,testTransients) && EqualsBuilder.reflectionEquals(toBis,toTer,testTransients) && EqualsBuilder.reflectionEquals(to,toTer,testTransients));

  oToChange.setA(to.getA());

  if (oToChange instanceof TestSubObject) {

    ((TestSubObject)oToChange).setB(((TestSubObject)to).getB());

  }

  assertTrue(EqualsBuilder.reflectionEquals(oToChange,to,testTransients));

  assertTrue(EqualsBuilder.reflectionEquals(oToChange,to,testTransients));

  oToChange.setA(to.getA() + 1);

  if (oToChange instanceof TestSubObject) {

    ((TestSubObject)oToChange).setB(((TestSubObject)to).getB() + 1);

  }

  assertFalse(EqualsBuilder.reflectionEquals(oToChange,to,testTransients));

  assertFalse(EqualsBuilder.reflectionEquals(oToChange,to,testTransients));

  assertFalse(EqualsBuilder.reflectionEquals(to,null,testTransients));

  assertFalse(EqualsBuilder.reflectionEquals(to2,null,testTransients));

  assertFalse(EqualsBuilder.reflectionEquals(null,to,testTransients));

  assertFalse(EqualsBuilder.reflectionEquals(null,to2,testTransients));

  assertTrue(EqualsBuilder.reflectionEquals(null,null,testTransients));

}

Location: EqualsBuilderTest.java

Content: 

@Test public void testReflectionEqualsExcludeFields(){

  final TestObjectWithMultipleFields x1=new TestObjectWithMultipleFields(1,2,3);

  final TestObjectWithMultipleFields x2=new TestObjectWithMultipleFields(1,3,4);

  assertFalse(EqualsBuilder.reflectionEquals(x1,x2));

  assertFalse(EqualsBuilder.reflectionEquals(x1,x2,(String[])null));

  assertFalse(EqualsBuilder.reflectionEquals(x1,x2));

  assertFalse(EqualsBuilder.reflectionEquals(x1,x2,"xxx"));

  assertFalse(EqualsBuilder.reflectionEquals(x1,x2,"two"));

  assertFalse(EqualsBuilder.reflectionEquals(x1,x2,"three"));

  assertTrue(EqualsBuilder.reflectionEquals(x1,x2,"two","three"));

  assertTrue(EqualsBuilder.reflectionEquals(x1,x2,"one","two","three"));

  assertTrue(EqualsBuilder.reflectionEquals(x1,x2,"one","two","three","xxx"));

}

Location: EqualsBuilderTest.java

Content: 

@Test public void testReflectionHierarchyEquals(){

  testReflectionHierarchyEquals(false);

  testReflectionHierarchyEquals(true);

  assertTrue(EqualsBuilder.reflectionEquals(new TestTTLeafObject(1,2,3,4),new TestTTLeafObject(1,2,3,4),true));

  assertTrue(EqualsBuilder.reflectionEquals(new TestTTLeafObject(1,2,3,4),new TestTTLeafObject(1,2,3,4),false));

  assertFalse(EqualsBuilder.reflectionEquals(new TestTTLeafObject(1,0,0,4),new TestTTLeafObject(1,2,3,4),true));

  assertFalse(EqualsBuilder.reflectionEquals(new TestTTLeafObject(1,2,3,4),new TestTTLeafObject(1,2,3,0),true));

  assertFalse(EqualsBuilder.reflectionEquals(new TestTTLeafObject(0,2,3,4),new TestTTLeafObject(1,2,3,4),true));

}

Location: EqualsBuilderTest.java

Content: 

private void testReflectionHierarchyEquals(final boolean testTransients){

  final TestObject to1=new TestObject(4);

  final TestObject to1Bis=new TestObject(4);

  final TestObject to1Ter=new TestObject(4);

  final TestObject to2=new TestObject(5);

  final TestEmptySubObject teso=new TestEmptySubObject(4);

  final TestTSubObject ttso=new TestTSubObject(4,1);

  final TestTTSubObject tttso=new TestTTSubObject(4,1,2);

  final TestTTLeafObject ttlo=new TestTTLeafObject(4,1,2,3);

  final TestSubObject tso1=new TestSubObject(1,4);

  final TestSubObject tso1bis=new TestSubObject(1,4);

  final TestSubObject tso1ter=new TestSubObject(1,4);

  final TestSubObject tso2=new TestSubObject(2,5);

  testReflectionEqualsEquivalenceRelationship(to1,to1Bis,to1Ter,to2,new TestObject(),testTransients);

  testReflectionEqualsEquivalenceRelationship(tso1,tso1bis,tso1ter,tso2,new TestSubObject(),testTransients);

  assertTrue(EqualsBuilder.reflectionEquals(ttlo,ttlo,testTransients));

  assertTrue(EqualsBuilder.reflectionEquals(new TestSubObject(1,10),new TestSubObject(1,10),testTransients));

  assertFalse(EqualsBuilder.reflectionEquals(new TestSubObject(1,10),new TestSubObject(1,11),testTransients));

  assertFalse(EqualsBuilder.reflectionEquals(new TestSubObject(1,11),new TestSubObject(1,10),testTransients));

  assertFalse(EqualsBuilder.reflectionEquals(new TestSubObject(0,10),new TestSubObject(1,10),testTransients));

  assertFalse(EqualsBuilder.reflectionEquals(new TestSubObject(1,10),new TestSubObject(0,10),testTransients));

  assertTrue(EqualsBuilder.reflectionEquals(to1,teso,testTransients));

  assertTrue(EqualsBuilder.reflectionEquals(teso,to1,testTransients));

  assertTrue(EqualsBuilder.reflectionEquals(to1,ttso,false));

  assertTrue(EqualsBuilder.reflectionEquals(ttso,to1,false));

  assertTrue(EqualsBuilder.reflectionEquals(to1,tttso,false));

  assertTrue(EqualsBuilder.reflectionEquals(tttso,to1,false));

  assertTrue(EqualsBuilder.reflectionEquals(ttso,tttso,false));

  assertTrue(EqualsBuilder.reflectionEquals(tttso,ttso,false));

  assertFalse(EqualsBuilder.reflectionEquals(new TestObject(0),new TestEmptySubObject(1),testTransients));

  assertFalse(EqualsBuilder.reflectionEquals(new TestEmptySubObject(1),new TestObject(0),testTransients));

  assertFalse(EqualsBuilder.reflectionEquals(new TestObject(0),new TestTSubObject(1,1),testTransients));

  assertFalse(EqualsBuilder.reflectionEquals(new TestTSubObject(1,1),new TestObject(0),testTransients));

  assertFalse(EqualsBuilder.reflectionEquals(new TestObject(1),new TestSubObject(0,10),testTransients));

  assertFalse(EqualsBuilder.reflectionEquals(new TestSubObject(0,10),new TestObject(1),testTransients));

  assertFalse(EqualsBuilder.reflectionEquals(to1,ttlo));

  assertFalse(EqualsBuilder.reflectionEquals(tso1,this));

}

Location: EqualsBuilderTest.java

Content: 

@Test public void testShort(){

  final short o1=1;

  final short o2=2;

  assertTrue(new EqualsBuilder().append(o1,o1).isEquals());

  assertFalse(new EqualsBuilder().append(o1,o2).isEquals());

}

Location: EqualsBuilderTest.java

Content: 

@Test public void testShortArray(){

  short[] obj1=new short[2];

  obj1[0]=5;

  obj1[1]=6;

  short[] obj2=new short[2];

  obj2[0]=5;

  obj2[1]=6;

  assertTrue(new EqualsBuilder().append(obj1,obj1).isEquals());

  assertTrue(new EqualsBuilder().append(obj1,obj2).isEquals());

  obj1[1]=7;

  assertFalse(new EqualsBuilder().append(obj1,obj2).isEquals());

  obj2=null;

  assertFalse(new EqualsBuilder().append(obj1,obj2).isEquals());

  obj1=null;

  assertTrue(new EqualsBuilder().append(obj1,obj2).isEquals());

}

Location: EqualsBuilderTest.java

Content: 

@Test public void testShortArrayHiddenByObject(){

  final short[] array1=new short[2];

  array1[0]=5;

  array1[1]=6;

  final short[] array2=new short[2];

  array2[0]=5;

  array2[1]=6;

  final Object obj1=array1;

  final Object obj2=array2;

  assertTrue(new EqualsBuilder().append(obj1,obj1).isEquals());

  assertTrue(new EqualsBuilder().append(obj1,array1).isEquals());

  assertTrue(new EqualsBuilder().append(obj1,obj2).isEquals());

  assertTrue(new EqualsBuilder().append(obj1,array2).isEquals());

  array1[1]=7;

  assertFalse(new EqualsBuilder().append(obj1,obj2).isEquals());

}

Location: EqualsBuilderTest.java

Content: 

@Test public void testSuper(){

  final TestObject o1=new TestObject(4);

  final TestObject o2=new TestObject(5);

  assertTrue(new EqualsBuilder().appendSuper(true).append(o1,o1).isEquals());

  assertFalse(new EqualsBuilder().appendSuper(false).append(o1,o1).isEquals());

  assertFalse(new EqualsBuilder().appendSuper(true).append(o1,o2).isEquals());

  assertFalse(new EqualsBuilder().appendSuper(false).append(o1,o2).isEquals());

}

Location: EqualsBuilderTest.java

Content: 

@Test public void testToEqualsExclude(){

  TestObjectEqualsExclude one=new TestObjectEqualsExclude(1,2);

  TestObjectEqualsExclude two=new TestObjectEqualsExclude(1,3);

  assertFalse(EqualsBuilder.reflectionEquals(one,two));

  one=new TestObjectEqualsExclude(1,2);

  two=new TestObjectEqualsExclude(2,2);

  assertTrue(EqualsBuilder.reflectionEquals(one,two));

}

Location: EqualsBuilderTest.java

Content: 

/** 

 * Tests two instances of classes that can be equal and that are not "related". The two classes are not subclasses of each other and do not share a parent aside from Object. See https://issues.apache.org/bugzilla/show_bug.cgi?id=33069

 */

@Test public void testUnrelatedClasses(){

  final Object[] x={new TestACanEqualB(1)};

  final Object[] y={new TestBCanEqualA(1)};

  assertArrayEquals(x,x);

  assertArrayEquals(y,y);

  assertArrayEquals(x,y);

  assertArrayEquals(y,x);

  assertEquals(x[0],x[0]);

  assertEquals(y[0],y[0]);

  assertEquals(x[0],y[0]);

  assertEquals(y[0],x[0]);

  assertTrue(new EqualsBuilder().append(x,x).isEquals());

  assertTrue(new EqualsBuilder().append(y,y).isEquals());

  assertTrue(new EqualsBuilder().append(x,y).isEquals());

  assertTrue(new EqualsBuilder().append(y,x).isEquals());

}

