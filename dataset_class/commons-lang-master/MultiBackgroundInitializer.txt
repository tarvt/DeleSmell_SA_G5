Location: MultiBackgroundInitializer.java

Content: 

/** 

 * Adds a new  {@code BackgroundInitializer} to this object. When this{@code MultiBackgroundInitializer} is started, the given initializer willbe processed. This method must not be called after  {@link #start()} hasbeen invoked.

 * @param name the name of the initializer (must not be <b>null</b>)

 * @param backgroundInitializer the {@code BackgroundInitializer} to add (must not be<b>null</b>)

 * @throws IllegalArgumentException if a required parameter is missing

 * @throws IllegalStateException if {@code start()} has already been called

 */

public void addInitializer(final String name,final BackgroundInitializer<?> backgroundInitializer){

  Validate.notNull(name,"name");

  Validate.notNull(backgroundInitializer,"backgroundInitializer");

synchronized (this) {

    if (isStarted()) {

      throw new IllegalStateException("addInitializer() must not be called after start()!");

    }

    childInitializers.put(name,backgroundInitializer);

  }

}

Location: MultiBackgroundInitializer.java

Content: 

/** 

 * Returns the number of tasks needed for executing all child  {@code BackgroundInitializer} objects in parallel. This implementation sums upthe required tasks for all child initializers (which is necessary if one of the child initializers is itself a  {@code MultiBackgroundInitializer}). Then it adds 1 for the control task that waits for the completion of the children.

 * @return the number of tasks required for background processing

 */

@Override protected int getTaskCount(){

  int result=1;

  for (  final BackgroundInitializer<?> bi : childInitializers.values()) {

    result+=bi.getTaskCount();

  }

  return result;

}

Location: MultiBackgroundInitializer.java

Content: 

/** 

 * Creates a new instance of  {@code MultiBackgroundInitializer}.

 */

public MultiBackgroundInitializer(){

}

Location: MultiBackgroundInitializer.java

Content: 

/** 

 * Creates a new instance of  {@code MultiBackgroundInitializer} andinitializes it with the given external  {@code ExecutorService}.

 * @param exec the {@code ExecutorService} for executing the backgroundtasks

 */

public MultiBackgroundInitializer(final ExecutorService exec){

  super(exec);

}

