Location: ContextedException.java

Content: 

/** 

 * Adds information helpful to a developer in diagnosing and correcting the problem. For the information to be meaningful, the value passed should have a reasonable toString() implementation. Different values can be added with the same label multiple times. <p> Note: This exception is only serializable if the object added is serializable. </p>

 * @param label  a textual label associated with information, {@code null} not recommended

 * @param value  information needed to understand exception, may be {@code null}

 * @return {@code this}, for method chaining, not  {@code null}

 */

@Override public ContextedException addContextValue(final String label,final Object value){

  exceptionContext.addContextValue(label,value);

  return this;

}

Location: ContextedException.java

Content: 

/** 

 * Instantiates ContextedException without message or cause. <p> The context information is stored using a default implementation.

 */

public ContextedException(){

  exceptionContext=new DefaultExceptionContext();

}

Location: ContextedException.java

Content: 

/** 

 * Instantiates ContextedException with message, but without cause. <p> The context information is stored using a default implementation.

 * @param message  the exception message, may be null

 */

public ContextedException(final String message){

  super(message);

  exceptionContext=new DefaultExceptionContext();

}

Location: ContextedException.java

Content: 

/** 

 * Instantiates ContextedException with cause and message. <p> The context information is stored using a default implementation.

 * @param message  the exception message, may be null

 * @param cause  the underlying cause of the exception, may be null

 */

public ContextedException(final String message,final Throwable cause){

  super(message,cause);

  exceptionContext=new DefaultExceptionContext();

}

Location: ContextedException.java

Content: 

/** 

 * Instantiates ContextedException with cause, message, and ExceptionContext.

 * @param message  the exception message, may be null

 * @param cause  the underlying cause of the exception, may be null

 * @param context  the context used to store the additional information, null uses default implementation

 */

public ContextedException(final String message,final Throwable cause,ExceptionContext context){

  super(message,cause);

  if (context == null) {

    context=new DefaultExceptionContext();

  }

  exceptionContext=context;

}

Location: ContextedException.java

Content: 

/** 

 * Instantiates ContextedException with cause, but without message. <p> The context information is stored using a default implementation.

 * @param cause  the underlying cause of the exception, may be null

 */

public ContextedException(final Throwable cause){

  super(cause);

  exceptionContext=new DefaultExceptionContext();

}

Location: ContextedException.java

Content: 

/** 

 * {@inheritDoc}

 */

@Override public List<Pair<String,Object>> getContextEntries(){

  return this.exceptionContext.getContextEntries();

}

Location: ContextedException.java

Content: 

/** 

 * {@inheritDoc}

 */

@Override public Set<String> getContextLabels(){

  return exceptionContext.getContextLabels();

}

Location: ContextedException.java

Content: 

/** 

 * {@inheritDoc}

 */

@Override public List<Object> getContextValues(final String label){

  return this.exceptionContext.getContextValues(label);

}

Location: ContextedException.java

Content: 

/** 

 * {@inheritDoc}

 */

@Override public Object getFirstContextValue(final String label){

  return this.exceptionContext.getFirstContextValue(label);

}

Location: ContextedException.java

Content: 

/** 

 * {@inheritDoc}

 */

@Override public String getFormattedExceptionMessage(final String baseMessage){

  return exceptionContext.getFormattedExceptionMessage(baseMessage);

}

Location: ContextedException.java

Content: 

/** 

 * Provides the message explaining the exception without the contextual data.

 * @see java.lang.Throwable#getMessage()

 * @return the message

 * @since 3.0.1

 */

public String getRawMessage(){

  return super.getMessage();

}

Location: ContextedException.java

Content: 

/** 

 * Sets information helpful to a developer in diagnosing and correcting the problem. For the information to be meaningful, the value passed should have a reasonable toString() implementation. Any existing values with the same labels are removed before the new one is added. <p> Note: This exception is only serializable if the object added as value is serializable. </p>

 * @param label  a textual label associated with information, {@code null} not recommended

 * @param value  information needed to understand exception, may be {@code null}

 * @return {@code this}, for method chaining, not  {@code null}

 */

@Override public ContextedException setContextValue(final String label,final Object value){

  exceptionContext.setContextValue(label,value);

  return this;

}

