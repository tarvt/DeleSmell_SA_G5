Location: MutableLong.java

Content: 

/** 

 * Increments this instance's value by  {@code operand}; this method returns the value associated with the instance immediately after the addition operation. This method is not thread safe.

 * @param operand the quantity to add, not null

 * @return the value associated with this instance after adding the operand

 * @since 3.5

 */

public long addAndGet(final long operand){

  this.value+=operand;

  return value;

}

Location: MutableLong.java

Content: 

/** 

 * Adds a value to the value of this instance.

 * @param operand  the value to add, not null

 * @since 2.2

 */

public void add(final long operand){

  this.value+=operand;

}

Location: MutableLong.java

Content: 

/** 

 * Compares this mutable to another in ascending order.

 * @param other  the other mutable to compare to, not null

 * @return negative if this is less, zero if equal, positive if greater

 */

@Override public int compareTo(final MutableLong other){

  return NumberUtils.compare(this.value,other.value);

}

Location: MutableLong.java

Content: 

/** 

 * Increments this instance's value by  {@code operand}; this method returns the value associated with the instance immediately prior to the addition operation. This method is not thread safe.

 * @param operand the quantity to add, not null

 * @return the value associated with this instance immediately before the operand was added

 * @since 3.5

 */

public long getAndAdd(final long operand){

  final long last=value;

  this.value+=operand;

  return last;

}

Location: MutableLong.java

Content: 

/** 

 * Constructs a new MutableLong with the default value of zero.

 */

public MutableLong(){

}

Location: MutableLong.java

Content: 

/** 

 * Constructs a new MutableLong with the specified value.

 * @param value  the initial value to store

 */

public MutableLong(final long value){

  this.value=value;

}

Location: MutableLong.java

Content: 

/** 

 * Constructs a new MutableLong with the specified value.

 * @param value  the initial value to store, not null

 * @throws NullPointerException if the object is null

 */

public MutableLong(final Number value){

  this.value=value.longValue();

}

Location: MutableLong.java

Content: 

/** 

 * Constructs a new MutableLong parsing the given string.

 * @param value  the string to parse, not null

 * @throws NumberFormatException if the string cannot be parsed into a long

 * @since 2.5

 */

public MutableLong(final String value){

  this.value=Long.parseLong(value);

}

Location: MutableLong.java

Content: 

/** 

 * Sets the value.

 * @param value  the value to set

 */

public void setValue(final long value){

  this.value=value;

}

Location: MutableLong.java

Content: 

/** 

 * Subtracts a value from the value of this instance.

 * @param operand  the value to subtract, not null

 * @since 2.2

 */

public void subtract(final long operand){

  this.value-=operand;

}

Location: MutableLong.java

Content: 

/** 

 * Gets this mutable as an instance of Long.

 * @return a Long instance containing the value from this mutable, never null

 */

public Long toLong(){

  return Long.valueOf(longValue());

}

