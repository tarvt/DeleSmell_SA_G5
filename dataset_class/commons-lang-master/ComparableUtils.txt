Location: ComparableUtils.java

Content: 

/** 

 * Checks if  {@code (b < a < c)} or {@code (b > a > c)} where the {@code a} is the tested object.

 * @param b the object to compare to the tested object

 * @param c the object to compare to the tested object

 * @param < A > type of the test object

 * @return a predicate for true if the tested object is between b and c and not equal to those

 */

public static <A extends Comparable<A>>Predicate<A> betweenExclusive(final A b,final A c){

  return a -> is(a).betweenExclusive(b,c);

}

Location: ComparableUtils.java

Content: 

/** 

 * Checks if  {@code [b <= a <= c]} or {@code [b >= a >= c]} where the {@code a} is the tested object.

 * @param b the object to compare to the tested object

 * @param c the object to compare to the tested object

 * @param < A > type of the test object

 * @return a predicate for true if the tested object is between b and c

 */

public static <A extends Comparable<A>>Predicate<A> between(final A b,final A c){

  return a -> is(a).between(b,c);

}

Location: ComparableUtils.java

Content: 

private ComparableUtils(){

}

Location: ComparableUtils.java

Content: 

/** 

 * Checks if the tested object is greater than or equal to  {@code b}

 * @param b the object to compare to the tested object

 * @param < A > type of the test object

 * @return a predicate for true if the value returned by {@link Comparable#compareTo}is greater than or equal to  {@code 0}

 */

public static <A extends Comparable<A>>Predicate<A> ge(final A b){

  return a -> is(a).greaterThanOrEqualTo(b);

}

Location: ComparableUtils.java

Content: 

/** 

 * Checks if the tested object is greater than  {@code b}

 * @param b the object to compare to the tested object

 * @param < A > type of the test object

 * @return a predicate for true if the value returned by {@link Comparable#compareTo} is greater than {@code 0}

 */

public static <A extends Comparable<A>>Predicate<A> gt(final A b){

  return a -> is(a).greaterThan(b);

}

Location: ComparableUtils.java

Content: 

/** 

 * Provides access to the available methods

 * @param a base object in the further comparison

 * @param < A > type of the base object

 * @return a builder object with further methods

 */

public static <A extends Comparable<A>>ComparableCheckBuilder<A> is(final A a){

  return new ComparableCheckBuilder<>(a);

}

Location: ComparableUtils.java

Content: 

/** 

 * Checks if the tested object is less than or equal to  {@code b}

 * @param b the object to compare to the tested object

 * @param < A > type of the test object

 * @return a predicate for true if the value returned by {@link Comparable#compareTo}is less than or equal to  {@code 0}

 */

public static <A extends Comparable<A>>Predicate<A> le(final A b){

  return a -> is(a).lessThanOrEqualTo(b);

}

Location: ComparableUtils.java

Content: 

/** 

 * Checks if the tested object is less than  {@code b}

 * @param b the object to compare to the tested object

 * @param < A > type of the test object

 * @return a predicate for true if the value returned by {@link Comparable#compareTo} is less than {@code 0}

 */

public static <A extends Comparable<A>>Predicate<A> lt(final A b){

  return a -> is(a).lessThan(b);

}

