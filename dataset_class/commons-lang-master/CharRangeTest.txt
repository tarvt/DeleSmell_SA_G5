Location: CharRangeTest.java

Content: 

@Test public void testClass(){

  assertFalse(Modifier.isPublic(CharRange.class.getModifiers()));

  assertTrue(Modifier.isFinal(CharRange.class.getModifiers()));

}

Location: CharRangeTest.java

Content: 

@Test public void testConstructorAccessors_is(){

  final CharRange rangea=CharRange.is('a');

  assertEquals('a',rangea.getStart());

  assertEquals('a',rangea.getEnd());

  assertFalse(rangea.isNegated());

  assertEquals("a",rangea.toString());

}

Location: CharRangeTest.java

Content: 

@Test public void testConstructorAccessors_isIn_Normal(){

  final CharRange rangea=CharRange.isIn('a','e');

  assertEquals('a',rangea.getStart());

  assertEquals('e',rangea.getEnd());

  assertFalse(rangea.isNegated());

  assertEquals("a-e",rangea.toString());

}

Location: CharRangeTest.java

Content: 

@Test public void testConstructorAccessors_isIn_Reversed(){

  final CharRange rangea=CharRange.isIn('e','a');

  assertEquals('a',rangea.getStart());

  assertEquals('e',rangea.getEnd());

  assertFalse(rangea.isNegated());

  assertEquals("a-e",rangea.toString());

}

Location: CharRangeTest.java

Content: 

@Test public void testConstructorAccessors_isIn_Same(){

  final CharRange rangea=CharRange.isIn('a','a');

  assertEquals('a',rangea.getStart());

  assertEquals('a',rangea.getEnd());

  assertFalse(rangea.isNegated());

  assertEquals("a",rangea.toString());

}

Location: CharRangeTest.java

Content: 

@Test public void testConstructorAccessors_isNot(){

  final CharRange rangea=CharRange.isNot('a');

  assertEquals('a',rangea.getStart());

  assertEquals('a',rangea.getEnd());

  assertTrue(rangea.isNegated());

  assertEquals("^a",rangea.toString());

}

Location: CharRangeTest.java

Content: 

@Test public void testConstructorAccessors_isNotIn_Normal(){

  final CharRange rangea=CharRange.isNotIn('a','e');

  assertEquals('a',rangea.getStart());

  assertEquals('e',rangea.getEnd());

  assertTrue(rangea.isNegated());

  assertEquals("^a-e",rangea.toString());

}

Location: CharRangeTest.java

Content: 

@Test public void testConstructorAccessors_isNotIn_Reversed(){

  final CharRange rangea=CharRange.isNotIn('e','a');

  assertEquals('a',rangea.getStart());

  assertEquals('e',rangea.getEnd());

  assertTrue(rangea.isNegated());

  assertEquals("^a-e",rangea.toString());

}

Location: CharRangeTest.java

Content: 

@Test public void testConstructorAccessors_isNotIn_Same(){

  final CharRange rangea=CharRange.isNotIn('a','a');

  assertEquals('a',rangea.getStart());

  assertEquals('a',rangea.getEnd());

  assertTrue(rangea.isNegated());

  assertEquals("^a",rangea.toString());

}

Location: CharRangeTest.java

Content: 

@Test public void testContainsNullArg(){

  final CharRange range=CharRange.is('a');

  final NullPointerException e=assertThrows(NullPointerException.class,() -> range.contains(null));

  assertEquals("range",e.getMessage());

}

Location: CharRangeTest.java

Content: 

@Test public void testContains_Charrange(){

  final CharRange a=CharRange.is('a');

  final CharRange b=CharRange.is('b');

  final CharRange c=CharRange.is('c');

  final CharRange c2=CharRange.is('c');

  final CharRange d=CharRange.is('d');

  final CharRange e=CharRange.is('e');

  final CharRange cd=CharRange.isIn('c','d');

  final CharRange bd=CharRange.isIn('b','d');

  final CharRange bc=CharRange.isIn('b','c');

  final CharRange ab=CharRange.isIn('a','b');

  final CharRange de=CharRange.isIn('d','e');

  final CharRange ef=CharRange.isIn('e','f');

  final CharRange ae=CharRange.isIn('a','e');

  assertFalse(c.contains(b));

  assertTrue(c.contains(c));

  assertTrue(c.contains(c2));

  assertFalse(c.contains(d));

  assertFalse(c.contains(cd));

  assertFalse(c.contains(bd));

  assertFalse(c.contains(bc));

  assertFalse(c.contains(ab));

  assertFalse(c.contains(de));

  assertTrue(cd.contains(c));

  assertTrue(bd.contains(c));

  assertTrue(bc.contains(c));

  assertFalse(ab.contains(c));

  assertFalse(de.contains(c));

  assertTrue(ae.contains(b));

  assertTrue(ae.contains(ab));

  assertTrue(ae.contains(bc));

  assertTrue(ae.contains(cd));

  assertTrue(ae.contains(de));

  final CharRange notb=CharRange.isNot('b');

  final CharRange notc=CharRange.isNot('c');

  final CharRange notd=CharRange.isNot('d');

  final CharRange notab=CharRange.isNotIn('a','b');

  final CharRange notbc=CharRange.isNotIn('b','c');

  final CharRange notbd=CharRange.isNotIn('b','d');

  final CharRange notcd=CharRange.isNotIn('c','d');

  final CharRange notde=CharRange.isNotIn('d','e');

  final CharRange notae=CharRange.isNotIn('a','e');

  final CharRange all=CharRange.isIn((char)0,Character.MAX_VALUE);

  final CharRange allbutfirst=CharRange.isIn((char)1,Character.MAX_VALUE);

  assertFalse(c.contains(notc));

  assertFalse(c.contains(notbd));

  assertTrue(all.contains(notc));

  assertTrue(all.contains(notbd));

  assertFalse(allbutfirst.contains(notc));

  assertFalse(allbutfirst.contains(notbd));

  assertTrue(notc.contains(a));

  assertTrue(notc.contains(b));

  assertFalse(notc.contains(c));

  assertTrue(notc.contains(d));

  assertTrue(notc.contains(e));

  assertTrue(notc.contains(ab));

  assertFalse(notc.contains(bc));

  assertFalse(notc.contains(bd));

  assertFalse(notc.contains(cd));

  assertTrue(notc.contains(de));

  assertFalse(notc.contains(ae));

  assertFalse(notc.contains(all));

  assertFalse(notc.contains(allbutfirst));

  assertTrue(notbd.contains(a));

  assertFalse(notbd.contains(b));

  assertFalse(notbd.contains(c));

  assertFalse(notbd.contains(d));

  assertTrue(notbd.contains(e));

  assertTrue(notcd.contains(ab));

  assertFalse(notcd.contains(bc));

  assertFalse(notcd.contains(bd));

  assertFalse(notcd.contains(cd));

  assertFalse(notcd.contains(de));

  assertFalse(notcd.contains(ae));

  assertTrue(notcd.contains(ef));

  assertFalse(notcd.contains(all));

  assertFalse(notcd.contains(allbutfirst));

  assertFalse(notc.contains(notb));

  assertTrue(notc.contains(notc));

  assertFalse(notc.contains(notd));

  assertFalse(notc.contains(notab));

  assertTrue(notc.contains(notbc));

  assertTrue(notc.contains(notbd));

  assertTrue(notc.contains(notcd));

  assertFalse(notc.contains(notde));

  assertFalse(notbd.contains(notb));

  assertFalse(notbd.contains(notc));

  assertFalse(notbd.contains(notd));

  assertFalse(notbd.contains(notab));

  assertFalse(notbd.contains(notbc));

  assertTrue(notbd.contains(notbd));

  assertFalse(notbd.contains(notcd));

  assertFalse(notbd.contains(notde));

  assertTrue(notbd.contains(notae));

}

Location: CharRangeTest.java

Content: 

@Test public void testEquals_Object(){

  final CharRange rangea=CharRange.is('a');

  final CharRange rangeae=CharRange.isIn('a','e');

  final CharRange rangenotbf=CharRange.isIn('b','f');

  assertNotEquals(null,rangea);

  assertEquals(rangea,rangea);

  assertEquals(rangea,CharRange.is('a'));

  assertEquals(rangeae,rangeae);

  assertEquals(rangeae,CharRange.isIn('a','e'));

  assertEquals(rangenotbf,rangenotbf);

  assertEquals(rangenotbf,CharRange.isIn('b','f'));

  assertNotEquals(rangea,rangeae);

  assertNotEquals(rangea,rangenotbf);

  assertNotEquals(rangeae,rangea);

  assertNotEquals(rangeae,rangenotbf);

  assertNotEquals(rangenotbf,rangea);

  assertNotEquals(rangenotbf,rangeae);

}

Location: CharRangeTest.java

Content: 

@Test public void testIteratorRemove(){

  final CharRange a=CharRange.is('a');

  final Iterator<Character> aIt=a.iterator();

  assertThrows(UnsupportedOperationException.class,aIt::remove);

}

