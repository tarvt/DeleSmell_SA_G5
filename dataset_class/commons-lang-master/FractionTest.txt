Location: FractionTest.java

Content: 

@Test public void testAbs(){

  Fraction f;

  f=Fraction.getFraction(50,75);

  f=f.abs();

  assertEquals(50,f.getNumerator());

  assertEquals(75,f.getDenominator());

  f=Fraction.getFraction(-50,75);

  f=f.abs();

  assertEquals(50,f.getNumerator());

  assertEquals(75,f.getDenominator());

  f=Fraction.getFraction(Integer.MAX_VALUE,1);

  f=f.abs();

  assertEquals(Integer.MAX_VALUE,f.getNumerator());

  assertEquals(1,f.getDenominator());

  f=Fraction.getFraction(Integer.MAX_VALUE,-1);

  f=f.abs();

  assertEquals(Integer.MAX_VALUE,f.getNumerator());

  assertEquals(1,f.getDenominator());

  assertThrows(ArithmeticException.class,() -> Fraction.getFraction(Integer.MIN_VALUE,1).abs());

}

Location: FractionTest.java

Content: 

@Test public void testAdd(){

  Fraction f;

  Fraction f1;

  Fraction f2;

  f1=Fraction.getFraction(3,5);

  f2=Fraction.getFraction(1,5);

  f=f1.add(f2);

  assertEquals(4,f.getNumerator());

  assertEquals(5,f.getDenominator());

  f1=Fraction.getFraction(3,5);

  f2=Fraction.getFraction(2,5);

  f=f1.add(f2);

  assertEquals(1,f.getNumerator());

  assertEquals(1,f.getDenominator());

  f1=Fraction.getFraction(3,5);

  f2=Fraction.getFraction(3,5);

  f=f1.add(f2);

  assertEquals(6,f.getNumerator());

  assertEquals(5,f.getDenominator());

  f1=Fraction.getFraction(3,5);

  f2=Fraction.getFraction(-4,5);

  f=f1.add(f2);

  assertEquals(-1,f.getNumerator());

  assertEquals(5,f.getDenominator());

  f1=Fraction.getFraction(Integer.MAX_VALUE - 1,1);

  f2=Fraction.ONE;

  f=f1.add(f2);

  assertEquals(Integer.MAX_VALUE,f.getNumerator());

  assertEquals(1,f.getDenominator());

  f1=Fraction.getFraction(3,5);

  f2=Fraction.getFraction(1,2);

  f=f1.add(f2);

  assertEquals(11,f.getNumerator());

  assertEquals(10,f.getDenominator());

  f1=Fraction.getFraction(3,8);

  f2=Fraction.getFraction(1,6);

  f=f1.add(f2);

  assertEquals(13,f.getNumerator());

  assertEquals(24,f.getDenominator());

  f1=Fraction.getFraction(0,5);

  f2=Fraction.getFraction(1,5);

  f=f1.add(f2);

  assertSame(f2,f);

  f=f2.add(f1);

  assertSame(f2,f);

  f1=Fraction.getFraction(-1,13 * 13 * 2* 2);

  f2=Fraction.getFraction(-2,13 * 17 * 2);

  final Fraction fr=f1.add(f2);

  assertEquals(13 * 13 * 17* 2* 2,fr.getDenominator());

  assertEquals(-17 - 2 * 13 * 2,fr.getNumerator());

  assertThrows(NullPointerException.class,() -> fr.add(null));

  f1=Fraction.getFraction(1,32768 * 3);

  f2=Fraction.getFraction(1,59049);

  f=f1.add(f2);

  assertEquals(52451,f.getNumerator());

  assertEquals(1934917632,f.getDenominator());

  f1=Fraction.getFraction(Integer.MIN_VALUE,3);

  f2=Fraction.ONE_THIRD;

  f=f1.add(f2);

  assertEquals(Integer.MIN_VALUE + 1,f.getNumerator());

  assertEquals(3,f.getDenominator());

  f1=Fraction.getFraction(Integer.MAX_VALUE - 1,1);

  f2=Fraction.ONE;

  f=f1.add(f2);

  assertEquals(Integer.MAX_VALUE,f.getNumerator());

  assertEquals(1,f.getDenominator());

  final Fraction overflower=f;

  assertThrows(ArithmeticException.class,() -> overflower.add(Fraction.ONE));

  assertThrows(ArithmeticException.class,() -> Fraction.getFraction(Integer.MIN_VALUE,5).add(Fraction.getFraction(-1,5)));

  final Fraction maxValue=Fraction.getFraction(-Integer.MAX_VALUE,1);

  assertThrows(ArithmeticException.class,() -> maxValue.add(maxValue));

  final Fraction negativeMaxValue=Fraction.getFraction(-Integer.MAX_VALUE,1);

  assertThrows(ArithmeticException.class,() -> negativeMaxValue.add(negativeMaxValue));

  final Fraction f3=Fraction.getFraction(3,327680);

  final Fraction f4=Fraction.getFraction(2,59049);

  assertThrows(ArithmeticException.class,() -> f3.add(f4));

}

Location: FractionTest.java

Content: 

@Test public void testConversions(){

  Fraction f;

  f=Fraction.getFraction(3,7,8);

  assertEquals(3,f.intValue());

  assertEquals(3L,f.longValue());

  assertEquals(3.875f,f.floatValue(),0.00001f);

  assertEquals(3.875d,f.doubleValue(),0.00001d);

}

Location: FractionTest.java

Content: 

@Test public void testDivide(){

  Fraction f;

  Fraction f1;

  Fraction f2;

  f1=Fraction.getFraction(3,5);

  f2=Fraction.getFraction(2,5);

  f=f1.divideBy(f2);

  assertEquals(3,f.getNumerator());

  assertEquals(2,f.getDenominator());

  assertThrows(ArithmeticException.class,() -> Fraction.getFraction(3,5).divideBy(Fraction.ZERO));

  f1=Fraction.getFraction(0,5);

  f2=Fraction.getFraction(2,7);

  f=f1.divideBy(f2);

  assertSame(Fraction.ZERO,f);

  f1=Fraction.getFraction(2,7);

  f2=Fraction.ONE;

  f=f1.divideBy(f2);

  assertEquals(2,f.getNumerator());

  assertEquals(7,f.getDenominator());

  f1=Fraction.getFraction(1,Integer.MAX_VALUE);

  f=f1.divideBy(f1);

  assertEquals(1,f.getNumerator());

  assertEquals(1,f.getDenominator());

  f1=Fraction.getFraction(Integer.MIN_VALUE,Integer.MAX_VALUE);

  f2=Fraction.getFraction(1,Integer.MAX_VALUE);

  final Fraction fr=f1.divideBy(f2);

  assertEquals(Integer.MIN_VALUE,fr.getNumerator());

  assertEquals(1,fr.getDenominator());

  assertThrows(NullPointerException.class,() -> fr.divideBy(null));

  final Fraction smallest=Fraction.getFraction(1,Integer.MAX_VALUE);

  assertThrows(ArithmeticException.class,() -> smallest.divideBy(smallest.invert()));

  final Fraction negative=Fraction.getFraction(1,-Integer.MAX_VALUE);

  assertThrows(ArithmeticException.class,() -> negative.divideBy(negative.invert()));

}

Location: FractionTest.java

Content: 

@Test public void testFactory_double(){

  assertThrows(ArithmeticException.class,() -> Fraction.getFraction(Double.NaN));

  assertThrows(ArithmeticException.class,() -> Fraction.getFraction(Double.POSITIVE_INFINITY));

  assertThrows(ArithmeticException.class,() -> Fraction.getFraction(Double.NEGATIVE_INFINITY));

  assertThrows(ArithmeticException.class,() -> Fraction.getFraction((double)Integer.MAX_VALUE + 1));

  Fraction f=Fraction.getFraction(0.0d);

  assertEquals(0,f.getNumerator());

  assertEquals(1,f.getDenominator());

  f=Fraction.getFraction(1.0d);

  assertEquals(1,f.getNumerator());

  assertEquals(1,f.getDenominator());

  f=Fraction.getFraction(0.5d);

  assertEquals(1,f.getNumerator());

  assertEquals(2,f.getDenominator());

  f=Fraction.getFraction(-0.875d);

  assertEquals(-7,f.getNumerator());

  assertEquals(8,f.getDenominator());

  f=Fraction.getFraction(1.25d);

  assertEquals(5,f.getNumerator());

  assertEquals(4,f.getDenominator());

  f=Fraction.getFraction(0.66666d);

  assertEquals(2,f.getNumerator());

  assertEquals(3,f.getDenominator());

  f=Fraction.getFraction(1.0d / 10001d);

  assertEquals(0,f.getNumerator());

  assertEquals(1,f.getDenominator());

  Fraction f2=null;

  for (int i=1; i <= 100; i++) {

    for (int j=1; j <= i; j++) {

      f=Fraction.getFraction((double)j / (double)i);

      f2=Fraction.getReducedFraction(j,i);

      assertEquals(f2.getNumerator(),f.getNumerator());

      assertEquals(f2.getDenominator(),f.getDenominator());

    }

  }

  for (int i=1001; i <= 10000; i+=SKIP) {

    for (int j=1; j <= i; j++) {

      f=Fraction.getFraction((double)j / (double)i);

      f2=Fraction.getReducedFraction(j,i);

      assertEquals(f2.getNumerator(),f.getNumerator());

      assertEquals(f2.getDenominator(),f.getDenominator());

    }

  }

}

Location: FractionTest.java

Content: 

@Test public void testFactory_int_int(){

  Fraction f;

  f=Fraction.getFraction(0,1);

  assertEquals(0,f.getNumerator());

  assertEquals(1,f.getDenominator());

  f=Fraction.getFraction(0,2);

  assertEquals(0,f.getNumerator());

  assertEquals(2,f.getDenominator());

  f=Fraction.getFraction(1,1);

  assertEquals(1,f.getNumerator());

  assertEquals(1,f.getDenominator());

  f=Fraction.getFraction(2,1);

  assertEquals(2,f.getNumerator());

  assertEquals(1,f.getDenominator());

  f=Fraction.getFraction(23,345);

  assertEquals(23,f.getNumerator());

  assertEquals(345,f.getDenominator());

  f=Fraction.getFraction(22,7);

  assertEquals(22,f.getNumerator());

  assertEquals(7,f.getDenominator());

  f=Fraction.getFraction(-6,10);

  assertEquals(-6,f.getNumerator());

  assertEquals(10,f.getDenominator());

  f=Fraction.getFraction(6,-10);

  assertEquals(-6,f.getNumerator());

  assertEquals(10,f.getDenominator());

  f=Fraction.getFraction(-6,-10);

  assertEquals(6,f.getNumerator());

  assertEquals(10,f.getDenominator());

  assertThrows(ArithmeticException.class,() -> Fraction.getFraction(1,0));

  assertThrows(ArithmeticException.class,() -> Fraction.getFraction(2,0));

  assertThrows(ArithmeticException.class,() -> Fraction.getFraction(-3,0));

  assertThrows(ArithmeticException.class,() -> Fraction.getFraction(4,Integer.MIN_VALUE));

  assertThrows(ArithmeticException.class,() -> Fraction.getFraction(1,Integer.MIN_VALUE));

}

Location: FractionTest.java

Content: 

@Test public void testFactory_int_int_int(){

  Fraction f;

  f=Fraction.getFraction(0,0,2);

  assertEquals(0,f.getNumerator());

  assertEquals(2,f.getDenominator());

  f=Fraction.getFraction(2,0,2);

  assertEquals(4,f.getNumerator());

  assertEquals(2,f.getDenominator());

  f=Fraction.getFraction(0,1,2);

  assertEquals(1,f.getNumerator());

  assertEquals(2,f.getDenominator());

  f=Fraction.getFraction(1,1,2);

  assertEquals(3,f.getNumerator());

  assertEquals(2,f.getDenominator());

  assertThrows(ArithmeticException.class,() -> Fraction.getFraction(1,-6,-10));

  assertThrows(ArithmeticException.class,() -> Fraction.getFraction(1,-6,-10));

  assertThrows(ArithmeticException.class,() -> Fraction.getFraction(1,-6,-10));

  f=Fraction.getFraction(-1,6,10);

  assertEquals(-16,f.getNumerator());

  assertEquals(10,f.getDenominator());

  assertThrows(ArithmeticException.class,() -> Fraction.getFraction(-1,-6,10));

  assertThrows(ArithmeticException.class,() -> Fraction.getFraction(-1,6,-10));

  assertThrows(ArithmeticException.class,() -> Fraction.getFraction(-1,-6,-10));

  assertThrows(ArithmeticException.class,() -> Fraction.getFraction(0,1,0));

  assertThrows(ArithmeticException.class,() -> Fraction.getFraction(1,2,0));

  assertThrows(ArithmeticException.class,() -> Fraction.getFraction(-1,-3,0));

  assertThrows(ArithmeticException.class,() -> Fraction.getFraction(Integer.MAX_VALUE,1,2));

  assertThrows(ArithmeticException.class,() -> Fraction.getFraction(-Integer.MAX_VALUE,1,2));

  f=Fraction.getFraction(-1,0,Integer.MAX_VALUE);

  assertEquals(-Integer.MAX_VALUE,f.getNumerator());

  assertEquals(Integer.MAX_VALUE,f.getDenominator());

  assertThrows(ArithmeticException.class,() -> Fraction.getFraction(0,4,Integer.MIN_VALUE));

  assertThrows(ArithmeticException.class,() -> Fraction.getFraction(1,1,Integer.MAX_VALUE));

  assertThrows(ArithmeticException.class,() -> Fraction.getFraction(-1,2,Integer.MAX_VALUE));

}

Location: FractionTest.java

Content: 

@Test public void testFactory_String(){

  assertThrows(NullPointerException.class,() -> Fraction.getFraction(null));

}

Location: FractionTest.java

Content: 

@Test public void testFactory_String_double(){

  Fraction f;

  f=Fraction.getFraction("0.0");

  assertEquals(0,f.getNumerator());

  assertEquals(1,f.getDenominator());

  f=Fraction.getFraction("0.2");

  assertEquals(1,f.getNumerator());

  assertEquals(5,f.getDenominator());

  f=Fraction.getFraction("0.5");

  assertEquals(1,f.getNumerator());

  assertEquals(2,f.getDenominator());

  f=Fraction.getFraction("0.66666");

  assertEquals(2,f.getNumerator());

  assertEquals(3,f.getDenominator());

  assertThrows(NumberFormatException.class,() -> Fraction.getFraction("2.3R"));

  assertThrows(NumberFormatException.class,() -> Fraction.getFraction("2147483648"));

  assertThrows(NumberFormatException.class,() -> Fraction.getFraction("."));

}

Location: FractionTest.java

Content: 

@Test public void testFactory_String_improper(){

  Fraction f;

  f=Fraction.getFraction("0/1");

  assertEquals(0,f.getNumerator());

  assertEquals(1,f.getDenominator());

  f=Fraction.getFraction("1/5");

  assertEquals(1,f.getNumerator());

  assertEquals(5,f.getDenominator());

  f=Fraction.getFraction("1/2");

  assertEquals(1,f.getNumerator());

  assertEquals(2,f.getDenominator());

  f=Fraction.getFraction("2/3");

  assertEquals(2,f.getNumerator());

  assertEquals(3,f.getDenominator());

  f=Fraction.getFraction("7/3");

  assertEquals(7,f.getNumerator());

  assertEquals(3,f.getDenominator());

  f=Fraction.getFraction("2/4");

  assertEquals(2,f.getNumerator());

  assertEquals(4,f.getDenominator());

  assertThrows(NumberFormatException.class,() -> Fraction.getFraction("2/d"));

  assertThrows(NumberFormatException.class,() -> Fraction.getFraction("2e/3"));

  assertThrows(NumberFormatException.class,() -> Fraction.getFraction("2/"));

  assertThrows(NumberFormatException.class,() -> Fraction.getFraction("/"));

}

Location: FractionTest.java

Content: 

@Test public void testFactory_String_proper(){

  Fraction f;

  f=Fraction.getFraction("0 0/1");

  assertEquals(0,f.getNumerator());

  assertEquals(1,f.getDenominator());

  f=Fraction.getFraction("1 1/5");

  assertEquals(6,f.getNumerator());

  assertEquals(5,f.getDenominator());

  f=Fraction.getFraction("7 1/2");

  assertEquals(15,f.getNumerator());

  assertEquals(2,f.getDenominator());

  f=Fraction.getFraction("1 2/4");

  assertEquals(6,f.getNumerator());

  assertEquals(4,f.getDenominator());

  f=Fraction.getFraction("-7 1/2");

  assertEquals(-15,f.getNumerator());

  assertEquals(2,f.getDenominator());

  f=Fraction.getFraction("-1 2/4");

  assertEquals(-6,f.getNumerator());

  assertEquals(4,f.getDenominator());

  assertThrows(NumberFormatException.class,() -> Fraction.getFraction("2 3"));

  assertThrows(NumberFormatException.class,() -> Fraction.getFraction("a 3"));

  assertThrows(NumberFormatException.class,() -> Fraction.getFraction("2 b/4"));

  assertThrows(NumberFormatException.class,() -> Fraction.getFraction("2 "));

  assertThrows(NumberFormatException.class,() -> Fraction.getFraction(" 3"));

  assertThrows(NumberFormatException.class,() -> Fraction.getFraction(" "));

}

Location: FractionTest.java

Content: 

@Test public void testGets(){

  Fraction f;

  f=Fraction.getFraction(3,5,6);

  assertEquals(23,f.getNumerator());

  assertEquals(3,f.getProperWhole());

  assertEquals(5,f.getProperNumerator());

  assertEquals(6,f.getDenominator());

  f=Fraction.getFraction(-3,5,6);

  assertEquals(-23,f.getNumerator());

  assertEquals(-3,f.getProperWhole());

  assertEquals(5,f.getProperNumerator());

  assertEquals(6,f.getDenominator());

  f=Fraction.getFraction(Integer.MIN_VALUE,0,1);

  assertEquals(Integer.MIN_VALUE,f.getNumerator());

  assertEquals(Integer.MIN_VALUE,f.getProperWhole());

  assertEquals(0,f.getProperNumerator());

  assertEquals(1,f.getDenominator());

}

Location: FractionTest.java

Content: 

@Test public void testInvert(){

  Fraction f;

  f=Fraction.getFraction(50,75);

  f=f.invert();

  assertEquals(75,f.getNumerator());

  assertEquals(50,f.getDenominator());

  f=Fraction.getFraction(4,3);

  f=f.invert();

  assertEquals(3,f.getNumerator());

  assertEquals(4,f.getDenominator());

  f=Fraction.getFraction(-15,47);

  f=f.invert();

  assertEquals(-47,f.getNumerator());

  assertEquals(15,f.getDenominator());

  assertThrows(ArithmeticException.class,() -> Fraction.getFraction(0,3).invert());

  assertThrows(ArithmeticException.class,() -> Fraction.getFraction(Integer.MIN_VALUE,1).invert());

  f=Fraction.getFraction(Integer.MAX_VALUE,1);

  f=f.invert();

  assertEquals(1,f.getNumerator());

  assertEquals(Integer.MAX_VALUE,f.getDenominator());

}

Location: FractionTest.java

Content: 

@Test public void testMultiply(){

  Fraction f;

  Fraction f1;

  Fraction f2;

  f1=Fraction.getFraction(3,5);

  f2=Fraction.getFraction(2,5);

  f=f1.multiplyBy(f2);

  assertEquals(6,f.getNumerator());

  assertEquals(25,f.getDenominator());

  f1=Fraction.getFraction(6,10);

  f2=Fraction.getFraction(6,10);

  f=f1.multiplyBy(f2);

  assertEquals(9,f.getNumerator());

  assertEquals(25,f.getDenominator());

  f=f.multiplyBy(f2);

  assertEquals(27,f.getNumerator());

  assertEquals(125,f.getDenominator());

  f1=Fraction.getFraction(3,5);

  f2=Fraction.getFraction(-2,5);

  f=f1.multiplyBy(f2);

  assertEquals(-6,f.getNumerator());

  assertEquals(25,f.getDenominator());

  f1=Fraction.getFraction(-3,5);

  f2=Fraction.getFraction(-2,5);

  f=f1.multiplyBy(f2);

  assertEquals(6,f.getNumerator());

  assertEquals(25,f.getDenominator());

  f1=Fraction.getFraction(0,5);

  f2=Fraction.getFraction(2,7);

  f=f1.multiplyBy(f2);

  assertSame(Fraction.ZERO,f);

  f1=Fraction.getFraction(2,7);

  f2=Fraction.ONE;

  f=f1.multiplyBy(f2);

  assertEquals(2,f.getNumerator());

  assertEquals(7,f.getDenominator());

  f1=Fraction.getFraction(Integer.MAX_VALUE,1);

  f2=Fraction.getFraction(Integer.MIN_VALUE,Integer.MAX_VALUE);

  f=f1.multiplyBy(f2);

  assertEquals(Integer.MIN_VALUE,f.getNumerator());

  assertEquals(1,f.getDenominator());

  final Fraction fr=f;

  assertThrows(NullPointerException.class,() -> fr.multiplyBy(null));

  final Fraction fr1=Fraction.getFraction(1,Integer.MAX_VALUE);

  assertThrows(ArithmeticException.class,() -> fr1.multiplyBy(fr1));

  final Fraction fr2=Fraction.getFraction(1,-Integer.MAX_VALUE);

  assertThrows(ArithmeticException.class,() -> fr2.multiplyBy(fr2));

}

Location: FractionTest.java

Content: 

@Test public void testNegate(){

  Fraction f;

  f=Fraction.getFraction(50,75);

  f=f.negate();

  assertEquals(-50,f.getNumerator());

  assertEquals(75,f.getDenominator());

  f=Fraction.getFraction(-50,75);

  f=f.negate();

  assertEquals(50,f.getNumerator());

  assertEquals(75,f.getDenominator());

  f=Fraction.getFraction(Integer.MAX_VALUE - 1,Integer.MAX_VALUE);

  f=f.negate();

  assertEquals(Integer.MIN_VALUE + 2,f.getNumerator());

  assertEquals(Integer.MAX_VALUE,f.getDenominator());

  assertThrows(ArithmeticException.class,() -> Fraction.getFraction(Integer.MIN_VALUE,1).negate());

}

Location: FractionTest.java

Content: 

@Test public void testPow(){

  Fraction f;

  f=Fraction.getFraction(3,5);

  assertEquals(Fraction.ONE,f.pow(0));

  f=Fraction.getFraction(3,5);

  assertSame(f,f.pow(1));

  assertEquals(f,f.pow(1));

  f=Fraction.getFraction(3,5);

  f=f.pow(2);

  assertEquals(9,f.getNumerator());

  assertEquals(25,f.getDenominator());

  f=Fraction.getFraction(3,5);

  f=f.pow(3);

  assertEquals(27,f.getNumerator());

  assertEquals(125,f.getDenominator());

  f=Fraction.getFraction(3,5);

  f=f.pow(-1);

  assertEquals(5,f.getNumerator());

  assertEquals(3,f.getDenominator());

  f=Fraction.getFraction(3,5);

  f=f.pow(-2);

  assertEquals(25,f.getNumerator());

  assertEquals(9,f.getDenominator());

  f=Fraction.getFraction(6,10);

  assertEquals(Fraction.ONE,f.pow(0));

  f=Fraction.getFraction(6,10);

  assertEquals(f,f.pow(1));

  assertNotEquals(f.pow(1),Fraction.getFraction(3,5));

  f=Fraction.getFraction(6,10);

  f=f.pow(2);

  assertEquals(9,f.getNumerator());

  assertEquals(25,f.getDenominator());

  f=Fraction.getFraction(6,10);

  f=f.pow(3);

  assertEquals(27,f.getNumerator());

  assertEquals(125,f.getDenominator());

  f=Fraction.getFraction(6,10);

  f=f.pow(-1);

  assertEquals(10,f.getNumerator());

  assertEquals(6,f.getDenominator());

  f=Fraction.getFraction(6,10);

  f=f.pow(-2);

  assertEquals(25,f.getNumerator());

  assertEquals(9,f.getDenominator());

  f=Fraction.getFraction(0,1231);

  f=f.pow(1);

  assertEquals(0,f.compareTo(Fraction.ZERO));

  assertEquals(0,f.getNumerator());

  assertEquals(1231,f.getDenominator());

  f=f.pow(2);

  assertEquals(0,f.compareTo(Fraction.ZERO));

  assertEquals(0,f.getNumerator());

  assertEquals(1,f.getDenominator());

  final Fraction fr=f;

  assertThrows(ArithmeticException.class,() -> fr.pow(-1));

  assertThrows(ArithmeticException.class,() -> fr.pow(Integer.MIN_VALUE));

  f=Fraction.getFraction(1,1);

  f=f.pow(0);

  assertEquals(f,Fraction.ONE);

  f=f.pow(1);

  assertEquals(f,Fraction.ONE);

  f=f.pow(-1);

  assertEquals(f,Fraction.ONE);

  f=f.pow(Integer.MAX_VALUE);

  assertEquals(f,Fraction.ONE);

  f=f.pow(Integer.MIN_VALUE);

  assertEquals(f,Fraction.ONE);

  assertThrows(ArithmeticException.class,() -> Fraction.getFraction(Integer.MAX_VALUE,1).pow(2));

  assertThrows(ArithmeticException.class,() -> Fraction.getFraction(Integer.MIN_VALUE,1).pow(3));

  assertThrows(ArithmeticException.class,() -> Fraction.getFraction(65536,1).pow(2));

}

Location: FractionTest.java

Content: 

@Test public void testReduce(){

  Fraction f;

  f=Fraction.getFraction(50,75);

  Fraction result=f.reduce();

  assertEquals(2,result.getNumerator());

  assertEquals(3,result.getDenominator());

  f=Fraction.getFraction(-2,-3);

  result=f.reduce();

  assertEquals(2,result.getNumerator());

  assertEquals(3,result.getDenominator());

  f=Fraction.getFraction(2,-3);

  result=f.reduce();

  assertEquals(-2,result.getNumerator());

  assertEquals(3,result.getDenominator());

  f=Fraction.getFraction(-2,3);

  result=f.reduce();

  assertEquals(-2,result.getNumerator());

  assertEquals(3,result.getDenominator());

  assertSame(f,result);

  f=Fraction.getFraction(2,3);

  result=f.reduce();

  assertEquals(2,result.getNumerator());

  assertEquals(3,result.getDenominator());

  assertSame(f,result);

  f=Fraction.getFraction(0,1);

  result=f.reduce();

  assertEquals(0,result.getNumerator());

  assertEquals(1,result.getDenominator());

  assertSame(f,result);

  f=Fraction.getFraction(0,100);

  result=f.reduce();

  assertEquals(0,result.getNumerator());

  assertEquals(1,result.getDenominator());

  assertSame(result,Fraction.ZERO);

  f=Fraction.getFraction(Integer.MIN_VALUE,2);

  result=f.reduce();

  assertEquals(Integer.MIN_VALUE / 2,result.getNumerator());

  assertEquals(1,result.getDenominator());

}

Location: FractionTest.java

Content: 

@Test public void testReducedFactory_int_int(){

  Fraction f;

  f=Fraction.getReducedFraction(0,1);

  assertEquals(0,f.getNumerator());

  assertEquals(1,f.getDenominator());

  f=Fraction.getReducedFraction(1,1);

  assertEquals(1,f.getNumerator());

  assertEquals(1,f.getDenominator());

  f=Fraction.getReducedFraction(2,1);

  assertEquals(2,f.getNumerator());

  assertEquals(1,f.getDenominator());

  f=Fraction.getReducedFraction(22,7);

  assertEquals(22,f.getNumerator());

  assertEquals(7,f.getDenominator());

  f=Fraction.getReducedFraction(-6,10);

  assertEquals(-3,f.getNumerator());

  assertEquals(5,f.getDenominator());

  f=Fraction.getReducedFraction(6,-10);

  assertEquals(-3,f.getNumerator());

  assertEquals(5,f.getDenominator());

  f=Fraction.getReducedFraction(-6,-10);

  assertEquals(3,f.getNumerator());

  assertEquals(5,f.getDenominator());

  assertThrows(ArithmeticException.class,() -> Fraction.getReducedFraction(1,0));

  assertThrows(ArithmeticException.class,() -> Fraction.getReducedFraction(2,0));

  assertThrows(ArithmeticException.class,() -> Fraction.getReducedFraction(-3,0));

  f=Fraction.getReducedFraction(0,2);

  assertEquals(0,f.getNumerator());

  assertEquals(1,f.getDenominator());

  f=Fraction.getReducedFraction(2,2);

  assertEquals(1,f.getNumerator());

  assertEquals(1,f.getDenominator());

  f=Fraction.getReducedFraction(2,4);

  assertEquals(1,f.getNumerator());

  assertEquals(2,f.getDenominator());

  f=Fraction.getReducedFraction(15,10);

  assertEquals(3,f.getNumerator());

  assertEquals(2,f.getDenominator());

  f=Fraction.getReducedFraction(121,22);

  assertEquals(11,f.getNumerator());

  assertEquals(2,f.getDenominator());

  f=Fraction.getReducedFraction(-2,Integer.MIN_VALUE);

  assertEquals(1,f.getNumerator());

  assertEquals(-(Integer.MIN_VALUE / 2),f.getDenominator());

  assertThrows(ArithmeticException.class,() -> Fraction.getReducedFraction(-7,Integer.MIN_VALUE));

  f=Fraction.getReducedFraction(Integer.MIN_VALUE,2);

  assertEquals(Integer.MIN_VALUE / 2,f.getNumerator());

  assertEquals(1,f.getDenominator());

}

Location: FractionTest.java

Content: 

@Test public void testSubtract(){

  Fraction f;

  Fraction f1;

  Fraction f2;

  f1=Fraction.getFraction(3,5);

  f2=Fraction.getFraction(1,5);

  f=f1.subtract(f2);

  assertEquals(2,f.getNumerator());

  assertEquals(5,f.getDenominator());

  f1=Fraction.getFraction(7,5);

  f2=Fraction.getFraction(2,5);

  f=f1.subtract(f2);

  assertEquals(1,f.getNumerator());

  assertEquals(1,f.getDenominator());

  f1=Fraction.getFraction(3,5);

  f2=Fraction.getFraction(3,5);

  f=f1.subtract(f2);

  assertEquals(0,f.getNumerator());

  assertEquals(1,f.getDenominator());

  f1=Fraction.getFraction(3,5);

  f2=Fraction.getFraction(-4,5);

  f=f1.subtract(f2);

  assertEquals(7,f.getNumerator());

  assertEquals(5,f.getDenominator());

  f1=Fraction.getFraction(0,5);

  f2=Fraction.getFraction(4,5);

  f=f1.subtract(f2);

  assertEquals(-4,f.getNumerator());

  assertEquals(5,f.getDenominator());

  f1=Fraction.getFraction(0,5);

  f2=Fraction.getFraction(-4,5);

  f=f1.subtract(f2);

  assertEquals(4,f.getNumerator());

  assertEquals(5,f.getDenominator());

  f1=Fraction.getFraction(3,5);

  f2=Fraction.getFraction(1,2);

  f=f1.subtract(f2);

  assertEquals(1,f.getNumerator());

  assertEquals(10,f.getDenominator());

  f1=Fraction.getFraction(0,5);

  f2=Fraction.getFraction(1,5);

  f=f2.subtract(f1);

  assertSame(f2,f);

  final Fraction fr=f;

  assertThrows(NullPointerException.class,() -> fr.subtract(null));

  f1=Fraction.getFraction(1,32768 * 3);

  f2=Fraction.getFraction(1,59049);

  f=f1.subtract(f2);

  assertEquals(-13085,f.getNumerator());

  assertEquals(1934917632,f.getDenominator());

  f1=Fraction.getFraction(Integer.MIN_VALUE,3);

  f2=Fraction.ONE_THIRD.negate();

  f=f1.subtract(f2);

  assertEquals(Integer.MIN_VALUE + 1,f.getNumerator());

  assertEquals(3,f.getDenominator());

  f1=Fraction.getFraction(Integer.MAX_VALUE,1);

  f2=Fraction.ONE;

  f=f1.subtract(f2);

  assertEquals(Integer.MAX_VALUE - 1,f.getNumerator());

  assertEquals(1,f.getDenominator());

  assertThrows(ArithmeticException.class,() -> Fraction.getFraction(1,Integer.MAX_VALUE).subtract(Fraction.getFraction(1,Integer.MAX_VALUE - 1)));

  f=f1.subtract(f2);

  assertThrows(ArithmeticException.class,() -> Fraction.getFraction(Integer.MIN_VALUE,5).subtract(Fraction.getFraction(1,5)));

  assertThrows(ArithmeticException.class,() -> Fraction.getFraction(Integer.MIN_VALUE,1).subtract(Fraction.ONE));

  assertThrows(ArithmeticException.class,() -> Fraction.getFraction(Integer.MAX_VALUE,1).subtract(Fraction.ONE.negate()));

  assertThrows(ArithmeticException.class,() -> Fraction.getFraction(3,327680).subtract(Fraction.getFraction(2,59049)));

}

Location: FractionTest.java

Content: 

@Test public void testToProperString(){

  Fraction f;

  f=Fraction.getFraction(3,5);

  final String str=f.toProperString();

  assertEquals("3/5",str);

  assertSame(str,f.toProperString());

  f=Fraction.getFraction(7,5);

  assertEquals("1 2/5",f.toProperString());

  f=Fraction.getFraction(14,10);

  assertEquals("1 4/10",f.toProperString());

  f=Fraction.getFraction(4,2);

  assertEquals("2",f.toProperString());

  f=Fraction.getFraction(0,2);

  assertEquals("0",f.toProperString());

  f=Fraction.getFraction(2,2);

  assertEquals("1",f.toProperString());

  f=Fraction.getFraction(-7,5);

  assertEquals("-1 2/5",f.toProperString());

  f=Fraction.getFraction(Integer.MIN_VALUE,0,1);

  assertEquals("-2147483648",f.toProperString());

  f=Fraction.getFraction(-1,1,Integer.MAX_VALUE);

  assertEquals("-1 1/2147483647",f.toProperString());

  assertEquals("-1",Fraction.getFraction(-1).toProperString());

}

