Location: ToStringBuilderTest.java

Content: 

@AfterEach public void after(){

  validateNullToStringStyleRegistry();

}

Location: ToStringBuilderTest.java

Content: 

public void assertReflectionArray(final String expected,final Object actual){

  if (actual == null) {

    return;

  }

  assertEquals(expected,ToStringBuilder.reflectionToString(actual));

  assertEquals(expected,ToStringBuilder.reflectionToString(actual,null));

  assertEquals(expected,ToStringBuilder.reflectionToString(actual,null,true));

  assertEquals(expected,ToStringBuilder.reflectionToString(actual,null,false));

}

Location: ToStringBuilderTest.java

Content: 

@Test public void testAppendAsObjectToString(){

  final String objectToAppend1="";

  final Boolean objectToAppend2=Boolean.TRUE;

  final Object objectToAppend3=new Object();

  assertEquals(baseStr + "[" + toBaseString(objectToAppend1)+ "]",new ToStringBuilder(base).appendAsObjectToString(objectToAppend1).toString());

  assertEquals(baseStr + "[" + toBaseString(objectToAppend2)+ "]",new ToStringBuilder(base).appendAsObjectToString(objectToAppend2).toString());

  assertEquals(baseStr + "[" + toBaseString(objectToAppend3)+ "]",new ToStringBuilder(base).appendAsObjectToString(objectToAppend3).toString());

}

Location: ToStringBuilderTest.java

Content: 

@Test public void testAppendBooleanArrayWithFieldName(){

  final boolean[] array={true,false,false};

  assertEquals(baseStr + "[flags={true,false,false}]",new ToStringBuilder(base).append("flags",array).toString());

  assertEquals(baseStr + "[flags=<null>]",new ToStringBuilder(base).append("flags",(boolean[])null).toString());

  assertEquals(baseStr + "[<null>]",new ToStringBuilder(base).append(null,(boolean[])null).toString());

  assertEquals(baseStr + "[{true,false,false}]",new ToStringBuilder(base).append(null,array).toString());

}

Location: ToStringBuilderTest.java

Content: 

@Test public void testAppendBooleanArrayWithFieldNameAndFullDetatil(){

  final boolean[] array={true,false,false};

  assertEquals(baseStr + "[flags={true,false,false}]",new ToStringBuilder(base).append("flags",array,true).toString());

  assertEquals(baseStr + "[length=<size=3>]",new ToStringBuilder(base).append("length",array,false).toString());

  assertEquals(baseStr + "[flags=<null>]",new ToStringBuilder(base).append("flags",(boolean[])null,true).toString());

  assertEquals(baseStr + "[<null>]",new ToStringBuilder(base).append(null,(boolean[])null,false).toString());

  assertEquals(baseStr + "[<size=3>]",new ToStringBuilder(base).append(null,array,false).toString());

}

Location: ToStringBuilderTest.java

Content: 

@Test public void testAppendByteArrayWithFieldName(){

  final byte[] array={1,2,-3,4};

  assertEquals(baseStr + "[values={1,2,-3,4}]",new ToStringBuilder(base).append("values",array).toString());

  assertEquals(baseStr + "[values=<null>]",new ToStringBuilder(base).append("values",(boolean[])null).toString());

  assertEquals(baseStr + "[<null>]",new ToStringBuilder(base).append(null,(boolean[])null).toString());

  assertEquals(baseStr + "[{1,2,-3,4}]",new ToStringBuilder(base).append(null,array).toString());

}

Location: ToStringBuilderTest.java

Content: 

@Test public void testAppendByteArrayWithFieldNameAndFullDetatil(){

  final byte[] array={1,2,-3,4};

  assertEquals(baseStr + "[values={1,2,-3,4}]",new ToStringBuilder(base).append("values",array,true).toString());

  assertEquals(baseStr + "[length=<size=4>]",new ToStringBuilder(base).append("length",array,false).toString());

  assertEquals(baseStr + "[values=<null>]",new ToStringBuilder(base).append("values",(boolean[])null,true).toString());

  assertEquals(baseStr + "[<null>]",new ToStringBuilder(base).append(null,(boolean[])null,false).toString());

  assertEquals(baseStr + "[<size=4>]",new ToStringBuilder(base).append(null,array,false).toString());

}

Location: ToStringBuilderTest.java

Content: 

@Test public void testAppendCharArrayWithFieldName(){

  final char[] array={'A','2','_','D'};

  assertEquals(baseStr + "[chars={A,2,_,D}]",new ToStringBuilder(base).append("chars",array).toString());

  assertEquals(baseStr + "[letters={A,2,_,D}]",new ToStringBuilder(base).append("letters",array).toString());

  assertEquals(baseStr + "[flags=<null>]",new ToStringBuilder(base).append("flags",(boolean[])null).toString());

  assertEquals(baseStr + "[<null>]",new ToStringBuilder(base).append(null,(boolean[])null).toString());

  assertEquals(baseStr + "[{A,2,_,D}]",new ToStringBuilder(base).append(null,array).toString());

}

Location: ToStringBuilderTest.java

Content: 

@Test public void testAppendCharArrayWithFieldNameAndFullDetatil(){

  final char[] array={'A','2','_','D'};

  assertEquals(baseStr + "[chars={A,2,_,D}]",new ToStringBuilder(base).append("chars",array,true).toString());

  assertEquals(baseStr + "[letters=<size=4>]",new ToStringBuilder(base).append("letters",array,false).toString());

  assertEquals(baseStr + "[flags=<null>]",new ToStringBuilder(base).append("flags",(boolean[])null,true).toString());

  assertEquals(baseStr + "[<null>]",new ToStringBuilder(base).append(null,(boolean[])null,false).toString());

  assertEquals(baseStr + "[<size=4>]",new ToStringBuilder(base).append(null,array,false).toString());

}

Location: ToStringBuilderTest.java

Content: 

@Test public void testAppendDoubleArrayWithFieldName(){

  final double[] array={1.0,2.9876,-3.00001,4.3};

  assertEquals(baseStr + "[values={1.0,2.9876,-3.00001,4.3}]",new ToStringBuilder(base).append("values",array).toString());

  assertEquals(baseStr + "[values=<null>]",new ToStringBuilder(base).append("values",(boolean[])null).toString());

  assertEquals(baseStr + "[<null>]",new ToStringBuilder(base).append(null,(boolean[])null).toString());

  assertEquals(baseStr + "[{1.0,2.9876,-3.00001,4.3}]",new ToStringBuilder(base).append(null,array).toString());

}

Location: ToStringBuilderTest.java

Content: 

@Test public void testAppendDoubleArrayWithFieldNameAndFullDetatil(){

  final double[] array={1.0,2.9876,-3.00001,4.3};

  assertEquals(baseStr + "[values={1.0,2.9876,-3.00001,4.3}]",new ToStringBuilder(base).append("values",array,true).toString());

  assertEquals(baseStr + "[length=<size=4>]",new ToStringBuilder(base).append("length",array,false).toString());

  assertEquals(baseStr + "[values=<null>]",new ToStringBuilder(base).append("values",(boolean[])null,true).toString());

  assertEquals(baseStr + "[<null>]",new ToStringBuilder(base).append(null,(boolean[])null,false).toString());

  assertEquals(baseStr + "[<size=4>]",new ToStringBuilder(base).append(null,array,false).toString());

}

Location: ToStringBuilderTest.java

Content: 

@Test public void testAppendFloatArrayWithFieldName(){

  final float[] array={1.0f,2.9876f,-3.00001f,4.3f};

  assertEquals(baseStr + "[values={1.0,2.9876,-3.00001,4.3}]",new ToStringBuilder(base).append("values",array).toString());

  assertEquals(baseStr + "[values=<null>]",new ToStringBuilder(base).append("values",(boolean[])null).toString());

  assertEquals(baseStr + "[<null>]",new ToStringBuilder(base).append(null,(boolean[])null).toString());

  assertEquals(baseStr + "[{1.0,2.9876,-3.00001,4.3}]",new ToStringBuilder(base).append(null,array).toString());

}

Location: ToStringBuilderTest.java

Content: 

@Test public void testAppendFloatArrayWithFieldNameAndFullDetatil(){

  final float[] array={1.0f,2.9876f,-3.00001f,4.3f};

  assertEquals(baseStr + "[values={1.0,2.9876,-3.00001,4.3}]",new ToStringBuilder(base).append("values",array,true).toString());

  assertEquals(baseStr + "[length=<size=4>]",new ToStringBuilder(base).append("length",array,false).toString());

  assertEquals(baseStr + "[values=<null>]",new ToStringBuilder(base).append("values",(boolean[])null,true).toString());

  assertEquals(baseStr + "[<null>]",new ToStringBuilder(base).append(null,(boolean[])null,false).toString());

  assertEquals(baseStr + "[<size=4>]",new ToStringBuilder(base).append(null,array,false).toString());

}

Location: ToStringBuilderTest.java

Content: 

@Test public void testAppendIntArrayWithFieldName(){

  final int[] array={1,2,-3,4};

  assertEquals(baseStr + "[values={1,2,-3,4}]",new ToStringBuilder(base).append("values",array).toString());

  assertEquals(baseStr + "[values=<null>]",new ToStringBuilder(base).append("values",(boolean[])null).toString());

  assertEquals(baseStr + "[<null>]",new ToStringBuilder(base).append(null,(boolean[])null).toString());

  assertEquals(baseStr + "[{1,2,-3,4}]",new ToStringBuilder(base).append(null,array).toString());

}

Location: ToStringBuilderTest.java

Content: 

@Test public void testAppendIntArrayWithFieldNameAndFullDetatil(){

  final int[] array={1,2,-3,4};

  assertEquals(baseStr + "[values={1,2,-3,4}]",new ToStringBuilder(base).append("values",array,true).toString());

  assertEquals(baseStr + "[length=<size=4>]",new ToStringBuilder(base).append("length",array,false).toString());

  assertEquals(baseStr + "[values=<null>]",new ToStringBuilder(base).append("values",(boolean[])null,true).toString());

  assertEquals(baseStr + "[<null>]",new ToStringBuilder(base).append(null,(boolean[])null,false).toString());

  assertEquals(baseStr + "[<size=4>]",new ToStringBuilder(base).append(null,array,false).toString());

}

Location: ToStringBuilderTest.java

Content: 

@Test public void testAppendLongArrayWithFieldName(){

  final long[] array={1,2,-3,4};

  assertEquals(baseStr + "[values={1,2,-3,4}]",new ToStringBuilder(base).append("values",array).toString());

  assertEquals(baseStr + "[values=<null>]",new ToStringBuilder(base).append("values",(boolean[])null).toString());

  assertEquals(baseStr + "[<null>]",new ToStringBuilder(base).append(null,(boolean[])null).toString());

  assertEquals(baseStr + "[{1,2,-3,4}]",new ToStringBuilder(base).append(null,array).toString());

}

Location: ToStringBuilderTest.java

Content: 

@Test public void testAppendLongArrayWithFieldNameAndFullDetatil(){

  final long[] array={1,2,-3,4};

  assertEquals(baseStr + "[values={1,2,-3,4}]",new ToStringBuilder(base).append("values",array,true).toString());

  assertEquals(baseStr + "[length=<size=4>]",new ToStringBuilder(base).append("length",array,false).toString());

  assertEquals(baseStr + "[values=<null>]",new ToStringBuilder(base).append("values",(boolean[])null,true).toString());

  assertEquals(baseStr + "[<null>]",new ToStringBuilder(base).append(null,(boolean[])null,false).toString());

  assertEquals(baseStr + "[<size=4>]",new ToStringBuilder(base).append(null,array,false).toString());

}

Location: ToStringBuilderTest.java

Content: 

@Test public void testAppendObjectArrayWithFieldName(){

  final Object[] array={null,base,new int[]{3,6}};

  assertEquals(baseStr + "[values={<null>,5,{3,6}}]",new ToStringBuilder(base).append("values",array).toString());

  assertEquals(baseStr + "[values=<null>]",new ToStringBuilder(base).append("values",(boolean[])null).toString());

  assertEquals(baseStr + "[<null>]",new ToStringBuilder(base).append(null,(boolean[])null).toString());

  assertEquals(baseStr + "[{<null>,5,{3,6}}]",new ToStringBuilder(base).append(null,array).toString());

}

Location: ToStringBuilderTest.java

Content: 

@Test public void testAppendObjectArrayWithFieldNameAndFullDetatil(){

  final Object[] array={null,base,new int[]{3,6}};

  assertEquals(baseStr + "[values={<null>,5,{3,6}}]",new ToStringBuilder(base).append("values",array,true).toString());

  assertEquals(baseStr + "[length=<size=3>]",new ToStringBuilder(base).append("length",array,false).toString());

  assertEquals(baseStr + "[values=<null>]",new ToStringBuilder(base).append("values",(boolean[])null,true).toString());

  assertEquals(baseStr + "[<null>]",new ToStringBuilder(base).append(null,(boolean[])null,false).toString());

  assertEquals(baseStr + "[<size=3>]",new ToStringBuilder(base).append(null,array,false).toString());

}

Location: ToStringBuilderTest.java

Content: 

@Test public void testAppendShortArrayWithFieldName(){

  final short[] array={1,2,-3,4};

  assertEquals(baseStr + "[values={1,2,-3,4}]",new ToStringBuilder(base).append("values",array).toString());

  assertEquals(baseStr + "[values=<null>]",new ToStringBuilder(base).append("values",(boolean[])null).toString());

  assertEquals(baseStr + "[<null>]",new ToStringBuilder(base).append(null,(boolean[])null).toString());

  assertEquals(baseStr + "[{1,2,-3,4}]",new ToStringBuilder(base).append(null,array).toString());

}

Location: ToStringBuilderTest.java

Content: 

@Test public void testAppendShortArrayWithFieldNameAndFullDetatil(){

  final short[] array={1,2,-3,4};

  assertEquals(baseStr + "[values={1,2,-3,4}]",new ToStringBuilder(base).append("values",array,true).toString());

  assertEquals(baseStr + "[length=<size=4>]",new ToStringBuilder(base).append("length",array,false).toString());

  assertEquals(baseStr + "[values=<null>]",new ToStringBuilder(base).append("values",(boolean[])null,true).toString());

  assertEquals(baseStr + "[<null>]",new ToStringBuilder(base).append(null,(boolean[])null,false).toString());

  assertEquals(baseStr + "[<size=4>]",new ToStringBuilder(base).append(null,array,false).toString());

}

Location: ToStringBuilderTest.java

Content: 

@Test public void testAppendToString(){

  assertEquals(baseStr + "[]",new ToStringBuilder(base).appendToString("Integer@8888[]").toString());

  assertEquals(baseStr + "[<null>]",new ToStringBuilder(base).appendToString("Integer@8888[<null>]").toString());

  assertEquals(baseStr + "[a=hello]",new ToStringBuilder(base).appendToString("Integer@8888[]").append("a","hello").toString());

  assertEquals(baseStr + "[<null>,a=hello]",new ToStringBuilder(base).appendToString("Integer@8888[<null>]").append("a","hello").toString());

  assertEquals(baseStr + "[a=hello]",new ToStringBuilder(base).appendToString(null).append("a","hello").toString());

}

Location: ToStringBuilderTest.java

Content: 

@Test public void testAppendToStringUsingMultiLineStyle(){

  final MultiLineTestObject obj=new MultiLineTestObject();

  final ToStringBuilder testBuilder=new ToStringBuilder(this,ToStringStyle.MULTI_LINE_STYLE).appendToString(obj.toString());

  assertEquals(-1,testBuilder.toString().indexOf("testInt=31337"));

}

Location: ToStringBuilderTest.java

Content: 

@Test public void testBooleanArrayArray(){

  boolean[][] array={{true,false},null,{false}};

  assertEquals(baseStr + "[{{true,false},<null>,{false}}]",new ToStringBuilder(base).append(array).toString());

  assertEquals(baseStr + "[{{true,false},<null>,{false}}]",new ToStringBuilder(base).append((Object)array).toString());

  array=null;

  assertEquals(baseStr + "[<null>]",new ToStringBuilder(base).append(array).toString());

  assertEquals(baseStr + "[<null>]",new ToStringBuilder(base).append((Object)array).toString());

}

Location: ToStringBuilderTest.java

Content: 

@Test public void testByteArrayArray(){

  byte[][] array={{1,2},null,{5}};

  assertEquals(baseStr + "[{{1,2},<null>,{5}}]",new ToStringBuilder(base).append(array).toString());

  assertEquals(baseStr + "[{{1,2},<null>,{5}}]",new ToStringBuilder(base).append((Object)array).toString());

  array=null;

  assertEquals(baseStr + "[<null>]",new ToStringBuilder(base).append(array).toString());

  assertEquals(baseStr + "[<null>]",new ToStringBuilder(base).append((Object)array).toString());

}

Location: ToStringBuilderTest.java

Content: 

@Test public void testCharArrayArray(){

  char[][] array={{'A','B'},null,{'p'}};

  assertEquals(baseStr + "[{{A,B},<null>,{p}}]",new ToStringBuilder(base).append(array).toString());

  assertEquals(baseStr + "[{{A,B},<null>,{p}}]",new ToStringBuilder(base).append((Object)array).toString());

  array=null;

  assertEquals(baseStr + "[<null>]",new ToStringBuilder(base).append(array).toString());

  assertEquals(baseStr + "[<null>]",new ToStringBuilder(base).append((Object)array).toString());

}

Location: ToStringBuilderTest.java

Content: 

@Test public void testConstructorEx1(){

  assertEquals("<null>",new ToStringBuilder(null).toString());

}

Location: ToStringBuilderTest.java

Content: 

@Test public void testConstructorEx2(){

  assertEquals("<null>",new ToStringBuilder(null,null).toString());

  new ToStringBuilder(this.base,null).toString();

}

Location: ToStringBuilderTest.java

Content: 

@Test public void testConstructorEx3(){

  assertEquals("<null>",new ToStringBuilder(null,null,null).toString());

  new ToStringBuilder(this.base,null,null).toString();

  new ToStringBuilder(this.base,ToStringStyle.DEFAULT_STYLE,null).toString();

}

Location: ToStringBuilderTest.java

Content: 

@Test public void testConstructToStringBuilder(){

  final ToStringBuilder stringBuilder1=new ToStringBuilder(base,null,null);

  final ToStringBuilder stringBuilder2=new ToStringBuilder(base,ToStringStyle.DEFAULT_STYLE,new StringBuffer(1024));

  assertEquals(ToStringStyle.DEFAULT_STYLE,stringBuilder1.getStyle());

  assertNotNull(stringBuilder1.getStringBuffer());

  assertNotNull(stringBuilder1.toString());

  assertEquals(ToStringStyle.DEFAULT_STYLE,stringBuilder2.getStyle());

  assertNotNull(stringBuilder2.getStringBuffer());

  assertNotNull(stringBuilder2.toString());

}

Location: ToStringBuilderTest.java

Content: 

@Test public void testDoubleArrayArray(){

  double[][] array={{1.0,2.29686},null,{Double.NaN}};

  assertEquals(baseStr + "[{{1.0,2.29686},<null>,{NaN}}]",new ToStringBuilder(base).append(array).toString());

  assertEquals(baseStr + "[{{1.0,2.29686},<null>,{NaN}}]",new ToStringBuilder(base).append((Object)array).toString());

  array=null;

  assertEquals(baseStr + "[<null>]",new ToStringBuilder(base).append(array).toString());

  assertEquals(baseStr + "[<null>]",new ToStringBuilder(base).append((Object)array).toString());

}

Location: ToStringBuilderTest.java

Content: 

@Test public void testFloatArrayArray(){

  float[][] array={{1.0f,2.29686f},null,{Float.NaN}};

  assertEquals(baseStr + "[{{1.0,2.29686},<null>,{NaN}}]",new ToStringBuilder(base).append(array).toString());

  assertEquals(baseStr + "[{{1.0,2.29686},<null>,{NaN}}]",new ToStringBuilder(base).append((Object)array).toString());

  array=null;

  assertEquals(baseStr + "[<null>]",new ToStringBuilder(base).append(array).toString());

  assertEquals(baseStr + "[<null>]",new ToStringBuilder(base).append((Object)array).toString());

}

Location: ToStringBuilderTest.java

Content: 

@Test public void testGetSetDefault(){

  try {

    ToStringBuilder.setDefaultStyle(ToStringStyle.NO_FIELD_NAMES_STYLE);

    assertSame(ToStringStyle.NO_FIELD_NAMES_STYLE,ToStringBuilder.getDefaultStyle());

  }

  finally {

    ToStringBuilder.setDefaultStyle(ToStringStyle.DEFAULT_STYLE);

  }

}

Location: ToStringBuilderTest.java

Content: 

/** 

 * Tests ReflectionToStringBuilder.toString() for statics.

 */

@Test public void testInheritedReflectionStatics(){

  final InheritedReflectionStaticFieldsFixture instance1=new InheritedReflectionStaticFieldsFixture();

  assertEquals(this.toBaseString(instance1) + "[staticInt2=67890,staticString2=staticString2]",ReflectionToStringBuilder.toString(instance1,null,false,true,InheritedReflectionStaticFieldsFixture.class));

  assertEquals(this.toBaseString(instance1) + "[staticInt2=67890,staticString2=staticString2,staticInt=12345,staticString=staticString]",ReflectionToStringBuilder.toString(instance1,null,false,true,SimpleReflectionStaticFieldsFixture.class));

  assertEquals(this.toBaseString(instance1) + "[staticInt2=67890,staticString2=staticString2,staticInt=12345,staticString=staticString]",this.toStringWithStatics(instance1,null,SimpleReflectionStaticFieldsFixture.class));

  assertEquals(this.toBaseString(instance1) + "[staticInt2=67890,staticString2=staticString2,staticInt=12345,staticString=staticString]",this.toStringWithStatics(instance1,null,SimpleReflectionStaticFieldsFixture.class));

}

Location: ToStringBuilderTest.java

Content: 

@Test public void testInnerClassReflection(){

  final Outer outer=new Outer();

  assertEquals(toBaseString(outer) + "[inner=" + toBaseString(outer.inner)+ "[]]",outer.toString());

}

Location: ToStringBuilderTest.java

Content: 

@Test public void testIntArrayArray(){

  int[][] array={{1,2},null,{5}};

  assertEquals(baseStr + "[{{1,2},<null>,{5}}]",new ToStringBuilder(base).append(array).toString());

  assertEquals(baseStr + "[{{1,2},<null>,{5}}]",new ToStringBuilder(base).append((Object)array).toString());

  array=null;

  assertEquals(baseStr + "[<null>]",new ToStringBuilder(base).append(array).toString());

  assertEquals(baseStr + "[<null>]",new ToStringBuilder(base).append((Object)array).toString());

}

Location: ToStringBuilderTest.java

Content: 

@Test public void testObjectCycle(){

  final ObjectCycle a=new ObjectCycle();

  final ObjectCycle b=new ObjectCycle();

  a.obj=b;

  b.obj=a;

  final String expected=toBaseString(a) + "[" + toBaseString(b)+ "["+ toBaseString(a)+ "]]";

  assertEquals(expected,a.toString());

}

Location: ToStringBuilderTest.java

Content: 

/** 

 * Test a nasty combination of arrays and Objects pointing to each other. objects[0] -&gt; SimpleReflectionTestFixture[ o -&gt; objects ]

 */

@Test public void testReflectionArrayAndObjectCycle(){

  final Object[] objects=new Object[1];

  final SimpleReflectionTestFixture simple=new SimpleReflectionTestFixture(objects);

  objects[0]=simple;

  assertEquals(this.toBaseString(objects) + "[{" + this.toBaseString(simple)+ "[o="+ this.toBaseString(objects)+ "]"+ "}]",ToStringBuilder.reflectionToString(objects));

  assertEquals(this.toBaseString(simple) + "[o={" + this.toBaseString(simple)+ "}]",ToStringBuilder.reflectionToString(simple));

}

Location: ToStringBuilderTest.java

Content: 

@Test public void testReflectionArrayArrayCycle(){

  final Object[][] objects=new Object[2][2];

  objects[0][0]=objects;

  objects[0][1]=objects;

  objects[1][0]=objects;

  objects[1][1]=objects;

  final String basicToString=this.toBaseString(objects);

  assertEquals(basicToString + "[{{" + basicToString+ ","+ basicToString+ "},{"+ basicToString+ ","+ basicToString+ "}}]",ToStringBuilder.reflectionToString(objects));

}

Location: ToStringBuilderTest.java

Content: 

/** 

 * Test an array element pointing to its container.

 */

@Test public void testReflectionArrayCycle(){

  final Object[] objects=new Object[1];

  objects[0]=objects;

  assertEquals(this.toBaseString(objects) + "[{" + this.toBaseString(objects)+ "}]",ToStringBuilder.reflectionToString(objects));

}

Location: ToStringBuilderTest.java

Content: 

/** 

 * Test an array element pointing to its container.

 */

@Test public void testReflectionArrayCycleLevel2(){

  final Object[] objects=new Object[1];

  final Object[] objectsLevel2=new Object[1];

  objects[0]=objectsLevel2;

  objectsLevel2[0]=objects;

  assertEquals(this.toBaseString(objects) + "[{{" + this.toBaseString(objects)+ "}}]",ToStringBuilder.reflectionToString(objects));

  assertEquals(this.toBaseString(objectsLevel2) + "[{{" + this.toBaseString(objectsLevel2)+ "}}]",ToStringBuilder.reflectionToString(objectsLevel2));

}

Location: ToStringBuilderTest.java

Content: 

/** 

 * Test wrapper for char boolean.

 */

@Test public void testReflectionBoolean(){

  Boolean b;

  b=Boolean.TRUE;

  assertEquals(this.toBaseString(b) + "[value=true]",ToStringBuilder.reflectionToString(b));

  b=Boolean.FALSE;

  assertEquals(this.toBaseString(b) + "[value=false]",ToStringBuilder.reflectionToString(b));

}

Location: ToStringBuilderTest.java

Content: 

@Test public void testReflectionBooleanArray(){

  boolean[] array={true,false,false};

  final String baseString=this.toBaseString(array);

  assertEquals(baseString + "[{true,false,false}]",ToStringBuilder.reflectionToString(array));

  array=null;

  assertReflectionArray("<null>",array);

}

Location: ToStringBuilderTest.java

Content: 

@Test public void testReflectionBooleanArrayArray(){

  boolean[][] array={{true,false},null,{false}};

  final String baseString=this.toBaseString(array);

  assertEquals(baseString + "[{{true,false},<null>,{false}}]",ToStringBuilder.reflectionToString(array));

  assertEquals(baseString + "[{{true,false},<null>,{false}}]",ToStringBuilder.reflectionToString(array));

  array=null;

  assertReflectionArray("<null>",array);

}

Location: ToStringBuilderTest.java

Content: 

@Test public void testReflectionByteArrayArray(){

  byte[][] array={{1,2},null,{5}};

  final String baseString=this.toBaseString(array);

  assertEquals(baseString + "[{{1,2},<null>,{5}}]",ToStringBuilder.reflectionToString(array));

  array=null;

  assertReflectionArray("<null>",array);

}

Location: ToStringBuilderTest.java

Content: 

/** 

 * Test wrapper for char primitive.

 */

@Test public void testReflectionCharacter(){

  final Character c='A';

  assertEquals(this.toBaseString(c) + "[value=A]",ToStringBuilder.reflectionToString(c));

}

Location: ToStringBuilderTest.java

Content: 

@Test public void testReflectionCharArray(){

  char[] array={'A','2','_','D'};

  final String baseString=this.toBaseString(array);

  assertEquals(baseString + "[{A,2,_,D}]",ToStringBuilder.reflectionToString(array));

  array=null;

  assertReflectionArray("<null>",array);

}

Location: ToStringBuilderTest.java

Content: 

@Test public void testReflectionCharArrayArray(){

  char[][] array={{'A','B'},null,{'p'}};

  final String baseString=this.toBaseString(array);

  assertEquals(baseString + "[{{A,B},<null>,{p}}]",ToStringBuilder.reflectionToString(array));

  array=null;

  assertReflectionArray("<null>",array);

}

Location: ToStringBuilderTest.java

Content: 

@Test public void testReflectionDoubleArray(){

  double[] array={1.0,2.9876,-3.00001,4.3};

  final String baseString=this.toBaseString(array);

  assertEquals(baseString + "[{1.0,2.9876,-3.00001,4.3}]",ToStringBuilder.reflectionToString(array));

  array=null;

  assertReflectionArray("<null>",array);

}

Location: ToStringBuilderTest.java

Content: 

@Test public void testReflectionDoubleArrayArray(){

  double[][] array={{1.0,2.29686},null,{Double.NaN}};

  final String baseString=this.toBaseString(array);

  assertEquals(baseString + "[{{1.0,2.29686},<null>,{NaN}}]",ToStringBuilder.reflectionToString(array));

  array=null;

  assertReflectionArray("<null>",array);

}

Location: ToStringBuilderTest.java

Content: 

@Test public void testReflectionFloatArray(){

  float[] array={1.0f,2.9876f,-3.00001f,4.3f};

  final String baseString=this.toBaseString(array);

  assertEquals(baseString + "[{1.0,2.9876,-3.00001,4.3}]",ToStringBuilder.reflectionToString(array));

  array=null;

  assertReflectionArray("<null>",array);

}

Location: ToStringBuilderTest.java

Content: 

@Test public void testReflectionFloatArrayArray(){

  float[][] array={{1.0f,2.29686f},null,{Float.NaN}};

  final String baseString=this.toBaseString(array);

  assertEquals(baseString + "[{{1.0,2.29686},<null>,{NaN}}]",ToStringBuilder.reflectionToString(array));

  array=null;

  assertReflectionArray("<null>",array);

}

Location: ToStringBuilderTest.java

Content: 

@Test public void testReflectionHierarchy(){

  final ReflectionTestFixtureA baseA=new ReflectionTestFixtureA();

  String baseString=this.toBaseString(baseA);

  assertEquals(baseString + "[a=a]",ToStringBuilder.reflectionToString(baseA));

  assertEquals(baseString + "[a=a]",ToStringBuilder.reflectionToString(baseA,null));

  assertEquals(baseString + "[a=a]",ToStringBuilder.reflectionToString(baseA,null,false));

  assertEquals(baseString + "[a=a,transientA=t]",ToStringBuilder.reflectionToString(baseA,null,true));

  assertEquals(baseString + "[a=a]",ToStringBuilder.reflectionToString(baseA,null,false,null));

  assertEquals(baseString + "[a=a]",ToStringBuilder.reflectionToString(baseA,null,false,Object.class));

  assertEquals(baseString + "[a=a]",ToStringBuilder.reflectionToString(baseA,null,false,ReflectionTestFixtureA.class));

  final ReflectionTestFixtureB baseB=new ReflectionTestFixtureB();

  baseString=this.toBaseString(baseB);

  assertEquals(baseString + "[b=b,a=a]",ToStringBuilder.reflectionToString(baseB));

  assertEquals(baseString + "[b=b,a=a]",ToStringBuilder.reflectionToString(baseB));

  assertEquals(baseString + "[b=b,a=a]",ToStringBuilder.reflectionToString(baseB,null));

  assertEquals(baseString + "[b=b,a=a]",ToStringBuilder.reflectionToString(baseB,null,false));

  assertEquals(baseString + "[b=b,transientB=t,a=a,transientA=t]",ToStringBuilder.reflectionToString(baseB,null,true));

  assertEquals(baseString + "[b=b,a=a]",ToStringBuilder.reflectionToString(baseB,null,false,null));

  assertEquals(baseString + "[b=b,a=a]",ToStringBuilder.reflectionToString(baseB,null,false,Object.class));

  assertEquals(baseString + "[b=b,a=a]",ToStringBuilder.reflectionToString(baseB,null,false,ReflectionTestFixtureA.class));

  assertEquals(baseString + "[b=b]",ToStringBuilder.reflectionToString(baseB,null,false,ReflectionTestFixtureB.class));

}

Location: ToStringBuilderTest.java

Content: 

@Test public void testReflectionHierarchyArrayList(){

  final List<Object> list=new ArrayList<>(ARRAYLIST_INITIAL_CAPACITY);

  final String baseString=this.toBaseString(list);

  final String expectedWithTransients=baseString + "[elementData={<null>,<null>,<null>,<null>,<null>,<null>,<null>,<null>,<null>,<null>},size=0,modCount=0]";

  final String toStringWithTransients=ToStringBuilder.reflectionToString(list,null,true);

  if (!expectedWithTransients.equals(toStringWithTransients)) {

    assertEquals(expectedWithTransients,toStringWithTransients);

  }

  final String expectedWithoutTransients=baseString + "[size=0]";

  final String toStringWithoutTransients=ToStringBuilder.reflectionToString(list,null,false);

  if (!expectedWithoutTransients.equals(toStringWithoutTransients)) {

    assertEquals(expectedWithoutTransients,toStringWithoutTransients);

  }

}

Location: ToStringBuilderTest.java

Content: 

@Test public void testReflectionhortArrayArray(){

  short[][] array={{1,2},null,{5}};

  final String baseString=this.toBaseString(array);

  assertEquals(baseString + "[{{1,2},<null>,{5}}]",ToStringBuilder.reflectionToString(array));

  array=null;

  assertReflectionArray("<null>",array);

}

Location: ToStringBuilderTest.java

Content: 

@Test public void testReflectionIntArray(){

  int[] array={1,2,-3,4};

  final String baseString=this.toBaseString(array);

  assertEquals(baseString + "[{1,2,-3,4}]",ToStringBuilder.reflectionToString(array));

  array=null;

  assertReflectionArray("<null>",array);

}

Location: ToStringBuilderTest.java

Content: 

@Test public void testReflectionIntArrayArray(){

  int[][] array={{1,2},null,{5}};

  final String baseString=this.toBaseString(array);

  assertEquals(baseString + "[{{1,2},<null>,{5}}]",ToStringBuilder.reflectionToString(array));

  array=null;

  assertReflectionArray("<null>",array);

}

Location: ToStringBuilderTest.java

Content: 

/** 

 * Test wrapper for int primitive.

 */

@Test public void testReflectionInteger(){

  assertEquals(baseStr + "[value=5]",ToStringBuilder.reflectionToString(base));

}

Location: ToStringBuilderTest.java

Content: 

@Test public void testReflectionLongArray(){

  long[] array={1,2,-3,4};

  final String baseString=this.toBaseString(array);

  assertEquals(baseString + "[{1,2,-3,4}]",ToStringBuilder.reflectionToString(array));

  array=null;

  assertReflectionArray("<null>",array);

}

Location: ToStringBuilderTest.java

Content: 

@Test public void testReflectionLongArrayArray(){

  long[][] array={{1,2},null,{5}};

  final String baseString=this.toBaseString(array);

  assertEquals(baseString + "[{{1,2},<null>,{5}}]",ToStringBuilder.reflectionToString(array));

  array=null;

  assertReflectionArray("<null>",array);

}

Location: ToStringBuilderTest.java

Content: 

@Test public void testReflectionNull(){

  assertThrows(NullPointerException.class,() -> ReflectionToStringBuilder.toString(null));

}

Location: ToStringBuilderTest.java

Content: 

@Test public void testReflectionObjectArray(){

  Object[] array={null,base,new int[]{3,6}};

  final String baseString=this.toBaseString(array);

  assertEquals(baseString + "[{<null>,5,{3,6}}]",ToStringBuilder.reflectionToString(array));

  array=null;

  assertReflectionArray("<null>",array);

}

Location: ToStringBuilderTest.java

Content: 

/** 

 * Test Objects pointing to each other.

 */

@Test public void testReflectionObjectCycle(){

  final ReflectionTestCycleA a=new ReflectionTestCycleA();

  final ReflectionTestCycleB b=new ReflectionTestCycleB();

  a.b=b;

  b.a=a;

  assertEquals(this.toBaseString(a) + "[b=" + this.toBaseString(b)+ "[a="+ this.toBaseString(a)+ "]]",a.toString());

}

Location: ToStringBuilderTest.java

Content: 

@Test public void testReflectionShortArray(){

  short[] array={1,2,-3,4};

  final String baseString=this.toBaseString(array);

  assertEquals(baseString + "[{1,2,-3,4}]",ToStringBuilder.reflectionToString(array));

  array=null;

  assertReflectionArray("<null>",array);

}

Location: ToStringBuilderTest.java

Content: 

/** 

 * Tests ReflectionToStringBuilder.toString() for statics.

 */

@Test public void testReflectionStatics(){

  final ReflectionStaticFieldsFixture instance1=new ReflectionStaticFieldsFixture();

  assertEquals(this.toBaseString(instance1) + "[instanceInt=67890,instanceString=instanceString,staticInt=12345,staticString=staticString]",ReflectionToStringBuilder.toString(instance1,null,false,true,ReflectionStaticFieldsFixture.class));

  assertEquals(this.toBaseString(instance1) + "[instanceInt=67890,instanceString=instanceString,staticInt=12345,staticString=staticString,staticTransientInt=54321,staticTransientString=staticTransientString,transientInt=98765,transientString=transientString]",ReflectionToStringBuilder.toString(instance1,null,true,true,ReflectionStaticFieldsFixture.class));

  assertEquals(this.toBaseString(instance1) + "[instanceInt=67890,instanceString=instanceString,staticInt=12345,staticString=staticString]",this.toStringWithStatics(instance1,null,ReflectionStaticFieldsFixture.class));

  assertEquals(this.toBaseString(instance1) + "[instanceInt=67890,instanceString=instanceString,staticInt=12345,staticString=staticString]",this.toStringWithStatics(instance1,null,ReflectionStaticFieldsFixture.class));

}

Location: ToStringBuilderTest.java

Content: 

@Test public void testReflectionyteArray(){

  byte[] array={1,2,-3,4};

  final String baseString=this.toBaseString(array);

  assertEquals(baseString + "[{1,2,-3,4}]",ToStringBuilder.reflectionToString(array));

  array=null;

  assertReflectionArray("<null>",array);

}

Location: ToStringBuilderTest.java

Content: 

/** 

 * Test a class that defines an ivar pointing to itself.  This test was created to show that handling cyclical object resulted in a missing endFieldSeparator call.

 */

@Test public void testSelfInstanceTwoVarsReflectionObjectCycle(){

  final SelfInstanceTwoVarsReflectionTestFixture test=new SelfInstanceTwoVarsReflectionTestFixture();

  assertEquals(this.toBaseString(test) + "[otherType=" + test.getOtherType().toString()+ ",typeIsSelf="+ this.toBaseString(test)+ "]",test.toString());

}

Location: ToStringBuilderTest.java

Content: 

/** 

 * Test a class that defines an ivar pointing to itself.

 */

@Test public void testSelfInstanceVarReflectionObjectCycle(){

  final SelfInstanceVarReflectionTestFixture test=new SelfInstanceVarReflectionTestFixture();

  assertEquals(this.toBaseString(test) + "[typeIsSelf=" + this.toBaseString(test)+ "]",test.toString());

}

Location: ToStringBuilderTest.java

Content: 

@Test public void testSetDefaultEx(){

  assertThrows(NullPointerException.class,() -> ToStringBuilder.setDefaultStyle(null));

}

Location: ToStringBuilderTest.java

Content: 

@Test public void testShortArrayArray(){

  short[][] array={{1,2},null,{5}};

  assertEquals(baseStr + "[{{1,2},<null>,{5}}]",new ToStringBuilder(base).append(array).toString());

  assertEquals(baseStr + "[{{1,2},<null>,{5}}]",new ToStringBuilder(base).append((Object)array).toString());

  array=null;

  assertEquals(baseStr + "[<null>]",new ToStringBuilder(base).append(array).toString());

  assertEquals(baseStr + "[<null>]",new ToStringBuilder(base).append((Object)array).toString());

}

Location: ToStringBuilderTest.java

Content: 

/** 

 * Test an Object pointing to itself, the simplest test.

 */

@Test public void testSimpleReflectionObjectCycle(){

  final SimpleReflectionTestFixture simple=new SimpleReflectionTestFixture();

  simple.o=simple;

  assertEquals(this.toBaseString(simple) + "[o=" + this.toBaseString(simple)+ "]",simple.toString());

}

Location: ToStringBuilderTest.java

Content: 

@Test public void testSimpleReflectionStatics(){

  final SimpleReflectionStaticFieldsFixture instance1=new SimpleReflectionStaticFieldsFixture();

  assertEquals(this.toBaseString(instance1) + "[staticInt=12345,staticString=staticString]",ReflectionToStringBuilder.toString(instance1,null,false,true,SimpleReflectionStaticFieldsFixture.class));

  assertEquals(this.toBaseString(instance1) + "[staticInt=12345,staticString=staticString]",ReflectionToStringBuilder.toString(instance1,null,true,true,SimpleReflectionStaticFieldsFixture.class));

  assertEquals(this.toBaseString(instance1) + "[staticInt=12345,staticString=staticString]",this.toStringWithStatics(instance1,null,SimpleReflectionStaticFieldsFixture.class));

  assertEquals(this.toBaseString(instance1) + "[staticInt=12345,staticString=staticString]",this.toStringWithStatics(instance1,null,SimpleReflectionStaticFieldsFixture.class));

}

Location: ToStringBuilderTest.java

Content: 

/** 

 * Tests ReflectionToStringBuilder setUpToClass().

 */

@Test public void test_setUpToClass_invalid(){

  final Integer val=Integer.valueOf(5);

  final ReflectionToStringBuilder test=new ReflectionToStringBuilder(val);

  assertThrows(IllegalArgumentException.class,() -> test.setUpToClass(String.class));

  test.toString();

}

Location: ToStringBuilderTest.java

Content: 

/** 

 * Tests ReflectionToStringBuilder setUpToClass().

 */

@Test public void test_setUpToClass_valid(){

  final Integer val=Integer.valueOf(5);

  final ReflectionToStringBuilder test=new ReflectionToStringBuilder(val);

  test.setUpToClass(Number.class);

  test.toString();

}

Location: ToStringBuilderTest.java

Content: 

/** 

 * Create the same toString() as Object.toString().

 * @param o the object to create the string for.

 * @return a String in the Object.toString format.

 */

private String toBaseString(final Object o){

  return o.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(o));

}

Location: ToStringBuilderTest.java

Content: 

/** 

 * <p>This method uses reflection to build a suitable {@code toString} value which includes static fields.</p><p>It uses  {@code AccessibleObject.setAccessible} to gain access to privatefields. This means that it will throw a security exception if run under a security manager, if the permissions are not set up correctly. It is also not as efficient as testing explicitly. </p> <p>Transient fields are not output.</p> <p>Superclass fields will be appended up to and including the specified superclass. A null superclass is treated as  {@code java.lang.Object}.</p> <p>If the style is  {@code null}, the default {@code ToStringStyle} is used.</p>

 * @param < T > the type of the output object

 * @param object  the Object to be output

 * @param style  the style of the {@code toString} to create,may be  {@code null}

 * @param reflectUpToClass  the superclass to reflect up to (inclusive),may be  {@code null}

 * @return the String result

 * @throws IllegalArgumentException if the Object is {@code null}

 */

public <T>String toStringWithStatics(final T object,final ToStringStyle style,final Class<? super T> reflectUpToClass){

  return ReflectionToStringBuilder.toString(object,style,false,true,reflectUpToClass);

}

Location: ToStringBuilderTest.java

Content: 

void validateNullToStringStyleRegistry(){

  final Map<Object,Object> registry=ToStringStyle.getRegistry();

  assertNull(registry,"Expected null, actual: " + registry);

}

