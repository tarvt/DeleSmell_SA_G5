Location: ToStringStyleConcurrencyTest.java

Content: 

@Test public void testArrayList() throws InterruptedException, ExecutionException {

  this.testConcurrency(new CollectionHolder<>(new ArrayList<>()));

}

Location: ToStringStyleConcurrencyTest.java

Content: 

private void testConcurrency(final CollectionHolder<List<Integer>> holder) throws InterruptedException, ExecutionException {

  final List<Integer> list=holder.collection;

  list.addAll(LIST);

  final ExecutorService threadPool=Executors.newFixedThreadPool(2);

  try {

    final Callable<Integer> consumer=() -> {

      for (int i=0; i < REPEAT; i++) {

        new ToStringBuilder(holder).append(holder.collection);

      }

      return Integer.valueOf(REPEAT);

    }

;

    final Collection<Callable<Integer>> tasks=new ArrayList<>();

    tasks.add(consumer);

    tasks.add(consumer);

    final List<Future<Integer>> futures=threadPool.invokeAll(tasks);

    UncheckedFuture.on(futures).forEach(UncheckedFuture::get);

  }

  finally {

    threadPool.shutdown();

    threadPool.awaitTermination(1,TimeUnit.SECONDS);

  }

}

Location: ToStringStyleConcurrencyTest.java

Content: 

@Test public void testCopyOnWriteArrayList() throws InterruptedException, ExecutionException {

  this.testConcurrency(new CollectionHolder<>(new CopyOnWriteArrayList<>()));

}

Location: ToStringStyleConcurrencyTest.java

Content: 

@Test public void testLinkedList() throws InterruptedException, ExecutionException {

  this.testConcurrency(new CollectionHolder<>(new LinkedList<>()));

}

