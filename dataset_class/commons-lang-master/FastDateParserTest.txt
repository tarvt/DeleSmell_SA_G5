Location: FastDateParserTest.java

Content: 

static void checkParse(final Locale locale,final Calendar cal,final SimpleDateFormat simpleDateFormat,final DateParser dateParser){

  final String formattedDate=simpleDateFormat.format(cal.getTime());

  checkParse(locale,simpleDateFormat,dateParser,formattedDate,formattedDate);

  checkParse(locale,simpleDateFormat,dateParser,formattedDate.toLowerCase(locale),formattedDate);

  checkParse(locale,simpleDateFormat,dateParser,formattedDate.toUpperCase(locale),formattedDate);

}

Location: FastDateParserTest.java

Content: 

static void checkParse(final Locale locale,final SimpleDateFormat simpleDateFormat,final DateParser dateParser,final String formattedDate,final String originalFormattedDate){

  try {

    final Date expectedTime=simpleDateFormat.parse(formattedDate);

    final Date actualTime=dateParser.parse(formattedDate);

    assertEquals(expectedTime,actualTime,"locale: " + locale + ", formattedDate: '"+ formattedDate+ "', originalFormattedDate: '"+ originalFormattedDate+ ", simpleDateFormat.pattern: '"+ simpleDateFormat+ "', Java: "+ SystemUtils.JAVA_RUNTIME_VERSION+ "\n");

  }

 catch (  final Exception e) {

    fail("locale: " + locale + ", formattedDate: '"+ formattedDate+ "', error : "+ e+ "\n",e);

  }

}

Location: FastDateParserTest.java

Content: 

static Stream<Arguments> dateParserParameters(){

  return Stream.of(Arguments.of((TriFunction<String,TimeZone,Locale,DateParser>)(format,timeZone,locale) -> new FastDateParser(format,timeZone,locale,null)),Arguments.of((TriFunction<String,TimeZone,Locale,DateParser>)FastDateFormat::getInstance));

}

Location: FastDateParserTest.java

Content: 

private Calendar getEraStart(int year,final TimeZone zone,final Locale locale){

  final Calendar cal=Calendar.getInstance(zone,locale);

  cal.clear();

  if (locale.equals(FastDateParser.JAPANESE_IMPERIAL)) {

    if (year < 1868) {

      cal.set(Calendar.ERA,0);

      cal.set(Calendar.YEAR,1868 - year);

    }

  }

 else {

    if (year < 0) {

      cal.set(Calendar.ERA,GregorianCalendar.BC);

      year=-year;

    }

    cal.set(Calendar.YEAR,year / 100 * 100);

  }

  return cal;

}

Location: FastDateParserTest.java

Content: 

/** 

 * Override this method in derived tests to change the construction of instances

 * @param dpProvider TODO

 * @param format the format string to use

 * @param timeZone the time zone to use

 * @param locale the locale to use

 * @return the DateParser instance to use for testing

 */

protected DateParser getInstance(final TriFunction<String,TimeZone,Locale,DateParser> dpProvider,final String format,final TimeZone timeZone,final Locale locale){

  return (dpProvider == null ? this.dateParserProvider : dpProvider).apply(format,timeZone,locale);

}

Location: FastDateParserTest.java

Content: 

@ParameterizedTest @MethodSource(DATE_PARSER_PARAMETERS) public void testAmPm(final TriFunction<String,TimeZone,Locale,DateParser> dpProvider) throws ParseException {

  final Calendar cal=Calendar.getInstance(NEW_YORK,Locale.US);

  cal.clear();

  final DateParser h=getInstance(dpProvider,"yyyy-MM-dd hh a mm:ss",NEW_YORK,Locale.US);

  final DateParser K=getInstance(dpProvider,"yyyy-MM-dd KK a mm:ss",NEW_YORK,Locale.US);

  final DateParser k=getInstance(dpProvider,"yyyy-MM-dd kk:mm:ss",NEW_YORK,Locale.US);

  final DateParser H=getInstance(dpProvider,"yyyy-MM-dd HH:mm:ss",NEW_YORK,Locale.US);

  cal.set(2010,Calendar.AUGUST,1,0,33,20);

  assertEquals(cal.getTime(),h.parse("2010-08-01 12 AM 33:20"));

  assertEquals(cal.getTime(),K.parse("2010-08-01 0 AM 33:20"));

  assertEquals(cal.getTime(),k.parse("2010-08-01 00:33:20"));

  assertEquals(cal.getTime(),H.parse("2010-08-01 00:33:20"));

  cal.set(2010,Calendar.AUGUST,1,3,33,20);

  assertEquals(cal.getTime(),h.parse("2010-08-01 3 AM 33:20"));

  assertEquals(cal.getTime(),K.parse("2010-08-01 3 AM 33:20"));

  assertEquals(cal.getTime(),k.parse("2010-08-01 03:33:20"));

  assertEquals(cal.getTime(),H.parse("2010-08-01 03:33:20"));

  cal.set(2010,Calendar.AUGUST,1,15,33,20);

  assertEquals(cal.getTime(),h.parse("2010-08-01 3 PM 33:20"));

  assertEquals(cal.getTime(),K.parse("2010-08-01 3 PM 33:20"));

  assertEquals(cal.getTime(),k.parse("2010-08-01 15:33:20"));

  assertEquals(cal.getTime(),H.parse("2010-08-01 15:33:20"));

  cal.set(2010,Calendar.AUGUST,1,12,33,20);

  assertEquals(cal.getTime(),h.parse("2010-08-01 12 PM 33:20"));

  assertEquals(cal.getTime(),K.parse("2010-08-01 0 PM 33:20"));

  assertEquals(cal.getTime(),k.parse("2010-08-01 12:33:20"));

  assertEquals(cal.getTime(),H.parse("2010-08-01 12:33:20"));

}

Location: FastDateParserTest.java

Content: 

@ParameterizedTest @MethodSource(DATE_PARSER_PARAMETERS) public void testDayOf(final TriFunction<String,TimeZone,Locale,DateParser> dpProvider) throws ParseException {

  final Calendar cal=Calendar.getInstance(NEW_YORK,Locale.US);

  cal.clear();

  cal.set(2003,Calendar.FEBRUARY,10);

  final DateParser fdf=getInstance(dpProvider,"W w F D y",NEW_YORK,Locale.US);

  assertEquals(cal.getTime(),fdf.parse("3 7 2 41 03"));

}

Location: FastDateParserTest.java

Content: 

@Test public void testJpLocales() throws ParseException {

  final Calendar cal=Calendar.getInstance(TimeZones.GMT);

  cal.clear();

  cal.set(2003,Calendar.FEBRUARY,10);

  cal.set(Calendar.ERA,GregorianCalendar.BC);

  final Locale locale=LocaleUtils.toLocale("zh");

  final SimpleDateFormat sdf=new SimpleDateFormat(LONG_FORMAT,locale);

  final DateParser fdf=getInstance(LONG_FORMAT,locale);

  checkParse(locale,cal,sdf,fdf);

}

Location: FastDateParserTest.java

Content: 

@ParameterizedTest @MethodSource(DATE_PARSER_PARAMETERS) public void testLang1121(final TriFunction<String,TimeZone,Locale,DateParser> dpProvider) throws ParseException {

  final TimeZone kst=TimeZone.getTimeZone("KST");

  final DateParser fdp=getInstance(dpProvider,"yyyyMMdd",kst,Locale.KOREA);

  assertThrows(ParseException.class,() -> fdp.parse("2015"));

  Date actual=fdp.parse("20150429");

  final Calendar cal=Calendar.getInstance(kst,Locale.KOREA);

  cal.clear();

  cal.set(2015,3,29);

  Date expected=cal.getTime();

  assertEquals(expected,actual);

  final SimpleDateFormat df=new SimpleDateFormat("yyyyMMdd",Locale.KOREA);

  df.setTimeZone(kst);

  expected=df.parse("20150429113100");

  actual=fdp.parse("20150429113100");

  assertEquals(expected,actual);

}

Location: FastDateParserTest.java

Content: 

@ParameterizedTest @MethodSource(DATE_PARSER_PARAMETERS) public void testLang1380(final TriFunction<String,TimeZone,Locale,DateParser> dpProvider) throws ParseException {

  final Calendar expected=Calendar.getInstance(TimeZones.GMT,Locale.FRANCE);

  expected.clear();

  expected.set(2014,Calendar.APRIL,14);

  final DateParser fdp=getInstance(dpProvider,"dd MMM yyyy",TimeZones.GMT,Locale.FRANCE);

  assertEquals(expected.getTime(),fdp.parse("14 avril 2014"));

  assertEquals(expected.getTime(),fdp.parse("14 avr. 2014"));

  assertEquals(expected.getTime(),fdp.parse("14 avr 2014"));

}

Location: FastDateParserTest.java

Content: 

@ParameterizedTest @MethodSource(DATE_PARSER_PARAMETERS) public void testLang996(final TriFunction<String,TimeZone,Locale,DateParser> dpProvider) throws ParseException {

  final Calendar expected=Calendar.getInstance(NEW_YORK,Locale.US);

  expected.clear();

  expected.set(2014,Calendar.MAY,14);

  final DateParser fdp=getInstance(dpProvider,"ddMMMyyyy",NEW_YORK,Locale.US);

  assertEquals(expected.getTime(),fdp.parse("14may2014"));

  assertEquals(expected.getTime(),fdp.parse("14MAY2014"));

  assertEquals(expected.getTime(),fdp.parse("14May2014"));

}

Location: FastDateParserTest.java

Content: 

@ParameterizedTest @MethodSource(DATE_PARSER_PARAMETERS) public void testLANG_831(final TriFunction<String,TimeZone,Locale,DateParser> dpProvider) throws Exception {

  testSdfAndFdp(dpProvider,"M E","3  Tue",true);

}

Location: FastDateParserTest.java

Content: 

@ParameterizedTest @MethodSource(DATE_PARSER_PARAMETERS) public void testLANG_832(final TriFunction<String,TimeZone,Locale,DateParser> dpProvider) throws Exception {

  testSdfAndFdp(dpProvider,"'d'd","d3",false);

  testSdfAndFdp(dpProvider,"'d'd'","d3",true);

}

Location: FastDateParserTest.java

Content: 

@ParameterizedTest @MethodSource(DATE_PARSER_PARAMETERS) public void testParseLongShort(final TriFunction<String,TimeZone,Locale,DateParser> dpProvider) throws ParseException {

  final Calendar cal=Calendar.getInstance(NEW_YORK,Locale.US);

  cal.clear();

  cal.set(2003,Calendar.FEBRUARY,10,15,33,20);

  cal.set(Calendar.MILLISECOND,989);

  cal.setTimeZone(NEW_YORK);

  DateParser fdf=getInstance(dpProvider,"yyyy GGGG MMMM dddd aaaa EEEE HHHH mmmm ssss SSSS ZZZZ",NEW_YORK,Locale.US);

  assertEquals(cal.getTime(),fdf.parse("2003 AD February 0010 PM Monday 0015 0033 0020 0989 GMT-05:00"));

  cal.set(Calendar.ERA,GregorianCalendar.BC);

  final Date parse=fdf.parse("2003 BC February 0010 PM Saturday 0015 0033 0020 0989 GMT-05:00");

  assertEquals(cal.getTime(),parse);

  fdf=getInstance(null,"y G M d a E H m s S Z",NEW_YORK,Locale.US);

  assertEquals(cal.getTime(),fdf.parse("03 BC 2 10 PM Sat 15 33 20 989 -0500"));

  cal.set(Calendar.ERA,GregorianCalendar.AD);

  assertEquals(cal.getTime(),fdf.parse("03 AD 2 10 PM Saturday 15 33 20 989 -0500"));

}

Location: FastDateParserTest.java

Content: 

@ParameterizedTest @MethodSource(DATE_PARSER_PARAMETERS) public void testParseNumerics(final TriFunction<String,TimeZone,Locale,DateParser> dpProvider) throws ParseException {

  final Calendar cal=Calendar.getInstance(NEW_YORK,Locale.US);

  cal.clear();

  cal.set(2003,Calendar.FEBRUARY,10,15,33,20);

  cal.set(Calendar.MILLISECOND,989);

  final DateParser fdf=getInstance(dpProvider,"yyyyMMddHHmmssSSS",NEW_YORK,Locale.US);

  assertEquals(cal.getTime(),fdf.parse("20030210153320989"));

}

Location: FastDateParserTest.java

Content: 

@Test public void testParseOffset(){

  final DateParser parser=getInstance(YMD_SLASH);

  final Date date=parser.parse("Today is 2015/07/04",new ParsePosition(9));

  final Calendar cal=Calendar.getInstance();

  cal.clear();

  cal.set(2015,Calendar.JULY,4);

  assertEquals(cal.getTime(),date);

}

Location: FastDateParserTest.java

Content: 

@Test public void testParses() throws Exception {

  for (  final String format : new String[]{LONG_FORMAT,SHORT_FORMAT}) {

    for (    final Locale locale : Locale.getAvailableLocales()) {

      for (      final TimeZone timeZone : new TimeZone[]{NEW_YORK,REYKJAVIK,TimeZones.GMT}) {

        for (        final int year : new int[]{2003,1940,1868,1867,1,-1,-1940}) {

          final Calendar cal=getEraStart(year,timeZone,locale);

          final Date centuryStart=cal.getTime();

          cal.set(Calendar.MONTH,1);

          cal.set(Calendar.DAY_OF_MONTH,10);

          final Date in=cal.getTime();

          final FastDateParser fastDateParser=new FastDateParser(format,timeZone,locale,centuryStart);

          validateSdfFormatFdpParseEquality(format,locale,timeZone,fastDateParser,in,year,centuryStart);

        }

      }

    }

  }

}

Location: FastDateParserTest.java

Content: 

/** 

 * Fails on Java 16 Early Access build 25 and above, last tested with build 36.

 */

@Test public void testParsesKnownJava16Ea25Failure() throws Exception {

  final String format=LONG_FORMAT;

  final int year=2003;

  final Locale locale=new Locale.Builder().setLanguage("sq").setRegion("MK").build();

  assertEquals("sq_MK",locale.toString());

  assertNotNull(locale);

  final TimeZone timeZone=NEW_YORK;

  final Calendar cal=getEraStart(year,timeZone,locale);

  final Date centuryStart=cal.getTime();

  cal.set(Calendar.MONTH,1);

  cal.set(Calendar.DAY_OF_MONTH,10);

  final Date in=cal.getTime();

  final FastDateParser fastDateParser=new FastDateParser(format,timeZone,locale,centuryStart);

  validateSdfFormatFdpParseEquality(format,locale,timeZone,fastDateParser,in,year,centuryStart);

}

Location: FastDateParserTest.java

Content: 

@ParameterizedTest @MethodSource(DATE_PARSER_PARAMETERS) public void testParseZone(final TriFunction<String,TimeZone,Locale,DateParser> dpProvider) throws ParseException {

  final Calendar cal=Calendar.getInstance(NEW_YORK,Locale.US);

  cal.clear();

  cal.set(2003,Calendar.JULY,10,16,33,20);

  final DateParser fdf=getInstance(dpProvider,yMdHmsSZ,NEW_YORK,Locale.US);

  assertEquals(cal.getTime(),fdf.parse("2003-07-10T15:33:20.000 -0500"));

  assertEquals(cal.getTime(),fdf.parse("2003-07-10T15:33:20.000 GMT-05:00"));

  assertEquals(cal.getTime(),fdf.parse("2003-07-10T16:33:20.000 Eastern Daylight Time"));

  assertEquals(cal.getTime(),fdf.parse("2003-07-10T16:33:20.000 EDT"));

  cal.setTimeZone(TimeZone.getTimeZone("GMT-3"));

  cal.set(2003,Calendar.FEBRUARY,10,9,0,0);

  assertEquals(cal.getTime(),fdf.parse("2003-02-10T09:00:00.000 -0300"));

  cal.setTimeZone(TimeZone.getTimeZone("GMT+5"));

  cal.set(2003,Calendar.FEBRUARY,10,15,5,6);

  assertEquals(cal.getTime(),fdf.parse("2003-02-10T15:05:06.000 +0500"));

}

Location: FastDateParserTest.java

Content: 

@ParameterizedTest @MethodSource(DATE_PARSER_PARAMETERS) public void testQuotes(final TriFunction<String,TimeZone,Locale,DateParser> dpProvider) throws ParseException {

  final Calendar cal=Calendar.getInstance(NEW_YORK,Locale.US);

  cal.clear();

  cal.set(2003,Calendar.FEBRUARY,10,15,33,20);

  cal.set(Calendar.MILLISECOND,989);

  final DateParser fdf=getInstance(dpProvider,"''yyyyMMdd'A''B'HHmmssSSS''",NEW_YORK,Locale.US);

  assertEquals(cal.getTime(),fdf.parse("'20030210A'B153320989'"));

}

Location: FastDateParserTest.java

Content: 

private void testSdfAndFdp(final TriFunction<String,TimeZone,Locale,DateParser> dbProvider,final String format,final String date,final boolean shouldFail) throws Exception {

  Date dfdp=null;

  Date dsdf=null;

  Throwable f=null;

  Throwable s=null;

  try {

    final SimpleDateFormat sdf=new SimpleDateFormat(format,Locale.US);

    sdf.setTimeZone(NEW_YORK);

    dsdf=sdf.parse(date);

    assertFalse(shouldFail,"Expected SDF failure, but got " + dsdf + " for ["+ format+ ", "+ date+ "]");

  }

 catch (  final Exception e) {

    s=e;

    if (!shouldFail) {

      throw e;

    }

  }

  try {

    final DateParser fdp=getInstance(dbProvider,format,NEW_YORK,Locale.US);

    dfdp=fdp.parse(date);

    assertFalse(shouldFail,"Expected FDF failure, but got " + dfdp + " for ["+ format+ ", "+ date+ "]");

  }

 catch (  final Exception e) {

    f=e;

    if (!shouldFail) {

      throw e;

    }

  }

  assertEquals((f == null),(s == null),"Should both or neither throw Exceptions");

  assertEquals(dsdf,dfdp,"Parsed dates should be equal");

}

Location: FastDateParserTest.java

Content: 

@ParameterizedTest @MethodSource(DATE_PARSER_PARAMETERS) public void testSpecialCharacters(final TriFunction<String,TimeZone,Locale,DateParser> dpProvider) throws Exception {

  testSdfAndFdp(dpProvider,"q","",true);

  testSdfAndFdp(dpProvider,"Q","",true);

  testSdfAndFdp(dpProvider,"$","$",false);

  testSdfAndFdp(dpProvider,"?.d","?.12",false);

  testSdfAndFdp(dpProvider,"''yyyyMMdd'A''B'HHmmssSSS''","'20030210A'B153320989'",false);

  testSdfAndFdp(dpProvider,"''''yyyyMMdd'A''B'HHmmssSSS''","''20030210A'B153320989'",false);

  testSdfAndFdp(dpProvider,"'$\\Ed'","$\\Ed",false);

  testSdfAndFdp(dpProvider,"'QED'","QED",false);

  testSdfAndFdp(dpProvider,"'QED'","qed",true);

  testSdfAndFdp(dpProvider,"yyyy-MM-dd 'QED'","2003-02-10 QED",false);

  testSdfAndFdp(dpProvider,"yyyy-MM-dd 'QED'","2003-02-10 qed",true);

}

Location: FastDateParserTest.java

Content: 

@Test public void testTzParses() throws Exception {

  for (  final Locale locale : Locale.getAvailableLocales()) {

    final FastDateParser fdp=new FastDateParser("yyyy/MM/dd z",TimeZone.getDefault(),locale);

    for (    final TimeZone timeZone : new TimeZone[]{NEW_YORK,REYKJAVIK,TimeZones.GMT}) {

      final Calendar cal=Calendar.getInstance(timeZone,locale);

      cal.clear();

      cal.set(Calendar.YEAR,2000);

      cal.set(Calendar.MONTH,1);

      cal.set(Calendar.DAY_OF_MONTH,10);

      final Date expected=cal.getTime();

      final Date actual=fdp.parse("2000/02/10 " + timeZone.getDisplayName(locale));

      assertEquals(expected,actual,"timeZone:" + timeZone.getID() + " locale:"+ locale.getDisplayName());

    }

  }

}

Location: FastDateParserTest.java

Content: 

@ParameterizedTest @MethodSource(DATE_PARSER_PARAMETERS) public void test_Equality_Hash(final TriFunction<String,TimeZone,Locale,DateParser> dpProvider){

  final DateParser[] parsers={getInstance(dpProvider,yMdHmsSZ,NEW_YORK,Locale.US),getInstance(dpProvider,DMY_DOT,NEW_YORK,Locale.US),getInstance(dpProvider,YMD_SLASH,NEW_YORK,Locale.US),getInstance(dpProvider,MDY_DASH,NEW_YORK,Locale.US),getInstance(dpProvider,MDY_SLASH,NEW_YORK,Locale.US),getInstance(dpProvider,MDY_SLASH,REYKJAVIK,Locale.US),getInstance(dpProvider,MDY_SLASH,REYKJAVIK,SWEDEN)};

  final Map<DateParser,Integer> map=new HashMap<>();

  int i=0;

  for (  final DateParser parser : parsers) {

    map.put(parser,Integer.valueOf(i++));

  }

  i=0;

  for (  final DateParser parser : parsers) {

    assertEquals(i++,map.get(parser).intValue());

  }

}

Location: FastDateParserTest.java

Content: 

private void validateSdfFormatFdpParseEquality(final String formatStr,final Locale locale,final TimeZone timeZone,final FastDateParser dateParser,final Date inDate,final int year,final Date csDate) throws ParseException {

  final SimpleDateFormat sdf=new SimpleDateFormat(formatStr,locale);

  sdf.setTimeZone(timeZone);

  if (formatStr.equals(SHORT_FORMAT)) {

    sdf.set2DigitYearStart(csDate);

  }

  final String fmt=sdf.format(inDate);

  try {

    final Date out=dateParser.parse(fmt);

    assertEquals(inDate,out,"format: '" + formatStr + "', locale: '"+ locale+ "', time zone: '"+ timeZone.getID()+ "', year: "+ year+ ", parse: '"+ fmt);

  }

 catch (  final ParseException pe) {

    if (year >= 1868 || !locale.getCountry().equals("JP")) {

      throw pe;

    }

  }

}

