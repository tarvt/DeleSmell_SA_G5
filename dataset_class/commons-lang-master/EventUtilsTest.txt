Location: EventUtilsTest.java

Content: 

@Test public void testAddEventListener(){

  final PropertyChangeSource src=new PropertyChangeSource();

  final EventCountingInvocationHandler handler=new EventCountingInvocationHandler();

  final PropertyChangeListener listener=handler.createListener(PropertyChangeListener.class);

  assertEquals(0,handler.getEventCount("propertyChange"));

  EventUtils.addEventListener(src,PropertyChangeListener.class,listener);

  assertEquals(0,handler.getEventCount("propertyChange"));

  src.setProperty("newValue");

  assertEquals(1,handler.getEventCount("propertyChange"));

}

Location: EventUtilsTest.java

Content: 

@Test public void testAddEventListenerThrowsException(){

  final ExceptionEventSource src=new ExceptionEventSource();

  assertThrows(RuntimeException.class,() -> EventUtils.addEventListener(src,PropertyChangeListener.class,e -> {

  }

));

}

Location: EventUtilsTest.java

Content: 

@Test public void testAddEventListenerWithNoAddMethod(){

  final PropertyChangeSource src=new PropertyChangeSource();

  final EventCountingInvocationHandler handler=new EventCountingInvocationHandler();

  final ObjectChangeListener listener=handler.createListener(ObjectChangeListener.class);

  final IllegalArgumentException e=assertThrows(IllegalArgumentException.class,() -> EventUtils.addEventListener(src,ObjectChangeListener.class,listener));

  assertEquals("Class " + src.getClass().getName() + " does not have a public add"+ ObjectChangeListener.class.getSimpleName()+ " method which takes a parameter of type "+ ObjectChangeListener.class.getName()+ ".",e.getMessage());

}

Location: EventUtilsTest.java

Content: 

@Test public void testAddEventListenerWithPrivateAddMethod(){

  final PropertyChangeSource src=new PropertyChangeSource();

  final EventCountingInvocationHandler handler=new EventCountingInvocationHandler();

  final VetoableChangeListener listener=handler.createListener(VetoableChangeListener.class);

  final IllegalArgumentException e=assertThrows(IllegalArgumentException.class,() -> EventUtils.addEventListener(src,VetoableChangeListener.class,listener));

  assertEquals("Class " + src.getClass().getName() + " does not have a public add"+ VetoableChangeListener.class.getSimpleName()+ " method which takes a parameter of type "+ VetoableChangeListener.class.getName()+ ".",e.getMessage());

}

Location: EventUtilsTest.java

Content: 

@Test public void testBindEventsToMethod(){

  final PropertyChangeSource src=new PropertyChangeSource();

  final EventCounter counter=new EventCounter();

  EventUtils.bindEventsToMethod(counter,"eventOccurred",src,PropertyChangeListener.class);

  assertEquals(0,counter.getCount());

  src.setProperty("newValue");

  assertEquals(1,counter.getCount());

}

Location: EventUtilsTest.java

Content: 

@Test public void testBindEventsToMethodWithEvent(){

  final PropertyChangeSource src=new PropertyChangeSource();

  final EventCounterWithEvent counter=new EventCounterWithEvent();

  EventUtils.bindEventsToMethod(counter,"eventOccurred",src,PropertyChangeListener.class);

  assertEquals(0,counter.getCount());

  src.setProperty("newValue");

  assertEquals(1,counter.getCount());

}

Location: EventUtilsTest.java

Content: 

@Test public void testBindFilteredEventsToMethod(){

  final MultipleEventSource src=new MultipleEventSource();

  final EventCounter counter=new EventCounter();

  EventUtils.bindEventsToMethod(counter,"eventOccurred",src,MultipleEventListener.class,"event1");

  assertEquals(0,counter.getCount());

  src.listeners.fire().event1(new PropertyChangeEvent(new Date(),"Day",Integer.valueOf(0),Integer.valueOf(1)));

  assertEquals(1,counter.getCount());

  src.listeners.fire().event2(new PropertyChangeEvent(new Date(),"Day",Integer.valueOf(1),Integer.valueOf(2)));

  assertEquals(1,counter.getCount());

}

