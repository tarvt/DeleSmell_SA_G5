Location: StrMatcher.java

Content: 

/** 

 * Constructor that creates a matcher from a character.

 * @param ch  the character to match, must not be null

 * @return a new Matcher for the given char

 */

public static StrMatcher charMatcher(final char ch){

  return new CharMatcher(ch);

}

Location: StrMatcher.java

Content: 

/** 

 * Constructor that creates a matcher from a set of characters.

 * @param chars  the characters to match, null or empty matches nothing

 * @return a new matcher for the given char[]

 */

public static StrMatcher charSetMatcher(final char... chars){

  if (chars == null || chars.length == 0) {

    return NONE_MATCHER;

  }

  if (chars.length == 1) {

    return new CharMatcher(chars[0]);

  }

  return new CharSetMatcher(chars);

}

Location: StrMatcher.java

Content: 

/** 

 * Constructor that creates a matcher from a string representing a set of characters.

 * @param chars  the characters to match, null or empty matches nothing

 * @return a new Matcher for the given characters

 */

public static StrMatcher charSetMatcher(final String chars){

  if (StringUtils.isEmpty(chars)) {

    return NONE_MATCHER;

  }

  if (chars.length() == 1) {

    return new CharMatcher(chars.charAt(0));

  }

  return new CharSetMatcher(chars.toCharArray());

}

Location: StrMatcher.java

Content: 

/** 

 * Returns a matcher which matches the comma character.

 * @return a matcher for a comma

 */

public static StrMatcher commaMatcher(){

  return COMMA_MATCHER;

}

Location: StrMatcher.java

Content: 

/** 

 * Returns a matcher which matches the double quote character.

 * @return a matcher for a double quote

 */

public static StrMatcher doubleQuoteMatcher(){

  return DOUBLE_QUOTE_MATCHER;

}

Location: StrMatcher.java

Content: 

/** 

 * Returns the number of matching characters, zero for no match. <p> This method is called to check for a match. The parameter  {@code pos} represents the current position to bechecked in the string  {@code buffer} (a character array which mustnot be changed). The API guarantees that  {@code pos} is a valid index for {@code buffer}. <p> The matching code may check one character or many. It may check characters preceding  {@code pos} as well as those after.<p> It must return zero for no match, or a positive number if a match was found. The number indicates the number of characters that matched.

 * @param buffer  the text content to match against, do not change

 * @param pos  the starting position for the match, valid for buffer

 * @return the number of matching characters, zero for no match

 * @since 2.4

 */

public int isMatch(final char[] buffer,final int pos){

  return isMatch(buffer,pos,0,buffer.length);

}

Location: StrMatcher.java

Content: 

/** 

 * Returns the number of matching characters, zero for no match. <p> This method is called to check for a match. The parameter  {@code pos} represents the current position to bechecked in the string  {@code buffer} (a character array which mustnot be changed). The API guarantees that  {@code pos} is a valid index for {@code buffer}. <p> The character array may be larger than the active area to be matched. Only values in the buffer between the specified indices may be accessed. <p> The matching code may check one character or many. It may check characters preceding  {@code pos} as well as thoseafter, so long as no checks exceed the bounds specified. <p> It must return zero for no match, or a positive number if a match was found. The number indicates the number of characters that matched.

 * @param buffer  the text content to match against, do not change

 * @param pos  the starting position for the match, valid for buffer

 * @param bufferStart  the first active index in the buffer, valid for buffer

 * @param bufferEnd  the end index (exclusive) of the active buffer, valid for buffer

 * @return the number of matching characters, zero for no match

 */

public abstract int isMatch(char[] buffer,int pos,int bufferStart,int bufferEnd);

Location: StrMatcher.java

Content: 

/** 

 * Matches no characters.

 * @return a matcher that matches nothing

 */

public static StrMatcher noneMatcher(){

  return NONE_MATCHER;

}

Location: StrMatcher.java

Content: 

/** 

 * Returns a matcher which matches the single or double quote character.

 * @return a matcher for a single or double quote

 */

public static StrMatcher quoteMatcher(){

  return QUOTE_MATCHER;

}

Location: StrMatcher.java

Content: 

/** 

 * Returns a matcher which matches the single quote character.

 * @return a matcher for a single quote

 */

public static StrMatcher singleQuoteMatcher(){

  return SINGLE_QUOTE_MATCHER;

}

Location: StrMatcher.java

Content: 

/** 

 * Returns a matcher which matches the space character.

 * @return a matcher for a space

 */

public static StrMatcher spaceMatcher(){

  return SPACE_MATCHER;

}

Location: StrMatcher.java

Content: 

/** 

 * Matches the same characters as StringTokenizer, namely space, tab, newline and formfeed.

 * @return the split matcher

 */

public static StrMatcher splitMatcher(){

  return SPLIT_MATCHER;

}

Location: StrMatcher.java

Content: 

/** 

 * Constructor that creates a matcher from a string.

 * @param str  the string to match, null or empty matches nothing

 * @return a new Matcher for the given String

 */

public static StrMatcher stringMatcher(final String str){

  if (StringUtils.isEmpty(str)) {

    return NONE_MATCHER;

  }

  return new StringMatcher(str);

}

Location: StrMatcher.java

Content: 

/** 

 * Constructor.

 */

protected StrMatcher(){

}

Location: StrMatcher.java

Content: 

/** 

 * Returns a matcher which matches the tab character.

 * @return a matcher for a tab

 */

public static StrMatcher tabMatcher(){

  return TAB_MATCHER;

}

Location: StrMatcher.java

Content: 

/** 

 * Matches the String trim() whitespace characters.

 * @return the trim matcher

 */

public static StrMatcher trimMatcher(){

  return TRIM_MATCHER;

}

