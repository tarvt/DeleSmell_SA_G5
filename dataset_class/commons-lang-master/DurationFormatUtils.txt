Location: DurationFormatUtils.java

Content: 

/** 

 * <p>DurationFormatUtils instances should NOT be constructed in standard programming.</p> <p>This constructor is public to permit tools that require a JavaBean instance to operate.</p>

 */

public DurationFormatUtils(){

}

Location: DurationFormatUtils.java

Content: 

/** 

 * <p>Formats the time gap as a string.</p> <p>The format used is ISO 8601-like:  {@code HH:mm:ss.SSS}.</p>

 * @param durationMillis  the duration to format

 * @return the formatted duration, not null

 * @throws java.lang.IllegalArgumentException if durationMillis is negative

 */

public static String formatDurationHMS(final long durationMillis){

  return formatDuration(durationMillis,"HH:mm:ss.SSS");

}

Location: DurationFormatUtils.java

Content: 

/** 

 * <p>Formats the time gap as a string.</p> <p>The format used is the ISO 8601 period format.</p> <p>This method formats durations using the days and lower fields of the ISO format pattern, such as P7D6TH5M4.321S.</p>

 * @param durationMillis  the duration to format

 * @return the formatted duration, not null

 * @throws java.lang.IllegalArgumentException if durationMillis is negative

 */

public static String formatDurationISO(final long durationMillis){

  return formatDuration(durationMillis,ISO_EXTENDED_FORMAT_PATTERN,false);

}

Location: DurationFormatUtils.java

Content: 

/** 

 * <p>Formats an elapsed time into a pluralization correct string.</p> <p>This method formats durations using the days and lower fields of the format pattern. Months and larger are not used.</p>

 * @param durationMillis  the elapsed time to report in milliseconds

 * @param suppressLeadingZeroElements  suppresses leading 0 elements

 * @param suppressTrailingZeroElements  suppresses trailing 0 elements

 * @return the formatted text in days/hours/minutes/seconds, not null

 * @throws java.lang.IllegalArgumentException if durationMillis is negative

 */

public static String formatDurationWords(final long durationMillis,final boolean suppressLeadingZeroElements,final boolean suppressTrailingZeroElements){

  String duration=formatDuration(durationMillis,"d' days 'H' hours 'm' minutes 's' seconds'");

  if (suppressLeadingZeroElements) {

    duration=" " + duration;

    String tmp=StringUtils.replaceOnce(duration," 0 days",StringUtils.EMPTY);

    if (tmp.length() != duration.length()) {

      duration=tmp;

      tmp=StringUtils.replaceOnce(duration," 0 hours",StringUtils.EMPTY);

      if (tmp.length() != duration.length()) {

        duration=tmp;

        tmp=StringUtils.replaceOnce(duration," 0 minutes",StringUtils.EMPTY);

        duration=tmp;

        if (tmp.length() != duration.length()) {

          duration=StringUtils.replaceOnce(tmp," 0 seconds",StringUtils.EMPTY);

        }

      }

    }

    if (!duration.isEmpty()) {

      duration=duration.substring(1);

    }

  }

  if (suppressTrailingZeroElements) {

    String tmp=StringUtils.replaceOnce(duration," 0 seconds",StringUtils.EMPTY);

    if (tmp.length() != duration.length()) {

      duration=tmp;

      tmp=StringUtils.replaceOnce(duration," 0 minutes",StringUtils.EMPTY);

      if (tmp.length() != duration.length()) {

        duration=tmp;

        tmp=StringUtils.replaceOnce(duration," 0 hours",StringUtils.EMPTY);

        if (tmp.length() != duration.length()) {

          duration=StringUtils.replaceOnce(tmp," 0 days",StringUtils.EMPTY);

        }

      }

    }

  }

  duration=" " + duration;

  duration=StringUtils.replaceOnce(duration," 1 seconds"," 1 second");

  duration=StringUtils.replaceOnce(duration," 1 minutes"," 1 minute");

  duration=StringUtils.replaceOnce(duration," 1 hours"," 1 hour");

  duration=StringUtils.replaceOnce(duration," 1 days"," 1 day");

  return duration.trim();

}

Location: DurationFormatUtils.java

Content: 

/** 

 * <p>Formats the time gap as a string, using the specified format, and padding with zeros.</p> <p>This method formats durations using the days and lower fields of the format pattern. Months and larger are not used.</p>

 * @param durationMillis  the duration to format

 * @param format  the way in which to format the duration, not null

 * @return the formatted duration, not null

 * @throws java.lang.IllegalArgumentException if durationMillis is negative

 */

public static String formatDuration(final long durationMillis,final String format){

  return formatDuration(durationMillis,format,true);

}

Location: DurationFormatUtils.java

Content: 

/** 

 * <p>Formats the time gap as a string, using the specified format. Padding the left hand side of numbers with zeroes is optional.</p> <p>This method formats durations using the days and lower fields of the format pattern. Months and larger are not used.</p>

 * @param durationMillis  the duration to format

 * @param format  the way in which to format the duration, not null

 * @param padWithZeros  whether to pad the left hand side of numbers with 0's

 * @return the formatted duration, not null

 * @throws java.lang.IllegalArgumentException if durationMillis is negative

 */

public static String formatDuration(final long durationMillis,final String format,final boolean padWithZeros){

  Validate.inclusiveBetween(0,Long.MAX_VALUE,durationMillis,"durationMillis must not be negative");

  final Token[] tokens=lexx(format);

  long days=0;

  long hours=0;

  long minutes=0;

  long seconds=0;

  long milliseconds=durationMillis;

  if (Token.containsTokenWithValue(tokens,d)) {

    days=milliseconds / DateUtils.MILLIS_PER_DAY;

    milliseconds=milliseconds - (days * DateUtils.MILLIS_PER_DAY);

  }

  if (Token.containsTokenWithValue(tokens,H)) {

    hours=milliseconds / DateUtils.MILLIS_PER_HOUR;

    milliseconds=milliseconds - (hours * DateUtils.MILLIS_PER_HOUR);

  }

  if (Token.containsTokenWithValue(tokens,m)) {

    minutes=milliseconds / DateUtils.MILLIS_PER_MINUTE;

    milliseconds=milliseconds - (minutes * DateUtils.MILLIS_PER_MINUTE);

  }

  if (Token.containsTokenWithValue(tokens,s)) {

    seconds=milliseconds / DateUtils.MILLIS_PER_SECOND;

    milliseconds=milliseconds - (seconds * DateUtils.MILLIS_PER_SECOND);

  }

  return format(tokens,0,0,days,hours,minutes,seconds,milliseconds,padWithZeros);

}

Location: DurationFormatUtils.java

Content: 

/** 

 * <p>Formats the time gap as a string.</p> <p>The format used is the ISO 8601 period format.</p>

 * @param startMillis  the start of the duration to format

 * @param endMillis  the end of the duration to format

 * @return the formatted duration, not null

 * @throws java.lang.IllegalArgumentException if startMillis is greater than endMillis

 */

public static String formatPeriodISO(final long startMillis,final long endMillis){

  return formatPeriod(startMillis,endMillis,ISO_EXTENDED_FORMAT_PATTERN,false,TimeZone.getDefault());

}

Location: DurationFormatUtils.java

Content: 

/** 

 * <p>Formats the time gap as a string, using the specified format. Padding the left hand side of numbers with zeroes is optional.

 * @param startMillis  the start of the duration

 * @param endMillis  the end of the duration

 * @param format  the way in which to format the duration, not null

 * @return the formatted duration, not null

 * @throws java.lang.IllegalArgumentException if startMillis is greater than endMillis

 */

public static String formatPeriod(final long startMillis,final long endMillis,final String format){

  return formatPeriod(startMillis,endMillis,format,true,TimeZone.getDefault());

}

Location: DurationFormatUtils.java

Content: 

/** 

 * <p>Formats the time gap as a string, using the specified format. Padding the left hand side of numbers with zeroes is optional and the time zone may be specified. </p> <p>When calculating the difference between months/days, it chooses to calculate months first. So when working out the number of months and days between January 15th and March 10th, it choose 1 month and 23 days gained by choosing January-&gt;February = 1 month and then calculating days forwards, and not the 1 month and 26 days gained by choosing March -&gt; February = 1 month and then calculating days backwards. </p> <p>For more control, the <a href="http://joda-time.sf.net/">Joda-Time</a> library is recommended.</p>

 * @param startMillis  the start of the duration

 * @param endMillis  the end of the duration

 * @param format  the way in which to format the duration, not null

 * @param padWithZeros  whether to pad the left hand side of numbers with 0's

 * @param timezone  the millis are defined in

 * @return the formatted duration, not null

 * @throws java.lang.IllegalArgumentException if startMillis is greater than endMillis

 */

public static String formatPeriod(final long startMillis,final long endMillis,final String format,final boolean padWithZeros,final TimeZone timezone){

  Validate.isTrue(startMillis <= endMillis,"startMillis must not be greater than endMillis");

  final Token[] tokens=lexx(format);

  final Calendar start=Calendar.getInstance(timezone);

  start.setTime(new Date(startMillis));

  final Calendar end=Calendar.getInstance(timezone);

  end.setTime(new Date(endMillis));

  int milliseconds=end.get(Calendar.MILLISECOND) - start.get(Calendar.MILLISECOND);

  int seconds=end.get(Calendar.SECOND) - start.get(Calendar.SECOND);

  int minutes=end.get(Calendar.MINUTE) - start.get(Calendar.MINUTE);

  int hours=end.get(Calendar.HOUR_OF_DAY) - start.get(Calendar.HOUR_OF_DAY);

  int days=end.get(Calendar.DAY_OF_MONTH) - start.get(Calendar.DAY_OF_MONTH);

  int months=end.get(Calendar.MONTH) - start.get(Calendar.MONTH);

  int years=end.get(Calendar.YEAR) - start.get(Calendar.YEAR);

  while (milliseconds < 0) {

    milliseconds+=1000;

    seconds-=1;

  }

  while (seconds < 0) {

    seconds+=60;

    minutes-=1;

  }

  while (minutes < 0) {

    minutes+=60;

    hours-=1;

  }

  while (hours < 0) {

    hours+=24;

    days-=1;

  }

  if (Token.containsTokenWithValue(tokens,M)) {

    while (days < 0) {

      days+=start.getActualMaximum(Calendar.DAY_OF_MONTH);

      months-=1;

      start.add(Calendar.MONTH,1);

    }

    while (months < 0) {

      months+=12;

      years-=1;

    }

    if (!Token.containsTokenWithValue(tokens,y) && years != 0) {

      while (years != 0) {

        months+=12 * years;

        years=0;

      }

    }

  }

 else {

    if (!Token.containsTokenWithValue(tokens,y)) {

      int target=end.get(Calendar.YEAR);

      if (months < 0) {

        target-=1;

      }

      while (start.get(Calendar.YEAR) != target) {

        days+=start.getActualMaximum(Calendar.DAY_OF_YEAR) - start.get(Calendar.DAY_OF_YEAR);

        if (start instanceof GregorianCalendar && start.get(Calendar.MONTH) == Calendar.FEBRUARY && start.get(Calendar.DAY_OF_MONTH) == 29) {

          days+=1;

        }

        start.add(Calendar.YEAR,1);

        days+=start.get(Calendar.DAY_OF_YEAR);

      }

      years=0;

    }

    while (start.get(Calendar.MONTH) != end.get(Calendar.MONTH)) {

      days+=start.getActualMaximum(Calendar.DAY_OF_MONTH);

      start.add(Calendar.MONTH,1);

    }

    months=0;

    while (days < 0) {

      days+=start.getActualMaximum(Calendar.DAY_OF_MONTH);

      months-=1;

      start.add(Calendar.MONTH,1);

    }

  }

  if (!Token.containsTokenWithValue(tokens,d)) {

    hours+=24 * days;

    days=0;

  }

  if (!Token.containsTokenWithValue(tokens,H)) {

    minutes+=60 * hours;

    hours=0;

  }

  if (!Token.containsTokenWithValue(tokens,m)) {

    seconds+=60 * minutes;

    minutes=0;

  }

  if (!Token.containsTokenWithValue(tokens,s)) {

    milliseconds+=1000 * seconds;

    seconds=0;

  }

  return format(tokens,years,months,days,hours,minutes,seconds,milliseconds,padWithZeros);

}

Location: DurationFormatUtils.java

Content: 

/** 

 * <p>The internal method to do the formatting.</p>

 * @param tokens  the tokens

 * @param years  the number of years

 * @param months  the number of months

 * @param days  the number of days

 * @param hours  the number of hours

 * @param minutes  the number of minutes

 * @param seconds  the number of seconds

 * @param milliseconds  the number of millis

 * @param padWithZeros  whether to pad

 * @return the formatted string

 */

static String format(final Token[] tokens,final long years,final long months,final long days,final long hours,final long minutes,final long seconds,final long milliseconds,final boolean padWithZeros){

  final StringBuilder buffer=new StringBuilder();

  boolean lastOutputSeconds=false;

  for (  final Token token : tokens) {

    final Object value=token.getValue();

    final int count=token.getCount();

    if (value instanceof StringBuilder) {

      buffer.append(value.toString());

    }

 else     if (value.equals(y)) {

      buffer.append(paddedValue(years,padWithZeros,count));

      lastOutputSeconds=false;

    }

 else     if (value.equals(M)) {

      buffer.append(paddedValue(months,padWithZeros,count));

      lastOutputSeconds=false;

    }

 else     if (value.equals(d)) {

      buffer.append(paddedValue(days,padWithZeros,count));

      lastOutputSeconds=false;

    }

 else     if (value.equals(H)) {

      buffer.append(paddedValue(hours,padWithZeros,count));

      lastOutputSeconds=false;

    }

 else     if (value.equals(m)) {

      buffer.append(paddedValue(minutes,padWithZeros,count));

      lastOutputSeconds=false;

    }

 else     if (value.equals(s)) {

      buffer.append(paddedValue(seconds,padWithZeros,count));

      lastOutputSeconds=true;

    }

 else     if (value.equals(S)) {

      if (lastOutputSeconds) {

        final int width=padWithZeros ? Math.max(3,count) : 3;

        buffer.append(paddedValue(milliseconds,true,width));

      }

 else {

        buffer.append(paddedValue(milliseconds,padWithZeros,count));

      }

      lastOutputSeconds=false;

    }

  }

  return buffer.toString();

}

Location: DurationFormatUtils.java

Content: 

/** 

 * Parses a classic date format string into Tokens

 * @param format  the format to parse, not null

 * @return array of Token[]

 */

static Token[] lexx(final String format){

  final ArrayList<Token> list=new ArrayList<>(format.length());

  boolean inLiteral=false;

  StringBuilder buffer=null;

  Token previous=null;

  for (int i=0; i < format.length(); i++) {

    final char ch=format.charAt(i);

    if (inLiteral && ch != '\'') {

      buffer.append(ch);

      continue;

    }

    String value=null;

switch (ch) {

case '\'':

      if (inLiteral) {

        buffer=null;

        inLiteral=false;

      }

 else {

        buffer=new StringBuilder();

        list.add(new Token(buffer));

        inLiteral=true;

      }

    break;

case 'y':

  value=y;

break;

case 'M':

value=M;

break;

case 'd':

value=d;

break;

case 'H':

value=H;

break;

case 'm':

value=m;

break;

case 's':

value=s;

break;

case 'S':

value=S;

break;

default :

if (buffer == null) {

buffer=new StringBuilder();

list.add(new Token(buffer));

}

buffer.append(ch);

}

if (value != null) {

if (previous != null && previous.getValue().equals(value)) {

previous.increment();

}

 else {

final Token token=new Token(value);

list.add(token);

previous=token;

}

buffer=null;

}

}

if (inLiteral) {

throw new IllegalArgumentException("Unmatched quote in format: " + format);

}

return list.toArray(Token.EMPTY_ARRAY);

}

Location: DurationFormatUtils.java

Content: 

/** 

 * <p>Converts a  {@code long} to a {@code String} with optionalzero padding.</p>

 * @param value the value to convert

 * @param padWithZeros whether to pad with zeroes

 * @param count the size to pad to (ignored if {@code padWithZeros} is false)

 * @return the string result

 */

private static String paddedValue(final long value,final boolean padWithZeros,final int count){

  final String longString=Long.toString(value);

  return padWithZeros ? StringUtils.leftPad(longString,count,'0') : longString;

}

