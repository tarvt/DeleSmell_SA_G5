Location: CharSetTest.java

Content: 

@Test public void testConstructor_String_combo(){

  CharSet set;

  CharRange[] array;

  set=CharSet.getInstance("abc");

  array=set.getCharRanges();

  assertEquals(3,array.length);

  assertTrue(ArrayUtils.contains(array,CharRange.is('a')));

  assertTrue(ArrayUtils.contains(array,CharRange.is('b')));

  assertTrue(ArrayUtils.contains(array,CharRange.is('c')));

  set=CharSet.getInstance("a-ce-f");

  array=set.getCharRanges();

  assertEquals(2,array.length);

  assertTrue(ArrayUtils.contains(array,CharRange.isIn('a','c')));

  assertTrue(ArrayUtils.contains(array,CharRange.isIn('e','f')));

  set=CharSet.getInstance("ae-f");

  array=set.getCharRanges();

  assertEquals(2,array.length);

  assertTrue(ArrayUtils.contains(array,CharRange.is('a')));

  assertTrue(ArrayUtils.contains(array,CharRange.isIn('e','f')));

  set=CharSet.getInstance("e-fa");

  array=set.getCharRanges();

  assertEquals(2,array.length);

  assertTrue(ArrayUtils.contains(array,CharRange.is('a')));

  assertTrue(ArrayUtils.contains(array,CharRange.isIn('e','f')));

  set=CharSet.getInstance("ae-fm-pz");

  array=set.getCharRanges();

  assertEquals(4,array.length);

  assertTrue(ArrayUtils.contains(array,CharRange.is('a')));

  assertTrue(ArrayUtils.contains(array,CharRange.isIn('e','f')));

  assertTrue(ArrayUtils.contains(array,CharRange.isIn('m','p')));

  assertTrue(ArrayUtils.contains(array,CharRange.is('z')));

}

Location: CharSetTest.java

Content: 

@Test public void testConstructor_String_comboNegated(){

  CharSet set;

  CharRange[] array;

  set=CharSet.getInstance("^abc");

  array=set.getCharRanges();

  assertEquals(3,array.length);

  assertTrue(ArrayUtils.contains(array,CharRange.isNot('a')));

  assertTrue(ArrayUtils.contains(array,CharRange.is('b')));

  assertTrue(ArrayUtils.contains(array,CharRange.is('c')));

  set=CharSet.getInstance("b^ac");

  array=set.getCharRanges();

  assertEquals(3,array.length);

  assertTrue(ArrayUtils.contains(array,CharRange.is('b')));

  assertTrue(ArrayUtils.contains(array,CharRange.isNot('a')));

  assertTrue(ArrayUtils.contains(array,CharRange.is('c')));

  set=CharSet.getInstance("db^ac");

  array=set.getCharRanges();

  assertEquals(4,array.length);

  assertTrue(ArrayUtils.contains(array,CharRange.is('d')));

  assertTrue(ArrayUtils.contains(array,CharRange.is('b')));

  assertTrue(ArrayUtils.contains(array,CharRange.isNot('a')));

  assertTrue(ArrayUtils.contains(array,CharRange.is('c')));

  set=CharSet.getInstance("^b^a");

  array=set.getCharRanges();

  assertEquals(2,array.length);

  assertTrue(ArrayUtils.contains(array,CharRange.isNot('b')));

  assertTrue(ArrayUtils.contains(array,CharRange.isNot('a')));

  set=CharSet.getInstance("b^a-c^z");

  array=set.getCharRanges();

  assertEquals(3,array.length);

  assertTrue(ArrayUtils.contains(array,CharRange.isNotIn('a','c')));

  assertTrue(ArrayUtils.contains(array,CharRange.isNot('z')));

  assertTrue(ArrayUtils.contains(array,CharRange.is('b')));

}

Location: CharSetTest.java

Content: 

@Test public void testConstructor_String_oddCombinations(){

  CharSet set;

  CharRange[] array;

  set=CharSet.getInstance("a-^c");

  array=set.getCharRanges();

  assertTrue(ArrayUtils.contains(array,CharRange.isIn('a','^')));

  assertTrue(ArrayUtils.contains(array,CharRange.is('c')));

  assertFalse(set.contains('b'));

  assertTrue(set.contains('^'));

  assertTrue(set.contains('_'));

  assertTrue(set.contains('c'));

  set=CharSet.getInstance("^a-^c");

  array=set.getCharRanges();

  assertTrue(ArrayUtils.contains(array,CharRange.isNotIn('a','^')));

  assertTrue(ArrayUtils.contains(array,CharRange.is('c')));

  assertTrue(set.contains('b'));

  assertFalse(set.contains('^'));

  assertFalse(set.contains('_'));

  set=CharSet.getInstance("a- ^-- ");

  array=set.getCharRanges();

  assertTrue(ArrayUtils.contains(array,CharRange.isIn('a',' ')));

  assertTrue(ArrayUtils.contains(array,CharRange.isNotIn('-',' ')));

  assertTrue(set.contains('#'));

  assertTrue(set.contains('^'));

  assertTrue(set.contains('a'));

  assertTrue(set.contains('*'));

  assertTrue(set.contains('A'));

  set=CharSet.getInstance("^-b");

  array=set.getCharRanges();

  assertTrue(ArrayUtils.contains(array,CharRange.isIn('^','b')));

  assertTrue(set.contains('b'));

  assertTrue(set.contains('_'));

  assertFalse(set.contains('A'));

  assertTrue(set.contains('^'));

  set=CharSet.getInstance("b-^");

  array=set.getCharRanges();

  assertTrue(ArrayUtils.contains(array,CharRange.isIn('^','b')));

  assertTrue(set.contains('b'));

  assertTrue(set.contains('^'));

  assertTrue(set.contains('a'));

  assertFalse(set.contains('c'));

}

Location: CharSetTest.java

Content: 

@Test public void testConstructor_String_oddDash(){

  CharSet set;

  CharRange[] array;

  set=CharSet.getInstance("-");

  array=set.getCharRanges();

  assertEquals(1,array.length);

  assertTrue(ArrayUtils.contains(array,CharRange.is('-')));

  set=CharSet.getInstance("--");

  array=set.getCharRanges();

  assertEquals(1,array.length);

  assertTrue(ArrayUtils.contains(array,CharRange.is('-')));

  set=CharSet.getInstance("---");

  array=set.getCharRanges();

  assertEquals(1,array.length);

  assertTrue(ArrayUtils.contains(array,CharRange.is('-')));

  set=CharSet.getInstance("----");

  array=set.getCharRanges();

  assertEquals(1,array.length);

  assertTrue(ArrayUtils.contains(array,CharRange.is('-')));

  set=CharSet.getInstance("-a");

  array=set.getCharRanges();

  assertEquals(2,array.length);

  assertTrue(ArrayUtils.contains(array,CharRange.is('-')));

  assertTrue(ArrayUtils.contains(array,CharRange.is('a')));

  set=CharSet.getInstance("a-");

  array=set.getCharRanges();

  assertEquals(2,array.length);

  assertTrue(ArrayUtils.contains(array,CharRange.is('a')));

  assertTrue(ArrayUtils.contains(array,CharRange.is('-')));

  set=CharSet.getInstance("a--");

  array=set.getCharRanges();

  assertEquals(1,array.length);

  assertTrue(ArrayUtils.contains(array,CharRange.isIn('a','-')));

  set=CharSet.getInstance("--a");

  array=set.getCharRanges();

  assertEquals(1,array.length);

  assertTrue(ArrayUtils.contains(array,CharRange.isIn('-','a')));

}

Location: CharSetTest.java

Content: 

@Test public void testConstructor_String_oddNegate(){

  CharSet set;

  CharRange[] array;

  set=CharSet.getInstance("^");

  array=set.getCharRanges();

  assertEquals(1,array.length);

  assertTrue(ArrayUtils.contains(array,CharRange.is('^')));

  set=CharSet.getInstance("^^");

  array=set.getCharRanges();

  assertEquals(1,array.length);

  assertTrue(ArrayUtils.contains(array,CharRange.isNot('^')));

  set=CharSet.getInstance("^^^");

  array=set.getCharRanges();

  assertEquals(2,array.length);

  assertTrue(ArrayUtils.contains(array,CharRange.isNot('^')));

  assertTrue(ArrayUtils.contains(array,CharRange.is('^')));

  set=CharSet.getInstance("^^^^");

  array=set.getCharRanges();

  assertEquals(1,array.length);

  assertTrue(ArrayUtils.contains(array,CharRange.isNot('^')));

  set=CharSet.getInstance("a^");

  array=set.getCharRanges();

  assertEquals(2,array.length);

  assertTrue(ArrayUtils.contains(array,CharRange.is('a')));

  assertTrue(ArrayUtils.contains(array,CharRange.is('^')));

  set=CharSet.getInstance("^a-");

  array=set.getCharRanges();

  assertEquals(2,array.length);

  assertTrue(ArrayUtils.contains(array,CharRange.isNot('a')));

  assertTrue(ArrayUtils.contains(array,CharRange.is('-')));

  set=CharSet.getInstance("^^-c");

  array=set.getCharRanges();

  assertEquals(1,array.length);

  assertTrue(ArrayUtils.contains(array,CharRange.isNotIn('^','c')));

  set=CharSet.getInstance("^c-^");

  array=set.getCharRanges();

  assertEquals(1,array.length);

  assertTrue(ArrayUtils.contains(array,CharRange.isNotIn('c','^')));

  set=CharSet.getInstance("^c-^d");

  array=set.getCharRanges();

  assertEquals(2,array.length);

  assertTrue(ArrayUtils.contains(array,CharRange.isNotIn('c','^')));

  assertTrue(ArrayUtils.contains(array,CharRange.is('d')));

  set=CharSet.getInstance("^^-");

  array=set.getCharRanges();

  assertEquals(2,array.length);

  assertTrue(ArrayUtils.contains(array,CharRange.isNot('^')));

  assertTrue(ArrayUtils.contains(array,CharRange.is('-')));

}

Location: CharSetTest.java

Content: 

@Test public void testConstructor_String_simple(){

  CharSet set;

  CharRange[] array;

  set=CharSet.getInstance((String)null);

  array=set.getCharRanges();

  assertEquals("[]",set.toString());

  assertEquals(0,array.length);

  set=CharSet.getInstance("");

  array=set.getCharRanges();

  assertEquals("[]",set.toString());

  assertEquals(0,array.length);

  set=CharSet.getInstance("a");

  array=set.getCharRanges();

  assertEquals("[a]",set.toString());

  assertEquals(1,array.length);

  assertEquals("a",array[0].toString());

  set=CharSet.getInstance("^a");

  array=set.getCharRanges();

  assertEquals("[^a]",set.toString());

  assertEquals(1,array.length);

  assertEquals("^a",array[0].toString());

  set=CharSet.getInstance("a-e");

  array=set.getCharRanges();

  assertEquals("[a-e]",set.toString());

  assertEquals(1,array.length);

  assertEquals("a-e",array[0].toString());

  set=CharSet.getInstance("^a-e");

  array=set.getCharRanges();

  assertEquals("[^a-e]",set.toString());

  assertEquals(1,array.length);

  assertEquals("^a-e",array[0].toString());

}

Location: CharSetTest.java

Content: 

@Test public void testGetInstance(){

  assertSame(CharSet.EMPTY,CharSet.getInstance((String)null));

  assertSame(CharSet.EMPTY,CharSet.getInstance(""));

  assertSame(CharSet.ASCII_ALPHA,CharSet.getInstance("a-zA-Z"));

  assertSame(CharSet.ASCII_ALPHA,CharSet.getInstance("A-Za-z"));

  assertSame(CharSet.ASCII_ALPHA_LOWER,CharSet.getInstance("a-z"));

  assertSame(CharSet.ASCII_ALPHA_UPPER,CharSet.getInstance("A-Z"));

  assertSame(CharSet.ASCII_NUMERIC,CharSet.getInstance("0-9"));

}

Location: CharSetTest.java

Content: 

@Test public void testGetInstance_Stringarray(){

  assertNull(CharSet.getInstance((String[])null));

  assertEquals("[]",CharSet.getInstance(new String[0]).toString());

  assertEquals("[]",CharSet.getInstance(new String[]{null}).toString());

  assertEquals("[a-e]",CharSet.getInstance(new String[]{"a-e"}).toString());

}

Location: CharSetTest.java

Content: 

@Test public void testJavadocExamples(){

  assertFalse(CharSet.getInstance("^a-c").contains('a'));

  assertTrue(CharSet.getInstance("^a-c").contains('d'));

  assertTrue(CharSet.getInstance("^^a-c").contains('a'));

  assertFalse(CharSet.getInstance("^^a-c").contains('^'));

  assertTrue(CharSet.getInstance("^a-cd-f").contains('d'));

  assertTrue(CharSet.getInstance("a-c^").contains('^'));

  assertTrue(CharSet.getInstance("^","a-c").contains('^'));

}

Location: CharSetTest.java

Content: 

@Test public void testStatics(){

  CharRange[] array;

  array=CharSet.EMPTY.getCharRanges();

  assertEquals(0,array.length);

  array=CharSet.ASCII_ALPHA.getCharRanges();

  assertEquals(2,array.length);

  assertTrue(ArrayUtils.contains(array,CharRange.isIn('a','z')));

  assertTrue(ArrayUtils.contains(array,CharRange.isIn('A','Z')));

  array=CharSet.ASCII_ALPHA_LOWER.getCharRanges();

  assertEquals(1,array.length);

  assertTrue(ArrayUtils.contains(array,CharRange.isIn('a','z')));

  array=CharSet.ASCII_ALPHA_UPPER.getCharRanges();

  assertEquals(1,array.length);

  assertTrue(ArrayUtils.contains(array,CharRange.isIn('A','Z')));

  array=CharSet.ASCII_NUMERIC.getCharRanges();

  assertEquals(1,array.length);

  assertTrue(ArrayUtils.contains(array,CharRange.isIn('0','9')));

}

