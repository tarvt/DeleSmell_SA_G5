Location: GmtTimeZone.java

Content: 

@Override public int getOffset(final int era,final int year,final int month,final int day,final int dayOfWeek,final int milliseconds){

  return offset;

}

Location: GmtTimeZone.java

Content: 

GmtTimeZone(final boolean negate,final int hours,final int minutes){

  if (hours >= HOURS_PER_DAY) {

    throw new IllegalArgumentException(hours + " hours out of range");

  }

  if (minutes >= MINUTES_PER_HOUR) {

    throw new IllegalArgumentException(minutes + " minutes out of range");

  }

  final int milliseconds=(minutes + (hours * MINUTES_PER_HOUR)) * MILLISECONDS_PER_MINUTE;

  offset=negate ? -milliseconds : milliseconds;

  zoneId=twoDigits(twoDigits(new StringBuilder(9).append(TimeZones.GMT_ID).append(negate ? '-' : '+'),hours).append(':'),minutes).toString();

}

Location: GmtTimeZone.java

Content: 

@Override public boolean inDaylightTime(final Date date){

  return false;

}

Location: GmtTimeZone.java

Content: 

@Override public void setRawOffset(final int offsetMillis){

  throw new UnsupportedOperationException();

}

Location: GmtTimeZone.java

Content: 

private static StringBuilder twoDigits(final StringBuilder sb,final int n){

  return sb.append((char)('0' + (n / 10))).append((char)('0' + (n % 10)));

}

