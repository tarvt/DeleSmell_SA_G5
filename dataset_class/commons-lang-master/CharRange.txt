Location: CharRange.java

Content: 

/** 

 * <p>Constructs a  {@code CharRange} over a set of characters,optionally negating the range.</p> <p>A negated range includes everything except that defined by the start and end characters.</p> <p>If start and end are in the wrong order, they are reversed. Thus  {@code a-e} is the same as {@code e-a}.</p>

 * @param start  first character, inclusive, in this range

 * @param end  last character, inclusive, in this range

 * @param negated  true to express everything except the range

 */

private CharRange(char start,char end,final boolean negated){

  if (start > end) {

    final char temp=start;

    start=end;

    end=temp;

  }

  this.start=start;

  this.end=end;

  this.negated=negated;

}

Location: CharRange.java

Content: 

/** 

 * <p>Are all the characters of the passed in range contained in this range.</p>

 * @param range  the range to check against

 * @return {@code true} if this range entirely contains the input range

 * @throws IllegalArgumentException if {@code null} input

 */

public boolean contains(final CharRange range){

  Validate.notNull(range,"range");

  if (negated) {

    if (range.negated) {

      return start >= range.start && end <= range.end;

    }

    return range.end < start || range.start > end;

  }

  if (range.negated) {

    return start == 0 && end == Character.MAX_VALUE;

  }

  return start <= range.start && end >= range.end;

}

Location: CharRange.java

Content: 

/** 

 * <p>Gets the end character for this character range.</p>

 * @return the end char (inclusive)

 */

public char getEnd(){

  return this.end;

}

Location: CharRange.java

Content: 

/** 

 * <p>Gets the start character for this character range.</p>

 * @return the start char (inclusive)

 */

public char getStart(){

  return this.start;

}

Location: CharRange.java

Content: 

/** 

 * <p>Constructs a  {@code CharRange} over a set of characters.</p><p>If start and end are in the wrong order, they are reversed. Thus  {@code a-e} is the same as {@code e-a}.</p>

 * @param start  first character, inclusive, in this range

 * @param end  last character, inclusive, in this range

 * @return the new CharRange object

 * @since 2.5

 */

public static CharRange isIn(final char start,final char end){

  return new CharRange(start,end,false);

}

Location: CharRange.java

Content: 

/** 

 * <p>Is this  {@code CharRange} negated.</p><p>A negated range includes everything except that defined by the start and end characters.</p>

 * @return {@code true} if negated

 */

public boolean isNegated(){

  return negated;

}

Location: CharRange.java

Content: 

/** 

 * <p>Constructs a negated  {@code CharRange} over a set of characters.</p><p>A negated range includes everything except that defined by the start and end characters.</p> <p>If start and end are in the wrong order, they are reversed. Thus  {@code a-e} is the same as {@code e-a}.</p>

 * @param start  first character, inclusive, in this range

 * @param end  last character, inclusive, in this range

 * @return the new CharRange object

 * @since 2.5

 */

public static CharRange isNotIn(final char start,final char end){

  return new CharRange(start,end,true);

}

Location: CharRange.java

Content: 

/** 

 * <p>Constructs a negated  {@code CharRange} over a single character.</p><p>A negated range includes everything except that defined by the single character.</p>

 * @param ch  only character in this range

 * @return the new CharRange object

 * @since 2.5

 */

public static CharRange isNot(final char ch){

  return new CharRange(ch,ch,true);

}

Location: CharRange.java

Content: 

/** 

 * <p>Constructs a  {@code CharRange} over a single character.</p>

 * @param ch  only character in this range

 * @return the new CharRange object

 * @since 2.5

 */

public static CharRange is(final char ch){

  return new CharRange(ch,ch,false);

}

