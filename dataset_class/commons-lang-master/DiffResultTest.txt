Location: DiffResultTest.java

Content: 

@Test public void testIterator(){

  final SimpleClass lhs=new SimpleClass(true);

  final SimpleClass rhs=new SimpleClass(false);

  final List<Diff<?>> diffs=lhs.diff(rhs).getDiffs();

  final Iterator<Diff<?>> expectedIterator=diffs.iterator();

  final DiffResult list=new DiffResult(lhs,rhs,diffs,SHORT_STYLE);

  final Iterator<Diff<?>> iterator=list.iterator();

  while (iterator.hasNext()) {

    assertTrue(expectedIterator.hasNext());

    assertEquals(expectedIterator.next(),iterator.next());

  }

}

Location: DiffResultTest.java

Content: 

@Test public void testLeftAndRightGetters(){

  final SimpleClass left=new SimpleClass(true);

  final SimpleClass right=new SimpleClass(false);

  final List<Diff<?>> diffs=left.diff(right).getDiffs();

  final DiffResult diffResult=new DiffResult(left,right,diffs,SHORT_STYLE);

  assertEquals(left,diffResult.getLeft());

  assertEquals(right,diffResult.getRight());

}

Location: DiffResultTest.java

Content: 

@Test public void testListIsNonModifiable(){

  final SimpleClass lhs=new SimpleClass(true);

  final SimpleClass rhs=new SimpleClass(false);

  final List<Diff<?>> diffs=lhs.diff(rhs).getDiffs();

  final DiffResult list=new DiffResult(lhs,rhs,diffs,SHORT_STYLE);

  assertEquals(diffs,list.getDiffs());

  assertEquals(1,list.getNumberOfDiffs());

  assertThrows(UnsupportedOperationException.class,() -> list.getDiffs().remove(0));

}

Location: DiffResultTest.java

Content: 

@Test public void testNoDifferencesString(){

  final DiffResult diffResult=new DiffBuilder(SIMPLE_TRUE,SIMPLE_TRUE,SHORT_STYLE).build();

  assertEquals(DiffResult.OBJECTS_SAME_STRING,diffResult.toString());

}

Location: DiffResultTest.java

Content: 

@Test public void testNullLhs(){

  assertThrows(NullPointerException.class,() -> new DiffResult(null,SIMPLE_FALSE,SIMPLE_TRUE.diff(SIMPLE_FALSE).getDiffs(),SHORT_STYLE));

}

Location: DiffResultTest.java

Content: 

@Test public void testNullList(){

  assertThrows(NullPointerException.class,() -> new DiffResult(SIMPLE_TRUE,SIMPLE_FALSE,null,SHORT_STYLE));

}

Location: DiffResultTest.java

Content: 

@Test public void testNullRhs(){

  assertThrows(NullPointerException.class,() -> new DiffResult(SIMPLE_TRUE,null,SIMPLE_TRUE.diff(SIMPLE_FALSE).getDiffs(),SHORT_STYLE));

}

Location: DiffResultTest.java

Content: 

@Test public void testNullStyle(){

  final DiffResult diffResult=new DiffResult(SIMPLE_TRUE,SIMPLE_FALSE,SIMPLE_TRUE.diff(SIMPLE_FALSE).getDiffs(),null);

  assertEquals(ToStringStyle.DEFAULT_STYLE,diffResult.getToStringStyle());

}

Location: DiffResultTest.java

Content: 

@Test public void testToStringOutput(){

  final DiffResult list=new DiffBuilder(new EmptyClass(),new EmptyClass(),ToStringStyle.SHORT_PREFIX_STYLE).append("test",false,true).build();

  assertEquals("DiffResultTest.EmptyClass[test=false] differs from DiffResultTest.EmptyClass[test=true]",list.toString());

}

Location: DiffResultTest.java

Content: 

@Test public void testToStringSpecifyStyleOutput(){

  final DiffResult list=SIMPLE_FALSE.diff(SIMPLE_TRUE);

  assertEquals(list.getToStringStyle(),SHORT_STYLE);

  final String lhsString=new ToStringBuilder(SIMPLE_FALSE,ToStringStyle.MULTI_LINE_STYLE).append(SimpleClass.getFieldName(),SIMPLE_FALSE.booleanField).build();

  final String rhsString=new ToStringBuilder(SIMPLE_TRUE,ToStringStyle.MULTI_LINE_STYLE).append(SimpleClass.getFieldName(),SIMPLE_TRUE.booleanField).build();

  final String expectedOutput=String.format("%s differs from %s",lhsString,rhsString);

  assertEquals(expectedOutput,list.toString(ToStringStyle.MULTI_LINE_STYLE));

}

