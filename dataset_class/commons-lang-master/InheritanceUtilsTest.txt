Location: InheritanceUtilsTest.java

Content: 

@Test public void testDistanceDisjoint(){

  assertEquals(-1,InheritanceUtils.distance(Boolean.class,String.class));

}

Location: InheritanceUtilsTest.java

Content: 

@Test public void testDistanceEqual(){

  assertEquals(0,InheritanceUtils.distance(AnotherChild.class,AnotherChild.class));

}

Location: InheritanceUtilsTest.java

Content: 

@Test public void testDistanceEqualObject(){

  assertEquals(0,InheritanceUtils.distance(Object.class,Object.class));

}

Location: InheritanceUtilsTest.java

Content: 

@Test public void testDistanceGreaterThanZero(){

  assertEquals(1,InheritanceUtils.distance(AnotherChild.class,AnotherParent.class));

  assertEquals(1,InheritanceUtils.distance(Grandchild.class,AnotherChild.class));

  assertEquals(2,InheritanceUtils.distance(Grandchild.class,AnotherParent.class));

  assertEquals(3,InheritanceUtils.distance(Grandchild.class,Object.class));

}

Location: InheritanceUtilsTest.java

Content: 

@Test public void testDistanceNullChild(){

  assertEquals(-1,InheritanceUtils.distance(null,Object.class));

}

Location: InheritanceUtilsTest.java

Content: 

@Test public void testDistanceNullParent(){

  assertEquals(-1,InheritanceUtils.distance(Object.class,null));

}

Location: InheritanceUtilsTest.java

Content: 

@Test public void testDistanceNullParentNullChild(){

  assertEquals(-1,InheritanceUtils.distance(null,null));

}

Location: InheritanceUtilsTest.java

Content: 

@Test public void testDistanceReverseParentChild(){

  assertEquals(-1,InheritanceUtils.distance(Object.class,Grandchild.class));

}

