Location: StopWatchTest.java

Content: 

/** 

 * <p> Creates a suspended StopWatch object which appears to have elapsed for the requested amount of time in nanoseconds. <p> <p> <pre> // Create a mock StopWatch with a time of 2:59:01.999 final long nanos = TimeUnit.HOURS.toNanos(2) + TimeUnit.MINUTES.toNanos(59) + TimeUnit.SECONDS.toNanos(1) + TimeUnit.MILLISECONDS.toNanos(999); final StopWatch watch = createMockStopWatch(nanos); </pre>

 * @param nanos Time in nanoseconds to have elapsed on the stop watch

 * @return StopWatch in a suspended state with the elapsed time

 */

private StopWatch createMockStopWatch(final long nanos){

  final StopWatch watch=StopWatch.createStarted();

  watch.suspend();

  try {

    final long currentNanos=System.nanoTime();

    FieldUtils.writeField(watch,"startTimeNanos",currentNanos - nanos,true);

    FieldUtils.writeField(watch,"stopTimeNanos",currentNanos,true);

  }

 catch (  final IllegalAccessException e) {

    return null;

  }

  return watch;

}

Location: StopWatchTest.java

Content: 

private void sleepQuietly(final Duration duration) throws InterruptedException {

  ThreadUtils.sleep(duration);

}

Location: StopWatchTest.java

Content: 

@Test public void testBadStates(){

  final StopWatch watch=new StopWatch();

  assertThrows(IllegalStateException.class,watch::stop,"Calling stop on an unstarted StopWatch should throw an exception. ");

  assertThrows(IllegalStateException.class,watch::suspend,"Calling suspend on an unstarted StopWatch should throw an exception. ");

  assertThrows(IllegalStateException.class,watch::split,"Calling split on a non-running StopWatch should throw an exception. ");

  assertThrows(IllegalStateException.class,watch::unsplit,"Calling unsplit on an unsplit StopWatch should throw an exception. ");

  assertThrows(IllegalStateException.class,watch::resume,"Calling resume on an unsuspended StopWatch should throw an exception. ");

  watch.start();

  assertThrows(IllegalStateException.class,watch::start,"Calling start on a started StopWatch should throw an exception. ");

  assertThrows(IllegalStateException.class,watch::unsplit,"Calling unsplit on an unsplit StopWatch should throw an exception. ");

  assertThrows(IllegalStateException.class,watch::getSplitTime,"Calling getSplitTime on an unsplit StopWatch should throw an exception. ");

  assertThrows(IllegalStateException.class,watch::resume,"Calling resume on an unsuspended StopWatch should throw an exception. ");

  watch.stop();

  assertThrows(IllegalStateException.class,watch::start,"Calling start on a stopped StopWatch should throw an exception as it needs to be reset. ");

}

Location: StopWatchTest.java

Content: 

@Test public void testBooleanStates(){

  final StopWatch watch=new StopWatch();

  assertFalse(watch.isStarted());

  assertFalse(watch.isSuspended());

  assertTrue(watch.isStopped());

  watch.start();

  assertTrue(watch.isStarted());

  assertFalse(watch.isSuspended());

  assertFalse(watch.isStopped());

  watch.suspend();

  assertTrue(watch.isStarted());

  assertTrue(watch.isSuspended());

  assertFalse(watch.isStopped());

  watch.stop();

  assertFalse(watch.isStarted());

  assertFalse(watch.isSuspended());

  assertTrue(watch.isStopped());

}

Location: StopWatchTest.java

Content: 

@Test public void testFormatSplitTime() throws InterruptedException {

  final StopWatch watch=StopWatch.createStarted();

  ThreadUtils.sleepQuietly(MIN_SLEEP_MILLISECONDS);

  watch.split();

  final String formatSplitTime=watch.formatSplitTime();

  assertNotEquals(ZERO_TIME_ELAPSED,formatSplitTime);

  assertTrue(formatSplitTime.startsWith(ZERO_HOURS_PREFIX));

}

Location: StopWatchTest.java

Content: 

@Test public void testFormatSplitTimeWithMessage() throws InterruptedException {

  final StopWatch watch=new StopWatch(MESSAGE);

  watch.start();

  ThreadUtils.sleepQuietly(MIN_SLEEP_MILLISECONDS);

  watch.split();

  final String formatSplitTime=watch.formatSplitTime();

  assertFalse(formatSplitTime.startsWith(MESSAGE),formatSplitTime);

  assertTrue(formatSplitTime.startsWith(ZERO_HOURS_PREFIX));

}

Location: StopWatchTest.java

Content: 

@Test public void testFormatTime(){

  final StopWatch watch=StopWatch.create();

  final String formatTime=watch.formatTime();

  assertEquals(ZERO_TIME_ELAPSED,formatTime);

  assertTrue(formatTime.startsWith(ZERO_HOURS_PREFIX));

}

Location: StopWatchTest.java

Content: 

@Test public void testFormatTimeWithMessage(){

  final StopWatch watch=new StopWatch(MESSAGE);

  final String formatTime=watch.formatTime();

  assertFalse(formatTime.startsWith(MESSAGE),formatTime);

}

Location: StopWatchTest.java

Content: 

@Test public void testGetStartTime(){

  final long beforeStopWatchMillis=System.currentTimeMillis();

  final StopWatch watch=new StopWatch();

  assertThrows(IllegalStateException.class,watch::getStartTime,"Calling getStartTime on an unstarted StopWatch should throw an exception");

  watch.start();

  watch.getStartTime();

  assertTrue(watch.getStartTime() >= beforeStopWatchMillis);

  watch.reset();

  assertThrows(IllegalStateException.class,watch::getStartTime,"Calling getStartTime on a reset, but unstarted StopWatch should throw an exception");

}

Location: StopWatchTest.java

Content: 

@Test public void testLang315() throws InterruptedException {

  final StopWatch watch=StopWatch.createStarted();

  sleepQuietly(MILLIS_200);

  watch.suspend();

  final long suspendTime=watch.getTime();

  sleepQuietly(MILLIS_200);

  watch.stop();

  final long totalTime=watch.getTime();

  assertEquals(suspendTime,totalTime);

}

Location: StopWatchTest.java

Content: 

@Test public void testMessage(){

  assertNull(StopWatch.create().getMessage());

  final StopWatch stopWatch=new StopWatch(MESSAGE);

  assertEquals(MESSAGE,stopWatch.getMessage());

  assertTrue(stopWatch.toString().startsWith(MESSAGE));

  stopWatch.start();

  stopWatch.split();

  assertTrue(stopWatch.toSplitString().startsWith(MESSAGE));

}

Location: StopWatchTest.java

Content: 

@Test public void testStopTimeSimple() throws InterruptedException {

  final StopWatch watch=StopWatch.createStarted();

  final long testStartMillis=System.currentTimeMillis();

  sleepQuietly(MILLIS_550);

  watch.stop();

  final long testEndMillis=System.currentTimeMillis();

  final long stopTime=watch.getStopTime();

  assertEquals(stopTime,watch.getStopTime());

  assertTrue(stopTime >= testStartMillis);

  assertTrue(stopTime <= testEndMillis);

}

Location: StopWatchTest.java

Content: 

@Test public void testStopWatchGetWithTimeUnit(){

  final StopWatch watch=createMockStopWatch(TimeUnit.HOURS.toNanos(2) + TimeUnit.MINUTES.toNanos(59) + TimeUnit.SECONDS.toNanos(1)+ TimeUnit.MILLISECONDS.toNanos(999));

  assertEquals(2L,watch.getTime(TimeUnit.HOURS));

  assertEquals(179L,watch.getTime(TimeUnit.MINUTES));

  assertEquals(10741L,watch.getTime(TimeUnit.SECONDS));

  assertEquals(10741999L,watch.getTime(TimeUnit.MILLISECONDS));

}

Location: StopWatchTest.java

Content: 

@Test public void testStopWatchSimple() throws InterruptedException {

  final StopWatch watch=StopWatch.createStarted();

  sleepQuietly(MILLIS_550);

  watch.stop();

  final long time=watch.getTime();

  assertEquals(time,watch.getTime());

  assertTrue(time >= 500);

  assertTrue(time < 700);

  watch.reset();

  assertEquals(0,watch.getTime());

}

Location: StopWatchTest.java

Content: 

@Test public void testStopWatchSimpleGet() throws InterruptedException {

  final StopWatch watch=new StopWatch();

  assertEquals(0,watch.getTime());

  assertEquals(ZERO_TIME_ELAPSED,watch.toString());

  watch.start();

  sleepQuietly(MILLIS_550);

  assertTrue(watch.getTime() < 2000);

}

Location: StopWatchTest.java

Content: 

@Test public void testStopWatchSplit() throws InterruptedException {

  final StopWatch watch=StopWatch.createStarted();

  sleepQuietly(MILLIS_550);

  watch.split();

  final long splitTime=watch.getSplitTime();

  final String splitStr=watch.toSplitString();

  sleepQuietly(MILLIS_550);

  watch.unsplit();

  sleepQuietly(MILLIS_550);

  watch.stop();

  final long totalTime=watch.getTime();

  assertEquals(splitStr.length(),12,"Formatted split string not the correct length");

  assertTrue(splitTime >= 500);

  assertTrue(splitTime < 700);

  assertTrue(totalTime >= 1500);

  assertTrue(totalTime < 1900);

}

Location: StopWatchTest.java

Content: 

@Test public void testStopWatchStatic(){

  final StopWatch watch=StopWatch.createStarted();

  assertTrue(watch.isStarted());

}

Location: StopWatchTest.java

Content: 

@Test public void testStopWatchSuspend() throws InterruptedException {

  final StopWatch watch=StopWatch.createStarted();

  final long testStartMillis=System.currentTimeMillis();

  sleepQuietly(MILLIS_550);

  watch.suspend();

  final long testSuspendMillis=System.currentTimeMillis();

  final long suspendTime=watch.getTime();

  final long stopTime=watch.getStopTime();

  assertTrue(testStartMillis <= stopTime);

  assertTrue(testSuspendMillis <= stopTime);

  sleepQuietly(MILLIS_550);

  watch.resume();

  sleepQuietly(MILLIS_550);

  watch.stop();

  final long totalTime=watch.getTime();

  assertTrue(suspendTime >= 500);

  assertTrue(suspendTime < 700);

  assertTrue(totalTime >= 1000);

  assertTrue(totalTime < 1300);

}

Location: StopWatchTest.java

Content: 

@Test public void testToSplitString() throws InterruptedException {

  final StopWatch watch=StopWatch.createStarted();

  sleepQuietly(MILLIS_550);

  watch.split();

  final String splitStr=watch.toSplitString();

  assertEquals(splitStr.length(),12,"Formatted split string not the correct length");

}

Location: StopWatchTest.java

Content: 

@Test public void testToSplitStringWithMessage() throws InterruptedException {

  final StopWatch watch=new StopWatch(MESSAGE);

  watch.start();

  sleepQuietly(MILLIS_550);

  watch.split();

  final String splitStr=watch.toSplitString();

  assertEquals(splitStr.length(),12 + MESSAGE.length() + 1,"Formatted split string not the correct length");

}

Location: StopWatchTest.java

Content: 

@Test public void testToStringWithMessage() throws InterruptedException {

  assertTrue(new StopWatch(MESSAGE).toString().startsWith(MESSAGE));

  final StopWatch watch=new StopWatch(MESSAGE);

  watch.start();

  sleepQuietly(MILLIS_550);

  watch.split();

  final String splitStr=watch.toString();

  assertEquals(splitStr.length(),12 + MESSAGE.length() + 1,"Formatted split string not the correct length");

}

