Location: ReflectionDiffBuilder.java

Content: 

private void appendFields(final Class<?> clazz){

  for (  final Field field : FieldUtils.getAllFields(clazz)) {

    if (accept(field)) {

      try {

        diffBuilder.append(field.getName(),readField(field,left,true),readField(field,right,true));

      }

 catch (      final IllegalAccessException ex) {

        throw new InternalError("Unexpected IllegalAccessException: " + ex.getMessage());

      }

    }

  }

}

Location: ReflectionDiffBuilder.java

Content: 

/** 

 * <p> Constructs a builder for the specified objects with the specified style. </p> <p> If  {@code lhs == rhs} or {@code lhs.equals(rhs)} then the builder willnot evaluate any calls to  {@code append(...)} and will return an empty{@link DiffResult} when {@link #build()} is executed.</p>

 * @param lhs {@code this} object

 * @param rhs the object to diff against

 * @param style the style will use when outputting the objects,  {@code null}uses the default

 * @throws IllegalArgumentException if  {@code lhs} or {@code rhs} is {@code null}

 */

public ReflectionDiffBuilder(final T lhs,final T rhs,final ToStringStyle style){

  this.left=lhs;

  this.right=rhs;

  diffBuilder=new DiffBuilder<>(lhs,rhs,style);

}

