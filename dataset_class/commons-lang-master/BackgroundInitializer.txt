Location: BackgroundInitializer.java

Content: 

/** 

 * Creates a new instance of  {@code BackgroundInitializer}. No external {@code ExecutorService} is used.

 */

protected BackgroundInitializer(){

  this(null);

}

Location: BackgroundInitializer.java

Content: 

/** 

 * Creates a new instance of  {@code BackgroundInitializer} and initializesit with the given  {@code ExecutorService}. If the  {@code ExecutorService}is not null, the background task for initializing this object will be scheduled at this service. Otherwise a new temporary  {@code ExecutorService} is created.

 * @param exec an external {@code ExecutorService} to be used for taskexecution

 */

protected BackgroundInitializer(final ExecutorService exec){

  setExternalExecutor(exec);

}

Location: BackgroundInitializer.java

Content: 

/** 

 * Creates the  {@code ExecutorService} to be used. This method is called ifno  {@code ExecutorService} was provided at construction time.

 * @return the {@code ExecutorService} to be used

 */

private ExecutorService createExecutor(){

  return Executors.newFixedThreadPool(getTaskCount());

}

Location: BackgroundInitializer.java

Content: 

/** 

 * Creates a task for the background initialization. The  {@code Callable}object returned by this method is passed to the  {@code ExecutorService}. This implementation returns a task that invokes the  {@link #initialize()}method. If a temporary  {@code ExecutorService} is used, it is destroyedat the end of the task.

 * @param execDestroy the {@code ExecutorService} to be destroyed by thetask

 * @return a task for the background initialization

 */

private Callable<T> createTask(final ExecutorService execDestroy){

  return new InitializationTask(execDestroy);

}

Location: BackgroundInitializer.java

Content: 

/** 

 * Returns the  {@code ExecutorService} that is actually used for executingthe background task. This method can be called after  {@link #start()}(before  {@code start()} it returns <b>null</b>). If an external executorwas set, this is also the active executor. Otherwise this method returns the temporary executor that was created by this object.

 * @return the {@code ExecutorService} for executing the background task

 */

protected final synchronized ExecutorService getActiveExecutor(){

  return executor;

}

Location: BackgroundInitializer.java

Content: 

/** 

 * Returns the external  {@code ExecutorService} to be used by this class.

 * @return the {@code ExecutorService}

 */

public final synchronized ExecutorService getExternalExecutor(){

  return externalExecutor;

}

Location: BackgroundInitializer.java

Content: 

/** 

 * Sets an  {@code ExecutorService} to be used by this class. The {@code ExecutorService} passed to this method is used for executing thebackground task. Thus it is possible to re-use an already existing {@code ExecutorService} or to use a specially configured one. If no{@code ExecutorService} is set, this instance creates a temporary one anddestroys it after background initialization is complete. Note that this method must be called before  {@link #start()}; otherwise an exception is thrown.

 * @param externalExecutor the {@code ExecutorService} to be used

 * @throws IllegalStateException if this initializer has already beenstarted

 */

public final synchronized void setExternalExecutor(final ExecutorService externalExecutor){

  if (isStarted()) {

    throw new IllegalStateException("Cannot set ExecutorService after start()!");

  }

  this.externalExecutor=externalExecutor;

}

