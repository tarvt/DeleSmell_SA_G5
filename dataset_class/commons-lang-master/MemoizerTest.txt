Location: MemoizerTest.java

Content: 

@BeforeEach public void setUpComputableMock(){

  computable=EasyMock.mock(Computable.class);

}

Location: MemoizerTest.java

Content: 

@Test public void testDefaultBehaviourNotToRecalculateExecutionExceptions() throws Exception {

  final Integer input=1;

  final Memoizer<Integer,Integer> memoizer=new Memoizer<>(computable);

  final InterruptedException interruptedException=new InterruptedException();

  expect(computable.compute(input)).andThrow(interruptedException);

  replay(computable);

  assertThrows(Throwable.class,() -> memoizer.compute(input));

  assertThrows(IllegalStateException.class,() -> memoizer.compute(input));

}

Location: MemoizerTest.java

Content: 

@Test public void testDoesNotRecalculateWhenSetToFalse() throws Exception {

  final Integer input=1;

  final Memoizer<Integer,Integer> memoizer=new Memoizer<>(computable,false);

  final InterruptedException interruptedException=new InterruptedException();

  expect(computable.compute(input)).andThrow(interruptedException);

  replay(computable);

  assertThrows(Throwable.class,() -> memoizer.compute(input));

  assertThrows(IllegalStateException.class,() -> memoizer.compute(input));

}

Location: MemoizerTest.java

Content: 

@Test public void testDoesRecalculateWhenSetToTrue() throws Exception {

  final Integer input=1;

  final Integer answer=3;

  final Memoizer<Integer,Integer> memoizer=new Memoizer<>(computable,true);

  final InterruptedException interruptedException=new InterruptedException();

  expect(computable.compute(input)).andThrow(interruptedException).andReturn(answer);

  replay(computable);

  assertThrows(Throwable.class,() -> memoizer.compute(input));

  assertEquals(answer,memoizer.compute(input));

}

Location: MemoizerTest.java

Content: 

@Test public void testOnlyCallComputableOnceIfDoesNotThrowException() throws Exception {

  final Integer input=1;

  final Memoizer<Integer,Integer> memoizer=new Memoizer<>(computable);

  expect(computable.compute(input)).andReturn(input);

  replay(computable);

  assertEquals(input,memoizer.compute(input),"Should call computable first time");

  assertEquals(input,memoizer.compute(input),"Should not call the computable the second time");

}

Location: MemoizerTest.java

Content: 

@Test public void testWhenComputableThrowsError() throws Exception {

  final Integer input=1;

  final Memoizer<Integer,Integer> memoizer=new Memoizer<>(computable);

  final Error error=new Error();

  expect(computable.compute(input)).andThrow(error);

  replay(computable);

  assertThrows(Error.class,() -> memoizer.compute(input));

}

Location: MemoizerTest.java

Content: 

@Test public void testWhenComputableThrowsRuntimeException() throws Exception {

  final Integer input=1;

  final Memoizer<Integer,Integer> memoizer=new Memoizer<>(computable);

  final RuntimeException runtimeException=new RuntimeException("Some runtime exception");

  expect(computable.compute(input)).andThrow(runtimeException);

  replay(computable);

  assertThrows(RuntimeException.class,() -> memoizer.compute(input));

}

