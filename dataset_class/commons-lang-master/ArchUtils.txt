Location: ArchUtils.java

Content: 

/** 

 * Adds the given  {@link Processor} with the given keys to the map.

 * @param keys The keys.

 * @param processor The {@link Processor} to add.

 * @throws IllegalStateException If the key already exists.

 */

private static void addProcessors(final Processor processor,final String... keys){

  Streams.of(keys).forEach(e -> addProcessor(e,processor));

}

Location: ArchUtils.java

Content: 

/** 

 * Adds the given  {@link Processor} with the given key {@link String} to the map.

 * @param key The key as {@link String}.

 * @param processor The {@link Processor} to add.

 * @throws IllegalStateException If the key already exists.

 */

private static void addProcessor(final String key,final Processor processor){

  if (ARCH_TO_PROCESSOR.containsKey(key)) {

    throw new IllegalStateException("Key " + key + " already exists in processor map");

  }

  ARCH_TO_PROCESSOR.put(key,processor);

}

Location: ArchUtils.java

Content: 

/** 

 * Returns a  {@link Processor} object of the current JVM.<p> Important: The os.arch System Property returns the architecture used by the JVM not of the operating system. </p>

 * @return A {@link Processor} when supported, else {@code null}.

 */

public static Processor getProcessor(){

  return getProcessor(SystemUtils.OS_ARCH);

}

Location: ArchUtils.java

Content: 

/** 

 * Returns a  {@link Processor} object the given value {@link String}. The  {@link String} must belike a value returned by the os.arch System Property.

 * @param value A {@link String} like a value returned by the os.arch System Property.

 * @return A {@link Processor} when it exists, else {@code null}.

 */

public static Processor getProcessor(final String value){

  return ARCH_TO_PROCESSOR.get(value);

}

Location: ArchUtils.java

Content: 

private static void init_IA64_32Bit(){

  final Processor processor=new Processor(Processor.Arch.BIT_32,Processor.Type.IA_64);

  addProcessors(processor,"ia64_32","ia64n");

}

Location: ArchUtils.java

Content: 

private static void init_IA64_64Bit(){

  final Processor processor=new Processor(Processor.Arch.BIT_64,Processor.Type.IA_64);

  addProcessors(processor,"ia64","ia64w");

}

Location: ArchUtils.java

Content: 

private static void init_PPC_32Bit(){

  final Processor processor=new Processor(Processor.Arch.BIT_32,Processor.Type.PPC);

  addProcessors(processor,"ppc","power","powerpc","power_pc","power_rs");

}

Location: ArchUtils.java

Content: 

private static void init_PPC_64Bit(){

  final Processor processor=new Processor(Processor.Arch.BIT_64,Processor.Type.PPC);

  addProcessors(processor,"ppc64","power64","powerpc64","power_pc64","power_rs64");

}

Location: ArchUtils.java

Content: 

private static void init_X86_32Bit(){

  final Processor processor=new Processor(Processor.Arch.BIT_32,Processor.Type.X86);

  addProcessors(processor,"x86","i386","i486","i586","i686","pentium");

}

Location: ArchUtils.java

Content: 

private static void init_X86_64Bit(){

  final Processor processor=new Processor(Processor.Arch.BIT_64,Processor.Type.X86);

  addProcessors(processor,"x86_64","amd64","em64t","universal");

}

