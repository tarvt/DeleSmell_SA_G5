Location: SerializationUtilsTest.java

Content: 

private void readObject(final ObjectInputStream in) throws ClassNotFoundException {

  throw new ClassNotFoundException(SerializationUtilsTest.CLASS_NOT_FOUND_MESSAGE);

}

Location: SerializationUtilsTest.java

Content: 

@Test public void testClone(){

  final Object test=SerializationUtils.clone(iMap);

  assertNotNull(test);

  assertTrue(test instanceof HashMap<?,?>);

  assertNotSame(test,iMap);

  final HashMap<?,?> testMap=(HashMap<?,?>)test;

  assertEquals(iString,testMap.get("FOO"));

  assertNotSame(iString,testMap.get("FOO"));

  assertEquals(iInteger,testMap.get("BAR"));

  assertNotSame(iInteger,testMap.get("BAR"));

  assertEquals(iMap,testMap);

}

Location: SerializationUtilsTest.java

Content: 

@Test public void testCloneUnserializable(){

  iMap.put(new Object(),new Object());

  assertThrows(SerializationException.class,() -> SerializationUtils.clone(iMap));

}

Location: SerializationUtilsTest.java

Content: 

@Test public void testDeserializeBytes() throws Exception {

  final ByteArrayOutputStream streamReal=new ByteArrayOutputStream();

  final ObjectOutputStream oos=new ObjectOutputStream(streamReal);

  oos.writeObject(iMap);

  oos.flush();

  oos.close();

  final Object test=SerializationUtils.deserialize(streamReal.toByteArray());

  assertNotNull(test);

  assertTrue(test instanceof HashMap<?,?>);

  assertNotSame(test,iMap);

  final HashMap<?,?> testMap=(HashMap<?,?>)test;

  assertEquals(iString,testMap.get("FOO"));

  assertNotSame(iString,testMap.get("FOO"));

  assertEquals(iInteger,testMap.get("BAR"));

  assertNotSame(iInteger,testMap.get("BAR"));

  assertEquals(iMap,testMap);

}

Location: SerializationUtilsTest.java

Content: 

@Test public void testDeserializeBytesBadStream(){

  assertThrows(SerializationException.class,() -> SerializationUtils.deserialize(new byte[0]));

}

Location: SerializationUtilsTest.java

Content: 

@Test public void testDeserializeBytesNull(){

  assertThrows(NullPointerException.class,() -> SerializationUtils.deserialize((byte[])null));

}

Location: SerializationUtilsTest.java

Content: 

@Test public void testDeserializeBytesOfNull() throws Exception {

  final ByteArrayOutputStream streamReal=new ByteArrayOutputStream();

  final ObjectOutputStream oos=new ObjectOutputStream(streamReal);

  oos.writeObject(null);

  oos.flush();

  oos.close();

  final Object test=SerializationUtils.deserialize(streamReal.toByteArray());

  assertNull(test);

}

Location: SerializationUtilsTest.java

Content: 

@Test public void testDeserializeClassCastException(){

  final String value="Hello";

  final byte[] serialized=SerializationUtils.serialize(value);

  assertEquals(value,SerializationUtils.deserialize(serialized));

  assertThrows(ClassCastException.class,() -> {

    @SuppressWarnings("unused") final Integer i=SerializationUtils.deserialize(serialized);

  }

);

}

Location: SerializationUtilsTest.java

Content: 

@Test public void testDeserializeStream() throws Exception {

  final ByteArrayOutputStream streamReal=new ByteArrayOutputStream();

  final ObjectOutputStream oos=new ObjectOutputStream(streamReal);

  oos.writeObject(iMap);

  oos.flush();

  oos.close();

  final ByteArrayInputStream inTest=new ByteArrayInputStream(streamReal.toByteArray());

  final Object test=SerializationUtils.deserialize(inTest);

  assertNotNull(test);

  assertTrue(test instanceof HashMap<?,?>);

  assertNotSame(test,iMap);

  final HashMap<?,?> testMap=(HashMap<?,?>)test;

  assertEquals(iString,testMap.get("FOO"));

  assertNotSame(iString,testMap.get("FOO"));

  assertEquals(iInteger,testMap.get("BAR"));

  assertNotSame(iInteger,testMap.get("BAR"));

  assertEquals(iMap,testMap);

}

Location: SerializationUtilsTest.java

Content: 

@Test public void testDeserializeStreamBadStream(){

  assertThrows(SerializationException.class,() -> SerializationUtils.deserialize(new ByteArrayInputStream(new byte[0])));

}

Location: SerializationUtilsTest.java

Content: 

@Test public void testDeserializeStreamClassNotFound() throws Exception {

  final ByteArrayOutputStream streamReal=new ByteArrayOutputStream();

  final ObjectOutputStream oos=new ObjectOutputStream(streamReal);

  oos.writeObject(new ClassNotFoundSerialization());

  oos.flush();

  oos.close();

  final ByteArrayInputStream inTest=new ByteArrayInputStream(streamReal.toByteArray());

  final SerializationException se=assertThrows(SerializationException.class,() -> SerializationUtils.deserialize(inTest));

  assertEquals("java.lang.ClassNotFoundException: " + CLASS_NOT_FOUND_MESSAGE,se.getMessage());

}

Location: SerializationUtilsTest.java

Content: 

@Test public void testDeserializeStreamNull(){

  assertThrows(NullPointerException.class,() -> SerializationUtils.deserialize((InputStream)null));

}

Location: SerializationUtilsTest.java

Content: 

@Test public void testDeserializeStreamOfNull() throws Exception {

  final ByteArrayOutputStream streamReal=new ByteArrayOutputStream();

  final ObjectOutputStream oos=new ObjectOutputStream(streamReal);

  oos.writeObject(null);

  oos.flush();

  oos.close();

  final ByteArrayInputStream inTest=new ByteArrayInputStream(streamReal.toByteArray());

  final Object test=SerializationUtils.deserialize(inTest);

  assertNull(test);

}

Location: SerializationUtilsTest.java

Content: 

@Test public void testException(){

  SerializationException serEx;

  final Exception ex=new Exception();

  serEx=new SerializationException();

  assertSame(null,serEx.getMessage());

  assertSame(null,serEx.getCause());

  serEx=new SerializationException("Message");

  assertSame("Message",serEx.getMessage());

  assertSame(null,serEx.getCause());

  serEx=new SerializationException(ex);

  assertEquals("java.lang.Exception",serEx.getMessage());

  assertSame(ex,serEx.getCause());

  serEx=new SerializationException("Message",ex);

  assertSame("Message",serEx.getMessage());

  assertSame(ex,serEx.getCause());

}

Location: SerializationUtilsTest.java

Content: 

@Test public void testPrimitiveTypeClassSerialization(){

  final Class<?>[] primitiveTypes={byte.class,short.class,int.class,long.class,float.class,double.class,boolean.class,char.class,void.class};

  for (  final Class<?> primitiveType : primitiveTypes) {

    final Class<?> clone=SerializationUtils.clone(primitiveType);

    assertEquals(primitiveType,clone);

  }

}

Location: SerializationUtilsTest.java

Content: 

@Test public void testRoundtrip(){

  final HashMap<Object,Object> newMap=SerializationUtils.roundtrip(iMap);

  assertEquals(iMap,newMap);

}

Location: SerializationUtilsTest.java

Content: 

@Test public void testSerializeBytes() throws Exception {

  final byte[] testBytes=SerializationUtils.serialize(iMap);

  final ByteArrayOutputStream streamReal=new ByteArrayOutputStream();

  final ObjectOutputStream oos=new ObjectOutputStream(streamReal);

  oos.writeObject(iMap);

  oos.flush();

  oos.close();

  final byte[] realBytes=streamReal.toByteArray();

  assertEquals(testBytes.length,realBytes.length);

  assertArrayEquals(realBytes,testBytes);

}

Location: SerializationUtilsTest.java

Content: 

@Test public void testSerializeBytesNull() throws Exception {

  final byte[] testBytes=SerializationUtils.serialize(null);

  final ByteArrayOutputStream streamReal=new ByteArrayOutputStream();

  final ObjectOutputStream oos=new ObjectOutputStream(streamReal);

  oos.writeObject(null);

  oos.flush();

  oos.close();

  final byte[] realBytes=streamReal.toByteArray();

  assertEquals(testBytes.length,realBytes.length);

  assertArrayEquals(realBytes,testBytes);

}

Location: SerializationUtilsTest.java

Content: 

@Test public void testSerializeBytesUnserializable(){

  iMap.put(new Object(),new Object());

  assertThrows(SerializationException.class,() -> SerializationUtils.serialize(iMap));

}

Location: SerializationUtilsTest.java

Content: 

@Test public void testSerializeIOException(){

  final OutputStream streamTest=new OutputStream(){

    @Override public void write(    final int arg0) throws IOException {

      throw new IOException(SERIALIZE_IO_EXCEPTION_MESSAGE);

    }

  }

;

  final SerializationException e=assertThrows(SerializationException.class,() -> SerializationUtils.serialize(iMap,streamTest));

  assertEquals("java.io.IOException: " + SERIALIZE_IO_EXCEPTION_MESSAGE,e.getMessage());

}

Location: SerializationUtilsTest.java

Content: 

@Test public void testSerializeStream() throws Exception {

  final ByteArrayOutputStream streamTest=new ByteArrayOutputStream();

  SerializationUtils.serialize(iMap,streamTest);

  final ByteArrayOutputStream streamReal=new ByteArrayOutputStream();

  final ObjectOutputStream oos=new ObjectOutputStream(streamReal);

  oos.writeObject(iMap);

  oos.flush();

  oos.close();

  final byte[] testBytes=streamTest.toByteArray();

  final byte[] realBytes=streamReal.toByteArray();

  assertEquals(testBytes.length,realBytes.length);

  assertArrayEquals(realBytes,testBytes);

}

Location: SerializationUtilsTest.java

Content: 

@Test public void testSerializeStreamNullNull(){

  assertThrows(NullPointerException.class,() -> SerializationUtils.serialize(null,null));

}

Location: SerializationUtilsTest.java

Content: 

@Test public void testSerializeStreamNullObj() throws Exception {

  final ByteArrayOutputStream streamTest=new ByteArrayOutputStream();

  SerializationUtils.serialize(null,streamTest);

  final ByteArrayOutputStream streamReal=new ByteArrayOutputStream();

  final ObjectOutputStream oos=new ObjectOutputStream(streamReal);

  oos.writeObject(null);

  oos.flush();

  oos.close();

  final byte[] testBytes=streamTest.toByteArray();

  final byte[] realBytes=streamReal.toByteArray();

  assertEquals(testBytes.length,realBytes.length);

  assertArrayEquals(realBytes,testBytes);

}

Location: SerializationUtilsTest.java

Content: 

@Test public void testSerializeStreamObjNull(){

  assertThrows(NullPointerException.class,() -> SerializationUtils.serialize(iMap,null));

}

Location: SerializationUtilsTest.java

Content: 

@Test public void testSerializeStreamUnserializable(){

  final ByteArrayOutputStream streamTest=new ByteArrayOutputStream();

  iMap.put(new Object(),new Object());

  assertThrows(SerializationException.class,() -> SerializationUtils.serialize(iMap,streamTest));

}

