Location: MethodUtils.java

Content: 

/** 

 * <p>Returns the aggregate number of inheritance hops between assignable argument class types.  Returns -1 if the arguments aren't assignable.  Fills a specific purpose for getMatchingMethod and is not generalized.</p>

 * @param fromClassArray the Class array to calculate the distance from.

 * @param toClassArray the Class array to calculate the distance to.

 * @return the aggregate number of inheritance hops between assignable argument class types.

 */

private static int distance(final Class<?>[] fromClassArray,final Class<?>[] toClassArray){

  int answer=0;

  if (!ClassUtils.isAssignable(fromClassArray,toClassArray,true)) {

    return -1;

  }

  for (int offset=0; offset < fromClassArray.length; offset++) {

    final Class<?> aClass=fromClassArray[offset];

    final Class<?> toClass=toClassArray[offset];

    if (aClass == null || aClass.equals(toClass)) {

      continue;

    }

    if (ClassUtils.isAssignable(aClass,toClass,true) && !ClassUtils.isAssignable(aClass,toClass,false)) {

      answer++;

    }

 else {

      answer=answer + 2;

    }

  }

  return answer;

}

Location: MethodUtils.java

Content: 

/** 

 * <p>Returns an accessible method (that is, one that can be invoked via reflection) that implements the specified method, by scanning through all implemented interfaces and subinterfaces. If no such method can be found, return  {@code null}.</p> <p>There isn't any good reason why this method must be  {@code private}. It is because there doesn't seem any reason why other classes should call this rather than the higher level methods.</p>

 * @param cls Parent class for the interfaces to be checked

 * @param methodName Method name of the method we wish to call

 * @param parameterTypes The parameter type signatures

 * @return the accessible method or {@code null} if not found

 */

private static Method getAccessibleMethodFromInterfaceNest(Class<?> cls,final String methodName,final Class<?>... parameterTypes){

  for (; cls != null; cls=cls.getSuperclass()) {

    final Class<?>[] interfaces=cls.getInterfaces();

    for (    final Class<?> anInterface : interfaces) {

      if (!Modifier.isPublic(anInterface.getModifiers())) {

        continue;

      }

      try {

        return anInterface.getDeclaredMethod(methodName,parameterTypes);

      }

 catch (      final NoSuchMethodException e) {

      }

      final Method method=getAccessibleMethodFromInterfaceNest(anInterface,methodName,parameterTypes);

      if (method != null) {

        return method;

      }

    }

  }

  return null;

}

Location: MethodUtils.java

Content: 

/** 

 * <p>Returns an accessible method (that is, one that can be invoked via reflection) by scanning through the superclasses. If no such method can be found, return  {@code null}.</p>

 * @param cls Class to be checked

 * @param methodName Method name of the method we wish to call

 * @param parameterTypes The parameter type signatures

 * @return the accessible method or {@code null} if not found

 */

private static Method getAccessibleMethodFromSuperclass(final Class<?> cls,final String methodName,final Class<?>... parameterTypes){

  Class<?> parentClass=cls.getSuperclass();

  while (parentClass != null) {

    if (Modifier.isPublic(parentClass.getModifiers())) {

      try {

        return parentClass.getMethod(methodName,parameterTypes);

      }

 catch (      final NoSuchMethodException e) {

        return null;

      }

    }

    parentClass=parentClass.getSuperclass();

  }

  return null;

}

Location: MethodUtils.java

Content: 

/** 

 * <p>Returns an accessible method (that is, one that can be invoked via reflection) with given name and parameters. If no such method can be found, return  {@code null}. This is just a convenience wrapper for {@link #getAccessibleMethod(Method)}.</p>

 * @param cls get method from this class

 * @param methodName get method with this name

 * @param parameterTypes with these parameters types

 * @return The accessible method

 */

public static Method getAccessibleMethod(final Class<?> cls,final String methodName,final Class<?>... parameterTypes){

  try {

    return getAccessibleMethod(cls.getMethod(methodName,parameterTypes));

  }

 catch (  final NoSuchMethodException e) {

    return null;

  }

}

Location: MethodUtils.java

Content: 

/** 

 * <p>Returns an accessible method (that is, one that can be invoked via reflection) that implements the specified Method. If no such method can be found, return  {@code null}.</p>

 * @param method The method that we wish to call

 * @return The accessible method

 */

public static Method getAccessibleMethod(Method method){

  if (!MemberUtils.isAccessible(method)) {

    return null;

  }

  final Class<?> cls=method.getDeclaringClass();

  if (Modifier.isPublic(cls.getModifiers())) {

    return method;

  }

  final String methodName=method.getName();

  final Class<?>[] parameterTypes=method.getParameterTypes();

  method=getAccessibleMethodFromInterfaceNest(cls,methodName,parameterTypes);

  if (method == null) {

    method=getAccessibleMethodFromSuperclass(cls,methodName,parameterTypes);

  }

  return method;

}

Location: MethodUtils.java

Content: 

/** 

 * <p>Gets a combination of  {@link ClassUtils#getAllSuperclasses(Class)} and{@link ClassUtils#getAllInterfaces(Class)}, one from superclasses, one from interfaces, and so on in a breadth first way.</p>

 * @param cls  the class to look up, may be {@code null}

 * @return the combined {@code List} of superclasses and interfaces in ordergoing up from this one {@code null} if null input

 */

private static List<Class<?>> getAllSuperclassesAndInterfaces(final Class<?> cls){

  if (cls == null) {

    return null;

  }

  final List<Class<?>> allSuperClassesAndInterfaces=new ArrayList<>();

  final List<Class<?>> allSuperclasses=ClassUtils.getAllSuperclasses(cls);

  int superClassIndex=0;

  final List<Class<?>> allInterfaces=ClassUtils.getAllInterfaces(cls);

  int interfaceIndex=0;

  while (interfaceIndex < allInterfaces.size() || superClassIndex < allSuperclasses.size()) {

    final Class<?> acls;

    if (interfaceIndex >= allInterfaces.size()) {

      acls=allSuperclasses.get(superClassIndex++);

    }

 else     if ((superClassIndex >= allSuperclasses.size()) || (interfaceIndex < superClassIndex) || !(superClassIndex < interfaceIndex)) {

      acls=allInterfaces.get(interfaceIndex++);

    }

 else {

      acls=allSuperclasses.get(superClassIndex++);

    }

    allSuperClassesAndInterfaces.add(acls);

  }

  return allSuperClassesAndInterfaces;

}

Location: MethodUtils.java

Content: 

/** 

 * <p>Gets the annotation object with the given annotation type that is present on the given method or optionally on any equivalent method in super classes and interfaces. Returns null if the annotation type was not present.</p> <p>Stops searching for an annotation once the first annotation of the specified type has been found. Additional annotations of the specified type will be silently ignored.</p>

 * @param < A > the annotation type

 * @param method the  {@link Method} to query

 * @param annotationCls the  {@link Annotation} to check if is present on the method

 * @param searchSupers determines if a lookup in the entire inheritance hierarchy of the given class is performed if the annotation was not directly present

 * @param ignoreAccess determines if underlying method has to be accessible

 * @return the first matching annotation, or {@code null} if not found

 * @throws NullPointerException if either the method or annotation class is {@code null}

 * @since 3.6

 */

public static <A extends Annotation>A getAnnotation(final Method method,final Class<A> annotationCls,final boolean searchSupers,final boolean ignoreAccess){

  Validate.notNull(method,"method");

  Validate.notNull(annotationCls,"annotationCls");

  if (!ignoreAccess && !MemberUtils.isAccessible(method)) {

    return null;

  }

  A annotation=method.getAnnotation(annotationCls);

  if (annotation == null && searchSupers) {

    final Class<?> mcls=method.getDeclaringClass();

    final List<Class<?>> classes=getAllSuperclassesAndInterfaces(mcls);

    for (    final Class<?> acls : classes) {

      final Method equivalentMethod=(ignoreAccess ? MethodUtils.getMatchingMethod(acls,method.getName(),method.getParameterTypes()) : MethodUtils.getMatchingAccessibleMethod(acls,method.getName(),method.getParameterTypes()));

      if (equivalentMethod != null) {

        annotation=equivalentMethod.getAnnotation(annotationCls);

        if (annotation != null) {

          break;

        }

      }

    }

  }

  return annotation;

}

Location: MethodUtils.java

Content: 

/** 

 * <p>Finds an accessible method that matches the given name and has compatible parameters. Compatible parameters mean that every method parameter is assignable from the given parameters. In other words, it finds a method with the given name that will take the parameters given.</p> <p>This method is used by {@link #invokeMethod(Object object,String methodName,Object[] args,Class[] parameterTypes)}. </p> <p>This method can match primitive parameter by passing in wrapper classes. For example, a  {@code Boolean} will match a primitive {@code boolean}parameter. </p>

 * @param cls find method in this class

 * @param methodName find method with this name

 * @param parameterTypes find method with most compatible parameters

 * @return The accessible method

 */

public static Method getMatchingAccessibleMethod(final Class<?> cls,final String methodName,final Class<?>... parameterTypes){

  try {

    final Method method=cls.getMethod(methodName,parameterTypes);

    MemberUtils.setAccessibleWorkaround(method);

    return method;

  }

 catch (  final NoSuchMethodException e) {

  }

  final Method[] methods=cls.getMethods();

  final List<Method> matchingMethods=new ArrayList<>();

  for (  final Method method : methods) {

    if (method.getName().equals(methodName) && MemberUtils.isMatchingMethod(method,parameterTypes)) {

      matchingMethods.add(method);

    }

  }

  matchingMethods.sort(METHOD_BY_SIGNATURE);

  Method bestMatch=null;

  for (  final Method method : matchingMethods) {

    final Method accessibleMethod=getAccessibleMethod(method);

    if (accessibleMethod != null && (bestMatch == null || MemberUtils.compareMethodFit(accessibleMethod,bestMatch,parameterTypes) < 0)) {

      bestMatch=accessibleMethod;

    }

  }

  if (bestMatch != null) {

    MemberUtils.setAccessibleWorkaround(bestMatch);

  }

  if (bestMatch != null && bestMatch.isVarArgs() && bestMatch.getParameterTypes().length > 0 && parameterTypes.length > 0) {

    final Class<?>[] methodParameterTypes=bestMatch.getParameterTypes();

    final Class<?> methodParameterComponentType=methodParameterTypes[methodParameterTypes.length - 1].getComponentType();

    final String methodParameterComponentTypeName=ClassUtils.primitiveToWrapper(methodParameterComponentType).getName();

    final Class<?> lastParameterType=parameterTypes[parameterTypes.length - 1];

    final String parameterTypeName=(lastParameterType == null) ? null : lastParameterType.getName();

    final String parameterTypeSuperClassName=(lastParameterType == null) ? null : lastParameterType.getSuperclass().getName();

    if (parameterTypeName != null && parameterTypeSuperClassName != null && !methodParameterComponentTypeName.equals(parameterTypeName) && !methodParameterComponentTypeName.equals(parameterTypeSuperClassName)) {

      return null;

    }

  }

  return bestMatch;

}

Location: MethodUtils.java

Content: 

/** 

 * <p>Retrieves a method whether or not it's accessible. If no such method can be found, return  {@code null}.</p>

 * @param cls The class that will be subjected to the method search

 * @param methodName The method that we wish to call

 * @param parameterTypes Argument class types

 * @return The method

 * @since 3.5

 */

public static Method getMatchingMethod(final Class<?> cls,final String methodName,final Class<?>... parameterTypes){

  Validate.notNull(cls,"cls");

  Validate.notEmpty(methodName,"methodName");

  final List<Method> methods=Stream.of(cls.getDeclaredMethods()).filter(method -> method.getName().equals(methodName)).collect(toList());

  ClassUtils.getAllSuperclasses(cls).stream().map(Class::getDeclaredMethods).flatMap(Stream::of).filter(method -> method.getName().equals(methodName)).forEach(methods::add);

  for (  final Method method : methods) {

    if (Arrays.deepEquals(method.getParameterTypes(),parameterTypes)) {

      return method;

    }

  }

  final TreeMap<Integer,List<Method>> candidates=new TreeMap<>();

  methods.stream().filter(method -> ClassUtils.isAssignable(parameterTypes,method.getParameterTypes(),true)).forEach(method -> {

    final int distance=distance(parameterTypes,method.getParameterTypes());

    final List<Method> candidatesAtDistance=candidates.computeIfAbsent(distance,k -> new ArrayList<>());

    candidatesAtDistance.add(method);

  }

);

  if (candidates.isEmpty()) {

    return null;

  }

  final List<Method> bestCandidates=candidates.values().iterator().next();

  if (bestCandidates.size() == 1) {

    return bestCandidates.get(0);

  }

  throw new IllegalStateException(String.format("Found multiple candidates for method %s on class %s : %s",methodName + Stream.of(parameterTypes).map(String::valueOf).collect(Collectors.joining(",","(",")")),cls.getName(),bestCandidates.stream().map(Method::toString).collect(Collectors.joining(",","[","]"))));

}

Location: MethodUtils.java

Content: 

/** 

 * Gets all class level public methods of the given class that are annotated with the given annotation.

 * @param cls the  {@link Class} to query

 * @param annotationCls the  {@link Annotation} that must be present on a method to be matched

 * @return a list of Methods (possibly empty).

 * @throws IllegalArgumentException if the class or annotation are  {@code null}

 * @since 3.4

 */

public static List<Method> getMethodsListWithAnnotation(final Class<?> cls,final Class<? extends Annotation> annotationCls){

  return getMethodsListWithAnnotation(cls,annotationCls,false,false);

}

Location: MethodUtils.java

Content: 

/** 

 * Gets all methods of the given class that are annotated with the given annotation.

 * @param cls the  {@link Class} to query

 * @param annotationCls the  {@link Annotation} that must be present on a method to be matched

 * @param searchSupers determines if a lookup in the entire inheritance hierarchy of the given class should be performed

 * @param ignoreAccess determines if non public methods should be considered

 * @return a list of Methods (possibly empty).

 * @throws NullPointerException if either the class or annotation class is {@code null}

 * @since 3.6

 */

public static List<Method> getMethodsListWithAnnotation(final Class<?> cls,final Class<? extends Annotation> annotationCls,final boolean searchSupers,final boolean ignoreAccess){

  Validate.notNull(cls,"cls");

  Validate.notNull(annotationCls,"annotationCls");

  final List<Class<?>> classes=(searchSupers ? getAllSuperclassesAndInterfaces(cls) : new ArrayList<>());

  classes.add(0,cls);

  final List<Method> annotatedMethods=new ArrayList<>();

  for (  final Class<?> acls : classes) {

    final Method[] methods=(ignoreAccess ? acls.getDeclaredMethods() : acls.getMethods());

    for (    final Method method : methods) {

      if (method.getAnnotation(annotationCls) != null) {

        annotatedMethods.add(method);

      }

    }

  }

  return annotatedMethods;

}

Location: MethodUtils.java

Content: 

/** 

 * Gets all class level public methods of the given class that are annotated with the given annotation.

 * @param cls the  {@link Class} to query

 * @param annotationCls the  {@link java.lang.annotation.Annotation} that must be present on a method to be matched

 * @return an array of Methods (possibly empty).

 * @throws NullPointerException if the class or annotation are {@code null}

 * @since 3.4

 */

public static Method[] getMethodsWithAnnotation(final Class<?> cls,final Class<? extends Annotation> annotationCls){

  return getMethodsWithAnnotation(cls,annotationCls,false,false);

}

Location: MethodUtils.java

Content: 

/** 

 * Gets all methods of the given class that are annotated with the given annotation.

 * @param cls the  {@link Class} to query

 * @param annotationCls the  {@link java.lang.annotation.Annotation} that must be present on a method to be matched

 * @param searchSupers determines if a lookup in the entire inheritance hierarchy of the given class should be performed

 * @param ignoreAccess determines if non public methods should be considered

 * @return an array of Methods (possibly empty).

 * @throws NullPointerException if the class or annotation are {@code null}

 * @since 3.6

 */

public static Method[] getMethodsWithAnnotation(final Class<?> cls,final Class<? extends Annotation> annotationCls,final boolean searchSupers,final boolean ignoreAccess){

  return getMethodsListWithAnnotation(cls,annotationCls,searchSupers,ignoreAccess).toArray(ArrayUtils.EMPTY_METHOD_ARRAY);

}

Location: MethodUtils.java

Content: 

/** 

 * Gets the hierarchy of overridden methods down to  {@code result} respecting generics.

 * @param method lowest to consider

 * @param interfacesBehavior whether to search interfaces, {@code null} {@code implies} false

 * @return Set&lt;Method&gt; in ascending order from sub- to superclass

 * @throws NullPointerException if the specified method is {@code null}

 * @since 3.2

 */

public static Set<Method> getOverrideHierarchy(final Method method,final Interfaces interfacesBehavior){

  Validate.notNull(method);

  final Set<Method> result=new LinkedHashSet<>();

  result.add(method);

  final Class<?>[] parameterTypes=method.getParameterTypes();

  final Class<?> declaringClass=method.getDeclaringClass();

  final Iterator<Class<?>> hierarchy=ClassUtils.hierarchy(declaringClass,interfacesBehavior).iterator();

  hierarchy.next();

  hierarchyTraversal:   while (hierarchy.hasNext()) {

    final Class<?> c=hierarchy.next();

    final Method m=getMatchingAccessibleMethod(c,method.getName(),parameterTypes);

    if (m == null) {

      continue;

    }

    if (Arrays.equals(m.getParameterTypes(),parameterTypes)) {

      result.add(m);

      continue;

    }

    final Map<TypeVariable<?>,Type> typeArguments=TypeUtils.getTypeArguments(declaringClass,m.getDeclaringClass());

    for (int i=0; i < parameterTypes.length; i++) {

      final Type childType=TypeUtils.unrollVariables(typeArguments,method.getGenericParameterTypes()[i]);

      final Type parentType=TypeUtils.unrollVariables(typeArguments,m.getGenericParameterTypes()[i]);

      if (!TypeUtils.equals(childType,parentType)) {

        continue hierarchyTraversal;

      }

    }

    result.add(m);

  }

  return result;

}

Location: MethodUtils.java

Content: 

/** 

 * <p>Given an arguments array passed to a varargs method, return an array of arguments in the canonical form, i.e. an array with the declared number of parameters, and whose last parameter is an array of the varargs type. </p>

 * @param args the array of arguments passed to the varags method

 * @param methodParameterTypes the declared array of method parameter types

 * @return an array of the variadic arguments passed to the method

 * @since 3.5

 */

static Object[] getVarArgs(final Object[] args,final Class<?>[] methodParameterTypes){

  if (args.length == methodParameterTypes.length && (args[args.length - 1] == null || args[args.length - 1].getClass().equals(methodParameterTypes[methodParameterTypes.length - 1]))) {

    return args;

  }

  final Object[] newArgs=new Object[methodParameterTypes.length];

  System.arraycopy(args,0,newArgs,0,methodParameterTypes.length - 1);

  final Class<?> varArgComponentType=methodParameterTypes[methodParameterTypes.length - 1].getComponentType();

  final int varArgLength=args.length - methodParameterTypes.length + 1;

  Object varArgsArray=Array.newInstance(ClassUtils.primitiveToWrapper(varArgComponentType),varArgLength);

  System.arraycopy(args,methodParameterTypes.length - 1,varArgsArray,0,varArgLength);

  if (varArgComponentType.isPrimitive()) {

    varArgsArray=ArrayUtils.toPrimitive(varArgsArray);

  }

  newArgs[methodParameterTypes.length - 1]=varArgsArray;

  return newArgs;

}

Location: MethodUtils.java

Content: 

/** 

 * <p>Invokes a method whose parameter types match exactly the object types.</p> <p>This uses reflection to invoke the method obtained from a call to {@link #getAccessibleMethod}(Class, String, Class[])}.</p>

 * @param object invoke method on this object

 * @param methodName get method with this name

 * @return The value returned by the invoked method

 * @throws NoSuchMethodException if there is no such accessible method

 * @throws InvocationTargetException wraps an exception thrown by themethod invoked

 * @throws IllegalAccessException if the requested method is not accessiblevia reflection

 * @since 3.4

 */

public static Object invokeExactMethod(final Object object,final String methodName) throws NoSuchMethodException, IllegalAccessException, InvocationTargetException {

  return invokeExactMethod(object,methodName,ArrayUtils.EMPTY_OBJECT_ARRAY,null);

}

Location: MethodUtils.java

Content: 

/** 

 * <p>Invokes a method with no parameters.</p> <p>This uses reflection to invoke the method obtained from a call to {@link #getAccessibleMethod}(Class, String, Class[])}.</p>

 * @param object invoke method on this object

 * @param methodName get method with this name

 * @param args use these arguments - treat null as empty array

 * @return The value returned by the invoked method

 * @throws NoSuchMethodException if there is no such accessible method

 * @throws InvocationTargetException wraps an exception thrown by themethod invoked

 * @throws IllegalAccessException if the requested method is not accessiblevia reflection

 */

public static Object invokeExactMethod(final Object object,final String methodName,Object... args) throws NoSuchMethodException, IllegalAccessException, InvocationTargetException {

  args=ArrayUtils.nullToEmpty(args);

  return invokeExactMethod(object,methodName,args,ClassUtils.toClass(args));

}

Location: MethodUtils.java

Content: 

/** 

 * <p>Invokes a method whose parameter types match exactly the parameter types given.</p> <p>This uses reflection to invoke the method obtained from a call to {@link #getAccessibleMethod(Class,String,Class[])}.</p>

 * @param object invoke method on this object

 * @param methodName get method with this name

 * @param args use these arguments - treat null as empty array

 * @param parameterTypes match these parameters - treat {@code null} as empty array

 * @return The value returned by the invoked method

 * @throws NoSuchMethodException if there is no such accessible method

 * @throws InvocationTargetException wraps an exception thrown by themethod invoked

 * @throws IllegalAccessException if the requested method is not accessiblevia reflection

 */

public static Object invokeExactMethod(final Object object,final String methodName,Object[] args,Class<?>[] parameterTypes) throws NoSuchMethodException, IllegalAccessException, InvocationTargetException {

  args=ArrayUtils.nullToEmpty(args);

  parameterTypes=ArrayUtils.nullToEmpty(parameterTypes);

  final Method method=getAccessibleMethod(object.getClass(),methodName,parameterTypes);

  if (method == null) {

    throw new NoSuchMethodException("No such accessible method: " + methodName + "() on object: "+ object.getClass().getName());

  }

  return method.invoke(object,args);

}

Location: MethodUtils.java

Content: 

/** 

 * <p>Invokes a  {@code static} method whose parameter types match exactly the objecttypes.</p> <p>This uses reflection to invoke the method obtained from a call to {@link #getAccessibleMethod(Class,String,Class[])}.</p>

 * @param cls invoke static method on this class

 * @param methodName get method with this name

 * @param args use these arguments - treat {@code null} as empty array

 * @return The value returned by the invoked method

 * @throws NoSuchMethodException if there is no such accessible method

 * @throws InvocationTargetException wraps an exception thrown by themethod invoked

 * @throws IllegalAccessException if the requested method is not accessiblevia reflection

 */

public static Object invokeExactStaticMethod(final Class<?> cls,final String methodName,Object... args) throws NoSuchMethodException, IllegalAccessException, InvocationTargetException {

  args=ArrayUtils.nullToEmpty(args);

  return invokeExactStaticMethod(cls,methodName,args,ClassUtils.toClass(args));

}

Location: MethodUtils.java

Content: 

/** 

 * <p>Invokes a  {@code static} method whose parameter types match exactly the parametertypes given.</p> <p>This uses reflection to invoke the method obtained from a call to {@link #getAccessibleMethod(Class,String,Class[])}.</p>

 * @param cls invoke static method on this class

 * @param methodName get method with this name

 * @param args use these arguments - treat {@code null} as empty array

 * @param parameterTypes match these parameters - treat {@code null} as empty array

 * @return The value returned by the invoked method

 * @throws NoSuchMethodException if there is no such accessible method

 * @throws InvocationTargetException wraps an exception thrown by themethod invoked

 * @throws IllegalAccessException if the requested method is not accessiblevia reflection

 */

public static Object invokeExactStaticMethod(final Class<?> cls,final String methodName,Object[] args,Class<?>[] parameterTypes) throws NoSuchMethodException, IllegalAccessException, InvocationTargetException {

  args=ArrayUtils.nullToEmpty(args);

  parameterTypes=ArrayUtils.nullToEmpty(parameterTypes);

  final Method method=getAccessibleMethod(cls,methodName,parameterTypes);

  if (method == null) {

    throw new NoSuchMethodException("No such accessible method: " + methodName + "() on class: "+ cls.getName());

  }

  return method.invoke(null,args);

}

Location: MethodUtils.java

Content: 

/** 

 * <p>Invokes a named method without parameters.</p> <p>This is a convenient wrapper for {@link #invokeMethod(Object object,boolean forceAccess,String methodName,Object[] args,Class[] parameterTypes)}. </p>

 * @param object invoke method on this object

 * @param forceAccess force access to invoke method even if it's not accessible

 * @param methodName get method with this name

 * @return The value returned by the invoked method

 * @throws NoSuchMethodException if there is no such accessible method

 * @throws InvocationTargetException wraps an exception thrown by the method invoked

 * @throws IllegalAccessException if the requested method is not accessible via reflection

 * @since 3.5

 */

public static Object invokeMethod(final Object object,final boolean forceAccess,final String methodName) throws NoSuchMethodException, IllegalAccessException, InvocationTargetException {

  return invokeMethod(object,forceAccess,methodName,ArrayUtils.EMPTY_OBJECT_ARRAY,null);

}

Location: MethodUtils.java

Content: 

/** 

 * <p>Invokes a named method whose parameter type matches the object type.</p> <p>This method supports calls to methods taking primitive parameters via passing in wrapping classes. So, for example, a  {@code Boolean} objectwould match a  {@code boolean} primitive.</p><p>This is a convenient wrapper for {@link #invokeMethod(Object object,boolean forceAccess,String methodName,Object[] args,Class[] parameterTypes)}. </p>

 * @param object invoke method on this object

 * @param forceAccess force access to invoke method even if it's not accessible

 * @param methodName get method with this name

 * @param args use these arguments - treat null as empty array

 * @return The value returned by the invoked method

 * @throws NoSuchMethodException if there is no such accessible method

 * @throws InvocationTargetException wraps an exception thrown by the method invoked

 * @throws IllegalAccessException if the requested method is not accessible via reflection

 * @since 3.5

 */

public static Object invokeMethod(final Object object,final boolean forceAccess,final String methodName,Object... args) throws NoSuchMethodException, IllegalAccessException, InvocationTargetException {

  args=ArrayUtils.nullToEmpty(args);

  return invokeMethod(object,forceAccess,methodName,args,ClassUtils.toClass(args));

}

Location: MethodUtils.java

Content: 

/** 

 * <p>Invokes a named method whose parameter type matches the object type.</p> <p>This method supports calls to methods taking primitive parameters via passing in wrapping classes. So, for example, a  {@code Boolean} objectwould match a  {@code boolean} primitive.</p>

 * @param object invoke method on this object

 * @param forceAccess force access to invoke method even if it's not accessible

 * @param methodName get method with this name

 * @param args use these arguments - treat null as empty array

 * @param parameterTypes match these parameters - treat null as empty array

 * @return The value returned by the invoked method

 * @throws NoSuchMethodException if there is no such accessible method

 * @throws InvocationTargetException wraps an exception thrown by the method invoked

 * @throws IllegalAccessException if the requested method is not accessible via reflection

 * @since 3.5

 */

public static Object invokeMethod(final Object object,final boolean forceAccess,final String methodName,Object[] args,Class<?>[] parameterTypes) throws NoSuchMethodException, IllegalAccessException, InvocationTargetException {

  parameterTypes=ArrayUtils.nullToEmpty(parameterTypes);

  args=ArrayUtils.nullToEmpty(args);

  final String messagePrefix;

  Method method;

  if (forceAccess) {

    messagePrefix="No such method: ";

    method=getMatchingMethod(object.getClass(),methodName,parameterTypes);

    if (method != null && !method.isAccessible()) {

      method.setAccessible(true);

    }

  }

 else {

    messagePrefix="No such accessible method: ";

    method=getMatchingAccessibleMethod(object.getClass(),methodName,parameterTypes);

  }

  if (method == null) {

    throw new NoSuchMethodException(messagePrefix + methodName + "() on object: "+ object.getClass().getName());

  }

  args=toVarArgs(method,args);

  return method.invoke(object,args);

}

Location: MethodUtils.java

Content: 

/** 

 * <p>Invokes a named method without parameters.</p> <p>This method delegates the method search to  {@link #getMatchingAccessibleMethod(Class,String,Class[])}.</p> <p>This is a convenient wrapper for {@link #invokeMethod(Object object,String methodName,Object[] args,Class[] parameterTypes)}. </p>

 * @param object invoke method on this object

 * @param methodName get method with this name

 * @return The value returned by the invoked method

 * @throws NoSuchMethodException if there is no such accessible method

 * @throws InvocationTargetException wraps an exception thrown by the method invoked

 * @throws IllegalAccessException if the requested method is not accessible via reflection

 * @since 3.4

 */

public static Object invokeMethod(final Object object,final String methodName) throws NoSuchMethodException, IllegalAccessException, InvocationTargetException {

  return invokeMethod(object,methodName,ArrayUtils.EMPTY_OBJECT_ARRAY,null);

}

Location: MethodUtils.java

Content: 

/** 

 * <p>Invokes a named method whose parameter type matches the object type.</p> <p>This method delegates the method search to  {@link #getMatchingAccessibleMethod(Class,String,Class[])}.</p> <p>This method supports calls to methods taking primitive parameters via passing in wrapping classes. So, for example, a  {@code Boolean} objectwould match a  {@code boolean} primitive.</p><p>This is a convenient wrapper for {@link #invokeMethod(Object object,String methodName,Object[] args,Class[] parameterTypes)}. </p>

 * @param object invoke method on this object

 * @param methodName get method with this name

 * @param args use these arguments - treat null as empty array

 * @return The value returned by the invoked method

 * @throws NoSuchMethodException if there is no such accessible method

 * @throws InvocationTargetException wraps an exception thrown by the method invoked

 * @throws IllegalAccessException if the requested method is not accessible via reflection

 */

public static Object invokeMethod(final Object object,final String methodName,Object... args) throws NoSuchMethodException, IllegalAccessException, InvocationTargetException {

  args=ArrayUtils.nullToEmpty(args);

  return invokeMethod(object,methodName,args,ClassUtils.toClass(args));

}

Location: MethodUtils.java

Content: 

/** 

 * <p>Invokes a named method whose parameter type matches the object type.</p> <p>This method delegates the method search to  {@link #getMatchingAccessibleMethod(Class,String,Class[])}.</p> <p>This method supports calls to methods taking primitive parameters via passing in wrapping classes. So, for example, a  {@code Boolean} objectwould match a  {@code boolean} primitive.</p>

 * @param object invoke method on this object

 * @param methodName get method with this name

 * @param args use these arguments - treat null as empty array

 * @param parameterTypes match these parameters - treat null as empty array

 * @return The value returned by the invoked method

 * @throws NoSuchMethodException if there is no such accessible method

 * @throws InvocationTargetException wraps an exception thrown by the method invoked

 * @throws IllegalAccessException if the requested method is not accessible via reflection

 */

public static Object invokeMethod(final Object object,final String methodName,final Object[] args,final Class<?>[] parameterTypes) throws NoSuchMethodException, IllegalAccessException, InvocationTargetException {

  return invokeMethod(object,false,methodName,args,parameterTypes);

}

Location: MethodUtils.java

Content: 

/** 

 * <p>Invokes a named  {@code static} method whose parameter type matches the object type.</p><p>This method delegates the method search to  {@link #getMatchingAccessibleMethod(Class,String,Class[])}.</p> <p>This method supports calls to methods taking primitive parameters via passing in wrapping classes. So, for example, a  {@code Boolean} classwould match a  {@code boolean} primitive.</p><p>This is a convenient wrapper for {@link #invokeStaticMethod(Class,String,Object[],Class[])}. </p>

 * @param cls invoke static method on this class

 * @param methodName get method with this name

 * @param args use these arguments - treat {@code null} as empty array

 * @return The value returned by the invoked method

 * @throws NoSuchMethodException if there is no such accessible method

 * @throws InvocationTargetException wraps an exception thrown by themethod invoked

 * @throws IllegalAccessException if the requested method is not accessiblevia reflection

 */

public static Object invokeStaticMethod(final Class<?> cls,final String methodName,Object... args) throws NoSuchMethodException, IllegalAccessException, InvocationTargetException {

  args=ArrayUtils.nullToEmpty(args);

  return invokeStaticMethod(cls,methodName,args,ClassUtils.toClass(args));

}

Location: MethodUtils.java

Content: 

/** 

 * <p>Invokes a named  {@code static} method whose parameter type matches the object type.</p><p>This method delegates the method search to  {@link #getMatchingAccessibleMethod(Class,String,Class[])}.</p> <p>This method supports calls to methods taking primitive parameters via passing in wrapping classes. So, for example, a  {@code Boolean} classwould match a  {@code boolean} primitive.</p>

 * @param cls invoke static method on this class

 * @param methodName get method with this name

 * @param args use these arguments - treat {@code null} as empty array

 * @param parameterTypes match these parameters - treat {@code null} as empty array

 * @return The value returned by the invoked method

 * @throws NoSuchMethodException if there is no such accessible method

 * @throws InvocationTargetException wraps an exception thrown by themethod invoked

 * @throws IllegalAccessException if the requested method is not accessiblevia reflection

 */

public static Object invokeStaticMethod(final Class<?> cls,final String methodName,Object[] args,Class<?>[] parameterTypes) throws NoSuchMethodException, IllegalAccessException, InvocationTargetException {

  args=ArrayUtils.nullToEmpty(args);

  parameterTypes=ArrayUtils.nullToEmpty(parameterTypes);

  final Method method=getMatchingAccessibleMethod(cls,methodName,parameterTypes);

  if (method == null) {

    throw new NoSuchMethodException("No such accessible method: " + methodName + "() on class: "+ cls.getName());

  }

  args=toVarArgs(method,args);

  return method.invoke(null,args);

}

Location: MethodUtils.java

Content: 

/** 

 * <p> {@link MethodUtils} instances should NOT be constructed in standard programming.Instead, the class should be used as {@code MethodUtils.getAccessibleMethod(method)}.</p> <p>This constructor is  {@code public} to permit tools that require a JavaBeaninstance to operate.</p>

 */

public MethodUtils(){

}

Location: MethodUtils.java

Content: 

private static Object[] toVarArgs(final Method method,Object[] args){

  if (method.isVarArgs()) {

    final Class<?>[] methodParameterTypes=method.getParameterTypes();

    args=getVarArgs(args,methodParameterTypes);

  }

  return args;

}

