Location: DateUtilsFragmentTest.java

Content: 

@BeforeEach public void setUp(){

  aCalendar=Calendar.getInstance();

  aCalendar.set(2005,months,days,hours,minutes,seconds);

  aCalendar.set(Calendar.MILLISECOND,millis);

  aDate=aCalendar.getTime();

}

Location: DateUtilsFragmentTest.java

Content: 

@Test public void testDateFragmentInLargerUnitWithCalendar(){

  assertEquals(0,DateUtils.getFragmentInDays(aCalendar,Calendar.DATE));

}

Location: DateUtilsFragmentTest.java

Content: 

@Test public void testDateFragmentInLargerUnitWithDate(){

  assertEquals(0,DateUtils.getFragmentInDays(aDate,Calendar.DATE));

}

Location: DateUtilsFragmentTest.java

Content: 

@Test public void testDayOfYearFragmentInLargerUnitWithCalendar(){

  assertEquals(0,DateUtils.getFragmentInDays(aCalendar,Calendar.DAY_OF_YEAR));

}

Location: DateUtilsFragmentTest.java

Content: 

@Test public void testDayOfYearFragmentInLargerUnitWithDate(){

  assertEquals(0,DateUtils.getFragmentInDays(aDate,Calendar.DAY_OF_YEAR));

}

Location: DateUtilsFragmentTest.java

Content: 

@Test public void testDaysOfMonthWithCalendar(){

  final long testResult=DateUtils.getFragmentInDays(aCalendar,Calendar.MONTH);

  assertEquals(days,testResult);

}

Location: DateUtilsFragmentTest.java

Content: 

@Test public void testDaysOfMonthWithDate(){

  final long testResult=DateUtils.getFragmentInDays(aDate,Calendar.MONTH);

  final Calendar cal=Calendar.getInstance();

  cal.setTime(aDate);

  assertEquals(cal.get(Calendar.DAY_OF_MONTH),testResult);

}

Location: DateUtilsFragmentTest.java

Content: 

@Test public void testDaysOfYearWithCalendar(){

  final long testResult=DateUtils.getFragmentInDays(aCalendar,Calendar.YEAR);

  assertEquals(aCalendar.get(Calendar.DAY_OF_YEAR),testResult);

}

Location: DateUtilsFragmentTest.java

Content: 

@Test public void testDaysOfYearWithDate(){

  final long testResult=DateUtils.getFragmentInDays(aDate,Calendar.YEAR);

  final Calendar cal=Calendar.getInstance();

  cal.setTime(aDate);

  assertEquals(cal.get(Calendar.DAY_OF_YEAR),testResult);

}

Location: DateUtilsFragmentTest.java

Content: 

@Test public void testHourOfDayFragmentInLargerUnitWithCalendar(){

  assertEquals(0,DateUtils.getFragmentInHours(aCalendar,Calendar.HOUR_OF_DAY));

  assertEquals(0,DateUtils.getFragmentInDays(aCalendar,Calendar.HOUR_OF_DAY));

}

Location: DateUtilsFragmentTest.java

Content: 

@Test public void testHourOfDayFragmentInLargerUnitWithDate(){

  assertEquals(0,DateUtils.getFragmentInHours(aDate,Calendar.HOUR_OF_DAY));

  assertEquals(0,DateUtils.getFragmentInDays(aDate,Calendar.HOUR_OF_DAY));

}

Location: DateUtilsFragmentTest.java

Content: 

@Test public void testHoursOfDayWithCalendar(){

  long testResult=DateUtils.getFragmentInHours(aCalendar,Calendar.DATE);

  final long expectedValue=hours;

  assertEquals(expectedValue,testResult);

  testResult=DateUtils.getFragmentInHours(aCalendar,Calendar.DAY_OF_YEAR);

  assertEquals(expectedValue,testResult);

}

Location: DateUtilsFragmentTest.java

Content: 

@Test public void testHoursOfDayWithDate(){

  long testResult=DateUtils.getFragmentInHours(aDate,Calendar.DATE);

  final long expectedValue=hours;

  assertEquals(expectedValue,testResult);

  testResult=DateUtils.getFragmentInHours(aDate,Calendar.DAY_OF_YEAR);

  assertEquals(expectedValue,testResult);

}

Location: DateUtilsFragmentTest.java

Content: 

@Test public void testHoursOfMonthWithCalendar(){

  final long testResult=DateUtils.getFragmentInHours(aCalendar,Calendar.MONTH);

  assertEquals(hours + (((days - 1) * DateUtils.MILLIS_PER_DAY)) / DateUtils.MILLIS_PER_HOUR,testResult);

}

Location: DateUtilsFragmentTest.java

Content: 

@Test public void testHoursOfMonthWithDate(){

  final long testResult=DateUtils.getFragmentInHours(aDate,Calendar.MONTH);

  assertEquals(hours + (((days - 1) * DateUtils.MILLIS_PER_DAY)) / DateUtils.MILLIS_PER_HOUR,testResult);

}

Location: DateUtilsFragmentTest.java

Content: 

@Test public void testHoursOfYearWithCalendar(){

  final long testResult=DateUtils.getFragmentInHours(aCalendar,Calendar.YEAR);

  assertEquals(hours + (((aCalendar.get(Calendar.DAY_OF_YEAR) - 1) * DateUtils.MILLIS_PER_DAY)) / DateUtils.MILLIS_PER_HOUR,testResult);

}

Location: DateUtilsFragmentTest.java

Content: 

@Test public void testHoursOfYearWithDate(){

  final long testResult=DateUtils.getFragmentInHours(aDate,Calendar.YEAR);

  final Calendar cal=Calendar.getInstance();

  cal.setTime(aDate);

  assertEquals(hours + (((cal.get(Calendar.DAY_OF_YEAR) - 1) * DateUtils.MILLIS_PER_DAY)) / DateUtils.MILLIS_PER_HOUR,testResult);

}

Location: DateUtilsFragmentTest.java

Content: 

@Test public void testInvalidFragmentWithCalendar(){

  assertThrows(IllegalArgumentException.class,() -> DateUtils.getFragmentInMilliseconds(aCalendar,0));

  assertThrows(IllegalArgumentException.class,() -> DateUtils.getFragmentInSeconds(aCalendar,0));

  assertThrows(IllegalArgumentException.class,() -> DateUtils.getFragmentInMinutes(aCalendar,0));

  assertThrows(IllegalArgumentException.class,() -> DateUtils.getFragmentInHours(aCalendar,0));

  assertThrows(IllegalArgumentException.class,() -> DateUtils.getFragmentInDays(aCalendar,0));

}

Location: DateUtilsFragmentTest.java

Content: 

@Test public void testInvalidFragmentWithDate(){

  assertThrows(IllegalArgumentException.class,() -> DateUtils.getFragmentInMilliseconds(aDate,0));

  assertThrows(IllegalArgumentException.class,() -> DateUtils.getFragmentInSeconds(aDate,0));

  assertThrows(IllegalArgumentException.class,() -> DateUtils.getFragmentInMinutes(aDate,0));

  assertThrows(IllegalArgumentException.class,() -> DateUtils.getFragmentInHours(aDate,0));

  assertThrows(IllegalArgumentException.class,() -> DateUtils.getFragmentInDays(aDate,0));

}

Location: DateUtilsFragmentTest.java

Content: 

@Test public void testMillisecondFragmentInLargerUnitWithCalendar(){

  assertEquals(0,DateUtils.getFragmentInMilliseconds(aCalendar,Calendar.MILLISECOND));

  assertEquals(0,DateUtils.getFragmentInSeconds(aCalendar,Calendar.MILLISECOND));

  assertEquals(0,DateUtils.getFragmentInMinutes(aCalendar,Calendar.MILLISECOND));

  assertEquals(0,DateUtils.getFragmentInHours(aCalendar,Calendar.MILLISECOND));

  assertEquals(0,DateUtils.getFragmentInDays(aCalendar,Calendar.MILLISECOND));

}

Location: DateUtilsFragmentTest.java

Content: 

@Test public void testMillisecondFragmentInLargerUnitWithDate(){

  assertEquals(0,DateUtils.getFragmentInMilliseconds(aDate,Calendar.MILLISECOND));

  assertEquals(0,DateUtils.getFragmentInSeconds(aDate,Calendar.MILLISECOND));

  assertEquals(0,DateUtils.getFragmentInMinutes(aDate,Calendar.MILLISECOND));

  assertEquals(0,DateUtils.getFragmentInHours(aDate,Calendar.MILLISECOND));

  assertEquals(0,DateUtils.getFragmentInDays(aDate,Calendar.MILLISECOND));

}

Location: DateUtilsFragmentTest.java

Content: 

@Test public void testMillisecondsOfDayWithCalendar(){

  long testresult=DateUtils.getFragmentInMilliseconds(aCalendar,Calendar.DATE);

  final long expectedValue=millis + (seconds * DateUtils.MILLIS_PER_SECOND) + (minutes * DateUtils.MILLIS_PER_MINUTE)+ (hours * DateUtils.MILLIS_PER_HOUR);

  assertEquals(expectedValue,testresult);

  testresult=DateUtils.getFragmentInMilliseconds(aCalendar,Calendar.DAY_OF_YEAR);

  assertEquals(expectedValue,testresult);

}

Location: DateUtilsFragmentTest.java

Content: 

@Test public void testMillisecondsOfDayWithDate(){

  long testresult=DateUtils.getFragmentInMilliseconds(aDate,Calendar.DATE);

  final long expectedValue=millis + (seconds * DateUtils.MILLIS_PER_SECOND) + (minutes * DateUtils.MILLIS_PER_MINUTE)+ (hours * DateUtils.MILLIS_PER_HOUR);

  assertEquals(expectedValue,testresult);

  testresult=DateUtils.getFragmentInMilliseconds(aDate,Calendar.DAY_OF_YEAR);

  assertEquals(expectedValue,testresult);

}

Location: DateUtilsFragmentTest.java

Content: 

@Test public void testMillisecondsOfHourWithCalendar(){

  final long testResult=DateUtils.getFragmentInMilliseconds(aCalendar,Calendar.HOUR_OF_DAY);

  assertEquals(millis + (seconds * DateUtils.MILLIS_PER_SECOND) + (minutes * DateUtils.MILLIS_PER_MINUTE),testResult);

}

Location: DateUtilsFragmentTest.java

Content: 

@Test public void testMillisecondsOfHourWithDate(){

  final long testResult=DateUtils.getFragmentInMilliseconds(aDate,Calendar.HOUR_OF_DAY);

  assertEquals(millis + (seconds * DateUtils.MILLIS_PER_SECOND) + (minutes * DateUtils.MILLIS_PER_MINUTE),testResult);

}

Location: DateUtilsFragmentTest.java

Content: 

@Test public void testMillisecondsOfMinuteWithCalender(){

  final long testResult=DateUtils.getFragmentInMilliseconds(aCalendar,Calendar.MINUTE);

  assertEquals(millis + (seconds * DateUtils.MILLIS_PER_SECOND),testResult);

}

Location: DateUtilsFragmentTest.java

Content: 

@Test public void testMillisecondsOfMinuteWithDate(){

  final long testResult=DateUtils.getFragmentInMilliseconds(aDate,Calendar.MINUTE);

  assertEquals(millis + (seconds * DateUtils.MILLIS_PER_SECOND),testResult);

}

Location: DateUtilsFragmentTest.java

Content: 

@Test public void testMillisecondsOfMonthWithCalendar(){

  final long testResult=DateUtils.getFragmentInMilliseconds(aCalendar,Calendar.MONTH);

  assertEquals(millis + (seconds * DateUtils.MILLIS_PER_SECOND) + (minutes * DateUtils.MILLIS_PER_MINUTE)+ (hours * DateUtils.MILLIS_PER_HOUR)+ ((days - 1) * DateUtils.MILLIS_PER_DAY),testResult);

}

Location: DateUtilsFragmentTest.java

Content: 

@Test public void testMillisecondsOfMonthWithDate(){

  final long testResult=DateUtils.getFragmentInMilliseconds(aDate,Calendar.MONTH);

  assertEquals(millis + (seconds * DateUtils.MILLIS_PER_SECOND) + (minutes * DateUtils.MILLIS_PER_MINUTE)+ (hours * DateUtils.MILLIS_PER_HOUR)+ ((days - 1) * DateUtils.MILLIS_PER_DAY),testResult);

}

Location: DateUtilsFragmentTest.java

Content: 

@Test public void testMillisecondsOfSecondWithCalendar(){

  final long testResult=DateUtils.getFragmentInMilliseconds(aCalendar,Calendar.SECOND);

  assertEquals(millis,testResult);

  assertEquals(aCalendar.get(Calendar.MILLISECOND),testResult);

}

Location: DateUtilsFragmentTest.java

Content: 

@Test public void testMillisecondsOfSecondWithDate(){

  final long testResult=DateUtils.getFragmentInMilliseconds(aDate,Calendar.SECOND);

  assertEquals(millis,testResult);

}

Location: DateUtilsFragmentTest.java

Content: 

@Test public void testMillisecondsOfYearWithCalendar(){

  final long testResult=DateUtils.getFragmentInMilliseconds(aCalendar,Calendar.YEAR);

  assertEquals(millis + (seconds * DateUtils.MILLIS_PER_SECOND) + (minutes * DateUtils.MILLIS_PER_MINUTE)+ (hours * DateUtils.MILLIS_PER_HOUR)+ ((aCalendar.get(Calendar.DAY_OF_YEAR) - 1) * DateUtils.MILLIS_PER_DAY),testResult);

}

Location: DateUtilsFragmentTest.java

Content: 

@Test public void testMillisecondsOfYearWithDate(){

  final long testResult=DateUtils.getFragmentInMilliseconds(aDate,Calendar.YEAR);

  final Calendar cal=Calendar.getInstance();

  cal.setTime(aDate);

  assertEquals(millis + (seconds * DateUtils.MILLIS_PER_SECOND) + (minutes * DateUtils.MILLIS_PER_MINUTE)+ (hours * DateUtils.MILLIS_PER_HOUR)+ ((cal.get(Calendar.DAY_OF_YEAR) - 1) * DateUtils.MILLIS_PER_DAY),testResult);

}

Location: DateUtilsFragmentTest.java

Content: 

@Test public void testMinuteFragmentInLargerUnitWithCalendar(){

  assertEquals(0,DateUtils.getFragmentInMinutes(aCalendar,Calendar.MINUTE));

  assertEquals(0,DateUtils.getFragmentInHours(aCalendar,Calendar.MINUTE));

  assertEquals(0,DateUtils.getFragmentInDays(aCalendar,Calendar.MINUTE));

}

Location: DateUtilsFragmentTest.java

Content: 

@Test public void testMinuteFragmentInLargerUnitWithDate(){

  assertEquals(0,DateUtils.getFragmentInMinutes(aDate,Calendar.MINUTE));

  assertEquals(0,DateUtils.getFragmentInHours(aDate,Calendar.MINUTE));

  assertEquals(0,DateUtils.getFragmentInDays(aDate,Calendar.MINUTE));

}

Location: DateUtilsFragmentTest.java

Content: 

@Test public void testMinutesOfDayWithCalendar(){

  long testResult=DateUtils.getFragmentInMinutes(aCalendar,Calendar.DATE);

  final long expectedValue=minutes + ((hours * DateUtils.MILLIS_PER_HOUR)) / DateUtils.MILLIS_PER_MINUTE;

  assertEquals(expectedValue,testResult);

  testResult=DateUtils.getFragmentInMinutes(aCalendar,Calendar.DAY_OF_YEAR);

  assertEquals(expectedValue,testResult);

}

Location: DateUtilsFragmentTest.java

Content: 

@Test public void testMinutesOfDayWithDate(){

  long testResult=DateUtils.getFragmentInMinutes(aDate,Calendar.DATE);

  final long expectedValue=minutes + ((hours * DateUtils.MILLIS_PER_HOUR)) / DateUtils.MILLIS_PER_MINUTE;

  assertEquals(expectedValue,testResult);

  testResult=DateUtils.getFragmentInMinutes(aDate,Calendar.DAY_OF_YEAR);

  assertEquals(expectedValue,testResult);

}

Location: DateUtilsFragmentTest.java

Content: 

@Test public void testMinutesOfHourWithCalendar(){

  final long testResult=DateUtils.getFragmentInMinutes(aCalendar,Calendar.HOUR_OF_DAY);

  assertEquals(minutes,testResult);

}

Location: DateUtilsFragmentTest.java

Content: 

@Test public void testMinutesOfHourWithDate(){

  final long testResult=DateUtils.getFragmentInMinutes(aDate,Calendar.HOUR_OF_DAY);

  assertEquals(minutes,testResult);

}

Location: DateUtilsFragmentTest.java

Content: 

@Test public void testMinutesOfMonthWithCalendar(){

  final long testResult=DateUtils.getFragmentInMinutes(aCalendar,Calendar.MONTH);

  assertEquals(minutes + ((hours * DateUtils.MILLIS_PER_HOUR) + ((days - 1) * DateUtils.MILLIS_PER_DAY)) / DateUtils.MILLIS_PER_MINUTE,testResult);

}

Location: DateUtilsFragmentTest.java

Content: 

@Test public void testMinutesOfMonthWithDate(){

  final long testResult=DateUtils.getFragmentInMinutes(aDate,Calendar.MONTH);

  assertEquals(minutes + ((hours * DateUtils.MILLIS_PER_HOUR) + ((days - 1) * DateUtils.MILLIS_PER_DAY)) / DateUtils.MILLIS_PER_MINUTE,testResult);

}

Location: DateUtilsFragmentTest.java

Content: 

@Test public void testMinutesOfYearWithCalendar(){

  final long testResult=DateUtils.getFragmentInMinutes(aCalendar,Calendar.YEAR);

  assertEquals(minutes + ((hours * DateUtils.MILLIS_PER_HOUR) + ((aCalendar.get(Calendar.DAY_OF_YEAR) - 1) * DateUtils.MILLIS_PER_DAY)) / DateUtils.MILLIS_PER_MINUTE,testResult);

}

Location: DateUtilsFragmentTest.java

Content: 

@Test public void testMinutesOfYearWithDate(){

  final long testResult=DateUtils.getFragmentInMinutes(aDate,Calendar.YEAR);

  final Calendar cal=Calendar.getInstance();

  cal.setTime(aDate);

  assertEquals(minutes + ((hours * DateUtils.MILLIS_PER_HOUR) + ((cal.get(Calendar.DAY_OF_YEAR) - 1) * DateUtils.MILLIS_PER_DAY)) / DateUtils.MILLIS_PER_MINUTE,testResult);

}

Location: DateUtilsFragmentTest.java

Content: 

@Test public void testMinutesOfYearWithWrongOffsetBugWithCalendar(){

  final Calendar c=Calendar.getInstance();

  c.set(Calendar.MONTH,Calendar.JANUARY);

  c.set(Calendar.DAY_OF_YEAR,1);

  c.set(Calendar.HOUR_OF_DAY,0);

  c.set(Calendar.MINUTE,0);

  c.set(Calendar.SECOND,0);

  c.set(Calendar.MILLISECOND,0);

  final long testResult=DateUtils.getFragmentInMinutes(c,Calendar.YEAR);

  assertEquals(0,testResult);

}

Location: DateUtilsFragmentTest.java

Content: 

@Test public void testNullCalendar(){

  assertThrows(IllegalArgumentException.class,() -> DateUtils.getFragmentInMilliseconds((Calendar)null,Calendar.MILLISECOND));

  assertThrows(IllegalArgumentException.class,() -> DateUtils.getFragmentInSeconds((Calendar)null,Calendar.MILLISECOND));

  assertThrows(IllegalArgumentException.class,() -> DateUtils.getFragmentInMinutes((Calendar)null,Calendar.MILLISECOND));

  assertThrows(IllegalArgumentException.class,() -> DateUtils.getFragmentInHours((Calendar)null,Calendar.MILLISECOND));

  assertThrows(IllegalArgumentException.class,() -> DateUtils.getFragmentInDays((Calendar)null,Calendar.MILLISECOND));

}

Location: DateUtilsFragmentTest.java

Content: 

@Test public void testNullDate(){

  assertThrows(NullPointerException.class,() -> DateUtils.getFragmentInMilliseconds((Date)null,Calendar.MILLISECOND));

  assertThrows(NullPointerException.class,() -> DateUtils.getFragmentInSeconds((Date)null,Calendar.MILLISECOND));

  assertThrows(NullPointerException.class,() -> DateUtils.getFragmentInMinutes((Date)null,Calendar.MILLISECOND));

  assertThrows(NullPointerException.class,() -> DateUtils.getFragmentInHours((Date)null,Calendar.MILLISECOND));

  assertThrows(NullPointerException.class,() -> DateUtils.getFragmentInDays((Date)null,Calendar.MILLISECOND));

}

Location: DateUtilsFragmentTest.java

Content: 

@Test public void testSecondFragmentInLargerUnitWithCalendar(){

  assertEquals(0,DateUtils.getFragmentInSeconds(aCalendar,Calendar.SECOND));

  assertEquals(0,DateUtils.getFragmentInMinutes(aCalendar,Calendar.SECOND));

  assertEquals(0,DateUtils.getFragmentInHours(aCalendar,Calendar.SECOND));

  assertEquals(0,DateUtils.getFragmentInDays(aCalendar,Calendar.SECOND));

}

Location: DateUtilsFragmentTest.java

Content: 

@Test public void testSecondFragmentInLargerUnitWithDate(){

  assertEquals(0,DateUtils.getFragmentInSeconds(aDate,Calendar.SECOND));

  assertEquals(0,DateUtils.getFragmentInMinutes(aDate,Calendar.SECOND));

  assertEquals(0,DateUtils.getFragmentInHours(aDate,Calendar.SECOND));

  assertEquals(0,DateUtils.getFragmentInDays(aDate,Calendar.SECOND));

}

Location: DateUtilsFragmentTest.java

Content: 

@Test public void testSecondsOfDayWithCalendar(){

  long testresult=DateUtils.getFragmentInSeconds(aCalendar,Calendar.DATE);

  final long expectedValue=seconds + ((minutes * DateUtils.MILLIS_PER_MINUTE) + (hours * DateUtils.MILLIS_PER_HOUR)) / DateUtils.MILLIS_PER_SECOND;

  assertEquals(expectedValue,testresult);

  testresult=DateUtils.getFragmentInSeconds(aCalendar,Calendar.DAY_OF_YEAR);

  assertEquals(expectedValue,testresult);

}

Location: DateUtilsFragmentTest.java

Content: 

@Test public void testSecondsOfDayWithDate(){

  long testresult=DateUtils.getFragmentInSeconds(aDate,Calendar.DATE);

  final long expectedValue=seconds + ((minutes * DateUtils.MILLIS_PER_MINUTE) + (hours * DateUtils.MILLIS_PER_HOUR)) / DateUtils.MILLIS_PER_SECOND;

  assertEquals(expectedValue,testresult);

  testresult=DateUtils.getFragmentInSeconds(aDate,Calendar.DAY_OF_YEAR);

  assertEquals(expectedValue,testresult);

}

Location: DateUtilsFragmentTest.java

Content: 

@Test public void testSecondsofHourWithCalendar(){

  final long testResult=DateUtils.getFragmentInSeconds(aCalendar,Calendar.HOUR_OF_DAY);

  assertEquals(seconds + (minutes * DateUtils.MILLIS_PER_MINUTE / DateUtils.MILLIS_PER_SECOND),testResult);

}

Location: DateUtilsFragmentTest.java

Content: 

@Test public void testSecondsofHourWithDate(){

  final long testResult=DateUtils.getFragmentInSeconds(aDate,Calendar.HOUR_OF_DAY);

  assertEquals(seconds + (minutes * DateUtils.MILLIS_PER_MINUTE / DateUtils.MILLIS_PER_SECOND),testResult);

}

Location: DateUtilsFragmentTest.java

Content: 

@Test public void testSecondsofMinuteWithCalendar(){

  final long testResult=DateUtils.getFragmentInSeconds(aCalendar,Calendar.MINUTE);

  assertEquals(seconds,testResult);

  assertEquals(aCalendar.get(Calendar.SECOND),testResult);

}

Location: DateUtilsFragmentTest.java

Content: 

@Test public void testSecondsofMinuteWithDate(){

  final long testResult=DateUtils.getFragmentInSeconds(aDate,Calendar.MINUTE);

  assertEquals(seconds,testResult);

}

Location: DateUtilsFragmentTest.java

Content: 

@Test public void testSecondsOfMonthWithCalendar(){

  final long testResult=DateUtils.getFragmentInSeconds(aCalendar,Calendar.MONTH);

  assertEquals(seconds + ((minutes * DateUtils.MILLIS_PER_MINUTE) + (hours * DateUtils.MILLIS_PER_HOUR) + ((days - 1) * DateUtils.MILLIS_PER_DAY)) / DateUtils.MILLIS_PER_SECOND,testResult);

}

Location: DateUtilsFragmentTest.java

Content: 

@Test public void testSecondsOfMonthWithDate(){

  final long testResult=DateUtils.getFragmentInSeconds(aDate,Calendar.MONTH);

  assertEquals(seconds + ((minutes * DateUtils.MILLIS_PER_MINUTE) + (hours * DateUtils.MILLIS_PER_HOUR) + ((days - 1) * DateUtils.MILLIS_PER_DAY)) / DateUtils.MILLIS_PER_SECOND,testResult);

}

Location: DateUtilsFragmentTest.java

Content: 

@Test public void testSecondsOfYearWithCalendar(){

  final long testResult=DateUtils.getFragmentInSeconds(aCalendar,Calendar.YEAR);

  assertEquals(seconds + ((minutes * DateUtils.MILLIS_PER_MINUTE) + (hours * DateUtils.MILLIS_PER_HOUR) + ((aCalendar.get(Calendar.DAY_OF_YEAR) - 1) * DateUtils.MILLIS_PER_DAY)) / DateUtils.MILLIS_PER_SECOND,testResult);

}

Location: DateUtilsFragmentTest.java

Content: 

@Test public void testSecondsOfYearWithDate(){

  final long testResult=DateUtils.getFragmentInSeconds(aDate,Calendar.YEAR);

  final Calendar cal=Calendar.getInstance();

  cal.setTime(aDate);

  assertEquals(seconds + ((minutes * DateUtils.MILLIS_PER_MINUTE) + (hours * DateUtils.MILLIS_PER_HOUR) + ((cal.get(Calendar.DAY_OF_YEAR) - 1) * DateUtils.MILLIS_PER_DAY)) / DateUtils.MILLIS_PER_SECOND,testResult);

}

