Location: Functions.java

Content: 

/** 

 * Consumes a consumer and rethrows any exception as a  {@link RuntimeException}.

 * @param consumer the consumer to consume

 * @param object1 the first object to consume by {@code consumer}

 * @param object2 the second object to consume by {@code consumer}

 * @param < O1 > the type of the first argument the consumer accepts

 * @param < O2 > the type of the second argument the consumer accepts

 * @param < T > the type of checked exception the consumer may throw

 */

public static <O1,O2,T extends Throwable>void accept(final FailableBiConsumer<O1,O2,T> consumer,final O1 object1,final O2 object2){

  run(() -> consumer.accept(object1,object2));

}

Location: Functions.java

Content: 

/** 

 * Consumes a consumer and rethrows any exception as a  {@link RuntimeException}.

 * @param consumer the consumer to consume

 * @param object the object to consume by {@code consumer}

 * @param < O > the type the consumer accepts

 * @param < T > the type of checked exception the consumer may throw

 */

public static <O,T extends Throwable>void accept(final FailableConsumer<O,T> consumer,final O object){

  run(() -> consumer.accept(object));

}

Location: Functions.java

Content: 

/** 

 * Applies a function and rethrows any exception as a  {@link RuntimeException}.

 * @param function the function to apply

 * @param input1 the first input to apply {@code function} on

 * @param input2 the second input to apply {@code function} on

 * @param < O1 > the type of the first argument the function accepts

 * @param < O2 > the type of the second argument the function accepts

 * @param < O > the return type of the function

 * @param < T > the type of checked exception the function may throw

 * @return the value returned from the function

 */

public static <O1,O2,O,T extends Throwable>O apply(final FailableBiFunction<O1,O2,O,T> function,final O1 input1,final O2 input2){

  return get(() -> function.apply(input1,input2));

}

Location: Functions.java

Content: 

/** 

 * Applies a function and rethrows any exception as a  {@link RuntimeException}.

 * @param function the function to apply

 * @param input the input to apply {@code function} on

 * @param < I > the type of the argument the function accepts

 * @param < O > the return type of the function

 * @param < T > the type of checked exception the function may throw

 * @return the value returned from the function

 */

public static <I,O,T extends Throwable>O apply(final FailableFunction<I,O,T> function,final I input){

  return get(() -> function.apply(input));

}

Location: Functions.java

Content: 

/** 

 * Tests a predicate and rethrows any exception as a  {@link RuntimeException}.

 * @param predicate the predicate to test

 * @param object1 the first input to test by {@code predicate}

 * @param object2 the second input to test by {@code predicate}

 * @param < O1 > the type of the first argument the predicate tests

 * @param < O2 > the type of the second argument the predicate tests

 * @param < T > the type of checked exception the predicate may throw

 * @return the boolean value returned by the predicate

 */

public static <O1,O2,T extends Throwable>boolean test(final FailableBiPredicate<O1,O2,T> predicate,final O1 object1,final O2 object2){

  return getAsBoolean(() -> predicate.test(object1,object2));

}

Location: Functions.java

Content: 

/** 

 * Tests a predicate and rethrows any exception as a  {@link RuntimeException}.

 * @param predicate the predicate to test

 * @param object the input to test by {@code predicate}

 * @param < O > the type of argument the predicate tests

 * @param < T > the type of checked exception the predicate may throw

 * @return the boolean value returned by the predicate

 */

public static <O,T extends Throwable>boolean test(final FailablePredicate<O,T> predicate,final O object){

  return getAsBoolean(() -> predicate.test(object));

}

