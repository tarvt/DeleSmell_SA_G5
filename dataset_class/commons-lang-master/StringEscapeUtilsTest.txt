Location: StringEscapeUtilsTest.java

Content: 

private void assertEscapeJava(final String escaped,final String original) throws IOException {

  assertEscapeJava(null,escaped,original);

}

Location: StringEscapeUtilsTest.java

Content: 

private void assertEscapeJava(String message,final String expected,final String original) throws IOException {

  final String converted=StringEscapeUtils.escapeJava(original);

  message="escapeJava(String) failed" + (message == null ? "" : (": " + message));

  assertEquals(expected,converted,message);

  final StringWriter writer=new StringWriter();

  StringEscapeUtils.ESCAPE_JAVA.translate(original,writer);

  assertEquals(expected,writer.toString());

}

Location: StringEscapeUtilsTest.java

Content: 

private void assertUnescapeJava(final String unescaped,final String original) throws IOException {

  assertUnescapeJava(null,unescaped,original);

}

Location: StringEscapeUtilsTest.java

Content: 

private void assertUnescapeJava(final String message,final String unescaped,final String original) throws IOException {

  final String expected=unescaped;

  final String actual=StringEscapeUtils.unescapeJava(original);

  assertEquals(expected,actual,"unescape(String) failed" + (message == null ? "" : (": " + message)) + ": expected '"+ StringEscapeUtils.escapeJava(expected)+ "' actual '"+ StringEscapeUtils.escapeJava(actual)+ "'");

  final StringWriter writer=new StringWriter();

  StringEscapeUtils.UNESCAPE_JAVA.translate(original,writer);

  assertEquals(unescaped,writer.toString());

}

Location: StringEscapeUtilsTest.java

Content: 

private void checkCsvEscapeWriter(final String expected,final String value) throws IOException {

  final StringWriter writer=new StringWriter();

  StringEscapeUtils.ESCAPE_CSV.translate(value,writer);

  assertEquals(expected,writer.toString());

}

Location: StringEscapeUtilsTest.java

Content: 

private void checkCsvUnescapeWriter(final String expected,final String value) throws IOException {

  final StringWriter writer=new StringWriter();

  StringEscapeUtils.UNESCAPE_CSV.translate(value,writer);

  assertEquals(expected,writer.toString());

}

Location: StringEscapeUtilsTest.java

Content: 

@Test public void testEscapeCsvIllegalStateException(){

  final StringWriter writer=new StringWriter();

  assertThrows(IllegalStateException.class,() -> StringEscapeUtils.ESCAPE_CSV.translate("foo",-1,writer));

}

Location: StringEscapeUtilsTest.java

Content: 

@Test public void testEscapeCsvString(){

  assertEquals("foo.bar",StringEscapeUtils.escapeCsv("foo.bar"));

  assertEquals("\"foo,bar\"",StringEscapeUtils.escapeCsv("foo,bar"));

  assertEquals("\"foo\nbar\"",StringEscapeUtils.escapeCsv("foo\nbar"));

  assertEquals("\"foo\rbar\"",StringEscapeUtils.escapeCsv("foo\rbar"));

  assertEquals("\"foo\"\"bar\"",StringEscapeUtils.escapeCsv("foo\"bar"));

  assertEquals("foo\uD84C\uDFB4bar",StringEscapeUtils.escapeCsv("foo\uD84C\uDFB4bar"));

  assertEquals("",StringEscapeUtils.escapeCsv(""));

  assertNull(StringEscapeUtils.escapeCsv(null));

}

Location: StringEscapeUtilsTest.java

Content: 

@Test public void testEscapeCsvWriter() throws Exception {

  checkCsvEscapeWriter("foo.bar","foo.bar");

  checkCsvEscapeWriter("\"foo,bar\"","foo,bar");

  checkCsvEscapeWriter("\"foo\nbar\"","foo\nbar");

  checkCsvEscapeWriter("\"foo\rbar\"","foo\rbar");

  checkCsvEscapeWriter("\"foo\"\"bar\"","foo\"bar");

  checkCsvEscapeWriter("foo\uD84C\uDFB4bar","foo\uD84C\uDFB4bar");

  checkCsvEscapeWriter("",null);

  checkCsvEscapeWriter("","");

}

Location: StringEscapeUtilsTest.java

Content: 

@Test public void testEscapeEcmaScript(){

  assertNull(StringEscapeUtils.escapeEcmaScript(null));

  assertThrows(IllegalArgumentException.class,() -> StringEscapeUtils.ESCAPE_ECMASCRIPT.translate(null,null));

  assertThrows(IllegalArgumentException.class,() -> StringEscapeUtils.ESCAPE_ECMASCRIPT.translate("",null));

  assertEquals("He didn\\'t say, \\\"stop!\\\"",StringEscapeUtils.escapeEcmaScript("He didn't say, \"stop!\""));

  assertEquals("document.getElementById(\\\"test\\\").value = \\'<script>alert(\\'aaa\\');<\\/script>\\';",StringEscapeUtils.escapeEcmaScript("document.getElementById(\"test\").value = '<script>alert('aaa');</script>';"));

}

Location: StringEscapeUtilsTest.java

Content: 

/** 

 * Tests https://issues.apache.org/jira/browse/LANG-339

 */

@Test public void testEscapeHiragana(){

  final String original="\u304B\u304C\u3068";

  final String escaped=StringEscapeUtils.escapeHtml4(original);

  assertEquals(original,escaped,"Hiragana character Unicode behavior should not be being escaped by escapeHtml4");

  final String unescaped=StringEscapeUtils.unescapeHtml4(escaped);

  assertEquals(escaped,unescaped,"Hiragana character Unicode behavior has changed - expected no unescaping");

}

Location: StringEscapeUtilsTest.java

Content: 

@Test public void testEscapeHtml() throws IOException {

  for (  final String[] element : HTML_ESCAPES) {

    final String message=element[0];

    final String expected=element[1];

    final String original=element[2];

    assertEquals(expected,StringEscapeUtils.escapeHtml4(original),message);

    final StringWriter sw=new StringWriter();

    StringEscapeUtils.ESCAPE_HTML4.translate(original,sw);

    final String actual=original == null ? null : sw.toString();

    assertEquals(expected,actual,message);

  }

}

Location: StringEscapeUtilsTest.java

Content: 

/** 

 * Tests // https://issues.apache.org/jira/browse/LANG-480

 */

@Test public void testEscapeHtmlHighUnicode(){

  final byte[] data={(byte)0xF0,(byte)0x9D,(byte)0x8D,(byte)0xA2};

  final String original=new String(data,StandardCharsets.UTF_8);

  final String escaped=StringEscapeUtils.escapeHtml4(original);

  assertEquals(original,escaped,"High Unicode should not have been escaped");

  final String unescaped=StringEscapeUtils.unescapeHtml4(escaped);

  assertEquals(original,unescaped,"High Unicode should have been unchanged");

}

Location: StringEscapeUtilsTest.java

Content: 

@Test public void testEscapeHtmlVersions(){

  assertEquals("&Beta;",StringEscapeUtils.escapeHtml4("\u0392"));

  assertEquals("\u0392",StringEscapeUtils.unescapeHtml4("&Beta;"));

}

Location: StringEscapeUtilsTest.java

Content: 

@Test public void testEscapeJava() throws IOException {

  assertNull(StringEscapeUtils.escapeJava(null));

  assertThrows(IllegalArgumentException.class,() -> StringEscapeUtils.ESCAPE_JAVA.translate(null,null));

  assertThrows(IllegalArgumentException.class,() -> StringEscapeUtils.ESCAPE_JAVA.translate("",null));

  assertEscapeJava("empty string","","");

  assertEscapeJava(FOO,FOO);

  assertEscapeJava("tab","\\t","\t");

  assertEscapeJava("backslash","\\\\","\\");

  assertEscapeJava("single quote should not be escaped","'","'");

  assertEscapeJava("\\\\\\b\\t\\r","\\\b\t\r");

  assertEscapeJava("\\u1234","\u1234");

  assertEscapeJava("\\u0234","\u0234");

  assertEscapeJava("\\u00EF","\u00ef");

  assertEscapeJava("\\u0001","\u0001");

  assertEscapeJava("Should use capitalized Unicode hex","\\uABCD","\uabcd");

  assertEscapeJava("He didn't say, \\\"stop!\\\"","He didn't say, \"stop!\"");

  assertEscapeJava("non-breaking space","This space is non-breaking:" + "\\u00A0","This space is non-breaking:\u00a0");

  assertEscapeJava("\\uABCD\\u1234\\u012C","\uABCD\u1234\u012C");

}

Location: StringEscapeUtilsTest.java

Content: 

/** 

 * Tests https://issues.apache.org/jira/browse/LANG-421

 */

@Test public void testEscapeJavaWithSlash(){

  final String input="String with a slash (/) in it";

  final String expected=input;

  final String actual=StringEscapeUtils.escapeJava(input);

  assertEquals(expected,actual);

}

Location: StringEscapeUtilsTest.java

Content: 

@Test public void testEscapeJson(){

  assertNull(StringEscapeUtils.escapeJson(null));

  assertThrows(IllegalArgumentException.class,() -> StringEscapeUtils.ESCAPE_JSON.translate(null,null));

  assertThrows(IllegalArgumentException.class,() -> StringEscapeUtils.ESCAPE_JSON.translate("",null));

  assertEquals("He didn't say, \\\"stop!\\\"",StringEscapeUtils.escapeJson("He didn't say, \"stop!\""));

  final String expected="\\\"foo\\\" isn't \\\"bar\\\". specials: \\b\\r\\n\\f\\t\\\\\\/";

  final String input="\"foo\" isn't \"bar\". specials: \b\r\n\f\t\\/";

  assertEquals(expected,StringEscapeUtils.escapeJson(input));

}

Location: StringEscapeUtilsTest.java

Content: 

@Test public void testEscapeXml() throws Exception {

  assertEquals("&lt;abc&gt;",StringEscapeUtils.escapeXml("<abc>"));

  assertEquals("<abc>",StringEscapeUtils.unescapeXml("&lt;abc&gt;"));

  assertEquals("\u00A1",StringEscapeUtils.escapeXml("\u00A1"),"XML should not escape >0x7f values");

  assertEquals("\u00A0",StringEscapeUtils.unescapeXml("&#160;"),"XML should be able to unescape >0x7f values");

  assertEquals("\u00A0",StringEscapeUtils.unescapeXml("&#0160;"),"XML should be able to unescape >0x7f values with one leading 0");

  assertEquals("\u00A0",StringEscapeUtils.unescapeXml("&#00160;"),"XML should be able to unescape >0x7f values with two leading 0s");

  assertEquals("\u00A0",StringEscapeUtils.unescapeXml("&#000160;"),"XML should be able to unescape >0x7f values with three leading 0s");

  assertEquals("ain't",StringEscapeUtils.unescapeXml("ain&apos;t"));

  assertEquals("ain&apos;t",StringEscapeUtils.escapeXml("ain't"));

  assertEquals("",StringEscapeUtils.escapeXml(""));

  assertNull(StringEscapeUtils.escapeXml(null));

  assertNull(StringEscapeUtils.unescapeXml(null));

  StringWriter sw=new StringWriter();

  StringEscapeUtils.ESCAPE_XML.translate("<abc>",sw);

  assertEquals("&lt;abc&gt;",sw.toString(),"XML was escaped incorrectly");

  sw=new StringWriter();

  StringEscapeUtils.UNESCAPE_XML.translate("&lt;abc&gt;",sw);

  assertEquals("<abc>",sw.toString(),"XML was unescaped incorrectly");

}

Location: StringEscapeUtilsTest.java

Content: 

@Test public void testEscapeXml10(){

  assertEquals("a&lt;b&gt;c&quot;d&apos;e&amp;f",StringEscapeUtils.escapeXml10("a<b>c\"d'e&f"));

  assertEquals("a\tb\rc\nd",StringEscapeUtils.escapeXml10("a\tb\rc\nd"),"XML 1.0 should not escape \t \n \r");

  assertEquals("ab",StringEscapeUtils.escapeXml10("a\u0000\u0001\u0008\u000b\u000c\u000e\u001fb"),"XML 1.0 should omit most #x0-x8 | #xb | #xc | #xe-#x19");

  assertEquals("a\ud7ff  \ue000b",StringEscapeUtils.escapeXml10("a\ud7ff\ud800 \udfff \ue000b"),"XML 1.0 should omit #xd800-#xdfff");

  assertEquals("a\ufffdb",StringEscapeUtils.escapeXml10("a\ufffd\ufffe\uffffb"),"XML 1.0 should omit #xfffe | #xffff");

  assertEquals("a\u007e&#127;&#132;\u0085&#134;&#159;\u00a0b",StringEscapeUtils.escapeXml10("a\u007e\u007f\u0084\u0085\u0086\u009f\u00a0b"),"XML 1.0 should escape #x7f-#x84 | #x86 - #x9f, for XML 1.1 compatibility");

}

Location: StringEscapeUtilsTest.java

Content: 

@Test public void testEscapeXml11(){

  assertEquals("a&lt;b&gt;c&quot;d&apos;e&amp;f",StringEscapeUtils.escapeXml11("a<b>c\"d'e&f"));

  assertEquals("a\tb\rc\nd",StringEscapeUtils.escapeXml11("a\tb\rc\nd"),"XML 1.1 should not escape \t \n \r");

  assertEquals("ab",StringEscapeUtils.escapeXml11("a\u0000b"),"XML 1.1 should omit #x0");

  assertEquals("a&#1;&#8;&#11;&#12;&#14;&#31;b",StringEscapeUtils.escapeXml11("a\u0001\u0008\u000b\u000c\u000e\u001fb"),"XML 1.1 should escape #x1-x8 | #xb | #xc | #xe-#x19");

  assertEquals("a\u007e&#127;&#132;\u0085&#134;&#159;\u00a0b",StringEscapeUtils.escapeXml11("a\u007e\u007f\u0084\u0085\u0086\u009f\u00a0b"),"XML 1.1 should escape #x7F-#x84 | #x86-#x9F");

  assertEquals("a\ud7ff  \ue000b",StringEscapeUtils.escapeXml11("a\ud7ff\ud800 \udfff \ue000b"),"XML 1.1 should omit #xd800-#xdfff");

  assertEquals("a\ufffdb",StringEscapeUtils.escapeXml11("a\ufffd\ufffe\uffffb"),"XML 1.1 should omit #xfffe | #xffff");

}

Location: StringEscapeUtilsTest.java

Content: 

@Test public void testEscapeXmlAllCharacters(){

  final CharSequenceTranslator escapeXml=StringEscapeUtils.ESCAPE_XML.with(NumericEntityEscaper.below(9),NumericEntityEscaper.between(0xB,0xC),NumericEntityEscaper.between(0xE,0x19),NumericEntityEscaper.between(0xD800,0xDFFF),NumericEntityEscaper.between(0xFFFE,0xFFFF),NumericEntityEscaper.above(0x110000));

  assertEquals("&#0;&#1;&#2;&#3;&#4;&#5;&#6;&#7;&#8;",escapeXml.translate("\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\u0008"));

  assertEquals("\t",escapeXml.translate("\t"));

  assertEquals("\n",escapeXml.translate("\n"));

  assertEquals("&#11;&#12;",escapeXml.translate("\u000B\u000C"));

  assertEquals("\r",escapeXml.translate("\r"));

  assertEquals("Hello World! Ain&apos;t this great?",escapeXml.translate("Hello World! Ain't this great?"));

  assertEquals("&#14;&#15;&#24;&#25;",escapeXml.translate("\u000E\u000F\u0018\u0019"));

}

Location: StringEscapeUtilsTest.java

Content: 

/** 

 * Tests Supplementary characters. <p> From http://www.w3.org/International/questions/qa-escapes </p> <blockquote> Supplementary characters are those Unicode characters that have code points higher than the characters in the Basic Multilingual Plane (BMP). In UTF-16 a supplementary character is encoded using two 16-bit surrogate code points from the BMP. Because of this, some people think that supplementary characters need to be represented using two escapes, but this is incorrect - you must use the single, code point value for that character. For example, use &amp;&#35;x233B4&#59; rather than &amp;&#35;xD84C&#59;&amp;&#35;xDFB4&#59;. </blockquote>

 * @see <a href="http://www.w3.org/International/questions/qa-escapes">Using character escapes in markup and CSS</a>

 * @see <a href="https://issues.apache.org/jira/browse/LANG-728">LANG-728</a>

 */

@Test public void testEscapeXmlSupplementaryCharacters(){

  final CharSequenceTranslator escapeXml=StringEscapeUtils.ESCAPE_XML.with(NumericEntityEscaper.between(0x7f,Integer.MAX_VALUE));

  assertEquals("&#144308;",escapeXml.translate("\uD84C\uDFB4"),"Supplementary character must be represented using a single escape");

  assertEquals("a b c &#144308;",escapeXml.translate("a b c \uD84C\uDFB4"),"Supplementary characters mixed with basic characters should be encoded correctly");

}

Location: StringEscapeUtilsTest.java

Content: 

@Test public void testLang313(){

  assertEquals("& &",StringEscapeUtils.unescapeHtml4("& &amp;"));

}

Location: StringEscapeUtilsTest.java

Content: 

/** 

 * Tests https://issues.apache.org/jira/browse/LANG-708

 * @throws IOException if an I/O error occurs

 */

@Test public void testLang708() throws IOException {

  final byte[] inputBytes=Files.readAllBytes(Paths.get("src/test/resources/lang-708-input.txt"));

  final String input=new String(inputBytes,StandardCharsets.UTF_8);

  final String escaped=StringEscapeUtils.escapeEcmaScript(input);

  assertTrue(escaped.endsWith("}]"),escaped);

  assertTrue(escaped.endsWith("\"valueCode\\\":\\\"\\\"}]"),escaped);

}

Location: StringEscapeUtilsTest.java

Content: 

/** 

 * Tests https://issues.apache.org/jira/browse/LANG-720

 */

@Test public void testLang720(){

  final String input="\ud842\udfb7" + "A";

  final String escaped=StringEscapeUtils.escapeXml(input);

  assertEquals(input,escaped);

}

Location: StringEscapeUtilsTest.java

Content: 

/** 

 * Tests https://issues.apache.org/jira/browse/LANG-911

 */

@Test public void testLang911(){

  final String bellsTest="\ud83d\udc80\ud83d\udd14";

  final String value=StringEscapeUtils.escapeJava(bellsTest);

  final String valueTest=StringEscapeUtils.unescapeJava(value);

  assertEquals(bellsTest,valueTest);

}

Location: StringEscapeUtilsTest.java

Content: 

@Test public void testStandaloneAmphersand(){

  assertEquals("<P&O>",StringEscapeUtils.unescapeHtml4("&lt;P&O&gt;"));

  assertEquals("test & <",StringEscapeUtils.unescapeHtml4("test & &lt;"));

  assertEquals("<P&O>",StringEscapeUtils.unescapeXml("&lt;P&O&gt;"));

  assertEquals("test & <",StringEscapeUtils.unescapeXml("test & &lt;"));

}

Location: StringEscapeUtilsTest.java

Content: 

@Test public void testUnescapeCsvIllegalStateException(){

  final StringWriter writer=new StringWriter();

  assertThrows(IllegalStateException.class,() -> StringEscapeUtils.UNESCAPE_CSV.translate("foo",-1,writer));

}

Location: StringEscapeUtilsTest.java

Content: 

@Test public void testUnescapeCsvString(){

  assertEquals("foo.bar",StringEscapeUtils.unescapeCsv("foo.bar"));

  assertEquals("foo,bar",StringEscapeUtils.unescapeCsv("\"foo,bar\""));

  assertEquals("foo\nbar",StringEscapeUtils.unescapeCsv("\"foo\nbar\""));

  assertEquals("foo\rbar",StringEscapeUtils.unescapeCsv("\"foo\rbar\""));

  assertEquals("foo\"bar",StringEscapeUtils.unescapeCsv("\"foo\"\"bar\""));

  assertEquals("foo\uD84C\uDFB4bar",StringEscapeUtils.unescapeCsv("foo\uD84C\uDFB4bar"));

  assertEquals("",StringEscapeUtils.unescapeCsv(""));

  assertNull(StringEscapeUtils.unescapeCsv(null));

  assertEquals("\"foo.bar\"",StringEscapeUtils.unescapeCsv("\"foo.bar\""));

}

Location: StringEscapeUtilsTest.java

Content: 

@Test public void testUnescapeCsvWriter() throws Exception {

  checkCsvUnescapeWriter("foo.bar","foo.bar");

  checkCsvUnescapeWriter("foo,bar","\"foo,bar\"");

  checkCsvUnescapeWriter("foo\nbar","\"foo\nbar\"");

  checkCsvUnescapeWriter("foo\rbar","\"foo\rbar\"");

  checkCsvUnescapeWriter("foo\"bar","\"foo\"\"bar\"");

  checkCsvUnescapeWriter("foo\uD84C\uDFB4bar","foo\uD84C\uDFB4bar");

  checkCsvUnescapeWriter("",null);

  checkCsvUnescapeWriter("","");

  checkCsvUnescapeWriter("\"foo.bar\"","\"foo.bar\"");

}

Location: StringEscapeUtilsTest.java

Content: 

@Test public void testUnescapeEcmaScript(){

  assertNull(StringEscapeUtils.escapeEcmaScript(null));

  assertThrows(IllegalArgumentException.class,() -> StringEscapeUtils.UNESCAPE_ECMASCRIPT.translate(null,null));

  assertThrows(IllegalArgumentException.class,() -> StringEscapeUtils.UNESCAPE_ECMASCRIPT.translate("",null));

  assertEquals("He didn't say, \"stop!\"",StringEscapeUtils.unescapeEcmaScript("He didn\\'t say, \\\"stop!\\\""));

  assertEquals("document.getElementById(\"test\").value = '<script>alert('aaa');</script>';",StringEscapeUtils.unescapeEcmaScript("document.getElementById(\\\"test\\\").value = \\'<script>alert(\\'aaa\\');<\\/script>\\';"));

}

Location: StringEscapeUtilsTest.java

Content: 

@Test public void testUnescapeHexCharsHtml(){

  assertEquals("\u0080\u009F",StringEscapeUtils.unescapeHtml4("&#x80;&#x9F;"),"hex number unescape");

  assertEquals("\u0080\u009F",StringEscapeUtils.unescapeHtml4("&#X80;&#X9F;"),"hex number unescape");

  for (char i=Character.MIN_VALUE; i < Character.MAX_VALUE; i++) {

    final Character c1=Character.valueOf(i);

    final Character c2=Character.valueOf((char)(i + 1));

    final String expected=c1.toString() + c2.toString();

    final String escapedC1="&#x" + Integer.toHexString((c1.charValue())) + ";";

    final String escapedC2="&#x" + Integer.toHexString((c2.charValue())) + ";";

    assertEquals(expected,StringEscapeUtils.unescapeHtml4(escapedC1 + escapedC2),"hex number unescape index " + (int)i);

  }

}

Location: StringEscapeUtilsTest.java

Content: 

@Test public void testUnescapeHtml4() throws IOException {

  for (  final String[] element : HTML_ESCAPES) {

    final String message=element[0];

    final String expected=element[2];

    final String original=element[1];

    assertEquals(expected,StringEscapeUtils.unescapeHtml4(original),message);

    final StringWriter sw=new StringWriter();

    StringEscapeUtils.UNESCAPE_HTML4.translate(original,sw);

    final String actual=original == null ? null : sw.toString();

    assertEquals(expected,actual,message);

  }

  assertEquals("Fran\u00E7ais",StringEscapeUtils.unescapeHtml4("Fran\u00E7ais"),"funny chars pass through OK");

  assertEquals("Hello&;World",StringEscapeUtils.unescapeHtml4("Hello&;World"));

  assertEquals("Hello&#;World",StringEscapeUtils.unescapeHtml4("Hello&#;World"));

  assertEquals("Hello&# ;World",StringEscapeUtils.unescapeHtml4("Hello&# ;World"));

  assertEquals("Hello&##;World",StringEscapeUtils.unescapeHtml4("Hello&##;World"));

}

Location: StringEscapeUtilsTest.java

Content: 

@Test public void testUnescapeJava() throws IOException {

  assertNull(StringEscapeUtils.unescapeJava(null));

  assertThrows(IllegalArgumentException.class,() -> StringEscapeUtils.UNESCAPE_JAVA.translate(null,null));

  assertThrows(IllegalArgumentException.class,() -> StringEscapeUtils.UNESCAPE_JAVA.translate("",null));

  assertThrows(RuntimeException.class,() -> StringEscapeUtils.unescapeJava("\\u02-3"));

  assertUnescapeJava("","");

  assertUnescapeJava("test","test");

  assertUnescapeJava("\ntest\b","\\ntest\\b");

  assertUnescapeJava("\u123425foo\ntest\b","\\u123425foo\\ntest\\b");

  assertUnescapeJava("'\foo\teste\r","\\'\\foo\\teste\\r");

  assertUnescapeJava("","\\");

  assertUnescapeJava("lowercase Unicode","\uABCDx","\\uabcdx");

  assertUnescapeJava("uppercase Unicode","\uABCDx","\\uABCDx");

  assertUnescapeJava("Unicode as final character","\uABCD","\\uabcd");

}

Location: StringEscapeUtilsTest.java

Content: 

@Test public void testUnescapeJson(){

  assertNull(StringEscapeUtils.unescapeJson(null));

  assertThrows(IllegalArgumentException.class,() -> StringEscapeUtils.UNESCAPE_JSON.translate(null,null));

  assertThrows(IllegalArgumentException.class,() -> StringEscapeUtils.UNESCAPE_JSON.translate("",null));

  assertEquals("He didn't say, \"stop!\"",StringEscapeUtils.unescapeJson("He didn't say, \\\"stop!\\\""));

  final String expected="\"foo\" isn't \"bar\". specials: \b\r\n\f\t\\/";

  final String input="\\\"foo\\\" isn't \\\"bar\\\". specials: \\b\\r\\n\\f\\t\\\\\\/";

  assertEquals(expected,StringEscapeUtils.unescapeJson(input));

}

Location: StringEscapeUtilsTest.java

Content: 

@Test public void testUnescapeUnknownEntity(){

  assertEquals("&zzzz;",StringEscapeUtils.unescapeHtml4("&zzzz;"));

}

Location: StringEscapeUtilsTest.java

Content: 

/** 

 * Reverse of the above.

 * @see <a href="https://issues.apache.org/jira/browse/LANG-729">LANG-729</a>

 */

@Test public void testUnescapeXmlSupplementaryCharacters(){

  assertEquals("\uD84C\uDFB4",StringEscapeUtils.unescapeXml("&#144308;"),"Supplementary character must be represented using a single escape");

  assertEquals("a b c \uD84C\uDFB4",StringEscapeUtils.unescapeXml("a b c &#144308;"),"Supplementary characters mixed with basic characters should be decoded correctly");

}

