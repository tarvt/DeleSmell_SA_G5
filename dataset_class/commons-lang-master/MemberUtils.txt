Location: MemberUtils.java

Content: 

/** 

 * Compares the relative fitness of two Constructors in terms of how well they match a set of runtime parameter types, such that a list ordered by the results of the comparison would return the best match first (least).

 * @param left the "left" Constructor

 * @param right the "right" Constructor

 * @param actual the runtime parameter types to match against{@code left}/ {@code right}

 * @return int consistent with {@code compare} semantics

 * @since 3.5

 */

static int compareConstructorFit(final Constructor<?> left,final Constructor<?> right,final Class<?>[] actual){

  return compareParameterTypes(Executable.of(left),Executable.of(right),actual);

}

Location: MemberUtils.java

Content: 

/** 

 * Compares the relative fitness of two Methods in terms of how well they match a set of runtime parameter types, such that a list ordered by the results of the comparison would return the best match first (least).

 * @param left the "left" Method

 * @param right the "right" Method

 * @param actual the runtime parameter types to match against{@code left}/ {@code right}

 * @return int consistent with {@code compare} semantics

 * @since 3.5

 */

static int compareMethodFit(final Method left,final Method right,final Class<?>[] actual){

  return compareParameterTypes(Executable.of(left),Executable.of(right),actual);

}

Location: MemberUtils.java

Content: 

/** 

 * Compares the relative fitness of two Executables in terms of how well they match a set of runtime parameter types, such that a list ordered by the results of the comparison would return the best match first (least).

 * @param left the "left" Executable

 * @param right the "right" Executable

 * @param actual the runtime parameter types to match against{@code left}/ {@code right}

 * @return int consistent with {@code compare} semantics

 */

private static int compareParameterTypes(final Executable left,final Executable right,final Class<?>[] actual){

  final float leftCost=getTotalTransformationCost(actual,left);

  final float rightCost=getTotalTransformationCost(actual,right);

  return Float.compare(leftCost,rightCost);

}

Location: MemberUtils.java

Content: 

/** 

 * Gets the number of steps required needed to turn the source class into the destination class. This represents the number of steps in the object hierarchy graph.

 * @param srcClass The source class

 * @param destClass The destination class

 * @return The cost of transforming an object

 */

private static float getObjectTransformationCost(Class<?> srcClass,final Class<?> destClass){

  if (destClass.isPrimitive()) {

    return getPrimitivePromotionCost(srcClass,destClass);

  }

  float cost=0.0f;

  while (srcClass != null && !destClass.equals(srcClass)) {

    if (destClass.isInterface() && ClassUtils.isAssignable(srcClass,destClass)) {

      cost+=0.25f;

      break;

    }

    cost++;

    srcClass=srcClass.getSuperclass();

  }

  if (srcClass == null) {

    cost+=1.5f;

  }

  return cost;

}

Location: MemberUtils.java

Content: 

/** 

 * Gets the number of steps required to promote a primitive number to another type.

 * @param srcClass the (primitive) source class

 * @param destClass the (primitive) destination class

 * @return The cost of promoting the primitive

 */

private static float getPrimitivePromotionCost(final Class<?> srcClass,final Class<?> destClass){

  if (srcClass == null) {

    return 1.5f;

  }

  float cost=0.0f;

  Class<?> cls=srcClass;

  if (!cls.isPrimitive()) {

    cost+=0.1f;

    cls=ClassUtils.wrapperToPrimitive(cls);

  }

  for (int i=0; cls != destClass && i < ORDERED_PRIMITIVE_TYPES.length; i++) {

    if (cls == ORDERED_PRIMITIVE_TYPES[i]) {

      cost+=0.1f;

      if (i < ORDERED_PRIMITIVE_TYPES.length - 1) {

        cls=ORDERED_PRIMITIVE_TYPES[i + 1];

      }

    }

  }

  return cost;

}

Location: MemberUtils.java

Content: 

/** 

 * Returns the sum of the object transformation cost for each class in the source argument list.

 * @param srcArgs The source arguments

 * @param executable The executable to calculate transformation costs for

 * @return The total transformation cost

 */

private static float getTotalTransformationCost(final Class<?>[] srcArgs,final Executable executable){

  final Class<?>[] destArgs=executable.getParameterTypes();

  final boolean isVarArgs=executable.isVarArgs();

  float totalCost=0.0f;

  final long normalArgsLen=isVarArgs ? destArgs.length - 1 : destArgs.length;

  if (srcArgs.length < normalArgsLen) {

    return Float.MAX_VALUE;

  }

  for (int i=0; i < normalArgsLen; i++) {

    totalCost+=getObjectTransformationCost(srcArgs[i],destArgs[i]);

  }

  if (isVarArgs) {

    final boolean noVarArgsPassed=srcArgs.length < destArgs.length;

    final boolean explicitArrayForVarargs=srcArgs.length == destArgs.length && srcArgs[srcArgs.length - 1] != null && srcArgs[srcArgs.length - 1].isArray();

    final float varArgsCost=0.001f;

    final Class<?> destClass=destArgs[destArgs.length - 1].getComponentType();

    if (noVarArgsPassed) {

      totalCost+=getObjectTransformationCost(destClass,Object.class) + varArgsCost;

    }

 else     if (explicitArrayForVarargs) {

      final Class<?> sourceClass=srcArgs[srcArgs.length - 1].getComponentType();

      totalCost+=getObjectTransformationCost(sourceClass,destClass) + varArgsCost;

    }

 else {

      for (int i=destArgs.length - 1; i < srcArgs.length; i++) {

        final Class<?> srcClass=srcArgs[i];

        totalCost+=getObjectTransformationCost(srcClass,destClass) + varArgsCost;

      }

    }

  }

  return totalCost;

}

Location: MemberUtils.java

Content: 

/** 

 * Returns whether a  {@link Member} is accessible.

 * @param m Member to check

 * @return {@code true} if {@code m} is accessible

 */

static boolean isAccessible(final Member m){

  return m != null && Modifier.isPublic(m.getModifiers()) && !m.isSynthetic();

}

Location: MemberUtils.java

Content: 

static boolean isMatchingConstructor(final Constructor<?> method,final Class<?>[] parameterTypes){

  return isMatchingExecutable(Executable.of(method),parameterTypes);

}

Location: MemberUtils.java

Content: 

private static boolean isMatchingExecutable(final Executable method,final Class<?>[] parameterTypes){

  final Class<?>[] methodParameterTypes=method.getParameterTypes();

  if (ClassUtils.isAssignable(parameterTypes,methodParameterTypes,true)) {

    return true;

  }

  if (method.isVarArgs()) {

    int i;

    for (i=0; i < methodParameterTypes.length - 1 && i < parameterTypes.length; i++) {

      if (!ClassUtils.isAssignable(parameterTypes[i],methodParameterTypes[i],true)) {

        return false;

      }

    }

    final Class<?> varArgParameterType=methodParameterTypes[methodParameterTypes.length - 1].getComponentType();

    for (; i < parameterTypes.length; i++) {

      if (!ClassUtils.isAssignable(parameterTypes[i],varArgParameterType,true)) {

        return false;

      }

    }

    return true;

  }

  return false;

}

Location: MemberUtils.java

Content: 

static boolean isMatchingMethod(final Method method,final Class<?>[] parameterTypes){

  return isMatchingExecutable(Executable.of(method),parameterTypes);

}

Location: MemberUtils.java

Content: 

/** 

 * Returns whether a given set of modifiers implies package access.

 * @param modifiers to test

 * @return {@code true} unless {@code package}/ {@code protected}/ {@code private} modifier detected

 */

static boolean isPackageAccess(final int modifiers){

  return (modifiers & ACCESS_TEST) == 0;

}

Location: MemberUtils.java

Content: 

/** 

 * Default access superclass workaround. When a  {@code public} class has a default access superclass with {@code public} members,these members are accessible. Calling them from compiled code works fine. Unfortunately, on some JVMs, using reflection to invoke these members seems to (wrongly) prevent access even when the modifier is  {@code public}. Calling  {@code setAccessible(true)} solves the problem but will only work fromsufficiently privileged code. Better workarounds would be gratefully accepted.

 * @param o the AccessibleObject to set as accessible

 * @return a boolean indicating whether the accessibility of the object was set to true.

 */

static boolean setAccessibleWorkaround(final AccessibleObject o){

  if (o == null || o.isAccessible()) {

    return false;

  }

  final Member m=(Member)o;

  if (!o.isAccessible() && Modifier.isPublic(m.getModifiers()) && isPackageAccess(m.getDeclaringClass().getModifiers())) {

    try {

      o.setAccessible(true);

      return true;

    }

 catch (    final SecurityException e) {

    }

  }

  return false;

}

