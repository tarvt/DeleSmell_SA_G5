Location: ObjectsTest.java

Content: 

@Test void testRequireNonNullObject(){

  assertSame("foo",Objects.requireNonNull("foo"));

  try {

    Objects.requireNonNull(null);

    fail("Expected Exception");

  }

 catch (  final NullPointerException e) {

    assertEquals("The value must not be null.",e.getMessage());

  }

}

Location: ObjectsTest.java

Content: 

@Test void testRequireNonNullObjectFailableSupplierString(){

  final TestableFailableSupplier<String,?> supplier=new TestableFailableSupplier<>(() -> null);

  assertSame("foo",Objects.requireNonNull("foo",supplier));

  assertFalse(supplier.isInvoked());

  try {

    Objects.requireNonNull(null,supplier);

    fail("Expected Exception");

  }

 catch (  final NullPointerException e) {

    assertEquals("The supplier must not return null.",e.getMessage());

    assertTrue(supplier.isInvoked());

  }

  final TestableFailableSupplier<String,?> supplier2=new TestableFailableSupplier<>(() -> null);

  try {

    Objects.requireNonNull(null,supplier2);

    fail("Expected Exception");

  }

 catch (  final NullPointerException e) {

    assertEquals("The supplier must not return null.",e.getMessage());

    assertTrue(supplier2.isInvoked());

  }

  final TestableFailableSupplier<String,?> supplier3=new TestableFailableSupplier<>(() -> "bar");

  assertSame("bar",Objects.requireNonNull(null,supplier3));

  final RuntimeException rte=new RuntimeException();

  final TestableFailableSupplier<String,?> supplier4=new TestableFailableSupplier<>(() -> {

    throw rte;

  }

);

  try {

    Objects.requireNonNull(null,supplier4);

    fail("Expected Exception");

  }

 catch (  final RuntimeException e) {

    assertSame(rte,e);

    assertTrue(supplier4.isInvoked());

  }

}

Location: ObjectsTest.java

Content: 

@Test void testRequireNonNullObjectString(){

  assertSame("foo",Objects.requireNonNull("foo","bar"));

  try {

    Objects.requireNonNull(null,"bar");

    fail("Expected Exception");

  }

 catch (  final NullPointerException e) {

    assertEquals("bar",e.getMessage());

  }

}

Location: ObjectsTest.java

Content: 

@Test void testRequireNonNullObjectSupplierString(){

  final TestableSupplier<String> supplier=new TestableSupplier<>(() -> "bar");

  assertSame("foo",Objects.requireNonNull("foo",supplier));

  assertFalse(supplier.isInvoked());

  try {

    Objects.requireNonNull(null,supplier);

    fail("Expected Exception");

  }

 catch (  final NullPointerException e) {

    assertEquals("bar",e.getMessage());

    assertTrue(supplier.isInvoked());

  }

}

