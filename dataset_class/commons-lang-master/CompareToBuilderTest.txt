Location: CompareToBuilderTest.java

Content: 

/** 

 * See "Effective Java" under "Consider Implementing Comparable".

 * @param x an object to compare

 * @param y an object to compare

 * @param z an object to compare

 * @param testTransients Whether to include transients in the comparison

 * @param excludeFields fields to exclude

 */

private void assertReflectionCompareContract(final Object x,final Object y,final Object z,final boolean testTransients,final String[] excludeFields){

  assertEquals(reflectionCompareSignum(x,y,testTransients,excludeFields),-reflectionCompareSignum(y,x,testTransients,excludeFields));

  if (CompareToBuilder.reflectionCompare(x,y,testTransients,null,excludeFields) > 0 && CompareToBuilder.reflectionCompare(y,z,testTransients,null,excludeFields) > 0) {

    assertTrue(CompareToBuilder.reflectionCompare(x,z,testTransients,null,excludeFields) > 0);

  }

  if (CompareToBuilder.reflectionCompare(x,y,testTransients,null,excludeFields) == 0) {

    assertEquals(reflectionCompareSignum(x,z,testTransients,excludeFields),-reflectionCompareSignum(y,z,testTransients,excludeFields));

  }

  assertTrue(CompareToBuilder.reflectionCompare(x,y,testTransients) == 0 == EqualsBuilder.reflectionEquals(x,y,testTransients));

}

Location: CompareToBuilderTest.java

Content: 

private void assertXYZCompareOrder(final Object x,final Object y,final Object z,final boolean testTransients,final String[] excludeFields){

  assertEquals(0,CompareToBuilder.reflectionCompare(x,x,testTransients,null,excludeFields));

  assertEquals(0,CompareToBuilder.reflectionCompare(y,y,testTransients,null,excludeFields));

  assertEquals(0,CompareToBuilder.reflectionCompare(z,z,testTransients,null,excludeFields));

  assertTrue(0 > CompareToBuilder.reflectionCompare(x,y,testTransients,null,excludeFields));

  assertTrue(0 > CompareToBuilder.reflectionCompare(x,z,testTransients,null,excludeFields));

  assertTrue(0 > CompareToBuilder.reflectionCompare(y,z,testTransients,null,excludeFields));

  assertTrue(0 < CompareToBuilder.reflectionCompare(y,x,testTransients,null,excludeFields));

  assertTrue(0 < CompareToBuilder.reflectionCompare(z,x,testTransients,null,excludeFields));

  assertTrue(0 < CompareToBuilder.reflectionCompare(z,y,testTransients,null,excludeFields));

}

Location: CompareToBuilderTest.java

Content: 

/** 

 * Returns the signum of the result of comparing x and y with {@code CompareToBuilder.reflectionCompare}

 * @param lhs The "left-hand-side" of the comparison.

 * @param rhs The "right-hand-side" of the comparison.

 * @param testTransients Whether to include transients in the comparison

 * @param excludeFields fields to exclude

 * @return int The signum

 */

private int reflectionCompareSignum(final Object lhs,final Object rhs,final boolean testTransients,final String[] excludeFields){

  return BigInteger.valueOf(CompareToBuilder.reflectionCompare(lhs,rhs,testTransients)).signum();

}

Location: CompareToBuilderTest.java

Content: 

@Test public void testObjectComparator(){

  final String o1="Fred";

  String o2="Fred";

  assertEquals(0,new CompareToBuilder().append(o1,o1,String.CASE_INSENSITIVE_ORDER).toComparison());

  assertEquals(0,new CompareToBuilder().append(o1,o2,String.CASE_INSENSITIVE_ORDER).toComparison());

  o2="FRED";

  assertEquals(0,new CompareToBuilder().append(o1,o2,String.CASE_INSENSITIVE_ORDER).toComparison());

  assertEquals(0,new CompareToBuilder().append(o2,o1,String.CASE_INSENSITIVE_ORDER).toComparison());

  o2="FREDA";

  assertTrue(new CompareToBuilder().append(o1,o2,String.CASE_INSENSITIVE_ORDER).toComparison() < 0);

  assertTrue(new CompareToBuilder().append(o2,o1,String.CASE_INSENSITIVE_ORDER).toComparison() > 0);

  assertTrue(new CompareToBuilder().append(o1,null,String.CASE_INSENSITIVE_ORDER).toComparison() > 0);

  assertEquals(0,new CompareToBuilder().append(null,null,String.CASE_INSENSITIVE_ORDER).toComparison());

  assertTrue(new CompareToBuilder().append(null,o1,String.CASE_INSENSITIVE_ORDER).toComparison() < 0);

}

Location: CompareToBuilderTest.java

Content: 

@Test public void testObjectComparatorNull(){

  final String o1="Fred";

  String o2="Fred";

  assertEquals(0,new CompareToBuilder().append(o1,o1,null).toComparison());

  assertEquals(0,new CompareToBuilder().append(o1,o2,null).toComparison());

  o2="Zebra";

  assertTrue(new CompareToBuilder().append(o1,o2,null).toComparison() < 0);

  assertTrue(new CompareToBuilder().append(o2,o1,null).toComparison() > 0);

  assertTrue(new CompareToBuilder().append(o1,null,null).toComparison() > 0);

  assertEquals(0,new CompareToBuilder().append(null,null,null).toComparison());

  assertTrue(new CompareToBuilder().append(null,o1,null).toComparison() < 0);

}

Location: CompareToBuilderTest.java

Content: 

@Test public void testObjectEx2(){

  final TestObject o1=new TestObject(4);

  final Object o2=new Object();

  assertThrows(ClassCastException.class,() -> new CompareToBuilder().append(o1,o2));

}

Location: CompareToBuilderTest.java

Content: 

@Test public void testReflectionCompare(){

  final TestObject o1=new TestObject(4);

  final TestObject o2=new TestObject(4);

  assertEquals(0,CompareToBuilder.reflectionCompare(o1,o1));

  assertEquals(0,CompareToBuilder.reflectionCompare(o1,o2));

  o2.setA(5);

  assertTrue(CompareToBuilder.reflectionCompare(o1,o2) < 0);

  assertTrue(CompareToBuilder.reflectionCompare(o2,o1) > 0);

}

Location: CompareToBuilderTest.java

Content: 

@Test public void testReflectionCompareEx1(){

  final TestObject o1=new TestObject(4);

  assertThrows(NullPointerException.class,() -> CompareToBuilder.reflectionCompare(o1,null));

}

Location: CompareToBuilderTest.java

Content: 

@Test public void testReflectionCompareEx2(){

  final TestObject o1=new TestObject(4);

  final Object o2=new Object();

  assertThrows(ClassCastException.class,() -> CompareToBuilder.reflectionCompare(o1,o2));

}

Location: CompareToBuilderTest.java

Content: 

@Test public void testReflectionHierarchyCompare(){

  testReflectionHierarchyCompare(false,null);

}

Location: CompareToBuilderTest.java

Content: 

@Test public void testReflectionHierarchyCompareExcludeFields(){

  final String[] excludeFields={"b"};

  testReflectionHierarchyCompare(true,excludeFields);

  TestSubObject x;

  TestSubObject y;

  TestSubObject z;

  x=new TestSubObject(1,1);

  y=new TestSubObject(2,1);

  z=new TestSubObject(3,1);

  assertXYZCompareOrder(x,y,z,true,excludeFields);

  x=new TestSubObject(1,3);

  y=new TestSubObject(2,2);

  z=new TestSubObject(3,1);

  assertXYZCompareOrder(x,y,z,true,excludeFields);

}

Location: CompareToBuilderTest.java

Content: 

@Test public void testReflectionHierarchyCompareTransients(){

  testReflectionHierarchyCompare(true,null);

  TestTransientSubObject x;

  TestTransientSubObject y;

  TestTransientSubObject z;

  x=new TestTransientSubObject(1,1);

  y=new TestTransientSubObject(2,2);

  z=new TestTransientSubObject(3,3);

  assertXYZCompareOrder(x,y,z,true,null);

  x=new TestTransientSubObject(1,1);

  y=new TestTransientSubObject(1,2);

  z=new TestTransientSubObject(1,3);

  assertXYZCompareOrder(x,y,z,true,null);

}

Location: CompareToBuilderTest.java

Content: 

private void testReflectionHierarchyCompare(final boolean testTransients,final String[] excludeFields){

  final TestObject to1=new TestObject(1);

  final TestObject to2=new TestObject(2);

  final TestObject to3=new TestObject(3);

  final TestSubObject tso1=new TestSubObject(1,1);

  final TestSubObject tso2=new TestSubObject(2,2);

  final TestSubObject tso3=new TestSubObject(3,3);

  assertReflectionCompareContract(to1,to1,to1,false,excludeFields);

  assertReflectionCompareContract(to1,to2,to3,false,excludeFields);

  assertReflectionCompareContract(tso1,tso1,tso1,false,excludeFields);

  assertReflectionCompareContract(tso1,tso2,tso3,false,excludeFields);

  assertReflectionCompareContract("1","2","3",false,excludeFields);

  assertTrue(0 != CompareToBuilder.reflectionCompare(tso1,new TestSubObject(1,0),testTransients));

  assertTrue(0 != CompareToBuilder.reflectionCompare(tso1,new TestSubObject(0,1),testTransients));

  assertXYZCompareOrder(to1,to2,to3,true,null);

  assertXYZCompareOrder(tso1,tso2,tso3,true,null);

}

