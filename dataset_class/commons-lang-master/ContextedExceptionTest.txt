Location: ContextedExceptionTest.java

Content: 

@Test public void testContextedException(){

  exceptionContext=new ContextedException();

  final String message=exceptionContext.getMessage();

  final String trace=ExceptionUtils.getStackTrace(exceptionContext);

  assertTrue(trace.contains("ContextedException"));

  assertTrue(StringUtils.isEmpty(message));

}

Location: ContextedExceptionTest.java

Content: 

@Test public void testContextedExceptionString(){

  exceptionContext=new ContextedException(TEST_MESSAGE);

  assertEquals(TEST_MESSAGE,exceptionContext.getMessage());

  final String trace=ExceptionUtils.getStackTrace(exceptionContext);

  assertTrue(trace.contains(TEST_MESSAGE));

}

Location: ContextedExceptionTest.java

Content: 

@Test public void testContextedExceptionStringThrowable(){

  exceptionContext=new ContextedException(TEST_MESSAGE_2,new Exception(TEST_MESSAGE));

  final String message=exceptionContext.getMessage();

  final String trace=ExceptionUtils.getStackTrace(exceptionContext);

  assertTrue(trace.contains("ContextedException"));

  assertTrue(trace.contains(TEST_MESSAGE));

  assertTrue(trace.contains(TEST_MESSAGE_2));

  assertTrue(message.contains(TEST_MESSAGE_2));

}

Location: ContextedExceptionTest.java

Content: 

@Test public void testContextedExceptionStringThrowableContext(){

  exceptionContext=new ContextedException(TEST_MESSAGE_2,new Exception(TEST_MESSAGE),new DefaultExceptionContext());

  final String message=exceptionContext.getMessage();

  final String trace=ExceptionUtils.getStackTrace(exceptionContext);

  assertTrue(trace.contains("ContextedException"));

  assertTrue(trace.contains(TEST_MESSAGE));

  assertTrue(trace.contains(TEST_MESSAGE_2));

  assertTrue(message.contains(TEST_MESSAGE_2));

}

Location: ContextedExceptionTest.java

Content: 

@Test public void testContextedExceptionThrowable(){

  exceptionContext=new ContextedException(new Exception(TEST_MESSAGE));

  final String message=exceptionContext.getMessage();

  final String trace=ExceptionUtils.getStackTrace(exceptionContext);

  assertTrue(trace.contains("ContextedException"));

  assertTrue(trace.contains(TEST_MESSAGE));

  assertTrue(message.contains(TEST_MESSAGE));

}

Location: ContextedExceptionTest.java

Content: 

@Test public void testNullExceptionPassing(){

  exceptionContext=new ContextedException(TEST_MESSAGE_2,new Exception(TEST_MESSAGE),null).addContextValue("test1",null).addContextValue("test2","some value").addContextValue("test Date",new Date()).addContextValue("test Nbr",Integer.valueOf(5)).addContextValue("test Poorly written obj",new ObjectWithFaultyToString());

  final String message=exceptionContext.getMessage();

  assertNotNull(message);

}

Location: ContextedExceptionTest.java

Content: 

@Test public void testRawMessage(){

  assertEquals(Exception.class.getName() + ": " + TEST_MESSAGE,exceptionContext.getRawMessage());

  exceptionContext=new ContextedException(TEST_MESSAGE_2,new Exception(TEST_MESSAGE),new DefaultExceptionContext());

  assertEquals(TEST_MESSAGE_2,exceptionContext.getRawMessage());

  exceptionContext=new ContextedException(null,new Exception(TEST_MESSAGE),new DefaultExceptionContext());

  assertNull(exceptionContext.getRawMessage());

}

