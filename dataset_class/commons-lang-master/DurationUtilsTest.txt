Location: DurationUtilsTest.java

Content: 

@Test public void testGetNanosOfMilli(){

  assertEquals(0,DurationUtils.getNanosOfMiili(Duration.ZERO));

  assertEquals(1,DurationUtils.getNanosOfMiili(Duration.ofNanos(1)));

  assertEquals(10,DurationUtils.getNanosOfMiili(Duration.ofNanos(10)));

  assertEquals(100,DurationUtils.getNanosOfMiili(Duration.ofNanos(100)));

  assertEquals(1_000,DurationUtils.getNanosOfMiili(Duration.ofNanos(1_000)));

  assertEquals(10_000,DurationUtils.getNanosOfMiili(Duration.ofNanos(10_000)));

  assertEquals(100_000,DurationUtils.getNanosOfMiili(Duration.ofNanos(100_000)));

  assertEquals(0,DurationUtils.getNanosOfMiili(Duration.ofNanos(1_000_000)));

  assertEquals(1,DurationUtils.getNanosOfMiili(Duration.ofNanos(1_000_001)));

}

Location: DurationUtilsTest.java

Content: 

@Test public void testIsPositive(){

  assertFalse(DurationUtils.isPositive(Duration.ZERO));

  assertFalse(DurationUtils.isPositive(Duration.ofMillis(-1)));

  assertTrue(DurationUtils.isPositive(Duration.ofMillis(1)));

}

Location: DurationUtilsTest.java

Content: 

@Test public void testLongToIntRangeFit(){

  assertEquals(0,DurationUtils.LONG_TO_INT_RANGE.fit(0L));

  assertEquals(Integer.MIN_VALUE,DurationUtils.LONG_TO_INT_RANGE.fit(NumberUtils.LONG_INT_MIN_VALUE));

  assertEquals(Integer.MIN_VALUE,DurationUtils.LONG_TO_INT_RANGE.fit(NumberUtils.LONG_INT_MIN_VALUE - 1));

  assertEquals(Integer.MIN_VALUE,DurationUtils.LONG_TO_INT_RANGE.fit(NumberUtils.LONG_INT_MIN_VALUE - 2));

  assertEquals(Integer.MAX_VALUE,DurationUtils.LONG_TO_INT_RANGE.fit(NumberUtils.LONG_INT_MAX_VALUE));

  assertEquals(Integer.MAX_VALUE,DurationUtils.LONG_TO_INT_RANGE.fit(NumberUtils.LONG_INT_MAX_VALUE + 1));

  assertEquals(Integer.MAX_VALUE,DurationUtils.LONG_TO_INT_RANGE.fit(NumberUtils.LONG_INT_MAX_VALUE + 2));

  assertEquals(Integer.MIN_VALUE,DurationUtils.LONG_TO_INT_RANGE.fit(Long.MIN_VALUE));

  assertEquals(Integer.MAX_VALUE,DurationUtils.LONG_TO_INT_RANGE.fit(Long.MAX_VALUE));

  assertEquals(Short.MIN_VALUE,DurationUtils.LONG_TO_INT_RANGE.fit((long)Short.MIN_VALUE));

  assertEquals(Short.MAX_VALUE,DurationUtils.LONG_TO_INT_RANGE.fit((long)Short.MAX_VALUE));

}

Location: DurationUtilsTest.java

Content: 

@Test public void testToDuration(){

  assertEquals(Duration.ofDays(1),DurationUtils.toDuration(1,TimeUnit.DAYS));

  assertEquals(Duration.ofHours(1),DurationUtils.toDuration(1,TimeUnit.HOURS));

  assertEquals(Duration.ofMillis(1),DurationUtils.toDuration(1_000,TimeUnit.MICROSECONDS));

  assertEquals(Duration.ofMillis(1),DurationUtils.toDuration(1,TimeUnit.MILLISECONDS));

  assertEquals(Duration.ofMinutes(1),DurationUtils.toDuration(1,TimeUnit.MINUTES));

  assertEquals(Duration.ofNanos(1),DurationUtils.toDuration(1,TimeUnit.NANOSECONDS));

  assertEquals(Duration.ofSeconds(1),DurationUtils.toDuration(1,TimeUnit.SECONDS));

  assertEquals(1,DurationUtils.toDuration(1,TimeUnit.MILLISECONDS).toMillis());

  assertEquals(-1,DurationUtils.toDuration(-1,TimeUnit.MILLISECONDS).toMillis());

  assertEquals(0,DurationUtils.toDuration(0,TimeUnit.SECONDS).toMillis());

}

Location: DurationUtilsTest.java

Content: 

@Test public void testToMillisInt(){

  assertEquals(0,DurationUtils.toMillisInt(Duration.ZERO));

  assertEquals(1,DurationUtils.toMillisInt(Duration.ofMillis(1)));

  assertEquals(Integer.MIN_VALUE,DurationUtils.toMillisInt(Duration.ofMillis(Integer.MIN_VALUE)));

  assertEquals(Integer.MAX_VALUE,DurationUtils.toMillisInt(Duration.ofMillis(Integer.MAX_VALUE)));

  assertEquals(Integer.MAX_VALUE,DurationUtils.toMillisInt(Duration.ofMillis(NumberUtils.LONG_INT_MAX_VALUE + 1)));

  assertEquals(Integer.MAX_VALUE,DurationUtils.toMillisInt(Duration.ofMillis(NumberUtils.LONG_INT_MAX_VALUE + 2)));

  assertEquals(Integer.MIN_VALUE,DurationUtils.toMillisInt(Duration.ofMillis(NumberUtils.LONG_INT_MIN_VALUE - 1)));

  assertEquals(Integer.MIN_VALUE,DurationUtils.toMillisInt(Duration.ofMillis(NumberUtils.LONG_INT_MIN_VALUE - 2)));

  assertEquals(Integer.MIN_VALUE,DurationUtils.toMillisInt(Duration.ofNanos(Long.MIN_VALUE)));

  assertEquals(Integer.MAX_VALUE,DurationUtils.toMillisInt(Duration.ofNanos(Long.MAX_VALUE)));

}

Location: DurationUtilsTest.java

Content: 

@Test public void testZeroIfNull(){

  assertEquals(Duration.ZERO,DurationUtils.zeroIfNull(null));

  assertEquals(Duration.ofDays(1),DurationUtils.zeroIfNull(Duration.ofDays(1)));

}

