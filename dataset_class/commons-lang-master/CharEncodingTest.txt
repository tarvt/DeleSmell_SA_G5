Location: CharEncodingTest.java

Content: 

private void assertSupportedEncoding(final String name){

  assertTrue(CharEncoding.isSupported(name),"Encoding should be supported: " + name);

}

Location: CharEncodingTest.java

Content: 

@Test public void testMustBeSupportedJava1_3_1_and_above(){

  this.assertSupportedEncoding(CharEncoding.ISO_8859_1);

  this.assertSupportedEncoding(CharEncoding.US_ASCII);

  this.assertSupportedEncoding(CharEncoding.UTF_16);

  this.assertSupportedEncoding(CharEncoding.UTF_16BE);

  this.assertSupportedEncoding(CharEncoding.UTF_16LE);

  this.assertSupportedEncoding(CharEncoding.UTF_8);

}

Location: CharEncodingTest.java

Content: 

@Test public void testNotSupported(){

  assertFalse(CharEncoding.isSupported(null));

  assertFalse(CharEncoding.isSupported(""));

  assertFalse(CharEncoding.isSupported(" "));

  assertFalse(CharEncoding.isSupported("\t\r\n"));

  assertFalse(CharEncoding.isSupported("DOESNOTEXIST"));

  assertFalse(CharEncoding.isSupported("this is not a valid encoding name"));

}

Location: CharEncodingTest.java

Content: 

@Test public void testStandardCharsetsEquality(){

  assertEquals(StandardCharsets.ISO_8859_1.name(),CharEncoding.ISO_8859_1);

  assertEquals(StandardCharsets.US_ASCII.name(),CharEncoding.US_ASCII);

  assertEquals(StandardCharsets.UTF_8.name(),CharEncoding.UTF_8);

  assertEquals(StandardCharsets.UTF_16.name(),CharEncoding.UTF_16);

  assertEquals(StandardCharsets.UTF_16BE.name(),CharEncoding.UTF_16BE);

  assertEquals(StandardCharsets.UTF_16LE.name(),CharEncoding.UTF_16LE);

}

Location: CharEncodingTest.java

Content: 

@Test public void testSupported(){

  assertTrue(CharEncoding.isSupported("UTF8"));

  assertTrue(CharEncoding.isSupported("UTF-8"));

  assertTrue(CharEncoding.isSupported("ASCII"));

}

