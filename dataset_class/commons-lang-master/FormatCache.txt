Location: FormatCache.java

Content: 

/** 

 * Create a format instance using the specified pattern, time zone and locale.

 * @param pattern  {@link java.text.SimpleDateFormat} compatible pattern, this will not be null.

 * @param timeZone  time zone, this will not be null.

 * @param locale  locale, this will not be null.

 * @return a pattern based date/time formatter

 * @throws IllegalArgumentException if pattern is invalidor  {@code null}

 */

protected abstract F createInstance(String pattern,TimeZone timeZone,Locale locale);

Location: FormatCache.java

Content: 

/** 

 * Gets a date formatter instance using the specified style, time zone and locale.

 * @param dateStyle  date style: FULL, LONG, MEDIUM, or SHORT

 * @param timeZone  optional time zone, overrides time zone offormatted date, null means use default Locale

 * @param locale  optional locale, overrides system locale

 * @return a localized standard date/time formatter

 * @throws IllegalArgumentException if the Locale has no date/timepattern defined

 */

F getDateInstance(final int dateStyle,final TimeZone timeZone,final Locale locale){

  return getDateTimeInstance(Integer.valueOf(dateStyle),null,timeZone,locale);

}

Location: FormatCache.java

Content: 

/** 

 * Gets a date/time formatter instance using the specified style, time zone and locale.

 * @param dateStyle  date style: FULL, LONG, MEDIUM, or SHORT, null indicates no date in format

 * @param timeStyle  time style: FULL, LONG, MEDIUM, or SHORT, null indicates no time in format

 * @param timeZone  optional time zone, overrides time zone offormatted date, null means use default Locale

 * @param locale  optional locale, overrides system locale

 * @return a localized standard date/time formatter

 * @throws IllegalArgumentException if the Locale has no date/timepattern defined

 */

private F getDateTimeInstance(final Integer dateStyle,final Integer timeStyle,final TimeZone timeZone,Locale locale){

  locale=LocaleUtils.toLocale(locale);

  final String pattern=getPatternForStyle(dateStyle,timeStyle,locale);

  return getInstance(pattern,timeZone,locale);

}

Location: FormatCache.java

Content: 

/** 

 * Gets a date/time formatter instance using the specified style, time zone and locale.

 * @param dateStyle  date style: FULL, LONG, MEDIUM, or SHORT

 * @param timeStyle  time style: FULL, LONG, MEDIUM, or SHORT

 * @param timeZone  optional time zone, overrides time zone offormatted date, null means use default Locale

 * @param locale  optional locale, overrides system locale

 * @return a localized standard date/time formatter

 * @throws IllegalArgumentException if the Locale has no date/timepattern defined

 */

F getDateTimeInstance(final int dateStyle,final int timeStyle,final TimeZone timeZone,final Locale locale){

  return getDateTimeInstance(Integer.valueOf(dateStyle),Integer.valueOf(timeStyle),timeZone,locale);

}

Location: FormatCache.java

Content: 

/** 

 * Gets a formatter instance using the default pattern in the default time zone and locale.

 * @return a date/time formatter

 */

public F getInstance(){

  return getDateTimeInstance(DateFormat.SHORT,DateFormat.SHORT,TimeZone.getDefault(),Locale.getDefault());

}

Location: FormatCache.java

Content: 

/** 

 * Gets a date/time format for the specified styles and locale.

 * @param dateStyle  date style: FULL, LONG, MEDIUM, or SHORT, null indicates no date in format

 * @param timeStyle  time style: FULL, LONG, MEDIUM, or SHORT, null indicates no time in format

 * @param locale  The non-null locale of the desired format

 * @return a localized standard date/time format

 * @throws IllegalArgumentException if the Locale has no date/time pattern defined

 */

static String getPatternForStyle(final Integer dateStyle,final Integer timeStyle,final Locale locale){

  final Locale safeLocale=LocaleUtils.toLocale(locale);

  final ArrayKey key=new ArrayKey(dateStyle,timeStyle,safeLocale);

  String pattern=cDateTimeInstanceCache.get(key);

  if (pattern == null) {

    try {

      final DateFormat formatter;

      if (dateStyle == null) {

        formatter=DateFormat.getTimeInstance(timeStyle.intValue(),safeLocale);

      }

 else       if (timeStyle == null) {

        formatter=DateFormat.getDateInstance(dateStyle.intValue(),safeLocale);

      }

 else {

        formatter=DateFormat.getDateTimeInstance(dateStyle.intValue(),timeStyle.intValue(),safeLocale);

      }

      pattern=((SimpleDateFormat)formatter).toPattern();

      final String previous=cDateTimeInstanceCache.putIfAbsent(key,pattern);

      if (previous != null) {

        pattern=previous;

      }

    }

 catch (    final ClassCastException ex) {

      throw new IllegalArgumentException("No date time pattern for locale: " + safeLocale);

    }

  }

  return pattern;

}

Location: FormatCache.java

Content: 

/** 

 * Gets a time formatter instance using the specified style, time zone and locale.

 * @param timeStyle  time style: FULL, LONG, MEDIUM, or SHORT

 * @param timeZone  optional time zone, overrides time zone offormatted date, null means use default Locale

 * @param locale  optional locale, overrides system locale

 * @return a localized standard date/time formatter

 * @throws IllegalArgumentException if the Locale has no date/timepattern defined

 */

F getTimeInstance(final int timeStyle,final TimeZone timeZone,final Locale locale){

  return getDateTimeInstance(null,Integer.valueOf(timeStyle),timeZone,locale);

}

