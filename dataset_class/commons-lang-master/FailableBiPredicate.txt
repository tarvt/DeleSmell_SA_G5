Location: FailableBiPredicate.java

Content: 

/** 

 * Returns a composed  {@code FailableBiPredicate} like {@link BiPredicate#and(BiPredicate)}.

 * @param other a predicate that will be logically-ANDed with this predicate.

 * @return a composed {@code FailableBiPredicate} like {@link BiPredicate#and(BiPredicate)}.

 * @throws NullPointerException if other is null

 */

default FailableBiPredicate<T,U,E> and(final FailableBiPredicate<? super T,? super U,E> other){

  Objects.requireNonNull(other);

  return (  final T t,  final U u) -> test(t,u) && other.test(t,u);

}

Location: FailableBiPredicate.java

Content: 

/** 

 * Returns a composed  {@code FailableBiPredicate} like {@link BiPredicate#and(BiPredicate)}.

 * @param other a predicate that will be logically-ORed with this predicate.

 * @return a composed {@code FailableBiPredicate} like {@link BiPredicate#and(BiPredicate)}.

 * @throws NullPointerException if other is null

 */

default FailableBiPredicate<T,U,E> or(final FailableBiPredicate<? super T,? super U,E> other){

  Objects.requireNonNull(other);

  return (  final T t,  final U u) -> test(t,u) || other.test(t,u);

}

Location: FailableBiPredicate.java

Content: 

/** 

 * Tests the predicate.

 * @param object1 the first object to test the predicate on

 * @param object2 the second object to test the predicate on

 * @return the predicate's evaluation

 * @throws E Thrown when this predicate fails.

 */

boolean test(T object1,U object2) throws E ;

