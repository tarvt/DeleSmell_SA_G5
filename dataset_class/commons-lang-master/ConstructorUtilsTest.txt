Location: ConstructorUtilsTest.java

Content: 

public ConstructorUtilsTest(){

  classCache=new HashMap<>();

}

Location: ConstructorUtilsTest.java

Content: 

private void expectMatchingAccessibleConstructorParameterTypes(final Class<?> cls,final Class<?>[] requestTypes,final Class<?>[] actualTypes){

  final Constructor<?> c=ConstructorUtils.getMatchingAccessibleConstructor(cls,requestTypes);

  assertArrayEquals(actualTypes,c.getParameterTypes(),toString(c.getParameterTypes()) + " not equals " + toString(actualTypes));

}

Location: ConstructorUtilsTest.java

Content: 

private Class<?>[] singletonArray(final Class<?> c){

  Class<?>[] result=classCache.get(c);

  if (result == null) {

    result=new Class[]{c};

    classCache.put(c,result);

  }

  return result;

}

Location: ConstructorUtilsTest.java

Content: 

@Test public void testGetAccessibleConstructor() throws Exception {

  assertNotNull(ConstructorUtils.getAccessibleConstructor(Object.class.getConstructor(ArrayUtils.EMPTY_CLASS_ARRAY)));

  assertNull(ConstructorUtils.getAccessibleConstructor(PrivateClass.class.getConstructor(ArrayUtils.EMPTY_CLASS_ARRAY)));

  assertNull(ConstructorUtils.getAccessibleConstructor(PrivateClass.PublicInnerClass.class));

}

Location: ConstructorUtilsTest.java

Content: 

@Test public void testGetAccessibleConstructorFromDescription(){

  assertNotNull(ConstructorUtils.getAccessibleConstructor(Object.class,ArrayUtils.EMPTY_CLASS_ARRAY));

  assertNull(ConstructorUtils.getAccessibleConstructor(PrivateClass.class,ArrayUtils.EMPTY_CLASS_ARRAY));

}

Location: ConstructorUtilsTest.java

Content: 

@Test public void testGetMatchingAccessibleMethod(){

  expectMatchingAccessibleConstructorParameterTypes(TestBean.class,ArrayUtils.EMPTY_CLASS_ARRAY,ArrayUtils.EMPTY_CLASS_ARRAY);

  expectMatchingAccessibleConstructorParameterTypes(TestBean.class,null,ArrayUtils.EMPTY_CLASS_ARRAY);

  expectMatchingAccessibleConstructorParameterTypes(TestBean.class,singletonArray(String.class),singletonArray(String.class));

  expectMatchingAccessibleConstructorParameterTypes(TestBean.class,singletonArray(Object.class),singletonArray(Object.class));

  expectMatchingAccessibleConstructorParameterTypes(TestBean.class,singletonArray(Boolean.class),singletonArray(Object.class));

  expectMatchingAccessibleConstructorParameterTypes(TestBean.class,singletonArray(Byte.class),singletonArray(Integer.TYPE));

  expectMatchingAccessibleConstructorParameterTypes(TestBean.class,singletonArray(Byte.TYPE),singletonArray(Integer.TYPE));

  expectMatchingAccessibleConstructorParameterTypes(TestBean.class,singletonArray(Short.class),singletonArray(Integer.TYPE));

  expectMatchingAccessibleConstructorParameterTypes(TestBean.class,singletonArray(Short.TYPE),singletonArray(Integer.TYPE));

  expectMatchingAccessibleConstructorParameterTypes(TestBean.class,singletonArray(Character.class),singletonArray(Integer.TYPE));

  expectMatchingAccessibleConstructorParameterTypes(TestBean.class,singletonArray(Character.TYPE),singletonArray(Integer.TYPE));

  expectMatchingAccessibleConstructorParameterTypes(TestBean.class,singletonArray(Integer.class),singletonArray(Integer.class));

  expectMatchingAccessibleConstructorParameterTypes(TestBean.class,singletonArray(Integer.TYPE),singletonArray(Integer.TYPE));

  expectMatchingAccessibleConstructorParameterTypes(TestBean.class,singletonArray(Long.class),singletonArray(Double.TYPE));

  expectMatchingAccessibleConstructorParameterTypes(TestBean.class,singletonArray(Long.TYPE),singletonArray(Double.TYPE));

  expectMatchingAccessibleConstructorParameterTypes(TestBean.class,singletonArray(Float.class),singletonArray(Double.TYPE));

  expectMatchingAccessibleConstructorParameterTypes(TestBean.class,singletonArray(Float.TYPE),singletonArray(Double.TYPE));

  expectMatchingAccessibleConstructorParameterTypes(TestBean.class,singletonArray(Double.class),singletonArray(Double.TYPE));

  expectMatchingAccessibleConstructorParameterTypes(TestBean.class,singletonArray(Double.TYPE),singletonArray(Double.TYPE));

  expectMatchingAccessibleConstructorParameterTypes(TestBean.class,new Class<?>[]{SubClass.class,String[].class},new Class<?>[]{BaseClass.class,String[].class});

}

Location: ConstructorUtilsTest.java

Content: 

@Test public void testInvokeConstructor() throws Exception {

  assertEquals("()",ConstructorUtils.invokeConstructor(TestBean.class,(Object[])ArrayUtils.EMPTY_CLASS_ARRAY).toString());

  assertEquals("()",ConstructorUtils.invokeConstructor(TestBean.class,(Object[])null).toString());

  assertEquals("()",ConstructorUtils.invokeConstructor(TestBean.class).toString());

  assertEquals("(String)",ConstructorUtils.invokeConstructor(TestBean.class,"").toString());

  assertEquals("(Object)",ConstructorUtils.invokeConstructor(TestBean.class,new Object()).toString());

  assertEquals("(Object)",ConstructorUtils.invokeConstructor(TestBean.class,Boolean.TRUE).toString());

  assertEquals("(Integer)",ConstructorUtils.invokeConstructor(TestBean.class,NumberUtils.INTEGER_ONE).toString());

  assertEquals("(int)",ConstructorUtils.invokeConstructor(TestBean.class,NumberUtils.BYTE_ONE).toString());

  assertEquals("(double)",ConstructorUtils.invokeConstructor(TestBean.class,NumberUtils.LONG_ONE).toString());

  assertEquals("(double)",ConstructorUtils.invokeConstructor(TestBean.class,NumberUtils.DOUBLE_ONE).toString());

  ConstructorUtils.invokeConstructor(TestBean.class,NumberUtils.INTEGER_ONE).verify("(Integer)",null);

  ConstructorUtils.invokeConstructor(TestBean.class,"a","b").verify("(String...)",new String[]{"a","b"});

  ConstructorUtils.invokeConstructor(TestBean.class,NumberUtils.INTEGER_ONE,"a","b").verify("(Integer, String...)",new String[]{"a","b"});

  ConstructorUtils.invokeConstructor(TestBean.class,new SubClass(),new String[]{"a","b"}).verify("(BaseClass, String...)",new String[]{"a","b"});

}

Location: ConstructorUtilsTest.java

Content: 

@Test public void testInvokeExactConstructor() throws Exception {

  assertEquals("()",ConstructorUtils.invokeExactConstructor(TestBean.class,(Object[])ArrayUtils.EMPTY_CLASS_ARRAY).toString());

  assertEquals("()",ConstructorUtils.invokeExactConstructor(TestBean.class,(Object[])null).toString());

  assertEquals("(String)",ConstructorUtils.invokeExactConstructor(TestBean.class,"").toString());

  assertEquals("(Object)",ConstructorUtils.invokeExactConstructor(TestBean.class,new Object()).toString());

  assertEquals("(Integer)",ConstructorUtils.invokeExactConstructor(TestBean.class,NumberUtils.INTEGER_ONE).toString());

  assertEquals("(double)",ConstructorUtils.invokeExactConstructor(TestBean.class,new Object[]{NumberUtils.DOUBLE_ONE},new Class[]{Double.TYPE}).toString());

  assertThrows(NoSuchMethodException.class,() -> ConstructorUtils.invokeExactConstructor(TestBean.class,NumberUtils.BYTE_ONE));

  assertThrows(NoSuchMethodException.class,() -> ConstructorUtils.invokeExactConstructor(TestBean.class,NumberUtils.LONG_ONE));

  assertThrows(NoSuchMethodException.class,() -> ConstructorUtils.invokeExactConstructor(TestBean.class,Boolean.TRUE));

}

Location: ConstructorUtilsTest.java

Content: 

@Test public void testNullArgument(){

  expectMatchingAccessibleConstructorParameterTypes(MutableObject.class,singletonArray(null),singletonArray(Object.class));

}

Location: ConstructorUtilsTest.java

Content: 

@Test public void testVarArgsUnboxing() throws Exception {

  final TestBean testBean=ConstructorUtils.invokeConstructor(TestBean.class,Integer.valueOf(1),Integer.valueOf(2),Integer.valueOf(3));

  assertArrayEquals(new String[]{"2","3"},testBean.varArgs);

}

Location: ConstructorUtilsTest.java

Content: 

private String toString(final Class<?>[] c){

  return Arrays.asList(c).toString();

}

