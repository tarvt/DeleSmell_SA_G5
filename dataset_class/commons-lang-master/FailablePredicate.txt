Location: FailablePredicate.java

Content: 

/** 

 * Returns a composed  {@code FailablePredicate} like {@link Predicate#and(Predicate)}.

 * @param other a predicate that will be logically-ANDed with this predicate.

 * @return a composed {@code FailablePredicate} like {@link Predicate#and(Predicate)}.

 * @throws NullPointerException if other is null

 */

default FailablePredicate<T,E> and(final FailablePredicate<? super T,E> other){

  Objects.requireNonNull(other);

  return t -> test(t) && other.test(t);

}

Location: FailablePredicate.java

Content: 

/** 

 * Returns a composed  {@code FailablePredicate} like {@link Predicate#and(Predicate)}.

 * @param other a predicate that will be logically-ORed with this predicate.

 * @return a composed {@code FailablePredicate} like {@link Predicate#and(Predicate)}.

 * @throws NullPointerException if other is null

 */

default FailablePredicate<T,E> or(final FailablePredicate<? super T,E> other){

  Objects.requireNonNull(other);

  return t -> test(t) || other.test(t);

}

Location: FailablePredicate.java

Content: 

/** 

 * Tests the predicate.

 * @param object the object to test the predicate on

 * @return the predicate's evaluation

 * @throws E if the predicate fails

 */

boolean test(T object) throws E ;

