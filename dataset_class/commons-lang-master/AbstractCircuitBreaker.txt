Location: AbstractCircuitBreaker.java

Content: 

/** 

 * Creates an  {@code AbstractCircuitBreaker}. It also creates an internal  {@code PropertyChangeSupport}.

 */

public AbstractCircuitBreaker(){

  changeSupport=new PropertyChangeSupport(this);

}

Location: AbstractCircuitBreaker.java

Content: 

/** 

 * Adds a change listener to this circuit breaker. This listener is notified whenever the state of this circuit breaker changes. If the listener is <strong>null</strong>, it is silently ignored.

 * @param listener the listener to be added

 */

public void addChangeListener(final PropertyChangeListener listener){

  changeSupport.addPropertyChangeListener(listener);

}

Location: AbstractCircuitBreaker.java

Content: 

/** 

 * Changes the internal state of this circuit breaker. If there is actually a change of the state value, all registered change listeners are notified.

 * @param newState the new state to be set

 */

protected void changeState(final State newState){

  if (state.compareAndSet(newState.oppositeState(),newState)) {

    changeSupport.firePropertyChange(PROPERTY_NAME,!isOpen(newState),isOpen(newState));

  }

}

Location: AbstractCircuitBreaker.java

Content: 

/** 

 * Converts the given state value to a boolean <em>open</em> property.

 * @param state the state to be converted

 * @return the boolean open flag

 */

protected static boolean isOpen(final State state){

  return state == State.OPEN;

}

Location: AbstractCircuitBreaker.java

Content: 

/** 

 * Removes the specified change listener from this circuit breaker.

 * @param listener the listener to be removed

 */

public void removeChangeListener(final PropertyChangeListener listener){

  changeSupport.removePropertyChangeListener(listener);

}

