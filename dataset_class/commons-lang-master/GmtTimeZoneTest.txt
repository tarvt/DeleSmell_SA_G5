Location: GmtTimeZoneTest.java

Content: 

@Test public void getID(){

  assertEquals("GMT+00:00",new GmtTimeZone(false,0,0).getID());

  assertEquals("GMT+01:02",new GmtTimeZone(false,1,2).getID());

  assertEquals("GMT+11:22",new GmtTimeZone(false,11,22).getID());

  assertEquals("GMT-01:02",new GmtTimeZone(true,1,2).getID());

  assertEquals("GMT-11:22",new GmtTimeZone(true,11,22).getID());

}

Location: GmtTimeZoneTest.java

Content: 

@Test public void getOffset(){

  assertEquals(0,new GmtTimeZone(false,0,0).getOffset(234304));

}

Location: GmtTimeZoneTest.java

Content: 

@Test public void getRawOffset(){

  assertEquals(0,new GmtTimeZone(false,0,0).getRawOffset());

}

Location: GmtTimeZoneTest.java

Content: 

@Test public void hoursInRange(){

  assertEquals(23 * 60 * 60* 1000,new GmtTimeZone(false,23,0).getRawOffset());

}

Location: GmtTimeZoneTest.java

Content: 

@Test public void hoursOutOfRange(){

  assertThrows(IllegalArgumentException.class,() -> new GmtTimeZone(false,24,0));

}

Location: GmtTimeZoneTest.java

Content: 

@Test public void inDaylightTime(){

  assertFalse(new GmtTimeZone(false,0,0).useDaylightTime());

}

Location: GmtTimeZoneTest.java

Content: 

@Test public void minutesInRange(){

  assertEquals(59 * 60 * 1000,new GmtTimeZone(false,0,59).getRawOffset());

}

Location: GmtTimeZoneTest.java

Content: 

@Test public void minutesOutOfRange(){

  assertThrows(IllegalArgumentException.class,() -> new GmtTimeZone(false,0,60));

}

Location: GmtTimeZoneTest.java

Content: 

@Test public void setRawOffset(){

  assertThrows(UnsupportedOperationException.class,() -> new GmtTimeZone(false,0,0).setRawOffset(0));

}

Location: GmtTimeZoneTest.java

Content: 

@Test public void testGetOffset(){

  assertEquals(-(6 * 60 + 30) * 60 * 1000,new GmtTimeZone(true,6,30).getOffset(1,1,1,1,1,1));

}

Location: GmtTimeZoneTest.java

Content: 

@Test public void useDaylightTime(){

  assertFalse(new GmtTimeZone(false,0,0).useDaylightTime());

}

