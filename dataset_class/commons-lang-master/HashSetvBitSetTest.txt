Location: HashSetvBitSetTest.java

Content: 

private static int[] extractIndices(final BitSet coll){

  final int[] result=new int[coll.cardinality()];

  int i=0;

  int j=0;

  while ((j=coll.nextSetBit(j)) != -1) {

    result[i++]=j++;

  }

  return result;

}

Location: HashSetvBitSetTest.java

Content: 

private static int[] extractIndices(final HashSet<Integer> coll){

  final int[] result=new int[coll.size()];

  int i=0;

  for (  final Integer index : coll) {

    result[i++]=index.intValue();

  }

  return result;

}

Location: HashSetvBitSetTest.java

Content: 

@Benchmark public int[] testBitSet(){

  final BitSet toRemove=new BitSet();

  int found=0;

  for (int i=0; i < numberOfElementsToCompute; i++) {

    toRemove.set(found++);

  }

  return extractIndices(toRemove);

}

Location: HashSetvBitSetTest.java

Content: 

@Benchmark public int[] testHashSet(){

  final HashSet<Integer> toRemove=new HashSet<>();

  int found=0;

  for (int i=0; i < numberOfElementsToCompute; i++) {

    toRemove.add(found++);

  }

  return extractIndices(toRemove);

}

Location: HashSetvBitSetTest.java

Content: 

@Benchmark public int[] timeBitSetRemoveAll(){

  final BitSet toRemove=new BitSet();

  final int[] array=new int[100];

  toRemove.set(10,20);

  return (int[])ArrayUtils.removeAll(array,toRemove);

}

Location: HashSetvBitSetTest.java

Content: 

@Benchmark public int[] timeExtractRemoveAll(){

  final BitSet toRemove=new BitSet();

  final int[] array=new int[100];

  toRemove.set(10,20);

  final int[] extractIndices=extractIndices(toRemove);

  return (int[])ArrayUtils.removeAll((Object)array,extractIndices);

}

