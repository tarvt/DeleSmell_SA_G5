Location: Streams.java

Content: 

private static <O>Stream<O> nullSafeStream(final Collection<O> collection){

  return collection == null ? Stream.empty() : collection.stream();

}

Location: Streams.java

Content: 

/** 

 * Null-safe version of  {@link Stream#of(Object[])}.

 * @param < T > the type of stream elements.

 * @param values the elements of the new stream, may be {@code null}.

 * @return the new stream on {@code values} or {@link Stream#empty()}.

 * @since 3.13.0

 */

@SafeVarargs public static <T>Stream<T> of(final T... values){

  return values == null ? Stream.empty() : Stream.of(values);

}

Location: Streams.java

Content: 

/** 

 * Converts the given  {@link Collection} into a {@link FailableStream}. This is basically a simplified, reduced version of the  {@link Stream} class, with the same underlying element stream, except that failable objects, like{@link FailablePredicate},  {@link FailableFunction}, or  {@link FailableConsumer} may be applied, instead of{@link Predicate},  {@link Function}, or  {@link Consumer}. The idea is to rewrite a code snippet like this: <pre> final List&lt;O&gt; list; final Method m; final Function&lt;O, String&gt; mapper = (o) -&gt; { try { return (String) m.invoke(o); } catch (Throwable t) { throw Failable.rethrow(t); } }; final List&lt;String&gt; strList = list.stream().map(mapper).collect(Collectors.toList()); </pre> as follows: <pre> final List&lt;O&gt; list; final Method m; final List&lt;String&gt; strList = Failable.stream(list.stream()).map((o) -&gt; (String) m.invoke(o)) .collect(Collectors.toList()); </pre> While the second version may not be <em>quite</em> as efficient (because it depends on the creation of additional, intermediate objects, of type FailableStream), it is much more concise, and readable, and meets the spirit of Lambdas better than the first version.

 * @param < O > The streams element type.

 * @param stream The stream, which is being converted.

 * @return The {@link FailableStream}, which has been created by converting the stream.

 */

public static <O>FailableStream<O> stream(final Collection<O> stream){

  return stream(nullSafeStream(stream));

}

Location: Streams.java

Content: 

/** 

 * Converts the given  {@link Stream stream} into a {@link FailableStream}. This is basically a simplified, reduced version of the  {@link Stream} class, with the same underlying element stream, except that failable objects, like{@link FailablePredicate},  {@link FailableFunction}, or  {@link FailableConsumer} may be applied, instead of{@link Predicate},  {@link Function}, or  {@link Consumer}. The idea is to rewrite a code snippet like this: <pre> final List&lt;O&gt; list; final Method m; final Function&lt;O, String&gt; mapper = (o) -&gt; { try { return (String) m.invoke(o); } catch (Throwable t) { throw Failable.rethrow(t); } }; final List&lt;String&gt; strList = list.stream().map(mapper).collect(Collectors.toList()); </pre> as follows: <pre> final List&lt;O&gt; list; final Method m; final List&lt;String&gt; strList = Failable.stream(list.stream()).map((o) -&gt; (String) m.invoke(o)) .collect(Collectors.toList()); </pre> While the second version may not be <em>quite</em> as efficient (because it depends on the creation of additional, intermediate objects, of type FailableStream), it is much more concise, and readable, and meets the spirit of Lambdas better than the first version.

 * @param < O > The streams element type.

 * @param stream The stream, which is being converted.

 * @return The {@link FailableStream}, which has been created by converting the stream.

 */

public static <O>FailableStream<O> stream(final Stream<O> stream){

  return new FailableStream<>(stream);

}

Location: Streams.java

Content: 

/** 

 * Returns a  {@code Collector} that accumulates the input elements into a new array.

 * @param pElementType Type of an element in the array.

 * @param < O > the type of the input elements

 * @return a {@code Collector} which collects all the input elements into an array, in encounter order

 */

public static <O extends Object>Collector<O,?,O[]> toArray(final Class<O> pElementType){

  return new ArrayCollector<>(pElementType);

}

