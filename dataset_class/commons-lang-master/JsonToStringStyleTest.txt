Location: JsonToStringStyleTest.java

Content: 

@Test public void testArrayEnum(){

  final Teacher teacher=new Teacher();

  final Hobby[] hobbies=new Hobby[3];

  hobbies[0]=Hobby.BOOK;

  hobbies[1]=Hobby.SPORT;

  hobbies[2]=Hobby.MUSIC;

  teacher.setHobbies(hobbies);

  assertEquals(teacher.toString(),"{\"hobbies\":[\"BOOK\",\"SPORT\",\"MUSIC\"]}");

  teacher.setHobbies(new Hobby[0]);

  assertEquals(teacher.toString(),"{\"hobbies\":[]}");

  teacher.setHobbies(null);

  assertEquals(teacher.toString(),"{\"hobbies\":null}");

}

Location: JsonToStringStyleTest.java

Content: 

@Test public void testCombineListAndEnum(){

  final Teacher teacher=new Teacher();

  final Hobby[] teacherHobbies=new Hobby[3];

  teacherHobbies[0]=Hobby.BOOK;

  teacherHobbies[1]=Hobby.SPORT;

  teacherHobbies[2]=Hobby.MUSIC;

  teacher.setHobbies(teacherHobbies);

  final Student john=new Student();

  john.setHobbies(Arrays.asList(Hobby.BOOK,Hobby.MUSIC));

  final Student alice=new Student();

  alice.setHobbies(new ArrayList<>());

  final Student bob=new Student();

  bob.setHobbies(Collections.singletonList(Hobby.BOOK));

  final ArrayList<Student> students=new ArrayList<>();

  students.add(john);

  students.add(alice);

  students.add(bob);

  final AcademyClass academyClass=new AcademyClass();

  academyClass.setStudents(students);

  academyClass.setTeacher(teacher);

  assertEquals(academyClass.toString(),"{\"students\":[{\"hobbies\":[\"BOOK\",\"MUSIC\"]},{\"hobbies\":[]},{\"hobbies\":[\"BOOK\"]}],\"teacher\":{\"hobbies\":[\"BOOK\",\"SPORT\",\"MUSIC\"]}}");

}

Location: JsonToStringStyleTest.java

Content: 

@Test public void testDate(){

  final Date now=new Date();

  final Date afterNow=new Date(System.currentTimeMillis() + 1);

  assertThrows(UnsupportedOperationException.class,() -> new ToStringBuilder(base).append(now).toString());

  assertEquals("{\"now\":\"" + now.toString() + "\"}",new ToStringBuilder(base).append("now",now).toString());

  assertEquals("{\"now\":\"" + now.toString() + "\",\"after\":\""+ afterNow.toString()+ "\"}",new ToStringBuilder(base).append("now",now).append("after",afterNow).toString());

}

Location: JsonToStringStyleTest.java

Content: 

@Test public void testLANG1395(){

  assertEquals("{\"name\":\"value\"}",new ToStringBuilder(base).append("name","value").toString());

  assertEquals("{\"name\":\"\"}",new ToStringBuilder(base).append("name","").toString());

  assertEquals("{\"name\":\"\\\"\"}",new ToStringBuilder(base).append("name",'"').toString());

  assertEquals("{\"name\":\"\\\\\"}",new ToStringBuilder(base).append("name",'\\').toString());

  assertEquals("{\"name\":\"Let's \\\"quote\\\" this\"}",new ToStringBuilder(base).append("name","Let's \"quote\" this").toString());

}

Location: JsonToStringStyleTest.java

Content: 

@Test public void testLANG1396(){

  assertEquals("{\"Let's \\\"quote\\\" this\":\"value\"}",new ToStringBuilder(base).append("Let's \"quote\" this","value").toString());

}

Location: JsonToStringStyleTest.java

Content: 

@Test public void testList(){

  final Student student=new Student();

  final ArrayList<Hobby> objects=new ArrayList<>();

  objects.add(Hobby.BOOK);

  objects.add(Hobby.SPORT);

  objects.add(Hobby.MUSIC);

  student.setHobbies(objects);

  assertEquals(student.toString(),"{\"hobbies\":[\"BOOK\",\"SPORT\",\"MUSIC\"]}");

  student.setHobbies(new ArrayList<>());

  assertEquals(student.toString(),"{\"hobbies\":[]}");

  student.setHobbies(null);

  assertEquals(student.toString(),"{\"hobbies\":null}");

}

Location: JsonToStringStyleTest.java

Content: 

@Test public void testMapSkipNullKey(){

  final Map<String,Object> map=new LinkedHashMap<>();

  map.put("k1","v1");

  map.put(null,"v2");

  assertEquals("{\"map\":{\"k1\":\"v1\"}}",new ToStringBuilder(base).append("map",map).toString());

}

Location: JsonToStringStyleTest.java

Content: 

@Test public void testNestedMaps(){

  final Map<String,Object> innerMap=new LinkedHashMap<>();

  innerMap.put("k2.1","v2.1");

  innerMap.put("k2.2","v2.2");

  final Map<String,Object> baseMap=new LinkedHashMap<>();

  baseMap.put("k1","v1");

  baseMap.put("k2",innerMap);

  final InnerMapObject object=new InnerMapObject(){

    @Override public String toString(){

      return new ToStringBuilder(this).append("pid",this.pid).append("map",this.map).toString();

    }

  }

;

  object.pid="dummy-text";

  object.map=baseMap;

  assertEquals("{\"object\":{\"pid\":\"dummy-text\",\"map\":{\"k1\":\"v1\"," + "\"k2\":{\"k2.1\":\"v2.1\",\"k2.2\":\"v2.2\"}}}}",new ToStringBuilder(base).append("object",object).toString());

}

Location: JsonToStringStyleTest.java

Content: 

@Test public void testNestingPerson(){

  final Person p=new Person(){

    @Override public String toString(){

      return new ToStringBuilder(this).append("name",this.name).append("age",this.age).append("smoker",this.smoker).toString();

    }

  }

;

  p.name="Jane Doe";

  p.age=25;

  p.smoker=true;

  final NestingPerson nestP=new NestingPerson();

  nestP.pid="#1@Jane";

  nestP.person=p;

  assertEquals("{\"pid\":\"#1@Jane\",\"person\":{\"name\":\"Jane Doe\",\"age\":25,\"smoker\":true}}",new ToStringBuilder(nestP).append("pid",nestP.pid).append("person",nestP.person).toString());

}

Location: JsonToStringStyleTest.java

Content: 

@Test public void testObjectWithInnerMap(){

  final Map<String,Object> map=new LinkedHashMap<>();

  map.put("k1","value1");

  map.put("k2",2);

  final InnerMapObject object=new InnerMapObject(){

    @Override public String toString(){

      return new ToStringBuilder(this).append("pid",this.pid).append("map",this.map).toString();

    }

  }

;

  object.pid="dummy-text";

  object.map=map;

  assertEquals("{\"object\":{\"pid\":\"dummy-text\",\"map\":{\"k1\":\"value1\",\"k2\":2}}}",new ToStringBuilder(base).append("object",object).toString());

}

Location: JsonToStringStyleTest.java

Content: 

@Test public void testRootMap(){

  final Map<String,Object> map=new LinkedHashMap<>();

  map.put("k1","v1");

  map.put("k2",2);

  assertEquals("{\"map\":{\"k1\":\"v1\",\"k2\":2}}",new ToStringBuilder(base).append("map",map).toString());

}

