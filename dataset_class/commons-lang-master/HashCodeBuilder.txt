Location: HashCodeBuilder.java

Content: 

/** 

 * <p> Append a  {@code hashCode} for an array.</p>

 * @param object the array to add to the  {@code hashCode}

 */

private void appendArray(final Object object){

  if (object instanceof long[]) {

    append((long[])object);

  }

 else   if (object instanceof int[]) {

    append((int[])object);

  }

 else   if (object instanceof short[]) {

    append((short[])object);

  }

 else   if (object instanceof char[]) {

    append((char[])object);

  }

 else   if (object instanceof byte[]) {

    append((byte[])object);

  }

 else   if (object instanceof double[]) {

    append((double[])object);

  }

 else   if (object instanceof float[]) {

    append((float[])object);

  }

 else   if (object instanceof boolean[]) {

    append((boolean[])object);

  }

 else {

    append((Object[])object);

  }

}

Location: HashCodeBuilder.java

Content: 

/** 

 * <p> Adds the result of super.hashCode() to this builder. </p>

 * @param superHashCode the result of calling  {@code super.hashCode()}

 * @return this HashCodeBuilder, used to chain calls.

 * @since 2.0

 */

public HashCodeBuilder appendSuper(final int superHashCode){

  iTotal=iTotal * iConstant + superHashCode;

  return this;

}

Location: HashCodeBuilder.java

Content: 

/** 

 * <p> Append a  {@code hashCode} for a {@code byte} array.</p>

 * @param array the array to add to the  {@code hashCode}

 * @return this

 */

public HashCodeBuilder append(final byte[] array){

  if (array == null) {

    iTotal=iTotal * iConstant;

  }

 else {

    for (    final byte element : array) {

      append(element);

    }

  }

  return this;

}

Location: HashCodeBuilder.java

Content: 

/** 

 * <p> Append a  {@code hashCode} for a {@code short} array.</p>

 * @param array the array to add to the  {@code hashCode}

 * @return this

 */

public HashCodeBuilder append(final short[] array){

  if (array == null) {

    iTotal=iTotal * iConstant;

  }

 else {

    for (    final short element : array) {

      append(element);

    }

  }

  return this;

}

Location: HashCodeBuilder.java

Content: 

/** 

 * <p> Returns the registry of objects being traversed by the reflection methods in the current thread. </p>

 * @return Set the registry of objects being traversed

 * @since 2.3

 */

static Set<IDKey> getRegistry(){

  return REGISTRY.get();

}

Location: HashCodeBuilder.java

Content: 

/** 

 * <p> Uses two hard coded choices for the constants needed to build a  {@code hashCode}. </p>

 */

public HashCodeBuilder(){

  iConstant=37;

  iTotal=17;

}

Location: HashCodeBuilder.java

Content: 

/** 

 * <p> Two randomly chosen, odd numbers must be passed in. Ideally these should be different for each class, however this is not vital. </p> <p> Prime numbers are preferred, especially for the multiplier. </p>

 * @param initialOddNumber an odd number used as the initial value

 * @param multiplierOddNumber an odd number used as the multiplier

 * @throws IllegalArgumentException if the number is even

 */

public HashCodeBuilder(final int initialOddNumber,final int multiplierOddNumber){

  Validate.isTrue(initialOddNumber % 2 != 0,"HashCodeBuilder requires an odd initial value");

  Validate.isTrue(multiplierOddNumber % 2 != 0,"HashCodeBuilder requires an odd multiplier");

  iConstant=multiplierOddNumber;

  iTotal=initialOddNumber;

}

Location: HashCodeBuilder.java

Content: 

/** 

 * <p> Returns  {@code true} if the registry contains the given object. Used by the reflection methods to avoidinfinite loops. </p>

 * @param value The object to lookup in the registry.

 * @return boolean {@code true} if the registry contains the given object.

 * @since 2.3

 */

static boolean isRegistered(final Object value){

  final Set<IDKey> registry=getRegistry();

  return registry != null && registry.contains(new IDKey(value));

}

Location: HashCodeBuilder.java

Content: 

/** 

 * <p> Appends the fields and values defined by the given object of the given  {@code Class}. </p>

 * @param object the object to append details of

 * @param clazz the class to append details of

 * @param builder the builder to append to

 * @param useTransients whether to use transient fields

 * @param excludeFields Collection of String field names to exclude from use in calculation of hash code

 */

private static void reflectionAppend(final Object object,final Class<?> clazz,final HashCodeBuilder builder,final boolean useTransients,final String[] excludeFields){

  if (isRegistered(object)) {

    return;

  }

  try {

    register(object);

    final Field[] fields=ArraySorter.sort(clazz.getDeclaredFields(),Comparator.comparing(Field::getName));

    AccessibleObject.setAccessible(fields,true);

    for (    final Field field : fields) {

      if (!ArrayUtils.contains(excludeFields,field.getName()) && !field.getName().contains("$") && (useTransients || !Modifier.isTransient(field.getModifiers()))&& !Modifier.isStatic(field.getModifiers())&& !field.isAnnotationPresent(HashCodeExclude.class)) {

        try {

          final Object fieldValue=field.get(object);

          builder.append(fieldValue);

        }

 catch (        final IllegalAccessException e) {

          throw new InternalError("Unexpected IllegalAccessException");

        }

      }

    }

  }

  finally {

    unregister(object);

  }

}

Location: HashCodeBuilder.java

Content: 

/** 

 * <p> Uses reflection to build a valid hash code from the fields of  {@code object}. </p> <p> It uses  {@code AccessibleObject.setAccessible} to gain access to private fields. This means that it willthrow a security exception if run under a security manager, if the permissions are not set up correctly. It is also not as efficient as testing explicitly. </p> <p> Transient members will be not be used, as they are likely derived fields, and not part of the value of the {@code Object}. </p> <p> Static fields will not be tested. Superclass fields will be included. </p> <p> Two randomly chosen, non-zero, odd numbers must be passed in. Ideally these should be different for each class, however this is not vital. Prime numbers are preferred, especially for the multiplier. </p>

 * @param initialNonZeroOddNumber a non-zero, odd number used as the initial value. This will be the returned value if no fields are found to include in the hash code

 * @param multiplierNonZeroOddNumber a non-zero, odd number used as the multiplier

 * @param object the Object to create a  {@code hashCode} for

 * @return int hash code

 * @throws IllegalArgumentException if the Object is  {@code null}

 * @throws IllegalArgumentException if the number is zero or even

 * @see HashCodeExclude

 */

public static int reflectionHashCode(final int initialNonZeroOddNumber,final int multiplierNonZeroOddNumber,final Object object){

  return reflectionHashCode(initialNonZeroOddNumber,multiplierNonZeroOddNumber,object,false,null);

}

Location: HashCodeBuilder.java

Content: 

/** 

 * <p> Uses reflection to build a valid hash code from the fields of  {@code object}. </p> <p> It uses  {@code AccessibleObject.setAccessible} to gain access to private fields. This means that it willthrow a security exception if run under a security manager, if the permissions are not set up correctly. It is also not as efficient as testing explicitly. </p> <p> If the TestTransients parameter is set to  {@code true}, transient members will be tested, otherwise they are ignored, as they are likely derived fields, and not part of the value of the  {@code Object}. </p> <p> Static fields will not be tested. Superclass fields will be included. </p> <p> Two randomly chosen, non-zero, odd numbers must be passed in. Ideally these should be different for each class, however this is not vital. Prime numbers are preferred, especially for the multiplier. </p>

 * @param initialNonZeroOddNumber a non-zero, odd number used as the initial value. This will be the returned value if no fields are found to include in the hash code

 * @param multiplierNonZeroOddNumber a non-zero, odd number used as the multiplier

 * @param object the Object to create a  {@code hashCode} for

 * @param testTransients whether to include transient fields

 * @return int hash code

 * @throws IllegalArgumentException if the Object is  {@code null}

 * @throws IllegalArgumentException if the number is zero or even

 * @see HashCodeExclude

 */

public static int reflectionHashCode(final int initialNonZeroOddNumber,final int multiplierNonZeroOddNumber,final Object object,final boolean testTransients){

  return reflectionHashCode(initialNonZeroOddNumber,multiplierNonZeroOddNumber,object,testTransients,null);

}

Location: HashCodeBuilder.java

Content: 

/** 

 * <p> Uses reflection to build a valid hash code from the fields of  {@code object}. </p> <p> It uses  {@code AccessibleObject.setAccessible} to gain access to private fields. This means that it willthrow a security exception if run under a security manager, if the permissions are not set up correctly. It is also not as efficient as testing explicitly. </p> <p> If the TestTransients parameter is set to  {@code true}, transient members will be tested, otherwise they are ignored, as they are likely derived fields, and not part of the value of the  {@code Object}. </p> <p> Static fields will not be included. Superclass fields will be included up to and including the specified superclass. A null superclass is treated as java.lang.Object. </p> <p> Two randomly chosen, non-zero, odd numbers must be passed in. Ideally these should be different for each class, however this is not vital. Prime numbers are preferred, especially for the multiplier. </p>

 * @param < T > the type of the object involved

 * @param initialNonZeroOddNumber a non-zero, odd number used as the initial value. This will be the returned value if no fields are found to include in the hash code

 * @param multiplierNonZeroOddNumber a non-zero, odd number used as the multiplier

 * @param object the Object to create a  {@code hashCode} for

 * @param testTransients whether to include transient fields

 * @param reflectUpToClass the superclass to reflect up to (inclusive), may be  {@code null}

 * @param excludeFields array of field names to exclude from use in calculation of hash code

 * @return int hash code

 * @throws IllegalArgumentException if the Object is  {@code null}

 * @throws IllegalArgumentException if the number is zero or even

 * @see HashCodeExclude

 * @since 2.0

 */

public static <T>int reflectionHashCode(final int initialNonZeroOddNumber,final int multiplierNonZeroOddNumber,final T object,final boolean testTransients,final Class<? super T> reflectUpToClass,final String... excludeFields){

  Validate.notNull(object,"object");

  final HashCodeBuilder builder=new HashCodeBuilder(initialNonZeroOddNumber,multiplierNonZeroOddNumber);

  Class<?> clazz=object.getClass();

  reflectionAppend(object,clazz,builder,testTransients,excludeFields);

  while (clazz.getSuperclass() != null && clazz != reflectUpToClass) {

    clazz=clazz.getSuperclass();

    reflectionAppend(object,clazz,builder,testTransients,excludeFields);

  }

  return builder.toHashCode();

}

Location: HashCodeBuilder.java

Content: 

/** 

 * <p> Uses reflection to build a valid hash code from the fields of  {@code object}. </p> <p> This constructor uses two hard coded choices for the constants needed to build a hash code. </p> <p> It uses  {@code AccessibleObject.setAccessible} to gain access to private fields. This means that it willthrow a security exception if run under a security manager, if the permissions are not set up correctly. It is also not as efficient as testing explicitly. </p> <P> If the TestTransients parameter is set to  {@code true}, transient members will be tested, otherwise they are ignored, as they are likely derived fields, and not part of the value of the  {@code Object}. </p> <p> Static fields will not be tested. Superclass fields will be included. If no fields are found to include in the hash code, the result of this method will be constant. </p>

 * @param object the Object to create a  {@code hashCode} for

 * @param testTransients whether to include transient fields

 * @return int hash code

 * @throws IllegalArgumentException if the object is  {@code null}

 * @see HashCodeExclude

 */

public static int reflectionHashCode(final Object object,final boolean testTransients){

  return reflectionHashCode(DEFAULT_INITIAL_VALUE,DEFAULT_MULTIPLIER_VALUE,object,testTransients,null);

}

Location: HashCodeBuilder.java

Content: 

/** 

 * <p> Uses reflection to build a valid hash code from the fields of  {@code object}. </p> <p> This constructor uses two hard coded choices for the constants needed to build a hash code. </p> <p> It uses  {@code AccessibleObject.setAccessible} to gain access to private fields. This means that it willthrow a security exception if run under a security manager, if the permissions are not set up correctly. It is also not as efficient as testing explicitly. </p> <p> Transient members will be not be used, as they are likely derived fields, and not part of the value of the {@code Object}. </p> <p> Static fields will not be tested. Superclass fields will be included. If no fields are found to include in the hash code, the result of this method will be constant. </p>

 * @param object the Object to create a  {@code hashCode} for

 * @param excludeFields Collection of String field names to exclude from use in calculation of hash code

 * @return int hash code

 * @throws IllegalArgumentException if the object is  {@code null}

 * @see HashCodeExclude

 */

public static int reflectionHashCode(final Object object,final Collection<String> excludeFields){

  return reflectionHashCode(object,ReflectionToStringBuilder.toNoNullStringArray(excludeFields));

}

Location: HashCodeBuilder.java

Content: 

/** 

 * <p> Uses reflection to build a valid hash code from the fields of  {@code object}. </p> <p> This constructor uses two hard coded choices for the constants needed to build a hash code. </p> <p> It uses  {@code AccessibleObject.setAccessible} to gain access to private fields. This means that it willthrow a security exception if run under a security manager, if the permissions are not set up correctly. It is also not as efficient as testing explicitly. </p> <p> Transient members will be not be used, as they are likely derived fields, and not part of the value of the {@code Object}. </p> <p> Static fields will not be tested. Superclass fields will be included. If no fields are found to include in the hash code, the result of this method will be constant. </p>

 * @param object the Object to create a  {@code hashCode} for

 * @param excludeFields array of field names to exclude from use in calculation of hash code

 * @return int hash code

 * @throws IllegalArgumentException if the object is  {@code null}

 * @see HashCodeExclude

 */

public static int reflectionHashCode(final Object object,final String... excludeFields){

  return reflectionHashCode(DEFAULT_INITIAL_VALUE,DEFAULT_MULTIPLIER_VALUE,object,false,null,excludeFields);

}

Location: HashCodeBuilder.java

Content: 

/** 

 * <p> Registers the given object. Used by the reflection methods to avoid infinite loops. </p>

 * @param value The object to register.

 */

private static void register(final Object value){

  Set<IDKey> registry=getRegistry();

  if (registry == null) {

    registry=new HashSet<>();

    REGISTRY.set(registry);

  }

  registry.add(new IDKey(value));

}

Location: HashCodeBuilder.java

Content: 

/** 

 * <p> Returns the computed  {@code hashCode}. </p>

 * @return {@code hashCode} based on the fields appended

 */

public int toHashCode(){

  return iTotal;

}

Location: HashCodeBuilder.java

Content: 

/** 

 * <p> Unregisters the given object. </p> <p> Used by the reflection methods to avoid infinite loops.

 * @param value The object to unregister.

 * @since 2.3

 */

private static void unregister(final Object value){

  final Set<IDKey> registry=getRegistry();

  if (registry != null) {

    registry.remove(new IDKey(value));

    if (registry.isEmpty()) {

      REGISTRY.remove();

    }

  }

}

