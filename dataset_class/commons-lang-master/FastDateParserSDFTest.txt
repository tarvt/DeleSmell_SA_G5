Location: FastDateParserSDFTest.java

Content: 

private void checkParsePosition(final String formattedDate,final String format,final Locale locale,final boolean valid){

  final SimpleDateFormat sdf=new SimpleDateFormat(format,locale);

  sdf.setTimeZone(timeZone);

  final DateParser fdf=new FastDateParser(format,timeZone,locale);

  final ParsePosition sdfP=new ParsePosition(0);

  final Date expectedTime=sdf.parse(formattedDate,sdfP);

  final int sdferrorIndex=sdfP.getErrorIndex();

  if (valid) {

    assertEquals(-1,sdferrorIndex,"Expected SDF error index -1 ");

    final int endIndex=sdfP.getIndex();

    final int length=formattedDate.length();

    if (endIndex != length) {

      throw new RuntimeException("Test data error: expected SDF parse to consume entire string; endindex " + endIndex + " != "+ length);

    }

  }

 else {

    final int errorIndex=sdfP.getErrorIndex();

    if (errorIndex == -1) {

      throw new RuntimeException("Test data error: expected SDF parse to fail, but got " + expectedTime);

    }

  }

  final ParsePosition fdfP=new ParsePosition(0);

  final Date actualTime=fdf.parse(formattedDate,fdfP);

  final int fdferrorIndex=fdfP.getErrorIndex();

  if (valid) {

    assertEquals(-1,fdferrorIndex,"Expected FDF error index -1 ");

    final int endIndex=fdfP.getIndex();

    final int length=formattedDate.length();

    assertEquals(length,endIndex,"Expected FDF to parse full string " + fdfP);

    assertEquals(expectedTime,actualTime,locale.toString() + " " + formattedDate+ "\n");

  }

 else {

    assertNotEquals(-1,fdferrorIndex,"Test data error: expected FDF parse to fail, but got " + actualTime);

    assertTrue(sdferrorIndex - fdferrorIndex <= 4,"FDF error index (" + fdferrorIndex + ") should approximate SDF index ("+ sdferrorIndex+ ")");

  }

}

Location: FastDateParserSDFTest.java

Content: 

private void checkParse(final String formattedDate,final String format,final Locale locale,final boolean valid){

  final SimpleDateFormat sdf=new SimpleDateFormat(format,locale);

  sdf.setTimeZone(timeZone);

  final DateParser fdf=new FastDateParser(format,timeZone,locale);

  Date expectedTime=null;

  Class<?> sdfE=null;

  try {

    expectedTime=sdf.parse(formattedDate);

    if (!valid) {

      throw new RuntimeException("Test data error: expected SDF parse to fail, but got " + expectedTime);

    }

  }

 catch (  final ParseException e) {

    if (valid) {

      throw new RuntimeException("Test data error: expected SDF parse to succeed, but got " + e);

    }

    sdfE=e.getClass();

  }

  Date actualTime=null;

  Class<?> fdfE=null;

  try {

    actualTime=fdf.parse(formattedDate);

    assertTrue(valid,"Expected FDP parse to fail, but got " + actualTime);

  }

 catch (  final ParseException e) {

    assertFalse(valid,"Expected FDP parse to succeed, but got " + e);

    fdfE=e.getClass();

  }

  if (valid) {

    assertEquals(expectedTime,actualTime,locale.toString() + " " + formattedDate+ "\n");

  }

 else {

    assertEquals(sdfE,fdfE,locale.toString() + " " + formattedDate+ " expected same Exception ");

  }

}

Location: FastDateParserSDFTest.java

Content: 

public static Stream<Arguments> data(){

  return Stream.of(Arguments.of("z yyyy","GMT 2010",Locale.UK,true),Arguments.of("z yyyy","GMT-123 2010",Locale.UK,false),Arguments.of("z yyyy","GMT-1234 2010",Locale.UK,false),Arguments.of("z yyyy","GMT-12:34 2010",Locale.UK,true),Arguments.of("z yyyy","GMT-1:23 2010",Locale.UK,true),Arguments.of("z yyyy","-1234 2010",Locale.UK,true),Arguments.of("z yyyy","-12:34 2010",Locale.UK,false),Arguments.of("z yyyy","-123 2010",Locale.UK,false),Arguments.of("MM/dd/yyyy","01/11/12",Locale.UK,true),Arguments.of("MM/dd/yy","01/11/12",Locale.UK,true),Arguments.of("HH","00",Locale.UK,true),Arguments.of("KK","00",Locale.UK,true),Arguments.of("hh","00",Locale.UK,true),Arguments.of("kk","00",Locale.UK,true),Arguments.of("HH","01",Locale.UK,true),Arguments.of("KK","01",Locale.UK,true),Arguments.of("hh","01",Locale.UK,true),Arguments.of("kk","01",Locale.UK,true),Arguments.of("HH","11",Locale.UK,true),Arguments.of("KK","11",Locale.UK,true),Arguments.of("hh","11",Locale.UK,true),Arguments.of("kk","11",Locale.UK,true),Arguments.of("HH","12",Locale.UK,true),Arguments.of("KK","12",Locale.UK,true),Arguments.of("hh","12",Locale.UK,true),Arguments.of("kk","12",Locale.UK,true),Arguments.of("HH","13",Locale.UK,true),Arguments.of("KK","13",Locale.UK,true),Arguments.of("hh","13",Locale.UK,true),Arguments.of("kk","13",Locale.UK,true),Arguments.of("HH","23",Locale.UK,true),Arguments.of("KK","23",Locale.UK,true),Arguments.of("hh","23",Locale.UK,true),Arguments.of("kk","23",Locale.UK,true),Arguments.of("HH","24",Locale.UK,true),Arguments.of("KK","24",Locale.UK,true),Arguments.of("hh","24",Locale.UK,true),Arguments.of("kk","24",Locale.UK,true),Arguments.of("HH","25",Locale.UK,true),Arguments.of("KK","25",Locale.UK,true),Arguments.of("hh","25",Locale.UK,true),Arguments.of("kk","25",Locale.UK,true),Arguments.of("HH","48",Locale.UK,true),Arguments.of("KK","48",Locale.UK,true),Arguments.of("hh","48",Locale.UK,true),Arguments.of("kk","48",Locale.UK,true));

}

Location: FastDateParserSDFTest.java

Content: 

@ParameterizedTest @MethodSource("data") public void testLowerCasePP(final String format,final String input,final Locale locale,final boolean valid){

  checkParsePosition(input.toLowerCase(locale),format,locale,valid);

}

Location: FastDateParserSDFTest.java

Content: 

@ParameterizedTest @MethodSource("data") public void testLowerCase(final String format,final String input,final Locale locale,final boolean valid){

  checkParse(input.toLowerCase(locale),format,locale,valid);

}

Location: FastDateParserSDFTest.java

Content: 

@ParameterizedTest @MethodSource("data") public void testOriginalPP(final String format,final String input,final Locale locale,final boolean valid){

  checkParsePosition(input,format,locale,valid);

}

Location: FastDateParserSDFTest.java

Content: 

@ParameterizedTest @MethodSource("data") public void testOriginal(final String format,final String input,final Locale locale,final boolean valid){

  checkParse(input,format,locale,valid);

}

Location: FastDateParserSDFTest.java

Content: 

@ParameterizedTest @MethodSource("data") public void testUpperCasePP(final String format,final String input,final Locale locale,final boolean valid){

  checkParsePosition(input.toUpperCase(locale),format,locale,valid);

}

Location: FastDateParserSDFTest.java

Content: 

@ParameterizedTest @MethodSource("data") public void testUpperCase(final String format,final String input,final Locale locale,final boolean valid){

  checkParse(input.toUpperCase(locale),format,locale,valid);

}

