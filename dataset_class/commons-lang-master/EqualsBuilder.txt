Location: EqualsBuilder.java

Content: 

/** 

 * <p>Test if an  {@code Object} is equal to an array.</p>

 * @param lhs  the left hand object, an array

 * @param rhs  the right hand object

 */

private void appendArray(final Object lhs,final Object rhs){

  if (lhs.getClass() != rhs.getClass()) {

    this.setEquals(false);

  }

 else   if (lhs instanceof long[]) {

    append((long[])lhs,(long[])rhs);

  }

 else   if (lhs instanceof int[]) {

    append((int[])lhs,(int[])rhs);

  }

 else   if (lhs instanceof short[]) {

    append((short[])lhs,(short[])rhs);

  }

 else   if (lhs instanceof char[]) {

    append((char[])lhs,(char[])rhs);

  }

 else   if (lhs instanceof byte[]) {

    append((byte[])lhs,(byte[])rhs);

  }

 else   if (lhs instanceof double[]) {

    append((double[])lhs,(double[])rhs);

  }

 else   if (lhs instanceof float[]) {

    append((float[])lhs,(float[])rhs);

  }

 else   if (lhs instanceof boolean[]) {

    append((boolean[])lhs,(boolean[])rhs);

  }

 else {

    append((Object[])lhs,(Object[])rhs);

  }

}

Location: EqualsBuilder.java

Content: 

/** 

 * <p>Adds the result of  {@code super.equals()} to this builder.</p>

 * @param superEquals  the result of calling {@code super.equals()}

 * @return EqualsBuilder - used to chain calls.

 * @since 2.0

 */

public EqualsBuilder appendSuper(final boolean superEquals){

  if (!isEquals) {

    return this;

  }

  isEquals=superEquals;

  return this;

}

Location: EqualsBuilder.java

Content: 

/** 

 * <p>Deep comparison of array of  {@code boolean}. Length and all values are compared.</p> <p>The method  {@link #append(boolean,boolean)} is used.</p>

 * @param lhs  the left hand {@code boolean[]}

 * @param rhs  the right hand {@code boolean[]}

 * @return EqualsBuilder - used to chain calls.

 */

public EqualsBuilder append(final boolean[] lhs,final boolean[] rhs){

  if (!isEquals) {

    return this;

  }

  if (lhs == rhs) {

    return this;

  }

  if (lhs == null || rhs == null) {

    this.setEquals(false);

    return this;

  }

  if (lhs.length != rhs.length) {

    this.setEquals(false);

    return this;

  }

  for (int i=0; i < lhs.length && isEquals; ++i) {

    append(lhs[i],rhs[i]);

  }

  return this;

}

Location: EqualsBuilder.java

Content: 

/** 

 * <p>Deep comparison of array of  {@code byte}. Length and all values are compared.</p> <p>The method  {@link #append(byte,byte)} is used.</p>

 * @param lhs  the left hand {@code byte[]}

 * @param rhs  the right hand {@code byte[]}

 * @return EqualsBuilder - used to chain calls.

 */

public EqualsBuilder append(final byte[] lhs,final byte[] rhs){

  if (!isEquals) {

    return this;

  }

  if (lhs == rhs) {

    return this;

  }

  if (lhs == null || rhs == null) {

    this.setEquals(false);

    return this;

  }

  if (lhs.length != rhs.length) {

    this.setEquals(false);

    return this;

  }

  for (int i=0; i < lhs.length && isEquals; ++i) {

    append(lhs[i],rhs[i]);

  }

  return this;

}

Location: EqualsBuilder.java

Content: 

/** 

 * <p>Deep comparison of array of  {@code char}. Length and all values are compared.</p> <p>The method  {@link #append(char,char)} is used.</p>

 * @param lhs  the left hand {@code char[]}

 * @param rhs  the right hand {@code char[]}

 * @return EqualsBuilder - used to chain calls.

 */

public EqualsBuilder append(final char[] lhs,final char[] rhs){

  if (!isEquals) {

    return this;

  }

  if (lhs == rhs) {

    return this;

  }

  if (lhs == null || rhs == null) {

    this.setEquals(false);

    return this;

  }

  if (lhs.length != rhs.length) {

    this.setEquals(false);

    return this;

  }

  for (int i=0; i < lhs.length && isEquals; ++i) {

    append(lhs[i],rhs[i]);

  }

  return this;

}

Location: EqualsBuilder.java

Content: 

/** 

 * <p>Deep comparison of array of  {@code double}. Length and all values are compared.</p> <p>The method  {@link #append(double,double)} is used.</p>

 * @param lhs  the left hand {@code double[]}

 * @param rhs  the right hand {@code double[]}

 * @return EqualsBuilder - used to chain calls.

 */

public EqualsBuilder append(final double[] lhs,final double[] rhs){

  if (!isEquals) {

    return this;

  }

  if (lhs == rhs) {

    return this;

  }

  if (lhs == null || rhs == null) {

    this.setEquals(false);

    return this;

  }

  if (lhs.length != rhs.length) {

    this.setEquals(false);

    return this;

  }

  for (int i=0; i < lhs.length && isEquals; ++i) {

    append(lhs[i],rhs[i]);

  }

  return this;

}

Location: EqualsBuilder.java

Content: 

/** 

 * <p>Deep comparison of array of  {@code float}. Length and all values are compared.</p> <p>The method  {@link #append(float,float)} is used.</p>

 * @param lhs  the left hand {@code float[]}

 * @param rhs  the right hand {@code float[]}

 * @return EqualsBuilder - used to chain calls.

 */

public EqualsBuilder append(final float[] lhs,final float[] rhs){

  if (!isEquals) {

    return this;

  }

  if (lhs == rhs) {

    return this;

  }

  if (lhs == null || rhs == null) {

    this.setEquals(false);

    return this;

  }

  if (lhs.length != rhs.length) {

    this.setEquals(false);

    return this;

  }

  for (int i=0; i < lhs.length && isEquals; ++i) {

    append(lhs[i],rhs[i]);

  }

  return this;

}

Location: EqualsBuilder.java

Content: 

/** 

 * <p>Deep comparison of array of  {@code int}. Length and all values are compared.</p> <p>The method  {@link #append(int,int)} is used.</p>

 * @param lhs  the left hand {@code int[]}

 * @param rhs  the right hand {@code int[]}

 * @return EqualsBuilder - used to chain calls.

 */

public EqualsBuilder append(final int[] lhs,final int[] rhs){

  if (!isEquals) {

    return this;

  }

  if (lhs == rhs) {

    return this;

  }

  if (lhs == null || rhs == null) {

    this.setEquals(false);

    return this;

  }

  if (lhs.length != rhs.length) {

    this.setEquals(false);

    return this;

  }

  for (int i=0; i < lhs.length && isEquals; ++i) {

    append(lhs[i],rhs[i]);

  }

  return this;

}

Location: EqualsBuilder.java

Content: 

/** 

 * <p>Deep comparison of array of  {@code long}. Length and all values are compared.</p> <p>The method  {@link #append(long,long)} is used.</p>

 * @param lhs  the left hand {@code long[]}

 * @param rhs  the right hand {@code long[]}

 * @return EqualsBuilder - used to chain calls.

 */

public EqualsBuilder append(final long[] lhs,final long[] rhs){

  if (!isEquals) {

    return this;

  }

  if (lhs == rhs) {

    return this;

  }

  if (lhs == null || rhs == null) {

    this.setEquals(false);

    return this;

  }

  if (lhs.length != rhs.length) {

    this.setEquals(false);

    return this;

  }

  for (int i=0; i < lhs.length && isEquals; ++i) {

    append(lhs[i],rhs[i]);

  }

  return this;

}

Location: EqualsBuilder.java

Content: 

/** 

 * <p>Performs a deep comparison of two  {@code Object} arrays.</p><p>This also will be called for the top level of multi-dimensional, ragged, and multi-typed arrays.</p> <p>Note that this method does not compare the type of the arrays; it only compares the contents.</p>

 * @param lhs  the left hand {@code Object[]}

 * @param rhs  the right hand {@code Object[]}

 * @return EqualsBuilder - used to chain calls.

 */

public EqualsBuilder append(final Object[] lhs,final Object[] rhs){

  if (!isEquals) {

    return this;

  }

  if (lhs == rhs) {

    return this;

  }

  if (lhs == null || rhs == null) {

    this.setEquals(false);

    return this;

  }

  if (lhs.length != rhs.length) {

    this.setEquals(false);

    return this;

  }

  for (int i=0; i < lhs.length && isEquals; ++i) {

    append(lhs[i],rhs[i]);

  }

  return this;

}

Location: EqualsBuilder.java

Content: 

/** 

 * <p>Deep comparison of array of  {@code short}. Length and all values are compared.</p> <p>The method  {@link #append(short,short)} is used.</p>

 * @param lhs  the left hand {@code short[]}

 * @param rhs  the right hand {@code short[]}

 * @return EqualsBuilder - used to chain calls.

 */

public EqualsBuilder append(final short[] lhs,final short[] rhs){

  if (!isEquals) {

    return this;

  }

  if (lhs == rhs) {

    return this;

  }

  if (lhs == null || rhs == null) {

    this.setEquals(false);

    return this;

  }

  if (lhs.length != rhs.length) {

    this.setEquals(false);

    return this;

  }

  for (int i=0; i < lhs.length && isEquals; ++i) {

    append(lhs[i],rhs[i]);

  }

  return this;

}

Location: EqualsBuilder.java

Content: 

/** 

 * <p>Constructor for EqualsBuilder.</p> <p>Starts off assuming that equals is  {@code true}.</p>

 * @see Object#equals(Object)

 */

public EqualsBuilder(){

  bypassReflectionClasses=new ArrayList<>();

  bypassReflectionClasses.add(String.class);

}

Location: EqualsBuilder.java

Content: 

/** 

 * <p> Converters value pair into a register pair. </p>

 * @param lhs {@code this} object

 * @param rhs the other object

 * @return the pair

 */

static Pair<IDKey,IDKey> getRegisterPair(final Object lhs,final Object rhs){

  final IDKey left=new IDKey(lhs);

  final IDKey right=new IDKey(rhs);

  return Pair.of(left,right);

}

Location: EqualsBuilder.java

Content: 

/** 

 * <p>Returns  {@code true} if the fields that have been checkedare all equal.</p>

 * @return boolean

 */

public boolean isEquals(){

  return this.isEquals;

}

Location: EqualsBuilder.java

Content: 

/** 

 * <p> Returns  {@code true} if the registry contains the given object pair.Used by the reflection methods to avoid infinite loops. Objects might be swapped therefore a check is needed if the object pair is registered in given or swapped order. </p>

 * @param lhs {@code this} object to lookup in registry

 * @param rhs the other object to lookup on registry

 * @return boolean {@code true} if the registry contains the given object.

 * @since 3.0

 */

static boolean isRegistered(final Object lhs,final Object rhs){

  final Set<Pair<IDKey,IDKey>> registry=getRegistry();

  final Pair<IDKey,IDKey> pair=getRegisterPair(lhs,rhs);

  final Pair<IDKey,IDKey> swappedPair=Pair.of(pair.getRight(),pair.getLeft());

  return registry != null && (registry.contains(pair) || registry.contains(swappedPair));

}

Location: EqualsBuilder.java

Content: 

/** 

 * <p>Tests if two  {@code objects} by using reflection.</p><p>It uses  {@code AccessibleObject.setAccessible} to gain access to privatefields. This means that it will throw a security exception if run under a security manager, if the permissions are not set up correctly. It is also not as efficient as testing explicitly. Non-primitive fields are compared using {@code equals()}.</p> <p>If the testTransients field is set to  {@code true}, transient members will be tested, otherwise they are ignored, as they are likely derived fields, and not part of the value of the  {@code Object}.</p> <p>Static fields will not be included. Superclass fields will be appended up to and including the specified superclass in field  {@code reflectUpToClass}. A null superclass is treated as java.lang.Object.</p> <p>Field names listed in field  {@code excludeFields} will be ignored.</p><p>If either class of the compared objects is contained in {@code bypassReflectionClasses}, both objects are compared by calling the equals method of the left hand object with the right hand object as an argument.</p>

 * @param lhs  the left hand object

 * @param rhs  the left hand object

 * @return EqualsBuilder - used to chain calls.

 */

public EqualsBuilder reflectionAppend(final Object lhs,final Object rhs){

  if (!isEquals) {

    return this;

  }

  if (lhs == rhs) {

    return this;

  }

  if (lhs == null || rhs == null) {

    isEquals=false;

    return this;

  }

  final Class<?> lhsClass=lhs.getClass();

  final Class<?> rhsClass=rhs.getClass();

  Class<?> testClass;

  if (lhsClass.isInstance(rhs)) {

    testClass=lhsClass;

    if (!rhsClass.isInstance(lhs)) {

      testClass=rhsClass;

    }

  }

 else   if (rhsClass.isInstance(lhs)) {

    testClass=rhsClass;

    if (!lhsClass.isInstance(rhs)) {

      testClass=lhsClass;

    }

  }

 else {

    isEquals=false;

    return this;

  }

  try {

    if (testClass.isArray()) {

      append(lhs,rhs);

    }

 else     if (bypassReflectionClasses != null && (bypassReflectionClasses.contains(lhsClass) || bypassReflectionClasses.contains(rhsClass))) {

      isEquals=lhs.equals(rhs);

    }

 else {

      reflectionAppend(lhs,rhs,testClass);

      while (testClass.getSuperclass() != null && testClass != reflectUpToClass) {

        testClass=testClass.getSuperclass();

        reflectionAppend(lhs,rhs,testClass);

      }

    }

  }

 catch (  final IllegalArgumentException e) {

    isEquals=false;

  }

  return this;

}

Location: EqualsBuilder.java

Content: 

/** 

 * <p>Appends the fields and values defined by the given object of the given Class.</p>

 * @param lhs  the left hand object

 * @param rhs  the right hand object

 * @param clazz  the class to append details of

 */

private void reflectionAppend(final Object lhs,final Object rhs,final Class<?> clazz){

  if (isRegistered(lhs,rhs)) {

    return;

  }

  try {

    register(lhs,rhs);

    final Field[] fields=clazz.getDeclaredFields();

    AccessibleObject.setAccessible(fields,true);

    for (int i=0; i < fields.length && isEquals; i++) {

      final Field f=fields[i];

      if (!ArrayUtils.contains(excludeFields,f.getName()) && !f.getName().contains("$") && (testTransients || !Modifier.isTransient(f.getModifiers()))&& !Modifier.isStatic(f.getModifiers())&& !f.isAnnotationPresent(EqualsExclude.class)) {

        try {

          append(f.get(lhs),f.get(rhs));

        }

 catch (        final IllegalAccessException e) {

          throw new InternalError("Unexpected IllegalAccessException");

        }

      }

    }

  }

  finally {

    unregister(lhs,rhs);

  }

}

Location: EqualsBuilder.java

Content: 

/** 

 * <p>This method uses reflection to determine if the two  {@code Object}s are equal.</p> <p>It uses  {@code AccessibleObject.setAccessible} to gain access to privatefields. This means that it will throw a security exception if run under a security manager, if the permissions are not set up correctly. It is also not as efficient as testing explicitly. Non-primitive fields are compared using {@code equals()}.</p> <p>If the TestTransients parameter is set to  {@code true}, transient members will be tested, otherwise they are ignored, as they are likely derived fields, and not part of the value of the  {@code Object}.</p> <p>Static fields will not be tested. Superclass fields will be included.</p>

 * @param lhs  {@code this} object

 * @param rhs  the other object

 * @param testTransients  whether to include transient fields

 * @return {@code true} if the two Objects have tested equals.

 * @see EqualsExclude

 */

public static boolean reflectionEquals(final Object lhs,final Object rhs,final boolean testTransients){

  return reflectionEquals(lhs,rhs,testTransients,null);

}

Location: EqualsBuilder.java

Content: 

/** 

 * <p>This method uses reflection to determine if the two  {@code Object}s are equal.</p> <p>It uses  {@code AccessibleObject.setAccessible} to gain access to privatefields. This means that it will throw a security exception if run under a security manager, if the permissions are not set up correctly. It is also not as efficient as testing explicitly. Non-primitive fields are compared using {@code equals()}.</p> <p>If the testTransients parameter is set to  {@code true}, transient members will be tested, otherwise they are ignored, as they are likely derived fields, and not part of the value of the  {@code Object}.</p> <p>Static fields will not be included. Superclass fields will be appended up to and including the specified superclass. A null superclass is treated as java.lang.Object.</p> <p>If the testRecursive parameter is set to  {@code true}, non primitive (and non primitive wrapper) field types will be compared by {@code EqualsBuilder} recursively instead of invoking their{@code equals()} method. Leading to a deep reflection equals test.

 * @param lhs  {@code this} object

 * @param rhs  the other object

 * @param testTransients  whether to include transient fields

 * @param reflectUpToClass  the superclass to reflect up to (inclusive),may be  {@code null}

 * @param testRecursive  whether to call reflection equals on non primitivefields recursively.

 * @param excludeFields  array of field names to exclude from testing

 * @return {@code true} if the two Objects have tested equals.

 * @see EqualsExclude

 * @since 3.6

 */

public static boolean reflectionEquals(final Object lhs,final Object rhs,final boolean testTransients,final Class<?> reflectUpToClass,final boolean testRecursive,final String... excludeFields){

  if (lhs == rhs) {

    return true;

  }

  if (lhs == null || rhs == null) {

    return false;

  }

  return new EqualsBuilder().setExcludeFields(excludeFields).setReflectUpToClass(reflectUpToClass).setTestTransients(testTransients).setTestRecursive(testRecursive).reflectionAppend(lhs,rhs).isEquals();

}

Location: EqualsBuilder.java

Content: 

/** 

 * <p>This method uses reflection to determine if the two  {@code Object}s are equal.</p> <p>It uses  {@code AccessibleObject.setAccessible} to gain access to privatefields. This means that it will throw a security exception if run under a security manager, if the permissions are not set up correctly. It is also not as efficient as testing explicitly. Non-primitive fields are compared using {@code equals()}.</p> <p>If the testTransients parameter is set to  {@code true}, transient members will be tested, otherwise they are ignored, as they are likely derived fields, and not part of the value of the  {@code Object}.</p> <p>Static fields will not be included. Superclass fields will be appended up to and including the specified superclass. A null superclass is treated as java.lang.Object.</p>

 * @param lhs  {@code this} object

 * @param rhs  the other object

 * @param testTransients  whether to include transient fields

 * @param reflectUpToClass  the superclass to reflect up to (inclusive),may be  {@code null}

 * @param excludeFields  array of field names to exclude from testing

 * @return {@code true} if the two Objects have tested equals.

 * @see EqualsExclude

 * @since 2.0

 */

public static boolean reflectionEquals(final Object lhs,final Object rhs,final boolean testTransients,final Class<?> reflectUpToClass,final String... excludeFields){

  return reflectionEquals(lhs,rhs,testTransients,reflectUpToClass,false,excludeFields);

}

Location: EqualsBuilder.java

Content: 

/** 

 * <p>This method uses reflection to determine if the two  {@code Object}s are equal.</p> <p>It uses  {@code AccessibleObject.setAccessible} to gain access to privatefields. This means that it will throw a security exception if run under a security manager, if the permissions are not set up correctly. It is also not as efficient as testing explicitly. Non-primitive fields are compared using {@code equals()}.</p> <p>Transient members will be not be tested, as they are likely derived fields, and not part of the value of the Object.</p> <p>Static fields will not be tested. Superclass fields will be included.</p>

 * @param lhs  {@code this} object

 * @param rhs  the other object

 * @param excludeFields  Collection of String field names to exclude from testing

 * @return {@code true} if the two Objects have tested equals.

 * @see EqualsExclude

 */

public static boolean reflectionEquals(final Object lhs,final Object rhs,final Collection<String> excludeFields){

  return reflectionEquals(lhs,rhs,ReflectionToStringBuilder.toNoNullStringArray(excludeFields));

}

Location: EqualsBuilder.java

Content: 

/** 

 * <p>This method uses reflection to determine if the two  {@code Object}s are equal.</p> <p>It uses  {@code AccessibleObject.setAccessible} to gain access to privatefields. This means that it will throw a security exception if run under a security manager, if the permissions are not set up correctly. It is also not as efficient as testing explicitly. Non-primitive fields are compared using {@code equals()}.</p> <p>Transient members will be not be tested, as they are likely derived fields, and not part of the value of the Object.</p> <p>Static fields will not be tested. Superclass fields will be included.</p>

 * @param lhs  {@code this} object

 * @param rhs  the other object

 * @param excludeFields  array of field names to exclude from testing

 * @return {@code true} if the two Objects have tested equals.

 * @see EqualsExclude

 */

public static boolean reflectionEquals(final Object lhs,final Object rhs,final String... excludeFields){

  return reflectionEquals(lhs,rhs,false,null,excludeFields);

}

Location: EqualsBuilder.java

Content: 

/** 

 * <p> Registers the given object pair. Used by the reflection methods to avoid infinite loops. </p>

 * @param lhs {@code this} object to register

 * @param rhs the other object to register

 */

private static void register(final Object lhs,final Object rhs){

  Set<Pair<IDKey,IDKey>> registry=getRegistry();

  if (registry == null) {

    registry=new HashSet<>();

    REGISTRY.set(registry);

  }

  final Pair<IDKey,IDKey> pair=getRegisterPair(lhs,rhs);

  registry.add(pair);

}

Location: EqualsBuilder.java

Content: 

/** 

 * <p>Set  {@code Class}es whose instances should be compared by calling their  {@code equals}although being in recursive mode. So the fields of theses classes will not be compared recursively by reflection.</p> <p>Here you should name classes having non-transient fields which are cache fields being set lazily.<br> Prominent example being  {@link String} class with its hash code cache field. Due to the importanceof the  {@code String} class, it is included in the default bypasses classes. Usually, if you useyour own set of classes here, remember to include  {@code String} class, too.</p>

 * @param bypassReflectionClasses  classes to bypass reflection test

 * @return EqualsBuilder - used to chain calls.

 * @see #setTestRecursive(boolean)

 * @since 3.8

 */

public EqualsBuilder setBypassReflectionClasses(final List<Class<?>> bypassReflectionClasses){

  this.bypassReflectionClasses=bypassReflectionClasses;

  return this;

}

Location: EqualsBuilder.java

Content: 

/** 

 * Sets the  {@code isEquals} value.

 * @param isEquals The value to set.

 * @since 2.1

 */

protected void setEquals(final boolean isEquals){

  this.isEquals=isEquals;

}

Location: EqualsBuilder.java

Content: 

/** 

 * Set field names to be excluded by reflection tests.

 * @param excludeFields the fields to exclude

 * @return EqualsBuilder - used to chain calls.

 * @since 3.6

 */

public EqualsBuilder setExcludeFields(final String... excludeFields){

  this.excludeFields=excludeFields;

  return this;

}

Location: EqualsBuilder.java

Content: 

/** 

 * Set the superclass to reflect up to at reflective tests.

 * @param reflectUpToClass the super class to reflect up to

 * @return EqualsBuilder - used to chain calls.

 * @since 3.6

 */

public EqualsBuilder setReflectUpToClass(final Class<?> reflectUpToClass){

  this.reflectUpToClass=reflectUpToClass;

  return this;

}

Location: EqualsBuilder.java

Content: 

/** 

 * Set whether to test fields recursively, instead of using their equals method, when reflectively comparing objects. String objects, which cache a hash value, are automatically excluded from recursive testing. You may specify other exceptions by calling  {@link #setBypassReflectionClasses(List)}.

 * @param testRecursive whether to do a recursive test

 * @return EqualsBuilder - used to chain calls.

 * @see #setBypassReflectionClasses(List)

 * @since 3.6

 */

public EqualsBuilder setTestRecursive(final boolean testRecursive){

  this.testRecursive=testRecursive;

  return this;

}

Location: EqualsBuilder.java

Content: 

/** 

 * Set whether to include transient fields when reflectively comparing objects.

 * @param testTransients whether to test transient fields

 * @return EqualsBuilder - used to chain calls.

 * @since 3.6

 */

public EqualsBuilder setTestTransients(final boolean testTransients){

  this.testTransients=testTransients;

  return this;

}

Location: EqualsBuilder.java

Content: 

/** 

 * <p> Unregisters the given object pair. </p> <p> Used by the reflection methods to avoid infinite loops.

 * @param lhs {@code this} object to unregister

 * @param rhs the other object to unregister

 * @since 3.0

 */

private static void unregister(final Object lhs,final Object rhs){

  final Set<Pair<IDKey,IDKey>> registry=getRegistry();

  if (registry != null) {

    final Pair<IDKey,IDKey> pair=getRegisterPair(lhs,rhs);

    registry.remove(pair);

    if (registry.isEmpty()) {

      REGISTRY.remove();

    }

  }

}

