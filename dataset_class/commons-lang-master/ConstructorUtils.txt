Location: ConstructorUtils.java

Content: 

/** 

 * <p>ConstructorUtils instances should NOT be constructed in standard programming. Instead, the class should be used as {@code ConstructorUtils.invokeConstructor(cls, args)}.</p> <p>This constructor is  {@code public} to permit tools that require a JavaBeaninstance to operate.</p>

 */

public ConstructorUtils(){

}

Location: ConstructorUtils.java

Content: 

/** 

 * <p>Finds a constructor given a class and signature, checking accessibility.</p> <p>This finds the constructor and ensures that it is accessible. The constructor signature must match the parameter types exactly.</p>

 * @param < T > the constructor type

 * @param cls the class to find a constructor for, not {@code null}

 * @param parameterTypes the array of parameter types, {@code null} treated as empty

 * @return the constructor, {@code null} if no matching accessible constructor found

 * @see Class#getConstructor

 * @see #getAccessibleConstructor(java.lang.reflect.Constructor)

 * @throws NullPointerException if {@code cls} is {@code null}

 */

public static <T>Constructor<T> getAccessibleConstructor(final Class<T> cls,final Class<?>... parameterTypes){

  Validate.notNull(cls,"cls");

  try {

    return getAccessibleConstructor(cls.getConstructor(parameterTypes));

  }

 catch (  final NoSuchMethodException e) {

    return null;

  }

}

Location: ConstructorUtils.java

Content: 

/** 

 * <p>Checks if the specified constructor is accessible.</p> <p>This simply ensures that the constructor is accessible.</p>

 * @param < T > the constructor type

 * @param ctor  the prototype constructor object, not {@code null}

 * @return the constructor, {@code null} if no matching accessible constructor found

 * @see java.lang.SecurityManager

 * @throws NullPointerException if {@code ctor} is {@code null}

 */

public static <T>Constructor<T> getAccessibleConstructor(final Constructor<T> ctor){

  Validate.notNull(ctor,"ctor");

  return MemberUtils.isAccessible(ctor) && isAccessible(ctor.getDeclaringClass()) ? ctor : null;

}

Location: ConstructorUtils.java

Content: 

/** 

 * <p>Finds an accessible constructor with compatible parameters.</p> <p>This checks all the constructor and finds one with compatible parameters This requires that every parameter is assignable from the given parameter types. This is a more flexible search than the normal exact matching algorithm.</p> <p>First it checks if there is a constructor matching the exact signature. If not then all the constructors of the class are checked to see if their signatures are assignment-compatible with the parameter types. The first assignment-compatible matching constructor is returned.</p>

 * @param < T > the constructor type

 * @param cls  the class to find a constructor for, not {@code null}

 * @param parameterTypes find method with compatible parameters

 * @return the constructor, null if no matching accessible constructor found

 * @throws NullPointerException if {@code cls} is {@code null}

 */

public static <T>Constructor<T> getMatchingAccessibleConstructor(final Class<T> cls,final Class<?>... parameterTypes){

  Validate.notNull(cls,"cls");

  try {

    final Constructor<T> ctor=cls.getConstructor(parameterTypes);

    MemberUtils.setAccessibleWorkaround(ctor);

    return ctor;

  }

 catch (  final NoSuchMethodException e) {

  }

  Constructor<T> result=null;

  final Constructor<?>[] ctors=cls.getConstructors();

  for (  Constructor<?> ctor : ctors) {

    if (MemberUtils.isMatchingConstructor(ctor,parameterTypes)) {

      ctor=getAccessibleConstructor(ctor);

      if (ctor != null) {

        MemberUtils.setAccessibleWorkaround(ctor);

        if (result == null || MemberUtils.compareConstructorFit(ctor,result,parameterTypes) < 0) {

          @SuppressWarnings("unchecked") final Constructor<T> constructor=(Constructor<T>)ctor;

          result=constructor;

        }

      }

    }

  }

  return result;

}

Location: ConstructorUtils.java

Content: 

/** 

 * <p>Returns a new instance of the specified class inferring the right constructor from the types of the arguments.</p> <p>This locates and calls a constructor. The constructor signature must match the argument types by assignment compatibility.</p>

 * @param < T > the type to be constructed

 * @param cls  the class to be constructed, not {@code null}

 * @param args  the array of arguments, {@code null} treated as empty

 * @return new instance of {@code cls}, not  {@code null}

 * @throws NullPointerException if {@code cls} is {@code null}

 * @throws NoSuchMethodException if a matching constructor cannot be found

 * @throws IllegalAccessException if invocation is not permitted by security

 * @throws InvocationTargetException if an error occurs on invocation

 * @throws InstantiationException if an error occurs on instantiation

 * @see #invokeConstructor(java.lang.Class,java.lang.Object[],java.lang.Class[])

 */

public static <T>T invokeConstructor(final Class<T> cls,Object... args) throws NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException {

  args=ArrayUtils.nullToEmpty(args);

  return invokeConstructor(cls,args,ClassUtils.toClass(args));

}

Location: ConstructorUtils.java

Content: 

/** 

 * <p>Returns a new instance of the specified class choosing the right constructor from the list of parameter types.</p> <p>This locates and calls a constructor. The constructor signature must match the parameter types by assignment compatibility.</p>

 * @param < T > the type to be constructed

 * @param cls  the class to be constructed, not {@code null}

 * @param args  the array of arguments, {@code null} treated as empty

 * @param parameterTypes  the array of parameter types, {@code null} treated as empty

 * @return new instance of {@code cls}, not  {@code null}

 * @throws NullPointerException if {@code cls} is {@code null}

 * @throws NoSuchMethodException if a matching constructor cannot be found

 * @throws IllegalAccessException if invocation is not permitted by security

 * @throws InvocationTargetException if an error occurs on invocation

 * @throws InstantiationException if an error occurs on instantiation

 * @see Constructor#newInstance

 */

public static <T>T invokeConstructor(final Class<T> cls,Object[] args,Class<?>[] parameterTypes) throws NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException {

  args=ArrayUtils.nullToEmpty(args);

  parameterTypes=ArrayUtils.nullToEmpty(parameterTypes);

  final Constructor<T> ctor=getMatchingAccessibleConstructor(cls,parameterTypes);

  if (ctor == null) {

    throw new NoSuchMethodException("No such accessible constructor on object: " + cls.getName());

  }

  if (ctor.isVarArgs()) {

    final Class<?>[] methodParameterTypes=ctor.getParameterTypes();

    args=MethodUtils.getVarArgs(args,methodParameterTypes);

  }

  return ctor.newInstance(args);

}

Location: ConstructorUtils.java

Content: 

/** 

 * <p>Returns a new instance of the specified class inferring the right constructor from the types of the arguments.</p> <p>This locates and calls a constructor. The constructor signature must match the argument types exactly.</p>

 * @param < T > the type to be constructed

 * @param cls the class to be constructed, not {@code null}

 * @param args the array of arguments, {@code null} treated as empty

 * @return new instance of {@code cls}, not  {@code null}

 * @throws NullPointerException if {@code cls} is {@code null}

 * @throws NoSuchMethodException if a matching constructor cannot be found

 * @throws IllegalAccessException if invocation is not permitted by security

 * @throws InvocationTargetException if an error occurs on invocation

 * @throws InstantiationException if an error occurs on instantiation

 * @see #invokeExactConstructor(java.lang.Class,java.lang.Object[],java.lang.Class[])

 */

public static <T>T invokeExactConstructor(final Class<T> cls,Object... args) throws NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException {

  args=ArrayUtils.nullToEmpty(args);

  return invokeExactConstructor(cls,args,ClassUtils.toClass(args));

}

Location: ConstructorUtils.java

Content: 

/** 

 * <p>Returns a new instance of the specified class choosing the right constructor from the list of parameter types.</p> <p>This locates and calls a constructor. The constructor signature must match the parameter types exactly.</p>

 * @param < T > the type to be constructed

 * @param cls the class to be constructed, not {@code null}

 * @param args the array of arguments, {@code null} treated as empty

 * @param parameterTypes  the array of parameter types, {@code null} treated as empty

 * @return new instance of {@code cls}, not  {@code null}

 * @throws NullPointerException if {@code cls} is {@code null}

 * @throws NoSuchMethodException if a matching constructor cannot be found

 * @throws IllegalAccessException if invocation is not permitted by security

 * @throws InvocationTargetException if an error occurs on invocation

 * @throws InstantiationException if an error occurs on instantiation

 * @see Constructor#newInstance

 */

public static <T>T invokeExactConstructor(final Class<T> cls,Object[] args,Class<?>[] parameterTypes) throws NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException {

  args=ArrayUtils.nullToEmpty(args);

  parameterTypes=ArrayUtils.nullToEmpty(parameterTypes);

  final Constructor<T> ctor=getAccessibleConstructor(cls,parameterTypes);

  if (ctor == null) {

    throw new NoSuchMethodException("No such accessible constructor on object: " + cls.getName());

  }

  return ctor.newInstance(args);

}

Location: ConstructorUtils.java

Content: 

/** 

 * Tests whether the specified class is generally accessible, i.e. is declared in an entirely  {@code public} manner.

 * @param type to check

 * @return {@code true} if {@code type} and any enclosing classes are{@code public}.

 */

private static boolean isAccessible(final Class<?> type){

  Class<?> cls=type;

  while (cls != null) {

    if (!Modifier.isPublic(cls.getModifiers())) {

      return false;

    }

    cls=cls.getEnclosingClass();

  }

  return true;

}

