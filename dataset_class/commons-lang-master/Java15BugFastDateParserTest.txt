Location: Java15BugFastDateParserTest.java

Content: 

@Test public void java15BuggyLocaleTest() throws ParseException {

  final String buggyLocaleName="ff_LR_#Adlm";

  Locale buggyLocale=null;

  for (  final Locale locale : Locale.getAvailableLocales()) {

    if (buggyLocaleName.equals(locale.toString())) {

      buggyLocale=locale;

      break;

    }

  }

  if (buggyLocale == null) {

    return;

  }

  testSingleLocale(buggyLocale);

}

Location: Java15BugFastDateParserTest.java

Content: 

@Test public void java15BuggyLocaleTestAll() throws ParseException {

  for (  final Locale locale : Locale.getAvailableLocales()) {

    testSingleLocale(locale);

  }

}

Location: Java15BugFastDateParserTest.java

Content: 

@ParameterizedTest @MethodSource(DATE_PARSER_PARAMETERS) public void testLocales_LongNoEra_AD(final TriFunction<String,TimeZone,Locale,DateParser> dpProvider) throws Exception {

  testLocales(dpProvider,FastDateParserTest.LONG_FORMAT_NOERA,false);

}

Location: Java15BugFastDateParserTest.java

Content: 

@ParameterizedTest @MethodSource(DATE_PARSER_PARAMETERS) public void testLocales_LongNoEra_BC(final TriFunction<String,TimeZone,Locale,DateParser> dpProvider) throws Exception {

  testLocales(dpProvider,FastDateParserTest.LONG_FORMAT_NOERA,true);

}

Location: Java15BugFastDateParserTest.java

Content: 

@ParameterizedTest @MethodSource(DATE_PARSER_PARAMETERS) public void testLocales_Long_AD(final TriFunction<String,TimeZone,Locale,DateParser> dpProvider) throws Exception {

  testLocales(dpProvider,FastDateParserTest.LONG_FORMAT,false);

}

Location: Java15BugFastDateParserTest.java

Content: 

@ParameterizedTest @MethodSource(DATE_PARSER_PARAMETERS) public void testLocales_Long_BC(final TriFunction<String,TimeZone,Locale,DateParser> dpProvider) throws Exception {

  testLocales(dpProvider,FastDateParserTest.LONG_FORMAT,true);

}

Location: Java15BugFastDateParserTest.java

Content: 

@ParameterizedTest @MethodSource(DATE_PARSER_PARAMETERS) public void testLocales_ShortNoEra_AD(final TriFunction<String,TimeZone,Locale,DateParser> dpProvider) throws Exception {

  testLocales(dpProvider,FastDateParserTest.SHORT_FORMAT_NOERA,false);

}

Location: Java15BugFastDateParserTest.java

Content: 

@ParameterizedTest @MethodSource(DATE_PARSER_PARAMETERS) public void testLocales_ShortNoEra_BC(final TriFunction<String,TimeZone,Locale,DateParser> dpProvider) throws Exception {

  testLocales(dpProvider,FastDateParserTest.SHORT_FORMAT_NOERA,true);

}

Location: Java15BugFastDateParserTest.java

Content: 

@ParameterizedTest @MethodSource(DATE_PARSER_PARAMETERS) public void testLocales_Short_AD(final TriFunction<String,TimeZone,Locale,DateParser> dpProvider) throws Exception {

  testLocales(dpProvider,FastDateParserTest.SHORT_FORMAT,false);

}

Location: Java15BugFastDateParserTest.java

Content: 

@ParameterizedTest @MethodSource(DATE_PARSER_PARAMETERS) public void testLocales_Short_BC(final TriFunction<String,TimeZone,Locale,DateParser> dpProvider) throws Exception {

  testLocales(dpProvider,FastDateParserTest.SHORT_FORMAT,true);

}

Location: Java15BugFastDateParserTest.java

Content: 

private void testLocales(final TriFunction<String,TimeZone,Locale,DateParser> dbProvider,final String format,final boolean eraBC) throws Exception {

  final Calendar cal=Calendar.getInstance(TimeZones.GMT);

  cal.clear();

  cal.set(2003,Calendar.FEBRUARY,10);

  if (eraBC) {

    cal.set(Calendar.ERA,GregorianCalendar.BC);

  }

  for (  final Locale locale : Locale.getAvailableLocales()) {

    if (eraBC && locale.equals(FastDateParser.JAPANESE_IMPERIAL)) {

      continue;

    }

    final SimpleDateFormat sdf=new SimpleDateFormat(format,locale);

    final DateParser fdf=dbProvider.apply(format,TimeZone.getDefault(),locale);

    FastDateParserTest.checkParse(locale,cal,sdf,fdf);

  }

}

Location: Java15BugFastDateParserTest.java

Content: 

private void testSingleLocale(final Locale locale) throws ParseException {

  final Calendar cal=Calendar.getInstance(TimeZones.GMT);

  cal.clear();

  cal.set(2003,Calendar.FEBRUARY,10);

  final SimpleDateFormat sdf=new SimpleDateFormat(FastDateParserTest.LONG_FORMAT,locale);

  final String formattedDate=sdf.format(cal.getTime());

  sdf.parse(formattedDate);

  sdf.parse(formattedDate.toUpperCase(locale));

  sdf.parse(formattedDate.toLowerCase(locale));

}

