Location: CallableBackgroundInitializerTest.java

Content: 

/** 

 * Tests whether the executor service is correctly passed to the super class.

 */

@Test public void testInitExecutor() throws InterruptedException {

  final ExecutorService exec=Executors.newSingleThreadExecutor();

  final CallableBackgroundInitializer<Integer> init=new CallableBackgroundInitializer<>(new TestCallable(),exec);

  assertEquals(exec,init.getExternalExecutor(),"Executor not set");

  exec.shutdown();

  exec.awaitTermination(1,TimeUnit.SECONDS);

}

Location: CallableBackgroundInitializerTest.java

Content: 

/** 

 * Tries to pass a null Callable to the constructor that takes an executor. This should cause an exception.

 */

@Test public void testInitExecutorNullCallable() throws InterruptedException {

  final ExecutorService exec=Executors.newSingleThreadExecutor();

  try {

    assertThrows(NullPointerException.class,() -> new CallableBackgroundInitializer<Integer>(null,exec));

  }

  finally {

    exec.shutdown();

    exec.awaitTermination(1,TimeUnit.SECONDS);

  }

}

Location: CallableBackgroundInitializerTest.java

Content: 

/** 

 * Tests the implementation of initialize().

 * @throws java.lang.Exception so we don't have to catch it

 */

@Test public void testInitialize() throws Exception {

  final TestCallable call=new TestCallable();

  final CallableBackgroundInitializer<Integer> init=new CallableBackgroundInitializer<>(call);

  assertEquals(RESULT,init.initialize(),"Wrong result");

  assertEquals(1,call.callCount,"Wrong number of invocations");

}

Location: CallableBackgroundInitializerTest.java

Content: 

/** 

 * Tries to create an instance without a Callable. This should cause an exception.

 */

@Test() public void testInitNullCallable(){

  assertThrows(NullPointerException.class,() -> new CallableBackgroundInitializer<>(null));

}

