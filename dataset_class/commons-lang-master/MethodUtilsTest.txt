Location: MethodUtilsTest.java

Content: 

private void expectMatchingAccessibleMethodParameterTypes(final Class<?> cls,final String methodName,final Class<?>[] requestTypes,final Class<?>[] actualTypes){

  final Method m=MethodUtils.getMatchingAccessibleMethod(cls,methodName,requestTypes);

  assertNotNull(m,"could not find any matches for " + methodName + " ("+ (requestTypes == null ? null : toString(requestTypes))+ ")");

  assertArrayEquals(actualTypes,m.getParameterTypes(),toString(m.getParameterTypes()) + " not equals " + toString(actualTypes));

}

Location: MethodUtilsTest.java

Content: 

@Test public void testDistance() throws Exception {

  final Method distanceMethod=MethodUtils.getMatchingMethod(MethodUtils.class,"distance",Class[].class,Class[].class);

  distanceMethod.setAccessible(true);

  assertEquals(-1,distanceMethod.invoke(null,new Class[]{String.class},new Class[]{Date.class}));

  assertEquals(0,distanceMethod.invoke(null,new Class[]{Date.class},new Class[]{Date.class}));

  assertEquals(1,distanceMethod.invoke(null,new Class[]{Integer.class},new Class[]{ClassUtils.wrapperToPrimitive(Integer.class)}));

  assertEquals(2,distanceMethod.invoke(null,new Class[]{Integer.class},new Class[]{Object.class}));

  distanceMethod.setAccessible(false);

}

Location: MethodUtilsTest.java

Content: 

@Test public void testGetAccessibleInterfaceMethod() throws Exception {

  final Class<?>[][] p={ArrayUtils.EMPTY_CLASS_ARRAY,null};

  for (  final Class<?>[] element : p) {

    final Method method=TestMutable.class.getMethod("getValue",element);

    final Method accessibleMethod=MethodUtils.getAccessibleMethod(method);

    assertNotSame(accessibleMethod,method);

    assertSame(Mutable.class,accessibleMethod.getDeclaringClass());

  }

}

Location: MethodUtilsTest.java

Content: 

@Test public void testGetAccessibleInterfaceMethodFromDescription(){

  final Class<?>[][] p={ArrayUtils.EMPTY_CLASS_ARRAY,null};

  for (  final Class<?>[] element : p) {

    final Method accessibleMethod=MethodUtils.getAccessibleMethod(TestMutable.class,"getValue",element);

    assertSame(Mutable.class,accessibleMethod.getDeclaringClass());

  }

}

Location: MethodUtilsTest.java

Content: 

@Test public void testGetAccessibleMethodInaccessible() throws Exception {

  final Method expected=TestBean.class.getDeclaredMethod("privateStuff");

  final Method actual=MethodUtils.getAccessibleMethod(expected);

  assertNull(actual);

}

Location: MethodUtilsTest.java

Content: 

@Test public void testGetAccessibleMethodPrivateInterface() throws Exception {

  final Method expected=TestBeanWithInterfaces.class.getMethod("foo");

  assertNotNull(expected);

  final Method actual=MethodUtils.getAccessibleMethod(TestBeanWithInterfaces.class,"foo");

  assertNull(actual);

}

Location: MethodUtilsTest.java

Content: 

@Test public void testGetAccessiblePublicMethod() throws Exception {

  assertSame(MutableObject.class,MethodUtils.getAccessibleMethod(MutableObject.class.getMethod("getValue",ArrayUtils.EMPTY_CLASS_ARRAY)).getDeclaringClass());

}

Location: MethodUtilsTest.java

Content: 

@Test public void testGetAccessiblePublicMethodFromDescription(){

  assertSame(MutableObject.class,MethodUtils.getAccessibleMethod(MutableObject.class,"getValue",ArrayUtils.EMPTY_CLASS_ARRAY).getDeclaringClass());

}

Location: MethodUtilsTest.java

Content: 

@Test public void testGetAnnotationIllegalArgumentException1(){

  assertThrows(NullPointerException.class,() -> MethodUtils.getAnnotation(FieldUtilsTest.class.getDeclaredMethods()[0],null,true,true));

}

Location: MethodUtilsTest.java

Content: 

@Test public void testGetAnnotationIllegalArgumentException2(){

  assertThrows(NullPointerException.class,() -> MethodUtils.getAnnotation(null,Annotated.class,true,true));

}

Location: MethodUtilsTest.java

Content: 

@Test public void testGetAnnotationIllegalArgumentException3(){

  assertThrows(NullPointerException.class,() -> MethodUtils.getAnnotation(null,null,true,true));

}

Location: MethodUtilsTest.java

Content: 

@Test public void testGetAnnotationNotSearchSupersAndNotIgnoreAccess() throws NoSuchMethodException {

  assertNull(MethodUtils.getAnnotation(PublicChild.class.getMethod("parentNotAnnotatedMethod"),Annotated.class,false,false));

  assertNull(MethodUtils.getAnnotation(PublicChild.class.getMethod("doIt"),Annotated.class,false,false));

  assertNull(MethodUtils.getAnnotation(PublicChild.class.getMethod("parentProtectedAnnotatedMethod"),Annotated.class,false,false));

  assertNull(MethodUtils.getAnnotation(PublicChild.class.getDeclaredMethod("privateAnnotatedMethod"),Annotated.class,false,false));

  assertNotNull(MethodUtils.getAnnotation(PublicChild.class.getMethod("publicAnnotatedMethod"),Annotated.class,false,false));

}

Location: MethodUtilsTest.java

Content: 

@Test public void testGetAnnotationNotSearchSupersButIgnoreAccess() throws NoSuchMethodException {

  assertNull(MethodUtils.getAnnotation(PublicChild.class.getMethod("parentNotAnnotatedMethod"),Annotated.class,false,true));

  assertNull(MethodUtils.getAnnotation(PublicChild.class.getMethod("doIt"),Annotated.class,false,true));

  assertNull(MethodUtils.getAnnotation(PublicChild.class.getMethod("parentProtectedAnnotatedMethod"),Annotated.class,false,true));

  assertNotNull(MethodUtils.getAnnotation(PublicChild.class.getDeclaredMethod("privateAnnotatedMethod"),Annotated.class,false,true));

  assertNotNull(MethodUtils.getAnnotation(PublicChild.class.getMethod("publicAnnotatedMethod"),Annotated.class,false,true));

}

Location: MethodUtilsTest.java

Content: 

@Test public void testGetAnnotationSearchSupersAndIgnoreAccess() throws NoSuchMethodException {

  assertNull(MethodUtils.getAnnotation(PublicChild.class.getMethod("parentNotAnnotatedMethod"),Annotated.class,true,true));

  assertNotNull(MethodUtils.getAnnotation(PublicChild.class.getMethod("doIt"),Annotated.class,true,true));

  assertNotNull(MethodUtils.getAnnotation(PublicChild.class.getMethod("parentProtectedAnnotatedMethod"),Annotated.class,true,true));

  assertNotNull(MethodUtils.getAnnotation(PublicChild.class.getDeclaredMethod("privateAnnotatedMethod"),Annotated.class,true,true));

  assertNotNull(MethodUtils.getAnnotation(PublicChild.class.getMethod("publicAnnotatedMethod"),Annotated.class,true,true));

  assertNull(MethodUtils.getAnnotation(StringParameterizedChild.class.getMethod("parentNotAnnotatedMethod",String.class),Annotated.class,true,true));

  assertNotNull(MethodUtils.getAnnotation(StringParameterizedChild.class.getMethod("parentProtectedAnnotatedMethod",String.class),Annotated.class,true,true));

  assertNotNull(MethodUtils.getAnnotation(StringParameterizedChild.class.getDeclaredMethod("privateAnnotatedMethod",String.class),Annotated.class,true,true));

  assertNotNull(MethodUtils.getAnnotation(StringParameterizedChild.class.getMethod("publicAnnotatedMethod",String.class),Annotated.class,true,true));

}

Location: MethodUtilsTest.java

Content: 

@Test public void testGetAnnotationSearchSupersButNotIgnoreAccess() throws NoSuchMethodException {

  assertNull(MethodUtils.getAnnotation(PublicChild.class.getMethod("parentNotAnnotatedMethod"),Annotated.class,true,false));

  assertNull(MethodUtils.getAnnotation(PublicChild.class.getMethod("doIt"),Annotated.class,true,false));

  assertNull(MethodUtils.getAnnotation(PublicChild.class.getMethod("parentProtectedAnnotatedMethod"),Annotated.class,true,false));

  assertNull(MethodUtils.getAnnotation(PublicChild.class.getDeclaredMethod("privateAnnotatedMethod"),Annotated.class,true,false));

  assertNotNull(MethodUtils.getAnnotation(PublicChild.class.getMethod("publicAnnotatedMethod"),Annotated.class,true,false));

  assertNull(MethodUtils.getAnnotation(StringParameterizedChild.class.getMethod("parentNotAnnotatedMethod",String.class),Annotated.class,true,false));

  assertNull(MethodUtils.getAnnotation(StringParameterizedChild.class.getMethod("parentProtectedAnnotatedMethod",String.class),Annotated.class,true,false));

  assertNull(MethodUtils.getAnnotation(StringParameterizedChild.class.getDeclaredMethod("privateAnnotatedMethod",String.class),Annotated.class,true,false));

  assertNotNull(MethodUtils.getAnnotation(StringParameterizedChild.class.getMethod("publicAnnotatedMethod",String.class),Annotated.class,true,false));

}

Location: MethodUtilsTest.java

Content: 

@Test public void testGetMatchingMethod() throws NoSuchMethodException {

  assertEquals(MethodUtils.getMatchingMethod(GetMatchingMethodClass.class,"testMethod"),GetMatchingMethodClass.class.getMethod("testMethod"));

  assertEquals(MethodUtils.getMatchingMethod(GetMatchingMethodClass.class,"testMethod",Long.TYPE),GetMatchingMethodClass.class.getMethod("testMethod",Long.TYPE));

  assertEquals(MethodUtils.getMatchingMethod(GetMatchingMethodClass.class,"testMethod",Long.class),GetMatchingMethodClass.class.getMethod("testMethod",Long.class));

  assertEquals(MethodUtils.getMatchingMethod(GetMatchingMethodClass.class,"testMethod",(Class<?>)null),GetMatchingMethodClass.class.getMethod("testMethod",Long.class));

  assertThrows(IllegalStateException.class,() -> MethodUtils.getMatchingMethod(GetMatchingMethodClass.class,"testMethod2",(Class<?>)null));

  assertEquals(MethodUtils.getMatchingMethod(GetMatchingMethodClass.class,"testMethod3",Long.TYPE,Long.class),GetMatchingMethodClass.class.getMethod("testMethod3",Long.TYPE,Long.class));

  assertEquals(MethodUtils.getMatchingMethod(GetMatchingMethodClass.class,"testMethod3",Long.class,Long.TYPE),GetMatchingMethodClass.class.getMethod("testMethod3",Long.class,Long.TYPE));

  assertEquals(MethodUtils.getMatchingMethod(GetMatchingMethodClass.class,"testMethod3",null,Long.TYPE),GetMatchingMethodClass.class.getMethod("testMethod3",Long.class,Long.TYPE));

  assertEquals(MethodUtils.getMatchingMethod(GetMatchingMethodClass.class,"testMethod3",Long.TYPE,null),GetMatchingMethodClass.class.getMethod("testMethod3",Long.TYPE,Long.class));

  assertThrows(IllegalStateException.class,() -> MethodUtils.getMatchingMethod(GetMatchingMethodClass.class,"testMethod4",null,null));

}

Location: MethodUtilsTest.java

Content: 

@Test @Annotated public void testGetMethodsListWithAnnotation() throws NoSuchMethodException {

  assertEquals(0,MethodUtils.getMethodsListWithAnnotation(Object.class,Annotated.class).size());

  final List<Method> methodWithAnnotation=MethodUtils.getMethodsListWithAnnotation(MethodUtilsTest.class,Annotated.class);

  assertEquals(2,methodWithAnnotation.size());

  assertThat(methodWithAnnotation,hasItems(MethodUtilsTest.class.getMethod("testGetMethodsWithAnnotation"),MethodUtilsTest.class.getMethod("testGetMethodsListWithAnnotation")));

}

Location: MethodUtilsTest.java

Content: 

@Test public void testGetMethodsListWithAnnotationIllegalArgumentException1(){

  assertThrows(NullPointerException.class,() -> MethodUtils.getMethodsListWithAnnotation(FieldUtilsTest.class,null));

}

Location: MethodUtilsTest.java

Content: 

@Test public void testGetMethodsListWithAnnotationIllegalArgumentException2(){

  assertThrows(NullPointerException.class,() -> MethodUtils.getMethodsListWithAnnotation(null,Annotated.class));

}

Location: MethodUtilsTest.java

Content: 

@Test public void testGetMethodsListWithAnnotationIllegalArgumentException3(){

  assertThrows(NullPointerException.class,() -> MethodUtils.getMethodsListWithAnnotation(null,null));

}

Location: MethodUtilsTest.java

Content: 

@Test @Annotated public void testGetMethodsWithAnnotation() throws NoSuchMethodException {

  assertArrayEquals(new Method[0],MethodUtils.getMethodsWithAnnotation(Object.class,Annotated.class));

  final Method[] methodsWithAnnotation=MethodUtils.getMethodsWithAnnotation(MethodUtilsTest.class,Annotated.class);

  assertEquals(2,methodsWithAnnotation.length);

  assertThat(methodsWithAnnotation,hasItemInArray(MethodUtilsTest.class.getMethod("testGetMethodsWithAnnotation")));

  assertThat(methodsWithAnnotation,hasItemInArray(MethodUtilsTest.class.getMethod("testGetMethodsListWithAnnotation")));

}

Location: MethodUtilsTest.java

Content: 

@Test public void testGetMethodsWithAnnotationIllegalArgumentException1(){

  assertThrows(NullPointerException.class,() -> MethodUtils.getMethodsWithAnnotation(FieldUtilsTest.class,null));

}

Location: MethodUtilsTest.java

Content: 

@Test public void testGetMethodsWithAnnotationIllegalArgumentException2(){

  assertThrows(NullPointerException.class,() -> MethodUtils.getMethodsWithAnnotation(null,Annotated.class));

}

Location: MethodUtilsTest.java

Content: 

@Test public void testGetMethodsWithAnnotationIllegalArgumentException3(){

  assertThrows(NullPointerException.class,() -> MethodUtils.getMethodsWithAnnotation(null,null));

}

Location: MethodUtilsTest.java

Content: 

@Test public void testGetMethodsWithAnnotationNotSearchSupersAndNotIgnoreAccess(){

  assertArrayEquals(new Method[0],MethodUtils.getMethodsWithAnnotation(Object.class,Annotated.class,false,false));

  final Method[] methodsWithAnnotation=MethodUtils.getMethodsWithAnnotation(PublicChild.class,Annotated.class,false,false);

  assertEquals(1,methodsWithAnnotation.length);

  assertEquals("PublicChild.publicAnnotatedMethod",methodsWithAnnotation[0].getDeclaringClass().getSimpleName() + '.' + methodsWithAnnotation[0].getName());

}

Location: MethodUtilsTest.java

Content: 

@Test public void testGetMethodsWithAnnotationNotSearchSupersButIgnoreAccess(){

  assertArrayEquals(new Method[0],MethodUtils.getMethodsWithAnnotation(Object.class,Annotated.class,false,true));

  final Method[] methodsWithAnnotation=MethodUtils.getMethodsWithAnnotation(PublicChild.class,Annotated.class,false,true);

  assertEquals(2,methodsWithAnnotation.length);

  assertEquals("PublicChild",methodsWithAnnotation[0].getDeclaringClass().getSimpleName());

  assertEquals("PublicChild",methodsWithAnnotation[1].getDeclaringClass().getSimpleName());

  assertTrue(methodsWithAnnotation[0].getName().endsWith("AnnotatedMethod"));

  assertTrue(methodsWithAnnotation[1].getName().endsWith("AnnotatedMethod"));

}

Location: MethodUtilsTest.java

Content: 

@Test public void testGetMethodsWithAnnotationSearchSupersAndIgnoreAccess(){

  assertArrayEquals(new Method[0],MethodUtils.getMethodsWithAnnotation(Object.class,Annotated.class,true,true));

  final Method[] methodsWithAnnotation=MethodUtils.getMethodsWithAnnotation(PublicChild.class,Annotated.class,true,true);

  assertEquals(4,methodsWithAnnotation.length);

  assertEquals("PublicChild",methodsWithAnnotation[0].getDeclaringClass().getSimpleName());

  assertEquals("PublicChild",methodsWithAnnotation[1].getDeclaringClass().getSimpleName());

  assertTrue(methodsWithAnnotation[0].getName().endsWith("AnnotatedMethod"));

  assertTrue(methodsWithAnnotation[1].getName().endsWith("AnnotatedMethod"));

  assertEquals("Foo.doIt",methodsWithAnnotation[2].getDeclaringClass().getSimpleName() + '.' + methodsWithAnnotation[2].getName());

  assertEquals("Parent.parentProtectedAnnotatedMethod",methodsWithAnnotation[3].getDeclaringClass().getSimpleName() + '.' + methodsWithAnnotation[3].getName());

}

Location: MethodUtilsTest.java

Content: 

@Test public void testGetMethodsWithAnnotationSearchSupersButNotIgnoreAccess(){

  assertArrayEquals(new Method[0],MethodUtils.getMethodsWithAnnotation(Object.class,Annotated.class,true,false));

  final Method[] methodsWithAnnotation=MethodUtils.getMethodsWithAnnotation(PublicChild.class,Annotated.class,true,false);

  assertEquals(2,methodsWithAnnotation.length);

  assertEquals("PublicChild.publicAnnotatedMethod",methodsWithAnnotation[0].getDeclaringClass().getSimpleName() + '.' + methodsWithAnnotation[0].getName());

  assertEquals("Foo.doIt",methodsWithAnnotation[1].getDeclaringClass().getSimpleName() + '.' + methodsWithAnnotation[1].getName());

}

Location: MethodUtilsTest.java

Content: 

@Test public void testGetOverrideHierarchyExcludingInterfaces(){

  final Method method=MethodUtils.getAccessibleMethod(StringParameterizedChild.class,"consume",String.class);

  final Iterator<MethodDescriptor> expected=Arrays.asList(new MethodDescriptor(StringParameterizedChild.class,"consume",String.class),new MethodDescriptor(GenericParent.class,"consume",GenericParent.class.getTypeParameters()[0])).iterator();

  for (  final Method m : MethodUtils.getOverrideHierarchy(method,Interfaces.EXCLUDE)) {

    assertTrue(expected.hasNext());

    final MethodDescriptor md=expected.next();

    assertEquals(md.declaringClass,m.getDeclaringClass());

    assertEquals(md.name,m.getName());

    assertEquals(md.parameterTypes.length,m.getParameterTypes().length);

    for (int i=0; i < md.parameterTypes.length; i++) {

      assertTrue(TypeUtils.equals(md.parameterTypes[i],m.getGenericParameterTypes()[i]));

    }

  }

  assertFalse(expected.hasNext());

}

Location: MethodUtilsTest.java

Content: 

@Test public void testGetOverrideHierarchyIncludingInterfaces(){

  final Method method=MethodUtils.getAccessibleMethod(StringParameterizedChild.class,"consume",String.class);

  final Iterator<MethodDescriptor> expected=Arrays.asList(new MethodDescriptor(StringParameterizedChild.class,"consume",String.class),new MethodDescriptor(GenericParent.class,"consume",GenericParent.class.getTypeParameters()[0]),new MethodDescriptor(GenericConsumer.class,"consume",GenericConsumer.class.getTypeParameters()[0])).iterator();

  for (  final Method m : MethodUtils.getOverrideHierarchy(method,Interfaces.INCLUDE)) {

    assertTrue(expected.hasNext());

    final MethodDescriptor md=expected.next();

    assertEquals(md.declaringClass,m.getDeclaringClass());

    assertEquals(md.name,m.getName());

    assertEquals(md.parameterTypes.length,m.getParameterTypes().length);

    for (int i=0; i < md.parameterTypes.length; i++) {

      assertTrue(TypeUtils.equals(md.parameterTypes[i],m.getGenericParameterTypes()[i]));

    }

  }

  assertFalse(expected.hasNext());

}

Location: MethodUtilsTest.java

Content: 

@Test public void testInvokeExactMethod() throws Exception {

  assertEquals("foo()",MethodUtils.invokeExactMethod(testBean,"foo",(Object[])ArrayUtils.EMPTY_CLASS_ARRAY));

  assertEquals("foo()",MethodUtils.invokeExactMethod(testBean,"foo"));

  assertEquals("foo()",MethodUtils.invokeExactMethod(testBean,"foo",(Object[])null));

  assertEquals("foo()",MethodUtils.invokeExactMethod(testBean,"foo",null,null));

  assertEquals("foo(String)",MethodUtils.invokeExactMethod(testBean,"foo",""));

  assertEquals("foo(Object)",MethodUtils.invokeExactMethod(testBean,"foo",new Object()));

  assertEquals("foo(Integer)",MethodUtils.invokeExactMethod(testBean,"foo",NumberUtils.INTEGER_ONE));

  assertEquals("foo(double)",MethodUtils.invokeExactMethod(testBean,"foo",new Object[]{NumberUtils.DOUBLE_ONE},new Class[]{Double.TYPE}));

  assertThrows(NoSuchMethodException.class,() -> MethodUtils.invokeExactMethod(testBean,"foo",NumberUtils.BYTE_ONE));

  assertThrows(NoSuchMethodException.class,() -> MethodUtils.invokeExactMethod(testBean,"foo",NumberUtils.LONG_ONE));

  assertThrows(NoSuchMethodException.class,() -> MethodUtils.invokeExactMethod(testBean,"foo",Boolean.TRUE));

}

Location: MethodUtilsTest.java

Content: 

@Test public void testInvokeExactStaticMethod() throws Exception {

  assertEquals("bar()",MethodUtils.invokeExactStaticMethod(TestBean.class,"bar",(Object[])ArrayUtils.EMPTY_CLASS_ARRAY));

  assertEquals("bar()",MethodUtils.invokeExactStaticMethod(TestBean.class,"bar",(Object[])null));

  assertEquals("bar()",MethodUtils.invokeExactStaticMethod(TestBean.class,"bar",null,null));

  assertEquals("bar(String)",MethodUtils.invokeExactStaticMethod(TestBean.class,"bar",""));

  assertEquals("bar(Object)",MethodUtils.invokeExactStaticMethod(TestBean.class,"bar",new Object()));

  assertEquals("bar(Integer)",MethodUtils.invokeExactStaticMethod(TestBean.class,"bar",NumberUtils.INTEGER_ONE));

  assertEquals("bar(double)",MethodUtils.invokeExactStaticMethod(TestBean.class,"bar",new Object[]{NumberUtils.DOUBLE_ONE},new Class[]{Double.TYPE}));

  assertThrows(NoSuchMethodException.class,() -> MethodUtils.invokeExactStaticMethod(TestBean.class,"bar",NumberUtils.BYTE_ONE));

  assertThrows(NoSuchMethodException.class,() -> MethodUtils.invokeExactStaticMethod(TestBean.class,"bar",NumberUtils.LONG_ONE));

  assertThrows(NoSuchMethodException.class,() -> MethodUtils.invokeExactStaticMethod(TestBean.class,"bar",Boolean.TRUE));

}

Location: MethodUtilsTest.java

Content: 

@Test public void testInvokeJavaVarargsOverloadingResolution() throws Exception {

  assertEquals("Byte...",MethodUtils.invokeStaticMethod(TestBean.class,"varOverload",(byte)1,(byte)2));

  assertEquals("Short...",MethodUtils.invokeStaticMethod(TestBean.class,"varOverload",(short)1,(short)2));

  assertEquals("Integer...",MethodUtils.invokeStaticMethod(TestBean.class,"varOverload",1,2));

  assertEquals("Long...",MethodUtils.invokeStaticMethod(TestBean.class,"varOverload",1L,2L));

  assertEquals("Float...",MethodUtils.invokeStaticMethod(TestBean.class,"varOverload",1f,2f));

  assertEquals("Double...",MethodUtils.invokeStaticMethod(TestBean.class,"varOverload",1d,2d));

  assertEquals("Character...",MethodUtils.invokeStaticMethod(TestBean.class,"varOverload",'a','b'));

  assertEquals("String...",MethodUtils.invokeStaticMethod(TestBean.class,"varOverload","a","b"));

  assertEquals("Boolean...",MethodUtils.invokeStaticMethod(TestBean.class,"varOverload",true,false));

  assertEquals("Object...",MethodUtils.invokeStaticMethod(TestBean.class,"varOverload",1,"s"));

  assertEquals("Object...",MethodUtils.invokeStaticMethod(TestBean.class,"varOverload",1,true));

  assertEquals("Object...",MethodUtils.invokeStaticMethod(TestBean.class,"varOverload",1.1,true));

  assertEquals("Object...",MethodUtils.invokeStaticMethod(TestBean.class,"varOverload",'c',true));

  assertEquals("Number...",MethodUtils.invokeStaticMethod(TestBean.class,"varOverload",1,1.1));

  assertEquals("Number...",MethodUtils.invokeStaticMethod(TestBean.class,"varOverload",1,1L));

  assertEquals("Number...",MethodUtils.invokeStaticMethod(TestBean.class,"varOverload",1d,1f));

  assertEquals("Number...",MethodUtils.invokeStaticMethod(TestBean.class,"varOverload",(short)1,(byte)1));

  assertEquals("Object...",MethodUtils.invokeStaticMethod(TestBean.class,"varOverload",1,'c'));

  assertEquals("Object...",MethodUtils.invokeStaticMethod(TestBean.class,"varOverload",'c',"s"));

  assertEquals("Object...",MethodUtils.invokeStaticMethod(TestBean.class,"varOverload",(Object[])ArrayUtils.EMPTY_CLASS_ARRAY));

  assertEquals("Number...",MethodUtils.invokeStaticMethod(TestBean.class,"numOverload",(Object[])ArrayUtils.EMPTY_CLASS_ARRAY));

}

Location: MethodUtilsTest.java

Content: 

@Test public void testInvokeMethod() throws Exception {

  assertEquals("foo()",MethodUtils.invokeMethod(testBean,"foo",(Object[])ArrayUtils.EMPTY_CLASS_ARRAY));

  assertEquals("foo()",MethodUtils.invokeMethod(testBean,"foo"));

  assertEquals("foo()",MethodUtils.invokeMethod(testBean,"foo",(Object[])null));

  assertEquals("foo()",MethodUtils.invokeMethod(testBean,"foo",null,null));

  assertEquals("foo(String)",MethodUtils.invokeMethod(testBean,"foo",""));

  assertEquals("foo(Object)",MethodUtils.invokeMethod(testBean,"foo",new Object()));

  assertEquals("foo(Object)",MethodUtils.invokeMethod(testBean,"foo",Boolean.TRUE));

  assertEquals("foo(Integer)",MethodUtils.invokeMethod(testBean,"foo",NumberUtils.INTEGER_ONE));

  assertEquals("foo(int)",MethodUtils.invokeMethod(testBean,"foo",NumberUtils.BYTE_ONE));

  assertEquals("foo(long)",MethodUtils.invokeMethod(testBean,"foo",NumberUtils.LONG_ONE));

  assertEquals("foo(double)",MethodUtils.invokeMethod(testBean,"foo",NumberUtils.DOUBLE_ONE));

  assertEquals("foo(String...)",MethodUtils.invokeMethod(testBean,"foo","a","b","c"));

  assertEquals("foo(String...)",MethodUtils.invokeMethod(testBean,"foo","a","b","c"));

  assertEquals("foo(int, String...)",MethodUtils.invokeMethod(testBean,"foo",5,"a","b","c"));

  assertEquals("foo(long...)",MethodUtils.invokeMethod(testBean,"foo",1L,2L));

  assertThrows(NoSuchMethodException.class,() -> MethodUtils.invokeMethod(testBean,"foo",1,2));

  TestBean.verify(new ImmutablePair<>("String...",new String[]{"x","y"}),MethodUtils.invokeMethod(testBean,"varOverloadEcho","x","y"));

  TestBean.verify(new ImmutablePair<>("Number...",new Number[]{17,23,42}),MethodUtils.invokeMethod(testBean,"varOverloadEcho",17,23,42));

  TestBean.verify(new ImmutablePair<>("String...",new String[]{"x","y"}),MethodUtils.invokeMethod(testBean,"varOverloadEcho","x","y"));

  TestBean.verify(new ImmutablePair<>("Number...",new Number[]{17,23,42}),MethodUtils.invokeMethod(testBean,"varOverloadEcho",17,23,42));

}

Location: MethodUtilsTest.java

Content: 

@Test public void testInvokeMethodForceAccessNoArgs() throws Exception {

  assertEquals("privateStringStuff()",MethodUtils.invokeMethod(testBean,true,"privateStringStuff"));

}

Location: MethodUtilsTest.java

Content: 

@Test public void testInvokeMethodForceAccessWithArgs() throws Exception {

  assertEquals("privateStringStuff(Integer)",MethodUtils.invokeMethod(testBean,true,"privateStringStuff",5));

  assertEquals("privateStringStuff(double)",MethodUtils.invokeMethod(testBean,true,"privateStringStuff",5.0d));

  assertEquals("privateStringStuff(String)",MethodUtils.invokeMethod(testBean,true,"privateStringStuff","Hi There"));

  assertEquals("privateStringStuff(Object)",MethodUtils.invokeMethod(testBean,true,"privateStringStuff",new Date()));

}

Location: MethodUtilsTest.java

Content: 

@Test public void testInvokeMethod_VarArgsNotUniqueResolvable() throws Exception {

  assertEquals("Boolean...",MethodUtils.invokeMethod(testBean,"varOverload",new Object[]{null}));

  assertEquals("Object...",MethodUtils.invokeMethod(testBean,"varOverload",(Object[])null));

}

Location: MethodUtilsTest.java

Content: 

@Test public void testInvokeMethod_VarArgsWithNullValues() throws Exception {

  assertEquals("String...",MethodUtils.invokeMethod(testBean,"varOverload","a",null,"c"));

  assertEquals("String...",MethodUtils.invokeMethod(testBean,"varOverload","a","b",null));

}

Location: MethodUtilsTest.java

Content: 

@Test public void testInvokeStaticMethod() throws Exception {

  assertEquals("bar()",MethodUtils.invokeStaticMethod(TestBean.class,"bar",(Object[])ArrayUtils.EMPTY_CLASS_ARRAY));

  assertEquals("bar()",MethodUtils.invokeStaticMethod(TestBean.class,"bar",(Object[])null));

  assertEquals("bar()",MethodUtils.invokeStaticMethod(TestBean.class,"bar",null,null));

  assertEquals("bar(String)",MethodUtils.invokeStaticMethod(TestBean.class,"bar",""));

  assertEquals("bar(Object)",MethodUtils.invokeStaticMethod(TestBean.class,"bar",new Object()));

  assertEquals("bar(Object)",MethodUtils.invokeStaticMethod(TestBean.class,"bar",Boolean.TRUE));

  assertEquals("bar(Integer)",MethodUtils.invokeStaticMethod(TestBean.class,"bar",NumberUtils.INTEGER_ONE));

  assertEquals("bar(int)",MethodUtils.invokeStaticMethod(TestBean.class,"bar",NumberUtils.BYTE_ONE));

  assertEquals("bar(double)",MethodUtils.invokeStaticMethod(TestBean.class,"bar",NumberUtils.DOUBLE_ONE));

  assertEquals("bar(String...)",MethodUtils.invokeStaticMethod(TestBean.class,"bar","a","b"));

  assertEquals("bar(long...)",MethodUtils.invokeStaticMethod(TestBean.class,"bar",1L,2L));

  assertEquals("bar(int, String...)",MethodUtils.invokeStaticMethod(TestBean.class,"bar",NumberUtils.INTEGER_ONE,"a","b"));

  TestBean.verify(new ImmutablePair<>("String...",new String[]{"x","y"}),MethodUtils.invokeStaticMethod(TestBean.class,"varOverloadEchoStatic","x","y"));

  TestBean.verify(new ImmutablePair<>("Number...",new Number[]{17,23,42}),MethodUtils.invokeStaticMethod(TestBean.class,"varOverloadEchoStatic",17,23,42));

  TestBean.verify(new ImmutablePair<>("String...",new String[]{"x","y"}),MethodUtils.invokeStaticMethod(TestBean.class,"varOverloadEchoStatic","x","y"));

  TestBean.verify(new ImmutablePair<>("Number...",new Number[]{17,23,42}),MethodUtils.invokeStaticMethod(TestBean.class,"varOverloadEchoStatic",17,23,42));

  assertThrows(NoSuchMethodException.class,() -> MethodUtils.invokeStaticMethod(TestBean.class,"does_not_exist"));

}

Location: MethodUtilsTest.java

Content: 

@Test public void verifyJavaVarargsOverloadingResolution(){

  assertEquals("Byte...",TestBean.varOverload((byte)1,(byte)2));

  assertEquals("Short...",TestBean.varOverload((short)1,(short)2));

  assertEquals("Integer...",TestBean.varOverload(1,2));

  assertEquals("Long...",TestBean.varOverload(1L,2L));

  assertEquals("Float...",TestBean.varOverload(1f,2f));

  assertEquals("Double...",TestBean.varOverload(1d,2d));

  assertEquals("Character...",TestBean.varOverload('a','b'));

  assertEquals("String...",TestBean.varOverload("a","b"));

  assertEquals("Boolean...",TestBean.varOverload(true,false));

  assertEquals("Object...",TestBean.varOverload(1,"s"));

  assertEquals("Object...",TestBean.varOverload(1,true));

  assertEquals("Object...",TestBean.varOverload(1.1,true));

  assertEquals("Object...",TestBean.varOverload('c',true));

  assertEquals("Number...",TestBean.varOverload(1,1.1));

  assertEquals("Number...",TestBean.varOverload(1,1L));

  assertEquals("Number...",TestBean.varOverload(1d,1f));

  assertEquals("Number...",TestBean.varOverload((short)1,(byte)1));

  assertEquals("Object...",TestBean.varOverload(1,'c'));

  assertEquals("Object...",TestBean.varOverload('c',"s"));

}

