Location: EventListenerSupport.java

Content: 

/** 

 * Registers an event listener.

 * @param listener the event listener (may not be {@code null}).

 * @throws NullPointerException if {@code listener} is{@code null}.

 */

public void addListener(final L listener){

  addListener(listener,true);

}

Location: EventListenerSupport.java

Content: 

/** 

 * Registers an event listener.  Will not add a pre-existing listener object to the list if  {@code allowDuplicate} is false.

 * @param listener the event listener (may not be {@code null}).

 * @param allowDuplicate the flag for determining if duplicate listenerobjects are allowed to be registered.

 * @throws NullPointerException if {@code listener} is {@code null}.

 * @since 3.5

 */

public void addListener(final L listener,final boolean allowDuplicate){

  Validate.notNull(listener,"listener");

  if (allowDuplicate || !listeners.contains(listener)) {

    listeners.add(listener);

  }

}

Location: EventListenerSupport.java

Content: 

/** 

 * Create the  {@link InvocationHandler} responsible for broadcasting callsto the managed listeners.  Subclasses can override to provide custom behavior.

 * @return ProxyInvocationHandler

 */

protected InvocationHandler createInvocationHandler(){

  return new ProxyInvocationHandler();

}

Location: EventListenerSupport.java

Content: 

/** 

 * Create the proxy object.

 * @param listenerInterface the class of the listener interface

 * @param classLoader the class loader to be used

 */

private void createProxy(final Class<L> listenerInterface,final ClassLoader classLoader){

  proxy=listenerInterface.cast(Proxy.newProxyInstance(classLoader,new Class[]{listenerInterface},createInvocationHandler()));

}

Location: EventListenerSupport.java

Content: 

/** 

 * Creates an EventListenerSupport object which supports the specified listener type.

 * @param < T > the type of the listener interface

 * @param listenerInterface the type of listener interface that will receiveevents posted using this class.

 * @return an EventListenerSupport object which supports the specifiedlistener type.

 * @throws NullPointerException if {@code listenerInterface} is{@code null}.

 * @throws IllegalArgumentException if {@code listenerInterface} isnot an interface.

 */

public static <T>EventListenerSupport<T> create(final Class<T> listenerInterface){

  return new EventListenerSupport<>(listenerInterface);

}

Location: EventListenerSupport.java

Content: 

/** 

 * Create a new EventListenerSupport instance. Serialization-friendly constructor.

 */

private EventListenerSupport(){

}

Location: EventListenerSupport.java

Content: 

/** 

 * Creates an EventListenerSupport object which supports the provided listener interface.

 * @param listenerInterface the type of listener interface that will receiveevents posted using this class.

 * @throws NullPointerException if {@code listenerInterface} is{@code null}.

 * @throws IllegalArgumentException if {@code listenerInterface} isnot an interface.

 */

public EventListenerSupport(final Class<L> listenerInterface){

  this(listenerInterface,Thread.currentThread().getContextClassLoader());

}

Location: EventListenerSupport.java

Content: 

/** 

 * Creates an EventListenerSupport object which supports the provided listener interface using the specified class loader to create the JDK dynamic proxy.

 * @param listenerInterface the listener interface.

 * @param classLoader       the class loader.

 * @throws NullPointerException if {@code listenerInterface} or{@code classLoader} is {@code null}.

 * @throws IllegalArgumentException if {@code listenerInterface} isnot an interface.

 */

public EventListenerSupport(final Class<L> listenerInterface,final ClassLoader classLoader){

  this();

  Validate.notNull(listenerInterface,"listenerInterface");

  Validate.notNull(classLoader,"classLoader");

  Validate.isTrue(listenerInterface.isInterface(),"Class %s is not an interface",listenerInterface.getName());

  initializeTransientFields(listenerInterface,classLoader);

}

Location: EventListenerSupport.java

Content: 

/** 

 * Returns a proxy object which can be used to call listener methods on all of the registered event listeners. All calls made to this proxy will be forwarded to all registered listeners.

 * @return a proxy object which can be used to call listener methods on allof the registered event listeners

 */

public L fire(){

  return proxy;

}

Location: EventListenerSupport.java

Content: 

/** 

 * Returns the number of registered listeners.

 * @return the number of registered listeners.

 */

int getListenerCount(){

  return listeners.size();

}

Location: EventListenerSupport.java

Content: 

/** 

 * Gets an array containing the currently registered listeners. Modification to this array's elements will have no effect on the {@link EventListenerSupport} instance.

 * @return L[]

 */

public L[] getListeners(){

  return listeners.toArray(prototypeArray);

}

Location: EventListenerSupport.java

Content: 

/** 

 * Initialize transient fields.

 * @param listenerInterface the class of the listener interface

 * @param classLoader the class loader to be used

 */

private void initializeTransientFields(final Class<L> listenerInterface,final ClassLoader classLoader){

  this.prototypeArray=ArrayUtils.newInstance(listenerInterface,0);

  createProxy(listenerInterface,classLoader);

}

Location: EventListenerSupport.java

Content: 

/** 

 * Unregisters an event listener.

 * @param listener the event listener (may not be {@code null}).

 * @throws NullPointerException if {@code listener} is{@code null}.

 */

public void removeListener(final L listener){

  Validate.notNull(listener,"listener");

  listeners.remove(listener);

}

Location: EventListenerSupport.java

Content: 

/** 

 * Serialize.

 * @param objectOutputStream the output stream

 * @throws IOException if an IO error occurs

 */

private void writeObject(final ObjectOutputStream objectOutputStream) throws IOException {

  final ArrayList<L> serializableListeners=new ArrayList<>();

  ObjectOutputStream testObjectOutputStream=new ObjectOutputStream(new ByteArrayOutputStream());

  for (  final L listener : listeners) {

    try {

      testObjectOutputStream.writeObject(listener);

      serializableListeners.add(listener);

    }

 catch (    final IOException exception) {

      testObjectOutputStream=new ObjectOutputStream(new ByteArrayOutputStream());

    }

  }

  objectOutputStream.writeObject(serializableListeners.toArray(prototypeArray));

}

