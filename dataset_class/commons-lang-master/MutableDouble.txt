Location: MutableDouble.java

Content: 

/** 

 * Increments this instance's value by  {@code operand}; this method returns the value associated with the instance immediately after the addition operation. This method is not thread safe.

 * @param operand the quantity to add, not null

 * @return the value associated with this instance after adding the operand

 * @since 3.5

 */

public double addAndGet(final double operand){

  this.value+=operand;

  return value;

}

Location: MutableDouble.java

Content: 

/** 

 * Increments this instance's value by  {@code operand}; this method returns the value associated with the instance immediately after the addition operation. This method is not thread safe.

 * @param operand the quantity to add, not null

 * @throws NullPointerException if {@code operand} is null

 * @return the value associated with this instance after adding the operand

 * @since 3.5

 */

public double addAndGet(final Number operand){

  this.value+=operand.doubleValue();

  return value;

}

Location: MutableDouble.java

Content: 

/** 

 * Adds a value to the value of this instance.

 * @param operand  the value to add

 * @since 2.2

 */

public void add(final double operand){

  this.value+=operand;

}

Location: MutableDouble.java

Content: 

/** 

 * Adds a value to the value of this instance.

 * @param operand  the value to add, not null

 * @throws NullPointerException if the object is null

 * @since 2.2

 */

public void add(final Number operand){

  this.value+=operand.doubleValue();

}

Location: MutableDouble.java

Content: 

/** 

 * Compares this mutable to another in ascending order.

 * @param other  the other mutable to compare to, not null

 * @return negative if this is less, zero if equal, positive if greater

 */

@Override public int compareTo(final MutableDouble other){

  return Double.compare(this.value,other.value);

}

Location: MutableDouble.java

Content: 

/** 

 * Decrements the value.

 * @since 2.2

 */

public void decrement(){

  value--;

}

Location: MutableDouble.java

Content: 

/** 

 * Decrements this instance's value by 1; this method returns the value associated with the instance immediately after the decrement operation. This method is not thread safe.

 * @return the value associated with the instance after it is decremented

 * @since 3.5

 */

public double decrementAndGet(){

  value--;

  return value;

}

Location: MutableDouble.java

Content: 

/** 

 * Returns the value of this MutableDouble as a double.

 * @return the numeric value represented by this object after conversion to type double.

 */

@Override public double doubleValue(){

  return value;

}

Location: MutableDouble.java

Content: 

/** 

 * Returns the value of this MutableDouble as a float.

 * @return the numeric value represented by this object after conversion to type float.

 */

@Override public float floatValue(){

  return (float)value;

}

Location: MutableDouble.java

Content: 

/** 

 * Increments this instance's value by  {@code operand}; this method returns the value associated with the instance immediately prior to the addition operation. This method is not thread safe.

 * @param operand the quantity to add, not null

 * @return the value associated with this instance immediately before the operand was added

 * @since 3.5

 */

public double getAndAdd(final double operand){

  final double last=value;

  this.value+=operand;

  return last;

}

Location: MutableDouble.java

Content: 

/** 

 * Increments this instance's value by  {@code operand}; this method returns the value associated with the instance immediately prior to the addition operation. This method is not thread safe.

 * @param operand the quantity to add, not null

 * @throws NullPointerException if {@code operand} is null

 * @return the value associated with this instance immediately before the operand was added

 * @since 3.5

 */

public double getAndAdd(final Number operand){

  final double last=value;

  this.value+=operand.doubleValue();

  return last;

}

Location: MutableDouble.java

Content: 

/** 

 * Decrements this instance's value by 1; this method returns the value associated with the instance immediately prior to the decrement operation. This method is not thread safe.

 * @return the value associated with the instance before it was decremented

 * @since 3.5

 */

public double getAndDecrement(){

  final double last=value;

  value--;

  return last;

}

Location: MutableDouble.java

Content: 

/** 

 * Increments this instance's value by 1; this method returns the value associated with the instance immediately prior to the increment operation. This method is not thread safe.

 * @return the value associated with the instance before it was incremented

 * @since 3.5

 */

public double getAndIncrement(){

  final double last=value;

  value++;

  return last;

}

Location: MutableDouble.java

Content: 

/** 

 * Increments the value.

 * @since 2.2

 */

public void increment(){

  value++;

}

Location: MutableDouble.java

Content: 

/** 

 * Increments this instance's value by 1; this method returns the value associated with the instance immediately after the increment operation. This method is not thread safe.

 * @return the value associated with the instance after it is incremented

 * @since 3.5

 */

public double incrementAndGet(){

  value++;

  return value;

}

Location: MutableDouble.java

Content: 

/** 

 * Returns the value of this MutableDouble as an int.

 * @return the numeric value represented by this object after conversion to type int.

 */

@Override public int intValue(){

  return (int)value;

}

Location: MutableDouble.java

Content: 

/** 

 * Checks whether the double value is infinite.

 * @return true if infinite

 */

public boolean isInfinite(){

  return Double.isInfinite(value);

}

Location: MutableDouble.java

Content: 

/** 

 * Checks whether the double value is the special NaN value.

 * @return true if NaN

 */

public boolean isNaN(){

  return Double.isNaN(value);

}

Location: MutableDouble.java

Content: 

/** 

 * Returns the value of this MutableDouble as a long.

 * @return the numeric value represented by this object after conversion to type long.

 */

@Override public long longValue(){

  return (long)value;

}

Location: MutableDouble.java

Content: 

/** 

 * Constructs a new MutableDouble with the default value of zero.

 */

public MutableDouble(){

}

Location: MutableDouble.java

Content: 

/** 

 * Constructs a new MutableDouble with the specified value.

 * @param value  the initial value to store

 */

public MutableDouble(final double value){

  this.value=value;

}

Location: MutableDouble.java

Content: 

/** 

 * Constructs a new MutableDouble with the specified value.

 * @param value  the initial value to store, not null

 * @throws NullPointerException if the object is null

 */

public MutableDouble(final Number value){

  this.value=value.doubleValue();

}

Location: MutableDouble.java

Content: 

/** 

 * Constructs a new MutableDouble parsing the given string.

 * @param value  the string to parse, not null

 * @throws NumberFormatException if the string cannot be parsed into a double

 * @since 2.5

 */

public MutableDouble(final String value){

  this.value=Double.parseDouble(value);

}

Location: MutableDouble.java

Content: 

/** 

 * Sets the value.

 * @param value  the value to set

 */

public void setValue(final double value){

  this.value=value;

}

Location: MutableDouble.java

Content: 

/** 

 * Sets the value from any Number instance.

 * @param value  the value to set, not null

 * @throws NullPointerException if the object is null

 */

@Override public void setValue(final Number value){

  this.value=value.doubleValue();

}

Location: MutableDouble.java

Content: 

/** 

 * Subtracts a value from the value of this instance.

 * @param operand  the value to subtract, not null

 * @since 2.2

 */

public void subtract(final double operand){

  this.value-=operand;

}

Location: MutableDouble.java

Content: 

/** 

 * Subtracts a value from the value of this instance.

 * @param operand  the value to subtract, not null

 * @throws NullPointerException if the object is null

 * @since 2.2

 */

public void subtract(final Number operand){

  this.value-=operand.doubleValue();

}

Location: MutableDouble.java

Content: 

/** 

 * Gets this mutable as an instance of Double.

 * @return a Double instance containing the value from this mutable, never null

 */

public Double toDouble(){

  return Double.valueOf(doubleValue());

}

