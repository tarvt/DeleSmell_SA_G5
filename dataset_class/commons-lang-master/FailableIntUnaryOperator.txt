Location: FailableIntUnaryOperator.java

Content: 

/** 

 * Returns a composed  {@code FailableDoubleUnaryOperator} like {@link IntUnaryOperator#andThen(IntUnaryOperator)}.

 * @param after the operator to apply after this one.

 * @return a composed {@code FailableIntUnaryOperator} like {@link IntUnaryOperator#andThen(IntUnaryOperator)}.

 * @throws NullPointerException if after is null.

 * @see #compose(FailableIntUnaryOperator)

 */

default FailableIntUnaryOperator<E> andThen(final FailableIntUnaryOperator<E> after){

  Objects.requireNonNull(after);

  return (  final int t) -> after.applyAsInt(applyAsInt(t));

}

Location: FailableIntUnaryOperator.java

Content: 

/** 

 * Applies this operator to the given operand.

 * @param operand the operand

 * @return the operator result

 * @throws E Thrown when a consumer fails.

 */

int applyAsInt(int operand) throws E ;

Location: FailableIntUnaryOperator.java

Content: 

/** 

 * Returns a composed  {@code FailableIntUnaryOperator} like {@link IntUnaryOperator#compose(IntUnaryOperator)}.

 * @param before the operator to apply before this one.

 * @return a composed {@code FailableIntUnaryOperator} like {@link IntUnaryOperator#compose(IntUnaryOperator)}.

 * @throws NullPointerException if before is null.

 * @see #andThen(FailableIntUnaryOperator)

 */

default FailableIntUnaryOperator<E> compose(final FailableIntUnaryOperator<E> before){

  Objects.requireNonNull(before);

  return (  final int v) -> applyAsInt(before.applyAsInt(v));

}

