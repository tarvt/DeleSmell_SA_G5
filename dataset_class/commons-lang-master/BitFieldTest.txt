Location: BitFieldTest.java

Content: 

/** 

 * test the clearShort() method

 */

@Test public void testClearShort(){

  assertEquals(bf_multi.clearShort((short)-1),(short)0xC07F);

  assertEquals(bf_single.clearShort((short)-1),(short)0xBFFF);

  assertEquals(bf_zero.clearShort((short)-1),(short)0xFFFF);

}

Location: BitFieldTest.java

Content: 

/** 

 * test the getRawValue() method

 */

@Test public void testGetRawValue(){

  assertEquals(bf_multi.getRawValue(-1),0x3F80);

  assertEquals(bf_multi.getRawValue(0),0);

  assertEquals(bf_single.getRawValue(-1),0x4000);

  assertEquals(bf_single.getRawValue(0),0);

  assertEquals(bf_zero.getRawValue(-1),0);

  assertEquals(bf_zero.getRawValue(0),0);

}

Location: BitFieldTest.java

Content: 

/** 

 * test the getShortRawValue() method

 */

@Test public void testGetShortRawValue(){

  assertEquals(bf_multi.getShortRawValue((short)-1),(short)0x3F80);

  assertEquals(bf_multi.getShortRawValue((short)0),(short)0);

  assertEquals(bf_single.getShortRawValue((short)-1),(short)0x4000);

  assertEquals(bf_single.getShortRawValue((short)0),(short)0);

  assertEquals(bf_zero.getShortRawValue((short)-1),(short)0);

  assertEquals(bf_zero.getShortRawValue((short)0),(short)0);

}

Location: BitFieldTest.java

Content: 

/** 

 * test the getShortValue() method

 */

@Test public void testGetShortValue(){

  assertEquals(bf_multi.getShortValue((short)-1),(short)127);

  assertEquals(bf_multi.getShortValue((short)0),(short)0);

  assertEquals(bf_single.getShortValue((short)-1),(short)1);

  assertEquals(bf_single.getShortValue((short)0),(short)0);

  assertEquals(bf_zero.getShortValue((short)-1),(short)0);

  assertEquals(bf_zero.getShortValue((short)0),(short)0);

}

Location: BitFieldTest.java

Content: 

/** 

 * test the getValue() method

 */

@Test public void testGetValue(){

  assertEquals(bf_multi.getValue(-1),127);

  assertEquals(bf_multi.getValue(0),0);

  assertEquals(bf_single.getValue(-1),1);

  assertEquals(bf_single.getValue(0),0);

  assertEquals(bf_zero.getValue(-1),0);

  assertEquals(bf_zero.getValue(0),0);

}

Location: BitFieldTest.java

Content: 

/** 

 * test the isAllSet() method

 */

@Test public void testIsAllSet(){

  for (int j=0; j < 0x3F80; j+=0x80) {

    assertFalse(bf_multi.isAllSet(j));

    assertTrue(bf_zero.isAllSet(j));

  }

  assertTrue(bf_multi.isAllSet(0x3F80));

  assertFalse(bf_single.isAllSet(0));

  assertTrue(bf_single.isAllSet(0x4000));

}

Location: BitFieldTest.java

Content: 

/** 

 * test the isSet() method

 */

@Test public void testIsSet(){

  assertFalse(bf_multi.isSet(0));

  assertFalse(bf_zero.isSet(0));

  for (int j=0x80; j <= 0x3F80; j+=0x80) {

    assertTrue(bf_multi.isSet(j));

  }

  for (int j=0x80; j <= 0x3F80; j+=0x80) {

    assertFalse(bf_zero.isSet(j));

  }

  assertFalse(bf_single.isSet(0));

  assertTrue(bf_single.isSet(0x4000));

}

Location: BitFieldTest.java

Content: 

/** 

 * test the set() method

 */

@Test public void testSet(){

  assertEquals(bf_multi.set(0),0x3F80);

  assertEquals(bf_single.set(0),0x4000);

  assertEquals(bf_zero.set(0),0);

}

Location: BitFieldTest.java

Content: 

/** 

 * test the setBoolean() method

 */

@Test public void testSetBoolean(){

  assertEquals(bf_multi.set(0),bf_multi.setBoolean(0,true));

  assertEquals(bf_single.set(0),bf_single.setBoolean(0,true));

  assertEquals(bf_zero.set(0),bf_zero.setBoolean(0,true));

  assertEquals(bf_multi.clear(-1),bf_multi.setBoolean(-1,false));

  assertEquals(bf_single.clear(-1),bf_single.setBoolean(-1,false));

  assertEquals(bf_zero.clear(-1),bf_zero.setBoolean(-1,false));

}

Location: BitFieldTest.java

Content: 

/** 

 * test the setShort() method

 */

@Test public void testSetShort(){

  assertEquals(bf_multi.setShort((short)0),(short)0x3F80);

  assertEquals(bf_single.setShort((short)0),(short)0x4000);

  assertEquals(bf_zero.setShort((short)0),(short)0);

}

Location: BitFieldTest.java

Content: 

/** 

 * test the setShortBoolean() method

 */

@Test public void testSetShortBoolean(){

  assertEquals(bf_multi.setShort((short)0),bf_multi.setShortBoolean((short)0,true));

  assertEquals(bf_single.setShort((short)0),bf_single.setShortBoolean((short)0,true));

  assertEquals(bf_zero.setShort((short)0),bf_zero.setShortBoolean((short)0,true));

  assertEquals(bf_multi.clearShort((short)-1),bf_multi.setShortBoolean((short)-1,false));

  assertEquals(bf_single.clearShort((short)-1),bf_single.setShortBoolean((short)-1,false));

  assertEquals(bf_zero.clearShort((short)-1),bf_zero.setShortBoolean((short)-1,false));

}

Location: BitFieldTest.java

Content: 

/** 

 * test the setShortValue() method

 */

@Test public void testSetShortValue(){

  for (int j=0; j < 128; j++) {

    assertEquals(bf_multi.getShortValue(bf_multi.setShortValue((short)0,(short)j)),(short)j);

    assertEquals(bf_multi.setShortValue((short)0,(short)j),(short)(j << 7));

  }

  for (int j=0; j < 128; j++) {

    assertEquals(bf_zero.getShortValue(bf_zero.setShortValue((short)0,(short)j)),(short)0);

    assertEquals(bf_zero.setShortValue((short)0,(short)j),(short)0);

  }

  assertEquals(bf_multi.setShortValue((short)0x3f80,(short)128),(short)0);

  for (int j=0; j < 2; j++) {

    assertEquals(bf_single.getShortValue(bf_single.setShortValue((short)0,(short)j)),(short)j);

    assertEquals(bf_single.setShortValue((short)0,(short)j),(short)(j << 14));

  }

  assertEquals(bf_single.setShortValue((short)0x4000,(short)2),(short)0);

}

Location: BitFieldTest.java

Content: 

/** 

 * test the setValue() method

 */

@Test public void testSetValue(){

  for (int j=0; j < 128; j++) {

    assertEquals(bf_multi.getValue(bf_multi.setValue(0,j)),j);

    assertEquals(bf_multi.setValue(0,j),j << 7);

  }

  for (int j=0; j < 128; j++) {

    assertEquals(bf_zero.getValue(bf_zero.setValue(0,j)),0);

    assertEquals(bf_zero.setValue(0,j),0);

  }

  assertEquals(bf_multi.setValue(0x3f80,128),0);

  for (int j=0; j < 2; j++) {

    assertEquals(bf_single.getValue(bf_single.setValue(0,j)),j);

    assertEquals(bf_single.setValue(0,j),j << 14);

  }

  assertEquals(bf_single.setValue(0x4000,2),0);

}

