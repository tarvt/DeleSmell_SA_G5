Location: TimedSemaphoreTest.java

Content: 

/** 

 * Prepares an executor service mock to expect the start of the timer.

 * @param service the mock

 * @param future the future

 */

private void prepareStartTimer(final ScheduledExecutorService service,final ScheduledFuture<?> future){

  service.scheduleAtFixedRate((Runnable)EasyMock.anyObject(),EasyMock.eq(PERIOD),EasyMock.eq(PERIOD),EasyMock.eq(UNIT));

  EasyMock.expectLastCall().andReturn(future);

}

Location: TimedSemaphoreTest.java

Content: 

/** 

 * Tests the acquire() method if a limit is set.

 * @throws java.lang.InterruptedException so we don't have to catch it

 */

@Test public void testAcquireLimit() throws InterruptedException {

  final ScheduledExecutorService service=EasyMock.createMock(ScheduledExecutorService.class);

  final ScheduledFuture<?> future=EasyMock.createMock(ScheduledFuture.class);

  prepareStartTimer(service,future);

  EasyMock.replay(service,future);

  final int count=10;

  final CountDownLatch latch=new CountDownLatch(count - 1);

  final TimedSemaphore semaphore=new TimedSemaphore(service,PERIOD,UNIT,1);

  final SemaphoreThread t=new SemaphoreThread(semaphore,latch,count,count - 1);

  semaphore.setLimit(count - 1);

  t.start();

  latch.await();

  assertEquals(count - 1,semaphore.getAcquireCount(),"Wrong semaphore count");

  semaphore.endOfPeriod();

  t.join();

  assertEquals(1,semaphore.getAcquireCount(),"Wrong semaphore count (2)");

  assertEquals(count - 1,semaphore.getLastAcquiresPerPeriod(),"Wrong acquire() count");

  EasyMock.verify(service,future);

}

Location: TimedSemaphoreTest.java

Content: 

/** 

 * Tests a bigger number of invocations that span multiple periods. The period is set to a very short time. A background thread calls the semaphore a large number of times. While it runs at last one end of a period should be reached.

 * @throws java.lang.InterruptedException so we don't have to catch it

 */

@Test public void testAcquireMultiplePeriods() throws InterruptedException {

  final int count=1000;

  final TimedSemaphoreTestImpl semaphore=new TimedSemaphoreTestImpl(PERIOD / 10,TimeUnit.MILLISECONDS,1);

  semaphore.setLimit(count / 4);

  final CountDownLatch latch=new CountDownLatch(count);

  final SemaphoreThread t=new SemaphoreThread(semaphore,latch,count,count);

  t.start();

  latch.await();

  semaphore.shutdown();

  assertTrue(semaphore.getPeriodEnds() > 0,"End of period not reached");

}

Location: TimedSemaphoreTest.java

Content: 

/** 

 * Tests the acquire() method if more threads are involved than the limit. This method starts a number of threads that all invoke the semaphore. The semaphore's limit is set to 1, so in each period only a single thread can acquire the semaphore.

 * @throws java.lang.InterruptedException so we don't have to catch it

 */

@Test public void testAcquireMultipleThreads() throws InterruptedException {

  final ScheduledExecutorService service=EasyMock.createMock(ScheduledExecutorService.class);

  final ScheduledFuture<?> future=EasyMock.createMock(ScheduledFuture.class);

  prepareStartTimer(service,future);

  EasyMock.replay(service,future);

  final TimedSemaphoreTestImpl semaphore=new TimedSemaphoreTestImpl(service,PERIOD,UNIT,1);

  semaphore.latch=new CountDownLatch(1);

  final int count=10;

  final SemaphoreThread[] threads=new SemaphoreThread[count];

  for (int i=0; i < count; i++) {

    threads[i]=new SemaphoreThread(semaphore,null,1,0);

    threads[i].start();

  }

  for (int i=0; i < count; i++) {

    semaphore.latch.await();

    assertEquals(1,semaphore.getAcquireCount(),"Wrong count");

    semaphore.latch=new CountDownLatch(1);

    semaphore.endOfPeriod();

    assertEquals(1,semaphore.getLastAcquiresPerPeriod(),"Wrong acquire count");

  }

  for (int i=0; i < count; i++) {

    threads[i].join();

  }

  EasyMock.verify(service,future);

}

Location: TimedSemaphoreTest.java

Content: 

/** 

 * Tests the acquire() method if no limit is set. A test thread is started that calls the semaphore a large number of times. Even if the semaphore's period does not end, the thread should never block.

 * @throws java.lang.InterruptedException so we don't have to catch it

 */

@Test public void testAcquireNoLimit() throws InterruptedException {

  final ScheduledExecutorService service=EasyMock.createMock(ScheduledExecutorService.class);

  final ScheduledFuture<?> future=EasyMock.createMock(ScheduledFuture.class);

  prepareStartTimer(service,future);

  EasyMock.replay(service,future);

  final TimedSemaphoreTestImpl semaphore=new TimedSemaphoreTestImpl(service,PERIOD,UNIT,TimedSemaphore.NO_LIMIT);

  final int count=1000;

  final CountDownLatch latch=new CountDownLatch(count);

  final SemaphoreThread t=new SemaphoreThread(semaphore,latch,count,count);

  t.start();

  latch.await();

  EasyMock.verify(service,future);

}

Location: TimedSemaphoreTest.java

Content: 

/** 

 * Tests whether the available non-blocking calls can be queried.

 * @throws java.lang.InterruptedException so we don't have to catch it

 */

@Test public void testGetAvailablePermits() throws InterruptedException {

  final ScheduledExecutorService service=EasyMock.createMock(ScheduledExecutorService.class);

  final ScheduledFuture<?> future=EasyMock.createMock(ScheduledFuture.class);

  prepareStartTimer(service,future);

  EasyMock.replay(service,future);

  final TimedSemaphore semaphore=new TimedSemaphore(service,PERIOD,UNIT,LIMIT);

  for (int i=0; i < LIMIT; i++) {

    assertEquals(LIMIT - i,semaphore.getAvailablePermits(),"Wrong available count at " + i);

    semaphore.acquire();

  }

  semaphore.endOfPeriod();

  assertEquals(LIMIT,semaphore.getAvailablePermits(),"Wrong available count in new period");

  EasyMock.verify(service,future);

}

Location: TimedSemaphoreTest.java

Content: 

/** 

 * Tests the methods for statistics.

 * @throws java.lang.InterruptedException so we don't have to catch it

 */

@Test public void testGetAverageCallsPerPeriod() throws InterruptedException {

  final ScheduledExecutorService service=EasyMock.createMock(ScheduledExecutorService.class);

  final ScheduledFuture<?> future=EasyMock.createMock(ScheduledFuture.class);

  prepareStartTimer(service,future);

  EasyMock.replay(service,future);

  final TimedSemaphore semaphore=new TimedSemaphore(service,PERIOD,UNIT,LIMIT);

  semaphore.acquire();

  semaphore.endOfPeriod();

  assertEquals(1.0,semaphore.getAverageCallsPerPeriod(),.005,"Wrong average (1)");

  semaphore.acquire();

  semaphore.acquire();

  semaphore.endOfPeriod();

  assertEquals(1.5,semaphore.getAverageCallsPerPeriod(),.005,"Wrong average (2)");

  EasyMock.verify(service,future);

}

Location: TimedSemaphoreTest.java

Content: 

/** 

 * Tests creating a new instance.

 */

@Test public void testInit(){

  final ScheduledExecutorService service=EasyMock.createMock(ScheduledExecutorService.class);

  EasyMock.replay(service);

  final TimedSemaphore semaphore=new TimedSemaphore(service,PERIOD,UNIT,LIMIT);

  EasyMock.verify(service);

  assertEquals(service,semaphore.getExecutorService(),"Wrong service");

  assertEquals(PERIOD,semaphore.getPeriod(),"Wrong period");

  assertEquals(UNIT,semaphore.getUnit(),"Wrong unit");

  assertEquals(0,semaphore.getLastAcquiresPerPeriod(),"Statistic available");

  assertEquals(0.0,semaphore.getAverageCallsPerPeriod(),.05,"Average available");

  assertFalse(semaphore.isShutdown(),"Already shutdown");

  assertEquals(LIMIT,semaphore.getLimit(),"Wrong limit");

}

Location: TimedSemaphoreTest.java

Content: 

/** 

 * Tests whether a default executor service is created if no service is provided.

 */

@Test public void testInitDefaultService(){

  final TimedSemaphore semaphore=new TimedSemaphore(PERIOD,UNIT,LIMIT);

  final ScheduledThreadPoolExecutor exec=(ScheduledThreadPoolExecutor)semaphore.getExecutorService();

  assertFalse(exec.getContinueExistingPeriodicTasksAfterShutdownPolicy(),"Wrong periodic task policy");

  assertFalse(exec.getExecuteExistingDelayedTasksAfterShutdownPolicy(),"Wrong delayed task policy");

  assertFalse(exec.isShutdown(),"Already shutdown");

  semaphore.shutdown();

}

Location: TimedSemaphoreTest.java

Content: 

/** 

 * Tries to create an instance with a negative period. This should cause an exception.

 */

@Test public void testInitInvalidPeriod(){

  assertThrows(IllegalArgumentException.class,() -> new TimedSemaphore(0L,UNIT,LIMIT));

}

Location: TimedSemaphoreTest.java

Content: 

/** 

 * Tries to call acquire() after shutdown(). This should cause an exception.

 */

@Test public void testPassAfterShutdown(){

  final TimedSemaphore semaphore=new TimedSemaphore(PERIOD,UNIT,LIMIT);

  semaphore.shutdown();

  assertThrows(IllegalStateException.class,semaphore::acquire);

}

Location: TimedSemaphoreTest.java

Content: 

/** 

 * Tests multiple invocations of the shutdown() method.

 * @throws java.lang.InterruptedException so we don't have to catch it

 */

@Test public void testShutdownMultipleTimes() throws InterruptedException {

  final ScheduledExecutorService service=EasyMock.createMock(ScheduledExecutorService.class);

  final ScheduledFuture<?> future=EasyMock.createMock(ScheduledFuture.class);

  prepareStartTimer(service,future);

  EasyMock.expect(Boolean.valueOf(future.cancel(false))).andReturn(Boolean.TRUE);

  EasyMock.replay(service,future);

  final TimedSemaphoreTestImpl semaphore=new TimedSemaphoreTestImpl(service,PERIOD,UNIT,LIMIT);

  semaphore.acquire();

  for (int i=0; i < 10; i++) {

    semaphore.shutdown();

  }

  EasyMock.verify(service,future);

}

Location: TimedSemaphoreTest.java

Content: 

/** 

 * Tests the shutdown() method if the executor belongs to the semaphore. In this case it has to be shut down.

 */

@Test public void testShutdownOwnExecutor(){

  final TimedSemaphore semaphore=new TimedSemaphore(PERIOD,UNIT,LIMIT);

  semaphore.shutdown();

  assertTrue(semaphore.isShutdown(),"Not shutdown");

  assertTrue(semaphore.getExecutorService().isShutdown(),"Executor not shutdown");

}

Location: TimedSemaphoreTest.java

Content: 

/** 

 * Tests the shutdown() method for a shared executor service before a task was started. This should do pretty much nothing.

 */

@Test public void testShutdownSharedExecutorNoTask(){

  final ScheduledExecutorService service=EasyMock.createMock(ScheduledExecutorService.class);

  EasyMock.replay(service);

  final TimedSemaphore semaphore=new TimedSemaphore(service,PERIOD,UNIT,LIMIT);

  semaphore.shutdown();

  assertTrue(semaphore.isShutdown(),"Not shutdown");

  EasyMock.verify(service);

}

Location: TimedSemaphoreTest.java

Content: 

/** 

 * Tests the shutdown() method for a shared executor after the task was started. In this case the task must be canceled.

 * @throws java.lang.InterruptedException so we don't have to catch it

 */

@Test public void testShutdownSharedExecutorTask() throws InterruptedException {

  final ScheduledExecutorService service=EasyMock.createMock(ScheduledExecutorService.class);

  final ScheduledFuture<?> future=EasyMock.createMock(ScheduledFuture.class);

  prepareStartTimer(service,future);

  EasyMock.expect(Boolean.valueOf(future.cancel(false))).andReturn(Boolean.TRUE);

  EasyMock.replay(service,future);

  final TimedSemaphoreTestImpl semaphore=new TimedSemaphoreTestImpl(service,PERIOD,UNIT,LIMIT);

  semaphore.acquire();

  semaphore.shutdown();

  assertTrue(semaphore.isShutdown(),"Not shutdown");

  EasyMock.verify(service,future);

}

Location: TimedSemaphoreTest.java

Content: 

/** 

 * Tests starting the timer.

 * @throws java.lang.InterruptedException so we don't have to catch it

 */

@Test public void testStartTimer() throws InterruptedException {

  final TimedSemaphoreTestImpl semaphore=new TimedSemaphoreTestImpl(PERIOD,UNIT,LIMIT);

  final ScheduledFuture<?> future=semaphore.startTimer();

  assertNotNull(future,"No future returned");

  ThreadUtils.sleepQuietly(PERIOD);

  final int trials=10;

  int count=0;

  do {

    Thread.sleep(PERIOD);

    assertFalse(count++ > trials,"endOfPeriod() not called!");

  }

 while (semaphore.getPeriodEnds() <= 0);

  semaphore.shutdown();

}

Location: TimedSemaphoreTest.java

Content: 

/** 

 * Tests the tryAcquire() method. It is checked whether the semaphore can be acquired by a bunch of threads the expected number of times and not more.

 */

@Test public void testTryAcquire() throws InterruptedException {

  final TimedSemaphore semaphore=new TimedSemaphore(PERIOD,TimeUnit.SECONDS,LIMIT);

  final TryAcquireThread[] threads=new TryAcquireThread[3 * LIMIT];

  final CountDownLatch latch=new CountDownLatch(1);

  for (int i=0; i < threads.length; i++) {

    threads[i]=new TryAcquireThread(semaphore,latch);

    threads[i].start();

  }

  latch.countDown();

  int permits=0;

  for (  final TryAcquireThread t : threads) {

    t.join();

    if (t.acquired) {

      permits++;

    }

  }

  assertEquals(LIMIT,permits,"Wrong number of permits granted");

}

Location: TimedSemaphoreTest.java

Content: 

/** 

 * Tries to call tryAcquire() after shutdown(). This should cause an exception.

 */

@Test public void testTryAcquireAfterShutdown(){

  final TimedSemaphore semaphore=new TimedSemaphore(PERIOD,UNIT,LIMIT);

  semaphore.shutdown();

  assertThrows(IllegalStateException.class,semaphore::tryAcquire);

}

