Location: BackgroundInitializerTest.java

Content: 

/** 

 * Helper method for checking whether the initialize() method was correctly called. start() must already have been invoked.

 * @param init the initializer to test

 */

private void checkInitialize(final BackgroundInitializerTestImpl init) throws ConcurrentException {

  final Integer result=init.get();

  assertEquals(1,result.intValue(),"Wrong result");

  assertEquals(1,init.initializeCalls,"Wrong number of invocations");

  assertNotNull(init.getFuture(),"No future");

}

Location: BackgroundInitializerTest.java

Content: 

/** 

 * Tries to obtain the executor before start(). It should not have been initialized yet.

 */

@Test public void testGetActiveExecutorBeforeStart(){

  final BackgroundInitializerTestImpl init=new BackgroundInitializerTestImpl();

  assertNull(init.getActiveExecutor(),"Got an executor");

}

Location: BackgroundInitializerTest.java

Content: 

/** 

 * Tests whether an external executor is correctly detected.

 */

@Test public void testGetActiveExecutorExternal() throws InterruptedException, ConcurrentException {

  final ExecutorService exec=Executors.newSingleThreadExecutor();

  try {

    final BackgroundInitializerTestImpl init=new BackgroundInitializerTestImpl(exec);

    init.start();

    assertSame(exec,init.getActiveExecutor(),"Wrong executor");

    checkInitialize(init);

  }

  finally {

    exec.shutdown();

    exec.awaitTermination(1,TimeUnit.SECONDS);

  }

}

Location: BackgroundInitializerTest.java

Content: 

/** 

 * Tests getActiveExecutor() for a temporary executor.

 */

@Test public void testGetActiveExecutorTemp() throws ConcurrentException {

  final BackgroundInitializerTestImpl init=new BackgroundInitializerTestImpl();

  init.start();

  assertNotNull(init.getActiveExecutor(),"No active executor");

  checkInitialize(init);

}

Location: BackgroundInitializerTest.java

Content: 

/** 

 * Tests calling get() before start(). This should cause an exception.

 */

@Test public void testGetBeforeStart(){

  final BackgroundInitializerTestImpl init=new BackgroundInitializerTestImpl();

  assertThrows(IllegalStateException.class,init::get);

}

Location: BackgroundInitializerTest.java

Content: 

/** 

 * Tests the get() method if background processing causes a checked exception.

 */

@Test public void testGetCheckedException(){

  final BackgroundInitializerTestImpl init=new BackgroundInitializerTestImpl();

  final Exception ex=new Exception();

  init.ex=ex;

  init.start();

  final ConcurrentException cex=assertThrows(ConcurrentException.class,init::get);

  assertEquals(ex,cex.getCause(),"Exception not thrown");

}

Location: BackgroundInitializerTest.java

Content: 

/** 

 * Tests the get() method if waiting for the initialization is interrupted.

 * @throws java.lang.InterruptedException because we're making use of Java's concurrent API

 */

@Test public void testGetInterruptedException() throws InterruptedException {

  final ExecutorService exec=Executors.newSingleThreadExecutor();

  final BackgroundInitializerTestImpl init=new BackgroundInitializerTestImpl(exec);

  final CountDownLatch latch1=new CountDownLatch(1);

  init.shouldSleep=true;

  init.start();

  final AtomicReference<InterruptedException> iex=new AtomicReference<>();

  final Thread getThread=new Thread(){

    @Override public void run(){

      try {

        init.get();

      }

 catch (      final ConcurrentException cex) {

        if (cex.getCause() instanceof InterruptedException) {

          iex.set((InterruptedException)cex.getCause());

        }

      }

 finally {

        assertTrue(isInterrupted(),"Thread not interrupted");

        latch1.countDown();

      }

    }

  }

;

  getThread.start();

  getThread.interrupt();

  latch1.await();

  exec.shutdownNow();

  exec.awaitTermination(1,TimeUnit.SECONDS);

  assertNotNull(iex.get(),"No interrupted exception");

}

Location: BackgroundInitializerTest.java

Content: 

/** 

 * Tests the get() method if background processing causes a runtime exception.

 */

@Test public void testGetRuntimeException(){

  final BackgroundInitializerTestImpl init=new BackgroundInitializerTestImpl();

  final RuntimeException rex=new RuntimeException();

  init.ex=rex;

  init.start();

  final Exception ex=assertThrows(Exception.class,init::get);

  assertEquals(rex,ex,"Runtime exception not thrown");

}

Location: BackgroundInitializerTest.java

Content: 

/** 

 * Tests the execution of the background task if a temporary executor has to be created.

 */

@Test public void testInitializeTempExecutor() throws ConcurrentException {

  final BackgroundInitializerTestImpl init=new BackgroundInitializerTestImpl();

  assertTrue(init.start(),"Wrong result of start()");

  checkInitialize(init);

  assertTrue(init.getActiveExecutor().isShutdown(),"Executor not shutdown");

}

Location: BackgroundInitializerTest.java

Content: 

/** 

 * Tests isStarted() after the background task has finished.

 */

@Test public void testIsStartedAfterGet() throws ConcurrentException {

  final BackgroundInitializerTestImpl init=new BackgroundInitializerTestImpl();

  init.start();

  checkInitialize(init);

  assertTrue(init.isStarted(),"Not started");

}

Location: BackgroundInitializerTest.java

Content: 

/** 

 * Tests isStarted() before start() was called.

 */

@Test public void testIsStartedFalse(){

  final BackgroundInitializerTestImpl init=new BackgroundInitializerTestImpl();

  assertFalse(init.isStarted(),"Already started");

}

Location: BackgroundInitializerTest.java

Content: 

/** 

 * Tests isStarted() after start().

 */

@Test public void testIsStartedTrue(){

  final BackgroundInitializerTestImpl init=new BackgroundInitializerTestImpl();

  init.start();

  assertTrue(init.isStarted(),"Not started");

}

Location: BackgroundInitializerTest.java

Content: 

/** 

 * Tests whether an external executor can be set using the setExternalExecutor() method.

 */

@Test public void testSetExternalExecutor() throws ConcurrentException {

  final ExecutorService exec=Executors.newCachedThreadPool();

  try {

    final BackgroundInitializerTestImpl init=new BackgroundInitializerTestImpl();

    init.setExternalExecutor(exec);

    assertEquals(exec,init.getExternalExecutor(),"Wrong executor service");

    assertTrue(init.start(),"Wrong result of start()");

    assertSame(exec,init.getActiveExecutor(),"Wrong active executor");

    checkInitialize(init);

    assertFalse(exec.isShutdown(),"Executor was shutdown");

  }

  finally {

    exec.shutdown();

  }

}

Location: BackgroundInitializerTest.java

Content: 

/** 

 * Tests that setting an executor after start() causes an exception.

 * @throws org.apache.commons.lang3.concurrent.ConcurrentException because the test implementation may throw it

 */

@Test public void testSetExternalExecutorAfterStart() throws ConcurrentException, InterruptedException {

  final BackgroundInitializerTestImpl init=new BackgroundInitializerTestImpl();

  init.start();

  final ExecutorService exec=Executors.newSingleThreadExecutor();

  try {

    assertThrows(IllegalStateException.class,() -> init.setExternalExecutor(exec));

    init.get();

  }

  finally {

    exec.shutdown();

    exec.awaitTermination(1,TimeUnit.SECONDS);

  }

}

Location: BackgroundInitializerTest.java

Content: 

/** 

 * Tests invoking start() multiple times. Only the first invocation should have an effect.

 */

@Test public void testStartMultipleTimes() throws ConcurrentException {

  final BackgroundInitializerTestImpl init=new BackgroundInitializerTestImpl();

  assertTrue(init.start(),"Wrong result for start()");

  for (int i=0; i < 10; i++) {

    assertFalse(init.start(),"Could start again");

  }

  checkInitialize(init);

}

