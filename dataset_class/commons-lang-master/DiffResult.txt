Location: DiffResult.java

Content: 

/** 

 * <p> Creates a  {@link DiffResult} containing the differences between twoobjects. </p>

 * @param lhs the left hand object

 * @param rhs the right hand object

 * @param diffList the list of differences, may be empty

 * @param style the style to use for the  {@link #toString()} method. May be{@code null}, in which case {@link ToStringStyle#DEFAULT_STYLE} is used

 * @throws NullPointerException if {@code lhs},  {@code rhs} or {@code diffs} is {@code null}

 */

DiffResult(final T lhs,final T rhs,final List<Diff<?>> diffList,final ToStringStyle style){

  Validate.notNull(lhs,"lhs");

  Validate.notNull(rhs,"rhs");

  Validate.notNull(diffList,"diffList");

  this.diffList=diffList;

  this.lhs=lhs;

  this.rhs=rhs;

  if (style == null) {

    this.style=ToStringStyle.DEFAULT_STYLE;

  }

 else {

    this.style=style;

  }

}

Location: DiffResult.java

Content: 

/** 

 * <p> Returns an unmodifiable list of  {@code Diff}s. The list may be empty if there were no differences between the objects. </p>

 * @return an unmodifiable list of {@code Diff}s

 */

public List<Diff<?>> getDiffs(){

  return Collections.unmodifiableList(diffList);

}

Location: DiffResult.java

Content: 

/** 

 * <p> Returns the number of differences between the two objects. </p>

 * @return the number of differences

 */

public int getNumberOfDiffs(){

  return diffList.size();

}

Location: DiffResult.java

Content: 

/** 

 * <p> Returns the style used by the  {@link #toString()} method.</p>

 * @return the style

 */

public ToStringStyle getToStringStyle(){

  return style;

}

Location: DiffResult.java

Content: 

/** 

 * <p> Returns an iterator over the  {@code Diff} objects contained in this list.</p>

 * @return the iterator

 */

@Override public Iterator<Diff<?>> iterator(){

  return diffList.iterator();

}

Location: DiffResult.java

Content: 

/** 

 * <p> Builds a  {@code String} description of the differences contained withinthis  {@code DiffResult}, using the supplied  {@code ToStringStyle}. </p>

 * @param style the  {@code ToStringStyle} to use when outputting the objects

 * @return a {@code String} description of the differences.

 */

public String toString(final ToStringStyle style){

  if (diffList.isEmpty()) {

    return OBJECTS_SAME_STRING;

  }

  final ToStringBuilder lhsBuilder=new ToStringBuilder(lhs,style);

  final ToStringBuilder rhsBuilder=new ToStringBuilder(rhs,style);

  for (  final Diff<?> diff : diffList) {

    lhsBuilder.append(diff.getFieldName(),diff.getLeft());

    rhsBuilder.append(diff.getFieldName(),diff.getRight());

  }

  return String.format("%s %s %s",lhsBuilder.build(),DIFFERS_STRING,rhsBuilder.build());

}

