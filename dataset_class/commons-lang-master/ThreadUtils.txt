Location: ThreadUtils.java

Content: 

/** 

 * Finds the active thread with the specified id.

 * @param threadId The thread id

 * @return The thread with the specified id or {@code null} if no such thread exists

 * @throws IllegalArgumentException if the specified id is zero or negative

 * @throws SecurityException if the current thread cannot access the system thread group

 * @throws SecurityException  if the current thread cannot modifythread groups from this thread's thread group up to the system thread group

 */

public static Thread findThreadById(final long threadId){

  final Collection<Thread> result=findThreads(new ThreadIdPredicate(threadId));

  return result.isEmpty() ? null : result.iterator().next();

}

Location: ThreadUtils.java

Content: 

/** 

 * Finds the active thread with the specified id if it belongs to a thread group with the specified group name.

 * @param threadId The thread id

 * @param threadGroupName The thread group name

 * @return The threads which belongs to a thread group with the specified group name and the thread's id match the specified id.{@code null} is returned if no such thread exists

 * @throws IllegalArgumentException if the specified id is zero or negative or the group name is null

 * @throws SecurityException if the current thread cannot access the system thread group

 * @throws SecurityException  if the current thread cannot modifythread groups from this thread's thread group up to the system thread group

 */

public static Thread findThreadById(final long threadId,final String threadGroupName){

  Validate.notNull(threadGroupName,"threadGroupName");

  final Thread thread=findThreadById(threadId);

  if (thread != null && thread.getThreadGroup() != null && thread.getThreadGroup().getName().equals(threadGroupName)) {

    return thread;

  }

  return null;

}

Location: ThreadUtils.java

Content: 

/** 

 * Finds the active thread with the specified id if it belongs to the specified thread group.

 * @param threadId The thread id

 * @param threadGroup The thread group

 * @return The thread which belongs to a specified thread group and the thread's id match the specified id.{@code null} is returned if no such thread exists

 * @throws IllegalArgumentException if the specified id is zero or negative or the group is null

 * @throws SecurityException if the current thread cannot access the system thread group

 * @throws SecurityException  if the current thread cannot modifythread groups from this thread's thread group up to the system thread group

 */

public static Thread findThreadById(final long threadId,final ThreadGroup threadGroup){

  Validate.notNull(threadGroup,"threadGroup");

  final Thread thread=findThreadById(threadId);

  if (thread != null && threadGroup.equals(thread.getThreadGroup())) {

    return thread;

  }

  return null;

}

Location: ThreadUtils.java

Content: 

/** 

 * Finds active thread groups with the specified group name.

 * @param threadGroupName The thread group name

 * @return the thread groups with the specified group name or an empty collection if no such thread group exists. The collection returned is always unmodifiable.

 * @throws IllegalArgumentException if group name is null

 * @throws SecurityException if the current thread cannot access the system thread group

 * @throws SecurityException  if the current thread cannot modifythread groups from this thread's thread group up to the system thread group

 */

public static Collection<ThreadGroup> findThreadGroupsByName(final String threadGroupName){

  return findThreadGroups(new NamePredicate(threadGroupName));

}

Location: ThreadUtils.java

Content: 

/** 

 * Select all active threadgroups which match the given predicate and which is a subgroup of the given thread group (or one of its subgroups).

 * @param group the thread group

 * @param recurse if {@code true} then evaluate the predicate recursively on all threadgroups in all subgroups of the given group

 * @param predicate the predicate

 * @return An unmodifiable {@code Collection} of active threadgroups which match the given predicate and which is a subgroup of the given thread group

 * @throws IllegalArgumentException if the given group or predicate is null

 * @throws SecurityException  if the current thread cannot modifythread groups from this thread's thread group up to the system thread group

 */

public static Collection<ThreadGroup> findThreadGroups(final ThreadGroup group,final boolean recurse,final ThreadGroupPredicate predicate){

  Validate.notNull(group,"group");

  Validate.notNull(predicate,"predicate");

  int count=group.activeGroupCount();

  ThreadGroup[] threadGroups;

  do {

    threadGroups=new ThreadGroup[count + (count / 2) + 1];

    count=group.enumerate(threadGroups,recurse);

  }

 while (count >= threadGroups.length);

  final List<ThreadGroup> result=new ArrayList<>(count);

  for (int i=0; i < count; ++i) {

    if (predicate.test(threadGroups[i])) {

      result.add(threadGroups[i]);

    }

  }

  return Collections.unmodifiableCollection(result);

}

Location: ThreadUtils.java

Content: 

/** 

 * Select all active threadgroups which match the given predicate.

 * @param predicate the predicate

 * @return An unmodifiable {@code Collection} of active threadgroups matching the given predicate

 * @throws IllegalArgumentException if the predicate is null

 * @throws SecurityException if the current thread cannot access the system thread group

 * @throws SecurityException  if the current thread cannot modifythread groups from this thread's thread group up to the system thread group

 */

public static Collection<ThreadGroup> findThreadGroups(final ThreadGroupPredicate predicate){

  return findThreadGroups(getSystemThreadGroup(),true,predicate);

}

Location: ThreadUtils.java

Content: 

/** 

 * Finds active threads with the specified name.

 * @param threadName The thread name

 * @return The threads with the specified name or an empty collection if no such thread exists. The collection returned is always unmodifiable.

 * @throws IllegalArgumentException if the specified name is null

 * @throws SecurityException if the current thread cannot access the system thread group

 * @throws SecurityException  if the current thread cannot modifythread groups from this thread's thread group up to the system thread group

 */

public static Collection<Thread> findThreadsByName(final String threadName){

  return findThreads(new NamePredicate(threadName));

}

Location: ThreadUtils.java

Content: 

/** 

 * Finds active threads with the specified name if they belong to a thread group with the specified group name.

 * @param threadName The thread name

 * @param threadGroupName The thread group name

 * @return The threads which belongs to a thread group with the specified group name and the thread's name match the specified name,An empty collection is returned if no such thread exists. The collection returned is always unmodifiable.

 * @throws IllegalArgumentException if the specified thread name or group name is null

 * @throws SecurityException if the current thread cannot access the system thread group

 * @throws SecurityException  if the current thread cannot modifythread groups from this thread's thread group up to the system thread group

 */

public static Collection<Thread> findThreadsByName(final String threadName,final String threadGroupName){

  Validate.notNull(threadName,"threadName");

  Validate.notNull(threadGroupName,"threadGroupName");

  final Collection<ThreadGroup> threadGroups=findThreadGroups(new NamePredicate(threadGroupName));

  if (threadGroups.isEmpty()) {

    return Collections.emptyList();

  }

  final Collection<Thread> result=new ArrayList<>();

  final NamePredicate threadNamePredicate=new NamePredicate(threadName);

  for (  final ThreadGroup group : threadGroups) {

    result.addAll(findThreads(group,false,threadNamePredicate));

  }

  return Collections.unmodifiableCollection(result);

}

Location: ThreadUtils.java

Content: 

/** 

 * Finds active threads with the specified name if they belong to a specified thread group.

 * @param threadName The thread name

 * @param threadGroup The thread group

 * @return The threads which belongs to a thread group and the thread's name match the specified name,An empty collection is returned if no such thread exists. The collection returned is always unmodifiable.

 * @throws IllegalArgumentException if the specified thread name or group is null

 * @throws SecurityException if the current thread cannot access the system thread group

 * @throws SecurityException  if the current thread cannot modifythread groups from this thread's thread group up to the system thread group

 */

public static Collection<Thread> findThreadsByName(final String threadName,final ThreadGroup threadGroup){

  return findThreads(threadGroup,false,new NamePredicate(threadName));

}

Location: ThreadUtils.java

Content: 

/** 

 * Select all active threads which match the given predicate and which belongs to the given thread group (or one of its subgroups).

 * @param group the thread group

 * @param recurse if {@code true} then evaluate the predicate recursively on all threads in all subgroups of the given group

 * @param predicate the predicate

 * @return An unmodifiable {@code Collection} of active threads which match the given predicate and which belongs to the given thread group

 * @throws IllegalArgumentException if the given group or predicate is null

 * @throws SecurityException  if the current thread cannot modifythread groups from this thread's thread group up to the system thread group

 */

public static Collection<Thread> findThreads(final ThreadGroup group,final boolean recurse,final ThreadPredicate predicate){

  Validate.notNull(group,"The group must not be null");

  Validate.notNull(predicate,"The predicate must not be null");

  int count=group.activeCount();

  Thread[] threads;

  do {

    threads=new Thread[count + (count / 2) + 1];

    count=group.enumerate(threads,recurse);

  }

 while (count >= threads.length);

  final List<Thread> result=new ArrayList<>(count);

  for (int i=0; i < count; ++i) {

    if (predicate.test(threads[i])) {

      result.add(threads[i]);

    }

  }

  return Collections.unmodifiableCollection(result);

}

Location: ThreadUtils.java

Content: 

/** 

 * Select all active threads which match the given predicate.

 * @param predicate the predicate

 * @return An unmodifiable {@code Collection} of active threads matching the given predicate

 * @throws IllegalArgumentException if the predicate is null

 * @throws SecurityException if the current thread cannot access the system thread group

 * @throws SecurityException  if the current thread cannot modifythread groups from this thread's thread group up to the system thread group

 */

public static Collection<Thread> findThreads(final ThreadPredicate predicate){

  return findThreads(getSystemThreadGroup(),true,predicate);

}

Location: ThreadUtils.java

Content: 

/** 

 * Gets all active thread groups excluding the system thread group (A thread group is active if it has been not destroyed).

 * @return all thread groups excluding the system thread group. The collection returned is always unmodifiable.

 * @throws SecurityException if the current thread cannot access the system thread group

 * @throws SecurityException  if the current thread cannot modifythread groups from this thread's thread group up to the system thread group

 */

public static Collection<ThreadGroup> getAllThreadGroups(){

  return findThreadGroups(ALWAYS_TRUE_PREDICATE);

}

Location: ThreadUtils.java

Content: 

/** 

 * Gets all active threads (A thread is active if it has been started and has not yet died).

 * @return all active threads. The collection returned is always unmodifiable.

 * @throws SecurityException if the current thread cannot access the system thread group

 * @throws SecurityException  if the current thread cannot modifythread groups from this thread's thread group up to the system thread group

 */

public static Collection<Thread> getAllThreads(){

  return findThreads(ALWAYS_TRUE_PREDICATE);

}

Location: ThreadUtils.java

Content: 

/** 

 * Gets the system thread group (sometimes also referred as "root thread group").

 * @return the system thread group

 * @throws SecurityException  if the current thread cannot modifythread groups from this thread's thread group up to the system thread group

 */

public static ThreadGroup getSystemThreadGroup(){

  ThreadGroup threadGroup=Thread.currentThread().getThreadGroup();

  while (threadGroup.getParent() != null) {

    threadGroup=threadGroup.getParent();

  }

  return threadGroup;

}

Location: ThreadUtils.java

Content: 

/** 

 * Waits for the given thread to die for the given duration. Implemented using  {@link Thread#join(long,int)}.

 * @param thread The thread to join.

 * @param duration How long to wait.

 * @throws InterruptedException if any thread has interrupted the current thread.

 * @see Thread#join(long,int)

 * @since 3.12.0

 */

public static void join(final Thread thread,final Duration duration) throws InterruptedException {

  DurationUtils.accept(thread::join,duration);

}

Location: ThreadUtils.java

Content: 

/** 

 * Sleeps for the given amount of milliseconds while ignoring  {@link InterruptedException}. <p> The sleep duration may be shorter than  {@code millis} if we catch a {@link InterruptedException}. </p>

 * @param millis the length of time to sleep in milliseconds

 * @since 3.13.0

 */

public static void sleepQuietly(final long millis){

  try {

    sleep(Duration.ofMillis(millis));

  }

 catch (  final InterruptedException e) {

  }

}

Location: ThreadUtils.java

Content: 

/** 

 * Sleeps the current thread for the given duration. Implemented using  {@link Thread#sleep(long,int)}.

 * @param duration How long to sleep.

 * @throws InterruptedException if any thread has interrupted the current thread.

 * @see Thread#sleep(long,int)

 * @since 3.12.0

 */

public static void sleep(final Duration duration) throws InterruptedException {

  DurationUtils.accept(Thread::sleep,duration);

}

Location: ThreadUtils.java

Content: 

/** 

 * <p> ThreadUtils instances should NOT be constructed in standard programming. Instead, the class should be used as {@code ThreadUtils.getAllThreads()}</p> <p> This constructor is public to permit tools that require a JavaBean instance to operate. </p>

 */

public ThreadUtils(){

}

