Location: ThresholdingOutputStream.java

Content: 

/** 

 * Checks to see if writing the specified number of bytes would cause the configured threshold to be exceeded. If so, triggers an event to allow a concrete implementation to take action on this.

 * @param count The number of bytes about to be written to the underlying output stream.

 * @throws IOException if an error occurs.

 */

protected void checkThreshold(final int count) throws IOException {

  if (!thresholdExceeded && written + count > threshold) {

    thresholdExceeded=true;

    thresholdReached();

  }

}

Location: ThresholdingOutputStream.java

Content: 

/** 

 * Returns the number of bytes that have been written to this output stream.

 * @return The number of bytes written.

 */

public long getByteCount(){

  return written;

}

Location: ThresholdingOutputStream.java

Content: 

/** 

 * Returns the underlying output stream, to which the corresponding  {@code OutputStream} methods in this class willultimately delegate.

 * @return The underlying output stream.

 * @throws IOException if an error occurs.

 */

protected OutputStream getStream() throws IOException {

  return outputStreamGetter.apply(this);

}

Location: ThresholdingOutputStream.java

Content: 

/** 

 * Returns the threshold, in bytes, at which an event will be triggered.

 * @return The threshold point, in bytes.

 */

public int getThreshold(){

  return threshold;

}

Location: ThresholdingOutputStream.java

Content: 

/** 

 * Determines whether or not the configured threshold has been exceeded for this output stream.

 * @return {@code true} if the threshold has been reached; {@code false} otherwise.

 */

public boolean isThresholdExceeded(){

  return written > threshold;

}

Location: ThresholdingOutputStream.java

Content: 

/** 

 * Resets the byteCount to zero. You can call this from  {@link #thresholdReached()} if you want the event to betriggered again.

 */

protected void resetByteCount(){

  this.thresholdExceeded=false;

  this.written=0;

}

Location: ThresholdingOutputStream.java

Content: 

/** 

 * Sets the byteCount to count. Useful for re-opening an output stream that has previously been written to.

 * @param count The number of bytes that have already been written to the output stream

 * @since 2.5

 */

protected void setByteCount(final long count){

  this.written=count;

}

Location: ThresholdingOutputStream.java

Content: 

/** 

 * Constructs an instance of this class which will trigger an event at the specified threshold.

 * @param threshold The number of bytes at which to trigger an event.

 */

public ThresholdingOutputStream(final int threshold){

  this(threshold,IOConsumer.noop(),NOOP_OS_GETTER);

}

Location: ThresholdingOutputStream.java

Content: 

/** 

 * Constructs an instance of this class which will trigger an event at the specified threshold.

 * @param threshold The number of bytes at which to trigger an event.

 * @param thresholdConsumer Accepts reaching the threshold.

 * @param outputStreamGetter Gets the output stream.

 * @since 2.9.0

 */

public ThresholdingOutputStream(final int threshold,final IOConsumer<ThresholdingOutputStream> thresholdConsumer,final IOFunction<ThresholdingOutputStream,OutputStream> outputStreamGetter){

  this.threshold=threshold;

  this.thresholdConsumer=thresholdConsumer == null ? IOConsumer.noop() : thresholdConsumer;

  this.outputStreamGetter=outputStreamGetter == null ? NOOP_OS_GETTER : outputStreamGetter;

}

Location: ThresholdingOutputStream.java

Content: 

/** 

 * Indicates that the configured threshold has been reached, and that a subclass should take whatever action necessary on this event. This may include changing the underlying output stream.

 * @throws IOException if an error occurs.

 */

protected void thresholdReached() throws IOException {

  thresholdConsumer.accept(this);

}

Location: ThresholdingOutputStream.java

Content: 

/** 

 * Writes  {@code b.length} bytes from the specified byte array to this output stream.

 * @param b The array of bytes to be written.

 * @throws IOException if an error occurs.

 */

@SuppressWarnings("resource") @Override public void write(final byte[] b) throws IOException {

  checkThreshold(b.length);

  getStream().write(b);

  written+=b.length;

}

Location: ThresholdingOutputStream.java

Content: 

/** 

 * Writes  {@code len} bytes from the specified byte array starting at offset {@code off} to this output stream.

 * @param b The byte array from which the data will be written.

 * @param off The start offset in the byte array.

 * @param len The number of bytes to write.

 * @throws IOException if an error occurs.

 */

@SuppressWarnings("resource") @Override public void write(final byte[] b,final int off,final int len) throws IOException {

  checkThreshold(len);

  getStream().write(b,off,len);

  written+=len;

}

