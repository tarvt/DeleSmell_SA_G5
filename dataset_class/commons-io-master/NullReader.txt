Location: NullReader.java

Content: 

/** 

 * Handles End of File.

 * @return {@code -1} if {@code throwEofException} isset to  {@code false}

 * @throws EOFException if {@code throwEofException} is setto  {@code true}.

 */

private int doEndOfFile() throws EOFException {

  eof=true;

  if (throwEofException) {

    throw new EOFException();

  }

  return EOF;

}

Location: NullReader.java

Content: 

/** 

 * Returns the current position.

 * @return the current position.

 */

public long getPosition(){

  return position;

}

Location: NullReader.java

Content: 

/** 

 * Returns the size this  {@link Reader} emulates.

 * @return The size of the reader to emulate.

 */

public long getSize(){

  return size;

}

Location: NullReader.java

Content: 

/** 

 * Indicates whether <i>mark</i> is supported.

 * @return Whether <i>mark</i> is supported or not.

 */

@Override public boolean markSupported(){

  return markSupported;

}

Location: NullReader.java

Content: 

/** 

 * Marks the current position.

 * @param readlimit The number of characters before this marked positionis invalid.

 * @throws UnsupportedOperationException if mark is not supported.

 */

@Override public synchronized void mark(final int readlimit){

  if (!markSupported) {

    throw UnsupportedOperationExceptions.mark();

  }

  mark=position;

  this.readlimit=readlimit;

}

Location: NullReader.java

Content: 

/** 

 * Creates a  {@link Reader} that emulates a size 0 readerwhich supports marking and does not throw EOFException.

 * @since 2.7

 */

public NullReader(){

  this(0,true,false);

}

Location: NullReader.java

Content: 

/** 

 * Creates a  {@link Reader} that emulates a specified sizewhich supports marking and does not throw EOFException.

 * @param size The size of the reader to emulate.

 */

public NullReader(final long size){

  this(size,true,false);

}

Location: NullReader.java

Content: 

/** 

 * Creates a  {@link Reader} that emulates a specifiedsize with option settings.

 * @param size The size of the reader to emulate.

 * @param markSupported Whether this instance will supportthe  {@code mark()} functionality.

 * @param throwEofException Whether this implementationwill throw an  {@link EOFException} or return -1 when theend of file is reached.

 */

public NullReader(final long size,final boolean markSupported,final boolean throwEofException){

  this.size=size;

  this.markSupported=markSupported;

  this.throwEofException=throwEofException;

}

Location: NullReader.java

Content: 

/** 

 * Returns a character value for the   {@code read()} method.<p> This implementation returns zero. </p>

 * @return This implementation always returns zero.

 */

protected int processChar(){

  return 0;

}

Location: NullReader.java

Content: 

/** 

 * Process the characters for the  {@code read(char[], offset, length)}method. <p> This implementation leaves the character array unchanged. </p>

 * @param chars The character array

 * @param offset The offset to start at.

 * @param length The number of characters.

 */

protected void processChars(final char[] chars,final int offset,final int length){

}

Location: NullReader.java

Content: 

/** 

 * Reads some characters into the specified array.

 * @param chars The character array to read into

 * @return The number of characters read or {@code -1}if the end of file has been reached and {@code throwEofException} is set to {@code false}.

 * @throws EOFException if the end of file is reached and{@code throwEofException} is set to {@code true}.

 * @throws IOException if trying to read past the end of file.

 */

@Override public int read(final char[] chars) throws IOException {

  return read(chars,0,chars.length);

}

