Location: TaggedWriterTest.java

Content: 

@Test public void testBrokenWriter(){

  final IOException exception=new IOException("test exception");

  final TaggedWriter writer=new TaggedWriter(new BrokenWriter(exception));

  try {

    writer.write(new char[]{'x'},0,1);

    fail("Expected exception not thrown.");

  }

 catch (  final IOException e) {

    assertTrue(writer.isCauseOf(e));

    try {

      writer.throwIfCauseOf(e);

      fail("Expected exception not thrown.");

    }

 catch (    final IOException e2) {

      assertEquals(exception,e2);

    }

  }

  try {

    writer.flush();

    fail("Expected exception not thrown.");

  }

 catch (  final IOException e) {

    assertTrue(writer.isCauseOf(e));

    try {

      writer.throwIfCauseOf(e);

      fail("Expected exception not thrown.");

    }

 catch (    final IOException e2) {

      assertEquals(exception,e2);

    }

  }

  try {

    writer.close();

    fail("Expected exception not thrown.");

  }

 catch (  final IOException e) {

    assertTrue(writer.isCauseOf(e));

    try {

      writer.throwIfCauseOf(e);

      fail("Expected exception not thrown.");

    }

 catch (    final IOException e2) {

      assertEquals(exception,e2);

    }

  }

}

Location: TaggedWriterTest.java

Content: 

@Test public void testNormalWriter(){

  try (final StringBuilderWriter buffer=new StringBuilderWriter()){

    try (final Writer writer=new TaggedWriter(buffer)){

      writer.write('a');

      writer.write(new char[]{'b'});

      writer.write(new char[]{'c'},0,1);

      writer.flush();

    }

     assertEquals(3,buffer.getBuilder().length());

    assertEquals('a',buffer.getBuilder().charAt(0));

    assertEquals('b',buffer.getBuilder().charAt(1));

    assertEquals('c',buffer.getBuilder().charAt(2));

  }

 catch (  final IOException e) {

    fail("Unexpected exception thrown");

  }

}

