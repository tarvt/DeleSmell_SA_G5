Location: UnsynchronizedByteArrayInputStream.java

Content: 

/** 

 * Creates a new byte array input stream.

 * @param data the buffer

 */

public UnsynchronizedByteArrayInputStream(final byte[] data){

  this.data=Objects.requireNonNull(data,"data");

  this.offset=0;

  this.eod=data.length;

  this.markedOffset=this.offset;

}

Location: UnsynchronizedByteArrayInputStream.java

Content: 

/** 

 * Creates a new byte array input stream.

 * @param data the buffer

 * @param offset the offset into the buffer

 * @throws IllegalArgumentException if the offset is less than zero

 */

public UnsynchronizedByteArrayInputStream(final byte[] data,final int offset){

  Objects.requireNonNull(data,"data");

  if (offset < 0) {

    throw new IllegalArgumentException("offset cannot be negative");

  }

  this.data=data;

  this.offset=min(offset,data.length > 0 ? data.length : offset);

  this.eod=data.length;

  this.markedOffset=this.offset;

}

Location: UnsynchronizedByteArrayInputStream.java

Content: 

/** 

 * Creates a new byte array input stream.

 * @param data the buffer

 * @param offset the offset into the buffer

 * @param length the length of the buffer

 * @throws IllegalArgumentException if the offset or length less than zero

 */

public UnsynchronizedByteArrayInputStream(final byte[] data,final int offset,final int length){

  if (offset < 0) {

    throw new IllegalArgumentException("offset cannot be negative");

  }

  if (length < 0) {

    throw new IllegalArgumentException("length cannot be negative");

  }

  this.data=Objects.requireNonNull(data,"data");

  this.offset=min(offset,data.length > 0 ? data.length : offset);

  this.eod=min(this.offset + length,data.length);

  this.markedOffset=this.offset;

}

