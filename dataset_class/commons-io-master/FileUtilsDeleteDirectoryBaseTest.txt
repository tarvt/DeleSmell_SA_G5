Location: FileUtilsDeleteDirectoryBaseTest.java

Content: 

@Test public void testDeleteDirWithASymlinkDir() throws Exception {

  final File realOuter=new File(top,"realouter");

  assertTrue(realOuter.mkdirs());

  final File realInner=new File(realOuter,"realinner");

  assertTrue(realInner.mkdirs());

  FileUtils.touch(new File(realInner,"file1"));

  assertEquals(1,realInner.list().length);

  final File randomDirectory=new File(top,"randomDir");

  assertTrue(randomDirectory.mkdirs());

  FileUtils.touch(new File(randomDirectory,"randomfile"));

  assertEquals(1,randomDirectory.list().length);

  final File symlinkDirectory=new File(realOuter,"fakeinner");

  assertTrue(setupSymlink(randomDirectory,symlinkDirectory));

  assertEquals(1,symlinkDirectory.list().length);

  FileUtils.deleteDirectory(realOuter);

  assertEquals(1,top.list().length);

  assertEquals(1,randomDirectory.list().length,"Contents of sym link should not have been removed");

}

Location: FileUtilsDeleteDirectoryBaseTest.java

Content: 

@Test public void testDeleteDirWithASymlinkDir2() throws Exception {

  final File realOuter=new File(top,"realouter");

  assertTrue(realOuter.mkdirs());

  final File realInner=new File(realOuter,"realinner");

  assertTrue(realInner.mkdirs());

  FileUtils.touch(new File(realInner,"file1"));

  assertEquals(1,realInner.list().length);

  final File randomDirectory=new File(top,"randomDir");

  assertTrue(randomDirectory.mkdirs());

  FileUtils.touch(new File(randomDirectory,"randomfile"));

  assertEquals(1,randomDirectory.list().length);

  final File symlinkDirectory=new File(realOuter,"fakeinner");

  Files.createSymbolicLink(symlinkDirectory.toPath(),randomDirectory.toPath());

  assertEquals(1,symlinkDirectory.list().length);

  FileUtils.deleteDirectory(realOuter);

  assertEquals(1,top.list().length);

  assertEquals(1,randomDirectory.list().length,"Contents of sym link should not have been removed");

}

Location: FileUtilsDeleteDirectoryBaseTest.java

Content: 

@Test public void testDeleteDirWithSymlinkFile() throws Exception {

  final File realOuter=new File(top,"realouter");

  assertTrue(realOuter.mkdirs());

  final File realInner=new File(realOuter,"realinner");

  assertTrue(realInner.mkdirs());

  final File realFile=new File(realInner,"file1");

  FileUtils.touch(realFile);

  assertEquals(1,realInner.list().length);

  final File randomFile=new File(top,"randomfile");

  FileUtils.touch(randomFile);

  final File symlinkFile=new File(realInner,"fakeinner");

  assertTrue(setupSymlink(randomFile,symlinkFile));

  assertEquals(2,realInner.list().length);

  assertEquals(2,top.list().length);

  FileUtils.deleteDirectory(realOuter);

  assertEquals(1,top.list().length);

  assertTrue(randomFile.exists());

  assertFalse(symlinkFile.exists());

}

Location: FileUtilsDeleteDirectoryBaseTest.java

Content: 

@Test public void testDeleteInvalidLinks() throws Exception {

  final File aFile=new File(top,"realParentDirA");

  assertTrue(aFile.mkdir());

  final File bFile=new File(aFile,"realChildDirB");

  assertTrue(bFile.mkdir());

  final File cFile=new File(top,"realParentDirC");

  assertTrue(cFile.mkdir());

  final File dFile=new File(cFile,"realChildDirD");

  assertTrue(dFile.mkdir());

  final File linkToC=new File(bFile,"linkToC");

  Files.createSymbolicLink(linkToC.toPath(),cFile.toPath());

  final File linkToB=new File(dFile,"linkToB");

  Files.createSymbolicLink(linkToB.toPath(),bFile.toPath());

  FileUtils.deleteDirectory(aFile);

  FileUtils.deleteDirectory(cFile);

  assertEquals(0,top.list().length);

}

Location: FileUtilsDeleteDirectoryBaseTest.java

Content: 

@Test public void testDeleteParentSymlink() throws Exception {

  final File realParent=new File(top,"realparent");

  assertTrue(realParent.mkdirs());

  final File realInner=new File(realParent,"realinner");

  assertTrue(realInner.mkdirs());

  FileUtils.touch(new File(realInner,"file1"));

  assertEquals(1,realInner.list().length);

  final File randomDirectory=new File(top,"randomDir");

  assertTrue(randomDirectory.mkdirs());

  FileUtils.touch(new File(randomDirectory,"randomfile"));

  assertEquals(1,randomDirectory.list().length);

  final File symlinkDirectory=new File(realParent,"fakeinner");

  assertTrue(setupSymlink(randomDirectory,symlinkDirectory));

  assertEquals(1,symlinkDirectory.list().length);

  final File symlinkParentDirectory=new File(top,"fakeouter");

  assertTrue(setupSymlink(realParent,symlinkParentDirectory));

  FileUtils.deleteDirectory(symlinkParentDirectory);

  assertEquals(2,top.list().length);

  assertEquals(1,randomDirectory.list().length,"Contents of sym link should not have been removed");

}

Location: FileUtilsDeleteDirectoryBaseTest.java

Content: 

@Test public void testDeleteParentSymlink2() throws Exception {

  final File realParent=new File(top,"realparent");

  assertTrue(realParent.mkdirs());

  final File realInner=new File(realParent,"realinner");

  assertTrue(realInner.mkdirs());

  FileUtils.touch(new File(realInner,"file1"));

  assertEquals(1,realInner.list().length);

  final File randomDirectory=new File(top,"randomDir");

  assertTrue(randomDirectory.mkdirs());

  FileUtils.touch(new File(randomDirectory,"randomfile"));

  assertEquals(1,randomDirectory.list().length);

  final File symlinkDirectory=new File(realParent,"fakeinner");

  Files.createSymbolicLink(symlinkDirectory.toPath(),randomDirectory.toPath());

  assertEquals(1,symlinkDirectory.list().length);

  final File symlinkParentDirectory=new File(top,"fakeouter");

  Files.createSymbolicLink(symlinkParentDirectory.toPath(),realParent.toPath());

  FileUtils.deleteDirectory(symlinkParentDirectory);

  assertEquals(2,top.list().length);

  assertEquals(1,randomDirectory.list().length,"Contents of sym link should not have been removed");

}

