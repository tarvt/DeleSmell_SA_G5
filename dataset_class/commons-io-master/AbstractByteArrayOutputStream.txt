Location: AbstractByteArrayOutputStream.java

Content: 

/** 

 * Makes a new buffer available either by allocating a new one or re-cycling an existing one.

 * @param newcount  the size of the buffer if one is created

 */

protected void needNewBuffer(final int newcount){

  if (currentBufferIndex < buffers.size() - 1) {

    filledBufferSum+=currentBuffer.length;

    currentBufferIndex++;

    currentBuffer=buffers.get(currentBufferIndex);

  }

 else {

    final int newBufferSize;

    if (currentBuffer == null) {

      newBufferSize=newcount;

      filledBufferSum=0;

    }

 else {

      newBufferSize=Math.max(currentBuffer.length << 1,newcount - filledBufferSum);

      filledBufferSum+=currentBuffer.length;

    }

    currentBufferIndex++;

    currentBuffer=IOUtils.byteArray(newBufferSize);

    buffers.add(currentBuffer);

  }

}

Location: AbstractByteArrayOutputStream.java

Content: 

/** 

 * @see java.io.ByteArrayOutputStream#reset()

 */

protected void resetImpl(){

  count=0;

  filledBufferSum=0;

  currentBufferIndex=0;

  if (reuseBuffers) {

    currentBuffer=buffers.get(currentBufferIndex);

  }

 else {

    currentBuffer=null;

    final int size=buffers.get(0).length;

    buffers.clear();

    needNewBuffer(size);

    reuseBuffers=true;

  }

}

Location: AbstractByteArrayOutputStream.java

Content: 

/** 

 * Gets the current contents of this byte stream as a byte array. The result is independent of this stream.

 * @return the current contents of this output stream, as a byte array

 * @see java.io.ByteArrayOutputStream#toByteArray()

 */

protected byte[] toByteArrayImpl(){

  int remaining=count;

  if (remaining == 0) {

    return IOUtils.EMPTY_BYTE_ARRAY;

  }

  final byte[] newbuf=IOUtils.byteArray(remaining);

  int pos=0;

  for (  final byte[] buf : buffers) {

    final int c=Math.min(buf.length,remaining);

    System.arraycopy(buf,0,newbuf,pos,c);

    pos+=c;

    remaining-=c;

    if (remaining == 0) {

      break;

    }

  }

  return newbuf;

}

Location: AbstractByteArrayOutputStream.java

Content: 

/** 

 * Gets the current contents of this byte stream as a Input Stream. The returned stream is backed by buffers of  {@code this} stream,avoiding memory allocation and copy, thus saving space and time.<br>

 * @param < T > the type of the InputStream which makes upthe  {@link SequenceInputStream}.

 * @param isConstructor A constructor for an InputStream which makesup the  {@link SequenceInputStream}.

 * @return the current contents of this output stream.

 * @see java.io.ByteArrayOutputStream#toByteArray()

 * @see #reset()

 * @since 2.7

 */

@SuppressWarnings("resource") protected <T extends InputStream>InputStream toInputStream(final InputStreamConstructor<T> isConstructor){

  int remaining=count;

  if (remaining == 0) {

    return ClosedInputStream.INSTANCE;

  }

  final List<T> list=new ArrayList<>(buffers.size());

  for (  final byte[] buf : buffers) {

    final int c=Math.min(buf.length,remaining);

    list.add(isConstructor.construct(buf,0,c));

    remaining-=c;

    if (remaining == 0) {

      break;

    }

  }

  reuseBuffers=false;

  return new SequenceInputStream(Collections.enumeration(list));

}

Location: AbstractByteArrayOutputStream.java

Content: 

/** 

 * Gets the current contents of this byte stream as a string using the specified encoding.

 * @param charset  the character encoding

 * @return the string converted from the byte array

 * @see java.io.ByteArrayOutputStream#toString(String)

 * @since 2.5

 */

public String toString(final Charset charset){

  return new String(toByteArray(),charset);

}

Location: AbstractByteArrayOutputStream.java

Content: 

/** 

 * Gets the current contents of this byte stream as a string using the specified encoding.

 * @param enc  the name of the character encoding

 * @return the string converted from the byte array

 * @throws UnsupportedEncodingException if the encoding is not supported

 * @see java.io.ByteArrayOutputStream#toString(String)

 */

public String toString(final String enc) throws UnsupportedEncodingException {

  return new String(toByteArray(),enc);

}

Location: AbstractByteArrayOutputStream.java

Content: 

/** 

 * Writes the bytes to the byte array.

 * @param b the bytes to write

 * @param off The start offset

 * @param len The number of bytes to write

 */

protected void writeImpl(final byte[] b,final int off,final int len){

  final int newcount=count + len;

  int remaining=len;

  int inBufferPos=count - filledBufferSum;

  while (remaining > 0) {

    final int part=Math.min(remaining,currentBuffer.length - inBufferPos);

    System.arraycopy(b,off + len - remaining,currentBuffer,inBufferPos,part);

    remaining-=part;

    if (remaining > 0) {

      needNewBuffer(newcount);

      inBufferPos=0;

    }

  }

  count=newcount;

}

Location: AbstractByteArrayOutputStream.java

Content: 

/** 

 * Writes the entire contents of the specified input stream to this byte stream. Bytes from the input stream are read directly into the internal buffers of this streams.

 * @param in the input stream to read from

 * @return total number of bytes read from the input stream(and written to this stream)

 * @throws IOException if an I/O error occurs while reading the input stream

 * @since 2.7

 */

protected int writeImpl(final InputStream in) throws IOException {

  int readCount=0;

  int inBufferPos=count - filledBufferSum;

  int n=in.read(currentBuffer,inBufferPos,currentBuffer.length - inBufferPos);

  while (n != EOF) {

    readCount+=n;

    inBufferPos+=n;

    count+=n;

    if (inBufferPos == currentBuffer.length) {

      needNewBuffer(currentBuffer.length);

      inBufferPos=0;

    }

    n=in.read(currentBuffer,inBufferPos,currentBuffer.length - inBufferPos);

  }

  return readCount;

}

Location: AbstractByteArrayOutputStream.java

Content: 

/** 

 * Write a byte to byte array.

 * @param b the byte to write

 */

protected void writeImpl(final int b){

  int inBufferPos=count - filledBufferSum;

  if (inBufferPos == currentBuffer.length) {

    needNewBuffer(count + 1);

    inBufferPos=0;

  }

  currentBuffer[inBufferPos]=(byte)b;

  count++;

}

Location: AbstractByteArrayOutputStream.java

Content: 

/** 

 * Writes the entire contents of this byte stream to the specified output stream.

 * @param out  the output stream to write to

 * @throws IOException if an I/O error occurs, such as if the stream is closed

 * @see java.io.ByteArrayOutputStream#writeTo(OutputStream)

 */

protected void writeToImpl(final OutputStream out) throws IOException {

  int remaining=count;

  for (  final byte[] buf : buffers) {

    final int c=Math.min(buf.length,remaining);

    out.write(buf,0,c);

    remaining-=c;

    if (remaining == 0) {

      break;

    }

  }

}

