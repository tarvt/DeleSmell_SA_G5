Location: ReaderInputStream.java

Content: 

static int checkMinBufferSize(final CharsetEncoder charsetEncoder,final int bufferSize){

  final float minRequired=minBufferSize(charsetEncoder);

  if (bufferSize < minRequired) {

    throw new IllegalArgumentException(String.format("Buffer size %,d must be at least %s for a CharsetEncoder %s.",bufferSize,minRequired,charsetEncoder.charset().displayName()));

  }

  return bufferSize;

}

Location: ReaderInputStream.java

Content: 

static float minBufferSize(final CharsetEncoder charsetEncoder){

  return charsetEncoder.maxBytesPerChar() * 2;

}

Location: ReaderInputStream.java

Content: 

/** 

 * Constructs a new  {@link ReaderInputStream} that uses the default character encoding with a default input buffer sizeof  {@value #DEFAULT_BUFFER_SIZE} characters.

 * @param reader the target {@link Reader}

 * @deprecated 2.5 use {@link #ReaderInputStream(Reader,Charset)} instead

 */

@Deprecated public ReaderInputStream(final Reader reader){

  this(reader,Charset.defaultCharset());

}

Location: ReaderInputStream.java

Content: 

/** 

 * Constructs a new  {@link ReaderInputStream} with a default input buffer size of {@value #DEFAULT_BUFFER_SIZE}characters.

 * @param reader the target {@link Reader}

 * @param charset the charset encoding

 */

public ReaderInputStream(final Reader reader,final Charset charset){

  this(reader,charset,DEFAULT_BUFFER_SIZE);

}

Location: ReaderInputStream.java

Content: 

/** 

 * Constructs a new  {@link ReaderInputStream}.

 * @param reader the target {@link Reader}

 * @param charsetEncoder the charset encoder

 * @since 2.1

 */

public ReaderInputStream(final Reader reader,final CharsetEncoder charsetEncoder){

  this(reader,charsetEncoder,DEFAULT_BUFFER_SIZE);

}

Location: ReaderInputStream.java

Content: 

/** 

 * Constructs a new  {@link ReaderInputStream}.

 * @param reader the target {@link Reader}

 * @param charsetEncoder the charset encoder

 * @param bufferSize the size of the input buffer in number of characters

 * @since 2.1

 */

public ReaderInputStream(final Reader reader,final CharsetEncoder charsetEncoder,final int bufferSize){

  this.reader=reader;

  this.charsetEncoder=charsetEncoder;

  this.encoderIn=CharBuffer.allocate(checkMinBufferSize(charsetEncoder,bufferSize));

  this.encoderIn.flip();

  this.encoderOut=ByteBuffer.allocate(128);

  this.encoderOut.flip();

}

Location: ReaderInputStream.java

Content: 

/** 

 * Constructs a new  {@link ReaderInputStream}.

 * @param reader the target {@link Reader}.

 * @param charset the charset encoding.

 * @param bufferSize the size of the input buffer in number of characters.

 */

public ReaderInputStream(final Reader reader,final Charset charset,final int bufferSize){

  this(reader,charset.newEncoder().onMalformedInput(CodingErrorAction.REPLACE).onUnmappableCharacter(CodingErrorAction.REPLACE),bufferSize);

}

Location: ReaderInputStream.java

Content: 

/** 

 * Constructs a new  {@link ReaderInputStream} with a default input buffer size of {@value #DEFAULT_BUFFER_SIZE}characters.

 * @param reader the target {@link Reader}

 * @param charsetName the name of the charset encoding

 */

public ReaderInputStream(final Reader reader,final String charsetName){

  this(reader,charsetName,DEFAULT_BUFFER_SIZE);

}

Location: ReaderInputStream.java

Content: 

/** 

 * Constructs a new  {@link ReaderInputStream}.

 * @param reader the target {@link Reader}

 * @param charsetName the name of the charset encoding

 * @param bufferSize the size of the input buffer in number of characters

 */

public ReaderInputStream(final Reader reader,final String charsetName,final int bufferSize){

  this(reader,Charset.forName(charsetName),bufferSize);

}

