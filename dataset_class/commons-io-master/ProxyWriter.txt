Location: ProxyWriter.java

Content: 

/** 

 * Invoked by the write methods after the proxied call has returned successfully. The number of chars written (1 for the {@link #write(int)} method, buffer length for {@link #write(char[])}, etc.) is given as an argument. <p> Subclasses can override this method to add common post-processing functionality without having to override all the write methods. The default implementation does nothing. </p>

 * @since 2.0

 * @param n number of chars written

 * @throws IOException if the post-processing fails

 */

@SuppressWarnings("unused") protected void afterWrite(final int n) throws IOException {

}

Location: ProxyWriter.java

Content: 

/** 

 * Invoked by the write methods before the call is proxied. The number of chars to be written (1 for the  {@link #write(int)} method, bufferlength for  {@link #write(char[])}, etc.) is given as an argument. <p> Subclasses can override this method to add common pre-processing functionality without having to override all the write methods. The default implementation does nothing. </p>

 * @since 2.0

 * @param n number of chars to be written

 * @throws IOException if the pre-processing fails

 */

@SuppressWarnings("unused") protected void beforeWrite(final int n) throws IOException {

}

Location: ProxyWriter.java

Content: 

/** 

 * Handle any IOExceptions thrown. <p> This method provides a point to implement custom exception handling. The default behavior is to re-throw the exception. </p>

 * @param e The IOException thrown

 * @throws IOException if an I/O error occurs.

 * @since 2.0

 */

protected void handleIOException(final IOException e) throws IOException {

  throw e;

}

Location: ProxyWriter.java

Content: 

/** 

 * Constructs a new ProxyWriter.

 * @param proxy  the Writer to delegate to

 */

public ProxyWriter(final Writer proxy){

  super(proxy);

}

