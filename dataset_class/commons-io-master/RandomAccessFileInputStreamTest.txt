Location: RandomAccessFileInputStreamTest.java

Content: 

private RandomAccessFile createRandomAccessFile() throws FileNotFoundException {

  return RandomAccessFileMode.READ_ONLY.create(DATA_FILE);

}

Location: RandomAccessFileInputStreamTest.java

Content: 

@Test public void testAvailableLong() throws IOException {

  try (final RandomAccessFileInputStream inputStream=new RandomAccessFileInputStream(createRandomAccessFile(),true)){

    assertEquals(DATA_FILE_LEN,inputStream.availableLong());

  }

 }

Location: RandomAccessFileInputStreamTest.java

Content: 

@Test public void testCtorCloseOnCloseFalse() throws IOException {

  try (RandomAccessFile file=createRandomAccessFile()){

    try (final RandomAccessFileInputStream inputStream=new RandomAccessFileInputStream(file,false)){

      assertFalse(inputStream.isCloseOnClose());

    }

     file.read();

  }

 }

Location: RandomAccessFileInputStreamTest.java

Content: 

@Test public void testCtorCloseOnCloseTrue() throws IOException {

  try (RandomAccessFile file=createRandomAccessFile()){

    try (final RandomAccessFileInputStream inputStream=new RandomAccessFileInputStream(file,true)){

      assertTrue(inputStream.isCloseOnClose());

    }

     assertThrows(IOException.class,() -> file.read());

  }

 }

Location: RandomAccessFileInputStreamTest.java

Content: 

@Test public void testCtorNullFile(){

  assertThrows(NullPointerException.class,() -> new RandomAccessFileInputStream(null));

}

Location: RandomAccessFileInputStreamTest.java

Content: 

@Test public void testGetters() throws IOException {

  try (RandomAccessFile file=createRandomAccessFile()){

    try (final RandomAccessFileInputStream inputStream=new RandomAccessFileInputStream(file,true)){

      assertEquals(file,inputStream.getRandomAccessFile());

      assertTrue(inputStream.isCloseOnClose());

    }

   }

 }

Location: RandomAccessFileInputStreamTest.java

Content: 

@Test public void testReadByteArrayBounds() throws IOException {

  try (final RandomAccessFileInputStream inputStream=new RandomAccessFileInputStream(createRandomAccessFile(),true)){

    final int dataLen=12;

    final byte[] buffer=new byte[dataLen];

    assertEquals(dataLen,inputStream.read(buffer,0,dataLen));

    assertArrayEquals("A Test Line.".getBytes(StandardCharsets.ISO_8859_1),buffer);

    assertEquals(DATA_FILE_LEN - dataLen,inputStream.available());

    assertEquals(DATA_FILE_LEN - dataLen,inputStream.availableLong());

  }

 }

