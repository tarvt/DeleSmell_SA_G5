Location: AbstractInputStreamTest.java

Content: 

@AfterEach public void tearDown() throws IOException {

  inputFile.delete();

  for (  final InputStream is : inputStreams) {

    is.close();

  }

}

Location: AbstractInputStreamTest.java

Content: 

@Test public void testBytesSkipped() throws IOException {

  for (  final InputStream inputStream : inputStreams) {

    assertEquals(1024,inputStream.skip(1024));

    for (int i=1024; i < randomBytes.length; i++) {

      assertEquals(randomBytes[i],(byte)inputStream.read());

    }

  }

}

Location: AbstractInputStreamTest.java

Content: 

@Test public void testBytesSkippedAfterEOF() throws IOException {

  for (  final InputStream inputStream : inputStreams) {

    assertEquals(randomBytes.length,inputStream.skip(randomBytes.length + 1));

    assertEquals(-1,inputStream.read());

  }

}

Location: AbstractInputStreamTest.java

Content: 

@Test public void testBytesSkippedAfterRead() throws IOException {

  for (  final InputStream inputStream : inputStreams) {

    for (int i=0; i < 1024; i++) {

      assertEquals(randomBytes[i],(byte)inputStream.read());

    }

    assertEquals(1024,inputStream.skip(1024));

    for (int i=2048; i < randomBytes.length; i++) {

      assertEquals(randomBytes[i],(byte)inputStream.read());

    }

  }

}

Location: AbstractInputStreamTest.java

Content: 

@Test public void testNegativeBytesSkippedAfterRead() throws IOException {

  for (  final InputStream inputStream : inputStreams) {

    for (int i=0; i < 1024; i++) {

      assertEquals(randomBytes[i],(byte)inputStream.read());

    }

    assertEquals(0,inputStream.skip(-1));

    assertEquals(0,inputStream.skip(-1024));

    assertEquals(0,inputStream.skip(Long.MIN_VALUE));

    assertEquals(1024,inputStream.skip(1024));

    for (int i=2048; i < randomBytes.length; i++) {

      assertEquals(randomBytes[i],(byte)inputStream.read());

    }

  }

}

Location: AbstractInputStreamTest.java

Content: 

@Test public void testReadMultipleBytes() throws IOException {

  for (  final InputStream inputStream : inputStreams) {

    final byte[] readBytes=new byte[8 * 1024];

    int i=0;

    while (i < randomBytes.length) {

      final int read=inputStream.read(readBytes,0,8 * 1024);

      for (int j=0; j < read; j++) {

        assertEquals(randomBytes[i],readBytes[j]);

        i++;

      }

    }

  }

}

Location: AbstractInputStreamTest.java

Content: 

@Test public void testReadOneByte() throws IOException {

  for (  final InputStream inputStream : inputStreams) {

    for (    final byte randomByte : randomBytes) {

      assertEquals(randomByte,(byte)inputStream.read());

    }

  }

}

Location: AbstractInputStreamTest.java

Content: 

@Test public void testReadPastEOF() throws IOException {

  final InputStream is=inputStreams[0];

  final byte[] buf=new byte[1024];

  int read;

  while ((read=is.read(buf,0,buf.length)) != -1) {

  }

  final int readAfterEOF=is.read(buf,0,buf.length);

  assertEquals(-1,readAfterEOF);

}

Location: AbstractInputStreamTest.java

Content: 

@Test public void testSkipFromFileChannel() throws IOException {

  for (  final InputStream inputStream : inputStreams) {

    assertEquals(1024,inputStream.skip(1024));

    for (int i=1024; i < 2048; i++) {

      assertEquals(randomBytes[i],(byte)inputStream.read());

    }

    assertEquals(256,inputStream.skip(256));

    assertEquals(256,inputStream.skip(256));

    assertEquals(512,inputStream.skip(512));

    for (int i=3072; i < randomBytes.length; i++) {

      assertEquals(randomBytes[i],(byte)inputStream.read());

    }

  }

}

