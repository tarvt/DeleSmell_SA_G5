Location: PeekableInputStream.java

Content: 

/** 

 * Creates a new instance, which filters the given input stream, and uses a reasonable default buffer size (8192).

 * @param inputStream The input stream, which is being buffered.

 */

public PeekableInputStream(final InputStream inputStream){

  super(inputStream);

}

Location: PeekableInputStream.java

Content: 

/** 

 * Creates a new instance, which filters the given input stream, and uses the given buffer size.

 * @param inputStream The input stream, which is being buffered.

 * @param bufferSize The size of the {@link CircularByteBuffer}, which is used internally.

 */

public PeekableInputStream(final InputStream inputStream,final int bufferSize){

  super(inputStream,bufferSize);

}

Location: PeekableInputStream.java

Content: 

/** 

 * Returns whether the next bytes in the buffer are as given by  {@code sourceBuffer}. This is equivalent to {@link #peek(byte[],int,int)} with {@code offset} == 0, and {@code length} == {@code sourceBuffer.length}

 * @param sourceBuffer the buffer to compare against

 * @return true if the next bytes are as given

 * @throws IOException Refilling the buffer failed.

 */

public boolean peek(final byte[] sourceBuffer) throws IOException {

  Objects.requireNonNull(sourceBuffer,"sourceBuffer");

  return peek(sourceBuffer,0,sourceBuffer.length);

}

