Location: MarkShieldInputStreamTest.java

Content: 

@Test public void markIsNoOpWhenUnderlyingDoesNotSupport() throws IOException {

  try (final MarkTestableInputStream in=new MarkTestableInputStream(new NullInputStream(64,false,false));final MarkShieldInputStream msis=new MarkShieldInputStream(in)){

    msis.mark(1024);

    assertEquals(0,in.markcount);

    assertEquals(0,in.readlimit);

  }

 }

Location: MarkShieldInputStreamTest.java

Content: 

@Test public void markIsNoOpWhenUnderlyingSupports() throws IOException {

  try (final MarkTestableInputStream in=new MarkTestableInputStream(new NullInputStream(64,true,false));final MarkShieldInputStream msis=new MarkShieldInputStream(in)){

    msis.mark(1024);

    assertEquals(0,in.markcount);

    assertEquals(0,in.readlimit);

  }

 }

Location: MarkShieldInputStreamTest.java

Content: 

@Test public void markSupportedIsFalseWhenUnderlyingFalse() throws IOException {

  try (final InputStream is=new NullInputStream(64,false,false)){

    assertFalse(is.markSupported());

    try (final MarkShieldInputStream msis=new MarkShieldInputStream(is)){

      assertFalse(msis.markSupported());

    }

   }

 }

Location: MarkShieldInputStreamTest.java

Content: 

@Test public void markSupportedIsFalseWhenUnderlyingTrue() throws IOException {

  try (final InputStream is=new NullInputStream(64,true,false)){

    assertTrue(is.markSupported());

    try (final MarkShieldInputStream msis=new MarkShieldInputStream(is)){

      assertFalse(msis.markSupported());

    }

   }

 }

Location: MarkShieldInputStreamTest.java

Content: 

@Test public void resetThrowsExceptionWhenUnderylingDoesNotSupport() throws IOException {

  try (final MarkShieldInputStream msis=new MarkShieldInputStream(new NullInputStream(64,false,false))){

    assertThrows(UnsupportedOperationException.class,() -> msis.reset());

  }

 }

Location: MarkShieldInputStreamTest.java

Content: 

@Test public void resetThrowsExceptionWhenUnderylingSupports() throws IOException {

  try (final MarkShieldInputStream msis=new MarkShieldInputStream(new NullInputStream(64,true,false))){

    assertThrows(UnsupportedOperationException.class,() -> msis.reset());

  }

 }

