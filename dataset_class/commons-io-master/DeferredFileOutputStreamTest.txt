Location: DeferredFileOutputStreamTest.java

Content: 

public static IntStream data(){

  return IntStream.of(1,2,4,8,16,32,64,128,256,512,1024,2048,4096);

}

Location: DeferredFileOutputStreamTest.java

Content: 

/** 

 * Tests the case where the amount of data exceeds the threshold, and is therefore written to disk. The actual data written to disk is verified, as is the file itself. Testing the getInputStream() method.

 */

@ParameterizedTest(name="initialBufferSize = {0}") @MethodSource("data") public void testAboveThresholdGetInputStream(final int initialBufferSize,final @TempDir Path tempDir) throws IOException {

  final File testFile=tempDir.resolve("testAboveThreshold.dat").toFile();

  final DeferredFileOutputStream dfos=new DeferredFileOutputStream(testBytes.length - 5,initialBufferSize,testFile);

  dfos.write(testBytes,0,testBytes.length);

  dfos.close();

  assertFalse(dfos.isInMemory());

  try (InputStream is=dfos.toInputStream()){

    assertArrayEquals(testBytes,IOUtils.toByteArray(is));

  }

   verifyResultFile(testFile);

}

Location: DeferredFileOutputStreamTest.java

Content: 

/** 

 * Tests the case where the amount of data exceeds the threshold, and is therefore written to disk. The actual data written to disk is verified, as is the file itself.

 */

@ParameterizedTest(name="initialBufferSize = {0}") @MethodSource("data") public void testAboveThreshold(final int initialBufferSize){

  final File testFile=new File("testAboveThreshold.dat");

  testFile.delete();

  final DeferredFileOutputStream dfos=new DeferredFileOutputStream(testBytes.length - 5,initialBufferSize,testFile);

  try {

    dfos.write(testBytes,0,testBytes.length);

    dfos.close();

  }

 catch (  final IOException e) {

    fail("Unexpected IOException");

  }

  assertFalse(dfos.isInMemory());

  assertNull(dfos.getData());

  verifyResultFile(testFile);

  testFile.delete();

}

Location: DeferredFileOutputStreamTest.java

Content: 

/** 

 * Tests the case where the amount of data is exactly the same as the threshold. The behavior should be the same as that for the amount of data being below (i.e. not exceeding) the threshold.

 */

@ParameterizedTest(name="initialBufferSize = {0}") @MethodSource("data") public void testAtThreshold(final int initialBufferSize){

  final DeferredFileOutputStream dfos=new DeferredFileOutputStream(testBytes.length,initialBufferSize,null);

  try {

    dfos.write(testBytes,0,testBytes.length);

    dfos.close();

  }

 catch (  final IOException e) {

    fail("Unexpected IOException");

  }

  assertTrue(dfos.isInMemory());

  final byte[] resultBytes=dfos.getData();

  assertEquals(testBytes.length,resultBytes.length);

  assertArrayEquals(resultBytes,testBytes);

}

Location: DeferredFileOutputStreamTest.java

Content: 

/** 

 * Tests the case where the amount of data falls below the threshold, and is therefore confined to memory. Testing the getInputStream() method.

 */

@ParameterizedTest(name="initialBufferSize = {0}") @MethodSource("data") public void testBelowThresholdGetInputStream(final int initialBufferSize) throws IOException {

  final DeferredFileOutputStream dfos=new DeferredFileOutputStream(testBytes.length + 42,initialBufferSize,null);

  dfos.write(testBytes,0,testBytes.length);

  dfos.close();

  assertTrue(dfos.isInMemory());

  try (InputStream is=dfos.toInputStream()){

    assertArrayEquals(testBytes,IOUtils.toByteArray(is));

  }

 }

Location: DeferredFileOutputStreamTest.java

Content: 

/** 

 * Tests the case where the amount of data falls below the threshold, and is therefore confined to memory.

 */

@ParameterizedTest(name="initialBufferSize = {0}") @MethodSource("data") public void testBelowThreshold(final int initialBufferSize){

  final DeferredFileOutputStream dfos=new DeferredFileOutputStream(testBytes.length + 42,initialBufferSize,null);

  try {

    dfos.write(testBytes,0,testBytes.length);

    dfos.close();

  }

 catch (  final IOException e) {

    fail("Unexpected IOException");

  }

  assertTrue(dfos.isInMemory());

  final byte[] resultBytes=dfos.getData();

  assertEquals(testBytes.length,resultBytes.length);

  assertArrayEquals(resultBytes,testBytes);

}

Location: DeferredFileOutputStreamTest.java

Content: 

/** 

 * Test specifying a temporary file and the threshold is reached.

 */

@ParameterizedTest(name="initialBufferSize = {0}") @MethodSource("data") public void testTempFileAboveThresholdPrefixOnly(final int initialBufferSize){

  final String prefix="commons-io-test";

  final String suffix=null;

  final File tempDir=null;

  final DeferredFileOutputStream dfos=new DeferredFileOutputStream(testBytes.length - 5,initialBufferSize,prefix,suffix,tempDir);

  assertNull(dfos.getFile(),"Check file is null-A");

  try {

    dfos.write(testBytes,0,testBytes.length);

    dfos.close();

  }

 catch (  final IOException e) {

    fail("Unexpected IOException");

  }

  assertFalse(dfos.isInMemory());

  assertNull(dfos.getData());

  assertNotNull(dfos.getFile(),"Check file not null");

  assertTrue(dfos.getFile().exists(),"Check file exists");

  assertTrue(dfos.getFile().getName().startsWith(prefix),"Check prefix");

  assertTrue(dfos.getFile().getName().endsWith(".tmp"),"Check suffix");

  verifyResultFile(dfos.getFile());

  dfos.getFile().delete();

}

Location: DeferredFileOutputStreamTest.java

Content: 

/** 

 * Test specifying a temporary file and the threshold is reached.

 */

@ParameterizedTest(name="initialBufferSize = {0}") @MethodSource("data") public void testTempFileAboveThreshold(final int initialBufferSize){

  final String prefix="commons-io-test";

  final String suffix=".out";

  final File tempDir=FileUtils.current();

  final DeferredFileOutputStream dfos=new DeferredFileOutputStream(testBytes.length - 5,initialBufferSize,prefix,suffix,tempDir);

  assertNull(dfos.getFile(),"Check file is null-A");

  try {

    dfos.write(testBytes,0,testBytes.length);

    dfos.close();

  }

 catch (  final IOException e) {

    fail("Unexpected IOException");

  }

  assertFalse(dfos.isInMemory());

  assertNull(dfos.getData());

  assertNotNull(dfos.getFile(),"Check file not null");

  assertTrue(dfos.getFile().exists(),"Check file exists");

  assertTrue(dfos.getFile().getName().startsWith(prefix),"Check prefix");

  assertTrue(dfos.getFile().getName().endsWith(suffix),"Check suffix");

  assertEquals(tempDir.getPath(),dfos.getFile().getParent(),"Check dir");

  verifyResultFile(dfos.getFile());

  dfos.getFile().delete();

}

Location: DeferredFileOutputStreamTest.java

Content: 

/** 

 * Test specifying a temporary file and the threshold not reached.

 */

@ParameterizedTest(name="initialBufferSize = {0}") @MethodSource("data") public void testTempFileBelowThreshold(final int initialBufferSize){

  final String prefix="commons-io-test";

  final String suffix=".out";

  final File tempDir=FileUtils.current();

  final DeferredFileOutputStream dfos=new DeferredFileOutputStream(testBytes.length + 42,initialBufferSize,prefix,suffix,tempDir);

  assertNull(dfos.getFile(),"Check file is null-A");

  try {

    dfos.write(testBytes,0,testBytes.length);

    dfos.close();

  }

 catch (  final IOException e) {

    fail("Unexpected IOException");

  }

  assertTrue(dfos.isInMemory());

  assertNull(dfos.getFile(),"Check file is null-B");

}

Location: DeferredFileOutputStreamTest.java

Content: 

/** 

 * Test specifying a temporary file and the threshold is reached.

 * @throws Exception

 */

@Test public void testTempFileError() throws Exception {

  final String prefix=null;

  final String suffix=".out";

  final File tempDir=FileUtils.current();

  try {

    new DeferredFileOutputStream(testBytes.length - 5,prefix,suffix,tempDir).close();

    fail("Expected IllegalArgumentException ");

  }

 catch (  final IllegalArgumentException e) {

  }

}

Location: DeferredFileOutputStreamTest.java

Content: 

/** 

 * Tests the case where there are multiple writes beyond the threshold, to ensure that the {@code thresholdReached()} method is only called once, as the threshold is crossed for the first time.

 */

@ParameterizedTest(name="initialBufferSize = {0}") @MethodSource("data") public void testThresholdReached(final int initialBufferSize){

  final File testFile=new File("testThresholdReached.dat");

  testFile.delete();

  final DeferredFileOutputStream dfos=new DeferredFileOutputStream(testBytes.length / 2,initialBufferSize,testFile);

  final int chunkSize=testBytes.length / 3;

  try {

    dfos.write(testBytes,0,chunkSize);

    dfos.write(testBytes,chunkSize,chunkSize);

    dfos.write(testBytes,chunkSize * 2,testBytes.length - chunkSize * 2);

    dfos.close();

  }

 catch (  final IOException e) {

    fail("Unexpected IOException");

  }

  assertFalse(dfos.isInMemory());

  assertNull(dfos.getData());

  verifyResultFile(testFile);

  testFile.delete();

}

Location: DeferredFileOutputStreamTest.java

Content: 

/** 

 * Test whether writeTo() properly writes large content.

 */

@ParameterizedTest(name="initialBufferSize = {0}") @MethodSource("data") public void testWriteToLarge(final int initialBufferSize){

  final File testFile=new File("testWriteToFile.dat");

  final ByteArrayOutputStream baos=new ByteArrayOutputStream(initialBufferSize);

  testFile.delete();

  final DeferredFileOutputStream dfos=new DeferredFileOutputStream(testBytes.length / 2,testFile);

  try {

    dfos.write(testBytes);

    assertTrue(testFile.exists());

    assertFalse(dfos.isInMemory());

    try {

      dfos.writeTo(baos);

      fail("Should not have been able to write before closing");

    }

 catch (    final IOException ioe) {

    }

    dfos.close();

    dfos.writeTo(baos);

  }

 catch (  final IOException ioe) {

    fail("Unexpected IOException");

  }

  final byte[] copiedBytes=baos.toByteArray();

  assertArrayEquals(testBytes,copiedBytes);

  verifyResultFile(testFile);

  testFile.delete();

}

Location: DeferredFileOutputStreamTest.java

Content: 

/** 

 * Test whether writeTo() properly writes small content.

 */

@ParameterizedTest(name="initialBufferSize = {0}") @MethodSource("data") public void testWriteToSmall(final int initialBufferSize){

  final File testFile=new File("testWriteToMem.dat");

  final ByteArrayOutputStream baos=new ByteArrayOutputStream(initialBufferSize);

  testFile.delete();

  final DeferredFileOutputStream dfos=new DeferredFileOutputStream(testBytes.length * 2,initialBufferSize,testFile);

  try {

    dfos.write(testBytes);

    assertFalse(testFile.exists());

    assertTrue(dfos.isInMemory());

    try {

      dfos.writeTo(baos);

      fail("Should not have been able to write before closing");

    }

 catch (    final IOException ioe) {

    }

    dfos.close();

    dfos.writeTo(baos);

  }

 catch (  final IOException ioe) {

    fail("Unexpected IOException");

  }

  final byte[] copiedBytes=baos.toByteArray();

  assertArrayEquals(testBytes,copiedBytes);

  testFile.delete();

}

Location: DeferredFileOutputStreamTest.java

Content: 

/** 

 * Verifies that the specified file contains the same data as the original test data.

 * @param testFile The file containing the test output.

 */

private void verifyResultFile(final File testFile){

  try {

    final InputStream fis=Files.newInputStream(testFile.toPath());

    assertEquals(testBytes.length,fis.available());

    final byte[] resultBytes=new byte[testBytes.length];

    assertEquals(testBytes.length,fis.read(resultBytes));

    assertArrayEquals(resultBytes,testBytes);

    assertEquals(-1,fis.read(resultBytes));

    try {

      fis.close();

    }

 catch (    final IOException e) {

    }

  }

 catch (  final FileNotFoundException e) {

    fail("Unexpected FileNotFoundException");

  }

catch (  final IOException e) {

    fail("Unexpected IOException");

  }

}

