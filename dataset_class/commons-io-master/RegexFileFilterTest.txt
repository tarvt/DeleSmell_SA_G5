Location: RegexFileFilterTest.java

Content: 

@Test public void testRegex(){

  IOFileFilter filter=new RegexFileFilter("^.*[tT]est(-\\d+)?\\.java$");

  assertFiltering(filter,new File("Test.java"),true);

  assertFiltering(filter,new File("test-10.java"),true);

  assertFiltering(filter,new File("test-.java"),false);

  assertFiltering(filter,new File("Test.java").toPath(),true);

  assertFiltering(filter,new File("test-10.java").toPath(),true);

  assertFiltering(filter,new File("test-.java").toPath(),false);

  filter=new RegexFileFilter("^[Tt]est.java$");

  assertFiltering(filter,new File("Test.java"),true);

  assertFiltering(filter,new File("test.java"),true);

  assertFiltering(filter,new File("tEST.java"),false);

  assertFiltering(filter,new File("Test.java").toPath(),true);

  assertFiltering(filter,new File("test.java").toPath(),true);

  assertFiltering(filter,new File("tEST.java").toPath(),false);

  filter=new RegexFileFilter(Pattern.compile("^test.java$",Pattern.CASE_INSENSITIVE));

  assertFiltering(filter,new File("Test.java"),true);

  assertFiltering(filter,new File("test.java"),true);

  assertFiltering(filter,new File("tEST.java"),true);

  assertFiltering(filter,new File("Test.java").toPath(),true);

  assertFiltering(filter,new File("test.java").toPath(),true);

  assertFiltering(filter,new File("tEST.java").toPath(),true);

  filter=new RegexFileFilter("^test.java$",Pattern.CASE_INSENSITIVE);

  assertFiltering(filter,new File("Test.java"),true);

  assertFiltering(filter,new File("test.java"),true);

  assertFiltering(filter,new File("tEST.java"),true);

  assertFiltering(filter,new File("Test.java").toPath(),true);

  assertFiltering(filter,new File("test.java").toPath(),true);

  assertFiltering(filter,new File("tEST.java").toPath(),true);

  filter=new RegexFileFilter("^test.java$",IOCase.INSENSITIVE);

  assertFiltering(filter,new File("Test.java"),true);

  assertFiltering(filter,new File("test.java"),true);

  assertFiltering(filter,new File("tEST.java"),true);

  assertFiltering(filter,new File("Test.java").toPath(),true);

  assertFiltering(filter,new File("test.java").toPath(),true);

  assertFiltering(filter,new File("tEST.java").toPath(),true);

}

Location: RegexFileFilterTest.java

Content: 

@Test public void testRegexEdgeCases(){

  assertThrows(IllegalArgumentException.class,() -> new RegexFileFilter((String)null));

  assertThrows(IllegalArgumentException.class,() -> new RegexFileFilter(null,Pattern.CASE_INSENSITIVE));

  assertThrows(IllegalArgumentException.class,() -> new RegexFileFilter(null,IOCase.INSENSITIVE));

  assertThrows(IllegalArgumentException.class,() -> new RegexFileFilter((java.util.regex.Pattern)null));

}

Location: RegexFileFilterTest.java

Content: 

/** 

 * Tests https://issues.apache.org/jira/browse/IO-733.

 */

@Test public void testRegexFileNameOnly(){

  final Path path=Paths.get("folder","Foo.java");

  final String patternStr="Foo.*";

  assertFiltering(new RegexFileFilter(patternStr),path,true);

  assertFiltering(new RegexFileFilter(Pattern.compile(patternStr),Path::toString),path,false);

}

