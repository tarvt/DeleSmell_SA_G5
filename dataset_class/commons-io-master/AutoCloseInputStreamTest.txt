Location: AutoCloseInputStreamTest.java

Content: 

@Test public void testReadBuffer() throws IOException {

  final byte[] b=new byte[data.length * 2];

  int total=0;

  for (int n=0; n != -1; n=stream.read(b)) {

    assertFalse(closed,"closed");

    for (int i=0; i < n; i++) {

      assertEquals(data[total + i],b[i],"read(b)");

    }

    total+=n;

  }

  assertEquals(data.length,total,"read(b)");

  assertTrue(closed,"closed");

  assertEquals(-1,stream.read(b),"read(b)");

}

Location: AutoCloseInputStreamTest.java

Content: 

@Test public void testReadBufferOffsetLength() throws IOException {

  final byte[] b=new byte[data.length * 2];

  int total=0;

  for (int n=0; n != -1; n=stream.read(b,total,b.length - total)) {

    assertFalse(closed,"closed");

    total+=n;

  }

  assertEquals(data.length,total,"read(b, off, len)");

  for (int i=0; i < data.length; i++) {

    assertEquals(data[i],b[i],"read(b, off, len)");

  }

  assertTrue(closed,"closed");

  assertEquals(-1,stream.read(b,0,b.length),"read(b, off, len)");

}

Location: AutoCloseInputStreamTest.java

Content: 

@Test public void testResetBeforeEnd() throws IOException {

  final String inputStr="1234";

  final AutoCloseInputStream inputStream=new AutoCloseInputStream(new ByteArrayInputStream(inputStr.getBytes()));

  inputStream.mark(1);

  assertEquals('1',inputStream.read());

  inputStream.reset();

  assertEquals('1',inputStream.read());

  assertEquals('2',inputStream.read());

  inputStream.reset();

  assertEquals('1',inputStream.read());

  assertEquals('2',inputStream.read());

  assertEquals('3',inputStream.read());

  inputStream.reset();

  assertEquals('1',inputStream.read());

  assertEquals('2',inputStream.read());

  assertEquals('3',inputStream.read());

  assertEquals('4',inputStream.read());

  inputStream.reset();

  assertEquals('1',inputStream.read());

}

