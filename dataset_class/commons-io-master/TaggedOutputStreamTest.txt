Location: TaggedOutputStreamTest.java

Content: 

@Test public void testBrokenStream(){

  final IOException exception=new IOException("test exception");

  final TaggedOutputStream stream=new TaggedOutputStream(new BrokenOutputStream(exception));

  try {

    stream.write('x');

    fail("Expected exception not thrown.");

  }

 catch (  final IOException e) {

    assertTrue(stream.isCauseOf(e));

    try {

      stream.throwIfCauseOf(e);

      fail("Expected exception not thrown.");

    }

 catch (    final IOException e2) {

      assertEquals(exception,e2);

    }

  }

  try {

    stream.flush();

    fail("Expected exception not thrown.");

  }

 catch (  final IOException e) {

    assertTrue(stream.isCauseOf(e));

    try {

      stream.throwIfCauseOf(e);

      fail("Expected exception not thrown.");

    }

 catch (    final IOException e2) {

      assertEquals(exception,e2);

    }

  }

  try {

    stream.close();

    fail("Expected exception not thrown.");

  }

 catch (  final IOException e) {

    assertTrue(stream.isCauseOf(e));

    try {

      stream.throwIfCauseOf(e);

      fail("Expected exception not thrown.");

    }

 catch (    final IOException e2) {

      assertEquals(exception,e2);

    }

  }

}

Location: TaggedOutputStreamTest.java

Content: 

@Test public void testNormalStream(){

  try (final ByteArrayOutputStream buffer=new ByteArrayOutputStream()){

    try (final OutputStream stream=new TaggedOutputStream(buffer)){

      stream.write('a');

      stream.write(new byte[]{'b'});

      stream.write(new byte[]{'c'},0,1);

      stream.flush();

    }

     assertEquals(3,buffer.size());

    assertEquals('a',buffer.toByteArray()[0]);

    assertEquals('b',buffer.toByteArray()[1]);

    assertEquals('c',buffer.toByteArray()[2]);

  }

 catch (  final IOException e) {

    fail("Unexpected exception thrown");

  }

}

Location: TaggedOutputStreamTest.java

Content: 

@Test public void testOtherException() throws Exception {

  final IOException exception=new IOException("test exception");

  try (final TaggedOutputStream stream=new TaggedOutputStream(ClosedOutputStream.INSTANCE)){

    assertFalse(stream.isCauseOf(exception));

    assertFalse(stream.isCauseOf(new TaggedIOException(exception,UUID.randomUUID())));

    try {

      stream.throwIfCauseOf(exception);

    }

 catch (    final IOException e) {

      fail("Unexpected exception thrown");

    }

    try {

      stream.throwIfCauseOf(new TaggedIOException(exception,UUID.randomUUID()));

    }

 catch (    final IOException e) {

      fail("Unexpected exception thrown");

    }

  }

 }

