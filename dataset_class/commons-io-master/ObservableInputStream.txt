Location: ObservableInputStream.java

Content: 

/** 

 * Adds an Observer.

 * @param observer the observer to add.

 */

public void add(final Observer observer){

  observers.add(observer);

}

Location: ObservableInputStream.java

Content: 

/** 

 * Reads all data from the underlying  {@link InputStream}, while notifying the observers.

 * @throws IOException The underlying {@link InputStream}, or either of the observers has thrown an exception.

 */

public void consume() throws IOException {

  final byte[] buffer=IOUtils.byteArray();

  while (read(buffer) != EOF) {

  }

}

Location: ObservableInputStream.java

Content: 

/** 

 * Notifies the observers by invoking  {@link Observer#finished()}.

 * @throws IOException Some observer has thrown an exception, which is being passed down.

 */

protected void noteClosed() throws IOException {

  for (  final Observer observer : getObservers()) {

    observer.closed();

  }

}

Location: ObservableInputStream.java

Content: 

/** 

 * Notifies the observers by invoking  {@link Observer#data(byte[],int,int)} with the given arguments.

 * @param buffer Passed to the observers.

 * @param offset Passed to the observers.

 * @param length Passed to the observers.

 * @throws IOException Some observer has thrown an exception, which is being passed down.

 */

protected void noteDataBytes(final byte[] buffer,final int offset,final int length) throws IOException {

  for (  final Observer observer : getObservers()) {

    observer.data(buffer,offset,length);

  }

}

Location: ObservableInputStream.java

Content: 

/** 

 * Notifies the observers by invoking  {@link Observer#data(int)} with the given arguments.

 * @param value Passed to the observers.

 * @throws IOException Some observer has thrown an exception, which is being passed down.

 */

protected void noteDataByte(final int value) throws IOException {

  for (  final Observer observer : getObservers()) {

    observer.data(value);

  }

}

Location: ObservableInputStream.java

Content: 

/** 

 * Notifies the observers by invoking  {@link Observer#error(IOException)} with the given argument.

 * @param exception Passed to the observers.

 * @throws IOException Some observer has thrown an exception, which is being passed down. This may be the sameexception, which has been passed as an argument.

 */

protected void noteError(final IOException exception) throws IOException {

  for (  final Observer observer : getObservers()) {

    observer.error(exception);

  }

}

Location: ObservableInputStream.java

Content: 

/** 

 * Notifies the observers by invoking  {@link Observer#finished()}.

 * @throws IOException Some observer has thrown an exception, which is being passed down.

 */

protected void noteFinished() throws IOException {

  for (  final Observer observer : getObservers()) {

    observer.finished();

  }

}

Location: ObservableInputStream.java

Content: 

private void notify(final byte[] buffer,final int offset,final int result,final IOException ioe) throws IOException {

  if (ioe != null) {

    noteError(ioe);

    throw ioe;

  }

  if (result == EOF) {

    noteFinished();

  }

 else   if (result > 0) {

    noteDataBytes(buffer,offset,result);

  }

}

Location: ObservableInputStream.java

Content: 

/** 

 * Creates a new ObservableInputStream for the given InputStream.

 * @param inputStream the input stream to observe.

 */

public ObservableInputStream(final InputStream inputStream){

  this(inputStream,new ArrayList<>());

}

Location: ObservableInputStream.java

Content: 

/** 

 * Creates a new ObservableInputStream for the given InputStream.

 * @param inputStream the input stream to observe.

 * @param observers List of observer callbacks.

 */

private ObservableInputStream(final InputStream inputStream,final List<Observer> observers){

  super(inputStream);

  this.observers=observers;

}

Location: ObservableInputStream.java

Content: 

/** 

 * Creates a new ObservableInputStream for the given InputStream.

 * @param inputStream the input stream to observe.

 * @param observers List of observer callbacks.

 * @since 2.9.0

 */

public ObservableInputStream(final InputStream inputStream,final Observer... observers){

  this(inputStream,Arrays.asList(observers));

}

Location: ObservableInputStream.java

Content: 

/** 

 * Removes all Observers.

 */

public void removeAllObservers(){

  observers.clear();

}

Location: ObservableInputStream.java

Content: 

/** 

 * Removes an Observer.

 * @param observer the observer to remove

 */

public void remove(final Observer observer){

  observers.remove(observer);

}

