Location: CollectionFileListener.java

Content: 

/** 

 * Clear file collections.

 */

public void clear(){

  createdFiles.clear();

  changedFiles.clear();

  deletedFiles.clear();

  createdDirectories.clear();

  changedDirectories.clear();

  deletedDirectories.clear();

}

Location: CollectionFileListener.java

Content: 

/** 

 * Create a new observer.

 * @param clearOnStart true if clear() should be called by onStart().

 */

public CollectionFileListener(final boolean clearOnStart){

  this.clearOnStart=clearOnStart;

}

Location: CollectionFileListener.java

Content: 

/** 

 * Return the set of changed directories.

 * @return Directories which have changed

 */

public Collection<File> getChangedDirectories(){

  return changedDirectories;

}

Location: CollectionFileListener.java

Content: 

/** 

 * Return the set of changed files.

 * @return Files which have changed

 */

public Collection<File> getChangedFiles(){

  return changedFiles;

}

Location: CollectionFileListener.java

Content: 

/** 

 * Return the set of created directories.

 * @return Directories which have been created

 */

public Collection<File> getCreatedDirectories(){

  return createdDirectories;

}

Location: CollectionFileListener.java

Content: 

/** 

 * Return the set of created files.

 * @return Files which have been created

 */

public Collection<File> getCreatedFiles(){

  return createdFiles;

}

Location: CollectionFileListener.java

Content: 

/** 

 * Return the set of deleted directories.

 * @return Directories which been deleted

 */

public Collection<File> getDeletedDirectories(){

  return deletedDirectories;

}

Location: CollectionFileListener.java

Content: 

/** 

 * Return the set of deleted files.

 * @return Files which been deleted

 */

public Collection<File> getDeletedFiles(){

  return deletedFiles;

}

Location: CollectionFileListener.java

Content: 

/** 

 * Directory changed Event.

 * @param directory The directory changed

 */

@Override public void onDirectoryChange(final File directory){

  changedDirectories.add(directory);

}

Location: CollectionFileListener.java

Content: 

/** 

 * Directory created Event.

 * @param directory The directory created

 */

@Override public void onDirectoryCreate(final File directory){

  createdDirectories.add(directory);

}

Location: CollectionFileListener.java

Content: 

/** 

 * Directory deleted Event.

 * @param directory The directory deleted

 */

@Override public void onDirectoryDelete(final File directory){

  deletedDirectories.add(directory);

}

Location: CollectionFileListener.java

Content: 

/** 

 * File changed Event.

 * @param file The file changed

 */

@Override public void onFileChange(final File file){

  changedFiles.add(file);

}

Location: CollectionFileListener.java

Content: 

/** 

 * File created Event.

 * @param file The file created

 */

@Override public void onFileCreate(final File file){

  createdFiles.add(file);

}

Location: CollectionFileListener.java

Content: 

/** 

 * File deleted Event.

 * @param file The file deleted

 */

@Override public void onFileDelete(final File file){

  deletedFiles.add(file);

}

Location: CollectionFileListener.java

Content: 

/** 

 * File system observer started checking event.

 * @param observer The file system observer

 */

@Override public void onStart(final FileAlterationObserver observer){

  if (clearOnStart) {

    clear();

  }

}

Location: CollectionFileListener.java

Content: 

/** 

 * File system observer finished checking event.

 * @param observer The file system observer

 */

@Override public void onStop(final FileAlterationObserver observer){

}

