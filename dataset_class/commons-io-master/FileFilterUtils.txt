Location: FileFilterUtils.java

Content: 

/** 

 * Returns an  {@code IOFileFilter} that wraps the{@code FileFilter} instance.

 * @param filter  the filter to be wrapped

 * @return a new filter that implements IOFileFilter

 * @see DelegateFileFilter

 */

public static IOFileFilter asFileFilter(final FileFilter filter){

  return new DelegateFileFilter(filter);

}

Location: FileFilterUtils.java

Content: 

/** 

 * Returns an  {@code IOFileFilter} that wraps the{@code FilenameFilter} instance.

 * @param filter  the filter to be wrapped

 * @return a new filter that implements IOFileFilter

 * @see DelegateFileFilter

 */

public static IOFileFilter asFileFilter(final FilenameFilter filter){

  return new DelegateFileFilter(filter);

}

Location: FileFilterUtils.java

Content: 

/** 

 * FileFilterUtils is not normally instantiated.

 */

public FileFilterUtils(){

}

Location: FileFilterUtils.java

Content: 

/** 

 * <p> Applies an  {@link IOFileFilter} to the provided {@link File} stream and collects the accepted files.</p>

 * @param filter the filter to apply to the stream of files.

 * @param stream the stream of files on which to apply the filter.

 * @param collector how to collect the end result.

 * @param < R > the return type.

 * @param < A > the mutable accumulation type of the reduction operation (often hidden as an implementation detail)

 * @return a subset of files from the stream that is accepted by the filter.

 * @throws IllegalArgumentException if the filter is {@code null}.

 */

private static <R,A>R filterFiles(final IOFileFilter filter,final Stream<File> stream,final Collector<? super File,A,R> collector){

  Objects.requireNonNull(collector,"collector");

  if (filter == null) {

    throw new IllegalArgumentException("file filter is null");

  }

  if (stream == null) {

    return Stream.<File>empty().collect(collector);

  }

  return stream.filter(filter::accept).collect(collector);

}

Location: FileFilterUtils.java

Content: 

/** 

 * <p> Applies an  {@link IOFileFilter} to the provided {@link File}objects. The resulting list is a subset of the original files that matches the provided filter. </p> <p> The  {@link List} returned by this method is not guaranteed to be thread safe.</p> <pre> List&lt;File&gt; filesAndDirectories = ... List&lt;File&gt; directories = FileFilterUtils.filterList(filesAndDirectories, FileFilterUtils.directoryFileFilter()); </pre>

 * @param filter the filter to apply to each files in the list.

 * @param files the collection of files to apply the filter to.

 * @return a subset of {@code files} that is accepted by thefile filter.

 * @throws IllegalArgumentException if the filter is {@code null}or  {@code files} contains a {@code null} value.

 * @since 2.0

 */

public static List<File> filterList(final IOFileFilter filter,final File... files){

  return Arrays.asList(filter(filter,files));

}

Location: FileFilterUtils.java

Content: 

/** 

 * <p> Applies an  {@link IOFileFilter} to the provided {@link File}objects. The resulting list is a subset of the original files that matches the provided filter. </p> <p> The  {@link List} returned by this method is not guaranteed to be thread safe.</p> <pre> List&lt;File&gt; filesAndDirectories = ... List&lt;File&gt; directories = FileFilterUtils.filterList(filesAndDirectories, FileFilterUtils.directoryFileFilter()); </pre>

 * @param filter the filter to apply to each files in the list.

 * @param files the collection of files to apply the filter to.

 * @return a subset of {@code files} that is accepted by thefile filter.

 * @throws IllegalArgumentException if the filter is {@code null}

 * @since 2.0

 */

public static List<File> filterList(final IOFileFilter filter,final Iterable<File> files){

  if (files == null) {

    return Collections.emptyList();

  }

  return filterFiles(filter,StreamSupport.stream(files.spliterator(),false),Collectors.toList());

}

Location: FileFilterUtils.java

Content: 

/** 

 * <p> Applies an  {@link IOFileFilter} to the provided {@link File}objects. The resulting set is a subset of the original file list that matches the provided filter. </p> <p> The  {@link Set} returned by this method is not guaranteed to be thread safe.</p> <pre> Set&lt;File&gt; allFiles = ... Set&lt;File&gt; javaFiles = FileFilterUtils.filterSet(allFiles, FileFilterUtils.suffixFileFilter(".java")); </pre>

 * @param filter the filter to apply to the set of files.

 * @param files the collection of files to apply the filter to.

 * @return a subset of {@code files} that is accepted by thefile filter.

 * @throws IllegalArgumentException if the filter is {@code null}or  {@code files} contains a {@code null} value.

 * @since 2.0

 */

public static Set<File> filterSet(final IOFileFilter filter,final File... files){

  return new HashSet<>(Arrays.asList(filter(filter,files)));

}

Location: FileFilterUtils.java

Content: 

/** 

 * <p> Applies an  {@link IOFileFilter} to the provided {@link File}objects. The resulting set is a subset of the original file list that matches the provided filter. </p> <p> The  {@link Set} returned by this method is not guaranteed to be thread safe.</p> <pre> Set&lt;File&gt; allFiles = ... Set&lt;File&gt; javaFiles = FileFilterUtils.filterSet(allFiles, FileFilterUtils.suffixFileFilter(".java")); </pre>

 * @param filter the filter to apply to the set of files.

 * @param files the collection of files to apply the filter to.

 * @return a subset of {@code files} that is accepted by thefile filter.

 * @throws IllegalArgumentException if the filter is {@code null}

 * @since 2.0

 */

public static Set<File> filterSet(final IOFileFilter filter,final Iterable<File> files){

  if (files == null) {

    return Collections.emptySet();

  }

  return filterFiles(filter,StreamSupport.stream(files.spliterator(),false),Collectors.toSet());

}

Location: FileFilterUtils.java

Content: 

/** 

 * <p> Applies an  {@link IOFileFilter} to the provided {@link File}objects. The resulting array is a subset of the original file list that matches the provided filter. </p> <pre> Set&lt;File&gt; allFiles = ... Set&lt;File&gt; javaFiles = FileFilterUtils.filterSet(allFiles, FileFilterUtils.suffixFileFilter(".java")); </pre>

 * @param filter the filter to apply to the set of files.

 * @param files the array of files to apply the filter to.

 * @return a subset of {@code files} that is accepted by thefile filter.

 * @throws IllegalArgumentException if the filter is {@code null}or  {@code files} contains a {@code null} value.

 * @since 2.0

 */

public static File[] filter(final IOFileFilter filter,final File... files){

  if (filter == null) {

    throw new IllegalArgumentException("file filter is null");

  }

  if (files == null) {

    return FileUtils.EMPTY_FILE_ARRAY;

  }

  return filterFiles(filter,Stream.of(files),Collectors.toList()).toArray(FileUtils.EMPTY_FILE_ARRAY);

}

Location: FileFilterUtils.java

Content: 

/** 

 * <p> Applies an  {@link IOFileFilter} to the provided {@link File}objects. The resulting array is a subset of the original file list that matches the provided filter. </p> <p> The  {@link Set} returned by this method is not guaranteed to be thread safe.</p> <pre> Set&lt;File&gt; allFiles = ... Set&lt;File&gt; javaFiles = FileFilterUtils.filterSet(allFiles, FileFilterUtils.suffixFileFilter(".java")); </pre>

 * @param filter the filter to apply to the set of files.

 * @param files the array of files to apply the filter to.

 * @return a subset of {@code files} that is accepted by thefile filter.

 * @throws IllegalArgumentException if the filter is {@code null}or  {@code files} contains a {@code null} value.

 * @since 2.0

 */

public static File[] filter(final IOFileFilter filter,final Iterable<File> files){

  return filterList(filter,files).toArray(FileUtils.EMPTY_FILE_ARRAY);

}

Location: FileFilterUtils.java

Content: 

/** 

 * Decorates a filter to make it ignore CVS directories. Passing in  {@code null} will return a filter that accepts everythingexcept CVS directories.

 * @param filter  the filter to decorate, null means an unrestricted filter

 * @return the decorated filter, never null

 * @since 1.1 (method existed but had bug in 1.0)

 */

public static IOFileFilter makeCVSAware(final IOFileFilter filter){

  return filter == null ? cvsFilter : and(filter,cvsFilter);

}

Location: FileFilterUtils.java

Content: 

/** 

 * Decorates a filter so that it only applies to directories and not to files.

 * @param filter  the filter to decorate, null means an unrestricted filter

 * @return the decorated filter, never null

 * @see DirectoryFileFilter#DIRECTORY

 * @since 1.3

 */

public static IOFileFilter makeDirectoryOnly(final IOFileFilter filter){

  if (filter == null) {

    return DirectoryFileFilter.DIRECTORY;

  }

  return DirectoryFileFilter.DIRECTORY.and(filter);

}

Location: FileFilterUtils.java

Content: 

/** 

 * Decorates a filter so that it only applies to files and not to directories.

 * @param filter  the filter to decorate, null means an unrestricted filter

 * @return the decorated filter, never null

 * @see FileFileFilter#INSTANCE

 * @since 1.3

 */

public static IOFileFilter makeFileOnly(final IOFileFilter filter){

  if (filter == null) {

    return FileFileFilter.INSTANCE;

  }

  return FileFileFilter.INSTANCE.and(filter);

}

Location: FileFilterUtils.java

Content: 

/** 

 * Decorates a filter to make it ignore SVN directories. Passing in  {@code null} will return a filter that accepts everythingexcept SVN directories.

 * @param filter  the filter to decorate, null means an unrestricted filter

 * @return the decorated filter, never null

 * @since 1.1

 */

public static IOFileFilter makeSVNAware(final IOFileFilter filter){

  return filter == null ? svnFilter : and(filter,svnFilter);

}

Location: FileFilterUtils.java

Content: 

/** 

 * Returns a filter that accepts files whose size is &gt;= minimum size and &lt;= maximum size.

 * @param minSizeInclusive the minimum file size (inclusive)

 * @param maxSizeInclusive the maximum file size (inclusive)

 * @return an appropriately configured IOFileFilter

 * @see SizeFileFilter

 * @since 1.3

 */

public static IOFileFilter sizeRangeFileFilter(final long minSizeInclusive,final long maxSizeInclusive){

  final IOFileFilter minimumFilter=new SizeFileFilter(minSizeInclusive,true);

  final IOFileFilter maximumFilter=new SizeFileFilter(maxSizeInclusive + 1L,false);

  return minimumFilter.and(maximumFilter);

}

Location: FileFilterUtils.java

Content: 

/** 

 * Returns a filter that returns true if the file name ends with the specified text.

 * @param suffix  the file name suffix

 * @return a suffix checking filter

 * @see SuffixFileFilter

 */

public static IOFileFilter suffixFileFilter(final String suffix){

  return new SuffixFileFilter(suffix);

}

Location: FileFilterUtils.java

Content: 

/** 

 * Returns a filter that returns true if the file name ends with the specified text.

 * @param suffix  the file name suffix

 * @param ioCase  how to handle case sensitivity, null means case-sensitive

 * @return a suffix checking filter

 * @see SuffixFileFilter

 * @since 2.0

 */

public static IOFileFilter suffixFileFilter(final String suffix,final IOCase ioCase){

  return new SuffixFileFilter(suffix,ioCase);

}

Location: FileFilterUtils.java

Content: 

/** 

 * Create a List of file filters.

 * @param filters The file filters

 * @return The list of file filters

 * @throws IllegalArgumentException if the filters are null or contain anull value.

 * @since 2.0

 */

public static List<IOFileFilter> toList(final IOFileFilter... filters){

  if (filters == null) {

    throw new IllegalArgumentException("The filters must not be null");

  }

  final List<IOFileFilter> list=new ArrayList<>(filters.length);

  for (int i=0; i < filters.length; i++) {

    if (filters[i] == null) {

      throw new IllegalArgumentException("The filter[" + i + "] is null");

    }

    list.add(filters[i]);

  }

  return list;

}

