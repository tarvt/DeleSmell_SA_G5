Location: FilterCollectionWriter.java

Content: 

/** 

 * Adds an indexed exception to the list.

 * @param causeList The target list.

 * @param i The index.

 * @param e The cause.

 * @return the given list or a new list on null input.

 */

private List<Exception> add(List<Exception> causeList,final int i,final IOException e){

  if (causeList == null) {

    causeList=new ArrayList<>();

  }

  causeList.add(new IOIndexedException(i,e));

  return causeList;

}

Location: FilterCollectionWriter.java

Content: 

/** 

 * Creates a new filtered collection writer.

 * @param writers Writers to provide the underlying targets.

 */

protected FilterCollectionWriter(final Collection<Writer> writers){

  this.writers=writers == null ? EMPTY_WRITERS : writers;

}

Location: FilterCollectionWriter.java

Content: 

/** 

 * Creates a new filtered collection writer.

 * @param writers Writers to provide the underlying targets.

 */

protected FilterCollectionWriter(final Writer... writers){

  this.writers=writers == null ? EMPTY_WRITERS : Arrays.asList(writers);

}

Location: FilterCollectionWriter.java

Content: 

/** 

 * Tests if the given list is empty in a null-safe manner.

 * @param causeList the list to test.

 * @return true if empty or null.

 */

private boolean notEmpty(final List<Exception> causeList){

  return causeList != null && !causeList.isEmpty();

}

