Location: IOUtilsTest.java

Content: 

/** 

 * Assert that the contents of two byte arrays are the same. 

 */

private void assertEqualContent(final byte[] b0,final byte[] b1){

  assertArrayEquals(b0,b1,"Content not equal according to java.util.Arrays#equals()");

}

Location: IOUtilsTest.java

Content: 

@Test public void testAsBufferedInputStream(){

  final InputStream is=new InputStream(){

    @Override public int read() throws IOException {

      return 0;

    }

  }

;

  final BufferedInputStream bis=IOUtils.buffer(is);

  assertNotSame(is,bis);

  assertSame(bis,IOUtils.buffer(bis));

}

Location: IOUtilsTest.java

Content: 

@Test public void testAsBufferedInputStreamWithBufferSize(){

  final InputStream is=new InputStream(){

    @Override public int read() throws IOException {

      return 0;

    }

  }

;

  final BufferedInputStream bis=IOUtils.buffer(is,2048);

  assertNotSame(is,bis);

  assertSame(bis,IOUtils.buffer(bis));

  assertSame(bis,IOUtils.buffer(bis,1024));

}

Location: IOUtilsTest.java

Content: 

@Test public void testAsBufferedNull(){

  try {

    IOUtils.buffer((InputStream)null);

    fail("Expected NullPointerException");

  }

 catch (  final NullPointerException npe) {

  }

  try {

    IOUtils.buffer((OutputStream)null);

    fail("Expected NullPointerException");

  }

 catch (  final NullPointerException npe) {

  }

  try {

    IOUtils.buffer((Reader)null);

    fail("Expected NullPointerException");

  }

 catch (  final NullPointerException npe) {

  }

  try {

    IOUtils.buffer((Writer)null);

    fail("Expected NullPointerException");

  }

 catch (  final NullPointerException npe) {

  }

}

Location: IOUtilsTest.java

Content: 

@Test public void testAsBufferedOutputStream(){

  final OutputStream is=new OutputStream(){

    @Override public void write(    final int b) throws IOException {

    }

  }

;

  final BufferedOutputStream bis=IOUtils.buffer(is);

  assertNotSame(is,bis);

  assertSame(bis,IOUtils.buffer(bis));

}

Location: IOUtilsTest.java

Content: 

@Test public void testAsBufferedOutputStreamWithBufferSize(){

  final OutputStream os=new OutputStream(){

    @Override public void write(    final int b) throws IOException {

    }

  }

;

  final BufferedOutputStream bos=IOUtils.buffer(os,2048);

  assertNotSame(os,bos);

  assertSame(bos,IOUtils.buffer(bos));

  assertSame(bos,IOUtils.buffer(bos,1024));

}

Location: IOUtilsTest.java

Content: 

@Test public void testAsBufferedReader(){

  final Reader is=new Reader(){

    @Override public void close() throws IOException {

    }

    @Override public int read(    final char[] cbuf,    final int off,    final int len) throws IOException {

      return 0;

    }

  }

;

  final BufferedReader bis=IOUtils.buffer(is);

  assertNotSame(is,bis);

  assertSame(bis,IOUtils.buffer(bis));

}

Location: IOUtilsTest.java

Content: 

@Test public void testAsBufferedReaderWithBufferSize(){

  final Reader r=new Reader(){

    @Override public void close() throws IOException {

    }

    @Override public int read(    final char[] cbuf,    final int off,    final int len) throws IOException {

      return 0;

    }

  }

;

  final BufferedReader br=IOUtils.buffer(r,2048);

  assertNotSame(r,br);

  assertSame(br,IOUtils.buffer(br));

  assertSame(br,IOUtils.buffer(br,1024));

}

Location: IOUtilsTest.java

Content: 

@Test public void testAsBufferedWriter(){

  final Writer is=new Writer(){

    @Override public void close() throws IOException {

    }

    @Override public void flush() throws IOException {

    }

    @Override public void write(    final char[] cbuf,    final int off,    final int len) throws IOException {

    }

    @Override public void write(    final int b) throws IOException {

    }

  }

;

  final BufferedWriter bis=IOUtils.buffer(is);

  assertNotSame(is,bis);

  assertSame(bis,IOUtils.buffer(bis));

}

Location: IOUtilsTest.java

Content: 

@Test public void testAsBufferedWriterWithBufferSize(){

  final Writer w=new Writer(){

    @Override public void close() throws IOException {

    }

    @Override public void flush() throws IOException {

    }

    @Override public void write(    final char[] cbuf,    final int off,    final int len) throws IOException {

    }

    @Override public void write(    final int b) throws IOException {

    }

  }

;

  final BufferedWriter bw=IOUtils.buffer(w,2024);

  assertNotSame(w,bw);

  assertSame(bw,IOUtils.buffer(bw));

  assertSame(bw,IOUtils.buffer(bw,1024));

}

Location: IOUtilsTest.java

Content: 

@Test public void testAsWriterAppendable(){

  final Appendable a=new StringBuffer();

  final Writer w=IOUtils.writer(a);

  assertNotSame(w,a);

  assertEquals(AppendableWriter.class,w.getClass());

  assertSame(w,IOUtils.writer(w));

}

Location: IOUtilsTest.java

Content: 

@Test public void testAsWriterNull(){

  assertThrows(NullPointerException.class,() -> IOUtils.writer(null));

}

Location: IOUtilsTest.java

Content: 

@Test public void testAsWriterStringBuilder(){

  final Appendable a=new StringBuilder();

  final Writer w=IOUtils.writer(a);

  assertNotSame(w,a);

  assertEquals(StringBuilderWriter.class,w.getClass());

  assertSame(w,IOUtils.writer(w));

}

Location: IOUtilsTest.java

Content: 

@Test public void testCloseConsumer(){

  final Closeable nullCloseable=null;

  assertDoesNotThrow(() -> IOUtils.close(nullCloseable,null));

  assertDoesNotThrow(() -> IOUtils.close(new StringReader("s"),null));

  assertDoesNotThrow(() -> IOUtils.close(new ThrowOnCloseReader(new StringReader("s")),null));

  final IOConsumer<IOException> nullConsumer=null;

  assertDoesNotThrow(() -> IOUtils.close(nullCloseable,nullConsumer));

  assertDoesNotThrow(() -> IOUtils.close(new StringReader("s"),nullConsumer));

  assertDoesNotThrow(() -> IOUtils.close(new ThrowOnCloseReader(new StringReader("s")),nullConsumer));

  final IOConsumer<IOException> silentConsumer=IOConsumer.noop();

  assertDoesNotThrow(() -> IOUtils.close(nullCloseable,silentConsumer));

  assertDoesNotThrow(() -> IOUtils.close(new StringReader("s"),silentConsumer));

  assertDoesNotThrow(() -> IOUtils.close(new ThrowOnCloseReader(new StringReader("s")),silentConsumer));

  final IOConsumer<IOException> noisyConsumer=i -> {

    throw i;

  }

;

  assertDoesNotThrow(() -> IOUtils.close(nullCloseable,noisyConsumer));

  assertDoesNotThrow(() -> IOUtils.close(new StringReader("s"),noisyConsumer));

  assertThrows(IOException.class,() -> IOUtils.close(new ThrowOnCloseReader(new StringReader("s")),noisyConsumer));

}

Location: IOUtilsTest.java

Content: 

@Test public void testCloseMulti(){

  final Closeable nullCloseable=null;

  final Closeable[] closeables={null,null};

  assertDoesNotThrow(() -> IOUtils.close(nullCloseable,nullCloseable));

  assertDoesNotThrow(() -> IOUtils.close(closeables));

  assertDoesNotThrow(() -> IOUtils.close((Closeable[])null));

  assertDoesNotThrow(() -> IOUtils.close(new StringReader("s"),nullCloseable));

  assertThrows(IOException.class,() -> IOUtils.close(nullCloseable,new ThrowOnCloseReader(new StringReader("s"))));

}

Location: IOUtilsTest.java

Content: 

@Test public void testCloseQuietly_AllCloseableIOException(){

  final Closeable closeable=() -> {

    throw new IOException();

  }

;

  assertDoesNotThrow(() -> IOUtils.closeQuietly(closeable,null,closeable));

}

Location: IOUtilsTest.java

Content: 

@Test public void testCloseQuietly_CloseableIOException(){

  assertDoesNotThrow(() -> {

    IOUtils.closeQuietly(() -> {

      throw new IOException();

    }

);

  }

);

}

Location: IOUtilsTest.java

Content: 

@SuppressWarnings("squid:S2699") @Test public void testCloseQuietly_Selector(){

  Selector selector=null;

  try {

    selector=Selector.open();

  }

 catch (  final IOException ignore) {

  }

 finally {

    IOUtils.closeQuietly(selector);

  }

}

Location: IOUtilsTest.java

Content: 

@SuppressWarnings("squid:S2699") @Test public void testCloseQuietly_SelectorIOException(){

  final Selector selector=new SelectorAdapter(){

    @Override public void close() throws IOException {

      throw new IOException();

    }

  }

;

  IOUtils.closeQuietly(selector);

}

Location: IOUtilsTest.java

Content: 

@SuppressWarnings("squid:S2699") @Test public void testCloseQuietly_SelectorNull(){

  final Selector selector=null;

  IOUtils.closeQuietly(selector);

}

Location: IOUtilsTest.java

Content: 

@SuppressWarnings("squid:S2699") @Test public void testCloseQuietly_SelectorTwice(){

  Selector selector=null;

  try {

    selector=Selector.open();

  }

 catch (  final IOException ignore) {

  }

 finally {

    IOUtils.closeQuietly(selector);

    IOUtils.closeQuietly(selector);

  }

}

Location: IOUtilsTest.java

Content: 

@Test public void testCloseQuietly_ServerSocket(){

  assertDoesNotThrow(() -> IOUtils.closeQuietly((ServerSocket)null));

  assertDoesNotThrow(() -> IOUtils.closeQuietly(new ServerSocket()));

}

Location: IOUtilsTest.java

Content: 

@Test public void testCloseQuietly_ServerSocketIOException(){

  assertDoesNotThrow(() -> {

    IOUtils.closeQuietly(new ServerSocket(){

      @Override public void close() throws IOException {

        throw new IOException();

      }

    }

);

  }

);

}

Location: IOUtilsTest.java

Content: 

@Test public void testCloseQuietly_Socket(){

  assertDoesNotThrow(() -> IOUtils.closeQuietly((Socket)null));

  assertDoesNotThrow(() -> IOUtils.closeQuietly(new Socket()));

}

Location: IOUtilsTest.java

Content: 

@Test public void testCloseQuietly_SocketIOException(){

  assertDoesNotThrow(() -> {

    IOUtils.closeQuietly(new Socket(){

      @Override public synchronized void close() throws IOException {

        throw new IOException();

      }

    }

);

  }

);

}

Location: IOUtilsTest.java

Content: 

@Test public void testConstants(){

  assertEquals('/',IOUtils.DIR_SEPARATOR_UNIX);

  assertEquals('\\',IOUtils.DIR_SEPARATOR_WINDOWS);

  assertEquals("\n",IOUtils.LINE_SEPARATOR_UNIX);

  assertEquals("\r\n",IOUtils.LINE_SEPARATOR_WINDOWS);

  if (WINDOWS) {

    assertEquals('\\',IOUtils.DIR_SEPARATOR);

    assertEquals("\r\n",IOUtils.LINE_SEPARATOR);

  }

 else {

    assertEquals('/',IOUtils.DIR_SEPARATOR);

    assertEquals("\n",IOUtils.LINE_SEPARATOR);

  }

  assertEquals('\r',IOUtils.CR);

  assertEquals('\n',IOUtils.LF);

  assertEquals(-1,IOUtils.EOF);

}

Location: IOUtilsTest.java

Content: 

@Test public void testConsume() throws Exception {

  final long size=(long)Integer.MAX_VALUE + (long)1;

  final InputStream in=new NullInputStream(size);

  final OutputStream out=NullOutputStream.INSTANCE;

  assertEquals(-1,IOUtils.copy(in,out));

  in.close();

  assertEquals(size,IOUtils.consume(in),"consume()");

}

Location: IOUtilsTest.java

Content: 

@Test public void testContentEquals_InputStream_InputStream() throws Exception {

{

    assertTrue(IOUtils.contentEquals((InputStream)null,null));

  }

  final byte[] dataEmpty="".getBytes(StandardCharsets.UTF_8);

  final byte[] dataAbc="ABC".getBytes(StandardCharsets.UTF_8);

  final byte[] dataAbcd="ABCD".getBytes(StandardCharsets.UTF_8);

{

    final ByteArrayInputStream input1=new ByteArrayInputStream(dataEmpty);

    assertFalse(IOUtils.contentEquals(input1,null));

  }

{

    final ByteArrayInputStream input1=new ByteArrayInputStream(dataEmpty);

    assertFalse(IOUtils.contentEquals(null,input1));

  }

{

    final ByteArrayInputStream input1=new ByteArrayInputStream(dataEmpty);

    assertTrue(IOUtils.contentEquals(input1,input1));

  }

{

    final ByteArrayInputStream input1=new ByteArrayInputStream(dataAbc);

    assertTrue(IOUtils.contentEquals(input1,input1));

  }

  assertTrue(IOUtils.contentEquals(new ByteArrayInputStream(dataEmpty),new ByteArrayInputStream(dataEmpty)));

  assertTrue(IOUtils.contentEquals(new BufferedInputStream(new ByteArrayInputStream(dataEmpty)),new BufferedInputStream(new ByteArrayInputStream(dataEmpty))));

  assertTrue(IOUtils.contentEquals(new ByteArrayInputStream(dataAbc),new ByteArrayInputStream(dataAbc)));

  assertFalse(IOUtils.contentEquals(new ByteArrayInputStream(dataAbcd),new ByteArrayInputStream(dataAbc)));

  assertFalse(IOUtils.contentEquals(new ByteArrayInputStream(dataAbc),new ByteArrayInputStream(dataAbcd)));

  final byte[] bytes2XDefaultA=new byte[IOUtils.DEFAULT_BUFFER_SIZE * 2];

  final byte[] bytes2XDefaultB=new byte[IOUtils.DEFAULT_BUFFER_SIZE * 2];

  final byte[] bytes2XDefaultA2=new byte[IOUtils.DEFAULT_BUFFER_SIZE * 2];

  Arrays.fill(bytes2XDefaultA,(byte)'a');

  Arrays.fill(bytes2XDefaultB,(byte)'b');

  Arrays.fill(bytes2XDefaultA2,(byte)'a');

  bytes2XDefaultA2[bytes2XDefaultA2.length - 1]='d';

  assertFalse(IOUtils.contentEquals(new ByteArrayInputStream(bytes2XDefaultA),new ByteArrayInputStream(bytes2XDefaultB)));

  assertFalse(IOUtils.contentEquals(new ByteArrayInputStream(bytes2XDefaultA),new ByteArrayInputStream(bytes2XDefaultA2)));

  assertTrue(IOUtils.contentEquals(new ByteArrayInputStream(bytes2XDefaultA),new ByteArrayInputStream(bytes2XDefaultA)));

  try (final FileInputStream input1=new FileInputStream("src/test/resources/org/apache/commons/io/abitmorethan16k.txt");final FileInputStream input2=new FileInputStream("src/test/resources/org/apache/commons/io/abitmorethan16kcopy.txt")){

    assertTrue(IOUtils.contentEquals(input1,input1));

  }

 }

Location: IOUtilsTest.java

Content: 

@Test public void testContentEquals_Reader_Reader() throws Exception {

{

    assertTrue(IOUtils.contentEquals((Reader)null,null));

  }

{

    final StringReader input1=new StringReader("");

    assertFalse(IOUtils.contentEquals(null,input1));

  }

{

    final StringReader input1=new StringReader("");

    assertFalse(IOUtils.contentEquals(input1,null));

  }

{

    final StringReader input1=new StringReader("");

    assertTrue(IOUtils.contentEquals(input1,input1));

  }

{

    final StringReader input1=new StringReader("ABC");

    assertTrue(IOUtils.contentEquals(input1,input1));

  }

  assertTrue(IOUtils.contentEquals(new StringReader(""),new StringReader("")));

  assertTrue(IOUtils.contentEquals(new BufferedReader(new StringReader("")),new BufferedReader(new StringReader(""))));

  assertTrue(IOUtils.contentEquals(new StringReader("ABC"),new StringReader("ABC")));

  assertFalse(IOUtils.contentEquals(new StringReader("ABCD"),new StringReader("ABC")));

  assertFalse(IOUtils.contentEquals(new StringReader("ABC"),new StringReader("ABCD")));

}

Location: IOUtilsTest.java

Content: 

@Test public void testCopyLarge_CharExtraLength() throws IOException {

  CharArrayReader is=null;

  CharArrayWriter os=null;

  try {

    is=new CharArrayReader(carr);

    os=new CharArrayWriter();

    assertEquals(200,IOUtils.copyLarge(is,os,0,2000));

    final char[] oarr=os.toCharArray();

    assertEquals(200,oarr.length);

    assertEquals(1,oarr[1]);

    assertEquals(79,oarr[79]);

    assertEquals((char)-1,oarr[80]);

  }

  finally {

    IOUtils.closeQuietly(is);

    IOUtils.closeQuietly(os);

  }

}

Location: IOUtilsTest.java

Content: 

@Test public void testCopyLarge_CharFullLength() throws IOException {

  CharArrayReader is=null;

  CharArrayWriter os=null;

  try {

    is=new CharArrayReader(carr);

    os=new CharArrayWriter();

    assertEquals(200,IOUtils.copyLarge(is,os,0,-1));

    final char[] oarr=os.toCharArray();

    assertEquals(200,oarr.length);

    assertEquals(1,oarr[1]);

    assertEquals(79,oarr[79]);

    assertEquals((char)-1,oarr[80]);

  }

  finally {

    IOUtils.closeQuietly(is);

    IOUtils.closeQuietly(os);

  }

}

Location: IOUtilsTest.java

Content: 

@Test public void testCopyLarge_CharNoSkip() throws IOException {

  CharArrayReader is=null;

  CharArrayWriter os=null;

  try {

    is=new CharArrayReader(carr);

    os=new CharArrayWriter();

    assertEquals(100,IOUtils.copyLarge(is,os,0,100));

    final char[] oarr=os.toCharArray();

    assertEquals(100,oarr.length);

    assertEquals(1,oarr[1]);

    assertEquals(79,oarr[79]);

    assertEquals((char)-1,oarr[80]);

  }

  finally {

    IOUtils.closeQuietly(is);

    IOUtils.closeQuietly(os);

  }

}

Location: IOUtilsTest.java

Content: 

@Test public void testCopyLarge_CharSkip() throws IOException {

  CharArrayReader is=null;

  CharArrayWriter os=null;

  try {

    is=new CharArrayReader(carr);

    os=new CharArrayWriter();

    assertEquals(100,IOUtils.copyLarge(is,os,10,100));

    final char[] oarr=os.toCharArray();

    assertEquals(100,oarr.length);

    assertEquals(11,oarr[1]);

    assertEquals(79,oarr[69]);

    assertEquals((char)-1,oarr[70]);

  }

  finally {

    IOUtils.closeQuietly(is);

    IOUtils.closeQuietly(os);

  }

}

Location: IOUtilsTest.java

Content: 

@Test public void testCopyLarge_CharSkipInvalid(){

  try (CharArrayReader is=new CharArrayReader(carr);CharArrayWriter os=new CharArrayWriter()){

    assertThrows(EOFException.class,() -> IOUtils.copyLarge(is,os,1000,100));

  }

 }

Location: IOUtilsTest.java

Content: 

@Test public void testCopyLarge_ExtraLength() throws IOException {

  try (ByteArrayInputStream is=new ByteArrayInputStream(iarr);ByteArrayOutputStream os=new ByteArrayOutputStream()){

    assertEquals(200,IOUtils.copyLarge(is,os,0,2000));

    final byte[] oarr=os.toByteArray();

    assertEquals(200,oarr.length);

    assertEquals(1,oarr[1]);

    assertEquals(79,oarr[79]);

    assertEquals(-1,oarr[80]);

  }

 }

Location: IOUtilsTest.java

Content: 

@Test public void testCopyLarge_FullLength() throws IOException {

  try (ByteArrayInputStream is=new ByteArrayInputStream(iarr);ByteArrayOutputStream os=new ByteArrayOutputStream()){

    assertEquals(200,IOUtils.copyLarge(is,os,0,-1));

    final byte[] oarr=os.toByteArray();

    assertEquals(200,oarr.length);

    assertEquals(1,oarr[1]);

    assertEquals(79,oarr[79]);

    assertEquals(-1,oarr[80]);

  }

 }

Location: IOUtilsTest.java

Content: 

@Test public void testCopyLarge_NoSkip() throws IOException {

  try (ByteArrayInputStream is=new ByteArrayInputStream(iarr);ByteArrayOutputStream os=new ByteArrayOutputStream()){

    assertEquals(100,IOUtils.copyLarge(is,os,0,100));

    final byte[] oarr=os.toByteArray();

    assertEquals(100,oarr.length);

    assertEquals(1,oarr[1]);

    assertEquals(79,oarr[79]);

    assertEquals(-1,oarr[80]);

  }

 }

Location: IOUtilsTest.java

Content: 

@Test public void testCopyLarge_Skip() throws IOException {

  try (ByteArrayInputStream is=new ByteArrayInputStream(iarr);ByteArrayOutputStream os=new ByteArrayOutputStream()){

    assertEquals(100,IOUtils.copyLarge(is,os,10,100));

    final byte[] oarr=os.toByteArray();

    assertEquals(100,oarr.length);

    assertEquals(11,oarr[1]);

    assertEquals(79,oarr[69]);

    assertEquals(-1,oarr[70]);

  }

 }

Location: IOUtilsTest.java

Content: 

@Test public void testCopyLarge_SkipInvalid() throws IOException {

  try (ByteArrayInputStream is=new ByteArrayInputStream(iarr);ByteArrayOutputStream os=new ByteArrayOutputStream()){

    assertThrows(EOFException.class,() -> IOUtils.copyLarge(is,os,1000,100));

  }

 }

Location: IOUtilsTest.java

Content: 

@Test public void testCopyLarge_SkipWithInvalidOffset() throws IOException {

  ByteArrayInputStream is=null;

  ByteArrayOutputStream os=null;

  try {

    is=new ByteArrayInputStream(iarr);

    os=new ByteArrayOutputStream();

    assertEquals(100,IOUtils.copyLarge(is,os,-10,100));

    final byte[] oarr=os.toByteArray();

    assertEquals(100,oarr.length);

    assertEquals(1,oarr[1]);

    assertEquals(79,oarr[79]);

    assertEquals(-1,oarr[80]);

  }

  finally {

    IOUtils.closeQuietly(is);

    IOUtils.closeQuietly(os);

  }

}

Location: IOUtilsTest.java

Content: 

@Test public void testCopy_ByteArray_OutputStream() throws Exception {

  final File destination=TestUtils.newFile(temporaryFolder,"copy8.txt");

  final byte[] in;

  try (InputStream fin=Files.newInputStream(testFilePath)){

    in=IOUtils.toByteArray(fin);

  }

   try (OutputStream fout=Files.newOutputStream(destination.toPath())){

    CopyUtils.copy(in,fout);

    fout.flush();

    TestUtils.checkFile(destination,testFile);

    TestUtils.checkWrite(fout);

  }

   TestUtils.deleteFile(destination);

}

Location: IOUtilsTest.java

Content: 

@Test public void testCopy_ByteArray_Writer() throws Exception {

  final File destination=TestUtils.newFile(temporaryFolder,"copy7.txt");

  final byte[] in;

  try (InputStream fin=Files.newInputStream(testFilePath)){

    in=IOUtils.toByteArray(fin);

  }

   try (Writer fout=Files.newBufferedWriter(destination.toPath())){

    CopyUtils.copy(in,fout);

    fout.flush();

    TestUtils.checkFile(destination,testFile);

    TestUtils.checkWrite(fout);

  }

   TestUtils.deleteFile(destination);

}

Location: IOUtilsTest.java

Content: 

@Test public void testCopy_String_Writer() throws Exception {

  final File destination=TestUtils.newFile(temporaryFolder,"copy6.txt");

  final String str;

  try (Reader fin=Files.newBufferedReader(testFilePath)){

    str=IOUtils.toString(fin);

  }

   try (Writer fout=Files.newBufferedWriter(destination.toPath())){

    CopyUtils.copy(str,fout);

    fout.flush();

    TestUtils.checkFile(destination,testFile);

    TestUtils.checkWrite(fout);

  }

   TestUtils.deleteFile(destination);

}

Location: IOUtilsTest.java

Content: 

@Test public void testReadFully_InputStream_ByteArray() throws Exception {

  final int size=1027;

  final byte[] buffer=new byte[size];

  final InputStream input=new ByteArrayInputStream(new byte[size]);

  try {

    IOUtils.readFully(input,buffer,0,-1);

    fail("Should have failed with IllegalArgumentException");

  }

 catch (  final IllegalArgumentException expected) {

  }

  IOUtils.readFully(input,buffer,0,0);

  IOUtils.readFully(input,buffer,0,size - 1);

  try {

    IOUtils.readFully(input,buffer,0,2);

    fail("Should have failed with EOFxception");

  }

 catch (  final EOFException expected) {

  }

  IOUtils.closeQuietly(input);

}

Location: IOUtilsTest.java

Content: 

@Test public void testReadFully_InputStream_Offset() throws Exception {

  final StringInputStream stream=new StringInputStream("abcd1234",StandardCharsets.UTF_8);

  final byte[] buffer="wx00000000".getBytes(StandardCharsets.UTF_8);

  IOUtils.readFully(stream,buffer,2,8);

  assertEquals("wxabcd1234",new String(buffer,0,buffer.length,StandardCharsets.UTF_8));

  IOUtils.closeQuietly(stream);

}

Location: IOUtilsTest.java

Content: 

@Test public void testReadFully_InputStream__ReturnByteArray() throws Exception {

  final byte[] bytes="abcd1234".getBytes(StandardCharsets.UTF_8);

  final ByteArrayInputStream stream=new ByteArrayInputStream(bytes);

  final byte[] result=IOUtils.readFully(stream,bytes.length);

  IOUtils.closeQuietly(stream);

  assertEqualContent(result,bytes);

}

Location: IOUtilsTest.java

Content: 

@Test public void testReadFully_ReadableByteChannel() throws Exception {

  final ByteBuffer buffer=ByteBuffer.allocate(FILE_SIZE);

  final FileInputStream fileInputStream=new FileInputStream(testFile);

  final FileChannel input=fileInputStream.getChannel();

  try {

    IOUtils.readFully(input,buffer);

    assertEquals(FILE_SIZE,buffer.position());

    assertEquals(0,buffer.remaining());

    assertEquals(0,input.read(buffer));

    IOUtils.readFully(input,buffer);

    assertEquals(FILE_SIZE,buffer.position());

    assertEquals(0,buffer.remaining());

    assertEquals(0,input.read(buffer));

    IOUtils.readFully(input,buffer);

    buffer.clear();

    try {

      IOUtils.readFully(input,buffer);

      fail("Should have failed with EOFxception");

    }

 catch (    final EOFException expected) {

    }

  }

  finally {

    IOUtils.closeQuietly(input,fileInputStream);

  }

}

Location: IOUtilsTest.java

Content: 

@Test public void testReadFully_Reader() throws Exception {

  final int size=1027;

  final char[] buffer=new char[size];

  final Reader input=new CharArrayReader(new char[size]);

  IOUtils.readFully(input,buffer,0,0);

  IOUtils.readFully(input,buffer,0,size - 3);

  try {

    IOUtils.readFully(input,buffer,0,-1);

    fail("Should have failed with IllegalArgumentException");

  }

 catch (  final IllegalArgumentException expected) {

  }

  try {

    IOUtils.readFully(input,buffer,0,5);

    fail("Should have failed with EOFException");

  }

 catch (  final EOFException expected) {

  }

  IOUtils.closeQuietly(input);

}

Location: IOUtilsTest.java

Content: 

@Test public void testReadFully_Reader_Offset() throws Exception {

  final Reader reader=new StringReader("abcd1234");

  final char[] buffer="wx00000000".toCharArray();

  IOUtils.readFully(reader,buffer,2,8);

  assertEquals("wxabcd1234",new String(buffer));

  IOUtils.closeQuietly(reader);

}

Location: IOUtilsTest.java

Content: 

@Test public void testReadLines_InputStream() throws Exception {

  final File file=TestUtils.newFile(temporaryFolder,"lines.txt");

  InputStream in=null;

  try {

    final String[] data={"hello","world","","this is","some text"};

    TestUtils.createLineBasedFile(file,data);

    in=Files.newInputStream(file.toPath());

    final List<String> lines=IOUtils.readLines(in);

    assertEquals(Arrays.asList(data),lines);

    assertEquals(-1,in.read());

  }

  finally {

    IOUtils.closeQuietly(in);

    TestUtils.deleteFile(file);

  }

}

Location: IOUtilsTest.java

Content: 

@Test public void testReadLines_InputStream_String() throws Exception {

  final File file=TestUtils.newFile(temporaryFolder,"lines.txt");

  InputStream in=null;

  try {

    final String[] data={"hello","/u1234","","this is","some text"};

    TestUtils.createLineBasedFile(file,data);

    in=Files.newInputStream(file.toPath());

    final List<String> lines=IOUtils.readLines(in,"UTF-8");

    assertEquals(Arrays.asList(data),lines);

    assertEquals(-1,in.read());

  }

  finally {

    IOUtils.closeQuietly(in);

    TestUtils.deleteFile(file);

  }

}

Location: IOUtilsTest.java

Content: 

@Test public void testReadLines_Reader() throws Exception {

  final File file=TestUtils.newFile(temporaryFolder,"lines.txt");

  Reader in=null;

  try {

    final String[] data={"hello","/u1234","","this is","some text"};

    TestUtils.createLineBasedFile(file,data);

    in=new InputStreamReader(Files.newInputStream(file.toPath()));

    final List<String> lines=IOUtils.readLines(in);

    assertEquals(Arrays.asList(data),lines);

    assertEquals(-1,in.read());

  }

  finally {

    IOUtils.closeQuietly(in);

    TestUtils.deleteFile(file);

  }

}

Location: IOUtilsTest.java

Content: 

@Test public void testRead_ReadableByteChannel() throws Exception {

  final ByteBuffer buffer=ByteBuffer.allocate(FILE_SIZE);

  final FileInputStream fileInputStream=new FileInputStream(testFile);

  final FileChannel input=fileInputStream.getChannel();

  try {

    assertEquals(FILE_SIZE,IOUtils.read(input,buffer));

    assertEquals(0,IOUtils.read(input,buffer));

    assertEquals(0,buffer.remaining());

    assertEquals(0,input.read(buffer));

    buffer.clear();

    try {

      IOUtils.readFully(input,buffer);

      fail("Should have failed with EOFxception");

    }

 catch (    final EOFException expected) {

    }

  }

  finally {

    IOUtils.closeQuietly(input,fileInputStream);

  }

}

Location: IOUtilsTest.java

Content: 

@Test public void testResourceToByteArray_ExistingResourceAtRootPackage() throws Exception {

  final long fileSize=TestResources.getFile("test-file-utf8.bin").length();

  final byte[] bytes=IOUtils.resourceToByteArray("/org/apache/commons/io/test-file-utf8.bin");

  assertNotNull(bytes);

  assertEquals(fileSize,bytes.length);

}

Location: IOUtilsTest.java

Content: 

@Test public void testResourceToByteArray_ExistingResourceAtRootPackage_WithClassLoader() throws Exception {

  final long fileSize=TestResources.getFile("test-file-utf8.bin").length();

  final byte[] bytes=IOUtils.resourceToByteArray("org/apache/commons/io/test-file-utf8.bin",ClassLoader.getSystemClassLoader());

  assertNotNull(bytes);

  assertEquals(fileSize,bytes.length);

}

Location: IOUtilsTest.java

Content: 

@Test public void testResourceToByteArray_ExistingResourceAtSubPackage() throws Exception {

  final long fileSize=TestResources.getFile("FileUtilsTestDataCR.dat").length();

  final byte[] bytes=IOUtils.resourceToByteArray("/org/apache/commons/io/FileUtilsTestDataCR.dat");

  assertNotNull(bytes);

  assertEquals(fileSize,bytes.length);

}

Location: IOUtilsTest.java

Content: 

@Test public void testResourceToByteArray_ExistingResourceAtSubPackage_WithClassLoader() throws Exception {

  final long fileSize=TestResources.getFile("FileUtilsTestDataCR.dat").length();

  final byte[] bytes=IOUtils.resourceToByteArray("org/apache/commons/io/FileUtilsTestDataCR.dat",ClassLoader.getSystemClassLoader());

  assertNotNull(bytes);

  assertEquals(fileSize,bytes.length);

}

Location: IOUtilsTest.java

Content: 

@Test public void testResourceToByteArray_NonExistingResource(){

  assertThrows(IOException.class,() -> IOUtils.resourceToByteArray("/non-existing-file.bin"));

}

Location: IOUtilsTest.java

Content: 

@Test public void testResourceToByteArray_NonExistingResource_WithClassLoader(){

  assertThrows(IOException.class,() -> IOUtils.resourceToByteArray("non-existing-file.bin",ClassLoader.getSystemClassLoader()));

}

Location: IOUtilsTest.java

Content: 

@Test public void testResourceToByteArray_Null(){

  assertThrows(NullPointerException.class,() -> IOUtils.resourceToByteArray(null));

}

Location: IOUtilsTest.java

Content: 

@Test public void testResourceToByteArray_Null_WithClassLoader(){

  assertThrows(NullPointerException.class,() -> IOUtils.resourceToByteArray(null,ClassLoader.getSystemClassLoader()));

}

Location: IOUtilsTest.java

Content: 

@Test public void testResourceToString_ExistingResourceAtRootPackage() throws Exception {

  final long fileSize=TestResources.getFile("test-file-simple-utf8.bin").length();

  final String content=IOUtils.resourceToString("/org/apache/commons/io/test-file-simple-utf8.bin",StandardCharsets.UTF_8);

  assertNotNull(content);

  assertEquals(fileSize,content.getBytes().length);

}

Location: IOUtilsTest.java

Content: 

@Test public void testResourceToString_ExistingResourceAtRootPackage_WithClassLoader() throws Exception {

  final long fileSize=TestResources.getFile("test-file-simple-utf8.bin").length();

  final String content=IOUtils.resourceToString("org/apache/commons/io/test-file-simple-utf8.bin",StandardCharsets.UTF_8,ClassLoader.getSystemClassLoader());

  assertNotNull(content);

  assertEquals(fileSize,content.getBytes().length);

}

Location: IOUtilsTest.java

Content: 

@Test public void testResourceToString_ExistingResourceAtSubPackage() throws Exception {

  final long fileSize=TestResources.getFile("FileUtilsTestDataCR.dat").length();

  final String content=IOUtils.resourceToString("/org/apache/commons/io/FileUtilsTestDataCR.dat",StandardCharsets.UTF_8);

  assertNotNull(content);

  assertEquals(fileSize,content.getBytes().length);

}

Location: IOUtilsTest.java

Content: 

@Test public void testResourceToString_ExistingResourceAtSubPackage_WithClassLoader() throws Exception {

  final long fileSize=TestResources.getFile("FileUtilsTestDataCR.dat").length();

  final String content=IOUtils.resourceToString("org/apache/commons/io/FileUtilsTestDataCR.dat",StandardCharsets.UTF_8,ClassLoader.getSystemClassLoader());

  assertNotNull(content);

  assertEquals(fileSize,content.getBytes().length);

}

Location: IOUtilsTest.java

Content: 

@Test public void testResourceToString_NonExistingResource(){

  assertThrows(IOException.class,() -> IOUtils.resourceToString("/non-existing-file.bin",StandardCharsets.UTF_8));

}

Location: IOUtilsTest.java

Content: 

@Test public void testResourceToString_NonExistingResource_WithClassLoader(){

  assertThrows(IOException.class,() -> IOUtils.resourceToString("non-existing-file.bin",StandardCharsets.UTF_8,ClassLoader.getSystemClassLoader()));

}

Location: IOUtilsTest.java

Content: 

@SuppressWarnings("squid:S2699") @Test public void testResourceToString_NullCharset() throws Exception {

  IOUtils.resourceToString("/org/apache/commons/io//test-file-utf8.bin",null);

}

Location: IOUtilsTest.java

Content: 

@SuppressWarnings("squid:S2699") @Test public void testResourceToString_NullCharset_WithClassLoader() throws Exception {

  IOUtils.resourceToString("org/apache/commons/io/test-file-utf8.bin",null,ClassLoader.getSystemClassLoader());

}

Location: IOUtilsTest.java

Content: 

@Test public void testResourceToString_NullResource(){

  assertThrows(NullPointerException.class,() -> IOUtils.resourceToString(null,StandardCharsets.UTF_8));

}

Location: IOUtilsTest.java

Content: 

@Test public void testResourceToString_NullResource_WithClassLoader(){

  assertThrows(NullPointerException.class,() -> IOUtils.resourceToString(null,StandardCharsets.UTF_8,ClassLoader.getSystemClassLoader()));

}

Location: IOUtilsTest.java

Content: 

@Test public void testResourceToURL_ExistingResourceAtRootPackage() throws Exception {

  final URL url=IOUtils.resourceToURL("/org/apache/commons/io/test-file-utf8.bin");

  assertNotNull(url);

  assertTrue(url.getFile().endsWith("/test-file-utf8.bin"));

}

Location: IOUtilsTest.java

Content: 

@Test public void testResourceToURL_ExistingResourceAtRootPackage_WithClassLoader() throws Exception {

  final URL url=IOUtils.resourceToURL("org/apache/commons/io/test-file-utf8.bin",ClassLoader.getSystemClassLoader());

  assertNotNull(url);

  assertTrue(url.getFile().endsWith("/org/apache/commons/io/test-file-utf8.bin"));

}

Location: IOUtilsTest.java

Content: 

@Test public void testResourceToURL_ExistingResourceAtSubPackage() throws Exception {

  final URL url=IOUtils.resourceToURL("/org/apache/commons/io/FileUtilsTestDataCR.dat");

  assertNotNull(url);

  assertTrue(url.getFile().endsWith("/org/apache/commons/io/FileUtilsTestDataCR.dat"));

}

Location: IOUtilsTest.java

Content: 

@Test public void testResourceToURL_ExistingResourceAtSubPackage_WithClassLoader() throws Exception {

  final URL url=IOUtils.resourceToURL("org/apache/commons/io/FileUtilsTestDataCR.dat",ClassLoader.getSystemClassLoader());

  assertNotNull(url);

  assertTrue(url.getFile().endsWith("/org/apache/commons/io/FileUtilsTestDataCR.dat"));

}

Location: IOUtilsTest.java

Content: 

@Test public void testResourceToURL_NonExistingResource(){

  assertThrows(IOException.class,() -> IOUtils.resourceToURL("/non-existing-file.bin"));

}

Location: IOUtilsTest.java

Content: 

@Test public void testResourceToURL_NonExistingResource_WithClassLoader(){

  assertThrows(IOException.class,() -> IOUtils.resourceToURL("non-existing-file.bin",ClassLoader.getSystemClassLoader()));

}

Location: IOUtilsTest.java

Content: 

@Test public void testResourceToURL_Null(){

  assertThrows(NullPointerException.class,() -> IOUtils.resourceToURL(null));

}

Location: IOUtilsTest.java

Content: 

@Test public void testResourceToURL_Null_WithClassLoader(){

  assertThrows(NullPointerException.class,() -> IOUtils.resourceToURL(null,ClassLoader.getSystemClassLoader()));

}

Location: IOUtilsTest.java

Content: 

@Test public void testSkipFully_InputStream() throws Exception {

  final int size=1027;

  final InputStream input=new ByteArrayInputStream(new byte[size]);

  try {

    IOUtils.skipFully(input,-1);

    fail("Should have failed with IllegalArgumentException");

  }

 catch (  final IllegalArgumentException expected) {

  }

  IOUtils.skipFully(input,0);

  IOUtils.skipFully(input,size - 1);

  try {

    IOUtils.skipFully(input,2);

    fail("Should have failed with IOException");

  }

 catch (  final IOException expected) {

  }

  IOUtils.closeQuietly(input);

}

Location: IOUtilsTest.java

Content: 

@Test public void testSkipFully_ReadableByteChannel() throws Exception {

  final FileInputStream fileInputStream=new FileInputStream(testFile);

  final FileChannel fileChannel=fileInputStream.getChannel();

  try {

    try {

      IOUtils.skipFully(fileChannel,-1);

      fail("Should have failed with IllegalArgumentException");

    }

 catch (    final IllegalArgumentException expected) {

    }

    IOUtils.skipFully(fileChannel,0);

    IOUtils.skipFully(fileChannel,FILE_SIZE - 1);

    try {

      IOUtils.skipFully(fileChannel,2);

      fail("Should have failed with IOException");

    }

 catch (    final IOException expected) {

    }

  }

  finally {

    IOUtils.closeQuietly(fileChannel,fileInputStream);

  }

}

Location: IOUtilsTest.java

Content: 

@Test public void testSkipFully_Reader() throws Exception {

  final int size=1027;

  final Reader input=new CharArrayReader(new char[size]);

  IOUtils.skipFully(input,0);

  IOUtils.skipFully(input,size - 3);

  try {

    IOUtils.skipFully(input,-1);

    fail("Should have failed with IllegalArgumentException");

  }

 catch (  final IllegalArgumentException expected) {

  }

  try {

    IOUtils.skipFully(input,5);

    fail("Should have failed with IOException");

  }

 catch (  final IOException expected) {

  }

  IOUtils.closeQuietly(input);

}

Location: IOUtilsTest.java

Content: 

@Test public void testSkip_FileReader() throws Exception {

  try (Reader in=Files.newBufferedReader(testFilePath)){

    assertEquals(FILE_SIZE - 10,IOUtils.skip(in,FILE_SIZE - 10));

    assertEquals(10,IOUtils.skip(in,20));

    assertEquals(0,IOUtils.skip(in,10));

  }

 }

Location: IOUtilsTest.java

Content: 

@Test public void testSkip_InputStream() throws Exception {

  try (InputStream in=Files.newInputStream(testFilePath)){

    assertEquals(FILE_SIZE - 10,IOUtils.skip(in,FILE_SIZE - 10));

    assertEquals(10,IOUtils.skip(in,20));

    assertEquals(0,IOUtils.skip(in,10));

  }

 }

Location: IOUtilsTest.java

Content: 

@Test public void testSkip_ReadableByteChannel() throws Exception {

  final FileInputStream fileInputStream=new FileInputStream(testFile);

  final FileChannel fileChannel=fileInputStream.getChannel();

  try {

    assertEquals(FILE_SIZE - 10,IOUtils.skip(fileChannel,FILE_SIZE - 10));

    assertEquals(10,IOUtils.skip(fileChannel,20));

    assertEquals(0,IOUtils.skip(fileChannel,10));

  }

  finally {

    IOUtils.closeQuietly(fileChannel,fileInputStream);

  }

}

Location: IOUtilsTest.java

Content: 

@Test public void testStringToOutputStream() throws Exception {

  final File destination=TestUtils.newFile(temporaryFolder,"copy5.txt");

  final String str;

  try (Reader fin=Files.newBufferedReader(testFilePath)){

    str=IOUtils.toString(fin);

  }

   try (OutputStream fout=Files.newOutputStream(destination.toPath())){

    CopyUtils.copy(str,fout);

    TestUtils.checkFile(destination,testFile);

    TestUtils.checkWrite(fout);

  }

   TestUtils.deleteFile(destination);

}

Location: IOUtilsTest.java

Content: 

@Test public void testToBufferedInputStreamWithBufferSize_InputStream() throws Exception {

  try (InputStream fin=Files.newInputStream(testFilePath)){

    final InputStream in=IOUtils.toBufferedInputStream(fin,2048);

    final byte[] out=IOUtils.toByteArray(in);

    assertNotNull(out);

    assertEquals(0,fin.available(),"Not all bytes were read");

    assertEquals(FILE_SIZE,out.length,"Wrong output size");

    TestUtils.assertEqualContent(out,testFile);

  }

 }

Location: IOUtilsTest.java

Content: 

@Test public void testToBufferedInputStream_InputStream() throws Exception {

  try (InputStream fin=Files.newInputStream(testFilePath)){

    final InputStream in=IOUtils.toBufferedInputStream(fin);

    final byte[] out=IOUtils.toByteArray(in);

    assertNotNull(out);

    assertEquals(0,fin.available(),"Not all bytes were read");

    assertEquals(FILE_SIZE,out.length,"Wrong output size");

    TestUtils.assertEqualContent(out,testFile);

  }

 }

Location: IOUtilsTest.java

Content: 

@Test public void testToByteArray_InputStream() throws Exception {

  try (InputStream fin=Files.newInputStream(testFilePath)){

    final byte[] out=IOUtils.toByteArray(fin);

    assertNotNull(out);

    assertEquals(0,fin.available(),"Not all bytes were read");

    assertEquals(FILE_SIZE,out.length,"Wrong output size");

    TestUtils.assertEqualContent(out,testFile);

  }

 }

Location: IOUtilsTest.java

Content: 

@Test @Disabled("Disable by default as it uses too much memory and can cause builds to fail.") public void testToByteArray_InputStream_LongerThanIntegerMaxValue() throws Exception {

  final CircularInputStream cin=new CircularInputStream(IOUtils.byteArray(),Integer.MAX_VALUE + 1L);

  assertThrows(IllegalArgumentException.class,() -> IOUtils.toByteArray(cin));

}

Location: IOUtilsTest.java

Content: 

@Test public void testToByteArray_InputStream_NegativeSize() throws Exception {

  try (InputStream fin=Files.newInputStream(testFilePath)){

    IOUtils.toByteArray(fin,-1);

    fail("IllegalArgumentException expected");

  }

 catch (  final IllegalArgumentException exc) {

    assertTrue(exc.getMessage().startsWith("Size must be equal or greater than zero"),"Exception message does not start with \"Size must be equal or greater than zero\"");

  }

}

Location: IOUtilsTest.java

Content: 

@Test public void testToByteArray_InputStream_Size() throws Exception {

  try (InputStream fin=Files.newInputStream(testFilePath)){

    final byte[] out=IOUtils.toByteArray(fin,testFile.length());

    assertNotNull(out);

    assertEquals(0,fin.available(),"Not all bytes were read");

    assertEquals(FILE_SIZE,out.length,"Wrong output size: out.length=" + out.length + "!="+ FILE_SIZE);

    TestUtils.assertEqualContent(out,testFile);

  }

 }

Location: IOUtilsTest.java

Content: 

@Test public void testToByteArray_InputStream_SizeIllegal() throws Exception {

  try (InputStream fin=Files.newInputStream(testFilePath)){

    IOUtils.toByteArray(fin,testFile.length() + 1);

    fail("IOException expected");

  }

 catch (  final IOException exc) {

    assertTrue(exc.getMessage().startsWith("Unexpected read size"),"Exception message does not start with \"Unexpected read size\"");

  }

}

Location: IOUtilsTest.java

Content: 

@Test public void testToByteArray_InputStream_SizeLong() throws Exception {

  try (InputStream fin=Files.newInputStream(testFilePath)){

    IOUtils.toByteArray(fin,(long)Integer.MAX_VALUE + 1);

    fail("IOException expected");

  }

 catch (  final IllegalArgumentException exc) {

    assertTrue(exc.getMessage().startsWith("Size cannot be greater than Integer max value"),"Exception message does not start with \"Size cannot be greater than Integer max value\"");

  }

}

Location: IOUtilsTest.java

Content: 

@Test public void testToByteArray_InputStream_SizeOne() throws Exception {

  try (InputStream fin=Files.newInputStream(testFilePath)){

    final byte[] out=IOUtils.toByteArray(fin,1);

    assertNotNull(out,"Out cannot be null");

    assertEquals(1,out.length,"Out length must be 1");

  }

 }

Location: IOUtilsTest.java

Content: 

@Test public void testToByteArray_InputStream_SizeZero() throws Exception {

  try (InputStream fin=Files.newInputStream(testFilePath)){

    final byte[] out=IOUtils.toByteArray(fin,0);

    assertNotNull(out,"Out cannot be null");

    assertEquals(0,out.length,"Out length must be 0");

  }

 }

Location: IOUtilsTest.java

Content: 

@Test public void testToByteArray_Reader() throws IOException {

  final String charsetName="UTF-8";

  final byte[] expecteds=charsetName.getBytes(charsetName);

  byte[] actuals=IOUtils.toByteArray(new InputStreamReader(new ByteArrayInputStream(expecteds)));

  assertArrayEquals(expecteds,actuals);

  actuals=IOUtils.toByteArray(new InputStreamReader(new ByteArrayInputStream(expecteds)),charsetName);

  assertArrayEquals(expecteds,actuals);

}

Location: IOUtilsTest.java

Content: 

@Test public void testToByteArray_String() throws Exception {

  try (Reader fin=Files.newBufferedReader(testFilePath)){

    final String str=IOUtils.toString(fin);

    final byte[] out=IOUtils.toByteArray(str);

    assertEqualContent(str.getBytes(),out);

  }

 }

Location: IOUtilsTest.java

Content: 

@Test public void testToByteArray_URI() throws Exception {

  final URI url=testFile.toURI();

  final byte[] actual=IOUtils.toByteArray(url);

  assertEquals(FILE_SIZE,actual.length);

}

Location: IOUtilsTest.java

Content: 

@Test public void testToByteArray_URL() throws Exception {

  final URL url=testFile.toURI().toURL();

  final byte[] actual=IOUtils.toByteArray(url);

  assertEquals(FILE_SIZE,actual.length);

}

Location: IOUtilsTest.java

Content: 

@Test public void testToByteArray_URLConnection() throws Exception {

  final byte[] actual;

  try (final CloseableURLConnection urlConnection=CloseableURLConnection.open(testFile.toURI())){

    actual=IOUtils.toByteArray(urlConnection);

  }

   assertEquals(FILE_SIZE,actual.length);

}

Location: IOUtilsTest.java

Content: 

@Test public void testToCharArray_InputStream() throws Exception {

  try (InputStream fin=Files.newInputStream(testFilePath)){

    final char[] out=IOUtils.toCharArray(fin);

    assertNotNull(out);

    assertEquals(0,fin.available(),"Not all chars were read");

    assertEquals(FILE_SIZE,out.length,"Wrong output size");

    TestUtils.assertEqualContent(out,testFile);

  }

 }

Location: IOUtilsTest.java

Content: 

@Test public void testToCharArray_InputStream_CharsetName() throws Exception {

  try (InputStream fin=Files.newInputStream(testFilePath)){

    final char[] out=IOUtils.toCharArray(fin,"UTF-8");

    assertNotNull(out);

    assertEquals(0,fin.available(),"Not all chars were read");

    assertEquals(FILE_SIZE,out.length,"Wrong output size");

    TestUtils.assertEqualContent(out,testFile);

  }

 }

Location: IOUtilsTest.java

Content: 

@Test public void testToCharArray_Reader() throws Exception {

  try (Reader fr=Files.newBufferedReader(testFilePath)){

    final char[] out=IOUtils.toCharArray(fr);

    assertNotNull(out);

    assertEquals(FILE_SIZE,out.length,"Wrong output size");

    TestUtils.assertEqualContent(out,testFile);

  }

 }

Location: IOUtilsTest.java

Content: 

/** 

 * Test for  {@link IOUtils#toInputStream(CharSequence)} and {@link IOUtils#toInputStream(CharSequence,String)}. Note, this test utilizes on  {@link IOUtils#toByteArray(java.io.InputStream)} and so relies on{@link #testToByteArray_InputStream()} to ensure this method functions correctly.

 * @throws Exception on error

 */

@Test public void testToInputStream_CharSequence() throws Exception {

  final CharSequence csq=new StringBuilder("Abc123Xyz!");

  InputStream inStream=IOUtils.toInputStream(csq);

  byte[] bytes=IOUtils.toByteArray(inStream);

  assertEqualContent(csq.toString().getBytes(),bytes);

  inStream=IOUtils.toInputStream(csq,(String)null);

  bytes=IOUtils.toByteArray(inStream);

  assertEqualContent(csq.toString().getBytes(),bytes);

  inStream=IOUtils.toInputStream(csq,"UTF-8");

  bytes=IOUtils.toByteArray(inStream);

  assertEqualContent(csq.toString().getBytes(StandardCharsets.UTF_8),bytes);

}

Location: IOUtilsTest.java

Content: 

/** 

 * Test for  {@link IOUtils#toInputStream(String)} and {@link IOUtils#toInputStream(String,String)}. Note, this test utilizes on  {@link IOUtils#toByteArray(java.io.InputStream)} and so relies on{@link #testToByteArray_InputStream()} to ensure this method functions correctly.

 * @throws Exception on error

 */

@Test public void testToInputStream_String() throws Exception {

  final String str="Abc123Xyz!";

  InputStream inStream=IOUtils.toInputStream(str);

  byte[] bytes=IOUtils.toByteArray(inStream);

  assertEqualContent(str.getBytes(),bytes);

  inStream=IOUtils.toInputStream(str,(String)null);

  bytes=IOUtils.toByteArray(inStream);

  assertEqualContent(str.getBytes(),bytes);

  inStream=IOUtils.toInputStream(str,"UTF-8");

  bytes=IOUtils.toByteArray(inStream);

  assertEqualContent(str.getBytes(StandardCharsets.UTF_8),bytes);

}

Location: IOUtilsTest.java

Content: 

@Test public void testToString_ByteArray() throws Exception {

  try (InputStream fin=Files.newInputStream(testFilePath)){

    final byte[] in=IOUtils.toByteArray(fin);

    final String str=IOUtils.toString(in);

    assertEqualContent(in,str.getBytes());

  }

 }

Location: IOUtilsTest.java

Content: 

@Test public void testToString_InputStream() throws Exception {

  try (InputStream fin=Files.newInputStream(testFilePath)){

    final String out=IOUtils.toString(fin);

    assertNotNull(out);

    assertEquals(0,fin.available(),"Not all bytes were read");

    assertEquals(FILE_SIZE,out.length(),"Wrong output size");

  }

 }

Location: IOUtilsTest.java

Content: 

@Test public void testToString_Reader() throws Exception {

  try (Reader fin=Files.newBufferedReader(testFilePath)){

    final String out=IOUtils.toString(fin);

    assertNotNull(out);

    assertEquals(FILE_SIZE,out.length(),"Wrong output size");

  }

 }

Location: IOUtilsTest.java

Content: 

@Test public void testToString_URI() throws Exception {

  final URI url=testFile.toURI();

  final String out=IOUtils.toString(url);

  assertNotNull(out);

  assertEquals(FILE_SIZE,out.length(),"Wrong output size");

}

Location: IOUtilsTest.java

Content: 

@Test public void testToString_URI_CharsetName() throws Exception {

  testToString_URI("US-ASCII");

}

Location: IOUtilsTest.java

Content: 

@Test public void testToString_URI_CharsetNameNull() throws Exception {

  testToString_URI(null);

}

Location: IOUtilsTest.java

Content: 

private void testToString_URI(final String encoding) throws Exception {

  final URI uri=testFile.toURI();

  final String out=IOUtils.toString(uri,encoding);

  assertNotNull(out);

  assertEquals(FILE_SIZE,out.length(),"Wrong output size");

}

Location: IOUtilsTest.java

Content: 

@Test public void testToString_URL() throws Exception {

  final URL url=testFile.toURI().toURL();

  final String out=IOUtils.toString(url);

  assertNotNull(out);

  assertEquals(FILE_SIZE,out.length(),"Wrong output size");

}

Location: IOUtilsTest.java

Content: 

@Test public void testToString_URL_CharsetName() throws Exception {

  testToString_URL("US-ASCII");

}

Location: IOUtilsTest.java

Content: 

@Test public void testToString_URL_CharsetNameNull() throws Exception {

  testToString_URL(null);

}

Location: IOUtilsTest.java

Content: 

private void testToString_URL(final String encoding) throws Exception {

  final URL url=testFile.toURI().toURL();

  final String out=IOUtils.toString(url,encoding);

  assertNotNull(out);

  assertEquals(FILE_SIZE,out.length(),"Wrong output size");

}

