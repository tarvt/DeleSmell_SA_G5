Location: FileCleaningTrackerTest.java

Content: 

protected FileCleaningTracker newInstance(){

  return new FileCleaningTracker();

}

Location: FileCleaningTrackerTest.java

Content: 

private void pauseForDeleteToComplete(File file){

  int count=0;

  while (file.exists() && count++ < 40) {

    TestUtils.sleepQuietly(500L);

    file=new File(file.getPath());

  }

}

Location: FileCleaningTrackerTest.java

Content: 

private String showFailures(){

  if (theInstance.deleteFailures.size() == 1) {

    return "[Delete Failed: " + theInstance.deleteFailures.get(0) + "]";

  }

  return "[Delete Failures: " + theInstance.deleteFailures.size() + "]";

}

Location: FileCleaningTrackerTest.java

Content: 

@Test public void testFileCleanerDirectory() throws Exception {

  TestUtils.createFile(testFile,100);

  assertTrue(testFile.exists());

  assertTrue(temporaryFolder.exists());

  Object obj=new Object();

  assertEquals(0,theInstance.getTrackCount());

  theInstance.track(temporaryFolder,obj);

  assertEquals(1,theInstance.getTrackCount());

  obj=null;

  waitUntilTrackCount();

  assertEquals(0,theInstance.getTrackCount());

  assertTrue(testFile.exists());

  assertTrue(testFile.getParentFile().exists());

}

Location: FileCleaningTrackerTest.java

Content: 

@Test public void testFileCleanerDirectory_ForceStrategy() throws Exception {

  if (!testFile.getParentFile().exists()) {

    throw new IOException("Cannot create file " + testFile + " as the parent directory does not exist");

  }

  try (final BufferedOutputStream output=new BufferedOutputStream(Files.newOutputStream(testFile.toPath()))){

    TestUtils.generateTestData(output,100);

  }

   assertTrue(testFile.exists());

  assertTrue(temporaryFolder.exists());

  Object obj=new Object();

  assertEquals(0,theInstance.getTrackCount());

  theInstance.track(temporaryFolder,obj,FileDeleteStrategy.FORCE);

  assertEquals(1,theInstance.getTrackCount());

  obj=null;

  waitUntilTrackCount();

  pauseForDeleteToComplete(testFile.getParentFile());

  assertEquals(0,theInstance.getTrackCount());

  assertFalse(new File(testFile.getPath()).exists(),showFailures());

  assertFalse(testFile.getParentFile().exists(),showFailures());

}

Location: FileCleaningTrackerTest.java

Content: 

@Test public void testFileCleanerDirectory_NullStrategy() throws Exception {

  TestUtils.createFile(testFile,100);

  assertTrue(testFile.exists());

  assertTrue(temporaryFolder.exists());

  Object obj=new Object();

  assertEquals(0,theInstance.getTrackCount());

  theInstance.track(temporaryFolder,obj,null);

  assertEquals(1,theInstance.getTrackCount());

  obj=null;

  waitUntilTrackCount();

  assertEquals(0,theInstance.getTrackCount());

  assertTrue(testFile.exists());

  assertTrue(testFile.getParentFile().exists());

}

Location: FileCleaningTrackerTest.java

Content: 

@Test public void testFileCleanerExitWhenFinished1() throws Exception {

  final String path=testFile.getPath();

  assertFalse(testFile.exists(),"1-testFile exists: " + testFile);

  RandomAccessFile r=createRandomAccessFile();

  assertTrue(testFile.exists(),"2-testFile exists");

  assertEquals(0,theInstance.getTrackCount(),"3-Track Count");

  theInstance.track(path,r);

  assertEquals(1,theInstance.getTrackCount(),"4-Track Count");

  assertFalse(theInstance.exitWhenFinished,"5-exitWhenFinished");

  assertTrue(theInstance.reaper.isAlive(),"6-reaper.isAlive");

  assertFalse(theInstance.exitWhenFinished,"7-exitWhenFinished");

  theInstance.exitWhenFinished();

  assertTrue(theInstance.exitWhenFinished,"8-exitWhenFinished");

  assertTrue(theInstance.reaper.isAlive(),"9-reaper.isAlive");

  r.close();

  testFile=null;

  r=null;

  waitUntilTrackCount();

  pauseForDeleteToComplete(new File(path));

  assertEquals(0,theInstance.getTrackCount(),"10-Track Count");

  assertFalse(new File(path).exists(),"11-testFile exists " + showFailures());

  assertTrue(theInstance.exitWhenFinished,"12-exitWhenFinished");

  assertFalse(theInstance.reaper.isAlive(),"13-reaper.isAlive");

}

Location: FileCleaningTrackerTest.java

Content: 

@Test public void testFileCleanerExitWhenFinished2() throws Exception {

  final String path=testFile.getPath();

  assertFalse(testFile.exists());

  RandomAccessFile r=createRandomAccessFile();

  assertTrue(testFile.exists());

  assertEquals(0,theInstance.getTrackCount());

  theInstance.track(path,r);

  assertEquals(1,theInstance.getTrackCount());

  assertFalse(theInstance.exitWhenFinished);

  assertTrue(theInstance.reaper.isAlive());

  r.close();

  testFile=null;

  r=null;

  waitUntilTrackCount();

  pauseForDeleteToComplete(new File(path));

  assertEquals(0,theInstance.getTrackCount());

  assertFalse(new File(path).exists(),showFailures());

  assertFalse(theInstance.exitWhenFinished);

  assertTrue(theInstance.reaper.isAlive());

  assertFalse(theInstance.exitWhenFinished);

  theInstance.exitWhenFinished();

  for (int i=0; i < 20 && theInstance.reaper.isAlive(); i++) {

    TestUtils.sleep(500L);

  }

  assertTrue(theInstance.exitWhenFinished);

  assertFalse(theInstance.reaper.isAlive());

}

Location: FileCleaningTrackerTest.java

Content: 

@Test public void testFileCleanerExitWhenFinishedFirst() throws Exception {

  assertFalse(theInstance.exitWhenFinished);

  theInstance.exitWhenFinished();

  assertTrue(theInstance.exitWhenFinished);

  assertNull(theInstance.reaper);

  waitUntilTrackCount();

  assertEquals(0,theInstance.getTrackCount());

  assertTrue(theInstance.exitWhenFinished);

  assertNull(theInstance.reaper);

}

Location: FileCleaningTrackerTest.java

Content: 

@Test public void testFileCleanerExitWhenFinished_NoTrackAfter(){

  assertFalse(theInstance.exitWhenFinished);

  theInstance.exitWhenFinished();

  assertTrue(theInstance.exitWhenFinished);

  assertNull(theInstance.reaper);

  final String path=testFile.getPath();

  final Object marker=new Object();

  assertThrows(IllegalStateException.class,() -> theInstance.track(path,marker));

  assertTrue(theInstance.exitWhenFinished);

  assertNull(theInstance.reaper);

}

Location: FileCleaningTrackerTest.java

Content: 

@Test public void testFileCleanerFile() throws Exception {

  final String path=testFile.getPath();

  assertFalse(testFile.exists());

  RandomAccessFile r=createRandomAccessFile();

  assertTrue(testFile.exists());

  assertEquals(0,theInstance.getTrackCount());

  theInstance.track(path,r);

  assertEquals(1,theInstance.getTrackCount());

  r.close();

  testFile=null;

  r=null;

  waitUntilTrackCount();

  pauseForDeleteToComplete(new File(path));

  assertEquals(0,theInstance.getTrackCount());

  assertFalse(new File(path).exists(),showFailures());

}

Location: FileCleaningTrackerTest.java

Content: 

@Test public void testFileCleanerNull(){

  assertThrows(NullPointerException.class,() -> theInstance.track((File)null,new Object()));

  assertThrows(NullPointerException.class,() -> theInstance.track((File)null,new Object(),FileDeleteStrategy.NORMAL));

  assertThrows(NullPointerException.class,() -> theInstance.track((String)null,new Object()));

  assertThrows(NullPointerException.class,() -> theInstance.track((String)null,new Object(),FileDeleteStrategy.NORMAL));

}

Location: FileCleaningTrackerTest.java

Content: 

private void waitUntilTrackCount() throws Exception {

  System.gc();

  TestUtils.sleep(500);

  int count=0;

  while (theInstance.getTrackCount() != 0 && count++ < 5) {

    List<String> list=new ArrayList<>();

    try {

      long i=0;

      while (theInstance.getTrackCount() != 0) {

        list.add("A Big String A Big String A Big String A Big String A Big String A Big String A Big String A Big String A Big String A Big String " + (i++));

      }

    }

 catch (    final Throwable ignored) {

    }

    list=null;

    System.gc();

    TestUtils.sleep(1000);

  }

  if (theInstance.getTrackCount() != 0) {

    throw new IllegalStateException("Your JVM is not releasing References, try running the testcase with less memory (-Xmx)");

  }

}

