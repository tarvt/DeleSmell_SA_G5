Location: TaggedWriter.java

Content: 

/** 

 * Tests if the given exception was caused by this writer.

 * @param exception an exception

 * @return {@code true} if the exception was thrown by this writer,{@code false} otherwise

 */

public boolean isCauseOf(final Exception exception){

  return TaggedIOException.isTaggedWith(exception,tag);

}

Location: TaggedWriter.java

Content: 

/** 

 * Creates a tagging decorator for the given writer.

 * @param proxy writer to be decorated

 */

public TaggedWriter(final Writer proxy){

  super(proxy);

}

Location: TaggedWriter.java

Content: 

/** 

 * Re-throws the original exception thrown by this writer. This method first checks whether the given exception is a  {@link TaggedIOException}wrapper created by this decorator, and then unwraps and throws the original wrapped exception. Returns normally if the exception was not thrown by this writer.

 * @param exception an exception

 * @throws IOException original exception, if any, thrown by this writer

 */

public void throwIfCauseOf(final Exception exception) throws IOException {

  TaggedIOException.throwCauseIfTaggedWith(exception,tag);

}

