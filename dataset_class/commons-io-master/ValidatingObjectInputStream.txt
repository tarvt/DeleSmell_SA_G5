Location: ValidatingObjectInputStream.java

Content: 

/** 

 * Accept the specified classes for deserialization, unless they are otherwise rejected.

 * @param classes Classes to accept

 * @return this object

 */

public ValidatingObjectInputStream accept(final Class<?>... classes){

  for (  final Class<?> c : classes) {

    acceptMatchers.add(new FullClassNameMatcher(c.getName()));

  }

  return this;

}

Location: ValidatingObjectInputStream.java

Content: 

/** 

 * Accept class names where the supplied ClassNameMatcher matches for deserialization, unless they are otherwise rejected.

 * @param m the matcher to use

 * @return this object

 */

public ValidatingObjectInputStream accept(final ClassNameMatcher m){

  acceptMatchers.add(m);

  return this;

}

Location: ValidatingObjectInputStream.java

Content: 

/** 

 * Accept class names that match the supplied pattern for deserialization, unless they are otherwise rejected.

 * @param pattern standard Java regexp

 * @return this object

 */

public ValidatingObjectInputStream accept(final Pattern pattern){

  acceptMatchers.add(new RegexpClassNameMatcher(pattern));

  return this;

}

Location: ValidatingObjectInputStream.java

Content: 

/** 

 * Accept the wildcard specified classes for deserialization, unless they are otherwise rejected.

 * @param patterns Wildcard file name patterns as defined by{@link org.apache.commons.io.FilenameUtils#wildcardMatch(String,String) FilenameUtils.wildcardMatch}

 * @return this object

 */

public ValidatingObjectInputStream accept(final String... patterns){

  for (  final String pattern : patterns) {

    acceptMatchers.add(new WildcardClassNameMatcher(pattern));

  }

  return this;

}

Location: ValidatingObjectInputStream.java

Content: 

/** 

 * Called to throw  {@code InvalidClassException} if an invalidclass name is found during deserialization. Can be overridden, for example to log those class names.

 * @param className name of the invalid class

 * @throws InvalidClassException if the specified class is not allowed

 */

protected void invalidClassNameFound(final String className) throws InvalidClassException {

  throw new InvalidClassException("Class name not accepted: " + className);

}

Location: ValidatingObjectInputStream.java

Content: 

/** 

 * Reject the specified classes for deserialization, even if they are otherwise accepted.

 * @param classes Classes to reject

 * @return this object

 */

public ValidatingObjectInputStream reject(final Class<?>... classes){

  for (  final Class<?> c : classes) {

    rejectMatchers.add(new FullClassNameMatcher(c.getName()));

  }

  return this;

}

Location: ValidatingObjectInputStream.java

Content: 

/** 

 * Reject class names where the supplied ClassNameMatcher matches for deserialization, even if they are otherwise accepted.

 * @param m the matcher to use

 * @return this object

 */

public ValidatingObjectInputStream reject(final ClassNameMatcher m){

  rejectMatchers.add(m);

  return this;

}

Location: ValidatingObjectInputStream.java

Content: 

/** 

 * Reject class names that match the supplied pattern for deserialization, even if they are otherwise accepted.

 * @param pattern standard Java regexp

 * @return this object

 */

public ValidatingObjectInputStream reject(final Pattern pattern){

  rejectMatchers.add(new RegexpClassNameMatcher(pattern));

  return this;

}

Location: ValidatingObjectInputStream.java

Content: 

/** 

 * Reject the wildcard specified classes for deserialization, even if they are otherwise accepted.

 * @param patterns Wildcard file name patterns as defined by{@link org.apache.commons.io.FilenameUtils#wildcardMatch(String,String) FilenameUtils.wildcardMatch}

 * @return this object

 */

public ValidatingObjectInputStream reject(final String... patterns){

  for (  final String pattern : patterns) {

    rejectMatchers.add(new WildcardClassNameMatcher(pattern));

  }

  return this;

}

Location: ValidatingObjectInputStream.java

Content: 

@Override protected Class<?> resolveClass(final ObjectStreamClass osc) throws IOException, ClassNotFoundException {

  validateClassName(osc.getName());

  return super.resolveClass(osc);

}

Location: ValidatingObjectInputStream.java

Content: 

/** 

 * Check that the classname conforms to requirements.

 * @param name The class name

 * @throws InvalidClassException when a non-accepted class is encountered

 */

private void validateClassName(final String name) throws InvalidClassException {

  for (  final ClassNameMatcher m : rejectMatchers) {

    if (m.matches(name)) {

      invalidClassNameFound(name);

    }

  }

  boolean ok=false;

  for (  final ClassNameMatcher m : acceptMatchers) {

    if (m.matches(name)) {

      ok=true;

      break;

    }

  }

  if (!ok) {

    invalidClassNameFound(name);

  }

}

Location: ValidatingObjectInputStream.java

Content: 

/** 

 * Constructs an object to deserialize the specified input stream. At least one accept method needs to be called to specify which classes can be deserialized, as by default no classes are accepted.

 * @param input an input stream

 * @throws IOException if an I/O error occurs while reading stream header

 */

public ValidatingObjectInputStream(final InputStream input) throws IOException {

  super(input);

}

