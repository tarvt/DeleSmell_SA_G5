Location: CharSequenceReaderTest.java

Content: 

private void checkArray(final char[] expected,final char[] actual){

  for (int i=0; i < expected.length; i++) {

    assertEquals(expected[i],actual[i],"Compare[" + i + "]");

  }

}

Location: CharSequenceReaderTest.java

Content: 

private void checkRead(final Reader reader,final String expected) throws IOException {

  for (int i=0; i < expected.length(); i++) {

    assertEquals(expected.charAt(i),(char)reader.read(),"Read[" + i + "] of '"+ expected+ "'");

  }

}

Location: CharSequenceReaderTest.java

Content: 

@Test public void testConstructor(){

  assertThrows(IllegalArgumentException.class,() -> new CharSequenceReader("FooBar",-1,6),"Expected exception not thrown for negative start.");

  assertThrows(IllegalArgumentException.class,() -> new CharSequenceReader("FooBar",1,0),"Expected exception not thrown for end before start.");

}

Location: CharSequenceReaderTest.java

Content: 

@Test public void testReadCharArrayPortion() throws IOException {

  final String value="FooBar";

  testReadCharArrayPortion(value);

  testReadCharArrayPortion(new StringBuilder(value));

  testReadCharArrayPortion(new StringBuffer(value));

  testReadCharArrayPortion(CharBuffer.wrap(value));

}

Location: CharSequenceReaderTest.java

Content: 

private void testReadCharArrayPortion(final CharSequence charSequence) throws IOException {

  final char[] chars=new char[10];

  try (final Reader reader=new CharSequenceReader(charSequence)){

    assertEquals(3,reader.read(chars,3,3));

    checkArray(new char[]{NONE,NONE,NONE,'F','o','o'},chars);

    assertEquals(3,reader.read(chars,0,3));

    checkArray(new char[]{'B','a','r','F','o','o',NONE},chars);

    assertEquals(-1,reader.read(chars));

  }

   Arrays.fill(chars,NONE);

  try (final Reader reader=new CharSequenceReader(charSequence,1,5)){

    assertEquals(2,reader.read(chars,3,2));

    checkArray(new char[]{NONE,NONE,NONE,'o','o',NONE},chars);

    assertEquals(2,reader.read(chars,0,3));

    checkArray(new char[]{'B','a',NONE,'o','o',NONE},chars);

    assertEquals(-1,reader.read(chars));

  }

 }

Location: CharSequenceReaderTest.java

Content: 

private void testReadCharArray(final CharSequence charSequence) throws IOException {

  try (final Reader reader=new CharSequenceReader(charSequence)){

    char[] chars=new char[2];

    assertEquals(2,reader.read(chars));

    checkArray(new char[]{'F','o'},chars);

    chars=new char[3];

    assertEquals(3,reader.read(chars));

    checkArray(new char[]{'o','B','a'},chars);

    chars=new char[3];

    assertEquals(1,reader.read(chars));

    checkArray(new char[]{'r',NONE,NONE},chars);

    assertEquals(-1,reader.read(chars));

  }

   try (final Reader reader=new CharSequenceReader(charSequence,1,5)){

    char[] chars=new char[2];

    assertEquals(2,reader.read(chars));

    checkArray(new char[]{'o','o'},chars);

    chars=new char[3];

    assertEquals(2,reader.read(chars));

    checkArray(new char[]{'B','a',NONE},chars);

    chars=new char[3];

    assertEquals(-1,reader.read(chars));

    checkArray(new char[]{NONE,NONE,NONE},chars);

    assertEquals(-1,reader.read(chars));

  }

 }

Location: CharSequenceReaderTest.java

Content: 

private void testRead(final CharSequence charSequence) throws IOException {

  try (final Reader reader=new CharSequenceReader(charSequence)){

    assertEquals('F',reader.read());

    assertEquals('o',reader.read());

    assertEquals('o',reader.read());

    assertEquals(-1,reader.read());

    assertEquals(-1,reader.read());

  }

   try (final Reader reader=new CharSequenceReader(charSequence,1,5)){

    assertEquals('o',reader.read());

    assertEquals('o',reader.read());

    assertEquals(-1,reader.read());

    assertEquals(-1,reader.read());

  }

 }

Location: CharSequenceReaderTest.java

Content: 

@Test public void testSerialization() throws IOException, ClassNotFoundException {

  try (ObjectInputStream ois=new ObjectInputStream(TestResources.getInputStream("CharSequenceReader.bin"))){

    final CharSequenceReader reader=(CharSequenceReader)ois.readObject();

    assertEquals('F',reader.read());

    assertEquals('o',reader.read());

    assertEquals('o',reader.read());

    assertEquals('B',reader.read());

    assertEquals('a',reader.read());

    assertEquals('r',reader.read());

    assertEquals(-1,reader.read());

    assertEquals(-1,reader.read());

  }

   final ByteArrayOutputStream baos=new ByteArrayOutputStream();

  try (ObjectOutputStream oos=new ObjectOutputStream(baos)){

    final CharSequenceReader reader=new CharSequenceReader("xFooBarx",1,7);

    oos.writeObject(reader);

  }

   try (ObjectInputStream ois=new ObjectInputStream(new ByteArrayInputStream(baos.toByteArray()))){

    final CharSequenceReader reader=(CharSequenceReader)ois.readObject();

    assertEquals('F',reader.read());

    assertEquals('o',reader.read());

    assertEquals('o',reader.read());

    assertEquals('B',reader.read());

    assertEquals('a',reader.read());

    assertEquals('r',reader.read());

    assertEquals(-1,reader.read());

    assertEquals(-1,reader.read());

    reader.reset();

    assertEquals('F',reader.read());

    assertEquals('o',reader.read());

    assertEquals('o',reader.read());

    assertEquals('B',reader.read());

    assertEquals('a',reader.read());

    assertEquals('r',reader.read());

    assertEquals(-1,reader.read());

    assertEquals(-1,reader.read());

  }

 }

