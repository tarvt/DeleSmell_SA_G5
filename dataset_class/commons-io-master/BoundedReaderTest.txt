Location: BoundedReaderTest.java

Content: 

@Test public void closeTest() throws IOException {

  final AtomicBoolean closed=new AtomicBoolean(false);

  try (final Reader sr=new BufferedReader(new StringReader("01234567890")){

    @Override public void close() throws IOException {

      closed.set(true);

      super.close();

    }

  }

){

    try (final BoundedReader mr=new BoundedReader(sr,3)){

    }

   }

   assertTrue(closed.get());

}

Location: BoundedReaderTest.java

Content: 

@Test public void markReset() throws IOException {

  try (final BoundedReader mr=new BoundedReader(sr,3)){

    mr.mark(3);

    mr.read();

    mr.read();

    mr.read();

    mr.reset();

    mr.read();

    mr.read();

    mr.read();

    assertEquals(-1,mr.read());

  }

 }

Location: BoundedReaderTest.java

Content: 

@Test public void markResetFromOffset1() throws IOException {

  try (final BoundedReader mr=new BoundedReader(sr,3)){

    mr.mark(3);

    mr.read();

    mr.read();

    mr.read();

    assertEquals(-1,mr.read());

    mr.reset();

    mr.mark(1);

    mr.read();

    assertEquals(-1,mr.read());

  }

 }

Location: BoundedReaderTest.java

Content: 

@Test public void markResetMarkMore() throws IOException {

  try (final BoundedReader mr=new BoundedReader(sr,3)){

    mr.mark(4);

    mr.read();

    mr.read();

    mr.read();

    mr.reset();

    mr.read();

    mr.read();

    mr.read();

    assertEquals(-1,mr.read());

  }

 }

Location: BoundedReaderTest.java

Content: 

@Test public void markResetWithMarkOutsideBoundedReaderMax() throws IOException {

  try (final BoundedReader mr=new BoundedReader(sr,3)){

    mr.mark(4);

    mr.read();

    mr.read();

    mr.read();

    assertEquals(-1,mr.read());

  }

 }

Location: BoundedReaderTest.java

Content: 

@Test public void markResetWithMarkOutsideBoundedReaderMaxAndInitialOffset() throws IOException {

  try (final BoundedReader mr=new BoundedReader(sr,3)){

    mr.read();

    mr.mark(3);

    mr.read();

    mr.read();

    assertEquals(-1,mr.read());

  }

 }

Location: BoundedReaderTest.java

Content: 

@Test public void readMulti() throws IOException {

  try (final BoundedReader mr=new BoundedReader(sr,3)){

    final char[] cbuf=new char[4];

    Arrays.fill(cbuf,'X');

    final int read=mr.read(cbuf,0,4);

    assertEquals(3,read);

    assertEquals('0',cbuf[0]);

    assertEquals('1',cbuf[1]);

    assertEquals('2',cbuf[2]);

    assertEquals('X',cbuf[3]);

  }

 }

Location: BoundedReaderTest.java

Content: 

@Test public void readMultiWithOffset() throws IOException {

  try (final BoundedReader mr=new BoundedReader(sr,3)){

    final char[] cbuf=new char[4];

    Arrays.fill(cbuf,'X');

    final int read=mr.read(cbuf,1,2);

    assertEquals(2,read);

    assertEquals('X',cbuf[0]);

    assertEquals('0',cbuf[1]);

    assertEquals('1',cbuf[2]);

    assertEquals('X',cbuf[3]);

  }

 }

Location: BoundedReaderTest.java

Content: 

@Test public void readTillEnd() throws IOException {

  try (final BoundedReader mr=new BoundedReader(sr,3)){

    mr.read();

    mr.read();

    mr.read();

    assertEquals(-1,mr.read());

  }

 }

Location: BoundedReaderTest.java

Content: 

@Test public void shortReader() throws IOException {

  try (final BoundedReader mr=new BoundedReader(shortReader,3)){

    mr.read();

    mr.read();

    assertEquals(-1,mr.read());

  }

 }

Location: BoundedReaderTest.java

Content: 

@Test public void skipTest() throws IOException {

  try (final BoundedReader mr=new BoundedReader(sr,3)){

    mr.skip(2);

    mr.read();

    assertEquals(-1,mr.read());

  }

 }

Location: BoundedReaderTest.java

Content: 

@Test public void testLineNumberReaderAndFileReaderLastLineEolNo(){

  assertTimeout(Duration.ofMillis(5000),() -> testLineNumberReaderAndFileReaderLastLine(STRING_END_NO_EOL));

}

Location: BoundedReaderTest.java

Content: 

@Test public void testLineNumberReaderAndFileReaderLastLineEolYes(){

  assertTimeout(Duration.ofMillis(5000),() -> testLineNumberReaderAndFileReaderLastLine(STRING_END_EOL));

}

Location: BoundedReaderTest.java

Content: 

public void testLineNumberReaderAndFileReaderLastLine(final String data) throws IOException {

  final Path path=Files.createTempFile(getClass().getSimpleName(),".txt");

  try {

    final File file=path.toFile();

    FileUtils.write(file,data,StandardCharsets.ISO_8859_1);

    try (Reader source=Files.newBufferedReader(file.toPath())){

      testLineNumberReader(source);

    }

   }

  finally {

    Files.delete(path);

  }

}

Location: BoundedReaderTest.java

Content: 

@Test public void testLineNumberReaderAndStringReaderLastLineEolNo(){

  assertTimeout(Duration.ofMillis(5000),() -> testLineNumberReader(new StringReader(STRING_END_NO_EOL)));

}

Location: BoundedReaderTest.java

Content: 

@Test public void testLineNumberReaderAndStringReaderLastLineEolYes(){

  assertTimeout(Duration.ofMillis(5000),() -> testLineNumberReader(new StringReader(STRING_END_EOL)));

}

Location: BoundedReaderTest.java

Content: 

private void testLineNumberReader(final Reader source) throws IOException {

  try (LineNumberReader reader=new LineNumberReader(new BoundedReader(source,10_000_000))){

    while (reader.readLine() != null) {

    }

  }

 }

Location: BoundedReaderTest.java

Content: 

@Test public void testReadBytesEOF(){

  assertTimeout(Duration.ofMillis(5000),() -> {

    final BoundedReader mr=new BoundedReader(sr,3);

    try (BufferedReader br=new BufferedReader(mr)){

      br.readLine();

      br.readLine();

    }

   }

);

}

