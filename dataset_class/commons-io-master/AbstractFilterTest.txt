Location: AbstractFilterTest.java

Content: 

void assertFiltering(final IOFileFilter filter,final File file,final boolean expected){

  assertEquals(expected,filter.accept(file),"Filter(File) " + filter.getClass().getName() + " not "+ expected+ " for "+ file);

  if (file != null && file.getParentFile() != null) {

    assertEquals(expected,filter.accept(file.getParentFile(),file.getName()),"Filter(File, String) " + filter.getClass().getName() + " not "+ expected+ " for "+ file);

  }

 else   if (file == null) {

    assertEquals(expected,filter.accept(file),"Filter(File, String) " + filter.getClass().getName() + " not "+ expected+ " for null");

  }

  assertNotNull(filter.toString());

}

Location: AbstractFilterTest.java

Content: 

void assertFiltering(final IOFileFilter filter,final Path path,final boolean expected){

  final FileVisitResult expectedFileVisitResult=AbstractFileFilter.toDefaultFileVisitResult(expected);

  assertEquals(expectedFileVisitResult,filter.accept(path,null),"Filter(Path) " + filter.getClass().getName() + " not "+ expectedFileVisitResult+ " for "+ path);

  if (path != null && path.getParent() != null) {

    assertEquals(expectedFileVisitResult,filter.accept(path,null),"Filter(Path, Path) " + filter.getClass().getName() + " not "+ expectedFileVisitResult+ " for "+ path);

  }

 else   if (path == null) {

    assertEquals(expectedFileVisitResult,filter.accept(path,null),"Filter(Path, Path) " + filter.getClass().getName() + " not "+ expectedFileVisitResult+ " for null");

  }

  assertNotNull(filter.toString());

}

Location: AbstractFilterTest.java

Content: 

void assertFooBarFileFiltering(IOFileFilter filter){

  assertFiltering(filter,new File("foo"),true);

  assertFiltering(filter,new File("foo"),true);

  assertFiltering(filter,new File("bar"),true);

  assertFiltering(filter,new File("fred"),false);

  assertFiltering(filter,new File("foo").toPath(),true);

  assertFiltering(filter,new File("foo").toPath(),true);

  assertFiltering(filter,new File("bar").toPath(),true);

  assertFiltering(filter,new File("fred").toPath(),false);

  filter=new NameFileFilter(new String[]{"foo","bar"},IOCase.SENSITIVE);

  assertFiltering(filter,new File("foo"),true);

  assertFiltering(filter,new File("bar"),true);

  assertFiltering(filter,new File("FOO"),false);

  assertFiltering(filter,new File("BAR"),false);

  assertFiltering(filter,new File("foo").toPath(),true);

  assertFiltering(filter,new File("bar").toPath(),true);

  assertFiltering(filter,new File("FOO").toPath(),false);

  assertFiltering(filter,new File("BAR").toPath(),false);

  filter=new NameFileFilter(new String[]{"foo","bar"},IOCase.INSENSITIVE);

  assertFiltering(filter,new File("foo"),true);

  assertFiltering(filter,new File("bar"),true);

  assertFiltering(filter,new File("FOO"),true);

  assertFiltering(filter,new File("BAR"),true);

  assertFiltering(filter,new File("foo").toPath(),true);

  assertFiltering(filter,new File("bar").toPath(),true);

  assertFiltering(filter,new File("FOO").toPath(),true);

  assertFiltering(filter,new File("BAR").toPath(),true);

  filter=new NameFileFilter(new String[]{"foo","bar"},IOCase.SYSTEM);

  assertFiltering(filter,new File("foo"),true);

  assertFiltering(filter,new File("bar"),true);

  assertFiltering(filter,new File("FOO"),WINDOWS);

  assertFiltering(filter,new File("BAR"),WINDOWS);

  assertFiltering(filter,new File("foo").toPath(),true);

  assertFiltering(filter,new File("bar").toPath(),true);

  assertFiltering(filter,new File("FOO").toPath(),WINDOWS);

  assertFiltering(filter,new File("BAR").toPath(),WINDOWS);

  filter=new NameFileFilter(new String[]{"foo","bar"},null);

  assertFiltering(filter,new File("foo"),true);

  assertFiltering(filter,new File("bar"),true);

  assertFiltering(filter,new File("FOO"),false);

  assertFiltering(filter,new File("BAR"),false);

  assertFiltering(filter,new File("foo").toPath(),true);

  assertFiltering(filter,new File("bar").toPath(),true);

  assertFiltering(filter,new File("FOO").toPath(),false);

  assertFiltering(filter,new File("BAR").toPath(),false);

  final java.util.ArrayList<String> list=new java.util.ArrayList<>();

  list.add("foo");

  list.add("bar");

  filter=new NameFileFilter(list);

  assertFiltering(filter,new File("foo"),true);

  assertFiltering(filter,new File("bar"),true);

  assertFiltering(filter,new File("fred"),false);

  assertFiltering(filter,new File("foo").toPath(),true);

  assertFiltering(filter,new File("bar").toPath(),true);

  assertFiltering(filter,new File("fred").toPath(),false);

  filter=new NameFileFilter("foo");

  assertFiltering(filter,new File("foo"),true);

  assertFiltering(filter,new File("FOO"),false);

  assertFiltering(filter,new File("barfoo"),false);

  assertFiltering(filter,new File("foobar"),false);

  assertFiltering(filter,new File("fred"),false);

  assertFiltering(filter,new File("foo").toPath(),true);

  assertFiltering(filter,new File("FOO").toPath(),false);

  assertFiltering(filter,new File("barfoo").toPath(),false);

  assertFiltering(filter,new File("foobar").toPath(),false);

  assertFiltering(filter,new File("fred").toPath(),false);

  filter=FileFilterUtils.nameFileFilter("foo",IOCase.INSENSITIVE);

  assertFiltering(filter,new File("foo"),true);

  assertFiltering(filter,new File("FOO"),true);

  assertFiltering(filter,new File("barfoo"),false);

  assertFiltering(filter,new File("foobar"),false);

  assertFiltering(filter,new File("fred"),false);

  assertFiltering(filter,new File("foo").toPath(),true);

  assertFiltering(filter,new File("FOO").toPath(),true);

  assertFiltering(filter,new File("barfoo").toPath(),false);

  assertFiltering(filter,new File("foobar").toPath(),false);

  assertFiltering(filter,new File("fred").toPath(),false);

}

Location: AbstractFilterTest.java

Content: 

boolean equalsLastModified(final File left,final File right) throws IOException {

  return Files.getLastModifiedTime(left.toPath()).equals(Files.getLastModifiedTime(right.toPath()));

}

