Location: FileUtilsCopyDirectoryToDirectoryTest.java

Content: 

private void assertAclEntryList(final Path sourcePath,final Path destPath) throws IOException {

  assertEquals(PathUtils.getAclEntryList(sourcePath),PathUtils.getAclEntryList(destPath));

}

Location: FileUtilsCopyDirectoryToDirectoryTest.java

Content: 

private static void assertExceptionTypeAndMessage(final File srcDir,final File destDir,final Class<? extends Exception> expectedExceptionType,final String expectedMessage){

  try {

    FileUtils.copyDirectoryToDirectory(srcDir,destDir);

  }

 catch (  final Exception e) {

    final String msg=e.getMessage();

    assertEquals(expectedExceptionType,e.getClass());

    assertEquals(expectedMessage,msg);

    return;

  }

  fail();

}

Location: FileUtilsCopyDirectoryToDirectoryTest.java

Content: 

@Test public void copyDirectoryToDirectoryThrowsIllegalArgumentExceptionWithCorrectMessageWhenDstDirIsNotDirectory() throws IOException {

  final File srcDir=new File(temporaryFolder,"sourceDirectory");

  srcDir.mkdir();

  final File destDir=new File(temporaryFolder,"notadirectory");

  destDir.createNewFile();

  final String expectedMessage=String.format("Parameter 'destinationDir' is not a directory: '%s'",destDir);

  assertExceptionTypeAndMessage(srcDir,destDir,IllegalArgumentException.class,expectedMessage);

}

Location: FileUtilsCopyDirectoryToDirectoryTest.java

Content: 

@Test public void copyDirectoryToDirectoryThrowsIllegalExceptionWithCorrectMessageWhenSrcDirIsNotDirectory() throws IOException {

  final File srcDir=File.createTempFile("notadireotry",null,temporaryFolder);

  final File destDir=new File(temporaryFolder,"destinationDirectory");

  destDir.mkdirs();

  final String expectedMessage=String.format("Parameter 'sourceDir' is not a directory: '%s'",srcDir);

  assertExceptionTypeAndMessage(srcDir,destDir,IllegalArgumentException.class,expectedMessage);

}

Location: FileUtilsCopyDirectoryToDirectoryTest.java

Content: 

@Test public void copyDirectoryToDirectoryThrowsNullPointerExceptionWithCorrectMessageWhenDstDirIsNull(){

  final File srcDir=new File(temporaryFolder,"sourceDirectory");

  srcDir.mkdir();

  final File destDir=null;

  assertExceptionTypeAndMessage(srcDir,destDir,NullPointerException.class,"destinationDir");

}

Location: FileUtilsCopyDirectoryToDirectoryTest.java

Content: 

@Test public void copyDirectoryToDirectoryThrowsNullPointerExceptionWithCorrectMessageWhenSrcDirIsNull(){

  final File srcDir=null;

  final File destinationDirectory=new File(temporaryFolder,"destinationDirectory");

  destinationDirectory.mkdir();

  assertExceptionTypeAndMessage(srcDir,destinationDirectory,NullPointerException.class,"sourceDir");

}

Location: FileUtilsCopyDirectoryToDirectoryTest.java

Content: 

@Test public void copyFileAndCheckAcl() throws IOException {

  final Path sourcePath=Files.createTempFile("TempOutput",".bin");

  final Path destPath=Paths.get(temporaryFolder.getAbsolutePath(),"SomeFile.bin");

  FileUtils.copyFile(sourcePath.toFile(),destPath.toFile(),true,StandardCopyOption.COPY_ATTRIBUTES);

  assertAclEntryList(sourcePath,destPath);

  FileUtils.copyFile(sourcePath.toFile(),destPath.toFile());

  assertAclEntryList(sourcePath,destPath);

  FileUtils.copyFile(sourcePath.toFile(),destPath.toFile(),true,StandardCopyOption.REPLACE_EXISTING);

  assertAclEntryList(sourcePath,destPath);

  FileUtils.copyFile(sourcePath.toFile(),destPath.toFile(),true,StandardCopyOption.REPLACE_EXISTING,StandardCopyOption.COPY_ATTRIBUTES);

  assertAclEntryList(sourcePath,destPath);

}

