Location: AccumulatorPathVisitorTest.java

Content: 

/** 

 * Tests an empty folder.

 */

@ParameterizedTest @MethodSource("testParameters") public void testEmptyFolder(final Supplier<AccumulatorPathVisitor> supplier) throws IOException {

  final Path tempDir=tempDirFile.toPath();

  final AccumulatorPathVisitor accPathVisitor=supplier.get();

  final PathVisitorFileFilter countingFileFilter=new PathVisitorFileFilter(accPathVisitor);

  Files.walkFileTree(tempDir,new AndFileFilter(countingFileFilter,DirectoryFileFilter.INSTANCE,EmptyFileFilter.EMPTY));

  assertCounts(1,0,0,accPathVisitor.getPathCounters());

  assertEquals(1,accPathVisitor.getDirList().size());

  assertTrue(accPathVisitor.getFileList().isEmpty());

}

Location: AccumulatorPathVisitorTest.java

Content: 

/** 

 * Tests a directory with one file of size 0.

 */

@ParameterizedTest @MethodSource("testParameters") public void testFolders1FileSize0(final Supplier<AccumulatorPathVisitor> supplier) throws IOException {

  final AccumulatorPathVisitor accPathVisitor=supplier.get();

  final PathVisitorFileFilter countingFileFilter=new PathVisitorFileFilter(accPathVisitor);

  Files.walkFileTree(Paths.get("src/test/resources/org/apache/commons/io/dirs-1-file-size-0"),countingFileFilter);

  assertCounts(1,1,0,accPathVisitor.getPathCounters());

  assertEquals(1,accPathVisitor.getDirList().size());

  assertEquals(1,accPathVisitor.getFileList().size());

}

Location: AccumulatorPathVisitorTest.java

Content: 

/** 

 * Tests a directory with one file of size 1.

 */

@ParameterizedTest @MethodSource("testParameters") public void testFolders1FileSize1(final Supplier<AccumulatorPathVisitor> supplier) throws IOException {

  final AccumulatorPathVisitor accPathVisitor=supplier.get();

  final PathVisitorFileFilter countingFileFilter=new PathVisitorFileFilter(accPathVisitor);

  Files.walkFileTree(Paths.get("src/test/resources/org/apache/commons/io/dirs-1-file-size-1"),countingFileFilter);

  assertCounts(1,1,1,accPathVisitor.getPathCounters());

  assertEquals(1,accPathVisitor.getDirList().size());

  assertEquals(1,accPathVisitor.getFileList().size());

}

Location: AccumulatorPathVisitorTest.java

Content: 

/** 

 * Tests a directory with two subdirectories, each containing one file of size 1.

 */

@ParameterizedTest @MethodSource("testParameters") public void testFolders2FileSize2(final Supplier<AccumulatorPathVisitor> supplier) throws IOException {

  final AccumulatorPathVisitor accPathVisitor=supplier.get();

  final PathVisitorFileFilter countingFileFilter=new PathVisitorFileFilter(accPathVisitor);

  Files.walkFileTree(Paths.get("src/test/resources/org/apache/commons/io/dirs-2-file-size-2"),countingFileFilter);

  assertCounts(3,2,2,accPathVisitor.getPathCounters());

  assertEquals(3,accPathVisitor.getDirList().size());

  assertEquals(2,accPathVisitor.getFileList().size());

}

Location: AccumulatorPathVisitorTest.java

Content: 

static Stream<Arguments> testParameters(){

  return Stream.of(Arguments.of((Supplier<AccumulatorPathVisitor>)AccumulatorPathVisitor::withLongCounters),Arguments.of((Supplier<AccumulatorPathVisitor>)AccumulatorPathVisitor::withBigIntegerCounters));

}

