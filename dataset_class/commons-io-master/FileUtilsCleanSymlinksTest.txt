Location: FileUtilsCleanSymlinksTest.java

Content: 

@Test public void testCleanDirWithASymlinkDir() throws Exception {

  if (System.getProperty("os.name").startsWith("Win")) {

    return;

  }

  final File realOuter=new File(top,"realouter");

  assertTrue(realOuter.mkdirs());

  final File realInner=new File(realOuter,"realinner");

  assertTrue(realInner.mkdirs());

  FileUtils.touch(new File(realInner,"file1"));

  assertEquals(1,realInner.list().length);

  final File randomDirectory=new File(top,"randomDir");

  assertTrue(randomDirectory.mkdirs());

  FileUtils.touch(new File(randomDirectory,"randomfile"));

  assertEquals(1,randomDirectory.list().length);

  final File symlinkDirectory=new File(realOuter,"fakeinner");

  assertTrue(setupSymlink(randomDirectory,symlinkDirectory));

  assertEquals(1,symlinkDirectory.list().length);

  FileUtils.cleanDirectory(realOuter);

  assertEquals(0,realOuter.list().length);

  assertEquals(1,randomDirectory.list().length,"Contents of sym link should not have been removed");

}

Location: FileUtilsCleanSymlinksTest.java

Content: 

@Test public void testCleanDirWithParentSymlinks() throws Exception {

  if (System.getProperty("os.name").startsWith("Win")) {

    return;

  }

  final File realParent=new File(top,"realparent");

  assertTrue(realParent.mkdirs());

  final File realInner=new File(realParent,"realinner");

  assertTrue(realInner.mkdirs());

  FileUtils.touch(new File(realInner,"file1"));

  assertEquals(1,realInner.list().length);

  final File randomDirectory=new File(top,"randomDir");

  assertTrue(randomDirectory.mkdirs());

  FileUtils.touch(new File(randomDirectory,"randomfile"));

  assertEquals(1,randomDirectory.list().length);

  final File symlinkDirectory=new File(realParent,"fakeinner");

  assertTrue(setupSymlink(randomDirectory,symlinkDirectory));

  assertEquals(1,symlinkDirectory.list().length);

  final File symlinkParentDirectory=new File(top,"fakeouter");

  assertTrue(setupSymlink(realParent,symlinkParentDirectory));

  FileUtils.cleanDirectory(symlinkParentDirectory);

  assertEquals(0,symlinkParentDirectory.list().length);

  assertEquals(0,realParent.list().length);

  assertEquals(1,randomDirectory.list().length,"Contents of sym link should not have been removed");

}

Location: FileUtilsCleanSymlinksTest.java

Content: 

@Test public void testCleanDirWithSymlinkFile() throws Exception {

  if (System.getProperty("os.name").startsWith("Win")) {

    return;

  }

  final File realOuter=new File(top,"realouter");

  assertTrue(realOuter.mkdirs());

  final File realInner=new File(realOuter,"realinner");

  assertTrue(realInner.mkdirs());

  final File realFile=new File(realInner,"file1");

  FileUtils.touch(realFile);

  assertEquals(1,realInner.list().length);

  final File randomFile=new File(top,"randomfile");

  FileUtils.touch(randomFile);

  final File symlinkFile=new File(realInner,"fakeinner");

  assertTrue(setupSymlink(randomFile,symlinkFile));

  assertEquals(2,realInner.list().length);

  FileUtils.cleanDirectory(realOuter);

  assertEquals(0,realOuter.list().length);

  assertTrue(randomFile.exists());

  assertFalse(symlinkFile.exists());

}

Location: FileUtilsCleanSymlinksTest.java

Content: 

@Test public void testCorrectlyIdentifySymlinkWithParentSymLink() throws Exception {

  if (System.getProperty("os.name").startsWith("Win")) {

    return;

  }

  final File realParent=new File(top,"realparent");

  assertTrue(realParent.mkdirs());

  final File symlinkParentDirectory=new File(top,"fakeparent");

  assertTrue(setupSymlink(realParent,symlinkParentDirectory));

  final File realChild=new File(symlinkParentDirectory,"realChild");

  assertTrue(realChild.mkdirs());

  final File symlinkChild=new File(symlinkParentDirectory,"fakeChild");

  assertTrue(setupSymlink(realChild,symlinkChild));

  assertTrue(FileUtils.isSymlink(symlinkChild));

  assertFalse(FileUtils.isSymlink(realChild));

}

Location: FileUtilsCleanSymlinksTest.java

Content: 

@Test public void testIdentifiesBrokenSymlinkFile() throws Exception {

  if (System.getProperty("os.name").startsWith("Win")) {

    return;

  }

  final File noexistFile=new File(top,"noexist");

  final File symlinkFile=new File(top,"fakeinner");

  final File badSymlinkInPathFile=new File(symlinkFile,"fakeinner");

  final File noexistParentFile=new File("noexist","file");

  assertTrue(setupSymlink(noexistFile,symlinkFile));

  assertTrue(FileUtils.isSymlink(symlinkFile));

  assertFalse(FileUtils.isSymlink(noexistFile));

  assertFalse(FileUtils.isSymlink(noexistParentFile));

  assertFalse(FileUtils.isSymlink(badSymlinkInPathFile));

}

Location: FileUtilsCleanSymlinksTest.java

Content: 

@Test public void testIdentifiesSymlinkDir() throws Exception {

  if (System.getProperty("os.name").startsWith("Win")) {

    return;

  }

  final File randomDirectory=new File(top,"randomDir");

  assertTrue(randomDirectory.mkdirs());

  final File symlinkDirectory=new File(top,"fakeDir");

  assertTrue(setupSymlink(randomDirectory,symlinkDirectory));

  assertTrue(FileUtils.isSymlink(symlinkDirectory));

  assertFalse(FileUtils.isSymlink(randomDirectory));

}

Location: FileUtilsCleanSymlinksTest.java

Content: 

@Test public void testIdentifiesSymlinkFile() throws Exception {

  if (System.getProperty("os.name").startsWith("Win")) {

    return;

  }

  final File randomFile=new File(top,"randomfile");

  FileUtils.touch(randomFile);

  final File symlinkFile=new File(top,"fakeinner");

  assertTrue(setupSymlink(randomFile,symlinkFile));

  assertTrue(FileUtils.isSymlink(symlinkFile));

  assertFalse(FileUtils.isSymlink(randomFile));

}

Location: FileUtilsCleanSymlinksTest.java

Content: 

@Test public void testStillClearsIfGivenDirectoryIsASymlink() throws Exception {

  if (System.getProperty("os.name").startsWith("Win")) {

    return;

  }

  final File randomDirectory=new File(top,"randomDir");

  assertTrue(randomDirectory.mkdirs());

  FileUtils.touch(new File(randomDirectory,"randomfile"));

  assertEquals(1,randomDirectory.list().length);

  final File symlinkDirectory=new File(top,"fakeDir");

  assertTrue(setupSymlink(randomDirectory,symlinkDirectory));

  FileUtils.cleanDirectory(symlinkDirectory);

  assertEquals(0,symlinkDirectory.list().length);

  assertEquals(0,randomDirectory.list().length);

}

