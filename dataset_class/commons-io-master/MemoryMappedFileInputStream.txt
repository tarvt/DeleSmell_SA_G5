Location: MemoryMappedFileInputStream.java

Content: 

private void cleanBuffer(){

  if (ByteBufferCleaner.isSupported() && buffer.isDirect()) {

    ByteBufferCleaner.clean(buffer);

  }

}

Location: MemoryMappedFileInputStream.java

Content: 

private void ensureOpen() throws IOException {

  if (closed) {

    throw new IOException("Stream closed");

  }

}

Location: MemoryMappedFileInputStream.java

Content: 

/** 

 * Constructs a new instance.

 * @param file The path of the file to to open.

 * @throws IOException If an I/O error occurs

 */

public MemoryMappedFileInputStream(final Path file) throws IOException {

  this(file,DEFAULT_BUFFER_SIZE);

}

Location: MemoryMappedFileInputStream.java

Content: 

/** 

 * Constructs a new instance.

 * @param file The path of the file to to open.

 * @param bufferSize Size of the sliding buffer.

 * @throws IOException If an I/O error occurs.

 */

public MemoryMappedFileInputStream(final Path file,final int bufferSize) throws IOException {

  this.bufferSize=bufferSize;

  this.channel=FileChannel.open(file,StandardOpenOption.READ);

}

Location: MemoryMappedFileInputStream.java

Content: 

private void nextBuffer() throws IOException {

  final long remainingInFile=channel.size() - nextBufferPosition;

  if (remainingInFile > 0) {

    final long amountToMap=Math.min(remainingInFile,bufferSize);

    cleanBuffer();

    buffer=channel.map(MapMode.READ_ONLY,nextBufferPosition,amountToMap);

    nextBufferPosition+=amountToMap;

  }

 else {

    buffer=EMPTY_BUFFER;

  }

}

