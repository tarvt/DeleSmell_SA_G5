Location: FileAlterationObserver.java

Content: 

/** 

 * Adds a file system listener.

 * @param listener The file system listener

 */

public void addListener(final FileAlterationListener listener){

  if (listener != null) {

    listeners.add(listener);

  }

}

Location: FileAlterationObserver.java

Content: 

/** 

 * Compares two file lists for files which have been created, modified or deleted.

 * @param parent The parent entry

 * @param previous The original list of files

 * @param files  The current list of files

 */

private void checkAndNotify(final FileEntry parent,final FileEntry[] previous,final File[] files){

  int c=0;

  final FileEntry[] current=files.length > 0 ? new FileEntry[files.length] : FileEntry.EMPTY_FILE_ENTRY_ARRAY;

  for (  final FileEntry entry : previous) {

    while (c < files.length && comparator.compare(entry.getFile(),files[c]) > 0) {

      current[c]=createFileEntry(parent,files[c]);

      doCreate(current[c]);

      c++;

    }

    if (c < files.length && comparator.compare(entry.getFile(),files[c]) == 0) {

      doMatch(entry,files[c]);

      checkAndNotify(entry,entry.getChildren(),listFiles(files[c]));

      current[c]=entry;

      c++;

    }

 else {

      checkAndNotify(entry,entry.getChildren(),FileUtils.EMPTY_FILE_ARRAY);

      doDelete(entry);

    }

  }

  for (; c < files.length; c++) {

    current[c]=createFileEntry(parent,files[c]);

    doCreate(current[c]);

  }

  parent.setChildren(current);

}

Location: FileAlterationObserver.java

Content: 

/** 

 * Creates a new file entry for the specified file.

 * @param parent The parent file entry

 * @param file The file to create an entry for

 * @return A new file entry

 */

private FileEntry createFileEntry(final FileEntry parent,final File file){

  final FileEntry entry=parent.newChildInstance(file);

  entry.refresh(file);

  entry.setChildren(doListFiles(file,entry));

  return entry;

}

Location: FileAlterationObserver.java

Content: 

/** 

 * Final processing.

 * @throws Exception if an error occurs

 */

@SuppressWarnings("unused") public void destroy() throws Exception {

}

Location: FileAlterationObserver.java

Content: 

/** 

 * Fires directory/file created events to the registered listeners.

 * @param entry The file entry

 */

private void doCreate(final FileEntry entry){

  for (  final FileAlterationListener listener : listeners) {

    if (entry.isDirectory()) {

      listener.onDirectoryCreate(entry.getFile());

    }

 else {

      listener.onFileCreate(entry.getFile());

    }

  }

  final FileEntry[] children=entry.getChildren();

  for (  final FileEntry aChildren : children) {

    doCreate(aChildren);

  }

}

Location: FileAlterationObserver.java

Content: 

/** 

 * Fires directory/file delete events to the registered listeners.

 * @param entry The file entry

 */

private void doDelete(final FileEntry entry){

  for (  final FileAlterationListener listener : listeners) {

    if (entry.isDirectory()) {

      listener.onDirectoryDelete(entry.getFile());

    }

 else {

      listener.onFileDelete(entry.getFile());

    }

  }

}

Location: FileAlterationObserver.java

Content: 

/** 

 * Lists the files

 * @param file The file to list files for

 * @param entry the parent entry

 * @return The child files

 */

private FileEntry[] doListFiles(final File file,final FileEntry entry){

  final File[] files=listFiles(file);

  final FileEntry[] children=files.length > 0 ? new FileEntry[files.length] : FileEntry.EMPTY_FILE_ENTRY_ARRAY;

  for (int i=0; i < files.length; i++) {

    children[i]=createFileEntry(entry,files[i]);

  }

  return children;

}

Location: FileAlterationObserver.java

Content: 

/** 

 * Fires directory/file change events to the registered listeners.

 * @param entry The previous file system entry

 * @param file The current file

 */

private void doMatch(final FileEntry entry,final File file){

  if (entry.refresh(file)) {

    for (    final FileAlterationListener listener : listeners) {

      if (entry.isDirectory()) {

        listener.onDirectoryChange(file);

      }

 else {

        listener.onFileChange(file);

      }

    }

  }

}

Location: FileAlterationObserver.java

Content: 

/** 

 * Constructs an observer for the specified directory.

 * @param directory the directory to observe

 */

public FileAlterationObserver(final File directory){

  this(directory,null);

}

Location: FileAlterationObserver.java

Content: 

/** 

 * Constructs an observer for the specified directory, file filter and file comparator.

 * @param rootEntry the root directory to observe

 * @param fileFilter The file filter or null if none

 * @param ioCase what case sensitivity to use comparing file names, null means system sensitive

 */

protected FileAlterationObserver(final FileEntry rootEntry,final FileFilter fileFilter,final IOCase ioCase){

  if (rootEntry == null) {

    throw new IllegalArgumentException("Root entry is missing");

  }

  if (rootEntry.getFile() == null) {

    throw new IllegalArgumentException("Root directory is missing");

  }

  this.rootEntry=rootEntry;

  this.fileFilter=fileFilter;

switch (IOCase.value(ioCase,IOCase.SYSTEM)) {

case SYSTEM:

    this.comparator=NameFileComparator.NAME_SYSTEM_COMPARATOR;

  break;

case INSENSITIVE:

this.comparator=NameFileComparator.NAME_INSENSITIVE_COMPARATOR;

break;

default :

this.comparator=NameFileComparator.NAME_COMPARATOR;

}

}

Location: FileAlterationObserver.java

Content: 

/** 

 * Constructs an observer for the specified directory and file filter.

 * @param directory the directory to observe

 * @param fileFilter The file filter or null if none

 */

public FileAlterationObserver(final File directory,final FileFilter fileFilter){

  this(directory,fileFilter,null);

}

Location: FileAlterationObserver.java

Content: 

/** 

 * Constructs an observer for the specified directory, file filter and file comparator.

 * @param directory the directory to observe

 * @param fileFilter The file filter or null if none

 * @param ioCase  what case sensitivity to use comparing file names, null means system sensitive

 */

public FileAlterationObserver(final File directory,final FileFilter fileFilter,final IOCase ioCase){

  this(new FileEntry(directory),fileFilter,ioCase);

}

Location: FileAlterationObserver.java

Content: 

/** 

 * Constructs an observer for the specified directory.

 * @param directoryName the name of the directory to observe

 */

public FileAlterationObserver(final String directoryName){

  this(new File(directoryName));

}

Location: FileAlterationObserver.java

Content: 

/** 

 * Constructs an observer for the specified directory and file filter.

 * @param directoryName the name of the directory to observe

 * @param fileFilter The file filter or null if none

 */

public FileAlterationObserver(final String directoryName,final FileFilter fileFilter){

  this(new File(directoryName),fileFilter);

}

Location: FileAlterationObserver.java

Content: 

/** 

 * Constructs an observer for the specified directory, file filter and file comparator.

 * @param directoryName the name of the directory to observe

 * @param fileFilter The file filter or null if none

 * @param ioCase what case sensitivity to use comparing file names, null means system sensitive

 */

public FileAlterationObserver(final String directoryName,final FileFilter fileFilter,final IOCase ioCase){

  this(new File(directoryName),fileFilter,ioCase);

}

Location: FileAlterationObserver.java

Content: 

/** 

 * Returns the directory being observed.

 * @return the directory being observed

 */

public File getDirectory(){

  return rootEntry.getFile();

}

Location: FileAlterationObserver.java

Content: 

/** 

 * Returns the fileFilter.

 * @return the fileFilter

 * @since 2.1

 */

public FileFilter getFileFilter(){

  return fileFilter;

}

Location: FileAlterationObserver.java

Content: 

/** 

 * Returns the set of registered file system listeners.

 * @return The file system listeners

 */

public Iterable<FileAlterationListener> getListeners(){

  return listeners;

}

Location: FileAlterationObserver.java

Content: 

/** 

 * Initializes the observer.

 * @throws Exception if an error occurs

 */

@SuppressWarnings("unused") public void initialize() throws Exception {

  rootEntry.refresh(rootEntry.getFile());

  rootEntry.setChildren(doListFiles(rootEntry.getFile(),rootEntry));

}

Location: FileAlterationObserver.java

Content: 

/** 

 * Lists the contents of a directory

 * @param file The file to list the contents of

 * @return the directory contents or a zero length array ifthe empty or the file is not a directory

 */

private File[] listFiles(final File file){

  File[] children=null;

  if (file.isDirectory()) {

    children=fileFilter == null ? file.listFiles() : file.listFiles(fileFilter);

  }

  if (children == null) {

    children=FileUtils.EMPTY_FILE_ARRAY;

  }

  if (comparator != null && children.length > 1) {

    Arrays.sort(children,comparator);

  }

  return children;

}

Location: FileAlterationObserver.java

Content: 

/** 

 * Removes a file system listener.

 * @param listener The file system listener

 */

public void removeListener(final FileAlterationListener listener){

  if (listener != null) {

    while (listeners.remove(listener)) {

    }

  }

}

