Location: UnsynchronizedByteArrayInputStreamTest.java

Content: 

@Test public void testConstructor1() throws IOException {

  final byte[] empty=IOUtils.EMPTY_BYTE_ARRAY;

  final byte[] one=new byte[1];

  final byte[] some=new byte[25];

  UnsynchronizedByteArrayInputStream is=new UnsynchronizedByteArrayInputStream(empty);

  assertEquals(empty.length,is.available());

  is.close();

  is=new UnsynchronizedByteArrayInputStream(one);

  assertEquals(one.length,is.available());

  is.close();

  is=new UnsynchronizedByteArrayInputStream(some);

  assertEquals(some.length,is.available());

  is.close();

}

Location: UnsynchronizedByteArrayInputStreamTest.java

Content: 

@Test @SuppressWarnings("resource") public void testConstructor2(){

  final byte[] empty=IOUtils.EMPTY_BYTE_ARRAY;

  final byte[] one=new byte[1];

  final byte[] some=new byte[25];

  UnsynchronizedByteArrayInputStream is=new UnsynchronizedByteArrayInputStream(empty,0);

  assertEquals(empty.length,is.available());

  is=new UnsynchronizedByteArrayInputStream(empty,1);

  assertEquals(0,is.available());

  is=new UnsynchronizedByteArrayInputStream(one,0);

  assertEquals(one.length,is.available());

  is=new UnsynchronizedByteArrayInputStream(one,1);

  assertEquals(0,is.available());

  is=new UnsynchronizedByteArrayInputStream(one,2);

  assertEquals(0,is.available());

  is=new UnsynchronizedByteArrayInputStream(some,0);

  assertEquals(some.length,is.available());

  is=new UnsynchronizedByteArrayInputStream(some,1);

  assertEquals(some.length - 1,is.available());

  is=new UnsynchronizedByteArrayInputStream(some,10);

  assertEquals(some.length - 10,is.available());

  is=new UnsynchronizedByteArrayInputStream(some,some.length);

  assertEquals(0,is.available());

}

Location: UnsynchronizedByteArrayInputStreamTest.java

Content: 

@Test @SuppressWarnings("resource") public void testConstructor3(){

  final byte[] empty=IOUtils.EMPTY_BYTE_ARRAY;

  final byte[] one=new byte[1];

  final byte[] some=new byte[25];

  UnsynchronizedByteArrayInputStream is=new UnsynchronizedByteArrayInputStream(empty,0);

  assertEquals(empty.length,is.available());

  is=new UnsynchronizedByteArrayInputStream(empty,1);

  assertEquals(0,is.available());

  is=new UnsynchronizedByteArrayInputStream(empty,0,1);

  assertEquals(0,is.available());

  is=new UnsynchronizedByteArrayInputStream(empty,1,1);

  assertEquals(0,is.available());

  is=new UnsynchronizedByteArrayInputStream(one,0);

  assertEquals(one.length,is.available());

  is=new UnsynchronizedByteArrayInputStream(one,1);

  assertEquals(one.length - 1,is.available());

  is=new UnsynchronizedByteArrayInputStream(one,2);

  assertEquals(0,is.available());

  is=new UnsynchronizedByteArrayInputStream(one,0,1);

  assertEquals(1,is.available());

  is=new UnsynchronizedByteArrayInputStream(one,1,1);

  assertEquals(0,is.available());

  is=new UnsynchronizedByteArrayInputStream(one,0,2);

  assertEquals(1,is.available());

  is=new UnsynchronizedByteArrayInputStream(one,2,1);

  assertEquals(0,is.available());

  is=new UnsynchronizedByteArrayInputStream(one,2,2);

  assertEquals(0,is.available());

  is=new UnsynchronizedByteArrayInputStream(some,0);

  assertEquals(some.length,is.available());

  is=new UnsynchronizedByteArrayInputStream(some,1);

  assertEquals(some.length - 1,is.available());

  is=new UnsynchronizedByteArrayInputStream(some,10);

  assertEquals(some.length - 10,is.available());

  is=new UnsynchronizedByteArrayInputStream(some,some.length);

  assertEquals(0,is.available());

  is=new UnsynchronizedByteArrayInputStream(some,some.length,some.length);

  assertEquals(0,is.available());

  is=new UnsynchronizedByteArrayInputStream(some,some.length - 1,some.length);

  assertEquals(1,is.available());

  is=new UnsynchronizedByteArrayInputStream(some,0,7);

  assertEquals(7,is.available());

  is=new UnsynchronizedByteArrayInputStream(some,7,7);

  assertEquals(7,is.available());

  is=new UnsynchronizedByteArrayInputStream(some,0,some.length * 2);

  assertEquals(some.length,is.available());

  is=new UnsynchronizedByteArrayInputStream(some,some.length - 1,7);

  assertEquals(1,is.available());

}

Location: UnsynchronizedByteArrayInputStreamTest.java

Content: 

@Test public void testInvalidConstructor2OffsetUnder(){

  assertThrows(IllegalArgumentException.class,() -> {

    new UnsynchronizedByteArrayInputStream(IOUtils.EMPTY_BYTE_ARRAY,-1);

  }

);

}

Location: UnsynchronizedByteArrayInputStreamTest.java

Content: 

@Test public void testInvalidConstructor3LengthUnder(){

  assertThrows(IllegalArgumentException.class,() -> {

    new UnsynchronizedByteArrayInputStream(IOUtils.EMPTY_BYTE_ARRAY,0,-1);

  }

);

}

Location: UnsynchronizedByteArrayInputStreamTest.java

Content: 

@Test public void testInvalidConstructor3OffsetUnder(){

  assertThrows(IllegalArgumentException.class,() -> {

    new UnsynchronizedByteArrayInputStream(IOUtils.EMPTY_BYTE_ARRAY,-1,1);

  }

);

}

Location: UnsynchronizedByteArrayInputStreamTest.java

Content: 

@Test @SuppressWarnings("resource") public void testInvalidReadArrayExplicitLenUnder(){

  final byte[] buf=IOUtils.EMPTY_BYTE_ARRAY;

  final UnsynchronizedByteArrayInputStream is=new UnsynchronizedByteArrayInputStream(new byte[]{(byte)0xa,(byte)0xb,(byte)0xc});

  assertThrows(IndexOutOfBoundsException.class,() -> {

    is.read(buf,0,-1);

  }

);

}

Location: UnsynchronizedByteArrayInputStreamTest.java

Content: 

@Test public void testInvalidReadArrayExplicitOffsetUnder(){

  final byte[] buf=IOUtils.EMPTY_BYTE_ARRAY;

  @SuppressWarnings("resource") final UnsynchronizedByteArrayInputStream is=new UnsynchronizedByteArrayInputStream(new byte[]{(byte)0xa,(byte)0xb,(byte)0xc});

  assertThrows(IndexOutOfBoundsException.class,() -> {

    is.read(buf,-1,1);

  }

);

}

Location: UnsynchronizedByteArrayInputStreamTest.java

Content: 

@Test public void testInvalidReadArrayExplicitRangeOver(){

  final byte[] buf=IOUtils.EMPTY_BYTE_ARRAY;

  @SuppressWarnings("resource") final UnsynchronizedByteArrayInputStream is=new UnsynchronizedByteArrayInputStream(new byte[]{(byte)0xa,(byte)0xb,(byte)0xc});

  assertThrows(IndexOutOfBoundsException.class,() -> {

    is.read(buf,0,1);

  }

);

}

Location: UnsynchronizedByteArrayInputStreamTest.java

Content: 

@Test public void testInvalidReadArrayNull(){

  final byte[] buf=null;

  @SuppressWarnings("resource") final UnsynchronizedByteArrayInputStream is=new UnsynchronizedByteArrayInputStream(new byte[]{(byte)0xa,(byte)0xb,(byte)0xc});

  assertThrows(NullPointerException.class,() -> {

    is.read(buf);

  }

);

}

Location: UnsynchronizedByteArrayInputStreamTest.java

Content: 

@Test public void testInvalidSkipNUnder(){

  @SuppressWarnings("resource") final UnsynchronizedByteArrayInputStream is=new UnsynchronizedByteArrayInputStream(new byte[]{(byte)0xa,(byte)0xb,(byte)0xc});

  assertThrows(IllegalArgumentException.class,() -> {

    is.skip(-1);

  }

);

}

Location: UnsynchronizedByteArrayInputStreamTest.java

Content: 

@Test public void testReadArrayExplicit(){

  byte[] buf=new byte[10];

  @SuppressWarnings("resource") UnsynchronizedByteArrayInputStream is=new UnsynchronizedByteArrayInputStream(IOUtils.EMPTY_BYTE_ARRAY);

  int read=is.read(buf,0,10);

  assertEquals(END_OF_STREAM,read);

  assertArrayEquals(new byte[10],buf);

  buf=new byte[10];

  is=new UnsynchronizedByteArrayInputStream(IOUtils.EMPTY_BYTE_ARRAY);

  read=is.read(buf,4,2);

  assertEquals(END_OF_STREAM,read);

  assertArrayEquals(new byte[10],buf);

  buf=new byte[10];

  is=new UnsynchronizedByteArrayInputStream(IOUtils.EMPTY_BYTE_ARRAY);

  read=is.read(buf,4,6);

  assertEquals(END_OF_STREAM,read);

  assertArrayEquals(new byte[10],buf);

  buf=IOUtils.EMPTY_BYTE_ARRAY;

  is=new UnsynchronizedByteArrayInputStream(new byte[]{(byte)0xa,(byte)0xb,(byte)0xc});

  read=is.read(buf,0,0);

  assertEquals(0,read);

  buf=new byte[10];

  is=new UnsynchronizedByteArrayInputStream(new byte[]{(byte)0xa,(byte)0xb,(byte)0xc});

  read=is.read(buf,0,2);

  assertEquals(2,read);

  assertEquals(0xa,buf[0]);

  assertEquals(0xb,buf[1]);

  assertEquals(0,buf[2]);

  read=is.read(buf,0,10);

  assertEquals(1,read);

  assertEquals(0xc,buf[0]);

}

