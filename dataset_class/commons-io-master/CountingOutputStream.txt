Location: CountingOutputStream.java

Content: 

/** 

 * Constructs a new CountingOutputStream.

 * @param out  the OutputStream to write to

 */

public CountingOutputStream(final OutputStream out){

  super(out);

}

Location: CountingOutputStream.java

Content: 

/** 

 * The number of bytes that have passed through this stream. <p> NOTE: From v1.3 this method throws an ArithmeticException if the count is greater than can be expressed by an  {@code int}. See  {@link #getByteCount()} for a method using a {@code long}.

 * @return the number of bytes accumulated

 * @throws ArithmeticException if the byte count is too large

 */

public int getCount(){

  final long result=getByteCount();

  if (result > Integer.MAX_VALUE) {

    throw new ArithmeticException("The byte count " + result + " is too large to be converted to an int");

  }

  return (int)result;

}

Location: CountingOutputStream.java

Content: 

/** 

 * Set the byte count back to 0. <p> NOTE: From v1.3 this method throws an ArithmeticException if the count is greater than can be expressed by an  {@code int}. See  {@link #resetByteCount()} for a method using a {@code long}.

 * @return the count previous to resetting

 * @throws ArithmeticException if the byte count is too large

 */

public int resetCount(){

  final long result=resetByteCount();

  if (result > Integer.MAX_VALUE) {

    throw new ArithmeticException("The byte count " + result + " is too large to be converted to an int");

  }

  return (int)result;

}

