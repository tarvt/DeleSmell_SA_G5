Location: SizeFileFilter.java

Content: 

private boolean accept(final long length){

  return acceptLarger != length < size;

}

Location: SizeFileFilter.java

Content: 

/** 

 * Constructs a new size file filter for files equal to or larger than a certain size.

 * @param size  the threshold size of the files

 * @throws IllegalArgumentException if the size is negative

 */

public SizeFileFilter(final long size){

  this(size,true);

}

Location: SizeFileFilter.java

Content: 

/** 

 * Constructs a new size file filter for files based on a certain size threshold.

 * @param size  the threshold size of the files

 * @param acceptLarger  if true, files equal to or larger are accepted,otherwise smaller ones (but not equal to)

 * @throws IllegalArgumentException if the size is negative

 */

public SizeFileFilter(final long size,final boolean acceptLarger){

  if (size < 0) {

    throw new IllegalArgumentException("The size must be non-negative");

  }

  this.size=size;

  this.acceptLarger=acceptLarger;

}

Location: SizeFileFilter.java

Content: 

@Override public FileVisitResult visitFile(final Path file,final BasicFileAttributes attrs) throws IOException {

  return toFileVisitResult(accept(Files.size(file)));

}

