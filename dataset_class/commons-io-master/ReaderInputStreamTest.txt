Location: ReaderInputStreamTest.java

Content: 

static Stream<Arguments> charsetData(){

  return Stream.of(Arguments.of("Cp930","\u0391"),Arguments.of("ISO_8859_1","A"),Arguments.of("UTF-8","\u0391"));

}

Location: ReaderInputStreamTest.java

Content: 

@Test @Timeout(value=500,unit=TimeUnit.MILLISECONDS) public void testBufferSmallest() throws IOException {

  final Charset charset=StandardCharsets.UTF_8;

  try (InputStream in=new ReaderInputStream(new StringReader("\uD800"),charset,(int)ReaderInputStream.minBufferSize(charset.newEncoder()))){

    in.read();

  }

 }

Location: ReaderInputStreamTest.java

Content: 

@Test public void testBufferTooSmall() throws IOException {

  assertThrows(IllegalArgumentException.class,() -> new ReaderInputStream(new StringReader("\uD800"),StandardCharsets.UTF_8,-1));

  assertThrows(IllegalArgumentException.class,() -> new ReaderInputStream(new StringReader("\uD800"),StandardCharsets.UTF_8,0));

  assertThrows(IllegalArgumentException.class,() -> new ReaderInputStream(new StringReader("\uD800"),StandardCharsets.UTF_8,1));

}

Location: ReaderInputStreamTest.java

Content: 

@ParameterizedTest @MethodSource("charsetData") public void testCharsetEncoderFlush(final String charsetName,final String data) throws IOException {

  final Charset charset=Charset.forName(charsetName);

  final byte[] expected=data.getBytes(charset);

  try (InputStream in=new ReaderInputStream(new StringReader(data),charset)){

    final byte[] actual=IOUtils.toByteArray(in);

    assertEquals(Arrays.toString(expected),Arrays.toString(actual));

  }

 }

Location: ReaderInputStreamTest.java

Content: 

@Test public void testCharsetMismatchInfiniteLoop() throws IOException {

  final char[] inputChars={(char)0xE0,(char)0xB2,(char)0xA0};

  final Charset charset=StandardCharsets.US_ASCII;

  try (ReaderInputStream stream=new ReaderInputStream(new CharArrayReader(inputChars),charset)){

    IOUtils.toCharArray(stream,charset);

  }

 }

Location: ReaderInputStreamTest.java

Content: 

/** 

 * Tests IO-717 to avoid infinite loops. ReaderInputStream does not throw exception with  {@link CodingErrorAction#REPORT}.

 */

@Test @Timeout(value=500,unit=TimeUnit.MILLISECONDS) public void testCodingErrorAction() throws IOException {

  final Charset charset=StandardCharsets.UTF_8;

  final CharsetEncoder encoder=charset.newEncoder().onMalformedInput(CodingErrorAction.REPORT);

  try (InputStream in=new ReaderInputStream(new StringReader("\uD800aa"),encoder,(int)ReaderInputStream.minBufferSize(charset.newEncoder()))){

    assertThrows(CharacterCodingException.class,in::read);

  }

 }

Location: ReaderInputStreamTest.java

Content: 

@Test public void testLargeUTF8WithBufferedRead() throws IOException {

  testWithBufferedRead(LARGE_TEST_STRING,"UTF-8");

}

Location: ReaderInputStreamTest.java

Content: 

@Test public void testLargeUTF8WithSingleByteRead() throws IOException {

  testWithSingleByteRead(LARGE_TEST_STRING,"UTF-8");

}

Location: ReaderInputStreamTest.java

Content: 

@SuppressWarnings("deprecation") @Test public void testReadZero() throws Exception {

  final String inStr="test";

  try (final ReaderInputStream inputStream=new ReaderInputStream(new StringReader(inStr))){

    final byte[] bytes=new byte[30];

    assertEquals(0,inputStream.read(bytes,0,0));

    assertEquals(inStr.length(),inputStream.read(bytes,0,inStr.length() + 1));

    assertEquals(0,inputStream.read(bytes,0,0));

  }

 }

Location: ReaderInputStreamTest.java

Content: 

@SuppressWarnings("deprecation") @Test public void testReadZeroEmptyString() throws Exception {

  try (final ReaderInputStream inputStream=new ReaderInputStream(new StringReader(""))){

    final byte[] bytes=new byte[30];

    assertEquals(0,inputStream.read(bytes,0,0));

    assertEquals(-1,inputStream.read(bytes,0,1));

    assertEquals(0,inputStream.read(bytes,0,0));

    assertEquals(-1,inputStream.read(bytes,0,1));

  }

 }

Location: ReaderInputStreamTest.java

Content: 

@Test public void testUTF16WithSingleByteRead() throws IOException {

  testWithSingleByteRead(TEST_STRING,"UTF-16");

}

Location: ReaderInputStreamTest.java

Content: 

@Test public void testUTF8WithBufferedRead() throws IOException {

  testWithBufferedRead(TEST_STRING,"UTF-8");

}

Location: ReaderInputStreamTest.java

Content: 

@Test public void testUTF8WithSingleByteRead() throws IOException {

  testWithSingleByteRead(TEST_STRING,"UTF-8");

}

Location: ReaderInputStreamTest.java

Content: 

private void testWithBufferedRead(final String testString,final String charsetName) throws IOException {

  final byte[] expected=testString.getBytes(charsetName);

  try (final ReaderInputStream in=new ReaderInputStream(new StringReader(testString),charsetName)){

    final byte[] buffer=new byte[128];

    int offset=0;

    while (true) {

      int bufferOffset=random.nextInt(64);

      final int bufferLength=random.nextInt(64);

      int read=in.read(buffer,bufferOffset,bufferLength);

      if (read == -1) {

        assertEquals(offset,expected.length);

        break;

      }

      assertTrue(read <= bufferLength);

      while (read > 0) {

        assertTrue(offset < expected.length);

        assertEquals(expected[offset],buffer[bufferOffset]);

        offset++;

        bufferOffset++;

        read--;

      }

    }

  }

 }

Location: ReaderInputStreamTest.java

Content: 

private void testWithSingleByteRead(final String testString,final String charsetName) throws IOException {

  final byte[] bytes=testString.getBytes(charsetName);

  try (final ReaderInputStream in=new ReaderInputStream(new StringReader(testString),charsetName)){

    for (    final byte b : bytes) {

      final int read=in.read();

      assertTrue(read >= 0);

      assertTrue(read <= 255);

      assertEquals(b,(byte)read);

    }

    assertEquals(-1,in.read());

  }

 }

