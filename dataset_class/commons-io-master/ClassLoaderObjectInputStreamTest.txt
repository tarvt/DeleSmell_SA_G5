Location: ClassLoaderObjectInputStreamTest.java

Content: 

@org.junit.jupiter.api.Test public void testExpected() throws Exception {

  final ByteArrayOutputStream baos=new ByteArrayOutputStream();

  final ObjectOutputStream oos=new ObjectOutputStream(baos);

  final Object input=Boolean.FALSE;

  oos.writeObject(input);

  final InputStream bais=new ByteArrayInputStream(baos.toByteArray());

  try (final ClassLoaderObjectInputStream clois=new ClassLoaderObjectInputStream(getClass().getClassLoader(),bais)){

    final Object result=clois.readObject();

    assertEquals(input,result);

  }

 }

Location: ClassLoaderObjectInputStreamTest.java

Content: 

@org.junit.jupiter.api.Test public void testLong() throws Exception {

  final ByteArrayOutputStream baos=new ByteArrayOutputStream();

  final ObjectOutputStream oos=new ObjectOutputStream(baos);

  final Object input=(long)123;

  oos.writeObject(input);

  final InputStream bais=new ByteArrayInputStream(baos.toByteArray());

  try (final ClassLoaderObjectInputStream clois=new ClassLoaderObjectInputStream(getClass().getClassLoader(),bais)){

    final Object result=clois.readObject();

    assertEquals(input,result);

  }

 }

Location: ClassLoaderObjectInputStreamTest.java

Content: 

@org.junit.jupiter.api.Test public void testObject1() throws Exception {

  final ByteArrayOutputStream baos=new ByteArrayOutputStream();

  final ObjectOutputStream oos=new ObjectOutputStream(baos);

  final Object input=new Test(123,null);

  oos.writeObject(input);

  oos.close();

  final InputStream bais=new ByteArrayInputStream(baos.toByteArray());

  try (final ClassLoaderObjectInputStream clois=new ClassLoaderObjectInputStream(getClass().getClassLoader(),bais)){

    final Object result=clois.readObject();

    assertEquals(input,result);

  }

 }

Location: ClassLoaderObjectInputStreamTest.java

Content: 

@org.junit.jupiter.api.Test public void testObject2() throws Exception {

  final ByteArrayOutputStream baos=new ByteArrayOutputStream();

  final ObjectOutputStream oos=new ObjectOutputStream(baos);

  final Object input=new Test(123,0);

  oos.writeObject(input);

  oos.close();

  final InputStream bais=new ByteArrayInputStream(baos.toByteArray());

  try (final ClassLoaderObjectInputStream clois=new ClassLoaderObjectInputStream(getClass().getClassLoader(),bais)){

    final Object result=clois.readObject();

    assertEquals(input,result);

  }

 }

Location: ClassLoaderObjectInputStreamTest.java

Content: 

@org.junit.jupiter.api.Test public void testPrimitiveLong() throws Exception {

  final ByteArrayOutputStream baos=new ByteArrayOutputStream();

  final ObjectOutputStream oos=new ObjectOutputStream(baos);

  final long input=12345L;

  oos.writeLong(input);

  oos.close();

  final InputStream bais=new ByteArrayInputStream(baos.toByteArray());

  try (final ClassLoaderObjectInputStream clois=new ClassLoaderObjectInputStream(getClass().getClassLoader(),bais)){

    final long result=clois.readLong();

    assertEquals(input,result);

  }

 }

Location: ClassLoaderObjectInputStreamTest.java

Content: 

@org.junit.jupiter.api.Test public void testResolveProxyClass() throws Exception {

  final ByteArrayOutputStream baos=new ByteArrayOutputStream();

  final ObjectOutputStream oos=new ObjectOutputStream(baos);

  oos.writeObject(Boolean.FALSE);

  final InputStream bais=new ByteArrayInputStream(baos.toByteArray());

  try (final ClassLoaderObjectInputStream clois=new ClassLoaderObjectInputStream(getClass().getClassLoader(),bais)){

    final String[] interfaces={Comparable.class.getName()};

    final Class<?> result=clois.resolveProxyClass(interfaces);

    assertTrue(Comparable.class.isAssignableFrom(result),"Assignable");

  }

 }

Location: ClassLoaderObjectInputStreamTest.java

Content: 

@org.junit.jupiter.api.Test public void testResolveProxyClassWithMultipleInterfaces() throws Exception {

  final ByteArrayOutputStream baos=new ByteArrayOutputStream();

  final ObjectOutputStream oos=new ObjectOutputStream(baos);

  oos.writeObject(Boolean.FALSE);

  final InputStream bais=new ByteArrayInputStream(baos.toByteArray());

  try (final ClassLoaderObjectInputStream clois=new ClassLoaderObjectInputStream(getClass().getClassLoader(),bais)){

    final String[] interfaces={Comparable.class.getName(),Serializable.class.getName(),Runnable.class.getName()};

    final Class<?> result=clois.resolveProxyClass(interfaces);

    assertTrue(Comparable.class.isAssignableFrom(result),"Assignable");

    assertTrue(Runnable.class.isAssignableFrom(result),"Assignable");

    assertTrue(Serializable.class.isAssignableFrom(result),"Assignable");

    assertFalse(Flushable.class.isAssignableFrom(result),"Not Assignable");

  }

 }

