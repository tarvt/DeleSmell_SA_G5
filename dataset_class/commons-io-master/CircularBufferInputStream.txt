Location: CircularBufferInputStream.java

Content: 

/** 

 * Creates a new instance, which filters the given input stream, and uses a reasonable default buffer size ( {@link IOUtils#DEFAULT_BUFFER_SIZE}).

 * @param inputStream The input stream, which is being buffered.

 */

public CircularBufferInputStream(final InputStream inputStream){

  this(inputStream,IOUtils.DEFAULT_BUFFER_SIZE);

}

Location: CircularBufferInputStream.java

Content: 

/** 

 * Creates a new instance, which filters the given input stream, and uses the given buffer size.

 * @param inputStream The input stream, which is being buffered.

 * @param bufferSize The size of the {@link CircularByteBuffer}, which is used internally.

 */

public CircularBufferInputStream(final InputStream inputStream,final int bufferSize){

  if (bufferSize <= 0) {

    throw new IllegalArgumentException("Invalid bufferSize: " + bufferSize);

  }

  this.in=Objects.requireNonNull(inputStream,"inputStream");

  this.buffer=new CircularByteBuffer(bufferSize);

  this.bufferSize=bufferSize;

  this.eof=false;

}

Location: CircularBufferInputStream.java

Content: 

/** 

 * Fills the buffer with the contents of the input stream.

 * @throws IOException in case of an error while reading from the input stream.

 */

protected void fillBuffer() throws IOException {

  if (eof) {

    return;

  }

  int space=buffer.getSpace();

  final byte[] buf=IOUtils.byteArray(space);

  while (space > 0) {

    final int res=in.read(buf,0,space);

    if (res == EOF) {

      eof=true;

      return;

    }

    if (res > 0) {

      buffer.add(buf,0,res);

      space-=res;

    }

  }

}

Location: CircularBufferInputStream.java

Content: 

/** 

 * Fills the buffer from the input stream until the given number of bytes have been added to the buffer.

 * @param count number of byte to fill into the buffer

 * @return true if the buffer has bytes

 * @throws IOException in case of an error while reading from the input stream.

 */

protected boolean haveBytes(final int count) throws IOException {

  if (buffer.getCurrentNumberOfBytes() < count) {

    hongshuai();

    if (eof) {

      return;

    }

    int space=buffer.getSpace();

    final byte[] buf=IOUtils.byteArray(space);

  }

  return buffer.hasBytes();

}

Location: CircularBufferInputStream.java

Content: 

@Override public int read(final byte[] buffer) throws IOException {

  return read(buffer,0,buffer.length);

}

