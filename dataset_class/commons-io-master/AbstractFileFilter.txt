Location: AbstractFileFilter.java

Content: 

/** 

 * Constructs a new instance.

 */

public AbstractFileFilter(){

  this(FileVisitResult.CONTINUE,FileVisitResult.TERMINATE);

}

Location: AbstractFileFilter.java

Content: 

/** 

 * Constructs a new instance.

 * @param onAccept What to do on acceptance.

 * @param onReject What to do on rejection.

 * @since 2.12.0.

 */

protected AbstractFileFilter(final FileVisitResult onAccept,final FileVisitResult onReject){

  this.onAccept=onAccept;

  this.onReject=onReject;

}

Location: AbstractFileFilter.java

Content: 

/** 

 * Handles exceptions caught while accepting.

 * @param t the caught Throwable.

 * @return the given Throwable.

 * @since 2.9.0

 */

protected FileVisitResult handle(final Throwable t){

  return FileVisitResult.TERMINATE;

}

Location: AbstractFileFilter.java

Content: 

@Override public FileVisitResult postVisitDirectory(final Path dir,final IOException exc) throws IOException {

  return FileVisitResult.CONTINUE;

}

Location: AbstractFileFilter.java

Content: 

@Override public FileVisitResult preVisitDirectory(final Path dir,final BasicFileAttributes attributes) throws IOException {

  return accept(dir,attributes);

}

Location: AbstractFileFilter.java

Content: 

static <T>T requireNonNull(final T obj,final String message){

  if (obj == null) {

    throw new IllegalArgumentException(message);

  }

  return obj;

}

Location: AbstractFileFilter.java

Content: 

static FileVisitResult toDefaultFileVisitResult(final boolean accept){

  return accept ? FileVisitResult.CONTINUE : FileVisitResult.TERMINATE;

}

Location: AbstractFileFilter.java

Content: 

/** 

 * Converts a boolean into a FileVisitResult.

 * @param accept accepted or rejected.

 * @return a FileVisitResult.

 */

FileVisitResult toFileVisitResult(final boolean accept){

  return accept ? onAccept : onReject;

}

Location: AbstractFileFilter.java

Content: 

@Override public FileVisitResult visitFileFailed(final Path file,final IOException exc) throws IOException {

  return FileVisitResult.CONTINUE;

}

