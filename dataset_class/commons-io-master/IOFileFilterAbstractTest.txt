Location: IOFileFilterAbstractTest.java

Content: 

public static void assertFalseFiltersInvoked(final int testNumber,final TesterFalseFileFilter[] filters,final boolean[] invoked){

  for (int i=1; i < filters.length; i++) {

    assertEquals(invoked[i - 1],filters[i].isInvoked(),"test " + testNumber + " filter "+ i+ " invoked");

  }

}

Location: IOFileFilterAbstractTest.java

Content: 

public static void assertFileFiltering(final int testNumber,final IOFileFilter filter,final File file,final boolean expected){

  assertEquals(expected,filter.accept(file),"test " + testNumber + " Filter(File) "+ filter.getClass().getName()+ " not "+ expected+ " for "+ file);

}

Location: IOFileFilterAbstractTest.java

Content: 

public static void assertFilenameFiltering(final int testNumber,final IOFileFilter filter,final File file,final boolean expected){

  assertEquals(expected,filter.accept(file.getParentFile(),file.getName()),"test " + testNumber + " Filter(File, String) "+ filter.getClass().getName()+ " not "+ expected+ " for "+ file);

}

Location: IOFileFilterAbstractTest.java

Content: 

public static void assertFiltering(final int testNumber,final IOFileFilter filter,final File file,final boolean expected){

  assertEquals(expected,filter.accept(file),"test " + testNumber + " Filter(File) "+ filter.getClass().getName()+ " not "+ expected+ " for "+ file);

  assertEquals(expected,filter.accept(file.toPath(),null),"test " + testNumber + " Filter(File) "+ filter.getClass().getName()+ " not "+ expected+ " for "+ file);

  if (file != null && file.getParentFile() != null) {

    assertEquals(expected,filter.accept(file.getParentFile(),file.getName()),"test " + testNumber + " Filter(File, String) "+ filter.getClass().getName()+ " not "+ expected+ " for "+ file);

  }

 else   if (file == null) {

    assertEquals(expected,filter.accept(file),"test " + testNumber + " Filter(File, String) "+ filter.getClass().getName()+ " not "+ expected+ " for null");

  }

}

Location: IOFileFilterAbstractTest.java

Content: 

public static void assertTrueFiltersInvoked(final int testNumber,final TesterTrueFileFilter[] filters,final boolean[] invoked){

  for (int i=1; i < filters.length; i++) {

    assertEquals(invoked[i - 1],filters[i].isInvoked(),"test " + testNumber + " filter "+ i+ " invoked");

  }

}

Location: IOFileFilterAbstractTest.java

Content: 

public static File determineWorkingDirectoryPath(final String key,final String defaultPath){

  final String workingPathName=System.getProperty(key,defaultPath);

  return new File(workingPathName);

}

Location: IOFileFilterAbstractTest.java

Content: 

public static void resetFalseFilters(final TesterFalseFileFilter[] filters){

  for (  final TesterFalseFileFilter filter : filters) {

    if (filter != null) {

      filter.reset();

    }

  }

}

Location: IOFileFilterAbstractTest.java

Content: 

public static void resetTrueFilters(final TesterTrueFileFilter[] filters){

  for (  final TesterTrueFileFilter filter : filters) {

    if (filter != null) {

      filter.reset();

    }

  }

}

