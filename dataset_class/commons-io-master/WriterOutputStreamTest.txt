Location: WriterOutputStreamTest.java

Content: 

@Test public void testLargeUTF8WithBufferedWrite() throws IOException {

  testWithBufferedWrite(LARGE_TEST_STRING,"UTF-8");

}

Location: WriterOutputStreamTest.java

Content: 

@Test public void testLargeUTF8WithSingleByteWrite() throws IOException {

  testWithSingleByteWrite(LARGE_TEST_STRING,"UTF-8");

}

Location: WriterOutputStreamTest.java

Content: 

@Test public void testUTF16BEWithBufferedWrite() throws IOException {

  testWithBufferedWrite(TEST_STRING,"UTF-16BE");

}

Location: WriterOutputStreamTest.java

Content: 

@Test public void testUTF16BEWithSingleByteWrite() throws IOException {

  testWithSingleByteWrite(TEST_STRING,"UTF-16BE");

}

Location: WriterOutputStreamTest.java

Content: 

@Test public void testUTF16LEWithBufferedWrite() throws IOException {

  testWithBufferedWrite(TEST_STRING,"UTF-16LE");

}

Location: WriterOutputStreamTest.java

Content: 

@Test public void testUTF16LEWithSingleByteWrite() throws IOException {

  testWithSingleByteWrite(TEST_STRING,"UTF-16LE");

}

Location: WriterOutputStreamTest.java

Content: 

@Test public void testUTF16WithBufferedWrite() throws IOException {

  try {

    testWithBufferedWrite(TEST_STRING,"UTF-16");

  }

 catch (  final UnsupportedOperationException e) {

    if (!System.getProperty("java.vendor").contains("IBM")) {

      fail("This test should only throw UOE on IBM JDKs with broken UTF-16");

    }

  }

}

Location: WriterOutputStreamTest.java

Content: 

@Test public void testUTF16WithSingleByteWrite() throws IOException {

  try {

    testWithSingleByteWrite(TEST_STRING,"UTF-16");

  }

 catch (  final UnsupportedOperationException e) {

    if (!System.getProperty("java.vendor").contains("IBM")) {

      fail("This test should only throw UOE on IBM JDKs with broken UTF-16");

    }

  }

}

Location: WriterOutputStreamTest.java

Content: 

@Test public void testUTF8WithBufferedWrite() throws IOException {

  testWithBufferedWrite(TEST_STRING,"UTF-8");

}

Location: WriterOutputStreamTest.java

Content: 

@Test public void testUTF8WithSingleByteWrite() throws IOException {

  testWithSingleByteWrite(TEST_STRING,"UTF-8");

}

Location: WriterOutputStreamTest.java

Content: 

private void testWithBufferedWrite(final String testString,final String charsetName) throws IOException {

  final byte[] expected=testString.getBytes(charsetName);

  final StringWriter writer=new StringWriter();

  try (final WriterOutputStream out=new WriterOutputStream(writer,charsetName)){

    int offset=0;

    while (offset < expected.length) {

      final int length=Math.min(random.nextInt(128),expected.length - offset);

      out.write(expected,offset,length);

      offset+=length;

    }

  }

   assertEquals(testString,writer.toString());

}

Location: WriterOutputStreamTest.java

Content: 

private void testWithSingleByteWrite(final String testString,final String charsetName) throws IOException {

  final byte[] bytes=testString.getBytes(charsetName);

  final StringWriter writer=new StringWriter();

  try (final WriterOutputStream out=new WriterOutputStream(writer,charsetName)){

    for (    final byte b : bytes) {

      out.write(b);

    }

  }

   assertEquals(testString,writer.toString());

}

Location: WriterOutputStreamTest.java

Content: 

@Test public void testWriteImmediately() throws IOException {

  final StringWriter writer=new StringWriter();

  try (final WriterOutputStream out=new WriterOutputStream(writer,"us-ascii",1024,true)){

    out.write("abc".getBytes(StandardCharsets.US_ASCII));

    assertEquals("abc",writer.toString());

  }

 }

