Location: BrokenWriterTest.java

Content: 

@Test public void testAppendChar(){

  assertEquals(exception,assertThrows(IOException.class,() -> brokenWriter.append('1')));

}

Location: BrokenWriterTest.java

Content: 

@Test public void testAppendCharSequence(){

  assertEquals(exception,assertThrows(IOException.class,() -> brokenWriter.append("01")));

}

Location: BrokenWriterTest.java

Content: 

@Test public void testAppendCharSequenceIndexed(){

  assertEquals(exception,assertThrows(IOException.class,() -> brokenWriter.append("01",0,1)));

}

Location: BrokenWriterTest.java

Content: 

@Test public void testClose(){

  assertEquals(exception,assertThrows(IOException.class,() -> brokenWriter.close()));

}

Location: BrokenWriterTest.java

Content: 

@Test @Disabled("What should happen here?") public void testEquals(){

  assertEquals(exception,assertThrows(IOException.class,() -> brokenWriter.equals(null)));

}

Location: BrokenWriterTest.java

Content: 

@Test public void testFlush(){

  assertEquals(exception,assertThrows(IOException.class,() -> brokenWriter.flush()));

}

Location: BrokenWriterTest.java

Content: 

@Test @Disabled("What should happen here?") public void testHashCode(){

  assertEquals(exception,assertThrows(IOException.class,() -> brokenWriter.hashCode()));

}

Location: BrokenWriterTest.java

Content: 

@Test @Disabled("What should happen here?") public void testToString(){

  assertEquals(exception,assertThrows(IOException.class,() -> brokenWriter.toString()));

}

Location: BrokenWriterTest.java

Content: 

@Test public void testTryWithResources(){

  final IOException thrown=assertThrows(IOException.class,() -> {

    try (Writer newWriter=new BrokenWriter()){

      newWriter.write(1);

    }

   }

);

  assertEquals("Broken writer",thrown.getMessage());

  final Throwable[] suppressed=thrown.getSuppressed();

  assertEquals(1,suppressed.length);

  assertEquals(IOException.class,suppressed[0].getClass());

  assertEquals("Broken writer",suppressed[0].getMessage());

}

Location: BrokenWriterTest.java

Content: 

@Test public void testWriteCharArray(){

  assertEquals(exception,assertThrows(IOException.class,() -> brokenWriter.write(new char[1])));

}

Location: BrokenWriterTest.java

Content: 

@Test public void testWriteCharArrayIndexed(){

  assertEquals(exception,assertThrows(IOException.class,() -> brokenWriter.write(new char[1],0,1)));

}

Location: BrokenWriterTest.java

Content: 

@Test public void testWriteInt(){

  assertEquals(exception,assertThrows(IOException.class,() -> brokenWriter.write(1)));

}

Location: BrokenWriterTest.java

Content: 

@Test public void testWriteString(){

  assertEquals(exception,assertThrows(IOException.class,() -> brokenWriter.write("01")));

}

Location: BrokenWriterTest.java

Content: 

@Test public void testWriteStringIndexed(){

  assertEquals(exception,assertThrows(IOException.class,() -> brokenWriter.write("01",0,1)));

}

