Location: RandomAccessFileInputStream.java

Content: 

/** 

 * Returns an estimate of the number of bytes that can be read (or skipped over) from this input stream. If there are more than  {@link Integer#MAX_VALUE} bytes available, return {@link Integer#MAX_VALUE}.

 * @return An estimate of the number of bytes that can be read.

 * @throws IOException If an I/O error occurs.

 */

@Override public int available() throws IOException {

  final long avail=availableLong();

  if (avail > Integer.MAX_VALUE) {

    return Integer.MAX_VALUE;

  }

  return (int)avail;

}

Location: RandomAccessFileInputStream.java

Content: 

/** 

 * Returns the number of bytes that can be read (or skipped over) from this input stream.

 * @return The number of bytes that can be read.

 * @throws IOException If an I/O error occurs.

 */

public long availableLong() throws IOException {

  return randomAccessFile.length() - randomAccessFile.getFilePointer();

}

Location: RandomAccessFileInputStream.java

Content: 

/** 

 * Gets the underlying file.

 * @return the underlying file.

 */

public RandomAccessFile getRandomAccessFile(){

  return randomAccessFile;

}

Location: RandomAccessFileInputStream.java

Content: 

/** 

 * Returns whether to close the underlying file when this stream is closed.

 * @return Whether to close the underlying file when this stream is closed.

 */

public boolean isCloseOnClose(){

  return closeOnClose;

}

Location: RandomAccessFileInputStream.java

Content: 

/** 

 * Constructs a new instance configured to leave the underlying file open when this stream is closed.

 * @param file The file to stream.

 */

public RandomAccessFileInputStream(final RandomAccessFile file){

  this(file,false);

}

Location: RandomAccessFileInputStream.java

Content: 

/** 

 * Constructs a new instance.

 * @param file The file to stream.

 * @param closeOnClose Whether to close the underlying file when this stream is closed.

 */

public RandomAccessFileInputStream(final RandomAccessFile file,final boolean closeOnClose){

  this.randomAccessFile=Objects.requireNonNull(file,"file");

  this.closeOnClose=closeOnClose;

}

Location: RandomAccessFileInputStream.java

Content: 

/** 

 * Delegates to the underlying file.

 * @param position See {@link RandomAccessFile#seek(long)}.

 * @throws IOException See {@link RandomAccessFile#seek(long)}.

 * @see RandomAccessFile#seek(long)

 */

private void seek(final long position) throws IOException {

  randomAccessFile.seek(position);

}

Location: RandomAccessFileInputStream.java

Content: 

@Override public long skip(final long skipCount) throws IOException {

  if (skipCount <= 0) {

    return 0;

  }

  final long filePointer=randomAccessFile.getFilePointer();

  final long fileLength=randomAccessFile.length();

  if (filePointer >= fileLength) {

    return 0;

  }

  final long targetPos=filePointer + skipCount;

  final long newPos=targetPos > fileLength ? fileLength - 1 : targetPos;

  if (newPos > 0) {

    seek(newPos);

  }

  return randomAccessFile.getFilePointer() - filePointer;

}

