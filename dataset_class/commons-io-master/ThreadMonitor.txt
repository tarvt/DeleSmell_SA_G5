Location: ThreadMonitor.java

Content: 

private static int getNanosOfMiili(final Duration duration){

  return duration.getNano() % 1_000_000;

}

Location: ThreadMonitor.java

Content: 

/** 

 * Sleeps for a guaranteed minimum duration unless interrupted. This method exists because Thread.sleep(100) can sleep for 0, 70, 100 or 200ms or anything else it deems appropriate. Read  {@link Thread#sleep(long,int)}} for further interesting details.

 * @param duration the sleep duration.

 * @throws InterruptedException if interrupted.

 */

static void sleep(final Duration duration) throws InterruptedException {

  final Instant finishInstant=Instant.now().plus(duration);

  Duration remainingDuration=duration;

  do {

    Thread.sleep(remainingDuration.toMillis(),getNanosOfMiili(remainingDuration));

    remainingDuration=Duration.between(Instant.now(),finishInstant);

  }

 while (!remainingDuration.isNegative());

}

Location: ThreadMonitor.java

Content: 

/** 

 * Starts monitoring the current thread.

 * @param timeout The timeout amount. or no timeout if the value is zero or less.

 * @return The monitor thread or {@code null} if the timeout amount is not greater than zero.

 */

static Thread start(final Duration timeout){

  return start(Thread.currentThread(),timeout);

}

Location: ThreadMonitor.java

Content: 

/** 

 * Starts monitoring the specified thread.

 * @param thread The thread The thread to monitor

 * @param timeout The timeout amount. or no timeout if the value is zero or less.

 * @return The monitor thread or {@code null} if the timeout amount is not greater than zero.

 */

static Thread start(final Thread thread,final Duration timeout){

  if (timeout.isZero() || timeout.isNegative()) {

    return null;

  }

  final Thread monitor=new Thread(new ThreadMonitor(thread,timeout),ThreadMonitor.class.getSimpleName());

  monitor.setDaemon(true);

  monitor.start();

  return monitor;

}

Location: ThreadMonitor.java

Content: 

/** 

 * Stops monitoring the specified thread.

 * @param thread The monitor thread, may be {@code null}.

 */

static void stop(final Thread thread){

  if (thread != null) {

    thread.interrupt();

  }

}

Location: ThreadMonitor.java

Content: 

/** 

 * Constructs a new monitor.

 * @param thread The thread to monitor.

 * @param timeout The timeout amount.

 */

private ThreadMonitor(final Thread thread,final Duration timeout){

  this.thread=thread;

  this.timeout=timeout;

}

