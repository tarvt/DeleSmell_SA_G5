Location: MagicNumberFileFilter.java

Content: 

/** 

 * <p> Constructs a new MagicNumberFileFilter and associates it with the magic number to test for in files. This constructor assumes a starting offset of  {@code 0}. </p> <p> It is important to note that <em>the array is not cloned</em> and that any changes to the magic number array after construction will affect the behavior of this file filter. </p> <pre> MagicNumberFileFilter javaClassFileFilter = MagicNumberFileFilter(new byte[] {(byte) 0xCA, (byte) 0xFE, (byte) 0xBA, (byte) 0xBE}); </pre>

 * @param magicNumber the magic number to look for in the file.

 * @throws IllegalArgumentException if {@code magicNumber} is{@code null}, or contains no bytes.

 */

public MagicNumberFileFilter(final byte[] magicNumber){

  this(magicNumber,0);

}

Location: MagicNumberFileFilter.java

Content: 

/** 

 * <p> Constructs a new MagicNumberFileFilter and associates it with the magic number to test for in files and the byte offset location in the file to to look for that magic number. </p> <pre> MagicNumberFileFilter tarFileFilter = MagicNumberFileFilter(new byte[] {0x75, 0x73, 0x74, 0x61, 0x72}, 257); </pre> <pre> MagicNumberFileFilter javaClassFileFilter = MagicNumberFileFilter(new byte[] {0xCA, 0xFE, 0xBA, 0xBE}, 0); </pre>

 * @param magicNumbers the magic number to look for in the file.

 * @param offset the byte offset in the file to start comparing bytes.

 * @throws IllegalArgumentException if {@code magicNumber} is{@code null}, or contains no bytes, or  {@code offset}is a negative number.

 */

public MagicNumberFileFilter(final byte[] magicNumbers,final long offset){

  requireNonNull(magicNumbers,"magicNumbers");

  if (magicNumbers.length == 0) {

    throw new IllegalArgumentException("The magic number must contain at least one byte");

  }

  if (offset < 0) {

    throw new IllegalArgumentException("The offset cannot be negative");

  }

  this.magicNumbers=magicNumbers.clone();

  this.byteOffset=offset;

}

Location: MagicNumberFileFilter.java

Content: 

/** 

 * <p> Constructs a new MagicNumberFileFilter and associates it with the magic number to test for in files. This constructor assumes a starting offset of  {@code 0}. </p> Example usage: <pre> {@code MagicNumberFileFilter xmlFileFilter = MagicNumberFileFilter("<?xml");}</pre>

 * @param magicNumber the magic number to look for in the file.The string is converted to bytes using the platform default charset.

 * @throws IllegalArgumentException if {@code magicNumber} is{@code null} or the empty String.

 */

public MagicNumberFileFilter(final String magicNumber){

  this(magicNumber,0);

}

Location: MagicNumberFileFilter.java

Content: 

/** 

 * <p> Constructs a new MagicNumberFileFilter and associates it with the magic number to test for in files and the byte offset location in the file to to look for that magic number. </p> <pre> MagicNumberFileFilter tarFileFilter = MagicNumberFileFilter("ustar", 257); </pre>

 * @param magicNumber the magic number to look for in the file.The string is converted to bytes using the platform default charset.

 * @param offset the byte offset in the file to start comparing bytes.

 * @throws IllegalArgumentException if {@code magicNumber} is{@code null} or the empty String, or {@code offset} isa negative number.

 */

public MagicNumberFileFilter(final String magicNumber,final long offset){

  requireNonNull(magicNumber,"magicNumber");

  if (magicNumber.isEmpty()) {

    throw new IllegalArgumentException("The magic number must contain at least one byte");

  }

  if (offset < 0) {

    throw new IllegalArgumentException("The offset cannot be negative");

  }

  this.magicNumbers=magicNumber.getBytes(Charset.defaultCharset());

  this.byteOffset=offset;

}

