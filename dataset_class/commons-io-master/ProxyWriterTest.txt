Location: ProxyWriterTest.java

Content: 

@Test public void appendChar() throws Exception {

  try (final StringBuilderWriter writer=new StringBuilderWriter();final ProxyWriter proxy=new ProxyWriter(writer)){

    proxy.append('c');

    assertEquals("c",writer.toString());

  }

 }

Location: ProxyWriterTest.java

Content: 

@Test public void appendCharSequence() throws Exception {

  try (final StringBuilderWriter writer=new StringBuilderWriter();final ProxyWriter proxy=new ProxyWriter(writer)){

    proxy.append("ABC");

    assertEquals("ABC",writer.toString());

  }

 }

Location: ProxyWriterTest.java

Content: 

@Test public void appendCharSequence_with_offset() throws Exception {

  try (final StringBuilderWriter writer=new StringBuilderWriter();final ProxyWriter proxy=new ProxyWriter(writer)){

    proxy.append("ABC",1,3);

    proxy.flush();

    assertEquals("BC",writer.toString());

  }

 }

Location: ProxyWriterTest.java

Content: 

@Test public void exceptions_in_append_char() throws IOException {

  try (final ByteArrayOutputStream baos=new ByteArrayOutputStream();final OutputStreamWriter osw=new OutputStreamWriter(baos){

    @Override public void write(    final int c) throws IOException {

      throw new UnsupportedEncodingException("Bah");

    }

  }

){

    try (ProxyWriter proxy=new ProxyWriter(osw)){

      assertThrows(UnsupportedEncodingException.class,() -> proxy.append('c'));

    }

   }

 }

Location: ProxyWriterTest.java

Content: 

@Test public void exceptions_in_append_charSequence() throws IOException {

  try (final OutputStreamWriter osw=new OutputStreamWriter(new ByteArrayOutputStream()){

    @Override public Writer append(    final CharSequence csq) throws IOException {

      throw new UnsupportedEncodingException("Bah");

    }

  }

){

    try (ProxyWriter proxy=new ProxyWriter(osw)){

      assertThrows(UnsupportedEncodingException.class,() -> proxy.append("ABCE"));

    }

   }

 }

Location: ProxyWriterTest.java

Content: 

@Test public void exceptions_in_append_charSequence_offset() throws IOException {

  try (final OutputStreamWriter osw=new OutputStreamWriter(new ByteArrayOutputStream()){

    @Override public Writer append(    final CharSequence csq,    final int start,    final int end) throws IOException {

      throw new UnsupportedEncodingException("Bah");

    }

  }

){

    try (ProxyWriter proxy=new ProxyWriter(osw)){

      assertThrows(UnsupportedEncodingException.class,() -> proxy.append("ABCE",1,2));

    }

   }

 }

Location: ProxyWriterTest.java

Content: 

@Test public void exceptions_in_close(){

  assertThrows(UnsupportedEncodingException.class,() -> {

    try (final OutputStreamWriter osw=new OutputStreamWriter(new ByteArrayOutputStream()){

      @Override public void close() throws IOException {

        throw new UnsupportedEncodingException("Bah");

      }

    }

){

      try (final ProxyWriter proxy=new ProxyWriter(osw)){

      }

     }

   }

);

}

Location: ProxyWriterTest.java

Content: 

@Test public void exceptions_in_flush() throws IOException {

  try (final OutputStreamWriter osw=new OutputStreamWriter(new ByteArrayOutputStream()){

    @Override public void flush() throws IOException {

      throw new UnsupportedEncodingException("Bah");

    }

  }

){

    try (ProxyWriter proxy=new ProxyWriter(osw)){

      assertThrows(UnsupportedEncodingException.class,proxy::flush);

    }

   }

 }

Location: ProxyWriterTest.java

Content: 

@Test public void exceptions_in_write_char_array() throws IOException {

  try (final OutputStreamWriter osw=new OutputStreamWriter(new ByteArrayOutputStream()){

    @Override public void write(    final char[] cbuf) throws IOException {

      throw new UnsupportedEncodingException("Bah");

    }

  }

){

    try (ProxyWriter proxy=new ProxyWriter(osw)){

      assertThrows(UnsupportedEncodingException.class,() -> proxy.write("ABCE".toCharArray()));

    }

   }

 }

Location: ProxyWriterTest.java

Content: 

@Test public void exceptions_in_write_int() throws IOException {

  try (final OutputStreamWriter osw=new OutputStreamWriter(new ByteArrayOutputStream()){

    @Override public void write(    final int c) throws IOException {

      throw new UnsupportedEncodingException("Bah");

    }

  }

){

    try (ProxyWriter proxy=new ProxyWriter(osw)){

      assertThrows(UnsupportedEncodingException.class,() -> proxy.write('a'));

    }

   }

 }

Location: ProxyWriterTest.java

Content: 

@Test public void exceptions_in_write_offset_char_array() throws IOException {

  try (final OutputStreamWriter osw=new OutputStreamWriter(new ByteArrayOutputStream()){

    @Override public void write(    final char[] cbuf,    final int off,    final int len) throws IOException {

      throw new UnsupportedEncodingException("Bah");

    }

  }

){

    try (ProxyWriter proxy=new ProxyWriter(osw)){

      assertThrows(UnsupportedEncodingException.class,() -> proxy.write("ABCE".toCharArray(),2,3));

    }

   }

 }

Location: ProxyWriterTest.java

Content: 

@Test public void exceptions_in_write_string() throws IOException {

  try (final OutputStreamWriter osw=new OutputStreamWriter(new ByteArrayOutputStream()){

    @Override public void write(    final String str) throws IOException {

      throw new UnsupportedEncodingException("Bah");

    }

  }

){

    try (ProxyWriter proxy=new ProxyWriter(osw)){

      assertThrows(UnsupportedEncodingException.class,() -> proxy.write("ABCE"));

    }

   }

 }

Location: ProxyWriterTest.java

Content: 

@Test public void exceptions_in_write_string_offset() throws IOException {

  try (final OutputStreamWriter osw=new OutputStreamWriter(new ByteArrayOutputStream()){

    @Override public void write(    final String str,    final int off,    final int len) throws IOException {

      throw new UnsupportedEncodingException("Bah");

    }

  }

){

    try (ProxyWriter proxy=new ProxyWriter(osw)){

      assertThrows(UnsupportedEncodingException.class,() -> proxy.write("ABCE",1,3));

    }

   }

 }

Location: ProxyWriterTest.java

Content: 

@Test public void nullCharArray() throws Exception {

  try (final ProxyWriter proxy=new ProxyWriter(NullWriter.INSTANCE)){

    proxy.write((char[])null);

    proxy.write((char[])null,0,0);

  }

 }

Location: ProxyWriterTest.java

Content: 

@Test public void nullCharSequence() throws Exception {

  try (final ProxyWriter proxy=new ProxyWriter(NullWriter.INSTANCE)){

    proxy.append(null);

  }

 }

Location: ProxyWriterTest.java

Content: 

@Test public void nullString() throws Exception {

  try (final ProxyWriter proxy=new ProxyWriter(NullWriter.INSTANCE)){

    proxy.write((String)null);

    proxy.write((String)null,0,0);

  }

 }

Location: ProxyWriterTest.java

Content: 

@Test public void writeCharArray() throws Exception {

  try (final StringBuilderWriter writer=new StringBuilderWriter();final ProxyWriter proxy=new ProxyWriter(writer)){

    proxy.write(new char[]{'A','B','C'});

    assertEquals("ABC",writer.toString());

  }

 }

Location: ProxyWriterTest.java

Content: 

@Test public void writeCharArrayPartial() throws Exception {

  try (final StringBuilderWriter writer=new StringBuilderWriter();final ProxyWriter proxy=new ProxyWriter(writer)){

    proxy.write(new char[]{'A','B','C'},1,2);

    assertEquals("BC",writer.toString());

  }

 }

Location: ProxyWriterTest.java

Content: 

@Test public void writeInt() throws Exception {

  try (final StringBuilderWriter writer=new StringBuilderWriter();final ProxyWriter proxy=new ProxyWriter(writer)){

    proxy.write(65);

    assertEquals("A",writer.toString());

  }

 }

Location: ProxyWriterTest.java

Content: 

@Test public void writeStringPartial() throws Exception {

  try (final StringBuilderWriter writer=new StringBuilderWriter();final ProxyWriter proxy=new ProxyWriter(writer)){

    proxy.write("ABC",1,2);

    assertEquals("BC",writer.toString());

  }

 }

