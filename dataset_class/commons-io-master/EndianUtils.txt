Location: EndianUtils.java

Content: 

/** 

 * Instances should NOT be constructed in standard programming.

 */

public EndianUtils(){

}

Location: EndianUtils.java

Content: 

/** 

 * Reads a "double" value from a byte array at a given offset. The value is converted to the opposed endian system while reading.

 * @param data source byte array

 * @param offset starting offset in the byte array

 * @return the value read

 */

public static double readSwappedDouble(final byte[] data,final int offset){

  return Double.longBitsToDouble(readSwappedLong(data,offset));

}

Location: EndianUtils.java

Content: 

/** 

 * Reads a "double" value from an InputStream. The value is converted to the opposed endian system while reading.

 * @param input source InputStream

 * @return the value just read

 * @throws IOException in case of an I/O problem

 */

public static double readSwappedDouble(final InputStream input) throws IOException {

  return Double.longBitsToDouble(readSwappedLong(input));

}

Location: EndianUtils.java

Content: 

/** 

 * Reads a "float" value from a byte array at a given offset. The value is converted to the opposed endian system while reading.

 * @param data source byte array

 * @param offset starting offset in the byte array

 * @return the value read

 */

public static float readSwappedFloat(final byte[] data,final int offset){

  return Float.intBitsToFloat(readSwappedInteger(data,offset));

}

Location: EndianUtils.java

Content: 

/** 

 * Reads a "float" value from an InputStream. The value is converted to the opposed endian system while reading.

 * @param input source InputStream

 * @return the value just read

 * @throws IOException in case of an I/O problem

 */

public static float readSwappedFloat(final InputStream input) throws IOException {

  return Float.intBitsToFloat(readSwappedInteger(input));

}

Location: EndianUtils.java

Content: 

/** 

 * Reads a "int" value from a byte array at a given offset. The value is converted to the opposed endian system while reading.

 * @param data source byte array

 * @param offset starting offset in the byte array

 * @return the value read

 */

public static int readSwappedInteger(final byte[] data,final int offset){

  return (((data[offset + 0] & 0xff) << 0) + ((data[offset + 1] & 0xff) << 8) + ((data[offset + 2] & 0xff) << 16)+ ((data[offset + 3] & 0xff) << 24));

}

Location: EndianUtils.java

Content: 

/** 

 * Reads a "int" value from an InputStream. The value is converted to the opposed endian system while reading.

 * @param input source InputStream

 * @return the value just read

 * @throws IOException in case of an I/O problem

 */

public static int readSwappedInteger(final InputStream input) throws IOException {

  final int value1=read(input);

  final int value2=read(input);

  final int value3=read(input);

  final int value4=read(input);

  return ((value1 & 0xff) << 0) + ((value2 & 0xff) << 8) + ((value3 & 0xff) << 16)+ ((value4 & 0xff) << 24);

}

Location: EndianUtils.java

Content: 

/** 

 * Reads a "long" value from a byte array at a given offset. The value is converted to the opposed endian system while reading.

 * @param data source byte array

 * @param offset starting offset in the byte array

 * @return the value read

 */

public static long readSwappedLong(final byte[] data,final int offset){

  final long low=readSwappedInteger(data,offset);

  final long high=readSwappedInteger(data,offset + 4);

  return (high << 32) + (0xffffffffL & low);

}

Location: EndianUtils.java

Content: 

/** 

 * Reads a "long" value from an InputStream. The value is converted to the opposed endian system while reading.

 * @param input source InputStream

 * @return the value just read

 * @throws IOException in case of an I/O problem

 */

public static long readSwappedLong(final InputStream input) throws IOException {

  final byte[] bytes=new byte[8];

  for (int i=0; i < 8; i++) {

    bytes[i]=(byte)read(input);

  }

  return readSwappedLong(bytes,0);

}

Location: EndianUtils.java

Content: 

/** 

 * Reads a "short" value from a byte array at a given offset. The value is converted to the opposed endian system while reading.

 * @param data source byte array

 * @param offset starting offset in the byte array

 * @return the value read

 */

public static short readSwappedShort(final byte[] data,final int offset){

  return (short)(((data[offset + 0] & 0xff) << 0) + ((data[offset + 1] & 0xff) << 8));

}

Location: EndianUtils.java

Content: 

/** 

 * Reads a "short" value from an InputStream. The value is converted to the opposed endian system while reading.

 * @param input source InputStream

 * @return the value just read

 * @throws IOException in case of an I/O problem

 */

public static short readSwappedShort(final InputStream input) throws IOException {

  return (short)(((read(input) & 0xff) << 0) + ((read(input) & 0xff) << 8));

}

Location: EndianUtils.java

Content: 

/** 

 * Reads an unsigned integer (32-bit) value from a byte array at a given offset. The value is converted to the opposed endian system while reading.

 * @param data source byte array

 * @param offset starting offset in the byte array

 * @return the value read

 */

public static long readSwappedUnsignedInteger(final byte[] data,final int offset){

  final long low=(((data[offset + 0] & 0xff) << 0) + ((data[offset + 1] & 0xff) << 8) + ((data[offset + 2] & 0xff) << 16));

  final long high=data[offset + 3] & 0xff;

  return (high << 24) + (0xffffffffL & low);

}

Location: EndianUtils.java

Content: 

/** 

 * Reads a unsigned integer (32-bit) from an InputStream. The value is converted to the opposed endian system while reading.

 * @param input source InputStream

 * @return the value just read

 * @throws IOException in case of an I/O problem

 */

public static long readSwappedUnsignedInteger(final InputStream input) throws IOException {

  final int value1=read(input);

  final int value2=read(input);

  final int value3=read(input);

  final int value4=read(input);

  final long low=(((value1 & 0xff) << 0) + ((value2 & 0xff) << 8) + ((value3 & 0xff) << 16));

  final long high=value4 & 0xff;

  return (high << 24) + (0xffffffffL & low);

}

Location: EndianUtils.java

Content: 

/** 

 * Reads an unsigned short (16-bit) value from a byte array at a given offset. The value is converted to the opposed endian system while reading.

 * @param data source byte array

 * @param offset starting offset in the byte array

 * @return the value read

 */

public static int readSwappedUnsignedShort(final byte[] data,final int offset){

  return (((data[offset + 0] & 0xff) << 0) + ((data[offset + 1] & 0xff) << 8));

}

Location: EndianUtils.java

Content: 

/** 

 * Reads a unsigned short (16-bit) from an InputStream. The value is converted to the opposed endian system while reading.

 * @param input source InputStream

 * @return the value just read

 * @throws IOException in case of an I/O problem

 */

public static int readSwappedUnsignedShort(final InputStream input) throws IOException {

  final int value1=read(input);

  final int value2=read(input);

  return (((value1 & 0xff) << 0) + ((value2 & 0xff) << 8));

}

Location: EndianUtils.java

Content: 

/** 

 * Reads the next byte from the input stream.

 * @param input  the stream

 * @return the byte

 * @throws IOException if the end of file is reached

 */

private static int read(final InputStream input) throws IOException {

  final int value=input.read();

  if (EOF == value) {

    throw new EOFException("Unexpected EOF reached");

  }

  return value;

}

Location: EndianUtils.java

Content: 

/** 

 * Converts a "double" value between endian systems.

 * @param value value to convert

 * @return the converted value

 */

public static double swapDouble(final double value){

  return Double.longBitsToDouble(swapLong(Double.doubleToLongBits(value)));

}

Location: EndianUtils.java

Content: 

/** 

 * Converts a "float" value between endian systems.

 * @param value value to convert

 * @return the converted value

 */

public static float swapFloat(final float value){

  return Float.intBitsToFloat(swapInteger(Float.floatToIntBits(value)));

}

Location: EndianUtils.java

Content: 

/** 

 * Converts a "int" value between endian systems.

 * @param value value to convert

 * @return the converted value

 */

public static int swapInteger(final int value){

  return (((value >> 0) & 0xff) << 24) + (((value >> 8) & 0xff) << 16) + (((value >> 16) & 0xff) << 8)+ (((value >> 24) & 0xff) << 0);

}

Location: EndianUtils.java

Content: 

/** 

 * Converts a "long" value between endian systems.

 * @param value value to convert

 * @return the converted value

 */

public static long swapLong(final long value){

  return (((value >> 0) & 0xff) << 56) + (((value >> 8) & 0xff) << 48) + (((value >> 16) & 0xff) << 40)+ (((value >> 24) & 0xff) << 32)+ (((value >> 32) & 0xff) << 24)+ (((value >> 40) & 0xff) << 16)+ (((value >> 48) & 0xff) << 8)+ (((value >> 56) & 0xff) << 0);

}

Location: EndianUtils.java

Content: 

/** 

 * Converts a "short" value between endian systems.

 * @param value value to convert

 * @return the converted value

 */

public static short swapShort(final short value){

  return (short)((((value >> 0) & 0xff) << 8) + (((value >> 8) & 0xff) << 0));

}

Location: EndianUtils.java

Content: 

/** 

 * Writes a "double" value to a byte array at a given offset. The value is converted to the opposed endian system while writing.

 * @param data target byte array

 * @param offset starting offset in the byte array

 * @param value value to write

 */

public static void writeSwappedDouble(final byte[] data,final int offset,final double value){

  writeSwappedLong(data,offset,Double.doubleToLongBits(value));

}

Location: EndianUtils.java

Content: 

/** 

 * Writes a "double" value to an OutputStream. The value is converted to the opposed endian system while writing.

 * @param output target OutputStream

 * @param value value to write

 * @throws IOException in case of an I/O problem

 */

public static void writeSwappedDouble(final OutputStream output,final double value) throws IOException {

  writeSwappedLong(output,Double.doubleToLongBits(value));

}

Location: EndianUtils.java

Content: 

/** 

 * Writes a "float" value to a byte array at a given offset. The value is converted to the opposed endian system while writing.

 * @param data target byte array

 * @param offset starting offset in the byte array

 * @param value value to write

 */

public static void writeSwappedFloat(final byte[] data,final int offset,final float value){

  writeSwappedInteger(data,offset,Float.floatToIntBits(value));

}

Location: EndianUtils.java

Content: 

/** 

 * Writes a "float" value to an OutputStream. The value is converted to the opposed endian system while writing.

 * @param output target OutputStream

 * @param value value to write

 * @throws IOException in case of an I/O problem

 */

public static void writeSwappedFloat(final OutputStream output,final float value) throws IOException {

  writeSwappedInteger(output,Float.floatToIntBits(value));

}

Location: EndianUtils.java

Content: 

/** 

 * Writes a "int" value to a byte array at a given offset. The value is converted to the opposed endian system while writing.

 * @param data target byte array

 * @param offset starting offset in the byte array

 * @param value value to write

 */

public static void writeSwappedInteger(final byte[] data,final int offset,final int value){

  data[offset + 0]=(byte)((value >> 0) & 0xff);

  data[offset + 1]=(byte)((value >> 8) & 0xff);

  data[offset + 2]=(byte)((value >> 16) & 0xff);

  data[offset + 3]=(byte)((value >> 24) & 0xff);

}

Location: EndianUtils.java

Content: 

/** 

 * Writes a "int" value to an OutputStream. The value is converted to the opposed endian system while writing.

 * @param output target OutputStream

 * @param value value to write

 * @throws IOException in case of an I/O problem

 */

public static void writeSwappedInteger(final OutputStream output,final int value) throws IOException {

  output.write((byte)((value >> 0) & 0xff));

  output.write((byte)((value >> 8) & 0xff));

  output.write((byte)((value >> 16) & 0xff));

  output.write((byte)((value >> 24) & 0xff));

}

Location: EndianUtils.java

Content: 

/** 

 * Writes a "long" value to a byte array at a given offset. The value is converted to the opposed endian system while writing.

 * @param data target byte array

 * @param offset starting offset in the byte array

 * @param value value to write

 */

public static void writeSwappedLong(final byte[] data,final int offset,final long value){

  data[offset + 0]=(byte)((value >> 0) & 0xff);

  data[offset + 1]=(byte)((value >> 8) & 0xff);

  data[offset + 2]=(byte)((value >> 16) & 0xff);

  data[offset + 3]=(byte)((value >> 24) & 0xff);

  data[offset + 4]=(byte)((value >> 32) & 0xff);

  data[offset + 5]=(byte)((value >> 40) & 0xff);

  data[offset + 6]=(byte)((value >> 48) & 0xff);

  data[offset + 7]=(byte)((value >> 56) & 0xff);

}

Location: EndianUtils.java

Content: 

/** 

 * Writes a "long" value to an OutputStream. The value is converted to the opposed endian system while writing.

 * @param output target OutputStream

 * @param value value to write

 * @throws IOException in case of an I/O problem

 */

public static void writeSwappedLong(final OutputStream output,final long value) throws IOException {

  output.write((byte)((value >> 0) & 0xff));

  output.write((byte)((value >> 8) & 0xff));

  output.write((byte)((value >> 16) & 0xff));

  output.write((byte)((value >> 24) & 0xff));

  output.write((byte)((value >> 32) & 0xff));

  output.write((byte)((value >> 40) & 0xff));

  output.write((byte)((value >> 48) & 0xff));

  output.write((byte)((value >> 56) & 0xff));

}

Location: EndianUtils.java

Content: 

/** 

 * Writes a "short" value to a byte array at a given offset. The value is converted to the opposed endian system while writing.

 * @param data target byte array

 * @param offset starting offset in the byte array

 * @param value value to write

 */

public static void writeSwappedShort(final byte[] data,final int offset,final short value){

  data[offset + 0]=(byte)((value >> 0) & 0xff);

  data[offset + 1]=(byte)((value >> 8) & 0xff);

}

Location: EndianUtils.java

Content: 

/** 

 * Writes a "short" value to an OutputStream. The value is converted to the opposed endian system while writing.

 * @param output target OutputStream

 * @param value value to write

 * @throws IOException in case of an I/O problem

 */

public static void writeSwappedShort(final OutputStream output,final short value) throws IOException {

  output.write((byte)((value >> 0) & 0xff));

  output.write((byte)((value >> 8) & 0xff));

}

