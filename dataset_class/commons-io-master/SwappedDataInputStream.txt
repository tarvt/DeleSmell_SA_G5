Location: SwappedDataInputStream.java

Content: 

/** 

 * Return <code> {@link #readByte()} != 0</code>

 * @return false if the byte read is zero, otherwise true

 * @throws IOException if an I/O error occurs.

 * @throws EOFException if an end of file is reached unexpectedly

 */

@Override public boolean readBoolean() throws IOException, EOFException {

  return 0 != readByte();

}

Location: SwappedDataInputStream.java

Content: 

/** 

 * Invokes the delegate's  {@code read()} method.

 * @return the byte read or -1 if the end of stream

 * @throws IOException if an I/O error occurs.

 * @throws EOFException if an end of file is reached unexpectedly

 */

@Override public byte readByte() throws IOException, EOFException {

  return (byte)in.read();

}

Location: SwappedDataInputStream.java

Content: 

/** 

 * Reads a character delegating to  {@link #readShort()}.

 * @return the byte read or -1 if the end of stream

 * @throws IOException if an I/O error occurs.

 * @throws EOFException if an end of file is reached unexpectedly

 */

@Override public char readChar() throws IOException, EOFException {

  return (char)readShort();

}

Location: SwappedDataInputStream.java

Content: 

/** 

 * Delegates to  {@link EndianUtils#readSwappedDouble(InputStream)}.

 * @return the read long

 * @throws IOException if an I/O error occurs.

 * @throws EOFException if an end of file is reached unexpectedly

 */

@Override public double readDouble() throws IOException, EOFException {

  return EndianUtils.readSwappedDouble(in);

}

Location: SwappedDataInputStream.java

Content: 

/** 

 * Delegates to  {@link EndianUtils#readSwappedFloat(InputStream)}.

 * @return the read long

 * @throws IOException if an I/O error occurs.

 * @throws EOFException if an end of file is reached unexpectedly

 */

@Override public float readFloat() throws IOException, EOFException {

  return EndianUtils.readSwappedFloat(in);

}

Location: SwappedDataInputStream.java

Content: 

/** 

 * Invokes the delegate's  {@code read(byte[] data, int, int)} method.

 * @param data the buffer to read the bytes into

 * @throws EOFException if an end of file is reached unexpectedly

 * @throws IOException if an I/O error occurs.

 */

@Override public void readFully(final byte[] data) throws IOException, EOFException {

  readFully(data,0,data.length);

}

Location: SwappedDataInputStream.java

Content: 

/** 

 * Invokes the delegate's  {@code read(byte[] data, int, int)} method.

 * @param data the buffer to read the bytes into

 * @param offset The start offset

 * @param length The number of bytes to read

 * @throws EOFException if an end of file is reached unexpectedly

 * @throws IOException if an I/O error occurs.

 */

@Override public void readFully(final byte[] data,final int offset,final int length) throws IOException, EOFException {

  int remaining=length;

  while (remaining > 0) {

    final int location=offset + length - remaining;

    final int count=read(data,location,remaining);

    if (EOF == count) {

      throw new EOFException();

    }

    remaining-=count;

  }

}

Location: SwappedDataInputStream.java

Content: 

/** 

 * Delegates to  {@link EndianUtils#readSwappedInteger(InputStream)}.

 * @return the read long

 * @throws EOFException if an end of file is reached unexpectedly

 * @throws IOException if an I/O error occurs.

 */

@Override public int readInt() throws IOException, EOFException {

  return EndianUtils.readSwappedInteger(in);

}

Location: SwappedDataInputStream.java

Content: 

/** 

 * Delegates to  {@link EndianUtils#readSwappedLong(InputStream)}.

 * @return the read long

 * @throws EOFException if an end of file is reached unexpectedly

 * @throws IOException if an I/O error occurs.

 */

@Override public long readLong() throws IOException, EOFException {

  return EndianUtils.readSwappedLong(in);

}

Location: SwappedDataInputStream.java

Content: 

/** 

 * Delegates to  {@link EndianUtils#readSwappedShort(InputStream)}.

 * @return the read long

 * @throws EOFException if an end of file is reached unexpectedly

 * @throws IOException if an I/O error occurs.

 */

@Override public short readShort() throws IOException, EOFException {

  return EndianUtils.readSwappedShort(in);

}

Location: SwappedDataInputStream.java

Content: 

/** 

 * Invokes the delegate's  {@code read()} method.

 * @return the byte read or -1 if the end of stream

 * @throws EOFException if an end of file is reached unexpectedly

 * @throws IOException if an I/O error occurs.

 */

@Override public int readUnsignedByte() throws IOException, EOFException {

  return in.read();

}

Location: SwappedDataInputStream.java

Content: 

/** 

 * Delegates to  {@link EndianUtils#readSwappedUnsignedShort(InputStream)}.

 * @return the read long

 * @throws EOFException if an end of file is reached unexpectedly

 * @throws IOException if an I/O error occurs.

 */

@Override public int readUnsignedShort() throws IOException, EOFException {

  return EndianUtils.readSwappedUnsignedShort(in);

}

Location: SwappedDataInputStream.java

Content: 

/** 

 * Not currently supported - throws  {@link UnsupportedOperationException}.

 * @return UTF String read

 * @throws EOFException if an end of file is reached unexpectedly

 * @throws IOException if an I/O error occurs.

 */

@Override public String readUTF() throws IOException, EOFException {

  throw UnsupportedOperationExceptions.method("readUTF");

}

Location: SwappedDataInputStream.java

Content: 

/** 

 * Invokes the delegate's  {@code skip(int)} method.

 * @param count the number of bytes to skip

 * @return the number of bytes to skipped or -1 if the end of stream

 * @throws EOFException if an end of file is reached unexpectedly

 * @throws IOException if an I/O error occurs.

 */

@Override public int skipBytes(final int count) throws IOException, EOFException {

  return (int)in.skip(count);

}

Location: SwappedDataInputStream.java

Content: 

/** 

 * Constructs a SwappedDataInputStream.

 * @param input InputStream to read from

 */

public SwappedDataInputStream(final InputStream input){

  super(input);

}

