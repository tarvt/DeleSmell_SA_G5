Location: ByteArrayOutputStream.java

Content: 

/** 

 * Creates a new byte array output stream. The buffer capacity is initially  {@value AbstractByteArrayOutputStream#DEFAULT_SIZE} bytes, though its size increases if necessary.

 */

public ByteArrayOutputStream(){

  this(DEFAULT_SIZE);

}

Location: ByteArrayOutputStream.java

Content: 

/** 

 * Creates a new byte array output stream, with a buffer capacity of the specified size, in bytes.

 * @param size  the initial size

 * @throws IllegalArgumentException if size is negative

 */

public ByteArrayOutputStream(final int size){

  if (size < 0) {

    throw new IllegalArgumentException("Negative initial size: " + size);

  }

synchronized (this) {

    needNewBuffer(size);

  }

}

Location: ByteArrayOutputStream.java

Content: 

/** 

 * @see java.io.ByteArrayOutputStream#reset()

 */

@Override public synchronized void reset(){

  resetImpl();

}

Location: ByteArrayOutputStream.java

Content: 

@Override public synchronized int size(){

  return count;

}

Location: ByteArrayOutputStream.java

Content: 

/** 

 * Fetches entire contents of an  {@code InputStream} and representsame data as result InputStream. <p> This method is useful where, </p> <ul> <li>Source InputStream is slow.</li> <li>It has network resources associated, so we cannot keep it open for long time.</li> <li>It has network timeout associated.</li> </ul> It can be used in favor of  {@link #toByteArray()}, since it avoids unnecessary allocation and copy of byte[].<br> This method buffers the input internally, so there is no need to use a {@code BufferedInputStream}.

 * @param input Stream to be fully buffered.

 * @return A fully buffered stream.

 * @throws IOException if an I/O error occurs.

 * @since 2.0

 */

public static InputStream toBufferedInputStream(final InputStream input) throws IOException {

  return toBufferedInputStream(input,DEFAULT_SIZE);

}

Location: ByteArrayOutputStream.java

Content: 

/** 

 * Fetches entire contents of an  {@code InputStream} and representsame data as result InputStream. <p> This method is useful where, </p> <ul> <li>Source InputStream is slow.</li> <li>It has network resources associated, so we cannot keep it open for long time.</li> <li>It has network timeout associated.</li> </ul> It can be used in favor of  {@link #toByteArray()}, since it avoids unnecessary allocation and copy of byte[].<br> This method buffers the input internally, so there is no need to use a {@code BufferedInputStream}.

 * @param input Stream to be fully buffered.

 * @param size the initial buffer size

 * @return A fully buffered stream.

 * @throws IOException if an I/O error occurs.

 * @since 2.5

 */

public static InputStream toBufferedInputStream(final InputStream input,final int size) throws IOException {

  try (final ByteArrayOutputStream output=new ByteArrayOutputStream(size)){

    output.write(input);

    return output.toInputStream();

  }

 }

Location: ByteArrayOutputStream.java

Content: 

@Override public synchronized byte[] toByteArray(){

  return toByteArrayImpl();

}

Location: ByteArrayOutputStream.java

Content: 

@Override public synchronized int write(final InputStream in) throws IOException {

  return writeImpl(in);

}

