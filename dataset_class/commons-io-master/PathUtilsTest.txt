Location: PathUtilsTest.java

Content: 

private FileSystem openArchive(final Path p,final boolean createNew) throws IOException {

  if (createNew) {

    final Map<String,String> env=new HashMap<>();

    env.put("create","true");

    final URI fileUri=p.toAbsolutePath().toUri();

    final URI uri=URI.create("jar:" + fileUri.toASCIIString());

    return FileSystems.newFileSystem(uri,env,null);

  }

  return FileSystems.newFileSystem(p,(ClassLoader)null);

}

Location: PathUtilsTest.java

Content: 

@Test public void testCopyDirectoryForDifferentFilesystemsWithAbsolutePath() throws IOException {

  final Path archivePath=Paths.get(TEST_JAR_PATH);

  try (final FileSystem archive=openArchive(archivePath,false)){

    Path sourceDir=archive.getPath("dir1");

    PathUtils.copyDirectory(sourceDir,tempDir);

    assertTrue(Files.exists(tempDir.resolve("f1")));

    sourceDir=archive.getPath("/next");

    PathUtils.copyDirectory(sourceDir,tempDir);

    assertTrue(Files.exists(tempDir.resolve("dir")));

  }

 }

Location: PathUtilsTest.java

Content: 

@Test public void testCopyDirectoryForDifferentFilesystemsWithAbsolutePathReverse() throws IOException {

  try (final FileSystem archive=openArchive(tempDir.resolve(TEST_JAR_NAME),true)){

    Path targetDir=archive.getPath("target");

    Files.createDirectory(targetDir);

    final Path sourceDir=Paths.get("src/test/resources/org/apache/commons/io/dirs-2-file-size-2").toAbsolutePath();

    PathUtils.copyDirectory(sourceDir,targetDir);

    assertTrue(Files.exists(targetDir.resolve("dirs-a-file-size-1")));

    targetDir=archive.getPath("/");

    PathUtils.copyDirectory(sourceDir,targetDir);

    assertTrue(Files.exists(targetDir.resolve("dirs-a-file-size-1")));

  }

 }

Location: PathUtilsTest.java

Content: 

@Test public void testCopyDirectoryForDifferentFilesystemsWithRelativePath() throws IOException {

  final Path archivePath=Paths.get(TEST_JAR_PATH);

  try (final FileSystem archive=openArchive(archivePath,false);final FileSystem targetArchive=openArchive(tempDir.resolve(TEST_JAR_NAME),true)){

    final Path targetDir=targetArchive.getPath("targetDir");

    Files.createDirectory(targetDir);

    Path sourceDir=archive.getPath("next");

    PathUtils.copyDirectory(sourceDir,targetDir);

    assertTrue(Files.exists(targetDir.resolve("dir")));

    sourceDir=archive.getPath("/dir1");

    PathUtils.copyDirectory(sourceDir,targetDir);

    assertTrue(Files.exists(targetDir.resolve("f1")));

  }

 }

Location: PathUtilsTest.java

Content: 

@Test public void testCopyDirectoryForDifferentFilesystemsWithRelativePathReverse() throws IOException {

  try (final FileSystem archive=openArchive(tempDir.resolve(TEST_JAR_NAME),true)){

    Path targetDir=archive.getPath("target");

    Files.createDirectory(targetDir);

    final Path sourceDir=Paths.get("src/test/resources/org/apache/commons/io/dirs-2-file-size-2");

    PathUtils.copyDirectory(sourceDir,targetDir);

    assertTrue(Files.exists(targetDir.resolve("dirs-a-file-size-1")));

    targetDir=archive.getPath("/");

    PathUtils.copyDirectory(sourceDir,targetDir);

    assertTrue(Files.exists(targetDir.resolve("dirs-a-file-size-1")));

  }

 }

Location: PathUtilsTest.java

Content: 

@Test public void testCopyFile() throws IOException {

  final Path sourceFile=Paths.get("src/test/resources/org/apache/commons/io/dirs-1-file-size-1/file-size-1.bin");

  final Path targetFile=PathUtils.copyFileToDirectory(sourceFile,tempDir);

  assertTrue(Files.exists(targetFile));

  assertEquals(Files.size(sourceFile),Files.size(targetFile));

}

Location: PathUtilsTest.java

Content: 

@Test public void testCreateDirectoriesAlreadyExists() throws IOException {

  assertEquals(tempDir.getParent(),PathUtils.createParentDirectories(tempDir));

}

Location: PathUtilsTest.java

Content: 

@Test public void testCreateDirectoriesNew() throws IOException {

  assertEquals(tempDir,PathUtils.createParentDirectories(tempDir.resolve("child")));

}

Location: PathUtilsTest.java

Content: 

@Test public void testGetTempDirectory(){

  final Path tempDirectory=Paths.get(System.getProperty("java.io.tmpdir"));

  assertEquals(tempDirectory,PathUtils.getTempDirectory());

}

Location: PathUtilsTest.java

Content: 

@Test public void testIsDirectory() throws IOException {

  assertFalse(PathUtils.isDirectory(null));

  assertTrue(PathUtils.isDirectory(tempDir));

  final Path testFile1=Files.createTempFile(tempDir,"prefix",null);

  assertFalse(PathUtils.isDirectory(testFile1));

  final Path tempDir=Files.createTempDirectory(getClass().getCanonicalName());

  Files.delete(tempDir);

  assertFalse(PathUtils.isDirectory(tempDir));

}

Location: PathUtilsTest.java

Content: 

@Test public void testIsRegularFile() throws IOException {

  assertFalse(PathUtils.isRegularFile(null));

  assertFalse(PathUtils.isRegularFile(tempDir));

  final Path testFile1=Files.createTempFile(tempDir,"prefix",null);

  assertTrue(PathUtils.isRegularFile(testFile1));

  Files.delete(testFile1);

  assertFalse(PathUtils.isRegularFile(testFile1));

}

Location: PathUtilsTest.java

Content: 

@Test public void testNewDirectoryStream() throws Exception {

  final PathFilter pathFilter=new NameFileFilter(PATH_FIXTURE);

  try (final DirectoryStream<Path> stream=PathUtils.newDirectoryStream(PathUtils.current(),pathFilter)){

    final Iterator<Path> iterator=stream.iterator();

    final Path path=iterator.next();

    assertEquals(PATH_FIXTURE,path.getFileName().toString());

    assertFalse(iterator.hasNext());

  }

 }

Location: PathUtilsTest.java

Content: 

@Test public void testNewOutputStreamExistingFileAppendFalse() throws IOException {

  testNewOutputStreamNewFile(false);

  testNewOutputStreamNewFile(false);

}

Location: PathUtilsTest.java

Content: 

@Test public void testNewOutputStreamExistingFileAppendTrue() throws IOException {

  testNewOutputStreamNewFile(true);

  final Path file=writeToNewOutputStream(true);

  assertArrayEquals(ArrayUtils.addAll(BYTE_ARRAY_FIXTURE,BYTE_ARRAY_FIXTURE),Files.readAllBytes(file));

}

Location: PathUtilsTest.java

Content: 

@Test public void testNewOutputStreamNewFileAppendFalse() throws IOException {

  testNewOutputStreamNewFile(false);

}

Location: PathUtilsTest.java

Content: 

@Test public void testNewOutputStreamNewFileAppendTrue() throws IOException {

  testNewOutputStreamNewFile(true);

}

Location: PathUtilsTest.java

Content: 

public void testNewOutputStreamNewFile(final boolean append) throws IOException {

  final Path file=writeToNewOutputStream(append);

  assertArrayEquals(BYTE_ARRAY_FIXTURE,Files.readAllBytes(file));

}

Location: PathUtilsTest.java

Content: 

@Test public void testReadStringEmptyFile() throws IOException {

  final Path path=Paths.get("src/test/resources/org/apache/commons/io/test-file-empty.bin");

  assertEquals(StringUtils.EMPTY,PathUtils.readString(path,StandardCharsets.UTF_8));

  assertEquals(StringUtils.EMPTY,PathUtils.readString(path,null));

}

Location: PathUtilsTest.java

Content: 

@Test public void testReadStringSimpleUtf8() throws IOException {

  final Path path=Paths.get("src/test/resources/org/apache/commons/io/test-file-simple-utf8.bin");

  final String expected="ABC\r\n";

  assertEquals(expected,PathUtils.readString(path,StandardCharsets.UTF_8));

  assertEquals(expected,PathUtils.readString(path,null));

}

Location: PathUtilsTest.java

Content: 

@Test public void testSetReadOnlyFile() throws IOException {

  final Path resolved=tempDir.resolve("testSetReadOnlyFile.txt");

  assumeFalse(SystemUtils.IS_OS_LINUX);

  PathUtils.writeString(resolved,"test",StandardCharsets.UTF_8);

  final boolean readable=Files.isReadable(resolved);

  final boolean writable=Files.isWritable(resolved);

  final boolean regularFile=Files.isRegularFile(resolved);

  final boolean executable=Files.isExecutable(resolved);

  final boolean hidden=Files.isHidden(resolved);

  final boolean directory=Files.isDirectory(resolved);

  final boolean symbolicLink=Files.isSymbolicLink(resolved);

  assertTrue(readable);

  assertTrue(writable);

  PathUtils.setReadOnly(resolved,false);

  assertEquals(true,Files.isReadable(resolved));

  assertEquals(true,Files.isWritable(resolved));

  assertEquals(regularFile,Files.isReadable(resolved));

  assertEquals(executable,Files.isExecutable(resolved));

  assertEquals(hidden,Files.isHidden(resolved));

  assertEquals(directory,Files.isDirectory(resolved));

  assertEquals(symbolicLink,Files.isSymbolicLink(resolved));

  PathUtils.setReadOnly(resolved,true);

  assertEquals(true,Files.isReadable(resolved));

  assertEquals(false,Files.isWritable(resolved));

  final DosFileAttributeView dosFileAttributeView=PathUtils.getDosFileAttributeView(resolved);

  if (dosFileAttributeView != null) {

    assertTrue(dosFileAttributeView.readAttributes().isReadOnly());

  }

  final PosixFileAttributeView posixFileAttributeView=PathUtils.getPosixFileAttributeView(resolved);

  if (posixFileAttributeView != null) {

    final Set<PosixFilePermission> permissions=posixFileAttributeView.readAttributes().permissions();

    assertFalse(permissions.contains(PosixFilePermission.GROUP_WRITE),() -> permissions.toString());

    assertFalse(permissions.contains(PosixFilePermission.OTHERS_WRITE),() -> permissions.toString());

    assertFalse(permissions.contains(PosixFilePermission.OWNER_WRITE),() -> permissions.toString());

  }

  assertEquals(regularFile,Files.isReadable(resolved));

  assertEquals(executable,Files.isExecutable(resolved));

  assertEquals(hidden,Files.isHidden(resolved));

  assertEquals(directory,Files.isDirectory(resolved));

  assertEquals(symbolicLink,Files.isSymbolicLink(resolved));

  PathUtils.setReadOnly(resolved,false);

  PathUtils.deleteFile(resolved);

}

Location: PathUtilsTest.java

Content: 

@Test public void testWriteStringToFile1() throws Exception {

  final Path file=tempDir.resolve("write.txt");

  PathUtils.writeString(file,"Hello /u1234",StandardCharsets.UTF_8);

  final byte[] text="Hello /u1234".getBytes(StandardCharsets.UTF_8);

  TestUtils.assertEqualContent(text,file);

}

Location: PathUtilsTest.java

Content: 

/** 

 * Tests newOutputStream() here and don't use Files.write obviously.

 */

private Path writeToNewOutputStream(final boolean append) throws IOException {

  final Path file=tempDir.resolve("test1.txt");

  try (OutputStream os=PathUtils.newOutputStream(file,append)){

    os.write(BYTE_ARRAY_FIXTURE);

  }

   return file;

}

