Location: WriterOutputStream.java

Content: 

/** 

 * Check if the JDK in use properly supports the given charset.

 * @param charset the charset to check the support for

 */

private static void checkIbmJdkWithBrokenUTF16(final Charset charset){

  if (!"UTF-16".equals(charset.name())) {

    return;

  }

  final String TEST_STRING_2="v\u00e9s";

  final byte[] bytes=TEST_STRING_2.getBytes(charset);

  final CharsetDecoder charsetDecoder2=charset.newDecoder();

  final ByteBuffer bb2=ByteBuffer.allocate(16);

  final CharBuffer cb2=CharBuffer.allocate(TEST_STRING_2.length());

  final int len=bytes.length;

  for (int i=0; i < len; i++) {

    bb2.put(bytes[i]);

    bb2.flip();

    try {

      charsetDecoder2.decode(bb2,cb2,i == (len - 1));

    }

 catch (    final IllegalArgumentException e) {

      throw new UnsupportedOperationException("UTF-16 requested when running on an IBM JDK with broken UTF-16 support. " + "Please find a JDK that supports UTF-16 if you intend to use UF-16 with WriterOutputStream");

    }

    bb2.compact();

  }

  cb2.rewind();

  if (!TEST_STRING_2.equals(cb2.toString())) {

    throw new UnsupportedOperationException("UTF-16 requested when running on an IBM JDK with broken UTF-16 support. " + "Please find a JDK that supports UTF-16 if you intend to use UF-16 with WriterOutputStream");

  }

}

Location: WriterOutputStream.java

Content: 

/** 

 * Flush the output.

 * @throws IOException if an I/O error occurs.

 */

private void flushOutput() throws IOException {

  if (decoderOut.position() > 0) {

    writer.write(decoderOut.array(),0,decoderOut.position());

    decoderOut.rewind();

  }

}

Location: WriterOutputStream.java

Content: 

/** 

 * Decode the contents of the input ByteBuffer into a CharBuffer.

 * @param endOfInput indicates end of input

 * @throws IOException if an I/O error occurs.

 */

private void processInput(final boolean endOfInput) throws IOException {

  decoderIn.flip();

  CoderResult coderResult;

  while (true) {

    coderResult=decoder.decode(decoderIn,decoderOut,endOfInput);

    if (coderResult.isOverflow()) {

      flushOutput();

    }

 else     if (coderResult.isUnderflow()) {

      break;

    }

 else {

      throw new IOException("Unexpected coder result");

    }

  }

  decoderIn.compact();

}

Location: WriterOutputStream.java

Content: 

/** 

 * Constructs a new  {@link WriterOutputStream} that uses the default character encoding and with a default outputbuffer size of  {@value #BUFFER_SIZE} characters. The output buffer will only be flushed when it overflows or when{@link #flush()} or {@link #close()} is called.

 * @param writer the target {@link Writer}

 * @deprecated 2.5 use {@link #WriterOutputStream(Writer,Charset)} instead

 */

@Deprecated public WriterOutputStream(final Writer writer){

  this(writer,Charset.defaultCharset(),BUFFER_SIZE,false);

}

Location: WriterOutputStream.java

Content: 

/** 

 * Constructs a new  {@link WriterOutputStream} with a default output buffer size of {@value #BUFFER_SIZE}characters. The output buffer will only be flushed when it overflows or when  {@link #flush()} or {@link #close()}is called.

 * @param writer the target {@link Writer}

 * @param charset the charset encoding

 */

public WriterOutputStream(final Writer writer,final Charset charset){

  this(writer,charset,BUFFER_SIZE,false);

}

Location: WriterOutputStream.java

Content: 

/** 

 * Constructs a new  {@link WriterOutputStream} with a default output buffer size of {@value #BUFFER_SIZE}characters. The output buffer will only be flushed when it overflows or when  {@link #flush()} or {@link #close()}is called.

 * @param writer the target {@link Writer}

 * @param decoder the charset decoder

 * @since 2.1

 */

public WriterOutputStream(final Writer writer,final CharsetDecoder decoder){

  this(writer,decoder,BUFFER_SIZE,false);

}

Location: WriterOutputStream.java

Content: 

/** 

 * Constructs a new  {@link WriterOutputStream}.

 * @param writer the target {@link Writer}

 * @param decoder the charset decoder

 * @param bufferSize the size of the output buffer in number of characters

 * @param writeImmediately If {@code true} the output buffer will be flushed after eachwrite operation, i.e. all available data will be written to the underlying  {@link Writer} immediately. If {@code false}, the output buffer will only be flushed when it overflows or when {@link #flush()} or {@link #close()} is called.

 * @since 2.1

 */

public WriterOutputStream(final Writer writer,final CharsetDecoder decoder,final int bufferSize,final boolean writeImmediately){

  checkIbmJdkWithBrokenUTF16(decoder.charset());

  this.writer=writer;

  this.decoder=decoder;

  this.writeImmediately=writeImmediately;

  decoderOut=CharBuffer.allocate(bufferSize);

}

Location: WriterOutputStream.java

Content: 

/** 

 * Constructs a new  {@link WriterOutputStream}.

 * @param writer the target {@link Writer}

 * @param charset the charset encoding

 * @param bufferSize the size of the output buffer in number of characters

 * @param writeImmediately If {@code true} the output buffer will be flushed after eachwrite operation, i.e. all available data will be written to the underlying  {@link Writer} immediately. If {@code false}, the output buffer will only be flushed when it overflows or when {@link #flush()} or {@link #close()} is called.

 */

public WriterOutputStream(final Writer writer,final Charset charset,final int bufferSize,final boolean writeImmediately){

  this(writer,charset.newDecoder().onMalformedInput(CodingErrorAction.REPLACE).onUnmappableCharacter(CodingErrorAction.REPLACE).replaceWith("?"),bufferSize,writeImmediately);

}

Location: WriterOutputStream.java

Content: 

/** 

 * Constructs a new  {@link WriterOutputStream} with a default output buffer size of {@value #BUFFER_SIZE}characters. The output buffer will only be flushed when it overflows or when  {@link #flush()} or {@link #close()}is called.

 * @param writer the target {@link Writer}

 * @param charsetName the name of the charset encoding

 */

public WriterOutputStream(final Writer writer,final String charsetName){

  this(writer,charsetName,BUFFER_SIZE,false);

}

Location: WriterOutputStream.java

Content: 

/** 

 * Constructs a new  {@link WriterOutputStream}.

 * @param writer the target {@link Writer}

 * @param charsetName the name of the charset encoding

 * @param bufferSize the size of the output buffer in number of characters

 * @param writeImmediately If {@code true} the output buffer will be flushed after eachwrite operation, i.e. all available data will be written to the underlying  {@link Writer} immediately. If {@code false}, the output buffer will only be flushed when it overflows or when {@link #flush()} or {@link #close()} is called.

 */

public WriterOutputStream(final Writer writer,final String charsetName,final int bufferSize,final boolean writeImmediately){

  this(writer,Charset.forName(charsetName),bufferSize,writeImmediately);

}

