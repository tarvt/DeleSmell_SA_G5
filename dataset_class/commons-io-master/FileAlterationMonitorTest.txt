Location: FileAlterationMonitorTest.java

Content: 

/** 

 * Check all the File Collections have the expected sizes.

 */

private void checkFile(final String label,final File file,final Collection<File> files){

  for (int i=0; i < 20; i++) {

    if (files.contains(file)) {

      return;

    }

    TestUtils.sleepQuietly(pauseTime);

  }

  fail(label + " " + file+ " not found");

}

Location: FileAlterationMonitorTest.java

Content: 

/** 

 * Construct a new test case.

 */

public FileAlterationMonitorTest(){

  listener=new CollectionFileListener(false);

}

Location: FileAlterationMonitorTest.java

Content: 

/** 

 * Test add/remove observers.

 */

@Test public void testAddRemoveObservers(){

  FileAlterationObserver[] observers=null;

  FileAlterationMonitor monitor=new FileAlterationMonitor(123,observers);

  assertEquals(123,monitor.getInterval(),"Interval");

  assertFalse(monitor.getObservers().iterator().hasNext(),"Observers[1]");

  observers=new FileAlterationObserver[1];

  monitor=new FileAlterationMonitor(456,observers);

  assertFalse(monitor.getObservers().iterator().hasNext(),"Observers[2]");

  monitor.addObserver(null);

  assertFalse(monitor.getObservers().iterator().hasNext(),"Observers[3]");

  monitor.removeObserver(null);

  final FileAlterationObserver observer=new FileAlterationObserver("foo");

  monitor.addObserver(observer);

  final Iterator<FileAlterationObserver> it=monitor.getObservers().iterator();

  assertTrue(it.hasNext(),"Observers[4]");

  assertEquals(observer,it.next(),"Added");

  assertFalse(it.hasNext(),"Observers[5]");

  monitor.removeObserver(observer);

  assertFalse(monitor.getObservers().iterator().hasNext(),"Observers[6]");

}

Location: FileAlterationMonitorTest.java

Content: 

@Test public void testCollectionConstructor(){

  observer=new FileAlterationObserver("foo");

  final Collection<FileAlterationObserver> observers=Arrays.asList(observer);

  final FileAlterationMonitor monitor=new FileAlterationMonitor(0,observers);

  final Iterator<FileAlterationObserver> iterator=monitor.getObservers().iterator();

  assertEquals(observer,iterator.next());

}

Location: FileAlterationMonitorTest.java

Content: 

@Test public void testCollectionConstructorShouldDoNothingWithNullCollection(){

  final Collection<FileAlterationObserver> observers=null;

  final FileAlterationMonitor monitor=new FileAlterationMonitor(0,observers);

  assertFalse(monitor.getObservers().iterator().hasNext());

}

Location: FileAlterationMonitorTest.java

Content: 

@Test public void testCollectionConstructorShouldDoNothingWithNullObservers(){

  final Collection<FileAlterationObserver> observers=new ArrayList<>(5);

  final FileAlterationMonitor monitor=new FileAlterationMonitor(0,observers);

  assertFalse(monitor.getObservers().iterator().hasNext());

}

Location: FileAlterationMonitorTest.java

Content: 

/** 

 * Test default constructor.

 */

@Test public void testDefaultConstructor(){

  final FileAlterationMonitor monitor=new FileAlterationMonitor();

  assertEquals(10000,monitor.getInterval(),"Interval");

}

Location: FileAlterationMonitorTest.java

Content: 

/** 

 * Test checkAndNotify() method

 * @throws Exception

 */

@Test public void testMonitor() throws Exception {

  final long interval=100;

  listener.clear();

  final FileAlterationMonitor monitor=new FileAlterationMonitor(interval,observer);

  assertEquals(interval,monitor.getInterval(),"Interval");

  monitor.start();

  try {

    monitor.start();

    fail("Expected IllegalStateException");

  }

 catch (  final IllegalStateException e) {

  }

  checkCollectionsEmpty("A");

  File file1=touch(new File(testDir,"file1.java"));

  checkFile("Create",file1,listener.getCreatedFiles());

  listener.clear();

  checkCollectionsEmpty("B");

  file1=touch(file1);

  checkFile("Update",file1,listener.getChangedFiles());

  listener.clear();

  checkCollectionsEmpty("C");

  file1.delete();

  checkFile("Delete",file1,listener.getDeletedFiles());

  listener.clear();

  monitor.stop();

  try {

    monitor.stop();

    fail("Expected IllegalStateException");

  }

 catch (  final IllegalStateException e) {

  }

}

Location: FileAlterationMonitorTest.java

Content: 

/** 

 * Test case for IO-535 Verify that  {@link FileAlterationMonitor#stop()} stops the created thread

 */

@Test public void testStopWhileWaitingForNextInterval() throws Exception {

  final Collection<Thread> createdThreads=new ArrayList<>(1);

  final ThreadFactory threadFactory=new ThreadFactory(){

    private final ThreadFactory delegate=Executors.defaultThreadFactory();

    @Override public Thread newThread(    final Runnable r){

      final Thread thread=delegate.newThread(r);

      thread.setDaemon(true);

      createdThreads.add(thread);

      return thread;

    }

  }

;

  final FileAlterationMonitor monitor=new FileAlterationMonitor(1_000);

  monitor.setThreadFactory(threadFactory);

  monitor.start();

  assertFalse(createdThreads.isEmpty());

  Thread.sleep(10);

  monitor.stop(100);

  for (  final Thread thread : createdThreads) {

    assertFalse(thread.isAlive(),"The FileAlterationMonitor did not stop the threads it created.");

  }

}

Location: FileAlterationMonitorTest.java

Content: 

/** 

 * Test using a thread factory.

 * @throws Exception

 */

@Test public void testThreadFactory() throws Exception {

  final long interval=100;

  listener.clear();

  final FileAlterationMonitor monitor=new FileAlterationMonitor(interval,observer);

  monitor.setThreadFactory(Executors.defaultThreadFactory());

  assertEquals(interval,monitor.getInterval(),"Interval");

  monitor.start();

  checkCollectionsEmpty("A");

  final File file2=touch(new File(testDir,"file2.java"));

  checkFile("Create",file2,listener.getCreatedFiles());

  listener.clear();

  checkCollectionsEmpty("B");

  file2.delete();

  checkFile("Delete",file2,listener.getDeletedFiles());

  listener.clear();

  monitor.stop();

}

