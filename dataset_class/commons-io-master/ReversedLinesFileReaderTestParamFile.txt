Location: ReversedLinesFileReaderTestParamFile.java

Content: 

public static Stream<Arguments> testDataIntegrityWithBufferedReader() throws IOException, URISyntaxException {

  final Path sourcePath=TestResources.getPath("test-file-utf8-win-linebr.bin");

  final Path targetPath=Files.createTempFile("ReversedLinesFileReaderTestParamFile",".bin");

  try (Reader input=Files.newBufferedReader(sourcePath,StandardCharsets.UTF_8);Writer output=Files.newBufferedWriter(targetPath,Charset.defaultCharset())){

    IOUtils.copyLarge(input,output);

  }

   return Stream.of(Arguments.of(targetPath.toAbsolutePath().toString(),null,null,false,false),Arguments.of("test-file-20byteslength.bin","ISO_8859_1",null,false,true),Arguments.of("test-file-iso8859-1-shortlines-win-linebr.bin","ISO_8859_1",null,false,true),Arguments.of("test-file-iso8859-1.bin","ISO_8859_1",null,false,true),Arguments.of("test-file-shiftjis.bin","Shift_JIS",null,false,true),Arguments.of("test-file-utf16be.bin","UTF-16BE",null,false,true),Arguments.of("test-file-utf16le.bin","UTF-16LE",null,false,true),Arguments.of("test-file-utf8-cr-only.bin","UTF-8",null,false,true),Arguments.of("test-file-utf8-win-linebr.bin","UTF-8",null,false,true,Arguments.of("test-file-utf8-win-linebr.bin","UTF-8",1,false,true),Arguments.of("test-file-utf8-win-linebr.bin","UTF-8",2,false,true),Arguments.of("test-file-utf8-win-linebr.bin","UTF-8",3,false,true),Arguments.of("test-file-utf8-win-linebr.bin","UTF-8",4,false,true),Arguments.of("test-file-utf8.bin","UTF-8",null,false,true),Arguments.of("test-file-utf8.bin","UTF-8",null,true,true),Arguments.of("test-file-windows-31j.bin","windows-31j",null,false,true),Arguments.of("test-file-gbk.bin","gbk",null,false,true),Arguments.of("test-file-x-windows-949.bin","x-windows-949",null,false,true),Arguments.of("test-file-x-windows-950.bin","x-windows-950",null,false,true)));

}

Location: ReversedLinesFileReaderTestParamFile.java

Content: 

@ParameterizedTest(name="{0}, encoding={1}, blockSize={2}, useNonDefaultFileSystem={3}, isResource={4}") @MethodSource public void testDataIntegrityWithBufferedReader(final String fileName,final String charsetName,final Integer blockSize,final boolean useNonDefaultFileSystem,final boolean isResource) throws IOException, URISyntaxException {

  Path filePath=isResource ? TestResources.getPath(fileName) : Paths.get(fileName);

  FileSystem fileSystem=null;

  if (useNonDefaultFileSystem) {

    fileSystem=Jimfs.newFileSystem(Configuration.unix());

    filePath=Files.copy(filePath,fileSystem.getPath("/" + fileName));

  }

  final Charset charset=charsetName != null ? Charset.forName(charsetName) : null;

  try (ReversedLinesFileReader reversedLinesFileReader=blockSize == null ? new ReversedLinesFileReader(filePath,charset) : new ReversedLinesFileReader(filePath,blockSize,charset)){

    final Stack<String> lineStack=new Stack<>();

    String line;

    try (BufferedReader bufferedReader=Files.newBufferedReader(filePath,Charsets.toCharset(charset))){

      while ((line=bufferedReader.readLine()) != null) {

        lineStack.push(line);

      }

    }

     while ((line=reversedLinesFileReader.readLine()) != null) {

      final String lineFromBufferedReader=lineStack.pop();

      assertEquals(lineFromBufferedReader,line);

    }

    assertEquals(0,lineStack.size(),"Stack should be empty");

    if (fileSystem != null) {

      fileSystem.close();

    }

  }

 }

