Location: DeferredFileOutputStream.java

Content: 

/** 

 * Constructs an instance of this class which will trigger an event at the specified threshold, and save data to a file beyond that point. The initial buffer size will default to {@value AbstractByteArrayOutputStream#DEFAULT_SIZE} bytes which is ByteArrayOutputStream's default buffer size.

 * @param threshold The number of bytes at which to trigger an event.

 * @param outputFile The file to which data is saved beyond the threshold.

 */

public DeferredFileOutputStream(final int threshold,final File outputFile){

  this(threshold,outputFile,null,null,null,AbstractByteArrayOutputStream.DEFAULT_SIZE);

}

Location: DeferredFileOutputStream.java

Content: 

/** 

 * Constructs an instance of this class which will trigger an event at the specified threshold, and save data either to a file beyond that point.

 * @param threshold The number of bytes at which to trigger an event.

 * @param outputFile The file to which data is saved beyond the threshold.

 * @param prefix Prefix to use for the temporary file.

 * @param suffix Suffix to use for the temporary file.

 * @param directory Temporary file directory.

 * @param initialBufferSize The initial size of the in memory buffer.

 */

private DeferredFileOutputStream(final int threshold,final File outputFile,final String prefix,final String suffix,final File directory,final int initialBufferSize){

  super(threshold);

  this.outputPath=toPath(outputFile,null);

  this.prefix=prefix;

  this.suffix=suffix;

  this.directory=toPath(directory,PathUtils::getTempDirectory);

  memoryOutputStream=new ByteArrayOutputStream(initialBufferSize);

  currentOutputStream=memoryOutputStream;

}

Location: DeferredFileOutputStream.java

Content: 

/** 

 * Constructs an instance of this class which will trigger an event at the specified threshold, and save data to a file beyond that point.

 * @param threshold The number of bytes at which to trigger an event.

 * @param initialBufferSize The initial size of the in memory buffer.

 * @param outputFile The file to which data is saved beyond the threshold.

 * @since 2.5

 */

public DeferredFileOutputStream(final int threshold,final int initialBufferSize,final File outputFile){

  this(threshold,outputFile,null,null,null,initialBufferSize);

  if (initialBufferSize < 0) {

    throw new IllegalArgumentException("Initial buffer size must be atleast 0.");

  }

}

Location: DeferredFileOutputStream.java

Content: 

/** 

 * Constructs an instance of this class which will trigger an event at the specified threshold, and save data to a temporary file beyond that point.

 * @param threshold The number of bytes at which to trigger an event.

 * @param initialBufferSize The initial size of the in memory buffer.

 * @param prefix Prefix to use for the temporary file.

 * @param suffix Suffix to use for the temporary file.

 * @param directory Temporary file directory.

 * @since 2.5

 */

public DeferredFileOutputStream(final int threshold,final int initialBufferSize,final String prefix,final String suffix,final File directory){

  this(threshold,null,prefix,suffix,directory,initialBufferSize);

  if (prefix == null) {

    throw new IllegalArgumentException("Temporary file prefix is missing");

  }

  if (initialBufferSize < 0) {

    throw new IllegalArgumentException("Initial buffer size must be atleast 0.");

  }

}

Location: DeferredFileOutputStream.java

Content: 

/** 

 * Constructs an instance of this class which will trigger an event at the specified threshold, and save data to a temporary file beyond that point. The initial buffer size will default to 32 bytes which is ByteArrayOutputStream's default buffer size.

 * @param threshold The number of bytes at which to trigger an event.

 * @param prefix Prefix to use for the temporary file.

 * @param suffix Suffix to use for the temporary file.

 * @param directory Temporary file directory.

 * @since 1.4

 */

public DeferredFileOutputStream(final int threshold,final String prefix,final String suffix,final File directory){

  this(threshold,null,prefix,suffix,directory,AbstractByteArrayOutputStream.DEFAULT_SIZE);

  if (prefix == null) {

    throw new IllegalArgumentException("Temporary file prefix is missing");

  }

}

Location: DeferredFileOutputStream.java

Content: 

/** 

 * Returns the data for this output stream as an array of bytes, assuming that the data has been retained in memory. If the data was written to disk, this method returns  {@code null}.

 * @return The data for this output stream, or {@code null} if no such data is available.

 */

public byte[] getData(){

  return memoryOutputStream != null ? memoryOutputStream.toByteArray() : null;

}

Location: DeferredFileOutputStream.java

Content: 

/** 

 * Returns either the output file specified in the constructor or the temporary file created or null. <p> If the constructor specifying the file is used then it returns that same output file, even when threshold has not been reached. <p> If constructor specifying a temporary file prefix/suffix is used then the temporary file created once the threshold is reached is returned If the threshold was not reached then  {@code null} is returned.

 * @return The file for this output stream, or {@code null} if no such file exists.

 */

public File getFile(){

  return outputPath != null ? outputPath.toFile() : null;

}

Location: DeferredFileOutputStream.java

Content: 

/** 

 * Determines whether or not the data for this output stream has been retained in memory.

 * @return {@code true} if the data is available in memory; {@code false} otherwise.

 */

public boolean isInMemory(){

  return !isThresholdExceeded();

}

Location: DeferredFileOutputStream.java

Content: 

/** 

 * Gets the current contents of this byte stream as an  {@link InputStream}. If the data for this output stream has been retained in memory, the returned stream is backed by buffers of  {@code this} stream,avoiding memory allocation and copy, thus saving space and time.<br> Otherwise, the returned stream will be one that is created from the data that has been committed to disk.

 * @return the current contents of this output stream.

 * @throws IOException if this stream is not yet closed or an error occurs.

 * @see org.apache.commons.io.output.ByteArrayOutputStream#toInputStream()

 * @since 2.9.0

 */

public InputStream toInputStream() throws IOException {

  if (!closed) {

    throw new IOException("Stream not closed");

  }

  if (isInMemory()) {

    return memoryOutputStream.toInputStream();

  }

  return Files.newInputStream(outputPath);

}

Location: DeferredFileOutputStream.java

Content: 

private Path toPath(final File file,final Supplier<Path> defaultPathSupplier){

  return file != null ? file.toPath() : defaultPathSupplier == null ? null : defaultPathSupplier.get();

}

Location: DeferredFileOutputStream.java

Content: 

/** 

 * Writes the data from this output stream to the specified output stream, after it has been closed.

 * @param outputStream output stream to write to.

 * @throws NullPointerException if the OutputStream is {@code null}.

 * @throws IOException if this stream is not yet closed or an error occurs.

 */

public void writeTo(final OutputStream outputStream) throws IOException {

  if (!closed) {

    throw new IOException("Stream not closed");

  }

  if (isInMemory()) {

    memoryOutputStream.writeTo(outputStream);

  }

 else {

    Files.copy(outputPath,outputStream);

  }

}

