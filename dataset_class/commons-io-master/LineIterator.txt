Location: LineIterator.java

Content: 

/** 

 * Closes a  {@code LineIterator} quietly.

 * @param iterator The iterator to close, or {@code null}.

 * @deprecated As of 2.6 deprecated without replacement. Please use the try-with-resources statement or handlesuppressed exceptions manually.

 * @see Throwable#addSuppressed(java.lang.Throwable)

 */

@Deprecated public static void closeQuietly(final LineIterator iterator){

  IOUtils.closeQuietly(iterator);

}

Location: LineIterator.java

Content: 

/** 

 * Indicates whether the  {@code Reader} has more lines.If there is an  {@code IOException} then {@link #close()} willbe called on this instance.

 * @return {@code true} if the Reader has more lines

 * @throws IllegalStateException if an IO exception occurs

 */

@Override public boolean hasNext(){

  if (cachedLine != null) {

    return true;

  }

  if (finished) {

    return false;

  }

  try {

    while (true) {

      final String line=bufferedReader.readLine();

      if (line == null) {

        finished=true;

        return false;

      }

      if (isValidLine(line)) {

        cachedLine=line;

        return true;

      }

    }

  }

 catch (  final IOException ioe) {

    IOUtils.closeQuietly(this,ioe::addSuppressed);

    throw new IllegalStateException(ioe);

  }

}

Location: LineIterator.java

Content: 

/** 

 * Overridable method to validate each line that is returned. This implementation always returns true.

 * @param line  the line that is to be validated

 * @return true if valid, false to remove from the iterator

 */

protected boolean isValidLine(final String line){

  return true;

}

Location: LineIterator.java

Content: 

/** 

 * Constructs an iterator of the lines for a  {@code Reader}.

 * @param reader the {@code Reader} to read from, not null

 * @throws IllegalArgumentException if the reader is null

 */

public LineIterator(final Reader reader) throws IllegalArgumentException {

  if (reader == null) {

    throw new IllegalArgumentException("Reader must not be null");

  }

  if (reader instanceof BufferedReader) {

    bufferedReader=(BufferedReader)reader;

  }

 else {

    bufferedReader=new BufferedReader(reader);

  }

}

Location: LineIterator.java

Content: 

/** 

 * Returns the next line in the wrapped  {@code Reader}.

 * @return the next line from the input

 * @throws NoSuchElementException if there is no line to return

 */

@Override public String next(){

  return nextLine();

}

Location: LineIterator.java

Content: 

/** 

 * Returns the next line in the wrapped  {@code Reader}.

 * @return the next line from the input

 * @throws NoSuchElementException if there is no line to return

 */

public String nextLine(){

  if (!hasNext()) {

    throw new NoSuchElementException("No more lines");

  }

  final String currentLine=cachedLine;

  cachedLine=null;

  return currentLine;

}

Location: LineIterator.java

Content: 

/** 

 * Unsupported.

 * @throws UnsupportedOperationException always

 */

@Override public void remove(){

  throw new UnsupportedOperationException("remove not supported");

}

