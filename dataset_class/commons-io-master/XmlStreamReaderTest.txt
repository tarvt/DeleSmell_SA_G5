Location: XmlStreamReaderTest.java

Content: 

/** 

 * @param bomType   no-bom, UTF-16BE-bom, UTF-16LE-bom, UTF-8-bom

 * @param xmlType   xml, xml-prolog, xml-prolog-charset

 * @param streamEnc encoding of the stream

 * @param prologEnc encoding of the prolog

 * @return XML stream

 * @throws IOException If an I/O error occurs

 */

protected InputStream getXmlInputStream(final String bomType,final String xmlType,final String streamEnc,final String prologEnc) throws IOException {

  final ByteArrayOutputStream baos=new ByteArrayOutputStream(1024);

  int[] bom=BOMs.get(bomType);

  if (bom == null) {

    bom=new int[0];

  }

  for (  final int element : bom) {

    baos.write(element);

  }

  try (final Writer writer=new OutputStreamWriter(baos,streamEnc)){

    final String xmlDoc=getXML(bomType,xmlType,streamEnc,prologEnc);

    writer.write(xmlDoc);

    writer.write("<da>\n");

    for (int i=0; i < 10000; i++) {

      writer.write("<do/>\n");

    }

    writer.write("</da>\n");

  }

   return new ByteArrayInputStream(baos.toByteArray());

}

Location: XmlStreamReaderTest.java

Content: 

/** 

 * Create the XML.

 */

private String getXML(final String bomType,final String xmlType,final String streamEnc,final String prologEnc){

  final MessageFormat xml=XMLs.get(xmlType);

  final String info=INFO.format(new Object[]{bomType,xmlType,prologEnc});

  return xml.format(new Object[]{streamEnc,prologEnc,info});

}

Location: XmlStreamReaderTest.java

Content: 

public void testAlternateDefaultEncoding(final String cT,final String bomEnc,final String streamEnc,final String prologEnc,final String alternateEnc) throws Exception {

  final InputStream is=getXmlInputStream(bomEnc,prologEnc == null ? XML1 : XML3,streamEnc,prologEnc);

  final XmlStreamReader xmlReader=new XmlStreamReader(is,cT,false,alternateEnc);

  if (!streamEnc.equals("UTF-16")) {

    final String enc=alternateEnc != null ? alternateEnc : streamEnc;

    assertEquals(xmlReader.getEncoding(),enc);

  }

 else {

    assertEquals(xmlReader.getEncoding().substring(0,streamEnc.length()),streamEnc);

  }

  xmlReader.close();

}

Location: XmlStreamReaderTest.java

Content: 

@Test public void testEncodingAttributeXML() throws Exception {

  final InputStream is=new ByteArrayInputStream(ENCODING_ATTRIBUTE_XML.getBytes(StandardCharsets.UTF_8));

  final XmlStreamReader xmlReader=new XmlStreamReader(is,"",true);

  assertEquals(xmlReader.getEncoding(),"UTF-8");

  xmlReader.close();

}

Location: XmlStreamReaderTest.java

Content: 

@Test public void testHttp() throws Exception {

  testHttpValid("application/xml","UTF-8-bom","UTF-8",null);

  testHttpValid("application/xml","UTF-8-bom","UTF-8","UTF-8");

  testHttpValid("application/xml;charset=UTF-8","UTF-8-bom","UTF-8",null);

  testHttpValid("application/xml;charset=\"UTF-8\"","UTF-8-bom","UTF-8",null);

  testHttpValid("application/xml;charset='UTF-8'","UTF-8-bom","UTF-8",null);

  testHttpValid("application/xml;charset=UTF-8","UTF-8-bom","UTF-8","UTF-8");

  testHttpValid("application/xml;charset=UTF-16","UTF-16BE-bom","UTF-16BE",null);

  testHttpValid("application/xml;charset=UTF-16","UTF-16BE-bom","UTF-16BE","UTF-16");

  testHttpValid("application/xml;charset=UTF-16","UTF-16BE-bom","UTF-16BE","UTF-16BE");

  testHttpInvalid("application/xml;charset=UTF-16BE","UTF-16BE-bom","UTF-16BE",null);

  testHttpInvalid("application/xml;charset=UTF-16BE","UTF-16BE-bom","UTF-16BE","UTF-16");

  testHttpInvalid("application/xml;charset=UTF-16BE","UTF-16BE-bom","UTF-16BE","UTF-16BE");

  testHttpInvalid("application/xml;charset=UTF-32BE","UTF-32BE-bom","UTF-32BE",null);

  testHttpInvalid("application/xml;charset=UTF-32BE","UTF-32BE-bom","UTF-32BE","UTF-32");

  testHttpInvalid("application/xml;charset=UTF-32BE","UTF-32BE-bom","UTF-32BE","UTF-32BE");

  testHttpInvalid("application/xml","UTF-8-bom","US-ASCII","US-ASCII");

  testHttpInvalid("application/xml;charset=UTF-16","UTF-16LE","UTF-8","UTF-8");

  testHttpInvalid("application/xml;charset=UTF-16","no-bom","UTF-16BE","UTF-16BE");

  testHttpInvalid("application/xml;charset=UTF-32","UTF-32LE","UTF-8","UTF-8");

  testHttpInvalid("application/xml;charset=UTF-32","no-bom","UTF-32BE","UTF-32BE");

  testHttpValid("text/xml","no-bom","US-ASCII",null);

  testHttpValid("text/xml;charset=UTF-8","UTF-8-bom","UTF-8","UTF-8");

  testHttpValid("text/xml;charset=UTF-8","UTF-8-bom","UTF-8",null);

  testHttpValid("text/xml;charset=UTF-16","UTF-16BE-bom","UTF-16BE",null);

  testHttpValid("text/xml;charset=UTF-16","UTF-16BE-bom","UTF-16BE","UTF-16");

  testHttpValid("text/xml;charset=UTF-16","UTF-16BE-bom","UTF-16BE","UTF-16BE");

  testHttpValid("text/xml;charset=UTF-32","UTF-32BE-bom","UTF-32BE",null);

  testHttpValid("text/xml;charset=UTF-32","UTF-32BE-bom","UTF-32BE","UTF-32");

  testHttpValid("text/xml;charset=UTF-32","UTF-32BE-bom","UTF-32BE","UTF-32BE");

  testHttpValid("text/xml","UTF-8-bom","US-ASCII",null);

  testAlternateDefaultEncoding("application/xml","UTF-8-bom","UTF-8",null,null);

  testAlternateDefaultEncoding("application/xml","no-bom","US-ASCII",null,"US-ASCII");

  testAlternateDefaultEncoding("application/xml","UTF-8-bom","UTF-8",null,"UTF-8");

  testAlternateDefaultEncoding("text/xml","no-bom","US-ASCII",null,null);

  testAlternateDefaultEncoding("text/xml","no-bom","US-ASCII",null,"US-ASCII");

  testAlternateDefaultEncoding("text/xml","no-bom","US-ASCII",null,"UTF-8");

  testHttpInvalid("text/xml;charset=UTF-16BE","UTF-16BE-bom","UTF-16BE",null);

  testHttpInvalid("text/xml;charset=UTF-16BE","UTF-16BE-bom","UTF-16BE","UTF-16");

  testHttpInvalid("text/xml;charset=UTF-16BE","UTF-16BE-bom","UTF-16BE","UTF-16BE");

  testHttpInvalid("text/xml;charset=UTF-16","no-bom","UTF-16BE","UTF-16BE");

  testHttpInvalid("text/xml;charset=UTF-16","no-bom","UTF-16BE",null);

  testHttpInvalid("text/xml;charset=UTF-32BE","UTF-32BE-bom","UTF-32BE",null);

  testHttpInvalid("text/xml;charset=UTF-32BE","UTF-32BE-bom","UTF-32BE","UTF-32");

  testHttpInvalid("text/xml;charset=UTF-32BE","UTF-32BE-bom","UTF-32BE","UTF-32BE");

  testHttpInvalid("text/xml;charset=UTF-32","no-bom","UTF-32BE","UTF-32BE");

  testHttpInvalid("text/xml;charset=UTF-32","no-bom","UTF-32BE",null);

  testHttpLenient("text/xml","no-bom","US-ASCII",null,"US-ASCII");

  testHttpLenient("text/xml;charset=UTF-8","UTF-8-bom","UTF-8","UTF-8","UTF-8");

  testHttpLenient("text/xml;charset=UTF-8","UTF-8-bom","UTF-8",null,"UTF-8");

  testHttpLenient("text/xml;charset=UTF-16","UTF-16BE-bom","UTF-16BE",null,"UTF-16BE");

  testHttpLenient("text/xml;charset=UTF-16","UTF-16BE-bom","UTF-16BE","UTF-16","UTF-16");

  testHttpLenient("text/xml;charset=UTF-16","UTF-16BE-bom","UTF-16BE","UTF-16BE","UTF-16BE");

  testHttpLenient("text/xml;charset=UTF-32","UTF-32BE-bom","UTF-32BE",null,"UTF-32BE");

  testHttpLenient("text/xml;charset=UTF-32","UTF-32BE-bom","UTF-32BE","UTF-32","UTF-32");

  testHttpLenient("text/xml;charset=UTF-32","UTF-32BE-bom","UTF-32BE","UTF-32BE","UTF-32BE");

  testHttpLenient("text/xml","UTF-8-bom","US-ASCII",null,"US-ASCII");

  testHttpLenient("text/xml;charset=UTF-16BE","UTF-16BE-bom","UTF-16BE",null,"UTF-16BE");

  testHttpLenient("text/xml;charset=UTF-16BE","UTF-16BE-bom","UTF-16BE","UTF-16","UTF-16");

  testHttpLenient("text/xml;charset=UTF-16BE","UTF-16BE-bom","UTF-16BE","UTF-16BE","UTF-16BE");

  testHttpLenient("text/xml;charset=UTF-16","no-bom","UTF-16BE","UTF-16BE","UTF-16BE");

  testHttpLenient("text/xml;charset=UTF-16","no-bom","UTF-16BE",null,"UTF-16");

  testHttpLenient("text/xml;charset=UTF-32BE","UTF-32BE-bom","UTF-32BE",null,"UTF-32BE");

  testHttpLenient("text/xml;charset=UTF-32BE","UTF-32BE-bom","UTF-32BE","UTF-32","UTF-32");

  testHttpLenient("text/xml;charset=UTF-32BE","UTF-32BE-bom","UTF-32BE","UTF-32BE","UTF-32BE");

  testHttpLenient("text/xml;charset=UTF-32","no-bom","UTF-32BE","UTF-32BE","UTF-32BE");

  testHttpLenient("text/xml;charset=UTF-32","no-bom","UTF-32BE",null,"UTF-32");

  testHttpLenient("text/html","no-bom","US-ASCII","US-ASCII","US-ASCII");

  testHttpLenient("text/html","no-bom","US-ASCII",null,"US-ASCII");

  testHttpLenient("text/html;charset=UTF-8","no-bom","US-ASCII","UTF-8","UTF-8");

  testHttpLenient("text/html;charset=UTF-16BE","no-bom","US-ASCII","UTF-8","UTF-8");

  testHttpLenient("text/html;charset=UTF-32BE","no-bom","US-ASCII","UTF-8","UTF-8");

}

Location: XmlStreamReaderTest.java

Content: 

@Test public void testHttpContent() throws Exception {

  final String encoding="UTF-8";

  final String xml=getXML("no-bom",XML3,encoding,encoding);

  try (final XmlStreamReader xmlReader=new XmlStreamReader(new StringInputStream(xml,encoding))){

    assertEquals(xmlReader.getEncoding(),encoding,"Check encoding");

    assertEquals(xml,IOUtils.toString(xmlReader),"Check content");

  }

 }

Location: XmlStreamReaderTest.java

Content: 

protected void testHttpInvalid(final String cT,final String bomEnc,final String streamEnc,final String prologEnc) throws Exception {

  final InputStream is=getXmlInputStream(bomEnc,prologEnc == null ? XML2 : XML3,streamEnc,prologEnc);

  try {

    (new XmlStreamReader(is,cT,false)).close();

    fail("It should have failed for HTTP Content-type " + cT + ", BOM "+ bomEnc+ ", streamEnc "+ streamEnc+ " and prologEnc "+ prologEnc);

  }

 catch (  final IOException ex) {

    assertTrue(ex.getMessage().contains("Invalid encoding,"));

  }

}

Location: XmlStreamReaderTest.java

Content: 

protected void testHttpLenient(final String cT,final String bomEnc,final String streamEnc,final String prologEnc,final String shouldbe) throws Exception {

  final InputStream is=getXmlInputStream(bomEnc,prologEnc == null ? XML2 : XML3,streamEnc,prologEnc);

  final XmlStreamReader xmlReader=new XmlStreamReader(is,cT,true);

  assertEquals(xmlReader.getEncoding(),shouldbe);

  xmlReader.close();

}

Location: XmlStreamReaderTest.java

Content: 

public void testHttpValid(final String cT,final String bomEnc,final String streamEnc,final String prologEnc) throws Exception {

  final InputStream is=getXmlInputStream(bomEnc,prologEnc == null ? XML1 : XML3,streamEnc,prologEnc);

  final XmlStreamReader xmlReader=new XmlStreamReader(is,cT,false);

  if (!streamEnc.equals("UTF-16")) {

    assertEquals(xmlReader.getEncoding(),streamEnc);

  }

 else {

    assertEquals(xmlReader.getEncoding().substring(0,streamEnc.length()),streamEnc);

  }

  xmlReader.close();

}

Location: XmlStreamReaderTest.java

Content: 

@Test protected void testNullFileInput(){

  assertThrows(NullPointerException.class,() -> new XmlStreamReader((File)null));

}

Location: XmlStreamReaderTest.java

Content: 

@Test protected void testNullInputStreamInput(){

  assertThrows(NullPointerException.class,() -> new XmlStreamReader((InputStream)null));

}

Location: XmlStreamReaderTest.java

Content: 

@Test protected void testNullPathInput(){

  assertThrows(NullPointerException.class,() -> new XmlStreamReader((Path)null));

}

Location: XmlStreamReaderTest.java

Content: 

@Test protected void testNullURLConnectionInput(){

  assertThrows(NullPointerException.class,() -> new XmlStreamReader((URLConnection)null,"US-ASCII"));

}

Location: XmlStreamReaderTest.java

Content: 

@Test protected void testNullURLInput(){

  assertThrows(NullPointerException.class,() -> new XmlStreamReader((URL)null));

}

Location: XmlStreamReaderTest.java

Content: 

protected void testRawBomInvalid(final String bomEnc,final String streamEnc,final String prologEnc) throws Exception {

  final InputStream is=getXmlInputStream(bomEnc,XML3,streamEnc,prologEnc);

  XmlStreamReader xmlReader=null;

  try {

    xmlReader=new XmlStreamReader(is,false);

    final String foundEnc=xmlReader.getEncoding();

    fail("Expected IOException for BOM " + bomEnc + ", streamEnc "+ streamEnc+ " and prologEnc "+ prologEnc+ ": found "+ foundEnc);

  }

 catch (  final IOException ex) {

    assertTrue(ex.getMessage().contains("Invalid encoding,"));

  }

  if (xmlReader != null) {

    xmlReader.close();

  }

}

Location: XmlStreamReaderTest.java

Content: 

@Test public void testRawBomUtf16() throws Exception {

  testRawBomValid("UTF-16BE");

  testRawBomValid("UTF-16LE");

  testRawBomValid("UTF-16");

  testRawBomInvalid("UTF-16BE-bom","UTF-16BE","UTF-16LE");

  testRawBomInvalid("UTF-16LE-bom","UTF-16LE","UTF-16BE");

  testRawBomInvalid("UTF-16LE-bom","UTF-16LE","UTF-8");

}

Location: XmlStreamReaderTest.java

Content: 

@Test public void testRawBomUtf32() throws Exception {

  testRawBomValid("UTF-32BE");

  testRawBomValid("UTF-32LE");

  testRawBomValid("UTF-32");

  testRawBomInvalid("UTF-32BE-bom","UTF-32BE","UTF-32LE");

  testRawBomInvalid("UTF-32LE-bom","UTF-32LE","UTF-32BE");

  testRawBomInvalid("UTF-32LE-bom","UTF-32LE","UTF-8");

}

Location: XmlStreamReaderTest.java

Content: 

@Test public void testRawBomUtf8() throws Exception {

  testRawBomValid("UTF-8");

  testRawBomInvalid("UTF-8-bom","US-ASCII","US-ASCII");

  testRawBomInvalid("UTF-8-bom","ISO-8859-1","ISO-8859-1");

  testRawBomInvalid("UTF-8-bom","UTF-8","UTF-16");

  testRawBomInvalid("UTF-8-bom","UTF-8","UTF-16BE");

  testRawBomInvalid("UTF-8-bom","UTF-8","UTF-16LE");

  testRawBomInvalid("UTF-16BE-bom","UTF-16BE","UTF-16LE");

  testRawBomInvalid("UTF-16LE-bom","UTF-16LE","UTF-16BE");

  testRawBomInvalid("UTF-16LE-bom","UTF-16LE","UTF-8");

  testRawBomInvalid("UTF-32BE-bom","UTF-32BE","UTF-32LE");

  testRawBomInvalid("UTF-32LE-bom","UTF-32LE","UTF-32BE");

  testRawBomInvalid("UTF-32LE-bom","UTF-32LE","UTF-8");

}

Location: XmlStreamReaderTest.java

Content: 

protected void testRawBomValid(final String encoding) throws Exception {

  final InputStream is=getXmlInputStream(encoding + "-bom",XML3,encoding,encoding);

  final XmlStreamReader xmlReader=new XmlStreamReader(is,false);

  if (!encoding.equals("UTF-16") && !encoding.equals("UTF-32")) {

    assertEquals(xmlReader.getEncoding(),encoding);

  }

 else {

    assertEquals(xmlReader.getEncoding().substring(0,encoding.length()),encoding);

  }

  xmlReader.close();

}

Location: XmlStreamReaderTest.java

Content: 

@Test public void testRawContent() throws Exception {

  final String encoding="UTF-8";

  final String xml=getXML("no-bom",XML3,encoding,encoding);

  try (final XmlStreamReader xmlReader=new XmlStreamReader(new StringInputStream(xml,encoding))){

    assertEquals(xmlReader.getEncoding(),encoding,"Check encoding");

    assertEquals(xml,IOUtils.toString(xmlReader),"Check content");

  }

 }

Location: XmlStreamReaderTest.java

Content: 

@Test public void testRawNoBomCp1047() throws Exception {

  testRawNoBomValid("CP1047");

}

Location: XmlStreamReaderTest.java

Content: 

protected void testRawNoBomInvalid(final String encoding) throws Exception {

  final InputStream is=getXmlInputStream("no-bom",XML3,encoding,encoding);

  try {

    new XmlStreamReader(is,false).close();

    fail("It should have failed");

  }

 catch (  final IOException ex) {

    assertTrue(ex.getMessage().contains("Invalid encoding,"));

  }

}

Location: XmlStreamReaderTest.java

Content: 

@Test public void testRawNoBomIso8859_1() throws Exception {

  testRawNoBomValid("ISO-8859-1");

}

Location: XmlStreamReaderTest.java

Content: 

@Test public void testRawNoBomUsAscii() throws Exception {

  testRawNoBomValid("US-ASCII");

}

Location: XmlStreamReaderTest.java

Content: 

@Test public void testRawNoBomUtf16BE() throws Exception {

  testRawNoBomValid("UTF-16BE");

}

Location: XmlStreamReaderTest.java

Content: 

@Test public void testRawNoBomUtf16LE() throws Exception {

  testRawNoBomValid("UTF-16LE");

}

Location: XmlStreamReaderTest.java

Content: 

@Test public void testRawNoBomUtf32BE() throws Exception {

  testRawNoBomValid("UTF-32BE");

}

Location: XmlStreamReaderTest.java

Content: 

@Test public void testRawNoBomUtf32LE() throws Exception {

  testRawNoBomValid("UTF-32LE");

}

Location: XmlStreamReaderTest.java

Content: 

@Test public void testRawNoBomUtf8() throws Exception {

  testRawNoBomValid("UTF-8");

}

Location: XmlStreamReaderTest.java

Content: 

protected void testRawNoBomValid(final String encoding) throws Exception {

  InputStream is=getXmlInputStream("no-bom",XML1,encoding,encoding);

  XmlStreamReader xmlReader=new XmlStreamReader(is,false);

  assertEquals(xmlReader.getEncoding(),"UTF-8");

  xmlReader.close();

  is=getXmlInputStream("no-bom",XML2,encoding,encoding);

  xmlReader=new XmlStreamReader(is);

  assertEquals(xmlReader.getEncoding(),"UTF-8");

  xmlReader.close();

  is=getXmlInputStream("no-bom",XML3,encoding,encoding);

  xmlReader=new XmlStreamReader(is);

  assertEquals(xmlReader.getEncoding(),encoding);

  xmlReader.close();

  is=getXmlInputStream("no-bom",XML4,encoding,encoding);

  xmlReader=new XmlStreamReader(is);

  assertEquals(xmlReader.getEncoding(),encoding);

  xmlReader.close();

  is=getXmlInputStream("no-bom",XML5,encoding,encoding);

  xmlReader=new XmlStreamReader(is);

  assertEquals(xmlReader.getEncoding(),encoding);

  xmlReader.close();

}

