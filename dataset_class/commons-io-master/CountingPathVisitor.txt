Location: CountingPathVisitor.java

Content: 

/** 

 * Constructs a new instance.

 * @param pathCounter How to count path visits.

 */

public CountingPathVisitor(final PathCounters pathCounter){

  this(pathCounter,new SymbolicLinkFileFilter(FileVisitResult.TERMINATE,FileVisitResult.CONTINUE),TrueFileFilter.INSTANCE);

}

Location: CountingPathVisitor.java

Content: 

/** 

 * Constructs a new instance.

 * @param pathCounter How to count path visits.

 * @param fileFilter Filters which files to count.

 * @param dirFilter Filters which directories to count.

 * @since 2.9.0

 */

public CountingPathVisitor(final PathCounters pathCounter,final PathFilter fileFilter,final PathFilter dirFilter){

  this.pathCounters=Objects.requireNonNull(pathCounter,"pathCounter");

  this.fileFilter=Objects.requireNonNull(fileFilter,"fileFilter");

  this.dirFilter=Objects.requireNonNull(dirFilter,"dirFilter");

}

Location: CountingPathVisitor.java

Content: 

/** 

 * Gets the visitation counts.

 * @return the visitation counts.

 */

public PathCounters getPathCounters(){

  return pathCounters;

}

Location: CountingPathVisitor.java

Content: 

/** 

 * Updates the counter for visiting the given directory.

 * @param dir the visited directory.

 * @param exc Encountered exception.

 * @since 2.9.0

 */

protected void updateDirCounter(final Path dir,final IOException exc){

  pathCounters.getDirectoryCounter().increment();

}

Location: CountingPathVisitor.java

Content: 

/** 

 * Updates the counters for visiting the given file.

 * @param file the visited file.

 * @param attributes the visited file attributes.

 */

protected void updateFileCounters(final Path file,final BasicFileAttributes attributes){

  pathCounters.getFileCounter().increment();

  pathCounters.getByteCounter().add(attributes.size());

}

Location: CountingPathVisitor.java

Content: 

/** 

 * Creates a new instance configured with a  {@link BigInteger} {@link PathCounters}.

 * @return a new instance configured with a {@link BigInteger} {@link PathCounters}.

 */

public static CountingPathVisitor withBigIntegerCounters(){

  return new CountingPathVisitor(Counters.bigIntegerPathCounters());

}

Location: CountingPathVisitor.java

Content: 

/** 

 * Creates a new instance configured with a  {@code long} {@link PathCounters}.

 * @return a new instance configured with a {@code long} {@link PathCounters}.

 */

public static CountingPathVisitor withLongCounters(){

  return new CountingPathVisitor(Counters.longPathCounters());

}

