Location: AccumulatorPathVisitor.java

Content: 

/** 

 * Constructs a new instance.

 * @since 2.9.0

 */

public AccumulatorPathVisitor(){

  super(Counters.noopPathCounters());

}

Location: AccumulatorPathVisitor.java

Content: 

/** 

 * Constructs a new instance that counts file system elements.

 * @param pathCounter How to count path visits.

 */

public AccumulatorPathVisitor(final PathCounters pathCounter){

  super(pathCounter);

}

Location: AccumulatorPathVisitor.java

Content: 

/** 

 * Constructs a new instance.

 * @param pathCounter How to count path visits.

 * @param fileFilter Filters which files to count.

 * @param dirFilter Filters which directories to count.

 * @since 2.9.0

 */

public AccumulatorPathVisitor(final PathCounters pathCounter,final PathFilter fileFilter,final PathFilter dirFilter){

  super(pathCounter,fileFilter,dirFilter);

}

Location: AccumulatorPathVisitor.java

Content: 

private void add(final List<Path> list,final Path dir){

  list.add(dir.normalize());

}

Location: AccumulatorPathVisitor.java

Content: 

/** 

 * Gets the list of visited directories.

 * @return the list of visited directories.

 */

public List<Path> getDirList(){

  return dirList;

}

Location: AccumulatorPathVisitor.java

Content: 

/** 

 * Gets the list of visited files.

 * @return the list of visited files.

 */

public List<Path> getFileList(){

  return fileList;

}

Location: AccumulatorPathVisitor.java

Content: 

/** 

 * Relativizes each directory path with  {@link Path#relativize(Path)} against the given {@code parent}, optionally sorting the result.

 * @param parent A parent path

 * @param sort Whether to sort

 * @param comparator How to sort, null uses default sorting.

 * @return A new list

 */

public List<Path> relativizeDirectories(final Path parent,final boolean sort,final Comparator<? super Path> comparator){

  return PathUtils.relativize(getDirList(),parent,sort,comparator);

}

Location: AccumulatorPathVisitor.java

Content: 

/** 

 * Relativizes each file path with  {@link Path#relativize(Path)} against the given {@code parent}, optionally sorting the result.

 * @param parent A parent path

 * @param sort Whether to sort

 * @param comparator How to sort, null uses default sorting.

 * @return A new list

 */

public List<Path> relativizeFiles(final Path parent,final boolean sort,final Comparator<? super Path> comparator){

  return PathUtils.relativize(getFileList(),parent,sort,comparator);

}

Location: AccumulatorPathVisitor.java

Content: 

/** 

 * Creates a new instance configured with a BigInteger  {@link PathCounters}.

 * @param fileFilter Filters files to accumulate and count.

 * @param dirFilter Filters directories to accumulate and count.

 * @return a new instance configured with a long {@link PathCounters}.

 * @since 2.9.0

 */

public static AccumulatorPathVisitor withBigIntegerCounters(final PathFilter fileFilter,final PathFilter dirFilter){

  return new AccumulatorPathVisitor(Counters.bigIntegerPathCounters(),fileFilter,dirFilter);

}

Location: AccumulatorPathVisitor.java

Content: 

/** 

 * Creates a new instance configured with a long  {@link PathCounters}.

 * @param fileFilter Filters files to accumulate and count.

 * @param dirFilter Filters directories to accumulate and count.

 * @return a new instance configured with a long {@link PathCounters}.

 * @since 2.9.0

 */

public static AccumulatorPathVisitor withLongCounters(final PathFilter fileFilter,final PathFilter dirFilter){

  return new AccumulatorPathVisitor(Counters.longPathCounters(),fileFilter,dirFilter);

}

