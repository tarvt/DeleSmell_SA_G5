Location: TeeWriterTest.java

Content: 

@Test public void testArrayIOExceptionOnAppendChar1() throws IOException {

  final Writer badW=BrokenWriter.INSTANCE;

  final StringWriter goodW=mock(StringWriter.class);

  final ProxyCollectionWriter tw=new ProxyCollectionWriter(badW,goodW,null);

  final char data='A';

  try {

    tw.append(data);

    fail("Expected " + IOException.class.getName());

  }

 catch (  final IOExceptionList e) {

    verify(goodW).append(data);

    assertEquals(1,e.getCauseList().size());

    assertEquals(0,e.getCause(0,IOIndexedException.class).getIndex());

  }

}

Location: TeeWriterTest.java

Content: 

@Test public void testArrayIOExceptionOnAppendChar2() throws IOException {

  final Writer badW=BrokenWriter.INSTANCE;

  final StringWriter goodW=mock(StringWriter.class);

  final ProxyCollectionWriter tw=new ProxyCollectionWriter(goodW,badW,null);

  final char data='A';

  try {

    tw.append(data);

    fail("Expected " + IOException.class.getName());

  }

 catch (  final IOExceptionList e) {

    verify(goodW).append(data);

    assertEquals(1,e.getCauseList().size());

    assertEquals(1,e.getCause(0,IOIndexedException.class).getIndex());

  }

}

Location: TeeWriterTest.java

Content: 

@Test public void testArrayIOExceptionOnAppendCharSequence1() throws IOException {

  final Writer badW=BrokenWriter.INSTANCE;

  final StringWriter goodW=mock(StringWriter.class);

  final TeeWriter tw=new TeeWriter(badW,goodW,null);

  final String data="A";

  try {

    tw.append(data);

    fail("Expected " + IOException.class.getName());

  }

 catch (  final IOExceptionList e) {

    verify(goodW).append(data);

    assertEquals(1,e.getCauseList().size());

    assertEquals(0,e.getCause(0,IOIndexedException.class).getIndex());

  }

}

Location: TeeWriterTest.java

Content: 

@Test public void testArrayIOExceptionOnAppendCharSequence2() throws IOException {

  final Writer badW=BrokenWriter.INSTANCE;

  final StringWriter goodW=mock(StringWriter.class);

  final TeeWriter tw=new TeeWriter(goodW,badW,null);

  final String data="A";

  try {

    tw.append(data);

    fail("Expected " + IOException.class.getName());

  }

 catch (  final IOExceptionList e) {

    verify(goodW).append(data);

    assertEquals(1,e.getCauseList().size());

    assertEquals(1,e.getCause(0,IOIndexedException.class).getIndex());

  }

}

Location: TeeWriterTest.java

Content: 

@Test public void testArrayIOExceptionOnAppendCharSequenceIntInt1() throws IOException {

  final Writer badW=BrokenWriter.INSTANCE;

  final StringWriter goodW=mock(StringWriter.class);

  final TeeWriter tw=new TeeWriter(badW,goodW,null);

  final String data="A";

  try {

    tw.append(data,0,0);

    fail("Expected " + IOException.class.getName());

  }

 catch (  final IOExceptionList e) {

    verify(goodW).append(data,0,0);

    assertEquals(1,e.getCauseList().size());

    assertEquals(0,e.getCause(0,IOIndexedException.class).getIndex());

  }

}

Location: TeeWriterTest.java

Content: 

@Test public void testArrayIOExceptionOnAppendCharSequenceIntInt2() throws IOException {

  final Writer badW=BrokenWriter.INSTANCE;

  final StringWriter goodW=mock(StringWriter.class);

  final TeeWriter tw=new TeeWriter(goodW,badW,null);

  final String data="A";

  try {

    tw.append(data,0,0);

    fail("Expected " + IOException.class.getName());

  }

 catch (  final IOExceptionList e) {

    verify(goodW).append(data,0,0);

    assertEquals(1,e.getCauseList().size());

    assertEquals(1,e.getCause(0,IOIndexedException.class).getIndex());

  }

}

Location: TeeWriterTest.java

Content: 

@Test public void testArrayIOExceptionOnClose1() throws IOException {

  final Writer badW=BrokenWriter.INSTANCE;

  final StringWriter goodW=mock(StringWriter.class);

  final TeeWriter tw=new TeeWriter(badW,goodW,null);

  try {

    tw.close();

    fail("Expected " + IOException.class.getName());

  }

 catch (  final IOExceptionList e) {

    verify(goodW).close();

    assertEquals(1,e.getCauseList().size());

    assertEquals(0,e.getCause(0,IOIndexedException.class).getIndex());

  }

}

Location: TeeWriterTest.java

Content: 

@Test public void testArrayIOExceptionOnClose2() throws IOException {

  final Writer badW=BrokenWriter.INSTANCE;

  final StringWriter goodW=mock(StringWriter.class);

  final TeeWriter tw=new TeeWriter(goodW,badW,null);

  try {

    tw.close();

    fail("Expected " + IOException.class.getName());

  }

 catch (  final IOExceptionList e) {

    verify(goodW).close();

    assertEquals(1,e.getCauseList().size());

    assertEquals(1,e.getCause(0,IOIndexedException.class).getIndex());

  }

}

Location: TeeWriterTest.java

Content: 

@Test public void testArrayIOExceptionOnFlush1() throws IOException {

  final Writer badW=BrokenWriter.INSTANCE;

  final StringWriter goodW=mock(StringWriter.class);

  final TeeWriter tw=new TeeWriter(badW,goodW,null);

  try {

    tw.flush();

    fail("Expected " + IOException.class.getName());

  }

 catch (  final IOExceptionList e) {

    verify(goodW).flush();

    assertEquals(1,e.getCauseList().size());

    assertEquals(0,e.getCause(0,IOIndexedException.class).getIndex());

  }

}

Location: TeeWriterTest.java

Content: 

@Test public void testArrayIOExceptionOnFlush2() throws IOException {

  final Writer badW=BrokenWriter.INSTANCE;

  final StringWriter goodW=mock(StringWriter.class);

  final TeeWriter tw=new TeeWriter(goodW,badW,null);

  try {

    tw.flush();

    fail("Expected " + IOException.class.getName());

  }

 catch (  final IOExceptionList e) {

    verify(goodW).flush();

    assertEquals(1,e.getCauseList().size());

    assertEquals(1,e.getCause(0,IOIndexedException.class).getIndex());

  }

}

Location: TeeWriterTest.java

Content: 

@Test public void testArrayIOExceptionOnWriteCharArray1() throws IOException {

  final Writer badW=BrokenWriter.INSTANCE;

  final StringWriter goodW=mock(StringWriter.class);

  final TeeWriter tw=new TeeWriter(badW,goodW,null);

  final char[] data={'a'};

  try {

    tw.write(data);

    fail("Expected " + IOException.class.getName());

  }

 catch (  final IOExceptionList e) {

    verify(goodW).write(data);

    assertEquals(1,e.getCauseList().size());

    assertEquals(0,e.getCause(0,IOIndexedException.class).getIndex());

  }

}

Location: TeeWriterTest.java

Content: 

@Test public void testArrayIOExceptionOnWriteCharArray2() throws IOException {

  final Writer badW=BrokenWriter.INSTANCE;

  final StringWriter goodW=mock(StringWriter.class);

  final TeeWriter tw=new TeeWriter(goodW,badW,null);

  final char[] data={'a'};

  try {

    tw.write(data);

    fail("Expected " + IOException.class.getName());

  }

 catch (  final IOExceptionList e) {

    verify(goodW).write(data);

    assertEquals(1,e.getCauseList().size());

    assertEquals(1,e.getCause(0,IOIndexedException.class).getIndex());

  }

}

Location: TeeWriterTest.java

Content: 

@Test public void testArrayIOExceptionOnWriteCharArrayIntInt1() throws IOException {

  final Writer badW=BrokenWriter.INSTANCE;

  final StringWriter goodW=mock(StringWriter.class);

  final TeeWriter tw=new TeeWriter(badW,goodW,null);

  final char[] data={'a'};

  try {

    tw.write(data,0,0);

    fail("Expected " + IOException.class.getName());

  }

 catch (  final IOExceptionList e) {

    verify(goodW).write(data,0,0);

    assertEquals(1,e.getCauseList().size());

    assertEquals(0,e.getCause(0,IOIndexedException.class).getIndex());

  }

}

Location: TeeWriterTest.java

Content: 

@Test public void testArrayIOExceptionOnWriteCharArrayIntInt2() throws IOException {

  final Writer badW=BrokenWriter.INSTANCE;

  final StringWriter goodW=mock(StringWriter.class);

  final TeeWriter tw=new TeeWriter(goodW,badW,null);

  final char[] data={'a'};

  try {

    tw.write(data,0,0);

    fail("Expected " + IOException.class.getName());

  }

 catch (  final IOExceptionList e) {

    verify(goodW).write(data,0,0);

    assertEquals(1,e.getCauseList().size());

    assertEquals(1,e.getCause(0,IOIndexedException.class).getIndex());

  }

}

Location: TeeWriterTest.java

Content: 

@Test public void testArrayIOExceptionOnWriteInt1() throws IOException {

  final Writer badW=BrokenWriter.INSTANCE;

  final StringWriter goodW=mock(StringWriter.class);

  final TeeWriter tw=new TeeWriter(badW,goodW,null);

  final int data=32;

  try {

    tw.write(data);

    fail("Expected " + IOException.class.getName());

  }

 catch (  final IOExceptionList e) {

    verify(goodW).write(data);

    assertEquals(1,e.getCauseList().size());

    assertEquals(0,e.getCause(0,IOIndexedException.class).getIndex());

  }

}

Location: TeeWriterTest.java

Content: 

@Test public void testArrayIOExceptionOnWriteInt2() throws IOException {

  final Writer badW=BrokenWriter.INSTANCE;

  final StringWriter goodW=mock(StringWriter.class);

  final TeeWriter tw=new TeeWriter(goodW,badW,null);

  try {

    tw.write(32);

    fail("Expected " + IOException.class.getName());

  }

 catch (  final IOExceptionList e) {

    verify(goodW).write(32);

    assertEquals(1,e.getCauseList().size());

    assertEquals(1,e.getCause(0,IOIndexedException.class).getIndex());

  }

}

Location: TeeWriterTest.java

Content: 

@Test public void testArrayIOExceptionOnWriteString1() throws IOException {

  final Writer badW=BrokenWriter.INSTANCE;

  final StringWriter goodW=mock(StringWriter.class);

  final TeeWriter tw=new TeeWriter(badW,goodW,null);

  final String data="A";

  try {

    tw.write(data);

    fail("Expected " + IOException.class.getName());

  }

 catch (  final IOExceptionList e) {

    verify(goodW).write(data);

    assertEquals(1,e.getCauseList().size());

    assertEquals(0,e.getCause(0,IOIndexedException.class).getIndex());

  }

}

Location: TeeWriterTest.java

Content: 

@Test public void testArrayIOExceptionOnWriteString2() throws IOException {

  final Writer badW=BrokenWriter.INSTANCE;

  final StringWriter goodW=mock(StringWriter.class);

  final TeeWriter tw=new TeeWriter(goodW,badW,null);

  final String data="A";

  try {

    tw.write(data);

    fail("Expected " + IOException.class.getName());

  }

 catch (  final IOExceptionList e) {

    verify(goodW).write(data);

    assertEquals(1,e.getCauseList().size());

    assertEquals(1,e.getCause(0,IOIndexedException.class).getIndex());

  }

}

Location: TeeWriterTest.java

Content: 

@Test public void testArrayIOExceptionOnWriteStringIntInt1() throws IOException {

  final Writer badW=BrokenWriter.INSTANCE;

  final StringWriter goodW=mock(StringWriter.class);

  final TeeWriter tw=new TeeWriter(badW,goodW,null);

  final String data="A";

  try {

    tw.write(data,0,0);

    fail("Expected " + IOException.class.getName());

  }

 catch (  final IOExceptionList e) {

    verify(goodW).write(data,0,0);

    assertEquals(1,e.getCauseList().size());

    assertEquals(0,e.getCause(0,IOIndexedException.class).getIndex());

  }

}

Location: TeeWriterTest.java

Content: 

@Test public void testArrayIOExceptionOnWriteStringIntInt2() throws IOException {

  final Writer badW=BrokenWriter.INSTANCE;

  final StringWriter goodW=mock(StringWriter.class);

  final TeeWriter tw=new TeeWriter(goodW,badW,null);

  final String data="A";

  try {

    tw.write(data,0,0);

    fail("Expected " + IOException.class.getName());

  }

 catch (  final IOExceptionList e) {

    verify(goodW).write(data,0,0);

    assertEquals(1,e.getCauseList().size());

    assertEquals(1,e.getCause(0,IOIndexedException.class).getIndex());

  }

}

Location: TeeWriterTest.java

Content: 

@Test public void testCollectionCloseBranchIOException() throws IOException {

  final Writer badW=BrokenWriter.INSTANCE;

  final StringWriter goodW=mock(StringWriter.class);

  final TeeWriter tw=new TeeWriter(Arrays.asList(goodW,badW,null));

  try {

    tw.close();

    fail("Expected " + IOException.class.getName());

  }

 catch (  final IOExceptionList e) {

    verify(goodW).close();

    assertEquals(1,e.getCauseList().size());

    assertEquals(1,e.getCause(0,IOIndexedException.class).getIndex());

  }

}

Location: TeeWriterTest.java

Content: 

@Test public void testConstructorsNull() throws IOException {

  try (final TeeWriter teeWriter=new TeeWriter((Writer[])null)){

    teeWriter.append('a');

    teeWriter.flush();

  }

   try (final TeeWriter teeWriter=new TeeWriter((Collection<Writer>)null)){

    teeWriter.append('a');

    teeWriter.flush();

  }

   assertTrue(true,"Dummy to show test completed OK");

}

Location: TeeWriterTest.java

Content: 

@Test public void testTee() throws IOException {

  final StringBuilderWriter sbw1=new StringBuilderWriter();

  final StringBuilderWriter sbw2=new StringBuilderWriter();

  final StringBuilderWriter expected=new StringBuilderWriter();

  try (final TeeWriter tw=new TeeWriter(sbw1,sbw2,null)){

    for (int i=0; i < 20; i++) {

      tw.write(i);

      expected.write(i);

    }

    assertEquals(expected.toString(),sbw1.toString(),"TeeWriter.write(int)");

    assertEquals(expected.toString(),sbw2.toString(),"TeeWriter.write(int)");

    final char[] array=new char[10];

    for (int i=20; i < 30; i++) {

      array[i - 20]=(char)i;

    }

    tw.write(array);

    expected.write(array);

    assertEquals(expected.toString(),sbw1.toString(),"TeeWriter.write(char[])");

    assertEquals(expected.toString(),sbw2.toString(),"TeeWriter.write(char[])");

    for (int i=25; i < 35; i++) {

      array[i - 25]=(char)i;

    }

    tw.write(array,5,5);

    expected.write(array,5,5);

    assertEquals(expected.toString(),sbw1.toString(),"TeeOutputStream.write(byte[], int, int)");

    assertEquals(expected.toString(),sbw2.toString(),"TeeOutputStream.write(byte[], int, int)");

    for (int i=0; i < 20; i++) {

      tw.append((char)i);

      expected.append((char)i);

    }

    assertEquals(expected.toString(),sbw1.toString(),"TeeWriter.append(char)");

    assertEquals(expected.toString(),sbw2.toString(),"TeeWriter.append(char)");

    for (int i=20; i < 30; i++) {

      array[i - 20]=(char)i;

    }

    tw.append(new String(array));

    expected.append(new String(array));

    assertEquals(expected.toString(),sbw1.toString(),"TeeWriter.append(CharSequence)");

    assertEquals(expected.toString(),sbw2.toString(),"TeeWriter.append(CharSequence)");

    for (int i=25; i < 35; i++) {

      array[i - 25]=(char)i;

    }

    tw.append(new String(array),5,5);

    expected.append(new String(array),5,5);

    assertEquals(expected.toString(),sbw1.toString(),"TeeWriter.append(CharSequence, int, int)");

    assertEquals(expected.toString(),sbw2.toString(),"TeeWriter.append(CharSequence, int, int)");

    expected.flush();

    expected.close();

    tw.flush();

  }

 }

