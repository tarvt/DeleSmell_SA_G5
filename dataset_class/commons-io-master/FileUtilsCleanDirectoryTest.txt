Location: FileUtilsCleanDirectoryTest.java

Content: 

/** 

 * Only runs on Linux. 

 */

private boolean chmod(final File file,final int mode,final boolean recurse) throws InterruptedException {

  final List<String> args=new ArrayList<>();

  args.add("chmod");

  if (recurse) {

    args.add("-R");

  }

  args.add(Integer.toString(mode));

  args.add(file.getAbsolutePath());

  final Process proc;

  try {

    proc=Runtime.getRuntime().exec(args.toArray(new String[args.size()]));

  }

 catch (  final IOException e) {

    return false;

  }

  return proc.waitFor() == 0;

}

Location: FileUtilsCleanDirectoryTest.java

Content: 

@Test public void testDeletesNested() throws Exception {

  final File nested=new File(top,"nested");

  assertTrue(nested.mkdirs());

  FileUtils.touch(new File(nested,"file"));

  assertEquals(1,top.list().length);

  FileUtils.cleanDirectory(top);

  assertEquals(0,top.list().length);

}

Location: FileUtilsCleanDirectoryTest.java

Content: 

@Test public void testDeletesRegular() throws Exception {

  FileUtils.touch(new File(top,"regular"));

  FileUtils.touch(new File(top,".hidden"));

  assertEquals(2,top.list().length);

  FileUtils.cleanDirectory(top);

  assertEquals(0,top.list().length);

}

Location: FileUtilsCleanDirectoryTest.java

Content: 

@DisabledOnOs(OS.WINDOWS) @Test public void testThrowsOnCannotDeleteFile() throws Exception {

  final File file=new File(top,"restricted");

  FileUtils.touch(file);

  assumeTrue(chmod(top,500,false));

  try {

    FileUtils.cleanDirectory(top);

    fail("expected IOException");

  }

 catch (  final IOException e) {

    final IOExceptionList list=(IOExceptionList)e;

    assertEquals("Cannot delete file: " + file.getAbsolutePath(),list.getCause(0).getMessage());

  }

 finally {

    chmod(top,755,false);

  }

}

Location: FileUtilsCleanDirectoryTest.java

Content: 

@DisabledOnOs(OS.WINDOWS) @Test public void testThrowsOnNullList() throws Exception {

  assumeTrue(chmod(top,0,false));

  try {

    FileUtils.cleanDirectory(top);

    fail("expected IOException");

  }

 catch (  final IOException e) {

    assertEquals("Unknown I/O error listing contents of directory: " + top.getAbsolutePath(),e.getMessage());

  }

 finally {

    chmod(top,755,false);

  }

}

