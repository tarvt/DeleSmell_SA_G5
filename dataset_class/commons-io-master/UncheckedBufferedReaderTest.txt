Location: UncheckedBufferedReaderTest.java

Content: 

@SuppressWarnings("resource") @BeforeEach public void beforeEach(){

  ucStringReader=UncheckedBufferedReader.on(new StringReader("01"));

  exception=new IOException("test exception");

  ucBrokenReader=UncheckedBufferedReader.on(new BrokenReader(exception));

}

Location: UncheckedBufferedReaderTest.java

Content: 

@Test public void testBufferSize(){

  try (UncheckedBufferedReader uncheckedReader=new UncheckedBufferedReader(new StringReader("0123456789"),2)){

    assertEquals('0',uncheckedReader.read());

  }

 }

Location: UncheckedBufferedReaderTest.java

Content: 

@Test public void testMarkReset(){

  ucStringReader.mark(10);

  final int c=ucStringReader.read();

  ucStringReader.reset();

  assertEquals(c,ucStringReader.read());

}

Location: UncheckedBufferedReaderTest.java

Content: 

@Test public void testMarkThrows(){

  try (UncheckedBufferedReader closedReader=UncheckedBufferedReader.on(ClosedReader.INSTANCE)){

    closedReader.close();

    assertThrows(UncheckedIOException.class,() -> closedReader.mark(1));

  }

 }

Location: UncheckedBufferedReaderTest.java

Content: 

@Test public void testRead(){

  try (final UncheckedBufferedReader uncheckedReader=UncheckedBufferedReader.on(ucStringReader)){

    assertEquals('0',uncheckedReader.read());

    assertEquals('1',uncheckedReader.read());

    assertEquals(IOUtils.EOF,uncheckedReader.read());

    assertEquals(IOUtils.EOF,uncheckedReader.read());

  }

 }

Location: UncheckedBufferedReaderTest.java

Content: 

@Test public void testReadCharArray(){

  try (final UncheckedBufferedReader uncheckedReader=UncheckedBufferedReader.on(ucStringReader)){

    final char[] array=new char[1];

    assertEquals(1,uncheckedReader.read(array));

    assertEquals('0',array[0]);

    array[0]=0;

    assertEquals(1,uncheckedReader.read(array));

    assertEquals('1',array[0]);

    array[0]=0;

    assertEquals(IOUtils.EOF,uncheckedReader.read(array));

    assertEquals(0,array[0]);

    assertEquals(IOUtils.EOF,uncheckedReader.read(array));

    assertEquals(0,array[0]);

  }

 }

Location: UncheckedBufferedReaderTest.java

Content: 

@Test public void testReadCharArrayIndexed(){

  try (final UncheckedBufferedReader uncheckedReader=UncheckedBufferedReader.on(ucStringReader)){

    final char[] array=new char[1];

    assertEquals(1,uncheckedReader.read(array,0,1));

    assertEquals('0',array[0]);

    array[0]=0;

    assertEquals(1,uncheckedReader.read(array,0,1));

    assertEquals('1',array[0]);

    array[0]=0;

    assertEquals(IOUtils.EOF,uncheckedReader.read(array,0,1));

    assertEquals(0,array[0]);

    assertEquals(IOUtils.EOF,uncheckedReader.read(array,0,1));

    assertEquals(0,array[0]);

  }

 }

Location: UncheckedBufferedReaderTest.java

Content: 

@Test public void testReadCharArrayIndexedThrows(){

  assertEquals(exception,assertThrows(UncheckedIOException.class,() -> ucBrokenReader.read(new char[1],0,1)).getCause());

}

Location: UncheckedBufferedReaderTest.java

Content: 

@Test public void testReadCharArrayThrows(){

  assertEquals(exception,assertThrows(UncheckedIOException.class,() -> ucBrokenReader.read(new char[1])).getCause());

}

Location: UncheckedBufferedReaderTest.java

Content: 

@Test public void testReadCharBuffer(){

  try (final UncheckedBufferedReader uncheckedReader=UncheckedBufferedReader.on(ucStringReader)){

    final CharBuffer buffer=CharBuffer.wrap(new char[1]);

    assertEquals(1,uncheckedReader.read(buffer));

    buffer.flip();

    assertEquals('0',buffer.charAt(0));

    buffer.put(0,(char)0);

    assertEquals(1,uncheckedReader.read(buffer));

    buffer.flip();

    assertEquals('1',buffer.charAt(0));

    buffer.put(0,(char)0);

    assertEquals(IOUtils.EOF,uncheckedReader.read(buffer));

    buffer.flip();

    assertEquals(0,buffer.length());

    assertEquals(0,uncheckedReader.read(buffer));

    buffer.flip();

    assertEquals(0,buffer.length());

  }

 }

Location: UncheckedBufferedReaderTest.java

Content: 

@Test public void testReadCharBufferThrows(){

  assertEquals(exception,assertThrows(UncheckedIOException.class,() -> ucBrokenReader.read(CharBuffer.wrap(new char[1]))).getCause());

}

Location: UncheckedBufferedReaderTest.java

Content: 

@Test public void testReadLine(){

  try (final UncheckedBufferedReader uncheckedReader=UncheckedBufferedReader.on(ucStringReader)){

    assertEquals("01",uncheckedReader.readLine());

    assertEquals(IOUtils.EOF,uncheckedReader.read());

    assertEquals(IOUtils.EOF,uncheckedReader.read());

  }

 }

Location: UncheckedBufferedReaderTest.java

Content: 

@Test public void testReadLineThrows(){

  assertEquals(exception,assertThrows(UncheckedIOException.class,() -> ucBrokenReader.readLine()).getCause());

}

Location: UncheckedBufferedReaderTest.java

Content: 

@Test public void testReadThrows(){

  assertEquals(exception,assertThrows(UncheckedIOException.class,() -> ucBrokenReader.read()).getCause());

}

Location: UncheckedBufferedReaderTest.java

Content: 

@Test public void testReady(){

  assertTrue(ucStringReader.ready());

}

Location: UncheckedBufferedReaderTest.java

Content: 

@Test public void testReadyThrows(){

  assertEquals(exception,assertThrows(UncheckedIOException.class,() -> ucBrokenReader.ready()).getCause());

}

Location: UncheckedBufferedReaderTest.java

Content: 

@Test public void testResetThrows(){

  try (UncheckedBufferedReader closedReader=UncheckedBufferedReader.on(ClosedReader.INSTANCE)){

    closedReader.close();

    assertThrows(UncheckedIOException.class,() -> ucBrokenReader.reset());

  }

 }

Location: UncheckedBufferedReaderTest.java

Content: 

@Test public void testSkip(){

  assertEquals(1,ucStringReader.skip(1));

}

Location: UncheckedBufferedReaderTest.java

Content: 

@Test public void testSkipThrows(){

  assertEquals(exception,assertThrows(UncheckedIOException.class,() -> ucBrokenReader.skip(1)).getCause());

}

