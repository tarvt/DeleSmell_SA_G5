Location: WildcardFileFilter.java

Content: 

/** 

 * Checks to see if the file name matches one of the wildcards.

 * @param file  the file to check

 * @return true if the file name matches one of the wildcards

 */

@Override public boolean accept(final File file){

  return accept(file.getName());

}

Location: WildcardFileFilter.java

Content: 

/** 

 * Checks to see if the file name matches one of the wildcards.

 * @param dir  the file directory (ignored)

 * @param name  the file name

 * @return true if the file name matches one of the wildcards

 */

@Override public boolean accept(final File dir,final String name){

  return accept(name);

}

Location: WildcardFileFilter.java

Content: 

/** 

 * Checks to see if the file name matches one of the wildcards.

 * @param file  the file to check

 * @return true if the file name matches one of the wildcards.

 * @since 2.9.0

 */

@Override public FileVisitResult accept(final Path file,final BasicFileAttributes attributes){

  return toFileVisitResult(accept(Objects.toString(file.getFileName(),null)));

}

Location: WildcardFileFilter.java

Content: 

/** 

 * Constructs a new case-sensitive wildcard filter for a list of wildcards.

 * @param wildcards  the list of wildcards to match, not null

 * @throws IllegalArgumentException if the pattern list is null

 * @throws ClassCastException if the list does not contain Strings

 */

public WildcardFileFilter(final List<String> wildcards){

  this(wildcards,IOCase.SENSITIVE);

}

Location: WildcardFileFilter.java

Content: 

/** 

 * Constructs a new wildcard filter for a list of wildcards specifying case-sensitivity.

 * @param wildcards  the list of wildcards to match, not null

 * @param ioCase  how to handle case sensitivity, null means case-sensitive

 * @throws IllegalArgumentException if the pattern list is null

 * @throws ClassCastException if the list does not contain Strings

 */

public WildcardFileFilter(final List<String> wildcards,final IOCase ioCase){

  requireNonNull(wildcards,"wildcards");

  this.wildcards=wildcards.toArray(EMPTY_STRING_ARRAY);

  this.ioCase=IOCase.value(ioCase,IOCase.SENSITIVE);

}

Location: WildcardFileFilter.java

Content: 

/** 

 * Constructs a new case-sensitive wildcard filter for an array of wildcards.

 * @param wildcards  the array of wildcards to match

 * @throws IllegalArgumentException if the pattern array is null

 */

public WildcardFileFilter(final String... wildcards){

  this(wildcards,IOCase.SENSITIVE);

}

Location: WildcardFileFilter.java

Content: 

/** 

 * Constructs a new wildcard filter for an array of wildcards specifying case-sensitivity.

 * @param wildcards  the array of wildcards to match, not null

 * @param ioCase  how to handle case sensitivity, null means case-sensitive

 * @throws IllegalArgumentException if the pattern array is null

 */

public WildcardFileFilter(final String[] wildcards,final IOCase ioCase){

  requireNonNull(wildcards,"wildcards");

  this.wildcards=wildcards.clone();

  this.ioCase=IOCase.value(ioCase,IOCase.SENSITIVE);

}

