Location: ChunkedWriterTest.java

Content: 

private OutputStreamWriter getOutputStreamWriter(final AtomicInteger numWrites){

  final ByteArrayOutputStream baos=new ByteArrayOutputStream();

  return new OutputStreamWriter(baos){

    @Override public void write(    final char[] cbuf,    final int off,    final int len) throws IOException {

      numWrites.incrementAndGet();

      super.write(cbuf,off,len);

    }

  }

;

}

Location: ChunkedWriterTest.java

Content: 

@Test public void negative_chunksize_not_permitted(){

  assertThrows(IllegalArgumentException.class,() -> new ChunkedWriter(new OutputStreamWriter(new ByteArrayOutputStream()),0));

}

Location: ChunkedWriterTest.java

Content: 

@Test public void write_four_chunks() throws Exception {

  final AtomicInteger numWrites=new AtomicInteger();

  try (final OutputStreamWriter osw=getOutputStreamWriter(numWrites)){

    try (final ChunkedWriter chunked=new ChunkedWriter(osw,10)){

      chunked.write("0123456789012345678901234567891".toCharArray());

      chunked.flush();

      assertEquals(4,numWrites.get());

    }

   }

 }

Location: ChunkedWriterTest.java

Content: 

@Test public void write_two_chunks_default_constructor() throws Exception {

  final AtomicInteger numWrites=new AtomicInteger();

  try (final OutputStreamWriter osw=getOutputStreamWriter(numWrites)){

    try (final ChunkedWriter chunked=new ChunkedWriter(osw)){

      chunked.write(new char[1024 * 4 + 1]);

      chunked.flush();

      assertEquals(2,numWrites.get());

    }

   }

 }

