Location: TeeInputStreamTest.java

Content: 

/** 

 * Tests that the main  {@code InputStream} is closed when closing the branch {@code OutputStream} throws anexception on  {@link TeeInputStream#close()}, if specified to do so.

 */

@Test public void testCloseBranchIOException() throws Exception {

  final ByteArrayInputStream goodIs=mock(ByteArrayInputStream.class);

  final OutputStream badOs=new ThrowOnCloseOutputStream();

  final TeeInputStream nonClosingTis=new TeeInputStream(goodIs,badOs,false);

  nonClosingTis.close();

  verify(goodIs).close();

  final TeeInputStream closingTis=new TeeInputStream(goodIs,badOs,true);

  try {

    closingTis.close();

    fail("Expected " + IOException.class.getName());

  }

 catch (  final IOException e) {

    verify(goodIs,times(2)).close();

  }

}

Location: TeeInputStreamTest.java

Content: 

/** 

 * Tests that the branch  {@code OutputStream} is closed when closing the main {@code InputStream} throws anexception on  {@link TeeInputStream#close()}, if specified to do so.

 */

@Test public void testCloseMainIOException() throws IOException {

  final InputStream badIs=new ThrowOnCloseInputStream();

  final ByteArrayOutputStream goodOs=mock(ByteArrayOutputStream.class);

  final TeeInputStream nonClosingTis=new TeeInputStream(badIs,goodOs,false);

  try {

    nonClosingTis.close();

    fail("Expected " + IOException.class.getName());

  }

 catch (  final IOException e) {

    verify(goodOs,never()).close();

  }

  final TeeInputStream closingTis=new TeeInputStream(badIs,goodOs,true);

  try {

    closingTis.close();

    fail("Expected " + IOException.class.getName());

  }

 catch (  final IOException e) {

    verify(goodOs).close();

  }

}

Location: TeeInputStreamTest.java

Content: 

@Test public void testReadEverything() throws Exception {

  assertEquals('a',tee.read());

  assertEquals('b',tee.read());

  assertEquals('c',tee.read());

  assertEquals(-1,tee.read());

  assertEquals("abc",output.toString(ASCII));

}

Location: TeeInputStreamTest.java

Content: 

@Test public void testReadNothing() throws Exception {

  assertEquals("",output.toString(ASCII));

}

Location: TeeInputStreamTest.java

Content: 

@Test public void testReadToArray() throws Exception {

  final byte[] buffer=new byte[8];

  assertEquals(3,tee.read(buffer));

  assertEquals('a',buffer[0]);

  assertEquals('b',buffer[1]);

  assertEquals('c',buffer[2]);

  assertEquals(-1,tee.read(buffer));

  assertEquals("abc",output.toString(ASCII));

}

Location: TeeInputStreamTest.java

Content: 

@Test public void testReadToArrayWithOffset() throws Exception {

  final byte[] buffer=new byte[8];

  assertEquals(3,tee.read(buffer,4,4));

  assertEquals('a',buffer[4]);

  assertEquals('b',buffer[5]);

  assertEquals('c',buffer[6]);

  assertEquals(-1,tee.read(buffer,4,4));

  assertEquals("abc",output.toString(ASCII));

}

