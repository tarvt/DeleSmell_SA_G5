Location: ProxyInputStream.java

Content: 

/** 

 * Invoked by the read methods after the proxied call has returned successfully. The number of bytes returned to the caller (or -1 if the end of stream was reached) is given as an argument. <p> Subclasses can override this method to add common post-processing functionality without having to override all the read methods. The default implementation does nothing. <p> Note this method is <em>not</em> called from  {@link #skip(long)} or{@link #reset()}. You need to explicitly override those methods if you want to add post-processing steps also to them.

 * @since 2.0

 * @param n number of bytes read, or -1 if the end of stream was reached

 * @throws IOException if the post-processing fails

 */

@SuppressWarnings("unused") protected void afterRead(final int n) throws IOException {

}

Location: ProxyInputStream.java

Content: 

/** 

 * Invoked by the read methods before the call is proxied. The number of bytes that the caller wanted to read (1 for the  {@link #read()}method, buffer length for  {@link #read(byte[])}, etc.) is given as an argument. <p> Subclasses can override this method to add common pre-processing functionality without having to override all the read methods. The default implementation does nothing. <p> Note this method is <em>not</em> called from  {@link #skip(long)} or{@link #reset()}. You need to explicitly override those methods if you want to add pre-processing steps also to them.

 * @since 2.0

 * @param n number of bytes that the caller asked to be read

 * @throws IOException if the pre-processing fails

 */

@SuppressWarnings("unused") protected void beforeRead(final int n) throws IOException {

}

Location: ProxyInputStream.java

Content: 

/** 

 * Constructs a new ProxyInputStream.

 * @param proxy  the InputStream to delegate to

 */

public ProxyInputStream(final InputStream proxy){

  super(proxy);

}

