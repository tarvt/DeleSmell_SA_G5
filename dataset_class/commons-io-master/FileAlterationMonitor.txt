Location: FileAlterationMonitor.java

Content: 

/** 

 * Adds a file system observer to this monitor.

 * @param observer The file system observer to add

 */

public void addObserver(final FileAlterationObserver observer){

  if (observer != null) {

    observers.add(observer);

  }

}

Location: FileAlterationMonitor.java

Content: 

/** 

 * Constructs a monitor with a default interval of 10 seconds.

 */

public FileAlterationMonitor(){

  this(10_000);

}

Location: FileAlterationMonitor.java

Content: 

/** 

 * Constructs a monitor with the specified interval.

 * @param intervalMillis The amount of time in milliseconds to wait betweenchecks of the file system.

 */

public FileAlterationMonitor(final long intervalMillis){

  this.intervalMillis=intervalMillis;

}

Location: FileAlterationMonitor.java

Content: 

/** 

 * Constructs a monitor with the specified interval and collection of observers.

 * @param interval The amount of time in milliseconds to wait betweenchecks of the file system.

 * @param observers The collection of observers to add to the monitor.

 * @since 2.9.0

 */

public FileAlterationMonitor(final long interval,final Collection<FileAlterationObserver> observers){

  this(interval,Optional.ofNullable(observers).orElse(Collections.emptyList()).toArray(EMPTY_ARRAY));

}

Location: FileAlterationMonitor.java

Content: 

/** 

 * Constructs a monitor with the specified interval and set of observers.

 * @param interval The amount of time in milliseconds to wait betweenchecks of the file system.

 * @param observers The set of observers to add to the monitor.

 */

public FileAlterationMonitor(final long interval,final FileAlterationObserver... observers){

  this(interval);

  if (observers != null) {

    for (    final FileAlterationObserver observer : observers) {

      addObserver(observer);

    }

  }

}

Location: FileAlterationMonitor.java

Content: 

/** 

 * Returns the interval.

 * @return the interval

 */

public long getInterval(){

  return intervalMillis;

}

Location: FileAlterationMonitor.java

Content: 

/** 

 * Returns the set of  {@link FileAlterationObserver} registered withthis monitor.

 * @return The set of {@link FileAlterationObserver}

 */

public Iterable<FileAlterationObserver> getObservers(){

  return observers;

}

Location: FileAlterationMonitor.java

Content: 

/** 

 * Removes a file system observer from this monitor.

 * @param observer The file system observer to remove

 */

public void removeObserver(final FileAlterationObserver observer){

  if (observer != null) {

    while (observers.remove(observer)) {

    }

  }

}

Location: FileAlterationMonitor.java

Content: 

/** 

 * Runs this monitor.

 */

@Override public void run(){

  while (running) {

    for (    final FileAlterationObserver observer : observers) {

      observer.checkAndNotify();

    }

    if (!running) {

      break;

    }

    try {

      Thread.sleep(intervalMillis);

    }

 catch (    final InterruptedException ignored) {

    }

  }

}

Location: FileAlterationMonitor.java

Content: 

/** 

 * Sets the thread factory.

 * @param threadFactory the thread factory

 */

public synchronized void setThreadFactory(final ThreadFactory threadFactory){

  this.threadFactory=threadFactory;

}

Location: FileAlterationMonitor.java

Content: 

/** 

 * Starts monitoring.

 * @throws Exception if an error occurs initializing the observer

 */

public synchronized void start() throws Exception {

  if (running) {

    throw new IllegalStateException("Monitor is already running");

  }

  for (  final FileAlterationObserver observer : observers) {

    observer.initialize();

  }

  running=true;

  if (threadFactory != null) {

    thread=threadFactory.newThread(this);

  }

 else {

    thread=new Thread(this);

  }

  thread.start();

}

Location: FileAlterationMonitor.java

Content: 

/** 

 * Stops monitoring.

 * @throws Exception if an error occurs initializing the observer

 */

public synchronized void stop() throws Exception {

  stop(intervalMillis);

}

Location: FileAlterationMonitor.java

Content: 

/** 

 * Stops monitoring.

 * @param stopInterval the amount of time in milliseconds to wait for the thread to finish.A value of zero will wait until the thread is finished (see  {@link Thread#join(long)}).

 * @throws Exception if an error occurs initializing the observer

 * @since 2.1

 */

public synchronized void stop(final long stopInterval) throws Exception {

  if (!running) {

    throw new IllegalStateException("Monitor is not running");

  }

  running=false;

  try {

    thread.interrupt();

    thread.join(stopInterval);

  }

 catch (  final InterruptedException e) {

    Thread.currentThread().interrupt();

  }

  for (  final FileAlterationObserver observer : observers) {

    observer.destroy();

  }

}

