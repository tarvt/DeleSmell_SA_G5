Location: XmlStreamWriter.java

Content: 

/** 

 * Detects the encoding.

 * @param cbuf the buffer to write the characters from

 * @param off The start offset

 * @param len The number of characters to write

 * @throws IOException if an error occurs detecting the encoding

 */

private void detectEncoding(final char[] cbuf,final int off,final int len) throws IOException {

  int size=len;

  final StringBuffer xmlProlog=xmlPrologWriter.getBuffer();

  if (xmlProlog.length() + len > BUFFER_SIZE) {

    size=BUFFER_SIZE - xmlProlog.length();

  }

  xmlPrologWriter.write(cbuf,off,size);

  if (xmlProlog.length() >= 5) {

    if (xmlProlog.substring(0,5).equals("<?xml")) {

      final int xmlPrologEnd=xmlProlog.indexOf("?>");

      if (xmlPrologEnd > 0) {

        final Matcher m=ENCODING_PATTERN.matcher(xmlProlog.substring(0,xmlPrologEnd));

        if (m.find()) {

          encoding=m.group(1).toUpperCase(Locale.ROOT);

          encoding=encoding.substring(1,encoding.length() - 1);

        }

 else {

          encoding=defaultEncoding;

        }

      }

 else       if (xmlProlog.length() >= BUFFER_SIZE) {

        encoding=defaultEncoding;

      }

    }

 else {

      encoding=defaultEncoding;

    }

    if (encoding != null) {

      xmlPrologWriter=null;

      writer=new OutputStreamWriter(out,encoding);

      writer.write(xmlProlog.toString());

      if (len > size) {

        writer.write(cbuf,off + size,len - size);

      }

    }

  }

}

Location: XmlStreamWriter.java

Content: 

/** 

 * Constructs a new XML stream writer for the specified file with a default encoding of UTF-8.

 * @param file The file to write to

 * @throws FileNotFoundException if there is an error creating oropening the file

 */

public XmlStreamWriter(final File file) throws FileNotFoundException {

  this(file,null);

}

Location: XmlStreamWriter.java

Content: 

/** 

 * Constructs a new XML stream writer for the specified file with the specified default encoding.

 * @param file The file to write to

 * @param defaultEncoding The default encoding if not encoding could be detected

 * @throws FileNotFoundException if there is an error creating oropening the file

 */

@SuppressWarnings("resource") public XmlStreamWriter(final File file,final String defaultEncoding) throws FileNotFoundException {

  this(new FileOutputStream(file),defaultEncoding);

}

Location: XmlStreamWriter.java

Content: 

/** 

 * Constructs a new XML stream writer for the specified output stream with a default encoding of UTF-8.

 * @param out The output stream

 */

public XmlStreamWriter(final OutputStream out){

  this(out,null);

}

Location: XmlStreamWriter.java

Content: 

/** 

 * Constructs a new XML stream writer for the specified output stream with the specified default encoding.

 * @param out The output stream

 * @param defaultEncoding The default encoding if not encoding could be detected

 */

public XmlStreamWriter(final OutputStream out,final String defaultEncoding){

  this.out=out;

  this.defaultEncoding=defaultEncoding != null ? defaultEncoding : "UTF-8";

}

