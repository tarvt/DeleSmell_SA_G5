Location: CharacterFilterReaderTest.java

Content: 

@Test public void testInputSize0FilterSize1() throws IOException {

  final StringReader input=new StringReader("");

  final HashSet<Integer> codePoints=new HashSet<>();

  codePoints.add(Integer.valueOf('a'));

  try (CharacterFilterReader reader=new CharacterFilterReader(input,'A')){

    assertEquals(-1,reader.read());

  }

 }

Location: CharacterFilterReaderTest.java

Content: 

@Test public void testInputSize1FilterSize1() throws IOException {

  try (StringReader input=new StringReader("a");CharacterFilterReader reader=new CharacterFilterReader(input,'a')){

    assertEquals(-1,reader.read());

  }

 }

Location: CharacterFilterReaderTest.java

Content: 

@Test public void testInputSize2FilterSize1FilterAll() throws IOException {

  final StringReader input=new StringReader("aa");

  try (CharacterFilterReader reader=new CharacterFilterReader(input,'a')){

    assertEquals(-1,reader.read());

  }

 }

Location: CharacterFilterReaderTest.java

Content: 

@Test public void testInputSize2FilterSize1FilterFirst() throws IOException {

  final StringReader input=new StringReader("ab");

  try (CharacterFilterReader reader=new CharacterFilterReader(input,'a')){

    assertEquals('b',reader.read());

    assertEquals(-1,reader.read());

  }

 }

Location: CharacterFilterReaderTest.java

Content: 

@Test public void testInputSize2FilterSize1FilterLast() throws IOException {

  final StringReader input=new StringReader("ab");

  try (CharacterFilterReader reader=new CharacterFilterReader(input,'b')){

    assertEquals('a',reader.read());

    assertEquals(-1,reader.read());

  }

 }

Location: CharacterFilterReaderTest.java

Content: 

@Test public void testReadFilteringEOF(){

  final StringReader input=new StringReader(STRING_FIXTURE);

  assertTimeoutPreemptively(Duration.ofMillis(500),() -> {

    try (StringBuilderWriter output=new StringBuilderWriter();CharacterFilterReader reader=new CharacterFilterReader(input,EOF)){

      int c;

      while ((c=reader.read()) != EOF) {

        output.write(c);

      }

      assertEquals(STRING_FIXTURE,output.toString());

    }

   }

);

}

