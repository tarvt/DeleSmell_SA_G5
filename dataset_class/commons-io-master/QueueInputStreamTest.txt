Location: QueueInputStreamTest.java

Content: 

@ParameterizedTest(name="inputData={0}") @MethodSource("inputData") public void bufferedReads(final String inputData) throws IOException {

  final BlockingQueue<Integer> queue=new LinkedBlockingQueue<>();

  try (final BufferedInputStream inputStream=new BufferedInputStream(new QueueInputStream(queue));final QueueOutputStream outputStream=new QueueOutputStream(queue)){

    outputStream.write(inputData.getBytes(UTF_8));

    final String actualData=IOUtils.toString(inputStream,UTF_8);

    assertEquals(inputData,actualData);

  }

 }

Location: QueueInputStreamTest.java

Content: 

@ParameterizedTest(name="inputData={0}") @MethodSource("inputData") public void bufferedReadWrite(final String inputData) throws IOException {

  final BlockingQueue<Integer> queue=new LinkedBlockingQueue<>();

  try (final BufferedInputStream inputStream=new BufferedInputStream(new QueueInputStream(queue));final BufferedOutputStream outputStream=new BufferedOutputStream(new QueueOutputStream(queue),defaultBufferSize())){

    outputStream.write(inputData.getBytes(UTF_8));

    outputStream.flush();

    final String dataCopy=IOUtils.toString(inputStream,UTF_8);

    assertEquals(inputData,dataCopy);

  }

 }

Location: QueueInputStreamTest.java

Content: 

@ParameterizedTest(name="inputData={0}") @MethodSource("inputData") public void bufferedWrites(final String inputData) throws IOException {

  final BlockingQueue<Integer> queue=new LinkedBlockingQueue<>();

  try (final QueueInputStream inputStream=new QueueInputStream(queue);final BufferedOutputStream outputStream=new BufferedOutputStream(new QueueOutputStream(queue),defaultBufferSize())){

    outputStream.write(inputData.getBytes(UTF_8));

    outputStream.flush();

    final String actualData=readUnbuffered(inputStream);

    assertEquals(inputData,actualData);

  }

 }

Location: QueueInputStreamTest.java

Content: 

private int defaultBufferSize(){

  return 8192;

}

Location: QueueInputStreamTest.java

Content: 

public static Stream<Arguments> inputData(){

  return Stream.of(Arguments.of(""),Arguments.of("1"),Arguments.of("12"),Arguments.of("1234"),Arguments.of("12345678"),Arguments.of(StringUtils.repeat("A",4095)),Arguments.of(StringUtils.repeat("A",4096)),Arguments.of(StringUtils.repeat("A",4097)),Arguments.of(StringUtils.repeat("A",8191)),Arguments.of(StringUtils.repeat("A",8192)),Arguments.of(StringUtils.repeat("A",8193)),Arguments.of(StringUtils.repeat("A",8192 * 4)));

}

Location: QueueInputStreamTest.java

Content: 

private String readUnbuffered(final InputStream inputStream) throws IOException {

  final ByteArrayOutputStream byteArrayOutputStream=new ByteArrayOutputStream();

  int n=-1;

  while ((n=inputStream.read()) != -1) {

    byteArrayOutputStream.write(n);

  }

  return byteArrayOutputStream.toString("UTF-8");

}

Location: QueueInputStreamTest.java

Content: 

@ParameterizedTest(name="inputData={0}") @MethodSource("inputData") public void unbufferedReadWrite(final String inputData) throws IOException {

  try (final QueueInputStream inputStream=new QueueInputStream();final QueueOutputStream outputStream=inputStream.newQueueOutputStream()){

    writeUnbuffered(outputStream,inputData);

    final String actualData=readUnbuffered(inputStream);

    assertEquals(inputData,actualData);

  }

 }

Location: QueueInputStreamTest.java

Content: 

private void writeUnbuffered(final QueueOutputStream outputStream,final String inputData) throws InterruptedIOException {

  final byte[] bytes=inputData.getBytes(UTF_8);

  for (  final byte oneByte : bytes) {

    outputStream.write(oneByte);

  }

}

