Location: CopyUtils.java

Content: 

/** 

 * Instances should NOT be constructed in standard programming.

 */

public CopyUtils(){

}

Location: CopyUtils.java

Content: 

/** 

 * Copies bytes from a  {@code byte[]} to an {@code OutputStream}.

 * @param input the byte array to read from

 * @param output the {@code OutputStream} to write to

 * @throws IOException In case of an I/O problem

 */

public static void copy(final byte[] input,final OutputStream output) throws IOException {

  output.write(input);

}

Location: CopyUtils.java

Content: 

/** 

 * Copies and convert bytes from a  {@code byte[]} to chars on a{@code Writer}. The platform's default encoding is used for the byte-to-char conversion.

 * @param input the byte array to read from

 * @param output the {@code Writer} to write to

 * @throws IOException In case of an I/O problem

 * @deprecated 2.5 use {@link #copy(byte[],Writer,String)} instead

 */

@Deprecated public static void copy(final byte[] input,final Writer output) throws IOException {

  final ByteArrayInputStream inputStream=new ByteArrayInputStream(input);

  copy(inputStream,output);

}

Location: CopyUtils.java

Content: 

/** 

 * Copies and convert bytes from a  {@code byte[]} to chars on a{@code Writer}, using the specified encoding.

 * @param input the byte array to read from

 * @param output the {@code Writer} to write to

 * @param encoding The name of a supported character encoding. See the<a href="http://www.iana.org/assignments/character-sets">IANA Charset Registry</a> for a list of valid encoding types.

 * @throws IOException In case of an I/O problem

 */

public static void copy(final byte[] input,final Writer output,final String encoding) throws IOException {

  final ByteArrayInputStream inputStream=new ByteArrayInputStream(input);

  copy(inputStream,output,encoding);

}

Location: CopyUtils.java

Content: 

/** 

 * Copies bytes from an  {@code InputStream} to an{@code OutputStream}.

 * @param input the {@code InputStream} to read from

 * @param output the {@code OutputStream} to write to

 * @return the number of bytes copied

 * @throws IOException In case of an I/O problem

 */

public static int copy(final InputStream input,final OutputStream output) throws IOException {

  final byte[] buffer=IOUtils.byteArray();

  int count=0;

  int n;

  while (EOF != (n=input.read(buffer))) {

    output.write(buffer,0,n);

    count+=n;

  }

  return count;

}

Location: CopyUtils.java

Content: 

/** 

 * Copies and convert bytes from an  {@code InputStream} to chars on a{@code Writer}. The platform's default encoding is used for the byte-to-char conversion.

 * @param input the {@code InputStream} to read from

 * @param output the {@code Writer} to write to

 * @throws IOException In case of an I/O problem

 * @deprecated 2.5 use {@link #copy(InputStream,Writer,String)} instead

 */

@Deprecated public static void copy(final InputStream input,final Writer output) throws IOException {

  final InputStreamReader in=new InputStreamReader(input,Charset.defaultCharset());

  copy(in,output);

}

Location: CopyUtils.java

Content: 

/** 

 * Copies and convert bytes from an  {@code InputStream} to chars on a{@code Writer}, using the specified encoding.

 * @param input the {@code InputStream} to read from

 * @param output the {@code Writer} to write to

 * @param encoding The name of a supported character encoding. See the<a href="http://www.iana.org/assignments/character-sets">IANA Charset Registry</a> for a list of valid encoding types.

 * @throws IOException In case of an I/O problem

 */

public static void copy(final InputStream input,final Writer output,final String encoding) throws IOException {

  final InputStreamReader in=new InputStreamReader(input,encoding);

  copy(in,output);

}

Location: CopyUtils.java

Content: 

/** 

 * Serialize chars from a  {@code Reader} to bytes on an{@code OutputStream}, and flush the  {@code OutputStream}. Uses the default platform encoding.

 * @param input the {@code Reader} to read from

 * @param output the {@code OutputStream} to write to

 * @throws IOException In case of an I/O problem

 * @deprecated 2.5 use {@link #copy(Reader,OutputStream,String)} instead

 */

@Deprecated public static void copy(final Reader input,final OutputStream output) throws IOException {

  final OutputStreamWriter out=new OutputStreamWriter(output,Charset.defaultCharset());

  copy(input,out);

  out.flush();

}

Location: CopyUtils.java

Content: 

/** 

 * Serialize chars from a  {@code Reader} to bytes on an{@code OutputStream}, and flush the  {@code OutputStream}.

 * @param input the {@code Reader} to read from

 * @param output the {@code OutputStream} to write to

 * @param encoding The name of a supported character encoding. See the<a href="http://www.iana.org/assignments/character-sets">IANA Charset Registry</a> for a list of valid encoding types.

 * @throws IOException In case of an I/O problem

 * @since 2.5

 */

public static void copy(final Reader input,final OutputStream output,final String encoding) throws IOException {

  final OutputStreamWriter out=new OutputStreamWriter(output,encoding);

  copy(input,out);

  out.flush();

}

Location: CopyUtils.java

Content: 

/** 

 * Copies chars from a  {@code Reader} to a {@code Writer}.

 * @param input the {@code Reader} to read from

 * @param output the {@code Writer} to write to

 * @return the number of characters copied

 * @throws IOException In case of an I/O problem

 */

public static int copy(final Reader input,final Writer output) throws IOException {

  final char[] buffer=IOUtils.getCharArray();

  int count=0;

  int n;

  while (EOF != (n=input.read(buffer))) {

    output.write(buffer,0,n);

    count+=n;

  }

  return count;

}

Location: CopyUtils.java

Content: 

/** 

 * Serialize chars from a  {@code String} to bytes on an{@code OutputStream}, and flush the  {@code OutputStream}. Uses the platform default encoding.

 * @param input the {@code String} to read from

 * @param output the {@code OutputStream} to write to

 * @throws IOException In case of an I/O problem

 * @deprecated 2.5 use {@link #copy(String,OutputStream,String)} instead

 */

@Deprecated public static void copy(final String input,final OutputStream output) throws IOException {

  final StringReader in=new StringReader(input);

  final OutputStreamWriter out=new OutputStreamWriter(output,Charset.defaultCharset());

  copy(in,out);

  out.flush();

}

Location: CopyUtils.java

Content: 

/** 

 * Serialize chars from a  {@code String} to bytes on an{@code OutputStream}, and flush the  {@code OutputStream}.

 * @param input the {@code String} to read from

 * @param output the {@code OutputStream} to write to

 * @param encoding The name of a supported character encoding. See the<a href="http://www.iana.org/assignments/character-sets">IANA Charset Registry</a> for a list of valid encoding types.

 * @throws IOException In case of an I/O problem

 * @since 2.5

 */

public static void copy(final String input,final OutputStream output,final String encoding) throws IOException {

  final StringReader in=new StringReader(input);

  final OutputStreamWriter out=new OutputStreamWriter(output,encoding);

  copy(in,out);

  out.flush();

}

Location: CopyUtils.java

Content: 

/** 

 * Copies chars from a  {@code String} to a {@code Writer}.

 * @param input the {@code String} to read from

 * @param output the {@code Writer} to write to

 * @throws IOException In case of an I/O problem

 */

public static void copy(final String input,final Writer output) throws IOException {

  output.write(input);

}

