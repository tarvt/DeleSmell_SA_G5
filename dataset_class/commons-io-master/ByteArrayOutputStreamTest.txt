Location: ByteArrayOutputStreamTest.java

Content: 

private static Stream<Arguments> baosFactories(){

  return Stream.of(Arguments.of(ByteArrayOutputStream.class.getSimpleName(),new ByteArrayOutputStreamFactory()),Arguments.of(UnsynchronizedByteArrayOutputStream.class.getSimpleName(),new UnsynchronizedByteArrayOutputStreamFactory()));

}

Location: ByteArrayOutputStreamTest.java

Content: 

private static boolean byteCmp(final byte[] src,final byte[] cmp){

  for (int i=0; i < cmp.length; i++) {

    if (src[i] != cmp[i]) {

      return false;

    }

  }

  return true;

}

Location: ByteArrayOutputStreamTest.java

Content: 

private void checkByteArrays(final byte[] expected,final byte[] actual){

  if (expected.length != actual.length) {

    fail("Resulting byte arrays are not equally long");

  }

  if (!byteCmp(expected,actual)) {

    fail("Resulting byte arrays are not equal");

  }

}

Location: ByteArrayOutputStreamTest.java

Content: 

private void checkStreams(final AbstractByteArrayOutputStream actual,final java.io.ByteArrayOutputStream expected){

  assertEquals(expected.size(),actual.size(),"Sizes are not equal");

  final byte[] buf=actual.toByteArray();

  final byte[] refbuf=expected.toByteArray();

  checkByteArrays(buf,refbuf);

}

Location: ByteArrayOutputStreamTest.java

Content: 

@ParameterizedTest(name="[{index}] {0}") @MethodSource("baosFactories") public void testInvalidParameterizedConstruction(final String baosName,final BAOSFactory<?> baosFactory){

  assertThrows(IllegalArgumentException.class,() -> baosFactory.newInstance(-1));

}

Location: ByteArrayOutputStreamTest.java

Content: 

@ParameterizedTest(name="[{index}] {0}") @MethodSource("baosFactories") public void testInvalidWriteLenUnder(final String baosName,final BAOSFactory<?> baosFactory) throws IOException {

  try (final AbstractByteArrayOutputStream baout=baosFactory.newInstance()){

    assertThrows(IndexOutOfBoundsException.class,() -> baout.write(new byte[1],0,-1));

  }

 }

Location: ByteArrayOutputStreamTest.java

Content: 

@ParameterizedTest(name="[{index}] {0}") @MethodSource("baosFactories") public void testInvalidWriteOffsetAndLenOver(final String baosName,final BAOSFactory<?> baosFactory) throws IOException {

  try (final AbstractByteArrayOutputStream baout=baosFactory.newInstance()){

    assertThrows(IndexOutOfBoundsException.class,() -> baout.write(new byte[1],0,2));

  }

 }

Location: ByteArrayOutputStreamTest.java

Content: 

@ParameterizedTest(name="[{index}] {0}") @MethodSource("baosFactories") public void testInvalidWriteOffsetAndLenUnder(final String baosName,final BAOSFactory<?> baosFactory) throws IOException {

  try (final AbstractByteArrayOutputStream baout=baosFactory.newInstance()){

    assertThrows(IndexOutOfBoundsException.class,() -> baout.write(new byte[1],1,-2));

  }

 }

Location: ByteArrayOutputStreamTest.java

Content: 

@ParameterizedTest(name="[{index}] {0}") @MethodSource("baosFactories") public void testInvalidWriteOffsetOver(final String baosName,final BAOSFactory<?> baosFactory) throws IOException {

  try (final AbstractByteArrayOutputStream baout=baosFactory.newInstance()){

    assertThrows(IndexOutOfBoundsException.class,() -> baout.write(IOUtils.EMPTY_BYTE_ARRAY,1,0));

  }

 }

Location: ByteArrayOutputStreamTest.java

Content: 

@ParameterizedTest(name="[{index}] {0}") @MethodSource("baosFactories") public void testInvalidWriteOffsetUnder(final String baosName,final BAOSFactory<?> baosFactory) throws IOException {

  try (final AbstractByteArrayOutputStream baout=baosFactory.newInstance()){

    assertThrows(IndexOutOfBoundsException.class,() -> baout.write(null,-1,0));

  }

 }

Location: ByteArrayOutputStreamTest.java

Content: 

@ParameterizedTest(name="[{index}] {0}") @MethodSource("baosFactories") public void testStream(final String baosName,final BAOSFactory<?> baosFactory) throws Exception {

  int written;

  try (final AbstractByteArrayOutputStream baout=baosFactory.newInstance(32);final java.io.ByteArrayOutputStream ref=new java.io.ByteArrayOutputStream()){

    written=writeData(baout,ref,new int[]{4,10,22});

    assertEquals(36,written);

    checkStreams(baout,ref);

    written=writeData(baout,ref,new int[]{20,12});

    assertEquals(32,written);

    checkStreams(baout,ref);

    baout.reset();

    ref.reset();

    written=writeData(baout,ref,new int[]{5,47,33,60,1,0,8});

    assertEquals(155,written);

    checkStreams(baout,ref);

    baout.reset();

    written=baout.write(new ByteArrayInputStream(ref.toByteArray()));

    assertEquals(155,written);

    checkStreams(baout,ref);

    try (final AbstractByteArrayOutputStream baout1=baosFactory.newInstance(32)){

      ref.writeTo(baout1);

      final java.io.ByteArrayOutputStream ref1=new java.io.ByteArrayOutputStream();

      baout.writeTo(ref1);

      checkStreams(baout1,ref1);

      final String baoutString=baout.toString("ASCII");

      final String refString=ref.toString("ASCII");

      assertEquals(refString,baoutString,"ASCII decoded String must be equal");

      try (final AbstractByteArrayOutputStream baos1=baosFactory.newInstance();final AbstractByteArrayOutputStream baos2=baosFactory.newInstance()){

        assertSame(baos1.toByteArray(),baos2.toByteArray());

      }

     }

   }

 }

Location: ByteArrayOutputStreamTest.java

Content: 

@ParameterizedTest(name="[{index}] {0}") @MethodSource("toBufferedInputStreamFunctionFactories") public void testToBufferedInputStreamEmpty(final String baosName,final IOFunction<InputStream,InputStream> toBufferedInputStreamFunction) throws IOException {

  try (final ByteArrayInputStream bain=new ByteArrayInputStream(IOUtils.EMPTY_BYTE_ARRAY)){

    assertEquals(0,bain.available());

    try (final InputStream buffered=toBufferedInputStreamFunction.apply(bain)){

      assertEquals(0,buffered.available());

    }

   }

 }

Location: ByteArrayOutputStreamTest.java

Content: 

@ParameterizedTest(name="[{index}] {0}") @MethodSource("toBufferedInputStreamFunctionFactories") public void testToBufferedInputStream(final String baosName,final IOFunction<InputStream,InputStream> toBufferedInputStreamFunction) throws IOException {

  final byte data[]={(byte)0xCA,(byte)0xFE,(byte)0xBA,(byte)0xBE};

  try (final ByteArrayInputStream bain=new ByteArrayInputStream(data)){

    assertEquals(data.length,bain.available());

    try (final InputStream buffered=toBufferedInputStreamFunction.apply(bain)){

      assertEquals(data.length,buffered.available());

      assertArrayEquals(data,IOUtils.toByteArray(buffered));

    }

   }

 }

Location: ByteArrayOutputStreamTest.java

Content: 

@ParameterizedTest(name="[{index}] {0}") @MethodSource("baosFactories") public void testToInputStreamEmpty(final String baosName,final BAOSFactory<?> baosFactory) throws IOException {

  try (final AbstractByteArrayOutputStream baout=baosFactory.newInstance();final InputStream in=baout.toInputStream()){

    assertEquals(0,in.available());

    assertTrue(in instanceof ClosedInputStream);

  }

 }

Location: ByteArrayOutputStreamTest.java

Content: 

@ParameterizedTest(name="[{index}] {0}") @MethodSource("baosFactories") public void testToInputStreamWithReset(final String baosName,final BAOSFactory<?> baosFactory) throws IOException {

  try (final AbstractByteArrayOutputStream baout=baosFactory.newInstance();final java.io.ByteArrayOutputStream ref=new java.io.ByteArrayOutputStream()){

    writeData(baout,ref,32);

    for (int i=0; i < 128; i++) {

      writeData(baout,ref,64);

    }

    try (final InputStream in=baout.toInputStream()){

      byte refData[]=ref.toByteArray();

      baout.reset();

      ref.reset();

      writeData(baout,ref,new int[]{2,4,8,16});

      byte baoutData[]=IOUtils.toByteArray(in);

      assertEquals(8224,baoutData.length);

      checkByteArrays(refData,baoutData);

      try (final InputStream in2=baout.toInputStream()){

        baoutData=IOUtils.toByteArray(in2);

      }

       refData=ref.toByteArray();

      assertEquals(30,baoutData.length);

      checkByteArrays(refData,baoutData);

    }

   }

 }

Location: ByteArrayOutputStreamTest.java

Content: 

@ParameterizedTest(name="[{index}] {0}") @MethodSource("baosFactories") public void testToInputStream(final String baosName,final BAOSFactory<?> baosFactory) throws IOException {

  try (final AbstractByteArrayOutputStream baout=baosFactory.newInstance();final java.io.ByteArrayOutputStream ref=new java.io.ByteArrayOutputStream()){

    writeData(baout,ref,32);

    for (int i=0; i < 128; i++) {

      writeData(baout,ref,64);

    }

    try (final InputStream in=baout.toInputStream()){

      byte refData[]=ref.toByteArray();

      writeData(baout,ref,new int[]{2,4,8,16});

      byte baoutData[]=IOUtils.toByteArray(in);

      assertEquals(8224,baoutData.length);

      checkByteArrays(refData,baoutData);

      try (final InputStream in2=baout.toInputStream()){

        baoutData=IOUtils.toByteArray(in2);

      }

       refData=ref.toByteArray();

      assertEquals(8254,baoutData.length);

      checkByteArrays(refData,baoutData);

    }

   }

 }

Location: ByteArrayOutputStreamTest.java

Content: 

@ParameterizedTest(name="[{index}] {0}") @MethodSource("baosFactories") public void testWriteZero(final String baosName,final BAOSFactory<?> baosFactory) throws IOException {

  try (final AbstractByteArrayOutputStream baout=baosFactory.newInstance()){

    baout.write(IOUtils.EMPTY_BYTE_ARRAY,0,0);

    assertTrue(true,"Dummy");

  }

 }

Location: ByteArrayOutputStreamTest.java

Content: 

private static Stream<Arguments> toBufferedInputStreamFunctionFactories(){

  final IOFunction<InputStream,InputStream> syncBaosToBufferedInputStream=ByteArrayOutputStream::toBufferedInputStream;

  final IOFunction<InputStream,InputStream> syncBaosToBufferedInputStreamWithSize=is -> ByteArrayOutputStream.toBufferedInputStream(is,1024);

  final IOFunction<InputStream,InputStream> unSyncBaosToBufferedInputStream=UnsynchronizedByteArrayOutputStream::toBufferedInputStream;

  final IOFunction<InputStream,InputStream> unSyncBaosToBufferedInputStreamWithSize=is -> UnsynchronizedByteArrayOutputStream.toBufferedInputStream(is,1024);

  return Stream.of(Arguments.of("ByteArrayOutputStream.toBufferedInputStream(InputStream)",syncBaosToBufferedInputStream),Arguments.of("ByteArrayOutputStream.toBufferedInputStream(InputStream, int)",syncBaosToBufferedInputStreamWithSize),Arguments.of("UnsynchronizedByteArrayOutputStream.toBufferedInputStream(InputStream)",unSyncBaosToBufferedInputStream),Arguments.of("UnsynchronizedByteArrayOutputStream.toBufferedInputStream(InputStream, int)",unSyncBaosToBufferedInputStreamWithSize));

}

Location: ByteArrayOutputStreamTest.java

Content: 

private int writeData(final AbstractByteArrayOutputStream baout,final java.io.ByteArrayOutputStream ref,final int[] instructions){

  int written=0;

  for (  final int instruction : instructions) {

    written+=writeData(baout,ref,instruction);

  }

  return written;

}

