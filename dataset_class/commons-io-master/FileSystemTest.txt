Location: FileSystemTest.java

Content: 

@Test public void testGetCurrent(){

  if (SystemUtils.IS_OS_WINDOWS) {

    assertEquals(FileSystem.WINDOWS,FileSystem.getCurrent());

  }

  if (SystemUtils.IS_OS_LINUX) {

    assertEquals(FileSystem.LINUX,FileSystem.getCurrent());

  }

  if (SystemUtils.IS_OS_MAC_OSX) {

    assertEquals(FileSystem.MAC_OSX,FileSystem.getCurrent());

  }

}

Location: FileSystemTest.java

Content: 

@Test public void testIsLegalName(){

  for (  final FileSystem fs : FileSystem.values()) {

    assertFalse(fs.isLegalFileName(""),fs.name());

    assertFalse(fs.isLegalFileName(null),fs.name());

    assertFalse(fs.isLegalFileName("\0"),fs.name());

    assertTrue(fs.isLegalFileName("0"),fs.name());

    for (    final String candidate : fs.getReservedFileNames()) {

      assertFalse(fs.isLegalFileName(candidate));

    }

  }

}

Location: FileSystemTest.java

Content: 

@Test public void testIsReservedFileName(){

  for (  final FileSystem fs : FileSystem.values()) {

    for (    final String candidate : fs.getReservedFileNames()) {

      assertTrue(fs.isReservedFileName(candidate));

    }

  }

}

Location: FileSystemTest.java

Content: 

@Test public void testReplacementWithNUL(){

  for (  final FileSystem fs : FileSystem.values()) {

    try {

      fs.toLegalFileName("Test",'\0');

    }

 catch (    final IllegalArgumentException iae) {

      assertTrue(iae.getMessage().startsWith("The replacement character '\\0'"),iae.getMessage());

    }

  }

}

Location: FileSystemTest.java

Content: 

@Test public void testSorted(){

  for (  final FileSystem fs : FileSystem.values()) {

    final char[] chars=fs.getIllegalFileNameChars();

    for (int i=0; i < chars.length - 1; i++) {

      assertTrue(chars[i] < chars[i + 1],fs.name());

    }

  }

}

Location: FileSystemTest.java

Content: 

@Test public void testSupportsDriveLetter(){

  assertTrue(FileSystem.WINDOWS.supportsDriveLetter());

  assertFalse(FileSystem.GENERIC.supportsDriveLetter());

  assertFalse(FileSystem.LINUX.supportsDriveLetter());

  assertFalse(FileSystem.MAC_OSX.supportsDriveLetter());

}

Location: FileSystemTest.java

Content: 

@Test public void testToLegalFileNameWindows(){

  final FileSystem fs=FileSystem.WINDOWS;

  final char replacement='-';

  for (char i=0; i < 32; i++) {

    assertEquals(replacement,fs.toLegalFileName(String.valueOf(i),replacement).charAt(0));

  }

  final char[] illegal={'<','>',':','"','/','\\','|','?','*'};

  for (char i=0; i < illegal.length; i++) {

    assertEquals(replacement,fs.toLegalFileName(String.valueOf(i),replacement).charAt(0));

  }

  for (char i='a'; i < 'z'; i++) {

    assertEquals(i,fs.toLegalFileName(String.valueOf(i),replacement).charAt(0));

  }

  for (char i='A'; i < 'Z'; i++) {

    assertEquals(i,fs.toLegalFileName(String.valueOf(i),replacement).charAt(0));

  }

  for (char i='0'; i < '9'; i++) {

    assertEquals(i,fs.toLegalFileName(String.valueOf(i),replacement).charAt(0));

  }

}

