Location: ObservableInputStreamTest.java

Content: 

@Test public void testBrokenInputStreamRead() throws IOException {

  try (final ObservableInputStream ois=new ObservableInputStream(BrokenInputStream.INSTANCE)){

    assertThrows(IOException.class,() -> ois.read());

  }

 }

Location: ObservableInputStreamTest.java

Content: 

@Test public void testBrokenInputStreamReadBuffer() throws IOException {

  try (final ObservableInputStream ois=new ObservableInputStream(BrokenInputStream.INSTANCE)){

    assertThrows(IOException.class,() -> ois.read(new byte[1]));

  }

 }

Location: ObservableInputStreamTest.java

Content: 

@Test public void testBrokenInputStreamReadSubBuffer() throws IOException {

  try (final ObservableInputStream ois=new ObservableInputStream(BrokenInputStream.INSTANCE)){

    assertThrows(IOException.class,() -> ois.read(new byte[2],0,1));

  }

 }

Location: ObservableInputStreamTest.java

Content: 

/** 

 * Tests that  {@link Observer#data(int)} is called.

 */

@Test public void testDataByteCalled_add() throws Exception {

  final byte[] buffer=MessageDigestCalculatingInputStreamTest.generateRandomByteStream(IOUtils.DEFAULT_BUFFER_SIZE);

  final DataViewObserver lko=new DataViewObserver();

  try (final ObservableInputStream ois=new ObservableInputStream(new ByteArrayInputStream(buffer))){

    assertEquals(-1,lko.lastValue);

    ois.read();

    assertEquals(-1,lko.lastValue);

    assertEquals(0,lko.getFinishedCount());

    assertEquals(0,lko.getClosedCount());

    ois.add(lko);

    for (int i=1; i < buffer.length; i++) {

      final int result=ois.read();

      assertEquals((byte)result,buffer[i]);

      assertEquals(result,lko.lastValue);

      assertEquals(0,lko.getFinishedCount());

      assertEquals(0,lko.getClosedCount());

    }

    final int result=ois.read();

    assertEquals(-1,result);

    assertEquals(1,lko.getFinishedCount());

    assertEquals(0,lko.getClosedCount());

    ois.close();

    assertEquals(1,lko.getFinishedCount());

    assertEquals(1,lko.getClosedCount());

  }

 }

Location: ObservableInputStreamTest.java

Content: 

/** 

 * Tests that  {@link Observer#data(int)} is called.

 */

@Test public void testDataByteCalled_ctor() throws Exception {

  final byte[] buffer=MessageDigestCalculatingInputStreamTest.generateRandomByteStream(IOUtils.DEFAULT_BUFFER_SIZE);

  final DataViewObserver lko=new DataViewObserver();

  try (final ObservableInputStream ois=new ObservableInputStream(new ByteArrayInputStream(buffer),lko)){

    assertEquals(-1,lko.lastValue);

    ois.read();

    assertNotEquals(-1,lko.lastValue);

    assertEquals(0,lko.getFinishedCount());

    assertEquals(0,lko.getClosedCount());

    for (int i=1; i < buffer.length; i++) {

      final int result=ois.read();

      assertEquals((byte)result,buffer[i]);

      assertEquals(result,lko.lastValue);

      assertEquals(0,lko.getFinishedCount());

      assertEquals(0,lko.getClosedCount());

    }

    final int result=ois.read();

    assertEquals(-1,result);

    assertEquals(1,lko.getFinishedCount());

    assertEquals(0,lko.getClosedCount());

    ois.close();

    assertEquals(1,lko.getFinishedCount());

    assertEquals(1,lko.getClosedCount());

  }

 }

Location: ObservableInputStreamTest.java

Content: 

/** 

 * Tests that  {@link Observer#data(byte[],int,int)} is called.

 */

@Test public void testDataBytesCalled() throws Exception {

  final byte[] buffer=MessageDigestCalculatingInputStreamTest.generateRandomByteStream(IOUtils.DEFAULT_BUFFER_SIZE);

  try (final ByteArrayInputStream bais=new ByteArrayInputStream(buffer);final ObservableInputStream ois=new ObservableInputStream(bais)){

    final DataViewObserver observer=new DataViewObserver();

    final byte[] readBuffer=new byte[23];

    assertNull(observer.buffer);

    ois.read(readBuffer);

    assertNull(observer.buffer);

    ois.add(observer);

    for (; ; ) {

      if (bais.available() >= 2048) {

        final int result=ois.read(readBuffer);

        if (result == -1) {

          ois.close();

          break;

        }

        assertEquals(readBuffer,observer.buffer);

        assertEquals(0,observer.offset);

        assertEquals(readBuffer.length,observer.length);

      }

 else {

        final int res=Math.min(11,bais.available());

        final int result=ois.read(readBuffer,1,11);

        if (result == -1) {

          ois.close();

          break;

        }

        assertEquals(readBuffer,observer.buffer);

        assertEquals(1,observer.offset);

        assertEquals(res,observer.length);

      }

    }

  }

 }

Location: ObservableInputStreamTest.java

Content: 

@Test public void testGetObservers0() throws IOException {

  try (final ObservableInputStream ois=new ObservableInputStream(NullInputStream.INSTANCE)){

    assertTrue(ois.getObservers().isEmpty());

  }

 }

Location: ObservableInputStreamTest.java

Content: 

@Test public void testGetObservers1() throws IOException {

  final DataViewObserver observer0=new DataViewObserver();

  try (final ObservableInputStream ois=new ObservableInputStream(NullInputStream.INSTANCE,observer0)){

    assertEquals(observer0,ois.getObservers().get(0));

  }

 }

Location: ObservableInputStreamTest.java

Content: 

@Test public void testGetObserversOrder() throws IOException {

  final DataViewObserver observer0=new DataViewObserver();

  final DataViewObserver observer1=new DataViewObserver();

  try (final ObservableInputStream ois=new ObservableInputStream(NullInputStream.INSTANCE,observer0,observer1)){

    assertEquals(observer0,ois.getObservers().get(0));

    assertEquals(observer1,ois.getObservers().get(1));

  }

 }

Location: ObservableInputStreamTest.java

Content: 

@Test public void testNotificationCallbacksBufferSize1() throws Exception {

  testNotificationCallbacks(1);

}

Location: ObservableInputStreamTest.java

Content: 

@Test public void testNotificationCallbacksBufferSize2() throws Exception {

  testNotificationCallbacks(2);

}

Location: ObservableInputStreamTest.java

Content: 

@Test public void testNotificationCallbacksBufferSizeDefault() throws Exception {

  testNotificationCallbacks(IOUtils.DEFAULT_BUFFER_SIZE);

}

Location: ObservableInputStreamTest.java

Content: 

private void testNotificationCallbacks(final int bufferSize) throws IOException {

  final byte[] buffer=IOUtils.byteArray();

  final LengthObserver lengthObserver=new LengthObserver();

  final MethodCountObserver methodCountObserver=new MethodCountObserver();

  try (final ObservableInputStream ois=new ObservableInputStream(new ByteArrayInputStream(buffer),lengthObserver,methodCountObserver)){

    assertEquals(IOUtils.DEFAULT_BUFFER_SIZE,IOUtils.copy(ois,NullOutputStream.INSTANCE,bufferSize));

  }

   assertEquals(IOUtils.DEFAULT_BUFFER_SIZE,lengthObserver.getTotal());

  assertEquals(1,methodCountObserver.getClosedCount());

  assertEquals(1,methodCountObserver.getFinishedCount());

  assertEquals(0,methodCountObserver.getErrorCount());

  assertEquals(0,methodCountObserver.getDataCount());

  assertEquals(buffer.length / bufferSize,methodCountObserver.getDataBufferCount());

}

