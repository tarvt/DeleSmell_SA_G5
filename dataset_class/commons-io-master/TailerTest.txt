Location: TailerTest.java

Content: 

@Test @SuppressWarnings("squid:S2699") public void testBufferBreak() throws Exception {

  final long delay=50;

  final File file=new File(temporaryFolder,"testBufferBreak.txt");

  createFile(file,0);

  writeString(file,"SBTOURIST\n");

  final TestTailerListener listener=new TestTailerListener();

  try (Tailer tailer=new Tailer(file,listener,delay,false,1)){

    final Thread thread=new Thread(tailer);

    thread.start();

    List<String> lines=listener.getLines();

    while (lines.isEmpty() || !lines.get(lines.size() - 1).equals("SBTOURIST")) {

      lines=listener.getLines();

    }

    listener.clear();

  }

 }

Location: TailerTest.java

Content: 

@Test public void testBuilderWithNonStandardTailable() throws Exception {

  final File file=new File(temporaryFolder,"tailer-create-with-delay-and-from-start-with-reopen-and-buffersize-and-charset.txt");

  createFile(file,0);

  final TestTailerListener listener=new TestTailerListener(1);

  try (final Tailer tailer=new Tailer.Builder(new NonStandardTailable(file),listener).build()){

    assertTrue(tailer.getTailable() instanceof NonStandardTailable);

    validateTailer(listener,tailer,file);

  }

 }

Location: TailerTest.java

Content: 

@Test public void testCreate() throws Exception {

  final File file=new File(temporaryFolder,"tailer-create.txt");

  createFile(file,0);

  final TestTailerListener listener=new TestTailerListener(1);

  try (final Tailer tailer=Tailer.create(file,listener)){

    validateTailer(listener,tailer,file);

  }

 }

Location: TailerTest.java

Content: 

@Test public void testCreaterWithDelayAndFromStartWithReopen() throws Exception {

  final File file=new File(temporaryFolder,"tailer-create-with-delay-and-from-start-with-reopen.txt");

  createFile(file,0);

  final TestTailerListener listener=new TestTailerListener(1);

  try (final Tailer tailer=Tailer.create(file,listener,TEST_DELAY_MILLIS,false,false)){

    validateTailer(listener,tailer,file);

  }

 }

Location: TailerTest.java

Content: 

@Test public void testCreateWithDelay() throws Exception {

  final File file=new File(temporaryFolder,"tailer-create-with-delay.txt");

  createFile(file,0);

  final TestTailerListener listener=new TestTailerListener(1);

  try (final Tailer tailer=Tailer.create(file,listener,TEST_DELAY_MILLIS)){

    validateTailer(listener,tailer,file);

  }

 }

Location: TailerTest.java

Content: 

@Test public void testCreateWithDelayAndFromStart() throws Exception {

  final File file=new File(temporaryFolder,"tailer-create-with-delay-and-from-start.txt");

  createFile(file,0);

  final TestTailerListener listener=new TestTailerListener(1);

  try (final Tailer tailer=Tailer.create(file,listener,TEST_DELAY_MILLIS,false)){

    validateTailer(listener,tailer,file);

  }

 }

Location: TailerTest.java

Content: 

@Test public void testCreateWithDelayAndFromStartWithBufferSize() throws Exception {

  final File file=new File(temporaryFolder,"tailer-create-with-delay-and-from-start-with-buffersize.txt");

  createFile(file,0);

  final TestTailerListener listener=new TestTailerListener(1);

  try (final Tailer tailer=Tailer.create(file,listener,TEST_DELAY_MILLIS,false,TEST_BUFFER_SIZE)){

    validateTailer(listener,tailer,file);

  }

 }

Location: TailerTest.java

Content: 

@Test public void testCreateWithDelayAndFromStartWithReopenAndBufferSize() throws Exception {

  final File file=new File(temporaryFolder,"tailer-create-with-delay-and-from-start-with-reopen-and-buffersize.txt");

  createFile(file,0);

  final TestTailerListener listener=new TestTailerListener(1);

  try (final Tailer tailer=Tailer.create(file,listener,TEST_DELAY_MILLIS,false,true,TEST_BUFFER_SIZE)){

    validateTailer(listener,tailer,file);

  }

 }

Location: TailerTest.java

Content: 

@Test public void testCreateWithDelayAndFromStartWithReopenAndBufferSizeAndCharset() throws Exception {

  final File file=new File(temporaryFolder,"tailer-create-with-delay-and-from-start-with-reopen-and-buffersize-and-charset.txt");

  createFile(file,0);

  final TestTailerListener listener=new TestTailerListener(1);

  try (final Tailer tailer=Tailer.create(file,StandardCharsets.UTF_8,listener,TEST_DELAY_MILLIS,false,true,TEST_BUFFER_SIZE)){

    validateTailer(listener,tailer,file);

  }

 }

Location: TailerTest.java

Content: 

@Test public void testInterrupt() throws Exception {

  final File file=new File(temporaryFolder,"nosuchfile");

  assertFalse(file.exists(),"nosuchfile should not exist");

  final TestTailerListener listener=new TestTailerListener();

  final int delay=1000;

  final int idle=50;

  try (Tailer tailer=new Tailer(file,listener,delay,false,IOUtils.DEFAULT_BUFFER_SIZE)){

    final Thread thread=new Thread(tailer);

    thread.setDaemon(true);

    thread.start();

    TestUtils.sleep(idle);

    thread.interrupt();

    TestUtils.sleep(delay + idle);

    assertNotNull(listener.exception,"Missing InterruptedException");

    assertTrue(listener.exception instanceof InterruptedException,"Unexpected Exception: " + listener.exception);

    assertEquals(1,listener.initialized,"Expected init to be called");

    assertTrue(listener.notFound > 0,"fileNotFound should be called");

    assertEquals(0,listener.rotated,"fileRotated should be not be called");

    assertEquals(0,listener.reachedEndOfFile,"end of file never reached");

  }

 }

Location: TailerTest.java

Content: 

@Test public void testIO335() throws Exception {

  final long delayMillis=50;

  final File file=new File(temporaryFolder,"tailer-testio334.txt");

  createFile(file,0);

  final TestTailerListener listener=new TestTailerListener();

  try (Tailer tailer=new Tailer(file,listener,delayMillis,false)){

    final Thread thread=new Thread(tailer);

    thread.start();

    writeString(file,"CRLF\r\n","LF\n","CR\r","CRCR\r\r","trail");

    final long testDelayMillis=delayMillis * 10;

    TestUtils.sleep(testDelayMillis);

    final List<String> lines=listener.getLines();

    assertEquals(4,lines.size(),"line count");

    assertEquals("CRLF",lines.get(0),"line 1");

    assertEquals("LF",lines.get(1),"line 2");

    assertEquals("CR",lines.get(2),"line 3");

    assertEquals("CRCR\r",lines.get(3),"line 4");

  }

 }

Location: TailerTest.java

Content: 

@Test @SuppressWarnings("squid:S2699") public void testLongFile() throws Exception {

  final long delay=50;

  final File file=new File(temporaryFolder,"testLongFile.txt");

  createFile(file,0);

  try (final Writer writer=Files.newBufferedWriter(file.toPath(),StandardOpenOption.APPEND)){

    for (int i=0; i < 100000; i++) {

      writer.write("LineLineLineLineLineLineLineLineLineLine\n");

    }

    writer.write("SBTOURIST\n");

  }

   final TestTailerListener listener=new TestTailerListener();

  try (Tailer tailer=new Tailer(file,listener,delay,false)){

    final Thread thread=new Thread(tailer);

    thread.start();

    List<String> lines=listener.getLines();

    while (lines.isEmpty() || !lines.get(lines.size() - 1).equals("SBTOURIST")) {

      lines=listener.getLines();

    }

    listener.clear();

  }

 }

Location: TailerTest.java

Content: 

@Test public void testMultiByteBreak() throws Exception {

  final long delay=50;

  final File origin=TestResources.getFile("test-file-utf8.bin");

  final File file=new File(temporaryFolder,"testMultiByteBreak.txt");

  createFile(file,0);

  final TestTailerListener listener=new TestTailerListener();

  final String osname=System.getProperty("os.name");

  final boolean isWindows=osname.startsWith("Windows");

  final Charset charsetUTF8=StandardCharsets.UTF_8;

  try (Tailer tailer=new Tailer(file,charsetUTF8,listener,delay,false,isWindows,IOUtils.DEFAULT_BUFFER_SIZE)){

    final Thread thread=new Thread(tailer);

    thread.start();

    try (Writer out=new OutputStreamWriter(Files.newOutputStream(file.toPath()),charsetUTF8);BufferedReader reader=new BufferedReader(new InputStreamReader(Files.newInputStream(origin.toPath()),charsetUTF8))){

      final List<String> lines=new ArrayList<>();

      String line;

      while ((line=reader.readLine()) != null) {

        out.write(line);

        out.write("\n");

        lines.add(line);

      }

      out.close();

      final long testDelayMillis=delay * 10;

      TestUtils.sleep(testDelayMillis);

      final List<String> tailerlines=listener.getLines();

      assertEquals(lines.size(),tailerlines.size(),"line count");

      for (int i=0, len=lines.size(); i < len; i++) {

        final String expected=lines.get(i);

        final String actual=tailerlines.get(i);

        if (!expected.equals(actual)) {

          fail("Line: " + i + "\nExp: ("+ expected.length()+ ") "+ expected+ "\nAct: ("+ actual.length()+ ") "+ actual);

        }

      }

    }

   }

 }

Location: TailerTest.java

Content: 

@Test public void testSimpleConstructor() throws Exception {

  final File file=new File(temporaryFolder,"tailer-simple-constructor.txt");

  createFile(file,0);

  final TestTailerListener listener=new TestTailerListener(1);

  try (final Tailer tailer=new Tailer(file,listener)){

    final Thread thread=new Thread(tailer);

    thread.start();

    validateTailer(listener,tailer,file);

  }

 }

Location: TailerTest.java

Content: 

@Test public void testSimpleConstructorWithDelay() throws Exception {

  final File file=new File(temporaryFolder,"tailer-simple-constructor-with-delay.txt");

  createFile(file,0);

  final TestTailerListener listener=new TestTailerListener(1);

  try (final Tailer tailer=new Tailer(file,listener,TEST_DELAY_MILLIS)){

    final Thread thread=new Thread(tailer);

    thread.start();

    validateTailer(listener,tailer,file);

  }

 }

Location: TailerTest.java

Content: 

@Test public void testSimpleConstructorWithDelayAndFromStart() throws Exception {

  final File file=new File(temporaryFolder,"tailer-simple-constructor-with-delay-and-from-start.txt");

  createFile(file,0);

  final TestTailerListener listener=new TestTailerListener(1);

  try (final Tailer tailer=new Tailer(file,listener,TEST_DELAY_MILLIS,false)){

    final Thread thread=new Thread(tailer);

    thread.start();

    validateTailer(listener,tailer,file);

  }

 }

Location: TailerTest.java

Content: 

@Test public void testSimpleConstructorWithDelayAndFromStartWithBufferSize() throws Exception {

  final File file=new File(temporaryFolder,"tailer-simple-constructor-with-delay-and-from-start-with-buffersize.txt");

  createFile(file,0);

  final TestTailerListener listener=new TestTailerListener(1);

  try (final Tailer tailer=new Tailer(file,listener,TEST_DELAY_MILLIS,false,TEST_BUFFER_SIZE)){

    final Thread thread=new Thread(tailer);

    thread.start();

    validateTailer(listener,tailer,file);

  }

 }

Location: TailerTest.java

Content: 

@Test public void testSimpleConstructorWithDelayAndFromStartWithReopen() throws Exception {

  final File file=new File(temporaryFolder,"tailer-simple-constructor-with-delay-and-from-start-with-reopen.txt");

  createFile(file,0);

  final TestTailerListener listener=new TestTailerListener(1);

  try (final Tailer tailer=new Tailer(file,listener,TEST_DELAY_MILLIS,false,false)){

    final Thread thread=new Thread(tailer);

    thread.start();

    validateTailer(listener,tailer,file);

  }

 }

Location: TailerTest.java

Content: 

@Test public void testSimpleConstructorWithDelayAndFromStartWithReopenAndBufferSize() throws Exception {

  final File file=new File(temporaryFolder,"tailer-simple-constructor-with-delay-and-from-start-with-reopen-and-buffersize.txt");

  createFile(file,0);

  final TestTailerListener listener=new TestTailerListener(1);

  try (final Tailer tailer=new Tailer(file,listener,TEST_DELAY_MILLIS,false,true,TEST_BUFFER_SIZE)){

    final Thread thread=new Thread(tailer);

    thread.start();

    validateTailer(listener,tailer,file);

  }

 }

Location: TailerTest.java

Content: 

@Test public void testSimpleConstructorWithDelayAndFromStartWithReopenAndBufferSizeAndCharset() throws Exception {

  final File file=new File(temporaryFolder,"tailer-simple-constructor-with-delay-and-from-start-with-reopen-and-buffersize-and-charset.txt");

  createFile(file,0);

  final TestTailerListener listener=new TestTailerListener(1);

  try (final Tailer tailer=new Tailer(file,StandardCharsets.UTF_8,listener,TEST_DELAY_MILLIS,false,true,TEST_BUFFER_SIZE)){

    final Thread thread=new Thread(tailer);

    thread.start();

    validateTailer(listener,tailer,file);

  }

 }

Location: TailerTest.java

Content: 

@Test public void testStopWithNoFile() throws Exception {

  final File file=new File(temporaryFolder,"nosuchfile");

  assertFalse(file.exists(),"nosuchfile should not exist");

  final TestTailerListener listener=new TestTailerListener();

  final int delay=100;

  final int idle=50;

  try (Tailer tailer=Tailer.create(file,listener,delay,false)){

    TestUtils.sleep(idle);

  }

   TestUtils.sleep(delay + idle);

  assertNull(listener.exception,"Should not generate Exception");

  assertEquals(1,listener.initialized,"Expected init to be called");

  assertTrue(listener.notFound > 0,"fileNotFound should be called");

  assertEquals(0,listener.rotated,"fileRotated should be not be called");

  assertEquals(0,listener.reachedEndOfFile,"end of file never reached");

}

Location: TailerTest.java

Content: 

@Test public void testStopWithNoFileUsingExecutor() throws Exception {

  final File file=new File(temporaryFolder,"nosuchfile");

  assertFalse(file.exists(),"nosuchfile should not exist");

  final TestTailerListener listener=new TestTailerListener();

  final int delay=100;

  final int idle=50;

  try (Tailer tailer=new Tailer(file,listener,delay,false)){

    final Executor exec=new ScheduledThreadPoolExecutor(1);

    exec.execute(tailer);

    TestUtils.sleep(idle);

  }

   TestUtils.sleep(delay + idle);

  assertNull(listener.exception,"Should not generate Exception");

  assertEquals(1,listener.initialized,"Expected init to be called");

  assertTrue(listener.notFound > 0,"fileNotFound should be called");

  assertEquals(0,listener.rotated,"fileRotated should be not be called");

  assertEquals(0,listener.reachedEndOfFile,"end of file never reached");

}

Location: TailerTest.java

Content: 

@Test public void testTailer() throws Exception {

  final long delayMillis=50;

  final File file=new File(temporaryFolder,"tailer1-test.txt");

  createFile(file,0);

  final TestTailerListener listener=new TestTailerListener();

  final String osname=System.getProperty("os.name");

  final boolean isWindows=osname.startsWith("Windows");

  try (Tailer tailer=new Tailer(file,listener,delayMillis,false,isWindows)){

    final Thread thread=new Thread(tailer);

    thread.start();

    write(file,"Line one","Line two");

    final long testDelayMillis=delayMillis * 10;

    TestUtils.sleep(testDelayMillis);

    List<String> lines=listener.getLines();

    assertEquals(2,lines.size(),"1 line count");

    assertEquals("Line one",lines.get(0),"1 line 1");

    assertEquals("Line two",lines.get(1),"1 line 2");

    listener.clear();

    write(file,"Line three");

    TestUtils.sleep(testDelayMillis);

    lines=listener.getLines();

    assertEquals(1,lines.size(),"2 line count");

    assertEquals("Line three",lines.get(0),"2 line 3");

    listener.clear();

    lines=FileUtils.readLines(file,"UTF-8");

    assertEquals(3,lines.size(),"3 line count");

    assertEquals("Line one",lines.get(0),"3 line 1");

    assertEquals("Line two",lines.get(1),"3 line 2");

    assertEquals("Line three",lines.get(2),"3 line 3");

    file.delete();

    assertFalse(file.exists(),"File should not exist");

    createFile(file,0);

    assertTrue(file.exists(),"File should now exist");

    TestUtils.sleep(testDelayMillis);

    write(file,"Line four");

    TestUtils.sleep(testDelayMillis);

    lines=listener.getLines();

    assertEquals(1,lines.size(),"4 line count");

    assertEquals("Line four",lines.get(0),"4 line 3");

    listener.clear();

    thread.interrupt();

    TestUtils.sleep(testDelayMillis * 4);

    write(file,"Line five");

    assertEquals(0,listener.getLines().size(),"4 line count");

    assertNotNull(listener.exception,"Missing InterruptedException");

    assertTrue(listener.exception instanceof InterruptedException,"Unexpected Exception: " + listener.exception);

    assertEquals(1,listener.initialized,"Expected init to be called");

    assertEquals(1,listener.rotated,"fileRotated should be be called");

  }

 }

Location: TailerTest.java

Content: 

@Test public void testTailerEndOfFileReached() throws Exception {

  final long delayMillis=50;

  final long testDelayMillis=delayMillis * 10;

  final File file=new File(temporaryFolder,"tailer-eof-test.txt");

  createFile(file,0);

  final TestTailerListener listener=new TestTailerListener();

  final String osname=System.getProperty("os.name");

  final boolean isWindows=osname.startsWith("Windows");

  try (Tailer tailer=new Tailer(file,listener,delayMillis,false,isWindows)){

    final Thread thread=new Thread(tailer);

    thread.start();

    write(file,"line1","line2","line3");

    TestUtils.sleep(testDelayMillis);

    write(file,"line4","line5","line6");

    TestUtils.sleep(testDelayMillis);

    write(file,"line7","line8","line9");

    TestUtils.sleep(testDelayMillis);

    assertTrue(listener.reachedEndOfFile >= 3,"end of file reached at least 3 times");

  }

 }

Location: TailerTest.java

Content: 

@Test public void testTailerEof() throws Exception {

  final long delayMillis=100;

  final File file=new File(temporaryFolder,"tailer2-test.txt");

  createFile(file,0);

  final TestTailerListener listener=new TestTailerListener();

  try (Tailer tailer=new Tailer(file,listener,delayMillis,false)){

    final Thread thread=new Thread(tailer);

    thread.start();

    writeString(file,"Line");

    TestUtils.sleep(delayMillis * 2);

    List<String> lines=listener.getLines();

    assertEquals(0,lines.size(),"1 line count");

    writeString(file," one\n");

    TestUtils.sleep(delayMillis * 4);

    lines=listener.getLines();

    assertEquals(1,lines.size(),"1 line count");

    assertEquals("Line one",lines.get(0),"1 line 1");

    listener.clear();

  }

 }

Location: TailerTest.java

Content: 

private void validateTailer(final TestTailerListener listener,final Tailer tailer,final File file) throws Exception {

  write(file,"foo");

  final int timeout=30;

  final TimeUnit timeoutUnit=TimeUnit.SECONDS;

  assertTrue(listener.awaitExpectedLines(timeout,timeoutUnit),() -> String.format("await timed out after %s %s",timeout,timeoutUnit));

  assertEquals(listener.getLines(),Lists.newArrayList("foo"),"lines");

}

Location: TailerTest.java

Content: 

/** 

 * Appends strings to a file 

 */

private void writeString(final File file,final String... strings) throws Exception {

  try (Writer writer=Files.newBufferedWriter(file.toPath(),StandardOpenOption.APPEND)){

    for (    final String string : strings) {

      writer.write(string);

    }

  }

 }

Location: TailerTest.java

Content: 

/** 

 * Appends lines to a file 

 */

private void write(final File file,final String... lines) throws Exception {

  try (Writer writer=Files.newBufferedWriter(file.toPath(),StandardOpenOption.APPEND)){

    for (    final String line : lines) {

      writer.write(line + "\n");

    }

  }

 }

