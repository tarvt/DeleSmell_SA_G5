Location: CircularInputStreamTest.java

Content: 

private void assertStreamOutput(final byte[] toCycle,final byte[] expected) throws IOException {

  final byte[] actual=new byte[expected.length];

  try (InputStream infStream=createInputStream(toCycle,-1)){

    final int actualReadBytes=infStream.read(actual);

    assertArrayEquals(expected,actual);

    assertEquals(expected.length,actualReadBytes);

  }

 }

Location: CircularInputStreamTest.java

Content: 

private InputStream createInputStream(final byte[] repeatContent,final long targetByteCount){

  return new CircularInputStream(repeatContent,targetByteCount);

}

Location: CircularInputStreamTest.java

Content: 

@Test public void testContainsEofInputSize0(){

  assertThrows(IllegalArgumentException.class,() -> createInputStream(new byte[]{-1},0));

}

Location: CircularInputStreamTest.java

Content: 

@Test public void testCount0() throws IOException {

  try (InputStream in=createInputStream(new byte[]{1,2},0)){

    assertEquals(IOUtils.EOF,in.read());

  }

 }

Location: CircularInputStreamTest.java

Content: 

@Test public void testCount0InputSize0(){

  assertThrows(IllegalArgumentException.class,() -> createInputStream(new byte[]{},0));

}

Location: CircularInputStreamTest.java

Content: 

@Test public void testCount0InputSize1() throws IOException {

  try (InputStream in=createInputStream(new byte[]{1},0)){

    assertEquals(IOUtils.EOF,in.read());

  }

 }

Location: CircularInputStreamTest.java

Content: 

@Test public void testCount1InputSize1() throws IOException {

  try (InputStream in=createInputStream(new byte[]{1},1)){

    assertEquals(1,in.read());

    assertEquals(IOUtils.EOF,in.read());

  }

 }

Location: CircularInputStreamTest.java

Content: 

@Test public void testCycleBytes() throws IOException {

  final byte[] input={1,2};

  final byte[] expected={1,2,1,2,1};

  assertStreamOutput(input,expected);

}

Location: CircularInputStreamTest.java

Content: 

@Test public void testNullInputSize0(){

  assertThrows(NullPointerException.class,() -> createInputStream(null,0));

}

Location: CircularInputStreamTest.java

Content: 

@Test public void testWholeRangeOfBytes() throws IOException {

  final int size=Byte.MAX_VALUE - Byte.MIN_VALUE + 1;

  final byte[] contentToCycle=new byte[size];

  byte value=Byte.MIN_VALUE;

  for (int i=0; i < contentToCycle.length; i++) {

    contentToCycle[i]=value == IOUtils.EOF ? 0 : value;

    value++;

  }

  final byte[] expectedOutput=Arrays.copyOf(contentToCycle,size);

  assertStreamOutput(contentToCycle,expectedOutput);

}

