Location: TaggedIOException.java

Content: 

/** 

 * Returns the wrapped exception. The only difference to the overridden {@link Throwable#getCause()} method is the narrower return type.

 * @return wrapped exception

 */

@Override public synchronized IOException getCause(){

  return (IOException)super.getCause();

}

Location: TaggedIOException.java

Content: 

/** 

 * Returns the serializable tag object.

 * @return tag object

 */

public Serializable getTag(){

  return tag;

}

Location: TaggedIOException.java

Content: 

/** 

 * Checks whether the given throwable is tagged with the given tag. <p> This check can only succeed if the throwable is a {@link TaggedIOException} and the tag is {@link Serializable}, but the argument types are intentionally more generic to make it easier to use this method without type casts. <p> A typical use for this method is in a  {@code catch} block todetermine how a caught exception should be handled: <pre> Serializable tag = ...; try { ...; } catch (Throwable t) { if (TaggedIOException.isTaggedWith(t, tag)) { // special processing for tagged exception } else { // handling of other kinds of exceptions } } </pre>

 * @param throwable The Throwable object to check

 * @param tag tag object

 * @return {@code true} if the throwable has the specified tag,otherwise  {@code false}

 */

public static boolean isTaggedWith(final Throwable throwable,final Object tag){

  return tag != null && throwable instanceof TaggedIOException && tag.equals(((TaggedIOException)throwable).tag);

}

Location: TaggedIOException.java

Content: 

/** 

 * Creates a tagged wrapper for the given exception.

 * @param original the exception to be tagged

 * @param tag tag of this exception

 */

public TaggedIOException(final IOException original,final Serializable tag){

  super(original.getMessage(),original);

  this.tag=tag;

}

Location: TaggedIOException.java

Content: 

/** 

 * Throws the original  {@link IOException} if the given throwable isa  {@link TaggedIOException} decorator the given tag. Does nothingif the given throwable is of a different type or if it is tagged with some other tag. <p> This method is typically used in a  {@code catch} block toselectively rethrow tagged exceptions. <pre> Serializable tag = ...; try { ...; } catch (Throwable t) { TaggedIOException.throwCauseIfTagged(t, tag); // handle other kinds of exceptions } </pre>

 * @param throwable an exception

 * @param tag tag object

 * @throws IOException original exception from the tagged decorator, if any

 */

public static void throwCauseIfTaggedWith(final Throwable throwable,final Object tag) throws IOException {

  if (isTaggedWith(throwable,tag)) {

    throw ((TaggedIOException)throwable).getCause();

  }

}

