Location: CleaningPathVisitorTest.java

Content: 

private void applyCleanEmptyDirectory(final CleaningPathVisitor visitor) throws IOException {

  Files.walkFileTree(tempDir,visitor);

  assertCounts(1,0,0,visitor);

}

Location: CleaningPathVisitorTest.java

Content: 

/** 

 * Tests an empty folder.

 */

@ParameterizedTest @MethodSource("pathCounters") public void testCleanEmptyDirectoryNullCtorArg(final PathCounters pathCounters) throws IOException {

  applyCleanEmptyDirectory(new CleaningPathVisitor(pathCounters,(String[])null));

}

Location: CleaningPathVisitorTest.java

Content: 

/** 

 * Tests an empty folder.

 */

@ParameterizedTest @MethodSource("cleaningPathVisitors") public void testCleanEmptyDirectory(final CleaningPathVisitor visitor) throws IOException {

  applyCleanEmptyDirectory(visitor);

}

Location: CleaningPathVisitorTest.java

Content: 

/** 

 * Tests a directory with one file of size 0.

 */

@ParameterizedTest @MethodSource("cleaningPathVisitors") public void testCleanFolders1FileSize0(final CleaningPathVisitor visitor) throws IOException {

  PathUtils.copyDirectory(Paths.get("src/test/resources/org/apache/commons/io/dirs-1-file-size-0"),tempDir);

  assertCounts(1,1,0,PathUtils.visitFileTree(visitor,tempDir));

}

Location: CleaningPathVisitorTest.java

Content: 

/** 

 * Tests a directory with one file of size 1 but skip that file.

 */

@ParameterizedTest @MethodSource("pathCounters") public void testCleanFolders1FileSize1Skip(final PathCounters pathCounters) throws IOException {

  PathUtils.copyDirectory(Paths.get("src/test/resources/org/apache/commons/io/dirs-1-file-size-1"),tempDir);

  final String skipFileName="file-size-1.bin";

  final CountingPathVisitor visitor=new CleaningPathVisitor(pathCounters,skipFileName);

  assertCounts(1,1,1,PathUtils.visitFileTree(visitor,tempDir));

  final Path skippedFile=tempDir.resolve(skipFileName);

  Assertions.assertTrue(Files.exists(skippedFile));

  Files.delete(skippedFile);

}

Location: CleaningPathVisitorTest.java

Content: 

/** 

 * Tests a directory with one file of size 1.

 */

@ParameterizedTest @MethodSource("cleaningPathVisitors") public void testCleanFolders1FileSize1(final CleaningPathVisitor visitor) throws IOException {

  PathUtils.copyDirectory(Paths.get("src/test/resources/org/apache/commons/io/dirs-1-file-size-1"),tempDir);

  assertCounts(1,1,1,PathUtils.visitFileTree(visitor,tempDir));

}

Location: CleaningPathVisitorTest.java

Content: 

/** 

 * Tests a directory with two subdirectories, each containing one file of size 1.

 */

@ParameterizedTest @MethodSource("cleaningPathVisitors") public void testCleanFolders2FileSize2(final CleaningPathVisitor visitor) throws IOException {

  PathUtils.copyDirectory(Paths.get("src/test/resources/org/apache/commons/io/dirs-2-file-size-2"),tempDir);

  assertCounts(3,2,2,PathUtils.visitFileTree(visitor,tempDir));

}

