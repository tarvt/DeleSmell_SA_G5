Location: FileUtilsDirectoryContainsTest.java

Content: 

@Test public void testCanonicalPath() throws IOException {

  assertTrue(FileUtils.directoryContains(directory1,file1ByRelativeDirectory2));

  assertTrue(FileUtils.directoryContains(directory2,file2ByRelativeDirectory1));

  assertFalse(FileUtils.directoryContains(directory1,file2ByRelativeDirectory1));

  assertFalse(FileUtils.directoryContains(directory2,file1ByRelativeDirectory2));

}

Location: FileUtilsDirectoryContainsTest.java

Content: 

@Test public void testDirectoryContainsDirectory() throws IOException {

  assertTrue(FileUtils.directoryContains(top,directory1));

  assertTrue(FileUtils.directoryContains(top,directory2));

  assertTrue(FileUtils.directoryContains(top,directory3));

  assertTrue(FileUtils.directoryContains(directory2,directory3));

}

Location: FileUtilsDirectoryContainsTest.java

Content: 

@Test public void testDirectoryContainsFile() throws IOException {

  assertTrue(FileUtils.directoryContains(directory1,file1));

  assertTrue(FileUtils.directoryContains(directory2,file2));

}

Location: FileUtilsDirectoryContainsTest.java

Content: 

@Test public void testDirectoryDoesNotContainFile() throws IOException {

  assertFalse(FileUtils.directoryContains(directory1,file2));

  assertFalse(FileUtils.directoryContains(directory2,file1));

  assertFalse(FileUtils.directoryContains(directory1,file3));

  assertFalse(FileUtils.directoryContains(directory2,file3));

}

Location: FileUtilsDirectoryContainsTest.java

Content: 

@Test public void testDirectoryDoesNotContainsDirectory() throws IOException {

  assertFalse(FileUtils.directoryContains(directory1,top));

  assertFalse(FileUtils.directoryContains(directory2,top));

  assertFalse(FileUtils.directoryContains(directory3,top));

  assertFalse(FileUtils.directoryContains(directory3,directory2));

}

Location: FileUtilsDirectoryContainsTest.java

Content: 

@Test public void testDirectoryDoesNotExist() throws IOException {

  final File dir=new File("DOESNOTEXIST");

  assertFalse(dir.exists());

  try {

    assertFalse(FileUtils.directoryContains(dir,file1));

    fail("Expected " + IllegalArgumentException.class.getName());

  }

 catch (  final IllegalArgumentException e) {

  }

}

Location: FileUtilsDirectoryContainsTest.java

Content: 

@Test public void testFileDoesNotExist() throws IOException {

  assertFalse(FileUtils.directoryContains(top,null));

  final File file=new File("DOESNOTEXIST");

  assertFalse(file.exists());

  assertFalse(FileUtils.directoryContains(top,file));

}

Location: FileUtilsDirectoryContainsTest.java

Content: 

/** 

 * Test to demonstrate a file which does not exist returns false

 * @throws IOException If an I/O error occurs

 */

@Test public void testFileDoesNotExistBug() throws IOException {

  final File file=new File(top,"DOESNOTEXIST");

  assertTrue(top.exists(),"Check directory exists");

  assertFalse(file.exists(),"Check file does not exist");

  assertFalse(FileUtils.directoryContains(top,file),"Directory does not contain unrealized file");

}

Location: FileUtilsDirectoryContainsTest.java

Content: 

@Test public void testFileHavingSamePrefixBug() throws IOException {

  final File foo=new File(top,"foo");

  final File foobar=new File(top,"foobar");

  final File fooTxt=new File(top,"foo.txt");

  foo.mkdir();

  foobar.mkdir();

  FileUtils.touch(fooTxt);

  assertFalse(FileUtils.directoryContains(foo,foobar));

  assertFalse(FileUtils.directoryContains(foo,fooTxt));

}

Location: FileUtilsDirectoryContainsTest.java

Content: 

@Test public void testIO466() throws IOException {

  final File fooFile=new File(directory1.getParent(),"directory1.txt");

  assertFalse(FileUtils.directoryContains(directory1,fooFile));

}

Location: FileUtilsDirectoryContainsTest.java

Content: 

@Test public void testSameFile() throws IOException {

  try {

    assertTrue(FileUtils.directoryContains(file1,file1));

    fail("Expected " + IllegalArgumentException.class.getName());

  }

 catch (  final IllegalArgumentException e) {

  }

}

Location: FileUtilsDirectoryContainsTest.java

Content: 

@Test public void testUnrealizedContainment() throws IOException {

  final File dir=new File("DOESNOTEXIST");

  final File file=new File(dir,"DOESNOTEXIST2");

  assertFalse(dir.exists());

  assertFalse(file.exists());

  try {

    assertTrue(FileUtils.directoryContains(dir,file));

  }

 catch (  final IllegalArgumentException e) {

  }

}

