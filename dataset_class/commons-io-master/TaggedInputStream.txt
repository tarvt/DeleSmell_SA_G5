Location: TaggedInputStream.java

Content: 

/** 

 * Tests if the given exception was caused by this stream.

 * @param exception an exception

 * @return {@code true} if the exception was thrown by this stream,{@code false} otherwise

 */

public boolean isCauseOf(final Throwable exception){

  return TaggedIOException.isTaggedWith(exception,tag);

}

Location: TaggedInputStream.java

Content: 

/** 

 * Creates a tagging decorator for the given input stream.

 * @param proxy input stream to be decorated

 */

public TaggedInputStream(final InputStream proxy){

  super(proxy);

}

Location: TaggedInputStream.java

Content: 

/** 

 * Re-throws the original exception thrown by this stream. This method first checks whether the given exception is a  {@link TaggedIOException}wrapper created by this decorator, and then unwraps and throws the original wrapped exception. Returns normally if the exception was not thrown by this stream.

 * @param throwable an exception

 * @throws IOException original exception, if any, thrown by this stream

 */

public void throwIfCauseOf(final Throwable throwable) throws IOException {

  TaggedIOException.throwCauseIfTaggedWith(throwable,tag);

}

