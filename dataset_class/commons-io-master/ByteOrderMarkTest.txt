Location: ByteOrderMarkTest.java

Content: 

/** 

 * Test  {@link ByteOrderMark#getCharsetName()} 

 */

@Test public void charsetName(){

  assertEquals("test1",TEST_BOM_1.getCharsetName(),"test1 name");

  assertEquals("test2",TEST_BOM_2.getCharsetName(),"test2 name");

  assertEquals("test3",TEST_BOM_3.getCharsetName(),"test3 name");

}

Location: ByteOrderMarkTest.java

Content: 

/** 

 * Tests that  {@link ByteOrderMark#getCharsetName()} can be loaded as a {@link java.nio.charset.Charset} as advertised. 

 */

@Test public void constantCharsetNames(){

  assertNotNull(Charset.forName(ByteOrderMark.UTF_8.getCharsetName()));

  assertNotNull(Charset.forName(ByteOrderMark.UTF_16BE.getCharsetName()));

  assertNotNull(Charset.forName(ByteOrderMark.UTF_16LE.getCharsetName()));

  assertNotNull(Charset.forName(ByteOrderMark.UTF_32BE.getCharsetName()));

  assertNotNull(Charset.forName(ByteOrderMark.UTF_32LE.getCharsetName()));

}

Location: ByteOrderMarkTest.java

Content: 

/** 

 * Test Errors 

 */

@Test public void errors(){

  try {

    new ByteOrderMark(null,1,2,3);

    fail("null charset name, expected IllegalArgumentException");

  }

 catch (  final IllegalArgumentException e) {

  }

  try {

    new ByteOrderMark("",1,2,3);

    fail("no charset name, expected IllegalArgumentException");

  }

 catch (  final IllegalArgumentException e) {

  }

  try {

    new ByteOrderMark("a",(int[])null);

    fail("null bytes, expected IllegalArgumentException");

  }

 catch (  final IllegalArgumentException e) {

  }

  try {

    new ByteOrderMark("b");

    fail("empty bytes, expected IllegalArgumentException");

  }

 catch (  final IllegalArgumentException e) {

  }

}

Location: ByteOrderMarkTest.java

Content: 

/** 

 * Test  {@link ByteOrderMark#get(int)} 

 */

@Test public void get(){

  assertEquals(1,TEST_BOM_1.get(0),"test1 get(0)");

  assertEquals(1,TEST_BOM_2.get(0),"test2 get(0)");

  assertEquals(2,TEST_BOM_2.get(1),"test2 get(1)");

  assertEquals(1,TEST_BOM_3.get(0),"test3 get(0)");

  assertEquals(2,TEST_BOM_3.get(1),"test3 get(1)");

  assertEquals(3,TEST_BOM_3.get(2),"test3 get(2)");

}

Location: ByteOrderMarkTest.java

Content: 

/** 

 * Test  {@link ByteOrderMark#getBytes()} 

 */

@Test public void getBytes(){

  assertArrayEquals(TEST_BOM_1.getBytes(),new byte[]{(byte)1},"test1 bytes");

  TEST_BOM_1.getBytes()[0]=2;

  assertArrayEquals(TEST_BOM_1.getBytes(),new byte[]{(byte)1},"test1 bytes");

  assertArrayEquals(TEST_BOM_2.getBytes(),new byte[]{(byte)1,(byte)2},"test1 bytes");

  assertArrayEquals(TEST_BOM_3.getBytes(),new byte[]{(byte)1,(byte)2,(byte)3},"test1 bytes");

}

Location: ByteOrderMarkTest.java

Content: 

/** 

 * Test  {@link ByteOrderMark#length()} 

 */

@Test public void testLength(){

  assertEquals(1,TEST_BOM_1.length(),"test1 length");

  assertEquals(2,TEST_BOM_2.length(),"test2 length");

  assertEquals(3,TEST_BOM_3.length(),"test3 length");

}

