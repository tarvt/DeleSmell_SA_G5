Location: NullInputStream.java

Content: 

/** 

 * Create an  {@link InputStream} that emulates a size 0 streamwhich supports marking and does not throw EOFException.

 * @since 2.7

 */

public NullInputStream(){

  this(0,true,false);

}

Location: NullInputStream.java

Content: 

/** 

 * Create an  {@link InputStream} that emulates a specified sizewhich supports marking and does not throw EOFException.

 * @param size The size of the input stream to emulate.

 */

public NullInputStream(final long size){

  this(size,true,false);

}

Location: NullInputStream.java

Content: 

/** 

 * Create an  {@link InputStream} that emulates a specifiedsize with option settings.

 * @param size The size of the input stream to emulate.

 * @param markSupported Whether this instance will supportthe  {@code mark()} functionality.

 * @param throwEofException Whether this implementationwill throw an  {@link EOFException} or return -1 when theend of file is reached.

 */

public NullInputStream(final long size,final boolean markSupported,final boolean throwEofException){

  this.size=size;

  this.markSupported=markSupported;

  this.throwEofException=throwEofException;

}

Location: NullInputStream.java

Content: 

/** 

 * Return a byte value for the   {@code read()} method.<p> This implementation returns zero.

 * @return This implementation always returns zero.

 */

protected int processByte(){

  return 0;

}

Location: NullInputStream.java

Content: 

/** 

 * Process the bytes for the  {@code read(byte[], offset, length)}method. <p> This implementation leaves the byte array unchanged.

 * @param bytes The byte array

 * @param offset The offset to start at.

 * @param length The number of bytes.

 */

protected void processBytes(final byte[] bytes,final int offset,final int length){

}

