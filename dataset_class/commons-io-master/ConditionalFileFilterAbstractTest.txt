Location: ConditionalFileFilterAbstractTest.java

Content: 

@Test public void testAdd(){

  final List<TesterTrueFileFilter> filters=new ArrayList<>();

  final ConditionalFileFilter fileFilter=this.getConditionalFileFilter();

  filters.add(new TesterTrueFileFilter());

  filters.add(new TesterTrueFileFilter());

  filters.add(new TesterTrueFileFilter());

  filters.add(new TesterTrueFileFilter());

  for (int i=0; i < filters.size(); i++) {

    assertEquals(i,fileFilter.getFileFilters().size(),"file filters count: ");

    fileFilter.addFileFilter(filters.get(i));

    assertEquals(i + 1,fileFilter.getFileFilters().size(),"file filters count: ");

  }

  for (  final IOFileFilter filter : fileFilter.getFileFilters()) {

    assertTrue(filters.contains(filter),"found file filter");

  }

  assertEquals(filters.size(),fileFilter.getFileFilters().size(),"file filters count");

}

Location: ConditionalFileFilterAbstractTest.java

Content: 

@Test public void testFilterBuiltUsingAdd(){

  final List<List<IOFileFilter>> testFilters=this.getTestFilters();

  final List<boolean[]> testTrueResults=this.getTrueResults();

  final List<boolean[]> testFalseResults=this.getFalseResults();

  final List<Boolean> testFileResults=this.getFileResults();

  final List<Boolean> testFilenameResults=this.getFilenameResults();

  for (int i=1; i < testFilters.size(); i++) {

    final List<IOFileFilter> filters=testFilters.get(i);

    final boolean[] trueResults=testTrueResults.get(i);

    final boolean[] falseResults=testFalseResults.get(i);

    final boolean fileResults=testFileResults.get(i);

    final boolean filenameResults=testFilenameResults.get(i);

    final IOFileFilter filter=this.buildFilterUsingAdd(filters);

    resetTrueFilters(this.trueFilters);

    resetFalseFilters(this.falseFilters);

    assertFileFiltering(i,filter,this.file,fileResults);

    assertTrueFiltersInvoked(i,trueFilters,trueResults);

    assertFalseFiltersInvoked(i,falseFilters,falseResults);

    resetTrueFilters(this.trueFilters);

    resetFalseFilters(this.falseFilters);

    assertFilenameFiltering(i,filter,this.file,filenameResults);

    assertTrueFiltersInvoked(i,trueFilters,trueResults);

    assertFalseFiltersInvoked(i,falseFilters,falseResults);

  }

}

Location: ConditionalFileFilterAbstractTest.java

Content: 

@Test public void testFilterBuiltUsingConstructor(){

  final List<List<IOFileFilter>> testFilters=this.getTestFilters();

  final List<boolean[]> testTrueResults=this.getTrueResults();

  final List<boolean[]> testFalseResults=this.getFalseResults();

  final List<Boolean> testFileResults=this.getFileResults();

  final List<Boolean> testFilenameResults=this.getFilenameResults();

  for (int i=1; i < testFilters.size(); i++) {

    final List<IOFileFilter> filters=testFilters.get(i);

    final boolean[] trueResults=testTrueResults.get(i);

    final boolean[] falseResults=testFalseResults.get(i);

    final boolean fileResults=testFileResults.get(i);

    final boolean filenameResults=testFilenameResults.get(i);

    final IOFileFilter filter=this.buildFilterUsingConstructor(filters);

    resetTrueFilters(this.trueFilters);

    resetFalseFilters(this.falseFilters);

    assertFileFiltering(i,filter,this.file,fileResults);

    assertTrueFiltersInvoked(i,trueFilters,trueResults);

    assertFalseFiltersInvoked(i,falseFilters,falseResults);

    resetTrueFilters(this.trueFilters);

    resetFalseFilters(this.falseFilters);

    assertFilenameFiltering(i,filter,this.file,filenameResults);

    assertTrueFiltersInvoked(i,trueFilters,trueResults);

    assertFalseFiltersInvoked(i,falseFilters,falseResults);

  }

}

Location: ConditionalFileFilterAbstractTest.java

Content: 

@Test public void testNoFilters(){

  final ConditionalFileFilter fileFilter=this.getConditionalFileFilter();

  final File file=new File(this.workingPath,TEST_FILE_NAME_PREFIX + 1 + TEST_FILE_TYPE);

  assertFileFiltering(1,(IOFileFilter)fileFilter,file,false);

  assertFilenameFiltering(1,(IOFileFilter)fileFilter,file,false);

}

Location: ConditionalFileFilterAbstractTest.java

Content: 

@Test public void testRemove(){

  final List<TesterTrueFileFilter> filters=new ArrayList<>();

  final ConditionalFileFilter fileFilter=this.getConditionalFileFilter();

  filters.add(new TesterTrueFileFilter());

  filters.add(new TesterTrueFileFilter());

  filters.add(new TesterTrueFileFilter());

  filters.add(new TesterTrueFileFilter());

  for (  final TesterTrueFileFilter filter : filters) {

    fileFilter.removeFileFilter(filter);

    assertFalse(fileFilter.getFileFilters().contains(filter),"file filter removed");

  }

  assertEquals(0,fileFilter.getFileFilters().size(),"file filters count");

}

