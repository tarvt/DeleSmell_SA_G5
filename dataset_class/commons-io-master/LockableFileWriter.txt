Location: LockableFileWriter.java

Content: 

/** 

 * Creates the lock file.

 * @throws IOException if we cannot create the file

 */

private void createLock() throws IOException {

synchronized (LockableFileWriter.class) {

    if (!lockFile.createNewFile()) {

      throw new IOException("Can't write file, lock " + lockFile.getAbsolutePath() + " exists");

    }

    lockFile.deleteOnExit();

  }

}

Location: LockableFileWriter.java

Content: 

/** 

 * Initializes the wrapped file writer. Ensure that a cleanup occurs if the writer creation fails.

 * @param file  the file to be accessed

 * @param charset  the charset to use

 * @param append  true to append

 * @return The initialized writer

 * @throws IOException if an error occurs

 */

private Writer initWriter(final File file,final Charset charset,final boolean append) throws IOException {

  final boolean fileExistedAlready=file.exists();

  try {

    return new OutputStreamWriter(new FileOutputStream(file.getAbsolutePath(),append),Charsets.toCharset(charset));

  }

 catch (  final IOException|RuntimeException ex) {

    FileUtils.deleteQuietly(lockFile);

    if (!fileExistedAlready) {

      FileUtils.deleteQuietly(file);

    }

    throw ex;

  }

}

Location: LockableFileWriter.java

Content: 

/** 

 * Constructs a LockableFileWriter. If the file exists, it is overwritten.

 * @param file  the file to write to, not null

 * @throws NullPointerException if the file is null

 * @throws IOException in case of an I/O error

 */

public LockableFileWriter(final File file) throws IOException {

  this(file,false,null);

}

Location: LockableFileWriter.java

Content: 

/** 

 * Constructs a LockableFileWriter.

 * @param file  the file to write to, not null

 * @param append  true if content should be appended, false to overwrite

 * @throws NullPointerException if the file is null

 * @throws IOException in case of an I/O error

 */

public LockableFileWriter(final File file,final boolean append) throws IOException {

  this(file,append,null);

}

Location: LockableFileWriter.java

Content: 

/** 

 * Constructs a LockableFileWriter.

 * @param file  the file to write to, not null

 * @param append  true if content should be appended, false to overwrite

 * @param lockDir  the directory in which the lock file should be held

 * @throws NullPointerException if the file is null

 * @throws IOException in case of an I/O error

 * @deprecated 2.5 use {@link #LockableFileWriter(File,Charset,boolean,String)} instead

 */

@Deprecated public LockableFileWriter(final File file,final boolean append,final String lockDir) throws IOException {

  this(file,Charset.defaultCharset(),append,lockDir);

}

Location: LockableFileWriter.java

Content: 

/** 

 * Constructs a LockableFileWriter with a file encoding.

 * @param file  the file to write to, not null

 * @param charset  the charset to use, null means platform default

 * @throws NullPointerException if the file is null

 * @throws IOException in case of an I/O error

 * @since 2.3

 */

public LockableFileWriter(final File file,final Charset charset) throws IOException {

  this(file,charset,false,null);

}

Location: LockableFileWriter.java

Content: 

/** 

 * Constructs a LockableFileWriter with a file encoding.

 * @param file  the file to write to, not null

 * @param charset  the name of the requested charset, null means platform default

 * @param append  true if content should be appended, false to overwrite

 * @param lockDir  the directory in which the lock file should be held

 * @throws NullPointerException if the file is null

 * @throws IOException in case of an I/O error

 * @since 2.3

 */

public LockableFileWriter(File file,final Charset charset,final boolean append,String lockDir) throws IOException {

  file=file.getAbsoluteFile();

  if (file.getParentFile() != null) {

    FileUtils.forceMkdir(file.getParentFile());

  }

  if (file.isDirectory()) {

    throw new IOException("File specified is a directory");

  }

  if (lockDir == null) {

    lockDir=System.getProperty("java.io.tmpdir");

  }

  final File lockDirFile=new File(lockDir);

  FileUtils.forceMkdir(lockDirFile);

  testLockDir(lockDirFile);

  lockFile=new File(lockDirFile,file.getName() + LCK);

  createLock();

  out=initWriter(file,charset,append);

}

Location: LockableFileWriter.java

Content: 

/** 

 * Constructs a LockableFileWriter with a file encoding.

 * @param file  the file to write to, not null

 * @param charsetName  the name of the requested charset, null means platform default

 * @throws NullPointerException if the file is null

 * @throws IOException in case of an I/O error

 * @throws java.nio.charset.UnsupportedCharsetException thrown instead of  {@link java.io.UnsupportedEncodingException} in version 2.2 if the encoding is notsupported.

 */

public LockableFileWriter(final File file,final String charsetName) throws IOException {

  this(file,charsetName,false,null);

}

Location: LockableFileWriter.java

Content: 

/** 

 * Constructs a LockableFileWriter with a file encoding.

 * @param file  the file to write to, not null

 * @param charsetName  the encoding to use, null means platform default

 * @param append  true if content should be appended, false to overwrite

 * @param lockDir  the directory in which the lock file should be held

 * @throws NullPointerException if the file is null

 * @throws IOException in case of an I/O error

 * @throws java.nio.charset.UnsupportedCharsetException thrown instead of  {@link java.io.UnsupportedEncodingException} in version 2.2 if the encoding is notsupported.

 */

public LockableFileWriter(final File file,final String charsetName,final boolean append,final String lockDir) throws IOException {

  this(file,Charsets.toCharset(charsetName),append,lockDir);

}

Location: LockableFileWriter.java

Content: 

/** 

 * Constructs a LockableFileWriter. If the file exists, it is overwritten.

 * @param fileName  the file to write to, not null

 * @throws NullPointerException if the file is null

 * @throws IOException in case of an I/O error

 */

public LockableFileWriter(final String fileName) throws IOException {

  this(fileName,false,null);

}

Location: LockableFileWriter.java

Content: 

/** 

 * Constructs a LockableFileWriter.

 * @param fileName  file to write to, not null

 * @param append  true if content should be appended, false to overwrite

 * @throws NullPointerException if the file is null

 * @throws IOException in case of an I/O error

 */

public LockableFileWriter(final String fileName,final boolean append) throws IOException {

  this(fileName,append,null);

}

Location: LockableFileWriter.java

Content: 

/** 

 * Constructs a LockableFileWriter.

 * @param fileName  the file to write to, not null

 * @param append  true if content should be appended, false to overwrite

 * @param lockDir  the directory in which the lock file should be held

 * @throws NullPointerException if the file is null

 * @throws IOException in case of an I/O error

 */

public LockableFileWriter(final String fileName,final boolean append,final String lockDir) throws IOException {

  this(new File(fileName),append,lockDir);

}

Location: LockableFileWriter.java

Content: 

/** 

 * Tests that we can write to the lock directory.

 * @param lockDir  the File representing the lock directory

 * @throws IOException if we cannot write to the lock directory

 * @throws IOException if we cannot find the lock file

 */

private void testLockDir(final File lockDir) throws IOException {

  if (!lockDir.exists()) {

    throw new IOException("Could not find lockDir: " + lockDir.getAbsolutePath());

  }

  if (!lockDir.canWrite()) {

    throw new IOException("Could not write to lockDir: " + lockDir.getAbsolutePath());

  }

}

