Location: DirectoryWalker.java

Content: 

/** 

 * Checks whether the walk has been cancelled by calling  {@link #handleIsCancelled}, throwing a  {@code CancelException} if it has.<p> Writers of subclasses should not normally call this method as it is called automatically by the walk of the tree. However, sometimes a single method, typically  {@link #handleFile}, may take a long time to run. In that case, you may wish to check for cancellation by calling this method. </p>

 * @param file  the current file being processed

 * @param depth  the current file level (starting directory = 0)

 * @param results  the collection of result objects, may be updated

 * @throws IOException if an I/O Error occurs

 */

protected final void checkIfCancelled(final File file,final int depth,final Collection<T> results) throws IOException {

  if (handleIsCancelled(file,depth,results)) {

    throw new CancelException(file,depth);

  }

}

Location: DirectoryWalker.java

Content: 

/** 

 * Constructs an instance with no filtering and unlimited <i>depth</i>.

 */

protected DirectoryWalker(){

  this(null,-1);

}

Location: DirectoryWalker.java

Content: 

/** 

 * Constructs an instance with a filter and limit the <i>depth</i> navigated to. <p> The filter controls which files and directories will be navigated to as part of the walk. The  {@link FileFilterUtils} class is useful for combiningvarious filters together. A  {@code null} filter means that nofiltering should occur and all files and directories will be visited. </p>

 * @param filter  the filter to apply, null means visit all files

 * @param depthLimit  controls how <i>deep</i> the hierarchy isnavigated to (less than 0 means unlimited)

 */

protected DirectoryWalker(final FileFilter filter,final int depthLimit){

  this.filter=filter;

  this.depthLimit=depthLimit;

}

Location: DirectoryWalker.java

Content: 

/** 

 * Constructs an instance with a directory and a file filter and an optional limit on the <i>depth</i> navigated to. <p> The filters control which files and directories will be navigated to as part of the walk. This constructor uses  {@link FileFilterUtils#makeDirectoryOnly(IOFileFilter)}and  {@link FileFilterUtils#makeFileOnly(IOFileFilter)} internally to combine the filters.A  {@code null} filter means that no filtering should occur.</p>

 * @param directoryFilter  the filter to apply to directories, null means visit all directories

 * @param fileFilter  the filter to apply to files, null means visit all files

 * @param depthLimit  controls how <i>deep</i> the hierarchy isnavigated to (less than 0 means unlimited)

 */

protected DirectoryWalker(IOFileFilter directoryFilter,IOFileFilter fileFilter,final int depthLimit){

  if (directoryFilter == null && fileFilter == null) {

    this.filter=null;

  }

 else {

    directoryFilter=directoryFilter != null ? directoryFilter : TrueFileFilter.TRUE;

    fileFilter=fileFilter != null ? fileFilter : TrueFileFilter.TRUE;

    directoryFilter=FileFilterUtils.makeDirectoryOnly(directoryFilter);

    fileFilter=FileFilterUtils.makeFileOnly(fileFilter);

    this.filter=directoryFilter.or(fileFilter);

  }

  this.depthLimit=depthLimit;

}

Location: DirectoryWalker.java

Content: 

/** 

 * Overridable callback method invoked with the contents of each directory. <p> This implementation returns the files unchanged </p>

 * @param directory  the current directory being processed

 * @param depth  the current directory level (starting directory = 0)

 * @param files the files (possibly filtered) in the directory, may be {@code null}

 * @return the filtered list of files

 * @throws IOException if an I/O Error occurs

 * @since 2.0

 */

@SuppressWarnings("unused") protected File[] filterDirectoryContents(final File directory,final int depth,final File... files) throws IOException {

  return files;

}

Location: DirectoryWalker.java

Content: 

/** 

 * Overridable callback method invoked when the operation is cancelled. The file being processed when the cancellation occurred can be obtained from the exception. <p> This implementation just re-throws the  {@link CancelException}. </p>

 * @param startDirectory  the directory that the walk started from

 * @param results  the collection of result objects, may be updated

 * @param cancel  the exception throw to cancel further processingcontaining details at the point of cancellation.

 * @throws IOException if an I/O Error occurs

 */

protected void handleCancelled(final File startDirectory,final Collection<T> results,final CancelException cancel) throws IOException {

  throw cancel;

}

Location: DirectoryWalker.java

Content: 

/** 

 * Overridable callback method invoked at the end of processing each directory. <p> This implementation does nothing. </p>

 * @param directory  the directory being processed

 * @param depth  the current directory level (starting directory = 0)

 * @param results  the collection of result objects, may be updated

 * @throws IOException if an I/O Error occurs

 */

@SuppressWarnings("unused") protected void handleDirectoryEnd(final File directory,final int depth,final Collection<T> results) throws IOException {

}

Location: DirectoryWalker.java

Content: 

/** 

 * Overridable callback method invoked at the start of processing each directory. <p> This implementation does nothing. </p>

 * @param directory  the current directory being processed

 * @param depth  the current directory level (starting directory = 0)

 * @param results  the collection of result objects, may be updated

 * @throws IOException if an I/O Error occurs

 */

@SuppressWarnings("unused") protected void handleDirectoryStart(final File directory,final int depth,final Collection<T> results) throws IOException {

}

Location: DirectoryWalker.java

Content: 

/** 

 * Overridable callback method invoked to determine if a directory should be processed. <p> This method returns a boolean to indicate if the directory should be examined or not. If you return false, the entire directory and any subdirectories will be skipped. Note that this functionality is in addition to the filtering by file filter. </p> <p> This implementation does nothing and returns true. </p>

 * @param directory  the current directory being processed

 * @param depth  the current directory level (starting directory = 0)

 * @param results  the collection of result objects, may be updated

 * @return true to process this directory, false to skip this directory

 * @throws IOException if an I/O Error occurs

 */

@SuppressWarnings("unused") protected boolean handleDirectory(final File directory,final int depth,final Collection<T> results) throws IOException {

  return true;

}

Location: DirectoryWalker.java

Content: 

/** 

 * Overridable callback method invoked at the end of processing. <p> This implementation does nothing. </p>

 * @param results  the collection of result objects, may be updated

 * @throws IOException if an I/O Error occurs

 */

@SuppressWarnings("unused") protected void handleEnd(final Collection<T> results) throws IOException {

}

Location: DirectoryWalker.java

Content: 

/** 

 * Overridable callback method invoked for each (non-directory) file. <p> This implementation does nothing. </p>

 * @param file  the current file being processed

 * @param depth  the current directory level (starting directory = 0)

 * @param results  the collection of result objects, may be updated

 * @throws IOException if an I/O Error occurs

 */

@SuppressWarnings("unused") protected void handleFile(final File file,final int depth,final Collection<T> results) throws IOException {

}

Location: DirectoryWalker.java

Content: 

/** 

 * Overridable callback method invoked to determine if the entire walk operation should be immediately cancelled. <p> This method should be implemented by those subclasses that want to provide a public  {@code cancel()} method available from anotherthread. The design pattern for the subclass should be as follows: </p> <pre> public class FooDirectoryWalker extends DirectoryWalker { private volatile boolean cancelled = false; public void cancel() { cancelled = true; } private void handleIsCancelled(File file, int depth, Collection results) { return cancelled; } protected void handleCancelled(File startDirectory, Collection results, CancelException cancel) { // implement processing required when a cancellation occurs } } </pre> <p> If this method returns true, then the directory walk is immediately cancelled. The next callback method will be  {@link #handleCancelled}. </p> <p> This implementation returns false. </p>

 * @param file  the file or directory being processed

 * @param depth  the current directory level (starting directory = 0)

 * @param results  the collection of result objects, may be updated

 * @return true if the walk has been cancelled

 * @throws IOException if an I/O Error occurs

 */

@SuppressWarnings("unused") protected boolean handleIsCancelled(final File file,final int depth,final Collection<T> results) throws IOException {

  return false;

}

Location: DirectoryWalker.java

Content: 

/** 

 * Overridable callback method invoked for each restricted directory. <p> This implementation does nothing. </p>

 * @param directory  the restricted directory

 * @param depth  the current directory level (starting directory = 0)

 * @param results  the collection of result objects, may be updated

 * @throws IOException if an I/O Error occurs

 */

@SuppressWarnings("unused") protected void handleRestricted(final File directory,final int depth,final Collection<T> results) throws IOException {

}

Location: DirectoryWalker.java

Content: 

/** 

 * Overridable callback method invoked at the start of processing. <p> This implementation does nothing. </p>

 * @param startDirectory  the directory to start from

 * @param results  the collection of result objects, may be updated

 * @throws IOException if an I/O Error occurs

 */

@SuppressWarnings("unused") protected void handleStart(final File startDirectory,final Collection<T> results) throws IOException {

}

Location: DirectoryWalker.java

Content: 

/** 

 * Internal method that walks the directory hierarchy in a depth-first manner. <p> Users of this class do not need to call this method. This method will be called automatically by another (public) method on the specific subclass. </p> <p> Writers of subclasses should call this method to start the directory walk. Once called, this method will emit events as it walks the hierarchy. The event methods have the prefix  {@code handle}. </p>

 * @param startDirectory  the directory to start from, not null

 * @param results  the collection of result objects, may be updated

 * @throws NullPointerException if the start directory is null

 * @throws IOException if an I/O Error occurs

 */

protected final void walk(final File startDirectory,final Collection<T> results) throws IOException {

  Objects.requireNonNull(startDirectory,"startDirectory");

  try {

    handleStart(startDirectory,results);

    walk(startDirectory,0,results);

    handleEnd(results);

  }

 catch (  final CancelException cancel) {

    handleCancelled(startDirectory,results,cancel);

  }

}

Location: DirectoryWalker.java

Content: 

/** 

 * Main recursive method to examine the directory hierarchy.

 * @param directory  the directory to examine, not null

 * @param depth  the directory level (starting directory = 0)

 * @param results  the collection of result objects, may be updated

 * @throws IOException if an I/O Error occurs

 */

private void walk(final File directory,final int depth,final Collection<T> results) throws IOException {

  checkIfCancelled(directory,depth,results);

  if (handleDirectory(directory,depth,results)) {

    handleDirectoryStart(directory,depth,results);

    final int childDepth=depth + 1;

    if (depthLimit < 0 || childDepth <= depthLimit) {

      checkIfCancelled(directory,depth,results);

      File[] childFiles=filter == null ? directory.listFiles() : directory.listFiles(filter);

      childFiles=filterDirectoryContents(directory,depth,childFiles);

      if (childFiles == null) {

        handleRestricted(directory,childDepth,results);

      }

 else {

        for (        final File childFile : childFiles) {

          if (childFile.isDirectory()) {

            walk(childFile,childDepth,results);

          }

 else {

            checkIfCancelled(childFile,childDepth,results);

            handleFile(childFile,childDepth,results);

            checkIfCancelled(childFile,childDepth,results);

          }

        }

      }

    }

    handleDirectoryEnd(directory,depth,results);

  }

  checkIfCancelled(directory,depth,results);

}

