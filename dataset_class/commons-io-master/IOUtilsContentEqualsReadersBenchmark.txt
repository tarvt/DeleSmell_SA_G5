Location: IOUtilsContentEqualsReadersBenchmark.java

Content: 

public static boolean contentEqualsPr118(final Reader input1,final Reader input2) throws IOException {

  if (input1 == input2) {

    return true;

  }

  if (input1 == null || input2 == null) {

    return false;

  }

  final char[] array1=new char[DEFAULT_BUFFER_SIZE];

  final char[] array2=new char[DEFAULT_BUFFER_SIZE];

  int pos1;

  int pos2;

  int count1;

  int count2;

  while (true) {

    pos1=0;

    pos2=0;

    for (int index=0; index < DEFAULT_BUFFER_SIZE; index++) {

      if (pos1 == index) {

        do {

          count1=input1.read(array1,pos1,DEFAULT_BUFFER_SIZE - pos1);

        }

 while (count1 == 0);

        if (count1 == EOF) {

          return pos2 == index && input2.read() == EOF;

        }

        pos1+=count1;

      }

      if (pos2 == index) {

        do {

          count2=input2.read(array2,pos2,DEFAULT_BUFFER_SIZE - pos2);

        }

 while (count2 == 0);

        if (count2 == EOF) {

          return pos1 == index && input1.read() == EOF;

        }

        pos2+=count2;

      }

      if (array1[index] != array2[index]) {

        return false;

      }

    }

  }

}

Location: IOUtilsContentEqualsReadersBenchmark.java

Content: 

@SuppressWarnings("resource") public static boolean contentEquals_release_2_8_0(final Reader input1,final Reader input2) throws IOException {

  if (input1 == input2) {

    return true;

  }

  if (input1 == null ^ input2 == null) {

    return false;

  }

  final BufferedReader bufferedInput1=IOUtils.toBufferedReader(input1);

  final BufferedReader bufferedInput2=IOUtils.toBufferedReader(input2);

  int ch=bufferedInput1.read();

  while (EOF != ch) {

    final int ch2=bufferedInput2.read();

    if (ch != ch2) {

      return false;

    }

    ch=bufferedInput1.read();

  }

  return bufferedInput2.read() == EOF;

}

Location: IOUtilsContentEqualsReadersBenchmark.java

Content: 

@Benchmark public boolean[] testFileCurrent() throws IOException {

  final boolean[] res=new boolean[3];

  try (Reader input1=new InputStreamReader(getClass().getResourceAsStream(TEST_PATH_A),DEFAULT_CHARSET);Reader input2=new InputStreamReader(getClass().getResourceAsStream(TEST_PATH_B),DEFAULT_CHARSET)){

    res[0]=IOUtils.contentEquals(input1,input1);

  }

   try (Reader input1=new InputStreamReader(getClass().getResourceAsStream(TEST_PATH_A),DEFAULT_CHARSET);Reader input2=new InputStreamReader(getClass().getResourceAsStream(TEST_PATH_A),DEFAULT_CHARSET)){

    res[1]=IOUtils.contentEquals(input1,input2);

  }

   try (Reader input1=new InputStreamReader(getClass().getResourceAsStream(TEST_PATH_16K_A),DEFAULT_CHARSET);Reader input2=new InputStreamReader(getClass().getResourceAsStream(TEST_PATH_16K_A_COPY),DEFAULT_CHARSET)){

    res[2]=IOUtils.contentEquals(input1,input2);

  }

   return res;

}

Location: IOUtilsContentEqualsReadersBenchmark.java

Content: 

@Benchmark public boolean[] testFilePr118() throws IOException {

  final boolean[] res=new boolean[3];

  try (Reader input1=new InputStreamReader(getClass().getResourceAsStream(TEST_PATH_A),DEFAULT_CHARSET);Reader input2=new InputStreamReader(getClass().getResourceAsStream(TEST_PATH_B),DEFAULT_CHARSET)){

    res[0]=contentEqualsPr118(input1,input1);

  }

   try (Reader input1=new InputStreamReader(getClass().getResourceAsStream(TEST_PATH_A),DEFAULT_CHARSET);Reader input2=new InputStreamReader(getClass().getResourceAsStream(TEST_PATH_A),DEFAULT_CHARSET)){

    res[1]=contentEqualsPr118(input1,input2);

  }

   try (Reader input1=new InputStreamReader(getClass().getResourceAsStream(TEST_PATH_16K_A));Reader input2=new InputStreamReader(getClass().getResourceAsStream(TEST_PATH_16K_A_COPY))){

    res[2]=contentEqualsPr118(input1,input2);

  }

   return res;

}

Location: IOUtilsContentEqualsReadersBenchmark.java

Content: 

@Benchmark public boolean[] testFileRelease_2_8_0() throws IOException {

  final boolean[] res=new boolean[3];

  try (Reader input1=new InputStreamReader(getClass().getResourceAsStream(TEST_PATH_A),DEFAULT_CHARSET);Reader input2=new InputStreamReader(getClass().getResourceAsStream(TEST_PATH_B),DEFAULT_CHARSET)){

    res[0]=contentEquals_release_2_8_0(input1,input1);

  }

   try (Reader input1=new InputStreamReader(getClass().getResourceAsStream(TEST_PATH_A),DEFAULT_CHARSET);Reader input2=new InputStreamReader(getClass().getResourceAsStream(TEST_PATH_A),DEFAULT_CHARSET)){

    res[1]=contentEquals_release_2_8_0(input1,input2);

  }

   try (Reader input1=new InputStreamReader(getClass().getResourceAsStream(TEST_PATH_16K_A),DEFAULT_CHARSET);Reader input2=new InputStreamReader(getClass().getResourceAsStream(TEST_PATH_16K_A_COPY),DEFAULT_CHARSET)){

    res[2]=contentEquals_release_2_8_0(input1,input2);

  }

   return res;

}

Location: IOUtilsContentEqualsReadersBenchmark.java

Content: 

@Benchmark public void testStringCurrent(final Blackhole blackhole) throws IOException {

  for (int i=0; i < 5; i++) {

    for (int j=0; j < 5; j++) {

      try (StringReader input1=new StringReader(STRINGS[i]);StringReader input2=new StringReader(STRINGS[j])){

        blackhole.consume(IOUtils.contentEquals(input1,input2));

      }

     }

  }

}

Location: IOUtilsContentEqualsReadersBenchmark.java

Content: 

@Benchmark public void testStringPr118(final Blackhole blackhole) throws IOException {

  for (int i=0; i < 5; i++) {

    for (int j=0; j < 5; j++) {

      try (StringReader input1=new StringReader(STRINGS[i]);StringReader input2=new StringReader(STRINGS[j])){

        blackhole.consume(contentEqualsPr118(input1,input2));

      }

     }

  }

}

Location: IOUtilsContentEqualsReadersBenchmark.java

Content: 

@Benchmark public void testStringRelease_2_8_0(final Blackhole blackhole) throws IOException {

  for (int i=0; i < 5; i++) {

    for (int j=0; j < 5; j++) {

      try (StringReader input1=new StringReader(STRINGS[i]);StringReader input2=new StringReader(STRINGS[j])){

        blackhole.consume(contentEquals_release_2_8_0(input1,input2));

      }

     }

  }

}

