Location: CopyDirectoryVisitor.java

Content: 

/** 

 * Constructs a new visitor that deletes files except for the files and directories explicitly given.

 * @param pathCounter How to count visits.

 * @param fileFilter How to filter file paths.

 * @param dirFilter How to filter directory paths.

 * @param sourceDirectory The source directory

 * @param targetDirectory The target directory

 * @param copyOptions Specifies how the copying should be done.

 * @since 2.9.0

 */

public CopyDirectoryVisitor(final PathCounters pathCounter,final PathFilter fileFilter,final PathFilter dirFilter,final Path sourceDirectory,final Path targetDirectory,final CopyOption... copyOptions){

  super(pathCounter,fileFilter,dirFilter);

  this.sourceDirectory=sourceDirectory;

  this.targetDirectory=targetDirectory;

  this.copyOptions=copyOptions == null ? PathUtils.EMPTY_COPY_OPTIONS : copyOptions.clone();

}

Location: CopyDirectoryVisitor.java

Content: 

/** 

 * Constructs a new visitor that deletes files except for the files and directories explicitly given.

 * @param pathCounter How to count visits.

 * @param sourceDirectory The source directory

 * @param targetDirectory The target directory

 * @param copyOptions Specifies how the copying should be done.

 */

public CopyDirectoryVisitor(final PathCounters pathCounter,final Path sourceDirectory,final Path targetDirectory,final CopyOption... copyOptions){

  super(pathCounter);

  this.sourceDirectory=sourceDirectory;

  this.targetDirectory=targetDirectory;

  this.copyOptions=copyOptions == null ? PathUtils.EMPTY_COPY_OPTIONS : copyOptions.clone();

}

Location: CopyDirectoryVisitor.java

Content: 

/** 

 * Copies the sourceFile to the targetFile.

 * @param sourceFile the source file.

 * @param targetFile the target file.

 * @throws IOException if an I/O error occurs.

 * @since 2.8.0

 */

protected void copy(final Path sourceFile,final Path targetFile) throws IOException {

  Files.copy(sourceFile,targetFile,copyOptions);

}

Location: CopyDirectoryVisitor.java

Content: 

/** 

 * Gets the copy options.

 * @return the copy options.

 * @since 2.8.0

 */

public CopyOption[] getCopyOptions(){

  return copyOptions.clone();

}

Location: CopyDirectoryVisitor.java

Content: 

/** 

 * Gets the source directory.

 * @return the source directory.

 * @since 2.8.0

 */

public Path getSourceDirectory(){

  return sourceDirectory;

}

Location: CopyDirectoryVisitor.java

Content: 

/** 

 * Gets the target directory.

 * @return the target directory.

 * @since 2.8.0

 */

public Path getTargetDirectory(){

  return targetDirectory;

}

Location: CopyDirectoryVisitor.java

Content: 

/** 

 * Relativizes against  {@code sourceDirectory}, then resolves against  {@code targetDirectory}. We have to call  {@link Path#toString()} relative value because we cannot use paths belonging to differentFileSystems in the Path methods, usually this leads to  {@link ProviderMismatchException}.

 * @param directory the directory to relativize.

 * @return a new path, relativized against sourceDirectory, then resolved against targetDirectory.

 */

private Path resolveRelativeAsString(final Path directory){

  return targetDirectory.resolve(sourceDirectory.relativize(directory).toString());

}

