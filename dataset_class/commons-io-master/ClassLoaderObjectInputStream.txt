Location: ClassLoaderObjectInputStream.java

Content: 

/** 

 * Constructs a new ClassLoaderObjectInputStream.

 * @param classLoader  the ClassLoader from which classes should be loaded

 * @param inputStream  the InputStream to work on

 * @throws IOException in case of an I/O error

 * @throws StreamCorruptedException if the stream is corrupted

 */

public ClassLoaderObjectInputStream(final ClassLoader classLoader,final InputStream inputStream) throws IOException, StreamCorruptedException {

  super(inputStream);

  this.classLoader=classLoader;

}

Location: ClassLoaderObjectInputStream.java

Content: 

/** 

 * Create a proxy class that implements the specified interfaces using the specified ClassLoader or the super ClassLoader.

 * @param interfaces the interfaces to implement

 * @return a proxy class implementing the interfaces

 * @throws IOException in case of an I/O error

 * @throws ClassNotFoundException if the Class cannot be found

 * @see java.io.ObjectInputStream#resolveProxyClass(java.lang.String[])

 * @since 2.1

 */

@Override protected Class<?> resolveProxyClass(final String[] interfaces) throws IOException, ClassNotFoundException {

  final Class<?>[] interfaceClasses=new Class[interfaces.length];

  for (int i=0; i < interfaces.length; i++) {

    interfaceClasses[i]=Class.forName(interfaces[i],false,classLoader);

  }

  try {

    return Proxy.getProxyClass(classLoader,interfaceClasses);

  }

 catch (  final IllegalArgumentException e) {

    return super.resolveProxyClass(interfaces);

  }

}

