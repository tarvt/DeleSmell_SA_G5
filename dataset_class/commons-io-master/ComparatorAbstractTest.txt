Location: ComparatorAbstractTest.java

Content: 

/** 

 * Test the comparator.

 */

@Test public void testComparator(){

  assertEquals(0,comparator.compare(equalFile1,equalFile2),"equal");

  assertTrue(comparator.compare(lessFile,moreFile) < 0,"less");

  assertTrue(comparator.compare(moreFile,lessFile) > 0,"more");

}

Location: ComparatorAbstractTest.java

Content: 

/** 

 * Test the comparator reversed.

 */

@Test public void testReverseComparator(){

  assertEquals(0,reverse.compare(equalFile1,equalFile2),"equal");

  assertTrue(reverse.compare(moreFile,lessFile) < 0,"less");

  assertTrue(reverse.compare(lessFile,moreFile) > 0,"more");

}

Location: ComparatorAbstractTest.java

Content: 

/** 

 * Test the comparator array sort.

 */

@Test public void testSortArray(){

  final File[] files=new File[3];

  files[0]=equalFile1;

  files[1]=moreFile;

  files[2]=lessFile;

  comparator.sort(files);

  assertSame(lessFile,files[0],"equal");

  assertSame(equalFile1,files[1],"less");

  assertSame(moreFile,files[2],"more");

}

Location: ComparatorAbstractTest.java

Content: 

/** 

 * Test comparator array sort is null safe.

 */

@Test public void testSortArrayNull(){

  assertNull(comparator.sort((File[])null));

}

Location: ComparatorAbstractTest.java

Content: 

/** 

 * Test the comparator array sort.

 */

@Test public void testSortList(){

  final List<File> files=new ArrayList<>();

  files.add(equalFile1);

  files.add(moreFile);

  files.add(lessFile);

  comparator.sort(files);

  assertSame(lessFile,files.get(0),"equal");

  assertSame(equalFile1,files.get(1),"less");

  assertSame(moreFile,files.get(2),"more");

}

Location: ComparatorAbstractTest.java

Content: 

/** 

 * Test comparator list sort is null safe.

 */

@Test public void testSortListNull(){

  assertNull(comparator.sort((List<File>)null));

}

