Location: FileUtilsFileNewerTest.java

Content: 

/** 

 * Tests the  {@code isFileNewer(File, *)} methods which a "normal" file.

 * @throws IOException

 * @see FileUtils#isFileNewer(File,long)

 * @see FileUtils#isFileNewer(File,Date)

 * @see FileUtils#isFileNewer(File,File)

 */

@Test public void testIsFileNewer() throws IOException {

  if (!testFile1.exists()) {

    throw new IllegalStateException("The testFile1 should exist");

  }

  final FileTime fileLastModified=Files.getLastModifiedTime(testFile1.toPath());

  final long TWO_SECOND=2;

  testIsFileNewer("two second earlier is not newer",testFile1,FileTimes.plusSeconds(fileLastModified,TWO_SECOND),false);

  testIsFileNewer("same time is not newer",testFile1,fileLastModified,false);

  testIsFileNewer("two second later is newer",testFile1,FileTimes.minusSeconds(fileLastModified,TWO_SECOND),true);

}

Location: FileUtilsFileNewerTest.java

Content: 

/** 

 * Tests the  {@code isFileNewer(File, *)} methods which a not existing file.

 * @throws IOException if an I/O error occurs.

 * @see FileUtils#isFileNewer(File,long)

 * @see FileUtils#isFileNewer(File,Date)

 * @see FileUtils#isFileNewer(File,File)

 */

@Test public void testIsFileNewerImaginaryFile() throws IOException {

  final File imaginaryFile=new File(temporaryFolder,"imaginaryFile");

  if (imaginaryFile.exists()) {

    throw new IllegalStateException("The imaginary File exists");

  }

  testIsFileNewer("imaginary file can be newer",imaginaryFile,FileUtils.lastModifiedFileTime(testFile2),false);

}

Location: FileUtilsFileNewerTest.java

Content: 

/** 

 * Tests the  {@code isFileNewer(File, Date)} method without specifying a {@code Date}. <p> The test is successful if the method throws an  {@code IllegalArgumentException}. </p>

 */

@Test public void testIsFileNewerNoDate(){

  assertThrows(NullPointerException.class,() -> FileUtils.isFileNewer(testFile1,(Date)null),"date");

}

Location: FileUtilsFileNewerTest.java

Content: 

/** 

 * Tests the  {@code isFileNewer(File, long)} method without specifying a {@code File}. <p> The test is successful if the method throws an  {@code IllegalArgumentException}. </p>

 */

@Test public void testIsFileNewerNoFile(){

  assertThrows(NullPointerException.class,() -> FileUtils.isFileNewer(null,0),"file");

}

Location: FileUtilsFileNewerTest.java

Content: 

/** 

 * Tests the  {@code isFileNewer(File, File)} method without specifying a reference {@code File}. <p> The test is successful if the method throws an  {@code IllegalArgumentException}. </p>

 */

@Test public void testIsFileNewerNoFileReference(){

  assertThrows(NullPointerException.class,() -> FileUtils.isFileNewer(testFile1,(File)null),"reference");

}

Location: FileUtilsFileNewerTest.java

Content: 

/** 

 * Tests the  {@code isFileNewer(File, *)} methods which the specified conditions.Creates : <ul> <li>a  {@code Date} which represents the time reference</li><li>a temporary file with the same last modification date as the time reference</li> </ul> Then compares (with the needed  {@code isFileNewer} method) the last modification date of the specified file with thespecified time reference, the created  {@code Date} and the temporary file.<p> The test is successful if the three comparisons return the specified wanted result.

 * @param description describes the tested situation

 * @param file the file of which the last modification date is compared

 * @param fileTime the time reference measured in milliseconds since the epoch

 * @param wantedResult the expected result

 * @throws IOException if an I/O error occurs.

 */

protected void testIsFileNewer(final String description,final File file,final FileTime fileTime,final boolean wantedResult) throws IOException {

  assertEquals(wantedResult,FileUtils.isFileNewer(file,fileTime),() -> description + " - FileTime");

  assertEquals(wantedResult,FileUtils.isFileNewer(file,fileTime.toInstant()),() -> description + " - Instant");

  final File temporaryFile=testFile2;

  Files.setLastModifiedTime(temporaryFile.toPath(),fileTime);

  assertEquals(fileTime,Files.getLastModifiedTime(temporaryFile.toPath()),"The temporary file hasn't the right last modification date");

  assertEquals(wantedResult,FileUtils.isFileNewer(file,temporaryFile),() -> description + " - file");

}

