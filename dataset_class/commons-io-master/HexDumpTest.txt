Location: HexDumpTest.java

Content: 

@Test public void testDump() throws IOException {

  final byte[] testArray=new byte[256];

  for (int j=0; j < 256; j++) {

    testArray[j]=(byte)j;

  }

  ByteArrayOutputStream stream=new ByteArrayOutputStream();

  HexDump.dump(testArray,0,stream,0);

  byte[] outputArray=new byte[16 * (73 + HexDump.EOL.length())];

  for (int j=0; j < 16; j++) {

    int offset=(73 + HexDump.EOL.length()) * j;

    outputArray[offset++]=(byte)'0';

    outputArray[offset++]=(byte)'0';

    outputArray[offset++]=(byte)'0';

    outputArray[offset++]=(byte)'0';

    outputArray[offset++]=(byte)'0';

    outputArray[offset++]=(byte)'0';

    outputArray[offset++]=(byte)toHex(j);

    outputArray[offset++]=(byte)'0';

    outputArray[offset++]=(byte)' ';

    for (int k=0; k < 16; k++) {

      outputArray[offset++]=(byte)toHex(j);

      outputArray[offset++]=(byte)toHex(k);

      outputArray[offset++]=(byte)' ';

    }

    for (int k=0; k < 16; k++) {

      outputArray[offset++]=(byte)toAscii((j * 16) + k);

    }

    System.arraycopy(HexDump.EOL.getBytes(),0,outputArray,offset,HexDump.EOL.getBytes().length);

  }

  byte[] actualOutput=stream.toByteArray();

  assertEquals(outputArray.length,actualOutput.length,"array size mismatch");

  for (int j=0; j < outputArray.length; j++) {

    assertEquals(outputArray[j],actualOutput[j],"array[ " + j + "] mismatch");

  }

  stream=new ByteArrayOutputStream();

  HexDump.dump(testArray,0x10000000,stream,0);

  outputArray=new byte[16 * (73 + HexDump.EOL.length())];

  for (int j=0; j < 16; j++) {

    int offset=(73 + HexDump.EOL.length()) * j;

    outputArray[offset++]=(byte)'1';

    outputArray[offset++]=(byte)'0';

    outputArray[offset++]=(byte)'0';

    outputArray[offset++]=(byte)'0';

    outputArray[offset++]=(byte)'0';

    outputArray[offset++]=(byte)'0';

    outputArray[offset++]=(byte)toHex(j);

    outputArray[offset++]=(byte)'0';

    outputArray[offset++]=(byte)' ';

    for (int k=0; k < 16; k++) {

      outputArray[offset++]=(byte)toHex(j);

      outputArray[offset++]=(byte)toHex(k);

      outputArray[offset++]=(byte)' ';

    }

    for (int k=0; k < 16; k++) {

      outputArray[offset++]=(byte)toAscii((j * 16) + k);

    }

    System.arraycopy(HexDump.EOL.getBytes(),0,outputArray,offset,HexDump.EOL.getBytes().length);

  }

  actualOutput=stream.toByteArray();

  assertEquals(outputArray.length,actualOutput.length,"array size mismatch");

  for (int j=0; j < outputArray.length; j++) {

    assertEquals(outputArray[j],actualOutput[j],"array[ " + j + "] mismatch");

  }

  stream=new ByteArrayOutputStream();

  HexDump.dump(testArray,0xFF000000,stream,0);

  outputArray=new byte[16 * (73 + HexDump.EOL.length())];

  for (int j=0; j < 16; j++) {

    int offset=(73 + HexDump.EOL.length()) * j;

    outputArray[offset++]=(byte)'F';

    outputArray[offset++]=(byte)'F';

    outputArray[offset++]=(byte)'0';

    outputArray[offset++]=(byte)'0';

    outputArray[offset++]=(byte)'0';

    outputArray[offset++]=(byte)'0';

    outputArray[offset++]=(byte)toHex(j);

    outputArray[offset++]=(byte)'0';

    outputArray[offset++]=(byte)' ';

    for (int k=0; k < 16; k++) {

      outputArray[offset++]=(byte)toHex(j);

      outputArray[offset++]=(byte)toHex(k);

      outputArray[offset++]=(byte)' ';

    }

    for (int k=0; k < 16; k++) {

      outputArray[offset++]=(byte)toAscii((j * 16) + k);

    }

    System.arraycopy(HexDump.EOL.getBytes(),0,outputArray,offset,HexDump.EOL.getBytes().length);

  }

  actualOutput=stream.toByteArray();

  assertEquals(outputArray.length,actualOutput.length,"array size mismatch");

  for (int j=0; j < outputArray.length; j++) {

    assertEquals(outputArray[j],actualOutput[j],"array[ " + j + "] mismatch");

  }

  stream=new ByteArrayOutputStream();

  HexDump.dump(testArray,0x10000000,stream,0x81);

  outputArray=new byte[(8 * (73 + HexDump.EOL.length())) - 1];

  for (int j=0; j < 8; j++) {

    int offset=(73 + HexDump.EOL.length()) * j;

    outputArray[offset++]=(byte)'1';

    outputArray[offset++]=(byte)'0';

    outputArray[offset++]=(byte)'0';

    outputArray[offset++]=(byte)'0';

    outputArray[offset++]=(byte)'0';

    outputArray[offset++]=(byte)'0';

    outputArray[offset++]=(byte)toHex(j + 8);

    outputArray[offset++]=(byte)'1';

    outputArray[offset++]=(byte)' ';

    for (int k=0; k < 16; k++) {

      final int index=0x81 + (j * 16) + k;

      if (index < 0x100) {

        outputArray[offset++]=(byte)toHex(index / 16);

        outputArray[offset++]=(byte)toHex(index);

      }

 else {

        outputArray[offset++]=(byte)' ';

        outputArray[offset++]=(byte)' ';

      }

      outputArray[offset++]=(byte)' ';

    }

    for (int k=0; k < 16; k++) {

      final int index=0x81 + (j * 16) + k;

      if (index < 0x100) {

        outputArray[offset++]=(byte)toAscii(index);

      }

    }

    System.arraycopy(HexDump.EOL.getBytes(),0,outputArray,offset,HexDump.EOL.getBytes().length);

  }

  actualOutput=stream.toByteArray();

  assertEquals(outputArray.length,actualOutput.length,"array size mismatch");

  for (int j=0; j < outputArray.length; j++) {

    assertEquals(outputArray[j],actualOutput[j],"array[ " + j + "] mismatch");

  }

  try {

    HexDump.dump(testArray,0x10000000,new ByteArrayOutputStream(),-1);

    fail("should have caught ArrayIndexOutOfBoundsException on negative index");

  }

 catch (  final ArrayIndexOutOfBoundsException ignored_exception) {

  }

  try {

    HexDump.dump(testArray,0x10000000,new ByteArrayOutputStream(),testArray.length);

    fail("should have caught ArrayIndexOutOfBoundsException on large index");

  }

 catch (  final ArrayIndexOutOfBoundsException ignored_exception) {

  }

  try {

    HexDump.dump(testArray,0x10000000,null,0);

    fail("should have caught IllegalArgumentException on negative index");

  }

 catch (  final IllegalArgumentException ignored_exception) {

  }

}

Location: HexDumpTest.java

Content: 

private char toAscii(final int c){

  char rval='.';

  if ((c >= 32) && (c <= 126)) {

    rval=(char)c;

  }

  return rval;

}

Location: HexDumpTest.java

Content: 

private char toHex(final int n){

  final char[] hexChars={'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'};

  return hexChars[n % 16];

}

