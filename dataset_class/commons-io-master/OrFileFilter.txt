Location: OrFileFilter.java

Content: 

/** 

 * Adds the given file filters.

 * @param fileFilters the filters to add.

 * @since 2.9.0

 */

public void addFileFilter(final IOFileFilter... fileFilters){

  for (  final IOFileFilter fileFilter : Objects.requireNonNull(fileFilters,"fileFilters")) {

    addFileFilter(fileFilter);

  }

}

Location: OrFileFilter.java

Content: 

/** 

 * {@inheritDoc}

 */

@Override public List<IOFileFilter> getFileFilters(){

  return Collections.unmodifiableList(this.fileFilters);

}

Location: OrFileFilter.java

Content: 

/** 

 * Constructs a new instance of  {@code OrFileFilter}.

 * @since 1.1

 */

public OrFileFilter(){

  this(0);

}

Location: OrFileFilter.java

Content: 

/** 

 * Constructs a new instance with the given initial list.

 * @param initialList the initial list.

 */

private OrFileFilter(final ArrayList<IOFileFilter> initialList){

  this.fileFilters=Objects.requireNonNull(initialList,"initialList");

}

Location: OrFileFilter.java

Content: 

/** 

 * Constructs a new instance with the given initial capacity.

 * @param initialCapacity the initial capacity.

 */

private OrFileFilter(final int initialCapacity){

  this(new ArrayList<>(initialCapacity));

}

Location: OrFileFilter.java

Content: 

/** 

 * Constructs a new instance for the give filters.

 * @param fileFilters filters to OR.

 * @since 2.9.0

 */

public OrFileFilter(final IOFileFilter... fileFilters){

  this(Objects.requireNonNull(fileFilters,"fileFilters").length);

  addFileFilter(fileFilters);

}

Location: OrFileFilter.java

Content: 

/** 

 * Constructs a new file filter that ORs the result of other filters.

 * @param filter1 the first filter, must not be null

 * @param filter2 the second filter, must not be null

 * @throws IllegalArgumentException if either filter is null

 */

public OrFileFilter(final IOFileFilter filter1,final IOFileFilter filter2){

  this(2);

  addFileFilter(filter1);

  addFileFilter(filter2);

}

Location: OrFileFilter.java

Content: 

/** 

 * Constructs a new instance of  {@code OrFileFilter} with the specified filters.

 * @param fileFilters the file filters for this filter, copied.

 * @since 1.1

 */

public OrFileFilter(final List<IOFileFilter> fileFilters){

  this(new ArrayList<>(Objects.requireNonNull(fileFilters,"fileFilters")));

}

Location: OrFileFilter.java

Content: 

/** 

 * {@inheritDoc}

 */

@Override public boolean removeFileFilter(final IOFileFilter fileFilter){

  return this.fileFilters.remove(fileFilter);

}

Location: OrFileFilter.java

Content: 

/** 

 * {@inheritDoc}

 */

@Override public void setFileFilters(final List<IOFileFilter> fileFilters){

  this.fileFilters.clear();

  this.fileFilters.addAll(Objects.requireNonNull(fileFilters,"fileFilters"));

}

