Location: FileTimes.java

Content: 

private FileTimes(){

}

Location: FileTimes.java

Content: 

/** 

 * Subtracts milliseconds from a source FileTime.

 * @param fileTime The source FileTime.

 * @param millisToSubtract The milliseconds to subtract.

 * @return The resulting FileTime.

 */

public static FileTime minusMillis(final FileTime fileTime,final long millisToSubtract){

  return FileTime.from(fileTime.toInstant().minusMillis(millisToSubtract));

}

Location: FileTimes.java

Content: 

/** 

 * Subtracts nanoseconds from a source FileTime.

 * @param fileTime The source FileTime.

 * @param nanosToSubtract The nanoseconds to subtract.

 * @return The resulting FileTime.

 */

public static FileTime minusNanos(final FileTime fileTime,final long nanosToSubtract){

  return FileTime.from(fileTime.toInstant().minusNanos(nanosToSubtract));

}

Location: FileTimes.java

Content: 

/** 

 * Subtracts seconds from a source FileTime.

 * @param fileTime The source FileTime.

 * @param secondsToSubtract The seconds to subtract.

 * @return The resulting FileTime.

 */

public static FileTime minusSeconds(final FileTime fileTime,final long secondsToSubtract){

  return FileTime.from(fileTime.toInstant().minusSeconds(secondsToSubtract));

}

Location: FileTimes.java

Content: 

/** 

 * Returns the current instant FileTime from the system clock.

 * @return the current instant FileTime from the system clock.

 */

public static FileTime now(){

  return FileTime.from(Instant.now());

}

Location: FileTimes.java

Content: 

/** 

 * Adds milliseconds to a source FileTime.

 * @param fileTime The source FileTime.

 * @param millisToAdd The milliseconds to add.

 * @return The resulting FileTime.

 */

public static FileTime plusMillis(final FileTime fileTime,final long millisToAdd){

  return FileTime.from(fileTime.toInstant().plusMillis(millisToAdd));

}

Location: FileTimes.java

Content: 

/** 

 * Adds nanoseconds from a source FileTime.

 * @param fileTime The source FileTime.

 * @param nanosToSubtract The nanoseconds to subtract.

 * @return The resulting FileTime.

 */

public static FileTime plusNanos(final FileTime fileTime,final long nanosToSubtract){

  return FileTime.from(fileTime.toInstant().plusNanos(nanosToSubtract));

}

Location: FileTimes.java

Content: 

/** 

 * Adds seconds to a source FileTime.

 * @param fileTime The source FileTime.

 * @param secondsToAdd The seconds to add.

 * @return The resulting FileTime.

 */

public static FileTime plusSeconds(final FileTime fileTime,final long secondsToAdd){

  return FileTime.from(fileTime.toInstant().plusSeconds(secondsToAdd));

}

Location: FileTimes.java

Content: 

/** 

 * Sets the last modified time of the given file path to now.

 * @param path The file path to set.

 * @throws IOException if an I/O error occurs.

 */

public static void setLastModifiedTime(final Path path) throws IOException {

  Files.setLastModifiedTime(path,now());

}

