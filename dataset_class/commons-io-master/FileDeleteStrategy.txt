Location: FileDeleteStrategy.java

Content: 

/** 

 * Actually deletes the file object, which may be a file or a directory. <p> This method is designed for subclasses to override. The implementation may return either false or an  {@code IOException}when deletion fails. The  {@link #delete(File)} and {@link #deleteQuietly(File)}methods will handle either response appropriately. A check has been made to ensure that the file will exist. </p> <p> This implementation uses  {@link FileUtils#delete(File)}. </p>

 * @param file  the file to delete, exists, not null

 * @return true if the file was deleted

 * @throws NullPointerException if the file is null

 * @throws IOException if an error occurs during file deletion

 */

protected boolean doDelete(final File file) throws IOException {

  FileUtils.delete(file);

  return true;

}

Location: FileDeleteStrategy.java

Content: 

/** 

 * Restricted constructor.

 * @param name  the name by which the strategy is known

 */

protected FileDeleteStrategy(final String name){

  this.name=name;

}

