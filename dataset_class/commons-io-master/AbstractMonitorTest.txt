Location: AbstractMonitorTest.java

Content: 

/** 

 * Check all the Collections are empty

 * @param label the label to use for this check

 */

protected void checkCollectionsEmpty(final String label){

  checkCollectionSizes("EMPTY-" + label,0,0,0,0,0,0);

}

Location: AbstractMonitorTest.java

Content: 

/** 

 * Check all the Collections have the expected sizes.

 * @param label the label to use for this check

 * @param dirCreate expected number of dirs created

 * @param dirChange expected number of dirs changed

 * @param dirDelete expected number of dirs deleted

 * @param fileCreate expected number of files created

 * @param fileChange expected number of files changed

 * @param fileDelete expected number of files deleted

 */

protected void checkCollectionSizes(String label,final int dirCreate,final int dirChange,final int dirDelete,final int fileCreate,final int fileChange,final int fileDelete){

  label=label + "[" + listener.getCreatedDirectories().size()+ " "+ listener.getChangedDirectories().size()+ " "+ listener.getDeletedDirectories().size()+ " "+ listener.getCreatedFiles().size()+ " "+ listener.getChangedFiles().size()+ " "+ listener.getDeletedFiles().size()+ "]";

  assertEquals(dirCreate,listener.getCreatedDirectories().size(),label + ": No. of directories created");

  assertEquals(dirChange,listener.getChangedDirectories().size(),label + ": No. of directories changed");

  assertEquals(dirDelete,listener.getDeletedDirectories().size(),label + ": No. of directories deleted");

  assertEquals(fileCreate,listener.getCreatedFiles().size(),label + ": No. of files created");

  assertEquals(fileChange,listener.getChangedFiles().size(),label + ": No. of files changed");

  assertEquals(fileDelete,listener.getDeletedFiles().size(),label + ": No. of files deleted");

}

Location: AbstractMonitorTest.java

Content: 

/** 

 * Create a  {@link FileAlterationObserver}.

 * @param file The directory to observe

 * @param fileFilter The file filter to apply

 */

protected void createObserver(final File file,final FileFilter fileFilter){

  observer=new FileAlterationObserver(file,fileFilter);

  observer.addListener(listener);

  observer.addListener(new FileAlterationListenerAdaptor());

  try {

    observer.initialize();

  }

 catch (  final Exception e) {

    fail("Observer init() threw " + e);

  }

}

Location: AbstractMonitorTest.java

Content: 

/** 

 * Either creates a file if it doesn't exist or updates the last modified date/time if it does.

 * @param file The file to touch

 * @return The file

 * @throws IOException if an I/O error occurs.

 */

protected File touch(File file) throws IOException {

  final long lastModified=file.exists() ? FileUtils.lastModified(file) : 0;

  try {

    FileUtils.touch(file);

    assertTrue(file.exists());

    file=new File(file.getParent(),file.getName());

    while (lastModified == FileUtils.lastModified(file)) {

      sleepQuietly(pauseTime);

      FileUtils.touch(file);

      file=new File(file.getParent(),file.getName());

    }

  }

 catch (  final Exception e) {

    fail("Touching " + file + ": "+ e);

  }

  sleepQuietly(pauseTime);

  return file;

}

