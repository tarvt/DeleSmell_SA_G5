Location: PathUtilsContentEqualsTest.java

Content: 

private String getName(){

  return this.getClass().getSimpleName();

}

Location: PathUtilsContentEqualsTest.java

Content: 

@Test public void testDirectoryAndFileContentEquals() throws Exception {

  final Path path1=new File(temporaryFolder,getName()).toPath();

  final Path path2=new File(temporaryFolder,getName() + "2").toPath();

  assertTrue(PathUtils.directoryAndFileContentEquals(null,null));

  assertFalse(PathUtils.directoryAndFileContentEquals(null,path1));

  assertFalse(PathUtils.directoryAndFileContentEquals(path1,null));

  assertTrue(PathUtils.directoryAndFileContentEquals(path1,path1));

  assertTrue(PathUtils.directoryAndFileContentEquals(path1,path2));

  assertTrue(PathUtils.directoryAndFileContentEquals(path2,path2));

  assertTrue(PathUtils.directoryAndFileContentEquals(path2,path1));

{

    final Path dir1=Paths.get("src/test/resources/dir-equals-tests/dir-equals-files-only/directory-files-only1");

    final Path dir2=Paths.get("src/test/resources/dir-equals-tests/dir-equals-files-only/directory-files-only2");

    assertTrue(PathUtils.directoryAndFileContentEquals(dir1,dir2));

    assertTrue(PathUtils.directoryAndFileContentEquals(dir2,dir2));

    assertTrue(PathUtils.directoryAndFileContentEquals(dir1,dir1));

    assertTrue(PathUtils.directoryAndFileContentEquals(dir2,dir2));

  }

{

    final Path dir1=Paths.get("src/test/resources/dir-equals-tests/dir-equals-dirs-then-files/dir1");

    final Path dir2=Paths.get("src/test/resources/dir-equals-tests/dir-equals-dirs-then-files/dir2");

    assertTrue(PathUtils.directoryAndFileContentEquals(dir1,dir2));

    assertTrue(PathUtils.directoryAndFileContentEquals(dir2,dir2));

    assertTrue(PathUtils.directoryAndFileContentEquals(dir1,dir1));

    assertTrue(PathUtils.directoryAndFileContentEquals(dir2,dir2));

  }

{

    final Path dir1=Paths.get("src/test/resources/dir-equals-tests/dir-equals-dirs-and-files/dirs-and-files1");

    final Path dir2=Paths.get("src/test/resources/dir-equals-tests/dir-equals-dirs-and-files/dirs-and-files1");

    assertTrue(PathUtils.directoryAndFileContentEquals(dir1,dir2));

    assertTrue(PathUtils.directoryAndFileContentEquals(dir2,dir2));

    assertTrue(PathUtils.directoryAndFileContentEquals(dir1,dir1));

    assertTrue(PathUtils.directoryAndFileContentEquals(dir2,dir2));

  }

{

    final Path dir1=Paths.get("src/test/resources/dir-equals-tests/dir-equals-dirs-and-files/dirs-and-files1/directory-files-only1");

    final Path dir2=Paths.get("src/test/resources/dir-equals-tests/dir-equals-dirs-and-files/dirs-and-files1/");

    assertFalse(PathUtils.directoryAndFileContentEquals(dir1,dir2));

    assertFalse(PathUtils.directoryAndFileContentEquals(dir2,dir1));

  }

{

    final Path dir1=Paths.get("src/test/resources/dir-equals-tests/dir-equals-dirs-and-files");

    final Path dir2=Paths.get("src/test/resources/dir-equals-tests/dir-equals-dirs-then-files");

    assertFalse(PathUtils.directoryAndFileContentEquals(dir1,dir2));

    assertFalse(PathUtils.directoryAndFileContentEquals(dir2,dir1));

  }

}

Location: PathUtilsContentEqualsTest.java

Content: 

@Test public void testDirectoryContentEquals() throws Exception {

  final Path path1=new File(temporaryFolder,getName()).toPath();

  final Path path2=new File(temporaryFolder,getName() + "2").toPath();

  assertTrue(PathUtils.directoryContentEquals(null,null));

  assertFalse(PathUtils.directoryContentEquals(null,path1));

  assertFalse(PathUtils.directoryContentEquals(path1,null));

  assertTrue(PathUtils.directoryContentEquals(path1,path1));

  assertTrue(PathUtils.directoryContentEquals(path1,path2));

  assertTrue(PathUtils.directoryContentEquals(path2,path2));

  assertTrue(PathUtils.directoryContentEquals(path2,path1));

{

    final Path dir1=Paths.get("src/test/resources/dir-equals-tests/dir-equals-files-only/directory-files-only1");

    final Path dir2=Paths.get("src/test/resources/dir-equals-tests/dir-equals-files-only/directory-files-only2");

    assertTrue(PathUtils.directoryContentEquals(dir1,dir2));

    assertTrue(PathUtils.directoryContentEquals(dir2,dir2));

    assertTrue(PathUtils.directoryContentEquals(dir1,dir1));

    assertTrue(PathUtils.directoryContentEquals(dir2,dir2));

  }

{

    final Path dir1=Paths.get("src/test/resources/dir-equals-tests/dir-equals-dirs-then-files/dir1");

    final Path dir2=Paths.get("src/test/resources/dir-equals-tests/dir-equals-dirs-then-files/dir2");

    assertTrue(PathUtils.directoryContentEquals(dir1,dir2));

    assertTrue(PathUtils.directoryContentEquals(dir2,dir2));

    assertTrue(PathUtils.directoryContentEquals(dir1,dir1));

    assertTrue(PathUtils.directoryContentEquals(dir2,dir2));

  }

{

    final Path dir1=Paths.get("src/test/resources/dir-equals-tests/dir-equals-dirs-and-files/dirs-and-files1");

    final Path dir2=Paths.get("src/test/resources/dir-equals-tests/dir-equals-dirs-and-files/dirs-and-files1");

    assertTrue(PathUtils.directoryContentEquals(dir1,dir2));

    assertTrue(PathUtils.directoryContentEquals(dir2,dir2));

    assertTrue(PathUtils.directoryContentEquals(dir1,dir1));

    assertTrue(PathUtils.directoryContentEquals(dir2,dir2));

  }

{

    final Path dir1=Paths.get("src/test/resources/dir-equals-tests/dir-equals-dirs-and-files/dirs-and-files1/directory-files-only1");

    final Path dir2=Paths.get("src/test/resources/dir-equals-tests/dir-equals-dirs-and-files/dirs-and-files1/");

    assertFalse(PathUtils.directoryContentEquals(dir1,dir2));

    assertFalse(PathUtils.directoryContentEquals(dir2,dir1));

  }

{

    final Path dir1=Paths.get("src/test/resources/dir-equals-tests/dir-equals-dirs-and-files");

    final Path dir2=Paths.get("src/test/resources/dir-equals-tests/dir-equals-dirs-then-files");

    assertFalse(PathUtils.directoryContentEquals(dir1,dir2));

    assertFalse(PathUtils.directoryContentEquals(dir2,dir1));

  }

}

Location: PathUtilsContentEqualsTest.java

Content: 

@Test public void testFileContentEquals() throws Exception {

  final Path path1=new File(temporaryFolder,getName()).toPath();

  final Path path2=new File(temporaryFolder,getName() + "2").toPath();

  assertTrue(PathUtils.fileContentEquals(null,null));

  assertFalse(PathUtils.fileContentEquals(null,path1));

  assertFalse(PathUtils.fileContentEquals(path1,null));

  assertTrue(PathUtils.fileContentEquals(path1,path1));

  assertTrue(PathUtils.fileContentEquals(path1,path2));

  assertTrue(PathUtils.fileContentEquals(path2,path2));

  assertTrue(PathUtils.fileContentEquals(path2,path1));

  try {

    PathUtils.fileContentEquals(temporaryFolder.toPath(),temporaryFolder.toPath());

    fail("Comparing directories should fail with an IOException");

  }

 catch (  final IOException ioe) {

  }

  final Path objFile1=Paths.get(temporaryFolder.getAbsolutePath(),getName() + ".object");

  objFile1.toFile().deleteOnExit();

  PathUtils.copyFile(getClass().getResource("/java/lang/Object.class"),objFile1);

  final Path objFile1b=Paths.get(temporaryFolder.getAbsolutePath(),getName() + ".object2");

  objFile1b.toFile().deleteOnExit();

  PathUtils.copyFile(getClass().getResource("/java/lang/Object.class"),objFile1b);

  final Path objFile2=Paths.get(temporaryFolder.getAbsolutePath(),getName() + ".collection");

  objFile2.toFile().deleteOnExit();

  PathUtils.copyFile(getClass().getResource("/java/util/Collection.class"),objFile2);

  assertFalse(PathUtils.fileContentEquals(objFile1,objFile2));

  assertFalse(PathUtils.fileContentEquals(objFile1b,objFile2));

  assertTrue(PathUtils.fileContentEquals(objFile1,objFile1b));

  assertTrue(PathUtils.fileContentEquals(objFile1,objFile1));

  assertTrue(PathUtils.fileContentEquals(objFile1b,objFile1b));

  assertTrue(PathUtils.fileContentEquals(objFile2,objFile2));

  Files.createFile(path1);

  Files.createFile(path2);

  assertTrue(PathUtils.fileContentEquals(path1,path1));

  assertTrue(PathUtils.fileContentEquals(path1,path2));

}

