Location: UnixLineEndingInputStream.java

Content: 

/** 

 * Handles the EOF-handling at the end of the stream

 * @param previousWasSlashR Indicates if the last seen was a \r

 * @return The next char to output to the stream

 */

private int eofGame(final boolean previousWasSlashR){

  if (previousWasSlashR || !ensureLineFeedAtEndOfFile) {

    return EOF;

  }

  if (!slashNSeen) {

    slashNSeen=true;

    return LF;

  }

  return EOF;

}

Location: UnixLineEndingInputStream.java

Content: 

/** 

 * Reads the next item from the target, updating internal flags in the process

 * @return the next int read from the target stream

 * @throws IOException upon error

 */

private int readWithUpdate() throws IOException {

  final int target=this.target.read();

  eofSeen=target == EOF;

  if (eofSeen) {

    return target;

  }

  slashNSeen=target == LF;

  slashRSeen=target == CR;

  return target;

}

Location: UnixLineEndingInputStream.java

Content: 

/** 

 * Creates an input stream that filters another stream

 * @param in                        The input stream to wrap

 * @param ensureLineFeedAtEndOfFile true to ensure that the file ends with LF

 */

public UnixLineEndingInputStream(final InputStream in,final boolean ensureLineFeedAtEndOfFile){

  this.target=in;

  this.ensureLineFeedAtEndOfFile=ensureLineFeedAtEndOfFile;

}

