Location: IOUtilsCopyTest.java

Content: 

@SuppressWarnings("resource") @Test public void testCopy_inputStreamToOutputStream() throws Exception {

  InputStream in=new ByteArrayInputStream(inData);

  in=new ThrowOnCloseInputStream(in);

  final ByteArrayOutputStream baout=new ByteArrayOutputStream();

  final OutputStream out=new ThrowOnFlushAndCloseOutputStream(baout,false,true);

  final int count=IOUtils.copy(in,out);

  assertEquals(0,in.available(),"Not all bytes were read");

  assertEquals(inData.length,baout.size(),"Sizes differ");

  assertArrayEquals(inData,baout.toByteArray(),"Content differs");

  assertEquals(inData.length,count);

}

Location: IOUtilsCopyTest.java

Content: 

@Test public void testCopy_inputStreamToOutputStreamWithBufferSize() throws Exception {

  testCopy_inputStreamToOutputStreamWithBufferSize(1);

  testCopy_inputStreamToOutputStreamWithBufferSize(2);

  testCopy_inputStreamToOutputStreamWithBufferSize(4);

  testCopy_inputStreamToOutputStreamWithBufferSize(8);

  testCopy_inputStreamToOutputStreamWithBufferSize(16);

  testCopy_inputStreamToOutputStreamWithBufferSize(32);

  testCopy_inputStreamToOutputStreamWithBufferSize(64);

  testCopy_inputStreamToOutputStreamWithBufferSize(128);

  testCopy_inputStreamToOutputStreamWithBufferSize(256);

  testCopy_inputStreamToOutputStreamWithBufferSize(512);

  testCopy_inputStreamToOutputStreamWithBufferSize(1024);

  testCopy_inputStreamToOutputStreamWithBufferSize(2048);

  testCopy_inputStreamToOutputStreamWithBufferSize(4096);

  testCopy_inputStreamToOutputStreamWithBufferSize(8192);

  testCopy_inputStreamToOutputStreamWithBufferSize(16384);

}

Location: IOUtilsCopyTest.java

Content: 

@SuppressWarnings("resource") private void testCopy_inputStreamToOutputStreamWithBufferSize(final int bufferSize) throws Exception {

  InputStream in=new ByteArrayInputStream(inData);

  in=new ThrowOnCloseInputStream(in);

  final ByteArrayOutputStream baout=new ByteArrayOutputStream();

  final OutputStream out=new ThrowOnFlushAndCloseOutputStream(baout,false,true);

  final long count=IOUtils.copy(in,out,bufferSize);

  assertEquals(0,in.available(),"Not all bytes were read");

  assertEquals(inData.length,baout.size(),"Sizes differ");

  assertArrayEquals(inData,baout.toByteArray(),"Content differs");

  assertEquals(inData.length,count);

}

Location: IOUtilsCopyTest.java

Content: 

/** 

 * Test Copying file > 2GB  - see issue# IO-84

 */

@Test public void testCopy_inputStreamToOutputStream_IO84() throws Exception {

  final long size=(long)Integer.MAX_VALUE + (long)1;

  final InputStream in=new NullInputStream(size);

  final OutputStream out=NullOutputStream.INSTANCE;

  assertEquals(-1,IOUtils.copy(in,out));

  in.close();

  assertEquals(size,IOUtils.copyLarge(in,out),"copyLarge()");

}

Location: IOUtilsCopyTest.java

Content: 

@Test public void testCopy_inputStreamToOutputStream_nullIn(){

  final OutputStream out=new ByteArrayOutputStream();

  assertThrows(NullPointerException.class,() -> IOUtils.copy((InputStream)null,out));

}

Location: IOUtilsCopyTest.java

Content: 

@Test public void testCopy_inputStreamToOutputStream_nullOut(){

  final InputStream in=new ByteArrayInputStream(inData);

  assertThrows(NullPointerException.class,() -> IOUtils.copy(in,(OutputStream)null));

}

Location: IOUtilsCopyTest.java

Content: 

@SuppressWarnings({"resource","deprecation"}) @Test public void testCopy_inputStreamToWriter() throws Exception {

  InputStream in=new ByteArrayInputStream(inData);

  in=new ThrowOnCloseInputStream(in);

  final ByteArrayOutputStream baout=new ByteArrayOutputStream();

  final ThrowOnFlushAndCloseOutputStream out=new ThrowOnFlushAndCloseOutputStream(baout,true,true);

  final Writer writer=new OutputStreamWriter(baout,StandardCharsets.US_ASCII);

  IOUtils.copy(in,writer);

  out.off();

  writer.flush();

  assertEquals(0,in.available(),"Not all bytes were read");

  assertEquals(inData.length,baout.size(),"Sizes differ");

  assertArrayEquals(inData,baout.toByteArray(),"Content differs");

}

Location: IOUtilsCopyTest.java

Content: 

@SuppressWarnings("resource") @Test public void testCopy_inputStreamToWriter_Encoding() throws Exception {

  InputStream in=new ByteArrayInputStream(inData);

  in=new ThrowOnCloseInputStream(in);

  final ByteArrayOutputStream baout=new ByteArrayOutputStream();

  final ThrowOnFlushAndCloseOutputStream out=new ThrowOnFlushAndCloseOutputStream(baout,true,true);

  final Writer writer=new OutputStreamWriter(baout,StandardCharsets.US_ASCII);

  IOUtils.copy(in,writer,"UTF8");

  out.off();

  writer.flush();

  assertEquals(0,in.available(),"Not all bytes were read");

  byte[] bytes=baout.toByteArray();

  bytes=new String(bytes,StandardCharsets.UTF_8).getBytes(StandardCharsets.US_ASCII);

  assertArrayEquals(inData,bytes,"Content differs");

}

Location: IOUtilsCopyTest.java

Content: 

@SuppressWarnings("resource") @Test public void testCopy_inputStreamToWriter_Encoding_nullEncoding() throws Exception {

  InputStream in=new ByteArrayInputStream(inData);

  in=new ThrowOnCloseInputStream(in);

  final ByteArrayOutputStream baout=new ByteArrayOutputStream();

  final ThrowOnFlushAndCloseOutputStream out=new ThrowOnFlushAndCloseOutputStream(baout,true,true);

  final Writer writer=new OutputStreamWriter(baout,StandardCharsets.US_ASCII);

  IOUtils.copy(in,writer,(String)null);

  out.off();

  writer.flush();

  assertEquals(0,in.available(),"Not all bytes were read");

  assertEquals(inData.length,baout.size(),"Sizes differ");

  assertArrayEquals(inData,baout.toByteArray(),"Content differs");

}

Location: IOUtilsCopyTest.java

Content: 

@Test public void testCopy_inputStreamToWriter_Encoding_nullIn(){

  final ByteArrayOutputStream baout=new ByteArrayOutputStream();

  final OutputStream out=new ThrowOnFlushAndCloseOutputStream(baout,true,true);

  final Writer writer=new OutputStreamWriter(out,StandardCharsets.US_ASCII);

  assertThrows(NullPointerException.class,() -> IOUtils.copy(null,writer,"UTF8"));

}

Location: IOUtilsCopyTest.java

Content: 

@Test public void testCopy_inputStreamToWriter_Encoding_nullOut(){

  final InputStream in=new ByteArrayInputStream(inData);

  assertThrows(NullPointerException.class,() -> IOUtils.copy(in,null,"UTF8"));

}

Location: IOUtilsCopyTest.java

Content: 

@SuppressWarnings("deprecation") @Test public void testCopy_inputStreamToWriter_nullIn(){

  final ByteArrayOutputStream baout=new ByteArrayOutputStream();

  final OutputStream out=new ThrowOnFlushAndCloseOutputStream(baout,true,true);

  final Writer writer=new OutputStreamWriter(out,StandardCharsets.US_ASCII);

  assertThrows(NullPointerException.class,() -> IOUtils.copy((InputStream)null,writer));

}

Location: IOUtilsCopyTest.java

Content: 

@SuppressWarnings("deprecation") @Test public void testCopy_inputStreamToWriter_nullOut(){

  final InputStream in=new ByteArrayInputStream(inData);

  assertThrows(NullPointerException.class,() -> IOUtils.copy(in,(Writer)null));

}

Location: IOUtilsCopyTest.java

Content: 

@SuppressWarnings("resource") @Test public void testCopy_readerToAppendable() throws Exception {

  InputStream in=new ByteArrayInputStream(inData);

  in=new ThrowOnCloseInputStream(in);

  final Reader reader=new InputStreamReader(in,StandardCharsets.US_ASCII);

  final ByteArrayOutputStream baout=new ByteArrayOutputStream();

  final ThrowOnFlushAndCloseOutputStream out=new ThrowOnFlushAndCloseOutputStream(baout,true,true);

  final Writer writer=new OutputStreamWriter(baout,StandardCharsets.US_ASCII);

  final long count=IOUtils.copy(reader,(Appendable)writer);

  out.off();

  writer.flush();

  assertEquals(inData.length,count,"The number of characters returned by copy is wrong");

  assertEquals(inData.length,baout.size(),"Sizes differ");

  assertArrayEquals(inData,baout.toByteArray(),"Content differs");

}

Location: IOUtilsCopyTest.java

Content: 

@Test public void testCopy_readerToAppendable_IO84() throws Exception {

  final long size=(long)Integer.MAX_VALUE + (long)1;

  final Reader reader=new NullReader(size);

  final NullWriter writer=new NullWriter();

  assertEquals(size,IOUtils.copy(reader,(Appendable)writer));

  reader.close();

  assertEquals(size,IOUtils.copyLarge(reader,writer),"copy()");

}

Location: IOUtilsCopyTest.java

Content: 

@Test public void testCopy_readerToAppendable_nullIn(){

  final ByteArrayOutputStream baout=new ByteArrayOutputStream();

  final OutputStream out=new ThrowOnFlushAndCloseOutputStream(baout,true,true);

  final Appendable writer=new OutputStreamWriter(out,StandardCharsets.US_ASCII);

  assertThrows(NullPointerException.class,() -> IOUtils.copy(null,writer));

}

Location: IOUtilsCopyTest.java

Content: 

@SuppressWarnings("resource") @Test public void testCopy_readerToAppendable_nullOut(){

  InputStream in=new ByteArrayInputStream(inData);

  in=new ThrowOnCloseInputStream(in);

  final Reader reader=new InputStreamReader(in,StandardCharsets.US_ASCII);

  assertThrows(NullPointerException.class,() -> IOUtils.copy(reader,(Appendable)null));

}

Location: IOUtilsCopyTest.java

Content: 

@SuppressWarnings({"resource","deprecation"}) @Test public void testCopy_readerToOutputStream() throws Exception {

  InputStream in=new ByteArrayInputStream(inData);

  in=new ThrowOnCloseInputStream(in);

  final Reader reader=new InputStreamReader(in,StandardCharsets.US_ASCII);

  final ByteArrayOutputStream baout=new ByteArrayOutputStream();

  final OutputStream out=new ThrowOnFlushAndCloseOutputStream(baout,false,true);

  IOUtils.copy(reader,out);

  assertEquals(inData.length,baout.size(),"Sizes differ");

  assertArrayEquals(inData,baout.toByteArray(),"Content differs");

}

Location: IOUtilsCopyTest.java

Content: 

@SuppressWarnings("resource") @Test public void testCopy_readerToOutputStream_Encoding() throws Exception {

  InputStream in=new ByteArrayInputStream(inData);

  in=new ThrowOnCloseInputStream(in);

  final Reader reader=new InputStreamReader(in,StandardCharsets.US_ASCII);

  final ByteArrayOutputStream baout=new ByteArrayOutputStream();

  final OutputStream out=new ThrowOnFlushAndCloseOutputStream(baout,false,true);

  IOUtils.copy(reader,out,"UTF16");

  byte[] bytes=baout.toByteArray();

  bytes=new String(bytes,StandardCharsets.UTF_16).getBytes(StandardCharsets.US_ASCII);

  assertArrayEquals(inData,bytes,"Content differs");

}

Location: IOUtilsCopyTest.java

Content: 

@SuppressWarnings("resource") @Test public void testCopy_readerToOutputStream_Encoding_nullEncoding() throws Exception {

  InputStream in=new ByteArrayInputStream(inData);

  in=new ThrowOnCloseInputStream(in);

  final Reader reader=new InputStreamReader(in,StandardCharsets.US_ASCII);

  final ByteArrayOutputStream baout=new ByteArrayOutputStream();

  final OutputStream out=new ThrowOnFlushAndCloseOutputStream(baout,false,true);

  IOUtils.copy(reader,out,(String)null);

  assertEquals(inData.length,baout.size(),"Sizes differ");

  assertArrayEquals(inData,baout.toByteArray(),"Content differs");

}

Location: IOUtilsCopyTest.java

Content: 

@Test public void testCopy_readerToOutputStream_Encoding_nullIn(){

  final ByteArrayOutputStream baout=new ByteArrayOutputStream();

  final OutputStream out=new ThrowOnFlushAndCloseOutputStream(baout,true,true);

  assertThrows(NullPointerException.class,() -> IOUtils.copy(null,out,"UTF16"));

}

Location: IOUtilsCopyTest.java

Content: 

@SuppressWarnings("resource") @Test public void testCopy_readerToOutputStream_Encoding_nullOut(){

  InputStream in=new ByteArrayInputStream(inData);

  in=new ThrowOnCloseInputStream(in);

  final Reader reader=new InputStreamReader(in,StandardCharsets.US_ASCII);

  assertThrows(NullPointerException.class,() -> IOUtils.copy(reader,null,"UTF16"));

}

Location: IOUtilsCopyTest.java

Content: 

@SuppressWarnings("deprecation") @Test public void testCopy_readerToOutputStream_nullIn(){

  final ByteArrayOutputStream baout=new ByteArrayOutputStream();

  final OutputStream out=new ThrowOnFlushAndCloseOutputStream(baout,true,true);

  assertThrows(NullPointerException.class,() -> IOUtils.copy((Reader)null,out));

}

Location: IOUtilsCopyTest.java

Content: 

@SuppressWarnings({"resource","deprecation"}) @Test public void testCopy_readerToOutputStream_nullOut(){

  InputStream in=new ByteArrayInputStream(inData);

  in=new ThrowOnCloseInputStream(in);

  final Reader reader=new InputStreamReader(in,StandardCharsets.US_ASCII);

  assertThrows(NullPointerException.class,() -> IOUtils.copy(reader,(OutputStream)null));

}

Location: IOUtilsCopyTest.java

Content: 

@SuppressWarnings("resource") @Test public void testCopy_readerToWriter() throws Exception {

  InputStream in=new ByteArrayInputStream(inData);

  in=new ThrowOnCloseInputStream(in);

  final Reader reader=new InputStreamReader(in,StandardCharsets.US_ASCII);

  final ByteArrayOutputStream baout=new ByteArrayOutputStream();

  final ThrowOnFlushAndCloseOutputStream out=new ThrowOnFlushAndCloseOutputStream(baout,true,true);

  final Writer writer=new OutputStreamWriter(baout,StandardCharsets.US_ASCII);

  final int count=IOUtils.copy(reader,writer);

  out.off();

  writer.flush();

  assertEquals(inData.length,count,"The number of characters returned by copy is wrong");

  assertEquals(inData.length,baout.size(),"Sizes differ");

  assertArrayEquals(inData,baout.toByteArray(),"Content differs");

}

Location: IOUtilsCopyTest.java

Content: 

@Test public void testCopy_readerToWriter_IO84() throws Exception {

  final long size=(long)Integer.MAX_VALUE + (long)1;

  final Reader reader=new NullReader(size);

  final Writer writer=new NullWriter();

  assertEquals(-1,IOUtils.copy(reader,writer));

  reader.close();

  assertEquals(size,IOUtils.copyLarge(reader,writer),"copyLarge()");

}

Location: IOUtilsCopyTest.java

Content: 

@Test public void testCopy_readerToWriter_nullIn(){

  final ByteArrayOutputStream baout=new ByteArrayOutputStream();

  final OutputStream out=new ThrowOnFlushAndCloseOutputStream(baout,true,true);

  final Writer writer=new OutputStreamWriter(out,StandardCharsets.US_ASCII);

  assertThrows(NullPointerException.class,() -> IOUtils.copy((Reader)null,writer));

}

Location: IOUtilsCopyTest.java

Content: 

@SuppressWarnings("resource") @Test public void testCopy_readerToWriter_nullOut(){

  InputStream in=new ByteArrayInputStream(inData);

  in=new ThrowOnCloseInputStream(in);

  final Reader reader=new InputStreamReader(in,StandardCharsets.US_ASCII);

  assertThrows(NullPointerException.class,() -> IOUtils.copy(reader,(Writer)null));

}

Location: IOUtilsCopyTest.java

Content: 

@Test public void testCopy_URLToFile() throws Exception {

  final String name="/org/apache/commons/io/abitmorethan16k.txt";

  final URL in=getClass().getResource(name);

  assertNotNull(in,name);

  final Path path=Files.createTempFile("testCopy_URLToFile",".txt");

  try {

    IOUtils.copy(in,path.toFile());

    assertArrayEquals(Files.readAllBytes(Paths.get("src/test/resources" + name)),Files.readAllBytes(path));

  }

  finally {

    Files.delete(path);

  }

}

Location: IOUtilsCopyTest.java

Content: 

@Test public void testCopy_URLToOutputStream() throws Exception {

  final String name="/org/apache/commons/io/abitmorethan16k.txt";

  final URL in=getClass().getResource(name);

  assertNotNull(in,name);

  final ByteArrayOutputStream baout=new ByteArrayOutputStream();

  IOUtils.copy(in,baout);

  assertArrayEquals(Files.readAllBytes(Paths.get("src/test/resources" + name)),baout.toByteArray());

}

