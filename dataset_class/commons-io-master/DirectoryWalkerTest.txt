Location: DirectoryWalkerTest.java

Content: 

/** 

 * Check the files in the array are in the results list.

 */

private void checkContainsFiles(final String prefix,final File[] files,final Collection<File> results){

  for (int i=0; i < files.length; i++) {

    assertTrue(results.contains(files[i]),prefix + "[" + i+ "] "+ files[i]);

  }

}

Location: DirectoryWalkerTest.java

Content: 

private void checkContainsString(final String prefix,final File[] files,final Collection<String> results){

  for (int i=0; i < files.length; i++) {

    assertTrue(results.contains(files[i].toString()),prefix + "[" + i+ "] "+ files[i]);

  }

}

Location: DirectoryWalkerTest.java

Content: 

/** 

 * Create a name filter containing the names of the files in the array.

 */

private static IOFileFilter createNameFilter(final File[] files){

  final String[] names=new String[files.length];

  for (int i=0; i < files.length; i++) {

    names[i]=files[i].getName();

  }

  return new NameFileFilter(names);

}

Location: DirectoryWalkerTest.java

Content: 

/** 

 * Extract the directories.

 */

private List<File> directoriesOnly(final Collection<File> results){

  final List<File> list=new ArrayList<>(results.size());

  for (  final File file : results) {

    if (file.isDirectory()) {

      list.add(file);

    }

  }

  return list;

}

Location: DirectoryWalkerTest.java

Content: 

/** 

 * Extract the files.

 */

private List<File> filesOnly(final Collection<File> results){

  final List<File> list=new ArrayList<>(results.size());

  for (  final File file : results) {

    if (file.isFile()) {

      list.add(file);

    }

  }

  return list;

}

Location: DirectoryWalkerTest.java

Content: 

/** 

 * Test Cancel

 */

@Test public void testCancel(){

  String cancelName=null;

  try {

    cancelName="DirectoryWalker.java";

    new TestCancelWalker(cancelName,false).find(javaDir);

    fail("CancelException not thrown for '" + cancelName + "'");

  }

 catch (  final DirectoryWalker.CancelException cancel) {

    assertEquals(cancelName,cancel.getFile().getName(),"File:  " + cancelName);

    assertEquals(5,cancel.getDepth(),"Depth: " + cancelName);

  }

catch (  final IOException ex) {

    fail("IOException: " + cancelName + " "+ ex);

  }

  try {

    cancelName="commons";

    new TestCancelWalker(cancelName,false).find(javaDir);

    fail("CancelException not thrown for '" + cancelName + "'");

  }

 catch (  final DirectoryWalker.CancelException cancel) {

    assertEquals(cancelName,cancel.getFile().getName(),"File:  " + cancelName);

    assertEquals(3,cancel.getDepth(),"Depth: " + cancelName);

  }

catch (  final IOException ex) {

    fail("IOException: " + cancelName + " "+ ex);

  }

  try {

    final List<File> results=new TestCancelWalker(cancelName,true).find(javaDir);

    final File lastFile=results.get(results.size() - 1);

    assertEquals(cancelName,lastFile.getName(),"Suppress:  " + cancelName);

  }

 catch (  final IOException ex) {

    fail("Suppress threw " + ex);

  }

}

Location: DirectoryWalkerTest.java

Content: 

/** 

 * Test Filtering

 */

@Test public void testFilter(){

  final List<File> results=new TestFileFinder(dirsAndFilesFilter,-1).find(javaDir);

  assertEquals(1 + dirs.length + ioFiles.length+ outputFiles.length,results.size(),"Result Size");

  assertTrue(results.contains(javaDir),"Start Dir");

  checkContainsFiles("Dir",dirs,results);

  checkContainsFiles("IO File",ioFiles,results);

  checkContainsFiles("Output File",outputFiles,results);

}

Location: DirectoryWalkerTest.java

Content: 

/** 

 * Test Filtering and limit to depth 0

 */

@Test public void testFilterAndLimitA(){

  final List<File> results=new TestFileFinder(NOT_SVN,0).find(javaDir);

  assertEquals(1,results.size(),"[A] Result Size");

  assertTrue(results.contains(javaDir),"[A] Start Dir");

}

Location: DirectoryWalkerTest.java

Content: 

/** 

 * Test Filtering and limit to depth 1

 */

@Test public void testFilterAndLimitB(){

  final List<File> results=new TestFileFinder(NOT_SVN,1).find(javaDir);

  assertEquals(2,results.size(),"[B] Result Size");

  assertTrue(results.contains(javaDir),"[B] Start Dir");

  assertTrue(results.contains(orgDir),"[B] Org Dir");

}

Location: DirectoryWalkerTest.java

Content: 

/** 

 * Test Filtering and limit to depth 3

 */

@Test public void testFilterAndLimitC(){

  final List<File> results=new TestFileFinder(NOT_SVN,3).find(javaDir);

  assertEquals(4,results.size(),"[C] Result Size");

  assertTrue(results.contains(javaDir),"[C] Start Dir");

  assertTrue(results.contains(orgDir),"[C] Org Dir");

  assertTrue(results.contains(apacheDir),"[C] Apache Dir");

  assertTrue(results.contains(commonsDir),"[C] Commons Dir");

}

Location: DirectoryWalkerTest.java

Content: 

/** 

 * Test Filtering and limit to depth 5

 */

@Test public void testFilterAndLimitD(){

  final List<File> results=new TestFileFinder(dirsAndFilesFilter,5).find(javaDir);

  assertEquals(1 + dirs.length + ioFiles.length,results.size(),"[D] Result Size");

  assertTrue(results.contains(javaDir),"[D] Start Dir");

  checkContainsFiles("[D] Dir",dirs,results);

  checkContainsFiles("[D] File",ioFiles,results);

}

Location: DirectoryWalkerTest.java

Content: 

/** 

 * Test separate dir and file filters

 */

@Test public void testFilterDirAndFile1(){

  final List<File> results=new TestFileFinder(dirsFilter,iofilesFilter,-1).find(javaDir);

  assertEquals(1 + dirs.length + ioFiles.length,results.size(),"[DirAndFile1] Result Size");

  assertTrue(results.contains(javaDir),"[DirAndFile1] Start Dir");

  checkContainsFiles("[DirAndFile1] Dir",dirs,results);

  checkContainsFiles("[DirAndFile1] File",ioFiles,results);

}

Location: DirectoryWalkerTest.java

Content: 

/** 

 * Test separate dir and file filters

 */

@Test public void testFilterDirAndFile2(){

  final List<File> results=new TestFileFinder(null,null,-1).find(javaDir);

  assertTrue(results.size() > 1 + dirs.length + ioFiles.length,"[DirAndFile2] Result Size");

  assertTrue(results.contains(javaDir),"[DirAndFile2] Start Dir");

  checkContainsFiles("[DirAndFile2] Dir",dirs,results);

  checkContainsFiles("[DirAndFile2] File",ioFiles,results);

}

Location: DirectoryWalkerTest.java

Content: 

/** 

 * Test separate dir and file filters

 */

@Test public void testFilterDirAndFile3(){

  final List<File> results=new TestFileFinder(dirsFilter,null,-1).find(javaDir);

  final List<File> resultDirs=directoriesOnly(results);

  assertEquals(1 + dirs.length,resultDirs.size(),"[DirAndFile3] Result Size");

  assertTrue(results.contains(javaDir),"[DirAndFile3] Start Dir");

  checkContainsFiles("[DirAndFile3] Dir",dirs,resultDirs);

}

Location: DirectoryWalkerTest.java

Content: 

/** 

 * Test separate dir and file filters

 */

@Test public void testFilterDirAndFile4(){

  final List<File> results=new TestFileFinder(null,iofilesFilter,-1).find(javaDir);

  final List<File> resultFiles=filesOnly(results);

  assertEquals(ioFiles.length,resultFiles.size(),"[DirAndFile4] Result Size");

  assertTrue(results.contains(javaDir),"[DirAndFile4] Start Dir");

  checkContainsFiles("[DirAndFile4] File",ioFiles,resultFiles);

}

Location: DirectoryWalkerTest.java

Content: 

/** 

 * Test Filtering

 */

@Test public void testFilterString(){

  final List<String> results=new TestFileFinderString(dirsAndFilesFilter,-1).find(javaDir);

  assertEquals(results.size(),outputFiles.length + ioFiles.length,"Result Size");

  checkContainsString("IO File",ioFiles,results);

  checkContainsString("Output File",outputFiles,results);

}

Location: DirectoryWalkerTest.java

Content: 

/** 

 * test an invalid start directory

 */

@Test public void testHandleStartDirectoryFalse(){

  final List<File> results=new TestFalseFileFinder(null,-1).find(current);

  assertEquals(0,results.size(),"Result Size");

}

Location: DirectoryWalkerTest.java

Content: 

/** 

 * Test Limiting to current directory

 */

@Test public void testLimitToCurrent(){

  final List<File> results=new TestFileFinder(null,0).find(current);

  assertEquals(1,results.size(),"Result Size");

  assertTrue(results.contains(FileUtils.current()),"Current Dir");

}

Location: DirectoryWalkerTest.java

Content: 

/** 

 * test an invalid start directory

 */

@Test public void testMissingStartDirectory(){

  final File invalidDir=new File("invalid-dir");

  final List<File> results=new TestFileFinder(null,-1).find(invalidDir);

  assertEquals(1,results.size(),"Result Size");

  assertTrue(results.contains(invalidDir),"Current Dir");

  try {

    new TestFileFinder(null,-1).find(null);

    fail("Null start directory didn't throw Exception");

  }

 catch (  final NullPointerException ignore) {

  }

}

Location: DirectoryWalkerTest.java

Content: 

/** 

 * Test Cancel

 */

@Test public void testMultiThreadCancel(){

  String cancelName="DirectoryWalker.java";

  TestMultiThreadCancelWalker walker=new TestMultiThreadCancelWalker(cancelName,false);

  try {

    walker.find(javaDir);

    fail("CancelException not thrown for '" + cancelName + "'");

  }

 catch (  final DirectoryWalker.CancelException cancel) {

    final File last=walker.results.get(walker.results.size() - 1);

    assertEquals(cancelName,last.getName());

    assertEquals(5,cancel.getDepth(),"Depth: " + cancelName);

  }

catch (  final IOException ex) {

    fail("IOException: " + cancelName + " "+ ex);

  }

  try {

    cancelName="commons";

    walker=new TestMultiThreadCancelWalker(cancelName,false);

    walker.find(javaDir);

    fail("CancelException not thrown for '" + cancelName + "'");

  }

 catch (  final DirectoryWalker.CancelException cancel) {

    assertEquals(cancelName,cancel.getFile().getName(),"File:  " + cancelName);

    assertEquals(3,cancel.getDepth(),"Depth: " + cancelName);

  }

catch (  final IOException ex) {

    fail("IOException: " + cancelName + " "+ ex);

  }

  try {

    walker=new TestMultiThreadCancelWalker(cancelName,true);

    final List<File> results=walker.find(javaDir);

    final File lastFile=results.get(results.size() - 1);

    assertEquals(cancelName,lastFile.getName(),"Suppress:  " + cancelName);

  }

 catch (  final IOException ex) {

    fail("Suppress threw " + ex);

  }

}

