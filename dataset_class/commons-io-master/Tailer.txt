Location: Tailer.java

Content: 

/** 

 * Creates and starts a Tailer for the given file.

 * @param file the file to follow.

 * @param charset the character set to use for reading the file.

 * @param listener the TailerListener to use.

 * @param delayMillis the delay between checks of the file for new content in milliseconds.

 * @param end Set to true to tail from the end of the file, false to tail from the beginning of the file.

 * @param reOpen whether to close/reopen the file between chunks.

 * @param bufferSize buffer size.

 * @return The new tailer.

 * @deprecated Use {@link Builder}.

 */

@Deprecated public static Tailer create(final File file,final Charset charset,final TailerListener listener,final long delayMillis,final boolean end,final boolean reOpen,final int bufferSize){

  return new Builder(file,listener).withCharset(charset).withDelayDuration(Duration.ofMillis(delayMillis)).withTailFromEnd(end).withReOpen(reOpen).withBufferSize(bufferSize).build();

}

Location: Tailer.java

Content: 

/** 

 * Creates and starts a Tailer for the given file, starting at the beginning of the file with the default delay of 1.0s

 * @param file the file to follow.

 * @param listener the TailerListener to use.

 * @return The new tailer.

 * @deprecated Use {@link Builder}.

 */

@Deprecated public static Tailer create(final File file,final TailerListener listener){

  return new Builder(file,listener).build();

}

Location: Tailer.java

Content: 

/** 

 * Creates and starts a Tailer for the given file, starting at the beginning of the file

 * @param file the file to follow.

 * @param listener the TailerListener to use.

 * @param delayMillis the delay between checks of the file for new content in milliseconds.

 * @return The new tailer.

 * @deprecated Use {@link Builder}.

 */

@Deprecated public static Tailer create(final File file,final TailerListener listener,final long delayMillis){

  return new Builder(file,listener).withDelayDuration(Duration.ofMillis(delayMillis)).build();

}

Location: Tailer.java

Content: 

/** 

 * Creates and starts a Tailer for the given file with default buffer size.

 * @param file the file to follow.

 * @param listener the TailerListener to use.

 * @param delayMillis the delay between checks of the file for new content in milliseconds.

 * @param end Set to true to tail from the end of the file, false to tail from the beginning of the file.

 * @return The new tailer.

 * @deprecated Use {@link Builder}.

 */

@Deprecated public static Tailer create(final File file,final TailerListener listener,final long delayMillis,final boolean end){

  return new Builder(file,listener).withDelayDuration(Duration.ofMillis(delayMillis)).withTailFromEnd(end).build();

}

Location: Tailer.java

Content: 

/** 

 * Creates and starts a Tailer for the given file with default buffer size.

 * @param file the file to follow.

 * @param listener the TailerListener to use.

 * @param delayMillis the delay between checks of the file for new content in milliseconds.

 * @param end Set to true to tail from the end of the file, false to tail from the beginning of the file.

 * @param reOpen whether to close/reopen the file between chunks.

 * @return The new tailer.

 * @deprecated Use {@link Builder}.

 */

@Deprecated public static Tailer create(final File file,final TailerListener listener,final long delayMillis,final boolean end,final boolean reOpen){

  return new Builder(file,listener).withDelayDuration(Duration.ofMillis(delayMillis)).withTailFromEnd(end).withReOpen(reOpen).build();

}

Location: Tailer.java

Content: 

/** 

 * Creates and starts a Tailer for the given file.

 * @param file the file to follow.

 * @param listener the TailerListener to use.

 * @param delayMillis the delay between checks of the file for new content in milliseconds.

 * @param end Set to true to tail from the end of the file, false to tail from the beginning of the file.

 * @param reOpen whether to close/reopen the file between chunks.

 * @param bufferSize buffer size.

 * @return The new tailer.

 * @deprecated Use {@link Builder}.

 */

@Deprecated public static Tailer create(final File file,final TailerListener listener,final long delayMillis,final boolean end,final boolean reOpen,final int bufferSize){

  return new Builder(file,listener).withDelayDuration(Duration.ofMillis(delayMillis)).withTailFromEnd(end).withReOpen(reOpen).withBufferSize(bufferSize).build();

}

Location: Tailer.java

Content: 

/** 

 * Creates and starts a Tailer for the given file.

 * @param file the file to follow.

 * @param listener the TailerListener to use.

 * @param delayMillis the delay between checks of the file for new content in milliseconds.

 * @param end Set to true to tail from the end of the file, false to tail from the beginning of the file.

 * @param bufferSize buffer size.

 * @return The new tailer.

 * @deprecated Use {@link Builder}.

 */

@Deprecated public static Tailer create(final File file,final TailerListener listener,final long delayMillis,final boolean end,final int bufferSize){

  return new Builder(file,listener).withDelayDuration(Duration.ofMillis(delayMillis)).withTailFromEnd(end).withBufferSize(bufferSize).build();

}

Location: Tailer.java

Content: 

/** 

 * Gets the delay in milliseconds.

 * @return the delay in milliseconds.

 * @deprecated Use {@link #getDelayDuration()}.

 */

@Deprecated public long getDelay(){

  return delayDuration.toMillis();

}

Location: Tailer.java

Content: 

/** 

 * Gets the delay Duration.

 * @return the delay Duration.

 * @since 2.12.0

 */

public Duration getDelayDuration(){

  return delayDuration;

}

Location: Tailer.java

Content: 

/** 

 * Gets whether to keep on running.

 * @return whether to keep on running.

 * @since 2.5

 */

protected boolean getRun(){

  return run;

}

Location: Tailer.java

Content: 

/** 

 * Gets the Tailable.

 * @return the Tailable

 * @since 2.12.0

 */

public Tailable getTailable(){

  return tailable;

}

Location: Tailer.java

Content: 

/** 

 * Reads new lines.

 * @param reader The file to read

 * @return The new position after the lines have been read

 * @throws java.io.IOException if an I/O error occurs.

 */

private long readLines(final RandomAccessResourceBridge reader) throws IOException {

  try (ByteArrayOutputStream lineBuf=new ByteArrayOutputStream(64)){

    long pos=reader.getPointer();

    long rePos=pos;

    int num;

    boolean seenCR=false;

    while (getRun() && ((num=reader.read(inbuf)) != EOF)) {

      for (int i=0; i < num; i++) {

        final byte ch=inbuf[i];

switch (ch) {

case LF:

          seenCR=false;

        listener.handle(new String(lineBuf.toByteArray(),charset));

      lineBuf.reset();

    rePos=pos + i + 1;

  break;

case CR:

if (seenCR) {

  lineBuf.write(CR);

}

seenCR=true;

break;

default :

if (seenCR) {

seenCR=false;

listener.handle(new String(lineBuf.toByteArray(),charset));

lineBuf.reset();

rePos=pos + i + 1;

}

lineBuf.write(ch);

}

}

pos=reader.getPointer();

}

reader.seek(rePos);

if (listener instanceof TailerListenerAdapter) {

((TailerListenerAdapter)listener).endOfFileReached();

}

return rePos;

}

 }

Location: Tailer.java

Content: 

/** 

 * Creates a Tailer for the given file, with a specified buffer size.

 * @param file the file to follow.

 * @param charset the Charset to be used for reading the file

 * @param listener the TailerListener to use.

 * @param delayMillis the delay between checks of the file for new content in milliseconds.

 * @param end Set to true to tail from the end of the file, false to tail from the beginning of the file.

 * @param reOpen if true, close and reopen the file between reading chunks

 * @param bufSize Buffer size

 * @deprecated Use {@link Builder}.

 */

@Deprecated public Tailer(final File file,final Charset charset,final TailerListener listener,final long delayMillis,final boolean end,final boolean reOpen,final int bufSize){

  this(new TailablePath(file.toPath()),charset,listener,Duration.ofMillis(delayMillis),end,reOpen,bufSize);

}

Location: Tailer.java

Content: 

/** 

 * Creates a Tailer for the given file, starting from the beginning, with the default delay of 1.0s.

 * @param file The file to follow.

 * @param listener the TailerListener to use.

 * @deprecated Use {@link Builder}.

 */

@Deprecated public Tailer(final File file,final TailerListener listener){

  this(file,listener,DEFAULT_DELAY_MILLIS);

}

Location: Tailer.java

Content: 

/** 

 * Creates a Tailer for the given file, starting from the beginning.

 * @param file the file to follow.

 * @param listener the TailerListener to use.

 * @param delayMillis the delay between checks of the file for new content in milliseconds.

 * @deprecated Use {@link Builder}.

 */

@Deprecated public Tailer(final File file,final TailerListener listener,final long delayMillis){

  this(file,listener,delayMillis,false);

}

Location: Tailer.java

Content: 

/** 

 * Creates a Tailer for the given file, with a delay other than the default 1.0s.

 * @param file the file to follow.

 * @param listener the TailerListener to use.

 * @param delayMillis the delay between checks of the file for new content in milliseconds.

 * @param end Set to true to tail from the end of the file, false to tail from the beginning of the file.

 * @deprecated Use {@link Builder}.

 */

@Deprecated public Tailer(final File file,final TailerListener listener,final long delayMillis,final boolean end){

  this(file,listener,delayMillis,end,IOUtils.DEFAULT_BUFFER_SIZE);

}

Location: Tailer.java

Content: 

/** 

 * Creates a Tailer for the given file, with a delay other than the default 1.0s.

 * @param file the file to follow.

 * @param listener the TailerListener to use.

 * @param delayMillis the delay between checks of the file for new content in milliseconds.

 * @param end Set to true to tail from the end of the file, false to tail from the beginning of the file.

 * @param reOpen if true, close and reopen the file between reading chunks

 * @deprecated Use {@link Builder}.

 */

@Deprecated public Tailer(final File file,final TailerListener listener,final long delayMillis,final boolean end,final boolean reOpen){

  this(file,listener,delayMillis,end,reOpen,IOUtils.DEFAULT_BUFFER_SIZE);

}

Location: Tailer.java

Content: 

/** 

 * Creates a Tailer for the given file, with a specified buffer size.

 * @param file the file to follow.

 * @param listener the TailerListener to use.

 * @param delayMillis the delay between checks of the file for new content in milliseconds.

 * @param end Set to true to tail from the end of the file, false to tail from the beginning of the file.

 * @param reOpen if true, close and reopen the file between reading chunks

 * @param bufferSize Buffer size

 * @deprecated Use {@link Builder}.

 */

@Deprecated public Tailer(final File file,final TailerListener listener,final long delayMillis,final boolean end,final boolean reOpen,final int bufferSize){

  this(file,DEFAULT_CHARSET,listener,delayMillis,end,reOpen,bufferSize);

}

Location: Tailer.java

Content: 

/** 

 * Creates a Tailer for the given file, with a specified buffer size.

 * @param file the file to follow.

 * @param listener the TailerListener to use.

 * @param delayMillis the delay between checks of the file for new content in milliseconds.

 * @param end Set to true to tail from the end of the file, false to tail from the beginning of the file.

 * @param bufferSize Buffer size

 * @deprecated Use {@link Builder}.

 */

@Deprecated public Tailer(final File file,final TailerListener listener,final long delayMillis,final boolean end,final int bufferSize){

  this(file,listener,delayMillis,end,false,bufferSize);

}

Location: Tailer.java

Content: 

/** 

 * Creates a Tailer for the given file, with a specified buffer size.

 * @param tailable the file to follow.

 * @param charset the Charset to be used for reading the file

 * @param listener the TailerListener to use.

 * @param delayDuration the delay between checks of the file for new content in milliseconds.

 * @param end Set to true to tail from the end of the file, false to tail from the beginning of the file.

 * @param reOpen if true, close and reopen the file between reading chunks

 * @param bufferSize Buffer size

 */

private Tailer(final Tailable tailable,final Charset charset,final TailerListener listener,final Duration delayDuration,final boolean end,final boolean reOpen,final int bufferSize){

  this.tailable=tailable;

  this.delayDuration=delayDuration;

  this.tailAtEnd=end;

  this.inbuf=IOUtils.byteArray(bufferSize);

  this.listener=listener;

  listener.init(this);

  this.reOpen=reOpen;

  this.charset=charset;

}

