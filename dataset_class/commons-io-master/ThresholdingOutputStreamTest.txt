Location: ThresholdingOutputStreamTest.java

Content: 

@Test public void testSetByteCount() throws Exception {

  final AtomicBoolean reached=new AtomicBoolean(false);

  try (final ThresholdingOutputStream tos=new ThresholdingOutputStream(3){

{

      setByteCount(2);

    }

    @Override protected OutputStream getStream() throws IOException {

      return new ByteArrayOutputStream(4);

    }

    @Override protected void thresholdReached() throws IOException {

      reached.set(true);

    }

  }

){

    tos.write('a');

    assertFalse(reached.get());

    tos.write('a');

    assertTrue(reached.get());

  }

 }

Location: ThresholdingOutputStreamTest.java

Content: 

@Test public void testThresholdIOConsumer() throws Exception {

  final AtomicBoolean reached=new AtomicBoolean();

  reached.set(false);

  try (final ThresholdingOutputStream tos=new ThresholdingOutputStream(1,null,os -> new ByteArrayOutputStream(4))){

    tos.write('a');

    assertFalse(reached.get());

    tos.write('a');

    assertFalse(reached.get());

  }

   reached.set(false);

  try (final ThresholdingOutputStream tos=new ThresholdingOutputStream(1,os -> reached.set(true),null)){

    tos.write('a');

    assertFalse(reached.get());

    tos.write('a');

    assertTrue(reached.get());

  }

   reached.set(false);

  try (final ThresholdingOutputStream tos=new ThresholdingOutputStream(1,os -> reached.set(true),os -> new ByteArrayOutputStream(4))){

    tos.write('a');

    assertFalse(reached.get());

    tos.write('a');

    assertTrue(reached.get());

  }

 }

Location: ThresholdingOutputStreamTest.java

Content: 

@Test public void testThresholdIOConsumerIOException() throws Exception {

  try (final ThresholdingOutputStream tos=new ThresholdingOutputStream(1,os -> {

    throw new IOException("Threshold reached.");

  }

,os -> new ByteArrayOutputStream(4))){

    tos.write('a');

    assertThrows(IOException.class,() -> tos.write('a'));

  }

 }

Location: ThresholdingOutputStreamTest.java

Content: 

@Test public void testThresholdIOConsumerUncheckedException() throws Exception {

  try (final ThresholdingOutputStream tos=new ThresholdingOutputStream(1,os -> {

    throw new IllegalStateException("Threshold reached.");

  }

,os -> new ByteArrayOutputStream(4))){

    tos.write('a');

    assertThrows(IllegalStateException.class,() -> tos.write('a'));

  }

 }

