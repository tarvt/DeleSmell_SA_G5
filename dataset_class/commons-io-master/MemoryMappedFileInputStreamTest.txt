Location: MemoryMappedFileInputStreamTest.java

Content: 

@AfterEach void afterEach(){

  System.gc();

}

Location: MemoryMappedFileInputStreamTest.java

Content: 

private Path createTestFile(final int size) throws IOException {

  final Path file=Files.createTempFile(tempDir,null,null);

  try (OutputStream outputStream=new BufferedOutputStream(Files.newOutputStream(file))){

    Files.write(file,RandomUtils.nextBytes(size));

  }

   return file;

}

Location: MemoryMappedFileInputStreamTest.java

Content: 

@Test void testAlternateBufferSize() throws IOException {

  final Path file=createTestFile(1024 * 1024);

  final byte[] expectedData=Files.readAllBytes(file);

  try (InputStream inputStream=new MemoryMappedFileInputStream(file,1024)){

    assertArrayEquals(expectedData,IOUtils.toByteArray(inputStream));

  }

 }

Location: MemoryMappedFileInputStreamTest.java

Content: 

@Test void testEmptyFile() throws IOException {

  final Path file=createTestFile(0);

  try (InputStream inputStream=new MemoryMappedFileInputStream(file)){

    assertArrayEquals(new byte[0],IOUtils.toByteArray(inputStream));

  }

 }

Location: MemoryMappedFileInputStreamTest.java

Content: 

@Test void testLargerFile() throws IOException {

  final Path file=createTestFile(1024 * 1024);

  final byte[] expectedData=Files.readAllBytes(file);

  try (InputStream inputStream=new MemoryMappedFileInputStream(file)){

    assertArrayEquals(expectedData,IOUtils.toByteArray(inputStream));

  }

 }

Location: MemoryMappedFileInputStreamTest.java

Content: 

@Test void testReadAfterClose() throws IOException {

  final Path file=createTestFile(1 * 1024 * 1024);

  try (InputStream inputStream=new MemoryMappedFileInputStream(file,1024)){

    inputStream.close();

    Assertions.assertThrows(IOException.class,() -> IOUtils.toByteArray(inputStream));

  }

 }

Location: MemoryMappedFileInputStreamTest.java

Content: 

@Test void testReadSingleByte() throws IOException {

  final Path file=createTestFile(2);

  final byte[] expectedData=Files.readAllBytes(file);

  try (InputStream inputStream=new MemoryMappedFileInputStream(file,1024)){

    final int b1=inputStream.read();

    final int b2=inputStream.read();

    assertEquals(-1,inputStream.read());

    assertArrayEquals(expectedData,new byte[]{(byte)b1,(byte)b2});

  }

 }

Location: MemoryMappedFileInputStreamTest.java

Content: 

@Test void testSkipAtStart() throws IOException {

  final Path file=createTestFile(100);

  final byte[] expectedData=Files.readAllBytes(file);

  try (InputStream inputStream=new MemoryMappedFileInputStream(file,10)){

    assertEquals(1,inputStream.skip(1));

    final byte[] data=IOUtils.toByteArray(inputStream);

    assertArrayEquals(Arrays.copyOfRange(expectedData,1,expectedData.length),data);

  }

 }

Location: MemoryMappedFileInputStreamTest.java

Content: 

@Test void testSkipEmpty() throws IOException {

  final Path file=createTestFile(0);

  try (InputStream inputStream=new MemoryMappedFileInputStream(file)){

    assertEquals(0,inputStream.skip(5));

    assertArrayEquals(new byte[0],IOUtils.toByteArray(inputStream));

  }

 }

Location: MemoryMappedFileInputStreamTest.java

Content: 

@Test void testSkipInCurrentBuffer() throws IOException {

  final Path file=createTestFile(100);

  final byte[] expectedData=Files.readAllBytes(file);

  try (InputStream inputStream=new MemoryMappedFileInputStream(file,10)){

    IOUtils.toByteArray(inputStream,5);

    assertEquals(3,inputStream.skip(3));

    final byte[] data=IOUtils.toByteArray(inputStream);

    assertArrayEquals(Arrays.copyOfRange(expectedData,8,expectedData.length),data);

  }

 }

Location: MemoryMappedFileInputStreamTest.java

Content: 

@ParameterizedTest @ValueSource(ints={-5,-1,0}) void testSkipNoop(final int amountToSkip) throws IOException {

  final Path file=createTestFile(10);

  final byte[] expectedData=Files.readAllBytes(file);

  try (InputStream inputStream=new MemoryMappedFileInputStream(file)){

    assertEquals(0,inputStream.skip(amountToSkip));

    assertArrayEquals(expectedData,IOUtils.toByteArray(inputStream));

  }

 }

Location: MemoryMappedFileInputStreamTest.java

Content: 

@Test void testSkipOutOfCurrentBuffer() throws IOException {

  final Path file=createTestFile(100);

  final byte[] expectedData=Files.readAllBytes(file);

  try (InputStream inputStream=new MemoryMappedFileInputStream(file,10)){

    IOUtils.toByteArray(inputStream,5);

    assertEquals(6,inputStream.skip(6));

    final byte[] data=IOUtils.toByteArray(inputStream);

    assertArrayEquals(Arrays.copyOfRange(expectedData,11,expectedData.length),data);

  }

 }

Location: MemoryMappedFileInputStreamTest.java

Content: 

@Test void testSkipPastEof() throws IOException {

  final Path file=createTestFile(100);

  try (InputStream inputStream=new MemoryMappedFileInputStream(file,10)){

    IOUtils.toByteArray(inputStream,5);

    assertEquals(95,inputStream.skip(96));

    assertArrayEquals(new byte[0],IOUtils.toByteArray(inputStream));

  }

 }

Location: MemoryMappedFileInputStreamTest.java

Content: 

@Test void testSkipToEndOfCurrentBuffer() throws IOException {

  final Path file=createTestFile(100);

  final byte[] expectedData=Files.readAllBytes(file);

  try (InputStream inputStream=new MemoryMappedFileInputStream(file,10)){

    IOUtils.toByteArray(inputStream,5);

    assertEquals(5,inputStream.skip(5));

    final byte[] data=IOUtils.toByteArray(inputStream);

    assertArrayEquals(Arrays.copyOfRange(expectedData,10,expectedData.length),data);

  }

 }

Location: MemoryMappedFileInputStreamTest.java

Content: 

@Test void testSmallFile() throws IOException {

  final Path file=createTestFile(100);

  final byte[] expectedData=Files.readAllBytes(file);

  try (InputStream inputStream=new MemoryMappedFileInputStream(file)){

    assertArrayEquals(expectedData,IOUtils.toByteArray(inputStream));

  }

 }

