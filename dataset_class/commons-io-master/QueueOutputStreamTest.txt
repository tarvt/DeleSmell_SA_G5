Location: QueueOutputStreamTest.java

Content: 

@AfterAll public static void afterAll(){

  executorService.shutdown();

}

Location: QueueOutputStreamTest.java

Content: 

private static <T>T callInThrowAwayThread(final Callable<T> callable) throws Exception {

  final Exchanger<T> exchanger=new Exchanger<>();

  executorService.submit(() -> {

    final T value=callable.call();

    exchanger.exchange(value);

    return null;

  }

);

  return exchanger.exchange(null);

}

Location: QueueOutputStreamTest.java

Content: 

@Test public void testNullArgument(){

  assertThrows(NullPointerException.class,() -> new QueueOutputStream(null),"queue is required");

}

Location: QueueOutputStreamTest.java

Content: 

@Test public void writeInterrupted() throws Exception {

  try (final QueueOutputStream outputStream=new QueueOutputStream(new LinkedBlockingQueue<>(1));final QueueInputStream inputStream=outputStream.newQueueInputStream()){

    final int timeout=1;

    final Exchanger<Thread> writerThreadExchanger=new Exchanger<>();

    final Exchanger<Exception> exceptionExchanger=new Exchanger<>();

    executorService.submit(() -> {

      final Thread writerThread=writerThreadExchanger.exchange(null,timeout,SECONDS);

      writerThread.interrupt();

      return null;

    }

);

    executorService.submit(() -> {

      try {

        writerThreadExchanger.exchange(Thread.currentThread(),timeout,SECONDS);

        outputStream.write("ABC".getBytes(StandardCharsets.UTF_8));

      }

 catch (      final Exception e) {

        Thread.interrupted();

        exceptionExchanger.exchange(e,timeout,SECONDS);

      }

      return null;

    }

);

    final Exception exception=exceptionExchanger.exchange(null,timeout,SECONDS);

    assertNotNull(exception);

    assertEquals(exception.getClass(),InterruptedIOException.class);

  }

 }

Location: QueueOutputStreamTest.java

Content: 

@Test public void writeString() throws Exception {

  try (final QueueOutputStream outputStream=new QueueOutputStream();final QueueInputStream inputStream=outputStream.newQueueInputStream()){

    outputStream.write("ABC".getBytes(UTF_8));

    final String value=IOUtils.toString(inputStream,UTF_8);

    assertEquals("ABC",value);

  }

 }

Location: QueueOutputStreamTest.java

Content: 

@Test public void writeStringMultiThread() throws Exception {

  try (final QueueOutputStream outputStream=callInThrowAwayThread(QueueOutputStream::new);final QueueInputStream inputStream=callInThrowAwayThread(outputStream::newQueueInputStream)){

    callInThrowAwayThread(() -> {

      outputStream.write("ABC".getBytes(UTF_8));

      return null;

    }

);

    final String value=callInThrowAwayThread(() -> IOUtils.toString(inputStream,UTF_8));

    assertEquals("ABC",value);

  }

 }

