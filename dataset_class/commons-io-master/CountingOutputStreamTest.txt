Location: CountingOutputStreamTest.java

Content: 

private void assertByteArrayEquals(final String msg,final byte[] array,final int start,final int end){

  for (int i=start; i < end; i++) {

    assertEquals(array[i],i - start,msg + ": array[" + i+ "] mismatch");

  }

}

Location: CountingOutputStreamTest.java

Content: 

@Test public void testCounting() throws IOException {

  final ByteArrayOutputStream baos=new ByteArrayOutputStream();

  try (final CountingOutputStream cos=new CountingOutputStream(baos)){

    for (int i=0; i < 20; i++) {

      cos.write(i);

    }

    assertByteArrayEquals("CountingOutputStream.write(int)",baos.toByteArray(),0,20);

    assertEquals(cos.getCount(),20,"CountingOutputStream.getCount()");

    final byte[] array=new byte[10];

    for (int i=20; i < 30; i++) {

      array[i - 20]=(byte)i;

    }

    cos.write(array);

    assertByteArrayEquals("CountingOutputStream.write(byte[])",baos.toByteArray(),0,30);

    assertEquals(cos.getCount(),30,"CountingOutputStream.getCount()");

    for (int i=25; i < 35; i++) {

      array[i - 25]=(byte)i;

    }

    cos.write(array,5,5);

    assertByteArrayEquals("CountingOutputStream.write(byte[], int, int)",baos.toByteArray(),0,35);

    assertEquals(cos.getCount(),35,"CountingOutputStream.getCount()");

    final int count=cos.resetCount();

    assertEquals(count,35,"CountingOutputStream.resetCount()");

    for (int i=0; i < 10; i++) {

      cos.write(i);

    }

    assertByteArrayEquals("CountingOutputStream.write(int)",baos.toByteArray(),35,45);

    assertEquals(cos.getCount(),10,"CountingOutputStream.getCount()");

  }

 }

Location: CountingOutputStreamTest.java

Content: 

@Test public void testLargeFiles_IO84() throws Exception {

  final long size=(long)Integer.MAX_VALUE + (long)1;

  final NullInputStream mock=new NullInputStream(size);

  final CountingOutputStream cos=new CountingOutputStream(NullOutputStream.INSTANCE);

  IOUtils.copyLarge(mock,cos);

  try {

    cos.getCount();

    fail("Expected getCount() to throw an ArithmeticException");

  }

 catch (  final ArithmeticException ae) {

  }

  try {

    cos.resetCount();

    fail("Expected resetCount() to throw an ArithmeticException");

  }

 catch (  final ArithmeticException ae) {

  }

  mock.close();

  IOUtils.copyLarge(mock,cos);

  assertEquals(size,cos.getByteCount(),"getByteCount()");

  assertEquals(size,cos.resetByteCount(),"resetByteCount()");

}

