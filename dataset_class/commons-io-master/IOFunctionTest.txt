Location: IOFunctionTest.java

Content: 

@Test public void testAndThenConsumer() throws IOException {

  final Holder<Integer> holder=new Holder<>();

  final IOFunction<InputStream,Integer> readByte=InputStream::read;

  final Consumer<Integer> sinkInteger=i -> {

    holder.value=i * i;

  }

;

  final IOConsumer<InputStream> productFunction=readByte.andThen(sinkInteger);

  final InputStream is=new ByteArrayInputStream(new byte[]{2,3});

  productFunction.accept(is);

  assertEquals(4,holder.value);

  productFunction.accept(is);

  assertEquals(9,holder.value);

}

Location: IOFunctionTest.java

Content: 

@Test public void testAndThenFunction() throws IOException {

  final IOFunction<InputStream,Integer> readByte=InputStream::read;

  final Function<Integer,Integer> squareInteger=i -> i * i;

  final IOFunction<InputStream,Integer> productFunction=readByte.andThen(squareInteger);

  final InputStream is=new ByteArrayInputStream(new byte[]{2,3});

  assertEquals(4,productFunction.apply(is));

  assertEquals(9,productFunction.apply(is));

}

Location: IOFunctionTest.java

Content: 

@Test public void testAndThenIOConsumer() throws IOException {

  final Holder<Integer> holder=new Holder<>();

  final IOFunction<InputStream,Integer> readByte=InputStream::read;

  final IOConsumer<Integer> sinkInteger=i -> {

    holder.value=i * i;

  }

;

  final IOConsumer<InputStream> productFunction=readByte.andThen(sinkInteger);

  final InputStream is=new ByteArrayInputStream(new byte[]{2,3});

  productFunction.accept(is);

  assertEquals(4,holder.value);

  productFunction.accept(is);

  assertEquals(9,holder.value);

}

Location: IOFunctionTest.java

Content: 

@Test public void testAndThenIOFunction() throws IOException {

  final IOFunction<InputStream,Integer> readByte=InputStream::read;

  final IOFunction<Integer,Integer> squareInteger=i -> i * i;

  final IOFunction<InputStream,Integer> productFunction=readByte.andThen(squareInteger);

  final InputStream is=new ByteArrayInputStream(new byte[]{2,3});

  assertEquals(4,productFunction.apply(is));

  assertEquals(9,productFunction.apply(is));

}

Location: IOFunctionTest.java

Content: 

@Test public void testApply() throws IOException {

  final IOFunction<InputStream,Integer> readByte=InputStream::read;

  final InputStream is=new ByteArrayInputStream(new byte[]{(byte)0xa,(byte)0xb,(byte)0xc});

  assertEquals(0xa,readByte.apply(is));

  assertEquals(0xb,readByte.apply(is));

  assertEquals(0xc,readByte.apply(is));

  assertEquals(-1,readByte.apply(is));

}

Location: IOFunctionTest.java

Content: 

@Test public void testApplyRaisesException(){

  final IOFunction<InputStream,Integer> raiseException=is -> {

    throw new IOException("Boom!");

  }

;

  final InputStream is=new ByteArrayInputStream(new byte[]{(byte)0xa,(byte)0xb,(byte)0xc});

  assertThrows(IOException.class,() -> {

    raiseException.apply(is);

  }

);

}

Location: IOFunctionTest.java

Content: 

@Test public void testComposeFunction() throws IOException {

  final Function<InputStream,Integer> alwaysSeven=is -> 7;

  final IOFunction<Integer,Integer> squareInteger=i -> i * i;

  final IOFunction<InputStream,Integer> productFunction=squareInteger.compose(alwaysSeven);

  final InputStream is=new ByteArrayInputStream(new byte[]{2,3});

  assertEquals(49,productFunction.apply(is));

  assertEquals(49,productFunction.apply(is));

}

Location: IOFunctionTest.java

Content: 

@Test public void testComposeIOFunction() throws IOException {

  final IOFunction<InputStream,Integer> readByte=InputStream::read;

  final IOFunction<Integer,Integer> squareInteger=i -> i * i;

  final IOFunction<InputStream,Integer> productFunction=squareInteger.compose(readByte);

  final InputStream is=new ByteArrayInputStream(new byte[]{2,3});

  assertEquals(4,productFunction.apply(is));

  assertEquals(9,productFunction.apply(is));

}

Location: IOFunctionTest.java

Content: 

@Test public void testComposeIOSupplier() throws IOException {

  final InputStream is=new ByteArrayInputStream(new byte[]{2,3});

  final IOSupplier<Integer> readByte=() -> is.read();

  final IOFunction<Integer,Integer> squareInteger=i -> i * i;

  final IOSupplier<Integer> productFunction=squareInteger.compose(readByte);

  assertEquals(4,productFunction.get());

  assertEquals(9,productFunction.get());

}

Location: IOFunctionTest.java

Content: 

@Test public void testComposeSupplier() throws IOException {

  final Supplier<Integer> alwaysNine=() -> 9;

  final IOFunction<Integer,Integer> squareInteger=i -> i * i;

  final IOSupplier<Integer> productFunction=squareInteger.compose(alwaysNine);

  assertEquals(81,productFunction.get());

  assertEquals(81,productFunction.get());

}

Location: IOFunctionTest.java

Content: 

@Test public void testIdentity() throws IOException {

  final IOFunction<InputStream,InputStream> identityFunction=IOFunction.identity();

  try (final InputStream is=new ByteArrayInputStream(new byte[]{(byte)0xa,(byte)0xb,(byte)0xc})){

    assertEquals(is,identityFunction.apply(is));

  }

 }

