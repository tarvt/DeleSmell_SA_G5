Location: PathUtilsDeleteFileTest.java

Content: 

@Test public void testDeleteBrokenLink() throws IOException {

  assumeFalse(SystemUtils.IS_OS_WINDOWS);

  final Path missingFile=tempDir.resolve("missing.txt");

  final Path brokenLink=tempDir.resolve("broken.txt");

  Files.createSymbolicLink(brokenLink,missingFile);

  assertTrue(Files.exists(brokenLink,LinkOption.NOFOLLOW_LINKS));

  assertFalse(Files.exists(missingFile,LinkOption.NOFOLLOW_LINKS));

  PathUtils.deleteFile(brokenLink);

  assertFalse(Files.exists(brokenLink,LinkOption.NOFOLLOW_LINKS),"Symbolic link not removed");

}

Location: PathUtilsDeleteFileTest.java

Content: 

/** 

 * Tests a directory with one file of size 0.

 */

@Test public void testDeleteFileDirectory1FileSize0() throws IOException {

  final String fileName="file-size-0.bin";

  PathUtils.copyFileToDirectory(Paths.get("src/test/resources/org/apache/commons/io/dirs-1-file-size-0/" + fileName),tempDir);

  assertCounts(0,1,0,PathUtils.deleteFile(tempDir.resolve(fileName)));

  Files.deleteIfExists(tempDir);

}

Location: PathUtilsDeleteFileTest.java

Content: 

/** 

 * Tests a directory with one file of size 1.

 */

@Test public void testDeleteFileDirectory1FileSize1() throws IOException {

  final String fileName="file-size-1.bin";

  PathUtils.copyFileToDirectory(Paths.get("src/test/resources/org/apache/commons/io/dirs-1-file-size-1/" + fileName),tempDir);

  assertCounts(0,1,1,PathUtils.deleteFile(tempDir.resolve(fileName)));

  Files.deleteIfExists(tempDir);

}

Location: PathUtilsDeleteFileTest.java

Content: 

/** 

 * Tests a file that does not exist.

 */

@Test public void testDeleteFileDoesNotExist() throws IOException {

  testDeleteFileEmpty(PathUtils.deleteFile(tempDir.resolve("file-does-not-exist.bin")));

  Files.deleteIfExists(tempDir);

}

Location: PathUtilsDeleteFileTest.java

Content: 

/** 

 * Tests an empty folder.

 */

@Test public void testDeleteFileEmptyDirectory() throws IOException {

  Assertions.assertThrows(NoSuchFileException.class,() -> testDeleteFileEmpty(PathUtils.deleteFile(tempDir)));

  Files.deleteIfExists(tempDir);

}

Location: PathUtilsDeleteFileTest.java

Content: 

private void testDeleteFileEmpty(final PathCounters pathCounts){

  assertCounts(0,0,0,pathCounts);

}

Location: PathUtilsDeleteFileTest.java

Content: 

/** 

 * Tests a directory with one file of size 1.

 */

@Test public void testDeleteReadOnlyFileDirectory1FileSize1() throws IOException {

  final String fileName="file-size-1.bin";

  PathUtils.copyFileToDirectory(Paths.get("src/test/resources/org/apache/commons/io/dirs-1-file-size-1/" + fileName),tempDir);

  final Path resolved=tempDir.resolve(fileName);

  PathUtils.setReadOnly(resolved,true);

  if (SystemUtils.IS_OS_WINDOWS) {

    assertFalse(Files.isWritable(resolved));

    assertThrows(IOException.class,() -> PathUtils.deleteFile(resolved));

  }

  assertCounts(0,1,1,PathUtils.deleteFile(resolved,StandardDeleteOption.OVERRIDE_READ_ONLY));

  Files.deleteIfExists(tempDir);

}

Location: PathUtilsDeleteFileTest.java

Content: 

/** 

 * Tests a directory with one file of size 1.

 */

@Test public void testSetReadOnlyFileDirectory1FileSize1() throws IOException {

  final String fileName="file-size-1.bin";

  PathUtils.copyFileToDirectory(Paths.get("src/test/resources/org/apache/commons/io/dirs-1-file-size-1/" + fileName),tempDir);

  final Path resolved=tempDir.resolve(fileName);

  PathUtils.setReadOnly(resolved,true);

  if (SystemUtils.IS_OS_WINDOWS) {

    assertFalse(Files.isWritable(resolved));

    assertThrows(IOException.class,() -> PathUtils.deleteFile(resolved));

  }

  PathUtils.setReadOnly(resolved,false);

  PathUtils.deleteFile(resolved);

  Files.deleteIfExists(tempDir);

}

