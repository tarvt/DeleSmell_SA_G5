Location: TeeReader.java

Content: 

/** 

 * Reads characters from the proxied reader and writes the read characters to the associated writer.

 * @param target character buffer

 * @return number of characters read, or -1 if the reader has ended

 * @throws IOException if the reader could not be read (or written)

 */

@Override public int read(final CharBuffer target) throws IOException {

  final int originalPosition=target.position();

  final int n=super.read(target);

  if (n != EOF) {

    final int newPosition=target.position();

    final int newLimit=target.limit();

    try {

      target.position(originalPosition).limit(newPosition);

      branch.append(target);

    }

  finally {

      target.position(newPosition).limit(newLimit);

    }

  }

  return n;

}

Location: TeeReader.java

Content: 

/** 

 * Creates a TeeReader that proxies the given  {@link Reader} and copies all read characters to the given{@link Writer}. The given writer will not be closed when this reader gets closed.

 * @param input  reader to be proxied

 * @param branch writer that will receive a copy of all characters read

 */

public TeeReader(final Reader input,final Writer branch){

  this(input,branch,false);

}

Location: TeeReader.java

Content: 

/** 

 * Creates a TeeReader that proxies the given  {@link Reader} and copies all read characters to the given{@link Writer}. The given writer will be closed when this reader gets closed if the closeBranch parameter is {@code true}.

 * @param input       reader to be proxied

 * @param branch      writer that will receive a copy of all characters read

 * @param closeBranch flag for closing also the writer when this reader is closed

 */

public TeeReader(final Reader input,final Writer branch,final boolean closeBranch){

  super(input);

  this.branch=branch;

  this.closeBranch=closeBranch;

}

