Location: CharSequenceInputStreamTest.java

Content: 

private int checkAvail(final InputStream is,final int min) throws Exception {

  final int available=is.available();

  assertTrue(available >= min,"avail should be >= " + min + ", but was "+ available);

  return available;

}

Location: CharSequenceInputStreamTest.java

Content: 

private Set<String> getRequiredCharsetNames(){

  return Charsets.requiredCharsets().keySet();

}

Location: CharSequenceInputStreamTest.java

Content: 

private boolean isAvailabilityTestableForCharset(final String csName){

  return Charset.forName(csName).canEncode() && !"COMPOUND_TEXT".equalsIgnoreCase(csName) && !"x-COMPOUND_TEXT".equalsIgnoreCase(csName)&& !isOddBallLegacyCharsetThatDoesNotSupportFrenchCharacters(csName);

}

Location: CharSequenceInputStreamTest.java

Content: 

private boolean isOddBallLegacyCharsetThatDoesNotSupportFrenchCharacters(final String csName){

  return "x-IBM1388".equalsIgnoreCase(csName) || "ISO-2022-CN".equalsIgnoreCase(csName) || "ISO-2022-JP".equalsIgnoreCase(csName)|| "Shift_JIS".equalsIgnoreCase(csName);

}

Location: CharSequenceInputStreamTest.java

Content: 

@Test public void testAvailable() throws Exception {

  for (  final String csName : Charset.availableCharsets().keySet()) {

    try {

      if (isAvailabilityTestableForCharset(csName)) {

        testAvailableSkip(csName);

        testAvailableRead(csName);

      }

    }

 catch (    final UnsupportedOperationException e) {

      fail("Operation not supported for " + csName);

    }

  }

}

Location: CharSequenceInputStreamTest.java

Content: 

private void testAvailableRead(final String csName) throws Exception {

  final String input="test";

  try (InputStream r=new CharSequenceInputStream(input,csName)){

    int available=checkAvail(r,input.length());

    assertEquals(available - 1,r.skip(available - 1));

    available=checkAvail(r,1);

    final byte[] buff=new byte[available];

    assertEquals(available,r.read(buff,0,available));

  }

 }

Location: CharSequenceInputStreamTest.java

Content: 

private void testAvailableSkip(final String csName) throws Exception {

  final String input="test";

  try (InputStream r=new CharSequenceInputStream(input,csName)){

    int available=checkAvail(r,input.length());

    assertEquals(available - 1,r.skip(available - 1));

    available=checkAvail(r,1);

    assertEquals(1,r.skip(1));

    available=checkAvail(r,0);

  }

 }

Location: CharSequenceInputStreamTest.java

Content: 

@Test public void testBufferedRead_AvailableCharset() throws IOException {

  for (  final String csName : Charset.availableCharsets().keySet()) {

    if (isAvailabilityTestableForCharset(csName)) {

      testBufferedRead(TEST_STRING,csName);

    }

  }

}

Location: CharSequenceInputStreamTest.java

Content: 

@Test public void testBufferedRead_RequiredCharset() throws IOException {

  for (  final String csName : getRequiredCharsetNames()) {

    testBufferedRead(TEST_STRING,csName);

  }

}

Location: CharSequenceInputStreamTest.java

Content: 

private void testBufferedRead(final String testString,final String charsetName) throws IOException {

  final byte[] expected=testString.getBytes(charsetName);

  try (InputStream in=new CharSequenceInputStream(testString,charsetName,512)){

    final byte[] buffer=new byte[128];

    int offset=0;

    while (true) {

      int bufferOffset=random.nextInt(64);

      final int bufferLength=random.nextInt(64);

      int read=in.read(buffer,bufferOffset,bufferLength);

      if (read == -1) {

        assertEquals(expected.length,offset,"EOF: offset should equal length for charset " + charsetName);

        break;

      }

      assertTrue(read <= bufferLength,"Read " + read + " <= "+ bufferLength);

      while (read > 0) {

        assertTrue(offset < expected.length,"offset for " + charsetName + " "+ offset+ " < "+ expected.length);

        assertEquals(expected[offset],buffer[bufferOffset],"bytes should agree for " + charsetName);

        offset++;

        bufferOffset++;

        read--;

      }

    }

  }

 }

Location: CharSequenceInputStreamTest.java

Content: 

@Test public void testBufferedRead_UTF8() throws IOException {

  testBufferedRead(TEST_STRING,"UTF-8");

}

Location: CharSequenceInputStreamTest.java

Content: 

@Test public void testCharsetMismatchInfiniteLoop_RequiredCharsets() throws IOException {

  for (  final String csName : getRequiredCharsetNames()) {

    testCharsetMismatchInfiniteLoop(csName);

  }

}

Location: CharSequenceInputStreamTest.java

Content: 

private void testCharsetMismatchInfiniteLoop(final String csName) throws IOException {

  final char[] inputChars={(char)0xE0,(char)0xB2,(char)0xA0};

  final Charset charset=Charset.forName(csName);

  try (InputStream stream=new CharSequenceInputStream(new String(inputChars),charset,512)){

    IOUtils.toCharArray(stream,charset);

  }

 }

Location: CharSequenceInputStreamTest.java

Content: 

@Test public void testIO_356_B10_D10_S0_UTF16() throws Exception {

  testIO_356(10,10,0,"UTF-16");

}

Location: CharSequenceInputStreamTest.java

Content: 

@Test public void testIO_356_B10_D10_S0_UTF8() throws Exception {

  testIO_356(10,10,0,"UTF-8");

}

Location: CharSequenceInputStreamTest.java

Content: 

@Test public void testIO_356_B10_D10_S1_UTF8() throws Exception {

  testIO_356(10,10,1,"UTF-8");

}

Location: CharSequenceInputStreamTest.java

Content: 

@Test public void testIO_356_B10_D10_S2_UTF8() throws Exception {

  testIO_356(10,10,2,"UTF-8");

}

Location: CharSequenceInputStreamTest.java

Content: 

@Test public void testIO_356_B10_D13_S0_UTF8() throws Exception {

  testIO_356(10,13,0,"UTF-8");

}

Location: CharSequenceInputStreamTest.java

Content: 

@Test public void testIO_356_B10_D13_S1_UTF8() throws Exception {

  testIO_356(10,13,1,"UTF-8");

}

Location: CharSequenceInputStreamTest.java

Content: 

@Test public void testIO_356_B10_D20_S0_UTF8() throws Exception {

  testIO_356(10,20,0,"UTF-8");

}

Location: CharSequenceInputStreamTest.java

Content: 

private void testIO_356(final int bufferSize,final int dataSize,final int readFirst,final String csName) throws Exception {

  final CharSequenceInputStream is=new CharSequenceInputStream(ALPHABET,csName,bufferSize);

  for (int i=0; i < readFirst; i++) {

    final int ch=is.read();

    assertNotEquals(-1,ch);

  }

  is.mark(dataSize);

  final byte[] data1=new byte[dataSize];

  final int readCount1=is.read(data1);

  assertEquals(dataSize,readCount1);

  is.reset();

  final byte[] data2=new byte[dataSize];

  final int readCount2=is.read(data2);

  assertEquals(dataSize,readCount2);

  is.close();

  assertArrayEquals(data1,data2,"bufferSize=" + bufferSize + " dataSize="+ dataSize);

}

Location: CharSequenceInputStreamTest.java

Content: 

private void testIO_356_Loop(final String csName,final int maxBytesPerChar) throws Exception {

  for (int bufferSize=maxBytesPerChar; bufferSize <= 10; bufferSize++) {

    for (int dataSize=1; dataSize <= 20; dataSize++) {

      testIO_356(bufferSize,dataSize,0,csName);

    }

  }

}

Location: CharSequenceInputStreamTest.java

Content: 

@Test public void testIO_356_Loop_UTF16() throws Exception {

  final Charset charset=StandardCharsets.UTF_16;

  testIO_356_Loop(charset.displayName(),(int)ReaderInputStream.minBufferSize(charset.newEncoder()));

}

Location: CharSequenceInputStreamTest.java

Content: 

@Test public void testIO_356_Loop_UTF8() throws Exception {

  final Charset charset=StandardCharsets.UTF_8;

  testIO_356_Loop(charset.displayName(),(int)ReaderInputStream.minBufferSize(charset.newEncoder()));

}

Location: CharSequenceInputStreamTest.java

Content: 

@Test public void testLargeBufferedRead_RequiredCharsets() throws IOException {

  for (  final String csName : getRequiredCharsetNames()) {

    testBufferedRead(LARGE_TEST_STRING,csName);

  }

}

Location: CharSequenceInputStreamTest.java

Content: 

@Test public void testLargeBufferedRead_UTF8() throws IOException {

  testBufferedRead(LARGE_TEST_STRING,"UTF-8");

}

Location: CharSequenceInputStreamTest.java

Content: 

@Test public void testLargeSingleByteRead_RequiredCharsets() throws IOException {

  for (  final String csName : getRequiredCharsetNames()) {

    testSingleByteRead(LARGE_TEST_STRING,csName);

  }

}

Location: CharSequenceInputStreamTest.java

Content: 

@Test public void testLargeSingleByteRead_UTF8() throws IOException {

  testSingleByteRead(LARGE_TEST_STRING,"UTF-8");

}

Location: CharSequenceInputStreamTest.java

Content: 

@Test @Disabled public void testMarkReset_RequiredCharsets() throws Exception {

  for (  final String csName : getRequiredCharsetNames()) {

    testMarkReset(csName);

  }

}

Location: CharSequenceInputStreamTest.java

Content: 

private void testMarkReset(final String csName) throws Exception {

  try (InputStream r=new CharSequenceInputStream("test",csName)){

    assertEquals(2,r.skip(2));

    r.mark(0);

    assertEquals('s',r.read(),csName);

    assertEquals('t',r.read(),csName);

    assertEquals(-1,r.read(),csName);

    r.reset();

    assertEquals('s',r.read(),csName);

    assertEquals('t',r.read(),csName);

    assertEquals(-1,r.read(),csName);

    r.reset();

    r.reset();

  }

 }

Location: CharSequenceInputStreamTest.java

Content: 

@Test public void testMarkReset_USASCII() throws Exception {

  testMarkReset("US-ASCII");

}

Location: CharSequenceInputStreamTest.java

Content: 

@Test public void testMarkReset_UTF8() throws Exception {

  testMarkReset("UTF-8");

}

Location: CharSequenceInputStreamTest.java

Content: 

@Test public void testMarkSupported() throws Exception {

  try (InputStream r=new CharSequenceInputStream("test","UTF-8")){

    assertTrue(r.markSupported());

  }

 }

Location: CharSequenceInputStreamTest.java

Content: 

@Test public void testReadZero_EmptyString() throws Exception {

  try (InputStream r=new CharSequenceInputStream("","UTF-8")){

    final byte[] bytes=new byte[30];

    assertEquals(0,r.read(bytes,0,0));

  }

 }

Location: CharSequenceInputStreamTest.java

Content: 

@Test public void testReadZero_RequiredCharsets() throws Exception {

  for (  final String csName : getRequiredCharsetNames()) {

    testReadZero(csName);

  }

}

Location: CharSequenceInputStreamTest.java

Content: 

private void testReadZero(final String csName) throws Exception {

  try (InputStream r=new CharSequenceInputStream("test",csName)){

    final byte[] bytes=new byte[30];

    assertEquals(0,r.read(bytes,0,0));

  }

 }

Location: CharSequenceInputStreamTest.java

Content: 

@Test public void testSingleByteRead_RequiredCharsets() throws IOException {

  for (  final String csName : getRequiredCharsetNames()) {

    testSingleByteRead(TEST_STRING,csName);

  }

}

Location: CharSequenceInputStreamTest.java

Content: 

private void testSingleByteRead(final String testString,final String charsetName) throws IOException {

  final byte[] bytes=testString.getBytes(charsetName);

  try (InputStream in=new CharSequenceInputStream(testString,charsetName,512)){

    for (    final byte b : bytes) {

      final int read=in.read();

      assertTrue(read >= 0,"read " + read + " >=0 ");

      assertTrue(read <= 255,"read " + read + " <= 255");

      assertEquals(b,(byte)read,"Should agree with input");

    }

    assertEquals(-1,in.read());

  }

 }

Location: CharSequenceInputStreamTest.java

Content: 

@Test public void testSingleByteRead_UTF16() throws IOException {

  testSingleByteRead(TEST_STRING,"UTF-16");

}

Location: CharSequenceInputStreamTest.java

Content: 

@Test public void testSingleByteRead_UTF8() throws IOException {

  testSingleByteRead(TEST_STRING,"UTF-8");

}

Location: CharSequenceInputStreamTest.java

Content: 

@Test @Disabled public void testSkip_RequiredCharsets() throws Exception {

  for (  final String csName : getRequiredCharsetNames()) {

    testSkip(csName);

  }

}

Location: CharSequenceInputStreamTest.java

Content: 

private void testSkip(final String csName) throws Exception {

  try (InputStream r=new CharSequenceInputStream("test",csName)){

    assertEquals(1,r.skip(1));

    assertEquals(2,r.skip(2));

    assertEquals('t',r.read(),csName);

    r.skip(100);

    assertEquals(-1,r.read(),csName);

  }

 }

Location: CharSequenceInputStreamTest.java

Content: 

@Test public void testSkip_USASCII() throws Exception {

  testSkip("US-ASCII");

}

Location: CharSequenceInputStreamTest.java

Content: 

@Test public void testSkip_UTF8() throws Exception {

  testSkip("UTF-8");

}

