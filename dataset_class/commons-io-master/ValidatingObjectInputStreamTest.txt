Location: ValidatingObjectInputStreamTest.java

Content: 

@Test public void acceptCustomMatcher() throws Exception {

  assertSerialization(closeAfterEachTest(new ValidatingObjectInputStream(testStream)).accept(ALWAYS_TRUE));

}

Location: ValidatingObjectInputStreamTest.java

Content: 

@Test public void acceptPattern() throws Exception {

  assertSerialization(closeAfterEachTest(new ValidatingObjectInputStream(testStream)).accept(Pattern.compile(".*MockSerializedClass.*")));

}

Location: ValidatingObjectInputStreamTest.java

Content: 

@Test public void acceptWildcard() throws Exception {

  assertSerialization(closeAfterEachTest(new ValidatingObjectInputStream(testStream)).accept("org.apache.commons.io.*"));

}

Location: ValidatingObjectInputStreamTest.java

Content: 

private void assertSerialization(final ObjectInputStream ois) throws ClassNotFoundException, IOException {

  final MockSerializedClass result=(MockSerializedClass)(ois.readObject());

  assertEquals(testObject,result);

}

Location: ValidatingObjectInputStreamTest.java

Content: 

@Test public void customInvalidMethod(){

class CustomVOIS extends ValidatingObjectInputStream {

    CustomVOIS(    final InputStream is) throws IOException {

      super(is);

    }

    @Override protected void invalidClassNameFound(    final String className) throws InvalidClassException {

      throw new RuntimeException("Custom exception");

    }

  }

  assertThrows(RuntimeException.class,() -> assertSerialization(closeAfterEachTest(new CustomVOIS(testStream)).reject(Integer.class)));

}

Location: ValidatingObjectInputStreamTest.java

Content: 

@Test public void exceptionIncludesClassName() throws Exception {

  try {

    assertSerialization(closeAfterEachTest(new ValidatingObjectInputStream(testStream)));

    fail("Expected an InvalidClassException");

  }

 catch (  final InvalidClassException ice) {

    final String name=MockSerializedClass.class.getName();

    assertTrue(ice.getMessage().contains(name),"Expecting message to contain " + name);

  }

}

Location: ValidatingObjectInputStreamTest.java

Content: 

@Test public void noAccept(){

  assertThrows(InvalidClassException.class,() -> assertSerialization(closeAfterEachTest(new ValidatingObjectInputStream(testStream))));

}

Location: ValidatingObjectInputStreamTest.java

Content: 

@Test public void ourTestClassAcceptedFirst() throws Exception {

  assertSerialization(closeAfterEachTest(new ValidatingObjectInputStream(testStream)).accept(MockSerializedClass.class,Integer.class));

}

Location: ValidatingObjectInputStreamTest.java

Content: 

@Test public void ourTestClassAcceptedFirstWildcard() throws Exception {

  assertSerialization(closeAfterEachTest(new ValidatingObjectInputStream(testStream)).accept("*MockSerializedClass","*Integer"));

}

Location: ValidatingObjectInputStreamTest.java

Content: 

@Test public void ourTestClassAcceptedSecond() throws Exception {

  assertSerialization(closeAfterEachTest(new ValidatingObjectInputStream(testStream)).accept(Integer.class,MockSerializedClass.class));

}

Location: ValidatingObjectInputStreamTest.java

Content: 

@Test public void ourTestClassAcceptedSecondWildcard() throws Exception {

  assertSerialization(closeAfterEachTest(new ValidatingObjectInputStream(testStream)).accept("*Integer","*MockSerializedClass"));

}

Location: ValidatingObjectInputStreamTest.java

Content: 

@Test public void ourTestClassNotAccepted(){

  assertThrows(InvalidClassException.class,() -> assertSerialization(closeAfterEachTest(new ValidatingObjectInputStream(testStream)).accept(Integer.class)));

}

Location: ValidatingObjectInputStreamTest.java

Content: 

@Test public void ourTestClassOnlyAccepted() throws Exception {

  assertSerialization(closeAfterEachTest(new ValidatingObjectInputStream(testStream)).accept(MockSerializedClass.class));

}

Location: ValidatingObjectInputStreamTest.java

Content: 

@Test public void reject(){

  assertThrows(InvalidClassException.class,() -> assertSerialization(closeAfterEachTest(new ValidatingObjectInputStream(testStream)).accept(Long.class).reject(MockSerializedClass.class,Integer.class)));

}

Location: ValidatingObjectInputStreamTest.java

Content: 

@Test public void rejectCustomMatcher(){

  assertThrows(InvalidClassException.class,() -> assertSerialization(closeAfterEachTest(new ValidatingObjectInputStream(testStream)).accept(MockSerializedClass.class).reject(ALWAYS_TRUE)));

}

Location: ValidatingObjectInputStreamTest.java

Content: 

@Test public void rejectOnly(){

  assertThrows(InvalidClassException.class,() -> assertSerialization(closeAfterEachTest(new ValidatingObjectInputStream(testStream)).reject(Integer.class)));

}

Location: ValidatingObjectInputStreamTest.java

Content: 

@Test public void rejectPattern(){

  assertThrows(InvalidClassException.class,() -> assertSerialization(closeAfterEachTest(new ValidatingObjectInputStream(testStream)).accept(MockSerializedClass.class).reject(Pattern.compile("org.*"))));

}

Location: ValidatingObjectInputStreamTest.java

Content: 

@Test public void rejectPrecedence(){

  assertThrows(InvalidClassException.class,() -> assertSerialization(closeAfterEachTest(new ValidatingObjectInputStream(testStream)).accept(MockSerializedClass.class).reject(MockSerializedClass.class,Integer.class)));

}

Location: ValidatingObjectInputStreamTest.java

Content: 

@Test public void rejectWildcard(){

  assertThrows(InvalidClassException.class,() -> assertSerialization(closeAfterEachTest(new ValidatingObjectInputStream(testStream)).accept(MockSerializedClass.class).reject("org.*")));

}

Location: ValidatingObjectInputStreamTest.java

Content: 

@BeforeEach public void setupMockSerializedClass() throws IOException {

  testObject=new MockSerializedClass(UUID.randomUUID().toString());

  final ByteArrayOutputStream bos=closeAfterEachTest(new ByteArrayOutputStream());

  final ObjectOutputStream oos=closeAfterEachTest(new ObjectOutputStream(bos));

  oos.writeObject(testObject);

  testStream=closeAfterEachTest(new ByteArrayInputStream(bos.toByteArray()));

}

