Location: AndFileFilter.java

Content: 

/** 

 * Constructs a new empty instance.

 * @since 1.1

 */

public AndFileFilter(){

  this(0);

}

Location: AndFileFilter.java

Content: 

/** 

 * Constructs a new instance with the given initial list.

 * @param initialList the initial list.

 */

private AndFileFilter(final ArrayList<IOFileFilter> initialList){

  this.fileFilters=Objects.requireNonNull(initialList,"initialList");

}

Location: AndFileFilter.java

Content: 

/** 

 * Constructs a new instance with the given initial capacity.

 * @param initialCapacity the initial capacity.

 */

private AndFileFilter(final int initialCapacity){

  this(new ArrayList<>(initialCapacity));

}

Location: AndFileFilter.java

Content: 

/** 

 * Constructs a new instance for the give filters.

 * @param fileFilters filters to OR.

 * @since 2.9.0

 */

public AndFileFilter(final IOFileFilter... fileFilters){

  this(Objects.requireNonNull(fileFilters,"fileFilters").length);

  addFileFilter(fileFilters);

}

Location: AndFileFilter.java

Content: 

/** 

 * Constructs a new file filter that ANDs the result of other filters.

 * @param filter1  the first filter, must second be null

 * @param filter2  the first filter, must not be null

 * @throws IllegalArgumentException if either filter is null

 */

public AndFileFilter(final IOFileFilter filter1,final IOFileFilter filter2){

  this(2);

  addFileFilter(filter1);

  addFileFilter(filter2);

}

Location: AndFileFilter.java

Content: 

/** 

 * Constructs a new instance of  {@code AndFileFilter}with the specified list of filters.

 * @param fileFilters  a List of IOFileFilter instances, copied.

 * @since 1.1

 */

public AndFileFilter(final List<IOFileFilter> fileFilters){

  this(new ArrayList<>(Objects.requireNonNull(fileFilters,"fileFilters")));

}

Location: AndFileFilter.java

Content: 

private boolean isEmpty(){

  return this.fileFilters.isEmpty();

}

