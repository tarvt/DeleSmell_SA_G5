Location: ReversedLinesFileReader.java

Content: 

/** 

 * Returns the lines of the file from bottom to top.

 * @return the next line or null if the start of the file is reached

 * @throws IOException if an I/O error occurs.

 */

public String readLine() throws IOException {

  String line=currentFilePart.readLine();

  while (line == null) {

    currentFilePart=currentFilePart.rollOver();

    if (currentFilePart == null) {

      break;

    }

    line=currentFilePart.readLine();

  }

  if (EMPTY_STRING.equals(line) && !trailingNewlineOfFileSkipped) {

    trailingNewlineOfFileSkipped=true;

    line=readLine();

  }

  return line;

}

Location: ReversedLinesFileReader.java

Content: 

/** 

 * Returns  {@code lineCount} lines of the file from bottom to top.<p> If there are less than  {@code lineCount} lines in the file, then that's whatyou get. </p> <p> Note: You can easily flip the result with  {@link Collections#reverse(List)}. </p>

 * @param lineCount How many lines to read.

 * @return A new list

 * @throws IOException if an I/O error occurs.

 * @since 2.8.0

 */

public List<String> readLines(final int lineCount) throws IOException {

  if (lineCount < 0) {

    throw new IllegalArgumentException("lineCount < 0");

  }

  final ArrayList<String> arrayList=new ArrayList<>(lineCount);

  for (int i=0; i < lineCount; i++) {

    final String line=readLine();

    if (line == null) {

      return arrayList;

    }

    arrayList.add(line);

  }

  return arrayList;

}

Location: ReversedLinesFileReader.java

Content: 

/** 

 * Creates a ReversedLinesFileReader with default block size of 4KB and the platform's default encoding.

 * @param file the file to be read

 * @throws IOException if an I/O error occurs.

 * @deprecated 2.5 use {@link #ReversedLinesFileReader(File,Charset)} instead

 */

@Deprecated public ReversedLinesFileReader(final File file) throws IOException {

  this(file,DEFAULT_BLOCK_SIZE,Charset.defaultCharset());

}

Location: ReversedLinesFileReader.java

Content: 

/** 

 * Creates a ReversedLinesFileReader with default block size of 4KB and the specified encoding.

 * @param file    the file to be read

 * @param charset the charset to use, null uses the default Charset.

 * @throws IOException if an I/O error occurs.

 * @since 2.5

 */

public ReversedLinesFileReader(final File file,final Charset charset) throws IOException {

  this(file.toPath(),charset);

}

Location: ReversedLinesFileReader.java

Content: 

/** 

 * Creates a ReversedLinesFileReader with the given block size and encoding.

 * @param file      the file to be read

 * @param blockSize size of the internal buffer (for ideal performance thisshould match with the block size of the underlying file system).

 * @param charset  the encoding of the file, null uses the default Charset.

 * @throws IOException if an I/O error occurs.

 * @since 2.3

 */

public ReversedLinesFileReader(final File file,final int blockSize,final Charset charset) throws IOException {

  this(file.toPath(),blockSize,charset);

}

Location: ReversedLinesFileReader.java

Content: 

/** 

 * Creates a ReversedLinesFileReader with the given block size and encoding.

 * @param file      the file to be read

 * @param blockSize size of the internal buffer (for ideal performance thisshould match with the block size of the underlying file system).

 * @param charsetName  the encoding of the file, null uses the default Charset.

 * @throws IOException                                  if an I/O error occurs

 * @throws java.nio.charset.UnsupportedCharsetException thrown instead of{@link UnsupportedEncodingException}in version 2.2 if the encoding is not supported.

 */

public ReversedLinesFileReader(final File file,final int blockSize,final String charsetName) throws IOException {

  this(file.toPath(),blockSize,charsetName);

}

Location: ReversedLinesFileReader.java

Content: 

/** 

 * Creates a ReversedLinesFileReader with default block size of 4KB and the specified encoding.

 * @param file    the file to be read

 * @param charset the charset to use, null uses the default Charset.

 * @throws IOException if an I/O error occurs.

 * @since 2.7

 */

public ReversedLinesFileReader(final Path file,final Charset charset) throws IOException {

  this(file,DEFAULT_BLOCK_SIZE,charset);

}

Location: ReversedLinesFileReader.java

Content: 

/** 

 * Creates a ReversedLinesFileReader with the given block size and encoding.

 * @param file      the file to be read

 * @param blockSize size of the internal buffer (for ideal performance thisshould match with the block size of the underlying file system).

 * @param charset  the encoding of the file, null uses the default Charset.

 * @throws IOException if an I/O error occurs.

 * @since 2.7

 */

public ReversedLinesFileReader(final Path file,final int blockSize,final Charset charset) throws IOException {

  this.blockSize=blockSize;

  this.charset=Charsets.toCharset(charset);

  final CharsetEncoder charsetEncoder=this.charset.newEncoder();

  final float maxBytesPerChar=charsetEncoder.maxBytesPerChar();

  if (maxBytesPerChar == 1f) {

    byteDecrement=1;

  }

 else   if (this.charset == StandardCharsets.UTF_8) {

    byteDecrement=1;

  }

 else   if (this.charset == Charset.forName("Shift_JIS") || this.charset == Charset.forName("windows-31j") || this.charset == Charset.forName("x-windows-949") || this.charset == Charset.forName("gbk") || this.charset == Charset.forName("x-windows-950")) {

    byteDecrement=1;

  }

 else   if (this.charset == StandardCharsets.UTF_16BE || this.charset == StandardCharsets.UTF_16LE) {

    byteDecrement=2;

  }

 else   if (this.charset == StandardCharsets.UTF_16) {

    throw new UnsupportedEncodingException("For UTF-16, you need to specify the byte order (use UTF-16BE or " + "UTF-16LE)");

  }

 else {

    throw new UnsupportedEncodingException("Encoding " + charset + " is not supported yet (feel free to "+ "submit a patch)");

  }

  this.newLineSequences=new byte[][]{StandardLineSeparator.CRLF.getBytes(this.charset),StandardLineSeparator.LF.getBytes(this.charset),StandardLineSeparator.CR.getBytes(this.charset)};

  this.avoidNewlineSplitBufferSize=newLineSequences[0].length;

  this.channel=Files.newByteChannel(file,StandardOpenOption.READ);

  this.totalByteLength=channel.size();

  int lastBlockLength=(int)(this.totalByteLength % blockSize);

  if (lastBlockLength > 0) {

    this.totalBlockCount=this.totalByteLength / blockSize + 1;

  }

 else {

    this.totalBlockCount=this.totalByteLength / blockSize;

    if (this.totalByteLength > 0) {

      lastBlockLength=blockSize;

    }

  }

  this.currentFilePart=new FilePart(totalBlockCount,lastBlockLength,null);

}

Location: ReversedLinesFileReader.java

Content: 

/** 

 * Creates a ReversedLinesFileReader with the given block size and encoding.

 * @param file        the file to be read

 * @param blockSize   size of the internal buffer (for ideal performance thisshould match with the block size of the underlying file system).

 * @param charsetName the encoding of the file, null uses the default Charset.

 * @throws IOException                                  if an I/O error occurs

 * @throws java.nio.charset.UnsupportedCharsetException thrown instead of{@link UnsupportedEncodingException}in version 2.2 if the encoding is not supported.

 * @since 2.7

 */

public ReversedLinesFileReader(final Path file,final int blockSize,final String charsetName) throws IOException {

  this(file,blockSize,Charsets.toCharset(charsetName));

}

Location: ReversedLinesFileReader.java

Content: 

/** 

 * Returns the last  {@code lineCount} lines of the file.<p> If there are less than  {@code lineCount} lines in the file, then that's whatyou get. </p>

 * @param lineCount How many lines to read.

 * @return A String.

 * @throws IOException if an I/O error occurs.

 * @since 2.8.0

 */

public String toString(final int lineCount) throws IOException {

  final List<String> lines=readLines(lineCount);

  Collections.reverse(lines);

  return lines.isEmpty() ? EMPTY_STRING : String.join(System.lineSeparator(),lines) + System.lineSeparator();

}

