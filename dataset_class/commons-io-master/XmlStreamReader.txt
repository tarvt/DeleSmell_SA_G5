Location: XmlStreamReader.java

Content: 

/** 

 * Calculate the HTTP encoding.

 * @param httpContentType The HTTP content type

 * @param bomEnc BOM encoding

 * @param xmlGuessEnc XML Guess encoding

 * @param xmlEnc XML encoding

 * @param lenient indicates if the charset encoding detection should berelaxed.

 * @return the HTTP encoding

 * @throws IOException thrown if there is a problem reading the stream.

 */

String calculateHttpEncoding(final String httpContentType,final String bomEnc,final String xmlGuessEnc,final String xmlEnc,final boolean lenient) throws IOException {

  if (lenient && xmlEnc != null) {

    return xmlEnc;

  }

  final String cTMime=getContentTypeMime(httpContentType);

  final String cTEnc=getContentTypeEncoding(httpContentType);

  final boolean appXml=isAppXml(cTMime);

  final boolean textXml=isTextXml(cTMime);

  if (!appXml && !textXml) {

    final String msg=MessageFormat.format(HTTP_EX_3,cTMime,cTEnc,bomEnc,xmlGuessEnc,xmlEnc);

    throw new XmlStreamReaderException(msg,cTMime,cTEnc,bomEnc,xmlGuessEnc,xmlEnc);

  }

  if (cTEnc == null) {

    if (appXml) {

      return calculateRawEncoding(bomEnc,xmlGuessEnc,xmlEnc);

    }

    return defaultEncoding == null ? US_ASCII : defaultEncoding;

  }

  if (cTEnc.equals(UTF_16BE) || cTEnc.equals(UTF_16LE)) {

    if (bomEnc != null) {

      final String msg=MessageFormat.format(HTTP_EX_1,cTMime,cTEnc,bomEnc,xmlGuessEnc,xmlEnc);

      throw new XmlStreamReaderException(msg,cTMime,cTEnc,bomEnc,xmlGuessEnc,xmlEnc);

    }

    return cTEnc;

  }

  if (cTEnc.equals(UTF_16)) {

    if (bomEnc != null && bomEnc.startsWith(UTF_16)) {

      return bomEnc;

    }

    final String msg=MessageFormat.format(HTTP_EX_2,cTMime,cTEnc,bomEnc,xmlGuessEnc,xmlEnc);

    throw new XmlStreamReaderException(msg,cTMime,cTEnc,bomEnc,xmlGuessEnc,xmlEnc);

  }

  if (cTEnc.equals(UTF_32BE) || cTEnc.equals(UTF_32LE)) {

    if (bomEnc != null) {

      final String msg=MessageFormat.format(HTTP_EX_1,cTMime,cTEnc,bomEnc,xmlGuessEnc,xmlEnc);

      throw new XmlStreamReaderException(msg,cTMime,cTEnc,bomEnc,xmlGuessEnc,xmlEnc);

    }

    return cTEnc;

  }

  if (cTEnc.equals(UTF_32)) {

    if (bomEnc != null && bomEnc.startsWith(UTF_32)) {

      return bomEnc;

    }

    final String msg=MessageFormat.format(HTTP_EX_2,cTMime,cTEnc,bomEnc,xmlGuessEnc,xmlEnc);

    throw new XmlStreamReaderException(msg,cTMime,cTEnc,bomEnc,xmlGuessEnc,xmlEnc);

  }

  return cTEnc;

}

Location: XmlStreamReader.java

Content: 

String calculateHttpEncoding(final String cTMime,final String cTEnc,final String bomEnc,final String xmlGuessEnc,final String xmlEnc,final InputStream is,final boolean lenient) throws IOException {

  final String encoding;

  if (lenient && (xmlEnc != null)) {

    encoding=xmlEnc;

  }

 else {

    final boolean appXml=isAppXml(cTMime);

    final boolean textXml=isTextXml(cTMime);

    if (!appXml && !textXml) {

      throw new XmlStreamReaderException(HTTP_EX_3.format(new Object[]{cTMime,cTEnc,bomEnc,xmlGuessEnc,xmlEnc}),cTMime,cTEnc,bomEnc,xmlGuessEnc,xmlEnc,is);

    }

    if (cTEnc == null) {

      if (appXml) {

        encoding=calculateRawEncoding(bomEnc,xmlGuessEnc,xmlEnc,is);

      }

 else {

        encoding=defaultEncoding == null ? US_ASCII : defaultEncoding;

      }

    }

 else     if (bomEnc != null && (cTEnc.equals(UTF_16BE) || cTEnc.equals(UTF_16LE))) {

      throw new XmlStreamReaderException(HTTP_EX_1.format(new Object[]{cTMime,cTEnc,bomEnc,xmlGuessEnc,xmlEnc}),cTMime,cTEnc,bomEnc,xmlGuessEnc,xmlEnc,is);

    }

 else     if (cTEnc.equals(UTF_16)) {

      if ((bomEnc == null) || !bomEnc.startsWith(UTF_16)) {

        throw new XmlStreamReaderException(HTTP_EX_2.format(new Object[]{cTMime,cTEnc,bomEnc,xmlGuessEnc,xmlEnc}),cTMime,cTEnc,bomEnc,xmlGuessEnc,xmlEnc,is);

      }

      encoding=bomEnc;

    }

 else     if (bomEnc != null && (cTEnc.equals(UTF_32BE) || cTEnc.equals(UTF_32LE))) {

      throw new XmlStreamReaderException(HTTP_EX_1.format(new Object[]{cTMime,cTEnc,bomEnc,xmlGuessEnc,xmlEnc}),cTMime,cTEnc,bomEnc,xmlGuessEnc,xmlEnc,is);

    }

 else     if (cTEnc.equals(UTF_32)) {

      if ((bomEnc == null) || !bomEnc.startsWith(UTF_32)) {

        throw new XmlStreamReaderException(HTTP_EX_2.format(new Object[]{cTMime,cTEnc,bomEnc,xmlGuessEnc,xmlEnc}),cTMime,cTEnc,bomEnc,xmlGuessEnc,xmlEnc,is);

      }

      encoding=bomEnc;

    }

 else {

      encoding=cTEnc;

    }

  }

  return encoding;

}

Location: XmlStreamReader.java

Content: 

/** 

 * Calculate the raw encoding.

 * @param bomEnc BOM encoding

 * @param xmlGuessEnc XML Guess encoding

 * @param xmlEnc XML encoding

 * @return the raw encoding

 * @throws IOException thrown if there is a problem reading the stream.

 */

String calculateRawEncoding(final String bomEnc,final String xmlGuessEnc,final String xmlEnc) throws IOException {

  if (bomEnc == null) {

    if (xmlGuessEnc == null || xmlEnc == null) {

      return defaultEncoding == null ? UTF_8 : defaultEncoding;

    }

    if (xmlEnc.equals(UTF_16) && (xmlGuessEnc.equals(UTF_16BE) || xmlGuessEnc.equals(UTF_16LE))) {

      return xmlGuessEnc;

    }

    return xmlEnc;

  }

  if (bomEnc.equals(UTF_8)) {

    if (xmlGuessEnc != null && !xmlGuessEnc.equals(UTF_8)) {

      final String msg=MessageFormat.format(RAW_EX_1,bomEnc,xmlGuessEnc,xmlEnc);

      throw new XmlStreamReaderException(msg,bomEnc,xmlGuessEnc,xmlEnc);

    }

    if (xmlEnc != null && !xmlEnc.equals(UTF_8)) {

      final String msg=MessageFormat.format(RAW_EX_1,bomEnc,xmlGuessEnc,xmlEnc);

      throw new XmlStreamReaderException(msg,bomEnc,xmlGuessEnc,xmlEnc);

    }

    return bomEnc;

  }

  if (bomEnc.equals(UTF_16BE) || bomEnc.equals(UTF_16LE)) {

    if (xmlGuessEnc != null && !xmlGuessEnc.equals(bomEnc)) {

      final String msg=MessageFormat.format(RAW_EX_1,bomEnc,xmlGuessEnc,xmlEnc);

      throw new XmlStreamReaderException(msg,bomEnc,xmlGuessEnc,xmlEnc);

    }

    if (xmlEnc != null && !xmlEnc.equals(UTF_16) && !xmlEnc.equals(bomEnc)) {

      final String msg=MessageFormat.format(RAW_EX_1,bomEnc,xmlGuessEnc,xmlEnc);

      throw new XmlStreamReaderException(msg,bomEnc,xmlGuessEnc,xmlEnc);

    }

    return bomEnc;

  }

  if (bomEnc.equals(UTF_32BE) || bomEnc.equals(UTF_32LE)) {

    if (xmlGuessEnc != null && !xmlGuessEnc.equals(bomEnc)) {

      final String msg=MessageFormat.format(RAW_EX_1,bomEnc,xmlGuessEnc,xmlEnc);

      throw new XmlStreamReaderException(msg,bomEnc,xmlGuessEnc,xmlEnc);

    }

    if (xmlEnc != null && !xmlEnc.equals(UTF_32) && !xmlEnc.equals(bomEnc)) {

      final String msg=MessageFormat.format(RAW_EX_1,bomEnc,xmlGuessEnc,xmlEnc);

      throw new XmlStreamReaderException(msg,bomEnc,xmlGuessEnc,xmlEnc);

    }

    return bomEnc;

  }

  final String msg=MessageFormat.format(RAW_EX_2,bomEnc,xmlGuessEnc,xmlEnc);

  throw new XmlStreamReaderException(msg,bomEnc,xmlGuessEnc,xmlEnc);

}

Location: XmlStreamReader.java

Content: 

String calculateRawEncoding(final String bomEnc,final String xmlGuessEnc,final String xmlEnc,final InputStream is) throws IOException {

  final String encoding;

  if (bomEnc == null) {

    if (xmlGuessEnc == null || xmlEnc == null) {

      encoding=defaultEncoding == null ? UTF_8 : defaultEncoding;

    }

 else     if (xmlEnc.equals(UTF_16) && (xmlGuessEnc.equals(UTF_16BE) || xmlGuessEnc.equals(UTF_16LE))) {

      encoding=xmlGuessEnc;

    }

 else     if (xmlEnc.equals(UTF_32) && (xmlGuessEnc.equals(UTF_32BE) || xmlGuessEnc.equals(UTF_32LE))) {

      encoding=xmlGuessEnc;

    }

 else {

      encoding=xmlEnc;

    }

  }

 else   if (bomEnc.equals(UTF_8)) {

    if (xmlGuessEnc != null && !xmlGuessEnc.equals(UTF_8)) {

      throw new XmlStreamReaderException(RAW_EX_1.format(new Object[]{bomEnc,xmlGuessEnc,xmlEnc}),bomEnc,xmlGuessEnc,xmlEnc,is);

    }

    if (xmlEnc != null && !xmlEnc.equals(UTF_8)) {

      throw new XmlStreamReaderException(RAW_EX_1.format(new Object[]{bomEnc,xmlGuessEnc,xmlEnc}),bomEnc,xmlGuessEnc,xmlEnc,is);

    }

    encoding=UTF_8;

  }

 else   if (bomEnc.equals(UTF_16BE) || bomEnc.equals(UTF_16LE)) {

    if (xmlGuessEnc != null && !xmlGuessEnc.equals(bomEnc)) {

      throw new XmlStreamReaderException(RAW_EX_1.format(new Object[]{bomEnc,xmlGuessEnc,xmlEnc}),bomEnc,xmlGuessEnc,xmlEnc,is);

    }

    if (xmlEnc != null && !xmlEnc.equals(UTF_16) && !xmlEnc.equals(bomEnc)) {

      throw new XmlStreamReaderException(RAW_EX_1.format(new Object[]{bomEnc,xmlGuessEnc,xmlEnc}),bomEnc,xmlGuessEnc,xmlEnc,is);

    }

    encoding=bomEnc;

  }

 else   if (bomEnc.equals(UTF_32BE) || bomEnc.equals(UTF_32LE)) {

    if (xmlGuessEnc != null && !xmlGuessEnc.equals(bomEnc)) {

      throw new XmlStreamReaderException(RAW_EX_1.format(new Object[]{bomEnc,xmlGuessEnc,xmlEnc}),bomEnc,xmlGuessEnc,xmlEnc,is);

    }

    if (xmlEnc != null && !xmlEnc.equals(UTF_32) && !xmlEnc.equals(bomEnc)) {

      throw new XmlStreamReaderException(RAW_EX_1.format(new Object[]{bomEnc,xmlGuessEnc,xmlEnc}),bomEnc,xmlGuessEnc,xmlEnc,is);

    }

    encoding=bomEnc;

  }

 else {

    throw new XmlStreamReaderException(RAW_EX_2.format(new Object[]{bomEnc,xmlGuessEnc,xmlEnc}),bomEnc,xmlGuessEnc,xmlEnc,is);

  }

  return encoding;

}

Location: XmlStreamReader.java

Content: 

private void doHttpStream(final InputStream inputStream,final String httpContentType,final boolean lenient) throws IOException {

  final BufferedInputStream pis=new BufferedInputStream(inputStream,IOUtils.DEFAULT_BUFFER_SIZE);

  final String cTMime=getContentTypeMime(httpContentType);

  final String cTEnc=getContentTypeEncoding(httpContentType);

  final String bomEnc=getBOMEncoding(pis);

  final String xmlGuessEnc=getXMLGuessEncoding(pis);

  final String xmlEnc=getXmlProlog(pis,xmlGuessEnc);

  final String encoding=calculateHttpEncoding(cTMime,cTEnc,bomEnc,xmlGuessEnc,xmlEnc,pis,lenient);

  prepareReader(pis,encoding);

}

Location: XmlStreamReader.java

Content: 

private void doLenientDetection(String httpContentType,XmlStreamReaderException ex) throws IOException {

  if ((httpContentType != null) && httpContentType.startsWith("text/html")) {

    httpContentType=httpContentType.substring("text/html".length());

    httpContentType="text/xml" + httpContentType;

    try {

      doHttpStream(ex.getInputStream(),httpContentType,true);

      ex=null;

    }

 catch (    final XmlStreamReaderException ex2) {

      ex=ex2;

    }

  }

  if (ex != null) {

    String encoding=ex.getXmlEncoding();

    if (encoding == null) {

      encoding=ex.getContentTypeEncoding();

    }

    if (encoding == null) {

      encoding=defaultEncoding == null ? UTF_8 : defaultEncoding;

    }

    prepareReader(ex.getInputStream(),encoding);

  }

}

Location: XmlStreamReader.java

Content: 

/** 

 * Process the raw stream.

 * @param bom BOMInputStream to detect byte order marks

 * @param pis BOMInputStream to guess XML encoding

 * @param lenient indicates if the charset encoding detection should berelaxed.

 * @return the encoding to be used

 * @throws IOException thrown if there is a problem reading the stream.

 */

private String doRawStream(final BOMInputStream bom,final BOMInputStream pis,final boolean lenient) throws IOException {

  final String bomEnc=bom.getBOMCharsetName();

  final String xmlGuessEnc=pis.getBOMCharsetName();

  final String xmlEnc=getXmlProlog(pis,xmlGuessEnc);

  try {

    return calculateRawEncoding(bomEnc,xmlGuessEnc,xmlEnc);

  }

 catch (  final XmlStreamReaderException ex) {

    if (lenient) {

      return doLenientDetection(null,ex);

    }

    throw ex;

  }

}

Location: XmlStreamReader.java

Content: 

private void doRawStream(final InputStream inputStream) throws IOException {

  final BufferedInputStream pis=new BufferedInputStream(inputStream,IOUtils.DEFAULT_BUFFER_SIZE);

  final String bomEnc=getBOMEncoding(pis);

  final String xmlGuessEnc=getXMLGuessEncoding(pis);

  final String xmlEnc=getXmlProlog(pis,xmlGuessEnc);

  final String encoding=calculateRawEncoding(bomEnc,xmlGuessEnc,xmlEnc,pis);

  prepareReader(pis,encoding);

}

Location: XmlStreamReader.java

Content: 

static String getBOMEncoding(final BufferedInputStream is) throws IOException {

  String encoding=null;

  final int[] bytes=new int[3];

  is.mark(3);

  bytes[0]=is.read();

  bytes[1]=is.read();

  bytes[2]=is.read();

  if (bytes[0] == 0xFE && bytes[1] == 0xFF) {

    encoding=UTF_16BE;

    is.reset();

    is.read();

    is.read();

  }

 else   if (bytes[0] == 0xFF && bytes[1] == 0xFE) {

    encoding=UTF_16LE;

    is.reset();

    is.read();

    is.read();

  }

 else   if (bytes[0] == 0xEF && bytes[1] == 0xBB && bytes[2] == 0xBF) {

    encoding=UTF_8;

  }

 else {

    is.reset();

  }

  return encoding;

}

Location: XmlStreamReader.java

Content: 

static String getContentTypeEncoding(final String httpContentType){

  String encoding=null;

  if (httpContentType != null) {

    final int i=httpContentType.indexOf(";");

    if (i > -1) {

      final String postMime=httpContentType.substring(i + 1);

      final Matcher m=CHARSET_PATTERN.matcher(postMime);

      encoding=m.find() ? m.group(1) : null;

      encoding=encoding != null ? encoding.toUpperCase(Locale.ROOT) : null;

    }

  }

  return encoding;

}

Location: XmlStreamReader.java

Content: 

static String getContentTypeMime(final String httpContentType){

  String mime=null;

  if (httpContentType != null) {

    final int i=httpContentType.indexOf(";");

    mime=(i == -1 ? httpContentType : httpContentType.substring(0,i)).trim();

  }

  return mime;

}

Location: XmlStreamReader.java

Content: 

/** 

 * Returns the default encoding to use if none is set in HTTP content-type, XML prolog and the rules based on content-type are not adequate. <p> If it is NULL the content-type based rules are used.

 * @return the default encoding to use.

 */

public static String getDefaultEncoding(){

  return staticDefaultEncoding;

}

Location: XmlStreamReader.java

Content: 

/** 

 * Returns the charset encoding of the XmlStreamReader.

 * @return charset encoding.

 */

public String getEncoding(){

  return encoding;

}

Location: XmlStreamReader.java

Content: 

private static String getXMLGuessEncoding(final BufferedInputStream is) throws IOException {

  String encoding=null;

  final int[] bytes=new int[4];

  is.mark(4);

  bytes[0]=is.read();

  bytes[1]=is.read();

  bytes[2]=is.read();

  bytes[3]=is.read();

  is.reset();

  if (bytes[0] == 0x00 && bytes[1] == 0x3C && bytes[2] == 0x00 && bytes[3] == 0x3F) {

    encoding=UTF_16BE;

  }

 else   if (bytes[0] == 0x3C && bytes[1] == 0x00 && bytes[2] == 0x3F && bytes[3] == 0x00) {

    encoding=UTF_16LE;

  }

 else   if (bytes[0] == 0x3C && bytes[1] == 0x3F && bytes[2] == 0x78 && bytes[3] == 0x6D) {

    encoding=UTF_8;

  }

 else   if (bytes[0] == 0x4C && bytes[1] == 0x6F && bytes[2] == 0xA7 && bytes[3] == 0x94) {

    encoding=EBCDIC;

  }

  return encoding;

}

Location: XmlStreamReader.java

Content: 

private static String getXmlProlog(final BufferedInputStream is,final String guessedEnc) throws IOException {

  String encoding=null;

  if (guessedEnc != null) {

    final byte[] bytes=IOUtils.byteArray();

    is.mark(IOUtils.DEFAULT_BUFFER_SIZE);

    int offset=0;

    int max=IOUtils.DEFAULT_BUFFER_SIZE;

    int c=is.read(bytes,offset,max);

    int firstGT=-1;

    String xmlProlog="";

    while (c != -1 && firstGT == -1 && offset < IOUtils.DEFAULT_BUFFER_SIZE) {

      offset+=c;

      max-=c;

      c=is.read(bytes,offset,max);

      xmlProlog=new String(bytes,0,offset,guessedEnc);

      firstGT=xmlProlog.indexOf('>');

    }

    if (firstGT == -1) {

      if (c == -1) {

        throw new IOException("Unexpected end of XML stream");

      }

      throw new IOException("XML prolog or ROOT element not found on first " + offset + " bytes");

    }

    final int bytesRead=offset;

    if (bytesRead > 0) {

      is.reset();

      final BufferedReader bReader=new BufferedReader(new StringReader(xmlProlog.substring(0,firstGT + 1)));

      final StringBuilder prolog=new StringBuilder();

      String line;

      while ((line=bReader.readLine()) != null) {

        prolog.append(line);

      }

      final Matcher m=ENCODING_PATTERN.matcher(prolog);

      if (m.find()) {

        encoding=m.group(1).toUpperCase(Locale.ROOT);

        encoding=encoding.substring(1,encoding.length() - 1);

      }

    }

  }

  return encoding;

}

Location: XmlStreamReader.java

Content: 

/** 

 * Returns the encoding declared in the <?xml encoding=...?>, NULL if none.

 * @param inputStream InputStream to create the reader from.

 * @param guessedEnc guessed encoding

 * @return the encoding declared in the <?xml encoding=...?>

 * @throws IOException thrown if there is a problem reading the stream.

 */

private static String getXmlProlog(final InputStream inputStream,final String guessedEnc) throws IOException {

  String encoding=null;

  if (guessedEnc != null) {

    final byte[] bytes=IOUtils.byteArray();

    inputStream.mark(IOUtils.DEFAULT_BUFFER_SIZE);

    int offset=0;

    int max=IOUtils.DEFAULT_BUFFER_SIZE;

    int c=inputStream.read(bytes,offset,max);

    int firstGT=-1;

    String xmlProlog="";

    while (c != -1 && firstGT == -1 && offset < IOUtils.DEFAULT_BUFFER_SIZE) {

      offset+=c;

      max-=c;

      c=inputStream.read(bytes,offset,max);

      xmlProlog=new String(bytes,0,offset,guessedEnc);

      firstGT=xmlProlog.indexOf('>');

    }

    if (firstGT == -1) {

      if (c == -1) {

        throw new IOException("Unexpected end of XML stream");

      }

      throw new IOException("XML prolog or ROOT element not found on first " + offset + " bytes");

    }

    final int bytesRead=offset;

    if (bytesRead > 0) {

      inputStream.reset();

      final BufferedReader bReader=new BufferedReader(new StringReader(xmlProlog.substring(0,firstGT + 1)));

      final StringBuilder prolog=new StringBuilder();

      String line;

      while ((line=bReader.readLine()) != null) {

        prolog.append(line);

      }

      final Matcher m=ENCODING_PATTERN.matcher(prolog);

      if (m.find()) {

        encoding=m.group(1).toUpperCase(Locale.ROOT);

        encoding=encoding.substring(1,encoding.length() - 1);

      }

    }

  }

  return encoding;

}

Location: XmlStreamReader.java

Content: 

static boolean isAppXml(final String mime){

  return mime != null && (mime.equals("application/xml") || mime.equals("application/xml-dtd") || mime.equals("application/xml-external-parsed-entity")|| mime.startsWith("application/") && mime.endsWith("+xml"));

}

Location: XmlStreamReader.java

Content: 

static boolean isTextXml(final String mime){

  return mime != null && (mime.equals("text/xml") || mime.equals("text/xml-external-parsed-entity") || mime.startsWith("text/") && mime.endsWith("+xml"));

}

Location: XmlStreamReader.java

Content: 

private void prepareReader(final InputStream inputStream,final String encoding) throws IOException {

  reader=new InputStreamReader(inputStream,encoding);

  this.encoding=encoding;

}

Location: XmlStreamReader.java

Content: 

/** 

 * Process a HTTP stream.

 * @param bom BOMInputStream to detect byte order marks

 * @param pis BOMInputStream to guess XML encoding

 * @param httpContentType The HTTP content type

 * @param lenient indicates if the charset encoding detection should berelaxed.

 * @return the encoding to be used

 * @throws IOException thrown if there is a problem reading the stream.

 */

private String processHttpStream(final BOMInputStream bom,final BOMInputStream pis,final String httpContentType,final boolean lenient) throws IOException {

  final String bomEnc=bom.getBOMCharsetName();

  final String xmlGuessEnc=pis.getBOMCharsetName();

  final String xmlEnc=getXmlProlog(pis,xmlGuessEnc);

  try {

    return calculateHttpEncoding(httpContentType,bomEnc,xmlGuessEnc,xmlEnc,lenient);

  }

 catch (  final XmlStreamReaderException ex) {

    if (lenient) {

      return doLenientDetection(httpContentType,ex);

    }

    throw ex;

  }

}

Location: XmlStreamReader.java

Content: 

@Override public int read(final char[] buf,final int offset,final int len) throws IOException {

  return reader.read(buf,offset,len);

}

Location: XmlStreamReader.java

Content: 

/** 

 * Sets the default encoding to use if none is set in HTTP content-type, XML prolog and the rules based on content-type are not adequate. <p> If it is set to NULL the content-type based rules are used. <p> By default it is NULL.

 * @param encoding charset encoding to default to.

 */

public static void setDefaultEncoding(final String encoding){

  staticDefaultEncoding=encoding;

}

Location: XmlStreamReader.java

Content: 

/** 

 * Creates a Reader for a File. <p> It looks for the UTF-8 BOM first, if none sniffs the XML prolog charset, if this is also missing defaults to UTF-8. <p> It does a lenient charset encoding detection, check the constructor with the lenient parameter for details.

 * @param file File to create a Reader from.

 * @throws IOException thrown if there is a problem reading the file.

 */

@SuppressWarnings("resource") public XmlStreamReader(final File file) throws IOException {

  this(Files.newInputStream(file.toPath()));

}

Location: XmlStreamReader.java

Content: 

/** 

 * Creates a Reader for a raw InputStream. <p> It follows the same logic used for files. <p> It does a lenient charset encoding detection, check the constructor with the lenient parameter for details.

 * @param inputStream InputStream to create a Reader from.

 * @throws IOException thrown if there is a problem reading the stream.

 */

public XmlStreamReader(final InputStream inputStream) throws IOException {

  this(inputStream,true);

}

Location: XmlStreamReader.java

Content: 

/** 

 * Creates a Reader for a raw InputStream. <p> It follows the same logic used for files. <p> If lenient detection is indicated and the detection above fails as per specifications it then attempts the following: <p> If the content type was 'text/html' it replaces it with 'text/xml' and tries the detection again. <p> Else if the XML prolog had a charset encoding that encoding is used. <p> Else if the content type had a charset encoding that encoding is used. <p> Else 'UTF-8' is used. <p> If lenient detection is indicated an XmlStreamReaderException is never thrown.

 * @param inputStream InputStream to create a Reader from.

 * @param lenient indicates if the charset encoding detection should berelaxed.

 * @throws IOException thrown if there is a problem reading the stream.

 * @throws XmlStreamReaderException thrown if the charset encoding could notbe determined according to the specs.

 */

public XmlStreamReader(final InputStream inputStream,final boolean lenient) throws IOException, XmlStreamReaderException {

  defaultEncoding=staticDefaultEncoding;

  try {

    doRawStream(inputStream);

  }

 catch (  final XmlStreamReaderException ex) {

    if (!lenient) {

      throw ex;

    }

    doLenientDetection(null,ex);

  }

}

Location: XmlStreamReader.java

Content: 

/** 

 * Creates a Reader for a raw InputStream. <p> It follows the same logic used for files. <p> If lenient detection is indicated and the detection above fails as per specifications it then attempts the following: <p> If the content type was 'text/html' it replaces it with 'text/xml' and tries the detection again. <p> Else if the XML prolog had a charset encoding that encoding is used. <p> Else if the content type had a charset encoding that encoding is used. <p> Else 'UTF-8' is used. <p> If lenient detection is indicated an XmlStreamReaderException is never thrown.

 * @param inputStream InputStream to create a Reader from.

 * @param lenient indicates if the charset encoding detection should berelaxed.

 * @param defaultEncoding The default encoding

 * @throws IOException thrown if there is a problem reading the stream.

 * @throws XmlStreamReaderException thrown if the charset encoding could notbe determined according to the specs.

 */

@SuppressWarnings("resource") public XmlStreamReader(final InputStream inputStream,final boolean lenient,final String defaultEncoding) throws IOException {

  Objects.requireNonNull(inputStream,"inputStream");

  this.defaultEncoding=defaultEncoding;

  final BOMInputStream bom=new BOMInputStream(new BufferedInputStream(inputStream,IOUtils.DEFAULT_BUFFER_SIZE),false,BOMS);

  final BOMInputStream pis=new BOMInputStream(bom,true,XML_GUESS_BYTES);

  this.encoding=doRawStream(bom,pis,lenient);

  this.reader=new InputStreamReader(pis,encoding);

}

Location: XmlStreamReader.java

Content: 

/** 

 * Creates a Reader using an InputStream and the associated content-type header. <p> First it checks if the stream has BOM. If there is not BOM checks the content-type encoding. If there is not content-type encoding checks the XML prolog encoding. If there is not XML prolog encoding uses the default encoding mandated by the content-type MIME type. <p> It does a lenient charset encoding detection, check the constructor with the lenient parameter for details.

 * @param inputStream InputStream to create the reader from.

 * @param httpContentType content-type header to use for the resolution ofthe charset encoding.

 * @throws IOException thrown if there is a problem reading the file.

 */

public XmlStreamReader(final InputStream inputStream,final String httpContentType) throws IOException {

  this(inputStream,httpContentType,true);

}

Location: XmlStreamReader.java

Content: 

/** 

 * Creates a Reader using an InputStream and the associated content-type header. This constructor is lenient regarding the encoding detection. <p> First it checks if the stream has BOM. If there is not BOM checks the content-type encoding. If there is not content-type encoding checks the XML prolog encoding. If there is not XML prolog encoding uses the default encoding mandated by the content-type MIME type. <p> If lenient detection is indicated and the detection above fails as per specifications it then attempts the following: <p> If the content type was 'text/html' it replaces it with 'text/xml' and tries the detection again. <p> Else if the XML prolog had a charset encoding that encoding is used. <p> Else if the content type had a charset encoding that encoding is used. <p> Else 'UTF-8' is used. <p> If lenient detection is indicated an XmlStreamReaderException is never thrown.

 * @param inputStream InputStream to create the reader from.

 * @param httpContentType content-type header to use for the resolution ofthe charset encoding.

 * @param lenient indicates if the charset encoding detection should berelaxed.

 * @throws IOException thrown if there is a problem reading the file.

 * @throws XmlStreamReaderException thrown if the charset encoding could notbe determined according to the specs.

 */

public XmlStreamReader(final InputStream inputStream,final String httpContentType,final boolean lenient) throws IOException, XmlStreamReaderException {

  this(inputStream,httpContentType,lenient,null);

}

Location: XmlStreamReader.java

Content: 

/** 

 * Creates a Reader using an InputStream and the associated content-type header. This constructor is lenient regarding the encoding detection. <p> First it checks if the stream has BOM. If there is not BOM checks the content-type encoding. If there is not content-type encoding checks the XML prolog encoding. If there is not XML prolog encoding uses the default encoding mandated by the content-type MIME type. <p> If lenient detection is indicated and the detection above fails as per specifications it then attempts the following: <p> If the content type was 'text/html' it replaces it with 'text/xml' and tries the detection again. <p> Else if the XML prolog had a charset encoding that encoding is used. <p> Else if the content type had a charset encoding that encoding is used. <p> Else 'UTF-8' is used. <p> If lenient detection is indicated an XmlStreamReaderException is never thrown.

 * @param inputStream InputStream to create the reader from.

 * @param httpContentType content-type header to use for the resolution ofthe charset encoding.

 * @param lenient indicates if the charset encoding detection should berelaxed.

 * @param defaultEncoding the default encoding to use

 * @throws IOException thrown if there is a problem reading the file.

 * @throws XmlStreamReaderException thrown if the charset encoding could notbe determined according to the specs.

 */

public XmlStreamReader(final InputStream inputStream,final String httpContentType,final boolean lenient,final String defaultEncoding) throws IOException, XmlStreamReaderException {

  this.defaultEncoding=defaultEncoding == null ? staticDefaultEncoding : defaultEncoding;

  try {

    doHttpStream(inputStream,httpContentType,lenient);

  }

 catch (  final XmlStreamReaderException ex) {

    if (!lenient) {

      throw ex;

    }

    doLenientDetection(httpContentType,ex);

  }

}

Location: XmlStreamReader.java

Content: 

/** 

 * Creates a Reader for a File. <p> It looks for the UTF-8 BOM first, if none sniffs the XML prolog charset, if this is also missing defaults to UTF-8. <p> It does a lenient charset encoding detection, check the constructor with the lenient parameter for details.

 * @param file File to create a Reader from.

 * @throws IOException thrown if there is a problem reading the file.

 * @since 2.11.0

 */

@SuppressWarnings("resource") public XmlStreamReader(final Path file) throws IOException {

  this(Files.newInputStream(Objects.requireNonNull(file,"file")));

}

Location: XmlStreamReader.java

Content: 

/** 

 * Creates a Reader using the InputStream of a URL. <p> If the URL is not of type HTTP and there is not 'content-type' header in the fetched data it uses the same logic used for Files. <p> If the URL is a HTTP Url or there is a 'content-type' header in the fetched data it uses the same logic used for an InputStream with content-type. <p> It does a lenient charset encoding detection, check the constructor with the lenient parameter for details.

 * @param url URL to create a Reader from.

 * @throws IOException thrown if there is a problem reading the stream ofthe URL.

 */

public XmlStreamReader(final URL url) throws IOException {

  this(url.openConnection());

}

Location: XmlStreamReader.java

Content: 

/** 

 * Creates a Reader using the InputStream of a URLConnection. <p> If the URLConnection is not of type HttpURLConnection and there is not 'content-type' header in the fetched data it uses the same logic used for files. <p> If the URLConnection is a HTTP Url or there is a 'content-type' header in the fetched data it uses the same logic used for an InputStream with content-type. <p> It does a lenient charset encoding detection, check the constructor with the lenient parameter for details.

 * @param conn URLConnection to create a Reader from.

 * @throws IOException thrown if there is a problem reading the stream ofthe URLConnection.

 */

public XmlStreamReader(final URLConnection conn) throws IOException {

  defaultEncoding=staticDefaultEncoding;

  final boolean lenient=true;

  if (conn instanceof HttpURLConnection) {

    try {

      doHttpStream(conn.getInputStream(),conn.getContentType(),lenient);

    }

 catch (    final XmlStreamReaderException ex) {

      doLenientDetection(conn.getContentType(),ex);

    }

  }

 else   if (conn.getContentType() != null) {

    try {

      doHttpStream(conn.getInputStream(),conn.getContentType(),lenient);

    }

 catch (    final XmlStreamReaderException ex) {

      doLenientDetection(conn.getContentType(),ex);

    }

  }

 else {

    try {

      doRawStream(conn.getInputStream());

    }

 catch (    final XmlStreamReaderException ex) {

      doLenientDetection(null,ex);

    }

  }

}

Location: XmlStreamReader.java

Content: 

/** 

 * Creates a Reader using the InputStream of a URLConnection. <p> If the URLConnection is not of type HttpURLConnection and there is not 'content-type' header in the fetched data it uses the same logic used for files. <p> If the URLConnection is a HTTP Url or there is a 'content-type' header in the fetched data it uses the same logic used for an InputStream with content-type. <p> It does a lenient charset encoding detection, check the constructor with the lenient parameter for details.

 * @param urlConnection URLConnection to create a Reader from.

 * @param defaultEncoding The default encoding

 * @throws IOException thrown if there is a problem reading the stream ofthe URLConnection.

 */

public XmlStreamReader(final URLConnection urlConnection,final String defaultEncoding) throws IOException {

  Objects.requireNonNull(urlConnection,"urlConnection");

  this.defaultEncoding=defaultEncoding;

  final boolean lenient=true;

  final String contentType=urlConnection.getContentType();

  final InputStream inputStream=urlConnection.getInputStream();

  @SuppressWarnings("resource") final BOMInputStream bom=new BOMInputStream(new BufferedInputStream(inputStream,IOUtils.DEFAULT_BUFFER_SIZE),false,BOMS);

  final BOMInputStream pis=new BOMInputStream(bom,true,XML_GUESS_BYTES);

  if (urlConnection instanceof HttpURLConnection || contentType != null) {

    this.encoding=processHttpStream(bom,pis,contentType,lenient);

  }

 else {

    this.encoding=doRawStream(bom,pis,lenient);

  }

  this.reader=new InputStreamReader(pis,encoding);

}

