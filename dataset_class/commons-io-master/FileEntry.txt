Location: FileEntry.java

Content: 

/** 

 * Constructs a new monitor for a specified  {@link File}.

 * @param file The file being monitored

 */

public FileEntry(final File file){

  this(null,file);

}

Location: FileEntry.java

Content: 

/** 

 * Constructs a new monitor for a specified  {@link File}.

 * @param parent The parent

 * @param file The file being monitored

 */

public FileEntry(final FileEntry parent,final File file){

  if (file == null) {

    throw new IllegalArgumentException("File is null.");

  }

  this.file=file;

  this.parent=parent;

  this.name=file.getName();

}

Location: FileEntry.java

Content: 

/** 

 * Gets the directory's files.

 * @return This directory's files or an emptyarray if the file is not a directory or the directory is empty

 */

public FileEntry[] getChildren(){

  return children != null ? children : EMPTY_FILE_ENTRY_ARRAY;

}

Location: FileEntry.java

Content: 

/** 

 * Gets the last modified time from the last time it was checked.

 * @return the last modified time in milliseconds.

 */

public long getLastModified(){

  return lastModified.toMillis();

}

Location: FileEntry.java

Content: 

/** 

 * Gets the last modified time from the last time it was checked.

 * @return the last modified time.

 * @since 2.12.0

 */

public FileTime getLastModifiedFileTime(){

  return lastModified;

}

Location: FileEntry.java

Content: 

/** 

 * Gets the length.

 * @return the length

 */

public long getLength(){

  return length;

}

Location: FileEntry.java

Content: 

/** 

 * Gets the level

 * @return the level

 */

public int getLevel(){

  return parent == null ? 0 : parent.getLevel() + 1;

}

Location: FileEntry.java

Content: 

/** 

 * Gets the parent entry.

 * @return the parent entry

 */

public FileEntry getParent(){

  return parent;

}

Location: FileEntry.java

Content: 

/** 

 * Tests whether the file is a directory or not.

 * @return whether the file is a directory or not

 */

public boolean isDirectory(){

  return directory;

}

Location: FileEntry.java

Content: 

/** 

 * Tests whether the file existed the last time it was checked.

 * @return whether the file existed

 */

public boolean isExists(){

  return exists;

}

Location: FileEntry.java

Content: 

/** 

 * Creates a new child instance. <p> Custom implementations should override this method to return a new instance of the appropriate type. </p>

 * @param file The child file

 * @return a new child instance

 */

public FileEntry newChildInstance(final File file){

  return new FileEntry(this,file);

}

Location: FileEntry.java

Content: 

/** 

 * Refreshes the attributes from the  {@link File}, indicating whether the file has changed. <p> This implementation refreshes the  {@code name},  {@code exists}, {@code directory},  {@code lastModified} and {@code length}properties. </p> <p> The  {@code exists},  {@code directory},  {@code lastModified}and  {@code length} properties are compared for changes</p>

 * @param file the file instance to compare to

 * @return {@code true} if the file has changed, otherwise {@code false}

 */

public boolean refresh(final File file){

  final boolean origExists=exists;

  final FileTime origLastModified=lastModified;

  final boolean origDirectory=directory;

  final long origLength=length;

  name=file.getName();

  exists=Files.exists(file.toPath());

  directory=exists && file.isDirectory();

  try {

    lastModified=exists ? FileUtils.lastModifiedFileTime(file) : FileTimes.EPOCH;

  }

 catch (  final IOException e) {

    lastModified=FileTimes.EPOCH;

  }

  length=exists && !directory ? file.length() : 0;

  return exists != origExists || !lastModified.equals(origLastModified) || directory != origDirectory || length != origLength;

}

Location: FileEntry.java

Content: 

/** 

 * Sets the directory's files.

 * @param children This directory's files, may be null

 */

public void setChildren(final FileEntry... children){

  this.children=children;

}

Location: FileEntry.java

Content: 

/** 

 * Sets whether the file is a directory or not.

 * @param directory whether the file is a directory or not

 */

public void setDirectory(final boolean directory){

  this.directory=directory;

}

Location: FileEntry.java

Content: 

/** 

 * Sets whether the file existed the last time it was checked.

 * @param exists whether the file exists or not

 */

public void setExists(final boolean exists){

  this.exists=exists;

}

Location: FileEntry.java

Content: 

/** 

 * Sets the last modified time from the last time it was checked.

 * @param lastModified The last modified time.

 * @since 2.12.0

 */

public void setLastModified(final FileTime lastModified){

  this.lastModified=lastModified;

}

Location: FileEntry.java

Content: 

/** 

 * Sets the last modified time from the last time it was checked.

 * @param lastModified The last modified time in milliseconds.

 */

public void setLastModified(final long lastModified){

  this.lastModified=FileTime.fromMillis(lastModified);

}

Location: FileEntry.java

Content: 

/** 

 * Sets the length.

 * @param length the length

 */

public void setLength(final long length){

  this.length=length;

}

Location: FileEntry.java

Content: 

/** 

 * Sets the file name.

 * @param name the file name

 */

public void setName(final String name){

  this.name=name;

}

