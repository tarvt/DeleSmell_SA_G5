Location: NullReaderTest.java

Content: 

@Test public void testEOFException() throws Exception {

  final Reader reader=new TestNullReader(2,false,true);

  assertEquals(0,reader.read(),"Read 1");

  assertEquals(1,reader.read(),"Read 2");

  try {

    final int result=reader.read();

    fail("Should have thrown an EOFException, value=[" + result + "]");

  }

 catch (  final EOFException e) {

  }

  reader.close();

}

Location: NullReaderTest.java

Content: 

@Test public void testMarkAndReset() throws Exception {

  int position=0;

  final int readlimit=10;

  @SuppressWarnings("resource") final Reader reader=new TestNullReader(100,true,false);

  assertTrue(reader.markSupported(),"Mark Should be Supported");

  try {

    reader.reset();

    fail("Read limit exceeded, expected IOException ");

  }

 catch (  final IOException e) {

    assertEquals("No position has been marked",e.getMessage(),"No Mark IOException message");

  }

  for (; position < 3; position++) {

    assertEquals(position,reader.read(),"Read Before Mark [" + position + "]");

  }

  reader.mark(readlimit);

  for (int i=0; i < 3; i++) {

    assertEquals(position + i,reader.read(),"Read After Mark [" + i + "]");

  }

  reader.reset();

  for (int i=0; i < readlimit + 1; i++) {

    assertEquals(position + i,reader.read(),"Read After Reset [" + i + "]");

  }

  try {

    reader.reset();

    fail("Read limit exceeded, expected IOException ");

  }

 catch (  final IOException e) {

    assertEquals("Marked position [" + position + "] is no longer valid - passed the read limit ["+ readlimit+ "]",e.getMessage(),"Read limit IOException message");

  }

  reader.close();

}

Location: NullReaderTest.java

Content: 

@Test public void testMarkNotSupported() throws Exception {

  final Reader reader=new TestNullReader(100,false,true);

  assertFalse(reader.markSupported(),"Mark Should NOT be Supported");

  try {

    reader.mark(5);

    fail("mark() should throw UnsupportedOperationException");

  }

 catch (  final UnsupportedOperationException e) {

    assertEquals(MARK_RESET_NOT_SUPPORTED,e.getMessage(),"mark() error message");

  }

  try {

    reader.reset();

    fail("reset() should throw UnsupportedOperationException");

  }

 catch (  final UnsupportedOperationException e) {

    assertEquals(MARK_RESET_NOT_SUPPORTED,e.getMessage(),"reset() error message");

  }

  reader.close();

}

