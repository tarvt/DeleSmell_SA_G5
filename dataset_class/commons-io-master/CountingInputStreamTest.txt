Location: CountingInputStreamTest.java

Content: 

@Test public void testEOF1() throws Exception {

  final ByteArrayInputStream bais=new ByteArrayInputStream(new byte[2]);

  try (final CountingInputStream cis=new CountingInputStream(bais)){

    int found=cis.read();

    assertEquals(0,found);

    assertEquals(1,cis.getCount());

    found=cis.read();

    assertEquals(0,found);

    assertEquals(2,cis.getCount());

    found=cis.read();

    assertEquals(-1,found);

    assertEquals(2,cis.getCount());

  }

 }

Location: CountingInputStreamTest.java

Content: 

@Test public void testEOF2() throws Exception {

  final ByteArrayInputStream bais=new ByteArrayInputStream(new byte[2]);

  try (final CountingInputStream cis=new CountingInputStream(bais)){

    final byte[] result=new byte[10];

    final int found=cis.read(result);

    assertEquals(2,found);

    assertEquals(2,cis.getCount());

  }

 }

Location: CountingInputStreamTest.java

Content: 

@Test public void testEOF3() throws Exception {

  final ByteArrayInputStream bais=new ByteArrayInputStream(new byte[2]);

  try (final CountingInputStream cis=new CountingInputStream(bais)){

    final byte[] result=new byte[10];

    final int found=cis.read(result,0,5);

    assertEquals(2,found);

    assertEquals(2,cis.getCount());

  }

 }

Location: CountingInputStreamTest.java

Content: 

@Test public void testResetting() throws Exception {

  final String text="A piece of text";

  final byte[] bytes=text.getBytes();

  final ByteArrayInputStream bais=new ByteArrayInputStream(bytes);

  try (final CountingInputStream cis=new CountingInputStream(bais)){

    final byte[] result=new byte[bytes.length];

    int found=cis.read(result,0,5);

    assertEquals(found,cis.getCount());

    final int count=cis.resetCount();

    found=cis.read(result,6,5);

    assertEquals(found,count);

  }

 }

Location: CountingInputStreamTest.java

Content: 

@Test public void testSkipping() throws IOException {

  final String text="Hello World!";

  try (final CountingInputStream cis=new CountingInputStream(new StringInputStream(text))){

    assertEquals(6,cis.skip(6));

    assertEquals(6,cis.getCount());

    final byte[] result=new byte[6];

    cis.read(result);

    assertEquals("World!",new String(result));

    assertEquals(12,cis.getCount());

  }

 }

Location: CountingInputStreamTest.java

Content: 

@Test public void testZeroLength1() throws Exception {

  final ByteArrayInputStream bais=new ByteArrayInputStream(IOUtils.EMPTY_BYTE_ARRAY);

  try (final CountingInputStream cis=new CountingInputStream(bais)){

    final int found=cis.read();

    assertEquals(-1,found);

    assertEquals(0,cis.getCount());

  }

 }

Location: CountingInputStreamTest.java

Content: 

@Test public void testZeroLength2() throws Exception {

  final ByteArrayInputStream bais=new ByteArrayInputStream(IOUtils.EMPTY_BYTE_ARRAY);

  try (final CountingInputStream cis=new CountingInputStream(bais)){

    final byte[] result=new byte[10];

    final int found=cis.read(result);

    assertEquals(-1,found);

    assertEquals(0,cis.getCount());

  }

 }

Location: CountingInputStreamTest.java

Content: 

@Test public void testZeroLength3() throws Exception {

  final ByteArrayInputStream bais=new ByteArrayInputStream(IOUtils.EMPTY_BYTE_ARRAY);

  try (final CountingInputStream cis=new CountingInputStream(bais)){

    final byte[] result=new byte[10];

    final int found=cis.read(result,0,5);

    assertEquals(-1,found);

    assertEquals(0,cis.getCount());

  }

 }

