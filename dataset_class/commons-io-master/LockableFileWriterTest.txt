Location: LockableFileWriterTest.java

Content: 

@Test public void testAlternateLockDir() throws IOException {

  try (LockableFileWriter lfw1=new LockableFileWriter(file,"UTF-8",true,altLockDir.getAbsolutePath())){

    assertTrue(file.exists());

    assertTrue(altLockFile.exists());

    try (LockableFileWriter lfw2=new LockableFileWriter(file,StandardCharsets.UTF_8,true,altLockDir.getAbsolutePath())){

      fail("Somehow able to open a locked file. ");

    }

 catch (    final IOException ioe) {

      final String msg=ioe.getMessage();

      assertTrue(msg.startsWith("Can't write file, lock "),"Exception message does not start correctly. ");

      assertTrue(file.exists());

      assertTrue(altLockFile.exists());

    }

  }

   assertTrue(file.exists());

  assertFalse(altLockFile.exists());

}

Location: LockableFileWriterTest.java

Content: 

@Test public void testConstructor_fileName_nullFile() throws IOException {

  assertThrows(NullPointerException.class,() -> new LockableFileWriter((String)null));

  assertFalse(file.exists());

  assertFalse(lockFile.exists());

  assertFalse(file.exists());

  assertFalse(lockFile.exists());

}

Location: LockableFileWriterTest.java

Content: 

@Test public void testConstructor_File_directory(){

  assertThrows(IOException.class,() -> new LockableFileWriter(temporaryFolder));

  assertFalse(file.exists());

  assertFalse(lockFile.exists());

  assertFalse(file.exists());

  assertFalse(lockFile.exists());

}

Location: LockableFileWriterTest.java

Content: 

@Test public void testConstructor_File_encoding_badEncoding() throws IOException {

  assertThrows(UnsupportedCharsetException.class,() -> new LockableFileWriter(file,"BAD-ENCODE"));

  assertFalse(file.exists());

  assertFalse(lockFile.exists());

  assertFalse(file.exists());

  assertFalse(lockFile.exists());

}

Location: LockableFileWriterTest.java

Content: 

@Test public void testConstructor_File_nullFile() throws IOException {

  assertThrows(NullPointerException.class,() -> new LockableFileWriter((File)null));

  assertFalse(file.exists());

  assertFalse(lockFile.exists());

  assertFalse(file.exists());

  assertFalse(lockFile.exists());

}

Location: LockableFileWriterTest.java

Content: 

@Test public void testFileLocked() throws IOException {

  try (LockableFileWriter lfw1=new LockableFileWriter(file)){

    assertTrue(file.exists());

    assertTrue(lockFile.exists());

    try (LockableFileWriter lfw2=new LockableFileWriter(file)){

      fail("Somehow able to open a locked file. ");

    }

 catch (    final IOException ioe) {

      final String msg=ioe.getMessage();

      assertTrue(msg.startsWith("Can't write file, lock "),"Exception message does not start correctly. ");

      assertTrue(file.exists());

      assertTrue(lockFile.exists());

    }

    try (LockableFileWriter lfw3=new LockableFileWriter(file)){

      fail("Somehow able to open a locked file. ");

    }

 catch (    final IOException ioe) {

      final String msg=ioe.getMessage();

      assertTrue(msg.startsWith("Can't write file, lock "),"Exception message does not start correctly. ");

      assertTrue(file.exists());

      assertTrue(lockFile.exists());

    }

  }

   assertTrue(file.exists());

  assertFalse(lockFile.exists());

}

Location: LockableFileWriterTest.java

Content: 

@Test public void testFileNotLocked() throws IOException {

  try (LockableFileWriter lfw1=new LockableFileWriter(file)){

    assertTrue(file.exists());

    assertTrue(lockFile.exists());

  }

   assertTrue(file.exists());

  assertFalse(lockFile.exists());

  try (LockableFileWriter lfw2=new LockableFileWriter(file)){

    assertTrue(file.exists());

    assertTrue(lockFile.exists());

  }

   assertTrue(file.exists());

  assertFalse(lockFile.exists());

}

