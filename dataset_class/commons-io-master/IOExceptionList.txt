Location: IOExceptionList.java

Content: 

/** 

 * Gets the cause list.

 * @param < T > type of exception to return.

 * @return The list of causes.

 */

public <T extends Throwable>List<T> getCauseList(){

  return (List<T>)causeList;

}

Location: IOExceptionList.java

Content: 

/** 

 * Works around Throwable and Generics, may fail at runtime depending on the argument value.

 * @param < T > type of exception to return.

 * @param clazz the target type

 * @return The list of causes.

 */

public <T extends Throwable>List<T> getCauseList(final Class<T> clazz){

  return (List<T>)causeList;

}

Location: IOExceptionList.java

Content: 

/** 

 * Gets the cause exception at the given index.

 * @param < T > type of exception to return.

 * @param index index in the cause list.

 * @return The list of causes.

 */

public <T extends Throwable>T getCause(final int index){

  return (T)causeList.get(index);

}

Location: IOExceptionList.java

Content: 

/** 

 * Gets the cause exception at the given index.

 * @param < T > type of exception to return.

 * @param index index in the cause list.

 * @param clazz type of exception to return.

 * @return The list of causes.

 */

public <T extends Throwable>T getCause(final int index,final Class<T> clazz){

  return clazz.cast(causeList.get(index));

}

Location: IOExceptionList.java

Content: 

/** 

 * Creates a new exception caused by a list of exceptions.

 * @param causeList a list of cause exceptions.

 */

public IOExceptionList(final List<? extends Throwable> causeList){

  this(String.format("%,d exceptions: %s",causeList == null ? 0 : causeList.size(),causeList),causeList);

}

Location: IOExceptionList.java

Content: 

/** 

 * Creates a new exception caused by a list of exceptions.

 * @param message The detail message, see {@link #getMessage()}.

 * @param causeList a list of cause exceptions.

 * @since 2.9.0

 */

public IOExceptionList(final String message,final List<? extends Throwable> causeList){

  super(message,causeList == null || causeList.isEmpty() ? null : causeList.get(0));

  this.causeList=causeList == null ? Collections.emptyList() : causeList;

}

