Location: FileWriterWithEncodingTest.java

Content: 

@Test public void constructorAppend_File_existingFile_withContent() throws Exception {

  try (FileWriter fw1=new FileWriter(file1)){

    fw1.write("ABcd");

  }

   assertEquals(4,file1.length());

  try (FileWriterWithEncoding fw1=new FileWriterWithEncoding(file1,defaultEncoding,true)){

    fw1.write("XyZ");

  }

   assertEquals(7,file1.length());

}

Location: FileWriterWithEncodingTest.java

Content: 

@Test public void constructor_fileName_nullFile(){

  assertThrows(NullPointerException.class,() -> {

    try (Writer writer=new FileWriterWithEncoding((String)null,defaultEncoding)){

    }

   }

);

  assertFalse(file1.exists());

}

Location: FileWriterWithEncodingTest.java

Content: 

@Test public void constructor_File_directory(){

  assertThrows(IOException.class,() -> {

    try (Writer writer=new FileWriterWithEncoding(temporaryFolder,defaultEncoding)){

    }

   }

);

  assertFalse(file1.exists());

}

Location: FileWriterWithEncodingTest.java

Content: 

@Test public void constructor_File_encoding_badEncoding(){

  assertThrows(IOException.class,() -> {

    try (Writer writer=new FileWriterWithEncoding(file1,"BAD-ENCODE")){

    }

   }

);

  assertFalse(file1.exists());

}

Location: FileWriterWithEncodingTest.java

Content: 

@Test public void constructor_File_existingFile_withContent() throws Exception {

  try (FileWriter fw1=new FileWriter(file1)){

    fw1.write(textContent);

    fw1.write(65);

  }

   assertEquals(1025,file1.length());

  try (FileWriterWithEncoding fw1=new FileWriterWithEncoding(file1,defaultEncoding)){

    fw1.write("ABcd");

  }

   assertEquals(4,file1.length());

}

Location: FileWriterWithEncodingTest.java

Content: 

@Test public void constructor_File_nullFile(){

  assertThrows(NullPointerException.class,() -> {

    try (Writer writer=new FileWriterWithEncoding((File)null,defaultEncoding)){

    }

   }

);

  assertFalse(file1.exists());

}

Location: FileWriterWithEncodingTest.java

Content: 

@Test public void sameEncoding_CharsetEncoder_constructor() throws Exception {

  try (final FileWriterWithEncoding writer=new FileWriterWithEncoding(file2,Charset.defaultCharset().newEncoder())){

    successfulRun(writer);

  }

 }

Location: FileWriterWithEncodingTest.java

Content: 

@Test public void sameEncoding_Charset_constructor() throws Exception {

  try (final FileWriterWithEncoding writer=new FileWriterWithEncoding(file2,Charset.defaultCharset())){

    successfulRun(writer);

  }

 }

Location: FileWriterWithEncodingTest.java

Content: 

@Test public void sameEncoding_null_Charset_constructor() throws Exception {

  try (final FileWriterWithEncoding writer=new FileWriterWithEncoding(file2,(Charset)null)){

    successfulRun(writer);

  }

 }

Location: FileWriterWithEncodingTest.java

Content: 

@Test public void sameEncoding_string_CharsetEncoder_constructor() throws Exception {

  try (final FileWriterWithEncoding writer=new FileWriterWithEncoding(file2.getPath(),Charset.defaultCharset().newEncoder())){

    successfulRun(writer);

  }

 }

Location: FileWriterWithEncodingTest.java

Content: 

@Test public void sameEncoding_string_Charset_constructor() throws Exception {

  try (final FileWriterWithEncoding writer=new FileWriterWithEncoding(file2.getPath(),Charset.defaultCharset())){

    successfulRun(writer);

  }

 }

Location: FileWriterWithEncodingTest.java

Content: 

@Test public void sameEncoding_string_constructor() throws Exception {

  try (final FileWriterWithEncoding writer=new FileWriterWithEncoding(file2,defaultEncoding)){

    successfulRun(writer);

  }

 }

Location: FileWriterWithEncodingTest.java

Content: 

@Test public void sameEncoding_string_string_constructor() throws Exception {

  try (final FileWriterWithEncoding writer=new FileWriterWithEncoding(file2.getPath(),defaultEncoding)){

    successfulRun(writer);

  }

 }

Location: FileWriterWithEncodingTest.java

Content: 

private void successfulRun(final FileWriterWithEncoding fw21) throws Exception {

  try (FileWriter fw1=new FileWriter(file1);FileWriterWithEncoding fw2=fw21){

    writeTestPayload(fw1,fw2);

    checkFile(file1,file2);

  }

   assertTrue(file1.exists());

  assertTrue(file2.exists());

}

Location: FileWriterWithEncodingTest.java

Content: 

@Test public void testDifferentEncoding() throws Exception {

  if (Charset.isSupported("UTF-16BE")) {

    try (FileWriter fw1=new FileWriter(file1);FileWriterWithEncoding fw2=new FileWriterWithEncoding(file2,defaultEncoding)){

      writeTestPayload(fw1,fw2);

      try {

        checkFile(file1,file2);

        fail();

      }

 catch (      final AssertionError ex) {

      }

    }

     assertTrue(file1.exists());

    assertTrue(file2.exists());

  }

  if (Charset.isSupported("UTF-16LE")) {

    try (FileWriter fw1=new FileWriter(file1);FileWriterWithEncoding fw2=new FileWriterWithEncoding(file2,defaultEncoding)){

      writeTestPayload(fw1,fw2);

      try {

        checkFile(file1,file2);

        fail();

      }

 catch (      final AssertionError ex) {

      }

    }

     assertTrue(file1.exists());

    assertTrue(file2.exists());

  }

}

Location: FileWriterWithEncodingTest.java

Content: 

private void writeTestPayload(final FileWriter fw1,final FileWriterWithEncoding fw2) throws IOException {

  assertTrue(file1.exists());

  assertTrue(file2.exists());

  fw1.write(textContent);

  fw2.write(textContent);

  fw1.write(65);

  fw2.write(65);

  fw1.write(anotherTestContent);

  fw2.write(anotherTestContent);

  fw1.write(anotherTestContent,1,2);

  fw2.write(anotherTestContent,1,2);

  fw1.write("CAFE",1,2);

  fw2.write("CAFE",1,2);

  fw1.flush();

  fw2.flush();

}

