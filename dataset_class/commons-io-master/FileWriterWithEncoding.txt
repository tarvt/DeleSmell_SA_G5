Location: FileWriterWithEncoding.java

Content: 

/** 

 * Constructs a FileWriterWithEncoding with a file encoding.

 * @param file the file to write to, not null

 * @param charset the encoding to use, not null

 * @throws NullPointerException if the file or encoding is null

 * @throws IOException in case of an I/O error

 */

public FileWriterWithEncoding(final File file,final Charset charset) throws IOException {

  this(file,charset,false);

}

Location: FileWriterWithEncoding.java

Content: 

/** 

 * Constructs a FileWriterWithEncoding with a file encoding.

 * @param file the file to write to, not null.

 * @param encoding the name of the requested charset, null uses the default Charset.

 * @param append true if content should be appended, false to overwrite.

 * @throws NullPointerException if the file is null.

 * @throws IOException in case of an I/O error.

 */

public FileWriterWithEncoding(final File file,final Charset encoding,final boolean append) throws IOException {

  this.out=initWriter(file,encoding,append);

}

Location: FileWriterWithEncoding.java

Content: 

/** 

 * Constructs a FileWriterWithEncoding with a file encoding.

 * @param file the file to write to, not null

 * @param charsetEncoder the encoding to use, not null

 * @throws NullPointerException if the file or encoding is null

 * @throws IOException in case of an I/O error

 */

public FileWriterWithEncoding(final File file,final CharsetEncoder charsetEncoder) throws IOException {

  this(file,charsetEncoder,false);

}

Location: FileWriterWithEncoding.java

Content: 

/** 

 * Constructs a FileWriterWithEncoding with a file encoding.

 * @param file the file to write to, not null.

 * @param charsetEncoder the encoding to use, null uses the default Charset.

 * @param append true if content should be appended, false to overwrite.

 * @throws NullPointerException if the file is null.

 * @throws IOException in case of an I/O error.

 */

public FileWriterWithEncoding(final File file,final CharsetEncoder charsetEncoder,final boolean append) throws IOException {

  this.out=initWriter(file,charsetEncoder,append);

}

Location: FileWriterWithEncoding.java

Content: 

/** 

 * Constructs a FileWriterWithEncoding with a file encoding.

 * @param file the file to write to, not null

 * @param charsetName the name of the requested charset, not null

 * @throws NullPointerException if the file or encoding is null

 * @throws IOException in case of an I/O error

 */

public FileWriterWithEncoding(final File file,final String charsetName) throws IOException {

  this(file,charsetName,false);

}

Location: FileWriterWithEncoding.java

Content: 

/** 

 * Constructs a FileWriterWithEncoding with a file encoding.

 * @param file the file to write to, not null.

 * @param charsetName the name of the requested charset, null uses the default Charset.

 * @param append true if content should be appended, false to overwrite.

 * @throws NullPointerException if the file is null.

 * @throws IOException in case of an I/O error.

 */

public FileWriterWithEncoding(final File file,final String charsetName,final boolean append) throws IOException {

  this.out=initWriter(file,charsetName,append);

}

Location: FileWriterWithEncoding.java

Content: 

/** 

 * Constructs a FileWriterWithEncoding with a file encoding.

 * @param fileName the name of the file to write to, not null

 * @param charset the charset to use, not null

 * @throws NullPointerException if the file name or encoding is null

 * @throws IOException in case of an I/O error

 */

public FileWriterWithEncoding(final String fileName,final Charset charset) throws IOException {

  this(new File(fileName),charset,false);

}

Location: FileWriterWithEncoding.java

Content: 

/** 

 * Constructs a FileWriterWithEncoding with a file encoding.

 * @param fileName the name of the file to write to, not null

 * @param charset the encoding to use, not null

 * @param append true if content should be appended, false to overwrite

 * @throws NullPointerException if the file name or encoding is null

 * @throws IOException in case of an I/O error

 */

public FileWriterWithEncoding(final String fileName,final Charset charset,final boolean append) throws IOException {

  this(new File(fileName),charset,append);

}

Location: FileWriterWithEncoding.java

Content: 

/** 

 * Constructs a FileWriterWithEncoding with a file encoding.

 * @param fileName the name of the file to write to, not null

 * @param encoding the encoding to use, not null

 * @throws NullPointerException if the file name or encoding is null

 * @throws IOException in case of an I/O error

 */

public FileWriterWithEncoding(final String fileName,final CharsetEncoder encoding) throws IOException {

  this(new File(fileName),encoding,false);

}

Location: FileWriterWithEncoding.java

Content: 

/** 

 * Constructs a FileWriterWithEncoding with a file encoding.

 * @param fileName the name of the file to write to, not null

 * @param charsetEncoder the encoding to use, not null

 * @param append true if content should be appended, false to overwrite

 * @throws NullPointerException if the file name or encoding is null

 * @throws IOException in case of an I/O error

 */

public FileWriterWithEncoding(final String fileName,final CharsetEncoder charsetEncoder,final boolean append) throws IOException {

  this(new File(fileName),charsetEncoder,append);

}

Location: FileWriterWithEncoding.java

Content: 

/** 

 * Constructs a FileWriterWithEncoding with a file encoding.

 * @param fileName the name of the file to write to, not null

 * @param charsetName the name of the requested charset, not null

 * @throws NullPointerException if the file name or encoding is null

 * @throws IOException in case of an I/O error

 */

public FileWriterWithEncoding(final String fileName,final String charsetName) throws IOException {

  this(new File(fileName),charsetName,false);

}

Location: FileWriterWithEncoding.java

Content: 

/** 

 * Constructs a FileWriterWithEncoding with a file encoding.

 * @param fileName the name of the file to write to, not null

 * @param charsetName the name of the requested charset, not null

 * @param append true if content should be appended, false to overwrite

 * @throws NullPointerException if the file name or encoding is null

 * @throws IOException in case of an I/O error

 */

public FileWriterWithEncoding(final String fileName,final String charsetName,final boolean append) throws IOException {

  this(new File(fileName),charsetName,append);

}

Location: FileWriterWithEncoding.java

Content: 

/** 

 * Initializes the wrapped file writer. Ensure that a cleanup occurs if the writer creation fails.

 * @param file the file to be accessed

 * @param encoding the encoding to use - may be Charset, CharsetEncoder or String, null uses the default Charset.

 * @param append true to append

 * @return the initialized writer

 * @throws IOException if an error occurs

 */

private static Writer initWriter(final File file,final Object encoding,final boolean append) throws IOException {

  Objects.requireNonNull(file,"file");

  OutputStream stream=null;

  final boolean fileExistedAlready=file.exists();

  try {

    stream=FileUtils.newOutputStream(file,append);

    if (encoding == null || encoding instanceof Charset) {

      return new OutputStreamWriter(stream,Charsets.toCharset((Charset)encoding));

    }

    if (encoding instanceof CharsetEncoder) {

      return new OutputStreamWriter(stream,(CharsetEncoder)encoding);

    }

    return new OutputStreamWriter(stream,(String)encoding);

  }

 catch (  final IOException|RuntimeException ex) {

    try {

      IOUtils.close(stream);

    }

 catch (    final IOException e) {

      ex.addSuppressed(e);

    }

    if (!fileExistedAlready) {

      FileUtils.deleteQuietly(file);

    }

    throw ex;

  }

}

