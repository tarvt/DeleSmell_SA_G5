Location: BoundedInputStream.java

Content: 

/** 

 * Creates a new  {@code BoundedInputStream} that wraps the given inputstream and is unlimited.

 * @param in The wrapped input stream

 */

public BoundedInputStream(final InputStream in){

  this(in,EOF);

}

Location: BoundedInputStream.java

Content: 

/** 

 * Creates a new  {@code BoundedInputStream} that wraps the given inputstream and limits it to a certain size.

 * @param in The wrapped input stream

 * @param size The maximum number of bytes to return

 */

public BoundedInputStream(final InputStream in,final long size){

  this.max=size;

  this.in=in;

}

Location: BoundedInputStream.java

Content: 

/** 

 * Indicates whether the  {@link #close()} methodshould propagate to the underling  {@link InputStream}.

 * @return {@code true} if calling {@link #close()}propagates to the  {@code close()} method of theunderlying stream or  {@code false} if it does not.

 */

public boolean isPropagateClose(){

  return propagateClose;

}

Location: BoundedInputStream.java

Content: 

/** 

 * Set whether the  {@link #close()} methodshould propagate to the underling  {@link InputStream}.

 * @param propagateClose {@code true} if calling{@link #close()} propagates to the {@code close()}method of the underlying stream or {@code false} if it does not.

 */

public void setPropagateClose(final boolean propagateClose){

  this.propagateClose=propagateClose;

}

