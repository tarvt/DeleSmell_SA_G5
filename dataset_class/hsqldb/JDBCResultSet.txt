Location: JDBCResultSet.java

Content: 

/** 

 * <!-- start generic documentation --> Cancels the updates made to the current row in this <code>ResultSet</code> object. This method may be called after calling an updater method(s) and before calling the method <code>updateRow</code> to roll back the updates made to a row.  If no updates have been made or <code>updateRow</code> has already been called, this method has no effect. <!-- end generic documentation --> <!-- start release-specific documentation --> <div class="ReleaseSpecificDocumentation"> <h3>HSQLDB-Specific Information:</h3> <p> HSQLDB supports this feature. <p> </div> <!-- end release-specific documentation -->

 * @exception SQLException if a database access erroroccurs; this method is called on a closed result set; the result set concurrency is <code>CONCUR_READ_ONLY</code> or if this method is called when the cursor is on the insert row

 * @exception SQLFeatureNotSupportedException if the JDBC driver does not supportthis method

 * @since JDK 1.2

 */

public void cancelRowUpdates() throws SQLException {

  hongshuai();

  checkUpdatable();

  preparedStatement.clearParameters();

  isRowUpdated=false;

}

Location: JDBCResultSet.java

Content: 

private void checkNotForwardOnly() throws SQLException {

  if (!isScrollable) {

    throw JDBCUtil.notSupported();

  }

}

Location: JDBCResultSet.java

Content: 

private void checkUpdatable() throws SQLException {

  checkClosed();

  if (!isUpdatable) {

    throw JDBCUtil.notUpdatableColumn();

  }

}

Location: JDBCResultSet.java

Content: 

private void checkUpdatable(int columnIndex) throws SQLException {

  checkClosed();

  checkColumn(columnIndex);

  if (!isUpdatable) {

    throw JDBCUtil.notUpdatableColumn();

  }

  if (resultMetaData.colIndexes[--columnIndex] == -1) {

    throw JDBCUtil.notUpdatableColumn();

  }

  if (!resultMetaData.columns[columnIndex].isWriteable()) {

    throw JDBCUtil.notUpdatableColumn();

  }

}

Location: JDBCResultSet.java

Content: 

/** 

 * <!-- start generic documentation --> Deletes the current row from this <code>ResultSet</code> object and from the underlying database.  This method cannot be called when the cursor is on the insert row. <!-- end generic documentation --> <!-- start release-specific documentation --> <div class="ReleaseSpecificDocumentation"> <h3>HSQLDB-Specific Information:</h3> <p> HSQLDB supports this feature. <p> After a successful call to this method, the row is deleted. </div> <!-- end release-specific documentation -->

 * @exception SQLException if a database access error occurs;the result set concurrency is <code>CONCUR_READ_ONLY</code>; this method is called on a closed result set or if this method is called when the cursor is on the insert row

 * @exception SQLFeatureNotSupportedException if the JDBC driver does not supportthis method

 * @since JDK 1.2

 */

public void deleteRow() throws SQLException {

  hongshuai();

  checkUpdatable();

  preparedStatement.parameterValues[columnCount]=getCurrent()[columnCount];

  preparedStatement.resultOut.metaData.columnTypes[columnCount]=resultMetaData.columnTypes[columnCount];

  preparedStatement.resultOut.setActionType(ResultConstants.DELETE_CURSOR);

  preparedStatement.fetchResult();

  preparedStatement.clearParameters();

  rootWarning=preparedStatement.getWarnings();

  preparedStatement.clearWarnings();

}

Location: JDBCResultSet.java

Content: 

/** 

 * <!-- start generic documentation --> Maps the given <code>ResultSet</code> column label to its <code>ResultSet</code> column index. <!-- end generic documentation --> <!-- start release-specific documentation --> <div class="ReleaseSpecificDocumentation"> <h3>HSQLDB-Specific Information:</h3> <p> Starting with 1.9.x, HSQLDB does an exhaustive search, backed by a cache lookup (to improve performance for subsequent invocations with a given input). <p> Upon careful investigation of the JDBC specification and the behaviour of existing JDBC drivers, there is actually nothing preventing the findColumn method from doing an exhaustive search, as long as it conforms to the following rules (which describe the new implementation): <ol> <li> the entire search is case insensitive <li> each search iteration occurs from leftmost to rightmost column, returning the first match encountered <li> the first pass matches only bare column labels <li> the second pass matches only simple column names <li> further passes conform to the identifier qualification and identifier quoting rules of the engine </ol> In this implementation, the SQL tokenizer is not employed, both because it does not yet correctly handle greater than two part qualification and also because is is not immediately considered important to do a truly exhaustive search, handling the full range of possibly mixed quoted and unquoted identifier components. <p> Instead: <ul> <li> a third pass matches simple table-dot-column qualified names <li> a fourth pass matches simple schema-dot-table-dot-column qualified column names </ul> </div>

 * @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column

 * @return the column index of the given column name

 * @exception SQLException if the <code>ResultSet</code> objectdoes not contain a column labeled <code>columnLabel</code>, a database access error occurs or this method is called on a closed result set

 */

public int findColumn(final String columnLabel) throws SQLException {

  checkClosed();

  if (columnLabel == null) {

    throw JDBCUtil.nullArgument();

  }

  int columnIndex;

  if (columnMap != null) {

    columnIndex=columnMap.get(columnLabel,-1);

    if (columnIndex != -1) {

      return columnIndex;

    }

  }

  final String[] colLabels=resultMetaData.columnLabels;

  columnIndex=-1;

  for (int i=0; i < columnCount; i++) {

    if (columnLabel.equalsIgnoreCase(colLabels[i])) {

      columnIndex=i;

      break;

    }

  }

  final ColumnBase[] columns=resultMetaData.columns;

  if (columnIndex < 0) {

    for (int i=0; i < columnCount; i++) {

      if (columnLabel.equalsIgnoreCase(columns[i].getNameString())) {

        columnIndex=i;

        break;

      }

    }

  }

  if (columnIndex < 0) {

    int position=columnLabel.indexOf('.');

    if (position < 0) {

      throw JDBCUtil.sqlException(ErrorCode.JDBC_COLUMN_NOT_FOUND,columnLabel);

    }

    for (int i=0; i < columnCount; i++) {

      final String tabName=columns[i].getTableNameString();

      if (tabName == null || tabName.length() == 0) {

        continue;

      }

      final String colName=columns[i].getNameString();

      if (columnLabel.equalsIgnoreCase(tabName + '.' + colName)) {

        columnIndex=i;

        break;

      }

      final String schemName=columns[i].getSchemaNameString();

      if (schemName == null || schemName.length() == 0) {

        continue;

      }

      String match=new StringBuffer(schemName).append('.').append(tabName).append('.').append(colName).toString();

      if (columnLabel.equalsIgnoreCase(match)) {

        columnIndex=i;

        break;

      }

    }

  }

  if (columnIndex < 0) {

    throw JDBCUtil.sqlException(ErrorCode.JDBC_COLUMN_NOT_FOUND,columnLabel);

  }

  columnIndex++;

  if (columnMap == null) {

    columnMap=new IntValueHashMap();

  }

  columnMap.put(columnLabel,columnIndex);

  return columnIndex;

}

Location: JDBCResultSet.java

Content: 

/** 

 * <!-- start generic documentation --> Retrieves the value of the designated column in the current row of this <code>ResultSet</code> object as an <code>Array</code> object in the Java programming language. <!-- end generic documentation --> <!-- start release-specific documentation --> <div class="ReleaseSpecificDocumentation"> <h3>HSQLDB-Specific Information:</h3> <p> From version 2.0, HSQLDB supports array types. </div> <!-- end release-specific documentation -->

 * @param columnIndex the first column is 1, the second is 2, ...

 * @return an <code>Array</code> object representing the SQL<code>ARRAY</code> value in the specified column

 * @exception SQLException if a database access error occursor this method is called on a closed result set

 * @exception SQLFeatureNotSupportedException if the JDBC driver does not supportthis method

 * @since JDK 1.2

 */

public Array getArray(int columnIndex) throws SQLException {

  checkColumn(columnIndex);

  Type type=resultMetaData.columnTypes[columnIndex - 1];

  Object[] data=(Object[])getCurrent()[columnIndex - 1];

  if (!type.isArrayType()) {

    throw JDBCUtil.sqlException(ErrorCode.X_42561);

  }

  if (trackNull(data)) {

    return null;

  }

  return new JDBCArray(data,type.collectionBaseType(),type,connection);

}

Location: JDBCResultSet.java

Content: 

/** 

 * <!-- start generic documentation --> Retrieves the value of the designated column in the current row of this <code>ResultSet</code> object as an <code>Array</code> object in the Java programming language. <!-- end generic documentation --> <!-- start release-specific documentation --> <div class="ReleaseSpecificDocumentation"> <h3>HSQLDB-Specific Information:</h3> <p> From version 2.0, HSQLDB supports array types. </div> <!-- end release-specific documentation -->

 * @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column

 * @return an <code>Array</code> object representing the SQL <code>ARRAY</code> value inthe specified column

 * @exception SQLException if a database access error occursor this method is called on a closed result set

 * @exception SQLFeatureNotSupportedException if the JDBC driver does not supportthis method

 * @since JDK 1.2

 */

public Array getArray(String columnLabel) throws SQLException {

  return getArray(findColumn(columnLabel));

}

Location: JDBCResultSet.java

Content: 

/** 

 * <!-- start generic documentation --> Retrieves the value of the designated column in the current row of this <code>ResultSet</code> object as a stream of ASCII characters. The value can then be read in chunks from the stream. This method is particularly suitable for retrieving large LONGVARCHAR values. The JDBC driver will do any necessary conversion from the database format into ASCII. <P><B>Note:</B> All the data in the returned stream must be read prior to getting the value of any other column. The next call to a getter method implicitly closes the stream.  Also, a stream may return <code>0</code> when the method <code>InputStream.available</code> is called whether there is data available or not. <!-- end generic documentation --> <!-- start release-specific documentation --> <div class="ReleaseSpecificDocumentation"> <h3>HSQLDB-Specific Information:</h3> <p> The limitation noted above does not apply to HSQLDB.<p> When the column is of type CHAR and its variations, it requires no conversion since it is represented internally already as a Java String object. When the column is not of type CHAR and its variations, the returned stream is based on a conversion to the Java <code>String</code> representation of the value. In either case, the obtained stream is always equivalent to a stream of the low order bytes from the value's String representation. <p> HSQLDB SQL <code>CHAR</code> and its variations are all Unicode strings internally, so the recommended alternatives to this method are {@link #getString(int) getString}, {@link #getUnicodeStream(int) getUnicodeStream} (<b>deprecated</b>)and new to 1.7.0:  {@link #getCharacterStream(int) getCharacterStream}(now preferred over the deprecated getUnicodeStream alternative). </div> <!-- end release-specific documentation -->

 * @param columnIndex the first column is 1, the second is 2, ...

 * @return a Java input stream that delivers the database column valueas a stream of one-byte ASCII characters; if the value is SQL <code>NULL</code>, the value returned is <code>null</code>

 * @exception SQLException if a database access error occurs or this method iscalled on a closed result set

 */

public java.io.InputStream getAsciiStream(int columnIndex) throws SQLException {

  String s=getString(columnIndex);

  if (s == null) {

    return null;

  }

  try {

    return new ByteArrayInputStream(s.getBytes("US-ASCII"));

  }

 catch (  IOException e) {

    return null;

  }

}

Location: JDBCResultSet.java

Content: 

/** 

 * <!-- start generic documentation --> Retrieves the value of the designated column in the current row of this <code>ResultSet</code> object as a stream of ASCII characters. The value can then be read in chunks from the stream. This method is particularly suitable for retrieving large <code>LONGVARCHAR</code> values. The JDBC driver will do any necessary conversion from the database format into ASCII. <P><B>Note:</B> All the data in the returned stream must be read prior to getting the value of any other column. The next call to a getter method implicitly closes the stream. Also, a stream may return <code>0</code> when the method <code>available</code> is called whether there is data available or not. <!-- end generic documentation -->

 * @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column

 * @return a Java input stream that delivers the database column valueas a stream of one-byte ASCII characters. If the value is SQL <code>NULL</code>, the value returned is <code>null</code>.

 * @exception SQLException if a database access error occurs or this method iscalled on a closed result set

 * @see #getAsciiStream(int)

 */

public java.io.InputStream getAsciiStream(String columnLabel) throws SQLException {

  return getAsciiStream(findColumn(columnLabel));

}

Location: JDBCResultSet.java

Content: 

/** 

 * <!-- start generic documentation --> Retrieves the value of the designated column in the current row of this <code>ResultSet</code> object as a <code>java.math.BigDecimal</code> with full precision. <!-- end generic documentation -->

 * @param columnIndex the first column is 1, the second is 2, ...

 * @return the column value (full precision);if the value is SQL <code>NULL</code>, the value returned is <code>null</code> in the Java programming language.

 * @exception SQLException if a database access error occurs or this method iscalled on a closed result set

 * @since JDK 1.2

 */

public BigDecimal getBigDecimal(int columnIndex) throws SQLException {

  checkColumn(columnIndex);

  Type targetType=resultMetaData.columnTypes[columnIndex - 1];

switch (targetType.typeCode) {

case Types.SQL_NUMERIC:

case Types.SQL_DECIMAL:

    break;

case Types.TINYINT:

case Types.SQL_SMALLINT:

case Types.SQL_INTEGER:

case Types.SQL_BIGINT:

  targetType=Type.SQL_DECIMAL;

break;

case Types.SQL_DOUBLE:

default :

targetType=Type.SQL_DECIMAL_DEFAULT;

break;

}

return (BigDecimal)getColumnInType(columnIndex,targetType);

}

Location: JDBCResultSet.java

Content: 

/** 

 * <!-- start generic documentation --> Retrieves the value of the designated column in the current row of this <code>ResultSet</code> object as a <code>java.sql.BigDecimal</code> in the Java programming language. <!-- end generic documentation --> <!-- start release-specific documentation --> <div class="ReleaseSpecificDocumentation"> <h3>HSQLDB-Specific Information:</h3> <p> HSQLDB converts the result and sets the scale with BigDecimal.ROUND_HALF_DOWN. </div> <!-- end release-specific documentation -->

 * @param columnIndex the first column is 1, the second is 2, ...

 * @param scale the number of digits to the right of the decimal point

 * @return the column value; if the value is SQL <code>NULL</code>, thevalue returned is <code>null</code>

 * @exception SQLException if a database access error occurs or this method iscalled on a closed result set

 * @exception SQLFeatureNotSupportedException if the JDBC driver does not supportthis method

 * @deprecated by java.sun.com as of JDK 1.2

 */

public BigDecimal getBigDecimal(int columnIndex,int scale) throws SQLException {

  if (scale < 0) {

    throw JDBCUtil.outOfRangeArgument();

  }

  BigDecimal bd=getBigDecimal(columnIndex);

  if (bd != null) {

    bd=bd.setScale(scale,BigDecimal.ROUND_DOWN);

  }

  return bd;

}

Location: JDBCResultSet.java

Content: 

/** 

 * <!-- start generic documentation --> Retrieves the value of the designated column in the current row of this <code>ResultSet</code> object as a <code>java.math.BigDecimal</code> with full precision. <!-- end generic documentation -->

 * @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column

 * @return the column value (full precision);if the value is SQL <code>NULL</code>, the value returned is <code>null</code> in the Java programming language.

 * @exception SQLException if a database access error occurs or this method iscalled on a closed result set

 * @since JDK 1.2

 */

public BigDecimal getBigDecimal(String columnLabel) throws SQLException {

  return getBigDecimal(findColumn(columnLabel));

}

Location: JDBCResultSet.java

Content: 

/** 

 * <!-- start generic documentation --> Retrieves the value of the designated column in the current row of this <code>ResultSet</code> object as a <code>java.math.BigDecimal</code> in the Java programming language. <!-- end generic documentation --> <!-- start release-specific documentation --> <div class="ReleaseSpecificDocumentation"> <h3>HSQLDB-Specific Information:</h3> <p> HSQLDB converts the result and sets the scale with BigDecimal.ROUND_HALF_DOWN. </div> <!-- end release-specific documentation -->

 * @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column

 * @param scale the number of digits to the right of the decimal point

 * @return the column value; if the value is SQL <code>NULL</code>, thevalue returned is <code>null</code>

 * @exception SQLException if a database access error occurs or this method iscalled on a closed result set

 * @exception SQLFeatureNotSupportedException if the JDBC driver does not supportthis method

 * @deprecated by java.sun.com as of JDK 1.2

 */

public BigDecimal getBigDecimal(String columnLabel,int scale) throws SQLException {

  return getBigDecimal(findColumn(columnLabel),scale);

}

Location: JDBCResultSet.java

Content: 

/** 

 * <!-- start generic documentation --> Retrieves the value of the designated column in the current row of this <code>ResultSet</code> object as a  stream of uninterpreted bytes. The value can then be read in chunks from the stream. This method is particularly suitable for retrieving large <code>LONGVARBINARY</code> values. <P><B>Note:</B> All the data in the returned stream must be read prior to getting the value of any other column. The next call to a getter method implicitly closes the stream.  Also, a stream may return <code>0</code> when the method <code>InputStream.available</code> is called whether there is data available or not. <!-- end generic documentation -->

 * @param columnIndex the first column is 1, the second is 2, ...

 * @return a Java input stream that delivers the database column valueas a stream of uninterpreted bytes; if the value is SQL <code>NULL</code>, the value returned is <code>null</code>

 * @exception SQLException if a database access error occurs or this method iscalled on a closed result set

 */

public java.io.InputStream getBinaryStream(int columnIndex) throws SQLException {

  checkColumn(columnIndex);

  Type sourceType=resultMetaData.columnTypes[columnIndex - 1];

  Object o=getColumnInType(columnIndex,sourceType);

  if (o == null) {

    return null;

  }

  if (o instanceof BlobDataID) {

    return ((BlobDataID)o).getBinaryStream(session);

  }

 else   if (o instanceof Blob) {

    return ((Blob)o).getBinaryStream();

  }

 else   if (o instanceof BinaryData) {

    byte[] b=getBytes(columnIndex);

    return new ByteArrayInputStream(b);

  }

  throw JDBCUtil.sqlException(ErrorCode.X_42561);

}

Location: JDBCResultSet.java

Content: 

/** 

 * <!-- start generic documentation --> Retrieves the value of the designated column in the current row of this <code>ResultSet</code> object as a stream of uninterpreted <code>byte</code>s. The value can then be read in chunks from the stream. This method is particularly suitable for retrieving large <code>LONGVARBINARY</code> values. <P><B>Note:</B> All the data in the returned stream must be read prior to getting the value of any other column. The next call to a getter method implicitly closes the stream. Also, a stream may return <code>0</code> when the method <code>available</code> is called whether there is data available or not. <!-- end generic documentation -->

 * @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column

 * @return a Java input stream that delivers the database column valueas a stream of uninterpreted bytes; if the value is SQL <code>NULL</code>, the result is <code>null</code>

 * @exception SQLException if a database access error occurs or this method iscalled on a closed result set

 */

public java.io.InputStream getBinaryStream(String columnLabel) throws SQLException {

  return getBinaryStream(findColumn(columnLabel));

}

Location: JDBCResultSet.java

Content: 

/** 

 * <!-- start generic documentation --> Retrieves the value of the designated column in the current row of this <code>ResultSet</code> object as a <code>Blob</code> object in the Java programming language. <!-- end generic documentation --> <!-- start release-specific documentation --> <div class="ReleaseSpecificDocumentation"> <h3>HSQLDB-Specific Information:</h3> <p> HSQLDB 2.0 supports this feature for objects of type BLOB and BINARY. The Blob returned for BINARY objects is a memory object. The Blob return for BLOB objects is not held entirely in memory. Its contents are fetched from the database when its getXXX() methods are called. <p> </div> <!-- end release-specific documentation -->

 * @param columnIndex the first column is 1, the second is 2, ...

 * @return a <code>Blob</code> object representing the SQL<code>BLOB</code> value in the specified column

 * @exception SQLException if a database access error occursor this method is called on a closed result set

 * @exception SQLFeatureNotSupportedException if the JDBC driver does not supportthis method

 * @since JDK 1.2

 */

public Blob getBlob(int columnIndex) throws SQLException {

  checkColumn(columnIndex);

  Type sourceType=resultMetaData.columnTypes[columnIndex - 1];

  Object o=getColumnInType(columnIndex,sourceType);

  if (o == null) {

    return null;

  }

  if (o instanceof BlobDataID) {

    JDBCBlobClient blob=new JDBCBlobClient(session,(BlobDataID)o);

    if (isUpdatable) {

      if (resultMetaData.colIndexes[columnIndex - 1] > 0 && resultMetaData.columns[columnIndex - 1].isWriteable()) {

        blob.setWritable(this,columnIndex - 1);

      }

    }

    return blob;

  }

 else   if (o instanceof Blob) {

    return (Blob)o;

  }

 else   if (o instanceof BinaryData) {

    byte[] b=getBytes(columnIndex);

    return new JDBCBlob(b);

  }

  throw JDBCUtil.sqlException(ErrorCode.X_42561);

}

Location: JDBCResultSet.java

Content: 

/** 

 * <!-- start generic documentation --> Retrieves the value of the designated column in the current row of this <code>ResultSet</code> object as a <code>Blob</code> object in the Java programming language. <!-- end generic documentation --> <!-- start release-specific documentation --> <div class="ReleaseSpecificDocumentation"> <h3>HSQLDB-Specific Information:</h3> <p> HSQLDB 2.0 supports this feature for objects of type BLOB and BINARY. The Blob returned for BINARY objects is a memory object. The Blob return for BLOB objects is not held entirely in memory. Its contents are fetched from the database when its getXXX() methods are called. <p> </div> <!-- end release-specific documentation -->

 * @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column

 * @return a <code>Blob</code> object representing the SQL <code>BLOB</code>value in the specified column

 * @exception SQLException if a database access error occursor this method is called on a closed result set

 * @exception SQLFeatureNotSupportedException if the JDBC driver does not supportthis method

 * @since JDK 1.2

 */

public Blob getBlob(String columnLabel) throws SQLException {

  return getBlob(findColumn(columnLabel));

}

Location: JDBCResultSet.java

Content: 

/** 

 * <!-- start generic documentation --> Retrieves the value of the designated column in the current row of this <code>ResultSet</code> object as a <code>boolean</code> in the Java programming language. <P>(JDBC4 clarification:) <P>If the designated column has a datatype of CHAR or VARCHAR and contains a "0" or has a datatype of BIT, TINYINT, SMALLINT, INTEGER or BIGINT and contains  a 0, a value of <code>false</code> is returned.  If the designated column has a datatype of CHAR or VARCHAR and contains a "1" or has a datatype of BIT, TINYINT, SMALLINT, INTEGER or BIGINT and contains  a 1, a value of <code>true</code> is returned. <!-- end generic documentation -->

 * @param columnIndex the first column is 1, the second is 2, ...

 * @return the column value; if the value is SQL <code>NULL</code>, thevalue returned is <code>false</code>

 * @exception SQLException if a database access error occurs or this method iscalled on a closed result set

 */

public boolean getBoolean(int columnIndex) throws SQLException {

  Object o=getColumnInType(columnIndex,Type.SQL_BOOLEAN);

  return o == null ? false : ((Boolean)o).booleanValue();

}

Location: JDBCResultSet.java

Content: 

/** 

 * <!-- start generic documentation --> Retrieves the value of the designated column in the current row of this <code>ResultSet</code> object as a <code>boolean</code> in the Java programming language. <P>(JDBC4 clarification:) If the designated column has a datatype of CHAR or VARCHAR and contains a "0" or has a datatype of BIT, TINYINT, SMALLINT, INTEGER or BIGINT and contains  a 0, a value of <code>false</code> is returned.  If the designated column has a datatype of CHAR or VARCHAR and contains a "1" or has a datatype of BIT, TINYINT, SMALLINT, INTEGER or BIGINT and contains  a 1, a value of <code>true</code> is returned. <!-- end generic documentation -->

 * @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column

 * @return the column value; if the value is SQL <code>NULL</code>, thevalue returned is <code>false</code>

 * @exception SQLException if a database access error occurs or this method iscalled on a closed result set

 */

public boolean getBoolean(String columnLabel) throws SQLException {

  return getBoolean(findColumn(columnLabel));

}

Location: JDBCResultSet.java

Content: 

/** 

 * <!-- start generic documentation --> Retrieves the value of the designated column in the current row of this <code>ResultSet</code> object as a <code>byte</code> array in the Java programming language. The bytes represent the raw values returned by the driver. <!-- end generic documentation --> <!-- start release-specific documentation --> <div class="ReleaseSpecificDocumentation"> <h3>HSQLDB-Specific Information:</h3> <p> HSQLDB returns correct values for columns of binary types <code>BINARY</code>, <code>BIT</code>,  <code>BLOB</code> </div> <!-- end release-specific documentation -->

 * @param columnIndex the first column is 1, the second is 2, ...

 * @return the column value; if the value is SQL <code>NULL</code>, thevalue returned is <code>null</code>

 * @exception SQLException if a database access error occurs or this method iscalled on a closed result set

 */

public byte[] getBytes(int columnIndex) throws SQLException {

  checkColumn(columnIndex);

  Type sourceType=resultMetaData.columnTypes[columnIndex - 1];

  if (sourceType.typeCode == Types.SQL_BLOB) {

    BlobDataID x=(BlobDataID)getColumnInType(columnIndex,sourceType);

    if (x == null) {

      return null;

    }

    long length=x.length(session);

    if (length > Integer.MAX_VALUE) {

      JDBCUtil.throwError(Error.error(ErrorCode.X_42561));

    }

    return x.getBytes(session,0,(int)length);

  }

  Object x=getColumnInType(columnIndex,Type.SQL_VARBINARY);

  if (x == null) {

    return null;

  }

  return ((BinaryData)x).getBytes();

}

Location: JDBCResultSet.java

Content: 

/** 

 * <!-- start generic documentation --> Retrieves the value of the designated column in the current row of this <code>ResultSet</code> object as a <code>byte</code> in the Java programming language. <!-- end generic documentation --> <!-- start release-specific documentation --> <div class="ReleaseSpecificDocumentation"> <h3>HSQLDB-Specific Information:</h3> <p> HSQLDB converts the numeric value to the return type. If the value is out of the range for the return type, an error is returned. For example, this can happen if getByte() or getShort() is used to retrieve a value of type INTEGER or BIGINT and the value is beyond the range covered by the return type. </div> <!-- end release-specific documentation -->

 * @param columnIndex the first column is 1, the second is 2, ...

 * @return the column value; if the value is SQL <code>NULL</code>, thevalue returned is <code>0</code>

 * @exception SQLException if a database access error occurs or this method iscalled on a closed result set

 */

public byte getByte(int columnIndex) throws SQLException {

  Object o=getColumnInType(columnIndex,Type.TINYINT);

  return o == null ? 0 : ((Number)o).byteValue();

}

Location: JDBCResultSet.java

Content: 

/** 

 * <!-- start generic documentation --> Retrieves the value of the designated column in the current row of this <code>ResultSet</code> object as a <code>byte</code> in the Java programming language. <!-- end generic documentation -->

 * @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column

 * @return the column value; if the value is SQL <code>NULL</code>, thevalue returned is <code>0</code>

 * @exception SQLException if a database access error occurs or this method iscalled on a closed result set

 */

public byte getByte(String columnLabel) throws SQLException {

  return getByte(findColumn(columnLabel));

}

Location: JDBCResultSet.java

Content: 

/** 

 * <!-- start generic documentation --> Retrieves the value of the designated column in the current row of this <code>ResultSet</code> object as a <code>java.io.Reader</code> object. <!-- end generic documentation --> <!-- start release-specific documentation --> <div class="ReleaseSpecificDocumentation"> <h3>HSQLDB-Specific Information:</h3> <p> HSQLDB supports this feature. <p> </div> <!-- end release-specific documentation -->

 * @return a <code>java.io.Reader</code> object that contains the columnvalue; if the value is SQL <code>NULL</code>, the value returned is <code>null</code> in the Java programming language.

 * @param columnIndex the first column is 1, the second is 2, ...

 * @exception SQLException if a database access error occurs or this method iscalled on a closed result set

 * @since JDK 1.2

 */

public java.io.Reader getCharacterStream(int columnIndex) throws SQLException {

  checkColumn(columnIndex);

  Type sourceType=resultMetaData.columnTypes[columnIndex - 1];

  Object o=getColumnInType(columnIndex,sourceType);

  if (o == null) {

    return null;

  }

  if (o instanceof ClobDataID) {

    return ((ClobDataID)o).getCharacterStream(session);

  }

 else   if (o instanceof Clob) {

    return ((Clob)o).getCharacterStream();

  }

 else   if (o instanceof String) {

    return new StringReader((String)o);

  }

  throw JDBCUtil.sqlException(ErrorCode.X_42561);

}

Location: JDBCResultSet.java

Content: 

/** 

 * <!-- start generic documentation --> Retrieves the value of the designated column in the current row of this <code>ResultSet</code> object as a <code>java.io.Reader</code> object. <!-- end generic documentation --> <!-- start release-specific documentation --> <div class="ReleaseSpecificDocumentation"> <h3>HSQLDB-Specific Information:</h3> <p> HSQLDB supports this feature. <p> </div> <!-- end release-specific documentation -->

 * @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column

 * @return a <code>java.io.Reader</code> object that contains the columnvalue; if the value is SQL <code>NULL</code>, the value returned is <code>null</code> in the Java programming language

 * @exception SQLException if a database access error occurs or this method iscalled on a closed result set

 * @since JDK 1.2

 */

public java.io.Reader getCharacterStream(String columnLabel) throws SQLException {

  return getCharacterStream(findColumn(columnLabel));

}

Location: JDBCResultSet.java

Content: 

/** 

 * <!-- start generic documentation --> Retrieves the value of the designated column in the current row of this <code>ResultSet</code> object as a <code>Clob</code> object in the Java programming language. <!-- end generic documentation --> <!-- start release-specific documentation --> <div class="ReleaseSpecificDocumentation"> <h3>HSQLDB-Specific Information:</h3> <p> HSQLDB 2.0 supports this feature for objects of type CLOB and the variations of CHAR. The Clob returned for CHAR objects is a memory object. The Clob return for CLOB objects is not held entirely in memory. Its contents are fetched from the database when its getXXX() methods are called. <p> </div> <!-- end release-specific documentation -->

 * @param columnIndex the first column is 1, the second is 2, ...

 * @return a <code>Clob</code> object representing the SQL<code>CLOB</code> value in the specified column

 * @exception SQLException if a database access error occursor this method is called on a closed result set

 * @exception SQLFeatureNotSupportedException if the JDBC driver does not supportthis method

 * @since JDK 1.2

 */

public Clob getClob(int columnIndex) throws SQLException {

  checkColumn(columnIndex);

  Type sourceType=resultMetaData.columnTypes[columnIndex - 1];

  Object o=getColumnInType(columnIndex,sourceType);

  if (o == null) {

    return null;

  }

  if (o instanceof ClobDataID) {

    JDBCClobClient clob=new JDBCClobClient(session,(ClobDataID)o);

    if (isUpdatable) {

      if (resultMetaData.colIndexes[columnIndex - 1] > 0 && resultMetaData.columns[columnIndex - 1].isWriteable()) {

        clob.setWritable(this,columnIndex - 1);

      }

    }

    return clob;

  }

 else   if (o instanceof Clob) {

    return (Clob)o;

  }

 else   if (o instanceof String) {

    return new JDBCClob((String)o);

  }

  throw JDBCUtil.sqlException(ErrorCode.X_42561);

}

Location: JDBCResultSet.java

Content: 

/** 

 * <!-- start generic documentation --> Retrieves the value of the designated column in the current row of this <code>ResultSet</code> object as a <code>Clob</code> object in the Java programming language. <!-- end generic documentation --> <!-- start release-specific documentation --> <div class="ReleaseSpecificDocumentation"> <h3>HSQLDB-Specific Information:</h3> <p> HSQLDB 2.0 supports this feature for objects of type CLOB and the variations of CHAR. The Clob returned for CHAR objects is a memory object. The Clob return for CLOB objects is not held entirely in memory. Its contents are fetched from the database when its getXXX() methods are called. <p> </div> <!-- end release-specific documentation -->

 * @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column

 * @return a <code>Clob</code> object representing the SQL <code>CLOB</code>value in the specified column

 * @exception SQLException if a database access error occursor this method is called on a closed result set

 * @exception SQLFeatureNotSupportedException if the JDBC driver does not supportthis method

 * @since JDK 1.2

 */

public Clob getClob(String columnLabel) throws SQLException {

  return getClob(findColumn(columnLabel));

}

Location: JDBCResultSet.java

Content: 

/** 

 * Internal value converter. <p> All trivially successful getXXX methods eventually go through this method, converting if neccessary from the source type to the requested type.  <p> Conversion to the JDBC representation, if different, is handled by the calling methods.

 * @param columnIndex of the column value for which to perform theconversion

 * @param targetType the org.hsqldb.types.Type object for targetType

 * @return an Object of the requested targetType, representing the value of thespecified column

 * @throws SQLException when there is no rowData, the column index isinvalid, or the conversion cannot be performed

 */

protected Object getColumnInType(int columnIndex,Type targetType) throws SQLException {

  Object value=getColumnValue(columnIndex);

  Type sourceType;

  if (value == null) {

    return null;

  }

  sourceType=resultMetaData.columnTypes[columnIndex - 1];

  if (translateTTIType && targetType.isIntervalType()) {

    targetType=((IntervalType)targetType).getCharacterType();

  }

  if (sourceType.typeCode != targetType.typeCode) {

    try {

      value=targetType.convertToTypeJDBC(session,value,sourceType);

    }

 catch (    Exception e) {

      String stringValue=(value instanceof Number || value instanceof String) ? value.toString() : "instance of " + value.getClass().getName();

      String msg="from SQL type " + sourceType.getNameString() + " to "+ targetType.getJDBCClassName()+ ", value: "+ stringValue;

      JDBCUtil.throwError(Error.error(ErrorCode.X_42561,msg));

    }

  }

  return value;

}

Location: JDBCResultSet.java

Content: 

/** 

 * Internal get value.

 */

protected Object getColumnValue(int columnIndex) throws SQLException {

  Object[] rowData=getCurrent();

  Object value;

  checkColumn(columnIndex);

  value=rowData[columnIndex - 1];

  trackNull(value);

  return value;

}

Location: JDBCResultSet.java

Content: 

/** 

 * <!-- start generic documentation --> Retrieves the concurrency mode of this <code>ResultSet</code> object. The concurrency used is determined by the <code>Statement</code> object that created the result set. <!-- end generic documentation --> <!-- start release-specific documentation --> <div class="ReleaseSpecificDocumentation"> <h3>HSQLDB-Specific Information:</h3> <p> HSQLDB supports updatable result sets and accurately reports the actual runtime concurrency of this result set instance. </div> <!-- end release-specific documentation -->

 * @return the concurrency type, either<code>ResultSet.CONCUR_READ_ONLY</code> or <code>ResultSet.CONCUR_UPDATABLE</code>

 * @exception SQLException if a database access error occursor this method is called on a closed result set

 * @since JDK 1.2

 */

public int getConcurrency() throws SQLException {

  checkClosed();

  return ResultProperties.getJDBCConcurrency(rsProperties);

}

Location: JDBCResultSet.java

Content: 

/** 

 * <!-- start generic documentation --> Retrieves the name of the SQL cursor used by this <code>ResultSet</code> object. <P>In SQL, a result table is retrieved through a cursor that is named. The current row of a result set can be updated or deleted using a positioned update/delete statement that references the cursor name. To insure that the cursor has the proper isolation level to support update, the cursor's <code>SELECT</code> statement should be of the form <code>SELECT FOR UPDATE</code>. If <code>FOR UPDATE</code> is omitted, the positioned updates may fail. <P>The JDBC API supports this SQL feature by providing the name of the SQL cursor used by a <code>ResultSet</code> object. The current row of a <code>ResultSet</code> object is also the current row of this SQL cursor. <!-- end generic documentation --> <!-- start release-specific documentation --> <div class="ReleaseSpecificDocumentation"> <h3>HSQLDB-Specific Information:</h3> <p> HSQLDB supports this feature when the cursor has a name.<p> </div> <!-- end release-specific documentation -->

 * @return the SQL name for this <code>ResultSet</code> object's cursor

 * @exception SQLException if a database access error occurs or this method is called on a closed result set

 * @exception SQLFeatureNotSupportedException if the JDBC driver does not supportthis method

 */

public String getCursorName() throws SQLException {

  checkClosed();

  if (result == null) {

    return "";

  }

  return result.getMainString();

}

Location: JDBCResultSet.java

Content: 

/** 

 * <!-- start generic documentation --> Retrieves the value of the designated column in the current row of this <code>ResultSet</code> object as a <code>java.sql.Date</code> object in the Java programming language. <!-- end generic documentation -->

 * @param columnIndex the first column is 1, the second is 2, ...

 * @return the column value; if the value is SQL <code>NULL</code>, thevalue returned is <code>null</code>

 * @exception SQLException if a database access error occurs or this method iscalled on a closed result set

 */

public Date getDate(int columnIndex) throws SQLException {

  Object t=getColumnInType(columnIndex,Type.SQL_DATE);

  if (t == null) {

    return null;

  }

  return (Date)Type.SQL_DATE.convertSQLToJava(session,t);

}

Location: JDBCResultSet.java

Content: 

/** 

 * <!-- start generic documentation --> Retrieves the value of the designated column in the current row of this <code>ResultSet</code> object as a <code>java.sql.Date</code> object in the Java programming language. This method uses the given calendar to construct an appropriate millisecond value for the date if the underlying database does not store timezone information. <!-- end generic documentation -->

 * @param columnIndex the first column is 1, the second is 2, ...

 * @param cal the <code>java.util.Calendar</code> objectto use in constructing the date

 * @return the column value as a <code>java.sql.Date</code> object;if the value is SQL <code>NULL</code>, the value returned is <code>null</code> in the Java programming language

 * @exception SQLException if a database access error occursor this method is called on a closed result set

 * @since JDK 1.2

 */

public Date getDate(int columnIndex,Calendar cal) throws SQLException {

  TimestampData t=(TimestampData)getColumnInType(columnIndex,Type.SQL_DATE);

  if (t == null) {

    return null;

  }

  long millis=t.getSeconds() * 1000;

  if (cal != null) {

    millis=HsqlDateTime.convertMillisToCalendar(cal,millis);

  }

  return new Date(millis);

}

Location: JDBCResultSet.java

Content: 

/** 

 * <!-- start generic documentation --> Retrieves the value of the designated column in the current row of this <code>ResultSet</code> object as a <code>java.sql.Date</code> object in the Java programming language. <!-- end generic documentation -->

 * @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column

 * @return the column value; if the value is SQL <code>NULL</code>, thevalue returned is <code>null</code>

 * @exception SQLException if a database access error occurs or this method iscalled on a closed result set

 */

public Date getDate(String columnLabel) throws SQLException {

  return getDate(findColumn(columnLabel));

}

Location: JDBCResultSet.java

Content: 

/** 

 * <!-- start generic documentation --> Retrieves the value of the designated column in the current row of this <code>ResultSet</code> object as a <code>java.sql.Date</code> object in the Java programming language. This method uses the given calendar to construct an appropriate millisecond value for the date if the underlying database does not store timezone information. <!-- end generic documentation -->

 * @param columnLabel the label for the column specified with the SQL ASclause.  If the SQL AS clause was not specified, then the label is the name of the column

 * @param cal the <code>java.util.Calendar</code> objectto use in constructing the date

 * @return the column value as a <code>java.sql.Date</code> object;if the value is SQL <code>NULL</code>, the value returned is <code>null</code> in the Java programming language

 * @exception SQLException if a database access error occursor this method is called on a closed result set

 * @since JDK 1.2

 */

public Date getDate(String columnLabel,Calendar cal) throws SQLException {

  return getDate(findColumn(columnLabel),cal);

}

Location: JDBCResultSet.java

Content: 

/** 

 * <!-- start generic documentation --> Retrieves the value of the designated column in the current row of this <code>ResultSet</code> object as a <code>double</code> in the Java programming language. <!-- end generic documentation --> <!-- start release-specific documentation --> <div class="ReleaseSpecificDocumentation"> <h3>HSQLDB-Specific Information:</h3> <p> HSQLDB converts the numeric value to the return type. If the value is out of the range for the return type, an error is returned. For example, this can happen if getFloat() or getDouble() is used to retrieve a value of type DECIMAL or NUMERIC with a large precision and the value is beyond the range covered by the return type. </div> <!-- end release-specific documentation -->

 * @param columnIndex the first column is 1, the second is 2, ...

 * @return the column value; if the value is SQL <code>NULL</code>, thevalue returned is <code>0</code>

 * @exception SQLException if a database access error occurs or this method iscalled on a closed result set

 */

public double getDouble(int columnIndex) throws SQLException {

  Object o=getColumnInType(columnIndex,Type.SQL_DOUBLE);

  return o == null ? 0.0 : ((Number)o).doubleValue();

}

Location: JDBCResultSet.java

Content: 

/** 

 * <!-- start generic documentation --> Retrieves the value of the designated column in the current row of this <code>ResultSet</code> object as a <code>double</code> in the Java programming language. <!-- end generic documentation -->

 * @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column

 * @return the column value; if the value is SQL <code>NULL</code>, thevalue returned is <code>0</code>

 * @exception SQLException if a database access error occurs or this method iscalled on a closed result set

 */

public double getDouble(String columnLabel) throws SQLException {

  return getDouble(findColumn(columnLabel));

}

Location: JDBCResultSet.java

Content: 

/** 

 * <!-- start generic documentation --> Retrieves the value of the designated column in the current row of this <code>ResultSet</code> object as a <code>float</code> in the Java programming language. <!-- end generic documentation --> <!-- start release-specific documentation --> <div class="ReleaseSpecificDocumentation"> <h3>HSQLDB-Specific Information:</h3> <p> HSQLDB converts the numeric value to the return type. If the value is out of the range for the return type, an error is returned. For example, this can happen if getFloat() or getDouble() is used to retrieve a value of type DECIMAL or NUMERIC with a large precision and the value is beyond the range covered by the return type. </div> <!-- end release-specific documentation -->

 * @param columnIndex the first column is 1, the second is 2, ...

 * @return the column value; if the value is SQL <code>NULL</code>, thevalue returned is <code>0</code>

 * @exception SQLException if a database access error occurs or this method iscalled on a closed result set

 */

public float getFloat(int columnIndex) throws SQLException {

  Object o=getColumnInType(columnIndex,Type.SQL_DOUBLE);

  return o == null ? (float)0.0 : ((Number)o).floatValue();

}

Location: JDBCResultSet.java

Content: 

/** 

 * <!-- start generic documentation --> Retrieves the value of the designated column in the current row of this <code>ResultSet</code> object as a <code>float</code> in the Java programming language. <!-- end generic documentation -->

 * @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column

 * @return the column value; if the value is SQL <code>NULL</code>, thevalue returned is <code>0</code>

 * @exception SQLException if a database access error occurs or this method iscalled on a closed result set

 */

public float getFloat(String columnLabel) throws SQLException {

  return getFloat(findColumn(columnLabel));

}

Location: JDBCResultSet.java

Content: 

/** 

 * Retrieves the holdability of this <code>ResultSet</code> object

 * @return  either <code>ResultSet.HOLD_CURSORS_OVER_COMMIT</code> or <code>ResultSet.CLOSE_CURSORS_AT_COMMIT</code>

 * @throws SQLException if a database access error occursor this method is called on a closed result set

 * @since JDK 1.6, HSQLDB 2.0

 */

public int getHoldability() throws SQLException {

  checkClosed();

  return ResultProperties.getJDBCHoldability(rsProperties);

}

Location: JDBCResultSet.java

Content: 

/** 

 * <!-- start generic documentation --> Retrieves the value of the designated column in the current row of this <code>ResultSet</code> object as an <code>int</code> in the Java programming language. <!-- end generic documentation -->

 * @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column

 * @return the column value; if the value is SQL <code>NULL</code>, thevalue returned is <code>0</code>

 * @exception SQLException if a database access error occurs or this method iscalled on a closed result set

 */

public int getInt(String columnLabel) throws SQLException {

  return getInt(findColumn(columnLabel));

}

Location: JDBCResultSet.java

Content: 

/** 

 * <!-- start generic documentation --> Retrieves the value of the designated column in the current row of this <code>ResultSet</code> object as a <code>long</code> in the Java programming language. <!-- end generic documentation --> <!-- start release-specific documentation --> <div class="ReleaseSpecificDocumentation"> <h3>HSQLDB-Specific Information:</h3> <p> HSQLDB converts the numeric value to the return type. If the value is out of the range for the return type, an error is returned. For example, this can happen if getInt() or getLong() is used to retrieve a value of type DECIMAL or NUMERIC with a large precision and the value is beyond the range covered by the return type. </div> <!-- end release-specific documentation -->

 * @param columnIndex the first column is 1, the second is 2, ...

 * @return the column value; if the value is SQL <code>NULL</code>, thevalue returned is <code>0</code>

 * @exception SQLException if a database access error occurs or this method iscalled on a closed result set

 */

public long getLong(int columnIndex) throws SQLException {

  Object o=getColumnInType(columnIndex,Type.SQL_BIGINT);

  return o == null ? 0 : ((Number)o).longValue();

}

Location: JDBCResultSet.java

Content: 

/** 

 * <!-- start generic documentation --> Retrieves the value of the designated column in the current row of this <code>ResultSet</code> object as a <code>long</code> in the Java programming language. <!-- end generic documentation -->

 * @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column

 * @return the column value; if the value is SQL <code>NULL</code>, thevalue returned is <code>0</code>

 * @exception SQLException if a database access error occurs or this method iscalled on a closed result set

 */

public long getLong(String columnLabel) throws SQLException {

  return getLong(findColumn(columnLabel));

}

Location: JDBCResultSet.java

Content: 

/** 

 * Retrieves the value of the designated column in the current row of this <code>ResultSet</code> object as a <code>java.io.Reader</code> object. It is intended for use when accessing  <code>NCHAR</code>,<code>NVARCHAR</code> and <code>LONGNVARCHAR</code> columns.

 * @return a <code>java.io.Reader</code> object that contains the columnvalue; if the value is SQL <code>NULL</code>, the value returned is <code>null</code> in the Java programming language.

 * @param columnIndex the first column is 1, the second is 2, ...

 * @exception SQLException if a database access error occursor this method is called on a closed result set

 * @exception SQLFeatureNotSupportedException if the JDBC driver does not supportthis method

 * @since JDK 1.6, HSQLDB 2.0

 */

public java.io.Reader getNCharacterStream(int columnIndex) throws SQLException {

  return getCharacterStream(columnIndex);

}

Location: JDBCResultSet.java

Content: 

/** 

 * Retrieves the value of the designated column in the current row of this <code>ResultSet</code> object as a <code>java.io.Reader</code> object. It is intended for use when accessing  <code>NCHAR</code>,<code>NVARCHAR</code> and <code>LONGNVARCHAR</code> columns.

 * @param columnLabel the label for the column specified with the SQL ASclause.  If the SQL AS clause was not specified, then the label is the name of the column

 * @return a <code>java.io.Reader</code> object that contains the columnvalue; if the value is SQL <code>NULL</code>, the value returned is <code>null</code> in the Java programming language

 * @exception SQLException if a database access error occursor this method is called on a closed result set

 * @exception SQLFeatureNotSupportedException if the JDBC driver does not supportthis method

 * @since JDK 1.6, HSQLDB 2.0

 */

public java.io.Reader getNCharacterStream(String columnLabel) throws SQLException {

  return getCharacterStream(findColumn(columnLabel));

}

Location: JDBCResultSet.java

Content: 

/** 

 * Retrieves the value of the designated column in the current row of this <code>ResultSet</code> object as a <code>NClob</code> object in the Java programming language.

 * @param columnIndex the first column is 1, the second is 2, ...

 * @return a <code>NClob</code> object representing the SQL<code>NCLOB</code> value in the specified column

 * @exception SQLException if the driver does not support nationalcharacter sets;  if the driver can detect that a data conversion error could occur; this method is called on a closed result set or if a database access error occurs

 * @exception SQLFeatureNotSupportedException if the JDBC driver does not supportthis method

 * @since JDK 1.6, HSQLDB 2.0

 */

public NClob getNClob(int columnIndex) throws SQLException {

  String s=getString(columnIndex);

  return s == null ? null : new JDBCNClob(s);

}

Location: JDBCResultSet.java

Content: 

/** 

 * Retrieves the value of the designated column in the current row of this <code>ResultSet</code> object as a <code>NClob</code> object in the Java programming language.

 * @param columnLabel the label for the column specified with the SQL ASclause.  If the SQL AS clause was not specified, then the label is the name of the column

 * @return a <code>NClob</code> object representing the SQL <code>NCLOB</code>value in the specified column

 * @exception SQLException if the driver does not support nationalcharacter sets;  if the driver can detect that a data conversion error could occur; this method is called on a closed result set or if a database access error occurs

 * @exception SQLFeatureNotSupportedException if the JDBC driver does not supportthis method

 * @since JDK 1.6, HSQLDB 2.0

 */

public NClob getNClob(String columnLabel) throws SQLException {

  return getNClob(findColumn(columnLabel));

}

Location: JDBCResultSet.java

Content: 

/** 

 * Retrieves the value of the designated column in the current row of this <code>ResultSet</code> object as a <code>String</code> in the Java programming language. It is intended for use when accessing  <code>NCHAR</code>,<code>NVARCHAR</code> and <code>LONGNVARCHAR</code> columns.

 * @param columnIndex the first column is 1, the second is 2, ...

 * @return the column value; if the value is SQL <code>NULL</code>, thevalue returned is <code>null</code>

 * @exception SQLException if a database access error occursor this method is called on a closed result set

 * @exception SQLFeatureNotSupportedException if the JDBC driver does not supportthis method

 * @since JDK 1.6, HSQLDB 2.0

 */

public String getNString(int columnIndex) throws SQLException {

  return getString(columnIndex);

}

Location: JDBCResultSet.java

Content: 

/** 

 * Retrieves the value of the designated column in the current row of this <code>ResultSet</code> object as a <code>String</code> in the Java programming language. It is intended for use when accessing  <code>NCHAR</code>,<code>NVARCHAR</code> and <code>LONGNVARCHAR</code> columns.

 * @param columnLabel the label for the column specified with the SQL ASclause.  If the SQL AS clause was not specified, then the label is the name of the column

 * @return the column value; if the value is SQL <code>NULL</code>, thevalue returned is <code>null</code>

 * @exception SQLException if a database access error occursor this method is called on a closed result set

 * @exception SQLFeatureNotSupportedException if the JDBC driver does not supportthis method

 * @since JDK 1.6, HSQLDB 2.0

 */

public String getNString(String columnLabel) throws SQLException {

  return getString(findColumn(columnLabel));

}

Location: JDBCResultSet.java

Content: 

/** 

 * <p>Retrieves the value of the designated column in the current row of this <code>ResultSet</code> object and will convert from the SQL type of the column to the requested Java data type, if the conversion is supported. If the conversion is not supported  or null is specified for the type, a <code>SQLException</code> is thrown. <p> At a minimum, an implementation must support the conversions defined in Appendix B, Table B-3 and conversion of appropriate user defined SQL types to a Java type which implements  {@code SQLData}, or  {@code Struct}. Additional conversions may be supported and are vendor defined.

 * @param columnIndex the first column is 1, the second is 2, ...

 * @param type Class representing the Java data type to convert the designatedcolumn to.

 * @return an instance of {@code type} holding the column value

 * @throws SQLException if conversion is not supported, type is null oranother error occurs. The getCause() method of the exception may provide a more detailed exception, for example, if a conversion error occurs

 * @throws SQLFeatureNotSupportedException if the JDBC driver does not supportthis method

 * @since JDK 1.7 M11 2010/09/10 (b123), HSQLDB 2.0.1

 */

public <T>T getObject(int columnIndex,Class<T> type) throws SQLException {

  throw JDBCUtil.notSupported();

}

Location: JDBCResultSet.java

Content: 

/** 

 * <!-- start generic documentation --> Retrieves the value of the designated column in the current row of this <code>ResultSet</code> object as an <code>Object</code> in the Java programming language. If the value is an SQL <code>NULL</code>, the driver returns a Java <code>null</code>. This method uses the given <code>Map</code> object for the custom mapping of the SQL structured or distinct type that is being retrieved. <!-- end generic documentation --> <!-- start release-specific documentation --> <div class="ReleaseSpecificDocumentation"> <h3>HSQLDB-Specific Information:</h3> <p> HSQLDB supports this feature, but ignores the map.  <p> </div> <!-- end release-specific documentation -->

 * @param columnIndex the first column is 1, the second is 2, ...

 * @param map a <code>java.util.Map</code> object that contains the mappingfrom SQL type names to classes in the Java programming language

 * @return an <code>Object</code> in the Java programming languagerepresenting the SQL value

 * @exception SQLException if a database access error occursor this method is called on a closed result set

 * @exception SQLFeatureNotSupportedException if the JDBC driver does not supportthis method

 * @since JDK 1.2

 */

public Object getObject(int columnIndex,Map map) throws SQLException {

  return getObject(columnIndex);

}

Location: JDBCResultSet.java

Content: 

/** 

 * <!-- start generic documentation --> <p>Gets the value of the designated column in the current row of this <code>ResultSet</code> object as an <code>Object</code> in the Java programming language. <p>This method will return the value of the given column as a Java object.  The type of the Java object will be the default Java object type corresponding to the column's SQL type, following the mapping for built-in types specified in the JDBC specification. If the value is an SQL <code>NULL</code>, the driver returns a Java <code>null</code>. <P> This method may also be used to read database-specific abstract data types. <P> In the JDBC 2.0 API, the behavior of the method <code>getObject</code> is extended to materialize data of SQL user-defined types.  When a column contains a structured or distinct value, the behavior of this method is as if it were a call to: <code>getObject(columnIndex, this.getStatement().getConnection().getTypeMap())</code>. <!-- end generic documentation -->

 * @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column

 * @return a <code>java.lang.Object</code> holding the column value

 * @exception SQLException if a database access error occurs or this method iscalled on a closed result set

 */

public Object getObject(String columnLabel) throws SQLException {

  return getObject(findColumn(columnLabel));

}

Location: JDBCResultSet.java

Content: 

/** 

 * <p>Retrieves the value of the designated column in the current row of this <code>ResultSet</code> object and will convert from the SQL type of the column to the requested Java data type, if the conversion is supported. If the conversion is not supported  or null is specified for the type, a <code>SQLException</code> is thrown. <p> At a minimum, an implementation must support the conversions defined in Appendix B, Table B-3 and conversion of appropriate user defined SQL types to a Java type which implements  {@code SQLData}, or  {@code Struct}. Additional conversions may be supported and are vendor defined.

 * @param columnLabel the label for the column specified with the SQL AS clause.If the SQL AS clause was not specified, then the label is the name of the column

 * @param type Class representing the Java data type to convert the designatedcolumn to.

 * @return an instance of {@code type} holding the column value

 * @throws SQLException if conversion is not supported, type is null oranother error occurs. The getCause() method of the exception may provide a more detailed exception, for example, if a conversion error occurs

 * @throws SQLFeatureNotSupportedException if the JDBC driver does not supportthis method

 * @since JDK 1.7 M11 2010/09/10 (b123), HSQLDB 2.0.1

 */

public <T>T getObject(String columnLabel,Class<T> type) throws SQLException {

  return getObject(findColumn(columnLabel),type);

}

Location: JDBCResultSet.java

Content: 

/** 

 * <!-- start generic documentation --> Retrieves the value of the designated column in the current row of this <code>ResultSet</code> object as an <code>Object</code> in the Java programming language. If the value is an SQL <code>NULL</code>, the driver returns a Java <code>null</code>. This method uses the specified <code>Map</code> object for custom mapping if appropriate. <!-- end generic documentation --> <!-- start release-specific documentation --> <div class="ReleaseSpecificDocumentation"> <h3>HSQLDB-Specific Information:</h3> <p> HSQLDB supports this feature. But the Map parameter is ignored.<p> </div> <!-- end release-specific documentation -->

 * @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column

 * @param map a <code>java.util.Map</code> object that contains the mappingfrom SQL type names to classes in the Java programming language

 * @return an <code>Object</code> representing the SQL value in thespecified column

 * @exception SQLException if a database access error occursor this method is called on a closed result set

 * @exception SQLFeatureNotSupportedException if the JDBC driver does not supportthis method

 * @since JDK 1.2

 */

public Object getObject(String columnLabel,Map map) throws SQLException {

  return getObject(findColumn(columnLabel),map);

}

Location: JDBCResultSet.java

Content: 

/** 

 * <!-- start generic documentation --> Retrieves the value of the designated column in the current row of this <code>ResultSet</code> object as a <code>Ref</code> object in the Java programming language. <!-- end generic documentation --> <!-- start release-specific documentation --> <div class="ReleaseSpecificDocumentation"> <h3>HSQLDB-Specific Information:</h3> <p> HSQLDB does not support this feature; this method always throws an <code>SQLException</code> stating that the operation is not supported. </div> <!-- end release-specific documentation -->

 * @param columnIndex the first column is 1, the second is 2, ...

 * @return a <code>Ref</code> object representing an SQL <code>REF</code>value

 * @exception SQLException if a database access error occursor this method is called on a closed result set

 * @exception SQLFeatureNotSupportedException if the JDBC driver does not supportthis method

 * @since JDK 1.2

 */

public Ref getRef(int columnIndex) throws SQLException {

  throw JDBCUtil.notSupported();

}

Location: JDBCResultSet.java

Content: 

/** 

 * <!-- start generic documentation --> Retrieves the value of the designated column in the current row of this <code>ResultSet</code> object as a <code>Ref</code> object in the Java programming language. <!-- end generic documentation --> <!-- start release-specific documentation --> <div class="ReleaseSpecificDocumentation"> <h3>HSQLDB-Specific Information:</h3> <p> Including 2.0, HSQLDB does not support reference types; this method always throws an <code>SQLException</code> stating that the operation is not supported. </div> <!-- end release-specific documentation -->

 * @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column

 * @return a <code>Ref</code> object representing the SQL <code>REF</code>value in the specified column

 * @exception SQLException if a database access error occursor this method is called on a closed result set

 * @exception SQLFeatureNotSupportedException if the JDBC driver does not supportthis method

 * @since JDK 1.2

 */

public Ref getRef(String columnLabel) throws SQLException {

  return getRef(findColumn(columnLabel));

}

Location: JDBCResultSet.java

Content: 

/** 

 * <!-- start generic documentation --> Retrieves the current row number.  The first row is number 1, the second number 2, and so on. <p> (JDBC4 Clarification:) <p> <strong>Note:</strong>Support for the <code>getRow</code> method is optional for <code>ResultSet</code>s with a result set type of <code>TYPE_FORWARD_ONLY</code> <!-- end generic documentation -->

 * @return the current row number; <code>0</code> if there is no current row

 * @exception SQLException if a database access error occursor this method is called on a closed result set

 * @exception SQLFeatureNotSupportedException if the JDBC driver does not supportthis method

 * @since JDK 1.2

 */

public int getRow() throws SQLException {

  checkClosed();

  if (navigator.isAfterLast()) {

    return 0;

  }

  return navigator.getRowNumber() + 1;

}

Location: JDBCResultSet.java

Content: 

/** 

 * Retrieves the value of the designated column in the current row of this <code>ResultSet</code> object as a <code>java.sql.RowId</code> object in the Java programming language.

 * @param columnIndex the first column is 1, the second 2, ...

 * @return the column value; if the value is a SQL <code>NULL</code> thevalue returned is <code>null</code>

 * @throws SQLException if a database access error occursor this method is called on a closed result set

 * @exception SQLFeatureNotSupportedException if the JDBC driver does not supportthis method

 * @since JDK 1.6, HSQLDB 2.0

 */

public RowId getRowId(int columnIndex) throws SQLException {

  throw JDBCUtil.notSupported();

}

Location: JDBCResultSet.java

Content: 

/** 

 * Retrieves the value of the designated column in the current row of this <code>ResultSet</code> object as a <code>java.sql.RowId</code> object in the Java programming language. <!-- end generic documentation --> <!-- start release-specific documentation --> <div class="ReleaseSpecificDocumentation"> <h3>HSQLDB-Specific Information:</h3> <p> HSQLDB does not support the RowId type; this method always throws an <code>SQLException</code> stating that the operation is not supported. </div> <!-- end release-specific documentation -->

 * @param columnLabel the label for the column specified with the SQL ASclause.  If the SQL AS clause was not specified, then the label is the name of the column

 * @return the column value ; if the value is a SQL <code>NULL</code> thevalue returned is <code>null</code>

 * @throws SQLException if a database access error occursor this method is called on a closed result set

 * @exception SQLFeatureNotSupportedException if the JDBC driver does not supportthis method

 * @since JDK 1.6, HSQLDB 2.0

 */

public RowId getRowId(String columnLabel) throws SQLException {

  throw JDBCUtil.notSupported();

}

Location: JDBCResultSet.java

Content: 

/** 

 * <!-- start generic documentation --> Retrieves the value of the designated column in the current row of this <code>ResultSet</code> object as a <code>short</code> in the Java programming language. <!-- end generic documentation --> <!-- start release-specific documentation --> <div class="ReleaseSpecificDocumentation"> <h3>HSQLDB-Specific Information:</h3> <p> HSQLDB converts the numeric value to the return type. If the value is out of the range for the return type, an error is returned. For example, this can happen if getByte() or getShort() is used to retrieve a value of type INTEGER or BIGINT and the value is beyond the range covered by the return type. </div> <!-- end release-specific documentation -->

 * @param columnIndex the first column is 1, the second is 2, ...

 * @return the column value; if the value is SQL <code>NULL</code>, thevalue returned is <code>0</code>

 * @exception SQLException if a database access error occurs or this method iscalled on a closed result set

 */

public short getShort(int columnIndex) throws SQLException {

  Object o=getColumnInType(columnIndex,Type.SQL_SMALLINT);

  return o == null ? 0 : ((Number)o).shortValue();

}

Location: JDBCResultSet.java

Content: 

/** 

 * <!-- start generic documentation --> Retrieves the value of the designated column in the current row of this <code>ResultSet</code> object as a <code>short</code> in the Java programming language. <!-- end generic documentation -->

 * @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column

 * @return the column value; if the value is SQL <code>NULL</code>, thevalue returned is <code>0</code>

 * @exception SQLException if a database access error occurs or this method iscalled on a closed result set

 */

public short getShort(String columnLabel) throws SQLException {

  return getShort(findColumn(columnLabel));

}

Location: JDBCResultSet.java

Content: 

/** 

 * Retrieves the value of the designated column in  the current row of this <code>ResultSet</code> as a <code>java.sql.SQLXML</code> object in the Java programming language.

 * @param columnIndex the first column is 1, the second is 2, ...

 * @return a <code>SQLXML</code> object that maps an <code>SQL XML</code> value

 * @throws SQLException if a database access error occursor this method is called on a closed result set

 * @exception SQLFeatureNotSupportedException if the JDBC driver does not supportthis method

 * @since JDK 1.6, HSQLDB 2.0

 */

public SQLXML getSQLXML(int columnIndex) throws SQLException {

  checkColumn(columnIndex);

  SQLXML sqlxml;

  int type=resultMetaData.columnTypes[columnIndex - 1].typeCode;

switch (type) {

case Types.SQL_XML:

{

      Object object=getObject(columnIndex);

      if (object == null) {

        sqlxml=null;

      }

 else       if (object instanceof SQLXML) {

        sqlxml=(SQLXML)object;

      }

 else {

        throw JDBCUtil.notSupported();

      }

      break;

    }

case Types.SQL_CLOB:

{

    Clob clob=getClob(columnIndex);

    if (clob == null) {

      sqlxml=null;

    }

 else {

      sqlxml=new JDBCSQLXML(clob.getCharacterStream());

    }

    break;

  }

case Types.SQL_CHAR:

case Types.SQL_VARCHAR:

{

  java.io.Reader reader=getCharacterStream(columnIndex);

  if (reader == null) {

    sqlxml=null;

  }

 else {

    sqlxml=new JDBCSQLXML(reader);

  }

  break;

}

case Types.SQL_NCHAR:

case Types.SQL_NVARCHAR:

{

java.io.Reader nreader=getNCharacterStream(columnIndex);

if (nreader == null) {

  sqlxml=null;

}

 else {

  sqlxml=new JDBCSQLXML(nreader);

}

break;

}

case Types.SQL_BLOB:

{

Blob blob=getBlob(columnIndex);

if (blob == null) {

sqlxml=null;

}

 else {

sqlxml=new JDBCSQLXML(blob.getBinaryStream());

}

break;

}

case Types.SQL_BINARY:

case Types.SQL_VARBINARY:

{

java.io.InputStream inputStream=getBinaryStream(columnIndex);

if (inputStream == null) {

sqlxml=null;

}

 else {

sqlxml=new JDBCSQLXML(inputStream);

}

break;

}

case Types.OTHER:

case Types.JAVA_OBJECT:

{

Object data=getObject(columnIndex);

if (data == null) {

sqlxml=null;

}

 else if (data instanceof SQLXML) {

sqlxml=(SQLXML)data;

}

 else if (data instanceof String) {

sqlxml=new JDBCSQLXML((String)data);

}

 else if (data instanceof byte[]) {

sqlxml=new JDBCSQLXML((byte[])data);

}

 else if (data instanceof Blob) {

Blob blob=(Blob)data;

sqlxml=new JDBCSQLXML(blob.getBinaryStream());

}

 else if (data instanceof Clob) {

Clob clob=(Clob)data;

sqlxml=new JDBCSQLXML(clob.getCharacterStream());

}

 else {

throw JDBCUtil.notSupported();

}

break;

}

default :

{

throw JDBCUtil.notSupported();

}

}

return sqlxml;

}

Location: JDBCResultSet.java

Content: 

/** 

 * Retrieves the value of the designated column in  the current row of this <code>ResultSet</code> as a <code>java.sql.SQLXML</code> object in the Java programming language.

 * @param columnLabel the label for the column specified with the SQL ASclause.  If the SQL AS clause was not specified, then the label is the name of the column

 * @return a <code>SQLXML</code> object that maps an <code>SQL XML</code> value

 * @throws SQLException if a database access error occursor this method is called on a closed result set

 * @exception SQLFeatureNotSupportedException if the JDBC driver does not supportthis method

 * @since JDK 1.6, HSQLDB 2.0

 */

public SQLXML getSQLXML(String columnLabel) throws SQLException {

  return getSQLXML(findColumn(columnLabel));

}

Location: JDBCResultSet.java

Content: 

/** 

 * Updates the designated column with an  {@code Object} value.The updater methods are used to update column values in the current row or the insert row.  The updater methods do not update the underlying database; instead the  {@code updateRow} or{@code insertRow} methods are called to update the database.<p> The default implementation will throw  {@code SQLFeatureNotSupportedException}

 * @param columnLabel the label for the column specified with the SQL ASclause.  If the SQL AS clause was not specified, then the label is the name of the column

 * @param x the new column value

 * @param targetSqlType the SQL type to be sent to the database

 * @exception SQLException if the columnLabel is not valid;if a database access error occurs; the result set concurrency is  {@code CONCUR_READ_ONLY}or this method is called on a closed result set

 * @exception SQLFeatureNotSupportedException if the JDBC driver does notsupport this method; if the JDBC driver does not support the specified targetSqlType

 * @see JDBCType

 * @see SQLType

 * @since 1.8

 */

private Object getTimestampWithZone(int columnIndex) throws SQLException {

  TimestampData v=(TimestampData)getColumnInType(columnIndex,Type.SQL_TIMESTAMP_WITH_TIME_ZONE);

  if (v == null) {

    return null;

  }

  return Type.SQL_TIMESTAMP.convertSQLToJava(session,v);

}

Location: JDBCResultSet.java

Content: 

/** 

 * <!-- start generic documentation --> Retrieves the value of the designated column in the current row of this <code>ResultSet</code> object as a <code>java.sql.Timestamp</code> object in the Java programming language. <!-- end generic documentation -->

 * @param columnIndex the first column is 1, the second is 2, ...

 * @return the column value; if the value is SQL <code>NULL</code>, thevalue returned is <code>null</code>

 * @exception SQLException if a database access error occurs or this method iscalled on a closed result set

 */

public Timestamp getTimestamp(int columnIndex) throws SQLException {

  Object t=getColumnInType(columnIndex,Type.SQL_TIMESTAMP);

  if (t == null) {

    return null;

  }

  return (Timestamp)Type.SQL_TIMESTAMP.convertSQLToJava(session,t);

}

Location: JDBCResultSet.java

Content: 

/** 

 * <!-- start generic documentation --> Retrieves the value of the designated column in the current row of this <code>ResultSet</code> object as a <code>java.sql.Timestamp</code> object in the Java programming language. This method uses the given calendar to construct an appropriate millisecond value for the timestamp if the underlying database does not store timezone information. <!-- end generic documentation --> <!-- start release-specific documentation --> <div class="ReleaseSpecificDocumentation"> <h3>HSQLDB-Specific Information:</h3> <p> The JDBC specification for this method is vague. HSQLDB interprets the specification as follows: <ol> <li>If the SQL type of the column is WITH TIME ZONE, then the UTC value of the returned java.sql.Timestamp object is the UTC of the SQL value without modification. In other words, the Calendar object is not used. </li> <li>If the SQL type of the column is WITHOUT TIME ZONE, then the UTC value of the returned java.sql.Timestamp will represent the correct timestamp for the time zone (including daylight saving time) of the given Calendar object. </li> <li>In this case, if the cal argument is null, then the default Calendar of the JVM is used, which results in the same Object as one returned by the getTimestamp() methods without the Calendar parameter.</li> </ol> </div>

 * @param columnIndex the first column is 1, the second is 2, ...

 * @param cal the <code>java.util.Calendar</code> objectto use in constructing the timestamp

 * @return the column value as a <code>java.sql.Timestamp</code> object;if the value is SQL <code>NULL</code>, the value returned is <code>null</code> in the Java programming language

 * @exception SQLException if a database access error occursor this method is called on a closed result set

 * @since JDK 1.2

 */

public Timestamp getTimestamp(int columnIndex,Calendar cal) throws SQLException {

  TimestampData t=(TimestampData)getColumnInType(columnIndex,Type.SQL_TIMESTAMP);

  if (t == null) {

    return null;

  }

  long millis=t.getSeconds() * 1000;

  if (!resultMetaData.columnTypes[--columnIndex].isDateTimeTypeWithZone()) {

    Calendar calendar=cal == null ? session.getCalendar() : cal;

    if (cal != null) {

      millis=HsqlDateTime.convertMillisToCalendar(calendar,millis);

    }

  }

  Timestamp ts=new Timestamp(millis);

  ts.setNanos(t.getNanos());

  return ts;

}

Location: JDBCResultSet.java

Content: 

/** 

 * <!-- start generic documentation --> Retrieves the value of the designated column in the current row of this <code>ResultSet</code> object as a <code>java.sql.Timestamp</code> object in the Java programming language. <!-- end generic documentation -->

 * @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column

 * @return the column value; if the value is SQL <code>NULL</code>, thevalue returned is <code>null</code>

 * @exception SQLException if a database access error occurs or this method iscalled on a closed result set

 */

public Timestamp getTimestamp(String columnLabel) throws SQLException {

  return getTimestamp(findColumn(columnLabel));

}

Location: JDBCResultSet.java

Content: 

/** 

 * <!-- start generic documentation --> Retrieves the value of the designated column in the current row of this <code>ResultSet</code> object as a <code>java.sql.Timestamp</code> object in the Java programming language. This method uses the given calendar to construct an appropriate millisecond value for the timestamp if the underlying database does not store timezone information. <!-- end generic documentation --> <!-- start release-specific documentation --> <div class="ReleaseSpecificDocumentation"> <h3>HSQLDB-Specific Information:</h3> <p> The JDBC specification for this method is vague. HSQLDB interprets the specification as follows: <ol> <li>If the SQL type of the column is WITH TIME ZONE, then the UTC value of the returned java.sql.Timestamp object is the UTC of the SQL value without modification. In other words, the Calendar object is not used. </li> <li>If the SQL type of the column is WITHOUT TIME ZONE, then the UTC value of the returned java.sql.Timestamp is correct for the given Calendar object.</li> <li>If the cal argument is null, it it ignored and the method returns the same Object as the method without the Calendar parameter.</li> </ol> </div>

 * @param columnLabel the label for the column specified with the SQL ASclause.  If the SQL AS clause was not specified, then the label is the name of the column

 * @param cal the <code>java.util.Calendar</code> objectto use in constructing the date

 * @return the column value as a <code>java.sql.Timestamp</code> object;if the value is SQL <code>NULL</code>, the value returned is <code>null</code> in the Java programming language

 * @exception SQLException if a database access error occursor this method is called on a closed result set

 * @since JDK 1.2

 */

public Timestamp getTimestamp(String columnLabel,Calendar cal) throws SQLException {

  return getTimestamp(findColumn(columnLabel),cal);

}

Location: JDBCResultSet.java

Content: 

private Object getTimeWithZone(int columnIndex) throws SQLException {

  TimeData v=(TimeData)getColumnInType(columnIndex,Type.SQL_TIME_WITH_TIME_ZONE);

  if (v == null) {

    return null;

  }

  return Type.SQL_TIME.convertSQLToJava(session,v);

}

Location: JDBCResultSet.java

Content: 

/** 

 * <!-- start generic documentation --> Retrieves the value of the designated column in the current row of this <code>ResultSet</code> object as a <code>java.sql.Time</code> object in the Java programming language. <!-- end generic documentation -->

 * @param columnIndex the first column is 1, the second is 2, ...

 * @return the column value; if the value is SQL <code>NULL</code>, thevalue returned is <code>null</code>

 * @exception SQLException if a database access error occurs or this method iscalled on a closed result set

 */

public Time getTime(int columnIndex) throws SQLException {

  Object t=getColumnInType(columnIndex,Type.SQL_TIME);

  if (t == null) {

    return null;

  }

  return (Time)Type.SQL_TIME.convertSQLToJava(session,t);

}

Location: JDBCResultSet.java

Content: 

/** 

 * <!-- start generic documentation --> Retrieves the value of the designated column in the current row of this <code>ResultSet</code> object as a <code>java.sql.Time</code> object in the Java programming language. This method uses the given calendar to construct an appropriate millisecond value for the time if the underlying database does not store timezone information. <!-- end generic documentation --> <!-- start release-specific documentation --> <div class="ReleaseSpecificDocumentation"> <h3>HSQLDB-Specific Information:</h3> <p> The JDBC specification for this method is vague. HSQLDB interprets the specification as follows: <ol> <li>If the SQL type of the column is WITH TIME ZONE, then the UTC value of the returned java.sql.Time object is the UTC of the SQL value without modification. In other words, the Calendar object is not used.</li> <li>If the SQL type of the column is WITHOUT TIME ZONE, then the UTC value of the returned java.sql.Time is correct for the given Calendar object.</li> <li>If the cal argument is null, it it ignored and the method returns the same Object as the method without the Calendar parameter.</li> </ol> </div>

 * @param columnIndex the first column is 1, the second is 2, ...

 * @param cal the <code>java.util.Calendar</code> objectto use in constructing the time

 * @return the column value as a <code>java.sql.Time</code> object;if the value is SQL <code>NULL</code>, the value returned is <code>null</code> in the Java programming language

 * @exception SQLException if a database access error occursor this method is called on a closed result set

 * @since JDK 1.2

 */

public Time getTime(int columnIndex,Calendar cal) throws SQLException {

  TimeData t=(TimeData)getColumnInType(columnIndex,Type.SQL_TIME);

  if (t == null) {

    return null;

  }

  long millis=DateTimeType.normaliseTime(t.getSeconds()) * 1000L;

  if (!resultMetaData.columnTypes[--columnIndex].isDateTimeTypeWithZone()) {

    Calendar calendar=cal == null ? session.getCalendar() : cal;

    millis=HsqlDateTime.convertMillisToCalendar(calendar,millis);

    millis=HsqlDateTime.getNormalisedTime(millis);

  }

  return new Time(millis);

}

Location: JDBCResultSet.java

Content: 

/** 

 * <!-- start generic documentation --> Retrieves the value of the designated column in the current row of this <code>ResultSet</code> object as a <code>java.sql.Time</code> object in the Java programming language. <!-- end generic documentation -->

 * @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column

 * @return the column value;if the value is SQL <code>NULL</code>, the value returned is <code>null</code>

 * @exception SQLException if a database access error occurs or this method iscalled on a closed result set

 */

public Time getTime(String columnLabel) throws SQLException {

  return getTime(findColumn(columnLabel));

}

Location: JDBCResultSet.java

Content: 

/** 

 * <!-- start generic documentation --> Retrieves the value of the designated column in the current row of this <code>ResultSet</code> object as a <code>java.sql.Time</code> object in the Java programming language. This method uses the given calendar to construct an appropriate millisecond value for the time if the underlying database does not store timezone information. <!-- end generic documentation --> <!-- start release-specific documentation --> <div class="ReleaseSpecificDocumentation"> <h3>HSQLDB-Specific Information:</h3> <p> The JDBC specification for this method is vague. HSQLDB interprets the specification as follows: <ol> <li>If the SQL type of the column is WITH TIME ZONE, then the UTC value of the returned java.sql.Time object is the UTC of the SQL value without modification. In other words, the Calendar object is not used.</li> <li>If the SQL type of the column is WITHOUT TIME ZONE, then the UTC value of the returned java.sql.Time is correct for the given Calendar object.</li> <li>If the cal argument is null, it it ignored and the method returns the same Object as the method without the Calendar parameter.</li> </ol> </div>

 * @param columnLabel the label for the column specified with the SQL ASclause.  If the SQL AS clause was not specified, then the label is the name of the column

 * @param cal the <code>java.util.Calendar</code> objectto use in constructing the time

 * @return the column value as a <code>java.sql.Time</code> object;if the value is SQL <code>NULL</code>, the value returned is <code>null</code> in the Java programming language

 * @exception SQLException if a database access error occursor this method is called on a closed result set

 * @since JDK 1.2

 */

public Time getTime(String columnLabel,Calendar cal) throws SQLException {

  return getTime(findColumn(columnLabel),cal);

}

Location: JDBCResultSet.java

Content: 

/** 

 * <!-- start generic documentation --> Retrieves the value of the designated column in the current row of this <code>ResultSet</code> object as as a stream of two-byte Unicode characters. The first byte is the high byte; the second byte is the low byte. The value can then be read in chunks from the stream. This method is particularly suitable for retrieving large <code>LONGVARCHAR</code>values.  The JDBC driver will do any necessary conversion from the database format into Unicode. <P><B>Note:</B> All the data in the returned stream must be read prior to getting the value of any other column. The next call to a getter method implicitly closes the stream. Also, a stream may return <code>0</code> when the method <code>InputStream.available</code> is called, whether there is data available or not. <!-- end generic documentation --> <!-- start release-specific documentation --> <div class="ReleaseSpecificDocumentation"> <h3>HSQLDB-Specific Information:</h3> <p> The limitation noted above does not apply to HSQLDB.<p> When the column is of type CHAR and its variations, it requires no conversion since it is represented internally already as Java Strings. When the column is not of type CHAR and its variations, the returned stream is based on a conversion to the Java <code>String</code> representation of the value. In either case, the obtained stream is always equivalent to a stream of bytes from the value's String representation, with high-byte first. </div> <!-- end release-specific documentation -->

 * @param columnIndex the first column is 1, the second is 2, ...

 * @return a Java input stream that delivers the database column valueas a stream of two-byte Unicode characters; if the value is SQL <code>NULL</code>, the value returned is <code>null</code>

 * @exception SQLException if a database access error occurs or this method iscalled on a closed result set

 * @exception SQLFeatureNotSupportedException if the JDBC driver does not supportthis method

 * @deprecated use <code>getCharacterStream</code> in place of<code>getUnicodeStream</code>

 */

public java.io.InputStream getUnicodeStream(int columnIndex) throws SQLException {

  String s=getString(columnIndex);

  if (s == null) {

    return null;

  }

  return new StringInputStream(s);

}

Location: JDBCResultSet.java

Content: 

/** 

 * <!-- start generic documentation --> Retrieves the value of the designated column in the current row of this <code>ResultSet</code> object as a stream of two-byte Unicode characters. The first byte is the high byte; the second byte is the low byte. The value can then be read in chunks from the stream. This method is particularly suitable for retrieving large <code>LONGVARCHAR</code> values. The JDBC technology-enabled driver will do any necessary conversion from the database format into Unicode. <P><B>Note:</B> All the data in the returned stream must be read prior to getting the value of any other column. The next call to a getter method implicitly closes the stream. Also, a stream may return <code>0</code> when the method <code>InputStream.available</code> is called, whether there is data available or not. <!-- end generic documentation -->

 * @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column

 * @return a Java input stream that delivers the database column valueas a stream of two-byte Unicode characters. If the value is SQL <code>NULL</code>, the value returned is <code>null</code>.

 * @exception SQLException if a database access error occurs or this method iscalled on a closed result set

 * @exception SQLFeatureNotSupportedException if the JDBC driver does not supportthis method

 * @deprecated use <code>getCharacterStream</code> instead

 * @see #getUnicodeStream(int)

 */

public java.io.InputStream getUnicodeStream(String columnLabel) throws SQLException {

  return getUnicodeStream(findColumn(columnLabel));

}

Location: JDBCResultSet.java

Content: 

/** 

 * <!-- start generic documentation --> Retrieves the value of the designated column in the current row of this <code>ResultSet</code> object as a <code>java.net.URL</code> object in the Java programming language. <!-- end generic documentation --> <!-- start release-specific documentation --> <div class="ReleaseSpecificDocumentation"> <h3>HSQLDB-Specific Information:</h3> <p> HSQLDB does not support the datalink type; this method always throws an <code>SQLException</code> stating that the operation is not supported. </div> <!-- end release-specific documentation -->

 * @param columnIndex the index of the column 1 is the first, 2 is the second,...

 * @return the column value as a <code>java.net.URL</code> object;if the value is SQL <code>NULL</code>, the value returned is <code>null</code> in the Java programming language

 * @exception SQLException if a database access error occurs; this methodis called on a closed result set or if a URL is malformed

 * @exception SQLFeatureNotSupportedException if the JDBC driver does not supportthis method

 * @since JDK 1.4, HSQLDB 1.7.0

 */

public java.net.URL getURL(int columnIndex) throws SQLException {

  throw JDBCUtil.notSupported();

}

Location: JDBCResultSet.java

Content: 

/** 

 * <!-- start generic documentation --> Retrieves the value of the designated column in the current row of this <code>ResultSet</code> object as a <code>java.net.URL</code> object in the Java programming language. <!-- end generic documentation --> <!-- start release-specific documentation --> <div class="ReleaseSpecificDocumentation"> <h3>HSQLDB-Specific Information:</h3> <p> HSQLDB does not support the datalink type; this method always throws an <code>SQLException</code> stating that the operation is not supported. </div> <!-- end release-specific documentation -->

 * @param columnLabel the label for the column specified with the SQL ASclause.  If the SQL AS clause was not specified, then the label is the name of the column

 * @return the column value as a <code>java.net.URL</code> object;if the value is SQL <code>NULL</code>, the value returned is <code>null</code> in the Java programming language

 * @exception SQLException if a database access error occur; this methodis called on a closed result set or if a URL is malformed

 * @exception SQLFeatureNotSupportedException if the JDBC driver does not supportthis method

 * @since JDK 1.4, HSQLDB 1.7.0

 */

public java.net.URL getURL(String columnLabel) throws SQLException {

  throw JDBCUtil.notSupported();

}

Location: JDBCResultSet.java

Content: 

/** 

 * <!-- start generic documentation --> Inserts the contents of the insert row into this <code>ResultSet</code> object and into the database. The cursor must be on the insert row when this method is called. <!-- end generic documentation --> <!-- start release-specific documentation --> <div class="ReleaseSpecificDocumentation"> <h3>HSQLDB-Specific Information:</h3> <p> HSQLDB supports this feature. <p> </div> <!-- end release-specific documentation -->

 * @exception SQLException if a database access error occurs,the result set concurrency is <code>CONCUR_READ_ONLY</code>, this method is called on a closed result set, if this method is called when the cursor is not on the insert row, or if not all of non-nullable columns in the insert row have been given a non-null value

 * @exception SQLFeatureNotSupportedException if the JDBC driver does not supportthis method

 * @since JDK 1.2

 */

public void insertRow() throws SQLException {

  hongshuai();

  checkUpdatable();

  for (int i=0; i < columnCount; i++) {

    boolean set=preparedStatement.parameterSet[i] != null;

    if (!set) {

      throw JDBCUtil.sqlException(ErrorCode.X_24515);

    }

    preparedStatement.resultOut.metaData.columnTypes[i]=preparedStatement.parameterTypes[i];

  }

  preparedStatement.resultOut.setActionType(ResultConstants.INSERT_CURSOR);

  preparedStatement.fetchResult();

  preparedStatement.clearParameters();

  rootWarning=preparedStatement.getWarnings();

  preparedStatement.clearWarnings();

}

Location: JDBCResultSet.java

Content: 

/** 

 * Constructs a new <code>JDBCResultSet</code> object using the specified navigator and <code>org.hsqldb.result.ResultMetaData</code>. <p>

 * @param conn JDBCConnection

 * @param s the statement

 * @param r the internal result form that the new<code>JDBCResultSet</code> represents

 * @param metaData the connection properties

 */

public JDBCResultSet(JDBCConnection conn,JDBCStatementBase s,Result r,ResultMetaData metaData){

  this(conn,r,metaData);

  this.statement=s;

  isScrollable=ResultProperties.isScrollable(rsProperties);

  if (ResultProperties.isUpdatable(rsProperties)) {

    isUpdatable=true;

    isInsertable=true;

    for (int i=0; i < metaData.colIndexes.length; i++) {

      if (metaData.colIndexes[i] < 0) {

        isInsertable=false;

        break;

      }

    }

    preparedStatement=new JDBCPreparedStatement(s.connection,result);

  }

}

Location: JDBCResultSet.java

Content: 

public JDBCResultSet(JDBCConnection conn,Result r,ResultMetaData metaData){

  this.session=conn == null ? null : conn.sessionProxy;

  this.result=r;

  this.connection=conn;

  rsProperties=r.rsProperties;

  navigator=r.getNavigator();

  resultMetaData=metaData;

  columnCount=resultMetaData.getColumnCount();

  if (conn != null) {

    translateTTIType=conn.isTranslateTTIType;

  }

}

Location: JDBCResultSet.java

Content: 

/** 

 * <!-- start generic documentation --> Moves the cursor to the remembered cursor position, usually the current row.  This method has no effect if the cursor is not on the insert row. <!-- end generic documentation --> <!-- start release-specific documentation --> <div class="ReleaseSpecificDocumentation"> <h3>HSQLDB-Specific Information:</h3> <p> HSQLDB supports this feature. <p> </div> <!-- end release-specific documentation -->

 * @exception SQLException if a database access error occurs, thismethod is called on a closed result set or the result set concurrency is <code>CONCUR_READ_ONLY</code>

 * @exception SQLFeatureNotSupportedException if the JDBC driver does not supportthis method

 * @since JDK 1.2

 */

public void moveToCurrentRow() throws SQLException {

  hongshuai();

  checkUpdatable();

  preparedStatement.clearParameters();

  isOnInsertRow=false;

}

Location: JDBCResultSet.java

Content: 

/** 

 * <!-- start generic documentation --> Moves the cursor to the insert row.  The current cursor position is remembered while the cursor is positioned on the insert row. The insert row is a special row associated with an updatable result set.  It is essentially a buffer where a new row may be constructed by calling the updater methods prior to inserting the row into the result set. Only the updater, getter, and <code>insertRow</code> methods may be called when the cursor is on the insert row.  All of the columns in a result set must be given a value each time this method is called before calling <code>insertRow</code>. An updater method must be called before a getter method can be called on a column value. <!-- end generic documentation --> <!-- start release-specific documentation --> <div class="ReleaseSpecificDocumentation"> <h3>HSQLDB-Specific Information:</h3> <p> HSQLDB supports this feature. <p> </div> <!-- end release-specific documentation -->

 * @exception SQLException if a database access error occurs; thismethod is called on a closed result set or the result set concurrency is <code>CONCUR_READ_ONLY</code>

 * @exception SQLFeatureNotSupportedException if the JDBC driver does not supportthis method

 * @since JDK 1.2

 */

public void moveToInsertRow() throws SQLException {

  startInsert();

}

Location: JDBCResultSet.java

Content: 

public static JDBCResultSet newEmptyResultSet(){

  ResultMetaData md=ResultMetaData.newResultMetaData(1);

  ColumnBase column=new ColumnBase(null,null,null,"C1");

  column.setType(Type.SQL_INTEGER);

  md.columnTypes[0]=Type.SQL_INTEGER;

  md.columns[0]=column;

  Result r=Result.newSingleColumnResult(md);

  return newJDBCResultSet(r,md);

}

Location: JDBCResultSet.java

Content: 

/** 

 * Factory method returns a new <code>JDBCResultSet</code> object for use with user defined functions that return a ResultSet object. See <code>org.hsqldb.jdbc.JDBCArrayBasic</code> for usage example. <p>

 * @param r the internal result form that the new<code>JDBCResultSet</code> represents

 * @param metaData the connection properties

 * @return ResultSet

 */

public static JDBCResultSet newJDBCResultSet(Result r,ResultMetaData metaData){

  return new JDBCResultSetBasic(r,metaData);

}

Location: JDBCResultSet.java

Content: 

/** 

 * <!-- start generic documentation --> Refreshes the current row with its most recent value in the database.  This method cannot be called when the cursor is on the insert row. <P>The <code>refreshRow</code> method provides a way for an application to explicitly tell the JDBC driver to refetch a row(s) from the database.  An application may want to call <code>refreshRow</code> when caching or prefetching is being done by the JDBC driver to fetch the latest value of a row from the database.  The JDBC driver may actually refresh multiple rows at once if the fetch size is greater than one. <P> All values are refetched subject to the transaction isolation level and cursor sensitivity.  If <code>refreshRow</code> is called after calling an updater method, but before calling the method <code>updateRow</code>, then the updates made to the row are lost.  Calling the method <code>refreshRow</code> frequently will likely slow performance. <!-- end generic documentation --> <!-- start release-specific documentation --> <div class="ReleaseSpecificDocumentation"> <h3>HSQLDB-Specific Information:</h3> <p> HSQLDB supports this feature. <p> </div> <!-- end release-specific documentation -->

 * @exception SQLException if a database access erroroccurs; this method is called on a closed result set; the result set type is <code>TYPE_FORWARD_ONLY</code> or if this method is called when the cursor is on the insert row

 * @exception SQLFeatureNotSupportedException if the JDBC driver does not supportthis method or this method is not supported for the specified result set type and result set concurrency.

 * @since JDK 1.2

 */

public void refreshRow() throws SQLException {

  hongshuai();

  checkUpdatable();

  preparedStatement.clearParameters();

  isRowUpdated=false;

}

Location: JDBCResultSet.java

Content: 

/** 

 * <!-- start generic documentation --> Retrieves whether a row has been deleted.  A deleted row may leave a visible "hole" in a result set.  This method can be used to detect holes in a result set.  The value returned depends on whether or not this <code>ResultSet</code> object can detect deletions. <p> (JDBC4 Clarification:) <p> <strong>Note:</strong> Support for the <code>rowDeleted</code> method is optional with a result set concurrency of <code>CONCUR_READ_ONLY</code> <!-- end generic documentation --> <!-- start release-specific documentation --> <div class="ReleaseSpecificDocumentation"> <h3>HSQLDB-Specific Information:</h3> <p> HSQLDB supports updatable result sets and accurately reports the actual value. </div> <!-- end release-specific documentation -->

 * @return <code>true</code> if the current row is detected tohave been deleted by the owner or another; <code>false</code> otherwise

 * @exception SQLException if a database access error occursor this method is called on a closed result set

 * @exception SQLFeatureNotSupportedException if the JDBC driver does not supportthis method

 * @see JDBCDatabaseMetaData#deletesAreDetected

 * @since JDK 1.2

 */

public boolean rowDeleted() throws SQLException {

  checkClosed();

  return false;

}

Location: JDBCResultSet.java

Content: 

/** 

 * <!-- start generic documentation --> Retrieves whether the current row has had an insertion. The value returned depends on whether or not this <code>ResultSet</code> object can detect visible inserts. <!-- end generic documentation --> <!-- start release-specific documentation --> <div class="ReleaseSpecificDocumentation"> <h3>HSQLDB-Specific Information:</h3> <p> HSQLDB supports updatable result sets and accurately reports the actual value. </div> <!-- end release-specific documentation -->

 * @return <code>true</code> if the current row is detected tohave been inserted; <code>false</code> otherwise

 * @exception SQLException if a database access error occurs,the result set concurrency is <code>CONCUR_READ_ONLY</code> or this method is called on a closed result set

 * @exception SQLFeatureNotSupportedException if the JDBC driver does not supportthis method

 * @see JDBCDatabaseMetaData#insertsAreDetected

 * @since JDK 1.2

 */

public boolean rowInserted() throws SQLException {

  checkClosed();

  return false;

}

Location: JDBCResultSet.java

Content: 

/** 

 * <!-- start generic documentation --> Retrieves whether the current row has been updated.  The value returned depends on whether or not the result set can detect updates. <!-- end generic documentation --> <!-- start release-specific documentation --> <div class="ReleaseSpecificDocumentation"> <h3>HSQLDB-Specific Information:</h3> <p> HSQLDB supports updatable result sets and accurately reports the actual value. </div> <!-- end release-specific documentation -->

 * @return <code>true</code> if the current row is detected tohave been visibly updated by the owner or another; <code>false</code> otherwise

 * @exception SQLException if a database access error occurs,the result set concurrency is <code>CONCUR_READ_ONLY</code> or this method is called on a closed result set

 * @exception SQLFeatureNotSupportedException if the JDBC driver does not supportthis method

 * @see JDBCDatabaseMetaData#updatesAreDetected

 * @since JDK 1.2

 */

public boolean rowUpdated() throws SQLException {

  checkClosed();

  return isRowUpdated;

}

Location: JDBCResultSet.java

Content: 

private void startInsert() throws SQLException {

  checkUpdatable();

  isOnInsertRow=true;

}

Location: JDBCResultSet.java

Content: 

void startUpdate(int columnIndex) throws SQLException {

  checkUpdatable(columnIndex);

  if (currentUpdateRowNumber != navigator.getRowNumber()) {

    preparedStatement.clearParameters();

  }

  currentUpdateRowNumber=navigator.getRowNumber();

  isRowUpdated=true;

}

Location: JDBCResultSet.java

Content: 

/** 

 * Internal wasNull tracker.

 * @param o the Object to track

 * @return boolean

 */

protected boolean trackNull(Object o){

  return (wasNullValue=(o == null));

}

Location: JDBCResultSet.java

Content: 

/** 

 * <!-- start generic documentation --> Updates the designated column with a <code>java.sql.Array</code> value. The updater methods are used to update column values in the current row or the insert row.  The updater methods do not update the underlying database; instead the <code>updateRow</code> or <code>insertRow</code> methods are called to update the database. <!-- end generic documentation --> <!-- start release-specific documentation --> <div class="ReleaseSpecificDocumentation"> <h3>HSQLDB-Specific Information:</h3> <p> HSQLDB does not support array types; this method always throws an <code>SQLException</code> stating that the operation is not supported. </div> <!-- end release-specific documentation -->

 * @param columnIndex the first column is 1, the second is 2, ...

 * @param x the new column value

 * @exception SQLException if a database access error occurs,the result set concurrency is <code>CONCUR_READ_ONLY</code> or this method is called on a closed result set

 * @exception SQLFeatureNotSupportedException if the JDBC driver does not supportthis method

 * @since JDK 1.4, HSQLDB 1.7.0

 */

public void updateArray(int columnIndex,java.sql.Array x) throws SQLException {

  startUpdate(columnIndex);

  preparedStatement.setParameter(columnIndex,x);

}

Location: JDBCResultSet.java

Content: 

/** 

 * <!-- start generic documentation --> Updates the designated column with a <code>java.sql.Array</code> value. The updater methods are used to update column values in the current row or the insert row.  The updater methods do not update the underlying database; instead the <code>updateRow</code> or <code>insertRow</code> methods are called to update the database. <!-- end generic documentation --> <!-- start release-specific documentation --> <div class="ReleaseSpecificDocumentation"> <h3>HSQLDB-Specific Information:</h3> <p> HSQLDB does not support array types; this method always throws an <code>SQLException</code> stating that the operation is not supported. </div> <!-- end release-specific documentation -->

 * @param columnLabel the label for the column specified with the SQL ASclause.  If the SQL AS clause was not specified, then the label is the name of the column

 * @param x the new column value

 * @exception SQLException if a database access error occurs,the result set concurrency is <code>CONCUR_READ_ONLY</code> or this method is called on a closed result set

 * @exception SQLFeatureNotSupportedException if the JDBC driver does not supportthis method

 * @since JDK 1.4, HSQLDB 1.7.0

 */

public void updateArray(String columnLabel,java.sql.Array x) throws SQLException {

  int columnIndex=findColumn(columnLabel);

  updateArray(columnIndex,x);

}

Location: JDBCResultSet.java

Content: 

/** 

 * Updates the designated column with an ascii stream value. The data will be read from the stream as needed until end-of-stream is reached. <p> The updater methods are used to update column values in the current row or the insert row.  The updater methods do not update the underlying database; instead the <code>updateRow</code> or <code>insertRow</code> methods are called to update the database. <P><B>Note:</B> Consult your JDBC driver documentation to determine if it might be more efficient to use a version of <code>updateAsciiStream</code> which takes a length parameter.

 * @param columnIndex the first column is 1, the second is 2, ...

 * @param x the new column value

 * @exception SQLException if the columnIndex is not valid;if a database access error occurs; the result set concurrency is <code>CONCUR_READ_ONLY</code> or this method is called on a closed result set

 * @exception SQLFeatureNotSupportedException if the JDBC driver does not supportthis method

 * @since 1.6

 */

public void updateAsciiStream(int columnIndex,java.io.InputStream x) throws SQLException {

  startUpdate(columnIndex);

  preparedStatement.setAsciiStream(columnIndex,x);

}

Location: JDBCResultSet.java

Content: 

/** 

 * <!-- start generic documentation --> (JDBC4 clarification:) Updates the designated column with an ascii stream value, which will have the specified number of bytes. The updater methods are used to update column values in the current row or the insert row.  The updater methods do not update the underlying database; instead the <code>updateRow</code> or <code>insertRow</code> methods are called to update the database. <!-- end generic documentation --> <!-- start release-specific documentation --> <div class="ReleaseSpecificDocumentation"> <h3>HSQLDB-Specific Information:</h3> <p> HSQLDB supports this feature. <p> </div>

 * @param columnIndex the first column is 1, the second is 2, ...

 * @param x the new column value

 * @param length the length of the stream

 * @exception SQLException if a database access error occurs,the result set concurrency is <code>CONCUR_READ_ONLY</code> or this method is called on a closed result set

 * @exception SQLFeatureNotSupportedException if the JDBC driver does not supportthis method

 * @since JDK 1.2

 */

public void updateAsciiStream(int columnIndex,java.io.InputStream x,int length) throws SQLException {

  startUpdate(columnIndex);

  preparedStatement.setAsciiStream(columnIndex,x,length);

}

Location: JDBCResultSet.java

Content: 

/** 

 * Updates the designated column with an ascii stream value, which will have the specified number of bytes. The updater methods are used to update column values in the current row or the insert row.  The updater methods do not update the underlying database; instead the <code>updateRow</code> or <code>insertRow</code> methods are called to update the database.

 * @param columnIndex the first column is 1, the second is 2, ...

 * @param x the new column value

 * @param length the length of the stream

 * @exception SQLException if a database access error occurs,the result set concurrency is <code>CONCUR_READ_ONLY</code> or this method is called on a closed result set

 * @exception SQLFeatureNotSupportedException if the JDBC driver does not supportthis method

 * @since JDK 1.6, HSQLDB 2.0

 */

public void updateAsciiStream(int columnIndex,java.io.InputStream x,long length) throws SQLException {

  startUpdate(columnIndex);

  preparedStatement.setAsciiStream(columnIndex,x,length);

}

Location: JDBCResultSet.java

Content: 

/** 

 * Updates the designated column with an ascii stream value. The data will be read from the stream as needed until end-of-stream is reached. <p> The updater methods are used to update column values in the current row or the insert row.  The updater methods do not update the underlying database; instead the <code>updateRow</code> or <code>insertRow</code> methods are called to update the database. <P><B>Note:</B> Consult your JDBC driver documentation to determine if it might be more efficient to use a version of <code>updateAsciiStream</code> which takes a length parameter.

 * @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column

 * @param x the new column value

 * @exception SQLException if the columnLabel is not valid;if a database access error occurs; the result set concurrency is <code>CONCUR_READ_ONLY</code> or this method is called on a closed result set

 * @exception SQLFeatureNotSupportedException if the JDBC driver does not supportthis method

 * @since 1.6

 */

public void updateAsciiStream(String columnLabel,java.io.InputStream x) throws SQLException {

  int columnIndex=findColumn(columnLabel);

  startUpdate(columnIndex);

  preparedStatement.setAsciiStream(columnIndex,x);

}

Location: JDBCResultSet.java

Content: 

/** 

 * <!-- start generic documentation --> (JDBC4 clarification:) Updates the designated column with an ascii stream value, which will have the specified number of bytes. The updater methods are used to update column values in the current row or the insert row.  The updater methods do not update the underlying database; instead the <code>updateRow</code> or <code>insertRow</code> methods are called to update the database. <!-- end generic documentation --> <!-- start release-specific documentation --> <div class="ReleaseSpecificDocumentation"> <h3>HSQLDB-Specific Information:</h3> <p> HSQLDB supports this feature. <p> </div> <!-- end release-specific documentation -->

 * @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column

 * @param x the new column value

 * @param length the length of the stream

 * @exception SQLException if a database access error occurs,the result set concurrency is <code>CONCUR_READ_ONLY</code> or this method is called on a closed result set

 * @exception SQLFeatureNotSupportedException if the JDBC driver does not supportthis method

 * @since JDK 1.2

 */

public void updateAsciiStream(String columnLabel,java.io.InputStream x,int length) throws SQLException {

  updateAsciiStream(findColumn(columnLabel),x,length);

}

Location: JDBCResultSet.java

Content: 

/** 

 * Updates the designated column with an ascii stream value, which will have the specified number of bytes.. The updater methods are used to update column values in the current row or the insert row.  The updater methods do not update the underlying database; instead the <code>updateRow</code> or <code>insertRow</code> methods are called to update the database.

 * @param columnLabel the label for the column specified with the SQL ASclause.  If the SQL AS clause was not specified, then the label is the name of the column

 * @param x the new column value

 * @param length the length of the stream

 * @exception SQLException if a database access error occurs,the result set concurrency is <code>CONCUR_READ_ONLY</code> or this method is called on a closed result set

 * @exception SQLFeatureNotSupportedException if the JDBC driver does not supportthis method

 * @since JDK 1.6, HSQLDB 2.0

 */

public void updateAsciiStream(String columnLabel,java.io.InputStream x,long length) throws SQLException {

  int columnIndex=findColumn(columnLabel);

  startUpdate(columnIndex);

  preparedStatement.setAsciiStream(columnIndex,x,length);

}

Location: JDBCResultSet.java

Content: 

/** 

 * <!-- start generic documentation --> Updates the designated column with a <code>java.math.BigDecimal</code> value. The updater methods are used to update column values in the current row or the insert row.  The updater methods do not update the underlying database; instead the <code>updateRow</code> or <code>insertRow</code> methods are called to update the database. <!-- end generic documentation --> <!-- start release-specific documentation --> <div class="ReleaseSpecificDocumentation"> <h3>HSQLDB-Specific Information:</h3> <p> HSQLDB supports this feature. <p> </div> <!-- end release-specific documentation -->

 * @param columnIndex the first column is 1, the second is 2, ...

 * @param x the new column value

 * @exception SQLException if a database access error occurs,the result set concurrency is <code>CONCUR_READ_ONLY</code> or this method is called on a closed result set

 * @exception SQLFeatureNotSupportedException if the JDBC driver does not supportthis method

 * @since JDK 1.2

 */

public void updateBigDecimal(int columnIndex,BigDecimal x) throws SQLException {

  startUpdate(columnIndex);

  preparedStatement.setParameter(columnIndex,x);

}

Location: JDBCResultSet.java

Content: 

/** 

 * <!-- start generic documentation --> Updates the designated column with a <code>java.sql.BigDecimal</code> value. The updater methods are used to update column values in the current row or the insert row.  The updater methods do not update the underlying database; instead the <code>updateRow</code> or <code>insertRow</code> methods are called to update the database. <!-- end generic documentation --> <!-- start release-specific documentation --> <div class="ReleaseSpecificDocumentation"> <h3>HSQLDB-Specific Information:</h3> <p> HSQLDB supports this feature. <p> </div> <!-- end release-specific documentation -->

 * @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column

 * @param x the new column value

 * @exception SQLException if a database access error occurs,the result set concurrency is <code>CONCUR_READ_ONLY</code> or this method is called on a closed result set

 * @exception SQLFeatureNotSupportedException if the JDBC driver does not supportthis method

 * @since JDK 1.2

 */

public void updateBigDecimal(String columnLabel,BigDecimal x) throws SQLException {

  updateBigDecimal(findColumn(columnLabel),x);

}

Location: JDBCResultSet.java

Content: 

/** 

 * Updates the designated column with a binary stream value. The data will be read from the stream as needed until end-of-stream is reached. <p> The updater methods are used to update column values in the current row or the insert row.  The updater methods do not update the underlying database; instead the <code>updateRow</code> or <code>insertRow</code> methods are called to update the database. <P><B>Note:</B> Consult your JDBC driver documentation to determine if it might be more efficient to use a version of <code>updateBinaryStream</code> which takes a length parameter.

 * @param columnIndex the first column is 1, the second is 2, ...

 * @param x the new column value

 * @exception SQLException if the columnIndex is not valid;if a database access error occurs; the result set concurrency is <code>CONCUR_READ_ONLY</code> or this method is called on a closed result set

 * @exception SQLFeatureNotSupportedException if the JDBC driver does not supportthis method

 * @since 1.6

 */

public void updateBinaryStream(int columnIndex,java.io.InputStream x) throws SQLException {

  startUpdate(columnIndex);

  preparedStatement.setBinaryStream(columnIndex,x);

}

Location: JDBCResultSet.java

Content: 

/** 

 * <!-- start generic documentation --> (JDBC4 clarification:) Updates the designated column with a binary stream value, which will have the specified number of bytes. The updater methods are used to update column values in the current row or the insert row.  The updater methods do not update the underlying database; instead the <code>updateRow</code> or <code>insertRow</code> methods are called to update the database. <!-- end generic documentation --> <!-- start release-specific documentation --> <div class="ReleaseSpecificDocumentation"> <h3>HSQLDB-Specific Information:</h3> <p> HSQLDB supports this feature. <p> </div> <!-- end release-specific documentation -->

 * @param columnIndex the first column is 1, the second is 2, ...

 * @param x the new column value

 * @param length the length of the stream

 * @exception SQLException if a database access error occurs,the result set concurrency is <code>CONCUR_READ_ONLY</code> or this method is called on a closed result set

 * @exception SQLFeatureNotSupportedException if the JDBC driver does not supportthis method

 * @since JDK 1.2

 */

public void updateBinaryStream(int columnIndex,java.io.InputStream x,int length) throws SQLException {

  startUpdate(columnIndex);

  preparedStatement.setBinaryStream(columnIndex,x,length);

}

Location: JDBCResultSet.java

Content: 

/** 

 * Updates the designated column with a binary stream value, which will have the specified number of bytes. The updater methods are used to update column values in the current row or the insert row.  The updater methods do not update the underlying database; instead the <code>updateRow</code> or <code>insertRow</code> methods are called to update the database.

 * @param columnIndex the first column is 1, the second is 2, ...

 * @param x the new column value

 * @param length the length of the stream

 * @exception SQLException if a database access error occurs,the result set concurrency is <code>CONCUR_READ_ONLY</code> or this method is called on a closed result set

 * @exception SQLFeatureNotSupportedException if the JDBC driver does not supportthis method

 * @since JDK 1.6, HSQLDB 2.0

 */

public void updateBinaryStream(int columnIndex,java.io.InputStream x,long length) throws SQLException {

  startUpdate(columnIndex);

  preparedStatement.setBinaryStream(columnIndex,x,length);

}

Location: JDBCResultSet.java

Content: 

/** 

 * Updates the designated column with a binary stream value. The data will be read from the stream as needed until end-of-stream is reached. <p> The updater methods are used to update column values in the current row or the insert row.  The updater methods do not update the underlying database; instead the <code>updateRow</code> or <code>insertRow</code> methods are called to update the database. <P><B>Note:</B> Consult your JDBC driver documentation to determine if it might be more efficient to use a version of <code>updateBinaryStream</code> which takes a length parameter.

 * @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column

 * @param x the new column value

 * @exception SQLException if the columnLabel is not valid;if a database access error occurs; the result set concurrency is <code>CONCUR_READ_ONLY</code> or this method is called on a closed result set

 * @exception SQLFeatureNotSupportedException if the JDBC driver does not supportthis method

 * @since 1.6

 */

public void updateBinaryStream(String columnLabel,java.io.InputStream x) throws SQLException {

  int columnIndex=findColumn(columnLabel);

  startUpdate(columnIndex);

  preparedStatement.setBinaryStream(columnIndex,x);

}

Location: JDBCResultSet.java

Content: 

/** 

 * <!-- start generic documentation --> (JDBC4 clarification:) Updates the designated column with a binary stream value, which will have the specified number of bytes. The updater methods are used to update column values in the current row or the insert row.  The updater methods do not update the underlying database; instead the <code>updateRow</code> or <code>insertRow</code> methods are called to update the database. <!-- end generic documentation --> <!-- start release-specific documentation --> <div class="ReleaseSpecificDocumentation"> <h3>HSQLDB-Specific Information:</h3> <p> HSQLDB supports this feature. <p> </div> <!-- end release-specific documentation -->

 * @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column

 * @param x the new column value

 * @param length the length of the stream

 * @exception SQLException if a database access error occurs,the result set concurrency is <code>CONCUR_READ_ONLY</code> or this method is called on a closed result set

 * @exception SQLFeatureNotSupportedException if the JDBC driver does not supportthis method

 * @since JDK 1.2

 */

public void updateBinaryStream(String columnLabel,java.io.InputStream x,int length) throws SQLException {

  updateBinaryStream(findColumn(columnLabel),x,length);

}

Location: JDBCResultSet.java

Content: 

/** 

 * Updates the designated column with a binary stream value, which will have the specified number of bytes. The updater methods are used to update column values in the current row or the insert row.  The updater methods do not update the underlying database; instead the <code>updateRow</code> or <code>insertRow</code> methods are called to update the database.

 * @param columnLabel the label for the column specified with the SQL ASclause.  If the SQL AS clause was not specified, then the label is the name of the column

 * @param x the new column value

 * @param length the length of the stream

 * @exception SQLException if a database access error occurs,the result set concurrency is <code>CONCUR_READ_ONLY</code> or this method is called on a closed result set

 * @exception SQLFeatureNotSupportedException if the JDBC driver does not supportthis method

 * @since JDK 1.6, HSQLDB 2.0

 */

public void updateBinaryStream(String columnLabel,java.io.InputStream x,long length) throws SQLException {

  int columnIndex=findColumn(columnLabel);

  startUpdate(columnIndex);

  preparedStatement.setBinaryStream(columnIndex,x,length);

}

Location: JDBCResultSet.java

Content: 

/** 

 * Updates the designated column using the given input stream. The data will be read from the stream as needed until end-of-stream is reached. <p> The updater methods are used to update column values in the current row or the insert row.  The updater methods do not update the underlying database; instead the <code>updateRow</code> or <code>insertRow</code> methods are called to update the database. <P><B>Note:</B> Consult your JDBC driver documentation to determine if it might be more efficient to use a version of <code>updateBlob</code> which takes a length parameter.

 * @param columnIndex the first column is 1, the second is 2, ...

 * @param inputStream An object that contains the data to set the parametervalue to.

 * @exception SQLException if the columnIndex is not valid; if a database access error occurs;the result set concurrency is <code>CONCUR_READ_ONLY</code> or this method is called on a closed result set

 * @exception SQLFeatureNotSupportedException if the JDBC driver does not supportthis method

 * @since 1.6

 */

public void updateBlob(int columnIndex,InputStream inputStream) throws SQLException {

  startUpdate(columnIndex);

  preparedStatement.setBlob(columnIndex,inputStream);

}

Location: JDBCResultSet.java

Content: 

/** 

 * Updates the designated column using the given input stream, which will have the specified number of bytes. When a very large ASCII value is input to a <code>LONGVARCHAR</code> parameter, it may be more practical to send it via a <code>java.io.InputStream</code>. Data will be read from the stream as needed until end-of-file is reached.  The JDBC driver will do any necessary conversion from ASCII to the database char format. <P><B>Note:</B> This stream object can either be a standard Java stream object or your own subclass that implements the standard interface. <p> The updater methods are used to update column values in the current row or the insert row.  The updater methods do not update the underlying database; instead the <code>updateRow</code> or <code>insertRow</code> methods are called to update the database.

 * @param columnIndex the first column is 1, the second is 2, ...

 * @param inputStream An object that contains the data to set the parametervalue to.

 * @param length the number of bytes in the parameter data.

 * @exception SQLException if a database access error occurs,the result set concurrency is <code>CONCUR_READ_ONLY</code> or this method is called on a closed result set

 * @exception SQLFeatureNotSupportedException if the JDBC driver does not supportthis method

 * @since JDK 1.6, HSQLDB 2.0

 */

public void updateBlob(int columnIndex,InputStream inputStream,long length) throws SQLException {

  startUpdate(columnIndex);

  preparedStatement.setBlob(columnIndex,inputStream,length);

}

Location: JDBCResultSet.java

Content: 

/** 

 * <!-- start generic documentation --> Updates the designated column with a <code>java.sql.Blob</code> value. The updater methods are used to update column values in the current row or the insert row.  The updater methods do not update the underlying database; instead the <code>updateRow</code> or <code>insertRow</code> methods are called to update the database. <!-- end generic documentation --> <!-- start release-specific documentation --> <div class="ReleaseSpecificDocumentation"> <h3>HSQLDB-Specific Information:</h3> <p> HSQLDB 2.0 supports this feature for columns of type BLOB. </div> <!-- end release-specific documentation -->

 * @param columnIndex the first column is 1, the second is 2, ...

 * @param x the new column value

 * @exception SQLException if a database access error occurs,the result set concurrency is <code>CONCUR_READ_ONLY</code> or this method is called on a closed result set

 * @exception SQLFeatureNotSupportedException if the JDBC driver does not supportthis method

 * @since JDK 1.4, HSQLDB 1.7.0

 */

public void updateBlob(int columnIndex,java.sql.Blob x) throws SQLException {

  startUpdate(columnIndex);

  preparedStatement.setBlobParameter(columnIndex,x);

}

Location: JDBCResultSet.java

Content: 

/** 

 * Updates the designated column using the given input stream. The data will be read from the stream as needed until end-of-stream is reached. <p> The updater methods are used to update column values in the current row or the insert row.  The updater methods do not update the underlying database; instead the <code>updateRow</code> or <code>insertRow</code> methods are called to update the database. <P><B>Note:</B> Consult your JDBC driver documentation to determine if it might be more efficient to use a version of <code>updateBlob</code> which takes a length parameter.

 * @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column

 * @param inputStream An object that contains the data to set the parametervalue to.

 * @exception SQLException if the columnLabel is not valid; if a database access error occurs;the result set concurrency is <code>CONCUR_READ_ONLY</code> or this method is called on a closed result set

 * @exception SQLFeatureNotSupportedException if the JDBC driver does not supportthis method

 * @since 1.6

 */

public void updateBlob(String columnLabel,InputStream inputStream) throws SQLException {

  int columnIndex=findColumn(columnLabel);

  startUpdate(columnIndex);

  preparedStatement.setBlob(columnIndex,inputStream);

}

Location: JDBCResultSet.java

Content: 

/** 

 * Updates the designated column using the given input stream, which will have the specified number of bytes. When a very large ASCII value is input to a <code>LONGVARCHAR</code> parameter, it may be more practical to send it via a <code>java.io.InputStream</code>. Data will be read from the stream as needed until end-of-file is reached.  The JDBC driver will do any necessary conversion from ASCII to the database char format. <P><B>Note:</B> This stream object can either be a standard Java stream object or your own subclass that implements the standard interface. <p> The updater methods are used to update column values in the current row or the insert row.  The updater methods do not update the underlying database; instead the <code>updateRow</code> or <code>insertRow</code> methods are called to update the database.

 * @param columnLabel the label for the column specified with the SQL ASclause.  If the SQL AS clause was not specified, then the label is the name of the column

 * @param inputStream An object that contains the data to set the parametervalue to.

 * @param length the number of bytes in the parameter data.

 * @exception SQLException if a database access error occurs,the result set concurrency is <code>CONCUR_READ_ONLY</code> or this method is called on a closed result set

 * @exception SQLFeatureNotSupportedException if the JDBC driver does not supportthis method

 * @since JDK 1.6, HSQLDB 2.0

 */

public void updateBlob(String columnLabel,InputStream inputStream,long length) throws SQLException {

  int columnIndex=findColumn(columnLabel);

  startUpdate(columnIndex);

  preparedStatement.setBlob(columnIndex,inputStream,length);

}

Location: JDBCResultSet.java

Content: 

/** 

 * <!-- start generic documentation --> Updates the designated column with a <code>java.sql.Blob</code> value. The updater methods are used to update column values in the current row or the insert row.  The updater methods do not update the underlying database; instead the <code>updateRow</code> or <code>insertRow</code> methods are called to update the database. <!-- end generic documentation --> <!-- start release-specific documentation --> <div class="ReleaseSpecificDocumentation"> <h3>HSQLDB-Specific Information:</h3> <p> HSQLDB 2.0 supports this feature for columns of type BLOB. </div> <!-- end release-specific documentation -->

 * @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column

 * @param x the new column value

 * @exception SQLException if a database access error occurs,the result set concurrency is <code>CONCUR_READ_ONLY</code> or this method is called on a closed result set

 * @exception SQLFeatureNotSupportedException if the JDBC driver does not supportthis method

 * @since JDK 1.4, HSQLDB 1.7.0

 */

public void updateBlob(String columnLabel,java.sql.Blob x) throws SQLException {

  int columnIndex=findColumn(columnLabel);

  updateBlob(columnIndex,x);

}

Location: JDBCResultSet.java

Content: 

/** 

 * <!-- start generic documentation --> Updates the designated column with a <code>boolean</code> value. The updater methods are used to update column values in the current row or the insert row.  The updater methods do not update the underlying database; instead the <code>updateRow</code> or <code>insertRow</code> methods are called to update the database. <!-- end generic documentation --> <!-- start release-specific documentation --> <div class="ReleaseSpecificDocumentation"> <h3>HSQLDB-Specific Information:</h3> <p> HSQLDB supports this feature. <p> </div> <!-- end release-specific documentation -->

 * @param columnIndex the first column is 1, the second is 2, ...

 * @param x the new column value

 * @exception SQLException if a database access error occurs,the result set concurrency is <code>CONCUR_READ_ONLY</code> or this method is called on a closed result set

 * @exception SQLFeatureNotSupportedException if the JDBC driver does not supportthis method

 * @since JDK 1.2

 */

public void updateBoolean(int columnIndex,boolean x) throws SQLException {

  Boolean value=x ? Boolean.TRUE : Boolean.FALSE;

  startUpdate(columnIndex);

  preparedStatement.setParameter(columnIndex,value);

}

Location: JDBCResultSet.java

Content: 

/** 

 * <!-- start generic documentation --> Updates the designated column with a <code>boolean</code> value. The updater methods are used to update column values in the current row or the insert row.  The updater methods do not update the underlying database; instead the <code>updateRow</code> or <code>insertRow</code> methods are called to update the database. <!-- end generic documentation --> <!-- start release-specific documentation --> <div class="ReleaseSpecificDocumentation"> <h3>HSQLDB-Specific Information:</h3> <p> HSQLDB supports this feature. <p> </div> <!-- end release-specific documentation -->

 * @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column

 * @param x the new column value

 * @exception SQLException if a database access error occurs,the result set concurrency is <code>CONCUR_READ_ONLY</code> or this method is called on a closed result set

 * @exception SQLFeatureNotSupportedException if the JDBC driver does not supportthis method

 * @since JDK 1.2

 */

public void updateBoolean(String columnLabel,boolean x) throws SQLException {

  updateBoolean(findColumn(columnLabel),x);

}

Location: JDBCResultSet.java

Content: 

/** 

 * <!-- start generic documentation --> Updates the designated column with a <code>byte</code> array value. The updater methods are used to update column values in the current row or the insert row.  The updater methods do not update the underlying database; instead the <code>updateRow</code> or <code>insertRow</code> methods are called to update the database. <!-- end generic documentation --> <!-- start release-specific documentation --> <div class="ReleaseSpecificDocumentation"> <h3>HSQLDB-Specific Information:</h3> <p> HSQLDB supports this feature. <p> </div> <!-- end release-specific documentation -->

 * @param columnIndex the first column is 1, the second is 2, ...

 * @param x the new column value

 * @exception SQLException if a database access error occurs,the result set concurrency is <code>CONCUR_READ_ONLY</code> or this method is called on a closed result set

 * @exception SQLFeatureNotSupportedException if the JDBC driver does not supportthis method

 * @since JDK 1.2

 */

public void updateBytes(int columnIndex,byte[] x) throws SQLException {

  startUpdate(columnIndex);

  preparedStatement.setParameter(columnIndex,x);

}

Location: JDBCResultSet.java

Content: 

/** 

 * <!-- start generic documentation --> Updates the designated column with a byte array value. The updater methods are used to update column values in the current row or the insert row.  The updater methods do not update the underlying database; instead the <code>updateRow</code> or <code>insertRow</code> methods are called to update the database. <!-- end generic documentation --> <!-- start release-specific documentation --> <div class="ReleaseSpecificDocumentation"> <h3>HSQLDB-Specific Information:</h3> <p> HSQLDB supports this feature. <p> </div> <!-- end release-specific documentation -->

 * @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column

 * @param x the new column value

 * @exception SQLException if a database access error occurs,the result set concurrency is <code>CONCUR_READ_ONLY</code> or this method is called on a closed result set

 * @exception SQLFeatureNotSupportedException if the JDBC driver does not supportthis method

 * @since JDK 1.2

 */

public void updateBytes(String columnLabel,byte[] x) throws SQLException {

  updateBytes(findColumn(columnLabel),x);

}

Location: JDBCResultSet.java

Content: 

/** 

 * <!-- start generic documentation --> Updates the designated column with a <code>byte</code> value. The updater methods are used to update column values in the current row or the insert row.  The updater methods do not update the underlying database; instead the <code>updateRow</code> or <code>insertRow</code> methods are called to update the database. <!-- end generic documentation --> <!-- start release-specific documentation --> <div class="ReleaseSpecificDocumentation"> <h3>HSQLDB-Specific Information:</h3> <p> HSQLDB supports this feature. <p> </div> <!-- end release-specific documentation -->

 * @param columnIndex the first column is 1, the second is 2, ...

 * @param x the new column value

 * @exception SQLException if a database access error occurs,the result set concurrency is <code>CONCUR_READ_ONLY</code> or this method is called on a closed result set

 * @exception SQLFeatureNotSupportedException if the JDBC driver does not supportthis method

 * @since JDK 1.2

 */

public void updateByte(int columnIndex,byte x) throws SQLException {

  startUpdate(columnIndex);

  preparedStatement.setIntParameter(columnIndex,x);

}

Location: JDBCResultSet.java

Content: 

/** 

 * <!-- start generic documentation --> Updates the designated column with a <code>byte</code> value. The updater methods are used to update column values in the current row or the insert row.  The updater methods do not update the underlying database; instead the <code>updateRow</code> or <code>insertRow</code> methods are called to update the database. <!-- end generic documentation --> <!-- start release-specific documentation --> <div class="ReleaseSpecificDocumentation"> <h3>HSQLDB-Specific Information:</h3> <p> HSQLDB supports this feature. <p> </div> <!-- end release-specific documentation -->

 * @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column

 * @param x the new column value

 * @exception SQLException if a database access error occurs,the result set concurrency is <code>CONCUR_READ_ONLY</code> or this method is called on a closed result set

 * @exception SQLFeatureNotSupportedException if the JDBC driver does not supportthis method

 * @since JDK 1.2

 */

public void updateByte(String columnLabel,byte x) throws SQLException {

  updateByte(findColumn(columnLabel),x);

}

Location: JDBCResultSet.java

Content: 

/** 

 * Updates the designated column with a character stream value. The data will be read from the stream as needed until end-of-stream is reached. <p> The updater methods are used to update column values in the current row or the insert row.  The updater methods do not update the underlying database; instead the <code>updateRow</code> or <code>insertRow</code> methods are called to update the database. <P><B>Note:</B> Consult your JDBC driver documentation to determine if it might be more efficient to use a version of <code>updateCharacterStream</code> which takes a length parameter.

 * @param columnIndex the first column is 1, the second is 2, ...

 * @param x the new column value

 * @exception SQLException if the columnIndex is not valid;if a database access error occurs; the result set concurrency is <code>CONCUR_READ_ONLY</code> or this method is called on a closed result set

 * @exception SQLFeatureNotSupportedException if the JDBC driver does not supportthis method

 * @since 1.6

 */

public void updateCharacterStream(int columnIndex,java.io.Reader x) throws SQLException {

  startUpdate(columnIndex);

  preparedStatement.setCharacterStream(columnIndex,x);

}

Location: JDBCResultSet.java

Content: 

/** 

 * <!-- start generic documentation --> (JDBC4 clarification:) Updates the designated column with a character stream value, which will have the specified number of (CHECKME: characters?) bytes. The updater methods are used to update column values in the current row or the insert row.  The updater methods do not update the underlying database; instead the <code>updateRow</code> or <code>insertRow</code> methods are called to update the database. <!-- end generic documentation --> <!-- start release-specific documentation --> <div class="ReleaseSpecificDocumentation"> <h3>HSQLDB-Specific Information:</h3> <p> HSQLDB supports this feature. <p> </div> <!-- end release-specific documentation -->

 * @param columnIndex the first column is 1, the second is 2, ...

 * @param x the new column value

 * @param length the length of the stream

 * @exception SQLException if a database access error occurs,the result set concurrency is <code>CONCUR_READ_ONLY</code> or this method is called on a closed result set

 * @exception SQLFeatureNotSupportedException if the JDBC driver does not supportthis method

 * @since JDK 1.2

 */

public void updateCharacterStream(int columnIndex,java.io.Reader x,int length) throws SQLException {

  startUpdate(columnIndex);

  preparedStatement.setCharacterStream(columnIndex,x,length);

}

Location: JDBCResultSet.java

Content: 

/** 

 * Updates the designated column with a character stream value, which will have the specified number of bytes. The updater methods are used to update column values in the current row or the insert row.  The updater methods do not update the underlying database; instead the <code>updateRow</code> or <code>insertRow</code> methods are called to update the database.

 * @param columnIndex the first column is 1, the second is 2, ...

 * @param x the new column value

 * @param length the length of the stream

 * @exception SQLException if a database access error occurs,the result set concurrency is <code>CONCUR_READ_ONLY</code> or this method is called on a closed result set

 * @exception SQLFeatureNotSupportedException if the JDBC driver does not supportthis method

 * @since JDK 1.6, HSQLDB 2.0

 */

public void updateCharacterStream(int columnIndex,java.io.Reader x,long length) throws SQLException {

  startUpdate(columnIndex);

  preparedStatement.setCharacterStream(columnIndex,x,length);

}

Location: JDBCResultSet.java

Content: 

/** 

 * Updates the designated column with a character stream value. The data will be read from the stream as needed until end-of-stream is reached. <p> The updater methods are used to update column values in the current row or the insert row.  The updater methods do not update the underlying database; instead the <code>updateRow</code> or <code>insertRow</code> methods are called to update the database. <P><B>Note:</B> Consult your JDBC driver documentation to determine if it might be more efficient to use a version of <code>updateCharacterStream</code> which takes a length parameter.

 * @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column

 * @param reader the <code>java.io.Reader</code> object containingthe new column value

 * @exception SQLException if the columnLabel is not valid; if a database access error occurs;the result set concurrency is <code>CONCUR_READ_ONLY</code> or this method is called on a closed result set

 * @exception SQLFeatureNotSupportedException if the JDBC driver does not supportthis method

 * @since 1.6

 */

public void updateCharacterStream(String columnLabel,java.io.Reader reader) throws SQLException {

  int columnIndex=findColumn(columnLabel);

  startUpdate(columnIndex);

  preparedStatement.setCharacterStream(columnIndex,reader);

}

Location: JDBCResultSet.java

Content: 

/** 

 * <!-- start generic documentation --> (JDBC4 clarification) Updates the designated column with a character stream value, which will have the specified number of (CHECKME: characters?) bytes. The updater methods are used to update column values in the current row or the insert row.  The updater methods do not update the underlying database; instead the <code>updateRow</code> or <code>insertRow</code> methods are called to update the database. <!-- end generic documentation --> <!-- start release-specific documentation --> <div class="ReleaseSpecificDocumentation"> <h3>HSQLDB-Specific Information:</h3> <p> HSQLDB supports this feature. <p> </div> <!-- end release-specific documentation -->

 * @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column

 * @param reader the <code>java.io.Reader</code> object containingthe new column value

 * @param length the length of the stream

 * @exception SQLException if a database access error occurs,the result set concurrency is <code>CONCUR_READ_ONLY</code> or this method is called on a closed result set

 * @exception SQLFeatureNotSupportedException if the JDBC driver does not supportthis method

 * @since JDK 1.2

 */

public void updateCharacterStream(String columnLabel,java.io.Reader reader,int length) throws SQLException {

  updateCharacterStream(findColumn(columnLabel),reader,length);

}

Location: JDBCResultSet.java

Content: 

/** 

 * Updates the designated column with a character stream value, which will have the specified number of bytes. The updater methods are used to update column values in the current row or the insert row.  The updater methods do not update the underlying database; instead the <code>updateRow</code> or <code>insertRow</code> methods are called to update the database.

 * @param columnLabel the label for the column specified with the SQL ASclause.  If the SQL AS clause was not specified, then the label is the name of the column

 * @param reader the <code>java.io.Reader</code> object containingthe new column value

 * @param length the length of the stream

 * @exception SQLException if a database access error occurs,the result set concurrency is <code>CONCUR_READ_ONLY</code> or this method is called on a closed result set

 * @exception SQLFeatureNotSupportedException if the JDBC driver does not supportthis method

 * @since JDK 1.6, HSQLDB 2.0

 */

public void updateCharacterStream(String columnLabel,java.io.Reader reader,long length) throws SQLException {

  int columnIndex=findColumn(columnLabel);

  startUpdate(columnIndex);

  preparedStatement.setCharacterStream(columnIndex,reader,length);

}

Location: JDBCResultSet.java

Content: 

/** 

 * <!-- start generic documentation --> Updates the designated column with a <code>java.sql.Clob</code> value. The updater methods are used to update column values in the current row or the insert row.  The updater methods do not update the underlying database; instead the <code>updateRow</code> or <code>insertRow</code> methods are called to update the database. <!-- end generic documentation --> <!-- start release-specific documentation --> <div class="ReleaseSpecificDocumentation"> <h3>HSQLDB-Specific Information:</h3> <p> HSQLDB 2.0 supports this feature for columns of type CLOB.<p> </div> <!-- end release-specific documentation -->

 * @param columnIndex the first column is 1, the second is 2, ...

 * @param x the new column value

 * @exception SQLException if a database access error occurs,the result set concurrency is <code>CONCUR_READ_ONLY</code> or this method is called on a closed result set

 * @exception SQLFeatureNotSupportedException if the JDBC driver does not supportthis method

 * @since JDK 1.4, HSQLDB 1.7.0

 */

public void updateClob(int columnIndex,java.sql.Clob x) throws SQLException {

  startUpdate(columnIndex);

  preparedStatement.setClobParameter(columnIndex,x);

}

Location: JDBCResultSet.java

Content: 

/** 

 * Updates the designated column using the given <code>Reader</code> object. The data will be read from the stream as needed until end-of-stream is reached.  The JDBC driver will do any necessary conversion from UNICODE to the database char format. <p> The updater methods are used to update column values in the current row or the insert row.  The updater methods do not update the underlying database; instead the <code>updateRow</code> or <code>insertRow</code> methods are called to update the database. <P><B>Note:</B> Consult your JDBC driver documentation to determine if it might be more efficient to use a version of <code>updateClob</code> which takes a length parameter.

 * @param columnIndex the first column is 1, the second is 2, ...

 * @param reader An object that contains the data to set the parameter value to.

 * @exception SQLException if the columnIndex is not valid;if a database access error occurs; the result set concurrency is <code>CONCUR_READ_ONLY</code> or this method is called on a closed result set

 * @exception SQLFeatureNotSupportedException if the JDBC driver does not supportthis method

 * @since 1.6

 */

public void updateClob(int columnIndex,Reader reader) throws SQLException {

  startUpdate(columnIndex);

  preparedStatement.setClob(columnIndex,reader);

}

Location: JDBCResultSet.java

Content: 

/** 

 * Updates the designated column using the given <code>Reader</code> object, which is the given number of characters long. When a very large UNICODE value is input to a <code>LONGVARCHAR</code> parameter, it may be more practical to send it via a <code>java.io.Reader</code> object. The data will be read from the stream as needed until end-of-file is reached.  The JDBC driver will do any necessary conversion from UNICODE to the database char format. <P><B>Note:</B> This stream object can either be a standard Java stream object or your own subclass that implements the standard interface. <p> The updater methods are used to update column values in the current row or the insert row.  The updater methods do not update the underlying database; instead the <code>updateRow</code> or <code>insertRow</code> methods are called to update the database.

 * @param columnIndex the first column is 1, the second is 2, ...

 * @param reader An object that contains the data to set the parameter value to.

 * @param length the number of characters in the parameter data.

 * @exception SQLException if a database access error occurs,the result set concurrency is <code>CONCUR_READ_ONLY</code> or this method is called on a closed result set

 * @exception SQLFeatureNotSupportedException if the JDBC driver does not supportthis method

 * @since JDK 1.6, HSQLDB 2.0

 */

public void updateClob(int columnIndex,Reader reader,long length) throws SQLException {

  startUpdate(columnIndex);

  preparedStatement.setClob(columnIndex,reader,length);

}

Location: JDBCResultSet.java

Content: 

/** 

 * <!-- start generic documentation --> Updates the designated column with a <code>java.sql.Clob</code> value. The updater methods are used to update column values in the current row or the insert row.  The updater methods do not update the underlying database; instead the <code>updateRow</code> or <code>insertRow</code> methods are called to update the database. <!-- end generic documentation --> <!-- start release-specific documentation --> <div class="ReleaseSpecificDocumentation"> <h3>HSQLDB-Specific Information:</h3> <p> HSQLDB 2.0 supports this feature for columns of type CLOB.<p> </div> <!-- end release-specific documentation -->

 * @param columnLabel the label for the column specified with the SQL ASclause.  If the SQL AS clause was not specified, then the label is the name of the column

 * @param x the new column value

 * @exception SQLException if a database access error occurs,the result set concurrency is <code>CONCUR_READ_ONLY</code> or this method is called on a closed result set

 * @exception SQLFeatureNotSupportedException if the JDBC driver does not supportthis method

 * @since JDK 1.4, HSQLDB 1.7.0

 */

public void updateClob(String columnLabel,java.sql.Clob x) throws SQLException {

  int columnIndex=findColumn(columnLabel);

  updateClob(columnIndex,x);

}

Location: JDBCResultSet.java

Content: 

/** 

 * Updates the designated column using the given <code>Reader</code> object. The data will be read from the stream as needed until end-of-stream is reached.  The JDBC driver will do any necessary conversion from UNICODE to the database char format. <p> The updater methods are used to update column values in the current row or the insert row.  The updater methods do not update the underlying database; instead the <code>updateRow</code> or <code>insertRow</code> methods are called to update the database. <P><B>Note:</B> Consult your JDBC driver documentation to determine if it might be more efficient to use a version of <code>updateClob</code> which takes a length parameter.

 * @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column

 * @param reader An object that contains the data to set the parameter value to.

 * @exception SQLException if the columnLabel is not valid; if a database access error occurs;the result set concurrency is <code>CONCUR_READ_ONLY</code> or this method is called on a closed result set

 * @exception SQLFeatureNotSupportedException if the JDBC driver does not supportthis method

 * @since 1.6

 */

public void updateClob(String columnLabel,Reader reader) throws SQLException {

  int columnIndex=findColumn(columnLabel);

  startUpdate(columnIndex);

  preparedStatement.setClob(columnIndex,reader);

}

Location: JDBCResultSet.java

Content: 

/** 

 * Updates the designated column using the given <code>Reader</code> object, which is the given number of characters long. When a very large UNICODE value is input to a <code>LONGVARCHAR</code> parameter, it may be more practical to send it via a <code>java.io.Reader</code> object. The data will be read from the stream as needed until end-of-file is reached.  The JDBC driver will do any necessary conversion from UNICODE to the database char format. <P><B>Note:</B> This stream object can either be a standard Java stream object or your own subclass that implements the standard interface. <p> The updater methods are used to update column values in the current row or the insert row.  The updater methods do not update the underlying database; instead the <code>updateRow</code> or <code>insertRow</code> methods are called to update the database.

 * @param columnLabel the label for the column specified with the SQL ASclause.  If the SQL AS clause was not specified, then the label is the name of the column

 * @param reader An object that contains the data to set the parameter value to.

 * @param length the number of characters in the parameter data.

 * @exception SQLException if a database access error occurs,the result set concurrency is <code>CONCUR_READ_ONLY</code> or this method is called on a closed result set

 * @exception SQLFeatureNotSupportedException if the JDBC driver does not supportthis method

 * @since JDK 1.6, HSQLDB 2.0

 */

public void updateClob(String columnLabel,Reader reader,long length) throws SQLException {

  int columnIndex=findColumn(columnLabel);

  startUpdate(columnIndex);

  preparedStatement.setClob(columnIndex,reader,length);

}

Location: JDBCResultSet.java

Content: 

/** 

 * <!-- start generic documentation --> Updates the designated column with a <code>java.sql.Date</code> value. The updater methods are used to update column values in the current row or the insert row.  The updater methods do not update the underlying database; instead the <code>updateRow</code> or <code>insertRow</code> methods are called to update the database. <!-- end generic documentation --> <!-- start release-specific documentation --> <div class="ReleaseSpecificDocumentation"> <h3>HSQLDB-Specific Information:</h3> <p> HSQLDB supports this feature. <p> </div> <!-- end release-specific documentation -->

 * @param columnIndex the first column is 1, the second is 2, ...

 * @param x the new column value

 * @exception SQLException if a database access error occurs,the result set concurrency is <code>CONCUR_READ_ONLY</code> or this method is called on a closed result set

 * @exception SQLFeatureNotSupportedException if the JDBC driver does not supportthis method

 * @since JDK 1.2

 */

public void updateDate(int columnIndex,Date x) throws SQLException {

  startUpdate(columnIndex);

  preparedStatement.setParameter(columnIndex,x);

}

Location: JDBCResultSet.java

Content: 

/** 

 * <!-- start generic documentation --> Updates the designated column with a <code>java.sql.Date</code> value. The updater methods are used to update column values in the current row or the insert row.  The updater methods do not update the underlying database; instead the <code>updateRow</code> or <code>insertRow</code> methods are called to update the database. <!-- end generic documentation --> <!-- start release-specific documentation --> <div class="ReleaseSpecificDocumentation"> <h3>HSQLDB-Specific Information:</h3> <p> HSQLDB supports this feature. <p> </div> <!-- end release-specific documentation -->

 * @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column

 * @param x the new column value

 * @exception SQLException if a database access error occurs,the result set concurrency is <code>CONCUR_READ_ONLY</code> or this method is called on a closed result set

 * @exception SQLFeatureNotSupportedException if the JDBC driver does not supportthis method

 * @since JDK 1.2

 */

public void updateDate(String columnLabel,Date x) throws SQLException {

  updateDate(findColumn(columnLabel),x);

}

Location: JDBCResultSet.java

Content: 

/** 

 * <!-- start generic documentation --> Updates the designated column with a <code>double</code> value. The updater methods are used to update column values in the current row or the insert row.  The updater methods do not update the underlying database; instead the <code>updateRow</code> or <code>insertRow</code> methods are called to update the database. <!-- end generic documentation --> <!-- start release-specific documentation --> <div class="ReleaseSpecificDocumentation"> <h3>HSQLDB-Specific Information:</h3> <p> HSQLDB supports this feature. <p> </div> <!-- end release-specific documentation -->

 * @param columnIndex the first column is 1, the second is 2, ...

 * @param x the new column value

 * @exception SQLException if a database access error occurs,the result set concurrency is <code>CONCUR_READ_ONLY</code> or this method is called on a closed result set

 * @exception SQLFeatureNotSupportedException if the JDBC driver does not supportthis method

 * @since JDK 1.2

 */

public void updateDouble(int columnIndex,double x) throws SQLException {

  Double value=new Double(x);

  startUpdate(columnIndex);

  preparedStatement.setParameter(columnIndex,value);

}

Location: JDBCResultSet.java

Content: 

/** 

 * <!-- start generic documentation --> Updates the designated column with a <code>double</code> value. The updater methods are used to update column values in the current row or the insert row.  The updater methods do not update the underlying database; instead the <code>updateRow</code> or <code>insertRow</code> methods are called to update the database. <!-- end generic documentation --> <!-- start release-specific documentation --> <div class="ReleaseSpecificDocumentation"> <h3>HSQLDB-Specific Information:</h3> <p> HSQLDB supports this feature. <p> </div> <!-- end release-specific documentation -->

 * @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column

 * @param x the new column value

 * @exception SQLException if a database access error occurs,the result set concurrency is <code>CONCUR_READ_ONLY</code> or this method is called on a closed result set

 * @exception SQLFeatureNotSupportedException if the JDBC driver does not supportthis method

 * @since JDK 1.2

 */

public void updateDouble(String columnLabel,double x) throws SQLException {

  updateDouble(findColumn(columnLabel),x);

}

Location: JDBCResultSet.java

Content: 

/** 

 * <!-- start generic documentation --> Updates the designated column with a <code>float</code> value. The updater methods are used to update column values in the current row or the insert row.  The updater methods do not update the underlying database; instead the <code>updateRow</code> or <code>insertRow</code> methods are called to update the database. <!-- end generic documentation --> <!-- start release-specific documentation --> <div class="ReleaseSpecificDocumentation"> <h3>HSQLDB-Specific Information:</h3> <p> HSQLDB supports this feature. <p> </div> <!-- end release-specific documentation -->

 * @param columnIndex the first column is 1, the second is 2, ...

 * @param x the new column value

 * @exception SQLException if a database access error occurs,the result set concurrency is <code>CONCUR_READ_ONLY</code> or this method is called on a closed result set

 * @exception SQLFeatureNotSupportedException if the JDBC driver does not supportthis method

 * @since JDK 1.2

 */

public void updateFloat(int columnIndex,float x) throws SQLException {

  Double value=new Double(x);

  startUpdate(columnIndex);

  preparedStatement.setParameter(columnIndex,value);

}

Location: JDBCResultSet.java

Content: 

/** 

 * <!-- start generic documentation --> Updates the designated column with a <code>float </code> value. The updater methods are used to update column values in the current row or the insert row.  The updater methods do not update the underlying database; instead the <code>updateRow</code> or <code>insertRow</code> methods are called to update the database. <!-- end generic documentation --> <!-- start release-specific documentation --> <div class="ReleaseSpecificDocumentation"> <h3>HSQLDB-Specific Information:</h3> <p> HSQLDB supports this feature. <p> </div> <!-- end release-specific documentation -->

 * @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column

 * @param x the new column value

 * @exception SQLException if a database access error occurs,the result set concurrency is <code>CONCUR_READ_ONLY</code> or this method is called on a closed result set

 * @exception SQLFeatureNotSupportedException if the JDBC driver does not supportthis method

 * @since JDK 1.2

 */

public void updateFloat(String columnLabel,float x) throws SQLException {

  updateFloat(findColumn(columnLabel),x);

}

Location: JDBCResultSet.java

Content: 

/** 

 * <!-- start generic documentation --> Updates the designated column with an <code>int</code> value. The updater methods are used to update column values in the current row or the insert row.  The updater methods do not update the underlying database; instead the <code>updateRow</code> or <code>insertRow</code> methods are called to update the database. <!-- end generic documentation --> <!-- start release-specific documentation --> <div class="ReleaseSpecificDocumentation"> <h3>HSQLDB-Specific Information:</h3> <p> HSQLDB supports this feature. <p> </div> <!-- end release-specific documentation -->

 * @param columnIndex the first column is 1, the second is 2, ...

 * @param x the new column value

 * @exception SQLException if a database access error occurs,the result set concurrency is <code>CONCUR_READ_ONLY</code> or this method is called on a closed result set

 * @exception SQLFeatureNotSupportedException if the JDBC driver does not supportthis method

 * @since JDK 1.2

 */

public void updateInt(int columnIndex,int x) throws SQLException {

  startUpdate(columnIndex);

  preparedStatement.setIntParameter(columnIndex,x);

}

Location: JDBCResultSet.java

Content: 

/** 

 * <!-- start generic documentation --> Updates the designated column with an <code>int</code> value. The updater methods are used to update column values in the current row or the insert row.  The updater methods do not update the underlying database; instead the <code>updateRow</code> or <code>insertRow</code> methods are called to update the database. <!-- end generic documentation --> <!-- start release-specific documentation --> <div class="ReleaseSpecificDocumentation"> <h3>HSQLDB-Specific Information:</h3> <p> HSQLDB supports this feature. <p> </div> <!-- end release-specific documentation -->

 * @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column

 * @param x the new column value

 * @exception SQLException if a database access error occurs,the result set concurrency is <code>CONCUR_READ_ONLY</code> or this method is called on a closed result set

 * @exception SQLFeatureNotSupportedException if the JDBC driver does not supportthis method

 * @since JDK 1.2

 */

public void updateInt(String columnLabel,int x) throws SQLException {

  updateInt(findColumn(columnLabel),x);

}

Location: JDBCResultSet.java

Content: 

/** 

 * <!-- start generic documentation --> Updates the designated column with a <code>long</code> value. The updater methods are used to update column values in the current row or the insert row.  The updater methods do not update the underlying database; instead the <code>updateRow</code> or <code>insertRow</code> methods are called to update the database. <!-- end generic documentation --> <!-- start release-specific documentation --> <div class="ReleaseSpecificDocumentation"> <h3>HSQLDB-Specific Information:</h3> <p> HSQLDB supports this feature. <p> </div> <!-- end release-specific documentation -->

 * @param columnIndex the first column is 1, the second is 2, ...

 * @param x the new column value

 * @exception SQLException if a database access error occurs,the result set concurrency is <code>CONCUR_READ_ONLY</code> or this method is called on a closed result set

 * @exception SQLFeatureNotSupportedException if the JDBC driver does not supportthis method

 * @since JDK 1.2

 */

public void updateLong(int columnIndex,long x) throws SQLException {

  startUpdate(columnIndex);

  preparedStatement.setLongParameter(columnIndex,x);

}

Location: JDBCResultSet.java

Content: 

/** 

 * <!-- start generic documentation --> Updates the designated column with a <code>long</code> value. The updater methods are used to update column values in the current row or the insert row.  The updater methods do not update the underlying database; instead the <code>updateRow</code> or <code>insertRow</code> methods are called to update the database. <!-- end generic documentation --> <!-- start release-specific documentation --> <div class="ReleaseSpecificDocumentation"> <h3>HSQLDB-Specific Information:</h3> <p> HSQLDB supports this feature. <p> </div> <!-- end release-specific documentation -->

 * @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column

 * @param x the new column value

 * @exception SQLException if a database access error occurs,the result set concurrency is <code>CONCUR_READ_ONLY</code> or this method is called on a closed result set

 * @exception SQLFeatureNotSupportedException if the JDBC driver does not supportthis method

 * @since JDK 1.2

 */

public void updateLong(String columnLabel,long x) throws SQLException {

  updateLong(findColumn(columnLabel),x);

}

Location: JDBCResultSet.java

Content: 

/** 

 * Updates the designated column with a character stream value. The data will be read from the stream as needed until end-of-stream is reached.  The driver does the necessary conversion from Java character format to the national character set in the database. It is intended for use when updating  <code>NCHAR</code>,<code>NVARCHAR</code> and <code>LONGNVARCHAR</code> columns. <p> The updater methods are used to update column values in the current row or the insert row.  The updater methods do not update the underlying database; instead the <code>updateRow</code> or <code>insertRow</code> methods are called to update the database. <P><B>Note:</B> Consult your JDBC driver documentation to determine if it might be more efficient to use a version of <code>updateNCharacterStream</code> which takes a length parameter.

 * @param columnIndex the first column is 1, the second is 2, ...

 * @param reader the new column value

 * @exception SQLException if the columnIndex is not valid;if a database access error occurs; the result set concurrency is <code>CONCUR_READ_ONLY</code> or this method is called on a closed result set

 * @exception SQLFeatureNotSupportedException if the JDBC driver does not supportthis method

 * @since 1.6

 */

public void updateNCharacterStream(int columnIndex,java.io.Reader reader) throws SQLException {

  startUpdate(columnIndex);

  preparedStatement.setCharacterStream(columnIndex,reader);

}

Location: JDBCResultSet.java

Content: 

/** 

 * Updates the designated column with a character stream value, which will have the specified number of bytes.   The driver does the necessary conversion from Java character format to the national character set in the database. It is intended for use when updating  <code>NCHAR</code>,<code>NVARCHAR</code> and <code>LONGNVARCHAR</code> columns. The updater methods are used to update column values in the current row or the insert row.  The updater methods do not update the underlying database; instead the <code>updateRow</code> or <code>insertRow</code> methods are called to update the database.

 * @param columnIndex the first column is 1, the second is 2, ...

 * @param x the new column value

 * @param length the length of the stream

 * @exception SQLException if a database access error occurs,the result set concurrency is <code>CONCUR_READ_ONLY</code> or this method is called on a closed result set

 * @exception SQLFeatureNotSupportedException if the JDBC driver does not supportthis method

 * @since JDK 1.6, HSQLDB 2.0

 */

public void updateNCharacterStream(int columnIndex,java.io.Reader x,long length) throws SQLException {

  startUpdate(columnIndex);

  preparedStatement.setCharacterStream(columnIndex,x,length);

}

Location: JDBCResultSet.java

Content: 

/** 

 * Updates the designated column with a character stream value. The data will be read from the stream as needed until end-of-stream is reached.  The driver does the necessary conversion from Java character format to the national character set in the database. It is intended for use when updating  <code>NCHAR</code>,<code>NVARCHAR</code> and <code>LONGNVARCHAR</code> columns. <p> The updater methods are used to update column values in the current row or the insert row.  The updater methods do not update the underlying database; instead the <code>updateRow</code> or <code>insertRow</code> methods are called to update the database. <P><B>Note:</B> Consult your JDBC driver documentation to determine if it might be more efficient to use a version of <code>updateNCharacterStream</code> which takes a length parameter.

 * @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column

 * @param reader the <code>java.io.Reader</code> object containingthe new column value

 * @exception SQLException if the columnLabel is not valid;if a database access error occurs; the result set concurrency is <code>CONCUR_READ_ONLY</code> or this method is called on a closed result set

 * @exception SQLFeatureNotSupportedException if the JDBC driver does not supportthis method

 * @since 1.6

 */

public void updateNCharacterStream(String columnLabel,java.io.Reader reader) throws SQLException {

  int columnIndex=findColumn(columnLabel);

  startUpdate(columnIndex);

  preparedStatement.setCharacterStream(columnIndex,reader);

}

Location: JDBCResultSet.java

Content: 

/** 

 * Updates the designated column with a character stream value, which will have the specified number of bytes.  The driver does the necessary conversion from Java character format to the national character set in the database. It is intended for use when updating  <code>NCHAR</code>,<code>NVARCHAR</code> and <code>LONGNVARCHAR</code> columns. The updater methods are used to update column values in the current row or the insert row.  The updater methods do not update the underlying database; instead the <code>updateRow</code> or <code>insertRow</code> methods are called to update the database.

 * @param columnLabel the label for the column specified with the SQL ASclause.  If the SQL AS clause was not specified, then the label is the name of the column

 * @param reader the <code>java.io.Reader</code> object containingthe new column value

 * @param length the length of the stream

 * @exception SQLException if a database access error occurs,the result set concurrency is <code>CONCUR_READ_ONLY</code> or this method is called on a closed result set

 * @exception SQLFeatureNotSupportedException if the JDBC driver does not supportthis method

 * @since JDK 1.6, HSQLDB 2.0

 */

public void updateNCharacterStream(String columnLabel,java.io.Reader reader,long length) throws SQLException {

  updateCharacterStream(columnLabel,reader,length);

}

Location: JDBCResultSet.java

Content: 

/** 

 * Updates the designated column with a <code>java.sql.NClob</code> value. The updater methods are used to update column values in the current row or the insert row.  The updater methods do not update the underlying database; instead the <code>updateRow</code> or <code>insertRow</code> methods are called to update the database.

 * @param columnIndex the first column is 1, the second 2, ...

 * @param nClob the value for the column to be updated

 * @throws SQLException if the driver does not support nationalcharacter sets;  if the driver can detect that a data conversion error could occur; this method is called on a closed result set, if a database access error occurs or the result set concurrency is <code>CONCUR_READ_ONLY</code>

 * @exception SQLFeatureNotSupportedException if the JDBC driver does not supportthis method

 * @since JDK 1.6, HSQLDB 2.0

 */

public void updateNClob(int columnIndex,NClob nClob) throws SQLException {

  updateClob(columnIndex,nClob);

}

Location: JDBCResultSet.java

Content: 

/** 

 * Updates the designated column using the given <code>Reader</code> The data will be read from the stream as needed until end-of-stream is reached.  The JDBC driver will do any necessary conversion from UNICODE to the database char format. <p> The updater methods are used to update column values in the current row or the insert row.  The updater methods do not update the underlying database; instead the <code>updateRow</code> or <code>insertRow</code> methods are called to update the database. <P><B>Note:</B> Consult your JDBC driver documentation to determine if it might be more efficient to use a version of <code>updateNClob</code> which takes a length parameter.

 * @param columnIndex the first column is 1, the second 2, ...

 * @param reader An object that contains the data to set the parameter value to.

 * @throws SQLException if the columnIndex is not valid;if the driver does not support national character sets;  if the driver can detect that a data conversion error could occur; this method is called on a closed result set, if a database access error occurs or the result set concurrency is <code>CONCUR_READ_ONLY</code>

 * @exception SQLFeatureNotSupportedException if the JDBC driver does not supportthis method

 * @since 1.6

 */

public void updateNClob(int columnIndex,Reader reader) throws SQLException {

  startUpdate(columnIndex);

  preparedStatement.setClob(columnIndex,reader);

}

Location: JDBCResultSet.java

Content: 

/** 

 * Updates the designated column using the given <code>Reader</code> object, which is the given number of characters long. When a very large UNICODE value is input to a <code>LONGVARCHAR</code> parameter, it may be more practical to send it via a <code>java.io.Reader</code> object. The data will be read from the stream as needed until end-of-file is reached.  The JDBC driver will do any necessary conversion from UNICODE to the database char format. <P><B>Note:</B> This stream object can either be a standard Java stream object or your own subclass that implements the standard interface. <p> The updater methods are used to update column values in the current row or the insert row.  The updater methods do not update the underlying database; instead the <code>updateRow</code> or <code>insertRow</code> methods are called to update the database.

 * @param columnIndex the first column is 1, the second 2, ...

 * @param reader An object that contains the data to set the parameter value to.

 * @param length the number of characters in the parameter data.

 * @throws SQLException if the driver does not support nationalcharacter sets;  if the driver can detect that a data conversion error could occur; this method is called on a closed result set, if a database access error occurs or the result set concurrency is <code>CONCUR_READ_ONLY</code>

 * @exception SQLFeatureNotSupportedException if the JDBC driver does not supportthis method

 * @since JDK 1.6, HSQLDB 2.0

 */

public void updateNClob(int columnIndex,Reader reader,long length) throws SQLException {

  startUpdate(columnIndex);

  preparedStatement.setClob(columnIndex,reader,length);

}

Location: JDBCResultSet.java

Content: 

/** 

 * Updates the designated column with a <code>java.sql.NClob</code> value. The updater methods are used to update column values in the current row or the insert row.  The updater methods do not update the underlying database; instead the <code>updateRow</code> or <code>insertRow</code> methods are called to update the database.

 * @param columnLabel the label for the column specified with the SQL ASclause.  If the SQL AS clause was not specified, then the label is the name of the column

 * @param nClob the value for the column to be updated

 * @throws SQLException if the driver does not support nationalcharacter sets;  if the driver can detect that a data conversion error could occur; this method is called on a closed result set; if a database access error occurs or the result set concurrency is <code>CONCUR_READ_ONLY</code>

 * @exception SQLFeatureNotSupportedException if the JDBC driver does not supportthis method

 * @since JDK 1.6, HSQLDB 2.0

 */

public void updateNClob(String columnLabel,NClob nClob) throws SQLException {

  updateClob(columnLabel,nClob);

}

Location: JDBCResultSet.java

Content: 

/** 

 * Updates the designated column using the given <code>Reader</code> object. The data will be read from the stream as needed until end-of-stream is reached.  The JDBC driver will do any necessary conversion from UNICODE to the database char format. <p> The updater methods are used to update column values in the current row or the insert row.  The updater methods do not update the underlying database; instead the <code>updateRow</code> or <code>insertRow</code> methods are called to update the database. <P><B>Note:</B> Consult your JDBC driver documentation to determine if it might be more efficient to use a version of <code>updateNClob</code> which takes a length parameter.

 * @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column

 * @param reader An object that contains the data to set the parameter value to.

 * @throws SQLException if the columnLabel is not valid; if the driver does not support nationalcharacter sets;  if the driver can detect that a data conversion error could occur; this method is called on a closed result set; if a database access error occurs or the result set concurrency is <code>CONCUR_READ_ONLY</code>

 * @exception SQLFeatureNotSupportedException if the JDBC driver does not supportthis method

 * @since 1.6

 */

public void updateNClob(String columnLabel,Reader reader) throws SQLException {

  int columnIndex=findColumn(columnLabel);

  startUpdate(columnIndex);

  preparedStatement.setClob(columnIndex,reader);

}

Location: JDBCResultSet.java

Content: 

/** 

 * Updates the designated column using the given <code>Reader</code> object, which is the given number of characters long. When a very large UNICODE value is input to a <code>LONGVARCHAR</code> parameter, it may be more practical to send it via a <code>java.io.Reader</code> object. The data will be read from the stream as needed until end-of-file is reached.  The JDBC driver will do any necessary conversion from UNICODE to the database char format. <P><B>Note:</B> This stream object can either be a standard Java stream object or your own subclass that implements the standard interface. <p> The updater methods are used to update column values in the current row or the insert row.  The updater methods do not update the underlying database; instead the <code>updateRow</code> or <code>insertRow</code> methods are called to update the database.

 * @param columnLabel the label for the column specified with the SQL ASclause.  If the SQL AS clause was not specified, then the label is the name of the column

 * @param reader An object that contains the data to set the parameter value to.

 * @param length the number of characters in the parameter data.

 * @throws SQLException if the driver does not support nationalcharacter sets;  if the driver can detect that a data conversion error could occur; this method is called on a closed result set; if a database access error occurs or the result set concurrency is <code>CONCUR_READ_ONLY</code>

 * @exception SQLFeatureNotSupportedException if the JDBC driver does not supportthis method

 * @since JDK 1.6, HSQLDB 2.0

 */

public void updateNClob(String columnLabel,Reader reader,long length) throws SQLException {

  int columnIndex=findColumn(columnLabel);

  startUpdate(columnIndex);

  preparedStatement.setClob(columnIndex,reader,length);

}

Location: JDBCResultSet.java

Content: 

/** 

 * Updates the designated column with a <code>String</code> value. It is intended for use when updating <code>NCHAR</code>,<code>NVARCHAR</code> and <code>LONGNVARCHAR</code> columns. The updater methods are used to update column values in the current row or the insert row.  The updater methods do not update the underlying database; instead the <code>updateRow</code> or <code>insertRow</code> methods are called to update the database.

 * @param columnIndex the first column is 1, the second 2, ...

 * @param nString the value for the column to be updated

 * @throws SQLException if the driver does not support nationalcharacter sets;  if the driver can detect that a data conversion error could occur; this method is called on a closed result set, the result set concurrency is <code>CONCUR_READ_ONLY</code> or if a database access error occurs

 * @exception SQLFeatureNotSupportedException if the JDBC driver does not supportthis method

 * @since JDK 1.6, HSQLDB 2.0

 */

public void updateNString(int columnIndex,String nString) throws SQLException {

  updateString(columnIndex,nString);

}

Location: JDBCResultSet.java

Content: 

/** 

 * Updates the designated column with a <code>String</code> value. It is intended for use when updating <code>NCHAR</code>,<code>NVARCHAR</code> and <code>LONGNVARCHAR</code> columns. The updater methods are used to update column values in the current row or the insert row.  The updater methods do not update the underlying database; instead the <code>updateRow</code> or <code>insertRow</code> methods are called to update the database.

 * @param columnLabel the label for the column specified with the SQL ASclause.  If the SQL AS clause was not specified, then the label is the name of the column

 * @param nString the value for the column to be updated

 * @throws SQLException if the driver does not support nationalcharacter sets;  if the driver can detect that a data conversion error could occur; this method is called on a closed result set; the result set concurrency is <CODE>CONCUR_READ_ONLY</code> or if a database access error occurs

 * @exception SQLFeatureNotSupportedException if the JDBC driver does not supportthis method

 * @since JDK 1.6, HSQLDB 2.0

 */

public void updateNString(String columnLabel,String nString) throws SQLException {

  updateString(columnLabel,nString);

}

Location: JDBCResultSet.java

Content: 

/** 

 * <!-- start generic documentation --> (JDBC4 clarification:) Updates the designated column with a <code>null</code> value. The updater methods are used to update column values in the current row or the insert row.  The updater methods do not update the underlying database; instead the <code>updateRow</code> or <code>insertRow</code> methods are called to update the database. <!-- end generic documentation --> <!-- start release-specific documentation --> <div class="ReleaseSpecificDocumentation"> <h3>HSQLDB-Specific Information:</h3> <p> HSQLDB supports this feature. <p> </div> <!-- end release-specific documentation -->

 * @param columnIndex the first column is 1, the second is 2, ...

 * @exception SQLException if a database access error occurs,the result set concurrency is <code>CONCUR_READ_ONLY</code> or this method is called on a closed result set

 * @exception SQLFeatureNotSupportedException if the JDBC driver does not supportthis method

 * @since JDK 1.2

 */

public void updateNull(int columnIndex) throws SQLException {

  startUpdate(columnIndex);

  preparedStatement.setParameter(columnIndex,null);

}

Location: JDBCResultSet.java

Content: 

/** 

 * <!-- start generic documentation --> Updates the designated column with a <code>null</code> value. The updater methods are used to update column values in the current row or the insert row.  The updater methods do not update the underlying database; instead the <code>updateRow</code> or <code>insertRow</code> methods are called to update the database. <!-- end generic documentation --> <!-- start release-specific documentation --> <div class="ReleaseSpecificDocumentation"> <h3>HSQLDB-Specific Information:</h3> <p> HSQLDB supports this feature. <p> </div> <!-- end release-specific documentation -->

 * @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column

 * @exception SQLException if a database access error occurs,the result set concurrency is <code>CONCUR_READ_ONLY</code> or this method is called on a closed result set

 * @exception SQLFeatureNotSupportedException if the JDBC driver does not supportthis method

 * @since JDK 1.2

 */

public void updateNull(String columnLabel) throws SQLException {

  updateNull(findColumn(columnLabel));

}

Location: JDBCResultSet.java

Content: 

/** 

 * <!-- start generic documentation --> Updates the designated column with an <code>Object</code> value. The updater methods are used to update column values in the current row or the insert row.  The updater methods do not update the underlying database; instead the <code>updateRow</code> or <code>insertRow</code> methods are called to update the database. <!-- end generic documentation --> <!-- start release-specific documentation --> <div class="ReleaseSpecificDocumentation"> <h3>HSQLDB-Specific Information:</h3> <p> HSQLDB supports this feature. <p> </div> <!-- end release-specific documentation -->

 * @param columnIndex the first column is 1, the second is 2, ...

 * @param x the new column value

 * @exception SQLException if a database access error occurs,the result set concurrency is <code>CONCUR_READ_ONLY</code> or this method is called on a closed result set

 * @exception SQLFeatureNotSupportedException if the JDBC driver does not supportthis method

 * @since JDK 1.2

 */

public void updateObject(int columnIndex,Object x) throws SQLException {

  startUpdate(columnIndex);

  preparedStatement.setParameter(columnIndex,x);

}

Location: JDBCResultSet.java

Content: 

/** 

 * <!-- start generic documentation --> Updates the designated column with an <code>Object</code> value. The updater methods are used to update column values in the current row or the insert row.  The updater methods do not update the underlying database; instead the <code>updateRow</code> or <code>insertRow</code> methods are called to update the database. <p> (JDBC clarification:) If the second argument is an <code>InputStream</code> then the stream must contain the number of bytes specified by scaleOrLength.  If the second argument is a <code>Reader</code> then the reader must contain the number of characters specified by scaleOrLength. If these conditions are not true the driver will generate a <code>SQLException</code> when the statement is executed. <!-- end generic documentation --> <!-- start release-specific documentation --> <div class="ReleaseSpecificDocumentation"> <h3>HSQLDB-Specific Information:</h3> <p> HSQLDB supports this feature. <p> </div> <!-- end release-specific documentation -->

 * @param columnIndex the first column is 1, the second is 2, ...

 * @param x the new column value

 * @param scaleOrLength for an object of <code>java.math.BigDecimal</code> ,this is the number of digits after the decimal point. For Java Object types <code>InputStream</code> and <code>Reader</code>, this is the length of the data in the stream or reader.  For all other types, this value will be ignored.

 * @exception SQLException if a database access error occurs,the result set concurrency is <code>CONCUR_READ_ONLY</code> or this method is called on a closed result set

 * @exception SQLFeatureNotSupportedException if the JDBC driver does not supportthis method

 * @since JDK 1.2

 */

public void updateObject(int columnIndex,Object x,int scaleOrLength) throws SQLException {

  startUpdate(columnIndex);

  preparedStatement.setObject(columnIndex,x,0,scaleOrLength);

}

Location: JDBCResultSet.java

Content: 

/** 

 * <!-- start generic documentation --> Updates the designated column with an <code>Object</code> value. The updater methods are used to update column values in the current row or the insert row.  The updater methods do not update the underlying database; instead the <code>updateRow</code> or <code>insertRow</code> methods are called to update the database. <!-- end generic documentation --> <!-- start release-specific documentation --> <div class="ReleaseSpecificDocumentation"> <h3>HSQLDB-Specific Information:</h3> <p> HSQLDB supports this feature. <p> </div> <!-- end release-specific documentation -->

 * @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column

 * @param x the new column value

 * @exception SQLException if a database access error occurs,the result set concurrency is <code>CONCUR_READ_ONLY</code> or this method is called on a closed result set

 * @exception SQLFeatureNotSupportedException if the JDBC driver does not supportthis method

 * @since JDK 1.2

 */

public void updateObject(String columnLabel,Object x) throws SQLException {

  updateObject(findColumn(columnLabel),x);

}

Location: JDBCResultSet.java

Content: 

/** 

 * <!-- start generic documentation --> Updates the designated column with an <code>Object</code> value. The updater methods are used to update column values in the current row or the insert row.  The updater methods do not update the underlying database; instead the <code>updateRow</code> or <code>insertRow</code> methods are called to update the database. <p> (JDBC4 Clarification:) If the second argument is an <code>InputStream</code> then the stream must contain the number of bytes specified by scaleOrLength.  If the second argument is a <code>Reader</code> then the reader must contain the number of characters specified by scaleOrLength. If these conditions are not true the driver will generate a <code>SQLException</code> when the statement is executed. <!-- end generic documentation --> <!-- start release-specific documentation --> <div class="ReleaseSpecificDocumentation"> <h3>HSQLDB-Specific Information:</h3> <p> HSQLDB supports this feature. <p> </div> <!-- end release-specific documentation -->

 * @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column

 * @param x the new column value

 * @param scaleOrLength for an object of <code>java.math.BigDecimal</code> ,this is the number of digits after the decimal point. For Java Object types <code>InputStream</code> and <code>Reader</code>, this is the length of the data in the stream or reader.  For all other types, this value will be ignored.

 * @exception SQLException if a database access error occurs,the result set concurrency is <code>CONCUR_READ_ONLY</code> or this method is called on a closed result set

 * @exception SQLFeatureNotSupportedException if the JDBC driver does not supportthis method

 * @since JDK 1.2

 */

public void updateObject(String columnLabel,Object x,int scaleOrLength) throws SQLException {

  updateObject(findColumn(columnLabel),x,scaleOrLength);

}

Location: JDBCResultSet.java

Content: 

/** 

 * <!-- start generic documentation --> Updates the designated column with a <code>java.sql.Ref</code> value. The updater methods are used to update column values in the current row or the insert row.  The updater methods do not update the underlying database; instead the <code>updateRow</code> or <code>insertRow</code> methods are called to update the database. <!-- end generic documentation --> <!-- start release-specific documentation --> <div class="ReleaseSpecificDocumentation"> <h3>HSQLDB-Specific Information:</h3> <p> HSQLDB does not support reference types; this method always throws an <code>SQLException</code> stating that the operation is not supported. </div> <!-- end release-specific documentation -->

 * @param columnIndex the first column is 1, the second is 2, ...

 * @param x the new column value

 * @exception SQLException if a database access error occurs,the result set concurrency is <code>CONCUR_READ_ONLY</code> or this method is called on a closed result set

 * @exception SQLFeatureNotSupportedException if the JDBC driver does not supportthis method

 * @since JDK 1.4, HSQLDB 1.7.0

 */

public void updateRef(int columnIndex,java.sql.Ref x) throws SQLException {

  throw JDBCUtil.notSupported();

}

Location: JDBCResultSet.java

Content: 

/** 

 * <!-- start generic documentation --> Updates the designated column with a <code>java.sql.Ref</code> value. The updater methods are used to update column values in the current row or the insert row.  The updater methods do not update the underlying database; instead the <code>updateRow</code> or <code>insertRow</code> methods are called to update the database. <!-- end generic documentation --> <!-- start release-specific documentation --> <div class="ReleaseSpecificDocumentation"> <h3>HSQLDB-Specific Information:</h3> <p> HSQLDB does not support reference types; this method always throws an <code>SQLException</code> stating that the operation is not supported. </div> <!-- end release-specific documentation -->

 * @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column

 * @param x the new column value

 * @exception SQLException if a database access error occurs,the result set concurrency is <code>CONCUR_READ_ONLY</code> or this method is called on a closed result set

 * @exception SQLFeatureNotSupportedException if the JDBC driver does not supportthis method

 * @since JDK 1.4, HSQLDB 1.7.0

 */

public void updateRef(String columnLabel,java.sql.Ref x) throws SQLException {

  throw JDBCUtil.notSupported();

}

Location: JDBCResultSet.java

Content: 

/** 

 * <!-- start generic documentation --> Updates the underlying database with the new contents of the current row of this <code>ResultSet</code> object. This method cannot be called when the cursor is on the insert row. <!-- end generic documentation --> <!-- start release-specific documentation --> <div class="ReleaseSpecificDocumentation"> <h3>HSQLDB-Specific Information:</h3> <p> HSQLDB supports this feature. <p> After updating any values in the current row, it is not possible to move the cursor position without calling this method, or alternatively calling cancelRowUpdates() to abandon the row update. </div> <!-- end release-specific documentation -->

 * @exception SQLException if a database access error occurs;the result set concurrency is <code>CONCUR_READ_ONLY</code>; this method is called on a closed result set or if this method is called when the cursor is on the insert row

 * @exception SQLFeatureNotSupportedException if the JDBC driver does not supportthis method

 * @since JDK 1.2

 */

public void updateRow() throws SQLException {

  hongshuai();

  preparedStatement.parameterValues[columnCount]=getCurrent()[columnCount];

  for (int i=0; i < columnCount; i++) {

    boolean set=preparedStatement.parameterSet[i] != null;

    preparedStatement.resultOut.metaData.columnTypes[i]=set ? preparedStatement.parameterTypes[i] : Type.SQL_ALL_TYPES;

  }

  preparedStatement.resultOut.setActionType(ResultConstants.UPDATE_CURSOR);

  preparedStatement.fetchResult();

  preparedStatement.clearParameters();

  rootWarning=preparedStatement.getWarnings();

  preparedStatement.clearWarnings();

  isRowUpdated=false;

}

Location: JDBCResultSet.java

Content: 

/** 

 * Updates the designated column with a <code>RowId</code> value. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the underlying database; instead the <code>updateRow</code> or <code>insertRow</code> methods are called to update the database. <!-- end generic documentation --> <!-- start release-specific documentation --> <div class="ReleaseSpecificDocumentation"> <h3>HSQLDB-Specific Information:</h3> <p> HSQLDB does not support the RowId type; this method always throws an <code>SQLException</code> stating that the operation is not supported. </div> <!-- end release-specific documentation -->

 * @param columnIndex the first column is 1, the second 2, ...

 * @param x the column value

 * @exception SQLException if a database access error occurs,the result set concurrency is <code>CONCUR_READ_ONLY</code> or this method is called on a closed result set

 * @exception SQLFeatureNotSupportedException if the JDBC driver does not supportthis method

 * @since JDK 1.6, HSQLDB 2.0

 */

public void updateRowId(int columnIndex,RowId x) throws SQLException {

  throw JDBCUtil.notSupported();

}

Location: JDBCResultSet.java

Content: 

/** 

 * Updates the designated column with a <code>RowId</code> value. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the underlying database; instead the <code>updateRow</code> or <code>insertRow</code> methods are called to update the database. <!-- end generic documentation --> <!-- start release-specific documentation --> <div class="ReleaseSpecificDocumentation"> <h3>HSQLDB-Specific Information:</h3> <p> HSQLDB does not support the RowId type; this method always throws an <code>SQLException</code> stating that the operation is not supported. </div> <!-- end release-specific documentation -->

 * @param columnLabel the label for the column specified with the SQL ASclause.  If the SQL AS clause was not specified, then the label is the name of the column

 * @param x the column value

 * @exception SQLException if a database access error occurs,the result set concurrency is <code>CONCUR_READ_ONLY</code> or this method is called on a closed result set

 * @exception SQLFeatureNotSupportedException if the JDBC driver does not supportthis method

 * @since JDK 1.6, HSQLDB 2.0

 */

public void updateRowId(String columnLabel,RowId x) throws SQLException {

  throw JDBCUtil.notSupported();

}

Location: JDBCResultSet.java

Content: 

/** 

 * <!-- start generic documentation --> Updates the designated column with a <code>short</code> value. The updater methods are used to update column values in the current row or the insert row.  The updater methods do not update the underlying database; instead the <code>updateRow</code> or <code>insertRow</code> methods are called to update the database. <!-- end generic documentation --> <!-- start release-specific documentation --> <div class="ReleaseSpecificDocumentation"> <h3>HSQLDB-Specific Information:</h3> <p> HSQLDB supports this feature. <p> </div> <!-- end release-specific documentation -->

 * @param columnIndex the first column is 1, the second is 2, ...

 * @param x the new column value

 * @exception SQLException if a database access error occurs,the result set concurrency is <code>CONCUR_READ_ONLY</code> or this method is called on a closed result set

 * @exception SQLFeatureNotSupportedException if the JDBC driver does not supportthis method

 * @since JDK 1.2

 */

public void updateShort(int columnIndex,short x) throws SQLException {

  startUpdate(columnIndex);

  preparedStatement.setIntParameter(columnIndex,x);

}

Location: JDBCResultSet.java

Content: 

/** 

 * <!-- start generic documentation --> Updates the designated column with a <code>short</code> value. The updater methods are used to update column values in the current row or the insert row.  The updater methods do not update the underlying database; instead the <code>updateRow</code> or <code>insertRow</code> methods are called to update the database. <!-- end generic documentation --> <!-- start release-specific documentation --> <div class="ReleaseSpecificDocumentation"> <h3>HSQLDB-Specific Information:</h3> <p> HSQLDB supports this feature. <p> </div> <!-- end release-specific documentation -->

 * @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column

 * @param x the new column value

 * @exception SQLException if a database access error occurs,the result set concurrency is <code>CONCUR_READ_ONLY</code> or this method is called on a closed result set

 * @exception SQLFeatureNotSupportedException if the JDBC driver does not supportthis method

 * @since JDK 1.2

 */

public void updateShort(String columnLabel,short x) throws SQLException {

  updateShort(findColumn(columnLabel),x);

}

Location: JDBCResultSet.java

Content: 

/** 

 * Updates the designated column with a <code>java.sql.SQLXML</code> value. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the underlying database; instead the <code>updateRow</code> or <code>insertRow</code> methods are called to update the database. <p>

 * @param columnIndex the first column is 1, the second 2, ...

 * @param xmlObject the value for the column to be updated

 * @throws SQLException if a database access error occurs, this methodis called on a closed result set, the <code>java.xml.transform.Result</code>, <code>Writer</code> or <code>OutputStream</code> has not been closed for the <code>SQLXML</code> object, if there is an error processing the XML value or the result set concurrency is <code>CONCUR_READ_ONLY</code>.  The <code>getCause</code> method of the exception may provide a more detailed exception, for example, if the stream does not contain valid XML.

 * @exception SQLFeatureNotSupportedException if the JDBC driver does not supportthis method

 * @since JDK 1.6, HSQLDB 2.0

 */

public void updateSQLXML(int columnIndex,SQLXML xmlObject) throws SQLException {

  startUpdate(columnIndex);

  preparedStatement.setSQLXML(columnIndex,xmlObject);

}

Location: JDBCResultSet.java

Content: 

/** 

 * Updates the designated column with a <code>java.sql.SQLXML</code> value. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the underlying database; instead the <code>updateRow</code> or <code>insertRow</code> methods are called to update the database. <p>

 * @param columnLabel the label for the column specified with the SQL ASclause.  If the SQL AS clause was not specified, then the label is the name of the column

 * @param xmlObject the column value

 * @throws SQLException if a database access error occurs, this methodis called on a closed result set, the <code>java.xml.transform.Result</code>, <code>Writer</code> or <code>OutputStream</code> has not been closed for the <code>SQLXML</code> object, if there is an error processing the XML value or the result set concurrency is <code>CONCUR_READ_ONLY</code>.  The <code>getCause</code> method of the exception may provide a more detailed exception, for example, if the stream does not contain valid XML.

 * @exception SQLFeatureNotSupportedException if the JDBC driver does not supportthis method

 * @since JDK 1.6, HSQLDB 2.0

 */

public void updateSQLXML(String columnLabel,SQLXML xmlObject) throws SQLException {

  updateSQLXML(findColumn(columnLabel),xmlObject);

}

Location: JDBCResultSet.java

Content: 

/** 

 * <!-- start generic documentation --> Updates the designated column with a <code>String</code> value. The updater methods are used to update column values in the current row or the insert row.  The updater methods do not update the underlying database; instead the <code>updateRow</code> or <code>insertRow</code> methods are called to update the database. <!-- end generic documentation --> <!-- start release-specific documentation --> <div class="ReleaseSpecificDocumentation"> <h3>HSQLDB-Specific Information:</h3> <p> HSQLDB supports this feature. <p> </div> <!-- end release-specific documentation -->

 * @param columnIndex the first column is 1, the second is 2, ...

 * @param x the new column value

 * @exception SQLException if a database access error occurs,the result set concurrency is <code>CONCUR_READ_ONLY</code> or this method is called on a closed result set

 * @exception SQLFeatureNotSupportedException if the JDBC driver does not supportthis method

 * @since JDK 1.2

 */

public void updateString(int columnIndex,String x) throws SQLException {

  startUpdate(columnIndex);

  preparedStatement.setParameter(columnIndex,x);

}

Location: JDBCResultSet.java

Content: 

/** 

 * <!-- start generic documentation --> Updates the designated column with a <code>String</code> value. The updater methods are used to update column values in the current row or the insert row.  The updater methods do not update the underlying database; instead the <code>updateRow</code> or <code>insertRow</code> methods are called to update the database. <!-- end generic documentation --> <!-- start release-specific documentation --> <div class="ReleaseSpecificDocumentation"> <h3>HSQLDB-Specific Information:</h3> <p> HSQLDB supports this feature. <p> </div> <!-- end release-specific documentation -->

 * @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column

 * @param x the new column value

 * @exception SQLException if a database access error occurs,the result set concurrency is <code>CONCUR_READ_ONLY</code> or this method is called on a closed result set

 * @exception SQLFeatureNotSupportedException if the JDBC driver does not supportthis method

 * @since JDK 1.2

 */

public void updateString(String columnLabel,String x) throws SQLException {

  updateString(findColumn(columnLabel),x);

}

Location: JDBCResultSet.java

Content: 

/** 

 * <!-- start generic documentation --> Updates the designated column with a <code>java.sql.Timestamp</code> value. The updater methods are used to update column values in the current row or the insert row.  The updater methods do not update the underlying database; instead the <code>updateRow</code> or <code>insertRow</code> methods are called to update the database. <!-- end generic documentation --> <!-- start release-specific documentation --> <div class="ReleaseSpecificDocumentation"> <h3>HSQLDB-Specific Information:</h3> <p> HSQLDB supports this feature. <p> </div> <!-- end release-specific documentation -->

 * @param columnIndex the first column is 1, the second is 2, ...

 * @param x the new column value

 * @exception SQLException if a database access error occurs,the result set concurrency is <code>CONCUR_READ_ONLY</code> or this method is called on a closed result set

 * @exception SQLFeatureNotSupportedException if the JDBC driver does not supportthis method

 * @since JDK 1.2

 */

public void updateTimestamp(int columnIndex,Timestamp x) throws SQLException {

  startUpdate(columnIndex);

  preparedStatement.setParameter(columnIndex,x);

}

Location: JDBCResultSet.java

Content: 

/** 

 * <!-- start generic documentation --> Updates the designated column with a <code>java.sql.Timestamp</code> value. The updater methods are used to update column values in the current row or the insert row.  The updater methods do not update the underlying database; instead the <code>updateRow</code> or <code>insertRow</code> methods are called to update the database. <!-- end generic documentation --> <!-- start release-specific documentation --> <div class="ReleaseSpecificDocumentation"> <h3>HSQLDB-Specific Information:</h3> <p> HSQLDB supports this feature. <p> </div> <!-- end release-specific documentation -->

 * @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column

 * @param x the new column value

 * @exception SQLException if a database access error occurs,the result set concurrency is <code>CONCUR_READ_ONLY</code> or this method is called on a closed result set

 * @exception SQLFeatureNotSupportedException if the JDBC driver does not supportthis method

 * @since JDK 1.2

 */

public void updateTimestamp(String columnLabel,Timestamp x) throws SQLException {

  updateTimestamp(findColumn(columnLabel),x);

}

Location: JDBCResultSet.java

Content: 

/** 

 * <!-- start generic documentation --> Updates the designated column with a <code>java.sql.Time</code> value. The updater methods are used to update column values in the current row or the insert row.  The updater methods do not update the underlying database; instead the <code>updateRow</code> or <code>insertRow</code> methods are called to update the database. <!-- end generic documentation --> <!-- start release-specific documentation --> <div class="ReleaseSpecificDocumentation"> <h3>HSQLDB-Specific Information:</h3> <p> HSQLDB supports this feature. <p> </div> <!-- end release-specific documentation -->

 * @param columnIndex the first column is 1, the second is 2, ...

 * @param x the new column value

 * @exception SQLException if a database access error occurs,the result set concurrency is <code>CONCUR_READ_ONLY</code> or this method is called on a closed result set

 * @exception SQLFeatureNotSupportedException if the JDBC driver does not supportthis method

 * @since JDK 1.2

 */

public void updateTime(int columnIndex,Time x) throws SQLException {

  startUpdate(columnIndex);

  preparedStatement.setParameter(columnIndex,x);

}

Location: JDBCResultSet.java

Content: 

/** 

 * <!-- start generic documentation --> Updates the designated column with a <code>java.sql.Time</code> value. The updater methods are used to update column values in the current row or the insert row.  The updater methods do not update the underlying database; instead the <code>updateRow</code> or <code>insertRow</code> methods are called to update the database. <!-- end generic documentation --> <!-- start release-specific documentation --> <div class="ReleaseSpecificDocumentation"> <h3>HSQLDB-Specific Information:</h3> <p> HSQLDB supports this feature. <p> </div> <!-- end release-specific documentation -->

 * @param columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column

 * @param x the new column value

 * @exception SQLException if a database access error occurs,the result set concurrency is <code>CONCUR_READ_ONLY</code> or this method is called on a closed result set

 * @exception SQLFeatureNotSupportedException if the JDBC driver does not supportthis method

 * @since JDK 1.2

 */

public void updateTime(String columnLabel,Time x) throws SQLException {

  updateTime(findColumn(columnLabel),x);

}

Location: JDBCResultSet.java

Content: 

/** 

 * <!-- start generic documentation --> Reports whether the last column read had a value of SQL <code>NULL</code>. Note that you must first call one of the getter methods on a column to try to read its value and then call the method <code>wasNull</code> to see if the value read was SQL <code>NULL</code>. <!-- end generic documentation -->

 * @return <code>true</code> if the last column value read was SQL<code>NULL</code> and <code>false</code> otherwise

 * @exception SQLException if a database access error occurs or this method iscalled on a closed result set

 */

public boolean wasNull() throws SQLException {

  checkClosed();

  return wasNullValue;

}

