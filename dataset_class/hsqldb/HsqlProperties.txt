Location: HsqlProperties.java

Content: 

/** 

 * Adds the error code and the key to the list of errors. This list is populated during construction or addition of elements and is used outside this class to act upon the errors.

 */

protected void addError(int code,String key){

  errorCodes=(int[])ArrayUtil.resizeArray(errorCodes,errorCodes.length + 1);

  errorKeys=(String[])ArrayUtil.resizeArray(errorKeys,errorKeys.length + 1);

  errorCodes[errorCodes.length - 1]=code;

  errorKeys[errorKeys.length - 1]=key;

}

Location: HsqlProperties.java

Content: 

public void addProperties(HsqlProperties props){

  if (props == null) {

    return;

  }

  addProperties(props.stringProps);

}

Location: HsqlProperties.java

Content: 

public void addProperties(Properties props){

  if (props == null) {

    return;

  }

  Enumeration keys=props.propertyNames();

  while (keys.hasMoreElements()) {

    String key=(String)keys.nextElement();

    String value=props.getProperty(key);

    this.stringProps.put(key,value);

  }

}

Location: HsqlProperties.java

Content: 

/** 

 * Creates and populates an HsqlProperties Object from the arguments array of a Main method. Properties are in the form of "-key value" pairs. Each key is prefixed with the type argument and a dot before being inserted into the properties Object. <p> "--help" is treated as a key with no value and not inserted.

 */

public static HsqlProperties argArrayToProps(String[] arg,String type){

  HsqlProperties props=new HsqlProperties();

  for (int i=0; i < arg.length; i++) {

    String p=arg[i];

    if (p.equals("--help") || p.equals("-help")) {

      props.addError(NO_VALUE_FOR_KEY,p.substring(1));

    }

 else     if (p.startsWith("--")) {

      String value=i + 1 < arg.length ? arg[i + 1] : "";

      props.setProperty(type + "." + p.substring(2),value);

      i++;

    }

 else     if (p.charAt(0) == '-') {

      String value=i + 1 < arg.length ? arg[i + 1] : "";

      props.setProperty(type + "." + p.substring(1),value);

      i++;

    }

  }

  return props;

}

Location: HsqlProperties.java

Content: 

/** 

 * Creates and populates a new HsqlProperties Object using a string such as "key1=value1;key2=value2". <p> The string that represents the = sign above is specified as pairsep and the one that represents the semicolon is specified as delimiter, allowing any string to be used for either.<p> Leading / trailing spaces around the keys and values are discarded.<p> The string is parsed by (1) subdividing into segments by delimiter (2) subdividing each segment in two by finding the first instance of the pairsep (3) trimming each pair of segments from step 2 and inserting into the properties object.<p> Each key is prefixed with the type argument and a dot before being inserted.<p> Any key without a value is added to the list of errors.

 */

public static HsqlProperties delimitedArgPairsToProps(String s,String pairsep,String dlimiter,String type){

  HsqlProperties props=new HsqlProperties();

  int currentpair=0;

  while (true) {

    int nextpair=s.indexOf(dlimiter,currentpair);

    if (nextpair == -1) {

      nextpair=s.length();

    }

    int valindex=s.substring(0,nextpair).indexOf(pairsep,currentpair);

    if (valindex == -1) {

      props.addError(NO_VALUE_FOR_KEY,s.substring(currentpair,nextpair).trim());

    }

 else {

      String key=s.substring(currentpair,valindex).trim();

      String value=s.substring(valindex + pairsep.length(),nextpair).trim();

      if (type != null) {

        key=type + "." + key;

      }

      props.setProperty(key,value);

    }

    if (nextpair == s.length()) {

      break;

    }

    currentpair=nextpair + dlimiter.length();

  }

  return props;

}

Location: HsqlProperties.java

Content: 

public String[] getErrorKeys(){

  return errorKeys;

}

Location: HsqlProperties.java

Content: 

public static int getIntegerProperty(Properties props,String key,int defaultValue){

  String prop=props.getProperty(key);

  try {

    if (prop != null) {

      prop=prop.trim();

      defaultValue=Integer.parseInt(prop);

    }

  }

 catch (  NumberFormatException e) {

  }

  return defaultValue;

}

Location: HsqlProperties.java

Content: 

public int getIntegerProperty(String key,int defaultValue){

  return getIntegerProperty(stringProps,key,defaultValue);

}

Location: HsqlProperties.java

Content: 

public static Object[] getMeta(String name,int type){

  Object[] row=new Object[indexLimit];

  row[indexName]=name;

  row[indexType]=ValuePool.getInt(type);

  row[indexClass]="Long";

  row[indexDefaultValue]=Long.valueOf(0);

  return row;

}

Location: HsqlProperties.java

Content: 

public static Object[] getMeta(String name,int type,boolean defaultValue){

  Object[] row=new Object[indexLimit];

  row[indexName]=name;

  row[indexType]=ValuePool.getInt(type);

  row[indexClass]="Boolean";

  row[indexDefaultValue]=defaultValue ? Boolean.TRUE : Boolean.FALSE;

  return row;

}

Location: HsqlProperties.java

Content: 

public static Object[] getMeta(String name,int type,int defaultValue,int[] values){

  Object[] row=new Object[indexLimit];

  row[indexName]=name;

  row[indexType]=ValuePool.getInt(type);

  row[indexClass]="Integer";

  row[indexDefaultValue]=ValuePool.getInt(defaultValue);

  row[indexValues]=values;

  return row;

}

Location: HsqlProperties.java

Content: 

public static Object[] getMeta(String name,int type,int defaultValue,int rangeLow,int rangeHigh){

  Object[] row=new Object[indexLimit];

  row[indexName]=name;

  row[indexType]=ValuePool.getInt(type);

  row[indexClass]="Integer";

  row[indexDefaultValue]=ValuePool.getInt(defaultValue);

  row[indexIsRange]=Boolean.TRUE;

  row[indexRangeLow]=ValuePool.getInt(rangeLow);

  row[indexRangeHigh]=ValuePool.getInt(rangeHigh);

  return row;

}

Location: HsqlProperties.java

Content: 

public static Object[] getMeta(String name,int type,String defaultValue){

  Object[] row=new Object[indexLimit];

  row[indexName]=name;

  row[indexType]=ValuePool.getInt(type);

  row[indexClass]="String";

  row[indexDefaultValue]=defaultValue;

  return row;

}

Location: HsqlProperties.java

Content: 

public Properties getProperties(){

  return stringProps;

}

Location: HsqlProperties.java

Content: 

public int getPropertyWithinRange(String name,int number){

  Object[] meta=(Object[])metaData.get(name);

  if (meta == null) {

    return number;

  }

  if (meta[indexClass].equals("Integer")) {

    if (Boolean.TRUE.equals(meta[indexIsRange])) {

      int low=((Integer)meta[indexRangeLow]).intValue();

      int high=((Integer)meta[indexRangeHigh]).intValue();

      if (number < low) {

        return low;

      }

 else       if (high < number) {

        return high;

      }

    }

    if (meta[indexValues] != null) {

      int[] values=(int[])meta[indexValues];

      if (ArrayUtil.find(values,number) == -1) {

        return values[0];

      }

    }

  }

  return number;

}

Location: HsqlProperties.java

Content: 

public String getProperty(String key){

  return stringProps.getProperty(key);

}

Location: HsqlProperties.java

Content: 

public String getProperty(String key,String defaultValue){

  return stringProps.getProperty(key,defaultValue);

}

Location: HsqlProperties.java

Content: 

public HsqlProperties(){

  stringProps=new Properties();

  fileName=null;

}

Location: HsqlProperties.java

Content: 

public HsqlProperties(HashMap meta,String fileName,FileAccess accessor,boolean b){

  stringProps=new Properties();

  this.fileName=fileName;

  this.fileExtension=".properties";

  fa=accessor;

  metaData=meta;

}

Location: HsqlProperties.java

Content: 

public HsqlProperties(Properties props){

  stringProps=props;

}

Location: HsqlProperties.java

Content: 

public HsqlProperties(String fileName){

  this(fileName,".properties");

}

Location: HsqlProperties.java

Content: 

public HsqlProperties(String fileName,String fileExtension){

  stringProps=new Properties();

  this.fileName=fileName;

  this.fileExtension=fileExtension;

  fa=FileUtil.getFileUtil();

}

Location: HsqlProperties.java

Content: 

public boolean isPropertyTrue(String key){

  return isPropertyTrue(key,false);

}

Location: HsqlProperties.java

Content: 

public boolean isPropertyTrue(String key,boolean defaultValue){

  String value=stringProps.getProperty(key);

  if (value == null) {

    return defaultValue;

  }

  value=value.trim();

  return value.toLowerCase().equals("true");

}

Location: HsqlProperties.java

Content: 

public boolean propertiesFileExists(){

  if (fileName == null) {

    return false;

  }

  String propFilename=fileName + fileExtension;

  return fa.isStreamElement(propFilename);

}

Location: HsqlProperties.java

Content: 

public Enumeration propertyNames(){

  return stringProps.propertyNames();

}

Location: HsqlProperties.java

Content: 

public void removeProperty(String key){

  stringProps.remove(key);

}

Location: HsqlProperties.java

Content: 

/** 

 * Saves the properties.

 */

public void save() throws Exception {

  if (fileName == null || fileName.length() == 0) {

    throw new java.io.FileNotFoundException(Error.getMessage(ErrorCode.M_HsqlProperties_load));

  }

  String filestring=fileName + fileExtension;

  save(filestring);

}

Location: HsqlProperties.java

Content: 

/** 

 * Saves the properties

 */

public void save(String fileString) throws Exception {

  fa.createParentDirs(fileString);

  fa.removeElement(fileString);

  OutputStream fos=fa.openOutputStreamElement(fileString,false);

  FileAccess.FileSync outDescriptor=fa.getFileSync(fos);

  String name=HsqlDatabaseProperties.PRODUCT_NAME + " " + HsqlDatabaseProperties.THIS_FULL_VERSION;

  stringProps.store(fos,name);

  fos.flush();

  outDescriptor.sync();

  fos.close();

  outDescriptor=null;

  fos=null;

}

Location: HsqlProperties.java

Content: 

public void setFileName(String name){

  fileName=name;

}

Location: HsqlProperties.java

Content: 

public String setPropertyIfNotExists(String key,String value){

  value=getProperty(key,value);

  return setProperty(key,value);

}

Location: HsqlProperties.java

Content: 

public String setProperty(String key,boolean value){

  return setProperty(key,String.valueOf(value));

}

Location: HsqlProperties.java

Content: 

public String setProperty(String key,int value){

  return setProperty(key,Integer.toString(value));

}

Location: HsqlProperties.java

Content: 

public String setProperty(String key,String value){

  return (String)stringProps.put(key,value);

}

Location: HsqlProperties.java

Content: 

public boolean validateProperty(String name,int number){

  Object[] meta=(Object[])metaData.get(name);

  if (meta == null) {

    return false;

  }

  if (meta[indexClass].equals("Integer")) {

    if (Boolean.TRUE.equals(meta[indexIsRange])) {

      int low=((Integer)meta[indexRangeLow]).intValue();

      int high=((Integer)meta[indexRangeHigh]).intValue();

      if (number < low || high < number) {

        return false;

      }

    }

    if (meta[indexValues] != null) {

      int[] values=(int[])meta[indexValues];

      if (ArrayUtil.find(values,number) == -1) {

        return false;

      }

    }

    return true;

  }

  return false;

}

Location: HsqlProperties.java

Content: 

/** 

 * Performs any range checking for property and return an error message

 */

public static String validateProperty(String key,String value,Object[] meta){

  if (meta[indexClass].equals("Boolean")) {

    value=value.toLowerCase();

    if (value.equals("true") || value.equals("false")) {

      return null;

    }

    return "invalid boolean value for property: " + key;

  }

  if (meta[indexClass].equals("String")) {

    return null;

  }

  if (meta[indexClass].equals("Long")) {

    return null;

  }

  if (meta[indexClass].equals("Integer")) {

    try {

      int number=Integer.parseInt(value);

      if (Boolean.TRUE.equals(meta[indexIsRange])) {

        int low=((Integer)meta[indexRangeLow]).intValue();

        int high=((Integer)meta[indexRangeHigh]).intValue();

        if (number < low || high < number) {

          return "value outside range for property: " + key;

        }

      }

      if (meta[indexValues] != null) {

        int[] values=(int[])meta[indexValues];

        if (ArrayUtil.find(values,number) == -1) {

          return "value not supported for property: " + key;

        }

      }

    }

 catch (    NumberFormatException e) {

      return "invalid integer value for property: " + key;

    }

    return null;

  }

  return null;

}

