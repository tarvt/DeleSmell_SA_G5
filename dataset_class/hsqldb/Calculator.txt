Location: Calculator.java

Content: 

/** 

 * Every integer, var name, and single-math-op-character get their own tokens here. Special processesing is needed afterwards because negative signs get separated into separate tokens.

 */

public Calculator(String s,Map<String,String> vars){

  this(s.replaceAll("([-()*/+^])"," $1 ").trim().split("\\s+"),vars);

}

Location: Calculator.java

Content: 

private long deref(String varName){

  if (!vars.containsKey(varName))   throw new IllegalStateException("Undefined variable: " + varName);

  try {

    return Long.parseLong(vars.get(varName));

  }

 catch (  NumberFormatException nfe) {

    throw new IllegalStateException("Variable's value not an integer: " + varName);

  }

}

Location: Calculator.java

Content: 

/** 

 * Does not actually do the assigment, but validates the input variable and returns the value ready to be assigned to it.

 */

public static long reassignValue(String assignee,Map<String,String> valMap,String opStr,String expr){

  long outVal=0;

  try {

    outVal=Long.parseLong(valMap.get(assignee));

  }

 catch (  NumberFormatException nfe) {

    throw new IllegalArgumentException("Can not perform a self-operation on a non-integer: " + assignee);

  }

  Long rhValObj=(expr == null || expr.trim().length() < 1) ? null : Long.valueOf(new Calculator(expr,valMap).reduce(0,false));

  if (opStr.equals("++")) {

    if (rhValObj != null)     throw new IllegalStateException("++ operator takes no right hand operand");

    return 1 + outVal;

  }

  if (opStr.equals("--")) {

    if (rhValObj != null)     throw new IllegalStateException("++ operator takes no right hand operand");

    return outVal - 1;

  }

  if (rhValObj == null)   throw new IllegalStateException("Operator requires a right hand operand: " + opStr);

  long rhVal=rhValObj.intValue();

  if (opStr.equals("+=")) {

    outVal+=rhVal;

  }

 else   if (opStr.equals("-=")) {

    outVal-=rhVal;

  }

 else   if (opStr.equals("*=")) {

    outVal*=rhVal;

  }

 else   if (opStr.equals("/=")) {

    outVal/=rhVal;

  }

 else   if (opStr.equals("%=")) {

    outVal%=rhVal;

  }

 else {

    throw new IllegalStateException("Unsupported operator: " + opStr);

  }

  return outVal;

}

Location: Calculator.java

Content: 

/** 

 * If atoms[startAtomIndex] == '(', then last visited atoms will be the next top-level (un-paired) ')'. Otherwise, all remainign atoms will be visited. Every visited atom will be removed from 'atoms'.

 * @return Value that all visited atoms reduce to.

 */

public long reduce(int startAtomIndex,boolean stopAtParenClose){

  int i;

  Long prevValue=null;

  Atom atom;

  i=startAtomIndex - 1;

  PAREN_SEEKER:   while (atoms.size() >= ++i) {

    if (atoms.size() == i) {

      if (stopAtParenClose)       throw new IllegalStateException("Unbalanced '" + MathOp.LPAREN + "'");

      break;

    }

    atom=atoms.get(i);

    if (atom.op != null) switch (atom.op) {

case RPAREN:

      if (!stopAtParenClose)       throw new IllegalStateException("Unbalanced '" + MathOp.RPAREN + "'");

    atoms.remove(i);

  break PAREN_SEEKER;

case LPAREN:

atoms.remove(i);

atoms.add(i,new Atom(reduce(i,true)));

break;

default :

}

}

int remaining=i - startAtomIndex;

if (remaining < 1) throw new IllegalStateException("Empty expression");

Atom nextAtom;

MathOp op;

i=startAtomIndex;

atom=atoms.get(i);

if (atom.op != null) throw new IllegalStateException("Expected initial value expected but got operation " + atom.op);

while (startAtomIndex + remaining > i + 1) {

if (startAtomIndex + remaining < i + 3) throw new IllegalStateException("No operator/operand pairing remaining");

nextAtom=atoms.get(i + 1);

if (nextAtom.op == null) throw new IllegalStateException("Operator expected but got value " + nextAtom.val);

op=nextAtom.op;

nextAtom=atoms.get(i + 2);

if (nextAtom.op != null) throw new IllegalStateException("Value expected but got operator " + nextAtom.op);

if (op != MathOp.POWER) {

i+=2;

atom=nextAtom;

continue;

}

remaining-=2;

atoms.remove(i + 1);

atoms.remove(i + 1);

long origVal=atom.val;

atom.val=1;

for (int j=0; j < nextAtom.val; j++) atom.val*=origVal;

}

i=startAtomIndex;

atom=atoms.get(i);

if (atom.op != null) throw new IllegalStateException("Expected initial value expected but got operation " + atom.op);

while (startAtomIndex + remaining > i + 1) {

if (startAtomIndex + remaining < i + 3) throw new IllegalStateException("No operator/operand pairing remaining");

nextAtom=atoms.get(i + 1);

if (nextAtom.op == null) throw new IllegalStateException("Operator expected but got value " + nextAtom.val);

op=nextAtom.op;

nextAtom=atoms.get(i + 2);

if (nextAtom.op != null) throw new IllegalStateException("Value expected but got operator " + nextAtom.op);

if (op != MathOp.MULTIPLY && op != MathOp.DIVIDE && op != MathOp.REM) {

i+=2;

atom=nextAtom;

continue;

}

remaining-=2;

atoms.remove(i + 1);

atoms.remove(i + 1);

if (op == MathOp.MULTIPLY) atom.val*=nextAtom.val;

 else if (op == MathOp.DIVIDE) atom.val/=nextAtom.val;

 else atom.val%=nextAtom.val;

}

atom=atoms.remove(startAtomIndex);

remaining--;

if (atom.op != null) throw new IllegalStateException("Value expected but got operation " + atom.op);

long total=atom.val;

while (remaining > 0) {

--remaining;

atom=atoms.remove(startAtomIndex);

op=atom.op;

if (op == null) throw new IllegalStateException("Operator expected but got value " + atom.val);

if (remaining <= 0) throw new IllegalStateException("No operand for operator " + op);

--remaining;

atom=atoms.remove(startAtomIndex);

if (atom.op != null) throw new IllegalStateException("Value expected but got operation " + atom.op);

switch (op) {

case ADD:

total+=atom.val;

break;

case SUBTRACT:

total-=atom.val;

break;

default :

throw new IllegalStateException("Unknown operator: " + op);

}

}

return total;

}

