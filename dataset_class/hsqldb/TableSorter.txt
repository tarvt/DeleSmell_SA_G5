Location: TableSorter.java

Content: 

private void cancelSorting(){

  sortingColumns.clear();

  sortingStatusChanged();

}

Location: TableSorter.java

Content: 

private void clearSortingState(){

  viewToModel=null;

  modelToView=null;

}

Location: TableSorter.java

Content: 

public Class getColumnClass(int column){

  return tableModel.getColumnClass(column);

}

Location: TableSorter.java

Content: 

public int getColumnCount(){

  return (tableModel == null) ? 0 : tableModel.getColumnCount();

}

Location: TableSorter.java

Content: 

public String getColumnName(int column){

  return tableModel.getColumnName(column);

}

Location: TableSorter.java

Content: 

protected Comparator getComparator(int column){

  Class columnType=tableModel.getColumnClass(column);

  Comparator comparator=(Comparator)columnComparators.get(columnType);

  if (comparator != null) {

    return comparator;

  }

  if (Comparable.class.isAssignableFrom(columnType)) {

    return COMPARABLE_COMPARATOR;

  }

  return LEXICAL_COMPARATOR;

}

Location: TableSorter.java

Content: 

private Directive getDirective(int column){

  for (int i=0; i < sortingColumns.size(); i++) {

    Directive directive=(Directive)sortingColumns.get(i);

    if (directive.column == column) {

      return directive;

    }

  }

  return EMPTY_DIRECTIVE;

}

Location: TableSorter.java

Content: 

protected Icon getHeaderRendererIcon(int column,int size){

  Directive directive=getDirective(column);

  if (directive == EMPTY_DIRECTIVE) {

    return null;

  }

  return new Arrow(directive.direction == DESCENDING,size,sortingColumns.indexOf(directive));

}

Location: TableSorter.java

Content: 

private int[] getModelToView(){

  if (modelToView == null) {

    int n=getViewToModel().length;

    modelToView=new int[n];

    for (int i=0; i < n; i++) {

      modelToView[modelIndex(i)]=i;

    }

  }

  return modelToView;

}

Location: TableSorter.java

Content: 

public int getRowCount(){

  return (tableModel == null) ? 0 : tableModel.getRowCount();

}

Location: TableSorter.java

Content: 

public int getSortingStatus(int column){

  return getDirective(column).direction;

}

Location: TableSorter.java

Content: 

public JTableHeader getTableHeader(){

  return tableHeader;

}

Location: TableSorter.java

Content: 

public TableModel getTableModel(){

  return tableModel;

}

Location: TableSorter.java

Content: 

public Object getValueAt(int row,int column){

  return tableModel.getValueAt(modelIndex(row),column);

}

Location: TableSorter.java

Content: 

private Row[] getViewToModel(){

  if (viewToModel == null) {

    int tableModelRowCount=tableModel.getRowCount();

    viewToModel=new Row[tableModelRowCount];

    for (int row=0; row < tableModelRowCount; row++) {

      viewToModel[row]=new Row(row);

    }

    if (isSorting()) {

      Arrays.sort(viewToModel);

    }

  }

  return viewToModel;

}

Location: TableSorter.java

Content: 

public boolean isCellEditable(int row,int column){

  return tableModel.isCellEditable(modelIndex(row),column);

}

Location: TableSorter.java

Content: 

public boolean isSorting(){

  return sortingColumns.size() != 0;

}

Location: TableSorter.java

Content: 

public int modelIndex(int viewIndex){

  return getViewToModel()[viewIndex].modelIndex;

}

Location: TableSorter.java

Content: 

public void setColumnComparator(Class type,Comparator comparator){

  if (comparator == null) {

    columnComparators.remove(type);

  }

 else {

    columnComparators.put(type,comparator);

  }

}

Location: TableSorter.java

Content: 

public void setSortingStatus(int column,int status){

  Directive directive=getDirective(column);

  if (directive != EMPTY_DIRECTIVE) {

    sortingColumns.remove(directive);

  }

  if (status != NOT_SORTED) {

    sortingColumns.add(new Directive(column,status));

  }

  sortingStatusChanged();

}

Location: TableSorter.java

Content: 

public void setTableHeader(JTableHeader tableHeader){

  if (this.tableHeader != null) {

    this.tableHeader.removeMouseListener(mouseListener);

    TableCellRenderer defaultRenderer=this.tableHeader.getDefaultRenderer();

    if (defaultRenderer instanceof SortableHeaderRenderer) {

      this.tableHeader.setDefaultRenderer(((SortableHeaderRenderer)defaultRenderer).tableCellRenderer);

    }

  }

  this.tableHeader=tableHeader;

  if (this.tableHeader != null) {

    this.tableHeader.addMouseListener(mouseListener);

    this.tableHeader.setDefaultRenderer(new SortableHeaderRenderer(this.tableHeader.getDefaultRenderer()));

  }

}

Location: TableSorter.java

Content: 

public void setTableModel(TableModel tableModel){

  if (this.tableModel != null) {

    this.tableModel.removeTableModelListener(tableModelListener);

  }

  this.tableModel=tableModel;

  if (this.tableModel != null) {

    this.tableModel.addTableModelListener(tableModelListener);

  }

  clearSortingState();

  fireTableStructureChanged();

}

Location: TableSorter.java

Content: 

public void setValueAt(Object aValue,int row,int column){

  tableModel.setValueAt(aValue,modelIndex(row),column);

}

Location: TableSorter.java

Content: 

private void sortingStatusChanged(){

  clearSortingState();

  fireTableDataChanged();

  if (tableHeader != null) {

    tableHeader.repaint();

  }

}

Location: TableSorter.java

Content: 

public TableSorter(){

  this.mouseListener=new MouseHandler();

  this.tableModelListener=new TableModelHandler();

}

Location: TableSorter.java

Content: 

public TableSorter(TableModel tableModel){

  this();

  setTableModel(tableModel);

}

Location: TableSorter.java

Content: 

public TableSorter(TableModel tableModel,JTableHeader tableHeader){

  this();

  setTableHeader(tableHeader);

  setTableModel(tableModel);

}

