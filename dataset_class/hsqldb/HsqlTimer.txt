Location: HsqlTimer.java

Content: 

/** 

 * Adds to the task queue a new Task object encapsulating the supplied Runnable and scheduling arguments.

 * @param first the time of the task's first execution

 * @param runnable the Runnable to execute

 * @param period the task's periodicity

 * @param relative if true, use fixed rate else use fixed delay scheduling

 * @return an opaque reference to the internal task

 */

protected Task addTask(final long first,final Runnable runnable,final long period,boolean relative){

  if (this.isShutdown) {

    throw new IllegalStateException("shutdown");

  }

  final Task task=new Task(first,runnable,period,relative);

  this.taskQueue.addTask(task);

  this.restart();

  return task;

}

Location: HsqlTimer.java

Content: 

/** 

 * Causes the task referenced by the supplied argument to be cancelled. If the referenced task is currently executing, it will continue until finished but will not be rescheduled.

 * @param task a task reference

 */

public static void cancel(final Object task){

  if (task instanceof Task) {

    ((Task)task).cancel();

  }

}

Location: HsqlTimer.java

Content: 

/** 

 * Retrieves the last time the referenced task was executed, as a Date object. If the task has never been executed, null is returned.

 * @param task a task reference

 * @return the last time the referenced task was executed; null if never

 */

public static Date getLastScheduled(Object task){

  if (task instanceof Task) {

    final Task ltask=(Task)task;

    final long last=ltask.getLastScheduled();

    return (last == 0) ? null : new Date(last);

  }

 else {

    return null;

  }

}

Location: HsqlTimer.java

Content: 

/** 

 * Retrieves the next time the referenced task is due to be executed, as a Date object. If the referenced task is cancelled, null is returned.

 * @param task a task reference

 * @return the next time the referenced task is due to be executed

 */

public static Date getNextScheduled(Object task){

  if (task instanceof Task) {

    final Task ltask=(Task)task;

    final long next=ltask.isCancelled() ? 0 : ltask.getNextScheduled();

    return next == 0 ? null : new Date(next);

  }

 else {

    return null;

  }

}

Location: HsqlTimer.java

Content: 

/** 

 * Retrieves the background execution thread. <p> null is returned if there is no such thread. <p>

 * @return the current background thread (may be null)

 */

public synchronized Thread getThread(){

  return this.taskRunnerThread;

}

Location: HsqlTimer.java

Content: 

/** 

 * Constructs a new HsqlTimer using the default thread factory implementation.

 */

public HsqlTimer(){

  this(null);

}

Location: HsqlTimer.java

Content: 

/** 

 * Constructs a new HsqlTimer. Uses the specified thread factory implementation.

 * @param threadFactory the ThreadFactory used to produce this timer'sbackground threads.  If null, the default implementation supplied by this class will be used.

 */

public HsqlTimer(final ThreadFactory threadFactory){

  this.threadFactory=(threadFactory == null) ? this : threadFactory;

}

Location: HsqlTimer.java

Content: 

/** 

 * Retrieves whether the specified argument references a cancelled task.

 * @param task a task reference

 * @return true if referenced task is cancelled

 */

public static boolean isCancelled(final Object task){

  return (task instanceof Task) ? ((Task)task).isCancelled() : true;

}

Location: HsqlTimer.java

Content: 

/** 

 * Retrieves whether the specified argument references a task scheduled periodically using fixed delay scheduling.

 * @param task a task reference

 * @return true if the reference is scheduled using a fixed delay

 */

public static boolean isFixedDelay(final Object task){

  if (task instanceof Task) {

    final Task ltask=(Task)task;

    return (!ltask.relative && ltask.period > 0);

  }

 else {

    return false;

  }

}

Location: HsqlTimer.java

Content: 

/** 

 * Retrieves whether the specified argument references a task scheduled periodically using fixed rate scheduling.

 * @param task a task reference

 * @return true if the task is scheduled at a fixed rate

 */

public static boolean isFixedRate(final Object task){

  if (task instanceof Task) {

    final Task ltask=(Task)task;

    return (ltask.relative && ltask.period > 0);

  }

 else {

    return false;

  }

}

Location: HsqlTimer.java

Content: 

/** 

 * Retrieves whether the specified argument references a task scheduled for periodic execution.

 * @param task a task reference

 * @return true if the task is scheduled for periodic execution

 */

public static boolean isPeriodic(final Object task){

  return (task instanceof Task) ? (((Task)task).period > 0) : false;

}

Location: HsqlTimer.java

Content: 

/** 

 * Retrieves the next task to execute, or null if this timer is shutdown, the current thread is interrupted, or there are no queued tasks.

 * @return the next task to execute, or null

 */

protected Task nextTask(){

  try {

    while (!this.isShutdown || Thread.interrupted()) {

      long now;

      long next;

      long wait;

      Task task;

synchronized (this.taskQueue) {

        task=this.taskQueue.peekTask();

        if (task == null) {

          break;

        }

        now=System.currentTimeMillis();

        next=task.next;

        wait=(next - now);

        if (wait > 0) {

          this.taskQueue.park(wait);

          continue;

        }

 else {

          this.taskQueue.removeTask();

        }

      }

      long period=task.period;

      if (period > 0) {

        if (task.relative) {

          final long late=(now - next);

          if (late > period) {

            period=0;

          }

 else           if (late > 0) {

            period-=late;

          }

        }

        task.updateSchedule(now,now + period);

        this.taskQueue.addTask(task);

      }

      return task;

    }

  }

 catch (  InterruptedException e) {

  }

  return null;

}

Location: HsqlTimer.java

Content: 

/** 

 * Convenience method replacing the longer incantation: System.currentTimeMillis()

 * @return System.currentTimeMillis()

 */

static long now(){

  nowCount++;

  return System.currentTimeMillis();

}

Location: HsqlTimer.java

Content: 

/** 

 * Causes the specified Runnable to be executed once in the background after the specified delay.

 * @param delay in milliseconds

 * @param runnable the Runnable to execute.

 * @return opaque reference to the internal task

 * @throws IllegalArgumentException if runnable is null

 */

public Object scheduleAfter(final long delay,final Runnable runnable) throws IllegalArgumentException {

  if (runnable == null) {

    throw new IllegalArgumentException("runnable == null");

  }

  return this.addTask(now() + delay,runnable,0,false);

}

Location: HsqlTimer.java

Content: 

/** 

 * Causes the specified Runnable to be executed once in the background at the specified time.

 * @param date time at which to execute the specified Runnable

 * @param runnable the Runnable to execute.

 * @return opaque reference to the internal task

 * @throws IllegalArgumentException if date or runnable is null

 */

public Object scheduleAt(final Date date,final Runnable runnable) throws IllegalArgumentException {

  if (date == null) {

    throw new IllegalArgumentException("date == null");

  }

 else   if (runnable == null) {

    throw new IllegalArgumentException("runnable == null");

  }

  return this.addTask(date.getTime(),runnable,0,false);

}

Location: HsqlTimer.java

Content: 

/** 

 * Causes the specified Runnable to be executed periodically in the background, starting after the specified delay.

 * @return opaque reference to the internal task

 * @param period the cycle period

 * @param relative if true, fixed rate scheduling else fixed delay scheduling

 * @param delay in milliseconds

 * @param runnable the Runnable to execute.

 * @throws IllegalArgumentException if runnable is null or period is <= 0

 */

public Object schedulePeriodicallyAfter(final long delay,final long period,final Runnable runnable,final boolean relative) throws IllegalArgumentException {

  if (period <= 0) {

    throw new IllegalArgumentException("period <= 0");

  }

 else   if (runnable == null) {

    throw new IllegalArgumentException("runnable == null");

  }

  return addTask(now() + delay,runnable,period,relative);

}

Location: HsqlTimer.java

Content: 

/** 

 * Causes the specified Runnable to be executed periodically in the background, starting at the specified time.

 * @return opaque reference to the internal task

 * @param period the cycle period

 * @param relative if true, fixed rate scheduling else fixed delay scheduling

 * @param date time at which to execute the specified Runnable

 * @param runnable the Runnable to execute

 * @throws IllegalArgumentException if date or runnable is null, orperiod is <= 0

 */

public Object schedulePeriodicallyAt(final Date date,final long period,final Runnable runnable,final boolean relative) throws IllegalArgumentException {

  if (date == null) {

    throw new IllegalArgumentException("date == null");

  }

 else   if (period <= 0) {

    throw new IllegalArgumentException("period <= 0");

  }

 else   if (runnable == null) {

    throw new IllegalArgumentException("runnable == null");

  }

  return addTask(date.getTime(),runnable,period,relative);

}

Location: HsqlTimer.java

Content: 

/** 

 * Sets the periodicity of the designated task to a new value. <p> If the designated task is cancelled or the new period is identical to the task's current period, then this invocation has essentially no effect and the submitted object is returned. <p> Otherwise, if the new period is greater than the designated task's current period, then a simple assignment occurs and the submitted object is returned. <p> If neither case holds, then the designated task is cancelled and a new, equivalent task with the new period is scheduled for immediate first execution and returned to the caller. <p>

 * @return a task reference, as per the rules stated above.

 * @param task the task whose periodicity is to be set

 * @param period the new period

 */

public static Object setPeriod(final Object task,final long period){

  return (task instanceof Task) ? ((Task)task).setPeriod(period) : task;

}

