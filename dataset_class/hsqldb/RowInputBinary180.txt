Location: RowInputBinary180.java

Content: 

public RowInputBinary180(byte[] buf){

  super(buf);

}

Location: RowInputBinary.java

Content: 

public boolean readBoolean(){

  try {

    return super.readBoolean();

  }

 catch (  IOException e) {

    throw Error.error(e,ErrorCode.GENERAL_IO_ERROR,"RowInputBinary" + ' ' + getFilePosition());

  }

}

Location: RowInputBinary.java

Content: 

public byte[] readByteArray(){

  int length=readInt();

  byte[] b=new byte[length];

  readFully(b);

  return b;

}

Location: RowInputBinary.java

Content: 

public byte[] readByteArray16(){

  byte[] b=new byte[16];

  readFully(b);

  return b;

}

Location: RowInputBinary.java

Content: 

public char[] readCharArray() throws IOException {

  int length=readInt();

  char[] c=new char[length];

  if (count - pos < c.length) {

    pos=count;

    throw new EOFException();

  }

  for (int i=0; i < c.length; i++) {

    int ch1=buffer[pos++] & 0xff;

    int ch2=buffer[pos++] & 0xff;

    c[i]=(char)((ch1 << 8) + (ch2));

  }

  return c;

}

Location: RowInputBinary.java

Content: 

public void readFully(byte[] b){

  try {

    super.readFully(b);

  }

 catch (  IOException e) {

    throw Error.error(e,ErrorCode.GENERAL_IO_ERROR,"RowInputBinary" + ' ' + getFilePosition());

  }

}

Location: RowInputBinary.java

Content: 

/** 

 * Nulls in array are treated as 0

 */

public int[] readIntArray() throws IOException {

  int size=readInt();

  int[] data=new int[size];

  for (int i=0; i < size; i++) {

    if (!readNull()) {

      data[i]=readInt();

    }

  }

  return data;

}

Location: RowInputBinary.java

Content: 

/** 

 * Used to reset the row, ready for Result data to be written into the byte[] buffer by an external routine.

 */

public void resetRow(int rowsize){

  if (out != null) {

    out.reset(rowsize);

    buffer=out.getBuffer();

  }

  super.reset();

}

Location: RowInputBinary.java

Content: 

public RowInputBinary(){

  this(64);

}

Location: RowInputBinary.java

Content: 

public RowInputBinary(byte[] buf){

  super(buf);

}

Location: RowInputBinary.java

Content: 

public RowInputBinary(int size){

  super(size);

}

Location: RowInputBinary.java

Content: 

/** 

 * uses the byte[] buffer from out. At each reset, the buffer is set to the current one for out.

 */

public RowInputBinary(RowOutputBinary out){

  super(out.getBuffer());

  this.out=out;

}

