Location: HsqlNameManager.java

Content: 

/** 

 * Column index i is 0 based, returns 1 based numbered column.

 */

public static HsqlName getAutoColumnName(int i){

  if (i < autoColumnNames.length) {

    return autoColumnNames[i];

  }

  return new HsqlName(staticManager,"C_" + (i + 1),SchemaObject.COLUMN,false);

}

Location: HsqlNameManager.java

Content: 

public static String getAutoNoNameColumnString(int i){

  if (i < autoColumnNames.length) {

    return autoNoNameColumnNames[i];

  }

  return String.valueOf(i);

}

Location: HsqlNameManager.java

Content: 

public static String getAutoSavepointNameString(long i,int j){

  StringBuffer sb=new StringBuffer("S");

  sb.append(i).append('_').append(j);

  return sb.toString();

}

Location: HsqlNameManager.java

Content: 

public static SimpleName getSimpleName(String name,boolean isNameQuoted){

  return new SimpleName(name,isNameQuoted);

}

Location: HsqlNameManager.java

Content: 

/** 

 * Same name string but different objects and serial number

 */

public HsqlName getSubqueryTableName(){

  return subqueryTableName;

}

Location: HsqlNameManager.java

Content: 

public HsqlNameManager(){

  sqlRegularNames=true;

}

Location: HsqlNameManager.java

Content: 

public HsqlNameManager(Database database){

  catalogName=new HsqlName(this,SqlInvariants.DEFAULT_CATALOG_NAME,SchemaObject.CATALOG,false);

  sqlRegularNames=database.sqlRegularNames;

  subqueryTableName=new HsqlName(this,SqlInvariants.SYSTEM_SUBQUERY,false,SchemaObject.TABLE);

  subqueryTableName.schema=SqlInvariants.SYSTEM_SCHEMA_HSQLNAME;

}

Location: HsqlNameManager.java

Content: 

/** 

 * Auto names are used for autogenerated indexes or anonymous constraints.

 */

public HsqlName newAutoName(String prefix,HsqlName schema,HsqlName parent,int type){

  HsqlName name=newAutoName(prefix,(String)null,schema,parent,type);

  return name;

}

Location: HsqlNameManager.java

Content: 

/** 

 * Auto names are used for autogenerated indexes or anonymous constraints.

 */

public HsqlName newAutoName(String prefix,String namepart,HsqlName schema,HsqlName parent,int type){

  StringBuffer sb=new StringBuffer();

  if (prefix != null) {

    if (prefix.length() != 0) {

      sb.append("SYS_");

      sb.append(prefix);

      sb.append('_');

      if (namepart != null) {

        sb.append(namepart);

        sb.append('_');

      }

      sb.append(sysNumber.incrementAndGet());

    }

  }

 else {

    sb.append(namepart);

  }

  HsqlName name=new HsqlName(this,sb.toString(),type,false);

  name.schema=schema;

  name.parent=parent;

  return name;

}

Location: HsqlNameManager.java

Content: 

public HsqlName newColumnHsqlName(HsqlName table,String name,boolean isquoted){

  HsqlName hsqlName=new HsqlName(this,name,isquoted,SchemaObject.COLUMN);

  hsqlName.schema=table.schema;

  hsqlName.parent=table;

  return hsqlName;

}

Location: HsqlNameManager.java

Content: 

public HsqlName newColumnSchemaHsqlName(HsqlName table,SimpleName name){

  return newColumnHsqlName(table,name.name,name.isNameQuoted);

}

Location: HsqlNameManager.java

Content: 

public HsqlName newConstraintIndexName(HsqlName tableName,HsqlName constName,boolean useConstraint){

  if (constName == null) {

    useConstraint=false;

  }

  if (useConstraint) {

    HsqlName name=new HsqlName(this,constName.name,SchemaObject.INDEX,false);

    name.schema=tableName.schema;

    name.parent=tableName;

    return name;

  }

 else {

    String constNameString=constName == null ? null : constName.name;

    return newAutoName("IDX",constNameString,tableName.schema,tableName,SchemaObject.INDEX);

  }

}

Location: HsqlNameManager.java

Content: 

public HsqlName newHsqlName(HsqlName schema,String name,boolean isquoted,int type){

  HsqlName hsqlName=new HsqlName(this,name,isquoted,type);

  hsqlName.schema=schema;

  return hsqlName;

}

Location: HsqlNameManager.java

Content: 

public HsqlName newHsqlName(HsqlName schema,String name,boolean isquoted,int type,HsqlName parent){

  HsqlName hsqlName=new HsqlName(this,name,isquoted,type);

  hsqlName.schema=schema;

  hsqlName.parent=parent;

  return hsqlName;

}

Location: HsqlNameManager.java

Content: 

public HsqlName newHsqlName(HsqlName schema,String name,int type){

  HsqlName hsqlName=new HsqlName(this,name,type,false);

  hsqlName.schema=schema;

  return hsqlName;

}

Location: HsqlNameManager.java

Content: 

public HsqlName newHsqlName(String name,boolean isquoted,int type){

  return new HsqlName(this,name,isquoted,type);

}

Location: HsqlNameManager.java

Content: 

public static HsqlName newInfoSchemaColumnName(String name,HsqlName table){

  HsqlName hsqlName=new HsqlName(staticManager,name,false,SchemaObject.COLUMN);

  hsqlName.schema=SqlInvariants.INFORMATION_SCHEMA_HSQLNAME;

  hsqlName.parent=table;

  return hsqlName;

}

Location: HsqlNameManager.java

Content: 

public static HsqlName newInfoSchemaObjectName(String name,boolean isQuoted,int type){

  HsqlName hsqlName=new HsqlName(staticManager,name,type,isQuoted);

  hsqlName.schema=SqlInvariants.INFORMATION_SCHEMA_HSQLNAME;

  return hsqlName;

}

Location: HsqlNameManager.java

Content: 

public static HsqlName newInfoSchemaTableName(String name){

  HsqlName hsqlName=new HsqlName(staticManager,name,SchemaObject.TABLE,false);

  hsqlName.schema=SqlInvariants.INFORMATION_SCHEMA_HSQLNAME;

  return hsqlName;

}

Location: HsqlNameManager.java

Content: 

public HsqlName newSpecificRoutineName(HsqlName name){

  StringBuffer sb=new StringBuffer();

  sb.append(name.name).append('_').append(sysNumber.incrementAndGet());

  HsqlName hsqlName=new HsqlName(this,sb.toString(),SchemaObject.SPECIFIC_ROUTINE,name.isNameQuoted);

  hsqlName.parent=name;

  hsqlName.schema=name.schema;

  return hsqlName;

}

Location: HsqlNameManager.java

Content: 

public static HsqlName newSystemObjectName(String name,int type){

  return new HsqlName(staticManager,name,type,false);

}

Location: HsqlNameManager.java

Content: 

public void setSqlRegularNames(boolean value){

  sqlRegularNames=value;

}

