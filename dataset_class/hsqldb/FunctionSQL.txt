Location: FunctionSQL.java

Content: 

public boolean equals(Expression other){

  if (other instanceof FunctionSQL) {

    FunctionSQL o=(FunctionSQL)other;

    return super.equals(other) && funcType == o.funcType;

  }

  return false;

}

Location: FunctionSQL.java

Content: 

protected FunctionSQL(){

  super(OpTypes.SQL_FUNCTION);

}

Location: FunctionSQL.java

Content: 

protected FunctionSQL(int id){

  this();

  this.funcType=id;

  isDeterministic=!nonDeterministicFuncSet.contains(id);

switch (id) {

case FUNC_POSITION_CHAR:

case FUNC_POSITION_BINARY:

    name=Tokens.T_POSITION;

  parseList=new short[]{Tokens.OPENBRACKET,Tokens.QUESTION,Tokens.IN,Tokens.QUESTION,Tokens.X_OPTION,5,Tokens.USING,Tokens.X_KEYSET,2,Tokens.CHARACTERS,Tokens.OCTETS,Tokens.CLOSEBRACKET};

break;

case FUNC_OCCURENCES_REGEX:

case FUNC_POSITION_REGEX:

break;

case FUNC_EXTRACT:

name=Tokens.T_EXTRACT;

parseList=new short[]{Tokens.OPENBRACKET,Tokens.X_KEYSET,20,Tokens.YEAR,Tokens.MONTH,Tokens.DAY,Tokens.HOUR,Tokens.MINUTE,Tokens.SECOND,Tokens.DAY_OF_WEEK,Tokens.WEEK_OF_YEAR,Tokens.QUARTER,Tokens.DAY_OF_YEAR,Tokens.DAY_OF_MONTH,Tokens.WEEK_OF_YEAR,Tokens.DAY_NAME,Tokens.MONTH_NAME,Tokens.SECONDS_MIDNIGHT,Tokens.TIMEZONE_HOUR,Tokens.TIMEZONE_MINUTE,Tokens.MILLISECOND,Tokens.MICROSECOND,Tokens.NANOSECOND,Tokens.FROM,Tokens.QUESTION,Tokens.CLOSEBRACKET};

break;

case FUNC_CHAR_LENGTH:

name=Tokens.T_CHAR_LENGTH;

parseList=new short[]{Tokens.OPENBRACKET,Tokens.QUESTION,Tokens.X_OPTION,5,Tokens.USING,Tokens.X_KEYSET,2,Tokens.CHARACTERS,Tokens.OCTETS,Tokens.CLOSEBRACKET};

break;

case FUNC_BIT_LENGTH:

name=Tokens.T_BIT_LENGTH;

parseList=singleParamList;

break;

case FUNC_OCTET_LENGTH:

name=Tokens.T_OCTET_LENGTH;

parseList=singleParamList;

break;

case FUNC_CARDINALITY:

name=Tokens.T_CARDINALITY;

parseList=singleParamList;

break;

case FUNC_MAX_CARDINALITY:

name=Tokens.T_MAX_CARDINALITY;

parseList=singleParamList;

break;

case FUNC_TRIM_ARRAY:

name=Tokens.T_TRIM_ARRAY;

parseList=doubleParamList;

break;

case FUNC_ABS:

name=Tokens.T_ABS;

parseList=singleParamList;

break;

case FUNC_MOD:

name=Tokens.T_MOD;

parseList=doubleParamList;

break;

case FUNC_LN:

name=Tokens.T_LN;

parseList=singleParamList;

break;

case FUNC_EXP:

name=Tokens.T_EXP;

parseList=singleParamList;

break;

case FUNC_POWER:

name=Tokens.T_POWER;

parseList=doubleParamList;

break;

case FUNC_SQRT:

name=Tokens.T_SQRT;

parseList=singleParamList;

break;

case FUNC_FLOOR:

name=Tokens.T_FLOOR;

parseList=singleParamList;

break;

case FUNC_CEILING:

name=Tokens.T_CEILING;

parseList=singleParamList;

break;

case FUNC_WIDTH_BUCKET:

name=Tokens.T_WIDTH_BUCKET;

parseList=quadParamList;

break;

case FUNC_SUBSTRING_CHAR:

case FUNC_SUBSTRING_BINARY:

name=Tokens.T_SUBSTRING;

parseList=new short[]{Tokens.OPENBRACKET,Tokens.QUESTION,Tokens.FROM,Tokens.QUESTION,Tokens.X_OPTION,2,Tokens.FOR,Tokens.QUESTION,Tokens.X_OPTION,5,Tokens.USING,Tokens.X_KEYSET,2,Tokens.CHARACTERS,Tokens.OCTETS,Tokens.CLOSEBRACKET};

parseListAlt=new short[]{Tokens.OPENBRACKET,Tokens.QUESTION,Tokens.COMMA,Tokens.QUESTION,Tokens.X_OPTION,2,Tokens.COMMA,Tokens.QUESTION,Tokens.CLOSEBRACKET};

break;

case FUNC_FOLD_LOWER:

name=Tokens.T_LOWER;

parseList=singleParamList;

break;

case FUNC_FOLD_UPPER:

name=Tokens.T_UPPER;

parseList=singleParamList;

break;

case FUNC_TRIM_CHAR:

case FUNC_TRIM_BINARY:

name=Tokens.T_TRIM;

parseList=new short[]{Tokens.OPENBRACKET,Tokens.X_OPTION,11,Tokens.X_OPTION,5,Tokens.X_KEYSET,3,Tokens.LEADING,Tokens.TRAILING,Tokens.BOTH,Tokens.X_OPTION,1,Tokens.QUESTION,Tokens.FROM,Tokens.QUESTION,Tokens.CLOSEBRACKET};

break;

case FUNC_OVERLAY_CHAR:

case FUNC_OVERLAY_BINARY:

name=Tokens.T_OVERLAY;

parseList=new short[]{Tokens.OPENBRACKET,Tokens.QUESTION,Tokens.PLACING,Tokens.QUESTION,Tokens.FROM,Tokens.QUESTION,Tokens.X_OPTION,2,Tokens.FOR,Tokens.QUESTION,Tokens.X_OPTION,2,Tokens.USING,Tokens.CHARACTERS,Tokens.CLOSEBRACKET};

break;

case FUNC_CURRENT_CATALOG:

name=Tokens.T_CURRENT_CATALOG;

parseList=noParamList;

break;

case FUNC_CURRENT_ROLE:

name=Tokens.T_CURRENT_ROLE;

parseList=noParamList;

break;

case FUNC_CURRENT_SCHEMA:

name=Tokens.T_CURRENT_SCHEMA;

parseList=noParamList;

break;

case FUNC_CURRENT_USER:

name=Tokens.T_CURRENT_USER;

parseList=noParamList;

break;

case FUNC_SESSION_USER:

name=Tokens.T_SESSION_USER;

parseList=noParamList;

break;

case FUNC_SYSTEM_USER:

name=Tokens.T_SYSTEM_USER;

parseList=noParamList;

break;

case FUNC_USER:

name=Tokens.T_USER;

parseList=optionalNoParamList;

break;

case FUNC_VALUE:

name=Tokens.T_VALUE;

parseList=noParamList;

break;

case FUNC_CURRENT_DATE:

name=Tokens.T_CURRENT_DATE;

parseList=noParamList;

break;

case FUNC_CURRENT_TIME:

name=Tokens.T_CURRENT_TIME;

parseList=optionalIntegerParamList;

break;

case FUNC_CURRENT_TIMESTAMP:

name=Tokens.T_CURRENT_TIMESTAMP;

parseList=optionalIntegerParamList;

break;

case FUNC_LOCALTIME:

name=Tokens.T_LOCALTIME;

parseList=optionalIntegerParamList;

break;

case FUNC_LOCALTIMESTAMP:

name=Tokens.T_LOCALTIMESTAMP;

parseList=optionalIntegerParamList;

break;

default :

throw Error.runtimeError(ErrorCode.U_S0500,"FunctionSQL");

}

}

Location: FunctionSQL.java

Content: 

Object getExtractValue(Session session,Object[] data){

  if (data[1] == null) {

    return null;

  }

  int part=((Number)nodes[0].valueData).intValue();

  part=DTIType.getFieldNameTypeForToken(part);

switch (part) {

case Types.SQL_INTERVAL_SECOND:

{

      return ((DTIType)nodes[1].dataType).getSecondPart(data[1]);

    }

case DTIType.MONTH_NAME:

case DTIType.DAY_NAME:

{

    return ((DateTimeType)nodes[1].dataType).getPartString(session,data[1],part);

  }

default :

{

  int value=((DTIType)nodes[1].dataType).getPart(session,data[1],part);

  return ValuePool.getInt(value);

}

}

}

Location: FunctionSQL.java

Content: 

public Expression getFunctionExpression(){

  return this;

}

Location: FunctionSQL.java

Content: 

Object getValue(Session session,Object[] data){

switch (funcType) {

case FUNC_POSITION_CHAR:

{

      if (data[0] == null || data[1] == null) {

        return null;

      }

      long offset=0;

      if (nodes.length > 3 && nodes[3] != null) {

        Object value=nodes[3].getValue(session);

        offset=((Number)value).longValue() - 1;

        if (offset < 0) {

          offset=0;

        }

      }

      long result=((CharacterType)nodes[1].dataType).position(session,data[1],data[0],nodes[0].dataType,offset) + 1;

      if (nodes[2] != null && ((Number)nodes[2].valueData).intValue() == Tokens.OCTETS) {

        result*=2;

      }

      return ValuePool.getLong(result);

    }

case FUNC_POSITION_BINARY:

{

    if (data[0] == null || data[1] == null) {

      return null;

    }

    long result=((BinaryType)nodes[1].dataType).position(session,(BlobData)data[1],(BlobData)data[0],nodes[0].dataType,0) + 1;

    if (nodes[2] != null && ((Number)nodes[2].valueData).intValue() == Tokens.OCTETS) {

      result*=2;

    }

    return ValuePool.getLong(result);

  }

case FUNC_EXTRACT:

{

  return getExtractValue(session,data);

}

case FUNC_CHAR_LENGTH:

{

if (data[0] == null) {

  return null;

}

long result=((CharacterType)nodes[0].dataType).size(session,data[0]);

return ValuePool.getLong(result);

}

case FUNC_BIT_LENGTH:

{

if (data[0] == null) {

return null;

}

long result;

if (nodes[0].dataType.isBinaryType()) {

result=((BlobData)data[0]).bitLength(session);

}

 else {

result=16 * ((CharacterType)nodes[0].dataType).size(session,data[0]);

}

return ValuePool.getLong(result);

}

case FUNC_OCTET_LENGTH:

{

if (data[0] == null) {

return null;

}

long result;

if (nodes[0].dataType.isBinaryType()) {

result=((BlobData)data[0]).length(session);

}

 else {

result=2 * ((CharacterType)nodes[0].dataType).size(session,data[0]);

}

return ValuePool.getLong(result);

}

case FUNC_CARDINALITY:

{

if (data[0] == null) {

return null;

}

int result=nodes[0].dataType.cardinality(session,data[0]);

return ValuePool.getInt(result);

}

case FUNC_MAX_CARDINALITY:

{

if (data[0] == null) {

return null;

}

int result=nodes[0].dataType.arrayLimitCardinality();

return ValuePool.getInt(result);

}

case FUNC_TRIM_ARRAY:

{

if (data[0] == null) {

return null;

}

if (data[1] == null) {

return null;

}

Object[] array=(Object[])data[0];

int length=((Number)data[1]).intValue();

if (length < 0 || length > array.length) {

throw Error.error(ErrorCode.X_2202E);

}

Object[] newArray=new Object[array.length - length];

System.arraycopy(array,0,newArray,0,newArray.length);

return newArray;

}

case FUNC_ABS:

{

if (data[0] == null) {

return null;

}

return dataType.absolute(data[0]);

}

case FUNC_MOD:

{

if (data[0] == null || data[1] == null) {

return null;

}

data[0]=nodeDataTypes[0].convertToType(session,data[0],nodes[0].dataType);

data[1]=nodeDataTypes[1].convertToType(session,data[1],nodes[1].dataType);

Object value=((NumberType)nodeDataTypes[0]).modulo(session,data[0],data[1],nodeDataTypes[1]);

return value;

}

case FUNC_LN:

{

if (data[0] == null) {

return null;

}

double d=((Number)data[0]).doubleValue();

if (d <= 0) {

if (session.database.sqlDoubleNaN) {

throw Error.error(ErrorCode.X_2201E);

}

}

d=Math.log(d);

return ValuePool.getDouble(Double.doubleToLongBits(d));

}

case FUNC_EXP:

{

if (data[0] == null) {

return null;

}

double val=Math.exp(((Number)data[0]).doubleValue());

return ValuePool.getDouble(Double.doubleToLongBits(val));

}

case FUNC_POWER:

{

if (data[0] == null || data[1] == null) {

return null;

}

double base=((Number)data[0]).doubleValue();

double exponent=((Number)data[1]).doubleValue();

double val;

if (base == 0) {

if (exponent < 0) {

throw Error.error(ErrorCode.X_2201F);

}

 else if (exponent == 0) {

val=1;

}

 else {

val=0;

}

}

 else {

val=Math.pow(base,exponent);

}

return ValuePool.getDouble(Double.doubleToLongBits(val));

}

case FUNC_SQRT:

{

if (data[0] == null) {

return null;

}

double d=((Number)data[0]).doubleValue();

if (d < 0) {

if (session.database.sqlDoubleNaN) {

throw Error.error(ErrorCode.X_2201E);

}

}

double val=Math.sqrt(((Number)data[0]).doubleValue());

return ValuePool.getDouble(Double.doubleToLongBits(val));

}

case FUNC_FLOOR:

{

if (data[0] == null) {

return null;

}

return ((NumberType)dataType).floor(data[0]);

}

case FUNC_CEILING:

{

if (data[0] == null) {

return null;

}

return ((NumberType)dataType).ceiling(data[0]);

}

case FUNC_WIDTH_BUCKET:

{

for (int i=0; i < data.length; i++) {

if (data[i] == null) {

return null;

}

data[i]=nodeDataTypes[i].convertToType(session,data[i],nodes[i].dataType);

}

if (((NumberType)nodeDataTypes[3]).isNegative(data[3])) {

throw Error.error(ErrorCode.X_2201G);

}

int compare=nodeDataTypes[1].compare(session,data[1],data[2]);

Type subType;

Object temp;

Object temp2;

if (nodeDataTypes[0].isNumberType()) {

subType=nodeDataTypes[0];

}

 else {

subType=nodeDataTypes[0].getCombinedType(session,nodeDataTypes[0],OpTypes.SUBTRACT);

}

switch (compare) {

case 0:

throw Error.error(ErrorCode.X_2201G);

case -1:

{

if (nodeDataTypes[0].compare(session,data[0],data[1]) < 0) {

return ValuePool.INTEGER_0;

}

if (nodeDataTypes[0].compare(session,data[0],data[2]) >= 0) {

return dataType.add(session,data[3],ValuePool.INTEGER_1,Type.SQL_INTEGER);

}

temp=subType.subtract(session,data[0],data[1],nodeDataTypes[1]);

temp2=subType.subtract(session,data[2],data[1],nodeDataTypes[1]);

break;

}

case 1:

{

if (nodeDataTypes[0].compare(session,data[0],data[1]) > 0) {

return ValuePool.INTEGER_0;

}

if (nodeDataTypes[0].compare(session,data[0],data[2]) <= 0) {

return dataType.add(session,data[3],ValuePool.INTEGER_1,Type.SQL_INTEGER);

}

temp=subType.subtract(session,data[1],data[0],nodeDataTypes[0]);

temp2=subType.subtract(session,data[1],data[2],nodeDataTypes[2]);

break;

}

default :

throw Error.runtimeError(ErrorCode.U_S0500,"");

}

Type opType;

if (subType.typeCode == Types.SQL_DOUBLE) {

opType=subType;

}

 else {

opType=IntervalType.factorType;

temp=opType.convertToType(session,temp,subType);

temp2=opType.convertToType(session,temp2,subType);

}

temp=opType.multiply(temp,data[3]);

temp=opType.divide(session,temp,temp2);

temp=dataType.convertToDefaultType(session,temp);

return dataType.add(session,temp,ValuePool.INTEGER_1,Type.SQL_INTEGER);

}

case FUNC_SUBSTRING_CHAR:

{

if (data[0] == null || data[1] == null) {

return null;

}

Object value;

value=Type.SQL_BIGINT.convertToType(session,data[1],nodes[1].dataType);

long offset=((Number)value).longValue() - 1;

long length=0;

if (nodes[2] != null) {

if (data[2] == null) {

return null;

}

value=Type.SQL_BIGINT.convertToType(session,data[2],nodes[2].dataType);

length=((Number)value).longValue();

}

if (nodes.length > 3 && nodes[3] != null && ((Number)nodes[2].valueData).intValue() == Tokens.OCTETS) {

}

return ((CharacterType)dataType).substring(session,data[0],offset,length,nodes[2] != null,false);

}

case FUNC_FOLD_LOWER:

if (data[0] == null) {

return null;

}

return ((CharacterType)dataType).lower(session,data[0]);

case FUNC_FOLD_UPPER:

if (data[0] == null) {

return null;

}

return ((CharacterType)dataType).upper(session,data[0]);

case FUNC_TRIM_CHAR:

{

if (data[1] == null || data[2] == null) {

return null;

}

boolean leading=false;

boolean trailing=false;

switch (((Number)nodes[0].valueData).intValue()) {

case Tokens.BOTH:

leading=trailing=true;

break;

case Tokens.LEADING:

leading=true;

break;

case Tokens.TRAILING:

trailing=true;

break;

default :

throw Error.runtimeError(ErrorCode.U_S0500,"FunctionSQL");

}

String string=(String)data[1];

if (string.length() != 1) {

throw Error.error(ErrorCode.X_22027);

}

char character=string.charAt(0);

return ((CharacterType)dataType).trim(session,data[2],character,leading,trailing);

}

case FUNC_OVERLAY_CHAR:

{

if (data[0] == null || data[1] == null || data[2] == null) {

return null;

}

Object value;

value=Type.SQL_BIGINT.convertToType(session,data[2],nodes[2].dataType);

long offset=((Number)value).longValue() - 1;

long length=0;

if (nodes[3] != null) {

if (data[3] == null) {

return null;

}

value=Type.SQL_BIGINT.convertToType(session,data[3],nodes[3].dataType);

length=((Number)value).longValue();

}

return ((CharacterType)dataType).overlay(null,data[0],data[1],offset,length,nodes[3] != null);

}

case FUNC_SUBSTRING_BINARY:

{

if (data[0] == null || data[1] == null) {

return null;

}

Object value;

value=Type.SQL_BIGINT.convertToType(session,data[1],nodes[1].dataType);

long offset=((Number)value).longValue() - 1;

long length=0;

if (nodes[2] != null) {

if (data[2] == null) {

return null;

}

value=Type.SQL_BIGINT.convertToType(session,data[2],nodes[2].dataType);

length=((Number)value).intValue();

}

return ((BinaryType)dataType).substring(session,(BlobData)data[0],offset,length,nodes[2] != null);

}

case FUNC_TRIM_BINARY:

{

if (data[1] == null || data[2] == null) {

return null;

}

boolean leading=false;

boolean trailing=false;

int spec=((Number)nodes[0].valueData).intValue();

switch (spec) {

case Tokens.BOTH:

leading=trailing=true;

break;

case Tokens.LEADING:

leading=true;

break;

case Tokens.TRAILING:

trailing=true;

break;

default :

throw Error.runtimeError(ErrorCode.U_S0500,"FunctionSQL");

}

BlobData string=(BlobData)data[1];

if (string.length(session) != 1) {

throw Error.error(ErrorCode.X_22027);

}

byte[] bytes=string.getBytes();

return ((BinaryType)dataType).trim(session,(BlobData)data[2],bytes[0],leading,trailing);

}

case FUNC_OVERLAY_BINARY:

{

if (data[0] == null || data[1] == null || data[2] == null) {

return null;

}

Object value;

value=Type.SQL_BIGINT.convertToType(session,data[2],nodes[2].dataType);

long offset=((Number)value).longValue() - 1;

long length=0;

if (nodes[3] != null) {

if (data[3] == null) {

return null;

}

value=Type.SQL_BIGINT.convertToType(session,data[3],nodes[3].dataType);

length=((Number)value).longValue();

}

return ((BinaryType)dataType).overlay(session,(BlobData)data[0],(BlobData)data[1],offset,length,nodes[3] != null);

}

case FUNC_CURRENT_CATALOG:

return session.database.getCatalogName().name;

case FUNC_CURRENT_ROLE:

return session.getRole() == null ? null : session.getRole().getName().getNameString();

case FUNC_CURRENT_SCHEMA:

return session.getCurrentSchemaHsqlName().name;

case FUNC_CURRENT_USER:

return session.getUser().getName().getNameString();

case FUNC_SESSION_USER:

return session.getUser().getName().getNameString();

case FUNC_SYSTEM_USER:

return session.getUser().getName().getNameString();

case FUNC_USER:

return session.getUser().getName().getNameString();

case FUNC_VALUE:

return session.sessionData.currentValue;

case FUNC_CURRENT_DATE:

if (session.database.sqlSyntaxOra) {

return dataType.convertToTypeLimits(session,session.getCurrentTimestamp(false));

}

return session.getCurrentDate();

case FUNC_CURRENT_TIME:

return dataType.convertToTypeLimits(session,session.getCurrentTime(true));

case FUNC_CURRENT_TIMESTAMP:

return dataType.convertToTypeLimits(session,session.getCurrentTimestamp(true));

case FUNC_LOCALTIME:

return dataType.convertToTypeLimits(session,session.getCurrentTime(false));

case FUNC_LOCALTIMESTAMP:

return dataType.convertToTypeLimits(session,session.getCurrentTimestamp(false));

default :

throw Error.runtimeError(ErrorCode.U_S0500,"FunctionSQL");

}

}

Location: FunctionSQL.java

Content: 

public boolean isDeterministic(){

  return isDeterministic;

}

Location: FunctionSQL.java

Content: 

public boolean isValueFunction(){

  return isSQLValueFunction;

}

Location: FunctionSQL.java

Content: 

public static FunctionSQL newSQLFunction(String token,CompileContext context){

  int id=regularFuncMap.get(token,-1);

  boolean isValueFunction=false;

  if (id == -1) {

    id=valueFuncMap.get(token,-1);

    isValueFunction=true;

  }

  if (id == -1) {

    return null;

  }

  FunctionSQL function=new FunctionSQL(id);

  if (id == FUNC_VALUE) {

    if (context.currentDomain == null) {

      return null;

    }

    function.dataType=context.currentDomain;

  }

 else {

    function.isSQLValueFunction=isValueFunction;

  }

  return function;

}

Location: FunctionSQL.java

Content: 

public void resolveTypes(Session session,Expression parent){

  for (int i=0; i < nodes.length; i++) {

    if (nodes[i] != null) {

      nodes[i].resolveTypes(session,this);

    }

  }

switch (funcType) {

case FUNC_POSITION_CHAR:

case FUNC_POSITION_BINARY:

{

      if (nodes[0].dataType == null) {

        if (nodes[1].dataType == null) {

          throw Error.error(ErrorCode.X_42567);

        }

        if (nodes[1].dataType.typeCode == Types.SQL_CLOB || nodes[1].dataType.isBinaryType()) {

          nodes[0].dataType=nodes[1].dataType;

        }

 else {

          nodes[0].dataType=Type.SQL_VARCHAR;

        }

      }

      if (nodes[1].dataType == null) {

        if (nodes[0].dataType.typeCode == Types.SQL_CLOB || nodes[0].dataType.isBinaryType()) {

          nodes[1].dataType=nodes[0].dataType;

        }

 else {

          nodes[1].dataType=Type.SQL_VARCHAR;

        }

      }

      if (nodes[0].dataType.isCharacterType() && nodes[1].dataType.isCharacterType()) {

        funcType=FUNC_POSITION_CHAR;

      }

 else       if (nodes[0].dataType.isBinaryType() && nodes[1].dataType.isBinaryType()) {

        if (nodes[0].dataType.isBitType() || nodes[1].dataType.isBitType()) {

          throw Error.error(ErrorCode.X_42563);

        }

        funcType=FUNC_POSITION_BINARY;

      }

 else {

        throw Error.error(ErrorCode.X_42563);

      }

      if (nodes.length > 3 && nodes[3] != null) {

        if (nodes[3].isDynamicParam()) {

          nodes[3].dataType=Type.SQL_BIGINT;

        }

        if (!nodes[3].dataType.isNumberType()) {

          throw Error.error(ErrorCode.X_42563);

        }

      }

      dataType=Type.SQL_BIGINT;

      break;

    }

case FUNC_EXTRACT:

{

    if (nodes[1].dataType == null) {

      throw Error.error(ErrorCode.X_42567);

    }

    if (!nodes[1].dataType.isDateTimeType() && !nodes[1].dataType.isIntervalType()) {

      throw Error.error(ErrorCode.X_42563);

    }

    int part=((Number)nodes[0].valueData).intValue();

    DTIType type=(DTIType)nodes[1].dataType;

    part=DTIType.getFieldNameTypeForToken(part);

    dataType=type.getExtractType(part);

    break;

  }

case FUNC_BIT_LENGTH:

{

  if (nodes[0].dataType == null) {

    nodes[0].dataType=Type.SQL_BIT_VARYING_MAX_LENGTH;

  }

  if (!nodes[0].dataType.isCharacterType() && !nodes[0].dataType.isBinaryType()) {

    throw Error.error(ErrorCode.X_42563);

  }

  dataType=Type.SQL_BIGINT;

  break;

}

case FUNC_CHAR_LENGTH:

if (nodes[0].dataType == null) {

nodes[0].dataType=Type.SQL_VARCHAR;

}

if (!nodes[0].dataType.isCharacterType()) {

throw Error.error(ErrorCode.X_42563);

}

case FUNC_OCTET_LENGTH:

{

if (nodes[0].dataType == null) {

nodes[0].dataType=Type.SQL_VARCHAR;

}

if (!nodes[0].dataType.isCharacterType() && !nodes[0].dataType.isBinaryType()) {

throw Error.error(ErrorCode.X_42563);

}

dataType=Type.SQL_BIGINT;

break;

}

case FUNC_CARDINALITY:

{

if (nodes[0].dataType == null) {

throw Error.error(ErrorCode.X_42567);

}

if (!nodes[0].dataType.isArrayType()) {

throw Error.error(ErrorCode.X_42563);

}

dataType=Type.SQL_INTEGER;

break;

}

case FUNC_MAX_CARDINALITY:

{

if (nodes[0].dataType == null) {

throw Error.error(ErrorCode.X_42567);

}

if (!nodes[0].dataType.isArrayType()) {

throw Error.error(ErrorCode.X_42563);

}

dataType=Type.SQL_INTEGER;

break;

}

case FUNC_TRIM_ARRAY:

{

if (nodes[0].dataType == null) {

throw Error.error(ErrorCode.X_42567);

}

if (!nodes[0].dataType.isArrayType()) {

throw Error.error(ErrorCode.X_42563);

}

if (nodes[1].dataType == null) {

nodes[1].dataType=Type.SQL_INTEGER;

}

if (!nodes[1].dataType.isIntegralType()) {

throw Error.error(ErrorCode.X_42563);

}

dataType=nodes[0].dataType;

break;

}

case FUNC_MOD:

{

if (nodes[0].dataType == null) {

nodes[0].dataType=nodes[1].dataType;

}

if (nodes[1].dataType == null) {

nodes[1].dataType=nodes[0].dataType;

}

if (nodes[0].dataType == null) {

throw Error.error(ErrorCode.X_42567);

}

if (!nodes[0].dataType.isNumberType() || !nodes[1].dataType.isNumberType()) {

throw Error.error(ErrorCode.X_42563);

}

nodeDataTypes=new Type[2];

if (session.database.sqlSyntaxOra) {

nodeDataTypes[0]=nodes[0].dataType.getAggregateType(nodes[1].dataType);

nodeDataTypes[1]=nodes[1].dataType;

}

 else {

nodeDataTypes[0]=((NumberType)nodes[0].dataType).getIntegralType();

nodeDataTypes[1]=((NumberType)nodes[1].dataType).getIntegralType();

}

dataType=nodeDataTypes[1];

break;

}

case FUNC_POWER:

{

if (nodes[0].dataType == null) {

nodes[0].dataType=nodes[1].dataType;

}

if (nodes[1].dataType == null) {

nodes[1].dataType=nodes[0].dataType;

}

if (nodes[0].dataType == null) {

throw Error.error(ErrorCode.X_42567);

}

if (!nodes[0].dataType.isNumberType() || !nodes[1].dataType.isNumberType()) {

throw Error.error(ErrorCode.X_42563);

}

dataType=Type.SQL_DOUBLE;

break;

}

case FUNC_LN:

case FUNC_EXP:

case FUNC_SQRT:

{

if (nodes[0].dataType == null) {

nodes[0].dataType=Type.SQL_DOUBLE;

}

if (!nodes[0].dataType.isNumberType()) {

throw Error.error(ErrorCode.X_42563);

}

dataType=Type.SQL_DOUBLE;

break;

}

case FUNC_ABS:

if (nodes[0].dataType != null && nodes[0].dataType.isIntervalType()) {

dataType=nodes[0].dataType;

break;

}

case FUNC_FLOOR:

case FUNC_CEILING:

{

if (nodes[0].dataType == null) {

nodes[0].dataType=Type.SQL_DOUBLE;

}

if (!nodes[0].dataType.isNumberType()) {

throw Error.error(ErrorCode.X_42563);

}

dataType=nodes[0].dataType;

if (dataType.typeCode == Types.SQL_DECIMAL || dataType.typeCode == Types.SQL_NUMERIC) {

if (dataType.scale > 0) {

dataType=NumberType.getNumberType(dataType.typeCode,dataType.precision + 1,0);

}

}

break;

}

case FUNC_WIDTH_BUCKET:

{

nodeDataTypes=new Type[4];

nodeDataTypes[0]=Type.getAggregateType(nodes[0].dataType,nodes[1].dataType);

nodeDataTypes[0]=Type.getAggregateType(nodeDataTypes[0],nodes[2].dataType);

if (nodeDataTypes[0] == null) {

throw Error.error(ErrorCode.X_42567);

}

if (!nodeDataTypes[0].isNumberType() && !nodeDataTypes[0].isDateTimeType()) {

throw Error.error(ErrorCode.X_42563);

}

nodeDataTypes[1]=nodeDataTypes[0];

nodeDataTypes[2]=nodeDataTypes[0];

if (nodes[1].dataType == null) {

nodes[1].dataType=nodeDataTypes[1];

}

if (nodes[2].dataType == null) {

nodes[2].dataType=nodeDataTypes[2];

}

if (nodes[3].dataType == null) {

nodes[3].dataType=Type.SQL_INTEGER;

}

if (!nodes[3].dataType.isIntegralType()) {

throw Error.error(ErrorCode.X_42563);

}

nodeDataTypes[3]=nodes[3].dataType;

dataType=nodes[3].dataType;

break;

}

case FUNC_SUBSTRING_CHAR:

case FUNC_SUBSTRING_BINARY:

{

if (nodes[0].dataType == null) {

nodes[0].dataType=Type.SQL_VARCHAR_DEFAULT;

}

if (nodes[1].dataType == null) {

nodes[1].dataType=Type.SQL_NUMERIC;

}

if (!nodes[1].dataType.isNumberType()) {

throw Error.error(ErrorCode.X_42563);

}

if (nodes[2] != null) {

if (nodes[2].dataType == null) {

nodes[2].dataType=Type.SQL_NUMERIC;

}

if (!nodes[2].dataType.isNumberType()) {

throw Error.error(ErrorCode.X_42563);

}

}

dataType=nodes[0].dataType;

if (dataType.isCharacterType()) {

funcType=FUNC_SUBSTRING_CHAR;

if (dataType.typeCode == Types.SQL_CHAR) {

dataType=CharacterType.getCharacterType(Types.SQL_VARCHAR,dataType.precision,dataType.getCollation());

}

}

 else if (dataType.isBinaryType()) {

funcType=FUNC_SUBSTRING_BINARY;

}

 else {

throw Error.error(ErrorCode.X_42563);

}

if (nodes.length > 3 && nodes[3] != null) {

}

break;

}

case FUNC_FOLD_LOWER:

case FUNC_FOLD_UPPER:

if (nodes[0].dataType == null) {

nodes[0].dataType=Type.SQL_VARCHAR_DEFAULT;

}

dataType=nodes[0].dataType;

if (!dataType.isCharacterType()) {

throw Error.error(ErrorCode.X_42563);

}

break;

case FUNC_TRIM_CHAR:

case FUNC_TRIM_BINARY:

if (nodes[0] == null) {

nodes[0]=new ExpressionValue(ValuePool.getInt(Tokens.BOTH),Type.SQL_INTEGER);

}

if (nodes[2].dataType == null) {

nodes[2].dataType=Type.SQL_VARCHAR_DEFAULT;

}

dataType=nodes[2].dataType;

if (dataType.isCharacterType()) {

funcType=FUNC_TRIM_CHAR;

if (dataType.typeCode == Types.SQL_CHAR) {

dataType=CharacterType.getCharacterType(Types.SQL_VARCHAR,dataType.precision,dataType.getCollation());

}

if (nodes[1] == null) {

nodes[1]=new ExpressionValue(" ",Type.SQL_CHAR);

}

}

 else if (dataType.isBinaryType()) {

funcType=FUNC_TRIM_BINARY;

if (nodes[1] == null) {

nodes[1]=new ExpressionValue(new BinaryData(new byte[]{0},false),Type.SQL_BINARY);

}

}

 else {

throw Error.error(ErrorCode.X_42563);

}

break;

case FUNC_OVERLAY_CHAR:

case FUNC_OVERLAY_BINARY:

{

if (nodes[0].dataType == null) {

if (nodes[1].dataType == null) {

nodes[0].dataType=Type.SQL_VARCHAR_DEFAULT;

nodes[1].dataType=Type.SQL_VARCHAR_DEFAULT;

}

if (nodes[1].dataType.typeCode == Types.SQL_CLOB || nodes[1].dataType.isBinaryType()) {

nodes[0].dataType=nodes[1].dataType;

}

 else {

nodes[0].dataType=Type.SQL_VARCHAR_DEFAULT;

}

}

if (nodes[1].dataType == null) {

if (nodes[0].dataType.typeCode == Types.SQL_CLOB || nodes[0].dataType.isBinaryType()) {

nodes[1].dataType=nodes[0].dataType;

}

 else {

nodes[1].dataType=Type.SQL_VARCHAR_DEFAULT;

}

}

if (nodes[0].dataType.isCharacterType() && nodes[1].dataType.isCharacterType()) {

funcType=FUNC_OVERLAY_CHAR;

if (nodes[0].dataType.typeCode == Types.SQL_CLOB || nodes[1].dataType.typeCode == Types.SQL_CLOB) {

dataType=CharacterType.getCharacterType(Types.SQL_CLOB,nodes[0].dataType.precision + nodes[1].dataType.precision,nodes[0].dataType.getCollation());

}

 else {

dataType=CharacterType.getCharacterType(Types.SQL_VARCHAR,nodes[0].dataType.precision + nodes[1].dataType.precision,nodes[0].dataType.getCollation());

}

}

 else if (nodes[0].dataType.isBinaryType() && nodes[1].dataType.isBinaryType()) {

funcType=FUNC_OVERLAY_BINARY;

if (nodes[0].dataType.typeCode == Types.SQL_BLOB || nodes[1].dataType.typeCode == Types.SQL_BLOB) {

dataType=BinaryType.getBinaryType(Types.SQL_BLOB,nodes[0].dataType.precision + nodes[1].dataType.precision);

}

 else {

dataType=BinaryType.getBinaryType(Types.SQL_VARBINARY,nodes[0].dataType.precision + nodes[1].dataType.precision);

}

}

 else {

throw Error.error(ErrorCode.X_42563);

}

if (nodes[2].dataType == null) {

nodes[2].dataType=Type.SQL_NUMERIC;

}

if (!nodes[2].dataType.isNumberType()) {

throw Error.error(ErrorCode.X_42563);

}

if (nodes[3] != null) {

if (nodes[3].dataType == null) {

nodes[3].dataType=Type.SQL_NUMERIC;

}

if (!nodes[3].dataType.isNumberType()) {

throw Error.error(ErrorCode.X_42563);

}

}

break;

}

case FUNC_CURRENT_CATALOG:

case FUNC_CURRENT_DEFAULT_TRANSFORM_GROUP:

case FUNC_CURRENT_PATH:

case FUNC_CURRENT_ROLE:

case FUNC_CURRENT_SCHEMA:

case FUNC_CURRENT_TRANSFORM_GROUP_FOR_TYPE:

case FUNC_CURRENT_USER:

case FUNC_SESSION_USER:

case FUNC_SYSTEM_USER:

case FUNC_USER:

dataType=TypeInvariants.SQL_IDENTIFIER;

break;

case FUNC_VALUE:

break;

case FUNC_CURRENT_DATE:

if (session.database.sqlSyntaxOra) {

dataType=Type.SQL_TIMESTAMP_NO_FRACTION;

break;

}

dataType=Type.SQL_DATE;

break;

case FUNC_CURRENT_TIME:

{

int precision=DateTimeType.defaultTimeFractionPrecision;

if (nodes.length > 0 && nodes[0] != null) {

precision=((Integer)nodes[0].valueData).intValue();

}

dataType=DateTimeType.getDateTimeType(Types.SQL_TIME_WITH_TIME_ZONE,precision);

break;

}

case FUNC_CURRENT_TIMESTAMP:

{

int precision=DateTimeType.defaultTimestampFractionPrecision;

if (nodes.length > 0 && nodes[0] != null) {

precision=((Integer)nodes[0].valueData).intValue();

}

dataType=DateTimeType.getDateTimeType(Types.SQL_TIMESTAMP_WITH_TIME_ZONE,precision);

break;

}

case FUNC_LOCALTIME:

{

int precision=DateTimeType.defaultTimeFractionPrecision;

if (nodes.length > 0 && nodes[0] != null) {

precision=((Integer)nodes[0].valueData).intValue();

}

dataType=DateTimeType.getDateTimeType(Types.SQL_TIME,precision);

break;

}

case FUNC_LOCALTIMESTAMP:

{

int precision=DateTimeType.defaultTimestampFractionPrecision;

if (nodes.length > 0 && nodes[0] != null) {

precision=((Integer)nodes[0].valueData).intValue();

}

dataType=DateTimeType.getDateTimeType(Types.SQL_TIMESTAMP,precision);

break;

}

default :

throw Error.runtimeError(ErrorCode.U_S0500,"FunctionSQL");

}

}

Location: FunctionSQL.java

Content: 

public void setArguments(Expression[] newNodes){

  this.nodes=newNodes;

}

