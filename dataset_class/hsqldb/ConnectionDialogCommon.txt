Location: ConnectionDialogCommon.java

Content: 

/** 

 * Adds the new settings name if it does not nexist, or overwrites the old one.

 */

static void addToRecentConnectionSettings(Hashtable settings,ConnectionSetting newSetting) throws IOException {

  settings.put(newSetting.getName(),newSetting);

  ConnectionDialogCommon.storeRecentConnectionSettings(settings);

}

Location: ConnectionDialogCommon.java

Content: 

/** 

 * Removes the recent connection settings file store.

 */

static void deleteRecentConnectionSettings(){

  try {

    if (recentSettings == null) {

      setHomeDir();

      if (homedir == null) {

        return;

      }

      recentSettings=new File(homedir,fileName);

    }

    if (!recentSettings.exists()) {

      recentSettings=null;

      return;

    }

    recentSettings.delete();

    recentSettings=null;

  }

 catch (  Throwable t) {

  }

}

Location: ConnectionDialogCommon.java

Content: 

static String[][] getTypes(){

  return sJDBCTypes;

}

Location: ConnectionDialogCommon.java

Content: 

public static void setHomeDir(){

  if (homedir == null) {

    try {

      Class c=Class.forName("sun.security.action.GetPropertyAction");

      Constructor constructor=c.getConstructor(new Class[]{String.class});

      java.security.PrivilegedAction a=(java.security.PrivilegedAction)constructor.newInstance(new Object[]{"user.home"});

      homedir=(String)java.security.AccessController.doPrivileged(a);

    }

 catch (    Exception e) {

      System.err.println("No access to home directory.  Continuing without...");

    }

  }

}

Location: ConnectionDialogCommon.java

Content: 

/** 

 * Here's a non-secure method of storing recent connection settings.

 * @param settings ConnectionSetting[]

 * @throw IOException if something goes wrong while writing

 */

private static void storeRecentConnectionSettings(Hashtable settings){

  try {

    if (recentSettings == null) {

      setHomeDir();

      if (homedir == null) {

        return;

      }

      recentSettings=new File(homedir,fileName);

      if (!recentSettings.exists()) {

      }

    }

    if (settings == null || settings.size() == 0) {

      return;

    }

    FileOutputStream out=new FileOutputStream(recentSettings);

    ObjectOutputStream objStream=new ObjectOutputStream(out);

    Enumeration en=settings.elements();

    while (en.hasMoreElements()) {

      objStream.writeObject(en.nextElement());

    }

    objStream.flush();

    objStream.close();

    out.close();

  }

 catch (  Throwable t) {

  }

}

