Location: JDBCXAResource.java

Content: 

/** 

 * This commits the connection associated with <i>this</i> XAResource.

 * @throws XAException generically, since the more specific exceptionsrequire a JTA API to compile.

 * @param onePhase boolean

 */

public void commitThis(boolean onePhase) throws XAException {

  if (onePhase && state == XA_STATE_PREPARED) {

    throw new XAException("Transaction is in a 2-phase state when 1-phase is requested");

  }

  if ((!onePhase) && state != XA_STATE_PREPARED) {

    throw new XAException("Attempt to do a 2-phase commit when " + "transaction is not prepared");

  }

  try {

    connection.commit();

  }

 catch (  SQLException se) {

    throw new XAException(se.toString());

  }

  dispose();

}

Location: JDBCXAResource.java

Content: 

/** 

 * Per the JDBC 3.0 spec, this commits the transaction for the specified Xid, not necessarily for the transaction associated with this XAResource object.

 * @param xid Xid

 * @param onePhase boolean

 * @throws XAException on error

 */

public void commit(Xid xid,boolean onePhase) throws XAException {

  JDBCXAResource resource=xaDataSource.getResource(xid);

  if (resource == null) {

    throw new XAException("The XADataSource has no such Xid:  " + xid);

  }

  resource.commitThis(onePhase);

}

Location: JDBCXAResource.java

Content: 

private void dispose() throws XAException {

  state=XA_STATE_DISPOSED;

  xaDataSource.removeResource(xid);

  xid=null;

  try {

    connection.setAutoCommit(originalAutoCommitMode);

  }

 catch (  SQLException se) {

    throw new XAException(se.toString());

  }

}

Location: JDBCXAResource.java

Content: 

public void end(Xid xid,int flags) throws XAException {

  validateXid(xid);

  if (state != XA_STATE_STARTED) {

    throw new XAException("Invalid XAResource state");

  }

  if (flags == XAResource.TMSUCCESS) {

  }

  state=XA_STATE_ENDED;

}

Location: JDBCXAResource.java

Content: 

/** 

 * The XAResource API spec indicates implies that this is only for 2-phase transactions. I guess that one-phase transactions need to call rollback() to abort. I think we want this JDBCXAResource instance to be garbage-collectable after (a) this method is called, and (b) the tx manager releases its handle to it.

 * @see javax.transaction.xa.XAResource#forget(Xid)

 * @param xid Xid

 * @throws XAException on error

 */

public void forget(Xid xid) throws XAException {

  validateXid(xid);

  if (state != XA_STATE_PREPARED) {

    throw new XAException("Attempted to forget a XAResource that " + "is not in a heuristically completed state");

  }

  dispose();

  state=XA_STATE_INITIAL;

}

Location: JDBCXAResource.java

Content: 

/** 

 * @throws XAException on error

 * @return int

 */

public int getTransactionTimeout() throws XAException {

  throw new XAException("Transaction timeouts not implemented yet");

}

Location: JDBCXAResource.java

Content: 

JDBCXADataSource getXADataSource(){

  return xaDataSource;

}

Location: JDBCXAResource.java

Content: 

/** 

 * Stub. See implementation comment in the method for why this is not implemented yet.

 * @param xares XAResource

 * @return false.

 * @throws XAException on error

 */

public boolean isSameRM(XAResource xares) throws XAException {

  if (!(xares instanceof JDBCXAResource)) {

    return false;

  }

  return xaDataSource == ((JDBCXAResource)xares).getXADataSource();

}

Location: JDBCXAResource.java

Content: 

/** 

 * Constructs a resource using the given data source and connection.

 * @param xaDataSource JDBCXADataSource

 * @param connection A non-wrapped JDBCConnection which we need in order todo real (non-wrapped) commits, rollbacks, etc. This is not for the end user. We need the real thing.

 */

public JDBCXAResource(JDBCXADataSource xaDataSource,JDBCConnection connection){

  this.connection=connection;

  this.xaDataSource=xaDataSource;

}

Location: JDBCXAResource.java

Content: 

public int prepareThis() throws XAException {

  if (state != XA_STATE_ENDED) {

    throw new XAException("Invalid XAResource state");

  }

  try {

    connection.getSession().prepareCommit();

  }

 catch (  HsqlException e) {

    state=XA_STATE_PREPARED;

    throw new XAException(e.getMessage());

  }

  state=XA_STATE_PREPARED;

  return XA_OK;

}

Location: JDBCXAResource.java

Content: 

/** 

 * Vote on whether to commit the global transaction. We assume Xid may be different from this, as in commit() method.

 * @throws XAException to vote negative.

 * @return commitType of XA_RDONLY or XA_OK. (Actually only XA_OK now).

 * @param xid Xid

 */

public int prepare(Xid xid) throws XAException {

  JDBCXAResource resource=xaDataSource.getResource(xid);

  if (resource == null) {

    throw new XAException("The XADataSource has no such Xid:  " + xid);

  }

  return resource.prepareThis();

}

Location: JDBCXAResource.java

Content: 

/** 

 * Obtain a list of Xids of the current <i>resource manager</i> for XAResources currently in the 'prepared' * state. According to the JDBC 3.0 spec, the Xids of a specific resource manager are those of the same XADataSource.

 * @param flag int

 * @throws XAException on error

 * @return Xid[]

 */

public Xid[] recover(int flag) throws XAException {

  return xaDataSource.getPreparedXids();

}

Location: JDBCXAResource.java

Content: 

/** 

 * This rolls back the connection associated with <i>this</i> XAResource.

 * @throws javax.transaction.xa.XAException generically, since the morespecific exceptions require a JTA API to compile.

 */

public void rollbackThis() throws XAException {

  if (state != XA_STATE_PREPARED && state != XA_STATE_ENDED) {

    throw new XAException("Invalid XAResource state");

  }

  try {

    connection.rollback();

  }

 catch (  SQLException se) {

    throw new XAException(se.toString());

  }

  dispose();

}

Location: JDBCXAResource.java

Content: 

/** 

 * Per the JDBC 3.0 spec, this rolls back the transaction for the specified Xid, not necessarily for the transaction associated with this XAResource object.

 * @param xid Xid

 * @throws XAException on error

 */

public void rollback(Xid xid) throws XAException {

  JDBCXAResource resource=xaDataSource.getResource(xid);

  if (resource == null) {

    throw new XAException("The XADataSource has no such Xid in prepared state:  " + xid);

  }

  resource.rollbackThis();

}

Location: JDBCXAResource.java

Content: 

void setConnection(JDBCConnection userConnection){

  connection=userConnection;

}

Location: JDBCXAResource.java

Content: 

/** 

 * @param seconds int

 * @throws XAException on error

 * @return boolean

 */

public boolean setTransactionTimeout(int seconds) throws XAException {

  return false;

}

Location: JDBCXAResource.java

Content: 

public void start(Xid xid,int flags) throws XAException {

  if (state != XA_STATE_INITIAL && state != XA_STATE_DISPOSED && state != XA_STATE_ENDED) {

    throw new XAException("Invalid XAResource state");

  }

  if (xaDataSource == null) {

    throw new XAException("JDBCXAResource has not been associated with a XADataSource");

  }

  if (xid == null) {

    throw new XAException("Null Xid");

  }

  try {

    if (connection.getAutoCommit()) {

      originalAutoCommitMode=true;

      connection.setAutoCommit(false);

    }

  }

 catch (  SQLException se) {

    throw new XAException(se.toString());

  }

  if (!xid.equals(this.xid)) {

    this.xid=xid;

    xaDataSource.addResource(this.xid,this);

  }

  state=XA_STATE_STARTED;

}

Location: JDBCXAResource.java

Content: 

/** 

 * @throws XAException if the given Xid is the not the Xid of the currenttransaction for this XAResource object.

 * @param xid Xid

 */

private void validateXid(Xid xid) throws XAException {

  if (xid == null) {

    throw new XAException("Null Xid");

  }

  if (this.xid == null) {

    throw new XAException("There is no live transaction for this XAResource");

  }

  if (!xid.equals(this.xid)) {

    throw new XAException("Given Xid is not that associated with this XAResource object");

  }

}

Location: JDBCXAResource.java

Content: 

public boolean withinGlobalTransaction(){

  return state == XA_STATE_STARTED;

}

