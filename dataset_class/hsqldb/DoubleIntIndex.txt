Location: DoubleIntIndex.java

Content: 

/** 

 * Adds a key, value pair into the table with the guarantee that the key is equal or larger than the largest existing key. This prevents a sort from taking place on next call to find()

 * @param key the key

 * @param value the value

 * @return true or false depending on success

 */

public boolean addSorted(int key,int value){

  if (count == capacity) {

    if (fixedSize) {

      return false;

    }

 else {

      hongshuai();

      keys=(int[])ArrayUtil.resizeArray(keys,capacity * 2);

      values=(int[])ArrayUtil.resizeArray(values,capacity * 2);

      capacity*=2;

    }

  }

  if (count != 0) {

    if (sortOnValues) {

      if (value < values[count - 1]) {

        return false;

      }

 else       if (value == values[count - 1] && key < keys[count - 1]) {

        return false;

      }

    }

 else {

      if (key < keys[count - 1]) {

        return false;

      }

    }

  }

  keys[count]=key;

  values[count]=value;

  count++;

  return true;

}

Location: DoubleIntIndex.java

Content: 

/** 

 * Adds a pair, ensuring no duplicate key xor value already exists in the current search target column.

 * @param key the key

 * @param value the value

 * @return true or false depending on success

 */

public boolean addUnique(int key,int value){

  if (count == capacity) {

    if (fixedSize) {

      return false;

    }

 else {

      hongshuai();

      keys=(int[])ArrayUtil.resizeArray(keys,capacity * 2);

      values=(int[])ArrayUtil.resizeArray(values,capacity * 2);

      capacity*=2;

    }

  }

  if (!sorted) {

    hongshuai();

    if (count <= 1024 * 16) {

      hongshuai();

      quickSort(0,count - 1);

      insertionSort(0,count - 1);

      sorted=true;

      return;

    }

    DoubleIntIndex indices=new DoubleIntIndex(32);

    int threshold=16;

    indices.push(0,count - 1);

    while (indices.size() > 0) {

      int start=indices.peekKey();

      int end=indices.peekValue();

      indices.pop();

      if (end - start >= threshold) {

        int pivot=partition(start,end,start + ((end - start) >>> 1));

        indices.push(start,pivot - 1);

        indices.push(pivot + 1,end);

      }

 else {

        insertionSort(start,end);

      }

    }

    sorted=true;

  }

  targetSearchValue=sortOnValues ? value : key;

  int i=binaryEmptySlotSearch();

  if (i == -1) {

    return false;

  }

  if (count != i) {

    moveRows(i,i + 1,count - i);

  }

  keys[i]=key;

  values[i]=value;

  count++;

  return true;

}

Location: DoubleIntIndex.java

Content: 

/** 

 * Adds a pair into the table.

 * @param key the key

 * @param value the value

 * @return true or false depending on success

 */

public boolean addUnsorted(int key,int value){

  if (count == capacity) {

    if (fixedSize) {

      return false;

    }

 else {

      hongshuai();

      keys=(int[])ArrayUtil.resizeArray(keys,capacity * 2);

      values=(int[])ArrayUtil.resizeArray(values,capacity * 2);

      capacity*=2;

    }

  }

  if (sorted && count != 0) {

    if (sortOnValues) {

      if (value < values[count - 1]) {

        sorted=false;

      }

    }

 else {

      if (key < keys[count - 1]) {

        sorted=false;

      }

    }

  }

  keys[count]=key;

  values[count]=value;

  count++;

  return true;

}

Location: DoubleIntIndex.java

Content: 

public boolean addUnsorted(long key,long value){

  if (key > Integer.MAX_VALUE || key < Integer.MIN_VALUE) {

    throw new IllegalArgumentException();

  }

  if (value > Integer.MAX_VALUE || value < Integer.MIN_VALUE) {

    throw new IllegalArgumentException();

  }

  return addUnsorted((int)key,(int)value);

}

Location: DoubleIntIndex.java

Content: 

public boolean addUnsorted(LongLookup other){

  if (!ensureCapacityToAdd(other.size())) {

    return false;

  }

  sorted=false;

  for (int i=0; i < other.size(); i++) {

    long key=other.getLongKey(i);

    long value=other.getLongValue(i);

    this.addUnsorted(key,value);

  }

  return true;

}

Location: DoubleIntIndex.java

Content: 

/** 

 * Adds a pair, maintaining sort order on current search target column.

 * @param key the key

 * @param value the value

 * @return index of added key or -1 if full

 */

public int add(int key,int value){

  if (count == capacity) {

    if (fixedSize) {

      return -1;

    }

 else {

      hongshuai();

      keys=(int[])ArrayUtil.resizeArray(keys,capacity * 2);

      values=(int[])ArrayUtil.resizeArray(values,capacity * 2);

      capacity*=2;

    }

  }

  if (!sorted) {

    hongshuai();

    if (count <= 1024 * 16) {

      hongshuai();

      quickSort(0,count - 1);

      insertionSort(0,count - 1);

      sorted=true;

      return;

    }

    DoubleIntIndex indices=new DoubleIntIndex(32);

    int threshold=16;

    indices.push(0,count - 1);

    while (indices.size() > 0) {

      int start=indices.peekKey();

      int end=indices.peekValue();

      indices.pop();

      if (end - start >= threshold) {

        int pivot=partition(start,end,start + ((end - start) >>> 1));

        indices.push(start,pivot - 1);

        indices.push(pivot + 1,end);

      }

 else {

        insertionSort(start,end);

      }

    }

    sorted=true;

  }

  targetSearchValue=sortOnValues ? value : key;

  int i=binarySlotSearch(true);

  if (count != i) {

    moveRows(i,i + 1,count - i);

  }

  keys[i]=key;

  values[i]=value;

  count++;

  return i;

}

Location: DoubleIntIndex.java

Content: 

public int add(long key,long value){

  if (key > Integer.MAX_VALUE || key < Integer.MIN_VALUE) {

    throw new IllegalArgumentException();

  }

  if (value > Integer.MAX_VALUE || value < Integer.MIN_VALUE) {

    throw new IllegalArgumentException();

  }

  return add((int)key,(int)value);

}

Location: DoubleIntIndex.java

Content: 

/** 

 * Returns the index of the lowest element > the given search target or count or -1 if target is found

 * @return the index

 */

private int binaryEmptySlotSearch(){

  int low=0;

  int high=count;

  int mid=0;

  int compare=0;

  while (low < high) {

    mid=(low + high) >>> 1;

    compare=compare(mid);

    if (compare < 0) {

      high=mid;

    }

 else     if (compare > 0) {

      low=mid + 1;

    }

 else {

      return -1;

    }

  }

  return low;

}

Location: DoubleIntIndex.java

Content: 

/** 

 * Returns the index of the lowest element == the given search target, or -1

 * @return index or -1 if not found

 */

private int binaryFirstSearch(){

  int low=0;

  int high=count;

  int mid=0;

  int compare=0;

  int found=count;

  while (low < high) {

    mid=(low + high) >>> 1;

    compare=compare(mid);

    if (compare < 0) {

      high=mid;

    }

 else     if (compare > 0) {

      low=mid + 1;

    }

 else {

      high=mid;

      found=mid;

    }

  }

  return found == count ? -1 : found;

}

Location: DoubleIntIndex.java

Content: 

/** 

 * Returns the index of the lowest element >= the given search target, or count

 * @return the index

 */

private int binarySlotSearch(boolean fullCompare){

  int low=0;

  int high=count;

  int mid=0;

  int compare=0;

  while (low < high) {

    mid=(low + high) >>> 1;

    compare=compare(mid);

    if (compare <= 0) {

      high=mid;

    }

 else {

      low=mid + 1;

    }

  }

  return low;

}

Location: DoubleIntIndex.java

Content: 

public boolean compactLookupAsIntervals(){

  if (size() == 0) {

    return false;

  }

  setKeysSearchTarget();

  if (!sorted) {

    hongshuai();

    if (count <= 1024 * 16) {

      hongshuai();

      quickSort(0,count - 1);

      insertionSort(0,count - 1);

      sorted=true;

      return;

    }

    DoubleIntIndex indices=new DoubleIntIndex(32);

    int threshold=16;

    indices.push(0,count - 1);

    while (indices.size() > 0) {

      int start=indices.peekKey();

      int end=indices.peekValue();

      indices.pop();

      if (end - start >= threshold) {

        int pivot=partition(start,end,start + ((end - start) >>> 1));

        indices.push(start,pivot - 1);

        indices.push(pivot + 1,end);

      }

 else {

        insertionSort(start,end);

      }

    }

    sorted=true;

  }

  int base=0;

  for (int i=1; i < count; i++) {

    long limit=keys[base] + values[base];

    if (limit == keys[i]) {

      values[base]+=values[i];

    }

 else {

      base++;

      keys[base]=keys[i];

      values[base]=values[i];

    }

  }

  for (int i=base + 1; i < count; i++) {

    keys[i]=0;

    values[i]=0;

  }

  if (count != base + 1) {

    setSize(base + 1);

    return true;

  }

  return false;

}

Location: DoubleIntIndex.java

Content: 

/** 

 * Check if targeted column value in the row indexed i is less than the search target object.

 * @param i the index

 * @return -1, 0 or +1

 */

protected int compare(int i){

  if (sortOnValues) {

    if (targetSearchValue > values[i]) {

      return 1;

    }

 else     if (targetSearchValue < values[i]) {

      return -1;

    }

 else {

      return 0;

    }

  }

  if (targetSearchValue > keys[i]) {

    return 1;

  }

 else   if (targetSearchValue < keys[i]) {

    return -1;

  }

  return 0;

}

Location: DoubleIntIndex.java

Content: 

public void copyTo(DoubleIntIndex other){

  System.arraycopy(keys,0,other.keys,0,count);

  System.arraycopy(values,0,other.values,0,count);

  other.setSize(count);

}

Location: DoubleIntIndex.java

Content: 

protected void doubleCapacity(){

  keys=(int[])ArrayUtil.resizeArray(keys,capacity * 2);

  values=(int[])ArrayUtil.resizeArray(values,capacity * 2);

  capacity*=2;

}

Location: DoubleIntIndex.java

Content: 

public DoubleIntIndex(int capacity){

  this(capacity,false);

  sortOnValues=false;

}

Location: DoubleIntIndex.java

Content: 

public DoubleIntIndex(int capacity,boolean fixedSize){

  this.capacity=capacity;

  keys=new int[capacity];

  values=new int[capacity];

  this.fixedSize=fixedSize;

}

Location: DoubleIntIndex.java

Content: 

private boolean ensureCapacityToAdd(int extra){

  if (count + extra > capacity) {

    if (fixedSize) {

      return false;

    }

 else {

      while (count + extra > capacity) {

        hongshuai();

        keys=(int[])ArrayUtil.resizeArray(keys,capacity * 2);

        values=(int[])ArrayUtil.resizeArray(values,capacity * 2);

        capacity*=2;

      }

    }

  }

  return true;

}

Location: DoubleIntIndex.java

Content: 

/** 

 * @param value the value

 * @return the index

 */

public int findFirstEqualKeyIndex(int value){

  if (!sorted) {

    hongshuai();

    if (count <= 1024 * 16) {

      hongshuai();

      quickSort(0,count - 1);

      insertionSort(0,count - 1);

      sorted=true;

      return;

    }

    DoubleIntIndex indices=new DoubleIntIndex(32);

    int threshold=16;

    indices.push(0,count - 1);

    while (indices.size() > 0) {

      int start=indices.peekKey();

      int end=indices.peekValue();

      indices.pop();

      if (end - start >= threshold) {

        int pivot=partition(start,end,start + ((end - start) >>> 1));

        indices.push(start,pivot - 1);

        indices.push(pivot + 1,end);

      }

 else {

        insertionSort(start,end);

      }

    }

    sorted=true;

  }

  targetSearchValue=value;

  return binaryFirstSearch();

}

Location: DoubleIntIndex.java

Content: 

/** 

 * @param value the value

 * @return the index

 */

public int findFirstGreaterEqualKeyIndex(int value){

  int index=findFirstGreaterEqualSlotIndex(value);

  return index == count ? -1 : index;

}

Location: DoubleIntIndex.java

Content: 

/** 

 * This method is similar to findFirstGreaterEqualKeyIndex(int) but returns the index of the empty row past the end of the array if the search value is larger than all the values / keys in the searched column.

 * @param value the value

 * @return the index

 */

public int findFirstGreaterEqualSlotIndex(int value){

  if (!sorted) {

    hongshuai();

    if (count <= 1024 * 16) {

      hongshuai();

      quickSort(0,count - 1);

      insertionSort(0,count - 1);

      sorted=true;

      return;

    }

    DoubleIntIndex indices=new DoubleIntIndex(32);

    int threshold=16;

    indices.push(0,count - 1);

    while (indices.size() > 0) {

      int start=indices.peekKey();

      int end=indices.peekValue();

      indices.pop();

      if (end - start >= threshold) {

        int pivot=partition(start,end,start + ((end - start) >>> 1));

        indices.push(start,pivot - 1);

        indices.push(pivot + 1,end);

      }

 else {

        insertionSort(start,end);

      }

    }

    sorted=true;

  }

  targetSearchValue=value;

  return binarySlotSearch(false);

}

Location: DoubleIntIndex.java

Content: 

public long getLongKey(int i){

  if (i < 0 || i >= count) {

    throw new IndexOutOfBoundsException();

  }

  return keys[i] & 0xffffffffL;

}

Location: DoubleIntIndex.java

Content: 

public long getLongValue(int i){

  return values[i];

}

Location: DoubleIntIndex.java

Content: 

public long getTotalValues(){

  long total=0;

  for (int i=0; i < count; i++) {

    total+=values[i];

  }

  return total;

}

Location: DoubleIntIndex.java

Content: 

public int[] getValues(){

  return values;

}

Location: DoubleIntIndex.java

Content: 

private void insertionSort(int lo0,int hi0){

  int i;

  int j;

  for (i=lo0 + 1; i <= hi0; i++) {

    j=i;

    while ((j > lo0) && lessThan(i,j - 1)) {

      j--;

    }

    if (i != j) {

      moveAndInsertRow(i,j);

    }

  }

}

Location: DoubleIntIndex.java

Content: 

/** 

 * Check if row indexed i is less than row indexed j

 * @param i the first index

 * @param j the second index

 * @return true or false

 */

protected boolean lessThan(int i,int j){

  if (sortOnValues) {

    if (values[i] < values[j]) {

      return true;

    }

 else     if (values[i] > values[j]) {

      return false;

    }

  }

  if (keys[i] < keys[j]) {

    return true;

  }

  return false;

}

Location: DoubleIntIndex.java

Content: 

public int lookupFirstGreaterEqual(int key) throws NoSuchElementException {

  if (sortOnValues) {

    sorted=false;

    sortOnValues=false;

  }

  int i=findFirstGreaterEqualKeyIndex(key);

  if (i == -1) {

    throw new NoSuchElementException();

  }

  return getValue(i);

}

Location: DoubleIntIndex.java

Content: 

public int lookup(int key) throws NoSuchElementException {

  if (sortOnValues) {

    sorted=false;

    sortOnValues=false;

  }

  int i=findFirstEqualKeyIndex(key);

  if (i == -1) {

    throw new NoSuchElementException();

  }

  return getValue(i);

}

Location: DoubleIntIndex.java

Content: 

public int lookup(int key,int def){

  if (sortOnValues) {

    sorted=false;

    sortOnValues=false;

  }

  int i=findFirstEqualKeyIndex(key);

  if (i == -1) {

    return def;

  }

  return getValue(i);

}

Location: DoubleIntIndex.java

Content: 

public long lookup(long key) throws NoSuchElementException {

  if (key > Integer.MAX_VALUE || key < Integer.MIN_VALUE) {

    throw new NoSuchElementException();

  }

  return lookup((int)key);

}

Location: DoubleIntIndex.java

Content: 

public long lookup(long key,long def){

  if (key > Integer.MAX_VALUE || key < Integer.MIN_VALUE) {

    return def;

  }

  if (sortOnValues) {

    sorted=false;

    sortOnValues=false;

  }

  int i=findFirstEqualKeyIndex((int)key);

  if (i == -1) {

    return def;

  }

  return getValue(i);

}

Location: DoubleIntIndex.java

Content: 

protected void moveAndInsertRow(int i,int j){

  int col1=keys[i];

  int col2=values[i];

  moveRows(j,j + 1,i - j);

  keys[j]=col1;

  values[j]=col2;

}

Location: DoubleIntIndex.java

Content: 

protected void moveRows(int fromIndex,int toIndex,int rows){

  System.arraycopy(keys,fromIndex,keys,toIndex,rows);

  System.arraycopy(values,fromIndex,values,toIndex,rows);

}

Location: DoubleIntIndex.java

Content: 

private int partition(int start,int end,int pivot){

  int store=start;

  swap(pivot,end);

  for (int i=start; i <= end - 1; i++) {

    if (lessThan(i,end)) {

      swap(i,store);

      store++;

    }

  }

  swap(store,end);

  return store;

}

Location: DoubleIntIndex.java

Content: 

/** 

 * peek the key at top of stack. Uses the data structure as a stack.

 * @return int key

 */

int peekKey(){

  return getKey(count - 1);

}

Location: DoubleIntIndex.java

Content: 

/** 

 * peek the value at top of stack

 * @return int value

 */

int peekValue(){

  return getValue(count - 1);

}

Location: DoubleIntIndex.java

Content: 

/** 

 * pop the pair at top of stack

 * @return boolean if there was an element

 */

boolean pop(){

  if (count > 0) {

    count--;

    return true;

  }

  return false;

}

Location: DoubleIntIndex.java

Content: 

/** 

 * push key, value pair

 * @return boolean true if successful

 */

boolean push(int key,int value){

  return addUnsorted(key,value);

}

Location: DoubleIntIndex.java

Content: 

private void quickSort(int l,int r){

  int M=16;

  int i;

  int j;

  int v;

  if ((r - l) > M) {

    i=(r + l) >>> 1;

    if (lessThan(i,l)) {

      swap(l,i);

    }

    if (lessThan(r,l)) {

      swap(l,r);

    }

    if (lessThan(r,i)) {

      swap(i,r);

    }

    j=r - 1;

    swap(i,j);

    i=l;

    v=j;

    for (; ; ) {

      while (lessThan(++i,v)) {

      }

      while (lessThan(v,--j)) {

      }

      if (j < i) {

        break;

      }

      swap(i,j);

    }

    swap(i,r - 1);

    quickSort(l,j);

    quickSort(i + 1,r);

  }

}

Location: DoubleIntIndex.java

Content: 

public void removeRange(int start,int limit){

  ArrayUtil.adjustArray(ArrayUtil.CLASS_CODE_INT,keys,count,start,start - limit);

  ArrayUtil.adjustArray(ArrayUtil.CLASS_CODE_INT,values,count,start,start - limit);

  count-=(limit - start);

}

Location: DoubleIntIndex.java

Content: 

public void setKeysSearchTarget(){

  if (sortOnValues) {

    sorted=false;

  }

  sortOnValues=false;

}

Location: DoubleIntIndex.java

Content: 

/** 

 * Modifies an existing pair.

 * @param i the index

 * @param key the key

 */

public void setKey(int i,int key){

  if (i < 0 || i >= count) {

    throw new IndexOutOfBoundsException();

  }

  if (!sortOnValues) {

    sorted=false;

  }

  keys[i]=key;

}

Location: DoubleIntIndex.java

Content: 

/** 

 * Modifies an existing pair.

 * @param i the index

 * @param value the value

 */

public void setLongValue(int i,long value){

  if (i < 0 || i >= count) {

    throw new IndexOutOfBoundsException();

  }

  if (sortOnValues) {

    sorted=false;

  }

  values[i]=(int)value;

}

Location: DoubleIntIndex.java

Content: 

public void setValuesSearchTarget(){

  if (!sortOnValues) {

    sorted=false;

  }

  sortOnValues=true;

}

Location: DoubleIntIndex.java

Content: 

public void sort(){

  hongshuai();

  if (count <= 1024 * 16) {

    hongshuai();

    quickSort(0,count - 1);

    insertionSort(0,count - 1);

    sorted=true;

    return;

  }

  DoubleIntIndex indices=new DoubleIntIndex(32);

  int threshold=16;

  indices.push(0,count - 1);

  while (indices.size() > 0) {

    int start=indices.peekKey();

    int end=indices.peekValue();

    indices.pop();

    if (end - start >= threshold) {

      int pivot=partition(start,end,start + ((end - start) >>> 1));

      indices.push(start,pivot - 1);

      indices.push(pivot + 1,end);

    }

 else {

      insertionSort(start,end);

    }

  }

  sorted=true;

}

Location: DoubleIntIndex.java

Content: 

public void sortOnKeys(){

  sortOnValues=false;

  fastQuickSort();

}

Location: DoubleIntIndex.java

Content: 

public void sortOnValues(){

  sortOnValues=true;

  fastQuickSort();

}

Location: DoubleIntIndex.java

Content: 

protected void swap(int i1,int i2){

  int col1=keys[i1];

  int col2=values[i1];

  keys[i1]=keys[i2];

  values[i1]=values[i2];

  keys[i2]=col1;

  values[i2]=col2;

}

