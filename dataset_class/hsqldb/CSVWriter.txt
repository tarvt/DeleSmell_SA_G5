Location: CSVWriter.java

Content: 

/** 

 * closes the csv file.

 */

public void close() throws IOException {

  this.writer.close();

}

Location: CSVWriter.java

Content: 

/** 

 * constructor. creates a csv file for writing data to it

 * @param file the file to write data to

 * @param encoding encoding to use or null (=defualt)

 */

public CSVWriter(File file,String encoding) throws IOException {

  if (encoding == null) {

    encoding=System.getProperty("file.encoding");

  }

  FileOutputStream fout=new FileOutputStream(file);

  writer=new OutputStreamWriter(fout,encoding);

}

Location: CSVWriter.java

Content: 

private void doWriteData(String[] values) throws IOException {

  for (int i=0; i < values.length; i++) {

    if (i > 0) {

      this.writer.write(";");

    }

    if (values[i] != null) {

      this.writer.write("\"");

      this.writer.write(this.toCsvValue(values[i]));

      this.writer.write("\"");

    }

  }

  this.writer.write(newline);

  this.nbrRows++;

}

Location: CSVWriter.java

Content: 

private String toCsvValue(String str){

  StringBuffer sb=new StringBuffer();

  for (int i=0; i < str.length(); i++) {

    char c=str.charAt(i);

    sb.append(c);

switch (c) {

case '"':

      sb.append('"');

    break;

}

}

return sb.toString();

}

Location: CSVWriter.java

Content: 

/** 

 * writes a data-record to the file. note that data[] must have same number of elements as the header had.

 * @param data data to write to csv-file

 */

public void writeData(String[] data) throws IOException {

  doWriteData(data);

}

Location: CSVWriter.java

Content: 

/** 

 * writes the csv header (fieldnames). should be called after construction one time.

 * @param header String[] with fieldnames

 */

public void writeHeader(String[] header) throws IOException {

  this.nbrCols=header.length;

  doWriteData(header);

}

