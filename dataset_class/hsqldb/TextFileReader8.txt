Location: TextFileReader8.java

Content: 

/** 

 * Searches from file pointer, pos, and finds the beginning of the first line that contains any non-space character. Increments the row counter when a blank line is skipped. If none found return -1

 */

private long findNextUsedLinePos(){

  try {

    long firstPos=position;

    long currentPos=position;

    boolean wasCR=false;

    dataFile.seek(position);

    while (true) {

      int c=readChar();

      currentPos+=getByteSizeForChar();

switch (c) {

case TextFileSettings.CR_CHAR:

        wasCR=true;

      break;

case TextFileSettings.LF_CHAR:

    wasCR=false;

  ((RowInputText)rowIn).skippedLine();

firstPos=currentPos;

break;

case ' ':

if (wasCR) {

wasCR=false;

((RowInputText)rowIn).skippedLine();

}

break;

case -1:

return -1;

default :

if (wasCR) {

wasCR=false;

((RowInputText)rowIn).skippedLine();

}

return firstPos;

}

}

}

 catch (IOException e) {

throw Error.error(ErrorCode.TEXT_FILE_IO,e);

}

}

Location: TextFileReader8.java

Content: 

int getByteSizeForChar(){

  return 1;

}

Location: TextFileReader8.java

Content: 

public String getHeaderLine(){

  return header;

}

Location: TextFileReader8.java

Content: 

static TextFileReader newTextFileReader(RandomAccessInterface dataFile,TextFileSettings textFileSettings,RowInputInterface rowIn,boolean isReadOnly){

  if (textFileSettings.isUTF16) {

    return new TextFileReader16(dataFile,textFileSettings,rowIn,isReadOnly);

  }

 else {

    return new TextFileReader8(dataFile,textFileSettings,rowIn,isReadOnly);

  }

}

Location: TextFileReader8.java

Content: 

public void readHeaderLine(){

  boolean complete=false;

  boolean wasCR=false;

  boolean wasNormal=false;

  buffer.reset();

  try {

    dataFile.seek(position);

  }

 catch (  IOException e) {

    throw Error.error(ErrorCode.TEXT_FILE_IO,e);

  }

  while (!complete) {

    wasNormal=false;

    int c;

    try {

      c=readChar();

      if (c == -1) {

        if (buffer.size() == 0) {

          return;

        }

        complete=true;

        if (!isReadOnly) {

          dataFile.write(textFileSettings.bytesForLineEnd,0,textFileSettings.bytesForLineEnd.length);

          for (int i=0; i < textFileSettings.bytesForLineEnd.length; i++) {

            buffer.write(textFileSettings.bytesForLineEnd[i]);

          }

        }

        break;

      }

    }

 catch (    IOException e) {

      throw Error.error(ErrorCode.TEXT_FILE);

    }

switch (c) {

case TextFileSettings.CR_CHAR:

      wasCR=true;

    break;

case TextFileSettings.LF_CHAR:

  complete=true;

break;

default :

wasNormal=true;

complete=wasCR;

wasCR=false;

}

if (wasCR || complete) {

continue;

}

buffer.write(c);

}

if (wasNormal) {

buffer.setSize(buffer.size() - 1);

}

try {

header=buffer.getString();

}

 catch (UnsupportedEncodingException e) {

throw Error.error(ErrorCode.X_S0531);

}

position+=buffer.getByteSize();

}

Location: TextFileReader8.java

Content: 

public RowInputInterface readObject(){

  boolean hasQuote=false;

  boolean complete=false;

  boolean wasCR=false;

  boolean wasNormal=false;

  long currentPos;

  long fieldPos;

  boolean quotedField=false;

  buffer.reset();

  position=findNextUsedLinePos();

  if (position == -1) {

    return null;

  }

  try {

    dataFile.seek(position);

    currentPos=0;

    fieldPos=-1;

    while (!complete) {

      int c=readChar();

      wasNormal=false;

      if (c == -1) {

        if (buffer.size() == 0) {

          return null;

        }

        complete=true;

        if (wasCR) {

          break;

        }

        if (!isReadOnly) {

          dataFile.write(textFileSettings.bytesForLineEnd,0,textFileSettings.bytesForLineEnd.length);

          for (int i=0; i < textFileSettings.bytesForLineEnd.length; i++) {

            buffer.write(textFileSettings.bytesForLineEnd[i]);

          }

        }

        break;

      }

      if (c == textFileSettings.singleSeparator) {

        if (!hasQuote) {

          fieldPos=currentPos;

          quotedField=false;

          hasQuote=false;

        }

      }

 else       if (c == textFileSettings.quoteChar) {

        wasNormal=true;

        complete=wasCR;

        wasCR=false;

        if (textFileSettings.isQuoted) {

          if (textFileSettings.singleSeparator == 0 || currentPos == fieldPos + 1) {

            quotedField=true;

          }

        }

        if (quotedField) {

          hasQuote=!hasQuote;

        }

      }

 else {

switch (c) {

case TextFileSettings.CR_CHAR:

          wasCR=!hasQuote;

        break;

case TextFileSettings.LF_CHAR:

      complete=!hasQuote;

    break;

default :

  wasNormal=true;

complete=wasCR;

wasCR=false;

}

}

buffer.write(c);

currentPos++;

}

if (complete) {

if (wasNormal) {

buffer.setSize(buffer.size() - 1);

}

String rowString;

try {

rowString=buffer.getString();

}

 catch (UnsupportedEncodingException e) {

throw Error.error(ErrorCode.X_S0531);

}

((RowInputText)rowIn).setSource(rowString,position,buffer.getByteSize());

position+=rowIn.getSize();

return rowIn;

}

return null;

}

 catch (IOException e) {

throw Error.error(ErrorCode.TEXT_FILE_IO,e);

}

}

Location: TextFileReader8.java

Content: 

private void skipBOM(){

  try {

    if (textFileSettings.isUTF8) {

      dataFile.seek(0);

      if (dataFile.read() == 0xEF && dataFile.read() == 0xBB && dataFile.read() == 0xBF) {

        position=3;

      }

    }

  }

 catch (  IOException e) {

    throw Error.error(ErrorCode.TEXT_FILE_IO,e);

  }

}

Location: TextFileReader8.java

Content: 

TextFileReader8(){

}

Location: TextFileReader8.java

Content: 

TextFileReader8(RandomAccessInterface dataFile,TextFileSettings textFileSettings,RowInputInterface rowIn,boolean isReadOnly){

  this.dataFile=dataFile;

  this.textFileSettings=textFileSettings;

  this.rowIn=rowIn;

  this.isReadOnly=isReadOnly;

  this.buffer=StringCreator.getStringCreator(byte.class,textFileSettings.charEncoding);

  skipBOM();

}

