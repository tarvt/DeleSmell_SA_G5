Location: TransactionManager2PL.java

Content: 

public RowAction addDeleteAction(Session session,Table table,PersistentStore store,Row row,int[] colMap){

  RowAction action;

  writeLock.lock();

  try {

    action=RowAction.addDeleteAction(session,table,row,colMap);

  }

  finally {

    writeLock.unlock();

  }

  session.rowActionList.add(action);

  store.delete(session,row);

  row.rowAction=null;

  return action;

}

Location: TransactionManager2PL.java

Content: 

public void addInsertAction(Session session,Table table,PersistentStore store,Row row,int[] changedColumns){

  RowAction action=row.rowAction;

  if (action == null) {

    throw Error.runtimeError(ErrorCode.GENERAL_ERROR,"null insert action ");

  }

  store.indexRow(session,row);

  if (table.persistenceScope == Table.SCOPE_ROUTINE) {

    row.rowAction=null;

    return;

  }

  session.rowActionList.add(action);

  row.rowAction=null;

}

Location: TransactionManager2PL.java

Content: 

public void addTransactionInfo(CachedObject object){

}

Location: TransactionManager2PL.java

Content: 

public void beginActionResume(Session session){

  session.actionTimestamp=getNextGlobalChangeTimestamp();

  session.actionStartTimestamp=session.actionTimestamp;

  if (!session.isTransaction) {

    session.transactionTimestamp=session.actionTimestamp;

    session.isPreTransaction=false;

    session.isTransaction=true;

    transactionCount++;

  }

}

Location: TransactionManager2PL.java

Content: 

/** 

 * add session to the end of queue when a transaction starts (depending on isolation mode)

 */

public void beginAction(Session session,Statement cs){

  writeLock.lock();

  try {

    if (hasExpired) {

      session.redoAction=true;

      return;

    }

    cs=updateCurrentStatement(session,cs);

    if (cs == null) {

      return;

    }

    boolean canProceed=setWaitedSessionsTPL(session,cs);

    if (canProceed) {

      session.isPreTransaction=true;

      if (session.tempSet.isEmpty()) {

        lockTablesTPL(session,cs);

      }

 else {

        setWaitingSessionTPL(session);

      }

    }

  }

  finally {

    writeLock.unlock();

  }

}

Location: TransactionManager2PL.java

Content: 

public void beginTransaction(Session session){

  if (!session.isTransaction) {

    session.actionTimestamp=getNextGlobalChangeTimestamp();

    session.transactionTimestamp=session.actionTimestamp;

    session.isPreTransaction=false;

    session.isTransaction=true;

    transactionCount++;

  }

}

Location: TransactionManager2PL.java

Content: 

public boolean canRead(Session session,PersistentStore store,long id,int mode){

  return true;

}

Location: TransactionManager2PL.java

Content: 

public boolean canRead(Session session,PersistentStore store,Row row,int mode,int[] colMap){

  return true;

}

Location: TransactionManager2PL.java

Content: 

public boolean commitTransaction(Session session){

  if (session.abortTransaction) {

    return false;

  }

  writeLock.lock();

  try {

    int limit=session.rowActionList.size();

    session.actionTimestamp=getNextGlobalChangeTimestamp();

    session.transactionEndTimestamp=session.actionTimestamp;

    endTransaction(session);

    for (int i=0; i < limit; i++) {

      RowAction action=(RowAction)session.rowActionList.get(i);

      action.commit(session);

    }

    adjustLobUsage(session);

    persistCommit(session);

    session.isTransaction=false;

    endTransactionTPL(session);

  }

  finally {

    writeLock.unlock();

  }

  session.tempSet.clear();

  return true;

}

Location: TransactionManager2PL.java

Content: 

public void completeActions(Session session){

  endActionTPL(session);

}

Location: TransactionManager2PL.java

Content: 

private void endTransaction(Session session){

  if (session.isTransaction) {

    transactionCount--;

  }

}

Location: TransactionManager2PL.java

Content: 

public long getGlobalChangeTimestamp(){

  return globalChangeTimestamp.get();

}

Location: TransactionManager2PL.java

Content: 

public int getTransactionControl(){

  return LOCKS;

}

Location: TransactionManager2PL.java

Content: 

public boolean is2PL(){

  return true;

}

Location: TransactionManager2PL.java

Content: 

public boolean isMVCC(){

  return false;

}

Location: TransactionManager2PL.java

Content: 

public boolean isMVRows(){

  return false;

}

Location: TransactionManager2PL.java

Content: 

public boolean prepareCommitActions(Session session){

  session.actionTimestamp=getNextGlobalChangeTimestamp();

  return true;

}

Location: TransactionManager2PL.java

Content: 

public void removeTransactionInfo(CachedObject object){

}

Location: TransactionManager2PL.java

Content: 

public void removeTransactionInfo(long id){

}

Location: TransactionManager2PL.java

Content: 

public void resetSession(Session session,Session targetSession,int mode){

  super.resetSession(session,targetSession,mode);

}

Location: TransactionManager2PL.java

Content: 

public void rollbackAction(Session session){

  rollbackPartial(session,session.actionIndex,session.actionStartTimestamp);

  endActionTPL(session);

}

Location: TransactionManager2PL.java

Content: 

/** 

 * rollback the row actions from start index in list and the given timestamp

 */

public void rollbackPartial(Session session,int start,long timestamp){

  int limit=session.rowActionList.size();

  if (start == limit) {

    return;

  }

  for (int i=limit - 1; i >= start; i--) {

    RowAction action=(RowAction)session.rowActionList.get(i);

    if (action == null || action.type == RowActionBase.ACTION_NONE || action.type == RowActionBase.ACTION_DELETE_FINAL) {

      continue;

    }

    Row row=action.memoryRow;

    if (row == null) {

      row=(Row)action.store.get(action.getPos(),false);

    }

    if (row == null) {

      continue;

    }

    action.rollback(session,timestamp);

    int type=action.mergeRollback(session,timestamp,row);

    action.store.rollbackRow(session,row,type,txModel);

  }

  session.rowActionList.setSize(start);

}

Location: TransactionManager2PL.java

Content: 

public void rollbackSavepoint(Session session,int index){

  long timestamp=session.sessionContext.savepointTimestamps.get(index);

  Integer oi=(Integer)session.sessionContext.savepoints.get(index);

  int start=oi.intValue();

  while (session.sessionContext.savepoints.size() > index + 1) {

    session.sessionContext.savepoints.remove(session.sessionContext.savepoints.size() - 1);

    session.sessionContext.savepointTimestamps.removeLast();

  }

  rollbackPartial(session,start,timestamp);

}

Location: TransactionManager2PL.java

Content: 

public void rollback(Session session){

  writeLock.lock();

  try {

    session.abortTransaction=false;

    session.actionTimestamp=getNextGlobalChangeTimestamp();

    session.transactionEndTimestamp=session.actionTimestamp;

    rollbackPartial(session,0,session.transactionTimestamp);

    endTransaction(session);

    session.logSequences();

    session.isTransaction=false;

    endTransactionTPL(session);

  }

  finally {

    writeLock.unlock();

  }

}

Location: TransactionManager2PL.java

Content: 

public void setGlobalChangeTimestamp(long ts){

  globalChangeTimestamp.set(ts);

}

Location: TransactionManager2PL.java

Content: 

public void setTransactionControl(Session session,int mode){

  super.setTransactionControl(session,mode);

}

Location: TransactionManager2PL.java

Content: 

/** 

 * add transaction info to a row just loaded from the cache. called only for CACHED tables

 */

public void setTransactionInfo(PersistentStore store,CachedObject object){

}

Location: TransactionManager2PL.java

Content: 

public TransactionManager2PL(Database db){

  super(db);

  lobSession=database.sessionManager.getSysLobSession();

  txModel=LOCKS;

}

