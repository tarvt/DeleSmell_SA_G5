Location: DatabaseInformation.java

Content: 

/** 

 * Constructs a new DatabaseInformation instance which knows the names of all system tables (isSystemTable()) but simply returns null for all getSystemTable() requests. <p>

 * @param db The Database object for which to produce system tables

 */

DatabaseInformation(Database db){

  database=db;

}

Location: DatabaseInformation.java

Content: 

static int getSysTableID(String token){

  return sysTableNamesMap.get(token,-1);

}

Location: DatabaseInformation.java

Content: 

/** 

 * Retrieves a table with the specified name whose content may depend on the execution context indicated by the session argument as well as the current value of <code>withContent</code>. <p>

 * @param session the context in which to produce the table

 * @param name the name of the table to produce

 * @return a table corresponding to the name and session arguments, or<code>null</code> if there is no such table to be produced

 */

public Table getSystemTable(Session session,String name){

  return null;

}

Location: DatabaseInformation.java

Content: 

/** 

 * Tests if the specified name is that of a system table. <p>

 * @param name the name to test

 * @return true if the specified name is that of a system table

 */

final boolean isSystemTable(String name){

  return sysTableNamesMap.containsKey(name);

}

Location: DatabaseInformation.java

Content: 

/** 

 * Factory method returns the fullest system table producer implementation available.  This instantiates implementations beginning with the most complete, finally choosing an empty table producer implementation (this class) if no better instance can be constructed.

 * @param db The Database object for which to produce system tables

 * @return the fullest system table producerimplementation available

 */

public static DatabaseInformation newDatabaseInformation(Database db){

  Class c=null;

  try {

    c=Class.forName("org.hsqldb.dbinfo.DatabaseInformationFull");

  }

 catch (  Exception e) {

    try {

      c=Class.forName("org.hsqldb.dbinfo.DatabaseInformationMain");

    }

 catch (    Exception e2) {

      c=DatabaseInformation.class;

    }

  }

  try {

    Class[] ctorParmTypes=new Class[]{Database.class};

    Object[] ctorParms=new Object[]{db};

    Constructor ctor=c.getDeclaredConstructor(ctorParmTypes);

    return (DatabaseInformation)ctor.newInstance(ctorParms);

  }

 catch (  Exception e) {

    e.printStackTrace();

  }

  return new DatabaseInformation(db);

}

Location: DatabaseInformation.java

Content: 

/** 

 * Sets the store for the given session, populates the store if necessary.

 */

public void setStore(Session session,Table table,PersistentStore store){

}

Location: DatabaseInformation.java

Content: 

/** 

 * Switches this table producer between producing empty (surrogate) or tables with (row) content. <p>

 * @param withContent if true, then produce tables with (row) content, elseproduce empty (surrogate) tables

 */

public final void setWithContent(boolean withContent){

  this.withContent=withContent;

}

