Location: FileUtil.java

Content: 

/** 

 * Retrieves the absolute path, given some path specification.

 * @param path the path for which to retrieve the absolute path

 * @return the absolute path

 */

public String absolutePath(String path){

  return new File(path).getAbsolutePath();

}

Location: FileUtil.java

Content: 

/** 

 * Retrieves the canonical file for the given file, in a JDK 1.1 complaint way.

 * @param f the File for which to retrieve the absolute File

 * @return the canonical File

 */

public File canonicalFile(File f) throws IOException {

  return new File(f.getCanonicalPath());

}

Location: FileUtil.java

Content: 

/** 

 * Retrieves the canonical file for the given path, in a JDK 1.1 complaint way.

 * @param path the path for which to retrieve the canonical File

 * @return the canonical File

 */

public File canonicalFile(String path) throws IOException {

  return new File(new File(path).getCanonicalPath());

}

Location: FileUtil.java

Content: 

/** 

 * Retrieves the canonical path for the given path, or the absolute path if attempting to retrieve the canonical path fails.

 * @param path the path for which to retrieve the canonical orabsolute path

 * @return the canonical or absolute path

 */

public String canonicalOrAbsolutePath(String path){

  try {

    return canonicalPath(path);

  }

 catch (  Exception e) {

    return absolutePath(path);

  }

}

Location: FileUtil.java

Content: 

/** 

 * Retrieves the canonical path for the given File, in a JDK 1.1 complaint way.

 * @param f the File for which to retrieve the canonical path

 * @return the canonical path

 */

public String canonicalPath(File f) throws IOException {

  return f.getCanonicalPath();

}

Location: FileUtil.java

Content: 

/** 

 * Retrieves the canonical path for the given path, in a JDK 1.1 complaint way.

 * @param path the path for which to retrieve the canonical path

 * @return the canonical path

 */

public String canonicalPath(String path) throws IOException {

  return new File(path).getCanonicalPath();

}

Location: FileUtil.java

Content: 

/** 

 * Requests, in a JDK 1.1 compliant way, that the file or directory denoted by the given abstract pathname be deleted when the virtual machine terminates. <p> Deletion will be attempted only for JDK 1.2 and greater runtime environments and only upon normal termination of the virtual machine, as defined by the Java Language Specification. <p> Once deletion has been sucessfully requested, it is not possible to cancel the request. This method should therefore be used with care. <p>

 * @param f the abstract pathname of the file be deleted when the virtualmachine terminates

 */

public void deleteOnExit(File f){

  f.deleteOnExit();

}

Location: FileUtil.java

Content: 

/** 

 * Utility method for user applications. Attempts to delete all the files for the database as listed by the getDatabaseFileList() method. If any of the current, main database files cannot be deleted, it is renamed by adding a suffix containing a hexadecimal timestamp portion and the ".old" extension. Also deletes the ".tmp" directory.

 * @param dbNamePath full path or name of database (without a file extension)

 * @return currently always true

 */

public static boolean deleteOrRenameDatabaseFiles(String dbNamePath){

  DatabaseFilenameFilter filter=new DatabaseFilenameFilter(dbNamePath);

  File[] fileList=filter.getExistingFileListInDirectory();

  for (int i=0; i < fileList.length; i++) {

    fileList[i].delete();

  }

  File tempDir=new File(filter.canonicalFile.getPath() + ".tmp");

  if (tempDir.isDirectory()) {

    File[] tempList=tempDir.listFiles();

    if (tempList != null) {

      for (int i=0; i < tempList.length; i++) {

        tempList[i].delete();

      }

    }

    tempDir.delete();

  }

  fileList=filter.getExistingMainFileSetList();

  if (fileList.length == 0) {

    return true;

  }

  System.gc();

  for (int i=0; i < fileList.length; i++) {

    fileList[i].delete();

  }

  fileList=filter.getExistingMainFileSetList();

  for (int i=0; i < fileList.length; i++) {

    fileList[i].renameTo(new File(newDiscardFileName(fileList[i].getPath())));

  }

  return true;

}

Location: FileUtil.java

Content: 

public boolean exists(String fileName,boolean resource,Class cla){

  if (fileName == null || fileName.length() == 0) {

    return false;

  }

  return resource ? null != cla.getResource(fileName) : FileUtil.getFileUtil().exists(fileName);

}

Location: FileUtil.java

Content: 

/** 

 * Creates a new instance of FileUtil 

 */

FileUtil(){

}

Location: FileUtil.java

Content: 

/** 

 * Utility method for user applications. Returns a list of files that currently exist for a database. The list includes current database files as well as ".new", and ".old" versions of the files, plus any app logs.

 * @param dbNamePath full path or name of database (without a file extension)

 */

public static File[] getDatabaseFileList(String dbNamePath){

  DatabaseFilenameFilter filter=new DatabaseFilenameFilter(dbNamePath);

  return filter.getExistingFileListInDirectory();

}

Location: FileUtil.java

Content: 

/** 

 * Returns a list of existing main files for a database. The list excludes non-essential files.

 * @param dbNamePath full path or name of database (without a file extension)

 */

public static File[] getDatabaseMainFileList(String dbNamePath){

  DatabaseFilenameFilter filter=new DatabaseFilenameFilter(dbNamePath,false);

  return filter.getExistingFileListInDirectory();

}

Location: FileUtil.java

Content: 

public static FileAccess getFileAccess(boolean isResource){

  return isResource ? fileAccessRes : fileUtil;

}

Location: FileUtil.java

Content: 

public FileAccess.FileSync getFileSync(java.io.OutputStream os) throws IOException {

  return new FileSync((FileOutputStream)os);

}

Location: FileUtil.java

Content: 

public static FileUtil getFileUtil(){

  return fileUtil;

}

Location: FileUtil.java

Content: 

public static String makeDirectories(String path){

  try {

    File file=new File(path);

    file.mkdirs();

    return file.getCanonicalPath();

  }

 catch (  IOException e) {

    return null;

  }

}

Location: FileUtil.java

Content: 

public void makeParentDirectories(File f){

  String parent=f.getParent();

  if (parent != null) {

    new File(parent).mkdirs();

  }

 else {

    parent=f.getPath();

    int index=parent.lastIndexOf('/');

    if (index > 0) {

      parent=parent.substring(0,index);

      new File(parent).mkdirs();

    }

  }

}

Location: FileUtil.java

Content: 

public static String newDiscardFileName(String filename){

  String timestamp=StringUtil.toPaddedString(Integer.toHexString((int)System.currentTimeMillis()),discardSuffixLength - 1,'0',true);

  String discardName=filename + "." + timestamp+ ".old";

  return discardName;

}

Location: FileUtil.java

Content: 

/** 

 * Rename the file with oldname to newname. If a file with newname already exists, it is deleted before the renaming operation proceeds. If a file with oldname does not exist, no file will exist after the operation.

 */

private boolean renameWithOverwrite(String oldname,String newname){

  File file=new File(oldname);

  delete(newname);

  boolean renamed=file.renameTo(new File(newname));

  if (renamed) {

    return true;

  }

  System.gc();

  delete(newname);

  if (exists(newname)) {

    new File(newname).renameTo(new File(newDiscardFileName(newname)));

  }

  return file.renameTo(new File(newname));

}

