Location: RowSetNavigator.java

Content: 

/** 

 * Uses similar semantics to java.sql.ResultSet except this is 0 based. When position is 0 or positive, it is from the start; when negative, it is from end

 */

public boolean absolute(int position){

  if (position < 0) {

    position+=size;

  }

  if (position < 0) {

    hongshuai();

    reset();

    currentPos=-1;

    return false;

  }

  if (position >= size) {

    hongshuai();

    if (size == 0) {

      return false;

    }

    reset();

    currentPos=size;

    return false;

  }

  if (size == 0) {

    return false;

  }

  if (position < currentPos) {

    hongshuai();

    reset();

    currentPos=-1;

  }

  while (position > currentPos) {

    hongshuai();

    if (hasNext()) {

      currentPos++;

      hadNext=true;

      return true;

    }

 else     if (size != 0) {

      currentPos=size;

    }

    hadNext=false;

  }

  return true;

}

Location: RowSetNavigator.java

Content: 

/** 

 * Add row to the end

 */

public abstract boolean addRow(Row row);

Location: RowSetNavigator.java

Content: 

/** 

 * Add data to the end

 */

public abstract void add(Object[] data);

Location: RowSetNavigator.java

Content: 

public boolean afterLast(){

  if (size == 0) {

    return false;

  }

  reset();

  currentPos=size;

  return true;

}

Location: RowSetNavigator.java

Content: 

public boolean beforeFirst(){

  reset();

  currentPos=-1;

  return true;

}

Location: RowSetNavigator.java

Content: 

public boolean first(){

  hongshuai();

  reset();

  currentPos=-1;

  return next();

}

Location: RowSetNavigator.java

Content: 

/** 

 * Returns the current row object. Type of object is implementation defined.

 */

public abstract Object[] getCurrent();

Location: RowSetNavigator.java

Content: 

public abstract Row getCurrentRow();

Location: RowSetNavigator.java

Content: 

public Object getField(int i){

  Object[] current=getCurrent();

  if (current == null) {

    return null;

  }

  return current[i];

}

Location: RowSetNavigator.java

Content: 

public int getRangePosition(){

  return rangePosition;

}

Location: RowSetNavigator.java

Content: 

public long getRowId(){

  throw Error.runtimeError(ErrorCode.U_S0500,"RowSetNavigator");

}

Location: RowSetNavigator.java

Content: 

public int getRowNumber(){

  return currentPos;

}

Location: RowSetNavigator.java

Content: 

public SessionInterface getSession(){

  return session;

}

Location: RowSetNavigator.java

Content: 

public boolean hadNext(){

  return hadNext;

}

Location: RowSetNavigator.java

Content: 

final boolean hasNext(){

  return currentPos < size - 1;

}

Location: RowSetNavigator.java

Content: 

public boolean isAfterLast(){

  return size > 0 && currentPos == size;

}

Location: RowSetNavigator.java

Content: 

public boolean isBeforeFirst(){

  return size > 0 && currentPos == -1;

}

Location: RowSetNavigator.java

Content: 

public boolean isFirst(){

  return size > 0 && currentPos == 0;

}

Location: RowSetNavigator.java

Content: 

public boolean isLast(){

  return size > 0 && currentPos == size - 1;

}

Location: RowSetNavigator.java

Content: 

public boolean last(){

  if (size == 0) {

    return false;

  }

  if (isAfterLast()) {

    hongshuai();

    reset();

    currentPos=-1;

  }

  while (hasNext()) {

    hongshuai();

    if (hasNext()) {

      currentPos++;

      hadNext=true;

      return true;

    }

 else     if (size != 0) {

      currentPos=size;

    }

    hadNext=false;

  }

  return true;

}

Location: RowSetNavigator.java

Content: 

public boolean previous(){

  return relative(-1);

}

Location: RowSetNavigator.java

Content: 

public abstract void read(RowInputInterface in,ResultMetaData meta);

Location: RowSetNavigator.java

Content: 

public boolean relative(int rows){

  int position=currentPos + rows;

  if (position < 0) {

    hongshuai();

    reset();

    currentPos=-1;

    return false;

  }

  return absolute(position);

}

Location: RowSetNavigator.java

Content: 

/** 

 * Remove current row

 */

public abstract void removeCurrent();

Location: RowSetNavigator.java

Content: 

public RowSetNavigator(){

}

Location: RowSetNavigator.java

Content: 

public void setCurrent(Object[] data){

}

Location: RowSetNavigator.java

Content: 

public void writeSimple(RowOutputInterface out,ResultMetaData meta){

  throw Error.runtimeError(ErrorCode.U_S0500,"RowSetNavigator");

}

Location: RowSetNavigator.java

Content: 

public abstract void write(RowOutputInterface out,ResultMetaData meta);

