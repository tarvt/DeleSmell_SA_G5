Location: SessionContext.java

Content: 

public void addSessionTable(Table table){

  if (sessionTables == null) {

    sessionTables=new HashMappedList();

  }

  if (sessionTables.containsKey(table.getName().name)) {

    throw Error.error(ErrorCode.X_42504);

  }

  sessionTables.add(table.getName().name,table);

}

Location: SessionContext.java

Content: 

public void addSessionVariable(ColumnSchema variable){

  int index=sessionVariables.size();

  if (!sessionVariables.add(variable.getName().name,variable)) {

    throw Error.error(ErrorCode.X_42504);

  }

  Object[] vars=new Object[sessionVariables.size()];

  ArrayUtil.copyArray(routineVariables,vars,routineVariables.length);

  routineVariables=vars;

  routineVariables[index]=variable.getDefaultValue(session);

}

Location: SessionContext.java

Content: 

void clearStructures(StatementDMQL cs){

  int count=cs.rangeIteratorCount;

  if (count > rangeIterators.length) {

    count=rangeIterators.length;

  }

  for (int i=0; i < count; i++) {

    if (rangeIterators[i] != null) {

      rangeIterators[i].release();

      rangeIterators[i]=null;

    }

  }

}

Location: SessionContext.java

Content: 

public void dropSessionTable(String name){

  sessionTables.remove(name);

}

Location: SessionContext.java

Content: 

public Table findSessionTable(String name){

  if (sessionTables == null) {

    return null;

  }

  return (Table)sessionTables.get(name);

}

Location: SessionContext.java

Content: 

public RangeIterator getCheckIterator(RangeVariable rangeVariable){

  int position=rangeVariable.rangePosition;

  if (position >= rangeIterators.length) {

    int size=(int)ArrayUtil.getBinaryNormalisedCeiling(position + 1);

    rangeIterators=(RangeIterator[])ArrayUtil.resizeArray(rangeIterators,size);

  }

  rangeIterators[position]=checkIterator;

  return checkIterator;

}

Location: SessionContext.java

Content: 

/** 

 * For cascade operations

 */

public HashSet getConstraintPath(){

  if (constraintPath == null) {

    constraintPath=new HashSet();

  }

 else {

    constraintPath.clear();

  }

  return constraintPath;

}

Location: SessionContext.java

Content: 

public RangeIterator getRangeIterator(int position){

  RangeIterator[] ranges=rangeIterators;

  if (stack != null) {

    for (int i=0; i < stack.size(); i++) {

      Object o=stack.get(i);

      if (o instanceof RangeIterator[]) {

        ranges=(RangeIterator[])o;

        break;

      }

    }

  }

  return ranges[position];

}

Location: SessionContext.java

Content: 

RowSetNavigatorDataChange getRowSetDataChange(){

  return new RowSetNavigatorDataChangeMemory(session);

}

Location: SessionContext.java

Content: 

public void popRoutineInvocation(){

  pop(true);

}

Location: SessionContext.java

Content: 

public void popRoutineTables(){

  sessionTables.clear();

  sessionTables=popSessionTables;

}

Location: SessionContext.java

Content: 

public void popStatementState(){

  rownum=((Integer)stack.remove(stack.size() - 1)).intValue();

}

Location: SessionContext.java

Content: 

public void push(){

  push(false);

}

Location: SessionContext.java

Content: 

public void pushDynamicArguments(Object[] args){

  push();

  dynamicArguments=args;

}

Location: SessionContext.java

Content: 

public void pushRoutineInvocation(){

  push(true);

}

Location: SessionContext.java

Content: 

public void pushRoutineTables(){

  popSessionTables=sessionTables;

  sessionTables=new HashMappedList();

}

Location: SessionContext.java

Content: 

public void pushStatementState(){

  if (stack == null) {

    stack=new HsqlArrayList(32,true);

  }

  stack.add(ValuePool.getInt(rownum));

}

Location: SessionContext.java

Content: 

void resetStack(){

  while (depth > 0) {

    pop(isInRoutine.booleanValue());

  }

}

Location: SessionContext.java

Content: 

/** 

 * Creates a new instance of CompiledStatementExecutor.

 * @param session the context in which to perform the execution

 */

SessionContext(Session session){

  this.session=session;

  diagnosticsVariables=new Object[ExpressionColumn.diagnosticsVariableTokens.length];

  rangeIterators=new RangeIterator[8];

  savepoints=new HashMappedList(4);

  savepointTimestamps=new LongDeque();

  sessionVariables=new HashMappedList();

  sessionVariablesRange=new RangeVariable[1];

  sessionVariablesRange[0]=new RangeVariable(sessionVariables,null,true,RangeVariable.VARIALBE_RANGE);

  sessionVariableRangeGroups=new RangeGroup[]{new RangeGroupSimple(sessionVariablesRange,true)};

  isAutoCommit=Boolean.FALSE;

  isReadOnly=Boolean.FALSE;

  noSQL=Boolean.FALSE;

  isInRoutine=Boolean.FALSE;

}

Location: SessionContext.java

Content: 

public void setDynamicArguments(Object[] args){

  dynamicArguments=args;

}

Location: SessionContext.java

Content: 

public void setRangeIterator(RangeIterator iterator){

  int position=iterator.getRangePosition();

  if (position >= rangeIterators.length) {

    int size=(int)ArrayUtil.getBinaryNormalisedCeiling(position + 1);

    rangeIterators=(RangeIterator[])ArrayUtil.resizeArray(rangeIterators,size);

  }

  rangeIterators[position]=iterator;

}

Location: SessionContext.java

Content: 

public void setSessionTables(Table[] tables){

}

Location: SessionContext.java

Content: 

public void unsetRangeIterator(RangeIterator iterator){

  int position=iterator.getRangePosition();

  rangeIterators[position]=null;

}

