Location: JDBCDataSourceFactory.java

Content: 

/** 

 * Static method to create a JDBCDataSource instance using the given properties for url, user, password, etc.

 * @param props properties

 * @return the data source instance

 * @throws Exception on any error

 */

public static DataSource createDataSource(Properties props) throws Exception {

  JDBCDataSource ds=(JDBCDataSource)Class.forName(bdsClassName).newInstance();

  String value=props.getProperty(databaseName);

  if (value == null) {

    value=props.getProperty(urlName);

  }

  ds.setDatabase(value);

  value=props.getProperty(userName);

  if (value == null) {

    value=props.getProperty(userNameName);

  }

  ds.setUser(value);

  value=props.getProperty(passwordName);

  ds.setPassword(value);

  value=props.getProperty(loginTimeoutName);

  if (value != null) {

    value=value.trim();

    if (value.length() > 0) {

      try {

        ds.setLoginTimeout(Integer.parseInt(value));

      }

 catch (      NumberFormatException nfe) {

      }

    }

  }

  return ds;

}

Location: JDBCDataSourceFactory.java

Content: 

/** 

 * Creates a DataSource object using the javax.naming.Reference object specified.<p> The Reference object's class name should be one of the four supported data source class names and it must support the properties, database, user and password. It may optionally support the loginTimeout property. HyperSQL's JDBCPooledDataSource and JDBCXADataSource object are intended as factories used by a connection pooling DataSource.<p> JDBCDataSource is a factory for normal connections and can be accessed directly by user applications.<p> JDBCPool is a connection pool accessed directly by user applications.<p>

 * @param obj The reference information used in creating aDatasource object.

 * @param name ignored

 * @param nameCtx ignored

 * @param environment ignored

 * @return A newly created JDBCDataSource object; null if an objectcannot be created.

 * @exception Exception is thrown if database or user is null or invalid

 */

public Object getObjectInstance(Object obj,Name name,Context nameCtx,Hashtable environment) throws Exception {

  if (!(obj instanceof Reference)) {

    return null;

  }

  Reference ref=(Reference)obj;

  String className=ref.getClassName();

  if (bdsClassName.equals(className) || poolClassName.equals(className) || pdsClassName.equals(className)|| xdsClassName.equals(className)) {

    RefAddr refAddr;

    Object value;

    JDBCCommonDataSource ds=(JDBCCommonDataSource)Class.forName(className).newInstance();

    refAddr=ref.get("database");

    if (refAddr == null) {

      throw new Exception(className + ": RefAddr not set: database");

    }

    value=refAddr.getContent();

    if (!(value instanceof String)) {

      throw new Exception(className + ": invalid RefAddr: database");

    }

    ds.setDatabase((String)value);

    refAddr=ref.get("user");

    if (refAddr == null) {

      throw new Exception(className + ": RefAddr not set: user");

    }

    value=ref.get("user").getContent();

    if (!(value instanceof String)) {

      throw new Exception(className + ": invalid RefAddr: user");

    }

    ds.setUser((String)value);

    refAddr=ref.get("password");

    if (refAddr == null) {

      value="";

    }

 else {

      value=ref.get("password").getContent();

      if (!(value instanceof String)) {

        throw new Exception(className + ": invalid RefAddr: password");

      }

    }

    ds.setPassword((String)value);

    refAddr=ref.get("loginTimeout");

    if (refAddr != null) {

      value=refAddr.getContent();

      if (value instanceof String) {

        String loginTimeoutContent=((String)value).trim();

        if (loginTimeoutContent.length() > 0) {

          try {

            ds.setLoginTimeout(Integer.parseInt(loginTimeoutContent));

          }

 catch (          NumberFormatException nfe) {

          }

        }

      }

    }

    return ds;

  }

 else {

    return null;

  }

}

Location: JDBCDataSourceFactory.java

Content: 

public JDBCDataSourceFactory(){

}

