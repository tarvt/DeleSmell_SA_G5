Location: ArrayCounter.java

Content: 

/** 

 * Helper method to calculate the span of the sub-interval. Simply returns the ceiling of ((limit - start) / segments) and accounts for invalid start and limit combinations.

 */

static int calcInterval(int segments,int start,int limit){

  int range=limit - start;

  if (range <= 0) {

    return 0;

  }

  int partSegment=(range % segments) == 0 ? 0 : 1;

  return (range / segments) + partSegment;

}

Location: ArrayCounter.java

Content: 

/** 

 * Returns an int[] array of length segments containing the distribution count of the elements in unsorted int[] array with values between min and max (range). Values outside the min-max range are ignored<p> A usage example is determining the count of people of each age group in a large int[] array containing the age of each person. Called with (array, 16,0,79), it will return an int[16] with the first element the count of people aged 0-4, the second element the count of those aged 5-9, and so on. People above the age of 79 are excluded. If the range is not a multiple of segments, the last segment will be cover a smaller sub-range than the rest.

 */

public static int[] countSegments(int[] array,int elementCount,int segments,int interval,int start,int limit){

  int[] counts=new int[segments];

  int index;

  int element;

  if (interval <= 0) {

    return counts;

  }

  for (int i=0; i < elementCount; i++) {

    element=array[i];

    if (element < start || element >= limit) {

      continue;

    }

    index=(element - start) / interval;

    counts[index]++;

  }

  return counts;

}

Location: ArrayCounter.java

Content: 

/** 

 * With an unsorted int[] array and with target a positive integer in the range (1,array.length), finds the value in the range (start,limit) of the largest element (rank) where the count of all smaller elements in that range is less than or equals target. Parameter margin indicates the margin of error in target<p> In statistics, this can be used to calculate a median or quadrile value. A usage example applied to an array of age values is to determine the maximum age of a given number of people. With the example array given in countSegments, rank(array, c, 6000, 18, 65, 0) will return an age value between 18-64 (inclusive) and the count of all people aged between 18 and the returned value(exclusive) will be less than or equal 6000.

 */

public static int rank(int[] array,int elements,int target,int start,int limit,int margin){

  final int segments=256;

  int elementCount=0;

  int currentLimit=limit;

  for (; ; ) {

    int interval=calcInterval(segments,start,currentLimit);

    int[] counts=countSegments(array,elements,segments,interval,start,currentLimit);

    for (int i=0; i < counts.length; i++) {

      if (elementCount + counts[i] < target) {

        elementCount+=counts[i];

        start+=interval;

      }

 else {

        break;

      }

    }

    if (elementCount + margin >= target) {

      return start;

    }

    if (interval <= 1) {

      return start;

    }

    currentLimit=start + interval < limit ? (start + interval) : limit;

  }

}

