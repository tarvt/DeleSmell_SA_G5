Location: ResultLob.java

Content: 

public long getBlockLength(){

  return blockLength;

}

Location: ResultLob.java

Content: 

public byte[] getByteArray(){

  return byteBlock;

}

Location: ResultLob.java

Content: 

public char[] getCharArray(){

  return charBlock;

}

Location: ResultLob.java

Content: 

public InputStream getInputStream(){

  return stream;

}

Location: ResultLob.java

Content: 

public long getLobID(){

  return lobID;

}

Location: ResultLob.java

Content: 

public long getOffset(){

  return blockOffset;

}

Location: ResultLob.java

Content: 

public Reader getReader(){

  return reader;

}

Location: ResultLob.java

Content: 

public int getSubType(){

  return subType;

}

Location: ResultLob.java

Content: 

public static ResultLob newLobCreateBlobRequest(long sessionID,long lobID,InputStream stream,long length){

  ResultLob result=new ResultLob();

  result.lobID=lobID;

  result.subType=LobResultTypes.REQUEST_CREATE_BYTES;

  result.blockLength=length;

  result.stream=stream;

  return result;

}

Location: ResultLob.java

Content: 

public static ResultLob newLobCreateBlobResponse(long id){

  ResultLob result=new ResultLob();

  result.subType=LobResultTypes.RESPONSE_CREATE_BYTES;

  result.lobID=id;

  return result;

}

Location: ResultLob.java

Content: 

public static ResultLob newLobCreateClobRequest(long sessionID,long lobID,Reader reader,long length){

  ResultLob result=new ResultLob();

  result.lobID=lobID;

  result.subType=LobResultTypes.REQUEST_CREATE_CHARS;

  result.blockLength=length;

  result.reader=reader;

  return result;

}

Location: ResultLob.java

Content: 

public static ResultLob newLobCreateClobResponse(long id){

  ResultLob result=new ResultLob();

  result.subType=LobResultTypes.RESPONSE_CREATE_CHARS;

  result.lobID=id;

  return result;

}

Location: ResultLob.java

Content: 

public static ResultLob newLobDuplicateRequest(long id){

  ResultLob result=new ResultLob();

  result.subType=LobResultTypes.REQUEST_DUPLICATE_LOB;

  result.lobID=id;

  return result;

}

Location: ResultLob.java

Content: 

public static ResultLob newLobGetBytePatternPositionRequest(long id,byte[] pattern,long offset){

  ResultLob result=new ResultLob();

  result.subType=LobResultTypes.REQUEST_GET_BYTE_PATTERN_POSITION;

  result.lobID=id;

  result.blockOffset=offset;

  result.byteBlock=pattern;

  result.blockLength=pattern.length;

  return result;

}

Location: ResultLob.java

Content: 

public static ResultLob newLobGetBytePatternPositionRequest(long id,long otherId,long offset){

  ResultLob result=new ResultLob();

  result.subType=LobResultTypes.REQUEST_GET_BYTE_PATTERN_POSITION;

  result.lobID=id;

  result.blockOffset=offset;

  return result;

}

Location: ResultLob.java

Content: 

public static ResultLob newLobGetBytesRequest(long id,long offset,int length){

  ResultLob result=new ResultLob();

  result.subType=LobResultTypes.REQUEST_GET_BYTES;

  result.lobID=id;

  result.blockOffset=offset;

  result.blockLength=length;

  return result;

}

Location: ResultLob.java

Content: 

public static ResultLob newLobGetBytesResponse(long id,long offset,byte[] block){

  ResultLob result=new ResultLob();

  result.subType=LobResultTypes.RESPONSE_GET_BYTES;

  result.lobID=id;

  result.blockOffset=offset;

  result.byteBlock=block;

  result.blockLength=block.length;

  return result;

}

Location: ResultLob.java

Content: 

public static ResultLob newLobGetCharPatternPositionRequest(long id,char[] pattern,long offset){

  ResultLob result=new ResultLob();

  result.subType=LobResultTypes.REQUEST_GET_CHAR_PATTERN_POSITION;

  result.lobID=id;

  result.blockOffset=offset;

  result.charBlock=pattern;

  result.blockLength=pattern.length;

  return result;

}

Location: ResultLob.java

Content: 

public static ResultLob newLobGetCharPatternPositionRequest(long id,long otherId,long offset){

  ResultLob result=new ResultLob();

  result.subType=LobResultTypes.REQUEST_GET_CHAR_PATTERN_POSITION;

  result.lobID=id;

  result.blockOffset=offset;

  result.blockLength=otherId;

  return result;

}

Location: ResultLob.java

Content: 

public static ResultLob newLobGetCharsRequest(long id,long offset,int length){

  ResultLob result=new ResultLob();

  result.subType=LobResultTypes.REQUEST_GET_CHARS;

  result.lobID=id;

  result.blockOffset=offset;

  result.blockLength=length;

  return result;

}

Location: ResultLob.java

Content: 

public static ResultLob newLobGetCharsResponse(long id,long offset,char[] chars){

  ResultLob result=new ResultLob();

  result.subType=LobResultTypes.RESPONSE_GET_CHARS;

  result.lobID=id;

  result.blockOffset=offset;

  result.charBlock=chars;

  result.blockLength=chars.length;

  return result;

}

Location: ResultLob.java

Content: 

public static ResultLob newLobGetLengthRequest(long id){

  ResultLob result=new ResultLob();

  result.subType=LobResultTypes.REQUEST_GET_LENGTH;

  result.lobID=id;

  return result;

}

Location: ResultLob.java

Content: 

public static ResultLob newLobGetRequest(long id,long offset,long length){

  ResultLob result=new ResultLob();

  result.subType=LobResultTypes.REQUEST_GET_LOB;

  result.lobID=id;

  result.blockOffset=offset;

  result.blockLength=length;

  return result;

}

Location: ResultLob.java

Content: 

public static ResultLob newLobGetTruncateLength(long id){

  ResultLob result=new ResultLob();

  result.subType=LobResultTypes.REQUEST_GET_TRUNCATE_LENGTH;

  result.lobID=id;

  return result;

}

Location: ResultLob.java

Content: 

public static ResultLob newLobSetBytesRequest(long id,long offset,byte[] block){

  ResultLob result=new ResultLob();

  result.subType=LobResultTypes.REQUEST_SET_BYTES;

  result.lobID=id;

  result.blockOffset=offset;

  result.byteBlock=block;

  result.blockLength=block.length;

  return result;

}

Location: ResultLob.java

Content: 

public static ResultLob newLobSetCharsRequest(long id,long offset,char[] chars){

  ResultLob result=new ResultLob();

  result.subType=LobResultTypes.REQUEST_SET_CHARS;

  result.lobID=id;

  result.blockOffset=offset;

  result.charBlock=chars;

  result.blockLength=chars.length;

  return result;

}

Location: ResultLob.java

Content: 

public static ResultLob newLobSetResponse(long id,long length){

  ResultLob result=new ResultLob();

  result.subType=LobResultTypes.RESPONSE_SET;

  result.lobID=id;

  result.blockLength=length;

  return result;

}

Location: ResultLob.java

Content: 

public static ResultLob newLobTruncateRequest(long id,long offset){

  ResultLob result=new ResultLob();

  result.subType=LobResultTypes.REQUEST_TRUNCATE;

  result.lobID=id;

  result.blockOffset=offset;

  return result;

}

Location: ResultLob.java

Content: 

public static ResultLob newLobTruncateResponse(long id,long length){

  ResultLob result=new ResultLob();

  result.subType=LobResultTypes.RESPONSE_TRUNCATE;

  result.lobID=id;

  result.blockLength=length;

  return result;

}

Location: ResultLob.java

Content: 

public static ResultLob newLob(DataInput dataInput,boolean readTerminate) throws IOException {

  ResultLob result=new ResultLob();

  result.databaseID=dataInput.readInt();

  result.sessionID=dataInput.readLong();

  result.lobID=dataInput.readLong();

  result.subType=dataInput.readInt();

switch (result.subType) {

case LobResultTypes.REQUEST_CREATE_BYTES:

case LobResultTypes.REQUEST_CREATE_CHARS:

    result.blockOffset=dataInput.readLong();

  result.blockLength=dataInput.readLong();

break;

case LobResultTypes.REQUEST_GET_LOB:

case LobResultTypes.REQUEST_DUPLICATE_LOB:

case LobResultTypes.REQUEST_GET_BYTES:

case LobResultTypes.REQUEST_GET_CHARS:

result.blockOffset=dataInput.readLong();

result.blockLength=dataInput.readLong();

break;

case LobResultTypes.REQUEST_SET_BYTES:

case LobResultTypes.REQUEST_GET_BYTE_PATTERN_POSITION:

result.blockOffset=dataInput.readLong();

result.blockLength=dataInput.readLong();

result.byteBlock=new byte[(int)result.blockLength];

dataInput.readFully(result.byteBlock);

break;

case LobResultTypes.REQUEST_SET_CHARS:

case LobResultTypes.REQUEST_GET_CHAR_PATTERN_POSITION:

result.blockOffset=dataInput.readLong();

result.blockLength=dataInput.readLong();

result.charBlock=new char[(int)result.blockLength];

for (int i=0; i < result.charBlock.length; i++) {

result.charBlock[i]=dataInput.readChar();

}

break;

case LobResultTypes.REQUEST_GET_LENGTH:

case LobResultTypes.REQUEST_TRUNCATE:

result.blockOffset=dataInput.readLong();

break;

case LobResultTypes.RESPONSE_GET_BYTES:

result.blockOffset=dataInput.readLong();

result.blockLength=dataInput.readLong();

result.byteBlock=new byte[(int)result.blockLength];

dataInput.readFully(result.byteBlock);

break;

case LobResultTypes.RESPONSE_GET_CHARS:

result.blockOffset=dataInput.readLong();

result.blockLength=dataInput.readLong();

result.charBlock=new char[(int)result.blockLength];

for (int i=0; i < result.charBlock.length; i++) {

result.charBlock[i]=dataInput.readChar();

}

break;

case LobResultTypes.RESPONSE_SET:

case LobResultTypes.RESPONSE_CREATE_BYTES:

case LobResultTypes.RESPONSE_CREATE_CHARS:

case LobResultTypes.RESPONSE_TRUNCATE:

result.blockLength=dataInput.readLong();

break;

case LobResultTypes.RESPONSE_GET_BYTE_PATTERN_POSITION:

case LobResultTypes.RESPONSE_GET_CHAR_PATTERN_POSITION:

result.blockOffset=dataInput.readLong();

break;

default :

throw Error.runtimeError(ErrorCode.U_S0500,"ResultLob");

}

if (readTerminate) {

dataInput.readByte();

}

return result;

}

Location: ResultLob.java

Content: 

private ResultLob(){

  super(ResultConstants.LARGE_OBJECT_OP);

}

Location: ResultLob.java

Content: 

public void writeBody(SessionInterface session,DataOutputStream dataOut) throws IOException {

switch (subType) {

case LobResultTypes.REQUEST_CREATE_BYTES:

    if (blockLength >= 0) {

      writeCreate(session,dataOut);

      return;

    }

  writeCreateByteSegments(session,dataOut);

return;

case LobResultTypes.REQUEST_CREATE_CHARS:

{

if (blockLength >= 0) {

  writeCreate(session,dataOut);

  return;

}

writeCreateCharSegments(session,dataOut);

return;

}

}

dataOut.writeByte(mode);

dataOut.writeInt(databaseID);

dataOut.writeLong(sessionID);

dataOut.writeLong(lobID);

dataOut.writeInt(subType);

switch (subType) {

case LobResultTypes.REQUEST_SET_BYTES:

case LobResultTypes.REQUEST_GET_BYTE_PATTERN_POSITION:

dataOut.writeLong(blockOffset);

dataOut.writeLong(blockLength);

dataOut.write(byteBlock);

break;

case LobResultTypes.REQUEST_SET_CHARS:

case LobResultTypes.REQUEST_GET_CHAR_PATTERN_POSITION:

dataOut.writeLong(blockOffset);

dataOut.writeLong(blockLength);

dataOut.writeChars(charBlock);

break;

case LobResultTypes.REQUEST_GET_LOB:

case LobResultTypes.REQUEST_DUPLICATE_LOB:

case LobResultTypes.REQUEST_GET_BYTES:

case LobResultTypes.REQUEST_GET_CHARS:

dataOut.writeLong(blockOffset);

dataOut.writeLong(blockLength);

break;

case LobResultTypes.REQUEST_GET_LENGTH:

case LobResultTypes.REQUEST_TRUNCATE:

dataOut.writeLong(blockOffset);

break;

case LobResultTypes.RESPONSE_GET_BYTES:

dataOut.writeLong(blockOffset);

dataOut.writeLong(blockLength);

dataOut.write(byteBlock);

break;

case LobResultTypes.RESPONSE_GET_CHARS:

dataOut.writeLong(blockOffset);

dataOut.writeLong(blockLength);

dataOut.writeChars(charBlock);

break;

case LobResultTypes.RESPONSE_SET:

case LobResultTypes.RESPONSE_CREATE_BYTES:

case LobResultTypes.RESPONSE_CREATE_CHARS:

case LobResultTypes.RESPONSE_TRUNCATE:

dataOut.writeLong(blockLength);

break;

case LobResultTypes.RESPONSE_GET_BYTE_PATTERN_POSITION:

case LobResultTypes.RESPONSE_GET_CHAR_PATTERN_POSITION:

dataOut.writeLong(blockOffset);

break;

default :

throw Error.runtimeError(ErrorCode.U_S0500,"ResultLob");

}

}

Location: ResultLob.java

Content: 

private void writeCreateByteSegments(SessionInterface session,DataOutputStream dataOut) throws IOException {

  int bufferLength=session.getStreamBlockSize();

  long currentOffset=blockOffset;

  dataOut.writeByte(mode);

  dataOut.writeInt(databaseID);

  dataOut.writeLong(sessionID);

  dataOut.writeLong(lobID);

  dataOut.writeInt(subType);

  HsqlByteArrayOutputStream byteArrayOS=new HsqlByteArrayOutputStream(bufferLength);

  byteArrayOS.reset();

  byteArrayOS.write(stream,bufferLength);

  dataOut.writeLong(currentOffset);

  dataOut.writeLong(byteArrayOS.size());

  dataOut.write(byteArrayOS.getBuffer(),0,byteArrayOS.size());

  currentOffset+=byteArrayOS.size();

  if (byteArrayOS.size() < bufferLength) {

    return;

  }

  while (true) {

    byteArrayOS.reset();

    byteArrayOS.write(stream,bufferLength);

    if (byteArrayOS.size() == 0) {

      break;

    }

    dataOut.writeByte(mode);

    dataOut.writeInt(databaseID);

    dataOut.writeLong(sessionID);

    dataOut.writeLong(lobID);

    dataOut.writeInt(LobResultTypes.REQUEST_SET_BYTES);

    dataOut.writeLong(currentOffset);

    dataOut.writeLong(byteArrayOS.size());

    dataOut.write(byteArrayOS.getBuffer(),0,byteArrayOS.size());

    currentOffset+=byteArrayOS.size();

    if (byteArrayOS.size() < bufferLength) {

      break;

    }

  }

}

Location: ResultLob.java

Content: 

private void writeCreateCharSegments(SessionInterface session,DataOutputStream dataOut) throws IOException {

  int bufferLength=session.getStreamBlockSize();

  long currentOffset=blockOffset;

  dataOut.writeByte(mode);

  dataOut.writeInt(databaseID);

  dataOut.writeLong(sessionID);

  dataOut.writeLong(lobID);

  dataOut.writeInt(subType);

  HsqlByteArrayOutputStream byteArrayOS=new HsqlByteArrayOutputStream(bufferLength);

  byteArrayOS.reset();

  byteArrayOS.write(reader,bufferLength / 2);

  dataOut.writeLong(currentOffset);

  dataOut.writeLong(byteArrayOS.size() / 2);

  dataOut.write(byteArrayOS.getBuffer(),0,byteArrayOS.size());

  currentOffset+=byteArrayOS.size() / 2;

  if (byteArrayOS.size() < bufferLength) {

    return;

  }

  while (true) {

    byteArrayOS.reset();

    byteArrayOS.write(reader,bufferLength / 2);

    if (byteArrayOS.size() == 0) {

      break;

    }

    dataOut.writeByte(mode);

    dataOut.writeInt(databaseID);

    dataOut.writeLong(sessionID);

    dataOut.writeLong(lobID);

    dataOut.writeInt(LobResultTypes.REQUEST_SET_CHARS);

    dataOut.writeLong(currentOffset);

    dataOut.writeLong(byteArrayOS.size() / 2);

    dataOut.write(byteArrayOS.getBuffer(),0,byteArrayOS.size());

    currentOffset+=byteArrayOS.size() / 2;

    if (byteArrayOS.size() < bufferLength) {

      break;

    }

  }

}

Location: ResultLob.java

Content: 

private void writeCreate(SessionInterface session,DataOutputStream dataOut) throws IOException {

  dataOut.writeByte(mode);

  dataOut.writeInt(databaseID);

  dataOut.writeLong(sessionID);

  dataOut.writeLong(lobID);

  dataOut.writeInt(subType);

  dataOut.writeLong(blockOffset);

  dataOut.writeLong(blockLength);

switch (subType) {

case LobResultTypes.REQUEST_CREATE_BYTES:

    dataOut.write(stream,blockLength);

  break;

case LobResultTypes.REQUEST_CREATE_CHARS:

dataOut.write(reader,blockLength);

break;

}

}

