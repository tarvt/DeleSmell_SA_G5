Location: HsqlDateTime.java

Content: 

public static long convertMillisFromCalendar(Calendar clendarGMT,Calendar calendar,long millis){

synchronized (clendarGMT) {

synchronized (calendar) {

      clendarGMT.clear();

      calendar.setTimeInMillis(millis);

      clendarGMT.set(calendar.get(Calendar.YEAR),calendar.get(Calendar.MONTH),calendar.get(Calendar.DAY_OF_MONTH),calendar.get(Calendar.HOUR_OF_DAY),calendar.get(Calendar.MINUTE),calendar.get(Calendar.SECOND));

      return clendarGMT.getTimeInMillis();

    }

  }

}

Location: HsqlDateTime.java

Content: 

public static long convertMillisFromCalendar(Calendar calendar,long millis){

  return convertMillisFromCalendar(tempCalGMT,calendar,millis);

}

Location: HsqlDateTime.java

Content: 

public static long convertMillisToCalendar(Calendar calendar,long millis){

synchronized (tempCalGMT) {

synchronized (calendar) {

      calendar.clear();

      tempCalGMT.setTimeInMillis(millis);

      calendar.set(tempCalGMT.get(Calendar.YEAR),tempCalGMT.get(Calendar.MONTH),tempCalGMT.get(Calendar.DAY_OF_MONTH),tempCalGMT.get(Calendar.HOUR_OF_DAY),tempCalGMT.get(Calendar.MINUTE),tempCalGMT.get(Calendar.SECOND));

      return calendar.getTimeInMillis();

    }

  }

}

Location: HsqlDateTime.java

Content: 

public static long convertToNormalisedTime(long t){

  return convertToNormalisedTime(t,tempCalGMT);

}

Location: HsqlDateTime.java

Content: 

public static long convertToNormalisedTime(long t,Calendar cal){

synchronized (cal) {

    setTimeInMillis(cal,t);

    resetToDate(cal);

    long t1=cal.getTimeInMillis();

    return t - t1;

  }

}

Location: HsqlDateTime.java

Content: 

public static long getDateSeconds(String s){

  try {

synchronized (sdfd) {

      java.util.Date d=sdfd.parse(s);

      return d.getTime() / 1000;

    }

  }

 catch (  Exception e) {

    throw Error.error(ErrorCode.X_22007);

  }

}

Location: HsqlDateTime.java

Content: 

public static String getDateString(long seconds){

synchronized (sdfd) {

    sysDate.setTime(seconds * 1000);

    return sdfd.format(sysDate);

  }

}

Location: HsqlDateTime.java

Content: 

/** 

 * Returns the indicated part of the given millisecond date object.

 * @param m the millisecond time value from which to extract the indicated part

 * @param part an integer code corresponding to the desired date part

 * @return the indicated part of the given <code>java.util.Date</code> object

 */

public static int getDateTimePart(long m,int part){

synchronized (tempCalGMT) {

    tempCalGMT.setTimeInMillis(m);

    return tempCalGMT.get(part);

  }

}

Location: HsqlDateTime.java

Content: 

public static long getNormalisedDate(Calendar cal,long t){

synchronized (cal) {

    setTimeInMillis(cal,t);

    resetToDate(cal);

    return cal.getTimeInMillis();

  }

}

Location: HsqlDateTime.java

Content: 

public static long getNormalisedDate(long d){

synchronized (tempCalGMT) {

    setTimeInMillis(tempCalGMT,d);

    resetToDate(tempCalGMT);

    return tempCalGMT.getTimeInMillis();

  }

}

Location: HsqlDateTime.java

Content: 

public static long getNormalisedTime(Calendar cal,long t){

synchronized (cal) {

    setTimeInMillis(cal,t);

    resetToTime(cal);

    return cal.getTimeInMillis();

  }

}

Location: HsqlDateTime.java

Content: 

public static long getNormalisedTime(long t){

  Calendar cal=tempCalGMT;

synchronized (cal) {

    setTimeInMillis(cal,t);

    resetToTime(cal);

    return cal.getTimeInMillis();

  }

}

Location: HsqlDateTime.java

Content: 

/** 

 * rounded millisecond date object

 */

public static long getRoundedPart(long m,int part){

synchronized (tempCalGMT) {

    tempCalGMT.setTimeInMillis(m);

switch (part) {

case Types.SQL_INTERVAL_YEAR:

      if (tempCalGMT.get(Calendar.MONTH) > 6) {

        tempCalGMT.add(Calendar.YEAR,1);

      }

    break;

case Types.SQL_INTERVAL_MONTH:

  if (tempCalGMT.get(Calendar.DAY_OF_MONTH) > 15) {

    tempCalGMT.add(Calendar.MONTH,1);

  }

break;

case Types.SQL_INTERVAL_DAY:

if (tempCalGMT.get(Calendar.HOUR_OF_DAY) > 11) {

tempCalGMT.add(Calendar.DAY_OF_MONTH,1);

}

break;

case Types.SQL_INTERVAL_HOUR:

if (tempCalGMT.get(Calendar.MINUTE) > 29) {

tempCalGMT.add(Calendar.HOUR_OF_DAY,1);

}

break;

case Types.SQL_INTERVAL_MINUTE:

if (tempCalGMT.get(Calendar.SECOND) > 29) {

tempCalGMT.add(Calendar.MINUTE,1);

}

break;

case Types.SQL_INTERVAL_SECOND:

if (tempCalGMT.get(Calendar.MILLISECOND) > 499) {

tempCalGMT.add(Calendar.SECOND,1);

}

break;

case DTIType.WEEK_OF_YEAR:

{

int dayYear=tempCalGMT.get(Calendar.DAY_OF_YEAR);

int year=tempCalGMT.get(Calendar.YEAR);

int week=tempCalGMT.get(Calendar.WEEK_OF_YEAR);

int day=tempCalGMT.get(Calendar.DAY_OF_WEEK);

tempCalGMT.clear();

tempCalGMT.set(Calendar.YEAR,year);

if (day > 3) {

week++;

}

if (week == 1 && (dayYear > 356 || dayYear < 7)) {

tempCalGMT.set(Calendar.DAY_OF_YEAR,dayYear);

while (true) {

if (tempCalGMT.get(Calendar.DAY_OF_WEEK) == 1) {

return tempCalGMT.getTimeInMillis();

}

tempCalGMT.add(Calendar.DAY_OF_YEAR,-1);

}

}

tempCalGMT.set(Calendar.WEEK_OF_YEAR,week);

return tempCalGMT.getTimeInMillis();

}

}

zeroFromPart(tempCalGMT,part);

return tempCalGMT.getTimeInMillis();

}

}

Location: HsqlDateTime.java

Content: 

public static String getSystemTimeString(){

synchronized (sdftsSys) {

    sysDate.setTime(System.currentTimeMillis());

    return sdftsSys.format(sysDate);

  }

}

Location: HsqlDateTime.java

Content: 

public static long getTimestampSeconds(String s){

  try {

synchronized (sdfts) {

      java.util.Date d=sdfts.parse(s);

      return d.getTime() / 1000;

    }

  }

 catch (  Exception e) {

    throw Error.error(ErrorCode.X_22007);

  }

}

Location: HsqlDateTime.java

Content: 

public static String getTimestampString(long millis){

synchronized (sdfts) {

    sysDate.setTime(millis);

    return sdfts.format(sysDate);

  }

}

Location: HsqlDateTime.java

Content: 

public static void getTimestampString(StringBuffer sb,long seconds,int nanos,int scale){

synchronized (sdfts) {

    tempDate.setTime(seconds * 1000);

    sb.append(sdfts.format(tempDate));

    if (scale > 0) {

      sb.append('.');

      sb.append(StringUtil.toZeroPaddedString(nanos,9,scale));

    }

  }

}

Location: HsqlDateTime.java

Content: 

/** 

 * truncates millisecond date object

 */

public static long getTruncatedPart(long m,int part){

synchronized (tempCalGMT) {

    tempCalGMT.setTimeInMillis(m);

switch (part) {

case DTIType.WEEK_OF_YEAR:

{

        int dayWeek=tempCalGMT.get(Calendar.DAY_OF_WEEK);

        tempCalGMT.add(Calendar.DAY_OF_YEAR,1 - dayWeek);

        resetToDate(tempCalGMT);

        break;

      }

default :

{

      zeroFromPart(tempCalGMT,part);

      break;

    }

}

return tempCalGMT.getTimeInMillis();

}

}

Location: HsqlDateTime.java

Content: 

public static int getZoneMillis(Calendar cal,long millis){

  return cal.getTimeZone().getOffset(millis);

}

Location: HsqlDateTime.java

Content: 

public static int getZoneSeconds(Calendar cal){

  return (cal.get(Calendar.ZONE_OFFSET) + cal.get(Calendar.DST_OFFSET)) / 1000;

}

Location: HsqlDateTime.java

Content: 

private static void resetToDate(Calendar cal){

  cal.set(Calendar.HOUR_OF_DAY,0);

  cal.set(Calendar.MINUTE,0);

  cal.set(Calendar.SECOND,0);

  cal.set(Calendar.MILLISECOND,0);

}

Location: HsqlDateTime.java

Content: 

private static void resetToTime(Calendar cal){

  cal.set(Calendar.YEAR,1970);

  cal.set(Calendar.MONTH,0);

  cal.set(Calendar.DATE,1);

  cal.set(Calendar.MILLISECOND,0);

}

Location: HsqlDateTime.java

Content: 

/** 

 * Sets the time in the given Calendar using the given milliseconds value; wrapper method to allow use of more efficient JDK1.4 method on JDK1.4 (was protected in earlier versions).

 * @param cal                             the Calendar

 * @param millis                  the time value in milliseconds

 */

public static void setTimeInMillis(Calendar cal,long millis){

  cal.setTimeInMillis(millis);

}

Location: HsqlDateTime.java

Content: 

public static TimestampData toDate(String string,String pattern,SimpleDateFormat format,boolean fraction){

  long millis;

  int nanos=0;

  String javaPattern=HsqlDateTime.toJavaDatePattern(pattern);

  String tempPattern=null;

  int matchIndex=javaPattern.indexOf("*IY");

  if (matchIndex >= 0) {

    throw Error.error(ErrorCode.X_22511);

  }

  matchIndex=javaPattern.indexOf("*WW");

  if (matchIndex >= 0) {

    throw Error.error(ErrorCode.X_22511);

  }

  matchIndex=javaPattern.indexOf("*W");

  if (matchIndex >= 0) {

    throw Error.error(ErrorCode.X_22511);

  }

  matchIndex=javaPattern.indexOf("S");

  if (matchIndex >= 0) {

    tempPattern=javaPattern;

    javaPattern=javaPattern.substring(0,matchIndex) + javaPattern.substring(matchIndex + 1);

  }

  try {

    format.applyPattern(javaPattern);

    millis=format.parse(string).getTime();

  }

 catch (  Exception e) {

    throw Error.error(ErrorCode.X_22007,e.toString());

  }

  if (matchIndex >= 0 && fraction) {

    javaPattern=tempPattern;

    try {

      format.applyPattern(javaPattern);

      long tempMillis=format.parse(string).getTime();

      int factor=1;

      tempMillis-=millis;

      nanos=(int)tempMillis;

      while (tempMillis > 1000) {

        tempMillis/=10;

        factor*=10;

      }

      nanos*=(1000000 / factor);

    }

 catch (    Exception e) {

      throw Error.error(ErrorCode.X_22007,e.toString());

    }

  }

  return new TimestampData(millis / 1000,nanos,0);

}

Location: HsqlDateTime.java

Content: 

public static String toFormattedDate(Date date,String pattern,SimpleDateFormat format){

  String javaPattern=HsqlDateTime.toJavaDatePattern(pattern);

  try {

    format.applyPattern(javaPattern);

  }

 catch (  Exception e) {

    throw Error.error(ErrorCode.X_22511);

  }

  String result=format.format(date);

  int matchIndex=result.indexOf("*IY");

  if (matchIndex >= 0) {

    Calendar cal=format.getCalendar();

    int matchLength=3;

    int temp=result.indexOf("*IYYY");

    if (temp >= 0) {

      matchLength=5;

      matchIndex=temp;

    }

    int year=cal.get(Calendar.YEAR);

    int weekOfYear=cal.get(Calendar.WEEK_OF_YEAR);

    if (weekOfYear == 1 && cal.get(Calendar.DAY_OF_YEAR) > 360) {

      year++;

    }

 else     if (weekOfYear > 51 && cal.get(Calendar.DAY_OF_YEAR) < 4) {

      year--;

    }

    String yearString=String.valueOf(year);

    if (matchLength == 3) {

      yearString=yearString.substring(yearString.length() - 2);

    }

    StringBuilder sb=new StringBuilder(result);

    sb.replace(matchIndex,matchIndex + matchLength,yearString);

    result=sb.toString();

  }

  matchIndex=result.indexOf("*WW");

  if (matchIndex >= 0) {

    Calendar cal=format.getCalendar();

    int matchLength=3;

    int dayOfYear=cal.get(Calendar.DAY_OF_YEAR);

    int weekOfYear=((dayOfYear - 1) / 7) + 1;

    StringBuilder sb=new StringBuilder(result);

    sb.replace(matchIndex,matchIndex + matchLength,String.valueOf(weekOfYear));

    result=sb.toString();

  }

  matchIndex=result.indexOf("*IW");

  if (matchIndex >= 0) {

    Calendar cal=format.getCalendar();

    int matchLength=3;

    int weekOfYear=getDateTimePart(date.getTime(),Calendar.WEEK_OF_YEAR);

    StringBuilder sb=new StringBuilder(result);

    sb.replace(matchIndex,matchIndex + matchLength,String.valueOf(weekOfYear));

    result=sb.toString();

  }

  matchIndex=result.indexOf("*W");

  if (matchIndex >= 0) {

    Calendar cal=format.getCalendar();

    int matchLength=2;

    int dayOfMonth=cal.get(Calendar.DAY_OF_MONTH);

    int weekOfMonth=((dayOfMonth - 1) / 7) + 1;

    StringBuilder sb=new StringBuilder(result);

    sb.replace(matchIndex,matchIndex + matchLength,String.valueOf(weekOfMonth));

    result=sb.toString();

  }

  return result;

}

Location: HsqlDateTime.java

Content: 

/** 

 * Converts the given format into a pattern accepted by <code>java.text.SimpleDataFormat</code>

 * @param format

 */

public static String toJavaDatePattern(String format){

  int len=format.length();

  char ch;

  StringBuffer sb=new StringBuffer(len);

  Tokenizer tokenizer=new Tokenizer();

  int limitQuotedToken=-1;

  for (int i=0; i <= len; i++) {

    ch=(i == len) ? e : format.charAt(i);

    if (tokenizer.isInQuotes()) {

      if (tokenizer.isQuoteChar(ch)) {

        ch='\'';

      }

 else       if (ch == '\'') {

        sb.append(ch);

      }

      sb.append(ch);

      continue;

    }

    if (!tokenizer.next(ch,i)) {

      if (tokenizer.consumed) {

        int index=tokenizer.getLastMatch();

        String s=javaDateTokens[index];

        if (s.startsWith("\'") && s.endsWith("\'")) {

          if (limitQuotedToken == sb.length()) {

            sb.setLength(sb.length() - 1);

            s=s.substring(1);

          }

          limitQuotedToken=sb.length() + s.length();

        }

        sb.append(s);

        i=tokenizer.matchOffset;

      }

 else {

        if (tokenizer.isQuoteChar(ch)) {

          ch='\'';

          sb.append(ch);

        }

 else         if (tokenizer.isLiteral(ch)) {

          sb.append(ch);

        }

 else         if (ch == e) {

        }

 else {

          throw Error.error(ErrorCode.X_22007,format.substring(i));

        }

      }

      tokenizer.reset();

    }

  }

  if (tokenizer.isInQuotes()) {

    throw Error.error(ErrorCode.X_22007);

  }

  String javaPattern=sb.toString();

  return javaPattern;

}

Location: HsqlDateTime.java

Content: 

public static int toStandardIntervalPart(String format){

  int len=format.length();

  char ch;

  Tokenizer tokenizer=new Tokenizer();

  for (int i=0; i <= len; i++) {

    ch=(i == len) ? e : format.charAt(i);

    if (!tokenizer.next(ch,i)) {

      int index=tokenizer.getLastMatch();

      if (index >= 0) {

        return sqlIntervalCodes[index];

      }

      return -1;

    }

  }

  return -1;

}

Location: HsqlDateTime.java

Content: 

static void zeroFromPart(Calendar cal,int part){

switch (part) {

case Types.SQL_INTERVAL_YEAR:

    cal.set(Calendar.MONTH,0);

case Types.SQL_INTERVAL_MONTH:

  cal.set(Calendar.DAY_OF_MONTH,1);

case Types.SQL_INTERVAL_DAY:

cal.set(Calendar.HOUR_OF_DAY,0);

case Types.SQL_INTERVAL_HOUR:

cal.set(Calendar.MINUTE,0);

case Types.SQL_INTERVAL_MINUTE:

cal.set(Calendar.SECOND,0);

case Types.SQL_INTERVAL_SECOND:

cal.set(Calendar.MILLISECOND,0);

default :

}

}

