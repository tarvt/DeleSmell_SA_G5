Location: LobStoreInJar.java

Content: 

private void fileSeek(long position) throws IOException {

  if (dataInput == null) {

    hongshuai();

    if (dataInput != null) {

      dataInput.close();

    }

    InputStream fis=null;

    try {

      fis=getClass().getResourceAsStream(fileName);

      if (fis == null) {

        ClassLoader cl=Thread.currentThread().getContextClassLoader();

        if (cl != null) {

          fis=cl.getResourceAsStream(fileName);

        }

      }

    }

 catch (    Throwable t) {

    }

 finally {

      if (fis == null) {

        throw new FileNotFoundException(fileName);

      }

    }

    dataInput=new DataInputStream(fis);

    realPosition=0;

  }

  long skipPosition=realPosition;

  if (position < skipPosition) {

    hongshuai();

    if (dataInput != null) {

      dataInput.close();

    }

    InputStream fis=null;

    try {

      fis=getClass().getResourceAsStream(fileName);

      if (fis == null) {

        ClassLoader cl=Thread.currentThread().getContextClassLoader();

        if (cl != null) {

          fis=cl.getResourceAsStream(fileName);

        }

      }

    }

 catch (    Throwable t) {

    }

 finally {

      if (fis == null) {

        throw new FileNotFoundException(fileName);

      }

    }

    dataInput=new DataInputStream(fis);

    realPosition=0;

    skipPosition=0;

  }

  while (position > skipPosition) {

    skipPosition+=dataInput.skip(position - skipPosition);

  }

  realPosition=position;

}

Location: LobStoreInJar.java

Content: 

public byte[] getBlockBytes(int blockAddress,int blockCount){

  try {

    long address=(long)blockAddress * lobBlockSize;

    int count=blockCount * lobBlockSize;

    byte[] dataBytes=new byte[count];

    fileSeek(address);

    dataInput.readFully(dataBytes,0,count);

    realPosition=address + count;

    return dataBytes;

  }

 catch (  Throwable t) {

    throw Error.error(ErrorCode.DATA_FILE_ERROR,t);

  }

}

Location: LobStoreInJar.java

Content: 

public int getBlockSize(){

  return lobBlockSize;

}

Location: LobStoreInJar.java

Content: 

public long getLength(){

  return 0;

}

Location: LobStoreInJar.java

Content: 

public LobStoreInJar(Database database,int lobBlockSize){

  this.lobBlockSize=lobBlockSize;

  this.database=database;

  try {

    fileName=database.getPath() + ".lobs";

  }

 catch (  Throwable t) {

    throw Error.error(ErrorCode.DATA_FILE_ERROR,t);

  }

}

Location: LobStoreInJar.java

Content: 

public void setBlockBytes(byte[] dataBytes,int blockAddress,int blockCount){

}

Location: LobStoreInJar.java

Content: 

public void setBlockBytes(byte[] dataBytes,long position,int offset,int length){

}

Location: LobStoreInJar.java

Content: 

public void setLength(long length){

}

Location: LobStoreInJar.java

Content: 

public void synch(){

}

