Location: HashSet.java

Content: 

/** 

 * returns true if any added 

 */

public boolean addAll(Object[] keys,int start,int limit){

  boolean changed=false;

  for (int i=start; i < keys.length && i < limit; i++) {

    changed|=add(keys[i]);

  }

  return changed;

}

Location: HashSet.java

Content: 

public boolean containsAll(Collection col){

  Iterator it=col.iterator();

  while (it.hasNext()) {

    if (contains(it.next())) {

      continue;

    }

    return false;

  }

  return true;

}

Location: HashSet.java

Content: 

public HashSet(){

  this(8);

}

Location: HashSet.java

Content: 

public HashSet(int initialCapacity) throws IllegalArgumentException {

  super(initialCapacity,BaseHashMap.objectKeyOrValue,BaseHashMap.noKeyOrValue,false);

}

Location: HashSet.java

Content: 

/** 

 * returns true if all were removed 

 */

public boolean removeAll(Collection c){

  Iterator it=c.iterator();

  boolean result=true;

  while (it.hasNext()) {

    result&=remove(it.next());

  }

  return result;

}

Location: HashSet.java

Content: 

/** 

 * returns true if all were removed 

 */

public boolean removeAll(Object[] keys){

  boolean result=true;

  for (int i=0; i < keys.length; i++) {

    result&=remove(keys[i]);

  }

  return result;

}

