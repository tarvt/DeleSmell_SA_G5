Location: SqlFileScanner.java

Content: 

private void debug(String id,String msg){

  logger.finest(id + ":  [" + msg+ ']');

}

Location: SqlFileScanner.java

Content: 

public String getRawPrompt(){

  return rawPrompt;

}

Location: SqlFileScanner.java

Content: 

public String getSqlPrompt(){

  return sqlPrompt;

}

Location: SqlFileScanner.java

Content: 

public String getSqltoolPrompt(){

  return sqltoolPrompt;

}

Location: SqlFileScanner.java

Content: 

public void prompt(){

  if (sqltoolPrompt != null)   prompt(sqltoolPrompt);

  specialAppendState=(interactive && magicPrefix != null);

  if (interactive && magicPrefix != null) {

    psStd.print(magicPrefix);

    magicPrefix=null;

  }

}

Location: SqlFileScanner.java

Content: 

private void prompt(String s){

  if (!interactive)   return;

  psStd.print(s);

}

Location: SqlFileScanner.java

Content: 

public void pushbackTrim(){

  String lineString=yytext();

  int len=lineString.length();

  yypushback((len > 1 && lineString.charAt(len - 2) == '\r') ? 2 : 1);

}

Location: SqlFileScanner.java

Content: 

private void rawLeadinPrompt(){

  if (!interactive) {

    return;

  }

  assert rawLeadinPrompt != null : "Internal assertion failed.  " + "Scanner's message Resource Bundle not initialized properly";

  psStd.println(rawLeadinPrompt);

}

Location: SqlFileScanner.java

Content: 

public void setCommandBuffer(String s){

  commandBuffer.setLength(0);

  commandBuffer.append(s);

}

Location: SqlFileScanner.java

Content: 

public void setInteractive(boolean interactive){

  this.interactive=interactive;

}

Location: SqlFileScanner.java

Content: 

public void setMagicPrefix(String magicPrefix){

  this.magicPrefix=magicPrefix;

}

Location: SqlFileScanner.java

Content: 

/** 

 * Really need a way to validate that this is called before using the scanner, like Spring's init-method property. For now, will just check explicitly before using.

 */

public void setRawLeadinPrompt(String rawLeadinPrompt){

  this.rawLeadinPrompt=rawLeadinPrompt;

}

Location: SqlFileScanner.java

Content: 

public void setRawPrompt(String rawPrompt){

  this.rawPrompt=rawPrompt;

}

Location: SqlFileScanner.java

Content: 

public void setRequestedState(int requestedState){

  this.requestedState=requestedState;

}

Location: SqlFileScanner.java

Content: 

public void setSqlPrompt(String sqlPrompt){

  this.sqlPrompt=sqlPrompt;

}

Location: SqlFileScanner.java

Content: 

public void setSqltoolPrompt(String sqltoolPrompt){

  this.sqltoolPrompt=sqltoolPrompt;

}

Location: SqlFileScanner.java

Content: 

public void setStdPrintStream(PrintStream psStd){

  this.psStd=psStd;

}

Location: SqlFileScanner.java

Content: 

/** 

 * Creates a new scanner. There is also java.io.Reader version of this constructor.

 * @param in  the java.io.Inputstream to read input from.

 */

public SqlFileScanner(java.io.InputStream in){

  this(new java.io.InputStreamReader(in));

}

Location: SqlFileScanner.java

Content: 

public String strippedYytext(){

  String lineString=yytext();

  int len=lineString.length();

  len=len - ((len > 1 && lineString.charAt(len - 2) == '\r') ? 2 : 1);

  return (lineString.substring(0,len));

}

Location: SqlFileScanner.java

Content: 

private void trimBuffer(){

  int len=commandBuffer.length();

  commandBuffer.setLength(len - ((len > 1 && commandBuffer.charAt(len - 2) == '\r') ? 2 : 1));

}

Location: SqlFileScanner.java

Content: 

/** 

 * Enters a new lexical state

 * @param newState the new lexical state

 */

public final void yybegin(int newState){

  zzLexicalState=newState;

}

Location: SqlFileScanner.java

Content: 

/** 

 * Returns the character at position <tt>pos</tt> from the  matched text.  It is equivalent to yytext().charAt(pos), but faster

 * @param pos the position of the character to fetch. A value from 0 to yylength()-1.

 * @return the character at position pos

 */

public final char yycharat(int pos){

  return zzBuffer[zzStartRead + pos];

}

Location: SqlFileScanner.java

Content: 

/** 

 * Closes the input stream.

 */

public final void yyclose() throws java.io.IOException {

  zzAtEOF=true;

  zzEndRead=zzStartRead;

  if (zzReader != null)   zzReader.close();

}

Location: SqlFileScanner.java

Content: 

/** 

 * Returns the length of the matched text region.

 */

public final int yylength(){

  return zzMarkedPos - zzStartRead;

}

Location: SqlFileScanner.java

Content: 

/** 

 * Resumes scanning until the next regular expression is matched, the end of input is encountered or an I/O-Error occurs.

 * @return      the next token

 * @exception java.io.IOException  if any I/O-Error occurs

 */

public Token yylex() throws java.io.IOException {

  int zzInput;

  int zzAction;

  int zzCurrentPosL;

  int zzMarkedPosL;

  int zzEndReadL=zzEndRead;

  char[] zzBufferL=zzBuffer;

  char[] zzCMapL=ZZ_CMAP;

  int[] zzTransL=ZZ_TRANS;

  int[] zzRowMapL=ZZ_ROWMAP;

  int[] zzAttrL=ZZ_ATTRIBUTE;

  while (true) {

    zzMarkedPosL=zzMarkedPos;

    boolean zzR=false;

    for (zzCurrentPosL=zzStartRead; zzCurrentPosL < zzMarkedPosL; zzCurrentPosL++) {

switch (zzBufferL[zzCurrentPosL]) {

case '\u000B':

case '\u000C':

case '\u0085':

case '\u2028':

case '\u2029':

        yyline++;

      yycolumn=0;

    zzR=false;

  break;

case '\r':

yyline++;

yycolumn=0;

zzR=true;

break;

case '\n':

if (zzR) zzR=false;

 else {

yyline++;

yycolumn=0;

}

break;

default :

zzR=false;

yycolumn++;

}

}

if (zzR) {

boolean zzPeek;

if (zzMarkedPosL < zzEndReadL) zzPeek=zzBufferL[zzMarkedPosL] == '\n';

 else if (zzAtEOF) zzPeek=false;

 else {

boolean eof=zzRefill();

zzEndReadL=zzEndRead;

zzMarkedPosL=zzMarkedPos;

zzBufferL=zzBuffer;

if (eof) zzPeek=false;

 else zzPeek=zzBufferL[zzMarkedPosL] == '\n';

}

if (zzPeek) yyline--;

}

if (zzMarkedPosL > zzStartRead) {

switch (zzBufferL[zzMarkedPosL - 1]) {

case '\n':

case '\u000B':

case '\u000C':

case '\u0085':

case '\u2028':

case '\u2029':

zzAtBOL=true;

break;

case '\r':

if (zzMarkedPosL < zzEndReadL) zzAtBOL=zzBufferL[zzMarkedPosL] != '\n';

 else if (zzAtEOF) zzAtBOL=false;

 else {

boolean eof=zzRefill();

zzMarkedPosL=zzMarkedPos;

zzEndReadL=zzEndRead;

zzBufferL=zzBuffer;

if (eof) zzAtBOL=false;

 else zzAtBOL=zzBufferL[zzMarkedPosL] != '\n';

}

break;

default :

zzAtBOL=false;

}

}

zzAction=-1;

zzCurrentPosL=zzCurrentPos=zzStartRead=zzMarkedPosL;

if (zzAtBOL) zzState=ZZ_LEXSTATE[zzLexicalState + 1];

 else zzState=ZZ_LEXSTATE[zzLexicalState];

zzForAction: {

while (true) {

if (zzCurrentPosL < zzEndReadL) zzInput=zzBufferL[zzCurrentPosL++];

 else if (zzAtEOF) {

zzInput=YYEOF;

break zzForAction;

}

 else {

zzCurrentPos=zzCurrentPosL;

zzMarkedPos=zzMarkedPosL;

boolean eof=zzRefill();

zzCurrentPosL=zzCurrentPos;

zzMarkedPosL=zzMarkedPos;

zzBufferL=zzBuffer;

zzEndReadL=zzEndRead;

if (eof) {

zzInput=YYEOF;

break zzForAction;

}

 else {

zzInput=zzBufferL[zzCurrentPosL++];

}

}

int zzNext=zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];

if (zzNext == -1) break zzForAction;

zzState=zzNext;

int zzAttributes=zzAttrL[zzState];

if ((zzAttributes & 1) == 1) {

zzAction=zzState;

zzMarkedPosL=zzCurrentPosL;

if ((zzAttributes & 8) == 8) break zzForAction;

}

}

}

zzMarkedPos=zzMarkedPosL;

switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {

case 19:

{

commandBuffer.append(yytext());

debug("SQL '",yytext());

yybegin(SQL);

}

case 35:

break;

case 9:

{

commandBuffer.setLength(0);

yybegin(SPECIAL);

}

case 36:

break;

case 30:

{

hongshuai();

String lineString=yytext();

int len=lineString.length();

yypushback((len > 1 && lineString.charAt(len - 2) == '\r') ? 2 : 1);

debug("Spl. -- Comment",yytext());

}

case 37:

break;

case 10:

{

commandBuffer.setLength(0);

yybegin(EDIT);

}

case 38:

break;

case 21:

{

yybegin(YYINITIAL);

debug("Gobbled",yytext());

prompt();

}

case 39:

break;

case 31:

{

debug("/**/ Comment",yytext());

}

case 40:

break;

case 8:

{

return new Token(Token.SQL_TYPE,yyline);

}

case 41:

break;

case 2:

{

hongshuai();

if (sqltoolPrompt != null) prompt(sqltoolPrompt);

specialAppendState=(interactive && magicPrefix != null);

if (interactive && magicPrefix != null) {

psStd.print(magicPrefix);

magicPrefix=null;

}

}

case 42:

break;

case 34:

{

setCommandBuffer(strippedYytext());

yybegin(RAW);

rawLeadinPrompt();

if (rawPrompt != null) prompt(rawPrompt);

}

case 43:

break;

case 22:

{

if (commandBuffer.toString().trim().equals(".")) {

commandBuffer.setLength(0);

yybegin(RAW);

rawLeadinPrompt();

if (rawPrompt != null) prompt(rawPrompt);

}

 else {

requestedState=YYINITIAL;

yybegin(PROMPT_CHANGE_STATE);

pushbackTrim();

return new Token(Token.SPECIAL_TYPE,commandBuffer,yyline);

}

}

case 44:

break;

case 28:

{

specialAppendState=false;

commandBuffer.append(yytext());

debug("SQL -- Comment",yytext());

}

case 45:

break;

case 17:

{

if (commandBuffer.length() > 0) commandBuffer.append('\n');

commandBuffer.append(strippedYytext());

if (rawPrompt != null) prompt(rawPrompt);

}

case 46:

break;

case 26:

{

yybegin(requestedState);

prompt();

}

case 47:

break;

case 4:

{

commandBuffer.setLength(0);

yybegin(MACRO);

}

case 48:

break;

case 18:

{

commandBuffer.append(yytext());

}

case 49:

break;

case 11:

{

specialAppendState=false;

commandBuffer.append(yytext());

}

case 50:

break;

case 25:

{

requestedState=YYINITIAL;

yybegin(PROMPT_CHANGE_STATE);

pushbackTrim();

return new Token(Token.MACRO_TYPE,commandBuffer,yyline);

}

case 51:

break;

case 16:

{

if (interactive && !specialAppendState) {

requestedState=YYINITIAL;

yybegin(PROMPT_CHANGE_STATE);

pushbackTrim();

trimBuffer();

return new Token(Token.BUFFER_TYPE,commandBuffer,yyline);

}

specialAppendState=false;

commandBuffer.append(yytext());

}

case 52:

break;

case 29:

{

yybegin(YYINITIAL);

prompt();

return new Token(Token.RAWEXEC_TYPE,commandBuffer,yyline);

}

case 53:

break;

case 27:

{

yybegin(YYINITIAL);

prompt();

return new Token(Token.RAW_TYPE,commandBuffer,yyline);

}

case 54:

break;

case 14:

{

specialAppendState=false;

yybegin(YYINITIAL);

return new Token(Token.SQL_TYPE,commandBuffer,yyline);

}

case 55:

break;

case 33:

{

debug("Spl. /**/ Comment",yytext());

}

case 56:

break;

case 3:

{

yybegin(GOBBLE);

return new Token(Token.SYNTAX_ERR_TYPE,yytext(),yyline);

}

case 57:

break;

case 20:

{

commandBuffer.append(yytext());

yybegin(SQL);

debug("SQL \"",yytext());

}

case 58:

break;

case 1:

{

setCommandBuffer(yytext());

yybegin(SQL);

}

case 59:

break;

case 23:

{

requestedState=YYINITIAL;

yybegin(PROMPT_CHANGE_STATE);

pushbackTrim();

return new Token(Token.PL_TYPE,commandBuffer,yyline);

}

case 60:

break;

case 6:

{

debug("Whitespace",yytext());

}

case 61:

break;

case 12:

{

specialAppendState=false;

commandBuffer.append(yytext());

if (sqlPrompt != null) prompt(sqlPrompt);

}

case 62:

break;

case 24:

{

requestedState=YYINITIAL;

yybegin(PROMPT_CHANGE_STATE);

pushbackTrim();

return new Token(Token.EDIT_TYPE,commandBuffer,yyline);

}

case 63:

break;

case 7:

{

debug("-- Comment",yytext());

}

case 64:

break;

case 15:

{

specialAppendState=false;

commandBuffer.append(yytext());

yybegin(SQL_SINGLE_QUOTED);

}

case 65:

break;

case 5:

{

commandBuffer.setLength(0);

yybegin(PL);

}

case 66:

break;

case 32:

{

specialAppendState=false;

commandBuffer.append(yytext());

debug("SQL /**/ Comment",yytext());

}

case 67:

break;

case 13:

{

specialAppendState=false;

commandBuffer.append(yytext());

yybegin(SQL_DOUBLE_QUOTED);

}

case 68:

break;

default :

if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {

zzAtEOF=true;

zzDoEOF();

switch (zzLexicalState) {

case SPECIAL:

{

yybegin(YYINITIAL);

return new Token(Token.UNTERM_TYPE,commandBuffer,yyline);

}

case 130:

break;

case SQL_DOUBLE_QUOTED:

{

yybegin(YYINITIAL);

return new Token(Token.UNTERM_TYPE,commandBuffer,yyline);

}

case 131:

break;

case SQL_SINGLE_QUOTED:

{

yybegin(YYINITIAL);

return new Token(Token.UNTERM_TYPE,commandBuffer,yyline);

}

case 132:

break;

case RAW:

{

yybegin(YYINITIAL);

return new Token(Token.UNTERM_TYPE,commandBuffer,yyline);

}

case 133:

break;

case SQL:

{

yybegin(YYINITIAL);

return new Token(Token.UNTERM_TYPE,commandBuffer,yyline);

}

case 134:

break;

case EDIT:

{

yybegin(YYINITIAL);

return new Token(Token.UNTERM_TYPE,commandBuffer,yyline);

}

case 135:

break;

case PL:

{

yybegin(YYINITIAL);

return new Token(Token.UNTERM_TYPE,commandBuffer,yyline);

}

case 136:

break;

case MACRO:

{

yybegin(YYINITIAL);

return new Token(Token.UNTERM_TYPE,commandBuffer,yyline);

}

case 137:

break;

default :

return null;

}

}

 else {

zzScanError(ZZ_NO_MATCH);

}

}

}

}

Location: SqlFileScanner.java

Content: 

/** 

 * Pushes the specified amount of characters back into the input stream. They will be read again by then next call of the scanning method

 * @param number  the number of characters to be read again.This number must not be greater than yylength()!

 */

public void yypushback(int number){

  if (number > yylength())   zzScanError(ZZ_PUSHBACK_2BIG);

  zzMarkedPos-=number;

}

Location: SqlFileScanner.java

Content: 

/** 

 * Resets the scanner to read from a new input stream. Does not close the old reader. All internal variables are reset, the old input stream  <b>cannot</b> be reused (internal buffer is discarded and lost). Lexical state is set to <tt>ZZ_INITIAL</tt>.

 * @param reader   the new input stream 

 */

public final void yyreset(java.io.Reader reader){

  zzReader=reader;

  zzAtBOL=true;

  zzAtEOF=false;

  zzEOFDone=false;

  zzEndRead=zzStartRead=0;

  zzCurrentPos=zzMarkedPos=0;

  yyline=yychar=yycolumn=0;

  zzLexicalState=YYINITIAL;

}

Location: SqlFileScanner.java

Content: 

/** 

 * Returns the current lexical state.

 */

public final int yystate(){

  return zzLexicalState;

}

Location: SqlFileScanner.java

Content: 

/** 

 * Returns the text matched by the current regular expression.

 */

public final String yytext(){

  return new String(zzBuffer,zzStartRead,zzMarkedPos - zzStartRead);

}

Location: SqlFileScanner.java

Content: 

/** 

 * Contains user EOF-code, which will be executed exactly once, when the end of file is reached

 */

private void zzDoEOF() throws java.io.IOException {

  if (!zzEOFDone) {

    zzEOFDone=true;

    yyclose();

  }

}

Location: SqlFileScanner.java

Content: 

/** 

 * Refills the input buffer.

 * @return      <code>false</code>, iff there was new input.

 * @exception java.io.IOException  if any I/O-Error occurs

 */

private boolean zzRefill() throws java.io.IOException {

  if (zzStartRead > 0) {

    System.arraycopy(zzBuffer,zzStartRead,zzBuffer,0,zzEndRead - zzStartRead);

    zzEndRead-=zzStartRead;

    zzCurrentPos-=zzStartRead;

    zzMarkedPos-=zzStartRead;

    zzStartRead=0;

  }

  if (zzCurrentPos >= zzBuffer.length) {

    char newBuffer[]=new char[zzCurrentPos * 2];

    System.arraycopy(zzBuffer,0,newBuffer,0,zzBuffer.length);

    zzBuffer=newBuffer;

  }

  int numRead=zzReader.read(zzBuffer,zzEndRead,zzBuffer.length - zzEndRead);

  if (numRead > 0) {

    zzEndRead+=numRead;

    return false;

  }

  if (numRead == 0) {

    int c=zzReader.read();

    if (c == -1) {

      return true;

    }

 else {

      zzBuffer[zzEndRead++]=(char)c;

      return false;

    }

  }

  return true;

}

Location: SqlFileScanner.java

Content: 

/** 

 * Reports an error that occured while scanning. In a wellformed scanner (no or only correct usage of  yypushback(int) and a match-all fallback rule) this method  will only be called with things that "Can't Possibly Happen". If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty scanner etc.). Usual syntax/scanner level error handling should be done in error fallback rules.

 * @param errorCode  the code of the errormessage to display

 */

private void zzScanError(int errorCode){

  String message;

  try {

    message=ZZ_ERROR_MSG[errorCode];

  }

 catch (  ArrayIndexOutOfBoundsException e) {

    message=ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];

  }

  throw new Error(message);

}

Location: SqlFileScanner.java

Content: 

private static int[] zzUnpackAction(){

  int[] result=new int[129];

  int offset=0;

  offset=zzUnpackAction(ZZ_ACTION_PACKED_0,offset,result);

  return result;

}

Location: SqlFileScanner.java

Content: 

private static int zzUnpackAction(String packed,int offset,int[] result){

  int i=0;

  int j=offset;

  int l=packed.length();

  while (i < l) {

    int count=packed.charAt(i++);

    int value=packed.charAt(i++);

    do     result[j++]=value;

 while (--count > 0);

  }

  return j;

}

Location: SqlFileScanner.java

Content: 

private static int[] zzUnpackAttribute(){

  int[] result=new int[129];

  int offset=0;

  offset=zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0,offset,result);

  return result;

}

Location: SqlFileScanner.java

Content: 

private static int zzUnpackAttribute(String packed,int offset,int[] result){

  int i=0;

  int j=offset;

  int l=packed.length();

  while (i < l) {

    int count=packed.charAt(i++);

    int value=packed.charAt(i++);

    do     result[j++]=value;

 while (--count > 0);

  }

  return j;

}

Location: SqlFileScanner.java

Content: 

/** 

 * Unpacks the compressed character translation table.

 * @param packed   the packed character translation table

 * @return         the unpacked character translation table

 */

private static char[] zzUnpackCMap(String packed){

  char[] map=new char[0x10000];

  int i=0;

  int j=0;

  while (i < 136) {

    int count=packed.charAt(i++);

    char value=packed.charAt(i++);

    do     map[j++]=value;

 while (--count > 0);

  }

  return map;

}

Location: SqlFileScanner.java

Content: 

private static int[] zzUnpackRowMap(){

  int[] result=new int[129];

  int offset=0;

  offset=zzUnpackRowMap(ZZ_ROWMAP_PACKED_0,offset,result);

  return result;

}

Location: SqlFileScanner.java

Content: 

private static int zzUnpackRowMap(String packed,int offset,int[] result){

  int i=0;

  int j=offset;

  int l=packed.length();

  while (i < l) {

    int high=packed.charAt(i++) << 16;

    result[j++]=high | packed.charAt(i++);

  }

  return j;

}

Location: SqlFileScanner.java

Content: 

private static int[] zzUnpackTrans(){

  int[] result=new int[2871];

  int offset=0;

  offset=zzUnpackTrans(ZZ_TRANS_PACKED_0,offset,result);

  return result;

}

Location: SqlFileScanner.java

Content: 

private static int zzUnpackTrans(String packed,int offset,int[] result){

  int i=0;

  int j=offset;

  int l=packed.length();

  while (i < l) {

    int count=packed.charAt(i++);

    int value=packed.charAt(i++);

    value--;

    do     result[j++]=value;

 while (--count > 0);

  }

  return j;

}

