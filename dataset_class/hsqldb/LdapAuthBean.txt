Location: LdapAuthBean.java

Content: 

public LdapAuthBean(){

}

Location: LdapAuthBean.java

Content: 

/** 

 * Set the attribute name of the RDN + parentDn entries which will be consulted to decide whether the user can access the HyperSQL database. <P> There is no default.  If you set this attribute, then the attribute will determine whether the user can access the HyperSQL database, regardless of whether the rolesSchemaAttribute attribute is set. </P> <P> If you set just this property, then the local HyperSQL database will decide all roles for the user.  If you set this property and property rolesSchemaAttribute then this attribute will determine access, and if this attribute grants access then the rolesSchemaAttribute value will determine the user's roles. </P>

 * @param attribute attribute

 */

public void setAccessAttribute(String attribute){

  accessAttribute=attribute;

}

Location: LdapAuthBean.java

Content: 

/** 

 * String wrapper for method setAccessValuePattern(Pattern) Use the (x?) Pattern constructs to set options.

 * @see #setAccessValuePattern(Pattern)

 * @param patternString String

 */

public void setAccessValuePatternString(String patternString){

  setAccessValuePattern(Pattern.compile(patternString));

}

Location: LdapAuthBean.java

Content: 

/** 

 * Assign a pattern to detect honored accessAttribute values. If you set accessAttribute but not accessValuePattern, then all that will be checked for access is if the RDN + parentDN entry has the accessAttribute attribute. (I.e. the specific value will not matter whatsoever). <P> You may only use this property if you have set property accessAttribute. If you have set accessAttribute but not this property, then access will be decided based solely upon existence of this attribute. <P> Capture groups in the pattern will be ignored and serve no purpose. <P> N.b. this Pattern will be used for the matches() operation, therefore it must match the entire candidate value strings (this is different than the find operation which does not need to satisfy the entire candidate value). <P>Example1 :<PRE><CODE> TRUE </CODE></PRE> This will match true values per OpenLDAP's boolean OID.

 * @see Matcher#matches()

 * @param accessValuePattern Pattern

 */

public void setAccessValuePattern(Pattern accessValuePattern){

  this.accessValuePattern=accessValuePattern;

}

Location: LdapAuthBean.java

Content: 

/** 

 * Most users should not call this, and will get the default of "com.sun.jndi.ldap.LdapCtxFactory". Use this method if you prefer to use a context factory provided by your framework or container, for example, or if you are using a non-Sun JRE.

 * @param initialContextFactory factory

 */

public void setInitialContextFactory(String initialContextFactory){

  this.initialContextFactory=initialContextFactory;

}

Location: LdapAuthBean.java

Content: 

/** 

 * Do not specify URL scheme ("ldap:") because that is implied. (Since we purposefully don't support LDAPS, there would be no reason to change that). <P> If using StartTLS, then this host name must match the cn of the LDAP server's certificate. </P> <P> If you need to support LDAPS and are using SE 1.6, use our JaasAuthBean with Sun's LdapLoginModule instead of this class. </P>

 * @see JaasAuthBean

 * @param ldapHost host

 */

public void setLdapHost(String ldapHost){

  this.ldapHost=ldapHost;

}

Location: LdapAuthBean.java

Content: 

public void setLdapPort(int ldapPort){

  this.ldapPort=Integer.valueOf(ldapPort);

}

Location: LdapAuthBean.java

Content: 

/** 

 * Set DN which is parent of the user DNs. E.g.  "ou=people,dc=admc,dc=com"

 * @param parentDn parent DN

 */

public void setParentDn(String parentDn){

  this.parentDn=parentDn;

}

Location: LdapAuthBean.java

Content: 

/** 

 * A template String containing place-holder token '${username}'. All occurrences of '${username}' (without the quotes) will be translated to the username that authentication is being attempted with. <P> If you supply a principalTemplate that does not contain '${username}', then authentication will be user-independent. <P> It is common to authenticate to LDAP servers with the DN of the user's LDAP entry.  In this situation, set principalTemplate to <CODE>&lt;RDN_ATTR=&gt;${username},&lt;PARENT_DN&gt;</CODE>. For example if you use parentDn of <CODE>"ou=people,dc=admc,dc=com"</CODE> and rdnAttribute of <CODE>uid</CODE>, then you would set <PRE><CODE> "uid=${username},ou=people,dc=admc,dc=com" </CODE></PRE> <P> By default the user name will be passed exactly as it is, so don't use this setter if that is what you want.  (This works great for OpenLDAP with DIGEST-MD5 SASL, for example).

 * @param principalTemplate template

 */

public void setPrincipalTemplate(String principalTemplate){

  this.principalTemplate=principalTemplate;

}

Location: LdapAuthBean.java

Content: 

/** 

 * rdnAttribute must hold the user name exactly as the HyperSQL login will be made with. <P> This is the RDN relative to the Parent DN specified with setParentDN. Defaults to 'uid'. </P>

 * @see #setParentDn(String)

 * @param rdnAttribute RDN attribute

 */

public void setRdnAttribute(String rdnAttribute){

  this.rdnAttribute=rdnAttribute;

}

Location: LdapAuthBean.java

Content: 

/** 

 * Set the attribute name of the RDN + parentDn entries in which is stored the list of roles and optional schema for the authenticating user. <P> There is no default.  <b>You must set this attribute if you want LDAP instead of the local HyperSQL database to determine the user's roles!</b> You must set the rolesSchemaAttribute property and/or the accessAttribute property. Consequently, if you do no tset this property, then you must set the accessAttribute property, and this LdapAuthBean will only determine access not roles. </P> <P> To use the nice <i>reverse group membership</i> feature of LDAP, set this value to "memberof". </P> <P> If you have set both rolesSchemaAttribute and this value, then the attribute set here will only be consulted if the accessAttribute check succeeds. </P>

 * @param attribute attribute

 */

public void setRolesSchemaAttribute(String attribute){

  rolesSchemaAttribute=attribute;

}

Location: LdapAuthBean.java

Content: 

/** 

 * Some LDAP servers using a SASL mechanism require a realm to be specified, and some mechanisms allow a realm to be specified if you wish to use that feature. By default no realm will be sent to the LDAP server. <P> Don't use this setter if you are not setting a SASL mechanism. </P>

 * @param saslRealm realm

 */

public void setSaslRealm(String saslRealm){

  this.saslRealm=saslRealm;

}

Location: LdapAuthBean.java

Content: 

/** 

 * Defaults to "SIMPLE".

 * @param mechanism  Either 'SIMPLE' (the default) for LDAP Simple, orone of the LDAP SASL mechanisms, such as 'DIGEST-MD5'.

 */

public void setSecurityMechanism(String mechanism){

  this.mechanism=mechanism;

}

Location: LdapAuthBean.java

Content: 

/** 

 * If this is set, then the entire (brief) transaction with the LDAP server will be encrypted.

 * @param isTls boolean

 */

public void setStartTls(boolean isTls){

  this.tls=isTls;

}

