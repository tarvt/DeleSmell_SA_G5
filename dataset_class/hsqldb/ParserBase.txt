Location: ParserBase.java

Content: 

void checkIsDelimitedIdentifier(){

  if (!token.isDelimitedIdentifier) {

    throw Error.error(ErrorCode.X_42569);

  }

}

Location: ParserBase.java

Content: 

void checkIsIdentifier(){

  if (!isIdentifier()) {

    throw unexpectedToken();

  }

}

Location: ParserBase.java

Content: 

void checkIsIrregularCharInIdentifier(){

  if (token.hasIrregularChar) {

    throw unexpectedToken();

  }

}

Location: ParserBase.java

Content: 

void checkIsNonCoreReservedIdentifier(){

  if (!isNonCoreReservedIdentifier()) {

    throw unexpectedToken();

  }

}

Location: ParserBase.java

Content: 

void checkIsNonReservedIdentifier(){

  if (!isNonReservedIdentifier()) {

    throw unexpectedToken();

  }

}

Location: ParserBase.java

Content: 

void checkIsQuotedString(){

  if (token.tokenType != Tokens.X_VALUE || !token.dataType.isCharacterType()) {

    throw unexpectedToken();

  }

}

Location: ParserBase.java

Content: 

void checkIsSimpleName(){

  if (!isSimpleName()) {

    throw unexpectedToken();

  }

}

Location: ParserBase.java

Content: 

void checkIsThis(int type){

  if (token.tokenType != type) {

    String required=Tokens.getKeyword(type);

    throw unexpectedTokenRequire(required);

  }

}

Location: ParserBase.java

Content: 

void checkIsUndelimitedIdentifier(){

  if (!token.isUndelimitedIdentifier) {

    throw unexpectedToken();

  }

}

Location: ParserBase.java

Content: 

void checkIsValue(){

  if (token.tokenType != Tokens.X_VALUE) {

    throw unexpectedToken();

  }

}

Location: ParserBase.java

Content: 

static int getExpressionType(int tokenT){

  int type=expressionTypeMap.get(tokenT,-1);

  if (type == -1) {

    throw Error.runtimeError(ErrorCode.U_S0500,"ParserBase");

  }

  return type;

}

Location: ParserBase.java

Content: 

String getLastPart(){

  return scanner.getPart(partPosition,scanner.getTokenPosition());

}

Location: ParserBase.java

Content: 

String getLastPartAndCurrent(int position){

  return scanner.getPart(position,scanner.getPosition());

}

Location: ParserBase.java

Content: 

String getLastPart(int position){

  return scanner.getPart(position,scanner.getTokenPosition());

}

Location: ParserBase.java

Content: 

public int getPartPosition(){

  return partPosition;

}

Location: ParserBase.java

Content: 

Token[] getRecordedStatement(){

  isRecording=false;

  recordedStatement.remove(recordedStatement.size() - 1);

  Token[] tokens=new Token[recordedStatement.size()];

  recordedStatement.toArray(tokens);

  recordedStatement=null;

  return tokens;

}

Location: ParserBase.java

Content: 

Token getRecordedToken(){

  if (isRecording) {

    return (Token)recordedStatement.get(recordedStatement.size() - 1);

  }

 else {

    return token.duplicate();

  }

}

Location: ParserBase.java

Content: 

String getStatementForRoutine(int startPosition,short[] startTokens){

  int tokenIndex=0;

  int semiIndex=-1;

  int semiPosition=-1;

  while (true) {

    if (token.tokenType == Tokens.SEMICOLON) {

      semiPosition=scanner.getTokenPosition();

      semiIndex=tokenIndex;

    }

 else     if (token.tokenType == Tokens.X_ENDPARSE) {

      if (semiIndex > 0 && semiIndex == tokenIndex - 1) {

        rewind(semiPosition);

      }

      break;

    }

 else {

      if (ArrayUtil.find(startTokens,token.tokenType) != -1) {

        break;

      }

    }

    read();

    tokenIndex++;

  }

  String sql=scanner.getPart(startPosition,scanner.getTokenPosition());

  return sql;

}

Location: ParserBase.java

Content: 

String getStatement(int startPosition,short[] startTokens){

  while (true) {

    if (token.tokenType == Tokens.SEMICOLON) {

      break;

    }

 else     if (token.tokenType == Tokens.X_ENDPARSE) {

      break;

    }

 else {

      if (ArrayUtil.find(startTokens,token.tokenType) != -1) {

        break;

      }

    }

    read();

  }

  String sql=scanner.getPart(startPosition,scanner.getTokenPosition());

  return sql;

}

Location: ParserBase.java

Content: 

boolean isCoreReservedKey(){

  return token.isCoreReservedIdentifier;

}

Location: ParserBase.java

Content: 

boolean isDelimitedIdentifier(){

  return token.isDelimitedIdentifier;

}

Location: ParserBase.java

Content: 

boolean isDelimitedSimpleName(){

  return token.isDelimitedIdentifier && token.namePrefix == null;

}

Location: ParserBase.java

Content: 

boolean isIdentifier(){

  return token.isUndelimitedIdentifier || token.isDelimitedIdentifier;

}

Location: ParserBase.java

Content: 

boolean isNonCoreReservedIdentifier(){

  return !token.isCoreReservedIdentifier && (token.isUndelimitedIdentifier || token.isDelimitedIdentifier);

}

Location: ParserBase.java

Content: 

boolean isNonReservedIdentifier(){

  return !token.isReservedIdentifier && (token.isUndelimitedIdentifier || token.isDelimitedIdentifier);

}

Location: ParserBase.java

Content: 

boolean isReservedKey(){

  return token.isReservedIdentifier;

}

Location: ParserBase.java

Content: 

boolean isSimpleName(){

  return isNonCoreReservedIdentifier() && token.namePrefix == null;

}

Location: ParserBase.java

Content: 

boolean isUndelimitedSimpleName(){

  return token.isUndelimitedIdentifier && token.namePrefix == null;

}

Location: ParserBase.java

Content: 

/** 

 * Constructs a new BaseParser object with the given context.

 * @param scanner the token source from which to parse commands

 */

ParserBase(Scanner scanner){

  this.scanner=scanner;

  this.token=scanner.token;

}

Location: ParserBase.java

Content: 

Expression readDateTimeIntervalLiteral(Session session){

  int pos=getPosition();

switch (token.tokenType) {

case Tokens.DATE:

{

      hongshuai();

      scanner.scanNext();

      if (token.isMalformed) {

        int errorCode=-1;

switch (token.tokenType) {

case Tokens.X_MALFORMED_BINARY_STRING:

          errorCode=ErrorCode.X_42587;

        break;

case Tokens.X_MALFORMED_BIT_STRING:

      errorCode=ErrorCode.X_42588;

    break;

case Tokens.X_MALFORMED_UNICODE_STRING:

  errorCode=ErrorCode.X_42586;

break;

case Tokens.X_MALFORMED_STRING:

errorCode=ErrorCode.X_42584;

break;

case Tokens.X_UNKNOWN_TOKEN:

errorCode=ErrorCode.X_42582;

break;

case Tokens.X_MALFORMED_NUMERIC:

errorCode=ErrorCode.X_42585;

break;

case Tokens.X_MALFORMED_COMMENT:

errorCode=ErrorCode.X_42589;

break;

case Tokens.X_MALFORMED_IDENTIFIER:

errorCode=ErrorCode.X_42583;

break;

default :

}

throw Error.error(errorCode,token.getFullString());

}

if (isRecording) {

Token dup=token.duplicate();

dup.position=scanner.getTokenPosition();

recordedStatement.add(dup);

}

if (token.tokenType != Tokens.X_VALUE || !token.dataType.isCharacterType()) {

break;

}

String s=token.tokenString;

read();

Object date=scanner.newDate(s);

return new ExpressionValue(date,Type.SQL_DATE);

}

case Tokens.TIME:

{

hongshuai();

scanner.scanNext();

if (token.isMalformed) {

int errorCode=-1;

switch (token.tokenType) {

case Tokens.X_MALFORMED_BINARY_STRING:

errorCode=ErrorCode.X_42587;

break;

case Tokens.X_MALFORMED_BIT_STRING:

errorCode=ErrorCode.X_42588;

break;

case Tokens.X_MALFORMED_UNICODE_STRING:

errorCode=ErrorCode.X_42586;

break;

case Tokens.X_MALFORMED_STRING:

errorCode=ErrorCode.X_42584;

break;

case Tokens.X_UNKNOWN_TOKEN:

errorCode=ErrorCode.X_42582;

break;

case Tokens.X_MALFORMED_NUMERIC:

errorCode=ErrorCode.X_42585;

break;

case Tokens.X_MALFORMED_COMMENT:

errorCode=ErrorCode.X_42589;

break;

case Tokens.X_MALFORMED_IDENTIFIER:

errorCode=ErrorCode.X_42583;

break;

default :

}

throw Error.error(errorCode,token.getFullString());

}

if (isRecording) {

Token dup=token.duplicate();

dup.position=scanner.getTokenPosition();

recordedStatement.add(dup);

}

if (token.tokenType != Tokens.X_VALUE || !token.dataType.isCharacterType()) {

break;

}

String s=token.tokenString;

read();

TimeData value=scanner.newTime(s);

Type dataType=scanner.dateTimeType;

return new ExpressionValue(value,dataType);

}

case Tokens.TIMESTAMP:

{

hongshuai();

scanner.scanNext();

if (token.isMalformed) {

int errorCode=-1;

switch (token.tokenType) {

case Tokens.X_MALFORMED_BINARY_STRING:

errorCode=ErrorCode.X_42587;

break;

case Tokens.X_MALFORMED_BIT_STRING:

errorCode=ErrorCode.X_42588;

break;

case Tokens.X_MALFORMED_UNICODE_STRING:

errorCode=ErrorCode.X_42586;

break;

case Tokens.X_MALFORMED_STRING:

errorCode=ErrorCode.X_42584;

break;

case Tokens.X_UNKNOWN_TOKEN:

errorCode=ErrorCode.X_42582;

break;

case Tokens.X_MALFORMED_NUMERIC:

errorCode=ErrorCode.X_42585;

break;

case Tokens.X_MALFORMED_COMMENT:

errorCode=ErrorCode.X_42589;

break;

case Tokens.X_MALFORMED_IDENTIFIER:

errorCode=ErrorCode.X_42583;

break;

default :

}

throw Error.error(errorCode,token.getFullString());

}

if (isRecording) {

Token dup=token.duplicate();

dup.position=scanner.getTokenPosition();

recordedStatement.add(dup);

}

if (token.tokenType != Tokens.X_VALUE || !token.dataType.isCharacterType()) {

break;

}

String s=token.tokenString;

read();

Object date=scanner.newTimestamp(s);

Type dataType=scanner.dateTimeType;

return new ExpressionValue(date,dataType);

}

case Tokens.INTERVAL:

{

boolean minus=false;

read();

if (token.tokenType == Tokens.MINUS_OP) {

hongshuai();

scanner.scanNext();

if (token.isMalformed) {

int errorCode=-1;

switch (token.tokenType) {

case Tokens.X_MALFORMED_BINARY_STRING:

errorCode=ErrorCode.X_42587;

break;

case Tokens.X_MALFORMED_BIT_STRING:

errorCode=ErrorCode.X_42588;

break;

case Tokens.X_MALFORMED_UNICODE_STRING:

errorCode=ErrorCode.X_42586;

break;

case Tokens.X_MALFORMED_STRING:

errorCode=ErrorCode.X_42584;

break;

case Tokens.X_UNKNOWN_TOKEN:

errorCode=ErrorCode.X_42582;

break;

case Tokens.X_MALFORMED_NUMERIC:

errorCode=ErrorCode.X_42585;

break;

case Tokens.X_MALFORMED_COMMENT:

errorCode=ErrorCode.X_42589;

break;

case Tokens.X_MALFORMED_IDENTIFIER:

errorCode=ErrorCode.X_42583;

break;

default :

}

throw Error.error(errorCode,token.getFullString());

}

if (isRecording) {

Token dup=token.duplicate();

dup.position=scanner.getTokenPosition();

recordedStatement.add(dup);

}

minus=true;

}

 else if (token.tokenType == Tokens.PLUS_OP) {

hongshuai();

scanner.scanNext();

if (token.isMalformed) {

int errorCode=-1;

switch (token.tokenType) {

case Tokens.X_MALFORMED_BINARY_STRING:

errorCode=ErrorCode.X_42587;

break;

case Tokens.X_MALFORMED_BIT_STRING:

errorCode=ErrorCode.X_42588;

break;

case Tokens.X_MALFORMED_UNICODE_STRING:

errorCode=ErrorCode.X_42586;

break;

case Tokens.X_MALFORMED_STRING:

errorCode=ErrorCode.X_42584;

break;

case Tokens.X_UNKNOWN_TOKEN:

errorCode=ErrorCode.X_42582;

break;

case Tokens.X_MALFORMED_NUMERIC:

errorCode=ErrorCode.X_42585;

break;

case Tokens.X_MALFORMED_COMMENT:

errorCode=ErrorCode.X_42589;

break;

case Tokens.X_MALFORMED_IDENTIFIER:

errorCode=ErrorCode.X_42583;

break;

default :

}

throw Error.error(errorCode,token.getFullString());

}

if (isRecording) {

Token dup=token.duplicate();

dup.position=scanner.getTokenPosition();

recordedStatement.add(dup);

}

}

if (token.tokenType != Tokens.X_VALUE) {

break;

}

String s=token.tokenString;

if (!token.dataType.isIntegralType() && !token.dataType.isCharacterType()) {

break;

}

read();

IntervalType dataType=readIntervalType(session,false);

Object interval=scanner.newInterval(s,dataType);

dataType=(IntervalType)scanner.dateTimeType;

if (minus) {

interval=dataType.negate(interval);

}

return new ExpressionValue(interval,dataType);

}

default :

throw Error.runtimeError(ErrorCode.U_S0500,"ParserBase");

}

rewind(pos);

return null;

}

Location: ParserBase.java

Content: 

boolean readIfThis(int tokenId){

  if (token.tokenType == tokenId) {

    hongshuai();

    scanner.scanNext();

    if (token.isMalformed) {

      int errorCode=-1;

switch (token.tokenType) {

case Tokens.X_MALFORMED_BINARY_STRING:

        errorCode=ErrorCode.X_42587;

      break;

case Tokens.X_MALFORMED_BIT_STRING:

    errorCode=ErrorCode.X_42588;

  break;

case Tokens.X_MALFORMED_UNICODE_STRING:

errorCode=ErrorCode.X_42586;

break;

case Tokens.X_MALFORMED_STRING:

errorCode=ErrorCode.X_42584;

break;

case Tokens.X_UNKNOWN_TOKEN:

errorCode=ErrorCode.X_42582;

break;

case Tokens.X_MALFORMED_NUMERIC:

errorCode=ErrorCode.X_42585;

break;

case Tokens.X_MALFORMED_COMMENT:

errorCode=ErrorCode.X_42589;

break;

case Tokens.X_MALFORMED_IDENTIFIER:

errorCode=ErrorCode.X_42583;

break;

default :

}

throw Error.error(errorCode,token.getFullString());

}

if (isRecording) {

Token dup=token.duplicate();

dup.position=scanner.getTokenPosition();

recordedStatement.add(dup);

}

return true;

}

return false;

}

Location: ParserBase.java

Content: 

boolean readIfThis(String tokenString){

  if (tokenString.equals(token.tokenString)) {

    hongshuai();

    scanner.scanNext();

    if (token.isMalformed) {

      int errorCode=-1;

switch (token.tokenType) {

case Tokens.X_MALFORMED_BINARY_STRING:

        errorCode=ErrorCode.X_42587;

      break;

case Tokens.X_MALFORMED_BIT_STRING:

    errorCode=ErrorCode.X_42588;

  break;

case Tokens.X_MALFORMED_UNICODE_STRING:

errorCode=ErrorCode.X_42586;

break;

case Tokens.X_MALFORMED_STRING:

errorCode=ErrorCode.X_42584;

break;

case Tokens.X_UNKNOWN_TOKEN:

errorCode=ErrorCode.X_42582;

break;

case Tokens.X_MALFORMED_NUMERIC:

errorCode=ErrorCode.X_42585;

break;

case Tokens.X_MALFORMED_COMMENT:

errorCode=ErrorCode.X_42589;

break;

case Tokens.X_MALFORMED_IDENTIFIER:

errorCode=ErrorCode.X_42583;

break;

default :

}

throw Error.error(errorCode,token.getFullString());

}

if (isRecording) {

Token dup=token.duplicate();

dup.position=scanner.getTokenPosition();

recordedStatement.add(dup);

}

return true;

}

return false;

}

Location: ParserBase.java

Content: 

Integer readIntegerObject(){

  int value=readInteger();

  return ValuePool.getInt(value);

}

Location: ParserBase.java

Content: 

IntervalType readIntervalType(Session session,boolean maxPrecisionDefault){

  int precision=-1;

  int scale=-1;

  int startToken;

  int endToken;

  String startTokenString;

  int startIndex=-1;

  int endIndex=-1;

  startToken=endToken=token.tokenType;

  startTokenString=token.tokenString;

  read();

  if (token.tokenType == Tokens.OPENBRACKET) {

    hongshuai();

    scanner.scanNext();

    if (token.isMalformed) {

      int errorCode=-1;

switch (token.tokenType) {

case Tokens.X_MALFORMED_BINARY_STRING:

        errorCode=ErrorCode.X_42587;

      break;

case Tokens.X_MALFORMED_BIT_STRING:

    errorCode=ErrorCode.X_42588;

  break;

case Tokens.X_MALFORMED_UNICODE_STRING:

errorCode=ErrorCode.X_42586;

break;

case Tokens.X_MALFORMED_STRING:

errorCode=ErrorCode.X_42584;

break;

case Tokens.X_UNKNOWN_TOKEN:

errorCode=ErrorCode.X_42582;

break;

case Tokens.X_MALFORMED_NUMERIC:

errorCode=ErrorCode.X_42585;

break;

case Tokens.X_MALFORMED_COMMENT:

errorCode=ErrorCode.X_42589;

break;

case Tokens.X_MALFORMED_IDENTIFIER:

errorCode=ErrorCode.X_42583;

break;

default :

}

throw Error.error(errorCode,token.getFullString());

}

if (isRecording) {

Token dup=token.duplicate();

dup.position=scanner.getTokenPosition();

recordedStatement.add(dup);

}

precision=readInteger();

if (precision <= 0) {

throw Error.error(ErrorCode.X_42592);

}

if (token.tokenType == Tokens.COMMA) {

if (startToken != Tokens.SECOND) {

throw unexpectedToken();

}

read();

scale=readInteger();

if (scale < 0) {

throw Error.error(ErrorCode.X_42592);

}

}

readThis(Tokens.CLOSEBRACKET);

}

if (token.tokenType == Tokens.TO) {

hongshuai();

scanner.scanNext();

if (token.isMalformed) {

int errorCode=-1;

switch (token.tokenType) {

case Tokens.X_MALFORMED_BINARY_STRING:

errorCode=ErrorCode.X_42587;

break;

case Tokens.X_MALFORMED_BIT_STRING:

errorCode=ErrorCode.X_42588;

break;

case Tokens.X_MALFORMED_UNICODE_STRING:

errorCode=ErrorCode.X_42586;

break;

case Tokens.X_MALFORMED_STRING:

errorCode=ErrorCode.X_42584;

break;

case Tokens.X_UNKNOWN_TOKEN:

errorCode=ErrorCode.X_42582;

break;

case Tokens.X_MALFORMED_NUMERIC:

errorCode=ErrorCode.X_42585;

break;

case Tokens.X_MALFORMED_COMMENT:

errorCode=ErrorCode.X_42589;

break;

case Tokens.X_MALFORMED_IDENTIFIER:

errorCode=ErrorCode.X_42583;

break;

default :

}

throw Error.error(errorCode,token.getFullString());

}

if (isRecording) {

Token dup=token.duplicate();

dup.position=scanner.getTokenPosition();

recordedStatement.add(dup);

}

endToken=token.tokenType;

read();

}

if (token.tokenType == Tokens.OPENBRACKET) {

if (endToken != Tokens.SECOND || endToken == startToken) {

throw unexpectedToken();

}

read();

scale=readInteger();

if (scale < 0) {

throw Error.error(ErrorCode.X_42592);

}

readThis(Tokens.CLOSEBRACKET);

}

startIndex=ArrayUtil.find(Tokens.SQL_INTERVAL_FIELD_CODES,startToken);

endIndex=ArrayUtil.find(Tokens.SQL_INTERVAL_FIELD_CODES,endToken);

if (precision == -1 && maxPrecisionDefault) {

if (startIndex == IntervalType.INTERVAL_SECOND_INDEX) {

precision=IntervalType.maxIntervalSecondPrecision;

}

 else {

precision=IntervalType.maxIntervalPrecision;

}

}

if (startIndex == -1 && session.database.sqlSyntaxMys) {

int type=FunctionCustom.getSQLTypeForToken(startTokenString);

int startType=IntervalType.getStartIntervalType(type);

int endType=IntervalType.getEndIntervalType(type);

return IntervalType.getIntervalType(type,startType,endType,IntervalType.maxIntervalPrecision,IntervalType.maxFractionPrecision,true);

}

return IntervalType.getIntervalType(startIndex,endIndex,precision,scale);

}

Location: ParserBase.java

Content: 

String readQuotedString(){

  checkIsValue();

  if (!token.dataType.isCharacterType()) {

    throw Error.error(ErrorCode.X_42563);

  }

  String value=token.tokenString;

  read();

  return value;

}

Location: ParserBase.java

Content: 

void readThis(int tokenId){

  if (token.tokenType != tokenId) {

    String required=Tokens.getKeyword(tokenId);

    throw unexpectedTokenRequire(required);

  }

  read();

}

Location: ParserBase.java

Content: 

void readThis(String tokenString){

  if (!tokenString.equals(token.tokenString)) {

    String required=tokenString;

    throw unexpectedTokenRequire(required);

  }

  read();

}

Location: ParserBase.java

Content: 

void readUnquotedIdentifier(String ident){

  checkIsSimpleName();

  if (!token.tokenString.equals(ident)) {

    throw unexpectedToken();

  }

  read();

}

Location: ParserBase.java

Content: 

void rewind(int position){

  if (position == scanner.getTokenPosition()) {

    return;

  }

  scanner.position(position);

  if (isRecording) {

    int i=recordedStatement.size() - 1;

    for (; i >= 0; i--) {

      Token token=(Token)recordedStatement.get(i);

      if (token.position < position) {

        break;

      }

    }

    recordedStatement.setSize(i + 1);

  }

  read();

}

Location: ParserBase.java

Content: 

public void setPartPosition(int parsePosition){

  this.partPosition=parsePosition;

}

Location: ParserBase.java

Content: 

void startRecording(){

  recordedStatement=new HsqlArrayList();

  recordedStatement.add(token.duplicate());

  isRecording=true;

}

Location: ParserBase.java

Content: 

HsqlException tooManyIdentifiers(){

  String tokenS;

  if (token.namePrePrePrefix != null) {

    tokenS=token.namePrePrePrefix;

  }

 else   if (token.namePrePrefix != null) {

    tokenS=token.namePrePrefix;

  }

 else   if (token.namePrefix != null) {

    tokenS=token.namePrefix;

  }

 else {

    tokenS=token.tokenString;

  }

  return Error.parseError(ErrorCode.X_42551,tokenS,scanner.getLineNumber());

}

Location: ParserBase.java

Content: 

HsqlException unexpectedToken(){

  if (token.tokenType == Tokens.X_ENDPARSE) {

    return Error.parseError(ErrorCode.X_42590,null,scanner.getLineNumber());

  }

  String tokenS;

  if (token.charsetSchema != null) {

    tokenS=token.charsetSchema;

  }

 else   if (token.charsetName != null) {

    tokenS=token.charsetName;

  }

 else   if (token.namePrePrefix != null) {

    tokenS=token.namePrePrefix;

  }

 else   if (token.namePrefix != null) {

    tokenS=token.namePrefix;

  }

 else {

    tokenS=token.tokenString;

  }

  return Error.parseError(ErrorCode.X_42581,tokenS,scanner.getLineNumber());

}

Location: ParserBase.java

Content: 

HsqlException unexpectedTokenRequire(String required){

  if (token.tokenType == Tokens.X_ENDPARSE) {

    return Error.parseError(ErrorCode.X_42590,ErrorCode.TOKEN_REQUIRED,scanner.getLineNumber(),new Object[]{"",required});

  }

  String tokenS;

  if (token.charsetSchema != null) {

    tokenS=token.charsetSchema;

  }

 else   if (token.charsetName != null) {

    tokenS=token.charsetName;

  }

 else   if (token.namePrePrefix != null) {

    tokenS=token.namePrePrefix;

  }

 else   if (token.namePrefix != null) {

    tokenS=token.namePrefix;

  }

 else {

    tokenS=token.tokenString;

  }

  return Error.parseError(ErrorCode.X_42581,ErrorCode.TOKEN_REQUIRED,scanner.getLineNumber(),new Object[]{tokenS,required});

}

Location: ParserBase.java

Content: 

HsqlException unexpectedToken(int token){

  String tokenS=Tokens.getKeyword(token);

  return Error.parseError(ErrorCode.X_42581,tokenS,scanner.getLineNumber());

}

Location: ParserBase.java

Content: 

HsqlException unexpectedToken(String tokenS){

  return Error.parseError(ErrorCode.X_42581,tokenS,scanner.getLineNumber());

}

Location: ParserBase.java

Content: 

HsqlException unsupportedFeature(){

  return Error.error(ErrorCode.X_0A501,token.tokenString);

}

Location: ParserBase.java

Content: 

HsqlException unsupportedFeature(String string){

  return Error.error(ErrorCode.X_0A501,string);

}

