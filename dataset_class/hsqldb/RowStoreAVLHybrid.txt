Location: RowStoreAVLHybrid.java

Content: 

public final void changeToDiskTable(Session session){

  cache=session.sessionData.persistentStoreCollection.getSessionDataCache();

  maxMemoryRowCount=Integer.MAX_VALUE;

  if (cache == null) {

    return;

  }

  tableSpace=cache.spaceManager.getTableSpace(DataSpaceManager.tableIdDefault);

  isCached=true;

  cache.adjustStoreCount(1);

  if (elementCount.get() == 0) {

    return;

  }

  IndexAVL idx=(IndexAVL)indexList[0];

  NodeAVL root=(NodeAVL)accessorList[0];

  RowIterator iterator=table.rowIterator(this);

  ArrayUtil.fillArray(accessorList,null);

  ArrayUtil.fillArray(nullsList,false);

  elementCount.set(0);

  while (iterator.next()) {

    Row row=iterator.getCurrentRow();

    Row newRow=(Row)getNewCachedObject(session,row.getData(),false);

    indexRow(session,newRow);

  }

  idx.unlinkNodes(this,root);

}

Location: RowStoreAVLHybrid.java

Content: 

public void commitPersistence(CachedObject row){

}

Location: RowStoreAVLHybrid.java

Content: 

public void commitRow(Session session,Row row,int changeAction,int txModel){

switch (changeAction) {

case RowAction.ACTION_DELETE:

    remove(row);

  break;

case RowAction.ACTION_INSERT:

break;

case RowAction.ACTION_INSERT_DELETE:

remove(row);

break;

case RowAction.ACTION_DELETE_FINAL:

throw Error.runtimeError(ErrorCode.U_S0500,"RowStore");

}

}

Location: RowStoreAVLHybrid.java

Content: 

public CachedObject getAccessor(Index key){

  int position=key.getPosition();

  NodeAVL node=(NodeAVL)accessorList[position];

  if (node == null) {

    return null;

  }

  RowAVL oldRow=(RowAVL)node.getRow(this);

  RowAVL row=(RowAVL)get(oldRow,false);

  node=row.getNode(key.getPosition());

  accessorList[key.getPosition()]=node;

  return node;

}

Location: RowStoreAVLHybrid.java

Content: 

public DataFileCache getCache(){

  return cache;

}

Location: RowStoreAVLHybrid.java

Content: 

public CachedObject getNewCachedObject(Session session,Object object,boolean tx){

  if (!isCached) {

    if (useDisk && elementCount.get() >= maxMemoryRowCount) {

      changeToDiskTable(session);

    }

  }

  Row row;

  if (isCached) {

    row=new RowAVLDisk(table,(Object[])object,this);

  }

 else {

    int id=rowIdSequence++;

    row=new RowAVL(table,(Object[])object,id,this);

  }

  add(session,row,tx);

  return row;

}

Location: RowStoreAVLHybrid.java

Content: 

public boolean hasNull(int pos){

  return nullsList[pos];

}

Location: RowStoreAVLHybrid.java

Content: 

public void indexRow(Session session,Row row){

  try {

    row=(Row)get(row,true);

    super.indexRow(session,row);

  }

 catch (  HsqlException e) {

    throw e;

  }

 finally {

    row.keepInMemory(false);

  }

}

Location: RowStoreAVLHybrid.java

Content: 

public boolean isMemory(){

  return !isCached;

}

Location: RowStoreAVLHybrid.java

Content: 

public void postCommitAction(Session session,RowAction action){

}

Location: RowStoreAVLHybrid.java

Content: 

public void release(){

  if (!isCached) {

    destroy();

  }

  if (isCached) {

    cache.adjustStoreCount(-1);

    cache=null;

    isCached=false;

  }

  elementCount.set(0);

  ArrayUtil.fillArray(accessorList,null);

}

Location: RowStoreAVLHybrid.java

Content: 

public void remove(CachedObject object){

  if (object.isMemory()) {

    return;

  }

  if (isCached) {

    cache.remove(object);

  }

}

Location: RowStoreAVLHybrid.java

Content: 

public synchronized void resetAccessorKeys(Session session,Index[] keys){

  if (indexList.length == 0 || accessorList[0] == null) {

    indexList=keys;

    accessorList=new CachedObject[indexList.length];

    return;

  }

  if (isCached) {

    throw Error.runtimeError(ErrorCode.U_S0500,"RowStoreAVLHybrid");

  }

  super.resetAccessorKeys(session,keys);

}

Location: RowStoreAVLHybrid.java

Content: 

public void rollbackRow(Session session,Row row,int changeAction,int txModel){

switch (changeAction) {

case RowAction.ACTION_DELETE:

    row=(Row)get(row,true);

  ((RowAVL)row).setNewNodes(this);

row.keepInMemory(false);

indexRow(session,row);

break;

case RowAction.ACTION_INSERT:

delete(session,row);

remove(row);

break;

case RowAction.ACTION_INSERT_DELETE:

remove(row);

break;

}

}

Location: RowStoreAVLHybrid.java

Content: 

public RowStoreAVLHybrid(Session session,TableBase table,boolean diskBased){

  this.table=table;

  this.maxMemoryRowCount=session.getResultMemoryRowCount();

  this.useDisk=diskBased;

  if (maxMemoryRowCount == 0) {

    this.useDisk=false;

  }

  if (table.getTableType() == TableBase.RESULT_TABLE) {

    setTimestamp(session.getActionTimestamp());

  }

  resetAccessorKeys(session,table.getIndexList());

  nullsList=new boolean[table.getColumnCount()];

}

Location: RowStoreAVLHybrid.java

Content: 

public void setCache(DataFileCache cache){

  throw Error.runtimeError(ErrorCode.U_S0500,"RowStoreAVLHybrid");

}

Location: RowStoreAVLHybrid.java

Content: 

public void setMemory(boolean mode){

  useDisk=!mode;

}

Location: RowStoreAVLHybrid.java

Content: 

public void set(CachedObject object){

}

