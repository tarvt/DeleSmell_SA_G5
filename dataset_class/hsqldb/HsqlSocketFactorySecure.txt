Location: HsqlSocketFactorySecure.java

Content: 

private static void dump(String title,String[] as){

  Error.printSystemOut(title);

  Error.printSystemOut("----------------------------");

  for (int i=0; i < as.length; i++) {

    Error.printSystemOut(String.valueOf(as[i]));

  }

  Error.printSystemOut("----------------------------");

}

Location: HsqlSocketFactorySecure.java

Content: 

/** 

 * Retrieves the underlying javax.net.ssl.SSLServerSocketFactory.

 * @throws Exception if there is a problem retrieving theunderlying factory

 * @return the underlying javax.net.ssl.SSLServerSocketFactory

 */

protected SSLServerSocketFactory getServerSocketFactoryImpl() throws Exception {

  Object factory;

synchronized (server_socket_factory_mutex) {

    factory=serverSocketFactory;

    if (factory == null) {

      factory=SSLServerSocketFactory.getDefault();

      serverSocketFactory=factory;

    }

  }

  return (SSLServerSocketFactory)factory;

}

Location: HsqlSocketFactorySecure.java

Content: 

/** 

 * Retrieves the underlying javax.net.ssl.SSLSocketFactory.

 * @throws Exception if there is a problem retrieving theunderlying factory

 * @return the underlying javax.net.ssl.SSLSocketFactory

 */

protected SSLSocketFactory getSocketFactoryImpl() throws Exception {

  Object factory;

synchronized (socket_factory_mutex) {

    factory=socketFactory;

    if (factory == null) {

      factory=SSLSocketFactory.getDefault();

      socketFactory=factory;

    }

  }

  return (SSLSocketFactory)factory;

}

Location: HsqlSocketFactorySecure.java

Content: 

public void handshakeCompleted(HandshakeCompletedEvent evt){

  SSLSession session;

  String sessionId;

  SSLSocket socket;

  if (Error.TRACESYSTEMOUT) {

    socket=evt.getSocket();

    session=evt.getSession();

    Error.printSystemOut("SSL handshake completed:");

    Error.printSystemOut("------------------------------------------------");

    Error.printSystemOut("socket:      : " + socket);

    Error.printSystemOut("cipher suite : " + session.getCipherSuite());

    sessionId=StringConverter.byteArrayToHexString(session.getId());

    Error.printSystemOut("session id   : " + sessionId);

    Error.printSystemOut("------------------------------------------------");

  }

}

Location: HsqlSocketFactorySecure.java

Content: 

/** 

 * External construction disabled.  New factory instances are retrieved through the newHsqlSocketFactory method instead.

 */

protected HsqlSocketFactorySecure() throws Exception {

  super();

}

Location: HsqlSocketFactorySecure.java

Content: 

/** 

 * Verifies the certificate chain presented by the server to which a secure Socket has just connected.  Specifically, the provided host name is checked against the Common Name of the server certificate; additional checks may or may not be performed.

 * @param host the requested host name

 * @param session SSLSession used on the connection to host

 * @throws Exception if the certificate chain cannot be verified

 */

protected void verify(String host,SSLSession session) throws Exception {

  X509Certificate[] chain;

  X509Certificate certificate;

  Principal principal;

  PublicKey publicKey;

  String DN;

  String CN;

  int start;

  int end;

  String emsg;

  chain=session.getPeerCertificateChain();

  certificate=chain[0];

  principal=certificate.getSubjectDN();

  DN=String.valueOf(principal);

  start=DN.indexOf("CN=");

  if (start < 0) {

    throw new UnknownHostException(Error.getMessage(ErrorCode.M_SERVER_SECURE_VERIFY_1));

  }

  start+=3;

  end=DN.indexOf(',',start);

  CN=DN.substring(start,(end > -1) ? end : DN.length());

  if (CN.length() < 1) {

    throw new UnknownHostException(Error.getMessage(ErrorCode.M_SERVER_SECURE_VERIFY_2));

  }

  if (!CN.equalsIgnoreCase(host)) {

    throw new UnknownHostException(Error.getMessage(ErrorCode.M_SERVER_SECURE_VERIFY_3,0,new Object[]{CN,host}));

  }

}

