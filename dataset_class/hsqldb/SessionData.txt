Location: SessionData.java

Content: 

public void adjustLobUsageCount(LobData value,int adjust){

  if (session.isProcessingLog() || session.isProcessingScript()) {

    return;

  }

  if (value == null) {

    return;

  }

  database.lobManager.adjustUsageCount(session,value.getId(),adjust);

  hasLobOps=true;

}

Location: SessionData.java

Content: 

public void adjustLobUsageCount(TableBase table,Object[] data,int adjust){

  if (!table.hasLobColumn) {

    return;

  }

  if (table.isTemp) {

    return;

  }

  if (session.isProcessingLog() || session.isProcessingScript()) {

    return;

  }

  for (int j=0; j < table.columnCount; j++) {

    if (table.colTypes[j].isLobType()) {

      Object value=data[j];

      if (value == null) {

        continue;

      }

      database.lobManager.adjustUsageCount(session,((LobData)value).getId(),adjust);

      hasLobOps=true;

    }

  }

}

Location: SessionData.java

Content: 

private void allocateBlobSegments(ResultLob result,InputStream stream) throws IOException {

  long currentOffset=result.getOffset();

  int bufferLength=session.getStreamBlockSize();

  HsqlByteArrayOutputStream byteArrayOS=new HsqlByteArrayOutputStream(bufferLength);

  while (true) {

    byteArrayOS.reset();

    byteArrayOS.write(stream,bufferLength);

    if (byteArrayOS.size() == 0) {

      return;

    }

    byte[] byteArray=byteArrayOS.getBuffer();

    Result actionResult=database.lobManager.setBytes(result.getLobID(),currentOffset,byteArray,byteArrayOS.size());

    currentOffset+=byteArrayOS.size();

    if (byteArrayOS.size() < bufferLength) {

      return;

    }

  }

}

Location: SessionData.java

Content: 

private void allocateClobSegments(long lobID,long offset,Reader reader) throws IOException {

  int bufferLength=session.getStreamBlockSize();

  CharArrayWriter charWriter=new CharArrayWriter(bufferLength);

  long currentOffset=offset;

  while (true) {

    charWriter.reset();

    charWriter.write(reader,bufferLength);

    char[] charArray=charWriter.getBuffer();

    if (charWriter.size() == 0) {

      return;

    }

    Result actionResult=database.lobManager.setChars(lobID,currentOffset,charArray,charWriter.size());

    currentOffset+=charWriter.size();

    if (charWriter.size() < bufferLength) {

      return;

    }

  }

}

Location: SessionData.java

Content: 

private void allocateClobSegments(ResultLob result,Reader reader) throws IOException {

  allocateClobSegments(result.getLobID(),result.getOffset(),reader);

}

Location: SessionData.java

Content: 

/** 

 * allocate storage for a new LOB

 */

public void allocateLobForResult(ResultLob result,InputStream inputStream){

  try {

    CountdownInputStream countStream;

switch (result.getSubType()) {

case ResultLob.LobResultTypes.REQUEST_CREATE_BYTES:

{

        long blobId;

        long blobLength=result.getBlockLength();

        if (blobLength < 0) {

          allocateBlobSegments(result,result.getInputStream());

          break;

        }

        if (inputStream == null) {

          blobId=result.getLobID();

          inputStream=result.getInputStream();

        }

 else {

          BlobData blob=session.createBlob(blobLength);

          blobId=blob.getId();

          resultLobs.put(result.getLobID(),blobId);

        }

        countStream=new CountdownInputStream(inputStream);

        countStream.setCount(blobLength);

        database.lobManager.setBytesForNewBlob(blobId,countStream,result.getBlockLength());

        break;

      }

case ResultLob.LobResultTypes.REQUEST_CREATE_CHARS:

{

      long clobId;

      long clobLength=result.getBlockLength();

      if (clobLength < 0) {

        allocateClobSegments(result,result.getReader());

        break;

      }

      if (inputStream == null) {

        clobId=result.getLobID();

        if (result.getReader() != null) {

          inputStream=new ReaderInputStream(result.getReader());

        }

 else {

          inputStream=result.getInputStream();

        }

      }

 else {

        ClobData clob=session.createClob(clobLength);

        clobId=clob.getId();

        resultLobs.put(result.getLobID(),clobId);

      }

      countStream=new CountdownInputStream(inputStream);

      countStream.setCount(clobLength * 2);

      database.lobManager.setCharsForNewClob(clobId,countStream,result.getBlockLength());

      break;

    }

case ResultLob.LobResultTypes.REQUEST_SET_BYTES:

{

    long blobId=resultLobs.get(result.getLobID());

    long dataLength=result.getBlockLength();

    byte[] byteArray=result.getByteArray();

    Result actionResult=database.lobManager.setBytes(blobId,result.getOffset(),byteArray,(int)dataLength);

    break;

  }

case ResultLob.LobResultTypes.REQUEST_SET_CHARS:

{

  long clobId=resultLobs.get(result.getLobID());

  long dataLength=result.getBlockLength();

  char[] charArray=result.getCharArray();

  Result actionResult=database.lobManager.setChars(clobId,result.getOffset(),charArray,(int)dataLength);

  break;

}

}

}

 catch (Throwable e) {

resultLobs.clear();

throw Error.error(ErrorCode.GENERAL_ERROR,e);

}

}

Location: SessionData.java

Content: 

public void clearLobOps(){

  firstNewLobID=0;

  hasLobOps=false;

}

Location: SessionData.java

Content: 

public void closeAllNavigators(){

  if (resultMap == null) {

    return;

  }

  Iterator it=resultMap.values().iterator();

  while (it.hasNext()) {

    Result result=(Result)it.next();

    result.getNavigator().release();

  }

  resultMap.clear();

}

Location: SessionData.java

Content: 

public void closeAllTransactionNavigators(){

  if (resultMap == null) {

    return;

  }

  Iterator it=resultMap.values().iterator();

  while (it.hasNext()) {

    Result result=(Result)it.next();

    if (!ResultProperties.isHoldable(result.rsProperties)) {

      result.getNavigator().release();

      it.remove();

    }

  }

}

Location: SessionData.java

Content: 

BlobData createBlobFromFile(String filename){

  File file=getFile(filename);

  long fileLength=file.length();

  InputStream is=null;

  try {

    BlobData blob=session.createBlob(fileLength);

    is=new FileInputStream(file);

    database.lobManager.setBytesForNewBlob(blob.getId(),is,fileLength);

    return blob;

  }

 catch (  IOException e) {

    throw Error.error(ErrorCode.FILE_IO_ERROR);

  }

 finally {

    try {

      if (is != null) {

        is.close();

      }

    }

 catch (    Exception e) {

    }

  }

}

Location: SessionData.java

Content: 

ClobData createClobFromFile(String filename,String encoding){

  File file=getFile(filename);

  long fileLength=file.length();

  InputStream is=null;

  try {

    ClobData clob=session.createClob(fileLength);

    is=new FileInputStream(file);

    Reader reader=new InputStreamReader(is,encoding);

    allocateClobSegments(clob.getId(),0,reader);

    return clob;

  }

 catch (  IOException e) {

    throw Error.error(ErrorCode.FILE_IO_ERROR,e.toString());

  }

 finally {

    try {

      if (is != null) {

        is.close();

      }

    }

 catch (    Exception e) {

    }

  }

}

Location: SessionData.java

Content: 

Result getDataResultHead(Result command,Result result,boolean isNetwork){

  int fetchSize=command.getFetchSize();

  result.setResultId(session.actionTimestamp);

  int required=command.rsProperties;

  int returned=result.rsProperties;

  if (required != returned) {

    if (ResultProperties.isReadOnly(required)) {

      returned=ResultProperties.addHoldable(returned,ResultProperties.isHoldable(required));

    }

 else {

      if (ResultProperties.isReadOnly(returned)) {

        returned=ResultProperties.addHoldable(returned,ResultProperties.isHoldable(required));

      }

 else {

        if (session.isAutoCommit()) {

          returned=ResultProperties.addHoldable(returned,ResultProperties.isHoldable(required));

        }

 else {

          returned=ResultProperties.addHoldable(returned,false);

        }

      }

    }

    returned=ResultProperties.addScrollable(returned,ResultProperties.isScrollable(required));

    result.rsProperties=returned;

  }

  boolean hold=false;

  boolean copy=false;

  if (ResultProperties.isUpdatable(result.rsProperties)) {

    hold=true;

  }

  if (isNetwork) {

    if (fetchSize != 0 && result.getNavigator().getSize() > fetchSize) {

      copy=true;

      hold=true;

    }

  }

 else {

    if (!result.getNavigator().isMemory()) {

      hold=true;

    }

  }

  if (hold) {

    if (resultMap == null) {

      resultMap=new LongKeyHashMap();

    }

    resultMap.put(result.getResultId(),result);

    result.rsProperties=ResultProperties.addIsHeld(result.rsProperties,true);

  }

  if (copy) {

    result=Result.newDataHeadResult(session,result,0,fetchSize);

  }

  return result;

}

Location: SessionData.java

Content: 

Result getDataResultSlice(long id,int offset,int count){

  Result result=(Result)resultMap.get(id);

  RowSetNavigator source=result.getNavigator();

  if (offset + count > source.getSize()) {

    count=source.getSize() - offset;

  }

  return Result.newDataRowsResult(result,offset,count);

}

Location: SessionData.java

Content: 

Result getDataResult(long id){

  Result result=(Result)resultMap.get(id);

  return result;

}

Location: SessionData.java

Content: 

private File getFile(String name){

  session.checkAdmin();

  String fileName=database.logger.getSecurePath(name,false,false);

  if (fileName == null) {

    throw Error.error(ErrorCode.ACCESS_IS_DENIED,name);

  }

  File file=new File(fileName);

  boolean exists=file.exists();

  if (!exists) {

    throw Error.error(ErrorCode.FILE_IO_ERROR);

  }

  return file;

}

Location: SessionData.java

Content: 

public long getFirstLobID(){

  return firstNewLobID;

}

Location: SessionData.java

Content: 

public PersistentStore getNewResultRowStore(TableBase table,boolean isCached){

  try {

    PersistentStore store=persistentStoreCollection.getStore(table);

    if (!isCached) {

      store.setMemory(true);

    }

    return store;

  }

 catch (  HsqlException e) {

  }

  throw Error.runtimeError(ErrorCode.U_S0500,"SessionData");

}

Location: SessionData.java

Content: 

RowSetNavigatorClient getRowSetSlice(long id,int offset,int count){

  Result result=(Result)resultMap.get(id);

  RowSetNavigator source=result.getNavigator();

  if (offset + count > source.getSize()) {

    count=source.getSize() - offset;

  }

  return new RowSetNavigatorClient(source,offset,count);

}

Location: SessionData.java

Content: 

public Object getSequenceCurrent(NumberSequence sequence){

  return sequenceUpdateMap == null ? null : sequenceUpdateMap.get(sequence);

}

Location: SessionData.java

Content: 

public Object getSequenceValue(NumberSequence sequence){

  if (sequenceMap == null) {

    sequenceMap=new HashMap();

    sequenceUpdateMap=new HashMap();

  }

  HsqlName key=sequence.getName();

  Object value=sequenceMap.get(key);

  if (value == null) {

    value=sequence.getValueObject();

    sequenceMap.put(key,value);

    sequenceUpdateMap.put(sequence,value);

  }

  return value;

}

Location: SessionData.java

Content: 

public PersistentStore getSubqueryRowStore(TableBase table){

  PersistentStore store=persistentStoreCollection.getStore(table);

  store.removeAll();

  return store;

}

Location: SessionData.java

Content: 

public void registerLobForResult(Result result){

  RowSetNavigator navigator=result.getNavigator();

  if (navigator == null) {

    registerLobsForRow((Object[])result.valueData);

  }

 else {

    while (navigator.next()) {

      Object[] data=navigator.getCurrent();

      registerLobsForRow(data);

    }

    navigator.reset();

  }

  resultLobs.clear();

}

Location: SessionData.java

Content: 

private void registerLobsForRow(Object[] data){

  for (int i=0; i < data.length; i++) {

    if (data[i] instanceof BlobDataID) {

      BlobData blob=(BlobDataID)data[i];

      long id=blob.getId();

      if (id < 0) {

        id=resultLobs.get(id);

      }

      data[i]=database.lobManager.getBlob(id);

    }

 else     if (data[i] instanceof ClobDataID) {

      ClobData clob=(ClobDataID)data[i];

      long id=clob.getId();

      if (id < 0) {

        id=resultLobs.get(id);

      }

      data[i]=database.lobManager.getClob(id);

    }

  }

}

Location: SessionData.java

Content: 

public void registerNewLob(long lobID){

  if (firstNewLobID == 0) {

    firstNewLobID=lobID;

  }

  hasLobOps=true;

}

Location: SessionData.java

Content: 

public SessionData(Database database,Session session){

  this.database=database;

  this.session=session;

  persistentStoreCollection=new PersistentStoreCollectionSession(session);

}

Location: SessionData.java

Content: 

void setResultSetProperties(Result command,Result result){

  int required=command.rsProperties;

  int returned=result.getStatement().getResultProperties();

  if (required != returned) {

    if (ResultProperties.isUpdatable(required)) {

      if (ResultProperties.isReadOnly(returned)) {

        session.addWarning(Error.error(ErrorCode.W_36502));

      }

    }

    if (ResultProperties.isSensitive(required)) {

      session.addWarning(Error.error(ErrorCode.W_36501));

    }

    returned=ResultProperties.addScrollable(returned,ResultProperties.isScrollable(required));

    returned=ResultProperties.addHoldable(returned,ResultProperties.isHoldable(required));

    result.rsProperties=returned;

  }

}

Location: SessionData.java

Content: 

public void startRowProcessing(){

  if (sequenceMap != null) {

    sequenceMap.clear();

  }

}

