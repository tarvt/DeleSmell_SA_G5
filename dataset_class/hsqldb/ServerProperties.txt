Location: ServerProperties.java

Content: 

Object[] getPrefixedMetadata(String key){

  for (int i=0; i < prefixes.size(); i++) {

    String prefix=(String)prefixes.get(i);

    if (key.startsWith(prefix)) {

      return (Object[])meta.get(prefix);

    }

  }

  return null;

}

Location: ServerProperties.java

Content: 

ServerProperties(int protocol){

  this.protocol=protocol;

}

Location: ServerProperties.java

Content: 

public ServerProperties(int protocol,File file) throws IOException {

  FileInputStream fis=null;

  try {

    fis=new FileInputStream(file);

    stringProps.load(fis);

  }

  finally {

    if (fis != null) {

      fis.close();

    }

  }

  this.protocol=protocol;

}

Location: ServerProperties.java

Content: 

ServerProperties(int protocol,String path,String extension){

  super(path,extension);

  this.protocol=protocol;

}

Location: ServerProperties.java

Content: 

/** 

 * Validates according to Meta map, and sets System Properties for those properties with names matching the requisite pattern.

 */

public void validate(){

  Enumeration en=stringProps.propertyNames();

  while (en.hasMoreElements()) {

    String key=(String)en.nextElement();

    Object[] metadata=(Object[])meta.get(key);

    if (metadata == null) {

      metadata=getPrefixedMetadata(key);

    }

    if (metadata == null) {

      String error="unsupported property: " + key;

      super.addError(ANY_ERROR,error);

      continue;

    }

    String error=null;

    if (((Integer)metadata[indexType]).intValue() == SYSTEM_PROPERTY) {

      error=validateSystemProperty(key,metadata);

    }

 else     if (((Integer)metadata[indexType]).intValue() == SERVER_MULTI_PROPERTY) {

      error=validateMultiProperty(key,metadata);

    }

 else {

      String value=getProperty(key);

      if (value == null) {

        if (metadata[indexDefaultValue] == null) {

          error="missing value for property: " + key;

        }

 else {

          setProperty(key,metadata[indexDefaultValue].toString());

        }

      }

 else {

        error=HsqlProperties.validateProperty(key,value,metadata);

      }

    }

    if (error != null) {

      super.addError(ANY_ERROR,error);

    }

  }

  Iterator it=idToAliasMap.keySet().iterator();

  while (it.hasNext()) {

    int number=it.nextInt();

    if (!idToPathMap.containsKey(number)) {

      addError(ANY_ERROR,"no path for database id: " + number);

    }

  }

  it=idToPathMap.keySet().iterator();

  while (it.hasNext()) {

    int number=it.nextInt();

    if (!idToAliasMap.containsKey(number)) {

      addError(ANY_ERROR,"no alias for database id: " + number);

    }

  }

  initialised=true;

}

Location: ServerProperties.java

Content: 

/** 

 * Checks an alias or database path. Duplicates are checked as duplicate numbering may result from different strings (e.g. 02 and 2).

 */

String validateMultiProperty(String key,Object[] meta){

  int dbNumber;

  String prefix=(String)meta[indexName];

  if (meta[indexName].equals(sc_key_database)) {

    if (sc_key_database.equals(key)) {

      key=key + ".0";

    }

  }

  try {

    dbNumber=Integer.parseInt(key.substring(prefix.length() + 1));

  }

 catch (  NumberFormatException e1) {

    return ("malformed database enumerator: " + key);

  }

  if (meta[indexName].equals(sc_key_dbname)) {

    String alias=stringProps.getProperty(key).toLowerCase();

    Object existing=idToAliasMap.put(dbNumber,alias);

    if (existing != null) {

      return "duplicate database enumerator: " + key;

    }

  }

 else   if (meta[indexName].equals(sc_key_database)) {

    String path=stringProps.getProperty(key);

    Object existing=idToPathMap.put(dbNumber,path);

    if (existing != null) {

      return "duplicate database enumerator: " + key;

    }

  }

  return null;

}

Location: ServerProperties.java

Content: 

/** 

 * System properties are currently not checked, as different libraries in the environment may need different names?

 */

String validateSystemProperty(String key,Object[] meta){

  String prefix=(String)meta[indexName];

  String specificKey=key.substring(prefix.length() + 1);

  String value=stringProps.getProperty(key);

  if (value == null) {

    return "value required for property: " + key;

  }

  System.setProperty(specificKey,value);

  return null;

}

