Location: SetFunctionValueAggregate.java

Content: 

private void addDataPoint(Number x){

  double xi;

  double xsi;

  long nm1;

  if (x == null) {

    return;

  }

  xi=x.doubleValue();

  if (!initialized) {

    n=1;

    sk=xi;

    vk=0.0;

    initialized=true;

    return;

  }

  n++;

  nm1=(n - 1);

  xsi=(sk - (xi * nm1));

  vk+=((xsi * xsi) / n) / nm1;

  sk+=xi;

}

Location: SetFunctionValueAggregate.java

Content: 

void addLong(long value){

  if (value == 0) {

  }

 else   if (value > 0) {

    hi+=value >> 32;

    lo+=value & 0x00000000ffffffffL;

  }

 else {

    if (value == Long.MIN_VALUE) {

      hi-=0x000000080000000L;

    }

 else {

      long temp=~value + 1;

      hi-=temp >> 32;

      lo-=temp & 0x00000000ffffffffL;

    }

  }

}

Location: SetFunctionValueAggregate.java

Content: 

private BigInteger getLongSum(){

  BigInteger biglo=BigInteger.valueOf(lo);

  BigInteger bighi=BigInteger.valueOf(hi);

  BigInteger result=(bighi.multiply(multiplier)).add(biglo);

  return result;

}

Location: SetFunctionValueAggregate.java

Content: 

private Double getStdDev(){

  if (!initialized) {

    return null;

  }

  return sample ? (n == 1) ? null : new Double(Math.sqrt(vk / (double)(n - 1))) : new Double(Math.sqrt(vk / (double)(n)));

}

Location: SetFunctionValueAggregate.java

Content: 

/** 

 * During parsing and before an instance of SetFunction is created, getType is called with type parameter set to correct type when main SELECT statements contain aggregates.

 */

static Type getType(Session session,int setType,Type type){

  if (setType == OpTypes.COUNT) {

    return Type.SQL_BIGINT;

  }

  int typeCode=type.typeCode;

  if (type.isIntervalYearMonthType()) {

    typeCode=Types.SQL_INTERVAL_MONTH;

  }

 else   if (type.isIntervalDaySecondType()) {

    typeCode=Types.SQL_INTERVAL_SECOND;

  }

switch (setType) {

case OpTypes.AVG:

case OpTypes.MEDIAN:

{

switch (typeCode) {

case Types.TINYINT:

case Types.SQL_SMALLINT:

case Types.SQL_INTEGER:

case Types.SQL_BIGINT:

case Types.SQL_NUMERIC:

case Types.SQL_DECIMAL:

        int scale=session.database.sqlAvgScale;

      if (scale <= type.scale) {

        return type;

      }

    int digits=((NumberType)type).getDecimalPrecision();

  return NumberType.getNumberType(Types.SQL_DECIMAL,digits + scale,scale);

case Types.SQL_REAL:

case Types.SQL_FLOAT:

case Types.SQL_DOUBLE:

case Types.SQL_INTERVAL_MONTH:

case Types.SQL_INTERVAL_SECOND:

case Types.SQL_DATE:

case Types.SQL_TIMESTAMP:

case Types.SQL_TIMESTAMP_WITH_TIME_ZONE:

return type;

default :

throw Error.error(ErrorCode.X_42563);

}

}

case OpTypes.SUM:

{

switch (typeCode) {

case Types.TINYINT:

case Types.SQL_SMALLINT:

case Types.SQL_INTEGER:

return Type.SQL_BIGINT;

case Types.SQL_BIGINT:

return Type.SQL_DECIMAL_BIGINT_SQR;

case Types.SQL_REAL:

case Types.SQL_FLOAT:

case Types.SQL_DOUBLE:

return Type.SQL_DOUBLE;

case Types.SQL_NUMERIC:

case Types.SQL_DECIMAL:

return Type.getType(type.typeCode,null,null,type.precision * 2,type.scale);

case Types.SQL_INTERVAL_MONTH:

case Types.SQL_INTERVAL_SECOND:

return IntervalType.newIntervalType(type.typeCode,DTIType.maxIntervalPrecision,type.scale);

default :

throw Error.error(ErrorCode.X_42563);

}

}

case OpTypes.MIN:

case OpTypes.MAX:

if (type.isArrayType() || type.isLobType()) {

throw Error.error(ErrorCode.X_42563);

}

return type;

case OpTypes.EVERY:

case OpTypes.SOME:

if (type.isBooleanType()) {

return Type.SQL_BOOLEAN;

}

break;

case OpTypes.STDDEV_POP:

case OpTypes.STDDEV_SAMP:

case OpTypes.VAR_POP:

case OpTypes.VAR_SAMP:

if (type.isNumberType()) {

return Type.SQL_DOUBLE;

}

break;

case OpTypes.USER_AGGREGATE:

return type;

default :

throw Error.runtimeError(ErrorCode.U_S0500,"SetFunction");

}

throw Error.error(ErrorCode.X_42563);

}

Location: SetFunctionValueAggregate.java

Content: 

private Double getVariance(){

  if (!initialized) {

    return null;

  }

  return sample ? (n == 1) ? null : new Double(vk / (double)(n - 1)) : new Double(vk / (double)(n));

}

Location: SetFunctionValueAggregate.java

Content: 

SetFunctionValueAggregate(Session session,int setType,Type type,Type returnType,boolean isDistinct,ArrayType arrayType){

  this.setType=setType;

  this.type=type;

  this.returnType=returnType;

  this.isDistinct=isDistinct;

  this.arrayType=arrayType;

  if (isDistinct) {

    distinctValues=new HashSet();

    if (type.isRowType() || type.isArrayType()) {

      TypedComparator comparator=Type.newComparator(session);

      SortAndSlice sort=new SortAndSlice();

      int length=type.isRowType() ? ((RowType)type).getTypesArray().length : 1;

      sort.prepareMultiColumn(length);

      comparator.setType(type,sort);

      distinctValues.setComparator(comparator);

    }

  }

switch (setType) {

case OpTypes.VAR_SAMP:

case OpTypes.STDDEV_SAMP:

    this.sample=true;

}

if (type == null) {

  typeCode=0;

}

 else {

  if (type.isIntervalYearMonthType()) {

    typeCode=Types.SQL_INTERVAL_MONTH;

  }

 else   if (type.isIntervalDaySecondType()) {

    typeCode=Types.SQL_INTERVAL_SECOND;

  }

 else {

    typeCode=type.typeCode;

  }

}

}

