Location: JDBCRowId.java

Content: 

/** 

 * Direct access to id bytes for subclassing.

 * @return direct reference to id bytes.

 */

Object id(){

  return id;

}

Location: JDBCRowId.java

Content: 

/** 

 * Constructs a new JDBCRowId instance wrapping the given octet sequence. <p> This constructor may be used internally to retrieve result set values as RowId objects, yet it also may need to be public to allow access from other packages. As such (in the interest of efficiency) this object maintains a reference to the given octet sequence rather than making a copy; special care should be taken by external clients never to use this constructor with a byte array object that may later be modified externally.

 * @param id the octet sequence representing the Rowid value

 * @throws SQLException if the argument is null

 */

public JDBCRowId(final byte[] id) throws SQLException {

  if (id == null) {

    throw JDBCUtil.nullArgument("id");

  }

  this.id=id;

}

Location: JDBCRowId.java

Content: 

/** 

 * Constructs a new JDBCRowId instance whose internal octet sequence is is a copy of the octet sequence of the given RowId object. <p>

 * @param id the octet sequence representing the Rowid value

 * @throws SQLException if the argument is null

 */

public JDBCRowId(RowId id) throws SQLException {

  this(id.getBytes());

}

Location: JDBCRowId.java

Content: 

/** 

 * Constructs a new JDBCRowId instance whose internal octet sequence is is that represented by the given hexadecimal character sequence. <p>

 * @param hex the hexadecimal character sequence from which to derivethe internal octet sequence

 * @throws java.sql.SQLException if the argument is null or is not a validhexadecimal character sequence

 */

public JDBCRowId(final String hex) throws SQLException {

  if (hex == null) {

    throw JDBCUtil.nullArgument("hex");

  }

  try {

    this.id=StringConverter.hexStringToByteArray(hex);

  }

 catch (  IOException e) {

    throw JDBCUtil.sqlException(ErrorCode.JDBC_INVALID_ARGUMENT,"hex: " + e);

  }

}

