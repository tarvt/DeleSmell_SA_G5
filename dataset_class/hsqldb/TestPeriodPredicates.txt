Location: TestPeriodPredicates.java

Content: 

/** 

 * (TIMESTAMP '1999-12-01 01:02:03', TIMESTAMP '1999-12-02 01:02:03') CONTAINS TIMESTAMP '1999-12-01 01:02:03' is false

 */

public void testFirstPeriodCannotContainsSecondPeriodIfTheyAreEquals(){

  Object[] a={scanner.newTimestamp("1999-12-01 01:02:01"),scanner.newTimestamp("1999-12-01 01:02:03")};

  Object[] b={scanner.newTimestamp("1999-12-01 01:02:03"),null};

  Type[] ta={new DateTimeType(Types.SQL_TIMESTAMP,Types.SQL_TIMESTAMP,0),new DateTimeType(Types.SQL_TIMESTAMP,Types.SQL_TIMESTAMP,0)};

  Type[] tb={new DateTimeType(Types.SQL_TIMESTAMP,Types.SQL_TIMESTAMP,0),new DateTimeType(Types.SQL_TIMESTAMP,Types.SQL_TIMESTAMP,0)};

  Assert.assertFalse(DateTimeType.contains(session,a,ta,b,tb,true));

}

Location: TestPeriodPredicates.java

Content: 

/** 

 * (TIMESTAMP '1999-12-01 01:02:03', TIMESTAMP '1999-12-31 01:02:03') CONTAINS (TIMESTAMP '2000-01-01 01:02:03', TIMESTAMP '2000-12-31 01:02:03') is false

 */

public void testFirstPeriodCannotContainsSecondPeriodWhenPrecedes(){

  Object[] a={scanner.newTimestamp("1999-12-01 01:02:03"),scanner.newTimestamp("1999-12-31 01:02:03")};

  Object[] b={scanner.newTimestamp("2000-01-01 01:02:03"),scanner.newTimestamp("2000-12-31 01:02:03")};

  Type[] ta={new DateTimeType(Types.SQL_TIMESTAMP,Types.SQL_TIMESTAMP,0),new DateTimeType(Types.SQL_TIMESTAMP,Types.SQL_TIMESTAMP,0)};

  Type[] tb={new DateTimeType(Types.SQL_TIMESTAMP,Types.SQL_TIMESTAMP,0),new DateTimeType(Types.SQL_TIMESTAMP,Types.SQL_TIMESTAMP,0)};

  Assert.assertFalse(DateTimeType.contains(session,a,ta,b,tb,false));

}

Location: TestPeriodPredicates.java

Content: 

/** 

 * (TIMESTAMP '1999-12-01 01:02:03', TIMESTAMP '1999-12-31 01:02:03') CONTAINS (TIMESTAMP '1999-12-31 01:02:02', TIMESTAMP '1999-12-31 01:02:03') is true

 */

public void testFirstPeriodContainsItselfMinus1Second(){

  Object[] a={scanner.newTimestamp("1999-12-01 01:02:03"),scanner.newTimestamp("1999-12-31 01:02:03")};

  Object[] b={scanner.newTimestamp("1999-12-31 01:02:02"),scanner.newTimestamp("1999-12-31 01:02:03")};

  Type[] ta={new DateTimeType(Types.SQL_TIMESTAMP,Types.SQL_TIMESTAMP,0),new DateTimeType(Types.SQL_TIMESTAMP,Types.SQL_TIMESTAMP,0)};

  Type[] tb={new DateTimeType(Types.SQL_TIMESTAMP,Types.SQL_TIMESTAMP,0),new DateTimeType(Types.SQL_TIMESTAMP,Types.SQL_TIMESTAMP,0)};

  Assert.assertTrue(DateTimeType.contains(session,a,ta,b,tb,false));

}

Location: TestPeriodPredicates.java

Content: 

/** 

 * (TIMESTAMP '1999-12-01 01:02:03', TIMESTAMP '1999-12-31 01:02:03') CONTAINS TIMESTAMP '1999-12-01 01:02:03' is true

 */

public void testFirstPeriodContainsItsStartDate(){

  Object[] a={scanner.newTimestamp("1999-12-01 01:02:03"),scanner.newTimestamp("1999-12-31 01:02:03")};

  Object[] b={scanner.newTimestamp("1999-12-01 01:02:03"),null};

  Type[] ta={new DateTimeType(Types.SQL_TIMESTAMP,Types.SQL_TIMESTAMP,0),new DateTimeType(Types.SQL_TIMESTAMP,Types.SQL_TIMESTAMP,0)};

  Type[] tb={new DateTimeType(Types.SQL_TIMESTAMP,Types.SQL_TIMESTAMP,0),new DateTimeType(Types.SQL_TIMESTAMP,Types.SQL_TIMESTAMP,0)};

  Assert.assertTrue(DateTimeType.contains(session,a,ta,b,tb,true));

}

Location: TestPeriodPredicates.java

Content: 

/** 

 * (TIMESTAMP '1999-12-01 01:02:03', TIMESTAMP '1999-12-31 01:02:03') CONTAINS (TIMESTAMP '1999-12-01 01:02:03', TIMESTAMP '1999-12-31 01:02:03') is true

 */

public void testFirstPeriodContainsSecondPeriodEvenIfEquals(){

  Object[] a={scanner.newTimestamp("1999-12-01 01:02:03"),scanner.newTimestamp("1999-12-31 01:02:03")};

  Object[] b={scanner.newTimestamp("1999-12-01 01:02:03"),scanner.newTimestamp("1999-12-31 01:02:03")};

  Type[] ta={new DateTimeType(Types.SQL_TIMESTAMP,Types.SQL_TIMESTAMP,0),new DateTimeType(Types.SQL_TIMESTAMP,Types.SQL_TIMESTAMP,0)};

  Type[] tb={new DateTimeType(Types.SQL_TIMESTAMP,Types.SQL_TIMESTAMP,0),new DateTimeType(Types.SQL_TIMESTAMP,Types.SQL_TIMESTAMP,0)};

  Assert.assertTrue(DateTimeType.contains(session,a,ta,b,tb,false));

}

Location: TestPeriodPredicates.java

Content: 

/** 

 * (TIMESTAMP '1999-12-01 01:02:03', TIMESTAMP '1999-12-31 01:02:03') CONTAINS TIMESTAMP '1999-12-31 01:02:03' is false

 */

public void testFirstPeriodDoesNotContainsItsEndDate(){

  Object[] a={scanner.newTimestamp("1999-12-01 01:02:03"),scanner.newTimestamp("1999-12-31 01:02:03")};

  Object[] b={scanner.newTimestamp("1999-12-31 01:02:03"),null};

  Type[] ta={new DateTimeType(Types.SQL_TIMESTAMP,Types.SQL_TIMESTAMP,0),new DateTimeType(Types.SQL_TIMESTAMP,Types.SQL_TIMESTAMP,0)};

  Type[] tb={new DateTimeType(Types.SQL_TIMESTAMP,Types.SQL_TIMESTAMP,0),new DateTimeType(Types.SQL_TIMESTAMP,Types.SQL_TIMESTAMP,0)};

  Assert.assertFalse(DateTimeType.contains(session,a,ta,b,tb,true));

}

Location: TestPeriodPredicates.java

Content: 

/** 

 * (TIMESTAMP '1999-12-01 01:02:03', TIMESTAMP '2000-01-01 01:02:02') PRECEDES (TIMESTAMP '2000-01-01 01:02:03', TIMESTAMP '2000-02-01 01:02:03') is true

 */

public void testFirstPeriodDoesNotImmediatelyPrecedesSecondPeriod(){

  Object[] a={scanner.newTimestamp("1999-12-01 01:02:03"),scanner.newTimestamp("2000-01-01 01:02:02")};

  Object[] b={scanner.newTimestamp("2000-01-01 01:02:03"),scanner.newTimestamp("2000-02-01 01:02:03")};

  Type[] ta={new DateTimeType(Types.SQL_TIMESTAMP,Types.SQL_TIMESTAMP,0),new DateTimeType(Types.SQL_TIMESTAMP,Types.SQL_TIMESTAMP,0)};

  Type[] tb={new DateTimeType(Types.SQL_TIMESTAMP,Types.SQL_TIMESTAMP,0),new DateTimeType(Types.SQL_TIMESTAMP,Types.SQL_TIMESTAMP,0)};

  Assert.assertFalse(DateTimeType.immediatelyPrecedes(session,a,ta,b,tb));

}

Location: TestPeriodPredicates.java

Content: 

/** 

 * (TIMESTAMP '2000-02-01 01:02:03', TIMESTAMP '2000-03-01 01:02:03') SUCCEEDS (TIMESTAMP '2000-01-01 01:02:04', TIMESTAMP '2000-02-01 01:02:03') is true

 */

public void testFirstPeriodDoesNotImmediatelySucceedsSecondPeriod(){

  Object[] a={scanner.newTimestamp("2000-02-01 01:02:03"),scanner.newTimestamp("2000-03-01 01:02:03")};

  Object[] b={scanner.newTimestamp("2000-01-01 01:02:04"),scanner.newTimestamp("2000-02-01 01:02:03")};

  Type[] ta={new DateTimeType(Types.SQL_TIMESTAMP,Types.SQL_TIMESTAMP,0),new DateTimeType(Types.SQL_TIMESTAMP,Types.SQL_TIMESTAMP,0)};

  Type[] tb={new DateTimeType(Types.SQL_TIMESTAMP,Types.SQL_TIMESTAMP,0),new DateTimeType(Types.SQL_TIMESTAMP,Types.SQL_TIMESTAMP,0)};

  Assert.assertTrue(DateTimeType.immediatelySucceeds(session,a,ta,b,tb));

}

Location: TestPeriodPredicates.java

Content: 

/** 

 * (TIMESTAMP '1999-12-01 01:02:03', TIMESTAMP '1999-12-31 01:02:03') OVERLAPS (TIMESTAMP '2000-01-01 01:02:03', TIMESTAMP '2000-02-01 01:02:03') is false

 */

public void testFirstPeriodDoesNotOverlapsSecondPeriod(){

  Object[] a={scanner.newTimestamp("1999-12-01 01:02:03"),scanner.newTimestamp("1999-12-31 01:02:03")};

  Object[] b={scanner.newTimestamp("2000-01-01 01:02:03"),scanner.newTimestamp("2000-02-01 01:02:03")};

  Type[] ta={new DateTimeType(Types.SQL_TIMESTAMP,Types.SQL_TIMESTAMP,0),new DateTimeType(Types.SQL_TIMESTAMP,Types.SQL_TIMESTAMP,0)};

  Type[] tb={new DateTimeType(Types.SQL_TIMESTAMP,Types.SQL_TIMESTAMP,0),new DateTimeType(Types.SQL_TIMESTAMP,Types.SQL_TIMESTAMP,0)};

  Assert.assertFalse(DateTimeType.overlaps(session,a,ta,b,tb));

  Assert.assertFalse(DateTimeType.overlaps(session,b,tb,a,ta));

}

Location: TestPeriodPredicates.java

Content: 

/** 

 * (TIMESTAMP '1999-12-01 01:02:03', TIMESTAMP '2000-01-01 01:02:03') OVERLAPS (TIMESTAMP '2000-01-01 01:02:03', TIMESTAMP '2000-02-01 01:02:03') is false

 */

public void testFirstPeriodDoesNotOverlapsSecondPeriod2(){

  Object[] a={scanner.newTimestamp("1999-12-01 01:02:03"),scanner.newTimestamp("2000-01-01 01:02:03")};

  Object[] b={scanner.newTimestamp("2000-01-01 01:02:03"),scanner.newTimestamp("2000-02-01 01:02:03")};

  Type[] ta={new DateTimeType(Types.SQL_TIMESTAMP,Types.SQL_TIMESTAMP,0),new DateTimeType(Types.SQL_TIMESTAMP,Types.SQL_TIMESTAMP,0)};

  Type[] tb={new DateTimeType(Types.SQL_TIMESTAMP,Types.SQL_TIMESTAMP,0),new DateTimeType(Types.SQL_TIMESTAMP,Types.SQL_TIMESTAMP,0)};

  Assert.assertFalse(DateTimeType.overlaps(session,a,ta,b,tb));

  Assert.assertFalse(DateTimeType.overlaps(session,b,tb,a,ta));

}

Location: TestPeriodPredicates.java

Content: 

/** 

 * (TIMESTAMP '1999-12-01 01:02:03', INTERVAL '31' DAY) OVERLAPS (TIMESTAMP '2000-01-01 01:02:03', TIMESTAMP '2000-02-01 01:02:03') is false

 */

public void testFirstPeriodDoesNotOverlapsSecondPeriodWithInterval(){

  Object[] a={scanner.newTimestamp("1999-12-01 01:02:03"),scanner.newInterval("31",IntervalType.newIntervalType(Types.SQL_INTERVAL_DAY,2,0))};

  Object[] b={scanner.newTimestamp("2000-01-01 01:02:03"),scanner.newTimestamp("2000-02-01 01:02:03")};

  Type[] ta={new DateTimeType(Types.SQL_TIMESTAMP,Types.SQL_TIMESTAMP,0),IntervalType.newIntervalType(Types.SQL_INTERVAL_DAY,2,0)};

  Type[] tb={new DateTimeType(Types.SQL_TIMESTAMP,Types.SQL_TIMESTAMP,0),new DateTimeType(Types.SQL_TIMESTAMP,Types.SQL_TIMESTAMP,0)};

  Assert.assertFalse(DateTimeType.overlaps(session,a,ta,b,tb));

}

Location: TestPeriodPredicates.java

Content: 

/** 

 * (TIMESTAMP '2000-01-01 01:02:03', TIMESTAMP '2000-02-01 01:02:03') PRECEDES (TIMESTAMP '1999-12-01 01:02:03', TIMESTAMP '2000-01-12 01:02:03') is false

 */

public void testFirstPeriodDoesNotPrecedesSecondPeriod(){

  Object[] a={scanner.newTimestamp("2000-01-01 01:02:03"),scanner.newTimestamp("2000-02-01 01:02:03")};

  Object[] b={scanner.newTimestamp("1999-12-01 01:02:03"),scanner.newTimestamp("2000-01-12 01:02:03")};

  Type[] ta={new DateTimeType(Types.SQL_TIMESTAMP,Types.SQL_TIMESTAMP,0),new DateTimeType(Types.SQL_TIMESTAMP,Types.SQL_TIMESTAMP,0)};

  Type[] tb={new DateTimeType(Types.SQL_TIMESTAMP,Types.SQL_TIMESTAMP,0),new DateTimeType(Types.SQL_TIMESTAMP,Types.SQL_TIMESTAMP,0)};

  Assert.assertFalse(DateTimeType.precedes(session,a,ta,b,tb));

}

Location: TestPeriodPredicates.java

Content: 

/** 

 * (TIMESTAMP '1999-12-01 01:02:03', TIMESTAMP '2000-01-01 01:02:04') PRECEDES (TIMESTAMP '2000-01-01 01:02:03', TIMESTAMP '2000-02-01 01:02:03') is false

 */

public void testFirstPeriodDoesNotPrecedesSecondPeriod2(){

  Object[] a={scanner.newTimestamp("1999-12-01 01:02:03"),scanner.newTimestamp("2000-01-01 01:02:04")};

  Object[] b={scanner.newTimestamp("2000-01-01 01:02:03"),scanner.newTimestamp("2000-02-01 01:02:03")};

  Type[] ta={new DateTimeType(Types.SQL_TIMESTAMP,Types.SQL_TIMESTAMP,0),new DateTimeType(Types.SQL_TIMESTAMP,Types.SQL_TIMESTAMP,0)};

  Type[] tb={new DateTimeType(Types.SQL_TIMESTAMP,Types.SQL_TIMESTAMP,0),new DateTimeType(Types.SQL_TIMESTAMP,Types.SQL_TIMESTAMP,0)};

  Assert.assertFalse(DateTimeType.precedes(session,a,ta,b,tb));

}

Location: TestPeriodPredicates.java

Content: 

/** 

 * (TIMESTAMP '2000-01-01 01:02:03', TIMESTAMP '2000-02-01 01:02:03') SUCCEEDS (TIMESTAMP '2000-02-01 01:02:03', TIMESTAMP '2000-03-01 01:02:03') is false

 */

public void testFirstPeriodDoesNotSucceedsSecondPeriod(){

  Object[] a={scanner.newTimestamp("2000-01-01 01:02:03"),scanner.newTimestamp("2000-02-01 01:02:03")};

  Object[] b={scanner.newTimestamp("2000-02-01 01:02:03"),scanner.newTimestamp("2000-03-01 01:02:03")};

  Type[] ta={new DateTimeType(Types.SQL_TIMESTAMP,Types.SQL_TIMESTAMP,0),new DateTimeType(Types.SQL_TIMESTAMP,Types.SQL_TIMESTAMP,0)};

  Type[] tb={new DateTimeType(Types.SQL_TIMESTAMP,Types.SQL_TIMESTAMP,0),new DateTimeType(Types.SQL_TIMESTAMP,Types.SQL_TIMESTAMP,0)};

  Assert.assertFalse(DateTimeType.succeeds(session,a,ta,b,tb));

}

Location: TestPeriodPredicates.java

Content: 

/** 

 * (TIMESTAMP '2000-02-01 01:02:03', TIMESTAMP '2000-03-01 01:02:03') SUCCEEDS (TIMESTAMP '2000-01-01 01:02:03', TIMESTAMP '2000-02-01 01:02:04') is false

 */

public void testFirstPeriodDoesNotSucceedsSecondPeriod2(){

  Object[] a={scanner.newTimestamp("2000-02-01 01:02:03"),scanner.newTimestamp("2000-03-01 01:02:03")};

  Object[] b={scanner.newTimestamp("2000-01-01 01:02:03"),scanner.newTimestamp("2000-02-01 01:02:04")};

  Type[] ta={new DateTimeType(Types.SQL_TIMESTAMP,Types.SQL_TIMESTAMP,0),new DateTimeType(Types.SQL_TIMESTAMP,Types.SQL_TIMESTAMP,0)};

  Type[] tb={new DateTimeType(Types.SQL_TIMESTAMP,Types.SQL_TIMESTAMP,0),new DateTimeType(Types.SQL_TIMESTAMP,Types.SQL_TIMESTAMP,0)};

  Assert.assertFalse(DateTimeType.succeeds(session,a,ta,b,tb));

}

Location: TestPeriodPredicates.java

Content: 

/** 

 * (TIMESTAMP '2000-02-01 01:02:03', INTERVAL '31' DAY) SUCCEEDS (TIMESTAMP '2000-01-01 01:02:03', , INTERVAL '32' DAY) is true

 */

public void testFirstPeriodDoesNotSucceedsSecondPeriodWithInterval(){

  Object[] a={scanner.newTimestamp("2000-02-01 01:02:03"),scanner.newInterval("31",IntervalType.newIntervalType(Types.SQL_INTERVAL_DAY,2,0))};

  Object[] b={scanner.newTimestamp("2000-01-01 01:02:03"),scanner.newInterval("32",IntervalType.newIntervalType(Types.SQL_INTERVAL_DAY,2,0))};

  Type[] ta={new DateTimeType(Types.SQL_TIMESTAMP,Types.SQL_TIMESTAMP,0),IntervalType.newIntervalType(Types.SQL_INTERVAL_DAY,2,0)};

  Type[] tb={new DateTimeType(Types.SQL_TIMESTAMP,Types.SQL_TIMESTAMP,0),IntervalType.newIntervalType(Types.SQL_INTERVAL_DAY,2,0)};

  Assert.assertFalse(DateTimeType.succeeds(session,a,ta,b,tb));

}

Location: TestPeriodPredicates.java

Content: 

/** 

 * (TIMESTAMP '1999-12-01 01:02:03', INTERVAL '10' DAY) EQUALS (TIMESTAMP '1999-12-01 01:02:03', TIMESTAMP '1999-12-11 01:02:03') is true

 */

public void testFirstPeriodEqualsSecondPeriodWithOneInterval(){

  Object[] a={scanner.newTimestamp("1999-12-01 01:02:03"),scanner.newInterval("10",IntervalType.newIntervalType(Types.SQL_INTERVAL_DAY,2,0))};

  Object[] b={scanner.newTimestamp("1999-12-01 01:02:03"),scanner.newTimestamp("1999-12-11 01:02:03")};

  Type[] ta={new DateTimeType(Types.SQL_TIMESTAMP,Types.SQL_TIMESTAMP,0),IntervalType.newIntervalType(Types.SQL_INTERVAL_DAY,2,0)};

  Type[] tb={new DateTimeType(Types.SQL_TIMESTAMP,Types.SQL_TIMESTAMP,0),new DateTimeType(Types.SQL_TIMESTAMP,Types.SQL_TIMESTAMP,0)};

  Assert.assertTrue(DateTimeType.equals(session,a,ta,b,tb));

}

Location: TestPeriodPredicates.java

Content: 

/** 

 * (TIMESTAMP '1999-12-01 01:02:03', INTERVAL '10' DAY) EQUALS (TIMESTAMP '1999-12-01 01:02:03', INTERVAL '10' DAY) is true

 */

public void testFirstPeriodEqualsSecondPeriodWithTwoIntervals(){

  Object[] a={scanner.newTimestamp("1999-12-01 01:02:03"),scanner.newInterval("10",IntervalType.newIntervalType(Types.SQL_INTERVAL_DAY,2,0))};

  Object[] b={scanner.newTimestamp("1999-12-01 01:02:03"),scanner.newInterval("10",IntervalType.newIntervalType(Types.SQL_INTERVAL_DAY,2,0))};

  Type[] ta={new DateTimeType(Types.SQL_TIMESTAMP,Types.SQL_TIMESTAMP,0),IntervalType.newIntervalType(Types.SQL_INTERVAL_DAY,2,0)};

  Type[] tb={new DateTimeType(Types.SQL_TIMESTAMP,Types.SQL_TIMESTAMP,0),IntervalType.newIntervalType(Types.SQL_INTERVAL_DAY,2,0)};

  Assert.assertTrue(DateTimeType.equals(session,a,ta,b,tb));

}

Location: TestPeriodPredicates.java

Content: 

/** 

 * (TIMESTAMP '2000-02-01 01:02:03', TIMESTAMP '2000-03-01 01:02:03') SUCCEEDS (TIMESTAMP '2000-01-01 01:02:03', TIMESTAMP '2000-02-01 01:02:03') is true

 */

public void testFirstPeriodImmediatelySucceedsSecondPeriod(){

  Object[] a={scanner.newTimestamp("2000-02-01 01:02:03"),scanner.newTimestamp("2000-03-01 01:02:03")};

  Object[] b={scanner.newTimestamp("2000-01-01 01:02:03"),scanner.newTimestamp("2000-02-01 01:02:03")};

  Type[] ta={new DateTimeType(Types.SQL_TIMESTAMP,Types.SQL_TIMESTAMP,0),new DateTimeType(Types.SQL_TIMESTAMP,Types.SQL_TIMESTAMP,0)};

  Type[] tb={new DateTimeType(Types.SQL_TIMESTAMP,Types.SQL_TIMESTAMP,0),new DateTimeType(Types.SQL_TIMESTAMP,Types.SQL_TIMESTAMP,0)};

  Assert.assertTrue(DateTimeType.immediatelySucceeds(session,a,ta,b,tb));

}

Location: TestPeriodPredicates.java

Content: 

/** 

 * (TIMESTAMP '2000-01-01 01:02:03', INTERVAL '7' DAY) PRECEDES (TIMESTAMP '1999-12-01 01:02:03', INTERVAL '7' DAY) is false

 */

public void testFirstPeriodIsAfterSecondPeriodWithInterval(){

  Object[] a={scanner.newTimestamp("2000-01-01 01:02:03"),scanner.newInterval("7",IntervalType.newIntervalType(Types.SQL_INTERVAL_DAY,2,0))};

  Object[] b={scanner.newTimestamp("1999-12-01 01:02:03"),scanner.newInterval("7",IntervalType.newIntervalType(Types.SQL_INTERVAL_DAY,2,0))};

  Type[] ta={new DateTimeType(Types.SQL_TIMESTAMP,Types.SQL_TIMESTAMP,0),IntervalType.newIntervalType(Types.SQL_INTERVAL_DAY,2,0)};

  Type[] tb={new DateTimeType(Types.SQL_TIMESTAMP,Types.SQL_TIMESTAMP,0),IntervalType.newIntervalType(Types.SQL_INTERVAL_DAY,2,0)};

  Assert.assertFalse(DateTimeType.precedes(session,a,ta,b,tb));

}

Location: TestPeriodPredicates.java

Content: 

/** 

 * (TIMESTAMP '1999-12-01 01:02:03', TIMESTAMP '2000-01-01 01:02:04') OVERLAPS (TIMESTAMP '2000-01-01 01:02:03', TIMESTAMP '2000-02-01 01:02:03') is true

 */

public void testFirstPeriodOverlapsSecondPeriodByOneSecond(){

  Object[] a={scanner.newTimestamp("1999-12-01 01:02:03"),scanner.newTimestamp("2000-01-01 01:02:04")};

  Object[] b={scanner.newTimestamp("2000-01-01 01:02:03"),scanner.newTimestamp("2000-02-01 01:02:03")};

  Type[] ta={new DateTimeType(Types.SQL_TIMESTAMP,Types.SQL_TIMESTAMP,0),new DateTimeType(Types.SQL_TIMESTAMP,Types.SQL_TIMESTAMP,0)};

  Type[] tb={new DateTimeType(Types.SQL_TIMESTAMP,Types.SQL_TIMESTAMP,0),new DateTimeType(Types.SQL_TIMESTAMP,Types.SQL_TIMESTAMP,0)};

  Assert.assertTrue(DateTimeType.overlaps(session,a,ta,b,tb));

  Assert.assertTrue(DateTimeType.overlaps(session,b,tb,a,ta));

}

Location: TestPeriodPredicates.java

Content: 

/** 

 * (TIMESTAMP '1999-12-01 01:02:03', INTERVAL '40' DAY) OVERLAPS (TIMESTAMP '2000-01-01 01:02:03', TIMESTAMP '2000-02-01 01:02:03') is true

 */

public void testFirstPeriodOverlapsSecondPeriodWithInterval(){

  Object[] a={scanner.newTimestamp("1999-12-01 01:02:03"),scanner.newInterval("40",IntervalType.newIntervalType(Types.SQL_INTERVAL_DAY,2,0))};

  Object[] b={scanner.newTimestamp("2000-01-01 01:02:03"),scanner.newTimestamp("2000-02-01 01:02:03")};

  Type[] ta={new DateTimeType(Types.SQL_TIMESTAMP,Types.SQL_TIMESTAMP,0),IntervalType.newIntervalType(Types.SQL_INTERVAL_DAY,2,0)};

  Type[] tb={new DateTimeType(Types.SQL_TIMESTAMP,Types.SQL_TIMESTAMP,0),new DateTimeType(Types.SQL_TIMESTAMP,Types.SQL_TIMESTAMP,0)};

  Assert.assertTrue(DateTimeType.overlaps(session,a,ta,b,tb));

}

Location: TestPeriodPredicates.java

Content: 

/** 

 * (TIMESTAMP '2000-01-01 01:02:03', TIMESTAMP '2000-02-01 01:02:03') OVERLAPS (TIMESTAMP '1999-12-01 01:02:03', INTERVAL '40' DAY) is true

 */

public void testFirstPeriodOverlapsSecondPeriodWithIntervalReversed(){

  Object[] a2={scanner.newTimestamp("2000-01-01 01:02:03"),scanner.newTimestamp("2000-02-01 01:02:03")};

  Object[] b2={scanner.newTimestamp("1999-12-01 01:02:03"),scanner.newInterval("40",IntervalType.newIntervalType(Types.SQL_INTERVAL_DAY,2,0))};

  Type[] ta={new DateTimeType(Types.SQL_TIMESTAMP,Types.SQL_TIMESTAMP,0),new DateTimeType(Types.SQL_TIMESTAMP,Types.SQL_TIMESTAMP,0)};

  Type[] tb={new DateTimeType(Types.SQL_TIMESTAMP,Types.SQL_TIMESTAMP,0),IntervalType.newIntervalType(Types.SQL_INTERVAL_DAY,2,0)};

  Assert.assertTrue(DateTimeType.overlaps(session,b2,tb,a2,ta));

}

Location: TestPeriodPredicates.java

Content: 

/** 

 * (TIMESTAMP '2000-01-12 01:02:03', TIMESTAMP '1999-12-01 01:02:03') OVERLAPS (TIMESTAMP '2000-02-01 01:02:03', TIMESTAMP '2000-01-01 01:02:03') is true

 */

public void testFirstPeriodOverlapsSecondPeriod_reversed(){

  Object[] a={scanner.newTimestamp("2000-01-12 01:02:03"),scanner.newTimestamp("1999-12-01 01:02:03")};

  Object[] b={scanner.newTimestamp("2000-02-01 01:02:03"),scanner.newTimestamp("2000-01-01 01:02:03")};

  Type[] ta={new DateTimeType(Types.SQL_TIMESTAMP,Types.SQL_TIMESTAMP,0),new DateTimeType(Types.SQL_TIMESTAMP,Types.SQL_TIMESTAMP,0)};

  Type[] tb={new DateTimeType(Types.SQL_TIMESTAMP,Types.SQL_TIMESTAMP,0),new DateTimeType(Types.SQL_TIMESTAMP,Types.SQL_TIMESTAMP,0)};

  Assert.assertTrue(DateTimeType.overlapsRelaxed(session,a,ta,b,tb));

  Assert.assertTrue(DateTimeType.overlapsRelaxed(session,b,tb,a,ta));

}

Location: TestPeriodPredicates.java

Content: 

/** 

 * (TIMESTAMP '1999-12-01 01:02:03', INTERVAL '31' DAY) PRECEDES (TIMESTAMP '2000-01-01 01:02:03', INTERVAL '31' DAY) is true

 */

public void testFirstPeriodPrecedesSecondPeriodWithInterval(){

  Object[] a={scanner.newTimestamp("1999-12-01 01:02:03"),scanner.newInterval("31",IntervalType.newIntervalType(Types.SQL_INTERVAL_DAY,2,0))};

  Object[] b={scanner.newTimestamp("2000-01-01 01:02:03"),scanner.newInterval("31",IntervalType.newIntervalType(Types.SQL_INTERVAL_DAY,2,0))};

  Type[] ta={new DateTimeType(Types.SQL_TIMESTAMP,Types.SQL_TIMESTAMP,0),IntervalType.newIntervalType(Types.SQL_INTERVAL_DAY,2,0)};

  Type[] tb={new DateTimeType(Types.SQL_TIMESTAMP,Types.SQL_TIMESTAMP,0),IntervalType.newIntervalType(Types.SQL_INTERVAL_DAY,2,0)};

  Assert.assertTrue(DateTimeType.precedes(session,a,ta,b,tb));

}

Location: TestPeriodPredicates.java

Content: 

/** 

 * (TIMESTAMP '2000-02-01 01:02:03', TIMESTAMP '2000-03-01 01:02:03') SUCCEEDS (TIMESTAMP '2000-01-01 01:02:03', TIMESTAMP '2000-02-01 01:02:03') is true

 */

public void testFirstPeriodSucceedsSecondPeriod(){

  Object[] a={scanner.newTimestamp("2000-02-01 01:02:03"),scanner.newTimestamp("2000-03-01 01:02:03")};

  Object[] b={scanner.newTimestamp("2000-01-01 01:02:03"),scanner.newTimestamp("2000-02-01 01:02:03")};

  Type[] ta={new DateTimeType(Types.SQL_TIMESTAMP,Types.SQL_TIMESTAMP,0),new DateTimeType(Types.SQL_TIMESTAMP,Types.SQL_TIMESTAMP,0)};

  Type[] tb={new DateTimeType(Types.SQL_TIMESTAMP,Types.SQL_TIMESTAMP,0),new DateTimeType(Types.SQL_TIMESTAMP,Types.SQL_TIMESTAMP,0)};

  Assert.assertTrue(DateTimeType.succeeds(session,a,ta,b,tb));

}

Location: TestPeriodPredicates.java

Content: 

/** 

 * (TIMESTAMP '2000-02-01 01:02:03', INTERVAL '31' DAY) SUCCEEDS (TIMESTAMP '2000-01-01 01:02:03', , INTERVAL '31' DAY) is true

 */

public void testFirstPeriodSucceedsSecondPeriodWithInterval(){

  Object[] a={scanner.newTimestamp("2000-02-01 01:02:03"),scanner.newInterval("31",IntervalType.newIntervalType(Types.SQL_INTERVAL_DAY,2,0))};

  Object[] b={scanner.newTimestamp("2000-01-01 01:02:03"),scanner.newInterval("31",IntervalType.newIntervalType(Types.SQL_INTERVAL_DAY,2,0))};

  Type[] ta={new DateTimeType(Types.SQL_TIMESTAMP,Types.SQL_TIMESTAMP,0),IntervalType.newIntervalType(Types.SQL_INTERVAL_DAY,2,0)};

  Type[] tb={new DateTimeType(Types.SQL_TIMESTAMP,Types.SQL_TIMESTAMP,0),IntervalType.newIntervalType(Types.SQL_INTERVAL_DAY,2,0)};

  Assert.assertTrue(DateTimeType.succeeds(session,a,ta,b,tb));

}

Location: TestPeriodPredicates.java

Content: 

public TestPeriodPredicates(String name){

  super(name,"jdbc:hsqldb:mem:test",false,false);

  scanner=new Scanner();

}

Location: TestPeriodPredicates.java

Content: 

/** 

 * (INTERVAL '31' DAY, TIMESTAMP '1999-12-01 01:02:03') OVERLAPS (TIMESTAMP '2000-01-01 01:02:03', TIMESTAMP '2000-02-01 01:02:03') is false

 */

public void testPeriodStartingWithInterval(){

  Object[] a={scanner.newInterval("31",IntervalType.newIntervalType(Types.SQL_INTERVAL_DAY,2,0)),scanner.newTimestamp("1999-12-01 01:02:03")};

  Object[] b={scanner.newTimestamp("2000-01-01 01:02:03"),scanner.newTimestamp("2000-02-01 01:02:03")};

  Type[] ta={new DateTimeType(Types.SQL_TIMESTAMP,Types.SQL_TIMESTAMP,0),IntervalType.newIntervalType(Types.SQL_INTERVAL_DAY,2,0)};

  Type[] tb={new DateTimeType(Types.SQL_TIMESTAMP,Types.SQL_TIMESTAMP,0),new DateTimeType(Types.SQL_TIMESTAMP,Types.SQL_TIMESTAMP,0)};

  try {

    DateTimeType.overlaps(null,a,ta,b,tb);

    Assert.fail("It is illegal to start a period with an interval");

  }

 catch (  Exception e) {

  }

}

