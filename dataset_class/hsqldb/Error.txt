Location: Error.java

Content: 

public static HsqlException error(int code){

  return error(null,code,0,null);

}

Location: Error.java

Content: 

public static HsqlException error(int code,int code2){

  return error(code,getMessage(code2));

}

Location: Error.java

Content: 

public static HsqlException error(int code,String add){

  return error((Throwable)null,code,add);

}

Location: Error.java

Content: 

public static HsqlException error(int code,Throwable t){

  String message=getMessage(code,0,null);

  return new HsqlException(t,message.substring(0,SQL_STATE_DIGITS),-code);

}

Location: Error.java

Content: 

public static HsqlException error(final Result result){

  return new HsqlException(result);

}

Location: Error.java

Content: 

/** 

 * For SIGNAL and RESIGNAL

 * @see HsqlException#HsqlException(Throwable,String,String,int)

 * @return an <code>HsqlException</code>

 */

public static HsqlException error(String message,String sqlState){

  int code=getCode(sqlState);

  if (code < 1000) {

    code=ErrorCode.X_45000;

  }

  if (message == null) {

    message=getMessage(code);

  }

  return new HsqlException(null,message,sqlState,code);

}

Location: Error.java

Content: 

/** 

 * Compose error message by inserting the strings in the add parameters in placeholders within the error message. The message string contains $$ markers for each context variable. Context variables are supplied in the add parameters.

 * @param code      main error code

 * @param subCode   sub error code (if 0 => no subMessage!)

 * @param add     optional parameters

 * @return an <code>HsqlException</code>

 */

public static HsqlException error(Throwable t,int code,int subCode,final Object[] add){

  String message=getMessage(code,subCode,add);

  int sqlCode=subCode < ERROR_CODE_BASE ? code : subCode;

  return new HsqlException(t,message.substring(SQL_STATE_DIGITS + 1),message.substring(0,SQL_STATE_DIGITS),-sqlCode);

}

Location: Error.java

Content: 

public static HsqlException error(Throwable t,int code,String add){

  String s=getMessage(code);

  if (add != null) {

    s+=": " + add;

  }

  return new HsqlException(t,s.substring(SQL_STATE_DIGITS + 1),s.substring(0,SQL_STATE_DIGITS),-code);

}

Location: Error.java

Content: 

public static int getCode(String sqlState){

  try {

    Field[] fields=ErrorCode.class.getDeclaredFields();

    for (int i=0; i < fields.length; i++) {

      String name=fields[i].getName();

      if (name.length() == 7 && name.endsWith(sqlState)) {

        return fields[i].getInt(ErrorCode.class);

      }

    }

  }

 catch (  IllegalAccessException e) {

  }

  return -1;

}

Location: Error.java

Content: 

/** 

 * Returns the error message given the error code.<br/> This method is be used when throwing exception other than <code>HsqlException</code>.

 * @param errorCode    the error code associated to the error message

 * @return  the error message associated with the error code

 */

public static String getMessage(final int errorCode){

  return getMessage(errorCode,0,null);

}

Location: Error.java

Content: 

/** 

 * Returns the error message given the error code.<br/> This method is used when throwing exception other than <code>HsqlException</code>.

 * @param code the code for the error message

 * @param subCode the code for the addon message

 * @param add value(s) to use to replace the placeholer(s)

 * @return the error message associated with the error code

 */

public static String getMessage(final int code,int subCode,final Object[] add){

  String message=getResourceString(code);

  if (subCode != 0) {

    message+=getResourceString(subCode);

  }

  if (add != null) {

    message=insertStrings(message,add);

  }

  return message;

}

Location: Error.java

Content: 

private static String getResourceString(int code){

  String key=StringUtil.toZeroPaddedString(code,SQL_CODE_DIGITS,SQL_CODE_DIGITS);

  String string=ResourceBundleHandler.getString(bundleHandle,key);

  if (string == null) {

    string=defaultMessage;

  }

  return string;

}

Location: Error.java

Content: 

/** 

 * Returns the error SQL STATE sting given the error code.<br/> This method is be used when throwing exception based on other exceptions.

 * @param errorCode    the error code associated to the error message

 * @return  the error message associated with the error code

 */

public static String getStateString(final int errorCode){

  return getMessage(errorCode,0,null).substring(0,SQL_STATE_DIGITS);

}

Location: Error.java

Content: 

/** 

 * Compose error message by inserting the strings in the add variables in placeholders within the error message. The message string contains $$ markers for each context variable. Context variables are supplied in the add parameter. (by Loic Lefevre)

 * @param message  message string

 * @param add      optional parameters

 * @return an <code>HsqlException</code>

 */

private static String insertStrings(String message,Object[] add){

  StringBuffer sb=new StringBuffer(message.length() + 32);

  int lastIndex=0;

  int escIndex=message.length();

  for (int i=0; i < add.length; i++) {

    escIndex=message.indexOf(MESSAGE_TAG,lastIndex);

    if (escIndex == -1) {

      break;

    }

    sb.append(message.substring(lastIndex,escIndex));

    sb.append(add[i] == null ? "null exception message" : add[i].toString());

    lastIndex=escIndex + MESSAGE_TAG.length();

  }

  escIndex=message.length();

  sb.append(message.substring(lastIndex,escIndex));

  return sb.toString();

}

Location: Error.java

Content: 

public static HsqlException parseError(int code,int subCode,int lineNumber,final Object[] add){

  String message=getMessage(code,subCode,add);

  if (lineNumber > 1) {

    String sub=getMessage(ErrorCode.M_parse_line);

    message=message + " :" + sub+ String.valueOf(lineNumber);

  }

  int sqlCode=subCode < ERROR_CODE_BASE ? code : subCode;

  return new HsqlException(null,message.substring(SQL_STATE_DIGITS + 1),message.substring(0,SQL_STATE_DIGITS),-sqlCode);

}

Location: Error.java

Content: 

public static HsqlException parseError(int code,String add,int lineNumber){

  String s=getMessage(code);

  if (add != null) {

    s=s + ": " + add;

  }

  if (lineNumber > 1) {

    add=getMessage(ErrorCode.M_parse_line);

    s=s + " :" + add+ String.valueOf(lineNumber);

  }

  return new HsqlException(null,s.substring(SQL_STATE_DIGITS + 1),s.substring(0,SQL_STATE_DIGITS),-code);

}

Location: Error.java

Content: 

/** 

 * Used to print messages to System.out

 * @param message message to print

 */

public static void printSystemOut(String message){

  if (TRACESYSTEMOUT) {

    System.out.println(message);

  }

}

Location: Error.java

Content: 

public static RuntimeException runtimeError(int code,String add){

  HsqlException e=error(code,add);

  return new RuntimeException(e.getMessage());

}

