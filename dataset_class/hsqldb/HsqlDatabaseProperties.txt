Location: HsqlDatabaseProperties.java

Content: 

void filterLoadedProperties(){

  String val=stringProps.getProperty(sql_enforce_strict_size);

  if (val != null) {

    stringProps.setProperty(sql_enforce_size,val);

  }

  Enumeration en=stringProps.propertyNames();

  while (en.hasMoreElements()) {

    String key=(String)en.nextElement();

    boolean accept=dbMeta.containsKey(key);

    if (!accept) {

      stringProps.remove(key);

    }

  }

}

Location: HsqlDatabaseProperties.java

Content: 

public String getClientPropertiesAsString(){

  if (isPropertyTrue(jdbc_translate_tti_types)) {

    StringBuffer sb=new StringBuffer(jdbc_translate_tti_types);

    sb.append('=').append(true);

    return sb.toString();

  }

  return "";

}

Location: HsqlDatabaseProperties.java

Content: 

public int getDBModified(){

  String value=getStringProperty(hsqldb_modified);

  if (MODIFIED_YES.equals(value)) {

    return FILES_MODIFIED;

  }

 else   if (MODIFIED_YES_NEW.equals(value)) {

    return FILES_MODIFIED_NEW;

  }

 else   if (MODIFIED_NO_NEW.equals(value)) {

    return FILES_NEW;

  }

  return FILES_NOT_MODIFIED;

}

Location: HsqlDatabaseProperties.java

Content: 

public int getDefaultWriteDelay(){

  if (database.logger.isStoredFileAccess()) {

    return 2000;

  }

  return 500;

}

Location: HsqlDatabaseProperties.java

Content: 

public int getIntegerProperty(String key){

  int value;

  Object[] metaData=(Object[])dbMeta.get(key);

  if (metaData == null) {

    throw Error.error(ErrorCode.X_42555,key);

  }

  value=((Integer)metaData[HsqlProperties.indexDefaultValue]).intValue();

  String prop=stringProps.getProperty(key);

  if (prop != null) {

    try {

      value=Integer.parseInt(prop);

    }

 catch (    NumberFormatException e) {

    }

  }

  return value;

}

Location: HsqlDatabaseProperties.java

Content: 

public static Iterator getPropertiesMetaIterator(){

  return dbMeta.values().iterator();

}

Location: HsqlDatabaseProperties.java

Content: 

/** 

 * for all types of property apart from system props 

 */

public String getPropertyString(String key){

  Object[] metaData=(Object[])dbMeta.get(key);

  if (metaData == null) {

    throw Error.error(ErrorCode.X_42555,key);

  }

  String prop=stringProps.getProperty(key);

  boolean isSystem=((Integer)metaData[HsqlProperties.indexType]).intValue() == SYSTEM_PROPERTY;

  if (prop == null && isSystem) {

    try {

      prop=System.getProperty(key);

    }

 catch (    SecurityException e) {

    }

  }

  if (prop == null) {

    Object value=metaData[HsqlProperties.indexDefaultValue];

    if (value == null) {

      return null;

    }

    return String.valueOf(value);

  }

  return prop;

}

Location: HsqlDatabaseProperties.java

Content: 

public String getStringPropertyDefault(String key){

  Object[] metaData=(Object[])dbMeta.get(key);

  if (metaData == null) {

    throw Error.error(ErrorCode.X_42555,key);

  }

  return (String)metaData[HsqlProperties.indexDefaultValue];

}

Location: HsqlDatabaseProperties.java

Content: 

public String getStringProperty(String key){

  String value;

  Object[] metaData=(Object[])dbMeta.get(key);

  if (metaData == null) {

    throw Error.error(ErrorCode.X_42555,key);

  }

  value=(String)metaData[HsqlProperties.indexDefaultValue];

  String prop=stringProps.getProperty(key);

  if (prop != null) {

    value=prop;

  }

  return value;

}

Location: HsqlDatabaseProperties.java

Content: 

public Set getUserDefinedPropertyData(){

  Set set=new HashSet();

  Iterator it=dbMeta.values().iterator();

  while (it.hasNext()) {

    Object[] row=(Object[])it.next();

    if (((Integer)row[HsqlProperties.indexType]).intValue() == SQL_PROPERTY) {

      set.add(row);

    }

  }

  return set;

}

Location: HsqlDatabaseProperties.java

Content: 

public HsqlDatabaseProperties(Database db){

  super(dbMeta,db.getPath(),db.logger.getFileAccess(),db.isFilesInJar());

  database=db;

  setNewDatabaseProperties();

}

Location: HsqlDatabaseProperties.java

Content: 

public boolean isBoolean(String key){

  Object[] row=(Object[])dbMeta.get(key);

  return row != null && row[HsqlProperties.indexClass].equals("Boolean") && ((Integer)row[HsqlProperties.indexType]).intValue() == SQL_PROPERTY;

}

Location: HsqlDatabaseProperties.java

Content: 

public boolean isIntegral(String key){

  Object[] row=(Object[])dbMeta.get(key);

  return row != null && row[HsqlProperties.indexClass].equals("Integer") && ((Integer)row[HsqlProperties.indexType]).intValue() == SQL_PROPERTY;

}

Location: HsqlDatabaseProperties.java

Content: 

public boolean isString(String key){

  Object[] row=(Object[])dbMeta.get(key);

  return row != null && row[HsqlProperties.indexClass].equals("String") && ((Integer)row[HsqlProperties.indexType]).intValue() == SQL_PROPERTY;

}

Location: HsqlDatabaseProperties.java

Content: 

public boolean isUserDefinedProperty(String key){

  Object[] row=(Object[])dbMeta.get(key);

  return row != null && ((Integer)row[HsqlProperties.indexType]).intValue() == SQL_PROPERTY;

}

Location: HsqlDatabaseProperties.java

Content: 

public boolean isVersion18(){

  String version=getProperty(HsqlDatabaseProperties.hsqldb_cache_version,THIS_VERSION);

  return version.substring(0,4).equals("1.7.");

}

Location: HsqlDatabaseProperties.java

Content: 

public boolean setDatabaseProperty(String key,String value){

  Object[] meta=(Object[])dbMeta.get(key);

  String error=HsqlProperties.validateProperty(key,value,meta);

  if (error != null) {

    return false;

  }

  stringProps.put(key,value);

  return true;

}

Location: HsqlDatabaseProperties.java

Content: 

public void setDBModified(int mode){

  String value;

switch (mode) {

case FILES_NOT_MODIFIED:

    value=MODIFIED_NO;

  break;

case FILES_MODIFIED:

value=MODIFIED_YES;

break;

case FILES_MODIFIED_NEW:

value=MODIFIED_YES_NEW;

break;

default :

throw Error.runtimeError(ErrorCode.U_S0500,"HsqlDatabaseProperties");

}

stringProps.put(hsqldb_modified,value);

save();

}

Location: HsqlDatabaseProperties.java

Content: 

void setNewDatabaseProperties(){

  setProperty(hsqldb_version,THIS_VERSION);

  setProperty(hsqldb_modified,MODIFIED_NO_NEW);

  if (database.logger.isStoredFileAccess()) {

    setProperty(hsqldb_cache_rows,25000);

    setProperty(hsqldb_cache_size,6000);

    setProperty(hsqldb_log_size,10);

    setProperty(sql_enforce_size,true);

    setProperty(hsqldb_nio_data_file,false);

    setProperty(hsqldb_lock_file,true);

    setProperty(hsqldb_default_table_type,"cached");

    setProperty(jdbc_translate_tti_types,true);

  }

}

Location: HsqlDatabaseProperties.java

Content: 

/** 

 * overload file database properties with any passed on URL line do not store password etc

 */

public void setURLProperties(HsqlProperties p){

  boolean strict=false;

  if (p == null) {

    return;

  }

  String val=p.getProperty(sql_enforce_strict_size);

  if (val != null) {

    p.setProperty(sql_enforce_size,val);

    p.removeProperty(sql_enforce_strict_size);

  }

  strict=p.isPropertyTrue(url_check_props,false);

  for (Enumeration e=p.propertyNames(); e.hasMoreElements(); ) {

    String propertyName=(String)e.nextElement();

    String propertyValue=p.getProperty(propertyName);

    boolean valid=false;

    boolean validVal=false;

    String error=null;

    Object[] meta=(Object[])dbMeta.get(propertyName);

    if (meta != null && ((Integer)meta[HsqlProperties.indexType]).intValue() == SQL_PROPERTY) {

      valid=true;

      error=HsqlProperties.validateProperty(propertyName,propertyValue,meta);

      validVal=error == null;

    }

    if (propertyName.startsWith("sql.") || propertyName.startsWith("hsqldb.") || propertyName.startsWith("textdb.")) {

      if (strict && !valid) {

        throw Error.error(ErrorCode.X_42555,propertyName);

      }

      if (strict && !validVal) {

        throw Error.error(ErrorCode.X_42556,error);

      }

    }

  }

  for (Enumeration e=p.propertyNames(); e.hasMoreElements(); ) {

    String propertyName=(String)e.nextElement();

    Object[] meta=(Object[])dbMeta.get(propertyName);

    if (meta != null && ((Integer)meta[HsqlProperties.indexType]).intValue() == SQL_PROPERTY) {

      setDatabaseProperty(propertyName,p.getProperty(propertyName));

    }

  }

}

Location: HsqlDatabaseProperties.java

Content: 

/** 

 * If the system property "hsqldb.method_class_names" is not set, then static methods of all available Java classes can be accessed as functions in HSQLDB. If the property is set, then only the list of semicolon separated method names becomes accessible. An empty property value means no class is accessible.<p> A property value that ends with .* is treated as a wild card and allows access to all classe or method names formed by substitution of the asterisk.<p> All methods of java.lang.Math are always accessible.

 */

public static boolean supportsJavaMethod(String name){

  if (accessibleJavaMethodNames == null) {

    return true;

  }

  if (name.startsWith("java.lang.Math.")) {

    return true;

  }

  if (accessibleJavaMethodNames.contains(name)) {

    return true;

  }

  Iterator it=accessibleJavaMethodNames.iterator();

  while (it.hasNext()) {

    String className=(String)it.next();

    int limit=className.lastIndexOf(".*");

    if (limit < 1) {

      continue;

    }

    if (name.startsWith(className.substring(0,limit + 1))) {

      return true;

    }

  }

  return false;

}

