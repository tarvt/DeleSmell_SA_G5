Location: Token.java

Content: 

public String getFullString(){

  return fullString;

}

Location: Token.java

Content: 

static Object[] getSimplifiedTokens(Token[] tokens){

  Object[] array=new Object[tokens.length];

  for (int i=0; i < tokens.length; i++) {

    if (tokens[i].expression == null) {

      array[i]=tokens[i].getSQL();

    }

 else {

      array[i]=tokens[i].expression;

    }

  }

  return array;

}

Location: Token.java

Content: 

static String getSQL(Token[] tokens){

  boolean wasDelimiter=true;

  StringBuffer sb=new StringBuffer();

  for (int i=0; i < tokens.length; i++) {

    String sql=tokens[i].getSQL();

    if (!tokens[i].isDelimiter && !wasDelimiter) {

      sb.append(' ');

    }

    sb.append(sql);

    wasDelimiter=tokens[i].isDelimiter;

  }

  return sb.toString();

}

Location: Token.java

Content: 

public char getTypeChar(){

  return typeChar[type];

}

Location: Token.java

Content: 

public String getTypeString(){

  return typeString[type];

}

Location: Token.java

Content: 

static boolean isAssignmentOperator(final int type){

  return (type == ASSIGN);

}

Location: Token.java

Content: 

static boolean isComparisonOperator(final int type){

switch (type) {

case EQ:

case LT:

case GT:

case LTE:

case GTE:

{

      return true;

    }

default :

{

    return false;

  }

}

}

Location: Token.java

Content: 

static boolean isLogicalOperator(final int type){

switch (type) {

case AND:

case OR:

case XOR:

case NOT:

{

      return true;

    }

default :

{

    return false;

  }

}

}

Location: Token.java

Content: 

static boolean isValue(final int type){

switch (type) {

case IDENT:

case STRING:

case NUMBER:

{

      return true;

    }

default :

{

    return false;

  }

}

}

Location: Token.java

Content: 

public String reconstitute(){

  return reconstitute(false);

}

Location: Token.java

Content: 

public String reconstitute(boolean semify){

  if (val == null)   return "";

switch (type) {

case Token.SPECIAL_TYPE:

case Token.PL_TYPE:

    return Character.toString(getTypeChar()) + val;

case Token.SQL_TYPE:

  return val + (semify ? ";" : "");

}

return "? " + val;

}

Location: Token.java

Content: 

public void setExpression(Object expression){

  this.expression=expression;

}

Location: Token.java

Content: 

public void setWithColumnList(){

  hasColumnList=true;

}

Location: Token.java

Content: 

public Token(int inType,int inLine){

  this(inType,(String)null,inLine);

}

Location: Token.java

Content: 

public Token(int inType,StringBuffer inBuf,int inLine){

  this(inType,inBuf.toString(),inLine);

}

Location: Token.java

Content: 

public Token(int inType,String inVal,int inLine){

  val=inVal;

  type=inType;

  line=inLine + 1;

switch (inType) {

case SPECIAL_TYPE:

case EDIT_TYPE:

case PL_TYPE:

case MACRO_TYPE:

    if (val == null)     throw new IllegalArgumentException("Null String value for scanner token");

  val=leadingWhitePattern.matcher(val).replaceFirst("");

break;

case SYNTAX_ERR_TYPE:

case BUFFER_TYPE:

case RAW_TYPE:

case RAWEXEC_TYPE:

case UNTERM_TYPE:

if (val == null) throw new IllegalArgumentException("Null String value for scanner token");

break;

case SQL_TYPE:

break;

default :

throw new IllegalArgumentException("Internal error.  Unexpected scanner token type: " + inType);

}

}

