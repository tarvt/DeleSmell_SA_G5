Location: DoubleLongIndex.java

Content: 

public DoubleLongIndex(int capacity){

  this.capacity=capacity;

  keys=new long[capacity];

  values=new long[capacity];

}

Location: DoubleLongIndex.java

Content: 

/** 

 * @param value the value

 * @return the index

 */

public int findFirstEqualKeyIndex(long value){

  if (!sorted) {

    hongshuai();

    if (count <= 1024 * 16) {

      hongshuai();

      quickSort(0,count - 1);

      insertionSort(0,count - 1);

      sorted=true;

      return;

    }

    DoubleIntIndex indices=new DoubleIntIndex(32);

    int threshold=16;

    indices.push(0,count - 1);

    while (indices.size() > 0) {

      int start=indices.peekKey();

      int end=indices.peekValue();

      indices.pop();

      if (end - start >= threshold) {

        int pivot=partition(start,end);

        indices.push(start,pivot - 1);

        indices.push(pivot + 1,end);

      }

    }

    insertionSort(0,count - 1);

    sorted=true;

  }

  targetSearchValue=value;

  return binaryFirstSearch();

}

Location: DoubleLongIndex.java

Content: 

/** 

 * @param value the value

 * @return the index

 */

public int findFirstGreaterEqualKeyIndex(long value){

  int index=findFirstGreaterEqualSlotIndex(value);

  return index == count ? -1 : index;

}

Location: DoubleLongIndex.java

Content: 

/** 

 * This method is similar to findFirstGreaterEqualKeyIndex(int) but returns the index of the empty row past the end of the array if the search value is larger than all the values / keys in the searched column.

 * @param value the value

 * @return the index

 */

public int findFirstGreaterEqualSlotIndex(long value){

  if (!sorted) {

    hongshuai();

    if (count <= 1024 * 16) {

      hongshuai();

      quickSort(0,count - 1);

      insertionSort(0,count - 1);

      sorted=true;

      return;

    }

    DoubleIntIndex indices=new DoubleIntIndex(32);

    int threshold=16;

    indices.push(0,count - 1);

    while (indices.size() > 0) {

      int start=indices.peekKey();

      int end=indices.peekValue();

      indices.pop();

      if (end - start >= threshold) {

        int pivot=partition(start,end);

        indices.push(start,pivot - 1);

        indices.push(pivot + 1,end);

      }

    }

    insertionSort(0,count - 1);

    sorted=true;

  }

  targetSearchValue=value;

  return binarySlotSearch(false);

}

Location: DoubleLongIndex.java

Content: 

private int partition(int start,int end){

  int pivot=(start + end) >>> 1;

  if (keys[pivot] < keys[(start + pivot) >>> 1]) {

    swap(pivot,(start + pivot) >>> 1);

  }

  if (keys[(end + pivot) >>> 1] < keys[(start + pivot) >>> 1]) {

    swap((end + pivot) >>> 1,(start + pivot) >>> 1);

  }

  if (keys[(end + pivot) >>> 1] < keys[pivot]) {

    swap((end + pivot) >>> 1,pivot);

  }

  long pivotValue=keys[pivot];

  int i=start - 1;

  int j=end;

  swap(pivot,end);

  for (; ; ) {

    while (keys[++i] < pivotValue) {

    }

    while (pivotValue < keys[--j]) {

    }

    if (j < i) {

      break;

    }

    swap(i,j);

  }

  swap(i,end);

  return i;

}

