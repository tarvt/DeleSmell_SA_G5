Location: TransactionManagerMVCC.java

Content: 

RowAction addDeleteActionToRow(Session session,Table table,PersistentStore store,Row row,int[] colMap){

  RowAction action=null;

  readLock.lock();

  try {

switch (table.tableType) {

case TableBase.CACHED_TABLE:

{

        rowActionMap.getWriteLock().lock();

        try {

          action=(RowAction)rowActionMap.get(row.getPos());

          if (action == null) {

            action=RowAction.addDeleteAction(session,table,row,colMap);

            if (action != null) {

              addTransactionInfo(row);

            }

          }

 else {

            row.rowAction=action;

            action=RowAction.addDeleteAction(session,table,row,colMap);

          }

        }

  finally {

          rowActionMap.getWriteLock().unlock();

        }

        break;

      }

case TableBase.TEMP_TABLE:

{

      action=RowAction.addDeleteAction(session,table,row,colMap);

      store.delete(session,row);

      row.rowAction=null;

      break;

    }

case TableBase.MEMORY_TABLE:

default :

  action=RowAction.addDeleteAction(session,table,row,colMap);

}

}

  finally {

readLock.unlock();

}

return action;

}

Location: TransactionManagerMVCC.java

Content: 

/** 

 * add a list of actions to the end of queue

 */

void addToCommittedQueue(Session session,Object[] list){

  readLock.lock();

  try {

    committedTransactions.addLast(list);

    committedTransactionTimestamps.addLast(session.actionTimestamp);

  }

  finally {

    readLock.unlock();

  }

}

Location: TransactionManagerMVCC.java

Content: 

boolean beginActionTPL(Session session,Statement cs){

  if (session == catalogWriteSession) {

    return true;

  }

  session.tempSet.clear();

  if (cs.isCatalogLock(txModel)) {

    if (catalogWriteSession == null) {

      catalogWriteSession=session;

      isLockedMode=true;

      lockTxTs=session.actionTimestamp;

      lockSessionId=session.getId();

      getTransactionAndPreSessions(session);

      if (!session.tempSet.isEmpty()) {

        session.waitedSessions.addAll(session.tempSet);

        setWaitingSessionTPL(session);

      }

      return true;

    }

  }

  if (!isLockedMode) {

    return true;

  }

  if (cs.getTableNamesForWrite().length > 0) {

    if (cs.getTableNamesForWrite()[0].schema == SqlInvariants.LOBS_SCHEMA_HSQLNAME) {

      return true;

    }

  }

 else   if (cs.getTableNamesForRead().length > 0) {

    if (cs.getTableNamesForRead()[0].schema == SqlInvariants.LOBS_SCHEMA_HSQLNAME) {

      return true;

    }

  }

  if (session.waitingSessions.contains(catalogWriteSession)) {

    return true;

  }

  if (catalogWriteSession.waitingSessions.add(session)) {

    session.waitedSessions.add(catalogWriteSession);

    session.latch.setCount(session.waitedSessions.size());

  }

  return true;

}

Location: TransactionManagerMVCC.java

Content: 

private void countDownLatches(Session session){

  for (int i=0; i < session.waitingSessions.size(); i++) {

    Session current=(Session)session.waitingSessions.get(i);

    current.waitedSessions.remove(session);

    current.latch.setCount(current.waitedSessions.size());

  }

  session.waitedSessions.clear();

  session.waitingSessions.clear();

}

Location: TransactionManagerMVCC.java

Content: 

void endTransactionTPL(Session session){

  if (catalogWriteSession != session) {

    return;

  }

  Session nextSession=null;

  for (int i=0; i < session.waitingSessions.size(); i++) {

    Session current=(Session)session.waitingSessions.get(i);

    Statement st=current.sessionContext.currentStatement;

    if (st != null && st.isCatalogLock(txModel)) {

      nextSession=current;

      break;

    }

  }

  if (nextSession == null) {

    catalogWriteSession=null;

    isLockedMode=false;

  }

 else {

    for (int i=0; i < session.waitingSessions.size(); i++) {

      Session current=(Session)session.waitingSessions.get(i);

      if (current != nextSession) {

        current.waitedSessions.add(nextSession);

        nextSession.waitingSessions.add(current);

        current.latch.setCount(current.waitedSessions.size());

      }

    }

    catalogWriteSession=nextSession;

  }

  unlockTxTs=session.actionTimestamp;

  unlockSessionId=session.getId();

}

Location: TransactionManagerMVCC.java

Content: 

/** 

 * expire all committed transactions that are no longer in scope

 */

void mergeExpiredTransactions(Session session){

  long timestamp=getFirstLiveTransactionTimestamp();

  while (true) {

    long commitTimestamp;

    Object[] actions;

    readLock.lock();

    try {

      if (committedTransactionTimestamps.isEmpty()) {

        break;

      }

      commitTimestamp=committedTransactionTimestamps.getFirst();

      if (commitTimestamp < timestamp) {

        committedTransactionTimestamps.removeFirst();

        actions=(Object[])committedTransactions.removeFirst();

      }

 else {

        break;

      }

    }

  finally {

      readLock.unlock();

    }

    mergeTransaction(actions,0,actions.length,commitTimestamp);

    finaliseRows(session,actions,0,actions.length);

  }

}

Location: TransactionManagerMVCC.java

Content: 

public TransactionManagerMVCC(Database db){

  super(db);

  lobSession=database.sessionManager.getSysLobSession();

  rowActionMap=new LongKeyHashMap(8192);

  txModel=MVCC;

}

