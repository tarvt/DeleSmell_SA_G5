Location: JDBCBlobFile.java

Content: 

/** 

 * Convenience constructor; equivalent to JDBCBlobFile(true);

 * @throws SQLException If a file could not be created or if a securitymanager exists and its <code> {@link java.lang.SecurityManager#checkWrite(java.lang.String)}</code> method does not allow a file to be created.

 */

public JDBCBlobFile() throws SQLException {

  this(true);

}

Location: JDBCBlobFile.java

Content: 

/** 

 * Constructs a new instance backed by a File object created in response to invoking File.createTempFile(TEMP_FILE_PREFIX,TEMP_FILE_SUFFIX) <p>

 * @param deleteOnFree Assigns whether an attempt to delete the backing fileis to be made in response to invocation of  {@link #free()}.

 * @throws SQLException If a file could not be created or if a securitymanager exists and its <code> {@link java.lang.SecurityManager#checkWrite(java.lang.String)}</code> method does not allow a file to be created.

 */

public JDBCBlobFile(boolean deleteOnFree) throws SQLException {

  m_deleteOnFree=deleteOnFree;

  try {

    m_file=File.createTempFile(TEMP_FILE_PREFIX,TEMP_FILE_SUFFIX).getCanonicalFile();

  }

 catch (  IOException ex) {

    throw JDBCUtil.sqlException(ex);

  }

}

Location: JDBCBlobFile.java

Content: 

/** 

 * Convenience constructor; equivalent to JDBCBlobFile(file, false);

 * @param file used to back this BLOB instance.

 * @throws SQLException If an I/O error occurs, which is possible becausethe construction of the canonical pathname may require file system queries; if a required system property value cannot be accessed, or if a security manager exists and its <code> {@link java.lang.SecurityManager#checkRead}</code> method denies read access to the file

 */

public JDBCBlobFile(final File file) throws SQLException {

  this(file,false);

}

Location: JDBCBlobFile.java

Content: 

/** 

 * Constructs a new instance backed by the given File object.

 * @param file used to back this BLOB instance.

 * @param deleteOnFree Assigns whether an attempt to delete the backing fileis to be made in response to invocation of  {@link #free()}.

 * @throws SQLException If an I/O error occurs, which is possible becausethe construction of the canonical pathname may require file system queries; if a required system property value cannot be accessed, or if a security manager exists and its <code> {@link java.lang.SecurityManager#checkRead}</code> method denies read access to the file

 */

public JDBCBlobFile(final File file,boolean deleteOnFree) throws SQLException {

  m_deleteOnFree=deleteOnFree;

  try {

    m_file=file.getCanonicalFile();

  }

 catch (  IOException ex) {

    throw JDBCUtil.sqlException(ex);

  }

  checkIsFile(false);

}

Location: JDBCBlobFile.java

Content: 

private long position0(final byte[] pattern,final long start) throws SQLException {

  InputStream is=null;

  try {

    is=getBinaryStream(start,Long.MAX_VALUE);

    final long matchOffset=KMPSearchAlgorithm.search(is,pattern,KMPSearchAlgorithm.computeTable(pattern));

    return (matchOffset == -1) ? -1 : start + matchOffset;

  }

 catch (  IOException ex) {

    throw JDBCUtil.sqlException(ex);

  }

 finally {

    closeSafely(is);

  }

}

