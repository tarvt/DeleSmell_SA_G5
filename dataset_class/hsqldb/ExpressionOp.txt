Location: ExpressionOp.java

Content: 

/** 

 * creates a special conversion for time / timestamp comparison

 */

ExpressionOp(Expression e){

  super(e.dataType.isDateTimeTypeWithZone() ? OpTypes.CAST : OpTypes.ZONE_MODIFIER);

switch (e.dataType.typeCode) {

case Types.SQL_TIME_WITH_TIME_ZONE:

    nodes=new Expression[UNARY];

  nodes[LEFT]=new ExpressionOp(OpTypes.ZONE_MODIFIER,e,null);

nodes[LEFT].dataType=e.dataType;

dataType=DateTimeType.getDateTimeType(Types.SQL_TIME,e.dataType.scale);

break;

case Types.SQL_TIMESTAMP_WITH_TIME_ZONE:

nodes=new Expression[UNARY];

nodes[LEFT]=new ExpressionOp(OpTypes.ZONE_MODIFIER,e,null);

nodes[LEFT].dataType=e.dataType;

dataType=DateTimeType.getDateTimeType(Types.SQL_TIMESTAMP,e.dataType.scale);

break;

case Types.SQL_TIME:

nodes=new Expression[BINARY];

nodes[LEFT]=e;

nodes[LEFT].dataType=e.dataType;

dataType=DateTimeType.getDateTimeType(Types.SQL_TIME_WITH_TIME_ZONE,e.dataType.scale);

break;

case Types.SQL_TIMESTAMP:

nodes=new Expression[BINARY];

nodes[LEFT]=e;

nodes[LEFT].dataType=e.dataType;

dataType=DateTimeType.getDateTimeType(Types.SQL_TIMESTAMP_WITH_TIME_ZONE,e.dataType.scale);

break;

default :

throw Error.runtimeError(ErrorCode.U_S0500,"ExpressionOp");

}

this.alias=e.alias;

}

Location: ExpressionOp.java

Content: 

/** 

 * creates a CAST expression

 */

ExpressionOp(Expression e,Type dataType){

  super(OpTypes.CAST);

  nodes=new Expression[UNARY];

  nodes[LEFT]=e;

  this.dataType=dataType;

  this.alias=e.alias;

}

Location: ExpressionOp.java

Content: 

/** 

 * creates a CONVERT expression with format when format is null, it is a simple CAST

 */

ExpressionOp(Expression e,Type dataType,Expression format){

  super(OpTypes.CAST);

  nodes=new Expression[UNARY];

  nodes[LEFT]=e;

  this.dataType=dataType;

  this.alias=e.alias;

}

Location: ExpressionOp.java

Content: 

/** 

 * Creates a multiple arg operation expression

 */

ExpressionOp(int type,Expression[] exprArray){

  super(type);

switch (opType) {

case OpTypes.CONCAT_WS:

    nodes=exprArray;

  return;

default :

throw Error.runtimeError(ErrorCode.U_S0500,"ExpressionOp");

}

}

Location: ExpressionOp.java

Content: 

/** 

 * Creates a special binary operation expression

 */

ExpressionOp(int type,Expression left,Expression right){

  super(type);

  nodes=new Expression[BINARY];

  nodes[LEFT]=left;

  nodes[RIGHT]=right;

switch (opType) {

case OpTypes.LIKE_ARG:

case OpTypes.ALTERNATIVE:

case OpTypes.CASEWHEN:

case OpTypes.LIMIT:

case OpTypes.ZONE_MODIFIER:

    return;

case OpTypes.PREFIX:

  dataType=left.dataType;

return;

default :

throw Error.runtimeError(ErrorCode.U_S0500,"ExpressionOp");

}

}

Location: ExpressionOp.java

Content: 

public static Expression getCastExpression(Session session,Expression e,Type dataType){

  if (e.getType() == OpTypes.VALUE) {

    Object value=dataType.castToType(session,e.getValue(session),e.getDataType());

    return new ExpressionValue(value,dataType);

  }

  return new ExpressionOp(e,dataType);

}

Location: ExpressionOp.java

Content: 

void resolveTypesForAlternative(Session session){

  if (nodes[LEFT].dataType == null) {

    nodes[LEFT].dataType=nodes[RIGHT].dataType;

  }

  if (nodes[RIGHT].dataType == null) {

    nodes[RIGHT].dataType=nodes[LEFT].dataType;

  }

  if (exprSubType == OpTypes.CAST) {

    if (nodes[RIGHT].dataType == null) {

      nodes[RIGHT].dataType=nodes[LEFT].dataType=Type.SQL_VARCHAR_DEFAULT;

      ;

    }

    dataType=nodes[RIGHT].dataType;

    if (!nodes[RIGHT].dataType.equals(nodes[LEFT].dataType)) {

      if (dataType.isCharacterType()) {

        dataType=Type.SQL_VARCHAR_DEFAULT;

      }

      nodes[LEFT]=new ExpressionOp(nodes[LEFT],dataType);

    }

  }

 else {

    dataType=Type.getAggregateType(nodes[LEFT].dataType,dataType);

    dataType=Type.getAggregateType(nodes[RIGHT].dataType,dataType);

  }

}

Location: ExpressionOp.java

Content: 

/** 

 * For CASE WHEN and its special cases section 9.3 of the SQL standard on type aggregation is implemented.

 */

void resolveTypesForCaseWhen(Session session,Expression parent){

  nodes[RIGHT].resolveTypes(session,this);

  Expression expr=this;

  while (expr.opType == OpTypes.CASEWHEN) {

    if (expr.exprSubType == OpTypes.CAST) {

      dataType=expr.nodes[RIGHT].dataType;

    }

 else {

      dataType=Type.getAggregateType(expr.nodes[RIGHT].dataType,dataType);

    }

    if (expr.nodes[RIGHT].nodes[RIGHT].opType == OpTypes.CASEWHEN) {

      expr=expr.nodes[RIGHT].nodes[RIGHT];

    }

 else {

      expr=expr.nodes[RIGHT].nodes[LEFT];

    }

  }

  expr=this;

  while (expr.opType == OpTypes.CASEWHEN) {

    if (expr.nodes[RIGHT].dataType == null) {

      expr.nodes[RIGHT].dataType=dataType;

    }

    if (expr.nodes[RIGHT].nodes[RIGHT].dataType == null) {

      expr.nodes[RIGHT].nodes[RIGHT].dataType=dataType;

    }

    if (expr.nodes[RIGHT].nodes[LEFT].dataType == null) {

      expr.nodes[RIGHT].nodes[LEFT].dataType=dataType;

    }

    if (expr.nodes[RIGHT].nodes[RIGHT].opType == OpTypes.CASEWHEN) {

      expr=expr.nodes[RIGHT].nodes[RIGHT];

    }

 else {

      expr=expr.nodes[RIGHT].nodes[LEFT];

    }

  }

  expr=this;

  while (expr.opType == OpTypes.CASEWHEN) {

    expr.nodes[LEFT].resolveTypes(session,expr);

    if (expr.nodes[LEFT].isUnresolvedParam()) {

      expr.nodes[LEFT].dataType=Type.SQL_BOOLEAN;

    }

    expr.nodes[RIGHT].nodes[LEFT].resolveTypes(session,expr.nodes[RIGHT]);

    if (expr.nodes[RIGHT].nodes[RIGHT].opType != OpTypes.CASEWHEN) {

      expr.nodes[RIGHT].nodes[RIGHT].resolveTypes(session,expr.nodes[RIGHT]);

    }

    expr=expr.nodes[RIGHT].nodes[RIGHT];

  }

  if (parent == null || parent.opType != OpTypes.ALTERNATIVE) {

    if (dataType == null || dataType.typeCode == Types.SQL_ALL_TYPES) {

      throw Error.error(ErrorCode.X_42567);

    }

  }

}

