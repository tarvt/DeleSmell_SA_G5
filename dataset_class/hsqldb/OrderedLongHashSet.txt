Location: OrderedLongHashSet.java

Content: 

public boolean addAll(Collection col){

  int oldSize=size();

  Iterator it=col.iterator();

  while (it.hasNext()) {

    add(it.nextLong());

  }

  return oldSize != size();

}

Location: OrderedLongHashSet.java

Content: 

public boolean add(long key){

  int oldSize=size();

  super.addOrRemove(key,0,null,null,false);

  return oldSize != size();

}

Location: OrderedLongHashSet.java

Content: 

public boolean contains(long key){

  return super.containsKey(key);

}

Location: OrderedLongHashSet.java

Content: 

public int getIndex(long value){

  return getLookup(value);

}

Location: OrderedLongHashSet.java

Content: 

public int getOrderedStartMatchCount(long[] array){

  int i=0;

  for (; i < array.length; i++) {

    if (i >= size() || get(i) != array[i]) {

      break;

    }

  }

  return i;

}

Location: OrderedLongHashSet.java

Content: 

public int getStartMatchCount(long[] array){

  int i=0;

  for (; i < array.length; i++) {

    if (!super.containsKey(array[i])) {

      break;

    }

  }

  return i;

}

Location: OrderedLongHashSet.java

Content: 

public OrderedLongHashSet(){

  this(8);

}

Location: OrderedLongHashSet.java

Content: 

public OrderedLongHashSet(int initialCapacity) throws IllegalArgumentException {

  super(initialCapacity,BaseHashMap.longKeyOrValue,BaseHashMap.noKeyOrValue,false);

  isList=true;

}

Location: OrderedLongHashSet.java

Content: 

public boolean remove(long key){

  int oldSize=size();

  super.addOrRemove(key,0,null,null,true);

  boolean result=oldSize != size();

  if (result) {

    long[] array=toArray();

    super.clear();

    for (int i=0; i < array.length; i++) {

      add(array[i]);

    }

  }

  return result;

}

Location: OrderedLongHashSet.java

Content: 

public long[] toArray(){

  int lookup=-1;

  long[] array=new long[size()];

  for (int i=0; i < array.length; i++) {

    lookup=super.nextLookup(lookup);

    long value=intKeyTable[lookup];

    array[i]=value;

  }

  return array;

}

