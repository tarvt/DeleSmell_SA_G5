Location: ColumnSchema.java

Content: 

ColumnSchema(HsqlName name,Type type){

  this.columnName=name;

  this.dataType=type;

}

Location: ColumnSchema.java

Content: 

/** 

 * Creates a column defined in DDL statement.

 */

public ColumnSchema(HsqlName name,Type type,boolean isNullable,boolean isPrimaryKey,Expression defaultExpression){

  columnName=name;

  nullability=isNullable ? SchemaObject.Nullability.NULLABLE : SchemaObject.Nullability.NO_NULLS;

  this.dataType=type;

  this.isPrimaryKey=isPrimaryKey;

  this.defaultExpression=defaultExpression;

  setReferences();

}

Location: ColumnSchema.java

Content: 

public Expression getAccessor(){

  if (accessor == null) {

    accessor=new ExpressionColumnAccessor(this);

  }

  return accessor;

}

Location: ColumnSchema.java

Content: 

public String getCatalogNameString(){

  return columnName.schema == null ? null : columnName.schema.schema == null ? null : columnName.schema.schema.name;

}

Location: ColumnSchema.java

Content: 

/** 

 * Returns default expression for the column.

 */

Expression getDefaultExpression(){

  if (defaultExpression == null) {

    if (dataType.isDomainType()) {

      return dataType.userTypeModifier.getDefaultClause();

    }

    return null;

  }

 else {

    return defaultExpression;

  }

}

Location: ColumnSchema.java

Content: 

/** 

 * Returns SQL for default value.

 */

public String getDefaultSQL(){

  String ddl=null;

  ddl=defaultExpression == null ? null : defaultExpression.getSQL();

  return ddl;

}

Location: ColumnSchema.java

Content: 

/** 

 * Returns default value in the session context.

 */

public Object getDefaultValue(Session session){

  return defaultExpression == null ? null : defaultExpression.getValue(session,dataType);

}

Location: ColumnSchema.java

Content: 

public OrderedHashSet getGeneratedColumnReferences(){

  return generatedColumnReferences;

}

Location: ColumnSchema.java

Content: 

/** 

 * Returns generated value in the session context.

 */

public Object getGeneratedValue(Session session){

  return generatingExpression == null ? null : generatingExpression.getValue(session,dataType);

}

Location: ColumnSchema.java

Content: 

/** 

 * Returns generated expression for the column.

 */

public Expression getGeneratingExpression(){

  return generatingExpression;

}

Location: ColumnSchema.java

Content: 

public NumberSequence getIdentitySequence(){

  return sequence;

}

Location: ColumnSchema.java

Content: 

public byte getNullability(){

  return isPrimaryKey ? SchemaObject.Nullability.NO_NULLS : super.getNullability();

}

Location: ColumnSchema.java

Content: 

public String getSchemaNameString(){

  return columnName.schema == null ? null : columnName.schema.name;

}

Location: ColumnSchema.java

Content: 

public String getTableNameString(){

  return columnName.parent == null ? null : columnName.parent.name;

}

Location: ColumnSchema.java

Content: 

public Expression getUpdateExpression(){

  return updateExpression;

}

Location: ColumnSchema.java

Content: 

public boolean hasDefault(){

  return getDefaultExpression() != null;

}

Location: ColumnSchema.java

Content: 

public boolean isAutoUpdate(){

  return updateExpression != null;

}

Location: ColumnSchema.java

Content: 

public boolean isGenerated(){

  return generatingExpression != null;

}

Location: ColumnSchema.java

Content: 

/** 

 * Is this single column primary key of the table.

 * @return boolean

 */

public boolean isPrimaryKey(){

  return isPrimaryKey;

}

Location: ColumnSchema.java

Content: 

public boolean isSearchable(){

  return Types.isSearchable(dataType.typeCode);

}

Location: ColumnSchema.java

Content: 

/** 

 * Is column writeable or always generated

 * @return boolean

 */

public boolean isWriteable(){

  return isWriteable;

}

Location: ColumnSchema.java

Content: 

void setDefaultExpression(Expression expr){

  defaultExpression=expr;

}

Location: ColumnSchema.java

Content: 

void setGeneratingExpression(Expression expr){

  generatingExpression=expr;

  setWriteable(generatingExpression == null);

}

Location: ColumnSchema.java

Content: 

void setIdentity(NumberSequence sequence){

  this.sequence=sequence;

  isIdentity=sequence != null;

}

Location: ColumnSchema.java

Content: 

public void setName(HsqlName name){

  this.columnName=name;

}

Location: ColumnSchema.java

Content: 

/** 

 * Set primary key.

 */

void setPrimaryKey(boolean value){

  isPrimaryKey=value;

}

Location: ColumnSchema.java

Content: 

private void setReferences(){

  if (references != null) {

    references.clear();

  }

  if (generatedColumnReferences != null) {

    generatedColumnReferences.clear();

  }

  if (dataType.isDomainType() || dataType.isDistinctType()) {

    HsqlName name=dataType.getName();

    if (references == null) {

      references=new OrderedHashSet();

    }

    references.add(name);

  }

  if (generatingExpression != null) {

    OrderedHashSet set=new OrderedHashSet();

    generatingExpression.collectObjectNames(set);

    Iterator it=set.iterator();

    while (it.hasNext()) {

      HsqlName name=(HsqlName)it.next();

      if (name.type == SchemaObject.COLUMN || name.type == SchemaObject.TABLE) {

        if (name.type == SchemaObject.COLUMN) {

          if (generatedColumnReferences == null) {

            generatedColumnReferences=new OrderedHashSet();

          }

          generatedColumnReferences.add(name);

        }

      }

 else {

        if (references == null) {

          references=new OrderedHashSet();

        }

        references.add(name);

      }

    }

  }

}

Location: ColumnSchema.java

Content: 

void setType(ColumnSchema other){

  nullability=other.nullability;

  dataType=other.dataType;

}

Location: ColumnSchema.java

Content: 

public void setType(Type type){

  this.dataType=type;

  setReferences();

}

Location: ColumnSchema.java

Content: 

public void setUpdateExpression(Expression updateExpression){

  this.updateExpression=updateExpression;

}

Location: ColumnSchema.java

Content: 

public void setWriteable(boolean value){

  isWriteable=value;

}

