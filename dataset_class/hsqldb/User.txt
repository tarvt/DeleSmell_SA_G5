Location: User.java

Content: 

/** 

 * Checks if this object's password attribute equals specified argument, else throws.

 */

public void checkPassword(String value){

  String digest=granteeManager.digest(value);

  if (!digest.equals(password)) {

    throw Error.error(ErrorCode.X_28000);

  }

}

Location: User.java

Content: 

/** 

 * Retrieves the redo log character sequence for connecting this user

 * @return the redo log character sequence for connectingthis user

 */

public String getConnectUserSQL(){

  StringBuffer sb=new StringBuffer();

  sb.append(Tokens.T_SET).append(' ');

  sb.append(Tokens.T_SESSION).append(' ');

  sb.append(Tokens.T_AUTHORIZATION).append(' ');

  sb.append(StringConverter.toQuotedString(getName().getNameString(),'\'',true));

  return sb.toString();

}

Location: User.java

Content: 

public HsqlName getInitialOrDefaultSchema(){

  if (initialSchema != null) {

    return initialSchema;

  }

  HsqlName schema=granteeManager.database.schemaManager.findSchemaHsqlName(getName().getNameString());

  if (schema == null) {

    return granteeManager.database.schemaManager.getDefaultSchemaHsqlName();

  }

 else {

    return schema;

  }

}

Location: User.java

Content: 

/** 

 * Returns the initial schema for the user

 */

public HsqlName getInitialSchema(){

  return initialSchema;

}

Location: User.java

Content: 

/** 

 * Returns the DDL string for local authentication.

 */

public String getLocalUserSQL(){

  StringBuffer sb=new StringBuffer(64);

  sb.append(Tokens.T_ALTER).append(' ');

  sb.append(Tokens.T_USER).append(' ');

  sb.append(getName().getStatementName()).append(' ');

  sb.append(Tokens.T_SET).append(' ').append(Tokens.T_LOCAL);

  sb.append(' ').append(Tokens.T_TRUE);

  return sb.toString();

}

Location: User.java

Content: 

public String getPasswordDigest(){

  return password;

}

Location: User.java

Content: 

/** 

 * Returns the SQL string for setting password digest.

 */

public static String getSetCurrentPasswordDigestSQL(GranteeManager manager,String password,boolean isDigest){

  if (!isDigest) {

    password=manager.digest(password);

  }

  StringBuffer sb=new StringBuffer(64);

  sb.append(Tokens.T_SET).append(' ');

  sb.append(Tokens.T_PASSWORD).append(' ').append(Tokens.T_DIGEST);

  sb.append(' ').append('\'').append(password).append('\'');

  return sb.toString();

}

Location: User.java

Content: 

/** 

 * Returns the SQL string for setting password digest.

 */

public String getSetUserPasswordDigestSQL(String password,boolean isDigest){

  if (!isDigest) {

    password=granteeManager.digest(password);

  }

  StringBuffer sb=new StringBuffer(64);

  sb.append(Tokens.T_ALTER).append(' ');

  sb.append(Tokens.T_USER).append(' ');

  sb.append(getName().getStatementName()).append(' ');

  sb.append(Tokens.T_SET).append(' ');

  sb.append(Tokens.T_PASSWORD).append(' ').append(Tokens.T_DIGEST);

  sb.append(' ').append('\'').append(password).append('\'');

  return sb.toString();

}

Location: User.java

Content: 

/** 

 * This class does not have access to the SchemaManager, therefore caller should verify that the given schemaName exists.

 * @param schema An existing schema.  Null value allowed,which means use the DB default session schema.

 */

public void setInitialSchema(HsqlName schema){

  initialSchema=schema;

}

Location: User.java

Content: 

public void setPassword(String password,boolean isDigest){

  if (!isDigest) {

    password=granteeManager.digest(password);

  }

  this.password=password;

}

Location: User.java

Content: 

/** 

 * Constructor

 */

User(HsqlName name,GranteeManager manager){

  super(name,manager);

  if (manager != null) {

    updateAllRights();

  }

}

