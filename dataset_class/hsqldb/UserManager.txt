Location: UserManager.java

Content: 

public boolean checkComplexity(Session session,String password){

  if (session == null || pwCheckFunction == null) {

    return true;

  }

  Result result=pwCheckFunction.invoke(session,new Object[]{password},null,true);

  Boolean check=(Boolean)result.getValueObject();

  if (check == null || !check.booleanValue()) {

    return false;

  }

  return true;

}

Location: UserManager.java

Content: 

public void createFirstUser(String username,String password){

  boolean isQuoted=true;

  if (username.equalsIgnoreCase("SA")) {

    username="SA";

    isQuoted=false;

  }

  HsqlName name=granteeManager.database.nameManager.newHsqlName(username,isQuoted,SchemaObject.GRANTEE);

  User user=createUser(null,name,password,false);

  user.isLocalOnly=true;

  granteeManager.grant(name.name,SqlInvariants.DBA_ADMIN_ROLE_NAME,granteeManager.getDBARole());

}

Location: UserManager.java

Content: 

/** 

 * Creates a new User object under management of this object. <p> A set of constraints regarding user creation is imposed: <p> <OL> <LI>If the specified name is null, then an ASSERTION_FAILED exception is thrown stating that the name is null. <LI>If this object's collection already contains an element whose name attribute equals the name argument, then a GRANTEE_ALREADY_EXISTS exception is thrown. (This will catch attempts to create Reserved grantee names). </OL>

 */

public User createUser(Session session,HsqlName name,String password,boolean isDigest){

  User user=granteeManager.addUser(name);

  if (session == null) {

    user.setPassword(password,isDigest);

  }

 else {

    try {

      setPassword(session,user,password,isDigest);

    }

 catch (    HsqlException e) {

      granteeManager.removeNewUser(name);

      throw e;

    }

  }

  userList.add(name.name,user);

  return user;

}

Location: UserManager.java

Content: 

/** 

 * Attempts to drop a User object with the specified name from this object's set. <p> A successful drop action consists of: <p> <UL> <LI>removing the User object with the specified name from the set. <LI>revoking all rights from the removed User<br> (this ensures that in case there are still references to the just dropped User object, those references cannot be used to erroneously access database objects). </UL> <p>

 */

public void dropUser(String name){

  boolean reservedUser=GranteeManager.isReserved(name);

  if (reservedUser) {

    throw Error.error(ErrorCode.X_28502,name);

  }

  boolean result=granteeManager.removeGrantee(name);

  if (!result) {

    throw Error.error(ErrorCode.X_28501,name);

  }

  User user=(User)userList.remove(name);

  if (user == null) {

    throw Error.error(ErrorCode.X_28501,name);

  }

}

Location: UserManager.java

Content: 

public boolean exists(String name){

  return userList.get(name) == null ? false : true;

}

Location: UserManager.java

Content: 

public String[] getAuthenticationSQL(){

  HsqlArrayList list=new HsqlArrayList();

  String[] array;

  if (pwCheckFunction != null) {

    StringBuffer sb=new StringBuffer();

    sb.append(Tokens.T_SET).append(' ').append(Tokens.T_DATABASE);

    sb.append(' ').append(Tokens.T_PASSWORD).append(' ');

    sb.append(Tokens.T_CHECK).append(' ').append(Tokens.T_FUNCTION);

    sb.append(' ');

    sb.append(pwCheckFunction.getSQLBodyDefinition());

    list.add(sb.toString());

  }

  if (extAuthenticationFunction != null) {

    StringBuffer sb=new StringBuffer();

    sb.append(Tokens.T_SET).append(' ').append(Tokens.T_DATABASE);

    sb.append(' ').append(Tokens.T_AUTHENTICATION).append(' ');

    sb.append(Tokens.T_FUNCTION).append(' ');

    sb.append(extAuthenticationFunction.getSQLBodyDefinition());

    list.add(sb.toString());

  }

  array=new String[list.size()];

  list.toArray(array);

  return array;

}

Location: UserManager.java

Content: 

public String[] getInitialSchemaSQL(){

  HsqlArrayList list=new HsqlArrayList(userList.size());

  for (int i=0; i < userList.size(); i++) {

    User user=(User)userList.get(i);

    if (user.isSystem) {

      continue;

    }

    HsqlName name=user.getInitialSchema();

    if (name == null) {

      continue;

    }

    list.add(user.getInitialSchemaSQL());

  }

  String[] array=new String[list.size()];

  list.toArray(array);

  return array;

}

Location: UserManager.java

Content: 

/** 

 * Returns the specially constructed <code>SYSTEM_AUTHORIZATION_NAME</code> <code>User</code> object for the current <code>Database</code> object.

 * @return the <code>SYS_AUTHORIZATION_NAME</code><code>User</code> object

 */

public User getSysUser(){

  return GranteeManager.systemAuthorisation;

}

Location: UserManager.java

Content: 

/** 

 * Retrieves this object's set of User objects as an associative list.

 */

public HashMappedList getUsers(){

  return userList;

}

Location: UserManager.java

Content: 

/** 

 * Returns the User object with the specified name and password from this object's set.

 */

public User getUser(String name,String password){

  if (name == null) {

    name="";

  }

  if (password == null) {

    password="";

  }

  User user=(User)userList.get(name);

  boolean isLocal=user != null && user.isLocalOnly;

  if (extAuthenticationFunction == null || isLocal) {

    user=get(name);

    user.checkPassword(password);

    return user;

  }

  Result result=extAuthenticationFunction.invokeJavaMethodDirect(new String[]{granteeManager.database.getNameString(),name,password});

  if (result.isError()) {

    throw Error.error(ErrorCode.X_28501,result.getMainString());

  }

  Object[] roles=(Object[])result.getValueObject();

  if (user == null) {

    HsqlName hsqlName=granteeManager.database.nameManager.newHsqlName(name,true,SchemaObject.GRANTEE);

    user=createUser(null,hsqlName,"",false);

    user.isExternalOnly=true;

  }

  if (roles == null) {

    user.updateAllRights();

    return user;

  }

  user.clearPrivileges();

  for (int i=0; i < roles.length; i++) {

    try {

      Grantee role=granteeManager.getRole((String)roles[i]);

      user.grant(role);

    }

 catch (    HsqlException e) {

    }

  }

  user.updateAllRights();

  for (int i=0; i < roles.length; i++) {

    Schema schema=granteeManager.database.schemaManager.findSchema((String)roles[i]);

    if (schema != null) {

      user.setInitialSchema(schema.getName());

      break;

    }

  }

  return user;

}

Location: UserManager.java

Content: 

/** 

 * Returns the User object identified by the name argument.

 */

public User get(String name){

  User user=(User)userList.get(name);

  if (user == null) {

    throw Error.error(ErrorCode.X_28501,name);

  }

  return user;

}

Location: UserManager.java

Content: 

/** 

 * Retrieves the <code>User</code> objects representing the database users that are visible to the <code>User</code> object represented by the <code>session</code> argument. <p> If the <code>session</code> argument's <code>User</code> object attribute has isAdmin() true (directly or by virtue of a Role), then all of the <code>User</code> objects in this collection are considered visible. Otherwise, only this object's special <code>PUBLIC</code> <code>User</code> object attribute and the session <code>User</code> object, if it exists in this collection, are considered visible. <p>

 * @param session The <code>Session</code> object used to determinevisibility

 * @return a list of <code>User</code> objects visible tothe <code>User</code> object contained by the <code>session</code> argument.

 */

public HsqlArrayList listVisibleUsers(Session session){

  HsqlArrayList list;

  User user;

  boolean isAdmin;

  String sessionName;

  String userName;

  list=new HsqlArrayList();

  isAdmin=session.isAdmin();

  sessionName=session.getUsername();

  if (userList == null || userList.size() == 0) {

    return list;

  }

  for (int i=0; i < userList.size(); i++) {

    user=(User)userList.get(i);

    if (user == null) {

      continue;

    }

    userName=user.getName().getNameString();

    if (isAdmin) {

      list.add(user);

    }

 else     if (sessionName.equals(userName)) {

      list.add(user);

    }

  }

  return list;

}

Location: UserManager.java

Content: 

public synchronized void removeSchemaReference(String schemaName){

  for (int i=0; i < userList.size(); i++) {

    User user=(User)userList.get(i);

    HsqlName schema=user.getInitialSchema();

    if (schema == null) {

      continue;

    }

    if (schemaName.equals(schema.name)) {

      user.setInitialSchema(null);

    }

  }

}

Location: UserManager.java

Content: 

public void setExtAuthenticationFunction(Routine function){

  extAuthenticationFunction=function;

}

Location: UserManager.java

Content: 

public void setPasswordCheckFunction(Routine function){

  pwCheckFunction=function;

}

Location: UserManager.java

Content: 

public void setPassword(Session session,User user,String password,boolean isDigest){

  if (!isDigest && !checkComplexity(session,password)) {

    throw Error.error(ErrorCode.PASSWORD_COMPLEXITY);

  }

  user.setPassword(password,isDigest);

}

Location: UserManager.java

Content: 

/** 

 * Construction happens once for each Database instance. Creates special users PUBLIC_USER_NAME and SYSTEM_AUTHORIZATION_NAME. Sets up association with the GranteeManager for this database.

 */

public UserManager(Database database){

  granteeManager=database.getGranteeManager();

  userList=new HashMappedList();

}

