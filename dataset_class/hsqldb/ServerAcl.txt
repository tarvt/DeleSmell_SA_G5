Location: ServerAcl.java

Content: 

/** 

 * @param uba Unsigned byte array

 * @return String

 */

public static String colonNotation(byte[] uba){

  if ((uba.length / 2) * 2 != uba.length) {

    throw new RuntimeException("At this time .colonNotation only handles even byte quantities");

  }

  StringBuffer sb=new StringBuffer();

  for (int i=0; i < uba.length; i+=2) {

    if (i > 0) {

      sb.append(':');

    }

    sb.append(Integer.toHexString((uba[i] & 0xff) * 256 + (uba[i + 1] & 0xff)));

  }

  return sb.toString();

}

Location: ServerAcl.java

Content: 

/** 

 * @param uba Unsigned byte array

 * @return String

 */

public static String dottedNotation(byte[] uba){

  StringBuffer sb=new StringBuffer();

  for (int i=0; i < uba.length; i++) {

    if (i > 0) {

      sb.append('.');

    }

    sb.append((int)uba[i] & 0xff);

  }

  return sb.toString();

}

Location: ServerAcl.java

Content: 

synchronized protected void ensureAclsUptodate(){

  if (lastLoadTime > aclFile.lastModified()) {

    return;

  }

  try {

    aclEntries=load();

    println("ACLs reloaded from file");

    return;

  }

 catch (  Exception e) {

    println("Failed to reload ACL file.  Retaining old ACLs.  " + e);

  }

}

Location: ServerAcl.java

Content: 

protected List load() throws IOException, AclFormatException {

  if (!aclFile.exists()) {

    throw new IOException("File '" + aclFile.getAbsolutePath() + "' is not present");

  }

  if (!aclFile.isFile()) {

    throw new IOException("'" + aclFile.getAbsolutePath() + "' is not a regular file");

  }

  if (!aclFile.canRead()) {

    throw new IOException("'" + aclFile.getAbsolutePath() + "' is not accessible");

  }

  String line;

  String ruleTypeString;

  StringTokenizer toker;

  String addrString, bitString=null;

  int slashIndex;

  int linenum=0;

  byte[] addr;

  boolean allow;

  int bits;

  BufferedReader br=new BufferedReader(new FileReader(aclFile));

  List newAcls=new ArrayList();

  try {

    while ((line=br.readLine()) != null) {

      linenum++;

      line=line.trim();

      if (line.length() < 1) {

        continue;

      }

      if (line.charAt(0) == '#') {

        continue;

      }

      toker=new StringTokenizer(line);

      try {

        if (toker.countTokens() != 2) {

          throw new InternalException();

        }

        ruleTypeString=toker.nextToken();

        addrString=toker.nextToken();

        slashIndex=addrString.indexOf('/');

        if (slashIndex > -1) {

          bitString=addrString.substring(slashIndex + 1);

          addrString=addrString.substring(0,slashIndex);

        }

        addr=InetAddress.getByName(addrString).getAddress();

        bits=(bitString == null) ? (addr.length * 8) : Integer.parseInt(bitString);

        if (ruleTypeString.equalsIgnoreCase("allow")) {

          allow=true;

        }

 else         if (ruleTypeString.equalsIgnoreCase("permit")) {

          allow=true;

        }

 else         if (ruleTypeString.equalsIgnoreCase("accept")) {

          allow=true;

        }

 else         if (ruleTypeString.equalsIgnoreCase("prohibit")) {

          allow=false;

        }

 else         if (ruleTypeString.equalsIgnoreCase("deny")) {

          allow=false;

        }

 else         if (ruleTypeString.equalsIgnoreCase("reject")) {

          allow=false;

        }

 else {

          throw new InternalException();

        }

      }

 catch (      NumberFormatException nfe) {

        throw new AclFormatException("Syntax error at ACL file '" + aclFile.getAbsolutePath() + "', line "+ linenum);

      }

catch (      InternalException ie) {

        throw new AclFormatException("Syntax error at ACL file '" + aclFile.getAbsolutePath() + "', line "+ linenum);

      }

      try {

        newAcls.add(new AclEntry(addr,bits,allow));

      }

 catch (      AclFormatException afe) {

        throw new AclFormatException("Syntax error at ACL file '" + aclFile.getAbsolutePath() + "', line "+ linenum+ ": "+ afe.toString());

      }

    }

  }

  finally {

    br.close();

  }

  newAcls.add(PROHIBIT_ALL_IPV4);

  newAcls.add(PROHIBIT_ALL_IPV6);

  lastLoadTime=new java.util.Date().getTime();

  return newAcls;

}

Location: ServerAcl.java

Content: 

/** 

 * @return true if access for the candidate address should be permitted,false if access should be denied.

 * @param addr byte[]

 */

public boolean permitAccess(byte[] addr){

  ensureAclsUptodate();

  for (int i=0; i < aclEntries.size(); i++) {

    if (((AclEntry)aclEntries.get(i)).matches(addr)) {

      AclEntry hit=(AclEntry)aclEntries.get(i);

      println("Addr '" + ServerAcl.dottedNotation(addr) + "' matched rule #"+ (i + 1)+ ":  "+ hit);

      return hit.allow;

    }

  }

  throw new RuntimeException("No rule matches address '" + ServerAcl.dottedNotation(addr) + "'");

}

Location: ServerAcl.java

Content: 

/** 

 * Uses system network libraries to resolve the given String to an IP addr, then determine whether this address is permitted or denied. Specified name may be a numerical-based String like "1.2.3.4", a constant known to the networking libraries, or a host name to be resolved by the systems name resolution system. If the given String can't be resolved to an IP addr, false is returned.

 * @see #permitAccess(byte[])

 * @param s String

 * @return boolean

 */

public boolean permitAccess(String s){

  try {

    return permitAccess(InetAddress.getByName(s).getAddress());

  }

 catch (  UnknownHostException uke) {

    println("'" + s + "' denied because failed to resolve to an addr");

    return false;

  }

}

Location: ServerAcl.java

Content: 

private void println(String s){

  if (pw == null) {

    return;

  }

  pw.println(s);

  pw.flush();

}

Location: ServerAcl.java

Content: 

public ServerAcl(File aclFile) throws IOException, AclFormatException {

  this.aclFile=aclFile;

  aclEntries=load();

}

Location: ServerAcl.java

Content: 

public void setPrintWriter(PrintWriter pw){

  this.pw=pw;

}

