Location: StatementDMQL.java

Content: 

private StringBuffer appendColumns(StringBuffer sb,int[] columnMap){

  if (columnMap == null || updateExpressions.length == 0) {

    return sb;

  }

  sb.append("COLUMNS=[");

  for (int i=0; i < columnMap.length; i++) {

    sb.append('\n').append(columnMap[i]).append(':').append(' ').append(targetTable.getColumn(columnMap[i]).getNameString());

  }

  for (int i=0; i < updateExpressions.length; i++) {

    sb.append('[').append(updateExpressions[i]).append(']');

  }

  sb.append(']');

  return sb;

}

Location: StatementDMQL.java

Content: 

private StringBuffer appendCondition(Session session,StringBuffer sb){

  return condition == null ? sb.append("CONDITION[]\n") : sb.append("CONDITION[").append(condition.describe(session,0)).append("]\n");

}

Location: StatementDMQL.java

Content: 

private StringBuffer appendMultiColumns(StringBuffer sb,int[] columnMap){

  if (columnMap == null || multiColumnValues == null) {

    return sb;

  }

  sb.append("COLUMNS=[");

  for (int j=0; j < multiColumnValues.length; j++) {

    for (int i=0; i < columnMap.length; i++) {

      sb.append('\n').append(columnMap[i]).append(':').append(' ').append(targetTable.getColumn(columnMap[i]).getName().name).append('[').append(multiColumnValues[j][i]).append(']');

    }

  }

  sb.append(']');

  return sb;

}

Location: StatementDMQL.java

Content: 

private StringBuffer appendParams(StringBuffer sb){

  sb.append("PARAMETERS=[");

  for (int i=0; i < parameters.length; i++) {

    sb.append('\n').append('@').append(i).append('[').append(parameters[i].describe(null,0)).append(']');

  }

  sb.append(']');

  return sb;

}

Location: StatementDMQL.java

Content: 

private StringBuffer appendSourceTable(StringBuffer sb){

  sb.append("SOURCE TABLE[").append(sourceTable.getName().name).append(']');

  return sb;

}

Location: StatementDMQL.java

Content: 

private StringBuffer appendSubqueries(Session session,StringBuffer sb,int blanks){

  sb.append("SUBQUERIES[");

  for (int i=0; i < subqueries.length; i++) {

    sb.append("\n[level=").append(subqueries[i].depth).append('\n');

    if (subqueries[i].queryExpression == null) {

      for (int j=0; j < blanks; j++) {

        sb.append(' ');

      }

      sb.append("value expression");

    }

 else {

      sb.append(subqueries[i].queryExpression.describe(session,blanks));

    }

    sb.append("]");

  }

  sb.append(']');

  return sb;

}

Location: StatementDMQL.java

Content: 

private StringBuffer appendTable(StringBuffer sb){

  sb.append("TABLE[").append(targetTable.getName().name).append(']');

  return sb;

}

Location: StatementDMQL.java

Content: 

/** 

 * Determines if the authorizations are adequate to execute the compiled object. Completion requires the list of all database objects in a compiled statement.

 */

void checkAccessRights(Session session){

  if (targetTable != null && !targetTable.isTemp()) {

    if (!session.isProcessingScript()) {

      targetTable.checkDataReadOnly();

    }

    Grantee owner=targetTable.getOwner();

    if (owner != null && owner.isSystem()) {

      if (!session.getUser().isSystem()) {

        throw Error.error(ErrorCode.X_42501,targetTable.getName().name);

      }

    }

    session.checkReadWrite();

  }

  if (session.isAdmin()) {

    return;

  }

  for (int i=0; i < sequences.length; i++) {

    session.getGrantee().checkAccess(sequences[i]);

  }

  for (int i=0; i < routines.length; i++) {

    if (routines[i].isLibraryRoutine()) {

      continue;

    }

    session.getGrantee().checkAccess(routines[i]);

  }

  for (int i=0; i < rangeVariables.length; i++) {

    RangeVariable range=rangeVariables[i];

    if (range.isViewSubquery) {

      continue;

    }

    if (range.rangeTable.getSchemaName() == SqlInvariants.SYSTEM_SCHEMA_HSQLNAME) {

      continue;

    }

    session.getGrantee().checkSelect(range.rangeTable,range.usedColumns);

  }

switch (type) {

case StatementTypes.CALL:

{

      break;

    }

case StatementTypes.INSERT:

{

    session.getGrantee().checkInsert(targetTable,insertCheckColumns);

    break;

  }

case StatementTypes.SELECT_CURSOR:

break;

case StatementTypes.DELETE_WHERE:

{

session.getGrantee().checkDelete(targetTable);

break;

}

case StatementTypes.UPDATE_WHERE:

{

session.getGrantee().checkUpdate(targetTable,updateCheckColumns);

break;

}

case StatementTypes.MERGE:

{

session.getGrantee().checkInsert(targetTable,insertCheckColumns);

session.getGrantee().checkUpdate(targetTable,updateCheckColumns);

break;

}

}

}

Location: StatementDMQL.java

Content: 

/** 

 * Provides the toString() implementation.

 */

String describeImpl(Session session) throws Exception {

  StringBuffer sb;

  sb=new StringBuffer();

  int blanks=0;

switch (type) {

case StatementTypes.SELECT_CURSOR:

{

      sb.append(queryExpression.describe(session,0));

      appendParams(sb).append('\n');

      appendSubqueries(session,sb,2);

      return sb.toString();

    }

case StatementTypes.INSERT:

{

    if (queryExpression == null) {

      sb.append("INSERT VALUES");

      sb.append('[').append('\n');

      appendMultiColumns(sb,insertColumnMap).append('\n');

      appendTable(sb).append('\n');

      appendParams(sb).append('\n');

      appendSubqueries(session,sb,2).append(']');

      return sb.toString();

    }

 else {

      sb.append("INSERT SELECT");

      sb.append('[').append('\n');

      appendColumns(sb,insertColumnMap).append('\n');

      appendTable(sb).append('\n');

      sb.append(queryExpression.describe(session,blanks)).append('\n');

      appendParams(sb).append('\n');

      appendSubqueries(session,sb,2).append(']');

      return sb.toString();

    }

  }

case StatementTypes.UPDATE_WHERE:

{

  sb.append("UPDATE");

  sb.append('[').append('\n');

  appendColumns(sb,updateColumnMap).append('\n');

  appendTable(sb).append('\n');

  appendCondition(session,sb);

  for (int i=0; i < targetRangeVariables.length; i++) {

    sb.append(targetRangeVariables[i].describe(session,blanks)).append('\n');

  }

  appendParams(sb).append('\n');

  appendSubqueries(session,sb,2).append(']');

  return sb.toString();

}

case StatementTypes.DELETE_WHERE:

{

sb.append("DELETE");

sb.append('[').append('\n');

appendTable(sb).append('\n');

appendCondition(session,sb);

for (int i=0; i < targetRangeVariables.length; i++) {

  sb.append(targetRangeVariables[i].describe(session,blanks)).append('\n');

}

appendParams(sb).append('\n');

appendSubqueries(session,sb,2).append(']');

return sb.toString();

}

case StatementTypes.CALL:

{

sb.append("CALL");

sb.append('[').append(']');

return sb.toString();

}

case StatementTypes.MERGE:

{

sb.append("MERGE");

sb.append('[').append('\n');

appendMultiColumns(sb,insertColumnMap).append('\n');

appendColumns(sb,updateColumnMap).append('\n');

appendTable(sb).append('\n');

appendCondition(session,sb);

for (int i=0; i < targetRangeVariables.length; i++) {

sb.append(targetRangeVariables[i].describe(session,blanks)).append('\n');

}

appendParams(sb).append('\n');

appendSubqueries(session,sb,2).append(']');

return sb.toString();

}

default :

{

return "UNKNOWN";

}

}

}

Location: StatementDMQL.java

Content: 

private Result getExplainResult(Session session){

  Result result=Result.newSingleColumnStringResult("OPERATION",describe(session));

  OrderedHashSet set=getReferences();

  result.navigator.add(new Object[]{"Object References"});

  for (int i=0; i < set.size(); i++) {

    HsqlName name=(HsqlName)set.get(i);

    result.navigator.add(new Object[]{name.getSchemaQualifiedStatementName()});

  }

  result.navigator.add(new Object[]{"Read Locks"});

  for (int i=0; i < readTableNames.length; i++) {

    HsqlName name=readTableNames[i];

    result.navigator.add(new Object[]{name.getSchemaQualifiedStatementName()});

  }

  result.navigator.add(new Object[]{"WriteLocks"});

  for (int i=0; i < writeTableNames.length; i++) {

    HsqlName name=writeTableNames[i];

    result.navigator.add(new Object[]{name.getSchemaQualifiedStatementName()});

  }

  return result;

}

Location: StatementDMQL.java

Content: 

boolean[] getInsertOrUpdateColumnCheckList(){

switch (type) {

case StatementTypes.INSERT:

    return insertCheckColumns;

case StatementTypes.UPDATE_WHERE:

  return updateCheckColumns;

case StatementTypes.MERGE:

boolean[] check=(boolean[])ArrayUtil.duplicateArray(insertCheckColumns);

ArrayUtil.orBooleanArray(updateCheckColumns,check);

return check;

}

return null;

}

Location: StatementDMQL.java

Content: 

Result getWriteAccessResult(Session session){

  try {

    if (targetTable != null && !targetTable.isTemp()) {

      session.checkReadWrite();

    }

  }

 catch (  HsqlException e) {

    return Result.newErrorResult(e);

  }

  return null;

}

Location: StatementDMQL.java

Content: 

void materializeSubQueries(Session session){

  HashSet subqueryPopFlags=new HashSet();

  for (int i=0; i < subqueries.length; i++) {

    TableDerived td=subqueries[i];

    if (!subqueryPopFlags.add(td)) {

      continue;

    }

    if (!td.isCorrelated()) {

      td.materialise(session);

    }

  }

}

Location: StatementDMQL.java

Content: 

void setBaseIndexColumnMap(){

  if (targetTable != baseTable) {

    baseColumnMap=targetTable.getBaseTableColumnMap();

  }

}

Location: StatementDMQL.java

Content: 

void setDatabaseObjects(Session session,CompileContext compileContext){

  parameters=compileContext.getParameters();

  setParameterMetaData();

  subqueries=getSubqueries(session);

  rangeIteratorCount=compileContext.getRangeVarCount();

  rangeVariables=compileContext.getAllRangeVariables();

  sequences=compileContext.getSequences();

  routines=compileContext.getRoutines();

  OrderedHashSet set=new OrderedHashSet();

  collectTableNamesForWrite(set);

  if (set.size() > 0) {

    writeTableNames=new HsqlName[set.size()];

    set.toArray(writeTableNames);

    set.clear();

  }

  collectTableNamesForRead(set);

  set.removeAll(writeTableNames);

  if (set.size() > 0) {

    readTableNames=new HsqlName[set.size()];

    set.toArray(readTableNames);

  }

  if (readTableNames.length == 0 && writeTableNames.length == 0) {

    if (type == StatementTypes.SELECT_CURSOR || type == StatementTypes.SELECT_SINGLE) {

      isTransactionStatement=false;

    }

  }

  references=compileContext.getSchemaObjectNames();

  if (targetTable != null) {

    references.add(targetTable.getName());

    if (targetTable == baseTable) {

      if (insertCheckColumns != null) {

        targetTable.getColumnNames(insertCheckColumns,references);

      }

      if (updateCheckColumns != null) {

        targetTable.getColumnNames(updateCheckColumns,references);

      }

    }

  }

}

Location: StatementDMQL.java

Content: 

StatementDMQL(int type,int group,HsqlName schemaName){

  super(type,group);

  this.schemaName=schemaName;

  this.isTransactionStatement=true;

}

