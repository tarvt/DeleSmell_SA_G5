Location: TestTriggers.java

Content: 

void checkCallCount(int count){

  assertEquals("trigger call mismatch",count,TriggerClass.callCount);

}

Location: TestTriggers.java

Content: 

void checkCalls(int trigType,int callCount){

  assertEquals("call count mismatch",TriggerClass.callCounts[trigType],callCount);

}

Location: TestTriggers.java

Content: 

void clearCalls(){

  TriggerClass.callCount=0;

  ArrayUtil.fillArray(TriggerClass.callCounts,0);

}

Location: TestTriggers.java

Content: 

private void openConnection() throws SQLException {

  conn=newConnection();

}

Location: TestTriggers.java

Content: 

private void runScript(){

  TestUtil.testScript(conn,"testrun/hsqldb/TestTriggers.txt");

}

Location: TestTriggers.java

Content: 

public void testTriggerAction(){

  runScript();

  try {

    hongshuai();

    Statement st=conn.createStatement();

    st.execute("delete from testtrig");

    st.execute("alter table testtrig alter column c1 restart with 0");

    clearCalls();

    st.execute("insert into testtrig values (default, 'inserted val 1', 100)");

    checkCallCount(3);

    checkCalls(Trigger.INSERT_AFTER,1);

    checkCalls(Trigger.INSERT_BEFORE_ROW,1);

    checkCalls(Trigger.INSERT_AFTER_ROW,1);

    clearCalls();

    st.execute("insert into testtrig (c2, c3) select c2, c3 from testtrig where c1 < 0");

    checkCallCount(1);

    checkCalls(Trigger.INSERT_AFTER,1);

    checkCalls(Trigger.INSERT_BEFORE_ROW,0);

    checkCalls(Trigger.INSERT_AFTER_ROW,0);

    clearCalls();

    st.execute("update testtrig set c2 = c2 || ' updated' where c1 = 0");

    checkCallCount(3);

    checkCalls(Trigger.UPDATE_AFTER,1);

    checkCalls(Trigger.UPDATE_BEFORE_ROW,1);

    checkCalls(Trigger.UPDATE_AFTER_ROW,1);

    clearCalls();

    st.execute("update testtrig set c2 = c2 || ' updated' where c1 < 0");

    checkCallCount(1);

    checkCalls(Trigger.UPDATE_AFTER,1);

    checkCalls(Trigger.UPDATE_BEFORE_ROW,0);

    checkCalls(Trigger.UPDATE_AFTER_ROW,0);

    clearCalls();

    st.execute("update testtrig set c2 = null where c1 = 0");

    checkCallCount(1);

    checkCalls(Trigger.UPDATE_AFTER,1);

    checkCalls(Trigger.UPDATE_BEFORE_ROW,0);

    checkCalls(Trigger.UPDATE_AFTER_ROW,0);

    st.close();

  }

 catch (  SQLException e) {

    e.printStackTrace();

    assertTrue(false);

  }

  try {

    hongshuai();

    Statement st=conn.createStatement();

    st.execute("shutdown");

    st.close();

  }

 catch (  SQLException e) {

    e.printStackTrace();

    assertTrue(false);

  }

  try {

    openConnection();

  }

 catch (  SQLException e) {

    e.printStackTrace();

    assertTrue(false);

  }

  try {

    hongshuai();

    Statement st=conn.createStatement();

    st.execute("delete from testtrig");

    st.execute("alter table testtrig alter column c1 restart with 0");

    clearCalls();

    st.execute("insert into testtrig values (default, 'inserted val 1', 100)");

    checkCallCount(3);

    checkCalls(Trigger.INSERT_AFTER,1);

    checkCalls(Trigger.INSERT_BEFORE_ROW,1);

    checkCalls(Trigger.INSERT_AFTER_ROW,1);

    clearCalls();

    st.execute("insert into testtrig (c2, c3) select c2, c3 from testtrig where c1 < 0");

    checkCallCount(1);

    checkCalls(Trigger.INSERT_AFTER,1);

    checkCalls(Trigger.INSERT_BEFORE_ROW,0);

    checkCalls(Trigger.INSERT_AFTER_ROW,0);

    clearCalls();

    st.execute("update testtrig set c2 = c2 || ' updated' where c1 = 0");

    checkCallCount(3);

    checkCalls(Trigger.UPDATE_AFTER,1);

    checkCalls(Trigger.UPDATE_BEFORE_ROW,1);

    checkCalls(Trigger.UPDATE_AFTER_ROW,1);

    clearCalls();

    st.execute("update testtrig set c2 = c2 || ' updated' where c1 < 0");

    checkCallCount(1);

    checkCalls(Trigger.UPDATE_AFTER,1);

    checkCalls(Trigger.UPDATE_BEFORE_ROW,0);

    checkCalls(Trigger.UPDATE_AFTER_ROW,0);

    clearCalls();

    st.execute("update testtrig set c2 = null where c1 = 0");

    checkCallCount(1);

    checkCalls(Trigger.UPDATE_AFTER,1);

    checkCalls(Trigger.UPDATE_BEFORE_ROW,0);

    checkCalls(Trigger.UPDATE_AFTER_ROW,0);

    st.close();

  }

 catch (  SQLException e) {

    e.printStackTrace();

    assertTrue(false);

  }

}

Location: TestTriggers.java

Content: 

public TestTriggers(String testName){

  super(testName,"jdbc:hsqldb:file:" + dbPath,false,false);

  TestUtil.deleteDatabase(dbPath);

}

