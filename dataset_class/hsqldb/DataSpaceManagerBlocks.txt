Location: DataSpaceManagerBlocks.java

Content: 

private long calculateDirectorySpaceBlocks(long blockCount){

  long currentSize=calculateDirectorySpaceSize(blockCount);

  long currentBlocks=currentSize / fileBlockSize + 1;

  currentSize+=calculateDirectorySpaceSize(currentBlocks);

  currentBlocks=currentSize / fileBlockSize + 1;

  return currentBlocks;

}

Location: DataSpaceManagerBlocks.java

Content: 

private long calculateDirectorySpaceSize(long blockCount){

  long blockLimit=ArrayUtil.getBinaryMultipleCeiling(blockCount + 1,dirBlockSize);

  long currentSize=IntArrayCachedObject.fileSizeFactor * blockLimit;

  currentSize+=DirectoryBlockCachedObject.fileSizeFactor * blockLimit;

  currentSize+=bitmapStorageSize * (blockCount + 1);

  return currentSize;

}

Location: DataSpaceManagerBlocks.java

Content: 

/** 

 * return keys are file block indexes, values are space ids

 */

DoubleIntIndex checkDirectoryBitmaps(DirectoryBlockCachedObject mismatch){

  DirectoryBlockCachedObject[] directoryList=getDirectoryList();

  DoubleIntIndex offspaceBitmaps=new DoubleIntIndex(8,false);

  offspaceBitmaps.setKeysSearchTarget();

  int mismatchCount=0;

  for (int i=0; i < directoryList.length; i++) {

    DirectoryBlockCachedObject dir=directoryList[i];

    int[] bitMapAddress=dir.getBitmapAddressArray();

    for (int j=0; j < bitMapAddress.length; j++) {

      int blockPos=dir.getBitmapAddress(j);

      if (blockPos == 0) {

        break;

      }

      long position=blockPos * (DataSpaceManager.fixedBlockSizeUnit / dataFileScale);

      int spaceId=findTableSpace(position);

      int blockIndex=i * dirBlockSize + j;

      BitMapCachedObject currentBitMap=(BitMapCachedObject)bitMapStore.get(position,false);

      spaceId=dir.getTableId(j);

      int freeUnits=currentBitMap.bitMap.countSetBits();

      int freeBlockUnits=currentBitMap.bitMap.countSetBitsEnd();

      if (dir.getFreeSpace(j) != freeUnits || dir.getFreeBlock(j) != freeBlockUnits) {

        offspaceBitmaps.add(blockIndex,spaceId);

        mismatch.setTableId(mismatchCount,spaceId);

        mismatch.setFreeSpace(mismatchCount,(char)freeUnits);

        mismatch.setFreeBlock(mismatchCount,(char)freeBlockUnits);

        mismatchCount++;

        if (mismatchCount == mismatch.getTableIdArray().length) {

          break;

        }

      }

    }

  }

  return offspaceBitmaps;

}

Location: DataSpaceManagerBlocks.java

Content: 

/** 

 * return keys are file block indexes, values are bad (off) space ids or tableIdDirectory when two bitmpas have the same pointer

 */

DoubleIntIndex checkDirectorySpaces(){

  DirectoryBlockCachedObject[] directoryList=getDirectoryList();

  DoubleIntIndex offspaceBitmaps=new DoubleIntIndex(8,false);

  offspaceBitmaps.setKeysSearchTarget();

  DoubleIntIndex positionBitmaps=new DoubleIntIndex(8,false);

  positionBitmaps.setKeysSearchTarget();

  for (int i=0; i < directoryList.length; i++) {

    DirectoryBlockCachedObject dir=directoryList[i];

    long position=dir.getPos();

    int spaceId=findTableSpace(position);

    int blockIndex=i;

    int blockPos=rootBlock.getValue(blockIndex);

    boolean result;

    int count=dir.getStorageSize() / DataSpaceManager.fixedBlockSizeUnit;

    for (int j=0; j < count; j++) {

      result=positionBitmaps.addUnique(blockPos,blockIndex);

    }

    int[] bitMapAddress=dir.getBitmapAddressArray();

    for (int j=0; j < bitMapAddress.length; j++) {

      blockPos=dir.getBitmapAddress(j);

      if (blockPos == 0) {

        break;

      }

      position=blockPos * (DataSpaceManager.fixedBlockSizeUnit / dataFileScale);

      spaceId=findTableSpace(position);

      blockIndex=i * dirBlockSize + j;

      if (spaceId != DataSpaceManager.tableIdDirectory) {

        offspaceBitmaps.add(blockIndex,spaceId);

      }

 else {

        result=positionBitmaps.addUnique(blockPos,blockIndex);

        if (!result) {

          offspaceBitmaps.add(blockIndex,spaceId);

          int offset=positionBitmaps.findFirstEqualKeyIndex(blockPos);

          blockIndex=positionBitmaps.getValue(offset);

          offspaceBitmaps.add(blockIndex,spaceId);

        }

      }

    }

  }

  return offspaceBitmaps;

}

Location: DataSpaceManagerBlocks.java

Content: 

private void createDirectory(int fileBlockIndex){

  DirectoryBlockCachedObject directory;

  directory=new DirectoryBlockCachedObject(dirBlockSize);

  directoryStore.add(directory,false);

  int indexInRoot=fileBlockIndex / dirBlockSize;

  int blockPosition=(int)(directory.getPos() * dataFileScale / DataSpaceManager.fixedBlockSizeUnit);

  rootBlock.setValue(indexInRoot,blockPosition);

}

Location: DataSpaceManagerBlocks.java

Content: 

private void createFileBlockInDirectory(int fileBlockIndex,int tableId){

  BitMapCachedObject bitMap=new BitMapCachedObject(bitmapIntSize);

  bitMapStore.add(bitMap,false);

  int bitmapBlockPos=(int)(bitMap.getPos() * dataFileScale / DataSpaceManager.fixedBlockSizeUnit);

  int blockOffset=fileBlockIndex % dirBlockSize;

  DirectoryBlockCachedObject directory=getDirectory(fileBlockIndex,true);

  if (directory == null) {

    createDirectory(fileBlockIndex);

    directory=getDirectory(fileBlockIndex,true);

  }

  directory.setTableId(blockOffset,tableId);

  directory.setBitmapAddress(blockOffset,bitmapBlockPos);

  directory.keepInMemory(false);

}

Location: DataSpaceManagerBlocks.java

Content: 

private void createFileBlocksInDirectory(int fileBlockIndex,int blockCount,int tableId){

  for (int i=0; i < blockCount; i++) {

    createFileBlockInDirectory(fileBlockIndex + i,tableId);

  }

}

Location: DataSpaceManagerBlocks.java

Content: 

public DataSpaceManagerBlocks(DataFileCache dataFileCache){

  int bitmapStoreSizeTemp;

  cache=dataFileCache;

  dataFileScale=cache.getDataFileScale();

  fileBlockSize=cache.database.logger.getDataFileSpaces() * 1024 * 1024;

  fileBlockItemCount=fileBlockSize / dataFileScale;

  bitmapIntSize=fileBlockItemCount / Integer.SIZE;

  bitmapStoreSizeTemp=BitMapCachedObject.fileSizeFactor * bitmapIntSize;

  if (bitmapStoreSizeTemp < DataSpaceManager.fixedBlockSizeUnit) {

    bitmapStoreSizeTemp=DataSpaceManager.fixedBlockSizeUnit;

  }

  bitmapStorageSize=bitmapStoreSizeTemp;

  ba=new BlockAccessor();

  spaceManagerList=new IntKeyHashMap();

  emptySpaceList=new IntIndex(32,false);

  directorySpaceManager=new TableSpaceManagerBlocks(this,tableIdDirectory,fileBlockSize,16,dataFileScale,0);

  defaultSpaceManager=new TableSpaceManagerBlocks(this,tableIdDefault,fileBlockSize,cache.database.logger.propMaxFreeBlocks,dataFileScale,cache.database.logger.propMinReuse);

  spaceManagerList.put(tableIdDirectory,directorySpaceManager);

  spaceManagerList.put(tableIdDefault,defaultSpaceManager);

  rootStore=getRootStore();

  directoryStore=getDirectoryStore(false);

  bitMapStore=getBitMapStore();

  if (cache.spaceManagerPosition == 0) {

    hongshuai();

    long currentSize=cache.getFileFreePos();

    long totalBlocks=(currentSize / fileBlockSize) + 1;

    long lastFreePosition=cache.enlargeFileSpace(totalBlocks * fileBlockSize - currentSize);

    defaultSpaceManager.initialiseFileBlock(null,lastFreePosition,cache.getFileFreePos());

    long defaultSpaceBlockCount=totalBlocks;

    long directorySpaceBlockCount=calculateDirectorySpaceBlocks(totalBlocks);

    lastFreePosition=cache.enlargeFileSpace(directorySpaceBlockCount * fileBlockSize);

    directorySpaceManager.initialiseFileBlock(null,lastFreePosition,cache.getFileFreePos());

    IntArrayCachedObject root=new IntArrayCachedObject(dirBlockSize);

    rootStore.add(root,true);

    rootBlock=root;

    createFileBlocksInDirectory((int)defaultSpaceBlockCount,(int)directorySpaceBlockCount,tableIdDirectory);

    createFileBlocksInDirectory(0,(int)defaultSpaceBlockCount,tableIdDefault);

    cache.spaceManagerPosition=rootBlock.getPos() * dataFileScale;

  }

 else {

    long pos=cache.spaceManagerPosition / dataFileScale;

    rootBlock=(IntArrayCachedObject)rootStore.get(pos,true);

    if (getBlockIndexLimit() == 0) {

      throw Error.error(ErrorCode.FILE_IO_ERROR);

    }

    if (cache.isDataReadOnly()) {

      return;

    }

    initialiseSpaceList();

    initialiseTableSpace(directorySpaceManager);

    initialiseTableSpace(defaultSpaceManager);

  }

}

Location: DataSpaceManagerBlocks.java

Content: 

/** 

 * The space for a new directory block must be added to the directorySpaceManager before createFileBlocksInDirectory is called, otherwise there is no space to create the bit-map

 */

private void ensureDirectorySpaceAvailable(int blockCount){

  int dirObjectSize=bitmapStorageSize * blockCount;

  dirObjectSize+=DirectoryBlockCachedObject.fileSizeFactor * dirBlockSize;

  boolean hasRoom=directorySpaceManager.hasFileRoom(dirObjectSize);

  if (!hasRoom) {

    long cacheFreePos;

    int index=getBlockIndexLimit();

    int dirBlockCount=dirObjectSize / fileBlockSize + 1;

    long filePosition=cache.enlargeFileSpace((long)dirBlockCount * fileBlockSize);

    directorySpaceManager.addFileBlock(filePosition,filePosition + (long)dirBlockCount * fileBlockSize);

    createFileBlocksInDirectory(index,dirBlockCount,tableIdDirectory);

    cacheFreePos=cache.getFileFreePos();

    index=getBlockIndexLimit();

    if ((long)index * fileBlockSize != cacheFreePos) {

      cache.logSevereEvent("space manager end file pos different from data file: " + (index * fileBlockSize) + ", "+ cacheFreePos,null);

    }

  }

}

Location: DataSpaceManagerBlocks.java

Content: 

private int findLargestFreeSpace(int spaceId){

  int maxFree=0;

  int blockIndex=-1;

  ba.initialise(false);

  try {

    for (; ba.nextBlockForTable(spaceId); ) {

      int currentFree=ba.getFreeBlockValue();

      if (currentFree > maxFree) {

        blockIndex=ba.currentBlockIndex;

        maxFree=currentFree;

      }

    }

    return blockIndex;

  }

  finally {

    ba.reset();

  }

}

Location: DataSpaceManagerBlocks.java

Content: 

/** 

 * Returns space id returns - 1 if pointer is beyond the last allocated block

 */

int findTableSpace(long position){

  int blockIndex=(int)(position / fileBlockItemCount);

  cache.writeLock.lock();

  try {

    ba.initialise(false);

    try {

      boolean result=ba.moveToBlock(blockIndex);

      if (!result) {

        return -1;

      }

      int id=ba.getTableId();

      return id;

    }

  finally {

      ba.reset();

    }

  }

  finally {

    cache.writeLock.unlock();

  }

}

Location: DataSpaceManagerBlocks.java

Content: 

private void freeTableSpacePart(long position,int units){

  for (; units > 0; ) {

    int blockIndex=(int)(position / fileBlockItemCount);

    int offset=(int)(position % fileBlockItemCount);

    int currentUnits=fileBlockItemCount - offset;

    if (currentUnits > units) {

      currentUnits=units;

    }

    boolean result=ba.moveToBlock(blockIndex);

    if (result) {

      int setCount=ba.setRange(offset,currentUnits);

      if (setCount != currentUnits) {

        ba.unsetRange(offset,currentUnits);

        String s="space manager error - recovered (block, offset, units) : (" + blockIndex + ","+ offset+ ","+ units+ ")";

        cache.logSevereEvent(s,null);

      }

    }

 else {

      String s="space manager error - recovered (block, offset, units) : (" + blockIndex + ","+ offset+ ","+ units+ ")";

      cache.logSevereEvent(s,null);

    }

    units-=currentUnits;

    position+=currentUnits;

  }

}

Location: DataSpaceManagerBlocks.java

Content: 

BlockObjectStore getBitMapStore(){

  return new BlockObjectStore(cache,directorySpaceManager,BitMapCachedObject.class,bitmapStorageSize,bitmapIntSize);

}

Location: DataSpaceManagerBlocks.java

Content: 

private int getBlockIndexLimit(){

  int indexInRoot=rootBlock.getNonZeroSize();

  if (indexInRoot == 0) {

    return 0;

  }

  indexInRoot--;

  int directoryBlockOffset=getDirectoryIndexLimit(indexInRoot);

  return indexInRoot * dirBlockSize + directoryBlockOffset;

}

Location: DataSpaceManagerBlocks.java

Content: 

private DirectoryBlockCachedObject getDirectoryByIndex(int indexInRoot,boolean keep){

  long position=rootBlock.getValue(indexInRoot);

  DirectoryBlockCachedObject directory;

  if (position == 0) {

    return null;

  }

  position*=(DataSpaceManager.fixedBlockSizeUnit / dataFileScale);

  directory=(DirectoryBlockCachedObject)directoryStore.get(position,keep);

  return directory;

}

Location: DataSpaceManagerBlocks.java

Content: 

private int getDirectoryIndexLimit(int indexInRoot){

  DirectoryBlockCachedObject directory=getDirectoryByIndex(indexInRoot,false);

  int[] bitmapArray=directory.getBitmapAddressArray();

  int index=0;

  for (; index < bitmapArray.length; index++) {

    if (bitmapArray[index] == 0) {

      break;

    }

  }

  return index;

}

Location: DataSpaceManagerBlocks.java

Content: 

BlockObjectStore getDirectoryStore(boolean force240){

  return new BlockObjectStore(cache,directorySpaceManager,DirectoryBlockCachedObject.class,DirectoryBlockCachedObject.fileSizeFactor * dirBlockSize,dirBlockSize);

}

Location: DataSpaceManagerBlocks.java

Content: 

private DirectoryBlockCachedObject getDirectory(int fileBlockIndex,boolean keep){

  int indexInRoot=fileBlockIndex / dirBlockSize;

  return getDirectoryByIndex(indexInRoot,keep);

}

Location: DataSpaceManagerBlocks.java

Content: 

private int getExistingBlockIndex(int tableId,int blockCount){

  int blockIndex=emptySpaceList.removeFirstConsecutiveKeys(blockCount,-1);

  if (blockIndex > 0) {

    setDirectoryBlocksAsTable(tableId,blockIndex,blockCount);

  }

  return blockIndex;

}

Location: DataSpaceManagerBlocks.java

Content: 

private long getNewFileBlocksNoCheck(int tableId,int blockCount){

  long index=getBlockIndexLimit();

  long filePosition=index * fileBlockSize;

  long delta=filePosition + ((long)blockCount * fileBlockSize) - cache.getFileFreePos();

  if (delta > 0) {

    cache.enlargeFileSpace(delta);

  }

  createFileBlocksInDirectory((int)index,blockCount,tableId);

  return filePosition;

}

Location: DataSpaceManagerBlocks.java

Content: 

private long getNewFileBlocks(int tableId,int blockCount){

  ensureDirectorySpaceAvailable(blockCount);

  return getNewFileBlocksNoCheck(tableId,blockCount);

}

Location: DataSpaceManagerBlocks.java

Content: 

BlockObjectStore getRootStore(){

  return new BlockObjectStore(cache,directorySpaceManager,IntArrayCachedObject.class,IntArrayCachedObject.fileSizeFactor * dirBlockSize,dirBlockSize);

}

Location: DataSpaceManagerBlocks.java

Content: 

private boolean hasFreeSpace(int spaceId,int blockIndex){

  ba.initialise(false);

  try {

    boolean result=ba.moveToBlock(blockIndex);

    if (result) {

      if (ba.getTableId() == spaceId) {

        if (ba.getFreeBlockValue() > 0) {

          return true;

        }

      }

    }

    return false;

  }

  finally {

    ba.reset();

  }

}

Location: DataSpaceManagerBlocks.java

Content: 

private void initialiseSpaceList(){

  int maxId=tableIdDefault;

  OrderedIntHashSet list=new OrderedIntHashSet();

  ba.initialise(false);

  try {

    for (; ; ) {

      boolean result=ba.nextBlock();

      if (!result) {

        break;

      }

      int currentId=ba.getTableId();

      if (currentId > maxId) {

        maxId=currentId;

      }

      if (currentId == tableIdEmpty) {

        int freeItems=ba.getFreeSpaceValue();

        int freeItemsEnd=ba.getFreeBlockValue();

        if (freeItems == 0 && freeItemsEnd == 0) {

          emptySpaceList.addUnique(ba.currentBlockIndex);

        }

 else {

          list.add(ba.currentBlockIndex);

        }

      }

    }

  }

  finally {

    ba.reset();

  }

  spaceIdSequence.set((maxId + 2) & -2);

  if (list.size() > 0) {

    setAsideBlocks(list);

    String s="space manager error - recovered (freeItems in empty blocks) : (" + list.size() + ")";

    cache.logSevereEvent(s,null);

  }

}

Location: DataSpaceManagerBlocks.java

Content: 

private void initialiseTableSpace(TableSpaceManagerBlocks tableSpace){

  int spaceId=tableSpace.getSpaceID();

  int blockIndex=-1;

  int lastBlockIndex=tableSpace.getFileBlockIndex();

  if (lastBlockIndex >= 0) {

    if (hasFreeSpace(spaceId,lastBlockIndex)) {

      blockIndex=lastBlockIndex;

    }

  }

  if (blockIndex < 0) {

    blockIndex=findLargestFreeSpace(spaceId);

  }

  if (blockIndex < 0) {

    return;

  }

  initialiseTableSpace(tableSpace,blockIndex);

}

Location: DataSpaceManagerBlocks.java

Content: 

private void initialiseTableSpace(TableSpaceManagerBlocks tableSpace,int blockIndex){

  ba.initialise(true);

  try {

    ba.moveToBlock(blockIndex);

    int freeItems=ba.getFreeBlockValue();

    long blockPos=(long)blockIndex * fileBlockSize;

    int unsetCount=ba.unsetRange(fileBlockItemCount - freeItems,freeItems);

    if (unsetCount == freeItems) {

      tableSpace.initialiseFileBlock(null,blockPos + (fileBlockSize - freeItems * dataFileScale),blockPos + fileBlockSize);

    }

 else {

      cache.logSevereEvent("space manager error - recovered",null);

    }

  }

  finally {

    ba.reset();

  }

}

Location: DataSpaceManagerBlocks.java

Content: 

void setAsideBlocks(OrderedIntHashSet blocks){

  cache.writeLock.lock();

  try {

    ba.initialise(true);

    try {

      for (int i=0; i < blocks.size(); i++) {

        int block=blocks.get(i);

        boolean result=ba.moveToBlock(block);

        if (result) {

          ba.setTable(DataSpaceManager.tableIdSetAside);

        }

      }

    }

  finally {

      ba.reset();

    }

  }

  finally {

    cache.writeLock.unlock();

  }

}

Location: DataSpaceManagerBlocks.java

Content: 

/** 

 * index and blockCount always valid

 */

private void setDirectoryBlocksAsTable(int tableId,int blockIndex,int blockCount){

  int directoryIndex=-1;

  DirectoryBlockCachedObject directory=null;

  for (int i=blockIndex; i < blockIndex + blockCount; i++) {

    if (directoryIndex != i / dirBlockSize) {

      if (directory != null) {

        directory.keepInMemory(false);

      }

      directory=getDirectory(i,true);

      directoryIndex=i / dirBlockSize;

    }

    int offset=i % dirBlockSize;

    directory.setTableId(offset,tableId);

  }

  directory.keepInMemory(false);

}

