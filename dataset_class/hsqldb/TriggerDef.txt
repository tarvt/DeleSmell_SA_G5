Location: TriggerDef.java

Content: 

public String getActionOrientationString(){

  return forEachRow ? Tokens.T_ROW : Tokens.T_STATEMENT;

}

Location: TriggerDef.java

Content: 

public String getActionTimingString(){

switch (this.actionTiming) {

case TriggerDef.BEFORE:

    return Tokens.T_BEFORE;

case TriggerDef.AFTER:

  return Tokens.T_AFTER;

case TriggerDef.INSTEAD:

return Tokens.T_INSTEAD + ' ' + Tokens.T_OF;

default :

throw Error.runtimeError(ErrorCode.U_S0500,"TriggerDef");

}

}

Location: TriggerDef.java

Content: 

public String getClassName(){

  return trigger.getClass().getName();

}

Location: TriggerDef.java

Content: 

public String getConditionSQL(){

  return conditionSQL;

}

Location: TriggerDef.java

Content: 

public String getEventTypeString(){

switch (this.operationType) {

case StatementTypes.INSERT:

    return Tokens.T_INSERT;

case StatementTypes.DELETE_WHERE:

  return Tokens.T_DELETE;

case StatementTypes.UPDATE_WHERE:

return Tokens.T_UPDATE;

default :

throw Error.runtimeError(ErrorCode.U_S0500,"TriggerDef");

}

}

Location: TriggerDef.java

Content: 

public String getNewTransitionRowName(){

  return rangeVars[NEW_ROW] == null ? null : rangeVars[NEW_ROW].getTableAlias().name;

}

Location: TriggerDef.java

Content: 

public String getNewTransitionTableName(){

  return transitions[NEW_TABLE] == null ? null : transitions[NEW_TABLE].getName().name;

}

Location: TriggerDef.java

Content: 

public String getOldTransitionRowName(){

  return rangeVars[OLD_ROW] == null ? null : rangeVars[OLD_ROW].getTableAlias().name;

}

Location: TriggerDef.java

Content: 

public String getOldTransitionTableName(){

  return transitions[OLD_TABLE] == null ? null : transitions[OLD_TABLE].getName().name;

}

Location: TriggerDef.java

Content: 

/** 

 * Return the type code for operation tokens

 */

static int getOperationType(int token){

switch (token) {

case Tokens.INSERT:

    return StatementTypes.INSERT;

case Tokens.DELETE:

  return StatementTypes.DELETE_WHERE;

case Tokens.UPDATE:

return StatementTypes.UPDATE_WHERE;

default :

throw Error.runtimeError(ErrorCode.U_S0500,"TriggerDef");

}

}

Location: TriggerDef.java

Content: 

public String getProcedureSQL(){

  return routine == null ? null : routine.getSQLBodyDefinition();

}

Location: TriggerDef.java

Content: 

public StringBuffer getSQLMain(){

  StringBuffer sb=new StringBuffer(256);

  sb.append(Tokens.T_CREATE).append(' ');

  sb.append(Tokens.T_TRIGGER).append(' ');

  sb.append(name.getSchemaQualifiedStatementName()).append(' ');

  sb.append(getActionTimingString()).append(' ');

  sb.append(getEventTypeString()).append(' ');

  if (updateColumns != null) {

    sb.append(Tokens.T_OF).append(' ');

    for (int i=0; i < updateColumns.length; i++) {

      if (i != 0) {

        sb.append(',');

      }

      HsqlName name=table.getColumn(updateColumns[i]).getName();

      sb.append(name.statementName);

    }

    sb.append(' ');

  }

  sb.append(Tokens.T_ON).append(' ');

  sb.append(table.getName().getSchemaQualifiedStatementName());

  sb.append(' ');

  if (hasTransitionRanges || hasTransitionTables) {

    sb.append(Tokens.T_REFERENCING).append(' ');

    if (rangeVars[OLD_ROW] != null) {

      sb.append(Tokens.T_OLD).append(' ').append(Tokens.T_ROW);

      sb.append(' ').append(Tokens.T_AS).append(' ');

      sb.append(rangeVars[OLD_ROW].getTableAlias().getStatementName());

      sb.append(' ');

    }

    if (rangeVars[NEW_ROW] != null) {

      sb.append(Tokens.T_NEW).append(' ').append(Tokens.T_ROW);

      sb.append(' ').append(Tokens.T_AS).append(' ');

      sb.append(rangeVars[NEW_ROW].getTableAlias().getStatementName());

      sb.append(' ');

    }

    if (transitions[OLD_TABLE] != null) {

      sb.append(Tokens.T_OLD).append(' ').append(Tokens.T_TABLE);

      sb.append(' ').append(Tokens.T_AS).append(' ');

      sb.append(transitions[OLD_TABLE].getName().statementName);

      sb.append(' ');

    }

    if (transitions[NEW_TABLE] != null) {

      sb.append(Tokens.T_OLD).append(' ').append(Tokens.T_TABLE);

      sb.append(' ').append(Tokens.T_AS).append(' ');

      sb.append(transitions[NEW_TABLE].getName().statementName);

      sb.append(' ');

    }

  }

  if (forEachRow) {

    sb.append(Tokens.T_FOR).append(' ');

    sb.append(Tokens.T_EACH).append(' ');

    sb.append(Tokens.T_ROW).append(' ');

  }

  if (condition != Expression.EXPR_TRUE) {

    sb.append(Tokens.T_WHEN).append(' ');

    sb.append(Tokens.T_OPENBRACKET).append(conditionSQL);

    sb.append(Tokens.T_CLOSEBRACKET).append(' ');

  }

  return sb;

}

Location: TriggerDef.java

Content: 

static int getTiming(int token){

switch (token) {

case Tokens.BEFORE:

    return TriggerDef.BEFORE;

case Tokens.AFTER:

  return TriggerDef.AFTER;

case Tokens.INSTEAD:

return TriggerDef.INSTEAD;

default :

throw Error.runtimeError(ErrorCode.U_S0500,"TriggerDef");

}

}

Location: TriggerDef.java

Content: 

public int[] getUpdateColumnIndexes(){

  return updateColumns;

}

Location: TriggerDef.java

Content: 

public boolean hasNewRow(){

  return rangeVars[NEW_ROW] != null;

}

Location: TriggerDef.java

Content: 

public boolean hasNewTable(){

  return false;

}

Location: TriggerDef.java

Content: 

public boolean hasOldRow(){

  return rangeVars[OLD_ROW] != null;

}

Location: TriggerDef.java

Content: 

public boolean hasOldTable(){

  return false;

}

Location: TriggerDef.java

Content: 

public boolean isBusy(){

  return rowsQueued != 0;

}

Location: TriggerDef.java

Content: 

public boolean isForEachRow(){

  return forEachRow;

}

Location: TriggerDef.java

Content: 

/** 

 * pop2 method declaration <P> The consumer (trigger) thread waits for an event to be queued <P> <B>Note: </B> This push/pop pairing assumes a single producer thread and a single consumer thread _only_.

 * @return  Description of the Return Value

 */

TriggerData popPair(){

  readLock.lock();

  try {

    if (rowsQueued == 0) {

      try {

        wait();

      }

 catch (      InterruptedException e) {

      }

    }

    rowsQueued--;

    notify();

    if (pendingQueue.size() == 0) {

      return null;

    }

 else {

      return (TriggerData)pendingQueue.removeFirst();

    }

  }

  finally {

    readLock.unlock();

  }

}

Location: TriggerDef.java

Content: 

/** 

 * The main thread tells the trigger thread to fire by this call. If this Trigger is not threaded then the fire method is called immediately and executed by the main thread. Otherwise, the row data objects are added to the queue to be used by the Trigger thread.

 * @param row1

 * @param row2

 */

void pushPair(Session session,Object[] oldData,Object[] newData){

  readLock.lock();

  try {

    if (maxRowsQueued == 0) {

      if (condition != Expression.EXPR_TRUE) {

        session.sessionContext.triggerArguments=new Object[][]{oldData,newData};

        if (!condition.testCondition(session)) {

          return;

        }

      }

      session.getInternalConnection();

      try {

        trigger.fire(triggerType,name.name,table.getName().name,oldData,newData);

      }

  finally {

        session.releaseInternalConnection();

      }

      return;

    }

    if (rowsQueued >= maxRowsQueued) {

      if (nowait) {

        pendingQueue.removeLast();

      }

 else {

        try {

          wait();

        }

 catch (        InterruptedException e) {

        }

        rowsQueued++;

      }

    }

 else {

      rowsQueued++;

    }

    pendingQueue.add(new TriggerData(session,oldData,newData));

    notify();

  }

  finally {

    readLock.unlock();

  }

}

Location: TriggerDef.java

Content: 

/** 

 * Given the SQL creating the trigger, set up the index to the HsqlArrayList[] and the associated GRANT type

 */

void setUpIndexesAndTypes(){

  triggerType=0;

switch (operationType) {

case StatementTypes.INSERT:

    triggerType=Trigger.INSERT_AFTER;

  break;

case StatementTypes.DELETE_WHERE:

triggerType=Trigger.DELETE_AFTER;

break;

case StatementTypes.UPDATE_WHERE:

triggerType=Trigger.UPDATE_AFTER;

break;

default :

throw Error.runtimeError(ErrorCode.U_S0500,"TriggerDef");

}

if (forEachRow) {

triggerType+=NUM_TRIGGER_OPS;

}

if (actionTiming == TriggerDef.BEFORE || actionTiming == TriggerDef.INSTEAD) {

triggerType+=NUM_TRIGGER_OPS;

}

}

Location: TriggerDef.java

Content: 

/** 

 * signal the thread to stop

 */

public void terminate(){

  readLock.lock();

  try {

    keepGoing=false;

    notify();

  }

  finally {

    readLock.unlock();

  }

}

Location: TriggerDef.java

Content: 

TriggerDef(){

}

Location: TriggerDef.java

Content: 

public TriggerDef(HsqlNameManager.HsqlName name,int when,int operation,boolean forEachRow,Table table,Table[] transitions,RangeVariable[] rangeVars,Expression condition,String conditionSQL,int[] updateColumns){

  this.name=name;

  this.actionTiming=when;

  this.operationType=operation;

  this.forEachRow=forEachRow;

  this.table=table;

  this.transitions=transitions;

  this.rangeVars=rangeVars;

  this.condition=condition == null ? Expression.EXPR_TRUE : condition;

  this.updateColumns=updateColumns;

  this.conditionSQL=conditionSQL;

  hasTransitionRanges=rangeVars[OLD_ROW] != null || rangeVars[NEW_ROW] != null;

  hasTransitionTables=transitions[OLD_TABLE] != null || transitions[NEW_TABLE] != null;

  setUpIndexesAndTypes();

}

Location: TriggerDef.java

Content: 

/** 

 * Constructs a new TriggerDef object to represent an HSQLDB trigger declared in an SQL CREATE TRIGGER statement. Changes in 1.7.2 allow the queue size to be specified as 0. A zero queue size causes the Trigger.fire() code to run in the main thread of execution (fully inside the enclosing transaction). Otherwise, the code is run in the Trigger's own thread. (fredt@users)

 * @param name The trigger object's HsqlName

 * @param when whether the trigger firesbefore, after or instead of the triggering event

 * @param operation the triggering operation;currently insert, update, or delete

 * @param forEach indicates whether the trigger is fired for each row(true) or statement (false)

 * @param table the Table object upon which the indicated operationfires the trigger

 * @param triggerClassName the fully qualified named of the class implementingthe org.hsqldb.Trigger (trigger body) interface

 * @param noWait do not wait for available space on the pending queue; ifthe pending queue does not have fewer than nQueueSize queued items, then overwrite the current tail instead

 * @param queueSize the length to which the pending queue may grow beforefurther additions are either blocked or overwrite the tail entry, as determined by noWait

 */

public TriggerDef(HsqlNameManager.HsqlName name,int when,int operation,boolean forEach,Table table,Table[] transitions,RangeVariable[] rangeVars,Expression condition,String conditionSQL,int[] updateColumns,String triggerClassName,boolean noWait,int queueSize){

  this(name,when,operation,forEach,table,transitions,rangeVars,condition,conditionSQL,updateColumns);

  this.triggerClassName=triggerClassName;

  this.nowait=noWait;

  this.maxRowsQueued=queueSize;

  rowsQueued=0;

  pendingQueue=new HsqlDeque();

  Class cl=null;

  try {

    cl=Class.forName(triggerClassName,true,Thread.currentThread().getContextClassLoader());

  }

 catch (  Throwable t1) {

    try {

      cl=Class.forName(triggerClassName);

    }

 catch (    Throwable t) {

    }

  }

  if (cl == null) {

    valid=false;

    trigger=new DefaultTrigger();

  }

 else {

    try {

      trigger=(Trigger)cl.newInstance();

    }

 catch (    Throwable t1) {

      valid=false;

      trigger=new DefaultTrigger();

    }

  }

}

